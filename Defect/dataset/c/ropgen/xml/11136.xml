<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11136.c" pos:tabs="8"><function pos:start="1:1" pos:end="105:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">set_kernel_args</name><parameter_list pos:start="1:28" pos:end="1:61">(<parameter pos:start="1:29" pos:end="1:60"><decl pos:start="1:29" pos:end="1:60"><type pos:start="1:29" pos:end="1:60"><specifier pos:start="1:29" pos:end="1:33">const</specifier> <name pos:start="1:35" pos:end="1:54"><name pos:start="1:35" pos:end="1:40">struct</name> <name pos:start="1:42" pos:end="1:54">arm_boot_info</name></name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:60">info</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="105:1">{<block_content pos:start="5:5" pos:end="103:21">

    <decl_stmt pos:start="5:5" pos:end="5:40"><decl pos:start="5:5" pos:end="5:39"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:19">initrd_size</name> <init pos:start="5:21" pos:end="5:39">= <expr pos:start="5:23" pos:end="5:39"><name pos:start="5:23" pos:end="5:39"><name pos:start="5:23" pos:end="5:26">info</name><operator pos:start="5:27" pos:end="5:28">-&gt;</operator><name pos:start="5:29" pos:end="5:39">initrd_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:49"><decl pos:start="7:5" pos:end="7:48"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:22">target_phys_addr_t</name></type> <name pos:start="7:24" pos:end="7:27">base</name> <init pos:start="7:29" pos:end="7:48">= <expr pos:start="7:31" pos:end="7:48"><name pos:start="7:31" pos:end="7:48"><name pos:start="7:31" pos:end="7:34">info</name><operator pos:start="7:35" pos:end="7:36">-&gt;</operator><name pos:start="7:37" pos:end="7:48">loader_start</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:22">target_phys_addr_t</name></type> <name pos:start="9:24" pos:end="9:24">p</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:32"><expr pos:start="13:5" pos:end="13:31"><name pos:start="13:5" pos:end="13:5">p</name> <operator pos:start="13:7" pos:end="13:7">=</operator> <name pos:start="13:9" pos:end="13:12">base</name> <operator pos:start="13:14" pos:end="13:14">+</operator> <name pos:start="13:16" pos:end="13:31">KERNEL_ARGS_ADDR</name></expr>;</expr_stmt>

    <comment type="block" pos:start="15:5" pos:end="15:19">/* ATAG_CORE */</comment>

    <expr_stmt pos:start="17:5" pos:end="17:21"><expr pos:start="17:5" pos:end="17:20"><call pos:start="17:5" pos:end="17:20"><name pos:start="17:5" pos:end="17:14">WRITE_WORD</name><argument_list pos:start="17:15" pos:end="17:20">(<argument pos:start="17:16" pos:end="17:16"><expr pos:start="17:16" pos:end="17:16"><name pos:start="17:16" pos:end="17:16">p</name></expr></argument>, <argument pos:start="17:19" pos:end="17:19"><expr pos:start="17:19" pos:end="17:19"><literal type="number" pos:start="17:19" pos:end="17:19">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:30"><expr pos:start="19:5" pos:end="19:29"><call pos:start="19:5" pos:end="19:29"><name pos:start="19:5" pos:end="19:14">WRITE_WORD</name><argument_list pos:start="19:15" pos:end="19:29">(<argument pos:start="19:16" pos:end="19:16"><expr pos:start="19:16" pos:end="19:16"><name pos:start="19:16" pos:end="19:16">p</name></expr></argument>, <argument pos:start="19:19" pos:end="19:28"><expr pos:start="19:19" pos:end="19:28"><literal type="number" pos:start="19:19" pos:end="19:28">0x54410001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:21"><expr pos:start="21:5" pos:end="21:20"><call pos:start="21:5" pos:end="21:20"><name pos:start="21:5" pos:end="21:14">WRITE_WORD</name><argument_list pos:start="21:15" pos:end="21:20">(<argument pos:start="21:16" pos:end="21:16"><expr pos:start="21:16" pos:end="21:16"><name pos:start="21:16" pos:end="21:16">p</name></expr></argument>, <argument pos:start="21:19" pos:end="21:19"><expr pos:start="21:19" pos:end="21:19"><literal type="number" pos:start="21:19" pos:end="21:19">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:26"><expr pos:start="23:5" pos:end="23:25"><call pos:start="23:5" pos:end="23:25"><name pos:start="23:5" pos:end="23:14">WRITE_WORD</name><argument_list pos:start="23:15" pos:end="23:25">(<argument pos:start="23:16" pos:end="23:16"><expr pos:start="23:16" pos:end="23:16"><name pos:start="23:16" pos:end="23:16">p</name></expr></argument>, <argument pos:start="23:19" pos:end="23:24"><expr pos:start="23:19" pos:end="23:24"><literal type="number" pos:start="23:19" pos:end="23:24">0x1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:21"><expr pos:start="25:5" pos:end="25:20"><call pos:start="25:5" pos:end="25:20"><name pos:start="25:5" pos:end="25:14">WRITE_WORD</name><argument_list pos:start="25:15" pos:end="25:20">(<argument pos:start="25:16" pos:end="25:16"><expr pos:start="25:16" pos:end="25:16"><name pos:start="25:16" pos:end="25:16">p</name></expr></argument>, <argument pos:start="25:19" pos:end="25:19"><expr pos:start="25:19" pos:end="25:19"><literal type="number" pos:start="25:19" pos:end="25:19">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="27:5" pos:end="27:18">/* ATAG_MEM */</comment>

    <comment type="block" pos:start="29:5" pos:end="29:54">/* TODO: handle multiple chips on one ATAG list */</comment>

    <expr_stmt pos:start="31:5" pos:end="31:21"><expr pos:start="31:5" pos:end="31:20"><call pos:start="31:5" pos:end="31:20"><name pos:start="31:5" pos:end="31:14">WRITE_WORD</name><argument_list pos:start="31:15" pos:end="31:20">(<argument pos:start="31:16" pos:end="31:16"><expr pos:start="31:16" pos:end="31:16"><name pos:start="31:16" pos:end="31:16">p</name></expr></argument>, <argument pos:start="31:19" pos:end="31:19"><expr pos:start="31:19" pos:end="31:19"><literal type="number" pos:start="31:19" pos:end="31:19">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:30"><expr pos:start="33:5" pos:end="33:29"><call pos:start="33:5" pos:end="33:29"><name pos:start="33:5" pos:end="33:14">WRITE_WORD</name><argument_list pos:start="33:15" pos:end="33:29">(<argument pos:start="33:16" pos:end="33:16"><expr pos:start="33:16" pos:end="33:16"><name pos:start="33:16" pos:end="33:16">p</name></expr></argument>, <argument pos:start="33:19" pos:end="33:28"><expr pos:start="33:19" pos:end="33:28"><literal type="number" pos:start="33:19" pos:end="33:28">0x54410002</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:34"><expr pos:start="35:5" pos:end="35:33"><call pos:start="35:5" pos:end="35:33"><name pos:start="35:5" pos:end="35:14">WRITE_WORD</name><argument_list pos:start="35:15" pos:end="35:33">(<argument pos:start="35:16" pos:end="35:16"><expr pos:start="35:16" pos:end="35:16"><name pos:start="35:16" pos:end="35:16">p</name></expr></argument>, <argument pos:start="35:19" pos:end="35:32"><expr pos:start="35:19" pos:end="35:32"><name pos:start="35:19" pos:end="35:32"><name pos:start="35:19" pos:end="35:22">info</name><operator pos:start="35:23" pos:end="35:24">-&gt;</operator><name pos:start="35:25" pos:end="35:32">ram_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:38"><expr pos:start="37:5" pos:end="37:37"><call pos:start="37:5" pos:end="37:37"><name pos:start="37:5" pos:end="37:14">WRITE_WORD</name><argument_list pos:start="37:15" pos:end="37:37">(<argument pos:start="37:16" pos:end="37:16"><expr pos:start="37:16" pos:end="37:16"><name pos:start="37:16" pos:end="37:16">p</name></expr></argument>, <argument pos:start="37:19" pos:end="37:36"><expr pos:start="37:19" pos:end="37:36"><name pos:start="37:19" pos:end="37:36"><name pos:start="37:19" pos:end="37:22">info</name><operator pos:start="37:23" pos:end="37:24">-&gt;</operator><name pos:start="37:25" pos:end="37:36">loader_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="51:5"><if pos:start="39:5" pos:end="51:5">if <condition pos:start="39:8" pos:end="39:20">(<expr pos:start="39:9" pos:end="39:19"><name pos:start="39:9" pos:end="39:19">initrd_size</name></expr>)</condition> <block pos:start="39:22" pos:end="51:5">{<block_content pos:start="43:9" pos:end="49:35">

        <comment type="block" pos:start="41:9" pos:end="41:26">/* ATAG_INITRD2 */</comment>

        <expr_stmt pos:start="43:9" pos:end="43:25"><expr pos:start="43:9" pos:end="43:24"><call pos:start="43:9" pos:end="43:24"><name pos:start="43:9" pos:end="43:18">WRITE_WORD</name><argument_list pos:start="43:19" pos:end="43:24">(<argument pos:start="43:20" pos:end="43:20"><expr pos:start="43:20" pos:end="43:20"><name pos:start="43:20" pos:end="43:20">p</name></expr></argument>, <argument pos:start="43:23" pos:end="43:23"><expr pos:start="43:23" pos:end="43:23"><literal type="number" pos:start="43:23" pos:end="43:23">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:34"><expr pos:start="45:9" pos:end="45:33"><call pos:start="45:9" pos:end="45:33"><name pos:start="45:9" pos:end="45:18">WRITE_WORD</name><argument_list pos:start="45:19" pos:end="45:33">(<argument pos:start="45:20" pos:end="45:20"><expr pos:start="45:20" pos:end="45:20"><name pos:start="45:20" pos:end="45:20">p</name></expr></argument>, <argument pos:start="45:23" pos:end="45:32"><expr pos:start="45:23" pos:end="45:32"><literal type="number" pos:start="45:23" pos:end="45:32">0x54420005</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:61"><expr pos:start="47:9" pos:end="47:60"><call pos:start="47:9" pos:end="47:60"><name pos:start="47:9" pos:end="47:18">WRITE_WORD</name><argument_list pos:start="47:19" pos:end="47:60">(<argument pos:start="47:20" pos:end="47:20"><expr pos:start="47:20" pos:end="47:20"><name pos:start="47:20" pos:end="47:20">p</name></expr></argument>, <argument pos:start="47:23" pos:end="47:59"><expr pos:start="47:23" pos:end="47:59"><name pos:start="47:23" pos:end="47:40"><name pos:start="47:23" pos:end="47:26">info</name><operator pos:start="47:27" pos:end="47:28">-&gt;</operator><name pos:start="47:29" pos:end="47:40">loader_start</name></name> <operator pos:start="47:42" pos:end="47:42">+</operator> <name pos:start="47:44" pos:end="47:59">INITRD_LOAD_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:35"><expr pos:start="49:9" pos:end="49:34"><call pos:start="49:9" pos:end="49:34"><name pos:start="49:9" pos:end="49:18">WRITE_WORD</name><argument_list pos:start="49:19" pos:end="49:34">(<argument pos:start="49:20" pos:end="49:20"><expr pos:start="49:20" pos:end="49:20"><name pos:start="49:20" pos:end="49:20">p</name></expr></argument>, <argument pos:start="49:23" pos:end="49:33"><expr pos:start="49:23" pos:end="49:33"><name pos:start="49:23" pos:end="49:33">initrd_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="53:5" pos:end="75:5"><if pos:start="53:5" pos:end="75:5">if <condition pos:start="53:8" pos:end="53:54">(<expr pos:start="53:9" pos:end="53:53"><name pos:start="53:9" pos:end="53:28"><name pos:start="53:9" pos:end="53:12">info</name><operator pos:start="53:13" pos:end="53:14">-&gt;</operator><name pos:start="53:15" pos:end="53:28">kernel_cmdline</name></name> <operator pos:start="53:30" pos:end="53:31">&amp;&amp;</operator> <operator pos:start="53:33" pos:end="53:33">*</operator><name pos:start="53:34" pos:end="53:53"><name pos:start="53:34" pos:end="53:37">info</name><operator pos:start="53:38" pos:end="53:39">-&gt;</operator><name pos:start="53:40" pos:end="53:53">kernel_cmdline</name></name></expr>)</condition> <block pos:start="53:56" pos:end="75:5">{<block_content pos:start="57:9" pos:end="73:30">

        <comment type="block" pos:start="55:9" pos:end="55:26">/* ATAG_CMDLINE */</comment>

        <decl_stmt pos:start="57:9" pos:end="57:25"><decl pos:start="57:9" pos:end="57:24"><type pos:start="57:9" pos:end="57:11"><name pos:start="57:9" pos:end="57:11">int</name></type> <name pos:start="57:13" pos:end="57:24">cmdline_size</name></decl>;</decl_stmt>



        <expr_stmt pos:start="61:9" pos:end="61:52"><expr pos:start="61:9" pos:end="61:51"><name pos:start="61:9" pos:end="61:20">cmdline_size</name> <operator pos:start="61:22" pos:end="61:22">=</operator> <call pos:start="61:24" pos:end="61:51"><name pos:start="61:24" pos:end="61:29">strlen</name><argument_list pos:start="61:30" pos:end="61:51">(<argument pos:start="61:31" pos:end="61:50"><expr pos:start="61:31" pos:end="61:50"><name pos:start="61:31" pos:end="61:50"><name pos:start="61:31" pos:end="61:34">info</name><operator pos:start="61:35" pos:end="61:36">-&gt;</operator><name pos:start="61:37" pos:end="61:50">kernel_cmdline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="65:52"><expr pos:start="63:9" pos:end="65:51"><call pos:start="63:9" pos:end="65:51"><name pos:start="63:9" pos:end="63:33">cpu_physical_memory_write</name><argument_list pos:start="63:34" pos:end="65:51">(<argument pos:start="63:35" pos:end="63:39"><expr pos:start="63:35" pos:end="63:39"><name pos:start="63:35" pos:end="63:35">p</name> <operator pos:start="63:37" pos:end="63:37">+</operator> <literal type="number" pos:start="63:39" pos:end="63:39">8</literal></expr></argument>, <argument pos:start="63:42" pos:end="63:69"><expr pos:start="63:42" pos:end="63:69"><operator pos:start="63:42" pos:end="63:42">(</operator><name pos:start="63:43" pos:end="63:46">void</name> <operator pos:start="63:48" pos:end="63:48">*</operator><operator pos:start="63:49" pos:end="63:49">)</operator><name pos:start="63:50" pos:end="63:69"><name pos:start="63:50" pos:end="63:53">info</name><operator pos:start="63:54" pos:end="63:55">-&gt;</operator><name pos:start="63:56" pos:end="63:69">kernel_cmdline</name></name></expr></argument>,

                                  <argument pos:start="65:35" pos:end="65:50"><expr pos:start="65:35" pos:end="65:50"><name pos:start="65:35" pos:end="65:46">cmdline_size</name> <operator pos:start="65:48" pos:end="65:48">+</operator> <literal type="number" pos:start="65:50" pos:end="65:50">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:47"><expr pos:start="67:9" pos:end="67:46"><name pos:start="67:9" pos:end="67:20">cmdline_size</name> <operator pos:start="67:22" pos:end="67:22">=</operator> <operator pos:start="67:24" pos:end="67:24">(</operator><name pos:start="67:25" pos:end="67:36">cmdline_size</name> <operator pos:start="67:38" pos:end="67:39">&gt;&gt;</operator> <literal type="number" pos:start="67:41" pos:end="67:41">2</literal><operator pos:start="67:42" pos:end="67:42">)</operator> <operator pos:start="67:44" pos:end="67:44">+</operator> <literal type="number" pos:start="67:46" pos:end="67:46">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:40"><expr pos:start="69:9" pos:end="69:39"><call pos:start="69:9" pos:end="69:39"><name pos:start="69:9" pos:end="69:18">WRITE_WORD</name><argument_list pos:start="69:19" pos:end="69:39">(<argument pos:start="69:20" pos:end="69:20"><expr pos:start="69:20" pos:end="69:20"><name pos:start="69:20" pos:end="69:20">p</name></expr></argument>, <argument pos:start="69:23" pos:end="69:38"><expr pos:start="69:23" pos:end="69:38"><name pos:start="69:23" pos:end="69:34">cmdline_size</name> <operator pos:start="69:36" pos:end="69:36">+</operator> <literal type="number" pos:start="69:38" pos:end="69:38">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:34"><expr pos:start="71:9" pos:end="71:33"><call pos:start="71:9" pos:end="71:33"><name pos:start="71:9" pos:end="71:18">WRITE_WORD</name><argument_list pos:start="71:19" pos:end="71:33">(<argument pos:start="71:20" pos:end="71:20"><expr pos:start="71:20" pos:end="71:20"><name pos:start="71:20" pos:end="71:20">p</name></expr></argument>, <argument pos:start="71:23" pos:end="71:32"><expr pos:start="71:23" pos:end="71:32"><literal type="number" pos:start="71:23" pos:end="71:32">0x54410009</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:30"><expr pos:start="73:9" pos:end="73:29"><name pos:start="73:9" pos:end="73:9">p</name> <operator pos:start="73:11" pos:end="73:12">+=</operator> <name pos:start="73:14" pos:end="73:25">cmdline_size</name> <operator pos:start="73:27" pos:end="73:27">*</operator> <literal type="number" pos:start="73:29" pos:end="73:29">4</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="77:5" pos:end="97:5"><if pos:start="77:5" pos:end="97:5">if <condition pos:start="77:8" pos:end="77:25">(<expr pos:start="77:9" pos:end="77:24"><name pos:start="77:9" pos:end="77:24"><name pos:start="77:9" pos:end="77:12">info</name><operator pos:start="77:13" pos:end="77:14">-&gt;</operator><name pos:start="77:15" pos:end="77:24">atag_board</name></name></expr>)</condition> <block pos:start="77:27" pos:end="97:5">{<block_content pos:start="81:9" pos:end="95:28">

        <comment type="block" pos:start="79:9" pos:end="79:24">/* ATAG_BOARD */</comment>

        <decl_stmt pos:start="81:9" pos:end="81:27"><decl pos:start="81:9" pos:end="81:26"><type pos:start="81:9" pos:end="81:11"><name pos:start="81:9" pos:end="81:11">int</name></type> <name pos:start="81:13" pos:end="81:26">atag_board_len</name></decl>;</decl_stmt>

        <decl_stmt pos:start="83:9" pos:end="83:39"><decl pos:start="83:9" pos:end="83:38"><type pos:start="83:9" pos:end="83:15"><name pos:start="83:9" pos:end="83:15">uint8_t</name></type> <name pos:start="83:17" pos:end="83:38"><name pos:start="83:17" pos:end="83:30">atag_board_buf</name><index pos:start="83:31" pos:end="83:38">[<expr pos:start="83:32" pos:end="83:37"><literal type="number" pos:start="83:32" pos:end="83:37">0x1000</literal></expr>]</index></name></decl>;</decl_stmt>



        <expr_stmt pos:start="87:9" pos:end="87:75"><expr pos:start="87:9" pos:end="87:74"><name pos:start="87:9" pos:end="87:22">atag_board_len</name> <operator pos:start="87:24" pos:end="87:24">=</operator> <operator pos:start="87:26" pos:end="87:26">(</operator><call pos:start="87:27" pos:end="87:64"><name pos:start="87:27" pos:end="87:42"><name pos:start="87:27" pos:end="87:30">info</name><operator pos:start="87:31" pos:end="87:32">-&gt;</operator><name pos:start="87:33" pos:end="87:42">atag_board</name></name><argument_list pos:start="87:43" pos:end="87:64">(<argument pos:start="87:44" pos:end="87:47"><expr pos:start="87:44" pos:end="87:47"><name pos:start="87:44" pos:end="87:47">info</name></expr></argument>, <argument pos:start="87:50" pos:end="87:63"><expr pos:start="87:50" pos:end="87:63"><name pos:start="87:50" pos:end="87:63">atag_board_buf</name></expr></argument>)</argument_list></call> <operator pos:start="87:66" pos:end="87:66">+</operator> <literal type="number" pos:start="87:68" pos:end="87:68">3</literal><operator pos:start="87:69" pos:end="87:69">)</operator> <operator pos:start="87:71" pos:end="87:71">&amp;</operator> <operator pos:start="87:73" pos:end="87:73">~</operator><literal type="number" pos:start="87:74" pos:end="87:74">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:49"><expr pos:start="89:9" pos:end="89:48"><call pos:start="89:9" pos:end="89:48"><name pos:start="89:9" pos:end="89:18">WRITE_WORD</name><argument_list pos:start="89:19" pos:end="89:48">(<argument pos:start="89:20" pos:end="89:20"><expr pos:start="89:20" pos:end="89:20"><name pos:start="89:20" pos:end="89:20">p</name></expr></argument>, <argument pos:start="89:23" pos:end="89:47"><expr pos:start="89:23" pos:end="89:47"><operator pos:start="89:23" pos:end="89:23">(</operator><name pos:start="89:24" pos:end="89:37">atag_board_len</name> <operator pos:start="89:39" pos:end="89:39">+</operator> <literal type="number" pos:start="89:41" pos:end="89:41">8</literal><operator pos:start="89:42" pos:end="89:42">)</operator> <operator pos:start="89:44" pos:end="89:45">&gt;&gt;</operator> <literal type="number" pos:start="89:47" pos:end="89:47">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:34"><expr pos:start="91:9" pos:end="91:33"><call pos:start="91:9" pos:end="91:33"><name pos:start="91:9" pos:end="91:18">WRITE_WORD</name><argument_list pos:start="91:19" pos:end="91:33">(<argument pos:start="91:20" pos:end="91:20"><expr pos:start="91:20" pos:end="91:20"><name pos:start="91:20" pos:end="91:20">p</name></expr></argument>, <argument pos:start="91:23" pos:end="91:32"><expr pos:start="91:23" pos:end="91:32"><literal type="number" pos:start="91:23" pos:end="91:32">0x414f4d50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:69"><expr pos:start="93:9" pos:end="93:68"><call pos:start="93:9" pos:end="93:68"><name pos:start="93:9" pos:end="93:33">cpu_physical_memory_write</name><argument_list pos:start="93:34" pos:end="93:68">(<argument pos:start="93:35" pos:end="93:35"><expr pos:start="93:35" pos:end="93:35"><name pos:start="93:35" pos:end="93:35">p</name></expr></argument>, <argument pos:start="93:38" pos:end="93:51"><expr pos:start="93:38" pos:end="93:51"><name pos:start="93:38" pos:end="93:51">atag_board_buf</name></expr></argument>, <argument pos:start="93:54" pos:end="93:67"><expr pos:start="93:54" pos:end="93:67"><name pos:start="93:54" pos:end="93:67">atag_board_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:28"><expr pos:start="95:9" pos:end="95:27"><name pos:start="95:9" pos:end="95:9">p</name> <operator pos:start="95:11" pos:end="95:12">+=</operator> <name pos:start="95:14" pos:end="95:27">atag_board_len</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="99:5" pos:end="99:18">/* ATAG_END */</comment>

    <expr_stmt pos:start="101:5" pos:end="101:21"><expr pos:start="101:5" pos:end="101:20"><call pos:start="101:5" pos:end="101:20"><name pos:start="101:5" pos:end="101:14">WRITE_WORD</name><argument_list pos:start="101:15" pos:end="101:20">(<argument pos:start="101:16" pos:end="101:16"><expr pos:start="101:16" pos:end="101:16"><name pos:start="101:16" pos:end="101:16">p</name></expr></argument>, <argument pos:start="101:19" pos:end="101:19"><expr pos:start="101:19" pos:end="101:19"><literal type="number" pos:start="101:19" pos:end="101:19">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:21"><expr pos:start="103:5" pos:end="103:20"><call pos:start="103:5" pos:end="103:20"><name pos:start="103:5" pos:end="103:14">WRITE_WORD</name><argument_list pos:start="103:15" pos:end="103:20">(<argument pos:start="103:16" pos:end="103:16"><expr pos:start="103:16" pos:end="103:16"><name pos:start="103:16" pos:end="103:16">p</name></expr></argument>, <argument pos:start="103:19" pos:end="103:19"><expr pos:start="103:19" pos:end="103:19"><literal type="number" pos:start="103:19" pos:end="103:19">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
