<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20597.c" pos:tabs="8"><function pos:start="1:1" pos:end="139:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">net_client_init1</name><parameter_list pos:start="1:28" pos:end="1:76">(<parameter pos:start="1:29" pos:end="1:46"><decl pos:start="1:29" pos:end="1:46"><type pos:start="1:29" pos:end="1:46"><specifier pos:start="1:29" pos:end="1:33">const</specifier> <name pos:start="1:35" pos:end="1:38">void</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:46">object</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:61"><decl pos:start="1:49" pos:end="1:61"><type pos:start="1:49" pos:end="1:61"><name pos:start="1:49" pos:end="1:51">int</name></type> <name pos:start="1:53" pos:end="1:61">is_netdev</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:75"><decl pos:start="1:64" pos:end="1:75"><type pos:start="1:64" pos:end="1:75"><name pos:start="1:64" pos:end="1:68">Error</name> <modifier pos:start="1:70" pos:end="1:70">*</modifier><modifier pos:start="1:71" pos:end="1:71">*</modifier></type><name pos:start="1:72" pos:end="1:75">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="139:1">{<block_content pos:start="5:5" pos:end="137:13">

    <union pos:start="5:5" pos:end="11:8">union <block pos:start="5:11" pos:end="11:5">{

        <decl_stmt pos:start="7:9" pos:end="7:32"><decl pos:start="7:9" pos:end="7:31"><type pos:start="7:9" pos:end="7:25"><specifier pos:start="7:9" pos:end="7:13">const</specifier> <name pos:start="7:15" pos:end="7:20">Netdev</name>    <modifier pos:start="7:25" pos:end="7:25">*</modifier></type><name pos:start="7:26" pos:end="7:31">netdev</name></decl>;</decl_stmt>

        <decl_stmt pos:start="9:9" pos:end="9:29"><decl pos:start="9:9" pos:end="9:28"><type pos:start="9:9" pos:end="9:25"><specifier pos:start="9:9" pos:end="9:13">const</specifier> <name pos:start="9:15" pos:end="9:23">NetLegacy</name> <modifier pos:start="9:25" pos:end="9:25">*</modifier></type><name pos:start="9:26" pos:end="9:28">net</name></decl>;</decl_stmt>

    }</block> <decl pos:start="11:7" pos:end="11:7"><name pos:start="11:7" pos:end="11:7">u</name></decl>;</union>

    <decl_stmt pos:start="13:5" pos:end="13:33"><decl pos:start="13:5" pos:end="13:32"><type pos:start="13:5" pos:end="13:28"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:26">NetClientOptions</name> <modifier pos:start="13:28" pos:end="13:28">*</modifier></type><name pos:start="13:29" pos:end="13:32">opts</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:16"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:14">char</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:20">name</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="97:5"><if pos:start="19:5" pos:end="87:5">if <condition pos:start="19:8" pos:end="19:18">(<expr pos:start="19:9" pos:end="19:17"><name pos:start="19:9" pos:end="19:17">is_netdev</name></expr>)</condition> <block pos:start="19:20" pos:end="87:5">{<block_content pos:start="21:9" pos:end="85:9">

        <expr_stmt pos:start="21:9" pos:end="21:26"><expr pos:start="21:9" pos:end="21:25"><name pos:start="21:9" pos:end="21:16"><name pos:start="21:9" pos:end="21:9">u</name><operator pos:start="21:10" pos:end="21:10">.</operator><name pos:start="21:11" pos:end="21:16">netdev</name></name> <operator pos:start="21:18" pos:end="21:18">=</operator> <name pos:start="21:20" pos:end="21:25">object</name></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:30"><expr pos:start="23:9" pos:end="23:29"><name pos:start="23:9" pos:end="23:12">opts</name> <operator pos:start="23:14" pos:end="23:14">=</operator> <name pos:start="23:16" pos:end="23:29"><name pos:start="23:16" pos:end="23:16">u</name><operator pos:start="23:17" pos:end="23:17">.</operator><name pos:start="23:18" pos:end="23:23">netdev</name><operator pos:start="23:24" pos:end="23:25">-&gt;</operator><name pos:start="23:26" pos:end="23:29">opts</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:28"><expr pos:start="25:9" pos:end="25:27"><name pos:start="25:9" pos:end="25:12">name</name> <operator pos:start="25:14" pos:end="25:14">=</operator> <name pos:start="25:16" pos:end="25:27"><name pos:start="25:16" pos:end="25:16">u</name><operator pos:start="25:17" pos:end="25:17">.</operator><name pos:start="25:18" pos:end="25:23">netdev</name><operator pos:start="25:24" pos:end="25:25">-&gt;</operator><name pos:start="25:26" pos:end="25:27">id</name></name></expr>;</expr_stmt>



        <switch pos:start="29:9" pos:end="85:9">switch <condition pos:start="29:16" pos:end="29:27">(<expr pos:start="29:17" pos:end="29:26"><name pos:start="29:17" pos:end="29:26"><name pos:start="29:17" pos:end="29:20">opts</name><operator pos:start="29:21" pos:end="29:22">-&gt;</operator><name pos:start="29:23" pos:end="29:26">kind</name></name></expr>)</condition> <block pos:start="29:29" pos:end="85:9">{<block_content pos:start="33:9" pos:end="83:22">

<cpp:ifdef pos:start="31:1" pos:end="31:19">#<cpp:directive pos:start="31:2" pos:end="31:6">ifdef</cpp:directive> <name pos:start="31:8" pos:end="31:19">CONFIG_SLIRP</name></cpp:ifdef>

        <case pos:start="33:9" pos:end="36:0">case <expr pos:start="33:14" pos:end="33:41"><name pos:start="33:14" pos:end="33:41">NET_CLIENT_OPTIONS_KIND_USER</name></expr>:</case>

<cpp:endif pos:start="35:1" pos:end="35:6">#<cpp:directive pos:start="35:2" pos:end="35:6">endif</cpp:directive></cpp:endif>

        <case pos:start="37:9" pos:end="37:41">case <expr pos:start="37:14" pos:end="37:40"><name pos:start="37:14" pos:end="37:40">NET_CLIENT_OPTIONS_KIND_TAP</name></expr>:</case>

        <case pos:start="39:9" pos:end="42:0">case <expr pos:start="39:14" pos:end="39:43"><name pos:start="39:14" pos:end="39:43">NET_CLIENT_OPTIONS_KIND_SOCKET</name></expr>:</case>

<cpp:ifdef pos:start="41:1" pos:end="41:17">#<cpp:directive pos:start="41:2" pos:end="41:6">ifdef</cpp:directive> <name pos:start="41:8" pos:end="41:17">CONFIG_VDE</name></cpp:ifdef>

        <case pos:start="43:9" pos:end="48:0">case <expr pos:start="43:14" pos:end="43:40"><name pos:start="43:14" pos:end="43:40">NET_CLIENT_OPTIONS_KIND_VDE</name></expr>:</case>

<cpp:endif pos:start="45:1" pos:end="45:6">#<cpp:directive pos:start="45:2" pos:end="45:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="47:1" pos:end="47:20">#<cpp:directive pos:start="47:2" pos:end="47:6">ifdef</cpp:directive> <name pos:start="47:8" pos:end="47:20">CONFIG_NETMAP</name></cpp:ifdef>

        <case pos:start="49:9" pos:end="54:0">case <expr pos:start="49:14" pos:end="49:43"><name pos:start="49:14" pos:end="49:43">NET_CLIENT_OPTIONS_KIND_NETMAP</name></expr>:</case>

<cpp:endif pos:start="51:1" pos:end="51:6">#<cpp:directive pos:start="51:2" pos:end="51:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="53:1" pos:end="53:24">#<cpp:directive pos:start="53:2" pos:end="53:6">ifdef</cpp:directive> <name pos:start="53:8" pos:end="53:24">CONFIG_NET_BRIDGE</name></cpp:ifdef>

        <case pos:start="55:9" pos:end="58:0">case <expr pos:start="55:14" pos:end="55:43"><name pos:start="55:14" pos:end="55:43">NET_CLIENT_OPTIONS_KIND_BRIDGE</name></expr>:</case>

<cpp:endif pos:start="57:1" pos:end="57:6">#<cpp:directive pos:start="57:2" pos:end="57:6">endif</cpp:directive></cpp:endif>

        <case pos:start="59:9" pos:end="62:0">case <expr pos:start="59:14" pos:end="59:44"><name pos:start="59:14" pos:end="59:44">NET_CLIENT_OPTIONS_KIND_HUBPORT</name></expr>:</case>

<cpp:ifdef pos:start="61:1" pos:end="61:28">#<cpp:directive pos:start="61:2" pos:end="61:6">ifdef</cpp:directive> <name pos:start="61:8" pos:end="61:28">CONFIG_VHOST_NET_USED</name></cpp:ifdef>

        <case pos:start="63:9" pos:end="68:0">case <expr pos:start="63:14" pos:end="63:47"><name pos:start="63:14" pos:end="63:47">NET_CLIENT_OPTIONS_KIND_VHOST_USER</name></expr>:</case>

<cpp:endif pos:start="65:1" pos:end="65:6">#<cpp:directive pos:start="65:2" pos:end="65:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="67:1" pos:end="67:19">#<cpp:directive pos:start="67:2" pos:end="67:6">ifdef</cpp:directive> <name pos:start="67:8" pos:end="67:19">CONFIG_LINUX</name></cpp:ifdef>

        <case pos:start="69:9" pos:end="72:0">case <expr pos:start="69:14" pos:end="69:43"><name pos:start="69:14" pos:end="69:43">NET_CLIENT_OPTIONS_KIND_L2TPV3</name></expr>:</case>

<cpp:endif pos:start="71:1" pos:end="71:6">#<cpp:directive pos:start="71:2" pos:end="71:6">endif</cpp:directive></cpp:endif>

            <break pos:start="73:13" pos:end="73:18">break;</break>



        <default pos:start="77:9" pos:end="77:16">default:</default>

            <expr_stmt pos:start="79:13" pos:end="81:47"><expr pos:start="79:13" pos:end="81:46"><call pos:start="79:13" pos:end="81:46"><name pos:start="79:13" pos:end="79:21">error_set</name><argument_list pos:start="79:22" pos:end="81:46">(<argument pos:start="79:23" pos:end="79:26"><expr pos:start="79:23" pos:end="79:26"><name pos:start="79:23" pos:end="79:26">errp</name></expr></argument>, <argument pos:start="79:29" pos:end="79:56"><expr pos:start="79:29" pos:end="79:56"><name pos:start="79:29" pos:end="79:56">QERR_INVALID_PARAMETER_VALUE</name></expr></argument>, <argument pos:start="79:59" pos:end="79:64"><expr pos:start="79:59" pos:end="79:64"><literal type="string" pos:start="79:59" pos:end="79:64">"type"</literal></expr></argument>,

                      <argument pos:start="81:23" pos:end="81:45"><expr pos:start="81:23" pos:end="81:45"><literal type="string" pos:start="81:23" pos:end="81:45">"a netdev backend type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="83:13" pos:end="83:22">return <expr pos:start="83:20" pos:end="83:21"><operator pos:start="83:20" pos:end="83:20">-</operator><literal type="number" pos:start="83:21" pos:end="83:21">1</literal></expr>;</return>

        </block_content>}</block></switch>

    </block_content>}</block></if> <else pos:start="87:7" pos:end="97:5">else <block pos:start="87:12" pos:end="97:5">{<block_content pos:start="89:9" pos:end="95:55">

        <expr_stmt pos:start="89:9" pos:end="89:23"><expr pos:start="89:9" pos:end="89:22"><name pos:start="89:9" pos:end="89:13"><name pos:start="89:9" pos:end="89:9">u</name><operator pos:start="89:10" pos:end="89:10">.</operator><name pos:start="89:11" pos:end="89:13">net</name></name> <operator pos:start="89:15" pos:end="89:15">=</operator> <name pos:start="89:17" pos:end="89:22">object</name></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:27"><expr pos:start="91:9" pos:end="91:26"><name pos:start="91:9" pos:end="91:12">opts</name> <operator pos:start="91:14" pos:end="91:14">=</operator> <name pos:start="91:16" pos:end="91:26"><name pos:start="91:16" pos:end="91:16">u</name><operator pos:start="91:17" pos:end="91:17">.</operator><name pos:start="91:18" pos:end="91:20">net</name><operator pos:start="91:21" pos:end="91:22">-&gt;</operator><name pos:start="91:23" pos:end="91:26">opts</name></name></expr>;</expr_stmt>

        <comment type="block" pos:start="93:9" pos:end="93:78">/* missing optional values have been initialized to "all bits zero" */</comment>

        <expr_stmt pos:start="95:9" pos:end="95:55"><expr pos:start="95:9" pos:end="95:54"><name pos:start="95:9" pos:end="95:12">name</name> <operator pos:start="95:14" pos:end="95:14">=</operator> <ternary pos:start="95:16" pos:end="95:54"><condition pos:start="95:16" pos:end="95:30"><expr pos:start="95:16" pos:end="95:28"><name pos:start="95:16" pos:end="95:28"><name pos:start="95:16" pos:end="95:16">u</name><operator pos:start="95:17" pos:end="95:17">.</operator><name pos:start="95:18" pos:end="95:20">net</name><operator pos:start="95:21" pos:end="95:22">-&gt;</operator><name pos:start="95:23" pos:end="95:28">has_id</name></name></expr> ?</condition><then pos:start="95:32" pos:end="95:40"> <expr pos:start="95:32" pos:end="95:40"><name pos:start="95:32" pos:end="95:40"><name pos:start="95:32" pos:end="95:32">u</name><operator pos:start="95:33" pos:end="95:33">.</operator><name pos:start="95:34" pos:end="95:36">net</name><operator pos:start="95:37" pos:end="95:38">-&gt;</operator><name pos:start="95:39" pos:end="95:40">id</name></name></expr> </then><else pos:start="95:42" pos:end="95:54">: <expr pos:start="95:44" pos:end="95:54"><name pos:start="95:44" pos:end="95:54"><name pos:start="95:44" pos:end="95:44">u</name><operator pos:start="95:45" pos:end="95:45">.</operator><name pos:start="95:46" pos:end="95:48">net</name><operator pos:start="95:49" pos:end="95:50">-&gt;</operator><name pos:start="95:51" pos:end="95:54">name</name></name></expr></else></ternary></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="101:5" pos:end="135:5"><if pos:start="101:5" pos:end="135:5">if <condition pos:start="101:8" pos:end="101:40">(<expr pos:start="101:9" pos:end="101:39"><name pos:start="101:9" pos:end="101:39"><name pos:start="101:9" pos:end="101:27">net_client_init_fun</name><index pos:start="101:28" pos:end="101:39">[<expr pos:start="101:29" pos:end="101:38"><name pos:start="101:29" pos:end="101:38"><name pos:start="101:29" pos:end="101:32">opts</name><operator pos:start="101:33" pos:end="101:34">-&gt;</operator><name pos:start="101:35" pos:end="101:38">kind</name></name></expr>]</index></name></expr>)</condition> <block pos:start="101:42" pos:end="135:5">{<block_content pos:start="103:9" pos:end="133:9">

        <decl_stmt pos:start="103:9" pos:end="103:36"><decl pos:start="103:9" pos:end="103:35"><type pos:start="103:9" pos:end="103:24"><name pos:start="103:9" pos:end="103:22">NetClientState</name> <modifier pos:start="103:24" pos:end="103:24">*</modifier></type><name pos:start="103:25" pos:end="103:28">peer</name> <init pos:start="103:30" pos:end="103:35">= <expr pos:start="103:32" pos:end="103:35"><name pos:start="103:32" pos:end="103:35">NULL</name></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="107:9" pos:end="109:24">/* Do not add to a vlan if it's a -netdev or a nic with a netdev=

         * parameter. */</comment>

        <if_stmt pos:start="111:9" pos:end="119:9"><if pos:start="111:9" pos:end="119:9">if <condition pos:start="111:12" pos:end="115:37">(<expr pos:start="111:13" pos:end="115:36"><operator pos:start="111:13" pos:end="111:13">!</operator><name pos:start="111:14" pos:end="111:22">is_netdev</name> <operator pos:start="111:24" pos:end="111:25">&amp;&amp;</operator>

            <operator pos:start="113:13" pos:end="113:13">(</operator><name pos:start="113:14" pos:end="113:23"><name pos:start="113:14" pos:end="113:17">opts</name><operator pos:start="113:18" pos:end="113:19">-&gt;</operator><name pos:start="113:20" pos:end="113:23">kind</name></name> <operator pos:start="113:25" pos:end="113:26">!=</operator> <name pos:start="113:28" pos:end="113:54">NET_CLIENT_OPTIONS_KIND_NIC</name> <operator pos:start="113:56" pos:end="113:57">||</operator>

             <operator pos:start="115:14" pos:end="115:14">!</operator><name pos:start="115:15" pos:end="115:35"><name pos:start="115:15" pos:end="115:18">opts</name><operator pos:start="115:19" pos:end="115:20">-&gt;</operator><name pos:start="115:21" pos:end="115:23">nic</name><operator pos:start="115:24" pos:end="115:25">-&gt;</operator><name pos:start="115:26" pos:end="115:35">has_netdev</name></name><operator pos:start="115:36" pos:end="115:36">)</operator></expr>)</condition> <block pos:start="115:39" pos:end="119:9">{<block_content pos:start="117:13" pos:end="117:77">

            <expr_stmt pos:start="117:13" pos:end="117:77"><expr pos:start="117:13" pos:end="117:76"><name pos:start="117:13" pos:end="117:16">peer</name> <operator pos:start="117:18" pos:end="117:18">=</operator> <call pos:start="117:20" pos:end="117:76"><name pos:start="117:20" pos:end="117:35">net_hub_add_port</name><argument_list pos:start="117:36" pos:end="117:76">(<argument pos:start="117:37" pos:end="117:69"><expr pos:start="117:37" pos:end="117:69"><ternary pos:start="117:37" pos:end="117:69"><condition pos:start="117:37" pos:end="117:53"><expr pos:start="117:37" pos:end="117:51"><name pos:start="117:37" pos:end="117:51"><name pos:start="117:37" pos:end="117:37">u</name><operator pos:start="117:38" pos:end="117:38">.</operator><name pos:start="117:39" pos:end="117:41">net</name><operator pos:start="117:42" pos:end="117:43">-&gt;</operator><name pos:start="117:44" pos:end="117:51">has_vlan</name></name></expr> ?</condition><then pos:start="117:55" pos:end="117:65"> <expr pos:start="117:55" pos:end="117:65"><name pos:start="117:55" pos:end="117:65"><name pos:start="117:55" pos:end="117:55">u</name><operator pos:start="117:56" pos:end="117:56">.</operator><name pos:start="117:57" pos:end="117:59">net</name><operator pos:start="117:60" pos:end="117:61">-&gt;</operator><name pos:start="117:62" pos:end="117:65">vlan</name></name></expr> </then><else pos:start="117:67" pos:end="117:69">: <expr pos:start="117:69" pos:end="117:69"><literal type="number" pos:start="117:69" pos:end="117:69">0</literal></expr></else></ternary></expr></argument>, <argument pos:start="117:72" pos:end="117:75"><expr pos:start="117:72" pos:end="117:75"><name pos:start="117:72" pos:end="117:75">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="123:9" pos:end="133:9"><if pos:start="123:9" pos:end="133:9">if <condition pos:start="123:12" pos:end="123:66">(<expr pos:start="123:13" pos:end="123:65"><name pos:start="123:13" pos:end="123:43"><name pos:start="123:13" pos:end="123:31">net_client_init_fun</name><index pos:start="123:32" pos:end="123:43">[<expr pos:start="123:33" pos:end="123:42"><name pos:start="123:33" pos:end="123:42"><name pos:start="123:33" pos:end="123:36">opts</name><operator pos:start="123:37" pos:end="123:38">-&gt;</operator><name pos:start="123:39" pos:end="123:42">kind</name></name></expr>]</index></name><operator pos:start="123:44" pos:end="123:44">(</operator><name pos:start="123:45" pos:end="123:48">opts</name><operator pos:start="123:49" pos:end="123:49">,</operator> <name pos:start="123:51" pos:end="123:54">name</name><operator pos:start="123:55" pos:end="123:55">,</operator> <name pos:start="123:57" pos:end="123:60">peer</name><operator pos:start="123:61" pos:end="123:61">)</operator> <operator pos:start="123:63" pos:end="123:63">&lt;</operator> <literal type="number" pos:start="123:65" pos:end="123:65">0</literal></expr>)</condition> <block pos:start="123:68" pos:end="133:9">{<block_content pos:start="127:13" pos:end="131:22">

            <comment type="block" pos:start="125:13" pos:end="125:63">/* TODO push error reporting into init() methods */</comment>

            <expr_stmt pos:start="127:13" pos:end="129:63"><expr pos:start="127:13" pos:end="129:62"><call pos:start="127:13" pos:end="129:62"><name pos:start="127:13" pos:end="127:21">error_set</name><argument_list pos:start="127:22" pos:end="129:62">(<argument pos:start="127:23" pos:end="127:26"><expr pos:start="127:23" pos:end="127:26"><name pos:start="127:23" pos:end="127:26">errp</name></expr></argument>, <argument pos:start="127:29" pos:end="127:51"><expr pos:start="127:29" pos:end="127:51"><name pos:start="127:29" pos:end="127:51">QERR_DEVICE_INIT_FAILED</name></expr></argument>,

                      <argument pos:start="129:23" pos:end="129:61"><expr pos:start="129:23" pos:end="129:61"><name pos:start="129:23" pos:end="129:61"><name pos:start="129:23" pos:end="129:49">NetClientOptionsKind_lookup</name><index pos:start="129:50" pos:end="129:61">[<expr pos:start="129:51" pos:end="129:60"><name pos:start="129:51" pos:end="129:60"><name pos:start="129:51" pos:end="129:54">opts</name><operator pos:start="129:55" pos:end="129:56">-&gt;</operator><name pos:start="129:57" pos:end="129:60">kind</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="131:13" pos:end="131:22">return <expr pos:start="131:20" pos:end="131:21"><operator pos:start="131:20" pos:end="131:20">-</operator><literal type="number" pos:start="131:21" pos:end="131:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="137:5" pos:end="137:13">return <expr pos:start="137:12" pos:end="137:12"><literal type="number" pos:start="137:12" pos:end="137:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
