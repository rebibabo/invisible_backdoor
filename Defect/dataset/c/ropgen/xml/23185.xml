<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23185.c" pos:tabs="8"><function pos:start="1:1" pos:end="331:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">flac_read_header</name><parameter_list pos:start="1:28" pos:end="1:47">(<parameter pos:start="1:29" pos:end="1:46"><decl pos:start="1:29" pos:end="1:46"><type pos:start="1:29" pos:end="1:45"><name pos:start="1:29" pos:end="1:43">AVFormatContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:46">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="331:1">{<block_content pos:start="5:5" pos:end="329:15">

    <decl_stmt pos:start="5:5" pos:end="5:79"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name></decl>, <decl pos:start="5:14" pos:end="5:28"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:14" pos:end="5:26">metadata_last</name><init pos:start="5:27" pos:end="5:28">=<expr pos:start="5:28" pos:end="5:28"><literal type="number" pos:start="5:28" pos:end="5:28">0</literal></expr></init></decl>, <decl pos:start="5:31" pos:end="5:43"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:31" pos:end="5:43">metadata_type</name></decl>, <decl pos:start="5:46" pos:end="5:58"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:46" pos:end="5:58">metadata_size</name></decl>, <decl pos:start="5:61" pos:end="5:78"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:61" pos:end="5:76">found_streaminfo</name><init pos:start="5:77" pos:end="5:78">=<expr pos:start="5:78" pos:end="5:78"><literal type="number" pos:start="5:78" pos:end="5:78">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">uint8_t</name></type> <name pos:start="7:13" pos:end="7:21"><name pos:start="7:13" pos:end="7:18">header</name><index pos:start="7:19" pos:end="7:21">[<expr pos:start="7:20" pos:end="7:20"><literal type="number" pos:start="7:20" pos:end="7:20">4</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">uint8_t</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:19">buffer</name><init pos:start="9:20" pos:end="9:24">=<expr pos:start="9:21" pos:end="9:24"><name pos:start="9:21" pos:end="9:24">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:40"><decl pos:start="11:5" pos:end="11:39"><type pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:18">FLACDecContext</name> <modifier pos:start="11:20" pos:end="11:20">*</modifier></type><name pos:start="11:21" pos:end="11:24">flac</name> <init pos:start="11:26" pos:end="11:39">= <expr pos:start="11:28" pos:end="11:39"><name pos:start="11:28" pos:end="11:39"><name pos:start="11:28" pos:end="11:28">s</name><operator pos:start="11:29" pos:end="11:30">-&gt;</operator><name pos:start="11:31" pos:end="11:39">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:48"><decl pos:start="13:5" pos:end="13:47"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">AVStream</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:16">st</name> <init pos:start="13:18" pos:end="13:47">= <expr pos:start="13:20" pos:end="13:47"><call pos:start="13:20" pos:end="13:47"><name pos:start="13:20" pos:end="13:38">avformat_new_stream</name><argument_list pos:start="13:39" pos:end="13:47">(<argument pos:start="13:40" pos:end="13:40"><expr pos:start="13:40" pos:end="13:40"><name pos:start="13:40" pos:end="13:40">s</name></expr></argument>, <argument pos:start="13:43" pos:end="13:46"><expr pos:start="13:43" pos:end="13:46"><name pos:start="13:43" pos:end="13:46">NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="15:5" pos:end="17:31"><if pos:start="15:5" pos:end="17:31">if <condition pos:start="15:8" pos:end="15:12">(<expr pos:start="15:9" pos:end="15:11"><operator pos:start="15:9" pos:end="15:9">!</operator><name pos:start="15:10" pos:end="15:11">st</name></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:31"><block_content pos:start="17:9" pos:end="17:31">

        <return pos:start="17:9" pos:end="17:31">return <expr pos:start="17:16" pos:end="17:30"><call pos:start="17:16" pos:end="17:30"><name pos:start="17:16" pos:end="17:22">AVERROR</name><argument_list pos:start="17:23" pos:end="17:30">(<argument pos:start="17:24" pos:end="17:29"><expr pos:start="17:24" pos:end="17:29"><name pos:start="17:24" pos:end="17:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:50"><expr pos:start="19:5" pos:end="19:49"><name pos:start="19:5" pos:end="19:28"><name pos:start="19:5" pos:end="19:6">st</name><operator pos:start="19:7" pos:end="19:8">-&gt;</operator><name pos:start="19:9" pos:end="19:16">codecpar</name><operator pos:start="19:17" pos:end="19:18">-&gt;</operator><name pos:start="19:19" pos:end="19:28">codec_type</name></name> <operator pos:start="19:30" pos:end="19:30">=</operator> <name pos:start="19:32" pos:end="19:49">AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:46"><expr pos:start="21:5" pos:end="21:45"><name pos:start="21:5" pos:end="21:26"><name pos:start="21:5" pos:end="21:6">st</name><operator pos:start="21:7" pos:end="21:8">-&gt;</operator><name pos:start="21:9" pos:end="21:16">codecpar</name><operator pos:start="21:17" pos:end="21:18">-&gt;</operator><name pos:start="21:19" pos:end="21:26">codec_id</name></name> <operator pos:start="21:28" pos:end="21:28">=</operator> <name pos:start="21:30" pos:end="21:45">AV_CODEC_ID_FLAC</name></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:47"><expr pos:start="23:5" pos:end="23:46"><name pos:start="23:5" pos:end="23:20"><name pos:start="23:5" pos:end="23:6">st</name><operator pos:start="23:7" pos:end="23:8">-&gt;</operator><name pos:start="23:9" pos:end="23:20">need_parsing</name></name> <operator pos:start="23:22" pos:end="23:22">=</operator> <name pos:start="23:24" pos:end="23:46">AVSTREAM_PARSE_FULL_RAW</name></expr>;</expr_stmt>

    <comment type="block" pos:start="25:5" pos:end="25:72">/* the parameters will be extracted from the compressed bitstream */</comment>



    <comment type="block" pos:start="29:5" pos:end="29:64">/* if fLaC marker is not found, assume there is no header */</comment>

    <if_stmt pos:start="31:5" pos:end="37:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:51">(<expr pos:start="31:9" pos:end="31:50"><call pos:start="31:9" pos:end="31:24"><name pos:start="31:9" pos:end="31:17">avio_rl32</name><argument_list pos:start="31:18" pos:end="31:24">(<argument pos:start="31:19" pos:end="31:23"><expr pos:start="31:19" pos:end="31:23"><name pos:start="31:19" pos:end="31:23"><name pos:start="31:19" pos:end="31:19">s</name><operator pos:start="31:20" pos:end="31:21">-&gt;</operator><name pos:start="31:22" pos:end="31:23">pb</name></name></expr></argument>)</argument_list></call> <operator pos:start="31:26" pos:end="31:27">!=</operator> <call pos:start="31:29" pos:end="31:50"><name pos:start="31:29" pos:end="31:33">MKTAG</name><argument_list pos:start="31:34" pos:end="31:50">(<argument pos:start="31:35" pos:end="31:37"><expr pos:start="31:35" pos:end="31:37"><literal type="char" pos:start="31:35" pos:end="31:37">'f'</literal></expr></argument>,<argument pos:start="31:39" pos:end="31:41"><expr pos:start="31:39" pos:end="31:41"><literal type="char" pos:start="31:39" pos:end="31:41">'L'</literal></expr></argument>,<argument pos:start="31:43" pos:end="31:45"><expr pos:start="31:43" pos:end="31:45"><literal type="char" pos:start="31:43" pos:end="31:45">'a'</literal></expr></argument>,<argument pos:start="31:47" pos:end="31:49"><expr pos:start="31:47" pos:end="31:49"><literal type="char" pos:start="31:47" pos:end="31:49">'C'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="31:53" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:17">

        <expr_stmt pos:start="33:9" pos:end="33:39"><expr pos:start="33:9" pos:end="33:38"><call pos:start="33:9" pos:end="33:38"><name pos:start="33:9" pos:end="33:17">avio_seek</name><argument_list pos:start="33:18" pos:end="33:38">(<argument pos:start="33:19" pos:end="33:23"><expr pos:start="33:19" pos:end="33:23"><name pos:start="33:19" pos:end="33:23"><name pos:start="33:19" pos:end="33:19">s</name><operator pos:start="33:20" pos:end="33:21">-&gt;</operator><name pos:start="33:22" pos:end="33:23">pb</name></name></expr></argument>, <argument pos:start="33:26" pos:end="33:27"><expr pos:start="33:26" pos:end="33:27"><operator pos:start="33:26" pos:end="33:26">-</operator><literal type="number" pos:start="33:27" pos:end="33:27">4</literal></expr></argument>, <argument pos:start="33:30" pos:end="33:37"><expr pos:start="33:30" pos:end="33:37"><name pos:start="33:30" pos:end="33:37">SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:17">return <expr pos:start="35:16" pos:end="35:16"><literal type="number" pos:start="35:16" pos:end="35:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:33">/* process metadata blocks */</comment>

    <while pos:start="43:5" pos:end="307:5">while <condition pos:start="43:11" pos:end="43:47">(<expr pos:start="43:12" pos:end="43:46"><operator pos:start="43:12" pos:end="43:12">!</operator><call pos:start="43:13" pos:end="43:28"><name pos:start="43:13" pos:end="43:21">avio_feof</name><argument_list pos:start="43:22" pos:end="43:28">(<argument pos:start="43:23" pos:end="43:27"><expr pos:start="43:23" pos:end="43:27"><name pos:start="43:23" pos:end="43:27"><name pos:start="43:23" pos:end="43:23">s</name><operator pos:start="43:24" pos:end="43:25">-&gt;</operator><name pos:start="43:26" pos:end="43:27">pb</name></name></expr></argument>)</argument_list></call> <operator pos:start="43:30" pos:end="43:31">&amp;&amp;</operator> <operator pos:start="43:33" pos:end="43:33">!</operator><name pos:start="43:34" pos:end="43:46">metadata_last</name></expr>)</condition> <block pos:start="43:49" pos:end="307:5">{<block_content pos:start="45:9" pos:end="305:9">

        <expr_stmt pos:start="45:9" pos:end="45:36"><expr pos:start="45:9" pos:end="45:35"><call pos:start="45:9" pos:end="45:35"><name pos:start="45:9" pos:end="45:17">avio_read</name><argument_list pos:start="45:18" pos:end="45:35">(<argument pos:start="45:19" pos:end="45:23"><expr pos:start="45:19" pos:end="45:23"><name pos:start="45:19" pos:end="45:23"><name pos:start="45:19" pos:end="45:19">s</name><operator pos:start="45:20" pos:end="45:21">-&gt;</operator><name pos:start="45:22" pos:end="45:23">pb</name></name></expr></argument>, <argument pos:start="45:26" pos:end="45:31"><expr pos:start="45:26" pos:end="45:31"><name pos:start="45:26" pos:end="45:31">header</name></expr></argument>, <argument pos:start="45:34" pos:end="45:34"><expr pos:start="45:34" pos:end="45:34"><literal type="number" pos:start="45:34" pos:end="45:34">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="49:51"><expr pos:start="47:9" pos:end="49:50"><call pos:start="47:9" pos:end="49:50"><name pos:start="47:9" pos:end="47:31">flac_parse_block_header</name><argument_list pos:start="47:32" pos:end="49:50">(<argument pos:start="47:33" pos:end="47:38"><expr pos:start="47:33" pos:end="47:38"><name pos:start="47:33" pos:end="47:38">header</name></expr></argument>, <argument pos:start="47:41" pos:end="47:54"><expr pos:start="47:41" pos:end="47:54"><operator pos:start="47:41" pos:end="47:41">&amp;</operator><name pos:start="47:42" pos:end="47:54">metadata_last</name></expr></argument>, <argument pos:start="47:57" pos:end="47:70"><expr pos:start="47:57" pos:end="47:70"><operator pos:start="47:57" pos:end="47:57">&amp;</operator><name pos:start="47:58" pos:end="47:70">metadata_type</name></expr></argument>,

                                   <argument pos:start="49:36" pos:end="49:49"><expr pos:start="49:36" pos:end="49:49"><operator pos:start="49:36" pos:end="49:36">&amp;</operator><name pos:start="49:37" pos:end="49:49">metadata_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="51:9" pos:end="91:9">switch <condition pos:start="51:16" pos:end="51:30">(<expr pos:start="51:17" pos:end="51:29"><name pos:start="51:17" pos:end="51:29">metadata_type</name></expr>)</condition> <block pos:start="51:32" pos:end="91:9">{<block_content pos:start="55:9" pos:end="89:27">

        <comment type="block" pos:start="53:9" pos:end="53:66">/* allocate and read metadata block for supported types */</comment>

        <case pos:start="55:9" pos:end="55:43">case <expr pos:start="55:14" pos:end="55:42"><name pos:start="55:14" pos:end="55:42">FLAC_METADATA_TYPE_STREAMINFO</name></expr>:</case>

        <case pos:start="57:9" pos:end="57:41">case <expr pos:start="57:14" pos:end="57:40"><name pos:start="57:14" pos:end="57:40">FLAC_METADATA_TYPE_CUESHEET</name></expr>:</case>

        <case pos:start="59:9" pos:end="59:40">case <expr pos:start="59:14" pos:end="59:39"><name pos:start="59:14" pos:end="59:39">FLAC_METADATA_TYPE_PICTURE</name></expr>:</case>

        <case pos:start="61:9" pos:end="61:47">case <expr pos:start="61:14" pos:end="61:46"><name pos:start="61:14" pos:end="61:46">FLAC_METADATA_TYPE_VORBIS_COMMENT</name></expr>:</case>

        <case pos:start="63:9" pos:end="63:42">case <expr pos:start="63:14" pos:end="63:41"><name pos:start="63:14" pos:end="63:41">FLAC_METADATA_TYPE_SEEKTABLE</name></expr>:</case>

            <expr_stmt pos:start="65:13" pos:end="65:78"><expr pos:start="65:13" pos:end="65:77"><name pos:start="65:13" pos:end="65:18">buffer</name> <operator pos:start="65:20" pos:end="65:20">=</operator> <call pos:start="65:22" pos:end="65:77"><name pos:start="65:22" pos:end="65:31">av_mallocz</name><argument_list pos:start="65:32" pos:end="65:77">(<argument pos:start="65:33" pos:end="65:76"><expr pos:start="65:33" pos:end="65:76"><name pos:start="65:33" pos:end="65:45">metadata_size</name> <operator pos:start="65:47" pos:end="65:47">+</operator> <name pos:start="65:49" pos:end="65:76">AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="67:13" pos:end="71:13"><if pos:start="67:13" pos:end="71:13">if <condition pos:start="67:16" pos:end="67:24">(<expr pos:start="67:17" pos:end="67:23"><operator pos:start="67:17" pos:end="67:17">!</operator><name pos:start="67:18" pos:end="67:23">buffer</name></expr>)</condition> <block pos:start="67:26" pos:end="71:13">{<block_content pos:start="69:17" pos:end="69:39">

                <return pos:start="69:17" pos:end="69:39">return <expr pos:start="69:24" pos:end="69:38"><call pos:start="69:24" pos:end="69:38"><name pos:start="69:24" pos:end="69:30">AVERROR</name><argument_list pos:start="69:31" pos:end="69:38">(<argument pos:start="69:32" pos:end="69:37"><expr pos:start="69:32" pos:end="69:37"><name pos:start="69:32" pos:end="69:37">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="73:13" pos:end="77:13"><if pos:start="73:13" pos:end="77:13">if <condition pos:start="73:16" pos:end="73:73">(<expr pos:start="73:17" pos:end="73:72"><call pos:start="73:17" pos:end="73:55"><name pos:start="73:17" pos:end="73:25">avio_read</name><argument_list pos:start="73:26" pos:end="73:55">(<argument pos:start="73:27" pos:end="73:31"><expr pos:start="73:27" pos:end="73:31"><name pos:start="73:27" pos:end="73:31"><name pos:start="73:27" pos:end="73:27">s</name><operator pos:start="73:28" pos:end="73:29">-&gt;</operator><name pos:start="73:30" pos:end="73:31">pb</name></name></expr></argument>, <argument pos:start="73:34" pos:end="73:39"><expr pos:start="73:34" pos:end="73:39"><name pos:start="73:34" pos:end="73:39">buffer</name></expr></argument>, <argument pos:start="73:42" pos:end="73:54"><expr pos:start="73:42" pos:end="73:54"><name pos:start="73:42" pos:end="73:54">metadata_size</name></expr></argument>)</argument_list></call> <operator pos:start="73:57" pos:end="73:58">!=</operator> <name pos:start="73:60" pos:end="73:72">metadata_size</name></expr>)</condition> <block pos:start="73:75" pos:end="77:13">{<block_content pos:start="75:17" pos:end="75:43">

                <expr_stmt pos:start="75:17" pos:end="75:43"><expr pos:start="75:17" pos:end="75:42"><call pos:start="75:17" pos:end="75:42"><name pos:start="75:17" pos:end="75:28">RETURN_ERROR</name><argument_list pos:start="75:29" pos:end="75:42">(<argument pos:start="75:30" pos:end="75:41"><expr pos:start="75:30" pos:end="75:41"><call pos:start="75:30" pos:end="75:41"><name pos:start="75:30" pos:end="75:36">AVERROR</name><argument_list pos:start="75:37" pos:end="75:41">(<argument pos:start="75:38" pos:end="75:40"><expr pos:start="75:38" pos:end="75:40"><name pos:start="75:38" pos:end="75:40">EIO</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="79:13" pos:end="79:18">break;</break>

        <comment type="block" pos:start="81:9" pos:end="81:55">/* skip metadata block for unsupported types */</comment>

        <default pos:start="83:9" pos:end="83:16">default:</default>

            <expr_stmt pos:start="85:13" pos:end="85:50"><expr pos:start="85:13" pos:end="85:49"><name pos:start="85:13" pos:end="85:15">ret</name> <operator pos:start="85:17" pos:end="85:17">=</operator> <call pos:start="85:19" pos:end="85:49"><name pos:start="85:19" pos:end="85:27">avio_skip</name><argument_list pos:start="85:28" pos:end="85:49">(<argument pos:start="85:29" pos:end="85:33"><expr pos:start="85:29" pos:end="85:33"><name pos:start="85:29" pos:end="85:33"><name pos:start="85:29" pos:end="85:29">s</name><operator pos:start="85:30" pos:end="85:31">-&gt;</operator><name pos:start="85:32" pos:end="85:33">pb</name></name></expr></argument>, <argument pos:start="85:36" pos:end="85:48"><expr pos:start="85:36" pos:end="85:48"><name pos:start="85:36" pos:end="85:48">metadata_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="87:13" pos:end="89:27"><if pos:start="87:13" pos:end="89:27">if <condition pos:start="87:16" pos:end="87:24">(<expr pos:start="87:17" pos:end="87:23"><name pos:start="87:17" pos:end="87:19">ret</name> <operator pos:start="87:21" pos:end="87:21">&lt;</operator> <literal type="number" pos:start="87:23" pos:end="87:23">0</literal></expr>)</condition><block type="pseudo" pos:start="89:17" pos:end="89:27"><block_content pos:start="89:17" pos:end="89:27">

                <return pos:start="89:17" pos:end="89:27">return <expr pos:start="89:24" pos:end="89:26"><name pos:start="89:24" pos:end="89:26">ret</name></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></switch>



        <if_stmt pos:start="95:9" pos:end="305:9"><if pos:start="95:9" pos:end="149:9">if <condition pos:start="95:12" pos:end="95:59">(<expr pos:start="95:13" pos:end="95:58"><name pos:start="95:13" pos:end="95:25">metadata_type</name> <operator pos:start="95:27" pos:end="95:28">==</operator> <name pos:start="95:30" pos:end="95:58">FLAC_METADATA_TYPE_STREAMINFO</name></expr>)</condition> <block pos:start="95:61" pos:end="149:9">{<block_content pos:start="97:13" pos:end="147:13">

            <decl_stmt pos:start="97:13" pos:end="97:32"><decl pos:start="97:13" pos:end="97:31"><type pos:start="97:13" pos:end="97:20"><name pos:start="97:13" pos:end="97:20">uint32_t</name></type> <name pos:start="97:22" pos:end="97:31">samplerate</name></decl>;</decl_stmt>

            <decl_stmt pos:start="99:13" pos:end="99:29"><decl pos:start="99:13" pos:end="99:28"><type pos:start="99:13" pos:end="99:20"><name pos:start="99:13" pos:end="99:20">uint64_t</name></type> <name pos:start="99:22" pos:end="99:28">samples</name></decl>;</decl_stmt>



            <comment type="block" pos:start="103:13" pos:end="103:48">/* STREAMINFO can only occur once */</comment>

            <if_stmt pos:start="105:13" pos:end="109:13"><if pos:start="105:13" pos:end="109:13">if <condition pos:start="105:16" pos:end="105:33">(<expr pos:start="105:17" pos:end="105:32"><name pos:start="105:17" pos:end="105:32">found_streaminfo</name></expr>)</condition> <block pos:start="105:35" pos:end="109:13">{<block_content pos:start="107:17" pos:end="107:50">

                <expr_stmt pos:start="107:17" pos:end="107:50"><expr pos:start="107:17" pos:end="107:49"><call pos:start="107:17" pos:end="107:49"><name pos:start="107:17" pos:end="107:28">RETURN_ERROR</name><argument_list pos:start="107:29" pos:end="107:49">(<argument pos:start="107:30" pos:end="107:48"><expr pos:start="107:30" pos:end="107:48"><name pos:start="107:30" pos:end="107:48">AVERROR_INVALIDDATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="111:13" pos:end="115:13"><if pos:start="111:13" pos:end="115:13">if <condition pos:start="111:16" pos:end="111:54">(<expr pos:start="111:17" pos:end="111:53"><name pos:start="111:17" pos:end="111:29">metadata_size</name> <operator pos:start="111:31" pos:end="111:32">!=</operator> <name pos:start="111:34" pos:end="111:53">FLAC_STREAMINFO_SIZE</name></expr>)</condition> <block pos:start="111:56" pos:end="115:13">{<block_content pos:start="113:17" pos:end="113:50">

                <expr_stmt pos:start="113:17" pos:end="113:50"><expr pos:start="113:17" pos:end="113:49"><call pos:start="113:17" pos:end="113:49"><name pos:start="113:17" pos:end="113:28">RETURN_ERROR</name><argument_list pos:start="113:29" pos:end="113:49">(<argument pos:start="113:30" pos:end="113:48"><expr pos:start="113:30" pos:end="113:48"><name pos:start="113:30" pos:end="113:48">AVERROR_INVALIDDATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="117:13" pos:end="117:33"><expr pos:start="117:13" pos:end="117:32"><name pos:start="117:13" pos:end="117:28">found_streaminfo</name> <operator pos:start="117:30" pos:end="117:30">=</operator> <literal type="number" pos:start="117:32" pos:end="117:32">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:50"><expr pos:start="119:13" pos:end="119:49"><name pos:start="119:13" pos:end="119:35"><name pos:start="119:13" pos:end="119:14">st</name><operator pos:start="119:15" pos:end="119:16">-&gt;</operator><name pos:start="119:17" pos:end="119:24">codecpar</name><operator pos:start="119:25" pos:end="119:26">-&gt;</operator><name pos:start="119:27" pos:end="119:35">extradata</name></name>      <operator pos:start="119:42" pos:end="119:42">=</operator> <name pos:start="119:44" pos:end="119:49">buffer</name></expr>;</expr_stmt>

            <expr_stmt pos:start="121:13" pos:end="121:57"><expr pos:start="121:13" pos:end="121:56"><name pos:start="121:13" pos:end="121:40"><name pos:start="121:13" pos:end="121:14">st</name><operator pos:start="121:15" pos:end="121:16">-&gt;</operator><name pos:start="121:17" pos:end="121:24">codecpar</name><operator pos:start="121:25" pos:end="121:26">-&gt;</operator><name pos:start="121:27" pos:end="121:40">extradata_size</name></name> <operator pos:start="121:42" pos:end="121:42">=</operator> <name pos:start="121:44" pos:end="121:56">metadata_size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="123:13" pos:end="123:26"><expr pos:start="123:13" pos:end="123:25"><name pos:start="123:13" pos:end="123:18">buffer</name> <operator pos:start="123:20" pos:end="123:20">=</operator> <name pos:start="123:22" pos:end="123:25">NULL</name></expr>;</expr_stmt>



            <comment type="block" pos:start="127:13" pos:end="129:66">/* get sample rate and sample count from STREAMINFO header;

             * other parameters will be extracted by the parser */</comment>

            <expr_stmt pos:start="131:13" pos:end="131:68"><expr pos:start="131:13" pos:end="131:67"><name pos:start="131:13" pos:end="131:22">samplerate</name> <operator pos:start="131:24" pos:end="131:24">=</operator> <call pos:start="131:26" pos:end="131:62"><name pos:start="131:26" pos:end="131:32">AV_RB24</name><argument_list pos:start="131:33" pos:end="131:62">(<argument pos:start="131:34" pos:end="131:61"><expr pos:start="131:34" pos:end="131:61"><name pos:start="131:34" pos:end="131:56"><name pos:start="131:34" pos:end="131:35">st</name><operator pos:start="131:36" pos:end="131:37">-&gt;</operator><name pos:start="131:38" pos:end="131:45">codecpar</name><operator pos:start="131:46" pos:end="131:47">-&gt;</operator><name pos:start="131:48" pos:end="131:56">extradata</name></name> <operator pos:start="131:58" pos:end="131:58">+</operator> <literal type="number" pos:start="131:60" pos:end="131:61">10</literal></expr></argument>)</argument_list></call> <operator pos:start="131:64" pos:end="131:65">&gt;&gt;</operator> <literal type="number" pos:start="131:67" pos:end="131:67">4</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="133:13" pos:end="133:92"><expr pos:start="133:13" pos:end="133:91"><name pos:start="133:13" pos:end="133:19">samples</name>    <operator pos:start="133:24" pos:end="133:24">=</operator> <operator pos:start="133:26" pos:end="133:26">(</operator><call pos:start="133:27" pos:end="133:63"><name pos:start="133:27" pos:end="133:33">AV_RB64</name><argument_list pos:start="133:34" pos:end="133:63">(<argument pos:start="133:35" pos:end="133:62"><expr pos:start="133:35" pos:end="133:62"><name pos:start="133:35" pos:end="133:57"><name pos:start="133:35" pos:end="133:36">st</name><operator pos:start="133:37" pos:end="133:38">-&gt;</operator><name pos:start="133:39" pos:end="133:46">codecpar</name><operator pos:start="133:47" pos:end="133:48">-&gt;</operator><name pos:start="133:49" pos:end="133:57">extradata</name></name> <operator pos:start="133:59" pos:end="133:59">+</operator> <literal type="number" pos:start="133:61" pos:end="133:62">13</literal></expr></argument>)</argument_list></call> <operator pos:start="133:65" pos:end="133:66">&gt;&gt;</operator> <literal type="number" pos:start="133:68" pos:end="133:69">24</literal><operator pos:start="133:70" pos:end="133:70">)</operator> <operator pos:start="133:72" pos:end="133:72">&amp;</operator> <operator pos:start="133:74" pos:end="133:74">(</operator><operator pos:start="133:75" pos:end="133:75">(</operator><literal type="number" pos:start="133:76" pos:end="133:79">1ULL</literal> <operator pos:start="133:81" pos:end="133:82">&lt;&lt;</operator> <literal type="number" pos:start="133:84" pos:end="133:85">36</literal><operator pos:start="133:86" pos:end="133:86">)</operator> <operator pos:start="133:88" pos:end="133:88">-</operator> <literal type="number" pos:start="133:90" pos:end="133:90">1</literal><operator pos:start="133:91" pos:end="133:91">)</operator></expr>;</expr_stmt>



            <comment type="block" pos:start="137:13" pos:end="137:44">/* set time base and duration */</comment>

            <if_stmt pos:start="139:13" pos:end="147:13"><if pos:start="139:13" pos:end="147:13">if <condition pos:start="139:16" pos:end="139:31">(<expr pos:start="139:17" pos:end="139:30"><name pos:start="139:17" pos:end="139:26">samplerate</name> <operator pos:start="139:28" pos:end="139:28">&gt;</operator> <literal type="number" pos:start="139:30" pos:end="139:30">0</literal></expr>)</condition> <block pos:start="139:33" pos:end="147:13">{<block_content pos:start="141:17" pos:end="145:43">

                <expr_stmt pos:start="141:17" pos:end="141:59"><expr pos:start="141:17" pos:end="141:58"><call pos:start="141:17" pos:end="141:58"><name pos:start="141:17" pos:end="141:35">avpriv_set_pts_info</name><argument_list pos:start="141:36" pos:end="141:58">(<argument pos:start="141:37" pos:end="141:38"><expr pos:start="141:37" pos:end="141:38"><name pos:start="141:37" pos:end="141:38">st</name></expr></argument>, <argument pos:start="141:41" pos:end="141:42"><expr pos:start="141:41" pos:end="141:42"><literal type="number" pos:start="141:41" pos:end="141:42">64</literal></expr></argument>, <argument pos:start="141:45" pos:end="141:45"><expr pos:start="141:45" pos:end="141:45"><literal type="number" pos:start="141:45" pos:end="141:45">1</literal></expr></argument>, <argument pos:start="141:48" pos:end="141:57"><expr pos:start="141:48" pos:end="141:57"><name pos:start="141:48" pos:end="141:57">samplerate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="143:17" pos:end="145:43"><if pos:start="143:17" pos:end="145:43">if <condition pos:start="143:20" pos:end="143:32">(<expr pos:start="143:21" pos:end="143:31"><name pos:start="143:21" pos:end="143:27">samples</name> <operator pos:start="143:29" pos:end="143:29">&gt;</operator> <literal type="number" pos:start="143:31" pos:end="143:31">0</literal></expr>)</condition><block type="pseudo" pos:start="145:21" pos:end="145:43"><block_content pos:start="145:21" pos:end="145:43">

                    <expr_stmt pos:start="145:21" pos:end="145:43"><expr pos:start="145:21" pos:end="145:42"><name pos:start="145:21" pos:end="145:32"><name pos:start="145:21" pos:end="145:22">st</name><operator pos:start="145:23" pos:end="145:24">-&gt;</operator><name pos:start="145:25" pos:end="145:32">duration</name></name> <operator pos:start="145:34" pos:end="145:34">=</operator> <name pos:start="145:36" pos:end="145:42">samples</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="149:11" pos:end="199:9">else if <condition pos:start="149:19" pos:end="149:64">(<expr pos:start="149:20" pos:end="149:63"><name pos:start="149:20" pos:end="149:32">metadata_type</name> <operator pos:start="149:34" pos:end="149:35">==</operator> <name pos:start="149:37" pos:end="149:63">FLAC_METADATA_TYPE_CUESHEET</name></expr>)</condition> <block pos:start="149:66" pos:end="199:9">{<block_content pos:start="151:13" pos:end="197:30">

            <decl_stmt pos:start="151:13" pos:end="151:29"><decl pos:start="151:13" pos:end="151:28"><type pos:start="151:13" pos:end="151:19"><name pos:start="151:13" pos:end="151:19">uint8_t</name></type> <name pos:start="151:21" pos:end="151:28"><name pos:start="151:21" pos:end="151:24">isrc</name><index pos:start="151:25" pos:end="151:28">[<expr pos:start="151:26" pos:end="151:27"><literal type="number" pos:start="151:26" pos:end="151:27">13</literal></expr>]</index></name></decl>;</decl_stmt>

            <decl_stmt pos:start="153:13" pos:end="153:27"><decl pos:start="153:13" pos:end="153:26"><type pos:start="153:13" pos:end="153:20"><name pos:start="153:13" pos:end="153:20">uint64_t</name></type> <name pos:start="153:22" pos:end="153:26">start</name></decl>;</decl_stmt>

            <decl_stmt pos:start="155:13" pos:end="155:34"><decl pos:start="155:13" pos:end="155:33"><type pos:start="155:13" pos:end="155:27"><specifier pos:start="155:13" pos:end="155:17">const</specifier> <name pos:start="155:19" pos:end="155:25">uint8_t</name> <modifier pos:start="155:27" pos:end="155:27">*</modifier></type><name pos:start="155:28" pos:end="155:33">offset</name></decl>;</decl_stmt>

            <decl_stmt pos:start="157:13" pos:end="157:39"><decl pos:start="157:13" pos:end="157:17"><type pos:start="157:13" pos:end="157:15"><name pos:start="157:13" pos:end="157:15">int</name></type> <name pos:start="157:17" pos:end="157:17">i</name></decl>, <decl pos:start="157:20" pos:end="157:27"><type ref="prev" pos:start="157:13" pos:end="157:15"/><name pos:start="157:20" pos:end="157:27">chapters</name></decl>, <decl pos:start="157:30" pos:end="157:34"><type ref="prev" pos:start="157:13" pos:end="157:15"/><name pos:start="157:30" pos:end="157:34">track</name></decl>, <decl pos:start="157:37" pos:end="157:38"><type ref="prev" pos:start="157:13" pos:end="157:15"/><name pos:start="157:37" pos:end="157:38">ti</name></decl>;</decl_stmt>

            <if_stmt pos:start="159:13" pos:end="161:50"><if pos:start="159:13" pos:end="161:50">if <condition pos:start="159:16" pos:end="159:36">(<expr pos:start="159:17" pos:end="159:35"><name pos:start="159:17" pos:end="159:29">metadata_size</name> <operator pos:start="159:31" pos:end="159:31">&lt;</operator> <literal type="number" pos:start="159:33" pos:end="159:35">431</literal></expr>)</condition><block type="pseudo" pos:start="161:17" pos:end="161:50"><block_content pos:start="161:17" pos:end="161:50">

                <expr_stmt pos:start="161:17" pos:end="161:50"><expr pos:start="161:17" pos:end="161:49"><call pos:start="161:17" pos:end="161:49"><name pos:start="161:17" pos:end="161:28">RETURN_ERROR</name><argument_list pos:start="161:29" pos:end="161:49">(<argument pos:start="161:30" pos:end="161:48"><expr pos:start="161:30" pos:end="161:48"><name pos:start="161:30" pos:end="161:48">AVERROR_INVALIDDATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="163:13" pos:end="163:34"><expr pos:start="163:13" pos:end="163:33"><name pos:start="163:13" pos:end="163:18">offset</name> <operator pos:start="163:20" pos:end="163:20">=</operator> <name pos:start="163:22" pos:end="163:27">buffer</name> <operator pos:start="163:29" pos:end="163:29">+</operator> <literal type="number" pos:start="163:31" pos:end="163:33">395</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="165:13" pos:end="165:56"><expr pos:start="165:13" pos:end="165:55"><name pos:start="165:13" pos:end="165:20">chapters</name> <operator pos:start="165:22" pos:end="165:22">=</operator> <call pos:start="165:24" pos:end="165:51"><name pos:start="165:24" pos:end="165:42">bytestream_get_byte</name><argument_list pos:start="165:43" pos:end="165:51">(<argument pos:start="165:44" pos:end="165:50"><expr pos:start="165:44" pos:end="165:50"><operator pos:start="165:44" pos:end="165:44">&amp;</operator><name pos:start="165:45" pos:end="165:50">offset</name></expr></argument>)</argument_list></call> <operator pos:start="165:53" pos:end="165:53">-</operator> <literal type="number" pos:start="165:55" pos:end="165:55">1</literal></expr>;</expr_stmt>

            <if_stmt pos:start="167:13" pos:end="169:50"><if pos:start="167:13" pos:end="169:50">if <condition pos:start="167:16" pos:end="167:30">(<expr pos:start="167:17" pos:end="167:29"><name pos:start="167:17" pos:end="167:24">chapters</name> <operator pos:start="167:26" pos:end="167:27">&lt;=</operator> <literal type="number" pos:start="167:29" pos:end="167:29">0</literal></expr>)</condition><block type="pseudo" pos:start="169:17" pos:end="169:50"><block_content pos:start="169:17" pos:end="169:50">

                <expr_stmt pos:start="169:17" pos:end="169:50"><expr pos:start="169:17" pos:end="169:49"><call pos:start="169:17" pos:end="169:49"><name pos:start="169:17" pos:end="169:28">RETURN_ERROR</name><argument_list pos:start="169:29" pos:end="169:49">(<argument pos:start="169:30" pos:end="169:48"><expr pos:start="169:30" pos:end="169:48"><name pos:start="169:30" pos:end="169:48">AVERROR_INVALIDDATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <for pos:start="171:13" pos:end="195:13">for <control pos:start="171:17" pos:end="171:42">(<init pos:start="171:18" pos:end="171:23"><expr pos:start="171:18" pos:end="171:22"><name pos:start="171:18" pos:end="171:18">i</name> <operator pos:start="171:20" pos:end="171:20">=</operator> <literal type="number" pos:start="171:22" pos:end="171:22">0</literal></expr>;</init> <condition pos:start="171:25" pos:end="171:37"><expr pos:start="171:25" pos:end="171:36"><name pos:start="171:25" pos:end="171:25">i</name> <operator pos:start="171:27" pos:end="171:27">&lt;</operator> <name pos:start="171:29" pos:end="171:36">chapters</name></expr>;</condition> <incr pos:start="171:39" pos:end="171:41"><expr pos:start="171:39" pos:end="171:41"><name pos:start="171:39" pos:end="171:39">i</name><operator pos:start="171:40" pos:end="171:41">++</operator></expr></incr>)</control> <block pos:start="171:44" pos:end="195:13">{<block_content pos:start="173:17" pos:end="193:89">

                <if_stmt pos:start="173:17" pos:end="175:54"><if pos:start="173:17" pos:end="175:54">if <condition pos:start="173:20" pos:end="173:57">(<expr pos:start="173:21" pos:end="173:56"><name pos:start="173:21" pos:end="173:26">offset</name> <operator pos:start="173:28" pos:end="173:28">+</operator> <literal type="number" pos:start="173:30" pos:end="173:33">36</literal> <operator pos:start="173:33" pos:end="173:33">-</operator> <name pos:start="173:35" pos:end="173:40">buffer</name> <operator pos:start="173:42" pos:end="173:42">&gt;</operator> <name pos:start="173:44" pos:end="173:56">metadata_size</name></expr>)</condition><block type="pseudo" pos:start="175:21" pos:end="175:54"><block_content pos:start="175:21" pos:end="175:54">

                    <expr_stmt pos:start="175:21" pos:end="175:54"><expr pos:start="175:21" pos:end="175:53"><call pos:start="175:21" pos:end="175:53"><name pos:start="175:21" pos:end="175:32">RETURN_ERROR</name><argument_list pos:start="175:33" pos:end="175:53">(<argument pos:start="175:34" pos:end="175:52"><expr pos:start="175:34" pos:end="175:52"><name pos:start="175:34" pos:end="175:52">AVERROR_INVALIDDATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="177:17" pos:end="177:53"><expr pos:start="177:17" pos:end="177:52"><name pos:start="177:17" pos:end="177:21">start</name> <operator pos:start="177:23" pos:end="177:23">=</operator> <call pos:start="177:25" pos:end="177:52"><name pos:start="177:25" pos:end="177:43">bytestream_get_be64</name><argument_list pos:start="177:44" pos:end="177:52">(<argument pos:start="177:45" pos:end="177:51"><expr pos:start="177:45" pos:end="177:51"><operator pos:start="177:45" pos:end="177:45">&amp;</operator><name pos:start="177:46" pos:end="177:51">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="179:17" pos:end="179:53"><expr pos:start="179:17" pos:end="179:52"><name pos:start="179:17" pos:end="179:21">track</name> <operator pos:start="179:23" pos:end="179:23">=</operator> <call pos:start="179:25" pos:end="179:52"><name pos:start="179:25" pos:end="179:43">bytestream_get_byte</name><argument_list pos:start="179:44" pos:end="179:52">(<argument pos:start="179:45" pos:end="179:51"><expr pos:start="179:45" pos:end="179:51"><operator pos:start="179:45" pos:end="179:45">&amp;</operator><name pos:start="179:46" pos:end="179:51">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="181:17" pos:end="181:57"><expr pos:start="181:17" pos:end="181:56"><call pos:start="181:17" pos:end="181:56"><name pos:start="181:17" pos:end="181:37">bytestream_get_buffer</name><argument_list pos:start="181:38" pos:end="181:56">(<argument pos:start="181:39" pos:end="181:45"><expr pos:start="181:39" pos:end="181:45"><operator pos:start="181:39" pos:end="181:39">&amp;</operator><name pos:start="181:40" pos:end="181:45">offset</name></expr></argument>, <argument pos:start="181:48" pos:end="181:51"><expr pos:start="181:48" pos:end="181:51"><name pos:start="181:48" pos:end="181:51">isrc</name></expr></argument>, <argument pos:start="181:54" pos:end="181:55"><expr pos:start="181:54" pos:end="181:55"><literal type="number" pos:start="181:54" pos:end="181:55">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="183:17" pos:end="183:29"><expr pos:start="183:17" pos:end="183:28"><name pos:start="183:17" pos:end="183:24"><name pos:start="183:17" pos:end="183:20">isrc</name><index pos:start="183:21" pos:end="183:24">[<expr pos:start="183:22" pos:end="183:23"><literal type="number" pos:start="183:22" pos:end="183:23">12</literal></expr>]</index></name> <operator pos:start="183:26" pos:end="183:26">=</operator> <literal type="number" pos:start="183:28" pos:end="183:28">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="185:17" pos:end="185:29"><expr pos:start="185:17" pos:end="185:28"><name pos:start="185:17" pos:end="185:22">offset</name> <operator pos:start="185:24" pos:end="185:25">+=</operator> <literal type="number" pos:start="185:27" pos:end="185:28">14</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="187:17" pos:end="187:50"><expr pos:start="187:17" pos:end="187:49"><name pos:start="187:17" pos:end="187:18">ti</name> <operator pos:start="187:20" pos:end="187:20">=</operator> <call pos:start="187:22" pos:end="187:49"><name pos:start="187:22" pos:end="187:40">bytestream_get_byte</name><argument_list pos:start="187:41" pos:end="187:49">(<argument pos:start="187:42" pos:end="187:48"><expr pos:start="187:42" pos:end="187:48"><operator pos:start="187:42" pos:end="187:42">&amp;</operator><name pos:start="187:43" pos:end="187:48">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="189:17" pos:end="189:63"><if pos:start="189:17" pos:end="189:63">if <condition pos:start="189:20" pos:end="189:28">(<expr pos:start="189:21" pos:end="189:27"><name pos:start="189:21" pos:end="189:22">ti</name> <operator pos:start="189:24" pos:end="189:25">&lt;=</operator> <literal type="number" pos:start="189:27" pos:end="189:27">0</literal></expr>)</condition><block type="pseudo" pos:start="189:30" pos:end="189:63"><block_content pos:start="189:30" pos:end="189:63"> <expr_stmt pos:start="189:30" pos:end="189:63"><expr pos:start="189:30" pos:end="189:62"><call pos:start="189:30" pos:end="189:62"><name pos:start="189:30" pos:end="189:41">RETURN_ERROR</name><argument_list pos:start="189:42" pos:end="189:62">(<argument pos:start="189:43" pos:end="189:61"><expr pos:start="189:43" pos:end="189:61"><name pos:start="189:43" pos:end="189:61">AVERROR_INVALIDDATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="191:17" pos:end="191:34"><expr pos:start="191:17" pos:end="191:33"><name pos:start="191:17" pos:end="191:22">offset</name> <operator pos:start="191:24" pos:end="191:25">+=</operator> <name pos:start="191:27" pos:end="191:28">ti</name> <operator pos:start="191:30" pos:end="191:30">*</operator> <literal type="number" pos:start="191:32" pos:end="191:33">12</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="193:17" pos:end="193:89"><expr pos:start="193:17" pos:end="193:88"><call pos:start="193:17" pos:end="193:88"><name pos:start="193:17" pos:end="193:34">avpriv_new_chapter</name><argument_list pos:start="193:35" pos:end="193:88">(<argument pos:start="193:36" pos:end="193:36"><expr pos:start="193:36" pos:end="193:36"><name pos:start="193:36" pos:end="193:36">s</name></expr></argument>, <argument pos:start="193:39" pos:end="193:43"><expr pos:start="193:39" pos:end="193:43"><name pos:start="193:39" pos:end="193:43">track</name></expr></argument>, <argument pos:start="193:46" pos:end="193:58"><expr pos:start="193:46" pos:end="193:58"><name pos:start="193:46" pos:end="193:58"><name pos:start="193:46" pos:end="193:47">st</name><operator pos:start="193:48" pos:end="193:49">-&gt;</operator><name pos:start="193:50" pos:end="193:58">time_base</name></name></expr></argument>, <argument pos:start="193:61" pos:end="193:65"><expr pos:start="193:61" pos:end="193:65"><name pos:start="193:61" pos:end="193:65">start</name></expr></argument>, <argument pos:start="193:68" pos:end="193:81"><expr pos:start="193:68" pos:end="193:81"><name pos:start="193:68" pos:end="193:81">AV_NOPTS_VALUE</name></expr></argument>, <argument pos:start="193:84" pos:end="193:87"><expr pos:start="193:84" pos:end="193:87"><name pos:start="193:84" pos:end="193:87">isrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="197:13" pos:end="197:30"><expr pos:start="197:13" pos:end="197:29"><call pos:start="197:13" pos:end="197:29"><name pos:start="197:13" pos:end="197:20">av_freep</name><argument_list pos:start="197:21" pos:end="197:29">(<argument pos:start="197:22" pos:end="197:28"><expr pos:start="197:22" pos:end="197:28"><operator pos:start="197:22" pos:end="197:22">&amp;</operator><name pos:start="197:23" pos:end="197:28">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="199:11" pos:end="213:9">else if <condition pos:start="199:19" pos:end="199:63">(<expr pos:start="199:20" pos:end="199:62"><name pos:start="199:20" pos:end="199:32">metadata_type</name> <operator pos:start="199:34" pos:end="199:35">==</operator> <name pos:start="199:37" pos:end="199:62">FLAC_METADATA_TYPE_PICTURE</name></expr>)</condition> <block pos:start="199:65" pos:end="213:9">{<block_content pos:start="201:13" pos:end="211:13">

            <expr_stmt pos:start="201:13" pos:end="201:66"><expr pos:start="201:13" pos:end="201:65"><name pos:start="201:13" pos:end="201:15">ret</name> <operator pos:start="201:17" pos:end="201:17">=</operator> <call pos:start="201:19" pos:end="201:65"><name pos:start="201:19" pos:end="201:39">ff_flac_parse_picture</name><argument_list pos:start="201:40" pos:end="201:65">(<argument pos:start="201:41" pos:end="201:41"><expr pos:start="201:41" pos:end="201:41"><name pos:start="201:41" pos:end="201:41">s</name></expr></argument>, <argument pos:start="201:44" pos:end="201:49"><expr pos:start="201:44" pos:end="201:49"><name pos:start="201:44" pos:end="201:49">buffer</name></expr></argument>, <argument pos:start="201:52" pos:end="201:64"><expr pos:start="201:52" pos:end="201:64"><name pos:start="201:52" pos:end="201:64">metadata_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="203:13" pos:end="203:30"><expr pos:start="203:13" pos:end="203:29"><call pos:start="203:13" pos:end="203:29"><name pos:start="203:13" pos:end="203:20">av_freep</name><argument_list pos:start="203:21" pos:end="203:29">(<argument pos:start="203:22" pos:end="203:28"><expr pos:start="203:22" pos:end="203:28"><operator pos:start="203:22" pos:end="203:22">&amp;</operator><name pos:start="203:23" pos:end="203:28">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="205:13" pos:end="211:13"><if pos:start="205:13" pos:end="211:13">if <condition pos:start="205:16" pos:end="205:24">(<expr pos:start="205:17" pos:end="205:23"><name pos:start="205:17" pos:end="205:19">ret</name> <operator pos:start="205:21" pos:end="205:21">&lt;</operator> <literal type="number" pos:start="205:23" pos:end="205:23">0</literal></expr>)</condition> <block pos:start="205:26" pos:end="211:13">{<block_content pos:start="207:17" pos:end="209:27">

                <expr_stmt pos:start="207:17" pos:end="207:77"><expr pos:start="207:17" pos:end="207:76"><call pos:start="207:17" pos:end="207:76"><name pos:start="207:17" pos:end="207:22">av_log</name><argument_list pos:start="207:23" pos:end="207:76">(<argument pos:start="207:24" pos:end="207:24"><expr pos:start="207:24" pos:end="207:24"><name pos:start="207:24" pos:end="207:24">s</name></expr></argument>, <argument pos:start="207:27" pos:end="207:38"><expr pos:start="207:27" pos:end="207:38"><name pos:start="207:27" pos:end="207:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="207:41" pos:end="207:75"><expr pos:start="207:41" pos:end="207:75"><literal type="string" pos:start="207:41" pos:end="207:75">"Error parsing attached picture.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="209:17" pos:end="209:27">return <expr pos:start="209:24" pos:end="209:26"><name pos:start="209:24" pos:end="209:26">ret</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="213:11" pos:end="241:9">else if <condition pos:start="213:19" pos:end="213:65">(<expr pos:start="213:20" pos:end="213:64"><name pos:start="213:20" pos:end="213:32">metadata_type</name> <operator pos:start="213:34" pos:end="213:35">==</operator> <name pos:start="213:37" pos:end="213:64">FLAC_METADATA_TYPE_SEEKTABLE</name></expr>)</condition> <block pos:start="213:67" pos:end="241:9">{<block_content pos:start="215:13" pos:end="239:30">

            <decl_stmt pos:start="215:13" pos:end="215:46"><decl pos:start="215:13" pos:end="215:45"><type pos:start="215:13" pos:end="215:27"><specifier pos:start="215:13" pos:end="215:17">const</specifier> <name pos:start="215:19" pos:end="215:25">uint8_t</name> <modifier pos:start="215:27" pos:end="215:27">*</modifier></type><name pos:start="215:28" pos:end="215:36">seekpoint</name> <init pos:start="215:38" pos:end="215:45">= <expr pos:start="215:40" pos:end="215:45"><name pos:start="215:40" pos:end="215:45">buffer</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="217:13" pos:end="217:67"><decl pos:start="217:13" pos:end="217:17"><type pos:start="217:13" pos:end="217:15"><name pos:start="217:13" pos:end="217:15">int</name></type> <name pos:start="217:17" pos:end="217:17">i</name></decl>, <decl pos:start="217:20" pos:end="217:66"><type ref="prev" pos:start="217:13" pos:end="217:15"/><name pos:start="217:20" pos:end="217:35">seek_point_count</name> <init pos:start="217:37" pos:end="217:66">= <expr pos:start="217:39" pos:end="217:66"><name pos:start="217:39" pos:end="217:51">metadata_size</name><operator pos:start="217:52" pos:end="217:52">/</operator><name pos:start="217:53" pos:end="217:66">SEEKPOINT_SIZE</name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="219:13" pos:end="219:38"><expr pos:start="219:13" pos:end="219:37"><name pos:start="219:13" pos:end="219:33"><name pos:start="219:13" pos:end="219:16">flac</name><operator pos:start="219:17" pos:end="219:18">-&gt;</operator><name pos:start="219:19" pos:end="219:33">found_seektable</name></name> <operator pos:start="219:35" pos:end="219:35">=</operator> <literal type="number" pos:start="219:37" pos:end="219:37">1</literal></expr>;</expr_stmt>

            <if_stmt pos:start="221:13" pos:end="237:13"><if pos:start="221:13" pos:end="237:13">if <condition pos:start="221:16" pos:end="221:48">(<expr pos:start="221:17" pos:end="221:47"><operator pos:start="221:17" pos:end="221:17">(</operator><name pos:start="221:18" pos:end="221:25"><name pos:start="221:18" pos:end="221:18">s</name><operator pos:start="221:19" pos:end="221:20">-&gt;</operator><name pos:start="221:21" pos:end="221:25">flags</name></name><operator pos:start="221:26" pos:end="221:26">&amp;</operator><name pos:start="221:27" pos:end="221:46">AVFMT_FLAG_FAST_SEEK</name><operator pos:start="221:47" pos:end="221:47">)</operator></expr>)</condition> <block pos:start="221:50" pos:end="237:13">{<block_content pos:start="223:17" pos:end="235:17">

                <for pos:start="223:17" pos:end="235:17">for<control pos:start="223:20" pos:end="223:49">(<init pos:start="223:21" pos:end="223:24"><expr pos:start="223:21" pos:end="223:23"><name pos:start="223:21" pos:end="223:21">i</name><operator pos:start="223:22" pos:end="223:22">=</operator><literal type="number" pos:start="223:23" pos:end="223:23">0</literal></expr>;</init> <condition pos:start="223:26" pos:end="223:44"><expr pos:start="223:26" pos:end="223:43"><name pos:start="223:26" pos:end="223:26">i</name><operator pos:start="223:27" pos:end="223:27">&lt;</operator><name pos:start="223:28" pos:end="223:43">seek_point_count</name></expr>;</condition> <incr pos:start="223:46" pos:end="223:48"><expr pos:start="223:46" pos:end="223:48"><name pos:start="223:46" pos:end="223:46">i</name><operator pos:start="223:47" pos:end="223:48">++</operator></expr></incr>)</control> <block pos:start="223:51" pos:end="235:17">{<block_content pos:start="225:21" pos:end="233:83">

                    <decl_stmt pos:start="225:21" pos:end="225:72"><decl pos:start="225:21" pos:end="225:71"><type pos:start="225:21" pos:end="225:27"><name pos:start="225:21" pos:end="225:27">int64_t</name></type> <name pos:start="225:29" pos:end="225:37">timestamp</name> <init pos:start="225:39" pos:end="225:71">= <expr pos:start="225:41" pos:end="225:71"><call pos:start="225:41" pos:end="225:71"><name pos:start="225:41" pos:end="225:59">bytestream_get_be64</name><argument_list pos:start="225:60" pos:end="225:71">(<argument pos:start="225:61" pos:end="225:70"><expr pos:start="225:61" pos:end="225:70"><operator pos:start="225:61" pos:end="225:61">&amp;</operator><name pos:start="225:62" pos:end="225:70">seekpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="227:21" pos:end="227:66"><decl pos:start="227:21" pos:end="227:65"><type pos:start="227:21" pos:end="227:27"><name pos:start="227:21" pos:end="227:27">int64_t</name></type> <name pos:start="227:29" pos:end="227:31">pos</name> <init pos:start="227:33" pos:end="227:65">= <expr pos:start="227:35" pos:end="227:65"><call pos:start="227:35" pos:end="227:65"><name pos:start="227:35" pos:end="227:53">bytestream_get_be64</name><argument_list pos:start="227:54" pos:end="227:65">(<argument pos:start="227:55" pos:end="227:64"><expr pos:start="227:55" pos:end="227:64"><operator pos:start="227:55" pos:end="227:55">&amp;</operator><name pos:start="227:56" pos:end="227:64">seekpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <comment type="block" pos:start="229:21" pos:end="229:48">/* skip number of samples */</comment>

                    <expr_stmt pos:start="231:21" pos:end="231:52"><expr pos:start="231:21" pos:end="231:51"><call pos:start="231:21" pos:end="231:51"><name pos:start="231:21" pos:end="231:39">bytestream_get_be16</name><argument_list pos:start="231:40" pos:end="231:51">(<argument pos:start="231:41" pos:end="231:50"><expr pos:start="231:41" pos:end="231:50"><operator pos:start="231:41" pos:end="231:41">&amp;</operator><name pos:start="231:42" pos:end="231:50">seekpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="233:21" pos:end="233:83"><expr pos:start="233:21" pos:end="233:82"><call pos:start="233:21" pos:end="233:82"><name pos:start="233:21" pos:end="233:38">av_add_index_entry</name><argument_list pos:start="233:39" pos:end="233:82">(<argument pos:start="233:40" pos:end="233:41"><expr pos:start="233:40" pos:end="233:41"><name pos:start="233:40" pos:end="233:41">st</name></expr></argument>, <argument pos:start="233:44" pos:end="233:46"><expr pos:start="233:44" pos:end="233:46"><name pos:start="233:44" pos:end="233:46">pos</name></expr></argument>, <argument pos:start="233:49" pos:end="233:57"><expr pos:start="233:49" pos:end="233:57"><name pos:start="233:49" pos:end="233:57">timestamp</name></expr></argument>, <argument pos:start="233:60" pos:end="233:60"><expr pos:start="233:60" pos:end="233:60"><literal type="number" pos:start="233:60" pos:end="233:60">0</literal></expr></argument>, <argument pos:start="233:63" pos:end="233:63"><expr pos:start="233:63" pos:end="233:63"><literal type="number" pos:start="233:63" pos:end="233:63">0</literal></expr></argument>, <argument pos:start="233:66" pos:end="233:81"><expr pos:start="233:66" pos:end="233:81"><name pos:start="233:66" pos:end="233:81">AVINDEX_KEYFRAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="239:13" pos:end="239:30"><expr pos:start="239:13" pos:end="239:29"><call pos:start="239:13" pos:end="239:29"><name pos:start="239:13" pos:end="239:20">av_freep</name><argument_list pos:start="239:21" pos:end="239:29">(<argument pos:start="239:22" pos:end="239:28"><expr pos:start="239:22" pos:end="239:28"><operator pos:start="239:22" pos:end="239:22">&amp;</operator><name pos:start="239:23" pos:end="239:28">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if>

        <else pos:start="243:9" pos:end="305:9">else <block pos:start="243:14" pos:end="305:9">{<block_content pos:start="249:13" pos:end="303:30">



            <comment type="block" pos:start="247:13" pos:end="247:52">/* STREAMINFO must be the first block */</comment>

            <if_stmt pos:start="249:13" pos:end="253:13"><if pos:start="249:13" pos:end="253:13">if <condition pos:start="249:16" pos:end="249:34">(<expr pos:start="249:17" pos:end="249:33"><operator pos:start="249:17" pos:end="249:17">!</operator><name pos:start="249:18" pos:end="249:33">found_streaminfo</name></expr>)</condition> <block pos:start="249:36" pos:end="253:13">{<block_content pos:start="251:17" pos:end="251:50">

                <expr_stmt pos:start="251:17" pos:end="251:50"><expr pos:start="251:17" pos:end="251:49"><call pos:start="251:17" pos:end="251:49"><name pos:start="251:17" pos:end="251:28">RETURN_ERROR</name><argument_list pos:start="251:29" pos:end="251:49">(<argument pos:start="251:30" pos:end="251:48"><expr pos:start="251:30" pos:end="251:48"><name pos:start="251:30" pos:end="251:48">AVERROR_INVALIDDATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="255:13" pos:end="255:64">/* process supported blocks other than STREAMINFO */</comment>

            <if_stmt pos:start="257:13" pos:end="301:13"><if pos:start="257:13" pos:end="301:13">if <condition pos:start="257:16" pos:end="257:67">(<expr pos:start="257:17" pos:end="257:66"><name pos:start="257:17" pos:end="257:29">metadata_type</name> <operator pos:start="257:31" pos:end="257:32">==</operator> <name pos:start="257:34" pos:end="257:66">FLAC_METADATA_TYPE_VORBIS_COMMENT</name></expr>)</condition> <block pos:start="257:69" pos:end="301:13">{<block_content pos:start="259:17" pos:end="299:17">

                <decl_stmt pos:start="259:17" pos:end="259:42"><decl pos:start="259:17" pos:end="259:41"><type pos:start="259:17" pos:end="259:35"><name pos:start="259:17" pos:end="259:33">AVDictionaryEntry</name> <modifier pos:start="259:35" pos:end="259:35">*</modifier></type><name pos:start="259:36" pos:end="259:41">chmask</name></decl>;</decl_stmt>



                <expr_stmt pos:start="263:17" pos:end="263:83"><expr pos:start="263:17" pos:end="263:82"><name pos:start="263:17" pos:end="263:19">ret</name> <operator pos:start="263:21" pos:end="263:21">=</operator> <call pos:start="263:23" pos:end="263:82"><name pos:start="263:23" pos:end="263:39">ff_vorbis_comment</name><argument_list pos:start="263:40" pos:end="263:82">(<argument pos:start="263:41" pos:end="263:41"><expr pos:start="263:41" pos:end="263:41"><name pos:start="263:41" pos:end="263:41">s</name></expr></argument>, <argument pos:start="263:44" pos:end="263:55"><expr pos:start="263:44" pos:end="263:55"><operator pos:start="263:44" pos:end="263:44">&amp;</operator><name pos:start="263:45" pos:end="263:55"><name pos:start="263:45" pos:end="263:45">s</name><operator pos:start="263:46" pos:end="263:47">-&gt;</operator><name pos:start="263:48" pos:end="263:55">metadata</name></name></expr></argument>, <argument pos:start="263:58" pos:end="263:63"><expr pos:start="263:58" pos:end="263:63"><name pos:start="263:58" pos:end="263:63">buffer</name></expr></argument>, <argument pos:start="263:66" pos:end="263:78"><expr pos:start="263:66" pos:end="263:78"><name pos:start="263:66" pos:end="263:78">metadata_size</name></expr></argument>, <argument pos:start="263:81" pos:end="263:81"><expr pos:start="263:81" pos:end="263:81"><literal type="number" pos:start="263:81" pos:end="263:81">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="265:17" pos:end="273:17"><if pos:start="265:17" pos:end="269:17">if <condition pos:start="265:20" pos:end="265:28">(<expr pos:start="265:21" pos:end="265:27"><name pos:start="265:21" pos:end="265:23">ret</name> <operator pos:start="265:25" pos:end="265:25">&lt;</operator> <literal type="number" pos:start="265:27" pos:end="265:27">0</literal></expr>)</condition> <block pos:start="265:30" pos:end="269:17">{<block_content pos:start="267:21" pos:end="267:88">

                    <expr_stmt pos:start="267:21" pos:end="267:88"><expr pos:start="267:21" pos:end="267:87"><call pos:start="267:21" pos:end="267:87"><name pos:start="267:21" pos:end="267:26">av_log</name><argument_list pos:start="267:27" pos:end="267:87">(<argument pos:start="267:28" pos:end="267:28"><expr pos:start="267:28" pos:end="267:28"><name pos:start="267:28" pos:end="267:28">s</name></expr></argument>, <argument pos:start="267:31" pos:end="267:44"><expr pos:start="267:31" pos:end="267:44"><name pos:start="267:31" pos:end="267:44">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="267:47" pos:end="267:86"><expr pos:start="267:47" pos:end="267:86"><literal type="string" pos:start="267:47" pos:end="267:86">"error parsing VorbisComment metadata\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="269:19" pos:end="273:17">else if <condition pos:start="269:27" pos:end="269:35">(<expr pos:start="269:28" pos:end="269:34"><name pos:start="269:28" pos:end="269:30">ret</name> <operator pos:start="269:32" pos:end="269:32">&gt;</operator> <literal type="number" pos:start="269:34" pos:end="269:34">0</literal></expr>)</condition> <block pos:start="269:37" pos:end="273:17">{<block_content pos:start="271:21" pos:end="271:72">

                    <expr_stmt pos:start="271:21" pos:end="271:72"><expr pos:start="271:21" pos:end="271:71"><name pos:start="271:21" pos:end="271:34"><name pos:start="271:21" pos:end="271:21">s</name><operator pos:start="271:22" pos:end="271:23">-&gt;</operator><name pos:start="271:24" pos:end="271:34">event_flags</name></name> <operator pos:start="271:36" pos:end="271:37">|=</operator> <name pos:start="271:39" pos:end="271:71">AVFMT_EVENT_FLAG_METADATA_UPDATED</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <comment type="block" pos:start="277:17" pos:end="277:56">/* parse the channels mask if present */</comment>

                <expr_stmt pos:start="279:17" pos:end="279:96"><expr pos:start="279:17" pos:end="279:95"><name pos:start="279:17" pos:end="279:22">chmask</name> <operator pos:start="279:24" pos:end="279:24">=</operator> <call pos:start="279:26" pos:end="279:95"><name pos:start="279:26" pos:end="279:36">av_dict_get</name><argument_list pos:start="279:37" pos:end="279:95">(<argument pos:start="279:38" pos:end="279:48"><expr pos:start="279:38" pos:end="279:48"><name pos:start="279:38" pos:end="279:48"><name pos:start="279:38" pos:end="279:38">s</name><operator pos:start="279:39" pos:end="279:40">-&gt;</operator><name pos:start="279:41" pos:end="279:48">metadata</name></name></expr></argument>, <argument pos:start="279:51" pos:end="279:85"><expr pos:start="279:51" pos:end="279:85"><literal type="string" pos:start="279:51" pos:end="279:85">"WAVEFORMATEXTENSIBLE_CHANNEL_MASK"</literal></expr></argument>, <argument pos:start="279:88" pos:end="279:91"><expr pos:start="279:88" pos:end="279:91"><name pos:start="279:88" pos:end="279:91">NULL</name></expr></argument>, <argument pos:start="279:94" pos:end="279:94"><expr pos:start="279:94" pos:end="279:94"><literal type="number" pos:start="279:94" pos:end="279:94">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="281:17" pos:end="299:17"><if pos:start="281:17" pos:end="299:17">if <condition pos:start="281:20" pos:end="281:27">(<expr pos:start="281:21" pos:end="281:26"><name pos:start="281:21" pos:end="281:26">chmask</name></expr>)</condition> <block pos:start="281:29" pos:end="299:17">{<block_content pos:start="283:21" pos:end="297:21">

                    <decl_stmt pos:start="283:21" pos:end="283:67"><decl pos:start="283:21" pos:end="283:66"><type pos:start="283:21" pos:end="283:28"><name pos:start="283:21" pos:end="283:28">uint64_t</name></type> <name pos:start="283:30" pos:end="283:33">mask</name> <init pos:start="283:35" pos:end="283:66">= <expr pos:start="283:37" pos:end="283:66"><call pos:start="283:37" pos:end="283:66"><name pos:start="283:37" pos:end="283:42">strtol</name><argument_list pos:start="283:43" pos:end="283:66">(<argument pos:start="283:44" pos:end="283:56"><expr pos:start="283:44" pos:end="283:56"><name pos:start="283:44" pos:end="283:56"><name pos:start="283:44" pos:end="283:49">chmask</name><operator pos:start="283:50" pos:end="283:51">-&gt;</operator><name pos:start="283:52" pos:end="283:56">value</name></name></expr></argument>, <argument pos:start="283:59" pos:end="283:62"><expr pos:start="283:59" pos:end="283:62"><name pos:start="283:59" pos:end="283:62">NULL</name></expr></argument>, <argument pos:start="283:65" pos:end="283:65"><expr pos:start="283:65" pos:end="283:65"><literal type="number" pos:start="283:65" pos:end="283:65">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <if_stmt pos:start="285:21" pos:end="297:21"><if pos:start="285:21" pos:end="291:21">if <condition pos:start="285:24" pos:end="285:52">(<expr pos:start="285:25" pos:end="285:51"><operator pos:start="285:25" pos:end="285:25">!</operator><name pos:start="285:26" pos:end="285:29">mask</name> <operator pos:start="285:31" pos:end="285:32">||</operator> <name pos:start="285:34" pos:end="285:37">mask</name> <operator pos:start="285:39" pos:end="285:39">&amp;</operator> <operator pos:start="285:41" pos:end="285:41">~</operator><literal type="number" pos:start="285:42" pos:end="285:51">0x3ffffULL</literal></expr>)</condition> <block pos:start="285:54" pos:end="291:21">{<block_content pos:start="287:25" pos:end="289:87">

                        <expr_stmt pos:start="287:25" pos:end="289:87"><expr pos:start="287:25" pos:end="289:86"><call pos:start="287:25" pos:end="289:86"><name pos:start="287:25" pos:end="287:30">av_log</name><argument_list pos:start="287:31" pos:end="289:86">(<argument pos:start="287:32" pos:end="287:32"><expr pos:start="287:32" pos:end="287:32"><name pos:start="287:32" pos:end="287:32">s</name></expr></argument>, <argument pos:start="287:35" pos:end="287:48"><expr pos:start="287:35" pos:end="287:48"><name pos:start="287:35" pos:end="287:48">AV_LOG_WARNING</name></expr></argument>,

                               <argument pos:start="289:32" pos:end="289:85"><expr pos:start="289:32" pos:end="289:85"><literal type="string" pos:start="289:32" pos:end="289:85">"Invalid value of WAVEFORMATEXTENSIBLE_CHANNEL_MASK\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="291:23" pos:end="297:21">else <block pos:start="291:28" pos:end="297:21">{<block_content pos:start="293:25" pos:end="295:96">

                        <expr_stmt pos:start="293:25" pos:end="293:60"><expr pos:start="293:25" pos:end="293:59"><name pos:start="293:25" pos:end="293:52"><name pos:start="293:25" pos:end="293:26">st</name><operator pos:start="293:27" pos:end="293:28">-&gt;</operator><name pos:start="293:29" pos:end="293:36">codecpar</name><operator pos:start="293:37" pos:end="293:38">-&gt;</operator><name pos:start="293:39" pos:end="293:52">channel_layout</name></name> <operator pos:start="293:54" pos:end="293:54">=</operator> <name pos:start="293:56" pos:end="293:59">mask</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="295:25" pos:end="295:96"><expr pos:start="295:25" pos:end="295:95"><call pos:start="295:25" pos:end="295:95"><name pos:start="295:25" pos:end="295:35">av_dict_set</name><argument_list pos:start="295:36" pos:end="295:95">(<argument pos:start="295:37" pos:end="295:48"><expr pos:start="295:37" pos:end="295:48"><operator pos:start="295:37" pos:end="295:37">&amp;</operator><name pos:start="295:38" pos:end="295:48"><name pos:start="295:38" pos:end="295:38">s</name><operator pos:start="295:39" pos:end="295:40">-&gt;</operator><name pos:start="295:41" pos:end="295:48">metadata</name></name></expr></argument>, <argument pos:start="295:51" pos:end="295:85"><expr pos:start="295:51" pos:end="295:85"><literal type="string" pos:start="295:51" pos:end="295:85">"WAVEFORMATEXTENSIBLE_CHANNEL_MASK"</literal></expr></argument>, <argument pos:start="295:88" pos:end="295:91"><expr pos:start="295:88" pos:end="295:91"><name pos:start="295:88" pos:end="295:91">NULL</name></expr></argument>, <argument pos:start="295:94" pos:end="295:94"><expr pos:start="295:94" pos:end="295:94"><literal type="number" pos:start="295:94" pos:end="295:94">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="303:13" pos:end="303:30"><expr pos:start="303:13" pos:end="303:29"><call pos:start="303:13" pos:end="303:29"><name pos:start="303:13" pos:end="303:20">av_freep</name><argument_list pos:start="303:21" pos:end="303:29">(<argument pos:start="303:22" pos:end="303:28"><expr pos:start="303:22" pos:end="303:28"><operator pos:start="303:22" pos:end="303:22">&amp;</operator><name pos:start="303:23" pos:end="303:28">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="311:5" pos:end="311:48"><expr pos:start="311:5" pos:end="311:47"><name pos:start="311:5" pos:end="311:7">ret</name> <operator pos:start="311:9" pos:end="311:9">=</operator> <call pos:start="311:11" pos:end="311:47"><name pos:start="311:11" pos:end="311:30">ff_replaygain_export</name><argument_list pos:start="311:31" pos:end="311:47">(<argument pos:start="311:32" pos:end="311:33"><expr pos:start="311:32" pos:end="311:33"><name pos:start="311:32" pos:end="311:33">st</name></expr></argument>, <argument pos:start="311:36" pos:end="311:46"><expr pos:start="311:36" pos:end="311:46"><name pos:start="311:36" pos:end="311:46"><name pos:start="311:36" pos:end="311:36">s</name><operator pos:start="311:37" pos:end="311:38">-&gt;</operator><name pos:start="311:39" pos:end="311:46">metadata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="313:5" pos:end="315:19"><if pos:start="313:5" pos:end="315:19">if <condition pos:start="313:8" pos:end="313:16">(<expr pos:start="313:9" pos:end="313:15"><name pos:start="313:9" pos:end="313:11">ret</name> <operator pos:start="313:13" pos:end="313:13">&lt;</operator> <literal type="number" pos:start="313:15" pos:end="313:15">0</literal></expr>)</condition><block type="pseudo" pos:start="315:9" pos:end="315:19"><block_content pos:start="315:9" pos:end="315:19">

        <return pos:start="315:9" pos:end="315:19">return <expr pos:start="315:16" pos:end="315:18"><name pos:start="315:16" pos:end="315:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="319:5" pos:end="319:47"><expr pos:start="319:5" pos:end="319:46"><call pos:start="319:5" pos:end="319:46"><name pos:start="319:5" pos:end="319:24">reset_index_position</name><argument_list pos:start="319:25" pos:end="319:46">(<argument pos:start="319:26" pos:end="319:41"><expr pos:start="319:26" pos:end="319:41"><call pos:start="319:26" pos:end="319:41"><name pos:start="319:26" pos:end="319:34">avio_tell</name><argument_list pos:start="319:35" pos:end="319:41">(<argument pos:start="319:36" pos:end="319:40"><expr pos:start="319:36" pos:end="319:40"><name pos:start="319:36" pos:end="319:40"><name pos:start="319:36" pos:end="319:36">s</name><operator pos:start="319:37" pos:end="319:38">-&gt;</operator><name pos:start="319:39" pos:end="319:40">pb</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="319:44" pos:end="319:45"><expr pos:start="319:44" pos:end="319:45"><name pos:start="319:44" pos:end="319:45">st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="321:5" pos:end="321:13">return <expr pos:start="321:12" pos:end="321:12"><literal type="number" pos:start="321:12" pos:end="321:12">0</literal></expr>;</return>



<label pos:start="325:1" pos:end="325:5"><name pos:start="325:1" pos:end="325:4">fail</name>:</label>

    <expr_stmt pos:start="327:5" pos:end="327:20"><expr pos:start="327:5" pos:end="327:19"><call pos:start="327:5" pos:end="327:19"><name pos:start="327:5" pos:end="327:11">av_free</name><argument_list pos:start="327:12" pos:end="327:19">(<argument pos:start="327:13" pos:end="327:18"><expr pos:start="327:13" pos:end="327:18"><name pos:start="327:13" pos:end="327:18">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="329:5" pos:end="329:15">return <expr pos:start="329:12" pos:end="329:14"><name pos:start="329:12" pos:end="329:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
