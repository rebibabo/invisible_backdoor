<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/18434.c" pos:tabs="8"><function pos:start="1:1" pos:end="155:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:21">kvm_set_phys_mem</name><parameter_list pos:start="1:22" pos:end="5:45">(<parameter pos:start="1:23" pos:end="1:51"><decl pos:start="1:23" pos:end="1:51"><type pos:start="1:23" pos:end="1:51"><name pos:start="1:23" pos:end="1:40">target_phys_addr_t</name></type> <name pos:start="1:42" pos:end="1:51">start_addr</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:37"><decl pos:start="3:23" pos:end="3:37"><type pos:start="3:23" pos:end="3:37"><name pos:start="3:23" pos:end="3:32">ram_addr_t</name></type> <name pos:start="3:34" pos:end="3:37">size</name></decl></parameter>,

                      <parameter pos:start="5:23" pos:end="5:44"><decl pos:start="5:23" pos:end="5:44"><type pos:start="5:23" pos:end="5:44"><name pos:start="5:23" pos:end="5:32">ram_addr_t</name></type> <name pos:start="5:34" pos:end="5:44">phys_offset</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="155:1">{<block_content pos:start="9:5" pos:end="151:39">

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">KVMState</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:15">s</name> <init pos:start="9:17" pos:end="9:27">= <expr pos:start="9:19" pos:end="9:27"><name pos:start="9:19" pos:end="9:27">kvm_state</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:55"><decl pos:start="11:5" pos:end="11:54"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:14">ram_addr_t</name></type> <name pos:start="11:16" pos:end="11:20">flags</name> <init pos:start="11:22" pos:end="11:54">= <expr pos:start="11:24" pos:end="11:54"><name pos:start="11:24" pos:end="11:34">phys_offset</name> <operator pos:start="11:36" pos:end="11:36">&amp;</operator> <operator pos:start="11:38" pos:end="11:38">~</operator><name pos:start="11:39" pos:end="11:54">TARGET_PAGE_MASK</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">KVMSlot</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:16">mem</name></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="23:5"><if pos:start="17:5" pos:end="23:5">if <condition pos:start="17:8" pos:end="17:39">(<expr pos:start="17:9" pos:end="17:38"><name pos:start="17:9" pos:end="17:18">start_addr</name> <operator pos:start="17:20" pos:end="17:20">&amp;</operator> <operator pos:start="17:22" pos:end="17:22">~</operator><name pos:start="17:23" pos:end="17:38">TARGET_PAGE_MASK</name></expr>)</condition> <block pos:start="17:41" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:16">

        <expr_stmt pos:start="19:9" pos:end="19:70"><expr pos:start="19:9" pos:end="19:69"><call pos:start="19:9" pos:end="19:69"><name pos:start="19:9" pos:end="19:15">fprintf</name><argument_list pos:start="19:16" pos:end="19:69">(<argument pos:start="19:17" pos:end="19:22"><expr pos:start="19:17" pos:end="19:22"><name pos:start="19:17" pos:end="19:22">stderr</name></expr></argument>, <argument pos:start="19:25" pos:end="19:68"><expr pos:start="19:25" pos:end="19:68"><literal type="string" pos:start="19:25" pos:end="19:68">"Only page-aligned memory slots supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:16"><expr pos:start="21:9" pos:end="21:15"><call pos:start="21:9" pos:end="21:15"><name pos:start="21:9" pos:end="21:13">abort</name><argument_list pos:start="21:14" pos:end="21:15">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:46">/* KVM does not support read-only slots */</comment>

    <expr_stmt pos:start="29:5" pos:end="29:31"><expr pos:start="29:5" pos:end="29:30"><name pos:start="29:5" pos:end="29:15">phys_offset</name> <operator pos:start="29:17" pos:end="29:18">&amp;=</operator> <operator pos:start="29:20" pos:end="29:20">~</operator><name pos:start="29:21" pos:end="29:30">IO_MEM_ROM</name></expr>;</expr_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:41"><expr pos:start="33:5" pos:end="33:40"><name pos:start="33:5" pos:end="33:7">mem</name> <operator pos:start="33:9" pos:end="33:9">=</operator> <call pos:start="33:11" pos:end="33:40"><name pos:start="33:11" pos:end="33:25">kvm_lookup_slot</name><argument_list pos:start="33:26" pos:end="33:40">(<argument pos:start="33:27" pos:end="33:27"><expr pos:start="33:27" pos:end="33:27"><name pos:start="33:27" pos:end="33:27">s</name></expr></argument>, <argument pos:start="33:30" pos:end="33:39"><expr pos:start="33:30" pos:end="33:39"><name pos:start="33:30" pos:end="33:39">start_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="129:5"><if pos:start="35:5" pos:end="129:5">if <condition pos:start="35:8" pos:end="35:12">(<expr pos:start="35:9" pos:end="35:11"><name pos:start="35:9" pos:end="35:11">mem</name></expr>)</condition> <block pos:start="35:14" pos:end="129:5">{<block_content pos:start="37:9" pos:end="127:9">

        <if_stmt pos:start="37:9" pos:end="127:9"><if pos:start="37:9" pos:end="51:9">if <condition pos:start="37:12" pos:end="37:39">(<expr pos:start="37:13" pos:end="37:38"><name pos:start="37:13" pos:end="37:17">flags</name> <operator pos:start="37:19" pos:end="37:20">&gt;=</operator> <name pos:start="37:22" pos:end="37:38">IO_MEM_UNASSIGNED</name></expr>)</condition> <block pos:start="37:41" pos:end="51:9">{<block_content pos:start="39:13" pos:end="49:47">

            <expr_stmt pos:start="39:13" pos:end="39:33"><expr pos:start="39:13" pos:end="39:32"><name pos:start="39:13" pos:end="39:28"><name pos:start="39:13" pos:end="39:15">mem</name><operator pos:start="39:16" pos:end="39:17">-&gt;</operator><name pos:start="39:18" pos:end="39:28">memory_size</name></name> <operator pos:start="39:30" pos:end="39:30">=</operator> <literal type="number" pos:start="39:32" pos:end="39:32">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:41"><expr pos:start="41:13" pos:end="41:40"><name pos:start="41:13" pos:end="41:27"><name pos:start="41:13" pos:end="41:15">mem</name><operator pos:start="41:16" pos:end="41:17">-&gt;</operator><name pos:start="41:18" pos:end="41:27">start_addr</name></name> <operator pos:start="41:29" pos:end="41:29">=</operator> <name pos:start="41:31" pos:end="41:40">start_addr</name></expr>;</expr_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:33"><expr pos:start="43:13" pos:end="43:32"><name pos:start="43:13" pos:end="43:28"><name pos:start="43:13" pos:end="43:15">mem</name><operator pos:start="43:16" pos:end="43:17">-&gt;</operator><name pos:start="43:18" pos:end="43:28">phys_offset</name></name> <operator pos:start="43:30" pos:end="43:30">=</operator> <literal type="number" pos:start="43:32" pos:end="43:32">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="45:13" pos:end="45:27"><expr pos:start="45:13" pos:end="45:26"><name pos:start="45:13" pos:end="45:22"><name pos:start="45:13" pos:end="45:15">mem</name><operator pos:start="45:16" pos:end="45:17">-&gt;</operator><name pos:start="45:18" pos:end="45:22">flags</name></name> <operator pos:start="45:24" pos:end="45:24">=</operator> <literal type="number" pos:start="45:26" pos:end="45:26">0</literal></expr>;</expr_stmt>



            <expr_stmt pos:start="49:13" pos:end="49:47"><expr pos:start="49:13" pos:end="49:46"><call pos:start="49:13" pos:end="49:46"><name pos:start="49:13" pos:end="49:38">kvm_set_user_memory_region</name><argument_list pos:start="49:39" pos:end="49:46">(<argument pos:start="49:40" pos:end="49:40"><expr pos:start="49:40" pos:end="49:40"><name pos:start="49:40" pos:end="49:40">s</name></expr></argument>, <argument pos:start="49:43" pos:end="49:45"><expr pos:start="49:43" pos:end="49:45"><name pos:start="49:43" pos:end="49:45">mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="51:11" pos:end="121:9">else if <condition pos:start="51:19" pos:end="55:61">(<expr pos:start="51:20" pos:end="55:60"><name pos:start="51:20" pos:end="51:29">start_addr</name> <operator pos:start="51:31" pos:end="51:32">&gt;=</operator> <name pos:start="51:34" pos:end="51:48"><name pos:start="51:34" pos:end="51:36">mem</name><operator pos:start="51:37" pos:end="51:38">-&gt;</operator><name pos:start="51:39" pos:end="51:48">start_addr</name></name> <operator pos:start="51:50" pos:end="51:51">&amp;&amp;</operator>

                   <operator pos:start="53:20" pos:end="53:20">(</operator><name pos:start="53:21" pos:end="53:30">start_addr</name> <operator pos:start="53:32" pos:end="53:32">+</operator> <name pos:start="53:34" pos:end="53:37">size</name><operator pos:start="53:38" pos:end="53:38">)</operator> <operator pos:start="53:40" pos:end="53:41">&lt;=</operator> <operator pos:start="53:43" pos:end="53:43">(</operator><name pos:start="53:44" pos:end="53:58"><name pos:start="53:44" pos:end="53:46">mem</name><operator pos:start="53:47" pos:end="53:48">-&gt;</operator><name pos:start="53:49" pos:end="53:58">start_addr</name></name> <operator pos:start="53:60" pos:end="53:60">+</operator>

                                           <name pos:start="55:44" pos:end="55:59"><name pos:start="55:44" pos:end="55:46">mem</name><operator pos:start="55:47" pos:end="55:48">-&gt;</operator><name pos:start="55:49" pos:end="55:59">memory_size</name></name><operator pos:start="55:60" pos:end="55:60">)</operator></expr>)</condition> <block pos:start="55:63" pos:end="121:9">{<block_content pos:start="57:13" pos:end="119:19">

            <decl_stmt pos:start="57:13" pos:end="57:25"><decl pos:start="57:13" pos:end="57:24"><type pos:start="57:13" pos:end="57:19"><name pos:start="57:13" pos:end="57:19">KVMSlot</name></type> <name pos:start="57:21" pos:end="57:24">slot</name></decl>;</decl_stmt>

            <decl_stmt pos:start="59:13" pos:end="59:41"><decl pos:start="59:13" pos:end="59:40"><type pos:start="59:13" pos:end="59:30"><name pos:start="59:13" pos:end="59:30">target_phys_addr_t</name></type> <name pos:start="59:32" pos:end="59:40">mem_start</name></decl>;</decl_stmt>

            <decl_stmt pos:start="61:13" pos:end="61:44"><decl pos:start="61:13" pos:end="61:31"><type pos:start="61:13" pos:end="61:22"><name pos:start="61:13" pos:end="61:22">ram_addr_t</name></type> <name pos:start="61:24" pos:end="61:31">mem_size</name></decl>, <decl pos:start="61:34" pos:end="61:43"><type ref="prev" pos:start="61:13" pos:end="61:22"/><name pos:start="61:34" pos:end="61:43">mem_offset</name></decl>;</decl_stmt>



            <comment type="block" pos:start="65:13" pos:end="65:31">/* Not splitting */</comment>

            <if_stmt pos:start="67:13" pos:end="71:23"><if pos:start="67:13" pos:end="71:23">if <condition pos:start="67:16" pos:end="69:33">(<expr pos:start="67:17" pos:end="69:32"><operator pos:start="67:17" pos:end="67:17">(</operator><name pos:start="67:18" pos:end="67:28">phys_offset</name> <operator pos:start="67:30" pos:end="67:30">-</operator> <operator pos:start="67:32" pos:end="67:32">(</operator><name pos:start="67:33" pos:end="67:42">start_addr</name> <operator pos:start="67:44" pos:end="67:44">-</operator> <name pos:start="67:46" pos:end="67:60"><name pos:start="67:46" pos:end="67:48">mem</name><operator pos:start="67:49" pos:end="67:50">-&gt;</operator><name pos:start="67:51" pos:end="67:60">start_addr</name></name><operator pos:start="67:61" pos:end="67:61">)</operator><operator pos:start="67:62" pos:end="67:62">)</operator> <operator pos:start="67:64" pos:end="67:65">==</operator> 

                <name pos:start="69:17" pos:end="69:32"><name pos:start="69:17" pos:end="69:19">mem</name><operator pos:start="69:20" pos:end="69:21">-&gt;</operator><name pos:start="69:22" pos:end="69:32">phys_offset</name></name></expr>)</condition><block type="pseudo" pos:start="71:17" pos:end="71:23"><block_content pos:start="71:17" pos:end="71:23">

                <return pos:start="71:17" pos:end="71:23">return;</return></block_content></block></if></if_stmt>



            <comment type="block" pos:start="75:13" pos:end="75:39">/* unregister whole slot */</comment>

            <expr_stmt pos:start="77:13" pos:end="77:45"><expr pos:start="77:13" pos:end="77:44"><call pos:start="77:13" pos:end="77:44"><name pos:start="77:13" pos:end="77:18">memcpy</name><argument_list pos:start="77:19" pos:end="77:44">(<argument pos:start="77:20" pos:end="77:24"><expr pos:start="77:20" pos:end="77:24"><operator pos:start="77:20" pos:end="77:20">&amp;</operator><name pos:start="77:21" pos:end="77:24">slot</name></expr></argument>, <argument pos:start="77:27" pos:end="77:29"><expr pos:start="77:27" pos:end="77:29"><name pos:start="77:27" pos:end="77:29">mem</name></expr></argument>, <argument pos:start="77:32" pos:end="77:43"><expr pos:start="77:32" pos:end="77:43"><sizeof pos:start="77:32" pos:end="77:43">sizeof<argument_list pos:start="77:38" pos:end="77:43">(<argument pos:start="77:39" pos:end="77:42"><expr pos:start="77:39" pos:end="77:42"><name pos:start="77:39" pos:end="77:42">slot</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:33"><expr pos:start="79:13" pos:end="79:32"><name pos:start="79:13" pos:end="79:28"><name pos:start="79:13" pos:end="79:15">mem</name><operator pos:start="79:16" pos:end="79:17">-&gt;</operator><name pos:start="79:18" pos:end="79:28">memory_size</name></name> <operator pos:start="79:30" pos:end="79:30">=</operator> <literal type="number" pos:start="79:32" pos:end="79:32">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:47"><expr pos:start="81:13" pos:end="81:46"><call pos:start="81:13" pos:end="81:46"><name pos:start="81:13" pos:end="81:38">kvm_set_user_memory_region</name><argument_list pos:start="81:39" pos:end="81:46">(<argument pos:start="81:40" pos:end="81:40"><expr pos:start="81:40" pos:end="81:40"><name pos:start="81:40" pos:end="81:40">s</name></expr></argument>, <argument pos:start="81:43" pos:end="81:45"><expr pos:start="81:43" pos:end="81:45"><name pos:start="81:43" pos:end="81:45">mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="85:13" pos:end="85:38">/* register prefix slot */</comment>

            <expr_stmt pos:start="87:13" pos:end="87:40"><expr pos:start="87:13" pos:end="87:39"><name pos:start="87:13" pos:end="87:21">mem_start</name> <operator pos:start="87:23" pos:end="87:23">=</operator> <name pos:start="87:25" pos:end="87:39"><name pos:start="87:25" pos:end="87:28">slot</name><operator pos:start="87:29" pos:end="87:29">.</operator><name pos:start="87:30" pos:end="87:39">start_addr</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:52"><expr pos:start="89:13" pos:end="89:51"><name pos:start="89:13" pos:end="89:20">mem_size</name> <operator pos:start="89:22" pos:end="89:22">=</operator> <name pos:start="89:24" pos:end="89:33">start_addr</name> <operator pos:start="89:35" pos:end="89:35">-</operator> <name pos:start="89:37" pos:end="89:51"><name pos:start="89:37" pos:end="89:40">slot</name><operator pos:start="89:41" pos:end="89:41">.</operator><name pos:start="89:42" pos:end="89:51">start_addr</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:42"><expr pos:start="91:13" pos:end="91:41"><name pos:start="91:13" pos:end="91:22">mem_offset</name> <operator pos:start="91:24" pos:end="91:24">=</operator> <name pos:start="91:26" pos:end="91:41"><name pos:start="91:26" pos:end="91:29">slot</name><operator pos:start="91:30" pos:end="91:30">.</operator><name pos:start="91:31" pos:end="91:41">phys_offset</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="93:13" pos:end="95:66"><if pos:start="93:13" pos:end="95:66">if <condition pos:start="93:16" pos:end="93:25">(<expr pos:start="93:17" pos:end="93:24"><name pos:start="93:17" pos:end="93:24">mem_size</name></expr>)</condition><block type="pseudo" pos:start="95:17" pos:end="95:66"><block_content pos:start="95:17" pos:end="95:66">

                <expr_stmt pos:start="95:17" pos:end="95:66"><expr pos:start="95:17" pos:end="95:65"><call pos:start="95:17" pos:end="95:65"><name pos:start="95:17" pos:end="95:32">kvm_set_phys_mem</name><argument_list pos:start="95:33" pos:end="95:65">(<argument pos:start="95:34" pos:end="95:42"><expr pos:start="95:34" pos:end="95:42"><name pos:start="95:34" pos:end="95:42">mem_start</name></expr></argument>, <argument pos:start="95:45" pos:end="95:52"><expr pos:start="95:45" pos:end="95:52"><name pos:start="95:45" pos:end="95:52">mem_size</name></expr></argument>, <argument pos:start="95:55" pos:end="95:64"><expr pos:start="95:55" pos:end="95:64"><name pos:start="95:55" pos:end="95:64">mem_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <comment type="block" pos:start="99:13" pos:end="99:35">/* register new slot */</comment>

            <expr_stmt pos:start="101:13" pos:end="101:60"><expr pos:start="101:13" pos:end="101:59"><call pos:start="101:13" pos:end="101:59"><name pos:start="101:13" pos:end="101:28">kvm_set_phys_mem</name><argument_list pos:start="101:29" pos:end="101:59">(<argument pos:start="101:30" pos:end="101:39"><expr pos:start="101:30" pos:end="101:39"><name pos:start="101:30" pos:end="101:39">start_addr</name></expr></argument>, <argument pos:start="101:42" pos:end="101:45"><expr pos:start="101:42" pos:end="101:45"><name pos:start="101:42" pos:end="101:45">size</name></expr></argument>, <argument pos:start="101:48" pos:end="101:58"><expr pos:start="101:48" pos:end="101:58"><name pos:start="101:48" pos:end="101:58">phys_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="105:13" pos:end="105:38">/* register suffix slot */</comment>

            <expr_stmt pos:start="107:13" pos:end="107:42"><expr pos:start="107:13" pos:end="107:41"><name pos:start="107:13" pos:end="107:21">mem_start</name> <operator pos:start="107:23" pos:end="107:23">=</operator> <name pos:start="107:25" pos:end="107:34">start_addr</name> <operator pos:start="107:36" pos:end="107:36">+</operator> <name pos:start="107:38" pos:end="107:41">size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="109:13" pos:end="109:42"><expr pos:start="109:13" pos:end="109:41"><name pos:start="109:13" pos:end="109:22">mem_offset</name> <operator pos:start="109:24" pos:end="109:25">+=</operator> <name pos:start="109:27" pos:end="109:34">mem_size</name> <operator pos:start="109:36" pos:end="109:36">+</operator> <name pos:start="109:38" pos:end="109:41">size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:58"><expr pos:start="111:13" pos:end="111:57"><name pos:start="111:13" pos:end="111:20">mem_size</name> <operator pos:start="111:22" pos:end="111:22">=</operator> <name pos:start="111:24" pos:end="111:39"><name pos:start="111:24" pos:end="111:27">slot</name><operator pos:start="111:28" pos:end="111:28">.</operator><name pos:start="111:29" pos:end="111:39">memory_size</name></name> <operator pos:start="111:41" pos:end="111:41">-</operator> <name pos:start="111:43" pos:end="111:50">mem_size</name> <operator pos:start="111:52" pos:end="111:52">-</operator> <name pos:start="111:54" pos:end="111:57">size</name></expr>;</expr_stmt>

            <if_stmt pos:start="113:13" pos:end="115:66"><if pos:start="113:13" pos:end="115:66">if <condition pos:start="113:16" pos:end="113:25">(<expr pos:start="113:17" pos:end="113:24"><name pos:start="113:17" pos:end="113:24">mem_size</name></expr>)</condition><block type="pseudo" pos:start="115:17" pos:end="115:66"><block_content pos:start="115:17" pos:end="115:66">

                <expr_stmt pos:start="115:17" pos:end="115:66"><expr pos:start="115:17" pos:end="115:65"><call pos:start="115:17" pos:end="115:65"><name pos:start="115:17" pos:end="115:32">kvm_set_phys_mem</name><argument_list pos:start="115:33" pos:end="115:65">(<argument pos:start="115:34" pos:end="115:42"><expr pos:start="115:34" pos:end="115:42"><name pos:start="115:34" pos:end="115:42">mem_start</name></expr></argument>, <argument pos:start="115:45" pos:end="115:52"><expr pos:start="115:45" pos:end="115:52"><name pos:start="115:45" pos:end="115:52">mem_size</name></expr></argument>, <argument pos:start="115:55" pos:end="115:64"><expr pos:start="115:55" pos:end="115:64"><name pos:start="115:55" pos:end="115:64">mem_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <return pos:start="119:13" pos:end="119:19">return;</return>

        </block_content>}</block></if> <else pos:start="121:11" pos:end="127:9">else <block pos:start="121:16" pos:end="127:9">{<block_content pos:start="123:13" pos:end="125:20">

            <expr_stmt pos:start="123:13" pos:end="123:53"><expr pos:start="123:13" pos:end="123:52"><call pos:start="123:13" pos:end="123:52"><name pos:start="123:13" pos:end="123:18">printf</name><argument_list pos:start="123:19" pos:end="123:52">(<argument pos:start="123:20" pos:end="123:51"><expr pos:start="123:20" pos:end="123:51"><literal type="string" pos:start="123:20" pos:end="123:51">"Registering overlapping slot\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="125:13" pos:end="125:20"><expr pos:start="125:13" pos:end="125:19"><call pos:start="125:13" pos:end="125:19"><name pos:start="125:13" pos:end="125:17">abort</name><argument_list pos:start="125:18" pos:end="125:19">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="131:5" pos:end="131:53">/* KVM does not need to know about this memory */</comment>

    <if_stmt pos:start="133:5" pos:end="135:15"><if pos:start="133:5" pos:end="135:15">if <condition pos:start="133:8" pos:end="133:35">(<expr pos:start="133:9" pos:end="133:34"><name pos:start="133:9" pos:end="133:13">flags</name> <operator pos:start="133:15" pos:end="133:16">&gt;=</operator> <name pos:start="133:18" pos:end="133:34">IO_MEM_UNASSIGNED</name></expr>)</condition><block type="pseudo" pos:start="135:9" pos:end="135:15"><block_content pos:start="135:9" pos:end="135:15">

        <return pos:start="135:9" pos:end="135:15">return;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="139:5" pos:end="139:28"><expr pos:start="139:5" pos:end="139:27"><name pos:start="139:5" pos:end="139:7">mem</name> <operator pos:start="139:9" pos:end="139:9">=</operator> <call pos:start="139:11" pos:end="139:27"><name pos:start="139:11" pos:end="139:24">kvm_alloc_slot</name><argument_list pos:start="139:25" pos:end="139:27">(<argument pos:start="139:26" pos:end="139:26"><expr pos:start="139:26" pos:end="139:26"><name pos:start="139:26" pos:end="139:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="141:5" pos:end="141:28"><expr pos:start="141:5" pos:end="141:27"><name pos:start="141:5" pos:end="141:20"><name pos:start="141:5" pos:end="141:7">mem</name><operator pos:start="141:8" pos:end="141:9">-&gt;</operator><name pos:start="141:10" pos:end="141:20">memory_size</name></name> <operator pos:start="141:22" pos:end="141:22">=</operator> <name pos:start="141:24" pos:end="141:27">size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="143:5" pos:end="143:33"><expr pos:start="143:5" pos:end="143:32"><name pos:start="143:5" pos:end="143:19"><name pos:start="143:5" pos:end="143:7">mem</name><operator pos:start="143:8" pos:end="143:9">-&gt;</operator><name pos:start="143:10" pos:end="143:19">start_addr</name></name> <operator pos:start="143:21" pos:end="143:21">=</operator> <name pos:start="143:23" pos:end="143:32">start_addr</name></expr>;</expr_stmt>

    <expr_stmt pos:start="145:5" pos:end="145:35"><expr pos:start="145:5" pos:end="145:34"><name pos:start="145:5" pos:end="145:20"><name pos:start="145:5" pos:end="145:7">mem</name><operator pos:start="145:8" pos:end="145:9">-&gt;</operator><name pos:start="145:10" pos:end="145:20">phys_offset</name></name> <operator pos:start="145:22" pos:end="145:22">=</operator> <name pos:start="145:24" pos:end="145:34">phys_offset</name></expr>;</expr_stmt>

    <expr_stmt pos:start="147:5" pos:end="147:19"><expr pos:start="147:5" pos:end="147:18"><name pos:start="147:5" pos:end="147:14"><name pos:start="147:5" pos:end="147:7">mem</name><operator pos:start="147:8" pos:end="147:9">-&gt;</operator><name pos:start="147:10" pos:end="147:14">flags</name></name> <operator pos:start="147:16" pos:end="147:16">=</operator> <literal type="number" pos:start="147:18" pos:end="147:18">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="151:5" pos:end="151:39"><expr pos:start="151:5" pos:end="151:38"><call pos:start="151:5" pos:end="151:38"><name pos:start="151:5" pos:end="151:30">kvm_set_user_memory_region</name><argument_list pos:start="151:31" pos:end="151:38">(<argument pos:start="151:32" pos:end="151:32"><expr pos:start="151:32" pos:end="151:32"><name pos:start="151:32" pos:end="151:32">s</name></expr></argument>, <argument pos:start="151:35" pos:end="151:37"><expr pos:start="151:35" pos:end="151:37"><name pos:start="151:35" pos:end="151:37">mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="153:5" pos:end="153:32">/* FIXME deal with errors */</comment>

</block_content>}</block></function>
</unit>
