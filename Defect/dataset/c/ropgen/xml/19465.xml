<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19465.c" pos:tabs="8"><function pos:start="1:1" pos:end="101:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:19">get_tag</name><parameter_list pos:start="1:20" pos:end="1:95">(<parameter pos:start="1:21" pos:end="1:38"><decl pos:start="1:21" pos:end="1:38"><type pos:start="1:21" pos:end="1:38"><name pos:start="1:21" pos:end="1:35">AVFormatContext</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:38">s</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:55"><decl pos:start="1:41" pos:end="1:55"><type pos:start="1:41" pos:end="1:55"><name pos:start="1:41" pos:end="1:51">AVIOContext</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:55">pb</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:72"><decl pos:start="1:58" pos:end="1:72"><type pos:start="1:58" pos:end="1:72"><specifier pos:start="1:58" pos:end="1:62">const</specifier> <name pos:start="1:64" pos:end="1:67">char</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:72">key</name></decl></parameter>, <parameter pos:start="1:75" pos:end="1:82"><decl pos:start="1:75" pos:end="1:82"><type pos:start="1:75" pos:end="1:82"><name pos:start="1:75" pos:end="1:77">int</name></type> <name pos:start="1:79" pos:end="1:82">type</name></decl></parameter>, <parameter pos:start="1:85" pos:end="1:94"><decl pos:start="1:85" pos:end="1:94"><type pos:start="1:85" pos:end="1:94"><name pos:start="1:85" pos:end="1:87">int</name></type> <name pos:start="1:89" pos:end="1:94">length</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="101:1">{<block_content pos:start="5:5" pos:end="99:19">

    <decl_stmt pos:start="5:5" pos:end="5:56"><decl pos:start="5:5" pos:end="5:55"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:16">buf_size</name> <init pos:start="5:18" pos:end="5:55">= <expr pos:start="5:20" pos:end="5:55"><call pos:start="5:20" pos:end="5:51"><name pos:start="5:20" pos:end="5:24">FFMAX</name><argument_list pos:start="5:25" pos:end="5:51">(<argument pos:start="5:26" pos:end="5:33"><expr pos:start="5:26" pos:end="5:33"><literal type="number" pos:start="5:26" pos:end="5:26">2</literal><operator pos:start="5:27" pos:end="5:27">*</operator><name pos:start="5:28" pos:end="5:33">length</name></expr></argument>, <argument pos:start="5:36" pos:end="5:50"><expr pos:start="5:36" pos:end="5:50"><name pos:start="5:36" pos:end="5:50">LEN_PRETTY_GUID</name></expr></argument>)</argument_list></call> <operator pos:start="5:53" pos:end="5:53">+</operator> <literal type="number" pos:start="5:55" pos:end="5:55">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:36"><decl pos:start="7:5" pos:end="7:35"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">char</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:13">buf</name> <init pos:start="7:15" pos:end="7:35">= <expr pos:start="7:17" pos:end="7:35"><call pos:start="7:17" pos:end="7:35"><name pos:start="7:17" pos:end="7:25">av_malloc</name><argument_list pos:start="7:26" pos:end="7:35">(<argument pos:start="7:27" pos:end="7:34"><expr pos:start="7:27" pos:end="7:34"><name pos:start="7:27" pos:end="7:34">buf_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="9:5" pos:end="11:15"><if pos:start="9:5" pos:end="11:15">if <condition pos:start="9:8" pos:end="9:13">(<expr pos:start="9:9" pos:end="9:12"><operator pos:start="9:9" pos:end="9:9">!</operator><name pos:start="9:10" pos:end="9:12">buf</name></expr>)</condition><block type="pseudo" pos:start="11:9" pos:end="11:15"><block_content pos:start="11:9" pos:end="11:15">

        <return pos:start="11:9" pos:end="11:15">return;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="15:5" pos:end="93:5"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:33">(<expr pos:start="15:9" pos:end="15:32"><name pos:start="15:9" pos:end="15:12">type</name> <operator pos:start="15:14" pos:end="15:15">==</operator> <literal type="number" pos:start="15:17" pos:end="15:17">0</literal> <operator pos:start="15:19" pos:end="15:20">&amp;&amp;</operator> <name pos:start="15:22" pos:end="15:27">length</name> <operator pos:start="15:29" pos:end="15:30">==</operator> <literal type="number" pos:start="15:32" pos:end="15:32">4</literal></expr>)</condition> <block pos:start="15:35" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:58">

        <expr_stmt pos:start="17:9" pos:end="17:58"><expr pos:start="17:9" pos:end="17:57"><call pos:start="17:9" pos:end="17:57"><name pos:start="17:9" pos:end="17:16">snprintf</name><argument_list pos:start="17:17" pos:end="17:57">(<argument pos:start="17:18" pos:end="17:20"><expr pos:start="17:18" pos:end="17:20"><name pos:start="17:18" pos:end="17:20">buf</name></expr></argument>, <argument pos:start="17:23" pos:end="17:30"><expr pos:start="17:23" pos:end="17:30"><name pos:start="17:23" pos:end="17:30">buf_size</name></expr></argument>, <argument pos:start="17:33" pos:end="17:41"><expr pos:start="17:33" pos:end="17:41"><literal type="string" pos:start="17:33" pos:end="17:35">"%"</literal><name pos:start="17:36" pos:end="17:41">PRIi32</name></expr></argument>, <argument pos:start="17:44" pos:end="17:56"><expr pos:start="17:44" pos:end="17:56"><call pos:start="17:44" pos:end="17:56"><name pos:start="17:44" pos:end="17:52">avio_rl32</name><argument_list pos:start="17:53" pos:end="17:56">(<argument pos:start="17:54" pos:end="17:55"><expr pos:start="17:54" pos:end="17:55"><name pos:start="17:54" pos:end="17:55">pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="19:7" pos:end="31:5">else if <condition pos:start="19:15" pos:end="19:25">(<expr pos:start="19:16" pos:end="19:24"><name pos:start="19:16" pos:end="19:19">type</name> <operator pos:start="19:21" pos:end="19:22">==</operator> <literal type="number" pos:start="19:24" pos:end="19:24">1</literal></expr>)</condition> <block pos:start="19:27" pos:end="31:5">{<block_content pos:start="21:9" pos:end="29:9">

        <expr_stmt pos:start="21:9" pos:end="21:52"><expr pos:start="21:9" pos:end="21:51"><call pos:start="21:9" pos:end="21:51"><name pos:start="21:9" pos:end="21:24">avio_get_str16le</name><argument_list pos:start="21:25" pos:end="21:51">(<argument pos:start="21:26" pos:end="21:27"><expr pos:start="21:26" pos:end="21:27"><name pos:start="21:26" pos:end="21:27">pb</name></expr></argument>, <argument pos:start="21:30" pos:end="21:35"><expr pos:start="21:30" pos:end="21:35"><name pos:start="21:30" pos:end="21:35">length</name></expr></argument>, <argument pos:start="21:38" pos:end="21:40"><expr pos:start="21:38" pos:end="21:40"><name pos:start="21:38" pos:end="21:40">buf</name></expr></argument>, <argument pos:start="21:43" pos:end="21:50"><expr pos:start="21:43" pos:end="21:50"><name pos:start="21:43" pos:end="21:50">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="23:9" pos:end="29:9"><if pos:start="23:9" pos:end="29:9">if <condition pos:start="23:12" pos:end="23:25">(<expr pos:start="23:13" pos:end="23:24"><operator pos:start="23:13" pos:end="23:13">!</operator><call pos:start="23:14" pos:end="23:24"><name pos:start="23:14" pos:end="23:19">strlen</name><argument_list pos:start="23:20" pos:end="23:24">(<argument pos:start="23:21" pos:end="23:23"><expr pos:start="23:21" pos:end="23:23"><name pos:start="23:21" pos:end="23:23">buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="23:27" pos:end="29:9">{<block_content pos:start="25:12" pos:end="27:18">

           <expr_stmt pos:start="25:12" pos:end="25:24"><expr pos:start="25:12" pos:end="25:23"><call pos:start="25:12" pos:end="25:23"><name pos:start="25:12" pos:end="25:18">av_free</name><argument_list pos:start="25:19" pos:end="25:23">(<argument pos:start="25:20" pos:end="25:22"><expr pos:start="25:20" pos:end="25:22"><name pos:start="25:20" pos:end="25:22">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           <return pos:start="27:12" pos:end="27:18">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="31:7" pos:end="35:5">else if <condition pos:start="31:15" pos:end="31:40">(<expr pos:start="31:16" pos:end="31:39"><name pos:start="31:16" pos:end="31:19">type</name> <operator pos:start="31:21" pos:end="31:22">==</operator> <literal type="number" pos:start="31:24" pos:end="31:24">3</literal> <operator pos:start="31:26" pos:end="31:27">&amp;&amp;</operator> <name pos:start="31:29" pos:end="31:34">length</name> <operator pos:start="31:36" pos:end="31:37">==</operator> <literal type="number" pos:start="31:39" pos:end="31:39">4</literal></expr>)</condition> <block pos:start="31:42" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:54">

        <expr_stmt pos:start="33:9" pos:end="33:54"><expr pos:start="33:9" pos:end="33:53"><call pos:start="33:9" pos:end="33:53"><name pos:start="33:9" pos:end="33:14">strcpy</name><argument_list pos:start="33:15" pos:end="33:53">(<argument pos:start="33:16" pos:end="33:18"><expr pos:start="33:16" pos:end="33:18"><name pos:start="33:16" pos:end="33:18">buf</name></expr></argument>, <argument pos:start="33:21" pos:end="33:52"><expr pos:start="33:21" pos:end="33:52"><ternary pos:start="33:21" pos:end="33:52"><condition pos:start="33:21" pos:end="33:35"><expr pos:start="33:21" pos:end="33:33"><call pos:start="33:21" pos:end="33:33"><name pos:start="33:21" pos:end="33:29">avio_rl32</name><argument_list pos:start="33:30" pos:end="33:33">(<argument pos:start="33:31" pos:end="33:32"><expr pos:start="33:31" pos:end="33:32"><name pos:start="33:31" pos:end="33:32">pb</name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="33:37" pos:end="33:42"> <expr pos:start="33:37" pos:end="33:42"><literal type="string" pos:start="33:37" pos:end="33:42">"true"</literal></expr> </then><else pos:start="33:44" pos:end="33:52">: <expr pos:start="33:46" pos:end="33:52"><literal type="string" pos:start="33:46" pos:end="33:52">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="35:7" pos:end="63:5">else if <condition pos:start="35:15" pos:end="35:40">(<expr pos:start="35:16" pos:end="35:39"><name pos:start="35:16" pos:end="35:19">type</name> <operator pos:start="35:21" pos:end="35:22">==</operator> <literal type="number" pos:start="35:24" pos:end="35:24">4</literal> <operator pos:start="35:26" pos:end="35:27">&amp;&amp;</operator> <name pos:start="35:29" pos:end="35:34">length</name> <operator pos:start="35:36" pos:end="35:37">==</operator> <literal type="number" pos:start="35:39" pos:end="35:39">8</literal></expr>)</condition> <block pos:start="35:42" pos:end="63:5">{<block_content pos:start="37:9" pos:end="61:52">

        <decl_stmt pos:start="37:9" pos:end="37:36"><decl pos:start="37:9" pos:end="37:35"><type pos:start="37:9" pos:end="37:15"><name pos:start="37:9" pos:end="37:15">int64_t</name></type> <name pos:start="37:17" pos:end="37:19">num</name> <init pos:start="37:21" pos:end="37:35">= <expr pos:start="37:23" pos:end="37:35"><call pos:start="37:23" pos:end="37:35"><name pos:start="37:23" pos:end="37:31">avio_rl64</name><argument_list pos:start="37:32" pos:end="37:35">(<argument pos:start="37:33" pos:end="37:34"><expr pos:start="37:33" pos:end="37:34"><name pos:start="37:33" pos:end="37:34">pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="39:9" pos:end="61:52"><if pos:start="39:9" pos:end="43:52">if <condition pos:start="39:12" pos:end="41:62">(<expr pos:start="39:13" pos:end="41:61"><operator pos:start="39:13" pos:end="39:13">!</operator><call pos:start="39:14" pos:end="39:43"><name pos:start="39:14" pos:end="39:19">strcmp</name><argument_list pos:start="39:20" pos:end="39:43">(<argument pos:start="39:21" pos:end="39:23"><expr pos:start="39:21" pos:end="39:23"><name pos:start="39:21" pos:end="39:23">key</name></expr></argument>, <argument pos:start="39:26" pos:end="39:42"><expr pos:start="39:26" pos:end="39:42"><literal type="string" pos:start="39:26" pos:end="39:42">"WM/EncodingTime"</literal></expr></argument>)</argument_list></call> <operator pos:start="39:45" pos:end="39:46">||</operator>

            <operator pos:start="41:13" pos:end="41:13">!</operator><call pos:start="41:14" pos:end="41:61"><name pos:start="41:14" pos:end="41:19">strcmp</name><argument_list pos:start="41:20" pos:end="41:61">(<argument pos:start="41:21" pos:end="41:23"><expr pos:start="41:21" pos:end="41:23"><name pos:start="41:21" pos:end="41:23">key</name></expr></argument>, <argument pos:start="41:26" pos:end="41:60"><expr pos:start="41:26" pos:end="41:60"><literal type="string" pos:start="41:26" pos:end="41:60">"WM/MediaOriginalBroadcastDateTime"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="43:13" pos:end="43:52"><block_content pos:start="43:13" pos:end="43:52">

            <expr_stmt pos:start="43:13" pos:end="43:52"><expr pos:start="43:13" pos:end="43:51"><call pos:start="43:13" pos:end="43:51"><name pos:start="43:13" pos:end="43:31">filetime_to_iso8601</name><argument_list pos:start="43:32" pos:end="43:51">(<argument pos:start="43:33" pos:end="43:35"><expr pos:start="43:33" pos:end="43:35"><name pos:start="43:33" pos:end="43:35">buf</name></expr></argument>, <argument pos:start="43:38" pos:end="43:45"><expr pos:start="43:38" pos:end="43:45"><name pos:start="43:38" pos:end="43:45">buf_size</name></expr></argument>, <argument pos:start="43:48" pos:end="43:50"><expr pos:start="43:48" pos:end="43:50"><name pos:start="43:48" pos:end="43:50">num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="45:9" pos:end="49:53">else if <condition pos:start="45:17" pos:end="47:48">(<expr pos:start="45:18" pos:end="47:47"><operator pos:start="45:18" pos:end="45:18">!</operator><call pos:start="45:19" pos:end="45:50"><name pos:start="45:19" pos:end="45:24">strcmp</name><argument_list pos:start="45:25" pos:end="45:50">(<argument pos:start="45:26" pos:end="45:28"><expr pos:start="45:26" pos:end="45:28"><name pos:start="45:26" pos:end="45:28">key</name></expr></argument>, <argument pos:start="45:31" pos:end="45:49"><expr pos:start="45:31" pos:end="45:49"><literal type="string" pos:start="45:31" pos:end="45:49">"WM/WMRVEncodeTime"</literal></expr></argument>)</argument_list></call> <operator pos:start="45:52" pos:end="45:53">||</operator>

                 <operator pos:start="47:18" pos:end="47:18">!</operator><call pos:start="47:19" pos:end="47:47"><name pos:start="47:19" pos:end="47:24">strcmp</name><argument_list pos:start="47:25" pos:end="47:47">(<argument pos:start="47:26" pos:end="47:28"><expr pos:start="47:26" pos:end="47:28"><name pos:start="47:26" pos:end="47:28">key</name></expr></argument>, <argument pos:start="47:31" pos:end="47:46"><expr pos:start="47:31" pos:end="47:46"><literal type="string" pos:start="47:31" pos:end="47:46">"WM/WMRVEndTime"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="49:13" pos:end="49:53"><block_content pos:start="49:13" pos:end="49:53">

            <expr_stmt pos:start="49:13" pos:end="49:53"><expr pos:start="49:13" pos:end="49:52"><call pos:start="49:13" pos:end="49:52"><name pos:start="49:13" pos:end="49:32">crazytime_to_iso8601</name><argument_list pos:start="49:33" pos:end="49:52">(<argument pos:start="49:34" pos:end="49:36"><expr pos:start="49:34" pos:end="49:36"><name pos:start="49:34" pos:end="49:36">buf</name></expr></argument>, <argument pos:start="49:39" pos:end="49:46"><expr pos:start="49:39" pos:end="49:46"><name pos:start="49:39" pos:end="49:46">buf_size</name></expr></argument>, <argument pos:start="49:49" pos:end="49:51"><expr pos:start="49:49" pos:end="49:51"><name pos:start="49:49" pos:end="49:51">num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="51:9" pos:end="53:51">else if <condition pos:start="51:17" pos:end="51:55">(<expr pos:start="51:18" pos:end="51:54"><operator pos:start="51:18" pos:end="51:18">!</operator><call pos:start="51:19" pos:end="51:54"><name pos:start="51:19" pos:end="51:24">strcmp</name><argument_list pos:start="51:25" pos:end="51:54">(<argument pos:start="51:26" pos:end="51:28"><expr pos:start="51:26" pos:end="51:28"><name pos:start="51:26" pos:end="51:28">key</name></expr></argument>, <argument pos:start="51:31" pos:end="51:53"><expr pos:start="51:31" pos:end="51:53"><literal type="string" pos:start="51:31" pos:end="51:53">"WM/WMRVExpirationDate"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="53:13" pos:end="53:51"><block_content pos:start="53:13" pos:end="53:51">

            <expr_stmt pos:start="53:13" pos:end="53:51"><expr pos:start="53:13" pos:end="53:50"><call pos:start="53:13" pos:end="53:50"><name pos:start="53:13" pos:end="53:30">oledate_to_iso8601</name><argument_list pos:start="53:31" pos:end="53:50">(<argument pos:start="53:32" pos:end="53:34"><expr pos:start="53:32" pos:end="53:34"><name pos:start="53:32" pos:end="53:34">buf</name></expr></argument>, <argument pos:start="53:37" pos:end="53:44"><expr pos:start="53:37" pos:end="53:44"><name pos:start="53:37" pos:end="53:44">buf_size</name></expr></argument>, <argument pos:start="53:47" pos:end="53:49"><expr pos:start="53:47" pos:end="53:49"><name pos:start="53:47" pos:end="53:49">num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="55:9" pos:end="57:59">else if <condition pos:start="55:17" pos:end="55:48">(<expr pos:start="55:18" pos:end="55:47"><operator pos:start="55:18" pos:end="55:18">!</operator><call pos:start="55:19" pos:end="55:47"><name pos:start="55:19" pos:end="55:24">strcmp</name><argument_list pos:start="55:25" pos:end="55:47">(<argument pos:start="55:26" pos:end="55:28"><expr pos:start="55:26" pos:end="55:28"><name pos:start="55:26" pos:end="55:28">key</name></expr></argument>, <argument pos:start="55:31" pos:end="55:46"><expr pos:start="55:31" pos:end="55:46"><literal type="string" pos:start="55:31" pos:end="55:46">"WM/WMRVBitrate"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="57:13" pos:end="57:59"><block_content pos:start="57:13" pos:end="57:59">

            <expr_stmt pos:start="57:13" pos:end="57:59"><expr pos:start="57:13" pos:end="57:58"><call pos:start="57:13" pos:end="57:58"><name pos:start="57:13" pos:end="57:20">snprintf</name><argument_list pos:start="57:21" pos:end="57:58">(<argument pos:start="57:22" pos:end="57:24"><expr pos:start="57:22" pos:end="57:24"><name pos:start="57:22" pos:end="57:24">buf</name></expr></argument>, <argument pos:start="57:27" pos:end="57:34"><expr pos:start="57:27" pos:end="57:34"><name pos:start="57:27" pos:end="57:34">buf_size</name></expr></argument>, <argument pos:start="57:37" pos:end="57:40"><expr pos:start="57:37" pos:end="57:40"><literal type="string" pos:start="57:37" pos:end="57:40">"%f"</literal></expr></argument>, <argument pos:start="57:43" pos:end="57:57"><expr pos:start="57:43" pos:end="57:57"><call pos:start="57:43" pos:end="57:57"><name pos:start="57:43" pos:end="57:52">av_int2dbl</name><argument_list pos:start="57:53" pos:end="57:57">(<argument pos:start="57:54" pos:end="57:56"><expr pos:start="57:54" pos:end="57:56"><name pos:start="57:54" pos:end="57:56">num</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="59:9" pos:end="61:52">else<block type="pseudo" pos:start="61:13" pos:end="61:52"><block_content pos:start="61:13" pos:end="61:52">

            <expr_stmt pos:start="61:13" pos:end="61:52"><expr pos:start="61:13" pos:end="61:51"><call pos:start="61:13" pos:end="61:51"><name pos:start="61:13" pos:end="61:20">snprintf</name><argument_list pos:start="61:21" pos:end="61:51">(<argument pos:start="61:22" pos:end="61:24"><expr pos:start="61:22" pos:end="61:24"><name pos:start="61:22" pos:end="61:24">buf</name></expr></argument>, <argument pos:start="61:27" pos:end="61:34"><expr pos:start="61:27" pos:end="61:34"><name pos:start="61:27" pos:end="61:34">buf_size</name></expr></argument>, <argument pos:start="61:37" pos:end="61:45"><expr pos:start="61:37" pos:end="61:45"><literal type="string" pos:start="61:37" pos:end="61:39">"%"</literal><name pos:start="61:40" pos:end="61:45">PRIi64</name></expr></argument>, <argument pos:start="61:48" pos:end="61:50"><expr pos:start="61:48" pos:end="61:50"><name pos:start="61:48" pos:end="61:50">num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="63:7" pos:end="67:5">else if <condition pos:start="63:15" pos:end="63:40">(<expr pos:start="63:16" pos:end="63:39"><name pos:start="63:16" pos:end="63:19">type</name> <operator pos:start="63:21" pos:end="63:22">==</operator> <literal type="number" pos:start="63:24" pos:end="63:24">5</literal> <operator pos:start="63:26" pos:end="63:27">&amp;&amp;</operator> <name pos:start="63:29" pos:end="63:34">length</name> <operator pos:start="63:36" pos:end="63:37">==</operator> <literal type="number" pos:start="63:39" pos:end="63:39">2</literal></expr>)</condition> <block pos:start="63:42" pos:end="67:5">{<block_content pos:start="65:9" pos:end="65:58">

        <expr_stmt pos:start="65:9" pos:end="65:58"><expr pos:start="65:9" pos:end="65:57"><call pos:start="65:9" pos:end="65:57"><name pos:start="65:9" pos:end="65:16">snprintf</name><argument_list pos:start="65:17" pos:end="65:57">(<argument pos:start="65:18" pos:end="65:20"><expr pos:start="65:18" pos:end="65:20"><name pos:start="65:18" pos:end="65:20">buf</name></expr></argument>, <argument pos:start="65:23" pos:end="65:30"><expr pos:start="65:23" pos:end="65:30"><name pos:start="65:23" pos:end="65:30">buf_size</name></expr></argument>, <argument pos:start="65:33" pos:end="65:41"><expr pos:start="65:33" pos:end="65:41"><literal type="string" pos:start="65:33" pos:end="65:35">"%"</literal><name pos:start="65:36" pos:end="65:41">PRIi16</name></expr></argument>, <argument pos:start="65:44" pos:end="65:56"><expr pos:start="65:44" pos:end="65:56"><call pos:start="65:44" pos:end="65:56"><name pos:start="65:44" pos:end="65:52">avio_rl16</name><argument_list pos:start="65:53" pos:end="65:56">(<argument pos:start="65:54" pos:end="65:55"><expr pos:start="65:54" pos:end="65:55"><name pos:start="65:54" pos:end="65:55">pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="67:7" pos:end="75:5">else if <condition pos:start="67:15" pos:end="67:41">(<expr pos:start="67:16" pos:end="67:40"><name pos:start="67:16" pos:end="67:19">type</name> <operator pos:start="67:21" pos:end="67:22">==</operator> <literal type="number" pos:start="67:24" pos:end="67:24">6</literal> <operator pos:start="67:26" pos:end="67:27">&amp;&amp;</operator> <name pos:start="67:29" pos:end="67:34">length</name> <operator pos:start="67:36" pos:end="67:37">==</operator> <literal type="number" pos:start="67:39" pos:end="67:40">16</literal></expr>)</condition> <block pos:start="67:43" pos:end="75:5">{<block_content pos:start="69:9" pos:end="73:72">

        <decl_stmt pos:start="69:9" pos:end="69:25"><decl pos:start="69:9" pos:end="69:24"><type pos:start="69:9" pos:end="69:19"><name pos:start="69:9" pos:end="69:19">ff_asf_guid</name></type> <name pos:start="69:21" pos:end="69:24">guid</name></decl>;</decl_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:32"><expr pos:start="71:9" pos:end="71:31"><call pos:start="71:9" pos:end="71:31"><name pos:start="71:9" pos:end="71:17">avio_read</name><argument_list pos:start="71:18" pos:end="71:31">(<argument pos:start="71:19" pos:end="71:20"><expr pos:start="71:19" pos:end="71:20"><name pos:start="71:19" pos:end="71:20">pb</name></expr></argument>, <argument pos:start="71:23" pos:end="71:26"><expr pos:start="71:23" pos:end="71:26"><name pos:start="71:23" pos:end="71:26">guid</name></expr></argument>, <argument pos:start="71:29" pos:end="71:30"><expr pos:start="71:29" pos:end="71:30"><literal type="number" pos:start="71:29" pos:end="71:30">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:72"><expr pos:start="73:9" pos:end="73:71"><call pos:start="73:9" pos:end="73:71"><name pos:start="73:9" pos:end="73:16">snprintf</name><argument_list pos:start="73:17" pos:end="73:71">(<argument pos:start="73:18" pos:end="73:20"><expr pos:start="73:18" pos:end="73:20"><name pos:start="73:18" pos:end="73:20">buf</name></expr></argument>, <argument pos:start="73:23" pos:end="73:30"><expr pos:start="73:23" pos:end="73:30"><name pos:start="73:23" pos:end="73:30">buf_size</name></expr></argument>, <argument pos:start="73:33" pos:end="73:47"><expr pos:start="73:33" pos:end="73:47"><name pos:start="73:33" pos:end="73:47">PRI_PRETTY_GUID</name></expr></argument>, <argument pos:start="73:50" pos:end="73:70"><expr pos:start="73:50" pos:end="73:70"><call pos:start="73:50" pos:end="73:70"><name pos:start="73:50" pos:end="73:64">ARG_PRETTY_GUID</name><argument_list pos:start="73:65" pos:end="73:70">(<argument pos:start="73:66" pos:end="73:69"><expr pos:start="73:66" pos:end="73:69"><name pos:start="73:66" pos:end="73:69">guid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="75:7" pos:end="83:5">else if <condition pos:start="75:15" pos:end="75:55">(<expr pos:start="75:16" pos:end="75:54"><name pos:start="75:16" pos:end="75:19">type</name> <operator pos:start="75:21" pos:end="75:22">==</operator> <literal type="number" pos:start="75:24" pos:end="75:24">2</literal> <operator pos:start="75:26" pos:end="75:27">&amp;&amp;</operator> <operator pos:start="75:29" pos:end="75:29">!</operator><call pos:start="75:30" pos:end="75:54"><name pos:start="75:30" pos:end="75:35">strcmp</name><argument_list pos:start="75:36" pos:end="75:54">(<argument pos:start="75:37" pos:end="75:39"><expr pos:start="75:37" pos:end="75:39"><name pos:start="75:37" pos:end="75:39">key</name></expr></argument>, <argument pos:start="75:42" pos:end="75:53"><expr pos:start="75:42" pos:end="75:53"><literal type="string" pos:start="75:42" pos:end="75:53">"WM/Picture"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="75:57" pos:end="83:5">{<block_content pos:start="77:9" pos:end="81:15">

        <expr_stmt pos:start="77:9" pos:end="77:38"><expr pos:start="77:9" pos:end="77:37"><call pos:start="77:9" pos:end="77:37"><name pos:start="77:9" pos:end="77:22">get_attachment</name><argument_list pos:start="77:23" pos:end="77:37">(<argument pos:start="77:24" pos:end="77:24"><expr pos:start="77:24" pos:end="77:24"><name pos:start="77:24" pos:end="77:24">s</name></expr></argument>, <argument pos:start="77:27" pos:end="77:28"><expr pos:start="77:27" pos:end="77:28"><name pos:start="77:27" pos:end="77:28">pb</name></expr></argument>, <argument pos:start="77:31" pos:end="77:36"><expr pos:start="77:31" pos:end="77:36"><name pos:start="77:31" pos:end="77:36">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:23"><expr pos:start="79:9" pos:end="79:22"><call pos:start="79:9" pos:end="79:22"><name pos:start="79:9" pos:end="79:16">av_freep</name><argument_list pos:start="79:17" pos:end="79:22">(<argument pos:start="79:18" pos:end="79:21"><expr pos:start="79:18" pos:end="79:21"><operator pos:start="79:18" pos:end="79:18">&amp;</operator><name pos:start="79:19" pos:end="79:21">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="81:9" pos:end="81:15">return;</return>

    </block_content>}</block></if> <else pos:start="83:7" pos:end="93:5">else <block pos:start="83:12" pos:end="93:5">{<block_content pos:start="85:9" pos:end="91:15">

        <expr_stmt pos:start="85:9" pos:end="85:23"><expr pos:start="85:9" pos:end="85:22"><call pos:start="85:9" pos:end="85:22"><name pos:start="85:9" pos:end="85:16">av_freep</name><argument_list pos:start="85:17" pos:end="85:22">(<argument pos:start="85:18" pos:end="85:21"><expr pos:start="85:18" pos:end="85:21"><operator pos:start="85:18" pos:end="85:18">&amp;</operator><name pos:start="85:19" pos:end="85:21">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:115"><expr pos:start="87:9" pos:end="87:114"><call pos:start="87:9" pos:end="87:114"><name pos:start="87:9" pos:end="87:14">av_log</name><argument_list pos:start="87:15" pos:end="87:114">(<argument pos:start="87:16" pos:end="87:16"><expr pos:start="87:16" pos:end="87:16"><name pos:start="87:16" pos:end="87:16">s</name></expr></argument>, <argument pos:start="87:19" pos:end="87:32"><expr pos:start="87:19" pos:end="87:32"><name pos:start="87:19" pos:end="87:32">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="87:35" pos:end="87:94"><expr pos:start="87:35" pos:end="87:94"><literal type="string" pos:start="87:35" pos:end="87:94">"unsupported metadata entry; key:%s, type:%d, length:0x%x\n"</literal></expr></argument>, <argument pos:start="87:97" pos:end="87:99"><expr pos:start="87:97" pos:end="87:99"><name pos:start="87:97" pos:end="87:99">key</name></expr></argument>, <argument pos:start="87:102" pos:end="87:105"><expr pos:start="87:102" pos:end="87:105"><name pos:start="87:102" pos:end="87:105">type</name></expr></argument>, <argument pos:start="87:108" pos:end="87:113"><expr pos:start="87:108" pos:end="87:113"><name pos:start="87:108" pos:end="87:113">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:30"><expr pos:start="89:9" pos:end="89:29"><call pos:start="89:9" pos:end="89:29"><name pos:start="89:9" pos:end="89:17">avio_skip</name><argument_list pos:start="89:18" pos:end="89:29">(<argument pos:start="89:19" pos:end="89:20"><expr pos:start="89:19" pos:end="89:20"><name pos:start="89:19" pos:end="89:20">pb</name></expr></argument>, <argument pos:start="89:23" pos:end="89:28"><expr pos:start="89:23" pos:end="89:28"><name pos:start="89:23" pos:end="89:28">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="91:9" pos:end="91:15">return;</return>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="97:5" pos:end="97:48"><expr pos:start="97:5" pos:end="97:47"><call pos:start="97:5" pos:end="97:47"><name pos:start="97:5" pos:end="97:20">av_metadata_set2</name><argument_list pos:start="97:21" pos:end="97:47">(<argument pos:start="97:22" pos:end="97:33"><expr pos:start="97:22" pos:end="97:33"><operator pos:start="97:22" pos:end="97:22">&amp;</operator><name pos:start="97:23" pos:end="97:33"><name pos:start="97:23" pos:end="97:23">s</name><operator pos:start="97:24" pos:end="97:25">-&gt;</operator><name pos:start="97:26" pos:end="97:33">metadata</name></name></expr></argument>, <argument pos:start="97:36" pos:end="97:38"><expr pos:start="97:36" pos:end="97:38"><name pos:start="97:36" pos:end="97:38">key</name></expr></argument>, <argument pos:start="97:41" pos:end="97:43"><expr pos:start="97:41" pos:end="97:43"><name pos:start="97:41" pos:end="97:43">buf</name></expr></argument>, <argument pos:start="97:46" pos:end="97:46"><expr pos:start="97:46" pos:end="97:46"><literal type="number" pos:start="97:46" pos:end="97:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:19"><expr pos:start="99:5" pos:end="99:18"><call pos:start="99:5" pos:end="99:18"><name pos:start="99:5" pos:end="99:12">av_freep</name><argument_list pos:start="99:13" pos:end="99:18">(<argument pos:start="99:14" pos:end="99:17"><expr pos:start="99:14" pos:end="99:17"><operator pos:start="99:14" pos:end="99:14">&amp;</operator><name pos:start="99:15" pos:end="99:17">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
