<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19224.c" pos:tabs="8"><function pos:start="1:1" pos:end="343:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:20">pc_init1</name><parameter_list pos:start="1:21" pos:end="5:42">(<parameter pos:start="1:22" pos:end="1:46"><decl pos:start="1:22" pos:end="1:46"><type pos:start="1:22" pos:end="1:46"><name pos:start="1:22" pos:end="1:40">QEMUMachineInitArgs</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:46">args</name></decl></parameter>,

                     <parameter pos:start="3:22" pos:end="3:36"><decl pos:start="3:22" pos:end="3:36"><type pos:start="3:22" pos:end="3:36"><name pos:start="3:22" pos:end="3:24">int</name></type> <name pos:start="3:26" pos:end="3:36">pci_enabled</name></decl></parameter>,

                     <parameter pos:start="5:22" pos:end="5:41"><decl pos:start="5:22" pos:end="5:41"><type pos:start="5:22" pos:end="5:41"><name pos:start="5:22" pos:end="5:24">int</name></type> <name pos:start="5:26" pos:end="5:41">kvmclock_enabled</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="343:1">{<block_content pos:start="9:5" pos:end="341:5">

    <decl_stmt pos:start="9:5" pos:end="9:54"><decl pos:start="9:5" pos:end="9:53"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">MemoryRegion</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:31">system_memory</name> <init pos:start="9:33" pos:end="9:53">= <expr pos:start="9:35" pos:end="9:53"><call pos:start="9:35" pos:end="9:53"><name pos:start="9:35" pos:end="9:51">get_system_memory</name><argument_list pos:start="9:52" pos:end="9:53">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:46"><decl pos:start="11:5" pos:end="11:45"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">MemoryRegion</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:27">system_io</name> <init pos:start="11:29" pos:end="11:45">= <expr pos:start="11:31" pos:end="11:45"><call pos:start="11:31" pos:end="11:45"><name pos:start="11:31" pos:end="11:43">get_system_io</name><argument_list pos:start="11:44" pos:end="11:45">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:10"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:52"><decl pos:start="15:5" pos:end="15:32"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:14">ram_addr_t</name></type> <name pos:start="15:16" pos:end="15:32">below_4g_mem_size</name></decl>, <decl pos:start="15:35" pos:end="15:51"><type ref="prev" pos:start="15:5" pos:end="15:14"/><name pos:start="15:35" pos:end="15:51">above_4g_mem_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:20"><decl pos:start="17:5" pos:end="17:19"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:10">PCIBus</name> <modifier pos:start="17:12" pos:end="17:12">*</modifier></type><name pos:start="17:13" pos:end="17:19">pci_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:20"><decl pos:start="19:5" pos:end="19:19"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:10">ISABus</name> <modifier pos:start="19:12" pos:end="19:12">*</modifier></type><name pos:start="19:13" pos:end="19:19">isa_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:33"><decl pos:start="21:5" pos:end="21:32"><type pos:start="21:5" pos:end="21:20"><name pos:start="21:5" pos:end="21:18">PCII440FXState</name> <modifier pos:start="21:20" pos:end="21:20">*</modifier></type><name pos:start="21:21" pos:end="21:32">i440fx_state</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:25"><decl pos:start="23:5" pos:end="23:24"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:19">piix3_devfn</name> <init pos:start="23:21" pos:end="23:24">= <expr pos:start="23:23" pos:end="23:24"><operator pos:start="23:23" pos:end="23:23">-</operator><literal type="number" pos:start="23:24" pos:end="23:24">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:22"><decl pos:start="25:5" pos:end="25:21"><type pos:start="25:5" pos:end="25:14"><name pos:start="25:5" pos:end="25:12">qemu_irq</name> <modifier pos:start="25:14" pos:end="25:14">*</modifier></type><name pos:start="25:15" pos:end="25:21">cpu_irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:18"><decl pos:start="27:5" pos:end="27:17"><type pos:start="27:5" pos:end="27:14"><name pos:start="27:5" pos:end="27:12">qemu_irq</name> <modifier pos:start="27:14" pos:end="27:14">*</modifier></type><name pos:start="27:15" pos:end="27:17">gsi</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:20"><decl pos:start="29:5" pos:end="29:19"><type pos:start="29:5" pos:end="29:14"><name pos:start="29:5" pos:end="29:12">qemu_irq</name> <modifier pos:start="29:14" pos:end="29:14">*</modifier></type><name pos:start="29:15" pos:end="29:19">i8259</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:22"><decl pos:start="31:5" pos:end="31:21"><type pos:start="31:5" pos:end="31:14"><name pos:start="31:5" pos:end="31:12">qemu_irq</name> <modifier pos:start="31:14" pos:end="31:14">*</modifier></type><name pos:start="31:15" pos:end="31:21">smi_irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:24"><decl pos:start="33:5" pos:end="33:23"><type pos:start="33:5" pos:end="33:14"><name pos:start="33:5" pos:end="33:12">GSIState</name> <modifier pos:start="33:14" pos:end="33:14">*</modifier></type><name pos:start="33:15" pos:end="33:23">gsi_state</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:46"><decl pos:start="35:5" pos:end="35:45"><type pos:start="35:5" pos:end="35:15"><name pos:start="35:5" pos:end="35:13">DriveInfo</name> <modifier pos:start="35:15" pos:end="35:15">*</modifier></type><name pos:start="35:16" pos:end="35:45"><name pos:start="35:16" pos:end="35:17">hd</name><index pos:start="35:18" pos:end="35:45">[<expr pos:start="35:19" pos:end="35:44"><name pos:start="35:19" pos:end="35:29">MAX_IDE_BUS</name> <operator pos:start="35:31" pos:end="35:31">*</operator> <name pos:start="35:33" pos:end="35:44">MAX_IDE_DEVS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:34"><decl pos:start="37:5" pos:end="37:33"><type pos:start="37:5" pos:end="37:14"><name pos:start="37:5" pos:end="37:12">BusState</name> <modifier pos:start="37:14" pos:end="37:14">*</modifier></type><name pos:start="37:15" pos:end="37:33"><name pos:start="37:15" pos:end="37:20">idebus</name><index pos:start="37:21" pos:end="37:33">[<expr pos:start="37:22" pos:end="37:32"><name pos:start="37:22" pos:end="37:32">MAX_IDE_BUS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:25"><decl pos:start="39:5" pos:end="39:24"><type pos:start="39:5" pos:end="39:15"><name pos:start="39:5" pos:end="39:13">ISADevice</name> <modifier pos:start="39:15" pos:end="39:15">*</modifier></type><name pos:start="39:16" pos:end="39:24">rtc_state</name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:22"><decl pos:start="41:5" pos:end="41:21"><type pos:start="41:5" pos:end="41:15"><name pos:start="41:5" pos:end="41:13">ISADevice</name> <modifier pos:start="41:15" pos:end="41:15">*</modifier></type><name pos:start="41:16" pos:end="41:21">floppy</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:29"><decl pos:start="43:5" pos:end="43:28"><type pos:start="43:5" pos:end="43:18"><name pos:start="43:5" pos:end="43:16">MemoryRegion</name> <modifier pos:start="43:18" pos:end="43:18">*</modifier></type><name pos:start="43:19" pos:end="43:28">ram_memory</name></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:29"><decl pos:start="45:5" pos:end="45:28"><type pos:start="45:5" pos:end="45:18"><name pos:start="45:5" pos:end="45:16">MemoryRegion</name> <modifier pos:start="45:18" pos:end="45:18">*</modifier></type><name pos:start="45:19" pos:end="45:28">pci_memory</name></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:29"><decl pos:start="47:5" pos:end="47:28"><type pos:start="47:5" pos:end="47:18"><name pos:start="47:5" pos:end="47:16">MemoryRegion</name> <modifier pos:start="47:18" pos:end="47:18">*</modifier></type><name pos:start="47:19" pos:end="47:28">rom_memory</name></decl>;</decl_stmt>

    <decl_stmt pos:start="49:5" pos:end="49:28"><decl pos:start="49:5" pos:end="49:27"><type pos:start="49:5" pos:end="49:17"><name pos:start="49:5" pos:end="49:15">DeviceState</name> <modifier pos:start="49:17" pos:end="49:17">*</modifier></type><name pos:start="49:18" pos:end="49:27">icc_bridge</name></decl>;</decl_stmt>

    <decl_stmt pos:start="51:5" pos:end="51:30"><decl pos:start="51:5" pos:end="51:29"><type pos:start="51:5" pos:end="51:16"><name pos:start="51:5" pos:end="51:14">FWCfgState</name> <modifier pos:start="51:16" pos:end="51:16">*</modifier></type><name pos:start="51:17" pos:end="51:22">fw_cfg</name> <init pos:start="51:24" pos:end="51:29">= <expr pos:start="51:26" pos:end="51:29"><name pos:start="51:26" pos:end="51:29">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="53:5" pos:end="53:28"><decl pos:start="53:5" pos:end="53:27"><type pos:start="53:5" pos:end="53:17"><name pos:start="53:5" pos:end="53:15">PcGuestInfo</name> <modifier pos:start="53:17" pos:end="53:17">*</modifier></type><name pos:start="53:18" pos:end="53:27">guest_info</name></decl>;</decl_stmt>



    <if_stmt pos:start="57:5" pos:end="63:5"><if pos:start="57:5" pos:end="63:5">if <condition pos:start="57:8" pos:end="57:56">(<expr pos:start="57:9" pos:end="57:55"><call pos:start="57:9" pos:end="57:21"><name pos:start="57:9" pos:end="57:19">xen_enabled</name><argument_list pos:start="57:20" pos:end="57:21">()</argument_list></call> <operator pos:start="57:23" pos:end="57:24">&amp;&amp;</operator> <call pos:start="57:26" pos:end="57:50"><name pos:start="57:26" pos:end="57:37">xen_hvm_init</name><argument_list pos:start="57:38" pos:end="57:50">(<argument pos:start="57:39" pos:end="57:49"><expr pos:start="57:39" pos:end="57:49"><operator pos:start="57:39" pos:end="57:39">&amp;</operator><name pos:start="57:40" pos:end="57:49">ram_memory</name></expr></argument>)</argument_list></call> <operator pos:start="57:52" pos:end="57:53">!=</operator> <literal type="number" pos:start="57:55" pos:end="57:55">0</literal></expr>)</condition> <block pos:start="57:58" pos:end="63:5">{<block_content pos:start="59:9" pos:end="61:16">

        <expr_stmt pos:start="59:9" pos:end="59:80"><expr pos:start="59:9" pos:end="59:79"><call pos:start="59:9" pos:end="59:79"><name pos:start="59:9" pos:end="59:15">fprintf</name><argument_list pos:start="59:16" pos:end="59:79">(<argument pos:start="59:17" pos:end="59:22"><expr pos:start="59:17" pos:end="59:22"><name pos:start="59:17" pos:end="59:22">stderr</name></expr></argument>, <argument pos:start="59:25" pos:end="59:78"><expr pos:start="59:25" pos:end="59:78"><literal type="string" pos:start="59:25" pos:end="59:78">"xen hardware virtual machine initialisation failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:16"><expr pos:start="61:9" pos:end="61:15"><call pos:start="61:9" pos:end="61:15"><name pos:start="61:9" pos:end="61:12">exit</name><argument_list pos:start="61:13" pos:end="61:15">(<argument pos:start="61:14" pos:end="61:14"><expr pos:start="61:14" pos:end="61:14"><literal type="number" pos:start="61:14" pos:end="61:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:52"><expr pos:start="67:5" pos:end="67:51"><name pos:start="67:5" pos:end="67:14">icc_bridge</name> <operator pos:start="67:16" pos:end="67:16">=</operator> <call pos:start="67:18" pos:end="67:51"><name pos:start="67:18" pos:end="67:28">qdev_create</name><argument_list pos:start="67:29" pos:end="67:51">(<argument pos:start="67:30" pos:end="67:33"><expr pos:start="67:30" pos:end="67:33"><name pos:start="67:30" pos:end="67:33">NULL</name></expr></argument>, <argument pos:start="67:36" pos:end="67:50"><expr pos:start="67:36" pos:end="67:50"><name pos:start="67:36" pos:end="67:50">TYPE_ICC_BRIDGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="71:56"><expr pos:start="69:5" pos:end="71:55"><call pos:start="69:5" pos:end="71:55"><name pos:start="69:5" pos:end="69:29">object_property_add_child</name><argument_list pos:start="69:30" pos:end="71:55">(<argument pos:start="69:31" pos:end="69:48"><expr pos:start="69:31" pos:end="69:48"><call pos:start="69:31" pos:end="69:48"><name pos:start="69:31" pos:end="69:46">qdev_get_machine</name><argument_list pos:start="69:47" pos:end="69:48">()</argument_list></call></expr></argument>, <argument pos:start="69:51" pos:end="69:62"><expr pos:start="69:51" pos:end="69:62"><literal type="string" pos:start="69:51" pos:end="69:62">"icc-bridge"</literal></expr></argument>,

                              <argument pos:start="71:31" pos:end="71:48"><expr pos:start="71:31" pos:end="71:48"><call pos:start="71:31" pos:end="71:48"><name pos:start="71:31" pos:end="71:36">OBJECT</name><argument_list pos:start="71:37" pos:end="71:48">(<argument pos:start="71:38" pos:end="71:47"><expr pos:start="71:38" pos:end="71:47"><name pos:start="71:38" pos:end="71:47">icc_bridge</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="71:51" pos:end="71:54"><expr pos:start="71:51" pos:end="71:54"><name pos:start="71:51" pos:end="71:54">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="75:5" pos:end="75:46"><expr pos:start="75:5" pos:end="75:45"><call pos:start="75:5" pos:end="75:45"><name pos:start="75:5" pos:end="75:16">pc_cpus_init</name><argument_list pos:start="75:17" pos:end="75:45">(<argument pos:start="75:18" pos:end="75:32"><expr pos:start="75:18" pos:end="75:32"><name pos:start="75:18" pos:end="75:32"><name pos:start="75:18" pos:end="75:21">args</name><operator pos:start="75:22" pos:end="75:23">-&gt;</operator><name pos:start="75:24" pos:end="75:32">cpu_model</name></name></expr></argument>, <argument pos:start="75:35" pos:end="75:44"><expr pos:start="75:35" pos:end="75:44"><name pos:start="75:35" pos:end="75:44">icc_bridge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="79:5" pos:end="83:5"><if pos:start="79:5" pos:end="83:5">if <condition pos:start="79:8" pos:end="79:42">(<expr pos:start="79:9" pos:end="79:41"><call pos:start="79:9" pos:end="79:21"><name pos:start="79:9" pos:end="79:19">kvm_enabled</name><argument_list pos:start="79:20" pos:end="79:21">()</argument_list></call> <operator pos:start="79:23" pos:end="79:24">&amp;&amp;</operator> <name pos:start="79:26" pos:end="79:41">kvmclock_enabled</name></expr>)</condition> <block pos:start="79:44" pos:end="83:5">{<block_content pos:start="81:9" pos:end="81:26">

        <expr_stmt pos:start="81:9" pos:end="81:26"><expr pos:start="81:9" pos:end="81:25"><call pos:start="81:9" pos:end="81:25"><name pos:start="81:9" pos:end="81:23">kvmclock_create</name><argument_list pos:start="81:24" pos:end="81:25">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="87:5" pos:end="99:5"><if pos:start="87:5" pos:end="93:5">if <condition pos:start="87:8" pos:end="87:37">(<expr pos:start="87:9" pos:end="87:36"><name pos:start="87:9" pos:end="87:22"><name pos:start="87:9" pos:end="87:12">args</name><operator pos:start="87:13" pos:end="87:14">-&gt;</operator><name pos:start="87:15" pos:end="87:22">ram_size</name></name> <operator pos:start="87:24" pos:end="87:25">&gt;=</operator> <literal type="number" pos:start="87:27" pos:end="87:36">0xe0000000</literal></expr>)</condition> <block pos:start="87:39" pos:end="93:5">{<block_content pos:start="89:9" pos:end="91:39">

        <expr_stmt pos:start="89:9" pos:end="89:56"><expr pos:start="89:9" pos:end="89:55"><name pos:start="89:9" pos:end="89:25">above_4g_mem_size</name> <operator pos:start="89:27" pos:end="89:27">=</operator> <name pos:start="89:29" pos:end="89:42"><name pos:start="89:29" pos:end="89:32">args</name><operator pos:start="89:33" pos:end="89:34">-&gt;</operator><name pos:start="89:35" pos:end="89:42">ram_size</name></name> <operator pos:start="89:44" pos:end="89:44">-</operator> <literal type="number" pos:start="89:46" pos:end="89:55">0xe0000000</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:39"><expr pos:start="91:9" pos:end="91:38"><name pos:start="91:9" pos:end="91:25">below_4g_mem_size</name> <operator pos:start="91:27" pos:end="91:27">=</operator> <literal type="number" pos:start="91:29" pos:end="91:38">0xe0000000</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="93:7" pos:end="99:5">else <block pos:start="93:12" pos:end="99:5">{<block_content pos:start="95:9" pos:end="97:43">

        <expr_stmt pos:start="95:9" pos:end="95:30"><expr pos:start="95:9" pos:end="95:29"><name pos:start="95:9" pos:end="95:25">above_4g_mem_size</name> <operator pos:start="95:27" pos:end="95:27">=</operator> <literal type="number" pos:start="95:29" pos:end="95:29">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:43"><expr pos:start="97:9" pos:end="97:42"><name pos:start="97:9" pos:end="97:25">below_4g_mem_size</name> <operator pos:start="97:27" pos:end="97:27">=</operator> <name pos:start="97:29" pos:end="97:42"><name pos:start="97:29" pos:end="97:32">args</name><operator pos:start="97:33" pos:end="97:34">-&gt;</operator><name pos:start="97:35" pos:end="97:42">ram_size</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="103:5" pos:end="117:5"><if pos:start="103:5" pos:end="111:5">if <condition pos:start="103:8" pos:end="103:20">(<expr pos:start="103:9" pos:end="103:19"><name pos:start="103:9" pos:end="103:19">pci_enabled</name></expr>)</condition> <block pos:start="103:22" pos:end="111:5">{<block_content pos:start="105:9" pos:end="109:32">

        <expr_stmt pos:start="105:9" pos:end="105:44"><expr pos:start="105:9" pos:end="105:43"><name pos:start="105:9" pos:end="105:18">pci_memory</name> <operator pos:start="105:20" pos:end="105:20">=</operator> <call pos:start="105:22" pos:end="105:43"><name pos:start="105:22" pos:end="105:26">g_new</name><argument_list pos:start="105:27" pos:end="105:43">(<argument pos:start="105:28" pos:end="105:39"><expr pos:start="105:28" pos:end="105:39"><name pos:start="105:28" pos:end="105:39">MemoryRegion</name></expr></argument>, <argument pos:start="105:42" pos:end="105:42"><expr pos:start="105:42" pos:end="105:42"><literal type="number" pos:start="105:42" pos:end="105:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:63"><expr pos:start="107:9" pos:end="107:62"><call pos:start="107:9" pos:end="107:62"><name pos:start="107:9" pos:end="107:26">memory_region_init</name><argument_list pos:start="107:27" pos:end="107:62">(<argument pos:start="107:28" pos:end="107:37"><expr pos:start="107:28" pos:end="107:37"><name pos:start="107:28" pos:end="107:37">pci_memory</name></expr></argument>, <argument pos:start="107:40" pos:end="107:43"><expr pos:start="107:40" pos:end="107:43"><name pos:start="107:40" pos:end="107:43">NULL</name></expr></argument>, <argument pos:start="107:46" pos:end="107:50"><expr pos:start="107:46" pos:end="107:50"><literal type="string" pos:start="107:46" pos:end="107:50">"pci"</literal></expr></argument>, <argument pos:start="107:53" pos:end="107:61"><expr pos:start="107:53" pos:end="107:61"><name pos:start="107:53" pos:end="107:61">INT64_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:32"><expr pos:start="109:9" pos:end="109:31"><name pos:start="109:9" pos:end="109:18">rom_memory</name> <operator pos:start="109:20" pos:end="109:20">=</operator> <name pos:start="109:22" pos:end="109:31">pci_memory</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="111:7" pos:end="117:5">else <block pos:start="111:12" pos:end="117:5">{<block_content pos:start="113:9" pos:end="115:35">

        <expr_stmt pos:start="113:9" pos:end="113:26"><expr pos:start="113:9" pos:end="113:25"><name pos:start="113:9" pos:end="113:18">pci_memory</name> <operator pos:start="113:20" pos:end="113:20">=</operator> <name pos:start="113:22" pos:end="113:25">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:35"><expr pos:start="115:9" pos:end="115:34"><name pos:start="115:9" pos:end="115:18">rom_memory</name> <operator pos:start="115:20" pos:end="115:20">=</operator> <name pos:start="115:22" pos:end="115:34">system_memory</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="121:5" pos:end="121:74"><expr pos:start="121:5" pos:end="121:73"><name pos:start="121:5" pos:end="121:14">guest_info</name> <operator pos:start="121:16" pos:end="121:16">=</operator> <call pos:start="121:18" pos:end="121:73"><name pos:start="121:18" pos:end="121:35">pc_guest_info_init</name><argument_list pos:start="121:36" pos:end="121:73">(<argument pos:start="121:37" pos:end="121:53"><expr pos:start="121:37" pos:end="121:53"><name pos:start="121:37" pos:end="121:53">below_4g_mem_size</name></expr></argument>, <argument pos:start="121:56" pos:end="121:72"><expr pos:start="121:56" pos:end="121:72"><name pos:start="121:56" pos:end="121:72">above_4g_mem_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="125:5" pos:end="125:48"><expr pos:start="125:5" pos:end="125:47"><name pos:start="125:5" pos:end="125:30"><name pos:start="125:5" pos:end="125:14">guest_info</name><operator pos:start="125:15" pos:end="125:16">-&gt;</operator><name pos:start="125:17" pos:end="125:30">has_acpi_build</name></name> <operator pos:start="125:32" pos:end="125:32">=</operator> <name pos:start="125:34" pos:end="125:47">has_acpi_build</name></expr>;</expr_stmt>



    <expr_stmt pos:start="129:5" pos:end="129:44"><expr pos:start="129:5" pos:end="129:43"><name pos:start="129:5" pos:end="129:28"><name pos:start="129:5" pos:end="129:14">guest_info</name><operator pos:start="129:15" pos:end="129:16">-&gt;</operator><name pos:start="129:17" pos:end="129:28">has_pci_info</name></name> <operator pos:start="129:30" pos:end="129:30">=</operator> <name pos:start="129:32" pos:end="129:43">has_pci_info</name></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:44"><expr pos:start="131:5" pos:end="131:43"><name pos:start="131:5" pos:end="131:28"><name pos:start="131:5" pos:end="131:14">guest_info</name><operator pos:start="131:15" pos:end="131:16">-&gt;</operator><name pos:start="131:17" pos:end="131:28">isapc_ram_fw</name></name> <operator pos:start="131:30" pos:end="131:30">=</operator> <operator pos:start="131:32" pos:end="131:32">!</operator><name pos:start="131:33" pos:end="131:43">pci_enabled</name></expr>;</expr_stmt>



    <comment type="block" pos:start="135:5" pos:end="135:40">/* allocate ram and load rom/bios */</comment>

    <if_stmt pos:start="137:5" pos:end="149:5"><if pos:start="137:5" pos:end="149:5">if <condition pos:start="137:8" pos:end="137:23">(<expr pos:start="137:9" pos:end="137:22"><operator pos:start="137:9" pos:end="137:9">!</operator><call pos:start="137:10" pos:end="137:22"><name pos:start="137:10" pos:end="137:20">xen_enabled</name><argument_list pos:start="137:21" pos:end="137:22">()</argument_list></call></expr>)</condition> <block pos:start="137:25" pos:end="149:5">{<block_content pos:start="139:9" pos:end="147:60">

        <expr_stmt pos:start="139:9" pos:end="147:60"><expr pos:start="139:9" pos:end="147:59"><name pos:start="139:9" pos:end="139:14">fw_cfg</name> <operator pos:start="139:16" pos:end="139:16">=</operator> <call pos:start="139:18" pos:end="147:59"><name pos:start="139:18" pos:end="139:31">pc_memory_init</name><argument_list pos:start="139:32" pos:end="147:59">(<argument pos:start="139:33" pos:end="139:45"><expr pos:start="139:33" pos:end="139:45"><name pos:start="139:33" pos:end="139:45">system_memory</name></expr></argument>,

                       <argument pos:start="141:24" pos:end="141:44"><expr pos:start="141:24" pos:end="141:44"><name pos:start="141:24" pos:end="141:44"><name pos:start="141:24" pos:end="141:27">args</name><operator pos:start="141:28" pos:end="141:29">-&gt;</operator><name pos:start="141:30" pos:end="141:44">kernel_filename</name></name></expr></argument>, <argument pos:start="141:47" pos:end="141:66"><expr pos:start="141:47" pos:end="141:66"><name pos:start="141:47" pos:end="141:66"><name pos:start="141:47" pos:end="141:50">args</name><operator pos:start="141:51" pos:end="141:52">-&gt;</operator><name pos:start="141:53" pos:end="141:66">kernel_cmdline</name></name></expr></argument>,

                       <argument pos:start="143:24" pos:end="143:44"><expr pos:start="143:24" pos:end="143:44"><name pos:start="143:24" pos:end="143:44"><name pos:start="143:24" pos:end="143:27">args</name><operator pos:start="143:28" pos:end="143:29">-&gt;</operator><name pos:start="143:30" pos:end="143:44">initrd_filename</name></name></expr></argument>,

                       <argument pos:start="145:24" pos:end="145:40"><expr pos:start="145:24" pos:end="145:40"><name pos:start="145:24" pos:end="145:40">below_4g_mem_size</name></expr></argument>, <argument pos:start="145:43" pos:end="145:59"><expr pos:start="145:43" pos:end="145:59"><name pos:start="145:43" pos:end="145:59">above_4g_mem_size</name></expr></argument>,

                       <argument pos:start="147:24" pos:end="147:33"><expr pos:start="147:24" pos:end="147:33"><name pos:start="147:24" pos:end="147:33">rom_memory</name></expr></argument>, <argument pos:start="147:36" pos:end="147:46"><expr pos:start="147:36" pos:end="147:46"><operator pos:start="147:36" pos:end="147:36">&amp;</operator><name pos:start="147:37" pos:end="147:46">ram_memory</name></expr></argument>, <argument pos:start="147:49" pos:end="147:58"><expr pos:start="147:49" pos:end="147:58"><name pos:start="147:49" pos:end="147:58">guest_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="153:5" pos:end="153:46"><expr pos:start="153:5" pos:end="153:45"><name pos:start="153:5" pos:end="153:13">gsi_state</name> <operator pos:start="153:15" pos:end="153:15">=</operator> <call pos:start="153:17" pos:end="153:45"><name pos:start="153:17" pos:end="153:25">g_malloc0</name><argument_list pos:start="153:26" pos:end="153:45">(<argument pos:start="153:27" pos:end="153:44"><expr pos:start="153:27" pos:end="153:44"><sizeof pos:start="153:27" pos:end="153:44">sizeof<argument_list pos:start="153:33" pos:end="153:44">(<argument pos:start="153:34" pos:end="153:43"><expr pos:start="153:34" pos:end="153:43"><operator pos:start="153:34" pos:end="153:34">*</operator><name pos:start="153:35" pos:end="153:43">gsi_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="155:5" pos:end="167:5"><if pos:start="155:5" pos:end="163:5">if <condition pos:start="155:8" pos:end="155:32">(<expr pos:start="155:9" pos:end="155:31"><call pos:start="155:9" pos:end="155:31"><name pos:start="155:9" pos:end="155:29">kvm_irqchip_in_kernel</name><argument_list pos:start="155:30" pos:end="155:31">()</argument_list></call></expr>)</condition> <block pos:start="155:34" pos:end="163:5">{<block_content pos:start="157:9" pos:end="161:47">

        <expr_stmt pos:start="157:9" pos:end="157:46"><expr pos:start="157:9" pos:end="157:45"><call pos:start="157:9" pos:end="157:45"><name pos:start="157:9" pos:end="157:32">kvm_pc_setup_irq_routing</name><argument_list pos:start="157:33" pos:end="157:45">(<argument pos:start="157:34" pos:end="157:44"><expr pos:start="157:34" pos:end="157:44"><name pos:start="157:34" pos:end="157:44">pci_enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="159:9" pos:end="161:47"><expr pos:start="159:9" pos:end="161:46"><name pos:start="159:9" pos:end="159:11">gsi</name> <operator pos:start="159:13" pos:end="159:13">=</operator> <call pos:start="159:15" pos:end="161:46"><name pos:start="159:15" pos:end="159:32">qemu_allocate_irqs</name><argument_list pos:start="159:33" pos:end="161:46">(<argument pos:start="159:34" pos:end="159:51"><expr pos:start="159:34" pos:end="159:51"><name pos:start="159:34" pos:end="159:51">kvm_pc_gsi_handler</name></expr></argument>, <argument pos:start="159:54" pos:end="159:62"><expr pos:start="159:54" pos:end="159:62"><name pos:start="159:54" pos:end="159:62">gsi_state</name></expr></argument>,

                                 <argument pos:start="161:34" pos:end="161:45"><expr pos:start="161:34" pos:end="161:45"><name pos:start="161:34" pos:end="161:45">GSI_NUM_PINS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="163:7" pos:end="167:5">else <block pos:start="163:12" pos:end="167:5">{<block_content pos:start="165:9" pos:end="165:71">

        <expr_stmt pos:start="165:9" pos:end="165:71"><expr pos:start="165:9" pos:end="165:70"><name pos:start="165:9" pos:end="165:11">gsi</name> <operator pos:start="165:13" pos:end="165:13">=</operator> <call pos:start="165:15" pos:end="165:70"><name pos:start="165:15" pos:end="165:32">qemu_allocate_irqs</name><argument_list pos:start="165:33" pos:end="165:70">(<argument pos:start="165:34" pos:end="165:44"><expr pos:start="165:34" pos:end="165:44"><name pos:start="165:34" pos:end="165:44">gsi_handler</name></expr></argument>, <argument pos:start="165:47" pos:end="165:55"><expr pos:start="165:47" pos:end="165:55"><name pos:start="165:47" pos:end="165:55">gsi_state</name></expr></argument>, <argument pos:start="165:58" pos:end="165:69"><expr pos:start="165:58" pos:end="165:69"><name pos:start="165:58" pos:end="165:69">GSI_NUM_PINS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="171:5" pos:end="195:5"><if pos:start="171:5" pos:end="185:5">if <condition pos:start="171:8" pos:end="171:20">(<expr pos:start="171:9" pos:end="171:19"><name pos:start="171:9" pos:end="171:19">pci_enabled</name></expr>)</condition> <block pos:start="171:22" pos:end="185:5">{<block_content pos:start="173:9" pos:end="183:54">

        <expr_stmt pos:start="173:9" pos:end="183:54"><expr pos:start="173:9" pos:end="183:53"><name pos:start="173:9" pos:end="173:15">pci_bus</name> <operator pos:start="173:17" pos:end="173:17">=</operator> <call pos:start="173:19" pos:end="183:53"><name pos:start="173:19" pos:end="173:29">i440fx_init</name><argument_list pos:start="173:30" pos:end="183:53">(<argument pos:start="173:31" pos:end="173:43"><expr pos:start="173:31" pos:end="173:43"><operator pos:start="173:31" pos:end="173:31">&amp;</operator><name pos:start="173:32" pos:end="173:43">i440fx_state</name></expr></argument>, <argument pos:start="173:46" pos:end="173:57"><expr pos:start="173:46" pos:end="173:57"><operator pos:start="173:46" pos:end="173:46">&amp;</operator><name pos:start="173:47" pos:end="173:57">piix3_devfn</name></expr></argument>, <argument pos:start="173:60" pos:end="173:67"><expr pos:start="173:60" pos:end="173:67"><operator pos:start="173:60" pos:end="173:60">&amp;</operator><name pos:start="173:61" pos:end="173:67">isa_bus</name></expr></argument>, <argument pos:start="173:70" pos:end="173:72"><expr pos:start="173:70" pos:end="173:72"><name pos:start="173:70" pos:end="173:72">gsi</name></expr></argument>,

                              <argument pos:start="175:31" pos:end="175:43"><expr pos:start="175:31" pos:end="175:43"><name pos:start="175:31" pos:end="175:43">system_memory</name></expr></argument>, <argument pos:start="175:46" pos:end="175:54"><expr pos:start="175:46" pos:end="175:54"><name pos:start="175:46" pos:end="175:54">system_io</name></expr></argument>, <argument pos:start="175:57" pos:end="175:70"><expr pos:start="175:57" pos:end="175:70"><name pos:start="175:57" pos:end="175:70"><name pos:start="175:57" pos:end="175:60">args</name><operator pos:start="175:61" pos:end="175:62">-&gt;</operator><name pos:start="175:63" pos:end="175:70">ram_size</name></name></expr></argument>,

                              <argument pos:start="177:31" pos:end="177:47"><expr pos:start="177:31" pos:end="177:47"><name pos:start="177:31" pos:end="177:47">below_4g_mem_size</name></expr></argument>,

                              <argument pos:start="179:31" pos:end="179:64"><expr pos:start="179:31" pos:end="179:64"><literal type="number" pos:start="179:31" pos:end="179:46">0x100000000ULL</literal> <operator pos:start="179:46" pos:end="179:46">-</operator> <name pos:start="179:48" pos:end="179:64">below_4g_mem_size</name></expr></argument>,

                              <argument pos:start="181:31" pos:end="181:47"><expr pos:start="181:31" pos:end="181:47"><name pos:start="181:31" pos:end="181:47">above_4g_mem_size</name></expr></argument>,

                              <argument pos:start="183:31" pos:end="183:40"><expr pos:start="183:31" pos:end="183:40"><name pos:start="183:31" pos:end="183:40">pci_memory</name></expr></argument>, <argument pos:start="183:43" pos:end="183:52"><expr pos:start="183:43" pos:end="183:52"><name pos:start="183:43" pos:end="183:52">ram_memory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="185:7" pos:end="195:5">else <block pos:start="185:12" pos:end="195:5">{<block_content pos:start="187:9" pos:end="193:20">

        <expr_stmt pos:start="187:9" pos:end="187:23"><expr pos:start="187:9" pos:end="187:22"><name pos:start="187:9" pos:end="187:15">pci_bus</name> <operator pos:start="187:17" pos:end="187:17">=</operator> <name pos:start="187:19" pos:end="187:22">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="189:9" pos:end="189:28"><expr pos:start="189:9" pos:end="189:27"><name pos:start="189:9" pos:end="189:20">i440fx_state</name> <operator pos:start="189:22" pos:end="189:22">=</operator> <name pos:start="189:24" pos:end="189:27">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="191:9" pos:end="191:47"><expr pos:start="191:9" pos:end="191:46"><name pos:start="191:9" pos:end="191:15">isa_bus</name> <operator pos:start="191:17" pos:end="191:17">=</operator> <call pos:start="191:19" pos:end="191:46"><name pos:start="191:19" pos:end="191:29">isa_bus_new</name><argument_list pos:start="191:30" pos:end="191:46">(<argument pos:start="191:31" pos:end="191:34"><expr pos:start="191:31" pos:end="191:34"><name pos:start="191:31" pos:end="191:34">NULL</name></expr></argument>, <argument pos:start="191:37" pos:end="191:45"><expr pos:start="191:37" pos:end="191:45"><name pos:start="191:37" pos:end="191:45">system_io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="193:9" pos:end="193:20"><expr pos:start="193:9" pos:end="193:19"><name pos:start="193:9" pos:end="193:15">no_hpet</name> <operator pos:start="193:17" pos:end="193:17">=</operator> <literal type="number" pos:start="193:19" pos:end="193:19">1</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="197:5" pos:end="197:31"><expr pos:start="197:5" pos:end="197:30"><call pos:start="197:5" pos:end="197:30"><name pos:start="197:5" pos:end="197:16">isa_bus_irqs</name><argument_list pos:start="197:17" pos:end="197:30">(<argument pos:start="197:18" pos:end="197:24"><expr pos:start="197:18" pos:end="197:24"><name pos:start="197:18" pos:end="197:24">isa_bus</name></expr></argument>, <argument pos:start="197:27" pos:end="197:29"><expr pos:start="197:27" pos:end="197:29"><name pos:start="197:27" pos:end="197:29">gsi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="201:5" pos:end="215:5"><if pos:start="201:5" pos:end="205:5">if <condition pos:start="201:8" pos:end="201:32">(<expr pos:start="201:9" pos:end="201:31"><call pos:start="201:9" pos:end="201:31"><name pos:start="201:9" pos:end="201:29">kvm_irqchip_in_kernel</name><argument_list pos:start="201:30" pos:end="201:31">()</argument_list></call></expr>)</condition> <block pos:start="201:34" pos:end="205:5">{<block_content pos:start="203:9" pos:end="203:40">

        <expr_stmt pos:start="203:9" pos:end="203:40"><expr pos:start="203:9" pos:end="203:39"><name pos:start="203:9" pos:end="203:13">i8259</name> <operator pos:start="203:15" pos:end="203:15">=</operator> <call pos:start="203:17" pos:end="203:39"><name pos:start="203:17" pos:end="203:30">kvm_i8259_init</name><argument_list pos:start="203:31" pos:end="203:39">(<argument pos:start="203:32" pos:end="203:38"><expr pos:start="203:32" pos:end="203:38"><name pos:start="203:32" pos:end="203:38">isa_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="205:7" pos:end="209:5">else if <condition pos:start="205:15" pos:end="205:29">(<expr pos:start="205:16" pos:end="205:28"><call pos:start="205:16" pos:end="205:28"><name pos:start="205:16" pos:end="205:26">xen_enabled</name><argument_list pos:start="205:27" pos:end="205:28">()</argument_list></call></expr>)</condition> <block pos:start="205:31" pos:end="209:5">{<block_content pos:start="207:9" pos:end="207:48">

        <expr_stmt pos:start="207:9" pos:end="207:48"><expr pos:start="207:9" pos:end="207:47"><name pos:start="207:9" pos:end="207:13">i8259</name> <operator pos:start="207:15" pos:end="207:15">=</operator> <call pos:start="207:17" pos:end="207:47"><name pos:start="207:17" pos:end="207:45">xen_interrupt_controller_init</name><argument_list pos:start="207:46" pos:end="207:47">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="209:7" pos:end="215:5">else <block pos:start="209:12" pos:end="215:5">{<block_content pos:start="211:9" pos:end="213:48">

        <expr_stmt pos:start="211:9" pos:end="211:40"><expr pos:start="211:9" pos:end="211:39"><name pos:start="211:9" pos:end="211:15">cpu_irq</name> <operator pos:start="211:17" pos:end="211:17">=</operator> <call pos:start="211:19" pos:end="211:39"><name pos:start="211:19" pos:end="211:37">pc_allocate_cpu_irq</name><argument_list pos:start="211:38" pos:end="211:39">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="213:9" pos:end="213:48"><expr pos:start="213:9" pos:end="213:47"><name pos:start="213:9" pos:end="213:13">i8259</name> <operator pos:start="213:15" pos:end="213:15">=</operator> <call pos:start="213:17" pos:end="213:47"><name pos:start="213:17" pos:end="213:26">i8259_init</name><argument_list pos:start="213:27" pos:end="213:47">(<argument pos:start="213:28" pos:end="213:34"><expr pos:start="213:28" pos:end="213:34"><name pos:start="213:28" pos:end="213:34">isa_bus</name></expr></argument>, <argument pos:start="213:37" pos:end="213:46"><expr pos:start="213:37" pos:end="213:46"><name pos:start="213:37" pos:end="213:46"><name pos:start="213:37" pos:end="213:43">cpu_irq</name><index pos:start="213:44" pos:end="213:46">[<expr pos:start="213:45" pos:end="213:45"><literal type="number" pos:start="213:45" pos:end="213:45">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <for pos:start="219:5" pos:end="223:5">for <control pos:start="219:9" pos:end="219:38">(<init pos:start="219:10" pos:end="219:15"><expr pos:start="219:10" pos:end="219:14"><name pos:start="219:10" pos:end="219:10">i</name> <operator pos:start="219:12" pos:end="219:12">=</operator> <literal type="number" pos:start="219:14" pos:end="219:14">0</literal></expr>;</init> <condition pos:start="219:17" pos:end="219:33"><expr pos:start="219:17" pos:end="219:32"><name pos:start="219:17" pos:end="219:17">i</name> <operator pos:start="219:19" pos:end="219:19">&lt;</operator> <name pos:start="219:21" pos:end="219:32">ISA_NUM_IRQS</name></expr>;</condition> <incr pos:start="219:35" pos:end="219:37"><expr pos:start="219:35" pos:end="219:37"><name pos:start="219:35" pos:end="219:35">i</name><operator pos:start="219:36" pos:end="219:37">++</operator></expr></incr>)</control> <block pos:start="219:40" pos:end="223:5">{<block_content pos:start="221:9" pos:end="221:43">

        <expr_stmt pos:start="221:9" pos:end="221:43"><expr pos:start="221:9" pos:end="221:42"><name pos:start="221:9" pos:end="221:31"><name pos:start="221:9" pos:end="221:17">gsi_state</name><operator pos:start="221:18" pos:end="221:19">-&gt;</operator><name pos:start="221:20" pos:end="221:28">i8259_irq</name><index pos:start="221:29" pos:end="221:31">[<expr pos:start="221:30" pos:end="221:30"><name pos:start="221:30" pos:end="221:30">i</name></expr>]</index></name> <operator pos:start="221:33" pos:end="221:33">=</operator> <name pos:start="221:35" pos:end="221:42"><name pos:start="221:35" pos:end="221:39">i8259</name><index pos:start="221:40" pos:end="221:42">[<expr pos:start="221:41" pos:end="221:41"><name pos:start="221:41" pos:end="221:41">i</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <if_stmt pos:start="225:5" pos:end="229:5"><if pos:start="225:5" pos:end="229:5">if <condition pos:start="225:8" pos:end="225:20">(<expr pos:start="225:9" pos:end="225:19"><name pos:start="225:9" pos:end="225:19">pci_enabled</name></expr>)</condition> <block pos:start="225:22" pos:end="229:5">{<block_content pos:start="227:9" pos:end="227:45">

        <expr_stmt pos:start="227:9" pos:end="227:45"><expr pos:start="227:9" pos:end="227:44"><call pos:start="227:9" pos:end="227:44"><name pos:start="227:9" pos:end="227:23">ioapic_init_gsi</name><argument_list pos:start="227:24" pos:end="227:44">(<argument pos:start="227:25" pos:end="227:33"><expr pos:start="227:25" pos:end="227:33"><name pos:start="227:25" pos:end="227:33">gsi_state</name></expr></argument>, <argument pos:start="227:36" pos:end="227:43"><expr pos:start="227:36" pos:end="227:43"><literal type="string" pos:start="227:36" pos:end="227:43">"i440fx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="231:5" pos:end="231:33"><expr pos:start="231:5" pos:end="231:32"><call pos:start="231:5" pos:end="231:32"><name pos:start="231:5" pos:end="231:20">qdev_init_nofail</name><argument_list pos:start="231:21" pos:end="231:32">(<argument pos:start="231:22" pos:end="231:31"><expr pos:start="231:22" pos:end="231:31"><name pos:start="231:22" pos:end="231:31">icc_bridge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="235:5" pos:end="235:34"><expr pos:start="235:5" pos:end="235:33"><call pos:start="235:5" pos:end="235:33"><name pos:start="235:5" pos:end="235:24">pc_register_ferr_irq</name><argument_list pos:start="235:25" pos:end="235:33">(<argument pos:start="235:26" pos:end="235:32"><expr pos:start="235:26" pos:end="235:32"><name pos:start="235:26" pos:end="235:32"><name pos:start="235:26" pos:end="235:28">gsi</name><index pos:start="235:29" pos:end="235:32">[<expr pos:start="235:30" pos:end="235:31"><literal type="number" pos:start="235:30" pos:end="235:31">13</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="239:5" pos:end="239:55"><expr pos:start="239:5" pos:end="239:54"><call pos:start="239:5" pos:end="239:54"><name pos:start="239:5" pos:end="239:15">pc_vga_init</name><argument_list pos:start="239:16" pos:end="239:54">(<argument pos:start="239:17" pos:end="239:23"><expr pos:start="239:17" pos:end="239:23"><name pos:start="239:17" pos:end="239:23">isa_bus</name></expr></argument>, <argument pos:start="239:26" pos:end="239:53"><expr pos:start="239:26" pos:end="239:53"><ternary pos:start="239:26" pos:end="239:53"><condition pos:start="239:26" pos:end="239:38"><expr pos:start="239:26" pos:end="239:36"><name pos:start="239:26" pos:end="239:36">pci_enabled</name></expr> ?</condition><then pos:start="239:40" pos:end="239:46"> <expr pos:start="239:40" pos:end="239:46"><name pos:start="239:40" pos:end="239:46">pci_bus</name></expr> </then><else pos:start="239:48" pos:end="239:53">: <expr pos:start="239:50" pos:end="239:53"><name pos:start="239:50" pos:end="239:53">NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="243:5" pos:end="243:32">/* init basic PC hardware */</comment>

    <expr_stmt pos:start="245:5" pos:end="245:75"><expr pos:start="245:5" pos:end="245:74"><call pos:start="245:5" pos:end="245:74"><name pos:start="245:5" pos:end="245:24">pc_basic_device_init</name><argument_list pos:start="245:25" pos:end="245:74">(<argument pos:start="245:26" pos:end="245:32"><expr pos:start="245:26" pos:end="245:32"><name pos:start="245:26" pos:end="245:32">isa_bus</name></expr></argument>, <argument pos:start="245:35" pos:end="245:37"><expr pos:start="245:35" pos:end="245:37"><name pos:start="245:35" pos:end="245:37">gsi</name></expr></argument>, <argument pos:start="245:40" pos:end="245:49"><expr pos:start="245:40" pos:end="245:49"><operator pos:start="245:40" pos:end="245:40">&amp;</operator><name pos:start="245:41" pos:end="245:49">rtc_state</name></expr></argument>, <argument pos:start="245:52" pos:end="245:58"><expr pos:start="245:52" pos:end="245:58"><operator pos:start="245:52" pos:end="245:52">&amp;</operator><name pos:start="245:53" pos:end="245:58">floppy</name></expr></argument>, <argument pos:start="245:61" pos:end="245:73"><expr pos:start="245:61" pos:end="245:73"><call pos:start="245:61" pos:end="245:73"><name pos:start="245:61" pos:end="245:71">xen_enabled</name><argument_list pos:start="245:72" pos:end="245:73">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="249:5" pos:end="249:34"><expr pos:start="249:5" pos:end="249:33"><call pos:start="249:5" pos:end="249:33"><name pos:start="249:5" pos:end="249:15">pc_nic_init</name><argument_list pos:start="249:16" pos:end="249:33">(<argument pos:start="249:17" pos:end="249:23"><expr pos:start="249:17" pos:end="249:23"><name pos:start="249:17" pos:end="249:23">isa_bus</name></expr></argument>, <argument pos:start="249:26" pos:end="249:32"><expr pos:start="249:26" pos:end="249:32"><name pos:start="249:26" pos:end="249:32">pci_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="253:5" pos:end="253:35"><expr pos:start="253:5" pos:end="253:34"><call pos:start="253:5" pos:end="253:34"><name pos:start="253:5" pos:end="253:17">ide_drive_get</name><argument_list pos:start="253:18" pos:end="253:34">(<argument pos:start="253:19" pos:end="253:20"><expr pos:start="253:19" pos:end="253:20"><name pos:start="253:19" pos:end="253:20">hd</name></expr></argument>, <argument pos:start="253:23" pos:end="253:33"><expr pos:start="253:23" pos:end="253:33"><name pos:start="253:23" pos:end="253:33">MAX_IDE_BUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="255:5" pos:end="289:5"><if pos:start="255:5" pos:end="273:5">if <condition pos:start="255:8" pos:end="255:20">(<expr pos:start="255:9" pos:end="255:19"><name pos:start="255:9" pos:end="255:19">pci_enabled</name></expr>)</condition> <block pos:start="255:22" pos:end="273:5">{<block_content pos:start="257:9" pos:end="271:60">

        <decl_stmt pos:start="257:9" pos:end="257:23"><decl pos:start="257:9" pos:end="257:22"><type pos:start="257:9" pos:end="257:19"><name pos:start="257:9" pos:end="257:17">PCIDevice</name> <modifier pos:start="257:19" pos:end="257:19">*</modifier></type><name pos:start="257:20" pos:end="257:22">dev</name></decl>;</decl_stmt>

        <if_stmt pos:start="259:9" pos:end="267:9"><if pos:start="259:9" pos:end="263:9">if <condition pos:start="259:12" pos:end="259:26">(<expr pos:start="259:13" pos:end="259:25"><call pos:start="259:13" pos:end="259:25"><name pos:start="259:13" pos:end="259:23">xen_enabled</name><argument_list pos:start="259:24" pos:end="259:25">()</argument_list></call></expr>)</condition> <block pos:start="259:28" pos:end="263:9">{<block_content pos:start="261:13" pos:end="261:71">

            <expr_stmt pos:start="261:13" pos:end="261:71"><expr pos:start="261:13" pos:end="261:70"><name pos:start="261:13" pos:end="261:15">dev</name> <operator pos:start="261:17" pos:end="261:17">=</operator> <call pos:start="261:19" pos:end="261:70"><name pos:start="261:19" pos:end="261:40">pci_piix3_xen_ide_init</name><argument_list pos:start="261:41" pos:end="261:70">(<argument pos:start="261:42" pos:end="261:48"><expr pos:start="261:42" pos:end="261:48"><name pos:start="261:42" pos:end="261:48">pci_bus</name></expr></argument>, <argument pos:start="261:51" pos:end="261:52"><expr pos:start="261:51" pos:end="261:52"><name pos:start="261:51" pos:end="261:52">hd</name></expr></argument>, <argument pos:start="261:55" pos:end="261:69"><expr pos:start="261:55" pos:end="261:69"><name pos:start="261:55" pos:end="261:65">piix3_devfn</name> <operator pos:start="261:67" pos:end="261:67">+</operator> <literal type="number" pos:start="261:69" pos:end="261:69">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="263:11" pos:end="267:9">else <block pos:start="263:16" pos:end="267:9">{<block_content pos:start="265:13" pos:end="265:67">

            <expr_stmt pos:start="265:13" pos:end="265:67"><expr pos:start="265:13" pos:end="265:66"><name pos:start="265:13" pos:end="265:15">dev</name> <operator pos:start="265:17" pos:end="265:17">=</operator> <call pos:start="265:19" pos:end="265:66"><name pos:start="265:19" pos:end="265:36">pci_piix3_ide_init</name><argument_list pos:start="265:37" pos:end="265:66">(<argument pos:start="265:38" pos:end="265:44"><expr pos:start="265:38" pos:end="265:44"><name pos:start="265:38" pos:end="265:44">pci_bus</name></expr></argument>, <argument pos:start="265:47" pos:end="265:48"><expr pos:start="265:47" pos:end="265:48"><name pos:start="265:47" pos:end="265:48">hd</name></expr></argument>, <argument pos:start="265:51" pos:end="265:65"><expr pos:start="265:51" pos:end="265:65"><name pos:start="265:51" pos:end="265:61">piix3_devfn</name> <operator pos:start="265:63" pos:end="265:63">+</operator> <literal type="number" pos:start="265:65" pos:end="265:65">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="269:9" pos:end="269:60"><expr pos:start="269:9" pos:end="269:59"><name pos:start="269:9" pos:end="269:17"><name pos:start="269:9" pos:end="269:14">idebus</name><index pos:start="269:15" pos:end="269:17">[<expr pos:start="269:16" pos:end="269:16"><literal type="number" pos:start="269:16" pos:end="269:16">0</literal></expr>]</index></name> <operator pos:start="269:19" pos:end="269:19">=</operator> <call pos:start="269:21" pos:end="269:59"><name pos:start="269:21" pos:end="269:38">qdev_get_child_bus</name><argument_list pos:start="269:39" pos:end="269:59">(<argument pos:start="269:40" pos:end="269:49"><expr pos:start="269:40" pos:end="269:49"><operator pos:start="269:40" pos:end="269:40">&amp;</operator><name pos:start="269:41" pos:end="269:49"><name pos:start="269:41" pos:end="269:43">dev</name><operator pos:start="269:44" pos:end="269:45">-&gt;</operator><name pos:start="269:46" pos:end="269:49">qdev</name></name></expr></argument>, <argument pos:start="269:52" pos:end="269:58"><expr pos:start="269:52" pos:end="269:58"><literal type="string" pos:start="269:52" pos:end="269:58">"ide.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="271:9" pos:end="271:60"><expr pos:start="271:9" pos:end="271:59"><name pos:start="271:9" pos:end="271:17"><name pos:start="271:9" pos:end="271:14">idebus</name><index pos:start="271:15" pos:end="271:17">[<expr pos:start="271:16" pos:end="271:16"><literal type="number" pos:start="271:16" pos:end="271:16">1</literal></expr>]</index></name> <operator pos:start="271:19" pos:end="271:19">=</operator> <call pos:start="271:21" pos:end="271:59"><name pos:start="271:21" pos:end="271:38">qdev_get_child_bus</name><argument_list pos:start="271:39" pos:end="271:59">(<argument pos:start="271:40" pos:end="271:49"><expr pos:start="271:40" pos:end="271:49"><operator pos:start="271:40" pos:end="271:40">&amp;</operator><name pos:start="271:41" pos:end="271:49"><name pos:start="271:41" pos:end="271:43">dev</name><operator pos:start="271:44" pos:end="271:45">-&gt;</operator><name pos:start="271:46" pos:end="271:49">qdev</name></name></expr></argument>, <argument pos:start="271:52" pos:end="271:58"><expr pos:start="271:52" pos:end="271:58"><literal type="string" pos:start="271:52" pos:end="271:58">"ide.1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="273:7" pos:end="289:5">else <block pos:start="273:12" pos:end="289:5">{<block_content pos:start="275:9" pos:end="287:9">

        <for pos:start="275:9" pos:end="287:9">for<control pos:start="275:12" pos:end="275:40">(<init pos:start="275:13" pos:end="275:18"><expr pos:start="275:13" pos:end="275:17"><name pos:start="275:13" pos:end="275:13">i</name> <operator pos:start="275:15" pos:end="275:15">=</operator> <literal type="number" pos:start="275:17" pos:end="275:17">0</literal></expr>;</init> <condition pos:start="275:20" pos:end="275:35"><expr pos:start="275:20" pos:end="275:34"><name pos:start="275:20" pos:end="275:20">i</name> <operator pos:start="275:22" pos:end="275:22">&lt;</operator> <name pos:start="275:24" pos:end="275:34">MAX_IDE_BUS</name></expr>;</condition> <incr pos:start="275:37" pos:end="275:39"><expr pos:start="275:37" pos:end="275:39"><name pos:start="275:37" pos:end="275:37">i</name><operator pos:start="275:38" pos:end="275:39">++</operator></expr></incr>)</control> <block pos:start="275:42" pos:end="287:9">{<block_content pos:start="277:13" pos:end="285:65">

            <decl_stmt pos:start="277:13" pos:end="277:27"><decl pos:start="277:13" pos:end="277:26"><type pos:start="277:13" pos:end="277:23"><name pos:start="277:13" pos:end="277:21">ISADevice</name> <modifier pos:start="277:23" pos:end="277:23">*</modifier></type><name pos:start="277:24" pos:end="277:26">dev</name></decl>;</decl_stmt>

            <expr_stmt pos:start="279:13" pos:end="283:79"><expr pos:start="279:13" pos:end="283:78"><name pos:start="279:13" pos:end="279:15">dev</name> <operator pos:start="279:17" pos:end="279:17">=</operator> <call pos:start="279:19" pos:end="283:78"><name pos:start="279:19" pos:end="279:30">isa_ide_init</name><argument_list pos:start="279:31" pos:end="283:78">(<argument pos:start="279:32" pos:end="279:38"><expr pos:start="279:32" pos:end="279:38"><name pos:start="279:32" pos:end="279:38">isa_bus</name></expr></argument>, <argument pos:start="279:41" pos:end="279:53"><expr pos:start="279:41" pos:end="279:53"><name pos:start="279:41" pos:end="279:53"><name pos:start="279:41" pos:end="279:50">ide_iobase</name><index pos:start="279:51" pos:end="279:53">[<expr pos:start="279:52" pos:end="279:52"><name pos:start="279:52" pos:end="279:52">i</name></expr>]</index></name></expr></argument>, <argument pos:start="279:56" pos:end="279:69"><expr pos:start="279:56" pos:end="279:69"><name pos:start="279:56" pos:end="279:69"><name pos:start="279:56" pos:end="279:66">ide_iobase2</name><index pos:start="279:67" pos:end="279:69">[<expr pos:start="279:68" pos:end="279:68"><name pos:start="279:68" pos:end="279:68">i</name></expr>]</index></name></expr></argument>,

                               <argument pos:start="281:32" pos:end="281:41"><expr pos:start="281:32" pos:end="281:41"><name pos:start="281:32" pos:end="281:41"><name pos:start="281:32" pos:end="281:38">ide_irq</name><index pos:start="281:39" pos:end="281:41">[<expr pos:start="281:40" pos:end="281:40"><name pos:start="281:40" pos:end="281:40">i</name></expr>]</index></name></expr></argument>,

                               <argument pos:start="283:32" pos:end="283:51"><expr pos:start="283:32" pos:end="283:51"><name pos:start="283:32" pos:end="283:51"><name pos:start="283:32" pos:end="283:33">hd</name><index pos:start="283:34" pos:end="283:51">[<expr pos:start="283:35" pos:end="283:50"><name pos:start="283:35" pos:end="283:46">MAX_IDE_DEVS</name> <operator pos:start="283:48" pos:end="283:48">*</operator> <name pos:start="283:50" pos:end="283:50">i</name></expr>]</index></name></expr></argument>, <argument pos:start="283:54" pos:end="283:77"><expr pos:start="283:54" pos:end="283:77"><name pos:start="283:54" pos:end="283:77"><name pos:start="283:54" pos:end="283:55">hd</name><index pos:start="283:56" pos:end="283:77">[<expr pos:start="283:57" pos:end="283:76"><name pos:start="283:57" pos:end="283:68">MAX_IDE_DEVS</name> <operator pos:start="283:70" pos:end="283:70">*</operator> <name pos:start="283:72" pos:end="283:72">i</name> <operator pos:start="283:74" pos:end="283:74">+</operator> <literal type="number" pos:start="283:76" pos:end="283:76">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="285:13" pos:end="285:65"><expr pos:start="285:13" pos:end="285:64"><name pos:start="285:13" pos:end="285:21"><name pos:start="285:13" pos:end="285:18">idebus</name><index pos:start="285:19" pos:end="285:21">[<expr pos:start="285:20" pos:end="285:20"><name pos:start="285:20" pos:end="285:20">i</name></expr>]</index></name> <operator pos:start="285:23" pos:end="285:23">=</operator> <call pos:start="285:25" pos:end="285:64"><name pos:start="285:25" pos:end="285:42">qdev_get_child_bus</name><argument_list pos:start="285:43" pos:end="285:64">(<argument pos:start="285:44" pos:end="285:54"><expr pos:start="285:44" pos:end="285:54"><call pos:start="285:44" pos:end="285:54"><name pos:start="285:44" pos:end="285:49">DEVICE</name><argument_list pos:start="285:50" pos:end="285:54">(<argument pos:start="285:51" pos:end="285:53"><expr pos:start="285:51" pos:end="285:53"><name pos:start="285:51" pos:end="285:53">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="285:57" pos:end="285:63"><expr pos:start="285:57" pos:end="285:63"><literal type="string" pos:start="285:57" pos:end="285:63">"ide.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="293:5" pos:end="295:58"><expr pos:start="293:5" pos:end="295:57"><call pos:start="293:5" pos:end="295:57"><name pos:start="293:5" pos:end="293:16">pc_cmos_init</name><argument_list pos:start="293:17" pos:end="295:57">(<argument pos:start="293:18" pos:end="293:34"><expr pos:start="293:18" pos:end="293:34"><name pos:start="293:18" pos:end="293:34">below_4g_mem_size</name></expr></argument>, <argument pos:start="293:37" pos:end="293:53"><expr pos:start="293:37" pos:end="293:53"><name pos:start="293:37" pos:end="293:53">above_4g_mem_size</name></expr></argument>, <argument pos:start="293:56" pos:end="293:71"><expr pos:start="293:56" pos:end="293:71"><name pos:start="293:56" pos:end="293:71"><name pos:start="293:56" pos:end="293:59">args</name><operator pos:start="293:60" pos:end="293:61">-&gt;</operator><name pos:start="293:62" pos:end="293:71">boot_order</name></name></expr></argument>,

                 <argument pos:start="295:18" pos:end="295:23"><expr pos:start="295:18" pos:end="295:23"><name pos:start="295:18" pos:end="295:23">floppy</name></expr></argument>, <argument pos:start="295:26" pos:end="295:34"><expr pos:start="295:26" pos:end="295:34"><name pos:start="295:26" pos:end="295:34"><name pos:start="295:26" pos:end="295:31">idebus</name><index pos:start="295:32" pos:end="295:34">[<expr pos:start="295:33" pos:end="295:33"><literal type="number" pos:start="295:33" pos:end="295:33">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="295:37" pos:end="295:45"><expr pos:start="295:37" pos:end="295:45"><name pos:start="295:37" pos:end="295:45"><name pos:start="295:37" pos:end="295:42">idebus</name><index pos:start="295:43" pos:end="295:45">[<expr pos:start="295:44" pos:end="295:44"><literal type="number" pos:start="295:44" pos:end="295:44">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="295:48" pos:end="295:56"><expr pos:start="295:48" pos:end="295:56"><name pos:start="295:48" pos:end="295:56">rtc_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="299:5" pos:end="303:5"><if pos:start="299:5" pos:end="303:5">if <condition pos:start="299:8" pos:end="299:42">(<expr pos:start="299:9" pos:end="299:41"><name pos:start="299:9" pos:end="299:19">pci_enabled</name> <operator pos:start="299:21" pos:end="299:22">&amp;&amp;</operator> <call pos:start="299:24" pos:end="299:41"><name pos:start="299:24" pos:end="299:34">usb_enabled</name><argument_list pos:start="299:35" pos:end="299:41">(<argument pos:start="299:36" pos:end="299:40"><expr pos:start="299:36" pos:end="299:40"><name pos:start="299:36" pos:end="299:40">false</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="299:44" pos:end="303:5">{<block_content pos:start="301:9" pos:end="301:70">

        <expr_stmt pos:start="301:9" pos:end="301:70"><expr pos:start="301:9" pos:end="301:69"><call pos:start="301:9" pos:end="301:69"><name pos:start="301:9" pos:end="301:25">pci_create_simple</name><argument_list pos:start="301:26" pos:end="301:69">(<argument pos:start="301:27" pos:end="301:33"><expr pos:start="301:27" pos:end="301:33"><name pos:start="301:27" pos:end="301:33">pci_bus</name></expr></argument>, <argument pos:start="301:36" pos:end="301:50"><expr pos:start="301:36" pos:end="301:50"><name pos:start="301:36" pos:end="301:46">piix3_devfn</name> <operator pos:start="301:48" pos:end="301:48">+</operator> <literal type="number" pos:start="301:50" pos:end="301:50">2</literal></expr></argument>, <argument pos:start="301:53" pos:end="301:68"><expr pos:start="301:53" pos:end="301:68"><literal type="string" pos:start="301:53" pos:end="301:68">"piix3-usb-uhci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="307:5" pos:end="325:5"><if pos:start="307:5" pos:end="325:5">if <condition pos:start="307:8" pos:end="307:36">(<expr pos:start="307:9" pos:end="307:35"><name pos:start="307:9" pos:end="307:19">pci_enabled</name> <operator pos:start="307:21" pos:end="307:22">&amp;&amp;</operator> <name pos:start="307:24" pos:end="307:35">acpi_enabled</name></expr>)</condition> <block pos:start="307:38" pos:end="325:5">{<block_content pos:start="309:9" pos:end="323:45">

        <decl_stmt pos:start="309:9" pos:end="309:23"><decl pos:start="309:9" pos:end="309:22"><type pos:start="309:9" pos:end="309:17"><name pos:start="309:9" pos:end="309:15">i2c_bus</name> <modifier pos:start="309:17" pos:end="309:17">*</modifier></type><name pos:start="309:18" pos:end="309:22">smbus</name></decl>;</decl_stmt>



        <expr_stmt pos:start="313:9" pos:end="313:74"><expr pos:start="313:9" pos:end="313:73"><name pos:start="313:9" pos:end="313:15">smi_irq</name> <operator pos:start="313:17" pos:end="313:17">=</operator> <call pos:start="313:19" pos:end="313:73"><name pos:start="313:19" pos:end="313:36">qemu_allocate_irqs</name><argument_list pos:start="313:37" pos:end="313:73">(<argument pos:start="313:38" pos:end="313:58"><expr pos:start="313:38" pos:end="313:58"><name pos:start="313:38" pos:end="313:58">pc_acpi_smi_interrupt</name></expr></argument>, <argument pos:start="313:61" pos:end="313:69"><expr pos:start="313:61" pos:end="313:69"><name pos:start="313:61" pos:end="313:69">first_cpu</name></expr></argument>, <argument pos:start="313:72" pos:end="313:72"><expr pos:start="313:72" pos:end="313:72"><literal type="number" pos:start="313:72" pos:end="313:72">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="315:9" pos:end="315:46">/* TODO: Populate SPD eeprom data.  */</comment>

        <expr_stmt pos:start="317:9" pos:end="321:53"><expr pos:start="317:9" pos:end="321:52"><name pos:start="317:9" pos:end="317:13">smbus</name> <operator pos:start="317:15" pos:end="317:15">=</operator> <call pos:start="317:17" pos:end="321:52"><name pos:start="317:17" pos:end="317:29">piix4_pm_init</name><argument_list pos:start="317:30" pos:end="321:52">(<argument pos:start="317:31" pos:end="317:37"><expr pos:start="317:31" pos:end="317:37"><name pos:start="317:31" pos:end="317:37">pci_bus</name></expr></argument>, <argument pos:start="317:40" pos:end="317:54"><expr pos:start="317:40" pos:end="317:54"><name pos:start="317:40" pos:end="317:50">piix3_devfn</name> <operator pos:start="317:52" pos:end="317:52">+</operator> <literal type="number" pos:start="317:54" pos:end="317:54">3</literal></expr></argument>, <argument pos:start="317:57" pos:end="317:62"><expr pos:start="317:57" pos:end="317:62"><literal type="number" pos:start="317:57" pos:end="317:62">0xb100</literal></expr></argument>,

                              <argument pos:start="319:31" pos:end="319:36"><expr pos:start="319:31" pos:end="319:36"><name pos:start="319:31" pos:end="319:36"><name pos:start="319:31" pos:end="319:33">gsi</name><index pos:start="319:34" pos:end="319:36">[<expr pos:start="319:35" pos:end="319:35"><literal type="number" pos:start="319:35" pos:end="319:35">9</literal></expr>]</index></name></expr></argument>, <argument pos:start="319:39" pos:end="319:46"><expr pos:start="319:39" pos:end="319:46"><operator pos:start="319:39" pos:end="319:39">*</operator><name pos:start="319:40" pos:end="319:46">smi_irq</name></expr></argument>,

                              <argument pos:start="321:31" pos:end="321:43"><expr pos:start="321:31" pos:end="321:43"><call pos:start="321:31" pos:end="321:43"><name pos:start="321:31" pos:end="321:41">kvm_enabled</name><argument_list pos:start="321:42" pos:end="321:43">()</argument_list></call></expr></argument>, <argument pos:start="321:46" pos:end="321:51"><expr pos:start="321:46" pos:end="321:51"><name pos:start="321:46" pos:end="321:51">fw_cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="323:9" pos:end="323:45"><expr pos:start="323:9" pos:end="323:44"><call pos:start="323:9" pos:end="323:44"><name pos:start="323:9" pos:end="323:25">smbus_eeprom_init</name><argument_list pos:start="323:26" pos:end="323:44">(<argument pos:start="323:27" pos:end="323:31"><expr pos:start="323:27" pos:end="323:31"><name pos:start="323:27" pos:end="323:31">smbus</name></expr></argument>, <argument pos:start="323:34" pos:end="323:34"><expr pos:start="323:34" pos:end="323:34"><literal type="number" pos:start="323:34" pos:end="323:34">8</literal></expr></argument>, <argument pos:start="323:37" pos:end="323:40"><expr pos:start="323:37" pos:end="323:40"><name pos:start="323:37" pos:end="323:40">NULL</name></expr></argument>, <argument pos:start="323:43" pos:end="323:43"><expr pos:start="323:43" pos:end="323:43"><literal type="number" pos:start="323:43" pos:end="323:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="329:5" pos:end="333:5"><if pos:start="329:5" pos:end="333:5">if <condition pos:start="329:8" pos:end="329:20">(<expr pos:start="329:9" pos:end="329:19"><name pos:start="329:9" pos:end="329:19">pci_enabled</name></expr>)</condition> <block pos:start="329:22" pos:end="333:5">{<block_content pos:start="331:9" pos:end="331:36">

        <expr_stmt pos:start="331:9" pos:end="331:36"><expr pos:start="331:9" pos:end="331:35"><call pos:start="331:9" pos:end="331:35"><name pos:start="331:9" pos:end="331:26">pc_pci_device_init</name><argument_list pos:start="331:27" pos:end="331:35">(<argument pos:start="331:28" pos:end="331:34"><expr pos:start="331:28" pos:end="331:34"><name pos:start="331:28" pos:end="331:34">pci_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="337:5" pos:end="341:5"><if pos:start="337:5" pos:end="341:5">if <condition pos:start="337:8" pos:end="337:20">(<expr pos:start="337:9" pos:end="337:19"><name pos:start="337:9" pos:end="337:19">has_pvpanic</name></expr>)</condition> <block pos:start="337:22" pos:end="341:5">{<block_content pos:start="339:9" pos:end="339:30">

        <expr_stmt pos:start="339:9" pos:end="339:30"><expr pos:start="339:9" pos:end="339:29"><call pos:start="339:9" pos:end="339:29"><name pos:start="339:9" pos:end="339:20">pvpanic_init</name><argument_list pos:start="339:21" pos:end="339:29">(<argument pos:start="339:22" pos:end="339:28"><expr pos:start="339:22" pos:end="339:28"><name pos:start="339:22" pos:end="339:28">isa_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
