<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/10402.c" pos:tabs="8"><function pos:start="1:1" pos:end="107:56"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:30">xhci_runtime_write</name><parameter_list pos:start="1:31" pos:end="3:59">(<parameter pos:start="1:32" pos:end="1:40"><decl pos:start="1:32" pos:end="1:40"><type pos:start="1:32" pos:end="1:40"><name pos:start="1:32" pos:end="1:35">void</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:40">ptr</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:52"><decl pos:start="1:43" pos:end="1:52"><type pos:start="1:43" pos:end="1:52"><name pos:start="1:43" pos:end="1:48">hwaddr</name></type> <name pos:start="1:50" pos:end="1:52">reg</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:43"><decl pos:start="3:32" pos:end="3:43"><type pos:start="3:32" pos:end="3:43"><name pos:start="3:32" pos:end="3:39">uint64_t</name></type> <name pos:start="3:41" pos:end="3:43">val</name></decl></parameter>, <parameter pos:start="3:46" pos:end="3:58"><decl pos:start="3:46" pos:end="3:58"><type pos:start="3:46" pos:end="3:58"><name pos:start="3:46" pos:end="3:53">unsigned</name></type> <name pos:start="3:55" pos:end="3:58">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="107:56">{<block_content pos:start="7:5" pos:end="107:56">

    <decl_stmt pos:start="7:5" pos:end="7:26"><decl pos:start="7:5" pos:end="7:25"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">XHCIState</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:19">xhci</name> <init pos:start="7:21" pos:end="7:25">= <expr pos:start="7:23" pos:end="7:25"><name pos:start="7:23" pos:end="7:25">ptr</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:32"><decl pos:start="9:5" pos:end="9:31"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">v</name> <init pos:start="9:11" pos:end="9:31">= <expr pos:start="9:13" pos:end="9:31"><operator pos:start="9:13" pos:end="9:13">(</operator><name pos:start="9:14" pos:end="9:16">reg</name> <operator pos:start="9:18" pos:end="9:18">-</operator> <literal type="number" pos:start="9:20" pos:end="9:23">0x20</literal><operator pos:start="9:24" pos:end="9:24">)</operator> <operator pos:start="9:26" pos:end="9:26">/</operator> <literal type="number" pos:start="9:28" pos:end="9:31">0x20</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:43"><decl pos:start="11:5" pos:end="11:42"><type pos:start="11:5" pos:end="11:21"><name pos:start="11:5" pos:end="11:19">XHCIInterrupter</name> <modifier pos:start="11:21" pos:end="11:21">*</modifier></type><name pos:start="11:22" pos:end="11:25">intr</name> <init pos:start="11:27" pos:end="11:42">= <expr pos:start="11:29" pos:end="11:42"><operator pos:start="11:29" pos:end="11:29">&amp;</operator><name pos:start="11:30" pos:end="11:42"><name pos:start="11:30" pos:end="11:33">xhci</name><operator pos:start="11:34" pos:end="11:35">-&gt;</operator><name pos:start="11:36" pos:end="11:39">intr</name><index pos:start="11:40" pos:end="11:42">[<expr pos:start="11:41" pos:end="11:41"><name pos:start="11:41" pos:end="11:41">v</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:43"><expr pos:start="13:5" pos:end="13:42"><call pos:start="13:5" pos:end="13:42"><name pos:start="13:5" pos:end="13:32">trace_usb_xhci_runtime_write</name><argument_list pos:start="13:33" pos:end="13:42">(<argument pos:start="13:34" pos:end="13:36"><expr pos:start="13:34" pos:end="13:36"><name pos:start="13:34" pos:end="13:36">reg</name></expr></argument>, <argument pos:start="13:39" pos:end="13:41"><expr pos:start="13:39" pos:end="13:41"><name pos:start="13:39" pos:end="13:41">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="17:5" pos:end="107:56"><if pos:start="17:5" pos:end="107:56">if <condition pos:start="17:8" pos:end="17:19">(<expr pos:start="17:9" pos:end="17:18"><name pos:start="17:9" pos:end="17:11">reg</name> <operator pos:start="17:13" pos:end="17:13">&lt;</operator> <literal type="number" pos:start="17:15" pos:end="17:18">0x20</literal></expr>)</condition> <block pos:start="17:21" pos:end="107:56">{<block_content pos:start="19:9" pos:end="107:56">

        <expr_stmt pos:start="19:9" pos:end="19:59"><expr pos:start="19:9" pos:end="19:58"><call pos:start="19:9" pos:end="19:58"><name pos:start="19:9" pos:end="19:36">trace_usb_xhci_unimplemented</name><argument_list pos:start="19:37" pos:end="19:58">(<argument pos:start="19:38" pos:end="19:52"><expr pos:start="19:38" pos:end="19:52"><literal type="string" pos:start="19:38" pos:end="19:52">"runtime write"</literal></expr></argument>, <argument pos:start="19:55" pos:end="19:57"><expr pos:start="19:55" pos:end="19:57"><name pos:start="19:55" pos:end="19:57">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:15">return;</return>




    <switch pos:start="26:5" pos:end="107:56">switch <condition pos:start="26:12" pos:end="26:23">(<expr pos:start="26:13" pos:end="26:22"><name pos:start="26:13" pos:end="26:15">reg</name> <operator pos:start="26:17" pos:end="26:17">&amp;</operator> <literal type="number" pos:start="26:19" pos:end="26:22">0x1f</literal></expr>)</condition> <block pos:start="26:25" pos:end="107:56">{<block_content pos:start="28:5" pos:end="107:56">

    <case pos:start="28:5" pos:end="28:14">case <expr pos:start="28:10" pos:end="28:13"><literal type="number" pos:start="28:10" pos:end="28:13">0x00</literal></expr>:</case> <comment type="block" pos:start="28:16" pos:end="28:25">/* IMAN */</comment>

        <if_stmt pos:start="30:9" pos:end="107:56"><if pos:start="30:9" pos:end="107:56">if <condition pos:start="30:12" pos:end="30:26">(<expr pos:start="30:13" pos:end="30:25"><name pos:start="30:13" pos:end="30:15">val</name> <operator pos:start="30:17" pos:end="30:17">&amp;</operator> <name pos:start="30:19" pos:end="30:25">IMAN_IP</name></expr>)</condition> <block pos:start="30:28" pos:end="107:56">{<block_content pos:start="32:13" pos:end="107:56">

            <expr_stmt pos:start="32:13" pos:end="32:35"><expr pos:start="32:13" pos:end="32:34"><name pos:start="32:13" pos:end="32:22"><name pos:start="32:13" pos:end="32:16">intr</name><operator pos:start="32:17" pos:end="32:18">-&gt;</operator><name pos:start="32:19" pos:end="32:22">iman</name></name> <operator pos:start="32:24" pos:end="32:25">&amp;=</operator> <operator pos:start="32:27" pos:end="32:27">~</operator><name pos:start="32:28" pos:end="32:34">IMAN_IP</name></expr>;</expr_stmt>


        <expr_stmt pos:start="35:9" pos:end="35:31"><expr pos:start="35:9" pos:end="35:30"><name pos:start="35:9" pos:end="35:18"><name pos:start="35:9" pos:end="35:12">intr</name><operator pos:start="35:13" pos:end="35:14">-&gt;</operator><name pos:start="35:15" pos:end="35:18">iman</name></name> <operator pos:start="35:20" pos:end="35:21">&amp;=</operator> <operator pos:start="35:23" pos:end="35:23">~</operator><name pos:start="35:24" pos:end="35:30">IMAN_IE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:36"><expr pos:start="37:9" pos:end="37:35"><name pos:start="37:9" pos:end="37:18"><name pos:start="37:9" pos:end="37:12">intr</name><operator pos:start="37:13" pos:end="37:14">-&gt;</operator><name pos:start="37:15" pos:end="37:18">iman</name></name> <operator pos:start="37:20" pos:end="37:21">|=</operator> <name pos:start="37:23" pos:end="37:25">val</name> <operator pos:start="37:27" pos:end="37:27">&amp;</operator> <name pos:start="37:29" pos:end="37:35">IMAN_IE</name></expr>;</expr_stmt>

        <if_stmt pos:start="39:9" pos:end="107:56"><if pos:start="39:9" pos:end="107:56">if <condition pos:start="39:12" pos:end="39:19">(<expr pos:start="39:13" pos:end="39:18"><name pos:start="39:13" pos:end="39:13">v</name> <operator pos:start="39:15" pos:end="39:16">==</operator> <literal type="number" pos:start="39:18" pos:end="39:18">0</literal></expr>)</condition> <block pos:start="39:21" pos:end="107:56">{<block_content pos:start="41:13" pos:end="107:56">

            <expr_stmt pos:start="41:13" pos:end="41:35"><expr pos:start="41:13" pos:end="41:34"><call pos:start="41:13" pos:end="41:34"><name pos:start="41:13" pos:end="41:28">xhci_intx_update</name><argument_list pos:start="41:29" pos:end="41:34">(<argument pos:start="41:30" pos:end="41:33"><expr pos:start="41:30" pos:end="41:33"><name pos:start="41:30" pos:end="41:33">xhci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        <expr_stmt pos:start="44:9" pos:end="44:34"><expr pos:start="44:9" pos:end="44:33"><call pos:start="44:9" pos:end="44:33"><name pos:start="44:9" pos:end="44:24">xhci_msix_update</name><argument_list pos:start="44:25" pos:end="44:33">(<argument pos:start="44:26" pos:end="44:29"><expr pos:start="44:26" pos:end="44:29"><name pos:start="44:26" pos:end="44:29">xhci</name></expr></argument>, <argument pos:start="44:32" pos:end="44:32"><expr pos:start="44:32" pos:end="44:32"><name pos:start="44:32" pos:end="44:32">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="46:9" pos:end="46:14">break;</break>

    <case pos:start="48:5" pos:end="48:14">case <expr pos:start="48:10" pos:end="48:13"><literal type="number" pos:start="48:10" pos:end="48:13">0x04</literal></expr>:</case> <comment type="block" pos:start="48:16" pos:end="48:25">/* IMOD */</comment>

        <expr_stmt pos:start="50:9" pos:end="50:25"><expr pos:start="50:9" pos:end="50:24"><name pos:start="50:9" pos:end="50:18"><name pos:start="50:9" pos:end="50:12">intr</name><operator pos:start="50:13" pos:end="50:14">-&gt;</operator><name pos:start="50:15" pos:end="50:18">imod</name></name> <operator pos:start="50:20" pos:end="50:20">=</operator> <name pos:start="50:22" pos:end="50:24">val</name></expr>;</expr_stmt>

        <break pos:start="52:9" pos:end="52:14">break;</break>

    <case pos:start="54:5" pos:end="54:14">case <expr pos:start="54:10" pos:end="54:13"><literal type="number" pos:start="54:10" pos:end="54:13">0x08</literal></expr>:</case> <comment type="block" pos:start="54:16" pos:end="54:27">/* ERSTSZ */</comment>

        <expr_stmt pos:start="56:9" pos:end="56:36"><expr pos:start="56:9" pos:end="56:35"><name pos:start="56:9" pos:end="56:20"><name pos:start="56:9" pos:end="56:12">intr</name><operator pos:start="56:13" pos:end="56:14">-&gt;</operator><name pos:start="56:15" pos:end="56:20">erstsz</name></name> <operator pos:start="56:22" pos:end="56:22">=</operator> <name pos:start="56:24" pos:end="56:26">val</name> <operator pos:start="56:28" pos:end="56:28">&amp;</operator> <literal type="number" pos:start="56:30" pos:end="56:35">0xffff</literal></expr>;</expr_stmt>

        <break pos:start="58:9" pos:end="58:14">break;</break>

    <case pos:start="60:5" pos:end="60:14">case <expr pos:start="60:10" pos:end="60:13"><literal type="number" pos:start="60:10" pos:end="60:13">0x10</literal></expr>:</case> <comment type="block" pos:start="60:16" pos:end="60:31">/* ERSTBA low */</comment>

        <comment type="block" pos:start="62:9" pos:end="64:47">/* XXX NEC driver bug: it doesn't align this to 64 bytes

        intr-&gt;erstba_low = val &amp; 0xffffffc0; */</comment>

        <expr_stmt pos:start="66:9" pos:end="66:44"><expr pos:start="66:9" pos:end="66:43"><name pos:start="66:9" pos:end="66:24"><name pos:start="66:9" pos:end="66:12">intr</name><operator pos:start="66:13" pos:end="66:14">-&gt;</operator><name pos:start="66:15" pos:end="66:24">erstba_low</name></name> <operator pos:start="66:26" pos:end="66:26">=</operator> <name pos:start="66:28" pos:end="66:30">val</name> <operator pos:start="66:32" pos:end="66:32">&amp;</operator> <literal type="number" pos:start="66:34" pos:end="66:43">0xfffffff0</literal></expr>;</expr_stmt>

        <break pos:start="68:9" pos:end="68:14">break;</break>

    <case pos:start="70:5" pos:end="70:14">case <expr pos:start="70:10" pos:end="70:13"><literal type="number" pos:start="70:10" pos:end="70:13">0x14</literal></expr>:</case> <comment type="block" pos:start="70:16" pos:end="70:32">/* ERSTBA high */</comment>

        <expr_stmt pos:start="72:9" pos:end="72:32"><expr pos:start="72:9" pos:end="72:31"><name pos:start="72:9" pos:end="72:25"><name pos:start="72:9" pos:end="72:12">intr</name><operator pos:start="72:13" pos:end="72:14">-&gt;</operator><name pos:start="72:15" pos:end="72:25">erstba_high</name></name> <operator pos:start="72:27" pos:end="72:27">=</operator> <name pos:start="72:29" pos:end="72:31">val</name></expr>;</expr_stmt>

        <expr_stmt pos:start="74:9" pos:end="74:31"><expr pos:start="74:9" pos:end="74:30"><call pos:start="74:9" pos:end="74:30"><name pos:start="74:9" pos:end="74:21">xhci_er_reset</name><argument_list pos:start="74:22" pos:end="74:30">(<argument pos:start="74:23" pos:end="74:26"><expr pos:start="74:23" pos:end="74:26"><name pos:start="74:23" pos:end="74:26">xhci</name></expr></argument>, <argument pos:start="74:29" pos:end="74:29"><expr pos:start="74:29" pos:end="74:29"><name pos:start="74:29" pos:end="74:29">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="76:9" pos:end="76:14">break;</break>

    <case pos:start="78:5" pos:end="78:14">case <expr pos:start="78:10" pos:end="78:13"><literal type="number" pos:start="78:10" pos:end="78:13">0x18</literal></expr>:</case> <comment type="block" pos:start="78:16" pos:end="78:29">/* ERDP low */</comment>


            <expr_stmt pos:start="81:13" pos:end="81:40"><expr pos:start="81:13" pos:end="81:39"><name pos:start="81:13" pos:end="81:26"><name pos:start="81:13" pos:end="81:16">intr</name><operator pos:start="81:17" pos:end="81:18">-&gt;</operator><name pos:start="81:19" pos:end="81:26">erdp_low</name></name> <operator pos:start="81:28" pos:end="81:29">&amp;=</operator> <operator pos:start="81:31" pos:end="81:31">~</operator><name pos:start="81:32" pos:end="81:39">ERDP_EHB</name></expr>;</expr_stmt>


        <expr_stmt pos:start="84:9" pos:end="84:73"><expr pos:start="84:9" pos:end="84:72"><name pos:start="84:9" pos:end="84:22"><name pos:start="84:9" pos:end="84:12">intr</name><operator pos:start="84:13" pos:end="84:14">-&gt;</operator><name pos:start="84:15" pos:end="84:22">erdp_low</name></name> <operator pos:start="84:24" pos:end="84:24">=</operator> <operator pos:start="84:26" pos:end="84:26">(</operator><name pos:start="84:27" pos:end="84:29">val</name> <operator pos:start="84:31" pos:end="84:31">&amp;</operator> <operator pos:start="84:33" pos:end="84:33">~</operator><name pos:start="84:34" pos:end="84:41">ERDP_EHB</name><operator pos:start="84:42" pos:end="84:42">)</operator> <operator pos:start="84:44" pos:end="84:44">|</operator> <operator pos:start="84:46" pos:end="84:46">(</operator><name pos:start="84:47" pos:end="84:60"><name pos:start="84:47" pos:end="84:50">intr</name><operator pos:start="84:51" pos:end="84:52">-&gt;</operator><name pos:start="84:53" pos:end="84:60">erdp_low</name></name> <operator pos:start="84:62" pos:end="84:62">&amp;</operator> <name pos:start="84:64" pos:end="84:71">ERDP_EHB</name><operator pos:start="84:72" pos:end="84:72">)</operator></expr>;</expr_stmt>










        <break pos:start="95:9" pos:end="95:14">break;</break>

    <case pos:start="97:5" pos:end="97:14">case <expr pos:start="97:10" pos:end="97:13"><literal type="number" pos:start="97:10" pos:end="97:13">0x1c</literal></expr>:</case> <comment type="block" pos:start="97:16" pos:end="97:30">/* ERDP high */</comment>

        <expr_stmt pos:start="99:9" pos:end="99:30"><expr pos:start="99:9" pos:end="99:29"><name pos:start="99:9" pos:end="99:23"><name pos:start="99:9" pos:end="99:12">intr</name><operator pos:start="99:13" pos:end="99:14">-&gt;</operator><name pos:start="99:15" pos:end="99:23">erdp_high</name></name> <operator pos:start="99:25" pos:end="99:25">=</operator> <name pos:start="99:27" pos:end="99:29">val</name></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:36"><expr pos:start="101:9" pos:end="101:35"><call pos:start="101:9" pos:end="101:35"><name pos:start="101:9" pos:end="101:26">xhci_events_update</name><argument_list pos:start="101:27" pos:end="101:35">(<argument pos:start="101:28" pos:end="101:31"><expr pos:start="101:28" pos:end="101:31"><name pos:start="101:28" pos:end="101:31">xhci</name></expr></argument>, <argument pos:start="101:34" pos:end="101:34"><expr pos:start="101:34" pos:end="101:34"><name pos:start="101:34" pos:end="101:34">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="103:9" pos:end="103:14">break;</break>

    <default pos:start="105:5" pos:end="105:12">default:</default>

        <expr_stmt pos:start="107:9" pos:end="107:56"><expr pos:start="107:9" pos:end="107:55"><call pos:start="107:9" pos:end="107:55"><name pos:start="107:9" pos:end="107:36">trace_usb_xhci_unimplemented</name><argument_list pos:start="107:37" pos:end="107:55">(<argument pos:start="107:38" pos:end="107:49"><expr pos:start="107:38" pos:end="107:49"><literal type="string" pos:start="107:38" pos:end="107:49">"oper write"</literal></expr></argument>, <argument pos:start="107:52" pos:end="107:54"><expr pos:start="107:52" pos:end="107:54"><name pos:start="107:52" pos:end="107:54">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></switch></block_content></block></if></if_stmt></block_content></block></function>

</unit>
