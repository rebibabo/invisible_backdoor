<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25926.c" pos:tabs="8"><function pos:start="1:1" pos:end="319:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">rpl_read_header</name><parameter_list pos:start="1:27" pos:end="1:70">(<parameter pos:start="1:28" pos:end="1:45"><decl pos:start="1:28" pos:end="1:45"><type pos:start="1:28" pos:end="1:45"><name pos:start="1:28" pos:end="1:42">AVFormatContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">s</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:69"><decl pos:start="1:48" pos:end="1:69"><type pos:start="1:48" pos:end="1:69"><name pos:start="1:48" pos:end="1:65">AVFormatParameters</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:69">ap</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="319:1">{<block_content pos:start="5:5" pos:end="317:13">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">AVIOContext</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:19">pb</name> <init pos:start="5:21" pos:end="5:27">= <expr pos:start="5:23" pos:end="5:27"><name pos:start="5:23" pos:end="5:27"><name pos:start="5:23" pos:end="5:23">s</name><operator pos:start="5:24" pos:end="5:25">-&gt;</operator><name pos:start="5:26" pos:end="5:27">pb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:35"><decl pos:start="7:5" pos:end="7:34"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">RPLContext</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:19">rpl</name> <init pos:start="7:21" pos:end="7:34">= <expr pos:start="7:23" pos:end="7:34"><name pos:start="7:23" pos:end="7:34"><name pos:start="7:23" pos:end="7:23">s</name><operator pos:start="7:24" pos:end="7:25">-&gt;</operator><name pos:start="7:26" pos:end="7:34">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:38"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">AVStream</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:17">vst</name> <init pos:start="9:19" pos:end="9:24">= <expr pos:start="9:21" pos:end="9:24"><name pos:start="9:21" pos:end="9:24">NULL</name></expr></init></decl>, <decl pos:start="9:27" pos:end="9:37"><type ref="prev" pos:start="9:5" pos:end="9:14"><modifier pos:start="9:27" pos:end="9:27">*</modifier></type><name pos:start="9:28" pos:end="9:30">ast</name> <init pos:start="9:32" pos:end="9:37">= <expr pos:start="9:34" pos:end="9:37"><name pos:start="9:34" pos:end="9:37">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:25"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:24">total_audio_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:13">error</name> <init pos:start="13:15" pos:end="13:17">= <expr pos:start="13:17" pos:end="13:17"><literal type="number" pos:start="13:17" pos:end="13:17">0</literal></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="17:5" pos:end="17:15"><decl pos:start="17:5" pos:end="17:14"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:14">i</name></decl>;</decl_stmt>



    <decl_stmt pos:start="21:5" pos:end="21:65"><decl pos:start="21:5" pos:end="21:24"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:11">int32_t</name></type> <name pos:start="21:13" pos:end="21:24">audio_format</name></decl>, <decl pos:start="21:27" pos:end="21:46"><type ref="prev" pos:start="21:5" pos:end="21:11"/><name pos:start="21:27" pos:end="21:46">chunk_catalog_offset</name></decl>, <decl pos:start="21:49" pos:end="21:64"><type ref="prev" pos:start="21:5" pos:end="21:11"/><name pos:start="21:49" pos:end="21:64">number_of_chunks</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:19"><decl pos:start="23:5" pos:end="23:18"><type pos:start="23:5" pos:end="23:14"><name pos:start="23:5" pos:end="23:14">AVRational</name></type> <name pos:start="23:16" pos:end="23:18">fps</name></decl>;</decl_stmt>



    <decl_stmt pos:start="27:5" pos:end="27:31"><decl pos:start="27:5" pos:end="27:30"><type pos:start="27:5" pos:end="27:8"><name pos:start="27:5" pos:end="27:8">char</name></type> <name pos:start="27:10" pos:end="27:30"><name pos:start="27:10" pos:end="27:13">line</name><index pos:start="27:14" pos:end="27:30">[<expr pos:start="27:15" pos:end="27:29"><name pos:start="27:15" pos:end="27:29">RPL_LINE_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>



    <comment type="line" pos:start="31:5" pos:end="31:59">// The header for RPL/ARMovie files is 21 lines of text</comment>

    <comment type="line" pos:start="33:5" pos:end="33:67">// containing the various header fields.  The fields are always</comment>

    <comment type="line" pos:start="35:5" pos:end="35:58">// in the same order, and other text besides the first</comment>

    <comment type="line" pos:start="37:5" pos:end="37:38">// number usually isn't important.</comment>

    <comment type="line" pos:start="39:5" pos:end="39:57">// (The spec says that there exists some significance</comment>

    <comment type="line" pos:start="41:5" pos:end="41:52">// for the text in a few cases; samples needed.)</comment>

    <expr_stmt pos:start="43:5" pos:end="43:47"><expr pos:start="43:5" pos:end="43:46"><name pos:start="43:5" pos:end="43:9">error</name> <operator pos:start="43:11" pos:end="43:12">|=</operator> <call pos:start="43:14" pos:end="43:46"><name pos:start="43:14" pos:end="43:22">read_line</name><argument_list pos:start="43:23" pos:end="43:46">(<argument pos:start="43:24" pos:end="43:25"><expr pos:start="43:24" pos:end="43:25"><name pos:start="43:24" pos:end="43:25">pb</name></expr></argument>, <argument pos:start="43:28" pos:end="43:31"><expr pos:start="43:28" pos:end="43:31"><name pos:start="43:28" pos:end="43:31">line</name></expr></argument>, <argument pos:start="43:34" pos:end="43:45"><expr pos:start="43:34" pos:end="43:45"><sizeof pos:start="43:34" pos:end="43:45">sizeof<argument_list pos:start="43:40" pos:end="43:45">(<argument pos:start="43:41" pos:end="43:44"><expr pos:start="43:41" pos:end="43:44"><name pos:start="43:41" pos:end="43:44">line</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>      <comment type="line" pos:start="43:54" pos:end="43:63">// ARMovie</comment>

    <expr_stmt pos:start="45:5" pos:end="45:47"><expr pos:start="45:5" pos:end="45:46"><name pos:start="45:5" pos:end="45:9">error</name> <operator pos:start="45:11" pos:end="45:12">|=</operator> <call pos:start="45:14" pos:end="45:46"><name pos:start="45:14" pos:end="45:22">read_line</name><argument_list pos:start="45:23" pos:end="45:46">(<argument pos:start="45:24" pos:end="45:25"><expr pos:start="45:24" pos:end="45:25"><name pos:start="45:24" pos:end="45:25">pb</name></expr></argument>, <argument pos:start="45:28" pos:end="45:31"><expr pos:start="45:28" pos:end="45:31"><name pos:start="45:28" pos:end="45:31">line</name></expr></argument>, <argument pos:start="45:34" pos:end="45:45"><expr pos:start="45:34" pos:end="45:45"><sizeof pos:start="45:34" pos:end="45:45">sizeof<argument_list pos:start="45:40" pos:end="45:45">(<argument pos:start="45:41" pos:end="45:44"><expr pos:start="45:41" pos:end="45:44"><name pos:start="45:41" pos:end="45:44">line</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>      <comment type="line" pos:start="45:54" pos:end="45:66">// movie name</comment>

    <expr_stmt pos:start="47:5" pos:end="47:52"><expr pos:start="47:5" pos:end="47:51"><call pos:start="47:5" pos:end="47:51"><name pos:start="47:5" pos:end="47:15">av_dict_set</name><argument_list pos:start="47:16" pos:end="47:51">(<argument pos:start="47:17" pos:end="47:28"><expr pos:start="47:17" pos:end="47:28"><operator pos:start="47:17" pos:end="47:17">&amp;</operator><name pos:start="47:18" pos:end="47:28"><name pos:start="47:18" pos:end="47:18">s</name><operator pos:start="47:19" pos:end="47:20">-&gt;</operator><name pos:start="47:21" pos:end="47:28">metadata</name></name></expr></argument>, <argument pos:start="47:31" pos:end="47:37"><expr pos:start="47:31" pos:end="47:37"><literal type="string" pos:start="47:31" pos:end="47:37">"title"</literal></expr></argument>    , <argument pos:start="47:44" pos:end="47:47"><expr pos:start="47:44" pos:end="47:47"><name pos:start="47:44" pos:end="47:47">line</name></expr></argument>, <argument pos:start="47:50" pos:end="47:50"><expr pos:start="47:50" pos:end="47:50"><literal type="number" pos:start="47:50" pos:end="47:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:47"><expr pos:start="49:5" pos:end="49:46"><name pos:start="49:5" pos:end="49:9">error</name> <operator pos:start="49:11" pos:end="49:12">|=</operator> <call pos:start="49:14" pos:end="49:46"><name pos:start="49:14" pos:end="49:22">read_line</name><argument_list pos:start="49:23" pos:end="49:46">(<argument pos:start="49:24" pos:end="49:25"><expr pos:start="49:24" pos:end="49:25"><name pos:start="49:24" pos:end="49:25">pb</name></expr></argument>, <argument pos:start="49:28" pos:end="49:31"><expr pos:start="49:28" pos:end="49:31"><name pos:start="49:28" pos:end="49:31">line</name></expr></argument>, <argument pos:start="49:34" pos:end="49:45"><expr pos:start="49:34" pos:end="49:45"><sizeof pos:start="49:34" pos:end="49:45">sizeof<argument_list pos:start="49:40" pos:end="49:45">(<argument pos:start="49:41" pos:end="49:44"><expr pos:start="49:41" pos:end="49:44"><name pos:start="49:41" pos:end="49:44">line</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>      <comment type="line" pos:start="49:54" pos:end="49:70">// date/copyright</comment>

    <expr_stmt pos:start="51:5" pos:end="51:52"><expr pos:start="51:5" pos:end="51:51"><call pos:start="51:5" pos:end="51:51"><name pos:start="51:5" pos:end="51:15">av_dict_set</name><argument_list pos:start="51:16" pos:end="51:51">(<argument pos:start="51:17" pos:end="51:28"><expr pos:start="51:17" pos:end="51:28"><operator pos:start="51:17" pos:end="51:17">&amp;</operator><name pos:start="51:18" pos:end="51:28"><name pos:start="51:18" pos:end="51:18">s</name><operator pos:start="51:19" pos:end="51:20">-&gt;</operator><name pos:start="51:21" pos:end="51:28">metadata</name></name></expr></argument>, <argument pos:start="51:31" pos:end="51:41"><expr pos:start="51:31" pos:end="51:41"><literal type="string" pos:start="51:31" pos:end="51:41">"copyright"</literal></expr></argument>, <argument pos:start="51:44" pos:end="51:47"><expr pos:start="51:44" pos:end="51:47"><name pos:start="51:44" pos:end="51:47">line</name></expr></argument>, <argument pos:start="51:50" pos:end="51:50"><expr pos:start="51:50" pos:end="51:50"><literal type="number" pos:start="51:50" pos:end="51:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:47"><expr pos:start="53:5" pos:end="53:46"><name pos:start="53:5" pos:end="53:9">error</name> <operator pos:start="53:11" pos:end="53:12">|=</operator> <call pos:start="53:14" pos:end="53:46"><name pos:start="53:14" pos:end="53:22">read_line</name><argument_list pos:start="53:23" pos:end="53:46">(<argument pos:start="53:24" pos:end="53:25"><expr pos:start="53:24" pos:end="53:25"><name pos:start="53:24" pos:end="53:25">pb</name></expr></argument>, <argument pos:start="53:28" pos:end="53:31"><expr pos:start="53:28" pos:end="53:31"><name pos:start="53:28" pos:end="53:31">line</name></expr></argument>, <argument pos:start="53:34" pos:end="53:45"><expr pos:start="53:34" pos:end="53:45"><sizeof pos:start="53:34" pos:end="53:45">sizeof<argument_list pos:start="53:40" pos:end="53:45">(<argument pos:start="53:41" pos:end="53:44"><expr pos:start="53:41" pos:end="53:44"><name pos:start="53:41" pos:end="53:44">line</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>      <comment type="line" pos:start="53:54" pos:end="53:72">// author and other</comment>

    <expr_stmt pos:start="55:5" pos:end="55:52"><expr pos:start="55:5" pos:end="55:51"><call pos:start="55:5" pos:end="55:51"><name pos:start="55:5" pos:end="55:15">av_dict_set</name><argument_list pos:start="55:16" pos:end="55:51">(<argument pos:start="55:17" pos:end="55:28"><expr pos:start="55:17" pos:end="55:28"><operator pos:start="55:17" pos:end="55:17">&amp;</operator><name pos:start="55:18" pos:end="55:28"><name pos:start="55:18" pos:end="55:18">s</name><operator pos:start="55:19" pos:end="55:20">-&gt;</operator><name pos:start="55:21" pos:end="55:28">metadata</name></name></expr></argument>, <argument pos:start="55:31" pos:end="55:38"><expr pos:start="55:31" pos:end="55:38"><literal type="string" pos:start="55:31" pos:end="55:38">"author"</literal></expr></argument>   , <argument pos:start="55:44" pos:end="55:47"><expr pos:start="55:44" pos:end="55:47"><name pos:start="55:44" pos:end="55:47">line</name></expr></argument>, <argument pos:start="55:50" pos:end="55:50"><expr pos:start="55:50" pos:end="55:50"><literal type="number" pos:start="55:50" pos:end="55:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="line" pos:start="59:5" pos:end="59:20">// video headers</comment>

    <expr_stmt pos:start="61:5" pos:end="61:39"><expr pos:start="61:5" pos:end="61:38"><name pos:start="61:5" pos:end="61:7">vst</name> <operator pos:start="61:9" pos:end="61:9">=</operator> <call pos:start="61:11" pos:end="61:38"><name pos:start="61:11" pos:end="61:29">avformat_new_stream</name><argument_list pos:start="61:30" pos:end="61:38">(<argument pos:start="61:31" pos:end="61:31"><expr pos:start="61:31" pos:end="61:31"><name pos:start="61:31" pos:end="61:31">s</name></expr></argument>, <argument pos:start="61:34" pos:end="61:37"><expr pos:start="61:34" pos:end="61:37"><name pos:start="61:34" pos:end="61:37">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="63:5" pos:end="65:31"><if pos:start="63:5" pos:end="65:31">if <condition pos:start="63:8" pos:end="63:13">(<expr pos:start="63:9" pos:end="63:12"><operator pos:start="63:9" pos:end="63:9">!</operator><name pos:start="63:10" pos:end="63:12">vst</name></expr>)</condition><block type="pseudo" pos:start="65:9" pos:end="65:31"><block_content pos:start="65:9" pos:end="65:31">

        <return pos:start="65:9" pos:end="65:31">return <expr pos:start="65:16" pos:end="65:30"><call pos:start="65:16" pos:end="65:30"><name pos:start="65:16" pos:end="65:22">AVERROR</name><argument_list pos:start="65:23" pos:end="65:30">(<argument pos:start="65:24" pos:end="65:29"><expr pos:start="65:24" pos:end="65:29"><name pos:start="65:24" pos:end="65:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:53"><expr pos:start="67:5" pos:end="67:52"><name pos:start="67:5" pos:end="67:26"><name pos:start="67:5" pos:end="67:7">vst</name><operator pos:start="67:8" pos:end="67:9">-&gt;</operator><name pos:start="67:10" pos:end="67:14">codec</name><operator pos:start="67:15" pos:end="67:16">-&gt;</operator><name pos:start="67:17" pos:end="67:26">codec_type</name></name>      <operator pos:start="67:33" pos:end="67:33">=</operator> <name pos:start="67:35" pos:end="67:52">AVMEDIA_TYPE_VIDEO</name></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:64"><expr pos:start="69:5" pos:end="69:63"><name pos:start="69:5" pos:end="69:25"><name pos:start="69:5" pos:end="69:7">vst</name><operator pos:start="69:8" pos:end="69:9">-&gt;</operator><name pos:start="69:10" pos:end="69:14">codec</name><operator pos:start="69:15" pos:end="69:16">-&gt;</operator><name pos:start="69:17" pos:end="69:25">codec_tag</name></name>       <operator pos:start="69:33" pos:end="69:33">=</operator> <call pos:start="69:35" pos:end="69:63"><name pos:start="69:35" pos:end="69:51">read_line_and_int</name><argument_list pos:start="69:52" pos:end="69:63">(<argument pos:start="69:53" pos:end="69:54"><expr pos:start="69:53" pos:end="69:54"><name pos:start="69:53" pos:end="69:54">pb</name></expr></argument>, <argument pos:start="69:57" pos:end="69:62"><expr pos:start="69:57" pos:end="69:62"><operator pos:start="69:57" pos:end="69:57">&amp;</operator><name pos:start="69:58" pos:end="69:62">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="69:67" pos:end="69:81">// video format</comment>

    <expr_stmt pos:start="71:5" pos:end="71:64"><expr pos:start="71:5" pos:end="71:63"><name pos:start="71:5" pos:end="71:21"><name pos:start="71:5" pos:end="71:7">vst</name><operator pos:start="71:8" pos:end="71:9">-&gt;</operator><name pos:start="71:10" pos:end="71:14">codec</name><operator pos:start="71:15" pos:end="71:16">-&gt;</operator><name pos:start="71:17" pos:end="71:21">width</name></name>           <operator pos:start="71:33" pos:end="71:33">=</operator> <call pos:start="71:35" pos:end="71:63"><name pos:start="71:35" pos:end="71:51">read_line_and_int</name><argument_list pos:start="71:52" pos:end="71:63">(<argument pos:start="71:53" pos:end="71:54"><expr pos:start="71:53" pos:end="71:54"><name pos:start="71:53" pos:end="71:54">pb</name></expr></argument>, <argument pos:start="71:57" pos:end="71:62"><expr pos:start="71:57" pos:end="71:62"><operator pos:start="71:57" pos:end="71:57">&amp;</operator><name pos:start="71:58" pos:end="71:62">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="71:67" pos:end="71:80">// video width</comment>

    <expr_stmt pos:start="73:5" pos:end="73:64"><expr pos:start="73:5" pos:end="73:63"><name pos:start="73:5" pos:end="73:22"><name pos:start="73:5" pos:end="73:7">vst</name><operator pos:start="73:8" pos:end="73:9">-&gt;</operator><name pos:start="73:10" pos:end="73:14">codec</name><operator pos:start="73:15" pos:end="73:16">-&gt;</operator><name pos:start="73:17" pos:end="73:22">height</name></name>          <operator pos:start="73:33" pos:end="73:33">=</operator> <call pos:start="73:35" pos:end="73:63"><name pos:start="73:35" pos:end="73:51">read_line_and_int</name><argument_list pos:start="73:52" pos:end="73:63">(<argument pos:start="73:53" pos:end="73:54"><expr pos:start="73:53" pos:end="73:54"><name pos:start="73:53" pos:end="73:54">pb</name></expr></argument>, <argument pos:start="73:57" pos:end="73:62"><expr pos:start="73:57" pos:end="73:62"><operator pos:start="73:57" pos:end="73:57">&amp;</operator><name pos:start="73:58" pos:end="73:62">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="73:67" pos:end="73:81">// video height</comment>

    <expr_stmt pos:start="75:5" pos:end="75:70"><expr pos:start="75:5" pos:end="75:69"><name pos:start="75:5" pos:end="75:37"><name pos:start="75:5" pos:end="75:7">vst</name><operator pos:start="75:8" pos:end="75:9">-&gt;</operator><name pos:start="75:10" pos:end="75:14">codec</name><operator pos:start="75:15" pos:end="75:16">-&gt;</operator><name pos:start="75:17" pos:end="75:37">bits_per_coded_sample</name></name> <operator pos:start="75:39" pos:end="75:39">=</operator> <call pos:start="75:41" pos:end="75:69"><name pos:start="75:41" pos:end="75:57">read_line_and_int</name><argument_list pos:start="75:58" pos:end="75:69">(<argument pos:start="75:59" pos:end="75:60"><expr pos:start="75:59" pos:end="75:60"><name pos:start="75:59" pos:end="75:60">pb</name></expr></argument>, <argument pos:start="75:63" pos:end="75:68"><expr pos:start="75:63" pos:end="75:68"><operator pos:start="75:63" pos:end="75:63">&amp;</operator><name pos:start="75:64" pos:end="75:68">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="75:73" pos:end="75:96">// video bits per sample</comment>

    <expr_stmt pos:start="77:5" pos:end="77:47"><expr pos:start="77:5" pos:end="77:46"><name pos:start="77:5" pos:end="77:9">error</name> <operator pos:start="77:11" pos:end="77:12">|=</operator> <call pos:start="77:14" pos:end="77:46"><name pos:start="77:14" pos:end="77:22">read_line</name><argument_list pos:start="77:23" pos:end="77:46">(<argument pos:start="77:24" pos:end="77:25"><expr pos:start="77:24" pos:end="77:25"><name pos:start="77:24" pos:end="77:25">pb</name></expr></argument>, <argument pos:start="77:28" pos:end="77:31"><expr pos:start="77:28" pos:end="77:31"><name pos:start="77:28" pos:end="77:31">line</name></expr></argument>, <argument pos:start="77:34" pos:end="77:45"><expr pos:start="77:34" pos:end="77:45"><sizeof pos:start="77:34" pos:end="77:45">sizeof<argument_list pos:start="77:40" pos:end="77:45">(<argument pos:start="77:41" pos:end="77:44"><expr pos:start="77:41" pos:end="77:44"><name pos:start="77:41" pos:end="77:44">line</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>                   <comment type="line" pos:start="77:67" pos:end="77:92">// video frames per second</comment>

    <expr_stmt pos:start="79:5" pos:end="79:33"><expr pos:start="79:5" pos:end="79:32"><name pos:start="79:5" pos:end="79:7">fps</name> <operator pos:start="79:9" pos:end="79:9">=</operator> <call pos:start="79:11" pos:end="79:32"><name pos:start="79:11" pos:end="79:18">read_fps</name><argument_list pos:start="79:19" pos:end="79:32">(<argument pos:start="79:20" pos:end="79:23"><expr pos:start="79:20" pos:end="79:23"><name pos:start="79:20" pos:end="79:23">line</name></expr></argument>, <argument pos:start="79:26" pos:end="79:31"><expr pos:start="79:26" pos:end="79:31"><operator pos:start="79:26" pos:end="79:26">&amp;</operator><name pos:start="79:27" pos:end="79:31">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:51"><expr pos:start="81:5" pos:end="81:50"><call pos:start="81:5" pos:end="81:50"><name pos:start="81:5" pos:end="81:23">avpriv_set_pts_info</name><argument_list pos:start="81:24" pos:end="81:50">(<argument pos:start="81:25" pos:end="81:27"><expr pos:start="81:25" pos:end="81:27"><name pos:start="81:25" pos:end="81:27">vst</name></expr></argument>, <argument pos:start="81:30" pos:end="81:31"><expr pos:start="81:30" pos:end="81:31"><literal type="number" pos:start="81:30" pos:end="81:31">32</literal></expr></argument>, <argument pos:start="81:34" pos:end="81:40"><expr pos:start="81:34" pos:end="81:40"><name pos:start="81:34" pos:end="81:40"><name pos:start="81:34" pos:end="81:36">fps</name><operator pos:start="81:37" pos:end="81:37">.</operator><name pos:start="81:38" pos:end="81:40">den</name></name></expr></argument>, <argument pos:start="81:43" pos:end="81:49"><expr pos:start="81:43" pos:end="81:49"><name pos:start="81:43" pos:end="81:49"><name pos:start="81:43" pos:end="81:45">fps</name><operator pos:start="81:46" pos:end="81:46">.</operator><name pos:start="81:47" pos:end="81:49">num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="line" pos:start="85:5" pos:end="85:33">// Figure out the video codec</comment>

    <switch pos:start="87:5" pos:end="125:5">switch <condition pos:start="87:12" pos:end="87:34">(<expr pos:start="87:13" pos:end="87:33"><name pos:start="87:13" pos:end="87:33"><name pos:start="87:13" pos:end="87:15">vst</name><operator pos:start="87:16" pos:end="87:17">-&gt;</operator><name pos:start="87:18" pos:end="87:22">codec</name><operator pos:start="87:23" pos:end="87:24">-&gt;</operator><name pos:start="87:25" pos:end="87:33">codec_tag</name></name></expr>)</condition> <block pos:start="87:36" pos:end="125:5">{<block_content pos:start="99:9" pos:end="123:49">

<cpp:if pos:start="89:1" pos:end="89:5">#<cpp:directive pos:start="89:2" pos:end="89:3">if</cpp:directive> <expr pos:start="89:5" pos:end="89:5"><literal type="number" pos:start="89:5" pos:end="89:5">0</literal></expr></cpp:if>

        case 122:

            vst-&gt;codec-&gt;codec_id = CODEC_ID_ESCAPE122;

            break;

<cpp:endif pos:start="97:1" pos:end="97:6">#<cpp:directive pos:start="97:2" pos:end="97:6">endif</cpp:directive></cpp:endif>

        <case pos:start="99:9" pos:end="99:17">case <expr pos:start="99:14" pos:end="99:16"><literal type="number" pos:start="99:14" pos:end="99:16">124</literal></expr>:</case>

            <expr_stmt pos:start="101:13" pos:end="101:54"><expr pos:start="101:13" pos:end="101:53"><name pos:start="101:13" pos:end="101:32"><name pos:start="101:13" pos:end="101:15">vst</name><operator pos:start="101:16" pos:end="101:17">-&gt;</operator><name pos:start="101:18" pos:end="101:22">codec</name><operator pos:start="101:23" pos:end="101:24">-&gt;</operator><name pos:start="101:25" pos:end="101:32">codec_id</name></name> <operator pos:start="101:34" pos:end="101:34">=</operator> <name pos:start="101:36" pos:end="101:53">CODEC_ID_ESCAPE124</name></expr>;</expr_stmt>

            <comment type="line" pos:start="103:13" pos:end="103:59">// The header is wrong here, at least sometimes</comment>

            <expr_stmt pos:start="105:13" pos:end="105:51"><expr pos:start="105:13" pos:end="105:50"><name pos:start="105:13" pos:end="105:45"><name pos:start="105:13" pos:end="105:15">vst</name><operator pos:start="105:16" pos:end="105:17">-&gt;</operator><name pos:start="105:18" pos:end="105:22">codec</name><operator pos:start="105:23" pos:end="105:24">-&gt;</operator><name pos:start="105:25" pos:end="105:45">bits_per_coded_sample</name></name> <operator pos:start="105:47" pos:end="105:47">=</operator> <literal type="number" pos:start="105:49" pos:end="105:50">16</literal></expr>;</expr_stmt>

            <break pos:start="107:13" pos:end="107:18">break;</break>

        <case pos:start="109:9" pos:end="109:17">case <expr pos:start="109:14" pos:end="109:16"><literal type="number" pos:start="109:14" pos:end="109:16">130</literal></expr>:</case>

            <expr_stmt pos:start="111:13" pos:end="111:54"><expr pos:start="111:13" pos:end="111:53"><name pos:start="111:13" pos:end="111:32"><name pos:start="111:13" pos:end="111:15">vst</name><operator pos:start="111:16" pos:end="111:17">-&gt;</operator><name pos:start="111:18" pos:end="111:22">codec</name><operator pos:start="111:23" pos:end="111:24">-&gt;</operator><name pos:start="111:25" pos:end="111:32">codec_id</name></name> <operator pos:start="111:34" pos:end="111:34">=</operator> <name pos:start="111:36" pos:end="111:53">CODEC_ID_ESCAPE130</name></expr>;</expr_stmt>

            <break pos:start="113:13" pos:end="113:18">break;</break>

        <default pos:start="115:9" pos:end="115:16">default:</default>

            <expr_stmt pos:start="117:13" pos:end="121:42"><expr pos:start="117:13" pos:end="121:41"><call pos:start="117:13" pos:end="121:41"><name pos:start="117:13" pos:end="117:18">av_log</name><argument_list pos:start="117:19" pos:end="121:41">(<argument pos:start="117:20" pos:end="117:20"><expr pos:start="117:20" pos:end="117:20"><name pos:start="117:20" pos:end="117:20">s</name></expr></argument>, <argument pos:start="117:23" pos:end="117:36"><expr pos:start="117:23" pos:end="117:36"><name pos:start="117:23" pos:end="117:36">AV_LOG_WARNING</name></expr></argument>,

                   <argument pos:start="119:20" pos:end="119:61"><expr pos:start="119:20" pos:end="119:61"><literal type="string" pos:start="119:20" pos:end="119:61">"RPL video format %i not supported yet!\n"</literal></expr></argument>,

                   <argument pos:start="121:20" pos:end="121:40"><expr pos:start="121:20" pos:end="121:40"><name pos:start="121:20" pos:end="121:40"><name pos:start="121:20" pos:end="121:22">vst</name><operator pos:start="121:23" pos:end="121:24">-&gt;</operator><name pos:start="121:25" pos:end="121:29">codec</name><operator pos:start="121:30" pos:end="121:31">-&gt;</operator><name pos:start="121:32" pos:end="121:40">codec_tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="123:13" pos:end="123:49"><expr pos:start="123:13" pos:end="123:48"><name pos:start="123:13" pos:end="123:32"><name pos:start="123:13" pos:end="123:15">vst</name><operator pos:start="123:16" pos:end="123:17">-&gt;</operator><name pos:start="123:18" pos:end="123:22">codec</name><operator pos:start="123:23" pos:end="123:24">-&gt;</operator><name pos:start="123:25" pos:end="123:32">codec_id</name></name> <operator pos:start="123:34" pos:end="123:34">=</operator> <name pos:start="123:36" pos:end="123:48">CODEC_ID_NONE</name></expr>;</expr_stmt>

    </block_content>}</block></switch>



    <comment type="line" pos:start="129:5" pos:end="129:20">// Audio headers</comment>



    <comment type="line" pos:start="133:5" pos:end="133:63">// ARMovie supports multiple audio tracks; I don't have any</comment>

    <comment type="line" pos:start="135:5" pos:end="135:64">// samples, though. This code will ignore additional tracks.</comment>

    <expr_stmt pos:start="137:5" pos:end="137:49"><expr pos:start="137:5" pos:end="137:48"><name pos:start="137:5" pos:end="137:16">audio_format</name> <operator pos:start="137:18" pos:end="137:18">=</operator> <call pos:start="137:20" pos:end="137:48"><name pos:start="137:20" pos:end="137:36">read_line_and_int</name><argument_list pos:start="137:37" pos:end="137:48">(<argument pos:start="137:38" pos:end="137:39"><expr pos:start="137:38" pos:end="137:39"><name pos:start="137:38" pos:end="137:39">pb</name></expr></argument>, <argument pos:start="137:42" pos:end="137:47"><expr pos:start="137:42" pos:end="137:47"><operator pos:start="137:42" pos:end="137:42">&amp;</operator><name pos:start="137:43" pos:end="137:47">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="137:52" pos:end="137:69">// audio format ID</comment>

    <if_stmt pos:start="139:5" pos:end="239:5"><if pos:start="139:5" pos:end="233:5">if <condition pos:start="139:8" pos:end="139:21">(<expr pos:start="139:9" pos:end="139:20"><name pos:start="139:9" pos:end="139:20">audio_format</name></expr>)</condition> <block pos:start="139:23" pos:end="233:5">{<block_content pos:start="141:9" pos:end="231:62">

        <expr_stmt pos:start="141:9" pos:end="141:43"><expr pos:start="141:9" pos:end="141:42"><name pos:start="141:9" pos:end="141:11">ast</name> <operator pos:start="141:13" pos:end="141:13">=</operator> <call pos:start="141:15" pos:end="141:42"><name pos:start="141:15" pos:end="141:33">avformat_new_stream</name><argument_list pos:start="141:34" pos:end="141:42">(<argument pos:start="141:35" pos:end="141:35"><expr pos:start="141:35" pos:end="141:35"><name pos:start="141:35" pos:end="141:35">s</name></expr></argument>, <argument pos:start="141:38" pos:end="141:41"><expr pos:start="141:38" pos:end="141:41"><name pos:start="141:38" pos:end="141:41">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="143:9" pos:end="145:35"><if pos:start="143:9" pos:end="145:35">if <condition pos:start="143:12" pos:end="143:17">(<expr pos:start="143:13" pos:end="143:16"><operator pos:start="143:13" pos:end="143:13">!</operator><name pos:start="143:14" pos:end="143:16">ast</name></expr>)</condition><block type="pseudo" pos:start="145:13" pos:end="145:35"><block_content pos:start="145:13" pos:end="145:35">

            <return pos:start="145:13" pos:end="145:35">return <expr pos:start="145:20" pos:end="145:34"><call pos:start="145:20" pos:end="145:34"><name pos:start="145:20" pos:end="145:26">AVERROR</name><argument_list pos:start="145:27" pos:end="145:34">(<argument pos:start="145:28" pos:end="145:33"><expr pos:start="145:28" pos:end="145:33"><name pos:start="145:28" pos:end="145:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:57"><expr pos:start="147:9" pos:end="147:56"><name pos:start="147:9" pos:end="147:30"><name pos:start="147:9" pos:end="147:11">ast</name><operator pos:start="147:12" pos:end="147:13">-&gt;</operator><name pos:start="147:14" pos:end="147:18">codec</name><operator pos:start="147:19" pos:end="147:20">-&gt;</operator><name pos:start="147:21" pos:end="147:30">codec_type</name></name>      <operator pos:start="147:37" pos:end="147:37">=</operator> <name pos:start="147:39" pos:end="147:56">AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:51"><expr pos:start="149:9" pos:end="149:50"><name pos:start="149:9" pos:end="149:29"><name pos:start="149:9" pos:end="149:11">ast</name><operator pos:start="149:12" pos:end="149:13">-&gt;</operator><name pos:start="149:14" pos:end="149:18">codec</name><operator pos:start="149:19" pos:end="149:20">-&gt;</operator><name pos:start="149:21" pos:end="149:29">codec_tag</name></name>       <operator pos:start="149:37" pos:end="149:37">=</operator> <name pos:start="149:39" pos:end="149:50">audio_format</name></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:68"><expr pos:start="151:9" pos:end="151:67"><name pos:start="151:9" pos:end="151:31"><name pos:start="151:9" pos:end="151:11">ast</name><operator pos:start="151:12" pos:end="151:13">-&gt;</operator><name pos:start="151:14" pos:end="151:18">codec</name><operator pos:start="151:19" pos:end="151:20">-&gt;</operator><name pos:start="151:21" pos:end="151:31">sample_rate</name></name>     <operator pos:start="151:37" pos:end="151:37">=</operator> <call pos:start="151:39" pos:end="151:67"><name pos:start="151:39" pos:end="151:55">read_line_and_int</name><argument_list pos:start="151:56" pos:end="151:67">(<argument pos:start="151:57" pos:end="151:58"><expr pos:start="151:57" pos:end="151:58"><name pos:start="151:57" pos:end="151:58">pb</name></expr></argument>, <argument pos:start="151:61" pos:end="151:66"><expr pos:start="151:61" pos:end="151:66"><operator pos:start="151:61" pos:end="151:61">&amp;</operator><name pos:start="151:62" pos:end="151:66">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="151:71" pos:end="151:86">// audio bitrate</comment>

        <expr_stmt pos:start="153:9" pos:end="153:68"><expr pos:start="153:9" pos:end="153:67"><name pos:start="153:9" pos:end="153:28"><name pos:start="153:9" pos:end="153:11">ast</name><operator pos:start="153:12" pos:end="153:13">-&gt;</operator><name pos:start="153:14" pos:end="153:18">codec</name><operator pos:start="153:19" pos:end="153:20">-&gt;</operator><name pos:start="153:21" pos:end="153:28">channels</name></name>        <operator pos:start="153:37" pos:end="153:37">=</operator> <call pos:start="153:39" pos:end="153:67"><name pos:start="153:39" pos:end="153:55">read_line_and_int</name><argument_list pos:start="153:56" pos:end="153:67">(<argument pos:start="153:57" pos:end="153:58"><expr pos:start="153:57" pos:end="153:58"><name pos:start="153:57" pos:end="153:58">pb</name></expr></argument>, <argument pos:start="153:61" pos:end="153:66"><expr pos:start="153:61" pos:end="153:66"><operator pos:start="153:61" pos:end="153:61">&amp;</operator><name pos:start="153:62" pos:end="153:66">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="153:71" pos:end="153:97">// number of audio channels</comment>

        <expr_stmt pos:start="155:9" pos:end="155:74"><expr pos:start="155:9" pos:end="155:73"><name pos:start="155:9" pos:end="155:41"><name pos:start="155:9" pos:end="155:11">ast</name><operator pos:start="155:12" pos:end="155:13">-&gt;</operator><name pos:start="155:14" pos:end="155:18">codec</name><operator pos:start="155:19" pos:end="155:20">-&gt;</operator><name pos:start="155:21" pos:end="155:41">bits_per_coded_sample</name></name> <operator pos:start="155:43" pos:end="155:43">=</operator> <call pos:start="155:45" pos:end="155:73"><name pos:start="155:45" pos:end="155:61">read_line_and_int</name><argument_list pos:start="155:62" pos:end="155:73">(<argument pos:start="155:63" pos:end="155:64"><expr pos:start="155:63" pos:end="155:64"><name pos:start="155:63" pos:end="155:64">pb</name></expr></argument>, <argument pos:start="155:67" pos:end="155:72"><expr pos:start="155:67" pos:end="155:72"><operator pos:start="155:67" pos:end="155:67">&amp;</operator><name pos:start="155:68" pos:end="155:72">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="155:77" pos:end="155:100">// audio bits per sample</comment>

        <comment type="line" pos:start="157:9" pos:end="157:71">// At least one sample uses 0 for ADPCM, which is really 4 bits</comment>

        <comment type="line" pos:start="159:9" pos:end="159:22">// per sample.</comment>

        <if_stmt pos:start="161:9" pos:end="163:50"><if pos:start="161:9" pos:end="163:50">if <condition pos:start="161:12" pos:end="161:51">(<expr pos:start="161:13" pos:end="161:50"><name pos:start="161:13" pos:end="161:45"><name pos:start="161:13" pos:end="161:15">ast</name><operator pos:start="161:16" pos:end="161:17">-&gt;</operator><name pos:start="161:18" pos:end="161:22">codec</name><operator pos:start="161:23" pos:end="161:24">-&gt;</operator><name pos:start="161:25" pos:end="161:45">bits_per_coded_sample</name></name> <operator pos:start="161:47" pos:end="161:48">==</operator> <literal type="number" pos:start="161:50" pos:end="161:50">0</literal></expr>)</condition><block type="pseudo" pos:start="163:13" pos:end="163:50"><block_content pos:start="163:13" pos:end="163:50">

            <expr_stmt pos:start="163:13" pos:end="163:50"><expr pos:start="163:13" pos:end="163:49"><name pos:start="163:13" pos:end="163:45"><name pos:start="163:13" pos:end="163:15">ast</name><operator pos:start="163:16" pos:end="163:17">-&gt;</operator><name pos:start="163:18" pos:end="163:22">codec</name><operator pos:start="163:23" pos:end="163:24">-&gt;</operator><name pos:start="163:25" pos:end="163:45">bits_per_coded_sample</name></name> <operator pos:start="163:47" pos:end="163:47">=</operator> <literal type="number" pos:start="163:49" pos:end="163:49">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="167:9" pos:end="171:52"><expr pos:start="167:9" pos:end="171:51"><name pos:start="167:9" pos:end="167:28"><name pos:start="167:9" pos:end="167:11">ast</name><operator pos:start="167:12" pos:end="167:13">-&gt;</operator><name pos:start="167:14" pos:end="167:18">codec</name><operator pos:start="167:19" pos:end="167:20">-&gt;</operator><name pos:start="167:21" pos:end="167:28">bit_rate</name></name> <operator pos:start="167:30" pos:end="167:30">=</operator> <name pos:start="167:32" pos:end="167:54"><name pos:start="167:32" pos:end="167:34">ast</name><operator pos:start="167:35" pos:end="167:36">-&gt;</operator><name pos:start="167:37" pos:end="167:41">codec</name><operator pos:start="167:42" pos:end="167:43">-&gt;</operator><name pos:start="167:44" pos:end="167:54">sample_rate</name></name> <operator pos:start="167:56" pos:end="167:56">*</operator>

                               <name pos:start="169:32" pos:end="169:64"><name pos:start="169:32" pos:end="169:34">ast</name><operator pos:start="169:35" pos:end="169:36">-&gt;</operator><name pos:start="169:37" pos:end="169:41">codec</name><operator pos:start="169:42" pos:end="169:43">-&gt;</operator><name pos:start="169:44" pos:end="169:64">bits_per_coded_sample</name></name> <operator pos:start="169:66" pos:end="169:66">*</operator>

                               <name pos:start="171:32" pos:end="171:51"><name pos:start="171:32" pos:end="171:34">ast</name><operator pos:start="171:35" pos:end="171:36">-&gt;</operator><name pos:start="171:37" pos:end="171:41">codec</name><operator pos:start="171:42" pos:end="171:43">-&gt;</operator><name pos:start="171:44" pos:end="171:51">channels</name></name></expr>;</expr_stmt>



        <expr_stmt pos:start="175:9" pos:end="175:45"><expr pos:start="175:9" pos:end="175:44"><name pos:start="175:9" pos:end="175:28"><name pos:start="175:9" pos:end="175:11">ast</name><operator pos:start="175:12" pos:end="175:13">-&gt;</operator><name pos:start="175:14" pos:end="175:18">codec</name><operator pos:start="175:19" pos:end="175:20">-&gt;</operator><name pos:start="175:21" pos:end="175:28">codec_id</name></name> <operator pos:start="175:30" pos:end="175:30">=</operator> <name pos:start="175:32" pos:end="175:44">CODEC_ID_NONE</name></expr>;</expr_stmt>

        <switch pos:start="177:9" pos:end="219:9">switch <condition pos:start="177:16" pos:end="177:29">(<expr pos:start="177:17" pos:end="177:28"><name pos:start="177:17" pos:end="177:28">audio_format</name></expr>)</condition> <block pos:start="177:31" pos:end="219:9">{<block_content pos:start="179:13" pos:end="217:22">

            <case pos:start="179:13" pos:end="179:19">case <expr pos:start="179:18" pos:end="179:18"><literal type="number" pos:start="179:18" pos:end="179:18">1</literal></expr>:</case>

                <if_stmt pos:start="181:17" pos:end="189:17"><if pos:start="181:17" pos:end="189:17">if <condition pos:start="181:20" pos:end="181:60">(<expr pos:start="181:21" pos:end="181:59"><name pos:start="181:21" pos:end="181:53"><name pos:start="181:21" pos:end="181:23">ast</name><operator pos:start="181:24" pos:end="181:25">-&gt;</operator><name pos:start="181:26" pos:end="181:30">codec</name><operator pos:start="181:31" pos:end="181:32">-&gt;</operator><name pos:start="181:33" pos:end="181:53">bits_per_coded_sample</name></name> <operator pos:start="181:55" pos:end="181:56">==</operator> <literal type="number" pos:start="181:58" pos:end="181:59">16</literal></expr>)</condition> <block pos:start="181:62" pos:end="189:17">{<block_content pos:start="185:21" pos:end="187:26">

                    <comment type="line" pos:start="183:21" pos:end="183:52">// 16-bit audio is always signed</comment>

                    <expr_stmt pos:start="185:21" pos:end="185:62"><expr pos:start="185:21" pos:end="185:61"><name pos:start="185:21" pos:end="185:40"><name pos:start="185:21" pos:end="185:23">ast</name><operator pos:start="185:24" pos:end="185:25">-&gt;</operator><name pos:start="185:26" pos:end="185:30">codec</name><operator pos:start="185:31" pos:end="185:32">-&gt;</operator><name pos:start="185:33" pos:end="185:40">codec_id</name></name> <operator pos:start="185:42" pos:end="185:42">=</operator> <name pos:start="185:44" pos:end="185:61">CODEC_ID_PCM_S16LE</name></expr>;</expr_stmt>

                    <break pos:start="187:21" pos:end="187:26">break;</break>

                </block_content>}</block></if></if_stmt>

                <comment type="line" pos:start="191:17" pos:end="191:77">// There are some other formats listed as legal per the spec;</comment>

                <comment type="line" pos:start="193:17" pos:end="193:34">// samples needed.</comment>

                <break pos:start="195:17" pos:end="195:22">break;</break>

            <case pos:start="197:13" pos:end="197:21">case <expr pos:start="197:18" pos:end="197:20"><literal type="number" pos:start="197:18" pos:end="197:20">101</literal></expr>:</case>

                <if_stmt pos:start="199:17" pos:end="215:17"><if pos:start="199:17" pos:end="209:17">if <condition pos:start="199:20" pos:end="199:59">(<expr pos:start="199:21" pos:end="199:58"><name pos:start="199:21" pos:end="199:53"><name pos:start="199:21" pos:end="199:23">ast</name><operator pos:start="199:24" pos:end="199:25">-&gt;</operator><name pos:start="199:26" pos:end="199:30">codec</name><operator pos:start="199:31" pos:end="199:32">-&gt;</operator><name pos:start="199:33" pos:end="199:53">bits_per_coded_sample</name></name> <operator pos:start="199:55" pos:end="199:56">==</operator> <literal type="number" pos:start="199:58" pos:end="199:58">8</literal></expr>)</condition> <block pos:start="199:61" pos:end="209:17">{<block_content pos:start="205:21" pos:end="207:26">

                    <comment type="line" pos:start="201:21" pos:end="201:70">// The samples with this kind of audio that I have</comment>

                    <comment type="line" pos:start="203:21" pos:end="203:40">// are all unsigned.</comment>

                    <expr_stmt pos:start="205:21" pos:end="205:59"><expr pos:start="205:21" pos:end="205:58"><name pos:start="205:21" pos:end="205:40"><name pos:start="205:21" pos:end="205:23">ast</name><operator pos:start="205:24" pos:end="205:25">-&gt;</operator><name pos:start="205:26" pos:end="205:30">codec</name><operator pos:start="205:31" pos:end="205:32">-&gt;</operator><name pos:start="205:33" pos:end="205:40">codec_id</name></name> <operator pos:start="205:42" pos:end="205:42">=</operator> <name pos:start="205:44" pos:end="205:58">CODEC_ID_PCM_U8</name></expr>;</expr_stmt>

                    <break pos:start="207:21" pos:end="207:26">break;</break>

                </block_content>}</block></if> <if type="elseif" pos:start="209:19" pos:end="215:17">else if <condition pos:start="209:27" pos:end="209:66">(<expr pos:start="209:28" pos:end="209:65"><name pos:start="209:28" pos:end="209:60"><name pos:start="209:28" pos:end="209:30">ast</name><operator pos:start="209:31" pos:end="209:32">-&gt;</operator><name pos:start="209:33" pos:end="209:37">codec</name><operator pos:start="209:38" pos:end="209:39">-&gt;</operator><name pos:start="209:40" pos:end="209:60">bits_per_coded_sample</name></name> <operator pos:start="209:62" pos:end="209:63">==</operator> <literal type="number" pos:start="209:65" pos:end="209:65">4</literal></expr>)</condition> <block pos:start="209:68" pos:end="215:17">{<block_content pos:start="211:21" pos:end="213:26">

                    <expr_stmt pos:start="211:21" pos:end="211:70"><expr pos:start="211:21" pos:end="211:69"><name pos:start="211:21" pos:end="211:40"><name pos:start="211:21" pos:end="211:23">ast</name><operator pos:start="211:24" pos:end="211:25">-&gt;</operator><name pos:start="211:26" pos:end="211:30">codec</name><operator pos:start="211:31" pos:end="211:32">-&gt;</operator><name pos:start="211:33" pos:end="211:40">codec_id</name></name> <operator pos:start="211:42" pos:end="211:42">=</operator> <name pos:start="211:44" pos:end="211:69">CODEC_ID_ADPCM_IMA_EA_SEAD</name></expr>;</expr_stmt>

                    <break pos:start="213:21" pos:end="213:26">break;</break>

                </block_content>}</block></if></if_stmt>

                <break pos:start="217:17" pos:end="217:22">break;</break>

        </block_content>}</block></switch>

        <if_stmt pos:start="221:9" pos:end="229:9"><if pos:start="221:9" pos:end="229:9">if <condition pos:start="221:12" pos:end="221:50">(<expr pos:start="221:13" pos:end="221:49"><name pos:start="221:13" pos:end="221:32"><name pos:start="221:13" pos:end="221:15">ast</name><operator pos:start="221:16" pos:end="221:17">-&gt;</operator><name pos:start="221:18" pos:end="221:22">codec</name><operator pos:start="221:23" pos:end="221:24">-&gt;</operator><name pos:start="221:25" pos:end="221:32">codec_id</name></name> <operator pos:start="221:34" pos:end="221:35">==</operator> <name pos:start="221:37" pos:end="221:49">CODEC_ID_NONE</name></expr>)</condition> <block pos:start="221:52" pos:end="229:9">{<block_content pos:start="223:13" pos:end="227:33">

            <expr_stmt pos:start="223:13" pos:end="227:33"><expr pos:start="223:13" pos:end="227:32"><call pos:start="223:13" pos:end="227:32"><name pos:start="223:13" pos:end="223:18">av_log</name><argument_list pos:start="223:19" pos:end="227:32">(<argument pos:start="223:20" pos:end="223:20"><expr pos:start="223:20" pos:end="223:20"><name pos:start="223:20" pos:end="223:20">s</name></expr></argument>, <argument pos:start="223:23" pos:end="223:36"><expr pos:start="223:23" pos:end="223:36"><name pos:start="223:23" pos:end="223:36">AV_LOG_WARNING</name></expr></argument>,

                   <argument pos:start="225:20" pos:end="225:61"><expr pos:start="225:20" pos:end="225:61"><literal type="string" pos:start="225:20" pos:end="225:61">"RPL audio format %i not supported yet!\n"</literal></expr></argument>,

                   <argument pos:start="227:20" pos:end="227:31"><expr pos:start="227:20" pos:end="227:31"><name pos:start="227:20" pos:end="227:31">audio_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="231:9" pos:end="231:62"><expr pos:start="231:9" pos:end="231:61"><call pos:start="231:9" pos:end="231:61"><name pos:start="231:9" pos:end="231:27">avpriv_set_pts_info</name><argument_list pos:start="231:28" pos:end="231:61">(<argument pos:start="231:29" pos:end="231:31"><expr pos:start="231:29" pos:end="231:31"><name pos:start="231:29" pos:end="231:31">ast</name></expr></argument>, <argument pos:start="231:34" pos:end="231:35"><expr pos:start="231:34" pos:end="231:35"><literal type="number" pos:start="231:34" pos:end="231:35">32</literal></expr></argument>, <argument pos:start="231:38" pos:end="231:38"><expr pos:start="231:38" pos:end="231:38"><literal type="number" pos:start="231:38" pos:end="231:38">1</literal></expr></argument>, <argument pos:start="231:41" pos:end="231:60"><expr pos:start="231:41" pos:end="231:60"><name pos:start="231:41" pos:end="231:60"><name pos:start="231:41" pos:end="231:43">ast</name><operator pos:start="231:44" pos:end="231:45">-&gt;</operator><name pos:start="231:46" pos:end="231:50">codec</name><operator pos:start="231:51" pos:end="231:52">-&gt;</operator><name pos:start="231:53" pos:end="231:60">bit_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="233:7" pos:end="239:5">else <block pos:start="233:12" pos:end="239:5">{<block_content pos:start="235:9" pos:end="237:55">

        <for pos:start="235:9" pos:end="237:55">for <control pos:start="235:13" pos:end="235:31">(<init pos:start="235:14" pos:end="235:19"><expr pos:start="235:14" pos:end="235:18"><name pos:start="235:14" pos:end="235:14">i</name> <operator pos:start="235:16" pos:end="235:16">=</operator> <literal type="number" pos:start="235:18" pos:end="235:18">0</literal></expr>;</init> <condition pos:start="235:21" pos:end="235:26"><expr pos:start="235:21" pos:end="235:25"><name pos:start="235:21" pos:end="235:21">i</name> <operator pos:start="235:23" pos:end="235:23">&lt;</operator> <literal type="number" pos:start="235:25" pos:end="235:25">3</literal></expr>;</condition> <incr pos:start="235:28" pos:end="235:30"><expr pos:start="235:28" pos:end="235:30"><name pos:start="235:28" pos:end="235:28">i</name><operator pos:start="235:29" pos:end="235:30">++</operator></expr></incr>)</control><block type="pseudo" pos:start="237:13" pos:end="237:55"><block_content pos:start="237:13" pos:end="237:55">

            <expr_stmt pos:start="237:13" pos:end="237:55"><expr pos:start="237:13" pos:end="237:54"><name pos:start="237:13" pos:end="237:17">error</name> <operator pos:start="237:19" pos:end="237:20">|=</operator> <call pos:start="237:22" pos:end="237:54"><name pos:start="237:22" pos:end="237:30">read_line</name><argument_list pos:start="237:31" pos:end="237:54">(<argument pos:start="237:32" pos:end="237:33"><expr pos:start="237:32" pos:end="237:33"><name pos:start="237:32" pos:end="237:33">pb</name></expr></argument>, <argument pos:start="237:36" pos:end="237:39"><expr pos:start="237:36" pos:end="237:39"><name pos:start="237:36" pos:end="237:39">line</name></expr></argument>, <argument pos:start="237:42" pos:end="237:53"><expr pos:start="237:42" pos:end="237:53"><sizeof pos:start="237:42" pos:end="237:53">sizeof<argument_list pos:start="237:48" pos:end="237:53">(<argument pos:start="237:49" pos:end="237:52"><expr pos:start="237:49" pos:end="237:52"><name pos:start="237:49" pos:end="237:52">line</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="243:5" pos:end="243:58"><expr pos:start="243:5" pos:end="243:57"><name pos:start="243:5" pos:end="243:25"><name pos:start="243:5" pos:end="243:7">rpl</name><operator pos:start="243:8" pos:end="243:9">-&gt;</operator><name pos:start="243:10" pos:end="243:25">frames_per_chunk</name></name> <operator pos:start="243:27" pos:end="243:27">=</operator> <call pos:start="243:29" pos:end="243:57"><name pos:start="243:29" pos:end="243:45">read_line_and_int</name><argument_list pos:start="243:46" pos:end="243:57">(<argument pos:start="243:47" pos:end="243:48"><expr pos:start="243:47" pos:end="243:48"><name pos:start="243:47" pos:end="243:48">pb</name></expr></argument>, <argument pos:start="243:51" pos:end="243:56"><expr pos:start="243:51" pos:end="243:56"><operator pos:start="243:51" pos:end="243:51">&amp;</operator><name pos:start="243:52" pos:end="243:56">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="243:61" pos:end="243:85">// video frames per chunk</comment>

    <if_stmt pos:start="245:5" pos:end="251:72"><if pos:start="245:5" pos:end="251:72">if <condition pos:start="245:8" pos:end="245:66">(<expr pos:start="245:9" pos:end="245:65"><name pos:start="245:9" pos:end="245:29"><name pos:start="245:9" pos:end="245:11">rpl</name><operator pos:start="245:12" pos:end="245:13">-&gt;</operator><name pos:start="245:14" pos:end="245:29">frames_per_chunk</name></name> <operator pos:start="245:31" pos:end="245:31">&gt;</operator> <literal type="number" pos:start="245:33" pos:end="245:33">1</literal> <operator pos:start="245:35" pos:end="245:36">&amp;&amp;</operator> <name pos:start="245:38" pos:end="245:58"><name pos:start="245:38" pos:end="245:40">vst</name><operator pos:start="245:41" pos:end="245:42">-&gt;</operator><name pos:start="245:43" pos:end="245:47">codec</name><operator pos:start="245:48" pos:end="245:49">-&gt;</operator><name pos:start="245:50" pos:end="245:58">codec_tag</name></name> <operator pos:start="245:60" pos:end="245:61">!=</operator> <literal type="number" pos:start="245:63" pos:end="245:65">124</literal></expr>)</condition><block type="pseudo" pos:start="247:9" pos:end="251:72"><block_content pos:start="247:9" pos:end="251:72">

        <expr_stmt pos:start="247:9" pos:end="251:72"><expr pos:start="247:9" pos:end="251:71"><call pos:start="247:9" pos:end="251:71"><name pos:start="247:9" pos:end="247:14">av_log</name><argument_list pos:start="247:15" pos:end="251:71">(<argument pos:start="247:16" pos:end="247:16"><expr pos:start="247:16" pos:end="247:16"><name pos:start="247:16" pos:end="247:16">s</name></expr></argument>, <argument pos:start="247:19" pos:end="247:32"><expr pos:start="247:19" pos:end="247:32"><name pos:start="247:19" pos:end="247:32">AV_LOG_WARNING</name></expr></argument>,

               <argument pos:start="249:16" pos:end="251:47"><expr pos:start="249:16" pos:end="251:47"><literal type="string" pos:start="249:16" pos:end="249:69">"Don't know how to split frames for video format %i. "</literal>

               <literal type="string" pos:start="251:16" pos:end="251:47">"Video stream will be broken!\n"</literal></expr></argument>, <argument pos:start="251:50" pos:end="251:70"><expr pos:start="251:50" pos:end="251:70"><name pos:start="251:50" pos:end="251:70"><name pos:start="251:50" pos:end="251:52">vst</name><operator pos:start="251:53" pos:end="251:54">-&gt;</operator><name pos:start="251:55" pos:end="251:59">codec</name><operator pos:start="251:60" pos:end="251:61">-&gt;</operator><name pos:start="251:62" pos:end="251:70">codec_tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="255:5" pos:end="255:53"><expr pos:start="255:5" pos:end="255:52"><name pos:start="255:5" pos:end="255:20">number_of_chunks</name> <operator pos:start="255:22" pos:end="255:22">=</operator> <call pos:start="255:24" pos:end="255:52"><name pos:start="255:24" pos:end="255:40">read_line_and_int</name><argument_list pos:start="255:41" pos:end="255:52">(<argument pos:start="255:42" pos:end="255:43"><expr pos:start="255:42" pos:end="255:43"><name pos:start="255:42" pos:end="255:43">pb</name></expr></argument>, <argument pos:start="255:46" pos:end="255:51"><expr pos:start="255:46" pos:end="255:51"><operator pos:start="255:46" pos:end="255:46">&amp;</operator><name pos:start="255:47" pos:end="255:51">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="255:56" pos:end="255:86">// number of chunks in the file</comment>

    <comment type="line" pos:start="257:5" pos:end="257:72">// The number in the header is actually the index of the last chunk.</comment>

    <expr_stmt pos:start="259:5" pos:end="259:23"><expr pos:start="259:5" pos:end="259:22"><name pos:start="259:5" pos:end="259:20">number_of_chunks</name><operator pos:start="259:21" pos:end="259:22">++</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="263:5" pos:end="263:47"><expr pos:start="263:5" pos:end="263:46"><name pos:start="263:5" pos:end="263:9">error</name> <operator pos:start="263:11" pos:end="263:12">|=</operator> <call pos:start="263:14" pos:end="263:46"><name pos:start="263:14" pos:end="263:22">read_line</name><argument_list pos:start="263:23" pos:end="263:46">(<argument pos:start="263:24" pos:end="263:25"><expr pos:start="263:24" pos:end="263:25"><name pos:start="263:24" pos:end="263:25">pb</name></expr></argument>, <argument pos:start="263:28" pos:end="263:31"><expr pos:start="263:28" pos:end="263:31"><name pos:start="263:28" pos:end="263:31">line</name></expr></argument>, <argument pos:start="263:34" pos:end="263:45"><expr pos:start="263:34" pos:end="263:45"><sizeof pos:start="263:34" pos:end="263:45">sizeof<argument_list pos:start="263:40" pos:end="263:45">(<argument pos:start="263:41" pos:end="263:44"><expr pos:start="263:41" pos:end="263:44"><name pos:start="263:41" pos:end="263:44">line</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="263:50" pos:end="263:78">// "even" chunk size in bytes</comment>

    <expr_stmt pos:start="265:5" pos:end="265:47"><expr pos:start="265:5" pos:end="265:46"><name pos:start="265:5" pos:end="265:9">error</name> <operator pos:start="265:11" pos:end="265:12">|=</operator> <call pos:start="265:14" pos:end="265:46"><name pos:start="265:14" pos:end="265:22">read_line</name><argument_list pos:start="265:23" pos:end="265:46">(<argument pos:start="265:24" pos:end="265:25"><expr pos:start="265:24" pos:end="265:25"><name pos:start="265:24" pos:end="265:25">pb</name></expr></argument>, <argument pos:start="265:28" pos:end="265:31"><expr pos:start="265:28" pos:end="265:31"><name pos:start="265:28" pos:end="265:31">line</name></expr></argument>, <argument pos:start="265:34" pos:end="265:45"><expr pos:start="265:34" pos:end="265:45"><sizeof pos:start="265:34" pos:end="265:45">sizeof<argument_list pos:start="265:40" pos:end="265:45">(<argument pos:start="265:41" pos:end="265:44"><expr pos:start="265:41" pos:end="265:44"><name pos:start="265:41" pos:end="265:44">line</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="265:50" pos:end="265:77">// "odd" chunk size in bytes</comment>

    <expr_stmt pos:start="267:5" pos:end="269:38"><expr pos:start="267:5" pos:end="269:37"><name pos:start="267:5" pos:end="267:24">chunk_catalog_offset</name> <operator pos:start="267:26" pos:end="267:26">=</operator>                       <comment type="line" pos:start="267:50" pos:end="267:81">// offset of the "chunk catalog"</comment>

        <call pos:start="269:9" pos:end="269:37"><name pos:start="269:9" pos:end="269:25">read_line_and_int</name><argument_list pos:start="269:26" pos:end="269:37">(<argument pos:start="269:27" pos:end="269:28"><expr pos:start="269:27" pos:end="269:28"><name pos:start="269:27" pos:end="269:28">pb</name></expr></argument>, <argument pos:start="269:31" pos:end="269:36"><expr pos:start="269:31" pos:end="269:36"><operator pos:start="269:31" pos:end="269:31">&amp;</operator><name pos:start="269:32" pos:end="269:36">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>           <comment type="line" pos:start="269:50" pos:end="269:66">//   (file index)</comment>

    <expr_stmt pos:start="271:5" pos:end="271:47"><expr pos:start="271:5" pos:end="271:46"><name pos:start="271:5" pos:end="271:9">error</name> <operator pos:start="271:11" pos:end="271:12">|=</operator> <call pos:start="271:14" pos:end="271:46"><name pos:start="271:14" pos:end="271:22">read_line</name><argument_list pos:start="271:23" pos:end="271:46">(<argument pos:start="271:24" pos:end="271:25"><expr pos:start="271:24" pos:end="271:25"><name pos:start="271:24" pos:end="271:25">pb</name></expr></argument>, <argument pos:start="271:28" pos:end="271:31"><expr pos:start="271:28" pos:end="271:31"><name pos:start="271:28" pos:end="271:31">line</name></expr></argument>, <argument pos:start="271:34" pos:end="271:45"><expr pos:start="271:34" pos:end="271:45"><sizeof pos:start="271:34" pos:end="271:45">sizeof<argument_list pos:start="271:40" pos:end="271:45">(<argument pos:start="271:41" pos:end="271:44"><expr pos:start="271:41" pos:end="271:44"><name pos:start="271:41" pos:end="271:44">line</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="271:50" pos:end="271:78">// offset to "helpful" sprite</comment>

    <expr_stmt pos:start="273:5" pos:end="273:47"><expr pos:start="273:5" pos:end="273:46"><name pos:start="273:5" pos:end="273:9">error</name> <operator pos:start="273:11" pos:end="273:12">|=</operator> <call pos:start="273:14" pos:end="273:46"><name pos:start="273:14" pos:end="273:22">read_line</name><argument_list pos:start="273:23" pos:end="273:46">(<argument pos:start="273:24" pos:end="273:25"><expr pos:start="273:24" pos:end="273:25"><name pos:start="273:24" pos:end="273:25">pb</name></expr></argument>, <argument pos:start="273:28" pos:end="273:31"><expr pos:start="273:28" pos:end="273:31"><name pos:start="273:28" pos:end="273:31">line</name></expr></argument>, <argument pos:start="273:34" pos:end="273:45"><expr pos:start="273:34" pos:end="273:45"><sizeof pos:start="273:34" pos:end="273:45">sizeof<argument_list pos:start="273:40" pos:end="273:45">(<argument pos:start="273:41" pos:end="273:44"><expr pos:start="273:41" pos:end="273:44"><name pos:start="273:41" pos:end="273:44">line</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="273:50" pos:end="273:76">// size of "helpful" sprite</comment>

    <expr_stmt pos:start="275:5" pos:end="275:47"><expr pos:start="275:5" pos:end="275:46"><name pos:start="275:5" pos:end="275:9">error</name> <operator pos:start="275:11" pos:end="275:12">|=</operator> <call pos:start="275:14" pos:end="275:46"><name pos:start="275:14" pos:end="275:22">read_line</name><argument_list pos:start="275:23" pos:end="275:46">(<argument pos:start="275:24" pos:end="275:25"><expr pos:start="275:24" pos:end="275:25"><name pos:start="275:24" pos:end="275:25">pb</name></expr></argument>, <argument pos:start="275:28" pos:end="275:31"><expr pos:start="275:28" pos:end="275:31"><name pos:start="275:28" pos:end="275:31">line</name></expr></argument>, <argument pos:start="275:34" pos:end="275:45"><expr pos:start="275:34" pos:end="275:45"><sizeof pos:start="275:34" pos:end="275:45">sizeof<argument_list pos:start="275:40" pos:end="275:45">(<argument pos:start="275:41" pos:end="275:44"><expr pos:start="275:41" pos:end="275:44"><name pos:start="275:41" pos:end="275:44">line</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="275:50" pos:end="275:76">// offset to key frame list</comment>



    <comment type="line" pos:start="279:5" pos:end="279:21">// Read the index</comment>

    <expr_stmt pos:start="281:5" pos:end="281:50"><expr pos:start="281:5" pos:end="281:49"><call pos:start="281:5" pos:end="281:49"><name pos:start="281:5" pos:end="281:13">avio_seek</name><argument_list pos:start="281:14" pos:end="281:49">(<argument pos:start="281:15" pos:end="281:16"><expr pos:start="281:15" pos:end="281:16"><name pos:start="281:15" pos:end="281:16">pb</name></expr></argument>, <argument pos:start="281:19" pos:end="281:38"><expr pos:start="281:19" pos:end="281:38"><name pos:start="281:19" pos:end="281:38">chunk_catalog_offset</name></expr></argument>, <argument pos:start="281:41" pos:end="281:48"><expr pos:start="281:41" pos:end="281:48"><name pos:start="281:41" pos:end="281:48">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="283:5" pos:end="283:25"><expr pos:start="283:5" pos:end="283:24"><name pos:start="283:5" pos:end="283:20">total_audio_size</name> <operator pos:start="283:22" pos:end="283:22">=</operator> <literal type="number" pos:start="283:24" pos:end="283:24">0</literal></expr>;</expr_stmt>

    <for pos:start="285:5" pos:end="309:5">for <control pos:start="285:9" pos:end="285:42">(<init pos:start="285:10" pos:end="285:15"><expr pos:start="285:10" pos:end="285:14"><name pos:start="285:10" pos:end="285:10">i</name> <operator pos:start="285:12" pos:end="285:12">=</operator> <literal type="number" pos:start="285:14" pos:end="285:14">0</literal></expr>;</init> <condition pos:start="285:17" pos:end="285:37"><expr pos:start="285:17" pos:end="285:36"><name pos:start="285:17" pos:end="285:17">i</name> <operator pos:start="285:19" pos:end="285:19">&lt;</operator> <name pos:start="285:21" pos:end="285:36">number_of_chunks</name></expr>;</condition> <incr pos:start="285:39" pos:end="285:41"><expr pos:start="285:39" pos:end="285:41"><name pos:start="285:39" pos:end="285:39">i</name><operator pos:start="285:40" pos:end="285:41">++</operator></expr></incr>)</control> <block pos:start="285:44" pos:end="309:5">{<block_content pos:start="287:9" pos:end="307:43">

        <decl_stmt pos:start="287:9" pos:end="287:47"><decl pos:start="287:9" pos:end="287:22"><type pos:start="287:9" pos:end="287:15"><name pos:start="287:9" pos:end="287:15">int64_t</name></type> <name pos:start="287:17" pos:end="287:22">offset</name></decl>, <decl pos:start="287:25" pos:end="287:34"><type ref="prev" pos:start="287:9" pos:end="287:15"/><name pos:start="287:25" pos:end="287:34">video_size</name></decl>, <decl pos:start="287:37" pos:end="287:46"><type ref="prev" pos:start="287:9" pos:end="287:15"/><name pos:start="287:37" pos:end="287:46">audio_size</name></decl>;</decl_stmt>

        <expr_stmt pos:start="289:9" pos:end="289:51"><expr pos:start="289:9" pos:end="289:50"><name pos:start="289:9" pos:end="289:13">error</name> <operator pos:start="289:15" pos:end="289:16">|=</operator> <call pos:start="289:18" pos:end="289:50"><name pos:start="289:18" pos:end="289:26">read_line</name><argument_list pos:start="289:27" pos:end="289:50">(<argument pos:start="289:28" pos:end="289:29"><expr pos:start="289:28" pos:end="289:29"><name pos:start="289:28" pos:end="289:29">pb</name></expr></argument>, <argument pos:start="289:32" pos:end="289:35"><expr pos:start="289:32" pos:end="289:35"><name pos:start="289:32" pos:end="289:35">line</name></expr></argument>, <argument pos:start="289:38" pos:end="289:49"><expr pos:start="289:38" pos:end="289:49"><sizeof pos:start="289:38" pos:end="289:49">sizeof<argument_list pos:start="289:44" pos:end="289:49">(<argument pos:start="289:45" pos:end="289:48"><expr pos:start="289:45" pos:end="289:48"><name pos:start="289:45" pos:end="289:48">line</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="291:9" pos:end="295:23"><if pos:start="291:9" pos:end="295:23">if <condition pos:start="291:12" pos:end="293:59">(<expr pos:start="291:13" pos:end="293:58"><literal type="number" pos:start="291:13" pos:end="291:13">3</literal> <operator pos:start="291:15" pos:end="291:16">!=</operator> <call pos:start="291:18" pos:end="293:58"><name pos:start="291:18" pos:end="291:23">sscanf</name><argument_list pos:start="291:24" pos:end="293:58">(<argument pos:start="291:25" pos:end="291:28"><expr pos:start="291:25" pos:end="291:28"><name pos:start="291:25" pos:end="291:28">line</name></expr></argument>, <argument pos:start="291:31" pos:end="291:63"><expr pos:start="291:31" pos:end="291:63"><literal type="string" pos:start="291:31" pos:end="291:33">"%"</literal><name pos:start="291:34" pos:end="291:39">PRId64</name><literal type="string" pos:start="291:40" pos:end="291:45">" , %"</literal><name pos:start="291:46" pos:end="291:51">PRId64</name><literal type="string" pos:start="291:52" pos:end="291:57">" ; %"</literal><name pos:start="291:58" pos:end="291:63">PRId64</name></expr></argument>,

                        <argument pos:start="293:25" pos:end="293:31"><expr pos:start="293:25" pos:end="293:31"><operator pos:start="293:25" pos:end="293:25">&amp;</operator><name pos:start="293:26" pos:end="293:31">offset</name></expr></argument>, <argument pos:start="293:34" pos:end="293:44"><expr pos:start="293:34" pos:end="293:44"><operator pos:start="293:34" pos:end="293:34">&amp;</operator><name pos:start="293:35" pos:end="293:44">video_size</name></expr></argument>, <argument pos:start="293:47" pos:end="293:57"><expr pos:start="293:47" pos:end="293:57"><operator pos:start="293:47" pos:end="293:47">&amp;</operator><name pos:start="293:48" pos:end="293:57">audio_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="295:13" pos:end="295:23"><block_content pos:start="295:13" pos:end="295:23">

            <expr_stmt pos:start="295:13" pos:end="295:23"><expr pos:start="295:13" pos:end="295:22"><name pos:start="295:13" pos:end="295:17">error</name> <operator pos:start="295:19" pos:end="295:19">=</operator> <operator pos:start="295:21" pos:end="295:21">-</operator><literal type="number" pos:start="295:22" pos:end="295:22">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="297:9" pos:end="299:65"><expr pos:start="297:9" pos:end="299:64"><call pos:start="297:9" pos:end="299:64"><name pos:start="297:9" pos:end="297:26">av_add_index_entry</name><argument_list pos:start="297:27" pos:end="299:64">(<argument pos:start="297:28" pos:end="297:30"><expr pos:start="297:28" pos:end="297:30"><name pos:start="297:28" pos:end="297:30">vst</name></expr></argument>, <argument pos:start="297:33" pos:end="297:38"><expr pos:start="297:33" pos:end="297:38"><name pos:start="297:33" pos:end="297:38">offset</name></expr></argument>, <argument pos:start="297:41" pos:end="297:65"><expr pos:start="297:41" pos:end="297:65"><name pos:start="297:41" pos:end="297:41">i</name> <operator pos:start="297:43" pos:end="297:43">*</operator> <name pos:start="297:45" pos:end="297:65"><name pos:start="297:45" pos:end="297:47">rpl</name><operator pos:start="297:48" pos:end="297:49">-&gt;</operator><name pos:start="297:50" pos:end="297:65">frames_per_chunk</name></name></expr></argument>,

                           <argument pos:start="299:28" pos:end="299:37"><expr pos:start="299:28" pos:end="299:37"><name pos:start="299:28" pos:end="299:37">video_size</name></expr></argument>, <argument pos:start="299:40" pos:end="299:60"><expr pos:start="299:40" pos:end="299:60"><name pos:start="299:40" pos:end="299:60"><name pos:start="299:40" pos:end="299:42">rpl</name><operator pos:start="299:43" pos:end="299:44">-&gt;</operator><name pos:start="299:45" pos:end="299:60">frames_per_chunk</name></name></expr></argument>, <argument pos:start="299:63" pos:end="299:63"><expr pos:start="299:63" pos:end="299:63"><literal type="number" pos:start="299:63" pos:end="299:63">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="301:9" pos:end="305:62"><if pos:start="301:9" pos:end="305:62">if <condition pos:start="301:12" pos:end="301:16">(<expr pos:start="301:13" pos:end="301:15"><name pos:start="301:13" pos:end="301:15">ast</name></expr>)</condition><block type="pseudo" pos:start="303:13" pos:end="305:62"><block_content pos:start="303:13" pos:end="305:62">

            <expr_stmt pos:start="303:13" pos:end="305:62"><expr pos:start="303:13" pos:end="305:61"><call pos:start="303:13" pos:end="305:61"><name pos:start="303:13" pos:end="303:30">av_add_index_entry</name><argument_list pos:start="303:31" pos:end="305:61">(<argument pos:start="303:32" pos:end="303:34"><expr pos:start="303:32" pos:end="303:34"><name pos:start="303:32" pos:end="303:34">ast</name></expr></argument>, <argument pos:start="303:37" pos:end="303:55"><expr pos:start="303:37" pos:end="303:55"><name pos:start="303:37" pos:end="303:42">offset</name> <operator pos:start="303:44" pos:end="303:44">+</operator> <name pos:start="303:46" pos:end="303:55">video_size</name></expr></argument>, <argument pos:start="303:58" pos:end="303:73"><expr pos:start="303:58" pos:end="303:73"><name pos:start="303:58" pos:end="303:73">total_audio_size</name></expr></argument>,

                               <argument pos:start="305:32" pos:end="305:41"><expr pos:start="305:32" pos:end="305:41"><name pos:start="305:32" pos:end="305:41">audio_size</name></expr></argument>, <argument pos:start="305:44" pos:end="305:57"><expr pos:start="305:44" pos:end="305:57"><name pos:start="305:44" pos:end="305:53">audio_size</name> <operator pos:start="305:55" pos:end="305:55">*</operator> <literal type="number" pos:start="305:57" pos:end="305:57">8</literal></expr></argument>, <argument pos:start="305:60" pos:end="305:60"><expr pos:start="305:60" pos:end="305:60"><literal type="number" pos:start="305:60" pos:end="305:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="307:9" pos:end="307:43"><expr pos:start="307:9" pos:end="307:42"><name pos:start="307:9" pos:end="307:24">total_audio_size</name> <operator pos:start="307:26" pos:end="307:27">+=</operator> <name pos:start="307:29" pos:end="307:38">audio_size</name> <operator pos:start="307:40" pos:end="307:40">*</operator> <literal type="number" pos:start="307:42" pos:end="307:42">8</literal></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="313:5" pos:end="313:35"><if pos:start="313:5" pos:end="313:35">if <condition pos:start="313:8" pos:end="313:14">(<expr pos:start="313:9" pos:end="313:13"><name pos:start="313:9" pos:end="313:13">error</name></expr>)</condition><block type="pseudo" pos:start="313:16" pos:end="313:35"><block_content pos:start="313:16" pos:end="313:35"> <return pos:start="313:16" pos:end="313:35">return <expr pos:start="313:23" pos:end="313:34"><call pos:start="313:23" pos:end="313:34"><name pos:start="313:23" pos:end="313:29">AVERROR</name><argument_list pos:start="313:30" pos:end="313:34">(<argument pos:start="313:31" pos:end="313:33"><expr pos:start="313:31" pos:end="313:33"><name pos:start="313:31" pos:end="313:33">EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <return pos:start="317:5" pos:end="317:13">return <expr pos:start="317:12" pos:end="317:12"><literal type="number" pos:start="317:12" pos:end="317:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
