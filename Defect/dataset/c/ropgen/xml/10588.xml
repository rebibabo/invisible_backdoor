<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10588.c" pos:tabs="8"><function pos:start="1:1" pos:end="97:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:19">aac_sync</name><parameter_list pos:start="1:20" pos:end="3:52">(<parameter pos:start="1:21" pos:end="1:34"><decl pos:start="1:21" pos:end="1:34"><type pos:start="1:21" pos:end="1:34"><name pos:start="1:21" pos:end="1:28">uint64_t</name></type> <name pos:start="1:30" pos:end="1:34">state</name></decl></parameter>, <parameter pos:start="1:37" pos:end="1:64"><decl pos:start="1:37" pos:end="1:64"><type pos:start="1:37" pos:end="1:64"><name pos:start="1:37" pos:end="1:54">AACAC3ParseContext</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:64">hdr_info</name></decl></parameter>,

        <parameter pos:start="3:9" pos:end="3:29"><decl pos:start="3:9" pos:end="3:29"><type pos:start="3:9" pos:end="3:29"><name pos:start="3:9" pos:end="3:11">int</name> <modifier pos:start="3:13" pos:end="3:13">*</modifier></type><name pos:start="3:14" pos:end="3:29">need_next_header</name></decl></parameter>, <parameter pos:start="3:32" pos:end="3:51"><decl pos:start="3:32" pos:end="3:51"><type pos:start="3:32" pos:end="3:51"><name pos:start="3:32" pos:end="3:34">int</name> <modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:51">new_frame_start</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="97:1">{<block_content pos:start="7:5" pos:end="95:16">

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:17">GetBitContext</name></type> <name pos:start="7:19" pos:end="7:22">bits</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:26"><decl pos:start="9:5" pos:end="9:12"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:12">size</name></decl>, <decl pos:start="9:15" pos:end="9:17"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:15" pos:end="9:17">rdb</name></decl>, <decl pos:start="9:20" pos:end="9:21"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:20" pos:end="9:21">ch</name></decl>, <decl pos:start="9:24" pos:end="9:25"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:24" pos:end="9:25">sr</name></decl>;</decl_stmt>

    <union pos:start="11:5" pos:end="17:10">union <block pos:start="11:11" pos:end="17:5">{

        <decl_stmt pos:start="13:9" pos:end="13:21"><decl pos:start="13:9" pos:end="13:20"><type pos:start="13:9" pos:end="13:16"><name pos:start="13:9" pos:end="13:16">uint64_t</name></type> <name pos:start="13:18" pos:end="13:20">u64</name></decl>;</decl_stmt>

        <decl_stmt pos:start="15:9" pos:end="15:23"><decl pos:start="15:9" pos:end="15:22"><type pos:start="15:9" pos:end="15:15"><name pos:start="15:9" pos:end="15:15">uint8_t</name></type>  <name pos:start="15:18" pos:end="15:22"><name pos:start="15:18" pos:end="15:19">u8</name><index pos:start="15:20" pos:end="15:22">[<expr pos:start="15:21" pos:end="15:21"><literal type="number" pos:start="15:21" pos:end="15:21">8</literal></expr>]</index></name></decl>;</decl_stmt>

    }</block> <decl pos:start="17:7" pos:end="17:9"><name pos:start="17:7" pos:end="17:9">tmp</name></decl>;</union>



    <expr_stmt pos:start="21:5" pos:end="21:30"><expr pos:start="21:5" pos:end="21:29"><name pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:7">tmp</name><operator pos:start="21:8" pos:end="21:8">.</operator><name pos:start="21:9" pos:end="21:11">u64</name></name> <operator pos:start="21:13" pos:end="21:13">=</operator> <call pos:start="21:15" pos:end="21:29"><name pos:start="21:15" pos:end="21:22">be2me_64</name><argument_list pos:start="21:23" pos:end="21:29">(<argument pos:start="21:24" pos:end="21:28"><expr pos:start="21:24" pos:end="21:28"><name pos:start="21:24" pos:end="21:28">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:72"><expr pos:start="23:5" pos:end="23:71"><call pos:start="23:5" pos:end="23:71"><name pos:start="23:5" pos:end="23:17">init_get_bits</name><argument_list pos:start="23:18" pos:end="23:71">(<argument pos:start="23:19" pos:end="23:23"><expr pos:start="23:19" pos:end="23:23"><operator pos:start="23:19" pos:end="23:19">&amp;</operator><name pos:start="23:20" pos:end="23:23">bits</name></expr></argument>, <argument pos:start="23:26" pos:end="23:49"><expr pos:start="23:26" pos:end="23:49"><name pos:start="23:26" pos:end="23:31"><name pos:start="23:26" pos:end="23:28">tmp</name><operator pos:start="23:29" pos:end="23:29">.</operator><name pos:start="23:30" pos:end="23:31">u8</name></name><operator pos:start="23:32" pos:end="23:32">+</operator><literal type="number" pos:start="23:33" pos:end="23:34">8</literal><operator pos:start="23:34" pos:end="23:34">-</operator><name pos:start="23:35" pos:end="23:49">AAC_HEADER_SIZE</name></expr></argument>, <argument pos:start="23:52" pos:end="23:70"><expr pos:start="23:52" pos:end="23:70"><name pos:start="23:52" pos:end="23:66">AAC_HEADER_SIZE</name> <operator pos:start="23:68" pos:end="23:68">*</operator> <literal type="number" pos:start="23:70" pos:end="23:70">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="27:5" pos:end="29:17"><if pos:start="27:5" pos:end="29:17">if<condition pos:start="27:7" pos:end="27:36">(<expr pos:start="27:8" pos:end="27:35"><call pos:start="27:8" pos:end="27:26"><name pos:start="27:8" pos:end="27:15">get_bits</name><argument_list pos:start="27:16" pos:end="27:26">(<argument pos:start="27:17" pos:end="27:21"><expr pos:start="27:17" pos:end="27:21"><operator pos:start="27:17" pos:end="27:17">&amp;</operator><name pos:start="27:18" pos:end="27:21">bits</name></expr></argument>, <argument pos:start="27:24" pos:end="27:25"><expr pos:start="27:24" pos:end="27:25"><literal type="number" pos:start="27:24" pos:end="27:25">12</literal></expr></argument>)</argument_list></call> <operator pos:start="27:28" pos:end="27:29">!=</operator> <literal type="number" pos:start="27:31" pos:end="27:35">0xfff</literal></expr>)</condition><block type="pseudo" pos:start="29:9" pos:end="29:17"><block_content pos:start="29:9" pos:end="29:17">

        <return pos:start="29:9" pos:end="29:17">return <expr pos:start="29:16" pos:end="29:16"><literal type="number" pos:start="29:16" pos:end="29:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:22"><expr pos:start="33:5" pos:end="33:21"><call pos:start="33:5" pos:end="33:21"><name pos:start="33:5" pos:end="33:14">skip_bits1</name><argument_list pos:start="33:15" pos:end="33:21">(<argument pos:start="33:16" pos:end="33:20"><expr pos:start="33:16" pos:end="33:20"><operator pos:start="33:16" pos:end="33:16">&amp;</operator><name pos:start="33:17" pos:end="33:20">bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>          <comment type="block" pos:start="33:33" pos:end="33:40">/* id */</comment>

    <expr_stmt pos:start="35:5" pos:end="35:24"><expr pos:start="35:5" pos:end="35:23"><call pos:start="35:5" pos:end="35:23"><name pos:start="35:5" pos:end="35:13">skip_bits</name><argument_list pos:start="35:14" pos:end="35:23">(<argument pos:start="35:15" pos:end="35:19"><expr pos:start="35:15" pos:end="35:19"><operator pos:start="35:15" pos:end="35:15">&amp;</operator><name pos:start="35:16" pos:end="35:19">bits</name></expr></argument>, <argument pos:start="35:22" pos:end="35:22"><expr pos:start="35:22" pos:end="35:22"><literal type="number" pos:start="35:22" pos:end="35:22">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>        <comment type="block" pos:start="35:33" pos:end="35:43">/* layer */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:22"><expr pos:start="37:5" pos:end="37:21"><call pos:start="37:5" pos:end="37:21"><name pos:start="37:5" pos:end="37:14">skip_bits1</name><argument_list pos:start="37:15" pos:end="37:21">(<argument pos:start="37:16" pos:end="37:20"><expr pos:start="37:16" pos:end="37:20"><operator pos:start="37:16" pos:end="37:16">&amp;</operator><name pos:start="37:17" pos:end="37:20">bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>          <comment type="block" pos:start="37:33" pos:end="37:55">/* protection_absent */</comment>

    <expr_stmt pos:start="39:5" pos:end="39:24"><expr pos:start="39:5" pos:end="39:23"><call pos:start="39:5" pos:end="39:23"><name pos:start="39:5" pos:end="39:13">skip_bits</name><argument_list pos:start="39:14" pos:end="39:23">(<argument pos:start="39:15" pos:end="39:19"><expr pos:start="39:15" pos:end="39:19"><operator pos:start="39:15" pos:end="39:15">&amp;</operator><name pos:start="39:16" pos:end="39:19">bits</name></expr></argument>, <argument pos:start="39:22" pos:end="39:22"><expr pos:start="39:22" pos:end="39:22"><literal type="number" pos:start="39:22" pos:end="39:22">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>        <comment type="block" pos:start="39:33" pos:end="39:56">/* profile_objecttype */</comment>

    <expr_stmt pos:start="41:5" pos:end="41:28"><expr pos:start="41:5" pos:end="41:27"><name pos:start="41:5" pos:end="41:6">sr</name> <operator pos:start="41:8" pos:end="41:8">=</operator> <call pos:start="41:10" pos:end="41:27"><name pos:start="41:10" pos:end="41:17">get_bits</name><argument_list pos:start="41:18" pos:end="41:27">(<argument pos:start="41:19" pos:end="41:23"><expr pos:start="41:19" pos:end="41:23"><operator pos:start="41:19" pos:end="41:19">&amp;</operator><name pos:start="41:20" pos:end="41:23">bits</name></expr></argument>, <argument pos:start="41:26" pos:end="41:26"><expr pos:start="41:26" pos:end="41:26"><literal type="number" pos:start="41:26" pos:end="41:26">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="block" pos:start="41:33" pos:end="41:60">/* sample_frequency_index */</comment>

    <if_stmt pos:start="43:5" pos:end="45:17"><if pos:start="43:5" pos:end="45:17">if<condition pos:start="43:7" pos:end="43:39">(<expr pos:start="43:8" pos:end="43:38"><operator pos:start="43:8" pos:end="43:8">!</operator><name pos:start="43:9" pos:end="43:38"><name pos:start="43:9" pos:end="43:34">ff_mpeg4audio_sample_rates</name><index pos:start="43:35" pos:end="43:38">[<expr pos:start="43:36" pos:end="43:37"><name pos:start="43:36" pos:end="43:37">sr</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="45:9" pos:end="45:17"><block_content pos:start="45:9" pos:end="45:17">

        <return pos:start="45:9" pos:end="45:17">return <expr pos:start="45:16" pos:end="45:16"><literal type="number" pos:start="45:16" pos:end="45:16">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:22"><expr pos:start="47:5" pos:end="47:21"><call pos:start="47:5" pos:end="47:21"><name pos:start="47:5" pos:end="47:14">skip_bits1</name><argument_list pos:start="47:15" pos:end="47:21">(<argument pos:start="47:16" pos:end="47:20"><expr pos:start="47:16" pos:end="47:20"><operator pos:start="47:16" pos:end="47:16">&amp;</operator><name pos:start="47:17" pos:end="47:20">bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>          <comment type="block" pos:start="47:33" pos:end="47:49">/* private_bit */</comment>

    <expr_stmt pos:start="49:5" pos:end="49:28"><expr pos:start="49:5" pos:end="49:27"><name pos:start="49:5" pos:end="49:6">ch</name> <operator pos:start="49:8" pos:end="49:8">=</operator> <call pos:start="49:10" pos:end="49:27"><name pos:start="49:10" pos:end="49:17">get_bits</name><argument_list pos:start="49:18" pos:end="49:27">(<argument pos:start="49:19" pos:end="49:23"><expr pos:start="49:19" pos:end="49:23"><operator pos:start="49:19" pos:end="49:19">&amp;</operator><name pos:start="49:20" pos:end="49:23">bits</name></expr></argument>, <argument pos:start="49:26" pos:end="49:26"><expr pos:start="49:26" pos:end="49:26"><literal type="number" pos:start="49:26" pos:end="49:26">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="block" pos:start="49:33" pos:end="49:59">/* channel_configuration */</comment>

    <if_stmt pos:start="51:5" pos:end="53:17"><if pos:start="51:5" pos:end="53:17">if<condition pos:start="51:7" pos:end="51:35">(<expr pos:start="51:8" pos:end="51:34"><operator pos:start="51:8" pos:end="51:8">!</operator><name pos:start="51:9" pos:end="51:34"><name pos:start="51:9" pos:end="51:30">ff_mpeg4audio_channels</name><index pos:start="51:31" pos:end="51:34">[<expr pos:start="51:32" pos:end="51:33"><name pos:start="51:32" pos:end="51:33">ch</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="53:9" pos:end="53:17"><block_content pos:start="53:9" pos:end="53:17">

        <return pos:start="53:9" pos:end="53:17">return <expr pos:start="53:16" pos:end="53:16"><literal type="number" pos:start="53:16" pos:end="53:16">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:22"><expr pos:start="55:5" pos:end="55:21"><call pos:start="55:5" pos:end="55:21"><name pos:start="55:5" pos:end="55:14">skip_bits1</name><argument_list pos:start="55:15" pos:end="55:21">(<argument pos:start="55:16" pos:end="55:20"><expr pos:start="55:16" pos:end="55:20"><operator pos:start="55:16" pos:end="55:16">&amp;</operator><name pos:start="55:17" pos:end="55:20">bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>          <comment type="block" pos:start="55:33" pos:end="55:51">/* original/copy */</comment>

    <expr_stmt pos:start="57:5" pos:end="57:22"><expr pos:start="57:5" pos:end="57:21"><call pos:start="57:5" pos:end="57:21"><name pos:start="57:5" pos:end="57:14">skip_bits1</name><argument_list pos:start="57:15" pos:end="57:21">(<argument pos:start="57:16" pos:end="57:20"><expr pos:start="57:16" pos:end="57:20"><operator pos:start="57:16" pos:end="57:16">&amp;</operator><name pos:start="57:17" pos:end="57:20">bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>          <comment type="block" pos:start="57:33" pos:end="57:42">/* home */</comment>



    <comment type="block" pos:start="61:5" pos:end="61:30">/* adts_variable_header */</comment>

    <expr_stmt pos:start="63:5" pos:end="63:22"><expr pos:start="63:5" pos:end="63:21"><call pos:start="63:5" pos:end="63:21"><name pos:start="63:5" pos:end="63:14">skip_bits1</name><argument_list pos:start="63:15" pos:end="63:21">(<argument pos:start="63:16" pos:end="63:20"><expr pos:start="63:16" pos:end="63:20"><operator pos:start="63:16" pos:end="63:16">&amp;</operator><name pos:start="63:17" pos:end="63:20">bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>          <comment type="block" pos:start="63:33" pos:end="63:66">/* copyright_identification_bit */</comment>

    <expr_stmt pos:start="65:5" pos:end="65:22"><expr pos:start="65:5" pos:end="65:21"><call pos:start="65:5" pos:end="65:21"><name pos:start="65:5" pos:end="65:14">skip_bits1</name><argument_list pos:start="65:15" pos:end="65:21">(<argument pos:start="65:16" pos:end="65:20"><expr pos:start="65:16" pos:end="65:20"><operator pos:start="65:16" pos:end="65:16">&amp;</operator><name pos:start="65:17" pos:end="65:20">bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>          <comment type="block" pos:start="65:33" pos:end="65:68">/* copyright_identification_start */</comment>

    <expr_stmt pos:start="67:5" pos:end="67:31"><expr pos:start="67:5" pos:end="67:30"><name pos:start="67:5" pos:end="67:8">size</name> <operator pos:start="67:10" pos:end="67:10">=</operator> <call pos:start="67:12" pos:end="67:30"><name pos:start="67:12" pos:end="67:19">get_bits</name><argument_list pos:start="67:20" pos:end="67:30">(<argument pos:start="67:21" pos:end="67:25"><expr pos:start="67:21" pos:end="67:25"><operator pos:start="67:21" pos:end="67:21">&amp;</operator><name pos:start="67:22" pos:end="67:25">bits</name></expr></argument>, <argument pos:start="67:28" pos:end="67:29"><expr pos:start="67:28" pos:end="67:29"><literal type="number" pos:start="67:28" pos:end="67:29">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="67:33" pos:end="67:54">/* aac_frame_length */</comment>

    <if_stmt pos:start="69:5" pos:end="71:17"><if pos:start="69:5" pos:end="71:17">if<condition pos:start="69:7" pos:end="69:30">(<expr pos:start="69:8" pos:end="69:29"><name pos:start="69:8" pos:end="69:11">size</name> <operator pos:start="69:13" pos:end="69:13">&lt;</operator> <name pos:start="69:15" pos:end="69:29">AAC_HEADER_SIZE</name></expr>)</condition><block type="pseudo" pos:start="71:9" pos:end="71:17"><block_content pos:start="71:9" pos:end="71:17">

        <return pos:start="71:9" pos:end="71:17">return <expr pos:start="71:16" pos:end="71:16"><literal type="number" pos:start="71:16" pos:end="71:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="75:5" pos:end="75:25"><expr pos:start="75:5" pos:end="75:24"><call pos:start="75:5" pos:end="75:24"><name pos:start="75:5" pos:end="75:13">skip_bits</name><argument_list pos:start="75:14" pos:end="75:24">(<argument pos:start="75:15" pos:end="75:19"><expr pos:start="75:15" pos:end="75:19"><operator pos:start="75:15" pos:end="75:15">&amp;</operator><name pos:start="75:16" pos:end="75:19">bits</name></expr></argument>, <argument pos:start="75:22" pos:end="75:23"><expr pos:start="75:22" pos:end="75:23"><literal type="number" pos:start="75:22" pos:end="75:23">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>       <comment type="block" pos:start="75:33" pos:end="75:58">/* adts_buffer_fullness */</comment>

    <expr_stmt pos:start="77:5" pos:end="77:29"><expr pos:start="77:5" pos:end="77:28"><name pos:start="77:5" pos:end="77:7">rdb</name> <operator pos:start="77:9" pos:end="77:9">=</operator> <call pos:start="77:11" pos:end="77:28"><name pos:start="77:11" pos:end="77:18">get_bits</name><argument_list pos:start="77:19" pos:end="77:28">(<argument pos:start="77:20" pos:end="77:24"><expr pos:start="77:20" pos:end="77:24"><operator pos:start="77:20" pos:end="77:20">&amp;</operator><name pos:start="77:21" pos:end="77:24">bits</name></expr></argument>, <argument pos:start="77:27" pos:end="77:27"><expr pos:start="77:27" pos:end="77:27"><literal type="number" pos:start="77:27" pos:end="77:27">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block" pos:start="77:33" pos:end="77:72">/* number_of_raw_data_blocks_in_frame */</comment>



    <expr_stmt pos:start="81:5" pos:end="81:52"><expr pos:start="81:5" pos:end="81:51"><name pos:start="81:5" pos:end="81:22"><name pos:start="81:5" pos:end="81:12">hdr_info</name><operator pos:start="81:13" pos:end="81:14">-&gt;</operator><name pos:start="81:15" pos:end="81:22">channels</name></name> <operator pos:start="81:24" pos:end="81:24">=</operator> <name pos:start="81:26" pos:end="81:51"><name pos:start="81:26" pos:end="81:47">ff_mpeg4audio_channels</name><index pos:start="81:48" pos:end="81:51">[<expr pos:start="81:49" pos:end="81:50"><name pos:start="81:49" pos:end="81:50">ch</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:59"><expr pos:start="83:5" pos:end="83:58"><name pos:start="83:5" pos:end="83:25"><name pos:start="83:5" pos:end="83:12">hdr_info</name><operator pos:start="83:13" pos:end="83:14">-&gt;</operator><name pos:start="83:15" pos:end="83:25">sample_rate</name></name> <operator pos:start="83:27" pos:end="83:27">=</operator> <name pos:start="83:29" pos:end="83:58"><name pos:start="83:29" pos:end="83:54">ff_mpeg4audio_sample_rates</name><index pos:start="83:55" pos:end="83:58">[<expr pos:start="83:56" pos:end="83:57"><name pos:start="83:56" pos:end="83:57">sr</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:41"><expr pos:start="85:5" pos:end="85:40"><name pos:start="85:5" pos:end="85:21"><name pos:start="85:5" pos:end="85:12">hdr_info</name><operator pos:start="85:13" pos:end="85:14">-&gt;</operator><name pos:start="85:15" pos:end="85:21">samples</name></name> <operator pos:start="85:23" pos:end="85:23">=</operator> <operator pos:start="85:25" pos:end="85:25">(</operator><name pos:start="85:26" pos:end="85:28">rdb</name> <operator pos:start="85:30" pos:end="85:30">+</operator> <literal type="number" pos:start="85:32" pos:end="85:32">1</literal><operator pos:start="85:33" pos:end="85:33">)</operator> <operator pos:start="85:35" pos:end="85:35">*</operator> <literal type="number" pos:start="85:37" pos:end="85:40">1024</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:78"><expr pos:start="87:5" pos:end="87:77"><name pos:start="87:5" pos:end="87:22"><name pos:start="87:5" pos:end="87:12">hdr_info</name><operator pos:start="87:13" pos:end="87:14">-&gt;</operator><name pos:start="87:15" pos:end="87:22">bit_rate</name></name> <operator pos:start="87:24" pos:end="87:24">=</operator> <name pos:start="87:26" pos:end="87:29">size</name> <operator pos:start="87:31" pos:end="87:31">*</operator> <literal type="number" pos:start="87:33" pos:end="87:33">8</literal> <operator pos:start="87:35" pos:end="87:35">*</operator> <name pos:start="87:37" pos:end="87:57"><name pos:start="87:37" pos:end="87:44">hdr_info</name><operator pos:start="87:45" pos:end="87:46">-&gt;</operator><name pos:start="87:47" pos:end="87:57">sample_rate</name></name> <operator pos:start="87:59" pos:end="87:59">/</operator> <name pos:start="87:61" pos:end="87:77"><name pos:start="87:61" pos:end="87:68">hdr_info</name><operator pos:start="87:69" pos:end="87:70">-&gt;</operator><name pos:start="87:71" pos:end="87:77">samples</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="91:5" pos:end="91:26"><expr pos:start="91:5" pos:end="91:25"><operator pos:start="91:5" pos:end="91:5">*</operator><name pos:start="91:6" pos:end="91:21">need_next_header</name> <operator pos:start="91:23" pos:end="91:23">=</operator> <literal type="number" pos:start="91:25" pos:end="91:25">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:26"><expr pos:start="93:5" pos:end="93:25"><operator pos:start="93:5" pos:end="93:5">*</operator><name pos:start="93:6" pos:end="93:20">new_frame_start</name>  <operator pos:start="93:23" pos:end="93:23">=</operator> <literal type="number" pos:start="93:25" pos:end="93:25">1</literal></expr>;</expr_stmt>

    <return pos:start="95:5" pos:end="95:16">return <expr pos:start="95:12" pos:end="95:15"><name pos:start="95:12" pos:end="95:15">size</name></expr>;</return>

</block_content>}</block></function>
</unit>
