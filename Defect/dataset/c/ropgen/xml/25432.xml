<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25432.c" pos:tabs="8"><function pos:start="1:1" pos:end="153:15"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">alloc_refcount_block</name><parameter_list pos:start="1:32" pos:end="2:77">(<parameter pos:start="1:33" pos:end="1:52"><decl pos:start="1:33" pos:end="1:52"><type pos:start="1:33" pos:end="1:52"><name pos:start="1:33" pos:end="1:48">BlockDriverState</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:52">bs</name></decl></parameter>,
                                <parameter pos:start="2:33" pos:end="2:53"><decl pos:start="2:33" pos:end="2:53"><type pos:start="2:33" pos:end="2:53"><name pos:start="2:33" pos:end="2:39">int64_t</name></type> <name pos:start="2:41" pos:end="2:53">cluster_index</name></decl></parameter>, <parameter pos:start="2:56" pos:end="2:76"><decl pos:start="2:56" pos:end="2:76"><type pos:start="2:56" pos:end="2:76"><name pos:start="2:56" pos:end="2:59">void</name> <modifier pos:start="2:61" pos:end="2:61">*</modifier><modifier pos:start="2:62" pos:end="2:62">*</modifier></type><name pos:start="2:63" pos:end="2:76">refcount_block</name></decl></parameter>)</parameter_list>
<block pos:start="3:1" pos:end="153:15">{<block_content pos:start="4:5" pos:end="153:15">
    <decl_stmt pos:start="4:5" pos:end="4:35"><decl pos:start="4:5" pos:end="4:34"><type pos:start="4:5" pos:end="4:20"><name pos:start="4:5" pos:end="4:18">BDRVQcow2State</name> <modifier pos:start="4:20" pos:end="4:20">*</modifier></type><name pos:start="4:21" pos:end="4:21">s</name> <init pos:start="4:23" pos:end="4:34">= <expr pos:start="4:25" pos:end="4:34"><name pos:start="4:25" pos:end="4:34"><name pos:start="4:25" pos:end="4:26">bs</name><operator pos:start="4:27" pos:end="4:28">-&gt;</operator><name pos:start="4:29" pos:end="4:34">opaque</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:38"><decl pos:start="5:5" pos:end="5:37"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:12">unsigned</name> <name pos:start="5:14" pos:end="5:16">int</name></type> <name pos:start="5:18" pos:end="5:37">refcount_table_index</name></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:16"><decl pos:start="6:5" pos:end="6:15"><type pos:start="6:5" pos:end="6:11"><name pos:start="6:5" pos:end="6:11">int64_t</name></type> <name pos:start="6:13" pos:end="6:15">ret</name></decl>;</decl_stmt>
    <expr_stmt pos:start="7:5" pos:end="7:50"><expr pos:start="7:5" pos:end="7:49"><call pos:start="7:5" pos:end="7:49"><name pos:start="7:5" pos:end="7:16">BLKDBG_EVENT</name><argument_list pos:start="7:17" pos:end="7:49">(<argument pos:start="7:18" pos:end="7:25"><expr pos:start="7:18" pos:end="7:25"><name pos:start="7:18" pos:end="7:25"><name pos:start="7:18" pos:end="7:19">bs</name><operator pos:start="7:20" pos:end="7:21">-&gt;</operator><name pos:start="7:22" pos:end="7:25">file</name></name></expr></argument>, <argument pos:start="7:28" pos:end="7:48"><expr pos:start="7:28" pos:end="7:48"><name pos:start="7:28" pos:end="7:48">BLKDBG_REFBLOCK_ALLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="8:5" pos:end="8:55">/* Find the refcount block for the given cluster */</comment>
    <expr_stmt pos:start="9:5" pos:end="9:67"><expr pos:start="9:5" pos:end="9:66"><name pos:start="9:5" pos:end="9:24">refcount_table_index</name> <operator pos:start="9:26" pos:end="9:26">=</operator> <name pos:start="9:28" pos:end="9:40">cluster_index</name> <operator pos:start="9:42" pos:end="9:43">&gt;&gt;</operator> <name pos:start="9:45" pos:end="9:66"><name pos:start="9:45" pos:end="9:45">s</name><operator pos:start="9:46" pos:end="9:47">-&gt;</operator><name pos:start="9:48" pos:end="9:66">refcount_block_bits</name></name></expr>;</expr_stmt>
    <if_stmt pos:start="10:5" pos:end="153:15"><if pos:start="10:5" pos:end="153:15">if <condition pos:start="10:8" pos:end="10:54">(<expr pos:start="10:9" pos:end="10:53"><name pos:start="10:9" pos:end="10:28">refcount_table_index</name> <operator pos:start="10:30" pos:end="10:30">&lt;</operator> <name pos:start="10:32" pos:end="10:53"><name pos:start="10:32" pos:end="10:32">s</name><operator pos:start="10:33" pos:end="10:34">-&gt;</operator><name pos:start="10:35" pos:end="10:53">refcount_table_size</name></name></expr>)</condition> <block pos:start="10:56" pos:end="153:15">{<block_content pos:start="11:9" pos:end="153:15">
        <decl_stmt pos:start="11:9" pos:end="12:71"><decl pos:start="11:9" pos:end="12:70"><type pos:start="11:9" pos:end="11:16"><name pos:start="11:9" pos:end="11:16">uint64_t</name></type> <name pos:start="11:18" pos:end="11:38">refcount_block_offset</name> <init pos:start="11:40" pos:end="12:70">=
            <expr pos:start="12:13" pos:end="12:70"><name pos:start="12:13" pos:end="12:51"><name pos:start="12:13" pos:end="12:13">s</name><operator pos:start="12:14" pos:end="12:15">-&gt;</operator><name pos:start="12:16" pos:end="12:29">refcount_table</name><index pos:start="12:30" pos:end="12:51">[<expr pos:start="12:31" pos:end="12:50"><name pos:start="12:31" pos:end="12:50">refcount_table_index</name></expr>]</index></name> <operator pos:start="12:53" pos:end="12:53">&amp;</operator> <name pos:start="12:55" pos:end="12:70">REFT_OFFSET_MASK</name></expr></init></decl>;</decl_stmt>
        <comment type="block" pos:start="13:9" pos:end="13:47">/* If it's already there, we're done */</comment>
        <if_stmt pos:start="14:9" pos:end="153:15"><if pos:start="14:9" pos:end="153:15">if <condition pos:start="14:12" pos:end="14:34">(<expr pos:start="14:13" pos:end="14:33"><name pos:start="14:13" pos:end="14:33">refcount_block_offset</name></expr>)</condition> <block pos:start="14:36" pos:end="153:15">{<block_content pos:start="15:13" pos:end="153:15">
            <if_stmt pos:start="15:13" pos:end="153:15"><if pos:start="15:13" pos:end="153:15">if <condition pos:start="15:16" pos:end="15:62">(<expr pos:start="15:17" pos:end="15:61"><call pos:start="15:17" pos:end="15:61"><name pos:start="15:17" pos:end="15:35">offset_into_cluster</name><argument_list pos:start="15:36" pos:end="15:61">(<argument pos:start="15:37" pos:end="15:37"><expr pos:start="15:37" pos:end="15:37"><name pos:start="15:37" pos:end="15:37">s</name></expr></argument>, <argument pos:start="15:40" pos:end="15:60"><expr pos:start="15:40" pos:end="15:60"><name pos:start="15:40" pos:end="15:60">refcount_block_offset</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="15:64" pos:end="153:15">{<block_content pos:start="16:17" pos:end="153:15">
                <expr_stmt pos:start="16:17" pos:end="19:62"><expr pos:start="16:17" pos:end="19:61"><call pos:start="16:17" pos:end="19:61"><name pos:start="16:17" pos:end="16:39">qcow2_signal_corruption</name><argument_list pos:start="16:40" pos:end="19:61">(<argument pos:start="16:41" pos:end="16:42"><expr pos:start="16:41" pos:end="16:42"><name pos:start="16:41" pos:end="16:42">bs</name></expr></argument>, <argument pos:start="16:45" pos:end="16:48"><expr pos:start="16:45" pos:end="16:48"><name pos:start="16:45" pos:end="16:48">true</name></expr></argument>, <argument pos:start="16:51" pos:end="16:52"><expr pos:start="16:51" pos:end="16:52"><operator pos:start="16:51" pos:end="16:51">-</operator><literal type="number" pos:start="16:52" pos:end="16:52">1</literal></expr></argument>, <argument pos:start="16:55" pos:end="16:56"><expr pos:start="16:55" pos:end="16:56"><operator pos:start="16:55" pos:end="16:55">-</operator><literal type="number" pos:start="16:56" pos:end="16:56">1</literal></expr></argument>, <argument pos:start="16:59" pos:end="18:46"><expr pos:start="16:59" pos:end="18:46"><literal type="string" pos:start="16:59" pos:end="16:78">"Refblock offset %#"</literal>
                                        <name pos:start="17:41" pos:end="17:46">PRIx64</name> <literal type="string" pos:start="17:48" pos:end="17:77">" unaligned (reftable index: "</literal>
                                        <literal type="string" pos:start="18:41" pos:end="18:46">"%#x)"</literal></expr></argument>, <argument pos:start="18:49" pos:end="18:69"><expr pos:start="18:49" pos:end="18:69"><name pos:start="18:49" pos:end="18:69">refcount_block_offset</name></expr></argument>,
                                        <argument pos:start="19:41" pos:end="19:60"><expr pos:start="19:41" pos:end="19:60"><name pos:start="19:41" pos:end="19:60">refcount_table_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <return pos:start="20:14" pos:end="21:56">return <expr pos:start="20:21" pos:end="21:55"><call pos:start="20:21" pos:end="21:55"><name pos:start="20:21" pos:end="20:39">load_refcount_block</name><argument_list pos:start="20:40" pos:end="21:55">(<argument pos:start="20:41" pos:end="20:42"><expr pos:start="20:41" pos:end="20:42"><name pos:start="20:41" pos:end="20:42">bs</name></expr></argument>, <argument pos:start="20:45" pos:end="20:65"><expr pos:start="20:45" pos:end="20:65"><name pos:start="20:45" pos:end="20:65">refcount_block_offset</name></expr></argument>,
                                        <argument pos:start="21:41" pos:end="21:54"><expr pos:start="21:41" pos:end="21:54"><name pos:start="21:41" pos:end="21:54">refcount_block</name></expr></argument>)</argument_list></call></expr>;</return>
    <comment type="block" pos:start="22:5" pos:end="43:7">/*
     * If we came here, we need to allocate something. Something is at least
     * a cluster for the new refcount block. It may also include a new refcount
     * table if the old refcount table is too small.
     *
     * Note that allocating clusters here needs some special care:
     *
     * - We can't use the normal qcow2_alloc_clusters(), it would try to
     *   increase the refcount and very likely we would end up with an endless
     *   recursion. Instead we must place the refcount blocks in a way that
     *   they can describe them themselves.
     *
     * - We need to consider that at this point we are inside update_refcounts
     *   and potentially doing an initial refcount increase. This means that
     *   some clusters have already been allocated by the caller, but their
     *   refcount isn't accurate yet. If we allocate clusters for metadata, we
     *   need to return -EAGAIN to signal the caller that it needs to restart
     *   the search for free clusters.
     *
     * - alloc_clusters_noref and qcow2_free_clusters may load a different
     *   refcount block into the cache
     */</comment>
    <expr_stmt pos:start="44:5" pos:end="44:27"><expr pos:start="44:5" pos:end="44:26"><operator pos:start="44:5" pos:end="44:5">*</operator><name pos:start="44:6" pos:end="44:19">refcount_block</name> <operator pos:start="44:21" pos:end="44:21">=</operator> <name pos:start="44:23" pos:end="44:26">NULL</name></expr>;</expr_stmt>
    <comment type="block" pos:start="45:5" pos:end="45:73">/* We write to the refcount table, so we might depend on L2 tables */</comment>
    <expr_stmt pos:start="46:5" pos:end="46:51"><expr pos:start="46:5" pos:end="46:50"><name pos:start="46:5" pos:end="46:7">ret</name> <operator pos:start="46:9" pos:end="46:9">=</operator> <call pos:start="46:11" pos:end="46:50"><name pos:start="46:11" pos:end="46:27">qcow2_cache_flush</name><argument_list pos:start="46:28" pos:end="46:50">(<argument pos:start="46:29" pos:end="46:30"><expr pos:start="46:29" pos:end="46:30"><name pos:start="46:29" pos:end="46:30">bs</name></expr></argument>, <argument pos:start="46:33" pos:end="46:49"><expr pos:start="46:33" pos:end="46:49"><name pos:start="46:33" pos:end="46:49"><name pos:start="46:33" pos:end="46:33">s</name><operator pos:start="46:34" pos:end="46:35">-&gt;</operator><name pos:start="46:36" pos:end="46:49">l2_table_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="47:5" pos:end="153:15"><if pos:start="47:5" pos:end="153:15">if <condition pos:start="47:8" pos:end="47:16">(<expr pos:start="47:9" pos:end="47:15"><name pos:start="47:9" pos:end="47:11">ret</name> <operator pos:start="47:13" pos:end="47:13">&lt;</operator> <literal type="number" pos:start="47:15" pos:end="47:15">0</literal></expr>)</condition> <block pos:start="47:18" pos:end="153:15">{<block_content pos:start="48:9" pos:end="153:15">
        <return pos:start="48:9" pos:end="48:19">return <expr pos:start="48:16" pos:end="48:18"><name pos:start="48:16" pos:end="48:18">ret</name></expr>;</return>
    <comment type="block" pos:start="49:5" pos:end="49:64">/* Allocate the refcount block itself and mark it as used */</comment>
    <decl_stmt pos:start="50:5" pos:end="50:66"><decl pos:start="50:5" pos:end="50:65"><type pos:start="50:5" pos:end="50:11"><name pos:start="50:5" pos:end="50:11">int64_t</name></type> <name pos:start="50:13" pos:end="50:21">new_block</name> <init pos:start="50:23" pos:end="50:65">= <expr pos:start="50:25" pos:end="50:65"><call pos:start="50:25" pos:end="50:65"><name pos:start="50:25" pos:end="50:44">alloc_clusters_noref</name><argument_list pos:start="50:45" pos:end="50:65">(<argument pos:start="50:46" pos:end="50:47"><expr pos:start="50:46" pos:end="50:47"><name pos:start="50:46" pos:end="50:47">bs</name></expr></argument>, <argument pos:start="50:50" pos:end="50:64"><expr pos:start="50:50" pos:end="50:64"><name pos:start="50:50" pos:end="50:64"><name pos:start="50:50" pos:end="50:50">s</name><operator pos:start="50:51" pos:end="50:52">-&gt;</operator><name pos:start="50:53" pos:end="50:64">cluster_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt pos:start="51:5" pos:end="153:15"><if pos:start="51:5" pos:end="153:15">if <condition pos:start="51:8" pos:end="51:22">(<expr pos:start="51:9" pos:end="51:21"><name pos:start="51:9" pos:end="51:17">new_block</name> <operator pos:start="51:19" pos:end="51:19">&lt;</operator> <literal type="number" pos:start="51:21" pos:end="51:21">0</literal></expr>)</condition> <block pos:start="51:24" pos:end="153:15">{<block_content pos:start="52:9" pos:end="153:15">
        <return pos:start="52:9" pos:end="54:0">return <expr pos:start="52:16" pos:end="52:24"><name pos:start="52:16" pos:end="52:24">new_block</name></expr>;</return>
<cpp:ifdef pos:start="53:1" pos:end="53:19">#<cpp:directive pos:start="53:2" pos:end="53:6">ifdef</cpp:directive> <name pos:start="53:8" pos:end="53:19">DEBUG_ALLOC2</name></cpp:ifdef>
    <expr_stmt pos:start="54:5" pos:end="58:0"><expr pos:start="54:5" pos:end="56:74"><call pos:start="54:5" pos:end="56:74"><name pos:start="54:5" pos:end="54:11">fprintf</name><argument_list pos:start="54:12" pos:end="56:74">(<argument pos:start="54:13" pos:end="54:18"><expr pos:start="54:13" pos:end="54:18"><name pos:start="54:13" pos:end="54:18">stderr</name></expr></argument>, <argument pos:start="54:21" pos:end="55:27"><expr pos:start="54:21" pos:end="55:27"><literal type="string" pos:start="54:21" pos:end="54:61">"qcow2: Allocate refcount block %d for %"</literal> <name pos:start="54:63" pos:end="54:68">PRIx64</name>
        <literal type="string" pos:start="55:9" pos:end="55:15">" at %"</literal> <name pos:start="55:17" pos:end="55:22">PRIx64</name> <literal type="string" pos:start="55:24" pos:end="55:27">"\n"</literal></expr></argument>,
        <argument pos:start="56:9" pos:end="56:28"><expr pos:start="56:9" pos:end="56:28"><name pos:start="56:9" pos:end="56:28">refcount_table_index</name></expr></argument>, <argument pos:start="56:31" pos:end="56:62"><expr pos:start="56:31" pos:end="56:62"><name pos:start="56:31" pos:end="56:43">cluster_index</name> <operator pos:start="56:45" pos:end="56:46">&lt;&lt;</operator> <name pos:start="56:48" pos:end="56:62"><name pos:start="56:48" pos:end="56:48">s</name><operator pos:start="56:49" pos:end="56:50">-&gt;</operator><name pos:start="56:51" pos:end="56:62">cluster_bits</name></name></expr></argument>, <argument pos:start="56:65" pos:end="56:73"><expr pos:start="56:65" pos:end="56:73"><name pos:start="56:65" pos:end="56:73">new_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="57:1" pos:end="57:6">#<cpp:directive pos:start="57:2" pos:end="57:6">endif</cpp:directive></cpp:endif>
    <if_stmt pos:start="58:5" pos:end="153:15"><if pos:start="58:5" pos:end="153:15">if <condition pos:start="58:8" pos:end="58:79">(<expr pos:start="58:9" pos:end="58:78"><call pos:start="58:9" pos:end="58:78"><name pos:start="58:9" pos:end="58:30">in_same_refcount_block</name><argument_list pos:start="58:31" pos:end="58:78">(<argument pos:start="58:32" pos:end="58:32"><expr pos:start="58:32" pos:end="58:32"><name pos:start="58:32" pos:end="58:32">s</name></expr></argument>, <argument pos:start="58:35" pos:end="58:43"><expr pos:start="58:35" pos:end="58:43"><name pos:start="58:35" pos:end="58:43">new_block</name></expr></argument>, <argument pos:start="58:46" pos:end="58:77"><expr pos:start="58:46" pos:end="58:77"><name pos:start="58:46" pos:end="58:58">cluster_index</name> <operator pos:start="58:60" pos:end="58:61">&lt;&lt;</operator> <name pos:start="58:63" pos:end="58:77"><name pos:start="58:63" pos:end="58:63">s</name><operator pos:start="58:64" pos:end="58:65">-&gt;</operator><name pos:start="58:66" pos:end="58:77">cluster_bits</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="58:81" pos:end="153:15">{<block_content pos:start="60:9" pos:end="153:15">
        <comment type="block" pos:start="59:9" pos:end="59:60">/* Zero the new refcount block before updating it */</comment>
        <expr_stmt pos:start="60:9" pos:end="61:52"><expr pos:start="60:9" pos:end="61:51"><name pos:start="60:9" pos:end="60:11">ret</name> <operator pos:start="60:13" pos:end="60:13">=</operator> <call pos:start="60:15" pos:end="61:51"><name pos:start="60:15" pos:end="60:35">qcow2_cache_get_empty</name><argument_list pos:start="60:36" pos:end="61:51">(<argument pos:start="60:37" pos:end="60:38"><expr pos:start="60:37" pos:end="60:38"><name pos:start="60:37" pos:end="60:38">bs</name></expr></argument>, <argument pos:start="60:41" pos:end="60:63"><expr pos:start="60:41" pos:end="60:63"><name pos:start="60:41" pos:end="60:63"><name pos:start="60:41" pos:end="60:41">s</name><operator pos:start="60:42" pos:end="60:43">-&gt;</operator><name pos:start="60:44" pos:end="60:63">refcount_block_cache</name></name></expr></argument>, <argument pos:start="60:66" pos:end="60:74"><expr pos:start="60:66" pos:end="60:74"><name pos:start="60:66" pos:end="60:74">new_block</name></expr></argument>,
                                    <argument pos:start="61:37" pos:end="61:50"><expr pos:start="61:37" pos:end="61:50"><name pos:start="61:37" pos:end="61:50">refcount_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="62:9" pos:end="153:15"><if pos:start="62:9" pos:end="69:5">if <condition pos:start="62:12" pos:end="62:20">(<expr pos:start="62:13" pos:end="62:19"><name pos:start="62:13" pos:end="62:15">ret</name> <operator pos:start="62:17" pos:end="62:17">&lt;</operator> <literal type="number" pos:start="62:19" pos:end="62:19">0</literal></expr>)</condition> <block pos:start="62:22" pos:end="69:5">{<block_content pos:start="63:13" pos:end="68:57">
            <goto pos:start="63:13" pos:end="63:22">goto <name pos:start="63:18" pos:end="63:21">fail</name>;</goto>
        <expr_stmt pos:start="64:9" pos:end="64:52"><expr pos:start="64:9" pos:end="64:51"><call pos:start="64:9" pos:end="64:51"><name pos:start="64:9" pos:end="64:14">memset</name><argument_list pos:start="64:15" pos:end="64:51">(<argument pos:start="64:16" pos:end="64:30"><expr pos:start="64:16" pos:end="64:30"><operator pos:start="64:16" pos:end="64:16">*</operator><name pos:start="64:17" pos:end="64:30">refcount_block</name></expr></argument>, <argument pos:start="64:33" pos:end="64:33"><expr pos:start="64:33" pos:end="64:33"><literal type="number" pos:start="64:33" pos:end="64:33">0</literal></expr></argument>, <argument pos:start="64:36" pos:end="64:50"><expr pos:start="64:36" pos:end="64:50"><name pos:start="64:36" pos:end="64:50"><name pos:start="64:36" pos:end="64:36">s</name><operator pos:start="64:37" pos:end="64:38">-&gt;</operator><name pos:start="64:39" pos:end="64:50">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="65:9" pos:end="65:66">/* The block describes itself, need to update the cache */</comment>
        <decl_stmt pos:start="66:9" pos:end="67:41"><decl pos:start="66:9" pos:end="67:40"><type pos:start="66:9" pos:end="66:11"><name pos:start="66:9" pos:end="66:11">int</name></type> <name pos:start="66:13" pos:end="66:23">block_index</name> <init pos:start="66:25" pos:end="67:40">= <expr pos:start="66:27" pos:end="67:40"><operator pos:start="66:27" pos:end="66:27">(</operator><name pos:start="66:28" pos:end="66:36">new_block</name> <operator pos:start="66:38" pos:end="66:39">&gt;&gt;</operator> <name pos:start="66:41" pos:end="66:55"><name pos:start="66:41" pos:end="66:41">s</name><operator pos:start="66:42" pos:end="66:43">-&gt;</operator><name pos:start="66:44" pos:end="66:55">cluster_bits</name></name><operator pos:start="66:56" pos:end="66:56">)</operator> <operator pos:start="66:58" pos:end="66:58">&amp;</operator>
            <operator pos:start="67:13" pos:end="67:13">(</operator><name pos:start="67:14" pos:end="67:35"><name pos:start="67:14" pos:end="67:14">s</name><operator pos:start="67:15" pos:end="67:16">-&gt;</operator><name pos:start="67:17" pos:end="67:35">refcount_block_size</name></name> <operator pos:start="67:37" pos:end="67:37">-</operator> <literal type="number" pos:start="67:39" pos:end="67:39">1</literal><operator pos:start="67:40" pos:end="67:40">)</operator></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="68:9" pos:end="68:57"><expr pos:start="68:9" pos:end="68:56"><call pos:start="68:9" pos:end="68:56"><name pos:start="68:9" pos:end="68:23"><name pos:start="68:9" pos:end="68:9">s</name><operator pos:start="68:10" pos:end="68:11">-&gt;</operator><name pos:start="68:12" pos:end="68:23">set_refcount</name></name><argument_list pos:start="68:24" pos:end="68:56">(<argument pos:start="68:25" pos:end="68:39"><expr pos:start="68:25" pos:end="68:39"><operator pos:start="68:25" pos:end="68:25">*</operator><name pos:start="68:26" pos:end="68:39">refcount_block</name></expr></argument>, <argument pos:start="68:42" pos:end="68:52"><expr pos:start="68:42" pos:end="68:52"><name pos:start="68:42" pos:end="68:52">block_index</name></expr></argument>, <argument pos:start="68:55" pos:end="68:55"><expr pos:start="68:55" pos:end="68:55"><literal type="number" pos:start="68:55" pos:end="68:55">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="69:7" pos:end="153:15">else <block pos:start="69:12" pos:end="153:15">{<block_content pos:start="72:9" pos:end="153:15">
        <comment type="block" pos:start="70:9" pos:end="71:54">/* Described somewhere else. This can recurse at most twice before we
         * arrive at a block that describes itself. */</comment>
        <expr_stmt pos:start="72:9" pos:end="73:51"><expr pos:start="72:9" pos:end="73:50"><name pos:start="72:9" pos:end="72:11">ret</name> <operator pos:start="72:13" pos:end="72:13">=</operator> <call pos:start="72:15" pos:end="73:50"><name pos:start="72:15" pos:end="72:29">update_refcount</name><argument_list pos:start="72:30" pos:end="73:50">(<argument pos:start="72:31" pos:end="72:32"><expr pos:start="72:31" pos:end="72:32"><name pos:start="72:31" pos:end="72:32">bs</name></expr></argument>, <argument pos:start="72:35" pos:end="72:43"><expr pos:start="72:35" pos:end="72:43"><name pos:start="72:35" pos:end="72:43">new_block</name></expr></argument>, <argument pos:start="72:46" pos:end="72:60"><expr pos:start="72:46" pos:end="72:60"><name pos:start="72:46" pos:end="72:60"><name pos:start="72:46" pos:end="72:46">s</name><operator pos:start="72:47" pos:end="72:48">-&gt;</operator><name pos:start="72:49" pos:end="72:60">cluster_size</name></name></expr></argument>, <argument pos:start="72:63" pos:end="72:63"><expr pos:start="72:63" pos:end="72:63"><literal type="number" pos:start="72:63" pos:end="72:63">1</literal></expr></argument>, <argument pos:start="72:66" pos:end="72:70"><expr pos:start="72:66" pos:end="72:70"><name pos:start="72:66" pos:end="72:70">false</name></expr></argument>,
                              <argument pos:start="73:31" pos:end="73:49"><expr pos:start="73:31" pos:end="73:49"><name pos:start="73:31" pos:end="73:49">QCOW2_DISCARD_NEVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="74:9" pos:end="153:15"><if pos:start="74:9" pos:end="153:15">if <condition pos:start="74:12" pos:end="74:20">(<expr pos:start="74:13" pos:end="74:19"><name pos:start="74:13" pos:end="74:15">ret</name> <operator pos:start="74:17" pos:end="74:17">&lt;</operator> <literal type="number" pos:start="74:19" pos:end="74:19">0</literal></expr>)</condition> <block pos:start="74:22" pos:end="153:15">{<block_content pos:start="75:13" pos:end="153:15">
            <goto pos:start="75:13" pos:end="75:22">goto <name pos:start="75:18" pos:end="75:21">fail</name>;</goto>
        <expr_stmt pos:start="76:9" pos:end="76:61"><expr pos:start="76:9" pos:end="76:60"><name pos:start="76:9" pos:end="76:11">ret</name> <operator pos:start="76:13" pos:end="76:13">=</operator> <call pos:start="76:15" pos:end="76:60"><name pos:start="76:15" pos:end="76:31">qcow2_cache_flush</name><argument_list pos:start="76:32" pos:end="76:60">(<argument pos:start="76:33" pos:end="76:34"><expr pos:start="76:33" pos:end="76:34"><name pos:start="76:33" pos:end="76:34">bs</name></expr></argument>, <argument pos:start="76:37" pos:end="76:59"><expr pos:start="76:37" pos:end="76:59"><name pos:start="76:37" pos:end="76:59"><name pos:start="76:37" pos:end="76:37">s</name><operator pos:start="76:38" pos:end="76:39">-&gt;</operator><name pos:start="76:40" pos:end="76:59">refcount_block_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="77:9" pos:end="153:15"><if pos:start="77:9" pos:end="153:15">if <condition pos:start="77:12" pos:end="77:20">(<expr pos:start="77:13" pos:end="77:19"><name pos:start="77:13" pos:end="77:15">ret</name> <operator pos:start="77:17" pos:end="77:17">&lt;</operator> <literal type="number" pos:start="77:19" pos:end="77:19">0</literal></expr>)</condition> <block pos:start="77:22" pos:end="153:15">{<block_content pos:start="78:13" pos:end="153:15">
            <goto pos:start="78:13" pos:end="78:22">goto <name pos:start="78:18" pos:end="78:21">fail</name>;</goto>
        <comment type="block" pos:start="79:9" pos:end="80:60">/* Initialize the new refcount block only after updating its refcount,
         * update_refcount uses the refcount cache itself */</comment>
        <expr_stmt pos:start="81:9" pos:end="82:52"><expr pos:start="81:9" pos:end="82:51"><name pos:start="81:9" pos:end="81:11">ret</name> <operator pos:start="81:13" pos:end="81:13">=</operator> <call pos:start="81:15" pos:end="82:51"><name pos:start="81:15" pos:end="81:35">qcow2_cache_get_empty</name><argument_list pos:start="81:36" pos:end="82:51">(<argument pos:start="81:37" pos:end="81:38"><expr pos:start="81:37" pos:end="81:38"><name pos:start="81:37" pos:end="81:38">bs</name></expr></argument>, <argument pos:start="81:41" pos:end="81:63"><expr pos:start="81:41" pos:end="81:63"><name pos:start="81:41" pos:end="81:63"><name pos:start="81:41" pos:end="81:41">s</name><operator pos:start="81:42" pos:end="81:43">-&gt;</operator><name pos:start="81:44" pos:end="81:63">refcount_block_cache</name></name></expr></argument>, <argument pos:start="81:66" pos:end="81:74"><expr pos:start="81:66" pos:end="81:74"><name pos:start="81:66" pos:end="81:74">new_block</name></expr></argument>,
                                    <argument pos:start="82:37" pos:end="82:50"><expr pos:start="82:37" pos:end="82:50"><name pos:start="82:37" pos:end="82:50">refcount_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="83:9" pos:end="153:15"><if pos:start="83:9" pos:end="153:15">if <condition pos:start="83:12" pos:end="83:20">(<expr pos:start="83:13" pos:end="83:19"><name pos:start="83:13" pos:end="83:15">ret</name> <operator pos:start="83:17" pos:end="83:17">&lt;</operator> <literal type="number" pos:start="83:19" pos:end="83:19">0</literal></expr>)</condition> <block pos:start="83:22" pos:end="153:15">{<block_content pos:start="84:13" pos:end="153:15">
            <goto pos:start="84:13" pos:end="84:22">goto <name pos:start="84:18" pos:end="84:21">fail</name>;</goto>
        <expr_stmt pos:start="85:9" pos:end="85:52"><expr pos:start="85:9" pos:end="85:51"><call pos:start="85:9" pos:end="85:51"><name pos:start="85:9" pos:end="85:14">memset</name><argument_list pos:start="85:15" pos:end="85:51">(<argument pos:start="85:16" pos:end="85:30"><expr pos:start="85:16" pos:end="85:30"><operator pos:start="85:16" pos:end="85:16">*</operator><name pos:start="85:17" pos:end="85:30">refcount_block</name></expr></argument>, <argument pos:start="85:33" pos:end="85:33"><expr pos:start="85:33" pos:end="85:33"><literal type="number" pos:start="85:33" pos:end="85:33">0</literal></expr></argument>, <argument pos:start="85:36" pos:end="85:50"><expr pos:start="85:36" pos:end="85:50"><name pos:start="85:36" pos:end="85:50"><name pos:start="85:36" pos:end="85:36">s</name><operator pos:start="85:37" pos:end="85:38">-&gt;</operator><name pos:start="85:39" pos:end="85:50">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="86:5" pos:end="86:64">/* Now the new refcount block needs to be written to disk */</comment>
    <expr_stmt pos:start="87:5" pos:end="87:56"><expr pos:start="87:5" pos:end="87:55"><call pos:start="87:5" pos:end="87:55"><name pos:start="87:5" pos:end="87:16">BLKDBG_EVENT</name><argument_list pos:start="87:17" pos:end="87:55">(<argument pos:start="87:18" pos:end="87:25"><expr pos:start="87:18" pos:end="87:25"><name pos:start="87:18" pos:end="87:25"><name pos:start="87:18" pos:end="87:19">bs</name><operator pos:start="87:20" pos:end="87:21">-&gt;</operator><name pos:start="87:22" pos:end="87:25">file</name></name></expr></argument>, <argument pos:start="87:28" pos:end="87:54"><expr pos:start="87:28" pos:end="87:54"><name pos:start="87:28" pos:end="87:54">BLKDBG_REFBLOCK_ALLOC_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="88:5" pos:end="88:79"><expr pos:start="88:5" pos:end="88:78"><call pos:start="88:5" pos:end="88:78"><name pos:start="88:5" pos:end="88:32">qcow2_cache_entry_mark_dirty</name><argument_list pos:start="88:33" pos:end="88:78">(<argument pos:start="88:34" pos:end="88:35"><expr pos:start="88:34" pos:end="88:35"><name pos:start="88:34" pos:end="88:35">bs</name></expr></argument>, <argument pos:start="88:38" pos:end="88:60"><expr pos:start="88:38" pos:end="88:60"><name pos:start="88:38" pos:end="88:60"><name pos:start="88:38" pos:end="88:38">s</name><operator pos:start="88:39" pos:end="88:40">-&gt;</operator><name pos:start="88:41" pos:end="88:60">refcount_block_cache</name></name></expr></argument>, <argument pos:start="88:63" pos:end="88:77"><expr pos:start="88:63" pos:end="88:77"><operator pos:start="88:63" pos:end="88:63">*</operator><name pos:start="88:64" pos:end="88:77">refcount_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="89:5" pos:end="89:57"><expr pos:start="89:5" pos:end="89:56"><name pos:start="89:5" pos:end="89:7">ret</name> <operator pos:start="89:9" pos:end="89:9">=</operator> <call pos:start="89:11" pos:end="89:56"><name pos:start="89:11" pos:end="89:27">qcow2_cache_flush</name><argument_list pos:start="89:28" pos:end="89:56">(<argument pos:start="89:29" pos:end="89:30"><expr pos:start="89:29" pos:end="89:30"><name pos:start="89:29" pos:end="89:30">bs</name></expr></argument>, <argument pos:start="89:33" pos:end="89:55"><expr pos:start="89:33" pos:end="89:55"><name pos:start="89:33" pos:end="89:55"><name pos:start="89:33" pos:end="89:33">s</name><operator pos:start="89:34" pos:end="89:35">-&gt;</operator><name pos:start="89:36" pos:end="89:55">refcount_block_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="90:5" pos:end="153:15"><if pos:start="90:5" pos:end="153:15">if <condition pos:start="90:8" pos:end="90:16">(<expr pos:start="90:9" pos:end="90:15"><name pos:start="90:9" pos:end="90:11">ret</name> <operator pos:start="90:13" pos:end="90:13">&lt;</operator> <literal type="number" pos:start="90:15" pos:end="90:15">0</literal></expr>)</condition> <block pos:start="90:18" pos:end="153:15">{<block_content pos:start="91:9" pos:end="153:15">
        <goto pos:start="91:9" pos:end="91:18">goto <name pos:start="91:14" pos:end="91:17">fail</name>;</goto>
    <comment type="block" pos:start="92:5" pos:end="92:75">/* If the refcount table is big enough, just hook the block up there */</comment>
    <if_stmt pos:start="93:5" pos:end="153:15"><if pos:start="93:5" pos:end="153:15">if <condition pos:start="93:8" pos:end="93:54">(<expr pos:start="93:9" pos:end="93:53"><name pos:start="93:9" pos:end="93:28">refcount_table_index</name> <operator pos:start="93:30" pos:end="93:30">&lt;</operator> <name pos:start="93:32" pos:end="93:53"><name pos:start="93:32" pos:end="93:32">s</name><operator pos:start="93:33" pos:end="93:34">-&gt;</operator><name pos:start="93:35" pos:end="93:53">refcount_table_size</name></name></expr>)</condition> <block pos:start="93:56" pos:end="153:15">{<block_content pos:start="94:9" pos:end="153:15">
        <decl_stmt pos:start="94:9" pos:end="94:49"><decl pos:start="94:9" pos:end="94:48"><type pos:start="94:9" pos:end="94:16"><name pos:start="94:9" pos:end="94:16">uint64_t</name></type> <name pos:start="94:18" pos:end="94:23">data64</name> <init pos:start="94:25" pos:end="94:48">= <expr pos:start="94:27" pos:end="94:48"><call pos:start="94:27" pos:end="94:48"><name pos:start="94:27" pos:end="94:37">cpu_to_be64</name><argument_list pos:start="94:38" pos:end="94:48">(<argument pos:start="94:39" pos:end="94:47"><expr pos:start="94:39" pos:end="94:47"><name pos:start="94:39" pos:end="94:47">new_block</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="95:9" pos:end="95:61"><expr pos:start="95:9" pos:end="95:60"><call pos:start="95:9" pos:end="95:60"><name pos:start="95:9" pos:end="95:20">BLKDBG_EVENT</name><argument_list pos:start="95:21" pos:end="95:60">(<argument pos:start="95:22" pos:end="95:29"><expr pos:start="95:22" pos:end="95:29"><name pos:start="95:22" pos:end="95:29"><name pos:start="95:22" pos:end="95:23">bs</name><operator pos:start="95:24" pos:end="95:25">-&gt;</operator><name pos:start="95:26" pos:end="95:29">file</name></name></expr></argument>, <argument pos:start="95:32" pos:end="95:59"><expr pos:start="95:32" pos:end="95:59"><name pos:start="95:32" pos:end="95:59">BLKDBG_REFBLOCK_ALLOC_HOOKUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="96:9" pos:end="98:37"><expr pos:start="96:9" pos:end="98:36"><name pos:start="96:9" pos:end="96:11">ret</name> <operator pos:start="96:13" pos:end="96:13">=</operator> <call pos:start="96:15" pos:end="98:36"><name pos:start="96:15" pos:end="96:30">bdrv_pwrite_sync</name><argument_list pos:start="96:31" pos:end="98:36">(<argument pos:start="96:32" pos:end="96:39"><expr pos:start="96:32" pos:end="96:39"><name pos:start="96:32" pos:end="96:39"><name pos:start="96:32" pos:end="96:33">bs</name><operator pos:start="96:34" pos:end="96:35">-&gt;</operator><name pos:start="96:36" pos:end="96:39">file</name></name></expr></argument>,
            <argument pos:start="97:13" pos:end="97:78"><expr pos:start="97:13" pos:end="97:78"><name pos:start="97:13" pos:end="97:36"><name pos:start="97:13" pos:end="97:13">s</name><operator pos:start="97:14" pos:end="97:15">-&gt;</operator><name pos:start="97:16" pos:end="97:36">refcount_table_offset</name></name> <operator pos:start="97:38" pos:end="97:38">+</operator> <name pos:start="97:40" pos:end="97:59">refcount_table_index</name> <operator pos:start="97:61" pos:end="97:61">*</operator> <sizeof pos:start="97:63" pos:end="97:78">sizeof<argument_list pos:start="97:69" pos:end="97:78">(<argument pos:start="97:70" pos:end="97:77"><expr pos:start="97:70" pos:end="97:77"><name pos:start="97:70" pos:end="97:77">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,
            <argument pos:start="98:13" pos:end="98:19"><expr pos:start="98:13" pos:end="98:19"><operator pos:start="98:13" pos:end="98:13">&amp;</operator><name pos:start="98:14" pos:end="98:19">data64</name></expr></argument>, <argument pos:start="98:22" pos:end="98:35"><expr pos:start="98:22" pos:end="98:35"><sizeof pos:start="98:22" pos:end="98:35">sizeof<argument_list pos:start="98:28" pos:end="98:35">(<argument pos:start="98:29" pos:end="98:34"><expr pos:start="98:29" pos:end="98:34"><name pos:start="98:29" pos:end="98:34">data64</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="99:9" pos:end="153:15"><if pos:start="99:9" pos:end="153:15">if <condition pos:start="99:12" pos:end="99:20">(<expr pos:start="99:13" pos:end="99:19"><name pos:start="99:13" pos:end="99:15">ret</name> <operator pos:start="99:17" pos:end="99:17">&lt;</operator> <literal type="number" pos:start="99:19" pos:end="99:19">0</literal></expr>)</condition> <block pos:start="99:22" pos:end="153:15">{<block_content pos:start="100:13" pos:end="153:15">
            <goto pos:start="100:13" pos:end="100:22">goto <name pos:start="100:18" pos:end="100:21">fail</name>;</goto>
        <expr_stmt pos:start="101:9" pos:end="101:60"><expr pos:start="101:9" pos:end="101:59"><name pos:start="101:9" pos:end="101:47"><name pos:start="101:9" pos:end="101:9">s</name><operator pos:start="101:10" pos:end="101:11">-&gt;</operator><name pos:start="101:12" pos:end="101:25">refcount_table</name><index pos:start="101:26" pos:end="101:47">[<expr pos:start="101:27" pos:end="101:46"><name pos:start="101:27" pos:end="101:46">refcount_table_index</name></expr>]</index></name> <operator pos:start="101:49" pos:end="101:49">=</operator> <name pos:start="101:51" pos:end="101:59">new_block</name></expr>;</expr_stmt>
        <comment type="block" pos:start="102:9" pos:end="103:69">/* If there's a hole in s-&gt;refcount_table then it can happen
         * that refcount_table_index &lt; s-&gt;max_refcount_table_index */</comment>
        <expr_stmt pos:start="104:9" pos:end="105:67"><expr pos:start="104:9" pos:end="105:66"><name pos:start="104:9" pos:end="104:35"><name pos:start="104:9" pos:end="104:9">s</name><operator pos:start="104:10" pos:end="104:11">-&gt;</operator><name pos:start="104:12" pos:end="104:35">max_refcount_table_index</name></name> <operator pos:start="104:37" pos:end="104:37">=</operator>
            <call pos:start="105:13" pos:end="105:66"><name pos:start="105:13" pos:end="105:15">MAX</name><argument_list pos:start="105:16" pos:end="105:66">(<argument pos:start="105:17" pos:end="105:43"><expr pos:start="105:17" pos:end="105:43"><name pos:start="105:17" pos:end="105:43"><name pos:start="105:17" pos:end="105:17">s</name><operator pos:start="105:18" pos:end="105:19">-&gt;</operator><name pos:start="105:20" pos:end="105:43">max_refcount_table_index</name></name></expr></argument>, <argument pos:start="105:46" pos:end="105:65"><expr pos:start="105:46" pos:end="105:65"><name pos:start="105:46" pos:end="105:65">refcount_table_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="106:9" pos:end="107:49">/* The new refcount block may be where the caller intended to put its
         * data, so let it restart the search. */</comment>
        <return pos:start="108:9" pos:end="108:23">return <expr pos:start="108:16" pos:end="108:22"><operator pos:start="108:16" pos:end="108:16">-</operator><name pos:start="108:17" pos:end="108:22">EAGAIN</name></expr>;</return>
    <expr_stmt pos:start="109:5" pos:end="109:65"><expr pos:start="109:5" pos:end="109:64"><call pos:start="109:5" pos:end="109:64"><name pos:start="109:5" pos:end="109:19">qcow2_cache_put</name><argument_list pos:start="109:20" pos:end="109:64">(<argument pos:start="109:21" pos:end="109:22"><expr pos:start="109:21" pos:end="109:22"><name pos:start="109:21" pos:end="109:22">bs</name></expr></argument>, <argument pos:start="109:25" pos:end="109:47"><expr pos:start="109:25" pos:end="109:47"><name pos:start="109:25" pos:end="109:47"><name pos:start="109:25" pos:end="109:25">s</name><operator pos:start="109:26" pos:end="109:27">-&gt;</operator><name pos:start="109:28" pos:end="109:47">refcount_block_cache</name></name></expr></argument>, <argument pos:start="109:50" pos:end="109:63"><expr pos:start="109:50" pos:end="109:63"><name pos:start="109:50" pos:end="109:63">refcount_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="110:5" pos:end="120:7">/*
     * If we come here, we need to grow the refcount table. Again, a new
     * refcount table needs some space and we can't simply allocate to avoid
     * endless recursion.
     *
     * Therefore let's grab new refcount blocks at the end of the image, which
     * will describe themselves and the new refcount table. This way we can
     * reference them only in the new table and do the switch to the new
     * refcount table at once without producing an inconsistent state in
     * between.
     */</comment>
    <expr_stmt pos:start="121:5" pos:end="121:49"><expr pos:start="121:5" pos:end="121:48"><call pos:start="121:5" pos:end="121:48"><name pos:start="121:5" pos:end="121:16">BLKDBG_EVENT</name><argument_list pos:start="121:17" pos:end="121:48">(<argument pos:start="121:18" pos:end="121:25"><expr pos:start="121:18" pos:end="121:25"><name pos:start="121:18" pos:end="121:25"><name pos:start="121:18" pos:end="121:19">bs</name><operator pos:start="121:20" pos:end="121:21">-&gt;</operator><name pos:start="121:22" pos:end="121:25">file</name></name></expr></argument>, <argument pos:start="121:28" pos:end="121:47"><expr pos:start="121:28" pos:end="121:47"><name pos:start="121:28" pos:end="121:47">BLKDBG_REFTABLE_GROW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="122:5" pos:end="132:7">/* Calculate the number of refcount blocks needed so far; this will be the
     * basis for calculating the index of the first cluster used for the
     * self-describing refcount structures which we are about to create.
     *
     * Because we reached this point, there cannot be any refcount entries for
     * cluster_index or higher indices yet. However, because new_block has been
     * allocated to describe that cluster (and it will assume this role later
     * on), we cannot use that index; also, new_block may actually have a higher
     * cluster index than cluster_index, so it needs to be taken into account
     * here (and 1 needs to be added to its value because that cluster is used).
     */</comment>
    <decl_stmt pos:start="133:5" pos:end="135:64"><decl pos:start="133:5" pos:end="135:63"><type pos:start="133:5" pos:end="133:12"><name pos:start="133:5" pos:end="133:12">uint64_t</name></type> <name pos:start="133:14" pos:end="133:24">blocks_used</name> <init pos:start="133:26" pos:end="135:63">= <expr pos:start="133:28" pos:end="135:63"><call pos:start="133:28" pos:end="135:63"><name pos:start="133:28" pos:end="133:39">DIV_ROUND_UP</name><argument_list pos:start="133:40" pos:end="135:63">(<argument pos:start="133:41" pos:end="134:79"><expr pos:start="133:41" pos:end="134:79"><call pos:start="133:41" pos:end="134:79"><name pos:start="133:41" pos:end="133:43">MAX</name><argument_list pos:start="133:44" pos:end="134:79">(<argument pos:start="133:45" pos:end="133:61"><expr pos:start="133:45" pos:end="133:61"><name pos:start="133:45" pos:end="133:57">cluster_index</name> <operator pos:start="133:59" pos:end="133:59">+</operator> <literal type="number" pos:start="133:61" pos:end="133:61">1</literal></expr></argument>,
                                            <argument pos:start="134:45" pos:end="134:78"><expr pos:start="134:45" pos:end="134:78"><operator pos:start="134:45" pos:end="134:45">(</operator><name pos:start="134:46" pos:end="134:54">new_block</name> <operator pos:start="134:56" pos:end="134:57">&gt;&gt;</operator> <name pos:start="134:59" pos:end="134:73"><name pos:start="134:59" pos:end="134:59">s</name><operator pos:start="134:60" pos:end="134:61">-&gt;</operator><name pos:start="134:62" pos:end="134:73">cluster_bits</name></name><operator pos:start="134:74" pos:end="134:74">)</operator> <operator pos:start="134:76" pos:end="134:76">+</operator> <literal type="number" pos:start="134:78" pos:end="134:78">1</literal></expr></argument>)</argument_list></call></expr></argument>,
                                        <argument pos:start="135:41" pos:end="135:62"><expr pos:start="135:41" pos:end="135:62"><name pos:start="135:41" pos:end="135:62"><name pos:start="135:41" pos:end="135:41">s</name><operator pos:start="135:42" pos:end="135:43">-&gt;</operator><name pos:start="135:44" pos:end="135:62">refcount_block_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="block" pos:start="136:5" pos:end="136:50">/* Create the new refcount table and blocks */</comment>
    <decl_stmt pos:start="137:5" pos:end="138:24"><decl pos:start="137:5" pos:end="138:23"><type pos:start="137:5" pos:end="137:12"><name pos:start="137:5" pos:end="137:12">uint64_t</name></type> <name pos:start="137:14" pos:end="137:24">meta_offset</name> <init pos:start="137:26" pos:end="138:23">= <expr pos:start="137:28" pos:end="138:23"><operator pos:start="137:28" pos:end="137:28">(</operator><name pos:start="137:29" pos:end="137:39">blocks_used</name> <operator pos:start="137:41" pos:end="137:41">*</operator> <name pos:start="137:43" pos:end="137:64"><name pos:start="137:43" pos:end="137:43">s</name><operator pos:start="137:44" pos:end="137:45">-&gt;</operator><name pos:start="137:46" pos:end="137:64">refcount_block_size</name></name><operator pos:start="137:65" pos:end="137:65">)</operator> <operator pos:start="137:67" pos:end="137:67">*</operator>
        <name pos:start="138:9" pos:end="138:23"><name pos:start="138:9" pos:end="138:9">s</name><operator pos:start="138:10" pos:end="138:11">-&gt;</operator><name pos:start="138:12" pos:end="138:23">cluster_size</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt pos:start="139:5" pos:end="140:63"><expr pos:start="139:5" pos:end="140:62"><name pos:start="139:5" pos:end="139:7">ret</name> <operator pos:start="139:9" pos:end="139:9">=</operator> <call pos:start="139:11" pos:end="140:62"><name pos:start="139:11" pos:end="139:29">qcow2_refcount_area</name><argument_list pos:start="139:30" pos:end="140:62">(<argument pos:start="139:31" pos:end="139:32"><expr pos:start="139:31" pos:end="139:32"><name pos:start="139:31" pos:end="139:32">bs</name></expr></argument>, <argument pos:start="139:35" pos:end="139:45"><expr pos:start="139:35" pos:end="139:45"><name pos:start="139:35" pos:end="139:45">meta_offset</name></expr></argument>, <argument pos:start="139:48" pos:end="139:48"><expr pos:start="139:48" pos:end="139:48"><literal type="number" pos:start="139:48" pos:end="139:48">0</literal></expr></argument>, <argument pos:start="139:51" pos:end="139:55"><expr pos:start="139:51" pos:end="139:55"><name pos:start="139:51" pos:end="139:55">false</name></expr></argument>,
                              <argument pos:start="140:31" pos:end="140:50"><expr pos:start="140:31" pos:end="140:50"><name pos:start="140:31" pos:end="140:50">refcount_table_index</name></expr></argument>, <argument pos:start="140:53" pos:end="140:61"><expr pos:start="140:53" pos:end="140:61"><name pos:start="140:53" pos:end="140:61">new_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="141:5" pos:end="153:15"><if pos:start="141:5" pos:end="153:15">if <condition pos:start="141:8" pos:end="141:16">(<expr pos:start="141:9" pos:end="141:15"><name pos:start="141:9" pos:end="141:11">ret</name> <operator pos:start="141:13" pos:end="141:13">&lt;</operator> <literal type="number" pos:start="141:15" pos:end="141:15">0</literal></expr>)</condition> <block pos:start="141:18" pos:end="153:15">{<block_content pos:start="142:9" pos:end="153:15">
        <return pos:start="142:9" pos:end="142:19">return <expr pos:start="142:16" pos:end="142:18"><name pos:start="142:16" pos:end="142:18">ret</name></expr>;</return>
    <expr_stmt pos:start="143:5" pos:end="143:61"><expr pos:start="143:5" pos:end="143:60"><name pos:start="143:5" pos:end="143:7">ret</name> <operator pos:start="143:9" pos:end="143:9">=</operator> <call pos:start="143:11" pos:end="143:60"><name pos:start="143:11" pos:end="143:29">load_refcount_block</name><argument_list pos:start="143:30" pos:end="143:60">(<argument pos:start="143:31" pos:end="143:32"><expr pos:start="143:31" pos:end="143:32"><name pos:start="143:31" pos:end="143:32">bs</name></expr></argument>, <argument pos:start="143:35" pos:end="143:43"><expr pos:start="143:35" pos:end="143:43"><name pos:start="143:35" pos:end="143:43">new_block</name></expr></argument>, <argument pos:start="143:46" pos:end="143:59"><expr pos:start="143:46" pos:end="143:59"><name pos:start="143:46" pos:end="143:59">refcount_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="144:5" pos:end="153:15"><if pos:start="144:5" pos:end="153:15">if <condition pos:start="144:8" pos:end="144:16">(<expr pos:start="144:9" pos:end="144:15"><name pos:start="144:9" pos:end="144:11">ret</name> <operator pos:start="144:13" pos:end="144:13">&lt;</operator> <literal type="number" pos:start="144:15" pos:end="144:15">0</literal></expr>)</condition> <block pos:start="144:18" pos:end="153:15">{<block_content pos:start="145:9" pos:end="153:15">
        <return pos:start="145:9" pos:end="145:19">return <expr pos:start="145:16" pos:end="145:18"><name pos:start="145:16" pos:end="145:18">ret</name></expr>;</return>
    <comment type="block" pos:start="146:5" pos:end="148:68">/* If we were trying to do the initial refcount update for some cluster
     * allocation, we might have used the same clusters to store newly
     * allocated metadata. Make the caller search some new space. */</comment>
    <return pos:start="149:5" pos:end="149:19">return <expr pos:start="149:12" pos:end="149:18"><operator pos:start="149:12" pos:end="149:12">-</operator><name pos:start="149:13" pos:end="149:18">EAGAIN</name></expr>;</return>
<label pos:start="150:1" pos:end="150:5"><name pos:start="150:1" pos:end="150:4">fail</name>:</label>
    <if_stmt pos:start="151:5" pos:end="153:15"><if pos:start="151:5" pos:end="153:15">if <condition pos:start="151:8" pos:end="151:32">(<expr pos:start="151:9" pos:end="151:31"><operator pos:start="151:9" pos:end="151:9">*</operator><name pos:start="151:10" pos:end="151:23">refcount_block</name> <operator pos:start="151:25" pos:end="151:26">!=</operator> <name pos:start="151:28" pos:end="151:31">NULL</name></expr>)</condition> <block pos:start="151:34" pos:end="153:15">{<block_content pos:start="152:9" pos:end="153:15">
        <expr_stmt pos:start="152:9" pos:end="152:69"><expr pos:start="152:9" pos:end="152:68"><call pos:start="152:9" pos:end="152:68"><name pos:start="152:9" pos:end="152:23">qcow2_cache_put</name><argument_list pos:start="152:24" pos:end="152:68">(<argument pos:start="152:25" pos:end="152:26"><expr pos:start="152:25" pos:end="152:26"><name pos:start="152:25" pos:end="152:26">bs</name></expr></argument>, <argument pos:start="152:29" pos:end="152:51"><expr pos:start="152:29" pos:end="152:51"><name pos:start="152:29" pos:end="152:51"><name pos:start="152:29" pos:end="152:29">s</name><operator pos:start="152:30" pos:end="152:31">-&gt;</operator><name pos:start="152:32" pos:end="152:51">refcount_block_cache</name></name></expr></argument>, <argument pos:start="152:54" pos:end="152:67"><expr pos:start="152:54" pos:end="152:67"><name pos:start="152:54" pos:end="152:67">refcount_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="153:5" pos:end="153:15">return <expr pos:start="153:12" pos:end="153:14"><name pos:start="153:12" pos:end="153:14">ret</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function></unit>
