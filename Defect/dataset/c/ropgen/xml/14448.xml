<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14448.c" pos:tabs="8"><function pos:start="1:1" pos:end="78:15"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:20">qcow_open</name><parameter_list pos:start="1:21" pos:end="2:34">(<parameter pos:start="1:22" pos:end="1:41"><decl pos:start="1:22" pos:end="1:41"><type pos:start="1:22" pos:end="1:41"><name pos:start="1:22" pos:end="1:37">BlockDriverState</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:41">bs</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:57"><decl pos:start="1:44" pos:end="1:57"><type pos:start="1:44" pos:end="1:57"><name pos:start="1:44" pos:end="1:48">QDict</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:57">options</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:68"><decl pos:start="1:60" pos:end="1:68"><type pos:start="1:60" pos:end="1:68"><name pos:start="1:60" pos:end="1:62">int</name></type> <name pos:start="1:64" pos:end="1:68">flags</name></decl></parameter>,
                     <parameter pos:start="2:22" pos:end="2:33"><decl pos:start="2:22" pos:end="2:33"><type pos:start="2:22" pos:end="2:33"><name pos:start="2:22" pos:end="2:26">Error</name> <modifier pos:start="2:28" pos:end="2:28">*</modifier><modifier pos:start="2:29" pos:end="2:29">*</modifier></type><name pos:start="2:30" pos:end="2:33">errp</name></decl></parameter>)</parameter_list>
<block pos:start="3:1" pos:end="78:15">{<block_content pos:start="4:5" pos:end="78:15">
    <decl_stmt pos:start="4:5" pos:end="4:34"><decl pos:start="4:5" pos:end="4:33"><type pos:start="4:5" pos:end="4:19"><name pos:start="4:5" pos:end="4:17">BDRVQcowState</name> <modifier pos:start="4:19" pos:end="4:19">*</modifier></type><name pos:start="4:20" pos:end="4:20">s</name> <init pos:start="4:22" pos:end="4:33">= <expr pos:start="4:24" pos:end="4:33"><name pos:start="4:24" pos:end="4:33"><name pos:start="4:24" pos:end="4:25">bs</name><operator pos:start="4:26" pos:end="4:27">-&gt;</operator><name pos:start="4:28" pos:end="4:33">opaque</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:27"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">len</name></decl>, <decl pos:start="5:14" pos:end="5:14"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:14" pos:end="5:14">i</name></decl>, <decl pos:start="5:17" pos:end="5:21"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:17" pos:end="5:21">shift</name></decl>, <decl pos:start="5:24" pos:end="5:26"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:24" pos:end="5:26">ret</name></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:22"><decl pos:start="6:5" pos:end="6:21"><type pos:start="6:5" pos:end="6:14"><name pos:start="6:5" pos:end="6:14">QCowHeader</name></type> <name pos:start="6:16" pos:end="6:21">header</name></decl>;</decl_stmt>
    <expr_stmt pos:start="7:5" pos:end="7:59"><expr pos:start="7:5" pos:end="7:58"><name pos:start="7:5" pos:end="7:7">ret</name> <operator pos:start="7:9" pos:end="7:9">=</operator> <call pos:start="7:11" pos:end="7:58"><name pos:start="7:11" pos:end="7:20">bdrv_pread</name><argument_list pos:start="7:21" pos:end="7:58">(<argument pos:start="7:22" pos:end="7:29"><expr pos:start="7:22" pos:end="7:29"><name pos:start="7:22" pos:end="7:29"><name pos:start="7:22" pos:end="7:23">bs</name><operator pos:start="7:24" pos:end="7:25">-&gt;</operator><name pos:start="7:26" pos:end="7:29">file</name></name></expr></argument>, <argument pos:start="7:32" pos:end="7:32"><expr pos:start="7:32" pos:end="7:32"><literal type="number" pos:start="7:32" pos:end="7:32">0</literal></expr></argument>, <argument pos:start="7:35" pos:end="7:41"><expr pos:start="7:35" pos:end="7:41"><operator pos:start="7:35" pos:end="7:35">&amp;</operator><name pos:start="7:36" pos:end="7:41">header</name></expr></argument>, <argument pos:start="7:44" pos:end="7:57"><expr pos:start="7:44" pos:end="7:57"><sizeof pos:start="7:44" pos:end="7:57">sizeof<argument_list pos:start="7:50" pos:end="7:57">(<argument pos:start="7:51" pos:end="7:56"><expr pos:start="7:51" pos:end="7:56"><name pos:start="7:51" pos:end="7:56">header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="8:5" pos:end="78:15"><if pos:start="8:5" pos:end="78:15">if <condition pos:start="8:8" pos:end="8:16">(<expr pos:start="8:9" pos:end="8:15"><name pos:start="8:9" pos:end="8:11">ret</name> <operator pos:start="8:13" pos:end="8:13">&lt;</operator> <literal type="number" pos:start="8:15" pos:end="8:15">0</literal></expr>)</condition> <block pos:start="8:18" pos:end="78:15">{<block_content pos:start="9:5" pos:end="78:15">
    <expr_stmt pos:start="9:5" pos:end="9:32"><expr pos:start="9:5" pos:end="9:31"><call pos:start="9:5" pos:end="9:31"><name pos:start="9:5" pos:end="9:16">be32_to_cpus</name><argument_list pos:start="9:17" pos:end="9:31">(<argument pos:start="9:18" pos:end="9:30"><expr pos:start="9:18" pos:end="9:30"><operator pos:start="9:18" pos:end="9:18">&amp;</operator><name pos:start="9:19" pos:end="9:30"><name pos:start="9:19" pos:end="9:24">header</name><operator pos:start="9:25" pos:end="9:25">.</operator><name pos:start="9:26" pos:end="9:30">magic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="10:5" pos:end="10:34"><expr pos:start="10:5" pos:end="10:33"><call pos:start="10:5" pos:end="10:33"><name pos:start="10:5" pos:end="10:16">be32_to_cpus</name><argument_list pos:start="10:17" pos:end="10:33">(<argument pos:start="10:18" pos:end="10:32"><expr pos:start="10:18" pos:end="10:32"><operator pos:start="10:18" pos:end="10:18">&amp;</operator><name pos:start="10:19" pos:end="10:32"><name pos:start="10:19" pos:end="10:24">header</name><operator pos:start="10:25" pos:end="10:25">.</operator><name pos:start="10:26" pos:end="10:32">version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="11:5" pos:end="11:46"><expr pos:start="11:5" pos:end="11:45"><call pos:start="11:5" pos:end="11:45"><name pos:start="11:5" pos:end="11:16">be64_to_cpus</name><argument_list pos:start="11:17" pos:end="11:45">(<argument pos:start="11:18" pos:end="11:44"><expr pos:start="11:18" pos:end="11:44"><operator pos:start="11:18" pos:end="11:18">&amp;</operator><name pos:start="11:19" pos:end="11:44"><name pos:start="11:19" pos:end="11:24">header</name><operator pos:start="11:25" pos:end="11:25">.</operator><name pos:start="11:26" pos:end="11:44">backing_file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="12:5" pos:end="12:44"><expr pos:start="12:5" pos:end="12:43"><call pos:start="12:5" pos:end="12:43"><name pos:start="12:5" pos:end="12:16">be32_to_cpus</name><argument_list pos:start="12:17" pos:end="12:43">(<argument pos:start="12:18" pos:end="12:42"><expr pos:start="12:18" pos:end="12:42"><operator pos:start="12:18" pos:end="12:18">&amp;</operator><name pos:start="12:19" pos:end="12:42"><name pos:start="12:19" pos:end="12:24">header</name><operator pos:start="12:25" pos:end="12:25">.</operator><name pos:start="12:26" pos:end="12:42">backing_file_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="13:5" pos:end="13:32"><expr pos:start="13:5" pos:end="13:31"><call pos:start="13:5" pos:end="13:31"><name pos:start="13:5" pos:end="13:16">be32_to_cpus</name><argument_list pos:start="13:17" pos:end="13:31">(<argument pos:start="13:18" pos:end="13:30"><expr pos:start="13:18" pos:end="13:30"><operator pos:start="13:18" pos:end="13:18">&amp;</operator><name pos:start="13:19" pos:end="13:30"><name pos:start="13:19" pos:end="13:24">header</name><operator pos:start="13:25" pos:end="13:25">.</operator><name pos:start="13:26" pos:end="13:30">mtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="14:5" pos:end="14:31"><expr pos:start="14:5" pos:end="14:30"><call pos:start="14:5" pos:end="14:30"><name pos:start="14:5" pos:end="14:16">be64_to_cpus</name><argument_list pos:start="14:17" pos:end="14:30">(<argument pos:start="14:18" pos:end="14:29"><expr pos:start="14:18" pos:end="14:29"><operator pos:start="14:18" pos:end="14:18">&amp;</operator><name pos:start="14:19" pos:end="14:29"><name pos:start="14:19" pos:end="14:24">header</name><operator pos:start="14:25" pos:end="14:25">.</operator><name pos:start="14:26" pos:end="14:29">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="15:5" pos:end="15:39"><expr pos:start="15:5" pos:end="15:38"><call pos:start="15:5" pos:end="15:38"><name pos:start="15:5" pos:end="15:16">be32_to_cpus</name><argument_list pos:start="15:17" pos:end="15:38">(<argument pos:start="15:18" pos:end="15:37"><expr pos:start="15:18" pos:end="15:37"><operator pos:start="15:18" pos:end="15:18">&amp;</operator><name pos:start="15:19" pos:end="15:37"><name pos:start="15:19" pos:end="15:24">header</name><operator pos:start="15:25" pos:end="15:25">.</operator><name pos:start="15:26" pos:end="15:37">crypt_method</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="16:5" pos:end="16:42"><expr pos:start="16:5" pos:end="16:41"><call pos:start="16:5" pos:end="16:41"><name pos:start="16:5" pos:end="16:16">be64_to_cpus</name><argument_list pos:start="16:17" pos:end="16:41">(<argument pos:start="16:18" pos:end="16:40"><expr pos:start="16:18" pos:end="16:40"><operator pos:start="16:18" pos:end="16:18">&amp;</operator><name pos:start="16:19" pos:end="16:40"><name pos:start="16:19" pos:end="16:24">header</name><operator pos:start="16:25" pos:end="16:25">.</operator><name pos:start="16:26" pos:end="16:40">l1_table_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="17:5" pos:end="78:15"><if pos:start="17:5" pos:end="78:15">if <condition pos:start="17:8" pos:end="17:35">(<expr pos:start="17:9" pos:end="17:34"><name pos:start="17:9" pos:end="17:20"><name pos:start="17:9" pos:end="17:14">header</name><operator pos:start="17:15" pos:end="17:15">.</operator><name pos:start="17:16" pos:end="17:20">magic</name></name> <operator pos:start="17:22" pos:end="17:23">!=</operator> <name pos:start="17:25" pos:end="17:34">QCOW_MAGIC</name></expr>)</condition> <block pos:start="17:37" pos:end="78:15">{<block_content pos:start="18:9" pos:end="78:15">
        <expr_stmt pos:start="18:9" pos:end="18:53"><expr pos:start="18:9" pos:end="18:52"><call pos:start="18:9" pos:end="18:52"><name pos:start="18:9" pos:end="18:18">error_setg</name><argument_list pos:start="18:19" pos:end="18:52">(<argument pos:start="18:20" pos:end="18:23"><expr pos:start="18:20" pos:end="18:23"><name pos:start="18:20" pos:end="18:23">errp</name></expr></argument>, <argument pos:start="18:26" pos:end="18:51"><expr pos:start="18:26" pos:end="18:51"><literal type="string" pos:start="18:26" pos:end="18:51">"Image not in qcow format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="19:5" pos:end="78:15"><if pos:start="19:5" pos:end="78:15">if <condition pos:start="19:8" pos:end="19:39">(<expr pos:start="19:9" pos:end="19:38"><name pos:start="19:9" pos:end="19:22"><name pos:start="19:9" pos:end="19:14">header</name><operator pos:start="19:15" pos:end="19:15">.</operator><name pos:start="19:16" pos:end="19:22">version</name></name> <operator pos:start="19:24" pos:end="19:25">!=</operator> <name pos:start="19:27" pos:end="19:38">QCOW_VERSION</name></expr>)</condition> <block pos:start="19:41" pos:end="78:15">{<block_content pos:start="20:9" pos:end="78:15">
        <decl_stmt pos:start="20:9" pos:end="20:25"><decl pos:start="20:9" pos:end="20:24"><type pos:start="20:9" pos:end="20:12"><name pos:start="20:9" pos:end="20:12">char</name></type> <name pos:start="20:14" pos:end="20:24"><name pos:start="20:14" pos:end="20:20">version</name><index pos:start="20:21" pos:end="20:24">[<expr pos:start="20:22" pos:end="20:23"><literal type="number" pos:start="20:22" pos:end="20:23">64</literal></expr>]</index></name></decl>;</decl_stmt>
        <expr_stmt pos:start="21:9" pos:end="22:33"><expr pos:start="21:9" pos:end="22:32"><call pos:start="21:9" pos:end="22:32"><name pos:start="21:9" pos:end="21:16">snprintf</name><argument_list pos:start="21:17" pos:end="22:32">(<argument pos:start="21:18" pos:end="21:24"><expr pos:start="21:18" pos:end="21:24"><name pos:start="21:18" pos:end="21:24">version</name></expr></argument>, <argument pos:start="21:27" pos:end="21:41"><expr pos:start="21:27" pos:end="21:41"><sizeof pos:start="21:27" pos:end="21:41">sizeof<argument_list pos:start="21:33" pos:end="21:41">(<argument pos:start="21:34" pos:end="21:40"><expr pos:start="21:34" pos:end="21:40"><name pos:start="21:34" pos:end="21:40">version</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="21:44" pos:end="21:66"><expr pos:start="21:44" pos:end="21:66"><literal type="string" pos:start="21:44" pos:end="21:59">"QCOW version %"</literal> <name pos:start="21:61" pos:end="21:66">PRIu32</name></expr></argument>,
                 <argument pos:start="22:18" pos:end="22:31"><expr pos:start="22:18" pos:end="22:31"><name pos:start="22:18" pos:end="22:31"><name pos:start="22:18" pos:end="22:23">header</name><operator pos:start="22:24" pos:end="22:24">.</operator><name pos:start="22:25" pos:end="22:31">version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="23:9" pos:end="24:52"><expr pos:start="23:9" pos:end="24:51"><call pos:start="23:9" pos:end="24:51"><name pos:start="23:9" pos:end="23:17">error_set</name><argument_list pos:start="23:18" pos:end="24:51">(<argument pos:start="23:19" pos:end="23:22"><expr pos:start="23:19" pos:end="23:22"><name pos:start="23:19" pos:end="23:22">errp</name></expr></argument>, <argument pos:start="23:25" pos:end="23:57"><expr pos:start="23:25" pos:end="23:57"><name pos:start="23:25" pos:end="23:57">QERR_UNKNOWN_BLOCK_FORMAT_FEATURE</name></expr></argument>,
                  <argument pos:start="24:19" pos:end="24:33"><expr pos:start="24:19" pos:end="24:33"><name pos:start="24:19" pos:end="24:33"><name pos:start="24:19" pos:end="24:20">bs</name><operator pos:start="24:21" pos:end="24:22">-&gt;</operator><name pos:start="24:23" pos:end="24:33">device_name</name></name></expr></argument>, <argument pos:start="24:36" pos:end="24:41"><expr pos:start="24:36" pos:end="24:41"><literal type="string" pos:start="24:36" pos:end="24:41">"qcow"</literal></expr></argument>, <argument pos:start="24:44" pos:end="24:50"><expr pos:start="24:44" pos:end="24:50"><name pos:start="24:44" pos:end="24:50">version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="25:9" pos:end="25:23"><expr pos:start="25:9" pos:end="25:22"><name pos:start="25:9" pos:end="25:11">ret</name> <operator pos:start="25:13" pos:end="25:13">=</operator> <operator pos:start="25:15" pos:end="25:15">-</operator><name pos:start="25:16" pos:end="25:22">ENOTSUP</name></expr>;</expr_stmt>
    <if_stmt pos:start="26:5" pos:end="78:15"><if pos:start="26:5" pos:end="78:15">if <condition pos:start="26:8" pos:end="26:25">(<expr pos:start="26:9" pos:end="26:24"><name pos:start="26:9" pos:end="26:19"><name pos:start="26:9" pos:end="26:14">header</name><operator pos:start="26:15" pos:end="26:15">.</operator><name pos:start="26:16" pos:end="26:19">size</name></name> <operator pos:start="26:21" pos:end="26:22">&lt;=</operator> <literal type="number" pos:start="26:24" pos:end="26:24">1</literal></expr>)</condition> <block pos:start="26:27" pos:end="78:15">{<block_content pos:start="27:9" pos:end="78:15">
        <expr_stmt pos:start="27:9" pos:end="27:79"><expr pos:start="27:9" pos:end="27:78"><call pos:start="27:9" pos:end="27:78"><name pos:start="27:9" pos:end="27:18">error_setg</name><argument_list pos:start="27:19" pos:end="27:78">(<argument pos:start="27:20" pos:end="27:23"><expr pos:start="27:20" pos:end="27:23"><name pos:start="27:20" pos:end="27:23">errp</name></expr></argument>, <argument pos:start="27:26" pos:end="27:77"><expr pos:start="27:26" pos:end="27:77"><literal type="string" pos:start="27:26" pos:end="27:77">"Image size is too small (must be at least 2 bytes)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="28:5" pos:end="78:15"><if pos:start="28:5" pos:end="78:15">if <condition pos:start="28:8" pos:end="28:60">(<expr pos:start="28:9" pos:end="28:59"><name pos:start="28:9" pos:end="28:27"><name pos:start="28:9" pos:end="28:14">header</name><operator pos:start="28:15" pos:end="28:15">.</operator><name pos:start="28:16" pos:end="28:27">cluster_bits</name></name> <operator pos:start="28:29" pos:end="28:29">&lt;</operator> <literal type="number" pos:start="28:31" pos:end="28:31">9</literal> <operator pos:start="28:33" pos:end="28:34">||</operator> <name pos:start="28:36" pos:end="28:54"><name pos:start="28:36" pos:end="28:41">header</name><operator pos:start="28:42" pos:end="28:42">.</operator><name pos:start="28:43" pos:end="28:54">cluster_bits</name></name> <operator pos:start="28:56" pos:end="28:56">&gt;</operator> <literal type="number" pos:start="28:58" pos:end="28:59">16</literal></expr>)</condition> <block pos:start="28:62" pos:end="78:15">{<block_content pos:start="29:9" pos:end="78:15">
        <expr_stmt pos:start="29:9" pos:end="29:69"><expr pos:start="29:9" pos:end="29:68"><call pos:start="29:9" pos:end="29:68"><name pos:start="29:9" pos:end="29:18">error_setg</name><argument_list pos:start="29:19" pos:end="29:68">(<argument pos:start="29:20" pos:end="29:23"><expr pos:start="29:20" pos:end="29:23"><name pos:start="29:20" pos:end="29:23">errp</name></expr></argument>, <argument pos:start="29:26" pos:end="29:67"><expr pos:start="29:26" pos:end="29:67"><literal type="string" pos:start="29:26" pos:end="29:67">"Cluster size must be between 512 and 64k"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="30:5" pos:end="78:15"><if pos:start="30:5" pos:end="78:15">if <condition pos:start="30:8" pos:end="30:45">(<expr pos:start="30:9" pos:end="30:44"><name pos:start="30:9" pos:end="30:27"><name pos:start="30:9" pos:end="30:14">header</name><operator pos:start="30:15" pos:end="30:15">.</operator><name pos:start="30:16" pos:end="30:27">crypt_method</name></name> <operator pos:start="30:29" pos:end="30:29">&gt;</operator> <name pos:start="30:31" pos:end="30:44">QCOW_CRYPT_AES</name></expr>)</condition> <block pos:start="30:47" pos:end="78:15">{<block_content pos:start="31:9" pos:end="78:15">
        <expr_stmt pos:start="31:9" pos:end="31:69"><expr pos:start="31:9" pos:end="31:68"><call pos:start="31:9" pos:end="31:68"><name pos:start="31:9" pos:end="31:18">error_setg</name><argument_list pos:start="31:19" pos:end="31:68">(<argument pos:start="31:20" pos:end="31:23"><expr pos:start="31:20" pos:end="31:23"><name pos:start="31:20" pos:end="31:23">errp</name></expr></argument>, <argument pos:start="31:26" pos:end="31:67"><expr pos:start="31:26" pos:end="31:67"><literal type="string" pos:start="31:26" pos:end="31:67">"invalid encryption method in qcow header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="32:5" pos:end="32:49"><expr pos:start="32:5" pos:end="32:48"><name pos:start="32:5" pos:end="32:26"><name pos:start="32:5" pos:end="32:5">s</name><operator pos:start="32:6" pos:end="32:7">-&gt;</operator><name pos:start="32:8" pos:end="32:26">crypt_method_header</name></name> <operator pos:start="32:28" pos:end="32:28">=</operator> <name pos:start="32:30" pos:end="32:48"><name pos:start="32:30" pos:end="32:35">header</name><operator pos:start="32:36" pos:end="32:36">.</operator><name pos:start="32:37" pos:end="32:48">crypt_method</name></name></expr>;</expr_stmt>
    <if_stmt pos:start="33:5" pos:end="78:15"><if pos:start="33:5" pos:end="78:15">if <condition pos:start="33:8" pos:end="33:31">(<expr pos:start="33:9" pos:end="33:30"><name pos:start="33:9" pos:end="33:30"><name pos:start="33:9" pos:end="33:9">s</name><operator pos:start="33:10" pos:end="33:11">-&gt;</operator><name pos:start="33:12" pos:end="33:30">crypt_method_header</name></name></expr>)</condition> <block pos:start="33:33" pos:end="78:15">{<block_content pos:start="34:9" pos:end="78:15">
        <expr_stmt pos:start="34:9" pos:end="34:26"><expr pos:start="34:9" pos:end="34:25"><name pos:start="34:9" pos:end="34:21"><name pos:start="34:9" pos:end="34:10">bs</name><operator pos:start="34:11" pos:end="34:12">-&gt;</operator><name pos:start="34:13" pos:end="34:21">encrypted</name></name> <operator pos:start="34:23" pos:end="34:23">=</operator> <literal type="number" pos:start="34:25" pos:end="34:25">1</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="35:5" pos:end="35:42"><expr pos:start="35:5" pos:end="35:41"><name pos:start="35:5" pos:end="35:19"><name pos:start="35:5" pos:end="35:5">s</name><operator pos:start="35:6" pos:end="35:7">-&gt;</operator><name pos:start="35:8" pos:end="35:19">cluster_bits</name></name> <operator pos:start="35:21" pos:end="35:21">=</operator> <name pos:start="35:23" pos:end="35:41"><name pos:start="35:23" pos:end="35:28">header</name><operator pos:start="35:29" pos:end="35:29">.</operator><name pos:start="35:30" pos:end="35:41">cluster_bits</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="36:5" pos:end="36:43"><expr pos:start="36:5" pos:end="36:42"><name pos:start="36:5" pos:end="36:19"><name pos:start="36:5" pos:end="36:5">s</name><operator pos:start="36:6" pos:end="36:7">-&gt;</operator><name pos:start="36:8" pos:end="36:19">cluster_size</name></name> <operator pos:start="36:21" pos:end="36:21">=</operator> <literal type="number" pos:start="36:23" pos:end="36:23">1</literal> <operator pos:start="36:25" pos:end="36:26">&lt;&lt;</operator> <name pos:start="36:28" pos:end="36:42"><name pos:start="36:28" pos:end="36:28">s</name><operator pos:start="36:29" pos:end="36:30">-&gt;</operator><name pos:start="36:31" pos:end="36:42">cluster_bits</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="37:5" pos:end="37:52"><expr pos:start="37:5" pos:end="37:51"><name pos:start="37:5" pos:end="37:22"><name pos:start="37:5" pos:end="37:5">s</name><operator pos:start="37:6" pos:end="37:7">-&gt;</operator><name pos:start="37:8" pos:end="37:22">cluster_sectors</name></name> <operator pos:start="37:24" pos:end="37:24">=</operator> <literal type="number" pos:start="37:26" pos:end="37:26">1</literal> <operator pos:start="37:28" pos:end="37:29">&lt;&lt;</operator> <operator pos:start="37:31" pos:end="37:31">(</operator><name pos:start="37:32" pos:end="37:46"><name pos:start="37:32" pos:end="37:32">s</name><operator pos:start="37:33" pos:end="37:34">-&gt;</operator><name pos:start="37:35" pos:end="37:46">cluster_bits</name></name> <operator pos:start="37:48" pos:end="37:48">-</operator> <literal type="number" pos:start="37:50" pos:end="37:50">9</literal><operator pos:start="37:51" pos:end="37:51">)</operator></expr>;</expr_stmt>
    <expr_stmt pos:start="38:5" pos:end="38:32"><expr pos:start="38:5" pos:end="38:31"><name pos:start="38:5" pos:end="38:14"><name pos:start="38:5" pos:end="38:5">s</name><operator pos:start="38:6" pos:end="38:7">-&gt;</operator><name pos:start="38:8" pos:end="38:14">l2_bits</name></name> <operator pos:start="38:16" pos:end="38:16">=</operator> <name pos:start="38:18" pos:end="38:31"><name pos:start="38:18" pos:end="38:23">header</name><operator pos:start="38:24" pos:end="38:24">.</operator><name pos:start="38:25" pos:end="38:31">l2_bits</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="39:5" pos:end="39:33"><expr pos:start="39:5" pos:end="39:32"><name pos:start="39:5" pos:end="39:14"><name pos:start="39:5" pos:end="39:5">s</name><operator pos:start="39:6" pos:end="39:7">-&gt;</operator><name pos:start="39:8" pos:end="39:14">l2_size</name></name> <operator pos:start="39:16" pos:end="39:16">=</operator> <literal type="number" pos:start="39:18" pos:end="39:18">1</literal> <operator pos:start="39:20" pos:end="39:21">&lt;&lt;</operator> <name pos:start="39:23" pos:end="39:32"><name pos:start="39:23" pos:end="39:23">s</name><operator pos:start="39:24" pos:end="39:25">-&gt;</operator><name pos:start="39:26" pos:end="39:32">l2_bits</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="40:5" pos:end="40:42"><expr pos:start="40:5" pos:end="40:41"><name pos:start="40:5" pos:end="40:21"><name pos:start="40:5" pos:end="40:6">bs</name><operator pos:start="40:7" pos:end="40:8">-&gt;</operator><name pos:start="40:9" pos:end="40:21">total_sectors</name></name> <operator pos:start="40:23" pos:end="40:23">=</operator> <name pos:start="40:25" pos:end="40:35"><name pos:start="40:25" pos:end="40:30">header</name><operator pos:start="40:31" pos:end="40:31">.</operator><name pos:start="40:32" pos:end="40:35">size</name></name> <operator pos:start="40:37" pos:end="40:37">/</operator> <literal type="number" pos:start="40:39" pos:end="40:41">512</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="41:5" pos:end="41:65"><expr pos:start="41:5" pos:end="41:64"><name pos:start="41:5" pos:end="41:26"><name pos:start="41:5" pos:end="41:5">s</name><operator pos:start="41:6" pos:end="41:7">-&gt;</operator><name pos:start="41:8" pos:end="41:26">cluster_offset_mask</name></name> <operator pos:start="41:28" pos:end="41:28">=</operator> <operator pos:start="41:30" pos:end="41:30">(</operator><literal type="number" pos:start="41:31" pos:end="41:33">1LL</literal> <operator pos:start="41:35" pos:end="41:36">&lt;&lt;</operator> <operator pos:start="41:38" pos:end="41:38">(</operator><literal type="number" pos:start="41:39" pos:end="41:42">63</literal> <operator pos:start="41:42" pos:end="41:42">-</operator> <name pos:start="41:44" pos:end="41:58"><name pos:start="41:44" pos:end="41:44">s</name><operator pos:start="41:45" pos:end="41:46">-&gt;</operator><name pos:start="41:47" pos:end="41:58">cluster_bits</name></name><operator pos:start="41:59" pos:end="41:59">)</operator><operator pos:start="41:60" pos:end="41:60">)</operator> <operator pos:start="41:62" pos:end="41:62">-</operator> <literal type="number" pos:start="41:64" pos:end="41:64">1</literal></expr>;</expr_stmt>
    <comment type="block" pos:start="42:5" pos:end="42:32">/* read the level 1 table */</comment>
    <expr_stmt pos:start="43:5" pos:end="43:41"><expr pos:start="43:5" pos:end="43:40"><name pos:start="43:5" pos:end="43:9">shift</name> <operator pos:start="43:11" pos:end="43:11">=</operator> <name pos:start="43:13" pos:end="43:27"><name pos:start="43:13" pos:end="43:13">s</name><operator pos:start="43:14" pos:end="43:15">-&gt;</operator><name pos:start="43:16" pos:end="43:27">cluster_bits</name></name> <operator pos:start="43:29" pos:end="43:29">+</operator> <name pos:start="43:31" pos:end="43:40"><name pos:start="43:31" pos:end="43:31">s</name><operator pos:start="43:32" pos:end="43:33">-&gt;</operator><name pos:start="43:34" pos:end="43:40">l2_bits</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="44:5" pos:end="44:61"><expr pos:start="44:5" pos:end="44:60"><name pos:start="44:5" pos:end="44:14"><name pos:start="44:5" pos:end="44:5">s</name><operator pos:start="44:6" pos:end="44:7">-&gt;</operator><name pos:start="44:8" pos:end="44:14">l1_size</name></name> <operator pos:start="44:16" pos:end="44:16">=</operator> <operator pos:start="44:18" pos:end="44:18">(</operator><name pos:start="44:19" pos:end="44:29"><name pos:start="44:19" pos:end="44:24">header</name><operator pos:start="44:25" pos:end="44:25">.</operator><name pos:start="44:26" pos:end="44:29">size</name></name> <operator pos:start="44:31" pos:end="44:31">+</operator> <operator pos:start="44:33" pos:end="44:33">(</operator><literal type="number" pos:start="44:34" pos:end="44:36">1LL</literal> <operator pos:start="44:38" pos:end="44:39">&lt;&lt;</operator> <name pos:start="44:41" pos:end="44:45">shift</name><operator pos:start="44:46" pos:end="44:46">)</operator> <operator pos:start="44:48" pos:end="44:48">-</operator> <literal type="number" pos:start="44:50" pos:end="44:50">1</literal><operator pos:start="44:51" pos:end="44:51">)</operator> <operator pos:start="44:53" pos:end="44:54">&gt;&gt;</operator> <name pos:start="44:56" pos:end="44:60">shift</name></expr>;</expr_stmt>
    <expr_stmt pos:start="45:5" pos:end="45:48"><expr pos:start="45:5" pos:end="45:47"><name pos:start="45:5" pos:end="45:22"><name pos:start="45:5" pos:end="45:5">s</name><operator pos:start="45:6" pos:end="45:7">-&gt;</operator><name pos:start="45:8" pos:end="45:22">l1_table_offset</name></name> <operator pos:start="45:24" pos:end="45:24">=</operator> <name pos:start="45:26" pos:end="45:47"><name pos:start="45:26" pos:end="45:31">header</name><operator pos:start="45:32" pos:end="45:32">.</operator><name pos:start="45:33" pos:end="45:47">l1_table_offset</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="46:5" pos:end="46:58"><expr pos:start="46:5" pos:end="46:57"><name pos:start="46:5" pos:end="46:15"><name pos:start="46:5" pos:end="46:5">s</name><operator pos:start="46:6" pos:end="46:7">-&gt;</operator><name pos:start="46:8" pos:end="46:15">l1_table</name></name> <operator pos:start="46:17" pos:end="46:17">=</operator> <call pos:start="46:19" pos:end="46:57"><name pos:start="46:19" pos:end="46:26">g_malloc</name><argument_list pos:start="46:27" pos:end="46:57">(<argument pos:start="46:28" pos:end="46:56"><expr pos:start="46:28" pos:end="46:56"><name pos:start="46:28" pos:end="46:37"><name pos:start="46:28" pos:end="46:28">s</name><operator pos:start="46:29" pos:end="46:30">-&gt;</operator><name pos:start="46:31" pos:end="46:37">l1_size</name></name> <operator pos:start="46:39" pos:end="46:39">*</operator> <sizeof pos:start="46:41" pos:end="46:56">sizeof<argument_list pos:start="46:47" pos:end="46:56">(<argument pos:start="46:48" pos:end="46:55"><expr pos:start="46:48" pos:end="46:55"><name pos:start="46:48" pos:end="46:55">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="47:5" pos:end="48:46"><expr pos:start="47:5" pos:end="48:45"><name pos:start="47:5" pos:end="47:7">ret</name> <operator pos:start="47:9" pos:end="47:9">=</operator> <call pos:start="47:11" pos:end="48:45"><name pos:start="47:11" pos:end="47:20">bdrv_pread</name><argument_list pos:start="47:21" pos:end="48:45">(<argument pos:start="47:22" pos:end="47:29"><expr pos:start="47:22" pos:end="47:29"><name pos:start="47:22" pos:end="47:29"><name pos:start="47:22" pos:end="47:23">bs</name><operator pos:start="47:24" pos:end="47:25">-&gt;</operator><name pos:start="47:26" pos:end="47:29">file</name></name></expr></argument>, <argument pos:start="47:32" pos:end="47:49"><expr pos:start="47:32" pos:end="47:49"><name pos:start="47:32" pos:end="47:49"><name pos:start="47:32" pos:end="47:32">s</name><operator pos:start="47:33" pos:end="47:34">-&gt;</operator><name pos:start="47:35" pos:end="47:49">l1_table_offset</name></name></expr></argument>, <argument pos:start="47:52" pos:end="47:62"><expr pos:start="47:52" pos:end="47:62"><name pos:start="47:52" pos:end="47:62"><name pos:start="47:52" pos:end="47:52">s</name><operator pos:start="47:53" pos:end="47:54">-&gt;</operator><name pos:start="47:55" pos:end="47:62">l1_table</name></name></expr></argument>,
               <argument pos:start="48:16" pos:end="48:44"><expr pos:start="48:16" pos:end="48:44"><name pos:start="48:16" pos:end="48:25"><name pos:start="48:16" pos:end="48:16">s</name><operator pos:start="48:17" pos:end="48:18">-&gt;</operator><name pos:start="48:19" pos:end="48:25">l1_size</name></name> <operator pos:start="48:27" pos:end="48:27">*</operator> <sizeof pos:start="48:29" pos:end="48:44">sizeof<argument_list pos:start="48:35" pos:end="48:44">(<argument pos:start="48:36" pos:end="48:43"><expr pos:start="48:36" pos:end="48:43"><name pos:start="48:36" pos:end="48:43">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="49:5" pos:end="78:15"><if pos:start="49:5" pos:end="78:15">if <condition pos:start="49:8" pos:end="49:16">(<expr pos:start="49:9" pos:end="49:15"><name pos:start="49:9" pos:end="49:11">ret</name> <operator pos:start="49:13" pos:end="49:13">&lt;</operator> <literal type="number" pos:start="49:15" pos:end="49:15">0</literal></expr>)</condition> <block pos:start="49:18" pos:end="78:15">{<block_content pos:start="50:5" pos:end="78:15">
    <for pos:start="50:5" pos:end="78:15">for<control pos:start="50:8" pos:end="50:34">(<init pos:start="50:9" pos:end="50:14"><expr pos:start="50:9" pos:end="50:13"><name pos:start="50:9" pos:end="50:9">i</name> <operator pos:start="50:11" pos:end="50:11">=</operator> <literal type="number" pos:start="50:13" pos:end="50:13">0</literal></expr>;</init><condition pos:start="50:15" pos:end="50:29"><expr pos:start="50:15" pos:end="50:28"><name pos:start="50:15" pos:end="50:15">i</name> <operator pos:start="50:17" pos:end="50:17">&lt;</operator> <name pos:start="50:19" pos:end="50:28"><name pos:start="50:19" pos:end="50:19">s</name><operator pos:start="50:20" pos:end="50:21">-&gt;</operator><name pos:start="50:22" pos:end="50:28">l1_size</name></name></expr>;</condition> <incr pos:start="50:31" pos:end="50:33"><expr pos:start="50:31" pos:end="50:33"><name pos:start="50:31" pos:end="50:31">i</name><operator pos:start="50:32" pos:end="50:33">++</operator></expr></incr>)</control> <block pos:start="50:36" pos:end="78:15">{<block_content pos:start="51:9" pos:end="78:15">
        <expr_stmt pos:start="51:9" pos:end="51:38"><expr pos:start="51:9" pos:end="51:37"><call pos:start="51:9" pos:end="51:37"><name pos:start="51:9" pos:end="51:20">be64_to_cpus</name><argument_list pos:start="51:21" pos:end="51:37">(<argument pos:start="51:22" pos:end="51:36"><expr pos:start="51:22" pos:end="51:36"><operator pos:start="51:22" pos:end="51:22">&amp;</operator><name pos:start="51:23" pos:end="51:36"><name pos:start="51:23" pos:end="51:23">s</name><operator pos:start="51:24" pos:end="51:25">-&gt;</operator><name pos:start="51:26" pos:end="51:33">l1_table</name><index pos:start="51:34" pos:end="51:36">[<expr pos:start="51:35" pos:end="51:35"><name pos:start="51:35" pos:end="51:35">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="52:5" pos:end="52:24">/* alloc L2 cache */</comment>
    <expr_stmt pos:start="53:5" pos:end="53:74"><expr pos:start="53:5" pos:end="53:73"><name pos:start="53:5" pos:end="53:15"><name pos:start="53:5" pos:end="53:5">s</name><operator pos:start="53:6" pos:end="53:7">-&gt;</operator><name pos:start="53:8" pos:end="53:15">l2_cache</name></name> <operator pos:start="53:17" pos:end="53:17">=</operator> <call pos:start="53:19" pos:end="53:73"><name pos:start="53:19" pos:end="53:26">g_malloc</name><argument_list pos:start="53:27" pos:end="53:73">(<argument pos:start="53:28" pos:end="53:72"><expr pos:start="53:28" pos:end="53:72"><name pos:start="53:28" pos:end="53:37"><name pos:start="53:28" pos:end="53:28">s</name><operator pos:start="53:29" pos:end="53:30">-&gt;</operator><name pos:start="53:31" pos:end="53:37">l2_size</name></name> <operator pos:start="53:39" pos:end="53:39">*</operator> <name pos:start="53:41" pos:end="53:53">L2_CACHE_SIZE</name> <operator pos:start="53:55" pos:end="53:55">*</operator> <sizeof pos:start="53:57" pos:end="53:72">sizeof<argument_list pos:start="53:63" pos:end="53:72">(<argument pos:start="53:64" pos:end="53:71"><expr pos:start="53:64" pos:end="53:71"><name pos:start="53:64" pos:end="53:71">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="54:5" pos:end="54:49"><expr pos:start="54:5" pos:end="54:48"><name pos:start="54:5" pos:end="54:20"><name pos:start="54:5" pos:end="54:5">s</name><operator pos:start="54:6" pos:end="54:7">-&gt;</operator><name pos:start="54:8" pos:end="54:20">cluster_cache</name></name> <operator pos:start="54:22" pos:end="54:22">=</operator> <call pos:start="54:24" pos:end="54:48"><name pos:start="54:24" pos:end="54:31">g_malloc</name><argument_list pos:start="54:32" pos:end="54:48">(<argument pos:start="54:33" pos:end="54:47"><expr pos:start="54:33" pos:end="54:47"><name pos:start="54:33" pos:end="54:47"><name pos:start="54:33" pos:end="54:33">s</name><operator pos:start="54:34" pos:end="54:35">-&gt;</operator><name pos:start="54:36" pos:end="54:47">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="55:5" pos:end="55:48"><expr pos:start="55:5" pos:end="55:47"><name pos:start="55:5" pos:end="55:19"><name pos:start="55:5" pos:end="55:5">s</name><operator pos:start="55:6" pos:end="55:7">-&gt;</operator><name pos:start="55:8" pos:end="55:19">cluster_data</name></name> <operator pos:start="55:21" pos:end="55:21">=</operator> <call pos:start="55:23" pos:end="55:47"><name pos:start="55:23" pos:end="55:30">g_malloc</name><argument_list pos:start="55:31" pos:end="55:47">(<argument pos:start="55:32" pos:end="55:46"><expr pos:start="55:32" pos:end="55:46"><name pos:start="55:32" pos:end="55:46"><name pos:start="55:32" pos:end="55:32">s</name><operator pos:start="55:33" pos:end="55:34">-&gt;</operator><name pos:start="55:35" pos:end="55:46">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="56:5" pos:end="56:33"><expr pos:start="56:5" pos:end="56:32"><name pos:start="56:5" pos:end="56:27"><name pos:start="56:5" pos:end="56:5">s</name><operator pos:start="56:6" pos:end="56:7">-&gt;</operator><name pos:start="56:8" pos:end="56:27">cluster_cache_offset</name></name> <operator pos:start="56:29" pos:end="56:29">=</operator> <operator pos:start="56:31" pos:end="56:31">-</operator><literal type="number" pos:start="56:32" pos:end="56:32">1</literal></expr>;</expr_stmt>
    <comment type="block" pos:start="57:5" pos:end="57:36">/* read the backing file name */</comment>
    <if_stmt pos:start="58:5" pos:end="78:15"><if pos:start="58:5" pos:end="78:15">if <condition pos:start="58:8" pos:end="58:40">(<expr pos:start="58:9" pos:end="58:39"><name pos:start="58:9" pos:end="58:34"><name pos:start="58:9" pos:end="58:14">header</name><operator pos:start="58:15" pos:end="58:15">.</operator><name pos:start="58:16" pos:end="58:34">backing_file_offset</name></name> <operator pos:start="58:36" pos:end="58:37">!=</operator> <literal type="number" pos:start="58:39" pos:end="58:39">0</literal></expr>)</condition> <block pos:start="58:42" pos:end="78:15">{<block_content pos:start="59:9" pos:end="78:15">
        <expr_stmt pos:start="59:9" pos:end="59:39"><expr pos:start="59:9" pos:end="59:38"><name pos:start="59:9" pos:end="59:11">len</name> <operator pos:start="59:13" pos:end="59:13">=</operator> <name pos:start="59:15" pos:end="59:38"><name pos:start="59:15" pos:end="59:20">header</name><operator pos:start="59:21" pos:end="59:21">.</operator><name pos:start="59:22" pos:end="59:38">backing_file_size</name></name></expr>;</expr_stmt>
        <if_stmt pos:start="60:9" pos:end="78:15"><if pos:start="60:9" pos:end="78:15">if <condition pos:start="60:12" pos:end="60:23">(<expr pos:start="60:13" pos:end="60:22"><name pos:start="60:13" pos:end="60:15">len</name> <operator pos:start="60:17" pos:end="60:17">&gt;</operator> <literal type="number" pos:start="60:19" pos:end="60:22">1023</literal></expr>)</condition> <block pos:start="60:25" pos:end="78:15">{<block_content pos:start="61:13" pos:end="78:15">
            <expr_stmt pos:start="61:13" pos:end="61:23"><expr pos:start="61:13" pos:end="61:22"><name pos:start="61:13" pos:end="61:15">len</name> <operator pos:start="61:17" pos:end="61:17">=</operator> <literal type="number" pos:start="61:19" pos:end="61:22">1023</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="62:9" pos:end="63:42"><expr pos:start="62:9" pos:end="63:41"><name pos:start="62:9" pos:end="62:11">ret</name> <operator pos:start="62:13" pos:end="62:13">=</operator> <call pos:start="62:15" pos:end="63:41"><name pos:start="62:15" pos:end="62:24">bdrv_pread</name><argument_list pos:start="62:25" pos:end="63:41">(<argument pos:start="62:26" pos:end="62:33"><expr pos:start="62:26" pos:end="62:33"><name pos:start="62:26" pos:end="62:33"><name pos:start="62:26" pos:end="62:27">bs</name><operator pos:start="62:28" pos:end="62:29">-&gt;</operator><name pos:start="62:30" pos:end="62:33">file</name></name></expr></argument>, <argument pos:start="62:36" pos:end="62:61"><expr pos:start="62:36" pos:end="62:61"><name pos:start="62:36" pos:end="62:61"><name pos:start="62:36" pos:end="62:41">header</name><operator pos:start="62:42" pos:end="62:42">.</operator><name pos:start="62:43" pos:end="62:61">backing_file_offset</name></name></expr></argument>,
                   <argument pos:start="63:20" pos:end="63:35"><expr pos:start="63:20" pos:end="63:35"><name pos:start="63:20" pos:end="63:35"><name pos:start="63:20" pos:end="63:21">bs</name><operator pos:start="63:22" pos:end="63:23">-&gt;</operator><name pos:start="63:24" pos:end="63:35">backing_file</name></name></expr></argument>, <argument pos:start="63:38" pos:end="63:40"><expr pos:start="63:38" pos:end="63:40"><name pos:start="63:38" pos:end="63:40">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="64:9" pos:end="78:15"><if pos:start="64:9" pos:end="78:15">if <condition pos:start="64:12" pos:end="64:20">(<expr pos:start="64:13" pos:end="64:19"><name pos:start="64:13" pos:end="64:15">ret</name> <operator pos:start="64:17" pos:end="64:17">&lt;</operator> <literal type="number" pos:start="64:19" pos:end="64:19">0</literal></expr>)</condition> <block pos:start="64:22" pos:end="78:15">{<block_content pos:start="65:9" pos:end="78:15">
        <expr_stmt pos:start="65:9" pos:end="65:37"><expr pos:start="65:9" pos:end="65:36"><name pos:start="65:9" pos:end="65:29"><name pos:start="65:9" pos:end="65:10">bs</name><operator pos:start="65:11" pos:end="65:12">-&gt;</operator><name pos:start="65:13" pos:end="65:24">backing_file</name><index pos:start="65:25" pos:end="65:29">[<expr pos:start="65:26" pos:end="65:28"><name pos:start="65:26" pos:end="65:28">len</name></expr>]</index></name> <operator pos:start="65:31" pos:end="65:31">=</operator> <literal type="char" pos:start="65:33" pos:end="65:36">'\0'</literal></expr>;</expr_stmt>
    <comment type="block" pos:start="66:5" pos:end="66:53">/* Disable migration when qcow images are used */</comment>
    <expr_stmt pos:start="67:5" pos:end="69:57"><expr pos:start="67:5" pos:end="69:56"><call pos:start="67:5" pos:end="69:56"><name pos:start="67:5" pos:end="67:13">error_set</name><argument_list pos:start="67:14" pos:end="69:56">(<argument pos:start="67:15" pos:end="67:35"><expr pos:start="67:15" pos:end="67:35"><operator pos:start="67:15" pos:end="67:15">&amp;</operator><name pos:start="67:16" pos:end="67:35"><name pos:start="67:16" pos:end="67:16">s</name><operator pos:start="67:17" pos:end="67:18">-&gt;</operator><name pos:start="67:19" pos:end="67:35">migration_blocker</name></name></expr></argument>,
              <argument pos:start="68:15" pos:end="68:53"><expr pos:start="68:15" pos:end="68:53"><name pos:start="68:15" pos:end="68:53">QERR_BLOCK_FORMAT_FEATURE_NOT_SUPPORTED</name></expr></argument>,
              <argument pos:start="69:15" pos:end="69:20"><expr pos:start="69:15" pos:end="69:20"><literal type="string" pos:start="69:15" pos:end="69:20">"qcow"</literal></expr></argument>, <argument pos:start="69:23" pos:end="69:37"><expr pos:start="69:23" pos:end="69:37"><name pos:start="69:23" pos:end="69:37"><name pos:start="69:23" pos:end="69:24">bs</name><operator pos:start="69:25" pos:end="69:26">-&gt;</operator><name pos:start="69:27" pos:end="69:37">device_name</name></name></expr></argument>, <argument pos:start="69:40" pos:end="69:55"><expr pos:start="69:40" pos:end="69:55"><literal type="string" pos:start="69:40" pos:end="69:55">"live migration"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="70:5" pos:end="70:46"><expr pos:start="70:5" pos:end="70:45"><call pos:start="70:5" pos:end="70:45"><name pos:start="70:5" pos:end="70:23">migrate_add_blocker</name><argument_list pos:start="70:24" pos:end="70:45">(<argument pos:start="70:25" pos:end="70:44"><expr pos:start="70:25" pos:end="70:44"><name pos:start="70:25" pos:end="70:44"><name pos:start="70:25" pos:end="70:25">s</name><operator pos:start="70:26" pos:end="70:27">-&gt;</operator><name pos:start="70:28" pos:end="70:44">migration_blocker</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="71:5" pos:end="71:33"><expr pos:start="71:5" pos:end="71:32"><call pos:start="71:5" pos:end="71:32"><name pos:start="71:5" pos:end="71:22">qemu_co_mutex_init</name><argument_list pos:start="71:23" pos:end="71:32">(<argument pos:start="71:24" pos:end="71:31"><expr pos:start="71:24" pos:end="71:31"><operator pos:start="71:24" pos:end="71:24">&amp;</operator><name pos:start="71:25" pos:end="71:31"><name pos:start="71:25" pos:end="71:25">s</name><operator pos:start="71:26" pos:end="71:27">-&gt;</operator><name pos:start="71:28" pos:end="71:31">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="72:5" pos:end="72:13">return <expr pos:start="72:12" pos:end="72:12"><literal type="number" pos:start="72:12" pos:end="72:12">0</literal></expr>;</return>
 <label pos:start="73:2" pos:end="73:6"><name pos:start="73:2" pos:end="73:5">fail</name>:</label>
    <expr_stmt pos:start="74:5" pos:end="74:24"><expr pos:start="74:5" pos:end="74:23"><call pos:start="74:5" pos:end="74:23"><name pos:start="74:5" pos:end="74:10">g_free</name><argument_list pos:start="74:11" pos:end="74:23">(<argument pos:start="74:12" pos:end="74:22"><expr pos:start="74:12" pos:end="74:22"><name pos:start="74:12" pos:end="74:22"><name pos:start="74:12" pos:end="74:12">s</name><operator pos:start="74:13" pos:end="74:14">-&gt;</operator><name pos:start="74:15" pos:end="74:22">l1_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="75:5" pos:end="75:24"><expr pos:start="75:5" pos:end="75:23"><call pos:start="75:5" pos:end="75:23"><name pos:start="75:5" pos:end="75:10">g_free</name><argument_list pos:start="75:11" pos:end="75:23">(<argument pos:start="75:12" pos:end="75:22"><expr pos:start="75:12" pos:end="75:22"><name pos:start="75:12" pos:end="75:22"><name pos:start="75:12" pos:end="75:12">s</name><operator pos:start="75:13" pos:end="75:14">-&gt;</operator><name pos:start="75:15" pos:end="75:22">l2_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="76:5" pos:end="76:29"><expr pos:start="76:5" pos:end="76:28"><call pos:start="76:5" pos:end="76:28"><name pos:start="76:5" pos:end="76:10">g_free</name><argument_list pos:start="76:11" pos:end="76:28">(<argument pos:start="76:12" pos:end="76:27"><expr pos:start="76:12" pos:end="76:27"><name pos:start="76:12" pos:end="76:27"><name pos:start="76:12" pos:end="76:12">s</name><operator pos:start="76:13" pos:end="76:14">-&gt;</operator><name pos:start="76:15" pos:end="76:27">cluster_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="77:5" pos:end="77:28"><expr pos:start="77:5" pos:end="77:27"><call pos:start="77:5" pos:end="77:27"><name pos:start="77:5" pos:end="77:10">g_free</name><argument_list pos:start="77:11" pos:end="77:27">(<argument pos:start="77:12" pos:end="77:26"><expr pos:start="77:12" pos:end="77:26"><name pos:start="77:12" pos:end="77:26"><name pos:start="77:12" pos:end="77:12">s</name><operator pos:start="77:13" pos:end="77:14">-&gt;</operator><name pos:start="77:15" pos:end="77:26">cluster_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="78:5" pos:end="78:15">return <expr pos:start="78:12" pos:end="78:14"><name pos:start="78:12" pos:end="78:14">ret</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function></unit>
