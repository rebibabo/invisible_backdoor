<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21506.c" pos:tabs="8"><function pos:start="1:1" pos:end="183:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">get_packet</name><parameter_list pos:start="1:22" pos:end="1:52">(<parameter pos:start="1:23" pos:end="1:35"><decl pos:start="1:23" pos:end="1:35"><type pos:start="1:23" pos:end="1:35"><name pos:start="1:23" pos:end="1:32">URLContext</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:35">s</name></decl></parameter>, <parameter pos:start="1:38" pos:end="1:51"><decl pos:start="1:38" pos:end="1:51"><type pos:start="1:38" pos:end="1:51"><name pos:start="1:38" pos:end="1:40">int</name></type> <name pos:start="1:42" pos:end="1:51">for_header</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="183:1">{<block_content pos:start="5:5" pos:end="181:5">

    <decl_stmt pos:start="5:5" pos:end="5:35"><decl pos:start="5:5" pos:end="5:34"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">RTMPContext</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:19">rt</name> <init pos:start="5:21" pos:end="5:34">= <expr pos:start="5:23" pos:end="5:34"><name pos:start="5:23" pos:end="5:34"><name pos:start="5:23" pos:end="5:23">s</name><operator pos:start="5:24" pos:end="5:25">-&gt;</operator><name pos:start="5:26" pos:end="5:34">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:15"><decl pos:start="9:5" pos:end="9:14"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">uint8_t</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:14">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:24"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:19"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:17">uint8_t</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:23">next</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:22">data_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:15"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:15">ts</name></decl>, <decl pos:start="15:18" pos:end="15:20"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:18" pos:end="15:20">cts</name></decl>, <decl pos:start="15:23" pos:end="15:27"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:23" pos:end="15:25">pts</name><init pos:start="15:26" pos:end="15:27">=<expr pos:start="15:27" pos:end="15:27"><literal type="number" pos:start="15:27" pos:end="15:27">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="21:27"><if pos:start="19:5" pos:end="21:27">if <condition pos:start="19:8" pos:end="19:35">(<expr pos:start="19:9" pos:end="19:34"><name pos:start="19:9" pos:end="19:17"><name pos:start="19:9" pos:end="19:10">rt</name><operator pos:start="19:11" pos:end="19:12">-&gt;</operator><name pos:start="19:13" pos:end="19:17">state</name></name> <operator pos:start="19:19" pos:end="19:20">==</operator> <name pos:start="19:22" pos:end="19:34">STATE_STOPPED</name></expr>)</condition><block type="pseudo" pos:start="21:9" pos:end="21:27"><block_content pos:start="21:9" pos:end="21:27">

        <return pos:start="21:9" pos:end="21:27">return <expr pos:start="21:16" pos:end="21:26"><name pos:start="21:16" pos:end="21:26">AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>



    <for pos:start="25:5" pos:end="181:5">for <control pos:start="25:9" pos:end="25:12">(<init pos:start="25:10" pos:end="25:10">;</init><condition pos:start="25:11" pos:end="25:11">;</condition><incr/>)</control> <block pos:start="25:14" pos:end="181:5">{<block_content pos:start="27:9" pos:end="179:38">

        <decl_stmt pos:start="27:9" pos:end="27:32"><decl pos:start="27:9" pos:end="27:31"><type pos:start="27:9" pos:end="27:18"><name pos:start="27:9" pos:end="27:18">RTMPPacket</name></type> <name pos:start="27:20" pos:end="27:23">rpkt</name> <init pos:start="27:25" pos:end="27:31">= <expr pos:start="27:27" pos:end="27:31"><block pos:start="27:27" pos:end="27:31">{ <expr pos:start="27:29" pos:end="27:29"><literal type="number" pos:start="27:29" pos:end="27:29">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="29:9" pos:end="43:9"><if pos:start="29:9" pos:end="43:9">if <condition pos:start="29:12" pos:end="31:78">(<expr pos:start="29:13" pos:end="31:77"><operator pos:start="29:13" pos:end="29:13">(</operator><name pos:start="29:14" pos:end="29:16">ret</name> <operator pos:start="29:18" pos:end="29:18">=</operator> <call pos:start="29:20" pos:end="31:71"><name pos:start="29:20" pos:end="29:38">ff_rtmp_packet_read</name><argument_list pos:start="29:39" pos:end="31:71">(<argument pos:start="29:40" pos:end="29:49"><expr pos:start="29:40" pos:end="29:49"><name pos:start="29:40" pos:end="29:49"><name pos:start="29:40" pos:end="29:41">rt</name><operator pos:start="29:42" pos:end="29:43">-&gt;</operator><name pos:start="29:44" pos:end="29:49">stream</name></name></expr></argument>, <argument pos:start="29:52" pos:end="29:56"><expr pos:start="29:52" pos:end="29:56"><operator pos:start="29:52" pos:end="29:52">&amp;</operator><name pos:start="29:53" pos:end="29:56">rpkt</name></expr></argument>,

                                       <argument pos:start="31:40" pos:end="31:53"><expr pos:start="31:40" pos:end="31:53"><name pos:start="31:40" pos:end="31:53"><name pos:start="31:40" pos:end="31:41">rt</name><operator pos:start="31:42" pos:end="31:43">-&gt;</operator><name pos:start="31:44" pos:end="31:53">chunk_size</name></name></expr></argument>, <argument pos:start="31:56" pos:end="31:70"><expr pos:start="31:56" pos:end="31:70"><name pos:start="31:56" pos:end="31:70"><name pos:start="31:56" pos:end="31:57">rt</name><operator pos:start="31:58" pos:end="31:59">-&gt;</operator><name pos:start="31:60" pos:end="31:67">prev_pkt</name><index pos:start="31:68" pos:end="31:70">[<expr pos:start="31:69" pos:end="31:69"><literal type="number" pos:start="31:69" pos:end="31:69">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="31:72" pos:end="31:72">)</operator> <operator pos:start="31:74" pos:end="31:75">&lt;=</operator> <literal type="number" pos:start="31:77" pos:end="31:77">0</literal></expr>)</condition> <block pos:start="31:80" pos:end="43:9">{<block_content pos:start="33:13" pos:end="41:13">

            <if_stmt pos:start="33:13" pos:end="41:13"><if pos:start="33:13" pos:end="37:13">if <condition pos:start="33:16" pos:end="33:25">(<expr pos:start="33:17" pos:end="33:24"><name pos:start="33:17" pos:end="33:19">ret</name> <operator pos:start="33:21" pos:end="33:22">==</operator> <literal type="number" pos:start="33:24" pos:end="33:24">0</literal></expr>)</condition> <block pos:start="33:27" pos:end="37:13">{<block_content pos:start="35:17" pos:end="35:39">

                <return pos:start="35:17" pos:end="35:39">return <expr pos:start="35:24" pos:end="35:38"><call pos:start="35:24" pos:end="35:38"><name pos:start="35:24" pos:end="35:30">AVERROR</name><argument_list pos:start="35:31" pos:end="35:38">(<argument pos:start="35:32" pos:end="35:37"><expr pos:start="35:32" pos:end="35:37"><name pos:start="35:32" pos:end="35:37">EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return>

            </block_content>}</block></if> <else pos:start="37:15" pos:end="41:13">else <block pos:start="37:20" pos:end="41:13">{<block_content pos:start="39:17" pos:end="39:36">

                <return pos:start="39:17" pos:end="39:36">return <expr pos:start="39:24" pos:end="39:35"><call pos:start="39:24" pos:end="39:35"><name pos:start="39:24" pos:end="39:30">AVERROR</name><argument_list pos:start="39:31" pos:end="39:35">(<argument pos:start="39:32" pos:end="39:34"><expr pos:start="39:32" pos:end="39:34"><name pos:start="39:32" pos:end="39:34">EIO</name></expr></argument>)</argument_list></call></expr>;</return>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:30"><expr pos:start="45:9" pos:end="45:29"><name pos:start="45:9" pos:end="45:22"><name pos:start="45:9" pos:end="45:10">rt</name><operator pos:start="45:11" pos:end="45:12">-&gt;</operator><name pos:start="45:13" pos:end="45:22">bytes_read</name></name> <operator pos:start="45:24" pos:end="45:25">+=</operator> <name pos:start="45:27" pos:end="45:29">ret</name></expr>;</expr_stmt>

        <if_stmt pos:start="47:9" pos:end="55:9"><if pos:start="47:9" pos:end="55:9">if <condition pos:start="47:12" pos:end="47:74">(<expr pos:start="47:13" pos:end="47:73"><name pos:start="47:13" pos:end="47:26"><name pos:start="47:13" pos:end="47:14">rt</name><operator pos:start="47:15" pos:end="47:16">-&gt;</operator><name pos:start="47:17" pos:end="47:26">bytes_read</name></name> <operator pos:start="47:28" pos:end="47:28">&gt;</operator> <name pos:start="47:30" pos:end="47:48"><name pos:start="47:30" pos:end="47:31">rt</name><operator pos:start="47:32" pos:end="47:33">-&gt;</operator><name pos:start="47:34" pos:end="47:48">last_bytes_read</name></name> <operator pos:start="47:50" pos:end="47:50">+</operator> <name pos:start="47:52" pos:end="47:73"><name pos:start="47:52" pos:end="47:53">rt</name><operator pos:start="47:54" pos:end="47:55">-&gt;</operator><name pos:start="47:56" pos:end="47:73">client_report_size</name></name></expr>)</condition> <block pos:start="47:76" pos:end="55:9">{<block_content pos:start="49:13" pos:end="53:49">

            <expr_stmt pos:start="49:13" pos:end="49:67"><expr pos:start="49:13" pos:end="49:66"><call pos:start="49:13" pos:end="49:66"><name pos:start="49:13" pos:end="49:18">av_log</name><argument_list pos:start="49:19" pos:end="49:66">(<argument pos:start="49:20" pos:end="49:20"><expr pos:start="49:20" pos:end="49:20"><name pos:start="49:20" pos:end="49:20">s</name></expr></argument>, <argument pos:start="49:23" pos:end="49:34"><expr pos:start="49:23" pos:end="49:34"><name pos:start="49:23" pos:end="49:34">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="49:37" pos:end="49:65"><expr pos:start="49:37" pos:end="49:65"><literal type="string" pos:start="49:37" pos:end="49:65">"Sending bytes read report\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:54"><expr pos:start="51:13" pos:end="51:53"><call pos:start="51:13" pos:end="51:53"><name pos:start="51:13" pos:end="51:26">gen_bytes_read</name><argument_list pos:start="51:27" pos:end="51:53">(<argument pos:start="51:28" pos:end="51:28"><expr pos:start="51:28" pos:end="51:28"><name pos:start="51:28" pos:end="51:28">s</name></expr></argument>, <argument pos:start="51:31" pos:end="51:32"><expr pos:start="51:31" pos:end="51:32"><name pos:start="51:31" pos:end="51:32">rt</name></expr></argument>, <argument pos:start="51:35" pos:end="51:52"><expr pos:start="51:35" pos:end="51:52"><name pos:start="51:35" pos:end="51:48"><name pos:start="51:35" pos:end="51:38">rpkt</name><operator pos:start="51:39" pos:end="51:39">.</operator><name pos:start="51:40" pos:end="51:48">timestamp</name></name> <operator pos:start="51:50" pos:end="51:50">+</operator> <literal type="number" pos:start="51:52" pos:end="51:52">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:49"><expr pos:start="53:13" pos:end="53:48"><name pos:start="53:13" pos:end="53:31"><name pos:start="53:13" pos:end="53:14">rt</name><operator pos:start="53:15" pos:end="53:16">-&gt;</operator><name pos:start="53:17" pos:end="53:31">last_bytes_read</name></name> <operator pos:start="53:33" pos:end="53:33">=</operator> <name pos:start="53:35" pos:end="53:48"><name pos:start="53:35" pos:end="53:36">rt</name><operator pos:start="53:37" pos:end="53:38">-&gt;</operator><name pos:start="53:39" pos:end="53:48">bytes_read</name></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="59:9" pos:end="59:46"><expr pos:start="59:9" pos:end="59:45"><name pos:start="59:9" pos:end="59:11">ret</name> <operator pos:start="59:13" pos:end="59:13">=</operator> <call pos:start="59:15" pos:end="59:45"><name pos:start="59:15" pos:end="59:31">rtmp_parse_result</name><argument_list pos:start="59:32" pos:end="59:45">(<argument pos:start="59:33" pos:end="59:33"><expr pos:start="59:33" pos:end="59:33"><name pos:start="59:33" pos:end="59:33">s</name></expr></argument>, <argument pos:start="59:36" pos:end="59:37"><expr pos:start="59:36" pos:end="59:37"><name pos:start="59:36" pos:end="59:37">rt</name></expr></argument>, <argument pos:start="59:40" pos:end="59:44"><expr pos:start="59:40" pos:end="59:44"><operator pos:start="59:40" pos:end="59:40">&amp;</operator><name pos:start="59:41" pos:end="59:44">rpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="61:9" pos:end="67:9"><if pos:start="61:9" pos:end="67:9">if <condition pos:start="61:12" pos:end="61:20">(<expr pos:start="61:13" pos:end="61:19"><name pos:start="61:13" pos:end="61:15">ret</name> <operator pos:start="61:17" pos:end="61:17">&lt;</operator> <literal type="number" pos:start="61:19" pos:end="61:19">0</literal></expr>)</condition> <block pos:start="61:22" pos:end="67:9">{<block_content pos:start="63:13" pos:end="65:22"><comment type="line" pos:start="61:23" pos:end="61:55">//serious error in current packet</comment>

            <expr_stmt pos:start="63:13" pos:end="63:42"><expr pos:start="63:13" pos:end="63:41"><call pos:start="63:13" pos:end="63:41"><name pos:start="63:13" pos:end="63:34">ff_rtmp_packet_destroy</name><argument_list pos:start="63:35" pos:end="63:41">(<argument pos:start="63:36" pos:end="63:40"><expr pos:start="63:36" pos:end="63:40"><operator pos:start="63:36" pos:end="63:36">&amp;</operator><name pos:start="63:37" pos:end="63:40">rpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="65:13" pos:end="65:22">return <expr pos:start="65:20" pos:end="65:21"><operator pos:start="65:20" pos:end="65:20">-</operator><literal type="number" pos:start="65:21" pos:end="65:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="69:9" pos:end="75:9"><if pos:start="69:9" pos:end="75:9">if <condition pos:start="69:12" pos:end="69:39">(<expr pos:start="69:13" pos:end="69:38"><name pos:start="69:13" pos:end="69:21"><name pos:start="69:13" pos:end="69:14">rt</name><operator pos:start="69:15" pos:end="69:16">-&gt;</operator><name pos:start="69:17" pos:end="69:21">state</name></name> <operator pos:start="69:23" pos:end="69:24">==</operator> <name pos:start="69:26" pos:end="69:38">STATE_STOPPED</name></expr>)</condition> <block pos:start="69:41" pos:end="75:9">{<block_content pos:start="71:13" pos:end="73:31">

            <expr_stmt pos:start="71:13" pos:end="71:42"><expr pos:start="71:13" pos:end="71:41"><call pos:start="71:13" pos:end="71:41"><name pos:start="71:13" pos:end="71:34">ff_rtmp_packet_destroy</name><argument_list pos:start="71:35" pos:end="71:41">(<argument pos:start="71:36" pos:end="71:40"><expr pos:start="71:36" pos:end="71:40"><operator pos:start="71:36" pos:end="71:36">&amp;</operator><name pos:start="71:37" pos:end="71:40">rpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="73:13" pos:end="73:31">return <expr pos:start="73:20" pos:end="73:30"><name pos:start="73:20" pos:end="73:30">AVERROR_EOF</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="77:9" pos:end="83:9"><if pos:start="77:9" pos:end="83:9">if <condition pos:start="77:12" pos:end="77:88">(<expr pos:start="77:13" pos:end="77:87"><name pos:start="77:13" pos:end="77:22">for_header</name> <operator pos:start="77:24" pos:end="77:25">&amp;&amp;</operator> <operator pos:start="77:27" pos:end="77:27">(</operator><name pos:start="77:28" pos:end="77:36"><name pos:start="77:28" pos:end="77:29">rt</name><operator pos:start="77:30" pos:end="77:31">-&gt;</operator><name pos:start="77:32" pos:end="77:36">state</name></name> <operator pos:start="77:38" pos:end="77:39">==</operator> <name pos:start="77:41" pos:end="77:53">STATE_PLAYING</name> <operator pos:start="77:55" pos:end="77:56">||</operator> <name pos:start="77:58" pos:end="77:66"><name pos:start="77:58" pos:end="77:59">rt</name><operator pos:start="77:60" pos:end="77:61">-&gt;</operator><name pos:start="77:62" pos:end="77:66">state</name></name> <operator pos:start="77:68" pos:end="77:69">==</operator> <name pos:start="77:71" pos:end="77:86">STATE_PUBLISHING</name><operator pos:start="77:87" pos:end="77:87">)</operator></expr>)</condition> <block pos:start="77:90" pos:end="83:9">{<block_content pos:start="79:13" pos:end="81:21">

            <expr_stmt pos:start="79:13" pos:end="79:42"><expr pos:start="79:13" pos:end="79:41"><call pos:start="79:13" pos:end="79:41"><name pos:start="79:13" pos:end="79:34">ff_rtmp_packet_destroy</name><argument_list pos:start="79:35" pos:end="79:41">(<argument pos:start="79:36" pos:end="79:40"><expr pos:start="79:36" pos:end="79:40"><operator pos:start="79:36" pos:end="79:36">&amp;</operator><name pos:start="79:37" pos:end="79:40">rpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="81:13" pos:end="81:21">return <expr pos:start="81:20" pos:end="81:20"><literal type="number" pos:start="81:20" pos:end="81:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="85:9" pos:end="91:9"><if pos:start="85:9" pos:end="91:9">if <condition pos:start="85:12" pos:end="85:45">(<expr pos:start="85:13" pos:end="85:44"><operator pos:start="85:13" pos:end="85:13">!</operator><name pos:start="85:14" pos:end="85:27"><name pos:start="85:14" pos:end="85:17">rpkt</name><operator pos:start="85:18" pos:end="85:18">.</operator><name pos:start="85:19" pos:end="85:27">data_size</name></name> <operator pos:start="85:29" pos:end="85:30">||</operator> <operator pos:start="85:32" pos:end="85:32">!</operator><name pos:start="85:33" pos:end="85:44"><name pos:start="85:33" pos:end="85:34">rt</name><operator pos:start="85:35" pos:end="85:36">-&gt;</operator><name pos:start="85:37" pos:end="85:44">is_input</name></name></expr>)</condition> <block pos:start="85:47" pos:end="91:9">{<block_content pos:start="87:13" pos:end="89:21">

            <expr_stmt pos:start="87:13" pos:end="87:42"><expr pos:start="87:13" pos:end="87:41"><call pos:start="87:13" pos:end="87:41"><name pos:start="87:13" pos:end="87:34">ff_rtmp_packet_destroy</name><argument_list pos:start="87:35" pos:end="87:41">(<argument pos:start="87:36" pos:end="87:40"><expr pos:start="87:36" pos:end="87:40"><operator pos:start="87:36" pos:end="87:36">&amp;</operator><name pos:start="87:37" pos:end="87:40">rpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <continue pos:start="89:13" pos:end="89:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="93:9" pos:end="177:9"><if pos:start="93:9" pos:end="127:9">if <condition pos:start="93:12" pos:end="95:93">(<expr pos:start="93:13" pos:end="95:92"><name pos:start="93:13" pos:end="93:21"><name pos:start="93:13" pos:end="93:16">rpkt</name><operator pos:start="93:17" pos:end="93:17">.</operator><name pos:start="93:18" pos:end="93:21">type</name></name> <operator pos:start="93:23" pos:end="93:24">==</operator> <name pos:start="93:26" pos:end="93:38">RTMP_PT_VIDEO</name> <operator pos:start="93:40" pos:end="93:41">||</operator> <name pos:start="93:43" pos:end="93:51"><name pos:start="93:43" pos:end="93:46">rpkt</name><operator pos:start="93:47" pos:end="93:47">.</operator><name pos:start="93:48" pos:end="93:51">type</name></name> <operator pos:start="93:53" pos:end="93:54">==</operator> <name pos:start="93:56" pos:end="93:68">RTMP_PT_AUDIO</name> <operator pos:start="93:70" pos:end="93:71">||</operator>

           <operator pos:start="95:12" pos:end="95:12">(</operator><name pos:start="95:13" pos:end="95:21"><name pos:start="95:13" pos:end="95:16">rpkt</name><operator pos:start="95:17" pos:end="95:17">.</operator><name pos:start="95:18" pos:end="95:21">type</name></name> <operator pos:start="95:23" pos:end="95:24">==</operator> <name pos:start="95:26" pos:end="95:39">RTMP_PT_NOTIFY</name> <operator pos:start="95:41" pos:end="95:42">&amp;&amp;</operator> <operator pos:start="95:44" pos:end="95:44">!</operator><call pos:start="95:45" pos:end="95:91"><name pos:start="95:45" pos:end="95:50">memcmp</name><argument_list pos:start="95:51" pos:end="95:91">(<argument pos:start="95:52" pos:end="95:75"><expr pos:start="95:52" pos:end="95:75"><literal type="string" pos:start="95:52" pos:end="95:75">"\002\000\012onMetaData"</literal></expr></argument>, <argument pos:start="95:78" pos:end="95:86"><expr pos:start="95:78" pos:end="95:86"><name pos:start="95:78" pos:end="95:86"><name pos:start="95:78" pos:end="95:81">rpkt</name><operator pos:start="95:82" pos:end="95:82">.</operator><name pos:start="95:83" pos:end="95:86">data</name></name></expr></argument>, <argument pos:start="95:89" pos:end="95:90"><expr pos:start="95:89" pos:end="95:90"><literal type="number" pos:start="95:89" pos:end="95:90">13</literal></expr></argument>)</argument_list></call><operator pos:start="95:92" pos:end="95:92">)</operator></expr>)</condition> <block pos:start="95:95" pos:end="127:9">{<block_content pos:start="97:13" pos:end="125:21">

            <expr_stmt pos:start="97:13" pos:end="97:32"><expr pos:start="97:13" pos:end="97:31"><name pos:start="97:13" pos:end="97:14">ts</name> <operator pos:start="97:16" pos:end="97:16">=</operator> <name pos:start="97:18" pos:end="97:31"><name pos:start="97:18" pos:end="97:21">rpkt</name><operator pos:start="97:22" pos:end="97:22">.</operator><name pos:start="97:23" pos:end="97:31">timestamp</name></name></expr>;</expr_stmt>



            <comment type="line" pos:start="101:13" pos:end="101:78">// generate packet header and put data into buffer for FLV demuxer</comment>

            <expr_stmt pos:start="103:13" pos:end="103:29"><expr pos:start="103:13" pos:end="103:28"><name pos:start="103:13" pos:end="103:23"><name pos:start="103:13" pos:end="103:14">rt</name><operator pos:start="103:15" pos:end="103:16">-&gt;</operator><name pos:start="103:17" pos:end="103:23">flv_off</name></name>  <operator pos:start="103:26" pos:end="103:26">=</operator> <literal type="number" pos:start="103:28" pos:end="103:28">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="105:13" pos:end="105:47"><expr pos:start="105:13" pos:end="105:46"><name pos:start="105:13" pos:end="105:24"><name pos:start="105:13" pos:end="105:14">rt</name><operator pos:start="105:15" pos:end="105:16">-&gt;</operator><name pos:start="105:17" pos:end="105:24">flv_size</name></name> <operator pos:start="105:26" pos:end="105:26">=</operator> <name pos:start="105:28" pos:end="105:41"><name pos:start="105:28" pos:end="105:31">rpkt</name><operator pos:start="105:32" pos:end="105:32">.</operator><name pos:start="105:33" pos:end="105:41">data_size</name></name> <operator pos:start="105:43" pos:end="105:43">+</operator> <literal type="number" pos:start="105:45" pos:end="105:46">15</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="107:13" pos:end="107:70"><expr pos:start="107:13" pos:end="107:69"><name pos:start="107:13" pos:end="107:24"><name pos:start="107:13" pos:end="107:14">rt</name><operator pos:start="107:15" pos:end="107:16">-&gt;</operator><name pos:start="107:17" pos:end="107:24">flv_data</name></name> <operator pos:start="107:26" pos:end="107:26">=</operator> <name pos:start="107:28" pos:end="107:28">p</name> <operator pos:start="107:30" pos:end="107:30">=</operator> <call pos:start="107:32" pos:end="107:69"><name pos:start="107:32" pos:end="107:41">av_realloc</name><argument_list pos:start="107:42" pos:end="107:69">(<argument pos:start="107:43" pos:end="107:54"><expr pos:start="107:43" pos:end="107:54"><name pos:start="107:43" pos:end="107:54"><name pos:start="107:43" pos:end="107:44">rt</name><operator pos:start="107:45" pos:end="107:46">-&gt;</operator><name pos:start="107:47" pos:end="107:54">flv_data</name></name></expr></argument>, <argument pos:start="107:57" pos:end="107:68"><expr pos:start="107:57" pos:end="107:68"><name pos:start="107:57" pos:end="107:68"><name pos:start="107:57" pos:end="107:58">rt</name><operator pos:start="107:59" pos:end="107:60">-&gt;</operator><name pos:start="107:61" pos:end="107:68">flv_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="109:13" pos:end="109:47"><expr pos:start="109:13" pos:end="109:46"><call pos:start="109:13" pos:end="109:46"><name pos:start="109:13" pos:end="109:31">bytestream_put_byte</name><argument_list pos:start="109:32" pos:end="109:46">(<argument pos:start="109:33" pos:end="109:34"><expr pos:start="109:33" pos:end="109:34"><operator pos:start="109:33" pos:end="109:33">&amp;</operator><name pos:start="109:34" pos:end="109:34">p</name></expr></argument>, <argument pos:start="109:37" pos:end="109:45"><expr pos:start="109:37" pos:end="109:45"><name pos:start="109:37" pos:end="109:45"><name pos:start="109:37" pos:end="109:40">rpkt</name><operator pos:start="109:41" pos:end="109:41">.</operator><name pos:start="109:42" pos:end="109:45">type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:52"><expr pos:start="111:13" pos:end="111:51"><call pos:start="111:13" pos:end="111:51"><name pos:start="111:13" pos:end="111:31">bytestream_put_be24</name><argument_list pos:start="111:32" pos:end="111:51">(<argument pos:start="111:33" pos:end="111:34"><expr pos:start="111:33" pos:end="111:34"><operator pos:start="111:33" pos:end="111:33">&amp;</operator><name pos:start="111:34" pos:end="111:34">p</name></expr></argument>, <argument pos:start="111:37" pos:end="111:50"><expr pos:start="111:37" pos:end="111:50"><name pos:start="111:37" pos:end="111:50"><name pos:start="111:37" pos:end="111:40">rpkt</name><operator pos:start="111:41" pos:end="111:41">.</operator><name pos:start="111:42" pos:end="111:50">data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="113:13" pos:end="113:40"><expr pos:start="113:13" pos:end="113:39"><call pos:start="113:13" pos:end="113:39"><name pos:start="113:13" pos:end="113:31">bytestream_put_be24</name><argument_list pos:start="113:32" pos:end="113:39">(<argument pos:start="113:33" pos:end="113:34"><expr pos:start="113:33" pos:end="113:34"><operator pos:start="113:33" pos:end="113:33">&amp;</operator><name pos:start="113:34" pos:end="113:34">p</name></expr></argument>, <argument pos:start="113:37" pos:end="113:38"><expr pos:start="113:37" pos:end="113:38"><name pos:start="113:37" pos:end="113:38">ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="115:13" pos:end="115:46"><expr pos:start="115:13" pos:end="115:45"><call pos:start="115:13" pos:end="115:45"><name pos:start="115:13" pos:end="115:31">bytestream_put_byte</name><argument_list pos:start="115:32" pos:end="115:45">(<argument pos:start="115:33" pos:end="115:34"><expr pos:start="115:33" pos:end="115:34"><operator pos:start="115:33" pos:end="115:33">&amp;</operator><name pos:start="115:34" pos:end="115:34">p</name></expr></argument>, <argument pos:start="115:37" pos:end="115:44"><expr pos:start="115:37" pos:end="115:44"><name pos:start="115:37" pos:end="115:38">ts</name> <operator pos:start="115:40" pos:end="115:41">&gt;&gt;</operator> <literal type="number" pos:start="115:43" pos:end="115:44">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="117:13" pos:end="117:39"><expr pos:start="117:13" pos:end="117:38"><call pos:start="117:13" pos:end="117:38"><name pos:start="117:13" pos:end="117:31">bytestream_put_be24</name><argument_list pos:start="117:32" pos:end="117:38">(<argument pos:start="117:33" pos:end="117:34"><expr pos:start="117:33" pos:end="117:34"><operator pos:start="117:33" pos:end="117:33">&amp;</operator><name pos:start="117:34" pos:end="117:34">p</name></expr></argument>, <argument pos:start="117:37" pos:end="117:37"><expr pos:start="117:37" pos:end="117:37"><literal type="number" pos:start="117:37" pos:end="117:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:65"><expr pos:start="119:13" pos:end="119:64"><call pos:start="119:13" pos:end="119:64"><name pos:start="119:13" pos:end="119:33">bytestream_put_buffer</name><argument_list pos:start="119:34" pos:end="119:64">(<argument pos:start="119:35" pos:end="119:36"><expr pos:start="119:35" pos:end="119:36"><operator pos:start="119:35" pos:end="119:35">&amp;</operator><name pos:start="119:36" pos:end="119:36">p</name></expr></argument>, <argument pos:start="119:39" pos:end="119:47"><expr pos:start="119:39" pos:end="119:47"><name pos:start="119:39" pos:end="119:47"><name pos:start="119:39" pos:end="119:42">rpkt</name><operator pos:start="119:43" pos:end="119:43">.</operator><name pos:start="119:44" pos:end="119:47">data</name></name></expr></argument>, <argument pos:start="119:50" pos:end="119:63"><expr pos:start="119:50" pos:end="119:63"><name pos:start="119:50" pos:end="119:63"><name pos:start="119:50" pos:end="119:53">rpkt</name><operator pos:start="119:54" pos:end="119:54">.</operator><name pos:start="119:55" pos:end="119:63">data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="121:13" pos:end="121:39"><expr pos:start="121:13" pos:end="121:38"><call pos:start="121:13" pos:end="121:38"><name pos:start="121:13" pos:end="121:31">bytestream_put_be32</name><argument_list pos:start="121:32" pos:end="121:38">(<argument pos:start="121:33" pos:end="121:34"><expr pos:start="121:33" pos:end="121:34"><operator pos:start="121:33" pos:end="121:33">&amp;</operator><name pos:start="121:34" pos:end="121:34">p</name></expr></argument>, <argument pos:start="121:37" pos:end="121:37"><expr pos:start="121:37" pos:end="121:37"><literal type="number" pos:start="121:37" pos:end="121:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="123:13" pos:end="123:42"><expr pos:start="123:13" pos:end="123:41"><call pos:start="123:13" pos:end="123:41"><name pos:start="123:13" pos:end="123:34">ff_rtmp_packet_destroy</name><argument_list pos:start="123:35" pos:end="123:41">(<argument pos:start="123:36" pos:end="123:40"><expr pos:start="123:36" pos:end="123:40"><operator pos:start="123:36" pos:end="123:36">&amp;</operator><name pos:start="123:37" pos:end="123:40">rpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="125:13" pos:end="125:21">return <expr pos:start="125:20" pos:end="125:20"><literal type="number" pos:start="125:20" pos:end="125:20">0</literal></expr>;</return>

        </block_content>}</block></if> <if type="elseif" pos:start="127:11" pos:end="177:9">else if <condition pos:start="127:19" pos:end="127:49">(<expr pos:start="127:20" pos:end="127:48"><name pos:start="127:20" pos:end="127:28"><name pos:start="127:20" pos:end="127:23">rpkt</name><operator pos:start="127:24" pos:end="127:24">.</operator><name pos:start="127:25" pos:end="127:28">type</name></name> <operator pos:start="127:30" pos:end="127:31">==</operator> <name pos:start="127:33" pos:end="127:48">RTMP_PT_METADATA</name></expr>)</condition> <block pos:start="127:51" pos:end="177:9">{<block_content pos:start="131:13" pos:end="175:21">

            <comment type="line" pos:start="129:13" pos:end="129:69">// we got raw FLV data, make it available for FLV demuxer</comment>

            <expr_stmt pos:start="131:13" pos:end="131:29"><expr pos:start="131:13" pos:end="131:28"><name pos:start="131:13" pos:end="131:23"><name pos:start="131:13" pos:end="131:14">rt</name><operator pos:start="131:15" pos:end="131:16">-&gt;</operator><name pos:start="131:17" pos:end="131:23">flv_off</name></name>  <operator pos:start="131:26" pos:end="131:26">=</operator> <literal type="number" pos:start="131:28" pos:end="131:28">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="133:13" pos:end="133:42"><expr pos:start="133:13" pos:end="133:41"><name pos:start="133:13" pos:end="133:24"><name pos:start="133:13" pos:end="133:14">rt</name><operator pos:start="133:15" pos:end="133:16">-&gt;</operator><name pos:start="133:17" pos:end="133:24">flv_size</name></name> <operator pos:start="133:26" pos:end="133:26">=</operator> <name pos:start="133:28" pos:end="133:41"><name pos:start="133:28" pos:end="133:31">rpkt</name><operator pos:start="133:32" pos:end="133:32">.</operator><name pos:start="133:33" pos:end="133:41">data_size</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="135:13" pos:end="135:66"><expr pos:start="135:13" pos:end="135:65"><name pos:start="135:13" pos:end="135:24"><name pos:start="135:13" pos:end="135:14">rt</name><operator pos:start="135:15" pos:end="135:16">-&gt;</operator><name pos:start="135:17" pos:end="135:24">flv_data</name></name> <operator pos:start="135:26" pos:end="135:26">=</operator> <call pos:start="135:28" pos:end="135:65"><name pos:start="135:28" pos:end="135:37">av_realloc</name><argument_list pos:start="135:38" pos:end="135:65">(<argument pos:start="135:39" pos:end="135:50"><expr pos:start="135:39" pos:end="135:50"><name pos:start="135:39" pos:end="135:50"><name pos:start="135:39" pos:end="135:40">rt</name><operator pos:start="135:41" pos:end="135:42">-&gt;</operator><name pos:start="135:43" pos:end="135:50">flv_data</name></name></expr></argument>, <argument pos:start="135:53" pos:end="135:64"><expr pos:start="135:53" pos:end="135:64"><name pos:start="135:53" pos:end="135:64"><name pos:start="135:53" pos:end="135:54">rt</name><operator pos:start="135:55" pos:end="135:56">-&gt;</operator><name pos:start="135:57" pos:end="135:64">flv_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="137:13" pos:end="137:36">/* rewrite timestamps */</comment>

            <expr_stmt pos:start="139:13" pos:end="139:29"><expr pos:start="139:13" pos:end="139:28"><name pos:start="139:13" pos:end="139:16">next</name> <operator pos:start="139:18" pos:end="139:18">=</operator> <name pos:start="139:20" pos:end="139:28"><name pos:start="139:20" pos:end="139:23">rpkt</name><operator pos:start="139:24" pos:end="139:24">.</operator><name pos:start="139:25" pos:end="139:28">data</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="141:13" pos:end="141:32"><expr pos:start="141:13" pos:end="141:31"><name pos:start="141:13" pos:end="141:14">ts</name> <operator pos:start="141:16" pos:end="141:16">=</operator> <name pos:start="141:18" pos:end="141:31"><name pos:start="141:18" pos:end="141:21">rpkt</name><operator pos:start="141:22" pos:end="141:22">.</operator><name pos:start="141:23" pos:end="141:31">timestamp</name></name></expr>;</expr_stmt>

            <while pos:start="143:13" pos:end="169:13">while <condition pos:start="143:19" pos:end="143:58">(<expr pos:start="143:20" pos:end="143:57"><name pos:start="143:20" pos:end="143:23">next</name> <operator pos:start="143:25" pos:end="143:25">-</operator> <name pos:start="143:27" pos:end="143:35"><name pos:start="143:27" pos:end="143:30">rpkt</name><operator pos:start="143:31" pos:end="143:31">.</operator><name pos:start="143:32" pos:end="143:35">data</name></name> <operator pos:start="143:37" pos:end="143:37">&lt;</operator> <name pos:start="143:39" pos:end="143:52"><name pos:start="143:39" pos:end="143:42">rpkt</name><operator pos:start="143:43" pos:end="143:43">.</operator><name pos:start="143:44" pos:end="143:52">data_size</name></name> <operator pos:start="143:54" pos:end="143:54">-</operator> <literal type="number" pos:start="143:56" pos:end="143:57">11</literal></expr>)</condition> <block pos:start="143:60" pos:end="169:13">{<block_content pos:start="145:17" pos:end="167:42">

                <expr_stmt pos:start="145:17" pos:end="145:23"><expr pos:start="145:17" pos:end="145:22"><name pos:start="145:17" pos:end="145:20">next</name><operator pos:start="145:21" pos:end="145:22">++</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="147:17" pos:end="147:55"><expr pos:start="147:17" pos:end="147:54"><name pos:start="147:17" pos:end="147:25">data_size</name> <operator pos:start="147:27" pos:end="147:27">=</operator> <call pos:start="147:29" pos:end="147:54"><name pos:start="147:29" pos:end="147:47">bytestream_get_be24</name><argument_list pos:start="147:48" pos:end="147:54">(<argument pos:start="147:49" pos:end="147:53"><expr pos:start="147:49" pos:end="147:53"><operator pos:start="147:49" pos:end="147:49">&amp;</operator><name pos:start="147:50" pos:end="147:53">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="149:17" pos:end="149:23"><expr pos:start="149:17" pos:end="149:22"><name pos:start="149:17" pos:end="149:17">p</name><operator pos:start="149:18" pos:end="149:18">=</operator><name pos:start="149:19" pos:end="149:22">next</name></expr>;</expr_stmt>

                <expr_stmt pos:start="151:17" pos:end="151:49"><expr pos:start="151:17" pos:end="151:48"><name pos:start="151:17" pos:end="151:19">cts</name> <operator pos:start="151:21" pos:end="151:21">=</operator> <call pos:start="151:23" pos:end="151:48"><name pos:start="151:23" pos:end="151:41">bytestream_get_be24</name><argument_list pos:start="151:42" pos:end="151:48">(<argument pos:start="151:43" pos:end="151:47"><expr pos:start="151:43" pos:end="151:47"><operator pos:start="151:43" pos:end="151:43">&amp;</operator><name pos:start="151:44" pos:end="151:47">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="153:17" pos:end="153:56"><expr pos:start="153:17" pos:end="153:55"><name pos:start="153:17" pos:end="153:19">cts</name> <operator pos:start="153:21" pos:end="153:22">|=</operator> <call pos:start="153:24" pos:end="153:49"><name pos:start="153:24" pos:end="153:42">bytestream_get_byte</name><argument_list pos:start="153:43" pos:end="153:49">(<argument pos:start="153:44" pos:end="153:48"><expr pos:start="153:44" pos:end="153:48"><operator pos:start="153:44" pos:end="153:44">&amp;</operator><name pos:start="153:45" pos:end="153:48">next</name></expr></argument>)</argument_list></call> <operator pos:start="153:51" pos:end="153:52">&lt;&lt;</operator> <literal type="number" pos:start="153:54" pos:end="153:55">24</literal></expr>;</expr_stmt>

                <if_stmt pos:start="155:17" pos:end="157:28"><if pos:start="155:17" pos:end="157:28">if <condition pos:start="155:20" pos:end="155:27">(<expr pos:start="155:21" pos:end="155:26"><name pos:start="155:21" pos:end="155:23">pts</name><operator pos:start="155:24" pos:end="155:25">==</operator><literal type="number" pos:start="155:26" pos:end="155:26">0</literal></expr>)</condition><block type="pseudo" pos:start="157:21" pos:end="157:28"><block_content pos:start="157:21" pos:end="157:28">

                    <expr_stmt pos:start="157:21" pos:end="157:28"><expr pos:start="157:21" pos:end="157:27"><name pos:start="157:21" pos:end="157:23">pts</name><operator pos:start="157:24" pos:end="157:24">=</operator><name pos:start="157:25" pos:end="157:27">cts</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="159:17" pos:end="159:32"><expr pos:start="159:17" pos:end="159:31"><name pos:start="159:17" pos:end="159:18">ts</name> <operator pos:start="159:20" pos:end="159:21">+=</operator> <name pos:start="159:23" pos:end="159:25">cts</name> <operator pos:start="159:27" pos:end="159:27">-</operator> <name pos:start="159:29" pos:end="159:31">pts</name></expr>;</expr_stmt>

                <expr_stmt pos:start="161:17" pos:end="161:26"><expr pos:start="161:17" pos:end="161:25"><name pos:start="161:17" pos:end="161:19">pts</name> <operator pos:start="161:21" pos:end="161:21">=</operator> <name pos:start="161:23" pos:end="161:25">cts</name></expr>;</expr_stmt>

                <expr_stmt pos:start="163:17" pos:end="163:44"><expr pos:start="163:17" pos:end="163:43"><call pos:start="163:17" pos:end="163:43"><name pos:start="163:17" pos:end="163:35">bytestream_put_be24</name><argument_list pos:start="163:36" pos:end="163:43">(<argument pos:start="163:37" pos:end="163:38"><expr pos:start="163:37" pos:end="163:38"><operator pos:start="163:37" pos:end="163:37">&amp;</operator><name pos:start="163:38" pos:end="163:38">p</name></expr></argument>, <argument pos:start="163:41" pos:end="163:42"><expr pos:start="163:41" pos:end="163:42"><name pos:start="163:41" pos:end="163:42">ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="165:17" pos:end="165:50"><expr pos:start="165:17" pos:end="165:49"><call pos:start="165:17" pos:end="165:49"><name pos:start="165:17" pos:end="165:35">bytestream_put_byte</name><argument_list pos:start="165:36" pos:end="165:49">(<argument pos:start="165:37" pos:end="165:38"><expr pos:start="165:37" pos:end="165:38"><operator pos:start="165:37" pos:end="165:37">&amp;</operator><name pos:start="165:38" pos:end="165:38">p</name></expr></argument>, <argument pos:start="165:41" pos:end="165:48"><expr pos:start="165:41" pos:end="165:48"><name pos:start="165:41" pos:end="165:42">ts</name> <operator pos:start="165:44" pos:end="165:45">&gt;&gt;</operator> <literal type="number" pos:start="165:47" pos:end="165:48">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="167:17" pos:end="167:42"><expr pos:start="167:17" pos:end="167:41"><name pos:start="167:17" pos:end="167:20">next</name> <operator pos:start="167:22" pos:end="167:23">+=</operator> <name pos:start="167:25" pos:end="167:33">data_size</name> <operator pos:start="167:35" pos:end="167:35">+</operator> <literal type="number" pos:start="167:37" pos:end="167:39">3</literal> <operator pos:start="167:39" pos:end="167:39">+</operator> <literal type="number" pos:start="167:41" pos:end="167:41">4</literal></expr>;</expr_stmt>

            </block_content>}</block></while>

            <expr_stmt pos:start="171:13" pos:end="171:60"><expr pos:start="171:13" pos:end="171:59"><call pos:start="171:13" pos:end="171:59"><name pos:start="171:13" pos:end="171:18">memcpy</name><argument_list pos:start="171:19" pos:end="171:59">(<argument pos:start="171:20" pos:end="171:31"><expr pos:start="171:20" pos:end="171:31"><name pos:start="171:20" pos:end="171:31"><name pos:start="171:20" pos:end="171:21">rt</name><operator pos:start="171:22" pos:end="171:23">-&gt;</operator><name pos:start="171:24" pos:end="171:31">flv_data</name></name></expr></argument>, <argument pos:start="171:34" pos:end="171:42"><expr pos:start="171:34" pos:end="171:42"><name pos:start="171:34" pos:end="171:42"><name pos:start="171:34" pos:end="171:37">rpkt</name><operator pos:start="171:38" pos:end="171:38">.</operator><name pos:start="171:39" pos:end="171:42">data</name></name></expr></argument>, <argument pos:start="171:45" pos:end="171:58"><expr pos:start="171:45" pos:end="171:58"><name pos:start="171:45" pos:end="171:58"><name pos:start="171:45" pos:end="171:48">rpkt</name><operator pos:start="171:49" pos:end="171:49">.</operator><name pos:start="171:50" pos:end="171:58">data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="173:13" pos:end="173:42"><expr pos:start="173:13" pos:end="173:41"><call pos:start="173:13" pos:end="173:41"><name pos:start="173:13" pos:end="173:34">ff_rtmp_packet_destroy</name><argument_list pos:start="173:35" pos:end="173:41">(<argument pos:start="173:36" pos:end="173:40"><expr pos:start="173:36" pos:end="173:40"><operator pos:start="173:36" pos:end="173:36">&amp;</operator><name pos:start="173:37" pos:end="173:40">rpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="175:13" pos:end="175:21">return <expr pos:start="175:20" pos:end="175:20"><literal type="number" pos:start="175:20" pos:end="175:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="179:9" pos:end="179:38"><expr pos:start="179:9" pos:end="179:37"><call pos:start="179:9" pos:end="179:37"><name pos:start="179:9" pos:end="179:30">ff_rtmp_packet_destroy</name><argument_list pos:start="179:31" pos:end="179:37">(<argument pos:start="179:32" pos:end="179:36"><expr pos:start="179:32" pos:end="179:36"><operator pos:start="179:32" pos:end="179:32">&amp;</operator><name pos:start="179:33" pos:end="179:36">rpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
