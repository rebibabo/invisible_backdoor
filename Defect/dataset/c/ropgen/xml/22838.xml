<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22838.c" pos:tabs="8"><function pos:start="1:1" pos:end="60:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">test_blk_write</name><parameter_list pos:start="1:27" pos:end="3:61">(<parameter pos:start="1:28" pos:end="1:44"><decl pos:start="1:28" pos:end="1:44"><type pos:start="1:28" pos:end="1:44"><name pos:start="1:28" pos:end="1:39">BlockBackend</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:44">blk</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:58"><decl pos:start="1:47" pos:end="1:58"><type pos:start="1:47" pos:end="1:58"><name pos:start="1:47" pos:end="1:50">long</name></type> <name pos:start="1:52" pos:end="1:58">pattern</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:74"><decl pos:start="1:61" pos:end="1:74"><type pos:start="1:61" pos:end="1:74"><name pos:start="1:61" pos:end="1:67">int64_t</name></type> <name pos:start="1:69" pos:end="1:74">offset</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:40"><decl pos:start="3:28" pos:end="3:40"><type pos:start="3:28" pos:end="3:40"><name pos:start="3:28" pos:end="3:34">int64_t</name></type> <name pos:start="3:36" pos:end="3:40">count</name></decl></parameter>, <parameter pos:start="3:43" pos:end="3:60"><decl pos:start="3:43" pos:end="3:60"><type pos:start="3:43" pos:end="3:60"><name pos:start="3:43" pos:end="3:46">bool</name></type> <name pos:start="3:48" pos:end="3:60">expect_failed</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="60:1">{<block_content pos:start="7:5" pos:end="57:24">

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:28"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">void</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:21">pattern_buf</name> <init pos:start="7:23" pos:end="7:28">= <expr pos:start="7:25" pos:end="7:28"><name pos:start="7:25" pos:end="7:28">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:16">QEMUIOVector</name></type> <name pos:start="9:18" pos:end="9:21">qiov</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:29"><decl pos:start="11:5" pos:end="11:28"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:17">async_ret</name> <init pos:start="11:19" pos:end="11:28">= <expr pos:start="11:21" pos:end="11:28"><name pos:start="11:21" pos:end="11:28">NOT_DONE</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:34"><expr pos:start="15:5" pos:end="15:33"><name pos:start="15:5" pos:end="15:15">pattern_buf</name> <operator pos:start="15:17" pos:end="15:17">=</operator> <call pos:start="15:19" pos:end="15:33"><name pos:start="15:19" pos:end="15:26">g_malloc</name><argument_list pos:start="15:27" pos:end="15:33">(<argument pos:start="15:28" pos:end="15:32"><expr pos:start="15:28" pos:end="15:32"><name pos:start="15:28" pos:end="15:32">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="25:5"><if pos:start="17:5" pos:end="21:5">if <condition pos:start="17:8" pos:end="17:16">(<expr pos:start="17:9" pos:end="17:15"><name pos:start="17:9" pos:end="17:15">pattern</name></expr>)</condition> <block pos:start="17:18" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:44">

        <expr_stmt pos:start="19:9" pos:end="19:44"><expr pos:start="19:9" pos:end="19:43"><call pos:start="19:9" pos:end="19:43"><name pos:start="19:9" pos:end="19:14">memset</name><argument_list pos:start="19:15" pos:end="19:43">(<argument pos:start="19:16" pos:end="19:26"><expr pos:start="19:16" pos:end="19:26"><name pos:start="19:16" pos:end="19:26">pattern_buf</name></expr></argument>, <argument pos:start="19:29" pos:end="19:35"><expr pos:start="19:29" pos:end="19:35"><name pos:start="19:29" pos:end="19:35">pattern</name></expr></argument>, <argument pos:start="19:38" pos:end="19:42"><expr pos:start="19:38" pos:end="19:42"><name pos:start="19:38" pos:end="19:42">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="21:7" pos:end="25:5">else <block pos:start="21:12" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:41">

        <expr_stmt pos:start="23:9" pos:end="23:41"><expr pos:start="23:9" pos:end="23:40"><call pos:start="23:9" pos:end="23:40"><name pos:start="23:9" pos:end="23:14">memset</name><argument_list pos:start="23:15" pos:end="23:40">(<argument pos:start="23:16" pos:end="23:26"><expr pos:start="23:16" pos:end="23:26"><name pos:start="23:16" pos:end="23:26">pattern_buf</name></expr></argument>, <argument pos:start="23:29" pos:end="23:32"><expr pos:start="23:29" pos:end="23:32"><literal type="number" pos:start="23:29" pos:end="23:32">0x00</literal></expr></argument>, <argument pos:start="23:35" pos:end="23:39"><expr pos:start="23:35" pos:end="23:39"><name pos:start="23:35" pos:end="23:39">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:30"><expr pos:start="29:5" pos:end="29:29"><call pos:start="29:5" pos:end="29:29"><name pos:start="29:5" pos:end="29:19">qemu_iovec_init</name><argument_list pos:start="29:20" pos:end="29:29">(<argument pos:start="29:21" pos:end="29:25"><expr pos:start="29:21" pos:end="29:25"><operator pos:start="29:21" pos:end="29:21">&amp;</operator><name pos:start="29:22" pos:end="29:25">qiov</name></expr></argument>, <argument pos:start="29:28" pos:end="29:28"><expr pos:start="29:28" pos:end="29:28"><literal type="number" pos:start="29:28" pos:end="29:28">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:46"><expr pos:start="31:5" pos:end="31:45"><call pos:start="31:5" pos:end="31:45"><name pos:start="31:5" pos:end="31:18">qemu_iovec_add</name><argument_list pos:start="31:19" pos:end="31:45">(<argument pos:start="31:20" pos:end="31:24"><expr pos:start="31:20" pos:end="31:24"><operator pos:start="31:20" pos:end="31:20">&amp;</operator><name pos:start="31:21" pos:end="31:24">qiov</name></expr></argument>, <argument pos:start="31:27" pos:end="31:37"><expr pos:start="31:27" pos:end="31:37"><name pos:start="31:27" pos:end="31:37">pattern_buf</name></expr></argument>, <argument pos:start="31:40" pos:end="31:44"><expr pos:start="31:40" pos:end="31:44"><name pos:start="31:40" pos:end="31:44">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:68"><expr pos:start="35:5" pos:end="35:67"><call pos:start="35:5" pos:end="35:67"><name pos:start="35:5" pos:end="35:19">blk_aio_pwritev</name><argument_list pos:start="35:20" pos:end="35:67">(<argument pos:start="35:21" pos:end="35:23"><expr pos:start="35:21" pos:end="35:23"><name pos:start="35:21" pos:end="35:23">blk</name></expr></argument>, <argument pos:start="35:26" pos:end="35:31"><expr pos:start="35:26" pos:end="35:31"><name pos:start="35:26" pos:end="35:31">offset</name></expr></argument>, <argument pos:start="35:34" pos:end="35:38"><expr pos:start="35:34" pos:end="35:38"><operator pos:start="35:34" pos:end="35:34">&amp;</operator><name pos:start="35:35" pos:end="35:38">qiov</name></expr></argument>, <argument pos:start="35:41" pos:end="35:41"><expr pos:start="35:41" pos:end="35:41"><literal type="number" pos:start="35:41" pos:end="35:41">0</literal></expr></argument>, <argument pos:start="35:44" pos:end="35:54"><expr pos:start="35:44" pos:end="35:54"><name pos:start="35:44" pos:end="35:54">blk_rw_done</name></expr></argument>, <argument pos:start="35:57" pos:end="35:66"><expr pos:start="35:57" pos:end="35:66"><operator pos:start="35:57" pos:end="35:57">&amp;</operator><name pos:start="35:58" pos:end="35:66">async_ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while pos:start="37:5" pos:end="41:5">while <condition pos:start="37:11" pos:end="37:33">(<expr pos:start="37:12" pos:end="37:32"><name pos:start="37:12" pos:end="37:20">async_ret</name> <operator pos:start="37:22" pos:end="37:23">==</operator> <name pos:start="37:25" pos:end="37:32">NOT_DONE</name></expr>)</condition> <block pos:start="37:35" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:30">

        <expr_stmt pos:start="39:9" pos:end="39:30"><expr pos:start="39:9" pos:end="39:29"><call pos:start="39:9" pos:end="39:29"><name pos:start="39:9" pos:end="39:22">main_loop_wait</name><argument_list pos:start="39:23" pos:end="39:29">(<argument pos:start="39:24" pos:end="39:28"><expr pos:start="39:24" pos:end="39:28"><name pos:start="39:24" pos:end="39:28">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="45:5" pos:end="53:5"><if pos:start="45:5" pos:end="49:5">if <condition pos:start="45:8" pos:end="45:22">(<expr pos:start="45:9" pos:end="45:21"><name pos:start="45:9" pos:end="45:21">expect_failed</name></expr>)</condition> <block pos:start="45:24" pos:end="49:5">{<block_content pos:start="47:9" pos:end="47:33">

        <expr_stmt pos:start="47:9" pos:end="47:33"><expr pos:start="47:9" pos:end="47:32"><call pos:start="47:9" pos:end="47:32"><name pos:start="47:9" pos:end="47:16">g_assert</name><argument_list pos:start="47:17" pos:end="47:32">(<argument pos:start="47:18" pos:end="47:31"><expr pos:start="47:18" pos:end="47:31"><name pos:start="47:18" pos:end="47:26">async_ret</name> <operator pos:start="47:28" pos:end="47:29">!=</operator> <literal type="number" pos:start="47:31" pos:end="47:31">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="49:7" pos:end="53:5">else <block pos:start="49:12" pos:end="53:5">{<block_content pos:start="51:9" pos:end="51:33">

        <expr_stmt pos:start="51:9" pos:end="51:33"><expr pos:start="51:9" pos:end="51:32"><call pos:start="51:9" pos:end="51:32"><name pos:start="51:9" pos:end="51:16">g_assert</name><argument_list pos:start="51:17" pos:end="51:32">(<argument pos:start="51:18" pos:end="51:31"><expr pos:start="51:18" pos:end="51:31"><name pos:start="51:18" pos:end="51:26">async_ret</name> <operator pos:start="51:28" pos:end="51:29">==</operator> <literal type="number" pos:start="51:31" pos:end="51:31">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:24"><expr pos:start="57:5" pos:end="57:23"><call pos:start="57:5" pos:end="57:23"><name pos:start="57:5" pos:end="57:10">g_free</name><argument_list pos:start="57:11" pos:end="57:23">(<argument pos:start="57:12" pos:end="57:22"><expr pos:start="57:12" pos:end="57:22"><name pos:start="57:12" pos:end="57:22">pattern_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


</block_content>}</block></function></unit>
