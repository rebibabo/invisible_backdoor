<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/207.c" pos:tabs="8"><function pos:start="1:1" pos:end="47:1"><type pos:start="1:1" pos:end="1:24"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">bool</name> <name pos:start="1:13" pos:end="1:24">coroutine_fn</name></type> <name pos:start="1:26" pos:end="1:40">yield_and_check</name><parameter_list pos:start="1:41" pos:end="1:61">(<parameter pos:start="1:42" pos:end="1:60"><decl pos:start="1:42" pos:end="1:60"><type pos:start="1:42" pos:end="1:57"><name pos:start="1:42" pos:end="1:55">BackupBlockJob</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:60">job</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="47:1">{<block_content pos:start="5:5" pos:end="45:17">

    <if_stmt pos:start="5:5" pos:end="9:5"><if pos:start="5:5" pos:end="9:5">if <condition pos:start="5:8" pos:end="5:45">(<expr pos:start="5:9" pos:end="5:44"><call pos:start="5:9" pos:end="5:44"><name pos:start="5:9" pos:end="5:30">block_job_is_cancelled</name><argument_list pos:start="5:31" pos:end="5:44">(<argument pos:start="5:32" pos:end="5:43"><expr pos:start="5:32" pos:end="5:43"><operator pos:start="5:32" pos:end="5:32">&amp;</operator><name pos:start="5:33" pos:end="5:43"><name pos:start="5:33" pos:end="5:35">job</name><operator pos:start="5:36" pos:end="5:37">-&gt;</operator><name pos:start="5:38" pos:end="5:43">common</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="5:47" pos:end="9:5">{<block_content pos:start="7:9" pos:end="7:20">

        <return pos:start="7:9" pos:end="7:20">return <expr pos:start="7:16" pos:end="7:19"><name pos:start="7:16" pos:end="7:19">true</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="13:5" pos:end="17:7">/* we need to yield so that bdrv_drain_all() returns.

     * (without, VM does not reboot)

     */</comment>

    <if_stmt pos:start="19:5" pos:end="33:5"><if pos:start="19:5" pos:end="29:5">if <condition pos:start="19:8" pos:end="19:26">(<expr pos:start="19:9" pos:end="19:25"><name pos:start="19:9" pos:end="19:25"><name pos:start="19:9" pos:end="19:11">job</name><operator pos:start="19:12" pos:end="19:13">-&gt;</operator><name pos:start="19:14" pos:end="19:19">common</name><operator pos:start="19:20" pos:end="19:20">.</operator><name pos:start="19:21" pos:end="19:25">speed</name></name></expr>)</condition> <block pos:start="19:28" pos:end="29:5">{<block_content pos:start="21:9" pos:end="27:72">

        <decl_stmt pos:start="21:9" pos:end="23:73"><decl pos:start="21:9" pos:end="23:72"><type pos:start="21:9" pos:end="21:16"><name pos:start="21:9" pos:end="21:16">uint64_t</name></type> <name pos:start="21:18" pos:end="21:25">delay_ns</name> <init pos:start="21:27" pos:end="23:72">= <expr pos:start="21:29" pos:end="23:72"><call pos:start="21:29" pos:end="23:72"><name pos:start="21:29" pos:end="21:53">ratelimit_calculate_delay</name><argument_list pos:start="21:54" pos:end="23:72">(<argument pos:start="21:55" pos:end="21:65"><expr pos:start="21:55" pos:end="21:65"><operator pos:start="21:55" pos:end="21:55">&amp;</operator><name pos:start="21:56" pos:end="21:65"><name pos:start="21:56" pos:end="21:58">job</name><operator pos:start="21:59" pos:end="21:60">-&gt;</operator><name pos:start="21:61" pos:end="21:65">limit</name></name></expr></argument>,

                                                      <argument pos:start="23:55" pos:end="23:71"><expr pos:start="23:55" pos:end="23:71"><name pos:start="23:55" pos:end="23:71"><name pos:start="23:55" pos:end="23:57">job</name><operator pos:start="23:58" pos:end="23:59">-&gt;</operator><name pos:start="23:60" pos:end="23:71">sectors_read</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:30"><expr pos:start="25:9" pos:end="25:29"><name pos:start="25:9" pos:end="25:25"><name pos:start="25:9" pos:end="25:11">job</name><operator pos:start="25:12" pos:end="25:13">-&gt;</operator><name pos:start="25:14" pos:end="25:25">sectors_read</name></name> <operator pos:start="25:27" pos:end="25:27">=</operator> <literal type="number" pos:start="25:29" pos:end="25:29">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:72"><expr pos:start="27:9" pos:end="27:71"><call pos:start="27:9" pos:end="27:71"><name pos:start="27:9" pos:end="27:26">block_job_sleep_ns</name><argument_list pos:start="27:27" pos:end="27:71">(<argument pos:start="27:28" pos:end="27:39"><expr pos:start="27:28" pos:end="27:39"><operator pos:start="27:28" pos:end="27:28">&amp;</operator><name pos:start="27:29" pos:end="27:39"><name pos:start="27:29" pos:end="27:31">job</name><operator pos:start="27:32" pos:end="27:33">-&gt;</operator><name pos:start="27:34" pos:end="27:39">common</name></name></expr></argument>, <argument pos:start="27:42" pos:end="27:60"><expr pos:start="27:42" pos:end="27:60"><name pos:start="27:42" pos:end="27:60">QEMU_CLOCK_REALTIME</name></expr></argument>, <argument pos:start="27:63" pos:end="27:70"><expr pos:start="27:63" pos:end="27:70"><name pos:start="27:63" pos:end="27:70">delay_ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="29:7" pos:end="33:5">else <block pos:start="29:12" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:65">

        <expr_stmt pos:start="31:9" pos:end="31:65"><expr pos:start="31:9" pos:end="31:64"><call pos:start="31:9" pos:end="31:64"><name pos:start="31:9" pos:end="31:26">block_job_sleep_ns</name><argument_list pos:start="31:27" pos:end="31:64">(<argument pos:start="31:28" pos:end="31:39"><expr pos:start="31:28" pos:end="31:39"><operator pos:start="31:28" pos:end="31:28">&amp;</operator><name pos:start="31:29" pos:end="31:39"><name pos:start="31:29" pos:end="31:31">job</name><operator pos:start="31:32" pos:end="31:33">-&gt;</operator><name pos:start="31:34" pos:end="31:39">common</name></name></expr></argument>, <argument pos:start="31:42" pos:end="31:60"><expr pos:start="31:42" pos:end="31:60"><name pos:start="31:42" pos:end="31:60">QEMU_CLOCK_REALTIME</name></expr></argument>, <argument pos:start="31:63" pos:end="31:63"><expr pos:start="31:63" pos:end="31:63"><literal type="number" pos:start="31:63" pos:end="31:63">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="37:5" pos:end="41:5"><if pos:start="37:5" pos:end="41:5">if <condition pos:start="37:8" pos:end="37:45">(<expr pos:start="37:9" pos:end="37:44"><call pos:start="37:9" pos:end="37:44"><name pos:start="37:9" pos:end="37:30">block_job_is_cancelled</name><argument_list pos:start="37:31" pos:end="37:44">(<argument pos:start="37:32" pos:end="37:43"><expr pos:start="37:32" pos:end="37:43"><operator pos:start="37:32" pos:end="37:32">&amp;</operator><name pos:start="37:33" pos:end="37:43"><name pos:start="37:33" pos:end="37:35">job</name><operator pos:start="37:36" pos:end="37:37">-&gt;</operator><name pos:start="37:38" pos:end="37:43">common</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="37:47" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:20">

        <return pos:start="39:9" pos:end="39:20">return <expr pos:start="39:16" pos:end="39:19"><name pos:start="39:16" pos:end="39:19">true</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <return pos:start="45:5" pos:end="45:17">return <expr pos:start="45:12" pos:end="45:16"><name pos:start="45:12" pos:end="45:16">false</name></expr>;</return>

</block_content>}</block></function>
</unit>
