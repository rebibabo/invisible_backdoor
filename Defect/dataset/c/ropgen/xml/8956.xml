<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8956.c" pos:tabs="8"><function pos:start="1:1" pos:end="241:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:23">memory_dump</name><parameter_list pos:start="1:24" pos:end="3:65">(<parameter pos:start="1:25" pos:end="1:33"><decl pos:start="1:25" pos:end="1:33"><type pos:start="1:25" pos:end="1:33"><name pos:start="1:25" pos:end="1:27">int</name></type> <name pos:start="1:29" pos:end="1:33">count</name></decl></parameter>, <parameter pos:start="1:36" pos:end="1:45"><decl pos:start="1:36" pos:end="1:45"><type pos:start="1:36" pos:end="1:45"><name pos:start="1:36" pos:end="1:38">int</name></type> <name pos:start="1:40" pos:end="1:45">format</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:56"><decl pos:start="1:48" pos:end="1:56"><type pos:start="1:48" pos:end="1:56"><name pos:start="1:48" pos:end="1:50">int</name></type> <name pos:start="1:52" pos:end="1:56">wsize</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:47"><decl pos:start="3:25" pos:end="3:47"><type pos:start="3:25" pos:end="3:47"><name pos:start="3:25" pos:end="3:42">target_phys_addr_t</name></type> <name pos:start="3:44" pos:end="3:47">addr</name></decl></parameter>, <parameter pos:start="3:50" pos:end="3:64"><decl pos:start="3:50" pos:end="3:64"><type pos:start="3:50" pos:end="3:64"><name pos:start="3:50" pos:end="3:52">int</name></type> <name pos:start="3:54" pos:end="3:64">is_physical</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="241:1">{<block_content pos:start="7:5" pos:end="239:5">

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">CPUState</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:17">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:54"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:19">nb_per_line</name></decl>, <decl pos:start="9:22" pos:end="9:22"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:22" pos:end="9:22">l</name></decl>, <decl pos:start="9:25" pos:end="9:33"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:25" pos:end="9:33">line_size</name></decl>, <decl pos:start="9:36" pos:end="9:36"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:36" pos:end="9:36">i</name></decl>, <decl pos:start="9:39" pos:end="9:48"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:39" pos:end="9:48">max_digits</name></decl>, <decl pos:start="9:51" pos:end="9:53"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:51" pos:end="9:53">len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:20"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">uint8_t</name></type> <name pos:start="11:13" pos:end="11:19"><name pos:start="11:13" pos:end="11:15">buf</name><index pos:start="11:16" pos:end="11:19">[<expr pos:start="11:17" pos:end="11:18"><literal type="number" pos:start="11:17" pos:end="11:18">16</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:15"><decl pos:start="13:5" pos:end="13:14"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:14">v</name></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="73:5"><if pos:start="17:5" pos:end="73:5">if <condition pos:start="17:8" pos:end="17:22">(<expr pos:start="17:9" pos:end="17:21"><name pos:start="17:9" pos:end="17:14">format</name> <operator pos:start="17:16" pos:end="17:17">==</operator> <literal type="char" pos:start="17:19" pos:end="17:21">'i'</literal></expr>)</condition> <block pos:start="17:24" pos:end="73:5">{<block_content pos:start="19:9" pos:end="71:15">

        <decl_stmt pos:start="19:9" pos:end="19:18"><decl pos:start="19:9" pos:end="19:17"><type pos:start="19:9" pos:end="19:11"><name pos:start="19:9" pos:end="19:11">int</name></type> <name pos:start="19:13" pos:end="19:17">flags</name></decl>;</decl_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:18"><expr pos:start="21:9" pos:end="21:17"><name pos:start="21:9" pos:end="21:13">flags</name> <operator pos:start="21:15" pos:end="21:15">=</operator> <literal type="number" pos:start="21:17" pos:end="21:17">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:28"><expr pos:start="23:9" pos:end="23:27"><name pos:start="23:9" pos:end="23:11">env</name> <operator pos:start="23:13" pos:end="23:13">=</operator> <call pos:start="23:15" pos:end="23:27"><name pos:start="23:15" pos:end="23:25">mon_get_cpu</name><argument_list pos:start="23:26" pos:end="23:27">()</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="25:9" pos:end="30:0"><if pos:start="25:9" pos:end="30:0">if <condition pos:start="25:12" pos:end="25:33">(<expr pos:start="25:13" pos:end="25:32"><operator pos:start="25:13" pos:end="25:13">!</operator><name pos:start="25:14" pos:end="25:16">env</name> <operator pos:start="25:18" pos:end="25:19">&amp;&amp;</operator> <operator pos:start="25:21" pos:end="25:21">!</operator><name pos:start="25:22" pos:end="25:32">is_physical</name></expr>)</condition><block type="pseudo" pos:start="27:13" pos:end="30:0"><block_content pos:start="27:13" pos:end="30:0">

            <return pos:start="27:13" pos:end="30:0">return;</return></block_content></block></if></if_stmt>

<cpp:ifdef pos:start="29:1" pos:end="29:18">#<cpp:directive pos:start="29:2" pos:end="29:6">ifdef</cpp:directive> <name pos:start="29:8" pos:end="29:18">TARGET_I386</name></cpp:ifdef>

        <if_stmt pos:start="31:9" pos:end="68:0"><if pos:start="31:9" pos:end="35:9">if <condition pos:start="31:12" pos:end="31:23">(<expr pos:start="31:13" pos:end="31:22"><name pos:start="31:13" pos:end="31:17">wsize</name> <operator pos:start="31:19" pos:end="31:20">==</operator> <literal type="number" pos:start="31:22" pos:end="31:22">2</literal></expr>)</condition> <block pos:start="31:25" pos:end="35:9">{<block_content pos:start="33:13" pos:end="33:22">

            <expr_stmt pos:start="33:13" pos:end="33:22"><expr pos:start="33:13" pos:end="33:21"><name pos:start="33:13" pos:end="33:17">flags</name> <operator pos:start="33:19" pos:end="33:19">=</operator> <literal type="number" pos:start="33:21" pos:end="33:21">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="35:11" pos:end="39:9">else if <condition pos:start="35:19" pos:end="35:30">(<expr pos:start="35:20" pos:end="35:29"><name pos:start="35:20" pos:end="35:24">wsize</name> <operator pos:start="35:26" pos:end="35:27">==</operator> <literal type="number" pos:start="35:29" pos:end="35:29">4</literal></expr>)</condition> <block pos:start="35:32" pos:end="39:9">{<block_content pos:start="37:13" pos:end="37:22">

            <expr_stmt pos:start="37:13" pos:end="37:22"><expr pos:start="37:13" pos:end="37:21"><name pos:start="37:13" pos:end="37:17">flags</name> <operator pos:start="37:19" pos:end="37:19">=</operator> <literal type="number" pos:start="37:21" pos:end="37:21">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="39:11" pos:end="68:0">else <block pos:start="39:16" pos:end="68:0">{<block_content pos:start="43:13" pos:end="63:13">

            <comment type="block" pos:start="41:13" pos:end="41:55">/* as default we use the current CS size */</comment>

            <expr_stmt pos:start="43:13" pos:end="43:22"><expr pos:start="43:13" pos:end="43:21"><name pos:start="43:13" pos:end="43:17">flags</name> <operator pos:start="43:19" pos:end="43:19">=</operator> <literal type="number" pos:start="43:21" pos:end="43:21">0</literal></expr>;</expr_stmt>

            <if_stmt pos:start="45:13" pos:end="63:13"><if pos:start="45:13" pos:end="63:13">if <condition pos:start="45:16" pos:end="45:20">(<expr pos:start="45:17" pos:end="45:19"><name pos:start="45:17" pos:end="45:19">env</name></expr>)</condition> <block pos:start="45:22" pos:end="63:13">{<block_content pos:start="49:17" pos:end="61:30">

<cpp:ifdef pos:start="47:1" pos:end="47:20">#<cpp:directive pos:start="47:2" pos:end="47:6">ifdef</cpp:directive> <name pos:start="47:8" pos:end="47:20">TARGET_X86_64</name></cpp:ifdef>

                <if_stmt pos:start="49:17" pos:end="61:30"><if pos:start="49:17" pos:end="53:30">if <condition pos:start="49:20" pos:end="51:58">(<expr pos:start="49:21" pos:end="51:57"><operator pos:start="49:21" pos:end="49:21">(</operator><name pos:start="49:22" pos:end="49:30"><name pos:start="49:22" pos:end="49:24">env</name><operator pos:start="49:25" pos:end="49:26">-&gt;</operator><name pos:start="49:27" pos:end="49:30">efer</name></name> <operator pos:start="49:32" pos:end="49:32">&amp;</operator> <name pos:start="49:34" pos:end="49:45">MSR_EFER_LMA</name><operator pos:start="49:46" pos:end="49:46">)</operator> <operator pos:start="49:48" pos:end="49:49">&amp;&amp;</operator>

                    <operator pos:start="51:21" pos:end="51:21">(</operator><name pos:start="51:22" pos:end="51:36"><name pos:start="51:22" pos:end="51:24">env</name><operator pos:start="51:25" pos:end="51:26">-&gt;</operator><name pos:start="51:27" pos:end="51:30">segs</name><index pos:start="51:31" pos:end="51:36">[<expr pos:start="51:32" pos:end="51:35"><name pos:start="51:32" pos:end="51:35">R_CS</name></expr>]</index></name><operator pos:start="51:37" pos:end="51:37">.</operator><name pos:start="51:38" pos:end="51:42">flags</name> <operator pos:start="51:44" pos:end="51:44">&amp;</operator> <name pos:start="51:46" pos:end="51:56">DESC_L_MASK</name><operator pos:start="51:57" pos:end="51:57">)</operator></expr>)</condition><block type="pseudo" pos:start="53:21" pos:end="53:30"><block_content pos:start="53:21" pos:end="53:30">

                    <expr_stmt pos:start="53:21" pos:end="53:30"><expr pos:start="53:21" pos:end="53:29"><name pos:start="53:21" pos:end="53:25">flags</name> <operator pos:start="53:27" pos:end="53:27">=</operator> <literal type="number" pos:start="53:29" pos:end="53:29">2</literal></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="55:17" pos:end="61:30">else

<cpp:endif pos:start="57:1" pos:end="57:6">#<cpp:directive pos:start="57:2" pos:end="57:6">endif</cpp:directive></cpp:endif>

                if <condition pos:start="59:20" pos:end="59:59">(<expr pos:start="59:21" pos:end="59:58"><operator pos:start="59:21" pos:end="59:21">!</operator><operator pos:start="59:22" pos:end="59:22">(</operator><name pos:start="59:23" pos:end="59:37"><name pos:start="59:23" pos:end="59:25">env</name><operator pos:start="59:26" pos:end="59:27">-&gt;</operator><name pos:start="59:28" pos:end="59:31">segs</name><index pos:start="59:32" pos:end="59:37">[<expr pos:start="59:33" pos:end="59:36"><name pos:start="59:33" pos:end="59:36">R_CS</name></expr>]</index></name><operator pos:start="59:38" pos:end="59:38">.</operator><name pos:start="59:39" pos:end="59:43">flags</name> <operator pos:start="59:45" pos:end="59:45">&amp;</operator> <name pos:start="59:47" pos:end="59:57">DESC_B_MASK</name><operator pos:start="59:58" pos:end="59:58">)</operator></expr>)</condition><block type="pseudo" pos:start="61:21" pos:end="61:30"><block_content pos:start="61:21" pos:end="61:30">

                    <expr_stmt pos:start="61:21" pos:end="61:30"><expr pos:start="61:21" pos:end="61:29"><name pos:start="61:21" pos:end="61:25">flags</name> <operator pos:start="61:27" pos:end="61:27">=</operator> <literal type="number" pos:start="61:29" pos:end="61:29">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

<cpp:endif pos:start="67:1" pos:end="67:6">#<cpp:directive pos:start="67:2" pos:end="67:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="69:9" pos:end="69:60"><expr pos:start="69:9" pos:end="69:59"><call pos:start="69:9" pos:end="69:59"><name pos:start="69:9" pos:end="69:21">monitor_disas</name><argument_list pos:start="69:22" pos:end="69:59">(<argument pos:start="69:23" pos:end="69:25"><expr pos:start="69:23" pos:end="69:25"><name pos:start="69:23" pos:end="69:25">env</name></expr></argument>, <argument pos:start="69:28" pos:end="69:31"><expr pos:start="69:28" pos:end="69:31"><name pos:start="69:28" pos:end="69:31">addr</name></expr></argument>, <argument pos:start="69:34" pos:end="69:38"><expr pos:start="69:34" pos:end="69:38"><name pos:start="69:34" pos:end="69:38">count</name></expr></argument>, <argument pos:start="69:41" pos:end="69:51"><expr pos:start="69:41" pos:end="69:51"><name pos:start="69:41" pos:end="69:51">is_physical</name></expr></argument>, <argument pos:start="69:54" pos:end="69:58"><expr pos:start="69:54" pos:end="69:58"><name pos:start="69:54" pos:end="69:58">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="71:9" pos:end="71:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:24"><expr pos:start="77:5" pos:end="77:23"><name pos:start="77:5" pos:end="77:7">len</name> <operator pos:start="77:9" pos:end="77:9">=</operator> <name pos:start="77:11" pos:end="77:15">wsize</name> <operator pos:start="77:17" pos:end="77:17">*</operator> <name pos:start="77:19" pos:end="77:23">count</name></expr>;</expr_stmt>

    <if_stmt pos:start="79:5" pos:end="85:23"><if pos:start="79:5" pos:end="81:22">if <condition pos:start="79:8" pos:end="79:19">(<expr pos:start="79:9" pos:end="79:18"><name pos:start="79:9" pos:end="79:13">wsize</name> <operator pos:start="79:15" pos:end="79:16">==</operator> <literal type="number" pos:start="79:18" pos:end="79:18">1</literal></expr>)</condition><block type="pseudo" pos:start="81:9" pos:end="81:22"><block_content pos:start="81:9" pos:end="81:22">

        <expr_stmt pos:start="81:9" pos:end="81:22"><expr pos:start="81:9" pos:end="81:21"><name pos:start="81:9" pos:end="81:17">line_size</name> <operator pos:start="81:19" pos:end="81:19">=</operator> <literal type="number" pos:start="81:21" pos:end="81:21">8</literal></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="83:5" pos:end="85:23">else<block type="pseudo" pos:start="85:9" pos:end="85:23"><block_content pos:start="85:9" pos:end="85:23">

        <expr_stmt pos:start="85:9" pos:end="85:23"><expr pos:start="85:9" pos:end="85:22"><name pos:start="85:9" pos:end="85:17">line_size</name> <operator pos:start="85:19" pos:end="85:19">=</operator> <literal type="number" pos:start="85:21" pos:end="85:22">16</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:36"><expr pos:start="87:5" pos:end="87:35"><name pos:start="87:5" pos:end="87:15">nb_per_line</name> <operator pos:start="87:17" pos:end="87:17">=</operator> <name pos:start="87:19" pos:end="87:27">line_size</name> <operator pos:start="87:29" pos:end="87:29">/</operator> <name pos:start="87:31" pos:end="87:35">wsize</name></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:19"><expr pos:start="89:5" pos:end="89:18"><name pos:start="89:5" pos:end="89:14">max_digits</name> <operator pos:start="89:16" pos:end="89:16">=</operator> <literal type="number" pos:start="89:18" pos:end="89:18">0</literal></expr>;</expr_stmt>



    <switch pos:start="93:5" pos:end="123:5">switch<condition pos:start="93:11" pos:end="93:18">(<expr pos:start="93:12" pos:end="93:17"><name pos:start="93:12" pos:end="93:17">format</name></expr>)</condition> <block pos:start="93:20" pos:end="123:5">{<block_content pos:start="95:5" pos:end="121:14">

    <case pos:start="95:5" pos:end="95:13">case <expr pos:start="95:10" pos:end="95:12"><literal type="char" pos:start="95:10" pos:end="95:12">'o'</literal></expr>:</case>

        <expr_stmt pos:start="97:9" pos:end="97:41"><expr pos:start="97:9" pos:end="97:40"><name pos:start="97:9" pos:end="97:18">max_digits</name> <operator pos:start="97:20" pos:end="97:20">=</operator> <operator pos:start="97:22" pos:end="97:22">(</operator><name pos:start="97:23" pos:end="97:27">wsize</name> <operator pos:start="97:29" pos:end="97:29">*</operator> <literal type="number" pos:start="97:31" pos:end="97:33">8</literal> <operator pos:start="97:33" pos:end="97:33">+</operator> <literal type="number" pos:start="97:35" pos:end="97:35">2</literal><operator pos:start="97:36" pos:end="97:36">)</operator> <operator pos:start="97:38" pos:end="97:38">/</operator> <literal type="number" pos:start="97:40" pos:end="97:40">3</literal></expr>;</expr_stmt>

        <break pos:start="99:9" pos:end="99:14">break;</break>

    <default pos:start="101:5" pos:end="101:12">default:</default>

    <case pos:start="103:5" pos:end="103:13">case <expr pos:start="103:10" pos:end="103:12"><literal type="char" pos:start="103:10" pos:end="103:12">'x'</literal></expr>:</case>

        <expr_stmt pos:start="105:9" pos:end="105:37"><expr pos:start="105:9" pos:end="105:36"><name pos:start="105:9" pos:end="105:18">max_digits</name> <operator pos:start="105:20" pos:end="105:20">=</operator> <operator pos:start="105:22" pos:end="105:22">(</operator><name pos:start="105:23" pos:end="105:27">wsize</name> <operator pos:start="105:29" pos:end="105:29">*</operator> <literal type="number" pos:start="105:31" pos:end="105:31">8</literal><operator pos:start="105:32" pos:end="105:32">)</operator> <operator pos:start="105:34" pos:end="105:34">/</operator> <literal type="number" pos:start="105:36" pos:end="105:36">4</literal></expr>;</expr_stmt>

        <break pos:start="107:9" pos:end="107:14">break;</break>

    <case pos:start="109:5" pos:end="109:13">case <expr pos:start="109:10" pos:end="109:12"><literal type="char" pos:start="109:10" pos:end="109:12">'u'</literal></expr>:</case>

    <case pos:start="111:5" pos:end="111:13">case <expr pos:start="111:10" pos:end="111:12"><literal type="char" pos:start="111:10" pos:end="111:12">'d'</literal></expr>:</case>

        <expr_stmt pos:start="113:9" pos:end="113:48"><expr pos:start="113:9" pos:end="113:47"><name pos:start="113:9" pos:end="113:18">max_digits</name> <operator pos:start="113:20" pos:end="113:20">=</operator> <operator pos:start="113:22" pos:end="113:22">(</operator><name pos:start="113:23" pos:end="113:27">wsize</name> <operator pos:start="113:29" pos:end="113:29">*</operator> <literal type="number" pos:start="113:31" pos:end="113:31">8</literal> <operator pos:start="113:33" pos:end="113:33">*</operator> <literal type="number" pos:start="113:35" pos:end="113:38">10</literal> <operator pos:start="113:38" pos:end="113:38">+</operator> <literal type="number" pos:start="113:40" pos:end="113:41">32</literal><operator pos:start="113:42" pos:end="113:42">)</operator> <operator pos:start="113:44" pos:end="113:44">/</operator> <literal type="number" pos:start="113:46" pos:end="113:47">33</literal></expr>;</expr_stmt>

        <break pos:start="115:9" pos:end="115:14">break;</break>

    <case pos:start="117:5" pos:end="117:13">case <expr pos:start="117:10" pos:end="117:12"><literal type="char" pos:start="117:10" pos:end="117:12">'c'</literal></expr>:</case>

        <expr_stmt pos:start="119:9" pos:end="119:18"><expr pos:start="119:9" pos:end="119:17"><name pos:start="119:9" pos:end="119:13">wsize</name> <operator pos:start="119:15" pos:end="119:15">=</operator> <literal type="number" pos:start="119:17" pos:end="119:17">1</literal></expr>;</expr_stmt>

        <break pos:start="121:9" pos:end="121:14">break;</break>

    </block_content>}</block></switch>



    <while pos:start="127:5" pos:end="239:5">while <condition pos:start="127:11" pos:end="127:19">(<expr pos:start="127:12" pos:end="127:18"><name pos:start="127:12" pos:end="127:14">len</name> <operator pos:start="127:16" pos:end="127:16">&gt;</operator> <literal type="number" pos:start="127:18" pos:end="127:18">0</literal></expr>)</condition> <block pos:start="127:21" pos:end="239:5">{<block_content pos:start="129:9" pos:end="237:17">

        <if_stmt pos:start="129:9" pos:end="135:63"><if pos:start="129:9" pos:end="131:50">if <condition pos:start="129:12" pos:end="129:24">(<expr pos:start="129:13" pos:end="129:23"><name pos:start="129:13" pos:end="129:23">is_physical</name></expr>)</condition><block type="pseudo" pos:start="131:13" pos:end="131:50"><block_content pos:start="131:13" pos:end="131:50">

            <expr_stmt pos:start="131:13" pos:end="131:50"><expr pos:start="131:13" pos:end="131:49"><call pos:start="131:13" pos:end="131:49"><name pos:start="131:13" pos:end="131:23">term_printf</name><argument_list pos:start="131:24" pos:end="131:49">(<argument pos:start="131:25" pos:end="131:42"><expr pos:start="131:25" pos:end="131:42"><name pos:start="131:25" pos:end="131:38">TARGET_FMT_plx</name> <literal type="string" pos:start="131:40" pos:end="131:42">":"</literal></expr></argument>, <argument pos:start="131:45" pos:end="131:48"><expr pos:start="131:45" pos:end="131:48"><name pos:start="131:45" pos:end="131:48">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="133:9" pos:end="135:63">else<block type="pseudo" pos:start="135:13" pos:end="135:63"><block_content pos:start="135:13" pos:end="135:63">

            <expr_stmt pos:start="135:13" pos:end="135:63"><expr pos:start="135:13" pos:end="135:62"><call pos:start="135:13" pos:end="135:62"><name pos:start="135:13" pos:end="135:23">term_printf</name><argument_list pos:start="135:24" pos:end="135:62">(<argument pos:start="135:25" pos:end="135:41"><expr pos:start="135:25" pos:end="135:41"><name pos:start="135:25" pos:end="135:37">TARGET_FMT_lx</name> <literal type="string" pos:start="135:39" pos:end="135:41">":"</literal></expr></argument>, <argument pos:start="135:44" pos:end="135:61"><expr pos:start="135:44" pos:end="135:61"><operator pos:start="135:44" pos:end="135:44">(</operator><name pos:start="135:45" pos:end="135:56">target_ulong</name><operator pos:start="135:57" pos:end="135:57">)</operator><name pos:start="135:58" pos:end="135:61">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:16"><expr pos:start="137:9" pos:end="137:15"><name pos:start="137:9" pos:end="137:9">l</name> <operator pos:start="137:11" pos:end="137:11">=</operator> <name pos:start="137:13" pos:end="137:15">len</name></expr>;</expr_stmt>

        <if_stmt pos:start="139:9" pos:end="141:26"><if pos:start="139:9" pos:end="141:26">if <condition pos:start="139:12" pos:end="139:26">(<expr pos:start="139:13" pos:end="139:25"><name pos:start="139:13" pos:end="139:13">l</name> <operator pos:start="139:15" pos:end="139:15">&gt;</operator> <name pos:start="139:17" pos:end="139:25">line_size</name></expr>)</condition><block type="pseudo" pos:start="141:13" pos:end="141:26"><block_content pos:start="141:13" pos:end="141:26">

            <expr_stmt pos:start="141:13" pos:end="141:26"><expr pos:start="141:13" pos:end="141:25"><name pos:start="141:13" pos:end="141:13">l</name> <operator pos:start="141:15" pos:end="141:15">=</operator> <name pos:start="141:17" pos:end="141:25">line_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="143:9" pos:end="157:9"><if pos:start="143:9" pos:end="147:9">if <condition pos:start="143:12" pos:end="143:24">(<expr pos:start="143:13" pos:end="143:23"><name pos:start="143:13" pos:end="143:23">is_physical</name></expr>)</condition> <block pos:start="143:26" pos:end="147:9">{<block_content pos:start="145:13" pos:end="145:52">

            <expr_stmt pos:start="145:13" pos:end="145:52"><expr pos:start="145:13" pos:end="145:51"><call pos:start="145:13" pos:end="145:51"><name pos:start="145:13" pos:end="145:34">cpu_physical_memory_rw</name><argument_list pos:start="145:35" pos:end="145:51">(<argument pos:start="145:36" pos:end="145:39"><expr pos:start="145:36" pos:end="145:39"><name pos:start="145:36" pos:end="145:39">addr</name></expr></argument>, <argument pos:start="145:42" pos:end="145:44"><expr pos:start="145:42" pos:end="145:44"><name pos:start="145:42" pos:end="145:44">buf</name></expr></argument>, <argument pos:start="145:47" pos:end="145:47"><expr pos:start="145:47" pos:end="145:47"><name pos:start="145:47" pos:end="145:47">l</name></expr></argument>, <argument pos:start="145:50" pos:end="145:50"><expr pos:start="145:50" pos:end="145:50"><literal type="number" pos:start="145:50" pos:end="145:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="147:11" pos:end="157:9">else <block pos:start="147:16" pos:end="157:9">{<block_content pos:start="149:13" pos:end="155:54">

            <expr_stmt pos:start="149:13" pos:end="149:32"><expr pos:start="149:13" pos:end="149:31"><name pos:start="149:13" pos:end="149:15">env</name> <operator pos:start="149:17" pos:end="149:17">=</operator> <call pos:start="149:19" pos:end="149:31"><name pos:start="149:19" pos:end="149:29">mon_get_cpu</name><argument_list pos:start="149:30" pos:end="149:31">()</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="151:13" pos:end="153:22"><if pos:start="151:13" pos:end="153:22">if <condition pos:start="151:16" pos:end="151:21">(<expr pos:start="151:17" pos:end="151:20"><operator pos:start="151:17" pos:end="151:17">!</operator><name pos:start="151:18" pos:end="151:20">env</name></expr>)</condition><block type="pseudo" pos:start="153:17" pos:end="153:22"><block_content pos:start="153:17" pos:end="153:22">

                <break pos:start="153:17" pos:end="153:22">break;</break></block_content></block></if></if_stmt>

            <expr_stmt pos:start="155:13" pos:end="155:54"><expr pos:start="155:13" pos:end="155:53"><call pos:start="155:13" pos:end="155:53"><name pos:start="155:13" pos:end="155:31">cpu_memory_rw_debug</name><argument_list pos:start="155:32" pos:end="155:53">(<argument pos:start="155:33" pos:end="155:35"><expr pos:start="155:33" pos:end="155:35"><name pos:start="155:33" pos:end="155:35">env</name></expr></argument>, <argument pos:start="155:38" pos:end="155:41"><expr pos:start="155:38" pos:end="155:41"><name pos:start="155:38" pos:end="155:41">addr</name></expr></argument>, <argument pos:start="155:44" pos:end="155:46"><expr pos:start="155:44" pos:end="155:46"><name pos:start="155:44" pos:end="155:46">buf</name></expr></argument>, <argument pos:start="155:49" pos:end="155:49"><expr pos:start="155:49" pos:end="155:49"><name pos:start="155:49" pos:end="155:49">l</name></expr></argument>, <argument pos:start="155:52" pos:end="155:52"><expr pos:start="155:52" pos:end="155:52"><literal type="number" pos:start="155:52" pos:end="155:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="159:9" pos:end="159:14"><expr pos:start="159:9" pos:end="159:13"><name pos:start="159:9" pos:end="159:9">i</name> <operator pos:start="159:11" pos:end="159:11">=</operator> <literal type="number" pos:start="159:13" pos:end="159:13">0</literal></expr>;</expr_stmt>

        <while pos:start="161:9" pos:end="231:9">while <condition pos:start="161:15" pos:end="161:21">(<expr pos:start="161:16" pos:end="161:20"><name pos:start="161:16" pos:end="161:16">i</name> <operator pos:start="161:18" pos:end="161:18">&lt;</operator> <name pos:start="161:20" pos:end="161:20">l</name></expr>)</condition> <block pos:start="161:23" pos:end="231:9">{<block_content pos:start="163:13" pos:end="229:23">

            <switch pos:start="163:13" pos:end="191:13">switch<condition pos:start="163:19" pos:end="163:25">(<expr pos:start="163:20" pos:end="163:24"><name pos:start="163:20" pos:end="163:24">wsize</name></expr>)</condition> <block pos:start="163:27" pos:end="191:13">{<block_content pos:start="165:13" pos:end="189:22">

            <default pos:start="165:13" pos:end="165:20">default:</default>

            <case pos:start="167:13" pos:end="167:19">case <expr pos:start="167:18" pos:end="167:18"><literal type="number" pos:start="167:18" pos:end="167:18">1</literal></expr>:</case>

                <expr_stmt pos:start="169:17" pos:end="169:38"><expr pos:start="169:17" pos:end="169:37"><name pos:start="169:17" pos:end="169:17">v</name> <operator pos:start="169:19" pos:end="169:19">=</operator> <call pos:start="169:21" pos:end="169:37"><name pos:start="169:21" pos:end="169:28">ldub_raw</name><argument_list pos:start="169:29" pos:end="169:37">(<argument pos:start="169:30" pos:end="169:36"><expr pos:start="169:30" pos:end="169:36"><name pos:start="169:30" pos:end="169:32">buf</name> <operator pos:start="169:34" pos:end="169:34">+</operator> <name pos:start="169:36" pos:end="169:36">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="171:17" pos:end="171:22">break;</break>

            <case pos:start="173:13" pos:end="173:19">case <expr pos:start="173:18" pos:end="173:18"><literal type="number" pos:start="173:18" pos:end="173:18">2</literal></expr>:</case>

                <expr_stmt pos:start="175:17" pos:end="175:38"><expr pos:start="175:17" pos:end="175:37"><name pos:start="175:17" pos:end="175:17">v</name> <operator pos:start="175:19" pos:end="175:19">=</operator> <call pos:start="175:21" pos:end="175:37"><name pos:start="175:21" pos:end="175:28">lduw_raw</name><argument_list pos:start="175:29" pos:end="175:37">(<argument pos:start="175:30" pos:end="175:36"><expr pos:start="175:30" pos:end="175:36"><name pos:start="175:30" pos:end="175:32">buf</name> <operator pos:start="175:34" pos:end="175:34">+</operator> <name pos:start="175:36" pos:end="175:36">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="177:17" pos:end="177:22">break;</break>

            <case pos:start="179:13" pos:end="179:19">case <expr pos:start="179:18" pos:end="179:18"><literal type="number" pos:start="179:18" pos:end="179:18">4</literal></expr>:</case>

                <expr_stmt pos:start="181:17" pos:end="181:47"><expr pos:start="181:17" pos:end="181:46"><name pos:start="181:17" pos:end="181:17">v</name> <operator pos:start="181:19" pos:end="181:19">=</operator> <operator pos:start="181:21" pos:end="181:21">(</operator><name pos:start="181:22" pos:end="181:29">uint32_t</name><operator pos:start="181:30" pos:end="181:30">)</operator><call pos:start="181:31" pos:end="181:46"><name pos:start="181:31" pos:end="181:37">ldl_raw</name><argument_list pos:start="181:38" pos:end="181:46">(<argument pos:start="181:39" pos:end="181:45"><expr pos:start="181:39" pos:end="181:45"><name pos:start="181:39" pos:end="181:41">buf</name> <operator pos:start="181:43" pos:end="181:43">+</operator> <name pos:start="181:45" pos:end="181:45">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="183:17" pos:end="183:22">break;</break>

            <case pos:start="185:13" pos:end="185:19">case <expr pos:start="185:18" pos:end="185:18"><literal type="number" pos:start="185:18" pos:end="185:18">8</literal></expr>:</case>

                <expr_stmt pos:start="187:17" pos:end="187:37"><expr pos:start="187:17" pos:end="187:36"><name pos:start="187:17" pos:end="187:17">v</name> <operator pos:start="187:19" pos:end="187:19">=</operator> <call pos:start="187:21" pos:end="187:36"><name pos:start="187:21" pos:end="187:27">ldq_raw</name><argument_list pos:start="187:28" pos:end="187:36">(<argument pos:start="187:29" pos:end="187:35"><expr pos:start="187:29" pos:end="187:35"><name pos:start="187:29" pos:end="187:31">buf</name> <operator pos:start="187:33" pos:end="187:33">+</operator> <name pos:start="187:35" pos:end="187:35">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="189:17" pos:end="189:22">break;</break>

            </block_content>}</block></switch>

            <expr_stmt pos:start="193:13" pos:end="193:29"><expr pos:start="193:13" pos:end="193:28"><call pos:start="193:13" pos:end="193:28"><name pos:start="193:13" pos:end="193:23">term_printf</name><argument_list pos:start="193:24" pos:end="193:28">(<argument pos:start="193:25" pos:end="193:27"><expr pos:start="193:25" pos:end="193:27"><literal type="string" pos:start="193:25" pos:end="193:27">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <switch pos:start="195:13" pos:end="227:13">switch<condition pos:start="195:19" pos:end="195:26">(<expr pos:start="195:20" pos:end="195:25"><name pos:start="195:20" pos:end="195:25">format</name></expr>)</condition> <block pos:start="195:28" pos:end="227:13">{<block_content pos:start="197:13" pos:end="225:22">

            <case pos:start="197:13" pos:end="197:21">case <expr pos:start="197:18" pos:end="197:20"><literal type="char" pos:start="197:18" pos:end="197:20">'o'</literal></expr>:</case>

                <expr_stmt pos:start="199:17" pos:end="199:57"><expr pos:start="199:17" pos:end="199:56"><call pos:start="199:17" pos:end="199:56"><name pos:start="199:17" pos:end="199:27">term_printf</name><argument_list pos:start="199:28" pos:end="199:56">(<argument pos:start="199:29" pos:end="199:40"><expr pos:start="199:29" pos:end="199:40"><literal type="string" pos:start="199:29" pos:end="199:33">"%#*"</literal> <name pos:start="199:35" pos:end="199:40">PRIo64</name></expr></argument>, <argument pos:start="199:43" pos:end="199:52"><expr pos:start="199:43" pos:end="199:52"><name pos:start="199:43" pos:end="199:52">max_digits</name></expr></argument>, <argument pos:start="199:55" pos:end="199:55"><expr pos:start="199:55" pos:end="199:55"><name pos:start="199:55" pos:end="199:55">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="201:17" pos:end="201:22">break;</break>

            <case pos:start="203:13" pos:end="203:21">case <expr pos:start="203:18" pos:end="203:20"><literal type="char" pos:start="203:18" pos:end="203:20">'x'</literal></expr>:</case>

                <expr_stmt pos:start="205:17" pos:end="205:59"><expr pos:start="205:17" pos:end="205:58"><call pos:start="205:17" pos:end="205:58"><name pos:start="205:17" pos:end="205:27">term_printf</name><argument_list pos:start="205:28" pos:end="205:58">(<argument pos:start="205:29" pos:end="205:42"><expr pos:start="205:29" pos:end="205:42"><literal type="string" pos:start="205:29" pos:end="205:35">"0x%0*"</literal> <name pos:start="205:37" pos:end="205:42">PRIx64</name></expr></argument>, <argument pos:start="205:45" pos:end="205:54"><expr pos:start="205:45" pos:end="205:54"><name pos:start="205:45" pos:end="205:54">max_digits</name></expr></argument>, <argument pos:start="205:57" pos:end="205:57"><expr pos:start="205:57" pos:end="205:57"><name pos:start="205:57" pos:end="205:57">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="207:17" pos:end="207:22">break;</break>

            <case pos:start="209:13" pos:end="209:21">case <expr pos:start="209:18" pos:end="209:20"><literal type="char" pos:start="209:18" pos:end="209:20">'u'</literal></expr>:</case>

                <expr_stmt pos:start="211:17" pos:end="211:56"><expr pos:start="211:17" pos:end="211:55"><call pos:start="211:17" pos:end="211:55"><name pos:start="211:17" pos:end="211:27">term_printf</name><argument_list pos:start="211:28" pos:end="211:55">(<argument pos:start="211:29" pos:end="211:39"><expr pos:start="211:29" pos:end="211:39"><literal type="string" pos:start="211:29" pos:end="211:32">"%*"</literal> <name pos:start="211:34" pos:end="211:39">PRIu64</name></expr></argument>, <argument pos:start="211:42" pos:end="211:51"><expr pos:start="211:42" pos:end="211:51"><name pos:start="211:42" pos:end="211:51">max_digits</name></expr></argument>, <argument pos:start="211:54" pos:end="211:54"><expr pos:start="211:54" pos:end="211:54"><name pos:start="211:54" pos:end="211:54">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="213:17" pos:end="213:22">break;</break>

            <case pos:start="215:13" pos:end="215:21">case <expr pos:start="215:18" pos:end="215:20"><literal type="char" pos:start="215:18" pos:end="215:20">'d'</literal></expr>:</case>

                <expr_stmt pos:start="217:17" pos:end="217:56"><expr pos:start="217:17" pos:end="217:55"><call pos:start="217:17" pos:end="217:55"><name pos:start="217:17" pos:end="217:27">term_printf</name><argument_list pos:start="217:28" pos:end="217:55">(<argument pos:start="217:29" pos:end="217:39"><expr pos:start="217:29" pos:end="217:39"><literal type="string" pos:start="217:29" pos:end="217:32">"%*"</literal> <name pos:start="217:34" pos:end="217:39">PRId64</name></expr></argument>, <argument pos:start="217:42" pos:end="217:51"><expr pos:start="217:42" pos:end="217:51"><name pos:start="217:42" pos:end="217:51">max_digits</name></expr></argument>, <argument pos:start="217:54" pos:end="217:54"><expr pos:start="217:54" pos:end="217:54"><name pos:start="217:54" pos:end="217:54">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="219:17" pos:end="219:22">break;</break>

            <case pos:start="221:13" pos:end="221:21">case <expr pos:start="221:18" pos:end="221:20"><literal type="char" pos:start="221:18" pos:end="221:20">'c'</literal></expr>:</case>

                <expr_stmt pos:start="223:17" pos:end="223:31"><expr pos:start="223:17" pos:end="223:30"><call pos:start="223:17" pos:end="223:30"><name pos:start="223:17" pos:end="223:27">term_printc</name><argument_list pos:start="223:28" pos:end="223:30">(<argument pos:start="223:29" pos:end="223:29"><expr pos:start="223:29" pos:end="223:29"><name pos:start="223:29" pos:end="223:29">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="225:17" pos:end="225:22">break;</break>

            </block_content>}</block></switch>

            <expr_stmt pos:start="229:13" pos:end="229:23"><expr pos:start="229:13" pos:end="229:22"><name pos:start="229:13" pos:end="229:13">i</name> <operator pos:start="229:15" pos:end="229:16">+=</operator> <name pos:start="229:18" pos:end="229:22">wsize</name></expr>;</expr_stmt>

        </block_content>}</block></while>

        <expr_stmt pos:start="233:9" pos:end="233:26"><expr pos:start="233:9" pos:end="233:25"><call pos:start="233:9" pos:end="233:25"><name pos:start="233:9" pos:end="233:19">term_printf</name><argument_list pos:start="233:20" pos:end="233:25">(<argument pos:start="233:21" pos:end="233:24"><expr pos:start="233:21" pos:end="233:24"><literal type="string" pos:start="233:21" pos:end="233:24">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="235:9" pos:end="235:18"><expr pos:start="235:9" pos:end="235:17"><name pos:start="235:9" pos:end="235:12">addr</name> <operator pos:start="235:14" pos:end="235:15">+=</operator> <name pos:start="235:17" pos:end="235:17">l</name></expr>;</expr_stmt>

        <expr_stmt pos:start="237:9" pos:end="237:17"><expr pos:start="237:9" pos:end="237:16"><name pos:start="237:9" pos:end="237:11">len</name> <operator pos:start="237:13" pos:end="237:14">-=</operator> <name pos:start="237:16" pos:end="237:16">l</name></expr>;</expr_stmt>

    </block_content>}</block></while>

</block_content>}</block></function>
</unit>
