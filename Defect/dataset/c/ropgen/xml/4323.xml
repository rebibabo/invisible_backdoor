<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4323.c" pos:tabs="8"><function pos:start="1:1" pos:end="175:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:25">pc_basic_device_init</name><parameter_list pos:start="1:26" pos:end="7:41">(<parameter pos:start="1:27" pos:end="1:41"><decl pos:start="1:27" pos:end="1:41"><type pos:start="1:27" pos:end="1:41"><name pos:start="1:27" pos:end="1:32">ISABus</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:41">isa_bus</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:56"><decl pos:start="1:44" pos:end="1:56"><type pos:start="1:44" pos:end="1:56"><name pos:start="1:44" pos:end="1:51">qemu_irq</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:56">gsi</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:47"><decl pos:start="3:27" pos:end="3:47"><type pos:start="3:27" pos:end="3:47"><name pos:start="3:27" pos:end="3:35">ISADevice</name> <modifier pos:start="3:37" pos:end="3:37">*</modifier><modifier pos:start="3:38" pos:end="3:38">*</modifier></type><name pos:start="3:39" pos:end="3:47">rtc_state</name></decl></parameter>,

                          <parameter pos:start="5:27" pos:end="5:44"><decl pos:start="5:27" pos:end="5:44"><type pos:start="5:27" pos:end="5:44"><name pos:start="5:27" pos:end="5:35">ISADevice</name> <modifier pos:start="5:37" pos:end="5:37">*</modifier><modifier pos:start="5:38" pos:end="5:38">*</modifier></type><name pos:start="5:39" pos:end="5:44">floppy</name></decl></parameter>,

                          <parameter pos:start="7:27" pos:end="7:40"><decl pos:start="7:27" pos:end="7:40"><type pos:start="7:27" pos:end="7:40"><name pos:start="7:27" pos:end="7:30">bool</name></type> <name pos:start="7:32" pos:end="7:40">no_vmport</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="175:1">{<block_content pos:start="11:5" pos:end="173:43">

    <decl_stmt pos:start="11:5" pos:end="11:10"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:26"><decl pos:start="13:5" pos:end="13:25"><type pos:start="13:5" pos:end="13:15"><name pos:start="13:5" pos:end="13:13">DriveInfo</name> <modifier pos:start="13:15" pos:end="13:15">*</modifier></type><name pos:start="13:16" pos:end="13:25"><name pos:start="13:16" pos:end="13:17">fd</name><index pos:start="13:18" pos:end="13:25">[<expr pos:start="13:19" pos:end="13:24"><name pos:start="13:19" pos:end="13:24">MAX_FD</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:29"><decl pos:start="15:5" pos:end="15:28"><type pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:15">DeviceState</name> <modifier pos:start="15:17" pos:end="15:17">*</modifier></type><name pos:start="15:18" pos:end="15:21">hpet</name> <init pos:start="15:23" pos:end="15:28">= <expr pos:start="15:25" pos:end="15:28"><name pos:start="15:25" pos:end="15:28">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:24"><decl pos:start="17:5" pos:end="17:23"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:19">pit_isa_irq</name> <init pos:start="17:21" pos:end="17:23">= <expr pos:start="17:23" pos:end="17:23"><literal type="number" pos:start="17:23" pos:end="17:23">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:32"><decl pos:start="19:5" pos:end="19:31"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">qemu_irq</name></type> <name pos:start="19:14" pos:end="19:24">pit_alt_irq</name> <init pos:start="19:26" pos:end="19:31">= <expr pos:start="19:28" pos:end="19:31"><name pos:start="19:28" pos:end="19:31">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:28"><decl pos:start="21:5" pos:end="21:27"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">qemu_irq</name></type> <name pos:start="21:14" pos:end="21:20">rtc_irq</name> <init pos:start="21:22" pos:end="21:27">= <expr pos:start="21:24" pos:end="21:27"><name pos:start="21:24" pos:end="21:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:23"><decl pos:start="23:5" pos:end="23:22"><type pos:start="23:5" pos:end="23:14"><name pos:start="23:5" pos:end="23:12">qemu_irq</name> <modifier pos:start="23:14" pos:end="23:14">*</modifier></type><name pos:start="23:15" pos:end="23:22">a20_line</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:46"><decl pos:start="25:5" pos:end="25:20"><type pos:start="25:5" pos:end="25:15"><name pos:start="25:5" pos:end="25:13">ISADevice</name> <modifier pos:start="25:15" pos:end="25:15">*</modifier></type><name pos:start="25:16" pos:end="25:20">i8042</name></decl>, <decl pos:start="25:23" pos:end="25:29"><type ref="prev" pos:start="25:5" pos:end="25:15"><modifier pos:start="25:23" pos:end="25:23">*</modifier></type><name pos:start="25:24" pos:end="25:29">port92</name></decl>, <decl pos:start="25:32" pos:end="25:39"><type ref="prev" pos:start="25:5" pos:end="25:15"><modifier pos:start="25:32" pos:end="25:32">*</modifier></type><name pos:start="25:33" pos:end="25:39">vmmouse</name></decl>, <decl pos:start="25:42" pos:end="25:45"><type ref="prev" pos:start="25:5" pos:end="25:15"><modifier pos:start="25:42" pos:end="25:42">*</modifier></type><name pos:start="25:43" pos:end="25:45">pit</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:27"><decl pos:start="27:5" pos:end="27:26"><type pos:start="27:5" pos:end="27:14"><name pos:start="27:5" pos:end="27:12">qemu_irq</name> <modifier pos:start="27:14" pos:end="27:14">*</modifier></type><name pos:start="27:15" pos:end="27:26">cpu_exit_irq</name></decl>;</decl_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:60"><expr pos:start="31:5" pos:end="31:59"><call pos:start="31:5" pos:end="31:59"><name pos:start="31:5" pos:end="31:25">register_ioport_write</name><argument_list pos:start="31:26" pos:end="31:59">(<argument pos:start="31:27" pos:end="31:30"><expr pos:start="31:27" pos:end="31:30"><literal type="number" pos:start="31:27" pos:end="31:30">0x80</literal></expr></argument>, <argument pos:start="31:33" pos:end="31:33"><expr pos:start="31:33" pos:end="31:33"><literal type="number" pos:start="31:33" pos:end="31:33">1</literal></expr></argument>, <argument pos:start="31:36" pos:end="31:36"><expr pos:start="31:36" pos:end="31:36"><literal type="number" pos:start="31:36" pos:end="31:36">1</literal></expr></argument>, <argument pos:start="31:39" pos:end="31:52"><expr pos:start="31:39" pos:end="31:52"><name pos:start="31:39" pos:end="31:52">ioport80_write</name></expr></argument>, <argument pos:start="31:55" pos:end="31:58"><expr pos:start="31:55" pos:end="31:58"><name pos:start="31:55" pos:end="31:58">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:60"><expr pos:start="35:5" pos:end="35:59"><call pos:start="35:5" pos:end="35:59"><name pos:start="35:5" pos:end="35:25">register_ioport_write</name><argument_list pos:start="35:26" pos:end="35:59">(<argument pos:start="35:27" pos:end="35:30"><expr pos:start="35:27" pos:end="35:30"><literal type="number" pos:start="35:27" pos:end="35:30">0xf0</literal></expr></argument>, <argument pos:start="35:33" pos:end="35:33"><expr pos:start="35:33" pos:end="35:33"><literal type="number" pos:start="35:33" pos:end="35:33">1</literal></expr></argument>, <argument pos:start="35:36" pos:end="35:36"><expr pos:start="35:36" pos:end="35:36"><literal type="number" pos:start="35:36" pos:end="35:36">1</literal></expr></argument>, <argument pos:start="35:39" pos:end="35:52"><expr pos:start="35:39" pos:end="35:52"><name pos:start="35:39" pos:end="35:52">ioportF0_write</name></expr></argument>, <argument pos:start="35:55" pos:end="35:58"><expr pos:start="35:55" pos:end="35:58"><name pos:start="35:55" pos:end="35:58">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="39:5" pos:end="49:7">/*

     * Check if an HPET shall be created.

     *

     * Without KVM_CAP_PIT_STATE2, we cannot switch off the in-kernel PIT

     * when the HPET wants to take over. Thus we have to disable the latter.

     */</comment>

    <if_stmt pos:start="51:5" pos:end="73:5"><if pos:start="51:5" pos:end="73:5">if <condition pos:start="51:8" pos:end="51:71">(<expr pos:start="51:9" pos:end="51:70"><operator pos:start="51:9" pos:end="51:9">!</operator><name pos:start="51:10" pos:end="51:16">no_hpet</name> <operator pos:start="51:18" pos:end="51:19">&amp;&amp;</operator> <operator pos:start="51:21" pos:end="51:21">(</operator><operator pos:start="51:22" pos:end="51:22">!</operator><call pos:start="51:23" pos:end="51:45"><name pos:start="51:23" pos:end="51:43">kvm_irqchip_in_kernel</name><argument_list pos:start="51:44" pos:end="51:45">()</argument_list></call> <operator pos:start="51:47" pos:end="51:48">||</operator> <call pos:start="51:50" pos:end="51:69"><name pos:start="51:50" pos:end="51:67">kvm_has_pit_state2</name><argument_list pos:start="51:68" pos:end="51:69">()</argument_list></call><operator pos:start="51:70" pos:end="51:70">)</operator></expr>)</condition> <block pos:start="51:73" pos:end="73:5">{<block_content pos:start="53:9" pos:end="71:9">

        <expr_stmt pos:start="53:9" pos:end="53:65"><expr pos:start="53:9" pos:end="53:64"><name pos:start="53:9" pos:end="53:12">hpet</name> <operator pos:start="53:14" pos:end="53:14">=</operator> <call pos:start="53:16" pos:end="53:64"><name pos:start="53:16" pos:end="53:39">sysbus_try_create_simple</name><argument_list pos:start="53:40" pos:end="53:64">(<argument pos:start="53:41" pos:end="53:46"><expr pos:start="53:41" pos:end="53:46"><literal type="string" pos:start="53:41" pos:end="53:46">"hpet"</literal></expr></argument>, <argument pos:start="53:49" pos:end="53:57"><expr pos:start="53:49" pos:end="53:57"><name pos:start="53:49" pos:end="53:57">HPET_BASE</name></expr></argument>, <argument pos:start="53:60" pos:end="53:63"><expr pos:start="53:60" pos:end="53:63"><name pos:start="53:60" pos:end="53:63">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="57:9" pos:end="71:9"><if pos:start="57:9" pos:end="71:9">if <condition pos:start="57:12" pos:end="57:17">(<expr pos:start="57:13" pos:end="57:16"><name pos:start="57:13" pos:end="57:16">hpet</name></expr>)</condition> <block pos:start="57:19" pos:end="71:9">{<block_content pos:start="59:13" pos:end="69:66">

            <for pos:start="59:13" pos:end="63:13">for <control pos:start="59:17" pos:end="59:46">(<init pos:start="59:18" pos:end="59:23"><expr pos:start="59:18" pos:end="59:22"><name pos:start="59:18" pos:end="59:18">i</name> <operator pos:start="59:20" pos:end="59:20">=</operator> <literal type="number" pos:start="59:22" pos:end="59:22">0</literal></expr>;</init> <condition pos:start="59:25" pos:end="59:41"><expr pos:start="59:25" pos:end="59:40"><name pos:start="59:25" pos:end="59:25">i</name> <operator pos:start="59:27" pos:end="59:27">&lt;</operator> <name pos:start="59:29" pos:end="59:40">GSI_NUM_PINS</name></expr>;</condition> <incr pos:start="59:43" pos:end="59:45"><expr pos:start="59:43" pos:end="59:45"><name pos:start="59:43" pos:end="59:43">i</name><operator pos:start="59:44" pos:end="59:45">++</operator></expr></incr>)</control> <block pos:start="59:48" pos:end="63:13">{<block_content pos:start="61:17" pos:end="61:70">

                <expr_stmt pos:start="61:17" pos:end="61:70"><expr pos:start="61:17" pos:end="61:69"><call pos:start="61:17" pos:end="61:69"><name pos:start="61:17" pos:end="61:34">sysbus_connect_irq</name><argument_list pos:start="61:35" pos:end="61:69">(<argument pos:start="61:36" pos:end="61:57"><expr pos:start="61:36" pos:end="61:57"><call pos:start="61:36" pos:end="61:57"><name pos:start="61:36" pos:end="61:51">sysbus_from_qdev</name><argument_list pos:start="61:52" pos:end="61:57">(<argument pos:start="61:53" pos:end="61:56"><expr pos:start="61:53" pos:end="61:56"><name pos:start="61:53" pos:end="61:56">hpet</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="61:60" pos:end="61:60"><expr pos:start="61:60" pos:end="61:60"><name pos:start="61:60" pos:end="61:60">i</name></expr></argument>, <argument pos:start="61:63" pos:end="61:68"><expr pos:start="61:63" pos:end="61:68"><name pos:start="61:63" pos:end="61:68"><name pos:start="61:63" pos:end="61:65">gsi</name><index pos:start="61:66" pos:end="61:68">[<expr pos:start="61:67" pos:end="61:67"><name pos:start="61:67" pos:end="61:67">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="65:13" pos:end="65:29"><expr pos:start="65:13" pos:end="65:28"><name pos:start="65:13" pos:end="65:23">pit_isa_irq</name> <operator pos:start="65:25" pos:end="65:25">=</operator> <operator pos:start="65:27" pos:end="65:27">-</operator><literal type="number" pos:start="65:28" pos:end="65:28">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:70"><expr pos:start="67:13" pos:end="67:69"><name pos:start="67:13" pos:end="67:23">pit_alt_irq</name> <operator pos:start="67:25" pos:end="67:25">=</operator> <call pos:start="67:27" pos:end="67:69"><name pos:start="67:27" pos:end="67:42">qdev_get_gpio_in</name><argument_list pos:start="67:43" pos:end="67:69">(<argument pos:start="67:44" pos:end="67:47"><expr pos:start="67:44" pos:end="67:47"><name pos:start="67:44" pos:end="67:47">hpet</name></expr></argument>, <argument pos:start="67:50" pos:end="67:68"><expr pos:start="67:50" pos:end="67:68"><name pos:start="67:50" pos:end="67:68">HPET_LEGACY_PIT_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:66"><expr pos:start="69:13" pos:end="69:65"><name pos:start="69:13" pos:end="69:19">rtc_irq</name> <operator pos:start="69:21" pos:end="69:21">=</operator> <call pos:start="69:23" pos:end="69:65"><name pos:start="69:23" pos:end="69:38">qdev_get_gpio_in</name><argument_list pos:start="69:39" pos:end="69:65">(<argument pos:start="69:40" pos:end="69:43"><expr pos:start="69:40" pos:end="69:43"><name pos:start="69:40" pos:end="69:43">hpet</name></expr></argument>, <argument pos:start="69:46" pos:end="69:64"><expr pos:start="69:46" pos:end="69:64"><name pos:start="69:46" pos:end="69:64">HPET_LEGACY_RTC_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:50"><expr pos:start="75:5" pos:end="75:49"><operator pos:start="75:5" pos:end="75:5">*</operator><name pos:start="75:6" pos:end="75:14">rtc_state</name> <operator pos:start="75:16" pos:end="75:16">=</operator> <call pos:start="75:18" pos:end="75:49"><name pos:start="75:18" pos:end="75:25">rtc_init</name><argument_list pos:start="75:26" pos:end="75:49">(<argument pos:start="75:27" pos:end="75:33"><expr pos:start="75:27" pos:end="75:33"><name pos:start="75:27" pos:end="75:33">isa_bus</name></expr></argument>, <argument pos:start="75:36" pos:end="75:39"><expr pos:start="75:36" pos:end="75:39"><literal type="number" pos:start="75:36" pos:end="75:39">2000</literal></expr></argument>, <argument pos:start="75:42" pos:end="75:48"><expr pos:start="75:42" pos:end="75:48"><name pos:start="75:42" pos:end="75:48">rtc_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:52"><expr pos:start="79:5" pos:end="79:51"><call pos:start="79:5" pos:end="79:51"><name pos:start="79:5" pos:end="79:26">qemu_register_boot_set</name><argument_list pos:start="79:27" pos:end="79:51">(<argument pos:start="79:28" pos:end="79:38"><expr pos:start="79:28" pos:end="79:38"><name pos:start="79:28" pos:end="79:38">pc_boot_set</name></expr></argument>, <argument pos:start="79:41" pos:end="79:50"><expr pos:start="79:41" pos:end="79:50"><operator pos:start="79:41" pos:end="79:41">*</operator><name pos:start="79:42" pos:end="79:50">rtc_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="83:5" pos:end="91:5"><if pos:start="83:5" pos:end="87:5">if <condition pos:start="83:8" pos:end="83:32">(<expr pos:start="83:9" pos:end="83:31"><call pos:start="83:9" pos:end="83:31"><name pos:start="83:9" pos:end="83:29">kvm_irqchip_in_kernel</name><argument_list pos:start="83:30" pos:end="83:31">()</argument_list></call></expr>)</condition> <block pos:start="83:34" pos:end="87:5">{<block_content pos:start="85:9" pos:end="85:42">

        <expr_stmt pos:start="85:9" pos:end="85:42"><expr pos:start="85:9" pos:end="85:41"><name pos:start="85:9" pos:end="85:11">pit</name> <operator pos:start="85:13" pos:end="85:13">=</operator> <call pos:start="85:15" pos:end="85:41"><name pos:start="85:15" pos:end="85:26">kvm_pit_init</name><argument_list pos:start="85:27" pos:end="85:41">(<argument pos:start="85:28" pos:end="85:34"><expr pos:start="85:28" pos:end="85:34"><name pos:start="85:28" pos:end="85:34">isa_bus</name></expr></argument>, <argument pos:start="85:37" pos:end="85:40"><expr pos:start="85:37" pos:end="85:40"><literal type="number" pos:start="85:37" pos:end="85:40">0x40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="87:7" pos:end="91:5">else <block pos:start="87:12" pos:end="91:5">{<block_content pos:start="89:9" pos:end="89:64">

        <expr_stmt pos:start="89:9" pos:end="89:64"><expr pos:start="89:9" pos:end="89:63"><name pos:start="89:9" pos:end="89:11">pit</name> <operator pos:start="89:13" pos:end="89:13">=</operator> <call pos:start="89:15" pos:end="89:63"><name pos:start="89:15" pos:end="89:22">pit_init</name><argument_list pos:start="89:23" pos:end="89:63">(<argument pos:start="89:24" pos:end="89:30"><expr pos:start="89:24" pos:end="89:30"><name pos:start="89:24" pos:end="89:30">isa_bus</name></expr></argument>, <argument pos:start="89:33" pos:end="89:36"><expr pos:start="89:33" pos:end="89:36"><literal type="number" pos:start="89:33" pos:end="89:36">0x40</literal></expr></argument>, <argument pos:start="89:39" pos:end="89:49"><expr pos:start="89:39" pos:end="89:49"><name pos:start="89:39" pos:end="89:49">pit_isa_irq</name></expr></argument>, <argument pos:start="89:52" pos:end="89:62"><expr pos:start="89:52" pos:end="89:62"><name pos:start="89:52" pos:end="89:62">pit_alt_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="93:5" pos:end="99:5"><if pos:start="93:5" pos:end="99:5">if <condition pos:start="93:8" pos:end="93:13">(<expr pos:start="93:9" pos:end="93:12"><name pos:start="93:9" pos:end="93:12">hpet</name></expr>)</condition> <block pos:start="93:15" pos:end="99:5">{<block_content pos:start="97:9" pos:end="97:72">

        <comment type="block" pos:start="95:9" pos:end="95:60">/* connect PIT to output control line of the HPET */</comment>

        <expr_stmt pos:start="97:9" pos:end="97:72"><expr pos:start="97:9" pos:end="97:71"><call pos:start="97:9" pos:end="97:71"><name pos:start="97:9" pos:end="97:29">qdev_connect_gpio_out</name><argument_list pos:start="97:30" pos:end="97:71">(<argument pos:start="97:31" pos:end="97:34"><expr pos:start="97:31" pos:end="97:34"><name pos:start="97:31" pos:end="97:34">hpet</name></expr></argument>, <argument pos:start="97:37" pos:end="97:37"><expr pos:start="97:37" pos:end="97:37"><literal type="number" pos:start="97:37" pos:end="97:37">0</literal></expr></argument>, <argument pos:start="97:40" pos:end="97:70"><expr pos:start="97:40" pos:end="97:70"><call pos:start="97:40" pos:end="97:70"><name pos:start="97:40" pos:end="97:55">qdev_get_gpio_in</name><argument_list pos:start="97:56" pos:end="97:70">(<argument pos:start="97:57" pos:end="97:66"><expr pos:start="97:57" pos:end="97:66"><operator pos:start="97:57" pos:end="97:57">&amp;</operator><name pos:start="97:58" pos:end="97:66"><name pos:start="97:58" pos:end="97:60">pit</name><operator pos:start="97:61" pos:end="97:62">-&gt;</operator><name pos:start="97:63" pos:end="97:66">qdev</name></name></expr></argument>, <argument pos:start="97:69" pos:end="97:69"><expr pos:start="97:69" pos:end="97:69"><literal type="number" pos:start="97:69" pos:end="97:69">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:29"><expr pos:start="101:5" pos:end="101:28"><call pos:start="101:5" pos:end="101:28"><name pos:start="101:5" pos:end="101:14">pcspk_init</name><argument_list pos:start="101:15" pos:end="101:28">(<argument pos:start="101:16" pos:end="101:22"><expr pos:start="101:16" pos:end="101:22"><name pos:start="101:16" pos:end="101:22">isa_bus</name></expr></argument>, <argument pos:start="101:25" pos:end="101:27"><expr pos:start="101:25" pos:end="101:27"><name pos:start="101:25" pos:end="101:27">pit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="105:5" pos:end="113:5">for<control pos:start="105:8" pos:end="105:41">(<init pos:start="105:9" pos:end="105:14"><expr pos:start="105:9" pos:end="105:13"><name pos:start="105:9" pos:end="105:9">i</name> <operator pos:start="105:11" pos:end="105:11">=</operator> <literal type="number" pos:start="105:13" pos:end="105:13">0</literal></expr>;</init> <condition pos:start="105:16" pos:end="105:36"><expr pos:start="105:16" pos:end="105:35"><name pos:start="105:16" pos:end="105:16">i</name> <operator pos:start="105:18" pos:end="105:18">&lt;</operator> <name pos:start="105:20" pos:end="105:35">MAX_SERIAL_PORTS</name></expr>;</condition> <incr pos:start="105:38" pos:end="105:40"><expr pos:start="105:38" pos:end="105:40"><name pos:start="105:38" pos:end="105:38">i</name><operator pos:start="105:39" pos:end="105:40">++</operator></expr></incr>)</control> <block pos:start="105:43" pos:end="113:5">{<block_content pos:start="107:9" pos:end="111:9">

        <if_stmt pos:start="107:9" pos:end="111:9"><if pos:start="107:9" pos:end="111:9">if <condition pos:start="107:12" pos:end="107:26">(<expr pos:start="107:13" pos:end="107:25"><name pos:start="107:13" pos:end="107:25"><name pos:start="107:13" pos:end="107:22">serial_hds</name><index pos:start="107:23" pos:end="107:25">[<expr pos:start="107:24" pos:end="107:24"><name pos:start="107:24" pos:end="107:24">i</name></expr>]</index></name></expr>)</condition> <block pos:start="107:28" pos:end="111:9">{<block_content pos:start="109:13" pos:end="109:55">

            <expr_stmt pos:start="109:13" pos:end="109:55"><expr pos:start="109:13" pos:end="109:54"><call pos:start="109:13" pos:end="109:54"><name pos:start="109:13" pos:end="109:27">serial_isa_init</name><argument_list pos:start="109:28" pos:end="109:54">(<argument pos:start="109:29" pos:end="109:35"><expr pos:start="109:29" pos:end="109:35"><name pos:start="109:29" pos:end="109:35">isa_bus</name></expr></argument>, <argument pos:start="109:38" pos:end="109:38"><expr pos:start="109:38" pos:end="109:38"><name pos:start="109:38" pos:end="109:38">i</name></expr></argument>, <argument pos:start="109:41" pos:end="109:53"><expr pos:start="109:41" pos:end="109:53"><name pos:start="109:41" pos:end="109:53"><name pos:start="109:41" pos:end="109:50">serial_hds</name><index pos:start="109:51" pos:end="109:53">[<expr pos:start="109:52" pos:end="109:52"><name pos:start="109:52" pos:end="109:52">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <for pos:start="117:5" pos:end="125:5">for<control pos:start="117:8" pos:end="117:43">(<init pos:start="117:9" pos:end="117:14"><expr pos:start="117:9" pos:end="117:13"><name pos:start="117:9" pos:end="117:9">i</name> <operator pos:start="117:11" pos:end="117:11">=</operator> <literal type="number" pos:start="117:13" pos:end="117:13">0</literal></expr>;</init> <condition pos:start="117:16" pos:end="117:38"><expr pos:start="117:16" pos:end="117:37"><name pos:start="117:16" pos:end="117:16">i</name> <operator pos:start="117:18" pos:end="117:18">&lt;</operator> <name pos:start="117:20" pos:end="117:37">MAX_PARALLEL_PORTS</name></expr>;</condition> <incr pos:start="117:40" pos:end="117:42"><expr pos:start="117:40" pos:end="117:42"><name pos:start="117:40" pos:end="117:40">i</name><operator pos:start="117:41" pos:end="117:42">++</operator></expr></incr>)</control> <block pos:start="117:45" pos:end="125:5">{<block_content pos:start="119:9" pos:end="123:9">

        <if_stmt pos:start="119:9" pos:end="123:9"><if pos:start="119:9" pos:end="123:9">if <condition pos:start="119:12" pos:end="119:28">(<expr pos:start="119:13" pos:end="119:27"><name pos:start="119:13" pos:end="119:27"><name pos:start="119:13" pos:end="119:24">parallel_hds</name><index pos:start="119:25" pos:end="119:27">[<expr pos:start="119:26" pos:end="119:26"><name pos:start="119:26" pos:end="119:26">i</name></expr>]</index></name></expr>)</condition> <block pos:start="119:30" pos:end="123:9">{<block_content pos:start="121:13" pos:end="121:55">

            <expr_stmt pos:start="121:13" pos:end="121:55"><expr pos:start="121:13" pos:end="121:54"><call pos:start="121:13" pos:end="121:54"><name pos:start="121:13" pos:end="121:25">parallel_init</name><argument_list pos:start="121:26" pos:end="121:54">(<argument pos:start="121:27" pos:end="121:33"><expr pos:start="121:27" pos:end="121:33"><name pos:start="121:27" pos:end="121:33">isa_bus</name></expr></argument>, <argument pos:start="121:36" pos:end="121:36"><expr pos:start="121:36" pos:end="121:36"><name pos:start="121:36" pos:end="121:36">i</name></expr></argument>, <argument pos:start="121:39" pos:end="121:53"><expr pos:start="121:39" pos:end="121:53"><name pos:start="121:39" pos:end="121:53"><name pos:start="121:39" pos:end="121:50">parallel_hds</name><index pos:start="121:51" pos:end="121:53">[<expr pos:start="121:52" pos:end="121:52"><name pos:start="121:52" pos:end="121:52">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="129:5" pos:end="129:72"><expr pos:start="129:5" pos:end="129:71"><name pos:start="129:5" pos:end="129:12">a20_line</name> <operator pos:start="129:14" pos:end="129:14">=</operator> <call pos:start="129:16" pos:end="129:71"><name pos:start="129:16" pos:end="129:33">qemu_allocate_irqs</name><argument_list pos:start="129:34" pos:end="129:71">(<argument pos:start="129:35" pos:end="129:56"><expr pos:start="129:35" pos:end="129:56"><name pos:start="129:35" pos:end="129:56">handle_a20_line_change</name></expr></argument>, <argument pos:start="129:59" pos:end="129:67"><expr pos:start="129:59" pos:end="129:67"><name pos:start="129:59" pos:end="129:67">first_cpu</name></expr></argument>, <argument pos:start="129:70" pos:end="129:70"><expr pos:start="129:70" pos:end="129:70"><literal type="number" pos:start="129:70" pos:end="129:70">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:48"><expr pos:start="131:5" pos:end="131:47"><name pos:start="131:5" pos:end="131:9">i8042</name> <operator pos:start="131:11" pos:end="131:11">=</operator> <call pos:start="131:13" pos:end="131:47"><name pos:start="131:13" pos:end="131:29">isa_create_simple</name><argument_list pos:start="131:30" pos:end="131:47">(<argument pos:start="131:31" pos:end="131:37"><expr pos:start="131:31" pos:end="131:37"><name pos:start="131:31" pos:end="131:37">isa_bus</name></expr></argument>, <argument pos:start="131:40" pos:end="131:46"><expr pos:start="131:40" pos:end="131:46"><literal type="string" pos:start="131:40" pos:end="131:46">"i8042"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:46"><expr pos:start="133:5" pos:end="133:45"><call pos:start="133:5" pos:end="133:45"><name pos:start="133:5" pos:end="133:24">i8042_setup_a20_line</name><argument_list pos:start="133:25" pos:end="133:45">(<argument pos:start="133:26" pos:end="133:30"><expr pos:start="133:26" pos:end="133:30"><name pos:start="133:26" pos:end="133:30">i8042</name></expr></argument>, <argument pos:start="133:33" pos:end="133:44"><expr pos:start="133:33" pos:end="133:44"><operator pos:start="133:33" pos:end="133:33">&amp;</operator><name pos:start="133:34" pos:end="133:44"><name pos:start="133:34" pos:end="133:41">a20_line</name><index pos:start="133:42" pos:end="133:44">[<expr pos:start="133:43" pos:end="133:43"><literal type="number" pos:start="133:43" pos:end="133:43">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="135:5" pos:end="145:5"><if pos:start="135:5" pos:end="141:5">if <condition pos:start="135:8" pos:end="135:19">(<expr pos:start="135:9" pos:end="135:18"><operator pos:start="135:9" pos:end="135:9">!</operator><name pos:start="135:10" pos:end="135:18">no_vmport</name></expr>)</condition> <block pos:start="135:21" pos:end="141:5">{<block_content pos:start="137:9" pos:end="139:53">

        <expr_stmt pos:start="137:9" pos:end="137:29"><expr pos:start="137:9" pos:end="137:28"><call pos:start="137:9" pos:end="137:28"><name pos:start="137:9" pos:end="137:19">vmport_init</name><argument_list pos:start="137:20" pos:end="137:28">(<argument pos:start="137:21" pos:end="137:27"><expr pos:start="137:21" pos:end="137:27"><name pos:start="137:21" pos:end="137:27">isa_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:53"><expr pos:start="139:9" pos:end="139:52"><name pos:start="139:9" pos:end="139:15">vmmouse</name> <operator pos:start="139:17" pos:end="139:17">=</operator> <call pos:start="139:19" pos:end="139:52"><name pos:start="139:19" pos:end="139:32">isa_try_create</name><argument_list pos:start="139:33" pos:end="139:52">(<argument pos:start="139:34" pos:end="139:40"><expr pos:start="139:34" pos:end="139:40"><name pos:start="139:34" pos:end="139:40">isa_bus</name></expr></argument>, <argument pos:start="139:43" pos:end="139:51"><expr pos:start="139:43" pos:end="139:51"><literal type="string" pos:start="139:43" pos:end="139:51">"vmmouse"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="141:7" pos:end="145:5">else <block pos:start="141:12" pos:end="145:5">{<block_content pos:start="143:9" pos:end="143:23">

        <expr_stmt pos:start="143:9" pos:end="143:23"><expr pos:start="143:9" pos:end="143:22"><name pos:start="143:9" pos:end="143:15">vmmouse</name> <operator pos:start="143:17" pos:end="143:17">=</operator> <name pos:start="143:19" pos:end="143:22">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="147:5" pos:end="153:5"><if pos:start="147:5" pos:end="153:5">if <condition pos:start="147:8" pos:end="147:16">(<expr pos:start="147:9" pos:end="147:15"><name pos:start="147:9" pos:end="147:15">vmmouse</name></expr>)</condition> <block pos:start="147:18" pos:end="153:5">{<block_content pos:start="149:9" pos:end="151:41">

        <expr_stmt pos:start="149:9" pos:end="149:62"><expr pos:start="149:9" pos:end="149:61"><call pos:start="149:9" pos:end="149:61"><name pos:start="149:9" pos:end="149:25">qdev_prop_set_ptr</name><argument_list pos:start="149:26" pos:end="149:61">(<argument pos:start="149:27" pos:end="149:40"><expr pos:start="149:27" pos:end="149:40"><operator pos:start="149:27" pos:end="149:27">&amp;</operator><name pos:start="149:28" pos:end="149:40"><name pos:start="149:28" pos:end="149:34">vmmouse</name><operator pos:start="149:35" pos:end="149:36">-&gt;</operator><name pos:start="149:37" pos:end="149:40">qdev</name></name></expr></argument>, <argument pos:start="149:43" pos:end="149:53"><expr pos:start="149:43" pos:end="149:53"><literal type="string" pos:start="149:43" pos:end="149:53">"ps2_mouse"</literal></expr></argument>, <argument pos:start="149:56" pos:end="149:60"><expr pos:start="149:56" pos:end="149:60"><name pos:start="149:56" pos:end="149:60">i8042</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:41"><expr pos:start="151:9" pos:end="151:40"><call pos:start="151:9" pos:end="151:40"><name pos:start="151:9" pos:end="151:24">qdev_init_nofail</name><argument_list pos:start="151:25" pos:end="151:40">(<argument pos:start="151:26" pos:end="151:39"><expr pos:start="151:26" pos:end="151:39"><operator pos:start="151:26" pos:end="151:26">&amp;</operator><name pos:start="151:27" pos:end="151:39"><name pos:start="151:27" pos:end="151:33">vmmouse</name><operator pos:start="151:34" pos:end="151:35">-&gt;</operator><name pos:start="151:36" pos:end="151:39">qdev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="155:5" pos:end="155:50"><expr pos:start="155:5" pos:end="155:49"><name pos:start="155:5" pos:end="155:10">port92</name> <operator pos:start="155:12" pos:end="155:12">=</operator> <call pos:start="155:14" pos:end="155:49"><name pos:start="155:14" pos:end="155:30">isa_create_simple</name><argument_list pos:start="155:31" pos:end="155:49">(<argument pos:start="155:32" pos:end="155:38"><expr pos:start="155:32" pos:end="155:38"><name pos:start="155:32" pos:end="155:38">isa_bus</name></expr></argument>, <argument pos:start="155:41" pos:end="155:48"><expr pos:start="155:41" pos:end="155:48"><literal type="string" pos:start="155:41" pos:end="155:48">"port92"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="157:5" pos:end="157:38"><expr pos:start="157:5" pos:end="157:37"><call pos:start="157:5" pos:end="157:37"><name pos:start="157:5" pos:end="157:15">port92_init</name><argument_list pos:start="157:16" pos:end="157:37">(<argument pos:start="157:17" pos:end="157:22"><expr pos:start="157:17" pos:end="157:22"><name pos:start="157:17" pos:end="157:22">port92</name></expr></argument>, <argument pos:start="157:25" pos:end="157:36"><expr pos:start="157:25" pos:end="157:36"><operator pos:start="157:25" pos:end="157:25">&amp;</operator><name pos:start="157:26" pos:end="157:36"><name pos:start="157:26" pos:end="157:33">a20_line</name><index pos:start="157:34" pos:end="157:36">[<expr pos:start="157:35" pos:end="157:35"><literal type="number" pos:start="157:35" pos:end="157:35">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="161:5" pos:end="161:65"><expr pos:start="161:5" pos:end="161:64"><name pos:start="161:5" pos:end="161:16">cpu_exit_irq</name> <operator pos:start="161:18" pos:end="161:18">=</operator> <call pos:start="161:20" pos:end="161:64"><name pos:start="161:20" pos:end="161:37">qemu_allocate_irqs</name><argument_list pos:start="161:38" pos:end="161:64">(<argument pos:start="161:39" pos:end="161:54"><expr pos:start="161:39" pos:end="161:54"><name pos:start="161:39" pos:end="161:54">cpu_request_exit</name></expr></argument>, <argument pos:start="161:57" pos:end="161:60"><expr pos:start="161:57" pos:end="161:60"><name pos:start="161:57" pos:end="161:60">NULL</name></expr></argument>, <argument pos:start="161:63" pos:end="161:63"><expr pos:start="161:63" pos:end="161:63"><literal type="number" pos:start="161:63" pos:end="161:63">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="163:5" pos:end="163:30"><expr pos:start="163:5" pos:end="163:29"><call pos:start="163:5" pos:end="163:29"><name pos:start="163:5" pos:end="163:12">DMA_init</name><argument_list pos:start="163:13" pos:end="163:29">(<argument pos:start="163:14" pos:end="163:14"><expr pos:start="163:14" pos:end="163:14"><literal type="number" pos:start="163:14" pos:end="163:14">0</literal></expr></argument>, <argument pos:start="163:17" pos:end="163:28"><expr pos:start="163:17" pos:end="163:28"><name pos:start="163:17" pos:end="163:28">cpu_exit_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="167:5" pos:end="171:5">for<control pos:start="167:8" pos:end="167:31">(<init pos:start="167:9" pos:end="167:14"><expr pos:start="167:9" pos:end="167:13"><name pos:start="167:9" pos:end="167:9">i</name> <operator pos:start="167:11" pos:end="167:11">=</operator> <literal type="number" pos:start="167:13" pos:end="167:13">0</literal></expr>;</init> <condition pos:start="167:16" pos:end="167:26"><expr pos:start="167:16" pos:end="167:25"><name pos:start="167:16" pos:end="167:16">i</name> <operator pos:start="167:18" pos:end="167:18">&lt;</operator> <name pos:start="167:20" pos:end="167:25">MAX_FD</name></expr>;</condition> <incr pos:start="167:28" pos:end="167:30"><expr pos:start="167:28" pos:end="167:30"><name pos:start="167:28" pos:end="167:28">i</name><operator pos:start="167:29" pos:end="167:30">++</operator></expr></incr>)</control> <block pos:start="167:33" pos:end="171:5">{<block_content pos:start="169:9" pos:end="169:43">

        <expr_stmt pos:start="169:9" pos:end="169:43"><expr pos:start="169:9" pos:end="169:42"><name pos:start="169:9" pos:end="169:13"><name pos:start="169:9" pos:end="169:10">fd</name><index pos:start="169:11" pos:end="169:13">[<expr pos:start="169:12" pos:end="169:12"><name pos:start="169:12" pos:end="169:12">i</name></expr>]</index></name> <operator pos:start="169:15" pos:end="169:15">=</operator> <call pos:start="169:17" pos:end="169:42"><name pos:start="169:17" pos:end="169:25">drive_get</name><argument_list pos:start="169:26" pos:end="169:42">(<argument pos:start="169:27" pos:end="169:35"><expr pos:start="169:27" pos:end="169:35"><name pos:start="169:27" pos:end="169:35">IF_FLOPPY</name></expr></argument>, <argument pos:start="169:38" pos:end="169:38"><expr pos:start="169:38" pos:end="169:38"><literal type="number" pos:start="169:38" pos:end="169:38">0</literal></expr></argument>, <argument pos:start="169:41" pos:end="169:41"><expr pos:start="169:41" pos:end="169:41"><name pos:start="169:41" pos:end="169:41">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="173:5" pos:end="173:43"><expr pos:start="173:5" pos:end="173:42"><operator pos:start="173:5" pos:end="173:5">*</operator><name pos:start="173:6" pos:end="173:11">floppy</name> <operator pos:start="173:13" pos:end="173:13">=</operator> <call pos:start="173:15" pos:end="173:42"><name pos:start="173:15" pos:end="173:29">fdctrl_init_isa</name><argument_list pos:start="173:30" pos:end="173:42">(<argument pos:start="173:31" pos:end="173:37"><expr pos:start="173:31" pos:end="173:37"><name pos:start="173:31" pos:end="173:37">isa_bus</name></expr></argument>, <argument pos:start="173:40" pos:end="173:41"><expr pos:start="173:40" pos:end="173:41"><name pos:start="173:40" pos:end="173:41">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
