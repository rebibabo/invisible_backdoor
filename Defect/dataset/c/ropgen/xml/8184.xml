<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8184.c" pos:tabs="8"><function pos:start="1:1" pos:end="127:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">tscc2_decode_mb</name><parameter_list pos:start="1:27" pos:end="3:63">(<parameter pos:start="1:28" pos:end="1:42"><decl pos:start="1:28" pos:end="1:42"><type pos:start="1:28" pos:end="1:42"><name pos:start="1:28" pos:end="1:39">TSCC2Context</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:42">c</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:50"><decl pos:start="1:45" pos:end="1:50"><type pos:start="1:45" pos:end="1:50"><name pos:start="1:45" pos:end="1:47">int</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:50">q</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:63"><decl pos:start="1:53" pos:end="1:63"><type pos:start="1:53" pos:end="1:63"><name pos:start="1:53" pos:end="1:55">int</name></type> <name pos:start="1:57" pos:end="1:63">vlc_set</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:39"><decl pos:start="3:28" pos:end="3:39"><type pos:start="3:28" pos:end="3:39"><name pos:start="3:28" pos:end="3:34">uint8_t</name> <modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:39">dst</name></decl></parameter>, <parameter pos:start="3:42" pos:end="3:51"><decl pos:start="3:42" pos:end="3:51"><type pos:start="3:42" pos:end="3:51"><name pos:start="3:42" pos:end="3:44">int</name></type> <name pos:start="3:46" pos:end="3:51">stride</name></decl></parameter>, <parameter pos:start="3:54" pos:end="3:62"><decl pos:start="3:54" pos:end="3:62"><type pos:start="3:54" pos:end="3:62"><name pos:start="3:54" pos:end="3:56">int</name></type> <name pos:start="3:58" pos:end="3:62">plane</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="127:1">{<block_content pos:start="7:5" pos:end="125:13">

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:30"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">GetBitContext</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:21">gb</name> <init pos:start="7:23" pos:end="7:30">= <expr pos:start="7:25" pos:end="7:30"><operator pos:start="7:25" pos:end="7:25">&amp;</operator><name pos:start="7:26" pos:end="7:30"><name pos:start="7:26" pos:end="7:26">c</name><operator pos:start="7:27" pos:end="7:28">-&gt;</operator><name pos:start="7:29" pos:end="7:30">gb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:39"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:15">prev_dc</name></decl>, <decl pos:start="9:18" pos:end="9:19"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:18" pos:end="9:19">dc</name></decl>, <decl pos:start="9:22" pos:end="9:23"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:22" pos:end="9:23">nc</name></decl>, <decl pos:start="9:26" pos:end="9:27"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:26" pos:end="9:27">ac</name></decl>, <decl pos:start="9:30" pos:end="9:33"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:30" pos:end="9:33">bpos</name></decl>, <decl pos:start="9:36" pos:end="9:38"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:36" pos:end="9:38">val</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>, <decl pos:start="11:12" pos:end="11:12"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:12" pos:end="11:12">j</name></decl>, <decl pos:start="11:15" pos:end="11:15"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:15" pos:end="11:15">k</name></decl>, <decl pos:start="11:18" pos:end="11:18"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:18" pos:end="11:18">l</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="45:5"><if pos:start="15:5" pos:end="45:5">if <condition pos:start="15:8" pos:end="15:22">(<expr pos:start="15:9" pos:end="15:21"><call pos:start="15:9" pos:end="15:21"><name pos:start="15:9" pos:end="15:17">get_bits1</name><argument_list pos:start="15:18" pos:end="15:21">(<argument pos:start="15:19" pos:end="15:20"><expr pos:start="15:19" pos:end="15:20"><name pos:start="15:19" pos:end="15:20">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="15:24" pos:end="45:5">{<block_content pos:start="17:9" pos:end="43:17">

        <if_stmt pos:start="17:9" pos:end="41:9"><if pos:start="17:9" pos:end="25:9">if <condition pos:start="17:12" pos:end="17:26">(<expr pos:start="17:13" pos:end="17:25"><call pos:start="17:13" pos:end="17:25"><name pos:start="17:13" pos:end="17:21">get_bits1</name><argument_list pos:start="17:22" pos:end="17:25">(<argument pos:start="17:23" pos:end="17:24"><expr pos:start="17:23" pos:end="17:24"><name pos:start="17:23" pos:end="17:24">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="17:28" pos:end="25:9">{<block_content pos:start="19:13" pos:end="23:37">

            <expr_stmt pos:start="19:13" pos:end="19:34"><expr pos:start="19:13" pos:end="19:33"><name pos:start="19:13" pos:end="19:15">val</name> <operator pos:start="19:17" pos:end="19:17">=</operator> <call pos:start="19:19" pos:end="19:33"><name pos:start="19:19" pos:end="19:26">get_bits</name><argument_list pos:start="19:27" pos:end="19:33">(<argument pos:start="19:28" pos:end="19:29"><expr pos:start="19:28" pos:end="19:29"><name pos:start="19:28" pos:end="19:29">gb</name></expr></argument>, <argument pos:start="19:32" pos:end="19:32"><expr pos:start="19:32" pos:end="19:32"><literal type="number" pos:start="19:32" pos:end="19:32">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="21:13" pos:end="23:37">for <control pos:start="21:17" pos:end="21:50">(<init pos:start="21:18" pos:end="21:23"><expr pos:start="21:18" pos:end="21:22"><name pos:start="21:18" pos:end="21:18">i</name> <operator pos:start="21:20" pos:end="21:20">=</operator> <literal type="number" pos:start="21:22" pos:end="21:22">0</literal></expr>;</init> <condition pos:start="21:25" pos:end="21:30"><expr pos:start="21:25" pos:end="21:29"><name pos:start="21:25" pos:end="21:25">i</name> <operator pos:start="21:27" pos:end="21:27">&lt;</operator> <literal type="number" pos:start="21:29" pos:end="21:29">8</literal></expr>;</condition> <incr pos:start="21:32" pos:end="21:49"><expr pos:start="21:32" pos:end="21:34"><name pos:start="21:32" pos:end="21:32">i</name><operator pos:start="21:33" pos:end="21:34">++</operator></expr><operator pos:start="21:35" pos:end="21:35">,</operator> <expr pos:start="21:37" pos:end="21:49"><name pos:start="21:37" pos:end="21:39">dst</name> <operator pos:start="21:41" pos:end="21:42">+=</operator> <name pos:start="21:44" pos:end="21:49">stride</name></expr></incr>)</control><block type="pseudo" pos:start="23:17" pos:end="23:37"><block_content pos:start="23:17" pos:end="23:37">

                <expr_stmt pos:start="23:17" pos:end="23:37"><expr pos:start="23:17" pos:end="23:36"><call pos:start="23:17" pos:end="23:36"><name pos:start="23:17" pos:end="23:22">memset</name><argument_list pos:start="23:23" pos:end="23:36">(<argument pos:start="23:24" pos:end="23:26"><expr pos:start="23:24" pos:end="23:26"><name pos:start="23:24" pos:end="23:26">dst</name></expr></argument>, <argument pos:start="23:29" pos:end="23:31"><expr pos:start="23:29" pos:end="23:31"><name pos:start="23:29" pos:end="23:31">val</name></expr></argument>, <argument pos:start="23:34" pos:end="23:35"><expr pos:start="23:34" pos:end="23:35"><literal type="number" pos:start="23:34" pos:end="23:35">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></if> <else pos:start="25:11" pos:end="41:9">else <block pos:start="25:16" pos:end="41:9">{<block_content pos:start="27:13" pos:end="39:13">

            <if_stmt pos:start="27:13" pos:end="29:43"><if pos:start="27:13" pos:end="29:43">if <condition pos:start="27:16" pos:end="27:47">(<expr pos:start="27:17" pos:end="27:46"><call pos:start="27:17" pos:end="27:33"><name pos:start="27:17" pos:end="27:29">get_bits_left</name><argument_list pos:start="27:30" pos:end="27:33">(<argument pos:start="27:31" pos:end="27:32"><expr pos:start="27:31" pos:end="27:32"><name pos:start="27:31" pos:end="27:32">gb</name></expr></argument>)</argument_list></call> <operator pos:start="27:35" pos:end="27:35">&lt;</operator> <literal type="number" pos:start="27:37" pos:end="27:38">16</literal> <operator pos:start="27:40" pos:end="27:40">*</operator> <literal type="number" pos:start="27:42" pos:end="27:42">8</literal> <operator pos:start="27:44" pos:end="27:44">*</operator> <literal type="number" pos:start="27:46" pos:end="27:46">8</literal></expr>)</condition><block type="pseudo" pos:start="29:17" pos:end="29:43"><block_content pos:start="29:17" pos:end="29:43">

                <return pos:start="29:17" pos:end="29:43">return <expr pos:start="29:24" pos:end="29:42"><name pos:start="29:24" pos:end="29:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

            <for pos:start="31:13" pos:end="39:13">for <control pos:start="31:17" pos:end="31:35">(<init pos:start="31:18" pos:end="31:23"><expr pos:start="31:18" pos:end="31:22"><name pos:start="31:18" pos:end="31:18">i</name> <operator pos:start="31:20" pos:end="31:20">=</operator> <literal type="number" pos:start="31:22" pos:end="31:22">0</literal></expr>;</init> <condition pos:start="31:25" pos:end="31:30"><expr pos:start="31:25" pos:end="31:29"><name pos:start="31:25" pos:end="31:25">i</name> <operator pos:start="31:27" pos:end="31:27">&lt;</operator> <literal type="number" pos:start="31:29" pos:end="31:29">8</literal></expr>;</condition> <incr pos:start="31:32" pos:end="31:34"><expr pos:start="31:32" pos:end="31:34"><name pos:start="31:32" pos:end="31:32">i</name><operator pos:start="31:33" pos:end="31:34">++</operator></expr></incr>)</control> <block pos:start="31:37" pos:end="39:13">{<block_content pos:start="33:17" pos:end="37:30">

                <for pos:start="33:17" pos:end="35:45">for <control pos:start="33:21" pos:end="33:40">(<init pos:start="33:22" pos:end="33:27"><expr pos:start="33:22" pos:end="33:26"><name pos:start="33:22" pos:end="33:22">j</name> <operator pos:start="33:24" pos:end="33:24">=</operator> <literal type="number" pos:start="33:26" pos:end="33:26">0</literal></expr>;</init> <condition pos:start="33:29" pos:end="33:35"><expr pos:start="33:29" pos:end="33:34"><name pos:start="33:29" pos:end="33:29">j</name> <operator pos:start="33:31" pos:end="33:31">&lt;</operator> <literal type="number" pos:start="33:33" pos:end="33:34">16</literal></expr>;</condition> <incr pos:start="33:37" pos:end="33:39"><expr pos:start="33:37" pos:end="33:39"><name pos:start="33:37" pos:end="33:37">j</name><operator pos:start="33:38" pos:end="33:39">++</operator></expr></incr>)</control><block type="pseudo" pos:start="35:21" pos:end="35:45"><block_content pos:start="35:21" pos:end="35:45">

                    <expr_stmt pos:start="35:21" pos:end="35:45"><expr pos:start="35:21" pos:end="35:44"><name pos:start="35:21" pos:end="35:26"><name pos:start="35:21" pos:end="35:23">dst</name><index pos:start="35:24" pos:end="35:26">[<expr pos:start="35:25" pos:end="35:25"><name pos:start="35:25" pos:end="35:25">j</name></expr>]</index></name> <operator pos:start="35:28" pos:end="35:28">=</operator> <call pos:start="35:30" pos:end="35:44"><name pos:start="35:30" pos:end="35:37">get_bits</name><argument_list pos:start="35:38" pos:end="35:44">(<argument pos:start="35:39" pos:end="35:40"><expr pos:start="35:39" pos:end="35:40"><name pos:start="35:39" pos:end="35:40">gb</name></expr></argument>, <argument pos:start="35:43" pos:end="35:43"><expr pos:start="35:43" pos:end="35:43"><literal type="number" pos:start="35:43" pos:end="35:43">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                <expr_stmt pos:start="37:17" pos:end="37:30"><expr pos:start="37:17" pos:end="37:29"><name pos:start="37:17" pos:end="37:19">dst</name> <operator pos:start="37:21" pos:end="37:22">+=</operator> <name pos:start="37:24" pos:end="37:29">stride</name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>

        <return pos:start="43:9" pos:end="43:17">return <expr pos:start="43:16" pos:end="43:16"><literal type="number" pos:start="43:16" pos:end="43:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:16"><expr pos:start="49:5" pos:end="49:15"><name pos:start="49:5" pos:end="49:11">prev_dc</name> <operator pos:start="49:13" pos:end="49:13">=</operator> <literal type="number" pos:start="49:15" pos:end="49:15">0</literal></expr>;</expr_stmt>

    <for pos:start="51:5" pos:end="123:5">for <control pos:start="51:9" pos:end="51:27">(<init pos:start="51:10" pos:end="51:15"><expr pos:start="51:10" pos:end="51:14"><name pos:start="51:10" pos:end="51:10">j</name> <operator pos:start="51:12" pos:end="51:12">=</operator> <literal type="number" pos:start="51:14" pos:end="51:14">0</literal></expr>;</init> <condition pos:start="51:17" pos:end="51:22"><expr pos:start="51:17" pos:end="51:21"><name pos:start="51:17" pos:end="51:17">j</name> <operator pos:start="51:19" pos:end="51:19">&lt;</operator> <literal type="number" pos:start="51:21" pos:end="51:21">2</literal></expr>;</condition> <incr pos:start="51:24" pos:end="51:26"><expr pos:start="51:24" pos:end="51:26"><name pos:start="51:24" pos:end="51:24">j</name><operator pos:start="51:25" pos:end="51:26">++</operator></expr></incr>)</control> <block pos:start="51:29" pos:end="123:5">{<block_content pos:start="53:9" pos:end="121:26">

        <for pos:start="53:9" pos:end="119:9">for <control pos:start="53:13" pos:end="53:31">(<init pos:start="53:14" pos:end="53:19"><expr pos:start="53:14" pos:end="53:18"><name pos:start="53:14" pos:end="53:14">k</name> <operator pos:start="53:16" pos:end="53:16">=</operator> <literal type="number" pos:start="53:18" pos:end="53:18">0</literal></expr>;</init> <condition pos:start="53:21" pos:end="53:26"><expr pos:start="53:21" pos:end="53:25"><name pos:start="53:21" pos:end="53:21">k</name> <operator pos:start="53:23" pos:end="53:23">&lt;</operator> <literal type="number" pos:start="53:25" pos:end="53:25">4</literal></expr>;</condition> <incr pos:start="53:28" pos:end="53:30"><expr pos:start="53:28" pos:end="53:30"><name pos:start="53:28" pos:end="53:28">k</name><operator pos:start="53:29" pos:end="53:30">++</operator></expr></incr>)</control> <block pos:start="53:33" pos:end="119:9">{<block_content pos:start="55:13" pos:end="117:62">

            <if_stmt pos:start="55:13" pos:end="71:13"><if pos:start="55:13" pos:end="59:13">if <condition pos:start="55:16" pos:end="55:25">(<expr pos:start="55:17" pos:end="55:24"><operator pos:start="55:17" pos:end="55:17">!</operator><operator pos:start="55:18" pos:end="55:18">(</operator><name pos:start="55:19" pos:end="55:19">j</name> <operator pos:start="55:21" pos:end="55:21">|</operator> <name pos:start="55:23" pos:end="55:23">k</name><operator pos:start="55:24" pos:end="55:24">)</operator></expr>)</condition> <block pos:start="55:27" pos:end="59:13">{<block_content pos:start="57:17" pos:end="57:37">

                <expr_stmt pos:start="57:17" pos:end="57:37"><expr pos:start="57:17" pos:end="57:36"><name pos:start="57:17" pos:end="57:18">dc</name> <operator pos:start="57:20" pos:end="57:20">=</operator> <call pos:start="57:22" pos:end="57:36"><name pos:start="57:22" pos:end="57:29">get_bits</name><argument_list pos:start="57:30" pos:end="57:36">(<argument pos:start="57:31" pos:end="57:32"><expr pos:start="57:31" pos:end="57:32"><name pos:start="57:31" pos:end="57:32">gb</name></expr></argument>, <argument pos:start="57:35" pos:end="57:35"><expr pos:start="57:35" pos:end="57:35"><literal type="number" pos:start="57:35" pos:end="57:35">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="59:15" pos:end="71:13">else <block pos:start="59:20" pos:end="71:13">{<block_content pos:start="61:17" pos:end="69:41">

                <expr_stmt pos:start="61:17" pos:end="61:57"><expr pos:start="61:17" pos:end="61:56"><name pos:start="61:17" pos:end="61:18">dc</name> <operator pos:start="61:20" pos:end="61:20">=</operator> <call pos:start="61:22" pos:end="61:56"><name pos:start="61:22" pos:end="61:29">get_vlc2</name><argument_list pos:start="61:30" pos:end="61:56">(<argument pos:start="61:31" pos:end="61:32"><expr pos:start="61:31" pos:end="61:32"><name pos:start="61:31" pos:end="61:32">gb</name></expr></argument>, <argument pos:start="61:35" pos:end="61:49"><expr pos:start="61:35" pos:end="61:49"><name pos:start="61:35" pos:end="61:49"><name pos:start="61:35" pos:end="61:35">c</name><operator pos:start="61:36" pos:end="61:37">-&gt;</operator><name pos:start="61:38" pos:end="61:43">dc_vlc</name><operator pos:start="61:44" pos:end="61:44">.</operator><name pos:start="61:45" pos:end="61:49">table</name></name></expr></argument>, <argument pos:start="61:52" pos:end="61:52"><expr pos:start="61:52" pos:end="61:52"><literal type="number" pos:start="61:52" pos:end="61:52">9</literal></expr></argument>, <argument pos:start="61:55" pos:end="61:55"><expr pos:start="61:55" pos:end="61:55"><literal type="number" pos:start="61:55" pos:end="61:55">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="63:17" pos:end="65:47"><if pos:start="63:17" pos:end="65:47">if <condition pos:start="63:20" pos:end="63:29">(<expr pos:start="63:21" pos:end="63:28"><name pos:start="63:21" pos:end="63:22">dc</name> <operator pos:start="63:24" pos:end="63:25">==</operator> <operator pos:start="63:27" pos:end="63:27">-</operator><literal type="number" pos:start="63:28" pos:end="63:28">1</literal></expr>)</condition><block type="pseudo" pos:start="65:21" pos:end="65:47"><block_content pos:start="65:21" pos:end="65:47">

                    <return pos:start="65:21" pos:end="65:47">return <expr pos:start="65:28" pos:end="65:46"><name pos:start="65:28" pos:end="65:46">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

                <if_stmt pos:start="67:17" pos:end="69:41"><if pos:start="67:17" pos:end="69:41">if <condition pos:start="67:20" pos:end="67:32">(<expr pos:start="67:21" pos:end="67:31"><name pos:start="67:21" pos:end="67:22">dc</name> <operator pos:start="67:24" pos:end="67:25">==</operator> <literal type="number" pos:start="67:27" pos:end="67:31">0x100</literal></expr>)</condition><block type="pseudo" pos:start="69:21" pos:end="69:41"><block_content pos:start="69:21" pos:end="69:41">

                    <expr_stmt pos:start="69:21" pos:end="69:41"><expr pos:start="69:21" pos:end="69:40"><name pos:start="69:21" pos:end="69:22">dc</name> <operator pos:start="69:24" pos:end="69:24">=</operator> <call pos:start="69:26" pos:end="69:40"><name pos:start="69:26" pos:end="69:33">get_bits</name><argument_list pos:start="69:34" pos:end="69:40">(<argument pos:start="69:35" pos:end="69:36"><expr pos:start="69:35" pos:end="69:36"><name pos:start="69:35" pos:end="69:36">gb</name></expr></argument>, <argument pos:start="69:39" pos:end="69:39"><expr pos:start="69:39" pos:end="69:39"><literal type="number" pos:start="69:39" pos:end="69:39">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="73:13" pos:end="73:48"><expr pos:start="73:13" pos:end="73:47"><name pos:start="73:13" pos:end="73:14">dc</name>          <operator pos:start="73:25" pos:end="73:25">=</operator> <operator pos:start="73:27" pos:end="73:27">(</operator><name pos:start="73:28" pos:end="73:29">dc</name> <operator pos:start="73:31" pos:end="73:31">+</operator> <name pos:start="73:33" pos:end="73:39">prev_dc</name><operator pos:start="73:40" pos:end="73:40">)</operator> <operator pos:start="73:42" pos:end="73:42">&amp;</operator> <literal type="number" pos:start="73:44" pos:end="73:47">0xFF</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:29"><expr pos:start="75:13" pos:end="75:28"><name pos:start="75:13" pos:end="75:19">prev_dc</name>     <operator pos:start="75:25" pos:end="75:25">=</operator> <name pos:start="75:27" pos:end="75:28">dc</name></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:29"><expr pos:start="77:13" pos:end="77:28"><name pos:start="77:13" pos:end="77:23"><name pos:start="77:13" pos:end="77:13">c</name><operator pos:start="77:14" pos:end="77:15">-&gt;</operator><name pos:start="77:16" pos:end="77:20">block</name><index pos:start="77:21" pos:end="77:23">[<expr pos:start="77:22" pos:end="77:22"><literal type="number" pos:start="77:22" pos:end="77:22">0</literal></expr>]</index></name> <operator pos:start="77:25" pos:end="77:25">=</operator> <name pos:start="77:27" pos:end="77:28">dc</name></expr>;</expr_stmt>



            <expr_stmt pos:start="81:13" pos:end="81:62"><expr pos:start="81:13" pos:end="81:61"><name pos:start="81:13" pos:end="81:14">nc</name> <operator pos:start="81:16" pos:end="81:16">=</operator> <call pos:start="81:18" pos:end="81:61"><name pos:start="81:18" pos:end="81:25">get_vlc2</name><argument_list pos:start="81:26" pos:end="81:61">(<argument pos:start="81:27" pos:end="81:28"><expr pos:start="81:27" pos:end="81:28"><name pos:start="81:27" pos:end="81:28">gb</name></expr></argument>, <argument pos:start="81:31" pos:end="81:54"><expr pos:start="81:31" pos:end="81:54"><name pos:start="81:31" pos:end="81:48"><name pos:start="81:31" pos:end="81:31">c</name><operator pos:start="81:32" pos:end="81:33">-&gt;</operator><name pos:start="81:34" pos:end="81:39">nc_vlc</name><index pos:start="81:40" pos:end="81:48">[<expr pos:start="81:41" pos:end="81:47"><name pos:start="81:41" pos:end="81:47">vlc_set</name></expr>]</index></name><operator pos:start="81:49" pos:end="81:49">.</operator><name pos:start="81:50" pos:end="81:54">table</name></expr></argument>, <argument pos:start="81:57" pos:end="81:57"><expr pos:start="81:57" pos:end="81:57"><literal type="number" pos:start="81:57" pos:end="81:57">9</literal></expr></argument>, <argument pos:start="81:60" pos:end="81:60"><expr pos:start="81:60" pos:end="81:60"><literal type="number" pos:start="81:60" pos:end="81:60">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="83:13" pos:end="85:43"><if pos:start="83:13" pos:end="85:43">if <condition pos:start="83:16" pos:end="83:25">(<expr pos:start="83:17" pos:end="83:24"><name pos:start="83:17" pos:end="83:18">nc</name> <operator pos:start="83:20" pos:end="83:21">==</operator> <operator pos:start="83:23" pos:end="83:23">-</operator><literal type="number" pos:start="83:24" pos:end="83:24">1</literal></expr>)</condition><block type="pseudo" pos:start="85:17" pos:end="85:43"><block_content pos:start="85:17" pos:end="85:43">

                <return pos:start="85:17" pos:end="85:43">return <expr pos:start="85:24" pos:end="85:42"><name pos:start="85:24" pos:end="85:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



            <expr_stmt pos:start="89:13" pos:end="89:21"><expr pos:start="89:13" pos:end="89:20"><name pos:start="89:13" pos:end="89:16">bpos</name> <operator pos:start="89:18" pos:end="89:18">=</operator> <literal type="number" pos:start="89:20" pos:end="89:20">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:60"><expr pos:start="91:13" pos:end="91:59"><call pos:start="91:13" pos:end="91:59"><name pos:start="91:13" pos:end="91:18">memset</name><argument_list pos:start="91:19" pos:end="91:59">(<argument pos:start="91:20" pos:end="91:31"><expr pos:start="91:20" pos:end="91:31"><name pos:start="91:20" pos:end="91:27"><name pos:start="91:20" pos:end="91:20">c</name><operator pos:start="91:21" pos:end="91:22">-&gt;</operator><name pos:start="91:23" pos:end="91:27">block</name></name> <operator pos:start="91:29" pos:end="91:29">+</operator> <literal type="number" pos:start="91:31" pos:end="91:31">1</literal></expr></argument>, <argument pos:start="91:34" pos:end="91:34"><expr pos:start="91:34" pos:end="91:34"><literal type="number" pos:start="91:34" pos:end="91:34">0</literal></expr></argument>, <argument pos:start="91:37" pos:end="91:58"><expr pos:start="91:37" pos:end="91:58"><literal type="number" pos:start="91:37" pos:end="91:38">15</literal> <operator pos:start="91:40" pos:end="91:40">*</operator> <sizeof pos:start="91:42" pos:end="91:58">sizeof<argument_list pos:start="91:48" pos:end="91:58">(<argument pos:start="91:49" pos:end="91:57"><expr pos:start="91:49" pos:end="91:57"><operator pos:start="91:49" pos:end="91:49">*</operator><name pos:start="91:50" pos:end="91:57"><name pos:start="91:50" pos:end="91:50">c</name><operator pos:start="91:51" pos:end="91:52">-&gt;</operator><name pos:start="91:53" pos:end="91:57">block</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="93:13" pos:end="115:13">for <control pos:start="93:17" pos:end="93:36">(<init pos:start="93:18" pos:end="93:23"><expr pos:start="93:18" pos:end="93:22"><name pos:start="93:18" pos:end="93:18">l</name> <operator pos:start="93:20" pos:end="93:20">=</operator> <literal type="number" pos:start="93:22" pos:end="93:22">0</literal></expr>;</init> <condition pos:start="93:25" pos:end="93:31"><expr pos:start="93:25" pos:end="93:30"><name pos:start="93:25" pos:end="93:25">l</name> <operator pos:start="93:27" pos:end="93:27">&lt;</operator> <name pos:start="93:29" pos:end="93:30">nc</name></expr>;</condition> <incr pos:start="93:33" pos:end="93:35"><expr pos:start="93:33" pos:end="93:35"><name pos:start="93:33" pos:end="93:33">l</name><operator pos:start="93:34" pos:end="93:35">++</operator></expr></incr>)</control> <block pos:start="93:38" pos:end="115:13">{<block_content pos:start="95:17" pos:end="113:53">

                <expr_stmt pos:start="95:17" pos:end="95:66"><expr pos:start="95:17" pos:end="95:65"><name pos:start="95:17" pos:end="95:18">ac</name> <operator pos:start="95:20" pos:end="95:20">=</operator> <call pos:start="95:22" pos:end="95:65"><name pos:start="95:22" pos:end="95:29">get_vlc2</name><argument_list pos:start="95:30" pos:end="95:65">(<argument pos:start="95:31" pos:end="95:32"><expr pos:start="95:31" pos:end="95:32"><name pos:start="95:31" pos:end="95:32">gb</name></expr></argument>, <argument pos:start="95:35" pos:end="95:58"><expr pos:start="95:35" pos:end="95:58"><name pos:start="95:35" pos:end="95:52"><name pos:start="95:35" pos:end="95:35">c</name><operator pos:start="95:36" pos:end="95:37">-&gt;</operator><name pos:start="95:38" pos:end="95:43">ac_vlc</name><index pos:start="95:44" pos:end="95:52">[<expr pos:start="95:45" pos:end="95:51"><name pos:start="95:45" pos:end="95:51">vlc_set</name></expr>]</index></name><operator pos:start="95:53" pos:end="95:53">.</operator><name pos:start="95:54" pos:end="95:58">table</name></expr></argument>, <argument pos:start="95:61" pos:end="95:61"><expr pos:start="95:61" pos:end="95:61"><literal type="number" pos:start="95:61" pos:end="95:61">9</literal></expr></argument>, <argument pos:start="95:64" pos:end="95:64"><expr pos:start="95:64" pos:end="95:64"><literal type="number" pos:start="95:64" pos:end="95:64">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="97:17" pos:end="99:47"><if pos:start="97:17" pos:end="99:47">if <condition pos:start="97:20" pos:end="97:29">(<expr pos:start="97:21" pos:end="97:28"><name pos:start="97:21" pos:end="97:22">ac</name> <operator pos:start="97:24" pos:end="97:25">==</operator> <operator pos:start="97:27" pos:end="97:27">-</operator><literal type="number" pos:start="97:28" pos:end="97:28">1</literal></expr>)</condition><block type="pseudo" pos:start="99:21" pos:end="99:47"><block_content pos:start="99:21" pos:end="99:47">

                    <return pos:start="99:21" pos:end="99:47">return <expr pos:start="99:28" pos:end="99:46"><name pos:start="99:28" pos:end="99:46">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

                <if_stmt pos:start="101:17" pos:end="103:42"><if pos:start="101:17" pos:end="103:42">if <condition pos:start="101:20" pos:end="101:33">(<expr pos:start="101:21" pos:end="101:32"><name pos:start="101:21" pos:end="101:22">ac</name> <operator pos:start="101:24" pos:end="101:25">==</operator> <literal type="number" pos:start="101:27" pos:end="101:32">0x1000</literal></expr>)</condition><block type="pseudo" pos:start="103:21" pos:end="103:42"><block_content pos:start="103:21" pos:end="103:42">

                    <expr_stmt pos:start="103:21" pos:end="103:42"><expr pos:start="103:21" pos:end="103:41"><name pos:start="103:21" pos:end="103:22">ac</name> <operator pos:start="103:24" pos:end="103:24">=</operator> <call pos:start="103:26" pos:end="103:41"><name pos:start="103:26" pos:end="103:33">get_bits</name><argument_list pos:start="103:34" pos:end="103:41">(<argument pos:start="103:35" pos:end="103:36"><expr pos:start="103:35" pos:end="103:36"><name pos:start="103:35" pos:end="103:36">gb</name></expr></argument>, <argument pos:start="103:39" pos:end="103:40"><expr pos:start="103:39" pos:end="103:40"><literal type="number" pos:start="103:39" pos:end="103:40">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="105:17" pos:end="105:33"><expr pos:start="105:17" pos:end="105:32"><name pos:start="105:17" pos:end="105:20">bpos</name> <operator pos:start="105:22" pos:end="105:23">+=</operator> <name pos:start="105:25" pos:end="105:26">ac</name> <operator pos:start="105:28" pos:end="105:28">&amp;</operator> <literal type="number" pos:start="105:30" pos:end="105:32">0xF</literal></expr>;</expr_stmt>

                <if_stmt pos:start="107:17" pos:end="109:47"><if pos:start="107:17" pos:end="109:47">if <condition pos:start="107:20" pos:end="107:31">(<expr pos:start="107:21" pos:end="107:30"><name pos:start="107:21" pos:end="107:24">bpos</name> <operator pos:start="107:26" pos:end="107:27">&gt;=</operator> <literal type="number" pos:start="107:29" pos:end="107:30">64</literal></expr>)</condition><block type="pseudo" pos:start="109:21" pos:end="109:47"><block_content pos:start="109:21" pos:end="109:47">

                    <return pos:start="109:21" pos:end="109:47">return <expr pos:start="109:28" pos:end="109:46"><name pos:start="109:28" pos:end="109:46">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

                <expr_stmt pos:start="111:17" pos:end="111:46"><expr pos:start="111:17" pos:end="111:45"><name pos:start="111:17" pos:end="111:19">val</name> <operator pos:start="111:21" pos:end="111:21">=</operator> <call pos:start="111:23" pos:end="111:45"><name pos:start="111:23" pos:end="111:33">sign_extend</name><argument_list pos:start="111:34" pos:end="111:45">(<argument pos:start="111:35" pos:end="111:41"><expr pos:start="111:35" pos:end="111:41"><name pos:start="111:35" pos:end="111:36">ac</name> <operator pos:start="111:38" pos:end="111:39">&gt;&gt;</operator> <literal type="number" pos:start="111:41" pos:end="111:41">4</literal></expr></argument>, <argument pos:start="111:44" pos:end="111:44"><expr pos:start="111:44" pos:end="111:44"><literal type="number" pos:start="111:44" pos:end="111:44">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="113:17" pos:end="113:53"><expr pos:start="113:17" pos:end="113:52"><name pos:start="113:17" pos:end="113:46"><name pos:start="113:17" pos:end="113:17">c</name><operator pos:start="113:18" pos:end="113:19">-&gt;</operator><name pos:start="113:20" pos:end="113:24">block</name><index pos:start="113:25" pos:end="113:46">[<expr pos:start="113:26" pos:end="113:45"><name pos:start="113:26" pos:end="113:45"><name pos:start="113:26" pos:end="113:37">tscc2_zigzag</name><index pos:start="113:38" pos:end="113:45">[<expr pos:start="113:39" pos:end="113:44"><name pos:start="113:39" pos:end="113:42">bpos</name><operator pos:start="113:43" pos:end="113:44">++</operator></expr>]</index></name></expr>]</index></name> <operator pos:start="113:48" pos:end="113:48">=</operator> <name pos:start="113:50" pos:end="113:52">val</name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="117:13" pos:end="117:62"><expr pos:start="117:13" pos:end="117:61"><call pos:start="117:13" pos:end="117:61"><name pos:start="117:13" pos:end="117:27">tscc2_idct4_put</name><argument_list pos:start="117:28" pos:end="117:61">(<argument pos:start="117:29" pos:end="117:36"><expr pos:start="117:29" pos:end="117:36"><name pos:start="117:29" pos:end="117:36"><name pos:start="117:29" pos:end="117:29">c</name><operator pos:start="117:30" pos:end="117:31">-&gt;</operator><name pos:start="117:32" pos:end="117:36">block</name></name></expr></argument>, <argument pos:start="117:39" pos:end="117:39"><expr pos:start="117:39" pos:end="117:39"><name pos:start="117:39" pos:end="117:39">q</name></expr></argument>, <argument pos:start="117:42" pos:end="117:52"><expr pos:start="117:42" pos:end="117:52"><name pos:start="117:42" pos:end="117:44">dst</name> <operator pos:start="117:46" pos:end="117:46">+</operator> <name pos:start="117:48" pos:end="117:48">k</name> <operator pos:start="117:50" pos:end="117:50">*</operator> <literal type="number" pos:start="117:52" pos:end="117:52">4</literal></expr></argument>, <argument pos:start="117:55" pos:end="117:60"><expr pos:start="117:55" pos:end="117:60"><name pos:start="117:55" pos:end="117:60">stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="121:9" pos:end="121:26"><expr pos:start="121:9" pos:end="121:25"><name pos:start="121:9" pos:end="121:11">dst</name> <operator pos:start="121:13" pos:end="121:14">+=</operator> <literal type="number" pos:start="121:16" pos:end="121:16">4</literal> <operator pos:start="121:18" pos:end="121:18">*</operator> <name pos:start="121:20" pos:end="121:25">stride</name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <return pos:start="125:5" pos:end="125:13">return <expr pos:start="125:12" pos:end="125:12"><literal type="number" pos:start="125:12" pos:end="125:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
