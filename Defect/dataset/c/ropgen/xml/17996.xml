<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17996.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:34"><name pos:start="1:1" pos:end="1:17">vmxnet3_init_msix</name><argument_list pos:start="1:18" pos:end="1:34">(<argument pos:start="1:19" pos:end="1:33">VMXNET3State *s</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="47:1">{<block_content pos:start="5:5" pos:end="45:24">

    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:32"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">PCIDevice</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:16">d</name> <init pos:start="5:18" pos:end="5:32">= <expr pos:start="5:20" pos:end="5:32"><call pos:start="5:20" pos:end="5:32"><name pos:start="5:20" pos:end="5:29">PCI_DEVICE</name><argument_list pos:start="5:30" pos:end="5:32">(<argument pos:start="5:31" pos:end="5:31"><expr pos:start="5:31" pos:end="5:31"><name pos:start="5:31" pos:end="5:31">s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="17:48"><decl pos:start="7:5" pos:end="17:47"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">res</name> <init pos:start="7:13" pos:end="17:47">= <expr pos:start="7:15" pos:end="17:47"><call pos:start="7:15" pos:end="17:47"><name pos:start="7:15" pos:end="7:23">msix_init</name><argument_list pos:start="7:24" pos:end="17:47">(<argument pos:start="7:25" pos:end="7:25"><expr pos:start="7:25" pos:end="7:25"><name pos:start="7:25" pos:end="7:25">d</name></expr></argument>, <argument pos:start="7:28" pos:end="7:44"><expr pos:start="7:28" pos:end="7:44"><name pos:start="7:28" pos:end="7:44">VMXNET3_MAX_INTRS</name></expr></argument>,

                        <argument pos:start="9:25" pos:end="9:36"><expr pos:start="9:25" pos:end="9:36"><operator pos:start="9:25" pos:end="9:25">&amp;</operator><name pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:26">s</name><operator pos:start="9:27" pos:end="9:28">-&gt;</operator><name pos:start="9:29" pos:end="9:36">msix_bar</name></name></expr></argument>,

                        <argument pos:start="11:25" pos:end="11:44"><expr pos:start="11:25" pos:end="11:44"><name pos:start="11:25" pos:end="11:44">VMXNET3_MSIX_BAR_IDX</name></expr></argument>, <argument pos:start="11:47" pos:end="11:68"><expr pos:start="11:47" pos:end="11:68"><name pos:start="11:47" pos:end="11:68">VMXNET3_OFF_MSIX_TABLE</name></expr></argument>,

                        <argument pos:start="13:25" pos:end="13:36"><expr pos:start="13:25" pos:end="13:36"><operator pos:start="13:25" pos:end="13:25">&amp;</operator><name pos:start="13:26" pos:end="13:36"><name pos:start="13:26" pos:end="13:26">s</name><operator pos:start="13:27" pos:end="13:28">-&gt;</operator><name pos:start="13:29" pos:end="13:36">msix_bar</name></name></expr></argument>,

                        <argument pos:start="15:25" pos:end="15:44"><expr pos:start="15:25" pos:end="15:44"><name pos:start="15:25" pos:end="15:44">VMXNET3_MSIX_BAR_IDX</name></expr></argument>, <argument pos:start="15:47" pos:end="15:69"><expr pos:start="15:47" pos:end="15:69"><call pos:start="15:47" pos:end="15:69"><name pos:start="15:47" pos:end="15:66">VMXNET3_OFF_MSIX_PBA</name><argument_list pos:start="15:67" pos:end="15:69">(<argument pos:start="15:68" pos:end="15:68"><expr pos:start="15:68" pos:end="15:68"><name pos:start="15:68" pos:end="15:68">s</name></expr></argument>)</argument_list></call></expr></argument>,

                        <argument pos:start="17:25" pos:end="17:46"><expr pos:start="17:25" pos:end="17:46"><call pos:start="17:25" pos:end="17:46"><name pos:start="17:25" pos:end="17:43">VMXNET3_MSIX_OFFSET</name><argument_list pos:start="17:44" pos:end="17:46">(<argument pos:start="17:45" pos:end="17:45"><expr pos:start="17:45" pos:end="17:45"><name pos:start="17:45" pos:end="17:45">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="43:5"><if pos:start="21:5" pos:end="27:5">if <condition pos:start="21:8" pos:end="21:16">(<expr pos:start="21:9" pos:end="21:15"><literal type="number" pos:start="21:9" pos:end="21:9">0</literal> <operator pos:start="21:11" pos:end="21:11">&gt;</operator> <name pos:start="21:13" pos:end="21:15">res</name></expr>)</condition> <block pos:start="21:18" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:29">

        <expr_stmt pos:start="23:9" pos:end="23:63"><expr pos:start="23:9" pos:end="23:62"><call pos:start="23:9" pos:end="23:62"><name pos:start="23:9" pos:end="23:17">VMW_WRPRN</name><argument_list pos:start="23:18" pos:end="23:62">(<argument pos:start="23:19" pos:end="23:56"><expr pos:start="23:19" pos:end="23:56"><literal type="string" pos:start="23:19" pos:end="23:56">"Failed to initialize MSI-X, error %d"</literal></expr></argument>, <argument pos:start="23:59" pos:end="23:61"><expr pos:start="23:59" pos:end="23:61"><name pos:start="23:59" pos:end="23:61">res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:29"><expr pos:start="25:9" pos:end="25:28"><name pos:start="25:9" pos:end="25:20"><name pos:start="25:9" pos:end="25:9">s</name><operator pos:start="25:10" pos:end="25:11">-&gt;</operator><name pos:start="25:12" pos:end="25:20">msix_used</name></name> <operator pos:start="25:22" pos:end="25:22">=</operator> <name pos:start="25:24" pos:end="25:28">false</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="27:7" pos:end="43:5">else <block pos:start="27:12" pos:end="43:5">{<block_content pos:start="29:9" pos:end="41:9">

        <if_stmt pos:start="29:9" pos:end="41:9"><if pos:start="29:9" pos:end="37:9">if <condition pos:start="29:12" pos:end="29:60">(<expr pos:start="29:13" pos:end="29:59"><operator pos:start="29:13" pos:end="29:13">!</operator><call pos:start="29:14" pos:end="29:59"><name pos:start="29:14" pos:end="29:37">vmxnet3_use_msix_vectors</name><argument_list pos:start="29:38" pos:end="29:59">(<argument pos:start="29:39" pos:end="29:39"><expr pos:start="29:39" pos:end="29:39"><name pos:start="29:39" pos:end="29:39">s</name></expr></argument>, <argument pos:start="29:42" pos:end="29:58"><expr pos:start="29:42" pos:end="29:58"><name pos:start="29:42" pos:end="29:58">VMXNET3_MAX_INTRS</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="29:62" pos:end="37:9">{<block_content pos:start="31:13" pos:end="35:33">

            <expr_stmt pos:start="31:13" pos:end="31:68"><expr pos:start="31:13" pos:end="31:67"><call pos:start="31:13" pos:end="31:67"><name pos:start="31:13" pos:end="31:21">VMW_WRPRN</name><argument_list pos:start="31:22" pos:end="31:67">(<argument pos:start="31:23" pos:end="31:61"><expr pos:start="31:23" pos:end="31:61"><literal type="string" pos:start="31:23" pos:end="31:61">"Failed to use MSI-X vectors, error %d"</literal></expr></argument>, <argument pos:start="31:64" pos:end="31:66"><expr pos:start="31:64" pos:end="31:66"><name pos:start="31:64" pos:end="31:66">res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="33:13" pos:end="33:55"><expr pos:start="33:13" pos:end="33:54"><call pos:start="33:13" pos:end="33:54"><name pos:start="33:13" pos:end="33:23">msix_uninit</name><argument_list pos:start="33:24" pos:end="33:54">(<argument pos:start="33:25" pos:end="33:25"><expr pos:start="33:25" pos:end="33:25"><name pos:start="33:25" pos:end="33:25">d</name></expr></argument>, <argument pos:start="33:28" pos:end="33:39"><expr pos:start="33:28" pos:end="33:39"><operator pos:start="33:28" pos:end="33:28">&amp;</operator><name pos:start="33:29" pos:end="33:39"><name pos:start="33:29" pos:end="33:29">s</name><operator pos:start="33:30" pos:end="33:31">-&gt;</operator><name pos:start="33:32" pos:end="33:39">msix_bar</name></name></expr></argument>, <argument pos:start="33:42" pos:end="33:53"><expr pos:start="33:42" pos:end="33:53"><operator pos:start="33:42" pos:end="33:42">&amp;</operator><name pos:start="33:43" pos:end="33:53"><name pos:start="33:43" pos:end="33:43">s</name><operator pos:start="33:44" pos:end="33:45">-&gt;</operator><name pos:start="33:46" pos:end="33:53">msix_bar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="35:13" pos:end="35:33"><expr pos:start="35:13" pos:end="35:32"><name pos:start="35:13" pos:end="35:24"><name pos:start="35:13" pos:end="35:13">s</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:24">msix_used</name></name> <operator pos:start="35:26" pos:end="35:26">=</operator> <name pos:start="35:28" pos:end="35:32">false</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="37:11" pos:end="41:9">else <block pos:start="37:16" pos:end="41:9">{<block_content pos:start="39:13" pos:end="39:32">

            <expr_stmt pos:start="39:13" pos:end="39:32"><expr pos:start="39:13" pos:end="39:31"><name pos:start="39:13" pos:end="39:24"><name pos:start="39:13" pos:end="39:13">s</name><operator pos:start="39:14" pos:end="39:15">-&gt;</operator><name pos:start="39:16" pos:end="39:24">msix_used</name></name> <operator pos:start="39:26" pos:end="39:26">=</operator> <name pos:start="39:28" pos:end="39:31">true</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>

    <return pos:start="45:5" pos:end="45:24">return <expr pos:start="45:12" pos:end="45:23"><name pos:start="45:12" pos:end="45:23"><name pos:start="45:12" pos:end="45:12">s</name><operator pos:start="45:13" pos:end="45:14">-&gt;</operator><name pos:start="45:15" pos:end="45:23">msix_used</name></name></expr>;</return>

</block_content>}</block>
</unit>
