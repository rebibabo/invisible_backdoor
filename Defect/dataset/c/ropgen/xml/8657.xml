<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8657.c" pos:tabs="8"><function pos:start="1:1" pos:end="47:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">notdirty_mem_writew</name><parameter_list pos:start="1:32" pos:end="3:45">(<parameter pos:start="1:33" pos:end="1:44"><decl pos:start="1:33" pos:end="1:44"><type pos:start="1:33" pos:end="1:44"><name pos:start="1:33" pos:end="1:36">void</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:44">opaque</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:73"><decl pos:start="1:47" pos:end="1:73"><type pos:start="1:47" pos:end="1:73"><name pos:start="1:47" pos:end="1:64">target_phys_addr_t</name></type> <name pos:start="1:66" pos:end="1:73">ram_addr</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:44"><decl pos:start="3:33" pos:end="3:44"><type pos:start="3:33" pos:end="3:44"><name pos:start="3:33" pos:end="3:40">uint32_t</name></type> <name pos:start="3:42" pos:end="3:44">val</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="47:1">{<block_content pos:start="7:5" pos:end="45:68">

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:19">dirty_flags</name></decl>;</decl_stmt>

    <expr_stmt pos:start="9:5" pos:end="9:63"><expr pos:start="9:5" pos:end="9:62"><name pos:start="9:5" pos:end="9:15">dirty_flags</name> <operator pos:start="9:17" pos:end="9:17">=</operator> <name pos:start="9:19" pos:end="9:62"><name pos:start="9:19" pos:end="9:32">phys_ram_dirty</name><index pos:start="9:33" pos:end="9:62">[<expr pos:start="9:34" pos:end="9:61"><name pos:start="9:34" pos:end="9:41">ram_addr</name> <operator pos:start="9:43" pos:end="9:44">&gt;&gt;</operator> <name pos:start="9:46" pos:end="9:61">TARGET_PAGE_BITS</name></expr>]</index></name></expr>;</expr_stmt>

    <if_stmt pos:start="11:5" pos:end="21:5"><if pos:start="11:5" pos:end="21:5">if <condition pos:start="11:8" pos:end="11:41">(<expr pos:start="11:9" pos:end="11:40"><operator pos:start="11:9" pos:end="11:9">!</operator><operator pos:start="11:10" pos:end="11:10">(</operator><name pos:start="11:11" pos:end="11:21">dirty_flags</name> <operator pos:start="11:23" pos:end="11:23">&amp;</operator> <name pos:start="11:25" pos:end="11:39">CODE_DIRTY_FLAG</name><operator pos:start="11:40" pos:end="11:40">)</operator></expr>)</condition> <block pos:start="11:43" pos:end="21:5">{<block_content pos:start="15:9" pos:end="20:0">

<cpp:if pos:start="13:1" pos:end="13:30">#<cpp:directive pos:start="13:2" pos:end="13:3">if</cpp:directive> <expr pos:start="13:5" pos:end="13:30"><operator pos:start="13:5" pos:end="13:5">!</operator><call pos:start="13:6" pos:end="13:30"><name pos:start="13:6" pos:end="13:12">defined</name><argument_list pos:start="13:13" pos:end="13:30">(<argument pos:start="13:14" pos:end="13:29"><expr pos:start="13:14" pos:end="13:29"><name pos:start="13:14" pos:end="13:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <expr_stmt pos:start="15:9" pos:end="15:50"><expr pos:start="15:9" pos:end="15:49"><call pos:start="15:9" pos:end="15:49"><name pos:start="15:9" pos:end="15:36">tb_invalidate_phys_page_fast</name><argument_list pos:start="15:37" pos:end="15:49">(<argument pos:start="15:38" pos:end="15:45"><expr pos:start="15:38" pos:end="15:45"><name pos:start="15:38" pos:end="15:45">ram_addr</name></expr></argument>, <argument pos:start="15:48" pos:end="15:48"><expr pos:start="15:48" pos:end="15:48"><literal type="number" pos:start="15:48" pos:end="15:48">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="17:9" pos:end="20:0"><expr pos:start="17:9" pos:end="17:66"><name pos:start="17:9" pos:end="17:19">dirty_flags</name> <operator pos:start="17:21" pos:end="17:21">=</operator> <name pos:start="17:23" pos:end="17:66"><name pos:start="17:23" pos:end="17:36">phys_ram_dirty</name><index pos:start="17:37" pos:end="17:66">[<expr pos:start="17:38" pos:end="17:65"><name pos:start="17:38" pos:end="17:45">ram_addr</name> <operator pos:start="17:47" pos:end="17:48">&gt;&gt;</operator> <name pos:start="17:50" pos:end="17:65">TARGET_PAGE_BITS</name></expr>]</index></name></expr>;</expr_stmt>

<cpp:endif pos:start="19:1" pos:end="19:6">#<cpp:directive pos:start="19:2" pos:end="19:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="23:5" pos:end="26:0"><expr pos:start="23:5" pos:end="23:42"><call pos:start="23:5" pos:end="23:42"><name pos:start="23:5" pos:end="23:9">stw_p</name><argument_list pos:start="23:10" pos:end="23:42">(<argument pos:start="23:11" pos:end="23:36"><expr pos:start="23:11" pos:end="23:36"><call pos:start="23:11" pos:end="23:36"><name pos:start="23:11" pos:end="23:26">qemu_get_ram_ptr</name><argument_list pos:start="23:27" pos:end="23:36">(<argument pos:start="23:28" pos:end="23:35"><expr pos:start="23:28" pos:end="23:35"><name pos:start="23:28" pos:end="23:35">ram_addr</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="23:39" pos:end="23:41"><expr pos:start="23:39" pos:end="23:41"><name pos:start="23:39" pos:end="23:41">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="25:1" pos:end="25:19">#<cpp:directive pos:start="25:2" pos:end="25:6">ifdef</cpp:directive> <name pos:start="25:8" pos:end="25:19">CONFIG_KQEMU</name></cpp:ifdef>

    <if_stmt pos:start="27:5" pos:end="34:0"><if pos:start="27:5" pos:end="34:0">if <condition pos:start="27:8" pos:end="29:73">(<expr pos:start="27:9" pos:end="29:72"><name pos:start="27:9" pos:end="27:37"><name pos:start="27:9" pos:end="27:22">cpu_single_env</name><operator pos:start="27:23" pos:end="27:24">-&gt;</operator><name pos:start="27:25" pos:end="27:37">kqemu_enabled</name></name> <operator pos:start="27:39" pos:end="27:40">&amp;&amp;</operator>

        <operator pos:start="29:9" pos:end="29:9">(</operator><name pos:start="29:10" pos:end="29:20">dirty_flags</name> <operator pos:start="29:22" pos:end="29:22">&amp;</operator> <name pos:start="29:24" pos:end="29:45">KQEMU_MODIFY_PAGE_MASK</name><operator pos:start="29:46" pos:end="29:46">)</operator> <operator pos:start="29:48" pos:end="29:49">!=</operator> <name pos:start="29:51" pos:end="29:72">KQEMU_MODIFY_PAGE_MASK</name></expr>)</condition><block type="pseudo" pos:start="31:9" pos:end="34:0"><block_content pos:start="31:9" pos:end="34:0">

        <expr_stmt pos:start="31:9" pos:end="34:0"><expr pos:start="31:9" pos:end="31:51"><call pos:start="31:9" pos:end="31:51"><name pos:start="31:9" pos:end="31:25">kqemu_modify_page</name><argument_list pos:start="31:26" pos:end="31:51">(<argument pos:start="31:27" pos:end="31:40"><expr pos:start="31:27" pos:end="31:40"><name pos:start="31:27" pos:end="31:40">cpu_single_env</name></expr></argument>, <argument pos:start="31:43" pos:end="31:50"><expr pos:start="31:43" pos:end="31:50"><name pos:start="31:43" pos:end="31:50">ram_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="33:1" pos:end="33:6">#<cpp:directive pos:start="33:2" pos:end="33:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="35:5" pos:end="35:45"><expr pos:start="35:5" pos:end="35:44"><name pos:start="35:5" pos:end="35:15">dirty_flags</name> <operator pos:start="35:17" pos:end="35:18">|=</operator> <operator pos:start="35:20" pos:end="35:20">(</operator><literal type="number" pos:start="35:21" pos:end="35:24">0xff</literal> <operator pos:start="35:26" pos:end="35:26">&amp;</operator> <operator pos:start="35:28" pos:end="35:28">~</operator><name pos:start="35:29" pos:end="35:43">CODE_DIRTY_FLAG</name><operator pos:start="35:44" pos:end="35:44">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:63"><expr pos:start="37:5" pos:end="37:62"><name pos:start="37:5" pos:end="37:48"><name pos:start="37:5" pos:end="37:18">phys_ram_dirty</name><index pos:start="37:19" pos:end="37:48">[<expr pos:start="37:20" pos:end="37:47"><name pos:start="37:20" pos:end="37:27">ram_addr</name> <operator pos:start="37:29" pos:end="37:30">&gt;&gt;</operator> <name pos:start="37:32" pos:end="37:47">TARGET_PAGE_BITS</name></expr>]</index></name> <operator pos:start="37:50" pos:end="37:50">=</operator> <name pos:start="37:52" pos:end="37:62">dirty_flags</name></expr>;</expr_stmt>

    <comment type="block" pos:start="39:5" pos:end="41:17">/* we remove the notdirty callback only if the code has been

       flushed */</comment>

    <if_stmt pos:start="43:5" pos:end="45:68"><if pos:start="43:5" pos:end="45:68">if <condition pos:start="43:8" pos:end="43:28">(<expr pos:start="43:9" pos:end="43:27"><name pos:start="43:9" pos:end="43:19">dirty_flags</name> <operator pos:start="43:21" pos:end="43:22">==</operator> <literal type="number" pos:start="43:24" pos:end="43:27">0xff</literal></expr>)</condition><block type="pseudo" pos:start="45:9" pos:end="45:68"><block_content pos:start="45:9" pos:end="45:68">

        <expr_stmt pos:start="45:9" pos:end="45:68"><expr pos:start="45:9" pos:end="45:67"><call pos:start="45:9" pos:end="45:67"><name pos:start="45:9" pos:end="45:21">tlb_set_dirty</name><argument_list pos:start="45:22" pos:end="45:67">(<argument pos:start="45:23" pos:end="45:36"><expr pos:start="45:23" pos:end="45:36"><name pos:start="45:23" pos:end="45:36">cpu_single_env</name></expr></argument>, <argument pos:start="45:39" pos:end="45:66"><expr pos:start="45:39" pos:end="45:66"><name pos:start="45:39" pos:end="45:66"><name pos:start="45:39" pos:end="45:52">cpu_single_env</name><operator pos:start="45:53" pos:end="45:54">-&gt;</operator><name pos:start="45:55" pos:end="45:66">mem_io_vaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>
</unit>
