<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14419.c" pos:tabs="8"><function pos:start="1:1" pos:end="97:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">ccid_handle_data</name><parameter_list pos:start="1:28" pos:end="1:57">(<parameter pos:start="1:29" pos:end="1:42"><decl pos:start="1:29" pos:end="1:42"><type pos:start="1:29" pos:end="1:42"><name pos:start="1:29" pos:end="1:37">USBDevice</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:42">dev</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:56"><decl pos:start="1:45" pos:end="1:56"><type pos:start="1:45" pos:end="1:56"><name pos:start="1:45" pos:end="1:53">USBPacket</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:56">p</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="97:1">{<block_content pos:start="5:5" pos:end="95:15">

    <decl_stmt pos:start="5:5" pos:end="5:56"><decl pos:start="5:5" pos:end="5:55"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">USBCCIDState</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:19">s</name> <init pos:start="5:21" pos:end="5:55">= <expr pos:start="5:23" pos:end="5:55"><call pos:start="5:23" pos:end="5:55"><name pos:start="5:23" pos:end="5:31">DO_UPCAST</name><argument_list pos:start="5:32" pos:end="5:55">(<argument pos:start="5:33" pos:end="5:44"><expr pos:start="5:33" pos:end="5:44"><name pos:start="5:33" pos:end="5:44">USBCCIDState</name></expr></argument>, <argument pos:start="5:47" pos:end="5:49"><expr pos:start="5:47" pos:end="5:49"><name pos:start="5:47" pos:end="5:49">dev</name></expr></argument>, <argument pos:start="5:52" pos:end="5:54"><expr pos:start="5:52" pos:end="5:54"><name pos:start="5:52" pos:end="5:54">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name> <init pos:start="7:13" pos:end="7:15">= <expr pos:start="7:15" pos:end="7:15"><literal type="number" pos:start="7:15" pos:end="7:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">uint8_t</name></type> <name pos:start="9:13" pos:end="9:18"><name pos:start="9:13" pos:end="9:15">buf</name><index pos:start="9:16" pos:end="9:18">[<expr pos:start="9:17" pos:end="9:17"><literal type="number" pos:start="9:17" pos:end="9:17">2</literal></expr>]</index></name></decl>;</decl_stmt>



    <switch pos:start="13:5" pos:end="91:5">switch <condition pos:start="13:12" pos:end="13:19">(<expr pos:start="13:13" pos:end="13:18"><name pos:start="13:13" pos:end="13:18"><name pos:start="13:13" pos:end="13:13">p</name><operator pos:start="13:14" pos:end="13:15">-&gt;</operator><name pos:start="13:16" pos:end="13:18">pid</name></name></expr>)</condition> <block pos:start="13:21" pos:end="91:5">{<block_content pos:start="15:5" pos:end="89:14">

    <case pos:start="15:5" pos:end="15:23">case <expr pos:start="15:10" pos:end="15:22"><name pos:start="15:10" pos:end="15:22">USB_TOKEN_OUT</name></expr>:</case>

        <expr_stmt pos:start="17:9" pos:end="17:41"><expr pos:start="17:9" pos:end="17:40"><name pos:start="17:9" pos:end="17:11">ret</name> <operator pos:start="17:13" pos:end="17:13">=</operator> <call pos:start="17:15" pos:end="17:40"><name pos:start="17:15" pos:end="17:34">ccid_handle_bulk_out</name><argument_list pos:start="17:35" pos:end="17:40">(<argument pos:start="17:36" pos:end="17:36"><expr pos:start="17:36" pos:end="17:36"><name pos:start="17:36" pos:end="17:36">s</name></expr></argument>, <argument pos:start="17:39" pos:end="17:39"><expr pos:start="17:39" pos:end="17:39"><name pos:start="17:39" pos:end="17:39">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="19:9" pos:end="19:14">break;</break>



    <case pos:start="23:5" pos:end="23:22">case <expr pos:start="23:10" pos:end="23:21"><name pos:start="23:10" pos:end="23:21">USB_TOKEN_IN</name></expr>:</case>

        <switch pos:start="25:9" pos:end="79:9">switch <condition pos:start="25:16" pos:end="25:31">(<expr pos:start="25:17" pos:end="25:30"><name pos:start="25:17" pos:end="25:24"><name pos:start="25:17" pos:end="25:17">p</name><operator pos:start="25:18" pos:end="25:19">-&gt;</operator><name pos:start="25:20" pos:end="25:24">devep</name></name> <operator pos:start="25:26" pos:end="25:26">&amp;</operator> <literal type="number" pos:start="25:28" pos:end="25:30">0xf</literal></expr>)</condition> <block pos:start="25:33" pos:end="79:9">{<block_content pos:start="27:9" pos:end="77:18">

        <case pos:start="27:9" pos:end="27:29">case <expr pos:start="27:14" pos:end="27:28"><name pos:start="27:14" pos:end="27:28">CCID_BULK_IN_EP</name></expr>:</case>

            <if_stmt pos:start="29:13" pos:end="37:13"><if pos:start="29:13" pos:end="33:13">if <condition pos:start="29:16" pos:end="29:29">(<expr pos:start="29:17" pos:end="29:28"><operator pos:start="29:17" pos:end="29:17">!</operator><name pos:start="29:18" pos:end="29:28"><name pos:start="29:18" pos:end="29:18">p</name><operator pos:start="29:19" pos:end="29:20">-&gt;</operator><name pos:start="29:21" pos:end="29:23">iov</name><operator pos:start="29:24" pos:end="29:24">.</operator><name pos:start="29:25" pos:end="29:28">size</name></name></expr>)</condition> <block pos:start="29:31" pos:end="33:13">{<block_content pos:start="31:17" pos:end="31:34">

                <expr_stmt pos:start="31:17" pos:end="31:34"><expr pos:start="31:17" pos:end="31:33"><name pos:start="31:17" pos:end="31:19">ret</name> <operator pos:start="31:21" pos:end="31:21">=</operator> <name pos:start="31:23" pos:end="31:33">USB_RET_NAK</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="33:15" pos:end="37:13">else <block pos:start="33:20" pos:end="37:13">{<block_content pos:start="35:17" pos:end="35:55">

                <expr_stmt pos:start="35:17" pos:end="35:55"><expr pos:start="35:17" pos:end="35:54"><name pos:start="35:17" pos:end="35:19">ret</name> <operator pos:start="35:21" pos:end="35:21">=</operator> <call pos:start="35:23" pos:end="35:54"><name pos:start="35:23" pos:end="35:48">ccid_bulk_in_copy_to_guest</name><argument_list pos:start="35:49" pos:end="35:54">(<argument pos:start="35:50" pos:end="35:50"><expr pos:start="35:50" pos:end="35:50"><name pos:start="35:50" pos:end="35:50">s</name></expr></argument>, <argument pos:start="35:53" pos:end="35:53"><expr pos:start="35:53" pos:end="35:53"><name pos:start="35:53" pos:end="35:53">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="39:13" pos:end="39:18">break;</break>

        <case pos:start="41:9" pos:end="41:28">case <expr pos:start="41:14" pos:end="41:27"><name pos:start="41:14" pos:end="41:27">CCID_INT_IN_EP</name></expr>:</case>

            <if_stmt pos:start="43:13" pos:end="67:13"><if pos:start="43:13" pos:end="67:13">if <condition pos:start="43:16" pos:end="43:38">(<expr pos:start="43:17" pos:end="43:37"><name pos:start="43:17" pos:end="43:37"><name pos:start="43:17" pos:end="43:17">s</name><operator pos:start="43:18" pos:end="43:19">-&gt;</operator><name pos:start="43:20" pos:end="43:37">notify_slot_change</name></name></expr>)</condition> <block pos:start="43:40" pos:end="67:13">{<block_content pos:start="47:17" pos:end="65:56">

                <comment type="block" pos:start="45:17" pos:end="45:57">/* page 56, RDR_to_PC_NotifySlotChange */</comment>

                <expr_stmt pos:start="47:17" pos:end="47:70"><expr pos:start="47:17" pos:end="47:69"><name pos:start="47:17" pos:end="47:22"><name pos:start="47:17" pos:end="47:19">buf</name><index pos:start="47:20" pos:end="47:22">[<expr pos:start="47:21" pos:end="47:21"><literal type="number" pos:start="47:21" pos:end="47:21">0</literal></expr>]</index></name> <operator pos:start="47:24" pos:end="47:24">=</operator> <name pos:start="47:26" pos:end="47:69">CCID_MESSAGE_TYPE_RDR_to_PC_NotifySlotChange</name></expr>;</expr_stmt>

                <expr_stmt pos:start="49:17" pos:end="49:43"><expr pos:start="49:17" pos:end="49:42"><name pos:start="49:17" pos:end="49:22"><name pos:start="49:17" pos:end="49:19">buf</name><index pos:start="49:20" pos:end="49:22">[<expr pos:start="49:21" pos:end="49:21"><literal type="number" pos:start="49:21" pos:end="49:21">1</literal></expr>]</index></name> <operator pos:start="49:24" pos:end="49:24">=</operator> <name pos:start="49:26" pos:end="49:42"><name pos:start="49:26" pos:end="49:26">s</name><operator pos:start="49:27" pos:end="49:28">-&gt;</operator><name pos:start="49:29" pos:end="49:42">bmSlotICCState</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="51:17" pos:end="51:43"><expr pos:start="51:17" pos:end="51:42"><call pos:start="51:17" pos:end="51:42"><name pos:start="51:17" pos:end="51:31">usb_packet_copy</name><argument_list pos:start="51:32" pos:end="51:42">(<argument pos:start="51:33" pos:end="51:33"><expr pos:start="51:33" pos:end="51:33"><name pos:start="51:33" pos:end="51:33">p</name></expr></argument>, <argument pos:start="51:36" pos:end="51:38"><expr pos:start="51:36" pos:end="51:38"><name pos:start="51:36" pos:end="51:38">buf</name></expr></argument>, <argument pos:start="51:41" pos:end="51:41"><expr pos:start="51:41" pos:end="51:41"><literal type="number" pos:start="51:41" pos:end="51:41">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="53:17" pos:end="53:24"><expr pos:start="53:17" pos:end="53:23"><name pos:start="53:17" pos:end="53:19">ret</name> <operator pos:start="53:21" pos:end="53:21">=</operator> <literal type="number" pos:start="53:23" pos:end="53:23">2</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="55:17" pos:end="55:46"><expr pos:start="55:17" pos:end="55:45"><name pos:start="55:17" pos:end="55:37"><name pos:start="55:17" pos:end="55:17">s</name><operator pos:start="55:18" pos:end="55:19">-&gt;</operator><name pos:start="55:20" pos:end="55:37">notify_slot_change</name></name> <operator pos:start="55:39" pos:end="55:39">=</operator> <name pos:start="55:41" pos:end="55:45">false</name></expr>;</expr_stmt>

                <expr_stmt pos:start="57:17" pos:end="57:58"><expr pos:start="57:17" pos:end="57:57"><name pos:start="57:17" pos:end="57:33"><name pos:start="57:17" pos:end="57:17">s</name><operator pos:start="57:18" pos:end="57:19">-&gt;</operator><name pos:start="57:20" pos:end="57:33">bmSlotICCState</name></name> <operator pos:start="57:35" pos:end="57:36">&amp;=</operator> <operator pos:start="57:38" pos:end="57:38">~</operator><name pos:start="57:39" pos:end="57:57">SLOT_0_CHANGED_MASK</name></expr>;</expr_stmt>

                <expr_stmt pos:start="59:17" pos:end="65:56"><expr pos:start="59:17" pos:end="65:55"><call pos:start="59:17" pos:end="65:55"><name pos:start="59:17" pos:end="59:23">DPRINTF</name><argument_list pos:start="59:24" pos:end="65:55">(<argument pos:start="59:25" pos:end="59:25"><expr pos:start="59:25" pos:end="59:25"><name pos:start="59:25" pos:end="59:25">s</name></expr></argument>, <argument pos:start="59:28" pos:end="59:33"><expr pos:start="59:28" pos:end="59:33"><name pos:start="59:28" pos:end="59:33">D_INFO</name></expr></argument>,

                        <argument pos:start="61:25" pos:end="63:45"><expr pos:start="61:25" pos:end="63:45"><literal type="string" pos:start="61:25" pos:end="61:70">"handle_data: int_in: notify_slot_change %X, "</literal>

                        <literal type="string" pos:start="63:25" pos:end="63:45">"requested len %zd\n"</literal></expr></argument>,

                        <argument pos:start="65:25" pos:end="65:41"><expr pos:start="65:25" pos:end="65:41"><name pos:start="65:25" pos:end="65:41"><name pos:start="65:25" pos:end="65:25">s</name><operator pos:start="65:26" pos:end="65:27">-&gt;</operator><name pos:start="65:28" pos:end="65:41">bmSlotICCState</name></name></expr></argument>, <argument pos:start="65:44" pos:end="65:54"><expr pos:start="65:44" pos:end="65:54"><name pos:start="65:44" pos:end="65:54"><name pos:start="65:44" pos:end="65:44">p</name><operator pos:start="65:45" pos:end="65:46">-&gt;</operator><name pos:start="65:47" pos:end="65:49">iov</name><operator pos:start="65:50" pos:end="65:50">.</operator><name pos:start="65:51" pos:end="65:54">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="69:13" pos:end="69:18">break;</break>

        <default pos:start="71:9" pos:end="71:16">default:</default>

            <expr_stmt pos:start="73:13" pos:end="73:44"><expr pos:start="73:13" pos:end="73:43"><call pos:start="73:13" pos:end="73:43"><name pos:start="73:13" pos:end="73:19">DPRINTF</name><argument_list pos:start="73:20" pos:end="73:43">(<argument pos:start="73:21" pos:end="73:21"><expr pos:start="73:21" pos:end="73:21"><name pos:start="73:21" pos:end="73:21">s</name></expr></argument>, <argument pos:start="73:24" pos:end="73:24"><expr pos:start="73:24" pos:end="73:24"><literal type="number" pos:start="73:24" pos:end="73:24">1</literal></expr></argument>, <argument pos:start="73:27" pos:end="73:42"><expr pos:start="73:27" pos:end="73:42"><literal type="string" pos:start="73:27" pos:end="73:42">"Bad endpoint\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:32"><expr pos:start="75:13" pos:end="75:31"><name pos:start="75:13" pos:end="75:15">ret</name> <operator pos:start="75:17" pos:end="75:17">=</operator> <name pos:start="75:19" pos:end="75:31">USB_RET_STALL</name></expr>;</expr_stmt>

            <break pos:start="77:13" pos:end="77:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="81:9" pos:end="81:14">break;</break>

    <default pos:start="83:5" pos:end="83:12">default:</default>

        <expr_stmt pos:start="85:9" pos:end="85:37"><expr pos:start="85:9" pos:end="85:36"><call pos:start="85:9" pos:end="85:36"><name pos:start="85:9" pos:end="85:15">DPRINTF</name><argument_list pos:start="85:16" pos:end="85:36">(<argument pos:start="85:17" pos:end="85:17"><expr pos:start="85:17" pos:end="85:17"><name pos:start="85:17" pos:end="85:17">s</name></expr></argument>, <argument pos:start="85:20" pos:end="85:20"><expr pos:start="85:20" pos:end="85:20"><literal type="number" pos:start="85:20" pos:end="85:20">1</literal></expr></argument>, <argument pos:start="85:23" pos:end="85:35"><expr pos:start="85:23" pos:end="85:35"><literal type="string" pos:start="85:23" pos:end="85:35">"Bad token\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:28"><expr pos:start="87:9" pos:end="87:27"><name pos:start="87:9" pos:end="87:11">ret</name> <operator pos:start="87:13" pos:end="87:13">=</operator> <name pos:start="87:15" pos:end="87:27">USB_RET_STALL</name></expr>;</expr_stmt>

        <break pos:start="89:9" pos:end="89:14">break;</break>

    </block_content>}</block></switch>



    <return pos:start="95:5" pos:end="95:15">return <expr pos:start="95:12" pos:end="95:14"><name pos:start="95:12" pos:end="95:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
