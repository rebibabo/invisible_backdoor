<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14746.c" pos:tabs="8"><function pos:start="1:1" pos:end="33:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:21">gen_mtdcr</name><parameter_list pos:start="1:22" pos:end="1:40">(<parameter pos:start="1:23" pos:end="1:39"><decl pos:start="1:23" pos:end="1:39"><type pos:start="1:23" pos:end="1:36"><name pos:start="1:23" pos:end="1:34">DisasContext</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:39">ctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="33:1">{<block_content pos:start="7:5" pos:end="32:0">

<cpp:if pos:start="5:1" pos:end="5:29">#<cpp:directive pos:start="5:2" pos:end="5:3">if</cpp:directive> <expr pos:start="5:5" pos:end="5:29"><call pos:start="5:5" pos:end="5:29"><name pos:start="5:5" pos:end="5:11">defined</name><argument_list pos:start="5:12" pos:end="5:29">(<argument pos:start="5:13" pos:end="5:28"><expr pos:start="5:13" pos:end="5:28"><name pos:start="5:13" pos:end="5:28">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="7:5" pos:end="10:0"><expr pos:start="7:5" pos:end="7:51"><call pos:start="7:5" pos:end="7:51"><name pos:start="7:5" pos:end="7:23">gen_inval_exception</name><argument_list pos:start="7:24" pos:end="7:51">(<argument pos:start="7:25" pos:end="7:27"><expr pos:start="7:25" pos:end="7:27"><name pos:start="7:25" pos:end="7:27">ctx</name></expr></argument>, <argument pos:start="7:30" pos:end="7:50"><expr pos:start="7:30" pos:end="7:50"><name pos:start="7:30" pos:end="7:50">POWERPC_EXCP_PRIV_REG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="9:1" pos:end="9:5">#<cpp:directive pos:start="9:2" pos:end="9:5">else</cpp:directive></cpp:else>

    <decl_stmt pos:start="11:5" pos:end="11:14"><decl pos:start="11:5" pos:end="11:13"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">TCGv</name></type> <name pos:start="11:10" pos:end="11:13">dcrn</name></decl>;</decl_stmt>

    <if_stmt pos:start="13:5" pos:end="19:5"><if pos:start="13:5" pos:end="19:5">if <condition pos:start="13:8" pos:end="13:26">(<expr pos:start="13:9" pos:end="13:25"><call pos:start="13:9" pos:end="13:25"><name pos:start="13:9" pos:end="13:16">unlikely</name><argument_list pos:start="13:17" pos:end="13:25">(<argument pos:start="13:18" pos:end="13:24"><expr pos:start="13:18" pos:end="13:24"><name pos:start="13:18" pos:end="13:24"><name pos:start="13:18" pos:end="13:20">ctx</name><operator pos:start="13:21" pos:end="13:22">-&gt;</operator><name pos:start="13:23" pos:end="13:24">pr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="13:28" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:15">

        <expr_stmt pos:start="15:9" pos:end="15:56"><expr pos:start="15:9" pos:end="15:55"><call pos:start="15:9" pos:end="15:55"><name pos:start="15:9" pos:end="15:27">gen_inval_exception</name><argument_list pos:start="15:28" pos:end="15:55">(<argument pos:start="15:29" pos:end="15:31"><expr pos:start="15:29" pos:end="15:31"><name pos:start="15:29" pos:end="15:31">ctx</name></expr></argument>, <argument pos:start="15:34" pos:end="15:54"><expr pos:start="15:34" pos:end="15:54"><name pos:start="15:34" pos:end="15:54">POWERPC_EXCP_PRIV_REG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="17:9" pos:end="17:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="21:5" pos:end="21:77">/* NIP cannot be restored if the memory exception comes from an helper */</comment>

    <expr_stmt pos:start="23:5" pos:end="23:38"><expr pos:start="23:5" pos:end="23:37"><call pos:start="23:5" pos:end="23:37"><name pos:start="23:5" pos:end="23:18">gen_update_nip</name><argument_list pos:start="23:19" pos:end="23:37">(<argument pos:start="23:20" pos:end="23:22"><expr pos:start="23:20" pos:end="23:22"><name pos:start="23:20" pos:end="23:22">ctx</name></expr></argument>, <argument pos:start="23:25" pos:end="23:36"><expr pos:start="23:25" pos:end="23:36"><name pos:start="23:25" pos:end="23:32"><name pos:start="23:25" pos:end="23:27">ctx</name><operator pos:start="23:28" pos:end="23:29">-&gt;</operator><name pos:start="23:30" pos:end="23:32">nip</name></name> <operator pos:start="23:34" pos:end="23:34">-</operator> <literal type="number" pos:start="23:36" pos:end="23:36">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:42"><expr pos:start="25:5" pos:end="25:41"><name pos:start="25:5" pos:end="25:8">dcrn</name> <operator pos:start="25:10" pos:end="25:10">=</operator> <call pos:start="25:12" pos:end="25:41"><name pos:start="25:12" pos:end="25:23">tcg_const_tl</name><argument_list pos:start="25:24" pos:end="25:41">(<argument pos:start="25:25" pos:end="25:40"><expr pos:start="25:25" pos:end="25:40"><call pos:start="25:25" pos:end="25:40"><name pos:start="25:25" pos:end="25:27">SPR</name><argument_list pos:start="25:28" pos:end="25:40">(<argument pos:start="25:29" pos:end="25:39"><expr pos:start="25:29" pos:end="25:39"><name pos:start="25:29" pos:end="25:39"><name pos:start="25:29" pos:end="25:31">ctx</name><operator pos:start="25:32" pos:end="25:33">-&gt;</operator><name pos:start="25:34" pos:end="25:39">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:66"><expr pos:start="27:5" pos:end="27:65"><call pos:start="27:5" pos:end="27:65"><name pos:start="27:5" pos:end="27:24">gen_helper_store_dcr</name><argument_list pos:start="27:25" pos:end="27:65">(<argument pos:start="27:26" pos:end="27:32"><expr pos:start="27:26" pos:end="27:32"><name pos:start="27:26" pos:end="27:32">cpu_env</name></expr></argument>, <argument pos:start="27:35" pos:end="27:38"><expr pos:start="27:35" pos:end="27:38"><name pos:start="27:35" pos:end="27:38">dcrn</name></expr></argument>, <argument pos:start="27:41" pos:end="27:64"><expr pos:start="27:41" pos:end="27:64"><name pos:start="27:41" pos:end="27:64"><name pos:start="27:41" pos:end="27:47">cpu_gpr</name><index pos:start="27:48" pos:end="27:64">[<expr pos:start="27:49" pos:end="27:63"><call pos:start="27:49" pos:end="27:63"><name pos:start="27:49" pos:end="27:50">rS</name><argument_list pos:start="27:51" pos:end="27:63">(<argument pos:start="27:52" pos:end="27:62"><expr pos:start="27:52" pos:end="27:62"><name pos:start="27:52" pos:end="27:62"><name pos:start="27:52" pos:end="27:54">ctx</name><operator pos:start="27:55" pos:end="27:56">-&gt;</operator><name pos:start="27:57" pos:end="27:62">opcode</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="32:0"><expr pos:start="29:5" pos:end="29:23"><call pos:start="29:5" pos:end="29:23"><name pos:start="29:5" pos:end="29:17">tcg_temp_free</name><argument_list pos:start="29:18" pos:end="29:23">(<argument pos:start="29:19" pos:end="29:22"><expr pos:start="29:19" pos:end="29:22"><name pos:start="29:19" pos:end="29:22">dcrn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="31:1" pos:end="31:6">#<cpp:directive pos:start="31:2" pos:end="31:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
