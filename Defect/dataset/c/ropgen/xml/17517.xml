<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17517.c" pos:tabs="8"><function pos:start="1:1" pos:end="97:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">vnc_client_io_error</name><parameter_list pos:start="1:31" pos:end="1:69">(<parameter pos:start="1:32" pos:end="1:43"><decl pos:start="1:32" pos:end="1:43"><type pos:start="1:32" pos:end="1:43"><name pos:start="1:32" pos:end="1:39">VncState</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:43">vs</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:52"><decl pos:start="1:46" pos:end="1:52"><type pos:start="1:46" pos:end="1:52"><name pos:start="1:46" pos:end="1:48">int</name></type> <name pos:start="1:50" pos:end="1:52">ret</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:68"><decl pos:start="1:55" pos:end="1:68"><type pos:start="1:55" pos:end="1:68"><name pos:start="1:55" pos:end="1:57">int</name></type> <name pos:start="1:59" pos:end="1:68">last_errno</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="97:1">{<block_content pos:start="5:5" pos:end="95:15">

    <if_stmt pos:start="5:5" pos:end="93:5"><if pos:start="5:5" pos:end="93:5">if <condition pos:start="5:8" pos:end="5:30">(<expr pos:start="5:9" pos:end="5:29"><name pos:start="5:9" pos:end="5:11">ret</name> <operator pos:start="5:13" pos:end="5:14">==</operator> <literal type="number" pos:start="5:16" pos:end="5:16">0</literal> <operator pos:start="5:18" pos:end="5:19">||</operator> <name pos:start="5:21" pos:end="5:23">ret</name> <operator pos:start="5:25" pos:end="5:26">==</operator> <operator pos:start="5:28" pos:end="5:28">-</operator><literal type="number" pos:start="5:29" pos:end="5:29">1</literal></expr>)</condition> <block pos:start="5:32" pos:end="93:5">{<block_content pos:start="7:9" pos:end="91:17">

        <if_stmt pos:start="7:9" pos:end="29:9"><if pos:start="7:9" pos:end="29:9">if <condition pos:start="7:12" pos:end="7:22">(<expr pos:start="7:13" pos:end="7:21"><name pos:start="7:13" pos:end="7:15">ret</name> <operator pos:start="7:17" pos:end="7:18">==</operator> <operator pos:start="7:20" pos:end="7:20">-</operator><literal type="number" pos:start="7:21" pos:end="7:21">1</literal></expr>)</condition> <block pos:start="7:24" pos:end="29:9">{<block_content pos:start="9:13" pos:end="27:13">

            <switch pos:start="9:13" pos:end="27:13">switch <condition pos:start="9:20" pos:end="9:31">(<expr pos:start="9:21" pos:end="9:30"><name pos:start="9:21" pos:end="9:30">last_errno</name></expr>)</condition> <block pos:start="9:33" pos:end="27:13">{<block_content pos:start="11:17" pos:end="25:26">

                <case pos:start="11:17" pos:end="11:27">case <expr pos:start="11:22" pos:end="11:26"><name pos:start="11:22" pos:end="11:26">EINTR</name></expr>:</case>

                <case pos:start="13:17" pos:end="16:0">case <expr pos:start="13:22" pos:end="13:27"><name pos:start="13:22" pos:end="13:27">EAGAIN</name></expr>:</case>

<cpp:ifdef pos:start="15:1" pos:end="15:13">#<cpp:directive pos:start="15:2" pos:end="15:6">ifdef</cpp:directive> <name pos:start="15:8" pos:end="15:13">_WIN32</name></cpp:ifdef>

                <case pos:start="17:17" pos:end="20:0">case <expr pos:start="17:22" pos:end="17:35"><name pos:start="17:22" pos:end="17:35">WSAEWOULDBLOCK</name></expr>:</case>

<cpp:endif pos:start="19:1" pos:end="19:6">#<cpp:directive pos:start="19:2" pos:end="19:6">endif</cpp:directive></cpp:endif>

                    <return pos:start="21:21" pos:end="21:29">return <expr pos:start="21:28" pos:end="21:28"><literal type="number" pos:start="21:28" pos:end="21:28">0</literal></expr>;</return>

                <default pos:start="23:17" pos:end="23:24">default:</default>

                    <break pos:start="25:21" pos:end="25:26">break;</break>

            </block_content>}</block></switch>

        </block_content>}</block></if></if_stmt>



	<expr_stmt pos:start="33:9" pos:end="33:85"><expr pos:start="33:9" pos:end="33:84"><call pos:start="33:9" pos:end="33:84"><name pos:start="33:9" pos:end="33:17">VNC_DEBUG</name><argument_list pos:start="33:18" pos:end="33:84">(<argument pos:start="33:19" pos:end="33:52"><expr pos:start="33:19" pos:end="33:52"><literal type="string" pos:start="33:19" pos:end="33:52">"Closing down client sock %d %d\n"</literal></expr></argument>, <argument pos:start="33:55" pos:end="33:57"><expr pos:start="33:55" pos:end="33:57"><name pos:start="33:55" pos:end="33:57">ret</name></expr></argument>, <argument pos:start="33:60" pos:end="33:83"><expr pos:start="33:60" pos:end="33:83"><ternary pos:start="33:60" pos:end="33:83"><condition pos:start="33:60" pos:end="33:68"><expr pos:start="33:60" pos:end="33:66"><name pos:start="33:60" pos:end="33:62">ret</name> <operator pos:start="33:64" pos:end="33:64">&lt;</operator> <literal type="number" pos:start="33:66" pos:end="33:66">0</literal></expr> ?</condition><then pos:start="33:70" pos:end="33:79"> <expr pos:start="33:70" pos:end="33:79"><name pos:start="33:70" pos:end="33:79">last_errno</name></expr> </then><else pos:start="33:81" pos:end="33:83">: <expr pos:start="33:83" pos:end="33:83"><literal type="number" pos:start="33:83" pos:end="33:83">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="35:9" pos:end="35:64"><expr pos:start="35:9" pos:end="35:63"><call pos:start="35:9" pos:end="35:63"><name pos:start="35:9" pos:end="35:28">qemu_set_fd_handler2</name><argument_list pos:start="35:29" pos:end="35:63">(<argument pos:start="35:30" pos:end="35:38"><expr pos:start="35:30" pos:end="35:38"><name pos:start="35:30" pos:end="35:38"><name pos:start="35:30" pos:end="35:31">vs</name><operator pos:start="35:32" pos:end="35:33">-&gt;</operator><name pos:start="35:34" pos:end="35:38">csock</name></name></expr></argument>, <argument pos:start="35:41" pos:end="35:44"><expr pos:start="35:41" pos:end="35:44"><name pos:start="35:41" pos:end="35:44">NULL</name></expr></argument>, <argument pos:start="35:47" pos:end="35:50"><expr pos:start="35:47" pos:end="35:50"><name pos:start="35:47" pos:end="35:50">NULL</name></expr></argument>, <argument pos:start="35:53" pos:end="35:56"><expr pos:start="35:53" pos:end="35:56"><name pos:start="35:53" pos:end="35:56">NULL</name></expr></argument>, <argument pos:start="35:59" pos:end="35:62"><expr pos:start="35:59" pos:end="35:62"><name pos:start="35:59" pos:end="35:62">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="37:9" pos:end="37:31"><expr pos:start="37:9" pos:end="37:30"><call pos:start="37:9" pos:end="37:30"><name pos:start="37:9" pos:end="37:19">closesocket</name><argument_list pos:start="37:20" pos:end="37:30">(<argument pos:start="37:21" pos:end="37:29"><expr pos:start="37:21" pos:end="37:29"><name pos:start="37:21" pos:end="37:29"><name pos:start="37:21" pos:end="37:22">vs</name><operator pos:start="37:23" pos:end="37:24">-&gt;</operator><name pos:start="37:25" pos:end="37:29">csock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:34"><expr pos:start="39:9" pos:end="39:33"><call pos:start="39:9" pos:end="39:33"><name pos:start="39:9" pos:end="39:22">qemu_del_timer</name><argument_list pos:start="39:23" pos:end="39:33">(<argument pos:start="39:24" pos:end="39:32"><expr pos:start="39:24" pos:end="39:32"><name pos:start="39:24" pos:end="39:32"><name pos:start="39:24" pos:end="39:25">vs</name><operator pos:start="39:26" pos:end="39:27">-&gt;</operator><name pos:start="39:28" pos:end="39:32">timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:35"><expr pos:start="41:9" pos:end="41:34"><call pos:start="41:9" pos:end="41:34"><name pos:start="41:9" pos:end="41:23">qemu_free_timer</name><argument_list pos:start="41:24" pos:end="41:34">(<argument pos:start="41:25" pos:end="41:33"><expr pos:start="41:25" pos:end="41:33"><name pos:start="41:25" pos:end="41:33"><name pos:start="41:25" pos:end="41:26">vs</name><operator pos:start="41:27" pos:end="41:28">-&gt;</operator><name pos:start="41:29" pos:end="41:33">timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="43:9" pos:end="43:58"><if pos:start="43:9" pos:end="43:58">if <condition pos:start="43:12" pos:end="43:29">(<expr pos:start="43:13" pos:end="43:28"><name pos:start="43:13" pos:end="43:28"><name pos:start="43:13" pos:end="43:14">vs</name><operator pos:start="43:15" pos:end="43:16">-&gt;</operator><name pos:start="43:17" pos:end="43:21">input</name><operator pos:start="43:22" pos:end="43:22">.</operator><name pos:start="43:23" pos:end="43:28">buffer</name></name></expr>)</condition><block type="pseudo" pos:start="43:31" pos:end="43:58"><block_content pos:start="43:31" pos:end="43:58"> <expr_stmt pos:start="43:31" pos:end="43:58"><expr pos:start="43:31" pos:end="43:57"><call pos:start="43:31" pos:end="43:57"><name pos:start="43:31" pos:end="43:39">qemu_free</name><argument_list pos:start="43:40" pos:end="43:57">(<argument pos:start="43:41" pos:end="43:56"><expr pos:start="43:41" pos:end="43:56"><name pos:start="43:41" pos:end="43:56"><name pos:start="43:41" pos:end="43:42">vs</name><operator pos:start="43:43" pos:end="43:44">-&gt;</operator><name pos:start="43:45" pos:end="43:49">input</name><operator pos:start="43:50" pos:end="43:50">.</operator><name pos:start="43:51" pos:end="43:56">buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="45:9" pos:end="48:0"><if pos:start="45:9" pos:end="48:0">if <condition pos:start="45:12" pos:end="45:30">(<expr pos:start="45:13" pos:end="45:29"><name pos:start="45:13" pos:end="45:29"><name pos:start="45:13" pos:end="45:14">vs</name><operator pos:start="45:15" pos:end="45:16">-&gt;</operator><name pos:start="45:17" pos:end="45:22">output</name><operator pos:start="45:23" pos:end="45:23">.</operator><name pos:start="45:24" pos:end="45:29">buffer</name></name></expr>)</condition><block type="pseudo" pos:start="45:32" pos:end="48:0"><block_content pos:start="45:32" pos:end="48:0"> <expr_stmt pos:start="45:32" pos:end="48:0"><expr pos:start="45:32" pos:end="45:59"><call pos:start="45:32" pos:end="45:59"><name pos:start="45:32" pos:end="45:40">qemu_free</name><argument_list pos:start="45:41" pos:end="45:59">(<argument pos:start="45:42" pos:end="45:58"><expr pos:start="45:42" pos:end="45:58"><name pos:start="45:42" pos:end="45:58"><name pos:start="45:42" pos:end="45:43">vs</name><operator pos:start="45:44" pos:end="45:45">-&gt;</operator><name pos:start="45:46" pos:end="45:51">output</name><operator pos:start="45:52" pos:end="45:52">.</operator><name pos:start="45:53" pos:end="45:58">buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef pos:start="47:1" pos:end="47:21">#<cpp:directive pos:start="47:2" pos:end="47:6">ifdef</cpp:directive> <name pos:start="47:8" pos:end="47:21">CONFIG_VNC_TLS</name></cpp:ifdef>

	<expr_stmt pos:start="49:9" pos:end="52:0"><expr pos:start="49:9" pos:end="49:34"><call pos:start="49:9" pos:end="49:34"><name pos:start="49:9" pos:end="49:30">vnc_tls_client_cleanup</name><argument_list pos:start="49:31" pos:end="49:34">(<argument pos:start="49:32" pos:end="49:33"><expr pos:start="49:32" pos:end="49:33"><name pos:start="49:32" pos:end="49:33">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="51:1" pos:end="51:6">#<cpp:directive pos:start="51:2" pos:end="51:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="51:8" pos:end="51:27">/* CONFIG_VNC_TLS */</comment>

        <expr_stmt pos:start="53:9" pos:end="53:22"><expr pos:start="53:9" pos:end="53:21"><call pos:start="53:9" pos:end="53:21"><name pos:start="53:9" pos:end="53:17">audio_del</name><argument_list pos:start="53:18" pos:end="53:21">(<argument pos:start="53:19" pos:end="53:20"><expr pos:start="53:19" pos:end="53:20"><name pos:start="53:19" pos:end="53:20">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <decl_stmt pos:start="57:9" pos:end="57:36"><decl pos:start="57:9" pos:end="57:19"><type pos:start="57:9" pos:end="57:18"><name pos:start="57:9" pos:end="57:16">VncState</name> <modifier pos:start="57:18" pos:end="57:18">*</modifier></type><name pos:start="57:19" pos:end="57:19">p</name></decl>, <decl pos:start="57:22" pos:end="57:35"><type ref="prev" pos:start="57:9" pos:end="57:18"><modifier pos:start="57:22" pos:end="57:22">*</modifier></type><name pos:start="57:23" pos:end="57:28">parent</name> <init pos:start="57:30" pos:end="57:35">= <expr pos:start="57:32" pos:end="57:35"><name pos:start="57:32" pos:end="57:35">NULL</name></expr></init></decl>;</decl_stmt>

        <for pos:start="59:9" pos:end="77:9">for <control pos:start="59:13" pos:end="59:57">(<init pos:start="59:14" pos:end="59:33"><expr pos:start="59:14" pos:end="59:32"><name pos:start="59:14" pos:end="59:14">p</name> <operator pos:start="59:16" pos:end="59:16">=</operator> <name pos:start="59:18" pos:end="59:32"><name pos:start="59:18" pos:end="59:19">vs</name><operator pos:start="59:20" pos:end="59:21">-&gt;</operator><name pos:start="59:22" pos:end="59:23">vd</name><operator pos:start="59:24" pos:end="59:25">-&gt;</operator><name pos:start="59:26" pos:end="59:32">clients</name></name></expr>;</init> <condition pos:start="59:35" pos:end="59:44"><expr pos:start="59:35" pos:end="59:43"><name pos:start="59:35" pos:end="59:35">p</name> <operator pos:start="59:37" pos:end="59:38">!=</operator> <name pos:start="59:40" pos:end="59:43">NULL</name></expr>;</condition> <incr pos:start="59:46" pos:end="59:56"><expr pos:start="59:46" pos:end="59:56"><name pos:start="59:46" pos:end="59:46">p</name> <operator pos:start="59:48" pos:end="59:48">=</operator> <name pos:start="59:50" pos:end="59:56"><name pos:start="59:50" pos:end="59:50">p</name><operator pos:start="59:51" pos:end="59:52">-&gt;</operator><name pos:start="59:53" pos:end="59:56">next</name></name></expr></incr>)</control> <block pos:start="59:59" pos:end="77:9">{<block_content pos:start="61:13" pos:end="75:23">

            <if_stmt pos:start="61:13" pos:end="73:13"><if pos:start="61:13" pos:end="73:13">if <condition pos:start="61:16" pos:end="61:24">(<expr pos:start="61:17" pos:end="61:23"><name pos:start="61:17" pos:end="61:17">p</name> <operator pos:start="61:19" pos:end="61:20">==</operator> <name pos:start="61:22" pos:end="61:23">vs</name></expr>)</condition> <block pos:start="61:26" pos:end="73:13">{<block_content pos:start="63:17" pos:end="71:22">

                <if_stmt pos:start="63:17" pos:end="69:46"><if pos:start="63:17" pos:end="65:43">if <condition pos:start="63:20" pos:end="63:27">(<expr pos:start="63:21" pos:end="63:26"><name pos:start="63:21" pos:end="63:26">parent</name></expr>)</condition><block type="pseudo" pos:start="65:21" pos:end="65:43"><block_content pos:start="65:21" pos:end="65:43">

                    <expr_stmt pos:start="65:21" pos:end="65:43"><expr pos:start="65:21" pos:end="65:42"><name pos:start="65:21" pos:end="65:32"><name pos:start="65:21" pos:end="65:26">parent</name><operator pos:start="65:27" pos:end="65:28">-&gt;</operator><name pos:start="65:29" pos:end="65:32">next</name></name> <operator pos:start="65:34" pos:end="65:34">=</operator> <name pos:start="65:36" pos:end="65:42"><name pos:start="65:36" pos:end="65:36">p</name><operator pos:start="65:37" pos:end="65:38">-&gt;</operator><name pos:start="65:39" pos:end="65:42">next</name></name></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="67:17" pos:end="69:46">else<block type="pseudo" pos:start="69:21" pos:end="69:46"><block_content pos:start="69:21" pos:end="69:46">

                    <expr_stmt pos:start="69:21" pos:end="69:46"><expr pos:start="69:21" pos:end="69:45"><name pos:start="69:21" pos:end="69:35"><name pos:start="69:21" pos:end="69:22">vs</name><operator pos:start="69:23" pos:end="69:24">-&gt;</operator><name pos:start="69:25" pos:end="69:26">vd</name><operator pos:start="69:27" pos:end="69:28">-&gt;</operator><name pos:start="69:29" pos:end="69:35">clients</name></name> <operator pos:start="69:37" pos:end="69:37">=</operator> <name pos:start="69:39" pos:end="69:45"><name pos:start="69:39" pos:end="69:39">p</name><operator pos:start="69:40" pos:end="69:41">-&gt;</operator><name pos:start="69:42" pos:end="69:45">next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <break pos:start="71:17" pos:end="71:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:23"><expr pos:start="75:13" pos:end="75:22"><name pos:start="75:13" pos:end="75:18">parent</name> <operator pos:start="75:20" pos:end="75:20">=</operator> <name pos:start="75:22" pos:end="75:22">p</name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="79:9" pos:end="81:26"><if pos:start="79:9" pos:end="81:26">if <condition pos:start="79:12" pos:end="79:29">(<expr pos:start="79:13" pos:end="79:28"><operator pos:start="79:13" pos:end="79:13">!</operator><name pos:start="79:14" pos:end="79:28"><name pos:start="79:14" pos:end="79:15">vs</name><operator pos:start="79:16" pos:end="79:17">-&gt;</operator><name pos:start="79:18" pos:end="79:19">vd</name><operator pos:start="79:20" pos:end="79:21">-&gt;</operator><name pos:start="79:22" pos:end="79:28">clients</name></name></expr>)</condition><block type="pseudo" pos:start="81:13" pos:end="81:26"><block_content pos:start="81:13" pos:end="81:26">

            <expr_stmt pos:start="81:13" pos:end="81:26"><expr pos:start="81:13" pos:end="81:25"><name pos:start="81:13" pos:end="81:21"><name pos:start="81:13" pos:end="81:15">dcl</name><operator pos:start="81:16" pos:end="81:17">-&gt;</operator><name pos:start="81:18" pos:end="81:21">idle</name></name> <operator pos:start="81:23" pos:end="81:23">=</operator> <literal type="number" pos:start="81:25" pos:end="81:25">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="85:9" pos:end="85:32"><expr pos:start="85:9" pos:end="85:31"><call pos:start="85:9" pos:end="85:31"><name pos:start="85:9" pos:end="85:17">qemu_free</name><argument_list pos:start="85:18" pos:end="85:31">(<argument pos:start="85:19" pos:end="85:30"><expr pos:start="85:19" pos:end="85:30"><name pos:start="85:19" pos:end="85:30"><name pos:start="85:19" pos:end="85:20">vs</name><operator pos:start="85:21" pos:end="85:22">-&gt;</operator><name pos:start="85:23" pos:end="85:30">old_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:22"><expr pos:start="87:9" pos:end="87:21"><call pos:start="87:9" pos:end="87:21"><name pos:start="87:9" pos:end="87:17">qemu_free</name><argument_list pos:start="87:18" pos:end="87:21">(<argument pos:start="87:19" pos:end="87:20"><expr pos:start="87:19" pos:end="87:20"><name pos:start="87:19" pos:end="87:20">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  

	<return pos:start="91:9" pos:end="91:17">return <expr pos:start="91:16" pos:end="91:16"><literal type="number" pos:start="91:16" pos:end="91:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <return pos:start="95:5" pos:end="95:15">return <expr pos:start="95:12" pos:end="95:14"><name pos:start="95:12" pos:end="95:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
