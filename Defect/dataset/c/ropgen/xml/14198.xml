<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14198.c" pos:tabs="8"><function pos:start="1:1" pos:end="83:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">unassign_storage</name><parameter_list pos:start="1:29" pos:end="1:40">(<parameter pos:start="1:30" pos:end="1:39"><decl pos:start="1:30" pos:end="1:39"><type pos:start="1:30" pos:end="1:35"><name pos:start="1:30" pos:end="1:33">SCCB</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:39">sccb</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="83:1">{<block_content pos:start="5:5" pos:end="81:67">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">MemoryRegion</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:20">mr</name> <init pos:start="5:22" pos:end="5:27">= <expr pos:start="5:24" pos:end="5:27"><name pos:start="5:24" pos:end="5:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:56"><decl pos:start="7:5" pos:end="7:55"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">AssignStorage</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:30">assign_info</name> <init pos:start="7:32" pos:end="7:55">= <expr pos:start="7:34" pos:end="7:55"><operator pos:start="7:34" pos:end="7:34">(</operator><name pos:start="7:35" pos:end="7:47">AssignStorage</name> <operator pos:start="7:49" pos:end="7:49">*</operator><operator pos:start="7:50" pos:end="7:50">)</operator> <name pos:start="7:52" pos:end="7:55">sccb</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:62"><decl pos:start="9:5" pos:end="9:61"><type pos:start="9:5" pos:end="9:26"><name pos:start="9:5" pos:end="9:24">sclpMemoryHotplugDev</name> <modifier pos:start="9:26" pos:end="9:26">*</modifier></type><name pos:start="9:27" pos:end="9:29">mhd</name> <init pos:start="9:31" pos:end="9:61">= <expr pos:start="9:33" pos:end="9:61"><call pos:start="9:33" pos:end="9:61"><name pos:start="9:33" pos:end="9:59">get_sclp_memory_hotplug_dev</name><argument_list pos:start="9:60" pos:end="9:61">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="11:5" pos:end="11:16"><expr pos:start="11:5" pos:end="11:15"><call pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:10">assert</name><argument_list pos:start="11:11" pos:end="11:15">(<argument pos:start="11:12" pos:end="11:14"><expr pos:start="11:12" pos:end="11:14"><name pos:start="11:12" pos:end="11:14">mhd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:64"><decl pos:start="13:5" pos:end="13:63"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:14">ram_addr_t</name></type> <name pos:start="13:16" pos:end="13:28">unassign_addr</name> <init pos:start="13:30" pos:end="13:63">= <expr pos:start="13:32" pos:end="13:63"><operator pos:start="13:32" pos:end="13:32">(</operator><name pos:start="13:33" pos:end="13:47"><name pos:start="13:33" pos:end="13:43">assign_info</name><operator pos:start="13:44" pos:end="13:45">-&gt;</operator><name pos:start="13:46" pos:end="13:47">rn</name></name> <operator pos:start="13:49" pos:end="13:49">-</operator> <literal type="number" pos:start="13:51" pos:end="13:51">1</literal><operator pos:start="13:52" pos:end="13:52">)</operator> <operator pos:start="13:54" pos:end="13:54">*</operator> <name pos:start="13:56" pos:end="13:63"><name pos:start="13:56" pos:end="13:58">mhd</name><operator pos:start="13:59" pos:end="13:60">-&gt;</operator><name pos:start="13:61" pos:end="13:63">rzm</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:47"><decl pos:start="15:5" pos:end="15:46"><type pos:start="15:5" pos:end="15:18"><name pos:start="15:5" pos:end="15:16">MemoryRegion</name> <modifier pos:start="15:18" pos:end="15:18">*</modifier></type><name pos:start="15:19" pos:end="15:24">sysmem</name> <init pos:start="15:26" pos:end="15:46">= <expr pos:start="15:28" pos:end="15:46"><call pos:start="15:28" pos:end="15:46"><name pos:start="15:28" pos:end="15:44">get_system_memory</name><argument_list pos:start="15:45" pos:end="15:46">()</argument_list></call></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="19:5" pos:end="19:45">/* if the addr is a multiple of 256 MB */</comment>

    <if_stmt pos:start="21:5" pos:end="79:5"><if pos:start="21:5" pos:end="79:5">if <condition pos:start="21:8" pos:end="23:48">(<expr pos:start="21:9" pos:end="23:47"><operator pos:start="21:9" pos:end="21:9">(</operator><name pos:start="21:10" pos:end="21:22">unassign_addr</name> <operator pos:start="21:24" pos:end="21:24">%</operator> <name pos:start="21:26" pos:end="21:41">MEM_SECTION_SIZE</name> <operator pos:start="21:43" pos:end="21:44">==</operator> <literal type="number" pos:start="21:46" pos:end="21:46">0</literal><operator pos:start="21:47" pos:end="21:47">)</operator> <operator pos:start="21:49" pos:end="21:50">&amp;&amp;</operator>

        <operator pos:start="23:9" pos:end="23:9">(</operator><name pos:start="23:10" pos:end="23:22">unassign_addr</name> <operator pos:start="23:24" pos:end="23:25">&gt;=</operator> <name pos:start="23:27" pos:end="23:46"><name pos:start="23:27" pos:end="23:29">mhd</name><operator pos:start="23:30" pos:end="23:31">-&gt;</operator><name pos:start="23:32" pos:end="23:46">padded_ram_size</name></name><operator pos:start="23:47" pos:end="23:47">)</operator></expr>)</condition> <block pos:start="23:50" pos:end="79:5">{<block_content pos:start="25:9" pos:end="77:9">

        <expr_stmt pos:start="25:9" pos:end="27:73"><expr pos:start="25:9" pos:end="27:72"><name pos:start="25:9" pos:end="27:68"><name pos:start="25:9" pos:end="25:11">mhd</name><operator pos:start="25:12" pos:end="25:13">-&gt;</operator><name pos:start="25:14" pos:end="25:30">standby_state_map</name><index pos:start="25:31" pos:end="27:68">[<expr pos:start="25:32" pos:end="27:67"><operator pos:start="25:32" pos:end="25:32">(</operator><name pos:start="25:33" pos:end="25:45">unassign_addr</name> <operator pos:start="25:47" pos:end="25:47">-</operator>

                           <name pos:start="27:28" pos:end="27:47"><name pos:start="27:28" pos:end="27:30">mhd</name><operator pos:start="27:31" pos:end="27:32">-&gt;</operator><name pos:start="27:33" pos:end="27:47">padded_ram_size</name></name><operator pos:start="27:48" pos:end="27:48">)</operator> <operator pos:start="27:50" pos:end="27:50">/</operator> <name pos:start="27:52" pos:end="27:67">MEM_SECTION_SIZE</name></expr>]</index></name> <operator pos:start="27:70" pos:end="27:70">=</operator> <literal type="number" pos:start="27:72" pos:end="27:72">0</literal></expr>;</expr_stmt>



        <comment type="block" pos:start="31:9" pos:end="31:61">/* find the specified memory region and destroy it */</comment>

        <expr_stmt pos:start="33:9" pos:end="33:61"><expr pos:start="33:9" pos:end="33:60"><name pos:start="33:9" pos:end="33:10">mr</name> <operator pos:start="33:12" pos:end="33:12">=</operator> <call pos:start="33:14" pos:end="33:57"><name pos:start="33:14" pos:end="33:31">memory_region_find</name><argument_list pos:start="33:32" pos:end="33:57">(<argument pos:start="33:33" pos:end="33:38"><expr pos:start="33:33" pos:end="33:38"><name pos:start="33:33" pos:end="33:38">sysmem</name></expr></argument>, <argument pos:start="33:41" pos:end="33:53"><expr pos:start="33:41" pos:end="33:53"><name pos:start="33:41" pos:end="33:53">unassign_addr</name></expr></argument>, <argument pos:start="33:56" pos:end="33:56"><expr pos:start="33:56" pos:end="33:56"><literal type="number" pos:start="33:56" pos:end="33:56">1</literal></expr></argument>)</argument_list></call><operator pos:start="33:58" pos:end="33:58">.</operator><name pos:start="33:59" pos:end="33:60">mr</name></expr>;</expr_stmt>

        <if_stmt pos:start="35:9" pos:end="77:9"><if pos:start="35:9" pos:end="77:9">if <condition pos:start="35:12" pos:end="35:15">(<expr pos:start="35:13" pos:end="35:14"><name pos:start="35:13" pos:end="35:14">mr</name></expr>)</condition> <block pos:start="35:17" pos:end="77:9">{<block_content pos:start="37:13" pos:end="75:13">

            <decl_stmt pos:start="37:13" pos:end="37:18"><decl pos:start="37:13" pos:end="37:17"><type pos:start="37:13" pos:end="37:15"><name pos:start="37:13" pos:end="37:15">int</name></type> <name pos:start="37:17" pos:end="37:17">i</name></decl>;</decl_stmt>

            <decl_stmt pos:start="39:13" pos:end="39:33"><decl pos:start="39:13" pos:end="39:32"><type pos:start="39:13" pos:end="39:15"><name pos:start="39:13" pos:end="39:15">int</name></type> <name pos:start="39:17" pos:end="39:28">is_removable</name> <init pos:start="39:30" pos:end="39:32">= <expr pos:start="39:32" pos:end="39:32"><literal type="number" pos:start="39:32" pos:end="39:32">1</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="41:13" pos:end="45:68"><decl pos:start="41:13" pos:end="45:67"><type pos:start="41:13" pos:end="41:22"><name pos:start="41:13" pos:end="41:22">ram_addr_t</name></type> <name pos:start="41:24" pos:end="41:33">map_offset</name> <init pos:start="41:35" pos:end="45:67">= <expr pos:start="41:37" pos:end="45:67"><operator pos:start="41:37" pos:end="41:37">(</operator><name pos:start="41:38" pos:end="41:50">unassign_addr</name> <operator pos:start="41:52" pos:end="41:52">-</operator> <name pos:start="41:54" pos:end="41:73"><name pos:start="41:54" pos:end="41:56">mhd</name><operator pos:start="41:57" pos:end="41:58">-&gt;</operator><name pos:start="41:59" pos:end="41:73">padded_ram_size</name></name> <operator pos:start="41:75" pos:end="41:75">-</operator>

                                     <operator pos:start="43:38" pos:end="43:38">(</operator><name pos:start="43:39" pos:end="43:51">unassign_addr</name> <operator pos:start="43:53" pos:end="43:53">-</operator> <name pos:start="43:55" pos:end="43:74"><name pos:start="43:55" pos:end="43:57">mhd</name><operator pos:start="43:58" pos:end="43:59">-&gt;</operator><name pos:start="43:60" pos:end="43:74">padded_ram_size</name></name><operator pos:start="43:75" pos:end="43:75">)</operator>

                                     <operator pos:start="45:38" pos:end="45:38">%</operator> <name pos:start="45:40" pos:end="45:66"><name pos:start="45:40" pos:end="45:42">mhd</name><operator pos:start="45:43" pos:end="45:44">-&gt;</operator><name pos:start="45:45" pos:end="45:66">standby_subregion_size</name></name><operator pos:start="45:67" pos:end="45:67">)</operator></expr></init></decl>;</decl_stmt>

            <comment type="block" pos:start="47:13" pos:end="47:70">/* Mark all affected subregions as 'standby' once again */</comment>

            <for pos:start="49:13" pos:end="65:13">for <control pos:start="49:17" pos:end="53:21">(<init pos:start="49:18" pos:end="49:23"><expr pos:start="49:18" pos:end="49:22"><name pos:start="49:18" pos:end="49:18">i</name> <operator pos:start="49:20" pos:end="49:20">=</operator> <literal type="number" pos:start="49:22" pos:end="49:22">0</literal></expr>;</init>

                 <condition pos:start="51:18" pos:end="51:70"><expr pos:start="51:18" pos:end="51:69"><name pos:start="51:18" pos:end="51:18">i</name> <operator pos:start="51:20" pos:end="51:20">&lt;</operator> <operator pos:start="51:22" pos:end="51:22">(</operator><name pos:start="51:23" pos:end="51:49"><name pos:start="51:23" pos:end="51:25">mhd</name><operator pos:start="51:26" pos:end="51:27">-&gt;</operator><name pos:start="51:28" pos:end="51:49">standby_subregion_size</name></name> <operator pos:start="51:51" pos:end="51:51">/</operator> <name pos:start="51:53" pos:end="51:68">MEM_SECTION_SIZE</name><operator pos:start="51:69" pos:end="51:69">)</operator></expr>;</condition>

                 <incr pos:start="53:18" pos:end="53:20"><expr pos:start="53:18" pos:end="53:20"><name pos:start="53:18" pos:end="53:18">i</name><operator pos:start="53:19" pos:end="53:20">++</operator></expr></incr>)</control> <block pos:start="53:23" pos:end="65:13">{<block_content pos:start="57:17" pos:end="63:17">



                <if_stmt pos:start="57:17" pos:end="63:17"><if pos:start="57:17" pos:end="63:17">if <condition pos:start="57:20" pos:end="57:78">(<expr pos:start="57:21" pos:end="57:77"><name pos:start="57:21" pos:end="57:77"><name pos:start="57:21" pos:end="57:23">mhd</name><operator pos:start="57:24" pos:end="57:25">-&gt;</operator><name pos:start="57:26" pos:end="57:42">standby_state_map</name><index pos:start="57:43" pos:end="57:77">[<expr pos:start="57:44" pos:end="57:76"><name pos:start="57:44" pos:end="57:44">i</name> <operator pos:start="57:46" pos:end="57:46">+</operator> <name pos:start="57:48" pos:end="57:57">map_offset</name> <operator pos:start="57:59" pos:end="57:59">/</operator> <name pos:start="57:61" pos:end="57:76">MEM_SECTION_SIZE</name></expr>]</index></name></expr>)</condition> <block pos:start="57:80" pos:end="63:17">{<block_content pos:start="59:21" pos:end="61:26">

                    <expr_stmt pos:start="59:21" pos:end="59:37"><expr pos:start="59:21" pos:end="59:36"><name pos:start="59:21" pos:end="59:32">is_removable</name> <operator pos:start="59:34" pos:end="59:34">=</operator> <literal type="number" pos:start="59:36" pos:end="59:36">0</literal></expr>;</expr_stmt>

                    <break pos:start="61:21" pos:end="61:26">break;</break>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

            <if_stmt pos:start="67:13" pos:end="75:13"><if pos:start="67:13" pos:end="75:13">if <condition pos:start="67:16" pos:end="67:29">(<expr pos:start="67:17" pos:end="67:28"><name pos:start="67:17" pos:end="67:28">is_removable</name></expr>)</condition> <block pos:start="67:31" pos:end="75:13">{<block_content pos:start="69:17" pos:end="73:27">

                <expr_stmt pos:start="69:17" pos:end="69:56"><expr pos:start="69:17" pos:end="69:55"><call pos:start="69:17" pos:end="69:55"><name pos:start="69:17" pos:end="69:43">memory_region_del_subregion</name><argument_list pos:start="69:44" pos:end="69:55">(<argument pos:start="69:45" pos:end="69:50"><expr pos:start="69:45" pos:end="69:50"><name pos:start="69:45" pos:end="69:50">sysmem</name></expr></argument>, <argument pos:start="69:53" pos:end="69:54"><expr pos:start="69:53" pos:end="69:54"><name pos:start="69:53" pos:end="69:54">mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="71:17" pos:end="71:44"><expr pos:start="71:17" pos:end="71:43"><call pos:start="71:17" pos:end="71:43"><name pos:start="71:17" pos:end="71:31">object_unparent</name><argument_list pos:start="71:32" pos:end="71:43">(<argument pos:start="71:33" pos:end="71:42"><expr pos:start="71:33" pos:end="71:42"><call pos:start="71:33" pos:end="71:42"><name pos:start="71:33" pos:end="71:38">OBJECT</name><argument_list pos:start="71:39" pos:end="71:42">(<argument pos:start="71:40" pos:end="71:41"><expr pos:start="71:40" pos:end="71:41"><name pos:start="71:40" pos:end="71:41">mr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="73:17" pos:end="73:27"><expr pos:start="73:17" pos:end="73:26"><call pos:start="73:17" pos:end="73:26"><name pos:start="73:17" pos:end="73:22">g_free</name><argument_list pos:start="73:23" pos:end="73:26">(<argument pos:start="73:24" pos:end="73:25"><expr pos:start="73:24" pos:end="73:25"><name pos:start="73:24" pos:end="73:25">mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:67"><expr pos:start="81:5" pos:end="81:66"><name pos:start="81:5" pos:end="81:25"><name pos:start="81:5" pos:end="81:8">sccb</name><operator pos:start="81:9" pos:end="81:10">-&gt;</operator><name pos:start="81:11" pos:end="81:11">h</name><operator pos:start="81:12" pos:end="81:12">.</operator><name pos:start="81:13" pos:end="81:25">response_code</name></name> <operator pos:start="81:27" pos:end="81:27">=</operator> <call pos:start="81:29" pos:end="81:66"><name pos:start="81:29" pos:end="81:39">cpu_to_be16</name><argument_list pos:start="81:40" pos:end="81:66">(<argument pos:start="81:41" pos:end="81:65"><expr pos:start="81:41" pos:end="81:65"><name pos:start="81:41" pos:end="81:65">SCLP_RC_NORMAL_COMPLETION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
