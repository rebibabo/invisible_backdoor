<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/7723.c" pos:tabs="8"><function pos:start="1:1" pos:end="74:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:32">vhost_virtqueue_stop</name><parameter_list pos:start="1:33" pos:end="7:49">(<parameter pos:start="1:34" pos:end="1:54"><decl pos:start="1:34" pos:end="1:54"><type pos:start="1:34" pos:end="1:54"><name pos:start="1:34" pos:end="1:49"><name pos:start="1:34" pos:end="1:39">struct</name> <name pos:start="1:41" pos:end="1:49">vhost_dev</name></name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:54">dev</name></decl></parameter>,

                                    <parameter pos:start="3:37" pos:end="3:61"><decl pos:start="3:37" pos:end="3:61"><type pos:start="3:37" pos:end="3:61"><name pos:start="3:37" pos:end="3:55"><name pos:start="3:37" pos:end="3:42">struct</name> <name pos:start="3:44" pos:end="3:55">VirtIODevice</name></name> <modifier pos:start="3:57" pos:end="3:57">*</modifier></type><name pos:start="3:58" pos:end="3:61">vdev</name></decl></parameter>,

                                    <parameter pos:start="5:37" pos:end="5:62"><decl pos:start="5:37" pos:end="5:62"><type pos:start="5:37" pos:end="5:62"><name pos:start="5:37" pos:end="5:58"><name pos:start="5:37" pos:end="5:42">struct</name> <name pos:start="5:44" pos:end="5:58">vhost_virtqueue</name></name> <modifier pos:start="5:60" pos:end="5:60">*</modifier></type><name pos:start="5:61" pos:end="5:62">vq</name></decl></parameter>,

                                    <parameter pos:start="7:37" pos:end="7:48"><decl pos:start="7:37" pos:end="7:48"><type pos:start="7:37" pos:end="7:48"><name pos:start="7:37" pos:end="7:44">unsigned</name></type> <name pos:start="7:46" pos:end="7:48">idx</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="41:44">{<block_content pos:start="11:5" pos:end="41:44">

    <decl_stmt pos:start="11:5" pos:end="11:70"><decl pos:start="11:5" pos:end="11:69"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:22">vhost_vq_index</name> <init pos:start="11:24" pos:end="11:69">= <expr pos:start="11:26" pos:end="11:69"><call pos:start="11:26" pos:end="11:69"><name pos:start="11:26" pos:end="11:59"><name pos:start="11:26" pos:end="11:28">dev</name><operator pos:start="11:29" pos:end="11:30">-&gt;</operator><name pos:start="11:31" pos:end="11:39">vhost_ops</name><operator pos:start="11:40" pos:end="11:41">-&gt;</operator><name pos:start="11:42" pos:end="11:59">vhost_get_vq_index</name></name><argument_list pos:start="11:60" pos:end="11:69">(<argument pos:start="11:61" pos:end="11:63"><expr pos:start="11:61" pos:end="11:63"><name pos:start="11:61" pos:end="11:63">dev</name></expr></argument>, <argument pos:start="11:66" pos:end="11:68"><expr pos:start="11:66" pos:end="11:68"><name pos:start="11:66" pos:end="11:68">idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="17:6"><decl pos:start="13:5" pos:end="17:5"><type pos:start="13:5" pos:end="13:28"><name pos:start="13:5" pos:end="13:28"><name pos:start="13:5" pos:end="13:10">struct</name> <name pos:start="13:12" pos:end="13:28">vhost_vring_state</name></name></type> <name pos:start="13:30" pos:end="13:34">state</name> <init pos:start="13:36" pos:end="17:5">= <expr pos:start="13:38" pos:end="17:5"><block pos:start="13:38" pos:end="17:5">{

        <expr pos:start="15:9" pos:end="15:31"><operator pos:start="15:9" pos:end="15:9">.</operator><name pos:start="15:10" pos:end="15:14">index</name> <operator pos:start="15:16" pos:end="15:16">=</operator> <name pos:start="15:18" pos:end="15:31">vhost_vq_index</name></expr>,

    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:10"><decl pos:start="19:5" pos:end="19:9"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:9">r</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:58"><expr pos:start="23:5" pos:end="23:57"><name pos:start="23:5" pos:end="23:5">r</name> <operator pos:start="23:7" pos:end="23:7">=</operator> <call pos:start="23:9" pos:end="23:57"><name pos:start="23:9" pos:end="23:44"><name pos:start="23:9" pos:end="23:11">dev</name><operator pos:start="23:12" pos:end="23:13">-&gt;</operator><name pos:start="23:14" pos:end="23:22">vhost_ops</name><operator pos:start="23:23" pos:end="23:24">-&gt;</operator><name pos:start="23:25" pos:end="23:44">vhost_get_vring_base</name></name><argument_list pos:start="23:45" pos:end="23:57">(<argument pos:start="23:46" pos:end="23:48"><expr pos:start="23:46" pos:end="23:48"><name pos:start="23:46" pos:end="23:48">dev</name></expr></argument>, <argument pos:start="23:51" pos:end="23:56"><expr pos:start="23:51" pos:end="23:56"><operator pos:start="23:51" pos:end="23:51">&amp;</operator><name pos:start="23:52" pos:end="23:56">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="37:5"><if pos:start="25:5" pos:end="33:5">if <condition pos:start="25:8" pos:end="25:14">(<expr pos:start="25:9" pos:end="25:13"><name pos:start="25:9" pos:end="25:9">r</name> <operator pos:start="25:11" pos:end="25:11">&lt;</operator> <literal type="number" pos:start="25:13" pos:end="25:13">0</literal></expr>)</condition> <block pos:start="25:16" pos:end="33:5">{<block_content pos:start="27:9" pos:end="27:71">

        <expr_stmt pos:start="27:9" pos:end="27:71"><expr pos:start="27:9" pos:end="27:70"><call pos:start="27:9" pos:end="27:70"><name pos:start="27:9" pos:end="27:23">VHOST_OPS_DEBUG</name><argument_list pos:start="27:24" pos:end="27:70">(<argument pos:start="27:25" pos:end="27:61"><expr pos:start="27:25" pos:end="27:61"><literal type="string" pos:start="27:25" pos:end="27:61">"vhost VQ %d ring restore failed: %d"</literal></expr></argument>, <argument pos:start="27:64" pos:end="27:66"><expr pos:start="27:64" pos:end="27:66"><name pos:start="27:64" pos:end="27:66">idx</name></expr></argument>, <argument pos:start="27:69" pos:end="27:69"><expr pos:start="27:69" pos:end="27:69"><name pos:start="27:69" pos:end="27:69">r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    </block_content>}</block></if> <else pos:start="33:7" pos:end="37:5">else <block pos:start="33:12" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:62">

        <expr_stmt pos:start="35:9" pos:end="35:62"><expr pos:start="35:9" pos:end="35:61"><call pos:start="35:9" pos:end="35:61"><name pos:start="35:9" pos:end="35:39">virtio_queue_set_last_avail_idx</name><argument_list pos:start="35:40" pos:end="35:61">(<argument pos:start="35:41" pos:end="35:44"><expr pos:start="35:41" pos:end="35:44"><name pos:start="35:41" pos:end="35:44">vdev</name></expr></argument>, <argument pos:start="35:47" pos:end="35:49"><expr pos:start="35:47" pos:end="35:49"><name pos:start="35:47" pos:end="35:49">idx</name></expr></argument>, <argument pos:start="35:52" pos:end="35:60"><expr pos:start="35:52" pos:end="35:60"><name pos:start="35:52" pos:end="35:60"><name pos:start="35:52" pos:end="35:56">state</name><operator pos:start="35:57" pos:end="35:57">.</operator><name pos:start="35:58" pos:end="35:60">num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:54"><expr pos:start="39:5" pos:end="39:53"><call pos:start="39:5" pos:end="39:53"><name pos:start="39:5" pos:end="39:42">virtio_queue_invalidate_signalled_used</name><argument_list pos:start="39:43" pos:end="39:53">(<argument pos:start="39:44" pos:end="39:47"><expr pos:start="39:44" pos:end="39:47"><name pos:start="39:44" pos:end="39:47">vdev</name></expr></argument>, <argument pos:start="39:50" pos:end="39:52"><expr pos:start="39:50" pos:end="39:52"><name pos:start="39:50" pos:end="39:52">idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:44"><expr pos:start="41:5" pos:end="41:43"><call pos:start="41:5" pos:end="41:43"><name pos:start="41:5" pos:end="41:32">virtio_queue_update_used_idx</name><argument_list pos:start="41:33" pos:end="41:43">(<argument pos:start="41:34" pos:end="41:37"><expr pos:start="41:34" pos:end="41:37"><name pos:start="41:34" pos:end="41:37">vdev</name></expr></argument>, <argument pos:start="41:40" pos:end="41:42"><expr pos:start="41:40" pos:end="41:42"><name pos:start="41:40" pos:end="41:42">idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></function>



    <comment type="block">/* In the cross-endian case, we need to reset the vring endianness to

     * native as legacy devices expect so by default.


    if (vhost_needs_vring_endian(vdev)) {

        vhost_virtqueue_set_vring_endian_legacy(dev,

                                                !virtio_is_big_endian(vdev),

                                                vhost_vq_index);

    }



    vhost_memory_unmap(dev, vq-&gt;used, virtio_queue_get_used_size(vdev, idx),

                       1, virtio_queue_get_used_size(vdev, idx));

    vhost_memory_unmap(dev, vq-&gt;avail, virtio_queue_get_avail_size(vdev, idx),

                       0, virtio_queue_get_avail_size(vdev, idx));

    vhost_memory_unmap(dev, vq-&gt;desc, virtio_queue_get_desc_size(vdev, idx),

                       0, virtio_queue_get_desc_size(vdev, idx));

}</comment></unit>
