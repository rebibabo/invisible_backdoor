<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20612.c" pos:tabs="8"><function pos:start="1:1" pos:end="493:1"><type pos:start="1:1" pos:end="1:17"><name pos:start="1:1" pos:end="1:15">Exynos4210State</name> <modifier pos:start="1:17" pos:end="1:17">*</modifier></type><name pos:start="1:18" pos:end="1:32">exynos4210_init</name><parameter_list pos:start="1:33" pos:end="3:31">(<parameter pos:start="1:34" pos:end="1:57"><decl pos:start="1:34" pos:end="1:57"><type pos:start="1:34" pos:end="1:57"><name pos:start="1:34" pos:end="1:45">MemoryRegion</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:57">system_mem</name></decl></parameter>,

        <parameter pos:start="3:9" pos:end="3:30"><decl pos:start="3:9" pos:end="3:30"><type pos:start="3:9" pos:end="3:30"><name pos:start="3:9" pos:end="3:16">unsigned</name> <name pos:start="3:18" pos:end="3:21">long</name></type> <name pos:start="3:23" pos:end="3:30">ram_size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="493:1">{<block_content pos:start="7:5" pos:end="491:13">

    <decl_stmt pos:start="7:5" pos:end="7:13"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>, <decl pos:start="7:12" pos:end="7:12"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:12">n</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:51"><decl pos:start="9:5" pos:end="9:50"><type pos:start="9:5" pos:end="9:21"><name pos:start="9:5" pos:end="9:19">Exynos4210State</name> <modifier pos:start="9:21" pos:end="9:21">*</modifier></type><name pos:start="9:22" pos:end="9:22">s</name> <init pos:start="9:24" pos:end="9:50">= <expr pos:start="9:26" pos:end="9:50"><call pos:start="9:26" pos:end="9:50"><name pos:start="9:26" pos:end="9:30">g_new</name><argument_list pos:start="9:31" pos:end="9:50">(<argument pos:start="9:32" pos:end="9:46"><expr pos:start="9:32" pos:end="9:46"><name pos:start="9:32" pos:end="9:46">Exynos4210State</name></expr></argument>, <argument pos:start="9:49" pos:end="9:49"><expr pos:start="9:49" pos:end="9:49"><literal type="number" pos:start="9:49" pos:end="9:49">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:69"><decl pos:start="11:5" pos:end="11:68"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">qemu_irq</name></type> <name pos:start="11:14" pos:end="11:68"><name pos:start="11:14" pos:end="11:21">gate_irq</name><index pos:start="11:22" pos:end="11:39">[<expr pos:start="11:23" pos:end="11:38"><name pos:start="11:23" pos:end="11:38">EXYNOS4210_NCPUS</name></expr>]</index><index pos:start="11:40" pos:end="11:68">[<expr pos:start="11:41" pos:end="11:67"><name pos:start="11:41" pos:end="11:67">EXYNOS4210_IRQ_GATE_NINPUTS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:27"><decl pos:start="13:5" pos:end="13:26"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:12">unsigned</name> <name pos:start="13:14" pos:end="13:17">long</name></type> <name pos:start="13:19" pos:end="13:26">mem_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:15">DeviceState</name> <modifier pos:start="15:17" pos:end="15:17">*</modifier></type><name pos:start="15:18" pos:end="15:20">dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:25"><decl pos:start="17:5" pos:end="17:24"><type pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:16">SysBusDevice</name> <modifier pos:start="17:18" pos:end="17:18">*</modifier></type><name pos:start="17:19" pos:end="17:24">busdev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:24"><decl pos:start="19:5" pos:end="19:23"><type pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:15">ObjectClass</name> <modifier pos:start="19:17" pos:end="19:17">*</modifier></type><name pos:start="19:18" pos:end="19:23">cpu_oc</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:58"><expr pos:start="23:5" pos:end="23:57"><name pos:start="23:5" pos:end="23:10">cpu_oc</name> <operator pos:start="23:12" pos:end="23:12">=</operator> <call pos:start="23:14" pos:end="23:57"><name pos:start="23:14" pos:end="23:30">cpu_class_by_name</name><argument_list pos:start="23:31" pos:end="23:57">(<argument pos:start="23:32" pos:end="23:43"><expr pos:start="23:32" pos:end="23:43"><name pos:start="23:32" pos:end="23:43">TYPE_ARM_CPU</name></expr></argument>, <argument pos:start="23:46" pos:end="23:56"><expr pos:start="23:46" pos:end="23:56"><literal type="string" pos:start="23:46" pos:end="23:56">"cortex-a9"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:19"><expr pos:start="25:5" pos:end="25:18"><call pos:start="25:5" pos:end="25:18"><name pos:start="25:5" pos:end="25:10">assert</name><argument_list pos:start="25:11" pos:end="25:18">(<argument pos:start="25:12" pos:end="25:17"><expr pos:start="25:12" pos:end="25:17"><name pos:start="25:12" pos:end="25:17">cpu_oc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="29:5" pos:end="75:5">for <control pos:start="29:9" pos:end="29:42">(<init pos:start="29:10" pos:end="29:15"><expr pos:start="29:10" pos:end="29:14"><name pos:start="29:10" pos:end="29:10">n</name> <operator pos:start="29:12" pos:end="29:12">=</operator> <literal type="number" pos:start="29:14" pos:end="29:14">0</literal></expr>;</init> <condition pos:start="29:17" pos:end="29:37"><expr pos:start="29:17" pos:end="29:36"><name pos:start="29:17" pos:end="29:17">n</name> <operator pos:start="29:19" pos:end="29:19">&lt;</operator> <name pos:start="29:21" pos:end="29:36">EXYNOS4210_NCPUS</name></expr>;</condition> <incr pos:start="29:39" pos:end="29:41"><expr pos:start="29:39" pos:end="29:41"><name pos:start="29:39" pos:end="29:39">n</name><operator pos:start="29:40" pos:end="29:41">++</operator></expr></incr>)</control> <block pos:start="29:44" pos:end="75:5">{<block_content pos:start="31:9" pos:end="73:9">

        <decl_stmt pos:start="31:9" pos:end="31:67"><decl pos:start="31:9" pos:end="31:66"><type pos:start="31:9" pos:end="31:16"><name pos:start="31:9" pos:end="31:14">Object</name> <modifier pos:start="31:16" pos:end="31:16">*</modifier></type><name pos:start="31:17" pos:end="31:22">cpuobj</name> <init pos:start="31:24" pos:end="31:66">= <expr pos:start="31:26" pos:end="31:66"><call pos:start="31:26" pos:end="31:66"><name pos:start="31:26" pos:end="31:35">object_new</name><argument_list pos:start="31:36" pos:end="31:66">(<argument pos:start="31:37" pos:end="31:65"><expr pos:start="31:37" pos:end="31:65"><call pos:start="31:37" pos:end="31:65"><name pos:start="31:37" pos:end="31:57">object_class_get_name</name><argument_list pos:start="31:58" pos:end="31:65">(<argument pos:start="31:59" pos:end="31:64"><expr pos:start="31:59" pos:end="31:64"><name pos:start="31:59" pos:end="31:64">cpu_oc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="33:9" pos:end="33:26"><decl pos:start="33:9" pos:end="33:25"><type pos:start="33:9" pos:end="33:15"><name pos:start="33:9" pos:end="33:13">Error</name> <modifier pos:start="33:15" pos:end="33:15">*</modifier></type><name pos:start="33:16" pos:end="33:18">err</name> <init pos:start="33:20" pos:end="33:25">= <expr pos:start="33:22" pos:end="33:25"><name pos:start="33:22" pos:end="33:25">NULL</name></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="37:9" pos:end="41:11">/* By default A9 CPUs have EL3 enabled.  This board does not currently

         * support EL3 so the CPU EL3 property is disabled before realization.

         */</comment>

        <if_stmt pos:start="43:9" pos:end="55:9"><if pos:start="43:9" pos:end="55:9">if <condition pos:start="43:12" pos:end="43:58">(<expr pos:start="43:13" pos:end="43:57"><call pos:start="43:13" pos:end="43:57"><name pos:start="43:13" pos:end="43:32">object_property_find</name><argument_list pos:start="43:33" pos:end="43:57">(<argument pos:start="43:34" pos:end="43:39"><expr pos:start="43:34" pos:end="43:39"><name pos:start="43:34" pos:end="43:39">cpuobj</name></expr></argument>, <argument pos:start="43:42" pos:end="43:50"><expr pos:start="43:42" pos:end="43:50"><literal type="string" pos:start="43:42" pos:end="43:50">"has_el3"</literal></expr></argument>, <argument pos:start="43:53" pos:end="43:56"><expr pos:start="43:53" pos:end="43:56"><name pos:start="43:53" pos:end="43:56">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="43:60" pos:end="55:9">{<block_content pos:start="45:13" pos:end="53:13">

            <expr_stmt pos:start="45:13" pos:end="45:69"><expr pos:start="45:13" pos:end="45:68"><call pos:start="45:13" pos:end="45:68"><name pos:start="45:13" pos:end="45:36">object_property_set_bool</name><argument_list pos:start="45:37" pos:end="45:68">(<argument pos:start="45:38" pos:end="45:43"><expr pos:start="45:38" pos:end="45:43"><name pos:start="45:38" pos:end="45:43">cpuobj</name></expr></argument>, <argument pos:start="45:46" pos:end="45:50"><expr pos:start="45:46" pos:end="45:50"><name pos:start="45:46" pos:end="45:50">false</name></expr></argument>, <argument pos:start="45:53" pos:end="45:61"><expr pos:start="45:53" pos:end="45:61"><literal type="string" pos:start="45:53" pos:end="45:61">"has_el3"</literal></expr></argument>, <argument pos:start="45:64" pos:end="45:67"><expr pos:start="45:64" pos:end="45:67"><operator pos:start="45:64" pos:end="45:64">&amp;</operator><name pos:start="45:65" pos:end="45:67">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="47:13" pos:end="53:13"><if pos:start="47:13" pos:end="53:13">if <condition pos:start="47:16" pos:end="47:20">(<expr pos:start="47:17" pos:end="47:19"><name pos:start="47:17" pos:end="47:19">err</name></expr>)</condition> <block pos:start="47:22" pos:end="53:13">{<block_content pos:start="49:17" pos:end="51:24">

                <expr_stmt pos:start="49:17" pos:end="49:38"><expr pos:start="49:17" pos:end="49:37"><call pos:start="49:17" pos:end="49:37"><name pos:start="49:17" pos:end="49:32">error_report_err</name><argument_list pos:start="49:33" pos:end="49:37">(<argument pos:start="49:34" pos:end="49:36"><expr pos:start="49:34" pos:end="49:36"><name pos:start="49:34" pos:end="49:36">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="51:17" pos:end="51:24"><expr pos:start="51:17" pos:end="51:23"><call pos:start="51:17" pos:end="51:23"><name pos:start="51:17" pos:end="51:20">exit</name><argument_list pos:start="51:21" pos:end="51:23">(<argument pos:start="51:22" pos:end="51:22"><expr pos:start="51:22" pos:end="51:22"><literal type="number" pos:start="51:22" pos:end="51:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="59:9" pos:end="59:36"><expr pos:start="59:9" pos:end="59:35"><name pos:start="59:9" pos:end="59:17"><name pos:start="59:9" pos:end="59:9">s</name><operator pos:start="59:10" pos:end="59:11">-&gt;</operator><name pos:start="59:12" pos:end="59:14">cpu</name><index pos:start="59:15" pos:end="59:17">[<expr pos:start="59:16" pos:end="59:16"><name pos:start="59:16" pos:end="59:16">n</name></expr>]</index></name> <operator pos:start="59:19" pos:end="59:19">=</operator> <call pos:start="59:21" pos:end="59:35"><name pos:start="59:21" pos:end="59:27">ARM_CPU</name><argument_list pos:start="59:28" pos:end="59:35">(<argument pos:start="59:29" pos:end="59:34"><expr pos:start="59:29" pos:end="59:34"><name pos:start="59:29" pos:end="59:34">cpuobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="63:60"><expr pos:start="61:9" pos:end="63:59"><call pos:start="61:9" pos:end="63:59"><name pos:start="61:9" pos:end="61:31">object_property_set_int</name><argument_list pos:start="61:32" pos:end="63:59">(<argument pos:start="61:33" pos:end="61:38"><expr pos:start="61:33" pos:end="61:38"><name pos:start="61:33" pos:end="61:38">cpuobj</name></expr></argument>, <argument pos:start="61:41" pos:end="61:72"><expr pos:start="61:41" pos:end="61:72"><name pos:start="61:41" pos:end="61:72">EXYNOS4210_SMP_PRIVATE_BASE_ADDR</name></expr></argument>,

                                <argument pos:start="63:33" pos:end="63:44"><expr pos:start="63:33" pos:end="63:44"><literal type="string" pos:start="63:33" pos:end="63:44">"reset-cbar"</literal></expr></argument>, <argument pos:start="63:47" pos:end="63:58"><expr pos:start="63:47" pos:end="63:58"><operator pos:start="63:47" pos:end="63:47">&amp;</operator><name pos:start="63:48" pos:end="63:58">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:65"><expr pos:start="65:9" pos:end="65:64"><call pos:start="65:9" pos:end="65:64"><name pos:start="65:9" pos:end="65:32">object_property_set_bool</name><argument_list pos:start="65:33" pos:end="65:64">(<argument pos:start="65:34" pos:end="65:39"><expr pos:start="65:34" pos:end="65:39"><name pos:start="65:34" pos:end="65:39">cpuobj</name></expr></argument>, <argument pos:start="65:42" pos:end="65:45"><expr pos:start="65:42" pos:end="65:45"><name pos:start="65:42" pos:end="65:45">true</name></expr></argument>, <argument pos:start="65:48" pos:end="65:57"><expr pos:start="65:48" pos:end="65:57"><literal type="string" pos:start="65:48" pos:end="65:57">"realized"</literal></expr></argument>, <argument pos:start="65:60" pos:end="65:63"><expr pos:start="65:60" pos:end="65:63"><operator pos:start="65:60" pos:end="65:60">&amp;</operator><name pos:start="65:61" pos:end="65:63">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="67:9" pos:end="73:9"><if pos:start="67:9" pos:end="73:9">if <condition pos:start="67:12" pos:end="67:16">(<expr pos:start="67:13" pos:end="67:15"><name pos:start="67:13" pos:end="67:15">err</name></expr>)</condition> <block pos:start="67:18" pos:end="73:9">{<block_content pos:start="69:13" pos:end="71:20">

            <expr_stmt pos:start="69:13" pos:end="69:34"><expr pos:start="69:13" pos:end="69:33"><call pos:start="69:13" pos:end="69:33"><name pos:start="69:13" pos:end="69:28">error_report_err</name><argument_list pos:start="69:29" pos:end="69:33">(<argument pos:start="69:30" pos:end="69:32"><expr pos:start="69:30" pos:end="69:32"><name pos:start="69:30" pos:end="69:32">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:20"><expr pos:start="71:13" pos:end="71:19"><call pos:start="71:13" pos:end="71:19"><name pos:start="71:13" pos:end="71:16">exit</name><argument_list pos:start="71:17" pos:end="71:19">(<argument pos:start="71:18" pos:end="71:18"><expr pos:start="71:18" pos:end="71:18"><literal type="number" pos:start="71:18" pos:end="71:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" format="doxygen" pos:start="79:5" pos:end="79:18">/*** IRQs ***/</comment>



    <expr_stmt pos:start="83:5" pos:end="83:49"><expr pos:start="83:5" pos:end="83:48"><name pos:start="83:5" pos:end="83:16"><name pos:start="83:5" pos:end="83:5">s</name><operator pos:start="83:6" pos:end="83:7">-&gt;</operator><name pos:start="83:8" pos:end="83:16">irq_table</name></name> <operator pos:start="83:18" pos:end="83:18">=</operator> <call pos:start="83:20" pos:end="83:48"><name pos:start="83:20" pos:end="83:38">exynos4210_init_irq</name><argument_list pos:start="83:39" pos:end="83:48">(<argument pos:start="83:40" pos:end="83:47"><expr pos:start="83:40" pos:end="83:47"><operator pos:start="83:40" pos:end="83:40">&amp;</operator><name pos:start="83:41" pos:end="83:47"><name pos:start="83:41" pos:end="83:41">s</name><operator pos:start="83:42" pos:end="83:43">-&gt;</operator><name pos:start="83:44" pos:end="83:47">irqs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="87:5" pos:end="87:18">/* IRQ Gate */</comment>

    <for pos:start="89:5" pos:end="115:5">for <control pos:start="89:9" pos:end="89:42">(<init pos:start="89:10" pos:end="89:15"><expr pos:start="89:10" pos:end="89:14"><name pos:start="89:10" pos:end="89:10">i</name> <operator pos:start="89:12" pos:end="89:12">=</operator> <literal type="number" pos:start="89:14" pos:end="89:14">0</literal></expr>;</init> <condition pos:start="89:17" pos:end="89:37"><expr pos:start="89:17" pos:end="89:36"><name pos:start="89:17" pos:end="89:17">i</name> <operator pos:start="89:19" pos:end="89:19">&lt;</operator> <name pos:start="89:21" pos:end="89:36">EXYNOS4210_NCPUS</name></expr>;</condition> <incr pos:start="89:39" pos:end="89:41"><expr pos:start="89:39" pos:end="89:41"><name pos:start="89:39" pos:end="89:39">i</name><operator pos:start="89:40" pos:end="89:41">++</operator></expr></incr>)</control> <block pos:start="89:44" pos:end="115:5">{<block_content pos:start="91:9" pos:end="113:77">

        <expr_stmt pos:start="91:9" pos:end="91:55"><expr pos:start="91:9" pos:end="91:54"><name pos:start="91:9" pos:end="91:11">dev</name> <operator pos:start="91:13" pos:end="91:13">=</operator> <call pos:start="91:15" pos:end="91:54"><name pos:start="91:15" pos:end="91:25">qdev_create</name><argument_list pos:start="91:26" pos:end="91:54">(<argument pos:start="91:27" pos:end="91:30"><expr pos:start="91:27" pos:end="91:30"><name pos:start="91:27" pos:end="91:30">NULL</name></expr></argument>, <argument pos:start="91:33" pos:end="91:53"><expr pos:start="91:33" pos:end="91:53"><literal type="string" pos:start="91:33" pos:end="91:53">"exynos4210.irq_gate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:71"><expr pos:start="93:9" pos:end="93:70"><call pos:start="93:9" pos:end="93:70"><name pos:start="93:9" pos:end="93:28">qdev_prop_set_uint32</name><argument_list pos:start="93:29" pos:end="93:70">(<argument pos:start="93:30" pos:end="93:32"><expr pos:start="93:30" pos:end="93:32"><name pos:start="93:30" pos:end="93:32">dev</name></expr></argument>, <argument pos:start="93:35" pos:end="93:40"><expr pos:start="93:35" pos:end="93:40"><literal type="string" pos:start="93:35" pos:end="93:40">"n_in"</literal></expr></argument>, <argument pos:start="93:43" pos:end="93:69"><expr pos:start="93:43" pos:end="93:69"><name pos:start="93:43" pos:end="93:69">EXYNOS4210_IRQ_GATE_NINPUTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:30"><expr pos:start="95:9" pos:end="95:29"><call pos:start="95:9" pos:end="95:29"><name pos:start="95:9" pos:end="95:24">qdev_init_nofail</name><argument_list pos:start="95:25" pos:end="95:29">(<argument pos:start="95:26" pos:end="95:28"><expr pos:start="95:26" pos:end="95:28"><name pos:start="95:26" pos:end="95:28">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="97:9" pos:end="97:44">/* Get IRQ Gate input in gate_irq */</comment>

        <for pos:start="99:9" pos:end="103:9">for <control pos:start="99:13" pos:end="99:57">(<init pos:start="99:14" pos:end="99:19"><expr pos:start="99:14" pos:end="99:18"><name pos:start="99:14" pos:end="99:14">n</name> <operator pos:start="99:16" pos:end="99:16">=</operator> <literal type="number" pos:start="99:18" pos:end="99:18">0</literal></expr>;</init> <condition pos:start="99:21" pos:end="99:52"><expr pos:start="99:21" pos:end="99:51"><name pos:start="99:21" pos:end="99:21">n</name> <operator pos:start="99:23" pos:end="99:23">&lt;</operator> <name pos:start="99:25" pos:end="99:51">EXYNOS4210_IRQ_GATE_NINPUTS</name></expr>;</condition> <incr pos:start="99:54" pos:end="99:56"><expr pos:start="99:54" pos:end="99:56"><name pos:start="99:54" pos:end="99:54">n</name><operator pos:start="99:55" pos:end="99:56">++</operator></expr></incr>)</control> <block pos:start="99:59" pos:end="103:9">{<block_content pos:start="101:13" pos:end="101:54">

            <expr_stmt pos:start="101:13" pos:end="101:54"><expr pos:start="101:13" pos:end="101:53"><name pos:start="101:13" pos:end="101:26"><name pos:start="101:13" pos:end="101:20">gate_irq</name><index pos:start="101:21" pos:end="101:23">[<expr pos:start="101:22" pos:end="101:22"><name pos:start="101:22" pos:end="101:22">i</name></expr>]</index><index pos:start="101:24" pos:end="101:26">[<expr pos:start="101:25" pos:end="101:25"><name pos:start="101:25" pos:end="101:25">n</name></expr>]</index></name> <operator pos:start="101:28" pos:end="101:28">=</operator> <call pos:start="101:30" pos:end="101:53"><name pos:start="101:30" pos:end="101:45">qdev_get_gpio_in</name><argument_list pos:start="101:46" pos:end="101:53">(<argument pos:start="101:47" pos:end="101:49"><expr pos:start="101:47" pos:end="101:49"><name pos:start="101:47" pos:end="101:49">dev</name></expr></argument>, <argument pos:start="101:52" pos:end="101:52"><expr pos:start="101:52" pos:end="101:52"><name pos:start="101:52" pos:end="101:52">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="105:9" pos:end="105:37"><expr pos:start="105:9" pos:end="105:36"><name pos:start="105:9" pos:end="105:14">busdev</name> <operator pos:start="105:16" pos:end="105:16">=</operator> <call pos:start="105:18" pos:end="105:36"><name pos:start="105:18" pos:end="105:31">SYS_BUS_DEVICE</name><argument_list pos:start="105:32" pos:end="105:36">(<argument pos:start="105:33" pos:end="105:35"><expr pos:start="105:33" pos:end="105:35"><name pos:start="105:33" pos:end="105:35">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="109:9" pos:end="109:55">/* Connect IRQ Gate output to CPU's IRQ line */</comment>

        <expr_stmt pos:start="111:9" pos:end="113:77"><expr pos:start="111:9" pos:end="113:76"><call pos:start="111:9" pos:end="113:76"><name pos:start="111:9" pos:end="111:26">sysbus_connect_irq</name><argument_list pos:start="111:27" pos:end="113:76">(<argument pos:start="111:28" pos:end="111:33"><expr pos:start="111:28" pos:end="111:33"><name pos:start="111:28" pos:end="111:33">busdev</name></expr></argument>, <argument pos:start="111:36" pos:end="111:36"><expr pos:start="111:36" pos:end="111:36"><literal type="number" pos:start="111:36" pos:end="111:36">0</literal></expr></argument>,

                           <argument pos:start="113:28" pos:end="113:75"><expr pos:start="113:28" pos:end="113:75"><call pos:start="113:28" pos:end="113:75"><name pos:start="113:28" pos:end="113:43">qdev_get_gpio_in</name><argument_list pos:start="113:44" pos:end="113:75">(<argument pos:start="113:45" pos:end="113:61"><expr pos:start="113:45" pos:end="113:61"><call pos:start="113:45" pos:end="113:61"><name pos:start="113:45" pos:end="113:50">DEVICE</name><argument_list pos:start="113:51" pos:end="113:61">(<argument pos:start="113:52" pos:end="113:60"><expr pos:start="113:52" pos:end="113:60"><name pos:start="113:52" pos:end="113:60"><name pos:start="113:52" pos:end="113:52">s</name><operator pos:start="113:53" pos:end="113:54">-&gt;</operator><name pos:start="113:55" pos:end="113:57">cpu</name><index pos:start="113:58" pos:end="113:60">[<expr pos:start="113:59" pos:end="113:59"><name pos:start="113:59" pos:end="113:59">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="113:64" pos:end="113:74"><expr pos:start="113:64" pos:end="113:74"><name pos:start="113:64" pos:end="113:74">ARM_CPU_IRQ</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="119:5" pos:end="119:48">/* Private memory region and Internal GIC */</comment>

    <expr_stmt pos:start="121:5" pos:end="121:45"><expr pos:start="121:5" pos:end="121:44"><name pos:start="121:5" pos:end="121:7">dev</name> <operator pos:start="121:9" pos:end="121:9">=</operator> <call pos:start="121:11" pos:end="121:44"><name pos:start="121:11" pos:end="121:21">qdev_create</name><argument_list pos:start="121:22" pos:end="121:44">(<argument pos:start="121:23" pos:end="121:26"><expr pos:start="121:23" pos:end="121:26"><name pos:start="121:23" pos:end="121:26">NULL</name></expr></argument>, <argument pos:start="121:29" pos:end="121:43"><expr pos:start="121:29" pos:end="121:43"><literal type="string" pos:start="121:29" pos:end="121:43">"a9mpcore_priv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:59"><expr pos:start="123:5" pos:end="123:58"><call pos:start="123:5" pos:end="123:58"><name pos:start="123:5" pos:end="123:24">qdev_prop_set_uint32</name><argument_list pos:start="123:25" pos:end="123:58">(<argument pos:start="123:26" pos:end="123:28"><expr pos:start="123:26" pos:end="123:28"><name pos:start="123:26" pos:end="123:28">dev</name></expr></argument>, <argument pos:start="123:31" pos:end="123:39"><expr pos:start="123:31" pos:end="123:39"><literal type="string" pos:start="123:31" pos:end="123:39">"num-cpu"</literal></expr></argument>, <argument pos:start="123:42" pos:end="123:57"><expr pos:start="123:42" pos:end="123:57"><name pos:start="123:42" pos:end="123:57">EXYNOS4210_NCPUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:26"><expr pos:start="125:5" pos:end="125:25"><call pos:start="125:5" pos:end="125:25"><name pos:start="125:5" pos:end="125:20">qdev_init_nofail</name><argument_list pos:start="125:21" pos:end="125:25">(<argument pos:start="125:22" pos:end="125:24"><expr pos:start="125:22" pos:end="125:24"><name pos:start="125:22" pos:end="125:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:33"><expr pos:start="127:5" pos:end="127:32"><name pos:start="127:5" pos:end="127:10">busdev</name> <operator pos:start="127:12" pos:end="127:12">=</operator> <call pos:start="127:14" pos:end="127:32"><name pos:start="127:14" pos:end="127:27">SYS_BUS_DEVICE</name><argument_list pos:start="127:28" pos:end="127:32">(<argument pos:start="127:29" pos:end="127:31"><expr pos:start="127:29" pos:end="127:31"><name pos:start="127:29" pos:end="127:31">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:65"><expr pos:start="129:5" pos:end="129:64"><call pos:start="129:5" pos:end="129:64"><name pos:start="129:5" pos:end="129:19">sysbus_mmio_map</name><argument_list pos:start="129:20" pos:end="129:64">(<argument pos:start="129:21" pos:end="129:26"><expr pos:start="129:21" pos:end="129:26"><name pos:start="129:21" pos:end="129:26">busdev</name></expr></argument>, <argument pos:start="129:29" pos:end="129:29"><expr pos:start="129:29" pos:end="129:29"><literal type="number" pos:start="129:29" pos:end="129:29">0</literal></expr></argument>, <argument pos:start="129:32" pos:end="129:63"><expr pos:start="129:32" pos:end="129:63"><name pos:start="129:32" pos:end="129:63">EXYNOS4210_SMP_PRIVATE_BASE_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="131:5" pos:end="135:5">for <control pos:start="131:9" pos:end="131:42">(<init pos:start="131:10" pos:end="131:15"><expr pos:start="131:10" pos:end="131:14"><name pos:start="131:10" pos:end="131:10">n</name> <operator pos:start="131:12" pos:end="131:12">=</operator> <literal type="number" pos:start="131:14" pos:end="131:14">0</literal></expr>;</init> <condition pos:start="131:17" pos:end="131:37"><expr pos:start="131:17" pos:end="131:36"><name pos:start="131:17" pos:end="131:17">n</name> <operator pos:start="131:19" pos:end="131:19">&lt;</operator> <name pos:start="131:21" pos:end="131:36">EXYNOS4210_NCPUS</name></expr>;</condition> <incr pos:start="131:39" pos:end="131:41"><expr pos:start="131:39" pos:end="131:41"><name pos:start="131:39" pos:end="131:39">n</name><operator pos:start="131:40" pos:end="131:41">++</operator></expr></incr>)</control> <block pos:start="131:44" pos:end="135:5">{<block_content pos:start="133:9" pos:end="133:54">

        <expr_stmt pos:start="133:9" pos:end="133:54"><expr pos:start="133:9" pos:end="133:53"><call pos:start="133:9" pos:end="133:53"><name pos:start="133:9" pos:end="133:26">sysbus_connect_irq</name><argument_list pos:start="133:27" pos:end="133:53">(<argument pos:start="133:28" pos:end="133:33"><expr pos:start="133:28" pos:end="133:33"><name pos:start="133:28" pos:end="133:33">busdev</name></expr></argument>, <argument pos:start="133:36" pos:end="133:36"><expr pos:start="133:36" pos:end="133:36"><name pos:start="133:36" pos:end="133:36">n</name></expr></argument>, <argument pos:start="133:39" pos:end="133:52"><expr pos:start="133:39" pos:end="133:52"><name pos:start="133:39" pos:end="133:52"><name pos:start="133:39" pos:end="133:46">gate_irq</name><index pos:start="133:47" pos:end="133:49">[<expr pos:start="133:48" pos:end="133:48"><name pos:start="133:48" pos:end="133:48">n</name></expr>]</index><index pos:start="133:50" pos:end="133:52">[<expr pos:start="133:51" pos:end="133:51"><literal type="number" pos:start="133:51" pos:end="133:51">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <for pos:start="137:5" pos:end="141:5">for <control pos:start="137:9" pos:end="137:49">(<init pos:start="137:10" pos:end="137:15"><expr pos:start="137:10" pos:end="137:14"><name pos:start="137:10" pos:end="137:10">n</name> <operator pos:start="137:12" pos:end="137:12">=</operator> <literal type="number" pos:start="137:14" pos:end="137:14">0</literal></expr>;</init> <condition pos:start="137:17" pos:end="137:44"><expr pos:start="137:17" pos:end="137:43"><name pos:start="137:17" pos:end="137:17">n</name> <operator pos:start="137:19" pos:end="137:19">&lt;</operator> <name pos:start="137:21" pos:end="137:43">EXYNOS4210_INT_GIC_NIRQ</name></expr>;</condition> <incr pos:start="137:46" pos:end="137:48"><expr pos:start="137:46" pos:end="137:48"><name pos:start="137:46" pos:end="137:46">n</name><operator pos:start="137:47" pos:end="137:48">++</operator></expr></incr>)</control> <block pos:start="137:51" pos:end="141:5">{<block_content pos:start="139:9" pos:end="139:58">

        <expr_stmt pos:start="139:9" pos:end="139:58"><expr pos:start="139:9" pos:end="139:57"><name pos:start="139:9" pos:end="139:30"><name pos:start="139:9" pos:end="139:9">s</name><operator pos:start="139:10" pos:end="139:11">-&gt;</operator><name pos:start="139:12" pos:end="139:15">irqs</name><operator pos:start="139:16" pos:end="139:16">.</operator><name pos:start="139:17" pos:end="139:27">int_gic_irq</name><index pos:start="139:28" pos:end="139:30">[<expr pos:start="139:29" pos:end="139:29"><name pos:start="139:29" pos:end="139:29">n</name></expr>]</index></name> <operator pos:start="139:32" pos:end="139:32">=</operator> <call pos:start="139:34" pos:end="139:57"><name pos:start="139:34" pos:end="139:49">qdev_get_gpio_in</name><argument_list pos:start="139:50" pos:end="139:57">(<argument pos:start="139:51" pos:end="139:53"><expr pos:start="139:51" pos:end="139:53"><name pos:start="139:51" pos:end="139:53">dev</name></expr></argument>, <argument pos:start="139:56" pos:end="139:56"><expr pos:start="139:56" pos:end="139:56"><name pos:start="139:56" pos:end="139:56">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="145:5" pos:end="145:26">/* Cache controller */</comment>

    <expr_stmt pos:start="147:5" pos:end="147:66"><expr pos:start="147:5" pos:end="147:65"><call pos:start="147:5" pos:end="147:65"><name pos:start="147:5" pos:end="147:24">sysbus_create_simple</name><argument_list pos:start="147:25" pos:end="147:65">(<argument pos:start="147:26" pos:end="147:31"><expr pos:start="147:26" pos:end="147:31"><literal type="string" pos:start="147:26" pos:end="147:31">"l2x0"</literal></expr></argument>, <argument pos:start="147:34" pos:end="147:58"><expr pos:start="147:34" pos:end="147:58"><name pos:start="147:34" pos:end="147:58">EXYNOS4210_L2X0_BASE_ADDR</name></expr></argument>, <argument pos:start="147:61" pos:end="147:64"><expr pos:start="147:61" pos:end="147:64"><name pos:start="147:61" pos:end="147:64">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="151:5" pos:end="151:22">/* External GIC */</comment>

    <expr_stmt pos:start="153:5" pos:end="153:46"><expr pos:start="153:5" pos:end="153:45"><name pos:start="153:5" pos:end="153:7">dev</name> <operator pos:start="153:9" pos:end="153:9">=</operator> <call pos:start="153:11" pos:end="153:45"><name pos:start="153:11" pos:end="153:21">qdev_create</name><argument_list pos:start="153:22" pos:end="153:45">(<argument pos:start="153:23" pos:end="153:26"><expr pos:start="153:23" pos:end="153:26"><name pos:start="153:23" pos:end="153:26">NULL</name></expr></argument>, <argument pos:start="153:29" pos:end="153:44"><expr pos:start="153:29" pos:end="153:44"><literal type="string" pos:start="153:29" pos:end="153:44">"exynos4210.gic"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="155:5" pos:end="155:59"><expr pos:start="155:5" pos:end="155:58"><call pos:start="155:5" pos:end="155:58"><name pos:start="155:5" pos:end="155:24">qdev_prop_set_uint32</name><argument_list pos:start="155:25" pos:end="155:58">(<argument pos:start="155:26" pos:end="155:28"><expr pos:start="155:26" pos:end="155:28"><name pos:start="155:26" pos:end="155:28">dev</name></expr></argument>, <argument pos:start="155:31" pos:end="155:39"><expr pos:start="155:31" pos:end="155:39"><literal type="string" pos:start="155:31" pos:end="155:39">"num-cpu"</literal></expr></argument>, <argument pos:start="155:42" pos:end="155:57"><expr pos:start="155:42" pos:end="155:57"><name pos:start="155:42" pos:end="155:57">EXYNOS4210_NCPUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="157:5" pos:end="157:26"><expr pos:start="157:5" pos:end="157:25"><call pos:start="157:5" pos:end="157:25"><name pos:start="157:5" pos:end="157:20">qdev_init_nofail</name><argument_list pos:start="157:21" pos:end="157:25">(<argument pos:start="157:22" pos:end="157:24"><expr pos:start="157:22" pos:end="157:24"><name pos:start="157:22" pos:end="157:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="159:5" pos:end="159:33"><expr pos:start="159:5" pos:end="159:32"><name pos:start="159:5" pos:end="159:10">busdev</name> <operator pos:start="159:12" pos:end="159:12">=</operator> <call pos:start="159:14" pos:end="159:32"><name pos:start="159:14" pos:end="159:27">SYS_BUS_DEVICE</name><argument_list pos:start="159:28" pos:end="159:32">(<argument pos:start="159:29" pos:end="159:31"><expr pos:start="159:29" pos:end="159:31"><name pos:start="159:29" pos:end="159:31">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="161:5" pos:end="161:27">/* Map CPU interface */</comment>

    <expr_stmt pos:start="163:5" pos:end="163:65"><expr pos:start="163:5" pos:end="163:64"><call pos:start="163:5" pos:end="163:64"><name pos:start="163:5" pos:end="163:19">sysbus_mmio_map</name><argument_list pos:start="163:20" pos:end="163:64">(<argument pos:start="163:21" pos:end="163:26"><expr pos:start="163:21" pos:end="163:26"><name pos:start="163:21" pos:end="163:26">busdev</name></expr></argument>, <argument pos:start="163:29" pos:end="163:29"><expr pos:start="163:29" pos:end="163:29"><literal type="number" pos:start="163:29" pos:end="163:29">0</literal></expr></argument>, <argument pos:start="163:32" pos:end="163:63"><expr pos:start="163:32" pos:end="163:63"><name pos:start="163:32" pos:end="163:63">EXYNOS4210_EXT_GIC_CPU_BASE_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="165:5" pos:end="165:35">/* Map Distributer interface */</comment>

    <expr_stmt pos:start="167:5" pos:end="167:66"><expr pos:start="167:5" pos:end="167:65"><call pos:start="167:5" pos:end="167:65"><name pos:start="167:5" pos:end="167:19">sysbus_mmio_map</name><argument_list pos:start="167:20" pos:end="167:65">(<argument pos:start="167:21" pos:end="167:26"><expr pos:start="167:21" pos:end="167:26"><name pos:start="167:21" pos:end="167:26">busdev</name></expr></argument>, <argument pos:start="167:29" pos:end="167:29"><expr pos:start="167:29" pos:end="167:29"><literal type="number" pos:start="167:29" pos:end="167:29">1</literal></expr></argument>, <argument pos:start="167:32" pos:end="167:64"><expr pos:start="167:32" pos:end="167:64"><name pos:start="167:32" pos:end="167:64">EXYNOS4210_EXT_GIC_DIST_BASE_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="169:5" pos:end="173:5">for <control pos:start="169:9" pos:end="169:42">(<init pos:start="169:10" pos:end="169:15"><expr pos:start="169:10" pos:end="169:14"><name pos:start="169:10" pos:end="169:10">n</name> <operator pos:start="169:12" pos:end="169:12">=</operator> <literal type="number" pos:start="169:14" pos:end="169:14">0</literal></expr>;</init> <condition pos:start="169:17" pos:end="169:37"><expr pos:start="169:17" pos:end="169:36"><name pos:start="169:17" pos:end="169:17">n</name> <operator pos:start="169:19" pos:end="169:19">&lt;</operator> <name pos:start="169:21" pos:end="169:36">EXYNOS4210_NCPUS</name></expr>;</condition> <incr pos:start="169:39" pos:end="169:41"><expr pos:start="169:39" pos:end="169:41"><name pos:start="169:39" pos:end="169:39">n</name><operator pos:start="169:40" pos:end="169:41">++</operator></expr></incr>)</control> <block pos:start="169:44" pos:end="173:5">{<block_content pos:start="171:9" pos:end="171:54">

        <expr_stmt pos:start="171:9" pos:end="171:54"><expr pos:start="171:9" pos:end="171:53"><call pos:start="171:9" pos:end="171:53"><name pos:start="171:9" pos:end="171:26">sysbus_connect_irq</name><argument_list pos:start="171:27" pos:end="171:53">(<argument pos:start="171:28" pos:end="171:33"><expr pos:start="171:28" pos:end="171:33"><name pos:start="171:28" pos:end="171:33">busdev</name></expr></argument>, <argument pos:start="171:36" pos:end="171:36"><expr pos:start="171:36" pos:end="171:36"><name pos:start="171:36" pos:end="171:36">n</name></expr></argument>, <argument pos:start="171:39" pos:end="171:52"><expr pos:start="171:39" pos:end="171:52"><name pos:start="171:39" pos:end="171:52"><name pos:start="171:39" pos:end="171:46">gate_irq</name><index pos:start="171:47" pos:end="171:49">[<expr pos:start="171:48" pos:end="171:48"><name pos:start="171:48" pos:end="171:48">n</name></expr>]</index><index pos:start="171:50" pos:end="171:52">[<expr pos:start="171:51" pos:end="171:51"><literal type="number" pos:start="171:51" pos:end="171:51">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <for pos:start="175:5" pos:end="179:5">for <control pos:start="175:9" pos:end="175:49">(<init pos:start="175:10" pos:end="175:15"><expr pos:start="175:10" pos:end="175:14"><name pos:start="175:10" pos:end="175:10">n</name> <operator pos:start="175:12" pos:end="175:12">=</operator> <literal type="number" pos:start="175:14" pos:end="175:14">0</literal></expr>;</init> <condition pos:start="175:17" pos:end="175:44"><expr pos:start="175:17" pos:end="175:43"><name pos:start="175:17" pos:end="175:17">n</name> <operator pos:start="175:19" pos:end="175:19">&lt;</operator> <name pos:start="175:21" pos:end="175:43">EXYNOS4210_EXT_GIC_NIRQ</name></expr>;</condition> <incr pos:start="175:46" pos:end="175:48"><expr pos:start="175:46" pos:end="175:48"><name pos:start="175:46" pos:end="175:46">n</name><operator pos:start="175:47" pos:end="175:48">++</operator></expr></incr>)</control> <block pos:start="175:51" pos:end="179:5">{<block_content pos:start="177:9" pos:end="177:58">

        <expr_stmt pos:start="177:9" pos:end="177:58"><expr pos:start="177:9" pos:end="177:57"><name pos:start="177:9" pos:end="177:30"><name pos:start="177:9" pos:end="177:9">s</name><operator pos:start="177:10" pos:end="177:11">-&gt;</operator><name pos:start="177:12" pos:end="177:15">irqs</name><operator pos:start="177:16" pos:end="177:16">.</operator><name pos:start="177:17" pos:end="177:27">ext_gic_irq</name><index pos:start="177:28" pos:end="177:30">[<expr pos:start="177:29" pos:end="177:29"><name pos:start="177:29" pos:end="177:29">n</name></expr>]</index></name> <operator pos:start="177:32" pos:end="177:32">=</operator> <call pos:start="177:34" pos:end="177:57"><name pos:start="177:34" pos:end="177:49">qdev_get_gpio_in</name><argument_list pos:start="177:50" pos:end="177:57">(<argument pos:start="177:51" pos:end="177:53"><expr pos:start="177:51" pos:end="177:53"><name pos:start="177:51" pos:end="177:53">dev</name></expr></argument>, <argument pos:start="177:56" pos:end="177:56"><expr pos:start="177:56" pos:end="177:56"><name pos:start="177:56" pos:end="177:56">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="183:5" pos:end="183:37">/* Internal Interrupt Combiner */</comment>

    <expr_stmt pos:start="185:5" pos:end="185:51"><expr pos:start="185:5" pos:end="185:50"><name pos:start="185:5" pos:end="185:7">dev</name> <operator pos:start="185:9" pos:end="185:9">=</operator> <call pos:start="185:11" pos:end="185:50"><name pos:start="185:11" pos:end="185:21">qdev_create</name><argument_list pos:start="185:22" pos:end="185:50">(<argument pos:start="185:23" pos:end="185:26"><expr pos:start="185:23" pos:end="185:26"><name pos:start="185:23" pos:end="185:26">NULL</name></expr></argument>, <argument pos:start="185:29" pos:end="185:49"><expr pos:start="185:29" pos:end="185:49"><literal type="string" pos:start="185:29" pos:end="185:49">"exynos4210.combiner"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="187:5" pos:end="187:26"><expr pos:start="187:5" pos:end="187:25"><call pos:start="187:5" pos:end="187:25"><name pos:start="187:5" pos:end="187:20">qdev_init_nofail</name><argument_list pos:start="187:21" pos:end="187:25">(<argument pos:start="187:22" pos:end="187:24"><expr pos:start="187:22" pos:end="187:24"><name pos:start="187:22" pos:end="187:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="189:5" pos:end="189:33"><expr pos:start="189:5" pos:end="189:32"><name pos:start="189:5" pos:end="189:10">busdev</name> <operator pos:start="189:12" pos:end="189:12">=</operator> <call pos:start="189:14" pos:end="189:32"><name pos:start="189:14" pos:end="189:27">SYS_BUS_DEVICE</name><argument_list pos:start="189:28" pos:end="189:32">(<argument pos:start="189:29" pos:end="189:31"><expr pos:start="189:29" pos:end="189:31"><name pos:start="189:29" pos:end="189:31">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="191:5" pos:end="195:5">for <control pos:start="191:9" pos:end="191:61">(<init pos:start="191:10" pos:end="191:15"><expr pos:start="191:10" pos:end="191:14"><name pos:start="191:10" pos:end="191:10">n</name> <operator pos:start="191:12" pos:end="191:12">=</operator> <literal type="number" pos:start="191:14" pos:end="191:14">0</literal></expr>;</init> <condition pos:start="191:17" pos:end="191:56"><expr pos:start="191:17" pos:end="191:55"><name pos:start="191:17" pos:end="191:17">n</name> <operator pos:start="191:19" pos:end="191:19">&lt;</operator> <name pos:start="191:21" pos:end="191:55">EXYNOS4210_MAX_INT_COMBINER_OUT_IRQ</name></expr>;</condition> <incr pos:start="191:58" pos:end="191:60"><expr pos:start="191:58" pos:end="191:60"><name pos:start="191:58" pos:end="191:58">n</name><operator pos:start="191:59" pos:end="191:60">++</operator></expr></incr>)</control> <block pos:start="191:63" pos:end="195:5">{<block_content pos:start="193:9" pos:end="193:62">

        <expr_stmt pos:start="193:9" pos:end="193:62"><expr pos:start="193:9" pos:end="193:61"><call pos:start="193:9" pos:end="193:61"><name pos:start="193:9" pos:end="193:26">sysbus_connect_irq</name><argument_list pos:start="193:27" pos:end="193:61">(<argument pos:start="193:28" pos:end="193:33"><expr pos:start="193:28" pos:end="193:33"><name pos:start="193:28" pos:end="193:33">busdev</name></expr></argument>, <argument pos:start="193:36" pos:end="193:36"><expr pos:start="193:36" pos:end="193:36"><name pos:start="193:36" pos:end="193:36">n</name></expr></argument>, <argument pos:start="193:39" pos:end="193:60"><expr pos:start="193:39" pos:end="193:60"><name pos:start="193:39" pos:end="193:60"><name pos:start="193:39" pos:end="193:39">s</name><operator pos:start="193:40" pos:end="193:41">-&gt;</operator><name pos:start="193:42" pos:end="193:45">irqs</name><operator pos:start="193:46" pos:end="193:46">.</operator><name pos:start="193:47" pos:end="193:57">int_gic_irq</name><index pos:start="193:58" pos:end="193:60">[<expr pos:start="193:59" pos:end="193:59"><name pos:start="193:59" pos:end="193:59">n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="197:5" pos:end="197:53"><expr pos:start="197:5" pos:end="197:52"><call pos:start="197:5" pos:end="197:52"><name pos:start="197:5" pos:end="197:34">exynos4210_combiner_get_gpioin</name><argument_list pos:start="197:35" pos:end="197:52">(<argument pos:start="197:36" pos:end="197:43"><expr pos:start="197:36" pos:end="197:43"><operator pos:start="197:36" pos:end="197:36">&amp;</operator><name pos:start="197:37" pos:end="197:43"><name pos:start="197:37" pos:end="197:37">s</name><operator pos:start="197:38" pos:end="197:39">-&gt;</operator><name pos:start="197:40" pos:end="197:43">irqs</name></name></expr></argument>, <argument pos:start="197:46" pos:end="197:48"><expr pos:start="197:46" pos:end="197:48"><name pos:start="197:46" pos:end="197:48">dev</name></expr></argument>, <argument pos:start="197:51" pos:end="197:51"><expr pos:start="197:51" pos:end="197:51"><literal type="number" pos:start="197:51" pos:end="197:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="199:5" pos:end="199:66"><expr pos:start="199:5" pos:end="199:65"><call pos:start="199:5" pos:end="199:65"><name pos:start="199:5" pos:end="199:19">sysbus_mmio_map</name><argument_list pos:start="199:20" pos:end="199:65">(<argument pos:start="199:21" pos:end="199:26"><expr pos:start="199:21" pos:end="199:26"><name pos:start="199:21" pos:end="199:26">busdev</name></expr></argument>, <argument pos:start="199:29" pos:end="199:29"><expr pos:start="199:29" pos:end="199:29"><literal type="number" pos:start="199:29" pos:end="199:29">0</literal></expr></argument>, <argument pos:start="199:32" pos:end="199:64"><expr pos:start="199:32" pos:end="199:64"><name pos:start="199:32" pos:end="199:64">EXYNOS4210_INT_COMBINER_BASE_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="203:5" pos:end="203:37">/* External Interrupt Combiner */</comment>

    <expr_stmt pos:start="205:5" pos:end="205:51"><expr pos:start="205:5" pos:end="205:50"><name pos:start="205:5" pos:end="205:7">dev</name> <operator pos:start="205:9" pos:end="205:9">=</operator> <call pos:start="205:11" pos:end="205:50"><name pos:start="205:11" pos:end="205:21">qdev_create</name><argument_list pos:start="205:22" pos:end="205:50">(<argument pos:start="205:23" pos:end="205:26"><expr pos:start="205:23" pos:end="205:26"><name pos:start="205:23" pos:end="205:26">NULL</name></expr></argument>, <argument pos:start="205:29" pos:end="205:49"><expr pos:start="205:29" pos:end="205:49"><literal type="string" pos:start="205:29" pos:end="205:49">"exynos4210.combiner"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="207:5" pos:end="207:45"><expr pos:start="207:5" pos:end="207:44"><call pos:start="207:5" pos:end="207:44"><name pos:start="207:5" pos:end="207:24">qdev_prop_set_uint32</name><argument_list pos:start="207:25" pos:end="207:44">(<argument pos:start="207:26" pos:end="207:28"><expr pos:start="207:26" pos:end="207:28"><name pos:start="207:26" pos:end="207:28">dev</name></expr></argument>, <argument pos:start="207:31" pos:end="207:40"><expr pos:start="207:31" pos:end="207:40"><literal type="string" pos:start="207:31" pos:end="207:40">"external"</literal></expr></argument>, <argument pos:start="207:43" pos:end="207:43"><expr pos:start="207:43" pos:end="207:43"><literal type="number" pos:start="207:43" pos:end="207:43">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="209:5" pos:end="209:26"><expr pos:start="209:5" pos:end="209:25"><call pos:start="209:5" pos:end="209:25"><name pos:start="209:5" pos:end="209:20">qdev_init_nofail</name><argument_list pos:start="209:21" pos:end="209:25">(<argument pos:start="209:22" pos:end="209:24"><expr pos:start="209:22" pos:end="209:24"><name pos:start="209:22" pos:end="209:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="211:5" pos:end="211:33"><expr pos:start="211:5" pos:end="211:32"><name pos:start="211:5" pos:end="211:10">busdev</name> <operator pos:start="211:12" pos:end="211:12">=</operator> <call pos:start="211:14" pos:end="211:32"><name pos:start="211:14" pos:end="211:27">SYS_BUS_DEVICE</name><argument_list pos:start="211:28" pos:end="211:32">(<argument pos:start="211:29" pos:end="211:31"><expr pos:start="211:29" pos:end="211:31"><name pos:start="211:29" pos:end="211:31">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="213:5" pos:end="217:5">for <control pos:start="213:9" pos:end="213:61">(<init pos:start="213:10" pos:end="213:15"><expr pos:start="213:10" pos:end="213:14"><name pos:start="213:10" pos:end="213:10">n</name> <operator pos:start="213:12" pos:end="213:12">=</operator> <literal type="number" pos:start="213:14" pos:end="213:14">0</literal></expr>;</init> <condition pos:start="213:17" pos:end="213:56"><expr pos:start="213:17" pos:end="213:55"><name pos:start="213:17" pos:end="213:17">n</name> <operator pos:start="213:19" pos:end="213:19">&lt;</operator> <name pos:start="213:21" pos:end="213:55">EXYNOS4210_MAX_INT_COMBINER_OUT_IRQ</name></expr>;</condition> <incr pos:start="213:58" pos:end="213:60"><expr pos:start="213:58" pos:end="213:60"><name pos:start="213:58" pos:end="213:58">n</name><operator pos:start="213:59" pos:end="213:60">++</operator></expr></incr>)</control> <block pos:start="213:63" pos:end="217:5">{<block_content pos:start="215:9" pos:end="215:62">

        <expr_stmt pos:start="215:9" pos:end="215:62"><expr pos:start="215:9" pos:end="215:61"><call pos:start="215:9" pos:end="215:61"><name pos:start="215:9" pos:end="215:26">sysbus_connect_irq</name><argument_list pos:start="215:27" pos:end="215:61">(<argument pos:start="215:28" pos:end="215:33"><expr pos:start="215:28" pos:end="215:33"><name pos:start="215:28" pos:end="215:33">busdev</name></expr></argument>, <argument pos:start="215:36" pos:end="215:36"><expr pos:start="215:36" pos:end="215:36"><name pos:start="215:36" pos:end="215:36">n</name></expr></argument>, <argument pos:start="215:39" pos:end="215:60"><expr pos:start="215:39" pos:end="215:60"><name pos:start="215:39" pos:end="215:60"><name pos:start="215:39" pos:end="215:39">s</name><operator pos:start="215:40" pos:end="215:41">-&gt;</operator><name pos:start="215:42" pos:end="215:45">irqs</name><operator pos:start="215:46" pos:end="215:46">.</operator><name pos:start="215:47" pos:end="215:57">ext_gic_irq</name><index pos:start="215:58" pos:end="215:60">[<expr pos:start="215:59" pos:end="215:59"><name pos:start="215:59" pos:end="215:59">n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="219:5" pos:end="219:53"><expr pos:start="219:5" pos:end="219:52"><call pos:start="219:5" pos:end="219:52"><name pos:start="219:5" pos:end="219:34">exynos4210_combiner_get_gpioin</name><argument_list pos:start="219:35" pos:end="219:52">(<argument pos:start="219:36" pos:end="219:43"><expr pos:start="219:36" pos:end="219:43"><operator pos:start="219:36" pos:end="219:36">&amp;</operator><name pos:start="219:37" pos:end="219:43"><name pos:start="219:37" pos:end="219:37">s</name><operator pos:start="219:38" pos:end="219:39">-&gt;</operator><name pos:start="219:40" pos:end="219:43">irqs</name></name></expr></argument>, <argument pos:start="219:46" pos:end="219:48"><expr pos:start="219:46" pos:end="219:48"><name pos:start="219:46" pos:end="219:48">dev</name></expr></argument>, <argument pos:start="219:51" pos:end="219:51"><expr pos:start="219:51" pos:end="219:51"><literal type="number" pos:start="219:51" pos:end="219:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="221:5" pos:end="221:66"><expr pos:start="221:5" pos:end="221:65"><call pos:start="221:5" pos:end="221:65"><name pos:start="221:5" pos:end="221:19">sysbus_mmio_map</name><argument_list pos:start="221:20" pos:end="221:65">(<argument pos:start="221:21" pos:end="221:26"><expr pos:start="221:21" pos:end="221:26"><name pos:start="221:21" pos:end="221:26">busdev</name></expr></argument>, <argument pos:start="221:29" pos:end="221:29"><expr pos:start="221:29" pos:end="221:29"><literal type="number" pos:start="221:29" pos:end="221:29">0</literal></expr></argument>, <argument pos:start="221:32" pos:end="221:64"><expr pos:start="221:32" pos:end="221:64"><name pos:start="221:32" pos:end="221:64">EXYNOS4210_EXT_COMBINER_BASE_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="225:5" pos:end="225:32">/* Initialize board IRQs. */</comment>

    <expr_stmt pos:start="227:5" pos:end="227:41"><expr pos:start="227:5" pos:end="227:40"><call pos:start="227:5" pos:end="227:40"><name pos:start="227:5" pos:end="227:30">exynos4210_init_board_irqs</name><argument_list pos:start="227:31" pos:end="227:40">(<argument pos:start="227:32" pos:end="227:39"><expr pos:start="227:32" pos:end="227:39"><operator pos:start="227:32" pos:end="227:32">&amp;</operator><name pos:start="227:33" pos:end="227:39"><name pos:start="227:33" pos:end="227:33">s</name><operator pos:start="227:34" pos:end="227:35">-&gt;</operator><name pos:start="227:36" pos:end="227:39">irqs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" format="doxygen" pos:start="231:5" pos:end="231:20">/*** Memory ***/</comment>



    <comment type="block" pos:start="235:5" pos:end="235:25">/* Chip-ID and OMR */</comment>

    <expr_stmt pos:start="237:5" pos:end="239:59"><expr pos:start="237:5" pos:end="239:58"><call pos:start="237:5" pos:end="239:58"><name pos:start="237:5" pos:end="237:25">memory_region_init_io</name><argument_list pos:start="237:26" pos:end="239:58">(<argument pos:start="237:27" pos:end="237:40"><expr pos:start="237:27" pos:end="237:40"><operator pos:start="237:27" pos:end="237:27">&amp;</operator><name pos:start="237:28" pos:end="237:40"><name pos:start="237:28" pos:end="237:28">s</name><operator pos:start="237:29" pos:end="237:30">-&gt;</operator><name pos:start="237:31" pos:end="237:40">chipid_mem</name></name></expr></argument>, <argument pos:start="237:43" pos:end="237:46"><expr pos:start="237:43" pos:end="237:46"><name pos:start="237:43" pos:end="237:46">NULL</name></expr></argument>, <argument pos:start="237:49" pos:end="237:78"><expr pos:start="237:49" pos:end="237:78"><operator pos:start="237:49" pos:end="237:49">&amp;</operator><name pos:start="237:50" pos:end="237:78">exynos4210_chipid_and_omr_ops</name></expr></argument>,

        <argument pos:start="239:9" pos:end="239:12"><expr pos:start="239:9" pos:end="239:12"><name pos:start="239:9" pos:end="239:12">NULL</name></expr></argument>, <argument pos:start="239:15" pos:end="239:33"><expr pos:start="239:15" pos:end="239:33"><literal type="string" pos:start="239:15" pos:end="239:33">"exynos4210.chipid"</literal></expr></argument>, <argument pos:start="239:36" pos:end="239:57"><expr pos:start="239:36" pos:end="239:57"><sizeof pos:start="239:36" pos:end="239:57">sizeof<argument_list pos:start="239:42" pos:end="239:57">(<argument pos:start="239:43" pos:end="239:56"><expr pos:start="239:43" pos:end="239:56"><name pos:start="239:43" pos:end="239:56">chipid_and_omr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="241:5" pos:end="243:48"><expr pos:start="241:5" pos:end="243:47"><call pos:start="241:5" pos:end="243:47"><name pos:start="241:5" pos:end="241:31">memory_region_add_subregion</name><argument_list pos:start="241:32" pos:end="243:47">(<argument pos:start="241:33" pos:end="241:42"><expr pos:start="241:33" pos:end="241:42"><name pos:start="241:33" pos:end="241:42">system_mem</name></expr></argument>, <argument pos:start="241:45" pos:end="241:66"><expr pos:start="241:45" pos:end="241:66"><name pos:start="241:45" pos:end="241:66">EXYNOS4210_CHIPID_ADDR</name></expr></argument>,

                                <argument pos:start="243:33" pos:end="243:46"><expr pos:start="243:33" pos:end="243:46"><operator pos:start="243:33" pos:end="243:33">&amp;</operator><name pos:start="243:34" pos:end="243:46"><name pos:start="243:34" pos:end="243:34">s</name><operator pos:start="243:35" pos:end="243:36">-&gt;</operator><name pos:start="243:37" pos:end="243:46">chipid_mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="247:5" pos:end="247:22">/* Internal ROM */</comment>

    <expr_stmt pos:start="249:5" pos:end="251:63"><expr pos:start="249:5" pos:end="251:62"><call pos:start="249:5" pos:end="251:62"><name pos:start="249:5" pos:end="249:26">memory_region_init_ram</name><argument_list pos:start="249:27" pos:end="251:62">(<argument pos:start="249:28" pos:end="249:39"><expr pos:start="249:28" pos:end="249:39"><operator pos:start="249:28" pos:end="249:28">&amp;</operator><name pos:start="249:29" pos:end="249:39"><name pos:start="249:29" pos:end="249:29">s</name><operator pos:start="249:30" pos:end="249:31">-&gt;</operator><name pos:start="249:32" pos:end="249:39">irom_mem</name></name></expr></argument>, <argument pos:start="249:42" pos:end="249:45"><expr pos:start="249:42" pos:end="249:45"><name pos:start="249:42" pos:end="249:45">NULL</name></expr></argument>, <argument pos:start="249:48" pos:end="249:64"><expr pos:start="249:48" pos:end="249:64"><literal type="string" pos:start="249:48" pos:end="249:64">"exynos4210.irom"</literal></expr></argument>,

                           <argument pos:start="251:28" pos:end="251:47"><expr pos:start="251:28" pos:end="251:47"><name pos:start="251:28" pos:end="251:47">EXYNOS4210_IROM_SIZE</name></expr></argument>, <argument pos:start="251:50" pos:end="251:61"><expr pos:start="251:50" pos:end="251:61"><operator pos:start="251:50" pos:end="251:50">&amp;</operator><name pos:start="251:51" pos:end="251:61">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="253:5" pos:end="253:46"><expr pos:start="253:5" pos:end="253:45"><call pos:start="253:5" pos:end="253:45"><name pos:start="253:5" pos:end="253:31">vmstate_register_ram_global</name><argument_list pos:start="253:32" pos:end="253:45">(<argument pos:start="253:33" pos:end="253:44"><expr pos:start="253:33" pos:end="253:44"><operator pos:start="253:33" pos:end="253:33">&amp;</operator><name pos:start="253:34" pos:end="253:44"><name pos:start="253:34" pos:end="253:34">s</name><operator pos:start="253:35" pos:end="253:36">-&gt;</operator><name pos:start="253:37" pos:end="253:44">irom_mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="255:5" pos:end="255:51"><expr pos:start="255:5" pos:end="255:50"><call pos:start="255:5" pos:end="255:50"><name pos:start="255:5" pos:end="255:30">memory_region_set_readonly</name><argument_list pos:start="255:31" pos:end="255:50">(<argument pos:start="255:32" pos:end="255:43"><expr pos:start="255:32" pos:end="255:43"><operator pos:start="255:32" pos:end="255:32">&amp;</operator><name pos:start="255:33" pos:end="255:43"><name pos:start="255:33" pos:end="255:33">s</name><operator pos:start="255:34" pos:end="255:35">-&gt;</operator><name pos:start="255:36" pos:end="255:43">irom_mem</name></name></expr></argument>, <argument pos:start="255:46" pos:end="255:49"><expr pos:start="255:46" pos:end="255:49"><name pos:start="255:46" pos:end="255:49">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="257:5" pos:end="259:46"><expr pos:start="257:5" pos:end="259:45"><call pos:start="257:5" pos:end="259:45"><name pos:start="257:5" pos:end="257:31">memory_region_add_subregion</name><argument_list pos:start="257:32" pos:end="259:45">(<argument pos:start="257:33" pos:end="257:42"><expr pos:start="257:33" pos:end="257:42"><name pos:start="257:33" pos:end="257:42">system_mem</name></expr></argument>, <argument pos:start="257:45" pos:end="257:69"><expr pos:start="257:45" pos:end="257:69"><name pos:start="257:45" pos:end="257:69">EXYNOS4210_IROM_BASE_ADDR</name></expr></argument>,

                                <argument pos:start="259:33" pos:end="259:44"><expr pos:start="259:33" pos:end="259:44"><operator pos:start="259:33" pos:end="259:33">&amp;</operator><name pos:start="259:34" pos:end="259:44"><name pos:start="259:34" pos:end="259:34">s</name><operator pos:start="259:35" pos:end="259:36">-&gt;</operator><name pos:start="259:37" pos:end="259:44">irom_mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="261:5" pos:end="261:24">/* mirror of iROM */</comment>

    <expr_stmt pos:start="263:5" pos:end="269:51"><expr pos:start="263:5" pos:end="269:50"><call pos:start="263:5" pos:end="269:50"><name pos:start="263:5" pos:end="263:28">memory_region_init_alias</name><argument_list pos:start="263:29" pos:end="269:50">(<argument pos:start="263:30" pos:end="263:47"><expr pos:start="263:30" pos:end="263:47"><operator pos:start="263:30" pos:end="263:30">&amp;</operator><name pos:start="263:31" pos:end="263:47"><name pos:start="263:31" pos:end="263:31">s</name><operator pos:start="263:32" pos:end="263:33">-&gt;</operator><name pos:start="263:34" pos:end="263:47">irom_alias_mem</name></name></expr></argument>, <argument pos:start="263:50" pos:end="263:53"><expr pos:start="263:50" pos:end="263:53"><name pos:start="263:50" pos:end="263:53">NULL</name></expr></argument>, <argument pos:start="263:56" pos:end="263:78"><expr pos:start="263:56" pos:end="263:78"><literal type="string" pos:start="263:56" pos:end="263:78">"exynos4210.irom_alias"</literal></expr></argument>,

                             <argument pos:start="265:30" pos:end="265:41"><expr pos:start="265:30" pos:end="265:41"><operator pos:start="265:30" pos:end="265:30">&amp;</operator><name pos:start="265:31" pos:end="265:41"><name pos:start="265:31" pos:end="265:31">s</name><operator pos:start="265:32" pos:end="265:33">-&gt;</operator><name pos:start="265:34" pos:end="265:41">irom_mem</name></name></expr></argument>,

                             <argument pos:start="267:30" pos:end="267:30"><expr pos:start="267:30" pos:end="267:30"><literal type="number" pos:start="267:30" pos:end="267:30">0</literal></expr></argument>,

                             <argument pos:start="269:30" pos:end="269:49"><expr pos:start="269:30" pos:end="269:49"><name pos:start="269:30" pos:end="269:49">EXYNOS4210_IROM_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="271:5" pos:end="271:57"><expr pos:start="271:5" pos:end="271:56"><call pos:start="271:5" pos:end="271:56"><name pos:start="271:5" pos:end="271:30">memory_region_set_readonly</name><argument_list pos:start="271:31" pos:end="271:56">(<argument pos:start="271:32" pos:end="271:49"><expr pos:start="271:32" pos:end="271:49"><operator pos:start="271:32" pos:end="271:32">&amp;</operator><name pos:start="271:33" pos:end="271:49"><name pos:start="271:33" pos:end="271:33">s</name><operator pos:start="271:34" pos:end="271:35">-&gt;</operator><name pos:start="271:36" pos:end="271:49">irom_alias_mem</name></name></expr></argument>, <argument pos:start="271:52" pos:end="271:55"><expr pos:start="271:52" pos:end="271:55"><name pos:start="271:52" pos:end="271:55">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="273:5" pos:end="275:52"><expr pos:start="273:5" pos:end="275:51"><call pos:start="273:5" pos:end="275:51"><name pos:start="273:5" pos:end="273:31">memory_region_add_subregion</name><argument_list pos:start="273:32" pos:end="275:51">(<argument pos:start="273:33" pos:end="273:42"><expr pos:start="273:33" pos:end="273:42"><name pos:start="273:33" pos:end="273:42">system_mem</name></expr></argument>, <argument pos:start="273:45" pos:end="273:76"><expr pos:start="273:45" pos:end="273:76"><name pos:start="273:45" pos:end="273:76">EXYNOS4210_IROM_MIRROR_BASE_ADDR</name></expr></argument>,

                                <argument pos:start="275:33" pos:end="275:50"><expr pos:start="275:33" pos:end="275:50"><operator pos:start="275:33" pos:end="275:33">&amp;</operator><name pos:start="275:34" pos:end="275:50"><name pos:start="275:34" pos:end="275:34">s</name><operator pos:start="275:35" pos:end="275:36">-&gt;</operator><name pos:start="275:37" pos:end="275:50">irom_alias_mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="279:5" pos:end="279:22">/* Internal RAM */</comment>

    <expr_stmt pos:start="281:5" pos:end="283:63"><expr pos:start="281:5" pos:end="283:62"><call pos:start="281:5" pos:end="283:62"><name pos:start="281:5" pos:end="281:26">memory_region_init_ram</name><argument_list pos:start="281:27" pos:end="283:62">(<argument pos:start="281:28" pos:end="281:39"><expr pos:start="281:28" pos:end="281:39"><operator pos:start="281:28" pos:end="281:28">&amp;</operator><name pos:start="281:29" pos:end="281:39"><name pos:start="281:29" pos:end="281:29">s</name><operator pos:start="281:30" pos:end="281:31">-&gt;</operator><name pos:start="281:32" pos:end="281:39">iram_mem</name></name></expr></argument>, <argument pos:start="281:42" pos:end="281:45"><expr pos:start="281:42" pos:end="281:45"><name pos:start="281:42" pos:end="281:45">NULL</name></expr></argument>, <argument pos:start="281:48" pos:end="281:64"><expr pos:start="281:48" pos:end="281:64"><literal type="string" pos:start="281:48" pos:end="281:64">"exynos4210.iram"</literal></expr></argument>,

                           <argument pos:start="283:28" pos:end="283:47"><expr pos:start="283:28" pos:end="283:47"><name pos:start="283:28" pos:end="283:47">EXYNOS4210_IRAM_SIZE</name></expr></argument>, <argument pos:start="283:50" pos:end="283:61"><expr pos:start="283:50" pos:end="283:61"><operator pos:start="283:50" pos:end="283:50">&amp;</operator><name pos:start="283:51" pos:end="283:61">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="285:5" pos:end="285:46"><expr pos:start="285:5" pos:end="285:45"><call pos:start="285:5" pos:end="285:45"><name pos:start="285:5" pos:end="285:31">vmstate_register_ram_global</name><argument_list pos:start="285:32" pos:end="285:45">(<argument pos:start="285:33" pos:end="285:44"><expr pos:start="285:33" pos:end="285:44"><operator pos:start="285:33" pos:end="285:33">&amp;</operator><name pos:start="285:34" pos:end="285:44"><name pos:start="285:34" pos:end="285:34">s</name><operator pos:start="285:35" pos:end="285:36">-&gt;</operator><name pos:start="285:37" pos:end="285:44">iram_mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="287:5" pos:end="289:46"><expr pos:start="287:5" pos:end="289:45"><call pos:start="287:5" pos:end="289:45"><name pos:start="287:5" pos:end="287:31">memory_region_add_subregion</name><argument_list pos:start="287:32" pos:end="289:45">(<argument pos:start="287:33" pos:end="287:42"><expr pos:start="287:33" pos:end="287:42"><name pos:start="287:33" pos:end="287:42">system_mem</name></expr></argument>, <argument pos:start="287:45" pos:end="287:69"><expr pos:start="287:45" pos:end="287:69"><name pos:start="287:45" pos:end="287:69">EXYNOS4210_IRAM_BASE_ADDR</name></expr></argument>,

                                <argument pos:start="289:33" pos:end="289:44"><expr pos:start="289:33" pos:end="289:44"><operator pos:start="289:33" pos:end="289:33">&amp;</operator><name pos:start="289:34" pos:end="289:44"><name pos:start="289:34" pos:end="289:34">s</name><operator pos:start="289:35" pos:end="289:36">-&gt;</operator><name pos:start="289:37" pos:end="289:44">iram_mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="293:5" pos:end="293:14">/* DRAM */</comment>

    <expr_stmt pos:start="295:5" pos:end="295:24"><expr pos:start="295:5" pos:end="295:23"><name pos:start="295:5" pos:end="295:12">mem_size</name> <operator pos:start="295:14" pos:end="295:14">=</operator> <name pos:start="295:16" pos:end="295:23">ram_size</name></expr>;</expr_stmt>

    <if_stmt pos:start="297:5" pos:end="311:5"><if pos:start="297:5" pos:end="311:5">if <condition pos:start="297:8" pos:end="297:44">(<expr pos:start="297:9" pos:end="297:43"><name pos:start="297:9" pos:end="297:16">mem_size</name> <operator pos:start="297:18" pos:end="297:18">&gt;</operator> <name pos:start="297:20" pos:end="297:43">EXYNOS4210_DRAM_MAX_SIZE</name></expr>)</condition> <block pos:start="297:46" pos:end="311:5">{<block_content pos:start="299:9" pos:end="309:44">

        <expr_stmt pos:start="299:9" pos:end="301:67"><expr pos:start="299:9" pos:end="301:66"><call pos:start="299:9" pos:end="301:66"><name pos:start="299:9" pos:end="299:30">memory_region_init_ram</name><argument_list pos:start="299:31" pos:end="301:66">(<argument pos:start="299:32" pos:end="299:44"><expr pos:start="299:32" pos:end="299:44"><operator pos:start="299:32" pos:end="299:32">&amp;</operator><name pos:start="299:33" pos:end="299:44"><name pos:start="299:33" pos:end="299:33">s</name><operator pos:start="299:34" pos:end="299:35">-&gt;</operator><name pos:start="299:36" pos:end="299:44">dram1_mem</name></name></expr></argument>, <argument pos:start="299:47" pos:end="299:50"><expr pos:start="299:47" pos:end="299:50"><name pos:start="299:47" pos:end="299:50">NULL</name></expr></argument>, <argument pos:start="299:53" pos:end="299:70"><expr pos:start="299:53" pos:end="299:70"><literal type="string" pos:start="299:53" pos:end="299:70">"exynos4210.dram1"</literal></expr></argument>,

                <argument pos:start="301:17" pos:end="301:51"><expr pos:start="301:17" pos:end="301:51"><name pos:start="301:17" pos:end="301:24">mem_size</name> <operator pos:start="301:26" pos:end="301:26">-</operator> <name pos:start="301:28" pos:end="301:51">EXYNOS4210_DRAM_MAX_SIZE</name></expr></argument>, <argument pos:start="301:54" pos:end="301:65"><expr pos:start="301:54" pos:end="301:65"><operator pos:start="301:54" pos:end="301:54">&amp;</operator><name pos:start="301:55" pos:end="301:65">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="303:9" pos:end="303:51"><expr pos:start="303:9" pos:end="303:50"><call pos:start="303:9" pos:end="303:50"><name pos:start="303:9" pos:end="303:35">vmstate_register_ram_global</name><argument_list pos:start="303:36" pos:end="303:50">(<argument pos:start="303:37" pos:end="303:49"><expr pos:start="303:37" pos:end="303:49"><operator pos:start="303:37" pos:end="303:37">&amp;</operator><name pos:start="303:38" pos:end="303:49"><name pos:start="303:38" pos:end="303:38">s</name><operator pos:start="303:39" pos:end="303:40">-&gt;</operator><name pos:start="303:41" pos:end="303:49">dram1_mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="305:9" pos:end="307:31"><expr pos:start="305:9" pos:end="307:30"><call pos:start="305:9" pos:end="307:30"><name pos:start="305:9" pos:end="305:35">memory_region_add_subregion</name><argument_list pos:start="305:36" pos:end="307:30">(<argument pos:start="305:37" pos:end="305:46"><expr pos:start="305:37" pos:end="305:46"><name pos:start="305:37" pos:end="305:46">system_mem</name></expr></argument>, <argument pos:start="305:49" pos:end="305:74"><expr pos:start="305:49" pos:end="305:74"><name pos:start="305:49" pos:end="305:74">EXYNOS4210_DRAM1_BASE_ADDR</name></expr></argument>,

                <argument pos:start="307:17" pos:end="307:29"><expr pos:start="307:17" pos:end="307:29"><operator pos:start="307:17" pos:end="307:17">&amp;</operator><name pos:start="307:18" pos:end="307:29"><name pos:start="307:18" pos:end="307:18">s</name><operator pos:start="307:19" pos:end="307:20">-&gt;</operator><name pos:start="307:21" pos:end="307:29">dram1_mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="309:9" pos:end="309:44"><expr pos:start="309:9" pos:end="309:43"><name pos:start="309:9" pos:end="309:16">mem_size</name> <operator pos:start="309:18" pos:end="309:18">=</operator> <name pos:start="309:20" pos:end="309:43">EXYNOS4210_DRAM_MAX_SIZE</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="313:5" pos:end="315:41"><expr pos:start="313:5" pos:end="315:40"><call pos:start="313:5" pos:end="315:40"><name pos:start="313:5" pos:end="313:26">memory_region_init_ram</name><argument_list pos:start="313:27" pos:end="315:40">(<argument pos:start="313:28" pos:end="313:40"><expr pos:start="313:28" pos:end="313:40"><operator pos:start="313:28" pos:end="313:28">&amp;</operator><name pos:start="313:29" pos:end="313:40"><name pos:start="313:29" pos:end="313:29">s</name><operator pos:start="313:30" pos:end="313:31">-&gt;</operator><name pos:start="313:32" pos:end="313:40">dram0_mem</name></name></expr></argument>, <argument pos:start="313:43" pos:end="313:46"><expr pos:start="313:43" pos:end="313:46"><name pos:start="313:43" pos:end="313:46">NULL</name></expr></argument>, <argument pos:start="313:49" pos:end="313:66"><expr pos:start="313:49" pos:end="313:66"><literal type="string" pos:start="313:49" pos:end="313:66">"exynos4210.dram0"</literal></expr></argument>, <argument pos:start="313:69" pos:end="313:76"><expr pos:start="313:69" pos:end="313:76"><name pos:start="313:69" pos:end="313:76">mem_size</name></expr></argument>,

                           <argument pos:start="315:28" pos:end="315:39"><expr pos:start="315:28" pos:end="315:39"><operator pos:start="315:28" pos:end="315:28">&amp;</operator><name pos:start="315:29" pos:end="315:39">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="317:5" pos:end="317:47"><expr pos:start="317:5" pos:end="317:46"><call pos:start="317:5" pos:end="317:46"><name pos:start="317:5" pos:end="317:31">vmstate_register_ram_global</name><argument_list pos:start="317:32" pos:end="317:46">(<argument pos:start="317:33" pos:end="317:45"><expr pos:start="317:33" pos:end="317:45"><operator pos:start="317:33" pos:end="317:33">&amp;</operator><name pos:start="317:34" pos:end="317:45"><name pos:start="317:34" pos:end="317:34">s</name><operator pos:start="317:35" pos:end="317:36">-&gt;</operator><name pos:start="317:37" pos:end="317:45">dram0_mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="319:5" pos:end="321:27"><expr pos:start="319:5" pos:end="321:26"><call pos:start="319:5" pos:end="321:26"><name pos:start="319:5" pos:end="319:31">memory_region_add_subregion</name><argument_list pos:start="319:32" pos:end="321:26">(<argument pos:start="319:33" pos:end="319:42"><expr pos:start="319:33" pos:end="319:42"><name pos:start="319:33" pos:end="319:42">system_mem</name></expr></argument>, <argument pos:start="319:45" pos:end="319:70"><expr pos:start="319:45" pos:end="319:70"><name pos:start="319:45" pos:end="319:70">EXYNOS4210_DRAM0_BASE_ADDR</name></expr></argument>,

            <argument pos:start="321:13" pos:end="321:25"><expr pos:start="321:13" pos:end="321:25"><operator pos:start="321:13" pos:end="321:13">&amp;</operator><name pos:start="321:14" pos:end="321:25"><name pos:start="321:14" pos:end="321:14">s</name><operator pos:start="321:15" pos:end="321:16">-&gt;</operator><name pos:start="321:17" pos:end="321:25">dram0_mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



   <comment type="block" pos:start="325:4" pos:end="331:6">/* PMU.

    * The only reason of existence at the moment is that secondary CPU boot

    * loader uses PMU INFORM5 register as a holding pen.

    */</comment>

    <expr_stmt pos:start="333:5" pos:end="333:75"><expr pos:start="333:5" pos:end="333:74"><call pos:start="333:5" pos:end="333:74"><name pos:start="333:5" pos:end="333:24">sysbus_create_simple</name><argument_list pos:start="333:25" pos:end="333:74">(<argument pos:start="333:26" pos:end="333:41"><expr pos:start="333:26" pos:end="333:41"><literal type="string" pos:start="333:26" pos:end="333:41">"exynos4210.pmu"</literal></expr></argument>, <argument pos:start="333:44" pos:end="333:67"><expr pos:start="333:44" pos:end="333:67"><name pos:start="333:44" pos:end="333:67">EXYNOS4210_PMU_BASE_ADDR</name></expr></argument>, <argument pos:start="333:70" pos:end="333:73"><expr pos:start="333:70" pos:end="333:73"><name pos:start="333:70" pos:end="333:73">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="337:5" pos:end="337:13">/* PWM */</comment>

    <expr_stmt pos:start="339:5" pos:end="351:32"><expr pos:start="339:5" pos:end="351:31"><call pos:start="339:5" pos:end="351:31"><name pos:start="339:5" pos:end="339:25">sysbus_create_varargs</name><argument_list pos:start="339:26" pos:end="351:31">(<argument pos:start="339:27" pos:end="339:42"><expr pos:start="339:27" pos:end="339:42"><literal type="string" pos:start="339:27" pos:end="339:42">"exynos4210.pwm"</literal></expr></argument>, <argument pos:start="339:45" pos:end="339:68"><expr pos:start="339:45" pos:end="339:68"><name pos:start="339:45" pos:end="339:68">EXYNOS4210_PWM_BASE_ADDR</name></expr></argument>,

                          <argument pos:start="341:27" pos:end="341:65"><expr pos:start="341:27" pos:end="341:65"><name pos:start="341:27" pos:end="341:65"><name pos:start="341:27" pos:end="341:27">s</name><operator pos:start="341:28" pos:end="341:29">-&gt;</operator><name pos:start="341:30" pos:end="341:38">irq_table</name><index pos:start="341:39" pos:end="341:65">[<expr pos:start="341:40" pos:end="341:64"><call pos:start="341:40" pos:end="341:64"><name pos:start="341:40" pos:end="341:57">exynos4210_get_irq</name><argument_list pos:start="341:58" pos:end="341:64">(<argument pos:start="341:59" pos:end="341:60"><expr pos:start="341:59" pos:end="341:60"><literal type="number" pos:start="341:59" pos:end="341:60">22</literal></expr></argument>, <argument pos:start="341:63" pos:end="341:63"><expr pos:start="341:63" pos:end="341:63"><literal type="number" pos:start="341:63" pos:end="341:63">0</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,

                          <argument pos:start="343:27" pos:end="343:65"><expr pos:start="343:27" pos:end="343:65"><name pos:start="343:27" pos:end="343:65"><name pos:start="343:27" pos:end="343:27">s</name><operator pos:start="343:28" pos:end="343:29">-&gt;</operator><name pos:start="343:30" pos:end="343:38">irq_table</name><index pos:start="343:39" pos:end="343:65">[<expr pos:start="343:40" pos:end="343:64"><call pos:start="343:40" pos:end="343:64"><name pos:start="343:40" pos:end="343:57">exynos4210_get_irq</name><argument_list pos:start="343:58" pos:end="343:64">(<argument pos:start="343:59" pos:end="343:60"><expr pos:start="343:59" pos:end="343:60"><literal type="number" pos:start="343:59" pos:end="343:60">22</literal></expr></argument>, <argument pos:start="343:63" pos:end="343:63"><expr pos:start="343:63" pos:end="343:63"><literal type="number" pos:start="343:63" pos:end="343:63">1</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,

                          <argument pos:start="345:27" pos:end="345:65"><expr pos:start="345:27" pos:end="345:65"><name pos:start="345:27" pos:end="345:65"><name pos:start="345:27" pos:end="345:27">s</name><operator pos:start="345:28" pos:end="345:29">-&gt;</operator><name pos:start="345:30" pos:end="345:38">irq_table</name><index pos:start="345:39" pos:end="345:65">[<expr pos:start="345:40" pos:end="345:64"><call pos:start="345:40" pos:end="345:64"><name pos:start="345:40" pos:end="345:57">exynos4210_get_irq</name><argument_list pos:start="345:58" pos:end="345:64">(<argument pos:start="345:59" pos:end="345:60"><expr pos:start="345:59" pos:end="345:60"><literal type="number" pos:start="345:59" pos:end="345:60">22</literal></expr></argument>, <argument pos:start="345:63" pos:end="345:63"><expr pos:start="345:63" pos:end="345:63"><literal type="number" pos:start="345:63" pos:end="345:63">2</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,

                          <argument pos:start="347:27" pos:end="347:65"><expr pos:start="347:27" pos:end="347:65"><name pos:start="347:27" pos:end="347:65"><name pos:start="347:27" pos:end="347:27">s</name><operator pos:start="347:28" pos:end="347:29">-&gt;</operator><name pos:start="347:30" pos:end="347:38">irq_table</name><index pos:start="347:39" pos:end="347:65">[<expr pos:start="347:40" pos:end="347:64"><call pos:start="347:40" pos:end="347:64"><name pos:start="347:40" pos:end="347:57">exynos4210_get_irq</name><argument_list pos:start="347:58" pos:end="347:64">(<argument pos:start="347:59" pos:end="347:60"><expr pos:start="347:59" pos:end="347:60"><literal type="number" pos:start="347:59" pos:end="347:60">22</literal></expr></argument>, <argument pos:start="347:63" pos:end="347:63"><expr pos:start="347:63" pos:end="347:63"><literal type="number" pos:start="347:63" pos:end="347:63">3</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,

                          <argument pos:start="349:27" pos:end="349:65"><expr pos:start="349:27" pos:end="349:65"><name pos:start="349:27" pos:end="349:65"><name pos:start="349:27" pos:end="349:27">s</name><operator pos:start="349:28" pos:end="349:29">-&gt;</operator><name pos:start="349:30" pos:end="349:38">irq_table</name><index pos:start="349:39" pos:end="349:65">[<expr pos:start="349:40" pos:end="349:64"><call pos:start="349:40" pos:end="349:64"><name pos:start="349:40" pos:end="349:57">exynos4210_get_irq</name><argument_list pos:start="349:58" pos:end="349:64">(<argument pos:start="349:59" pos:end="349:60"><expr pos:start="349:59" pos:end="349:60"><literal type="number" pos:start="349:59" pos:end="349:60">22</literal></expr></argument>, <argument pos:start="349:63" pos:end="349:63"><expr pos:start="349:63" pos:end="349:63"><literal type="number" pos:start="349:63" pos:end="349:63">4</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,

                          <argument pos:start="351:27" pos:end="351:30"><expr pos:start="351:27" pos:end="351:30"><name pos:start="351:27" pos:end="351:30">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="353:5" pos:end="353:13">/* RTC */</comment>

    <expr_stmt pos:start="355:5" pos:end="361:32"><expr pos:start="355:5" pos:end="361:31"><call pos:start="355:5" pos:end="361:31"><name pos:start="355:5" pos:end="355:25">sysbus_create_varargs</name><argument_list pos:start="355:26" pos:end="361:31">(<argument pos:start="355:27" pos:end="355:42"><expr pos:start="355:27" pos:end="355:42"><literal type="string" pos:start="355:27" pos:end="355:42">"exynos4210.rtc"</literal></expr></argument>, <argument pos:start="355:45" pos:end="355:68"><expr pos:start="355:45" pos:end="355:68"><name pos:start="355:45" pos:end="355:68">EXYNOS4210_RTC_BASE_ADDR</name></expr></argument>,

                          <argument pos:start="357:27" pos:end="357:65"><expr pos:start="357:27" pos:end="357:65"><name pos:start="357:27" pos:end="357:65"><name pos:start="357:27" pos:end="357:27">s</name><operator pos:start="357:28" pos:end="357:29">-&gt;</operator><name pos:start="357:30" pos:end="357:38">irq_table</name><index pos:start="357:39" pos:end="357:65">[<expr pos:start="357:40" pos:end="357:64"><call pos:start="357:40" pos:end="357:64"><name pos:start="357:40" pos:end="357:57">exynos4210_get_irq</name><argument_list pos:start="357:58" pos:end="357:64">(<argument pos:start="357:59" pos:end="357:60"><expr pos:start="357:59" pos:end="357:60"><literal type="number" pos:start="357:59" pos:end="357:60">23</literal></expr></argument>, <argument pos:start="357:63" pos:end="357:63"><expr pos:start="357:63" pos:end="357:63"><literal type="number" pos:start="357:63" pos:end="357:63">0</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,

                          <argument pos:start="359:27" pos:end="359:65"><expr pos:start="359:27" pos:end="359:65"><name pos:start="359:27" pos:end="359:65"><name pos:start="359:27" pos:end="359:27">s</name><operator pos:start="359:28" pos:end="359:29">-&gt;</operator><name pos:start="359:30" pos:end="359:38">irq_table</name><index pos:start="359:39" pos:end="359:65">[<expr pos:start="359:40" pos:end="359:64"><call pos:start="359:40" pos:end="359:64"><name pos:start="359:40" pos:end="359:57">exynos4210_get_irq</name><argument_list pos:start="359:58" pos:end="359:64">(<argument pos:start="359:59" pos:end="359:60"><expr pos:start="359:59" pos:end="359:60"><literal type="number" pos:start="359:59" pos:end="359:60">23</literal></expr></argument>, <argument pos:start="359:63" pos:end="359:63"><expr pos:start="359:63" pos:end="359:63"><literal type="number" pos:start="359:63" pos:end="359:63">1</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,

                          <argument pos:start="361:27" pos:end="361:30"><expr pos:start="361:27" pos:end="361:30"><name pos:start="361:27" pos:end="361:30">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="365:5" pos:end="365:26">/* Multi Core Timer */</comment>

    <expr_stmt pos:start="367:5" pos:end="367:46"><expr pos:start="367:5" pos:end="367:45"><name pos:start="367:5" pos:end="367:7">dev</name> <operator pos:start="367:9" pos:end="367:9">=</operator> <call pos:start="367:11" pos:end="367:45"><name pos:start="367:11" pos:end="367:21">qdev_create</name><argument_list pos:start="367:22" pos:end="367:45">(<argument pos:start="367:23" pos:end="367:26"><expr pos:start="367:23" pos:end="367:26"><name pos:start="367:23" pos:end="367:26">NULL</name></expr></argument>, <argument pos:start="367:29" pos:end="367:44"><expr pos:start="367:29" pos:end="367:44"><literal type="string" pos:start="367:29" pos:end="367:44">"exynos4210.mct"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="369:5" pos:end="369:26"><expr pos:start="369:5" pos:end="369:25"><call pos:start="369:5" pos:end="369:25"><name pos:start="369:5" pos:end="369:20">qdev_init_nofail</name><argument_list pos:start="369:21" pos:end="369:25">(<argument pos:start="369:22" pos:end="369:24"><expr pos:start="369:22" pos:end="369:24"><name pos:start="369:22" pos:end="369:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="371:5" pos:end="371:33"><expr pos:start="371:5" pos:end="371:32"><name pos:start="371:5" pos:end="371:10">busdev</name> <operator pos:start="371:12" pos:end="371:12">=</operator> <call pos:start="371:14" pos:end="371:32"><name pos:start="371:14" pos:end="371:27">SYS_BUS_DEVICE</name><argument_list pos:start="371:28" pos:end="371:32">(<argument pos:start="371:29" pos:end="371:31"><expr pos:start="371:29" pos:end="371:31"><name pos:start="371:29" pos:end="371:31">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="373:5" pos:end="381:5">for <control pos:start="373:9" pos:end="373:27">(<init pos:start="373:10" pos:end="373:15"><expr pos:start="373:10" pos:end="373:14"><name pos:start="373:10" pos:end="373:10">n</name> <operator pos:start="373:12" pos:end="373:12">=</operator> <literal type="number" pos:start="373:14" pos:end="373:14">0</literal></expr>;</init> <condition pos:start="373:17" pos:end="373:22"><expr pos:start="373:17" pos:end="373:21"><name pos:start="373:17" pos:end="373:17">n</name> <operator pos:start="373:19" pos:end="373:19">&lt;</operator> <literal type="number" pos:start="373:21" pos:end="373:21">4</literal></expr>;</condition> <incr pos:start="373:24" pos:end="373:26"><expr pos:start="373:24" pos:end="373:26"><name pos:start="373:24" pos:end="373:24">n</name><operator pos:start="373:25" pos:end="373:26">++</operator></expr></incr>)</control> <block pos:start="373:29" pos:end="381:5">{<block_content pos:start="377:9" pos:end="379:60">

        <comment type="block" pos:start="375:9" pos:end="375:65">/* Connect global timer interrupts to Combiner gpio_in */</comment>

        <expr_stmt pos:start="377:9" pos:end="379:60"><expr pos:start="377:9" pos:end="379:59"><call pos:start="377:9" pos:end="379:59"><name pos:start="377:9" pos:end="377:26">sysbus_connect_irq</name><argument_list pos:start="377:27" pos:end="379:59">(<argument pos:start="377:28" pos:end="377:33"><expr pos:start="377:28" pos:end="377:33"><name pos:start="377:28" pos:end="377:33">busdev</name></expr></argument>, <argument pos:start="377:36" pos:end="377:36"><expr pos:start="377:36" pos:end="377:36"><name pos:start="377:36" pos:end="377:36">n</name></expr></argument>,

                <argument pos:start="379:17" pos:end="379:58"><expr pos:start="379:17" pos:end="379:58"><name pos:start="379:17" pos:end="379:58"><name pos:start="379:17" pos:end="379:17">s</name><operator pos:start="379:18" pos:end="379:19">-&gt;</operator><name pos:start="379:20" pos:end="379:28">irq_table</name><index pos:start="379:29" pos:end="379:58">[<expr pos:start="379:30" pos:end="379:57"><call pos:start="379:30" pos:end="379:57"><name pos:start="379:30" pos:end="379:47">exynos4210_get_irq</name><argument_list pos:start="379:48" pos:end="379:57">(<argument pos:start="379:49" pos:end="379:49"><expr pos:start="379:49" pos:end="379:49"><literal type="number" pos:start="379:49" pos:end="379:49">1</literal></expr></argument>, <argument pos:start="379:52" pos:end="379:56"><expr pos:start="379:52" pos:end="379:56"><literal type="number" pos:start="379:52" pos:end="379:54">4</literal> <operator pos:start="379:54" pos:end="379:54">+</operator> <name pos:start="379:56" pos:end="379:56">n</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <comment type="block" pos:start="383:5" pos:end="383:60">/* Connect local timer interrupts to Combiner gpio_in */</comment>

    <expr_stmt pos:start="385:5" pos:end="387:53"><expr pos:start="385:5" pos:end="387:52"><call pos:start="385:5" pos:end="387:52"><name pos:start="385:5" pos:end="385:22">sysbus_connect_irq</name><argument_list pos:start="385:23" pos:end="387:52">(<argument pos:start="385:24" pos:end="385:29"><expr pos:start="385:24" pos:end="385:29"><name pos:start="385:24" pos:end="385:29">busdev</name></expr></argument>, <argument pos:start="385:32" pos:end="385:32"><expr pos:start="385:32" pos:end="385:32"><literal type="number" pos:start="385:32" pos:end="385:32">4</literal></expr></argument>,

            <argument pos:start="387:13" pos:end="387:51"><expr pos:start="387:13" pos:end="387:51"><name pos:start="387:13" pos:end="387:51"><name pos:start="387:13" pos:end="387:13">s</name><operator pos:start="387:14" pos:end="387:15">-&gt;</operator><name pos:start="387:16" pos:end="387:24">irq_table</name><index pos:start="387:25" pos:end="387:51">[<expr pos:start="387:26" pos:end="387:50"><call pos:start="387:26" pos:end="387:50"><name pos:start="387:26" pos:end="387:43">exynos4210_get_irq</name><argument_list pos:start="387:44" pos:end="387:50">(<argument pos:start="387:45" pos:end="387:46"><expr pos:start="387:45" pos:end="387:46"><literal type="number" pos:start="387:45" pos:end="387:46">51</literal></expr></argument>, <argument pos:start="387:49" pos:end="387:49"><expr pos:start="387:49" pos:end="387:49"><literal type="number" pos:start="387:49" pos:end="387:49">0</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="389:5" pos:end="391:53"><expr pos:start="389:5" pos:end="391:52"><call pos:start="389:5" pos:end="391:52"><name pos:start="389:5" pos:end="389:22">sysbus_connect_irq</name><argument_list pos:start="389:23" pos:end="391:52">(<argument pos:start="389:24" pos:end="389:29"><expr pos:start="389:24" pos:end="389:29"><name pos:start="389:24" pos:end="389:29">busdev</name></expr></argument>, <argument pos:start="389:32" pos:end="389:32"><expr pos:start="389:32" pos:end="389:32"><literal type="number" pos:start="389:32" pos:end="389:32">5</literal></expr></argument>,

            <argument pos:start="391:13" pos:end="391:51"><expr pos:start="391:13" pos:end="391:51"><name pos:start="391:13" pos:end="391:51"><name pos:start="391:13" pos:end="391:13">s</name><operator pos:start="391:14" pos:end="391:15">-&gt;</operator><name pos:start="391:16" pos:end="391:24">irq_table</name><index pos:start="391:25" pos:end="391:51">[<expr pos:start="391:26" pos:end="391:50"><call pos:start="391:26" pos:end="391:50"><name pos:start="391:26" pos:end="391:43">exynos4210_get_irq</name><argument_list pos:start="391:44" pos:end="391:50">(<argument pos:start="391:45" pos:end="391:46"><expr pos:start="391:45" pos:end="391:46"><literal type="number" pos:start="391:45" pos:end="391:46">35</literal></expr></argument>, <argument pos:start="391:49" pos:end="391:49"><expr pos:start="391:49" pos:end="391:49"><literal type="number" pos:start="391:49" pos:end="391:49">3</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="393:5" pos:end="393:57"><expr pos:start="393:5" pos:end="393:56"><call pos:start="393:5" pos:end="393:56"><name pos:start="393:5" pos:end="393:19">sysbus_mmio_map</name><argument_list pos:start="393:20" pos:end="393:56">(<argument pos:start="393:21" pos:end="393:26"><expr pos:start="393:21" pos:end="393:26"><name pos:start="393:21" pos:end="393:26">busdev</name></expr></argument>, <argument pos:start="393:29" pos:end="393:29"><expr pos:start="393:29" pos:end="393:29"><literal type="number" pos:start="393:29" pos:end="393:29">0</literal></expr></argument>, <argument pos:start="393:32" pos:end="393:55"><expr pos:start="393:32" pos:end="393:55"><name pos:start="393:32" pos:end="393:55">EXYNOS4210_MCT_BASE_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" format="doxygen" pos:start="397:5" pos:end="397:17">/*** I2C ***/</comment>

    <for pos:start="399:5" pos:end="431:5">for <control pos:start="399:9" pos:end="399:47">(<init pos:start="399:10" pos:end="399:15"><expr pos:start="399:10" pos:end="399:14"><name pos:start="399:10" pos:end="399:10">n</name> <operator pos:start="399:12" pos:end="399:12">=</operator> <literal type="number" pos:start="399:14" pos:end="399:14">0</literal></expr>;</init> <condition pos:start="399:17" pos:end="399:42"><expr pos:start="399:17" pos:end="399:41"><name pos:start="399:17" pos:end="399:17">n</name> <operator pos:start="399:19" pos:end="399:19">&lt;</operator> <name pos:start="399:21" pos:end="399:41">EXYNOS4210_I2C_NUMBER</name></expr>;</condition> <incr pos:start="399:44" pos:end="399:46"><expr pos:start="399:44" pos:end="399:46"><name pos:start="399:44" pos:end="399:44">n</name><operator pos:start="399:45" pos:end="399:46">++</operator></expr></incr>)</control> <block pos:start="399:49" pos:end="431:5">{<block_content pos:start="401:9" pos:end="429:64">

        <decl_stmt pos:start="401:9" pos:end="401:76"><decl pos:start="401:9" pos:end="401:75"><type pos:start="401:9" pos:end="401:16"><name pos:start="401:9" pos:end="401:16">uint32_t</name></type> <name pos:start="401:18" pos:end="401:21">addr</name> <init pos:start="401:23" pos:end="401:75">= <expr pos:start="401:25" pos:end="401:75"><name pos:start="401:25" pos:end="401:48">EXYNOS4210_I2C_BASE_ADDR</name> <operator pos:start="401:50" pos:end="401:50">+</operator> <name pos:start="401:52" pos:end="401:71">EXYNOS4210_I2C_SHIFT</name> <operator pos:start="401:73" pos:end="401:73">*</operator> <name pos:start="401:75" pos:end="401:75">n</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="403:9" pos:end="403:25"><decl pos:start="403:9" pos:end="403:24"><type pos:start="403:9" pos:end="403:16"><name pos:start="403:9" pos:end="403:16">qemu_irq</name></type> <name pos:start="403:18" pos:end="403:24">i2c_irq</name></decl>;</decl_stmt>



        <if_stmt pos:start="407:9" pos:end="415:9"><if pos:start="407:9" pos:end="411:9">if <condition pos:start="407:12" pos:end="407:18">(<expr pos:start="407:13" pos:end="407:17"><name pos:start="407:13" pos:end="407:13">n</name> <operator pos:start="407:15" pos:end="407:15">&lt;</operator> <literal type="number" pos:start="407:17" pos:end="407:17">8</literal></expr>)</condition> <block pos:start="407:20" pos:end="411:9">{<block_content pos:start="409:13" pos:end="409:79">

            <expr_stmt pos:start="409:13" pos:end="409:79"><expr pos:start="409:13" pos:end="409:78"><name pos:start="409:13" pos:end="409:19">i2c_irq</name> <operator pos:start="409:21" pos:end="409:21">=</operator> <name pos:start="409:23" pos:end="409:78"><name pos:start="409:23" pos:end="409:23">s</name><operator pos:start="409:24" pos:end="409:25">-&gt;</operator><name pos:start="409:26" pos:end="409:34">irq_table</name><index pos:start="409:35" pos:end="409:78">[<expr pos:start="409:36" pos:end="409:77"><call pos:start="409:36" pos:end="409:77"><name pos:start="409:36" pos:end="409:53">exynos4210_get_irq</name><argument_list pos:start="409:54" pos:end="409:77">(<argument pos:start="409:55" pos:end="409:73"><expr pos:start="409:55" pos:end="409:73"><name pos:start="409:55" pos:end="409:73">EXYNOS4210_I2C_INTG</name></expr></argument>, <argument pos:start="409:76" pos:end="409:76"><expr pos:start="409:76" pos:end="409:76"><name pos:start="409:76" pos:end="409:76">n</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="411:11" pos:end="415:9">else <block pos:start="411:16" pos:end="415:9">{<block_content pos:start="413:13" pos:end="413:80">

            <expr_stmt pos:start="413:13" pos:end="413:80"><expr pos:start="413:13" pos:end="413:79"><name pos:start="413:13" pos:end="413:19">i2c_irq</name> <operator pos:start="413:21" pos:end="413:21">=</operator> <name pos:start="413:23" pos:end="413:79"><name pos:start="413:23" pos:end="413:23">s</name><operator pos:start="413:24" pos:end="413:25">-&gt;</operator><name pos:start="413:26" pos:end="413:34">irq_table</name><index pos:start="413:35" pos:end="413:79">[<expr pos:start="413:36" pos:end="413:78"><call pos:start="413:36" pos:end="413:78"><name pos:start="413:36" pos:end="413:53">exynos4210_get_irq</name><argument_list pos:start="413:54" pos:end="413:78">(<argument pos:start="413:55" pos:end="413:74"><expr pos:start="413:55" pos:end="413:74"><name pos:start="413:55" pos:end="413:74">EXYNOS4210_HDMI_INTG</name></expr></argument>, <argument pos:start="413:77" pos:end="413:77"><expr pos:start="413:77" pos:end="413:77"><literal type="number" pos:start="413:77" pos:end="413:77">1</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="419:9" pos:end="419:50"><expr pos:start="419:9" pos:end="419:49"><name pos:start="419:9" pos:end="419:11">dev</name> <operator pos:start="419:13" pos:end="419:13">=</operator> <call pos:start="419:15" pos:end="419:49"><name pos:start="419:15" pos:end="419:25">qdev_create</name><argument_list pos:start="419:26" pos:end="419:49">(<argument pos:start="419:27" pos:end="419:30"><expr pos:start="419:27" pos:end="419:30"><name pos:start="419:27" pos:end="419:30">NULL</name></expr></argument>, <argument pos:start="419:33" pos:end="419:48"><expr pos:start="419:33" pos:end="419:48"><literal type="string" pos:start="419:33" pos:end="419:48">"exynos4210.i2c"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="421:9" pos:end="421:30"><expr pos:start="421:9" pos:end="421:29"><call pos:start="421:9" pos:end="421:29"><name pos:start="421:9" pos:end="421:24">qdev_init_nofail</name><argument_list pos:start="421:25" pos:end="421:29">(<argument pos:start="421:26" pos:end="421:28"><expr pos:start="421:26" pos:end="421:28"><name pos:start="421:26" pos:end="421:28">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="423:9" pos:end="423:37"><expr pos:start="423:9" pos:end="423:36"><name pos:start="423:9" pos:end="423:14">busdev</name> <operator pos:start="423:16" pos:end="423:16">=</operator> <call pos:start="423:18" pos:end="423:36"><name pos:start="423:18" pos:end="423:31">SYS_BUS_DEVICE</name><argument_list pos:start="423:32" pos:end="423:36">(<argument pos:start="423:33" pos:end="423:35"><expr pos:start="423:33" pos:end="423:35"><name pos:start="423:33" pos:end="423:35">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="425:9" pos:end="425:47"><expr pos:start="425:9" pos:end="425:46"><call pos:start="425:9" pos:end="425:46"><name pos:start="425:9" pos:end="425:26">sysbus_connect_irq</name><argument_list pos:start="425:27" pos:end="425:46">(<argument pos:start="425:28" pos:end="425:33"><expr pos:start="425:28" pos:end="425:33"><name pos:start="425:28" pos:end="425:33">busdev</name></expr></argument>, <argument pos:start="425:36" pos:end="425:36"><expr pos:start="425:36" pos:end="425:36"><literal type="number" pos:start="425:36" pos:end="425:36">0</literal></expr></argument>, <argument pos:start="425:39" pos:end="425:45"><expr pos:start="425:39" pos:end="425:45"><name pos:start="425:39" pos:end="425:45">i2c_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="427:9" pos:end="427:41"><expr pos:start="427:9" pos:end="427:40"><call pos:start="427:9" pos:end="427:40"><name pos:start="427:9" pos:end="427:23">sysbus_mmio_map</name><argument_list pos:start="427:24" pos:end="427:40">(<argument pos:start="427:25" pos:end="427:30"><expr pos:start="427:25" pos:end="427:30"><name pos:start="427:25" pos:end="427:30">busdev</name></expr></argument>, <argument pos:start="427:33" pos:end="427:33"><expr pos:start="427:33" pos:end="427:33"><literal type="number" pos:start="427:33" pos:end="427:33">0</literal></expr></argument>, <argument pos:start="427:36" pos:end="427:39"><expr pos:start="427:36" pos:end="427:39"><name pos:start="427:36" pos:end="427:39">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="429:9" pos:end="429:64"><expr pos:start="429:9" pos:end="429:63"><name pos:start="429:9" pos:end="429:20"><name pos:start="429:9" pos:end="429:9">s</name><operator pos:start="429:10" pos:end="429:11">-&gt;</operator><name pos:start="429:12" pos:end="429:17">i2c_if</name><index pos:start="429:18" pos:end="429:20">[<expr pos:start="429:19" pos:end="429:19"><name pos:start="429:19" pos:end="429:19">n</name></expr>]</index></name> <operator pos:start="429:22" pos:end="429:22">=</operator> <operator pos:start="429:24" pos:end="429:24">(</operator><name pos:start="429:25" pos:end="429:30">I2CBus</name> <operator pos:start="429:32" pos:end="429:32">*</operator><operator pos:start="429:33" pos:end="429:33">)</operator><call pos:start="429:34" pos:end="429:63"><name pos:start="429:34" pos:end="429:51">qdev_get_child_bus</name><argument_list pos:start="429:52" pos:end="429:63">(<argument pos:start="429:53" pos:end="429:55"><expr pos:start="429:53" pos:end="429:55"><name pos:start="429:53" pos:end="429:55">dev</name></expr></argument>, <argument pos:start="429:58" pos:end="429:62"><expr pos:start="429:58" pos:end="429:62"><literal type="string" pos:start="429:58" pos:end="429:62">"i2c"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>





    <comment type="block" format="doxygen" pos:start="437:5" pos:end="437:19">/*** UARTs ***/</comment>

    <expr_stmt pos:start="439:5" pos:end="443:80"><expr pos:start="439:5" pos:end="443:79"><call pos:start="439:5" pos:end="443:79"><name pos:start="439:5" pos:end="439:26">exynos4210_uart_create</name><argument_list pos:start="439:27" pos:end="443:79">(<argument pos:start="439:28" pos:end="439:53"><expr pos:start="439:28" pos:end="439:53"><name pos:start="439:28" pos:end="439:53">EXYNOS4210_UART0_BASE_ADDR</name></expr></argument>,

                           <argument pos:start="441:28" pos:end="441:53"><expr pos:start="441:28" pos:end="441:53"><name pos:start="441:28" pos:end="441:53">EXYNOS4210_UART0_FIFO_SIZE</name></expr></argument>, <argument pos:start="441:56" pos:end="441:56"><expr pos:start="441:56" pos:end="441:56"><literal type="number" pos:start="441:56" pos:end="441:56">0</literal></expr></argument>, <argument pos:start="441:59" pos:end="441:62"><expr pos:start="441:59" pos:end="441:62"><name pos:start="441:59" pos:end="441:62">NULL</name></expr></argument>,

                  <argument pos:start="443:19" pos:end="443:78"><expr pos:start="443:19" pos:end="443:78"><name pos:start="443:19" pos:end="443:78"><name pos:start="443:19" pos:end="443:19">s</name><operator pos:start="443:20" pos:end="443:21">-&gt;</operator><name pos:start="443:22" pos:end="443:30">irq_table</name><index pos:start="443:31" pos:end="443:78">[<expr pos:start="443:32" pos:end="443:77"><call pos:start="443:32" pos:end="443:77"><name pos:start="443:32" pos:end="443:49">exynos4210_get_irq</name><argument_list pos:start="443:50" pos:end="443:77">(<argument pos:start="443:51" pos:end="443:73"><expr pos:start="443:51" pos:end="443:73"><name pos:start="443:51" pos:end="443:73">EXYNOS4210_UART_INT_GRP</name></expr></argument>, <argument pos:start="443:76" pos:end="443:76"><expr pos:start="443:76" pos:end="443:76"><literal type="number" pos:start="443:76" pos:end="443:76">0</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="447:5" pos:end="451:80"><expr pos:start="447:5" pos:end="451:79"><call pos:start="447:5" pos:end="451:79"><name pos:start="447:5" pos:end="447:26">exynos4210_uart_create</name><argument_list pos:start="447:27" pos:end="451:79">(<argument pos:start="447:28" pos:end="447:53"><expr pos:start="447:28" pos:end="447:53"><name pos:start="447:28" pos:end="447:53">EXYNOS4210_UART1_BASE_ADDR</name></expr></argument>,

                           <argument pos:start="449:28" pos:end="449:53"><expr pos:start="449:28" pos:end="449:53"><name pos:start="449:28" pos:end="449:53">EXYNOS4210_UART1_FIFO_SIZE</name></expr></argument>, <argument pos:start="449:56" pos:end="449:56"><expr pos:start="449:56" pos:end="449:56"><literal type="number" pos:start="449:56" pos:end="449:56">1</literal></expr></argument>, <argument pos:start="449:59" pos:end="449:62"><expr pos:start="449:59" pos:end="449:62"><name pos:start="449:59" pos:end="449:62">NULL</name></expr></argument>,

                  <argument pos:start="451:19" pos:end="451:78"><expr pos:start="451:19" pos:end="451:78"><name pos:start="451:19" pos:end="451:78"><name pos:start="451:19" pos:end="451:19">s</name><operator pos:start="451:20" pos:end="451:21">-&gt;</operator><name pos:start="451:22" pos:end="451:30">irq_table</name><index pos:start="451:31" pos:end="451:78">[<expr pos:start="451:32" pos:end="451:77"><call pos:start="451:32" pos:end="451:77"><name pos:start="451:32" pos:end="451:49">exynos4210_get_irq</name><argument_list pos:start="451:50" pos:end="451:77">(<argument pos:start="451:51" pos:end="451:73"><expr pos:start="451:51" pos:end="451:73"><name pos:start="451:51" pos:end="451:73">EXYNOS4210_UART_INT_GRP</name></expr></argument>, <argument pos:start="451:76" pos:end="451:76"><expr pos:start="451:76" pos:end="451:76"><literal type="number" pos:start="451:76" pos:end="451:76">1</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="455:5" pos:end="459:80"><expr pos:start="455:5" pos:end="459:79"><call pos:start="455:5" pos:end="459:79"><name pos:start="455:5" pos:end="455:26">exynos4210_uart_create</name><argument_list pos:start="455:27" pos:end="459:79">(<argument pos:start="455:28" pos:end="455:53"><expr pos:start="455:28" pos:end="455:53"><name pos:start="455:28" pos:end="455:53">EXYNOS4210_UART2_BASE_ADDR</name></expr></argument>,

                           <argument pos:start="457:28" pos:end="457:53"><expr pos:start="457:28" pos:end="457:53"><name pos:start="457:28" pos:end="457:53">EXYNOS4210_UART2_FIFO_SIZE</name></expr></argument>, <argument pos:start="457:56" pos:end="457:56"><expr pos:start="457:56" pos:end="457:56"><literal type="number" pos:start="457:56" pos:end="457:56">2</literal></expr></argument>, <argument pos:start="457:59" pos:end="457:62"><expr pos:start="457:59" pos:end="457:62"><name pos:start="457:59" pos:end="457:62">NULL</name></expr></argument>,

                  <argument pos:start="459:19" pos:end="459:78"><expr pos:start="459:19" pos:end="459:78"><name pos:start="459:19" pos:end="459:78"><name pos:start="459:19" pos:end="459:19">s</name><operator pos:start="459:20" pos:end="459:21">-&gt;</operator><name pos:start="459:22" pos:end="459:30">irq_table</name><index pos:start="459:31" pos:end="459:78">[<expr pos:start="459:32" pos:end="459:77"><call pos:start="459:32" pos:end="459:77"><name pos:start="459:32" pos:end="459:49">exynos4210_get_irq</name><argument_list pos:start="459:50" pos:end="459:77">(<argument pos:start="459:51" pos:end="459:73"><expr pos:start="459:51" pos:end="459:73"><name pos:start="459:51" pos:end="459:73">EXYNOS4210_UART_INT_GRP</name></expr></argument>, <argument pos:start="459:76" pos:end="459:76"><expr pos:start="459:76" pos:end="459:76"><literal type="number" pos:start="459:76" pos:end="459:76">2</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="463:5" pos:end="467:80"><expr pos:start="463:5" pos:end="467:79"><call pos:start="463:5" pos:end="467:79"><name pos:start="463:5" pos:end="463:26">exynos4210_uart_create</name><argument_list pos:start="463:27" pos:end="467:79">(<argument pos:start="463:28" pos:end="463:53"><expr pos:start="463:28" pos:end="463:53"><name pos:start="463:28" pos:end="463:53">EXYNOS4210_UART3_BASE_ADDR</name></expr></argument>,

                           <argument pos:start="465:28" pos:end="465:53"><expr pos:start="465:28" pos:end="465:53"><name pos:start="465:28" pos:end="465:53">EXYNOS4210_UART3_FIFO_SIZE</name></expr></argument>, <argument pos:start="465:56" pos:end="465:56"><expr pos:start="465:56" pos:end="465:56"><literal type="number" pos:start="465:56" pos:end="465:56">3</literal></expr></argument>, <argument pos:start="465:59" pos:end="465:62"><expr pos:start="465:59" pos:end="465:62"><name pos:start="465:59" pos:end="465:62">NULL</name></expr></argument>,

                  <argument pos:start="467:19" pos:end="467:78"><expr pos:start="467:19" pos:end="467:78"><name pos:start="467:19" pos:end="467:78"><name pos:start="467:19" pos:end="467:19">s</name><operator pos:start="467:20" pos:end="467:21">-&gt;</operator><name pos:start="467:22" pos:end="467:30">irq_table</name><index pos:start="467:31" pos:end="467:78">[<expr pos:start="467:32" pos:end="467:77"><call pos:start="467:32" pos:end="467:77"><name pos:start="467:32" pos:end="467:49">exynos4210_get_irq</name><argument_list pos:start="467:50" pos:end="467:77">(<argument pos:start="467:51" pos:end="467:73"><expr pos:start="467:51" pos:end="467:73"><name pos:start="467:51" pos:end="467:73">EXYNOS4210_UART_INT_GRP</name></expr></argument>, <argument pos:start="467:76" pos:end="467:76"><expr pos:start="467:76" pos:end="467:76"><literal type="number" pos:start="467:76" pos:end="467:76">3</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" format="doxygen" pos:start="471:5" pos:end="471:39">/*** Display controller (FIMD) ***/</comment>

    <expr_stmt pos:start="473:5" pos:end="481:18"><expr pos:start="473:5" pos:end="481:17"><call pos:start="473:5" pos:end="481:17"><name pos:start="473:5" pos:end="473:25">sysbus_create_varargs</name><argument_list pos:start="473:26" pos:end="481:17">(<argument pos:start="473:27" pos:end="473:43"><expr pos:start="473:27" pos:end="473:43"><literal type="string" pos:start="473:27" pos:end="473:43">"exynos4210.fimd"</literal></expr></argument>, <argument pos:start="473:46" pos:end="473:71"><expr pos:start="473:46" pos:end="473:71"><name pos:start="473:46" pos:end="473:71">EXYNOS4210_FIMD0_BASE_ADDR</name></expr></argument>,

            <argument pos:start="475:13" pos:end="475:51"><expr pos:start="475:13" pos:end="475:51"><name pos:start="475:13" pos:end="475:51"><name pos:start="475:13" pos:end="475:13">s</name><operator pos:start="475:14" pos:end="475:15">-&gt;</operator><name pos:start="475:16" pos:end="475:24">irq_table</name><index pos:start="475:25" pos:end="475:51">[<expr pos:start="475:26" pos:end="475:50"><call pos:start="475:26" pos:end="475:50"><name pos:start="475:26" pos:end="475:43">exynos4210_get_irq</name><argument_list pos:start="475:44" pos:end="475:50">(<argument pos:start="475:45" pos:end="475:46"><expr pos:start="475:45" pos:end="475:46"><literal type="number" pos:start="475:45" pos:end="475:46">11</literal></expr></argument>, <argument pos:start="475:49" pos:end="475:49"><expr pos:start="475:49" pos:end="475:49"><literal type="number" pos:start="475:49" pos:end="475:49">0</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,

            <argument pos:start="477:13" pos:end="477:51"><expr pos:start="477:13" pos:end="477:51"><name pos:start="477:13" pos:end="477:51"><name pos:start="477:13" pos:end="477:13">s</name><operator pos:start="477:14" pos:end="477:15">-&gt;</operator><name pos:start="477:16" pos:end="477:24">irq_table</name><index pos:start="477:25" pos:end="477:51">[<expr pos:start="477:26" pos:end="477:50"><call pos:start="477:26" pos:end="477:50"><name pos:start="477:26" pos:end="477:43">exynos4210_get_irq</name><argument_list pos:start="477:44" pos:end="477:50">(<argument pos:start="477:45" pos:end="477:46"><expr pos:start="477:45" pos:end="477:46"><literal type="number" pos:start="477:45" pos:end="477:46">11</literal></expr></argument>, <argument pos:start="477:49" pos:end="477:49"><expr pos:start="477:49" pos:end="477:49"><literal type="number" pos:start="477:49" pos:end="477:49">1</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,

            <argument pos:start="479:13" pos:end="479:51"><expr pos:start="479:13" pos:end="479:51"><name pos:start="479:13" pos:end="479:51"><name pos:start="479:13" pos:end="479:13">s</name><operator pos:start="479:14" pos:end="479:15">-&gt;</operator><name pos:start="479:16" pos:end="479:24">irq_table</name><index pos:start="479:25" pos:end="479:51">[<expr pos:start="479:26" pos:end="479:50"><call pos:start="479:26" pos:end="479:50"><name pos:start="479:26" pos:end="479:43">exynos4210_get_irq</name><argument_list pos:start="479:44" pos:end="479:50">(<argument pos:start="479:45" pos:end="479:46"><expr pos:start="479:45" pos:end="479:46"><literal type="number" pos:start="479:45" pos:end="479:46">11</literal></expr></argument>, <argument pos:start="479:49" pos:end="479:49"><expr pos:start="479:49" pos:end="479:49"><literal type="number" pos:start="479:49" pos:end="479:49">2</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,

            <argument pos:start="481:13" pos:end="481:16"><expr pos:start="481:13" pos:end="481:16"><name pos:start="481:13" pos:end="481:16">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="485:5" pos:end="487:53"><expr pos:start="485:5" pos:end="487:52"><call pos:start="485:5" pos:end="487:52"><name pos:start="485:5" pos:end="485:24">sysbus_create_simple</name><argument_list pos:start="485:25" pos:end="487:52">(<argument pos:start="485:26" pos:end="485:45"><expr pos:start="485:26" pos:end="485:45"><name pos:start="485:26" pos:end="485:45">TYPE_EXYNOS4210_EHCI</name></expr></argument>, <argument pos:start="485:48" pos:end="485:72"><expr pos:start="485:48" pos:end="485:72"><name pos:start="485:48" pos:end="485:72">EXYNOS4210_EHCI_BASE_ADDR</name></expr></argument>,

            <argument pos:start="487:13" pos:end="487:51"><expr pos:start="487:13" pos:end="487:51"><name pos:start="487:13" pos:end="487:51"><name pos:start="487:13" pos:end="487:13">s</name><operator pos:start="487:14" pos:end="487:15">-&gt;</operator><name pos:start="487:16" pos:end="487:24">irq_table</name><index pos:start="487:25" pos:end="487:51">[<expr pos:start="487:26" pos:end="487:50"><call pos:start="487:26" pos:end="487:50"><name pos:start="487:26" pos:end="487:43">exynos4210_get_irq</name><argument_list pos:start="487:44" pos:end="487:50">(<argument pos:start="487:45" pos:end="487:46"><expr pos:start="487:45" pos:end="487:46"><literal type="number" pos:start="487:45" pos:end="487:46">28</literal></expr></argument>, <argument pos:start="487:49" pos:end="487:49"><expr pos:start="487:49" pos:end="487:49"><literal type="number" pos:start="487:49" pos:end="487:49">3</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="491:5" pos:end="491:13">return <expr pos:start="491:12" pos:end="491:12"><name pos:start="491:12" pos:end="491:12">s</name></expr>;</return>

</block_content>}</block></function>
</unit>
