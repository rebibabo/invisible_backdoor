<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13111.c" pos:tabs="8"><function pos:start="1:1" pos:end="41:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:25">av_fifo_generic_write</name><parameter_list pos:start="1:26" pos:end="1:95">(<parameter pos:start="1:27" pos:end="1:41"><decl pos:start="1:27" pos:end="1:41"><type pos:start="1:27" pos:end="1:41"><name pos:start="1:27" pos:end="1:38">AVFifoBuffer</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:41">f</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:52"><decl pos:start="1:44" pos:end="1:52"><type pos:start="1:44" pos:end="1:52"><name pos:start="1:44" pos:end="1:47">void</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:52">src</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:62"><decl pos:start="1:55" pos:end="1:62"><type pos:start="1:55" pos:end="1:62"><name pos:start="1:55" pos:end="1:57">int</name></type> <name pos:start="1:59" pos:end="1:62">size</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:94"><function_decl pos:start="1:65" pos:end="1:94"><type pos:start="1:65" pos:end="1:67"><name pos:start="1:65" pos:end="1:67">int</name></type> (<modifier pos:start="1:70" pos:end="1:70">*</modifier><name pos:start="1:71" pos:end="1:74">func</name>)<parameter_list pos:start="1:76" pos:end="1:94">(<parameter pos:start="1:77" pos:end="1:81"><decl pos:start="1:77" pos:end="1:81"><type pos:start="1:77" pos:end="1:81"><name pos:start="1:77" pos:end="1:80">void</name><modifier pos:start="1:81" pos:end="1:81">*</modifier></type></decl></parameter>, <parameter pos:start="1:84" pos:end="1:88"><decl pos:start="1:84" pos:end="1:88"><type pos:start="1:84" pos:end="1:88"><name pos:start="1:84" pos:end="1:87">void</name><modifier pos:start="1:88" pos:end="1:88">*</modifier></type></decl></parameter>, <parameter pos:start="1:91" pos:end="1:93"><decl pos:start="1:91" pos:end="1:93"><type pos:start="1:91" pos:end="1:93"><name pos:start="1:91" pos:end="1:93">int</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="41:1">{<block_content pos:start="5:5" pos:end="39:24">

    <decl_stmt pos:start="5:5" pos:end="5:21"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:13">total</name> <init pos:start="5:15" pos:end="5:20">= <expr pos:start="5:17" pos:end="5:20"><name pos:start="5:17" pos:end="5:20">size</name></expr></init></decl>;</decl_stmt>

    <do pos:start="7:5" pos:end="37:23">do <block pos:start="7:8" pos:end="37:5">{<block_content pos:start="9:9" pos:end="35:20">

        <decl_stmt pos:start="9:9" pos:end="9:48"><decl pos:start="9:9" pos:end="9:47"><type pos:start="9:9" pos:end="9:11"><name pos:start="9:9" pos:end="9:11">int</name></type> <name pos:start="9:13" pos:end="9:15">len</name> <init pos:start="9:17" pos:end="9:47">= <expr pos:start="9:19" pos:end="9:47"><call pos:start="9:19" pos:end="9:47"><name pos:start="9:19" pos:end="9:23">FFMIN</name><argument_list pos:start="9:24" pos:end="9:47">(<argument pos:start="9:25" pos:end="9:40"><expr pos:start="9:25" pos:end="9:40"><name pos:start="9:25" pos:end="9:30"><name pos:start="9:25" pos:end="9:25">f</name><operator pos:start="9:26" pos:end="9:27">-&gt;</operator><name pos:start="9:28" pos:end="9:30">end</name></name> <operator pos:start="9:32" pos:end="9:32">-</operator> <name pos:start="9:34" pos:end="9:40"><name pos:start="9:34" pos:end="9:34">f</name><operator pos:start="9:35" pos:end="9:36">-&gt;</operator><name pos:start="9:37" pos:end="9:40">wptr</name></name></expr></argument>, <argument pos:start="9:43" pos:end="9:46"><expr pos:start="9:43" pos:end="9:46"><name pos:start="9:43" pos:end="9:46">size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="11:9" pos:end="23:9"><if pos:start="11:9" pos:end="17:9">if <condition pos:start="11:12" pos:end="11:17">(<expr pos:start="11:13" pos:end="11:16"><name pos:start="11:13" pos:end="11:16">func</name></expr>)</condition> <block pos:start="11:19" pos:end="17:9">{<block_content pos:start="13:13" pos:end="15:22">

            <if_stmt pos:start="13:13" pos:end="15:22"><if pos:start="13:13" pos:end="15:22">if <condition pos:start="13:16" pos:end="13:45">(<expr pos:start="13:17" pos:end="13:44"><call pos:start="13:17" pos:end="13:39"><name pos:start="13:17" pos:end="13:20">func</name><argument_list pos:start="13:21" pos:end="13:39">(<argument pos:start="13:22" pos:end="13:24"><expr pos:start="13:22" pos:end="13:24"><name pos:start="13:22" pos:end="13:24">src</name></expr></argument>, <argument pos:start="13:27" pos:end="13:33"><expr pos:start="13:27" pos:end="13:33"><name pos:start="13:27" pos:end="13:33"><name pos:start="13:27" pos:end="13:27">f</name><operator pos:start="13:28" pos:end="13:29">-&gt;</operator><name pos:start="13:30" pos:end="13:33">wptr</name></name></expr></argument>, <argument pos:start="13:36" pos:end="13:38"><expr pos:start="13:36" pos:end="13:38"><name pos:start="13:36" pos:end="13:38">len</name></expr></argument>)</argument_list></call> <operator pos:start="13:41" pos:end="13:42">&lt;=</operator> <literal type="number" pos:start="13:44" pos:end="13:44">0</literal></expr>)</condition><block type="pseudo" pos:start="15:17" pos:end="15:22"><block_content pos:start="15:17" pos:end="15:22">

                <break pos:start="15:17" pos:end="15:22">break;</break></block_content></block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="17:11" pos:end="23:9">else <block pos:start="17:16" pos:end="23:9">{<block_content pos:start="19:13" pos:end="21:38">

            <expr_stmt pos:start="19:13" pos:end="19:38"><expr pos:start="19:13" pos:end="19:37"><call pos:start="19:13" pos:end="19:37"><name pos:start="19:13" pos:end="19:18">memcpy</name><argument_list pos:start="19:19" pos:end="19:37">(<argument pos:start="19:20" pos:end="19:26"><expr pos:start="19:20" pos:end="19:26"><name pos:start="19:20" pos:end="19:26"><name pos:start="19:20" pos:end="19:20">f</name><operator pos:start="19:21" pos:end="19:22">-&gt;</operator><name pos:start="19:23" pos:end="19:26">wptr</name></name></expr></argument>, <argument pos:start="19:29" pos:end="19:31"><expr pos:start="19:29" pos:end="19:31"><name pos:start="19:29" pos:end="19:31">src</name></expr></argument>, <argument pos:start="19:34" pos:end="19:36"><expr pos:start="19:34" pos:end="19:36"><name pos:start="19:34" pos:end="19:36">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="21:13" pos:end="21:38"><expr pos:start="21:13" pos:end="21:37"><name pos:start="21:13" pos:end="21:15">src</name> <operator pos:start="21:17" pos:end="21:17">=</operator> <operator pos:start="21:19" pos:end="21:19">(</operator><name pos:start="21:20" pos:end="21:26">uint8_t</name><operator pos:start="21:27" pos:end="21:27">*</operator><operator pos:start="21:28" pos:end="21:28">)</operator><name pos:start="21:29" pos:end="21:31">src</name> <operator pos:start="21:33" pos:end="21:33">+</operator> <name pos:start="21:35" pos:end="21:37">len</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

<comment type="line" pos:start="25:1" pos:end="25:53">// Write memory barrier needed for SMP here in theory</comment>

        <expr_stmt pos:start="27:9" pos:end="27:23"><expr pos:start="27:9" pos:end="27:22"><name pos:start="27:9" pos:end="27:15"><name pos:start="27:9" pos:end="27:9">f</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:15">wptr</name></name> <operator pos:start="27:17" pos:end="27:18">+=</operator> <name pos:start="27:20" pos:end="27:22">len</name></expr>;</expr_stmt>

        <if_stmt pos:start="29:9" pos:end="31:32"><if pos:start="29:9" pos:end="31:32">if <condition pos:start="29:12" pos:end="29:30">(<expr pos:start="29:13" pos:end="29:29"><name pos:start="29:13" pos:end="29:19"><name pos:start="29:13" pos:end="29:13">f</name><operator pos:start="29:14" pos:end="29:15">-&gt;</operator><name pos:start="29:16" pos:end="29:19">wptr</name></name> <operator pos:start="29:21" pos:end="29:22">&gt;=</operator> <name pos:start="29:24" pos:end="29:29"><name pos:start="29:24" pos:end="29:24">f</name><operator pos:start="29:25" pos:end="29:26">-&gt;</operator><name pos:start="29:27" pos:end="29:29">end</name></name></expr>)</condition><block type="pseudo" pos:start="31:13" pos:end="31:32"><block_content pos:start="31:13" pos:end="31:32">

            <expr_stmt pos:start="31:13" pos:end="31:32"><expr pos:start="31:13" pos:end="31:31"><name pos:start="31:13" pos:end="31:19"><name pos:start="31:13" pos:end="31:13">f</name><operator pos:start="31:14" pos:end="31:15">-&gt;</operator><name pos:start="31:16" pos:end="31:19">wptr</name></name> <operator pos:start="31:21" pos:end="31:21">=</operator> <name pos:start="31:23" pos:end="31:31"><name pos:start="31:23" pos:end="31:23">f</name><operator pos:start="31:24" pos:end="31:25">-&gt;</operator><name pos:start="31:26" pos:end="31:31">buffer</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:23"><expr pos:start="33:9" pos:end="33:22"><name pos:start="33:9" pos:end="33:15"><name pos:start="33:9" pos:end="33:9">f</name><operator pos:start="33:10" pos:end="33:11">-&gt;</operator><name pos:start="33:12" pos:end="33:15">wndx</name></name> <operator pos:start="33:17" pos:end="33:18">+=</operator> <name pos:start="33:20" pos:end="33:22">len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:20"><expr pos:start="35:9" pos:end="35:19"><name pos:start="35:9" pos:end="35:12">size</name> <operator pos:start="35:14" pos:end="35:15">-=</operator> <name pos:start="35:17" pos:end="35:19">len</name></expr>;</expr_stmt>

    </block_content>}</block> while <condition pos:start="37:13" pos:end="37:22">(<expr pos:start="37:14" pos:end="37:21"><name pos:start="37:14" pos:end="37:17">size</name> <operator pos:start="37:19" pos:end="37:19">&gt;</operator> <literal type="number" pos:start="37:21" pos:end="37:21">0</literal></expr>)</condition>;</do>

    <return pos:start="39:5" pos:end="39:24">return <expr pos:start="39:12" pos:end="39:23"><name pos:start="39:12" pos:end="39:16">total</name> <operator pos:start="39:18" pos:end="39:18">-</operator> <name pos:start="39:20" pos:end="39:23">size</name></expr>;</return>

</block_content>}</block></function>
</unit>
