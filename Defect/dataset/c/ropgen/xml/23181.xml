<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23181.c" pos:tabs="8"><function pos:start="1:1" pos:end="149:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:33">exynos4210_uart_write</name><parameter_list pos:start="1:34" pos:end="3:59">(<parameter pos:start="1:35" pos:end="1:46"><decl pos:start="1:35" pos:end="1:46"><type pos:start="1:35" pos:end="1:46"><name pos:start="1:35" pos:end="1:38">void</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:46">opaque</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:73"><decl pos:start="1:49" pos:end="1:73"><type pos:start="1:49" pos:end="1:73"><name pos:start="1:49" pos:end="1:66">target_phys_addr_t</name></type> <name pos:start="1:68" pos:end="1:73">offset</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:43"><decl pos:start="3:32" pos:end="3:43"><type pos:start="3:32" pos:end="3:43"><name pos:start="3:32" pos:end="3:39">uint64_t</name></type> <name pos:start="3:41" pos:end="3:43">val</name></decl></parameter>, <parameter pos:start="3:46" pos:end="3:58"><decl pos:start="3:46" pos:end="3:58"><type pos:start="3:46" pos:end="3:58"><name pos:start="3:46" pos:end="3:53">unsigned</name></type> <name pos:start="3:55" pos:end="3:58">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="149:1">{<block_content pos:start="7:5" pos:end="147:5">

    <decl_stmt pos:start="7:5" pos:end="7:59"><decl pos:start="7:5" pos:end="7:58"><type pos:start="7:5" pos:end="7:25"><name pos:start="7:5" pos:end="7:23">Exynos4210UartState</name> <modifier pos:start="7:25" pos:end="7:25">*</modifier></type><name pos:start="7:26" pos:end="7:26">s</name> <init pos:start="7:28" pos:end="7:58">= <expr pos:start="7:30" pos:end="7:58"><operator pos:start="7:30" pos:end="7:30">(</operator><name pos:start="7:31" pos:end="7:49">Exynos4210UartState</name> <operator pos:start="7:51" pos:end="7:51">*</operator><operator pos:start="7:52" pos:end="7:52">)</operator><name pos:start="7:53" pos:end="7:58">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:15"><decl pos:start="9:5" pos:end="9:14"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">uint8_t</name></type> <name pos:start="9:13" pos:end="9:14">ch</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="15:78"><expr pos:start="13:5" pos:end="15:77"><call pos:start="13:5" pos:end="15:77"><name pos:start="13:5" pos:end="13:22">PRINT_DEBUG_EXTEND</name><argument_list pos:start="13:23" pos:end="15:77">(<argument pos:start="13:24" pos:end="13:58"><expr pos:start="13:24" pos:end="13:58"><literal type="string" pos:start="13:24" pos:end="13:58">"UART%d: &lt;0x%04x&gt; %s &lt;- 0x%08llx\n"</literal></expr></argument>, <argument pos:start="13:61" pos:end="13:70"><expr pos:start="13:61" pos:end="13:70"><name pos:start="13:61" pos:end="13:70"><name pos:start="13:61" pos:end="13:61">s</name><operator pos:start="13:62" pos:end="13:63">-&gt;</operator><name pos:start="13:64" pos:end="13:70">channel</name></name></expr></argument>,

        <argument pos:start="15:9" pos:end="15:14"><expr pos:start="15:9" pos:end="15:14"><name pos:start="15:9" pos:end="15:14">offset</name></expr></argument>, <argument pos:start="15:17" pos:end="15:47"><expr pos:start="15:17" pos:end="15:47"><call pos:start="15:17" pos:end="15:47"><name pos:start="15:17" pos:end="15:39">exynos4210_uart_regname</name><argument_list pos:start="15:40" pos:end="15:47">(<argument pos:start="15:41" pos:end="15:46"><expr pos:start="15:41" pos:end="15:46"><name pos:start="15:41" pos:end="15:46">offset</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="15:50" pos:end="15:76"><expr pos:start="15:50" pos:end="15:76"><operator pos:start="15:50" pos:end="15:50">(</operator><name pos:start="15:51" pos:end="15:54">long</name> <name pos:start="15:56" pos:end="15:59">long</name> <name pos:start="15:61" pos:end="15:68">unsigned</name> <name pos:start="15:70" pos:end="15:72">int</name><operator pos:start="15:73" pos:end="15:73">)</operator><name pos:start="15:74" pos:end="15:76">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="19:5" pos:end="147:5">switch <condition pos:start="19:12" pos:end="19:19">(<expr pos:start="19:13" pos:end="19:18"><name pos:start="19:13" pos:end="19:18">offset</name></expr>)</condition> <block pos:start="19:21" pos:end="147:5">{<block_content pos:start="21:5" pos:end="145:14">

    <case pos:start="21:5" pos:end="21:15">case <expr pos:start="21:10" pos:end="21:14"><name pos:start="21:10" pos:end="21:14">ULCON</name></expr>:</case>

    <case pos:start="23:5" pos:end="23:16">case <expr pos:start="23:10" pos:end="23:15"><name pos:start="23:10" pos:end="23:15">UBRDIV</name></expr>:</case>

    <case pos:start="25:5" pos:end="25:18">case <expr pos:start="25:10" pos:end="25:17"><name pos:start="25:10" pos:end="25:17">UFRACVAL</name></expr>:</case>

        <expr_stmt pos:start="27:9" pos:end="27:33"><expr pos:start="27:9" pos:end="27:32"><name pos:start="27:9" pos:end="27:26"><name pos:start="27:9" pos:end="27:9">s</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:14">reg</name><index pos:start="27:15" pos:end="27:26">[<expr pos:start="27:16" pos:end="27:25"><call pos:start="27:16" pos:end="27:25"><name pos:start="27:16" pos:end="27:17">I_</name><argument_list pos:start="27:18" pos:end="27:25">(<argument pos:start="27:19" pos:end="27:24"><expr pos:start="27:19" pos:end="27:24"><name pos:start="27:19" pos:end="27:24">offset</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator pos:start="27:28" pos:end="27:28">=</operator> <name pos:start="27:30" pos:end="27:32">val</name></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:45"><expr pos:start="29:9" pos:end="29:44"><call pos:start="29:9" pos:end="29:44"><name pos:start="29:9" pos:end="29:41">exynos4210_uart_update_parameters</name><argument_list pos:start="29:42" pos:end="29:44">(<argument pos:start="29:43" pos:end="29:43"><expr pos:start="29:43" pos:end="29:43"><name pos:start="29:43" pos:end="29:43">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="31:9" pos:end="31:14">break;</break>

    <case pos:start="33:5" pos:end="33:15">case <expr pos:start="33:10" pos:end="33:14"><name pos:start="33:10" pos:end="33:14">UFCON</name></expr>:</case>

        <expr_stmt pos:start="35:9" pos:end="35:32"><expr pos:start="35:9" pos:end="35:31"><name pos:start="35:9" pos:end="35:25"><name pos:start="35:9" pos:end="35:9">s</name><operator pos:start="35:10" pos:end="35:11">-&gt;</operator><name pos:start="35:12" pos:end="35:14">reg</name><index pos:start="35:15" pos:end="35:25">[<expr pos:start="35:16" pos:end="35:24"><call pos:start="35:16" pos:end="35:24"><name pos:start="35:16" pos:end="35:17">I_</name><argument_list pos:start="35:18" pos:end="35:24">(<argument pos:start="35:19" pos:end="35:23"><expr pos:start="35:19" pos:end="35:23"><name pos:start="35:19" pos:end="35:23">UFCON</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator pos:start="35:27" pos:end="35:27">=</operator> <name pos:start="35:29" pos:end="35:31">val</name></expr>;</expr_stmt>

        <if_stmt pos:start="37:9" pos:end="45:9"><if pos:start="37:9" pos:end="45:9">if <condition pos:start="37:12" pos:end="37:38">(<expr pos:start="37:13" pos:end="37:37"><name pos:start="37:13" pos:end="37:15">val</name> <operator pos:start="37:17" pos:end="37:17">&amp;</operator> <name pos:start="37:19" pos:end="37:37">UFCON_Rx_FIFO_RESET</name></expr>)</condition> <block pos:start="37:40" pos:end="45:9">{<block_content pos:start="39:13" pos:end="43:63">

            <expr_stmt pos:start="39:13" pos:end="39:31"><expr pos:start="39:13" pos:end="39:30"><call pos:start="39:13" pos:end="39:30"><name pos:start="39:13" pos:end="39:22">fifo_reset</name><argument_list pos:start="39:23" pos:end="39:30">(<argument pos:start="39:24" pos:end="39:29"><expr pos:start="39:24" pos:end="39:29"><operator pos:start="39:24" pos:end="39:24">&amp;</operator><name pos:start="39:25" pos:end="39:29"><name pos:start="39:25" pos:end="39:25">s</name><operator pos:start="39:26" pos:end="39:27">-&gt;</operator><name pos:start="39:28" pos:end="39:29">rx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:54"><expr pos:start="41:13" pos:end="41:53"><name pos:start="41:13" pos:end="41:29"><name pos:start="41:13" pos:end="41:13">s</name><operator pos:start="41:14" pos:end="41:15">-&gt;</operator><name pos:start="41:16" pos:end="41:18">reg</name><index pos:start="41:19" pos:end="41:29">[<expr pos:start="41:20" pos:end="41:28"><call pos:start="41:20" pos:end="41:28"><name pos:start="41:20" pos:end="41:21">I_</name><argument_list pos:start="41:22" pos:end="41:28">(<argument pos:start="41:23" pos:end="41:27"><expr pos:start="41:23" pos:end="41:27"><name pos:start="41:23" pos:end="41:27">UFCON</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator pos:start="41:31" pos:end="41:32">&amp;=</operator> <operator pos:start="41:34" pos:end="41:34">~</operator><name pos:start="41:35" pos:end="41:53">UFCON_Rx_FIFO_RESET</name></expr>;</expr_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:63"><expr pos:start="43:13" pos:end="43:62"><call pos:start="43:13" pos:end="43:62"><name pos:start="43:13" pos:end="43:23">PRINT_DEBUG</name><argument_list pos:start="43:24" pos:end="43:62">(<argument pos:start="43:25" pos:end="43:49"><expr pos:start="43:25" pos:end="43:49"><literal type="string" pos:start="43:25" pos:end="43:49">"UART%d: Rx FIFO Reset\n"</literal></expr></argument>, <argument pos:start="43:52" pos:end="43:61"><expr pos:start="43:52" pos:end="43:61"><name pos:start="43:52" pos:end="43:61"><name pos:start="43:52" pos:end="43:52">s</name><operator pos:start="43:53" pos:end="43:54">-&gt;</operator><name pos:start="43:55" pos:end="43:61">channel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="47:9" pos:end="55:9"><if pos:start="47:9" pos:end="55:9">if <condition pos:start="47:12" pos:end="47:38">(<expr pos:start="47:13" pos:end="47:37"><name pos:start="47:13" pos:end="47:15">val</name> <operator pos:start="47:17" pos:end="47:17">&amp;</operator> <name pos:start="47:19" pos:end="47:37">UFCON_Tx_FIFO_RESET</name></expr>)</condition> <block pos:start="47:40" pos:end="55:9">{<block_content pos:start="49:13" pos:end="53:63">

            <expr_stmt pos:start="49:13" pos:end="49:31"><expr pos:start="49:13" pos:end="49:30"><call pos:start="49:13" pos:end="49:30"><name pos:start="49:13" pos:end="49:22">fifo_reset</name><argument_list pos:start="49:23" pos:end="49:30">(<argument pos:start="49:24" pos:end="49:29"><expr pos:start="49:24" pos:end="49:29"><operator pos:start="49:24" pos:end="49:24">&amp;</operator><name pos:start="49:25" pos:end="49:29"><name pos:start="49:25" pos:end="49:25">s</name><operator pos:start="49:26" pos:end="49:27">-&gt;</operator><name pos:start="49:28" pos:end="49:29">tx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:54"><expr pos:start="51:13" pos:end="51:53"><name pos:start="51:13" pos:end="51:29"><name pos:start="51:13" pos:end="51:13">s</name><operator pos:start="51:14" pos:end="51:15">-&gt;</operator><name pos:start="51:16" pos:end="51:18">reg</name><index pos:start="51:19" pos:end="51:29">[<expr pos:start="51:20" pos:end="51:28"><call pos:start="51:20" pos:end="51:28"><name pos:start="51:20" pos:end="51:21">I_</name><argument_list pos:start="51:22" pos:end="51:28">(<argument pos:start="51:23" pos:end="51:27"><expr pos:start="51:23" pos:end="51:27"><name pos:start="51:23" pos:end="51:27">UFCON</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator pos:start="51:31" pos:end="51:32">&amp;=</operator> <operator pos:start="51:34" pos:end="51:34">~</operator><name pos:start="51:35" pos:end="51:53">UFCON_Tx_FIFO_RESET</name></expr>;</expr_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:63"><expr pos:start="53:13" pos:end="53:62"><call pos:start="53:13" pos:end="53:62"><name pos:start="53:13" pos:end="53:23">PRINT_DEBUG</name><argument_list pos:start="53:24" pos:end="53:62">(<argument pos:start="53:25" pos:end="53:49"><expr pos:start="53:25" pos:end="53:49"><literal type="string" pos:start="53:25" pos:end="53:49">"UART%d: Tx FIFO Reset\n"</literal></expr></argument>, <argument pos:start="53:52" pos:end="53:61"><expr pos:start="53:52" pos:end="53:61"><name pos:start="53:52" pos:end="53:61"><name pos:start="53:52" pos:end="53:52">s</name><operator pos:start="53:53" pos:end="53:54">-&gt;</operator><name pos:start="53:55" pos:end="53:61">channel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="57:9" pos:end="57:14">break;</break>



    <case pos:start="61:5" pos:end="61:14">case <expr pos:start="61:10" pos:end="61:13"><name pos:start="61:10" pos:end="61:13">UTXH</name></expr>:</case>

        <if_stmt pos:start="63:9" pos:end="87:9"><if pos:start="63:9" pos:end="87:9">if <condition pos:start="63:12" pos:end="63:19">(<expr pos:start="63:13" pos:end="63:18"><name pos:start="63:13" pos:end="63:18"><name pos:start="63:13" pos:end="63:13">s</name><operator pos:start="63:14" pos:end="63:15">-&gt;</operator><name pos:start="63:16" pos:end="63:18">chr</name></name></expr>)</condition> <block pos:start="63:21" pos:end="87:9">{<block_content pos:start="65:13" pos:end="85:42">

            <expr_stmt pos:start="65:13" pos:end="67:45"><expr pos:start="65:13" pos:end="67:44"><name pos:start="65:13" pos:end="65:31"><name pos:start="65:13" pos:end="65:13">s</name><operator pos:start="65:14" pos:end="65:15">-&gt;</operator><name pos:start="65:16" pos:end="65:18">reg</name><index pos:start="65:19" pos:end="65:31">[<expr pos:start="65:20" pos:end="65:30"><call pos:start="65:20" pos:end="65:30"><name pos:start="65:20" pos:end="65:21">I_</name><argument_list pos:start="65:22" pos:end="65:30">(<argument pos:start="65:23" pos:end="65:29"><expr pos:start="65:23" pos:end="65:29"><name pos:start="65:23" pos:end="65:29">UTRSTAT</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator pos:start="65:33" pos:end="65:34">&amp;=</operator> <operator pos:start="65:36" pos:end="65:36">~</operator><operator pos:start="65:37" pos:end="65:37">(</operator><name pos:start="65:38" pos:end="65:62">UTRSTAT_TRANSMITTER_EMPTY</name> <operator pos:start="65:64" pos:end="65:64">|</operator>

                    <name pos:start="67:21" pos:end="67:43">UTRSTAT_Tx_BUFFER_EMPTY</name><operator pos:start="67:44" pos:end="67:44">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:30"><expr pos:start="69:13" pos:end="69:29"><name pos:start="69:13" pos:end="69:14">ch</name> <operator pos:start="69:16" pos:end="69:16">=</operator> <operator pos:start="69:18" pos:end="69:18">(</operator><name pos:start="69:19" pos:end="69:25">uint8_t</name><operator pos:start="69:26" pos:end="69:26">)</operator><name pos:start="69:27" pos:end="69:29">val</name></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="74:0"><expr pos:start="71:13" pos:end="71:45"><call pos:start="71:13" pos:end="71:45"><name pos:start="71:13" pos:end="71:29">qemu_chr_fe_write</name><argument_list pos:start="71:30" pos:end="71:45">(<argument pos:start="71:31" pos:end="71:36"><expr pos:start="71:31" pos:end="71:36"><name pos:start="71:31" pos:end="71:36"><name pos:start="71:31" pos:end="71:31">s</name><operator pos:start="71:32" pos:end="71:33">-&gt;</operator><name pos:start="71:34" pos:end="71:36">chr</name></name></expr></argument>, <argument pos:start="71:39" pos:end="71:41"><expr pos:start="71:39" pos:end="71:41"><operator pos:start="71:39" pos:end="71:39">&amp;</operator><name pos:start="71:40" pos:end="71:41">ch</name></expr></argument>, <argument pos:start="71:44" pos:end="71:44"><expr pos:start="71:44" pos:end="71:44"><literal type="number" pos:start="71:44" pos:end="71:44">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="73:1" pos:end="73:17">#<cpp:directive pos:start="73:2" pos:end="73:3">if</cpp:directive> <expr pos:start="73:5" pos:end="73:17"><name pos:start="73:5" pos:end="73:17">DEBUG_Tx_DATA</name></expr></cpp:if>

            <expr_stmt pos:start="75:13" pos:end="78:0"><expr pos:start="75:13" pos:end="75:37"><call pos:start="75:13" pos:end="75:37"><name pos:start="75:13" pos:end="75:19">fprintf</name><argument_list pos:start="75:20" pos:end="75:37">(<argument pos:start="75:21" pos:end="75:26"><expr pos:start="75:21" pos:end="75:26"><name pos:start="75:21" pos:end="75:26">stderr</name></expr></argument>, <argument pos:start="75:29" pos:end="75:32"><expr pos:start="75:29" pos:end="75:32"><literal type="string" pos:start="75:29" pos:end="75:32">"%c"</literal></expr></argument>, <argument pos:start="75:35" pos:end="75:36"><expr pos:start="75:35" pos:end="75:36"><name pos:start="75:35" pos:end="75:36">ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="77:1" pos:end="77:6">#<cpp:directive pos:start="77:2" pos:end="77:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="79:13" pos:end="81:44"><expr pos:start="79:13" pos:end="81:43"><name pos:start="79:13" pos:end="79:31"><name pos:start="79:13" pos:end="79:13">s</name><operator pos:start="79:14" pos:end="79:15">-&gt;</operator><name pos:start="79:16" pos:end="79:18">reg</name><index pos:start="79:19" pos:end="79:31">[<expr pos:start="79:20" pos:end="79:30"><call pos:start="79:20" pos:end="79:30"><name pos:start="79:20" pos:end="79:21">I_</name><argument_list pos:start="79:22" pos:end="79:30">(<argument pos:start="79:23" pos:end="79:29"><expr pos:start="79:23" pos:end="79:29"><name pos:start="79:23" pos:end="79:29">UTRSTAT</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator pos:start="79:33" pos:end="79:34">|=</operator> <name pos:start="79:36" pos:end="79:60">UTRSTAT_TRANSMITTER_EMPTY</name> <operator pos:start="79:62" pos:end="79:62">|</operator>

                    <name pos:start="81:21" pos:end="81:43">UTRSTAT_Tx_BUFFER_EMPTY</name></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:46"><expr pos:start="83:13" pos:end="83:45"><name pos:start="83:13" pos:end="83:30"><name pos:start="83:13" pos:end="83:13">s</name><operator pos:start="83:14" pos:end="83:15">-&gt;</operator><name pos:start="83:16" pos:end="83:18">reg</name><index pos:start="83:19" pos:end="83:30">[<expr pos:start="83:20" pos:end="83:29"><call pos:start="83:20" pos:end="83:29"><name pos:start="83:20" pos:end="83:21">I_</name><argument_list pos:start="83:22" pos:end="83:29">(<argument pos:start="83:23" pos:end="83:28"><expr pos:start="83:23" pos:end="83:28"><name pos:start="83:23" pos:end="83:28">UINTSP</name></expr></argument>)</argument_list></call></expr>]</index></name>  <operator pos:start="83:33" pos:end="83:34">|=</operator> <name pos:start="83:36" pos:end="83:45">UINTSP_TXD</name></expr>;</expr_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:42"><expr pos:start="85:13" pos:end="85:41"><call pos:start="85:13" pos:end="85:41"><name pos:start="85:13" pos:end="85:38">exynos4210_uart_update_irq</name><argument_list pos:start="85:39" pos:end="85:41">(<argument pos:start="85:40" pos:end="85:40"><expr pos:start="85:40" pos:end="85:40"><name pos:start="85:40" pos:end="85:40">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="89:9" pos:end="89:14">break;</break>



    <case pos:start="93:5" pos:end="93:15">case <expr pos:start="93:10" pos:end="93:14"><name pos:start="93:10" pos:end="93:14">UINTP</name></expr>:</case>

        <expr_stmt pos:start="95:9" pos:end="95:34"><expr pos:start="95:9" pos:end="95:33"><name pos:start="95:9" pos:end="95:25"><name pos:start="95:9" pos:end="95:9">s</name><operator pos:start="95:10" pos:end="95:11">-&gt;</operator><name pos:start="95:12" pos:end="95:14">reg</name><index pos:start="95:15" pos:end="95:25">[<expr pos:start="95:16" pos:end="95:24"><call pos:start="95:16" pos:end="95:24"><name pos:start="95:16" pos:end="95:17">I_</name><argument_list pos:start="95:18" pos:end="95:24">(<argument pos:start="95:19" pos:end="95:23"><expr pos:start="95:19" pos:end="95:23"><name pos:start="95:19" pos:end="95:23">UINTP</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator pos:start="95:27" pos:end="95:28">&amp;=</operator> <operator pos:start="95:30" pos:end="95:30">~</operator><name pos:start="95:31" pos:end="95:33">val</name></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:35"><expr pos:start="97:9" pos:end="97:34"><name pos:start="97:9" pos:end="97:26"><name pos:start="97:9" pos:end="97:9">s</name><operator pos:start="97:10" pos:end="97:11">-&gt;</operator><name pos:start="97:12" pos:end="97:14">reg</name><index pos:start="97:15" pos:end="97:26">[<expr pos:start="97:16" pos:end="97:25"><call pos:start="97:16" pos:end="97:25"><name pos:start="97:16" pos:end="97:17">I_</name><argument_list pos:start="97:18" pos:end="97:25">(<argument pos:start="97:19" pos:end="97:24"><expr pos:start="97:19" pos:end="97:24"><name pos:start="97:19" pos:end="97:24">UINTSP</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator pos:start="97:28" pos:end="97:29">&amp;=</operator> <operator pos:start="97:31" pos:end="97:31">~</operator><name pos:start="97:32" pos:end="97:34">val</name></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="101:59"><expr pos:start="99:9" pos:end="101:58"><call pos:start="99:9" pos:end="101:58"><name pos:start="99:9" pos:end="99:19">PRINT_DEBUG</name><argument_list pos:start="99:20" pos:end="101:58">(<argument pos:start="99:21" pos:end="99:68"><expr pos:start="99:21" pos:end="99:68"><literal type="string" pos:start="99:21" pos:end="99:68">"UART%d: UINTP [%04x] have been cleared: %08x\n"</literal></expr></argument>,

                    <argument pos:start="101:21" pos:end="101:30"><expr pos:start="101:21" pos:end="101:30"><name pos:start="101:21" pos:end="101:30"><name pos:start="101:21" pos:end="101:21">s</name><operator pos:start="101:22" pos:end="101:23">-&gt;</operator><name pos:start="101:24" pos:end="101:30">channel</name></name></expr></argument>, <argument pos:start="101:33" pos:end="101:38"><expr pos:start="101:33" pos:end="101:38"><name pos:start="101:33" pos:end="101:38">offset</name></expr></argument>, <argument pos:start="101:41" pos:end="101:57"><expr pos:start="101:41" pos:end="101:57"><name pos:start="101:41" pos:end="101:57"><name pos:start="101:41" pos:end="101:41">s</name><operator pos:start="101:42" pos:end="101:43">-&gt;</operator><name pos:start="101:44" pos:end="101:46">reg</name><index pos:start="101:47" pos:end="101:57">[<expr pos:start="101:48" pos:end="101:56"><call pos:start="101:48" pos:end="101:56"><name pos:start="101:48" pos:end="101:49">I_</name><argument_list pos:start="101:50" pos:end="101:56">(<argument pos:start="101:51" pos:end="101:55"><expr pos:start="101:51" pos:end="101:55"><name pos:start="101:51" pos:end="101:55">UINTP</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:38"><expr pos:start="103:9" pos:end="103:37"><call pos:start="103:9" pos:end="103:37"><name pos:start="103:9" pos:end="103:34">exynos4210_uart_update_irq</name><argument_list pos:start="103:35" pos:end="103:37">(<argument pos:start="103:36" pos:end="103:36"><expr pos:start="103:36" pos:end="103:36"><name pos:start="103:36" pos:end="103:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="105:9" pos:end="105:14">break;</break>

    <case pos:start="107:5" pos:end="107:17">case <expr pos:start="107:10" pos:end="107:16"><name pos:start="107:10" pos:end="107:16">UTRSTAT</name></expr>:</case>

    <case pos:start="109:5" pos:end="109:17">case <expr pos:start="109:10" pos:end="109:16"><name pos:start="109:10" pos:end="109:16">UERSTAT</name></expr>:</case>

    <case pos:start="111:5" pos:end="111:16">case <expr pos:start="111:10" pos:end="111:15"><name pos:start="111:10" pos:end="111:15">UFSTAT</name></expr>:</case>

    <case pos:start="113:5" pos:end="113:16">case <expr pos:start="113:10" pos:end="113:15"><name pos:start="113:10" pos:end="113:15">UMSTAT</name></expr>:</case>

    <case pos:start="115:5" pos:end="115:14">case <expr pos:start="115:10" pos:end="115:13"><name pos:start="115:10" pos:end="115:13">URXH</name></expr>:</case>

        <expr_stmt pos:start="117:9" pos:end="119:73"><expr pos:start="117:9" pos:end="119:72"><call pos:start="117:9" pos:end="119:72"><name pos:start="117:9" pos:end="117:19">PRINT_DEBUG</name><argument_list pos:start="117:20" pos:end="119:72">(<argument pos:start="117:21" pos:end="117:75"><expr pos:start="117:21" pos:end="117:75"><literal type="string" pos:start="117:21" pos:end="117:75">"UART%d: Trying to write into RO register: %s [%04x]\n"</literal></expr></argument>,

                    <argument pos:start="119:21" pos:end="119:30"><expr pos:start="119:21" pos:end="119:30"><name pos:start="119:21" pos:end="119:30"><name pos:start="119:21" pos:end="119:21">s</name><operator pos:start="119:22" pos:end="119:23">-&gt;</operator><name pos:start="119:24" pos:end="119:30">channel</name></name></expr></argument>, <argument pos:start="119:33" pos:end="119:63"><expr pos:start="119:33" pos:end="119:63"><call pos:start="119:33" pos:end="119:63"><name pos:start="119:33" pos:end="119:55">exynos4210_uart_regname</name><argument_list pos:start="119:56" pos:end="119:63">(<argument pos:start="119:57" pos:end="119:62"><expr pos:start="119:57" pos:end="119:62"><name pos:start="119:57" pos:end="119:62">offset</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="119:66" pos:end="119:71"><expr pos:start="119:66" pos:end="119:71"><name pos:start="119:66" pos:end="119:71">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="121:9" pos:end="121:14">break;</break>

    <case pos:start="123:5" pos:end="123:16">case <expr pos:start="123:10" pos:end="123:15"><name pos:start="123:10" pos:end="123:15">UINTSP</name></expr>:</case>

        <expr_stmt pos:start="125:9" pos:end="125:36"><expr pos:start="125:9" pos:end="125:35"><name pos:start="125:9" pos:end="125:26"><name pos:start="125:9" pos:end="125:9">s</name><operator pos:start="125:10" pos:end="125:11">-&gt;</operator><name pos:start="125:12" pos:end="125:14">reg</name><index pos:start="125:15" pos:end="125:26">[<expr pos:start="125:16" pos:end="125:25"><call pos:start="125:16" pos:end="125:25"><name pos:start="125:16" pos:end="125:17">I_</name><argument_list pos:start="125:18" pos:end="125:25">(<argument pos:start="125:19" pos:end="125:24"><expr pos:start="125:19" pos:end="125:24"><name pos:start="125:19" pos:end="125:24">UINTSP</name></expr></argument>)</argument_list></call></expr>]</index></name>  <operator pos:start="125:29" pos:end="125:30">&amp;=</operator> <operator pos:start="125:32" pos:end="125:32">~</operator><name pos:start="125:33" pos:end="125:35">val</name></expr>;</expr_stmt>

        <break pos:start="127:9" pos:end="127:14">break;</break>

    <case pos:start="129:5" pos:end="129:15">case <expr pos:start="129:10" pos:end="129:14"><name pos:start="129:10" pos:end="129:14">UINTM</name></expr>:</case>

        <expr_stmt pos:start="131:9" pos:end="131:32"><expr pos:start="131:9" pos:end="131:31"><name pos:start="131:9" pos:end="131:25"><name pos:start="131:9" pos:end="131:9">s</name><operator pos:start="131:10" pos:end="131:11">-&gt;</operator><name pos:start="131:12" pos:end="131:14">reg</name><index pos:start="131:15" pos:end="131:25">[<expr pos:start="131:16" pos:end="131:24"><call pos:start="131:16" pos:end="131:24"><name pos:start="131:16" pos:end="131:17">I_</name><argument_list pos:start="131:18" pos:end="131:24">(<argument pos:start="131:19" pos:end="131:23"><expr pos:start="131:19" pos:end="131:23"><name pos:start="131:19" pos:end="131:23">UINTM</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator pos:start="131:27" pos:end="131:27">=</operator> <name pos:start="131:29" pos:end="131:31">val</name></expr>;</expr_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:38"><expr pos:start="133:9" pos:end="133:37"><call pos:start="133:9" pos:end="133:37"><name pos:start="133:9" pos:end="133:34">exynos4210_uart_update_irq</name><argument_list pos:start="133:35" pos:end="133:37">(<argument pos:start="133:36" pos:end="133:36"><expr pos:start="133:36" pos:end="133:36"><name pos:start="133:36" pos:end="133:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="135:9" pos:end="135:14">break;</break>

    <case pos:start="137:5" pos:end="137:14">case <expr pos:start="137:10" pos:end="137:13"><name pos:start="137:10" pos:end="137:13">UCON</name></expr>:</case>

    <case pos:start="139:5" pos:end="139:15">case <expr pos:start="139:10" pos:end="139:14"><name pos:start="139:10" pos:end="139:14">UMCON</name></expr>:</case>

    <default pos:start="141:5" pos:end="141:12">default:</default>

        <expr_stmt pos:start="143:9" pos:end="143:33"><expr pos:start="143:9" pos:end="143:32"><name pos:start="143:9" pos:end="143:26"><name pos:start="143:9" pos:end="143:9">s</name><operator pos:start="143:10" pos:end="143:11">-&gt;</operator><name pos:start="143:12" pos:end="143:14">reg</name><index pos:start="143:15" pos:end="143:26">[<expr pos:start="143:16" pos:end="143:25"><call pos:start="143:16" pos:end="143:25"><name pos:start="143:16" pos:end="143:17">I_</name><argument_list pos:start="143:18" pos:end="143:25">(<argument pos:start="143:19" pos:end="143:24"><expr pos:start="143:19" pos:end="143:24"><name pos:start="143:19" pos:end="143:24">offset</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator pos:start="143:28" pos:end="143:28">=</operator> <name pos:start="143:30" pos:end="143:32">val</name></expr>;</expr_stmt>

        <break pos:start="145:9" pos:end="145:14">break;</break>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
