<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2164.c" pos:tabs="8"><function pos:start="1:1" pos:end="279:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:21">zynq_init</name><parameter_list pos:start="1:22" pos:end="1:48">(<parameter pos:start="1:23" pos:end="1:47"><decl pos:start="1:23" pos:end="1:47"><type pos:start="1:23" pos:end="1:43"><name pos:start="1:23" pos:end="1:41">QEMUMachineInitArgs</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:47">args</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="279:1">{<block_content pos:start="5:5" pos:end="277:53">

    <decl_stmt pos:start="5:5" pos:end="5:41"><decl pos:start="5:5" pos:end="5:40"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:14">ram_addr_t</name></type> <name pos:start="5:16" pos:end="5:23">ram_size</name> <init pos:start="5:25" pos:end="5:40">= <expr pos:start="5:27" pos:end="5:40"><name pos:start="5:27" pos:end="5:40"><name pos:start="5:27" pos:end="5:30">args</name><operator pos:start="5:31" pos:end="5:32">-&gt;</operator><name pos:start="5:33" pos:end="5:40">ram_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:44"><decl pos:start="7:5" pos:end="7:43"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:25">cpu_model</name> <init pos:start="7:27" pos:end="7:43">= <expr pos:start="7:29" pos:end="7:43"><name pos:start="7:29" pos:end="7:43"><name pos:start="7:29" pos:end="7:32">args</name><operator pos:start="7:33" pos:end="7:34">-&gt;</operator><name pos:start="7:35" pos:end="7:43">cpu_model</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:56"><decl pos:start="9:5" pos:end="9:55"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:31">kernel_filename</name> <init pos:start="9:33" pos:end="9:55">= <expr pos:start="9:35" pos:end="9:55"><name pos:start="9:35" pos:end="9:55"><name pos:start="9:35" pos:end="9:38">args</name><operator pos:start="9:39" pos:end="9:40">-&gt;</operator><name pos:start="9:41" pos:end="9:55">kernel_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:54"><decl pos:start="11:5" pos:end="11:53"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:30">kernel_cmdline</name> <init pos:start="11:32" pos:end="11:53">= <expr pos:start="11:34" pos:end="11:53"><name pos:start="11:34" pos:end="11:53"><name pos:start="11:34" pos:end="11:37">args</name><operator pos:start="11:38" pos:end="11:39">-&gt;</operator><name pos:start="11:40" pos:end="11:53">kernel_cmdline</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:56"><decl pos:start="13:5" pos:end="13:55"><type pos:start="13:5" pos:end="13:16"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:14">char</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:31">initrd_filename</name> <init pos:start="13:33" pos:end="13:55">= <expr pos:start="13:35" pos:end="13:55"><name pos:start="13:35" pos:end="13:55"><name pos:start="13:35" pos:end="13:38">args</name><operator pos:start="13:39" pos:end="13:40">-&gt;</operator><name pos:start="13:41" pos:end="13:55">initrd_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:24"><decl pos:start="15:5" pos:end="15:23"><type pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:15">ObjectClass</name> <modifier pos:start="15:17" pos:end="15:17">*</modifier></type><name pos:start="15:18" pos:end="15:23">cpu_oc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:16"><decl pos:start="17:5" pos:end="17:15"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:10">ARMCPU</name> <modifier pos:start="17:12" pos:end="17:12">*</modifier></type><name pos:start="17:13" pos:end="17:15">cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:58"><decl pos:start="19:5" pos:end="19:57"><type pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:16">MemoryRegion</name> <modifier pos:start="19:18" pos:end="19:18">*</modifier></type><name pos:start="19:19" pos:end="19:35">address_space_mem</name> <init pos:start="19:37" pos:end="19:57">= <expr pos:start="19:39" pos:end="19:57"><call pos:start="19:39" pos:end="19:57"><name pos:start="19:39" pos:end="19:55">get_system_memory</name><argument_list pos:start="19:56" pos:end="19:57">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:51"><decl pos:start="21:5" pos:end="21:50"><type pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:16">MemoryRegion</name> <modifier pos:start="21:18" pos:end="21:18">*</modifier></type><name pos:start="21:19" pos:end="21:25">ext_ram</name> <init pos:start="21:27" pos:end="21:50">= <expr pos:start="21:29" pos:end="21:50"><call pos:start="21:29" pos:end="21:50"><name pos:start="21:29" pos:end="21:33">g_new</name><argument_list pos:start="21:34" pos:end="21:50">(<argument pos:start="21:35" pos:end="21:46"><expr pos:start="21:35" pos:end="21:46"><name pos:start="21:35" pos:end="21:46">MemoryRegion</name></expr></argument>, <argument pos:start="21:49" pos:end="21:49"><expr pos:start="21:49" pos:end="21:49"><literal type="number" pos:start="21:49" pos:end="21:49">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:51"><decl pos:start="23:5" pos:end="23:50"><type pos:start="23:5" pos:end="23:18"><name pos:start="23:5" pos:end="23:16">MemoryRegion</name> <modifier pos:start="23:18" pos:end="23:18">*</modifier></type><name pos:start="23:19" pos:end="23:25">ocm_ram</name> <init pos:start="23:27" pos:end="23:50">= <expr pos:start="23:29" pos:end="23:50"><call pos:start="23:29" pos:end="23:50"><name pos:start="23:29" pos:end="23:33">g_new</name><argument_list pos:start="23:34" pos:end="23:50">(<argument pos:start="23:35" pos:end="23:46"><expr pos:start="23:35" pos:end="23:46"><name pos:start="23:35" pos:end="23:46">MemoryRegion</name></expr></argument>, <argument pos:start="23:49" pos:end="23:49"><expr pos:start="23:49" pos:end="23:49"><literal type="number" pos:start="23:49" pos:end="23:49">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:21"><decl pos:start="25:5" pos:end="25:20"><type pos:start="25:5" pos:end="25:17"><name pos:start="25:5" pos:end="25:15">DeviceState</name> <modifier pos:start="25:17" pos:end="25:17">*</modifier></type><name pos:start="25:18" pos:end="25:20">dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:25"><decl pos:start="27:5" pos:end="27:24"><type pos:start="27:5" pos:end="27:18"><name pos:start="27:5" pos:end="27:16">SysBusDevice</name> <modifier pos:start="27:18" pos:end="27:18">*</modifier></type><name pos:start="27:19" pos:end="27:24">busdev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:21"><decl pos:start="29:5" pos:end="29:20"><type pos:start="29:5" pos:end="29:12"><name pos:start="29:5" pos:end="29:12">qemu_irq</name></type> <name pos:start="29:14" pos:end="29:20"><name pos:start="29:14" pos:end="29:16">pic</name><index pos:start="29:17" pos:end="29:20">[<expr pos:start="29:18" pos:end="29:19"><literal type="number" pos:start="29:18" pos:end="29:19">64</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:16"><decl pos:start="31:5" pos:end="31:15"><type pos:start="31:5" pos:end="31:13"><name pos:start="31:5" pos:end="31:11">NICInfo</name> <modifier pos:start="31:13" pos:end="31:13">*</modifier></type><name pos:start="31:14" pos:end="31:15">nd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:22"><decl pos:start="33:5" pos:end="33:21"><type pos:start="33:5" pos:end="33:11"><name pos:start="33:5" pos:end="33:9">Error</name> <modifier pos:start="33:11" pos:end="33:11">*</modifier></type><name pos:start="33:12" pos:end="33:14">err</name> <init pos:start="33:16" pos:end="33:21">= <expr pos:start="33:18" pos:end="33:21"><name pos:start="33:18" pos:end="33:21">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:10"><decl pos:start="35:5" pos:end="35:9"><type pos:start="35:5" pos:end="35:7"><name pos:start="35:5" pos:end="35:7">int</name></type> <name pos:start="35:9" pos:end="35:9">n</name></decl>;</decl_stmt>



    <if_stmt pos:start="39:5" pos:end="43:5"><if pos:start="39:5" pos:end="43:5">if <condition pos:start="39:8" pos:end="39:19">(<expr pos:start="39:9" pos:end="39:18"><operator pos:start="39:9" pos:end="39:9">!</operator><name pos:start="39:10" pos:end="39:18">cpu_model</name></expr>)</condition> <block pos:start="39:21" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:32">

        <expr_stmt pos:start="41:9" pos:end="41:32"><expr pos:start="41:9" pos:end="41:31"><name pos:start="41:9" pos:end="41:17">cpu_model</name> <operator pos:start="41:19" pos:end="41:19">=</operator> <literal type="string" pos:start="41:21" pos:end="41:31">"cortex-a9"</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:56"><expr pos:start="45:5" pos:end="45:55"><name pos:start="45:5" pos:end="45:10">cpu_oc</name> <operator pos:start="45:12" pos:end="45:12">=</operator> <call pos:start="45:14" pos:end="45:55"><name pos:start="45:14" pos:end="45:30">cpu_class_by_name</name><argument_list pos:start="45:31" pos:end="45:55">(<argument pos:start="45:32" pos:end="45:43"><expr pos:start="45:32" pos:end="45:43"><name pos:start="45:32" pos:end="45:43">TYPE_ARM_CPU</name></expr></argument>, <argument pos:start="45:46" pos:end="45:54"><expr pos:start="45:46" pos:end="45:54"><name pos:start="45:46" pos:end="45:54">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:61"><expr pos:start="49:5" pos:end="49:60"><name pos:start="49:5" pos:end="49:7">cpu</name> <operator pos:start="49:9" pos:end="49:9">=</operator> <call pos:start="49:11" pos:end="49:60"><name pos:start="49:11" pos:end="49:17">ARM_CPU</name><argument_list pos:start="49:18" pos:end="49:60">(<argument pos:start="49:19" pos:end="49:59"><expr pos:start="49:19" pos:end="49:59"><call pos:start="49:19" pos:end="49:59"><name pos:start="49:19" pos:end="49:28">object_new</name><argument_list pos:start="49:29" pos:end="49:59">(<argument pos:start="49:30" pos:end="49:58"><expr pos:start="49:30" pos:end="49:58"><call pos:start="49:30" pos:end="49:58"><name pos:start="49:30" pos:end="49:50">object_class_get_name</name><argument_list pos:start="49:51" pos:end="49:58">(<argument pos:start="49:52" pos:end="49:57"><expr pos:start="49:52" pos:end="49:57"><name pos:start="49:52" pos:end="49:57">cpu_oc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:80"><expr pos:start="53:5" pos:end="53:79"><call pos:start="53:5" pos:end="53:79"><name pos:start="53:5" pos:end="53:27">object_property_set_int</name><argument_list pos:start="53:28" pos:end="53:79">(<argument pos:start="53:29" pos:end="53:39"><expr pos:start="53:29" pos:end="53:39"><call pos:start="53:29" pos:end="53:39"><name pos:start="53:29" pos:end="53:34">OBJECT</name><argument_list pos:start="53:35" pos:end="53:39">(<argument pos:start="53:36" pos:end="53:38"><expr pos:start="53:36" pos:end="53:38"><name pos:start="53:36" pos:end="53:38">cpu</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="53:42" pos:end="53:58"><expr pos:start="53:42" pos:end="53:58"><name pos:start="53:42" pos:end="53:58">MPCORE_PERIPHBASE</name></expr></argument>, <argument pos:start="53:61" pos:end="53:72"><expr pos:start="53:61" pos:end="53:72"><literal type="string" pos:start="53:61" pos:end="53:72">"reset-cbar"</literal></expr></argument>, <argument pos:start="53:75" pos:end="53:78"><expr pos:start="53:75" pos:end="53:78"><operator pos:start="53:75" pos:end="53:75">&amp;</operator><name pos:start="53:76" pos:end="53:78">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="55:5" pos:end="61:5"><if pos:start="55:5" pos:end="61:5">if <condition pos:start="55:8" pos:end="55:12">(<expr pos:start="55:9" pos:end="55:11"><name pos:start="55:9" pos:end="55:11">err</name></expr>)</condition> <block pos:start="55:14" pos:end="61:5">{<block_content pos:start="57:9" pos:end="59:16">

        <expr_stmt pos:start="57:9" pos:end="57:50"><expr pos:start="57:9" pos:end="57:49"><call pos:start="57:9" pos:end="57:49"><name pos:start="57:9" pos:end="57:20">error_report</name><argument_list pos:start="57:21" pos:end="57:49">(<argument pos:start="57:22" pos:end="57:25"><expr pos:start="57:22" pos:end="57:25"><literal type="string" pos:start="57:22" pos:end="57:25">"%s"</literal></expr></argument>, <argument pos:start="57:28" pos:end="57:48"><expr pos:start="57:28" pos:end="57:48"><call pos:start="57:28" pos:end="57:48"><name pos:start="57:28" pos:end="57:43">error_get_pretty</name><argument_list pos:start="57:44" pos:end="57:48">(<argument pos:start="57:45" pos:end="57:47"><expr pos:start="57:45" pos:end="57:47"><name pos:start="57:45" pos:end="57:47">err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:16"><expr pos:start="59:9" pos:end="59:15"><call pos:start="59:9" pos:end="59:15"><name pos:start="59:9" pos:end="59:12">exit</name><argument_list pos:start="59:13" pos:end="59:15">(<argument pos:start="59:14" pos:end="59:14"><expr pos:start="59:14" pos:end="59:14"><literal type="number" pos:start="59:14" pos:end="59:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:66"><expr pos:start="63:5" pos:end="63:65"><call pos:start="63:5" pos:end="63:65"><name pos:start="63:5" pos:end="63:28">object_property_set_bool</name><argument_list pos:start="63:29" pos:end="63:65">(<argument pos:start="63:30" pos:end="63:40"><expr pos:start="63:30" pos:end="63:40"><call pos:start="63:30" pos:end="63:40"><name pos:start="63:30" pos:end="63:35">OBJECT</name><argument_list pos:start="63:36" pos:end="63:40">(<argument pos:start="63:37" pos:end="63:39"><expr pos:start="63:37" pos:end="63:39"><name pos:start="63:37" pos:end="63:39">cpu</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="63:43" pos:end="63:46"><expr pos:start="63:43" pos:end="63:46"><name pos:start="63:43" pos:end="63:46">true</name></expr></argument>, <argument pos:start="63:49" pos:end="63:58"><expr pos:start="63:49" pos:end="63:58"><literal type="string" pos:start="63:49" pos:end="63:58">"realized"</literal></expr></argument>, <argument pos:start="63:61" pos:end="63:64"><expr pos:start="63:61" pos:end="63:64"><operator pos:start="63:61" pos:end="63:61">&amp;</operator><name pos:start="63:62" pos:end="63:64">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="65:5" pos:end="71:5"><if pos:start="65:5" pos:end="71:5">if <condition pos:start="65:8" pos:end="65:12">(<expr pos:start="65:9" pos:end="65:11"><name pos:start="65:9" pos:end="65:11">err</name></expr>)</condition> <block pos:start="65:14" pos:end="71:5">{<block_content pos:start="67:9" pos:end="69:16">

        <expr_stmt pos:start="67:9" pos:end="67:50"><expr pos:start="67:9" pos:end="67:49"><call pos:start="67:9" pos:end="67:49"><name pos:start="67:9" pos:end="67:20">error_report</name><argument_list pos:start="67:21" pos:end="67:49">(<argument pos:start="67:22" pos:end="67:25"><expr pos:start="67:22" pos:end="67:25"><literal type="string" pos:start="67:22" pos:end="67:25">"%s"</literal></expr></argument>, <argument pos:start="67:28" pos:end="67:48"><expr pos:start="67:28" pos:end="67:48"><call pos:start="67:28" pos:end="67:48"><name pos:start="67:28" pos:end="67:43">error_get_pretty</name><argument_list pos:start="67:44" pos:end="67:48">(<argument pos:start="67:45" pos:end="67:47"><expr pos:start="67:45" pos:end="67:47"><name pos:start="67:45" pos:end="67:47">err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:16"><expr pos:start="69:9" pos:end="69:15"><call pos:start="69:9" pos:end="69:15"><name pos:start="69:9" pos:end="69:12">exit</name><argument_list pos:start="69:13" pos:end="69:15">(<argument pos:start="69:14" pos:end="69:14"><expr pos:start="69:14" pos:end="69:14"><literal type="number" pos:start="69:14" pos:end="69:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="75:5" pos:end="75:21">/* max 2GB ram */</comment>

    <if_stmt pos:start="77:5" pos:end="81:5"><if pos:start="77:5" pos:end="81:5">if <condition pos:start="77:8" pos:end="77:30">(<expr pos:start="77:9" pos:end="77:29"><name pos:start="77:9" pos:end="77:16">ram_size</name> <operator pos:start="77:18" pos:end="77:18">&gt;</operator> <literal type="number" pos:start="77:20" pos:end="77:29">0x80000000</literal></expr>)</condition> <block pos:start="77:32" pos:end="81:5">{<block_content pos:start="79:9" pos:end="79:30">

        <expr_stmt pos:start="79:9" pos:end="79:30"><expr pos:start="79:9" pos:end="79:29"><name pos:start="79:9" pos:end="79:16">ram_size</name> <operator pos:start="79:18" pos:end="79:18">=</operator> <literal type="number" pos:start="79:20" pos:end="79:29">0x80000000</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="85:5" pos:end="85:40">/* DDR remapped to address zero.  */</comment>

    <expr_stmt pos:start="87:5" pos:end="87:68"><expr pos:start="87:5" pos:end="87:67"><call pos:start="87:5" pos:end="87:67"><name pos:start="87:5" pos:end="87:26">memory_region_init_ram</name><argument_list pos:start="87:27" pos:end="87:67">(<argument pos:start="87:28" pos:end="87:34"><expr pos:start="87:28" pos:end="87:34"><name pos:start="87:28" pos:end="87:34">ext_ram</name></expr></argument>, <argument pos:start="87:37" pos:end="87:40"><expr pos:start="87:37" pos:end="87:40"><name pos:start="87:37" pos:end="87:40">NULL</name></expr></argument>, <argument pos:start="87:43" pos:end="87:56"><expr pos:start="87:43" pos:end="87:56"><literal type="string" pos:start="87:43" pos:end="87:56">"zynq.ext_ram"</literal></expr></argument>, <argument pos:start="87:59" pos:end="87:66"><expr pos:start="87:59" pos:end="87:66"><name pos:start="87:59" pos:end="87:66">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:41"><expr pos:start="89:5" pos:end="89:40"><call pos:start="89:5" pos:end="89:40"><name pos:start="89:5" pos:end="89:31">vmstate_register_ram_global</name><argument_list pos:start="89:32" pos:end="89:40">(<argument pos:start="89:33" pos:end="89:39"><expr pos:start="89:33" pos:end="89:39"><name pos:start="89:33" pos:end="89:39">ext_ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:63"><expr pos:start="91:5" pos:end="91:62"><call pos:start="91:5" pos:end="91:62"><name pos:start="91:5" pos:end="91:31">memory_region_add_subregion</name><argument_list pos:start="91:32" pos:end="91:62">(<argument pos:start="91:33" pos:end="91:49"><expr pos:start="91:33" pos:end="91:49"><name pos:start="91:33" pos:end="91:49">address_space_mem</name></expr></argument>, <argument pos:start="91:52" pos:end="91:52"><expr pos:start="91:52" pos:end="91:52"><literal type="number" pos:start="91:52" pos:end="91:52">0</literal></expr></argument>, <argument pos:start="91:55" pos:end="91:61"><expr pos:start="91:55" pos:end="91:61"><name pos:start="91:55" pos:end="91:61">ext_ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="95:5" pos:end="95:32">/* 256K of on-chip memory */</comment>

    <expr_stmt pos:start="97:5" pos:end="97:69"><expr pos:start="97:5" pos:end="97:68"><call pos:start="97:5" pos:end="97:68"><name pos:start="97:5" pos:end="97:26">memory_region_init_ram</name><argument_list pos:start="97:27" pos:end="97:68">(<argument pos:start="97:28" pos:end="97:34"><expr pos:start="97:28" pos:end="97:34"><name pos:start="97:28" pos:end="97:34">ocm_ram</name></expr></argument>, <argument pos:start="97:37" pos:end="97:40"><expr pos:start="97:37" pos:end="97:40"><name pos:start="97:37" pos:end="97:40">NULL</name></expr></argument>, <argument pos:start="97:43" pos:end="97:56"><expr pos:start="97:43" pos:end="97:56"><literal type="string" pos:start="97:43" pos:end="97:56">"zynq.ocm_ram"</literal></expr></argument>, <argument pos:start="97:59" pos:end="97:67"><expr pos:start="97:59" pos:end="97:67"><literal type="number" pos:start="97:59" pos:end="97:61">256</literal> <operator pos:start="97:63" pos:end="97:64">&lt;&lt;</operator> <literal type="number" pos:start="97:66" pos:end="97:67">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:41"><expr pos:start="99:5" pos:end="99:40"><call pos:start="99:5" pos:end="99:40"><name pos:start="99:5" pos:end="99:31">vmstate_register_ram_global</name><argument_list pos:start="99:32" pos:end="99:40">(<argument pos:start="99:33" pos:end="99:39"><expr pos:start="99:33" pos:end="99:39"><name pos:start="99:33" pos:end="99:39">ocm_ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:72"><expr pos:start="101:5" pos:end="101:71"><call pos:start="101:5" pos:end="101:71"><name pos:start="101:5" pos:end="101:31">memory_region_add_subregion</name><argument_list pos:start="101:32" pos:end="101:71">(<argument pos:start="101:33" pos:end="101:49"><expr pos:start="101:33" pos:end="101:49"><name pos:start="101:33" pos:end="101:49">address_space_mem</name></expr></argument>, <argument pos:start="101:52" pos:end="101:61"><expr pos:start="101:52" pos:end="101:61"><literal type="number" pos:start="101:52" pos:end="101:61">0xFFFC0000</literal></expr></argument>, <argument pos:start="101:64" pos:end="101:70"><expr pos:start="101:64" pos:end="101:70"><name pos:start="101:64" pos:end="101:70">ocm_ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <decl_stmt pos:start="105:5" pos:end="105:50"><decl pos:start="105:5" pos:end="105:49"><type pos:start="105:5" pos:end="105:15"><name pos:start="105:5" pos:end="105:13">DriveInfo</name> <modifier pos:start="105:15" pos:end="105:15">*</modifier></type><name pos:start="105:16" pos:end="105:20">dinfo</name> <init pos:start="105:22" pos:end="105:49">= <expr pos:start="105:24" pos:end="105:49"><call pos:start="105:24" pos:end="105:49"><name pos:start="105:24" pos:end="105:32">drive_get</name><argument_list pos:start="105:33" pos:end="105:49">(<argument pos:start="105:34" pos:end="105:42"><expr pos:start="105:34" pos:end="105:42"><name pos:start="105:34" pos:end="105:42">IF_PFLASH</name></expr></argument>, <argument pos:start="105:45" pos:end="105:45"><expr pos:start="105:45" pos:end="105:45"><literal type="number" pos:start="105:45" pos:end="105:45">0</literal></expr></argument>, <argument pos:start="105:48" pos:end="105:48"><expr pos:start="105:48" pos:end="105:48"><literal type="number" pos:start="105:48" pos:end="105:48">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="109:5" pos:end="109:13">/* AMD */</comment>

    <expr_stmt pos:start="111:5" pos:end="119:33"><expr pos:start="111:5" pos:end="119:32"><call pos:start="111:5" pos:end="119:32"><name pos:start="111:5" pos:end="111:25">pflash_cfi02_register</name><argument_list pos:start="111:26" pos:end="119:32">(<argument pos:start="111:27" pos:end="111:36"><expr pos:start="111:27" pos:end="111:36"><literal type="number" pos:start="111:27" pos:end="111:36">0xe2000000</literal></expr></argument>, <argument pos:start="111:39" pos:end="111:42"><expr pos:start="111:39" pos:end="111:42"><name pos:start="111:39" pos:end="111:42">NULL</name></expr></argument>, <argument pos:start="111:45" pos:end="111:57"><expr pos:start="111:45" pos:end="111:57"><literal type="string" pos:start="111:45" pos:end="111:57">"zynq.pflash"</literal></expr></argument>, <argument pos:start="111:60" pos:end="111:69"><expr pos:start="111:60" pos:end="111:69"><name pos:start="111:60" pos:end="111:69">FLASH_SIZE</name></expr></argument>,

                          <argument pos:start="113:27" pos:end="113:52"><expr pos:start="113:27" pos:end="113:52"><ternary pos:start="113:27" pos:end="113:52"><condition pos:start="113:27" pos:end="113:33"><expr pos:start="113:27" pos:end="113:31"><name pos:start="113:27" pos:end="113:31">dinfo</name></expr> ?</condition><then pos:start="113:35" pos:end="113:45"> <expr pos:start="113:35" pos:end="113:45"><name pos:start="113:35" pos:end="113:45"><name pos:start="113:35" pos:end="113:39">dinfo</name><operator pos:start="113:40" pos:end="113:41">-&gt;</operator><name pos:start="113:42" pos:end="113:45">bdrv</name></name></expr> </then><else pos:start="113:47" pos:end="113:52">: <expr pos:start="113:49" pos:end="113:52"><name pos:start="113:49" pos:end="113:52">NULL</name></expr></else></ternary></expr></argument>, <argument pos:start="113:55" pos:end="113:71"><expr pos:start="113:55" pos:end="113:71"><name pos:start="113:55" pos:end="113:71">FLASH_SECTOR_SIZE</name></expr></argument>,

                          <argument pos:start="115:27" pos:end="115:54"><expr pos:start="115:27" pos:end="115:54"><name pos:start="115:27" pos:end="115:36">FLASH_SIZE</name><operator pos:start="115:37" pos:end="115:37">/</operator><name pos:start="115:38" pos:end="115:54">FLASH_SECTOR_SIZE</name></expr></argument>, <argument pos:start="115:57" pos:end="115:57"><expr pos:start="115:57" pos:end="115:57"><literal type="number" pos:start="115:57" pos:end="115:57">1</literal></expr></argument>,

                          <argument pos:start="117:27" pos:end="117:27"><expr pos:start="117:27" pos:end="117:27"><literal type="number" pos:start="117:27" pos:end="117:27">1</literal></expr></argument>, <argument pos:start="117:30" pos:end="117:35"><expr pos:start="117:30" pos:end="117:35"><literal type="number" pos:start="117:30" pos:end="117:35">0x0066</literal></expr></argument>, <argument pos:start="117:38" pos:end="117:43"><expr pos:start="117:38" pos:end="117:43"><literal type="number" pos:start="117:38" pos:end="117:43">0x0022</literal></expr></argument>, <argument pos:start="117:46" pos:end="117:51"><expr pos:start="117:46" pos:end="117:51"><literal type="number" pos:start="117:46" pos:end="117:51">0x0000</literal></expr></argument>, <argument pos:start="117:54" pos:end="117:59"><expr pos:start="117:54" pos:end="117:59"><literal type="number" pos:start="117:54" pos:end="117:59">0x0000</literal></expr></argument>, <argument pos:start="117:62" pos:end="117:67"><expr pos:start="117:62" pos:end="117:67"><literal type="number" pos:start="117:62" pos:end="117:67">0x0555</literal></expr></argument>, <argument pos:start="117:70" pos:end="117:74"><expr pos:start="117:70" pos:end="117:74"><literal type="number" pos:start="117:70" pos:end="117:74">0x2aa</literal></expr></argument>,

                              <argument pos:start="119:31" pos:end="119:31"><expr pos:start="119:31" pos:end="119:31"><literal type="number" pos:start="119:31" pos:end="119:31">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="123:5" pos:end="123:48"><expr pos:start="123:5" pos:end="123:47"><name pos:start="123:5" pos:end="123:7">dev</name> <operator pos:start="123:9" pos:end="123:9">=</operator> <call pos:start="123:11" pos:end="123:47"><name pos:start="123:11" pos:end="123:21">qdev_create</name><argument_list pos:start="123:22" pos:end="123:47">(<argument pos:start="123:23" pos:end="123:26"><expr pos:start="123:23" pos:end="123:26"><name pos:start="123:23" pos:end="123:26">NULL</name></expr></argument>, <argument pos:start="123:29" pos:end="123:46"><expr pos:start="123:29" pos:end="123:46"><literal type="string" pos:start="123:29" pos:end="123:46">"xilinx,zynq_slcr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:26"><expr pos:start="125:5" pos:end="125:25"><call pos:start="125:5" pos:end="125:25"><name pos:start="125:5" pos:end="125:20">qdev_init_nofail</name><argument_list pos:start="125:21" pos:end="125:25">(<argument pos:start="125:22" pos:end="125:24"><expr pos:start="125:22" pos:end="125:24"><name pos:start="125:22" pos:end="125:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:56"><expr pos:start="127:5" pos:end="127:55"><call pos:start="127:5" pos:end="127:55"><name pos:start="127:5" pos:end="127:19">sysbus_mmio_map</name><argument_list pos:start="127:20" pos:end="127:55">(<argument pos:start="127:21" pos:end="127:39"><expr pos:start="127:21" pos:end="127:39"><call pos:start="127:21" pos:end="127:39"><name pos:start="127:21" pos:end="127:34">SYS_BUS_DEVICE</name><argument_list pos:start="127:35" pos:end="127:39">(<argument pos:start="127:36" pos:end="127:38"><expr pos:start="127:36" pos:end="127:38"><name pos:start="127:36" pos:end="127:38">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="127:42" pos:end="127:42"><expr pos:start="127:42" pos:end="127:42"><literal type="number" pos:start="127:42" pos:end="127:42">0</literal></expr></argument>, <argument pos:start="127:45" pos:end="127:54"><expr pos:start="127:45" pos:end="127:54"><literal type="number" pos:start="127:45" pos:end="127:54">0xF8000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="131:5" pos:end="131:45"><expr pos:start="131:5" pos:end="131:44"><name pos:start="131:5" pos:end="131:7">dev</name> <operator pos:start="131:9" pos:end="131:9">=</operator> <call pos:start="131:11" pos:end="131:44"><name pos:start="131:11" pos:end="131:21">qdev_create</name><argument_list pos:start="131:22" pos:end="131:44">(<argument pos:start="131:23" pos:end="131:26"><expr pos:start="131:23" pos:end="131:26"><name pos:start="131:23" pos:end="131:26">NULL</name></expr></argument>, <argument pos:start="131:29" pos:end="131:43"><expr pos:start="131:29" pos:end="131:43"><literal type="string" pos:start="131:29" pos:end="131:43">"a9mpcore_priv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:44"><expr pos:start="133:5" pos:end="133:43"><call pos:start="133:5" pos:end="133:43"><name pos:start="133:5" pos:end="133:24">qdev_prop_set_uint32</name><argument_list pos:start="133:25" pos:end="133:43">(<argument pos:start="133:26" pos:end="133:28"><expr pos:start="133:26" pos:end="133:28"><name pos:start="133:26" pos:end="133:28">dev</name></expr></argument>, <argument pos:start="133:31" pos:end="133:39"><expr pos:start="133:31" pos:end="133:39"><literal type="string" pos:start="133:31" pos:end="133:39">"num-cpu"</literal></expr></argument>, <argument pos:start="133:42" pos:end="133:42"><expr pos:start="133:42" pos:end="133:42"><literal type="number" pos:start="133:42" pos:end="133:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:26"><expr pos:start="135:5" pos:end="135:25"><call pos:start="135:5" pos:end="135:25"><name pos:start="135:5" pos:end="135:20">qdev_init_nofail</name><argument_list pos:start="135:21" pos:end="135:25">(<argument pos:start="135:22" pos:end="135:24"><expr pos:start="135:22" pos:end="135:24"><name pos:start="135:22" pos:end="135:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="137:5" pos:end="137:33"><expr pos:start="137:5" pos:end="137:32"><name pos:start="137:5" pos:end="137:10">busdev</name> <operator pos:start="137:12" pos:end="137:12">=</operator> <call pos:start="137:14" pos:end="137:32"><name pos:start="137:14" pos:end="137:27">SYS_BUS_DEVICE</name><argument_list pos:start="137:28" pos:end="137:32">(<argument pos:start="137:29" pos:end="137:31"><expr pos:start="137:29" pos:end="137:31"><name pos:start="137:29" pos:end="137:31">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:50"><expr pos:start="139:5" pos:end="139:49"><call pos:start="139:5" pos:end="139:49"><name pos:start="139:5" pos:end="139:19">sysbus_mmio_map</name><argument_list pos:start="139:20" pos:end="139:49">(<argument pos:start="139:21" pos:end="139:26"><expr pos:start="139:21" pos:end="139:26"><name pos:start="139:21" pos:end="139:26">busdev</name></expr></argument>, <argument pos:start="139:29" pos:end="139:29"><expr pos:start="139:29" pos:end="139:29"><literal type="number" pos:start="139:29" pos:end="139:29">0</literal></expr></argument>, <argument pos:start="139:32" pos:end="139:48"><expr pos:start="139:32" pos:end="139:48"><name pos:start="139:32" pos:end="139:48">MPCORE_PERIPHBASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="141:5" pos:end="143:67"><expr pos:start="141:5" pos:end="143:66"><call pos:start="141:5" pos:end="143:66"><name pos:start="141:5" pos:end="141:22">sysbus_connect_irq</name><argument_list pos:start="141:23" pos:end="143:66">(<argument pos:start="141:24" pos:end="141:29"><expr pos:start="141:24" pos:end="141:29"><name pos:start="141:24" pos:end="141:29">busdev</name></expr></argument>, <argument pos:start="141:32" pos:end="141:32"><expr pos:start="141:32" pos:end="141:32"><literal type="number" pos:start="141:32" pos:end="141:32">0</literal></expr></argument>,

                       <argument pos:start="143:24" pos:end="143:65"><expr pos:start="143:24" pos:end="143:65"><call pos:start="143:24" pos:end="143:65"><name pos:start="143:24" pos:end="143:39">qdev_get_gpio_in</name><argument_list pos:start="143:40" pos:end="143:65">(<argument pos:start="143:41" pos:end="143:51"><expr pos:start="143:41" pos:end="143:51"><call pos:start="143:41" pos:end="143:51"><name pos:start="143:41" pos:end="143:46">DEVICE</name><argument_list pos:start="143:47" pos:end="143:51">(<argument pos:start="143:48" pos:end="143:50"><expr pos:start="143:48" pos:end="143:50"><name pos:start="143:48" pos:end="143:50">cpu</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="143:54" pos:end="143:64"><expr pos:start="143:54" pos:end="143:64"><name pos:start="143:54" pos:end="143:64">ARM_CPU_IRQ</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="147:5" pos:end="151:5">for <control pos:start="147:9" pos:end="147:28">(<init pos:start="147:10" pos:end="147:15"><expr pos:start="147:10" pos:end="147:14"><name pos:start="147:10" pos:end="147:10">n</name> <operator pos:start="147:12" pos:end="147:12">=</operator> <literal type="number" pos:start="147:14" pos:end="147:14">0</literal></expr>;</init> <condition pos:start="147:17" pos:end="147:23"><expr pos:start="147:17" pos:end="147:22"><name pos:start="147:17" pos:end="147:17">n</name> <operator pos:start="147:19" pos:end="147:19">&lt;</operator> <literal type="number" pos:start="147:21" pos:end="147:22">64</literal></expr>;</condition> <incr pos:start="147:25" pos:end="147:27"><expr pos:start="147:25" pos:end="147:27"><name pos:start="147:25" pos:end="147:25">n</name><operator pos:start="147:26" pos:end="147:27">++</operator></expr></incr>)</control> <block pos:start="147:30" pos:end="151:5">{<block_content pos:start="149:9" pos:end="149:42">

        <expr_stmt pos:start="149:9" pos:end="149:42"><expr pos:start="149:9" pos:end="149:41"><name pos:start="149:9" pos:end="149:14"><name pos:start="149:9" pos:end="149:11">pic</name><index pos:start="149:12" pos:end="149:14">[<expr pos:start="149:13" pos:end="149:13"><name pos:start="149:13" pos:end="149:13">n</name></expr>]</index></name> <operator pos:start="149:16" pos:end="149:16">=</operator> <call pos:start="149:18" pos:end="149:41"><name pos:start="149:18" pos:end="149:33">qdev_get_gpio_in</name><argument_list pos:start="149:34" pos:end="149:41">(<argument pos:start="149:35" pos:end="149:37"><expr pos:start="149:35" pos:end="149:37"><name pos:start="149:35" pos:end="149:37">dev</name></expr></argument>, <argument pos:start="149:40" pos:end="149:40"><expr pos:start="149:40" pos:end="149:40"><name pos:start="149:40" pos:end="149:40">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="155:5" pos:end="155:65"><expr pos:start="155:5" pos:end="155:64"><call pos:start="155:5" pos:end="155:64"><name pos:start="155:5" pos:end="155:25">zynq_init_spi_flashes</name><argument_list pos:start="155:26" pos:end="155:64">(<argument pos:start="155:27" pos:end="155:36"><expr pos:start="155:27" pos:end="155:36"><literal type="number" pos:start="155:27" pos:end="155:36">0xE0006000</literal></expr></argument>, <argument pos:start="155:39" pos:end="155:56"><expr pos:start="155:39" pos:end="155:56"><name pos:start="155:39" pos:end="155:56"><name pos:start="155:39" pos:end="155:41">pic</name><index pos:start="155:42" pos:end="155:56">[<expr pos:start="155:43" pos:end="155:55"><literal type="number" pos:start="155:43" pos:end="155:45">58</literal><operator pos:start="155:45" pos:end="155:45">-</operator><name pos:start="155:46" pos:end="155:55">IRQ_OFFSET</name></expr>]</index></name></expr></argument>, <argument pos:start="155:59" pos:end="155:63"><expr pos:start="155:59" pos:end="155:63"><name pos:start="155:59" pos:end="155:63">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="157:5" pos:end="157:65"><expr pos:start="157:5" pos:end="157:64"><call pos:start="157:5" pos:end="157:64"><name pos:start="157:5" pos:end="157:25">zynq_init_spi_flashes</name><argument_list pos:start="157:26" pos:end="157:64">(<argument pos:start="157:27" pos:end="157:36"><expr pos:start="157:27" pos:end="157:36"><literal type="number" pos:start="157:27" pos:end="157:36">0xE0007000</literal></expr></argument>, <argument pos:start="157:39" pos:end="157:56"><expr pos:start="157:39" pos:end="157:56"><name pos:start="157:39" pos:end="157:56"><name pos:start="157:39" pos:end="157:41">pic</name><index pos:start="157:42" pos:end="157:56">[<expr pos:start="157:43" pos:end="157:55"><literal type="number" pos:start="157:43" pos:end="157:45">81</literal><operator pos:start="157:45" pos:end="157:45">-</operator><name pos:start="157:46" pos:end="157:55">IRQ_OFFSET</name></expr>]</index></name></expr></argument>, <argument pos:start="157:59" pos:end="157:63"><expr pos:start="157:59" pos:end="157:63"><name pos:start="157:59" pos:end="157:63">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="159:5" pos:end="159:64"><expr pos:start="159:5" pos:end="159:63"><call pos:start="159:5" pos:end="159:63"><name pos:start="159:5" pos:end="159:25">zynq_init_spi_flashes</name><argument_list pos:start="159:26" pos:end="159:63">(<argument pos:start="159:27" pos:end="159:36"><expr pos:start="159:27" pos:end="159:36"><literal type="number" pos:start="159:27" pos:end="159:36">0xE000D000</literal></expr></argument>, <argument pos:start="159:39" pos:end="159:56"><expr pos:start="159:39" pos:end="159:56"><name pos:start="159:39" pos:end="159:56"><name pos:start="159:39" pos:end="159:41">pic</name><index pos:start="159:42" pos:end="159:56">[<expr pos:start="159:43" pos:end="159:55"><literal type="number" pos:start="159:43" pos:end="159:45">51</literal><operator pos:start="159:45" pos:end="159:45">-</operator><name pos:start="159:46" pos:end="159:55">IRQ_OFFSET</name></expr>]</index></name></expr></argument>, <argument pos:start="159:59" pos:end="159:62"><expr pos:start="159:59" pos:end="159:62"><name pos:start="159:59" pos:end="159:62">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="163:5" pos:end="163:73"><expr pos:start="163:5" pos:end="163:72"><call pos:start="163:5" pos:end="163:72"><name pos:start="163:5" pos:end="163:24">sysbus_create_simple</name><argument_list pos:start="163:25" pos:end="163:72">(<argument pos:start="163:26" pos:end="163:39"><expr pos:start="163:26" pos:end="163:39"><literal type="string" pos:start="163:26" pos:end="163:39">"xlnx,ps7-usb"</literal></expr></argument>, <argument pos:start="163:42" pos:end="163:51"><expr pos:start="163:42" pos:end="163:51"><literal type="number" pos:start="163:42" pos:end="163:51">0xE0002000</literal></expr></argument>, <argument pos:start="163:54" pos:end="163:71"><expr pos:start="163:54" pos:end="163:71"><name pos:start="163:54" pos:end="163:71"><name pos:start="163:54" pos:end="163:56">pic</name><index pos:start="163:57" pos:end="163:71">[<expr pos:start="163:58" pos:end="163:70"><literal type="number" pos:start="163:58" pos:end="163:60">53</literal><operator pos:start="163:60" pos:end="163:60">-</operator><name pos:start="163:61" pos:end="163:70">IRQ_OFFSET</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="165:5" pos:end="165:73"><expr pos:start="165:5" pos:end="165:72"><call pos:start="165:5" pos:end="165:72"><name pos:start="165:5" pos:end="165:24">sysbus_create_simple</name><argument_list pos:start="165:25" pos:end="165:72">(<argument pos:start="165:26" pos:end="165:39"><expr pos:start="165:26" pos:end="165:39"><literal type="string" pos:start="165:26" pos:end="165:39">"xlnx,ps7-usb"</literal></expr></argument>, <argument pos:start="165:42" pos:end="165:51"><expr pos:start="165:42" pos:end="165:51"><literal type="number" pos:start="165:42" pos:end="165:51">0xE0003000</literal></expr></argument>, <argument pos:start="165:54" pos:end="165:71"><expr pos:start="165:54" pos:end="165:71"><name pos:start="165:54" pos:end="165:71"><name pos:start="165:54" pos:end="165:56">pic</name><index pos:start="165:57" pos:end="165:71">[<expr pos:start="165:58" pos:end="165:70"><literal type="number" pos:start="165:58" pos:end="165:60">76</literal><operator pos:start="165:60" pos:end="165:60">-</operator><name pos:start="165:61" pos:end="165:70">IRQ_OFFSET</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="169:5" pos:end="169:73"><expr pos:start="169:5" pos:end="169:72"><call pos:start="169:5" pos:end="169:72"><name pos:start="169:5" pos:end="169:24">sysbus_create_simple</name><argument_list pos:start="169:25" pos:end="169:72">(<argument pos:start="169:26" pos:end="169:39"><expr pos:start="169:26" pos:end="169:39"><literal type="string" pos:start="169:26" pos:end="169:39">"cadence_uart"</literal></expr></argument>, <argument pos:start="169:42" pos:end="169:51"><expr pos:start="169:42" pos:end="169:51"><literal type="number" pos:start="169:42" pos:end="169:51">0xE0000000</literal></expr></argument>, <argument pos:start="169:54" pos:end="169:71"><expr pos:start="169:54" pos:end="169:71"><name pos:start="169:54" pos:end="169:71"><name pos:start="169:54" pos:end="169:56">pic</name><index pos:start="169:57" pos:end="169:71">[<expr pos:start="169:58" pos:end="169:70"><literal type="number" pos:start="169:58" pos:end="169:60">59</literal><operator pos:start="169:60" pos:end="169:60">-</operator><name pos:start="169:61" pos:end="169:70">IRQ_OFFSET</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="171:5" pos:end="171:73"><expr pos:start="171:5" pos:end="171:72"><call pos:start="171:5" pos:end="171:72"><name pos:start="171:5" pos:end="171:24">sysbus_create_simple</name><argument_list pos:start="171:25" pos:end="171:72">(<argument pos:start="171:26" pos:end="171:39"><expr pos:start="171:26" pos:end="171:39"><literal type="string" pos:start="171:26" pos:end="171:39">"cadence_uart"</literal></expr></argument>, <argument pos:start="171:42" pos:end="171:51"><expr pos:start="171:42" pos:end="171:51"><literal type="number" pos:start="171:42" pos:end="171:51">0xE0001000</literal></expr></argument>, <argument pos:start="171:54" pos:end="171:71"><expr pos:start="171:54" pos:end="171:71"><name pos:start="171:54" pos:end="171:71"><name pos:start="171:54" pos:end="171:56">pic</name><index pos:start="171:57" pos:end="171:71">[<expr pos:start="171:58" pos:end="171:70"><literal type="number" pos:start="171:58" pos:end="171:60">82</literal><operator pos:start="171:60" pos:end="171:60">-</operator><name pos:start="171:61" pos:end="171:70">IRQ_OFFSET</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="175:5" pos:end="177:78"><expr pos:start="175:5" pos:end="177:77"><call pos:start="175:5" pos:end="177:77"><name pos:start="175:5" pos:end="175:25">sysbus_create_varargs</name><argument_list pos:start="175:26" pos:end="177:77">(<argument pos:start="175:27" pos:end="175:39"><expr pos:start="175:27" pos:end="175:39"><literal type="string" pos:start="175:27" pos:end="175:39">"cadence_ttc"</literal></expr></argument>, <argument pos:start="175:42" pos:end="175:51"><expr pos:start="175:42" pos:end="175:51"><literal type="number" pos:start="175:42" pos:end="175:51">0xF8001000</literal></expr></argument>,

            <argument pos:start="177:13" pos:end="177:30"><expr pos:start="177:13" pos:end="177:30"><name pos:start="177:13" pos:end="177:30"><name pos:start="177:13" pos:end="177:15">pic</name><index pos:start="177:16" pos:end="177:30">[<expr pos:start="177:17" pos:end="177:29"><literal type="number" pos:start="177:17" pos:end="177:19">42</literal><operator pos:start="177:19" pos:end="177:19">-</operator><name pos:start="177:20" pos:end="177:29">IRQ_OFFSET</name></expr>]</index></name></expr></argument>, <argument pos:start="177:33" pos:end="177:50"><expr pos:start="177:33" pos:end="177:50"><name pos:start="177:33" pos:end="177:50"><name pos:start="177:33" pos:end="177:35">pic</name><index pos:start="177:36" pos:end="177:50">[<expr pos:start="177:37" pos:end="177:49"><literal type="number" pos:start="177:37" pos:end="177:39">43</literal><operator pos:start="177:39" pos:end="177:39">-</operator><name pos:start="177:40" pos:end="177:49">IRQ_OFFSET</name></expr>]</index></name></expr></argument>, <argument pos:start="177:53" pos:end="177:70"><expr pos:start="177:53" pos:end="177:70"><name pos:start="177:53" pos:end="177:70"><name pos:start="177:53" pos:end="177:55">pic</name><index pos:start="177:56" pos:end="177:70">[<expr pos:start="177:57" pos:end="177:69"><literal type="number" pos:start="177:57" pos:end="177:59">44</literal><operator pos:start="177:59" pos:end="177:59">-</operator><name pos:start="177:60" pos:end="177:69">IRQ_OFFSET</name></expr>]</index></name></expr></argument>, <argument pos:start="177:73" pos:end="177:76"><expr pos:start="177:73" pos:end="177:76"><name pos:start="177:73" pos:end="177:76">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="179:5" pos:end="181:78"><expr pos:start="179:5" pos:end="181:77"><call pos:start="179:5" pos:end="181:77"><name pos:start="179:5" pos:end="179:25">sysbus_create_varargs</name><argument_list pos:start="179:26" pos:end="181:77">(<argument pos:start="179:27" pos:end="179:39"><expr pos:start="179:27" pos:end="179:39"><literal type="string" pos:start="179:27" pos:end="179:39">"cadence_ttc"</literal></expr></argument>, <argument pos:start="179:42" pos:end="179:51"><expr pos:start="179:42" pos:end="179:51"><literal type="number" pos:start="179:42" pos:end="179:51">0xF8002000</literal></expr></argument>,

            <argument pos:start="181:13" pos:end="181:30"><expr pos:start="181:13" pos:end="181:30"><name pos:start="181:13" pos:end="181:30"><name pos:start="181:13" pos:end="181:15">pic</name><index pos:start="181:16" pos:end="181:30">[<expr pos:start="181:17" pos:end="181:29"><literal type="number" pos:start="181:17" pos:end="181:19">69</literal><operator pos:start="181:19" pos:end="181:19">-</operator><name pos:start="181:20" pos:end="181:29">IRQ_OFFSET</name></expr>]</index></name></expr></argument>, <argument pos:start="181:33" pos:end="181:50"><expr pos:start="181:33" pos:end="181:50"><name pos:start="181:33" pos:end="181:50"><name pos:start="181:33" pos:end="181:35">pic</name><index pos:start="181:36" pos:end="181:50">[<expr pos:start="181:37" pos:end="181:49"><literal type="number" pos:start="181:37" pos:end="181:39">70</literal><operator pos:start="181:39" pos:end="181:39">-</operator><name pos:start="181:40" pos:end="181:49">IRQ_OFFSET</name></expr>]</index></name></expr></argument>, <argument pos:start="181:53" pos:end="181:70"><expr pos:start="181:53" pos:end="181:70"><name pos:start="181:53" pos:end="181:70"><name pos:start="181:53" pos:end="181:55">pic</name><index pos:start="181:56" pos:end="181:70">[<expr pos:start="181:57" pos:end="181:69"><literal type="number" pos:start="181:57" pos:end="181:59">71</literal><operator pos:start="181:59" pos:end="181:59">-</operator><name pos:start="181:60" pos:end="181:69">IRQ_OFFSET</name></expr>]</index></name></expr></argument>, <argument pos:start="181:73" pos:end="181:76"><expr pos:start="181:73" pos:end="181:76"><name pos:start="181:73" pos:end="181:76">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="185:5" pos:end="199:5">for <control pos:start="185:9" pos:end="185:33">(<init pos:start="185:10" pos:end="185:15"><expr pos:start="185:10" pos:end="185:14"><name pos:start="185:10" pos:end="185:10">n</name> <operator pos:start="185:12" pos:end="185:12">=</operator> <literal type="number" pos:start="185:14" pos:end="185:14">0</literal></expr>;</init> <condition pos:start="185:17" pos:end="185:28"><expr pos:start="185:17" pos:end="185:27"><name pos:start="185:17" pos:end="185:17">n</name> <operator pos:start="185:19" pos:end="185:19">&lt;</operator> <name pos:start="185:21" pos:end="185:27">nb_nics</name></expr>;</condition> <incr pos:start="185:30" pos:end="185:32"><expr pos:start="185:30" pos:end="185:32"><name pos:start="185:30" pos:end="185:30">n</name><operator pos:start="185:31" pos:end="185:32">++</operator></expr></incr>)</control> <block pos:start="185:35" pos:end="199:5">{<block_content pos:start="187:9" pos:end="197:9">

        <expr_stmt pos:start="187:9" pos:end="187:26"><expr pos:start="187:9" pos:end="187:25"><name pos:start="187:9" pos:end="187:10">nd</name> <operator pos:start="187:12" pos:end="187:12">=</operator> <operator pos:start="187:14" pos:end="187:14">&amp;</operator><name pos:start="187:15" pos:end="187:25"><name pos:start="187:15" pos:end="187:22">nd_table</name><index pos:start="187:23" pos:end="187:25">[<expr pos:start="187:24" pos:end="187:24"><name pos:start="187:24" pos:end="187:24">n</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="189:9" pos:end="197:9"><if pos:start="189:9" pos:end="193:9">if <condition pos:start="189:12" pos:end="189:19">(<expr pos:start="189:13" pos:end="189:18"><name pos:start="189:13" pos:end="189:13">n</name> <operator pos:start="189:15" pos:end="189:16">==</operator> <literal type="number" pos:start="189:18" pos:end="189:18">0</literal></expr>)</condition> <block pos:start="189:21" pos:end="193:9">{<block_content pos:start="191:13" pos:end="191:57">

            <expr_stmt pos:start="191:13" pos:end="191:57"><expr pos:start="191:13" pos:end="191:56"><call pos:start="191:13" pos:end="191:56"><name pos:start="191:13" pos:end="191:20">gem_init</name><argument_list pos:start="191:21" pos:end="191:56">(<argument pos:start="191:22" pos:end="191:23"><expr pos:start="191:22" pos:end="191:23"><name pos:start="191:22" pos:end="191:23">nd</name></expr></argument>, <argument pos:start="191:26" pos:end="191:35"><expr pos:start="191:26" pos:end="191:35"><literal type="number" pos:start="191:26" pos:end="191:35">0xE000B000</literal></expr></argument>, <argument pos:start="191:38" pos:end="191:55"><expr pos:start="191:38" pos:end="191:55"><name pos:start="191:38" pos:end="191:55"><name pos:start="191:38" pos:end="191:40">pic</name><index pos:start="191:41" pos:end="191:55">[<expr pos:start="191:42" pos:end="191:54"><literal type="number" pos:start="191:42" pos:end="191:44">54</literal><operator pos:start="191:44" pos:end="191:44">-</operator><name pos:start="191:45" pos:end="191:54">IRQ_OFFSET</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="193:11" pos:end="197:9">else if <condition pos:start="193:19" pos:end="193:26">(<expr pos:start="193:20" pos:end="193:25"><name pos:start="193:20" pos:end="193:20">n</name> <operator pos:start="193:22" pos:end="193:23">==</operator> <literal type="number" pos:start="193:25" pos:end="193:25">1</literal></expr>)</condition> <block pos:start="193:28" pos:end="197:9">{<block_content pos:start="195:13" pos:end="195:57">

            <expr_stmt pos:start="195:13" pos:end="195:57"><expr pos:start="195:13" pos:end="195:56"><call pos:start="195:13" pos:end="195:56"><name pos:start="195:13" pos:end="195:20">gem_init</name><argument_list pos:start="195:21" pos:end="195:56">(<argument pos:start="195:22" pos:end="195:23"><expr pos:start="195:22" pos:end="195:23"><name pos:start="195:22" pos:end="195:23">nd</name></expr></argument>, <argument pos:start="195:26" pos:end="195:35"><expr pos:start="195:26" pos:end="195:35"><literal type="number" pos:start="195:26" pos:end="195:35">0xE000C000</literal></expr></argument>, <argument pos:start="195:38" pos:end="195:55"><expr pos:start="195:38" pos:end="195:55"><name pos:start="195:38" pos:end="195:55"><name pos:start="195:38" pos:end="195:40">pic</name><index pos:start="195:41" pos:end="195:55">[<expr pos:start="195:42" pos:end="195:54"><literal type="number" pos:start="195:42" pos:end="195:44">77</literal><operator pos:start="195:44" pos:end="195:44">-</operator><name pos:start="195:45" pos:end="195:54">IRQ_OFFSET</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="203:5" pos:end="203:45"><expr pos:start="203:5" pos:end="203:44"><name pos:start="203:5" pos:end="203:7">dev</name> <operator pos:start="203:9" pos:end="203:9">=</operator> <call pos:start="203:11" pos:end="203:44"><name pos:start="203:11" pos:end="203:21">qdev_create</name><argument_list pos:start="203:22" pos:end="203:44">(<argument pos:start="203:23" pos:end="203:26"><expr pos:start="203:23" pos:end="203:26"><name pos:start="203:23" pos:end="203:26">NULL</name></expr></argument>, <argument pos:start="203:29" pos:end="203:43"><expr pos:start="203:29" pos:end="203:43"><literal type="string" pos:start="203:29" pos:end="203:43">"generic-sdhci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="205:5" pos:end="205:26"><expr pos:start="205:5" pos:end="205:25"><call pos:start="205:5" pos:end="205:25"><name pos:start="205:5" pos:end="205:20">qdev_init_nofail</name><argument_list pos:start="205:21" pos:end="205:25">(<argument pos:start="205:22" pos:end="205:24"><expr pos:start="205:22" pos:end="205:24"><name pos:start="205:22" pos:end="205:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="207:5" pos:end="207:56"><expr pos:start="207:5" pos:end="207:55"><call pos:start="207:5" pos:end="207:55"><name pos:start="207:5" pos:end="207:19">sysbus_mmio_map</name><argument_list pos:start="207:20" pos:end="207:55">(<argument pos:start="207:21" pos:end="207:39"><expr pos:start="207:21" pos:end="207:39"><call pos:start="207:21" pos:end="207:39"><name pos:start="207:21" pos:end="207:34">SYS_BUS_DEVICE</name><argument_list pos:start="207:35" pos:end="207:39">(<argument pos:start="207:36" pos:end="207:38"><expr pos:start="207:36" pos:end="207:38"><name pos:start="207:36" pos:end="207:38">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="207:42" pos:end="207:42"><expr pos:start="207:42" pos:end="207:42"><literal type="number" pos:start="207:42" pos:end="207:42">0</literal></expr></argument>, <argument pos:start="207:45" pos:end="207:54"><expr pos:start="207:45" pos:end="207:54"><literal type="number" pos:start="207:45" pos:end="207:54">0xE0100000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="209:5" pos:end="209:67"><expr pos:start="209:5" pos:end="209:66"><call pos:start="209:5" pos:end="209:66"><name pos:start="209:5" pos:end="209:22">sysbus_connect_irq</name><argument_list pos:start="209:23" pos:end="209:66">(<argument pos:start="209:24" pos:end="209:42"><expr pos:start="209:24" pos:end="209:42"><call pos:start="209:24" pos:end="209:42"><name pos:start="209:24" pos:end="209:37">SYS_BUS_DEVICE</name><argument_list pos:start="209:38" pos:end="209:42">(<argument pos:start="209:39" pos:end="209:41"><expr pos:start="209:39" pos:end="209:41"><name pos:start="209:39" pos:end="209:41">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="209:45" pos:end="209:45"><expr pos:start="209:45" pos:end="209:45"><literal type="number" pos:start="209:45" pos:end="209:45">0</literal></expr></argument>, <argument pos:start="209:48" pos:end="209:65"><expr pos:start="209:48" pos:end="209:65"><name pos:start="209:48" pos:end="209:65"><name pos:start="209:48" pos:end="209:50">pic</name><index pos:start="209:51" pos:end="209:65">[<expr pos:start="209:52" pos:end="209:64"><literal type="number" pos:start="209:52" pos:end="209:54">56</literal><operator pos:start="209:54" pos:end="209:54">-</operator><name pos:start="209:55" pos:end="209:64">IRQ_OFFSET</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="213:5" pos:end="213:45"><expr pos:start="213:5" pos:end="213:44"><name pos:start="213:5" pos:end="213:7">dev</name> <operator pos:start="213:9" pos:end="213:9">=</operator> <call pos:start="213:11" pos:end="213:44"><name pos:start="213:11" pos:end="213:21">qdev_create</name><argument_list pos:start="213:22" pos:end="213:44">(<argument pos:start="213:23" pos:end="213:26"><expr pos:start="213:23" pos:end="213:26"><name pos:start="213:23" pos:end="213:26">NULL</name></expr></argument>, <argument pos:start="213:29" pos:end="213:43"><expr pos:start="213:29" pos:end="213:43"><literal type="string" pos:start="213:29" pos:end="213:43">"generic-sdhci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="215:5" pos:end="215:26"><expr pos:start="215:5" pos:end="215:25"><call pos:start="215:5" pos:end="215:25"><name pos:start="215:5" pos:end="215:20">qdev_init_nofail</name><argument_list pos:start="215:21" pos:end="215:25">(<argument pos:start="215:22" pos:end="215:24"><expr pos:start="215:22" pos:end="215:24"><name pos:start="215:22" pos:end="215:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="217:5" pos:end="217:56"><expr pos:start="217:5" pos:end="217:55"><call pos:start="217:5" pos:end="217:55"><name pos:start="217:5" pos:end="217:19">sysbus_mmio_map</name><argument_list pos:start="217:20" pos:end="217:55">(<argument pos:start="217:21" pos:end="217:39"><expr pos:start="217:21" pos:end="217:39"><call pos:start="217:21" pos:end="217:39"><name pos:start="217:21" pos:end="217:34">SYS_BUS_DEVICE</name><argument_list pos:start="217:35" pos:end="217:39">(<argument pos:start="217:36" pos:end="217:38"><expr pos:start="217:36" pos:end="217:38"><name pos:start="217:36" pos:end="217:38">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="217:42" pos:end="217:42"><expr pos:start="217:42" pos:end="217:42"><literal type="number" pos:start="217:42" pos:end="217:42">0</literal></expr></argument>, <argument pos:start="217:45" pos:end="217:54"><expr pos:start="217:45" pos:end="217:54"><literal type="number" pos:start="217:45" pos:end="217:54">0xE0101000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="219:5" pos:end="219:67"><expr pos:start="219:5" pos:end="219:66"><call pos:start="219:5" pos:end="219:66"><name pos:start="219:5" pos:end="219:22">sysbus_connect_irq</name><argument_list pos:start="219:23" pos:end="219:66">(<argument pos:start="219:24" pos:end="219:42"><expr pos:start="219:24" pos:end="219:42"><call pos:start="219:24" pos:end="219:42"><name pos:start="219:24" pos:end="219:37">SYS_BUS_DEVICE</name><argument_list pos:start="219:38" pos:end="219:42">(<argument pos:start="219:39" pos:end="219:41"><expr pos:start="219:39" pos:end="219:41"><name pos:start="219:39" pos:end="219:41">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="219:45" pos:end="219:45"><expr pos:start="219:45" pos:end="219:45"><literal type="number" pos:start="219:45" pos:end="219:45">0</literal></expr></argument>, <argument pos:start="219:48" pos:end="219:65"><expr pos:start="219:48" pos:end="219:65"><name pos:start="219:48" pos:end="219:65"><name pos:start="219:48" pos:end="219:50">pic</name><index pos:start="219:51" pos:end="219:65">[<expr pos:start="219:52" pos:end="219:64"><literal type="number" pos:start="219:52" pos:end="219:54">79</literal><operator pos:start="219:54" pos:end="219:54">-</operator><name pos:start="219:55" pos:end="219:64">IRQ_OFFSET</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="223:5" pos:end="223:37"><expr pos:start="223:5" pos:end="223:36"><name pos:start="223:5" pos:end="223:7">dev</name> <operator pos:start="223:9" pos:end="223:9">=</operator> <call pos:start="223:11" pos:end="223:36"><name pos:start="223:11" pos:end="223:21">qdev_create</name><argument_list pos:start="223:22" pos:end="223:36">(<argument pos:start="223:23" pos:end="223:26"><expr pos:start="223:23" pos:end="223:26"><name pos:start="223:23" pos:end="223:26">NULL</name></expr></argument>, <argument pos:start="223:29" pos:end="223:35"><expr pos:start="223:29" pos:end="223:35"><literal type="string" pos:start="223:29" pos:end="223:35">"pl330"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="225:5" pos:end="225:46"><expr pos:start="225:5" pos:end="225:45"><call pos:start="225:5" pos:end="225:45"><name pos:start="225:5" pos:end="225:23">qdev_prop_set_uint8</name><argument_list pos:start="225:24" pos:end="225:45">(<argument pos:start="225:25" pos:end="225:27"><expr pos:start="225:25" pos:end="225:27"><name pos:start="225:25" pos:end="225:27">dev</name></expr></argument>, <argument pos:start="225:30" pos:end="225:40"><expr pos:start="225:30" pos:end="225:40"><literal type="string" pos:start="225:30" pos:end="225:40">"num_chnls"</literal></expr></argument>,  <argument pos:start="225:44" pos:end="225:44"><expr pos:start="225:44" pos:end="225:44"><literal type="number" pos:start="225:44" pos:end="225:44">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="227:5" pos:end="227:51"><expr pos:start="227:5" pos:end="227:50"><call pos:start="227:5" pos:end="227:50"><name pos:start="227:5" pos:end="227:23">qdev_prop_set_uint8</name><argument_list pos:start="227:24" pos:end="227:50">(<argument pos:start="227:25" pos:end="227:27"><expr pos:start="227:25" pos:end="227:27"><name pos:start="227:25" pos:end="227:27">dev</name></expr></argument>, <argument pos:start="227:30" pos:end="227:45"><expr pos:start="227:30" pos:end="227:45"><literal type="string" pos:start="227:30" pos:end="227:45">"num_periph_req"</literal></expr></argument>,  <argument pos:start="227:49" pos:end="227:49"><expr pos:start="227:49" pos:end="227:49"><literal type="number" pos:start="227:49" pos:end="227:49">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="229:5" pos:end="229:48"><expr pos:start="229:5" pos:end="229:47"><call pos:start="229:5" pos:end="229:47"><name pos:start="229:5" pos:end="229:23">qdev_prop_set_uint8</name><argument_list pos:start="229:24" pos:end="229:47">(<argument pos:start="229:25" pos:end="229:27"><expr pos:start="229:25" pos:end="229:27"><name pos:start="229:25" pos:end="229:27">dev</name></expr></argument>, <argument pos:start="229:30" pos:end="229:41"><expr pos:start="229:30" pos:end="229:41"><literal type="string" pos:start="229:30" pos:end="229:41">"num_events"</literal></expr></argument>,  <argument pos:start="229:45" pos:end="229:46"><expr pos:start="229:45" pos:end="229:46"><literal type="number" pos:start="229:45" pos:end="229:46">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="233:5" pos:end="233:48"><expr pos:start="233:5" pos:end="233:47"><call pos:start="233:5" pos:end="233:47"><name pos:start="233:5" pos:end="233:23">qdev_prop_set_uint8</name><argument_list pos:start="233:24" pos:end="233:47">(<argument pos:start="233:25" pos:end="233:27"><expr pos:start="233:25" pos:end="233:27"><name pos:start="233:25" pos:end="233:27">dev</name></expr></argument>, <argument pos:start="233:30" pos:end="233:41"><expr pos:start="233:30" pos:end="233:41"><literal type="string" pos:start="233:30" pos:end="233:41">"data_width"</literal></expr></argument>,  <argument pos:start="233:45" pos:end="233:46"><expr pos:start="233:45" pos:end="233:46"><literal type="number" pos:start="233:45" pos:end="233:46">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="235:5" pos:end="235:43"><expr pos:start="235:5" pos:end="235:42"><call pos:start="235:5" pos:end="235:42"><name pos:start="235:5" pos:end="235:23">qdev_prop_set_uint8</name><argument_list pos:start="235:24" pos:end="235:42">(<argument pos:start="235:25" pos:end="235:27"><expr pos:start="235:25" pos:end="235:27"><name pos:start="235:25" pos:end="235:27">dev</name></expr></argument>, <argument pos:start="235:30" pos:end="235:37"><expr pos:start="235:30" pos:end="235:37"><literal type="string" pos:start="235:30" pos:end="235:37">"wr_cap"</literal></expr></argument>,  <argument pos:start="235:41" pos:end="235:41"><expr pos:start="235:41" pos:end="235:41"><literal type="number" pos:start="235:41" pos:end="235:41">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="237:5" pos:end="237:46"><expr pos:start="237:5" pos:end="237:45"><call pos:start="237:5" pos:end="237:45"><name pos:start="237:5" pos:end="237:23">qdev_prop_set_uint8</name><argument_list pos:start="237:24" pos:end="237:45">(<argument pos:start="237:25" pos:end="237:27"><expr pos:start="237:25" pos:end="237:27"><name pos:start="237:25" pos:end="237:27">dev</name></expr></argument>, <argument pos:start="237:30" pos:end="237:39"><expr pos:start="237:30" pos:end="237:39"><literal type="string" pos:start="237:30" pos:end="237:39">"wr_q_dep"</literal></expr></argument>,  <argument pos:start="237:43" pos:end="237:44"><expr pos:start="237:43" pos:end="237:44"><literal type="number" pos:start="237:43" pos:end="237:44">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="239:5" pos:end="239:43"><expr pos:start="239:5" pos:end="239:42"><call pos:start="239:5" pos:end="239:42"><name pos:start="239:5" pos:end="239:23">qdev_prop_set_uint8</name><argument_list pos:start="239:24" pos:end="239:42">(<argument pos:start="239:25" pos:end="239:27"><expr pos:start="239:25" pos:end="239:27"><name pos:start="239:25" pos:end="239:27">dev</name></expr></argument>, <argument pos:start="239:30" pos:end="239:37"><expr pos:start="239:30" pos:end="239:37"><literal type="string" pos:start="239:30" pos:end="239:37">"rd_cap"</literal></expr></argument>,  <argument pos:start="239:41" pos:end="239:41"><expr pos:start="239:41" pos:end="239:41"><literal type="number" pos:start="239:41" pos:end="239:41">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="241:5" pos:end="241:46"><expr pos:start="241:5" pos:end="241:45"><call pos:start="241:5" pos:end="241:45"><name pos:start="241:5" pos:end="241:23">qdev_prop_set_uint8</name><argument_list pos:start="241:24" pos:end="241:45">(<argument pos:start="241:25" pos:end="241:27"><expr pos:start="241:25" pos:end="241:27"><name pos:start="241:25" pos:end="241:27">dev</name></expr></argument>, <argument pos:start="241:30" pos:end="241:39"><expr pos:start="241:30" pos:end="241:39"><literal type="string" pos:start="241:30" pos:end="241:39">"rd_q_dep"</literal></expr></argument>,  <argument pos:start="241:43" pos:end="241:44"><expr pos:start="241:43" pos:end="241:44"><literal type="number" pos:start="241:43" pos:end="241:44">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="243:5" pos:end="243:55"><expr pos:start="243:5" pos:end="243:54"><call pos:start="243:5" pos:end="243:54"><name pos:start="243:5" pos:end="243:24">qdev_prop_set_uint16</name><argument_list pos:start="243:25" pos:end="243:54">(<argument pos:start="243:26" pos:end="243:28"><expr pos:start="243:26" pos:end="243:28"><name pos:start="243:26" pos:end="243:28">dev</name></expr></argument>, <argument pos:start="243:31" pos:end="243:47"><expr pos:start="243:31" pos:end="243:47"><literal type="string" pos:start="243:31" pos:end="243:47">"data_buffer_dep"</literal></expr></argument>,  <argument pos:start="243:51" pos:end="243:53"><expr pos:start="243:51" pos:end="243:53"><literal type="number" pos:start="243:51" pos:end="243:53">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="247:5" pos:end="247:26"><expr pos:start="247:5" pos:end="247:25"><call pos:start="247:5" pos:end="247:25"><name pos:start="247:5" pos:end="247:20">qdev_init_nofail</name><argument_list pos:start="247:21" pos:end="247:25">(<argument pos:start="247:22" pos:end="247:24"><expr pos:start="247:22" pos:end="247:24"><name pos:start="247:22" pos:end="247:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="249:5" pos:end="249:33"><expr pos:start="249:5" pos:end="249:32"><name pos:start="249:5" pos:end="249:10">busdev</name> <operator pos:start="249:12" pos:end="249:12">=</operator> <call pos:start="249:14" pos:end="249:32"><name pos:start="249:14" pos:end="249:27">SYS_BUS_DEVICE</name><argument_list pos:start="249:28" pos:end="249:32">(<argument pos:start="249:29" pos:end="249:31"><expr pos:start="249:29" pos:end="249:31"><name pos:start="249:29" pos:end="249:31">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="251:5" pos:end="251:43"><expr pos:start="251:5" pos:end="251:42"><call pos:start="251:5" pos:end="251:42"><name pos:start="251:5" pos:end="251:19">sysbus_mmio_map</name><argument_list pos:start="251:20" pos:end="251:42">(<argument pos:start="251:21" pos:end="251:26"><expr pos:start="251:21" pos:end="251:26"><name pos:start="251:21" pos:end="251:26">busdev</name></expr></argument>, <argument pos:start="251:29" pos:end="251:29"><expr pos:start="251:29" pos:end="251:29"><literal type="number" pos:start="251:29" pos:end="251:29">0</literal></expr></argument>, <argument pos:start="251:32" pos:end="251:41"><expr pos:start="251:32" pos:end="251:41"><literal type="number" pos:start="251:32" pos:end="251:41">0xF8003000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="253:5" pos:end="253:54"><expr pos:start="253:5" pos:end="253:53"><call pos:start="253:5" pos:end="253:53"><name pos:start="253:5" pos:end="253:22">sysbus_connect_irq</name><argument_list pos:start="253:23" pos:end="253:53">(<argument pos:start="253:24" pos:end="253:29"><expr pos:start="253:24" pos:end="253:29"><name pos:start="253:24" pos:end="253:29">busdev</name></expr></argument>, <argument pos:start="253:32" pos:end="253:32"><expr pos:start="253:32" pos:end="253:32"><literal type="number" pos:start="253:32" pos:end="253:32">0</literal></expr></argument>, <argument pos:start="253:35" pos:end="253:52"><expr pos:start="253:35" pos:end="253:52"><name pos:start="253:35" pos:end="253:52"><name pos:start="253:35" pos:end="253:37">pic</name><index pos:start="253:38" pos:end="253:52">[<expr pos:start="253:39" pos:end="253:51"><literal type="number" pos:start="253:39" pos:end="253:41">45</literal><operator pos:start="253:41" pos:end="253:41">-</operator><name pos:start="253:42" pos:end="253:51">IRQ_OFFSET</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="253:56" pos:end="253:75">/* abort irq line */</comment>

    <for pos:start="255:5" pos:end="259:5">for <control pos:start="255:9" pos:end="255:27">(<init pos:start="255:10" pos:end="255:15"><expr pos:start="255:10" pos:end="255:14"><name pos:start="255:10" pos:end="255:10">n</name> <operator pos:start="255:12" pos:end="255:12">=</operator> <literal type="number" pos:start="255:14" pos:end="255:14">0</literal></expr>;</init> <condition pos:start="255:17" pos:end="255:22"><expr pos:start="255:17" pos:end="255:21"><name pos:start="255:17" pos:end="255:17">n</name> <operator pos:start="255:19" pos:end="255:19">&lt;</operator> <literal type="number" pos:start="255:21" pos:end="255:21">8</literal></expr>;</condition> <incr pos:start="255:24" pos:end="255:26"><expr pos:start="255:24" pos:end="255:26"><operator pos:start="255:24" pos:end="255:25">++</operator><name pos:start="255:26" pos:end="255:26">n</name></expr></incr>)</control> <block pos:start="255:29" pos:end="259:5">{<block_content pos:start="257:9" pos:end="257:73"> <comment type="block" pos:start="255:31" pos:end="255:46">/* event irqs */</comment>

        <expr_stmt pos:start="257:9" pos:end="257:73"><expr pos:start="257:9" pos:end="257:72"><call pos:start="257:9" pos:end="257:72"><name pos:start="257:9" pos:end="257:26">sysbus_connect_irq</name><argument_list pos:start="257:27" pos:end="257:72">(<argument pos:start="257:28" pos:end="257:33"><expr pos:start="257:28" pos:end="257:33"><name pos:start="257:28" pos:end="257:33">busdev</name></expr></argument>, <argument pos:start="257:36" pos:end="257:40"><expr pos:start="257:36" pos:end="257:40"><name pos:start="257:36" pos:end="257:36">n</name> <operator pos:start="257:38" pos:end="257:38">+</operator> <literal type="number" pos:start="257:40" pos:end="257:40">1</literal></expr></argument>, <argument pos:start="257:43" pos:end="257:71"><expr pos:start="257:43" pos:end="257:71"><name pos:start="257:43" pos:end="257:71"><name pos:start="257:43" pos:end="257:45">pic</name><index pos:start="257:46" pos:end="257:71">[<expr pos:start="257:47" pos:end="257:70"><name pos:start="257:47" pos:end="257:57"><name pos:start="257:47" pos:end="257:54">dma_irqs</name><index pos:start="257:55" pos:end="257:57">[<expr pos:start="257:56" pos:end="257:56"><name pos:start="257:56" pos:end="257:56">n</name></expr>]</index></name> <operator pos:start="257:59" pos:end="257:59">-</operator> <name pos:start="257:61" pos:end="257:70">IRQ_OFFSET</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="263:5" pos:end="263:35"><expr pos:start="263:5" pos:end="263:34"><name pos:start="263:5" pos:end="263:23"><name pos:start="263:5" pos:end="263:14">zynq_binfo</name><operator pos:start="263:15" pos:end="263:15">.</operator><name pos:start="263:16" pos:end="263:23">ram_size</name></name> <operator pos:start="263:25" pos:end="263:25">=</operator> <name pos:start="263:27" pos:end="263:34">ram_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="265:5" pos:end="265:49"><expr pos:start="265:5" pos:end="265:48"><name pos:start="265:5" pos:end="265:30"><name pos:start="265:5" pos:end="265:14">zynq_binfo</name><operator pos:start="265:15" pos:end="265:15">.</operator><name pos:start="265:16" pos:end="265:30">kernel_filename</name></name> <operator pos:start="265:32" pos:end="265:32">=</operator> <name pos:start="265:34" pos:end="265:48">kernel_filename</name></expr>;</expr_stmt>

    <expr_stmt pos:start="267:5" pos:end="267:47"><expr pos:start="267:5" pos:end="267:46"><name pos:start="267:5" pos:end="267:29"><name pos:start="267:5" pos:end="267:14">zynq_binfo</name><operator pos:start="267:15" pos:end="267:15">.</operator><name pos:start="267:16" pos:end="267:29">kernel_cmdline</name></name> <operator pos:start="267:31" pos:end="267:31">=</operator> <name pos:start="267:33" pos:end="267:46">kernel_cmdline</name></expr>;</expr_stmt>

    <expr_stmt pos:start="269:5" pos:end="269:49"><expr pos:start="269:5" pos:end="269:48"><name pos:start="269:5" pos:end="269:30"><name pos:start="269:5" pos:end="269:14">zynq_binfo</name><operator pos:start="269:15" pos:end="269:15">.</operator><name pos:start="269:16" pos:end="269:30">initrd_filename</name></name> <operator pos:start="269:32" pos:end="269:32">=</operator> <name pos:start="269:34" pos:end="269:48">initrd_filename</name></expr>;</expr_stmt>

    <expr_stmt pos:start="271:5" pos:end="271:27"><expr pos:start="271:5" pos:end="271:26"><name pos:start="271:5" pos:end="271:22"><name pos:start="271:5" pos:end="271:14">zynq_binfo</name><operator pos:start="271:15" pos:end="271:15">.</operator><name pos:start="271:16" pos:end="271:22">nb_cpus</name></name> <operator pos:start="271:24" pos:end="271:24">=</operator> <literal type="number" pos:start="271:26" pos:end="271:26">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="273:5" pos:end="273:32"><expr pos:start="273:5" pos:end="273:31"><name pos:start="273:5" pos:end="273:23"><name pos:start="273:5" pos:end="273:14">zynq_binfo</name><operator pos:start="273:15" pos:end="273:15">.</operator><name pos:start="273:16" pos:end="273:23">board_id</name></name> <operator pos:start="273:25" pos:end="273:25">=</operator> <literal type="number" pos:start="273:27" pos:end="273:31">0xd32</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="275:5" pos:end="275:32"><expr pos:start="275:5" pos:end="275:31"><name pos:start="275:5" pos:end="275:27"><name pos:start="275:5" pos:end="275:14">zynq_binfo</name><operator pos:start="275:15" pos:end="275:15">.</operator><name pos:start="275:16" pos:end="275:27">loader_start</name></name> <operator pos:start="275:29" pos:end="275:29">=</operator> <literal type="number" pos:start="275:31" pos:end="275:31">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="277:5" pos:end="277:53"><expr pos:start="277:5" pos:end="277:52"><call pos:start="277:5" pos:end="277:52"><name pos:start="277:5" pos:end="277:19">arm_load_kernel</name><argument_list pos:start="277:20" pos:end="277:52">(<argument pos:start="277:21" pos:end="277:38"><expr pos:start="277:21" pos:end="277:38"><call pos:start="277:21" pos:end="277:38"><name pos:start="277:21" pos:end="277:27">ARM_CPU</name><argument_list pos:start="277:28" pos:end="277:38">(<argument pos:start="277:29" pos:end="277:37"><expr pos:start="277:29" pos:end="277:37"><name pos:start="277:29" pos:end="277:37">first_cpu</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="277:41" pos:end="277:51"><expr pos:start="277:41" pos:end="277:51"><operator pos:start="277:41" pos:end="277:41">&amp;</operator><name pos:start="277:42" pos:end="277:51">zynq_binfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
