<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20673.c" pos:tabs="8"><function pos:start="1:1" pos:end="199:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:39">vhdx_create_new_region_table</name><parameter_list pos:start="1:40" pos:end="15:66">(<parameter pos:start="1:41" pos:end="1:60"><decl pos:start="1:41" pos:end="1:60"><type pos:start="1:41" pos:end="1:60"><name pos:start="1:41" pos:end="1:56">BlockDriverState</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:60">bs</name></decl></parameter>,

                                        <parameter pos:start="3:41" pos:end="3:59"><decl pos:start="3:41" pos:end="3:59"><type pos:start="3:41" pos:end="3:59"><name pos:start="3:41" pos:end="3:48">uint64_t</name></type> <name pos:start="3:50" pos:end="3:59">image_size</name></decl></parameter>,

                                        <parameter pos:start="5:41" pos:end="5:59"><decl pos:start="5:41" pos:end="5:59"><type pos:start="5:41" pos:end="5:59"><name pos:start="5:41" pos:end="5:48">uint32_t</name></type> <name pos:start="5:50" pos:end="5:59">block_size</name></decl></parameter>,

                                        <parameter pos:start="7:41" pos:end="7:60"><decl pos:start="7:41" pos:end="7:60"><type pos:start="7:41" pos:end="7:60"><name pos:start="7:41" pos:end="7:48">uint32_t</name></type> <name pos:start="7:50" pos:end="7:60">sector_size</name></decl></parameter>,

                                        <parameter pos:start="9:41" pos:end="9:57"><decl pos:start="9:41" pos:end="9:57"><type pos:start="9:41" pos:end="9:57"><name pos:start="9:41" pos:end="9:48">uint32_t</name></type> <name pos:start="9:50" pos:end="9:57">log_size</name></decl></parameter>,

                                        <parameter pos:start="11:41" pos:end="11:60"><decl pos:start="11:41" pos:end="11:60"><type pos:start="11:41" pos:end="11:60"><name pos:start="11:41" pos:end="11:44">bool</name></type> <name pos:start="11:46" pos:end="11:60">use_zero_blocks</name></decl></parameter>,

                                        <parameter pos:start="13:41" pos:end="13:58"><decl pos:start="13:41" pos:end="13:58"><type pos:start="13:41" pos:end="13:58"><name pos:start="13:41" pos:end="13:53">VHDXImageType</name></type> <name pos:start="13:55" pos:end="13:58">type</name></decl></parameter>,

                                        <parameter pos:start="15:41" pos:end="15:65"><decl pos:start="15:41" pos:end="15:65"><type pos:start="15:41" pos:end="15:65"><name pos:start="15:41" pos:end="15:48">uint64_t</name> <modifier pos:start="15:50" pos:end="15:50">*</modifier></type><name pos:start="15:51" pos:end="15:65">metadata_offset</name></decl></parameter>)</parameter_list>

<block pos:start="17:1" pos:end="199:1">{<block_content pos:start="19:5" pos:end="197:15">

    <decl_stmt pos:start="19:5" pos:end="19:16"><decl pos:start="19:5" pos:end="19:15"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:11">ret</name> <init pos:start="19:13" pos:end="19:15">= <expr pos:start="19:15" pos:end="19:15"><literal type="number" pos:start="19:15" pos:end="19:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:24"><decl pos:start="21:5" pos:end="21:23"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">uint32_t</name></type> <name pos:start="21:14" pos:end="21:19">offset</name> <init pos:start="21:21" pos:end="21:23">= <expr pos:start="21:23" pos:end="21:23"><literal type="number" pos:start="21:23" pos:end="21:23">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:24"><decl pos:start="23:5" pos:end="23:23"><type pos:start="23:5" pos:end="23:10"><name pos:start="23:5" pos:end="23:8">void</name> <modifier pos:start="23:10" pos:end="23:10">*</modifier></type><name pos:start="23:11" pos:end="23:16">buffer</name> <init pos:start="23:18" pos:end="23:23">= <expr pos:start="23:20" pos:end="23:23"><name pos:start="23:20" pos:end="23:23">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:29"><decl pos:start="25:5" pos:end="25:28"><type pos:start="25:5" pos:end="25:12"><name pos:start="25:5" pos:end="25:12">uint64_t</name></type> <name pos:start="25:14" pos:end="25:28">bat_file_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:24"><decl pos:start="27:5" pos:end="27:23"><type pos:start="27:5" pos:end="27:12"><name pos:start="27:5" pos:end="27:12">uint32_t</name></type> <name pos:start="27:14" pos:end="27:23">bat_length</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:28"><decl pos:start="29:5" pos:end="29:27"><type pos:start="29:5" pos:end="29:19"><name pos:start="29:5" pos:end="29:17">BDRVVHDXState</name> <modifier pos:start="29:19" pos:end="29:19">*</modifier></type><name pos:start="29:20" pos:end="29:20">s</name> <init pos:start="29:22" pos:end="29:27">= <expr pos:start="29:24" pos:end="29:27"><name pos:start="29:24" pos:end="29:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:40"><decl pos:start="31:5" pos:end="31:39"><type pos:start="31:5" pos:end="31:27"><name pos:start="31:5" pos:end="31:25">VHDXRegionTableHeader</name> <modifier pos:start="31:27" pos:end="31:27">*</modifier></type><name pos:start="31:28" pos:end="31:39">region_table</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:33"><decl pos:start="33:5" pos:end="33:32"><type pos:start="33:5" pos:end="33:26"><name pos:start="33:5" pos:end="33:24">VHDXRegionTableEntry</name> <modifier pos:start="33:26" pos:end="33:26">*</modifier></type><name pos:start="33:27" pos:end="33:32">rt_bat</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:38"><decl pos:start="35:5" pos:end="35:37"><type pos:start="35:5" pos:end="35:26"><name pos:start="35:5" pos:end="35:24">VHDXRegionTableEntry</name> <modifier pos:start="35:26" pos:end="35:26">*</modifier></type><name pos:start="35:27" pos:end="35:37">rt_metadata</name></decl>;</decl_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:36"><expr pos:start="39:5" pos:end="39:35"><call pos:start="39:5" pos:end="39:35"><name pos:start="39:5" pos:end="39:10">assert</name><argument_list pos:start="39:11" pos:end="39:35">(<argument pos:start="39:12" pos:end="39:34"><expr pos:start="39:12" pos:end="39:34"><name pos:start="39:12" pos:end="39:26">metadata_offset</name> <operator pos:start="39:28" pos:end="39:29">!=</operator> <name pos:start="39:31" pos:end="39:34">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="43:5" pos:end="45:73">/* Populate enough of the BDRVVHDXState to be able to use the

     * pre-existing BAT calculation, translation, and update functions */</comment>

    <expr_stmt pos:start="47:5" pos:end="47:41"><expr pos:start="47:5" pos:end="47:40"><name pos:start="47:5" pos:end="47:5">s</name> <operator pos:start="47:7" pos:end="47:7">=</operator> <call pos:start="47:9" pos:end="47:40"><name pos:start="47:9" pos:end="47:17">g_malloc0</name><argument_list pos:start="47:18" pos:end="47:40">(<argument pos:start="47:19" pos:end="47:39"><expr pos:start="47:19" pos:end="47:39"><sizeof pos:start="47:19" pos:end="47:39">sizeof<argument_list pos:start="47:25" pos:end="47:39">(<argument pos:start="47:26" pos:end="47:38"><expr pos:start="47:26" pos:end="47:38"><name pos:start="47:26" pos:end="47:38">BDRVVHDXState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="51:5" pos:end="53:68"><expr pos:start="51:5" pos:end="53:67"><name pos:start="51:5" pos:end="51:18"><name pos:start="51:5" pos:end="51:5">s</name><operator pos:start="51:6" pos:end="51:7">-&gt;</operator><name pos:start="51:8" pos:end="51:18">chunk_ratio</name></name> <operator pos:start="51:20" pos:end="51:20">=</operator> <operator pos:start="51:22" pos:end="51:22">(</operator><name pos:start="51:23" pos:end="51:48">VHDX_MAX_SECTORS_PER_BLOCK</name><operator pos:start="51:49" pos:end="51:49">)</operator> <operator pos:start="51:51" pos:end="51:51">*</operator>

                     <operator pos:start="53:22" pos:end="53:22">(</operator><name pos:start="53:23" pos:end="53:30">uint64_t</name><operator pos:start="53:31" pos:end="53:31">)</operator> <name pos:start="53:33" pos:end="53:43">sector_size</name> <operator pos:start="53:45" pos:end="53:45">/</operator> <operator pos:start="53:47" pos:end="53:47">(</operator><name pos:start="53:48" pos:end="53:55">uint64_t</name><operator pos:start="53:56" pos:end="53:56">)</operator> <name pos:start="53:58" pos:end="53:67">block_size</name></expr>;</expr_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:52"><expr pos:start="57:5" pos:end="57:51"><name pos:start="57:5" pos:end="57:24"><name pos:start="57:5" pos:end="57:5">s</name><operator pos:start="57:6" pos:end="57:7">-&gt;</operator><name pos:start="57:8" pos:end="57:24">sectors_per_block</name></name> <operator pos:start="57:26" pos:end="57:26">=</operator> <name pos:start="57:28" pos:end="57:37">block_size</name> <operator pos:start="57:39" pos:end="57:39">/</operator> <name pos:start="57:41" pos:end="57:51">sector_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:38"><expr pos:start="59:5" pos:end="59:37"><name pos:start="59:5" pos:end="59:24"><name pos:start="59:5" pos:end="59:5">s</name><operator pos:start="59:6" pos:end="59:7">-&gt;</operator><name pos:start="59:8" pos:end="59:24">virtual_disk_size</name></name> <operator pos:start="59:26" pos:end="59:26">=</operator> <name pos:start="59:28" pos:end="59:37">image_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:31"><expr pos:start="61:5" pos:end="61:30"><name pos:start="61:5" pos:end="61:17"><name pos:start="61:5" pos:end="61:5">s</name><operator pos:start="61:6" pos:end="61:7">-&gt;</operator><name pos:start="61:8" pos:end="61:17">block_size</name></name> <operator pos:start="61:19" pos:end="61:19">=</operator> <name pos:start="61:21" pos:end="61:30">block_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:41"><expr pos:start="63:5" pos:end="63:40"><name pos:start="63:5" pos:end="63:26"><name pos:start="63:5" pos:end="63:5">s</name><operator pos:start="63:6" pos:end="63:7">-&gt;</operator><name pos:start="63:8" pos:end="63:26">logical_sector_size</name></name> <operator pos:start="63:28" pos:end="63:28">=</operator> <name pos:start="63:30" pos:end="63:40">sector_size</name></expr>;</expr_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:27"><expr pos:start="67:5" pos:end="67:26"><call pos:start="67:5" pos:end="67:26"><name pos:start="67:5" pos:end="67:23">vhdx_set_shift_bits</name><argument_list pos:start="67:24" pos:end="67:26">(<argument pos:start="67:25" pos:end="67:25"><expr pos:start="67:25" pos:end="67:25"><name pos:start="67:25" pos:end="67:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:29"><expr pos:start="71:5" pos:end="71:28"><call pos:start="71:5" pos:end="71:28"><name pos:start="71:5" pos:end="71:25">vhdx_calc_bat_entries</name><argument_list pos:start="71:26" pos:end="71:28">(<argument pos:start="71:27" pos:end="71:27"><expr pos:start="71:27" pos:end="71:27"><name pos:start="71:27" pos:end="71:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="75:5" pos:end="75:71">/* At this point the VHDX state is populated enough for creation */</comment>



    <comment type="block" pos:start="79:5" pos:end="81:27">/* a single buffer is used so we can calculate the checksum over the

     * entire 64KB block */</comment>

    <expr_stmt pos:start="83:5" pos:end="83:47"><expr pos:start="83:5" pos:end="83:46"><name pos:start="83:5" pos:end="83:10">buffer</name> <operator pos:start="83:12" pos:end="83:12">=</operator> <call pos:start="83:14" pos:end="83:46"><name pos:start="83:14" pos:end="83:22">g_malloc0</name><argument_list pos:start="83:23" pos:end="83:46">(<argument pos:start="83:24" pos:end="83:45"><expr pos:start="83:24" pos:end="83:45"><name pos:start="83:24" pos:end="83:45">VHDX_HEADER_BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:26"><expr pos:start="85:5" pos:end="85:25"><name pos:start="85:5" pos:end="85:16">region_table</name> <operator pos:start="85:18" pos:end="85:18">=</operator> <name pos:start="85:20" pos:end="85:25">buffer</name></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:44"><expr pos:start="87:5" pos:end="87:43"><name pos:start="87:5" pos:end="87:10">offset</name> <operator pos:start="87:12" pos:end="87:13">+=</operator> <sizeof pos:start="87:15" pos:end="87:43">sizeof<argument_list pos:start="87:21" pos:end="87:43">(<argument pos:start="87:22" pos:end="87:42"><expr pos:start="87:22" pos:end="87:42"><name pos:start="87:22" pos:end="87:42">VHDXRegionTableHeader</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:29"><expr pos:start="89:5" pos:end="89:28"><name pos:start="89:5" pos:end="89:10">rt_bat</name> <operator pos:start="89:12" pos:end="89:12">=</operator> <name pos:start="89:14" pos:end="89:19">buffer</name> <operator pos:start="89:21" pos:end="89:21">+</operator> <name pos:start="89:23" pos:end="89:28">offset</name></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:43"><expr pos:start="91:5" pos:end="91:42"><name pos:start="91:5" pos:end="91:10">offset</name> <operator pos:start="91:12" pos:end="91:13">+=</operator> <sizeof pos:start="91:15" pos:end="91:42">sizeof<argument_list pos:start="91:21" pos:end="91:42">(<argument pos:start="91:22" pos:end="91:41"><expr pos:start="91:22" pos:end="91:41"><name pos:start="91:22" pos:end="91:41">VHDXRegionTableEntry</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:35"><expr pos:start="93:5" pos:end="93:34"><name pos:start="93:5" pos:end="93:15">rt_metadata</name>  <operator pos:start="93:18" pos:end="93:18">=</operator> <name pos:start="93:20" pos:end="93:25">buffer</name> <operator pos:start="93:27" pos:end="93:27">+</operator> <name pos:start="93:29" pos:end="93:34">offset</name></expr>;</expr_stmt>



    <expr_stmt pos:start="97:5" pos:end="97:52"><expr pos:start="97:5" pos:end="97:51"><name pos:start="97:5" pos:end="97:27"><name pos:start="97:5" pos:end="97:16">region_table</name><operator pos:start="97:17" pos:end="97:18">-&gt;</operator><name pos:start="97:19" pos:end="97:27">signature</name></name> <operator pos:start="97:29" pos:end="97:29">=</operator> <name pos:start="97:31" pos:end="97:51">VHDX_REGION_SIGNATURE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:34"><expr pos:start="99:5" pos:end="99:33"><name pos:start="99:5" pos:end="99:29"><name pos:start="99:5" pos:end="99:16">region_table</name><operator pos:start="99:17" pos:end="99:18">-&gt;</operator><name pos:start="99:19" pos:end="99:29">entry_count</name></name> <operator pos:start="99:31" pos:end="99:31">=</operator> <literal type="number" pos:start="99:33" pos:end="99:33">2</literal></expr>;</expr_stmt>   <comment type="block" pos:start="99:38" pos:end="99:59">/* BAT and Metadata */</comment>



    <expr_stmt pos:start="103:5" pos:end="103:35"><expr pos:start="103:5" pos:end="103:34"><name pos:start="103:5" pos:end="103:16"><name pos:start="103:5" pos:end="103:10">rt_bat</name><operator pos:start="103:11" pos:end="103:12">-&gt;</operator><name pos:start="103:13" pos:end="103:16">guid</name></name>        <operator pos:start="103:25" pos:end="103:25">=</operator> <name pos:start="103:27" pos:end="103:34">bat_guid</name></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:79"><expr pos:start="105:5" pos:end="105:78"><name pos:start="105:5" pos:end="105:18"><name pos:start="105:5" pos:end="105:10">rt_bat</name><operator pos:start="105:11" pos:end="105:12">-&gt;</operator><name pos:start="105:13" pos:end="105:18">length</name></name>      <operator pos:start="105:25" pos:end="105:25">=</operator> <call pos:start="105:27" pos:end="105:78"><name pos:start="105:27" pos:end="105:34">ROUND_UP</name><argument_list pos:start="105:35" pos:end="105:78">(<argument pos:start="105:36" pos:end="105:72"><expr pos:start="105:36" pos:end="105:72"><name pos:start="105:36" pos:end="105:49"><name pos:start="105:36" pos:end="105:36">s</name><operator pos:start="105:37" pos:end="105:38">-&gt;</operator><name pos:start="105:39" pos:end="105:49">bat_entries</name></name> <operator pos:start="105:51" pos:end="105:51">*</operator> <sizeof pos:start="105:53" pos:end="105:72">sizeof<argument_list pos:start="105:59" pos:end="105:72">(<argument pos:start="105:60" pos:end="105:71"><expr pos:start="105:60" pos:end="105:71"><name pos:start="105:60" pos:end="105:71">VHDXBatEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="105:75" pos:end="105:77"><expr pos:start="105:75" pos:end="105:77"><name pos:start="105:75" pos:end="105:77">MiB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:76"><expr pos:start="107:5" pos:end="107:75"><name pos:start="107:5" pos:end="107:23"><name pos:start="107:5" pos:end="107:10">rt_bat</name><operator pos:start="107:11" pos:end="107:12">-&gt;</operator><name pos:start="107:13" pos:end="107:23">file_offset</name></name> <operator pos:start="107:25" pos:end="107:25">=</operator> <call pos:start="107:27" pos:end="107:75"><name pos:start="107:27" pos:end="107:34">ROUND_UP</name><argument_list pos:start="107:35" pos:end="107:75">(<argument pos:start="107:36" pos:end="107:69"><expr pos:start="107:36" pos:end="107:69"><name pos:start="107:36" pos:end="107:58">VHDX_HEADER_SECTION_END</name> <operator pos:start="107:60" pos:end="107:60">+</operator> <name pos:start="107:62" pos:end="107:69">log_size</name></expr></argument>, <argument pos:start="107:72" pos:end="107:74"><expr pos:start="107:72" pos:end="107:74"><name pos:start="107:72" pos:end="107:74">MiB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:40"><expr pos:start="109:5" pos:end="109:39"><name pos:start="109:5" pos:end="109:17"><name pos:start="109:5" pos:end="109:5">s</name><operator pos:start="109:6" pos:end="109:7">-&gt;</operator><name pos:start="109:8" pos:end="109:17">bat_offset</name></name> <operator pos:start="109:19" pos:end="109:19">=</operator> <name pos:start="109:21" pos:end="109:39"><name pos:start="109:21" pos:end="109:26">rt_bat</name><operator pos:start="109:27" pos:end="109:28">-&gt;</operator><name pos:start="109:29" pos:end="109:39">file_offset</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="113:5" pos:end="113:45"><expr pos:start="113:5" pos:end="113:44"><name pos:start="113:5" pos:end="113:21"><name pos:start="113:5" pos:end="113:15">rt_metadata</name><operator pos:start="113:16" pos:end="113:17">-&gt;</operator><name pos:start="113:18" pos:end="113:21">guid</name></name>        <operator pos:start="113:30" pos:end="113:30">=</operator> <name pos:start="113:32" pos:end="113:44">metadata_guid</name></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="117:45"><expr pos:start="115:5" pos:end="117:44"><name pos:start="115:5" pos:end="115:28"><name pos:start="115:5" pos:end="115:15">rt_metadata</name><operator pos:start="115:16" pos:end="115:17">-&gt;</operator><name pos:start="115:18" pos:end="115:28">file_offset</name></name> <operator pos:start="115:30" pos:end="115:30">=</operator> <call pos:start="115:32" pos:end="117:44"><name pos:start="115:32" pos:end="115:39">ROUND_UP</name><argument_list pos:start="115:40" pos:end="117:44">(<argument pos:start="115:41" pos:end="115:76"><expr pos:start="115:41" pos:end="115:76"><name pos:start="115:41" pos:end="115:59"><name pos:start="115:41" pos:end="115:46">rt_bat</name><operator pos:start="115:47" pos:end="115:48">-&gt;</operator><name pos:start="115:49" pos:end="115:59">file_offset</name></name> <operator pos:start="115:61" pos:end="115:61">+</operator> <name pos:start="115:63" pos:end="115:76"><name pos:start="115:63" pos:end="115:68">rt_bat</name><operator pos:start="115:69" pos:end="115:70">-&gt;</operator><name pos:start="115:71" pos:end="115:76">length</name></name></expr></argument>,

                                        <argument pos:start="117:41" pos:end="117:43"><expr pos:start="117:41" pos:end="117:43"><name pos:start="117:41" pos:end="117:43">MiB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:39"><expr pos:start="119:5" pos:end="119:38"><name pos:start="119:5" pos:end="119:23"><name pos:start="119:5" pos:end="119:15">rt_metadata</name><operator pos:start="119:16" pos:end="119:17">-&gt;</operator><name pos:start="119:18" pos:end="119:23">length</name></name>      <operator pos:start="119:30" pos:end="119:30">=</operator> <literal type="number" pos:start="119:32" pos:end="119:32">1</literal> <operator pos:start="119:34" pos:end="119:34">*</operator> <name pos:start="119:36" pos:end="119:38">MiB</name></expr>;</expr_stmt> <comment type="block" pos:start="119:41" pos:end="119:76">/* min size, and more than enough */</comment>

    <expr_stmt pos:start="121:5" pos:end="121:48"><expr pos:start="121:5" pos:end="121:47"><operator pos:start="121:5" pos:end="121:5">*</operator><name pos:start="121:6" pos:end="121:20">metadata_offset</name> <operator pos:start="121:22" pos:end="121:22">=</operator> <name pos:start="121:24" pos:end="121:47"><name pos:start="121:24" pos:end="121:34">rt_metadata</name><operator pos:start="121:35" pos:end="121:36">-&gt;</operator><name pos:start="121:37" pos:end="121:47">file_offset</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="125:5" pos:end="125:42"><expr pos:start="125:5" pos:end="125:41"><name pos:start="125:5" pos:end="125:19">bat_file_offset</name> <operator pos:start="125:21" pos:end="125:21">=</operator> <name pos:start="125:23" pos:end="125:41"><name pos:start="125:23" pos:end="125:28">rt_bat</name><operator pos:start="125:29" pos:end="125:30">-&gt;</operator><name pos:start="125:31" pos:end="125:41">file_offset</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:32"><expr pos:start="127:5" pos:end="127:31"><name pos:start="127:5" pos:end="127:14">bat_length</name> <operator pos:start="127:16" pos:end="127:16">=</operator> <name pos:start="127:18" pos:end="127:31"><name pos:start="127:18" pos:end="127:23">rt_bat</name><operator pos:start="127:24" pos:end="127:25">-&gt;</operator><name pos:start="127:26" pos:end="127:31">length</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="131:5" pos:end="131:47"><expr pos:start="131:5" pos:end="131:46"><call pos:start="131:5" pos:end="131:46"><name pos:start="131:5" pos:end="131:32">vhdx_region_header_le_export</name><argument_list pos:start="131:33" pos:end="131:46">(<argument pos:start="131:34" pos:end="131:45"><expr pos:start="131:34" pos:end="131:45"><name pos:start="131:34" pos:end="131:45">region_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:40"><expr pos:start="133:5" pos:end="133:39"><call pos:start="133:5" pos:end="133:39"><name pos:start="133:5" pos:end="133:31">vhdx_region_entry_le_export</name><argument_list pos:start="133:32" pos:end="133:39">(<argument pos:start="133:33" pos:end="133:38"><expr pos:start="133:33" pos:end="133:38"><name pos:start="133:33" pos:end="133:38">rt_bat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:45"><expr pos:start="135:5" pos:end="135:44"><call pos:start="135:5" pos:end="135:44"><name pos:start="135:5" pos:end="135:31">vhdx_region_entry_le_export</name><argument_list pos:start="135:32" pos:end="135:44">(<argument pos:start="135:33" pos:end="135:43"><expr pos:start="135:33" pos:end="135:43"><name pos:start="135:33" pos:end="135:43">rt_metadata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="139:5" pos:end="141:68"><expr pos:start="139:5" pos:end="141:67"><call pos:start="139:5" pos:end="141:67"><name pos:start="139:5" pos:end="139:24">vhdx_update_checksum</name><argument_list pos:start="139:25" pos:end="141:67">(<argument pos:start="139:26" pos:end="139:31"><expr pos:start="139:26" pos:end="139:31"><name pos:start="139:26" pos:end="139:31">buffer</name></expr></argument>, <argument pos:start="139:34" pos:end="139:55"><expr pos:start="139:34" pos:end="139:55"><name pos:start="139:34" pos:end="139:55">VHDX_HEADER_BLOCK_SIZE</name></expr></argument>,

                         <argument pos:start="141:26" pos:end="141:66"><expr pos:start="141:26" pos:end="141:66"><call pos:start="141:26" pos:end="141:66"><name pos:start="141:26" pos:end="141:33">offsetof</name><argument_list pos:start="141:34" pos:end="141:66">(<argument pos:start="141:35" pos:end="141:55"><expr pos:start="141:35" pos:end="141:55"><name pos:start="141:35" pos:end="141:55">VHDXRegionTableHeader</name></expr></argument>, <argument pos:start="141:58" pos:end="141:65"><expr pos:start="141:58" pos:end="141:65"><name pos:start="141:58" pos:end="141:65">checksum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    <comment type="block" pos:start="147:5" pos:end="149:24">/* The region table gives us the data we need to create the BAT,

     * so do that now */</comment>

    <expr_stmt pos:start="151:5" pos:end="153:55"><expr pos:start="151:5" pos:end="153:54"><name pos:start="151:5" pos:end="151:7">ret</name> <operator pos:start="151:9" pos:end="151:9">=</operator> <call pos:start="151:11" pos:end="153:54"><name pos:start="151:11" pos:end="151:25">vhdx_create_bat</name><argument_list pos:start="151:26" pos:end="153:54">(<argument pos:start="151:27" pos:end="151:28"><expr pos:start="151:27" pos:end="151:28"><name pos:start="151:27" pos:end="151:28">bs</name></expr></argument>, <argument pos:start="151:31" pos:end="151:31"><expr pos:start="151:31" pos:end="151:31"><name pos:start="151:31" pos:end="151:31">s</name></expr></argument>, <argument pos:start="151:34" pos:end="151:43"><expr pos:start="151:34" pos:end="151:43"><name pos:start="151:34" pos:end="151:43">image_size</name></expr></argument>, <argument pos:start="151:46" pos:end="151:49"><expr pos:start="151:46" pos:end="151:49"><name pos:start="151:46" pos:end="151:49">type</name></expr></argument>, <argument pos:start="151:52" pos:end="151:66"><expr pos:start="151:52" pos:end="151:66"><name pos:start="151:52" pos:end="151:66">use_zero_blocks</name></expr></argument>,

                          <argument pos:start="153:27" pos:end="153:41"><expr pos:start="153:27" pos:end="153:41"><name pos:start="153:27" pos:end="153:41">bat_file_offset</name></expr></argument>, <argument pos:start="153:44" pos:end="153:53"><expr pos:start="153:44" pos:end="153:53"><name pos:start="153:44" pos:end="153:53">bat_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="155:5" pos:end="159:5"><if pos:start="155:5" pos:end="159:5">if <condition pos:start="155:8" pos:end="155:16">(<expr pos:start="155:9" pos:end="155:15"><name pos:start="155:9" pos:end="155:11">ret</name> <operator pos:start="155:13" pos:end="155:13">&lt;</operator> <literal type="number" pos:start="155:15" pos:end="155:15">0</literal></expr>)</condition> <block pos:start="155:18" pos:end="159:5">{<block_content pos:start="157:9" pos:end="157:18">

        <goto pos:start="157:9" pos:end="157:18">goto <name pos:start="157:14" pos:end="157:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="163:5" pos:end="163:50">/* Now write out the region headers to disk */</comment>

    <expr_stmt pos:start="165:5" pos:end="167:46"><expr pos:start="165:5" pos:end="167:45"><name pos:start="165:5" pos:end="165:7">ret</name> <operator pos:start="165:9" pos:end="165:9">=</operator> <call pos:start="165:11" pos:end="167:45"><name pos:start="165:11" pos:end="165:21">bdrv_pwrite</name><argument_list pos:start="165:22" pos:end="167:45">(<argument pos:start="165:23" pos:end="165:24"><expr pos:start="165:23" pos:end="165:24"><name pos:start="165:23" pos:end="165:24">bs</name></expr></argument>, <argument pos:start="165:27" pos:end="165:50"><expr pos:start="165:27" pos:end="165:50"><name pos:start="165:27" pos:end="165:50">VHDX_REGION_TABLE_OFFSET</name></expr></argument>, <argument pos:start="165:53" pos:end="165:58"><expr pos:start="165:53" pos:end="165:58"><name pos:start="165:53" pos:end="165:58">buffer</name></expr></argument>,

                      <argument pos:start="167:23" pos:end="167:44"><expr pos:start="167:23" pos:end="167:44"><name pos:start="167:23" pos:end="167:44">VHDX_HEADER_BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="169:5" pos:end="173:5"><if pos:start="169:5" pos:end="173:5">if <condition pos:start="169:8" pos:end="169:16">(<expr pos:start="169:9" pos:end="169:15"><name pos:start="169:9" pos:end="169:11">ret</name> <operator pos:start="169:13" pos:end="169:13">&lt;</operator> <literal type="number" pos:start="169:15" pos:end="169:15">0</literal></expr>)</condition> <block pos:start="169:18" pos:end="173:5">{<block_content pos:start="171:9" pos:end="171:18">

        <goto pos:start="171:9" pos:end="171:18">goto <name pos:start="171:14" pos:end="171:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="177:5" pos:end="179:46"><expr pos:start="177:5" pos:end="179:45"><name pos:start="177:5" pos:end="177:7">ret</name> <operator pos:start="177:9" pos:end="177:9">=</operator> <call pos:start="177:11" pos:end="179:45"><name pos:start="177:11" pos:end="177:21">bdrv_pwrite</name><argument_list pos:start="177:22" pos:end="179:45">(<argument pos:start="177:23" pos:end="177:24"><expr pos:start="177:23" pos:end="177:24"><name pos:start="177:23" pos:end="177:24">bs</name></expr></argument>, <argument pos:start="177:27" pos:end="177:51"><expr pos:start="177:27" pos:end="177:51"><name pos:start="177:27" pos:end="177:51">VHDX_REGION_TABLE2_OFFSET</name></expr></argument>, <argument pos:start="177:54" pos:end="177:59"><expr pos:start="177:54" pos:end="177:59"><name pos:start="177:54" pos:end="177:59">buffer</name></expr></argument>,

                      <argument pos:start="179:23" pos:end="179:44"><expr pos:start="179:23" pos:end="179:44"><name pos:start="179:23" pos:end="179:44">VHDX_HEADER_BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="181:5" pos:end="185:5"><if pos:start="181:5" pos:end="185:5">if <condition pos:start="181:8" pos:end="181:16">(<expr pos:start="181:9" pos:end="181:15"><name pos:start="181:9" pos:end="181:11">ret</name> <operator pos:start="181:13" pos:end="181:13">&lt;</operator> <literal type="number" pos:start="181:15" pos:end="181:15">0</literal></expr>)</condition> <block pos:start="181:18" pos:end="185:5">{<block_content pos:start="183:9" pos:end="183:18">

        <goto pos:start="183:9" pos:end="183:18">goto <name pos:start="183:14" pos:end="183:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>





<label pos:start="191:1" pos:end="191:5"><name pos:start="191:1" pos:end="191:4">exit</name>:</label>

    <expr_stmt pos:start="193:5" pos:end="193:14"><expr pos:start="193:5" pos:end="193:13"><call pos:start="193:5" pos:end="193:13"><name pos:start="193:5" pos:end="193:10">g_free</name><argument_list pos:start="193:11" pos:end="193:13">(<argument pos:start="193:12" pos:end="193:12"><expr pos:start="193:12" pos:end="193:12"><name pos:start="193:12" pos:end="193:12">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="195:5" pos:end="195:19"><expr pos:start="195:5" pos:end="195:18"><call pos:start="195:5" pos:end="195:18"><name pos:start="195:5" pos:end="195:10">g_free</name><argument_list pos:start="195:11" pos:end="195:18">(<argument pos:start="195:12" pos:end="195:17"><expr pos:start="195:12" pos:end="195:17"><name pos:start="195:12" pos:end="195:17">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="197:5" pos:end="197:15">return <expr pos:start="197:12" pos:end="197:14"><name pos:start="197:12" pos:end="197:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
