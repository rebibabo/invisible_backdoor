<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5042.c" pos:tabs="8"><function pos:start="1:1" pos:end="85:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:36">pc_cpu_unplug_request_cb</name><parameter_list pos:start="1:37" pos:end="3:68">(<parameter pos:start="1:38" pos:end="1:64"><decl pos:start="1:38" pos:end="1:64"><type pos:start="1:38" pos:end="1:64"><name pos:start="1:38" pos:end="1:51">HotplugHandler</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:64">hotplug_dev</name></decl></parameter>,

                                     <parameter pos:start="3:38" pos:end="3:53"><decl pos:start="3:38" pos:end="3:53"><type pos:start="3:38" pos:end="3:53"><name pos:start="3:38" pos:end="3:48">DeviceState</name> <modifier pos:start="3:50" pos:end="3:50">*</modifier></type><name pos:start="3:51" pos:end="3:53">dev</name></decl></parameter>, <parameter pos:start="3:56" pos:end="3:67"><decl pos:start="3:56" pos:end="3:67"><type pos:start="3:56" pos:end="3:67"><name pos:start="3:56" pos:end="3:60">Error</name> <modifier pos:start="3:62" pos:end="3:62">*</modifier><modifier pos:start="3:63" pos:end="3:63">*</modifier></type><name pos:start="3:64" pos:end="3:67">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="85:1">{<block_content pos:start="7:5" pos:end="81:37">

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">idx</name> <init pos:start="7:13" pos:end="7:16">= <expr pos:start="7:15" pos:end="7:16"><operator pos:start="7:15" pos:end="7:15">-</operator><literal type="number" pos:start="7:16" pos:end="7:16">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:28"><type pos:start="9:5" pos:end="9:25"><name pos:start="9:5" pos:end="9:23">HotplugHandlerClass</name> <modifier pos:start="9:25" pos:end="9:25">*</modifier></type><name pos:start="9:26" pos:end="9:28">hhc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:9">Error</name> <modifier pos:start="11:11" pos:end="11:11">*</modifier></type><name pos:start="11:12" pos:end="11:20">local_err</name> <init pos:start="11:22" pos:end="11:27">= <expr pos:start="11:24" pos:end="11:27"><name pos:start="11:24" pos:end="11:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:51"><decl pos:start="13:5" pos:end="13:50"><type pos:start="13:5" pos:end="13:20"><name pos:start="13:5" pos:end="13:18">PCMachineState</name> <modifier pos:start="13:20" pos:end="13:20">*</modifier></type><name pos:start="13:21" pos:end="13:24">pcms</name> <init pos:start="13:26" pos:end="13:50">= <expr pos:start="13:28" pos:end="13:50"><call pos:start="13:28" pos:end="13:50"><name pos:start="13:28" pos:end="13:37">PC_MACHINE</name><argument_list pos:start="13:38" pos:end="13:50">(<argument pos:start="13:39" pos:end="13:49"><expr pos:start="13:39" pos:end="13:49"><name pos:start="13:39" pos:end="13:49">hotplug_dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:43"><expr pos:start="17:5" pos:end="17:42"><call pos:start="17:5" pos:end="17:42"><name pos:start="17:5" pos:end="17:20">pc_find_cpu_slot</name><argument_list pos:start="17:21" pos:end="17:42">(<argument pos:start="17:22" pos:end="17:25"><expr pos:start="17:22" pos:end="17:25"><name pos:start="17:22" pos:end="17:25">pcms</name></expr></argument>, <argument pos:start="17:28" pos:end="17:35"><expr pos:start="17:28" pos:end="17:35"><call pos:start="17:28" pos:end="17:35"><name pos:start="17:28" pos:end="17:30">CPU</name><argument_list pos:start="17:31" pos:end="17:35">(<argument pos:start="17:32" pos:end="17:34"><expr pos:start="17:32" pos:end="17:34"><name pos:start="17:32" pos:end="17:34">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="17:38" pos:end="17:41"><expr pos:start="17:38" pos:end="17:41"><operator pos:start="17:38" pos:end="17:38">&amp;</operator><name pos:start="17:39" pos:end="17:41">idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:22"><expr pos:start="19:5" pos:end="19:21"><call pos:start="19:5" pos:end="19:21"><name pos:start="19:5" pos:end="19:10">assert</name><argument_list pos:start="19:11" pos:end="19:21">(<argument pos:start="19:12" pos:end="19:20"><expr pos:start="19:12" pos:end="19:20"><name pos:start="19:12" pos:end="19:14">idx</name> <operator pos:start="19:16" pos:end="19:17">!=</operator> <operator pos:start="19:19" pos:end="19:19">-</operator><literal type="number" pos:start="19:20" pos:end="19:20">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="27:5"><if pos:start="21:5" pos:end="27:5">if <condition pos:start="21:8" pos:end="21:17">(<expr pos:start="21:9" pos:end="21:16"><name pos:start="21:9" pos:end="21:11">idx</name> <operator pos:start="21:13" pos:end="21:14">==</operator> <literal type="number" pos:start="21:16" pos:end="21:16">0</literal></expr>)</condition> <block pos:start="21:19" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:17">

        <expr_stmt pos:start="23:9" pos:end="23:58"><expr pos:start="23:9" pos:end="23:57"><call pos:start="23:9" pos:end="23:57"><name pos:start="23:9" pos:end="23:18">error_setg</name><argument_list pos:start="23:19" pos:end="23:57">(<argument pos:start="23:20" pos:end="23:29"><expr pos:start="23:20" pos:end="23:29"><operator pos:start="23:20" pos:end="23:20">&amp;</operator><name pos:start="23:21" pos:end="23:29">local_err</name></expr></argument>, <argument pos:start="23:32" pos:end="23:56"><expr pos:start="23:32" pos:end="23:56"><literal type="string" pos:start="23:32" pos:end="23:56">"Boot CPU is unpluggable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="25:9" pos:end="25:17">goto <name pos:start="25:14" pos:end="25:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="31:5" pos:end="61:5"><if pos:start="31:5" pos:end="61:5">if <condition pos:start="31:8" pos:end="33:55">(<expr pos:start="31:9" pos:end="33:54"><name pos:start="31:9" pos:end="31:11">idx</name> <operator pos:start="31:13" pos:end="31:13">&lt;</operator> <name pos:start="31:15" pos:end="31:38"><name pos:start="31:15" pos:end="31:18">pcms</name><operator pos:start="31:19" pos:end="31:20">-&gt;</operator><name pos:start="31:21" pos:end="31:33">possible_cpus</name><operator pos:start="31:34" pos:end="31:35">-&gt;</operator><name pos:start="31:36" pos:end="31:38">len</name></name> <operator pos:start="31:40" pos:end="31:40">-</operator> <literal type="number" pos:start="31:42" pos:end="31:42">1</literal> <operator pos:start="31:44" pos:end="31:45">&amp;&amp;</operator>

        <name pos:start="33:9" pos:end="33:42"><name pos:start="33:9" pos:end="33:12">pcms</name><operator pos:start="33:13" pos:end="33:14">-&gt;</operator><name pos:start="33:15" pos:end="33:27">possible_cpus</name><operator pos:start="33:28" pos:end="33:29">-&gt;</operator><name pos:start="33:30" pos:end="33:33">cpus</name><index pos:start="33:34" pos:end="33:42">[<expr pos:start="33:35" pos:end="33:41"><name pos:start="33:35" pos:end="33:37">idx</name> <operator pos:start="33:39" pos:end="33:39">+</operator> <literal type="number" pos:start="33:41" pos:end="33:41">1</literal></expr>]</index></name><operator pos:start="33:43" pos:end="33:43">.</operator><name pos:start="33:44" pos:end="33:46">cpu</name> <operator pos:start="33:48" pos:end="33:49">!=</operator> <name pos:start="33:51" pos:end="33:54">NULL</name></expr>)</condition> <block pos:start="33:57" pos:end="61:5">{<block_content pos:start="35:9" pos:end="57:17">

        <decl_stmt pos:start="35:9" pos:end="35:20"><decl pos:start="35:9" pos:end="35:19"><type pos:start="35:9" pos:end="35:16"><name pos:start="35:9" pos:end="35:14">X86CPU</name> <modifier pos:start="35:16" pos:end="35:16">*</modifier></type><name pos:start="35:17" pos:end="35:19">cpu</name></decl>;</decl_stmt>



        <for pos:start="39:9" pos:end="45:9">for <control pos:start="39:13" pos:end="41:63">(<init pos:start="39:14" pos:end="39:48"><expr pos:start="39:14" pos:end="39:47"><name pos:start="39:14" pos:end="39:16">idx</name> <operator pos:start="39:18" pos:end="39:18">=</operator> <name pos:start="39:20" pos:end="39:43"><name pos:start="39:20" pos:end="39:23">pcms</name><operator pos:start="39:24" pos:end="39:25">-&gt;</operator><name pos:start="39:26" pos:end="39:38">possible_cpus</name><operator pos:start="39:39" pos:end="39:40">-&gt;</operator><name pos:start="39:41" pos:end="39:43">len</name></name> <operator pos:start="39:45" pos:end="39:45">-</operator> <literal type="number" pos:start="39:47" pos:end="39:47">1</literal></expr>;</init>

             <condition pos:start="41:14" pos:end="41:56"><expr pos:start="41:14" pos:end="41:55"><name pos:start="41:14" pos:end="41:43"><name pos:start="41:14" pos:end="41:17">pcms</name><operator pos:start="41:18" pos:end="41:19">-&gt;</operator><name pos:start="41:20" pos:end="41:32">possible_cpus</name><operator pos:start="41:33" pos:end="41:34">-&gt;</operator><name pos:start="41:35" pos:end="41:38">cpus</name><index pos:start="41:39" pos:end="41:43">[<expr pos:start="41:40" pos:end="41:42"><name pos:start="41:40" pos:end="41:42">idx</name></expr>]</index></name><operator pos:start="41:44" pos:end="41:44">.</operator><name pos:start="41:45" pos:end="41:47">cpu</name> <operator pos:start="41:49" pos:end="41:50">==</operator> <name pos:start="41:52" pos:end="41:55">NULL</name></expr>;</condition> <incr pos:start="41:58" pos:end="41:62"><expr pos:start="41:58" pos:end="41:62"><name pos:start="41:58" pos:end="41:60">idx</name><operator pos:start="41:61" pos:end="41:62">--</operator></expr></incr>)</control> <block pos:start="41:65" pos:end="45:9">{<block_content pos:start="43:13" pos:end="43:14">

            <empty_stmt pos:start="43:13" pos:end="43:13">;</empty_stmt><empty_stmt pos:start="43:14" pos:end="43:14">;</empty_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="49:9" pos:end="49:58"><expr pos:start="49:9" pos:end="49:57"><name pos:start="49:9" pos:end="49:11">cpu</name> <operator pos:start="49:13" pos:end="49:13">=</operator> <call pos:start="49:15" pos:end="49:57"><name pos:start="49:15" pos:end="49:21">X86_CPU</name><argument_list pos:start="49:22" pos:end="49:57">(<argument pos:start="49:23" pos:end="49:56"><expr pos:start="49:23" pos:end="49:56"><name pos:start="49:23" pos:end="49:52"><name pos:start="49:23" pos:end="49:26">pcms</name><operator pos:start="49:27" pos:end="49:28">-&gt;</operator><name pos:start="49:29" pos:end="49:41">possible_cpus</name><operator pos:start="49:42" pos:end="49:43">-&gt;</operator><name pos:start="49:44" pos:end="49:47">cpus</name><index pos:start="49:48" pos:end="49:52">[<expr pos:start="49:49" pos:end="49:51"><name pos:start="49:49" pos:end="49:51">idx</name></expr>]</index></name><operator pos:start="49:53" pos:end="49:53">.</operator><name pos:start="49:54" pos:end="49:56">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="55:65"><expr pos:start="51:9" pos:end="55:64"><call pos:start="51:9" pos:end="55:64"><name pos:start="51:9" pos:end="51:18">error_setg</name><argument_list pos:start="51:19" pos:end="55:64">(<argument pos:start="51:20" pos:end="51:29"><expr pos:start="51:20" pos:end="51:29"><operator pos:start="51:20" pos:end="51:20">&amp;</operator><name pos:start="51:21" pos:end="51:29">local_err</name></expr></argument>, <argument pos:start="51:32" pos:end="53:60"><expr pos:start="51:32" pos:end="53:60"><literal type="string" pos:start="51:32" pos:end="51:65">"CPU [socket-id: %u, core-id: %u,"</literal>

                   <literal type="string" pos:start="53:20" pos:end="53:60">" thread-id: %u] should be removed first"</literal></expr></argument>,

                   <argument pos:start="55:20" pos:end="55:33"><expr pos:start="55:20" pos:end="55:33"><name pos:start="55:20" pos:end="55:33"><name pos:start="55:20" pos:end="55:22">cpu</name><operator pos:start="55:23" pos:end="55:24">-&gt;</operator><name pos:start="55:25" pos:end="55:33">socket_id</name></name></expr></argument>, <argument pos:start="55:36" pos:end="55:47"><expr pos:start="55:36" pos:end="55:47"><name pos:start="55:36" pos:end="55:47"><name pos:start="55:36" pos:end="55:38">cpu</name><operator pos:start="55:39" pos:end="55:40">-&gt;</operator><name pos:start="55:41" pos:end="55:47">core_id</name></name></expr></argument>, <argument pos:start="55:50" pos:end="55:63"><expr pos:start="55:50" pos:end="55:63"><name pos:start="55:50" pos:end="55:63"><name pos:start="55:50" pos:end="55:52">cpu</name><operator pos:start="55:53" pos:end="55:54">-&gt;</operator><name pos:start="55:55" pos:end="55:63">thread_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="57:9" pos:end="57:17">goto <name pos:start="57:14" pos:end="57:16">out</name>;</goto>



    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:52"><expr pos:start="65:5" pos:end="65:51"><name pos:start="65:5" pos:end="65:7">hhc</name> <operator pos:start="65:9" pos:end="65:9">=</operator> <call pos:start="65:11" pos:end="65:51"><name pos:start="65:11" pos:end="65:35">HOTPLUG_HANDLER_GET_CLASS</name><argument_list pos:start="65:36" pos:end="65:51">(<argument pos:start="65:37" pos:end="65:50"><expr pos:start="65:37" pos:end="65:50"><name pos:start="65:37" pos:end="65:50"><name pos:start="65:37" pos:end="65:40">pcms</name><operator pos:start="65:41" pos:end="65:42">-&gt;</operator><name pos:start="65:43" pos:end="65:50">acpi_dev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:74"><expr pos:start="67:5" pos:end="67:73"><call pos:start="67:5" pos:end="67:73"><name pos:start="67:5" pos:end="67:23"><name pos:start="67:5" pos:end="67:7">hhc</name><operator pos:start="67:8" pos:end="67:9">-&gt;</operator><name pos:start="67:10" pos:end="67:23">unplug_request</name></name><argument_list pos:start="67:24" pos:end="67:73">(<argument pos:start="67:25" pos:end="67:55"><expr pos:start="67:25" pos:end="67:55"><call pos:start="67:25" pos:end="67:55"><name pos:start="67:25" pos:end="67:39">HOTPLUG_HANDLER</name><argument_list pos:start="67:40" pos:end="67:55">(<argument pos:start="67:41" pos:end="67:54"><expr pos:start="67:41" pos:end="67:54"><name pos:start="67:41" pos:end="67:54"><name pos:start="67:41" pos:end="67:44">pcms</name><operator pos:start="67:45" pos:end="67:46">-&gt;</operator><name pos:start="67:47" pos:end="67:54">acpi_dev</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="67:58" pos:end="67:60"><expr pos:start="67:58" pos:end="67:60"><name pos:start="67:58" pos:end="67:60">dev</name></expr></argument>, <argument pos:start="67:63" pos:end="67:72"><expr pos:start="67:63" pos:end="67:72"><operator pos:start="67:63" pos:end="67:63">&amp;</operator><name pos:start="67:64" pos:end="67:72">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="71:5" pos:end="75:5"><if pos:start="71:5" pos:end="75:5">if <condition pos:start="71:8" pos:end="71:18">(<expr pos:start="71:9" pos:end="71:17"><name pos:start="71:9" pos:end="71:17">local_err</name></expr>)</condition> <block pos:start="71:20" pos:end="75:5">{<block_content pos:start="73:9" pos:end="73:17">

        <goto pos:start="73:9" pos:end="73:17">goto <name pos:start="73:14" pos:end="73:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



 <label pos:start="79:2" pos:end="79:5"><name pos:start="79:2" pos:end="79:4">out</name>:</label>

    <expr_stmt pos:start="81:5" pos:end="81:37"><expr pos:start="81:5" pos:end="81:36"><call pos:start="81:5" pos:end="81:36"><name pos:start="81:5" pos:end="81:19">error_propagate</name><argument_list pos:start="81:20" pos:end="81:36">(<argument pos:start="81:21" pos:end="81:24"><expr pos:start="81:21" pos:end="81:24"><name pos:start="81:21" pos:end="81:24">errp</name></expr></argument>, <argument pos:start="81:27" pos:end="81:35"><expr pos:start="81:27" pos:end="81:35"><name pos:start="81:27" pos:end="81:35">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



</block_content>}</block></function>
</unit>
