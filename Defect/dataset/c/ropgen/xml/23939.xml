<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23939.c" pos:tabs="8"><function pos:start="1:1" pos:end="293:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">musicpal_init</name><parameter_list pos:start="1:26" pos:end="1:48">(<parameter pos:start="1:27" pos:end="1:47"><decl pos:start="1:27" pos:end="1:47"><type pos:start="1:27" pos:end="1:40"><name pos:start="1:27" pos:end="1:38">MachineState</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:47">machine</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="293:1">{<block_content pos:start="5:5" pos:end="291:42">

    <decl_stmt pos:start="5:5" pos:end="5:47"><decl pos:start="5:5" pos:end="5:46"><type pos:start="5:5" pos:end="5:16"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:14">char</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:25">cpu_model</name> <init pos:start="5:27" pos:end="5:46">= <expr pos:start="5:29" pos:end="5:46"><name pos:start="5:29" pos:end="5:46"><name pos:start="5:29" pos:end="5:35">machine</name><operator pos:start="5:36" pos:end="5:37">-&gt;</operator><name pos:start="5:38" pos:end="5:46">cpu_model</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:59"><decl pos:start="7:5" pos:end="7:58"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:31">kernel_filename</name> <init pos:start="7:33" pos:end="7:58">= <expr pos:start="7:35" pos:end="7:58"><name pos:start="7:35" pos:end="7:58"><name pos:start="7:35" pos:end="7:41">machine</name><operator pos:start="7:42" pos:end="7:43">-&gt;</operator><name pos:start="7:44" pos:end="7:58">kernel_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:57"><decl pos:start="9:5" pos:end="9:56"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:30">kernel_cmdline</name> <init pos:start="9:32" pos:end="9:56">= <expr pos:start="9:34" pos:end="9:56"><name pos:start="9:34" pos:end="9:56"><name pos:start="9:34" pos:end="9:40">machine</name><operator pos:start="9:41" pos:end="9:42">-&gt;</operator><name pos:start="9:43" pos:end="9:56">kernel_cmdline</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:59"><decl pos:start="11:5" pos:end="11:58"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:31">initrd_filename</name> <init pos:start="11:33" pos:end="11:58">= <expr pos:start="11:35" pos:end="11:58"><name pos:start="11:35" pos:end="11:58"><name pos:start="11:35" pos:end="11:41">machine</name><operator pos:start="11:42" pos:end="11:43">-&gt;</operator><name pos:start="11:44" pos:end="11:58">initrd_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:16"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:10">ARMCPU</name> <modifier pos:start="13:12" pos:end="13:12">*</modifier></type><name pos:start="13:13" pos:end="13:15">cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">qemu_irq</name></type> <name pos:start="15:14" pos:end="15:20"><name pos:start="15:14" pos:end="15:16">pic</name><index pos:start="15:17" pos:end="15:20">[<expr pos:start="15:18" pos:end="15:19"><literal type="number" pos:start="15:18" pos:end="15:19">32</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:21"><decl pos:start="17:5" pos:end="17:20"><type pos:start="17:5" pos:end="17:17"><name pos:start="17:5" pos:end="17:15">DeviceState</name> <modifier pos:start="17:17" pos:end="17:17">*</modifier></type><name pos:start="17:18" pos:end="17:20">dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:25"><decl pos:start="19:5" pos:end="19:24"><type pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:15">DeviceState</name> <modifier pos:start="19:17" pos:end="19:17">*</modifier></type><name pos:start="19:18" pos:end="19:24">i2c_dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:25"><decl pos:start="21:5" pos:end="21:24"><type pos:start="21:5" pos:end="21:17"><name pos:start="21:5" pos:end="21:15">DeviceState</name> <modifier pos:start="21:17" pos:end="21:17">*</modifier></type><name pos:start="21:18" pos:end="21:24">lcd_dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:25"><decl pos:start="23:5" pos:end="23:24"><type pos:start="23:5" pos:end="23:17"><name pos:start="23:5" pos:end="23:15">DeviceState</name> <modifier pos:start="23:17" pos:end="23:17">*</modifier></type><name pos:start="23:18" pos:end="23:24">key_dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:28"><decl pos:start="25:5" pos:end="25:27"><type pos:start="25:5" pos:end="25:17"><name pos:start="25:5" pos:end="25:15">DeviceState</name> <modifier pos:start="25:17" pos:end="25:17">*</modifier></type><name pos:start="25:18" pos:end="25:27">wm8750_dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:20"><decl pos:start="27:5" pos:end="27:19"><type pos:start="27:5" pos:end="27:18"><name pos:start="27:5" pos:end="27:16">SysBusDevice</name> <modifier pos:start="27:18" pos:end="27:18">*</modifier></type><name pos:start="27:19" pos:end="27:19">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:16"><decl pos:start="29:5" pos:end="29:15"><type pos:start="29:5" pos:end="29:12"><name pos:start="29:5" pos:end="29:10">I2CBus</name> <modifier pos:start="29:12" pos:end="29:12">*</modifier></type><name pos:start="29:13" pos:end="29:15">i2c</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:10"><decl pos:start="31:5" pos:end="31:9"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:29"><decl pos:start="33:5" pos:end="33:28"><type pos:start="33:5" pos:end="33:17"><name pos:start="33:5" pos:end="33:12">unsigned</name> <name pos:start="33:14" pos:end="33:17">long</name></type> <name pos:start="33:19" pos:end="33:28">flash_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:21"><decl pos:start="35:5" pos:end="35:20"><type pos:start="35:5" pos:end="35:15"><name pos:start="35:5" pos:end="35:13">DriveInfo</name> <modifier pos:start="35:15" pos:end="35:15">*</modifier></type><name pos:start="35:16" pos:end="35:20">dinfo</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:58"><decl pos:start="37:5" pos:end="37:57"><type pos:start="37:5" pos:end="37:18"><name pos:start="37:5" pos:end="37:16">MemoryRegion</name> <modifier pos:start="37:18" pos:end="37:18">*</modifier></type><name pos:start="37:19" pos:end="37:35">address_space_mem</name> <init pos:start="37:37" pos:end="37:57">= <expr pos:start="37:39" pos:end="37:57"><call pos:start="37:39" pos:end="37:57"><name pos:start="37:39" pos:end="37:55">get_system_memory</name><argument_list pos:start="37:56" pos:end="37:57">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:47"><decl pos:start="39:5" pos:end="39:46"><type pos:start="39:5" pos:end="39:18"><name pos:start="39:5" pos:end="39:16">MemoryRegion</name> <modifier pos:start="39:18" pos:end="39:18">*</modifier></type><name pos:start="39:19" pos:end="39:21">ram</name> <init pos:start="39:23" pos:end="39:46">= <expr pos:start="39:25" pos:end="39:46"><call pos:start="39:25" pos:end="39:46"><name pos:start="39:25" pos:end="39:29">g_new</name><argument_list pos:start="39:30" pos:end="39:46">(<argument pos:start="39:31" pos:end="39:42"><expr pos:start="39:31" pos:end="39:42"><name pos:start="39:31" pos:end="39:42">MemoryRegion</name></expr></argument>, <argument pos:start="39:45" pos:end="39:45"><expr pos:start="39:45" pos:end="39:45"><literal type="number" pos:start="39:45" pos:end="39:45">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:48"><decl pos:start="41:5" pos:end="41:47"><type pos:start="41:5" pos:end="41:18"><name pos:start="41:5" pos:end="41:16">MemoryRegion</name> <modifier pos:start="41:18" pos:end="41:18">*</modifier></type><name pos:start="41:19" pos:end="41:22">sram</name> <init pos:start="41:24" pos:end="41:47">= <expr pos:start="41:26" pos:end="41:47"><call pos:start="41:26" pos:end="41:47"><name pos:start="41:26" pos:end="41:30">g_new</name><argument_list pos:start="41:31" pos:end="41:47">(<argument pos:start="41:32" pos:end="41:43"><expr pos:start="41:32" pos:end="41:43"><name pos:start="41:32" pos:end="41:43">MemoryRegion</name></expr></argument>, <argument pos:start="41:46" pos:end="41:46"><expr pos:start="41:46" pos:end="41:46"><literal type="number" pos:start="41:46" pos:end="41:46">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="45:5" pos:end="49:5"><if pos:start="45:5" pos:end="49:5">if <condition pos:start="45:8" pos:end="45:19">(<expr pos:start="45:9" pos:end="45:18"><operator pos:start="45:9" pos:end="45:9">!</operator><name pos:start="45:10" pos:end="45:18">cpu_model</name></expr>)</condition> <block pos:start="45:21" pos:end="49:5">{<block_content pos:start="47:9" pos:end="47:29">

        <expr_stmt pos:start="47:9" pos:end="47:29"><expr pos:start="47:9" pos:end="47:28"><name pos:start="47:9" pos:end="47:17">cpu_model</name> <operator pos:start="47:19" pos:end="47:19">=</operator> <literal type="string" pos:start="47:21" pos:end="47:28">"arm926"</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:34"><expr pos:start="51:5" pos:end="51:33"><name pos:start="51:5" pos:end="51:7">cpu</name> <operator pos:start="51:9" pos:end="51:9">=</operator> <call pos:start="51:11" pos:end="51:33"><name pos:start="51:11" pos:end="51:22">cpu_arm_init</name><argument_list pos:start="51:23" pos:end="51:33">(<argument pos:start="51:24" pos:end="51:32"><expr pos:start="51:24" pos:end="51:32"><name pos:start="51:24" pos:end="51:32">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="59:5"><if pos:start="53:5" pos:end="59:5">if <condition pos:start="53:8" pos:end="53:13">(<expr pos:start="53:9" pos:end="53:12"><operator pos:start="53:9" pos:end="53:9">!</operator><name pos:start="53:10" pos:end="53:12">cpu</name></expr>)</condition> <block pos:start="53:15" pos:end="59:5">{<block_content pos:start="55:9" pos:end="57:16">

        <expr_stmt pos:start="55:9" pos:end="55:59"><expr pos:start="55:9" pos:end="55:58"><call pos:start="55:9" pos:end="55:58"><name pos:start="55:9" pos:end="55:15">fprintf</name><argument_list pos:start="55:16" pos:end="55:58">(<argument pos:start="55:17" pos:end="55:22"><expr pos:start="55:17" pos:end="55:22"><name pos:start="55:17" pos:end="55:22">stderr</name></expr></argument>, <argument pos:start="55:25" pos:end="55:57"><expr pos:start="55:25" pos:end="55:57"><literal type="string" pos:start="55:25" pos:end="55:57">"Unable to find CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:16"><expr pos:start="57:9" pos:end="57:15"><call pos:start="57:9" pos:end="57:15"><name pos:start="57:9" pos:end="57:12">exit</name><argument_list pos:start="57:13" pos:end="57:15">(<argument pos:start="57:14" pos:end="57:14"><expr pos:start="57:14" pos:end="57:14"><literal type="number" pos:start="57:14" pos:end="57:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="63:5" pos:end="63:58">/* For now we use a fixed - the original - RAM size */</comment>

    <expr_stmt pos:start="65:5" pos:end="67:41"><expr pos:start="65:5" pos:end="67:40"><call pos:start="65:5" pos:end="67:40"><name pos:start="65:5" pos:end="65:26">memory_region_init_ram</name><argument_list pos:start="65:27" pos:end="67:40">(<argument pos:start="65:28" pos:end="65:30"><expr pos:start="65:28" pos:end="65:30"><name pos:start="65:28" pos:end="65:30">ram</name></expr></argument>, <argument pos:start="65:33" pos:end="65:36"><expr pos:start="65:33" pos:end="65:36"><name pos:start="65:33" pos:end="65:36">NULL</name></expr></argument>, <argument pos:start="65:39" pos:end="65:52"><expr pos:start="65:39" pos:end="65:52"><literal type="string" pos:start="65:39" pos:end="65:52">"musicpal.ram"</literal></expr></argument>, <argument pos:start="65:55" pos:end="65:73"><expr pos:start="65:55" pos:end="65:73"><name pos:start="65:55" pos:end="65:73">MP_RAM_DEFAULT_SIZE</name></expr></argument>,

                           <argument pos:start="67:28" pos:end="67:39"><expr pos:start="67:28" pos:end="67:39"><operator pos:start="67:28" pos:end="67:28">&amp;</operator><name pos:start="67:29" pos:end="67:39">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:37"><expr pos:start="69:5" pos:end="69:36"><call pos:start="69:5" pos:end="69:36"><name pos:start="69:5" pos:end="69:31">vmstate_register_ram_global</name><argument_list pos:start="69:32" pos:end="69:36">(<argument pos:start="69:33" pos:end="69:35"><expr pos:start="69:33" pos:end="69:35"><name pos:start="69:33" pos:end="69:35">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:59"><expr pos:start="71:5" pos:end="71:58"><call pos:start="71:5" pos:end="71:58"><name pos:start="71:5" pos:end="71:31">memory_region_add_subregion</name><argument_list pos:start="71:32" pos:end="71:58">(<argument pos:start="71:33" pos:end="71:49"><expr pos:start="71:33" pos:end="71:49"><name pos:start="71:33" pos:end="71:49">address_space_mem</name></expr></argument>, <argument pos:start="71:52" pos:end="71:52"><expr pos:start="71:52" pos:end="71:52"><literal type="number" pos:start="71:52" pos:end="71:52">0</literal></expr></argument>, <argument pos:start="71:55" pos:end="71:57"><expr pos:start="71:55" pos:end="71:57"><name pos:start="71:55" pos:end="71:57">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="75:5" pos:end="77:41"><expr pos:start="75:5" pos:end="77:40"><call pos:start="75:5" pos:end="77:40"><name pos:start="75:5" pos:end="75:26">memory_region_init_ram</name><argument_list pos:start="75:27" pos:end="77:40">(<argument pos:start="75:28" pos:end="75:31"><expr pos:start="75:28" pos:end="75:31"><name pos:start="75:28" pos:end="75:31">sram</name></expr></argument>, <argument pos:start="75:34" pos:end="75:37"><expr pos:start="75:34" pos:end="75:37"><name pos:start="75:34" pos:end="75:37">NULL</name></expr></argument>, <argument pos:start="75:40" pos:end="75:54"><expr pos:start="75:40" pos:end="75:54"><literal type="string" pos:start="75:40" pos:end="75:54">"musicpal.sram"</literal></expr></argument>, <argument pos:start="75:57" pos:end="75:68"><expr pos:start="75:57" pos:end="75:68"><name pos:start="75:57" pos:end="75:68">MP_SRAM_SIZE</name></expr></argument>,

                           <argument pos:start="77:28" pos:end="77:39"><expr pos:start="77:28" pos:end="77:39"><operator pos:start="77:28" pos:end="77:28">&amp;</operator><name pos:start="77:29" pos:end="77:39">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:38"><expr pos:start="79:5" pos:end="79:37"><call pos:start="79:5" pos:end="79:37"><name pos:start="79:5" pos:end="79:31">vmstate_register_ram_global</name><argument_list pos:start="79:32" pos:end="79:37">(<argument pos:start="79:33" pos:end="79:36"><expr pos:start="79:33" pos:end="79:36"><name pos:start="79:33" pos:end="79:36">sram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:71"><expr pos:start="81:5" pos:end="81:70"><call pos:start="81:5" pos:end="81:70"><name pos:start="81:5" pos:end="81:31">memory_region_add_subregion</name><argument_list pos:start="81:32" pos:end="81:70">(<argument pos:start="81:33" pos:end="81:49"><expr pos:start="81:33" pos:end="81:49"><name pos:start="81:33" pos:end="81:49">address_space_mem</name></expr></argument>, <argument pos:start="81:52" pos:end="81:63"><expr pos:start="81:52" pos:end="81:63"><name pos:start="81:52" pos:end="81:63">MP_SRAM_BASE</name></expr></argument>, <argument pos:start="81:66" pos:end="81:69"><expr pos:start="81:66" pos:end="81:69"><name pos:start="81:66" pos:end="81:69">sram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="85:5" pos:end="87:75"><expr pos:start="85:5" pos:end="87:74"><name pos:start="85:5" pos:end="85:7">dev</name> <operator pos:start="85:9" pos:end="85:9">=</operator> <call pos:start="85:11" pos:end="87:74"><name pos:start="85:11" pos:end="85:30">sysbus_create_simple</name><argument_list pos:start="85:31" pos:end="87:74">(<argument pos:start="85:32" pos:end="85:49"><expr pos:start="85:32" pos:end="85:49"><name pos:start="85:32" pos:end="85:49">TYPE_MV88W8618_PIC</name></expr></argument>, <argument pos:start="85:52" pos:end="85:62"><expr pos:start="85:52" pos:end="85:62"><name pos:start="85:52" pos:end="85:62">MP_PIC_BASE</name></expr></argument>,

                               <argument pos:start="87:32" pos:end="87:73"><expr pos:start="87:32" pos:end="87:73"><call pos:start="87:32" pos:end="87:73"><name pos:start="87:32" pos:end="87:47">qdev_get_gpio_in</name><argument_list pos:start="87:48" pos:end="87:73">(<argument pos:start="87:49" pos:end="87:59"><expr pos:start="87:49" pos:end="87:59"><call pos:start="87:49" pos:end="87:59"><name pos:start="87:49" pos:end="87:54">DEVICE</name><argument_list pos:start="87:55" pos:end="87:59">(<argument pos:start="87:56" pos:end="87:58"><expr pos:start="87:56" pos:end="87:58"><name pos:start="87:56" pos:end="87:58">cpu</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="87:62" pos:end="87:72"><expr pos:start="87:62" pos:end="87:72"><name pos:start="87:62" pos:end="87:72">ARM_CPU_IRQ</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="89:5" pos:end="93:5">for <control pos:start="89:9" pos:end="89:28">(<init pos:start="89:10" pos:end="89:15"><expr pos:start="89:10" pos:end="89:14"><name pos:start="89:10" pos:end="89:10">i</name> <operator pos:start="89:12" pos:end="89:12">=</operator> <literal type="number" pos:start="89:14" pos:end="89:14">0</literal></expr>;</init> <condition pos:start="89:17" pos:end="89:23"><expr pos:start="89:17" pos:end="89:22"><name pos:start="89:17" pos:end="89:17">i</name> <operator pos:start="89:19" pos:end="89:19">&lt;</operator> <literal type="number" pos:start="89:21" pos:end="89:22">32</literal></expr>;</condition> <incr pos:start="89:25" pos:end="89:27"><expr pos:start="89:25" pos:end="89:27"><name pos:start="89:25" pos:end="89:25">i</name><operator pos:start="89:26" pos:end="89:27">++</operator></expr></incr>)</control> <block pos:start="89:30" pos:end="93:5">{<block_content pos:start="91:9" pos:end="91:42">

        <expr_stmt pos:start="91:9" pos:end="91:42"><expr pos:start="91:9" pos:end="91:41"><name pos:start="91:9" pos:end="91:14"><name pos:start="91:9" pos:end="91:11">pic</name><index pos:start="91:12" pos:end="91:14">[<expr pos:start="91:13" pos:end="91:13"><name pos:start="91:13" pos:end="91:13">i</name></expr>]</index></name> <operator pos:start="91:16" pos:end="91:16">=</operator> <call pos:start="91:18" pos:end="91:41"><name pos:start="91:18" pos:end="91:33">qdev_get_gpio_in</name><argument_list pos:start="91:34" pos:end="91:41">(<argument pos:start="91:35" pos:end="91:37"><expr pos:start="91:35" pos:end="91:37"><name pos:start="91:35" pos:end="91:37">dev</name></expr></argument>, <argument pos:start="91:40" pos:end="91:40"><expr pos:start="91:40" pos:end="91:40"><name pos:start="91:40" pos:end="91:40">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="95:5" pos:end="99:52"><expr pos:start="95:5" pos:end="99:51"><call pos:start="95:5" pos:end="99:51"><name pos:start="95:5" pos:end="95:25">sysbus_create_varargs</name><argument_list pos:start="95:26" pos:end="99:51">(<argument pos:start="95:27" pos:end="95:44"><expr pos:start="95:27" pos:end="95:44"><name pos:start="95:27" pos:end="95:44">TYPE_MV88W8618_PIT</name></expr></argument>, <argument pos:start="95:47" pos:end="95:57"><expr pos:start="95:47" pos:end="95:57"><name pos:start="95:47" pos:end="95:57">MP_PIT_BASE</name></expr></argument>, <argument pos:start="95:60" pos:end="95:77"><expr pos:start="95:60" pos:end="95:77"><name pos:start="95:60" pos:end="95:77"><name pos:start="95:60" pos:end="95:62">pic</name><index pos:start="95:63" pos:end="95:77">[<expr pos:start="95:64" pos:end="95:76"><name pos:start="95:64" pos:end="95:76">MP_TIMER1_IRQ</name></expr>]</index></name></expr></argument>,

                          <argument pos:start="97:27" pos:end="97:44"><expr pos:start="97:27" pos:end="97:44"><name pos:start="97:27" pos:end="97:44"><name pos:start="97:27" pos:end="97:29">pic</name><index pos:start="97:30" pos:end="97:44">[<expr pos:start="97:31" pos:end="97:43"><name pos:start="97:31" pos:end="97:43">MP_TIMER2_IRQ</name></expr>]</index></name></expr></argument>, <argument pos:start="97:47" pos:end="97:64"><expr pos:start="97:47" pos:end="97:64"><name pos:start="97:47" pos:end="97:64"><name pos:start="97:47" pos:end="97:49">pic</name><index pos:start="97:50" pos:end="97:64">[<expr pos:start="97:51" pos:end="97:63"><name pos:start="97:51" pos:end="97:63">MP_TIMER3_IRQ</name></expr>]</index></name></expr></argument>,

                          <argument pos:start="99:27" pos:end="99:44"><expr pos:start="99:27" pos:end="99:44"><name pos:start="99:27" pos:end="99:44"><name pos:start="99:27" pos:end="99:29">pic</name><index pos:start="99:30" pos:end="99:44">[<expr pos:start="99:31" pos:end="99:43"><name pos:start="99:31" pos:end="99:43">MP_TIMER4_IRQ</name></expr>]</index></name></expr></argument>, <argument pos:start="99:47" pos:end="99:50"><expr pos:start="99:47" pos:end="99:50"><name pos:start="99:47" pos:end="99:50">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="103:5" pos:end="109:5"><if pos:start="103:5" pos:end="109:5">if <condition pos:start="103:8" pos:end="103:22">(<expr pos:start="103:9" pos:end="103:21"><name pos:start="103:9" pos:end="103:21"><name pos:start="103:9" pos:end="103:18">serial_hds</name><index pos:start="103:19" pos:end="103:21">[<expr pos:start="103:20" pos:end="103:20"><literal type="number" pos:start="103:20" pos:end="103:20">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="103:24" pos:end="109:5">{<block_content pos:start="105:9" pos:end="107:69">

        <expr_stmt pos:start="105:9" pos:end="107:69"><expr pos:start="105:9" pos:end="107:68"><call pos:start="105:9" pos:end="107:68"><name pos:start="105:9" pos:end="105:22">serial_mm_init</name><argument_list pos:start="105:23" pos:end="107:68">(<argument pos:start="105:24" pos:end="105:40"><expr pos:start="105:24" pos:end="105:40"><name pos:start="105:24" pos:end="105:40">address_space_mem</name></expr></argument>, <argument pos:start="105:43" pos:end="105:55"><expr pos:start="105:43" pos:end="105:55"><name pos:start="105:43" pos:end="105:55">MP_UART1_BASE</name></expr></argument>, <argument pos:start="105:58" pos:end="105:58"><expr pos:start="105:58" pos:end="105:58"><literal type="number" pos:start="105:58" pos:end="105:58">2</literal></expr></argument>, <argument pos:start="105:61" pos:end="105:77"><expr pos:start="105:61" pos:end="105:77"><name pos:start="105:61" pos:end="105:77"><name pos:start="105:61" pos:end="105:63">pic</name><index pos:start="105:64" pos:end="105:77">[<expr pos:start="105:65" pos:end="105:76"><name pos:start="105:65" pos:end="105:76">MP_UART1_IRQ</name></expr>]</index></name></expr></argument>,

                       <argument pos:start="107:24" pos:end="107:30"><expr pos:start="107:24" pos:end="107:30"><literal type="number" pos:start="107:24" pos:end="107:30">1825000</literal></expr></argument>, <argument pos:start="107:33" pos:end="107:45"><expr pos:start="107:33" pos:end="107:45"><name pos:start="107:33" pos:end="107:45"><name pos:start="107:33" pos:end="107:42">serial_hds</name><index pos:start="107:43" pos:end="107:45">[<expr pos:start="107:44" pos:end="107:44"><literal type="number" pos:start="107:44" pos:end="107:44">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="107:48" pos:end="107:67"><expr pos:start="107:48" pos:end="107:67"><name pos:start="107:48" pos:end="107:67">DEVICE_NATIVE_ENDIAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="111:5" pos:end="117:5"><if pos:start="111:5" pos:end="117:5">if <condition pos:start="111:8" pos:end="111:22">(<expr pos:start="111:9" pos:end="111:21"><name pos:start="111:9" pos:end="111:21"><name pos:start="111:9" pos:end="111:18">serial_hds</name><index pos:start="111:19" pos:end="111:21">[<expr pos:start="111:20" pos:end="111:20"><literal type="number" pos:start="111:20" pos:end="111:20">1</literal></expr>]</index></name></expr>)</condition> <block pos:start="111:24" pos:end="117:5">{<block_content pos:start="113:9" pos:end="115:69">

        <expr_stmt pos:start="113:9" pos:end="115:69"><expr pos:start="113:9" pos:end="115:68"><call pos:start="113:9" pos:end="115:68"><name pos:start="113:9" pos:end="113:22">serial_mm_init</name><argument_list pos:start="113:23" pos:end="115:68">(<argument pos:start="113:24" pos:end="113:40"><expr pos:start="113:24" pos:end="113:40"><name pos:start="113:24" pos:end="113:40">address_space_mem</name></expr></argument>, <argument pos:start="113:43" pos:end="113:55"><expr pos:start="113:43" pos:end="113:55"><name pos:start="113:43" pos:end="113:55">MP_UART2_BASE</name></expr></argument>, <argument pos:start="113:58" pos:end="113:58"><expr pos:start="113:58" pos:end="113:58"><literal type="number" pos:start="113:58" pos:end="113:58">2</literal></expr></argument>, <argument pos:start="113:61" pos:end="113:77"><expr pos:start="113:61" pos:end="113:77"><name pos:start="113:61" pos:end="113:77"><name pos:start="113:61" pos:end="113:63">pic</name><index pos:start="113:64" pos:end="113:77">[<expr pos:start="113:65" pos:end="113:76"><name pos:start="113:65" pos:end="113:76">MP_UART2_IRQ</name></expr>]</index></name></expr></argument>,

                       <argument pos:start="115:24" pos:end="115:30"><expr pos:start="115:24" pos:end="115:30"><literal type="number" pos:start="115:24" pos:end="115:30">1825000</literal></expr></argument>, <argument pos:start="115:33" pos:end="115:45"><expr pos:start="115:33" pos:end="115:45"><name pos:start="115:33" pos:end="115:45"><name pos:start="115:33" pos:end="115:42">serial_hds</name><index pos:start="115:43" pos:end="115:45">[<expr pos:start="115:44" pos:end="115:44"><literal type="number" pos:start="115:44" pos:end="115:44">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="115:48" pos:end="115:67"><expr pos:start="115:48" pos:end="115:67"><name pos:start="115:48" pos:end="115:67">DEVICE_NATIVE_ENDIAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="121:5" pos:end="121:24">/* Register flash */</comment>

    <expr_stmt pos:start="123:5" pos:end="123:39"><expr pos:start="123:5" pos:end="123:38"><name pos:start="123:5" pos:end="123:9">dinfo</name> <operator pos:start="123:11" pos:end="123:11">=</operator> <call pos:start="123:13" pos:end="123:38"><name pos:start="123:13" pos:end="123:21">drive_get</name><argument_list pos:start="123:22" pos:end="123:38">(<argument pos:start="123:23" pos:end="123:31"><expr pos:start="123:23" pos:end="123:31"><name pos:start="123:23" pos:end="123:31">IF_PFLASH</name></expr></argument>, <argument pos:start="123:34" pos:end="123:34"><expr pos:start="123:34" pos:end="123:34"><literal type="number" pos:start="123:34" pos:end="123:34">0</literal></expr></argument>, <argument pos:start="123:37" pos:end="123:37"><expr pos:start="123:37" pos:end="123:37"><literal type="number" pos:start="123:37" pos:end="123:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="125:5" pos:end="187:5"><if pos:start="125:5" pos:end="187:5">if <condition pos:start="125:8" pos:end="125:14">(<expr pos:start="125:9" pos:end="125:13"><name pos:start="125:9" pos:end="125:13">dinfo</name></expr>)</condition> <block pos:start="125:16" pos:end="187:5">{<block_content pos:start="127:9" pos:end="184:0">

        <decl_stmt pos:start="127:9" pos:end="127:66"><decl pos:start="127:9" pos:end="127:65"><type pos:start="127:9" pos:end="127:26"><name pos:start="127:9" pos:end="127:24">BlockDriverState</name> <modifier pos:start="127:26" pos:end="127:26">*</modifier></type><name pos:start="127:27" pos:end="127:28">bs</name> <init pos:start="127:30" pos:end="127:65">= <expr pos:start="127:32" pos:end="127:65"><call pos:start="127:32" pos:end="127:65"><name pos:start="127:32" pos:end="127:37">blk_bs</name><argument_list pos:start="127:38" pos:end="127:65">(<argument pos:start="127:39" pos:end="127:64"><expr pos:start="127:39" pos:end="127:64"><call pos:start="127:39" pos:end="127:64"><name pos:start="127:39" pos:end="127:57">blk_by_legacy_dinfo</name><argument_list pos:start="127:58" pos:end="127:64">(<argument pos:start="127:59" pos:end="127:63"><expr pos:start="127:59" pos:end="127:63"><name pos:start="127:59" pos:end="127:63">dinfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="131:9" pos:end="131:40"><expr pos:start="131:9" pos:end="131:39"><name pos:start="131:9" pos:end="131:18">flash_size</name> <operator pos:start="131:20" pos:end="131:20">=</operator> <call pos:start="131:22" pos:end="131:39"><name pos:start="131:22" pos:end="131:35">bdrv_getlength</name><argument_list pos:start="131:36" pos:end="131:39">(<argument pos:start="131:37" pos:end="131:38"><expr pos:start="131:37" pos:end="131:38"><name pos:start="131:37" pos:end="131:38">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="133:9" pos:end="156:0"><if pos:start="133:9" pos:end="156:0">if <condition pos:start="133:12" pos:end="135:39">(<expr pos:start="133:13" pos:end="135:38"><name pos:start="133:13" pos:end="133:22">flash_size</name> <operator pos:start="133:24" pos:end="133:25">!=</operator> <literal type="number" pos:start="133:27" pos:end="133:27">8</literal><operator pos:start="133:28" pos:end="133:28">*</operator><literal type="number" pos:start="133:29" pos:end="133:32">1024</literal><operator pos:start="133:33" pos:end="133:33">*</operator><literal type="number" pos:start="133:34" pos:end="133:37">1024</literal> <operator pos:start="133:39" pos:end="133:40">&amp;&amp;</operator> <name pos:start="133:42" pos:end="133:51">flash_size</name> <operator pos:start="133:53" pos:end="133:54">!=</operator> <literal type="number" pos:start="133:56" pos:end="133:57">16</literal><operator pos:start="133:58" pos:end="133:58">*</operator><literal type="number" pos:start="133:59" pos:end="133:62">1024</literal><operator pos:start="133:63" pos:end="133:63">*</operator><literal type="number" pos:start="133:64" pos:end="133:67">1024</literal> <operator pos:start="133:69" pos:end="133:70">&amp;&amp;</operator>

            <name pos:start="135:13" pos:end="135:22">flash_size</name> <operator pos:start="135:24" pos:end="135:25">!=</operator> <literal type="number" pos:start="135:27" pos:end="135:28">32</literal><operator pos:start="135:29" pos:end="135:29">*</operator><literal type="number" pos:start="135:30" pos:end="135:33">1024</literal><operator pos:start="135:34" pos:end="135:34">*</operator><literal type="number" pos:start="135:35" pos:end="135:38">1024</literal></expr>)</condition> <block pos:start="135:41" pos:end="156:0">{<block_content pos:start="137:13" pos:end="139:20">

            <expr_stmt pos:start="137:13" pos:end="137:58"><expr pos:start="137:13" pos:end="137:57"><call pos:start="137:13" pos:end="137:57"><name pos:start="137:13" pos:end="137:19">fprintf</name><argument_list pos:start="137:20" pos:end="137:57">(<argument pos:start="137:21" pos:end="137:26"><expr pos:start="137:21" pos:end="137:26"><name pos:start="137:21" pos:end="137:26">stderr</name></expr></argument>, <argument pos:start="137:29" pos:end="137:56"><expr pos:start="137:29" pos:end="137:56"><literal type="string" pos:start="137:29" pos:end="137:56">"Invalid flash image size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="139:13" pos:end="139:20"><expr pos:start="139:13" pos:end="139:19"><call pos:start="139:13" pos:end="139:19"><name pos:start="139:13" pos:end="139:16">exit</name><argument_list pos:start="139:17" pos:end="139:19">(<argument pos:start="139:18" pos:end="139:18"><expr pos:start="139:18" pos:end="139:18"><literal type="number" pos:start="139:18" pos:end="139:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="145:9" pos:end="153:11">/*

         * The original U-Boot accesses the flash at 0xFE000000 instead of

         * 0xFF800000 (if there is 8 MB flash). So remap flash access if the

         * image is smaller than 32 MB.

         */</comment>

<cpp:ifdef pos:start="155:1" pos:end="155:29">#<cpp:directive pos:start="155:2" pos:end="155:6">ifdef</cpp:directive> <name pos:start="155:8" pos:end="155:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>

        <expr_stmt pos:start="157:9" pos:end="170:0"><expr pos:start="157:9" pos:end="167:48"><call pos:start="157:9" pos:end="167:48"><name pos:start="157:9" pos:end="157:29">pflash_cfi02_register</name><argument_list pos:start="157:30" pos:end="167:48">(<argument pos:start="157:31" pos:end="157:62"><expr pos:start="157:31" pos:end="157:62"><literal type="number" pos:start="157:31" pos:end="157:45">0x100000000ULL</literal><operator pos:start="157:45" pos:end="157:45">-</operator><name pos:start="157:46" pos:end="157:62">MP_FLASH_SIZE_MAX</name></expr></argument>, <argument pos:start="157:65" pos:end="157:68"><expr pos:start="157:65" pos:end="157:68"><name pos:start="157:65" pos:end="157:68">NULL</name></expr></argument>,

                              <argument pos:start="159:31" pos:end="159:46"><expr pos:start="159:31" pos:end="159:46"><literal type="string" pos:start="159:31" pos:end="159:46">"musicpal.flash"</literal></expr></argument>, <argument pos:start="159:49" pos:end="159:58"><expr pos:start="159:49" pos:end="159:58"><name pos:start="159:49" pos:end="159:58">flash_size</name></expr></argument>,

                              <argument pos:start="161:31" pos:end="161:32"><expr pos:start="161:31" pos:end="161:32"><name pos:start="161:31" pos:end="161:32">bs</name></expr></argument>, <argument pos:start="161:35" pos:end="161:41"><expr pos:start="161:35" pos:end="161:41"><literal type="number" pos:start="161:35" pos:end="161:41">0x10000</literal></expr></argument>, <argument pos:start="161:44" pos:end="161:70"><expr pos:start="161:44" pos:end="161:70"><operator pos:start="161:44" pos:end="161:44">(</operator><name pos:start="161:45" pos:end="161:54">flash_size</name> <operator pos:start="161:56" pos:end="161:56">+</operator> <literal type="number" pos:start="161:58" pos:end="161:63">0xffff</literal><operator pos:start="161:64" pos:end="161:64">)</operator> <operator pos:start="161:66" pos:end="161:67">&gt;&gt;</operator> <literal type="number" pos:start="161:69" pos:end="161:70">16</literal></expr></argument>,

                              <argument pos:start="163:31" pos:end="163:60"><expr pos:start="163:31" pos:end="163:60"><name pos:start="163:31" pos:end="163:47">MP_FLASH_SIZE_MAX</name> <operator pos:start="163:49" pos:end="163:49">/</operator> <name pos:start="163:51" pos:end="163:60">flash_size</name></expr></argument>,

                              <argument pos:start="165:31" pos:end="165:31"><expr pos:start="165:31" pos:end="165:31"><literal type="number" pos:start="165:31" pos:end="165:31">2</literal></expr></argument>, <argument pos:start="165:34" pos:end="165:39"><expr pos:start="165:34" pos:end="165:39"><literal type="number" pos:start="165:34" pos:end="165:39">0x00BF</literal></expr></argument>, <argument pos:start="165:42" pos:end="165:47"><expr pos:start="165:42" pos:end="165:47"><literal type="number" pos:start="165:42" pos:end="165:47">0x236D</literal></expr></argument>, <argument pos:start="165:50" pos:end="165:55"><expr pos:start="165:50" pos:end="165:55"><literal type="number" pos:start="165:50" pos:end="165:55">0x0000</literal></expr></argument>, <argument pos:start="165:58" pos:end="165:63"><expr pos:start="165:58" pos:end="165:63"><literal type="number" pos:start="165:58" pos:end="165:63">0x0000</literal></expr></argument>,

                              <argument pos:start="167:31" pos:end="167:36"><expr pos:start="167:31" pos:end="167:36"><literal type="number" pos:start="167:31" pos:end="167:36">0x5555</literal></expr></argument>, <argument pos:start="167:39" pos:end="167:44"><expr pos:start="167:39" pos:end="167:44"><literal type="number" pos:start="167:39" pos:end="167:44">0x2AAA</literal></expr></argument>, <argument pos:start="167:47" pos:end="167:47"><expr pos:start="167:47" pos:end="167:47"><literal type="number" pos:start="167:47" pos:end="167:47">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="169:1" pos:end="169:5">#<cpp:directive pos:start="169:2" pos:end="169:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="171:9" pos:end="184:0"><expr pos:start="171:9" pos:end="181:48"><call pos:start="171:9" pos:end="181:48"><name pos:start="171:9" pos:end="171:29">pflash_cfi02_register</name><argument_list pos:start="171:30" pos:end="181:48">(<argument pos:start="171:31" pos:end="171:62"><expr pos:start="171:31" pos:end="171:62"><literal type="number" pos:start="171:31" pos:end="171:45">0x100000000ULL</literal><operator pos:start="171:45" pos:end="171:45">-</operator><name pos:start="171:46" pos:end="171:62">MP_FLASH_SIZE_MAX</name></expr></argument>, <argument pos:start="171:65" pos:end="171:68"><expr pos:start="171:65" pos:end="171:68"><name pos:start="171:65" pos:end="171:68">NULL</name></expr></argument>,

                              <argument pos:start="173:31" pos:end="173:46"><expr pos:start="173:31" pos:end="173:46"><literal type="string" pos:start="173:31" pos:end="173:46">"musicpal.flash"</literal></expr></argument>, <argument pos:start="173:49" pos:end="173:58"><expr pos:start="173:49" pos:end="173:58"><name pos:start="173:49" pos:end="173:58">flash_size</name></expr></argument>,

                              <argument pos:start="175:31" pos:end="175:32"><expr pos:start="175:31" pos:end="175:32"><name pos:start="175:31" pos:end="175:32">bs</name></expr></argument>, <argument pos:start="175:35" pos:end="175:41"><expr pos:start="175:35" pos:end="175:41"><literal type="number" pos:start="175:35" pos:end="175:41">0x10000</literal></expr></argument>, <argument pos:start="175:44" pos:end="175:70"><expr pos:start="175:44" pos:end="175:70"><operator pos:start="175:44" pos:end="175:44">(</operator><name pos:start="175:45" pos:end="175:54">flash_size</name> <operator pos:start="175:56" pos:end="175:56">+</operator> <literal type="number" pos:start="175:58" pos:end="175:63">0xffff</literal><operator pos:start="175:64" pos:end="175:64">)</operator> <operator pos:start="175:66" pos:end="175:67">&gt;&gt;</operator> <literal type="number" pos:start="175:69" pos:end="175:70">16</literal></expr></argument>,

                              <argument pos:start="177:31" pos:end="177:60"><expr pos:start="177:31" pos:end="177:60"><name pos:start="177:31" pos:end="177:47">MP_FLASH_SIZE_MAX</name> <operator pos:start="177:49" pos:end="177:49">/</operator> <name pos:start="177:51" pos:end="177:60">flash_size</name></expr></argument>,

                              <argument pos:start="179:31" pos:end="179:31"><expr pos:start="179:31" pos:end="179:31"><literal type="number" pos:start="179:31" pos:end="179:31">2</literal></expr></argument>, <argument pos:start="179:34" pos:end="179:39"><expr pos:start="179:34" pos:end="179:39"><literal type="number" pos:start="179:34" pos:end="179:39">0x00BF</literal></expr></argument>, <argument pos:start="179:42" pos:end="179:47"><expr pos:start="179:42" pos:end="179:47"><literal type="number" pos:start="179:42" pos:end="179:47">0x236D</literal></expr></argument>, <argument pos:start="179:50" pos:end="179:55"><expr pos:start="179:50" pos:end="179:55"><literal type="number" pos:start="179:50" pos:end="179:55">0x0000</literal></expr></argument>, <argument pos:start="179:58" pos:end="179:63"><expr pos:start="179:58" pos:end="179:63"><literal type="number" pos:start="179:58" pos:end="179:63">0x0000</literal></expr></argument>,

                              <argument pos:start="181:31" pos:end="181:36"><expr pos:start="181:31" pos:end="181:36"><literal type="number" pos:start="181:31" pos:end="181:36">0x5555</literal></expr></argument>, <argument pos:start="181:39" pos:end="181:44"><expr pos:start="181:39" pos:end="181:44"><literal type="number" pos:start="181:39" pos:end="181:44">0x2AAA</literal></expr></argument>, <argument pos:start="181:47" pos:end="181:47"><expr pos:start="181:47" pos:end="181:47"><literal type="number" pos:start="181:47" pos:end="181:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="183:1" pos:end="183:6">#<cpp:directive pos:start="183:2" pos:end="183:6">endif</cpp:directive></cpp:endif>



    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="189:5" pos:end="189:74"><expr pos:start="189:5" pos:end="189:73"><call pos:start="189:5" pos:end="189:73"><name pos:start="189:5" pos:end="189:24">sysbus_create_simple</name><argument_list pos:start="189:25" pos:end="189:73">(<argument pos:start="189:26" pos:end="189:48"><expr pos:start="189:26" pos:end="189:48"><name pos:start="189:26" pos:end="189:48">TYPE_MV88W8618_FLASHCFG</name></expr></argument>, <argument pos:start="189:51" pos:end="189:66"><expr pos:start="189:51" pos:end="189:66"><name pos:start="189:51" pos:end="189:66">MP_FLASHCFG_BASE</name></expr></argument>, <argument pos:start="189:69" pos:end="189:72"><expr pos:start="189:69" pos:end="189:72"><name pos:start="189:69" pos:end="189:72">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="193:5" pos:end="193:52"><expr pos:start="193:5" pos:end="193:51"><call pos:start="193:5" pos:end="193:51"><name pos:start="193:5" pos:end="193:24">qemu_check_nic_model</name><argument_list pos:start="193:25" pos:end="193:51">(<argument pos:start="193:26" pos:end="193:37"><expr pos:start="193:26" pos:end="193:37"><operator pos:start="193:26" pos:end="193:26">&amp;</operator><name pos:start="193:27" pos:end="193:37"><name pos:start="193:27" pos:end="193:34">nd_table</name><index pos:start="193:35" pos:end="193:37">[<expr pos:start="193:36" pos:end="193:36"><literal type="number" pos:start="193:36" pos:end="193:36">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="193:40" pos:end="193:50"><expr pos:start="193:40" pos:end="193:50"><literal type="string" pos:start="193:40" pos:end="193:50">"mv88w8618"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="195:5" pos:end="195:48"><expr pos:start="195:5" pos:end="195:47"><name pos:start="195:5" pos:end="195:7">dev</name> <operator pos:start="195:9" pos:end="195:9">=</operator> <call pos:start="195:11" pos:end="195:47"><name pos:start="195:11" pos:end="195:21">qdev_create</name><argument_list pos:start="195:22" pos:end="195:47">(<argument pos:start="195:23" pos:end="195:26"><expr pos:start="195:23" pos:end="195:26"><name pos:start="195:23" pos:end="195:26">NULL</name></expr></argument>, <argument pos:start="195:29" pos:end="195:46"><expr pos:start="195:29" pos:end="195:46"><name pos:start="195:29" pos:end="195:46">TYPE_MV88W8618_ETH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="197:5" pos:end="197:47"><expr pos:start="197:5" pos:end="197:46"><call pos:start="197:5" pos:end="197:46"><name pos:start="197:5" pos:end="197:27">qdev_set_nic_properties</name><argument_list pos:start="197:28" pos:end="197:46">(<argument pos:start="197:29" pos:end="197:31"><expr pos:start="197:29" pos:end="197:31"><name pos:start="197:29" pos:end="197:31">dev</name></expr></argument>, <argument pos:start="197:34" pos:end="197:45"><expr pos:start="197:34" pos:end="197:45"><operator pos:start="197:34" pos:end="197:34">&amp;</operator><name pos:start="197:35" pos:end="197:45"><name pos:start="197:35" pos:end="197:42">nd_table</name><index pos:start="197:43" pos:end="197:45">[<expr pos:start="197:44" pos:end="197:44"><literal type="number" pos:start="197:44" pos:end="197:44">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="199:5" pos:end="199:26"><expr pos:start="199:5" pos:end="199:25"><call pos:start="199:5" pos:end="199:25"><name pos:start="199:5" pos:end="199:20">qdev_init_nofail</name><argument_list pos:start="199:21" pos:end="199:25">(<argument pos:start="199:22" pos:end="199:24"><expr pos:start="199:22" pos:end="199:24"><name pos:start="199:22" pos:end="199:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="201:5" pos:end="201:57"><expr pos:start="201:5" pos:end="201:56"><call pos:start="201:5" pos:end="201:56"><name pos:start="201:5" pos:end="201:19">sysbus_mmio_map</name><argument_list pos:start="201:20" pos:end="201:56">(<argument pos:start="201:21" pos:end="201:39"><expr pos:start="201:21" pos:end="201:39"><call pos:start="201:21" pos:end="201:39"><name pos:start="201:21" pos:end="201:34">SYS_BUS_DEVICE</name><argument_list pos:start="201:35" pos:end="201:39">(<argument pos:start="201:36" pos:end="201:38"><expr pos:start="201:36" pos:end="201:38"><name pos:start="201:36" pos:end="201:38">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="201:42" pos:end="201:42"><expr pos:start="201:42" pos:end="201:42"><literal type="number" pos:start="201:42" pos:end="201:42">0</literal></expr></argument>, <argument pos:start="201:45" pos:end="201:55"><expr pos:start="201:45" pos:end="201:55"><name pos:start="201:45" pos:end="201:55">MP_ETH_BASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="203:5" pos:end="203:64"><expr pos:start="203:5" pos:end="203:63"><call pos:start="203:5" pos:end="203:63"><name pos:start="203:5" pos:end="203:22">sysbus_connect_irq</name><argument_list pos:start="203:23" pos:end="203:63">(<argument pos:start="203:24" pos:end="203:42"><expr pos:start="203:24" pos:end="203:42"><call pos:start="203:24" pos:end="203:42"><name pos:start="203:24" pos:end="203:37">SYS_BUS_DEVICE</name><argument_list pos:start="203:38" pos:end="203:42">(<argument pos:start="203:39" pos:end="203:41"><expr pos:start="203:39" pos:end="203:41"><name pos:start="203:39" pos:end="203:41">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="203:45" pos:end="203:45"><expr pos:start="203:45" pos:end="203:45"><literal type="number" pos:start="203:45" pos:end="203:45">0</literal></expr></argument>, <argument pos:start="203:48" pos:end="203:62"><expr pos:start="203:48" pos:end="203:62"><name pos:start="203:48" pos:end="203:62"><name pos:start="203:48" pos:end="203:50">pic</name><index pos:start="203:51" pos:end="203:62">[<expr pos:start="203:52" pos:end="203:61"><name pos:start="203:52" pos:end="203:61">MP_ETH_IRQ</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="207:5" pos:end="207:63"><expr pos:start="207:5" pos:end="207:62"><call pos:start="207:5" pos:end="207:62"><name pos:start="207:5" pos:end="207:24">sysbus_create_simple</name><argument_list pos:start="207:25" pos:end="207:62">(<argument pos:start="207:26" pos:end="207:41"><expr pos:start="207:26" pos:end="207:41"><literal type="string" pos:start="207:26" pos:end="207:41">"mv88w8618_wlan"</literal></expr></argument>, <argument pos:start="207:44" pos:end="207:55"><expr pos:start="207:44" pos:end="207:55"><name pos:start="207:44" pos:end="207:55">MP_WLAN_BASE</name></expr></argument>, <argument pos:start="207:58" pos:end="207:61"><expr pos:start="207:58" pos:end="207:61"><name pos:start="207:58" pos:end="207:61">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="211:5" pos:end="211:65"><expr pos:start="211:5" pos:end="211:64"><call pos:start="211:5" pos:end="211:64"><name pos:start="211:5" pos:end="211:24">sysbus_create_simple</name><argument_list pos:start="211:25" pos:end="211:64">(<argument pos:start="211:26" pos:end="211:43"><expr pos:start="211:26" pos:end="211:43"><name pos:start="211:26" pos:end="211:43">TYPE_MUSICPAL_MISC</name></expr></argument>, <argument pos:start="211:46" pos:end="211:57"><expr pos:start="211:46" pos:end="211:57"><name pos:start="211:46" pos:end="211:57">MP_MISC_BASE</name></expr></argument>, <argument pos:start="211:60" pos:end="211:63"><expr pos:start="211:60" pos:end="211:63"><name pos:start="211:60" pos:end="211:63">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="215:5" pos:end="217:49"><expr pos:start="215:5" pos:end="217:48"><name pos:start="215:5" pos:end="215:7">dev</name> <operator pos:start="215:9" pos:end="215:9">=</operator> <call pos:start="215:11" pos:end="217:48"><name pos:start="215:11" pos:end="215:30">sysbus_create_simple</name><argument_list pos:start="215:31" pos:end="217:48">(<argument pos:start="215:32" pos:end="215:49"><expr pos:start="215:32" pos:end="215:49"><name pos:start="215:32" pos:end="215:49">TYPE_MUSICPAL_GPIO</name></expr></argument>, <argument pos:start="215:52" pos:end="215:63"><expr pos:start="215:52" pos:end="215:63"><name pos:start="215:52" pos:end="215:63">MP_GPIO_BASE</name></expr></argument>,

                               <argument pos:start="217:32" pos:end="217:47"><expr pos:start="217:32" pos:end="217:47"><name pos:start="217:32" pos:end="217:47"><name pos:start="217:32" pos:end="217:34">pic</name><index pos:start="217:35" pos:end="217:47">[<expr pos:start="217:36" pos:end="217:46"><name pos:start="217:36" pos:end="217:46">MP_GPIO_IRQ</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="219:5" pos:end="219:57"><expr pos:start="219:5" pos:end="219:56"><name pos:start="219:5" pos:end="219:11">i2c_dev</name> <operator pos:start="219:13" pos:end="219:13">=</operator> <call pos:start="219:15" pos:end="219:56"><name pos:start="219:15" pos:end="219:34">sysbus_create_simple</name><argument_list pos:start="219:35" pos:end="219:56">(<argument pos:start="219:36" pos:end="219:45"><expr pos:start="219:36" pos:end="219:45"><literal type="string" pos:start="219:36" pos:end="219:45">"gpio_i2c"</literal></expr></argument>, <argument pos:start="219:48" pos:end="219:49"><expr pos:start="219:48" pos:end="219:49"><operator pos:start="219:48" pos:end="219:48">-</operator><literal type="number" pos:start="219:49" pos:end="219:49">1</literal></expr></argument>, <argument pos:start="219:52" pos:end="219:55"><expr pos:start="219:52" pos:end="219:55"><name pos:start="219:52" pos:end="219:55">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="221:5" pos:end="221:55"><expr pos:start="221:5" pos:end="221:54"><name pos:start="221:5" pos:end="221:7">i2c</name> <operator pos:start="221:9" pos:end="221:9">=</operator> <operator pos:start="221:11" pos:end="221:11">(</operator><name pos:start="221:12" pos:end="221:17">I2CBus</name> <operator pos:start="221:19" pos:end="221:19">*</operator><operator pos:start="221:20" pos:end="221:20">)</operator><call pos:start="221:21" pos:end="221:54"><name pos:start="221:21" pos:end="221:38">qdev_get_child_bus</name><argument_list pos:start="221:39" pos:end="221:54">(<argument pos:start="221:40" pos:end="221:46"><expr pos:start="221:40" pos:end="221:46"><name pos:start="221:40" pos:end="221:46">i2c_dev</name></expr></argument>, <argument pos:start="221:49" pos:end="221:53"><expr pos:start="221:49" pos:end="221:53"><literal type="string" pos:start="221:49" pos:end="221:53">"i2c"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="225:5" pos:end="225:73"><expr pos:start="225:5" pos:end="225:72"><name pos:start="225:5" pos:end="225:11">lcd_dev</name> <operator pos:start="225:13" pos:end="225:13">=</operator> <call pos:start="225:15" pos:end="225:72"><name pos:start="225:15" pos:end="225:34">sysbus_create_simple</name><argument_list pos:start="225:35" pos:end="225:72">(<argument pos:start="225:36" pos:end="225:52"><expr pos:start="225:36" pos:end="225:52"><name pos:start="225:36" pos:end="225:52">TYPE_MUSICPAL_LCD</name></expr></argument>, <argument pos:start="225:55" pos:end="225:65"><expr pos:start="225:55" pos:end="225:65"><name pos:start="225:55" pos:end="225:65">MP_LCD_BASE</name></expr></argument>, <argument pos:start="225:68" pos:end="225:71"><expr pos:start="225:68" pos:end="225:71"><name pos:start="225:68" pos:end="225:71">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="227:5" pos:end="227:64"><expr pos:start="227:5" pos:end="227:63"><name pos:start="227:5" pos:end="227:11">key_dev</name> <operator pos:start="227:13" pos:end="227:13">=</operator> <call pos:start="227:15" pos:end="227:63"><name pos:start="227:15" pos:end="227:34">sysbus_create_simple</name><argument_list pos:start="227:35" pos:end="227:63">(<argument pos:start="227:36" pos:end="227:52"><expr pos:start="227:36" pos:end="227:52"><name pos:start="227:36" pos:end="227:52">TYPE_MUSICPAL_KEY</name></expr></argument>, <argument pos:start="227:55" pos:end="227:56"><expr pos:start="227:55" pos:end="227:56"><operator pos:start="227:55" pos:end="227:55">-</operator><literal type="number" pos:start="227:56" pos:end="227:56">1</literal></expr></argument>, <argument pos:start="227:59" pos:end="227:62"><expr pos:start="227:59" pos:end="227:62"><name pos:start="227:59" pos:end="227:62">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="231:5" pos:end="231:23">/* I2C read data */</comment>

    <expr_stmt pos:start="233:5" pos:end="235:71"><expr pos:start="233:5" pos:end="235:70"><call pos:start="233:5" pos:end="235:70"><name pos:start="233:5" pos:end="233:25">qdev_connect_gpio_out</name><argument_list pos:start="233:26" pos:end="235:70">(<argument pos:start="233:27" pos:end="233:33"><expr pos:start="233:27" pos:end="233:33"><name pos:start="233:27" pos:end="233:33">i2c_dev</name></expr></argument>, <argument pos:start="233:36" pos:end="233:36"><expr pos:start="233:36" pos:end="233:36"><literal type="number" pos:start="233:36" pos:end="233:36">0</literal></expr></argument>,

                          <argument pos:start="235:27" pos:end="235:69"><expr pos:start="235:27" pos:end="235:69"><call pos:start="235:27" pos:end="235:69"><name pos:start="235:27" pos:end="235:42">qdev_get_gpio_in</name><argument_list pos:start="235:43" pos:end="235:69">(<argument pos:start="235:44" pos:end="235:46"><expr pos:start="235:44" pos:end="235:46"><name pos:start="235:44" pos:end="235:46">dev</name></expr></argument>, <argument pos:start="235:49" pos:end="235:68"><expr pos:start="235:49" pos:end="235:68"><name pos:start="235:49" pos:end="235:68">MP_GPIO_I2C_DATA_BIT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="237:5" pos:end="237:18">/* I2C data */</comment>

    <expr_stmt pos:start="239:5" pos:end="239:64"><expr pos:start="239:5" pos:end="239:63"><call pos:start="239:5" pos:end="239:63"><name pos:start="239:5" pos:end="239:25">qdev_connect_gpio_out</name><argument_list pos:start="239:26" pos:end="239:63">(<argument pos:start="239:27" pos:end="239:29"><expr pos:start="239:27" pos:end="239:29"><name pos:start="239:27" pos:end="239:29">dev</name></expr></argument>, <argument pos:start="239:32" pos:end="239:32"><expr pos:start="239:32" pos:end="239:32"><literal type="number" pos:start="239:32" pos:end="239:32">3</literal></expr></argument>, <argument pos:start="239:35" pos:end="239:62"><expr pos:start="239:35" pos:end="239:62"><call pos:start="239:35" pos:end="239:62"><name pos:start="239:35" pos:end="239:50">qdev_get_gpio_in</name><argument_list pos:start="239:51" pos:end="239:62">(<argument pos:start="239:52" pos:end="239:58"><expr pos:start="239:52" pos:end="239:58"><name pos:start="239:52" pos:end="239:58">i2c_dev</name></expr></argument>, <argument pos:start="239:61" pos:end="239:61"><expr pos:start="239:61" pos:end="239:61"><literal type="number" pos:start="239:61" pos:end="239:61">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="241:5" pos:end="241:19">/* I2C clock */</comment>

    <expr_stmt pos:start="243:5" pos:end="243:64"><expr pos:start="243:5" pos:end="243:63"><call pos:start="243:5" pos:end="243:63"><name pos:start="243:5" pos:end="243:25">qdev_connect_gpio_out</name><argument_list pos:start="243:26" pos:end="243:63">(<argument pos:start="243:27" pos:end="243:29"><expr pos:start="243:27" pos:end="243:29"><name pos:start="243:27" pos:end="243:29">dev</name></expr></argument>, <argument pos:start="243:32" pos:end="243:32"><expr pos:start="243:32" pos:end="243:32"><literal type="number" pos:start="243:32" pos:end="243:32">4</literal></expr></argument>, <argument pos:start="243:35" pos:end="243:62"><expr pos:start="243:35" pos:end="243:62"><call pos:start="243:35" pos:end="243:62"><name pos:start="243:35" pos:end="243:50">qdev_get_gpio_in</name><argument_list pos:start="243:51" pos:end="243:62">(<argument pos:start="243:52" pos:end="243:58"><expr pos:start="243:52" pos:end="243:58"><name pos:start="243:52" pos:end="243:58">i2c_dev</name></expr></argument>, <argument pos:start="243:61" pos:end="243:61"><expr pos:start="243:61" pos:end="243:61"><literal type="number" pos:start="243:61" pos:end="243:61">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="247:5" pos:end="251:5">for <control pos:start="247:9" pos:end="247:27">(<init pos:start="247:10" pos:end="247:15"><expr pos:start="247:10" pos:end="247:14"><name pos:start="247:10" pos:end="247:10">i</name> <operator pos:start="247:12" pos:end="247:12">=</operator> <literal type="number" pos:start="247:14" pos:end="247:14">0</literal></expr>;</init> <condition pos:start="247:17" pos:end="247:22"><expr pos:start="247:17" pos:end="247:21"><name pos:start="247:17" pos:end="247:17">i</name> <operator pos:start="247:19" pos:end="247:19">&lt;</operator> <literal type="number" pos:start="247:21" pos:end="247:21">3</literal></expr>;</condition> <incr pos:start="247:24" pos:end="247:26"><expr pos:start="247:24" pos:end="247:26"><name pos:start="247:24" pos:end="247:24">i</name><operator pos:start="247:25" pos:end="247:26">++</operator></expr></incr>)</control> <block pos:start="247:29" pos:end="251:5">{<block_content pos:start="249:9" pos:end="249:68">

        <expr_stmt pos:start="249:9" pos:end="249:68"><expr pos:start="249:9" pos:end="249:67"><call pos:start="249:9" pos:end="249:67"><name pos:start="249:9" pos:end="249:29">qdev_connect_gpio_out</name><argument_list pos:start="249:30" pos:end="249:67">(<argument pos:start="249:31" pos:end="249:33"><expr pos:start="249:31" pos:end="249:33"><name pos:start="249:31" pos:end="249:33">dev</name></expr></argument>, <argument pos:start="249:36" pos:end="249:36"><expr pos:start="249:36" pos:end="249:36"><name pos:start="249:36" pos:end="249:36">i</name></expr></argument>, <argument pos:start="249:39" pos:end="249:66"><expr pos:start="249:39" pos:end="249:66"><call pos:start="249:39" pos:end="249:66"><name pos:start="249:39" pos:end="249:54">qdev_get_gpio_in</name><argument_list pos:start="249:55" pos:end="249:66">(<argument pos:start="249:56" pos:end="249:62"><expr pos:start="249:56" pos:end="249:62"><name pos:start="249:56" pos:end="249:62">lcd_dev</name></expr></argument>, <argument pos:start="249:65" pos:end="249:65"><expr pos:start="249:65" pos:end="249:65"><name pos:start="249:65" pos:end="249:65">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <for pos:start="253:5" pos:end="257:5">for <control pos:start="253:9" pos:end="253:27">(<init pos:start="253:10" pos:end="253:15"><expr pos:start="253:10" pos:end="253:14"><name pos:start="253:10" pos:end="253:10">i</name> <operator pos:start="253:12" pos:end="253:12">=</operator> <literal type="number" pos:start="253:14" pos:end="253:14">0</literal></expr>;</init> <condition pos:start="253:17" pos:end="253:22"><expr pos:start="253:17" pos:end="253:21"><name pos:start="253:17" pos:end="253:17">i</name> <operator pos:start="253:19" pos:end="253:19">&lt;</operator> <literal type="number" pos:start="253:21" pos:end="253:21">4</literal></expr>;</condition> <incr pos:start="253:24" pos:end="253:26"><expr pos:start="253:24" pos:end="253:26"><name pos:start="253:24" pos:end="253:24">i</name><operator pos:start="253:25" pos:end="253:26">++</operator></expr></incr>)</control> <block pos:start="253:29" pos:end="257:5">{<block_content pos:start="255:9" pos:end="255:72">

        <expr_stmt pos:start="255:9" pos:end="255:72"><expr pos:start="255:9" pos:end="255:71"><call pos:start="255:9" pos:end="255:71"><name pos:start="255:9" pos:end="255:29">qdev_connect_gpio_out</name><argument_list pos:start="255:30" pos:end="255:71">(<argument pos:start="255:31" pos:end="255:37"><expr pos:start="255:31" pos:end="255:37"><name pos:start="255:31" pos:end="255:37">key_dev</name></expr></argument>, <argument pos:start="255:40" pos:end="255:40"><expr pos:start="255:40" pos:end="255:40"><name pos:start="255:40" pos:end="255:40">i</name></expr></argument>, <argument pos:start="255:43" pos:end="255:70"><expr pos:start="255:43" pos:end="255:70"><call pos:start="255:43" pos:end="255:70"><name pos:start="255:43" pos:end="255:58">qdev_get_gpio_in</name><argument_list pos:start="255:59" pos:end="255:70">(<argument pos:start="255:60" pos:end="255:62"><expr pos:start="255:60" pos:end="255:62"><name pos:start="255:60" pos:end="255:62">dev</name></expr></argument>, <argument pos:start="255:65" pos:end="255:69"><expr pos:start="255:65" pos:end="255:69"><name pos:start="255:65" pos:end="255:65">i</name> <operator pos:start="255:67" pos:end="255:67">+</operator> <literal type="number" pos:start="255:69" pos:end="255:69">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <for pos:start="259:5" pos:end="263:5">for <control pos:start="259:9" pos:end="259:27">(<init pos:start="259:10" pos:end="259:15"><expr pos:start="259:10" pos:end="259:14"><name pos:start="259:10" pos:end="259:10">i</name> <operator pos:start="259:12" pos:end="259:12">=</operator> <literal type="number" pos:start="259:14" pos:end="259:14">4</literal></expr>;</init> <condition pos:start="259:17" pos:end="259:22"><expr pos:start="259:17" pos:end="259:21"><name pos:start="259:17" pos:end="259:17">i</name> <operator pos:start="259:19" pos:end="259:19">&lt;</operator> <literal type="number" pos:start="259:21" pos:end="259:21">8</literal></expr>;</condition> <incr pos:start="259:24" pos:end="259:26"><expr pos:start="259:24" pos:end="259:26"><name pos:start="259:24" pos:end="259:24">i</name><operator pos:start="259:25" pos:end="259:26">++</operator></expr></incr>)</control> <block pos:start="259:29" pos:end="263:5">{<block_content pos:start="261:9" pos:end="261:73">

        <expr_stmt pos:start="261:9" pos:end="261:73"><expr pos:start="261:9" pos:end="261:72"><call pos:start="261:9" pos:end="261:72"><name pos:start="261:9" pos:end="261:29">qdev_connect_gpio_out</name><argument_list pos:start="261:30" pos:end="261:72">(<argument pos:start="261:31" pos:end="261:37"><expr pos:start="261:31" pos:end="261:37"><name pos:start="261:31" pos:end="261:37">key_dev</name></expr></argument>, <argument pos:start="261:40" pos:end="261:40"><expr pos:start="261:40" pos:end="261:40"><name pos:start="261:40" pos:end="261:40">i</name></expr></argument>, <argument pos:start="261:43" pos:end="261:71"><expr pos:start="261:43" pos:end="261:71"><call pos:start="261:43" pos:end="261:71"><name pos:start="261:43" pos:end="261:58">qdev_get_gpio_in</name><argument_list pos:start="261:59" pos:end="261:71">(<argument pos:start="261:60" pos:end="261:62"><expr pos:start="261:60" pos:end="261:62"><name pos:start="261:60" pos:end="261:62">dev</name></expr></argument>, <argument pos:start="261:65" pos:end="261:70"><expr pos:start="261:65" pos:end="261:70"><name pos:start="261:65" pos:end="261:65">i</name> <operator pos:start="261:67" pos:end="261:67">+</operator> <literal type="number" pos:start="261:69" pos:end="261:70">15</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="267:5" pos:end="267:61"><expr pos:start="267:5" pos:end="267:60"><name pos:start="267:5" pos:end="267:14">wm8750_dev</name> <operator pos:start="267:16" pos:end="267:16">=</operator> <call pos:start="267:18" pos:end="267:60"><name pos:start="267:18" pos:end="267:33">i2c_create_slave</name><argument_list pos:start="267:34" pos:end="267:60">(<argument pos:start="267:35" pos:end="267:37"><expr pos:start="267:35" pos:end="267:37"><name pos:start="267:35" pos:end="267:37">i2c</name></expr></argument>, <argument pos:start="267:40" pos:end="267:47"><expr pos:start="267:40" pos:end="267:47"><literal type="string" pos:start="267:40" pos:end="267:47">"wm8750"</literal></expr></argument>, <argument pos:start="267:50" pos:end="267:59"><expr pos:start="267:50" pos:end="267:59"><name pos:start="267:50" pos:end="267:59">MP_WM_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="269:5" pos:end="269:47"><expr pos:start="269:5" pos:end="269:46"><name pos:start="269:5" pos:end="269:7">dev</name> <operator pos:start="269:9" pos:end="269:9">=</operator> <call pos:start="269:11" pos:end="269:46"><name pos:start="269:11" pos:end="269:21">qdev_create</name><argument_list pos:start="269:22" pos:end="269:46">(<argument pos:start="269:23" pos:end="269:26"><expr pos:start="269:23" pos:end="269:26"><name pos:start="269:23" pos:end="269:26">NULL</name></expr></argument>, <argument pos:start="269:29" pos:end="269:45"><expr pos:start="269:29" pos:end="269:45"><literal type="string" pos:start="269:29" pos:end="269:45">"mv88w8618_audio"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="271:5" pos:end="271:28"><expr pos:start="271:5" pos:end="271:27"><name pos:start="271:5" pos:end="271:5">s</name> <operator pos:start="271:7" pos:end="271:7">=</operator> <call pos:start="271:9" pos:end="271:27"><name pos:start="271:9" pos:end="271:22">SYS_BUS_DEVICE</name><argument_list pos:start="271:23" pos:end="271:27">(<argument pos:start="271:24" pos:end="271:26"><expr pos:start="271:24" pos:end="271:26"><name pos:start="271:24" pos:end="271:26">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="273:5" pos:end="273:49"><expr pos:start="273:5" pos:end="273:48"><call pos:start="273:5" pos:end="273:48"><name pos:start="273:5" pos:end="273:21">qdev_prop_set_ptr</name><argument_list pos:start="273:22" pos:end="273:48">(<argument pos:start="273:23" pos:end="273:25"><expr pos:start="273:23" pos:end="273:25"><name pos:start="273:23" pos:end="273:25">dev</name></expr></argument>, <argument pos:start="273:28" pos:end="273:35"><expr pos:start="273:28" pos:end="273:35"><literal type="string" pos:start="273:28" pos:end="273:35">"wm8750"</literal></expr></argument>, <argument pos:start="273:38" pos:end="273:47"><expr pos:start="273:38" pos:end="273:47"><name pos:start="273:38" pos:end="273:47">wm8750_dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="275:5" pos:end="275:26"><expr pos:start="275:5" pos:end="275:25"><call pos:start="275:5" pos:end="275:25"><name pos:start="275:5" pos:end="275:20">qdev_init_nofail</name><argument_list pos:start="275:21" pos:end="275:25">(<argument pos:start="275:22" pos:end="275:24"><expr pos:start="275:22" pos:end="275:24"><name pos:start="275:22" pos:end="275:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="277:5" pos:end="277:41"><expr pos:start="277:5" pos:end="277:40"><call pos:start="277:5" pos:end="277:40"><name pos:start="277:5" pos:end="277:19">sysbus_mmio_map</name><argument_list pos:start="277:20" pos:end="277:40">(<argument pos:start="277:21" pos:end="277:21"><expr pos:start="277:21" pos:end="277:21"><name pos:start="277:21" pos:end="277:21">s</name></expr></argument>, <argument pos:start="277:24" pos:end="277:24"><expr pos:start="277:24" pos:end="277:24"><literal type="number" pos:start="277:24" pos:end="277:24">0</literal></expr></argument>, <argument pos:start="277:27" pos:end="277:39"><expr pos:start="277:27" pos:end="277:39"><name pos:start="277:27" pos:end="277:39">MP_AUDIO_BASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="279:5" pos:end="279:48"><expr pos:start="279:5" pos:end="279:47"><call pos:start="279:5" pos:end="279:47"><name pos:start="279:5" pos:end="279:22">sysbus_connect_irq</name><argument_list pos:start="279:23" pos:end="279:47">(<argument pos:start="279:24" pos:end="279:24"><expr pos:start="279:24" pos:end="279:24"><name pos:start="279:24" pos:end="279:24">s</name></expr></argument>, <argument pos:start="279:27" pos:end="279:27"><expr pos:start="279:27" pos:end="279:27"><literal type="number" pos:start="279:27" pos:end="279:27">0</literal></expr></argument>, <argument pos:start="279:30" pos:end="279:46"><expr pos:start="279:30" pos:end="279:46"><name pos:start="279:30" pos:end="279:46"><name pos:start="279:30" pos:end="279:32">pic</name><index pos:start="279:33" pos:end="279:46">[<expr pos:start="279:34" pos:end="279:45"><name pos:start="279:34" pos:end="279:45">MP_AUDIO_IRQ</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="283:5" pos:end="283:50"><expr pos:start="283:5" pos:end="283:49"><name pos:start="283:5" pos:end="283:27"><name pos:start="283:5" pos:end="283:18">musicpal_binfo</name><operator pos:start="283:19" pos:end="283:19">.</operator><name pos:start="283:20" pos:end="283:27">ram_size</name></name> <operator pos:start="283:29" pos:end="283:29">=</operator> <name pos:start="283:31" pos:end="283:49">MP_RAM_DEFAULT_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="285:5" pos:end="285:53"><expr pos:start="285:5" pos:end="285:52"><name pos:start="285:5" pos:end="285:34"><name pos:start="285:5" pos:end="285:18">musicpal_binfo</name><operator pos:start="285:19" pos:end="285:19">.</operator><name pos:start="285:20" pos:end="285:34">kernel_filename</name></name> <operator pos:start="285:36" pos:end="285:36">=</operator> <name pos:start="285:38" pos:end="285:52">kernel_filename</name></expr>;</expr_stmt>

    <expr_stmt pos:start="287:5" pos:end="287:51"><expr pos:start="287:5" pos:end="287:50"><name pos:start="287:5" pos:end="287:33"><name pos:start="287:5" pos:end="287:18">musicpal_binfo</name><operator pos:start="287:19" pos:end="287:19">.</operator><name pos:start="287:20" pos:end="287:33">kernel_cmdline</name></name> <operator pos:start="287:35" pos:end="287:35">=</operator> <name pos:start="287:37" pos:end="287:50">kernel_cmdline</name></expr>;</expr_stmt>

    <expr_stmt pos:start="289:5" pos:end="289:53"><expr pos:start="289:5" pos:end="289:52"><name pos:start="289:5" pos:end="289:34"><name pos:start="289:5" pos:end="289:18">musicpal_binfo</name><operator pos:start="289:19" pos:end="289:19">.</operator><name pos:start="289:20" pos:end="289:34">initrd_filename</name></name> <operator pos:start="289:36" pos:end="289:36">=</operator> <name pos:start="289:38" pos:end="289:52">initrd_filename</name></expr>;</expr_stmt>

    <expr_stmt pos:start="291:5" pos:end="291:42"><expr pos:start="291:5" pos:end="291:41"><call pos:start="291:5" pos:end="291:41"><name pos:start="291:5" pos:end="291:19">arm_load_kernel</name><argument_list pos:start="291:20" pos:end="291:41">(<argument pos:start="291:21" pos:end="291:23"><expr pos:start="291:21" pos:end="291:23"><name pos:start="291:21" pos:end="291:23">cpu</name></expr></argument>, <argument pos:start="291:26" pos:end="291:40"><expr pos:start="291:26" pos:end="291:40"><operator pos:start="291:26" pos:end="291:26">&amp;</operator><name pos:start="291:27" pos:end="291:40">musicpal_binfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
