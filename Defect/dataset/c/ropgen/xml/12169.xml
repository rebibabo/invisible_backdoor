<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12169.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:46"><name pos:start="1:1" pos:end="1:9">udp_input</name><argument_list pos:start="1:10" pos:end="1:46">(<argument pos:start="1:11" pos:end="1:33">register struct mbuf *m</argument>, <argument pos:start="1:36" pos:end="1:45">int iphlen</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="339:1">{<block_content pos:start="5:9" pos:end="337:18">

	<decl_stmt pos:start="5:9" pos:end="5:32"><decl pos:start="5:9" pos:end="5:31"><type pos:start="5:9" pos:end="5:15"><name pos:start="5:9" pos:end="5:13">Slirp</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:20">slirp</name> <init pos:start="5:22" pos:end="5:31">= <expr pos:start="5:24" pos:end="5:31"><name pos:start="5:24" pos:end="5:31"><name pos:start="5:24" pos:end="5:24">m</name><operator pos:start="5:25" pos:end="5:26">-&gt;</operator><name pos:start="5:27" pos:end="5:31">slirp</name></name></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="7:9" pos:end="7:31"><decl pos:start="7:9" pos:end="7:30"><type pos:start="7:9" pos:end="7:28"><specifier pos:start="7:9" pos:end="7:16">register</specifier> <name pos:start="7:18" pos:end="7:26"><name pos:start="7:18" pos:end="7:23">struct</name> <name pos:start="7:25" pos:end="7:26">ip</name></name> <modifier pos:start="7:28" pos:end="7:28">*</modifier></type><name pos:start="7:29" pos:end="7:30">ip</name></decl>;</decl_stmt>

	<decl_stmt pos:start="9:9" pos:end="9:35"><decl pos:start="9:9" pos:end="9:34"><type pos:start="9:9" pos:end="9:32"><specifier pos:start="9:9" pos:end="9:16">register</specifier> <name pos:start="9:18" pos:end="9:30"><name pos:start="9:18" pos:end="9:23">struct</name> <name pos:start="9:25" pos:end="9:30">udphdr</name></name> <modifier pos:start="9:32" pos:end="9:32">*</modifier></type><name pos:start="9:33" pos:end="9:34">uh</name></decl>;</decl_stmt>

	<decl_stmt pos:start="11:9" pos:end="11:16"><decl pos:start="11:9" pos:end="11:15"><type pos:start="11:9" pos:end="11:11"><name pos:start="11:9" pos:end="11:11">int</name></type> <name pos:start="11:13" pos:end="11:15">len</name></decl>;</decl_stmt>

	<decl_stmt pos:start="13:9" pos:end="13:26"><decl pos:start="13:9" pos:end="13:25"><type pos:start="13:9" pos:end="13:17"><name pos:start="13:9" pos:end="13:17"><name pos:start="13:9" pos:end="13:14">struct</name> <name pos:start="13:16" pos:end="13:17">ip</name></name></type> <name pos:start="13:19" pos:end="13:25">save_ip</name></decl>;</decl_stmt>

	<decl_stmt pos:start="15:9" pos:end="15:26"><decl pos:start="15:9" pos:end="15:25"><type pos:start="15:9" pos:end="15:23"><name pos:start="15:9" pos:end="15:21"><name pos:start="15:9" pos:end="15:14">struct</name> <name pos:start="15:16" pos:end="15:21">socket</name></name> <modifier pos:start="15:23" pos:end="15:23">*</modifier></type><name pos:start="15:24" pos:end="15:25">so</name></decl>;</decl_stmt>



	<expr_stmt pos:start="19:9" pos:end="19:32"><expr pos:start="19:9" pos:end="19:31"><call pos:start="19:9" pos:end="19:31"><name pos:start="19:9" pos:end="19:18">DEBUG_CALL</name><argument_list pos:start="19:19" pos:end="19:31">(<argument pos:start="19:20" pos:end="19:30"><expr pos:start="19:20" pos:end="19:30"><literal type="string" pos:start="19:20" pos:end="19:30">"udp_input"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="21:9" pos:end="21:38"><expr pos:start="21:9" pos:end="21:37"><call pos:start="21:9" pos:end="21:37"><name pos:start="21:9" pos:end="21:17">DEBUG_ARG</name><argument_list pos:start="21:18" pos:end="21:37">(<argument pos:start="21:19" pos:end="21:27"><expr pos:start="21:19" pos:end="21:27"><literal type="string" pos:start="21:19" pos:end="21:27">"m = %lx"</literal></expr></argument>, <argument pos:start="21:30" pos:end="21:36"><expr pos:start="21:30" pos:end="21:36"><operator pos:start="21:30" pos:end="21:30">(</operator><name pos:start="21:31" pos:end="21:34">long</name><operator pos:start="21:35" pos:end="21:35">)</operator><name pos:start="21:36" pos:end="21:36">m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="23:9" pos:end="23:41"><expr pos:start="23:9" pos:end="23:40"><call pos:start="23:9" pos:end="23:40"><name pos:start="23:9" pos:end="23:17">DEBUG_ARG</name><argument_list pos:start="23:18" pos:end="23:40">(<argument pos:start="23:19" pos:end="23:31"><expr pos:start="23:19" pos:end="23:31"><literal type="string" pos:start="23:19" pos:end="23:31">"iphlen = %d"</literal></expr></argument>, <argument pos:start="23:34" pos:end="23:39"><expr pos:start="23:34" pos:end="23:39"><name pos:start="23:34" pos:end="23:39">iphlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<comment type="block" pos:start="27:9" pos:end="37:11">/*

	 * Strip IP options, if any; should skip this,

	 * make available to user, and use on returned packets,

	 * but we don't yet have a way to check the checksum

	 * with options still present.

	 */</comment>

	<if_stmt pos:start="39:9" pos:end="45:9"><if pos:start="39:9" pos:end="45:9">if<condition pos:start="39:11" pos:end="39:38">(<expr pos:start="39:12" pos:end="39:37"><name pos:start="39:12" pos:end="39:17">iphlen</name> <operator pos:start="39:19" pos:end="39:19">&gt;</operator> <sizeof pos:start="39:21" pos:end="39:37">sizeof<argument_list pos:start="39:27" pos:end="39:37">(<argument pos:start="39:28" pos:end="39:36"><expr pos:start="39:28" pos:end="39:36">struct <name pos:start="39:35" pos:end="39:36">ip</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="39:40" pos:end="45:9">{<block_content pos:start="41:17" pos:end="43:43">

		<expr_stmt pos:start="41:17" pos:end="41:53"><expr pos:start="41:17" pos:end="41:52"><call pos:start="41:17" pos:end="41:52"><name pos:start="41:17" pos:end="41:31">ip_stripoptions</name><argument_list pos:start="41:32" pos:end="41:52">(<argument pos:start="41:33" pos:end="41:33"><expr pos:start="41:33" pos:end="41:33"><name pos:start="41:33" pos:end="41:33">m</name></expr></argument>, <argument pos:start="41:36" pos:end="41:51"><expr pos:start="41:36" pos:end="41:51"><operator pos:start="41:36" pos:end="41:36">(</operator>struct <name pos:start="41:44" pos:end="41:47">mbuf</name> <operator pos:start="41:49" pos:end="41:49">*</operator><operator pos:start="41:50" pos:end="41:50">)</operator><literal type="number" pos:start="41:51" pos:end="41:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="43:17" pos:end="43:43"><expr pos:start="43:17" pos:end="43:42"><name pos:start="43:17" pos:end="43:22">iphlen</name> <operator pos:start="43:24" pos:end="43:24">=</operator> <sizeof pos:start="43:26" pos:end="43:42">sizeof<argument_list pos:start="43:32" pos:end="43:42">(<argument pos:start="43:33" pos:end="43:41"><expr pos:start="43:33" pos:end="43:41">struct <name pos:start="43:40" pos:end="43:41">ip</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>



	<comment type="block" pos:start="49:9" pos:end="53:11">/*

	 * Get IP and UDP header together in first mbuf.

	 */</comment>

	<expr_stmt pos:start="55:9" pos:end="55:34"><expr pos:start="55:9" pos:end="55:33"><name pos:start="55:9" pos:end="55:10">ip</name> <operator pos:start="55:12" pos:end="55:12">=</operator> <call pos:start="55:14" pos:end="55:33"><name pos:start="55:14" pos:end="55:17">mtod</name><argument_list pos:start="55:18" pos:end="55:33">(<argument pos:start="55:19" pos:end="55:19"><expr pos:start="55:19" pos:end="55:19"><name pos:start="55:19" pos:end="55:19">m</name></expr></argument>, <argument pos:start="55:22" pos:end="55:32"><expr pos:start="55:22" pos:end="55:32">struct <name pos:start="55:29" pos:end="55:30">ip</name> <operator pos:start="55:32" pos:end="55:32">*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="57:9" pos:end="57:53"><expr pos:start="57:9" pos:end="57:52"><name pos:start="57:9" pos:end="57:10">uh</name> <operator pos:start="57:12" pos:end="57:12">=</operator> <operator pos:start="57:14" pos:end="57:14">(</operator>struct <name pos:start="57:22" pos:end="57:27">udphdr</name> <operator pos:start="57:29" pos:end="57:29">*</operator><operator pos:start="57:30" pos:end="57:30">)</operator><operator pos:start="57:31" pos:end="57:31">(</operator><operator pos:start="57:32" pos:end="57:32">(</operator><name pos:start="57:33" pos:end="57:39">caddr_t</name><operator pos:start="57:40" pos:end="57:40">)</operator><name pos:start="57:41" pos:end="57:42">ip</name> <operator pos:start="57:44" pos:end="57:44">+</operator> <name pos:start="57:46" pos:end="57:51">iphlen</name><operator pos:start="57:52" pos:end="57:52">)</operator></expr>;</expr_stmt>



	<comment type="block" pos:start="61:9" pos:end="67:11">/*

	 * Make mbuf data length reflect UDP length.

	 * If not enough data to reflect UDP length, drop.

	 */</comment>

	<expr_stmt pos:start="69:9" pos:end="69:43"><expr pos:start="69:9" pos:end="69:42"><name pos:start="69:9" pos:end="69:11">len</name> <operator pos:start="69:13" pos:end="69:13">=</operator> <call pos:start="69:15" pos:end="69:42"><name pos:start="69:15" pos:end="69:19">ntohs</name><argument_list pos:start="69:20" pos:end="69:42">(<argument pos:start="69:21" pos:end="69:41"><expr pos:start="69:21" pos:end="69:41"><operator pos:start="69:21" pos:end="69:21">(</operator><name pos:start="69:22" pos:end="69:29">uint16_t</name><operator pos:start="69:30" pos:end="69:30">)</operator><name pos:start="69:31" pos:end="69:41"><name pos:start="69:31" pos:end="69:32">uh</name><operator pos:start="69:33" pos:end="69:34">-&gt;</operator><name pos:start="69:35" pos:end="69:41">uh_ulen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<if_stmt pos:start="73:9" pos:end="85:9"><if pos:start="73:9" pos:end="85:9">if <condition pos:start="73:12" pos:end="73:30">(<expr pos:start="73:13" pos:end="73:29"><name pos:start="73:13" pos:end="73:22"><name pos:start="73:13" pos:end="73:14">ip</name><operator pos:start="73:15" pos:end="73:16">-&gt;</operator><name pos:start="73:17" pos:end="73:22">ip_len</name></name> <operator pos:start="73:24" pos:end="73:25">!=</operator> <name pos:start="73:27" pos:end="73:29">len</name></expr>)</condition> <block pos:start="73:32" pos:end="85:9">{<block_content pos:start="75:17" pos:end="83:33">

		<if_stmt pos:start="75:17" pos:end="79:17"><if pos:start="75:17" pos:end="79:17">if <condition pos:start="75:20" pos:end="75:37">(<expr pos:start="75:21" pos:end="75:36"><name pos:start="75:21" pos:end="75:23">len</name> <operator pos:start="75:25" pos:end="75:25">&gt;</operator> <name pos:start="75:27" pos:end="75:36"><name pos:start="75:27" pos:end="75:28">ip</name><operator pos:start="75:29" pos:end="75:30">-&gt;</operator><name pos:start="75:31" pos:end="75:36">ip_len</name></name></expr>)</condition> <block pos:start="75:39" pos:end="79:17">{<block_content pos:start="77:25" pos:end="77:33">

			<goto pos:start="77:25" pos:end="77:33">goto <name pos:start="77:30" pos:end="77:32">bad</name>;</goto>

		</block_content>}</block></if></if_stmt>

		<expr_stmt pos:start="81:17" pos:end="81:43"><expr pos:start="81:17" pos:end="81:42"><call pos:start="81:17" pos:end="81:42"><name pos:start="81:17" pos:end="81:21">m_adj</name><argument_list pos:start="81:22" pos:end="81:42">(<argument pos:start="81:23" pos:end="81:23"><expr pos:start="81:23" pos:end="81:23"><name pos:start="81:23" pos:end="81:23">m</name></expr></argument>, <argument pos:start="81:26" pos:end="81:41"><expr pos:start="81:26" pos:end="81:41"><name pos:start="81:26" pos:end="81:28">len</name> <operator pos:start="81:30" pos:end="81:30">-</operator> <name pos:start="81:32" pos:end="81:41"><name pos:start="81:32" pos:end="81:33">ip</name><operator pos:start="81:34" pos:end="81:35">-&gt;</operator><name pos:start="81:36" pos:end="81:41">ip_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="83:17" pos:end="83:33"><expr pos:start="83:17" pos:end="83:32"><name pos:start="83:17" pos:end="83:26"><name pos:start="83:17" pos:end="83:18">ip</name><operator pos:start="83:19" pos:end="83:20">-&gt;</operator><name pos:start="83:21" pos:end="83:26">ip_len</name></name> <operator pos:start="83:28" pos:end="83:28">=</operator> <name pos:start="83:30" pos:end="83:32">len</name></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>



	<comment type="block" pos:start="89:9" pos:end="95:11">/*

	 * Save a copy of the IP header in case we want restore it

	 * for sending an ICMP error message in response.

	 */</comment>

	<expr_stmt pos:start="97:9" pos:end="97:22"><expr pos:start="97:9" pos:end="97:21"><name pos:start="97:9" pos:end="97:15">save_ip</name> <operator pos:start="97:17" pos:end="97:17">=</operator> <operator pos:start="97:19" pos:end="97:19">*</operator><name pos:start="97:20" pos:end="97:21">ip</name></expr>;</expr_stmt>

	<expr_stmt pos:start="99:9" pos:end="99:32"><expr pos:start="99:9" pos:end="99:31"><name pos:start="99:9" pos:end="99:22"><name pos:start="99:9" pos:end="99:15">save_ip</name><operator pos:start="99:16" pos:end="99:16">.</operator><name pos:start="99:17" pos:end="99:22">ip_len</name></name><operator pos:start="99:23" pos:end="99:24">+=</operator> <name pos:start="99:26" pos:end="99:31">iphlen</name></expr>;</expr_stmt>         <comment type="block" pos:start="99:42" pos:end="99:71">/* tcp_input subtracts this */</comment>



	<comment type="block" pos:start="103:9" pos:end="107:11">/*

	 * Checksum extended UDP header and data.

	 */</comment>

	<if_stmt pos:start="109:9" pos:end="123:9"><if pos:start="109:9" pos:end="123:9">if <condition pos:start="109:12" pos:end="109:23">(<expr pos:start="109:13" pos:end="109:22"><name pos:start="109:13" pos:end="109:22"><name pos:start="109:13" pos:end="109:14">uh</name><operator pos:start="109:15" pos:end="109:16">-&gt;</operator><name pos:start="109:17" pos:end="109:22">uh_sum</name></name></expr>)</condition> <block pos:start="109:25" pos:end="123:9">{<block_content pos:start="111:7" pos:end="121:11">

      <expr_stmt pos:start="111:7" pos:end="111:74"><expr pos:start="111:7" pos:end="111:73"><call pos:start="111:7" pos:end="111:73"><name pos:start="111:7" pos:end="111:12">memset</name><argument_list pos:start="111:13" pos:end="111:73">(<argument pos:start="111:14" pos:end="111:44"><expr pos:start="111:14" pos:end="111:44"><operator pos:start="111:14" pos:end="111:14">&amp;</operator><operator pos:start="111:15" pos:end="111:15">(</operator><operator pos:start="111:16" pos:end="111:16">(</operator>struct <name pos:start="111:24" pos:end="111:29">ipovly</name> <operator pos:start="111:31" pos:end="111:31">*</operator><operator pos:start="111:32" pos:end="111:32">)</operator><name pos:start="111:33" pos:end="111:34">ip</name><operator pos:start="111:35" pos:end="111:35">)</operator><operator pos:start="111:36" pos:end="111:37">-&gt;</operator><name pos:start="111:38" pos:end="111:44">ih_mbuf</name></expr></argument>, <argument pos:start="111:47" pos:end="111:47"><expr pos:start="111:47" pos:end="111:47"><literal type="number" pos:start="111:47" pos:end="111:47">0</literal></expr></argument>, <argument pos:start="111:50" pos:end="111:72"><expr pos:start="111:50" pos:end="111:72"><sizeof pos:start="111:50" pos:end="111:72">sizeof<argument_list pos:start="111:56" pos:end="111:72">(<argument pos:start="111:57" pos:end="111:71"><expr pos:start="111:57" pos:end="111:71">struct <name pos:start="111:64" pos:end="111:71">mbuf_ptr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  <expr_stmt pos:start="113:11" pos:end="113:43"><expr pos:start="113:11" pos:end="113:42"><operator pos:start="113:11" pos:end="113:11">(</operator><operator pos:start="113:12" pos:end="113:12">(</operator>struct <name pos:start="113:20" pos:end="113:25">ipovly</name> <operator pos:start="113:27" pos:end="113:27">*</operator><operator pos:start="113:28" pos:end="113:28">)</operator><name pos:start="113:29" pos:end="113:30">ip</name><operator pos:start="113:31" pos:end="113:31">)</operator><operator pos:start="113:32" pos:end="113:33">-&gt;</operator><name pos:start="113:34" pos:end="113:38">ih_x1</name> <operator pos:start="113:40" pos:end="113:40">=</operator> <literal type="number" pos:start="113:42" pos:end="113:42">0</literal></expr>;</expr_stmt>

	  <expr_stmt pos:start="115:11" pos:end="115:54"><expr pos:start="115:11" pos:end="115:53"><operator pos:start="115:11" pos:end="115:11">(</operator><operator pos:start="115:12" pos:end="115:12">(</operator>struct <name pos:start="115:20" pos:end="115:25">ipovly</name> <operator pos:start="115:27" pos:end="115:27">*</operator><operator pos:start="115:28" pos:end="115:28">)</operator><name pos:start="115:29" pos:end="115:30">ip</name><operator pos:start="115:31" pos:end="115:31">)</operator><operator pos:start="115:32" pos:end="115:33">-&gt;</operator><name pos:start="115:34" pos:end="115:39">ih_len</name> <operator pos:start="115:41" pos:end="115:41">=</operator> <name pos:start="115:43" pos:end="115:53"><name pos:start="115:43" pos:end="115:44">uh</name><operator pos:start="115:45" pos:end="115:46">-&gt;</operator><name pos:start="115:47" pos:end="115:53">uh_ulen</name></name></expr>;</expr_stmt>

	  <if_stmt pos:start="117:11" pos:end="121:11"><if pos:start="117:11" pos:end="121:11">if<condition pos:start="117:13" pos:end="117:47">(<expr pos:start="117:14" pos:end="117:46"><call pos:start="117:14" pos:end="117:46"><name pos:start="117:14" pos:end="117:18">cksum</name><argument_list pos:start="117:19" pos:end="117:46">(<argument pos:start="117:20" pos:end="117:20"><expr pos:start="117:20" pos:end="117:20"><name pos:start="117:20" pos:end="117:20">m</name></expr></argument>, <argument pos:start="117:23" pos:end="117:45"><expr pos:start="117:23" pos:end="117:45"><name pos:start="117:23" pos:end="117:25">len</name> <operator pos:start="117:27" pos:end="117:27">+</operator> <sizeof pos:start="117:29" pos:end="117:45">sizeof<argument_list pos:start="117:35" pos:end="117:45">(<argument pos:start="117:36" pos:end="117:44"><expr pos:start="117:36" pos:end="117:44">struct <name pos:start="117:43" pos:end="117:44">ip</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="117:49" pos:end="121:11">{<block_content pos:start="119:13" pos:end="119:21">

	    <goto pos:start="119:13" pos:end="119:21">goto <name pos:start="119:18" pos:end="119:20">bad</name>;</goto>

	  </block_content>}</block></if></if_stmt>

	</block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="127:9" pos:end="131:11">/*

         *  handle DHCP/BOOTP

         */</comment>

        <if_stmt pos:start="133:9" pos:end="143:13"><if pos:start="133:9" pos:end="143:13">if <condition pos:start="133:12" pos:end="137:46">(<expr pos:start="133:13" pos:end="137:45"><call pos:start="133:13" pos:end="133:31"><name pos:start="133:13" pos:end="133:17">ntohs</name><argument_list pos:start="133:18" pos:end="133:31">(<argument pos:start="133:19" pos:end="133:30"><expr pos:start="133:19" pos:end="133:30"><name pos:start="133:19" pos:end="133:30"><name pos:start="133:19" pos:end="133:20">uh</name><operator pos:start="133:21" pos:end="133:22">-&gt;</operator><name pos:start="133:23" pos:end="133:30">uh_dport</name></name></expr></argument>)</argument_list></call> <operator pos:start="133:33" pos:end="133:34">==</operator> <name pos:start="133:36" pos:end="133:47">BOOTP_SERVER</name> <operator pos:start="133:49" pos:end="133:50">&amp;&amp;</operator>

            <operator pos:start="135:13" pos:end="135:13">(</operator><name pos:start="135:14" pos:end="135:30"><name pos:start="135:14" pos:end="135:15">ip</name><operator pos:start="135:16" pos:end="135:17">-&gt;</operator><name pos:start="135:18" pos:end="135:23">ip_dst</name><operator pos:start="135:24" pos:end="135:24">.</operator><name pos:start="135:25" pos:end="135:30">s_addr</name></name> <operator pos:start="135:32" pos:end="135:33">==</operator> <name pos:start="135:35" pos:end="135:58"><name pos:start="135:35" pos:end="135:39">slirp</name><operator pos:start="135:40" pos:end="135:41">-&gt;</operator><name pos:start="135:42" pos:end="135:51">vhost_addr</name><operator pos:start="135:52" pos:end="135:52">.</operator><name pos:start="135:53" pos:end="135:58">s_addr</name></name> <operator pos:start="135:60" pos:end="135:61">||</operator>

             <name pos:start="137:14" pos:end="137:30"><name pos:start="137:14" pos:end="137:15">ip</name><operator pos:start="137:16" pos:end="137:17">-&gt;</operator><name pos:start="137:18" pos:end="137:23">ip_dst</name><operator pos:start="137:24" pos:end="137:24">.</operator><name pos:start="137:25" pos:end="137:30">s_addr</name></name> <operator pos:start="137:32" pos:end="137:33">==</operator> <literal type="number" pos:start="137:35" pos:end="137:44">0xffffffff</literal><operator pos:start="137:45" pos:end="137:45">)</operator></expr>)</condition> <block pos:start="137:48" pos:end="143:13">{<block_content pos:start="139:17" pos:end="141:25">

                <expr_stmt pos:start="139:17" pos:end="139:31"><expr pos:start="139:17" pos:end="139:30"><call pos:start="139:17" pos:end="139:30"><name pos:start="139:17" pos:end="139:27">bootp_input</name><argument_list pos:start="139:28" pos:end="139:30">(<argument pos:start="139:29" pos:end="139:29"><expr pos:start="139:29" pos:end="139:29"><name pos:start="139:29" pos:end="139:29">m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="141:17" pos:end="141:25">goto <name pos:start="141:22" pos:end="141:24">bad</name>;</goto>

            </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="147:9" pos:end="151:11">/*

         *  handle TFTP

         */</comment>

        <if_stmt pos:start="153:9" pos:end="161:9"><if pos:start="153:9" pos:end="161:9">if <condition pos:start="153:12" pos:end="155:58">(<expr pos:start="153:13" pos:end="155:57"><call pos:start="153:13" pos:end="153:31"><name pos:start="153:13" pos:end="153:17">ntohs</name><argument_list pos:start="153:18" pos:end="153:31">(<argument pos:start="153:19" pos:end="153:30"><expr pos:start="153:19" pos:end="153:30"><name pos:start="153:19" pos:end="153:30"><name pos:start="153:19" pos:end="153:20">uh</name><operator pos:start="153:21" pos:end="153:22">-&gt;</operator><name pos:start="153:23" pos:end="153:30">uh_dport</name></name></expr></argument>)</argument_list></call> <operator pos:start="153:33" pos:end="153:34">==</operator> <name pos:start="153:36" pos:end="153:46">TFTP_SERVER</name> <operator pos:start="153:48" pos:end="153:49">&amp;&amp;</operator>

            <name pos:start="155:13" pos:end="155:29"><name pos:start="155:13" pos:end="155:14">ip</name><operator pos:start="155:15" pos:end="155:16">-&gt;</operator><name pos:start="155:17" pos:end="155:22">ip_dst</name><operator pos:start="155:23" pos:end="155:23">.</operator><name pos:start="155:24" pos:end="155:29">s_addr</name></name> <operator pos:start="155:31" pos:end="155:32">==</operator> <name pos:start="155:34" pos:end="155:57"><name pos:start="155:34" pos:end="155:38">slirp</name><operator pos:start="155:39" pos:end="155:40">-&gt;</operator><name pos:start="155:41" pos:end="155:50">vhost_addr</name><operator pos:start="155:51" pos:end="155:51">.</operator><name pos:start="155:52" pos:end="155:57">s_addr</name></name></expr>)</condition> <block pos:start="155:60" pos:end="161:9">{<block_content pos:start="157:13" pos:end="159:21">

            <expr_stmt pos:start="157:13" pos:end="157:26"><expr pos:start="157:13" pos:end="157:25"><call pos:start="157:13" pos:end="157:25"><name pos:start="157:13" pos:end="157:22">tftp_input</name><argument_list pos:start="157:23" pos:end="157:25">(<argument pos:start="157:24" pos:end="157:24"><expr pos:start="157:24" pos:end="157:24"><name pos:start="157:24" pos:end="157:24">m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="159:13" pos:end="159:21">goto <name pos:start="159:18" pos:end="159:20">bad</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="165:9" pos:end="169:9"><if pos:start="165:9" pos:end="169:9">if <condition pos:start="165:12" pos:end="165:30">(<expr pos:start="165:13" pos:end="165:29"><name pos:start="165:13" pos:end="165:29"><name pos:start="165:13" pos:end="165:17">slirp</name><operator pos:start="165:18" pos:end="165:19">-&gt;</operator><name pos:start="165:20" pos:end="165:29">restricted</name></name></expr>)</condition> <block pos:start="165:32" pos:end="169:9">{<block_content pos:start="167:13" pos:end="167:21">

            <goto pos:start="167:13" pos:end="167:21">goto <name pos:start="167:18" pos:end="167:20">bad</name>;</goto>

        </block_content>}</block></if></if_stmt>



	<comment type="block" pos:start="173:9" pos:end="177:11">/*

	 * Locate pcb for datagram.

	 */</comment>

	<expr_stmt pos:start="179:9" pos:end="179:32"><expr pos:start="179:9" pos:end="179:31"><name pos:start="179:9" pos:end="179:10">so</name> <operator pos:start="179:12" pos:end="179:12">=</operator> <name pos:start="179:14" pos:end="179:31"><name pos:start="179:14" pos:end="179:18">slirp</name><operator pos:start="179:19" pos:end="179:20">-&gt;</operator><name pos:start="179:21" pos:end="179:31">udp_last_so</name></name></expr>;</expr_stmt>

	<if_stmt pos:start="181:9" pos:end="215:9"><if pos:start="181:9" pos:end="215:9">if <condition pos:start="181:12" pos:end="183:53">(<expr pos:start="181:13" pos:end="183:52"><name pos:start="181:13" pos:end="181:24"><name pos:start="181:13" pos:end="181:14">so</name><operator pos:start="181:15" pos:end="181:16">-&gt;</operator><name pos:start="181:17" pos:end="181:24">so_lport</name></name> <operator pos:start="181:26" pos:end="181:27">!=</operator> <name pos:start="181:29" pos:end="181:40"><name pos:start="181:29" pos:end="181:30">uh</name><operator pos:start="181:31" pos:end="181:32">-&gt;</operator><name pos:start="181:33" pos:end="181:40">uh_sport</name></name> <operator pos:start="181:42" pos:end="181:43">||</operator>

	    <name pos:start="183:13" pos:end="183:31"><name pos:start="183:13" pos:end="183:14">so</name><operator pos:start="183:15" pos:end="183:16">-&gt;</operator><name pos:start="183:17" pos:end="183:24">so_laddr</name><operator pos:start="183:25" pos:end="183:25">.</operator><name pos:start="183:26" pos:end="183:31">s_addr</name></name> <operator pos:start="183:33" pos:end="183:34">!=</operator> <name pos:start="183:36" pos:end="183:52"><name pos:start="183:36" pos:end="183:37">ip</name><operator pos:start="183:38" pos:end="183:39">-&gt;</operator><name pos:start="183:40" pos:end="183:45">ip_src</name><operator pos:start="183:46" pos:end="183:46">.</operator><name pos:start="183:47" pos:end="183:52">s_addr</name></name></expr>)</condition> <block pos:start="183:55" pos:end="215:9">{<block_content pos:start="185:17" pos:end="213:17">

		<decl_stmt pos:start="185:17" pos:end="185:35"><decl pos:start="185:17" pos:end="185:34"><type pos:start="185:17" pos:end="185:31"><name pos:start="185:17" pos:end="185:29"><name pos:start="185:17" pos:end="185:22">struct</name> <name pos:start="185:24" pos:end="185:29">socket</name></name> <modifier pos:start="185:31" pos:end="185:31">*</modifier></type><name pos:start="185:32" pos:end="185:34">tmp</name></decl>;</decl_stmt>



		<for pos:start="189:17" pos:end="203:17">for <control pos:start="189:21" pos:end="191:40">(<init pos:start="189:22" pos:end="189:46"><expr pos:start="189:22" pos:end="189:45"><name pos:start="189:22" pos:end="189:24">tmp</name> <operator pos:start="189:26" pos:end="189:26">=</operator> <name pos:start="189:28" pos:end="189:45"><name pos:start="189:28" pos:end="189:32">slirp</name><operator pos:start="189:33" pos:end="189:34">-&gt;</operator><name pos:start="189:35" pos:end="189:37">udb</name><operator pos:start="189:38" pos:end="189:38">.</operator><name pos:start="189:39" pos:end="189:45">so_next</name></name></expr>;</init> <condition pos:start="189:48" pos:end="189:66"><expr pos:start="189:48" pos:end="189:65"><name pos:start="189:48" pos:end="189:50">tmp</name> <operator pos:start="189:52" pos:end="189:53">!=</operator> <operator pos:start="189:55" pos:end="189:55">&amp;</operator><name pos:start="189:56" pos:end="189:65"><name pos:start="189:56" pos:end="189:60">slirp</name><operator pos:start="189:61" pos:end="189:62">-&gt;</operator><name pos:start="189:63" pos:end="189:65">udb</name></name></expr>;</condition>

		     <incr pos:start="191:22" pos:end="191:39"><expr pos:start="191:22" pos:end="191:39"><name pos:start="191:22" pos:end="191:24">tmp</name> <operator pos:start="191:26" pos:end="191:26">=</operator> <name pos:start="191:28" pos:end="191:39"><name pos:start="191:28" pos:end="191:30">tmp</name><operator pos:start="191:31" pos:end="191:32">-&gt;</operator><name pos:start="191:33" pos:end="191:39">so_next</name></name></expr></incr>)</control> <block pos:start="191:42" pos:end="203:17">{<block_content pos:start="193:25" pos:end="201:25">

			<if_stmt pos:start="193:25" pos:end="201:25"><if pos:start="193:25" pos:end="201:25">if <condition pos:start="193:28" pos:end="195:70">(<expr pos:start="193:29" pos:end="195:69"><name pos:start="193:29" pos:end="193:41"><name pos:start="193:29" pos:end="193:31">tmp</name><operator pos:start="193:32" pos:end="193:33">-&gt;</operator><name pos:start="193:34" pos:end="193:41">so_lport</name></name> <operator pos:start="193:43" pos:end="193:44">==</operator> <name pos:start="193:46" pos:end="193:57"><name pos:start="193:46" pos:end="193:47">uh</name><operator pos:start="193:48" pos:end="193:49">-&gt;</operator><name pos:start="193:50" pos:end="193:57">uh_sport</name></name> <operator pos:start="193:59" pos:end="193:60">&amp;&amp;</operator>

			    <name pos:start="195:29" pos:end="195:48"><name pos:start="195:29" pos:end="195:31">tmp</name><operator pos:start="195:32" pos:end="195:33">-&gt;</operator><name pos:start="195:34" pos:end="195:41">so_laddr</name><operator pos:start="195:42" pos:end="195:42">.</operator><name pos:start="195:43" pos:end="195:48">s_addr</name></name> <operator pos:start="195:50" pos:end="195:51">==</operator> <name pos:start="195:53" pos:end="195:69"><name pos:start="195:53" pos:end="195:54">ip</name><operator pos:start="195:55" pos:end="195:56">-&gt;</operator><name pos:start="195:57" pos:end="195:62">ip_src</name><operator pos:start="195:63" pos:end="195:63">.</operator><name pos:start="195:64" pos:end="195:69">s_addr</name></name></expr>)</condition> <block pos:start="195:72" pos:end="201:25">{<block_content pos:start="197:33" pos:end="199:38">

				<expr_stmt pos:start="197:33" pos:end="197:41"><expr pos:start="197:33" pos:end="197:40"><name pos:start="197:33" pos:end="197:34">so</name> <operator pos:start="197:36" pos:end="197:36">=</operator> <name pos:start="197:38" pos:end="197:40">tmp</name></expr>;</expr_stmt>

				<break pos:start="199:33" pos:end="199:38">break;</break>

			</block_content>}</block></if></if_stmt>

		</block_content>}</block></for>

		<if_stmt pos:start="205:17" pos:end="213:17"><if pos:start="205:17" pos:end="209:17">if <condition pos:start="205:20" pos:end="205:39">(<expr pos:start="205:21" pos:end="205:38"><name pos:start="205:21" pos:end="205:23">tmp</name> <operator pos:start="205:25" pos:end="205:26">==</operator> <operator pos:start="205:28" pos:end="205:28">&amp;</operator><name pos:start="205:29" pos:end="205:38"><name pos:start="205:29" pos:end="205:33">slirp</name><operator pos:start="205:34" pos:end="205:35">-&gt;</operator><name pos:start="205:36" pos:end="205:38">udb</name></name></expr>)</condition> <block pos:start="205:41" pos:end="209:17">{<block_content pos:start="207:19" pos:end="207:28">

		  <expr_stmt pos:start="207:19" pos:end="207:28"><expr pos:start="207:19" pos:end="207:27"><name pos:start="207:19" pos:end="207:20">so</name> <operator pos:start="207:22" pos:end="207:22">=</operator> <name pos:start="207:24" pos:end="207:27">NULL</name></expr>;</expr_stmt>

		</block_content>}</block></if> <else pos:start="209:19" pos:end="213:17">else <block pos:start="209:24" pos:end="213:17">{<block_content pos:start="211:19" pos:end="211:42">

		  <expr_stmt pos:start="211:19" pos:end="211:42"><expr pos:start="211:19" pos:end="211:41"><name pos:start="211:19" pos:end="211:36"><name pos:start="211:19" pos:end="211:23">slirp</name><operator pos:start="211:24" pos:end="211:25">-&gt;</operator><name pos:start="211:26" pos:end="211:36">udp_last_so</name></name> <operator pos:start="211:38" pos:end="211:38">=</operator> <name pos:start="211:40" pos:end="211:41">so</name></expr>;</expr_stmt>

		</block_content>}</block></else></if_stmt>

	</block_content>}</block></if></if_stmt>



	<if_stmt pos:start="219:9" pos:end="277:9"><if pos:start="219:9" pos:end="277:9">if <condition pos:start="219:12" pos:end="219:23">(<expr pos:start="219:13" pos:end="219:22"><name pos:start="219:13" pos:end="219:14">so</name> <operator pos:start="219:16" pos:end="219:17">==</operator> <name pos:start="219:19" pos:end="219:22">NULL</name></expr>)</condition> <block pos:start="219:25" pos:end="277:9">{<block_content pos:start="229:11" pos:end="265:38">

	  <comment type="block" pos:start="221:11" pos:end="227:13">/*

	   * If there's no socket for this packet,

	   * create one

	   */</comment>

	  <expr_stmt pos:start="229:11" pos:end="229:31"><expr pos:start="229:11" pos:end="229:30"><name pos:start="229:11" pos:end="229:12">so</name> <operator pos:start="229:14" pos:end="229:14">=</operator> <call pos:start="229:16" pos:end="229:30"><name pos:start="229:16" pos:end="229:23">socreate</name><argument_list pos:start="229:24" pos:end="229:30">(<argument pos:start="229:25" pos:end="229:29"><expr pos:start="229:25" pos:end="229:29"><name pos:start="229:25" pos:end="229:29">slirp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  <if_stmt pos:start="231:11" pos:end="235:11"><if pos:start="231:11" pos:end="235:11">if <condition pos:start="231:14" pos:end="231:18">(<expr pos:start="231:15" pos:end="231:17"><operator pos:start="231:15" pos:end="231:15">!</operator><name pos:start="231:16" pos:end="231:17">so</name></expr>)</condition> <block pos:start="231:20" pos:end="235:11">{<block_content pos:start="233:15" pos:end="233:23">

	      <goto pos:start="233:15" pos:end="233:23">goto <name pos:start="233:20" pos:end="233:22">bad</name>;</goto>

	  </block_content>}</block></if></if_stmt>

	  <if_stmt pos:start="237:11" pos:end="247:11"><if pos:start="237:11" pos:end="247:11">if<condition pos:start="237:13" pos:end="237:34">(<expr pos:start="237:14" pos:end="237:33"><call pos:start="237:14" pos:end="237:27"><name pos:start="237:14" pos:end="237:23">udp_attach</name><argument_list pos:start="237:24" pos:end="237:27">(<argument pos:start="237:25" pos:end="237:26"><expr pos:start="237:25" pos:end="237:26"><name pos:start="237:25" pos:end="237:26">so</name></expr></argument>)</argument_list></call> <operator pos:start="237:29" pos:end="237:30">==</operator> <operator pos:start="237:32" pos:end="237:32">-</operator><literal type="number" pos:start="237:33" pos:end="237:33">1</literal></expr>)</condition> <block pos:start="237:36" pos:end="247:11">{<block_content pos:start="239:13" pos:end="245:21">

	    <expr_stmt pos:start="239:13" pos:end="241:48"><expr pos:start="239:13" pos:end="241:47"><call pos:start="239:13" pos:end="241:47"><name pos:start="239:13" pos:end="239:22">DEBUG_MISC</name><argument_list pos:start="239:23" pos:end="241:47">(<argument pos:start="239:24" pos:end="241:46"><expr pos:start="239:24" pos:end="241:46"><operator pos:start="239:24" pos:end="239:24">(</operator><name pos:start="239:25" pos:end="239:27">dfd</name><operator pos:start="239:28" pos:end="239:28">,</operator><literal type="string" pos:start="239:29" pos:end="239:57">" udp_attach errno = %d-%s\n"</literal><operator pos:start="239:58" pos:end="239:58">,</operator>

			<name pos:start="241:25" pos:end="241:29">errno</name><operator pos:start="241:30" pos:end="241:30">,</operator><call pos:start="241:31" pos:end="241:45"><name pos:start="241:31" pos:end="241:38">strerror</name><argument_list pos:start="241:39" pos:end="241:45">(<argument pos:start="241:40" pos:end="241:44"><expr pos:start="241:40" pos:end="241:44"><name pos:start="241:40" pos:end="241:44">errno</name></expr></argument>)</argument_list></call><operator pos:start="241:46" pos:end="241:46">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt pos:start="243:13" pos:end="243:23"><expr pos:start="243:13" pos:end="243:22"><call pos:start="243:13" pos:end="243:22"><name pos:start="243:13" pos:end="243:18">sofree</name><argument_list pos:start="243:19" pos:end="243:22">(<argument pos:start="243:20" pos:end="243:21"><expr pos:start="243:20" pos:end="243:21"><name pos:start="243:20" pos:end="243:21">so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <goto pos:start="245:13" pos:end="245:21">goto <name pos:start="245:18" pos:end="245:20">bad</name>;</goto>

	  </block_content>}</block></if></if_stmt>



	  <comment type="block" pos:start="251:11" pos:end="255:13">/*

	   * Setup fields

	   */</comment>

	  <expr_stmt pos:start="257:11" pos:end="257:36"><expr pos:start="257:11" pos:end="257:35"><name pos:start="257:11" pos:end="257:22"><name pos:start="257:11" pos:end="257:12">so</name><operator pos:start="257:13" pos:end="257:14">-&gt;</operator><name pos:start="257:15" pos:end="257:22">so_laddr</name></name> <operator pos:start="257:24" pos:end="257:24">=</operator> <name pos:start="257:26" pos:end="257:35"><name pos:start="257:26" pos:end="257:27">ip</name><operator pos:start="257:28" pos:end="257:29">-&gt;</operator><name pos:start="257:30" pos:end="257:35">ip_src</name></name></expr>;</expr_stmt>

	  <expr_stmt pos:start="259:11" pos:end="259:38"><expr pos:start="259:11" pos:end="259:37"><name pos:start="259:11" pos:end="259:22"><name pos:start="259:11" pos:end="259:12">so</name><operator pos:start="259:13" pos:end="259:14">-&gt;</operator><name pos:start="259:15" pos:end="259:22">so_lport</name></name> <operator pos:start="259:24" pos:end="259:24">=</operator> <name pos:start="259:26" pos:end="259:37"><name pos:start="259:26" pos:end="259:27">uh</name><operator pos:start="259:28" pos:end="259:29">-&gt;</operator><name pos:start="259:30" pos:end="259:37">uh_sport</name></name></expr>;</expr_stmt>



	  <if_stmt pos:start="263:11" pos:end="265:38"><if pos:start="263:11" pos:end="265:38">if <condition pos:start="263:14" pos:end="263:48">(<expr pos:start="263:15" pos:end="263:47"><operator pos:start="263:15" pos:end="263:15">(</operator><name pos:start="263:16" pos:end="263:27"><name pos:start="263:16" pos:end="263:17">so</name><operator pos:start="263:18" pos:end="263:19">-&gt;</operator><name pos:start="263:20" pos:end="263:27">so_iptos</name></name> <operator pos:start="263:29" pos:end="263:29">=</operator> <call pos:start="263:31" pos:end="263:41"><name pos:start="263:31" pos:end="263:37">udp_tos</name><argument_list pos:start="263:38" pos:end="263:41">(<argument pos:start="263:39" pos:end="263:40"><expr pos:start="263:39" pos:end="263:40"><name pos:start="263:39" pos:end="263:40">so</name></expr></argument>)</argument_list></call><operator pos:start="263:42" pos:end="263:42">)</operator> <operator pos:start="263:44" pos:end="263:45">==</operator> <literal type="number" pos:start="263:47" pos:end="263:47">0</literal></expr>)</condition><block type="pseudo" pos:start="265:13" pos:end="265:38"><block_content pos:start="265:13" pos:end="265:38">

	    <expr_stmt pos:start="265:13" pos:end="265:38"><expr pos:start="265:13" pos:end="265:37"><name pos:start="265:13" pos:end="265:24"><name pos:start="265:13" pos:end="265:14">so</name><operator pos:start="265:15" pos:end="265:16">-&gt;</operator><name pos:start="265:17" pos:end="265:24">so_iptos</name></name> <operator pos:start="265:26" pos:end="265:26">=</operator> <name pos:start="265:28" pos:end="265:37"><name pos:start="265:28" pos:end="265:29">ip</name><operator pos:start="265:30" pos:end="265:31">-&gt;</operator><name pos:start="265:32" pos:end="265:37">ip_tos</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



	  <comment type="block" pos:start="269:11" pos:end="275:13">/*

	   * XXXXX Here, check if it's in udpexec_list,

	   * and if it is, do the fork_exec() etc.

	   */</comment>

	</block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="281:9" pos:end="281:34"><expr pos:start="281:9" pos:end="281:33"><name pos:start="281:9" pos:end="281:20"><name pos:start="281:9" pos:end="281:10">so</name><operator pos:start="281:11" pos:end="281:12">-&gt;</operator><name pos:start="281:13" pos:end="281:20">so_faddr</name></name> <operator pos:start="281:22" pos:end="281:22">=</operator> <name pos:start="281:24" pos:end="281:33"><name pos:start="281:24" pos:end="281:25">ip</name><operator pos:start="281:26" pos:end="281:27">-&gt;</operator><name pos:start="281:28" pos:end="281:33">ip_dst</name></name></expr>;</expr_stmt> <comment type="block" pos:start="281:36" pos:end="281:44">/* XXX */</comment>

        <expr_stmt pos:start="283:9" pos:end="283:36"><expr pos:start="283:9" pos:end="283:35"><name pos:start="283:9" pos:end="283:20"><name pos:start="283:9" pos:end="283:10">so</name><operator pos:start="283:11" pos:end="283:12">-&gt;</operator><name pos:start="283:13" pos:end="283:20">so_fport</name></name> <operator pos:start="283:22" pos:end="283:22">=</operator> <name pos:start="283:24" pos:end="283:35"><name pos:start="283:24" pos:end="283:25">uh</name><operator pos:start="283:26" pos:end="283:27">-&gt;</operator><name pos:start="283:28" pos:end="283:35">uh_dport</name></name></expr>;</expr_stmt> <comment type="block" pos:start="283:38" pos:end="283:46">/* XXX */</comment>



	<expr_stmt pos:start="287:9" pos:end="287:40"><expr pos:start="287:9" pos:end="287:39"><name pos:start="287:9" pos:end="287:14">iphlen</name> <operator pos:start="287:16" pos:end="287:17">+=</operator> <sizeof pos:start="287:19" pos:end="287:39">sizeof<argument_list pos:start="287:25" pos:end="287:39">(<argument pos:start="287:26" pos:end="287:38"><expr pos:start="287:26" pos:end="287:38">struct <name pos:start="287:33" pos:end="287:38">udphdr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<expr_stmt pos:start="289:9" pos:end="289:27"><expr pos:start="289:9" pos:end="289:26"><name pos:start="289:9" pos:end="289:16"><name pos:start="289:9" pos:end="289:9">m</name><operator pos:start="289:10" pos:end="289:11">-&gt;</operator><name pos:start="289:12" pos:end="289:16">m_len</name></name> <operator pos:start="289:18" pos:end="289:19">-=</operator> <name pos:start="289:21" pos:end="289:26">iphlen</name></expr>;</expr_stmt>

	<expr_stmt pos:start="291:9" pos:end="291:28"><expr pos:start="291:9" pos:end="291:27"><name pos:start="291:9" pos:end="291:17"><name pos:start="291:9" pos:end="291:9">m</name><operator pos:start="291:10" pos:end="291:11">-&gt;</operator><name pos:start="291:12" pos:end="291:17">m_data</name></name> <operator pos:start="291:19" pos:end="291:20">+=</operator> <name pos:start="291:22" pos:end="291:27">iphlen</name></expr>;</expr_stmt>



	<comment type="block" pos:start="295:9" pos:end="299:11">/*

	 * Now we sendto() the packet.

	 */</comment>

	<if_stmt pos:start="301:9" pos:end="313:9"><if pos:start="301:9" pos:end="313:9">if<condition pos:start="301:11" pos:end="301:32">(<expr pos:start="301:12" pos:end="301:31"><call pos:start="301:12" pos:end="301:25"><name pos:start="301:12" pos:end="301:19">sosendto</name><argument_list pos:start="301:20" pos:end="301:25">(<argument pos:start="301:21" pos:end="301:22"><expr pos:start="301:21" pos:end="301:22"><name pos:start="301:21" pos:end="301:22">so</name></expr></argument>,<argument pos:start="301:24" pos:end="301:24"><expr pos:start="301:24" pos:end="301:24"><name pos:start="301:24" pos:end="301:24">m</name></expr></argument>)</argument_list></call> <operator pos:start="301:27" pos:end="301:28">==</operator> <operator pos:start="301:30" pos:end="301:30">-</operator><literal type="number" pos:start="301:31" pos:end="301:31">1</literal></expr>)</condition> <block pos:start="301:34" pos:end="313:9">{<block_content pos:start="303:11" pos:end="311:74">

	  <expr_stmt pos:start="303:11" pos:end="303:29"><expr pos:start="303:11" pos:end="303:28"><name pos:start="303:11" pos:end="303:18"><name pos:start="303:11" pos:end="303:11">m</name><operator pos:start="303:12" pos:end="303:13">-&gt;</operator><name pos:start="303:14" pos:end="303:18">m_len</name></name> <operator pos:start="303:20" pos:end="303:21">+=</operator> <name pos:start="303:23" pos:end="303:28">iphlen</name></expr>;</expr_stmt>

	  <expr_stmt pos:start="305:11" pos:end="305:30"><expr pos:start="305:11" pos:end="305:29"><name pos:start="305:11" pos:end="305:19"><name pos:start="305:11" pos:end="305:11">m</name><operator pos:start="305:12" pos:end="305:13">-&gt;</operator><name pos:start="305:14" pos:end="305:19">m_data</name></name> <operator pos:start="305:21" pos:end="305:22">-=</operator> <name pos:start="305:24" pos:end="305:29">iphlen</name></expr>;</expr_stmt>

	  <expr_stmt pos:start="307:11" pos:end="307:22"><expr pos:start="307:11" pos:end="307:21"><operator pos:start="307:11" pos:end="307:11">*</operator><name pos:start="307:12" pos:end="307:13">ip</name><operator pos:start="307:14" pos:end="307:14">=</operator><name pos:start="307:15" pos:end="307:21">save_ip</name></expr>;</expr_stmt>

	  <expr_stmt pos:start="309:11" pos:end="309:75"><expr pos:start="309:11" pos:end="309:74"><call pos:start="309:11" pos:end="309:74"><name pos:start="309:11" pos:end="309:20">DEBUG_MISC</name><argument_list pos:start="309:21" pos:end="309:74">(<argument pos:start="309:22" pos:end="309:73"><expr pos:start="309:22" pos:end="309:73"><operator pos:start="309:22" pos:end="309:22">(</operator><name pos:start="309:23" pos:end="309:25">dfd</name><operator pos:start="309:26" pos:end="309:26">,</operator><literal type="string" pos:start="309:27" pos:end="309:50">"udp tx errno = %d-%s\n"</literal><operator pos:start="309:51" pos:end="309:51">,</operator><name pos:start="309:52" pos:end="309:56">errno</name><operator pos:start="309:57" pos:end="309:57">,</operator><call pos:start="309:58" pos:end="309:72"><name pos:start="309:58" pos:end="309:65">strerror</name><argument_list pos:start="309:66" pos:end="309:72">(<argument pos:start="309:67" pos:end="309:71"><expr pos:start="309:67" pos:end="309:71"><name pos:start="309:67" pos:end="309:71">errno</name></expr></argument>)</argument_list></call><operator pos:start="309:73" pos:end="309:73">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  <expr_stmt pos:start="311:11" pos:end="311:74"><expr pos:start="311:11" pos:end="311:73"><call pos:start="311:11" pos:end="311:73"><name pos:start="311:11" pos:end="311:20">icmp_error</name><argument_list pos:start="311:21" pos:end="311:73">(<argument pos:start="311:22" pos:end="311:22"><expr pos:start="311:22" pos:end="311:22"><name pos:start="311:22" pos:end="311:22">m</name></expr></argument>, <argument pos:start="311:25" pos:end="311:36"><expr pos:start="311:25" pos:end="311:36"><name pos:start="311:25" pos:end="311:36">ICMP_UNREACH</name></expr></argument>,<argument pos:start="311:38" pos:end="311:53"><expr pos:start="311:38" pos:end="311:53"><name pos:start="311:38" pos:end="311:53">ICMP_UNREACH_NET</name></expr></argument>, <argument pos:start="311:56" pos:end="311:56"><expr pos:start="311:56" pos:end="311:56"><literal type="number" pos:start="311:56" pos:end="311:56">0</literal></expr></argument>,<argument pos:start="311:58" pos:end="311:72"><expr pos:start="311:58" pos:end="311:72"><call pos:start="311:58" pos:end="311:72"><name pos:start="311:58" pos:end="311:65">strerror</name><argument_list pos:start="311:66" pos:end="311:72">(<argument pos:start="311:67" pos:end="311:71"><expr pos:start="311:67" pos:end="311:71"><name pos:start="311:67" pos:end="311:71">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>



	<expr_stmt pos:start="317:9" pos:end="317:25"><expr pos:start="317:9" pos:end="317:24"><call pos:start="317:9" pos:end="317:24"><name pos:start="317:9" pos:end="317:14">m_free</name><argument_list pos:start="317:15" pos:end="317:24">(<argument pos:start="317:16" pos:end="317:23"><expr pos:start="317:16" pos:end="317:23"><name pos:start="317:16" pos:end="317:23"><name pos:start="317:16" pos:end="317:17">so</name><operator pos:start="317:18" pos:end="317:19">-&gt;</operator><name pos:start="317:20" pos:end="317:23">so_m</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block" pos:start="317:29" pos:end="317:70">/* used for ICMP if error on sorecvfrom */</comment>



	<comment type="block" pos:start="321:9" pos:end="321:42">/* restore the orig mbuf packet */</comment>

	<expr_stmt pos:start="323:9" pos:end="323:27"><expr pos:start="323:9" pos:end="323:26"><name pos:start="323:9" pos:end="323:16"><name pos:start="323:9" pos:end="323:9">m</name><operator pos:start="323:10" pos:end="323:11">-&gt;</operator><name pos:start="323:12" pos:end="323:16">m_len</name></name> <operator pos:start="323:18" pos:end="323:19">+=</operator> <name pos:start="323:21" pos:end="323:26">iphlen</name></expr>;</expr_stmt>

	<expr_stmt pos:start="325:9" pos:end="325:28"><expr pos:start="325:9" pos:end="325:27"><name pos:start="325:9" pos:end="325:17"><name pos:start="325:9" pos:end="325:9">m</name><operator pos:start="325:10" pos:end="325:11">-&gt;</operator><name pos:start="325:12" pos:end="325:17">m_data</name></name> <operator pos:start="325:19" pos:end="325:20">-=</operator> <name pos:start="325:22" pos:end="325:27">iphlen</name></expr>;</expr_stmt>

	<expr_stmt pos:start="327:9" pos:end="327:20"><expr pos:start="327:9" pos:end="327:19"><operator pos:start="327:9" pos:end="327:9">*</operator><name pos:start="327:10" pos:end="327:11">ip</name><operator pos:start="327:12" pos:end="327:12">=</operator><name pos:start="327:13" pos:end="327:19">save_ip</name></expr>;</expr_stmt>

	<expr_stmt pos:start="329:9" pos:end="329:19"><expr pos:start="329:9" pos:end="329:18"><name pos:start="329:9" pos:end="329:16"><name pos:start="329:9" pos:end="329:10">so</name><operator pos:start="329:11" pos:end="329:12">-&gt;</operator><name pos:start="329:13" pos:end="329:16">so_m</name></name><operator pos:start="329:17" pos:end="329:17">=</operator><name pos:start="329:18" pos:end="329:18">m</name></expr>;</expr_stmt>         <comment type="block" pos:start="329:29" pos:end="329:45">/* ICMP backup */</comment>



	<return pos:start="333:9" pos:end="333:15">return;</return>

<label pos:start="335:1" pos:end="335:4"><name pos:start="335:1" pos:end="335:3">bad</name>:</label>

	<expr_stmt pos:start="337:9" pos:end="337:18"><expr pos:start="337:9" pos:end="337:17"><call pos:start="337:9" pos:end="337:17"><name pos:start="337:9" pos:end="337:14">m_free</name><argument_list pos:start="337:15" pos:end="337:17">(<argument pos:start="337:16" pos:end="337:16"><expr pos:start="337:16" pos:end="337:16"><name pos:start="337:16" pos:end="337:16">m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>
</unit>
