<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16782.c" pos:tabs="8"><function pos:start="1:1" pos:end="81:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:38">xen_platform_ioport_writeb</name><parameter_list pos:start="1:39" pos:end="3:71">(<parameter pos:start="1:40" pos:end="1:51"><decl pos:start="1:40" pos:end="1:51"><type pos:start="1:40" pos:end="1:51"><name pos:start="1:40" pos:end="1:43">void</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:51">opaque</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:64"><decl pos:start="1:54" pos:end="1:64"><type pos:start="1:54" pos:end="1:64"><name pos:start="1:54" pos:end="1:59">hwaddr</name></type> <name pos:start="1:61" pos:end="1:64">addr</name></decl></parameter>,

                                       <parameter pos:start="3:40" pos:end="3:51"><decl pos:start="3:40" pos:end="3:51"><type pos:start="3:40" pos:end="3:51"><name pos:start="3:40" pos:end="3:47">uint64_t</name></type> <name pos:start="3:49" pos:end="3:51">val</name></decl></parameter>, <parameter pos:start="3:54" pos:end="3:70"><decl pos:start="3:54" pos:end="3:70"><type pos:start="3:54" pos:end="3:70"><name pos:start="3:54" pos:end="3:61">unsigned</name> <name pos:start="3:63" pos:end="3:65">int</name></type> <name pos:start="3:67" pos:end="3:70">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="81:1">{<block_content pos:start="7:5" pos:end="79:5">

    <decl_stmt pos:start="7:5" pos:end="7:36"><decl pos:start="7:5" pos:end="7:35"><type pos:start="7:5" pos:end="7:25"><name pos:start="7:5" pos:end="7:23">PCIXenPlatformState</name> <modifier pos:start="7:25" pos:end="7:25">*</modifier></type><name pos:start="7:26" pos:end="7:26">s</name> <init pos:start="7:28" pos:end="7:35">= <expr pos:start="7:30" pos:end="7:35"><name pos:start="7:30" pos:end="7:35">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:39"><decl pos:start="9:5" pos:end="9:38"><type pos:start="9:5" pos:end="9:15"><name pos:start="9:5" pos:end="9:13">PCIDevice</name> <modifier pos:start="9:15" pos:end="9:15">*</modifier></type><name pos:start="9:16" pos:end="9:22">pci_dev</name> <init pos:start="9:24" pos:end="9:38">= <expr pos:start="9:26" pos:end="9:38"><call pos:start="9:26" pos:end="9:38"><name pos:start="9:26" pos:end="9:35">PCI_DEVICE</name><argument_list pos:start="9:36" pos:end="9:38">(<argument pos:start="9:37" pos:end="9:37"><expr pos:start="9:37" pos:end="9:37"><name pos:start="9:37" pos:end="9:37">s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <switch pos:start="13:5" pos:end="79:5">switch <condition pos:start="13:12" pos:end="13:17">(<expr pos:start="13:13" pos:end="13:16"><name pos:start="13:13" pos:end="13:16">addr</name></expr>)</condition> <block pos:start="13:19" pos:end="79:5">{<block_content pos:start="15:5" pos:end="77:14">

    <case pos:start="15:5" pos:end="15:11">case <expr pos:start="15:10" pos:end="15:10"><literal type="number" pos:start="15:10" pos:end="15:10">0</literal></expr>:</case> <comment type="block" pos:start="15:13" pos:end="15:32">/* Platform flags */</comment>

        <expr_stmt pos:start="17:9" pos:end="17:63"><expr pos:start="17:9" pos:end="17:62"><call pos:start="17:9" pos:end="17:62"><name pos:start="17:9" pos:end="17:36">platform_fixed_ioport_writeb</name><argument_list pos:start="17:37" pos:end="17:62">(<argument pos:start="17:38" pos:end="17:43"><expr pos:start="17:38" pos:end="17:43"><name pos:start="17:38" pos:end="17:43">opaque</name></expr></argument>, <argument pos:start="17:46" pos:end="17:46"><expr pos:start="17:46" pos:end="17:46"><literal type="number" pos:start="17:46" pos:end="17:46">0</literal></expr></argument>, <argument pos:start="17:49" pos:end="17:61"><expr pos:start="17:49" pos:end="17:61"><operator pos:start="17:49" pos:end="17:49">(</operator><name pos:start="17:50" pos:end="17:57">uint32_t</name><operator pos:start="17:58" pos:end="17:58">)</operator><name pos:start="17:59" pos:end="17:61">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="19:9" pos:end="19:14">break;</break>

    <case pos:start="21:5" pos:end="21:11">case <expr pos:start="21:10" pos:end="21:10"><literal type="number" pos:start="21:10" pos:end="21:10">4</literal></expr>:</case>

        <if_stmt pos:start="23:9" pos:end="45:9"><if pos:start="23:9" pos:end="45:9">if <condition pos:start="23:12" pos:end="23:21">(<expr pos:start="23:13" pos:end="23:20"><name pos:start="23:13" pos:end="23:15">val</name> <operator pos:start="23:17" pos:end="23:18">==</operator> <literal type="number" pos:start="23:20" pos:end="23:20">1</literal></expr>)</condition> <block pos:start="23:23" pos:end="45:9">{<block_content pos:start="41:13" pos:end="43:42">

            <comment type="block" pos:start="25:13" pos:end="39:15">/*

             * SUSE unplug for Xenlinux

             * xen-kmp used this since xen-3.0.4, instead the official protocol

             * from xen-3.3+ It did an unconditional "outl(1, (ioaddr + 4));"

             * Pre VMDP 1.7 used 4 and 8 depending on how VMDP was configured.

             * If VMDP was to control both disk and LAN it would use 4.

             * If it controlled just disk or just LAN, it would use 8 below.

             */</comment>

            <expr_stmt pos:start="41:13" pos:end="41:43"><expr pos:start="41:13" pos:end="41:42"><call pos:start="41:13" pos:end="41:42"><name pos:start="41:13" pos:end="41:28">pci_unplug_disks</name><argument_list pos:start="41:29" pos:end="41:42">(<argument pos:start="41:30" pos:end="41:41"><expr pos:start="41:30" pos:end="41:41"><name pos:start="41:30" pos:end="41:41"><name pos:start="41:30" pos:end="41:36">pci_dev</name><operator pos:start="41:37" pos:end="41:38">-&gt;</operator><name pos:start="41:39" pos:end="41:41">bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:42"><expr pos:start="43:13" pos:end="43:41"><call pos:start="43:13" pos:end="43:41"><name pos:start="43:13" pos:end="43:27">pci_unplug_nics</name><argument_list pos:start="43:28" pos:end="43:41">(<argument pos:start="43:29" pos:end="43:40"><expr pos:start="43:29" pos:end="43:40"><name pos:start="43:29" pos:end="43:40"><name pos:start="43:29" pos:end="43:35">pci_dev</name><operator pos:start="43:36" pos:end="43:37">-&gt;</operator><name pos:start="43:38" pos:end="43:40">bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="47:9" pos:end="47:14">break;</break>

    <case pos:start="49:5" pos:end="49:11">case <expr pos:start="49:10" pos:end="49:10"><literal type="number" pos:start="49:10" pos:end="49:10">8</literal></expr>:</case>

        <switch pos:start="51:9" pos:end="71:9">switch <condition pos:start="51:16" pos:end="51:20">(<expr pos:start="51:17" pos:end="51:19"><name pos:start="51:17" pos:end="51:19">val</name></expr>)</condition> <block pos:start="51:22" pos:end="71:9">{<block_content pos:start="53:9" pos:end="69:18">

        <case pos:start="53:9" pos:end="53:15">case <expr pos:start="53:14" pos:end="53:14"><literal type="number" pos:start="53:14" pos:end="53:14">1</literal></expr>:</case>

            <expr_stmt pos:start="55:13" pos:end="55:43"><expr pos:start="55:13" pos:end="55:42"><call pos:start="55:13" pos:end="55:42"><name pos:start="55:13" pos:end="55:28">pci_unplug_disks</name><argument_list pos:start="55:29" pos:end="55:42">(<argument pos:start="55:30" pos:end="55:41"><expr pos:start="55:30" pos:end="55:41"><name pos:start="55:30" pos:end="55:41"><name pos:start="55:30" pos:end="55:36">pci_dev</name><operator pos:start="55:37" pos:end="55:38">-&gt;</operator><name pos:start="55:39" pos:end="55:41">bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="57:13" pos:end="57:18">break;</break>

        <case pos:start="59:9" pos:end="59:15">case <expr pos:start="59:14" pos:end="59:14"><literal type="number" pos:start="59:14" pos:end="59:14">2</literal></expr>:</case>

            <expr_stmt pos:start="61:13" pos:end="61:42"><expr pos:start="61:13" pos:end="61:41"><call pos:start="61:13" pos:end="61:41"><name pos:start="61:13" pos:end="61:27">pci_unplug_nics</name><argument_list pos:start="61:28" pos:end="61:41">(<argument pos:start="61:29" pos:end="61:40"><expr pos:start="61:29" pos:end="61:40"><name pos:start="61:29" pos:end="61:40"><name pos:start="61:29" pos:end="61:35">pci_dev</name><operator pos:start="61:36" pos:end="61:37">-&gt;</operator><name pos:start="61:38" pos:end="61:40">bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="63:13" pos:end="63:18">break;</break>

        <default pos:start="65:9" pos:end="65:16">default:</default>

            <expr_stmt pos:start="67:13" pos:end="67:41"><expr pos:start="67:13" pos:end="67:40"><call pos:start="67:13" pos:end="67:40"><name pos:start="67:13" pos:end="67:22">log_writeb</name><argument_list pos:start="67:23" pos:end="67:40">(<argument pos:start="67:24" pos:end="67:24"><expr pos:start="67:24" pos:end="67:24"><name pos:start="67:24" pos:end="67:24">s</name></expr></argument>, <argument pos:start="67:27" pos:end="67:39"><expr pos:start="67:27" pos:end="67:39"><operator pos:start="67:27" pos:end="67:27">(</operator><name pos:start="67:28" pos:end="67:35">uint32_t</name><operator pos:start="67:36" pos:end="67:36">)</operator><name pos:start="67:37" pos:end="67:39">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="69:13" pos:end="69:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="73:9" pos:end="73:14">break;</break>

    <default pos:start="75:5" pos:end="75:12">default:</default>

        <break pos:start="77:9" pos:end="77:14">break;</break>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
