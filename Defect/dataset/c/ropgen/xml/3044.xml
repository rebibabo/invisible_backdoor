<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3044.c" pos:tabs="8"><function pos:start="1:1" pos:end="195:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:17">pc_cmos_init</name><parameter_list pos:start="1:18" pos:end="7:31">(<parameter pos:start="1:19" pos:end="1:37"><decl pos:start="1:19" pos:end="1:37"><type pos:start="1:19" pos:end="1:37"><name pos:start="1:19" pos:end="1:28">ram_addr_t</name></type> <name pos:start="1:30" pos:end="1:37">ram_size</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:67"><decl pos:start="1:40" pos:end="1:67"><type pos:start="1:40" pos:end="1:67"><name pos:start="1:40" pos:end="1:49">ram_addr_t</name></type> <name pos:start="1:51" pos:end="1:67">above_4g_mem_size</name></decl></parameter>,

                  <parameter pos:start="3:19" pos:end="3:41"><decl pos:start="3:19" pos:end="3:41"><type pos:start="3:19" pos:end="3:41"><specifier pos:start="3:19" pos:end="3:23">const</specifier> <name pos:start="3:25" pos:end="3:28">char</name> <modifier pos:start="3:30" pos:end="3:30">*</modifier></type><name pos:start="3:31" pos:end="3:41">boot_device</name></decl></parameter>, <parameter pos:start="3:44" pos:end="3:64"><decl pos:start="3:44" pos:end="3:64"><type pos:start="3:44" pos:end="3:64"><name pos:start="3:44" pos:end="3:55">MachineState</name> <modifier pos:start="3:57" pos:end="3:57">*</modifier></type><name pos:start="3:58" pos:end="3:64">machine</name></decl></parameter>,

                  <parameter pos:start="5:19" pos:end="5:35"><decl pos:start="5:19" pos:end="5:35"><type pos:start="5:19" pos:end="5:35"><name pos:start="5:19" pos:end="5:27">ISADevice</name> <modifier pos:start="5:29" pos:end="5:29">*</modifier></type><name pos:start="5:30" pos:end="5:35">floppy</name></decl></parameter>, <parameter pos:start="5:38" pos:end="5:54"><decl pos:start="5:38" pos:end="5:54"><type pos:start="5:38" pos:end="5:54"><name pos:start="5:38" pos:end="5:45">BusState</name> <modifier pos:start="5:47" pos:end="5:47">*</modifier></type><name pos:start="5:48" pos:end="5:54">idebus0</name></decl></parameter>, <parameter pos:start="5:57" pos:end="5:73"><decl pos:start="5:57" pos:end="5:73"><type pos:start="5:57" pos:end="5:73"><name pos:start="5:57" pos:end="5:64">BusState</name> <modifier pos:start="5:66" pos:end="5:66">*</modifier></type><name pos:start="5:67" pos:end="5:73">idebus1</name></decl></parameter>,

                  <parameter pos:start="7:19" pos:end="7:30"><decl pos:start="7:19" pos:end="7:30"><type pos:start="7:19" pos:end="7:30"><name pos:start="7:19" pos:end="7:27">ISADevice</name> <modifier pos:start="7:29" pos:end="7:29">*</modifier></type><name pos:start="7:30" pos:end="7:30">s</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="195:1">{<block_content pos:start="11:5" pos:end="193:49">

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">val</name></decl>, <decl pos:start="11:14" pos:end="11:15"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:14" pos:end="11:15">nb</name></decl>, <decl pos:start="11:18" pos:end="11:18"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:18" pos:end="11:18">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:65"><decl pos:start="13:5" pos:end="13:64"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:14">FDriveType</name></type> <name pos:start="13:16" pos:end="13:25"><name pos:start="13:16" pos:end="13:22">fd_type</name><index pos:start="13:23" pos:end="13:25">[<expr pos:start="13:24" pos:end="13:24"><literal type="number" pos:start="13:24" pos:end="13:24">2</literal></expr>]</index></name> <init pos:start="13:27" pos:end="13:64">= <expr pos:start="13:29" pos:end="13:64"><block pos:start="13:29" pos:end="13:64">{ <expr pos:start="13:31" pos:end="13:45"><name pos:start="13:31" pos:end="13:45">FDRIVE_DRV_NONE</name></expr>, <expr pos:start="13:48" pos:end="13:62"><name pos:start="13:48" pos:end="13:62">FDRIVE_DRV_NONE</name></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:37"><decl pos:start="15:5" pos:end="15:36"><type pos:start="15:5" pos:end="15:32"><specifier pos:start="15:5" pos:end="15:10">static</specifier> <name pos:start="15:12" pos:end="15:32">pc_cmos_init_late_arg</name></type> <name pos:start="15:34" pos:end="15:36">arg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:53"><decl pos:start="17:5" pos:end="17:52"><type pos:start="17:5" pos:end="17:20"><name pos:start="17:5" pos:end="17:18">PCMachineState</name> <modifier pos:start="17:20" pos:end="17:20">*</modifier></type><name pos:start="17:21" pos:end="17:30">pc_machine</name> <init pos:start="17:32" pos:end="17:52">= <expr pos:start="17:34" pos:end="17:52"><call pos:start="17:34" pos:end="17:52"><name pos:start="17:34" pos:end="17:43">PC_MACHINE</name><argument_list pos:start="17:44" pos:end="17:52">(<argument pos:start="17:45" pos:end="17:51"><expr pos:start="17:45" pos:end="17:51"><name pos:start="17:45" pos:end="17:51">machine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="21:5" pos:end="21:66">/* various important CMOS locations needed by PC/Bochs bios */</comment>



    <comment type="block" pos:start="25:5" pos:end="25:21">/* memory size */</comment>

    <comment type="block" pos:start="27:5" pos:end="27:33">/* base memory (first MiB) */</comment>

    <expr_stmt pos:start="29:5" pos:end="29:36"><expr pos:start="29:5" pos:end="29:35"><name pos:start="29:5" pos:end="29:7">val</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <call pos:start="29:11" pos:end="29:35"><name pos:start="29:11" pos:end="29:13">MIN</name><argument_list pos:start="29:14" pos:end="29:35">(<argument pos:start="29:15" pos:end="29:29"><expr pos:start="29:15" pos:end="29:29"><name pos:start="29:15" pos:end="29:22">ram_size</name> <operator pos:start="29:24" pos:end="29:24">/</operator> <literal type="number" pos:start="29:26" pos:end="29:29">1024</literal></expr></argument>, <argument pos:start="29:32" pos:end="29:34"><expr pos:start="29:32" pos:end="29:34"><literal type="number" pos:start="29:32" pos:end="29:34">640</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:33"><expr pos:start="31:5" pos:end="31:32"><call pos:start="31:5" pos:end="31:32"><name pos:start="31:5" pos:end="31:18">rtc_set_memory</name><argument_list pos:start="31:19" pos:end="31:32">(<argument pos:start="31:20" pos:end="31:20"><expr pos:start="31:20" pos:end="31:20"><name pos:start="31:20" pos:end="31:20">s</name></expr></argument>, <argument pos:start="31:23" pos:end="31:26"><expr pos:start="31:23" pos:end="31:26"><literal type="number" pos:start="31:23" pos:end="31:26">0x15</literal></expr></argument>, <argument pos:start="31:29" pos:end="31:31"><expr pos:start="31:29" pos:end="31:31"><name pos:start="31:29" pos:end="31:31">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:38"><expr pos:start="33:5" pos:end="33:37"><call pos:start="33:5" pos:end="33:37"><name pos:start="33:5" pos:end="33:18">rtc_set_memory</name><argument_list pos:start="33:19" pos:end="33:37">(<argument pos:start="33:20" pos:end="33:20"><expr pos:start="33:20" pos:end="33:20"><name pos:start="33:20" pos:end="33:20">s</name></expr></argument>, <argument pos:start="33:23" pos:end="33:26"><expr pos:start="33:23" pos:end="33:26"><literal type="number" pos:start="33:23" pos:end="33:26">0x16</literal></expr></argument>, <argument pos:start="33:29" pos:end="33:36"><expr pos:start="33:29" pos:end="33:36"><name pos:start="33:29" pos:end="33:31">val</name> <operator pos:start="33:33" pos:end="33:34">&gt;&gt;</operator> <literal type="number" pos:start="33:36" pos:end="33:36">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="35:5" pos:end="35:38">/* extended memory (next 64MiB) */</comment>

    <if_stmt pos:start="37:5" pos:end="45:5"><if pos:start="37:5" pos:end="41:5">if <condition pos:start="37:8" pos:end="37:31">(<expr pos:start="37:9" pos:end="37:30"><name pos:start="37:9" pos:end="37:16">ram_size</name> <operator pos:start="37:18" pos:end="37:18">&gt;</operator> <literal type="number" pos:start="37:20" pos:end="37:23">1024</literal> <operator pos:start="37:25" pos:end="37:25">*</operator> <literal type="number" pos:start="37:27" pos:end="37:30">1024</literal></expr>)</condition> <block pos:start="37:33" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:46">

        <expr_stmt pos:start="39:9" pos:end="39:46"><expr pos:start="39:9" pos:end="39:45"><name pos:start="39:9" pos:end="39:11">val</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <operator pos:start="39:15" pos:end="39:15">(</operator><name pos:start="39:16" pos:end="39:23">ram_size</name> <operator pos:start="39:25" pos:end="39:25">-</operator> <literal type="number" pos:start="39:27" pos:end="39:30">1024</literal> <operator pos:start="39:32" pos:end="39:32">*</operator> <literal type="number" pos:start="39:34" pos:end="39:37">1024</literal><operator pos:start="39:38" pos:end="39:38">)</operator> <operator pos:start="39:40" pos:end="39:40">/</operator> <literal type="number" pos:start="39:42" pos:end="39:45">1024</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="41:7" pos:end="45:5">else <block pos:start="41:12" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:16">

        <expr_stmt pos:start="43:9" pos:end="43:16"><expr pos:start="43:9" pos:end="43:15"><name pos:start="43:9" pos:end="43:11">val</name> <operator pos:start="43:13" pos:end="43:13">=</operator> <literal type="number" pos:start="43:15" pos:end="43:15">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="47:5" pos:end="49:20"><if pos:start="47:5" pos:end="49:20">if <condition pos:start="47:8" pos:end="47:20">(<expr pos:start="47:9" pos:end="47:19"><name pos:start="47:9" pos:end="47:11">val</name> <operator pos:start="47:13" pos:end="47:13">&gt;</operator> <literal type="number" pos:start="47:15" pos:end="47:19">65535</literal></expr>)</condition><block type="pseudo" pos:start="49:9" pos:end="49:20"><block_content pos:start="49:9" pos:end="49:20">

        <expr_stmt pos:start="49:9" pos:end="49:20"><expr pos:start="49:9" pos:end="49:19"><name pos:start="49:9" pos:end="49:11">val</name> <operator pos:start="49:13" pos:end="49:13">=</operator> <literal type="number" pos:start="49:15" pos:end="49:19">65535</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:33"><expr pos:start="51:5" pos:end="51:32"><call pos:start="51:5" pos:end="51:32"><name pos:start="51:5" pos:end="51:18">rtc_set_memory</name><argument_list pos:start="51:19" pos:end="51:32">(<argument pos:start="51:20" pos:end="51:20"><expr pos:start="51:20" pos:end="51:20"><name pos:start="51:20" pos:end="51:20">s</name></expr></argument>, <argument pos:start="51:23" pos:end="51:26"><expr pos:start="51:23" pos:end="51:26"><literal type="number" pos:start="51:23" pos:end="51:26">0x17</literal></expr></argument>, <argument pos:start="51:29" pos:end="51:31"><expr pos:start="51:29" pos:end="51:31"><name pos:start="51:29" pos:end="51:31">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:38"><expr pos:start="53:5" pos:end="53:37"><call pos:start="53:5" pos:end="53:37"><name pos:start="53:5" pos:end="53:18">rtc_set_memory</name><argument_list pos:start="53:19" pos:end="53:37">(<argument pos:start="53:20" pos:end="53:20"><expr pos:start="53:20" pos:end="53:20"><name pos:start="53:20" pos:end="53:20">s</name></expr></argument>, <argument pos:start="53:23" pos:end="53:26"><expr pos:start="53:23" pos:end="53:26"><literal type="number" pos:start="53:23" pos:end="53:26">0x18</literal></expr></argument>, <argument pos:start="53:29" pos:end="53:36"><expr pos:start="53:29" pos:end="53:36"><name pos:start="53:29" pos:end="53:31">val</name> <operator pos:start="53:33" pos:end="53:34">&gt;&gt;</operator> <literal type="number" pos:start="53:36" pos:end="53:36">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:33"><expr pos:start="55:5" pos:end="55:32"><call pos:start="55:5" pos:end="55:32"><name pos:start="55:5" pos:end="55:18">rtc_set_memory</name><argument_list pos:start="55:19" pos:end="55:32">(<argument pos:start="55:20" pos:end="55:20"><expr pos:start="55:20" pos:end="55:20"><name pos:start="55:20" pos:end="55:20">s</name></expr></argument>, <argument pos:start="55:23" pos:end="55:26"><expr pos:start="55:23" pos:end="55:26"><literal type="number" pos:start="55:23" pos:end="55:26">0x30</literal></expr></argument>, <argument pos:start="55:29" pos:end="55:31"><expr pos:start="55:29" pos:end="55:31"><name pos:start="55:29" pos:end="55:31">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:38"><expr pos:start="57:5" pos:end="57:37"><call pos:start="57:5" pos:end="57:37"><name pos:start="57:5" pos:end="57:18">rtc_set_memory</name><argument_list pos:start="57:19" pos:end="57:37">(<argument pos:start="57:20" pos:end="57:20"><expr pos:start="57:20" pos:end="57:20"><name pos:start="57:20" pos:end="57:20">s</name></expr></argument>, <argument pos:start="57:23" pos:end="57:26"><expr pos:start="57:23" pos:end="57:26"><literal type="number" pos:start="57:23" pos:end="57:26">0x31</literal></expr></argument>, <argument pos:start="57:29" pos:end="57:36"><expr pos:start="57:29" pos:end="57:36"><name pos:start="57:29" pos:end="57:31">val</name> <operator pos:start="57:33" pos:end="57:34">&gt;&gt;</operator> <literal type="number" pos:start="57:36" pos:end="57:36">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="59:5" pos:end="59:39">/* memory between 16MiB and 4GiB */</comment>

    <if_stmt pos:start="61:5" pos:end="69:5"><if pos:start="61:5" pos:end="65:5">if <condition pos:start="61:8" pos:end="61:36">(<expr pos:start="61:9" pos:end="61:35"><name pos:start="61:9" pos:end="61:16">ram_size</name> <operator pos:start="61:18" pos:end="61:18">&gt;</operator> <literal type="number" pos:start="61:20" pos:end="61:21">16</literal> <operator pos:start="61:23" pos:end="61:23">*</operator> <literal type="number" pos:start="61:25" pos:end="61:28">1024</literal> <operator pos:start="61:30" pos:end="61:30">*</operator> <literal type="number" pos:start="61:32" pos:end="61:35">1024</literal></expr>)</condition> <block pos:start="61:38" pos:end="65:5">{<block_content pos:start="63:9" pos:end="63:52">

        <expr_stmt pos:start="63:9" pos:end="63:52"><expr pos:start="63:9" pos:end="63:51"><name pos:start="63:9" pos:end="63:11">val</name> <operator pos:start="63:13" pos:end="63:13">=</operator> <operator pos:start="63:15" pos:end="63:15">(</operator><name pos:start="63:16" pos:end="63:23">ram_size</name> <operator pos:start="63:25" pos:end="63:25">-</operator> <literal type="number" pos:start="63:27" pos:end="63:28">16</literal> <operator pos:start="63:30" pos:end="63:30">*</operator> <literal type="number" pos:start="63:32" pos:end="63:35">1024</literal> <operator pos:start="63:37" pos:end="63:37">*</operator> <literal type="number" pos:start="63:39" pos:end="63:42">1024</literal><operator pos:start="63:43" pos:end="63:43">)</operator> <operator pos:start="63:45" pos:end="63:45">/</operator> <literal type="number" pos:start="63:47" pos:end="63:51">65536</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="65:7" pos:end="69:5">else <block pos:start="65:12" pos:end="69:5">{<block_content pos:start="67:9" pos:end="67:16">

        <expr_stmt pos:start="67:9" pos:end="67:16"><expr pos:start="67:9" pos:end="67:15"><name pos:start="67:9" pos:end="67:11">val</name> <operator pos:start="67:13" pos:end="67:13">=</operator> <literal type="number" pos:start="67:15" pos:end="67:15">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="71:5" pos:end="73:20"><if pos:start="71:5" pos:end="73:20">if <condition pos:start="71:8" pos:end="71:20">(<expr pos:start="71:9" pos:end="71:19"><name pos:start="71:9" pos:end="71:11">val</name> <operator pos:start="71:13" pos:end="71:13">&gt;</operator> <literal type="number" pos:start="71:15" pos:end="71:19">65535</literal></expr>)</condition><block type="pseudo" pos:start="73:9" pos:end="73:20"><block_content pos:start="73:9" pos:end="73:20">

        <expr_stmt pos:start="73:9" pos:end="73:20"><expr pos:start="73:9" pos:end="73:19"><name pos:start="73:9" pos:end="73:11">val</name> <operator pos:start="73:13" pos:end="73:13">=</operator> <literal type="number" pos:start="73:15" pos:end="73:19">65535</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:33"><expr pos:start="75:5" pos:end="75:32"><call pos:start="75:5" pos:end="75:32"><name pos:start="75:5" pos:end="75:18">rtc_set_memory</name><argument_list pos:start="75:19" pos:end="75:32">(<argument pos:start="75:20" pos:end="75:20"><expr pos:start="75:20" pos:end="75:20"><name pos:start="75:20" pos:end="75:20">s</name></expr></argument>, <argument pos:start="75:23" pos:end="75:26"><expr pos:start="75:23" pos:end="75:26"><literal type="number" pos:start="75:23" pos:end="75:26">0x34</literal></expr></argument>, <argument pos:start="75:29" pos:end="75:31"><expr pos:start="75:29" pos:end="75:31"><name pos:start="75:29" pos:end="75:31">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:38"><expr pos:start="77:5" pos:end="77:37"><call pos:start="77:5" pos:end="77:37"><name pos:start="77:5" pos:end="77:18">rtc_set_memory</name><argument_list pos:start="77:19" pos:end="77:37">(<argument pos:start="77:20" pos:end="77:20"><expr pos:start="77:20" pos:end="77:20"><name pos:start="77:20" pos:end="77:20">s</name></expr></argument>, <argument pos:start="77:23" pos:end="77:26"><expr pos:start="77:23" pos:end="77:26"><literal type="number" pos:start="77:23" pos:end="77:26">0x35</literal></expr></argument>, <argument pos:start="77:29" pos:end="77:36"><expr pos:start="77:29" pos:end="77:36"><name pos:start="77:29" pos:end="77:31">val</name> <operator pos:start="77:33" pos:end="77:34">&gt;&gt;</operator> <literal type="number" pos:start="77:36" pos:end="77:36">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="79:5" pos:end="79:27">/* memory above 4GiB */</comment>

    <expr_stmt pos:start="81:5" pos:end="81:36"><expr pos:start="81:5" pos:end="81:35"><name pos:start="81:5" pos:end="81:7">val</name> <operator pos:start="81:9" pos:end="81:9">=</operator> <name pos:start="81:11" pos:end="81:27">above_4g_mem_size</name> <operator pos:start="81:29" pos:end="81:29">/</operator> <literal type="number" pos:start="81:31" pos:end="81:35">65536</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:33"><expr pos:start="83:5" pos:end="83:32"><call pos:start="83:5" pos:end="83:32"><name pos:start="83:5" pos:end="83:18">rtc_set_memory</name><argument_list pos:start="83:19" pos:end="83:32">(<argument pos:start="83:20" pos:end="83:20"><expr pos:start="83:20" pos:end="83:20"><name pos:start="83:20" pos:end="83:20">s</name></expr></argument>, <argument pos:start="83:23" pos:end="83:26"><expr pos:start="83:23" pos:end="83:26"><literal type="number" pos:start="83:23" pos:end="83:26">0x5b</literal></expr></argument>, <argument pos:start="83:29" pos:end="83:31"><expr pos:start="83:29" pos:end="83:31"><name pos:start="83:29" pos:end="83:31">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:38"><expr pos:start="85:5" pos:end="85:37"><call pos:start="85:5" pos:end="85:37"><name pos:start="85:5" pos:end="85:18">rtc_set_memory</name><argument_list pos:start="85:19" pos:end="85:37">(<argument pos:start="85:20" pos:end="85:20"><expr pos:start="85:20" pos:end="85:20"><name pos:start="85:20" pos:end="85:20">s</name></expr></argument>, <argument pos:start="85:23" pos:end="85:26"><expr pos:start="85:23" pos:end="85:26"><literal type="number" pos:start="85:23" pos:end="85:26">0x5c</literal></expr></argument>, <argument pos:start="85:29" pos:end="85:36"><expr pos:start="85:29" pos:end="85:36"><name pos:start="85:29" pos:end="85:31">val</name> <operator pos:start="85:33" pos:end="85:34">&gt;&gt;</operator> <literal type="number" pos:start="85:36" pos:end="85:36">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:39"><expr pos:start="87:5" pos:end="87:38"><call pos:start="87:5" pos:end="87:38"><name pos:start="87:5" pos:end="87:18">rtc_set_memory</name><argument_list pos:start="87:19" pos:end="87:38">(<argument pos:start="87:20" pos:end="87:20"><expr pos:start="87:20" pos:end="87:20"><name pos:start="87:20" pos:end="87:20">s</name></expr></argument>, <argument pos:start="87:23" pos:end="87:26"><expr pos:start="87:23" pos:end="87:26"><literal type="number" pos:start="87:23" pos:end="87:26">0x5d</literal></expr></argument>, <argument pos:start="87:29" pos:end="87:37"><expr pos:start="87:29" pos:end="87:37"><name pos:start="87:29" pos:end="87:31">val</name> <operator pos:start="87:33" pos:end="87:34">&gt;&gt;</operator> <literal type="number" pos:start="87:36" pos:end="87:37">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="91:5" pos:end="91:31">/* set the number of CPU */</comment>

    <expr_stmt pos:start="93:5" pos:end="93:42"><expr pos:start="93:5" pos:end="93:41"><call pos:start="93:5" pos:end="93:41"><name pos:start="93:5" pos:end="93:18">rtc_set_memory</name><argument_list pos:start="93:19" pos:end="93:41">(<argument pos:start="93:20" pos:end="93:20"><expr pos:start="93:20" pos:end="93:20"><name pos:start="93:20" pos:end="93:20">s</name></expr></argument>, <argument pos:start="93:23" pos:end="93:26"><expr pos:start="93:23" pos:end="93:26"><literal type="number" pos:start="93:23" pos:end="93:26">0x5f</literal></expr></argument>, <argument pos:start="93:29" pos:end="93:40"><expr pos:start="93:29" pos:end="93:40"><name pos:start="93:29" pos:end="93:36">smp_cpus</name> <operator pos:start="93:38" pos:end="93:38">-</operator> <literal type="number" pos:start="93:40" pos:end="93:40">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="97:5" pos:end="105:75"><expr pos:start="97:5" pos:end="105:74"><call pos:start="97:5" pos:end="105:74"><name pos:start="97:5" pos:end="97:28">object_property_add_link</name><argument_list pos:start="97:29" pos:end="105:74">(<argument pos:start="97:30" pos:end="97:44"><expr pos:start="97:30" pos:end="97:44"><call pos:start="97:30" pos:end="97:44"><name pos:start="97:30" pos:end="97:35">OBJECT</name><argument_list pos:start="97:36" pos:end="97:44">(<argument pos:start="97:37" pos:end="97:43"><expr pos:start="97:37" pos:end="97:43"><name pos:start="97:37" pos:end="97:43">machine</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="97:47" pos:end="97:57"><expr pos:start="97:47" pos:end="97:57"><literal type="string" pos:start="97:47" pos:end="97:57">"rtc_state"</literal></expr></argument>,

                             <argument pos:start="99:30" pos:end="99:44"><expr pos:start="99:30" pos:end="99:44"><name pos:start="99:30" pos:end="99:44">TYPE_ISA_DEVICE</name></expr></argument>,

                             <argument pos:start="101:30" pos:end="101:56"><expr pos:start="101:30" pos:end="101:56"><operator pos:start="101:30" pos:end="101:30">(</operator><name pos:start="101:31" pos:end="101:36">Object</name> <operator pos:start="101:38" pos:end="101:38">*</operator><operator pos:start="101:39" pos:end="101:39">*</operator><operator pos:start="101:40" pos:end="101:40">)</operator><operator pos:start="101:41" pos:end="101:41">&amp;</operator><name pos:start="101:42" pos:end="101:56"><name pos:start="101:42" pos:end="101:51">pc_machine</name><operator pos:start="101:52" pos:end="101:53">-&gt;</operator><name pos:start="101:54" pos:end="101:56">rtc</name></name></expr></argument>,

                             <argument pos:start="103:30" pos:end="103:59"><expr pos:start="103:30" pos:end="103:59"><name pos:start="103:30" pos:end="103:59">object_property_allow_set_link</name></expr></argument>,

                             <argument pos:start="105:30" pos:end="105:59"><expr pos:start="105:30" pos:end="105:59"><name pos:start="105:30" pos:end="105:59">OBJ_PROP_LINK_UNREF_ON_RELEASE</name></expr></argument>, <argument pos:start="105:62" pos:end="105:73"><expr pos:start="105:62" pos:end="105:73"><operator pos:start="105:62" pos:end="105:62">&amp;</operator><name pos:start="105:63" pos:end="105:73">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="109:56"><expr pos:start="107:5" pos:end="109:55"><call pos:start="107:5" pos:end="109:55"><name pos:start="107:5" pos:end="107:28">object_property_set_link</name><argument_list pos:start="107:29" pos:end="109:55">(<argument pos:start="107:30" pos:end="107:44"><expr pos:start="107:30" pos:end="107:44"><call pos:start="107:30" pos:end="107:44"><name pos:start="107:30" pos:end="107:35">OBJECT</name><argument_list pos:start="107:36" pos:end="107:44">(<argument pos:start="107:37" pos:end="107:43"><expr pos:start="107:37" pos:end="107:43"><name pos:start="107:37" pos:end="107:43">machine</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="107:47" pos:end="107:55"><expr pos:start="107:47" pos:end="107:55"><call pos:start="107:47" pos:end="107:55"><name pos:start="107:47" pos:end="107:52">OBJECT</name><argument_list pos:start="107:53" pos:end="107:55">(<argument pos:start="107:54" pos:end="107:54"><expr pos:start="107:54" pos:end="107:54"><name pos:start="107:54" pos:end="107:54">s</name></expr></argument>)</argument_list></call></expr></argument>,

                             <argument pos:start="109:30" pos:end="109:40"><expr pos:start="109:30" pos:end="109:40"><literal type="string" pos:start="109:30" pos:end="109:40">"rtc_state"</literal></expr></argument>, <argument pos:start="109:43" pos:end="109:54"><expr pos:start="109:43" pos:end="109:54"><operator pos:start="109:43" pos:end="109:43">&amp;</operator><name pos:start="109:44" pos:end="109:54">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="113:5" pos:end="117:5"><if pos:start="113:5" pos:end="117:5">if <condition pos:start="113:8" pos:end="113:37">(<expr pos:start="113:9" pos:end="113:36"><call pos:start="113:9" pos:end="113:36"><name pos:start="113:9" pos:end="113:20">set_boot_dev</name><argument_list pos:start="113:21" pos:end="113:36">(<argument pos:start="113:22" pos:end="113:22"><expr pos:start="113:22" pos:end="113:22"><name pos:start="113:22" pos:end="113:22">s</name></expr></argument>, <argument pos:start="113:25" pos:end="113:35"><expr pos:start="113:25" pos:end="113:35"><name pos:start="113:25" pos:end="113:35">boot_device</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="113:39" pos:end="117:5">{<block_content pos:start="115:9" pos:end="115:16">

        <expr_stmt pos:start="115:9" pos:end="115:16"><expr pos:start="115:9" pos:end="115:15"><call pos:start="115:9" pos:end="115:15"><name pos:start="115:9" pos:end="115:12">exit</name><argument_list pos:start="115:13" pos:end="115:15">(<argument pos:start="115:14" pos:end="115:14"><expr pos:start="115:14" pos:end="115:14"><literal type="number" pos:start="115:14" pos:end="115:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="121:5" pos:end="121:21">/* floppy type */</comment>

    <if_stmt pos:start="123:5" pos:end="131:5"><if pos:start="123:5" pos:end="131:5">if <condition pos:start="123:8" pos:end="123:15">(<expr pos:start="123:9" pos:end="123:14"><name pos:start="123:9" pos:end="123:14">floppy</name></expr>)</condition> <block pos:start="123:17" pos:end="131:5">{<block_content pos:start="125:9" pos:end="129:9">

        <for pos:start="125:9" pos:end="129:9">for <control pos:start="125:13" pos:end="125:31">(<init pos:start="125:14" pos:end="125:19"><expr pos:start="125:14" pos:end="125:18"><name pos:start="125:14" pos:end="125:14">i</name> <operator pos:start="125:16" pos:end="125:16">=</operator> <literal type="number" pos:start="125:18" pos:end="125:18">0</literal></expr>;</init> <condition pos:start="125:21" pos:end="125:26"><expr pos:start="125:21" pos:end="125:25"><name pos:start="125:21" pos:end="125:21">i</name> <operator pos:start="125:23" pos:end="125:23">&lt;</operator> <literal type="number" pos:start="125:25" pos:end="125:25">2</literal></expr>;</condition> <incr pos:start="125:28" pos:end="125:30"><expr pos:start="125:28" pos:end="125:30"><name pos:start="125:28" pos:end="125:28">i</name><operator pos:start="125:29" pos:end="125:30">++</operator></expr></incr>)</control> <block pos:start="125:33" pos:end="129:9">{<block_content pos:start="127:13" pos:end="127:59">

            <expr_stmt pos:start="127:13" pos:end="127:59"><expr pos:start="127:13" pos:end="127:58"><name pos:start="127:13" pos:end="127:22"><name pos:start="127:13" pos:end="127:19">fd_type</name><index pos:start="127:20" pos:end="127:22">[<expr pos:start="127:21" pos:end="127:21"><name pos:start="127:21" pos:end="127:21">i</name></expr>]</index></name> <operator pos:start="127:24" pos:end="127:24">=</operator> <call pos:start="127:26" pos:end="127:58"><name pos:start="127:26" pos:end="127:47">isa_fdc_get_drive_type</name><argument_list pos:start="127:48" pos:end="127:58">(<argument pos:start="127:49" pos:end="127:54"><expr pos:start="127:49" pos:end="127:54"><name pos:start="127:49" pos:end="127:54">floppy</name></expr></argument>, <argument pos:start="127:57" pos:end="127:57"><expr pos:start="127:57" pos:end="127:57"><name pos:start="127:57" pos:end="127:57">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="133:5" pos:end="135:43"><expr pos:start="133:5" pos:end="135:42"><name pos:start="133:5" pos:end="133:7">val</name> <operator pos:start="133:9" pos:end="133:9">=</operator> <operator pos:start="133:11" pos:end="133:11">(</operator><call pos:start="133:12" pos:end="133:45"><name pos:start="133:12" pos:end="133:33">cmos_get_fd_drive_type</name><argument_list pos:start="133:34" pos:end="133:45">(<argument pos:start="133:35" pos:end="133:44"><expr pos:start="133:35" pos:end="133:44"><name pos:start="133:35" pos:end="133:44"><name pos:start="133:35" pos:end="133:41">fd_type</name><index pos:start="133:42" pos:end="133:44">[<expr pos:start="133:43" pos:end="133:43"><literal type="number" pos:start="133:43" pos:end="133:43">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="133:47" pos:end="133:48">&lt;&lt;</operator> <literal type="number" pos:start="133:50" pos:end="133:50">4</literal><operator pos:start="133:51" pos:end="133:51">)</operator> <operator pos:start="133:53" pos:end="133:53">|</operator>

        <call pos:start="135:9" pos:end="135:42"><name pos:start="135:9" pos:end="135:30">cmos_get_fd_drive_type</name><argument_list pos:start="135:31" pos:end="135:42">(<argument pos:start="135:32" pos:end="135:41"><expr pos:start="135:32" pos:end="135:41"><name pos:start="135:32" pos:end="135:41"><name pos:start="135:32" pos:end="135:38">fd_type</name><index pos:start="135:39" pos:end="135:41">[<expr pos:start="135:40" pos:end="135:40"><literal type="number" pos:start="135:40" pos:end="135:40">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="137:5" pos:end="137:33"><expr pos:start="137:5" pos:end="137:32"><call pos:start="137:5" pos:end="137:32"><name pos:start="137:5" pos:end="137:18">rtc_set_memory</name><argument_list pos:start="137:19" pos:end="137:32">(<argument pos:start="137:20" pos:end="137:20"><expr pos:start="137:20" pos:end="137:20"><name pos:start="137:20" pos:end="137:20">s</name></expr></argument>, <argument pos:start="137:23" pos:end="137:26"><expr pos:start="137:23" pos:end="137:26"><literal type="number" pos:start="137:23" pos:end="137:26">0x10</literal></expr></argument>, <argument pos:start="137:29" pos:end="137:31"><expr pos:start="137:29" pos:end="137:31"><name pos:start="137:29" pos:end="137:31">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="141:5" pos:end="141:12"><expr pos:start="141:5" pos:end="141:11"><name pos:start="141:5" pos:end="141:7">val</name> <operator pos:start="141:9" pos:end="141:9">=</operator> <literal type="number" pos:start="141:11" pos:end="141:11">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="143:5" pos:end="143:11"><expr pos:start="143:5" pos:end="143:10"><name pos:start="143:5" pos:end="143:6">nb</name> <operator pos:start="143:8" pos:end="143:8">=</operator> <literal type="number" pos:start="143:10" pos:end="143:10">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="145:5" pos:end="149:5"><if pos:start="145:5" pos:end="149:5">if <condition pos:start="145:8" pos:end="145:37">(<expr pos:start="145:9" pos:end="145:36"><name pos:start="145:9" pos:end="145:18"><name pos:start="145:9" pos:end="145:15">fd_type</name><index pos:start="145:16" pos:end="145:18">[<expr pos:start="145:17" pos:end="145:17"><literal type="number" pos:start="145:17" pos:end="145:17">0</literal></expr>]</index></name> <operator pos:start="145:20" pos:end="145:20">&lt;</operator> <name pos:start="145:22" pos:end="145:36">FDRIVE_DRV_NONE</name></expr>)</condition> <block pos:start="145:39" pos:end="149:5">{<block_content pos:start="147:9" pos:end="147:13">

        <expr_stmt pos:start="147:9" pos:end="147:13"><expr pos:start="147:9" pos:end="147:12"><name pos:start="147:9" pos:end="147:10">nb</name><operator pos:start="147:11" pos:end="147:12">++</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="151:5" pos:end="155:5"><if pos:start="151:5" pos:end="155:5">if <condition pos:start="151:8" pos:end="151:37">(<expr pos:start="151:9" pos:end="151:36"><name pos:start="151:9" pos:end="151:18"><name pos:start="151:9" pos:end="151:15">fd_type</name><index pos:start="151:16" pos:end="151:18">[<expr pos:start="151:17" pos:end="151:17"><literal type="number" pos:start="151:17" pos:end="151:17">1</literal></expr>]</index></name> <operator pos:start="151:20" pos:end="151:20">&lt;</operator> <name pos:start="151:22" pos:end="151:36">FDRIVE_DRV_NONE</name></expr>)</condition> <block pos:start="151:39" pos:end="155:5">{<block_content pos:start="153:9" pos:end="153:13">

        <expr_stmt pos:start="153:9" pos:end="153:13"><expr pos:start="153:9" pos:end="153:12"><name pos:start="153:9" pos:end="153:10">nb</name><operator pos:start="153:11" pos:end="153:12">++</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <switch pos:start="157:5" pos:end="175:5">switch <condition pos:start="157:12" pos:end="157:15">(<expr pos:start="157:13" pos:end="157:14"><name pos:start="157:13" pos:end="157:14">nb</name></expr>)</condition> <block pos:start="157:17" pos:end="175:5">{<block_content pos:start="159:5" pos:end="173:14">

    <case pos:start="159:5" pos:end="159:11">case <expr pos:start="159:10" pos:end="159:10"><literal type="number" pos:start="159:10" pos:end="159:10">0</literal></expr>:</case>

        <break pos:start="161:9" pos:end="161:14">break;</break>

    <case pos:start="163:5" pos:end="163:11">case <expr pos:start="163:10" pos:end="163:10"><literal type="number" pos:start="163:10" pos:end="163:10">1</literal></expr>:</case>

        <expr_stmt pos:start="165:9" pos:end="165:20"><expr pos:start="165:9" pos:end="165:19"><name pos:start="165:9" pos:end="165:11">val</name> <operator pos:start="165:13" pos:end="165:14">|=</operator> <literal type="number" pos:start="165:16" pos:end="165:19">0x01</literal></expr>;</expr_stmt> <comment type="block" pos:start="165:22" pos:end="165:50">/* 1 drive, ready for boot */</comment>

        <break pos:start="167:9" pos:end="167:14">break;</break>

    <case pos:start="169:5" pos:end="169:11">case <expr pos:start="169:10" pos:end="169:10"><literal type="number" pos:start="169:10" pos:end="169:10">2</literal></expr>:</case>

        <expr_stmt pos:start="171:9" pos:end="171:20"><expr pos:start="171:9" pos:end="171:19"><name pos:start="171:9" pos:end="171:11">val</name> <operator pos:start="171:13" pos:end="171:14">|=</operator> <literal type="number" pos:start="171:16" pos:end="171:19">0x41</literal></expr>;</expr_stmt> <comment type="block" pos:start="171:22" pos:end="171:51">/* 2 drives, ready for boot */</comment>

        <break pos:start="173:9" pos:end="173:14">break;</break>

    </block_content>}</block></switch>

    <expr_stmt pos:start="177:5" pos:end="177:16"><expr pos:start="177:5" pos:end="177:15"><name pos:start="177:5" pos:end="177:7">val</name> <operator pos:start="177:9" pos:end="177:10">|=</operator> <literal type="number" pos:start="177:12" pos:end="177:15">0x02</literal></expr>;</expr_stmt> <comment type="block" pos:start="177:18" pos:end="177:35">/* FPU is there */</comment>

    <expr_stmt pos:start="179:5" pos:end="179:16"><expr pos:start="179:5" pos:end="179:15"><name pos:start="179:5" pos:end="179:7">val</name> <operator pos:start="179:9" pos:end="179:10">|=</operator> <literal type="number" pos:start="179:12" pos:end="179:15">0x04</literal></expr>;</expr_stmt> <comment type="block" pos:start="179:18" pos:end="179:43">/* PS/2 mouse installed */</comment>

    <expr_stmt pos:start="181:5" pos:end="181:47"><expr pos:start="181:5" pos:end="181:46"><call pos:start="181:5" pos:end="181:46"><name pos:start="181:5" pos:end="181:18">rtc_set_memory</name><argument_list pos:start="181:19" pos:end="181:46">(<argument pos:start="181:20" pos:end="181:20"><expr pos:start="181:20" pos:end="181:20"><name pos:start="181:20" pos:end="181:20">s</name></expr></argument>, <argument pos:start="181:23" pos:end="181:40"><expr pos:start="181:23" pos:end="181:40"><name pos:start="181:23" pos:end="181:40">REG_EQUIPMENT_BYTE</name></expr></argument>, <argument pos:start="181:43" pos:end="181:45"><expr pos:start="181:43" pos:end="181:45"><name pos:start="181:43" pos:end="181:45">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="185:5" pos:end="185:21">/* hard drives */</comment>

    <expr_stmt pos:start="187:5" pos:end="187:22"><expr pos:start="187:5" pos:end="187:21"><name pos:start="187:5" pos:end="187:17"><name pos:start="187:5" pos:end="187:7">arg</name><operator pos:start="187:8" pos:end="187:8">.</operator><name pos:start="187:9" pos:end="187:17">rtc_state</name></name> <operator pos:start="187:19" pos:end="187:19">=</operator> <name pos:start="187:21" pos:end="187:21">s</name></expr>;</expr_stmt>

    <expr_stmt pos:start="189:5" pos:end="189:28"><expr pos:start="189:5" pos:end="189:27"><name pos:start="189:5" pos:end="189:17"><name pos:start="189:5" pos:end="189:7">arg</name><operator pos:start="189:8" pos:end="189:8">.</operator><name pos:start="189:9" pos:end="189:14">idebus</name><index pos:start="189:15" pos:end="189:17">[<expr pos:start="189:16" pos:end="189:16"><literal type="number" pos:start="189:16" pos:end="189:16">0</literal></expr>]</index></name> <operator pos:start="189:19" pos:end="189:19">=</operator> <name pos:start="189:21" pos:end="189:27">idebus0</name></expr>;</expr_stmt>

    <expr_stmt pos:start="191:5" pos:end="191:28"><expr pos:start="191:5" pos:end="191:27"><name pos:start="191:5" pos:end="191:17"><name pos:start="191:5" pos:end="191:7">arg</name><operator pos:start="191:8" pos:end="191:8">.</operator><name pos:start="191:9" pos:end="191:14">idebus</name><index pos:start="191:15" pos:end="191:17">[<expr pos:start="191:16" pos:end="191:16"><literal type="number" pos:start="191:16" pos:end="191:16">1</literal></expr>]</index></name> <operator pos:start="191:19" pos:end="191:19">=</operator> <name pos:start="191:21" pos:end="191:27">idebus1</name></expr>;</expr_stmt>

    <expr_stmt pos:start="193:5" pos:end="193:49"><expr pos:start="193:5" pos:end="193:48"><call pos:start="193:5" pos:end="193:48"><name pos:start="193:5" pos:end="193:23">qemu_register_reset</name><argument_list pos:start="193:24" pos:end="193:48">(<argument pos:start="193:25" pos:end="193:41"><expr pos:start="193:25" pos:end="193:41"><name pos:start="193:25" pos:end="193:41">pc_cmos_init_late</name></expr></argument>, <argument pos:start="193:44" pos:end="193:47"><expr pos:start="193:44" pos:end="193:47"><operator pos:start="193:44" pos:end="193:44">&amp;</operator><name pos:start="193:45" pos:end="193:47">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
