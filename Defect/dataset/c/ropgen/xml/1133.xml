<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/1133.c" pos:tabs="8"><function pos:start="1:1" pos:end="79:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">xan_decode_frame</name><parameter_list pos:start="1:28" pos:end="3:44">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>,
                            <parameter pos:start="2:29" pos:end="2:38"><decl pos:start="2:29" pos:end="2:38"><type pos:start="2:29" pos:end="2:38"><name pos:start="2:29" pos:end="2:32">void</name> <modifier pos:start="2:34" pos:end="2:34">*</modifier></type><name pos:start="2:35" pos:end="2:38">data</name></decl></parameter>, <parameter pos:start="2:41" pos:end="2:54"><decl pos:start="2:41" pos:end="2:54"><type pos:start="2:41" pos:end="2:54"><name pos:start="2:41" pos:end="2:43">int</name> <modifier pos:start="2:45" pos:end="2:45">*</modifier></type><name pos:start="2:46" pos:end="2:54">data_size</name></decl></parameter>,
                            <parameter pos:start="3:29" pos:end="3:43"><decl pos:start="3:29" pos:end="3:43"><type pos:start="3:29" pos:end="3:43"><name pos:start="3:29" pos:end="3:36">AVPacket</name> <modifier pos:start="3:38" pos:end="3:38">*</modifier></type><name pos:start="3:39" pos:end="3:43">avpkt</name></decl></parameter>)</parameter_list>
<block pos:start="4:1" pos:end="79:1">{<block_content pos:start="5:5" pos:end="78:20">
    <decl_stmt pos:start="5:5" pos:end="5:37"><decl pos:start="5:5" pos:end="5:36"><type pos:start="5:5" pos:end="5:19"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:17">uint8_t</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:22">buf</name> <init pos:start="5:24" pos:end="5:36">= <expr pos:start="5:26" pos:end="5:36"><name pos:start="5:26" pos:end="5:36"><name pos:start="5:26" pos:end="5:30">avpkt</name><operator pos:start="5:31" pos:end="5:32">-&gt;</operator><name pos:start="5:33" pos:end="5:36">data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:36"><decl pos:start="6:5" pos:end="6:11"><type pos:start="6:5" pos:end="6:7"><name pos:start="6:5" pos:end="6:7">int</name></type> <name pos:start="6:9" pos:end="6:11">ret</name></decl>, <decl pos:start="6:14" pos:end="6:35"><type ref="prev" pos:start="6:5" pos:end="6:7"/><name pos:start="6:14" pos:end="6:21">buf_size</name> <init pos:start="6:23" pos:end="6:35">= <expr pos:start="6:25" pos:end="6:35"><name pos:start="6:25" pos:end="6:35"><name pos:start="6:25" pos:end="6:29">avpkt</name><operator pos:start="6:30" pos:end="6:31">-&gt;</operator><name pos:start="6:32" pos:end="6:35">size</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">XanContext</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:17">s</name> <init pos:start="7:19" pos:end="7:36">= <expr pos:start="7:21" pos:end="7:36"><name pos:start="7:21" pos:end="7:36"><name pos:start="7:21" pos:end="7:25">avctx</name><operator pos:start="7:26" pos:end="7:27">-&gt;</operator><name pos:start="7:28" pos:end="7:36">priv_data</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt pos:start="8:5" pos:end="58:5"><if pos:start="8:5" pos:end="58:5">if <condition pos:start="8:8" pos:end="8:45">(<expr pos:start="8:9" pos:end="8:44"><name pos:start="8:9" pos:end="8:24"><name pos:start="8:9" pos:end="8:13">avctx</name><operator pos:start="8:14" pos:end="8:15">-&gt;</operator><name pos:start="8:16" pos:end="8:20">codec</name><operator pos:start="8:21" pos:end="8:22">-&gt;</operator><name pos:start="8:23" pos:end="8:24">id</name></name> <operator pos:start="8:26" pos:end="8:27">==</operator> <name pos:start="8:29" pos:end="8:44">CODEC_ID_XAN_WC3</name></expr>)</condition> <block pos:start="8:47" pos:end="58:5">{<block_content pos:start="9:9" pos:end="57:33">
        <decl_stmt pos:start="9:9" pos:end="9:48"><decl pos:start="9:9" pos:end="9:47"><type pos:start="9:9" pos:end="9:23"><specifier pos:start="9:9" pos:end="9:13">const</specifier> <name pos:start="9:15" pos:end="9:21">uint8_t</name> <modifier pos:start="9:23" pos:end="9:23">*</modifier></type><name pos:start="9:24" pos:end="9:30">buf_end</name> <init pos:start="9:32" pos:end="9:47">= <expr pos:start="9:34" pos:end="9:47"><name pos:start="9:34" pos:end="9:36">buf</name> <operator pos:start="9:38" pos:end="9:38">+</operator> <name pos:start="9:40" pos:end="9:47">buf_size</name></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="10:9" pos:end="10:20"><decl pos:start="10:9" pos:end="10:19"><type pos:start="10:9" pos:end="10:11"><name pos:start="10:9" pos:end="10:11">int</name></type> <name pos:start="10:13" pos:end="10:15">tag</name> <init pos:start="10:17" pos:end="10:19">= <expr pos:start="10:19" pos:end="10:19"><literal type="number" pos:start="10:19" pos:end="10:19">0</literal></expr></init></decl>;</decl_stmt>
        <while pos:start="11:9" pos:end="56:9">while <condition pos:start="11:15" pos:end="11:52">(<expr pos:start="11:16" pos:end="11:51"><name pos:start="11:16" pos:end="11:22">buf_end</name> <operator pos:start="11:24" pos:end="11:24">-</operator> <name pos:start="11:26" pos:end="11:28">buf</name> <operator pos:start="11:30" pos:end="11:30">&gt;</operator> <literal type="number" pos:start="11:32" pos:end="11:32">8</literal> <operator pos:start="11:34" pos:end="11:35">&amp;&amp;</operator> <name pos:start="11:37" pos:end="11:39">tag</name> <operator pos:start="11:41" pos:end="11:42">!=</operator> <name pos:start="11:44" pos:end="11:51">VGA__TAG</name></expr>)</condition> <block pos:start="11:54" pos:end="56:9">{<block_content pos:start="12:13" pos:end="55:13">
            <decl_stmt pos:start="12:13" pos:end="12:29"><decl pos:start="12:13" pos:end="12:28"><type pos:start="12:13" pos:end="12:22"><name pos:start="12:13" pos:end="12:20">unsigned</name> <modifier pos:start="12:22" pos:end="12:22">*</modifier></type><name pos:start="12:23" pos:end="12:28">tmpptr</name></decl>;</decl_stmt>
            <decl_stmt pos:start="13:13" pos:end="13:29"><decl pos:start="13:13" pos:end="13:28"><type pos:start="13:13" pos:end="13:20"><name pos:start="13:13" pos:end="13:20">uint32_t</name></type> <name pos:start="13:22" pos:end="13:28">new_pal</name></decl>;</decl_stmt>
            <decl_stmt pos:start="14:13" pos:end="14:21"><decl pos:start="14:13" pos:end="14:20"><type pos:start="14:13" pos:end="14:15"><name pos:start="14:13" pos:end="14:15">int</name></type> <name pos:start="14:17" pos:end="14:20">size</name></decl>;</decl_stmt>
            <decl_stmt pos:start="15:13" pos:end="15:18"><decl pos:start="15:13" pos:end="15:17"><type pos:start="15:13" pos:end="15:15"><name pos:start="15:13" pos:end="15:15">int</name></type> <name pos:start="15:17" pos:end="15:17">i</name></decl>;</decl_stmt>
            <expr_stmt pos:start="16:13" pos:end="16:45"><expr pos:start="16:13" pos:end="16:44"><name pos:start="16:13" pos:end="16:15">tag</name>  <operator pos:start="16:18" pos:end="16:18">=</operator> <call pos:start="16:20" pos:end="16:44"><name pos:start="16:20" pos:end="16:38">bytestream_get_le32</name><argument_list pos:start="16:39" pos:end="16:44">(<argument pos:start="16:40" pos:end="16:43"><expr pos:start="16:40" pos:end="16:43"><operator pos:start="16:40" pos:end="16:40">&amp;</operator><name pos:start="16:41" pos:end="16:43">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="17:13" pos:end="17:45"><expr pos:start="17:13" pos:end="17:44"><name pos:start="17:13" pos:end="17:16">size</name> <operator pos:start="17:18" pos:end="17:18">=</operator> <call pos:start="17:20" pos:end="17:44"><name pos:start="17:20" pos:end="17:38">bytestream_get_be32</name><argument_list pos:start="17:39" pos:end="17:44">(<argument pos:start="17:40" pos:end="17:43"><expr pos:start="17:40" pos:end="17:43"><operator pos:start="17:40" pos:end="17:40">&amp;</operator><name pos:start="17:41" pos:end="17:43">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="18:13" pos:end="18:46"><expr pos:start="18:13" pos:end="18:45"><name pos:start="18:13" pos:end="18:16">size</name> <operator pos:start="18:18" pos:end="18:18">=</operator> <call pos:start="18:20" pos:end="18:45"><name pos:start="18:20" pos:end="18:24">FFMIN</name><argument_list pos:start="18:25" pos:end="18:45">(<argument pos:start="18:26" pos:end="18:29"><expr pos:start="18:26" pos:end="18:29"><name pos:start="18:26" pos:end="18:29">size</name></expr></argument>, <argument pos:start="18:32" pos:end="18:44"><expr pos:start="18:32" pos:end="18:44"><name pos:start="18:32" pos:end="18:38">buf_end</name> <operator pos:start="18:40" pos:end="18:40">-</operator> <name pos:start="18:42" pos:end="18:44">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <switch pos:start="19:13" pos:end="55:13">switch <condition pos:start="19:20" pos:end="19:24">(<expr pos:start="19:21" pos:end="19:23"><name pos:start="19:21" pos:end="19:23">tag</name></expr>)</condition> <block pos:start="19:26" pos:end="55:13">{<block_content pos:start="20:13" pos:end="54:22">
            <case pos:start="20:13" pos:end="20:26">case <expr pos:start="20:18" pos:end="20:25"><name pos:start="20:18" pos:end="20:25">PALT_TAG</name></expr>:</case>
                <if_stmt pos:start="21:17" pos:end="23:91"><if pos:start="21:17" pos:end="23:91">if <condition pos:start="21:20" pos:end="21:40">(<expr pos:start="21:21" pos:end="21:39"><name pos:start="21:21" pos:end="21:24">size</name> <operator pos:start="21:26" pos:end="21:26">&lt;</operator> <name pos:start="21:28" pos:end="21:39">PALETTE_SIZE</name></expr>)</condition><block type="pseudo" pos:start="22:17" pos:end="23:91"><block_content pos:start="22:17" pos:end="23:91">
                <if_stmt pos:start="22:17" pos:end="23:91"><if pos:start="22:17" pos:end="23:91">if <condition pos:start="22:20" pos:end="22:54">(<expr pos:start="22:21" pos:end="22:53"><name pos:start="22:21" pos:end="22:37"><name pos:start="22:21" pos:end="22:21">s</name><operator pos:start="22:22" pos:end="22:23">-&gt;</operator><name pos:start="22:24" pos:end="22:37">palettes_count</name></name> <operator pos:start="22:39" pos:end="22:40">&gt;=</operator> <name pos:start="22:42" pos:end="22:53">PALETTES_MAX</name></expr>)</condition><block type="pseudo" pos:start="23:17" pos:end="23:91"><block_content pos:start="23:17" pos:end="23:91">
                <expr_stmt pos:start="23:17" pos:end="23:91"><expr pos:start="23:17" pos:end="23:90"><name pos:start="23:17" pos:end="23:22">tmpptr</name> <operator pos:start="23:24" pos:end="23:24">=</operator> <call pos:start="23:26" pos:end="23:90"><name pos:start="23:26" pos:end="23:35">av_realloc</name><argument_list pos:start="23:36" pos:end="23:90">(<argument pos:start="23:37" pos:end="23:47"><expr pos:start="23:37" pos:end="23:47"><name pos:start="23:37" pos:end="23:47"><name pos:start="23:37" pos:end="23:37">s</name><operator pos:start="23:38" pos:end="23:39">-&gt;</operator><name pos:start="23:40" pos:end="23:47">palettes</name></name></expr></argument>, <argument pos:start="23:50" pos:end="23:89"><expr pos:start="23:50" pos:end="23:89"><operator pos:start="23:50" pos:end="23:50">(</operator><name pos:start="23:51" pos:end="23:67"><name pos:start="23:51" pos:end="23:51">s</name><operator pos:start="23:52" pos:end="23:53">-&gt;</operator><name pos:start="23:54" pos:end="23:67">palettes_count</name></name> <operator pos:start="23:69" pos:end="23:69">+</operator> <literal type="number" pos:start="23:71" pos:end="23:71">1</literal><operator pos:start="23:72" pos:end="23:72">)</operator> <operator pos:start="23:74" pos:end="23:74">*</operator> <name pos:start="23:76" pos:end="23:89">AVPALETTE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
                <if_stmt pos:start="24:17" pos:end="25:43"><if pos:start="24:17" pos:end="25:43">if <condition pos:start="24:20" pos:end="24:28">(<expr pos:start="24:21" pos:end="24:27"><operator pos:start="24:21" pos:end="24:21">!</operator><name pos:start="24:22" pos:end="24:27">tmpptr</name></expr>)</condition><block type="pseudo" pos:start="25:21" pos:end="25:43"><block_content pos:start="25:21" pos:end="25:43">
                    <return pos:start="25:21" pos:end="25:43">return <expr pos:start="25:28" pos:end="25:42"><call pos:start="25:28" pos:end="25:42"><name pos:start="25:28" pos:end="25:34">AVERROR</name><argument_list pos:start="25:35" pos:end="25:42">(<argument pos:start="25:36" pos:end="25:41"><expr pos:start="25:36" pos:end="25:41"><name pos:start="25:36" pos:end="25:41">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
                <expr_stmt pos:start="26:17" pos:end="26:37"><expr pos:start="26:17" pos:end="26:36"><name pos:start="26:17" pos:end="26:27"><name pos:start="26:17" pos:end="26:17">s</name><operator pos:start="26:18" pos:end="26:19">-&gt;</operator><name pos:start="26:20" pos:end="26:27">palettes</name></name> <operator pos:start="26:29" pos:end="26:29">=</operator> <name pos:start="26:31" pos:end="26:36">tmpptr</name></expr>;</expr_stmt>
                <expr_stmt pos:start="27:17" pos:end="27:62"><expr pos:start="27:17" pos:end="27:61"><name pos:start="27:17" pos:end="27:22">tmpptr</name> <operator pos:start="27:24" pos:end="27:25">+=</operator> <name pos:start="27:27" pos:end="27:43"><name pos:start="27:27" pos:end="27:27">s</name><operator pos:start="27:28" pos:end="27:29">-&gt;</operator><name pos:start="27:30" pos:end="27:43">palettes_count</name></name> <operator pos:start="27:45" pos:end="27:45">*</operator> <name pos:start="27:47" pos:end="27:61">AVPALETTE_COUNT</name></expr>;</expr_stmt>
                <for pos:start="28:17" pos:end="39:17">for <control pos:start="28:21" pos:end="28:51">(<init pos:start="28:22" pos:end="28:27"><expr pos:start="28:22" pos:end="28:26"><name pos:start="28:22" pos:end="28:22">i</name> <operator pos:start="28:24" pos:end="28:24">=</operator> <literal type="number" pos:start="28:26" pos:end="28:26">0</literal></expr>;</init> <condition pos:start="28:29" pos:end="28:46"><expr pos:start="28:29" pos:end="28:45"><name pos:start="28:29" pos:end="28:29">i</name> <operator pos:start="28:31" pos:end="28:31">&lt;</operator> <name pos:start="28:33" pos:end="28:45">PALETTE_COUNT</name></expr>;</condition> <incr pos:start="28:48" pos:end="28:50"><expr pos:start="28:48" pos:end="28:50"><name pos:start="28:48" pos:end="28:48">i</name><operator pos:start="28:49" pos:end="28:50">++</operator></expr></incr>)</control> <block pos:start="28:53" pos:end="39:17">{<block_content pos:start="30:21" pos:end="38:57">
<cpp:if pos:start="29:1" pos:end="29:17">#<cpp:directive pos:start="29:2" pos:end="29:3">if</cpp:directive> <expr pos:start="29:5" pos:end="29:17"><name pos:start="29:5" pos:end="29:17">RUNTIME_GAMMA</name></expr></cpp:if>
                    <decl_stmt pos:start="30:21" pos:end="30:47"><decl pos:start="30:21" pos:end="30:46"><type pos:start="30:21" pos:end="30:23"><name pos:start="30:21" pos:end="30:23">int</name></type> <name pos:start="30:25" pos:end="30:25">r</name> <init pos:start="30:27" pos:end="30:46">= <expr pos:start="30:29" pos:end="30:46"><call pos:start="30:29" pos:end="30:46"><name pos:start="30:29" pos:end="30:38">gamma_corr</name><argument_list pos:start="30:39" pos:end="30:46">(<argument pos:start="30:40" pos:end="30:45"><expr pos:start="30:40" pos:end="30:45"><operator pos:start="30:40" pos:end="30:40">*</operator><name pos:start="30:41" pos:end="30:43">buf</name><operator pos:start="30:44" pos:end="30:45">++</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt pos:start="31:21" pos:end="31:47"><decl pos:start="31:21" pos:end="31:46"><type pos:start="31:21" pos:end="31:23"><name pos:start="31:21" pos:end="31:23">int</name></type> <name pos:start="31:25" pos:end="31:25">g</name> <init pos:start="31:27" pos:end="31:46">= <expr pos:start="31:29" pos:end="31:46"><call pos:start="31:29" pos:end="31:46"><name pos:start="31:29" pos:end="31:38">gamma_corr</name><argument_list pos:start="31:39" pos:end="31:46">(<argument pos:start="31:40" pos:end="31:45"><expr pos:start="31:40" pos:end="31:45"><operator pos:start="31:40" pos:end="31:40">*</operator><name pos:start="31:41" pos:end="31:43">buf</name><operator pos:start="31:44" pos:end="31:45">++</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt pos:start="32:21" pos:end="34:0"><decl pos:start="32:21" pos:end="32:46"><type pos:start="32:21" pos:end="32:23"><name pos:start="32:21" pos:end="32:23">int</name></type> <name pos:start="32:25" pos:end="32:25">b</name> <init pos:start="32:27" pos:end="32:46">= <expr pos:start="32:29" pos:end="32:46"><call pos:start="32:29" pos:end="32:46"><name pos:start="32:29" pos:end="32:38">gamma_corr</name><argument_list pos:start="32:39" pos:end="32:46">(<argument pos:start="32:40" pos:end="32:45"><expr pos:start="32:40" pos:end="32:45"><operator pos:start="32:40" pos:end="32:40">*</operator><name pos:start="32:41" pos:end="32:43">buf</name><operator pos:start="32:44" pos:end="32:45">++</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else pos:start="33:1" pos:end="33:5">#<cpp:directive pos:start="33:2" pos:end="33:5">else</cpp:directive></cpp:else>
                    <decl_stmt pos:start="34:21" pos:end="34:49"><decl pos:start="34:21" pos:end="34:48"><type pos:start="34:21" pos:end="34:23"><name pos:start="34:21" pos:end="34:23">int</name></type> <name pos:start="34:25" pos:end="34:25">r</name> <init pos:start="34:27" pos:end="34:48">= <expr pos:start="34:29" pos:end="34:48"><name pos:start="34:29" pos:end="34:48"><name pos:start="34:29" pos:end="34:40">gamma_lookup</name><index pos:start="34:41" pos:end="34:48">[<expr pos:start="34:42" pos:end="34:47"><operator pos:start="34:42" pos:end="34:42">*</operator><name pos:start="34:43" pos:end="34:45">buf</name><operator pos:start="34:46" pos:end="34:47">++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt pos:start="35:21" pos:end="35:49"><decl pos:start="35:21" pos:end="35:48"><type pos:start="35:21" pos:end="35:23"><name pos:start="35:21" pos:end="35:23">int</name></type> <name pos:start="35:25" pos:end="35:25">g</name> <init pos:start="35:27" pos:end="35:48">= <expr pos:start="35:29" pos:end="35:48"><name pos:start="35:29" pos:end="35:48"><name pos:start="35:29" pos:end="35:40">gamma_lookup</name><index pos:start="35:41" pos:end="35:48">[<expr pos:start="35:42" pos:end="35:47"><operator pos:start="35:42" pos:end="35:42">*</operator><name pos:start="35:43" pos:end="35:45">buf</name><operator pos:start="35:46" pos:end="35:47">++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt pos:start="36:21" pos:end="38:0"><decl pos:start="36:21" pos:end="36:48"><type pos:start="36:21" pos:end="36:23"><name pos:start="36:21" pos:end="36:23">int</name></type> <name pos:start="36:25" pos:end="36:25">b</name> <init pos:start="36:27" pos:end="36:48">= <expr pos:start="36:29" pos:end="36:48"><name pos:start="36:29" pos:end="36:48"><name pos:start="36:29" pos:end="36:40">gamma_lookup</name><index pos:start="36:41" pos:end="36:48">[<expr pos:start="36:42" pos:end="36:47"><operator pos:start="36:42" pos:end="36:42">*</operator><name pos:start="36:43" pos:end="36:45">buf</name><operator pos:start="36:46" pos:end="36:47">++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
<cpp:endif pos:start="37:1" pos:end="37:6">#<cpp:directive pos:start="37:2" pos:end="37:6">endif</cpp:directive></cpp:endif>
                    <expr_stmt pos:start="38:21" pos:end="38:57"><expr pos:start="38:21" pos:end="38:56"><operator pos:start="38:21" pos:end="38:21">*</operator><name pos:start="38:22" pos:end="38:27">tmpptr</name><operator pos:start="38:28" pos:end="38:29">++</operator> <operator pos:start="38:31" pos:end="38:31">=</operator> <operator pos:start="38:33" pos:end="38:33">(</operator><name pos:start="38:34" pos:end="38:34">r</name> <operator pos:start="38:36" pos:end="38:37">&lt;&lt;</operator> <literal type="number" pos:start="38:39" pos:end="38:40">16</literal><operator pos:start="38:41" pos:end="38:41">)</operator> <operator pos:start="38:43" pos:end="38:43">|</operator> <operator pos:start="38:45" pos:end="38:45">(</operator><name pos:start="38:46" pos:end="38:46">g</name> <operator pos:start="38:48" pos:end="38:49">&lt;&lt;</operator> <literal type="number" pos:start="38:51" pos:end="38:51">8</literal><operator pos:start="38:52" pos:end="38:52">)</operator> <operator pos:start="38:54" pos:end="38:54">|</operator> <name pos:start="38:56" pos:end="38:56">b</name></expr>;</expr_stmt>
                </block_content>}</block></for>
                <expr_stmt pos:start="40:17" pos:end="40:36"><expr pos:start="40:17" pos:end="40:35"><name pos:start="40:17" pos:end="40:33"><name pos:start="40:17" pos:end="40:17">s</name><operator pos:start="40:18" pos:end="40:19">-&gt;</operator><name pos:start="40:20" pos:end="40:33">palettes_count</name></name><operator pos:start="40:34" pos:end="40:35">++</operator></expr>;</expr_stmt>
                <break pos:start="41:17" pos:end="41:22">break;</break>
            <case pos:start="42:13" pos:end="42:26">case <expr pos:start="42:18" pos:end="42:25"><name pos:start="42:18" pos:end="42:25">SHOT_TAG</name></expr>:</case>
                <if_stmt pos:start="43:17" pos:end="44:52"><if pos:start="43:17" pos:end="44:52">if <condition pos:start="43:20" pos:end="43:29">(<expr pos:start="43:21" pos:end="43:28"><name pos:start="43:21" pos:end="43:24">size</name> <operator pos:start="43:26" pos:end="43:26">&lt;</operator> <literal type="number" pos:start="43:28" pos:end="43:28">4</literal></expr>)</condition><block type="pseudo" pos:start="44:17" pos:end="44:52"><block_content pos:start="44:17" pos:end="44:52">
                <expr_stmt pos:start="44:17" pos:end="44:52"><expr pos:start="44:17" pos:end="44:51"><name pos:start="44:17" pos:end="44:23">new_pal</name> <operator pos:start="44:25" pos:end="44:25">=</operator> <call pos:start="44:27" pos:end="44:51"><name pos:start="44:27" pos:end="44:45">bytestream_get_le32</name><argument_list pos:start="44:46" pos:end="44:51">(<argument pos:start="44:47" pos:end="44:50"><expr pos:start="44:47" pos:end="44:50"><operator pos:start="44:47" pos:end="44:47">&amp;</operator><name pos:start="44:48" pos:end="44:50">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <if_stmt pos:start="45:17" pos:end="48:78"><if pos:start="45:17" pos:end="47:17">if <condition pos:start="45:20" pos:end="45:48">(<expr pos:start="45:21" pos:end="45:47"><name pos:start="45:21" pos:end="45:27">new_pal</name> <operator pos:start="45:29" pos:end="45:29">&lt;</operator> <name pos:start="45:31" pos:end="45:47"><name pos:start="45:31" pos:end="45:31">s</name><operator pos:start="45:32" pos:end="45:33">-&gt;</operator><name pos:start="45:34" pos:end="45:47">palettes_count</name></name></expr>)</condition> <block pos:start="45:50" pos:end="47:17">{<block_content pos:start="46:21" pos:end="46:45">
                    <expr_stmt pos:start="46:21" pos:end="46:45"><expr pos:start="46:21" pos:end="46:44"><name pos:start="46:21" pos:end="46:34"><name pos:start="46:21" pos:end="46:21">s</name><operator pos:start="46:22" pos:end="46:23">-&gt;</operator><name pos:start="46:24" pos:end="46:34">cur_palette</name></name> <operator pos:start="46:36" pos:end="46:36">=</operator> <name pos:start="46:38" pos:end="46:44">new_pal</name></expr>;</expr_stmt>
                </block_content>}</block></if> <else pos:start="47:19" pos:end="48:78">else<block type="pseudo" pos:start="48:21" pos:end="48:78"><block_content pos:start="48:21" pos:end="48:78">
                    <expr_stmt pos:start="48:21" pos:end="48:78"><expr pos:start="48:21" pos:end="48:77"><call pos:start="48:21" pos:end="48:77"><name pos:start="48:21" pos:end="48:26">av_log</name><argument_list pos:start="48:27" pos:end="48:77">(<argument pos:start="48:28" pos:end="48:32"><expr pos:start="48:28" pos:end="48:32"><name pos:start="48:28" pos:end="48:32">avctx</name></expr></argument>, <argument pos:start="48:35" pos:end="48:46"><expr pos:start="48:35" pos:end="48:46"><name pos:start="48:35" pos:end="48:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="48:49" pos:end="48:76"><expr pos:start="48:49" pos:end="48:76"><literal type="string" pos:start="48:49" pos:end="48:76">"Invalid palette selected\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
                <break pos:start="49:17" pos:end="49:22">break;</break>
            <case pos:start="50:13" pos:end="50:26">case <expr pos:start="50:18" pos:end="50:25"><name pos:start="50:18" pos:end="50:25">VGA__TAG</name></expr>:</case>
                <break pos:start="51:17" pos:end="51:22">break;</break>
            <default pos:start="52:13" pos:end="52:20">default:</default>
                <expr_stmt pos:start="53:17" pos:end="53:28"><expr pos:start="53:17" pos:end="53:27"><name pos:start="53:17" pos:end="53:19">buf</name> <operator pos:start="53:21" pos:end="53:22">+=</operator> <name pos:start="53:24" pos:end="53:27">size</name></expr>;</expr_stmt>
                <break pos:start="54:17" pos:end="54:22">break;</break>
            </block_content>}</block></switch>
        </block_content>}</block></while>
        <expr_stmt pos:start="57:9" pos:end="57:33"><expr pos:start="57:9" pos:end="57:32"><name pos:start="57:9" pos:end="57:16">buf_size</name> <operator pos:start="57:18" pos:end="57:18">=</operator> <name pos:start="57:20" pos:end="57:26">buf_end</name> <operator pos:start="57:28" pos:end="57:28">-</operator> <name pos:start="57:30" pos:end="57:32">buf</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="59:5" pos:end="62:5"><if pos:start="59:5" pos:end="62:5">if <condition pos:start="59:8" pos:end="59:60">(<expr pos:start="59:9" pos:end="59:59"><operator pos:start="59:9" pos:end="59:9">(</operator><name pos:start="59:10" pos:end="59:12">ret</name> <operator pos:start="59:14" pos:end="59:14">=</operator> <call pos:start="59:16" pos:end="59:58"><name pos:start="59:16" pos:end="59:32"><name pos:start="59:16" pos:end="59:20">avctx</name><operator pos:start="59:21" pos:end="59:22">-&gt;</operator><name pos:start="59:23" pos:end="59:32">get_buffer</name></name><argument_list pos:start="59:33" pos:end="59:58">(<argument pos:start="59:34" pos:end="59:38"><expr pos:start="59:34" pos:end="59:38"><name pos:start="59:34" pos:end="59:38">avctx</name></expr></argument>, <argument pos:start="59:41" pos:end="59:57"><expr pos:start="59:41" pos:end="59:57"><operator pos:start="59:41" pos:end="59:41">&amp;</operator><name pos:start="59:42" pos:end="59:57"><name pos:start="59:42" pos:end="59:42">s</name><operator pos:start="59:43" pos:end="59:44">-&gt;</operator><name pos:start="59:45" pos:end="59:57">current_frame</name></name></expr></argument>)</argument_list></call><operator pos:start="59:59" pos:end="59:59">)</operator></expr>)</condition> <block pos:start="59:62" pos:end="62:5">{<block_content pos:start="60:9" pos:end="61:19">
        <expr_stmt pos:start="60:9" pos:end="60:64"><expr pos:start="60:9" pos:end="60:63"><call pos:start="60:9" pos:end="60:63"><name pos:start="60:9" pos:end="60:14">av_log</name><argument_list pos:start="60:15" pos:end="60:63">(<argument pos:start="60:16" pos:end="60:23"><expr pos:start="60:16" pos:end="60:23"><name pos:start="60:16" pos:end="60:23"><name pos:start="60:16" pos:end="60:16">s</name><operator pos:start="60:17" pos:end="60:18">-&gt;</operator><name pos:start="60:19" pos:end="60:23">avctx</name></name></expr></argument>, <argument pos:start="60:26" pos:end="60:37"><expr pos:start="60:26" pos:end="60:37"><name pos:start="60:26" pos:end="60:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="60:40" pos:end="60:62"><expr pos:start="60:40" pos:end="60:62"><literal type="string" pos:start="60:40" pos:end="60:62">"get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="61:9" pos:end="61:19">return <expr pos:start="61:16" pos:end="61:18"><name pos:start="61:16" pos:end="61:18">ret</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="63:5" pos:end="63:35"><expr pos:start="63:5" pos:end="63:34"><name pos:start="63:5" pos:end="63:30"><name pos:start="63:5" pos:end="63:5">s</name><operator pos:start="63:6" pos:end="63:7">-&gt;</operator><name pos:start="63:8" pos:end="63:20">current_frame</name><operator pos:start="63:21" pos:end="63:21">.</operator><name pos:start="63:22" pos:end="63:30">reference</name></name> <operator pos:start="63:32" pos:end="63:32">=</operator> <literal type="number" pos:start="63:34" pos:end="63:34">3</literal></expr>;</expr_stmt>
    <if_stmt pos:start="64:5" pos:end="65:72"><if pos:start="64:5" pos:end="65:72">if <condition pos:start="64:8" pos:end="64:23">(<expr pos:start="64:9" pos:end="64:22"><operator pos:start="64:9" pos:end="64:9">!</operator><name pos:start="64:10" pos:end="64:22"><name pos:start="64:10" pos:end="64:10">s</name><operator pos:start="64:11" pos:end="64:12">-&gt;</operator><name pos:start="64:13" pos:end="64:22">frame_size</name></name></expr>)</condition><block type="pseudo" pos:start="65:9" pos:end="65:72"><block_content pos:start="65:9" pos:end="65:72">
        <expr_stmt pos:start="65:9" pos:end="65:72"><expr pos:start="65:9" pos:end="65:71"><name pos:start="65:9" pos:end="65:21"><name pos:start="65:9" pos:end="65:9">s</name><operator pos:start="65:10" pos:end="65:11">-&gt;</operator><name pos:start="65:12" pos:end="65:21">frame_size</name></name> <operator pos:start="65:23" pos:end="65:23">=</operator> <name pos:start="65:25" pos:end="65:52"><name pos:start="65:25" pos:end="65:25">s</name><operator pos:start="65:26" pos:end="65:27">-&gt;</operator><name pos:start="65:28" pos:end="65:40">current_frame</name><operator pos:start="65:41" pos:end="65:41">.</operator><name pos:start="65:42" pos:end="65:49">linesize</name><index pos:start="65:50" pos:end="65:52">[<expr pos:start="65:51" pos:end="65:51"><literal type="number" pos:start="65:51" pos:end="65:51">0</literal></expr>]</index></name> <operator pos:start="65:54" pos:end="65:54">*</operator> <name pos:start="65:56" pos:end="65:71"><name pos:start="65:56" pos:end="65:56">s</name><operator pos:start="65:57" pos:end="65:58">-&gt;</operator><name pos:start="65:59" pos:end="65:63">avctx</name><operator pos:start="65:64" pos:end="65:65">-&gt;</operator><name pos:start="65:66" pos:end="65:71">height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt pos:start="66:5" pos:end="66:101"><expr pos:start="66:5" pos:end="66:100"><call pos:start="66:5" pos:end="66:100"><name pos:start="66:5" pos:end="66:10">memcpy</name><argument_list pos:start="66:11" pos:end="66:100">(<argument pos:start="66:12" pos:end="66:35"><expr pos:start="66:12" pos:end="66:35"><name pos:start="66:12" pos:end="66:35"><name pos:start="66:12" pos:end="66:12">s</name><operator pos:start="66:13" pos:end="66:14">-&gt;</operator><name pos:start="66:15" pos:end="66:27">current_frame</name><operator pos:start="66:28" pos:end="66:28">.</operator><name pos:start="66:29" pos:end="66:32">data</name><index pos:start="66:33" pos:end="66:35">[<expr pos:start="66:34" pos:end="66:34"><literal type="number" pos:start="66:34" pos:end="66:34">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="66:38" pos:end="66:83"><expr pos:start="66:38" pos:end="66:83"><name pos:start="66:38" pos:end="66:48"><name pos:start="66:38" pos:end="66:38">s</name><operator pos:start="66:39" pos:end="66:40">-&gt;</operator><name pos:start="66:41" pos:end="66:48">palettes</name></name> <operator pos:start="66:50" pos:end="66:50">+</operator> <name pos:start="66:52" pos:end="66:65"><name pos:start="66:52" pos:end="66:52">s</name><operator pos:start="66:53" pos:end="66:54">-&gt;</operator><name pos:start="66:55" pos:end="66:65">cur_palette</name></name> <operator pos:start="66:67" pos:end="66:67">*</operator> <name pos:start="66:69" pos:end="66:83">AVPALETTE_COUNT</name></expr></argument>, <argument pos:start="66:86" pos:end="66:99"><expr pos:start="66:86" pos:end="66:99"><name pos:start="66:86" pos:end="66:99">AVPALETTE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="67:5" pos:end="67:17"><expr pos:start="67:5" pos:end="67:16"><name pos:start="67:5" pos:end="67:10"><name pos:start="67:5" pos:end="67:5">s</name><operator pos:start="67:6" pos:end="67:7">-&gt;</operator><name pos:start="67:8" pos:end="67:10">buf</name></name> <operator pos:start="67:12" pos:end="67:12">=</operator> <name pos:start="67:14" pos:end="67:16">buf</name></expr>;</expr_stmt>
    <expr_stmt pos:start="68:5" pos:end="68:23"><expr pos:start="68:5" pos:end="68:22"><name pos:start="68:5" pos:end="68:11"><name pos:start="68:5" pos:end="68:5">s</name><operator pos:start="68:6" pos:end="68:7">-&gt;</operator><name pos:start="68:8" pos:end="68:11">size</name></name> <operator pos:start="68:13" pos:end="68:13">=</operator> <name pos:start="68:15" pos:end="68:22">buf_size</name></expr>;</expr_stmt>
    <if_stmt pos:start="69:5" pos:end="72:53"><if pos:start="69:5" pos:end="72:53">if <condition pos:start="69:8" pos:end="69:36">(<expr pos:start="69:9" pos:end="69:35"><call pos:start="69:9" pos:end="69:31"><name pos:start="69:9" pos:end="69:28">xan_wc3_decode_frame</name><argument_list pos:start="69:29" pos:end="69:31">(<argument pos:start="69:30" pos:end="69:30"><expr pos:start="69:30" pos:end="69:30"><name pos:start="69:30" pos:end="69:30">s</name></expr></argument>)</argument_list></call> <operator pos:start="69:33" pos:end="69:33">&lt;</operator> <literal type="number" pos:start="69:35" pos:end="69:35">0</literal></expr>)</condition><block type="pseudo" pos:start="71:5" pos:end="72:53"><block_content pos:start="71:5" pos:end="72:53">
    <comment type="block" pos:start="70:5" pos:end="70:51">/* release the last frame if it is allocated */</comment>
    <if_stmt pos:start="71:5" pos:end="72:53"><if pos:start="71:5" pos:end="72:53">if <condition pos:start="71:8" pos:end="71:30">(<expr pos:start="71:9" pos:end="71:29"><name pos:start="71:9" pos:end="71:29"><name pos:start="71:9" pos:end="71:9">s</name><operator pos:start="71:10" pos:end="71:11">-&gt;</operator><name pos:start="71:12" pos:end="71:21">last_frame</name><operator pos:start="71:22" pos:end="71:22">.</operator><name pos:start="71:23" pos:end="71:26">data</name><index pos:start="71:27" pos:end="71:29">[<expr pos:start="71:28" pos:end="71:28"><literal type="number" pos:start="71:28" pos:end="71:28">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="72:9" pos:end="72:53"><block_content pos:start="72:9" pos:end="72:53">
        <expr_stmt pos:start="72:9" pos:end="72:53"><expr pos:start="72:9" pos:end="72:52"><call pos:start="72:9" pos:end="72:52"><name pos:start="72:9" pos:end="72:29"><name pos:start="72:9" pos:end="72:13">avctx</name><operator pos:start="72:14" pos:end="72:15">-&gt;</operator><name pos:start="72:16" pos:end="72:29">release_buffer</name></name><argument_list pos:start="72:30" pos:end="72:52">(<argument pos:start="72:31" pos:end="72:35"><expr pos:start="72:31" pos:end="72:35"><name pos:start="72:31" pos:end="72:35">avctx</name></expr></argument>, <argument pos:start="72:38" pos:end="72:51"><expr pos:start="72:38" pos:end="72:51"><operator pos:start="72:38" pos:end="72:38">&amp;</operator><name pos:start="72:39" pos:end="72:51"><name pos:start="72:39" pos:end="72:39">s</name><operator pos:start="72:40" pos:end="72:41">-&gt;</operator><name pos:start="72:42" pos:end="72:51">last_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
    <expr_stmt pos:start="73:5" pos:end="73:33"><expr pos:start="73:5" pos:end="73:32"><operator pos:start="73:5" pos:end="73:5">*</operator><name pos:start="73:6" pos:end="73:14">data_size</name> <operator pos:start="73:16" pos:end="73:16">=</operator> <sizeof pos:start="73:18" pos:end="73:32">sizeof<argument_list pos:start="73:24" pos:end="73:32">(<argument pos:start="73:25" pos:end="73:31"><expr pos:start="73:25" pos:end="73:31"><name pos:start="73:25" pos:end="73:31">AVFrame</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt pos:start="74:5" pos:end="74:39"><expr pos:start="74:5" pos:end="74:38"><operator pos:start="74:5" pos:end="74:5">*</operator><operator pos:start="74:6" pos:end="74:6">(</operator><name pos:start="74:7" pos:end="74:13">AVFrame</name><operator pos:start="74:14" pos:end="74:14">*</operator><operator pos:start="74:15" pos:end="74:15">)</operator><name pos:start="74:16" pos:end="74:19">data</name> <operator pos:start="74:21" pos:end="74:21">=</operator> <name pos:start="74:23" pos:end="74:38"><name pos:start="74:23" pos:end="74:23">s</name><operator pos:start="74:24" pos:end="74:25">-&gt;</operator><name pos:start="74:26" pos:end="74:38">current_frame</name></name></expr>;</expr_stmt>
    <comment type="block" pos:start="75:5" pos:end="75:24">/* shuffle frames */</comment>
    <expr_stmt pos:start="76:5" pos:end="76:53"><expr pos:start="76:5" pos:end="76:52"><call pos:start="76:5" pos:end="76:52"><name pos:start="76:5" pos:end="76:10">FFSWAP</name><argument_list pos:start="76:11" pos:end="76:52">(<argument pos:start="76:12" pos:end="76:18"><expr pos:start="76:12" pos:end="76:18"><name pos:start="76:12" pos:end="76:18">AVFrame</name></expr></argument>, <argument pos:start="76:21" pos:end="76:36"><expr pos:start="76:21" pos:end="76:36"><name pos:start="76:21" pos:end="76:36"><name pos:start="76:21" pos:end="76:21">s</name><operator pos:start="76:22" pos:end="76:23">-&gt;</operator><name pos:start="76:24" pos:end="76:36">current_frame</name></name></expr></argument>, <argument pos:start="76:39" pos:end="76:51"><expr pos:start="76:39" pos:end="76:51"><name pos:start="76:39" pos:end="76:51"><name pos:start="76:39" pos:end="76:39">s</name><operator pos:start="76:40" pos:end="76:41">-&gt;</operator><name pos:start="76:42" pos:end="76:51">last_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="77:5" pos:end="77:63">/* always report that the buffer was completely consumed */</comment>
    <return pos:start="78:5" pos:end="78:20">return <expr pos:start="78:12" pos:end="78:19"><name pos:start="78:12" pos:end="78:19">buf_size</name></expr>;</return>
</block_content>}</block></function></unit>
