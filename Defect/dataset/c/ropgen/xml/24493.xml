<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24493.c" pos:tabs="8"><function pos:start="1:1" pos:end="101:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:34">qcow2_invalidate_cache</name><parameter_list pos:start="1:35" pos:end="1:70">(<parameter pos:start="1:36" pos:end="1:55"><decl pos:start="1:36" pos:end="1:55"><type pos:start="1:36" pos:end="1:55"><name pos:start="1:36" pos:end="1:51">BlockDriverState</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:55">bs</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:69"><decl pos:start="1:58" pos:end="1:69"><type pos:start="1:58" pos:end="1:69"><name pos:start="1:58" pos:end="1:62">Error</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier><modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:69">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="101:1">{<block_content pos:start="5:5" pos:end="99:5">

    <decl_stmt pos:start="5:5" pos:end="5:34"><decl pos:start="5:5" pos:end="5:33"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">BDRVQcowState</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:20">s</name> <init pos:start="5:22" pos:end="5:33">= <expr pos:start="5:24" pos:end="5:33"><name pos:start="5:24" pos:end="5:33"><name pos:start="5:24" pos:end="5:25">bs</name><operator pos:start="5:26" pos:end="5:27">-&gt;</operator><name pos:start="5:28" pos:end="5:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:13">flags</name> <init pos:start="7:15" pos:end="7:24">= <expr pos:start="7:17" pos:end="7:24"><name pos:start="7:17" pos:end="7:24"><name pos:start="7:17" pos:end="7:17">s</name><operator pos:start="7:18" pos:end="7:19">-&gt;</operator><name pos:start="7:20" pos:end="7:24">flags</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">AES_KEY</name></type> <name pos:start="9:13" pos:end="9:27">aes_encrypt_key</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">AES_KEY</name></type> <name pos:start="11:13" pos:end="11:27">aes_decrypt_key</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:30"><decl pos:start="13:5" pos:end="13:29"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:25">crypt_method</name> <init pos:start="13:27" pos:end="13:29">= <expr pos:start="13:29" pos:end="13:29"><literal type="number" pos:start="13:29" pos:end="13:29">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:9">QDict</name> <modifier pos:start="15:11" pos:end="15:11">*</modifier></type><name pos:start="15:12" pos:end="15:18">options</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:28"><decl pos:start="17:5" pos:end="17:27"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:9">Error</name> <modifier pos:start="17:11" pos:end="17:11">*</modifier></type><name pos:start="17:12" pos:end="17:20">local_err</name> <init pos:start="17:22" pos:end="17:27">= <expr pos:start="17:24" pos:end="17:27"><name pos:start="17:24" pos:end="17:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:12"><decl pos:start="19:5" pos:end="19:11"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:11">ret</name></decl>;</decl_stmt>



    <comment type="block" pos:start="23:5" pos:end="29:7">/*

     * Backing files are read-only which makes all of their metadata immutable,

     * that means we don't have to worry about reopening them here.

     */</comment>



    <if_stmt pos:start="33:5" pos:end="41:5"><if pos:start="33:5" pos:end="41:5">if <condition pos:start="33:8" pos:end="33:24">(<expr pos:start="33:9" pos:end="33:23"><name pos:start="33:9" pos:end="33:23"><name pos:start="33:9" pos:end="33:9">s</name><operator pos:start="33:10" pos:end="33:11">-&gt;</operator><name pos:start="33:12" pos:end="33:23">crypt_method</name></name></expr>)</condition> <block pos:start="33:26" pos:end="41:5">{<block_content pos:start="35:9" pos:end="39:79">

        <expr_stmt pos:start="35:9" pos:end="35:39"><expr pos:start="35:9" pos:end="35:38"><name pos:start="35:9" pos:end="35:20">crypt_method</name> <operator pos:start="35:22" pos:end="35:22">=</operator> <name pos:start="35:24" pos:end="35:38"><name pos:start="35:24" pos:end="35:24">s</name><operator pos:start="35:25" pos:end="35:26">-&gt;</operator><name pos:start="35:27" pos:end="35:38">crypt_method</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:79"><expr pos:start="37:9" pos:end="37:78"><call pos:start="37:9" pos:end="37:78"><name pos:start="37:9" pos:end="37:14">memcpy</name><argument_list pos:start="37:15" pos:end="37:78">(<argument pos:start="37:16" pos:end="37:31"><expr pos:start="37:16" pos:end="37:31"><operator pos:start="37:16" pos:end="37:16">&amp;</operator><name pos:start="37:17" pos:end="37:31">aes_encrypt_key</name></expr></argument>, <argument pos:start="37:34" pos:end="37:52"><expr pos:start="37:34" pos:end="37:52"><operator pos:start="37:34" pos:end="37:34">&amp;</operator><name pos:start="37:35" pos:end="37:52"><name pos:start="37:35" pos:end="37:35">s</name><operator pos:start="37:36" pos:end="37:37">-&gt;</operator><name pos:start="37:38" pos:end="37:52">aes_encrypt_key</name></name></expr></argument>, <argument pos:start="37:55" pos:end="37:77"><expr pos:start="37:55" pos:end="37:77"><sizeof pos:start="37:55" pos:end="37:77">sizeof<argument_list pos:start="37:61" pos:end="37:77">(<argument pos:start="37:62" pos:end="37:76"><expr pos:start="37:62" pos:end="37:76"><name pos:start="37:62" pos:end="37:76">aes_encrypt_key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:79"><expr pos:start="39:9" pos:end="39:78"><call pos:start="39:9" pos:end="39:78"><name pos:start="39:9" pos:end="39:14">memcpy</name><argument_list pos:start="39:15" pos:end="39:78">(<argument pos:start="39:16" pos:end="39:31"><expr pos:start="39:16" pos:end="39:31"><operator pos:start="39:16" pos:end="39:16">&amp;</operator><name pos:start="39:17" pos:end="39:31">aes_decrypt_key</name></expr></argument>, <argument pos:start="39:34" pos:end="39:52"><expr pos:start="39:34" pos:end="39:52"><operator pos:start="39:34" pos:end="39:34">&amp;</operator><name pos:start="39:35" pos:end="39:52"><name pos:start="39:35" pos:end="39:35">s</name><operator pos:start="39:36" pos:end="39:37">-&gt;</operator><name pos:start="39:38" pos:end="39:52">aes_decrypt_key</name></name></expr></argument>, <argument pos:start="39:55" pos:end="39:77"><expr pos:start="39:55" pos:end="39:77"><sizeof pos:start="39:55" pos:end="39:77">sizeof<argument_list pos:start="39:61" pos:end="39:77">(<argument pos:start="39:62" pos:end="39:76"><expr pos:start="39:62" pos:end="39:76"><name pos:start="39:62" pos:end="39:76">aes_decrypt_key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:20"><expr pos:start="45:5" pos:end="45:19"><call pos:start="45:5" pos:end="45:19"><name pos:start="45:5" pos:end="45:15">qcow2_close</name><argument_list pos:start="45:16" pos:end="45:19">(<argument pos:start="45:17" pos:end="45:18"><expr pos:start="45:17" pos:end="45:18"><name pos:start="45:17" pos:end="45:18">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:48"><expr pos:start="49:5" pos:end="49:47"><call pos:start="49:5" pos:end="49:47"><name pos:start="49:5" pos:end="49:25">bdrv_invalidate_cache</name><argument_list pos:start="49:26" pos:end="49:47">(<argument pos:start="49:27" pos:end="49:34"><expr pos:start="49:27" pos:end="49:34"><name pos:start="49:27" pos:end="49:34"><name pos:start="49:27" pos:end="49:28">bs</name><operator pos:start="49:29" pos:end="49:30">-&gt;</operator><name pos:start="49:31" pos:end="49:34">file</name></name></expr></argument>, <argument pos:start="49:37" pos:end="49:46"><expr pos:start="49:37" pos:end="49:46"><operator pos:start="49:37" pos:end="49:37">&amp;</operator><name pos:start="49:38" pos:end="49:46">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="51:5" pos:end="57:5"><if pos:start="51:5" pos:end="57:5">if <condition pos:start="51:8" pos:end="51:18">(<expr pos:start="51:9" pos:end="51:17"><name pos:start="51:9" pos:end="51:17">local_err</name></expr>)</condition> <block pos:start="51:20" pos:end="57:5">{<block_content pos:start="53:9" pos:end="55:15">

        <expr_stmt pos:start="53:9" pos:end="53:41"><expr pos:start="53:9" pos:end="53:40"><call pos:start="53:9" pos:end="53:40"><name pos:start="53:9" pos:end="53:23">error_propagate</name><argument_list pos:start="53:24" pos:end="53:40">(<argument pos:start="53:25" pos:end="53:28"><expr pos:start="53:25" pos:end="53:28"><name pos:start="53:25" pos:end="53:28">errp</name></expr></argument>, <argument pos:start="53:31" pos:end="53:39"><expr pos:start="53:31" pos:end="53:39"><name pos:start="53:31" pos:end="53:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="55:9" pos:end="55:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:40"><expr pos:start="61:5" pos:end="61:39"><call pos:start="61:5" pos:end="61:39"><name pos:start="61:5" pos:end="61:10">memset</name><argument_list pos:start="61:11" pos:end="61:39">(<argument pos:start="61:12" pos:end="61:12"><expr pos:start="61:12" pos:end="61:12"><name pos:start="61:12" pos:end="61:12">s</name></expr></argument>, <argument pos:start="61:15" pos:end="61:15"><expr pos:start="61:15" pos:end="61:15"><literal type="number" pos:start="61:15" pos:end="61:15">0</literal></expr></argument>, <argument pos:start="61:18" pos:end="61:38"><expr pos:start="61:18" pos:end="61:38"><sizeof pos:start="61:18" pos:end="61:38">sizeof<argument_list pos:start="61:24" pos:end="61:38">(<argument pos:start="61:25" pos:end="61:37"><expr pos:start="61:25" pos:end="61:37"><name pos:start="61:25" pos:end="61:37">BDRVQcowState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:47"><expr pos:start="63:5" pos:end="63:46"><name pos:start="63:5" pos:end="63:11">options</name> <operator pos:start="63:13" pos:end="63:13">=</operator> <call pos:start="63:15" pos:end="63:46"><name pos:start="63:15" pos:end="63:33">qdict_clone_shallow</name><argument_list pos:start="63:34" pos:end="63:46">(<argument pos:start="63:35" pos:end="63:45"><expr pos:start="63:35" pos:end="63:45"><name pos:start="63:35" pos:end="63:45"><name pos:start="63:35" pos:end="63:36">bs</name><operator pos:start="63:37" pos:end="63:38">-&gt;</operator><name pos:start="63:39" pos:end="63:45">options</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:53"><expr pos:start="67:5" pos:end="67:52"><name pos:start="67:5" pos:end="67:7">ret</name> <operator pos:start="67:9" pos:end="67:9">=</operator> <call pos:start="67:11" pos:end="67:52"><name pos:start="67:11" pos:end="67:20">qcow2_open</name><argument_list pos:start="67:21" pos:end="67:52">(<argument pos:start="67:22" pos:end="67:23"><expr pos:start="67:22" pos:end="67:23"><name pos:start="67:22" pos:end="67:23">bs</name></expr></argument>, <argument pos:start="67:26" pos:end="67:32"><expr pos:start="67:26" pos:end="67:32"><name pos:start="67:26" pos:end="67:32">options</name></expr></argument>, <argument pos:start="67:35" pos:end="67:39"><expr pos:start="67:35" pos:end="67:39"><name pos:start="67:35" pos:end="67:39">flags</name></expr></argument>, <argument pos:start="67:42" pos:end="67:51"><expr pos:start="67:42" pos:end="67:51"><operator pos:start="67:42" pos:end="67:42">&amp;</operator><name pos:start="67:43" pos:end="67:51">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:21"><expr pos:start="69:5" pos:end="69:20"><call pos:start="69:5" pos:end="69:20"><name pos:start="69:5" pos:end="69:11">QDECREF</name><argument_list pos:start="69:12" pos:end="69:20">(<argument pos:start="69:13" pos:end="69:19"><expr pos:start="69:13" pos:end="69:19"><name pos:start="69:13" pos:end="69:19">options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="71:5" pos:end="87:5"><if pos:start="71:5" pos:end="81:5">if <condition pos:start="71:8" pos:end="71:18">(<expr pos:start="71:9" pos:end="71:17"><name pos:start="71:9" pos:end="71:17">local_err</name></expr>)</condition> <block pos:start="71:20" pos:end="81:5">{<block_content pos:start="73:9" pos:end="79:15">

        <expr_stmt pos:start="73:9" pos:end="75:48"><expr pos:start="73:9" pos:end="75:47"><call pos:start="73:9" pos:end="75:47"><name pos:start="73:9" pos:end="73:18">error_setg</name><argument_list pos:start="73:19" pos:end="75:47">(<argument pos:start="73:20" pos:end="73:23"><expr pos:start="73:20" pos:end="73:23"><name pos:start="73:20" pos:end="73:23">errp</name></expr></argument>, <argument pos:start="73:26" pos:end="73:59"><expr pos:start="73:26" pos:end="73:59"><literal type="string" pos:start="73:26" pos:end="73:59">"Could not reopen qcow2 layer: %s"</literal></expr></argument>,

                   <argument pos:start="75:20" pos:end="75:46"><expr pos:start="75:20" pos:end="75:46"><call pos:start="75:20" pos:end="75:46"><name pos:start="75:20" pos:end="75:35">error_get_pretty</name><argument_list pos:start="75:36" pos:end="75:46">(<argument pos:start="75:37" pos:end="75:45"><expr pos:start="75:37" pos:end="75:45"><name pos:start="75:37" pos:end="75:45">local_err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:30"><expr pos:start="77:9" pos:end="77:29"><call pos:start="77:9" pos:end="77:29"><name pos:start="77:9" pos:end="77:18">error_free</name><argument_list pos:start="77:19" pos:end="77:29">(<argument pos:start="77:20" pos:end="77:28"><expr pos:start="77:20" pos:end="77:28"><name pos:start="77:20" pos:end="77:28">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="79:9" pos:end="79:15">return;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="81:7" pos:end="87:5">else if <condition pos:start="81:15" pos:end="81:23">(<expr pos:start="81:16" pos:end="81:22"><name pos:start="81:16" pos:end="81:18">ret</name> <operator pos:start="81:20" pos:end="81:20">&lt;</operator> <literal type="number" pos:start="81:22" pos:end="81:22">0</literal></expr>)</condition> <block pos:start="81:25" pos:end="87:5">{<block_content pos:start="83:9" pos:end="85:15">

        <expr_stmt pos:start="83:9" pos:end="83:69"><expr pos:start="83:9" pos:end="83:68"><call pos:start="83:9" pos:end="83:68"><name pos:start="83:9" pos:end="83:24">error_setg_errno</name><argument_list pos:start="83:25" pos:end="83:68">(<argument pos:start="83:26" pos:end="83:29"><expr pos:start="83:26" pos:end="83:29"><name pos:start="83:26" pos:end="83:29">errp</name></expr></argument>, <argument pos:start="83:32" pos:end="83:35"><expr pos:start="83:32" pos:end="83:35"><operator pos:start="83:32" pos:end="83:32">-</operator><name pos:start="83:33" pos:end="83:35">ret</name></expr></argument>, <argument pos:start="83:38" pos:end="83:67"><expr pos:start="83:38" pos:end="83:67"><literal type="string" pos:start="83:38" pos:end="83:67">"Could not reopen qcow2 layer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="85:9" pos:end="85:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="91:5" pos:end="99:5"><if pos:start="91:5" pos:end="99:5">if <condition pos:start="91:8" pos:end="91:21">(<expr pos:start="91:9" pos:end="91:20"><name pos:start="91:9" pos:end="91:20">crypt_method</name></expr>)</condition> <block pos:start="91:23" pos:end="99:5">{<block_content pos:start="93:9" pos:end="97:79">

        <expr_stmt pos:start="93:9" pos:end="93:39"><expr pos:start="93:9" pos:end="93:38"><name pos:start="93:9" pos:end="93:23"><name pos:start="93:9" pos:end="93:9">s</name><operator pos:start="93:10" pos:end="93:11">-&gt;</operator><name pos:start="93:12" pos:end="93:23">crypt_method</name></name> <operator pos:start="93:25" pos:end="93:25">=</operator> <name pos:start="93:27" pos:end="93:38">crypt_method</name></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:79"><expr pos:start="95:9" pos:end="95:78"><call pos:start="95:9" pos:end="95:78"><name pos:start="95:9" pos:end="95:14">memcpy</name><argument_list pos:start="95:15" pos:end="95:78">(<argument pos:start="95:16" pos:end="95:34"><expr pos:start="95:16" pos:end="95:34"><operator pos:start="95:16" pos:end="95:16">&amp;</operator><name pos:start="95:17" pos:end="95:34"><name pos:start="95:17" pos:end="95:17">s</name><operator pos:start="95:18" pos:end="95:19">-&gt;</operator><name pos:start="95:20" pos:end="95:34">aes_encrypt_key</name></name></expr></argument>, <argument pos:start="95:37" pos:end="95:52"><expr pos:start="95:37" pos:end="95:52"><operator pos:start="95:37" pos:end="95:37">&amp;</operator><name pos:start="95:38" pos:end="95:52">aes_encrypt_key</name></expr></argument>, <argument pos:start="95:55" pos:end="95:77"><expr pos:start="95:55" pos:end="95:77"><sizeof pos:start="95:55" pos:end="95:77">sizeof<argument_list pos:start="95:61" pos:end="95:77">(<argument pos:start="95:62" pos:end="95:76"><expr pos:start="95:62" pos:end="95:76"><name pos:start="95:62" pos:end="95:76">aes_encrypt_key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:79"><expr pos:start="97:9" pos:end="97:78"><call pos:start="97:9" pos:end="97:78"><name pos:start="97:9" pos:end="97:14">memcpy</name><argument_list pos:start="97:15" pos:end="97:78">(<argument pos:start="97:16" pos:end="97:34"><expr pos:start="97:16" pos:end="97:34"><operator pos:start="97:16" pos:end="97:16">&amp;</operator><name pos:start="97:17" pos:end="97:34"><name pos:start="97:17" pos:end="97:17">s</name><operator pos:start="97:18" pos:end="97:19">-&gt;</operator><name pos:start="97:20" pos:end="97:34">aes_decrypt_key</name></name></expr></argument>, <argument pos:start="97:37" pos:end="97:52"><expr pos:start="97:37" pos:end="97:52"><operator pos:start="97:37" pos:end="97:37">&amp;</operator><name pos:start="97:38" pos:end="97:52">aes_decrypt_key</name></expr></argument>, <argument pos:start="97:55" pos:end="97:77"><expr pos:start="97:55" pos:end="97:77"><sizeof pos:start="97:55" pos:end="97:77">sizeof<argument_list pos:start="97:61" pos:end="97:77">(<argument pos:start="97:62" pos:end="97:76"><expr pos:start="97:62" pos:end="97:76"><name pos:start="97:62" pos:end="97:76">aes_decrypt_key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
