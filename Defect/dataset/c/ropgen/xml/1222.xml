<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1222.c" pos:tabs="8"><function pos:start="1:1" pos:end="411:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:22">vfio_initfn</name><parameter_list pos:start="1:23" pos:end="1:39">(<parameter pos:start="1:24" pos:end="1:38"><decl pos:start="1:24" pos:end="1:38"><type pos:start="1:24" pos:end="1:34"><name pos:start="1:24" pos:end="1:32">PCIDevice</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:38">pdev</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="411:1">{<block_content pos:start="5:5" pos:end="409:15">

    <decl_stmt pos:start="5:5" pos:end="5:63"><decl pos:start="5:5" pos:end="5:62"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">VFIOPCIDevice</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:23">vdev</name> <init pos:start="5:25" pos:end="5:62">= <expr pos:start="5:27" pos:end="5:62"><call pos:start="5:27" pos:end="5:62"><name pos:start="5:27" pos:end="5:35">DO_UPCAST</name><argument_list pos:start="5:36" pos:end="5:62">(<argument pos:start="5:37" pos:end="5:49"><expr pos:start="5:37" pos:end="5:49"><name pos:start="5:37" pos:end="5:49">VFIOPCIDevice</name></expr></argument>, <argument pos:start="5:52" pos:end="5:55"><expr pos:start="5:52" pos:end="5:55"><name pos:start="5:52" pos:end="5:55">pdev</name></expr></argument>, <argument pos:start="5:58" pos:end="5:61"><expr pos:start="5:58" pos:end="5:61"><name pos:start="5:58" pos:end="5:61">pdev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:30"><decl pos:start="7:5" pos:end="7:29"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">VFIODevice</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:29">vbasedev_iter</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:15"><name pos:start="9:5" pos:end="9:13">VFIOGroup</name> <modifier pos:start="9:15" pos:end="9:15">*</modifier></type><name pos:start="9:16" pos:end="9:20">group</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:65"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">char</name></type> <name pos:start="11:10" pos:end="11:23"><name pos:start="11:10" pos:end="11:13">path</name><index pos:start="11:14" pos:end="11:23">[<expr pos:start="11:15" pos:end="11:22"><name pos:start="11:15" pos:end="11:22">PATH_MAX</name></expr>]</index></name></decl>, <decl pos:start="11:26" pos:end="11:51"><type ref="prev" pos:start="11:5" pos:end="11:8"/><name pos:start="11:26" pos:end="11:51"><name pos:start="11:26" pos:end="11:41">iommu_group_path</name><index pos:start="11:42" pos:end="11:51">[<expr pos:start="11:43" pos:end="11:50"><name pos:start="11:43" pos:end="11:50">PATH_MAX</name></expr>]</index></name></decl>, <decl pos:start="11:54" pos:end="11:64"><type ref="prev" pos:start="11:5" pos:end="11:8"><modifier pos:start="11:54" pos:end="11:54">*</modifier></type><name pos:start="11:55" pos:end="11:64">group_name</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:16"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">ssize_t</name></type> <name pos:start="13:13" pos:end="13:15">len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:15"><name pos:start="15:5" pos:end="15:15"><name pos:start="15:5" pos:end="15:10">struct</name> <name pos:start="15:12" pos:end="15:15">stat</name></name></type> <name pos:start="15:17" pos:end="15:18">st</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:16"><decl pos:start="17:5" pos:end="17:15"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:15">groupid</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:12"><decl pos:start="19:5" pos:end="19:11"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:11">ret</name></decl>;</decl_stmt>



    <comment type="block" pos:start="23:5" pos:end="23:43">/* Check that the host device exists */</comment>

    <expr_stmt pos:start="25:5" pos:end="31:34"><expr pos:start="25:5" pos:end="31:33"><call pos:start="25:5" pos:end="31:33"><name pos:start="25:5" pos:end="25:12">snprintf</name><argument_list pos:start="25:13" pos:end="31:33">(<argument pos:start="25:14" pos:end="25:17"><expr pos:start="25:14" pos:end="25:17"><name pos:start="25:14" pos:end="25:17">path</name></expr></argument>, <argument pos:start="25:20" pos:end="25:31"><expr pos:start="25:20" pos:end="25:31"><sizeof pos:start="25:20" pos:end="25:31">sizeof<argument_list pos:start="25:26" pos:end="25:31">(<argument pos:start="25:27" pos:end="25:30"><expr pos:start="25:27" pos:end="25:30"><name pos:start="25:27" pos:end="25:30">path</name></expr></argument>)</argument_list></sizeof></expr></argument>,

             <argument pos:start="27:14" pos:end="27:56"><expr pos:start="27:14" pos:end="27:56"><literal type="string" pos:start="27:14" pos:end="27:56">"/sys/bus/pci/devices/%04x:%02x:%02x.%01x/"</literal></expr></argument>,

             <argument pos:start="29:14" pos:end="29:30"><expr pos:start="29:14" pos:end="29:30"><name pos:start="29:14" pos:end="29:30"><name pos:start="29:14" pos:end="29:17">vdev</name><operator pos:start="29:18" pos:end="29:19">-&gt;</operator><name pos:start="29:20" pos:end="29:23">host</name><operator pos:start="29:24" pos:end="29:24">.</operator><name pos:start="29:25" pos:end="29:30">domain</name></name></expr></argument>, <argument pos:start="29:33" pos:end="29:46"><expr pos:start="29:33" pos:end="29:46"><name pos:start="29:33" pos:end="29:46"><name pos:start="29:33" pos:end="29:36">vdev</name><operator pos:start="29:37" pos:end="29:38">-&gt;</operator><name pos:start="29:39" pos:end="29:42">host</name><operator pos:start="29:43" pos:end="29:43">.</operator><name pos:start="29:44" pos:end="29:46">bus</name></name></expr></argument>, <argument pos:start="29:49" pos:end="29:63"><expr pos:start="29:49" pos:end="29:63"><name pos:start="29:49" pos:end="29:63"><name pos:start="29:49" pos:end="29:52">vdev</name><operator pos:start="29:53" pos:end="29:54">-&gt;</operator><name pos:start="29:55" pos:end="29:58">host</name><operator pos:start="29:59" pos:end="29:59">.</operator><name pos:start="29:60" pos:end="29:63">slot</name></name></expr></argument>,

             <argument pos:start="31:14" pos:end="31:32"><expr pos:start="31:14" pos:end="31:32"><name pos:start="31:14" pos:end="31:32"><name pos:start="31:14" pos:end="31:17">vdev</name><operator pos:start="31:18" pos:end="31:19">-&gt;</operator><name pos:start="31:20" pos:end="31:23">host</name><operator pos:start="31:24" pos:end="31:24">.</operator><name pos:start="31:25" pos:end="31:32">function</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="39:5"><if pos:start="33:5" pos:end="39:5">if <condition pos:start="33:8" pos:end="33:28">(<expr pos:start="33:9" pos:end="33:27"><call pos:start="33:9" pos:end="33:23"><name pos:start="33:9" pos:end="33:12">stat</name><argument_list pos:start="33:13" pos:end="33:23">(<argument pos:start="33:14" pos:end="33:17"><expr pos:start="33:14" pos:end="33:17"><name pos:start="33:14" pos:end="33:17">path</name></expr></argument>, <argument pos:start="33:20" pos:end="33:22"><expr pos:start="33:20" pos:end="33:22"><operator pos:start="33:20" pos:end="33:20">&amp;</operator><name pos:start="33:21" pos:end="33:22">st</name></expr></argument>)</argument_list></call> <operator pos:start="33:25" pos:end="33:25">&lt;</operator> <literal type="number" pos:start="33:27" pos:end="33:27">0</literal></expr>)</condition> <block pos:start="33:30" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:22">

        <expr_stmt pos:start="35:9" pos:end="35:67"><expr pos:start="35:9" pos:end="35:66"><call pos:start="35:9" pos:end="35:66"><name pos:start="35:9" pos:end="35:20">error_report</name><argument_list pos:start="35:21" pos:end="35:66">(<argument pos:start="35:22" pos:end="35:59"><expr pos:start="35:22" pos:end="35:59"><literal type="string" pos:start="35:22" pos:end="35:59">"vfio: error: no such host device: %s"</literal></expr></argument>, <argument pos:start="35:62" pos:end="35:65"><expr pos:start="35:62" pos:end="35:65"><name pos:start="35:62" pos:end="35:65">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="37:9" pos:end="37:22">return <expr pos:start="37:16" pos:end="37:21"><operator pos:start="37:16" pos:end="37:16">-</operator><name pos:start="37:17" pos:end="37:21">errno</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:39"><expr pos:start="43:5" pos:end="43:38"><name pos:start="43:5" pos:end="43:22"><name pos:start="43:5" pos:end="43:8">vdev</name><operator pos:start="43:9" pos:end="43:10">-&gt;</operator><name pos:start="43:11" pos:end="43:18">vbasedev</name><operator pos:start="43:19" pos:end="43:19">.</operator><name pos:start="43:20" pos:end="43:22">ops</name></name> <operator pos:start="43:24" pos:end="43:24">=</operator> <operator pos:start="43:26" pos:end="43:26">&amp;</operator><name pos:start="43:27" pos:end="43:38">vfio_pci_ops</name></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:47"><expr pos:start="47:5" pos:end="47:46"><name pos:start="47:5" pos:end="47:23"><name pos:start="47:5" pos:end="47:8">vdev</name><operator pos:start="47:9" pos:end="47:10">-&gt;</operator><name pos:start="47:11" pos:end="47:18">vbasedev</name><operator pos:start="47:19" pos:end="47:19">.</operator><name pos:start="47:20" pos:end="47:23">type</name></name> <operator pos:start="47:25" pos:end="47:25">=</operator> <name pos:start="47:27" pos:end="47:46">VFIO_DEVICE_TYPE_PCI</name></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="53:80"><expr pos:start="49:5" pos:end="53:79"><name pos:start="49:5" pos:end="49:23"><name pos:start="49:5" pos:end="49:8">vdev</name><operator pos:start="49:9" pos:end="49:10">-&gt;</operator><name pos:start="49:11" pos:end="49:18">vbasedev</name><operator pos:start="49:19" pos:end="49:19">.</operator><name pos:start="49:20" pos:end="49:23">name</name></name> <operator pos:start="49:25" pos:end="49:25">=</operator> <call pos:start="49:27" pos:end="53:79"><name pos:start="49:27" pos:end="49:41">g_strdup_printf</name><argument_list pos:start="49:42" pos:end="53:79">(<argument pos:start="49:43" pos:end="49:63"><expr pos:start="49:43" pos:end="49:63"><literal type="string" pos:start="49:43" pos:end="49:63">"%04x:%02x:%02x.%01x"</literal></expr></argument>,

                                          <argument pos:start="51:43" pos:end="51:59"><expr pos:start="51:43" pos:end="51:59"><name pos:start="51:43" pos:end="51:59"><name pos:start="51:43" pos:end="51:46">vdev</name><operator pos:start="51:47" pos:end="51:48">-&gt;</operator><name pos:start="51:49" pos:end="51:52">host</name><operator pos:start="51:53" pos:end="51:53">.</operator><name pos:start="51:54" pos:end="51:59">domain</name></name></expr></argument>, <argument pos:start="51:62" pos:end="51:75"><expr pos:start="51:62" pos:end="51:75"><name pos:start="51:62" pos:end="51:75"><name pos:start="51:62" pos:end="51:65">vdev</name><operator pos:start="51:66" pos:end="51:67">-&gt;</operator><name pos:start="51:68" pos:end="51:71">host</name><operator pos:start="51:72" pos:end="51:72">.</operator><name pos:start="51:73" pos:end="51:75">bus</name></name></expr></argument>,

                                          <argument pos:start="53:43" pos:end="53:57"><expr pos:start="53:43" pos:end="53:57"><name pos:start="53:43" pos:end="53:57"><name pos:start="53:43" pos:end="53:46">vdev</name><operator pos:start="53:47" pos:end="53:48">-&gt;</operator><name pos:start="53:49" pos:end="53:52">host</name><operator pos:start="53:53" pos:end="53:53">.</operator><name pos:start="53:54" pos:end="53:57">slot</name></name></expr></argument>, <argument pos:start="53:60" pos:end="53:78"><expr pos:start="53:60" pos:end="53:78"><name pos:start="53:60" pos:end="53:78"><name pos:start="53:60" pos:end="53:63">vdev</name><operator pos:start="53:64" pos:end="53:65">-&gt;</operator><name pos:start="53:66" pos:end="53:69">host</name><operator pos:start="53:70" pos:end="53:70">.</operator><name pos:start="53:71" pos:end="53:78">function</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:66"><expr pos:start="57:5" pos:end="57:65"><call pos:start="57:5" pos:end="57:65"><name pos:start="57:5" pos:end="57:11">strncat</name><argument_list pos:start="57:12" pos:end="57:65">(<argument pos:start="57:13" pos:end="57:16"><expr pos:start="57:13" pos:end="57:16"><name pos:start="57:13" pos:end="57:16">path</name></expr></argument>, <argument pos:start="57:19" pos:end="57:31"><expr pos:start="57:19" pos:end="57:31"><literal type="string" pos:start="57:19" pos:end="57:31">"iommu_group"</literal></expr></argument>, <argument pos:start="57:34" pos:end="57:64"><expr pos:start="57:34" pos:end="57:64"><sizeof pos:start="57:34" pos:end="57:45">sizeof<argument_list pos:start="57:40" pos:end="57:45">(<argument pos:start="57:41" pos:end="57:44"><expr pos:start="57:41" pos:end="57:44"><name pos:start="57:41" pos:end="57:44">path</name></expr></argument>)</argument_list></sizeof> <operator pos:start="57:47" pos:end="57:47">-</operator> <call pos:start="57:49" pos:end="57:60"><name pos:start="57:49" pos:end="57:54">strlen</name><argument_list pos:start="57:55" pos:end="57:60">(<argument pos:start="57:56" pos:end="57:59"><expr pos:start="57:56" pos:end="57:59"><name pos:start="57:56" pos:end="57:59">path</name></expr></argument>)</argument_list></call> <operator pos:start="57:62" pos:end="57:62">-</operator> <literal type="number" pos:start="57:64" pos:end="57:64">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:57"><expr pos:start="61:5" pos:end="61:56"><name pos:start="61:5" pos:end="61:7">len</name> <operator pos:start="61:9" pos:end="61:9">=</operator> <call pos:start="61:11" pos:end="61:56"><name pos:start="61:11" pos:end="61:18">readlink</name><argument_list pos:start="61:19" pos:end="61:56">(<argument pos:start="61:20" pos:end="61:23"><expr pos:start="61:20" pos:end="61:23"><name pos:start="61:20" pos:end="61:23">path</name></expr></argument>, <argument pos:start="61:26" pos:end="61:41"><expr pos:start="61:26" pos:end="61:41"><name pos:start="61:26" pos:end="61:41">iommu_group_path</name></expr></argument>, <argument pos:start="61:44" pos:end="61:55"><expr pos:start="61:44" pos:end="61:55"><sizeof pos:start="61:44" pos:end="61:55">sizeof<argument_list pos:start="61:50" pos:end="61:55">(<argument pos:start="61:51" pos:end="61:54"><expr pos:start="61:51" pos:end="61:54"><name pos:start="61:51" pos:end="61:54">path</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="63:5" pos:end="69:5"><if pos:start="63:5" pos:end="69:5">if <condition pos:start="63:8" pos:end="63:40">(<expr pos:start="63:9" pos:end="63:39"><name pos:start="63:9" pos:end="63:11">len</name> <operator pos:start="63:13" pos:end="63:14">&lt;=</operator> <literal type="number" pos:start="63:16" pos:end="63:16">0</literal> <operator pos:start="63:18" pos:end="63:19">||</operator> <name pos:start="63:21" pos:end="63:23">len</name> <operator pos:start="63:25" pos:end="63:26">&gt;=</operator> <sizeof pos:start="63:28" pos:end="63:39">sizeof<argument_list pos:start="63:34" pos:end="63:39">(<argument pos:start="63:35" pos:end="63:38"><expr pos:start="63:35" pos:end="63:38"><name pos:start="63:35" pos:end="63:38">path</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="63:42" pos:end="69:5">{<block_content pos:start="65:9" pos:end="67:48">

        <expr_stmt pos:start="65:9" pos:end="65:62"><expr pos:start="65:9" pos:end="65:61"><call pos:start="65:9" pos:end="65:61"><name pos:start="65:9" pos:end="65:20">error_report</name><argument_list pos:start="65:21" pos:end="65:61">(<argument pos:start="65:22" pos:end="65:60"><expr pos:start="65:22" pos:end="65:60"><literal type="string" pos:start="65:22" pos:end="65:60">"vfio: error no iommu_group for device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="67:9" pos:end="67:48">return <expr pos:start="67:16" pos:end="67:47"><ternary pos:start="67:16" pos:end="67:47"><condition pos:start="67:16" pos:end="67:24"><expr pos:start="67:16" pos:end="67:22"><name pos:start="67:16" pos:end="67:18">len</name> <operator pos:start="67:20" pos:end="67:20">&lt;</operator> <literal type="number" pos:start="67:22" pos:end="67:22">0</literal></expr> ?</condition><then pos:start="67:26" pos:end="67:31"> <expr pos:start="67:26" pos:end="67:31"><operator pos:start="67:26" pos:end="67:26">-</operator><name pos:start="67:27" pos:end="67:31">errno</name></expr> </then><else pos:start="67:33" pos:end="67:47">: <expr pos:start="67:35" pos:end="67:47"><operator pos:start="67:35" pos:end="67:35">-</operator><name pos:start="67:36" pos:end="67:47">ENAMETOOLONG</name></expr></else></ternary></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:30"><expr pos:start="73:5" pos:end="73:29"><name pos:start="73:5" pos:end="73:25"><name pos:start="73:5" pos:end="73:20">iommu_group_path</name><index pos:start="73:21" pos:end="73:25">[<expr pos:start="73:22" pos:end="73:24"><name pos:start="73:22" pos:end="73:24">len</name></expr>]</index></name> <operator pos:start="73:27" pos:end="73:27">=</operator> <literal type="number" pos:start="73:29" pos:end="73:29">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:44"><expr pos:start="75:5" pos:end="75:43"><name pos:start="75:5" pos:end="75:14">group_name</name> <operator pos:start="75:16" pos:end="75:16">=</operator> <call pos:start="75:18" pos:end="75:43"><name pos:start="75:18" pos:end="75:25">basename</name><argument_list pos:start="75:26" pos:end="75:43">(<argument pos:start="75:27" pos:end="75:42"><expr pos:start="75:27" pos:end="75:42"><name pos:start="75:27" pos:end="75:42">iommu_group_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="79:5" pos:end="85:5"><if pos:start="79:5" pos:end="85:5">if <condition pos:start="79:8" pos:end="79:48">(<expr pos:start="79:9" pos:end="79:47"><call pos:start="79:9" pos:end="79:42"><name pos:start="79:9" pos:end="79:14">sscanf</name><argument_list pos:start="79:15" pos:end="79:42">(<argument pos:start="79:16" pos:end="79:25"><expr pos:start="79:16" pos:end="79:25"><name pos:start="79:16" pos:end="79:25">group_name</name></expr></argument>, <argument pos:start="79:28" pos:end="79:31"><expr pos:start="79:28" pos:end="79:31"><literal type="string" pos:start="79:28" pos:end="79:31">"%d"</literal></expr></argument>, <argument pos:start="79:34" pos:end="79:41"><expr pos:start="79:34" pos:end="79:41"><operator pos:start="79:34" pos:end="79:34">&amp;</operator><name pos:start="79:35" pos:end="79:41">groupid</name></expr></argument>)</argument_list></call> <operator pos:start="79:44" pos:end="79:45">!=</operator> <literal type="number" pos:start="79:47" pos:end="79:47">1</literal></expr>)</condition> <block pos:start="79:50" pos:end="85:5">{<block_content pos:start="81:9" pos:end="83:22">

        <expr_stmt pos:start="81:9" pos:end="81:57"><expr pos:start="81:9" pos:end="81:56"><call pos:start="81:9" pos:end="81:56"><name pos:start="81:9" pos:end="81:20">error_report</name><argument_list pos:start="81:21" pos:end="81:56">(<argument pos:start="81:22" pos:end="81:49"><expr pos:start="81:22" pos:end="81:49"><literal type="string" pos:start="81:22" pos:end="81:49">"vfio: error reading %s: %m"</literal></expr></argument>, <argument pos:start="81:52" pos:end="81:55"><expr pos:start="81:52" pos:end="81:55"><name pos:start="81:52" pos:end="81:55">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="83:9" pos:end="83:22">return <expr pos:start="83:16" pos:end="83:21"><operator pos:start="83:16" pos:end="83:16">-</operator><name pos:start="83:17" pos:end="83:21">errno</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="89:5" pos:end="89:52"><expr pos:start="89:5" pos:end="89:51"><call pos:start="89:5" pos:end="89:51"><name pos:start="89:5" pos:end="89:21">trace_vfio_initfn</name><argument_list pos:start="89:22" pos:end="89:51">(<argument pos:start="89:23" pos:end="89:41"><expr pos:start="89:23" pos:end="89:41"><name pos:start="89:23" pos:end="89:41"><name pos:start="89:23" pos:end="89:26">vdev</name><operator pos:start="89:27" pos:end="89:28">-&gt;</operator><name pos:start="89:29" pos:end="89:36">vbasedev</name><operator pos:start="89:37" pos:end="89:37">.</operator><name pos:start="89:38" pos:end="89:41">name</name></name></expr></argument>, <argument pos:start="89:44" pos:end="89:50"><expr pos:start="89:44" pos:end="89:50"><name pos:start="89:44" pos:end="89:50">groupid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="93:5" pos:end="93:74"><expr pos:start="93:5" pos:end="93:73"><name pos:start="93:5" pos:end="93:9">group</name> <operator pos:start="93:11" pos:end="93:11">=</operator> <call pos:start="93:13" pos:end="93:73"><name pos:start="93:13" pos:end="93:26">vfio_get_group</name><argument_list pos:start="93:27" pos:end="93:73">(<argument pos:start="93:28" pos:end="93:34"><expr pos:start="93:28" pos:end="93:34"><name pos:start="93:28" pos:end="93:34">groupid</name></expr></argument>, <argument pos:start="93:37" pos:end="93:72"><expr pos:start="93:37" pos:end="93:72"><call pos:start="93:37" pos:end="93:72"><name pos:start="93:37" pos:end="93:66">pci_device_iommu_address_space</name><argument_list pos:start="93:67" pos:end="93:72">(<argument pos:start="93:68" pos:end="93:71"><expr pos:start="93:68" pos:end="93:71"><name pos:start="93:68" pos:end="93:71">pdev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="95:5" pos:end="101:5"><if pos:start="95:5" pos:end="101:5">if <condition pos:start="95:8" pos:end="95:15">(<expr pos:start="95:9" pos:end="95:14"><operator pos:start="95:9" pos:end="95:9">!</operator><name pos:start="95:10" pos:end="95:14">group</name></expr>)</condition> <block pos:start="95:17" pos:end="101:5">{<block_content pos:start="97:9" pos:end="99:23">

        <expr_stmt pos:start="97:9" pos:end="97:62"><expr pos:start="97:9" pos:end="97:61"><call pos:start="97:9" pos:end="97:61"><name pos:start="97:9" pos:end="97:20">error_report</name><argument_list pos:start="97:21" pos:end="97:61">(<argument pos:start="97:22" pos:end="97:51"><expr pos:start="97:22" pos:end="97:51"><literal type="string" pos:start="97:22" pos:end="97:51">"vfio: failed to get group %d"</literal></expr></argument>, <argument pos:start="97:54" pos:end="97:60"><expr pos:start="97:54" pos:end="97:60"><name pos:start="97:54" pos:end="97:60">groupid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="99:9" pos:end="99:23">return <expr pos:start="99:16" pos:end="99:22"><operator pos:start="99:16" pos:end="99:16">-</operator><name pos:start="99:17" pos:end="99:22">ENOENT</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="105:5" pos:end="109:33"><expr pos:start="105:5" pos:end="109:32"><call pos:start="105:5" pos:end="109:32"><name pos:start="105:5" pos:end="105:12">snprintf</name><argument_list pos:start="105:13" pos:end="109:32">(<argument pos:start="105:14" pos:end="105:17"><expr pos:start="105:14" pos:end="105:17"><name pos:start="105:14" pos:end="105:17">path</name></expr></argument>, <argument pos:start="105:20" pos:end="105:31"><expr pos:start="105:20" pos:end="105:31"><sizeof pos:start="105:20" pos:end="105:31">sizeof<argument_list pos:start="105:26" pos:end="105:31">(<argument pos:start="105:27" pos:end="105:30"><expr pos:start="105:27" pos:end="105:30"><name pos:start="105:27" pos:end="105:30">path</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="105:34" pos:end="105:54"><expr pos:start="105:34" pos:end="105:54"><literal type="string" pos:start="105:34" pos:end="105:54">"%04x:%02x:%02x.%01x"</literal></expr></argument>,

            <argument pos:start="107:13" pos:end="107:29"><expr pos:start="107:13" pos:end="107:29"><name pos:start="107:13" pos:end="107:29"><name pos:start="107:13" pos:end="107:16">vdev</name><operator pos:start="107:17" pos:end="107:18">-&gt;</operator><name pos:start="107:19" pos:end="107:22">host</name><operator pos:start="107:23" pos:end="107:23">.</operator><name pos:start="107:24" pos:end="107:29">domain</name></name></expr></argument>, <argument pos:start="107:32" pos:end="107:45"><expr pos:start="107:32" pos:end="107:45"><name pos:start="107:32" pos:end="107:45"><name pos:start="107:32" pos:end="107:35">vdev</name><operator pos:start="107:36" pos:end="107:37">-&gt;</operator><name pos:start="107:38" pos:end="107:41">host</name><operator pos:start="107:42" pos:end="107:42">.</operator><name pos:start="107:43" pos:end="107:45">bus</name></name></expr></argument>, <argument pos:start="107:48" pos:end="107:62"><expr pos:start="107:48" pos:end="107:62"><name pos:start="107:48" pos:end="107:62"><name pos:start="107:48" pos:end="107:51">vdev</name><operator pos:start="107:52" pos:end="107:53">-&gt;</operator><name pos:start="107:54" pos:end="107:57">host</name><operator pos:start="107:58" pos:end="107:58">.</operator><name pos:start="107:59" pos:end="107:62">slot</name></name></expr></argument>,

            <argument pos:start="109:13" pos:end="109:31"><expr pos:start="109:13" pos:end="109:31"><name pos:start="109:13" pos:end="109:31"><name pos:start="109:13" pos:end="109:16">vdev</name><operator pos:start="109:17" pos:end="109:18">-&gt;</operator><name pos:start="109:19" pos:end="109:22">host</name><operator pos:start="109:23" pos:end="109:23">.</operator><name pos:start="109:24" pos:end="109:31">function</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <macro pos:start="113:5" pos:end="113:59"><name pos:start="113:5" pos:end="113:17">QLIST_FOREACH</name><argument_list pos:start="113:18" pos:end="113:59">(<argument pos:start="113:19" pos:end="113:31">vbasedev_iter</argument>, <argument pos:start="113:34" pos:end="113:52">&amp;group-&gt;device_list</argument>, <argument pos:start="113:55" pos:end="113:58">next</argument>)</argument_list></macro> <block pos:start="113:61" pos:end="125:5">{<block_content pos:start="115:9" pos:end="123:9">

        <if_stmt pos:start="115:9" pos:end="123:9"><if pos:start="115:9" pos:end="123:9">if <condition pos:start="115:12" pos:end="115:66">(<expr pos:start="115:13" pos:end="115:65"><call pos:start="115:13" pos:end="115:60"><name pos:start="115:13" pos:end="115:18">strcmp</name><argument_list pos:start="115:19" pos:end="115:60">(<argument pos:start="115:20" pos:end="115:38"><expr pos:start="115:20" pos:end="115:38"><name pos:start="115:20" pos:end="115:38"><name pos:start="115:20" pos:end="115:32">vbasedev_iter</name><operator pos:start="115:33" pos:end="115:34">-&gt;</operator><name pos:start="115:35" pos:end="115:38">name</name></name></expr></argument>, <argument pos:start="115:41" pos:end="115:59"><expr pos:start="115:41" pos:end="115:59"><name pos:start="115:41" pos:end="115:59"><name pos:start="115:41" pos:end="115:44">vdev</name><operator pos:start="115:45" pos:end="115:46">-&gt;</operator><name pos:start="115:47" pos:end="115:54">vbasedev</name><operator pos:start="115:55" pos:end="115:55">.</operator><name pos:start="115:56" pos:end="115:59">name</name></name></expr></argument>)</argument_list></call> <operator pos:start="115:62" pos:end="115:63">==</operator> <literal type="number" pos:start="115:65" pos:end="115:65">0</literal></expr>)</condition> <block pos:start="115:68" pos:end="123:9">{<block_content pos:start="117:13" pos:end="121:26">

            <expr_stmt pos:start="117:13" pos:end="117:77"><expr pos:start="117:13" pos:end="117:76"><call pos:start="117:13" pos:end="117:76"><name pos:start="117:13" pos:end="117:24">error_report</name><argument_list pos:start="117:25" pos:end="117:76">(<argument pos:start="117:26" pos:end="117:69"><expr pos:start="117:26" pos:end="117:69"><literal type="string" pos:start="117:26" pos:end="117:69">"vfio: error: device %s is already attached"</literal></expr></argument>, <argument pos:start="117:72" pos:end="117:75"><expr pos:start="117:72" pos:end="117:75"><name pos:start="117:72" pos:end="117:75">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:34"><expr pos:start="119:13" pos:end="119:33"><call pos:start="119:13" pos:end="119:33"><name pos:start="119:13" pos:end="119:26">vfio_put_group</name><argument_list pos:start="119:27" pos:end="119:33">(<argument pos:start="119:28" pos:end="119:32"><expr pos:start="119:28" pos:end="119:32"><name pos:start="119:28" pos:end="119:32">group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="121:13" pos:end="121:26">return <expr pos:start="121:20" pos:end="121:25"><operator pos:start="121:20" pos:end="121:20">-</operator><name pos:start="121:21" pos:end="121:25">EBUSY</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block>



    <expr_stmt pos:start="129:5" pos:end="129:56"><expr pos:start="129:5" pos:end="129:55"><name pos:start="129:5" pos:end="129:7">ret</name> <operator pos:start="129:9" pos:end="129:9">=</operator> <call pos:start="129:11" pos:end="129:55"><name pos:start="129:11" pos:end="129:25">vfio_get_device</name><argument_list pos:start="129:26" pos:end="129:55">(<argument pos:start="129:27" pos:end="129:31"><expr pos:start="129:27" pos:end="129:31"><name pos:start="129:27" pos:end="129:31">group</name></expr></argument>, <argument pos:start="129:34" pos:end="129:37"><expr pos:start="129:34" pos:end="129:37"><name pos:start="129:34" pos:end="129:37">path</name></expr></argument>, <argument pos:start="129:40" pos:end="129:54"><expr pos:start="129:40" pos:end="129:54"><operator pos:start="129:40" pos:end="129:40">&amp;</operator><name pos:start="129:41" pos:end="129:54"><name pos:start="129:41" pos:end="129:44">vdev</name><operator pos:start="129:45" pos:end="129:46">-&gt;</operator><name pos:start="129:47" pos:end="129:54">vbasedev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="131:5" pos:end="139:5"><if pos:start="131:5" pos:end="139:5">if <condition pos:start="131:8" pos:end="131:12">(<expr pos:start="131:9" pos:end="131:11"><name pos:start="131:9" pos:end="131:11">ret</name></expr>)</condition> <block pos:start="131:14" pos:end="139:5">{<block_content pos:start="133:9" pos:end="137:19">

        <expr_stmt pos:start="133:9" pos:end="133:60"><expr pos:start="133:9" pos:end="133:59"><call pos:start="133:9" pos:end="133:59"><name pos:start="133:9" pos:end="133:20">error_report</name><argument_list pos:start="133:21" pos:end="133:59">(<argument pos:start="133:22" pos:end="133:52"><expr pos:start="133:22" pos:end="133:52"><literal type="string" pos:start="133:22" pos:end="133:52">"vfio: failed to get device %s"</literal></expr></argument>, <argument pos:start="133:55" pos:end="133:58"><expr pos:start="133:55" pos:end="133:58"><name pos:start="133:55" pos:end="133:58">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:30"><expr pos:start="135:9" pos:end="135:29"><call pos:start="135:9" pos:end="135:29"><name pos:start="135:9" pos:end="135:22">vfio_put_group</name><argument_list pos:start="135:23" pos:end="135:29">(<argument pos:start="135:24" pos:end="135:28"><expr pos:start="135:24" pos:end="135:28"><name pos:start="135:24" pos:end="135:28">group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="137:9" pos:end="137:19">return <expr pos:start="137:16" pos:end="137:18"><name pos:start="137:16" pos:end="137:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="143:5" pos:end="143:37"><expr pos:start="143:5" pos:end="143:36"><name pos:start="143:5" pos:end="143:7">ret</name> <operator pos:start="143:9" pos:end="143:9">=</operator> <call pos:start="143:11" pos:end="143:36"><name pos:start="143:11" pos:end="143:30">vfio_populate_device</name><argument_list pos:start="143:31" pos:end="143:36">(<argument pos:start="143:32" pos:end="143:35"><expr pos:start="143:32" pos:end="143:35"><name pos:start="143:32" pos:end="143:35">vdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="145:5" pos:end="149:5"><if pos:start="145:5" pos:end="149:5">if <condition pos:start="145:8" pos:end="145:12">(<expr pos:start="145:9" pos:end="145:11"><name pos:start="145:9" pos:end="145:11">ret</name></expr>)</condition> <block pos:start="145:14" pos:end="149:5">{<block_content pos:start="147:9" pos:end="147:19">

        <return pos:start="147:9" pos:end="147:19">return <expr pos:start="147:16" pos:end="147:18"><name pos:start="147:16" pos:end="147:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="153:5" pos:end="153:36">/* Get a copy of config space */</comment>

    <expr_stmt pos:start="155:5" pos:end="159:37"><expr pos:start="155:5" pos:end="159:36"><name pos:start="155:5" pos:end="155:7">ret</name> <operator pos:start="155:9" pos:end="155:9">=</operator> <call pos:start="155:11" pos:end="159:36"><name pos:start="155:11" pos:end="155:15">pread</name><argument_list pos:start="155:16" pos:end="159:36">(<argument pos:start="155:17" pos:end="155:33"><expr pos:start="155:17" pos:end="155:33"><name pos:start="155:17" pos:end="155:33"><name pos:start="155:17" pos:end="155:20">vdev</name><operator pos:start="155:21" pos:end="155:22">-&gt;</operator><name pos:start="155:23" pos:end="155:30">vbasedev</name><operator pos:start="155:31" pos:end="155:31">.</operator><name pos:start="155:32" pos:end="155:33">fd</name></name></expr></argument>, <argument pos:start="155:36" pos:end="155:52"><expr pos:start="155:36" pos:end="155:52"><name pos:start="155:36" pos:end="155:52"><name pos:start="155:36" pos:end="155:39">vdev</name><operator pos:start="155:40" pos:end="155:41">-&gt;</operator><name pos:start="155:42" pos:end="155:45">pdev</name><operator pos:start="155:46" pos:end="155:46">.</operator><name pos:start="155:47" pos:end="155:52">config</name></name></expr></argument>,

                <argument pos:start="157:17" pos:end="157:68"><expr pos:start="157:17" pos:end="157:68"><call pos:start="157:17" pos:end="157:68"><name pos:start="157:17" pos:end="157:19">MIN</name><argument_list pos:start="157:20" pos:end="157:68">(<argument pos:start="157:21" pos:end="157:48"><expr pos:start="157:21" pos:end="157:48"><call pos:start="157:21" pos:end="157:48"><name pos:start="157:21" pos:end="157:35">pci_config_size</name><argument_list pos:start="157:36" pos:end="157:48">(<argument pos:start="157:37" pos:end="157:47"><expr pos:start="157:37" pos:end="157:47"><operator pos:start="157:37" pos:end="157:37">&amp;</operator><name pos:start="157:38" pos:end="157:47"><name pos:start="157:38" pos:end="157:41">vdev</name><operator pos:start="157:42" pos:end="157:43">-&gt;</operator><name pos:start="157:44" pos:end="157:47">pdev</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="157:51" pos:end="157:67"><expr pos:start="157:51" pos:end="157:67"><name pos:start="157:51" pos:end="157:67"><name pos:start="157:51" pos:end="157:54">vdev</name><operator pos:start="157:55" pos:end="157:56">-&gt;</operator><name pos:start="157:57" pos:end="157:67">config_size</name></name></expr></argument>)</argument_list></call></expr></argument>,

                <argument pos:start="159:17" pos:end="159:35"><expr pos:start="159:17" pos:end="159:35"><name pos:start="159:17" pos:end="159:35"><name pos:start="159:17" pos:end="159:20">vdev</name><operator pos:start="159:21" pos:end="159:22">-&gt;</operator><name pos:start="159:23" pos:end="159:35">config_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="161:5" pos:end="169:5"><if pos:start="161:5" pos:end="169:5">if <condition pos:start="161:8" pos:end="161:72">(<expr pos:start="161:9" pos:end="161:71"><name pos:start="161:9" pos:end="161:11">ret</name> <operator pos:start="161:13" pos:end="161:13">&lt;</operator> <operator pos:start="161:15" pos:end="161:15">(</operator><name pos:start="161:16" pos:end="161:18">int</name><operator pos:start="161:19" pos:end="161:19">)</operator><call pos:start="161:20" pos:end="161:71"><name pos:start="161:20" pos:end="161:22">MIN</name><argument_list pos:start="161:23" pos:end="161:71">(<argument pos:start="161:24" pos:end="161:51"><expr pos:start="161:24" pos:end="161:51"><call pos:start="161:24" pos:end="161:51"><name pos:start="161:24" pos:end="161:38">pci_config_size</name><argument_list pos:start="161:39" pos:end="161:51">(<argument pos:start="161:40" pos:end="161:50"><expr pos:start="161:40" pos:end="161:50"><operator pos:start="161:40" pos:end="161:40">&amp;</operator><name pos:start="161:41" pos:end="161:50"><name pos:start="161:41" pos:end="161:44">vdev</name><operator pos:start="161:45" pos:end="161:46">-&gt;</operator><name pos:start="161:47" pos:end="161:50">pdev</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="161:54" pos:end="161:70"><expr pos:start="161:54" pos:end="161:70"><name pos:start="161:54" pos:end="161:70"><name pos:start="161:54" pos:end="161:57">vdev</name><operator pos:start="161:58" pos:end="161:59">-&gt;</operator><name pos:start="161:60" pos:end="161:70">config_size</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="161:74" pos:end="169:5">{<block_content pos:start="163:9" pos:end="167:19">

        <expr_stmt pos:start="163:9" pos:end="163:41"><expr pos:start="163:9" pos:end="163:40"><name pos:start="163:9" pos:end="163:11">ret</name> <operator pos:start="163:13" pos:end="163:13">=</operator> <ternary pos:start="163:15" pos:end="163:40"><condition pos:start="163:15" pos:end="163:23"><expr pos:start="163:15" pos:end="163:21"><name pos:start="163:15" pos:end="163:17">ret</name> <operator pos:start="163:19" pos:end="163:19">&lt;</operator> <literal type="number" pos:start="163:21" pos:end="163:21">0</literal></expr> ?</condition><then pos:start="163:25" pos:end="163:30"> <expr pos:start="163:25" pos:end="163:30"><operator pos:start="163:25" pos:end="163:25">-</operator><name pos:start="163:26" pos:end="163:30">errno</name></expr> </then><else pos:start="163:32" pos:end="163:40">: <expr pos:start="163:34" pos:end="163:40"><operator pos:start="163:34" pos:end="163:34">-</operator><name pos:start="163:35" pos:end="163:40">EFAULT</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="165:9" pos:end="165:65"><expr pos:start="165:9" pos:end="165:64"><call pos:start="165:9" pos:end="165:64"><name pos:start="165:9" pos:end="165:20">error_report</name><argument_list pos:start="165:21" pos:end="165:64">(<argument pos:start="165:22" pos:end="165:63"><expr pos:start="165:22" pos:end="165:63"><literal type="string" pos:start="165:22" pos:end="165:63">"vfio: Failed to read device config space"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="167:9" pos:end="167:19">return <expr pos:start="167:16" pos:end="167:18"><name pos:start="167:16" pos:end="167:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="173:5" pos:end="173:67">/* vfio emulates a lot for us, but some bits need extra love */</comment>

    <expr_stmt pos:start="175:5" pos:end="175:62"><expr pos:start="175:5" pos:end="175:61"><name pos:start="175:5" pos:end="175:30"><name pos:start="175:5" pos:end="175:8">vdev</name><operator pos:start="175:9" pos:end="175:10">-&gt;</operator><name pos:start="175:11" pos:end="175:30">emulated_config_bits</name></name> <operator pos:start="175:32" pos:end="175:32">=</operator> <call pos:start="175:34" pos:end="175:61"><name pos:start="175:34" pos:end="175:42">g_malloc0</name><argument_list pos:start="175:43" pos:end="175:61">(<argument pos:start="175:44" pos:end="175:60"><expr pos:start="175:44" pos:end="175:60"><name pos:start="175:44" pos:end="175:60"><name pos:start="175:44" pos:end="175:47">vdev</name><operator pos:start="175:48" pos:end="175:49">-&gt;</operator><name pos:start="175:50" pos:end="175:60">config_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="179:5" pos:end="179:50">/* QEMU can choose to expose the ROM or not */</comment>

    <expr_stmt pos:start="181:5" pos:end="181:66"><expr pos:start="181:5" pos:end="181:65"><call pos:start="181:5" pos:end="181:65"><name pos:start="181:5" pos:end="181:10">memset</name><argument_list pos:start="181:11" pos:end="181:65">(<argument pos:start="181:12" pos:end="181:55"><expr pos:start="181:12" pos:end="181:55"><name pos:start="181:12" pos:end="181:37"><name pos:start="181:12" pos:end="181:15">vdev</name><operator pos:start="181:16" pos:end="181:17">-&gt;</operator><name pos:start="181:18" pos:end="181:37">emulated_config_bits</name></name> <operator pos:start="181:39" pos:end="181:39">+</operator> <name pos:start="181:41" pos:end="181:55">PCI_ROM_ADDRESS</name></expr></argument>, <argument pos:start="181:58" pos:end="181:61"><expr pos:start="181:58" pos:end="181:61"><literal type="number" pos:start="181:58" pos:end="181:61">0xff</literal></expr></argument>, <argument pos:start="181:64" pos:end="181:64"><expr pos:start="181:64" pos:end="181:64"><literal type="number" pos:start="181:64" pos:end="181:64">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="185:5" pos:end="193:7">/*

     * The PCI spec reserves vendor ID 0xffff as an invalid value.  The

     * device ID is managed by the vendor and need only be a 16-bit value.

     * Allow any 16-bit value for subsystem so they can be hidden or changed.

     */</comment>

    <if_stmt pos:start="195:5" pos:end="213:5"><if pos:start="195:5" pos:end="209:5">if <condition pos:start="195:8" pos:end="195:38">(<expr pos:start="195:9" pos:end="195:37"><name pos:start="195:9" pos:end="195:23"><name pos:start="195:9" pos:end="195:12">vdev</name><operator pos:start="195:13" pos:end="195:14">-&gt;</operator><name pos:start="195:15" pos:end="195:23">vendor_id</name></name> <operator pos:start="195:25" pos:end="195:26">!=</operator> <name pos:start="195:28" pos:end="195:37">PCI_ANY_ID</name></expr>)</condition> <block pos:start="195:40" pos:end="209:5">{<block_content pos:start="197:9" pos:end="207:80">

        <if_stmt pos:start="197:9" pos:end="203:9"><if pos:start="197:9" pos:end="203:9">if <condition pos:start="197:12" pos:end="197:38">(<expr pos:start="197:13" pos:end="197:37"><name pos:start="197:13" pos:end="197:27"><name pos:start="197:13" pos:end="197:16">vdev</name><operator pos:start="197:17" pos:end="197:18">-&gt;</operator><name pos:start="197:19" pos:end="197:27">vendor_id</name></name> <operator pos:start="197:29" pos:end="197:30">&gt;=</operator> <literal type="number" pos:start="197:32" pos:end="197:37">0xffff</literal></expr>)</condition> <block pos:start="197:40" pos:end="203:9">{<block_content pos:start="199:13" pos:end="201:27">

            <expr_stmt pos:start="199:13" pos:end="199:65"><expr pos:start="199:13" pos:end="199:64"><call pos:start="199:13" pos:end="199:64"><name pos:start="199:13" pos:end="199:24">error_report</name><argument_list pos:start="199:25" pos:end="199:64">(<argument pos:start="199:26" pos:end="199:63"><expr pos:start="199:26" pos:end="199:63"><literal type="string" pos:start="199:26" pos:end="199:63">"vfio: Invalid PCI vendor ID provided"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="201:13" pos:end="201:27">return <expr pos:start="201:20" pos:end="201:26"><operator pos:start="201:20" pos:end="201:20">-</operator><name pos:start="201:21" pos:end="201:26">EINVAL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="205:9" pos:end="205:73"><expr pos:start="205:9" pos:end="205:72"><call pos:start="205:9" pos:end="205:72"><name pos:start="205:9" pos:end="205:30">vfio_add_emulated_word</name><argument_list pos:start="205:31" pos:end="205:72">(<argument pos:start="205:32" pos:end="205:35"><expr pos:start="205:32" pos:end="205:35"><name pos:start="205:32" pos:end="205:35">vdev</name></expr></argument>, <argument pos:start="205:38" pos:end="205:50"><expr pos:start="205:38" pos:end="205:50"><name pos:start="205:38" pos:end="205:50">PCI_VENDOR_ID</name></expr></argument>, <argument pos:start="205:53" pos:end="205:67"><expr pos:start="205:53" pos:end="205:67"><name pos:start="205:53" pos:end="205:67"><name pos:start="205:53" pos:end="205:56">vdev</name><operator pos:start="205:57" pos:end="205:58">-&gt;</operator><name pos:start="205:59" pos:end="205:67">vendor_id</name></name></expr></argument>, <argument pos:start="205:70" pos:end="205:71"><expr pos:start="205:70" pos:end="205:71"><operator pos:start="205:70" pos:end="205:70">~</operator><literal type="number" pos:start="205:71" pos:end="205:71">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="207:9" pos:end="207:80"><expr pos:start="207:9" pos:end="207:79"><call pos:start="207:9" pos:end="207:79"><name pos:start="207:9" pos:end="207:41">trace_vfio_pci_emulated_vendor_id</name><argument_list pos:start="207:42" pos:end="207:79">(<argument pos:start="207:43" pos:end="207:61"><expr pos:start="207:43" pos:end="207:61"><name pos:start="207:43" pos:end="207:61"><name pos:start="207:43" pos:end="207:46">vdev</name><operator pos:start="207:47" pos:end="207:48">-&gt;</operator><name pos:start="207:49" pos:end="207:56">vbasedev</name><operator pos:start="207:57" pos:end="207:57">.</operator><name pos:start="207:58" pos:end="207:61">name</name></name></expr></argument>, <argument pos:start="207:64" pos:end="207:78"><expr pos:start="207:64" pos:end="207:78"><name pos:start="207:64" pos:end="207:78"><name pos:start="207:64" pos:end="207:67">vdev</name><operator pos:start="207:68" pos:end="207:69">-&gt;</operator><name pos:start="207:70" pos:end="207:78">vendor_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="209:7" pos:end="213:5">else <block pos:start="209:12" pos:end="213:5">{<block_content pos:start="211:9" pos:end="211:69">

        <expr_stmt pos:start="211:9" pos:end="211:69"><expr pos:start="211:9" pos:end="211:68"><name pos:start="211:9" pos:end="211:23"><name pos:start="211:9" pos:end="211:12">vdev</name><operator pos:start="211:13" pos:end="211:14">-&gt;</operator><name pos:start="211:15" pos:end="211:23">vendor_id</name></name> <operator pos:start="211:25" pos:end="211:25">=</operator> <call pos:start="211:27" pos:end="211:68"><name pos:start="211:27" pos:end="211:38">pci_get_word</name><argument_list pos:start="211:39" pos:end="211:68">(<argument pos:start="211:40" pos:end="211:67"><expr pos:start="211:40" pos:end="211:67"><name pos:start="211:40" pos:end="211:51"><name pos:start="211:40" pos:end="211:43">pdev</name><operator pos:start="211:44" pos:end="211:45">-&gt;</operator><name pos:start="211:46" pos:end="211:51">config</name></name> <operator pos:start="211:53" pos:end="211:53">+</operator> <name pos:start="211:55" pos:end="211:67">PCI_VENDOR_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="217:5" pos:end="235:5"><if pos:start="217:5" pos:end="231:5">if <condition pos:start="217:8" pos:end="217:38">(<expr pos:start="217:9" pos:end="217:37"><name pos:start="217:9" pos:end="217:23"><name pos:start="217:9" pos:end="217:12">vdev</name><operator pos:start="217:13" pos:end="217:14">-&gt;</operator><name pos:start="217:15" pos:end="217:23">device_id</name></name> <operator pos:start="217:25" pos:end="217:26">!=</operator> <name pos:start="217:28" pos:end="217:37">PCI_ANY_ID</name></expr>)</condition> <block pos:start="217:40" pos:end="231:5">{<block_content pos:start="219:9" pos:end="229:80">

        <if_stmt pos:start="219:9" pos:end="225:9"><if pos:start="219:9" pos:end="225:9">if <condition pos:start="219:12" pos:end="219:37">(<expr pos:start="219:13" pos:end="219:36"><name pos:start="219:13" pos:end="219:27"><name pos:start="219:13" pos:end="219:16">vdev</name><operator pos:start="219:17" pos:end="219:18">-&gt;</operator><name pos:start="219:19" pos:end="219:27">device_id</name></name> <operator pos:start="219:29" pos:end="219:29">&gt;</operator> <literal type="number" pos:start="219:31" pos:end="219:36">0xffff</literal></expr>)</condition> <block pos:start="219:39" pos:end="225:9">{<block_content pos:start="221:13" pos:end="223:27">

            <expr_stmt pos:start="221:13" pos:end="221:65"><expr pos:start="221:13" pos:end="221:64"><call pos:start="221:13" pos:end="221:64"><name pos:start="221:13" pos:end="221:24">error_report</name><argument_list pos:start="221:25" pos:end="221:64">(<argument pos:start="221:26" pos:end="221:63"><expr pos:start="221:26" pos:end="221:63"><literal type="string" pos:start="221:26" pos:end="221:63">"vfio: Invalid PCI device ID provided"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="223:13" pos:end="223:27">return <expr pos:start="223:20" pos:end="223:26"><operator pos:start="223:20" pos:end="223:20">-</operator><name pos:start="223:21" pos:end="223:26">EINVAL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="227:9" pos:end="227:73"><expr pos:start="227:9" pos:end="227:72"><call pos:start="227:9" pos:end="227:72"><name pos:start="227:9" pos:end="227:30">vfio_add_emulated_word</name><argument_list pos:start="227:31" pos:end="227:72">(<argument pos:start="227:32" pos:end="227:35"><expr pos:start="227:32" pos:end="227:35"><name pos:start="227:32" pos:end="227:35">vdev</name></expr></argument>, <argument pos:start="227:38" pos:end="227:50"><expr pos:start="227:38" pos:end="227:50"><name pos:start="227:38" pos:end="227:50">PCI_DEVICE_ID</name></expr></argument>, <argument pos:start="227:53" pos:end="227:67"><expr pos:start="227:53" pos:end="227:67"><name pos:start="227:53" pos:end="227:67"><name pos:start="227:53" pos:end="227:56">vdev</name><operator pos:start="227:57" pos:end="227:58">-&gt;</operator><name pos:start="227:59" pos:end="227:67">device_id</name></name></expr></argument>, <argument pos:start="227:70" pos:end="227:71"><expr pos:start="227:70" pos:end="227:71"><operator pos:start="227:70" pos:end="227:70">~</operator><literal type="number" pos:start="227:71" pos:end="227:71">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="229:9" pos:end="229:80"><expr pos:start="229:9" pos:end="229:79"><call pos:start="229:9" pos:end="229:79"><name pos:start="229:9" pos:end="229:41">trace_vfio_pci_emulated_device_id</name><argument_list pos:start="229:42" pos:end="229:79">(<argument pos:start="229:43" pos:end="229:61"><expr pos:start="229:43" pos:end="229:61"><name pos:start="229:43" pos:end="229:61"><name pos:start="229:43" pos:end="229:46">vdev</name><operator pos:start="229:47" pos:end="229:48">-&gt;</operator><name pos:start="229:49" pos:end="229:56">vbasedev</name><operator pos:start="229:57" pos:end="229:57">.</operator><name pos:start="229:58" pos:end="229:61">name</name></name></expr></argument>, <argument pos:start="229:64" pos:end="229:78"><expr pos:start="229:64" pos:end="229:78"><name pos:start="229:64" pos:end="229:78"><name pos:start="229:64" pos:end="229:67">vdev</name><operator pos:start="229:68" pos:end="229:69">-&gt;</operator><name pos:start="229:70" pos:end="229:78">device_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="231:7" pos:end="235:5">else <block pos:start="231:12" pos:end="235:5">{<block_content pos:start="233:9" pos:end="233:69">

        <expr_stmt pos:start="233:9" pos:end="233:69"><expr pos:start="233:9" pos:end="233:68"><name pos:start="233:9" pos:end="233:23"><name pos:start="233:9" pos:end="233:12">vdev</name><operator pos:start="233:13" pos:end="233:14">-&gt;</operator><name pos:start="233:15" pos:end="233:23">device_id</name></name> <operator pos:start="233:25" pos:end="233:25">=</operator> <call pos:start="233:27" pos:end="233:68"><name pos:start="233:27" pos:end="233:38">pci_get_word</name><argument_list pos:start="233:39" pos:end="233:68">(<argument pos:start="233:40" pos:end="233:67"><expr pos:start="233:40" pos:end="233:67"><name pos:start="233:40" pos:end="233:51"><name pos:start="233:40" pos:end="233:43">pdev</name><operator pos:start="233:44" pos:end="233:45">-&gt;</operator><name pos:start="233:46" pos:end="233:51">config</name></name> <operator pos:start="233:53" pos:end="233:53">+</operator> <name pos:start="233:55" pos:end="233:67">PCI_DEVICE_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="239:5" pos:end="257:5"><if pos:start="239:5" pos:end="257:5">if <condition pos:start="239:8" pos:end="239:42">(<expr pos:start="239:9" pos:end="239:41"><name pos:start="239:9" pos:end="239:27"><name pos:start="239:9" pos:end="239:12">vdev</name><operator pos:start="239:13" pos:end="239:14">-&gt;</operator><name pos:start="239:15" pos:end="239:27">sub_vendor_id</name></name> <operator pos:start="239:29" pos:end="239:30">!=</operator> <name pos:start="239:32" pos:end="239:41">PCI_ANY_ID</name></expr>)</condition> <block pos:start="239:44" pos:end="257:5">{<block_content pos:start="241:9" pos:end="255:67">

        <if_stmt pos:start="241:9" pos:end="247:9"><if pos:start="241:9" pos:end="247:9">if <condition pos:start="241:12" pos:end="241:41">(<expr pos:start="241:13" pos:end="241:40"><name pos:start="241:13" pos:end="241:31"><name pos:start="241:13" pos:end="241:16">vdev</name><operator pos:start="241:17" pos:end="241:18">-&gt;</operator><name pos:start="241:19" pos:end="241:31">sub_vendor_id</name></name> <operator pos:start="241:33" pos:end="241:33">&gt;</operator> <literal type="number" pos:start="241:35" pos:end="241:40">0xffff</literal></expr>)</condition> <block pos:start="241:43" pos:end="247:9">{<block_content pos:start="243:13" pos:end="245:27">

            <expr_stmt pos:start="243:13" pos:end="243:75"><expr pos:start="243:13" pos:end="243:74"><call pos:start="243:13" pos:end="243:74"><name pos:start="243:13" pos:end="243:24">error_report</name><argument_list pos:start="243:25" pos:end="243:74">(<argument pos:start="243:26" pos:end="243:73"><expr pos:start="243:26" pos:end="243:73"><literal type="string" pos:start="243:26" pos:end="243:73">"vfio: Invalid PCI subsystem vendor ID provided"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="245:13" pos:end="245:27">return <expr pos:start="245:20" pos:end="245:26"><operator pos:start="245:20" pos:end="245:20">-</operator><name pos:start="245:21" pos:end="245:26">EINVAL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="249:9" pos:end="251:56"><expr pos:start="249:9" pos:end="251:55"><call pos:start="249:9" pos:end="251:55"><name pos:start="249:9" pos:end="249:30">vfio_add_emulated_word</name><argument_list pos:start="249:31" pos:end="251:55">(<argument pos:start="249:32" pos:end="249:35"><expr pos:start="249:32" pos:end="249:35"><name pos:start="249:32" pos:end="249:35">vdev</name></expr></argument>, <argument pos:start="249:38" pos:end="249:60"><expr pos:start="249:38" pos:end="249:60"><name pos:start="249:38" pos:end="249:60">PCI_SUBSYSTEM_VENDOR_ID</name></expr></argument>,

                               <argument pos:start="251:32" pos:end="251:50"><expr pos:start="251:32" pos:end="251:50"><name pos:start="251:32" pos:end="251:50"><name pos:start="251:32" pos:end="251:35">vdev</name><operator pos:start="251:36" pos:end="251:37">-&gt;</operator><name pos:start="251:38" pos:end="251:50">sub_vendor_id</name></name></expr></argument>, <argument pos:start="251:53" pos:end="251:54"><expr pos:start="251:53" pos:end="251:54"><operator pos:start="251:53" pos:end="251:53">~</operator><literal type="number" pos:start="251:54" pos:end="251:54">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="253:9" pos:end="255:67"><expr pos:start="253:9" pos:end="255:66"><call pos:start="253:9" pos:end="255:66"><name pos:start="253:9" pos:end="253:45">trace_vfio_pci_emulated_sub_vendor_id</name><argument_list pos:start="253:46" pos:end="255:66">(<argument pos:start="253:47" pos:end="253:65"><expr pos:start="253:47" pos:end="253:65"><name pos:start="253:47" pos:end="253:65"><name pos:start="253:47" pos:end="253:50">vdev</name><operator pos:start="253:51" pos:end="253:52">-&gt;</operator><name pos:start="253:53" pos:end="253:60">vbasedev</name><operator pos:start="253:61" pos:end="253:61">.</operator><name pos:start="253:62" pos:end="253:65">name</name></name></expr></argument>,

                                              <argument pos:start="255:47" pos:end="255:65"><expr pos:start="255:47" pos:end="255:65"><name pos:start="255:47" pos:end="255:65"><name pos:start="255:47" pos:end="255:50">vdev</name><operator pos:start="255:51" pos:end="255:52">-&gt;</operator><name pos:start="255:53" pos:end="255:65">sub_vendor_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="261:5" pos:end="277:5"><if pos:start="261:5" pos:end="277:5">if <condition pos:start="261:8" pos:end="261:42">(<expr pos:start="261:9" pos:end="261:41"><name pos:start="261:9" pos:end="261:27"><name pos:start="261:9" pos:end="261:12">vdev</name><operator pos:start="261:13" pos:end="261:14">-&gt;</operator><name pos:start="261:15" pos:end="261:27">sub_device_id</name></name> <operator pos:start="261:29" pos:end="261:30">!=</operator> <name pos:start="261:32" pos:end="261:41">PCI_ANY_ID</name></expr>)</condition> <block pos:start="261:44" pos:end="277:5">{<block_content pos:start="263:9" pos:end="275:67">

        <if_stmt pos:start="263:9" pos:end="269:9"><if pos:start="263:9" pos:end="269:9">if <condition pos:start="263:12" pos:end="263:41">(<expr pos:start="263:13" pos:end="263:40"><name pos:start="263:13" pos:end="263:31"><name pos:start="263:13" pos:end="263:16">vdev</name><operator pos:start="263:17" pos:end="263:18">-&gt;</operator><name pos:start="263:19" pos:end="263:31">sub_device_id</name></name> <operator pos:start="263:33" pos:end="263:33">&gt;</operator> <literal type="number" pos:start="263:35" pos:end="263:40">0xffff</literal></expr>)</condition> <block pos:start="263:43" pos:end="269:9">{<block_content pos:start="265:13" pos:end="267:27">

            <expr_stmt pos:start="265:13" pos:end="265:75"><expr pos:start="265:13" pos:end="265:74"><call pos:start="265:13" pos:end="265:74"><name pos:start="265:13" pos:end="265:24">error_report</name><argument_list pos:start="265:25" pos:end="265:74">(<argument pos:start="265:26" pos:end="265:73"><expr pos:start="265:26" pos:end="265:73"><literal type="string" pos:start="265:26" pos:end="265:73">"vfio: Invalid PCI subsystem device ID provided"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="267:13" pos:end="267:27">return <expr pos:start="267:20" pos:end="267:26"><operator pos:start="267:20" pos:end="267:20">-</operator><name pos:start="267:21" pos:end="267:26">EINVAL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="271:9" pos:end="271:80"><expr pos:start="271:9" pos:end="271:79"><call pos:start="271:9" pos:end="271:79"><name pos:start="271:9" pos:end="271:30">vfio_add_emulated_word</name><argument_list pos:start="271:31" pos:end="271:79">(<argument pos:start="271:32" pos:end="271:35"><expr pos:start="271:32" pos:end="271:35"><name pos:start="271:32" pos:end="271:35">vdev</name></expr></argument>, <argument pos:start="271:38" pos:end="271:53"><expr pos:start="271:38" pos:end="271:53"><name pos:start="271:38" pos:end="271:53">PCI_SUBSYSTEM_ID</name></expr></argument>, <argument pos:start="271:56" pos:end="271:74"><expr pos:start="271:56" pos:end="271:74"><name pos:start="271:56" pos:end="271:74"><name pos:start="271:56" pos:end="271:59">vdev</name><operator pos:start="271:60" pos:end="271:61">-&gt;</operator><name pos:start="271:62" pos:end="271:74">sub_device_id</name></name></expr></argument>, <argument pos:start="271:77" pos:end="271:78"><expr pos:start="271:77" pos:end="271:78"><operator pos:start="271:77" pos:end="271:77">~</operator><literal type="number" pos:start="271:78" pos:end="271:78">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="273:9" pos:end="275:67"><expr pos:start="273:9" pos:end="275:66"><call pos:start="273:9" pos:end="275:66"><name pos:start="273:9" pos:end="273:45">trace_vfio_pci_emulated_sub_device_id</name><argument_list pos:start="273:46" pos:end="275:66">(<argument pos:start="273:47" pos:end="273:65"><expr pos:start="273:47" pos:end="273:65"><name pos:start="273:47" pos:end="273:65"><name pos:start="273:47" pos:end="273:50">vdev</name><operator pos:start="273:51" pos:end="273:52">-&gt;</operator><name pos:start="273:53" pos:end="273:60">vbasedev</name><operator pos:start="273:61" pos:end="273:61">.</operator><name pos:start="273:62" pos:end="273:65">name</name></name></expr></argument>,

                                              <argument pos:start="275:47" pos:end="275:65"><expr pos:start="275:47" pos:end="275:65"><name pos:start="275:47" pos:end="275:65"><name pos:start="275:47" pos:end="275:50">vdev</name><operator pos:start="275:51" pos:end="275:52">-&gt;</operator><name pos:start="275:53" pos:end="275:65">sub_device_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="281:5" pos:end="281:79">/* QEMU can change multi-function devices to single function, or reverse */</comment>

    <expr_stmt pos:start="283:5" pos:end="285:77"><expr pos:start="283:5" pos:end="285:76"><name pos:start="283:5" pos:end="283:47"><name pos:start="283:5" pos:end="283:8">vdev</name><operator pos:start="283:9" pos:end="283:10">-&gt;</operator><name pos:start="283:11" pos:end="283:30">emulated_config_bits</name><index pos:start="283:31" pos:end="283:47">[<expr pos:start="283:32" pos:end="283:46"><name pos:start="283:32" pos:end="283:46">PCI_HEADER_TYPE</name></expr>]</index></name> <operator pos:start="283:49" pos:end="283:49">=</operator>

                                              <name pos:start="285:47" pos:end="285:76">PCI_HEADER_TYPE_MULTI_FUNCTION</name></expr>;</expr_stmt>



    <comment type="block" pos:start="289:5" pos:end="289:75">/* Restore or clear multifunction, this is always controlled by QEMU */</comment>

    <if_stmt pos:start="291:5" pos:end="299:5"><if pos:start="291:5" pos:end="295:5">if <condition pos:start="291:8" pos:end="291:60">(<expr pos:start="291:9" pos:end="291:59"><name pos:start="291:9" pos:end="291:30"><name pos:start="291:9" pos:end="291:12">vdev</name><operator pos:start="291:13" pos:end="291:14">-&gt;</operator><name pos:start="291:15" pos:end="291:18">pdev</name><operator pos:start="291:19" pos:end="291:19">.</operator><name pos:start="291:20" pos:end="291:30">cap_present</name></name> <operator pos:start="291:32" pos:end="291:32">&amp;</operator> <name pos:start="291:34" pos:end="291:59">QEMU_PCI_CAP_MULTIFUNCTION</name></expr>)</condition> <block pos:start="291:62" pos:end="295:5">{<block_content pos:start="293:9" pos:end="293:77">

        <expr_stmt pos:start="293:9" pos:end="293:77"><expr pos:start="293:9" pos:end="293:76"><name pos:start="293:9" pos:end="293:42"><name pos:start="293:9" pos:end="293:12">vdev</name><operator pos:start="293:13" pos:end="293:14">-&gt;</operator><name pos:start="293:15" pos:end="293:18">pdev</name><operator pos:start="293:19" pos:end="293:19">.</operator><name pos:start="293:20" pos:end="293:25">config</name><index pos:start="293:26" pos:end="293:42">[<expr pos:start="293:27" pos:end="293:41"><name pos:start="293:27" pos:end="293:41">PCI_HEADER_TYPE</name></expr>]</index></name> <operator pos:start="293:44" pos:end="293:45">|=</operator> <name pos:start="293:47" pos:end="293:76">PCI_HEADER_TYPE_MULTI_FUNCTION</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="295:7" pos:end="299:5">else <block pos:start="295:12" pos:end="299:5">{<block_content pos:start="297:9" pos:end="297:78">

        <expr_stmt pos:start="297:9" pos:end="297:78"><expr pos:start="297:9" pos:end="297:77"><name pos:start="297:9" pos:end="297:42"><name pos:start="297:9" pos:end="297:12">vdev</name><operator pos:start="297:13" pos:end="297:14">-&gt;</operator><name pos:start="297:15" pos:end="297:18">pdev</name><operator pos:start="297:19" pos:end="297:19">.</operator><name pos:start="297:20" pos:end="297:25">config</name><index pos:start="297:26" pos:end="297:42">[<expr pos:start="297:27" pos:end="297:41"><name pos:start="297:27" pos:end="297:41">PCI_HEADER_TYPE</name></expr>]</index></name> <operator pos:start="297:44" pos:end="297:45">&amp;=</operator> <operator pos:start="297:47" pos:end="297:47">~</operator><name pos:start="297:48" pos:end="297:77">PCI_HEADER_TYPE_MULTI_FUNCTION</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="303:5" pos:end="311:7">/*

     * Clear host resource mapping info.  If we choose not to register a

     * BAR, such as might be the case with the option ROM, we can get

     * confusing, unwritable, residual addresses from the host here.

     */</comment>

    <expr_stmt pos:start="313:5" pos:end="313:58"><expr pos:start="313:5" pos:end="313:57"><call pos:start="313:5" pos:end="313:57"><name pos:start="313:5" pos:end="313:10">memset</name><argument_list pos:start="313:11" pos:end="313:57">(<argument pos:start="313:12" pos:end="313:49"><expr pos:start="313:12" pos:end="313:49"><operator pos:start="313:12" pos:end="313:12">&amp;</operator><name pos:start="313:13" pos:end="313:49"><name pos:start="313:13" pos:end="313:16">vdev</name><operator pos:start="313:17" pos:end="313:18">-&gt;</operator><name pos:start="313:19" pos:end="313:22">pdev</name><operator pos:start="313:23" pos:end="313:23">.</operator><name pos:start="313:24" pos:end="313:29">config</name><index pos:start="313:30" pos:end="313:49">[<expr pos:start="313:31" pos:end="313:48"><name pos:start="313:31" pos:end="313:48">PCI_BASE_ADDRESS_0</name></expr>]</index></name></expr></argument>, <argument pos:start="313:52" pos:end="313:52"><expr pos:start="313:52" pos:end="313:52"><literal type="number" pos:start="313:52" pos:end="313:52">0</literal></expr></argument>, <argument pos:start="313:55" pos:end="313:56"><expr pos:start="313:55" pos:end="313:56"><literal type="number" pos:start="313:55" pos:end="313:56">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="315:5" pos:end="315:54"><expr pos:start="315:5" pos:end="315:53"><call pos:start="315:5" pos:end="315:53"><name pos:start="315:5" pos:end="315:10">memset</name><argument_list pos:start="315:11" pos:end="315:53">(<argument pos:start="315:12" pos:end="315:46"><expr pos:start="315:12" pos:end="315:46"><operator pos:start="315:12" pos:end="315:12">&amp;</operator><name pos:start="315:13" pos:end="315:46"><name pos:start="315:13" pos:end="315:16">vdev</name><operator pos:start="315:17" pos:end="315:18">-&gt;</operator><name pos:start="315:19" pos:end="315:22">pdev</name><operator pos:start="315:23" pos:end="315:23">.</operator><name pos:start="315:24" pos:end="315:29">config</name><index pos:start="315:30" pos:end="315:46">[<expr pos:start="315:31" pos:end="315:45"><name pos:start="315:31" pos:end="315:45">PCI_ROM_ADDRESS</name></expr>]</index></name></expr></argument>, <argument pos:start="315:49" pos:end="315:49"><expr pos:start="315:49" pos:end="315:49"><literal type="number" pos:start="315:49" pos:end="315:49">0</literal></expr></argument>, <argument pos:start="315:52" pos:end="315:52"><expr pos:start="315:52" pos:end="315:52"><literal type="number" pos:start="315:52" pos:end="315:52">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="319:5" pos:end="319:28"><expr pos:start="319:5" pos:end="319:27"><call pos:start="319:5" pos:end="319:27"><name pos:start="319:5" pos:end="319:21">vfio_pci_size_rom</name><argument_list pos:start="319:22" pos:end="319:27">(<argument pos:start="319:23" pos:end="319:26"><expr pos:start="319:23" pos:end="319:26"><name pos:start="319:23" pos:end="319:26">vdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="323:5" pos:end="323:38"><expr pos:start="323:5" pos:end="323:37"><name pos:start="323:5" pos:end="323:7">ret</name> <operator pos:start="323:9" pos:end="323:9">=</operator> <call pos:start="323:11" pos:end="323:37"><name pos:start="323:11" pos:end="323:31">vfio_msix_early_setup</name><argument_list pos:start="323:32" pos:end="323:37">(<argument pos:start="323:33" pos:end="323:36"><expr pos:start="323:33" pos:end="323:36"><name pos:start="323:33" pos:end="323:36">vdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="325:5" pos:end="329:5"><if pos:start="325:5" pos:end="329:5">if <condition pos:start="325:8" pos:end="325:12">(<expr pos:start="325:9" pos:end="325:11"><name pos:start="325:9" pos:end="325:11">ret</name></expr>)</condition> <block pos:start="325:14" pos:end="329:5">{<block_content pos:start="327:9" pos:end="327:19">

        <return pos:start="327:9" pos:end="327:19">return <expr pos:start="327:16" pos:end="327:18"><name pos:start="327:16" pos:end="327:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="333:5" pos:end="333:24"><expr pos:start="333:5" pos:end="333:23"><call pos:start="333:5" pos:end="333:23"><name pos:start="333:5" pos:end="333:17">vfio_map_bars</name><argument_list pos:start="333:18" pos:end="333:23">(<argument pos:start="333:19" pos:end="333:22"><expr pos:start="333:19" pos:end="333:22"><name pos:start="333:19" pos:end="333:22">vdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="337:5" pos:end="337:38"><expr pos:start="337:5" pos:end="337:37"><name pos:start="337:5" pos:end="337:7">ret</name> <operator pos:start="337:9" pos:end="337:9">=</operator> <call pos:start="337:11" pos:end="337:37"><name pos:start="337:11" pos:end="337:31">vfio_add_capabilities</name><argument_list pos:start="337:32" pos:end="337:37">(<argument pos:start="337:33" pos:end="337:36"><expr pos:start="337:33" pos:end="337:36"><name pos:start="337:33" pos:end="337:36">vdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="339:5" pos:end="343:5"><if pos:start="339:5" pos:end="343:5">if <condition pos:start="339:8" pos:end="339:12">(<expr pos:start="339:9" pos:end="339:11"><name pos:start="339:9" pos:end="339:11">ret</name></expr>)</condition> <block pos:start="339:14" pos:end="343:5">{<block_content pos:start="341:9" pos:end="341:26">

        <goto pos:start="341:9" pos:end="341:26">goto <name pos:start="341:14" pos:end="341:25">out_teardown</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="347:5" pos:end="347:41">/* QEMU emulates all of MSI &amp; MSIX */</comment>

    <if_stmt pos:start="349:5" pos:end="355:5"><if pos:start="349:5" pos:end="355:5">if <condition pos:start="349:8" pos:end="349:46">(<expr pos:start="349:9" pos:end="349:45"><name pos:start="349:9" pos:end="349:25"><name pos:start="349:9" pos:end="349:12">pdev</name><operator pos:start="349:13" pos:end="349:14">-&gt;</operator><name pos:start="349:15" pos:end="349:25">cap_present</name></name> <operator pos:start="349:27" pos:end="349:27">&amp;</operator> <name pos:start="349:29" pos:end="349:45">QEMU_PCI_CAP_MSIX</name></expr>)</condition> <block pos:start="349:48" pos:end="355:5">{<block_content pos:start="351:9" pos:end="353:32">

        <expr_stmt pos:start="351:9" pos:end="353:32"><expr pos:start="351:9" pos:end="353:31"><call pos:start="351:9" pos:end="353:31"><name pos:start="351:9" pos:end="351:14">memset</name><argument_list pos:start="351:15" pos:end="353:31">(<argument pos:start="351:16" pos:end="351:58"><expr pos:start="351:16" pos:end="351:58"><name pos:start="351:16" pos:end="351:41"><name pos:start="351:16" pos:end="351:19">vdev</name><operator pos:start="351:20" pos:end="351:21">-&gt;</operator><name pos:start="351:22" pos:end="351:41">emulated_config_bits</name></name> <operator pos:start="351:43" pos:end="351:43">+</operator> <name pos:start="351:45" pos:end="351:58"><name pos:start="351:45" pos:end="351:48">pdev</name><operator pos:start="351:49" pos:end="351:50">-&gt;</operator><name pos:start="351:51" pos:end="351:58">msix_cap</name></name></expr></argument>, <argument pos:start="351:61" pos:end="351:64"><expr pos:start="351:61" pos:end="351:64"><literal type="number" pos:start="351:61" pos:end="351:64">0xff</literal></expr></argument>,

               <argument pos:start="353:16" pos:end="353:30"><expr pos:start="353:16" pos:end="353:30"><name pos:start="353:16" pos:end="353:30">MSIX_CAP_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="359:5" pos:end="365:5"><if pos:start="359:5" pos:end="365:5">if <condition pos:start="359:8" pos:end="359:45">(<expr pos:start="359:9" pos:end="359:44"><name pos:start="359:9" pos:end="359:25"><name pos:start="359:9" pos:end="359:12">pdev</name><operator pos:start="359:13" pos:end="359:14">-&gt;</operator><name pos:start="359:15" pos:end="359:25">cap_present</name></name> <operator pos:start="359:27" pos:end="359:27">&amp;</operator> <name pos:start="359:29" pos:end="359:44">QEMU_PCI_CAP_MSI</name></expr>)</condition> <block pos:start="359:47" pos:end="365:5">{<block_content pos:start="361:9" pos:end="363:35">

        <expr_stmt pos:start="361:9" pos:end="363:35"><expr pos:start="361:9" pos:end="363:34"><call pos:start="361:9" pos:end="363:34"><name pos:start="361:9" pos:end="361:14">memset</name><argument_list pos:start="361:15" pos:end="363:34">(<argument pos:start="361:16" pos:end="361:57"><expr pos:start="361:16" pos:end="361:57"><name pos:start="361:16" pos:end="361:41"><name pos:start="361:16" pos:end="361:19">vdev</name><operator pos:start="361:20" pos:end="361:21">-&gt;</operator><name pos:start="361:22" pos:end="361:41">emulated_config_bits</name></name> <operator pos:start="361:43" pos:end="361:43">+</operator> <name pos:start="361:45" pos:end="361:57"><name pos:start="361:45" pos:end="361:48">pdev</name><operator pos:start="361:49" pos:end="361:50">-&gt;</operator><name pos:start="361:51" pos:end="361:57">msi_cap</name></name></expr></argument>, <argument pos:start="361:60" pos:end="361:63"><expr pos:start="361:60" pos:end="361:63"><literal type="number" pos:start="361:60" pos:end="361:63">0xff</literal></expr></argument>,

               <argument pos:start="363:16" pos:end="363:33"><expr pos:start="363:16" pos:end="363:33"><name pos:start="363:16" pos:end="363:33"><name pos:start="363:16" pos:end="363:19">vdev</name><operator pos:start="363:20" pos:end="363:21">-&gt;</operator><name pos:start="363:22" pos:end="363:33">msi_cap_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="369:5" pos:end="385:5"><if pos:start="369:5" pos:end="385:5">if <condition pos:start="369:8" pos:end="369:64">(<expr pos:start="369:9" pos:end="369:63"><call pos:start="369:9" pos:end="369:63"><name pos:start="369:9" pos:end="369:28">vfio_pci_read_config</name><argument_list pos:start="369:29" pos:end="369:63">(<argument pos:start="369:30" pos:end="369:40"><expr pos:start="369:30" pos:end="369:40"><operator pos:start="369:30" pos:end="369:30">&amp;</operator><name pos:start="369:31" pos:end="369:40"><name pos:start="369:31" pos:end="369:34">vdev</name><operator pos:start="369:35" pos:end="369:36">-&gt;</operator><name pos:start="369:37" pos:end="369:40">pdev</name></name></expr></argument>, <argument pos:start="369:43" pos:end="369:59"><expr pos:start="369:43" pos:end="369:59"><name pos:start="369:43" pos:end="369:59">PCI_INTERRUPT_PIN</name></expr></argument>, <argument pos:start="369:62" pos:end="369:62"><expr pos:start="369:62" pos:end="369:62"><literal type="number" pos:start="369:62" pos:end="369:62">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="369:66" pos:end="385:5">{<block_content pos:start="371:9" pos:end="383:9">

        <expr_stmt pos:start="371:9" pos:end="373:79"><expr pos:start="371:9" pos:end="373:78"><name pos:start="371:9" pos:end="371:29"><name pos:start="371:9" pos:end="371:12">vdev</name><operator pos:start="371:13" pos:end="371:14">-&gt;</operator><name pos:start="371:15" pos:end="371:18">intx</name><operator pos:start="371:19" pos:end="371:19">.</operator><name pos:start="371:20" pos:end="371:29">mmap_timer</name></name> <operator pos:start="371:31" pos:end="371:31">=</operator> <call pos:start="371:33" pos:end="373:78"><name pos:start="371:33" pos:end="371:44">timer_new_ms</name><argument_list pos:start="371:45" pos:end="373:78">(<argument pos:start="371:46" pos:end="371:63"><expr pos:start="371:46" pos:end="371:63"><name pos:start="371:46" pos:end="371:63">QEMU_CLOCK_VIRTUAL</name></expr></argument>,

                                                  <argument pos:start="373:51" pos:end="373:71"><expr pos:start="373:51" pos:end="373:71"><name pos:start="373:51" pos:end="373:71">vfio_intx_mmap_enable</name></expr></argument>, <argument pos:start="373:74" pos:end="373:77"><expr pos:start="373:74" pos:end="373:77"><name pos:start="373:74" pos:end="373:77">vdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="375:9" pos:end="375:76"><expr pos:start="375:9" pos:end="375:75"><call pos:start="375:9" pos:end="375:75"><name pos:start="375:9" pos:end="375:44">pci_device_set_intx_routing_notifier</name><argument_list pos:start="375:45" pos:end="375:75">(<argument pos:start="375:46" pos:end="375:56"><expr pos:start="375:46" pos:end="375:56"><operator pos:start="375:46" pos:end="375:46">&amp;</operator><name pos:start="375:47" pos:end="375:56"><name pos:start="375:47" pos:end="375:50">vdev</name><operator pos:start="375:51" pos:end="375:52">-&gt;</operator><name pos:start="375:53" pos:end="375:56">pdev</name></name></expr></argument>, <argument pos:start="375:59" pos:end="375:74"><expr pos:start="375:59" pos:end="375:74"><name pos:start="375:59" pos:end="375:74">vfio_intx_update</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="377:9" pos:end="377:37"><expr pos:start="377:9" pos:end="377:36"><name pos:start="377:9" pos:end="377:11">ret</name> <operator pos:start="377:13" pos:end="377:13">=</operator> <call pos:start="377:15" pos:end="377:36"><name pos:start="377:15" pos:end="377:30">vfio_intx_enable</name><argument_list pos:start="377:31" pos:end="377:36">(<argument pos:start="377:32" pos:end="377:35"><expr pos:start="377:32" pos:end="377:35"><name pos:start="377:32" pos:end="377:35">vdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="379:9" pos:end="383:9"><if pos:start="379:9" pos:end="383:9">if <condition pos:start="379:12" pos:end="379:16">(<expr pos:start="379:13" pos:end="379:15"><name pos:start="379:13" pos:end="379:15">ret</name></expr>)</condition> <block pos:start="379:18" pos:end="383:9">{<block_content pos:start="381:13" pos:end="381:30">

            <goto pos:start="381:13" pos:end="381:30">goto <name pos:start="381:18" pos:end="381:29">out_teardown</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="389:5" pos:end="389:37"><expr pos:start="389:5" pos:end="389:36"><call pos:start="389:5" pos:end="389:36"><name pos:start="389:5" pos:end="389:30">vfio_register_err_notifier</name><argument_list pos:start="389:31" pos:end="389:36">(<argument pos:start="389:32" pos:end="389:35"><expr pos:start="389:32" pos:end="389:35"><name pos:start="389:32" pos:end="389:35">vdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="391:5" pos:end="391:37"><expr pos:start="391:5" pos:end="391:36"><call pos:start="391:5" pos:end="391:36"><name pos:start="391:5" pos:end="391:30">vfio_register_req_notifier</name><argument_list pos:start="391:31" pos:end="391:36">(<argument pos:start="391:32" pos:end="391:35"><expr pos:start="391:32" pos:end="391:35"><name pos:start="391:32" pos:end="391:35">vdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="393:5" pos:end="393:35"><expr pos:start="393:5" pos:end="393:34"><call pos:start="393:5" pos:end="393:34"><name pos:start="393:5" pos:end="393:28">vfio_setup_resetfn_quirk</name><argument_list pos:start="393:29" pos:end="393:34">(<argument pos:start="393:30" pos:end="393:33"><expr pos:start="393:30" pos:end="393:33"><name pos:start="393:30" pos:end="393:33">vdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="397:5" pos:end="397:13">return <expr pos:start="397:12" pos:end="397:12"><literal type="number" pos:start="397:12" pos:end="397:12">0</literal></expr>;</return>



<label pos:start="401:1" pos:end="401:13"><name pos:start="401:1" pos:end="401:12">out_teardown</name>:</label>

    <expr_stmt pos:start="403:5" pos:end="403:60"><expr pos:start="403:5" pos:end="403:59"><call pos:start="403:5" pos:end="403:59"><name pos:start="403:5" pos:end="403:40">pci_device_set_intx_routing_notifier</name><argument_list pos:start="403:41" pos:end="403:59">(<argument pos:start="403:42" pos:end="403:52"><expr pos:start="403:42" pos:end="403:52"><operator pos:start="403:42" pos:end="403:42">&amp;</operator><name pos:start="403:43" pos:end="403:52"><name pos:start="403:43" pos:end="403:46">vdev</name><operator pos:start="403:47" pos:end="403:48">-&gt;</operator><name pos:start="403:49" pos:end="403:52">pdev</name></name></expr></argument>, <argument pos:start="403:55" pos:end="403:58"><expr pos:start="403:55" pos:end="403:58"><name pos:start="403:55" pos:end="403:58">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="405:5" pos:end="405:28"><expr pos:start="405:5" pos:end="405:27"><call pos:start="405:5" pos:end="405:27"><name pos:start="405:5" pos:end="405:21">vfio_teardown_msi</name><argument_list pos:start="405:22" pos:end="405:27">(<argument pos:start="405:23" pos:end="405:26"><expr pos:start="405:23" pos:end="405:26"><name pos:start="405:23" pos:end="405:26">vdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="407:5" pos:end="407:31"><expr pos:start="407:5" pos:end="407:30"><call pos:start="407:5" pos:end="407:30"><name pos:start="407:5" pos:end="407:24">vfio_unregister_bars</name><argument_list pos:start="407:25" pos:end="407:30">(<argument pos:start="407:26" pos:end="407:29"><expr pos:start="407:26" pos:end="407:29"><name pos:start="407:26" pos:end="407:29">vdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="409:5" pos:end="409:15">return <expr pos:start="409:12" pos:end="409:14"><name pos:start="409:12" pos:end="409:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
