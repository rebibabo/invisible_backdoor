<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/10760.c" pos:tabs="8"><function pos:start="1:1" pos:end="297:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:17">read_f</name><parameter_list pos:start="1:18" pos:end="1:59">(<parameter pos:start="1:19" pos:end="1:35"><decl pos:start="1:19" pos:end="1:35"><type pos:start="1:19" pos:end="1:35"><name pos:start="1:19" pos:end="1:30">BlockBackend</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:35">blk</name></decl></parameter>, <parameter pos:start="1:38" pos:end="1:45"><decl pos:start="1:38" pos:end="1:45"><type pos:start="1:38" pos:end="1:45"><name pos:start="1:38" pos:end="1:40">int</name></type> <name pos:start="1:42" pos:end="1:45">argc</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:58"><decl pos:start="1:48" pos:end="1:58"><type pos:start="1:48" pos:end="1:58"><name pos:start="1:48" pos:end="1:51">char</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier><modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:58">argv</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="297:1">{<block_content pos:start="5:5" pos:end="295:13">

    <decl_stmt pos:start="5:5" pos:end="5:26"><decl pos:start="5:5" pos:end="5:21"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:18">timeval</name></name></type> <name pos:start="5:20" pos:end="5:21">t1</name></decl>, <decl pos:start="5:24" pos:end="5:25"><type ref="prev" pos:start="5:5" pos:end="5:18"/><name pos:start="5:24" pos:end="5:25">t2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:53"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">bool</name></type> <name pos:start="7:10" pos:end="7:14">Cflag</name> <init pos:start="7:16" pos:end="7:22">= <expr pos:start="7:18" pos:end="7:22"><name pos:start="7:18" pos:end="7:22">false</name></expr></init></decl>, <decl pos:start="7:25" pos:end="7:37"><type ref="prev" pos:start="7:5" pos:end="7:8"/><name pos:start="7:25" pos:end="7:29">qflag</name> <init pos:start="7:31" pos:end="7:37">= <expr pos:start="7:33" pos:end="7:37"><name pos:start="7:33" pos:end="7:37">false</name></expr></init></decl>, <decl pos:start="7:40" pos:end="7:52"><type ref="prev" pos:start="7:5" pos:end="7:8"/><name pos:start="7:40" pos:end="7:44">vflag</name> <init pos:start="7:46" pos:end="7:52">= <expr pos:start="7:48" pos:end="7:52"><name pos:start="7:48" pos:end="7:52">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:68"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">bool</name></type> <name pos:start="9:10" pos:end="9:14">Pflag</name> <init pos:start="9:16" pos:end="9:22">= <expr pos:start="9:18" pos:end="9:22"><name pos:start="9:18" pos:end="9:22">false</name></expr></init></decl>, <decl pos:start="9:25" pos:end="9:37"><type ref="prev" pos:start="9:5" pos:end="9:8"/><name pos:start="9:25" pos:end="9:29">sflag</name> <init pos:start="9:31" pos:end="9:37">= <expr pos:start="9:33" pos:end="9:37"><name pos:start="9:33" pos:end="9:37">false</name></expr></init></decl>, <decl pos:start="9:40" pos:end="9:52"><type ref="prev" pos:start="9:5" pos:end="9:8"/><name pos:start="9:40" pos:end="9:44">lflag</name> <init pos:start="9:46" pos:end="9:52">= <expr pos:start="9:48" pos:end="9:52"><name pos:start="9:48" pos:end="9:52">false</name></expr></init></decl>, <decl pos:start="9:55" pos:end="9:67"><type ref="prev" pos:start="9:5" pos:end="9:8"/><name pos:start="9:55" pos:end="9:59">bflag</name> <init pos:start="9:61" pos:end="9:67">= <expr pos:start="9:63" pos:end="9:67"><name pos:start="9:63" pos:end="9:67">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:15"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">c</name></decl>, <decl pos:start="11:12" pos:end="11:14"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:12" pos:end="11:14">cnt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:14"><decl pos:start="13:5" pos:end="13:13"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:8">char</name> <modifier pos:start="13:10" pos:end="13:10">*</modifier></type><name pos:start="13:11" pos:end="13:13">buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">int64_t</name></type> <name pos:start="15:13" pos:end="15:18">offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:18"><decl pos:start="17:5" pos:end="17:17"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">int64_t</name></type> <name pos:start="17:13" pos:end="17:17">count</name></decl>;</decl_stmt>

    <comment type="block" pos:start="19:5" pos:end="19:75">/* Some compilers get confused and warn if this is not initialized.  */</comment>

    <decl_stmt pos:start="21:5" pos:end="21:22"><decl pos:start="21:5" pos:end="21:21"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:11">int64_t</name></type> <name pos:start="21:13" pos:end="21:17">total</name> <init pos:start="21:19" pos:end="21:21">= <expr pos:start="21:21" pos:end="21:21"><literal type="number" pos:start="21:21" pos:end="21:21">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:20"><decl pos:start="23:5" pos:end="23:19"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:15">pattern</name> <init pos:start="23:17" pos:end="23:19">= <expr pos:start="23:19" pos:end="23:19"><literal type="number" pos:start="23:19" pos:end="23:19">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:50"><decl pos:start="25:5" pos:end="25:30"><type pos:start="25:5" pos:end="25:11"><name pos:start="25:5" pos:end="25:11">int64_t</name></type> <name pos:start="25:13" pos:end="25:26">pattern_offset</name> <init pos:start="25:28" pos:end="25:30">= <expr pos:start="25:30" pos:end="25:30"><literal type="number" pos:start="25:30" pos:end="25:30">0</literal></expr></init></decl>, <decl pos:start="25:33" pos:end="25:49"><type ref="prev" pos:start="25:5" pos:end="25:11"/><name pos:start="25:33" pos:end="25:45">pattern_count</name> <init pos:start="25:47" pos:end="25:49">= <expr pos:start="25:49" pos:end="25:49"><literal type="number" pos:start="25:49" pos:end="25:49">0</literal></expr></init></decl>;</decl_stmt>



    <while pos:start="29:5" pos:end="115:5">while <condition pos:start="29:11" pos:end="29:57">(<expr pos:start="29:12" pos:end="29:56"><operator pos:start="29:12" pos:end="29:12">(</operator><name pos:start="29:13" pos:end="29:13">c</name> <operator pos:start="29:15" pos:end="29:15">=</operator> <call pos:start="29:17" pos:end="29:49"><name pos:start="29:17" pos:end="29:22">getopt</name><argument_list pos:start="29:23" pos:end="29:49">(<argument pos:start="29:24" pos:end="29:27"><expr pos:start="29:24" pos:end="29:27"><name pos:start="29:24" pos:end="29:27">argc</name></expr></argument>, <argument pos:start="29:30" pos:end="29:33"><expr pos:start="29:30" pos:end="29:33"><name pos:start="29:30" pos:end="29:33">argv</name></expr></argument>, <argument pos:start="29:36" pos:end="29:48"><expr pos:start="29:36" pos:end="29:48"><literal type="string" pos:start="29:36" pos:end="29:48">"bCl:pP:qs:v"</literal></expr></argument>)</argument_list></call><operator pos:start="29:50" pos:end="29:50">)</operator> <operator pos:start="29:52" pos:end="29:53">!=</operator> <operator pos:start="29:55" pos:end="29:55">-</operator><literal type="number" pos:start="29:56" pos:end="29:56">1</literal></expr>)</condition> <block pos:start="29:59" pos:end="115:5">{<block_content pos:start="31:9" pos:end="113:9">

        <switch pos:start="31:9" pos:end="113:9">switch <condition pos:start="31:16" pos:end="31:18">(<expr pos:start="31:17" pos:end="31:17"><name pos:start="31:17" pos:end="31:17">c</name></expr>)</condition> <block pos:start="31:20" pos:end="113:9">{<block_content pos:start="33:9" pos:end="111:51">

        <case pos:start="33:9" pos:end="33:17">case <expr pos:start="33:14" pos:end="33:16"><literal type="char" pos:start="33:14" pos:end="33:16">'b'</literal></expr>:</case>

            <expr_stmt pos:start="35:13" pos:end="35:25"><expr pos:start="35:13" pos:end="35:24"><name pos:start="35:13" pos:end="35:17">bflag</name> <operator pos:start="35:19" pos:end="35:19">=</operator> <name pos:start="35:21" pos:end="35:24">true</name></expr>;</expr_stmt>

            <break pos:start="37:13" pos:end="37:18">break;</break>

        <case pos:start="39:9" pos:end="39:17">case <expr pos:start="39:14" pos:end="39:16"><literal type="char" pos:start="39:14" pos:end="39:16">'C'</literal></expr>:</case>

            <expr_stmt pos:start="41:13" pos:end="41:25"><expr pos:start="41:13" pos:end="41:24"><name pos:start="41:13" pos:end="41:17">Cflag</name> <operator pos:start="41:19" pos:end="41:19">=</operator> <name pos:start="41:21" pos:end="41:24">true</name></expr>;</expr_stmt>

            <break pos:start="43:13" pos:end="43:18">break;</break>

        <case pos:start="45:9" pos:end="45:17">case <expr pos:start="45:14" pos:end="45:16"><literal type="char" pos:start="45:14" pos:end="45:16">'l'</literal></expr>:</case>

            <expr_stmt pos:start="47:13" pos:end="47:25"><expr pos:start="47:13" pos:end="47:24"><name pos:start="47:13" pos:end="47:17">lflag</name> <operator pos:start="47:19" pos:end="47:19">=</operator> <name pos:start="47:21" pos:end="47:24">true</name></expr>;</expr_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:43"><expr pos:start="49:13" pos:end="49:42"><name pos:start="49:13" pos:end="49:25">pattern_count</name> <operator pos:start="49:27" pos:end="49:27">=</operator> <call pos:start="49:29" pos:end="49:42"><name pos:start="49:29" pos:end="49:34">cvtnum</name><argument_list pos:start="49:35" pos:end="49:42">(<argument pos:start="49:36" pos:end="49:41"><expr pos:start="49:36" pos:end="49:41"><name pos:start="49:36" pos:end="49:41">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="51:13" pos:end="57:13"><if pos:start="51:13" pos:end="57:13">if <condition pos:start="51:16" pos:end="51:34">(<expr pos:start="51:17" pos:end="51:33"><name pos:start="51:17" pos:end="51:29">pattern_count</name> <operator pos:start="51:31" pos:end="51:31">&lt;</operator> <literal type="number" pos:start="51:33" pos:end="51:33">0</literal></expr>)</condition> <block pos:start="51:36" pos:end="57:13">{<block_content pos:start="53:17" pos:end="55:25">

                <expr_stmt pos:start="53:17" pos:end="53:56"><expr pos:start="53:17" pos:end="53:55"><call pos:start="53:17" pos:end="53:55"><name pos:start="53:17" pos:end="53:32">print_cvtnum_err</name><argument_list pos:start="53:33" pos:end="53:55">(<argument pos:start="53:34" pos:end="53:46"><expr pos:start="53:34" pos:end="53:46"><name pos:start="53:34" pos:end="53:46">pattern_count</name></expr></argument>, <argument pos:start="53:49" pos:end="53:54"><expr pos:start="53:49" pos:end="53:54"><name pos:start="53:49" pos:end="53:54">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="55:17" pos:end="55:25">return <expr pos:start="55:24" pos:end="55:24"><literal type="number" pos:start="55:24" pos:end="55:24">0</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <break pos:start="59:13" pos:end="59:18">break;</break>

        <case pos:start="61:9" pos:end="61:17">case <expr pos:start="61:14" pos:end="61:16"><literal type="char" pos:start="61:14" pos:end="61:16">'p'</literal></expr>:</case>

            <comment type="block" pos:start="63:13" pos:end="63:53">/* Ignored for backwards compatibility */</comment>

            <break pos:start="65:13" pos:end="65:18">break;</break>

        <case pos:start="67:9" pos:end="67:17">case <expr pos:start="67:14" pos:end="67:16"><literal type="char" pos:start="67:14" pos:end="67:16">'P'</literal></expr>:</case>

            <expr_stmt pos:start="69:13" pos:end="69:25"><expr pos:start="69:13" pos:end="69:24"><name pos:start="69:13" pos:end="69:17">Pflag</name> <operator pos:start="69:19" pos:end="69:19">=</operator> <name pos:start="69:21" pos:end="69:24">true</name></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:44"><expr pos:start="71:13" pos:end="71:43"><name pos:start="71:13" pos:end="71:19">pattern</name> <operator pos:start="71:21" pos:end="71:21">=</operator> <call pos:start="71:23" pos:end="71:43"><name pos:start="71:23" pos:end="71:35">parse_pattern</name><argument_list pos:start="71:36" pos:end="71:43">(<argument pos:start="71:37" pos:end="71:42"><expr pos:start="71:37" pos:end="71:42"><name pos:start="71:37" pos:end="71:42">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="73:13" pos:end="77:13"><if pos:start="73:13" pos:end="77:13">if <condition pos:start="73:16" pos:end="73:28">(<expr pos:start="73:17" pos:end="73:27"><name pos:start="73:17" pos:end="73:23">pattern</name> <operator pos:start="73:25" pos:end="73:25">&lt;</operator> <literal type="number" pos:start="73:27" pos:end="73:27">0</literal></expr>)</condition> <block pos:start="73:30" pos:end="77:13">{<block_content pos:start="75:17" pos:end="75:25">

                <return pos:start="75:17" pos:end="75:25">return <expr pos:start="75:24" pos:end="75:24"><literal type="number" pos:start="75:24" pos:end="75:24">0</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <break pos:start="79:13" pos:end="79:18">break;</break>

        <case pos:start="81:9" pos:end="81:17">case <expr pos:start="81:14" pos:end="81:16"><literal type="char" pos:start="81:14" pos:end="81:16">'q'</literal></expr>:</case>

            <expr_stmt pos:start="83:13" pos:end="83:25"><expr pos:start="83:13" pos:end="83:24"><name pos:start="83:13" pos:end="83:17">qflag</name> <operator pos:start="83:19" pos:end="83:19">=</operator> <name pos:start="83:21" pos:end="83:24">true</name></expr>;</expr_stmt>

            <break pos:start="85:13" pos:end="85:18">break;</break>

        <case pos:start="87:9" pos:end="87:17">case <expr pos:start="87:14" pos:end="87:16"><literal type="char" pos:start="87:14" pos:end="87:16">'s'</literal></expr>:</case>

            <expr_stmt pos:start="89:13" pos:end="89:25"><expr pos:start="89:13" pos:end="89:24"><name pos:start="89:13" pos:end="89:17">sflag</name> <operator pos:start="89:19" pos:end="89:19">=</operator> <name pos:start="89:21" pos:end="89:24">true</name></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:44"><expr pos:start="91:13" pos:end="91:43"><name pos:start="91:13" pos:end="91:26">pattern_offset</name> <operator pos:start="91:28" pos:end="91:28">=</operator> <call pos:start="91:30" pos:end="91:43"><name pos:start="91:30" pos:end="91:35">cvtnum</name><argument_list pos:start="91:36" pos:end="91:43">(<argument pos:start="91:37" pos:end="91:42"><expr pos:start="91:37" pos:end="91:42"><name pos:start="91:37" pos:end="91:42">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="93:13" pos:end="99:13"><if pos:start="93:13" pos:end="99:13">if <condition pos:start="93:16" pos:end="93:35">(<expr pos:start="93:17" pos:end="93:34"><name pos:start="93:17" pos:end="93:30">pattern_offset</name> <operator pos:start="93:32" pos:end="93:32">&lt;</operator> <literal type="number" pos:start="93:34" pos:end="93:34">0</literal></expr>)</condition> <block pos:start="93:37" pos:end="99:13">{<block_content pos:start="95:17" pos:end="97:25">

                <expr_stmt pos:start="95:17" pos:end="95:57"><expr pos:start="95:17" pos:end="95:56"><call pos:start="95:17" pos:end="95:56"><name pos:start="95:17" pos:end="95:32">print_cvtnum_err</name><argument_list pos:start="95:33" pos:end="95:56">(<argument pos:start="95:34" pos:end="95:47"><expr pos:start="95:34" pos:end="95:47"><name pos:start="95:34" pos:end="95:47">pattern_offset</name></expr></argument>, <argument pos:start="95:50" pos:end="95:55"><expr pos:start="95:50" pos:end="95:55"><name pos:start="95:50" pos:end="95:55">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="97:17" pos:end="97:25">return <expr pos:start="97:24" pos:end="97:24"><literal type="number" pos:start="97:24" pos:end="97:24">0</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <break pos:start="101:13" pos:end="101:18">break;</break>

        <case pos:start="103:9" pos:end="103:17">case <expr pos:start="103:14" pos:end="103:16"><literal type="char" pos:start="103:14" pos:end="103:16">'v'</literal></expr>:</case>

            <expr_stmt pos:start="105:13" pos:end="105:25"><expr pos:start="105:13" pos:end="105:24"><name pos:start="105:13" pos:end="105:17">vflag</name> <operator pos:start="105:19" pos:end="105:19">=</operator> <name pos:start="105:21" pos:end="105:24">true</name></expr>;</expr_stmt>

            <break pos:start="107:13" pos:end="107:18">break;</break>

        <default pos:start="109:9" pos:end="109:16">default:</default>

            <return pos:start="111:13" pos:end="111:51">return <expr pos:start="111:20" pos:end="111:50"><call pos:start="111:20" pos:end="111:50"><name pos:start="111:20" pos:end="111:39">qemuio_command_usage</name><argument_list pos:start="111:40" pos:end="111:50">(<argument pos:start="111:41" pos:end="111:49"><expr pos:start="111:41" pos:end="111:49"><operator pos:start="111:41" pos:end="111:41">&amp;</operator><name pos:start="111:42" pos:end="111:49">read_cmd</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></switch>

    </block_content>}</block></while>



    <if_stmt pos:start="119:5" pos:end="123:5"><if pos:start="119:5" pos:end="123:5">if <condition pos:start="119:8" pos:end="119:27">(<expr pos:start="119:9" pos:end="119:26"><name pos:start="119:9" pos:end="119:14">optind</name> <operator pos:start="119:16" pos:end="119:17">!=</operator> <name pos:start="119:19" pos:end="119:22">argc</name> <operator pos:start="119:24" pos:end="119:24">-</operator> <literal type="number" pos:start="119:26" pos:end="119:26">2</literal></expr>)</condition> <block pos:start="119:29" pos:end="123:5">{<block_content pos:start="121:9" pos:end="121:47">

        <return pos:start="121:9" pos:end="121:47">return <expr pos:start="121:16" pos:end="121:46"><call pos:start="121:16" pos:end="121:46"><name pos:start="121:16" pos:end="121:35">qemuio_command_usage</name><argument_list pos:start="121:36" pos:end="121:46">(<argument pos:start="121:37" pos:end="121:45"><expr pos:start="121:37" pos:end="121:45"><operator pos:start="121:37" pos:end="121:37">&amp;</operator><name pos:start="121:38" pos:end="121:45">read_cmd</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="127:5" pos:end="127:34"><expr pos:start="127:5" pos:end="127:33"><name pos:start="127:5" pos:end="127:10">offset</name> <operator pos:start="127:12" pos:end="127:12">=</operator> <call pos:start="127:14" pos:end="127:33"><name pos:start="127:14" pos:end="127:19">cvtnum</name><argument_list pos:start="127:20" pos:end="127:33">(<argument pos:start="127:21" pos:end="127:32"><expr pos:start="127:21" pos:end="127:32"><name pos:start="127:21" pos:end="127:32"><name pos:start="127:21" pos:end="127:24">argv</name><index pos:start="127:25" pos:end="127:32">[<expr pos:start="127:26" pos:end="127:31"><name pos:start="127:26" pos:end="127:31">optind</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="129:5" pos:end="135:5"><if pos:start="129:5" pos:end="135:5">if <condition pos:start="129:8" pos:end="129:19">(<expr pos:start="129:9" pos:end="129:18"><name pos:start="129:9" pos:end="129:14">offset</name> <operator pos:start="129:16" pos:end="129:16">&lt;</operator> <literal type="number" pos:start="129:18" pos:end="129:18">0</literal></expr>)</condition> <block pos:start="129:21" pos:end="135:5">{<block_content pos:start="131:9" pos:end="133:17">

        <expr_stmt pos:start="131:9" pos:end="131:47"><expr pos:start="131:9" pos:end="131:46"><call pos:start="131:9" pos:end="131:46"><name pos:start="131:9" pos:end="131:24">print_cvtnum_err</name><argument_list pos:start="131:25" pos:end="131:46">(<argument pos:start="131:26" pos:end="131:31"><expr pos:start="131:26" pos:end="131:31"><name pos:start="131:26" pos:end="131:31">offset</name></expr></argument>, <argument pos:start="131:34" pos:end="131:45"><expr pos:start="131:34" pos:end="131:45"><name pos:start="131:34" pos:end="131:45"><name pos:start="131:34" pos:end="131:37">argv</name><index pos:start="131:38" pos:end="131:45">[<expr pos:start="131:39" pos:end="131:44"><name pos:start="131:39" pos:end="131:44">optind</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="133:9" pos:end="133:17">return <expr pos:start="133:16" pos:end="133:16"><literal type="number" pos:start="133:16" pos:end="133:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="139:5" pos:end="139:13"><expr pos:start="139:5" pos:end="139:12"><name pos:start="139:5" pos:end="139:10">optind</name><operator pos:start="139:11" pos:end="139:12">++</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="141:5" pos:end="141:33"><expr pos:start="141:5" pos:end="141:32"><name pos:start="141:5" pos:end="141:9">count</name> <operator pos:start="141:11" pos:end="141:11">=</operator> <call pos:start="141:13" pos:end="141:32"><name pos:start="141:13" pos:end="141:18">cvtnum</name><argument_list pos:start="141:19" pos:end="141:32">(<argument pos:start="141:20" pos:end="141:31"><expr pos:start="141:20" pos:end="141:31"><name pos:start="141:20" pos:end="141:31"><name pos:start="141:20" pos:end="141:23">argv</name><index pos:start="141:24" pos:end="141:31">[<expr pos:start="141:25" pos:end="141:30"><name pos:start="141:25" pos:end="141:30">optind</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="143:5" pos:end="157:5"><if pos:start="143:5" pos:end="149:5">if <condition pos:start="143:8" pos:end="143:18">(<expr pos:start="143:9" pos:end="143:17"><name pos:start="143:9" pos:end="143:13">count</name> <operator pos:start="143:15" pos:end="143:15">&lt;</operator> <literal type="number" pos:start="143:17" pos:end="143:17">0</literal></expr>)</condition> <block pos:start="143:20" pos:end="149:5">{<block_content pos:start="145:9" pos:end="147:17">

        <expr_stmt pos:start="145:9" pos:end="145:46"><expr pos:start="145:9" pos:end="145:45"><call pos:start="145:9" pos:end="145:45"><name pos:start="145:9" pos:end="145:24">print_cvtnum_err</name><argument_list pos:start="145:25" pos:end="145:45">(<argument pos:start="145:26" pos:end="145:30"><expr pos:start="145:26" pos:end="145:30"><name pos:start="145:26" pos:end="145:30">count</name></expr></argument>, <argument pos:start="145:33" pos:end="145:44"><expr pos:start="145:33" pos:end="145:44"><name pos:start="145:33" pos:end="145:44"><name pos:start="145:33" pos:end="145:36">argv</name><index pos:start="145:37" pos:end="145:44">[<expr pos:start="145:38" pos:end="145:43"><name pos:start="145:38" pos:end="145:43">optind</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="147:9" pos:end="147:17">return <expr pos:start="147:16" pos:end="147:16"><literal type="number" pos:start="147:16" pos:end="147:16">0</literal></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="149:7" pos:end="157:5">else if <condition pos:start="149:15" pos:end="149:32">(<expr pos:start="149:16" pos:end="149:31"><name pos:start="149:16" pos:end="149:20">count</name> <operator pos:start="149:22" pos:end="149:22">&gt;</operator> <name pos:start="149:24" pos:end="149:31">SIZE_MAX</name></expr>)</condition> <block pos:start="149:34" pos:end="157:5">{<block_content pos:start="151:9" pos:end="155:17">

        <expr_stmt pos:start="151:9" pos:end="153:50"><expr pos:start="151:9" pos:end="153:49"><call pos:start="151:9" pos:end="153:49"><name pos:start="151:9" pos:end="151:14">printf</name><argument_list pos:start="151:15" pos:end="153:49">(<argument pos:start="151:16" pos:end="151:61"><expr pos:start="151:16" pos:end="151:61"><literal type="string" pos:start="151:16" pos:end="151:39">"length cannot exceed %"</literal> <name pos:start="151:41" pos:end="151:46">PRIu64</name> <literal type="string" pos:start="151:48" pos:end="151:61">", given %s\n"</literal></expr></argument>,

               <argument pos:start="153:16" pos:end="153:34"><expr pos:start="153:16" pos:end="153:34"><operator pos:start="153:16" pos:end="153:16">(</operator><name pos:start="153:17" pos:end="153:24">uint64_t</name><operator pos:start="153:25" pos:end="153:25">)</operator> <name pos:start="153:27" pos:end="153:34">SIZE_MAX</name></expr></argument>, <argument pos:start="153:37" pos:end="153:48"><expr pos:start="153:37" pos:end="153:48"><name pos:start="153:37" pos:end="153:48"><name pos:start="153:37" pos:end="153:40">argv</name><index pos:start="153:41" pos:end="153:48">[<expr pos:start="153:42" pos:end="153:47"><name pos:start="153:42" pos:end="153:47">optind</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="155:9" pos:end="155:17">return <expr pos:start="155:16" pos:end="155:16"><literal type="number" pos:start="155:16" pos:end="155:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="161:5" pos:end="165:5"><if pos:start="161:5" pos:end="165:5">if <condition pos:start="161:8" pos:end="161:35">(<expr pos:start="161:9" pos:end="161:34"><operator pos:start="161:9" pos:end="161:9">!</operator><name pos:start="161:10" pos:end="161:14">Pflag</name> <operator pos:start="161:16" pos:end="161:17">&amp;&amp;</operator> <operator pos:start="161:19" pos:end="161:19">(</operator><name pos:start="161:20" pos:end="161:24">lflag</name> <operator pos:start="161:26" pos:end="161:27">||</operator> <name pos:start="161:29" pos:end="161:33">sflag</name><operator pos:start="161:34" pos:end="161:34">)</operator></expr>)</condition> <block pos:start="161:37" pos:end="165:5">{<block_content pos:start="163:9" pos:end="163:47">

        <return pos:start="163:9" pos:end="163:47">return <expr pos:start="163:16" pos:end="163:46"><call pos:start="163:16" pos:end="163:46"><name pos:start="163:16" pos:end="163:35">qemuio_command_usage</name><argument_list pos:start="163:36" pos:end="163:46">(<argument pos:start="163:37" pos:end="163:45"><expr pos:start="163:37" pos:end="163:45"><operator pos:start="163:37" pos:end="163:37">&amp;</operator><name pos:start="163:38" pos:end="163:45">read_cmd</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="169:5" pos:end="173:5"><if pos:start="169:5" pos:end="173:5">if <condition pos:start="169:8" pos:end="169:15">(<expr pos:start="169:9" pos:end="169:14"><operator pos:start="169:9" pos:end="169:9">!</operator><name pos:start="169:10" pos:end="169:14">lflag</name></expr>)</condition> <block pos:start="169:17" pos:end="173:5">{<block_content pos:start="171:9" pos:end="171:47">

        <expr_stmt pos:start="171:9" pos:end="171:47"><expr pos:start="171:9" pos:end="171:46"><name pos:start="171:9" pos:end="171:21">pattern_count</name> <operator pos:start="171:23" pos:end="171:23">=</operator> <name pos:start="171:25" pos:end="171:29">count</name> <operator pos:start="171:31" pos:end="171:31">-</operator> <name pos:start="171:33" pos:end="171:46">pattern_offset</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="177:5" pos:end="183:5"><if pos:start="177:5" pos:end="183:5">if <condition pos:start="177:8" pos:end="177:72">(<expr pos:start="177:9" pos:end="177:71"><operator pos:start="177:9" pos:end="177:9">(</operator><name pos:start="177:10" pos:end="177:22">pattern_count</name> <operator pos:start="177:24" pos:end="177:24">&lt;</operator> <literal type="number" pos:start="177:26" pos:end="177:26">0</literal><operator pos:start="177:27" pos:end="177:27">)</operator> <operator pos:start="177:29" pos:end="177:30">||</operator> <operator pos:start="177:32" pos:end="177:32">(</operator><name pos:start="177:33" pos:end="177:45">pattern_count</name> <operator pos:start="177:47" pos:end="177:47">+</operator> <name pos:start="177:49" pos:end="177:62">pattern_offset</name> <operator pos:start="177:64" pos:end="177:64">&gt;</operator> <name pos:start="177:66" pos:end="177:70">count</name><operator pos:start="177:71" pos:end="177:71">)</operator></expr>)</condition>  <block pos:start="177:75" pos:end="183:5">{<block_content pos:start="179:9" pos:end="181:17">

        <expr_stmt pos:start="179:9" pos:end="179:72"><expr pos:start="179:9" pos:end="179:71"><call pos:start="179:9" pos:end="179:71"><name pos:start="179:9" pos:end="179:14">printf</name><argument_list pos:start="179:15" pos:end="179:71">(<argument pos:start="179:16" pos:end="179:70"><expr pos:start="179:16" pos:end="179:70"><literal type="string" pos:start="179:16" pos:end="179:70">"pattern verification range exceeds end of read data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="181:9" pos:end="181:17">return <expr pos:start="181:16" pos:end="181:16"><literal type="number" pos:start="181:16" pos:end="181:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="187:5" pos:end="209:5"><if pos:start="187:5" pos:end="209:5">if <condition pos:start="187:8" pos:end="187:14">(<expr pos:start="187:9" pos:end="187:13"><name pos:start="187:9" pos:end="187:13">bflag</name></expr>)</condition> <block pos:start="187:16" pos:end="209:5">{<block_content pos:start="189:9" pos:end="207:9">

        <if_stmt pos:start="189:9" pos:end="197:9"><if pos:start="189:9" pos:end="197:9">if <condition pos:start="189:12" pos:end="189:27">(<expr pos:start="189:13" pos:end="189:26"><name pos:start="189:13" pos:end="189:18">offset</name> <operator pos:start="189:20" pos:end="189:20">&amp;</operator> <literal type="number" pos:start="189:22" pos:end="189:26">0x1ff</literal></expr>)</condition> <block pos:start="189:29" pos:end="197:9">{<block_content pos:start="191:13" pos:end="195:21">

            <expr_stmt pos:start="191:13" pos:end="193:27"><expr pos:start="191:13" pos:end="193:26"><call pos:start="191:13" pos:end="193:26"><name pos:start="191:13" pos:end="191:18">printf</name><argument_list pos:start="191:19" pos:end="193:26">(<argument pos:start="191:20" pos:end="191:63"><expr pos:start="191:20" pos:end="191:63"><literal type="string" pos:start="191:20" pos:end="191:29">"offset %"</literal> <name pos:start="191:31" pos:end="191:36">PRId64</name> <literal type="string" pos:start="191:38" pos:end="191:63">" is not sector aligned\n"</literal></expr></argument>,

                   <argument pos:start="193:20" pos:end="193:25"><expr pos:start="193:20" pos:end="193:25"><name pos:start="193:20" pos:end="193:25">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="195:13" pos:end="195:21">return <expr pos:start="195:20" pos:end="195:20"><literal type="number" pos:start="195:20" pos:end="195:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="199:9" pos:end="207:9"><if pos:start="199:9" pos:end="207:9">if <condition pos:start="199:12" pos:end="199:26">(<expr pos:start="199:13" pos:end="199:25"><name pos:start="199:13" pos:end="199:17">count</name> <operator pos:start="199:19" pos:end="199:19">&amp;</operator> <literal type="number" pos:start="199:21" pos:end="199:25">0x1ff</literal></expr>)</condition> <block pos:start="199:28" pos:end="207:9">{<block_content pos:start="201:13" pos:end="205:21">

            <expr_stmt pos:start="201:13" pos:end="203:26"><expr pos:start="201:13" pos:end="203:25"><call pos:start="201:13" pos:end="203:25"><name pos:start="201:13" pos:end="201:18">printf</name><argument_list pos:start="201:19" pos:end="203:25">(<argument pos:start="201:20" pos:end="201:60"><expr pos:start="201:20" pos:end="201:60"><literal type="string" pos:start="201:20" pos:end="201:28">"count %"</literal><name pos:start="201:29" pos:end="201:34">PRId64</name><literal type="string" pos:start="201:35" pos:end="201:60">" is not sector aligned\n"</literal></expr></argument>,

                   <argument pos:start="203:20" pos:end="203:24"><expr pos:start="203:20" pos:end="203:24"><name pos:start="203:20" pos:end="203:24">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="205:13" pos:end="205:21">return <expr pos:start="205:20" pos:end="205:20"><literal type="number" pos:start="205:20" pos:end="205:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="213:5" pos:end="213:42"><expr pos:start="213:5" pos:end="213:41"><name pos:start="213:5" pos:end="213:7">buf</name> <operator pos:start="213:9" pos:end="213:9">=</operator> <call pos:start="213:11" pos:end="213:41"><name pos:start="213:11" pos:end="213:23">qemu_io_alloc</name><argument_list pos:start="213:24" pos:end="213:41">(<argument pos:start="213:25" pos:end="213:27"><expr pos:start="213:25" pos:end="213:27"><name pos:start="213:25" pos:end="213:27">blk</name></expr></argument>, <argument pos:start="213:30" pos:end="213:34"><expr pos:start="213:30" pos:end="213:34"><name pos:start="213:30" pos:end="213:34">count</name></expr></argument>, <argument pos:start="213:37" pos:end="213:40"><expr pos:start="213:37" pos:end="213:40"><literal type="number" pos:start="213:37" pos:end="213:40">0xab</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="217:5" pos:end="217:28"><expr pos:start="217:5" pos:end="217:27"><call pos:start="217:5" pos:end="217:27"><name pos:start="217:5" pos:end="217:16">gettimeofday</name><argument_list pos:start="217:17" pos:end="217:27">(<argument pos:start="217:18" pos:end="217:20"><expr pos:start="217:18" pos:end="217:20"><operator pos:start="217:18" pos:end="217:18">&amp;</operator><name pos:start="217:19" pos:end="217:20">t1</name></expr></argument>, <argument pos:start="217:23" pos:end="217:26"><expr pos:start="217:23" pos:end="217:26"><name pos:start="217:23" pos:end="217:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="219:5" pos:end="227:5"><if pos:start="219:5" pos:end="223:5">if <condition pos:start="219:8" pos:end="219:14">(<expr pos:start="219:9" pos:end="219:13"><name pos:start="219:9" pos:end="219:13">bflag</name></expr>)</condition> <block pos:start="219:16" pos:end="223:5">{<block_content pos:start="221:9" pos:end="221:63">

        <expr_stmt pos:start="221:9" pos:end="221:63"><expr pos:start="221:9" pos:end="221:62"><name pos:start="221:9" pos:end="221:11">cnt</name> <operator pos:start="221:13" pos:end="221:13">=</operator> <call pos:start="221:15" pos:end="221:62"><name pos:start="221:15" pos:end="221:29">do_load_vmstate</name><argument_list pos:start="221:30" pos:end="221:62">(<argument pos:start="221:31" pos:end="221:33"><expr pos:start="221:31" pos:end="221:33"><name pos:start="221:31" pos:end="221:33">blk</name></expr></argument>, <argument pos:start="221:36" pos:end="221:38"><expr pos:start="221:36" pos:end="221:38"><name pos:start="221:36" pos:end="221:38">buf</name></expr></argument>, <argument pos:start="221:41" pos:end="221:46"><expr pos:start="221:41" pos:end="221:46"><name pos:start="221:41" pos:end="221:46">offset</name></expr></argument>, <argument pos:start="221:49" pos:end="221:53"><expr pos:start="221:49" pos:end="221:53"><name pos:start="221:49" pos:end="221:53">count</name></expr></argument>, <argument pos:start="221:56" pos:end="221:61"><expr pos:start="221:56" pos:end="221:61"><operator pos:start="221:56" pos:end="221:56">&amp;</operator><name pos:start="221:57" pos:end="221:61">total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="223:7" pos:end="227:5">else <block pos:start="223:12" pos:end="227:5">{<block_content pos:start="225:9" pos:end="225:56">

        <expr_stmt pos:start="225:9" pos:end="225:56"><expr pos:start="225:9" pos:end="225:55"><name pos:start="225:9" pos:end="225:11">cnt</name> <operator pos:start="225:13" pos:end="225:13">=</operator> <call pos:start="225:15" pos:end="225:55"><name pos:start="225:15" pos:end="225:22">do_pread</name><argument_list pos:start="225:23" pos:end="225:55">(<argument pos:start="225:24" pos:end="225:26"><expr pos:start="225:24" pos:end="225:26"><name pos:start="225:24" pos:end="225:26">blk</name></expr></argument>, <argument pos:start="225:29" pos:end="225:31"><expr pos:start="225:29" pos:end="225:31"><name pos:start="225:29" pos:end="225:31">buf</name></expr></argument>, <argument pos:start="225:34" pos:end="225:39"><expr pos:start="225:34" pos:end="225:39"><name pos:start="225:34" pos:end="225:39">offset</name></expr></argument>, <argument pos:start="225:42" pos:end="225:46"><expr pos:start="225:42" pos:end="225:46"><name pos:start="225:42" pos:end="225:46">count</name></expr></argument>, <argument pos:start="225:49" pos:end="225:54"><expr pos:start="225:49" pos:end="225:54"><operator pos:start="225:49" pos:end="225:49">&amp;</operator><name pos:start="225:50" pos:end="225:54">total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="229:5" pos:end="229:28"><expr pos:start="229:5" pos:end="229:27"><call pos:start="229:5" pos:end="229:27"><name pos:start="229:5" pos:end="229:16">gettimeofday</name><argument_list pos:start="229:17" pos:end="229:27">(<argument pos:start="229:18" pos:end="229:20"><expr pos:start="229:18" pos:end="229:20"><operator pos:start="229:18" pos:end="229:18">&amp;</operator><name pos:start="229:19" pos:end="229:20">t2</name></expr></argument>, <argument pos:start="229:23" pos:end="229:26"><expr pos:start="229:23" pos:end="229:26"><name pos:start="229:23" pos:end="229:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="233:5" pos:end="239:5"><if pos:start="233:5" pos:end="239:5">if <condition pos:start="233:8" pos:end="233:16">(<expr pos:start="233:9" pos:end="233:15"><name pos:start="233:9" pos:end="233:11">cnt</name> <operator pos:start="233:13" pos:end="233:13">&lt;</operator> <literal type="number" pos:start="233:15" pos:end="233:15">0</literal></expr>)</condition> <block pos:start="233:18" pos:end="239:5">{<block_content pos:start="235:9" pos:end="237:17">

        <expr_stmt pos:start="235:9" pos:end="235:52"><expr pos:start="235:9" pos:end="235:51"><call pos:start="235:9" pos:end="235:51"><name pos:start="235:9" pos:end="235:14">printf</name><argument_list pos:start="235:15" pos:end="235:51">(<argument pos:start="235:16" pos:end="235:34"><expr pos:start="235:16" pos:end="235:34"><literal type="string" pos:start="235:16" pos:end="235:34">"read failed: %s\n"</literal></expr></argument>, <argument pos:start="235:37" pos:end="235:50"><expr pos:start="235:37" pos:end="235:50"><call pos:start="235:37" pos:end="235:50"><name pos:start="235:37" pos:end="235:44">strerror</name><argument_list pos:start="235:45" pos:end="235:50">(<argument pos:start="235:46" pos:end="235:49"><expr pos:start="235:46" pos:end="235:49"><operator pos:start="235:46" pos:end="235:46">-</operator><name pos:start="235:47" pos:end="235:49">cnt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="237:9" pos:end="237:17">goto <name pos:start="237:14" pos:end="237:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="243:5" pos:end="261:5"><if pos:start="243:5" pos:end="261:5">if <condition pos:start="243:8" pos:end="243:14">(<expr pos:start="243:9" pos:end="243:13"><name pos:start="243:9" pos:end="243:13">Pflag</name></expr>)</condition> <block pos:start="243:16" pos:end="261:5">{<block_content pos:start="245:9" pos:end="259:24">

        <decl_stmt pos:start="245:9" pos:end="245:48"><decl pos:start="245:9" pos:end="245:47"><type pos:start="245:9" pos:end="245:14"><name pos:start="245:9" pos:end="245:12">void</name> <modifier pos:start="245:14" pos:end="245:14">*</modifier></type><name pos:start="245:15" pos:end="245:21">cmp_buf</name> <init pos:start="245:23" pos:end="245:47">= <expr pos:start="245:25" pos:end="245:47"><call pos:start="245:25" pos:end="245:47"><name pos:start="245:25" pos:end="245:32">g_malloc</name><argument_list pos:start="245:33" pos:end="245:47">(<argument pos:start="245:34" pos:end="245:46"><expr pos:start="245:34" pos:end="245:46"><name pos:start="245:34" pos:end="245:46">pattern_count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="247:9" pos:end="247:48"><expr pos:start="247:9" pos:end="247:47"><call pos:start="247:9" pos:end="247:47"><name pos:start="247:9" pos:end="247:14">memset</name><argument_list pos:start="247:15" pos:end="247:47">(<argument pos:start="247:16" pos:end="247:22"><expr pos:start="247:16" pos:end="247:22"><name pos:start="247:16" pos:end="247:22">cmp_buf</name></expr></argument>, <argument pos:start="247:25" pos:end="247:31"><expr pos:start="247:25" pos:end="247:31"><name pos:start="247:25" pos:end="247:31">pattern</name></expr></argument>, <argument pos:start="247:34" pos:end="247:46"><expr pos:start="247:34" pos:end="247:46"><name pos:start="247:34" pos:end="247:46">pattern_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="249:9" pos:end="257:9"><if pos:start="249:9" pos:end="257:9">if <condition pos:start="249:12" pos:end="249:65">(<expr pos:start="249:13" pos:end="249:64"><call pos:start="249:13" pos:end="249:64"><name pos:start="249:13" pos:end="249:18">memcmp</name><argument_list pos:start="249:19" pos:end="249:64">(<argument pos:start="249:20" pos:end="249:39"><expr pos:start="249:20" pos:end="249:39"><name pos:start="249:20" pos:end="249:22">buf</name> <operator pos:start="249:24" pos:end="249:24">+</operator> <name pos:start="249:26" pos:end="249:39">pattern_offset</name></expr></argument>, <argument pos:start="249:42" pos:end="249:48"><expr pos:start="249:42" pos:end="249:48"><name pos:start="249:42" pos:end="249:48">cmp_buf</name></expr></argument>, <argument pos:start="249:51" pos:end="249:63"><expr pos:start="249:51" pos:end="249:63"><name pos:start="249:51" pos:end="249:63">pattern_count</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="249:67" pos:end="257:9">{<block_content pos:start="251:13" pos:end="255:59">

            <expr_stmt pos:start="251:13" pos:end="255:59"><expr pos:start="251:13" pos:end="255:58"><call pos:start="251:13" pos:end="255:58"><name pos:start="251:13" pos:end="251:18">printf</name><argument_list pos:start="251:19" pos:end="255:58">(<argument pos:start="251:20" pos:end="253:47"><expr pos:start="251:20" pos:end="253:47"><literal type="string" pos:start="251:20" pos:end="251:60">"Pattern verification failed at offset %"</literal>

                   <name pos:start="253:20" pos:end="253:25">PRId64</name> <literal type="string" pos:start="253:27" pos:end="253:31">", %"</literal><name pos:start="253:32" pos:end="253:37">PRId64</name><literal type="string" pos:start="253:38" pos:end="253:47">" bytes\n"</literal></expr></argument>,

                   <argument pos:start="255:20" pos:end="255:42"><expr pos:start="255:20" pos:end="255:42"><name pos:start="255:20" pos:end="255:25">offset</name> <operator pos:start="255:27" pos:end="255:27">+</operator> <name pos:start="255:29" pos:end="255:42">pattern_offset</name></expr></argument>, <argument pos:start="255:45" pos:end="255:57"><expr pos:start="255:45" pos:end="255:57"><name pos:start="255:45" pos:end="255:57">pattern_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="259:9" pos:end="259:24"><expr pos:start="259:9" pos:end="259:23"><call pos:start="259:9" pos:end="259:23"><name pos:start="259:9" pos:end="259:14">g_free</name><argument_list pos:start="259:15" pos:end="259:23">(<argument pos:start="259:16" pos:end="259:22"><expr pos:start="259:16" pos:end="259:22"><name pos:start="259:16" pos:end="259:22">cmp_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="265:5" pos:end="269:5"><if pos:start="265:5" pos:end="269:5">if <condition pos:start="265:8" pos:end="265:14">(<expr pos:start="265:9" pos:end="265:13"><name pos:start="265:9" pos:end="265:13">qflag</name></expr>)</condition> <block pos:start="265:16" pos:end="269:5">{<block_content pos:start="267:9" pos:end="267:17">

        <goto pos:start="267:9" pos:end="267:17">goto <name pos:start="267:14" pos:end="267:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="273:5" pos:end="277:5"><if pos:start="273:5" pos:end="277:5">if <condition pos:start="273:8" pos:end="273:14">(<expr pos:start="273:9" pos:end="273:13"><name pos:start="273:9" pos:end="273:13">vflag</name></expr>)</condition> <block pos:start="273:16" pos:end="277:5">{<block_content pos:start="275:9" pos:end="275:40">

        <expr_stmt pos:start="275:9" pos:end="275:40"><expr pos:start="275:9" pos:end="275:39"><call pos:start="275:9" pos:end="275:39"><name pos:start="275:9" pos:end="275:19">dump_buffer</name><argument_list pos:start="275:20" pos:end="275:39">(<argument pos:start="275:21" pos:end="275:23"><expr pos:start="275:21" pos:end="275:23"><name pos:start="275:21" pos:end="275:23">buf</name></expr></argument>, <argument pos:start="275:26" pos:end="275:31"><expr pos:start="275:26" pos:end="275:31"><name pos:start="275:26" pos:end="275:31">offset</name></expr></argument>, <argument pos:start="275:34" pos:end="275:38"><expr pos:start="275:34" pos:end="275:38"><name pos:start="275:34" pos:end="275:38">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="281:5" pos:end="281:60">/* Finally, report back -- -C gives a parsable format */</comment>

    <expr_stmt pos:start="283:5" pos:end="283:22"><expr pos:start="283:5" pos:end="283:21"><name pos:start="283:5" pos:end="283:6">t2</name> <operator pos:start="283:8" pos:end="283:8">=</operator> <call pos:start="283:10" pos:end="283:21"><name pos:start="283:10" pos:end="283:13">tsub</name><argument_list pos:start="283:14" pos:end="283:21">(<argument pos:start="283:15" pos:end="283:16"><expr pos:start="283:15" pos:end="283:16"><name pos:start="283:15" pos:end="283:16">t2</name></expr></argument>, <argument pos:start="283:19" pos:end="283:20"><expr pos:start="283:19" pos:end="283:20"><name pos:start="283:19" pos:end="283:20">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="285:5" pos:end="285:64"><expr pos:start="285:5" pos:end="285:63"><call pos:start="285:5" pos:end="285:63"><name pos:start="285:5" pos:end="285:16">print_report</name><argument_list pos:start="285:17" pos:end="285:63">(<argument pos:start="285:18" pos:end="285:23"><expr pos:start="285:18" pos:end="285:23"><literal type="string" pos:start="285:18" pos:end="285:23">"read"</literal></expr></argument>, <argument pos:start="285:26" pos:end="285:28"><expr pos:start="285:26" pos:end="285:28"><operator pos:start="285:26" pos:end="285:26">&amp;</operator><name pos:start="285:27" pos:end="285:28">t2</name></expr></argument>, <argument pos:start="285:31" pos:end="285:36"><expr pos:start="285:31" pos:end="285:36"><name pos:start="285:31" pos:end="285:36">offset</name></expr></argument>, <argument pos:start="285:39" pos:end="285:43"><expr pos:start="285:39" pos:end="285:43"><name pos:start="285:39" pos:end="285:43">count</name></expr></argument>, <argument pos:start="285:46" pos:end="285:50"><expr pos:start="285:46" pos:end="285:50"><name pos:start="285:46" pos:end="285:50">total</name></expr></argument>, <argument pos:start="285:53" pos:end="285:55"><expr pos:start="285:53" pos:end="285:55"><name pos:start="285:53" pos:end="285:55">cnt</name></expr></argument>, <argument pos:start="285:58" pos:end="285:62"><expr pos:start="285:58" pos:end="285:62"><name pos:start="285:58" pos:end="285:62">Cflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="289:1" pos:end="289:4"><name pos:start="289:1" pos:end="289:3">out</name>:</label>

    <expr_stmt pos:start="291:5" pos:end="291:22"><expr pos:start="291:5" pos:end="291:21"><call pos:start="291:5" pos:end="291:21"><name pos:start="291:5" pos:end="291:16">qemu_io_free</name><argument_list pos:start="291:17" pos:end="291:21">(<argument pos:start="291:18" pos:end="291:20"><expr pos:start="291:18" pos:end="291:20"><name pos:start="291:18" pos:end="291:20">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="295:5" pos:end="295:13">return <expr pos:start="295:12" pos:end="295:12"><literal type="number" pos:start="295:12" pos:end="295:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
