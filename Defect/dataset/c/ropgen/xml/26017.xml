<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26017.c" pos:tabs="8"><function pos:start="1:1" pos:end="67:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:39">start_auth_vencrypt_subauth</name><parameter_list pos:start="1:40" pos:end="1:53">(<parameter pos:start="1:41" pos:end="1:52"><decl pos:start="1:41" pos:end="1:52"><type pos:start="1:41" pos:end="1:50"><name pos:start="1:41" pos:end="1:48">VncState</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:52">vs</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="67:1">{<block_content pos:start="5:5" pos:end="65:5">

    <switch pos:start="5:5" pos:end="65:5">switch <condition pos:start="5:12" pos:end="5:28">(<expr pos:start="5:13" pos:end="5:27"><name pos:start="5:13" pos:end="5:27"><name pos:start="5:13" pos:end="5:14">vs</name><operator pos:start="5:15" pos:end="5:16">-&gt;</operator><name pos:start="5:17" pos:end="5:18">vd</name><operator pos:start="5:19" pos:end="5:20">-&gt;</operator><name pos:start="5:21" pos:end="5:27">subauth</name></name></expr>)</condition> <block pos:start="5:30" pos:end="65:5">{<block_content pos:start="7:5" pos:end="63:28">

    <case pos:start="7:5" pos:end="7:35">case <expr pos:start="7:10" pos:end="7:34"><name pos:start="7:10" pos:end="7:34">VNC_AUTH_VENCRYPT_TLSNONE</name></expr>:</case>

    <case pos:start="9:5" pos:end="9:36">case <expr pos:start="9:10" pos:end="9:35"><name pos:start="9:10" pos:end="9:35">VNC_AUTH_VENCRYPT_X509NONE</name></expr>:</case>

       <expr_stmt pos:start="11:8" pos:end="11:43"><expr pos:start="11:8" pos:end="11:42"><call pos:start="11:8" pos:end="11:42"><name pos:start="11:8" pos:end="11:16">VNC_DEBUG</name><argument_list pos:start="11:17" pos:end="11:42">(<argument pos:start="11:18" pos:end="11:41"><expr pos:start="11:18" pos:end="11:41"><literal type="string" pos:start="11:18" pos:end="11:41">"Accept TLS auth none\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <expr_stmt pos:start="13:8" pos:end="13:28"><expr pos:start="13:8" pos:end="13:27"><call pos:start="13:8" pos:end="13:27"><name pos:start="13:8" pos:end="13:20">vnc_write_u32</name><argument_list pos:start="13:21" pos:end="13:27">(<argument pos:start="13:22" pos:end="13:23"><expr pos:start="13:22" pos:end="13:23"><name pos:start="13:22" pos:end="13:23">vs</name></expr></argument>, <argument pos:start="13:26" pos:end="13:26"><expr pos:start="13:26" pos:end="13:26"><literal type="number" pos:start="13:26" pos:end="13:26">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="13:30" pos:end="13:57">/* Accept auth completion */</comment>

       <expr_stmt pos:start="15:8" pos:end="15:29"><expr pos:start="15:8" pos:end="15:28"><call pos:start="15:8" pos:end="15:28"><name pos:start="15:8" pos:end="15:24">start_client_init</name><argument_list pos:start="15:25" pos:end="15:28">(<argument pos:start="15:26" pos:end="15:27"><expr pos:start="15:26" pos:end="15:27"><name pos:start="15:26" pos:end="15:27">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <break pos:start="17:8" pos:end="17:13">break;</break>



    <case pos:start="21:5" pos:end="21:34">case <expr pos:start="21:10" pos:end="21:33"><name pos:start="21:10" pos:end="21:33">VNC_AUTH_VENCRYPT_TLSVNC</name></expr>:</case>

    <case pos:start="23:5" pos:end="23:35">case <expr pos:start="23:10" pos:end="23:34"><name pos:start="23:10" pos:end="23:34">VNC_AUTH_VENCRYPT_X509VNC</name></expr>:</case>

       <expr_stmt pos:start="25:8" pos:end="25:41"><expr pos:start="25:8" pos:end="25:40"><call pos:start="25:8" pos:end="25:40"><name pos:start="25:8" pos:end="25:16">VNC_DEBUG</name><argument_list pos:start="25:17" pos:end="25:40">(<argument pos:start="25:18" pos:end="25:39"><expr pos:start="25:18" pos:end="25:39"><literal type="string" pos:start="25:18" pos:end="25:39">"Start TLS auth VNC\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <expr_stmt pos:start="27:8" pos:end="27:26"><expr pos:start="27:8" pos:end="27:25"><call pos:start="27:8" pos:end="27:25"><name pos:start="27:8" pos:end="27:21">start_auth_vnc</name><argument_list pos:start="27:22" pos:end="27:25">(<argument pos:start="27:23" pos:end="27:24"><expr pos:start="27:23" pos:end="27:24"><name pos:start="27:23" pos:end="27:24">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <break pos:start="29:8" pos:end="34:0">break;</break>



<cpp:ifdef pos:start="33:1" pos:end="33:22">#<cpp:directive pos:start="33:2" pos:end="33:6">ifdef</cpp:directive> <name pos:start="33:8" pos:end="33:22">CONFIG_VNC_SASL</name></cpp:ifdef>

    <case pos:start="35:5" pos:end="35:35">case <expr pos:start="35:10" pos:end="35:34"><name pos:start="35:10" pos:end="35:34">VNC_AUTH_VENCRYPT_TLSSASL</name></expr>:</case>

    <case pos:start="37:5" pos:end="37:36">case <expr pos:start="37:10" pos:end="37:35"><name pos:start="37:10" pos:end="37:35">VNC_AUTH_VENCRYPT_X509SASL</name></expr>:</case>

      <expr_stmt pos:start="39:7" pos:end="39:41"><expr pos:start="39:7" pos:end="39:40"><call pos:start="39:7" pos:end="39:40"><name pos:start="39:7" pos:end="39:15">VNC_DEBUG</name><argument_list pos:start="39:16" pos:end="39:40">(<argument pos:start="39:17" pos:end="39:39"><expr pos:start="39:17" pos:end="39:39"><literal type="string" pos:start="39:17" pos:end="39:39">"Start TLS auth SASL\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return pos:start="41:7" pos:end="44:0">return <expr pos:start="41:14" pos:end="41:32"><call pos:start="41:14" pos:end="41:32"><name pos:start="41:14" pos:end="41:28">start_auth_sasl</name><argument_list pos:start="41:29" pos:end="41:32">(<argument pos:start="41:30" pos:end="41:31"><expr pos:start="41:30" pos:end="41:31"><name pos:start="41:30" pos:end="41:31">vs</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:endif pos:start="43:1" pos:end="43:6">#<cpp:directive pos:start="43:2" pos:end="43:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="43:8" pos:end="43:28">/* CONFIG_VNC_SASL */</comment>



    <default pos:start="47:5" pos:end="47:12">default:</default> <comment type="block" pos:start="47:14" pos:end="47:59">/* Should not be possible, but just in case */</comment>

       <expr_stmt pos:start="49:8" pos:end="49:65"><expr pos:start="49:8" pos:end="49:64"><call pos:start="49:8" pos:end="49:64"><name pos:start="49:8" pos:end="49:16">VNC_DEBUG</name><argument_list pos:start="49:17" pos:end="49:64">(<argument pos:start="49:18" pos:end="49:49"><expr pos:start="49:18" pos:end="49:49"><literal type="string" pos:start="49:18" pos:end="49:49">"Reject subauth %d server bug\n"</literal></expr></argument>, <argument pos:start="49:52" pos:end="49:63"><expr pos:start="49:52" pos:end="49:63"><name pos:start="49:52" pos:end="49:63"><name pos:start="49:52" pos:end="49:53">vs</name><operator pos:start="49:54" pos:end="49:55">-&gt;</operator><name pos:start="49:56" pos:end="49:57">vd</name><operator pos:start="49:58" pos:end="49:59">-&gt;</operator><name pos:start="49:60" pos:end="49:63">auth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <expr_stmt pos:start="51:8" pos:end="51:27"><expr pos:start="51:8" pos:end="51:26"><call pos:start="51:8" pos:end="51:26"><name pos:start="51:8" pos:end="51:19">vnc_write_u8</name><argument_list pos:start="51:20" pos:end="51:26">(<argument pos:start="51:21" pos:end="51:22"><expr pos:start="51:21" pos:end="51:22"><name pos:start="51:21" pos:end="51:22">vs</name></expr></argument>, <argument pos:start="51:25" pos:end="51:25"><expr pos:start="51:25" pos:end="51:25"><literal type="number" pos:start="51:25" pos:end="51:25">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <if_stmt pos:start="53:8" pos:end="61:8"><if pos:start="53:8" pos:end="61:8">if <condition pos:start="53:11" pos:end="53:26">(<expr pos:start="53:12" pos:end="53:25"><name pos:start="53:12" pos:end="53:20"><name pos:start="53:12" pos:end="53:13">vs</name><operator pos:start="53:14" pos:end="53:15">-&gt;</operator><name pos:start="53:16" pos:end="53:20">minor</name></name> <operator pos:start="53:22" pos:end="53:23">&gt;=</operator> <literal type="number" pos:start="53:25" pos:end="53:25">8</literal></expr>)</condition> <block pos:start="53:28" pos:end="61:8">{<block_content pos:start="55:12" pos:end="59:43">

           <decl_stmt pos:start="55:12" pos:end="55:71"><decl pos:start="55:12" pos:end="55:70"><type pos:start="55:12" pos:end="55:28"><specifier pos:start="55:12" pos:end="55:17">static</specifier> <specifier pos:start="55:19" pos:end="55:23">const</specifier> <name pos:start="55:25" pos:end="55:28">char</name></type> <name pos:start="55:30" pos:end="55:34"><name pos:start="55:30" pos:end="55:32">err</name><index pos:start="55:33" pos:end="55:34">[]</index></name> <init pos:start="55:36" pos:end="55:70">= <expr pos:start="55:38" pos:end="55:70"><literal type="string" pos:start="55:38" pos:end="55:70">"Unsupported authentication type"</literal></expr></init></decl>;</decl_stmt>

           <expr_stmt pos:start="57:12" pos:end="57:42"><expr pos:start="57:12" pos:end="57:41"><call pos:start="57:12" pos:end="57:41"><name pos:start="57:12" pos:end="57:24">vnc_write_u32</name><argument_list pos:start="57:25" pos:end="57:41">(<argument pos:start="57:26" pos:end="57:27"><expr pos:start="57:26" pos:end="57:27"><name pos:start="57:26" pos:end="57:27">vs</name></expr></argument>, <argument pos:start="57:30" pos:end="57:40"><expr pos:start="57:30" pos:end="57:40"><sizeof pos:start="57:30" pos:end="57:40">sizeof<argument_list pos:start="57:36" pos:end="57:40">(<argument pos:start="57:37" pos:end="57:39"><expr pos:start="57:37" pos:end="57:39"><name pos:start="57:37" pos:end="57:39">err</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           <expr_stmt pos:start="59:12" pos:end="59:43"><expr pos:start="59:12" pos:end="59:42"><call pos:start="59:12" pos:end="59:42"><name pos:start="59:12" pos:end="59:20">vnc_write</name><argument_list pos:start="59:21" pos:end="59:42">(<argument pos:start="59:22" pos:end="59:23"><expr pos:start="59:22" pos:end="59:23"><name pos:start="59:22" pos:end="59:23">vs</name></expr></argument>, <argument pos:start="59:26" pos:end="59:28"><expr pos:start="59:26" pos:end="59:28"><name pos:start="59:26" pos:end="59:28">err</name></expr></argument>, <argument pos:start="59:31" pos:end="59:41"><expr pos:start="59:31" pos:end="59:41"><sizeof pos:start="59:31" pos:end="59:41">sizeof<argument_list pos:start="59:37" pos:end="59:41">(<argument pos:start="59:38" pos:end="59:40"><expr pos:start="59:38" pos:end="59:40"><name pos:start="59:38" pos:end="59:40">err</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       </block_content>}</block></if></if_stmt>

       <expr_stmt pos:start="63:8" pos:end="63:28"><expr pos:start="63:8" pos:end="63:27"><call pos:start="63:8" pos:end="63:27"><name pos:start="63:8" pos:end="63:23">vnc_client_error</name><argument_list pos:start="63:24" pos:end="63:27">(<argument pos:start="63:25" pos:end="63:26"><expr pos:start="63:25" pos:end="63:26"><name pos:start="63:25" pos:end="63:26">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
