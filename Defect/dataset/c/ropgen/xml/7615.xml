<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/7615.c" pos:tabs="8"><function pos:start="1:1" pos:end="435:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:22">vmdk_create</name><parameter_list pos:start="1:23" pos:end="3:36">(<parameter pos:start="1:24" pos:end="1:43"><decl pos:start="1:24" pos:end="1:43"><type pos:start="1:24" pos:end="1:43"><specifier pos:start="1:24" pos:end="1:28">const</specifier> <name pos:start="1:30" pos:end="1:33">char</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:43">filename</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:73"><decl pos:start="1:46" pos:end="1:73"><type pos:start="1:46" pos:end="1:73"><name pos:start="1:46" pos:end="1:64">QEMUOptionParameter</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:73">options</name></decl></parameter>,

                       <parameter pos:start="3:24" pos:end="3:35"><decl pos:start="3:24" pos:end="3:35"><type pos:start="3:24" pos:end="3:35"><name pos:start="3:24" pos:end="3:28">Error</name> <modifier pos:start="3:30" pos:end="3:30">*</modifier><modifier pos:start="3:31" pos:end="3:31">*</modifier></type><name pos:start="3:32" pos:end="3:35">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="435:1">{<block_content pos:start="7:5" pos:end="433:15">

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">idx</name> <init pos:start="7:13" pos:end="7:15">= <expr pos:start="7:15" pos:end="7:15"><literal type="number" pos:start="7:15" pos:end="7:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:36"><decl pos:start="9:5" pos:end="9:35"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">BlockDriverState</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:28">new_bs</name> <init pos:start="9:30" pos:end="9:35">= <expr pos:start="9:32" pos:end="9:35"><name pos:start="9:32" pos:end="9:35">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:9">Error</name> <modifier pos:start="11:11" pos:end="11:11">*</modifier></type><name pos:start="11:12" pos:end="11:20">local_err</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:8">char</name> <modifier pos:start="13:10" pos:end="13:10">*</modifier></type><name pos:start="13:11" pos:end="13:14">desc</name> <init pos:start="13:16" pos:end="13:21">= <expr pos:start="13:18" pos:end="13:21"><name pos:start="13:18" pos:end="13:21">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:37"><decl pos:start="15:5" pos:end="15:26"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">int64_t</name></type> <name pos:start="15:13" pos:end="15:22">total_size</name> <init pos:start="15:24" pos:end="15:26">= <expr pos:start="15:26" pos:end="15:26"><literal type="number" pos:start="15:26" pos:end="15:26">0</literal></expr></init></decl>, <decl pos:start="15:29" pos:end="15:36"><type ref="prev" pos:start="15:5" pos:end="15:11"/><name pos:start="15:29" pos:end="15:36">filesize</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:36"><decl pos:start="17:5" pos:end="17:35"><type pos:start="17:5" pos:end="17:16"><specifier pos:start="17:5" pos:end="17:9">const</specifier> <name pos:start="17:11" pos:end="17:14">char</name> <modifier pos:start="17:16" pos:end="17:16">*</modifier></type><name pos:start="17:17" pos:end="17:28">adapter_type</name> <init pos:start="17:30" pos:end="17:35">= <expr pos:start="17:32" pos:end="17:35"><name pos:start="17:32" pos:end="17:35">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:36"><decl pos:start="19:5" pos:end="19:35"><type pos:start="19:5" pos:end="19:16"><specifier pos:start="19:5" pos:end="19:9">const</specifier> <name pos:start="19:11" pos:end="19:14">char</name> <modifier pos:start="19:16" pos:end="19:16">*</modifier></type><name pos:start="19:17" pos:end="19:28">backing_file</name> <init pos:start="19:30" pos:end="19:35">= <expr pos:start="19:32" pos:end="19:35"><name pos:start="19:32" pos:end="19:35">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:27"><decl pos:start="21:5" pos:end="21:26"><type pos:start="21:5" pos:end="21:16"><specifier pos:start="21:5" pos:end="21:9">const</specifier> <name pos:start="21:11" pos:end="21:14">char</name> <modifier pos:start="21:16" pos:end="21:16">*</modifier></type><name pos:start="21:17" pos:end="21:19">fmt</name> <init pos:start="21:21" pos:end="21:26">= <expr pos:start="21:23" pos:end="21:26"><name pos:start="21:23" pos:end="21:26">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:18"><decl pos:start="23:5" pos:end="23:17"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:13">flags</name> <init pos:start="23:15" pos:end="23:17">= <expr pos:start="23:17" pos:end="23:17"><literal type="number" pos:start="23:17" pos:end="23:17">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:16"><decl pos:start="25:5" pos:end="25:15"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:11">ret</name> <init pos:start="25:13" pos:end="25:15">= <expr pos:start="25:15" pos:end="25:15"><literal type="number" pos:start="25:15" pos:end="25:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:31"><decl pos:start="27:5" pos:end="27:13"><type pos:start="27:5" pos:end="27:8"><name pos:start="27:5" pos:end="27:8">bool</name></type> <name pos:start="27:10" pos:end="27:13">flat</name></decl>, <decl pos:start="27:16" pos:end="27:20"><type ref="prev" pos:start="27:5" pos:end="27:8"/><name pos:start="27:16" pos:end="27:20">split</name></decl>, <decl pos:start="27:23" pos:end="27:30"><type ref="prev" pos:start="27:5" pos:end="27:8"/><name pos:start="27:23" pos:end="27:30">compress</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:28"><decl pos:start="29:5" pos:end="29:27"><type pos:start="29:5" pos:end="29:13"><name pos:start="29:5" pos:end="29:11">GString</name> <modifier pos:start="29:13" pos:end="29:13">*</modifier></type><name pos:start="29:14" pos:end="29:27">ext_desc_lines</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:61"><decl pos:start="31:5" pos:end="31:23"><type pos:start="31:5" pos:end="31:8"><name pos:start="31:5" pos:end="31:8">char</name></type> <name pos:start="31:10" pos:end="31:23"><name pos:start="31:10" pos:end="31:13">path</name><index pos:start="31:14" pos:end="31:23">[<expr pos:start="31:15" pos:end="31:22"><name pos:start="31:15" pos:end="31:22">PATH_MAX</name></expr>]</index></name></decl>, <decl pos:start="31:26" pos:end="31:41"><type ref="prev" pos:start="31:5" pos:end="31:8"/><name pos:start="31:26" pos:end="31:41"><name pos:start="31:26" pos:end="31:31">prefix</name><index pos:start="31:32" pos:end="31:41">[<expr pos:start="31:33" pos:end="31:40"><name pos:start="31:33" pos:end="31:40">PATH_MAX</name></expr>]</index></name></decl>, <decl pos:start="31:44" pos:end="31:60"><type ref="prev" pos:start="31:5" pos:end="31:8"/><name pos:start="31:44" pos:end="31:60"><name pos:start="31:44" pos:end="31:50">postfix</name><index pos:start="31:51" pos:end="31:60">[<expr pos:start="31:52" pos:end="31:59"><name pos:start="31:52" pos:end="31:59">PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:42"><decl pos:start="33:5" pos:end="33:41"><type pos:start="33:5" pos:end="33:17"><specifier pos:start="33:5" pos:end="33:9">const</specifier> <name pos:start="33:11" pos:end="33:17">int64_t</name></type> <name pos:start="33:19" pos:end="33:28">split_size</name> <init pos:start="33:30" pos:end="33:41">= <expr pos:start="33:32" pos:end="33:41"><literal type="number" pos:start="33:32" pos:end="33:41">0x80000000</literal></expr></init></decl>;</decl_stmt>  <comment type="block" pos:start="33:45" pos:end="33:78">/* VMDK has constant split size */</comment>

    <decl_stmt pos:start="35:5" pos:end="35:33"><decl pos:start="35:5" pos:end="35:32"><type pos:start="35:5" pos:end="35:16"><specifier pos:start="35:5" pos:end="35:9">const</specifier> <name pos:start="35:11" pos:end="35:14">char</name> <modifier pos:start="35:16" pos:end="35:16">*</modifier></type><name pos:start="35:17" pos:end="35:32">desc_extent_line</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:41"><decl pos:start="37:5" pos:end="37:40"><type pos:start="37:5" pos:end="37:8"><name pos:start="37:5" pos:end="37:8">char</name></type> <name pos:start="37:10" pos:end="37:35"><name pos:start="37:10" pos:end="37:25">parent_desc_line</name><index pos:start="37:26" pos:end="37:35">[<expr pos:start="37:27" pos:end="37:34"><name pos:start="37:27" pos:end="37:34">BUF_SIZE</name></expr>]</index></name> <init pos:start="37:37" pos:end="37:40">= <expr pos:start="37:39" pos:end="37:40"><literal type="string" pos:start="37:39" pos:end="37:40">""</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:37"><decl pos:start="39:5" pos:end="39:36"><type pos:start="39:5" pos:end="39:12"><name pos:start="39:5" pos:end="39:12">uint32_t</name></type> <name pos:start="39:14" pos:end="39:23">parent_cid</name> <init pos:start="39:25" pos:end="39:36">= <expr pos:start="39:27" pos:end="39:36"><literal type="number" pos:start="39:27" pos:end="39:36">0xffffffff</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:31"><decl pos:start="41:5" pos:end="41:30"><type pos:start="41:5" pos:end="41:12"><name pos:start="41:5" pos:end="41:12">uint32_t</name></type> <name pos:start="41:14" pos:end="41:25">number_heads</name> <init pos:start="41:27" pos:end="41:30">= <expr pos:start="41:29" pos:end="41:30"><literal type="number" pos:start="41:29" pos:end="41:30">16</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:30"><decl pos:start="43:5" pos:end="43:29"><type pos:start="43:5" pos:end="43:8"><name pos:start="43:5" pos:end="43:8">bool</name></type> <name pos:start="43:10" pos:end="43:21">zeroed_grain</name> <init pos:start="43:23" pos:end="43:29">= <expr pos:start="43:25" pos:end="43:29"><name pos:start="43:25" pos:end="43:29">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:39"><decl pos:start="45:5" pos:end="45:28"><type pos:start="45:5" pos:end="45:12"><name pos:start="45:5" pos:end="45:12">uint32_t</name></type> <name pos:start="45:14" pos:end="45:24">desc_offset</name> <init pos:start="45:26" pos:end="45:28">= <expr pos:start="45:28" pos:end="45:28"><literal type="number" pos:start="45:28" pos:end="45:28">0</literal></expr></init></decl>, <decl pos:start="45:31" pos:end="45:38"><type ref="prev" pos:start="45:5" pos:end="45:12"/><name pos:start="45:31" pos:end="45:38">desc_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="83:37"><decl pos:start="47:5" pos:end="83:36"><type pos:start="47:5" pos:end="47:14"><specifier pos:start="47:5" pos:end="47:9">const</specifier> <name pos:start="47:11" pos:end="47:14">char</name></type> <name pos:start="47:16" pos:end="47:30"><name pos:start="47:16" pos:end="47:28">desc_template</name><index pos:start="47:29" pos:end="47:30">[]</index></name> <init pos:start="47:32" pos:end="83:36">=

        <expr pos:start="49:9" pos:end="83:36"><literal type="string" pos:start="49:9" pos:end="49:33">"# Disk DescriptorFile\n"</literal>

        <literal type="string" pos:start="51:9" pos:end="51:21">"version=1\n"</literal>

        <literal type="string" pos:start="53:9" pos:end="53:15">"CID=%"</literal> <name pos:start="53:17" pos:end="53:22">PRIx32</name> <literal type="string" pos:start="53:24" pos:end="53:27">"\n"</literal>

        <literal type="string" pos:start="55:9" pos:end="55:21">"parentCID=%"</literal> <name pos:start="55:23" pos:end="55:28">PRIx32</name> <literal type="string" pos:start="55:30" pos:end="55:33">"\n"</literal>

        <literal type="string" pos:start="57:9" pos:end="57:29">"createType=\"%s\"\n"</literal>

        <literal type="string" pos:start="59:9" pos:end="59:12">"%s"</literal>

        <literal type="string" pos:start="61:9" pos:end="61:12">"\n"</literal>

        <literal type="string" pos:start="63:9" pos:end="63:32">"# Extent description\n"</literal>

        <literal type="string" pos:start="65:9" pos:end="65:12">"%s"</literal>

        <literal type="string" pos:start="67:9" pos:end="67:12">"\n"</literal>

        <literal type="string" pos:start="69:9" pos:end="69:32">"# The Disk Data Base\n"</literal>

        <literal type="string" pos:start="71:9" pos:end="71:16">"#DDB\n"</literal>

        <literal type="string" pos:start="73:9" pos:end="73:12">"\n"</literal>

        <literal type="string" pos:start="75:9" pos:end="75:41">"ddb.virtualHWVersion = \"%d\"\n"</literal>

        <literal type="string" pos:start="77:9" pos:end="77:38">"ddb.geometry.cylinders = \"%"</literal> <name pos:start="77:40" pos:end="77:45">PRId64</name> <literal type="string" pos:start="77:47" pos:end="77:52">"\"\n"</literal>

        <literal type="string" pos:start="79:9" pos:end="79:34">"ddb.geometry.heads = \"%"</literal> <name pos:start="79:36" pos:end="79:41">PRIu32</name> <literal type="string" pos:start="79:43" pos:end="79:48">"\"\n"</literal>

        <literal type="string" pos:start="81:9" pos:end="81:41">"ddb.geometry.sectors = \"63\"\n"</literal>

        <literal type="string" pos:start="83:9" pos:end="83:36">"ddb.adapterType = \"%s\"\n"</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="87:5" pos:end="87:40"><expr pos:start="87:5" pos:end="87:39"><name pos:start="87:5" pos:end="87:18">ext_desc_lines</name> <operator pos:start="87:20" pos:end="87:20">=</operator> <call pos:start="87:22" pos:end="87:39"><name pos:start="87:22" pos:end="87:33">g_string_new</name><argument_list pos:start="87:34" pos:end="87:39">(<argument pos:start="87:35" pos:end="87:38"><expr pos:start="87:35" pos:end="87:38"><name pos:start="87:35" pos:end="87:38">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="91:5" pos:end="97:5"><if pos:start="91:5" pos:end="97:5">if <condition pos:start="91:8" pos:end="91:76">(<expr pos:start="91:9" pos:end="91:75"><call pos:start="91:9" pos:end="91:75"><name pos:start="91:9" pos:end="91:26">filename_decompose</name><argument_list pos:start="91:27" pos:end="91:75">(<argument pos:start="91:28" pos:end="91:35"><expr pos:start="91:28" pos:end="91:35"><name pos:start="91:28" pos:end="91:35">filename</name></expr></argument>, <argument pos:start="91:38" pos:end="91:41"><expr pos:start="91:38" pos:end="91:41"><name pos:start="91:38" pos:end="91:41">path</name></expr></argument>, <argument pos:start="91:44" pos:end="91:49"><expr pos:start="91:44" pos:end="91:49"><name pos:start="91:44" pos:end="91:49">prefix</name></expr></argument>, <argument pos:start="91:52" pos:end="91:58"><expr pos:start="91:52" pos:end="91:58"><name pos:start="91:52" pos:end="91:58">postfix</name></expr></argument>, <argument pos:start="91:61" pos:end="91:68"><expr pos:start="91:61" pos:end="91:68"><name pos:start="91:61" pos:end="91:68">PATH_MAX</name></expr></argument>, <argument pos:start="91:71" pos:end="91:74"><expr pos:start="91:71" pos:end="91:74"><name pos:start="91:71" pos:end="91:74">errp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="91:78" pos:end="97:5">{<block_content pos:start="93:9" pos:end="95:18">

        <expr_stmt pos:start="93:9" pos:end="93:22"><expr pos:start="93:9" pos:end="93:21"><name pos:start="93:9" pos:end="93:11">ret</name> <operator pos:start="93:13" pos:end="93:13">=</operator> <operator pos:start="93:15" pos:end="93:15">-</operator><name pos:start="93:16" pos:end="93:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="95:9" pos:end="95:18">goto <name pos:start="95:14" pos:end="95:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="99:5" pos:end="99:26">/* Read out options */</comment>

    <while pos:start="101:5" pos:end="131:5">while <condition pos:start="101:11" pos:end="101:36">(<expr pos:start="101:12" pos:end="101:35"><name pos:start="101:12" pos:end="101:18">options</name> <operator pos:start="101:20" pos:end="101:21">&amp;&amp;</operator> <name pos:start="101:23" pos:end="101:35"><name pos:start="101:23" pos:end="101:29">options</name><operator pos:start="101:30" pos:end="101:31">-&gt;</operator><name pos:start="101:32" pos:end="101:35">name</name></name></expr>)</condition> <block pos:start="101:38" pos:end="131:5">{<block_content pos:start="103:9" pos:end="129:18">

        <if_stmt pos:start="103:9" pos:end="127:9"><if pos:start="103:9" pos:end="107:9">if <condition pos:start="103:12" pos:end="103:51">(<expr pos:start="103:13" pos:end="103:50"><operator pos:start="103:13" pos:end="103:13">!</operator><call pos:start="103:14" pos:end="103:50"><name pos:start="103:14" pos:end="103:19">strcmp</name><argument_list pos:start="103:20" pos:end="103:50">(<argument pos:start="103:21" pos:end="103:33"><expr pos:start="103:21" pos:end="103:33"><name pos:start="103:21" pos:end="103:33"><name pos:start="103:21" pos:end="103:27">options</name><operator pos:start="103:28" pos:end="103:29">-&gt;</operator><name pos:start="103:30" pos:end="103:33">name</name></name></expr></argument>, <argument pos:start="103:36" pos:end="103:49"><expr pos:start="103:36" pos:end="103:49"><name pos:start="103:36" pos:end="103:49">BLOCK_OPT_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="103:53" pos:end="107:9">{<block_content pos:start="105:13" pos:end="105:42">

            <expr_stmt pos:start="105:13" pos:end="105:42"><expr pos:start="105:13" pos:end="105:41"><name pos:start="105:13" pos:end="105:22">total_size</name> <operator pos:start="105:24" pos:end="105:24">=</operator> <name pos:start="105:26" pos:end="105:41"><name pos:start="105:26" pos:end="105:32">options</name><operator pos:start="105:33" pos:end="105:34">-&gt;</operator><name pos:start="105:35" pos:end="105:39">value</name><operator pos:start="105:40" pos:end="105:40">.</operator><name pos:start="105:41" pos:end="105:41">n</name></name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="107:11" pos:end="111:9">else if <condition pos:start="107:19" pos:end="107:66">(<expr pos:start="107:20" pos:end="107:65"><operator pos:start="107:20" pos:end="107:20">!</operator><call pos:start="107:21" pos:end="107:65"><name pos:start="107:21" pos:end="107:26">strcmp</name><argument_list pos:start="107:27" pos:end="107:65">(<argument pos:start="107:28" pos:end="107:40"><expr pos:start="107:28" pos:end="107:40"><name pos:start="107:28" pos:end="107:40"><name pos:start="107:28" pos:end="107:34">options</name><operator pos:start="107:35" pos:end="107:36">-&gt;</operator><name pos:start="107:37" pos:end="107:40">name</name></name></expr></argument>, <argument pos:start="107:43" pos:end="107:64"><expr pos:start="107:43" pos:end="107:64"><name pos:start="107:43" pos:end="107:64">BLOCK_OPT_ADAPTER_TYPE</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="107:68" pos:end="111:9">{<block_content pos:start="109:13" pos:end="109:44">

            <expr_stmt pos:start="109:13" pos:end="109:44"><expr pos:start="109:13" pos:end="109:43"><name pos:start="109:13" pos:end="109:24">adapter_type</name> <operator pos:start="109:26" pos:end="109:26">=</operator> <name pos:start="109:28" pos:end="109:43"><name pos:start="109:28" pos:end="109:34">options</name><operator pos:start="109:35" pos:end="109:36">-&gt;</operator><name pos:start="109:37" pos:end="109:41">value</name><operator pos:start="109:42" pos:end="109:42">.</operator><name pos:start="109:43" pos:end="109:43">s</name></name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="111:11" pos:end="115:9">else if <condition pos:start="111:19" pos:end="111:66">(<expr pos:start="111:20" pos:end="111:65"><operator pos:start="111:20" pos:end="111:20">!</operator><call pos:start="111:21" pos:end="111:65"><name pos:start="111:21" pos:end="111:26">strcmp</name><argument_list pos:start="111:27" pos:end="111:65">(<argument pos:start="111:28" pos:end="111:40"><expr pos:start="111:28" pos:end="111:40"><name pos:start="111:28" pos:end="111:40"><name pos:start="111:28" pos:end="111:34">options</name><operator pos:start="111:35" pos:end="111:36">-&gt;</operator><name pos:start="111:37" pos:end="111:40">name</name></name></expr></argument>, <argument pos:start="111:43" pos:end="111:64"><expr pos:start="111:43" pos:end="111:64"><name pos:start="111:43" pos:end="111:64">BLOCK_OPT_BACKING_FILE</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="111:68" pos:end="115:9">{<block_content pos:start="113:13" pos:end="113:44">

            <expr_stmt pos:start="113:13" pos:end="113:44"><expr pos:start="113:13" pos:end="113:43"><name pos:start="113:13" pos:end="113:24">backing_file</name> <operator pos:start="113:26" pos:end="113:26">=</operator> <name pos:start="113:28" pos:end="113:43"><name pos:start="113:28" pos:end="113:34">options</name><operator pos:start="113:35" pos:end="113:36">-&gt;</operator><name pos:start="113:37" pos:end="113:41">value</name><operator pos:start="113:42" pos:end="113:42">.</operator><name pos:start="113:43" pos:end="113:43">s</name></name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="115:11" pos:end="119:9">else if <condition pos:start="115:19" pos:end="115:61">(<expr pos:start="115:20" pos:end="115:60"><operator pos:start="115:20" pos:end="115:20">!</operator><call pos:start="115:21" pos:end="115:60"><name pos:start="115:21" pos:end="115:26">strcmp</name><argument_list pos:start="115:27" pos:end="115:60">(<argument pos:start="115:28" pos:end="115:40"><expr pos:start="115:28" pos:end="115:40"><name pos:start="115:28" pos:end="115:40"><name pos:start="115:28" pos:end="115:34">options</name><operator pos:start="115:35" pos:end="115:36">-&gt;</operator><name pos:start="115:37" pos:end="115:40">name</name></name></expr></argument>, <argument pos:start="115:43" pos:end="115:59"><expr pos:start="115:43" pos:end="115:59"><name pos:start="115:43" pos:end="115:59">BLOCK_OPT_COMPAT6</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="115:63" pos:end="119:9">{<block_content pos:start="117:13" pos:end="117:63">

            <expr_stmt pos:start="117:13" pos:end="117:63"><expr pos:start="117:13" pos:end="117:62"><name pos:start="117:13" pos:end="117:17">flags</name> <operator pos:start="117:19" pos:end="117:20">|=</operator> <ternary pos:start="117:22" pos:end="117:62"><condition pos:start="117:22" pos:end="117:39"><expr pos:start="117:22" pos:end="117:37"><name pos:start="117:22" pos:end="117:37"><name pos:start="117:22" pos:end="117:28">options</name><operator pos:start="117:29" pos:end="117:30">-&gt;</operator><name pos:start="117:31" pos:end="117:35">value</name><operator pos:start="117:36" pos:end="117:36">.</operator><name pos:start="117:37" pos:end="117:37">n</name></name></expr> ?</condition><then pos:start="117:41" pos:end="117:58"> <expr pos:start="117:41" pos:end="117:58"><name pos:start="117:41" pos:end="117:58">BLOCK_FLAG_COMPAT6</name></expr> </then><else pos:start="117:60" pos:end="117:62">: <expr pos:start="117:62" pos:end="117:62"><literal type="number" pos:start="117:62" pos:end="117:62">0</literal></expr></else></ternary></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="119:11" pos:end="123:9">else if <condition pos:start="119:19" pos:end="119:60">(<expr pos:start="119:20" pos:end="119:59"><operator pos:start="119:20" pos:end="119:20">!</operator><call pos:start="119:21" pos:end="119:59"><name pos:start="119:21" pos:end="119:26">strcmp</name><argument_list pos:start="119:27" pos:end="119:59">(<argument pos:start="119:28" pos:end="119:40"><expr pos:start="119:28" pos:end="119:40"><name pos:start="119:28" pos:end="119:40"><name pos:start="119:28" pos:end="119:34">options</name><operator pos:start="119:35" pos:end="119:36">-&gt;</operator><name pos:start="119:37" pos:end="119:40">name</name></name></expr></argument>, <argument pos:start="119:43" pos:end="119:58"><expr pos:start="119:43" pos:end="119:58"><name pos:start="119:43" pos:end="119:58">BLOCK_OPT_SUBFMT</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="119:62" pos:end="123:9">{<block_content pos:start="121:13" pos:end="121:35">

            <expr_stmt pos:start="121:13" pos:end="121:35"><expr pos:start="121:13" pos:end="121:34"><name pos:start="121:13" pos:end="121:15">fmt</name> <operator pos:start="121:17" pos:end="121:17">=</operator> <name pos:start="121:19" pos:end="121:34"><name pos:start="121:19" pos:end="121:25">options</name><operator pos:start="121:26" pos:end="121:27">-&gt;</operator><name pos:start="121:28" pos:end="121:32">value</name><operator pos:start="121:33" pos:end="121:33">.</operator><name pos:start="121:34" pos:end="121:34">s</name></name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="123:11" pos:end="127:9">else if <condition pos:start="123:19" pos:end="123:66">(<expr pos:start="123:20" pos:end="123:65"><operator pos:start="123:20" pos:end="123:20">!</operator><call pos:start="123:21" pos:end="123:65"><name pos:start="123:21" pos:end="123:26">strcmp</name><argument_list pos:start="123:27" pos:end="123:65">(<argument pos:start="123:28" pos:end="123:40"><expr pos:start="123:28" pos:end="123:40"><name pos:start="123:28" pos:end="123:40"><name pos:start="123:28" pos:end="123:34">options</name><operator pos:start="123:35" pos:end="123:36">-&gt;</operator><name pos:start="123:37" pos:end="123:40">name</name></name></expr></argument>, <argument pos:start="123:43" pos:end="123:64"><expr pos:start="123:43" pos:end="123:64"><name pos:start="123:43" pos:end="123:64">BLOCK_OPT_ZEROED_GRAIN</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="123:68" pos:end="127:9">{<block_content pos:start="125:13" pos:end="125:45">

            <expr_stmt pos:start="125:13" pos:end="125:45"><expr pos:start="125:13" pos:end="125:44"><name pos:start="125:13" pos:end="125:24">zeroed_grain</name> <operator pos:start="125:26" pos:end="125:27">|=</operator> <name pos:start="125:29" pos:end="125:44"><name pos:start="125:29" pos:end="125:35">options</name><operator pos:start="125:36" pos:end="125:37">-&gt;</operator><name pos:start="125:38" pos:end="125:42">value</name><operator pos:start="125:43" pos:end="125:43">.</operator><name pos:start="125:44" pos:end="125:44">n</name></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:18"><expr pos:start="129:9" pos:end="129:17"><name pos:start="129:9" pos:end="129:15">options</name><operator pos:start="129:16" pos:end="129:17">++</operator></expr>;</expr_stmt>

    </block_content>}</block></while>

    <if_stmt pos:start="133:5" pos:end="151:5"><if pos:start="133:5" pos:end="137:5">if <condition pos:start="133:8" pos:end="133:22">(<expr pos:start="133:9" pos:end="133:21"><operator pos:start="133:9" pos:end="133:9">!</operator><name pos:start="133:10" pos:end="133:21">adapter_type</name></expr>)</condition> <block pos:start="133:24" pos:end="137:5">{<block_content pos:start="135:9" pos:end="135:29">

        <expr_stmt pos:start="135:9" pos:end="135:29"><expr pos:start="135:9" pos:end="135:28"><name pos:start="135:9" pos:end="135:20">adapter_type</name> <operator pos:start="135:22" pos:end="135:22">=</operator> <literal type="string" pos:start="135:24" pos:end="135:28">"ide"</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="137:7" pos:end="151:5">else if <condition pos:start="137:15" pos:end="143:49">(<expr pos:start="137:16" pos:end="143:48"><call pos:start="137:16" pos:end="137:42"><name pos:start="137:16" pos:end="137:21">strcmp</name><argument_list pos:start="137:22" pos:end="137:42">(<argument pos:start="137:23" pos:end="137:34"><expr pos:start="137:23" pos:end="137:34"><name pos:start="137:23" pos:end="137:34">adapter_type</name></expr></argument>, <argument pos:start="137:37" pos:end="137:41"><expr pos:start="137:37" pos:end="137:41"><literal type="string" pos:start="137:37" pos:end="137:41">"ide"</literal></expr></argument>)</argument_list></call> <operator pos:start="137:44" pos:end="137:45">&amp;&amp;</operator>

               <call pos:start="139:16" pos:end="139:47"><name pos:start="139:16" pos:end="139:21">strcmp</name><argument_list pos:start="139:22" pos:end="139:47">(<argument pos:start="139:23" pos:end="139:34"><expr pos:start="139:23" pos:end="139:34"><name pos:start="139:23" pos:end="139:34">adapter_type</name></expr></argument>, <argument pos:start="139:37" pos:end="139:46"><expr pos:start="139:37" pos:end="139:46"><literal type="string" pos:start="139:37" pos:end="139:46">"buslogic"</literal></expr></argument>)</argument_list></call> <operator pos:start="139:49" pos:end="139:50">&amp;&amp;</operator>

               <call pos:start="141:16" pos:end="141:47"><name pos:start="141:16" pos:end="141:21">strcmp</name><argument_list pos:start="141:22" pos:end="141:47">(<argument pos:start="141:23" pos:end="141:34"><expr pos:start="141:23" pos:end="141:34"><name pos:start="141:23" pos:end="141:34">adapter_type</name></expr></argument>, <argument pos:start="141:37" pos:end="141:46"><expr pos:start="141:37" pos:end="141:46"><literal type="string" pos:start="141:37" pos:end="141:46">"lsilogic"</literal></expr></argument>)</argument_list></call> <operator pos:start="141:49" pos:end="141:50">&amp;&amp;</operator>

               <call pos:start="143:16" pos:end="143:48"><name pos:start="143:16" pos:end="143:21">strcmp</name><argument_list pos:start="143:22" pos:end="143:48">(<argument pos:start="143:23" pos:end="143:34"><expr pos:start="143:23" pos:end="143:34"><name pos:start="143:23" pos:end="143:34">adapter_type</name></expr></argument>, <argument pos:start="143:37" pos:end="143:47"><expr pos:start="143:37" pos:end="143:47"><literal type="string" pos:start="143:37" pos:end="143:47">"legacyESX"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="143:51" pos:end="151:5">{<block_content pos:start="145:9" pos:end="149:18">

        <expr_stmt pos:start="145:9" pos:end="145:69"><expr pos:start="145:9" pos:end="145:68"><call pos:start="145:9" pos:end="145:68"><name pos:start="145:9" pos:end="145:18">error_setg</name><argument_list pos:start="145:19" pos:end="145:68">(<argument pos:start="145:20" pos:end="145:23"><expr pos:start="145:20" pos:end="145:23"><name pos:start="145:20" pos:end="145:23">errp</name></expr></argument>, <argument pos:start="145:26" pos:end="145:53"><expr pos:start="145:26" pos:end="145:53"><literal type="string" pos:start="145:26" pos:end="145:53">"Unknown adapter type: '%s'"</literal></expr></argument>, <argument pos:start="145:56" pos:end="145:67"><expr pos:start="145:56" pos:end="145:67"><name pos:start="145:56" pos:end="145:67">adapter_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:22"><expr pos:start="147:9" pos:end="147:21"><name pos:start="147:9" pos:end="147:11">ret</name> <operator pos:start="147:13" pos:end="147:13">=</operator> <operator pos:start="147:15" pos:end="147:15">-</operator><name pos:start="147:16" pos:end="147:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="149:9" pos:end="149:18">goto <name pos:start="149:14" pos:end="149:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="153:5" pos:end="161:5"><if pos:start="153:5" pos:end="161:5">if <condition pos:start="153:8" pos:end="153:41">(<expr pos:start="153:9" pos:end="153:40"><call pos:start="153:9" pos:end="153:35"><name pos:start="153:9" pos:end="153:14">strcmp</name><argument_list pos:start="153:15" pos:end="153:35">(<argument pos:start="153:16" pos:end="153:27"><expr pos:start="153:16" pos:end="153:27"><name pos:start="153:16" pos:end="153:27">adapter_type</name></expr></argument>, <argument pos:start="153:30" pos:end="153:34"><expr pos:start="153:30" pos:end="153:34"><literal type="string" pos:start="153:30" pos:end="153:34">"ide"</literal></expr></argument>)</argument_list></call> <operator pos:start="153:37" pos:end="153:38">!=</operator> <literal type="number" pos:start="153:40" pos:end="153:40">0</literal></expr>)</condition> <block pos:start="153:43" pos:end="161:5">{<block_content pos:start="159:9" pos:end="159:27">

        <comment type="block" pos:start="155:9" pos:end="157:78">/* that's the number of heads with which vmware operates when

           creating, exporting, etc. vmdk files with a non-ide adapter type */</comment>

        <expr_stmt pos:start="159:9" pos:end="159:27"><expr pos:start="159:9" pos:end="159:26"><name pos:start="159:9" pos:end="159:20">number_heads</name> <operator pos:start="159:22" pos:end="159:22">=</operator> <literal type="number" pos:start="159:24" pos:end="159:26">255</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="163:5" pos:end="185:5"><if pos:start="163:5" pos:end="169:5">if <condition pos:start="163:8" pos:end="163:13">(<expr pos:start="163:9" pos:end="163:12"><operator pos:start="163:9" pos:end="163:9">!</operator><name pos:start="163:10" pos:end="163:12">fmt</name></expr>)</condition> <block pos:start="163:15" pos:end="169:5">{<block_content pos:start="167:9" pos:end="167:33">

        <comment type="block" pos:start="165:9" pos:end="165:48">/* Default format to monolithicSparse */</comment>

        <expr_stmt pos:start="167:9" pos:end="167:33"><expr pos:start="167:9" pos:end="167:32"><name pos:start="167:9" pos:end="167:11">fmt</name> <operator pos:start="167:13" pos:end="167:13">=</operator> <literal type="string" pos:start="167:15" pos:end="167:32">"monolithicSparse"</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="169:7" pos:end="185:5">else if <condition pos:start="169:15" pos:end="177:46">(<expr pos:start="169:16" pos:end="177:45"><call pos:start="169:16" pos:end="169:44"><name pos:start="169:16" pos:end="169:21">strcmp</name><argument_list pos:start="169:22" pos:end="169:44">(<argument pos:start="169:23" pos:end="169:25"><expr pos:start="169:23" pos:end="169:25"><name pos:start="169:23" pos:end="169:25">fmt</name></expr></argument>, <argument pos:start="169:28" pos:end="169:43"><expr pos:start="169:28" pos:end="169:43"><literal type="string" pos:start="169:28" pos:end="169:43">"monolithicFlat"</literal></expr></argument>)</argument_list></call> <operator pos:start="169:46" pos:end="169:47">&amp;&amp;</operator>

               <call pos:start="171:16" pos:end="171:46"><name pos:start="171:16" pos:end="171:21">strcmp</name><argument_list pos:start="171:22" pos:end="171:46">(<argument pos:start="171:23" pos:end="171:25"><expr pos:start="171:23" pos:end="171:25"><name pos:start="171:23" pos:end="171:25">fmt</name></expr></argument>, <argument pos:start="171:28" pos:end="171:45"><expr pos:start="171:28" pos:end="171:45"><literal type="string" pos:start="171:28" pos:end="171:45">"monolithicSparse"</literal></expr></argument>)</argument_list></call> <operator pos:start="171:48" pos:end="171:49">&amp;&amp;</operator>

               <call pos:start="173:16" pos:end="173:50"><name pos:start="173:16" pos:end="173:21">strcmp</name><argument_list pos:start="173:22" pos:end="173:50">(<argument pos:start="173:23" pos:end="173:25"><expr pos:start="173:23" pos:end="173:25"><name pos:start="173:23" pos:end="173:25">fmt</name></expr></argument>, <argument pos:start="173:28" pos:end="173:49"><expr pos:start="173:28" pos:end="173:49"><literal type="string" pos:start="173:28" pos:end="173:49">"twoGbMaxExtentSparse"</literal></expr></argument>)</argument_list></call> <operator pos:start="173:52" pos:end="173:53">&amp;&amp;</operator>

               <call pos:start="175:16" pos:end="175:48"><name pos:start="175:16" pos:end="175:21">strcmp</name><argument_list pos:start="175:22" pos:end="175:48">(<argument pos:start="175:23" pos:end="175:25"><expr pos:start="175:23" pos:end="175:25"><name pos:start="175:23" pos:end="175:25">fmt</name></expr></argument>, <argument pos:start="175:28" pos:end="175:47"><expr pos:start="175:28" pos:end="175:47"><literal type="string" pos:start="175:28" pos:end="175:47">"twoGbMaxExtentFlat"</literal></expr></argument>)</argument_list></call> <operator pos:start="175:50" pos:end="175:51">&amp;&amp;</operator>

               <call pos:start="177:16" pos:end="177:45"><name pos:start="177:16" pos:end="177:21">strcmp</name><argument_list pos:start="177:22" pos:end="177:45">(<argument pos:start="177:23" pos:end="177:25"><expr pos:start="177:23" pos:end="177:25"><name pos:start="177:23" pos:end="177:25">fmt</name></expr></argument>, <argument pos:start="177:28" pos:end="177:44"><expr pos:start="177:28" pos:end="177:44"><literal type="string" pos:start="177:28" pos:end="177:44">"streamOptimized"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="177:48" pos:end="185:5">{<block_content pos:start="179:9" pos:end="183:18">

        <expr_stmt pos:start="179:9" pos:end="179:57"><expr pos:start="179:9" pos:end="179:56"><call pos:start="179:9" pos:end="179:56"><name pos:start="179:9" pos:end="179:18">error_setg</name><argument_list pos:start="179:19" pos:end="179:56">(<argument pos:start="179:20" pos:end="179:23"><expr pos:start="179:20" pos:end="179:23"><name pos:start="179:20" pos:end="179:23">errp</name></expr></argument>, <argument pos:start="179:26" pos:end="179:50"><expr pos:start="179:26" pos:end="179:50"><literal type="string" pos:start="179:26" pos:end="179:50">"Unknown subformat: '%s'"</literal></expr></argument>, <argument pos:start="179:53" pos:end="179:55"><expr pos:start="179:53" pos:end="179:55"><name pos:start="179:53" pos:end="179:55">fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="181:9" pos:end="181:22"><expr pos:start="181:9" pos:end="181:21"><name pos:start="181:9" pos:end="181:11">ret</name> <operator pos:start="181:13" pos:end="181:13">=</operator> <operator pos:start="181:15" pos:end="181:15">-</operator><name pos:start="181:16" pos:end="181:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="183:9" pos:end="183:18">goto <name pos:start="183:14" pos:end="183:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="187:5" pos:end="189:51"><expr pos:start="187:5" pos:end="189:50"><name pos:start="187:5" pos:end="187:9">split</name> <operator pos:start="187:11" pos:end="187:11">=</operator> <operator pos:start="187:13" pos:end="187:13">!</operator><operator pos:start="187:14" pos:end="187:14">(</operator><call pos:start="187:15" pos:end="187:47"><name pos:start="187:15" pos:end="187:20">strcmp</name><argument_list pos:start="187:21" pos:end="187:47">(<argument pos:start="187:22" pos:end="187:24"><expr pos:start="187:22" pos:end="187:24"><name pos:start="187:22" pos:end="187:24">fmt</name></expr></argument>, <argument pos:start="187:27" pos:end="187:46"><expr pos:start="187:27" pos:end="187:46"><literal type="string" pos:start="187:27" pos:end="187:46">"twoGbMaxExtentFlat"</literal></expr></argument>)</argument_list></call> <operator pos:start="187:49" pos:end="187:50">&amp;&amp;</operator>

              <call pos:start="189:15" pos:end="189:49"><name pos:start="189:15" pos:end="189:20">strcmp</name><argument_list pos:start="189:21" pos:end="189:49">(<argument pos:start="189:22" pos:end="189:24"><expr pos:start="189:22" pos:end="189:24"><name pos:start="189:22" pos:end="189:24">fmt</name></expr></argument>, <argument pos:start="189:27" pos:end="189:48"><expr pos:start="189:27" pos:end="189:48"><literal type="string" pos:start="189:27" pos:end="189:48">"twoGbMaxExtentSparse"</literal></expr></argument>)</argument_list></call><operator pos:start="189:50" pos:end="189:50">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="191:5" pos:end="193:48"><expr pos:start="191:5" pos:end="193:47"><name pos:start="191:5" pos:end="191:8">flat</name> <operator pos:start="191:10" pos:end="191:10">=</operator> <operator pos:start="191:12" pos:end="191:12">!</operator><operator pos:start="191:13" pos:end="191:13">(</operator><call pos:start="191:14" pos:end="191:42"><name pos:start="191:14" pos:end="191:19">strcmp</name><argument_list pos:start="191:20" pos:end="191:42">(<argument pos:start="191:21" pos:end="191:23"><expr pos:start="191:21" pos:end="191:23"><name pos:start="191:21" pos:end="191:23">fmt</name></expr></argument>, <argument pos:start="191:26" pos:end="191:41"><expr pos:start="191:26" pos:end="191:41"><literal type="string" pos:start="191:26" pos:end="191:41">"monolithicFlat"</literal></expr></argument>)</argument_list></call> <operator pos:start="191:44" pos:end="191:45">&amp;&amp;</operator>

             <call pos:start="193:14" pos:end="193:46"><name pos:start="193:14" pos:end="193:19">strcmp</name><argument_list pos:start="193:20" pos:end="193:46">(<argument pos:start="193:21" pos:end="193:23"><expr pos:start="193:21" pos:end="193:23"><name pos:start="193:21" pos:end="193:23">fmt</name></expr></argument>, <argument pos:start="193:26" pos:end="193:45"><expr pos:start="193:26" pos:end="193:45"><literal type="string" pos:start="193:26" pos:end="193:45">"twoGbMaxExtentFlat"</literal></expr></argument>)</argument_list></call><operator pos:start="193:47" pos:end="193:47">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="195:5" pos:end="195:47"><expr pos:start="195:5" pos:end="195:46"><name pos:start="195:5" pos:end="195:12">compress</name> <operator pos:start="195:14" pos:end="195:14">=</operator> <operator pos:start="195:16" pos:end="195:16">!</operator><call pos:start="195:17" pos:end="195:46"><name pos:start="195:17" pos:end="195:22">strcmp</name><argument_list pos:start="195:23" pos:end="195:46">(<argument pos:start="195:24" pos:end="195:26"><expr pos:start="195:24" pos:end="195:26"><name pos:start="195:24" pos:end="195:26">fmt</name></expr></argument>, <argument pos:start="195:29" pos:end="195:45"><expr pos:start="195:29" pos:end="195:45"><literal type="string" pos:start="195:29" pos:end="195:45">"streamOptimized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="197:5" pos:end="205:5"><if pos:start="197:5" pos:end="201:5">if <condition pos:start="197:8" pos:end="197:13">(<expr pos:start="197:9" pos:end="197:12"><name pos:start="197:9" pos:end="197:12">flat</name></expr>)</condition> <block pos:start="197:15" pos:end="201:5">{<block_content pos:start="199:9" pos:end="199:60">

        <expr_stmt pos:start="199:9" pos:end="199:60"><expr pos:start="199:9" pos:end="199:59"><name pos:start="199:9" pos:end="199:24">desc_extent_line</name> <operator pos:start="199:26" pos:end="199:26">=</operator> <literal type="string" pos:start="199:28" pos:end="199:33">"RW %"</literal> <name pos:start="199:35" pos:end="199:40">PRId64</name> <literal type="string" pos:start="199:42" pos:end="199:59">" FLAT \"%s\" 0\n"</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="201:7" pos:end="205:5">else <block pos:start="201:12" pos:end="205:5">{<block_content pos:start="203:9" pos:end="203:60">

        <expr_stmt pos:start="203:9" pos:end="203:60"><expr pos:start="203:9" pos:end="203:59"><name pos:start="203:9" pos:end="203:24">desc_extent_line</name> <operator pos:start="203:26" pos:end="203:26">=</operator> <literal type="string" pos:start="203:28" pos:end="203:33">"RW %"</literal> <name pos:start="203:35" pos:end="203:40">PRId64</name> <literal type="string" pos:start="203:42" pos:end="203:59">" SPARSE \"%s\"\n"</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="207:5" pos:end="215:5"><if pos:start="207:5" pos:end="215:5">if <condition pos:start="207:8" pos:end="207:29">(<expr pos:start="207:9" pos:end="207:28"><name pos:start="207:9" pos:end="207:12">flat</name> <operator pos:start="207:14" pos:end="207:15">&amp;&amp;</operator> <name pos:start="207:17" pos:end="207:28">backing_file</name></expr>)</condition> <block pos:start="207:31" pos:end="215:5">{<block_content pos:start="209:9" pos:end="213:18">

        <expr_stmt pos:start="209:9" pos:end="209:63"><expr pos:start="209:9" pos:end="209:62"><call pos:start="209:9" pos:end="209:62"><name pos:start="209:9" pos:end="209:18">error_setg</name><argument_list pos:start="209:19" pos:end="209:62">(<argument pos:start="209:20" pos:end="209:23"><expr pos:start="209:20" pos:end="209:23"><name pos:start="209:20" pos:end="209:23">errp</name></expr></argument>, <argument pos:start="209:26" pos:end="209:61"><expr pos:start="209:26" pos:end="209:61"><literal type="string" pos:start="209:26" pos:end="209:61">"Flat image can't have backing file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="211:9" pos:end="211:23"><expr pos:start="211:9" pos:end="211:22"><name pos:start="211:9" pos:end="211:11">ret</name> <operator pos:start="211:13" pos:end="211:13">=</operator> <operator pos:start="211:15" pos:end="211:15">-</operator><name pos:start="211:16" pos:end="211:22">ENOTSUP</name></expr>;</expr_stmt>

        <goto pos:start="213:9" pos:end="213:18">goto <name pos:start="213:14" pos:end="213:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="217:5" pos:end="225:5"><if pos:start="217:5" pos:end="225:5">if <condition pos:start="217:8" pos:end="217:29">(<expr pos:start="217:9" pos:end="217:28"><name pos:start="217:9" pos:end="217:12">flat</name> <operator pos:start="217:14" pos:end="217:15">&amp;&amp;</operator> <name pos:start="217:17" pos:end="217:28">zeroed_grain</name></expr>)</condition> <block pos:start="217:31" pos:end="225:5">{<block_content pos:start="219:9" pos:end="223:18">

        <expr_stmt pos:start="219:9" pos:end="219:65"><expr pos:start="219:9" pos:end="219:64"><call pos:start="219:9" pos:end="219:64"><name pos:start="219:9" pos:end="219:18">error_setg</name><argument_list pos:start="219:19" pos:end="219:64">(<argument pos:start="219:20" pos:end="219:23"><expr pos:start="219:20" pos:end="219:23"><name pos:start="219:20" pos:end="219:23">errp</name></expr></argument>, <argument pos:start="219:26" pos:end="219:63"><expr pos:start="219:26" pos:end="219:63"><literal type="string" pos:start="219:26" pos:end="219:63">"Flat image can't enable zeroed grain"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="221:9" pos:end="221:23"><expr pos:start="221:9" pos:end="221:22"><name pos:start="221:9" pos:end="221:11">ret</name> <operator pos:start="221:13" pos:end="221:13">=</operator> <operator pos:start="221:15" pos:end="221:15">-</operator><name pos:start="221:16" pos:end="221:22">ENOTSUP</name></expr>;</expr_stmt>

        <goto pos:start="223:9" pos:end="223:18">goto <name pos:start="223:14" pos:end="223:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="227:5" pos:end="259:5"><if pos:start="227:5" pos:end="259:5">if <condition pos:start="227:8" pos:end="227:21">(<expr pos:start="227:9" pos:end="227:20"><name pos:start="227:9" pos:end="227:20">backing_file</name></expr>)</condition> <block pos:start="227:23" pos:end="259:5">{<block_content pos:start="229:9" pos:end="257:59">

        <decl_stmt pos:start="229:9" pos:end="229:36"><decl pos:start="229:9" pos:end="229:35"><type pos:start="229:9" pos:end="229:26"><name pos:start="229:9" pos:end="229:24">BlockDriverState</name> <modifier pos:start="229:26" pos:end="229:26">*</modifier></type><name pos:start="229:27" pos:end="229:28">bs</name> <init pos:start="229:30" pos:end="229:35">= <expr pos:start="229:32" pos:end="229:35"><name pos:start="229:32" pos:end="229:35">NULL</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="231:9" pos:end="233:30"><expr pos:start="231:9" pos:end="233:29"><name pos:start="231:9" pos:end="231:11">ret</name> <operator pos:start="231:13" pos:end="231:13">=</operator> <call pos:start="231:15" pos:end="233:29"><name pos:start="231:15" pos:end="231:23">bdrv_open</name><argument_list pos:start="231:24" pos:end="233:29">(<argument pos:start="231:25" pos:end="231:27"><expr pos:start="231:25" pos:end="231:27"><operator pos:start="231:25" pos:end="231:25">&amp;</operator><name pos:start="231:26" pos:end="231:27">bs</name></expr></argument>, <argument pos:start="231:30" pos:end="231:41"><expr pos:start="231:30" pos:end="231:41"><name pos:start="231:30" pos:end="231:41">backing_file</name></expr></argument>, <argument pos:start="231:44" pos:end="231:47"><expr pos:start="231:44" pos:end="231:47"><name pos:start="231:44" pos:end="231:47">NULL</name></expr></argument>, <argument pos:start="231:50" pos:end="231:53"><expr pos:start="231:50" pos:end="231:53"><name pos:start="231:50" pos:end="231:53">NULL</name></expr></argument>, <argument pos:start="231:56" pos:end="231:72"><expr pos:start="231:56" pos:end="231:72"><name pos:start="231:56" pos:end="231:72">BDRV_O_NO_BACKING</name></expr></argument>, <argument pos:start="231:75" pos:end="231:78"><expr pos:start="231:75" pos:end="231:78"><name pos:start="231:75" pos:end="231:78">NULL</name></expr></argument>,

                        <argument pos:start="233:25" pos:end="233:28"><expr pos:start="233:25" pos:end="233:28"><name pos:start="233:25" pos:end="233:28">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="235:9" pos:end="239:9"><if pos:start="235:9" pos:end="239:9">if <condition pos:start="235:12" pos:end="235:21">(<expr pos:start="235:13" pos:end="235:20"><name pos:start="235:13" pos:end="235:15">ret</name> <operator pos:start="235:17" pos:end="235:18">!=</operator> <literal type="number" pos:start="235:20" pos:end="235:20">0</literal></expr>)</condition> <block pos:start="235:23" pos:end="239:9">{<block_content pos:start="237:13" pos:end="237:22">

            <goto pos:start="237:13" pos:end="237:22">goto <name pos:start="237:18" pos:end="237:21">exit</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="241:9" pos:end="249:9"><if pos:start="241:9" pos:end="249:9">if <condition pos:start="241:12" pos:end="241:49">(<expr pos:start="241:13" pos:end="241:48"><call pos:start="241:13" pos:end="241:48"><name pos:start="241:13" pos:end="241:18">strcmp</name><argument_list pos:start="241:19" pos:end="241:48">(<argument pos:start="241:20" pos:end="241:39"><expr pos:start="241:20" pos:end="241:39"><name pos:start="241:20" pos:end="241:39"><name pos:start="241:20" pos:end="241:21">bs</name><operator pos:start="241:22" pos:end="241:23">-&gt;</operator><name pos:start="241:24" pos:end="241:26">drv</name><operator pos:start="241:27" pos:end="241:28">-&gt;</operator><name pos:start="241:29" pos:end="241:39">format_name</name></name></expr></argument>, <argument pos:start="241:42" pos:end="241:47"><expr pos:start="241:42" pos:end="241:47"><literal type="string" pos:start="241:42" pos:end="241:47">"vmdk"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="241:51" pos:end="249:9">{<block_content pos:start="243:13" pos:end="247:22">

            <expr_stmt pos:start="243:13" pos:end="243:27"><expr pos:start="243:13" pos:end="243:26"><call pos:start="243:13" pos:end="243:26"><name pos:start="243:13" pos:end="243:22">bdrv_unref</name><argument_list pos:start="243:23" pos:end="243:26">(<argument pos:start="243:24" pos:end="243:25"><expr pos:start="243:24" pos:end="243:25"><name pos:start="243:24" pos:end="243:25">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="245:13" pos:end="245:26"><expr pos:start="245:13" pos:end="245:25"><name pos:start="245:13" pos:end="245:15">ret</name> <operator pos:start="245:17" pos:end="245:17">=</operator> <operator pos:start="245:19" pos:end="245:19">-</operator><name pos:start="245:20" pos:end="245:25">EINVAL</name></expr>;</expr_stmt>

            <goto pos:start="247:13" pos:end="247:22">goto <name pos:start="247:18" pos:end="247:21">exit</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="251:9" pos:end="251:42"><expr pos:start="251:9" pos:end="251:41"><name pos:start="251:9" pos:end="251:18">parent_cid</name> <operator pos:start="251:20" pos:end="251:20">=</operator> <call pos:start="251:22" pos:end="251:41"><name pos:start="251:22" pos:end="251:34">vmdk_read_cid</name><argument_list pos:start="251:35" pos:end="251:41">(<argument pos:start="251:36" pos:end="251:37"><expr pos:start="251:36" pos:end="251:37"><name pos:start="251:36" pos:end="251:37">bs</name></expr></argument>, <argument pos:start="251:40" pos:end="251:40"><expr pos:start="251:40" pos:end="251:40"><literal type="number" pos:start="251:40" pos:end="251:40">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="253:9" pos:end="253:23"><expr pos:start="253:9" pos:end="253:22"><call pos:start="253:9" pos:end="253:22"><name pos:start="253:9" pos:end="253:18">bdrv_unref</name><argument_list pos:start="253:19" pos:end="253:22">(<argument pos:start="253:20" pos:end="253:21"><expr pos:start="253:20" pos:end="253:21"><name pos:start="253:20" pos:end="253:21">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="255:9" pos:end="257:59"><expr pos:start="255:9" pos:end="257:58"><call pos:start="255:9" pos:end="257:58"><name pos:start="255:9" pos:end="255:16">snprintf</name><argument_list pos:start="255:17" pos:end="257:58">(<argument pos:start="255:18" pos:end="255:33"><expr pos:start="255:18" pos:end="255:33"><name pos:start="255:18" pos:end="255:33">parent_desc_line</name></expr></argument>, <argument pos:start="255:36" pos:end="255:59"><expr pos:start="255:36" pos:end="255:59"><sizeof pos:start="255:36" pos:end="255:59">sizeof<argument_list pos:start="255:42" pos:end="255:59">(<argument pos:start="255:43" pos:end="255:58"><expr pos:start="255:43" pos:end="255:58"><name pos:start="255:43" pos:end="255:58">parent_desc_line</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                <argument pos:start="257:17" pos:end="257:43"><expr pos:start="257:17" pos:end="257:43"><literal type="string" pos:start="257:17" pos:end="257:43">"parentFileNameHint=\"%s\""</literal></expr></argument>, <argument pos:start="257:46" pos:end="257:57"><expr pos:start="257:46" pos:end="257:57"><name pos:start="257:46" pos:end="257:57">backing_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="263:5" pos:end="263:24">/* Create extents */</comment>

    <expr_stmt pos:start="265:5" pos:end="265:26"><expr pos:start="265:5" pos:end="265:25"><name pos:start="265:5" pos:end="265:12">filesize</name> <operator pos:start="265:14" pos:end="265:14">=</operator> <name pos:start="265:16" pos:end="265:25">total_size</name></expr>;</expr_stmt>

    <while pos:start="267:5" pos:end="333:5">while <condition pos:start="267:11" pos:end="267:24">(<expr pos:start="267:12" pos:end="267:23"><name pos:start="267:12" pos:end="267:19">filesize</name> <operator pos:start="267:21" pos:end="267:21">&gt;</operator> <literal type="number" pos:start="267:23" pos:end="267:23">0</literal></expr>)</condition> <block pos:start="267:26" pos:end="333:5">{<block_content pos:start="269:9" pos:end="331:51">

        <decl_stmt pos:start="269:9" pos:end="269:33"><decl pos:start="269:9" pos:end="269:32"><type pos:start="269:9" pos:end="269:12"><name pos:start="269:9" pos:end="269:12">char</name></type> <name pos:start="269:14" pos:end="269:32"><name pos:start="269:14" pos:end="269:22">desc_line</name><index pos:start="269:23" pos:end="269:32">[<expr pos:start="269:24" pos:end="269:31"><name pos:start="269:24" pos:end="269:31">BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="271:9" pos:end="271:36"><decl pos:start="271:9" pos:end="271:35"><type pos:start="271:9" pos:end="271:12"><name pos:start="271:9" pos:end="271:12">char</name></type> <name pos:start="271:14" pos:end="271:35"><name pos:start="271:14" pos:end="271:25">ext_filename</name><index pos:start="271:26" pos:end="271:35">[<expr pos:start="271:27" pos:end="271:34"><name pos:start="271:27" pos:end="271:34">PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="273:9" pos:end="273:37"><decl pos:start="273:9" pos:end="273:36"><type pos:start="273:9" pos:end="273:12"><name pos:start="273:9" pos:end="273:12">char</name></type> <name pos:start="273:14" pos:end="273:36"><name pos:start="273:14" pos:end="273:26">desc_filename</name><index pos:start="273:27" pos:end="273:36">[<expr pos:start="273:28" pos:end="273:35"><name pos:start="273:28" pos:end="273:35">PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="275:9" pos:end="275:32"><decl pos:start="275:9" pos:end="275:31"><type pos:start="275:9" pos:end="275:15"><name pos:start="275:9" pos:end="275:15">int64_t</name></type> <name pos:start="275:17" pos:end="275:20">size</name> <init pos:start="275:22" pos:end="275:31">= <expr pos:start="275:24" pos:end="275:31"><name pos:start="275:24" pos:end="275:31">filesize</name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="279:9" pos:end="283:9"><if pos:start="279:9" pos:end="283:9">if <condition pos:start="279:12" pos:end="279:39">(<expr pos:start="279:13" pos:end="279:38"><name pos:start="279:13" pos:end="279:17">split</name> <operator pos:start="279:19" pos:end="279:20">&amp;&amp;</operator> <name pos:start="279:22" pos:end="279:25">size</name> <operator pos:start="279:27" pos:end="279:27">&gt;</operator> <name pos:start="279:29" pos:end="279:38">split_size</name></expr>)</condition> <block pos:start="279:41" pos:end="283:9">{<block_content pos:start="281:13" pos:end="281:30">

            <expr_stmt pos:start="281:13" pos:end="281:30"><expr pos:start="281:13" pos:end="281:29"><name pos:start="281:13" pos:end="281:16">size</name> <operator pos:start="281:18" pos:end="281:18">=</operator> <name pos:start="281:20" pos:end="281:29">split_size</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="285:9" pos:end="303:9"><if pos:start="285:9" pos:end="291:9">if <condition pos:start="285:12" pos:end="285:18">(<expr pos:start="285:13" pos:end="285:17"><name pos:start="285:13" pos:end="285:17">split</name></expr>)</condition> <block pos:start="285:20" pos:end="291:9">{<block_content pos:start="287:13" pos:end="289:62">

            <expr_stmt pos:start="287:13" pos:end="289:62"><expr pos:start="287:13" pos:end="289:61"><call pos:start="287:13" pos:end="289:61"><name pos:start="287:13" pos:end="287:20">snprintf</name><argument_list pos:start="287:21" pos:end="289:61">(<argument pos:start="287:22" pos:end="287:34"><expr pos:start="287:22" pos:end="287:34"><name pos:start="287:22" pos:end="287:34">desc_filename</name></expr></argument>, <argument pos:start="287:37" pos:end="287:57"><expr pos:start="287:37" pos:end="287:57"><sizeof pos:start="287:37" pos:end="287:57">sizeof<argument_list pos:start="287:43" pos:end="287:57">(<argument pos:start="287:44" pos:end="287:56"><expr pos:start="287:44" pos:end="287:56"><name pos:start="287:44" pos:end="287:56">desc_filename</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="287:60" pos:end="287:72"><expr pos:start="287:60" pos:end="287:72"><literal type="string" pos:start="287:60" pos:end="287:72">"%s-%c%03d%s"</literal></expr></argument>,

                    <argument pos:start="289:21" pos:end="289:26"><expr pos:start="289:21" pos:end="289:26"><name pos:start="289:21" pos:end="289:26">prefix</name></expr></argument>, <argument pos:start="289:29" pos:end="289:44"><expr pos:start="289:29" pos:end="289:44"><ternary pos:start="289:29" pos:end="289:44"><condition pos:start="289:29" pos:end="289:34"><expr pos:start="289:29" pos:end="289:32"><name pos:start="289:29" pos:end="289:32">flat</name></expr> ?</condition><then pos:start="289:36" pos:end="289:38"> <expr pos:start="289:36" pos:end="289:38"><literal type="char" pos:start="289:36" pos:end="289:38">'f'</literal></expr> </then><else pos:start="289:40" pos:end="289:44">: <expr pos:start="289:42" pos:end="289:44"><literal type="char" pos:start="289:42" pos:end="289:44">'s'</literal></expr></else></ternary></expr></argument>, <argument pos:start="289:47" pos:end="289:51"><expr pos:start="289:47" pos:end="289:51"><operator pos:start="289:47" pos:end="289:48">++</operator><name pos:start="289:49" pos:end="289:51">idx</name></expr></argument>, <argument pos:start="289:54" pos:end="289:60"><expr pos:start="289:54" pos:end="289:60"><name pos:start="289:54" pos:end="289:60">postfix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="291:11" pos:end="297:9">else if <condition pos:start="291:19" pos:end="291:24">(<expr pos:start="291:20" pos:end="291:23"><name pos:start="291:20" pos:end="291:23">flat</name></expr>)</condition> <block pos:start="291:26" pos:end="297:9">{<block_content pos:start="293:13" pos:end="295:37">

            <expr_stmt pos:start="293:13" pos:end="295:37"><expr pos:start="293:13" pos:end="295:36"><call pos:start="293:13" pos:end="295:36"><name pos:start="293:13" pos:end="293:20">snprintf</name><argument_list pos:start="293:21" pos:end="295:36">(<argument pos:start="293:22" pos:end="293:34"><expr pos:start="293:22" pos:end="293:34"><name pos:start="293:22" pos:end="293:34">desc_filename</name></expr></argument>, <argument pos:start="293:37" pos:end="293:57"><expr pos:start="293:37" pos:end="293:57"><sizeof pos:start="293:37" pos:end="293:57">sizeof<argument_list pos:start="293:43" pos:end="293:57">(<argument pos:start="293:44" pos:end="293:56"><expr pos:start="293:44" pos:end="293:56"><name pos:start="293:44" pos:end="293:56">desc_filename</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="293:60" pos:end="293:70"><expr pos:start="293:60" pos:end="293:70"><literal type="string" pos:start="293:60" pos:end="293:70">"%s-flat%s"</literal></expr></argument>,

                    <argument pos:start="295:21" pos:end="295:26"><expr pos:start="295:21" pos:end="295:26"><name pos:start="295:21" pos:end="295:26">prefix</name></expr></argument>, <argument pos:start="295:29" pos:end="295:35"><expr pos:start="295:29" pos:end="295:35"><name pos:start="295:29" pos:end="295:35">postfix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="297:11" pos:end="303:9">else <block pos:start="297:16" pos:end="303:9">{<block_content pos:start="299:13" pos:end="301:37">

            <expr_stmt pos:start="299:13" pos:end="301:37"><expr pos:start="299:13" pos:end="301:36"><call pos:start="299:13" pos:end="301:36"><name pos:start="299:13" pos:end="299:20">snprintf</name><argument_list pos:start="299:21" pos:end="301:36">(<argument pos:start="299:22" pos:end="299:34"><expr pos:start="299:22" pos:end="299:34"><name pos:start="299:22" pos:end="299:34">desc_filename</name></expr></argument>, <argument pos:start="299:37" pos:end="299:57"><expr pos:start="299:37" pos:end="299:57"><sizeof pos:start="299:37" pos:end="299:57">sizeof<argument_list pos:start="299:43" pos:end="299:57">(<argument pos:start="299:44" pos:end="299:56"><expr pos:start="299:44" pos:end="299:56"><name pos:start="299:44" pos:end="299:56">desc_filename</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="299:60" pos:end="299:65"><expr pos:start="299:60" pos:end="299:65"><literal type="string" pos:start="299:60" pos:end="299:65">"%s%s"</literal></expr></argument>,

                    <argument pos:start="301:21" pos:end="301:26"><expr pos:start="301:21" pos:end="301:26"><name pos:start="301:21" pos:end="301:26">prefix</name></expr></argument>, <argument pos:start="301:29" pos:end="301:35"><expr pos:start="301:29" pos:end="301:35"><name pos:start="301:29" pos:end="301:35">postfix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="305:9" pos:end="307:37"><expr pos:start="305:9" pos:end="307:36"><call pos:start="305:9" pos:end="307:36"><name pos:start="305:9" pos:end="305:16">snprintf</name><argument_list pos:start="305:17" pos:end="307:36">(<argument pos:start="305:18" pos:end="305:29"><expr pos:start="305:18" pos:end="305:29"><name pos:start="305:18" pos:end="305:29">ext_filename</name></expr></argument>, <argument pos:start="305:32" pos:end="305:51"><expr pos:start="305:32" pos:end="305:51"><sizeof pos:start="305:32" pos:end="305:51">sizeof<argument_list pos:start="305:38" pos:end="305:51">(<argument pos:start="305:39" pos:end="305:50"><expr pos:start="305:39" pos:end="305:50"><name pos:start="305:39" pos:end="305:50">ext_filename</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="305:54" pos:end="305:59"><expr pos:start="305:54" pos:end="305:59"><literal type="string" pos:start="305:54" pos:end="305:59">"%s%s"</literal></expr></argument>,

                <argument pos:start="307:17" pos:end="307:20"><expr pos:start="307:17" pos:end="307:20"><name pos:start="307:17" pos:end="307:20">path</name></expr></argument>, <argument pos:start="307:23" pos:end="307:35"><expr pos:start="307:23" pos:end="307:35"><name pos:start="307:23" pos:end="307:35">desc_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="311:9" pos:end="319:9"><if pos:start="311:9" pos:end="319:9">if <condition pos:start="311:12" pos:end="313:67">(<expr pos:start="311:13" pos:end="313:66"><call pos:start="311:13" pos:end="313:66"><name pos:start="311:13" pos:end="311:30">vmdk_create_extent</name><argument_list pos:start="311:31" pos:end="313:66">(<argument pos:start="311:32" pos:end="311:43"><expr pos:start="311:32" pos:end="311:43"><name pos:start="311:32" pos:end="311:43">ext_filename</name></expr></argument>, <argument pos:start="311:46" pos:end="311:49"><expr pos:start="311:46" pos:end="311:49"><name pos:start="311:46" pos:end="311:49">size</name></expr></argument>,

                               <argument pos:start="313:32" pos:end="313:35"><expr pos:start="313:32" pos:end="313:35"><name pos:start="313:32" pos:end="313:35">flat</name></expr></argument>, <argument pos:start="313:38" pos:end="313:45"><expr pos:start="313:38" pos:end="313:45"><name pos:start="313:38" pos:end="313:45">compress</name></expr></argument>, <argument pos:start="313:48" pos:end="313:59"><expr pos:start="313:48" pos:end="313:59"><name pos:start="313:48" pos:end="313:59">zeroed_grain</name></expr></argument>, <argument pos:start="313:62" pos:end="313:65"><expr pos:start="313:62" pos:end="313:65"><name pos:start="313:62" pos:end="313:65">errp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="313:69" pos:end="319:9">{<block_content pos:start="315:13" pos:end="317:22">

            <expr_stmt pos:start="315:13" pos:end="315:26"><expr pos:start="315:13" pos:end="315:25"><name pos:start="315:13" pos:end="315:15">ret</name> <operator pos:start="315:17" pos:end="315:17">=</operator> <operator pos:start="315:19" pos:end="315:19">-</operator><name pos:start="315:20" pos:end="315:25">EINVAL</name></expr>;</expr_stmt>

            <goto pos:start="317:13" pos:end="317:22">goto <name pos:start="317:18" pos:end="317:21">exit</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="321:9" pos:end="321:25"><expr pos:start="321:9" pos:end="321:24"><name pos:start="321:9" pos:end="321:16">filesize</name> <operator pos:start="321:18" pos:end="321:19">-=</operator> <name pos:start="321:21" pos:end="321:24">size</name></expr>;</expr_stmt>



        <comment type="block" pos:start="325:9" pos:end="325:37">/* Format description line */</comment>

        <expr_stmt pos:start="327:9" pos:end="329:78"><expr pos:start="327:9" pos:end="329:77"><call pos:start="327:9" pos:end="329:77"><name pos:start="327:9" pos:end="327:16">snprintf</name><argument_list pos:start="327:17" pos:end="329:77">(<argument pos:start="327:18" pos:end="327:26"><expr pos:start="327:18" pos:end="327:26"><name pos:start="327:18" pos:end="327:26">desc_line</name></expr></argument>, <argument pos:start="327:29" pos:end="327:45"><expr pos:start="327:29" pos:end="327:45"><sizeof pos:start="327:29" pos:end="327:45">sizeof<argument_list pos:start="327:35" pos:end="327:45">(<argument pos:start="327:36" pos:end="327:44"><expr pos:start="327:36" pos:end="327:44"><name pos:start="327:36" pos:end="327:44">desc_line</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                    <argument pos:start="329:21" pos:end="329:36"><expr pos:start="329:21" pos:end="329:36"><name pos:start="329:21" pos:end="329:36">desc_extent_line</name></expr></argument>, <argument pos:start="329:39" pos:end="329:61"><expr pos:start="329:39" pos:end="329:61"><name pos:start="329:39" pos:end="329:42">size</name> <operator pos:start="329:44" pos:end="329:44">/</operator> <name pos:start="329:46" pos:end="329:61">BDRV_SECTOR_SIZE</name></expr></argument>, <argument pos:start="329:64" pos:end="329:76"><expr pos:start="329:64" pos:end="329:76"><name pos:start="329:64" pos:end="329:76">desc_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="331:9" pos:end="331:51"><expr pos:start="331:9" pos:end="331:50"><call pos:start="331:9" pos:end="331:50"><name pos:start="331:9" pos:end="331:23">g_string_append</name><argument_list pos:start="331:24" pos:end="331:50">(<argument pos:start="331:25" pos:end="331:38"><expr pos:start="331:25" pos:end="331:38"><name pos:start="331:25" pos:end="331:38">ext_desc_lines</name></expr></argument>, <argument pos:start="331:41" pos:end="331:49"><expr pos:start="331:41" pos:end="331:49"><name pos:start="331:41" pos:end="331:49">desc_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>

    <comment type="block" pos:start="335:5" pos:end="335:34">/* generate descriptor file */</comment>

    <expr_stmt pos:start="337:5" pos:end="357:41"><expr pos:start="337:5" pos:end="357:40"><name pos:start="337:5" pos:end="337:8">desc</name> <operator pos:start="337:10" pos:end="337:10">=</operator> <call pos:start="337:12" pos:end="357:40"><name pos:start="337:12" pos:end="337:26">g_strdup_printf</name><argument_list pos:start="337:27" pos:end="357:40">(<argument pos:start="337:28" pos:end="337:40"><expr pos:start="337:28" pos:end="337:40"><name pos:start="337:28" pos:end="337:40">desc_template</name></expr></argument>,

                           <argument pos:start="339:28" pos:end="339:47"><expr pos:start="339:28" pos:end="339:47"><operator pos:start="339:28" pos:end="339:28">(</operator><name pos:start="339:29" pos:end="339:36">uint32_t</name><operator pos:start="339:37" pos:end="339:37">)</operator><call pos:start="339:38" pos:end="339:47"><name pos:start="339:38" pos:end="339:41">time</name><argument_list pos:start="339:42" pos:end="339:47">(<argument pos:start="339:43" pos:end="339:46"><expr pos:start="339:43" pos:end="339:46"><name pos:start="339:43" pos:end="339:46">NULL</name></expr></argument>)</argument_list></call></expr></argument>,

                           <argument pos:start="341:28" pos:end="341:37"><expr pos:start="341:28" pos:end="341:37"><name pos:start="341:28" pos:end="341:37">parent_cid</name></expr></argument>,

                           <argument pos:start="343:28" pos:end="343:30"><expr pos:start="343:28" pos:end="343:30"><name pos:start="343:28" pos:end="343:30">fmt</name></expr></argument>,

                           <argument pos:start="345:28" pos:end="345:43"><expr pos:start="345:28" pos:end="345:43"><name pos:start="345:28" pos:end="345:43">parent_desc_line</name></expr></argument>,

                           <argument pos:start="347:28" pos:end="347:46"><expr pos:start="347:28" pos:end="347:46"><name pos:start="347:28" pos:end="347:46"><name pos:start="347:28" pos:end="347:41">ext_desc_lines</name><operator pos:start="347:42" pos:end="347:43">-&gt;</operator><name pos:start="347:44" pos:end="347:46">str</name></name></expr></argument>,

                           <argument pos:start="349:28" pos:end="349:63"><expr pos:start="349:28" pos:end="349:63"><operator pos:start="349:28" pos:end="349:28">(</operator><ternary pos:start="349:29" pos:end="349:62"><condition pos:start="349:29" pos:end="349:56"><expr pos:start="349:29" pos:end="349:54"><name pos:start="349:29" pos:end="349:33">flags</name> <operator pos:start="349:35" pos:end="349:35">&amp;</operator> <name pos:start="349:37" pos:end="349:54">BLOCK_FLAG_COMPAT6</name></expr> ?</condition><then pos:start="349:58" pos:end="349:58"> <expr pos:start="349:58" pos:end="349:58"><literal type="number" pos:start="349:58" pos:end="349:58">6</literal></expr> </then><else pos:start="349:60" pos:end="349:62">: <expr pos:start="349:62" pos:end="349:62"><literal type="number" pos:start="349:62" pos:end="349:62">4</literal></expr></else></ternary><operator pos:start="349:63" pos:end="349:63">)</operator></expr></argument>,

                           <argument pos:start="351:28" pos:end="353:78"><expr pos:start="351:28" pos:end="353:78"><name pos:start="351:28" pos:end="351:37">total_size</name> <operator pos:start="351:39" pos:end="351:39">/</operator>

                               <operator pos:start="353:32" pos:end="353:32">(</operator><name pos:start="353:33" pos:end="353:39">int64_t</name><operator pos:start="353:40" pos:end="353:40">)</operator><operator pos:start="353:41" pos:end="353:41">(</operator><literal type="number" pos:start="353:42" pos:end="353:43">63</literal> <operator pos:start="353:45" pos:end="353:45">*</operator> <name pos:start="353:47" pos:end="353:58">number_heads</name> <operator pos:start="353:60" pos:end="353:60">*</operator> <name pos:start="353:62" pos:end="353:77">BDRV_SECTOR_SIZE</name><operator pos:start="353:78" pos:end="353:78">)</operator></expr></argument>,

                           <argument pos:start="355:28" pos:end="355:39"><expr pos:start="355:28" pos:end="355:39"><name pos:start="355:28" pos:end="355:39">number_heads</name></expr></argument>,

                           <argument pos:start="357:28" pos:end="357:39"><expr pos:start="357:28" pos:end="357:39"><name pos:start="357:28" pos:end="357:39">adapter_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="359:5" pos:end="359:28"><expr pos:start="359:5" pos:end="359:27"><name pos:start="359:5" pos:end="359:12">desc_len</name> <operator pos:start="359:14" pos:end="359:14">=</operator> <call pos:start="359:16" pos:end="359:27"><name pos:start="359:16" pos:end="359:21">strlen</name><argument_list pos:start="359:22" pos:end="359:27">(<argument pos:start="359:23" pos:end="359:26"><expr pos:start="359:23" pos:end="359:26"><name pos:start="359:23" pos:end="359:26">desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="361:5" pos:end="361:39">/* the descriptor offset = 0x200 */</comment>

    <if_stmt pos:start="363:5" pos:end="379:5"><if pos:start="363:5" pos:end="367:5">if <condition pos:start="363:8" pos:end="363:24">(<expr pos:start="363:9" pos:end="363:23"><operator pos:start="363:9" pos:end="363:9">!</operator><name pos:start="363:10" pos:end="363:14">split</name> <operator pos:start="363:16" pos:end="363:17">&amp;&amp;</operator> <operator pos:start="363:19" pos:end="363:19">!</operator><name pos:start="363:20" pos:end="363:23">flat</name></expr>)</condition> <block pos:start="363:26" pos:end="367:5">{<block_content pos:start="365:9" pos:end="365:28">

        <expr_stmt pos:start="365:9" pos:end="365:28"><expr pos:start="365:9" pos:end="365:27"><name pos:start="365:9" pos:end="365:19">desc_offset</name> <operator pos:start="365:21" pos:end="365:21">=</operator> <literal type="number" pos:start="365:23" pos:end="365:27">0x200</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="367:7" pos:end="379:5">else <block pos:start="367:12" pos:end="379:5">{<block_content pos:start="369:9" pos:end="377:9">

        <expr_stmt pos:start="369:9" pos:end="369:62"><expr pos:start="369:9" pos:end="369:61"><name pos:start="369:9" pos:end="369:11">ret</name> <operator pos:start="369:13" pos:end="369:13">=</operator> <call pos:start="369:15" pos:end="369:61"><name pos:start="369:15" pos:end="369:30">bdrv_create_file</name><argument_list pos:start="369:31" pos:end="369:61">(<argument pos:start="369:32" pos:end="369:39"><expr pos:start="369:32" pos:end="369:39"><name pos:start="369:32" pos:end="369:39">filename</name></expr></argument>, <argument pos:start="369:42" pos:end="369:48"><expr pos:start="369:42" pos:end="369:48"><name pos:start="369:42" pos:end="369:48">options</name></expr></argument>, <argument pos:start="369:51" pos:end="369:60"><expr pos:start="369:51" pos:end="369:60"><operator pos:start="369:51" pos:end="369:51">&amp;</operator><name pos:start="369:52" pos:end="369:60">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="371:9" pos:end="377:9"><if pos:start="371:9" pos:end="377:9">if <condition pos:start="371:12" pos:end="371:20">(<expr pos:start="371:13" pos:end="371:19"><name pos:start="371:13" pos:end="371:15">ret</name> <operator pos:start="371:17" pos:end="371:17">&lt;</operator> <literal type="number" pos:start="371:19" pos:end="371:19">0</literal></expr>)</condition> <block pos:start="371:22" pos:end="377:9">{<block_content pos:start="373:13" pos:end="375:22">

            <expr_stmt pos:start="373:13" pos:end="373:72"><expr pos:start="373:13" pos:end="373:71"><call pos:start="373:13" pos:end="373:71"><name pos:start="373:13" pos:end="373:28">error_setg_errno</name><argument_list pos:start="373:29" pos:end="373:71">(<argument pos:start="373:30" pos:end="373:33"><expr pos:start="373:30" pos:end="373:33"><name pos:start="373:30" pos:end="373:33">errp</name></expr></argument>, <argument pos:start="373:36" pos:end="373:39"><expr pos:start="373:36" pos:end="373:39"><operator pos:start="373:36" pos:end="373:36">-</operator><name pos:start="373:37" pos:end="373:39">ret</name></expr></argument>, <argument pos:start="373:42" pos:end="373:70"><expr pos:start="373:42" pos:end="373:70"><literal type="string" pos:start="373:42" pos:end="373:70">"Could not create image file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="375:13" pos:end="375:22">goto <name pos:start="375:18" pos:end="375:21">exit</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="381:5" pos:end="381:27"><expr pos:start="381:5" pos:end="381:26"><call pos:start="381:5" pos:end="381:26"><name pos:start="381:5" pos:end="381:10">assert</name><argument_list pos:start="381:11" pos:end="381:26">(<argument pos:start="381:12" pos:end="381:25"><expr pos:start="381:12" pos:end="381:25"><name pos:start="381:12" pos:end="381:17">new_bs</name> <operator pos:start="381:19" pos:end="381:20">==</operator> <name pos:start="381:22" pos:end="381:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="383:5" pos:end="385:69"><expr pos:start="383:5" pos:end="385:68"><name pos:start="383:5" pos:end="383:7">ret</name> <operator pos:start="383:9" pos:end="383:9">=</operator> <call pos:start="383:11" pos:end="385:68"><name pos:start="383:11" pos:end="383:19">bdrv_open</name><argument_list pos:start="383:20" pos:end="385:68">(<argument pos:start="383:21" pos:end="383:27"><expr pos:start="383:21" pos:end="383:27"><operator pos:start="383:21" pos:end="383:21">&amp;</operator><name pos:start="383:22" pos:end="383:27">new_bs</name></expr></argument>, <argument pos:start="383:30" pos:end="383:37"><expr pos:start="383:30" pos:end="383:37"><name pos:start="383:30" pos:end="383:37">filename</name></expr></argument>, <argument pos:start="383:40" pos:end="383:43"><expr pos:start="383:40" pos:end="383:43"><name pos:start="383:40" pos:end="383:43">NULL</name></expr></argument>, <argument pos:start="383:46" pos:end="383:49"><expr pos:start="383:46" pos:end="383:49"><name pos:start="383:46" pos:end="383:49">NULL</name></expr></argument>,

                    <argument pos:start="385:21" pos:end="385:49"><expr pos:start="385:21" pos:end="385:49"><name pos:start="385:21" pos:end="385:31">BDRV_O_RDWR</name> <operator pos:start="385:33" pos:end="385:33">|</operator> <name pos:start="385:35" pos:end="385:49">BDRV_O_PROTOCOL</name></expr></argument>, <argument pos:start="385:52" pos:end="385:55"><expr pos:start="385:52" pos:end="385:55"><name pos:start="385:52" pos:end="385:55">NULL</name></expr></argument>, <argument pos:start="385:58" pos:end="385:67"><expr pos:start="385:58" pos:end="385:67"><operator pos:start="385:58" pos:end="385:58">&amp;</operator><name pos:start="385:59" pos:end="385:67">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="387:5" pos:end="393:5"><if pos:start="387:5" pos:end="393:5">if <condition pos:start="387:8" pos:end="387:16">(<expr pos:start="387:9" pos:end="387:15"><name pos:start="387:9" pos:end="387:11">ret</name> <operator pos:start="387:13" pos:end="387:13">&lt;</operator> <literal type="number" pos:start="387:15" pos:end="387:15">0</literal></expr>)</condition> <block pos:start="387:18" pos:end="393:5">{<block_content pos:start="389:9" pos:end="391:18">

        <expr_stmt pos:start="389:9" pos:end="389:68"><expr pos:start="389:9" pos:end="389:67"><call pos:start="389:9" pos:end="389:67"><name pos:start="389:9" pos:end="389:24">error_setg_errno</name><argument_list pos:start="389:25" pos:end="389:67">(<argument pos:start="389:26" pos:end="389:29"><expr pos:start="389:26" pos:end="389:29"><name pos:start="389:26" pos:end="389:29">errp</name></expr></argument>, <argument pos:start="389:32" pos:end="389:35"><expr pos:start="389:32" pos:end="389:35"><operator pos:start="389:32" pos:end="389:32">-</operator><name pos:start="389:33" pos:end="389:35">ret</name></expr></argument>, <argument pos:start="389:38" pos:end="389:66"><expr pos:start="389:38" pos:end="389:66"><literal type="string" pos:start="389:38" pos:end="389:66">"Could not write description"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="391:9" pos:end="391:18">goto <name pos:start="391:14" pos:end="391:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="395:5" pos:end="395:59"><expr pos:start="395:5" pos:end="395:58"><name pos:start="395:5" pos:end="395:7">ret</name> <operator pos:start="395:9" pos:end="395:9">=</operator> <call pos:start="395:11" pos:end="395:58"><name pos:start="395:11" pos:end="395:21">bdrv_pwrite</name><argument_list pos:start="395:22" pos:end="395:58">(<argument pos:start="395:23" pos:end="395:28"><expr pos:start="395:23" pos:end="395:28"><name pos:start="395:23" pos:end="395:28">new_bs</name></expr></argument>, <argument pos:start="395:31" pos:end="395:41"><expr pos:start="395:31" pos:end="395:41"><name pos:start="395:31" pos:end="395:41">desc_offset</name></expr></argument>, <argument pos:start="395:44" pos:end="395:47"><expr pos:start="395:44" pos:end="395:47"><name pos:start="395:44" pos:end="395:47">desc</name></expr></argument>, <argument pos:start="395:50" pos:end="395:57"><expr pos:start="395:50" pos:end="395:57"><name pos:start="395:50" pos:end="395:57">desc_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="397:5" pos:end="403:5"><if pos:start="397:5" pos:end="403:5">if <condition pos:start="397:8" pos:end="397:16">(<expr pos:start="397:9" pos:end="397:15"><name pos:start="397:9" pos:end="397:11">ret</name> <operator pos:start="397:13" pos:end="397:13">&lt;</operator> <literal type="number" pos:start="397:15" pos:end="397:15">0</literal></expr>)</condition> <block pos:start="397:18" pos:end="403:5">{<block_content pos:start="399:9" pos:end="401:18">

        <expr_stmt pos:start="399:9" pos:end="399:68"><expr pos:start="399:9" pos:end="399:67"><call pos:start="399:9" pos:end="399:67"><name pos:start="399:9" pos:end="399:24">error_setg_errno</name><argument_list pos:start="399:25" pos:end="399:67">(<argument pos:start="399:26" pos:end="399:29"><expr pos:start="399:26" pos:end="399:29"><name pos:start="399:26" pos:end="399:29">errp</name></expr></argument>, <argument pos:start="399:32" pos:end="399:35"><expr pos:start="399:32" pos:end="399:35"><operator pos:start="399:32" pos:end="399:32">-</operator><name pos:start="399:33" pos:end="399:35">ret</name></expr></argument>, <argument pos:start="399:38" pos:end="399:66"><expr pos:start="399:38" pos:end="399:66"><literal type="string" pos:start="399:38" pos:end="399:66">"Could not write description"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="401:9" pos:end="401:18">goto <name pos:start="401:14" pos:end="401:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="405:5" pos:end="407:30">/* bdrv_pwrite write padding zeros to align to sector, we don't need that

     * for description file */</comment>

    <if_stmt pos:start="409:5" pos:end="419:5"><if pos:start="409:5" pos:end="419:5">if <condition pos:start="409:8" pos:end="409:25">(<expr pos:start="409:9" pos:end="409:24"><name pos:start="409:9" pos:end="409:19">desc_offset</name> <operator pos:start="409:21" pos:end="409:22">==</operator> <literal type="number" pos:start="409:24" pos:end="409:24">0</literal></expr>)</condition> <block pos:start="409:27" pos:end="419:5">{<block_content pos:start="411:9" pos:end="417:9">

        <expr_stmt pos:start="411:9" pos:end="411:46"><expr pos:start="411:9" pos:end="411:45"><name pos:start="411:9" pos:end="411:11">ret</name> <operator pos:start="411:13" pos:end="411:13">=</operator> <call pos:start="411:15" pos:end="411:45"><name pos:start="411:15" pos:end="411:27">bdrv_truncate</name><argument_list pos:start="411:28" pos:end="411:45">(<argument pos:start="411:29" pos:end="411:34"><expr pos:start="411:29" pos:end="411:34"><name pos:start="411:29" pos:end="411:34">new_bs</name></expr></argument>, <argument pos:start="411:37" pos:end="411:44"><expr pos:start="411:37" pos:end="411:44"><name pos:start="411:37" pos:end="411:44">desc_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="413:9" pos:end="417:9"><if pos:start="413:9" pos:end="417:9">if <condition pos:start="413:12" pos:end="413:20">(<expr pos:start="413:13" pos:end="413:19"><name pos:start="413:13" pos:end="413:15">ret</name> <operator pos:start="413:17" pos:end="413:17">&lt;</operator> <literal type="number" pos:start="413:19" pos:end="413:19">0</literal></expr>)</condition> <block pos:start="413:22" pos:end="417:9">{<block_content pos:start="415:13" pos:end="415:68">

            <expr_stmt pos:start="415:13" pos:end="415:68"><expr pos:start="415:13" pos:end="415:67"><call pos:start="415:13" pos:end="415:67"><name pos:start="415:13" pos:end="415:28">error_setg_errno</name><argument_list pos:start="415:29" pos:end="415:67">(<argument pos:start="415:30" pos:end="415:33"><expr pos:start="415:30" pos:end="415:33"><name pos:start="415:30" pos:end="415:33">errp</name></expr></argument>, <argument pos:start="415:36" pos:end="415:39"><expr pos:start="415:36" pos:end="415:39"><operator pos:start="415:36" pos:end="415:36">-</operator><name pos:start="415:37" pos:end="415:39">ret</name></expr></argument>, <argument pos:start="415:42" pos:end="415:66"><expr pos:start="415:42" pos:end="415:66"><literal type="string" pos:start="415:42" pos:end="415:66">"Could not truncate file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

<label pos:start="421:1" pos:end="421:5"><name pos:start="421:1" pos:end="421:4">exit</name>:</label>

    <if_stmt pos:start="423:5" pos:end="427:5"><if pos:start="423:5" pos:end="427:5">if <condition pos:start="423:8" pos:end="423:15">(<expr pos:start="423:9" pos:end="423:14"><name pos:start="423:9" pos:end="423:14">new_bs</name></expr>)</condition> <block pos:start="423:17" pos:end="427:5">{<block_content pos:start="425:9" pos:end="425:27">

        <expr_stmt pos:start="425:9" pos:end="425:27"><expr pos:start="425:9" pos:end="425:26"><call pos:start="425:9" pos:end="425:26"><name pos:start="425:9" pos:end="425:18">bdrv_unref</name><argument_list pos:start="425:19" pos:end="425:26">(<argument pos:start="425:20" pos:end="425:25"><expr pos:start="425:20" pos:end="425:25"><name pos:start="425:20" pos:end="425:25">new_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="429:5" pos:end="429:17"><expr pos:start="429:5" pos:end="429:16"><call pos:start="429:5" pos:end="429:16"><name pos:start="429:5" pos:end="429:10">g_free</name><argument_list pos:start="429:11" pos:end="429:16">(<argument pos:start="429:12" pos:end="429:15"><expr pos:start="429:12" pos:end="429:15"><name pos:start="429:12" pos:end="429:15">desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="431:5" pos:end="431:40"><expr pos:start="431:5" pos:end="431:39"><call pos:start="431:5" pos:end="431:39"><name pos:start="431:5" pos:end="431:17">g_string_free</name><argument_list pos:start="431:18" pos:end="431:39">(<argument pos:start="431:19" pos:end="431:32"><expr pos:start="431:19" pos:end="431:32"><name pos:start="431:19" pos:end="431:32">ext_desc_lines</name></expr></argument>, <argument pos:start="431:35" pos:end="431:38"><expr pos:start="431:35" pos:end="431:38"><name pos:start="431:35" pos:end="431:38">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="433:5" pos:end="433:15">return <expr pos:start="433:12" pos:end="433:14"><name pos:start="433:12" pos:end="433:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
