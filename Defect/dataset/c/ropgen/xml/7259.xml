<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/7259.c" pos:tabs="8"><function pos:start="1:1" pos:end="105:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">h261_decode_gob</name><parameter_list pos:start="1:27" pos:end="1:42">(<parameter pos:start="1:28" pos:end="1:41"><decl pos:start="1:28" pos:end="1:41"><type pos:start="1:28" pos:end="1:40"><name pos:start="1:28" pos:end="1:38">H261Context</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:41">h</name></decl></parameter>)</parameter_list><block pos:start="1:43" pos:end="105:1">{<block_content pos:start="3:5" pos:end="103:14">

    <decl_stmt pos:start="3:5" pos:end="3:37"><decl pos:start="3:5" pos:end="3:36"><type pos:start="3:5" pos:end="3:26"><name pos:start="3:5" pos:end="3:18">MpegEncContext</name> <modifier pos:start="3:20" pos:end="3:20">*</modifier> <specifier pos:start="3:22" pos:end="3:26">const</specifier></type> <name pos:start="3:28" pos:end="3:28">s</name> <init pos:start="3:30" pos:end="3:36">= <expr pos:start="3:32" pos:end="3:36"><operator pos:start="3:32" pos:end="3:32">&amp;</operator><name pos:start="3:33" pos:end="3:36"><name pos:start="3:33" pos:end="3:33">h</name><operator pos:start="3:34" pos:end="3:35">-&gt;</operator><name pos:start="3:36" pos:end="3:36">s</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="5:5" pos:end="5:10"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">v</name></decl>;</decl_stmt>

    

    <expr_stmt pos:start="9:5" pos:end="9:32"><expr pos:start="9:5" pos:end="9:31"><call pos:start="9:5" pos:end="9:31"><name pos:start="9:5" pos:end="9:17">ff_set_qscale</name><argument_list pos:start="9:18" pos:end="9:31">(<argument pos:start="9:19" pos:end="9:19"><expr pos:start="9:19" pos:end="9:19"><name pos:start="9:19" pos:end="9:19">s</name></expr></argument>, <argument pos:start="9:22" pos:end="9:30"><expr pos:start="9:22" pos:end="9:30"><name pos:start="9:22" pos:end="9:30"><name pos:start="9:22" pos:end="9:22">s</name><operator pos:start="9:23" pos:end="9:24">-&gt;</operator><name pos:start="9:25" pos:end="9:30">qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="13:5" pos:end="13:29">/* check for empty gob */</comment>

    <expr_stmt pos:start="15:5" pos:end="15:29"><expr pos:start="15:5" pos:end="15:28"><name pos:start="15:5" pos:end="15:5">v</name><operator pos:start="15:6" pos:end="15:6">=</operator> <call pos:start="15:8" pos:end="15:28"><name pos:start="15:8" pos:end="15:16">show_bits</name><argument_list pos:start="15:17" pos:end="15:28">(<argument pos:start="15:18" pos:end="15:23"><expr pos:start="15:18" pos:end="15:23"><operator pos:start="15:18" pos:end="15:18">&amp;</operator><name pos:start="15:19" pos:end="15:23"><name pos:start="15:19" pos:end="15:19">s</name><operator pos:start="15:20" pos:end="15:21">-&gt;</operator><name pos:start="15:22" pos:end="15:23">gb</name></name></expr></argument>, <argument pos:start="15:26" pos:end="15:27"><expr pos:start="15:26" pos:end="15:27"><literal type="number" pos:start="15:26" pos:end="15:27">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="19:5" pos:end="23:5"><if pos:start="19:5" pos:end="23:5">if<condition pos:start="19:7" pos:end="19:56">(<expr pos:start="19:8" pos:end="19:55"><call pos:start="19:8" pos:end="19:29"><name pos:start="19:8" pos:end="19:21">get_bits_count</name><argument_list pos:start="19:22" pos:end="19:29">(<argument pos:start="19:23" pos:end="19:28"><expr pos:start="19:23" pos:end="19:28"><operator pos:start="19:23" pos:end="19:23">&amp;</operator><name pos:start="19:24" pos:end="19:28"><name pos:start="19:24" pos:end="19:24">s</name><operator pos:start="19:25" pos:end="19:26">-&gt;</operator><name pos:start="19:27" pos:end="19:28">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="19:31" pos:end="19:31">+</operator> <literal type="number" pos:start="19:33" pos:end="19:34">15</literal> <operator pos:start="19:36" pos:end="19:36">&gt;</operator> <name pos:start="19:38" pos:end="19:55"><name pos:start="19:38" pos:end="19:38">s</name><operator pos:start="19:39" pos:end="19:40">-&gt;</operator><name pos:start="19:41" pos:end="19:42">gb</name><operator pos:start="19:43" pos:end="19:43">.</operator><name pos:start="19:44" pos:end="19:55">size_in_bits</name></name></expr>)</condition><block pos:start="19:57" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:62">

        <expr_stmt pos:start="21:9" pos:end="21:62"><expr pos:start="21:9" pos:end="21:61"><name pos:start="21:9" pos:end="21:9">v</name><operator pos:start="21:10" pos:end="21:12">&gt;&gt;=</operator> <call pos:start="21:14" pos:end="21:35"><name pos:start="21:14" pos:end="21:27">get_bits_count</name><argument_list pos:start="21:28" pos:end="21:35">(<argument pos:start="21:29" pos:end="21:34"><expr pos:start="21:29" pos:end="21:34"><operator pos:start="21:29" pos:end="21:29">&amp;</operator><name pos:start="21:30" pos:end="21:34"><name pos:start="21:30" pos:end="21:30">s</name><operator pos:start="21:31" pos:end="21:32">-&gt;</operator><name pos:start="21:33" pos:end="21:34">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="21:37" pos:end="21:37">+</operator> <literal type="number" pos:start="21:39" pos:end="21:42">15</literal> <operator pos:start="21:42" pos:end="21:42">-</operator> <name pos:start="21:44" pos:end="21:61"><name pos:start="21:44" pos:end="21:44">s</name><operator pos:start="21:45" pos:end="21:46">-&gt;</operator><name pos:start="21:47" pos:end="21:48">gb</name><operator pos:start="21:49" pos:end="21:49">.</operator><name pos:start="21:50" pos:end="21:61">size_in_bits</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if<condition pos:start="27:7" pos:end="27:12">(<expr pos:start="27:8" pos:end="27:11"><name pos:start="27:8" pos:end="27:8">v</name><operator pos:start="27:9" pos:end="27:10">==</operator><literal type="number" pos:start="27:11" pos:end="27:11">0</literal></expr>)</condition><block pos:start="27:13" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:17">

        <expr_stmt pos:start="29:9" pos:end="29:41"><expr pos:start="29:9" pos:end="29:40"><call pos:start="29:9" pos:end="29:40"><name pos:start="29:9" pos:end="29:30">h261_decode_mb_skipped</name><argument_list pos:start="29:31" pos:end="29:40">(<argument pos:start="29:32" pos:end="29:32"><expr pos:start="29:32" pos:end="29:32"><name pos:start="29:32" pos:end="29:32">h</name></expr></argument>, <argument pos:start="29:35" pos:end="29:35"><expr pos:start="29:35" pos:end="29:35"><literal type="number" pos:start="29:35" pos:end="29:35">0</literal></expr></argument>, <argument pos:start="29:38" pos:end="29:39"><expr pos:start="29:38" pos:end="29:39"><literal type="number" pos:start="29:38" pos:end="29:39">33</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:17">return <expr pos:start="31:16" pos:end="31:16"><literal type="number" pos:start="31:16" pos:end="31:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="37:5" pos:end="37:21">/* decode mb's */</comment>

    <while pos:start="39:5" pos:end="99:5">while<condition pos:start="39:10" pos:end="39:36">(<expr pos:start="39:11" pos:end="39:35"><name pos:start="39:11" pos:end="39:24"><name pos:start="39:11" pos:end="39:11">h</name><operator pos:start="39:12" pos:end="39:13">-&gt;</operator><name pos:start="39:14" pos:end="39:24">current_mba</name></name> <operator pos:start="39:26" pos:end="39:27">&lt;=</operator> <name pos:start="39:29" pos:end="39:35">MAX_MBA</name></expr>)</condition>

    <block pos:start="41:5" pos:end="99:5">{<block_content pos:start="43:9" pos:end="97:80">

        <decl_stmt pos:start="43:9" pos:end="43:16"><decl pos:start="43:9" pos:end="43:15"><type pos:start="43:9" pos:end="43:11"><name pos:start="43:9" pos:end="43:11">int</name></type> <name pos:start="43:13" pos:end="43:15">ret</name></decl>;</decl_stmt>

        <comment type="block" pos:start="45:9" pos:end="45:28">/* DCT &amp; quantize */</comment>

        <expr_stmt pos:start="47:9" pos:end="47:41"><expr pos:start="47:9" pos:end="47:40"><name pos:start="47:9" pos:end="47:11">ret</name><operator pos:start="47:12" pos:end="47:12">=</operator> <call pos:start="47:14" pos:end="47:40"><name pos:start="47:14" pos:end="47:27">h261_decode_mb</name><argument_list pos:start="47:28" pos:end="47:40">(<argument pos:start="47:29" pos:end="47:29"><expr pos:start="47:29" pos:end="47:29"><name pos:start="47:29" pos:end="47:29">h</name></expr></argument>, <argument pos:start="47:32" pos:end="47:39"><expr pos:start="47:32" pos:end="47:39"><name pos:start="47:32" pos:end="47:39"><name pos:start="47:32" pos:end="47:32">s</name><operator pos:start="47:33" pos:end="47:34">-&gt;</operator><name pos:start="47:35" pos:end="47:39">block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="49:9" pos:end="83:9"><if pos:start="49:9" pos:end="83:9">if<condition pos:start="49:11" pos:end="49:17">(<expr pos:start="49:12" pos:end="49:16"><name pos:start="49:12" pos:end="49:14">ret</name><operator pos:start="49:15" pos:end="49:15">&lt;</operator><literal type="number" pos:start="49:16" pos:end="49:16">0</literal></expr>)</condition><block pos:start="49:18" pos:end="83:9">{<block_content pos:start="51:13" pos:end="81:22">

            <decl_stmt pos:start="51:13" pos:end="51:57"><decl pos:start="51:13" pos:end="51:56"><type pos:start="51:13" pos:end="51:21"><specifier pos:start="51:13" pos:end="51:17">const</specifier> <name pos:start="51:19" pos:end="51:21">int</name></type> <name pos:start="51:23" pos:end="51:24">xy</name><init pos:start="51:25" pos:end="51:56">= <expr pos:start="51:27" pos:end="51:56"><name pos:start="51:27" pos:end="51:33"><name pos:start="51:27" pos:end="51:27">s</name><operator pos:start="51:28" pos:end="51:29">-&gt;</operator><name pos:start="51:30" pos:end="51:33">mb_x</name></name> <operator pos:start="51:35" pos:end="51:35">+</operator> <name pos:start="51:37" pos:end="51:43"><name pos:start="51:37" pos:end="51:37">s</name><operator pos:start="51:38" pos:end="51:39">-&gt;</operator><name pos:start="51:40" pos:end="51:43">mb_y</name></name><operator pos:start="51:44" pos:end="51:44">*</operator><name pos:start="51:45" pos:end="51:56"><name pos:start="51:45" pos:end="51:45">s</name><operator pos:start="51:46" pos:end="51:47">-&gt;</operator><name pos:start="51:48" pos:end="51:56">mb_stride</name></name></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="53:13" pos:end="77:13"><if pos:start="53:13" pos:end="71:13">if<condition pos:start="53:15" pos:end="53:30">(<expr pos:start="53:16" pos:end="53:29"><name pos:start="53:16" pos:end="53:18">ret</name><operator pos:start="53:19" pos:end="53:20">==</operator><name pos:start="53:21" pos:end="53:29">SLICE_END</name></expr>)</condition><block pos:start="53:31" pos:end="71:13">{<block_content pos:start="55:17" pos:end="69:25">

                <expr_stmt pos:start="55:17" pos:end="55:43"><expr pos:start="55:17" pos:end="55:42"><call pos:start="55:17" pos:end="55:42"><name pos:start="55:17" pos:end="55:29">MPV_decode_mb</name><argument_list pos:start="55:30" pos:end="55:42">(<argument pos:start="55:31" pos:end="55:31"><expr pos:start="55:31" pos:end="55:31"><name pos:start="55:31" pos:end="55:31">s</name></expr></argument>, <argument pos:start="55:34" pos:end="55:41"><expr pos:start="55:34" pos:end="55:41"><name pos:start="55:34" pos:end="55:41"><name pos:start="55:34" pos:end="55:34">s</name><operator pos:start="55:35" pos:end="55:36">-&gt;</operator><name pos:start="55:37" pos:end="55:41">block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="57:17" pos:end="61:17"><if pos:start="57:17" pos:end="61:17">if<condition pos:start="57:19" pos:end="57:34">(<expr pos:start="57:20" pos:end="57:33"><name pos:start="57:20" pos:end="57:33"><name pos:start="57:20" pos:end="57:20">h</name><operator pos:start="57:21" pos:end="57:22">-&gt;</operator><name pos:start="57:23" pos:end="57:33">loop_filter</name></name></expr>)</condition><block pos:start="57:35" pos:end="61:17">{<block_content pos:start="59:21" pos:end="59:43">

                    <expr_stmt pos:start="59:21" pos:end="59:43"><expr pos:start="59:21" pos:end="59:42"><call pos:start="59:21" pos:end="59:42"><name pos:start="59:21" pos:end="59:39">ff_h261_loop_filter</name><argument_list pos:start="59:40" pos:end="59:42">(<argument pos:start="59:41" pos:end="59:41"><expr pos:start="59:41" pos:end="59:41"><name pos:start="59:41" pos:end="59:41">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="63:17" pos:end="63:35"><expr pos:start="63:17" pos:end="63:34"><name pos:start="63:17" pos:end="63:30"><name pos:start="63:17" pos:end="63:17">h</name><operator pos:start="63:18" pos:end="63:19">-&gt;</operator><name pos:start="63:20" pos:end="63:30">loop_filter</name></name> <operator pos:start="63:32" pos:end="63:32">=</operator> <literal type="number" pos:start="63:34" pos:end="63:34">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="65:17" pos:end="65:88"><expr pos:start="65:17" pos:end="65:87"><call pos:start="65:17" pos:end="65:87"><name pos:start="65:17" pos:end="65:38">h261_decode_mb_skipped</name><argument_list pos:start="65:39" pos:end="65:87">(<argument pos:start="65:40" pos:end="65:40"><expr pos:start="65:40" pos:end="65:40"><name pos:start="65:40" pos:end="65:40">h</name></expr></argument>, <argument pos:start="65:43" pos:end="65:68"><expr pos:start="65:43" pos:end="65:68"><name pos:start="65:43" pos:end="65:56"><name pos:start="65:43" pos:end="65:43">h</name><operator pos:start="65:44" pos:end="65:45">-&gt;</operator><name pos:start="65:46" pos:end="65:56">current_mba</name></name><operator pos:start="65:57" pos:end="65:57">-</operator><name pos:start="65:58" pos:end="65:68"><name pos:start="65:58" pos:end="65:58">h</name><operator pos:start="65:59" pos:end="65:60">-&gt;</operator><name pos:start="65:61" pos:end="65:68">mba_diff</name></name></expr></argument>, <argument pos:start="65:71" pos:end="65:86"><expr pos:start="65:71" pos:end="65:86"><name pos:start="65:71" pos:end="65:84"><name pos:start="65:71" pos:end="65:71">h</name><operator pos:start="65:72" pos:end="65:73">-&gt;</operator><name pos:start="65:74" pos:end="65:84">current_mba</name></name><operator pos:start="65:85" pos:end="65:85">-</operator><literal type="number" pos:start="65:86" pos:end="65:86">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="67:17" pos:end="67:62"><expr pos:start="67:17" pos:end="67:61"><call pos:start="67:17" pos:end="67:61"><name pos:start="67:17" pos:end="67:38">h261_decode_mb_skipped</name><argument_list pos:start="67:39" pos:end="67:61">(<argument pos:start="67:40" pos:end="67:40"><expr pos:start="67:40" pos:end="67:40"><name pos:start="67:40" pos:end="67:40">h</name></expr></argument>, <argument pos:start="67:43" pos:end="67:56"><expr pos:start="67:43" pos:end="67:56"><name pos:start="67:43" pos:end="67:56"><name pos:start="67:43" pos:end="67:43">h</name><operator pos:start="67:44" pos:end="67:45">-&gt;</operator><name pos:start="67:46" pos:end="67:56">current_mba</name></name></expr></argument>, <argument pos:start="67:59" pos:end="67:60"><expr pos:start="67:59" pos:end="67:60"><literal type="number" pos:start="67:59" pos:end="67:60">33</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                

                <return pos:start="69:17" pos:end="69:25">return <expr pos:start="69:24" pos:end="69:24"><literal type="number" pos:start="69:24" pos:end="69:24">0</literal></expr>;</return>

            </block_content>}</block></if><if type="elseif" pos:start="71:14" pos:end="77:13">else if<condition pos:start="71:21" pos:end="71:38">(<expr pos:start="71:22" pos:end="71:37"><name pos:start="71:22" pos:end="71:24">ret</name><operator pos:start="71:25" pos:end="71:26">==</operator><name pos:start="71:27" pos:end="71:37">SLICE_NOEND</name></expr>)</condition><block pos:start="71:39" pos:end="77:13">{<block_content pos:start="73:17" pos:end="75:26">

                <expr_stmt pos:start="73:17" pos:end="73:81"><expr pos:start="73:17" pos:end="73:80"><call pos:start="73:17" pos:end="73:80"><name pos:start="73:17" pos:end="73:22">av_log</name><argument_list pos:start="73:23" pos:end="73:80">(<argument pos:start="73:24" pos:end="73:31"><expr pos:start="73:24" pos:end="73:31"><name pos:start="73:24" pos:end="73:31"><name pos:start="73:24" pos:end="73:24">s</name><operator pos:start="73:25" pos:end="73:26">-&gt;</operator><name pos:start="73:27" pos:end="73:31">avctx</name></name></expr></argument>, <argument pos:start="73:34" pos:end="73:45"><expr pos:start="73:34" pos:end="73:45"><name pos:start="73:34" pos:end="73:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="73:48" pos:end="73:75"><expr pos:start="73:48" pos:end="73:75"><literal type="string" pos:start="73:48" pos:end="73:75">"Slice mismatch at MB: %d\n"</literal></expr></argument>, <argument pos:start="73:78" pos:end="73:79"><expr pos:start="73:78" pos:end="73:79"><name pos:start="73:78" pos:end="73:79">xy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="75:17" pos:end="75:26">return <expr pos:start="75:24" pos:end="75:25"><operator pos:start="75:24" pos:end="75:24">-</operator><literal type="number" pos:start="75:25" pos:end="75:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:68"><expr pos:start="79:13" pos:end="79:67"><call pos:start="79:13" pos:end="79:67"><name pos:start="79:13" pos:end="79:18">av_log</name><argument_list pos:start="79:19" pos:end="79:67">(<argument pos:start="79:20" pos:end="79:27"><expr pos:start="79:20" pos:end="79:27"><name pos:start="79:20" pos:end="79:27"><name pos:start="79:20" pos:end="79:20">s</name><operator pos:start="79:21" pos:end="79:22">-&gt;</operator><name pos:start="79:23" pos:end="79:27">avctx</name></name></expr></argument>, <argument pos:start="79:30" pos:end="79:41"><expr pos:start="79:30" pos:end="79:41"><name pos:start="79:30" pos:end="79:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="79:44" pos:end="79:62"><expr pos:start="79:44" pos:end="79:62"><literal type="string" pos:start="79:44" pos:end="79:62">"Error at MB: %d\n"</literal></expr></argument>, <argument pos:start="79:65" pos:end="79:66"><expr pos:start="79:65" pos:end="79:66"><name pos:start="79:65" pos:end="79:66">xy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="81:13" pos:end="81:22">return <expr pos:start="81:20" pos:end="81:21"><operator pos:start="81:20" pos:end="81:20">-</operator><literal type="number" pos:start="81:21" pos:end="81:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:35"><expr pos:start="85:9" pos:end="85:34"><call pos:start="85:9" pos:end="85:34"><name pos:start="85:9" pos:end="85:21">MPV_decode_mb</name><argument_list pos:start="85:22" pos:end="85:34">(<argument pos:start="85:23" pos:end="85:23"><expr pos:start="85:23" pos:end="85:23"><name pos:start="85:23" pos:end="85:23">s</name></expr></argument>, <argument pos:start="85:26" pos:end="85:33"><expr pos:start="85:26" pos:end="85:33"><name pos:start="85:26" pos:end="85:33"><name pos:start="85:26" pos:end="85:26">s</name><operator pos:start="85:27" pos:end="85:28">-&gt;</operator><name pos:start="85:29" pos:end="85:33">block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="87:9" pos:end="91:9"><if pos:start="87:9" pos:end="91:9">if<condition pos:start="87:11" pos:end="87:26">(<expr pos:start="87:12" pos:end="87:25"><name pos:start="87:12" pos:end="87:25"><name pos:start="87:12" pos:end="87:12">h</name><operator pos:start="87:13" pos:end="87:14">-&gt;</operator><name pos:start="87:15" pos:end="87:25">loop_filter</name></name></expr>)</condition><block pos:start="87:27" pos:end="91:9">{<block_content pos:start="89:13" pos:end="89:35">

            <expr_stmt pos:start="89:13" pos:end="89:35"><expr pos:start="89:13" pos:end="89:34"><call pos:start="89:13" pos:end="89:34"><name pos:start="89:13" pos:end="89:31">ff_h261_loop_filter</name><argument_list pos:start="89:32" pos:end="89:34">(<argument pos:start="89:33" pos:end="89:33"><expr pos:start="89:33" pos:end="89:33"><name pos:start="89:33" pos:end="89:33">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="95:9" pos:end="95:27"><expr pos:start="95:9" pos:end="95:26"><name pos:start="95:9" pos:end="95:22"><name pos:start="95:9" pos:end="95:9">h</name><operator pos:start="95:10" pos:end="95:11">-&gt;</operator><name pos:start="95:12" pos:end="95:22">loop_filter</name></name> <operator pos:start="95:24" pos:end="95:24">=</operator> <literal type="number" pos:start="95:26" pos:end="95:26">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:80"><expr pos:start="97:9" pos:end="97:79"><call pos:start="97:9" pos:end="97:79"><name pos:start="97:9" pos:end="97:30">h261_decode_mb_skipped</name><argument_list pos:start="97:31" pos:end="97:79">(<argument pos:start="97:32" pos:end="97:32"><expr pos:start="97:32" pos:end="97:32"><name pos:start="97:32" pos:end="97:32">h</name></expr></argument>, <argument pos:start="97:35" pos:end="97:60"><expr pos:start="97:35" pos:end="97:60"><name pos:start="97:35" pos:end="97:48"><name pos:start="97:35" pos:end="97:35">h</name><operator pos:start="97:36" pos:end="97:37">-&gt;</operator><name pos:start="97:38" pos:end="97:48">current_mba</name></name><operator pos:start="97:49" pos:end="97:49">-</operator><name pos:start="97:50" pos:end="97:60"><name pos:start="97:50" pos:end="97:50">h</name><operator pos:start="97:51" pos:end="97:52">-&gt;</operator><name pos:start="97:53" pos:end="97:60">mba_diff</name></name></expr></argument>, <argument pos:start="97:63" pos:end="97:78"><expr pos:start="97:63" pos:end="97:78"><name pos:start="97:63" pos:end="97:76"><name pos:start="97:63" pos:end="97:63">h</name><operator pos:start="97:64" pos:end="97:65">-&gt;</operator><name pos:start="97:66" pos:end="97:76">current_mba</name></name><operator pos:start="97:77" pos:end="97:77">-</operator><literal type="number" pos:start="97:78" pos:end="97:78">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>

    

    <return pos:start="103:5" pos:end="103:14">return <expr pos:start="103:12" pos:end="103:13"><operator pos:start="103:12" pos:end="103:12">-</operator><literal type="number" pos:start="103:13" pos:end="103:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
