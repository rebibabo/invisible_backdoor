<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/7529.c" pos:tabs="8"><function pos:start="1:1" pos:end="203:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">disas_ldst_reg_imm9</name><parameter_list pos:start="1:32" pos:end="9:47">(<parameter pos:start="1:33" pos:end="1:47"><decl pos:start="1:33" pos:end="1:47"><type pos:start="1:33" pos:end="1:47"><name pos:start="1:33" pos:end="1:44">DisasContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:47">s</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:62"><decl pos:start="1:50" pos:end="1:62"><type pos:start="1:50" pos:end="1:62"><name pos:start="1:50" pos:end="1:57">uint32_t</name></type> <name pos:start="1:59" pos:end="1:62">insn</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:39"><decl pos:start="3:33" pos:end="3:39"><type pos:start="3:33" pos:end="3:39"><name pos:start="3:33" pos:end="3:35">int</name></type> <name pos:start="3:37" pos:end="3:39">opc</name></decl></parameter>,

                                <parameter pos:start="5:33" pos:end="5:40"><decl pos:start="5:33" pos:end="5:40"><type pos:start="5:33" pos:end="5:40"><name pos:start="5:33" pos:end="5:35">int</name></type> <name pos:start="5:37" pos:end="5:40">size</name></decl></parameter>,

                                <parameter pos:start="7:33" pos:end="7:38"><decl pos:start="7:33" pos:end="7:38"><type pos:start="7:33" pos:end="7:38"><name pos:start="7:33" pos:end="7:35">int</name></type> <name pos:start="7:37" pos:end="7:38">rt</name></decl></parameter>,

                                <parameter pos:start="9:33" pos:end="9:46"><decl pos:start="9:33" pos:end="9:46"><type pos:start="9:33" pos:end="9:46"><name pos:start="9:33" pos:end="9:36">bool</name></type> <name pos:start="9:38" pos:end="9:46">is_vector</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="203:1">{<block_content pos:start="13:5" pos:end="201:5">

    <decl_stmt pos:start="13:5" pos:end="13:35"><decl pos:start="13:5" pos:end="13:34"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:10">rn</name> <init pos:start="13:12" pos:end="13:34">= <expr pos:start="13:14" pos:end="13:34"><call pos:start="13:14" pos:end="13:34"><name pos:start="13:14" pos:end="13:22">extract32</name><argument_list pos:start="13:23" pos:end="13:34">(<argument pos:start="13:24" pos:end="13:27"><expr pos:start="13:24" pos:end="13:27"><name pos:start="13:24" pos:end="13:27">insn</name></expr></argument>, <argument pos:start="13:30" pos:end="13:30"><expr pos:start="13:30" pos:end="13:30"><literal type="number" pos:start="13:30" pos:end="13:30">5</literal></expr></argument>, <argument pos:start="13:33" pos:end="13:33"><expr pos:start="13:33" pos:end="13:33"><literal type="number" pos:start="13:33" pos:end="13:33">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:39"><decl pos:start="15:5" pos:end="15:38"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:12">imm9</name> <init pos:start="15:14" pos:end="15:38">= <expr pos:start="15:16" pos:end="15:38"><call pos:start="15:16" pos:end="15:38"><name pos:start="15:16" pos:end="15:25">sextract32</name><argument_list pos:start="15:26" pos:end="15:38">(<argument pos:start="15:27" pos:end="15:30"><expr pos:start="15:27" pos:end="15:30"><name pos:start="15:27" pos:end="15:30">insn</name></expr></argument>, <argument pos:start="15:33" pos:end="15:34"><expr pos:start="15:33" pos:end="15:34"><literal type="number" pos:start="15:33" pos:end="15:34">12</literal></expr></argument>, <argument pos:start="15:37" pos:end="15:37"><expr pos:start="15:37" pos:end="15:37"><literal type="number" pos:start="15:37" pos:end="15:37">9</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:37"><decl pos:start="17:5" pos:end="17:36"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:11">idx</name> <init pos:start="17:13" pos:end="17:36">= <expr pos:start="17:15" pos:end="17:36"><call pos:start="17:15" pos:end="17:36"><name pos:start="17:15" pos:end="17:23">extract32</name><argument_list pos:start="17:24" pos:end="17:36">(<argument pos:start="17:25" pos:end="17:28"><expr pos:start="17:25" pos:end="17:28"><name pos:start="17:25" pos:end="17:28">insn</name></expr></argument>, <argument pos:start="17:31" pos:end="17:32"><expr pos:start="17:31" pos:end="17:32"><literal type="number" pos:start="17:31" pos:end="17:32">10</literal></expr></argument>, <argument pos:start="17:35" pos:end="17:35"><expr pos:start="17:35" pos:end="17:35"><literal type="number" pos:start="17:35" pos:end="17:35">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:27"><decl pos:start="19:5" pos:end="19:26"><type pos:start="19:5" pos:end="19:8"><name pos:start="19:5" pos:end="19:8">bool</name></type> <name pos:start="19:10" pos:end="19:18">is_signed</name> <init pos:start="19:20" pos:end="19:26">= <expr pos:start="19:22" pos:end="19:26"><name pos:start="19:22" pos:end="19:26">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:26"><decl pos:start="21:5" pos:end="21:25"><type pos:start="21:5" pos:end="21:8"><name pos:start="21:5" pos:end="21:8">bool</name></type> <name pos:start="21:10" pos:end="21:17">is_store</name> <init pos:start="21:19" pos:end="21:25">= <expr pos:start="21:21" pos:end="21:25"><name pos:start="21:21" pos:end="21:25">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:29"><decl pos:start="23:5" pos:end="23:28"><type pos:start="23:5" pos:end="23:8"><name pos:start="23:5" pos:end="23:8">bool</name></type> <name pos:start="23:10" pos:end="23:20">is_extended</name> <init pos:start="23:22" pos:end="23:28">= <expr pos:start="23:24" pos:end="23:28"><name pos:start="23:24" pos:end="23:28">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:32"><decl pos:start="25:5" pos:end="25:31"><type pos:start="25:5" pos:end="25:8"><name pos:start="25:5" pos:end="25:8">bool</name></type> <name pos:start="25:10" pos:end="25:18">is_unpriv</name> <init pos:start="25:20" pos:end="25:31">= <expr pos:start="25:22" pos:end="25:31"><operator pos:start="25:22" pos:end="25:22">(</operator><name pos:start="25:23" pos:end="25:25">idx</name> <operator pos:start="25:27" pos:end="25:28">==</operator> <literal type="number" pos:start="25:30" pos:end="25:30">2</literal><operator pos:start="25:31" pos:end="25:31">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:32"><decl pos:start="27:5" pos:end="27:31"><type pos:start="27:5" pos:end="27:8"><name pos:start="27:5" pos:end="27:8">bool</name></type> <name pos:start="27:10" pos:end="27:18">iss_valid</name> <init pos:start="27:20" pos:end="27:31">= <expr pos:start="27:22" pos:end="27:31"><operator pos:start="27:22" pos:end="27:22">!</operator><name pos:start="27:23" pos:end="27:31">is_vector</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:20"><decl pos:start="29:5" pos:end="29:19"><type pos:start="29:5" pos:end="29:8"><name pos:start="29:5" pos:end="29:8">bool</name></type> <name pos:start="29:10" pos:end="29:19">post_index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:19"><decl pos:start="31:5" pos:end="31:18"><type pos:start="31:5" pos:end="31:8"><name pos:start="31:5" pos:end="31:8">bool</name></type> <name pos:start="31:10" pos:end="31:18">writeback</name></decl>;</decl_stmt>



    <decl_stmt pos:start="35:5" pos:end="35:22"><decl pos:start="35:5" pos:end="35:21"><type pos:start="35:5" pos:end="35:12"><name pos:start="35:5" pos:end="35:12">TCGv_i64</name></type> <name pos:start="35:14" pos:end="35:21">tcg_addr</name></decl>;</decl_stmt>



    <if_stmt pos:start="39:5" pos:end="91:5"><if pos:start="39:5" pos:end="59:5">if <condition pos:start="39:8" pos:end="39:18">(<expr pos:start="39:9" pos:end="39:17"><name pos:start="39:9" pos:end="39:17">is_vector</name></expr>)</condition> <block pos:start="39:20" pos:end="59:5">{<block_content pos:start="41:9" pos:end="57:9">

        <expr_stmt pos:start="41:9" pos:end="41:31"><expr pos:start="41:9" pos:end="41:30"><name pos:start="41:9" pos:end="41:12">size</name> <operator pos:start="41:14" pos:end="41:15">|=</operator> <operator pos:start="41:17" pos:end="41:17">(</operator><name pos:start="41:18" pos:end="41:20">opc</name> <operator pos:start="41:22" pos:end="41:22">&amp;</operator> <literal type="number" pos:start="41:24" pos:end="41:24">2</literal><operator pos:start="41:25" pos:end="41:25">)</operator> <operator pos:start="41:27" pos:end="41:28">&lt;&lt;</operator> <literal type="number" pos:start="41:30" pos:end="41:30">1</literal></expr>;</expr_stmt>

        <if_stmt pos:start="43:9" pos:end="49:9"><if pos:start="43:9" pos:end="49:9">if <condition pos:start="43:12" pos:end="43:34">(<expr pos:start="43:13" pos:end="43:33"><name pos:start="43:13" pos:end="43:16">size</name> <operator pos:start="43:18" pos:end="43:18">&gt;</operator> <literal type="number" pos:start="43:20" pos:end="43:20">4</literal> <operator pos:start="43:22" pos:end="43:23">||</operator> <name pos:start="43:25" pos:end="43:33">is_unpriv</name></expr>)</condition> <block pos:start="43:36" pos:end="49:9">{<block_content pos:start="45:13" pos:end="47:19">

            <expr_stmt pos:start="45:13" pos:end="45:36"><expr pos:start="45:13" pos:end="45:35"><call pos:start="45:13" pos:end="45:35"><name pos:start="45:13" pos:end="45:32">unallocated_encoding</name><argument_list pos:start="45:33" pos:end="45:35">(<argument pos:start="45:34" pos:end="45:34"><expr pos:start="45:34" pos:end="45:34"><name pos:start="45:34" pos:end="45:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="47:13" pos:end="47:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:36"><expr pos:start="51:9" pos:end="51:35"><name pos:start="51:9" pos:end="51:16">is_store</name> <operator pos:start="51:18" pos:end="51:18">=</operator> <operator pos:start="51:20" pos:end="51:20">(</operator><operator pos:start="51:21" pos:end="51:21">(</operator><name pos:start="51:22" pos:end="51:24">opc</name> <operator pos:start="51:26" pos:end="51:26">&amp;</operator> <literal type="number" pos:start="51:28" pos:end="51:28">1</literal><operator pos:start="51:29" pos:end="51:29">)</operator> <operator pos:start="51:31" pos:end="51:32">==</operator> <literal type="number" pos:start="51:34" pos:end="51:34">0</literal><operator pos:start="51:35" pos:end="51:35">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="53:9" pos:end="57:9"><if pos:start="53:9" pos:end="57:9">if <condition pos:start="53:12" pos:end="53:32">(<expr pos:start="53:13" pos:end="53:31"><operator pos:start="53:13" pos:end="53:13">!</operator><call pos:start="53:14" pos:end="53:31"><name pos:start="53:14" pos:end="53:28">fp_access_check</name><argument_list pos:start="53:29" pos:end="53:31">(<argument pos:start="53:30" pos:end="53:30"><expr pos:start="53:30" pos:end="53:30"><name pos:start="53:30" pos:end="53:30">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="53:34" pos:end="57:9">{<block_content pos:start="55:13" pos:end="55:19">

            <return pos:start="55:13" pos:end="55:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="59:7" pos:end="91:5">else <block pos:start="59:12" pos:end="91:5">{<block_content pos:start="61:9" pos:end="89:57">

        <if_stmt pos:start="61:9" pos:end="75:9"><if pos:start="61:9" pos:end="75:9">if <condition pos:start="61:12" pos:end="61:34">(<expr pos:start="61:13" pos:end="61:33"><name pos:start="61:13" pos:end="61:16">size</name> <operator pos:start="61:18" pos:end="61:19">==</operator> <literal type="number" pos:start="61:21" pos:end="61:21">3</literal> <operator pos:start="61:23" pos:end="61:24">&amp;&amp;</operator> <name pos:start="61:26" pos:end="61:28">opc</name> <operator pos:start="61:30" pos:end="61:31">==</operator> <literal type="number" pos:start="61:33" pos:end="61:33">2</literal></expr>)</condition> <block pos:start="61:36" pos:end="75:9">{<block_content pos:start="65:13" pos:end="73:19">

            <comment type="block" pos:start="63:13" pos:end="63:33">/* PRFM - prefetch */</comment>

            <if_stmt pos:start="65:13" pos:end="71:13"><if pos:start="65:13" pos:end="71:13">if <condition pos:start="65:16" pos:end="65:26">(<expr pos:start="65:17" pos:end="65:25"><name pos:start="65:17" pos:end="65:25">is_unpriv</name></expr>)</condition> <block pos:start="65:28" pos:end="71:13">{<block_content pos:start="67:17" pos:end="69:23">

                <expr_stmt pos:start="67:17" pos:end="67:40"><expr pos:start="67:17" pos:end="67:39"><call pos:start="67:17" pos:end="67:39"><name pos:start="67:17" pos:end="67:36">unallocated_encoding</name><argument_list pos:start="67:37" pos:end="67:39">(<argument pos:start="67:38" pos:end="67:38"><expr pos:start="67:38" pos:end="67:38"><name pos:start="67:38" pos:end="67:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="69:17" pos:end="69:23">return;</return>

            </block_content>}</block></if></if_stmt>

            <return pos:start="73:13" pos:end="73:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="77:9" pos:end="83:9"><if pos:start="77:9" pos:end="83:9">if <condition pos:start="77:12" pos:end="77:33">(<expr pos:start="77:13" pos:end="77:32"><name pos:start="77:13" pos:end="77:15">opc</name> <operator pos:start="77:17" pos:end="77:18">==</operator> <literal type="number" pos:start="77:20" pos:end="77:20">3</literal> <operator pos:start="77:22" pos:end="77:23">&amp;&amp;</operator> <name pos:start="77:25" pos:end="77:28">size</name> <operator pos:start="77:30" pos:end="77:30">&gt;</operator> <literal type="number" pos:start="77:32" pos:end="77:32">1</literal></expr>)</condition> <block pos:start="77:35" pos:end="83:9">{<block_content pos:start="79:13" pos:end="81:19">

            <expr_stmt pos:start="79:13" pos:end="79:36"><expr pos:start="79:13" pos:end="79:35"><call pos:start="79:13" pos:end="79:35"><name pos:start="79:13" pos:end="79:32">unallocated_encoding</name><argument_list pos:start="79:33" pos:end="79:35">(<argument pos:start="79:34" pos:end="79:34"><expr pos:start="79:34" pos:end="79:34"><name pos:start="79:34" pos:end="79:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="81:13" pos:end="81:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:30"><expr pos:start="85:9" pos:end="85:29"><name pos:start="85:9" pos:end="85:16">is_store</name> <operator pos:start="85:18" pos:end="85:18">=</operator> <operator pos:start="85:20" pos:end="85:20">(</operator><name pos:start="85:21" pos:end="85:23">opc</name> <operator pos:start="85:25" pos:end="85:26">==</operator> <literal type="number" pos:start="85:28" pos:end="85:28">0</literal><operator pos:start="85:29" pos:end="85:29">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:41"><expr pos:start="87:9" pos:end="87:40"><name pos:start="87:9" pos:end="87:17">is_signed</name> <operator pos:start="87:19" pos:end="87:19">=</operator> <call pos:start="87:21" pos:end="87:40"><name pos:start="87:21" pos:end="87:29">extract32</name><argument_list pos:start="87:30" pos:end="87:40">(<argument pos:start="87:31" pos:end="87:33"><expr pos:start="87:31" pos:end="87:33"><name pos:start="87:31" pos:end="87:33">opc</name></expr></argument>, <argument pos:start="87:36" pos:end="87:36"><expr pos:start="87:36" pos:end="87:36"><literal type="number" pos:start="87:36" pos:end="87:36">1</literal></expr></argument>, <argument pos:start="87:39" pos:end="87:39"><expr pos:start="87:39" pos:end="87:39"><literal type="number" pos:start="87:39" pos:end="87:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:57"><expr pos:start="89:9" pos:end="89:56"><name pos:start="89:9" pos:end="89:19">is_extended</name> <operator pos:start="89:21" pos:end="89:21">=</operator> <operator pos:start="89:23" pos:end="89:23">(</operator><name pos:start="89:24" pos:end="89:27">size</name> <operator pos:start="89:29" pos:end="89:29">&lt;</operator> <literal type="number" pos:start="89:31" pos:end="89:31">3</literal><operator pos:start="89:32" pos:end="89:32">)</operator> <operator pos:start="89:34" pos:end="89:35">&amp;&amp;</operator> <call pos:start="89:37" pos:end="89:56"><name pos:start="89:37" pos:end="89:45">extract32</name><argument_list pos:start="89:46" pos:end="89:56">(<argument pos:start="89:47" pos:end="89:49"><expr pos:start="89:47" pos:end="89:49"><name pos:start="89:47" pos:end="89:49">opc</name></expr></argument>, <argument pos:start="89:52" pos:end="89:52"><expr pos:start="89:52" pos:end="89:52"><literal type="number" pos:start="89:52" pos:end="89:52">0</literal></expr></argument>, <argument pos:start="89:55" pos:end="89:55"><expr pos:start="89:55" pos:end="89:55"><literal type="number" pos:start="89:55" pos:end="89:55">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <switch pos:start="95:5" pos:end="125:5">switch <condition pos:start="95:12" pos:end="95:16">(<expr pos:start="95:13" pos:end="95:15"><name pos:start="95:13" pos:end="95:15">idx</name></expr>)</condition> <block pos:start="95:18" pos:end="125:5">{<block_content pos:start="97:5" pos:end="121:14">

    <case pos:start="97:5" pos:end="97:11">case <expr pos:start="97:10" pos:end="97:10"><literal type="number" pos:start="97:10" pos:end="97:10">0</literal></expr>:</case>

    <case pos:start="99:5" pos:end="99:11">case <expr pos:start="99:10" pos:end="99:10"><literal type="number" pos:start="99:10" pos:end="99:10">2</literal></expr>:</case>

        <expr_stmt pos:start="101:9" pos:end="101:27"><expr pos:start="101:9" pos:end="101:26"><name pos:start="101:9" pos:end="101:18">post_index</name> <operator pos:start="101:20" pos:end="101:20">=</operator> <name pos:start="101:22" pos:end="101:26">false</name></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:26"><expr pos:start="103:9" pos:end="103:25"><name pos:start="103:9" pos:end="103:17">writeback</name> <operator pos:start="103:19" pos:end="103:19">=</operator> <name pos:start="103:21" pos:end="103:25">false</name></expr>;</expr_stmt>

        <break pos:start="105:9" pos:end="105:14">break;</break>

    <case pos:start="107:5" pos:end="107:11">case <expr pos:start="107:10" pos:end="107:10"><literal type="number" pos:start="107:10" pos:end="107:10">1</literal></expr>:</case>

        <expr_stmt pos:start="109:9" pos:end="109:26"><expr pos:start="109:9" pos:end="109:25"><name pos:start="109:9" pos:end="109:18">post_index</name> <operator pos:start="109:20" pos:end="109:20">=</operator> <name pos:start="109:22" pos:end="109:25">true</name></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:25"><expr pos:start="111:9" pos:end="111:24"><name pos:start="111:9" pos:end="111:17">writeback</name> <operator pos:start="111:19" pos:end="111:19">=</operator> <name pos:start="111:21" pos:end="111:24">true</name></expr>;</expr_stmt>

        <break pos:start="113:9" pos:end="113:14">break;</break>

    <case pos:start="115:5" pos:end="115:11">case <expr pos:start="115:10" pos:end="115:10"><literal type="number" pos:start="115:10" pos:end="115:10">3</literal></expr>:</case>

        <expr_stmt pos:start="117:9" pos:end="117:27"><expr pos:start="117:9" pos:end="117:26"><name pos:start="117:9" pos:end="117:18">post_index</name> <operator pos:start="117:20" pos:end="117:20">=</operator> <name pos:start="117:22" pos:end="117:26">false</name></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:25"><expr pos:start="119:9" pos:end="119:24"><name pos:start="119:9" pos:end="119:17">writeback</name> <operator pos:start="119:19" pos:end="119:19">=</operator> <name pos:start="119:21" pos:end="119:24">true</name></expr>;</expr_stmt>

        <break pos:start="121:9" pos:end="121:14">break;</break>



    </block_content>}</block></switch>



    <if_stmt pos:start="129:5" pos:end="133:5"><if pos:start="129:5" pos:end="133:5">if <condition pos:start="129:8" pos:end="129:17">(<expr pos:start="129:9" pos:end="129:16"><name pos:start="129:9" pos:end="129:10">rn</name> <operator pos:start="129:12" pos:end="129:13">==</operator> <literal type="number" pos:start="129:15" pos:end="129:16">31</literal></expr>)</condition> <block pos:start="129:19" pos:end="133:5">{<block_content pos:start="131:9" pos:end="131:34">

        <expr_stmt pos:start="131:9" pos:end="131:34"><expr pos:start="131:9" pos:end="131:33"><call pos:start="131:9" pos:end="131:33"><name pos:start="131:9" pos:end="131:30">gen_check_sp_alignment</name><argument_list pos:start="131:31" pos:end="131:33">(<argument pos:start="131:32" pos:end="131:32"><expr pos:start="131:32" pos:end="131:32"><name pos:start="131:32" pos:end="131:32">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:41"><expr pos:start="135:5" pos:end="135:40"><name pos:start="135:5" pos:end="135:12">tcg_addr</name> <operator pos:start="135:14" pos:end="135:14">=</operator> <call pos:start="135:16" pos:end="135:40"><name pos:start="135:16" pos:end="135:30">read_cpu_reg_sp</name><argument_list pos:start="135:31" pos:end="135:40">(<argument pos:start="135:32" pos:end="135:32"><expr pos:start="135:32" pos:end="135:32"><name pos:start="135:32" pos:end="135:32">s</name></expr></argument>, <argument pos:start="135:35" pos:end="135:36"><expr pos:start="135:35" pos:end="135:36"><name pos:start="135:35" pos:end="135:36">rn</name></expr></argument>, <argument pos:start="135:39" pos:end="135:39"><expr pos:start="135:39" pos:end="135:39"><literal type="number" pos:start="135:39" pos:end="135:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="139:5" pos:end="143:5"><if pos:start="139:5" pos:end="143:5">if <condition pos:start="139:8" pos:end="139:20">(<expr pos:start="139:9" pos:end="139:19"><operator pos:start="139:9" pos:end="139:9">!</operator><name pos:start="139:10" pos:end="139:19">post_index</name></expr>)</condition> <block pos:start="139:22" pos:end="143:5">{<block_content pos:start="141:9" pos:end="141:51">

        <expr_stmt pos:start="141:9" pos:end="141:51"><expr pos:start="141:9" pos:end="141:50"><call pos:start="141:9" pos:end="141:50"><name pos:start="141:9" pos:end="141:24">tcg_gen_addi_i64</name><argument_list pos:start="141:25" pos:end="141:50">(<argument pos:start="141:26" pos:end="141:33"><expr pos:start="141:26" pos:end="141:33"><name pos:start="141:26" pos:end="141:33">tcg_addr</name></expr></argument>, <argument pos:start="141:36" pos:end="141:43"><expr pos:start="141:36" pos:end="141:43"><name pos:start="141:36" pos:end="141:43">tcg_addr</name></expr></argument>, <argument pos:start="141:46" pos:end="141:49"><expr pos:start="141:46" pos:end="141:49"><name pos:start="141:46" pos:end="141:49">imm9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="147:5" pos:end="185:5"><if pos:start="147:5" pos:end="159:5">if <condition pos:start="147:8" pos:end="147:18">(<expr pos:start="147:9" pos:end="147:17"><name pos:start="147:9" pos:end="147:17">is_vector</name></expr>)</condition> <block pos:start="147:20" pos:end="159:5">{<block_content pos:start="149:9" pos:end="157:9">

        <if_stmt pos:start="149:9" pos:end="157:9"><if pos:start="149:9" pos:end="153:9">if <condition pos:start="149:12" pos:end="149:21">(<expr pos:start="149:13" pos:end="149:20"><name pos:start="149:13" pos:end="149:20">is_store</name></expr>)</condition> <block pos:start="149:23" pos:end="153:9">{<block_content pos:start="151:13" pos:end="151:44">

            <expr_stmt pos:start="151:13" pos:end="151:44"><expr pos:start="151:13" pos:end="151:43"><call pos:start="151:13" pos:end="151:43"><name pos:start="151:13" pos:end="151:20">do_fp_st</name><argument_list pos:start="151:21" pos:end="151:43">(<argument pos:start="151:22" pos:end="151:22"><expr pos:start="151:22" pos:end="151:22"><name pos:start="151:22" pos:end="151:22">s</name></expr></argument>, <argument pos:start="151:25" pos:end="151:26"><expr pos:start="151:25" pos:end="151:26"><name pos:start="151:25" pos:end="151:26">rt</name></expr></argument>, <argument pos:start="151:29" pos:end="151:36"><expr pos:start="151:29" pos:end="151:36"><name pos:start="151:29" pos:end="151:36">tcg_addr</name></expr></argument>, <argument pos:start="151:39" pos:end="151:42"><expr pos:start="151:39" pos:end="151:42"><name pos:start="151:39" pos:end="151:42">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="153:11" pos:end="157:9">else <block pos:start="153:16" pos:end="157:9">{<block_content pos:start="155:13" pos:end="155:44">

            <expr_stmt pos:start="155:13" pos:end="155:44"><expr pos:start="155:13" pos:end="155:43"><call pos:start="155:13" pos:end="155:43"><name pos:start="155:13" pos:end="155:20">do_fp_ld</name><argument_list pos:start="155:21" pos:end="155:43">(<argument pos:start="155:22" pos:end="155:22"><expr pos:start="155:22" pos:end="155:22"><name pos:start="155:22" pos:end="155:22">s</name></expr></argument>, <argument pos:start="155:25" pos:end="155:26"><expr pos:start="155:25" pos:end="155:26"><name pos:start="155:25" pos:end="155:26">rt</name></expr></argument>, <argument pos:start="155:29" pos:end="155:36"><expr pos:start="155:29" pos:end="155:36"><name pos:start="155:29" pos:end="155:36">tcg_addr</name></expr></argument>, <argument pos:start="155:39" pos:end="155:42"><expr pos:start="155:39" pos:end="155:42"><name pos:start="155:39" pos:end="155:42">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="159:7" pos:end="185:5">else <block pos:start="159:12" pos:end="185:5">{<block_content pos:start="161:9" pos:end="183:9">

        <decl_stmt pos:start="161:9" pos:end="161:41"><decl pos:start="161:9" pos:end="161:40"><type pos:start="161:9" pos:end="161:16"><name pos:start="161:9" pos:end="161:16">TCGv_i64</name></type> <name pos:start="161:18" pos:end="161:23">tcg_rt</name> <init pos:start="161:25" pos:end="161:40">= <expr pos:start="161:27" pos:end="161:40"><call pos:start="161:27" pos:end="161:40"><name pos:start="161:27" pos:end="161:33">cpu_reg</name><argument_list pos:start="161:34" pos:end="161:40">(<argument pos:start="161:35" pos:end="161:35"><expr pos:start="161:35" pos:end="161:35"><name pos:start="161:35" pos:end="161:35">s</name></expr></argument>, <argument pos:start="161:38" pos:end="161:39"><expr pos:start="161:38" pos:end="161:39"><name pos:start="161:38" pos:end="161:39">rt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="163:9" pos:end="163:78"><decl pos:start="163:9" pos:end="163:77"><type pos:start="163:9" pos:end="163:11"><name pos:start="163:9" pos:end="163:11">int</name></type> <name pos:start="163:13" pos:end="163:18">memidx</name> <init pos:start="163:20" pos:end="163:77">= <expr pos:start="163:22" pos:end="163:77"><ternary pos:start="163:22" pos:end="163:77"><condition pos:start="163:22" pos:end="163:32"><expr pos:start="163:22" pos:end="163:30"><name pos:start="163:22" pos:end="163:30">is_unpriv</name></expr> ?</condition><then pos:start="163:34" pos:end="163:58"> <expr pos:start="163:34" pos:end="163:58"><call pos:start="163:34" pos:end="163:58"><name pos:start="163:34" pos:end="163:55">get_a64_user_mem_index</name><argument_list pos:start="163:56" pos:end="163:58">(<argument pos:start="163:57" pos:end="163:57"><expr pos:start="163:57" pos:end="163:57"><name pos:start="163:57" pos:end="163:57">s</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="163:60" pos:end="163:77">: <expr pos:start="163:62" pos:end="163:77"><call pos:start="163:62" pos:end="163:77"><name pos:start="163:62" pos:end="163:74">get_mem_index</name><argument_list pos:start="163:75" pos:end="163:77">(<argument pos:start="163:76" pos:end="163:76"><expr pos:start="163:76" pos:end="163:76"><name pos:start="163:76" pos:end="163:76">s</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="165:9" pos:end="165:70"><decl pos:start="165:9" pos:end="165:69"><type pos:start="165:9" pos:end="165:12"><name pos:start="165:9" pos:end="165:12">bool</name></type> <name pos:start="165:14" pos:end="165:19">iss_sf</name> <init pos:start="165:21" pos:end="165:69">= <expr pos:start="165:23" pos:end="165:69"><call pos:start="165:23" pos:end="165:69"><name pos:start="165:23" pos:end="165:47">disas_ldst_compute_iss_sf</name><argument_list pos:start="165:48" pos:end="165:69">(<argument pos:start="165:49" pos:end="165:52"><expr pos:start="165:49" pos:end="165:52"><name pos:start="165:49" pos:end="165:52">size</name></expr></argument>, <argument pos:start="165:55" pos:end="165:63"><expr pos:start="165:55" pos:end="165:63"><name pos:start="165:55" pos:end="165:63">is_signed</name></expr></argument>, <argument pos:start="165:66" pos:end="165:68"><expr pos:start="165:66" pos:end="165:68"><name pos:start="165:66" pos:end="165:68">opc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="169:9" pos:end="183:9"><if pos:start="169:9" pos:end="175:9">if <condition pos:start="169:12" pos:end="169:21">(<expr pos:start="169:13" pos:end="169:20"><name pos:start="169:13" pos:end="169:20">is_store</name></expr>)</condition> <block pos:start="169:23" pos:end="175:9">{<block_content pos:start="171:13" pos:end="173:59">

            <expr_stmt pos:start="171:13" pos:end="173:59"><expr pos:start="171:13" pos:end="173:58"><call pos:start="171:13" pos:end="173:58"><name pos:start="171:13" pos:end="171:28">do_gpr_st_memidx</name><argument_list pos:start="171:29" pos:end="173:58">(<argument pos:start="171:30" pos:end="171:30"><expr pos:start="171:30" pos:end="171:30"><name pos:start="171:30" pos:end="171:30">s</name></expr></argument>, <argument pos:start="171:33" pos:end="171:38"><expr pos:start="171:33" pos:end="171:38"><name pos:start="171:33" pos:end="171:38">tcg_rt</name></expr></argument>, <argument pos:start="171:41" pos:end="171:48"><expr pos:start="171:41" pos:end="171:48"><name pos:start="171:41" pos:end="171:48">tcg_addr</name></expr></argument>, <argument pos:start="171:51" pos:end="171:54"><expr pos:start="171:51" pos:end="171:54"><name pos:start="171:51" pos:end="171:54">size</name></expr></argument>, <argument pos:start="171:57" pos:end="171:62"><expr pos:start="171:57" pos:end="171:62"><name pos:start="171:57" pos:end="171:62">memidx</name></expr></argument>,

                             <argument pos:start="173:30" pos:end="173:38"><expr pos:start="173:30" pos:end="173:38"><name pos:start="173:30" pos:end="173:38">iss_valid</name></expr></argument>, <argument pos:start="173:41" pos:end="173:42"><expr pos:start="173:41" pos:end="173:42"><name pos:start="173:41" pos:end="173:42">rt</name></expr></argument>, <argument pos:start="173:45" pos:end="173:50"><expr pos:start="173:45" pos:end="173:50"><name pos:start="173:45" pos:end="173:50">iss_sf</name></expr></argument>, <argument pos:start="173:53" pos:end="173:57"><expr pos:start="173:53" pos:end="173:57"><name pos:start="173:53" pos:end="173:57">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="175:11" pos:end="183:9">else <block pos:start="175:16" pos:end="183:9">{<block_content pos:start="177:13" pos:end="181:59">

            <expr_stmt pos:start="177:13" pos:end="181:59"><expr pos:start="177:13" pos:end="181:58"><call pos:start="177:13" pos:end="181:58"><name pos:start="177:13" pos:end="177:28">do_gpr_ld_memidx</name><argument_list pos:start="177:29" pos:end="181:58">(<argument pos:start="177:30" pos:end="177:30"><expr pos:start="177:30" pos:end="177:30"><name pos:start="177:30" pos:end="177:30">s</name></expr></argument>, <argument pos:start="177:33" pos:end="177:38"><expr pos:start="177:33" pos:end="177:38"><name pos:start="177:33" pos:end="177:38">tcg_rt</name></expr></argument>, <argument pos:start="177:41" pos:end="177:48"><expr pos:start="177:41" pos:end="177:48"><name pos:start="177:41" pos:end="177:48">tcg_addr</name></expr></argument>, <argument pos:start="177:51" pos:end="177:54"><expr pos:start="177:51" pos:end="177:54"><name pos:start="177:51" pos:end="177:54">size</name></expr></argument>,

                             <argument pos:start="179:30" pos:end="179:38"><expr pos:start="179:30" pos:end="179:38"><name pos:start="179:30" pos:end="179:38">is_signed</name></expr></argument>, <argument pos:start="179:41" pos:end="179:51"><expr pos:start="179:41" pos:end="179:51"><name pos:start="179:41" pos:end="179:51">is_extended</name></expr></argument>, <argument pos:start="179:54" pos:end="179:59"><expr pos:start="179:54" pos:end="179:59"><name pos:start="179:54" pos:end="179:59">memidx</name></expr></argument>,

                             <argument pos:start="181:30" pos:end="181:38"><expr pos:start="181:30" pos:end="181:38"><name pos:start="181:30" pos:end="181:38">iss_valid</name></expr></argument>, <argument pos:start="181:41" pos:end="181:42"><expr pos:start="181:41" pos:end="181:42"><name pos:start="181:41" pos:end="181:42">rt</name></expr></argument>, <argument pos:start="181:45" pos:end="181:50"><expr pos:start="181:45" pos:end="181:50"><name pos:start="181:45" pos:end="181:50">iss_sf</name></expr></argument>, <argument pos:start="181:53" pos:end="181:57"><expr pos:start="181:53" pos:end="181:57"><name pos:start="181:53" pos:end="181:57">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="189:5" pos:end="201:5"><if pos:start="189:5" pos:end="201:5">if <condition pos:start="189:8" pos:end="189:18">(<expr pos:start="189:9" pos:end="189:17"><name pos:start="189:9" pos:end="189:17">writeback</name></expr>)</condition> <block pos:start="189:20" pos:end="201:5">{<block_content pos:start="191:9" pos:end="199:42">

        <decl_stmt pos:start="191:9" pos:end="191:44"><decl pos:start="191:9" pos:end="191:43"><type pos:start="191:9" pos:end="191:16"><name pos:start="191:9" pos:end="191:16">TCGv_i64</name></type> <name pos:start="191:18" pos:end="191:23">tcg_rn</name> <init pos:start="191:25" pos:end="191:43">= <expr pos:start="191:27" pos:end="191:43"><call pos:start="191:27" pos:end="191:43"><name pos:start="191:27" pos:end="191:36">cpu_reg_sp</name><argument_list pos:start="191:37" pos:end="191:43">(<argument pos:start="191:38" pos:end="191:38"><expr pos:start="191:38" pos:end="191:38"><name pos:start="191:38" pos:end="191:38">s</name></expr></argument>, <argument pos:start="191:41" pos:end="191:42"><expr pos:start="191:41" pos:end="191:42"><name pos:start="191:41" pos:end="191:42">rn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="193:9" pos:end="197:9"><if pos:start="193:9" pos:end="197:9">if <condition pos:start="193:12" pos:end="193:23">(<expr pos:start="193:13" pos:end="193:22"><name pos:start="193:13" pos:end="193:22">post_index</name></expr>)</condition> <block pos:start="193:25" pos:end="197:9">{<block_content pos:start="195:13" pos:end="195:55">

            <expr_stmt pos:start="195:13" pos:end="195:55"><expr pos:start="195:13" pos:end="195:54"><call pos:start="195:13" pos:end="195:54"><name pos:start="195:13" pos:end="195:28">tcg_gen_addi_i64</name><argument_list pos:start="195:29" pos:end="195:54">(<argument pos:start="195:30" pos:end="195:37"><expr pos:start="195:30" pos:end="195:37"><name pos:start="195:30" pos:end="195:37">tcg_addr</name></expr></argument>, <argument pos:start="195:40" pos:end="195:47"><expr pos:start="195:40" pos:end="195:47"><name pos:start="195:40" pos:end="195:47">tcg_addr</name></expr></argument>, <argument pos:start="195:50" pos:end="195:53"><expr pos:start="195:50" pos:end="195:53"><name pos:start="195:50" pos:end="195:53">imm9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="199:9" pos:end="199:42"><expr pos:start="199:9" pos:end="199:41"><call pos:start="199:9" pos:end="199:41"><name pos:start="199:9" pos:end="199:23">tcg_gen_mov_i64</name><argument_list pos:start="199:24" pos:end="199:41">(<argument pos:start="199:25" pos:end="199:30"><expr pos:start="199:25" pos:end="199:30"><name pos:start="199:25" pos:end="199:30">tcg_rn</name></expr></argument>, <argument pos:start="199:33" pos:end="199:40"><expr pos:start="199:33" pos:end="199:40"><name pos:start="199:33" pos:end="199:40">tcg_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function></unit>
