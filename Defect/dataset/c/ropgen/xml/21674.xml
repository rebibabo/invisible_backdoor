<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21674.c" pos:tabs="8"><function pos:start="1:1" pos:end="87:1"><type pos:start="1:1" pos:end="1:13"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <modifier pos:start="1:13" pos:end="1:13">*</modifier></type><name pos:start="1:14" pos:end="1:37">qemu_dummy_cpu_thread_fn</name><parameter_list pos:start="1:38" pos:end="1:48">(<parameter pos:start="1:39" pos:end="1:47"><decl pos:start="1:39" pos:end="1:47"><type pos:start="1:39" pos:end="1:44"><name pos:start="1:39" pos:end="1:42">void</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:47">arg</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="87:1">{<block_content pos:start="7:5" pos:end="86:0">

<cpp:ifdef pos:start="5:1" pos:end="5:13">#<cpp:directive pos:start="5:2" pos:end="5:6">ifdef</cpp:directive> <name pos:start="5:8" pos:end="5:13">_WIN32</name></cpp:ifdef>

    <expr_stmt pos:start="7:5" pos:end="7:62"><expr pos:start="7:5" pos:end="7:61"><call pos:start="7:5" pos:end="7:61"><name pos:start="7:5" pos:end="7:11">fprintf</name><argument_list pos:start="7:12" pos:end="7:61">(<argument pos:start="7:13" pos:end="7:18"><expr pos:start="7:13" pos:end="7:18"><name pos:start="7:13" pos:end="7:18">stderr</name></expr></argument>, <argument pos:start="7:21" pos:end="7:60"><expr pos:start="7:21" pos:end="7:60"><literal type="string" pos:start="7:21" pos:end="7:60">"qtest is not supported under Windows\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="9:5" pos:end="12:0"><expr pos:start="9:5" pos:end="9:11"><call pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:8">exit</name><argument_list pos:start="9:9" pos:end="9:11">(<argument pos:start="9:10" pos:end="9:10"><expr pos:start="9:10" pos:end="9:10"><literal type="number" pos:start="9:10" pos:end="9:10">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="11:1" pos:end="11:5">#<cpp:directive pos:start="11:2" pos:end="11:5">else</cpp:directive></cpp:else>

    <decl_stmt pos:start="13:5" pos:end="13:24"><decl pos:start="13:5" pos:end="13:23"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">CPUState</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:17">cpu</name> <init pos:start="13:19" pos:end="13:23">= <expr pos:start="13:21" pos:end="13:23"><name pos:start="13:21" pos:end="13:23">arg</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">sigset_t</name></type> <name pos:start="15:14" pos:end="15:20">waitset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:10"><decl pos:start="17:5" pos:end="17:9"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">r</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:26"><expr pos:start="21:5" pos:end="21:25"><call pos:start="21:5" pos:end="21:25"><name pos:start="21:5" pos:end="21:23">rcu_register_thread</name><argument_list pos:start="21:24" pos:end="21:25">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:31"><expr pos:start="25:5" pos:end="25:30"><call pos:start="25:5" pos:end="25:30"><name pos:start="25:5" pos:end="25:28">qemu_mutex_lock_iothread</name><argument_list pos:start="25:29" pos:end="25:30">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:38"><expr pos:start="27:5" pos:end="27:37"><call pos:start="27:5" pos:end="27:37"><name pos:start="27:5" pos:end="27:24">qemu_thread_get_self</name><argument_list pos:start="27:25" pos:end="27:37">(<argument pos:start="27:26" pos:end="27:36"><expr pos:start="27:26" pos:end="27:36"><name pos:start="27:26" pos:end="27:36"><name pos:start="27:26" pos:end="27:28">cpu</name><operator pos:start="27:29" pos:end="27:30">-&gt;</operator><name pos:start="27:31" pos:end="27:36">thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:42"><expr pos:start="29:5" pos:end="29:41"><name pos:start="29:5" pos:end="29:18"><name pos:start="29:5" pos:end="29:7">cpu</name><operator pos:start="29:8" pos:end="29:9">-&gt;</operator><name pos:start="29:10" pos:end="29:18">thread_id</name></name> <operator pos:start="29:20" pos:end="29:20">=</operator> <call pos:start="29:22" pos:end="29:41"><name pos:start="29:22" pos:end="29:39">qemu_get_thread_id</name><argument_list pos:start="29:40" pos:end="29:41">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:23"><expr pos:start="31:5" pos:end="31:22"><name pos:start="31:5" pos:end="31:18"><name pos:start="31:5" pos:end="31:7">cpu</name><operator pos:start="31:8" pos:end="31:9">-&gt;</operator><name pos:start="31:10" pos:end="31:18">can_do_io</name></name> <operator pos:start="31:20" pos:end="31:20">=</operator> <literal type="number" pos:start="31:22" pos:end="31:22">1</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:26"><expr pos:start="35:5" pos:end="35:25"><call pos:start="35:5" pos:end="35:25"><name pos:start="35:5" pos:end="35:15">sigemptyset</name><argument_list pos:start="35:16" pos:end="35:25">(<argument pos:start="35:17" pos:end="35:24"><expr pos:start="35:17" pos:end="35:24"><operator pos:start="35:17" pos:end="35:17">&amp;</operator><name pos:start="35:18" pos:end="35:24">waitset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:33"><expr pos:start="37:5" pos:end="37:32"><call pos:start="37:5" pos:end="37:32"><name pos:start="37:5" pos:end="37:13">sigaddset</name><argument_list pos:start="37:14" pos:end="37:32">(<argument pos:start="37:15" pos:end="37:22"><expr pos:start="37:15" pos:end="37:22"><operator pos:start="37:15" pos:end="37:15">&amp;</operator><name pos:start="37:16" pos:end="37:22">waitset</name></expr></argument>, <argument pos:start="37:25" pos:end="37:31"><expr pos:start="37:25" pos:end="37:31"><name pos:start="37:25" pos:end="37:31">SIG_IPI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:29">/* signal CPU creation */</comment>

    <expr_stmt pos:start="43:5" pos:end="43:24"><expr pos:start="43:5" pos:end="43:23"><name pos:start="43:5" pos:end="43:16"><name pos:start="43:5" pos:end="43:7">cpu</name><operator pos:start="43:8" pos:end="43:9">-&gt;</operator><name pos:start="43:10" pos:end="43:16">created</name></name> <operator pos:start="43:18" pos:end="43:18">=</operator> <name pos:start="43:20" pos:end="43:23">true</name></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:37"><expr pos:start="45:5" pos:end="45:36"><call pos:start="45:5" pos:end="45:36"><name pos:start="45:5" pos:end="45:20">qemu_cond_signal</name><argument_list pos:start="45:21" pos:end="45:36">(<argument pos:start="45:22" pos:end="45:35"><expr pos:start="45:22" pos:end="45:35"><operator pos:start="45:22" pos:end="45:22">&amp;</operator><name pos:start="45:23" pos:end="45:35">qemu_cpu_cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:22"><expr pos:start="49:5" pos:end="49:21"><name pos:start="49:5" pos:end="49:15">current_cpu</name> <operator pos:start="49:17" pos:end="49:17">=</operator> <name pos:start="49:19" pos:end="49:21">cpu</name></expr>;</expr_stmt>

    <while pos:start="51:5" pos:end="79:5">while <condition pos:start="51:11" pos:end="51:13">(<expr pos:start="51:12" pos:end="51:12"><literal type="number" pos:start="51:12" pos:end="51:12">1</literal></expr>)</condition> <block pos:start="51:15" pos:end="79:5">{<block_content pos:start="53:9" pos:end="77:39">

        <expr_stmt pos:start="53:9" pos:end="53:27"><expr pos:start="53:9" pos:end="53:26"><name pos:start="53:9" pos:end="53:19">current_cpu</name> <operator pos:start="53:21" pos:end="53:21">=</operator> <name pos:start="53:23" pos:end="53:26">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:37"><expr pos:start="55:9" pos:end="55:36"><call pos:start="55:9" pos:end="55:36"><name pos:start="55:9" pos:end="55:34">qemu_mutex_unlock_iothread</name><argument_list pos:start="55:35" pos:end="55:36">()</argument_list></call></expr>;</expr_stmt>

        <do pos:start="57:9" pos:end="63:65">do <block pos:start="57:12" pos:end="63:9">{<block_content pos:start="59:13" pos:end="61:40">

            <decl_stmt pos:start="59:13" pos:end="59:20"><decl pos:start="59:13" pos:end="59:19"><type pos:start="59:13" pos:end="59:15"><name pos:start="59:13" pos:end="59:15">int</name></type> <name pos:start="59:17" pos:end="59:19">sig</name></decl>;</decl_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:40"><expr pos:start="61:13" pos:end="61:39"><name pos:start="61:13" pos:end="61:13">r</name> <operator pos:start="61:15" pos:end="61:15">=</operator> <call pos:start="61:17" pos:end="61:39"><name pos:start="61:17" pos:end="61:23">sigwait</name><argument_list pos:start="61:24" pos:end="61:39">(<argument pos:start="61:25" pos:end="61:32"><expr pos:start="61:25" pos:end="61:32"><operator pos:start="61:25" pos:end="61:25">&amp;</operator><name pos:start="61:26" pos:end="61:32">waitset</name></expr></argument>, <argument pos:start="61:35" pos:end="61:38"><expr pos:start="61:35" pos:end="61:38"><operator pos:start="61:35" pos:end="61:35">&amp;</operator><name pos:start="61:36" pos:end="61:38">sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block> while <condition pos:start="63:17" pos:end="63:64">(<expr pos:start="63:18" pos:end="63:63"><name pos:start="63:18" pos:end="63:18">r</name> <operator pos:start="63:20" pos:end="63:21">==</operator> <operator pos:start="63:23" pos:end="63:23">-</operator><literal type="number" pos:start="63:24" pos:end="63:24">1</literal> <operator pos:start="63:26" pos:end="63:27">&amp;&amp;</operator> <operator pos:start="63:29" pos:end="63:29">(</operator><name pos:start="63:30" pos:end="63:34">errno</name> <operator pos:start="63:36" pos:end="63:37">==</operator> <name pos:start="63:39" pos:end="63:44">EAGAIN</name> <operator pos:start="63:46" pos:end="63:47">||</operator> <name pos:start="63:49" pos:end="63:53">errno</name> <operator pos:start="63:55" pos:end="63:56">==</operator> <name pos:start="63:58" pos:end="63:62">EINTR</name><operator pos:start="63:63" pos:end="63:63">)</operator></expr>)</condition>;</do>

        <if_stmt pos:start="65:9" pos:end="71:9"><if pos:start="65:9" pos:end="71:9">if <condition pos:start="65:12" pos:end="65:20">(<expr pos:start="65:13" pos:end="65:19"><name pos:start="65:13" pos:end="65:13">r</name> <operator pos:start="65:15" pos:end="65:16">==</operator> <operator pos:start="65:18" pos:end="65:18">-</operator><literal type="number" pos:start="65:19" pos:end="65:19">1</literal></expr>)</condition> <block pos:start="65:22" pos:end="71:9">{<block_content pos:start="67:13" pos:end="69:20">

            <expr_stmt pos:start="67:13" pos:end="67:30"><expr pos:start="67:13" pos:end="67:29"><call pos:start="67:13" pos:end="67:29"><name pos:start="67:13" pos:end="67:18">perror</name><argument_list pos:start="67:19" pos:end="67:29">(<argument pos:start="67:20" pos:end="67:28"><expr pos:start="67:20" pos:end="67:28"><literal type="string" pos:start="67:20" pos:end="67:28">"sigwait"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:20"><expr pos:start="69:13" pos:end="69:19"><call pos:start="69:13" pos:end="69:19"><name pos:start="69:13" pos:end="69:16">exit</name><argument_list pos:start="69:17" pos:end="69:19">(<argument pos:start="69:18" pos:end="69:18"><expr pos:start="69:18" pos:end="69:18"><literal type="number" pos:start="69:18" pos:end="69:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:35"><expr pos:start="73:9" pos:end="73:34"><call pos:start="73:9" pos:end="73:34"><name pos:start="73:9" pos:end="73:32">qemu_mutex_lock_iothread</name><argument_list pos:start="73:33" pos:end="73:34">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:26"><expr pos:start="75:9" pos:end="75:25"><name pos:start="75:9" pos:end="75:19">current_cpu</name> <operator pos:start="75:21" pos:end="75:21">=</operator> <name pos:start="75:23" pos:end="75:25">cpu</name></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:39"><expr pos:start="77:9" pos:end="77:38"><call pos:start="77:9" pos:end="77:38"><name pos:start="77:9" pos:end="77:33">qemu_wait_io_event_common</name><argument_list pos:start="77:34" pos:end="77:38">(<argument pos:start="77:35" pos:end="77:37"><expr pos:start="77:35" pos:end="77:37"><name pos:start="77:35" pos:end="77:37">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <return pos:start="83:5" pos:end="86:0">return <expr pos:start="83:12" pos:end="83:15"><name pos:start="83:12" pos:end="83:15">NULL</name></expr>;</return>

<cpp:endif pos:start="85:1" pos:end="85:6">#<cpp:directive pos:start="85:2" pos:end="85:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
