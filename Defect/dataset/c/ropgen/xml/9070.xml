<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9070.c" pos:tabs="8"><function pos:start="1:1" pos:end="93:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:31">virtio_scsi_dataplane_stop</name><parameter_list pos:start="1:32" pos:end="1:46">(<parameter pos:start="1:33" pos:end="1:45"><decl pos:start="1:33" pos:end="1:45"><type pos:start="1:33" pos:end="1:44"><name pos:start="1:33" pos:end="1:42">VirtIOSCSI</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="93:1">{<block_content pos:start="5:5" pos:end="91:33">

    <decl_stmt pos:start="5:5" pos:end="5:57"><decl pos:start="5:5" pos:end="5:56"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">BusState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:18">qbus</name> <init pos:start="5:20" pos:end="5:56">= <expr pos:start="5:22" pos:end="5:56"><call pos:start="5:22" pos:end="5:56"><name pos:start="5:22" pos:end="5:24">BUS</name><argument_list pos:start="5:25" pos:end="5:56">(<argument pos:start="5:26" pos:end="5:55"><expr pos:start="5:26" pos:end="5:55"><call pos:start="5:26" pos:end="5:55"><name pos:start="5:26" pos:end="5:44">qdev_get_parent_bus</name><argument_list pos:start="5:45" pos:end="5:55">(<argument pos:start="5:46" pos:end="5:54"><expr pos:start="5:46" pos:end="5:54"><call pos:start="5:46" pos:end="5:54"><name pos:start="5:46" pos:end="5:51">DEVICE</name><argument_list pos:start="5:52" pos:end="5:54">(<argument pos:start="5:53" pos:end="5:53"><expr pos:start="5:53" pos:end="5:53"><name pos:start="5:53" pos:end="5:53">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:51"><decl pos:start="7:5" pos:end="7:50"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">VirtioBusClass</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:21">k</name> <init pos:start="7:23" pos:end="7:50">= <expr pos:start="7:25" pos:end="7:50"><call pos:start="7:25" pos:end="7:50"><name pos:start="7:25" pos:end="7:44">VIRTIO_BUS_GET_CLASS</name><argument_list pos:start="7:45" pos:end="7:50">(<argument pos:start="7:46" pos:end="7:49"><expr pos:start="7:46" pos:end="7:49"><name pos:start="7:46" pos:end="7:49">qbus</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:49"><decl pos:start="9:5" pos:end="9:48"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">VirtIOSCSICommon</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:24">vs</name> <init pos:start="9:26" pos:end="9:48">= <expr pos:start="9:28" pos:end="9:48"><call pos:start="9:28" pos:end="9:48"><name pos:start="9:28" pos:end="9:45">VIRTIO_SCSI_COMMON</name><argument_list pos:start="9:46" pos:end="9:48">(<argument pos:start="9:47" pos:end="9:47"><expr pos:start="9:47" pos:end="9:47"><name pos:start="9:47" pos:end="9:47">s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:10"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:32">/* Better luck next time. */</comment>

    <if_stmt pos:start="17:5" pos:end="23:5"><if pos:start="17:5" pos:end="23:5">if <condition pos:start="17:8" pos:end="17:28">(<expr pos:start="17:9" pos:end="17:27"><name pos:start="17:9" pos:end="17:27"><name pos:start="17:9" pos:end="17:9">s</name><operator pos:start="17:10" pos:end="17:11">-&gt;</operator><name pos:start="17:12" pos:end="17:27">dataplane_fenced</name></name></expr>)</condition> <block pos:start="17:30" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:15">

        <expr_stmt pos:start="19:9" pos:end="19:36"><expr pos:start="19:9" pos:end="19:35"><name pos:start="19:9" pos:end="19:27"><name pos:start="19:9" pos:end="19:9">s</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:27">dataplane_fenced</name></name> <operator pos:start="19:29" pos:end="19:29">=</operator> <name pos:start="19:31" pos:end="19:35">false</name></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="25:5" pos:end="29:5"><if pos:start="25:5" pos:end="29:5">if <condition pos:start="25:8" pos:end="25:55">(<expr pos:start="25:9" pos:end="25:54"><operator pos:start="25:9" pos:end="25:9">!</operator><name pos:start="25:10" pos:end="25:29"><name pos:start="25:10" pos:end="25:10">s</name><operator pos:start="25:11" pos:end="25:12">-&gt;</operator><name pos:start="25:13" pos:end="25:29">dataplane_started</name></name> <operator pos:start="25:31" pos:end="25:32">||</operator> <name pos:start="25:34" pos:end="25:54"><name pos:start="25:34" pos:end="25:34">s</name><operator pos:start="25:35" pos:end="25:36">-&gt;</operator><name pos:start="25:37" pos:end="25:54">dataplane_stopping</name></name></expr>)</condition> <block pos:start="25:57" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:15">

        <return pos:start="27:9" pos:end="27:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:33"><expr pos:start="31:5" pos:end="31:32"><name pos:start="31:5" pos:end="31:25"><name pos:start="31:5" pos:end="31:5">s</name><operator pos:start="31:6" pos:end="31:7">-&gt;</operator><name pos:start="31:8" pos:end="31:25">dataplane_stopping</name></name> <operator pos:start="31:27" pos:end="31:27">=</operator> <name pos:start="31:29" pos:end="31:32">true</name></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:66"><expr pos:start="33:5" pos:end="33:65"><call pos:start="33:5" pos:end="33:65"><name pos:start="33:5" pos:end="33:10">assert</name><argument_list pos:start="33:11" pos:end="33:65">(<argument pos:start="33:12" pos:end="33:64"><expr pos:start="33:12" pos:end="33:64"><name pos:start="33:12" pos:end="33:17"><name pos:start="33:12" pos:end="33:12">s</name><operator pos:start="33:13" pos:end="33:14">-&gt;</operator><name pos:start="33:15" pos:end="33:17">ctx</name></name> <operator pos:start="33:19" pos:end="33:20">==</operator> <call pos:start="33:22" pos:end="33:64"><name pos:start="33:22" pos:end="33:45">iothread_get_aio_context</name><argument_list pos:start="33:46" pos:end="33:64">(<argument pos:start="33:47" pos:end="33:63"><expr pos:start="33:47" pos:end="33:63"><name pos:start="33:47" pos:end="33:63"><name pos:start="33:47" pos:end="33:48">vs</name><operator pos:start="33:49" pos:end="33:50">-&gt;</operator><name pos:start="33:51" pos:end="33:54">conf</name><operator pos:start="33:55" pos:end="33:55">.</operator><name pos:start="33:56" pos:end="33:63">iothread</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:32"><expr pos:start="37:5" pos:end="37:31"><call pos:start="37:5" pos:end="37:31"><name pos:start="37:5" pos:end="37:23">aio_context_acquire</name><argument_list pos:start="37:24" pos:end="37:31">(<argument pos:start="37:25" pos:end="37:30"><expr pos:start="37:25" pos:end="37:30"><name pos:start="37:25" pos:end="37:30"><name pos:start="37:25" pos:end="37:25">s</name><operator pos:start="37:26" pos:end="37:27">-&gt;</operator><name pos:start="37:28" pos:end="37:30">ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="41:5" pos:end="43:40"><expr pos:start="41:5" pos:end="43:39"><call pos:start="41:5" pos:end="43:39"><name pos:start="41:5" pos:end="41:26">aio_set_event_notifier</name><argument_list pos:start="41:27" pos:end="43:39">(<argument pos:start="41:28" pos:end="41:33"><expr pos:start="41:28" pos:end="41:33"><name pos:start="41:28" pos:end="41:33"><name pos:start="41:28" pos:end="41:28">s</name><operator pos:start="41:29" pos:end="41:30">-&gt;</operator><name pos:start="41:31" pos:end="41:33">ctx</name></name></expr></argument>, <argument pos:start="41:36" pos:end="41:64"><expr pos:start="41:36" pos:end="41:64"><operator pos:start="41:36" pos:end="41:36">&amp;</operator><name pos:start="41:37" pos:end="41:64"><name pos:start="41:37" pos:end="41:37">s</name><operator pos:start="41:38" pos:end="41:39">-&gt;</operator><name pos:start="41:40" pos:end="41:49">ctrl_vring</name><operator pos:start="41:50" pos:end="41:51">-&gt;</operator><name pos:start="41:52" pos:end="41:64">host_notifier</name></name></expr></argument>,

                           <argument pos:start="43:28" pos:end="43:32"><expr pos:start="43:28" pos:end="43:32"><name pos:start="43:28" pos:end="43:32">false</name></expr></argument>, <argument pos:start="43:35" pos:end="43:38"><expr pos:start="43:35" pos:end="43:38"><name pos:start="43:35" pos:end="43:38">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="47:40"><expr pos:start="45:5" pos:end="47:39"><call pos:start="45:5" pos:end="47:39"><name pos:start="45:5" pos:end="45:26">aio_set_event_notifier</name><argument_list pos:start="45:27" pos:end="47:39">(<argument pos:start="45:28" pos:end="45:33"><expr pos:start="45:28" pos:end="45:33"><name pos:start="45:28" pos:end="45:33"><name pos:start="45:28" pos:end="45:28">s</name><operator pos:start="45:29" pos:end="45:30">-&gt;</operator><name pos:start="45:31" pos:end="45:33">ctx</name></name></expr></argument>, <argument pos:start="45:36" pos:end="45:65"><expr pos:start="45:36" pos:end="45:65"><operator pos:start="45:36" pos:end="45:36">&amp;</operator><name pos:start="45:37" pos:end="45:65"><name pos:start="45:37" pos:end="45:37">s</name><operator pos:start="45:38" pos:end="45:39">-&gt;</operator><name pos:start="45:40" pos:end="45:50">event_vring</name><operator pos:start="45:51" pos:end="45:52">-&gt;</operator><name pos:start="45:53" pos:end="45:65">host_notifier</name></name></expr></argument>,

                           <argument pos:start="47:28" pos:end="47:32"><expr pos:start="47:28" pos:end="47:32"><name pos:start="47:28" pos:end="47:32">false</name></expr></argument>, <argument pos:start="47:35" pos:end="47:38"><expr pos:start="47:35" pos:end="47:38"><name pos:start="47:35" pos:end="47:38">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="49:5" pos:end="55:5">for <control pos:start="49:9" pos:end="49:45">(<init pos:start="49:10" pos:end="49:15"><expr pos:start="49:10" pos:end="49:14"><name pos:start="49:10" pos:end="49:10">i</name> <operator pos:start="49:12" pos:end="49:12">=</operator> <literal type="number" pos:start="49:14" pos:end="49:14">0</literal></expr>;</init> <condition pos:start="49:17" pos:end="49:40"><expr pos:start="49:17" pos:end="49:39"><name pos:start="49:17" pos:end="49:17">i</name> <operator pos:start="49:19" pos:end="49:19">&lt;</operator> <name pos:start="49:21" pos:end="49:39"><name pos:start="49:21" pos:end="49:22">vs</name><operator pos:start="49:23" pos:end="49:24">-&gt;</operator><name pos:start="49:25" pos:end="49:28">conf</name><operator pos:start="49:29" pos:end="49:29">.</operator><name pos:start="49:30" pos:end="49:39">num_queues</name></name></expr>;</condition> <incr pos:start="49:42" pos:end="49:44"><expr pos:start="49:42" pos:end="49:44"><name pos:start="49:42" pos:end="49:42">i</name><operator pos:start="49:43" pos:end="49:44">++</operator></expr></incr>)</control> <block pos:start="49:47" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:44">

        <expr_stmt pos:start="51:9" pos:end="53:44"><expr pos:start="51:9" pos:end="53:43"><call pos:start="51:9" pos:end="53:43"><name pos:start="51:9" pos:end="51:30">aio_set_event_notifier</name><argument_list pos:start="51:31" pos:end="53:43">(<argument pos:start="51:32" pos:end="51:37"><expr pos:start="51:32" pos:end="51:37"><name pos:start="51:32" pos:end="51:37"><name pos:start="51:32" pos:end="51:32">s</name><operator pos:start="51:33" pos:end="51:34">-&gt;</operator><name pos:start="51:35" pos:end="51:37">ctx</name></name></expr></argument>, <argument pos:start="51:40" pos:end="51:71"><expr pos:start="51:40" pos:end="51:71"><operator pos:start="51:40" pos:end="51:40">&amp;</operator><name pos:start="51:41" pos:end="51:56"><name pos:start="51:41" pos:end="51:41">s</name><operator pos:start="51:42" pos:end="51:43">-&gt;</operator><name pos:start="51:44" pos:end="51:53">cmd_vrings</name><index pos:start="51:54" pos:end="51:56">[<expr pos:start="51:55" pos:end="51:55"><name pos:start="51:55" pos:end="51:55">i</name></expr>]</index></name><operator pos:start="51:57" pos:end="51:58">-&gt;</operator><name pos:start="51:59" pos:end="51:71">host_notifier</name></expr></argument>,

                               <argument pos:start="53:32" pos:end="53:36"><expr pos:start="53:32" pos:end="53:36"><name pos:start="53:32" pos:end="53:36">false</name></expr></argument>, <argument pos:start="53:39" pos:end="53:42"><expr pos:start="53:39" pos:end="53:42"><name pos:start="53:39" pos:end="53:42">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="59:5" pos:end="59:20"><expr pos:start="59:5" pos:end="59:19"><call pos:start="59:5" pos:end="59:19"><name pos:start="59:5" pos:end="59:17">blk_drain_all</name><argument_list pos:start="59:18" pos:end="59:19">()</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="59:22" pos:end="59:65">/* ensure there are no in-flight requests */</comment>



    <expr_stmt pos:start="63:5" pos:end="63:32"><expr pos:start="63:5" pos:end="63:31"><call pos:start="63:5" pos:end="63:31"><name pos:start="63:5" pos:end="63:23">aio_context_release</name><argument_list pos:start="63:24" pos:end="63:31">(<argument pos:start="63:25" pos:end="63:30"><expr pos:start="63:25" pos:end="63:30"><name pos:start="63:25" pos:end="63:30"><name pos:start="63:25" pos:end="63:25">s</name><operator pos:start="63:26" pos:end="63:27">-&gt;</operator><name pos:start="63:28" pos:end="63:30">ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="67:5" pos:end="71:7">/* Sync vring state back to virtqueue so that non-dataplane request

     * processing can continue when we disable the host notifier below.

     */</comment>

    <expr_stmt pos:start="73:5" pos:end="73:34"><expr pos:start="73:5" pos:end="73:33"><call pos:start="73:5" pos:end="73:33"><name pos:start="73:5" pos:end="73:30">virtio_scsi_vring_teardown</name><argument_list pos:start="73:31" pos:end="73:33">(<argument pos:start="73:32" pos:end="73:32"><expr pos:start="73:32" pos:end="73:32"><name pos:start="73:32" pos:end="73:32">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="77:5" pos:end="81:5">for <control pos:start="77:9" pos:end="77:49">(<init pos:start="77:10" pos:end="77:15"><expr pos:start="77:10" pos:end="77:14"><name pos:start="77:10" pos:end="77:10">i</name> <operator pos:start="77:12" pos:end="77:12">=</operator> <literal type="number" pos:start="77:14" pos:end="77:14">0</literal></expr>;</init> <condition pos:start="77:17" pos:end="77:44"><expr pos:start="77:17" pos:end="77:43"><name pos:start="77:17" pos:end="77:17">i</name> <operator pos:start="77:19" pos:end="77:19">&lt;</operator> <name pos:start="77:21" pos:end="77:39"><name pos:start="77:21" pos:end="77:22">vs</name><operator pos:start="77:23" pos:end="77:24">-&gt;</operator><name pos:start="77:25" pos:end="77:28">conf</name><operator pos:start="77:29" pos:end="77:29">.</operator><name pos:start="77:30" pos:end="77:39">num_queues</name></name> <operator pos:start="77:41" pos:end="77:41">+</operator> <literal type="number" pos:start="77:43" pos:end="77:43">2</literal></expr>;</condition> <incr pos:start="77:46" pos:end="77:48"><expr pos:start="77:46" pos:end="77:48"><name pos:start="77:46" pos:end="77:46">i</name><operator pos:start="77:47" pos:end="77:48">++</operator></expr></incr>)</control> <block pos:start="77:51" pos:end="81:5">{<block_content pos:start="79:9" pos:end="79:53">

        <expr_stmt pos:start="79:9" pos:end="79:53"><expr pos:start="79:9" pos:end="79:52"><call pos:start="79:9" pos:end="79:52"><name pos:start="79:9" pos:end="79:28"><name pos:start="79:9" pos:end="79:9">k</name><operator pos:start="79:10" pos:end="79:11">-&gt;</operator><name pos:start="79:12" pos:end="79:28">set_host_notifier</name></name><argument_list pos:start="79:29" pos:end="79:52">(<argument pos:start="79:30" pos:end="79:41"><expr pos:start="79:30" pos:end="79:41"><name pos:start="79:30" pos:end="79:41"><name pos:start="79:30" pos:end="79:33">qbus</name><operator pos:start="79:34" pos:end="79:35">-&gt;</operator><name pos:start="79:36" pos:end="79:41">parent</name></name></expr></argument>, <argument pos:start="79:44" pos:end="79:44"><expr pos:start="79:44" pos:end="79:44"><name pos:start="79:44" pos:end="79:44">i</name></expr></argument>, <argument pos:start="79:47" pos:end="79:51"><expr pos:start="79:47" pos:end="79:51"><name pos:start="79:47" pos:end="79:51">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="85:5" pos:end="85:39">/* Clean up guest notifier (irq) */</comment>

    <expr_stmt pos:start="87:5" pos:end="87:73"><expr pos:start="87:5" pos:end="87:72"><call pos:start="87:5" pos:end="87:72"><name pos:start="87:5" pos:end="87:26"><name pos:start="87:5" pos:end="87:5">k</name><operator pos:start="87:6" pos:end="87:7">-&gt;</operator><name pos:start="87:8" pos:end="87:26">set_guest_notifiers</name></name><argument_list pos:start="87:27" pos:end="87:72">(<argument pos:start="87:28" pos:end="87:39"><expr pos:start="87:28" pos:end="87:39"><name pos:start="87:28" pos:end="87:39"><name pos:start="87:28" pos:end="87:31">qbus</name><operator pos:start="87:32" pos:end="87:33">-&gt;</operator><name pos:start="87:34" pos:end="87:39">parent</name></name></expr></argument>, <argument pos:start="87:42" pos:end="87:64"><expr pos:start="87:42" pos:end="87:64"><name pos:start="87:42" pos:end="87:60"><name pos:start="87:42" pos:end="87:43">vs</name><operator pos:start="87:44" pos:end="87:45">-&gt;</operator><name pos:start="87:46" pos:end="87:49">conf</name><operator pos:start="87:50" pos:end="87:50">.</operator><name pos:start="87:51" pos:end="87:60">num_queues</name></name> <operator pos:start="87:62" pos:end="87:62">+</operator> <literal type="number" pos:start="87:64" pos:end="87:64">2</literal></expr></argument>, <argument pos:start="87:67" pos:end="87:71"><expr pos:start="87:67" pos:end="87:71"><name pos:start="87:67" pos:end="87:71">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:34"><expr pos:start="89:5" pos:end="89:33"><name pos:start="89:5" pos:end="89:25"><name pos:start="89:5" pos:end="89:5">s</name><operator pos:start="89:6" pos:end="89:7">-&gt;</operator><name pos:start="89:8" pos:end="89:25">dataplane_stopping</name></name> <operator pos:start="89:27" pos:end="89:27">=</operator> <name pos:start="89:29" pos:end="89:33">false</name></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:33"><expr pos:start="91:5" pos:end="91:32"><name pos:start="91:5" pos:end="91:24"><name pos:start="91:5" pos:end="91:5">s</name><operator pos:start="91:6" pos:end="91:7">-&gt;</operator><name pos:start="91:8" pos:end="91:24">dataplane_started</name></name> <operator pos:start="91:26" pos:end="91:26">=</operator> <name pos:start="91:28" pos:end="91:32">false</name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
