<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/7614.c" pos:tabs="8"><function pos:start="1:1" pos:end="119:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">arm_cpu_initfn</name><parameter_list pos:start="1:27" pos:end="1:39">(<parameter pos:start="1:28" pos:end="1:38"><decl pos:start="1:28" pos:end="1:38"><type pos:start="1:28" pos:end="1:35"><name pos:start="1:28" pos:end="1:33">Object</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:38">obj</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="119:1">{<block_content pos:start="5:5" pos:end="117:5">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">CPUState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:16">cs</name> <init pos:start="5:18" pos:end="5:27">= <expr pos:start="5:20" pos:end="5:27"><call pos:start="5:20" pos:end="5:27"><name pos:start="5:20" pos:end="5:22">CPU</name><argument_list pos:start="5:23" pos:end="5:27">(<argument pos:start="5:24" pos:end="5:26"><expr pos:start="5:24" pos:end="5:26"><name pos:start="5:24" pos:end="5:26">obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:30"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:10">ARMCPU</name> <modifier pos:start="7:12" pos:end="7:12">*</modifier></type><name pos:start="7:13" pos:end="7:15">cpu</name> <init pos:start="7:17" pos:end="7:30">= <expr pos:start="7:19" pos:end="7:30"><call pos:start="7:19" pos:end="7:30"><name pos:start="7:19" pos:end="7:25">ARM_CPU</name><argument_list pos:start="7:26" pos:end="7:30">(<argument pos:start="7:27" pos:end="7:29"><expr pos:start="7:27" pos:end="7:29"><name pos:start="7:27" pos:end="7:29">obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:15"><specifier pos:start="9:5" pos:end="9:10">static</specifier> <name pos:start="9:12" pos:end="9:15">bool</name></type> <name pos:start="9:17" pos:end="9:22">inited</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:24"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:17">Aff1</name></decl>, <decl pos:start="11:20" pos:end="11:23"><type ref="prev" pos:start="11:5" pos:end="11:12"/><name pos:start="11:20" pos:end="11:23">Aff0</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:28"><expr pos:start="15:5" pos:end="15:27"><name pos:start="15:5" pos:end="15:15"><name pos:start="15:5" pos:end="15:6">cs</name><operator pos:start="15:7" pos:end="15:8">-&gt;</operator><name pos:start="15:9" pos:end="15:15">env_ptr</name></name> <operator pos:start="15:17" pos:end="15:17">=</operator> <operator pos:start="15:19" pos:end="15:19">&amp;</operator><name pos:start="15:20" pos:end="15:27"><name pos:start="15:20" pos:end="15:22">cpu</name><operator pos:start="15:23" pos:end="15:24">-&gt;</operator><name pos:start="15:25" pos:end="15:27">env</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:36"><expr pos:start="17:5" pos:end="17:35"><call pos:start="17:5" pos:end="17:35"><name pos:start="17:5" pos:end="17:17">cpu_exec_init</name><argument_list pos:start="17:18" pos:end="17:35">(<argument pos:start="17:19" pos:end="17:20"><expr pos:start="17:19" pos:end="17:20"><name pos:start="17:19" pos:end="17:20">cs</name></expr></argument>, <argument pos:start="17:23" pos:end="17:34"><expr pos:start="17:23" pos:end="17:34"><operator pos:start="17:23" pos:end="17:23">&amp;</operator><name pos:start="17:24" pos:end="17:34">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="21:57"><expr pos:start="19:5" pos:end="21:56"><name pos:start="19:5" pos:end="19:16"><name pos:start="19:5" pos:end="19:7">cpu</name><operator pos:start="19:8" pos:end="19:9">-&gt;</operator><name pos:start="19:10" pos:end="19:16">cp_regs</name></name> <operator pos:start="19:18" pos:end="19:18">=</operator> <call pos:start="19:20" pos:end="21:56"><name pos:start="19:20" pos:end="19:40">g_hash_table_new_full</name><argument_list pos:start="19:41" pos:end="21:56">(<argument pos:start="19:42" pos:end="19:51"><expr pos:start="19:42" pos:end="19:51"><name pos:start="19:42" pos:end="19:51">g_int_hash</name></expr></argument>, <argument pos:start="19:54" pos:end="19:64"><expr pos:start="19:54" pos:end="19:64"><name pos:start="19:54" pos:end="19:64">g_int_equal</name></expr></argument>,

                                         <argument pos:start="21:42" pos:end="21:47"><expr pos:start="21:42" pos:end="21:47"><name pos:start="21:42" pos:end="21:47">g_free</name></expr></argument>, <argument pos:start="21:50" pos:end="21:55"><expr pos:start="21:50" pos:end="21:55"><name pos:start="21:50" pos:end="21:55">g_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="25:5" pos:end="33:7">/* This cpu-id-to-MPIDR affinity is used only for TCG; KVM will override it.

     * We don't support setting cluster ID ([16..23]) (known as Aff2

     * in later ARM ARM versions), or any of the higher affinity level fields,

     * so these bits always RAZ.

     */</comment>

    <expr_stmt pos:start="35:5" pos:end="35:48"><expr pos:start="35:5" pos:end="35:47"><name pos:start="35:5" pos:end="35:8">Aff1</name> <operator pos:start="35:10" pos:end="35:10">=</operator> <name pos:start="35:12" pos:end="35:24"><name pos:start="35:12" pos:end="35:13">cs</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:24">cpu_index</name></name> <operator pos:start="35:26" pos:end="35:26">/</operator> <name pos:start="35:28" pos:end="35:47">ARM_CPUS_PER_CLUSTER</name></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:48"><expr pos:start="37:5" pos:end="37:47"><name pos:start="37:5" pos:end="37:8">Aff0</name> <operator pos:start="37:10" pos:end="37:10">=</operator> <name pos:start="37:12" pos:end="37:24"><name pos:start="37:12" pos:end="37:13">cs</name><operator pos:start="37:14" pos:end="37:15">-&gt;</operator><name pos:start="37:16" pos:end="37:24">cpu_index</name></name> <operator pos:start="37:26" pos:end="37:26">%</operator> <name pos:start="37:28" pos:end="37:47">ARM_CPUS_PER_CLUSTER</name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="44:0"><expr pos:start="39:5" pos:end="39:54"><name pos:start="39:5" pos:end="39:20"><name pos:start="39:5" pos:end="39:7">cpu</name><operator pos:start="39:8" pos:end="39:9">-&gt;</operator><name pos:start="39:10" pos:end="39:20">mp_affinity</name></name> <operator pos:start="39:22" pos:end="39:22">=</operator> <operator pos:start="39:24" pos:end="39:24">(</operator><name pos:start="39:25" pos:end="39:28">Aff1</name> <operator pos:start="39:30" pos:end="39:31">&lt;&lt;</operator> <name pos:start="39:33" pos:end="39:46">ARM_AFF1_SHIFT</name><operator pos:start="39:47" pos:end="39:47">)</operator> <operator pos:start="39:49" pos:end="39:49">|</operator> <name pos:start="39:51" pos:end="39:54">Aff0</name></expr>;</expr_stmt>



<cpp:ifndef pos:start="43:1" pos:end="43:24">#<cpp:directive pos:start="43:2" pos:end="43:7">ifndef</cpp:directive> <name pos:start="43:9" pos:end="43:24">CONFIG_USER_ONLY</name></cpp:ifndef>

    <comment type="block" pos:start="45:5" pos:end="45:39">/* Our inbound IRQ and FIQ lines */</comment>

    <if_stmt pos:start="47:5" pos:end="61:5"><if pos:start="47:5" pos:end="57:5">if <condition pos:start="47:8" pos:end="47:22">(<expr pos:start="47:9" pos:end="47:21"><call pos:start="47:9" pos:end="47:21"><name pos:start="47:9" pos:end="47:19">kvm_enabled</name><argument_list pos:start="47:20" pos:end="47:21">()</argument_list></call></expr>)</condition> <block pos:start="47:24" pos:end="57:5">{<block_content pos:start="55:9" pos:end="55:63">

        <comment type="block" pos:start="49:9" pos:end="53:11">/* VIRQ and VFIQ are unused with KVM but we add them to maintain

         * the same interface as non-KVM CPUs.

         */</comment>

        <expr_stmt pos:start="55:9" pos:end="55:63"><expr pos:start="55:9" pos:end="55:62"><call pos:start="55:9" pos:end="55:62"><name pos:start="55:9" pos:end="55:25">qdev_init_gpio_in</name><argument_list pos:start="55:26" pos:end="55:62">(<argument pos:start="55:27" pos:end="55:37"><expr pos:start="55:27" pos:end="55:37"><call pos:start="55:27" pos:end="55:37"><name pos:start="55:27" pos:end="55:32">DEVICE</name><argument_list pos:start="55:33" pos:end="55:37">(<argument pos:start="55:34" pos:end="55:36"><expr pos:start="55:34" pos:end="55:36"><name pos:start="55:34" pos:end="55:36">cpu</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="55:40" pos:end="55:58"><expr pos:start="55:40" pos:end="55:58"><name pos:start="55:40" pos:end="55:58">arm_cpu_kvm_set_irq</name></expr></argument>, <argument pos:start="55:61" pos:end="55:61"><expr pos:start="55:61" pos:end="55:61"><literal type="number" pos:start="55:61" pos:end="55:61">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="57:7" pos:end="61:5">else <block pos:start="57:12" pos:end="61:5">{<block_content pos:start="59:9" pos:end="59:59">

        <expr_stmt pos:start="59:9" pos:end="59:59"><expr pos:start="59:9" pos:end="59:58"><call pos:start="59:9" pos:end="59:58"><name pos:start="59:9" pos:end="59:25">qdev_init_gpio_in</name><argument_list pos:start="59:26" pos:end="59:58">(<argument pos:start="59:27" pos:end="59:37"><expr pos:start="59:27" pos:end="59:37"><call pos:start="59:27" pos:end="59:37"><name pos:start="59:27" pos:end="59:32">DEVICE</name><argument_list pos:start="59:33" pos:end="59:37">(<argument pos:start="59:34" pos:end="59:36"><expr pos:start="59:34" pos:end="59:36"><name pos:start="59:34" pos:end="59:36">cpu</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="59:40" pos:end="59:54"><expr pos:start="59:40" pos:end="59:54"><name pos:start="59:40" pos:end="59:54">arm_cpu_set_irq</name></expr></argument>, <argument pos:start="59:57" pos:end="59:57"><expr pos:start="59:57" pos:end="59:57"><literal type="number" pos:start="59:57" pos:end="59:57">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="65:5" pos:end="67:71"><expr pos:start="65:5" pos:end="67:70"><name pos:start="65:5" pos:end="65:30"><name pos:start="65:5" pos:end="65:7">cpu</name><operator pos:start="65:8" pos:end="65:9">-&gt;</operator><name pos:start="65:10" pos:end="65:17">gt_timer</name><index pos:start="65:18" pos:end="65:30">[<expr pos:start="65:19" pos:end="65:29"><name pos:start="65:19" pos:end="65:29">GTIMER_PHYS</name></expr>]</index></name> <operator pos:start="65:32" pos:end="65:32">=</operator> <call pos:start="65:34" pos:end="67:70"><name pos:start="65:34" pos:end="65:42">timer_new</name><argument_list pos:start="65:43" pos:end="67:70">(<argument pos:start="65:44" pos:end="65:61"><expr pos:start="65:44" pos:end="65:61"><name pos:start="65:44" pos:end="65:61">QEMU_CLOCK_VIRTUAL</name></expr></argument>, <argument pos:start="65:64" pos:end="65:75"><expr pos:start="65:64" pos:end="65:75"><name pos:start="65:64" pos:end="65:75">GTIMER_SCALE</name></expr></argument>,

                                                <argument pos:start="67:49" pos:end="67:64"><expr pos:start="67:49" pos:end="67:64"><name pos:start="67:49" pos:end="67:64">arm_gt_ptimer_cb</name></expr></argument>, <argument pos:start="67:67" pos:end="67:69"><expr pos:start="67:67" pos:end="67:69"><name pos:start="67:67" pos:end="67:69">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="71:71"><expr pos:start="69:5" pos:end="71:70"><name pos:start="69:5" pos:end="69:30"><name pos:start="69:5" pos:end="69:7">cpu</name><operator pos:start="69:8" pos:end="69:9">-&gt;</operator><name pos:start="69:10" pos:end="69:17">gt_timer</name><index pos:start="69:18" pos:end="69:30">[<expr pos:start="69:19" pos:end="69:29"><name pos:start="69:19" pos:end="69:29">GTIMER_VIRT</name></expr>]</index></name> <operator pos:start="69:32" pos:end="69:32">=</operator> <call pos:start="69:34" pos:end="71:70"><name pos:start="69:34" pos:end="69:42">timer_new</name><argument_list pos:start="69:43" pos:end="71:70">(<argument pos:start="69:44" pos:end="69:61"><expr pos:start="69:44" pos:end="69:61"><name pos:start="69:44" pos:end="69:61">QEMU_CLOCK_VIRTUAL</name></expr></argument>, <argument pos:start="69:64" pos:end="69:75"><expr pos:start="69:64" pos:end="69:75"><name pos:start="69:64" pos:end="69:75">GTIMER_SCALE</name></expr></argument>,

                                                <argument pos:start="71:49" pos:end="71:64"><expr pos:start="71:49" pos:end="71:64"><name pos:start="71:49" pos:end="71:64">arm_gt_vtimer_cb</name></expr></argument>, <argument pos:start="71:67" pos:end="71:69"><expr pos:start="71:67" pos:end="71:69"><name pos:start="71:67" pos:end="71:69">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="75:71"><expr pos:start="73:5" pos:end="75:70"><name pos:start="73:5" pos:end="73:29"><name pos:start="73:5" pos:end="73:7">cpu</name><operator pos:start="73:8" pos:end="73:9">-&gt;</operator><name pos:start="73:10" pos:end="73:17">gt_timer</name><index pos:start="73:18" pos:end="73:29">[<expr pos:start="73:19" pos:end="73:28"><name pos:start="73:19" pos:end="73:28">GTIMER_HYP</name></expr>]</index></name> <operator pos:start="73:31" pos:end="73:31">=</operator> <call pos:start="73:33" pos:end="75:70"><name pos:start="73:33" pos:end="73:41">timer_new</name><argument_list pos:start="73:42" pos:end="75:70">(<argument pos:start="73:43" pos:end="73:60"><expr pos:start="73:43" pos:end="73:60"><name pos:start="73:43" pos:end="73:60">QEMU_CLOCK_VIRTUAL</name></expr></argument>, <argument pos:start="73:63" pos:end="73:74"><expr pos:start="73:63" pos:end="73:74"><name pos:start="73:63" pos:end="73:74">GTIMER_SCALE</name></expr></argument>,

                                                <argument pos:start="75:49" pos:end="75:64"><expr pos:start="75:49" pos:end="75:64"><name pos:start="75:49" pos:end="75:64">arm_gt_htimer_cb</name></expr></argument>, <argument pos:start="75:67" pos:end="75:69"><expr pos:start="75:67" pos:end="75:69"><name pos:start="75:67" pos:end="75:69">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="79:71"><expr pos:start="77:5" pos:end="79:70"><name pos:start="77:5" pos:end="77:29"><name pos:start="77:5" pos:end="77:7">cpu</name><operator pos:start="77:8" pos:end="77:9">-&gt;</operator><name pos:start="77:10" pos:end="77:17">gt_timer</name><index pos:start="77:18" pos:end="77:29">[<expr pos:start="77:19" pos:end="77:28"><name pos:start="77:19" pos:end="77:28">GTIMER_SEC</name></expr>]</index></name> <operator pos:start="77:31" pos:end="77:31">=</operator> <call pos:start="77:33" pos:end="79:70"><name pos:start="77:33" pos:end="77:41">timer_new</name><argument_list pos:start="77:42" pos:end="79:70">(<argument pos:start="77:43" pos:end="77:60"><expr pos:start="77:43" pos:end="77:60"><name pos:start="77:43" pos:end="77:60">QEMU_CLOCK_VIRTUAL</name></expr></argument>, <argument pos:start="77:63" pos:end="77:74"><expr pos:start="77:63" pos:end="77:74"><name pos:start="77:63" pos:end="77:74">GTIMER_SCALE</name></expr></argument>,

                                                <argument pos:start="79:49" pos:end="79:64"><expr pos:start="79:49" pos:end="79:64"><name pos:start="79:49" pos:end="79:64">arm_gt_stimer_cb</name></expr></argument>, <argument pos:start="79:67" pos:end="79:69"><expr pos:start="79:67" pos:end="79:69"><name pos:start="79:67" pos:end="79:69">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="86:0"><expr pos:start="81:5" pos:end="83:57"><call pos:start="81:5" pos:end="83:57"><name pos:start="81:5" pos:end="81:22">qdev_init_gpio_out</name><argument_list pos:start="81:23" pos:end="83:57">(<argument pos:start="81:24" pos:end="81:34"><expr pos:start="81:24" pos:end="81:34"><call pos:start="81:24" pos:end="81:34"><name pos:start="81:24" pos:end="81:29">DEVICE</name><argument_list pos:start="81:30" pos:end="81:34">(<argument pos:start="81:31" pos:end="81:33"><expr pos:start="81:31" pos:end="81:33"><name pos:start="81:31" pos:end="81:33">cpu</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="81:37" pos:end="81:57"><expr pos:start="81:37" pos:end="81:57"><name pos:start="81:37" pos:end="81:57"><name pos:start="81:37" pos:end="81:39">cpu</name><operator pos:start="81:40" pos:end="81:41">-&gt;</operator><name pos:start="81:42" pos:end="81:57">gt_timer_outputs</name></name></expr></argument>,

                       <argument pos:start="83:24" pos:end="83:56"><expr pos:start="83:24" pos:end="83:56"><call pos:start="83:24" pos:end="83:56"><name pos:start="83:24" pos:end="83:33">ARRAY_SIZE</name><argument_list pos:start="83:34" pos:end="83:56">(<argument pos:start="83:35" pos:end="83:55"><expr pos:start="83:35" pos:end="83:55"><name pos:start="83:35" pos:end="83:55"><name pos:start="83:35" pos:end="83:37">cpu</name><operator pos:start="83:38" pos:end="83:39">-&gt;</operator><name pos:start="83:40" pos:end="83:55">gt_timer_outputs</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="85:1" pos:end="85:6">#<cpp:directive pos:start="85:2" pos:end="85:6">endif</cpp:directive></cpp:endif>



    <comment type="block" pos:start="89:5" pos:end="95:7">/* DTB consumers generally don't in fact care what the 'compatible'

     * string is, so always provide some string and trust that a hypothetical

     * picky DTB consumer will also provide a helpful error message.

     */</comment>

    <expr_stmt pos:start="97:5" pos:end="97:41"><expr pos:start="97:5" pos:end="97:40"><name pos:start="97:5" pos:end="97:23"><name pos:start="97:5" pos:end="97:7">cpu</name><operator pos:start="97:8" pos:end="97:9">-&gt;</operator><name pos:start="97:10" pos:end="97:23">dtb_compatible</name></name> <operator pos:start="97:25" pos:end="97:25">=</operator> <literal type="string" pos:start="97:27" pos:end="97:40">"qemu,unknown"</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:26"><expr pos:start="99:5" pos:end="99:25"><name pos:start="99:5" pos:end="99:21"><name pos:start="99:5" pos:end="99:7">cpu</name><operator pos:start="99:8" pos:end="99:9">-&gt;</operator><name pos:start="99:10" pos:end="99:21">psci_version</name></name> <operator pos:start="99:23" pos:end="99:23">=</operator> <literal type="number" pos:start="99:25" pos:end="99:25">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="99:28" pos:end="99:60">/* By default assume PSCI v0.1 */</comment>

    <expr_stmt pos:start="101:5" pos:end="101:47"><expr pos:start="101:5" pos:end="101:46"><name pos:start="101:5" pos:end="101:19"><name pos:start="101:5" pos:end="101:7">cpu</name><operator pos:start="101:8" pos:end="101:9">-&gt;</operator><name pos:start="101:10" pos:end="101:19">kvm_target</name></name> <operator pos:start="101:21" pos:end="101:21">=</operator> <name pos:start="101:23" pos:end="101:46">QEMU_KVM_ARM_TARGET_NONE</name></expr>;</expr_stmt>



    <if_stmt pos:start="105:5" pos:end="117:5"><if pos:start="105:5" pos:end="117:5">if <condition pos:start="105:8" pos:end="105:22">(<expr pos:start="105:9" pos:end="105:21"><call pos:start="105:9" pos:end="105:21"><name pos:start="105:9" pos:end="105:19">tcg_enabled</name><argument_list pos:start="105:20" pos:end="105:21">()</argument_list></call></expr>)</condition> <block pos:start="105:24" pos:end="117:5">{<block_content pos:start="107:9" pos:end="115:9">

        <expr_stmt pos:start="107:9" pos:end="107:30"><expr pos:start="107:9" pos:end="107:29"><name pos:start="107:9" pos:end="107:25"><name pos:start="107:9" pos:end="107:11">cpu</name><operator pos:start="107:12" pos:end="107:13">-&gt;</operator><name pos:start="107:14" pos:end="107:25">psci_version</name></name> <operator pos:start="107:27" pos:end="107:27">=</operator> <literal type="number" pos:start="107:29" pos:end="107:29">2</literal></expr>;</expr_stmt> <comment type="block" pos:start="107:32" pos:end="107:60">/* TCG implements PSCI 0.2 */</comment>

        <if_stmt pos:start="109:9" pos:end="115:9"><if pos:start="109:9" pos:end="115:9">if <condition pos:start="109:12" pos:end="109:20">(<expr pos:start="109:13" pos:end="109:19"><operator pos:start="109:13" pos:end="109:13">!</operator><name pos:start="109:14" pos:end="109:19">inited</name></expr>)</condition> <block pos:start="109:22" pos:end="115:9">{<block_content pos:start="111:13" pos:end="113:33">

            <expr_stmt pos:start="111:13" pos:end="111:26"><expr pos:start="111:13" pos:end="111:25"><name pos:start="111:13" pos:end="111:18">inited</name> <operator pos:start="111:20" pos:end="111:20">=</operator> <name pos:start="111:22" pos:end="111:25">true</name></expr>;</expr_stmt>

            <expr_stmt pos:start="113:13" pos:end="113:33"><expr pos:start="113:13" pos:end="113:32"><call pos:start="113:13" pos:end="113:32"><name pos:start="113:13" pos:end="113:30">arm_translate_init</name><argument_list pos:start="113:31" pos:end="113:32">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
