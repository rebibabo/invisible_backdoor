<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24928.c" pos:tabs="8"><function pos:start="1:1" pos:end="83:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">av_cold</name> <name pos:start="1:16" pos:end="1:18">int</name></type> <name pos:start="1:20" pos:end="1:35">g726_encode_init</name><parameter_list pos:start="1:36" pos:end="1:58">(<parameter pos:start="1:37" pos:end="1:57"><decl pos:start="1:37" pos:end="1:57"><type pos:start="1:37" pos:end="1:52"><name pos:start="1:37" pos:end="1:50">AVCodecContext</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:57">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="83:1">{<block_content pos:start="5:5" pos:end="81:13">

    <decl_stmt pos:start="5:5" pos:end="5:38"><decl pos:start="5:5" pos:end="5:37"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:15">G726Context</name><modifier pos:start="5:16" pos:end="5:16">*</modifier></type> <name pos:start="5:18" pos:end="5:18">c</name> <init pos:start="5:20" pos:end="5:37">= <expr pos:start="5:22" pos:end="5:37"><name pos:start="5:22" pos:end="5:37"><name pos:start="5:22" pos:end="5:26">avctx</name><operator pos:start="5:27" pos:end="5:28">-&gt;</operator><name pos:start="5:29" pos:end="5:37">priv_data</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="21:5"><if pos:start="9:5" pos:end="21:5">if <condition pos:start="9:8" pos:end="11:35">(<expr pos:start="9:9" pos:end="11:34"><name pos:start="9:9" pos:end="9:36"><name pos:start="9:9" pos:end="9:13">avctx</name><operator pos:start="9:14" pos:end="9:15">-&gt;</operator><name pos:start="9:16" pos:end="9:36">strict_std_compliance</name></name> <operator pos:start="9:38" pos:end="9:38">&gt;</operator> <name pos:start="9:40" pos:end="9:63">FF_COMPLIANCE_UNOFFICIAL</name> <operator pos:start="9:65" pos:end="9:66">&amp;&amp;</operator>

        <name pos:start="11:9" pos:end="11:26"><name pos:start="11:9" pos:end="11:13">avctx</name><operator pos:start="11:14" pos:end="11:15">-&gt;</operator><name pos:start="11:16" pos:end="11:26">sample_rate</name></name> <operator pos:start="11:28" pos:end="11:29">!=</operator> <literal type="number" pos:start="11:31" pos:end="11:34">8000</literal></expr>)</condition> <block pos:start="11:37" pos:end="21:5">{<block_content pos:start="13:9" pos:end="19:31">

        <expr_stmt pos:start="13:9" pos:end="17:61"><expr pos:start="13:9" pos:end="17:60"><call pos:start="13:9" pos:end="17:60"><name pos:start="13:9" pos:end="13:14">av_log</name><argument_list pos:start="13:15" pos:end="17:60">(<argument pos:start="13:16" pos:end="13:20"><expr pos:start="13:16" pos:end="13:20"><name pos:start="13:16" pos:end="13:20">avctx</name></expr></argument>, <argument pos:start="13:23" pos:end="13:34"><expr pos:start="13:23" pos:end="13:34"><name pos:start="13:23" pos:end="13:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="13:37" pos:end="17:59"><expr pos:start="13:37" pos:end="17:59"><literal type="string" pos:start="13:37" pos:end="13:75">"Sample rates other than 8kHz are not "</literal>

               <literal type="string" pos:start="15:16" pos:end="15:78">"allowed when the compliance level is higher than unofficial. "</literal>

               <literal type="string" pos:start="17:16" pos:end="17:59">"Resample or reduce the compliance level.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:31">return <expr pos:start="19:16" pos:end="19:30"><call pos:start="19:16" pos:end="19:30"><name pos:start="19:16" pos:end="19:22">AVERROR</name><argument_list pos:start="19:23" pos:end="19:30">(<argument pos:start="19:24" pos:end="19:29"><expr pos:start="19:24" pos:end="19:29"><name pos:start="19:24" pos:end="19:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:39"><expr pos:start="23:5" pos:end="23:38"><call pos:start="23:5" pos:end="23:38"><name pos:start="23:5" pos:end="23:14">av_assert0</name><argument_list pos:start="23:15" pos:end="23:38">(<argument pos:start="23:16" pos:end="23:37"><expr pos:start="23:16" pos:end="23:37"><name pos:start="23:16" pos:end="23:33"><name pos:start="23:16" pos:end="23:20">avctx</name><operator pos:start="23:21" pos:end="23:22">-&gt;</operator><name pos:start="23:23" pos:end="23:33">sample_rate</name></name> <operator pos:start="23:35" pos:end="23:35">&gt;</operator> <literal type="number" pos:start="23:37" pos:end="23:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if<condition pos:start="27:7" pos:end="27:28">(<expr pos:start="27:8" pos:end="27:27"><name pos:start="27:8" pos:end="27:22"><name pos:start="27:8" pos:end="27:12">avctx</name><operator pos:start="27:13" pos:end="27:14">-&gt;</operator><name pos:start="27:15" pos:end="27:22">channels</name></name> <operator pos:start="27:24" pos:end="27:25">!=</operator> <literal type="number" pos:start="27:27" pos:end="27:27">1</literal></expr>)</condition><block pos:start="27:29" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:18">

        <expr_stmt pos:start="29:9" pos:end="29:64"><expr pos:start="29:9" pos:end="29:63"><call pos:start="29:9" pos:end="29:63"><name pos:start="29:9" pos:end="29:14">av_log</name><argument_list pos:start="29:15" pos:end="29:63">(<argument pos:start="29:16" pos:end="29:20"><expr pos:start="29:16" pos:end="29:20"><name pos:start="29:16" pos:end="29:20">avctx</name></expr></argument>, <argument pos:start="29:23" pos:end="29:34"><expr pos:start="29:23" pos:end="29:34"><name pos:start="29:23" pos:end="29:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="29:37" pos:end="29:62"><expr pos:start="29:37" pos:end="29:62"><literal type="string" pos:start="29:37" pos:end="29:62">"Only mono is supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:18">return <expr pos:start="31:16" pos:end="31:17"><operator pos:start="31:16" pos:end="31:16">-</operator><literal type="number" pos:start="31:17" pos:end="31:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="37:5" pos:end="43:5"><if pos:start="37:5" pos:end="43:5">if <condition pos:start="37:8" pos:end="37:45">(<expr pos:start="37:9" pos:end="37:44"><name pos:start="37:9" pos:end="37:23"><name pos:start="37:9" pos:end="37:13">avctx</name><operator pos:start="37:14" pos:end="37:15">-&gt;</operator><name pos:start="37:16" pos:end="37:23">bit_rate</name></name> <operator pos:start="37:25" pos:end="37:25">%</operator> <name pos:start="37:27" pos:end="37:44"><name pos:start="37:27" pos:end="37:31">avctx</name><operator pos:start="37:32" pos:end="37:33">-&gt;</operator><name pos:start="37:34" pos:end="37:44">sample_rate</name></name></expr>)</condition> <block pos:start="37:47" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:31">

        <expr_stmt pos:start="39:9" pos:end="39:85"><expr pos:start="39:9" pos:end="39:84"><call pos:start="39:9" pos:end="39:84"><name pos:start="39:9" pos:end="39:14">av_log</name><argument_list pos:start="39:15" pos:end="39:84">(<argument pos:start="39:16" pos:end="39:20"><expr pos:start="39:16" pos:end="39:20"><name pos:start="39:16" pos:end="39:20">avctx</name></expr></argument>, <argument pos:start="39:23" pos:end="39:34"><expr pos:start="39:23" pos:end="39:34"><name pos:start="39:23" pos:end="39:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="39:37" pos:end="39:83"><expr pos:start="39:37" pos:end="39:83"><literal type="string" pos:start="39:37" pos:end="39:83">"Bitrate - Samplerate combination is invalid\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="41:9" pos:end="41:31">return <expr pos:start="41:16" pos:end="41:30"><call pos:start="41:16" pos:end="41:30"><name pos:start="41:16" pos:end="41:22">AVERROR</name><argument_list pos:start="41:23" pos:end="41:30">(<argument pos:start="41:24" pos:end="41:29"><expr pos:start="41:24" pos:end="41:29"><name pos:start="41:24" pos:end="41:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:81"><expr pos:start="45:5" pos:end="45:80"><name pos:start="45:5" pos:end="45:16"><name pos:start="45:5" pos:end="45:5">c</name><operator pos:start="45:6" pos:end="45:7">-&gt;</operator><name pos:start="45:8" pos:end="45:16">code_size</name></name> <operator pos:start="45:18" pos:end="45:18">=</operator> <operator pos:start="45:20" pos:end="45:20">(</operator><name pos:start="45:21" pos:end="45:35"><name pos:start="45:21" pos:end="45:25">avctx</name><operator pos:start="45:26" pos:end="45:27">-&gt;</operator><name pos:start="45:28" pos:end="45:35">bit_rate</name></name> <operator pos:start="45:37" pos:end="45:37">+</operator> <name pos:start="45:39" pos:end="45:56"><name pos:start="45:39" pos:end="45:43">avctx</name><operator pos:start="45:44" pos:end="45:45">-&gt;</operator><name pos:start="45:46" pos:end="45:56">sample_rate</name></name><operator pos:start="45:57" pos:end="45:57">/</operator><literal type="number" pos:start="45:58" pos:end="45:58">2</literal><operator pos:start="45:59" pos:end="45:59">)</operator> <operator pos:start="45:61" pos:end="45:61">/</operator> <name pos:start="45:63" pos:end="45:80"><name pos:start="45:63" pos:end="45:67">avctx</name><operator pos:start="45:68" pos:end="45:69">-&gt;</operator><name pos:start="45:70" pos:end="45:80">sample_rate</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="53:5"><if pos:start="47:5" pos:end="53:5">if <condition pos:start="47:8" pos:end="47:45">(<expr pos:start="47:9" pos:end="47:44"><name pos:start="47:9" pos:end="47:20"><name pos:start="47:9" pos:end="47:9">c</name><operator pos:start="47:10" pos:end="47:11">-&gt;</operator><name pos:start="47:12" pos:end="47:20">code_size</name></name> <operator pos:start="47:22" pos:end="47:22">&lt;</operator> <literal type="number" pos:start="47:24" pos:end="47:24">2</literal> <operator pos:start="47:26" pos:end="47:27">||</operator> <name pos:start="47:29" pos:end="47:40"><name pos:start="47:29" pos:end="47:29">c</name><operator pos:start="47:30" pos:end="47:31">-&gt;</operator><name pos:start="47:32" pos:end="47:40">code_size</name></name> <operator pos:start="47:42" pos:end="47:42">&gt;</operator> <literal type="number" pos:start="47:44" pos:end="47:44">5</literal></expr>)</condition> <block pos:start="47:47" pos:end="53:5">{<block_content pos:start="49:9" pos:end="51:31">

        <expr_stmt pos:start="49:9" pos:end="49:81"><expr pos:start="49:9" pos:end="49:80"><call pos:start="49:9" pos:end="49:80"><name pos:start="49:9" pos:end="49:14">av_log</name><argument_list pos:start="49:15" pos:end="49:80">(<argument pos:start="49:16" pos:end="49:20"><expr pos:start="49:16" pos:end="49:20"><name pos:start="49:16" pos:end="49:20">avctx</name></expr></argument>, <argument pos:start="49:23" pos:end="49:34"><expr pos:start="49:23" pos:end="49:34"><name pos:start="49:23" pos:end="49:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="49:37" pos:end="49:65"><expr pos:start="49:37" pos:end="49:65"><literal type="string" pos:start="49:37" pos:end="49:65">"Invalid number of bits %d\n"</literal></expr></argument>, <argument pos:start="49:68" pos:end="49:79"><expr pos:start="49:68" pos:end="49:79"><name pos:start="49:68" pos:end="49:79"><name pos:start="49:68" pos:end="49:68">c</name><operator pos:start="49:69" pos:end="49:70">-&gt;</operator><name pos:start="49:71" pos:end="49:79">code_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="51:9" pos:end="51:31">return <expr pos:start="51:16" pos:end="51:30"><call pos:start="51:16" pos:end="51:30"><name pos:start="51:16" pos:end="51:22">AVERROR</name><argument_list pos:start="51:23" pos:end="51:30">(<argument pos:start="51:24" pos:end="51:29"><expr pos:start="51:24" pos:end="51:29"><name pos:start="51:24" pos:end="51:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:48"><expr pos:start="55:5" pos:end="55:47"><name pos:start="55:5" pos:end="55:32"><name pos:start="55:5" pos:end="55:9">avctx</name><operator pos:start="55:10" pos:end="55:11">-&gt;</operator><name pos:start="55:12" pos:end="55:32">bits_per_coded_sample</name></name> <operator pos:start="55:34" pos:end="55:34">=</operator> <name pos:start="55:36" pos:end="55:47"><name pos:start="55:36" pos:end="55:36">c</name><operator pos:start="55:37" pos:end="55:38">-&gt;</operator><name pos:start="55:39" pos:end="55:47">code_size</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:36"><expr pos:start="59:5" pos:end="59:35"><call pos:start="59:5" pos:end="59:35"><name pos:start="59:5" pos:end="59:14">g726_reset</name><argument_list pos:start="59:15" pos:end="59:35">(<argument pos:start="59:16" pos:end="59:16"><expr pos:start="59:16" pos:end="59:16"><name pos:start="59:16" pos:end="59:16">c</name></expr></argument>, <argument pos:start="59:19" pos:end="59:34"><expr pos:start="59:19" pos:end="59:34"><name pos:start="59:19" pos:end="59:30"><name pos:start="59:19" pos:end="59:19">c</name><operator pos:start="59:20" pos:end="59:21">-&gt;</operator><name pos:start="59:22" pos:end="59:30">code_size</name></name> <operator pos:start="59:32" pos:end="59:32">-</operator> <literal type="number" pos:start="59:34" pos:end="59:34">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:47"><expr pos:start="63:5" pos:end="63:46"><name pos:start="63:5" pos:end="63:22"><name pos:start="63:5" pos:end="63:9">avctx</name><operator pos:start="63:10" pos:end="63:11">-&gt;</operator><name pos:start="63:12" pos:end="63:22">coded_frame</name></name> <operator pos:start="63:24" pos:end="63:24">=</operator> <call pos:start="63:26" pos:end="63:46"><name pos:start="63:26" pos:end="63:44">avcodec_alloc_frame</name><argument_list pos:start="63:45" pos:end="63:46">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="65:5" pos:end="67:31"><if pos:start="65:5" pos:end="67:31">if <condition pos:start="65:8" pos:end="65:28">(<expr pos:start="65:9" pos:end="65:27"><operator pos:start="65:9" pos:end="65:9">!</operator><name pos:start="65:10" pos:end="65:27"><name pos:start="65:10" pos:end="65:14">avctx</name><operator pos:start="65:15" pos:end="65:16">-&gt;</operator><name pos:start="65:17" pos:end="65:27">coded_frame</name></name></expr>)</condition><block type="pseudo" pos:start="67:9" pos:end="67:31"><block_content pos:start="67:9" pos:end="67:31">

        <return pos:start="67:9" pos:end="67:31">return <expr pos:start="67:16" pos:end="67:30"><call pos:start="67:16" pos:end="67:30"><name pos:start="67:16" pos:end="67:22">AVERROR</name><argument_list pos:start="67:23" pos:end="67:30">(<argument pos:start="67:24" pos:end="67:29"><expr pos:start="67:24" pos:end="67:29"><name pos:start="67:24" pos:end="67:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:38"><expr pos:start="69:5" pos:end="69:37"><name pos:start="69:5" pos:end="69:33"><name pos:start="69:5" pos:end="69:9">avctx</name><operator pos:start="69:10" pos:end="69:11">-&gt;</operator><name pos:start="69:12" pos:end="69:22">coded_frame</name><operator pos:start="69:23" pos:end="69:24">-&gt;</operator><name pos:start="69:25" pos:end="69:33">key_frame</name></name> <operator pos:start="69:35" pos:end="69:35">=</operator> <literal type="number" pos:start="69:37" pos:end="69:37">1</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="73:5" pos:end="75:34">/* select a frame size that will end on a byte boundary and have a size of

       approximately 1024 bytes */</comment>

    <expr_stmt pos:start="77:5" pos:end="77:78"><expr pos:start="77:5" pos:end="77:77"><name pos:start="77:5" pos:end="77:21"><name pos:start="77:5" pos:end="77:9">avctx</name><operator pos:start="77:10" pos:end="77:11">-&gt;</operator><name pos:start="77:12" pos:end="77:21">frame_size</name></name> <operator pos:start="77:23" pos:end="77:23">=</operator> <operator pos:start="77:25" pos:end="77:25">(</operator><operator pos:start="77:26" pos:end="77:26">(</operator><name pos:start="77:27" pos:end="77:31"><name pos:start="77:27" pos:end="77:29">int</name><index pos:start="77:30" pos:end="77:31">[]</index></name><operator pos:start="77:32" pos:end="77:32">)</operator><block pos:start="77:33" pos:end="77:58">{ <expr pos:start="77:35" pos:end="77:38"><literal type="number" pos:start="77:35" pos:end="77:38">4096</literal></expr>, <expr pos:start="77:41" pos:end="77:44"><literal type="number" pos:start="77:41" pos:end="77:44">2736</literal></expr>, <expr pos:start="77:47" pos:end="77:50"><literal type="number" pos:start="77:47" pos:end="77:50">2048</literal></expr>, <expr pos:start="77:53" pos:end="77:56"><literal type="number" pos:start="77:53" pos:end="77:56">1640</literal></expr> }</block><operator pos:start="77:59" pos:end="77:59">)</operator><index pos:start="77:60" pos:end="77:77">[<expr pos:start="77:61" pos:end="77:76"><name pos:start="77:61" pos:end="77:72"><name pos:start="77:61" pos:end="77:61">c</name><operator pos:start="77:62" pos:end="77:63">-&gt;</operator><name pos:start="77:64" pos:end="77:72">code_size</name></name> <operator pos:start="77:74" pos:end="77:74">-</operator> <literal type="number" pos:start="77:76" pos:end="77:76">2</literal></expr>]</index></expr>;</expr_stmt>



    <return pos:start="81:5" pos:end="81:13">return <expr pos:start="81:12" pos:end="81:12"><literal type="number" pos:start="81:12" pos:end="81:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
