<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14989.c" pos:tabs="8"><function pos:start="1:1" pos:end="389:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">hls_read_header</name><parameter_list pos:start="1:27" pos:end="1:46">(<parameter pos:start="1:28" pos:end="1:45"><decl pos:start="1:28" pos:end="1:45"><type pos:start="1:28" pos:end="1:44"><name pos:start="1:28" pos:end="1:42">AVFormatContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="389:1">{<block_content pos:start="5:5" pos:end="387:15">

    <decl_stmt pos:start="5:5" pos:end="5:63"><decl pos:start="5:5" pos:end="5:62"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:8">void</name> <modifier pos:start="5:10" pos:end="5:10">*</modifier></type><name pos:start="5:11" pos:end="5:11">u</name> <init pos:start="5:13" pos:end="5:62">= <expr pos:start="5:15" pos:end="5:62"><ternary pos:start="5:15" pos:end="5:62"><condition pos:start="5:15" pos:end="5:49"><expr pos:start="5:15" pos:end="5:47"><operator pos:start="5:15" pos:end="5:15">(</operator><name pos:start="5:16" pos:end="5:23"><name pos:start="5:16" pos:end="5:16">s</name><operator pos:start="5:17" pos:end="5:18">-&gt;</operator><name pos:start="5:19" pos:end="5:23">flags</name></name> <operator pos:start="5:25" pos:end="5:25">&amp;</operator> <name pos:start="5:27" pos:end="5:46">AVFMT_FLAG_CUSTOM_IO</name><operator pos:start="5:47" pos:end="5:47">)</operator></expr> ?</condition><then pos:start="5:51" pos:end="5:54"> <expr pos:start="5:51" pos:end="5:54"><name pos:start="5:51" pos:end="5:54">NULL</name></expr> </then><else pos:start="5:56" pos:end="5:62">: <expr pos:start="5:58" pos:end="5:62"><name pos:start="5:58" pos:end="5:62"><name pos:start="5:58" pos:end="5:58">s</name><operator pos:start="5:59" pos:end="5:60">-&gt;</operator><name pos:start="5:61" pos:end="5:62">pb</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">HLSContext</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:17">c</name> <init pos:start="7:19" pos:end="7:32">= <expr pos:start="7:21" pos:end="7:32"><name pos:start="7:21" pos:end="7:32"><name pos:start="7:21" pos:end="7:21">s</name><operator pos:start="7:22" pos:end="7:23">-&gt;</operator><name pos:start="7:24" pos:end="7:32">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name> <init pos:start="9:13" pos:end="9:15">= <expr pos:start="9:15" pos:end="9:15"><literal type="number" pos:start="9:15" pos:end="9:15">0</literal></expr></init></decl>, <decl pos:start="9:18" pos:end="9:18"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:18" pos:end="9:18">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:26">highest_cur_seq_no</name> <init pos:start="11:28" pos:end="11:30">= <expr pos:start="11:30" pos:end="11:30"><literal type="number" pos:start="11:30" pos:end="11:30">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:30"><expr pos:start="15:5" pos:end="15:29"><name pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:5">c</name><operator pos:start="15:6" pos:end="15:7">-&gt;</operator><name pos:start="15:8" pos:end="15:10">ctx</name></name>                <operator pos:start="15:27" pos:end="15:27">=</operator> <name pos:start="15:29" pos:end="15:29">s</name></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:51"><expr pos:start="17:5" pos:end="17:50"><name pos:start="17:5" pos:end="17:25"><name pos:start="17:5" pos:end="17:5">c</name><operator pos:start="17:6" pos:end="17:7">-&gt;</operator><name pos:start="17:8" pos:end="17:25">interrupt_callback</name></name> <operator pos:start="17:27" pos:end="17:27">=</operator> <operator pos:start="17:29" pos:end="17:29">&amp;</operator><name pos:start="17:30" pos:end="17:50"><name pos:start="17:30" pos:end="17:30">s</name><operator pos:start="17:31" pos:end="17:32">-&gt;</operator><name pos:start="17:33" pos:end="17:50">interrupt_callback</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:56"><expr pos:start="19:5" pos:end="19:55"><name pos:start="19:5" pos:end="19:28"><name pos:start="19:5" pos:end="19:5">c</name><operator pos:start="19:6" pos:end="19:7">-&gt;</operator><name pos:start="19:8" pos:end="19:28">strict_std_compliance</name></name> <operator pos:start="19:30" pos:end="19:30">=</operator> <name pos:start="19:32" pos:end="19:55"><name pos:start="19:32" pos:end="19:32">s</name><operator pos:start="19:33" pos:end="19:34">-&gt;</operator><name pos:start="19:35" pos:end="19:55">strict_std_compliance</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:24"><expr pos:start="23:5" pos:end="23:23"><name pos:start="23:5" pos:end="23:19"><name pos:start="23:5" pos:end="23:5">c</name><operator pos:start="23:6" pos:end="23:7">-&gt;</operator><name pos:start="23:8" pos:end="23:19">first_packet</name></name> <operator pos:start="23:21" pos:end="23:21">=</operator> <literal type="number" pos:start="23:23" pos:end="23:23">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:40"><expr pos:start="25:5" pos:end="25:39"><name pos:start="25:5" pos:end="25:22"><name pos:start="25:5" pos:end="25:5">c</name><operator pos:start="25:6" pos:end="25:7">-&gt;</operator><name pos:start="25:8" pos:end="25:22">first_timestamp</name></name> <operator pos:start="25:24" pos:end="25:24">=</operator> <name pos:start="25:26" pos:end="25:39">AV_NOPTS_VALUE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:38"><expr pos:start="27:5" pos:end="27:37"><name pos:start="27:5" pos:end="27:20"><name pos:start="27:5" pos:end="27:5">c</name><operator pos:start="27:6" pos:end="27:7">-&gt;</operator><name pos:start="27:8" pos:end="27:20">cur_timestamp</name></name> <operator pos:start="27:22" pos:end="27:22">=</operator> <name pos:start="27:24" pos:end="27:37">AV_NOPTS_VALUE</name></expr>;</expr_stmt>



    <if_stmt pos:start="31:5" pos:end="55:5"><if pos:start="31:5" pos:end="55:5">if <condition pos:start="31:8" pos:end="31:10">(<expr pos:start="31:9" pos:end="31:9"><name pos:start="31:9" pos:end="31:9">u</name></expr>)</condition> <block pos:start="31:12" pos:end="55:5">{<block_content pos:start="35:9" pos:end="53:56">

        <comment type="line" pos:start="33:9" pos:end="33:80">// get the previous user agent &amp; set back to null if string size is zero</comment>

        <expr_stmt pos:start="35:9" pos:end="35:56"><expr pos:start="35:9" pos:end="35:55"><call pos:start="35:9" pos:end="35:55"><name pos:start="35:9" pos:end="35:22">update_options</name><argument_list pos:start="35:23" pos:end="35:55">(<argument pos:start="35:24" pos:end="35:37"><expr pos:start="35:24" pos:end="35:37"><operator pos:start="35:24" pos:end="35:24">&amp;</operator><name pos:start="35:25" pos:end="35:37"><name pos:start="35:25" pos:end="35:25">c</name><operator pos:start="35:26" pos:end="35:27">-&gt;</operator><name pos:start="35:28" pos:end="35:37">user_agent</name></name></expr></argument>, <argument pos:start="35:40" pos:end="35:51"><expr pos:start="35:40" pos:end="35:51"><literal type="string" pos:start="35:40" pos:end="35:51">"user-agent"</literal></expr></argument>, <argument pos:start="35:54" pos:end="35:54"><expr pos:start="35:54" pos:end="35:54"><name pos:start="35:54" pos:end="35:54">u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="line" pos:start="39:9" pos:end="39:77">// get the previous cookies &amp; set back to null if string size is zero</comment>

        <expr_stmt pos:start="41:9" pos:end="41:50"><expr pos:start="41:9" pos:end="41:49"><call pos:start="41:9" pos:end="41:49"><name pos:start="41:9" pos:end="41:22">update_options</name><argument_list pos:start="41:23" pos:end="41:49">(<argument pos:start="41:24" pos:end="41:34"><expr pos:start="41:24" pos:end="41:34"><operator pos:start="41:24" pos:end="41:24">&amp;</operator><name pos:start="41:25" pos:end="41:34"><name pos:start="41:25" pos:end="41:25">c</name><operator pos:start="41:26" pos:end="41:27">-&gt;</operator><name pos:start="41:28" pos:end="41:34">cookies</name></name></expr></argument>, <argument pos:start="41:37" pos:end="41:45"><expr pos:start="41:37" pos:end="41:45"><literal type="string" pos:start="41:37" pos:end="41:45">"cookies"</literal></expr></argument>, <argument pos:start="41:48" pos:end="41:48"><expr pos:start="41:48" pos:end="41:48"><name pos:start="41:48" pos:end="41:48">u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="line" pos:start="45:9" pos:end="45:77">// get the previous headers &amp; set back to null if string size is zero</comment>

        <expr_stmt pos:start="47:9" pos:end="47:50"><expr pos:start="47:9" pos:end="47:49"><call pos:start="47:9" pos:end="47:49"><name pos:start="47:9" pos:end="47:22">update_options</name><argument_list pos:start="47:23" pos:end="47:49">(<argument pos:start="47:24" pos:end="47:34"><expr pos:start="47:24" pos:end="47:34"><operator pos:start="47:24" pos:end="47:24">&amp;</operator><name pos:start="47:25" pos:end="47:34"><name pos:start="47:25" pos:end="47:25">c</name><operator pos:start="47:26" pos:end="47:27">-&gt;</operator><name pos:start="47:28" pos:end="47:34">headers</name></name></expr></argument>, <argument pos:start="47:37" pos:end="47:45"><expr pos:start="47:37" pos:end="47:45"><literal type="string" pos:start="47:37" pos:end="47:45">"headers"</literal></expr></argument>, <argument pos:start="47:48" pos:end="47:48"><expr pos:start="47:48" pos:end="47:48"><name pos:start="47:48" pos:end="47:48">u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="line" pos:start="51:9" pos:end="51:80">// get the previous http proxt &amp; set back to null if string size is zero</comment>

        <expr_stmt pos:start="53:9" pos:end="53:56"><expr pos:start="53:9" pos:end="53:55"><call pos:start="53:9" pos:end="53:55"><name pos:start="53:9" pos:end="53:22">update_options</name><argument_list pos:start="53:23" pos:end="53:55">(<argument pos:start="53:24" pos:end="53:37"><expr pos:start="53:24" pos:end="53:37"><operator pos:start="53:24" pos:end="53:24">&amp;</operator><name pos:start="53:25" pos:end="53:37"><name pos:start="53:25" pos:end="53:25">c</name><operator pos:start="53:26" pos:end="53:27">-&gt;</operator><name pos:start="53:28" pos:end="53:37">http_proxy</name></name></expr></argument>, <argument pos:start="53:40" pos:end="53:51"><expr pos:start="53:40" pos:end="53:51"><literal type="string" pos:start="53:40" pos:end="53:51">"http_proxy"</literal></expr></argument>, <argument pos:start="53:54" pos:end="53:54"><expr pos:start="53:54" pos:end="53:54"><name pos:start="53:54" pos:end="53:54">u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="59:5" pos:end="61:18"><if pos:start="59:5" pos:end="61:18">if <condition pos:start="59:8" pos:end="59:64">(<expr pos:start="59:9" pos:end="59:63"><operator pos:start="59:9" pos:end="59:9">(</operator><name pos:start="59:10" pos:end="59:12">ret</name> <operator pos:start="59:14" pos:end="59:14">=</operator> <call pos:start="59:16" pos:end="59:58"><name pos:start="59:16" pos:end="59:29">parse_playlist</name><argument_list pos:start="59:30" pos:end="59:58">(<argument pos:start="59:31" pos:end="59:31"><expr pos:start="59:31" pos:end="59:31"><name pos:start="59:31" pos:end="59:31">c</name></expr></argument>, <argument pos:start="59:34" pos:end="59:44"><expr pos:start="59:34" pos:end="59:44"><name pos:start="59:34" pos:end="59:44"><name pos:start="59:34" pos:end="59:34">s</name><operator pos:start="59:35" pos:end="59:36">-&gt;</operator><name pos:start="59:37" pos:end="59:44">filename</name></name></expr></argument>, <argument pos:start="59:47" pos:end="59:50"><expr pos:start="59:47" pos:end="59:50"><name pos:start="59:47" pos:end="59:50">NULL</name></expr></argument>, <argument pos:start="59:53" pos:end="59:57"><expr pos:start="59:53" pos:end="59:57"><name pos:start="59:53" pos:end="59:57"><name pos:start="59:53" pos:end="59:53">s</name><operator pos:start="59:54" pos:end="59:55">-&gt;</operator><name pos:start="59:56" pos:end="59:57">pb</name></name></expr></argument>)</argument_list></call><operator pos:start="59:59" pos:end="59:59">)</operator> <operator pos:start="59:61" pos:end="59:61">&lt;</operator> <literal type="number" pos:start="59:63" pos:end="59:63">0</literal></expr>)</condition><block type="pseudo" pos:start="61:9" pos:end="61:18"><block_content pos:start="61:9" pos:end="61:18">

        <goto pos:start="61:9" pos:end="61:18">goto <name pos:start="61:14" pos:end="61:17">fail</name>;</goto></block_content></block></if></if_stmt>



    <if_stmt pos:start="65:5" pos:end="67:18"><if pos:start="65:5" pos:end="67:18">if <condition pos:start="65:8" pos:end="65:41">(<expr pos:start="65:9" pos:end="65:40"><operator pos:start="65:9" pos:end="65:9">(</operator><name pos:start="65:10" pos:end="65:12">ret</name> <operator pos:start="65:14" pos:end="65:14">=</operator> <call pos:start="65:16" pos:end="65:35"><name pos:start="65:16" pos:end="65:32">save_avio_options</name><argument_list pos:start="65:33" pos:end="65:35">(<argument pos:start="65:34" pos:end="65:34"><expr pos:start="65:34" pos:end="65:34"><name pos:start="65:34" pos:end="65:34">s</name></expr></argument>)</argument_list></call><operator pos:start="65:36" pos:end="65:36">)</operator> <operator pos:start="65:38" pos:end="65:38">&lt;</operator> <literal type="number" pos:start="65:40" pos:end="65:40">0</literal></expr>)</condition><block type="pseudo" pos:start="67:9" pos:end="67:18"><block_content pos:start="67:9" pos:end="67:18">

        <goto pos:start="67:9" pos:end="67:18">goto <name pos:start="67:14" pos:end="67:17">fail</name>;</goto></block_content></block></if></if_stmt>



    <comment type="block" pos:start="71:5" pos:end="71:65">/* Some HLS servers don't like being sent the range header */</comment>

    <expr_stmt pos:start="73:5" pos:end="73:51"><expr pos:start="73:5" pos:end="73:50"><call pos:start="73:5" pos:end="73:50"><name pos:start="73:5" pos:end="73:15">av_dict_set</name><argument_list pos:start="73:16" pos:end="73:50">(<argument pos:start="73:17" pos:end="73:29"><expr pos:start="73:17" pos:end="73:29"><operator pos:start="73:17" pos:end="73:17">&amp;</operator><name pos:start="73:18" pos:end="73:29"><name pos:start="73:18" pos:end="73:18">c</name><operator pos:start="73:19" pos:end="73:20">-&gt;</operator><name pos:start="73:21" pos:end="73:29">avio_opts</name></name></expr></argument>, <argument pos:start="73:32" pos:end="73:41"><expr pos:start="73:32" pos:end="73:41"><literal type="string" pos:start="73:32" pos:end="73:41">"seekable"</literal></expr></argument>, <argument pos:start="73:44" pos:end="73:46"><expr pos:start="73:44" pos:end="73:46"><literal type="string" pos:start="73:44" pos:end="73:46">"0"</literal></expr></argument>, <argument pos:start="73:49" pos:end="73:49"><expr pos:start="73:49" pos:end="73:49"><literal type="number" pos:start="73:49" pos:end="73:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="77:5" pos:end="85:5"><if pos:start="77:5" pos:end="85:5">if <condition pos:start="77:8" pos:end="77:27">(<expr pos:start="77:9" pos:end="77:26"><name pos:start="77:9" pos:end="77:21"><name pos:start="77:9" pos:end="77:9">c</name><operator pos:start="77:10" pos:end="77:11">-&gt;</operator><name pos:start="77:12" pos:end="77:21">n_variants</name></name> <operator pos:start="77:23" pos:end="77:24">==</operator> <literal type="number" pos:start="77:26" pos:end="77:26">0</literal></expr>)</condition> <block pos:start="77:29" pos:end="85:5">{<block_content pos:start="79:9" pos:end="83:18">

        <expr_stmt pos:start="79:9" pos:end="79:57"><expr pos:start="79:9" pos:end="79:56"><call pos:start="79:9" pos:end="79:56"><name pos:start="79:9" pos:end="79:14">av_log</name><argument_list pos:start="79:15" pos:end="79:56">(<argument pos:start="79:16" pos:end="79:19"><expr pos:start="79:16" pos:end="79:19"><name pos:start="79:16" pos:end="79:19">NULL</name></expr></argument>, <argument pos:start="79:22" pos:end="79:35"><expr pos:start="79:22" pos:end="79:35"><name pos:start="79:22" pos:end="79:35">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="79:38" pos:end="79:55"><expr pos:start="79:38" pos:end="79:55"><literal type="string" pos:start="79:38" pos:end="79:55">"Empty playlist\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:26"><expr pos:start="81:9" pos:end="81:25"><name pos:start="81:9" pos:end="81:11">ret</name> <operator pos:start="81:13" pos:end="81:13">=</operator> <name pos:start="81:15" pos:end="81:25">AVERROR_EOF</name></expr>;</expr_stmt>

        <goto pos:start="83:9" pos:end="83:18">goto <name pos:start="83:14" pos:end="83:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="87:5" pos:end="89:41">/* If the playlist only contained playlists (Master Playlist),

     * parse each individual playlist. */</comment>

    <if_stmt pos:start="91:5" pos:end="103:5"><if pos:start="91:5" pos:end="103:5">if <condition pos:start="91:8" pos:end="91:63">(<expr pos:start="91:9" pos:end="91:62"><name pos:start="91:9" pos:end="91:22"><name pos:start="91:9" pos:end="91:9">c</name><operator pos:start="91:10" pos:end="91:11">-&gt;</operator><name pos:start="91:12" pos:end="91:22">n_playlists</name></name> <operator pos:start="91:24" pos:end="91:24">&gt;</operator> <literal type="number" pos:start="91:26" pos:end="91:26">1</literal> <operator pos:start="91:28" pos:end="91:29">||</operator> <name pos:start="91:31" pos:end="91:45"><name pos:start="91:31" pos:end="91:31">c</name><operator pos:start="91:32" pos:end="91:33">-&gt;</operator><name pos:start="91:34" pos:end="91:42">playlists</name><index pos:start="91:43" pos:end="91:45">[<expr pos:start="91:44" pos:end="91:44"><literal type="number" pos:start="91:44" pos:end="91:44">0</literal></expr>]</index></name><operator pos:start="91:46" pos:end="91:47">-&gt;</operator><name pos:start="91:48" pos:end="91:57">n_segments</name> <operator pos:start="91:59" pos:end="91:60">==</operator> <literal type="number" pos:start="91:62" pos:end="91:62">0</literal></expr>)</condition> <block pos:start="91:65" pos:end="103:5">{<block_content pos:start="93:9" pos:end="101:9">

        <for pos:start="93:9" pos:end="101:9">for <control pos:start="93:13" pos:end="93:44">(<init pos:start="93:14" pos:end="93:19"><expr pos:start="93:14" pos:end="93:18"><name pos:start="93:14" pos:end="93:14">i</name> <operator pos:start="93:16" pos:end="93:16">=</operator> <literal type="number" pos:start="93:18" pos:end="93:18">0</literal></expr>;</init> <condition pos:start="93:21" pos:end="93:39"><expr pos:start="93:21" pos:end="93:38"><name pos:start="93:21" pos:end="93:21">i</name> <operator pos:start="93:23" pos:end="93:23">&lt;</operator> <name pos:start="93:25" pos:end="93:38"><name pos:start="93:25" pos:end="93:25">c</name><operator pos:start="93:26" pos:end="93:27">-&gt;</operator><name pos:start="93:28" pos:end="93:38">n_playlists</name></name></expr>;</condition> <incr pos:start="93:41" pos:end="93:43"><expr pos:start="93:41" pos:end="93:43"><name pos:start="93:41" pos:end="93:41">i</name><operator pos:start="93:42" pos:end="93:43">++</operator></expr></incr>)</control> <block pos:start="93:46" pos:end="101:9">{<block_content pos:start="95:13" pos:end="99:26">

            <decl_stmt pos:start="95:13" pos:end="95:51"><decl pos:start="95:13" pos:end="95:50"><type pos:start="95:13" pos:end="95:29"><name pos:start="95:13" pos:end="95:27"><name pos:start="95:13" pos:end="95:18">struct</name> <name pos:start="95:20" pos:end="95:27">playlist</name></name> <modifier pos:start="95:29" pos:end="95:29">*</modifier></type><name pos:start="95:30" pos:end="95:32">pls</name> <init pos:start="95:34" pos:end="95:50">= <expr pos:start="95:36" pos:end="95:50"><name pos:start="95:36" pos:end="95:50"><name pos:start="95:36" pos:end="95:36">c</name><operator pos:start="95:37" pos:end="95:38">-&gt;</operator><name pos:start="95:39" pos:end="95:47">playlists</name><index pos:start="95:48" pos:end="95:50">[<expr pos:start="95:49" pos:end="95:49"><name pos:start="95:49" pos:end="95:49">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="97:13" pos:end="99:26"><if pos:start="97:13" pos:end="99:26">if <condition pos:start="97:16" pos:end="97:67">(<expr pos:start="97:17" pos:end="97:66"><operator pos:start="97:17" pos:end="97:17">(</operator><name pos:start="97:18" pos:end="97:20">ret</name> <operator pos:start="97:22" pos:end="97:22">=</operator> <call pos:start="97:24" pos:end="97:61"><name pos:start="97:24" pos:end="97:37">parse_playlist</name><argument_list pos:start="97:38" pos:end="97:61">(<argument pos:start="97:39" pos:end="97:39"><expr pos:start="97:39" pos:end="97:39"><name pos:start="97:39" pos:end="97:39">c</name></expr></argument>, <argument pos:start="97:42" pos:end="97:49"><expr pos:start="97:42" pos:end="97:49"><name pos:start="97:42" pos:end="97:49"><name pos:start="97:42" pos:end="97:44">pls</name><operator pos:start="97:45" pos:end="97:46">-&gt;</operator><name pos:start="97:47" pos:end="97:49">url</name></name></expr></argument>, <argument pos:start="97:52" pos:end="97:54"><expr pos:start="97:52" pos:end="97:54"><name pos:start="97:52" pos:end="97:54">pls</name></expr></argument>, <argument pos:start="97:57" pos:end="97:60"><expr pos:start="97:57" pos:end="97:60"><name pos:start="97:57" pos:end="97:60">NULL</name></expr></argument>)</argument_list></call><operator pos:start="97:62" pos:end="97:62">)</operator> <operator pos:start="97:64" pos:end="97:64">&lt;</operator> <literal type="number" pos:start="97:66" pos:end="97:66">0</literal></expr>)</condition><block type="pseudo" pos:start="99:17" pos:end="99:26"><block_content pos:start="99:17" pos:end="99:26">

                <goto pos:start="99:17" pos:end="99:26">goto <name pos:start="99:22" pos:end="99:25">fail</name>;</goto></block_content></block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="107:5" pos:end="115:5"><if pos:start="107:5" pos:end="115:5">if <condition pos:start="107:8" pos:end="107:54">(<expr pos:start="107:9" pos:end="107:53"><name pos:start="107:9" pos:end="107:22"><name pos:start="107:9" pos:end="107:9">c</name><operator pos:start="107:10" pos:end="107:11">-&gt;</operator><name pos:start="107:12" pos:end="107:19">variants</name><index pos:start="107:20" pos:end="107:22">[<expr pos:start="107:21" pos:end="107:21"><literal type="number" pos:start="107:21" pos:end="107:21">0</literal></expr>]</index></name><operator pos:start="107:23" pos:end="107:24">-&gt;</operator><name pos:start="107:25" pos:end="107:36"><name pos:start="107:25" pos:end="107:33">playlists</name><index pos:start="107:34" pos:end="107:36">[<expr pos:start="107:35" pos:end="107:35"><literal type="number" pos:start="107:35" pos:end="107:35">0</literal></expr>]</index></name><operator pos:start="107:37" pos:end="107:38">-&gt;</operator><name pos:start="107:39" pos:end="107:48">n_segments</name> <operator pos:start="107:50" pos:end="107:51">==</operator> <literal type="number" pos:start="107:53" pos:end="107:53">0</literal></expr>)</condition> <block pos:start="107:56" pos:end="115:5">{<block_content pos:start="109:9" pos:end="113:18">

        <expr_stmt pos:start="109:9" pos:end="109:57"><expr pos:start="109:9" pos:end="109:56"><call pos:start="109:9" pos:end="109:56"><name pos:start="109:9" pos:end="109:14">av_log</name><argument_list pos:start="109:15" pos:end="109:56">(<argument pos:start="109:16" pos:end="109:19"><expr pos:start="109:16" pos:end="109:19"><name pos:start="109:16" pos:end="109:19">NULL</name></expr></argument>, <argument pos:start="109:22" pos:end="109:35"><expr pos:start="109:22" pos:end="109:35"><name pos:start="109:22" pos:end="109:35">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="109:38" pos:end="109:55"><expr pos:start="109:38" pos:end="109:55"><literal type="string" pos:start="109:38" pos:end="109:55">"Empty playlist\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:26"><expr pos:start="111:9" pos:end="111:25"><name pos:start="111:9" pos:end="111:11">ret</name> <operator pos:start="111:13" pos:end="111:13">=</operator> <name pos:start="111:15" pos:end="111:25">AVERROR_EOF</name></expr>;</expr_stmt>

        <goto pos:start="113:9" pos:end="113:18">goto <name pos:start="113:14" pos:end="113:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="119:5" pos:end="121:17">/* If this isn't a live stream, calculate the total duration of the

     * stream. */</comment>

    <if_stmt pos:start="123:5" pos:end="133:5"><if pos:start="123:5" pos:end="133:5">if <condition pos:start="123:8" pos:end="123:47">(<expr pos:start="123:9" pos:end="123:46"><name pos:start="123:9" pos:end="123:22"><name pos:start="123:9" pos:end="123:9">c</name><operator pos:start="123:10" pos:end="123:11">-&gt;</operator><name pos:start="123:12" pos:end="123:19">variants</name><index pos:start="123:20" pos:end="123:22">[<expr pos:start="123:21" pos:end="123:21"><literal type="number" pos:start="123:21" pos:end="123:21">0</literal></expr>]</index></name><operator pos:start="123:23" pos:end="123:24">-&gt;</operator><name pos:start="123:25" pos:end="123:36"><name pos:start="123:25" pos:end="123:33">playlists</name><index pos:start="123:34" pos:end="123:36">[<expr pos:start="123:35" pos:end="123:35"><literal type="number" pos:start="123:35" pos:end="123:35">0</literal></expr>]</index></name><operator pos:start="123:37" pos:end="123:38">-&gt;</operator><name pos:start="123:39" pos:end="123:46">finished</name></expr>)</condition> <block pos:start="123:49" pos:end="133:5">{<block_content pos:start="125:9" pos:end="131:31">

        <decl_stmt pos:start="125:9" pos:end="125:29"><decl pos:start="125:9" pos:end="125:28"><type pos:start="125:9" pos:end="125:15"><name pos:start="125:9" pos:end="125:15">int64_t</name></type> <name pos:start="125:17" pos:end="125:24">duration</name> <init pos:start="125:26" pos:end="125:28">= <expr pos:start="125:28" pos:end="125:28"><literal type="number" pos:start="125:28" pos:end="125:28">0</literal></expr></init></decl>;</decl_stmt>

        <for pos:start="127:9" pos:end="129:76">for <control pos:start="127:13" pos:end="127:70">(<init pos:start="127:14" pos:end="127:19"><expr pos:start="127:14" pos:end="127:18"><name pos:start="127:14" pos:end="127:14">i</name> <operator pos:start="127:16" pos:end="127:16">=</operator> <literal type="number" pos:start="127:18" pos:end="127:18">0</literal></expr>;</init> <condition pos:start="127:21" pos:end="127:65"><expr pos:start="127:21" pos:end="127:64"><name pos:start="127:21" pos:end="127:21">i</name> <operator pos:start="127:23" pos:end="127:23">&lt;</operator> <name pos:start="127:25" pos:end="127:38"><name pos:start="127:25" pos:end="127:25">c</name><operator pos:start="127:26" pos:end="127:27">-&gt;</operator><name pos:start="127:28" pos:end="127:35">variants</name><index pos:start="127:36" pos:end="127:38">[<expr pos:start="127:37" pos:end="127:37"><literal type="number" pos:start="127:37" pos:end="127:37">0</literal></expr>]</index></name><operator pos:start="127:39" pos:end="127:40">-&gt;</operator><name pos:start="127:41" pos:end="127:52"><name pos:start="127:41" pos:end="127:49">playlists</name><index pos:start="127:50" pos:end="127:52">[<expr pos:start="127:51" pos:end="127:51"><literal type="number" pos:start="127:51" pos:end="127:51">0</literal></expr>]</index></name><operator pos:start="127:53" pos:end="127:54">-&gt;</operator><name pos:start="127:55" pos:end="127:64">n_segments</name></expr>;</condition> <incr pos:start="127:67" pos:end="127:69"><expr pos:start="127:67" pos:end="127:69"><name pos:start="127:67" pos:end="127:67">i</name><operator pos:start="127:68" pos:end="127:69">++</operator></expr></incr>)</control><block type="pseudo" pos:start="129:13" pos:end="129:76"><block_content pos:start="129:13" pos:end="129:76">

            <expr_stmt pos:start="129:13" pos:end="129:76"><expr pos:start="129:13" pos:end="129:75"><name pos:start="129:13" pos:end="129:20">duration</name> <operator pos:start="129:22" pos:end="129:23">+=</operator> <name pos:start="129:25" pos:end="129:38"><name pos:start="129:25" pos:end="129:25">c</name><operator pos:start="129:26" pos:end="129:27">-&gt;</operator><name pos:start="129:28" pos:end="129:35">variants</name><index pos:start="129:36" pos:end="129:38">[<expr pos:start="129:37" pos:end="129:37"><literal type="number" pos:start="129:37" pos:end="129:37">0</literal></expr>]</index></name><operator pos:start="129:39" pos:end="129:40">-&gt;</operator><name pos:start="129:41" pos:end="129:52"><name pos:start="129:41" pos:end="129:49">playlists</name><index pos:start="129:50" pos:end="129:52">[<expr pos:start="129:51" pos:end="129:51"><literal type="number" pos:start="129:51" pos:end="129:51">0</literal></expr>]</index></name><operator pos:start="129:53" pos:end="129:54">-&gt;</operator><name pos:start="129:55" pos:end="129:65"><name pos:start="129:55" pos:end="129:62">segments</name><index pos:start="129:63" pos:end="129:65">[<expr pos:start="129:64" pos:end="129:64"><name pos:start="129:64" pos:end="129:64">i</name></expr>]</index></name><operator pos:start="129:66" pos:end="129:67">-&gt;</operator><name pos:start="129:68" pos:end="129:75">duration</name></expr>;</expr_stmt></block_content></block></for>

        <expr_stmt pos:start="131:9" pos:end="131:31"><expr pos:start="131:9" pos:end="131:30"><name pos:start="131:9" pos:end="131:19"><name pos:start="131:9" pos:end="131:9">s</name><operator pos:start="131:10" pos:end="131:11">-&gt;</operator><name pos:start="131:12" pos:end="131:19">duration</name></name> <operator pos:start="131:21" pos:end="131:21">=</operator> <name pos:start="131:23" pos:end="131:30">duration</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="137:5" pos:end="137:44">/* Associate renditions with variants */</comment>

    <for pos:start="139:5" pos:end="157:5">for <control pos:start="139:9" pos:end="139:39">(<init pos:start="139:10" pos:end="139:15"><expr pos:start="139:10" pos:end="139:14"><name pos:start="139:10" pos:end="139:10">i</name> <operator pos:start="139:12" pos:end="139:12">=</operator> <literal type="number" pos:start="139:14" pos:end="139:14">0</literal></expr>;</init> <condition pos:start="139:17" pos:end="139:34"><expr pos:start="139:17" pos:end="139:33"><name pos:start="139:17" pos:end="139:17">i</name> <operator pos:start="139:19" pos:end="139:19">&lt;</operator> <name pos:start="139:21" pos:end="139:33"><name pos:start="139:21" pos:end="139:21">c</name><operator pos:start="139:22" pos:end="139:23">-&gt;</operator><name pos:start="139:24" pos:end="139:33">n_variants</name></name></expr>;</condition> <incr pos:start="139:36" pos:end="139:38"><expr pos:start="139:36" pos:end="139:38"><name pos:start="139:36" pos:end="139:36">i</name><operator pos:start="139:37" pos:end="139:38">++</operator></expr></incr>)</control> <block pos:start="139:41" pos:end="157:5">{<block_content pos:start="141:9" pos:end="155:91">

        <decl_stmt pos:start="141:9" pos:end="141:45"><decl pos:start="141:9" pos:end="141:44"><type pos:start="141:9" pos:end="141:24"><name pos:start="141:9" pos:end="141:22"><name pos:start="141:9" pos:end="141:14">struct</name> <name pos:start="141:16" pos:end="141:22">variant</name></name> <modifier pos:start="141:24" pos:end="141:24">*</modifier></type><name pos:start="141:25" pos:end="141:27">var</name> <init pos:start="141:29" pos:end="141:44">= <expr pos:start="141:31" pos:end="141:44"><name pos:start="141:31" pos:end="141:44"><name pos:start="141:31" pos:end="141:31">c</name><operator pos:start="141:32" pos:end="141:33">-&gt;</operator><name pos:start="141:34" pos:end="141:41">variants</name><index pos:start="141:42" pos:end="141:44">[<expr pos:start="141:43" pos:end="141:43"><name pos:start="141:43" pos:end="141:43">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="145:9" pos:end="147:84"><if pos:start="145:9" pos:end="147:84">if <condition pos:start="145:12" pos:end="145:32">(<expr pos:start="145:13" pos:end="145:31"><name pos:start="145:13" pos:end="145:31"><name pos:start="145:13" pos:end="145:15">var</name><operator pos:start="145:16" pos:end="145:17">-&gt;</operator><name pos:start="145:18" pos:end="145:28">audio_group</name><index pos:start="145:29" pos:end="145:31">[<expr pos:start="145:30" pos:end="145:30"><literal type="number" pos:start="145:30" pos:end="145:30">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="147:13" pos:end="147:84"><block_content pos:start="147:13" pos:end="147:84">

            <expr_stmt pos:start="147:13" pos:end="147:84"><expr pos:start="147:13" pos:end="147:83"><call pos:start="147:13" pos:end="147:83"><name pos:start="147:13" pos:end="147:37">add_renditions_to_variant</name><argument_list pos:start="147:38" pos:end="147:83">(<argument pos:start="147:39" pos:end="147:39"><expr pos:start="147:39" pos:end="147:39"><name pos:start="147:39" pos:end="147:39">c</name></expr></argument>, <argument pos:start="147:42" pos:end="147:44"><expr pos:start="147:42" pos:end="147:44"><name pos:start="147:42" pos:end="147:44">var</name></expr></argument>, <argument pos:start="147:47" pos:end="147:64"><expr pos:start="147:47" pos:end="147:64"><name pos:start="147:47" pos:end="147:64">AVMEDIA_TYPE_AUDIO</name></expr></argument>, <argument pos:start="147:67" pos:end="147:82"><expr pos:start="147:67" pos:end="147:82"><name pos:start="147:67" pos:end="147:82"><name pos:start="147:67" pos:end="147:69">var</name><operator pos:start="147:70" pos:end="147:71">-&gt;</operator><name pos:start="147:72" pos:end="147:82">audio_group</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="149:9" pos:end="151:84"><if pos:start="149:9" pos:end="151:84">if <condition pos:start="149:12" pos:end="149:32">(<expr pos:start="149:13" pos:end="149:31"><name pos:start="149:13" pos:end="149:31"><name pos:start="149:13" pos:end="149:15">var</name><operator pos:start="149:16" pos:end="149:17">-&gt;</operator><name pos:start="149:18" pos:end="149:28">video_group</name><index pos:start="149:29" pos:end="149:31">[<expr pos:start="149:30" pos:end="149:30"><literal type="number" pos:start="149:30" pos:end="149:30">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="151:13" pos:end="151:84"><block_content pos:start="151:13" pos:end="151:84">

            <expr_stmt pos:start="151:13" pos:end="151:84"><expr pos:start="151:13" pos:end="151:83"><call pos:start="151:13" pos:end="151:83"><name pos:start="151:13" pos:end="151:37">add_renditions_to_variant</name><argument_list pos:start="151:38" pos:end="151:83">(<argument pos:start="151:39" pos:end="151:39"><expr pos:start="151:39" pos:end="151:39"><name pos:start="151:39" pos:end="151:39">c</name></expr></argument>, <argument pos:start="151:42" pos:end="151:44"><expr pos:start="151:42" pos:end="151:44"><name pos:start="151:42" pos:end="151:44">var</name></expr></argument>, <argument pos:start="151:47" pos:end="151:64"><expr pos:start="151:47" pos:end="151:64"><name pos:start="151:47" pos:end="151:64">AVMEDIA_TYPE_VIDEO</name></expr></argument>, <argument pos:start="151:67" pos:end="151:82"><expr pos:start="151:67" pos:end="151:82"><name pos:start="151:67" pos:end="151:82"><name pos:start="151:67" pos:end="151:69">var</name><operator pos:start="151:70" pos:end="151:71">-&gt;</operator><name pos:start="151:72" pos:end="151:82">video_group</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="153:9" pos:end="155:91"><if pos:start="153:9" pos:end="155:91">if <condition pos:start="153:12" pos:end="153:36">(<expr pos:start="153:13" pos:end="153:35"><name pos:start="153:13" pos:end="153:35"><name pos:start="153:13" pos:end="153:15">var</name><operator pos:start="153:16" pos:end="153:17">-&gt;</operator><name pos:start="153:18" pos:end="153:32">subtitles_group</name><index pos:start="153:33" pos:end="153:35">[<expr pos:start="153:34" pos:end="153:34"><literal type="number" pos:start="153:34" pos:end="153:34">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="155:13" pos:end="155:91"><block_content pos:start="155:13" pos:end="155:91">

            <expr_stmt pos:start="155:13" pos:end="155:91"><expr pos:start="155:13" pos:end="155:90"><call pos:start="155:13" pos:end="155:90"><name pos:start="155:13" pos:end="155:37">add_renditions_to_variant</name><argument_list pos:start="155:38" pos:end="155:90">(<argument pos:start="155:39" pos:end="155:39"><expr pos:start="155:39" pos:end="155:39"><name pos:start="155:39" pos:end="155:39">c</name></expr></argument>, <argument pos:start="155:42" pos:end="155:44"><expr pos:start="155:42" pos:end="155:44"><name pos:start="155:42" pos:end="155:44">var</name></expr></argument>, <argument pos:start="155:47" pos:end="155:67"><expr pos:start="155:47" pos:end="155:67"><name pos:start="155:47" pos:end="155:67">AVMEDIA_TYPE_SUBTITLE</name></expr></argument>, <argument pos:start="155:70" pos:end="155:89"><expr pos:start="155:70" pos:end="155:89"><name pos:start="155:70" pos:end="155:89"><name pos:start="155:70" pos:end="155:72">var</name><operator pos:start="155:73" pos:end="155:74">-&gt;</operator><name pos:start="155:75" pos:end="155:89">subtitles_group</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="161:5" pos:end="161:43">/* Create a program for each variant */</comment>

    <for pos:start="163:5" pos:end="179:5">for <control pos:start="163:9" pos:end="163:39">(<init pos:start="163:10" pos:end="163:15"><expr pos:start="163:10" pos:end="163:14"><name pos:start="163:10" pos:end="163:10">i</name> <operator pos:start="163:12" pos:end="163:12">=</operator> <literal type="number" pos:start="163:14" pos:end="163:14">0</literal></expr>;</init> <condition pos:start="163:17" pos:end="163:34"><expr pos:start="163:17" pos:end="163:33"><name pos:start="163:17" pos:end="163:17">i</name> <operator pos:start="163:19" pos:end="163:19">&lt;</operator> <name pos:start="163:21" pos:end="163:33"><name pos:start="163:21" pos:end="163:21">c</name><operator pos:start="163:22" pos:end="163:23">-&gt;</operator><name pos:start="163:24" pos:end="163:33">n_variants</name></name></expr>;</condition> <incr pos:start="163:36" pos:end="163:38"><expr pos:start="163:36" pos:end="163:38"><name pos:start="163:36" pos:end="163:36">i</name><operator pos:start="163:37" pos:end="163:38">++</operator></expr></incr>)</control> <block pos:start="163:41" pos:end="179:5">{<block_content pos:start="165:9" pos:end="177:80">

        <decl_stmt pos:start="165:9" pos:end="165:43"><decl pos:start="165:9" pos:end="165:42"><type pos:start="165:9" pos:end="165:24"><name pos:start="165:9" pos:end="165:22"><name pos:start="165:9" pos:end="165:14">struct</name> <name pos:start="165:16" pos:end="165:22">variant</name></name> <modifier pos:start="165:24" pos:end="165:24">*</modifier></type><name pos:start="165:25" pos:end="165:25">v</name> <init pos:start="165:27" pos:end="165:42">= <expr pos:start="165:29" pos:end="165:42"><name pos:start="165:29" pos:end="165:42"><name pos:start="165:29" pos:end="165:29">c</name><operator pos:start="165:30" pos:end="165:31">-&gt;</operator><name pos:start="165:32" pos:end="165:39">variants</name><index pos:start="165:40" pos:end="165:42">[<expr pos:start="165:41" pos:end="165:41"><name pos:start="165:41" pos:end="165:41">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="167:9" pos:end="167:27"><decl pos:start="167:9" pos:end="167:26"><type pos:start="167:9" pos:end="167:19"><name pos:start="167:9" pos:end="167:17">AVProgram</name> <modifier pos:start="167:19" pos:end="167:19">*</modifier></type><name pos:start="167:20" pos:end="167:26">program</name></decl>;</decl_stmt>



        <expr_stmt pos:start="171:9" pos:end="171:39"><expr pos:start="171:9" pos:end="171:38"><name pos:start="171:9" pos:end="171:15">program</name> <operator pos:start="171:17" pos:end="171:17">=</operator> <call pos:start="171:19" pos:end="171:38"><name pos:start="171:19" pos:end="171:32">av_new_program</name><argument_list pos:start="171:33" pos:end="171:38">(<argument pos:start="171:34" pos:end="171:34"><expr pos:start="171:34" pos:end="171:34"><name pos:start="171:34" pos:end="171:34">s</name></expr></argument>, <argument pos:start="171:37" pos:end="171:37"><expr pos:start="171:37" pos:end="171:37"><name pos:start="171:37" pos:end="171:37">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="173:9" pos:end="175:22"><if pos:start="173:9" pos:end="175:22">if <condition pos:start="173:12" pos:end="173:21">(<expr pos:start="173:13" pos:end="173:20"><operator pos:start="173:13" pos:end="173:13">!</operator><name pos:start="173:14" pos:end="173:20">program</name></expr>)</condition><block type="pseudo" pos:start="175:13" pos:end="175:22"><block_content pos:start="175:13" pos:end="175:22">

            <goto pos:start="175:13" pos:end="175:22">goto <name pos:start="175:18" pos:end="175:21">fail</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="177:9" pos:end="177:80"><expr pos:start="177:9" pos:end="177:79"><call pos:start="177:9" pos:end="177:79"><name pos:start="177:9" pos:end="177:23">av_dict_set_int</name><argument_list pos:start="177:24" pos:end="177:79">(<argument pos:start="177:25" pos:end="177:42"><expr pos:start="177:25" pos:end="177:42"><operator pos:start="177:25" pos:end="177:25">&amp;</operator><name pos:start="177:26" pos:end="177:42"><name pos:start="177:26" pos:end="177:32">program</name><operator pos:start="177:33" pos:end="177:34">-&gt;</operator><name pos:start="177:35" pos:end="177:42">metadata</name></name></expr></argument>, <argument pos:start="177:45" pos:end="177:61"><expr pos:start="177:45" pos:end="177:61"><literal type="string" pos:start="177:45" pos:end="177:61">"variant_bitrate"</literal></expr></argument>, <argument pos:start="177:64" pos:end="177:75"><expr pos:start="177:64" pos:end="177:75"><name pos:start="177:64" pos:end="177:75"><name pos:start="177:64" pos:end="177:64">v</name><operator pos:start="177:65" pos:end="177:66">-&gt;</operator><name pos:start="177:67" pos:end="177:75">bandwidth</name></name></expr></argument>, <argument pos:start="177:78" pos:end="177:78"><expr pos:start="177:78" pos:end="177:78"><literal type="number" pos:start="177:78" pos:end="177:78">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="183:5" pos:end="183:38">/* Select the starting segments */</comment>

    <for pos:start="185:5" pos:end="201:5">for <control pos:start="185:9" pos:end="185:40">(<init pos:start="185:10" pos:end="185:15"><expr pos:start="185:10" pos:end="185:14"><name pos:start="185:10" pos:end="185:10">i</name> <operator pos:start="185:12" pos:end="185:12">=</operator> <literal type="number" pos:start="185:14" pos:end="185:14">0</literal></expr>;</init> <condition pos:start="185:17" pos:end="185:35"><expr pos:start="185:17" pos:end="185:34"><name pos:start="185:17" pos:end="185:17">i</name> <operator pos:start="185:19" pos:end="185:19">&lt;</operator> <name pos:start="185:21" pos:end="185:34"><name pos:start="185:21" pos:end="185:21">c</name><operator pos:start="185:22" pos:end="185:23">-&gt;</operator><name pos:start="185:24" pos:end="185:34">n_playlists</name></name></expr>;</condition> <incr pos:start="185:37" pos:end="185:39"><expr pos:start="185:37" pos:end="185:39"><name pos:start="185:37" pos:end="185:37">i</name><operator pos:start="185:38" pos:end="185:39">++</operator></expr></incr>)</control> <block pos:start="185:42" pos:end="201:5">{<block_content pos:start="187:9" pos:end="199:72">

        <decl_stmt pos:start="187:9" pos:end="187:47"><decl pos:start="187:9" pos:end="187:46"><type pos:start="187:9" pos:end="187:25"><name pos:start="187:9" pos:end="187:23"><name pos:start="187:9" pos:end="187:14">struct</name> <name pos:start="187:16" pos:end="187:23">playlist</name></name> <modifier pos:start="187:25" pos:end="187:25">*</modifier></type><name pos:start="187:26" pos:end="187:28">pls</name> <init pos:start="187:30" pos:end="187:46">= <expr pos:start="187:32" pos:end="187:46"><name pos:start="187:32" pos:end="187:46"><name pos:start="187:32" pos:end="187:32">c</name><operator pos:start="187:33" pos:end="187:34">-&gt;</operator><name pos:start="187:35" pos:end="187:43">playlists</name><index pos:start="187:44" pos:end="187:46">[<expr pos:start="187:45" pos:end="187:45"><name pos:start="187:45" pos:end="187:45">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="191:9" pos:end="193:21"><if pos:start="191:9" pos:end="193:21">if <condition pos:start="191:12" pos:end="191:33">(<expr pos:start="191:13" pos:end="191:32"><name pos:start="191:13" pos:end="191:27"><name pos:start="191:13" pos:end="191:15">pls</name><operator pos:start="191:16" pos:end="191:17">-&gt;</operator><name pos:start="191:18" pos:end="191:27">n_segments</name></name> <operator pos:start="191:29" pos:end="191:30">==</operator> <literal type="number" pos:start="191:32" pos:end="191:32">0</literal></expr>)</condition><block type="pseudo" pos:start="193:13" pos:end="193:21"><block_content pos:start="193:13" pos:end="193:21">

            <continue pos:start="193:13" pos:end="193:21">continue;</continue></block_content></block></if></if_stmt>



        <expr_stmt pos:start="197:9" pos:end="197:52"><expr pos:start="197:9" pos:end="197:51"><name pos:start="197:9" pos:end="197:23"><name pos:start="197:9" pos:end="197:11">pls</name><operator pos:start="197:12" pos:end="197:13">-&gt;</operator><name pos:start="197:14" pos:end="197:23">cur_seq_no</name></name> <operator pos:start="197:25" pos:end="197:25">=</operator> <call pos:start="197:27" pos:end="197:51"><name pos:start="197:27" pos:end="197:43">select_cur_seq_no</name><argument_list pos:start="197:44" pos:end="197:51">(<argument pos:start="197:45" pos:end="197:45"><expr pos:start="197:45" pos:end="197:45"><name pos:start="197:45" pos:end="197:45">c</name></expr></argument>, <argument pos:start="197:48" pos:end="197:50"><expr pos:start="197:48" pos:end="197:50"><name pos:start="197:48" pos:end="197:50">pls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="199:9" pos:end="199:72"><expr pos:start="199:9" pos:end="199:71"><name pos:start="199:9" pos:end="199:26">highest_cur_seq_no</name> <operator pos:start="199:28" pos:end="199:28">=</operator> <call pos:start="199:30" pos:end="199:71"><name pos:start="199:30" pos:end="199:34">FFMAX</name><argument_list pos:start="199:35" pos:end="199:71">(<argument pos:start="199:36" pos:end="199:53"><expr pos:start="199:36" pos:end="199:53"><name pos:start="199:36" pos:end="199:53">highest_cur_seq_no</name></expr></argument>, <argument pos:start="199:56" pos:end="199:70"><expr pos:start="199:56" pos:end="199:70"><name pos:start="199:56" pos:end="199:70"><name pos:start="199:56" pos:end="199:58">pls</name><operator pos:start="199:59" pos:end="199:60">-&gt;</operator><name pos:start="199:61" pos:end="199:70">cur_seq_no</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="205:5" pos:end="205:44">/* Open the demuxer for each playlist */</comment>

    <for pos:start="207:5" pos:end="373:5">for <control pos:start="207:9" pos:end="207:40">(<init pos:start="207:10" pos:end="207:15"><expr pos:start="207:10" pos:end="207:14"><name pos:start="207:10" pos:end="207:10">i</name> <operator pos:start="207:12" pos:end="207:12">=</operator> <literal type="number" pos:start="207:14" pos:end="207:14">0</literal></expr>;</init> <condition pos:start="207:17" pos:end="207:35"><expr pos:start="207:17" pos:end="207:34"><name pos:start="207:17" pos:end="207:17">i</name> <operator pos:start="207:19" pos:end="207:19">&lt;</operator> <name pos:start="207:21" pos:end="207:34"><name pos:start="207:21" pos:end="207:21">c</name><operator pos:start="207:22" pos:end="207:23">-&gt;</operator><name pos:start="207:24" pos:end="207:34">n_playlists</name></name></expr>;</condition> <incr pos:start="207:37" pos:end="207:39"><expr pos:start="207:37" pos:end="207:39"><name pos:start="207:37" pos:end="207:37">i</name><operator pos:start="207:38" pos:end="207:39">++</operator></expr></incr>)</control> <block pos:start="207:42" pos:end="373:5">{<block_content pos:start="209:9" pos:end="371:68">

        <decl_stmt pos:start="209:9" pos:end="209:47"><decl pos:start="209:9" pos:end="209:46"><type pos:start="209:9" pos:end="209:25"><name pos:start="209:9" pos:end="209:23"><name pos:start="209:9" pos:end="209:14">struct</name> <name pos:start="209:16" pos:end="209:23">playlist</name></name> <modifier pos:start="209:25" pos:end="209:25">*</modifier></type><name pos:start="209:26" pos:end="209:28">pls</name> <init pos:start="209:30" pos:end="209:46">= <expr pos:start="209:32" pos:end="209:46"><name pos:start="209:32" pos:end="209:46"><name pos:start="209:32" pos:end="209:32">c</name><operator pos:start="209:33" pos:end="209:34">-&gt;</operator><name pos:start="209:35" pos:end="209:43">playlists</name><index pos:start="209:44" pos:end="209:46">[<expr pos:start="209:45" pos:end="209:45"><name pos:start="209:45" pos:end="209:45">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="211:9" pos:end="211:37"><decl pos:start="211:9" pos:end="211:36"><type pos:start="211:9" pos:end="211:23"><name pos:start="211:9" pos:end="211:21">AVInputFormat</name> <modifier pos:start="211:23" pos:end="211:23">*</modifier></type><name pos:start="211:24" pos:end="211:29">in_fmt</name> <init pos:start="211:31" pos:end="211:36">= <expr pos:start="211:33" pos:end="211:36"><name pos:start="211:33" pos:end="211:36">NULL</name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="215:9" pos:end="221:9"><if pos:start="215:9" pos:end="221:9">if <condition pos:start="215:12" pos:end="215:51">(<expr pos:start="215:13" pos:end="215:50"><operator pos:start="215:13" pos:end="215:13">!</operator><operator pos:start="215:14" pos:end="215:14">(</operator><name pos:start="215:15" pos:end="215:22"><name pos:start="215:15" pos:end="215:17">pls</name><operator pos:start="215:18" pos:end="215:19">-&gt;</operator><name pos:start="215:20" pos:end="215:22">ctx</name></name> <operator pos:start="215:24" pos:end="215:24">=</operator> <call pos:start="215:26" pos:end="215:49"><name pos:start="215:26" pos:end="215:47">avformat_alloc_context</name><argument_list pos:start="215:48" pos:end="215:49">()</argument_list></call><operator pos:start="215:50" pos:end="215:50">)</operator></expr>)</condition> <block pos:start="215:53" pos:end="221:9">{<block_content pos:start="217:13" pos:end="219:22">

            <expr_stmt pos:start="217:13" pos:end="217:34"><expr pos:start="217:13" pos:end="217:33"><name pos:start="217:13" pos:end="217:15">ret</name> <operator pos:start="217:17" pos:end="217:17">=</operator> <call pos:start="217:19" pos:end="217:33"><name pos:start="217:19" pos:end="217:25">AVERROR</name><argument_list pos:start="217:26" pos:end="217:33">(<argument pos:start="217:27" pos:end="217:32"><expr pos:start="217:27" pos:end="217:32"><name pos:start="217:27" pos:end="217:32">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="219:13" pos:end="219:22">goto <name pos:start="219:18" pos:end="219:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="225:9" pos:end="227:21"><if pos:start="225:9" pos:end="227:21">if <condition pos:start="225:12" pos:end="225:33">(<expr pos:start="225:13" pos:end="225:32"><name pos:start="225:13" pos:end="225:27"><name pos:start="225:13" pos:end="225:15">pls</name><operator pos:start="225:16" pos:end="225:17">-&gt;</operator><name pos:start="225:18" pos:end="225:27">n_segments</name></name> <operator pos:start="225:29" pos:end="225:30">==</operator> <literal type="number" pos:start="225:32" pos:end="225:32">0</literal></expr>)</condition><block type="pseudo" pos:start="227:13" pos:end="227:21"><block_content pos:start="227:13" pos:end="227:21">

            <continue pos:start="227:13" pos:end="227:21">continue;</continue></block_content></block></if></if_stmt>



        <expr_stmt pos:start="231:9" pos:end="231:24"><expr pos:start="231:9" pos:end="231:23"><name pos:start="231:9" pos:end="231:18"><name pos:start="231:9" pos:end="231:11">pls</name><operator pos:start="231:12" pos:end="231:13">-&gt;</operator><name pos:start="231:14" pos:end="231:18">index</name></name>  <operator pos:start="231:21" pos:end="231:21">=</operator> <name pos:start="231:23" pos:end="231:23">i</name></expr>;</expr_stmt>

        <expr_stmt pos:start="233:9" pos:end="233:24"><expr pos:start="233:9" pos:end="233:23"><name pos:start="233:9" pos:end="233:19"><name pos:start="233:9" pos:end="233:11">pls</name><operator pos:start="233:12" pos:end="233:13">-&gt;</operator><name pos:start="233:14" pos:end="233:19">needed</name></name> <operator pos:start="233:21" pos:end="233:21">=</operator> <literal type="number" pos:start="233:23" pos:end="233:23">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="235:9" pos:end="235:24"><expr pos:start="235:9" pos:end="235:23"><name pos:start="235:9" pos:end="235:19"><name pos:start="235:9" pos:end="235:11">pls</name><operator pos:start="235:12" pos:end="235:13">-&gt;</operator><name pos:start="235:14" pos:end="235:19">parent</name></name> <operator pos:start="235:21" pos:end="235:21">=</operator> <name pos:start="235:23" pos:end="235:23">s</name></expr>;</expr_stmt>



        <comment type="block" pos:start="239:9" pos:end="251:11">/*

         * If this is a live stream and this playlist looks like it is one segment

         * behind, try to sync it up so that every substream starts at the same

         * time position (so e.g. avformat_find_stream_info() will see packets from

         * all active streams within the first few seconds). This is not very generic,

         * though, as the sequence numbers are technically independent.

         */</comment>

        <if_stmt pos:start="253:9" pos:end="259:9"><if pos:start="253:9" pos:end="259:9">if <condition pos:start="253:12" pos:end="255:69">(<expr pos:start="253:13" pos:end="255:68"><operator pos:start="253:13" pos:end="253:13">!</operator><name pos:start="253:14" pos:end="253:26"><name pos:start="253:14" pos:end="253:16">pls</name><operator pos:start="253:17" pos:end="253:18">-&gt;</operator><name pos:start="253:19" pos:end="253:26">finished</name></name> <operator pos:start="253:28" pos:end="253:29">&amp;&amp;</operator> <name pos:start="253:31" pos:end="253:45"><name pos:start="253:31" pos:end="253:33">pls</name><operator pos:start="253:34" pos:end="253:35">-&gt;</operator><name pos:start="253:36" pos:end="253:45">cur_seq_no</name></name> <operator pos:start="253:47" pos:end="253:48">==</operator> <name pos:start="253:50" pos:end="253:67">highest_cur_seq_no</name> <operator pos:start="253:69" pos:end="253:69">-</operator> <literal type="number" pos:start="253:71" pos:end="253:71">1</literal> <operator pos:start="253:73" pos:end="253:74">&amp;&amp;</operator>

            <name pos:start="255:13" pos:end="255:30">highest_cur_seq_no</name> <operator pos:start="255:32" pos:end="255:32">&lt;</operator> <name pos:start="255:34" pos:end="255:50"><name pos:start="255:34" pos:end="255:36">pls</name><operator pos:start="255:37" pos:end="255:38">-&gt;</operator><name pos:start="255:39" pos:end="255:50">start_seq_no</name></name> <operator pos:start="255:52" pos:end="255:52">+</operator> <name pos:start="255:54" pos:end="255:68"><name pos:start="255:54" pos:end="255:56">pls</name><operator pos:start="255:57" pos:end="255:58">-&gt;</operator><name pos:start="255:59" pos:end="255:68">n_segments</name></name></expr>)</condition> <block pos:start="255:71" pos:end="259:9">{<block_content pos:start="257:13" pos:end="257:49">

            <expr_stmt pos:start="257:13" pos:end="257:49"><expr pos:start="257:13" pos:end="257:48"><name pos:start="257:13" pos:end="257:27"><name pos:start="257:13" pos:end="257:15">pls</name><operator pos:start="257:16" pos:end="257:17">-&gt;</operator><name pos:start="257:18" pos:end="257:27">cur_seq_no</name></name> <operator pos:start="257:29" pos:end="257:29">=</operator> <name pos:start="257:31" pos:end="257:48">highest_cur_seq_no</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="263:9" pos:end="263:58"><expr pos:start="263:9" pos:end="263:57"><name pos:start="263:9" pos:end="263:24"><name pos:start="263:9" pos:end="263:11">pls</name><operator pos:start="263:12" pos:end="263:13">-&gt;</operator><name pos:start="263:14" pos:end="263:24">read_buffer</name></name> <operator pos:start="263:26" pos:end="263:26">=</operator> <call pos:start="263:28" pos:end="263:57"><name pos:start="263:28" pos:end="263:36">av_malloc</name><argument_list pos:start="263:37" pos:end="263:57">(<argument pos:start="263:38" pos:end="263:56"><expr pos:start="263:38" pos:end="263:56"><name pos:start="263:38" pos:end="263:56">INITIAL_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="265:9" pos:end="275:9"><if pos:start="265:9" pos:end="275:9">if <condition pos:start="265:12" pos:end="265:30">(<expr pos:start="265:13" pos:end="265:29"><operator pos:start="265:13" pos:end="265:13">!</operator><name pos:start="265:14" pos:end="265:29"><name pos:start="265:14" pos:end="265:16">pls</name><operator pos:start="265:17" pos:end="265:18">-&gt;</operator><name pos:start="265:19" pos:end="265:29">read_buffer</name></name></expr>)</condition><block pos:start="265:31" pos:end="275:9">{<block_content pos:start="267:13" pos:end="273:22">

            <expr_stmt pos:start="267:13" pos:end="267:34"><expr pos:start="267:13" pos:end="267:33"><name pos:start="267:13" pos:end="267:15">ret</name> <operator pos:start="267:17" pos:end="267:17">=</operator> <call pos:start="267:19" pos:end="267:33"><name pos:start="267:19" pos:end="267:25">AVERROR</name><argument_list pos:start="267:26" pos:end="267:33">(<argument pos:start="267:27" pos:end="267:32"><expr pos:start="267:27" pos:end="267:32"><name pos:start="267:27" pos:end="267:32">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="269:13" pos:end="269:44"><expr pos:start="269:13" pos:end="269:43"><call pos:start="269:13" pos:end="269:43"><name pos:start="269:13" pos:end="269:33">avformat_free_context</name><argument_list pos:start="269:34" pos:end="269:43">(<argument pos:start="269:35" pos:end="269:42"><expr pos:start="269:35" pos:end="269:42"><name pos:start="269:35" pos:end="269:42"><name pos:start="269:35" pos:end="269:37">pls</name><operator pos:start="269:38" pos:end="269:39">-&gt;</operator><name pos:start="269:40" pos:end="269:42">ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="271:13" pos:end="271:28"><expr pos:start="271:13" pos:end="271:27"><name pos:start="271:13" pos:end="271:20"><name pos:start="271:13" pos:end="271:15">pls</name><operator pos:start="271:16" pos:end="271:17">-&gt;</operator><name pos:start="271:18" pos:end="271:20">ctx</name></name> <operator pos:start="271:22" pos:end="271:22">=</operator> <name pos:start="271:24" pos:end="271:27">NULL</name></expr>;</expr_stmt>

            <goto pos:start="273:13" pos:end="273:22">goto <name pos:start="273:18" pos:end="273:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="277:9" pos:end="279:49"><expr pos:start="277:9" pos:end="279:48"><call pos:start="277:9" pos:end="279:48"><name pos:start="277:9" pos:end="277:25">ffio_init_context</name><argument_list pos:start="277:26" pos:end="279:48">(<argument pos:start="277:27" pos:end="277:34"><expr pos:start="277:27" pos:end="277:34"><operator pos:start="277:27" pos:end="277:27">&amp;</operator><name pos:start="277:28" pos:end="277:34"><name pos:start="277:28" pos:end="277:30">pls</name><operator pos:start="277:31" pos:end="277:32">-&gt;</operator><name pos:start="277:33" pos:end="277:34">pb</name></name></expr></argument>, <argument pos:start="277:37" pos:end="277:52"><expr pos:start="277:37" pos:end="277:52"><name pos:start="277:37" pos:end="277:52"><name pos:start="277:37" pos:end="277:39">pls</name><operator pos:start="277:40" pos:end="277:41">-&gt;</operator><name pos:start="277:42" pos:end="277:52">read_buffer</name></name></expr></argument>, <argument pos:start="277:55" pos:end="277:73"><expr pos:start="277:55" pos:end="277:73"><name pos:start="277:55" pos:end="277:73">INITIAL_BUFFER_SIZE</name></expr></argument>, <argument pos:start="277:76" pos:end="277:76"><expr pos:start="277:76" pos:end="277:76"><literal type="number" pos:start="277:76" pos:end="277:76">0</literal></expr></argument>, <argument pos:start="277:79" pos:end="277:81"><expr pos:start="277:79" pos:end="277:81"><name pos:start="277:79" pos:end="277:81">pls</name></expr></argument>,

                          <argument pos:start="279:27" pos:end="279:35"><expr pos:start="279:27" pos:end="279:35"><name pos:start="279:27" pos:end="279:35">read_data</name></expr></argument>, <argument pos:start="279:38" pos:end="279:41"><expr pos:start="279:38" pos:end="279:41"><name pos:start="279:38" pos:end="279:41">NULL</name></expr></argument>, <argument pos:start="279:44" pos:end="279:47"><expr pos:start="279:44" pos:end="279:47"><name pos:start="279:44" pos:end="279:47">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="281:9" pos:end="281:29"><expr pos:start="281:9" pos:end="281:28"><name pos:start="281:9" pos:end="281:24"><name pos:start="281:9" pos:end="281:11">pls</name><operator pos:start="281:12" pos:end="281:13">-&gt;</operator><name pos:start="281:14" pos:end="281:15">pb</name><operator pos:start="281:16" pos:end="281:16">.</operator><name pos:start="281:17" pos:end="281:24">seekable</name></name> <operator pos:start="281:26" pos:end="281:26">=</operator> <literal type="number" pos:start="281:28" pos:end="281:28">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="283:9" pos:end="285:48"><expr pos:start="283:9" pos:end="285:47"><name pos:start="283:9" pos:end="283:11">ret</name> <operator pos:start="283:13" pos:end="283:13">=</operator> <call pos:start="283:15" pos:end="285:47"><name pos:start="283:15" pos:end="283:35">av_probe_input_buffer</name><argument_list pos:start="283:36" pos:end="285:47">(<argument pos:start="283:37" pos:end="283:44"><expr pos:start="283:37" pos:end="283:44"><operator pos:start="283:37" pos:end="283:37">&amp;</operator><name pos:start="283:38" pos:end="283:44"><name pos:start="283:38" pos:end="283:40">pls</name><operator pos:start="283:41" pos:end="283:42">-&gt;</operator><name pos:start="283:43" pos:end="283:44">pb</name></name></expr></argument>, <argument pos:start="283:47" pos:end="283:53"><expr pos:start="283:47" pos:end="283:53"><operator pos:start="283:47" pos:end="283:47">&amp;</operator><name pos:start="283:48" pos:end="283:53">in_fmt</name></expr></argument>, <argument pos:start="283:56" pos:end="283:76"><expr pos:start="283:56" pos:end="283:76"><name pos:start="283:56" pos:end="283:71"><name pos:start="283:56" pos:end="283:58">pls</name><operator pos:start="283:59" pos:end="283:60">-&gt;</operator><name pos:start="283:61" pos:end="283:68">segments</name><index pos:start="283:69" pos:end="283:71">[<expr pos:start="283:70" pos:end="283:70"><literal type="number" pos:start="283:70" pos:end="283:70">0</literal></expr>]</index></name><operator pos:start="283:72" pos:end="283:73">-&gt;</operator><name pos:start="283:74" pos:end="283:76">url</name></expr></argument>,

                                    <argument pos:start="285:37" pos:end="285:40"><expr pos:start="285:37" pos:end="285:40"><name pos:start="285:37" pos:end="285:40">NULL</name></expr></argument>, <argument pos:start="285:43" pos:end="285:43"><expr pos:start="285:43" pos:end="285:43"><literal type="number" pos:start="285:43" pos:end="285:43">0</literal></expr></argument>, <argument pos:start="285:46" pos:end="285:46"><expr pos:start="285:46" pos:end="285:46"><literal type="number" pos:start="285:46" pos:end="285:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="287:9" pos:end="305:9"><if pos:start="287:9" pos:end="305:9">if <condition pos:start="287:12" pos:end="287:20">(<expr pos:start="287:13" pos:end="287:19"><name pos:start="287:13" pos:end="287:15">ret</name> <operator pos:start="287:17" pos:end="287:17">&lt;</operator> <literal type="number" pos:start="287:19" pos:end="287:19">0</literal></expr>)</condition> <block pos:start="287:22" pos:end="305:9">{<block_content pos:start="297:13" pos:end="303:22">

            <comment type="block" pos:start="289:13" pos:end="295:78">/* Free the ctx - it isn't initialized properly at this point,

             * so avformat_close_input shouldn't be called. If

             * avformat_open_input fails below, it frees and zeros the

             * context, so it doesn't need any special treatment like this. */</comment>

            <expr_stmt pos:start="297:13" pos:end="297:102"><expr pos:start="297:13" pos:end="297:101"><call pos:start="297:13" pos:end="297:101"><name pos:start="297:13" pos:end="297:18">av_log</name><argument_list pos:start="297:19" pos:end="297:101">(<argument pos:start="297:20" pos:end="297:20"><expr pos:start="297:20" pos:end="297:20"><name pos:start="297:20" pos:end="297:20">s</name></expr></argument>, <argument pos:start="297:23" pos:end="297:34"><expr pos:start="297:23" pos:end="297:34"><name pos:start="297:23" pos:end="297:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="297:37" pos:end="297:77"><expr pos:start="297:37" pos:end="297:77"><literal type="string" pos:start="297:37" pos:end="297:77">"Error when loading first segment '%s'\n"</literal></expr></argument>, <argument pos:start="297:80" pos:end="297:100"><expr pos:start="297:80" pos:end="297:100"><name pos:start="297:80" pos:end="297:95"><name pos:start="297:80" pos:end="297:82">pls</name><operator pos:start="297:83" pos:end="297:84">-&gt;</operator><name pos:start="297:85" pos:end="297:92">segments</name><index pos:start="297:93" pos:end="297:95">[<expr pos:start="297:94" pos:end="297:94"><literal type="number" pos:start="297:94" pos:end="297:94">0</literal></expr>]</index></name><operator pos:start="297:96" pos:end="297:97">-&gt;</operator><name pos:start="297:98" pos:end="297:100">url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="299:13" pos:end="299:44"><expr pos:start="299:13" pos:end="299:43"><call pos:start="299:13" pos:end="299:43"><name pos:start="299:13" pos:end="299:33">avformat_free_context</name><argument_list pos:start="299:34" pos:end="299:43">(<argument pos:start="299:35" pos:end="299:42"><expr pos:start="299:35" pos:end="299:42"><name pos:start="299:35" pos:end="299:42"><name pos:start="299:35" pos:end="299:37">pls</name><operator pos:start="299:38" pos:end="299:39">-&gt;</operator><name pos:start="299:40" pos:end="299:42">ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="301:13" pos:end="301:28"><expr pos:start="301:13" pos:end="301:27"><name pos:start="301:13" pos:end="301:20"><name pos:start="301:13" pos:end="301:15">pls</name><operator pos:start="301:16" pos:end="301:17">-&gt;</operator><name pos:start="301:18" pos:end="301:20">ctx</name></name> <operator pos:start="301:22" pos:end="301:22">=</operator> <name pos:start="301:24" pos:end="301:27">NULL</name></expr>;</expr_stmt>

            <goto pos:start="303:13" pos:end="303:22">goto <name pos:start="303:18" pos:end="303:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="307:9" pos:end="307:38"><expr pos:start="307:9" pos:end="307:37"><name pos:start="307:9" pos:end="307:20"><name pos:start="307:9" pos:end="307:11">pls</name><operator pos:start="307:12" pos:end="307:13">-&gt;</operator><name pos:start="307:14" pos:end="307:16">ctx</name><operator pos:start="307:17" pos:end="307:18">-&gt;</operator><name pos:start="307:19" pos:end="307:20">pb</name></name>       <operator pos:start="307:28" pos:end="307:28">=</operator> <operator pos:start="307:30" pos:end="307:30">&amp;</operator><name pos:start="307:31" pos:end="307:37"><name pos:start="307:31" pos:end="307:33">pls</name><operator pos:start="307:34" pos:end="307:35">-&gt;</operator><name pos:start="307:36" pos:end="307:37">pb</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="309:9" pos:end="309:44"><expr pos:start="309:9" pos:end="309:43"><name pos:start="309:9" pos:end="309:25"><name pos:start="309:9" pos:end="309:11">pls</name><operator pos:start="309:12" pos:end="309:13">-&gt;</operator><name pos:start="309:14" pos:end="309:16">ctx</name><operator pos:start="309:17" pos:end="309:18">-&gt;</operator><name pos:start="309:19" pos:end="309:25">io_open</name></name>  <operator pos:start="309:28" pos:end="309:28">=</operator> <name pos:start="309:30" pos:end="309:43">nested_io_open</name></expr>;</expr_stmt>



        <if_stmt pos:start="313:9" pos:end="315:22"><if pos:start="313:9" pos:end="315:22">if <condition pos:start="313:12" pos:end="313:61">(<expr pos:start="313:13" pos:end="313:60"><operator pos:start="313:13" pos:end="313:13">(</operator><name pos:start="313:14" pos:end="313:16">ret</name> <operator pos:start="313:18" pos:end="313:18">=</operator> <call pos:start="313:20" pos:end="313:55"><name pos:start="313:20" pos:end="313:42">ff_copy_whiteblacklists</name><argument_list pos:start="313:43" pos:end="313:55">(<argument pos:start="313:44" pos:end="313:51"><expr pos:start="313:44" pos:end="313:51"><name pos:start="313:44" pos:end="313:51"><name pos:start="313:44" pos:end="313:46">pls</name><operator pos:start="313:47" pos:end="313:48">-&gt;</operator><name pos:start="313:49" pos:end="313:51">ctx</name></name></expr></argument>, <argument pos:start="313:54" pos:end="313:54"><expr pos:start="313:54" pos:end="313:54"><name pos:start="313:54" pos:end="313:54">s</name></expr></argument>)</argument_list></call><operator pos:start="313:56" pos:end="313:56">)</operator> <operator pos:start="313:58" pos:end="313:58">&lt;</operator> <literal type="number" pos:start="313:60" pos:end="313:60">0</literal></expr>)</condition><block type="pseudo" pos:start="315:13" pos:end="315:22"><block_content pos:start="315:13" pos:end="315:22">

            <goto pos:start="315:13" pos:end="315:22">goto <name pos:start="315:18" pos:end="315:21">fail</name>;</goto></block_content></block></if></if_stmt>



        <expr_stmt pos:start="319:9" pos:end="319:82"><expr pos:start="319:9" pos:end="319:81"><name pos:start="319:9" pos:end="319:11">ret</name> <operator pos:start="319:13" pos:end="319:13">=</operator> <call pos:start="319:15" pos:end="319:81"><name pos:start="319:15" pos:end="319:33">avformat_open_input</name><argument_list pos:start="319:34" pos:end="319:81">(<argument pos:start="319:35" pos:end="319:43"><expr pos:start="319:35" pos:end="319:43"><operator pos:start="319:35" pos:end="319:35">&amp;</operator><name pos:start="319:36" pos:end="319:43"><name pos:start="319:36" pos:end="319:38">pls</name><operator pos:start="319:39" pos:end="319:40">-&gt;</operator><name pos:start="319:41" pos:end="319:43">ctx</name></name></expr></argument>, <argument pos:start="319:46" pos:end="319:66"><expr pos:start="319:46" pos:end="319:66"><name pos:start="319:46" pos:end="319:61"><name pos:start="319:46" pos:end="319:48">pls</name><operator pos:start="319:49" pos:end="319:50">-&gt;</operator><name pos:start="319:51" pos:end="319:58">segments</name><index pos:start="319:59" pos:end="319:61">[<expr pos:start="319:60" pos:end="319:60"><literal type="number" pos:start="319:60" pos:end="319:60">0</literal></expr>]</index></name><operator pos:start="319:62" pos:end="319:63">-&gt;</operator><name pos:start="319:64" pos:end="319:66">url</name></expr></argument>, <argument pos:start="319:69" pos:end="319:74"><expr pos:start="319:69" pos:end="319:74"><name pos:start="319:69" pos:end="319:74">in_fmt</name></expr></argument>, <argument pos:start="319:77" pos:end="319:80"><expr pos:start="319:77" pos:end="319:80"><name pos:start="319:77" pos:end="319:80">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="321:9" pos:end="323:22"><if pos:start="321:9" pos:end="323:22">if <condition pos:start="321:12" pos:end="321:20">(<expr pos:start="321:13" pos:end="321:19"><name pos:start="321:13" pos:end="321:15">ret</name> <operator pos:start="321:17" pos:end="321:17">&lt;</operator> <literal type="number" pos:start="321:19" pos:end="321:19">0</literal></expr>)</condition><block type="pseudo" pos:start="323:13" pos:end="323:22"><block_content pos:start="323:13" pos:end="323:22">

            <goto pos:start="323:13" pos:end="323:22">goto <name pos:start="323:18" pos:end="323:21">fail</name>;</goto></block_content></block></if></if_stmt>



        <if_stmt pos:start="327:9" pos:end="337:9"><if pos:start="327:9" pos:end="337:9">if <condition pos:start="327:12" pos:end="327:65">(<expr pos:start="327:13" pos:end="327:64"><name pos:start="327:13" pos:end="327:35"><name pos:start="327:13" pos:end="327:15">pls</name><operator pos:start="327:16" pos:end="327:17">-&gt;</operator><name pos:start="327:18" pos:end="327:35">id3_deferred_extra</name></name> <operator pos:start="327:37" pos:end="327:38">&amp;&amp;</operator> <name pos:start="327:40" pos:end="327:59"><name pos:start="327:40" pos:end="327:42">pls</name><operator pos:start="327:43" pos:end="327:44">-&gt;</operator><name pos:start="327:45" pos:end="327:47">ctx</name><operator pos:start="327:48" pos:end="327:49">-&gt;</operator><name pos:start="327:50" pos:end="327:59">nb_streams</name></name> <operator pos:start="327:61" pos:end="327:62">==</operator> <literal type="number" pos:start="327:64" pos:end="327:64">1</literal></expr>)</condition> <block pos:start="327:67" pos:end="337:9">{<block_content pos:start="329:13" pos:end="335:43">

            <expr_stmt pos:start="329:13" pos:end="329:68"><expr pos:start="329:13" pos:end="329:67"><call pos:start="329:13" pos:end="329:67"><name pos:start="329:13" pos:end="329:31">ff_id3v2_parse_apic</name><argument_list pos:start="329:32" pos:end="329:67">(<argument pos:start="329:33" pos:end="329:40"><expr pos:start="329:33" pos:end="329:40"><name pos:start="329:33" pos:end="329:40"><name pos:start="329:33" pos:end="329:35">pls</name><operator pos:start="329:36" pos:end="329:37">-&gt;</operator><name pos:start="329:38" pos:end="329:40">ctx</name></name></expr></argument>, <argument pos:start="329:43" pos:end="329:66"><expr pos:start="329:43" pos:end="329:66"><operator pos:start="329:43" pos:end="329:43">&amp;</operator><name pos:start="329:44" pos:end="329:66"><name pos:start="329:44" pos:end="329:46">pls</name><operator pos:start="329:47" pos:end="329:48">-&gt;</operator><name pos:start="329:49" pos:end="329:66">id3_deferred_extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="331:13" pos:end="331:55"><expr pos:start="331:13" pos:end="331:54"><call pos:start="331:13" pos:end="331:54"><name pos:start="331:13" pos:end="331:44">avformat_queue_attached_pictures</name><argument_list pos:start="331:45" pos:end="331:54">(<argument pos:start="331:46" pos:end="331:53"><expr pos:start="331:46" pos:end="331:53"><name pos:start="331:46" pos:end="331:53"><name pos:start="331:46" pos:end="331:48">pls</name><operator pos:start="331:49" pos:end="331:50">-&gt;</operator><name pos:start="331:51" pos:end="331:53">ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="333:13" pos:end="333:63"><expr pos:start="333:13" pos:end="333:62"><call pos:start="333:13" pos:end="333:62"><name pos:start="333:13" pos:end="333:36">ff_id3v2_free_extra_meta</name><argument_list pos:start="333:37" pos:end="333:62">(<argument pos:start="333:38" pos:end="333:61"><expr pos:start="333:38" pos:end="333:61"><operator pos:start="333:38" pos:end="333:38">&amp;</operator><name pos:start="333:39" pos:end="333:61"><name pos:start="333:39" pos:end="333:41">pls</name><operator pos:start="333:42" pos:end="333:43">-&gt;</operator><name pos:start="333:44" pos:end="333:61">id3_deferred_extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="335:13" pos:end="335:43"><expr pos:start="335:13" pos:end="335:42"><name pos:start="335:13" pos:end="335:35"><name pos:start="335:13" pos:end="335:15">pls</name><operator pos:start="335:16" pos:end="335:17">-&gt;</operator><name pos:start="335:18" pos:end="335:35">id3_deferred_extra</name></name> <operator pos:start="335:37" pos:end="335:37">=</operator> <name pos:start="335:39" pos:end="335:42">NULL</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="341:9" pos:end="341:50"><expr pos:start="341:9" pos:end="341:49"><name pos:start="341:9" pos:end="341:27"><name pos:start="341:9" pos:end="341:11">pls</name><operator pos:start="341:12" pos:end="341:13">-&gt;</operator><name pos:start="341:14" pos:end="341:16">ctx</name><operator pos:start="341:17" pos:end="341:18">-&gt;</operator><name pos:start="341:19" pos:end="341:27">ctx_flags</name></name> <operator pos:start="341:29" pos:end="341:30">&amp;=</operator> <operator pos:start="341:32" pos:end="341:32">~</operator><name pos:start="341:33" pos:end="341:49">AVFMTCTX_NOHEADER</name></expr>;</expr_stmt>

        <expr_stmt pos:start="343:9" pos:end="343:56"><expr pos:start="343:9" pos:end="343:55"><name pos:start="343:9" pos:end="343:11">ret</name> <operator pos:start="343:13" pos:end="343:13">=</operator> <call pos:start="343:15" pos:end="343:55"><name pos:start="343:15" pos:end="343:39">avformat_find_stream_info</name><argument_list pos:start="343:40" pos:end="343:55">(<argument pos:start="343:41" pos:end="343:48"><expr pos:start="343:41" pos:end="343:48"><name pos:start="343:41" pos:end="343:48"><name pos:start="343:41" pos:end="343:43">pls</name><operator pos:start="343:44" pos:end="343:45">-&gt;</operator><name pos:start="343:46" pos:end="343:48">ctx</name></name></expr></argument>, <argument pos:start="343:51" pos:end="343:54"><expr pos:start="343:51" pos:end="343:54"><name pos:start="343:51" pos:end="343:54">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="345:9" pos:end="347:22"><if pos:start="345:9" pos:end="347:22">if <condition pos:start="345:12" pos:end="345:20">(<expr pos:start="345:13" pos:end="345:19"><name pos:start="345:13" pos:end="345:15">ret</name> <operator pos:start="345:17" pos:end="345:17">&lt;</operator> <literal type="number" pos:start="345:19" pos:end="345:19">0</literal></expr>)</condition><block type="pseudo" pos:start="347:13" pos:end="347:22"><block_content pos:start="347:13" pos:end="347:22">

            <goto pos:start="347:13" pos:end="347:22">goto <name pos:start="347:18" pos:end="347:21">fail</name>;</goto></block_content></block></if></if_stmt>



        <if_stmt pos:start="351:9" pos:end="353:84"><if pos:start="351:9" pos:end="353:84">if <condition pos:start="351:12" pos:end="351:42">(<expr pos:start="351:13" pos:end="351:41"><name pos:start="351:13" pos:end="351:35"><name pos:start="351:13" pos:end="351:15">pls</name><operator pos:start="351:16" pos:end="351:17">-&gt;</operator><name pos:start="351:18" pos:end="351:35">is_id3_timestamped</name></name> <operator pos:start="351:37" pos:end="351:38">==</operator> <operator pos:start="351:40" pos:end="351:40">-</operator><literal type="number" pos:start="351:41" pos:end="351:41">1</literal></expr>)</condition><block type="pseudo" pos:start="353:13" pos:end="353:84"><block_content pos:start="353:13" pos:end="353:84">

            <expr_stmt pos:start="353:13" pos:end="353:84"><expr pos:start="353:13" pos:end="353:83"><call pos:start="353:13" pos:end="353:83"><name pos:start="353:13" pos:end="353:18">av_log</name><argument_list pos:start="353:19" pos:end="353:83">(<argument pos:start="353:20" pos:end="353:20"><expr pos:start="353:20" pos:end="353:20"><name pos:start="353:20" pos:end="353:20">s</name></expr></argument>, <argument pos:start="353:23" pos:end="353:36"><expr pos:start="353:23" pos:end="353:36"><name pos:start="353:23" pos:end="353:36">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="353:39" pos:end="353:82"><expr pos:start="353:39" pos:end="353:82"><literal type="string" pos:start="353:39" pos:end="353:82">"No expected HTTP requests have been made\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <comment type="block" pos:start="357:9" pos:end="357:67">/* Create new AVStreams for each stream in this playlist */</comment>

        <expr_stmt pos:start="359:9" pos:end="359:53"><expr pos:start="359:9" pos:end="359:52"><name pos:start="359:9" pos:end="359:11">ret</name> <operator pos:start="359:13" pos:end="359:13">=</operator> <call pos:start="359:15" pos:end="359:52"><name pos:start="359:15" pos:end="359:44">update_streams_from_subdemuxer</name><argument_list pos:start="359:45" pos:end="359:52">(<argument pos:start="359:46" pos:end="359:46"><expr pos:start="359:46" pos:end="359:46"><name pos:start="359:46" pos:end="359:46">s</name></expr></argument>, <argument pos:start="359:49" pos:end="359:51"><expr pos:start="359:49" pos:end="359:51"><name pos:start="359:49" pos:end="359:51">pls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="361:9" pos:end="363:22"><if pos:start="361:9" pos:end="363:22">if <condition pos:start="361:12" pos:end="361:20">(<expr pos:start="361:13" pos:end="361:19"><name pos:start="361:13" pos:end="361:15">ret</name> <operator pos:start="361:17" pos:end="361:17">&lt;</operator> <literal type="number" pos:start="361:19" pos:end="361:19">0</literal></expr>)</condition><block type="pseudo" pos:start="363:13" pos:end="363:22"><block_content pos:start="363:13" pos:end="363:22">

            <goto pos:start="363:13" pos:end="363:22">goto <name pos:start="363:18" pos:end="363:21">fail</name>;</goto></block_content></block></if></if_stmt>



        <expr_stmt pos:start="367:9" pos:end="367:65"><expr pos:start="367:9" pos:end="367:64"><call pos:start="367:9" pos:end="367:64"><name pos:start="367:9" pos:end="367:36">add_metadata_from_renditions</name><argument_list pos:start="367:37" pos:end="367:64">(<argument pos:start="367:38" pos:end="367:38"><expr pos:start="367:38" pos:end="367:38"><name pos:start="367:38" pos:end="367:38">s</name></expr></argument>, <argument pos:start="367:41" pos:end="367:43"><expr pos:start="367:41" pos:end="367:43"><name pos:start="367:41" pos:end="367:43">pls</name></expr></argument>, <argument pos:start="367:46" pos:end="367:63"><expr pos:start="367:46" pos:end="367:63"><name pos:start="367:46" pos:end="367:63">AVMEDIA_TYPE_AUDIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="369:9" pos:end="369:65"><expr pos:start="369:9" pos:end="369:64"><call pos:start="369:9" pos:end="369:64"><name pos:start="369:9" pos:end="369:36">add_metadata_from_renditions</name><argument_list pos:start="369:37" pos:end="369:64">(<argument pos:start="369:38" pos:end="369:38"><expr pos:start="369:38" pos:end="369:38"><name pos:start="369:38" pos:end="369:38">s</name></expr></argument>, <argument pos:start="369:41" pos:end="369:43"><expr pos:start="369:41" pos:end="369:43"><name pos:start="369:41" pos:end="369:43">pls</name></expr></argument>, <argument pos:start="369:46" pos:end="369:63"><expr pos:start="369:46" pos:end="369:63"><name pos:start="369:46" pos:end="369:63">AVMEDIA_TYPE_VIDEO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="371:9" pos:end="371:68"><expr pos:start="371:9" pos:end="371:67"><call pos:start="371:9" pos:end="371:67"><name pos:start="371:9" pos:end="371:36">add_metadata_from_renditions</name><argument_list pos:start="371:37" pos:end="371:67">(<argument pos:start="371:38" pos:end="371:38"><expr pos:start="371:38" pos:end="371:38"><name pos:start="371:38" pos:end="371:38">s</name></expr></argument>, <argument pos:start="371:41" pos:end="371:43"><expr pos:start="371:41" pos:end="371:43"><name pos:start="371:41" pos:end="371:43">pls</name></expr></argument>, <argument pos:start="371:46" pos:end="371:66"><expr pos:start="371:46" pos:end="371:66"><name pos:start="371:46" pos:end="371:66">AVMEDIA_TYPE_SUBTITLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <return pos:start="377:5" pos:end="377:13">return <expr pos:start="377:12" pos:end="377:12"><literal type="number" pos:start="377:12" pos:end="377:12">0</literal></expr>;</return>

<label pos:start="379:1" pos:end="379:5"><name pos:start="379:1" pos:end="379:4">fail</name>:</label>

    <expr_stmt pos:start="381:5" pos:end="381:26"><expr pos:start="381:5" pos:end="381:25"><call pos:start="381:5" pos:end="381:25"><name pos:start="381:5" pos:end="381:22">free_playlist_list</name><argument_list pos:start="381:23" pos:end="381:25">(<argument pos:start="381:24" pos:end="381:24"><expr pos:start="381:24" pos:end="381:24"><name pos:start="381:24" pos:end="381:24">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="383:5" pos:end="383:25"><expr pos:start="383:5" pos:end="383:24"><call pos:start="383:5" pos:end="383:24"><name pos:start="383:5" pos:end="383:21">free_variant_list</name><argument_list pos:start="383:22" pos:end="383:24">(<argument pos:start="383:23" pos:end="383:23"><expr pos:start="383:23" pos:end="383:23"><name pos:start="383:23" pos:end="383:23">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="385:5" pos:end="385:27"><expr pos:start="385:5" pos:end="385:26"><call pos:start="385:5" pos:end="385:26"><name pos:start="385:5" pos:end="385:23">free_rendition_list</name><argument_list pos:start="385:24" pos:end="385:26">(<argument pos:start="385:25" pos:end="385:25"><expr pos:start="385:25" pos:end="385:25"><name pos:start="385:25" pos:end="385:25">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="387:5" pos:end="387:15">return <expr pos:start="387:12" pos:end="387:14"><name pos:start="387:12" pos:end="387:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
