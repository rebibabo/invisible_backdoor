<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9578.c" pos:tabs="8"><function pos:start="1:1" pos:end="65:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">gdbserver_open</name><parameter_list pos:start="1:26" pos:end="1:35">(<parameter pos:start="1:27" pos:end="1:34"><decl pos:start="1:27" pos:end="1:34"><type pos:start="1:27" pos:end="1:29"><name pos:start="1:27" pos:end="1:29">int</name></type> <name pos:start="1:31" pos:end="1:34">port</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="65:1">{<block_content pos:start="5:5" pos:end="63:14">

    <decl_stmt pos:start="5:5" pos:end="5:32"><decl pos:start="5:5" pos:end="5:31"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:22">sockaddr_in</name></name></type> <name pos:start="5:24" pos:end="5:31">sockaddr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:10"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:10">fd</name></decl>, <decl pos:start="7:13" pos:end="7:15"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:13" pos:end="7:15">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:41"><expr pos:start="11:5" pos:end="11:40"><name pos:start="11:5" pos:end="11:6">fd</name> <operator pos:start="11:8" pos:end="11:8">=</operator> <call pos:start="11:10" pos:end="11:40"><name pos:start="11:10" pos:end="11:15">socket</name><argument_list pos:start="11:16" pos:end="11:40">(<argument pos:start="11:17" pos:end="11:23"><expr pos:start="11:17" pos:end="11:23"><name pos:start="11:17" pos:end="11:23">PF_INET</name></expr></argument>, <argument pos:start="11:26" pos:end="11:36"><expr pos:start="11:26" pos:end="11:36"><name pos:start="11:26" pos:end="11:36">SOCK_STREAM</name></expr></argument>, <argument pos:start="11:39" pos:end="11:39"><expr pos:start="11:39" pos:end="11:39"><literal type="number" pos:start="11:39" pos:end="11:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="13:5" pos:end="22:0"><if pos:start="13:5" pos:end="22:0">if <condition pos:start="13:8" pos:end="13:15">(<expr pos:start="13:9" pos:end="13:14"><name pos:start="13:9" pos:end="13:10">fd</name> <operator pos:start="13:12" pos:end="13:12">&lt;</operator> <literal type="number" pos:start="13:14" pos:end="13:14">0</literal></expr>)</condition> <block pos:start="13:17" pos:end="22:0">{<block_content pos:start="15:9" pos:end="17:18">

        <expr_stmt pos:start="15:9" pos:end="15:25"><expr pos:start="15:9" pos:end="15:24"><call pos:start="15:9" pos:end="15:24"><name pos:start="15:9" pos:end="15:14">perror</name><argument_list pos:start="15:15" pos:end="15:24">(<argument pos:start="15:16" pos:end="15:23"><expr pos:start="15:16" pos:end="15:23"><literal type="string" pos:start="15:16" pos:end="15:23">"socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="17:9" pos:end="17:18">return <expr pos:start="17:16" pos:end="17:17"><operator pos:start="17:16" pos:end="17:16">-</operator><literal type="number" pos:start="17:17" pos:end="17:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

<cpp:ifndef pos:start="21:1" pos:end="21:14">#<cpp:directive pos:start="21:2" pos:end="21:7">ifndef</cpp:directive> <name pos:start="21:9" pos:end="21:14">_WIN32</name></cpp:ifndef>

    <expr_stmt pos:start="23:5" pos:end="26:0"><expr pos:start="23:5" pos:end="23:34"><call pos:start="23:5" pos:end="23:34"><name pos:start="23:5" pos:end="23:9">fcntl</name><argument_list pos:start="23:10" pos:end="23:34">(<argument pos:start="23:11" pos:end="23:12"><expr pos:start="23:11" pos:end="23:12"><name pos:start="23:11" pos:end="23:12">fd</name></expr></argument>, <argument pos:start="23:15" pos:end="23:21"><expr pos:start="23:15" pos:end="23:21"><name pos:start="23:15" pos:end="23:21">F_SETFD</name></expr></argument>, <argument pos:start="23:24" pos:end="23:33"><expr pos:start="23:24" pos:end="23:33"><name pos:start="23:24" pos:end="23:33">FD_CLOEXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="25:1" pos:end="25:6">#<cpp:directive pos:start="25:2" pos:end="25:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="29:5" pos:end="29:30"><expr pos:start="29:5" pos:end="29:29"><call pos:start="29:5" pos:end="29:29"><name pos:start="29:5" pos:end="29:25">socket_set_fast_reuse</name><argument_list pos:start="29:26" pos:end="29:29">(<argument pos:start="29:27" pos:end="29:28"><expr pos:start="29:27" pos:end="29:28"><name pos:start="29:27" pos:end="29:28">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:34"><expr pos:start="33:5" pos:end="33:33"><name pos:start="33:5" pos:end="33:23"><name pos:start="33:5" pos:end="33:12">sockaddr</name><operator pos:start="33:13" pos:end="33:13">.</operator><name pos:start="33:14" pos:end="33:23">sin_family</name></name> <operator pos:start="33:25" pos:end="33:25">=</operator> <name pos:start="33:27" pos:end="33:33">AF_INET</name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:36"><expr pos:start="35:5" pos:end="35:35"><name pos:start="35:5" pos:end="35:21"><name pos:start="35:5" pos:end="35:12">sockaddr</name><operator pos:start="35:13" pos:end="35:13">.</operator><name pos:start="35:14" pos:end="35:21">sin_port</name></name> <operator pos:start="35:23" pos:end="35:23">=</operator> <call pos:start="35:25" pos:end="35:35"><name pos:start="35:25" pos:end="35:29">htons</name><argument_list pos:start="35:30" pos:end="35:35">(<argument pos:start="35:31" pos:end="35:34"><expr pos:start="35:31" pos:end="35:34"><name pos:start="35:31" pos:end="35:34">port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:33"><expr pos:start="37:5" pos:end="37:32"><name pos:start="37:5" pos:end="37:28"><name pos:start="37:5" pos:end="37:12">sockaddr</name><operator pos:start="37:13" pos:end="37:13">.</operator><name pos:start="37:14" pos:end="37:21">sin_addr</name><operator pos:start="37:22" pos:end="37:22">.</operator><name pos:start="37:23" pos:end="37:28">s_addr</name></name> <operator pos:start="37:30" pos:end="37:30">=</operator> <literal type="number" pos:start="37:32" pos:end="37:32">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:67"><expr pos:start="39:5" pos:end="39:66"><name pos:start="39:5" pos:end="39:7">ret</name> <operator pos:start="39:9" pos:end="39:9">=</operator> <call pos:start="39:11" pos:end="39:66"><name pos:start="39:11" pos:end="39:14">bind</name><argument_list pos:start="39:15" pos:end="39:66">(<argument pos:start="39:16" pos:end="39:17"><expr pos:start="39:16" pos:end="39:17"><name pos:start="39:16" pos:end="39:17">fd</name></expr></argument>, <argument pos:start="39:20" pos:end="39:47"><expr pos:start="39:20" pos:end="39:47"><operator pos:start="39:20" pos:end="39:20">(</operator>struct <name pos:start="39:28" pos:end="39:35">sockaddr</name> <operator pos:start="39:37" pos:end="39:37">*</operator><operator pos:start="39:38" pos:end="39:38">)</operator><operator pos:start="39:39" pos:end="39:39">&amp;</operator><name pos:start="39:40" pos:end="39:47">sockaddr</name></expr></argument>, <argument pos:start="39:50" pos:end="39:65"><expr pos:start="39:50" pos:end="39:65"><sizeof pos:start="39:50" pos:end="39:65">sizeof<argument_list pos:start="39:56" pos:end="39:65">(<argument pos:start="39:57" pos:end="39:64"><expr pos:start="39:57" pos:end="39:64"><name pos:start="39:57" pos:end="39:64">sockaddr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="49:5"><if pos:start="41:5" pos:end="49:5">if <condition pos:start="41:8" pos:end="41:16">(<expr pos:start="41:9" pos:end="41:15"><name pos:start="41:9" pos:end="41:11">ret</name> <operator pos:start="41:13" pos:end="41:13">&lt;</operator> <literal type="number" pos:start="41:15" pos:end="41:15">0</literal></expr>)</condition> <block pos:start="41:18" pos:end="49:5">{<block_content pos:start="43:9" pos:end="47:18">

        <expr_stmt pos:start="43:9" pos:end="43:23"><expr pos:start="43:9" pos:end="43:22"><call pos:start="43:9" pos:end="43:22"><name pos:start="43:9" pos:end="43:14">perror</name><argument_list pos:start="43:15" pos:end="43:22">(<argument pos:start="43:16" pos:end="43:21"><expr pos:start="43:16" pos:end="43:21"><literal type="string" pos:start="43:16" pos:end="43:21">"bind"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:18"><expr pos:start="45:9" pos:end="45:17"><call pos:start="45:9" pos:end="45:17"><name pos:start="45:9" pos:end="45:13">close</name><argument_list pos:start="45:14" pos:end="45:17">(<argument pos:start="45:15" pos:end="45:16"><expr pos:start="45:15" pos:end="45:16"><name pos:start="45:15" pos:end="45:16">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="47:9" pos:end="47:18">return <expr pos:start="47:16" pos:end="47:17"><operator pos:start="47:16" pos:end="47:16">-</operator><literal type="number" pos:start="47:17" pos:end="47:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:24"><expr pos:start="51:5" pos:end="51:23"><name pos:start="51:5" pos:end="51:7">ret</name> <operator pos:start="51:9" pos:end="51:9">=</operator> <call pos:start="51:11" pos:end="51:23"><name pos:start="51:11" pos:end="51:16">listen</name><argument_list pos:start="51:17" pos:end="51:23">(<argument pos:start="51:18" pos:end="51:19"><expr pos:start="51:18" pos:end="51:19"><name pos:start="51:18" pos:end="51:19">fd</name></expr></argument>, <argument pos:start="51:22" pos:end="51:22"><expr pos:start="51:22" pos:end="51:22"><literal type="number" pos:start="51:22" pos:end="51:22">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="61:5"><if pos:start="53:5" pos:end="61:5">if <condition pos:start="53:8" pos:end="53:16">(<expr pos:start="53:9" pos:end="53:15"><name pos:start="53:9" pos:end="53:11">ret</name> <operator pos:start="53:13" pos:end="53:13">&lt;</operator> <literal type="number" pos:start="53:15" pos:end="53:15">0</literal></expr>)</condition> <block pos:start="53:18" pos:end="61:5">{<block_content pos:start="55:9" pos:end="59:18">

        <expr_stmt pos:start="55:9" pos:end="55:25"><expr pos:start="55:9" pos:end="55:24"><call pos:start="55:9" pos:end="55:24"><name pos:start="55:9" pos:end="55:14">perror</name><argument_list pos:start="55:15" pos:end="55:24">(<argument pos:start="55:16" pos:end="55:23"><expr pos:start="55:16" pos:end="55:23"><literal type="string" pos:start="55:16" pos:end="55:23">"listen"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:18"><expr pos:start="57:9" pos:end="57:17"><call pos:start="57:9" pos:end="57:17"><name pos:start="57:9" pos:end="57:13">close</name><argument_list pos:start="57:14" pos:end="57:17">(<argument pos:start="57:15" pos:end="57:16"><expr pos:start="57:15" pos:end="57:16"><name pos:start="57:15" pos:end="57:16">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="59:9" pos:end="59:18">return <expr pos:start="59:16" pos:end="59:17"><operator pos:start="59:16" pos:end="59:16">-</operator><literal type="number" pos:start="59:17" pos:end="59:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <return pos:start="63:5" pos:end="63:14">return <expr pos:start="63:12" pos:end="63:13"><name pos:start="63:12" pos:end="63:13">fd</name></expr>;</return>

</block_content>}</block></function>
</unit>
