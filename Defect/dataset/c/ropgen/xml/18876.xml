<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18876.c" pos:tabs="8"><function pos:start="1:1" pos:end="147:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">mcf_fec_receive</name><parameter_list pos:start="1:28" pos:end="1:74">(<parameter pos:start="1:29" pos:end="1:40"><decl pos:start="1:29" pos:end="1:40"><type pos:start="1:29" pos:end="1:40"><name pos:start="1:29" pos:end="1:32">void</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:40">opaque</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:60"><decl pos:start="1:43" pos:end="1:60"><type pos:start="1:43" pos:end="1:60"><specifier pos:start="1:43" pos:end="1:47">const</specifier> <name pos:start="1:49" pos:end="1:55">uint8_t</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:60">buf</name></decl></parameter>, <parameter pos:start="1:63" pos:end="1:73"><decl pos:start="1:63" pos:end="1:73"><type pos:start="1:63" pos:end="1:73"><name pos:start="1:63" pos:end="1:68">size_t</name></type> <name pos:start="1:70" pos:end="1:73">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="147:1">{<block_content pos:start="5:5" pos:end="145:22">

    <decl_stmt pos:start="5:5" pos:end="5:47"><decl pos:start="5:5" pos:end="5:46"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">mcf_fec_state</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:20">s</name> <init pos:start="5:22" pos:end="5:46">= <expr pos:start="5:24" pos:end="5:46"><operator pos:start="5:24" pos:end="5:24">(</operator><name pos:start="5:25" pos:end="5:37">mcf_fec_state</name> <operator pos:start="5:39" pos:end="5:39">*</operator><operator pos:start="5:40" pos:end="5:40">)</operator><name pos:start="5:41" pos:end="5:46">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:14">mcf_fec_bd</name></type> <name pos:start="7:16" pos:end="7:17">bd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:18">flags</name> <init pos:start="9:20" pos:end="9:22">= <expr pos:start="9:22" pos:end="9:22"><literal type="number" pos:start="9:22" pos:end="9:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:17">addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:16">crc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:21">buf_addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:21"><decl pos:start="17:5" pos:end="17:20"><type pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:11">uint8_t</name> <modifier pos:start="17:13" pos:end="17:13">*</modifier></type><name pos:start="17:14" pos:end="17:20">crc_ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:25"><decl pos:start="19:5" pos:end="19:24"><type pos:start="19:5" pos:end="19:16"><name pos:start="19:5" pos:end="19:12">unsigned</name> <name pos:start="19:14" pos:end="19:16">int</name></type> <name pos:start="19:18" pos:end="19:24">buf_len</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:36"><expr pos:start="23:5" pos:end="23:35"><call pos:start="23:5" pos:end="23:35"><name pos:start="23:5" pos:end="23:11">DPRINTF</name><argument_list pos:start="23:12" pos:end="23:35">(<argument pos:start="23:13" pos:end="23:28"><expr pos:start="23:13" pos:end="23:28"><literal type="string" pos:start="23:13" pos:end="23:28">"do_rx len %d\n"</literal></expr></argument>, <argument pos:start="23:31" pos:end="23:34"><expr pos:start="23:31" pos:end="23:34"><name pos:start="23:31" pos:end="23:34">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="29:5"><if pos:start="25:5" pos:end="29:5">if <condition pos:start="25:8" pos:end="25:23">(<expr pos:start="25:9" pos:end="25:22"><operator pos:start="25:9" pos:end="25:9">!</operator><name pos:start="25:10" pos:end="25:22"><name pos:start="25:10" pos:end="25:10">s</name><operator pos:start="25:11" pos:end="25:12">-&gt;</operator><name pos:start="25:13" pos:end="25:22">rx_enabled</name></name></expr>)</condition> <block pos:start="25:25" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:64">

        <expr_stmt pos:start="27:9" pos:end="27:64"><expr pos:start="27:9" pos:end="27:63"><call pos:start="27:9" pos:end="27:63"><name pos:start="27:9" pos:end="27:15">fprintf</name><argument_list pos:start="27:16" pos:end="27:63">(<argument pos:start="27:17" pos:end="27:22"><expr pos:start="27:17" pos:end="27:22"><name pos:start="27:17" pos:end="27:22">stderr</name></expr></argument>, <argument pos:start="27:25" pos:end="27:62"><expr pos:start="27:25" pos:end="27:62"><literal type="string" pos:start="27:25" pos:end="27:62">"mcf_fec_receive: Unexpected packet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="31:5" pos:end="31:31">/* 4 bytes for the CRC.  */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:14"><expr pos:start="33:5" pos:end="33:13"><name pos:start="33:5" pos:end="33:8">size</name> <operator pos:start="33:10" pos:end="33:11">+=</operator> <literal type="number" pos:start="33:13" pos:end="33:13">4</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:44"><expr pos:start="35:5" pos:end="35:43"><name pos:start="35:5" pos:end="35:7">crc</name> <operator pos:start="35:9" pos:end="35:9">=</operator> <call pos:start="35:11" pos:end="35:43"><name pos:start="35:11" pos:end="35:21">cpu_to_be32</name><argument_list pos:start="35:22" pos:end="35:43">(<argument pos:start="35:23" pos:end="35:42"><expr pos:start="35:23" pos:end="35:42"><call pos:start="35:23" pos:end="35:42"><name pos:start="35:23" pos:end="35:27">crc32</name><argument_list pos:start="35:28" pos:end="35:42">(<argument pos:start="35:29" pos:end="35:30"><expr pos:start="35:29" pos:end="35:30"><operator pos:start="35:29" pos:end="35:29">~</operator><literal type="number" pos:start="35:30" pos:end="35:30">0</literal></expr></argument>, <argument pos:start="35:33" pos:end="35:35"><expr pos:start="35:33" pos:end="35:35"><name pos:start="35:33" pos:end="35:35">buf</name></expr></argument>, <argument pos:start="35:38" pos:end="35:41"><expr pos:start="35:38" pos:end="35:41"><name pos:start="35:38" pos:end="35:41">size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:30"><expr pos:start="37:5" pos:end="37:29"><name pos:start="37:5" pos:end="37:11">crc_ptr</name> <operator pos:start="37:13" pos:end="37:13">=</operator> <operator pos:start="37:15" pos:end="37:15">(</operator><name pos:start="37:16" pos:end="37:22">uint8_t</name> <operator pos:start="37:24" pos:end="37:24">*</operator><operator pos:start="37:25" pos:end="37:25">)</operator><operator pos:start="37:26" pos:end="37:26">&amp;</operator><name pos:start="37:27" pos:end="37:29">crc</name></expr>;</expr_stmt>

    <comment type="block" pos:start="39:5" pos:end="39:36">/* Huge frames are truncted.  */</comment>

    <if_stmt pos:start="41:5" pos:end="47:5"><if pos:start="41:5" pos:end="47:5">if <condition pos:start="41:8" pos:end="41:34">(<expr pos:start="41:9" pos:end="41:33"><name pos:start="41:9" pos:end="41:12">size</name> <operator pos:start="41:14" pos:end="41:14">&gt;</operator> <name pos:start="41:16" pos:end="41:33">FEC_MAX_FRAME_SIZE</name></expr>)</condition> <block pos:start="41:36" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:39">

        <expr_stmt pos:start="43:9" pos:end="43:34"><expr pos:start="43:9" pos:end="43:33"><name pos:start="43:9" pos:end="43:12">size</name> <operator pos:start="43:14" pos:end="43:14">=</operator> <name pos:start="43:16" pos:end="43:33">FEC_MAX_FRAME_SIZE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:39"><expr pos:start="45:9" pos:end="45:38"><name pos:start="45:9" pos:end="45:13">flags</name> <operator pos:start="45:15" pos:end="45:16">|=</operator> <name pos:start="45:18" pos:end="45:26">FEC_BD_TR</name> <operator pos:start="45:28" pos:end="45:28">|</operator> <name pos:start="45:30" pos:end="45:38">FEC_BD_LG</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="49:5" pos:end="49:66">/* Frames larger than the user limit just set error flags.  */</comment>

    <if_stmt pos:start="51:5" pos:end="55:5"><if pos:start="51:5" pos:end="55:5">if <condition pos:start="51:8" pos:end="51:30">(<expr pos:start="51:9" pos:end="51:29"><name pos:start="51:9" pos:end="51:12">size</name> <operator pos:start="51:14" pos:end="51:14">&gt;</operator> <operator pos:start="51:16" pos:end="51:16">(</operator><name pos:start="51:17" pos:end="51:22"><name pos:start="51:17" pos:end="51:17">s</name><operator pos:start="51:18" pos:end="51:19">-&gt;</operator><name pos:start="51:20" pos:end="51:22">rcr</name></name> <operator pos:start="51:24" pos:end="51:25">&gt;&gt;</operator> <literal type="number" pos:start="51:27" pos:end="51:28">16</literal><operator pos:start="51:29" pos:end="51:29">)</operator></expr>)</condition> <block pos:start="51:32" pos:end="55:5">{<block_content pos:start="53:9" pos:end="53:27">

        <expr_stmt pos:start="53:9" pos:end="53:27"><expr pos:start="53:9" pos:end="53:26"><name pos:start="53:9" pos:end="53:13">flags</name> <operator pos:start="53:15" pos:end="53:16">|=</operator> <name pos:start="53:18" pos:end="53:26">FEC_BD_LG</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:28"><expr pos:start="57:5" pos:end="57:27"><name pos:start="57:5" pos:end="57:8">addr</name> <operator pos:start="57:10" pos:end="57:10">=</operator> <name pos:start="57:12" pos:end="57:27"><name pos:start="57:12" pos:end="57:12">s</name><operator pos:start="57:13" pos:end="57:14">-&gt;</operator><name pos:start="57:15" pos:end="57:27">rx_descriptor</name></name></expr>;</expr_stmt>

    <while pos:start="59:5" pos:end="139:5">while <condition pos:start="59:11" pos:end="59:20">(<expr pos:start="59:12" pos:end="59:19"><name pos:start="59:12" pos:end="59:15">size</name> <operator pos:start="59:17" pos:end="59:17">&gt;</operator> <literal type="number" pos:start="59:19" pos:end="59:19">0</literal></expr>)</condition> <block pos:start="59:22" pos:end="139:5">{<block_content pos:start="61:9" pos:end="137:9">

        <expr_stmt pos:start="61:9" pos:end="61:35"><expr pos:start="61:9" pos:end="61:34"><call pos:start="61:9" pos:end="61:34"><name pos:start="61:9" pos:end="61:23">mcf_fec_read_bd</name><argument_list pos:start="61:24" pos:end="61:34">(<argument pos:start="61:25" pos:end="61:27"><expr pos:start="61:25" pos:end="61:27"><operator pos:start="61:25" pos:end="61:25">&amp;</operator><name pos:start="61:26" pos:end="61:27">bd</name></expr></argument>, <argument pos:start="61:30" pos:end="61:33"><expr pos:start="61:30" pos:end="61:33"><name pos:start="61:30" pos:end="61:33">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="63:9" pos:end="77:9"><if pos:start="63:9" pos:end="77:9">if <condition pos:start="63:12" pos:end="63:39">(<expr pos:start="63:13" pos:end="63:38"><operator pos:start="63:13" pos:end="63:13">(</operator><name pos:start="63:14" pos:end="63:21"><name pos:start="63:14" pos:end="63:15">bd</name><operator pos:start="63:16" pos:end="63:16">.</operator><name pos:start="63:17" pos:end="63:21">flags</name></name> <operator pos:start="63:23" pos:end="63:23">&amp;</operator> <name pos:start="63:25" pos:end="63:32">FEC_BD_E</name><operator pos:start="63:33" pos:end="63:33">)</operator> <operator pos:start="63:35" pos:end="63:36">==</operator> <literal type="number" pos:start="63:38" pos:end="63:38">0</literal></expr>)</condition> <block pos:start="63:41" pos:end="77:9">{<block_content pos:start="73:13" pos:end="75:18">

            <comment type="block" pos:start="65:13" pos:end="65:55">/* No descriptors available.  Bail out.  */</comment>

            <comment type="block" pos:start="67:13" pos:end="71:33">/* FIXME: This is wrong.  We should probably either save the

               remainder for when more RX buffers are available, or

               flag an error.  */</comment>

            <expr_stmt pos:start="73:13" pos:end="73:60"><expr pos:start="73:13" pos:end="73:59"><call pos:start="73:13" pos:end="73:59"><name pos:start="73:13" pos:end="73:19">fprintf</name><argument_list pos:start="73:20" pos:end="73:59">(<argument pos:start="73:21" pos:end="73:26"><expr pos:start="73:21" pos:end="73:26"><name pos:start="73:21" pos:end="73:26">stderr</name></expr></argument>, <argument pos:start="73:29" pos:end="73:58"><expr pos:start="73:29" pos:end="73:58"><literal type="string" pos:start="73:29" pos:end="73:58">"mcf_fec: Lost end of frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="75:13" pos:end="75:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:54"><expr pos:start="79:9" pos:end="79:53"><name pos:start="79:9" pos:end="79:15">buf_len</name> <operator pos:start="79:17" pos:end="79:17">=</operator> <ternary pos:start="79:19" pos:end="79:53"><condition pos:start="79:19" pos:end="79:38"><expr pos:start="79:19" pos:end="79:36"><operator pos:start="79:19" pos:end="79:19">(</operator><name pos:start="79:20" pos:end="79:23">size</name> <operator pos:start="79:25" pos:end="79:26">&lt;=</operator> <name pos:start="79:28" pos:end="79:35"><name pos:start="79:28" pos:end="79:28">s</name><operator pos:start="79:29" pos:end="79:30">-&gt;</operator><name pos:start="79:31" pos:end="79:35">emrbr</name></name><operator pos:start="79:36" pos:end="79:36">)</operator></expr> ?</condition><then pos:start="79:40" pos:end="79:43"> <expr pos:start="79:40" pos:end="79:43"><name pos:start="79:40" pos:end="79:43">size</name></expr></then><else pos:start="79:44" pos:end="79:53">: <expr pos:start="79:46" pos:end="79:53"><name pos:start="79:46" pos:end="79:53"><name pos:start="79:46" pos:end="79:46">s</name><operator pos:start="79:47" pos:end="79:48">-&gt;</operator><name pos:start="79:49" pos:end="79:53">emrbr</name></name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:28"><expr pos:start="81:9" pos:end="81:27"><name pos:start="81:9" pos:end="81:17"><name pos:start="81:9" pos:end="81:10">bd</name><operator pos:start="81:11" pos:end="81:11">.</operator><name pos:start="81:12" pos:end="81:17">length</name></name> <operator pos:start="81:19" pos:end="81:19">=</operator> <name pos:start="81:21" pos:end="81:27">buf_len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:24"><expr pos:start="83:9" pos:end="83:23"><name pos:start="83:9" pos:end="83:12">size</name> <operator pos:start="83:14" pos:end="83:15">-=</operator> <name pos:start="83:17" pos:end="83:23">buf_len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:57"><expr pos:start="85:9" pos:end="85:56"><call pos:start="85:9" pos:end="85:56"><name pos:start="85:9" pos:end="85:15">DPRINTF</name><argument_list pos:start="85:16" pos:end="85:56">(<argument pos:start="85:17" pos:end="85:38"><expr pos:start="85:17" pos:end="85:38"><literal type="string" pos:start="85:17" pos:end="85:38">"rx_bd %x length %d\n"</literal></expr></argument>, <argument pos:start="85:41" pos:end="85:44"><expr pos:start="85:41" pos:end="85:44"><name pos:start="85:41" pos:end="85:44">addr</name></expr></argument>, <argument pos:start="85:47" pos:end="85:55"><expr pos:start="85:47" pos:end="85:55"><name pos:start="85:47" pos:end="85:55"><name pos:start="85:47" pos:end="85:48">bd</name><operator pos:start="85:49" pos:end="85:49">.</operator><name pos:start="85:50" pos:end="85:55">length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="87:9" pos:end="87:44">/* The last 4 bytes are the CRC.  */</comment>

        <if_stmt pos:start="89:9" pos:end="91:32"><if pos:start="89:9" pos:end="91:32">if <condition pos:start="89:12" pos:end="89:21">(<expr pos:start="89:13" pos:end="89:20"><name pos:start="89:13" pos:end="89:16">size</name> <operator pos:start="89:18" pos:end="89:18">&lt;</operator> <literal type="number" pos:start="89:20" pos:end="89:20">4</literal></expr>)</condition><block type="pseudo" pos:start="91:13" pos:end="91:32"><block_content pos:start="91:13" pos:end="91:32">

            <expr_stmt pos:start="91:13" pos:end="91:32"><expr pos:start="91:13" pos:end="91:31"><name pos:start="91:13" pos:end="91:19">buf_len</name> <operator pos:start="91:21" pos:end="91:22">+=</operator> <name pos:start="91:24" pos:end="91:27">size</name> <operator pos:start="91:29" pos:end="91:29">-</operator> <literal type="number" pos:start="91:31" pos:end="91:31">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:27"><expr pos:start="93:9" pos:end="93:26"><name pos:start="93:9" pos:end="93:16">buf_addr</name> <operator pos:start="93:18" pos:end="93:18">=</operator> <name pos:start="93:20" pos:end="93:26"><name pos:start="93:20" pos:end="93:21">bd</name><operator pos:start="93:22" pos:end="93:22">.</operator><name pos:start="93:23" pos:end="93:26">data</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:58"><expr pos:start="95:9" pos:end="95:57"><call pos:start="95:9" pos:end="95:57"><name pos:start="95:9" pos:end="95:33">cpu_physical_memory_write</name><argument_list pos:start="95:34" pos:end="95:57">(<argument pos:start="95:35" pos:end="95:42"><expr pos:start="95:35" pos:end="95:42"><name pos:start="95:35" pos:end="95:42">buf_addr</name></expr></argument>, <argument pos:start="95:45" pos:end="95:47"><expr pos:start="95:45" pos:end="95:47"><name pos:start="95:45" pos:end="95:47">buf</name></expr></argument>, <argument pos:start="95:50" pos:end="95:56"><expr pos:start="95:50" pos:end="95:56"><name pos:start="95:50" pos:end="95:56">buf_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:23"><expr pos:start="97:9" pos:end="97:22"><name pos:start="97:9" pos:end="97:11">buf</name> <operator pos:start="97:13" pos:end="97:14">+=</operator> <name pos:start="97:16" pos:end="97:22">buf_len</name></expr>;</expr_stmt>

        <if_stmt pos:start="99:9" pos:end="105:9"><if pos:start="99:9" pos:end="105:9">if <condition pos:start="99:12" pos:end="99:21">(<expr pos:start="99:13" pos:end="99:20"><name pos:start="99:13" pos:end="99:16">size</name> <operator pos:start="99:18" pos:end="99:18">&lt;</operator> <literal type="number" pos:start="99:20" pos:end="99:20">4</literal></expr>)</condition> <block pos:start="99:23" pos:end="105:9">{<block_content pos:start="101:13" pos:end="103:32">

            <expr_stmt pos:start="101:13" pos:end="101:77"><expr pos:start="101:13" pos:end="101:76"><call pos:start="101:13" pos:end="101:76"><name pos:start="101:13" pos:end="101:37">cpu_physical_memory_write</name><argument_list pos:start="101:38" pos:end="101:76">(<argument pos:start="101:39" pos:end="101:56"><expr pos:start="101:39" pos:end="101:56"><name pos:start="101:39" pos:end="101:46">buf_addr</name> <operator pos:start="101:48" pos:end="101:48">+</operator> <name pos:start="101:50" pos:end="101:56">buf_len</name></expr></argument>, <argument pos:start="101:59" pos:end="101:65"><expr pos:start="101:59" pos:end="101:65"><name pos:start="101:59" pos:end="101:65">crc_ptr</name></expr></argument>, <argument pos:start="101:68" pos:end="101:75"><expr pos:start="101:68" pos:end="101:75"><literal type="number" pos:start="101:68" pos:end="101:70">4</literal> <operator pos:start="101:70" pos:end="101:70">-</operator> <name pos:start="101:72" pos:end="101:75">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:32"><expr pos:start="103:13" pos:end="103:31"><name pos:start="103:13" pos:end="103:19">crc_ptr</name> <operator pos:start="103:21" pos:end="103:22">+=</operator> <literal type="number" pos:start="103:24" pos:end="103:26">4</literal> <operator pos:start="103:26" pos:end="103:26">-</operator> <name pos:start="103:28" pos:end="103:31">size</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:30"><expr pos:start="107:9" pos:end="107:29"><name pos:start="107:9" pos:end="107:16"><name pos:start="107:9" pos:end="107:10">bd</name><operator pos:start="107:11" pos:end="107:11">.</operator><name pos:start="107:12" pos:end="107:16">flags</name></name> <operator pos:start="107:18" pos:end="107:19">&amp;=</operator> <operator pos:start="107:21" pos:end="107:21">~</operator><name pos:start="107:22" pos:end="107:29">FEC_BD_E</name></expr>;</expr_stmt>

        <if_stmt pos:start="109:9" pos:end="123:9"><if pos:start="109:9" pos:end="119:9">if <condition pos:start="109:12" pos:end="109:22">(<expr pos:start="109:13" pos:end="109:21"><name pos:start="109:13" pos:end="109:16">size</name> <operator pos:start="109:18" pos:end="109:19">==</operator> <literal type="number" pos:start="109:21" pos:end="109:21">0</literal></expr>)</condition> <block pos:start="109:24" pos:end="119:9">{<block_content pos:start="113:13" pos:end="117:34">

            <comment type="block" pos:start="111:13" pos:end="111:40">/* Last buffer in frame.  */</comment>

            <expr_stmt pos:start="113:13" pos:end="113:41"><expr pos:start="113:13" pos:end="113:40"><name pos:start="113:13" pos:end="113:20"><name pos:start="113:13" pos:end="113:14">bd</name><operator pos:start="113:15" pos:end="113:15">.</operator><name pos:start="113:16" pos:end="113:20">flags</name></name> <operator pos:start="113:22" pos:end="113:23">|=</operator> <name pos:start="113:25" pos:end="113:29">flags</name> <operator pos:start="113:31" pos:end="113:31">|</operator> <name pos:start="113:33" pos:end="113:40">FEC_BD_L</name></expr>;</expr_stmt>

            <expr_stmt pos:start="115:13" pos:end="115:55"><expr pos:start="115:13" pos:end="115:54"><call pos:start="115:13" pos:end="115:54"><name pos:start="115:13" pos:end="115:19">DPRINTF</name><argument_list pos:start="115:20" pos:end="115:54">(<argument pos:start="115:21" pos:end="115:43"><expr pos:start="115:21" pos:end="115:43"><literal type="string" pos:start="115:21" pos:end="115:43">"rx frame flags %04x\n"</literal></expr></argument>, <argument pos:start="115:46" pos:end="115:53"><expr pos:start="115:46" pos:end="115:53"><name pos:start="115:46" pos:end="115:53"><name pos:start="115:46" pos:end="115:47">bd</name><operator pos:start="115:48" pos:end="115:48">.</operator><name pos:start="115:49" pos:end="115:53">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="117:13" pos:end="117:34"><expr pos:start="117:13" pos:end="117:33"><name pos:start="117:13" pos:end="117:18"><name pos:start="117:13" pos:end="117:13">s</name><operator pos:start="117:14" pos:end="117:15">-&gt;</operator><name pos:start="117:16" pos:end="117:18">eir</name></name> <operator pos:start="117:20" pos:end="117:21">|=</operator> <name pos:start="117:23" pos:end="117:33">FEC_INT_RXF</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="119:11" pos:end="123:9">else <block pos:start="119:16" pos:end="123:9">{<block_content pos:start="121:13" pos:end="121:34">

            <expr_stmt pos:start="121:13" pos:end="121:34"><expr pos:start="121:13" pos:end="121:33"><name pos:start="121:13" pos:end="121:18"><name pos:start="121:13" pos:end="121:13">s</name><operator pos:start="121:14" pos:end="121:15">-&gt;</operator><name pos:start="121:16" pos:end="121:18">eir</name></name> <operator pos:start="121:20" pos:end="121:21">|=</operator> <name pos:start="121:23" pos:end="121:33">FEC_INT_RXB</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:36"><expr pos:start="125:9" pos:end="125:35"><call pos:start="125:9" pos:end="125:35"><name pos:start="125:9" pos:end="125:24">mcf_fec_write_bd</name><argument_list pos:start="125:25" pos:end="125:35">(<argument pos:start="125:26" pos:end="125:28"><expr pos:start="125:26" pos:end="125:28"><operator pos:start="125:26" pos:end="125:26">&amp;</operator><name pos:start="125:27" pos:end="125:28">bd</name></expr></argument>, <argument pos:start="125:31" pos:end="125:34"><expr pos:start="125:31" pos:end="125:34"><name pos:start="125:31" pos:end="125:34">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="127:9" pos:end="127:46">/* Advance to the next descriptor.  */</comment>

        <if_stmt pos:start="129:9" pos:end="137:9"><if pos:start="129:9" pos:end="133:9">if <condition pos:start="129:12" pos:end="129:39">(<expr pos:start="129:13" pos:end="129:38"><operator pos:start="129:13" pos:end="129:13">(</operator><name pos:start="129:14" pos:end="129:21"><name pos:start="129:14" pos:end="129:15">bd</name><operator pos:start="129:16" pos:end="129:16">.</operator><name pos:start="129:17" pos:end="129:21">flags</name></name> <operator pos:start="129:23" pos:end="129:23">&amp;</operator> <name pos:start="129:25" pos:end="129:32">FEC_BD_W</name><operator pos:start="129:33" pos:end="129:33">)</operator> <operator pos:start="129:35" pos:end="129:36">!=</operator> <literal type="number" pos:start="129:38" pos:end="129:38">0</literal></expr>)</condition> <block pos:start="129:41" pos:end="133:9">{<block_content pos:start="131:13" pos:end="131:28">

            <expr_stmt pos:start="131:13" pos:end="131:28"><expr pos:start="131:13" pos:end="131:27"><name pos:start="131:13" pos:end="131:16">addr</name> <operator pos:start="131:18" pos:end="131:18">=</operator> <name pos:start="131:20" pos:end="131:27"><name pos:start="131:20" pos:end="131:20">s</name><operator pos:start="131:21" pos:end="131:22">-&gt;</operator><name pos:start="131:23" pos:end="131:27">erdsr</name></name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="133:11" pos:end="137:9">else <block pos:start="133:16" pos:end="137:9">{<block_content pos:start="135:13" pos:end="135:22">

            <expr_stmt pos:start="135:13" pos:end="135:22"><expr pos:start="135:13" pos:end="135:21"><name pos:start="135:13" pos:end="135:16">addr</name> <operator pos:start="135:18" pos:end="135:19">+=</operator> <literal type="number" pos:start="135:21" pos:end="135:21">8</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="141:5" pos:end="141:28"><expr pos:start="141:5" pos:end="141:27"><name pos:start="141:5" pos:end="141:20"><name pos:start="141:5" pos:end="141:5">s</name><operator pos:start="141:6" pos:end="141:7">-&gt;</operator><name pos:start="141:8" pos:end="141:20">rx_descriptor</name></name> <operator pos:start="141:22" pos:end="141:22">=</operator> <name pos:start="141:24" pos:end="141:27">addr</name></expr>;</expr_stmt>

    <expr_stmt pos:start="143:5" pos:end="143:25"><expr pos:start="143:5" pos:end="143:24"><call pos:start="143:5" pos:end="143:24"><name pos:start="143:5" pos:end="143:21">mcf_fec_enable_rx</name><argument_list pos:start="143:22" pos:end="143:24">(<argument pos:start="143:23" pos:end="143:23"><expr pos:start="143:23" pos:end="143:23"><name pos:start="143:23" pos:end="143:23">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="145:5" pos:end="145:22"><expr pos:start="145:5" pos:end="145:21"><call pos:start="145:5" pos:end="145:21"><name pos:start="145:5" pos:end="145:18">mcf_fec_update</name><argument_list pos:start="145:19" pos:end="145:21">(<argument pos:start="145:20" pos:end="145:20"><expr pos:start="145:20" pos:end="145:20"><name pos:start="145:20" pos:end="145:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
