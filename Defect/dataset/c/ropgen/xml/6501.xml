<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6501.c" pos:tabs="8"><function pos:start="1:1" pos:end="445:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">bink_decode_plane</name><parameter_list pos:start="1:29" pos:end="3:58">(<parameter pos:start="1:30" pos:end="1:43"><decl pos:start="1:30" pos:end="1:43"><type pos:start="1:30" pos:end="1:43"><name pos:start="1:30" pos:end="1:40">BinkContext</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:43">c</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:59"><decl pos:start="1:46" pos:end="1:59"><type pos:start="1:46" pos:end="1:59"><name pos:start="1:46" pos:end="1:52">AVFrame</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:59">frame</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:78"><decl pos:start="1:62" pos:end="1:78"><type pos:start="1:62" pos:end="1:78"><name pos:start="1:62" pos:end="1:74">GetBitContext</name> <modifier pos:start="1:76" pos:end="1:76">*</modifier></type><name pos:start="1:77" pos:end="1:78">gb</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:42"><decl pos:start="3:30" pos:end="3:42"><type pos:start="3:30" pos:end="3:42"><name pos:start="3:30" pos:end="3:32">int</name></type> <name pos:start="3:34" pos:end="3:42">plane_idx</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:57"><decl pos:start="3:45" pos:end="3:57"><type pos:start="3:45" pos:end="3:57"><name pos:start="3:45" pos:end="3:47">int</name></type> <name pos:start="3:49" pos:end="3:57">is_chroma</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="445:1">{<block_content pos:start="7:5" pos:end="443:13">

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">blk</name></decl>, <decl pos:start="7:14" pos:end="7:16"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:14" pos:end="7:16">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>, <decl pos:start="9:12" pos:end="9:12"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:12">j</name></decl>, <decl pos:start="9:15" pos:end="9:16"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:15" pos:end="9:16">bx</name></decl>, <decl pos:start="9:19" pos:end="9:20"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:19" pos:end="9:20">by</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:52"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">uint8_t</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:16">dst</name></decl>, <decl pos:start="11:19" pos:end="11:23"><type ref="prev" pos:start="11:5" pos:end="11:13"><modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:23">prev</name></decl>, <decl pos:start="11:26" pos:end="11:29"><type ref="prev" pos:start="11:5" pos:end="11:13"><modifier pos:start="11:26" pos:end="11:26">*</modifier></type><name pos:start="11:27" pos:end="11:29">ref</name></decl>, <decl pos:start="11:32" pos:end="11:41"><type ref="prev" pos:start="11:5" pos:end="11:13"><modifier pos:start="11:32" pos:end="11:32">*</modifier></type><name pos:start="11:33" pos:end="11:41">ref_start</name></decl>, <decl pos:start="11:44" pos:end="11:51"><type ref="prev" pos:start="11:5" pos:end="11:13"><modifier pos:start="11:44" pos:end="11:44">*</modifier></type><name pos:start="11:45" pos:end="11:51">ref_end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">v</name></decl>, <decl pos:start="13:12" pos:end="13:17"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:12" pos:end="13:17"><name pos:start="13:12" pos:end="13:14">col</name><index pos:start="13:15" pos:end="13:17">[<expr pos:start="13:16" pos:end="13:16"><literal type="number" pos:start="13:16" pos:end="13:16">2</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:24"><decl pos:start="15:5" pos:end="15:23"><type pos:start="15:5" pos:end="15:19"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:17">uint8_t</name> <modifier pos:start="15:19" pos:end="15:19">*</modifier></type><name pos:start="15:20" pos:end="15:23">scan</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:12"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:12">xoff</name></decl>, <decl pos:start="17:15" pos:end="17:18"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:15" pos:end="17:18">yoff</name></decl>;</decl_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:43"><expr pos:start="19:5" pos:end="19:42"><call pos:start="19:5" pos:end="19:42"><name pos:start="19:5" pos:end="19:20">LOCAL_ALIGNED_16</name><argument_list pos:start="19:21" pos:end="19:42">(<argument pos:start="19:22" pos:end="19:28"><expr pos:start="19:22" pos:end="19:28"><name pos:start="19:22" pos:end="19:28">int16_t</name></expr></argument>, <argument pos:start="19:31" pos:end="19:35"><expr pos:start="19:31" pos:end="19:35"><name pos:start="19:31" pos:end="19:35">block</name></expr></argument>, <argument pos:start="19:38" pos:end="19:41"><expr pos:start="19:38" pos:end="19:41"><index pos:start="19:38" pos:end="19:41">[<expr pos:start="19:39" pos:end="19:40"><literal type="number" pos:start="19:39" pos:end="19:40">64</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:44"><expr pos:start="21:5" pos:end="21:43"><call pos:start="21:5" pos:end="21:43"><name pos:start="21:5" pos:end="21:20">LOCAL_ALIGNED_16</name><argument_list pos:start="21:21" pos:end="21:43">(<argument pos:start="21:22" pos:end="21:28"><expr pos:start="21:22" pos:end="21:28"><name pos:start="21:22" pos:end="21:28">uint8_t</name></expr></argument>, <argument pos:start="21:31" pos:end="21:36"><expr pos:start="21:31" pos:end="21:36"><name pos:start="21:31" pos:end="21:36">ublock</name></expr></argument>, <argument pos:start="21:39" pos:end="21:42"><expr pos:start="21:39" pos:end="21:42"><index pos:start="21:39" pos:end="21:42">[<expr pos:start="21:40" pos:end="21:41"><literal type="number" pos:start="21:40" pos:end="21:41">64</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:46"><expr pos:start="23:5" pos:end="23:45"><call pos:start="23:5" pos:end="23:45"><name pos:start="23:5" pos:end="23:20">LOCAL_ALIGNED_16</name><argument_list pos:start="23:21" pos:end="23:45">(<argument pos:start="23:22" pos:end="23:28"><expr pos:start="23:22" pos:end="23:28"><name pos:start="23:22" pos:end="23:28">int32_t</name></expr></argument>, <argument pos:start="23:31" pos:end="23:38"><expr pos:start="23:31" pos:end="23:38"><name pos:start="23:31" pos:end="23:38">dctblock</name></expr></argument>, <argument pos:start="23:41" pos:end="23:44"><expr pos:start="23:41" pos:end="23:44"><index pos:start="23:41" pos:end="23:44">[<expr pos:start="23:42" pos:end="23:43"><literal type="number" pos:start="23:42" pos:end="23:43">64</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:21"><decl pos:start="25:5" pos:end="25:20"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:20"><name pos:start="25:9" pos:end="25:16">coordmap</name><index pos:start="25:17" pos:end="25:20">[<expr pos:start="25:18" pos:end="25:19"><literal type="number" pos:start="25:18" pos:end="25:19">64</literal></expr>]</index></name></decl>;</decl_stmt>



    <decl_stmt pos:start="29:5" pos:end="29:50"><decl pos:start="29:5" pos:end="29:49"><type pos:start="29:5" pos:end="29:13"><specifier pos:start="29:5" pos:end="29:9">const</specifier> <name pos:start="29:11" pos:end="29:13">int</name></type> <name pos:start="29:15" pos:end="29:20">stride</name> <init pos:start="29:22" pos:end="29:49">= <expr pos:start="29:24" pos:end="29:49"><name pos:start="29:24" pos:end="29:49"><name pos:start="29:24" pos:end="29:28">frame</name><operator pos:start="29:29" pos:end="29:30">-&gt;</operator><name pos:start="29:31" pos:end="29:38">linesize</name><index pos:start="29:39" pos:end="29:49">[<expr pos:start="29:40" pos:end="29:48"><name pos:start="29:40" pos:end="29:48">plane_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:84"><decl pos:start="31:5" pos:end="31:83"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:10">bw</name> <init pos:start="31:12" pos:end="31:83">= <expr pos:start="31:14" pos:end="31:83"><ternary pos:start="31:14" pos:end="31:83"><condition pos:start="31:14" pos:end="31:24"><expr pos:start="31:14" pos:end="31:22"><name pos:start="31:14" pos:end="31:22">is_chroma</name></expr> ?</condition><then pos:start="31:26" pos:end="31:53"> <expr pos:start="31:26" pos:end="31:53"><operator pos:start="31:26" pos:end="31:26">(</operator><name pos:start="31:27" pos:end="31:41"><name pos:start="31:27" pos:end="31:27">c</name><operator pos:start="31:28" pos:end="31:29">-&gt;</operator><name pos:start="31:30" pos:end="31:34">avctx</name><operator pos:start="31:35" pos:end="31:36">-&gt;</operator><name pos:start="31:37" pos:end="31:41">width</name></name>  <operator pos:start="31:44" pos:end="31:44">+</operator> <literal type="number" pos:start="31:46" pos:end="31:47">15</literal><operator pos:start="31:48" pos:end="31:48">)</operator> <operator pos:start="31:50" pos:end="31:51">&gt;&gt;</operator> <literal type="number" pos:start="31:53" pos:end="31:53">4</literal></expr> </then><else pos:start="31:55" pos:end="31:83">: <expr pos:start="31:57" pos:end="31:83"><operator pos:start="31:57" pos:end="31:57">(</operator><name pos:start="31:58" pos:end="31:72"><name pos:start="31:58" pos:end="31:58">c</name><operator pos:start="31:59" pos:end="31:60">-&gt;</operator><name pos:start="31:61" pos:end="31:65">avctx</name><operator pos:start="31:66" pos:end="31:67">-&gt;</operator><name pos:start="31:68" pos:end="31:72">width</name></name>  <operator pos:start="31:75" pos:end="31:75">+</operator> <literal type="number" pos:start="31:77" pos:end="31:77">7</literal><operator pos:start="31:78" pos:end="31:78">)</operator> <operator pos:start="31:80" pos:end="31:81">&gt;&gt;</operator> <literal type="number" pos:start="31:83" pos:end="31:83">3</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:84"><decl pos:start="33:5" pos:end="33:83"><type pos:start="33:5" pos:end="33:7"><name pos:start="33:5" pos:end="33:7">int</name></type> <name pos:start="33:9" pos:end="33:10">bh</name> <init pos:start="33:12" pos:end="33:83">= <expr pos:start="33:14" pos:end="33:83"><ternary pos:start="33:14" pos:end="33:83"><condition pos:start="33:14" pos:end="33:24"><expr pos:start="33:14" pos:end="33:22"><name pos:start="33:14" pos:end="33:22">is_chroma</name></expr> ?</condition><then pos:start="33:26" pos:end="33:53"> <expr pos:start="33:26" pos:end="33:53"><operator pos:start="33:26" pos:end="33:26">(</operator><name pos:start="33:27" pos:end="33:42"><name pos:start="33:27" pos:end="33:27">c</name><operator pos:start="33:28" pos:end="33:29">-&gt;</operator><name pos:start="33:30" pos:end="33:34">avctx</name><operator pos:start="33:35" pos:end="33:36">-&gt;</operator><name pos:start="33:37" pos:end="33:42">height</name></name> <operator pos:start="33:44" pos:end="33:44">+</operator> <literal type="number" pos:start="33:46" pos:end="33:47">15</literal><operator pos:start="33:48" pos:end="33:48">)</operator> <operator pos:start="33:50" pos:end="33:51">&gt;&gt;</operator> <literal type="number" pos:start="33:53" pos:end="33:53">4</literal></expr> </then><else pos:start="33:55" pos:end="33:83">: <expr pos:start="33:57" pos:end="33:83"><operator pos:start="33:57" pos:end="33:57">(</operator><name pos:start="33:58" pos:end="33:73"><name pos:start="33:58" pos:end="33:58">c</name><operator pos:start="33:59" pos:end="33:60">-&gt;</operator><name pos:start="33:61" pos:end="33:65">avctx</name><operator pos:start="33:66" pos:end="33:67">-&gt;</operator><name pos:start="33:68" pos:end="33:73">height</name></name> <operator pos:start="33:75" pos:end="33:75">+</operator> <literal type="number" pos:start="33:77" pos:end="33:77">7</literal><operator pos:start="33:78" pos:end="33:78">)</operator> <operator pos:start="33:80" pos:end="33:81">&gt;&gt;</operator> <literal type="number" pos:start="33:83" pos:end="33:83">3</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:45"><decl pos:start="35:5" pos:end="35:44"><type pos:start="35:5" pos:end="35:7"><name pos:start="35:5" pos:end="35:7">int</name></type> <name pos:start="35:9" pos:end="35:13">width</name> <init pos:start="35:15" pos:end="35:44">= <expr pos:start="35:17" pos:end="35:44"><name pos:start="35:17" pos:end="35:31"><name pos:start="35:17" pos:end="35:17">c</name><operator pos:start="35:18" pos:end="35:19">-&gt;</operator><name pos:start="35:20" pos:end="35:24">avctx</name><operator pos:start="35:25" pos:end="35:26">-&gt;</operator><name pos:start="35:27" pos:end="35:31">width</name></name> <operator pos:start="35:33" pos:end="35:34">&gt;&gt;</operator> <name pos:start="35:36" pos:end="35:44">is_chroma</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:41"><expr pos:start="39:5" pos:end="39:40"><call pos:start="39:5" pos:end="39:40"><name pos:start="39:5" pos:end="39:16">init_lengths</name><argument_list pos:start="39:17" pos:end="39:40">(<argument pos:start="39:18" pos:end="39:18"><expr pos:start="39:18" pos:end="39:18"><name pos:start="39:18" pos:end="39:18">c</name></expr></argument>, <argument pos:start="39:21" pos:end="39:35"><expr pos:start="39:21" pos:end="39:35"><call pos:start="39:21" pos:end="39:35"><name pos:start="39:21" pos:end="39:25">FFMAX</name><argument_list pos:start="39:26" pos:end="39:35">(<argument pos:start="39:27" pos:end="39:31"><expr pos:start="39:27" pos:end="39:31"><name pos:start="39:27" pos:end="39:31">width</name></expr></argument>, <argument pos:start="39:34" pos:end="39:34"><expr pos:start="39:34" pos:end="39:34"><literal type="number" pos:start="39:34" pos:end="39:34">8</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="39:38" pos:end="39:39"><expr pos:start="39:38" pos:end="39:39"><name pos:start="39:38" pos:end="39:39">bw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="41:5" pos:end="43:30">for <control pos:start="41:9" pos:end="41:37">(<init pos:start="41:10" pos:end="41:15"><expr pos:start="41:10" pos:end="41:14"><name pos:start="41:10" pos:end="41:10">i</name> <operator pos:start="41:12" pos:end="41:12">=</operator> <literal type="number" pos:start="41:14" pos:end="41:14">0</literal></expr>;</init> <condition pos:start="41:17" pos:end="41:32"><expr pos:start="41:17" pos:end="41:31"><name pos:start="41:17" pos:end="41:17">i</name> <operator pos:start="41:19" pos:end="41:19">&lt;</operator> <name pos:start="41:21" pos:end="41:31">BINK_NB_SRC</name></expr>;</condition> <incr pos:start="41:34" pos:end="41:36"><expr pos:start="41:34" pos:end="41:36"><name pos:start="41:34" pos:end="41:34">i</name><operator pos:start="41:35" pos:end="41:36">++</operator></expr></incr>)</control><block type="pseudo" pos:start="43:9" pos:end="43:30"><block_content pos:start="43:9" pos:end="43:30">

        <expr_stmt pos:start="43:9" pos:end="43:30"><expr pos:start="43:9" pos:end="43:29"><call pos:start="43:9" pos:end="43:29"><name pos:start="43:9" pos:end="43:19">read_bundle</name><argument_list pos:start="43:20" pos:end="43:29">(<argument pos:start="43:21" pos:end="43:22"><expr pos:start="43:21" pos:end="43:22"><name pos:start="43:21" pos:end="43:22">gb</name></expr></argument>, <argument pos:start="43:25" pos:end="43:25"><expr pos:start="43:25" pos:end="43:25"><name pos:start="43:25" pos:end="43:25">c</name></expr></argument>, <argument pos:start="43:28" pos:end="43:28"><expr pos:start="43:28" pos:end="43:28"><name pos:start="43:28" pos:end="43:28">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <expr_stmt pos:start="47:5" pos:end="49:66"><expr pos:start="47:5" pos:end="49:65"><name pos:start="47:5" pos:end="47:13">ref_start</name> <operator pos:start="47:15" pos:end="47:15">=</operator> <ternary pos:start="47:17" pos:end="49:65"><condition pos:start="47:17" pos:end="47:42"><expr pos:start="47:17" pos:end="47:40"><name pos:start="47:17" pos:end="47:40"><name pos:start="47:17" pos:end="47:17">c</name><operator pos:start="47:18" pos:end="47:19">-&gt;</operator><name pos:start="47:20" pos:end="47:23">last</name><operator pos:start="47:24" pos:end="47:25">-&gt;</operator><name pos:start="47:26" pos:end="47:29">data</name><index pos:start="47:30" pos:end="47:40">[<expr pos:start="47:31" pos:end="47:39"><name pos:start="47:31" pos:end="47:39">plane_idx</name></expr>]</index></name></expr> ?</condition><then pos:start="47:44" pos:end="47:67"> <expr pos:start="47:44" pos:end="47:67"><name pos:start="47:44" pos:end="47:67"><name pos:start="47:44" pos:end="47:44">c</name><operator pos:start="47:45" pos:end="47:46">-&gt;</operator><name pos:start="47:47" pos:end="47:50">last</name><operator pos:start="47:51" pos:end="47:52">-&gt;</operator><name pos:start="47:53" pos:end="47:56">data</name><index pos:start="47:57" pos:end="47:67">[<expr pos:start="47:58" pos:end="47:66"><name pos:start="47:58" pos:end="47:66">plane_idx</name></expr>]</index></name></expr>

                                         </then><else pos:start="49:42" pos:end="49:65">: <expr pos:start="49:44" pos:end="49:65"><name pos:start="49:44" pos:end="49:65"><name pos:start="49:44" pos:end="49:48">frame</name><operator pos:start="49:49" pos:end="49:50">-&gt;</operator><name pos:start="49:51" pos:end="49:54">data</name><index pos:start="49:55" pos:end="49:65">[<expr pos:start="49:56" pos:end="49:64"><name pos:start="49:56" pos:end="49:64">plane_idx</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="53:73"><expr pos:start="51:5" pos:end="53:72"><name pos:start="51:5" pos:end="51:11">ref_end</name>   <operator pos:start="51:15" pos:end="51:15">=</operator> <name pos:start="51:17" pos:end="51:25">ref_start</name>

                <operator pos:start="53:17" pos:end="53:17">+</operator> <operator pos:start="53:19" pos:end="53:19">(</operator><name pos:start="53:20" pos:end="53:21">bw</name> <operator pos:start="53:23" pos:end="53:23">-</operator> <literal type="number" pos:start="53:25" pos:end="53:27">1</literal> <operator pos:start="53:27" pos:end="53:27">+</operator> <name pos:start="53:29" pos:end="53:56"><name pos:start="53:29" pos:end="53:29">c</name><operator pos:start="53:30" pos:end="53:31">-&gt;</operator><name pos:start="53:32" pos:end="53:35">last</name><operator pos:start="53:36" pos:end="53:37">-&gt;</operator><name pos:start="53:38" pos:end="53:45">linesize</name><index pos:start="53:46" pos:end="53:56">[<expr pos:start="53:47" pos:end="53:55"><name pos:start="53:47" pos:end="53:55">plane_idx</name></expr>]</index></name> <operator pos:start="53:58" pos:end="53:58">*</operator> <operator pos:start="53:60" pos:end="53:60">(</operator><name pos:start="53:61" pos:end="53:62">bh</name> <operator pos:start="53:64" pos:end="53:64">-</operator> <literal type="number" pos:start="53:66" pos:end="53:66">1</literal><operator pos:start="53:67" pos:end="53:67">)</operator><operator pos:start="53:68" pos:end="53:68">)</operator> <operator pos:start="53:70" pos:end="53:70">*</operator> <literal type="number" pos:start="53:72" pos:end="53:72">8</literal></expr>;</expr_stmt>



    <for pos:start="57:5" pos:end="59:50">for <control pos:start="57:9" pos:end="57:28">(<init pos:start="57:10" pos:end="57:15"><expr pos:start="57:10" pos:end="57:14"><name pos:start="57:10" pos:end="57:10">i</name> <operator pos:start="57:12" pos:end="57:12">=</operator> <literal type="number" pos:start="57:14" pos:end="57:14">0</literal></expr>;</init> <condition pos:start="57:17" pos:end="57:23"><expr pos:start="57:17" pos:end="57:22"><name pos:start="57:17" pos:end="57:17">i</name> <operator pos:start="57:19" pos:end="57:19">&lt;</operator> <literal type="number" pos:start="57:21" pos:end="57:22">64</literal></expr>;</condition> <incr pos:start="57:25" pos:end="57:27"><expr pos:start="57:25" pos:end="57:27"><name pos:start="57:25" pos:end="57:25">i</name><operator pos:start="57:26" pos:end="57:27">++</operator></expr></incr>)</control><block type="pseudo" pos:start="59:9" pos:end="59:50"><block_content pos:start="59:9" pos:end="59:50">

        <expr_stmt pos:start="59:9" pos:end="59:50"><expr pos:start="59:9" pos:end="59:49"><name pos:start="59:9" pos:end="59:19"><name pos:start="59:9" pos:end="59:16">coordmap</name><index pos:start="59:17" pos:end="59:19">[<expr pos:start="59:18" pos:end="59:18"><name pos:start="59:18" pos:end="59:18">i</name></expr>]</index></name> <operator pos:start="59:21" pos:end="59:21">=</operator> <operator pos:start="59:23" pos:end="59:23">(</operator><name pos:start="59:24" pos:end="59:24">i</name> <operator pos:start="59:26" pos:end="59:26">&amp;</operator> <literal type="number" pos:start="59:28" pos:end="59:28">7</literal><operator pos:start="59:29" pos:end="59:29">)</operator> <operator pos:start="59:31" pos:end="59:31">+</operator> <operator pos:start="59:33" pos:end="59:33">(</operator><name pos:start="59:34" pos:end="59:34">i</name> <operator pos:start="59:36" pos:end="59:37">&gt;&gt;</operator> <literal type="number" pos:start="59:39" pos:end="59:39">3</literal><operator pos:start="59:40" pos:end="59:40">)</operator> <operator pos:start="59:42" pos:end="59:42">*</operator> <name pos:start="59:44" pos:end="59:49">stride</name></expr>;</expr_stmt></block_content></block></for>



    <for pos:start="63:5" pos:end="435:5">for <control pos:start="63:9" pos:end="63:31">(<init pos:start="63:10" pos:end="63:16"><expr pos:start="63:10" pos:end="63:15"><name pos:start="63:10" pos:end="63:11">by</name> <operator pos:start="63:13" pos:end="63:13">=</operator> <literal type="number" pos:start="63:15" pos:end="63:15">0</literal></expr>;</init> <condition pos:start="63:18" pos:end="63:25"><expr pos:start="63:18" pos:end="63:24"><name pos:start="63:18" pos:end="63:19">by</name> <operator pos:start="63:21" pos:end="63:21">&lt;</operator> <name pos:start="63:23" pos:end="63:24">bh</name></expr>;</condition> <incr pos:start="63:27" pos:end="63:30"><expr pos:start="63:27" pos:end="63:30"><name pos:start="63:27" pos:end="63:28">by</name><operator pos:start="63:29" pos:end="63:30">++</operator></expr></incr>)</control> <block pos:start="63:33" pos:end="435:5">{<block_content pos:start="65:9" pos:end="433:9">

        <if_stmt pos:start="65:9" pos:end="67:23"><if pos:start="65:9" pos:end="67:23">if <condition pos:start="65:12" pos:end="65:89">(<expr pos:start="65:13" pos:end="65:88"><operator pos:start="65:13" pos:end="65:13">(</operator><name pos:start="65:14" pos:end="65:16">ret</name> <operator pos:start="65:18" pos:end="65:18">=</operator> <call pos:start="65:20" pos:end="65:83"><name pos:start="65:20" pos:end="65:35">read_block_types</name><argument_list pos:start="65:36" pos:end="65:83">(<argument pos:start="65:37" pos:end="65:44"><expr pos:start="65:37" pos:end="65:44"><name pos:start="65:37" pos:end="65:44"><name pos:start="65:37" pos:end="65:37">c</name><operator pos:start="65:38" pos:end="65:39">-&gt;</operator><name pos:start="65:40" pos:end="65:44">avctx</name></name></expr></argument>, <argument pos:start="65:47" pos:end="65:48"><expr pos:start="65:47" pos:end="65:48"><name pos:start="65:47" pos:end="65:48">gb</name></expr></argument>, <argument pos:start="65:51" pos:end="65:82"><expr pos:start="65:51" pos:end="65:82"><operator pos:start="65:51" pos:end="65:51">&amp;</operator><name pos:start="65:52" pos:end="65:82"><name pos:start="65:52" pos:end="65:52">c</name><operator pos:start="65:53" pos:end="65:54">-&gt;</operator><name pos:start="65:55" pos:end="65:60">bundle</name><index pos:start="65:61" pos:end="65:82">[<expr pos:start="65:62" pos:end="65:81"><name pos:start="65:62" pos:end="65:81">BINK_SRC_BLOCK_TYPES</name></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="65:84" pos:end="65:84">)</operator> <operator pos:start="65:86" pos:end="65:86">&lt;</operator> <literal type="number" pos:start="65:88" pos:end="65:88">0</literal></expr>)</condition><block type="pseudo" pos:start="67:13" pos:end="67:23"><block_content pos:start="67:13" pos:end="67:23">

            <return pos:start="67:13" pos:end="67:23">return <expr pos:start="67:20" pos:end="67:22"><name pos:start="67:20" pos:end="67:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="69:9" pos:end="71:23"><if pos:start="69:9" pos:end="71:23">if <condition pos:start="69:12" pos:end="69:93">(<expr pos:start="69:13" pos:end="69:92"><operator pos:start="69:13" pos:end="69:13">(</operator><name pos:start="69:14" pos:end="69:16">ret</name> <operator pos:start="69:18" pos:end="69:18">=</operator> <call pos:start="69:20" pos:end="69:87"><name pos:start="69:20" pos:end="69:35">read_block_types</name><argument_list pos:start="69:36" pos:end="69:87">(<argument pos:start="69:37" pos:end="69:44"><expr pos:start="69:37" pos:end="69:44"><name pos:start="69:37" pos:end="69:44"><name pos:start="69:37" pos:end="69:37">c</name><operator pos:start="69:38" pos:end="69:39">-&gt;</operator><name pos:start="69:40" pos:end="69:44">avctx</name></name></expr></argument>, <argument pos:start="69:47" pos:end="69:48"><expr pos:start="69:47" pos:end="69:48"><name pos:start="69:47" pos:end="69:48">gb</name></expr></argument>, <argument pos:start="69:51" pos:end="69:86"><expr pos:start="69:51" pos:end="69:86"><operator pos:start="69:51" pos:end="69:51">&amp;</operator><name pos:start="69:52" pos:end="69:86"><name pos:start="69:52" pos:end="69:52">c</name><operator pos:start="69:53" pos:end="69:54">-&gt;</operator><name pos:start="69:55" pos:end="69:60">bundle</name><index pos:start="69:61" pos:end="69:86">[<expr pos:start="69:62" pos:end="69:85"><name pos:start="69:62" pos:end="69:85">BINK_SRC_SUB_BLOCK_TYPES</name></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="69:88" pos:end="69:88">)</operator> <operator pos:start="69:90" pos:end="69:90">&lt;</operator> <literal type="number" pos:start="69:92" pos:end="69:92">0</literal></expr>)</condition><block type="pseudo" pos:start="71:13" pos:end="71:23"><block_content pos:start="71:13" pos:end="71:23">

            <return pos:start="71:13" pos:end="71:23">return <expr pos:start="71:20" pos:end="71:22"><name pos:start="71:20" pos:end="71:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="73:9" pos:end="75:23"><if pos:start="73:9" pos:end="75:23">if <condition pos:start="73:12" pos:end="73:72">(<expr pos:start="73:13" pos:end="73:71"><operator pos:start="73:13" pos:end="73:13">(</operator><name pos:start="73:14" pos:end="73:16">ret</name> <operator pos:start="73:18" pos:end="73:18">=</operator> <call pos:start="73:20" pos:end="73:66"><name pos:start="73:20" pos:end="73:30">read_colors</name><argument_list pos:start="73:31" pos:end="73:66">(<argument pos:start="73:32" pos:end="73:33"><expr pos:start="73:32" pos:end="73:33"><name pos:start="73:32" pos:end="73:33">gb</name></expr></argument>, <argument pos:start="73:36" pos:end="73:62"><expr pos:start="73:36" pos:end="73:62"><operator pos:start="73:36" pos:end="73:36">&amp;</operator><name pos:start="73:37" pos:end="73:62"><name pos:start="73:37" pos:end="73:37">c</name><operator pos:start="73:38" pos:end="73:39">-&gt;</operator><name pos:start="73:40" pos:end="73:45">bundle</name><index pos:start="73:46" pos:end="73:62">[<expr pos:start="73:47" pos:end="73:61"><name pos:start="73:47" pos:end="73:61">BINK_SRC_COLORS</name></expr>]</index></name></expr></argument>, <argument pos:start="73:65" pos:end="73:65"><expr pos:start="73:65" pos:end="73:65"><name pos:start="73:65" pos:end="73:65">c</name></expr></argument>)</argument_list></call><operator pos:start="73:67" pos:end="73:67">)</operator> <operator pos:start="73:69" pos:end="73:69">&lt;</operator> <literal type="number" pos:start="73:71" pos:end="73:71">0</literal></expr>)</condition><block type="pseudo" pos:start="75:13" pos:end="75:23"><block_content pos:start="75:13" pos:end="75:23">

            <return pos:start="75:13" pos:end="75:23">return <expr pos:start="75:20" pos:end="75:22"><name pos:start="75:20" pos:end="75:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="77:9" pos:end="79:23"><if pos:start="77:9" pos:end="79:23">if <condition pos:start="77:12" pos:end="77:82">(<expr pos:start="77:13" pos:end="77:81"><operator pos:start="77:13" pos:end="77:13">(</operator><name pos:start="77:14" pos:end="77:16">ret</name> <operator pos:start="77:18" pos:end="77:18">=</operator> <call pos:start="77:20" pos:end="77:76"><name pos:start="77:20" pos:end="77:32">read_patterns</name><argument_list pos:start="77:33" pos:end="77:76">(<argument pos:start="77:34" pos:end="77:41"><expr pos:start="77:34" pos:end="77:41"><name pos:start="77:34" pos:end="77:41"><name pos:start="77:34" pos:end="77:34">c</name><operator pos:start="77:35" pos:end="77:36">-&gt;</operator><name pos:start="77:37" pos:end="77:41">avctx</name></name></expr></argument>, <argument pos:start="77:44" pos:end="77:45"><expr pos:start="77:44" pos:end="77:45"><name pos:start="77:44" pos:end="77:45">gb</name></expr></argument>, <argument pos:start="77:48" pos:end="77:75"><expr pos:start="77:48" pos:end="77:75"><operator pos:start="77:48" pos:end="77:48">&amp;</operator><name pos:start="77:49" pos:end="77:75"><name pos:start="77:49" pos:end="77:49">c</name><operator pos:start="77:50" pos:end="77:51">-&gt;</operator><name pos:start="77:52" pos:end="77:57">bundle</name><index pos:start="77:58" pos:end="77:75">[<expr pos:start="77:59" pos:end="77:74"><name pos:start="77:59" pos:end="77:74">BINK_SRC_PATTERN</name></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="77:77" pos:end="77:77">)</operator> <operator pos:start="77:79" pos:end="77:79">&lt;</operator> <literal type="number" pos:start="77:81" pos:end="77:81">0</literal></expr>)</condition><block type="pseudo" pos:start="79:13" pos:end="79:23"><block_content pos:start="79:13" pos:end="79:23">

            <return pos:start="79:13" pos:end="79:23">return <expr pos:start="79:20" pos:end="79:22"><name pos:start="79:20" pos:end="79:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="81:9" pos:end="83:23"><if pos:start="81:9" pos:end="83:23">if <condition pos:start="81:12" pos:end="81:85">(<expr pos:start="81:13" pos:end="81:84"><operator pos:start="81:13" pos:end="81:13">(</operator><name pos:start="81:14" pos:end="81:16">ret</name> <operator pos:start="81:18" pos:end="81:18">=</operator> <call pos:start="81:20" pos:end="81:79"><name pos:start="81:20" pos:end="81:37">read_motion_values</name><argument_list pos:start="81:38" pos:end="81:79">(<argument pos:start="81:39" pos:end="81:46"><expr pos:start="81:39" pos:end="81:46"><name pos:start="81:39" pos:end="81:46"><name pos:start="81:39" pos:end="81:39">c</name><operator pos:start="81:40" pos:end="81:41">-&gt;</operator><name pos:start="81:42" pos:end="81:46">avctx</name></name></expr></argument>, <argument pos:start="81:49" pos:end="81:50"><expr pos:start="81:49" pos:end="81:50"><name pos:start="81:49" pos:end="81:50">gb</name></expr></argument>, <argument pos:start="81:53" pos:end="81:78"><expr pos:start="81:53" pos:end="81:78"><operator pos:start="81:53" pos:end="81:53">&amp;</operator><name pos:start="81:54" pos:end="81:78"><name pos:start="81:54" pos:end="81:54">c</name><operator pos:start="81:55" pos:end="81:56">-&gt;</operator><name pos:start="81:57" pos:end="81:62">bundle</name><index pos:start="81:63" pos:end="81:78">[<expr pos:start="81:64" pos:end="81:77"><name pos:start="81:64" pos:end="81:77">BINK_SRC_X_OFF</name></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="81:80" pos:end="81:80">)</operator> <operator pos:start="81:82" pos:end="81:82">&lt;</operator> <literal type="number" pos:start="81:84" pos:end="81:84">0</literal></expr>)</condition><block type="pseudo" pos:start="83:13" pos:end="83:23"><block_content pos:start="83:13" pos:end="83:23">

            <return pos:start="83:13" pos:end="83:23">return <expr pos:start="83:20" pos:end="83:22"><name pos:start="83:20" pos:end="83:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="85:9" pos:end="87:23"><if pos:start="85:9" pos:end="87:23">if <condition pos:start="85:12" pos:end="85:85">(<expr pos:start="85:13" pos:end="85:84"><operator pos:start="85:13" pos:end="85:13">(</operator><name pos:start="85:14" pos:end="85:16">ret</name> <operator pos:start="85:18" pos:end="85:18">=</operator> <call pos:start="85:20" pos:end="85:79"><name pos:start="85:20" pos:end="85:37">read_motion_values</name><argument_list pos:start="85:38" pos:end="85:79">(<argument pos:start="85:39" pos:end="85:46"><expr pos:start="85:39" pos:end="85:46"><name pos:start="85:39" pos:end="85:46"><name pos:start="85:39" pos:end="85:39">c</name><operator pos:start="85:40" pos:end="85:41">-&gt;</operator><name pos:start="85:42" pos:end="85:46">avctx</name></name></expr></argument>, <argument pos:start="85:49" pos:end="85:50"><expr pos:start="85:49" pos:end="85:50"><name pos:start="85:49" pos:end="85:50">gb</name></expr></argument>, <argument pos:start="85:53" pos:end="85:78"><expr pos:start="85:53" pos:end="85:78"><operator pos:start="85:53" pos:end="85:53">&amp;</operator><name pos:start="85:54" pos:end="85:78"><name pos:start="85:54" pos:end="85:54">c</name><operator pos:start="85:55" pos:end="85:56">-&gt;</operator><name pos:start="85:57" pos:end="85:62">bundle</name><index pos:start="85:63" pos:end="85:78">[<expr pos:start="85:64" pos:end="85:77"><name pos:start="85:64" pos:end="85:77">BINK_SRC_Y_OFF</name></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="85:80" pos:end="85:80">)</operator> <operator pos:start="85:82" pos:end="85:82">&lt;</operator> <literal type="number" pos:start="85:84" pos:end="85:84">0</literal></expr>)</condition><block type="pseudo" pos:start="87:13" pos:end="87:23"><block_content pos:start="87:13" pos:end="87:23">

            <return pos:start="87:13" pos:end="87:23">return <expr pos:start="87:20" pos:end="87:22"><name pos:start="87:20" pos:end="87:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="89:9" pos:end="91:23"><if pos:start="89:9" pos:end="91:23">if <condition pos:start="89:12" pos:end="89:96">(<expr pos:start="89:13" pos:end="89:95"><operator pos:start="89:13" pos:end="89:13">(</operator><name pos:start="89:14" pos:end="89:16">ret</name> <operator pos:start="89:18" pos:end="89:18">=</operator> <call pos:start="89:20" pos:end="89:90"><name pos:start="89:20" pos:end="89:27">read_dcs</name><argument_list pos:start="89:28" pos:end="89:90">(<argument pos:start="89:29" pos:end="89:36"><expr pos:start="89:29" pos:end="89:36"><name pos:start="89:29" pos:end="89:36"><name pos:start="89:29" pos:end="89:29">c</name><operator pos:start="89:30" pos:end="89:31">-&gt;</operator><name pos:start="89:32" pos:end="89:36">avctx</name></name></expr></argument>, <argument pos:start="89:39" pos:end="89:40"><expr pos:start="89:39" pos:end="89:40"><name pos:start="89:39" pos:end="89:40">gb</name></expr></argument>, <argument pos:start="89:43" pos:end="89:71"><expr pos:start="89:43" pos:end="89:71"><operator pos:start="89:43" pos:end="89:43">&amp;</operator><name pos:start="89:44" pos:end="89:71"><name pos:start="89:44" pos:end="89:44">c</name><operator pos:start="89:45" pos:end="89:46">-&gt;</operator><name pos:start="89:47" pos:end="89:52">bundle</name><index pos:start="89:53" pos:end="89:71">[<expr pos:start="89:54" pos:end="89:70"><name pos:start="89:54" pos:end="89:70">BINK_SRC_INTRA_DC</name></expr>]</index></name></expr></argument>, <argument pos:start="89:74" pos:end="89:86"><expr pos:start="89:74" pos:end="89:86"><name pos:start="89:74" pos:end="89:86">DC_START_BITS</name></expr></argument>, <argument pos:start="89:89" pos:end="89:89"><expr pos:start="89:89" pos:end="89:89"><literal type="number" pos:start="89:89" pos:end="89:89">0</literal></expr></argument>)</argument_list></call><operator pos:start="89:91" pos:end="89:91">)</operator> <operator pos:start="89:93" pos:end="89:93">&lt;</operator> <literal type="number" pos:start="89:95" pos:end="89:95">0</literal></expr>)</condition><block type="pseudo" pos:start="91:13" pos:end="91:23"><block_content pos:start="91:13" pos:end="91:23">

            <return pos:start="91:13" pos:end="91:23">return <expr pos:start="91:20" pos:end="91:22"><name pos:start="91:20" pos:end="91:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="93:9" pos:end="95:23"><if pos:start="93:9" pos:end="95:23">if <condition pos:start="93:12" pos:end="93:96">(<expr pos:start="93:13" pos:end="93:95"><operator pos:start="93:13" pos:end="93:13">(</operator><name pos:start="93:14" pos:end="93:16">ret</name> <operator pos:start="93:18" pos:end="93:18">=</operator> <call pos:start="93:20" pos:end="93:90"><name pos:start="93:20" pos:end="93:27">read_dcs</name><argument_list pos:start="93:28" pos:end="93:90">(<argument pos:start="93:29" pos:end="93:36"><expr pos:start="93:29" pos:end="93:36"><name pos:start="93:29" pos:end="93:36"><name pos:start="93:29" pos:end="93:29">c</name><operator pos:start="93:30" pos:end="93:31">-&gt;</operator><name pos:start="93:32" pos:end="93:36">avctx</name></name></expr></argument>, <argument pos:start="93:39" pos:end="93:40"><expr pos:start="93:39" pos:end="93:40"><name pos:start="93:39" pos:end="93:40">gb</name></expr></argument>, <argument pos:start="93:43" pos:end="93:71"><expr pos:start="93:43" pos:end="93:71"><operator pos:start="93:43" pos:end="93:43">&amp;</operator><name pos:start="93:44" pos:end="93:71"><name pos:start="93:44" pos:end="93:44">c</name><operator pos:start="93:45" pos:end="93:46">-&gt;</operator><name pos:start="93:47" pos:end="93:52">bundle</name><index pos:start="93:53" pos:end="93:71">[<expr pos:start="93:54" pos:end="93:70"><name pos:start="93:54" pos:end="93:70">BINK_SRC_INTER_DC</name></expr>]</index></name></expr></argument>, <argument pos:start="93:74" pos:end="93:86"><expr pos:start="93:74" pos:end="93:86"><name pos:start="93:74" pos:end="93:86">DC_START_BITS</name></expr></argument>, <argument pos:start="93:89" pos:end="93:89"><expr pos:start="93:89" pos:end="93:89"><literal type="number" pos:start="93:89" pos:end="93:89">1</literal></expr></argument>)</argument_list></call><operator pos:start="93:91" pos:end="93:91">)</operator> <operator pos:start="93:93" pos:end="93:93">&lt;</operator> <literal type="number" pos:start="93:95" pos:end="93:95">0</literal></expr>)</condition><block type="pseudo" pos:start="95:13" pos:end="95:23"><block_content pos:start="95:13" pos:end="95:23">

            <return pos:start="95:13" pos:end="95:23">return <expr pos:start="95:20" pos:end="95:22"><name pos:start="95:20" pos:end="95:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="97:9" pos:end="99:23"><if pos:start="97:9" pos:end="99:23">if <condition pos:start="97:12" pos:end="97:74">(<expr pos:start="97:13" pos:end="97:73"><operator pos:start="97:13" pos:end="97:13">(</operator><name pos:start="97:14" pos:end="97:16">ret</name> <operator pos:start="97:18" pos:end="97:18">=</operator> <call pos:start="97:20" pos:end="97:68"><name pos:start="97:20" pos:end="97:28">read_runs</name><argument_list pos:start="97:29" pos:end="97:68">(<argument pos:start="97:30" pos:end="97:37"><expr pos:start="97:30" pos:end="97:37"><name pos:start="97:30" pos:end="97:37"><name pos:start="97:30" pos:end="97:30">c</name><operator pos:start="97:31" pos:end="97:32">-&gt;</operator><name pos:start="97:33" pos:end="97:37">avctx</name></name></expr></argument>, <argument pos:start="97:40" pos:end="97:41"><expr pos:start="97:40" pos:end="97:41"><name pos:start="97:40" pos:end="97:41">gb</name></expr></argument>, <argument pos:start="97:44" pos:end="97:67"><expr pos:start="97:44" pos:end="97:67"><operator pos:start="97:44" pos:end="97:44">&amp;</operator><name pos:start="97:45" pos:end="97:67"><name pos:start="97:45" pos:end="97:45">c</name><operator pos:start="97:46" pos:end="97:47">-&gt;</operator><name pos:start="97:48" pos:end="97:53">bundle</name><index pos:start="97:54" pos:end="97:67">[<expr pos:start="97:55" pos:end="97:66"><name pos:start="97:55" pos:end="97:66">BINK_SRC_RUN</name></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="97:69" pos:end="97:69">)</operator> <operator pos:start="97:71" pos:end="97:71">&lt;</operator> <literal type="number" pos:start="97:73" pos:end="97:73">0</literal></expr>)</condition><block type="pseudo" pos:start="99:13" pos:end="99:23"><block_content pos:start="99:13" pos:end="99:23">

            <return pos:start="99:13" pos:end="99:23">return <expr pos:start="99:20" pos:end="99:22"><name pos:start="99:20" pos:end="99:22">ret</name></expr>;</return></block_content></block></if></if_stmt>



        <if_stmt pos:start="103:9" pos:end="105:18"><if pos:start="103:9" pos:end="105:18">if <condition pos:start="103:12" pos:end="103:21">(<expr pos:start="103:13" pos:end="103:20"><name pos:start="103:13" pos:end="103:14">by</name> <operator pos:start="103:16" pos:end="103:17">==</operator> <name pos:start="103:19" pos:end="103:20">bh</name></expr>)</condition><block type="pseudo" pos:start="105:13" pos:end="105:18"><block_content pos:start="105:13" pos:end="105:18">

            <break pos:start="105:13" pos:end="105:18">break;</break></block_content></block></if></if_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:53"><expr pos:start="107:9" pos:end="107:52"><name pos:start="107:9" pos:end="107:11">dst</name>  <operator pos:start="107:14" pos:end="107:14">=</operator> <name pos:start="107:16" pos:end="107:37"><name pos:start="107:16" pos:end="107:20">frame</name><operator pos:start="107:21" pos:end="107:22">-&gt;</operator><name pos:start="107:23" pos:end="107:26">data</name><index pos:start="107:27" pos:end="107:37">[<expr pos:start="107:28" pos:end="107:36"><name pos:start="107:28" pos:end="107:36">plane_idx</name></expr>]</index></name>  <operator pos:start="107:40" pos:end="107:40">+</operator> <literal type="number" pos:start="107:42" pos:end="107:42">8</literal><operator pos:start="107:43" pos:end="107:43">*</operator><name pos:start="107:44" pos:end="107:45">by</name><operator pos:start="107:46" pos:end="107:46">*</operator><name pos:start="107:47" pos:end="107:52">stride</name></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="111:81"><expr pos:start="109:9" pos:end="111:80"><name pos:start="109:9" pos:end="109:12">prev</name> <operator pos:start="109:14" pos:end="109:14">=</operator> <operator pos:start="109:16" pos:end="109:16">(</operator><ternary pos:start="109:17" pos:end="111:65"><condition pos:start="109:17" pos:end="109:42"><expr pos:start="109:17" pos:end="109:40"><name pos:start="109:17" pos:end="109:40"><name pos:start="109:17" pos:end="109:17">c</name><operator pos:start="109:18" pos:end="109:19">-&gt;</operator><name pos:start="109:20" pos:end="109:23">last</name><operator pos:start="109:24" pos:end="109:25">-&gt;</operator><name pos:start="109:26" pos:end="109:29">data</name><index pos:start="109:30" pos:end="109:40">[<expr pos:start="109:31" pos:end="109:39"><name pos:start="109:31" pos:end="109:39">plane_idx</name></expr>]</index></name></expr> ?</condition><then pos:start="109:44" pos:end="109:67"> <expr pos:start="109:44" pos:end="109:67"><name pos:start="109:44" pos:end="109:67"><name pos:start="109:44" pos:end="109:44">c</name><operator pos:start="109:45" pos:end="109:46">-&gt;</operator><name pos:start="109:47" pos:end="109:50">last</name><operator pos:start="109:51" pos:end="109:52">-&gt;</operator><name pos:start="109:53" pos:end="109:56">data</name><index pos:start="109:57" pos:end="109:67">[<expr pos:start="109:58" pos:end="109:66"><name pos:start="109:58" pos:end="109:66">plane_idx</name></expr>]</index></name></expr>

                                         </then><else pos:start="111:42" pos:end="111:65">: <expr pos:start="111:44" pos:end="111:65"><name pos:start="111:44" pos:end="111:65"><name pos:start="111:44" pos:end="111:48">frame</name><operator pos:start="111:49" pos:end="111:50">-&gt;</operator><name pos:start="111:51" pos:end="111:54">data</name><index pos:start="111:55" pos:end="111:65">[<expr pos:start="111:56" pos:end="111:64"><name pos:start="111:56" pos:end="111:64">plane_idx</name></expr>]</index></name></expr></else></ternary><operator pos:start="111:66" pos:end="111:66">)</operator> <operator pos:start="111:68" pos:end="111:68">+</operator> <literal type="number" pos:start="111:70" pos:end="111:70">8</literal><operator pos:start="111:71" pos:end="111:71">*</operator><name pos:start="111:72" pos:end="111:73">by</name><operator pos:start="111:74" pos:end="111:74">*</operator><name pos:start="111:75" pos:end="111:80">stride</name></expr>;</expr_stmt>

        <for pos:start="113:9" pos:end="433:9">for <control pos:start="113:13" pos:end="113:56">(<init pos:start="113:14" pos:end="113:20"><expr pos:start="113:14" pos:end="113:19"><name pos:start="113:14" pos:end="113:15">bx</name> <operator pos:start="113:17" pos:end="113:17">=</operator> <literal type="number" pos:start="113:19" pos:end="113:19">0</literal></expr>;</init> <condition pos:start="113:22" pos:end="113:29"><expr pos:start="113:22" pos:end="113:28"><name pos:start="113:22" pos:end="113:23">bx</name> <operator pos:start="113:25" pos:end="113:25">&lt;</operator> <name pos:start="113:27" pos:end="113:28">bw</name></expr>;</condition> <incr pos:start="113:31" pos:end="113:55"><expr pos:start="113:31" pos:end="113:34"><name pos:start="113:31" pos:end="113:32">bx</name><operator pos:start="113:33" pos:end="113:34">++</operator></expr><operator pos:start="113:35" pos:end="113:35">,</operator> <expr pos:start="113:37" pos:end="113:44"><name pos:start="113:37" pos:end="113:39">dst</name> <operator pos:start="113:41" pos:end="113:42">+=</operator> <literal type="number" pos:start="113:44" pos:end="113:44">8</literal></expr><operator pos:start="113:45" pos:end="113:45">,</operator> <expr pos:start="113:47" pos:end="113:55"><name pos:start="113:47" pos:end="113:50">prev</name> <operator pos:start="113:52" pos:end="113:53">+=</operator> <literal type="number" pos:start="113:55" pos:end="113:55">8</literal></expr></incr>)</control> <block pos:start="113:58" pos:end="433:9">{<block_content pos:start="115:13" pos:end="431:13">

            <expr_stmt pos:start="115:13" pos:end="115:53"><expr pos:start="115:13" pos:end="115:52"><name pos:start="115:13" pos:end="115:15">blk</name> <operator pos:start="115:17" pos:end="115:17">=</operator> <call pos:start="115:19" pos:end="115:52"><name pos:start="115:19" pos:end="115:27">get_value</name><argument_list pos:start="115:28" pos:end="115:52">(<argument pos:start="115:29" pos:end="115:29"><expr pos:start="115:29" pos:end="115:29"><name pos:start="115:29" pos:end="115:29">c</name></expr></argument>, <argument pos:start="115:32" pos:end="115:51"><expr pos:start="115:32" pos:end="115:51"><name pos:start="115:32" pos:end="115:51">BINK_SRC_BLOCK_TYPES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:start="117:13" pos:end="117:95">// 16x16 block type on odd line means part of the already decoded block, so skip it</comment>

            <if_stmt pos:start="119:13" pos:end="129:13"><if pos:start="119:13" pos:end="129:13">if <condition pos:start="119:16" pos:end="119:48">(<expr pos:start="119:17" pos:end="119:47"><operator pos:start="119:17" pos:end="119:17">(</operator><name pos:start="119:18" pos:end="119:19">by</name> <operator pos:start="119:21" pos:end="119:21">&amp;</operator> <literal type="number" pos:start="119:23" pos:end="119:23">1</literal><operator pos:start="119:24" pos:end="119:24">)</operator> <operator pos:start="119:26" pos:end="119:27">&amp;&amp;</operator> <name pos:start="119:29" pos:end="119:31">blk</name> <operator pos:start="119:33" pos:end="119:34">==</operator> <name pos:start="119:36" pos:end="119:47">SCALED_BLOCK</name></expr>)</condition> <block pos:start="119:50" pos:end="129:13">{<block_content pos:start="121:17" pos:end="127:25">

                <expr_stmt pos:start="121:17" pos:end="121:21"><expr pos:start="121:17" pos:end="121:20"><name pos:start="121:17" pos:end="121:18">bx</name><operator pos:start="121:19" pos:end="121:20">++</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="123:17" pos:end="123:26"><expr pos:start="123:17" pos:end="123:25"><name pos:start="123:17" pos:end="123:19">dst</name>  <operator pos:start="123:22" pos:end="123:23">+=</operator> <literal type="number" pos:start="123:25" pos:end="123:25">8</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="125:17" pos:end="125:26"><expr pos:start="125:17" pos:end="125:25"><name pos:start="125:17" pos:end="125:20">prev</name> <operator pos:start="125:22" pos:end="125:23">+=</operator> <literal type="number" pos:start="125:25" pos:end="125:25">8</literal></expr>;</expr_stmt>

                <continue pos:start="127:17" pos:end="127:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <switch pos:start="131:13" pos:end="431:13">switch <condition pos:start="131:20" pos:end="131:24">(<expr pos:start="131:21" pos:end="131:23"><name pos:start="131:21" pos:end="131:23">blk</name></expr>)</condition> <block pos:start="131:26" pos:end="431:13">{<block_content pos:start="133:13" pos:end="429:43">

            <case pos:start="133:13" pos:end="133:28">case <expr pos:start="133:18" pos:end="133:27"><name pos:start="133:18" pos:end="133:27">SKIP_BLOCK</name></expr>:</case>

                <expr_stmt pos:start="135:17" pos:end="135:67"><expr pos:start="135:17" pos:end="135:66"><name pos:start="135:17" pos:end="135:44"><name pos:start="135:17" pos:end="135:17">c</name><operator pos:start="135:18" pos:end="135:19">-&gt;</operator><name pos:start="135:20" pos:end="135:23">hdsp</name><operator pos:start="135:24" pos:end="135:24">.</operator><name pos:start="135:25" pos:end="135:38">put_pixels_tab</name><index pos:start="135:39" pos:end="135:41">[<expr pos:start="135:40" pos:end="135:40"><literal type="number" pos:start="135:40" pos:end="135:40">1</literal></expr>]</index><index pos:start="135:42" pos:end="135:44">[<expr pos:start="135:43" pos:end="135:43"><literal type="number" pos:start="135:43" pos:end="135:43">0</literal></expr>]</index></name><operator pos:start="135:45" pos:end="135:45">(</operator><name pos:start="135:46" pos:end="135:48">dst</name><operator pos:start="135:49" pos:end="135:49">,</operator> <name pos:start="135:51" pos:end="135:54">prev</name><operator pos:start="135:55" pos:end="135:55">,</operator> <name pos:start="135:57" pos:end="135:62">stride</name><operator pos:start="135:63" pos:end="135:63">,</operator> <literal type="number" pos:start="135:65" pos:end="135:65">8</literal><operator pos:start="135:66" pos:end="135:66">)</operator></expr>;</expr_stmt>

                <break pos:start="137:17" pos:end="137:22">break;</break>

            <case pos:start="139:13" pos:end="139:30">case <expr pos:start="139:18" pos:end="139:29"><name pos:start="139:18" pos:end="139:29">SCALED_BLOCK</name></expr>:</case>

                <expr_stmt pos:start="141:17" pos:end="141:61"><expr pos:start="141:17" pos:end="141:60"><name pos:start="141:17" pos:end="141:19">blk</name> <operator pos:start="141:21" pos:end="141:21">=</operator> <call pos:start="141:23" pos:end="141:60"><name pos:start="141:23" pos:end="141:31">get_value</name><argument_list pos:start="141:32" pos:end="141:60">(<argument pos:start="141:33" pos:end="141:33"><expr pos:start="141:33" pos:end="141:33"><name pos:start="141:33" pos:end="141:33">c</name></expr></argument>, <argument pos:start="141:36" pos:end="141:59"><expr pos:start="141:36" pos:end="141:59"><name pos:start="141:36" pos:end="141:59">BINK_SRC_SUB_BLOCK_TYPES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <switch pos:start="143:17" pos:end="245:17">switch <condition pos:start="143:24" pos:end="143:28">(<expr pos:start="143:25" pos:end="143:27"><name pos:start="143:25" pos:end="143:27">blk</name></expr>)</condition> <block pos:start="143:30" pos:end="245:17">{<block_content pos:start="145:17" pos:end="243:47">

                <case pos:start="145:17" pos:end="145:31">case <expr pos:start="145:22" pos:end="145:30"><name pos:start="145:22" pos:end="145:30">RUN_BLOCK</name></expr>:</case>

                    <expr_stmt pos:start="147:21" pos:end="147:58"><expr pos:start="147:21" pos:end="147:57"><name pos:start="147:21" pos:end="147:24">scan</name> <operator pos:start="147:26" pos:end="147:26">=</operator> <name pos:start="147:28" pos:end="147:57"><name pos:start="147:28" pos:end="147:40">bink_patterns</name><index pos:start="147:41" pos:end="147:57">[<expr pos:start="147:42" pos:end="147:56"><call pos:start="147:42" pos:end="147:56"><name pos:start="147:42" pos:end="147:49">get_bits</name><argument_list pos:start="147:50" pos:end="147:56">(<argument pos:start="147:51" pos:end="147:52"><expr pos:start="147:51" pos:end="147:52"><name pos:start="147:51" pos:end="147:52">gb</name></expr></argument>, <argument pos:start="147:55" pos:end="147:55"><expr pos:start="147:55" pos:end="147:55"><literal type="number" pos:start="147:55" pos:end="147:55">4</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="149:21" pos:end="149:26"><expr pos:start="149:21" pos:end="149:25"><name pos:start="149:21" pos:end="149:21">i</name> <operator pos:start="149:23" pos:end="149:23">=</operator> <literal type="number" pos:start="149:25" pos:end="149:25">0</literal></expr>;</expr_stmt>

                    <do pos:start="151:21" pos:end="183:37">do <block pos:start="151:24" pos:end="183:21">{<block_content pos:start="153:25" pos:end="181:25">

                        <decl_stmt pos:start="153:25" pos:end="153:65"><decl pos:start="153:25" pos:end="153:64"><type pos:start="153:25" pos:end="153:27"><name pos:start="153:25" pos:end="153:27">int</name></type> <name pos:start="153:29" pos:end="153:31">run</name> <init pos:start="153:33" pos:end="153:64">= <expr pos:start="153:35" pos:end="153:64"><call pos:start="153:35" pos:end="153:60"><name pos:start="153:35" pos:end="153:43">get_value</name><argument_list pos:start="153:44" pos:end="153:60">(<argument pos:start="153:45" pos:end="153:45"><expr pos:start="153:45" pos:end="153:45"><name pos:start="153:45" pos:end="153:45">c</name></expr></argument>, <argument pos:start="153:48" pos:end="153:59"><expr pos:start="153:48" pos:end="153:59"><name pos:start="153:48" pos:end="153:59">BINK_SRC_RUN</name></expr></argument>)</argument_list></call> <operator pos:start="153:62" pos:end="153:62">+</operator> <literal type="number" pos:start="153:64" pos:end="153:64">1</literal></expr></init></decl>;</decl_stmt>



                        <expr_stmt pos:start="157:25" pos:end="157:33"><expr pos:start="157:25" pos:end="157:32"><name pos:start="157:25" pos:end="157:25">i</name> <operator pos:start="157:27" pos:end="157:28">+=</operator> <name pos:start="157:30" pos:end="157:32">run</name></expr>;</expr_stmt>

                        <if_stmt pos:start="159:25" pos:end="165:25"><if pos:start="159:25" pos:end="165:25">if <condition pos:start="159:28" pos:end="159:35">(<expr pos:start="159:29" pos:end="159:34"><name pos:start="159:29" pos:end="159:29">i</name> <operator pos:start="159:31" pos:end="159:31">&gt;</operator> <literal type="number" pos:start="159:33" pos:end="159:34">64</literal></expr>)</condition> <block pos:start="159:37" pos:end="165:25">{<block_content pos:start="161:29" pos:end="163:55">

                            <expr_stmt pos:start="161:29" pos:end="161:87"><expr pos:start="161:29" pos:end="161:86"><call pos:start="161:29" pos:end="161:86"><name pos:start="161:29" pos:end="161:34">av_log</name><argument_list pos:start="161:35" pos:end="161:86">(<argument pos:start="161:36" pos:end="161:43"><expr pos:start="161:36" pos:end="161:43"><name pos:start="161:36" pos:end="161:43"><name pos:start="161:36" pos:end="161:36">c</name><operator pos:start="161:37" pos:end="161:38">-&gt;</operator><name pos:start="161:39" pos:end="161:43">avctx</name></name></expr></argument>, <argument pos:start="161:46" pos:end="161:57"><expr pos:start="161:46" pos:end="161:57"><name pos:start="161:46" pos:end="161:57">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="161:60" pos:end="161:85"><expr pos:start="161:60" pos:end="161:85"><literal type="string" pos:start="161:60" pos:end="161:85">"Run went out of bounds\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <return pos:start="163:29" pos:end="163:55">return <expr pos:start="163:36" pos:end="163:54"><name pos:start="163:36" pos:end="163:54">AVERROR_INVALIDDATA</name></expr>;</return>

                        </block_content>}</block></if></if_stmt>

                        <if_stmt pos:start="167:25" pos:end="181:25"><if pos:start="167:25" pos:end="175:25">if <condition pos:start="167:28" pos:end="167:42">(<expr pos:start="167:29" pos:end="167:41"><call pos:start="167:29" pos:end="167:41"><name pos:start="167:29" pos:end="167:37">get_bits1</name><argument_list pos:start="167:38" pos:end="167:41">(<argument pos:start="167:39" pos:end="167:40"><expr pos:start="167:39" pos:end="167:40"><name pos:start="167:39" pos:end="167:40">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="167:44" pos:end="175:25">{<block_content pos:start="169:29" pos:end="173:52">

                            <expr_stmt pos:start="169:29" pos:end="169:62"><expr pos:start="169:29" pos:end="169:61"><name pos:start="169:29" pos:end="169:29">v</name> <operator pos:start="169:31" pos:end="169:31">=</operator> <call pos:start="169:33" pos:end="169:61"><name pos:start="169:33" pos:end="169:41">get_value</name><argument_list pos:start="169:42" pos:end="169:61">(<argument pos:start="169:43" pos:end="169:43"><expr pos:start="169:43" pos:end="169:43"><name pos:start="169:43" pos:end="169:43">c</name></expr></argument>, <argument pos:start="169:46" pos:end="169:60"><expr pos:start="169:46" pos:end="169:60"><name pos:start="169:46" pos:end="169:60">BINK_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <for pos:start="171:29" pos:end="173:52">for <control pos:start="171:33" pos:end="171:53">(<init pos:start="171:34" pos:end="171:39"><expr pos:start="171:34" pos:end="171:38"><name pos:start="171:34" pos:end="171:34">j</name> <operator pos:start="171:36" pos:end="171:36">=</operator> <literal type="number" pos:start="171:38" pos:end="171:38">0</literal></expr>;</init> <condition pos:start="171:41" pos:end="171:48"><expr pos:start="171:41" pos:end="171:47"><name pos:start="171:41" pos:end="171:41">j</name> <operator pos:start="171:43" pos:end="171:43">&lt;</operator> <name pos:start="171:45" pos:end="171:47">run</name></expr>;</condition> <incr pos:start="171:50" pos:end="171:52"><expr pos:start="171:50" pos:end="171:52"><name pos:start="171:50" pos:end="171:50">j</name><operator pos:start="171:51" pos:end="171:52">++</operator></expr></incr>)</control><block type="pseudo" pos:start="173:33" pos:end="173:52"><block_content pos:start="173:33" pos:end="173:52">

                                <expr_stmt pos:start="173:33" pos:end="173:52"><expr pos:start="173:33" pos:end="173:51"><name pos:start="173:33" pos:end="173:47"><name pos:start="173:33" pos:end="173:38">ublock</name><index pos:start="173:39" pos:end="173:47">[<expr pos:start="173:40" pos:end="173:46"><operator pos:start="173:40" pos:end="173:40">*</operator><name pos:start="173:41" pos:end="173:44">scan</name><operator pos:start="173:45" pos:end="173:46">++</operator></expr>]</index></name> <operator pos:start="173:49" pos:end="173:49">=</operator> <name pos:start="173:51" pos:end="173:51">v</name></expr>;</expr_stmt></block_content></block></for>

                        </block_content>}</block></if> <else pos:start="175:27" pos:end="181:25">else <block pos:start="175:32" pos:end="181:25">{<block_content pos:start="177:29" pos:end="179:80">

                            <for pos:start="177:29" pos:end="179:80">for <control pos:start="177:33" pos:end="177:53">(<init pos:start="177:34" pos:end="177:39"><expr pos:start="177:34" pos:end="177:38"><name pos:start="177:34" pos:end="177:34">j</name> <operator pos:start="177:36" pos:end="177:36">=</operator> <literal type="number" pos:start="177:38" pos:end="177:38">0</literal></expr>;</init> <condition pos:start="177:41" pos:end="177:48"><expr pos:start="177:41" pos:end="177:47"><name pos:start="177:41" pos:end="177:41">j</name> <operator pos:start="177:43" pos:end="177:43">&lt;</operator> <name pos:start="177:45" pos:end="177:47">run</name></expr>;</condition> <incr pos:start="177:50" pos:end="177:52"><expr pos:start="177:50" pos:end="177:52"><name pos:start="177:50" pos:end="177:50">j</name><operator pos:start="177:51" pos:end="177:52">++</operator></expr></incr>)</control><block type="pseudo" pos:start="179:33" pos:end="179:80"><block_content pos:start="179:33" pos:end="179:80">

                                <expr_stmt pos:start="179:33" pos:end="179:80"><expr pos:start="179:33" pos:end="179:79"><name pos:start="179:33" pos:end="179:47"><name pos:start="179:33" pos:end="179:38">ublock</name><index pos:start="179:39" pos:end="179:47">[<expr pos:start="179:40" pos:end="179:46"><operator pos:start="179:40" pos:end="179:40">*</operator><name pos:start="179:41" pos:end="179:44">scan</name><operator pos:start="179:45" pos:end="179:46">++</operator></expr>]</index></name> <operator pos:start="179:49" pos:end="179:49">=</operator> <call pos:start="179:51" pos:end="179:79"><name pos:start="179:51" pos:end="179:59">get_value</name><argument_list pos:start="179:60" pos:end="179:79">(<argument pos:start="179:61" pos:end="179:61"><expr pos:start="179:61" pos:end="179:61"><name pos:start="179:61" pos:end="179:61">c</name></expr></argument>, <argument pos:start="179:64" pos:end="179:78"><expr pos:start="179:64" pos:end="179:78"><name pos:start="179:64" pos:end="179:78">BINK_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block> while <condition pos:start="183:29" pos:end="183:36">(<expr pos:start="183:30" pos:end="183:35"><name pos:start="183:30" pos:end="183:30">i</name> <operator pos:start="183:32" pos:end="183:32">&lt;</operator> <literal type="number" pos:start="183:34" pos:end="183:35">63</literal></expr>)</condition>;</do>

                    <if_stmt pos:start="185:21" pos:end="187:72"><if pos:start="185:21" pos:end="187:72">if <condition pos:start="185:24" pos:end="185:32">(<expr pos:start="185:25" pos:end="185:31"><name pos:start="185:25" pos:end="185:25">i</name> <operator pos:start="185:27" pos:end="185:28">==</operator> <literal type="number" pos:start="185:30" pos:end="185:31">63</literal></expr>)</condition><block type="pseudo" pos:start="187:25" pos:end="187:72"><block_content pos:start="187:25" pos:end="187:72">

                        <expr_stmt pos:start="187:25" pos:end="187:72"><expr pos:start="187:25" pos:end="187:71"><name pos:start="187:25" pos:end="187:39"><name pos:start="187:25" pos:end="187:30">ublock</name><index pos:start="187:31" pos:end="187:39">[<expr pos:start="187:32" pos:end="187:38"><operator pos:start="187:32" pos:end="187:32">*</operator><name pos:start="187:33" pos:end="187:36">scan</name><operator pos:start="187:37" pos:end="187:38">++</operator></expr>]</index></name> <operator pos:start="187:41" pos:end="187:41">=</operator> <call pos:start="187:43" pos:end="187:71"><name pos:start="187:43" pos:end="187:51">get_value</name><argument_list pos:start="187:52" pos:end="187:71">(<argument pos:start="187:53" pos:end="187:53"><expr pos:start="187:53" pos:end="187:53"><name pos:start="187:53" pos:end="187:53">c</name></expr></argument>, <argument pos:start="187:56" pos:end="187:70"><expr pos:start="187:56" pos:end="187:70"><name pos:start="187:56" pos:end="187:70">BINK_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <break pos:start="189:21" pos:end="189:26">break;</break>

                <case pos:start="191:17" pos:end="191:33">case <expr pos:start="191:22" pos:end="191:32"><name pos:start="191:22" pos:end="191:32">INTRA_BLOCK</name></expr>:</case>

                    <expr_stmt pos:start="193:21" pos:end="193:64"><expr pos:start="193:21" pos:end="193:63"><call pos:start="193:21" pos:end="193:63"><name pos:start="193:21" pos:end="193:26">memset</name><argument_list pos:start="193:27" pos:end="193:63">(<argument pos:start="193:28" pos:end="193:35"><expr pos:start="193:28" pos:end="193:35"><name pos:start="193:28" pos:end="193:35">dctblock</name></expr></argument>, <argument pos:start="193:38" pos:end="193:38"><expr pos:start="193:38" pos:end="193:38"><literal type="number" pos:start="193:38" pos:end="193:38">0</literal></expr></argument>, <argument pos:start="193:41" pos:end="193:62"><expr pos:start="193:41" pos:end="193:62"><sizeof pos:start="193:41" pos:end="193:57">sizeof<argument_list pos:start="193:47" pos:end="193:57">(<argument pos:start="193:48" pos:end="193:56"><expr pos:start="193:48" pos:end="193:56"><operator pos:start="193:48" pos:end="193:48">*</operator><name pos:start="193:49" pos:end="193:56">dctblock</name></expr></argument>)</argument_list></sizeof> <operator pos:start="193:59" pos:end="193:59">*</operator> <literal type="number" pos:start="193:61" pos:end="193:62">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="195:21" pos:end="195:66"><expr pos:start="195:21" pos:end="195:65"><name pos:start="195:21" pos:end="195:31"><name pos:start="195:21" pos:end="195:28">dctblock</name><index pos:start="195:29" pos:end="195:31">[<expr pos:start="195:30" pos:end="195:30"><literal type="number" pos:start="195:30" pos:end="195:30">0</literal></expr>]</index></name> <operator pos:start="195:33" pos:end="195:33">=</operator> <call pos:start="195:35" pos:end="195:65"><name pos:start="195:35" pos:end="195:43">get_value</name><argument_list pos:start="195:44" pos:end="195:65">(<argument pos:start="195:45" pos:end="195:45"><expr pos:start="195:45" pos:end="195:45"><name pos:start="195:45" pos:end="195:45">c</name></expr></argument>, <argument pos:start="195:48" pos:end="195:64"><expr pos:start="195:48" pos:end="195:64"><name pos:start="195:48" pos:end="195:64">BINK_SRC_INTRA_DC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="197:21" pos:end="197:83"><expr pos:start="197:21" pos:end="197:82"><call pos:start="197:21" pos:end="197:82"><name pos:start="197:21" pos:end="197:35">read_dct_coeffs</name><argument_list pos:start="197:36" pos:end="197:82">(<argument pos:start="197:37" pos:end="197:38"><expr pos:start="197:37" pos:end="197:38"><name pos:start="197:37" pos:end="197:38">gb</name></expr></argument>, <argument pos:start="197:41" pos:end="197:48"><expr pos:start="197:41" pos:end="197:48"><name pos:start="197:41" pos:end="197:48">dctblock</name></expr></argument>, <argument pos:start="197:51" pos:end="197:59"><expr pos:start="197:51" pos:end="197:59"><name pos:start="197:51" pos:end="197:59">bink_scan</name></expr></argument>, <argument pos:start="197:62" pos:end="197:77"><expr pos:start="197:62" pos:end="197:77"><name pos:start="197:62" pos:end="197:77">bink_intra_quant</name></expr></argument>, <argument pos:start="197:80" pos:end="197:81"><expr pos:start="197:80" pos:end="197:81"><operator pos:start="197:80" pos:end="197:80">-</operator><literal type="number" pos:start="197:81" pos:end="197:81">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="199:21" pos:end="199:61"><expr pos:start="199:21" pos:end="199:60"><call pos:start="199:21" pos:end="199:60"><name pos:start="199:21" pos:end="199:39"><name pos:start="199:21" pos:end="199:21">c</name><operator pos:start="199:22" pos:end="199:23">-&gt;</operator><name pos:start="199:24" pos:end="199:30">binkdsp</name><operator pos:start="199:31" pos:end="199:31">.</operator><name pos:start="199:32" pos:end="199:39">idct_put</name></name><argument_list pos:start="199:40" pos:end="199:60">(<argument pos:start="199:41" pos:end="199:46"><expr pos:start="199:41" pos:end="199:46"><name pos:start="199:41" pos:end="199:46">ublock</name></expr></argument>, <argument pos:start="199:49" pos:end="199:49"><expr pos:start="199:49" pos:end="199:49"><literal type="number" pos:start="199:49" pos:end="199:49">8</literal></expr></argument>, <argument pos:start="199:52" pos:end="199:59"><expr pos:start="199:52" pos:end="199:59"><name pos:start="199:52" pos:end="199:59">dctblock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="201:21" pos:end="201:26">break;</break>

                <case pos:start="203:17" pos:end="203:32">case <expr pos:start="203:22" pos:end="203:31"><name pos:start="203:22" pos:end="203:31">FILL_BLOCK</name></expr>:</case>

                    <expr_stmt pos:start="205:21" pos:end="205:54"><expr pos:start="205:21" pos:end="205:53"><name pos:start="205:21" pos:end="205:21">v</name> <operator pos:start="205:23" pos:end="205:23">=</operator> <call pos:start="205:25" pos:end="205:53"><name pos:start="205:25" pos:end="205:33">get_value</name><argument_list pos:start="205:34" pos:end="205:53">(<argument pos:start="205:35" pos:end="205:35"><expr pos:start="205:35" pos:end="205:35"><name pos:start="205:35" pos:end="205:35">c</name></expr></argument>, <argument pos:start="205:38" pos:end="205:52"><expr pos:start="205:38" pos:end="205:52"><name pos:start="205:38" pos:end="205:52">BINK_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="207:21" pos:end="207:66"><expr pos:start="207:21" pos:end="207:65"><name pos:start="207:21" pos:end="207:45"><name pos:start="207:21" pos:end="207:21">c</name><operator pos:start="207:22" pos:end="207:23">-&gt;</operator><name pos:start="207:24" pos:end="207:27">bdsp</name><operator pos:start="207:28" pos:end="207:28">.</operator><name pos:start="207:29" pos:end="207:42">fill_block_tab</name><index pos:start="207:43" pos:end="207:45">[<expr pos:start="207:44" pos:end="207:44"><literal type="number" pos:start="207:44" pos:end="207:44">0</literal></expr>]</index></name><operator pos:start="207:46" pos:end="207:46">(</operator><name pos:start="207:47" pos:end="207:49">dst</name><operator pos:start="207:50" pos:end="207:50">,</operator> <name pos:start="207:52" pos:end="207:52">v</name><operator pos:start="207:53" pos:end="207:53">,</operator> <name pos:start="207:55" pos:end="207:60">stride</name><operator pos:start="207:61" pos:end="207:61">,</operator> <literal type="number" pos:start="207:63" pos:end="207:64">16</literal><operator pos:start="207:65" pos:end="207:65">)</operator></expr>;</expr_stmt>

                    <break pos:start="209:21" pos:end="209:26">break;</break>

                <case pos:start="211:17" pos:end="211:35">case <expr pos:start="211:22" pos:end="211:34"><name pos:start="211:22" pos:end="211:34">PATTERN_BLOCK</name></expr>:</case>

                    <for pos:start="213:21" pos:end="215:63">for <control pos:start="213:25" pos:end="213:43">(<init pos:start="213:26" pos:end="213:31"><expr pos:start="213:26" pos:end="213:30"><name pos:start="213:26" pos:end="213:26">i</name> <operator pos:start="213:28" pos:end="213:28">=</operator> <literal type="number" pos:start="213:30" pos:end="213:30">0</literal></expr>;</init> <condition pos:start="213:33" pos:end="213:38"><expr pos:start="213:33" pos:end="213:37"><name pos:start="213:33" pos:end="213:33">i</name> <operator pos:start="213:35" pos:end="213:35">&lt;</operator> <literal type="number" pos:start="213:37" pos:end="213:37">2</literal></expr>;</condition> <incr pos:start="213:40" pos:end="213:42"><expr pos:start="213:40" pos:end="213:42"><name pos:start="213:40" pos:end="213:40">i</name><operator pos:start="213:41" pos:end="213:42">++</operator></expr></incr>)</control><block type="pseudo" pos:start="215:25" pos:end="215:63"><block_content pos:start="215:25" pos:end="215:63">

                        <expr_stmt pos:start="215:25" pos:end="215:63"><expr pos:start="215:25" pos:end="215:62"><name pos:start="215:25" pos:end="215:30"><name pos:start="215:25" pos:end="215:27">col</name><index pos:start="215:28" pos:end="215:30">[<expr pos:start="215:29" pos:end="215:29"><name pos:start="215:29" pos:end="215:29">i</name></expr>]</index></name> <operator pos:start="215:32" pos:end="215:32">=</operator> <call pos:start="215:34" pos:end="215:62"><name pos:start="215:34" pos:end="215:42">get_value</name><argument_list pos:start="215:43" pos:end="215:62">(<argument pos:start="215:44" pos:end="215:44"><expr pos:start="215:44" pos:end="215:44"><name pos:start="215:44" pos:end="215:44">c</name></expr></argument>, <argument pos:start="215:47" pos:end="215:61"><expr pos:start="215:47" pos:end="215:61"><name pos:start="215:47" pos:end="215:61">BINK_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                    <for pos:start="217:21" pos:end="225:21">for <control pos:start="217:25" pos:end="217:43">(<init pos:start="217:26" pos:end="217:31"><expr pos:start="217:26" pos:end="217:30"><name pos:start="217:26" pos:end="217:26">j</name> <operator pos:start="217:28" pos:end="217:28">=</operator> <literal type="number" pos:start="217:30" pos:end="217:30">0</literal></expr>;</init> <condition pos:start="217:33" pos:end="217:38"><expr pos:start="217:33" pos:end="217:37"><name pos:start="217:33" pos:end="217:33">j</name> <operator pos:start="217:35" pos:end="217:35">&lt;</operator> <literal type="number" pos:start="217:37" pos:end="217:37">8</literal></expr>;</condition> <incr pos:start="217:40" pos:end="217:42"><expr pos:start="217:40" pos:end="217:42"><name pos:start="217:40" pos:end="217:40">j</name><operator pos:start="217:41" pos:end="217:42">++</operator></expr></incr>)</control> <block pos:start="217:45" pos:end="225:21">{<block_content pos:start="219:25" pos:end="223:57">

                        <expr_stmt pos:start="219:25" pos:end="219:59"><expr pos:start="219:25" pos:end="219:58"><name pos:start="219:25" pos:end="219:25">v</name> <operator pos:start="219:27" pos:end="219:27">=</operator> <call pos:start="219:29" pos:end="219:58"><name pos:start="219:29" pos:end="219:37">get_value</name><argument_list pos:start="219:38" pos:end="219:58">(<argument pos:start="219:39" pos:end="219:39"><expr pos:start="219:39" pos:end="219:39"><name pos:start="219:39" pos:end="219:39">c</name></expr></argument>, <argument pos:start="219:42" pos:end="219:57"><expr pos:start="219:42" pos:end="219:57"><name pos:start="219:42" pos:end="219:57">BINK_SRC_PATTERN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <for pos:start="221:25" pos:end="223:57">for <control pos:start="221:29" pos:end="221:56">(<init pos:start="221:30" pos:end="221:35"><expr pos:start="221:30" pos:end="221:34"><name pos:start="221:30" pos:end="221:30">i</name> <operator pos:start="221:32" pos:end="221:32">=</operator> <literal type="number" pos:start="221:34" pos:end="221:34">0</literal></expr>;</init> <condition pos:start="221:37" pos:end="221:42"><expr pos:start="221:37" pos:end="221:41"><name pos:start="221:37" pos:end="221:37">i</name> <operator pos:start="221:39" pos:end="221:39">&lt;</operator> <literal type="number" pos:start="221:41" pos:end="221:41">8</literal></expr>;</condition> <incr pos:start="221:44" pos:end="221:55"><expr pos:start="221:44" pos:end="221:46"><name pos:start="221:44" pos:end="221:44">i</name><operator pos:start="221:45" pos:end="221:46">++</operator></expr><operator pos:start="221:47" pos:end="221:47">,</operator> <expr pos:start="221:49" pos:end="221:55"><name pos:start="221:49" pos:end="221:49">v</name> <operator pos:start="221:51" pos:end="221:53">&gt;&gt;=</operator> <literal type="number" pos:start="221:55" pos:end="221:55">1</literal></expr></incr>)</control><block type="pseudo" pos:start="223:29" pos:end="223:57"><block_content pos:start="223:29" pos:end="223:57">

                            <expr_stmt pos:start="223:29" pos:end="223:57"><expr pos:start="223:29" pos:end="223:56"><name pos:start="223:29" pos:end="223:43"><name pos:start="223:29" pos:end="223:34">ublock</name><index pos:start="223:35" pos:end="223:43">[<expr pos:start="223:36" pos:end="223:42"><name pos:start="223:36" pos:end="223:36">i</name> <operator pos:start="223:38" pos:end="223:38">+</operator> <name pos:start="223:40" pos:end="223:40">j</name><operator pos:start="223:41" pos:end="223:41">*</operator><literal type="number" pos:start="223:42" pos:end="223:42">8</literal></expr>]</index></name> <operator pos:start="223:45" pos:end="223:45">=</operator> <name pos:start="223:47" pos:end="223:56"><name pos:start="223:47" pos:end="223:49">col</name><index pos:start="223:50" pos:end="223:56">[<expr pos:start="223:51" pos:end="223:55"><name pos:start="223:51" pos:end="223:51">v</name> <operator pos:start="223:53" pos:end="223:53">&amp;</operator> <literal type="number" pos:start="223:55" pos:end="223:55">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

                    </block_content>}</block></for>

                    <break pos:start="227:21" pos:end="227:26">break;</break>

                <case pos:start="229:17" pos:end="229:31">case <expr pos:start="229:22" pos:end="229:30"><name pos:start="229:22" pos:end="229:30">RAW_BLOCK</name></expr>:</case>

                    <for pos:start="231:21" pos:end="235:76">for <control pos:start="231:25" pos:end="231:43">(<init pos:start="231:26" pos:end="231:31"><expr pos:start="231:26" pos:end="231:30"><name pos:start="231:26" pos:end="231:26">j</name> <operator pos:start="231:28" pos:end="231:28">=</operator> <literal type="number" pos:start="231:30" pos:end="231:30">0</literal></expr>;</init> <condition pos:start="231:33" pos:end="231:38"><expr pos:start="231:33" pos:end="231:37"><name pos:start="231:33" pos:end="231:33">j</name> <operator pos:start="231:35" pos:end="231:35">&lt;</operator> <literal type="number" pos:start="231:37" pos:end="231:37">8</literal></expr>;</condition> <incr pos:start="231:40" pos:end="231:42"><expr pos:start="231:40" pos:end="231:42"><name pos:start="231:40" pos:end="231:40">j</name><operator pos:start="231:41" pos:end="231:42">++</operator></expr></incr>)</control><block type="pseudo" pos:start="233:25" pos:end="235:76"><block_content pos:start="233:25" pos:end="235:76">

                        <for pos:start="233:25" pos:end="235:76">for <control pos:start="233:29" pos:end="233:47">(<init pos:start="233:30" pos:end="233:35"><expr pos:start="233:30" pos:end="233:34"><name pos:start="233:30" pos:end="233:30">i</name> <operator pos:start="233:32" pos:end="233:32">=</operator> <literal type="number" pos:start="233:34" pos:end="233:34">0</literal></expr>;</init> <condition pos:start="233:37" pos:end="233:42"><expr pos:start="233:37" pos:end="233:41"><name pos:start="233:37" pos:end="233:37">i</name> <operator pos:start="233:39" pos:end="233:39">&lt;</operator> <literal type="number" pos:start="233:41" pos:end="233:41">8</literal></expr>;</condition> <incr pos:start="233:44" pos:end="233:46"><expr pos:start="233:44" pos:end="233:46"><name pos:start="233:44" pos:end="233:44">i</name><operator pos:start="233:45" pos:end="233:46">++</operator></expr></incr>)</control><block type="pseudo" pos:start="235:29" pos:end="235:76"><block_content pos:start="235:29" pos:end="235:76">

                            <expr_stmt pos:start="235:29" pos:end="235:76"><expr pos:start="235:29" pos:end="235:75"><name pos:start="235:29" pos:end="235:43"><name pos:start="235:29" pos:end="235:34">ublock</name><index pos:start="235:35" pos:end="235:43">[<expr pos:start="235:36" pos:end="235:42"><name pos:start="235:36" pos:end="235:36">i</name> <operator pos:start="235:38" pos:end="235:38">+</operator> <name pos:start="235:40" pos:end="235:40">j</name><operator pos:start="235:41" pos:end="235:41">*</operator><literal type="number" pos:start="235:42" pos:end="235:42">8</literal></expr>]</index></name> <operator pos:start="235:45" pos:end="235:45">=</operator> <call pos:start="235:47" pos:end="235:75"><name pos:start="235:47" pos:end="235:55">get_value</name><argument_list pos:start="235:56" pos:end="235:75">(<argument pos:start="235:57" pos:end="235:57"><expr pos:start="235:57" pos:end="235:57"><name pos:start="235:57" pos:end="235:57">c</name></expr></argument>, <argument pos:start="235:60" pos:end="235:74"><expr pos:start="235:60" pos:end="235:74"><name pos:start="235:60" pos:end="235:74">BINK_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

                    <break pos:start="237:21" pos:end="237:26">break;</break>

                <default pos:start="239:17" pos:end="239:24">default:</default>

                    <expr_stmt pos:start="241:21" pos:end="241:91"><expr pos:start="241:21" pos:end="241:90"><call pos:start="241:21" pos:end="241:90"><name pos:start="241:21" pos:end="241:26">av_log</name><argument_list pos:start="241:27" pos:end="241:90">(<argument pos:start="241:28" pos:end="241:35"><expr pos:start="241:28" pos:end="241:35"><name pos:start="241:28" pos:end="241:35"><name pos:start="241:28" pos:end="241:28">c</name><operator pos:start="241:29" pos:end="241:30">-&gt;</operator><name pos:start="241:31" pos:end="241:35">avctx</name></name></expr></argument>, <argument pos:start="241:38" pos:end="241:49"><expr pos:start="241:38" pos:end="241:49"><name pos:start="241:38" pos:end="241:49">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="241:52" pos:end="241:84"><expr pos:start="241:52" pos:end="241:84"><literal type="string" pos:start="241:52" pos:end="241:84">"Incorrect 16x16 block type %d\n"</literal></expr></argument>, <argument pos:start="241:87" pos:end="241:89"><expr pos:start="241:87" pos:end="241:89"><name pos:start="241:87" pos:end="241:89">blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="243:21" pos:end="243:47">return <expr pos:start="243:28" pos:end="243:46"><name pos:start="243:28" pos:end="243:46">AVERROR_INVALIDDATA</name></expr>;</return>

                </block_content>}</block></switch>

                <if_stmt pos:start="247:17" pos:end="249:60"><if pos:start="247:17" pos:end="249:60">if <condition pos:start="247:20" pos:end="247:38">(<expr pos:start="247:21" pos:end="247:37"><name pos:start="247:21" pos:end="247:23">blk</name> <operator pos:start="247:25" pos:end="247:26">!=</operator> <name pos:start="247:28" pos:end="247:37">FILL_BLOCK</name></expr>)</condition><block type="pseudo" pos:start="249:17" pos:end="249:60"><block_content pos:start="249:17" pos:end="249:60">

                <expr_stmt pos:start="249:17" pos:end="249:60"><expr pos:start="249:17" pos:end="249:59"><call pos:start="249:17" pos:end="249:59"><name pos:start="249:17" pos:end="249:38"><name pos:start="249:17" pos:end="249:17">c</name><operator pos:start="249:18" pos:end="249:19">-&gt;</operator><name pos:start="249:20" pos:end="249:26">binkdsp</name><operator pos:start="249:27" pos:end="249:27">.</operator><name pos:start="249:28" pos:end="249:38">scale_block</name></name><argument_list pos:start="249:39" pos:end="249:59">(<argument pos:start="249:40" pos:end="249:45"><expr pos:start="249:40" pos:end="249:45"><name pos:start="249:40" pos:end="249:45">ublock</name></expr></argument>, <argument pos:start="249:48" pos:end="249:50"><expr pos:start="249:48" pos:end="249:50"><name pos:start="249:48" pos:end="249:50">dst</name></expr></argument>, <argument pos:start="249:53" pos:end="249:58"><expr pos:start="249:53" pos:end="249:58"><name pos:start="249:53" pos:end="249:58">stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="251:17" pos:end="251:21"><expr pos:start="251:17" pos:end="251:20"><name pos:start="251:17" pos:end="251:18">bx</name><operator pos:start="251:19" pos:end="251:20">++</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="253:17" pos:end="253:26"><expr pos:start="253:17" pos:end="253:25"><name pos:start="253:17" pos:end="253:19">dst</name>  <operator pos:start="253:22" pos:end="253:23">+=</operator> <literal type="number" pos:start="253:25" pos:end="253:25">8</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="255:17" pos:end="255:26"><expr pos:start="255:17" pos:end="255:25"><name pos:start="255:17" pos:end="255:20">prev</name> <operator pos:start="255:22" pos:end="255:23">+=</operator> <literal type="number" pos:start="255:25" pos:end="255:25">8</literal></expr>;</expr_stmt>

                <break pos:start="257:17" pos:end="257:22">break;</break>

            <case pos:start="259:13" pos:end="259:30">case <expr pos:start="259:18" pos:end="259:29"><name pos:start="259:18" pos:end="259:29">MOTION_BLOCK</name></expr>:</case>

                <expr_stmt pos:start="261:17" pos:end="261:52"><expr pos:start="261:17" pos:end="261:51"><name pos:start="261:17" pos:end="261:20">xoff</name> <operator pos:start="261:22" pos:end="261:22">=</operator> <call pos:start="261:24" pos:end="261:51"><name pos:start="261:24" pos:end="261:32">get_value</name><argument_list pos:start="261:33" pos:end="261:51">(<argument pos:start="261:34" pos:end="261:34"><expr pos:start="261:34" pos:end="261:34"><name pos:start="261:34" pos:end="261:34">c</name></expr></argument>, <argument pos:start="261:37" pos:end="261:50"><expr pos:start="261:37" pos:end="261:50"><name pos:start="261:37" pos:end="261:50">BINK_SRC_X_OFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="263:17" pos:end="263:52"><expr pos:start="263:17" pos:end="263:51"><name pos:start="263:17" pos:end="263:20">yoff</name> <operator pos:start="263:22" pos:end="263:22">=</operator> <call pos:start="263:24" pos:end="263:51"><name pos:start="263:24" pos:end="263:32">get_value</name><argument_list pos:start="263:33" pos:end="263:51">(<argument pos:start="263:34" pos:end="263:34"><expr pos:start="263:34" pos:end="263:34"><name pos:start="263:34" pos:end="263:34">c</name></expr></argument>, <argument pos:start="263:37" pos:end="263:50"><expr pos:start="263:37" pos:end="263:50"><name pos:start="263:37" pos:end="263:50">BINK_SRC_Y_OFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="265:17" pos:end="265:50"><expr pos:start="265:17" pos:end="265:49"><name pos:start="265:17" pos:end="265:19">ref</name> <operator pos:start="265:21" pos:end="265:21">=</operator> <name pos:start="265:23" pos:end="265:26">prev</name> <operator pos:start="265:28" pos:end="265:28">+</operator> <name pos:start="265:30" pos:end="265:33">xoff</name> <operator pos:start="265:35" pos:end="265:35">+</operator> <name pos:start="265:37" pos:end="265:40">yoff</name> <operator pos:start="265:42" pos:end="265:42">*</operator> <name pos:start="265:44" pos:end="265:49">stride</name></expr>;</expr_stmt>

                <if_stmt pos:start="267:17" pos:end="275:17"><if pos:start="267:17" pos:end="275:17">if <condition pos:start="267:20" pos:end="267:53">(<expr pos:start="267:21" pos:end="267:52"><name pos:start="267:21" pos:end="267:44"><name pos:start="267:21" pos:end="267:23">ref</name> <argument_list type="generic" pos:start="267:25" pos:end="267:44">&lt; <argument pos:start="267:27" pos:end="267:42"><expr pos:start="267:27" pos:end="267:42"><name pos:start="267:27" pos:end="267:35">ref_start</name> <operator pos:start="267:37" pos:end="267:38">||</operator> <name pos:start="267:40" pos:end="267:42">ref</name></expr></argument> &gt;</argument_list></name> <name pos:start="267:46" pos:end="267:52">ref_end</name></expr>)</condition> <block pos:start="267:55" pos:end="275:17">{<block_content pos:start="269:21" pos:end="273:47">

                    <expr_stmt pos:start="269:21" pos:end="271:53"><expr pos:start="269:21" pos:end="271:52"><call pos:start="269:21" pos:end="271:52"><name pos:start="269:21" pos:end="269:26">av_log</name><argument_list pos:start="269:27" pos:end="271:52">(<argument pos:start="269:28" pos:end="269:35"><expr pos:start="269:28" pos:end="269:35"><name pos:start="269:28" pos:end="269:35"><name pos:start="269:28" pos:end="269:28">c</name><operator pos:start="269:29" pos:end="269:30">-&gt;</operator><name pos:start="269:31" pos:end="269:35">avctx</name></name></expr></argument>, <argument pos:start="269:38" pos:end="269:49"><expr pos:start="269:38" pos:end="269:49"><name pos:start="269:38" pos:end="269:49">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="269:52" pos:end="269:81"><expr pos:start="269:52" pos:end="269:81"><literal type="string" pos:start="269:52" pos:end="269:81">"Copy out of bounds @%d, %d\n"</literal></expr></argument>,

                           <argument pos:start="271:28" pos:end="271:38"><expr pos:start="271:28" pos:end="271:38"><name pos:start="271:28" pos:end="271:29">bx</name><operator pos:start="271:30" pos:end="271:30">*</operator><literal type="number" pos:start="271:31" pos:end="271:33">8</literal> <operator pos:start="271:33" pos:end="271:33">+</operator> <name pos:start="271:35" pos:end="271:38">xoff</name></expr></argument>, <argument pos:start="271:41" pos:end="271:51"><expr pos:start="271:41" pos:end="271:51"><name pos:start="271:41" pos:end="271:42">by</name><operator pos:start="271:43" pos:end="271:43">*</operator><literal type="number" pos:start="271:44" pos:end="271:46">8</literal> <operator pos:start="271:46" pos:end="271:46">+</operator> <name pos:start="271:48" pos:end="271:51">yoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="273:21" pos:end="273:47">return <expr pos:start="273:28" pos:end="273:46"><name pos:start="273:28" pos:end="273:46">AVERROR_INVALIDDATA</name></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="277:17" pos:end="277:66"><expr pos:start="277:17" pos:end="277:65"><name pos:start="277:17" pos:end="277:44"><name pos:start="277:17" pos:end="277:17">c</name><operator pos:start="277:18" pos:end="277:19">-&gt;</operator><name pos:start="277:20" pos:end="277:23">hdsp</name><operator pos:start="277:24" pos:end="277:24">.</operator><name pos:start="277:25" pos:end="277:38">put_pixels_tab</name><index pos:start="277:39" pos:end="277:41">[<expr pos:start="277:40" pos:end="277:40"><literal type="number" pos:start="277:40" pos:end="277:40">1</literal></expr>]</index><index pos:start="277:42" pos:end="277:44">[<expr pos:start="277:43" pos:end="277:43"><literal type="number" pos:start="277:43" pos:end="277:43">0</literal></expr>]</index></name><operator pos:start="277:45" pos:end="277:45">(</operator><name pos:start="277:46" pos:end="277:48">dst</name><operator pos:start="277:49" pos:end="277:49">,</operator> <name pos:start="277:51" pos:end="277:53">ref</name><operator pos:start="277:54" pos:end="277:54">,</operator> <name pos:start="277:56" pos:end="277:61">stride</name><operator pos:start="277:62" pos:end="277:62">,</operator> <literal type="number" pos:start="277:64" pos:end="277:64">8</literal><operator pos:start="277:65" pos:end="277:65">)</operator></expr>;</expr_stmt>

                <break pos:start="279:17" pos:end="279:22">break;</break>

            <case pos:start="281:13" pos:end="281:27">case <expr pos:start="281:18" pos:end="281:26"><name pos:start="281:18" pos:end="281:26">RUN_BLOCK</name></expr>:</case>

                <expr_stmt pos:start="283:17" pos:end="283:54"><expr pos:start="283:17" pos:end="283:53"><name pos:start="283:17" pos:end="283:20">scan</name> <operator pos:start="283:22" pos:end="283:22">=</operator> <name pos:start="283:24" pos:end="283:53"><name pos:start="283:24" pos:end="283:36">bink_patterns</name><index pos:start="283:37" pos:end="283:53">[<expr pos:start="283:38" pos:end="283:52"><call pos:start="283:38" pos:end="283:52"><name pos:start="283:38" pos:end="283:45">get_bits</name><argument_list pos:start="283:46" pos:end="283:52">(<argument pos:start="283:47" pos:end="283:48"><expr pos:start="283:47" pos:end="283:48"><name pos:start="283:47" pos:end="283:48">gb</name></expr></argument>, <argument pos:start="283:51" pos:end="283:51"><expr pos:start="283:51" pos:end="283:51"><literal type="number" pos:start="283:51" pos:end="283:51">4</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="285:17" pos:end="285:22"><expr pos:start="285:17" pos:end="285:21"><name pos:start="285:17" pos:end="285:17">i</name> <operator pos:start="285:19" pos:end="285:19">=</operator> <literal type="number" pos:start="285:21" pos:end="285:21">0</literal></expr>;</expr_stmt>

                <do pos:start="287:17" pos:end="319:33">do <block pos:start="287:20" pos:end="319:17">{<block_content pos:start="289:21" pos:end="317:21">

                    <decl_stmt pos:start="289:21" pos:end="289:61"><decl pos:start="289:21" pos:end="289:60"><type pos:start="289:21" pos:end="289:23"><name pos:start="289:21" pos:end="289:23">int</name></type> <name pos:start="289:25" pos:end="289:27">run</name> <init pos:start="289:29" pos:end="289:60">= <expr pos:start="289:31" pos:end="289:60"><call pos:start="289:31" pos:end="289:56"><name pos:start="289:31" pos:end="289:39">get_value</name><argument_list pos:start="289:40" pos:end="289:56">(<argument pos:start="289:41" pos:end="289:41"><expr pos:start="289:41" pos:end="289:41"><name pos:start="289:41" pos:end="289:41">c</name></expr></argument>, <argument pos:start="289:44" pos:end="289:55"><expr pos:start="289:44" pos:end="289:55"><name pos:start="289:44" pos:end="289:55">BINK_SRC_RUN</name></expr></argument>)</argument_list></call> <operator pos:start="289:58" pos:end="289:58">+</operator> <literal type="number" pos:start="289:60" pos:end="289:60">1</literal></expr></init></decl>;</decl_stmt>



                    <expr_stmt pos:start="293:21" pos:end="293:29"><expr pos:start="293:21" pos:end="293:28"><name pos:start="293:21" pos:end="293:21">i</name> <operator pos:start="293:23" pos:end="293:24">+=</operator> <name pos:start="293:26" pos:end="293:28">run</name></expr>;</expr_stmt>

                    <if_stmt pos:start="295:21" pos:end="301:21"><if pos:start="295:21" pos:end="301:21">if <condition pos:start="295:24" pos:end="295:31">(<expr pos:start="295:25" pos:end="295:30"><name pos:start="295:25" pos:end="295:25">i</name> <operator pos:start="295:27" pos:end="295:27">&gt;</operator> <literal type="number" pos:start="295:29" pos:end="295:30">64</literal></expr>)</condition> <block pos:start="295:33" pos:end="301:21">{<block_content pos:start="297:25" pos:end="299:51">

                        <expr_stmt pos:start="297:25" pos:end="297:83"><expr pos:start="297:25" pos:end="297:82"><call pos:start="297:25" pos:end="297:82"><name pos:start="297:25" pos:end="297:30">av_log</name><argument_list pos:start="297:31" pos:end="297:82">(<argument pos:start="297:32" pos:end="297:39"><expr pos:start="297:32" pos:end="297:39"><name pos:start="297:32" pos:end="297:39"><name pos:start="297:32" pos:end="297:32">c</name><operator pos:start="297:33" pos:end="297:34">-&gt;</operator><name pos:start="297:35" pos:end="297:39">avctx</name></name></expr></argument>, <argument pos:start="297:42" pos:end="297:53"><expr pos:start="297:42" pos:end="297:53"><name pos:start="297:42" pos:end="297:53">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="297:56" pos:end="297:81"><expr pos:start="297:56" pos:end="297:81"><literal type="string" pos:start="297:56" pos:end="297:81">"Run went out of bounds\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <return pos:start="299:25" pos:end="299:51">return <expr pos:start="299:32" pos:end="299:50"><name pos:start="299:32" pos:end="299:50">AVERROR_INVALIDDATA</name></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                    <if_stmt pos:start="303:21" pos:end="317:21"><if pos:start="303:21" pos:end="311:21">if <condition pos:start="303:24" pos:end="303:38">(<expr pos:start="303:25" pos:end="303:37"><call pos:start="303:25" pos:end="303:37"><name pos:start="303:25" pos:end="303:33">get_bits1</name><argument_list pos:start="303:34" pos:end="303:37">(<argument pos:start="303:35" pos:end="303:36"><expr pos:start="303:35" pos:end="303:36"><name pos:start="303:35" pos:end="303:36">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="303:40" pos:end="311:21">{<block_content pos:start="305:25" pos:end="309:55">

                        <expr_stmt pos:start="305:25" pos:end="305:58"><expr pos:start="305:25" pos:end="305:57"><name pos:start="305:25" pos:end="305:25">v</name> <operator pos:start="305:27" pos:end="305:27">=</operator> <call pos:start="305:29" pos:end="305:57"><name pos:start="305:29" pos:end="305:37">get_value</name><argument_list pos:start="305:38" pos:end="305:57">(<argument pos:start="305:39" pos:end="305:39"><expr pos:start="305:39" pos:end="305:39"><name pos:start="305:39" pos:end="305:39">c</name></expr></argument>, <argument pos:start="305:42" pos:end="305:56"><expr pos:start="305:42" pos:end="305:56"><name pos:start="305:42" pos:end="305:56">BINK_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <for pos:start="307:25" pos:end="309:55">for <control pos:start="307:29" pos:end="307:49">(<init pos:start="307:30" pos:end="307:35"><expr pos:start="307:30" pos:end="307:34"><name pos:start="307:30" pos:end="307:30">j</name> <operator pos:start="307:32" pos:end="307:32">=</operator> <literal type="number" pos:start="307:34" pos:end="307:34">0</literal></expr>;</init> <condition pos:start="307:37" pos:end="307:44"><expr pos:start="307:37" pos:end="307:43"><name pos:start="307:37" pos:end="307:37">j</name> <operator pos:start="307:39" pos:end="307:39">&lt;</operator> <name pos:start="307:41" pos:end="307:43">run</name></expr>;</condition> <incr pos:start="307:46" pos:end="307:48"><expr pos:start="307:46" pos:end="307:48"><name pos:start="307:46" pos:end="307:46">j</name><operator pos:start="307:47" pos:end="307:48">++</operator></expr></incr>)</control><block type="pseudo" pos:start="309:29" pos:end="309:55"><block_content pos:start="309:29" pos:end="309:55">

                            <expr_stmt pos:start="309:29" pos:end="309:55"><expr pos:start="309:29" pos:end="309:54"><name pos:start="309:29" pos:end="309:50"><name pos:start="309:29" pos:end="309:31">dst</name><index pos:start="309:32" pos:end="309:50">[<expr pos:start="309:33" pos:end="309:49"><name pos:start="309:33" pos:end="309:49"><name pos:start="309:33" pos:end="309:40">coordmap</name><index pos:start="309:41" pos:end="309:49">[<expr pos:start="309:42" pos:end="309:48"><operator pos:start="309:42" pos:end="309:42">*</operator><name pos:start="309:43" pos:end="309:46">scan</name><operator pos:start="309:47" pos:end="309:48">++</operator></expr>]</index></name></expr>]</index></name> <operator pos:start="309:52" pos:end="309:52">=</operator> <name pos:start="309:54" pos:end="309:54">v</name></expr>;</expr_stmt></block_content></block></for>

                    </block_content>}</block></if> <else pos:start="311:23" pos:end="317:21">else <block pos:start="311:28" pos:end="317:21">{<block_content pos:start="313:25" pos:end="315:83">

                        <for pos:start="313:25" pos:end="315:83">for <control pos:start="313:29" pos:end="313:49">(<init pos:start="313:30" pos:end="313:35"><expr pos:start="313:30" pos:end="313:34"><name pos:start="313:30" pos:end="313:30">j</name> <operator pos:start="313:32" pos:end="313:32">=</operator> <literal type="number" pos:start="313:34" pos:end="313:34">0</literal></expr>;</init> <condition pos:start="313:37" pos:end="313:44"><expr pos:start="313:37" pos:end="313:43"><name pos:start="313:37" pos:end="313:37">j</name> <operator pos:start="313:39" pos:end="313:39">&lt;</operator> <name pos:start="313:41" pos:end="313:43">run</name></expr>;</condition> <incr pos:start="313:46" pos:end="313:48"><expr pos:start="313:46" pos:end="313:48"><name pos:start="313:46" pos:end="313:46">j</name><operator pos:start="313:47" pos:end="313:48">++</operator></expr></incr>)</control><block type="pseudo" pos:start="315:29" pos:end="315:83"><block_content pos:start="315:29" pos:end="315:83">

                            <expr_stmt pos:start="315:29" pos:end="315:83"><expr pos:start="315:29" pos:end="315:82"><name pos:start="315:29" pos:end="315:50"><name pos:start="315:29" pos:end="315:31">dst</name><index pos:start="315:32" pos:end="315:50">[<expr pos:start="315:33" pos:end="315:49"><name pos:start="315:33" pos:end="315:49"><name pos:start="315:33" pos:end="315:40">coordmap</name><index pos:start="315:41" pos:end="315:49">[<expr pos:start="315:42" pos:end="315:48"><operator pos:start="315:42" pos:end="315:42">*</operator><name pos:start="315:43" pos:end="315:46">scan</name><operator pos:start="315:47" pos:end="315:48">++</operator></expr>]</index></name></expr>]</index></name> <operator pos:start="315:52" pos:end="315:52">=</operator> <call pos:start="315:54" pos:end="315:82"><name pos:start="315:54" pos:end="315:62">get_value</name><argument_list pos:start="315:63" pos:end="315:82">(<argument pos:start="315:64" pos:end="315:64"><expr pos:start="315:64" pos:end="315:64"><name pos:start="315:64" pos:end="315:64">c</name></expr></argument>, <argument pos:start="315:67" pos:end="315:81"><expr pos:start="315:67" pos:end="315:81"><name pos:start="315:67" pos:end="315:81">BINK_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block> while <condition pos:start="319:25" pos:end="319:32">(<expr pos:start="319:26" pos:end="319:31"><name pos:start="319:26" pos:end="319:26">i</name> <operator pos:start="319:28" pos:end="319:28">&lt;</operator> <literal type="number" pos:start="319:30" pos:end="319:31">63</literal></expr>)</condition>;</do>

                <if_stmt pos:start="321:17" pos:end="323:75"><if pos:start="321:17" pos:end="323:75">if <condition pos:start="321:20" pos:end="321:28">(<expr pos:start="321:21" pos:end="321:27"><name pos:start="321:21" pos:end="321:21">i</name> <operator pos:start="321:23" pos:end="321:24">==</operator> <literal type="number" pos:start="321:26" pos:end="321:27">63</literal></expr>)</condition><block type="pseudo" pos:start="323:21" pos:end="323:75"><block_content pos:start="323:21" pos:end="323:75">

                    <expr_stmt pos:start="323:21" pos:end="323:75"><expr pos:start="323:21" pos:end="323:74"><name pos:start="323:21" pos:end="323:42"><name pos:start="323:21" pos:end="323:23">dst</name><index pos:start="323:24" pos:end="323:42">[<expr pos:start="323:25" pos:end="323:41"><name pos:start="323:25" pos:end="323:41"><name pos:start="323:25" pos:end="323:32">coordmap</name><index pos:start="323:33" pos:end="323:41">[<expr pos:start="323:34" pos:end="323:40"><operator pos:start="323:34" pos:end="323:34">*</operator><name pos:start="323:35" pos:end="323:38">scan</name><operator pos:start="323:39" pos:end="323:40">++</operator></expr>]</index></name></expr>]</index></name> <operator pos:start="323:44" pos:end="323:44">=</operator> <call pos:start="323:46" pos:end="323:74"><name pos:start="323:46" pos:end="323:54">get_value</name><argument_list pos:start="323:55" pos:end="323:74">(<argument pos:start="323:56" pos:end="323:56"><expr pos:start="323:56" pos:end="323:56"><name pos:start="323:56" pos:end="323:56">c</name></expr></argument>, <argument pos:start="323:59" pos:end="323:73"><expr pos:start="323:59" pos:end="323:73"><name pos:start="323:59" pos:end="323:73">BINK_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <break pos:start="325:17" pos:end="325:22">break;</break>

            <case pos:start="327:13" pos:end="327:31">case <expr pos:start="327:18" pos:end="327:30"><name pos:start="327:18" pos:end="327:30">RESIDUE_BLOCK</name></expr>:</case>

                <expr_stmt pos:start="329:17" pos:end="329:52"><expr pos:start="329:17" pos:end="329:51"><name pos:start="329:17" pos:end="329:20">xoff</name> <operator pos:start="329:22" pos:end="329:22">=</operator> <call pos:start="329:24" pos:end="329:51"><name pos:start="329:24" pos:end="329:32">get_value</name><argument_list pos:start="329:33" pos:end="329:51">(<argument pos:start="329:34" pos:end="329:34"><expr pos:start="329:34" pos:end="329:34"><name pos:start="329:34" pos:end="329:34">c</name></expr></argument>, <argument pos:start="329:37" pos:end="329:50"><expr pos:start="329:37" pos:end="329:50"><name pos:start="329:37" pos:end="329:50">BINK_SRC_X_OFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="331:17" pos:end="331:52"><expr pos:start="331:17" pos:end="331:51"><name pos:start="331:17" pos:end="331:20">yoff</name> <operator pos:start="331:22" pos:end="331:22">=</operator> <call pos:start="331:24" pos:end="331:51"><name pos:start="331:24" pos:end="331:32">get_value</name><argument_list pos:start="331:33" pos:end="331:51">(<argument pos:start="331:34" pos:end="331:34"><expr pos:start="331:34" pos:end="331:34"><name pos:start="331:34" pos:end="331:34">c</name></expr></argument>, <argument pos:start="331:37" pos:end="331:50"><expr pos:start="331:37" pos:end="331:50"><name pos:start="331:37" pos:end="331:50">BINK_SRC_Y_OFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="333:17" pos:end="333:50"><expr pos:start="333:17" pos:end="333:49"><name pos:start="333:17" pos:end="333:19">ref</name> <operator pos:start="333:21" pos:end="333:21">=</operator> <name pos:start="333:23" pos:end="333:26">prev</name> <operator pos:start="333:28" pos:end="333:28">+</operator> <name pos:start="333:30" pos:end="333:33">xoff</name> <operator pos:start="333:35" pos:end="333:35">+</operator> <name pos:start="333:37" pos:end="333:40">yoff</name> <operator pos:start="333:42" pos:end="333:42">*</operator> <name pos:start="333:44" pos:end="333:49">stride</name></expr>;</expr_stmt>

                <if_stmt pos:start="335:17" pos:end="343:17"><if pos:start="335:17" pos:end="343:17">if <condition pos:start="335:20" pos:end="335:53">(<expr pos:start="335:21" pos:end="335:52"><name pos:start="335:21" pos:end="335:44"><name pos:start="335:21" pos:end="335:23">ref</name> <argument_list type="generic" pos:start="335:25" pos:end="335:44">&lt; <argument pos:start="335:27" pos:end="335:42"><expr pos:start="335:27" pos:end="335:42"><name pos:start="335:27" pos:end="335:35">ref_start</name> <operator pos:start="335:37" pos:end="335:38">||</operator> <name pos:start="335:40" pos:end="335:42">ref</name></expr></argument> &gt;</argument_list></name> <name pos:start="335:46" pos:end="335:52">ref_end</name></expr>)</condition> <block pos:start="335:55" pos:end="343:17">{<block_content pos:start="337:21" pos:end="341:47">

                    <expr_stmt pos:start="337:21" pos:end="339:53"><expr pos:start="337:21" pos:end="339:52"><call pos:start="337:21" pos:end="339:52"><name pos:start="337:21" pos:end="337:26">av_log</name><argument_list pos:start="337:27" pos:end="339:52">(<argument pos:start="337:28" pos:end="337:35"><expr pos:start="337:28" pos:end="337:35"><name pos:start="337:28" pos:end="337:35"><name pos:start="337:28" pos:end="337:28">c</name><operator pos:start="337:29" pos:end="337:30">-&gt;</operator><name pos:start="337:31" pos:end="337:35">avctx</name></name></expr></argument>, <argument pos:start="337:38" pos:end="337:49"><expr pos:start="337:38" pos:end="337:49"><name pos:start="337:38" pos:end="337:49">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="337:52" pos:end="337:81"><expr pos:start="337:52" pos:end="337:81"><literal type="string" pos:start="337:52" pos:end="337:81">"Copy out of bounds @%d, %d\n"</literal></expr></argument>,

                           <argument pos:start="339:28" pos:end="339:38"><expr pos:start="339:28" pos:end="339:38"><name pos:start="339:28" pos:end="339:29">bx</name><operator pos:start="339:30" pos:end="339:30">*</operator><literal type="number" pos:start="339:31" pos:end="339:33">8</literal> <operator pos:start="339:33" pos:end="339:33">+</operator> <name pos:start="339:35" pos:end="339:38">xoff</name></expr></argument>, <argument pos:start="339:41" pos:end="339:51"><expr pos:start="339:41" pos:end="339:51"><name pos:start="339:41" pos:end="339:42">by</name><operator pos:start="339:43" pos:end="339:43">*</operator><literal type="number" pos:start="339:44" pos:end="339:46">8</literal> <operator pos:start="339:46" pos:end="339:46">+</operator> <name pos:start="339:48" pos:end="339:51">yoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="341:21" pos:end="341:47">return <expr pos:start="341:28" pos:end="341:46"><name pos:start="341:28" pos:end="341:46">AVERROR_INVALIDDATA</name></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="345:17" pos:end="345:66"><expr pos:start="345:17" pos:end="345:65"><name pos:start="345:17" pos:end="345:44"><name pos:start="345:17" pos:end="345:17">c</name><operator pos:start="345:18" pos:end="345:19">-&gt;</operator><name pos:start="345:20" pos:end="345:23">hdsp</name><operator pos:start="345:24" pos:end="345:24">.</operator><name pos:start="345:25" pos:end="345:38">put_pixels_tab</name><index pos:start="345:39" pos:end="345:41">[<expr pos:start="345:40" pos:end="345:40"><literal type="number" pos:start="345:40" pos:end="345:40">1</literal></expr>]</index><index pos:start="345:42" pos:end="345:44">[<expr pos:start="345:43" pos:end="345:43"><literal type="number" pos:start="345:43" pos:end="345:43">0</literal></expr>]</index></name><operator pos:start="345:45" pos:end="345:45">(</operator><name pos:start="345:46" pos:end="345:48">dst</name><operator pos:start="345:49" pos:end="345:49">,</operator> <name pos:start="345:51" pos:end="345:53">ref</name><operator pos:start="345:54" pos:end="345:54">,</operator> <name pos:start="345:56" pos:end="345:61">stride</name><operator pos:start="345:62" pos:end="345:62">,</operator> <literal type="number" pos:start="345:64" pos:end="345:64">8</literal><operator pos:start="345:65" pos:end="345:65">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="347:17" pos:end="347:43"><expr pos:start="347:17" pos:end="347:42"><call pos:start="347:17" pos:end="347:42"><name pos:start="347:17" pos:end="347:35"><name pos:start="347:17" pos:end="347:17">c</name><operator pos:start="347:18" pos:end="347:19">-&gt;</operator><name pos:start="347:20" pos:end="347:23">bdsp</name><operator pos:start="347:24" pos:end="347:24">.</operator><name pos:start="347:25" pos:end="347:35">clear_block</name></name><argument_list pos:start="347:36" pos:end="347:42">(<argument pos:start="347:37" pos:end="347:41"><expr pos:start="347:37" pos:end="347:41"><name pos:start="347:37" pos:end="347:41">block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="349:17" pos:end="349:36"><expr pos:start="349:17" pos:end="349:35"><name pos:start="349:17" pos:end="349:17">v</name> <operator pos:start="349:19" pos:end="349:19">=</operator> <call pos:start="349:21" pos:end="349:35"><name pos:start="349:21" pos:end="349:28">get_bits</name><argument_list pos:start="349:29" pos:end="349:35">(<argument pos:start="349:30" pos:end="349:31"><expr pos:start="349:30" pos:end="349:31"><name pos:start="349:30" pos:end="349:31">gb</name></expr></argument>, <argument pos:start="349:34" pos:end="349:34"><expr pos:start="349:34" pos:end="349:34"><literal type="number" pos:start="349:34" pos:end="349:34">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="351:17" pos:end="351:43"><expr pos:start="351:17" pos:end="351:42"><call pos:start="351:17" pos:end="351:42"><name pos:start="351:17" pos:end="351:28">read_residue</name><argument_list pos:start="351:29" pos:end="351:42">(<argument pos:start="351:30" pos:end="351:31"><expr pos:start="351:30" pos:end="351:31"><name pos:start="351:30" pos:end="351:31">gb</name></expr></argument>, <argument pos:start="351:34" pos:end="351:38"><expr pos:start="351:34" pos:end="351:38"><name pos:start="351:34" pos:end="351:38">block</name></expr></argument>, <argument pos:start="351:41" pos:end="351:41"><expr pos:start="351:41" pos:end="351:41"><name pos:start="351:41" pos:end="351:41">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="353:17" pos:end="353:59"><expr pos:start="353:17" pos:end="353:58"><call pos:start="353:17" pos:end="353:58"><name pos:start="353:17" pos:end="353:38"><name pos:start="353:17" pos:end="353:17">c</name><operator pos:start="353:18" pos:end="353:19">-&gt;</operator><name pos:start="353:20" pos:end="353:26">binkdsp</name><operator pos:start="353:27" pos:end="353:27">.</operator><name pos:start="353:28" pos:end="353:38">add_pixels8</name></name><argument_list pos:start="353:39" pos:end="353:58">(<argument pos:start="353:40" pos:end="353:42"><expr pos:start="353:40" pos:end="353:42"><name pos:start="353:40" pos:end="353:42">dst</name></expr></argument>, <argument pos:start="353:45" pos:end="353:49"><expr pos:start="353:45" pos:end="353:49"><name pos:start="353:45" pos:end="353:49">block</name></expr></argument>, <argument pos:start="353:52" pos:end="353:57"><expr pos:start="353:52" pos:end="353:57"><name pos:start="353:52" pos:end="353:57">stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="355:17" pos:end="355:22">break;</break>

            <case pos:start="357:13" pos:end="357:29">case <expr pos:start="357:18" pos:end="357:28"><name pos:start="357:18" pos:end="357:28">INTRA_BLOCK</name></expr>:</case>

                <expr_stmt pos:start="359:17" pos:end="359:60"><expr pos:start="359:17" pos:end="359:59"><call pos:start="359:17" pos:end="359:59"><name pos:start="359:17" pos:end="359:22">memset</name><argument_list pos:start="359:23" pos:end="359:59">(<argument pos:start="359:24" pos:end="359:31"><expr pos:start="359:24" pos:end="359:31"><name pos:start="359:24" pos:end="359:31">dctblock</name></expr></argument>, <argument pos:start="359:34" pos:end="359:34"><expr pos:start="359:34" pos:end="359:34"><literal type="number" pos:start="359:34" pos:end="359:34">0</literal></expr></argument>, <argument pos:start="359:37" pos:end="359:58"><expr pos:start="359:37" pos:end="359:58"><sizeof pos:start="359:37" pos:end="359:53">sizeof<argument_list pos:start="359:43" pos:end="359:53">(<argument pos:start="359:44" pos:end="359:52"><expr pos:start="359:44" pos:end="359:52"><operator pos:start="359:44" pos:end="359:44">*</operator><name pos:start="359:45" pos:end="359:52">dctblock</name></expr></argument>)</argument_list></sizeof> <operator pos:start="359:55" pos:end="359:55">*</operator> <literal type="number" pos:start="359:57" pos:end="359:58">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="361:17" pos:end="361:62"><expr pos:start="361:17" pos:end="361:61"><name pos:start="361:17" pos:end="361:27"><name pos:start="361:17" pos:end="361:24">dctblock</name><index pos:start="361:25" pos:end="361:27">[<expr pos:start="361:26" pos:end="361:26"><literal type="number" pos:start="361:26" pos:end="361:26">0</literal></expr>]</index></name> <operator pos:start="361:29" pos:end="361:29">=</operator> <call pos:start="361:31" pos:end="361:61"><name pos:start="361:31" pos:end="361:39">get_value</name><argument_list pos:start="361:40" pos:end="361:61">(<argument pos:start="361:41" pos:end="361:41"><expr pos:start="361:41" pos:end="361:41"><name pos:start="361:41" pos:end="361:41">c</name></expr></argument>, <argument pos:start="361:44" pos:end="361:60"><expr pos:start="361:44" pos:end="361:60"><name pos:start="361:44" pos:end="361:60">BINK_SRC_INTRA_DC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="363:17" pos:end="363:79"><expr pos:start="363:17" pos:end="363:78"><call pos:start="363:17" pos:end="363:78"><name pos:start="363:17" pos:end="363:31">read_dct_coeffs</name><argument_list pos:start="363:32" pos:end="363:78">(<argument pos:start="363:33" pos:end="363:34"><expr pos:start="363:33" pos:end="363:34"><name pos:start="363:33" pos:end="363:34">gb</name></expr></argument>, <argument pos:start="363:37" pos:end="363:44"><expr pos:start="363:37" pos:end="363:44"><name pos:start="363:37" pos:end="363:44">dctblock</name></expr></argument>, <argument pos:start="363:47" pos:end="363:55"><expr pos:start="363:47" pos:end="363:55"><name pos:start="363:47" pos:end="363:55">bink_scan</name></expr></argument>, <argument pos:start="363:58" pos:end="363:73"><expr pos:start="363:58" pos:end="363:73"><name pos:start="363:58" pos:end="363:73">bink_intra_quant</name></expr></argument>, <argument pos:start="363:76" pos:end="363:77"><expr pos:start="363:76" pos:end="363:77"><operator pos:start="363:76" pos:end="363:76">-</operator><literal type="number" pos:start="363:77" pos:end="363:77">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="365:17" pos:end="365:59"><expr pos:start="365:17" pos:end="365:58"><call pos:start="365:17" pos:end="365:58"><name pos:start="365:17" pos:end="365:35"><name pos:start="365:17" pos:end="365:17">c</name><operator pos:start="365:18" pos:end="365:19">-&gt;</operator><name pos:start="365:20" pos:end="365:26">binkdsp</name><operator pos:start="365:27" pos:end="365:27">.</operator><name pos:start="365:28" pos:end="365:35">idct_put</name></name><argument_list pos:start="365:36" pos:end="365:58">(<argument pos:start="365:37" pos:end="365:39"><expr pos:start="365:37" pos:end="365:39"><name pos:start="365:37" pos:end="365:39">dst</name></expr></argument>, <argument pos:start="365:42" pos:end="365:47"><expr pos:start="365:42" pos:end="365:47"><name pos:start="365:42" pos:end="365:47">stride</name></expr></argument>, <argument pos:start="365:50" pos:end="365:57"><expr pos:start="365:50" pos:end="365:57"><name pos:start="365:50" pos:end="365:57">dctblock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="367:17" pos:end="367:22">break;</break>

            <case pos:start="369:13" pos:end="369:28">case <expr pos:start="369:18" pos:end="369:27"><name pos:start="369:18" pos:end="369:27">FILL_BLOCK</name></expr>:</case>

                <expr_stmt pos:start="371:17" pos:end="371:50"><expr pos:start="371:17" pos:end="371:49"><name pos:start="371:17" pos:end="371:17">v</name> <operator pos:start="371:19" pos:end="371:19">=</operator> <call pos:start="371:21" pos:end="371:49"><name pos:start="371:21" pos:end="371:29">get_value</name><argument_list pos:start="371:30" pos:end="371:49">(<argument pos:start="371:31" pos:end="371:31"><expr pos:start="371:31" pos:end="371:31"><name pos:start="371:31" pos:end="371:31">c</name></expr></argument>, <argument pos:start="371:34" pos:end="371:48"><expr pos:start="371:34" pos:end="371:48"><name pos:start="371:34" pos:end="371:48">BINK_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="373:17" pos:end="373:61"><expr pos:start="373:17" pos:end="373:60"><name pos:start="373:17" pos:end="373:41"><name pos:start="373:17" pos:end="373:17">c</name><operator pos:start="373:18" pos:end="373:19">-&gt;</operator><name pos:start="373:20" pos:end="373:23">bdsp</name><operator pos:start="373:24" pos:end="373:24">.</operator><name pos:start="373:25" pos:end="373:38">fill_block_tab</name><index pos:start="373:39" pos:end="373:41">[<expr pos:start="373:40" pos:end="373:40"><literal type="number" pos:start="373:40" pos:end="373:40">1</literal></expr>]</index></name><operator pos:start="373:42" pos:end="373:42">(</operator><name pos:start="373:43" pos:end="373:45">dst</name><operator pos:start="373:46" pos:end="373:46">,</operator> <name pos:start="373:48" pos:end="373:48">v</name><operator pos:start="373:49" pos:end="373:49">,</operator> <name pos:start="373:51" pos:end="373:56">stride</name><operator pos:start="373:57" pos:end="373:57">,</operator> <literal type="number" pos:start="373:59" pos:end="373:59">8</literal><operator pos:start="373:60" pos:end="373:60">)</operator></expr>;</expr_stmt>

                <break pos:start="375:17" pos:end="375:22">break;</break>

            <case pos:start="377:13" pos:end="377:29">case <expr pos:start="377:18" pos:end="377:28"><name pos:start="377:18" pos:end="377:28">INTER_BLOCK</name></expr>:</case>

                <expr_stmt pos:start="379:17" pos:end="379:52"><expr pos:start="379:17" pos:end="379:51"><name pos:start="379:17" pos:end="379:20">xoff</name> <operator pos:start="379:22" pos:end="379:22">=</operator> <call pos:start="379:24" pos:end="379:51"><name pos:start="379:24" pos:end="379:32">get_value</name><argument_list pos:start="379:33" pos:end="379:51">(<argument pos:start="379:34" pos:end="379:34"><expr pos:start="379:34" pos:end="379:34"><name pos:start="379:34" pos:end="379:34">c</name></expr></argument>, <argument pos:start="379:37" pos:end="379:50"><expr pos:start="379:37" pos:end="379:50"><name pos:start="379:37" pos:end="379:50">BINK_SRC_X_OFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="381:17" pos:end="381:52"><expr pos:start="381:17" pos:end="381:51"><name pos:start="381:17" pos:end="381:20">yoff</name> <operator pos:start="381:22" pos:end="381:22">=</operator> <call pos:start="381:24" pos:end="381:51"><name pos:start="381:24" pos:end="381:32">get_value</name><argument_list pos:start="381:33" pos:end="381:51">(<argument pos:start="381:34" pos:end="381:34"><expr pos:start="381:34" pos:end="381:34"><name pos:start="381:34" pos:end="381:34">c</name></expr></argument>, <argument pos:start="381:37" pos:end="381:50"><expr pos:start="381:37" pos:end="381:50"><name pos:start="381:37" pos:end="381:50">BINK_SRC_Y_OFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="383:17" pos:end="383:50"><expr pos:start="383:17" pos:end="383:49"><name pos:start="383:17" pos:end="383:19">ref</name> <operator pos:start="383:21" pos:end="383:21">=</operator> <name pos:start="383:23" pos:end="383:26">prev</name> <operator pos:start="383:28" pos:end="383:28">+</operator> <name pos:start="383:30" pos:end="383:33">xoff</name> <operator pos:start="383:35" pos:end="383:35">+</operator> <name pos:start="383:37" pos:end="383:40">yoff</name> <operator pos:start="383:42" pos:end="383:42">*</operator> <name pos:start="383:44" pos:end="383:49">stride</name></expr>;</expr_stmt>

                <expr_stmt pos:start="385:17" pos:end="385:66"><expr pos:start="385:17" pos:end="385:65"><name pos:start="385:17" pos:end="385:44"><name pos:start="385:17" pos:end="385:17">c</name><operator pos:start="385:18" pos:end="385:19">-&gt;</operator><name pos:start="385:20" pos:end="385:23">hdsp</name><operator pos:start="385:24" pos:end="385:24">.</operator><name pos:start="385:25" pos:end="385:38">put_pixels_tab</name><index pos:start="385:39" pos:end="385:41">[<expr pos:start="385:40" pos:end="385:40"><literal type="number" pos:start="385:40" pos:end="385:40">1</literal></expr>]</index><index pos:start="385:42" pos:end="385:44">[<expr pos:start="385:43" pos:end="385:43"><literal type="number" pos:start="385:43" pos:end="385:43">0</literal></expr>]</index></name><operator pos:start="385:45" pos:end="385:45">(</operator><name pos:start="385:46" pos:end="385:48">dst</name><operator pos:start="385:49" pos:end="385:49">,</operator> <name pos:start="385:51" pos:end="385:53">ref</name><operator pos:start="385:54" pos:end="385:54">,</operator> <name pos:start="385:56" pos:end="385:61">stride</name><operator pos:start="385:62" pos:end="385:62">,</operator> <literal type="number" pos:start="385:64" pos:end="385:64">8</literal><operator pos:start="385:65" pos:end="385:65">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="387:17" pos:end="387:60"><expr pos:start="387:17" pos:end="387:59"><call pos:start="387:17" pos:end="387:59"><name pos:start="387:17" pos:end="387:22">memset</name><argument_list pos:start="387:23" pos:end="387:59">(<argument pos:start="387:24" pos:end="387:31"><expr pos:start="387:24" pos:end="387:31"><name pos:start="387:24" pos:end="387:31">dctblock</name></expr></argument>, <argument pos:start="387:34" pos:end="387:34"><expr pos:start="387:34" pos:end="387:34"><literal type="number" pos:start="387:34" pos:end="387:34">0</literal></expr></argument>, <argument pos:start="387:37" pos:end="387:58"><expr pos:start="387:37" pos:end="387:58"><sizeof pos:start="387:37" pos:end="387:53">sizeof<argument_list pos:start="387:43" pos:end="387:53">(<argument pos:start="387:44" pos:end="387:52"><expr pos:start="387:44" pos:end="387:52"><operator pos:start="387:44" pos:end="387:44">*</operator><name pos:start="387:45" pos:end="387:52">dctblock</name></expr></argument>)</argument_list></sizeof> <operator pos:start="387:55" pos:end="387:55">*</operator> <literal type="number" pos:start="387:57" pos:end="387:58">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="389:17" pos:end="389:62"><expr pos:start="389:17" pos:end="389:61"><name pos:start="389:17" pos:end="389:27"><name pos:start="389:17" pos:end="389:24">dctblock</name><index pos:start="389:25" pos:end="389:27">[<expr pos:start="389:26" pos:end="389:26"><literal type="number" pos:start="389:26" pos:end="389:26">0</literal></expr>]</index></name> <operator pos:start="389:29" pos:end="389:29">=</operator> <call pos:start="389:31" pos:end="389:61"><name pos:start="389:31" pos:end="389:39">get_value</name><argument_list pos:start="389:40" pos:end="389:61">(<argument pos:start="389:41" pos:end="389:41"><expr pos:start="389:41" pos:end="389:41"><name pos:start="389:41" pos:end="389:41">c</name></expr></argument>, <argument pos:start="389:44" pos:end="389:60"><expr pos:start="389:44" pos:end="389:60"><name pos:start="389:44" pos:end="389:60">BINK_SRC_INTER_DC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="391:17" pos:end="391:79"><expr pos:start="391:17" pos:end="391:78"><call pos:start="391:17" pos:end="391:78"><name pos:start="391:17" pos:end="391:31">read_dct_coeffs</name><argument_list pos:start="391:32" pos:end="391:78">(<argument pos:start="391:33" pos:end="391:34"><expr pos:start="391:33" pos:end="391:34"><name pos:start="391:33" pos:end="391:34">gb</name></expr></argument>, <argument pos:start="391:37" pos:end="391:44"><expr pos:start="391:37" pos:end="391:44"><name pos:start="391:37" pos:end="391:44">dctblock</name></expr></argument>, <argument pos:start="391:47" pos:end="391:55"><expr pos:start="391:47" pos:end="391:55"><name pos:start="391:47" pos:end="391:55">bink_scan</name></expr></argument>, <argument pos:start="391:58" pos:end="391:73"><expr pos:start="391:58" pos:end="391:73"><name pos:start="391:58" pos:end="391:73">bink_inter_quant</name></expr></argument>, <argument pos:start="391:76" pos:end="391:77"><expr pos:start="391:76" pos:end="391:77"><operator pos:start="391:76" pos:end="391:76">-</operator><literal type="number" pos:start="391:77" pos:end="391:77">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="393:17" pos:end="393:59"><expr pos:start="393:17" pos:end="393:58"><call pos:start="393:17" pos:end="393:58"><name pos:start="393:17" pos:end="393:35"><name pos:start="393:17" pos:end="393:17">c</name><operator pos:start="393:18" pos:end="393:19">-&gt;</operator><name pos:start="393:20" pos:end="393:26">binkdsp</name><operator pos:start="393:27" pos:end="393:27">.</operator><name pos:start="393:28" pos:end="393:35">idct_add</name></name><argument_list pos:start="393:36" pos:end="393:58">(<argument pos:start="393:37" pos:end="393:39"><expr pos:start="393:37" pos:end="393:39"><name pos:start="393:37" pos:end="393:39">dst</name></expr></argument>, <argument pos:start="393:42" pos:end="393:47"><expr pos:start="393:42" pos:end="393:47"><name pos:start="393:42" pos:end="393:47">stride</name></expr></argument>, <argument pos:start="393:50" pos:end="393:57"><expr pos:start="393:50" pos:end="393:57"><name pos:start="393:50" pos:end="393:57">dctblock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="395:17" pos:end="395:22">break;</break>

            <case pos:start="397:13" pos:end="397:31">case <expr pos:start="397:18" pos:end="397:30"><name pos:start="397:18" pos:end="397:30">PATTERN_BLOCK</name></expr>:</case>

                <for pos:start="399:17" pos:end="401:59">for <control pos:start="399:21" pos:end="399:39">(<init pos:start="399:22" pos:end="399:27"><expr pos:start="399:22" pos:end="399:26"><name pos:start="399:22" pos:end="399:22">i</name> <operator pos:start="399:24" pos:end="399:24">=</operator> <literal type="number" pos:start="399:26" pos:end="399:26">0</literal></expr>;</init> <condition pos:start="399:29" pos:end="399:34"><expr pos:start="399:29" pos:end="399:33"><name pos:start="399:29" pos:end="399:29">i</name> <operator pos:start="399:31" pos:end="399:31">&lt;</operator> <literal type="number" pos:start="399:33" pos:end="399:33">2</literal></expr>;</condition> <incr pos:start="399:36" pos:end="399:38"><expr pos:start="399:36" pos:end="399:38"><name pos:start="399:36" pos:end="399:36">i</name><operator pos:start="399:37" pos:end="399:38">++</operator></expr></incr>)</control><block type="pseudo" pos:start="401:21" pos:end="401:59"><block_content pos:start="401:21" pos:end="401:59">

                    <expr_stmt pos:start="401:21" pos:end="401:59"><expr pos:start="401:21" pos:end="401:58"><name pos:start="401:21" pos:end="401:26"><name pos:start="401:21" pos:end="401:23">col</name><index pos:start="401:24" pos:end="401:26">[<expr pos:start="401:25" pos:end="401:25"><name pos:start="401:25" pos:end="401:25">i</name></expr>]</index></name> <operator pos:start="401:28" pos:end="401:28">=</operator> <call pos:start="401:30" pos:end="401:58"><name pos:start="401:30" pos:end="401:38">get_value</name><argument_list pos:start="401:39" pos:end="401:58">(<argument pos:start="401:40" pos:end="401:40"><expr pos:start="401:40" pos:end="401:40"><name pos:start="401:40" pos:end="401:40">c</name></expr></argument>, <argument pos:start="401:43" pos:end="401:57"><expr pos:start="401:43" pos:end="401:57"><name pos:start="401:43" pos:end="401:57">BINK_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                <for pos:start="403:17" pos:end="411:17">for <control pos:start="403:21" pos:end="403:39">(<init pos:start="403:22" pos:end="403:27"><expr pos:start="403:22" pos:end="403:26"><name pos:start="403:22" pos:end="403:22">i</name> <operator pos:start="403:24" pos:end="403:24">=</operator> <literal type="number" pos:start="403:26" pos:end="403:26">0</literal></expr>;</init> <condition pos:start="403:29" pos:end="403:34"><expr pos:start="403:29" pos:end="403:33"><name pos:start="403:29" pos:end="403:29">i</name> <operator pos:start="403:31" pos:end="403:31">&lt;</operator> <literal type="number" pos:start="403:33" pos:end="403:33">8</literal></expr>;</condition> <incr pos:start="403:36" pos:end="403:38"><expr pos:start="403:36" pos:end="403:38"><name pos:start="403:36" pos:end="403:36">i</name><operator pos:start="403:37" pos:end="403:38">++</operator></expr></incr>)</control> <block pos:start="403:41" pos:end="411:17">{<block_content pos:start="405:21" pos:end="409:55">

                    <expr_stmt pos:start="405:21" pos:end="405:55"><expr pos:start="405:21" pos:end="405:54"><name pos:start="405:21" pos:end="405:21">v</name> <operator pos:start="405:23" pos:end="405:23">=</operator> <call pos:start="405:25" pos:end="405:54"><name pos:start="405:25" pos:end="405:33">get_value</name><argument_list pos:start="405:34" pos:end="405:54">(<argument pos:start="405:35" pos:end="405:35"><expr pos:start="405:35" pos:end="405:35"><name pos:start="405:35" pos:end="405:35">c</name></expr></argument>, <argument pos:start="405:38" pos:end="405:53"><expr pos:start="405:38" pos:end="405:53"><name pos:start="405:38" pos:end="405:53">BINK_SRC_PATTERN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <for pos:start="407:21" pos:end="409:55">for <control pos:start="407:25" pos:end="407:52">(<init pos:start="407:26" pos:end="407:31"><expr pos:start="407:26" pos:end="407:30"><name pos:start="407:26" pos:end="407:26">j</name> <operator pos:start="407:28" pos:end="407:28">=</operator> <literal type="number" pos:start="407:30" pos:end="407:30">0</literal></expr>;</init> <condition pos:start="407:33" pos:end="407:38"><expr pos:start="407:33" pos:end="407:37"><name pos:start="407:33" pos:end="407:33">j</name> <operator pos:start="407:35" pos:end="407:35">&lt;</operator> <literal type="number" pos:start="407:37" pos:end="407:37">8</literal></expr>;</condition> <incr pos:start="407:40" pos:end="407:51"><expr pos:start="407:40" pos:end="407:42"><name pos:start="407:40" pos:end="407:40">j</name><operator pos:start="407:41" pos:end="407:42">++</operator></expr><operator pos:start="407:43" pos:end="407:43">,</operator> <expr pos:start="407:45" pos:end="407:51"><name pos:start="407:45" pos:end="407:45">v</name> <operator pos:start="407:47" pos:end="407:49">&gt;&gt;=</operator> <literal type="number" pos:start="407:51" pos:end="407:51">1</literal></expr></incr>)</control><block type="pseudo" pos:start="409:25" pos:end="409:55"><block_content pos:start="409:25" pos:end="409:55">

                        <expr_stmt pos:start="409:25" pos:end="409:55"><expr pos:start="409:25" pos:end="409:54"><name pos:start="409:25" pos:end="409:41"><name pos:start="409:25" pos:end="409:27">dst</name><index pos:start="409:28" pos:end="409:41">[<expr pos:start="409:29" pos:end="409:40"><name pos:start="409:29" pos:end="409:29">i</name><operator pos:start="409:30" pos:end="409:30">*</operator><name pos:start="409:31" pos:end="409:36">stride</name> <operator pos:start="409:38" pos:end="409:38">+</operator> <name pos:start="409:40" pos:end="409:40">j</name></expr>]</index></name> <operator pos:start="409:43" pos:end="409:43">=</operator> <name pos:start="409:45" pos:end="409:54"><name pos:start="409:45" pos:end="409:47">col</name><index pos:start="409:48" pos:end="409:54">[<expr pos:start="409:49" pos:end="409:53"><name pos:start="409:49" pos:end="409:49">v</name> <operator pos:start="409:51" pos:end="409:51">&amp;</operator> <literal type="number" pos:start="409:53" pos:end="409:53">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

                </block_content>}</block></for>

                <break pos:start="413:17" pos:end="413:22">break;</break>

            <case pos:start="415:13" pos:end="415:27">case <expr pos:start="415:18" pos:end="415:26"><name pos:start="415:18" pos:end="415:26">RAW_BLOCK</name></expr>:</case>

                <for pos:start="417:17" pos:end="419:88">for <control pos:start="417:21" pos:end="417:39">(<init pos:start="417:22" pos:end="417:27"><expr pos:start="417:22" pos:end="417:26"><name pos:start="417:22" pos:end="417:22">i</name> <operator pos:start="417:24" pos:end="417:24">=</operator> <literal type="number" pos:start="417:26" pos:end="417:26">0</literal></expr>;</init> <condition pos:start="417:29" pos:end="417:34"><expr pos:start="417:29" pos:end="417:33"><name pos:start="417:29" pos:end="417:29">i</name> <operator pos:start="417:31" pos:end="417:31">&lt;</operator> <literal type="number" pos:start="417:33" pos:end="417:33">8</literal></expr>;</condition> <incr pos:start="417:36" pos:end="417:38"><expr pos:start="417:36" pos:end="417:38"><name pos:start="417:36" pos:end="417:36">i</name><operator pos:start="417:37" pos:end="417:38">++</operator></expr></incr>)</control><block type="pseudo" pos:start="419:21" pos:end="419:88"><block_content pos:start="419:21" pos:end="419:88">

                    <expr_stmt pos:start="419:21" pos:end="419:88"><expr pos:start="419:21" pos:end="419:87"><call pos:start="419:21" pos:end="419:87"><name pos:start="419:21" pos:end="419:26">memcpy</name><argument_list pos:start="419:27" pos:end="419:87">(<argument pos:start="419:28" pos:end="419:41"><expr pos:start="419:28" pos:end="419:41"><name pos:start="419:28" pos:end="419:30">dst</name> <operator pos:start="419:32" pos:end="419:32">+</operator> <name pos:start="419:34" pos:end="419:34">i</name><operator pos:start="419:35" pos:end="419:35">*</operator><name pos:start="419:36" pos:end="419:41">stride</name></expr></argument>, <argument pos:start="419:44" pos:end="419:83"><expr pos:start="419:44" pos:end="419:83"><name pos:start="419:44" pos:end="419:69"><name pos:start="419:44" pos:end="419:44">c</name><operator pos:start="419:45" pos:end="419:46">-&gt;</operator><name pos:start="419:47" pos:end="419:52">bundle</name><index pos:start="419:53" pos:end="419:69">[<expr pos:start="419:54" pos:end="419:68"><name pos:start="419:54" pos:end="419:68">BINK_SRC_COLORS</name></expr>]</index></name><operator pos:start="419:70" pos:end="419:70">.</operator><name pos:start="419:71" pos:end="419:77">cur_ptr</name> <operator pos:start="419:79" pos:end="419:79">+</operator> <name pos:start="419:81" pos:end="419:81">i</name><operator pos:start="419:82" pos:end="419:82">*</operator><literal type="number" pos:start="419:83" pos:end="419:83">8</literal></expr></argument>, <argument pos:start="419:86" pos:end="419:86"><expr pos:start="419:86" pos:end="419:86"><literal type="number" pos:start="419:86" pos:end="419:86">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                <expr_stmt pos:start="421:17" pos:end="421:57"><expr pos:start="421:17" pos:end="421:56"><name pos:start="421:17" pos:end="421:42"><name pos:start="421:17" pos:end="421:17">c</name><operator pos:start="421:18" pos:end="421:19">-&gt;</operator><name pos:start="421:20" pos:end="421:25">bundle</name><index pos:start="421:26" pos:end="421:42">[<expr pos:start="421:27" pos:end="421:41"><name pos:start="421:27" pos:end="421:41">BINK_SRC_COLORS</name></expr>]</index></name><operator pos:start="421:43" pos:end="421:43">.</operator><name pos:start="421:44" pos:end="421:50">cur_ptr</name> <operator pos:start="421:52" pos:end="421:53">+=</operator> <literal type="number" pos:start="421:55" pos:end="421:56">64</literal></expr>;</expr_stmt>

                <break pos:start="423:17" pos:end="423:22">break;</break>

            <default pos:start="425:13" pos:end="425:20">default:</default>

                <expr_stmt pos:start="427:17" pos:end="427:79"><expr pos:start="427:17" pos:end="427:78"><call pos:start="427:17" pos:end="427:78"><name pos:start="427:17" pos:end="427:22">av_log</name><argument_list pos:start="427:23" pos:end="427:78">(<argument pos:start="427:24" pos:end="427:31"><expr pos:start="427:24" pos:end="427:31"><name pos:start="427:24" pos:end="427:31"><name pos:start="427:24" pos:end="427:24">c</name><operator pos:start="427:25" pos:end="427:26">-&gt;</operator><name pos:start="427:27" pos:end="427:31">avctx</name></name></expr></argument>, <argument pos:start="427:34" pos:end="427:45"><expr pos:start="427:34" pos:end="427:45"><name pos:start="427:34" pos:end="427:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="427:48" pos:end="427:72"><expr pos:start="427:48" pos:end="427:72"><literal type="string" pos:start="427:48" pos:end="427:72">"Unknown block type %d\n"</literal></expr></argument>, <argument pos:start="427:75" pos:end="427:77"><expr pos:start="427:75" pos:end="427:77"><name pos:start="427:75" pos:end="427:77">blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="429:17" pos:end="429:43">return <expr pos:start="429:24" pos:end="429:42"><name pos:start="429:24" pos:end="429:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></switch>

        </block_content>}</block></for>

    </block_content>}</block></for>

    <if_stmt pos:start="437:5" pos:end="439:61"><if pos:start="437:5" pos:end="439:61">if <condition pos:start="437:8" pos:end="437:34">(<expr pos:start="437:9" pos:end="437:33"><call pos:start="437:9" pos:end="437:26"><name pos:start="437:9" pos:end="437:22">get_bits_count</name><argument_list pos:start="437:23" pos:end="437:26">(<argument pos:start="437:24" pos:end="437:25"><expr pos:start="437:24" pos:end="437:25"><name pos:start="437:24" pos:end="437:25">gb</name></expr></argument>)</argument_list></call> <operator pos:start="437:28" pos:end="437:28">&amp;</operator> <literal type="number" pos:start="437:30" pos:end="437:33">0x1F</literal></expr>)</condition><block type="pseudo" pos:start="439:9" pos:end="439:61"><block_content pos:start="439:9" pos:end="439:61"> <comment type="line" pos:start="437:36" pos:end="437:78">//next plane data starts at 32-bit boundary</comment>

        <expr_stmt pos:start="439:9" pos:end="439:61"><expr pos:start="439:9" pos:end="439:60"><call pos:start="439:9" pos:end="439:60"><name pos:start="439:9" pos:end="439:22">skip_bits_long</name><argument_list pos:start="439:23" pos:end="439:60">(<argument pos:start="439:24" pos:end="439:25"><expr pos:start="439:24" pos:end="439:25"><name pos:start="439:24" pos:end="439:25">gb</name></expr></argument>, <argument pos:start="439:28" pos:end="439:59"><expr pos:start="439:28" pos:end="439:59"><literal type="number" pos:start="439:28" pos:end="439:31">32</literal> <operator pos:start="439:31" pos:end="439:31">-</operator> <operator pos:start="439:33" pos:end="439:33">(</operator><call pos:start="439:34" pos:end="439:51"><name pos:start="439:34" pos:end="439:47">get_bits_count</name><argument_list pos:start="439:48" pos:end="439:51">(<argument pos:start="439:49" pos:end="439:50"><expr pos:start="439:49" pos:end="439:50"><name pos:start="439:49" pos:end="439:50">gb</name></expr></argument>)</argument_list></call> <operator pos:start="439:53" pos:end="439:53">&amp;</operator> <literal type="number" pos:start="439:55" pos:end="439:58">0x1F</literal><operator pos:start="439:59" pos:end="439:59">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <return pos:start="443:5" pos:end="443:13">return <expr pos:start="443:12" pos:end="443:12"><literal type="number" pos:start="443:12" pos:end="443:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
