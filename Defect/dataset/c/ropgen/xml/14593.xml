<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14593.c" pos:tabs="8"><function pos:start="1:1" pos:end="31:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:33">mirror_write_complete</name><parameter_list pos:start="1:34" pos:end="1:56">(<parameter pos:start="1:35" pos:end="1:46"><decl pos:start="1:35" pos:end="1:46"><type pos:start="1:35" pos:end="1:46"><name pos:start="1:35" pos:end="1:38">void</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:46">opaque</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:55"><decl pos:start="1:49" pos:end="1:55"><type pos:start="1:49" pos:end="1:55"><name pos:start="1:49" pos:end="1:51">int</name></type> <name pos:start="1:53" pos:end="1:55">ret</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="31:1">{<block_content pos:start="5:5" pos:end="29:35">

    <decl_stmt pos:start="5:5" pos:end="5:26"><decl pos:start="5:5" pos:end="5:25"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">MirrorOp</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:16">op</name> <init pos:start="5:18" pos:end="5:25">= <expr pos:start="5:20" pos:end="5:25"><name pos:start="5:20" pos:end="5:25">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:30"><decl pos:start="7:5" pos:end="7:29"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">MirrorBlockJob</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:21">s</name> <init pos:start="7:23" pos:end="7:29">= <expr pos:start="7:25" pos:end="7:29"><name pos:start="7:25" pos:end="7:29"><name pos:start="7:25" pos:end="7:26">op</name><operator pos:start="7:27" pos:end="7:28">-&gt;</operator><name pos:start="7:29" pos:end="7:29">s</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="9:5" pos:end="27:5"><if pos:start="9:5" pos:end="27:5">if <condition pos:start="9:8" pos:end="9:16">(<expr pos:start="9:9" pos:end="9:15"><name pos:start="9:9" pos:end="9:11">ret</name> <operator pos:start="9:13" pos:end="9:13">&lt;</operator> <literal type="number" pos:start="9:15" pos:end="9:15">0</literal></expr>)</condition> <block pos:start="9:18" pos:end="27:5">{<block_content pos:start="11:9" pos:end="25:9">

        <decl_stmt pos:start="11:9" pos:end="11:48"><decl pos:start="11:9" pos:end="11:47"><type pos:start="11:9" pos:end="11:26"><name pos:start="11:9" pos:end="11:24">BlockDriverState</name> <modifier pos:start="11:26" pos:end="11:26">*</modifier></type><name pos:start="11:27" pos:end="11:32">source</name> <init pos:start="11:34" pos:end="11:47">= <expr pos:start="11:36" pos:end="11:47"><name pos:start="11:36" pos:end="11:47"><name pos:start="11:36" pos:end="11:36">s</name><operator pos:start="11:37" pos:end="11:38">-&gt;</operator><name pos:start="11:39" pos:end="11:44">common</name><operator pos:start="11:45" pos:end="11:45">.</operator><name pos:start="11:46" pos:end="11:47">bs</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="13:9" pos:end="13:32"><decl pos:start="13:9" pos:end="13:31"><type pos:start="13:9" pos:end="13:24"><name pos:start="13:9" pos:end="13:24">BlockErrorAction</name></type> <name pos:start="13:26" pos:end="13:31">action</name></decl>;</decl_stmt>



        <expr_stmt pos:start="17:9" pos:end="17:63"><expr pos:start="17:9" pos:end="17:62"><call pos:start="17:9" pos:end="17:62"><name pos:start="17:9" pos:end="17:22">bdrv_set_dirty</name><argument_list pos:start="17:23" pos:end="17:62">(<argument pos:start="17:24" pos:end="17:29"><expr pos:start="17:24" pos:end="17:29"><name pos:start="17:24" pos:end="17:29">source</name></expr></argument>, <argument pos:start="17:32" pos:end="17:45"><expr pos:start="17:32" pos:end="17:45"><name pos:start="17:32" pos:end="17:45"><name pos:start="17:32" pos:end="17:33">op</name><operator pos:start="17:34" pos:end="17:35">-&gt;</operator><name pos:start="17:36" pos:end="17:45">sector_num</name></name></expr></argument>, <argument pos:start="17:48" pos:end="17:61"><expr pos:start="17:48" pos:end="17:61"><name pos:start="17:48" pos:end="17:61"><name pos:start="17:48" pos:end="17:49">op</name><operator pos:start="17:50" pos:end="17:51">-&gt;</operator><name pos:start="17:52" pos:end="17:61">nb_sectors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:53"><expr pos:start="19:9" pos:end="19:52"><name pos:start="19:9" pos:end="19:14">action</name> <operator pos:start="19:16" pos:end="19:16">=</operator> <call pos:start="19:18" pos:end="19:52"><name pos:start="19:18" pos:end="19:36">mirror_error_action</name><argument_list pos:start="19:37" pos:end="19:52">(<argument pos:start="19:38" pos:end="19:38"><expr pos:start="19:38" pos:end="19:38"><name pos:start="19:38" pos:end="19:38">s</name></expr></argument>, <argument pos:start="19:41" pos:end="19:45"><expr pos:start="19:41" pos:end="19:45"><name pos:start="19:41" pos:end="19:45">false</name></expr></argument>, <argument pos:start="19:48" pos:end="19:51"><expr pos:start="19:48" pos:end="19:51"><operator pos:start="19:48" pos:end="19:48">-</operator><name pos:start="19:49" pos:end="19:51">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="21:9" pos:end="25:9"><if pos:start="21:9" pos:end="25:9">if <condition pos:start="21:12" pos:end="21:63">(<expr pos:start="21:13" pos:end="21:62"><name pos:start="21:13" pos:end="21:18">action</name> <operator pos:start="21:20" pos:end="21:21">==</operator> <name pos:start="21:23" pos:end="21:47">BLOCK_ERROR_ACTION_REPORT</name> <operator pos:start="21:49" pos:end="21:50">&amp;&amp;</operator> <name pos:start="21:52" pos:end="21:57"><name pos:start="21:52" pos:end="21:52">s</name><operator pos:start="21:53" pos:end="21:54">-&gt;</operator><name pos:start="21:55" pos:end="21:57">ret</name></name> <operator pos:start="21:59" pos:end="21:60">&gt;=</operator> <literal type="number" pos:start="21:62" pos:end="21:62">0</literal></expr>)</condition> <block pos:start="21:65" pos:end="25:9">{<block_content pos:start="23:13" pos:end="23:25">

            <expr_stmt pos:start="23:13" pos:end="23:25"><expr pos:start="23:13" pos:end="23:24"><name pos:start="23:13" pos:end="23:18"><name pos:start="23:13" pos:end="23:13">s</name><operator pos:start="23:14" pos:end="23:15">-&gt;</operator><name pos:start="23:16" pos:end="23:18">ret</name></name> <operator pos:start="23:20" pos:end="23:20">=</operator> <name pos:start="23:22" pos:end="23:24">ret</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:35"><expr pos:start="29:5" pos:end="29:34"><call pos:start="29:5" pos:end="29:34"><name pos:start="29:5" pos:end="29:25">mirror_iteration_done</name><argument_list pos:start="29:26" pos:end="29:34">(<argument pos:start="29:27" pos:end="29:28"><expr pos:start="29:27" pos:end="29:28"><name pos:start="29:27" pos:end="29:28">op</name></expr></argument>, <argument pos:start="29:31" pos:end="29:33"><expr pos:start="29:31" pos:end="29:33"><name pos:start="29:31" pos:end="29:33">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
