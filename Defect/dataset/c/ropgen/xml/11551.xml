<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11551.c" pos:tabs="8"><function pos:start="1:1" pos:end="105:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">do_apply_filter</name><parameter_list pos:start="1:28" pos:end="3:78">(<parameter pos:start="1:29" pos:end="1:43"><decl pos:start="1:29" pos:end="1:43"><type pos:start="1:29" pos:end="1:43"><name pos:start="1:29" pos:end="1:38">APEContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:43">ctx</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:56"><decl pos:start="1:46" pos:end="1:56"><type pos:start="1:46" pos:end="1:56"><name pos:start="1:46" pos:end="1:48">int</name></type> <name pos:start="1:50" pos:end="1:56">version</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:70"><decl pos:start="1:59" pos:end="1:70"><type pos:start="1:59" pos:end="1:70"><name pos:start="1:59" pos:end="1:67">APEFilter</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:70">f</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:41"><decl pos:start="3:29" pos:end="3:41"><type pos:start="3:29" pos:end="3:41"><name pos:start="3:29" pos:end="3:35">int32_t</name> <modifier pos:start="3:37" pos:end="3:37">*</modifier></type><name pos:start="3:38" pos:end="3:41">data</name></decl></parameter>, <parameter pos:start="3:44" pos:end="3:52"><decl pos:start="3:44" pos:end="3:52"><type pos:start="3:44" pos:end="3:52"><name pos:start="3:44" pos:end="3:46">int</name></type> <name pos:start="3:48" pos:end="3:52">count</name></decl></parameter>, <parameter pos:start="3:55" pos:end="3:63"><decl pos:start="3:55" pos:end="3:63"><type pos:start="3:55" pos:end="3:63"><name pos:start="3:55" pos:end="3:57">int</name></type> <name pos:start="3:59" pos:end="3:63">order</name></decl></parameter>, <parameter pos:start="3:66" pos:end="3:77"><decl pos:start="3:66" pos:end="3:77"><type pos:start="3:66" pos:end="3:77"><name pos:start="3:66" pos:end="3:68">int</name></type> <name pos:start="3:70" pos:end="3:77">fracbits</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="105:1">{<block_content pos:start="7:5" pos:end="103:5">

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">res</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:15"><decl pos:start="9:5" pos:end="9:14"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:14">absres</name></decl>;</decl_stmt>



    <while pos:start="13:5" pos:end="103:5">while <condition pos:start="13:11" pos:end="13:19">(<expr pos:start="13:12" pos:end="13:18"><name pos:start="13:12" pos:end="13:16">count</name><operator pos:start="13:17" pos:end="13:18">--</operator></expr>)</condition> <block pos:start="13:21" pos:end="103:5">{<block_content pos:start="17:9" pos:end="101:9">

        <comment type="block" pos:start="15:9" pos:end="15:45">/* round fixedpoint scalar product */</comment>

        <expr_stmt pos:start="17:9" pos:end="23:76"><expr pos:start="17:9" pos:end="23:75"><name pos:start="17:9" pos:end="17:11">res</name> <operator pos:start="17:13" pos:end="17:13">=</operator> <call pos:start="17:15" pos:end="23:75"><name pos:start="17:15" pos:end="17:52"><name pos:start="17:15" pos:end="17:17">ctx</name><operator pos:start="17:18" pos:end="17:19">-&gt;</operator><name pos:start="17:20" pos:end="17:23">adsp</name><operator pos:start="17:24" pos:end="17:24">.</operator><name pos:start="17:25" pos:end="17:52">scalarproduct_and_madd_int16</name></name><argument_list pos:start="17:53" pos:end="23:75">(<argument pos:start="17:54" pos:end="17:62"><expr pos:start="17:54" pos:end="17:62"><name pos:start="17:54" pos:end="17:62"><name pos:start="17:54" pos:end="17:54">f</name><operator pos:start="17:55" pos:end="17:56">-&gt;</operator><name pos:start="17:57" pos:end="17:62">coeffs</name></name></expr></argument>,

                                                     <argument pos:start="19:54" pos:end="19:69"><expr pos:start="19:54" pos:end="19:69"><name pos:start="19:54" pos:end="19:61"><name pos:start="19:54" pos:end="19:54">f</name><operator pos:start="19:55" pos:end="19:56">-&gt;</operator><name pos:start="19:57" pos:end="19:61">delay</name></name> <operator pos:start="19:63" pos:end="19:63">-</operator> <name pos:start="19:65" pos:end="19:69">order</name></expr></argument>,

                                                     <argument pos:start="21:54" pos:end="21:75"><expr pos:start="21:54" pos:end="21:75"><name pos:start="21:54" pos:end="21:67"><name pos:start="21:54" pos:end="21:54">f</name><operator pos:start="21:55" pos:end="21:56">-&gt;</operator><name pos:start="21:57" pos:end="21:67">adaptcoeffs</name></name> <operator pos:start="21:69" pos:end="21:69">-</operator> <name pos:start="21:71" pos:end="21:75">order</name></expr></argument>,

                                                     <argument pos:start="23:54" pos:end="23:58"><expr pos:start="23:54" pos:end="23:58"><name pos:start="23:54" pos:end="23:58">order</name></expr></argument>, <argument pos:start="23:61" pos:end="23:74"><expr pos:start="23:61" pos:end="23:74"><call pos:start="23:61" pos:end="23:74"><name pos:start="23:61" pos:end="23:67">APESIGN</name><argument_list pos:start="23:68" pos:end="23:74">(<argument pos:start="23:69" pos:end="23:73"><expr pos:start="23:69" pos:end="23:73"><operator pos:start="23:69" pos:end="23:69">*</operator><name pos:start="23:70" pos:end="23:73">data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:56"><expr pos:start="25:9" pos:end="25:55"><name pos:start="25:9" pos:end="25:11">res</name> <operator pos:start="25:13" pos:end="25:13">=</operator> <operator pos:start="25:15" pos:end="25:15">(</operator><name pos:start="25:16" pos:end="25:18">res</name> <operator pos:start="25:20" pos:end="25:20">+</operator> <operator pos:start="25:22" pos:end="25:22">(</operator><literal type="number" pos:start="25:23" pos:end="25:23">1</literal> <operator pos:start="25:25" pos:end="25:26">&lt;&lt;</operator> <operator pos:start="25:28" pos:end="25:28">(</operator><name pos:start="25:29" pos:end="25:36">fracbits</name> <operator pos:start="25:38" pos:end="25:38">-</operator> <literal type="number" pos:start="25:40" pos:end="25:40">1</literal><operator pos:start="25:41" pos:end="25:41">)</operator><operator pos:start="25:42" pos:end="25:42">)</operator><operator pos:start="25:43" pos:end="25:43">)</operator> <operator pos:start="25:45" pos:end="25:46">&gt;&gt;</operator> <name pos:start="25:48" pos:end="25:55">fracbits</name></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:21"><expr pos:start="27:9" pos:end="27:20"><name pos:start="27:9" pos:end="27:11">res</name> <operator pos:start="27:13" pos:end="27:14">+=</operator> <operator pos:start="27:16" pos:end="27:16">*</operator><name pos:start="27:17" pos:end="27:20">data</name></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:22"><expr pos:start="29:9" pos:end="29:21"><operator pos:start="29:9" pos:end="29:9">*</operator><name pos:start="29:10" pos:end="29:13">data</name><operator pos:start="29:14" pos:end="29:15">++</operator> <operator pos:start="29:17" pos:end="29:17">=</operator> <name pos:start="29:19" pos:end="29:21">res</name></expr>;</expr_stmt>



        <comment type="block" pos:start="33:9" pos:end="33:39">/* Update the output history */</comment>

        <expr_stmt pos:start="35:9" pos:end="35:41"><expr pos:start="35:9" pos:end="35:40"><operator pos:start="35:9" pos:end="35:9">*</operator><name pos:start="35:10" pos:end="35:17"><name pos:start="35:10" pos:end="35:10">f</name><operator pos:start="35:11" pos:end="35:12">-&gt;</operator><name pos:start="35:13" pos:end="35:17">delay</name></name><operator pos:start="35:18" pos:end="35:19">++</operator> <operator pos:start="35:21" pos:end="35:21">=</operator> <call pos:start="35:23" pos:end="35:40"><name pos:start="35:23" pos:end="35:35">av_clip_int16</name><argument_list pos:start="35:36" pos:end="35:40">(<argument pos:start="35:37" pos:end="35:39"><expr pos:start="35:37" pos:end="35:39"><name pos:start="35:37" pos:end="35:39">res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="39:9" pos:end="81:9"><if pos:start="39:9" pos:end="49:9">if <condition pos:start="39:12" pos:end="39:27">(<expr pos:start="39:13" pos:end="39:26"><name pos:start="39:13" pos:end="39:19">version</name> <operator pos:start="39:21" pos:end="39:21">&lt;</operator> <literal type="number" pos:start="39:23" pos:end="39:26">3980</literal></expr>)</condition> <block pos:start="39:29" pos:end="49:9">{<block_content pos:start="43:13" pos:end="47:37">

            <comment type="block" pos:start="41:13" pos:end="41:56">/* Version ??? to &lt; 3.98 files (untested) */</comment>

            <expr_stmt pos:start="43:13" pos:end="43:72"><expr pos:start="43:13" pos:end="43:71"><name pos:start="43:13" pos:end="43:29"><name pos:start="43:13" pos:end="43:13">f</name><operator pos:start="43:14" pos:end="43:15">-&gt;</operator><name pos:start="43:16" pos:end="43:26">adaptcoeffs</name><index pos:start="43:27" pos:end="43:29">[<expr pos:start="43:28" pos:end="43:28"><literal type="number" pos:start="43:28" pos:end="43:28">0</literal></expr>]</index></name>  <operator pos:start="43:32" pos:end="43:32">=</operator> <ternary pos:start="43:34" pos:end="43:71"><condition pos:start="43:34" pos:end="43:45"><expr pos:start="43:34" pos:end="43:43"><operator pos:start="43:34" pos:end="43:34">(</operator><name pos:start="43:35" pos:end="43:37">res</name> <operator pos:start="43:39" pos:end="43:40">==</operator> <literal type="number" pos:start="43:42" pos:end="43:42">0</literal><operator pos:start="43:43" pos:end="43:43">)</operator></expr> ?</condition><then pos:start="43:47" pos:end="43:47"> <expr pos:start="43:47" pos:end="43:47"><literal type="number" pos:start="43:47" pos:end="43:47">0</literal></expr> </then><else pos:start="43:49" pos:end="43:71">: <expr pos:start="43:51" pos:end="43:71"><operator pos:start="43:51" pos:end="43:51">(</operator><operator pos:start="43:52" pos:end="43:52">(</operator><name pos:start="43:53" pos:end="43:55">res</name> <operator pos:start="43:57" pos:end="43:58">&gt;&gt;</operator> <literal type="number" pos:start="43:60" pos:end="43:61">28</literal><operator pos:start="43:62" pos:end="43:62">)</operator> <operator pos:start="43:64" pos:end="43:64">&amp;</operator> <literal type="number" pos:start="43:66" pos:end="43:66">8</literal><operator pos:start="43:67" pos:end="43:67">)</operator> <operator pos:start="43:69" pos:end="43:69">-</operator> <literal type="number" pos:start="43:71" pos:end="43:71">4</literal></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="45:13" pos:end="45:37"><expr pos:start="45:13" pos:end="45:36"><name pos:start="45:13" pos:end="45:30"><name pos:start="45:13" pos:end="45:13">f</name><operator pos:start="45:14" pos:end="45:15">-&gt;</operator><name pos:start="45:16" pos:end="45:26">adaptcoeffs</name><index pos:start="45:27" pos:end="45:30">[<expr pos:start="45:28" pos:end="45:29"><operator pos:start="45:28" pos:end="45:28">-</operator><literal type="number" pos:start="45:29" pos:end="45:29">4</literal></expr>]</index></name> <operator pos:start="45:32" pos:end="45:34">&gt;&gt;=</operator> <literal type="number" pos:start="45:36" pos:end="45:36">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="47:13" pos:end="47:37"><expr pos:start="47:13" pos:end="47:36"><name pos:start="47:13" pos:end="47:30"><name pos:start="47:13" pos:end="47:13">f</name><operator pos:start="47:14" pos:end="47:15">-&gt;</operator><name pos:start="47:16" pos:end="47:26">adaptcoeffs</name><index pos:start="47:27" pos:end="47:30">[<expr pos:start="47:28" pos:end="47:29"><operator pos:start="47:28" pos:end="47:28">-</operator><literal type="number" pos:start="47:29" pos:end="47:29">8</literal></expr>]</index></name> <operator pos:start="47:32" pos:end="47:34">&gt;&gt;=</operator> <literal type="number" pos:start="47:36" pos:end="47:36">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="49:11" pos:end="81:9">else <block pos:start="49:16" pos:end="81:9">{<block_content pos:start="57:13" pos:end="79:37">

            <comment type="block" pos:start="51:13" pos:end="51:46">/* Version 3.98 and later files */</comment>



            <comment type="block" pos:start="55:13" pos:end="55:50">/* Update the adaption coefficients */</comment>

            <expr_stmt pos:start="57:13" pos:end="57:32"><expr pos:start="57:13" pos:end="57:31"><name pos:start="57:13" pos:end="57:18">absres</name> <operator pos:start="57:20" pos:end="57:20">=</operator> <call pos:start="57:22" pos:end="57:31"><name pos:start="57:22" pos:end="57:26">FFABS</name><argument_list pos:start="57:27" pos:end="57:31">(<argument pos:start="57:28" pos:end="57:30"><expr pos:start="57:28" pos:end="57:30"><name pos:start="57:28" pos:end="57:30">res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="59:13" pos:end="67:36"><if pos:start="59:13" pos:end="63:87">if <condition pos:start="59:16" pos:end="59:23">(<expr pos:start="59:17" pos:end="59:22"><name pos:start="59:17" pos:end="59:22">absres</name></expr>)</condition><block type="pseudo" pos:start="61:17" pos:end="63:87"><block_content pos:start="61:17" pos:end="63:87">

                <expr_stmt pos:start="61:17" pos:end="63:87"><expr pos:start="61:17" pos:end="63:86"><operator pos:start="61:17" pos:end="61:17">*</operator><name pos:start="61:18" pos:end="61:31"><name pos:start="61:18" pos:end="61:18">f</name><operator pos:start="61:19" pos:end="61:20">-&gt;</operator><name pos:start="61:21" pos:end="61:31">adaptcoeffs</name></name> <operator pos:start="61:33" pos:end="61:33">=</operator> <operator pos:start="61:35" pos:end="61:35">(</operator><operator pos:start="61:36" pos:end="61:36">(</operator><name pos:start="61:37" pos:end="61:39">res</name> <operator pos:start="61:41" pos:end="61:41">&amp;</operator> <operator pos:start="61:43" pos:end="61:43">(</operator><operator pos:start="61:44" pos:end="61:44">-</operator><literal type="number" pos:start="61:45" pos:end="61:45">1</literal><operator pos:start="61:46" pos:end="61:47">&lt;&lt;</operator><literal type="number" pos:start="61:48" pos:end="61:49">31</literal><operator pos:start="61:50" pos:end="61:50">)</operator><operator pos:start="61:51" pos:end="61:51">)</operator> <operator pos:start="61:53" pos:end="61:53">^</operator> <operator pos:start="61:55" pos:end="61:55">(</operator><operator pos:start="61:56" pos:end="61:56">-</operator><literal type="number" pos:start="61:57" pos:end="61:57">1</literal><operator pos:start="61:58" pos:end="61:59">&lt;&lt;</operator><literal type="number" pos:start="61:60" pos:end="61:61">30</literal><operator pos:start="61:62" pos:end="61:62">)</operator><operator pos:start="61:63" pos:end="61:63">)</operator> <operator pos:start="61:65" pos:end="61:66">&gt;&gt;</operator>

                                  <operator pos:start="63:35" pos:end="63:35">(</operator><literal type="number" pos:start="63:36" pos:end="63:39">25</literal> <operator pos:start="63:39" pos:end="63:39">+</operator> <operator pos:start="63:41" pos:end="63:41">(</operator><name pos:start="63:42" pos:end="63:47">absres</name> <operator pos:start="63:49" pos:end="63:50">&lt;=</operator> <name pos:start="63:52" pos:end="63:57"><name pos:start="63:52" pos:end="63:52">f</name><operator pos:start="63:53" pos:end="63:54">-&gt;</operator><name pos:start="63:55" pos:end="63:57">avg</name></name><operator pos:start="63:58" pos:end="63:58">*</operator><literal type="number" pos:start="63:59" pos:end="63:59">3</literal><operator pos:start="63:60" pos:end="63:60">)</operator> <operator pos:start="63:62" pos:end="63:62">+</operator> <operator pos:start="63:64" pos:end="63:64">(</operator><name pos:start="63:65" pos:end="63:70">absres</name> <operator pos:start="63:72" pos:end="63:73">&lt;=</operator> <name pos:start="63:75" pos:end="63:80"><name pos:start="63:75" pos:end="63:75">f</name><operator pos:start="63:76" pos:end="63:77">-&gt;</operator><name pos:start="63:78" pos:end="63:80">avg</name></name><operator pos:start="63:81" pos:end="63:81">*</operator><literal type="number" pos:start="63:82" pos:end="63:82">4</literal><operator pos:start="63:83" pos:end="63:83">/</operator><literal type="number" pos:start="63:84" pos:end="63:84">3</literal><operator pos:start="63:85" pos:end="63:85">)</operator><operator pos:start="63:86" pos:end="63:86">)</operator></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="65:13" pos:end="67:36">else<block type="pseudo" pos:start="67:17" pos:end="67:36"><block_content pos:start="67:17" pos:end="67:36">

                <expr_stmt pos:start="67:17" pos:end="67:36"><expr pos:start="67:17" pos:end="67:35"><operator pos:start="67:17" pos:end="67:17">*</operator><name pos:start="67:18" pos:end="67:31"><name pos:start="67:18" pos:end="67:18">f</name><operator pos:start="67:19" pos:end="67:20">-&gt;</operator><name pos:start="67:21" pos:end="67:31">adaptcoeffs</name></name> <operator pos:start="67:33" pos:end="67:33">=</operator> <literal type="number" pos:start="67:35" pos:end="67:35">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



            <expr_stmt pos:start="71:13" pos:end="71:45"><expr pos:start="71:13" pos:end="71:44"><name pos:start="71:13" pos:end="71:18"><name pos:start="71:13" pos:end="71:13">f</name><operator pos:start="71:14" pos:end="71:15">-&gt;</operator><name pos:start="71:16" pos:end="71:18">avg</name></name> <operator pos:start="71:20" pos:end="71:21">+=</operator> <operator pos:start="71:23" pos:end="71:23">(</operator><name pos:start="71:24" pos:end="71:29">absres</name> <operator pos:start="71:31" pos:end="71:31">-</operator> <name pos:start="71:33" pos:end="71:38"><name pos:start="71:33" pos:end="71:33">f</name><operator pos:start="71:34" pos:end="71:35">-&gt;</operator><name pos:start="71:36" pos:end="71:38">avg</name></name><operator pos:start="71:39" pos:end="71:39">)</operator> <operator pos:start="71:41" pos:end="71:41">/</operator> <literal type="number" pos:start="71:43" pos:end="71:44">16</literal></expr>;</expr_stmt>



            <expr_stmt pos:start="75:13" pos:end="75:37"><expr pos:start="75:13" pos:end="75:36"><name pos:start="75:13" pos:end="75:30"><name pos:start="75:13" pos:end="75:13">f</name><operator pos:start="75:14" pos:end="75:15">-&gt;</operator><name pos:start="75:16" pos:end="75:26">adaptcoeffs</name><index pos:start="75:27" pos:end="75:30">[<expr pos:start="75:28" pos:end="75:29"><operator pos:start="75:28" pos:end="75:28">-</operator><literal type="number" pos:start="75:29" pos:end="75:29">1</literal></expr>]</index></name> <operator pos:start="75:32" pos:end="75:34">&gt;&gt;=</operator> <literal type="number" pos:start="75:36" pos:end="75:36">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:37"><expr pos:start="77:13" pos:end="77:36"><name pos:start="77:13" pos:end="77:30"><name pos:start="77:13" pos:end="77:13">f</name><operator pos:start="77:14" pos:end="77:15">-&gt;</operator><name pos:start="77:16" pos:end="77:26">adaptcoeffs</name><index pos:start="77:27" pos:end="77:30">[<expr pos:start="77:28" pos:end="77:29"><operator pos:start="77:28" pos:end="77:28">-</operator><literal type="number" pos:start="77:29" pos:end="77:29">2</literal></expr>]</index></name> <operator pos:start="77:32" pos:end="77:34">&gt;&gt;=</operator> <literal type="number" pos:start="77:36" pos:end="77:36">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:37"><expr pos:start="79:13" pos:end="79:36"><name pos:start="79:13" pos:end="79:30"><name pos:start="79:13" pos:end="79:13">f</name><operator pos:start="79:14" pos:end="79:15">-&gt;</operator><name pos:start="79:16" pos:end="79:26">adaptcoeffs</name><index pos:start="79:27" pos:end="79:30">[<expr pos:start="79:28" pos:end="79:29"><operator pos:start="79:28" pos:end="79:28">-</operator><literal type="number" pos:start="79:29" pos:end="79:29">8</literal></expr>]</index></name> <operator pos:start="79:32" pos:end="79:34">&gt;&gt;=</operator> <literal type="number" pos:start="79:36" pos:end="79:36">1</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="85:9" pos:end="85:25"><expr pos:start="85:9" pos:end="85:24"><name pos:start="85:9" pos:end="85:22"><name pos:start="85:9" pos:end="85:9">f</name><operator pos:start="85:10" pos:end="85:11">-&gt;</operator><name pos:start="85:12" pos:end="85:22">adaptcoeffs</name></name><operator pos:start="85:23" pos:end="85:24">++</operator></expr>;</expr_stmt>



        <comment type="block" pos:start="89:9" pos:end="89:48">/* Have we filled the history buffer? */</comment>

        <if_stmt pos:start="91:9" pos:end="101:9"><if pos:start="91:9" pos:end="101:9">if <condition pos:start="91:12" pos:end="91:70">(<expr pos:start="91:13" pos:end="91:69"><name pos:start="91:13" pos:end="91:20"><name pos:start="91:13" pos:end="91:13">f</name><operator pos:start="91:14" pos:end="91:15">-&gt;</operator><name pos:start="91:16" pos:end="91:20">delay</name></name> <operator pos:start="91:22" pos:end="91:23">==</operator> <name pos:start="91:25" pos:end="91:40"><name pos:start="91:25" pos:end="91:25">f</name><operator pos:start="91:26" pos:end="91:27">-&gt;</operator><name pos:start="91:28" pos:end="91:40">historybuffer</name></name> <operator pos:start="91:42" pos:end="91:42">+</operator> <name pos:start="91:44" pos:end="91:55">HISTORY_SIZE</name> <operator pos:start="91:57" pos:end="91:57">+</operator> <operator pos:start="91:59" pos:end="91:59">(</operator><name pos:start="91:60" pos:end="91:64">order</name> <operator pos:start="91:66" pos:end="91:66">*</operator> <literal type="number" pos:start="91:68" pos:end="91:68">2</literal><operator pos:start="91:69" pos:end="91:69">)</operator></expr>)</condition> <block pos:start="91:72" pos:end="101:9">{<block_content pos:start="93:13" pos:end="99:54">

            <expr_stmt pos:start="93:13" pos:end="95:61"><expr pos:start="93:13" pos:end="95:60"><call pos:start="93:13" pos:end="95:60"><name pos:start="93:13" pos:end="93:19">memmove</name><argument_list pos:start="93:20" pos:end="95:60">(<argument pos:start="93:21" pos:end="93:36"><expr pos:start="93:21" pos:end="93:36"><name pos:start="93:21" pos:end="93:36"><name pos:start="93:21" pos:end="93:21">f</name><operator pos:start="93:22" pos:end="93:23">-&gt;</operator><name pos:start="93:24" pos:end="93:36">historybuffer</name></name></expr></argument>, <argument pos:start="93:39" pos:end="93:60"><expr pos:start="93:39" pos:end="93:60"><name pos:start="93:39" pos:end="93:46"><name pos:start="93:39" pos:end="93:39">f</name><operator pos:start="93:40" pos:end="93:41">-&gt;</operator><name pos:start="93:42" pos:end="93:46">delay</name></name> <operator pos:start="93:48" pos:end="93:48">-</operator> <operator pos:start="93:50" pos:end="93:50">(</operator><name pos:start="93:51" pos:end="93:55">order</name> <operator pos:start="93:57" pos:end="93:57">*</operator> <literal type="number" pos:start="93:59" pos:end="93:59">2</literal><operator pos:start="93:60" pos:end="93:60">)</operator></expr></argument>,

                    <argument pos:start="95:21" pos:end="95:59"><expr pos:start="95:21" pos:end="95:59"><operator pos:start="95:21" pos:end="95:21">(</operator><name pos:start="95:22" pos:end="95:26">order</name> <operator pos:start="95:28" pos:end="95:28">*</operator> <literal type="number" pos:start="95:30" pos:end="95:30">2</literal><operator pos:start="95:31" pos:end="95:31">)</operator> <operator pos:start="95:33" pos:end="95:33">*</operator> <sizeof pos:start="95:35" pos:end="95:59">sizeof<argument_list pos:start="95:41" pos:end="95:59">(<argument pos:start="95:42" pos:end="95:58"><expr pos:start="95:42" pos:end="95:58"><operator pos:start="95:42" pos:end="95:42">*</operator><name pos:start="95:43" pos:end="95:58"><name pos:start="95:43" pos:end="95:43">f</name><operator pos:start="95:44" pos:end="95:45">-&gt;</operator><name pos:start="95:46" pos:end="95:58">historybuffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:52"><expr pos:start="97:13" pos:end="97:51"><name pos:start="97:13" pos:end="97:20"><name pos:start="97:13" pos:end="97:13">f</name><operator pos:start="97:14" pos:end="97:15">-&gt;</operator><name pos:start="97:16" pos:end="97:20">delay</name></name> <operator pos:start="97:22" pos:end="97:22">=</operator> <name pos:start="97:24" pos:end="97:39"><name pos:start="97:24" pos:end="97:24">f</name><operator pos:start="97:25" pos:end="97:26">-&gt;</operator><name pos:start="97:27" pos:end="97:39">historybuffer</name></name> <operator pos:start="97:41" pos:end="97:41">+</operator> <name pos:start="97:43" pos:end="97:47">order</name> <operator pos:start="97:49" pos:end="97:49">*</operator> <literal type="number" pos:start="97:51" pos:end="97:51">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:54"><expr pos:start="99:13" pos:end="99:53"><name pos:start="99:13" pos:end="99:26"><name pos:start="99:13" pos:end="99:13">f</name><operator pos:start="99:14" pos:end="99:15">-&gt;</operator><name pos:start="99:16" pos:end="99:26">adaptcoeffs</name></name> <operator pos:start="99:28" pos:end="99:28">=</operator> <name pos:start="99:30" pos:end="99:45"><name pos:start="99:30" pos:end="99:30">f</name><operator pos:start="99:31" pos:end="99:32">-&gt;</operator><name pos:start="99:33" pos:end="99:45">historybuffer</name></name> <operator pos:start="99:47" pos:end="99:47">+</operator> <name pos:start="99:49" pos:end="99:53">order</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>

</block_content>}</block></function>
</unit>
