<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/7605.c" pos:tabs="8"><function pos:start="1:1" pos:end="47:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:18">qemu_sem_post</name><parameter_list pos:start="1:19" pos:end="1:38">(<parameter pos:start="1:20" pos:end="1:37"><decl pos:start="1:20" pos:end="1:37"><type pos:start="1:20" pos:end="1:34"><name pos:start="1:20" pos:end="1:32">QemuSemaphore</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:37">sem</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="47:1">{<block_content pos:start="5:5" pos:end="46:0">

    <decl_stmt pos:start="5:5" pos:end="10:0"><decl pos:start="5:5" pos:end="5:10"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:10">rc</name></decl>;</decl_stmt>



<cpp:if pos:start="9:1" pos:end="9:45">#<cpp:directive pos:start="9:2" pos:end="9:3">if</cpp:directive> <expr pos:start="9:5" pos:end="9:45"><call pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:11">defined</name><argument_list pos:start="9:12" pos:end="9:22">(<argument pos:start="9:13" pos:end="9:21"><expr pos:start="9:13" pos:end="9:21"><name pos:start="9:13" pos:end="9:21">__APPLE__</name></expr></argument>)</argument_list></call> <operator pos:start="9:24" pos:end="9:25">||</operator> <call pos:start="9:27" pos:end="9:45"><name pos:start="9:27" pos:end="9:33">defined</name><argument_list pos:start="9:34" pos:end="9:45">(<argument pos:start="9:35" pos:end="9:44"><expr pos:start="9:35" pos:end="9:44"><name pos:start="9:35" pos:end="9:44">__NetBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="11:5" pos:end="11:35"><expr pos:start="11:5" pos:end="11:34"><call pos:start="11:5" pos:end="11:34"><name pos:start="11:5" pos:end="11:22">pthread_mutex_lock</name><argument_list pos:start="11:23" pos:end="11:34">(<argument pos:start="11:24" pos:end="11:33"><expr pos:start="11:24" pos:end="11:33"><operator pos:start="11:24" pos:end="11:24">&amp;</operator><name pos:start="11:25" pos:end="11:33"><name pos:start="11:25" pos:end="11:27">sem</name><operator pos:start="11:28" pos:end="11:29">-&gt;</operator><name pos:start="11:30" pos:end="11:33">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="13:5" pos:end="25:5"><if pos:start="13:5" pos:end="17:5">if <condition pos:start="13:8" pos:end="13:30">(<expr pos:start="13:9" pos:end="13:29"><name pos:start="13:9" pos:end="13:18"><name pos:start="13:9" pos:end="13:11">sem</name><operator pos:start="13:12" pos:end="13:13">-&gt;</operator><name pos:start="13:14" pos:end="13:18">count</name></name> <operator pos:start="13:20" pos:end="13:21">==</operator> <name pos:start="13:23" pos:end="13:29">INT_MAX</name></expr>)</condition> <block pos:start="13:32" pos:end="17:5">{<block_content pos:start="15:9" pos:end="15:20">

        <expr_stmt pos:start="15:9" pos:end="15:20"><expr pos:start="15:9" pos:end="15:19"><name pos:start="15:9" pos:end="15:10">rc</name> <operator pos:start="15:12" pos:end="15:12">=</operator> <name pos:start="15:14" pos:end="15:19">EINVAL</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="17:7" pos:end="21:5">else if <condition pos:start="17:15" pos:end="17:32">(<expr pos:start="17:16" pos:end="17:31"><name pos:start="17:16" pos:end="17:25"><name pos:start="17:16" pos:end="17:18">sem</name><operator pos:start="17:19" pos:end="17:20">-&gt;</operator><name pos:start="17:21" pos:end="17:25">count</name></name><operator pos:start="17:26" pos:end="17:27">++</operator> <operator pos:start="17:29" pos:end="17:29">&lt;</operator> <literal type="number" pos:start="17:31" pos:end="17:31">0</literal></expr>)</condition> <block pos:start="17:34" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:45">

        <expr_stmt pos:start="19:9" pos:end="19:45"><expr pos:start="19:9" pos:end="19:44"><name pos:start="19:9" pos:end="19:10">rc</name> <operator pos:start="19:12" pos:end="19:12">=</operator> <call pos:start="19:14" pos:end="19:44"><name pos:start="19:14" pos:end="19:32">pthread_cond_signal</name><argument_list pos:start="19:33" pos:end="19:44">(<argument pos:start="19:34" pos:end="19:43"><expr pos:start="19:34" pos:end="19:43"><operator pos:start="19:34" pos:end="19:34">&amp;</operator><name pos:start="19:35" pos:end="19:43"><name pos:start="19:35" pos:end="19:37">sem</name><operator pos:start="19:38" pos:end="19:39">-&gt;</operator><name pos:start="19:40" pos:end="19:43">cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="21:7" pos:end="25:5">else <block pos:start="21:12" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:15">

        <expr_stmt pos:start="23:9" pos:end="23:15"><expr pos:start="23:9" pos:end="23:14"><name pos:start="23:9" pos:end="23:10">rc</name> <operator pos:start="23:12" pos:end="23:12">=</operator> <literal type="number" pos:start="23:14" pos:end="23:14">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:37"><expr pos:start="27:5" pos:end="27:36"><call pos:start="27:5" pos:end="27:36"><name pos:start="27:5" pos:end="27:24">pthread_mutex_unlock</name><argument_list pos:start="27:25" pos:end="27:36">(<argument pos:start="27:26" pos:end="27:35"><expr pos:start="27:26" pos:end="27:35"><operator pos:start="27:26" pos:end="27:26">&amp;</operator><name pos:start="27:27" pos:end="27:35"><name pos:start="27:27" pos:end="27:29">sem</name><operator pos:start="27:30" pos:end="27:31">-&gt;</operator><name pos:start="27:32" pos:end="27:35">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="36:0"><if pos:start="29:5" pos:end="36:0">if <condition pos:start="29:8" pos:end="29:16">(<expr pos:start="29:9" pos:end="29:15"><name pos:start="29:9" pos:end="29:10">rc</name> <operator pos:start="29:12" pos:end="29:13">!=</operator> <literal type="number" pos:start="29:15" pos:end="29:15">0</literal></expr>)</condition> <block pos:start="29:18" pos:end="36:0">{<block_content pos:start="31:9" pos:end="31:33">

        <expr_stmt pos:start="31:9" pos:end="31:33"><expr pos:start="31:9" pos:end="31:32"><call pos:start="31:9" pos:end="31:32"><name pos:start="31:9" pos:end="31:18">error_exit</name><argument_list pos:start="31:19" pos:end="31:32">(<argument pos:start="31:20" pos:end="31:21"><expr pos:start="31:20" pos:end="31:21"><name pos:start="31:20" pos:end="31:21">rc</name></expr></argument>, <argument pos:start="31:24" pos:end="31:31"><expr pos:start="31:24" pos:end="31:31"><name pos:start="31:24" pos:end="31:31">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:else pos:start="35:1" pos:end="35:5">#<cpp:directive pos:start="35:2" pos:end="35:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="37:5" pos:end="37:29"><expr pos:start="37:5" pos:end="37:28"><name pos:start="37:5" pos:end="37:6">rc</name> <operator pos:start="37:8" pos:end="37:8">=</operator> <call pos:start="37:10" pos:end="37:28"><name pos:start="37:10" pos:end="37:17">sem_post</name><argument_list pos:start="37:18" pos:end="37:28">(<argument pos:start="37:19" pos:end="37:27"><expr pos:start="37:19" pos:end="37:27"><operator pos:start="37:19" pos:end="37:19">&amp;</operator><name pos:start="37:20" pos:end="37:27"><name pos:start="37:20" pos:end="37:22">sem</name><operator pos:start="37:23" pos:end="37:24">-&gt;</operator><name pos:start="37:25" pos:end="37:27">sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="46:0"><if pos:start="39:5" pos:end="46:0">if <condition pos:start="39:8" pos:end="39:15">(<expr pos:start="39:9" pos:end="39:14"><name pos:start="39:9" pos:end="39:10">rc</name> <operator pos:start="39:12" pos:end="39:12">&lt;</operator> <literal type="number" pos:start="39:14" pos:end="39:14">0</literal></expr>)</condition> <block pos:start="39:17" pos:end="46:0">{<block_content pos:start="41:9" pos:end="41:36">

        <expr_stmt pos:start="41:9" pos:end="41:36"><expr pos:start="41:9" pos:end="41:35"><call pos:start="41:9" pos:end="41:35"><name pos:start="41:9" pos:end="41:18">error_exit</name><argument_list pos:start="41:19" pos:end="41:35">(<argument pos:start="41:20" pos:end="41:24"><expr pos:start="41:20" pos:end="41:24"><name pos:start="41:20" pos:end="41:24">errno</name></expr></argument>, <argument pos:start="41:27" pos:end="41:34"><expr pos:start="41:27" pos:end="41:34"><name pos:start="41:27" pos:end="41:34">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="45:1" pos:end="45:6">#<cpp:directive pos:start="45:2" pos:end="45:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
