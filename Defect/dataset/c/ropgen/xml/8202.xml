<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8202.c" pos:tabs="8"><function pos:start="1:1" pos:end="75:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">wav_read_header</name><parameter_list pos:start="1:27" pos:end="3:50">(<parameter pos:start="1:28" pos:end="1:45"><decl pos:start="1:28" pos:end="1:45"><type pos:start="1:28" pos:end="1:45"><name pos:start="1:28" pos:end="1:42">AVFormatContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">s</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:49"><decl pos:start="3:28" pos:end="3:49"><type pos:start="3:28" pos:end="3:49"><name pos:start="3:28" pos:end="3:45">AVFormatParameters</name> <modifier pos:start="3:47" pos:end="3:47">*</modifier></type><name pos:start="3:48" pos:end="3:49">ap</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="75:1">{<block_content pos:start="7:5" pos:end="73:13">

    <decl_stmt pos:start="7:5" pos:end="7:13"><decl pos:start="7:5" pos:end="7:12"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:12">size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:16">int</name></type> <name pos:start="9:18" pos:end="9:20">tag</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:30"><decl pos:start="11:5" pos:end="11:29"><type pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:17">ByteIOContext</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:21">pb</name> <init pos:start="11:23" pos:end="11:29">= <expr pos:start="11:25" pos:end="11:29"><name pos:start="11:25" pos:end="11:29"><name pos:start="11:25" pos:end="11:25">s</name><operator pos:start="11:26" pos:end="11:27">-&gt;</operator><name pos:start="11:28" pos:end="11:29">pb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">AVStream</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:16">st</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:35"><decl pos:start="15:5" pos:end="15:34"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:14">WAVContext</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:19">wav</name> <init pos:start="15:21" pos:end="15:34">= <expr pos:start="15:23" pos:end="15:34"><name pos:start="15:23" pos:end="15:34"><name pos:start="15:23" pos:end="15:23">s</name><operator pos:start="15:24" pos:end="15:25">-&gt;</operator><name pos:start="15:26" pos:end="15:34">priv_data</name></name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="19:5" pos:end="19:27">/* check RIFF header */</comment>

    <expr_stmt pos:start="21:5" pos:end="21:23"><expr pos:start="21:5" pos:end="21:22"><name pos:start="21:5" pos:end="21:7">tag</name> <operator pos:start="21:9" pos:end="21:9">=</operator> <call pos:start="21:11" pos:end="21:22"><name pos:start="21:11" pos:end="21:18">get_le32</name><argument_list pos:start="21:19" pos:end="21:22">(<argument pos:start="21:20" pos:end="21:21"><expr pos:start="21:20" pos:end="21:21"><name pos:start="21:20" pos:end="21:21">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="25:5" pos:end="27:18"><if pos:start="25:5" pos:end="27:18">if <condition pos:start="25:8" pos:end="25:41">(<expr pos:start="25:9" pos:end="25:40"><name pos:start="25:9" pos:end="25:11">tag</name> <operator pos:start="25:13" pos:end="25:14">!=</operator> <call pos:start="25:16" pos:end="25:40"><name pos:start="25:16" pos:end="25:20">MKTAG</name><argument_list pos:start="25:21" pos:end="25:40">(<argument pos:start="25:22" pos:end="25:24"><expr pos:start="25:22" pos:end="25:24"><literal type="char" pos:start="25:22" pos:end="25:24">'R'</literal></expr></argument>, <argument pos:start="25:27" pos:end="25:29"><expr pos:start="25:27" pos:end="25:29"><literal type="char" pos:start="25:27" pos:end="25:29">'I'</literal></expr></argument>, <argument pos:start="25:32" pos:end="25:34"><expr pos:start="25:32" pos:end="25:34"><literal type="char" pos:start="25:32" pos:end="25:34">'F'</literal></expr></argument>, <argument pos:start="25:37" pos:end="25:39"><expr pos:start="25:37" pos:end="25:39"><literal type="char" pos:start="25:37" pos:end="25:39">'F'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:18"><block_content pos:start="27:9" pos:end="27:18">

        <return pos:start="27:9" pos:end="27:18">return <expr pos:start="27:16" pos:end="27:17"><operator pos:start="27:16" pos:end="27:16">-</operator><literal type="number" pos:start="27:17" pos:end="27:17">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:17"><expr pos:start="29:5" pos:end="29:16"><call pos:start="29:5" pos:end="29:16"><name pos:start="29:5" pos:end="29:12">get_le32</name><argument_list pos:start="29:13" pos:end="29:16">(<argument pos:start="29:14" pos:end="29:15"><expr pos:start="29:14" pos:end="29:15"><name pos:start="29:14" pos:end="29:15">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="29:19" pos:end="29:33">/* file size */</comment>

    <expr_stmt pos:start="31:5" pos:end="31:23"><expr pos:start="31:5" pos:end="31:22"><name pos:start="31:5" pos:end="31:7">tag</name> <operator pos:start="31:9" pos:end="31:9">=</operator> <call pos:start="31:11" pos:end="31:22"><name pos:start="31:11" pos:end="31:18">get_le32</name><argument_list pos:start="31:19" pos:end="31:22">(<argument pos:start="31:20" pos:end="31:21"><expr pos:start="31:20" pos:end="31:21"><name pos:start="31:20" pos:end="31:21">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="35:18"><if pos:start="33:5" pos:end="35:18">if <condition pos:start="33:8" pos:end="33:41">(<expr pos:start="33:9" pos:end="33:40"><name pos:start="33:9" pos:end="33:11">tag</name> <operator pos:start="33:13" pos:end="33:14">!=</operator> <call pos:start="33:16" pos:end="33:40"><name pos:start="33:16" pos:end="33:20">MKTAG</name><argument_list pos:start="33:21" pos:end="33:40">(<argument pos:start="33:22" pos:end="33:24"><expr pos:start="33:22" pos:end="33:24"><literal type="char" pos:start="33:22" pos:end="33:24">'W'</literal></expr></argument>, <argument pos:start="33:27" pos:end="33:29"><expr pos:start="33:27" pos:end="33:29"><literal type="char" pos:start="33:27" pos:end="33:29">'A'</literal></expr></argument>, <argument pos:start="33:32" pos:end="33:34"><expr pos:start="33:32" pos:end="33:34"><literal type="char" pos:start="33:32" pos:end="33:34">'V'</literal></expr></argument>, <argument pos:start="33:37" pos:end="33:39"><expr pos:start="33:37" pos:end="33:39"><literal type="char" pos:start="33:37" pos:end="33:39">'E'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="35:9" pos:end="35:18"><block_content pos:start="35:9" pos:end="35:18">

        <return pos:start="35:9" pos:end="35:18">return <expr pos:start="35:16" pos:end="35:17"><operator pos:start="35:16" pos:end="35:16">-</operator><literal type="number" pos:start="35:17" pos:end="35:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="39:5" pos:end="39:26">/* parse fmt header */</comment>

    <expr_stmt pos:start="41:5" pos:end="41:51"><expr pos:start="41:5" pos:end="41:50"><name pos:start="41:5" pos:end="41:8">size</name> <operator pos:start="41:10" pos:end="41:10">=</operator> <call pos:start="41:12" pos:end="41:50"><name pos:start="41:12" pos:end="41:19">find_tag</name><argument_list pos:start="41:20" pos:end="41:50">(<argument pos:start="41:21" pos:end="41:22"><expr pos:start="41:21" pos:end="41:22"><name pos:start="41:21" pos:end="41:22">pb</name></expr></argument>, <argument pos:start="41:25" pos:end="41:49"><expr pos:start="41:25" pos:end="41:49"><call pos:start="41:25" pos:end="41:49"><name pos:start="41:25" pos:end="41:29">MKTAG</name><argument_list pos:start="41:30" pos:end="41:49">(<argument pos:start="41:31" pos:end="41:33"><expr pos:start="41:31" pos:end="41:33"><literal type="char" pos:start="41:31" pos:end="41:33">'f'</literal></expr></argument>, <argument pos:start="41:36" pos:end="41:38"><expr pos:start="41:36" pos:end="41:38"><literal type="char" pos:start="41:36" pos:end="41:38">'m'</literal></expr></argument>, <argument pos:start="41:41" pos:end="41:43"><expr pos:start="41:41" pos:end="41:43"><literal type="char" pos:start="41:41" pos:end="41:43">'t'</literal></expr></argument>, <argument pos:start="41:46" pos:end="41:48"><expr pos:start="41:46" pos:end="41:48"><literal type="char" pos:start="41:46" pos:end="41:48">' '</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="43:5" pos:end="45:18"><if pos:start="43:5" pos:end="45:18">if <condition pos:start="43:8" pos:end="43:17">(<expr pos:start="43:9" pos:end="43:16"><name pos:start="43:9" pos:end="43:12">size</name> <operator pos:start="43:14" pos:end="43:14">&lt;</operator> <literal type="number" pos:start="43:16" pos:end="43:16">0</literal></expr>)</condition><block type="pseudo" pos:start="45:9" pos:end="45:18"><block_content pos:start="45:9" pos:end="45:18">

        <return pos:start="45:9" pos:end="45:18">return <expr pos:start="45:16" pos:end="45:17"><operator pos:start="45:16" pos:end="45:16">-</operator><literal type="number" pos:start="45:17" pos:end="45:17">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:29"><expr pos:start="47:5" pos:end="47:28"><name pos:start="47:5" pos:end="47:6">st</name> <operator pos:start="47:8" pos:end="47:8">=</operator> <call pos:start="47:10" pos:end="47:28"><name pos:start="47:10" pos:end="47:22">av_new_stream</name><argument_list pos:start="47:23" pos:end="47:28">(<argument pos:start="47:24" pos:end="47:24"><expr pos:start="47:24" pos:end="47:24"><name pos:start="47:24" pos:end="47:24">s</name></expr></argument>, <argument pos:start="47:27" pos:end="47:27"><expr pos:start="47:27" pos:end="47:27"><literal type="number" pos:start="47:27" pos:end="47:27">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="51:31"><if pos:start="49:5" pos:end="51:31">if <condition pos:start="49:8" pos:end="49:12">(<expr pos:start="49:9" pos:end="49:11"><operator pos:start="49:9" pos:end="49:9">!</operator><name pos:start="49:10" pos:end="49:11">st</name></expr>)</condition><block type="pseudo" pos:start="51:9" pos:end="51:31"><block_content pos:start="51:9" pos:end="51:31">

        <return pos:start="51:9" pos:end="51:31">return <expr pos:start="51:16" pos:end="51:30"><call pos:start="51:16" pos:end="51:30"><name pos:start="51:16" pos:end="51:22">AVERROR</name><argument_list pos:start="51:23" pos:end="51:30">(<argument pos:start="51:24" pos:end="51:29"><expr pos:start="51:24" pos:end="51:29"><name pos:start="51:24" pos:end="51:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:40"><expr pos:start="55:5" pos:end="55:39"><call pos:start="55:5" pos:end="55:39"><name pos:start="55:5" pos:end="55:18">get_wav_header</name><argument_list pos:start="55:19" pos:end="55:39">(<argument pos:start="55:20" pos:end="55:21"><expr pos:start="55:20" pos:end="55:21"><name pos:start="55:20" pos:end="55:21">pb</name></expr></argument>, <argument pos:start="55:24" pos:end="55:32"><expr pos:start="55:24" pos:end="55:32"><name pos:start="55:24" pos:end="55:32"><name pos:start="55:24" pos:end="55:25">st</name><operator pos:start="55:26" pos:end="55:27">-&gt;</operator><name pos:start="55:28" pos:end="55:32">codec</name></name></expr></argument>, <argument pos:start="55:35" pos:end="55:38"><expr pos:start="55:35" pos:end="55:38"><name pos:start="55:35" pos:end="55:38">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:43"><expr pos:start="57:5" pos:end="57:42"><name pos:start="57:5" pos:end="57:20"><name pos:start="57:5" pos:end="57:6">st</name><operator pos:start="57:7" pos:end="57:8">-&gt;</operator><name pos:start="57:9" pos:end="57:20">need_parsing</name></name> <operator pos:start="57:22" pos:end="57:22">=</operator> <name pos:start="57:24" pos:end="57:42">AVSTREAM_PARSE_FULL</name></expr>;</expr_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:55"><expr pos:start="61:5" pos:end="61:54"><call pos:start="61:5" pos:end="61:54"><name pos:start="61:5" pos:end="61:19">av_set_pts_info</name><argument_list pos:start="61:20" pos:end="61:54">(<argument pos:start="61:21" pos:end="61:22"><expr pos:start="61:21" pos:end="61:22"><name pos:start="61:21" pos:end="61:22">st</name></expr></argument>, <argument pos:start="61:25" pos:end="61:26"><expr pos:start="61:25" pos:end="61:26"><literal type="number" pos:start="61:25" pos:end="61:26">64</literal></expr></argument>, <argument pos:start="61:29" pos:end="61:29"><expr pos:start="61:29" pos:end="61:29"><literal type="number" pos:start="61:29" pos:end="61:29">1</literal></expr></argument>, <argument pos:start="61:32" pos:end="61:53"><expr pos:start="61:32" pos:end="61:53"><name pos:start="61:32" pos:end="61:53"><name pos:start="61:32" pos:end="61:33">st</name><operator pos:start="61:34" pos:end="61:35">-&gt;</operator><name pos:start="61:36" pos:end="61:40">codec</name><operator pos:start="61:41" pos:end="61:42">-&gt;</operator><name pos:start="61:43" pos:end="61:53">sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:51"><expr pos:start="65:5" pos:end="65:50"><name pos:start="65:5" pos:end="65:8">size</name> <operator pos:start="65:10" pos:end="65:10">=</operator> <call pos:start="65:12" pos:end="65:50"><name pos:start="65:12" pos:end="65:19">find_tag</name><argument_list pos:start="65:20" pos:end="65:50">(<argument pos:start="65:21" pos:end="65:22"><expr pos:start="65:21" pos:end="65:22"><name pos:start="65:21" pos:end="65:22">pb</name></expr></argument>, <argument pos:start="65:25" pos:end="65:49"><expr pos:start="65:25" pos:end="65:49"><call pos:start="65:25" pos:end="65:49"><name pos:start="65:25" pos:end="65:29">MKTAG</name><argument_list pos:start="65:30" pos:end="65:49">(<argument pos:start="65:31" pos:end="65:33"><expr pos:start="65:31" pos:end="65:33"><literal type="char" pos:start="65:31" pos:end="65:33">'d'</literal></expr></argument>, <argument pos:start="65:36" pos:end="65:38"><expr pos:start="65:36" pos:end="65:38"><literal type="char" pos:start="65:36" pos:end="65:38">'a'</literal></expr></argument>, <argument pos:start="65:41" pos:end="65:43"><expr pos:start="65:41" pos:end="65:43"><literal type="char" pos:start="65:41" pos:end="65:43">'t'</literal></expr></argument>, <argument pos:start="65:46" pos:end="65:48"><expr pos:start="65:46" pos:end="65:48"><literal type="char" pos:start="65:46" pos:end="65:48">'a'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="67:5" pos:end="69:18"><if pos:start="67:5" pos:end="69:18">if <condition pos:start="67:8" pos:end="67:17">(<expr pos:start="67:9" pos:end="67:16"><name pos:start="67:9" pos:end="67:12">size</name> <operator pos:start="67:14" pos:end="67:14">&lt;</operator> <literal type="number" pos:start="67:16" pos:end="67:16">0</literal></expr>)</condition><block type="pseudo" pos:start="69:9" pos:end="69:18"><block_content pos:start="69:9" pos:end="69:18">

        <return pos:start="69:9" pos:end="69:18">return <expr pos:start="69:16" pos:end="69:17"><operator pos:start="69:16" pos:end="69:16">-</operator><literal type="number" pos:start="69:17" pos:end="69:17">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:40"><expr pos:start="71:5" pos:end="71:39"><name pos:start="71:5" pos:end="71:17"><name pos:start="71:5" pos:end="71:7">wav</name><operator pos:start="71:8" pos:end="71:9">-&gt;</operator><name pos:start="71:10" pos:end="71:17">data_end</name></name><operator pos:start="71:18" pos:end="71:18">=</operator> <call pos:start="71:20" pos:end="71:32"><name pos:start="71:20" pos:end="71:28">url_ftell</name><argument_list pos:start="71:29" pos:end="71:32">(<argument pos:start="71:30" pos:end="71:31"><expr pos:start="71:30" pos:end="71:31"><name pos:start="71:30" pos:end="71:31">pb</name></expr></argument>)</argument_list></call> <operator pos:start="71:34" pos:end="71:34">+</operator> <name pos:start="71:36" pos:end="71:39">size</name></expr>;</expr_stmt>

    <return pos:start="73:5" pos:end="73:13">return <expr pos:start="73:12" pos:end="73:12"><literal type="number" pos:start="73:12" pos:end="73:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
