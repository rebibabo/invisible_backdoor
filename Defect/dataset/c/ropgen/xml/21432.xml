<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21432.c" pos:tabs="8"><function pos:start="1:1" pos:end="215:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:30">virtio_blk_handle_request</name><parameter_list pos:start="1:31" pos:end="1:72">(<parameter pos:start="1:32" pos:end="1:50"><decl pos:start="1:32" pos:end="1:50"><type pos:start="1:32" pos:end="1:50"><name pos:start="1:32" pos:end="1:45">VirtIOBlockReq</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:50">req</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:71"><decl pos:start="1:53" pos:end="1:71"><type pos:start="1:53" pos:end="1:71"><name pos:start="1:53" pos:end="1:66">MultiReqBuffer</name> <modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:71">mrb</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="215:1">{<block_content pos:start="5:5" pos:end="213:5">

    <decl_stmt pos:start="5:5" pos:end="5:18"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint32_t</name></type> <name pos:start="5:14" pos:end="5:17">type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:43"><decl pos:start="7:5" pos:end="7:42"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:16">iovec</name></name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:24">in_iov</name> <init pos:start="7:26" pos:end="7:42">= <expr pos:start="7:28" pos:end="7:42"><name pos:start="7:28" pos:end="7:42"><name pos:start="7:28" pos:end="7:30">req</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:36">elem</name><operator pos:start="7:37" pos:end="7:37">.</operator><name pos:start="7:38" pos:end="7:42">in_sg</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:41"><decl pos:start="9:5" pos:end="9:40"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:16">iovec</name></name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:21">iov</name> <init pos:start="9:23" pos:end="9:40">= <expr pos:start="9:25" pos:end="9:40"><name pos:start="9:25" pos:end="9:40"><name pos:start="9:25" pos:end="9:27">req</name><operator pos:start="9:28" pos:end="9:29">-&gt;</operator><name pos:start="9:30" pos:end="9:33">elem</name><operator pos:start="9:34" pos:end="9:34">.</operator><name pos:start="9:35" pos:end="9:40">out_sg</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:39"><decl pos:start="11:5" pos:end="11:38"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">unsigned</name></type> <name pos:start="11:14" pos:end="11:19">in_num</name> <init pos:start="11:21" pos:end="11:38">= <expr pos:start="11:23" pos:end="11:38"><name pos:start="11:23" pos:end="11:38"><name pos:start="11:23" pos:end="11:25">req</name><operator pos:start="11:26" pos:end="11:27">-&gt;</operator><name pos:start="11:28" pos:end="11:31">elem</name><operator pos:start="11:32" pos:end="11:32">.</operator><name pos:start="11:33" pos:end="11:38">in_num</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:41"><decl pos:start="13:5" pos:end="13:40"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">unsigned</name></type> <name pos:start="13:14" pos:end="13:20">out_num</name> <init pos:start="13:22" pos:end="13:40">= <expr pos:start="13:24" pos:end="13:40"><name pos:start="13:24" pos:end="13:40"><name pos:start="13:24" pos:end="13:26">req</name><operator pos:start="13:27" pos:end="13:28">-&gt;</operator><name pos:start="13:29" pos:end="13:32">elem</name><operator pos:start="13:33" pos:end="13:33">.</operator><name pos:start="13:34" pos:end="13:40">out_num</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="23:5"><if pos:start="17:5" pos:end="23:5">if <condition pos:start="17:8" pos:end="17:54">(<expr pos:start="17:9" pos:end="17:53"><name pos:start="17:9" pos:end="17:25"><name pos:start="17:9" pos:end="17:11">req</name><operator pos:start="17:12" pos:end="17:13">-&gt;</operator><name pos:start="17:14" pos:end="17:17">elem</name><operator pos:start="17:18" pos:end="17:18">.</operator><name pos:start="17:19" pos:end="17:25">out_num</name></name> <operator pos:start="17:27" pos:end="17:27">&lt;</operator> <literal type="number" pos:start="17:29" pos:end="17:29">1</literal> <operator pos:start="17:31" pos:end="17:32">||</operator> <name pos:start="17:34" pos:end="17:49"><name pos:start="17:34" pos:end="17:36">req</name><operator pos:start="17:37" pos:end="17:38">-&gt;</operator><name pos:start="17:39" pos:end="17:42">elem</name><operator pos:start="17:43" pos:end="17:43">.</operator><name pos:start="17:44" pos:end="17:49">in_num</name></name> <operator pos:start="17:51" pos:end="17:51">&lt;</operator> <literal type="number" pos:start="17:53" pos:end="17:53">1</literal></expr>)</condition> <block pos:start="17:56" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:16">

        <expr_stmt pos:start="19:9" pos:end="19:51"><expr pos:start="19:9" pos:end="19:50"><call pos:start="19:9" pos:end="19:50"><name pos:start="19:9" pos:end="19:20">error_report</name><argument_list pos:start="19:21" pos:end="19:50">(<argument pos:start="19:22" pos:end="19:49"><expr pos:start="19:22" pos:end="19:49"><literal type="string" pos:start="19:22" pos:end="19:49">"virtio-blk missing headers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:16"><expr pos:start="21:9" pos:end="21:15"><call pos:start="21:9" pos:end="21:15"><name pos:start="21:9" pos:end="21:12">exit</name><argument_list pos:start="21:13" pos:end="21:15">(<argument pos:start="21:14" pos:end="21:14"><expr pos:start="21:14" pos:end="21:14"><literal type="number" pos:start="21:14" pos:end="21:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="27:5" pos:end="35:5"><if pos:start="27:5" pos:end="35:5">if <condition pos:start="27:8" pos:end="29:67">(<expr pos:start="27:9" pos:end="29:66"><call pos:start="27:9" pos:end="29:66"><name pos:start="27:9" pos:end="27:16">unlikely</name><argument_list pos:start="27:17" pos:end="29:66">(<argument pos:start="27:18" pos:end="29:65"><expr pos:start="27:18" pos:end="29:65"><call pos:start="27:18" pos:end="29:45"><name pos:start="27:18" pos:end="27:27">iov_to_buf</name><argument_list pos:start="27:28" pos:end="29:45">(<argument pos:start="27:29" pos:end="27:31"><expr pos:start="27:29" pos:end="27:31"><name pos:start="27:29" pos:end="27:31">iov</name></expr></argument>, <argument pos:start="27:34" pos:end="27:40"><expr pos:start="27:34" pos:end="27:40"><name pos:start="27:34" pos:end="27:40">out_num</name></expr></argument>, <argument pos:start="27:43" pos:end="27:43"><expr pos:start="27:43" pos:end="27:43"><literal type="number" pos:start="27:43" pos:end="27:43">0</literal></expr></argument>, <argument pos:start="27:46" pos:end="27:54"><expr pos:start="27:46" pos:end="27:54"><operator pos:start="27:46" pos:end="27:46">&amp;</operator><name pos:start="27:47" pos:end="27:54"><name pos:start="27:47" pos:end="27:49">req</name><operator pos:start="27:50" pos:end="27:51">-&gt;</operator><name pos:start="27:52" pos:end="27:54">out</name></name></expr></argument>,

                            <argument pos:start="29:29" pos:end="29:44"><expr pos:start="29:29" pos:end="29:44"><sizeof pos:start="29:29" pos:end="29:44">sizeof<argument_list pos:start="29:35" pos:end="29:44">(<argument pos:start="29:36" pos:end="29:43"><expr pos:start="29:36" pos:end="29:43"><name pos:start="29:36" pos:end="29:43"><name pos:start="29:36" pos:end="29:38">req</name><operator pos:start="29:39" pos:end="29:40">-&gt;</operator><name pos:start="29:41" pos:end="29:43">out</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="29:47" pos:end="29:48">!=</operator> <sizeof pos:start="29:50" pos:end="29:65">sizeof<argument_list pos:start="29:56" pos:end="29:65">(<argument pos:start="29:57" pos:end="29:64"><expr pos:start="29:57" pos:end="29:64"><name pos:start="29:57" pos:end="29:64"><name pos:start="29:57" pos:end="29:59">req</name><operator pos:start="29:60" pos:end="29:61">-&gt;</operator><name pos:start="29:62" pos:end="29:64">out</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="29:69" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:16">

        <expr_stmt pos:start="31:9" pos:end="31:60"><expr pos:start="31:9" pos:end="31:59"><call pos:start="31:9" pos:end="31:59"><name pos:start="31:9" pos:end="31:20">error_report</name><argument_list pos:start="31:21" pos:end="31:59">(<argument pos:start="31:22" pos:end="31:58"><expr pos:start="31:22" pos:end="31:58"><literal type="string" pos:start="31:22" pos:end="31:58">"virtio-blk request outhdr too short"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:16"><expr pos:start="33:9" pos:end="33:15"><call pos:start="33:9" pos:end="33:15"><name pos:start="33:9" pos:end="33:12">exit</name><argument_list pos:start="33:13" pos:end="33:15">(<argument pos:start="33:14" pos:end="33:14"><expr pos:start="33:14" pos:end="33:14"><literal type="number" pos:start="33:14" pos:end="33:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:56"><expr pos:start="39:5" pos:end="39:55"><call pos:start="39:5" pos:end="39:55"><name pos:start="39:5" pos:end="39:21">iov_discard_front</name><argument_list pos:start="39:22" pos:end="39:55">(<argument pos:start="39:23" pos:end="39:26"><expr pos:start="39:23" pos:end="39:26"><operator pos:start="39:23" pos:end="39:23">&amp;</operator><name pos:start="39:24" pos:end="39:26">iov</name></expr></argument>, <argument pos:start="39:29" pos:end="39:36"><expr pos:start="39:29" pos:end="39:36"><operator pos:start="39:29" pos:end="39:29">&amp;</operator><name pos:start="39:30" pos:end="39:36">out_num</name></expr></argument>, <argument pos:start="39:39" pos:end="39:54"><expr pos:start="39:39" pos:end="39:54"><sizeof pos:start="39:39" pos:end="39:54">sizeof<argument_list pos:start="39:45" pos:end="39:54">(<argument pos:start="39:46" pos:end="39:53"><expr pos:start="39:46" pos:end="39:53"><name pos:start="39:46" pos:end="39:53"><name pos:start="39:46" pos:end="39:48">req</name><operator pos:start="39:49" pos:end="39:50">-&gt;</operator><name pos:start="39:51" pos:end="39:53">out</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="43:5" pos:end="51:5"><if pos:start="43:5" pos:end="51:5">if <condition pos:start="43:8" pos:end="45:69">(<expr pos:start="43:9" pos:end="45:68"><name pos:start="43:9" pos:end="43:14">in_num</name> <operator pos:start="43:16" pos:end="43:16">&lt;</operator> <literal type="number" pos:start="43:18" pos:end="43:18">1</literal> <operator pos:start="43:20" pos:end="43:21">||</operator>

        <name pos:start="45:9" pos:end="45:26"><name pos:start="45:9" pos:end="45:14">in_iov</name><index pos:start="45:15" pos:end="45:26">[<expr pos:start="45:16" pos:end="45:25"><name pos:start="45:16" pos:end="45:21">in_num</name> <operator pos:start="45:23" pos:end="45:23">-</operator> <literal type="number" pos:start="45:25" pos:end="45:25">1</literal></expr>]</index></name><operator pos:start="45:27" pos:end="45:27">.</operator><name pos:start="45:28" pos:end="45:34">iov_len</name> <operator pos:start="45:36" pos:end="45:36">&lt;</operator> <sizeof pos:start="45:38" pos:end="45:68">sizeof<argument_list pos:start="45:44" pos:end="45:68">(<argument pos:start="45:45" pos:end="45:67"><expr pos:start="45:45" pos:end="45:67">struct <name pos:start="45:52" pos:end="45:67">virtio_blk_inhdr</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="45:71" pos:end="51:5">{<block_content pos:start="47:9" pos:end="49:16">

        <expr_stmt pos:start="47:9" pos:end="47:59"><expr pos:start="47:9" pos:end="47:58"><call pos:start="47:9" pos:end="47:58"><name pos:start="47:9" pos:end="47:20">error_report</name><argument_list pos:start="47:21" pos:end="47:58">(<argument pos:start="47:22" pos:end="47:57"><expr pos:start="47:22" pos:end="47:57"><literal type="string" pos:start="47:22" pos:end="47:57">"virtio-blk request inhdr too short"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:16"><expr pos:start="49:9" pos:end="49:15"><call pos:start="49:9" pos:end="49:15"><name pos:start="49:9" pos:end="49:12">exit</name><argument_list pos:start="49:13" pos:end="49:15">(<argument pos:start="49:14" pos:end="49:14"><expr pos:start="49:14" pos:end="49:14"><literal type="number" pos:start="49:14" pos:end="49:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="55:5" pos:end="55:72">/* We always touch the last byte, so just see how big in_iov is.  */</comment>

    <expr_stmt pos:start="57:5" pos:end="57:43"><expr pos:start="57:5" pos:end="57:42"><name pos:start="57:5" pos:end="57:15"><name pos:start="57:5" pos:end="57:7">req</name><operator pos:start="57:8" pos:end="57:9">-&gt;</operator><name pos:start="57:10" pos:end="57:15">in_len</name></name> <operator pos:start="57:17" pos:end="57:17">=</operator> <call pos:start="57:19" pos:end="57:42"><name pos:start="57:19" pos:end="57:26">iov_size</name><argument_list pos:start="57:27" pos:end="57:42">(<argument pos:start="57:28" pos:end="57:33"><expr pos:start="57:28" pos:end="57:33"><name pos:start="57:28" pos:end="57:33">in_iov</name></expr></argument>, <argument pos:start="57:36" pos:end="57:41"><expr pos:start="57:36" pos:end="57:41"><name pos:start="57:36" pos:end="57:41">in_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="63:48"><expr pos:start="59:5" pos:end="63:47"><name pos:start="59:5" pos:end="59:11"><name pos:start="59:5" pos:end="59:7">req</name><operator pos:start="59:8" pos:end="59:9">-&gt;</operator><name pos:start="59:10" pos:end="59:11">in</name></name> <operator pos:start="59:13" pos:end="59:13">=</operator> <operator pos:start="59:15" pos:end="59:15">(</operator><name pos:start="59:16" pos:end="59:19">void</name> <operator pos:start="59:21" pos:end="59:21">*</operator><operator pos:start="59:22" pos:end="59:22">)</operator><name pos:start="59:23" pos:end="59:40"><name pos:start="59:23" pos:end="59:28">in_iov</name><index pos:start="59:29" pos:end="59:40">[<expr pos:start="59:30" pos:end="59:39"><name pos:start="59:30" pos:end="59:35">in_num</name> <operator pos:start="59:37" pos:end="59:37">-</operator> <literal type="number" pos:start="59:39" pos:end="59:39">1</literal></expr>]</index></name><operator pos:start="59:41" pos:end="59:41">.</operator><name pos:start="59:42" pos:end="59:49">iov_base</name>

              <operator pos:start="61:15" pos:end="61:15">+</operator> <name pos:start="61:17" pos:end="61:34"><name pos:start="61:17" pos:end="61:22">in_iov</name><index pos:start="61:23" pos:end="61:34">[<expr pos:start="61:24" pos:end="61:33"><name pos:start="61:24" pos:end="61:29">in_num</name> <operator pos:start="61:31" pos:end="61:31">-</operator> <literal type="number" pos:start="61:33" pos:end="61:33">1</literal></expr>]</index></name><operator pos:start="61:35" pos:end="61:35">.</operator><name pos:start="61:36" pos:end="61:42">iov_len</name>

              <operator pos:start="63:15" pos:end="63:15">-</operator> <sizeof pos:start="63:17" pos:end="63:47">sizeof<argument_list pos:start="63:23" pos:end="63:47">(<argument pos:start="63:24" pos:end="63:46"><expr pos:start="63:24" pos:end="63:46">struct <name pos:start="63:31" pos:end="63:46">virtio_blk_inhdr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:71"><expr pos:start="65:5" pos:end="65:70"><call pos:start="65:5" pos:end="65:70"><name pos:start="65:5" pos:end="65:20">iov_discard_back</name><argument_list pos:start="65:21" pos:end="65:70">(<argument pos:start="65:22" pos:end="65:27"><expr pos:start="65:22" pos:end="65:27"><name pos:start="65:22" pos:end="65:27">in_iov</name></expr></argument>, <argument pos:start="65:30" pos:end="65:36"><expr pos:start="65:30" pos:end="65:36"><operator pos:start="65:30" pos:end="65:30">&amp;</operator><name pos:start="65:31" pos:end="65:36">in_num</name></expr></argument>, <argument pos:start="65:39" pos:end="65:69"><expr pos:start="65:39" pos:end="65:69"><sizeof pos:start="65:39" pos:end="65:69">sizeof<argument_list pos:start="65:45" pos:end="65:69">(<argument pos:start="65:46" pos:end="65:68"><expr pos:start="65:46" pos:end="65:68">struct <name pos:start="65:53" pos:end="65:68">virtio_blk_inhdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:65"><expr pos:start="69:5" pos:end="69:64"><name pos:start="69:5" pos:end="69:8">type</name> <operator pos:start="69:10" pos:end="69:10">=</operator> <call pos:start="69:12" pos:end="69:64"><name pos:start="69:12" pos:end="69:23">virtio_ldl_p</name><argument_list pos:start="69:24" pos:end="69:64">(<argument pos:start="69:25" pos:end="69:47"><expr pos:start="69:25" pos:end="69:47"><call pos:start="69:25" pos:end="69:47"><name pos:start="69:25" pos:end="69:37">VIRTIO_DEVICE</name><argument_list pos:start="69:38" pos:end="69:47">(<argument pos:start="69:39" pos:end="69:46"><expr pos:start="69:39" pos:end="69:46"><name pos:start="69:39" pos:end="69:46"><name pos:start="69:39" pos:end="69:41">req</name><operator pos:start="69:42" pos:end="69:43">-&gt;</operator><name pos:start="69:44" pos:end="69:46">dev</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="69:50" pos:end="69:63"><expr pos:start="69:50" pos:end="69:63"><operator pos:start="69:50" pos:end="69:50">&amp;</operator><name pos:start="69:51" pos:end="69:63"><name pos:start="69:51" pos:end="69:53">req</name><operator pos:start="69:54" pos:end="69:55">-&gt;</operator><name pos:start="69:56" pos:end="69:58">out</name><operator pos:start="69:59" pos:end="69:59">.</operator><name pos:start="69:60" pos:end="69:63">type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="73:5" pos:end="77:72">/* VIRTIO_BLK_T_OUT defines the command direction. VIRTIO_BLK_T_BARRIER

     * is an optional flag. Although a guest should not send this flag if

     * not negotiated we ignored it in the past. So keep ignoring it. */</comment>

    <switch pos:start="79:5" pos:end="213:5">switch <condition pos:start="79:12" pos:end="79:62">(<expr pos:start="79:13" pos:end="79:61"><name pos:start="79:13" pos:end="79:16">type</name> <operator pos:start="79:18" pos:end="79:18">&amp;</operator> <operator pos:start="79:20" pos:end="79:20">~</operator><operator pos:start="79:21" pos:end="79:21">(</operator><name pos:start="79:22" pos:end="79:37">VIRTIO_BLK_T_OUT</name> <operator pos:start="79:39" pos:end="79:39">|</operator> <name pos:start="79:41" pos:end="79:60">VIRTIO_BLK_T_BARRIER</name><operator pos:start="79:61" pos:end="79:61">)</operator></expr>)</condition> <block pos:start="79:64" pos:end="213:5">{<block_content pos:start="81:5" pos:end="211:37">

    <case pos:start="81:5" pos:end="81:25">case <expr pos:start="81:10" pos:end="81:24"><name pos:start="81:10" pos:end="81:24">VIRTIO_BLK_T_IN</name></expr>:</case>

    <block pos:start="83:5" pos:end="159:5">{<block_content pos:start="85:9" pos:end="157:14">

        <decl_stmt pos:start="85:9" pos:end="85:48"><decl pos:start="85:9" pos:end="85:47"><type pos:start="85:9" pos:end="85:12"><name pos:start="85:9" pos:end="85:12">bool</name></type> <name pos:start="85:14" pos:end="85:21">is_write</name> <init pos:start="85:23" pos:end="85:47">= <expr pos:start="85:25" pos:end="85:47"><name pos:start="85:25" pos:end="85:28">type</name> <operator pos:start="85:30" pos:end="85:30">&amp;</operator> <name pos:start="85:32" pos:end="85:47">VIRTIO_BLK_T_OUT</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="87:9" pos:end="89:57"><expr pos:start="87:9" pos:end="89:56"><name pos:start="87:9" pos:end="87:23"><name pos:start="87:9" pos:end="87:11">req</name><operator pos:start="87:12" pos:end="87:13">-&gt;</operator><name pos:start="87:14" pos:end="87:23">sector_num</name></name> <operator pos:start="87:25" pos:end="87:25">=</operator> <call pos:start="87:27" pos:end="89:56"><name pos:start="87:27" pos:end="87:38">virtio_ldq_p</name><argument_list pos:start="87:39" pos:end="89:56">(<argument pos:start="87:40" pos:end="87:62"><expr pos:start="87:40" pos:end="87:62"><call pos:start="87:40" pos:end="87:62"><name pos:start="87:40" pos:end="87:52">VIRTIO_DEVICE</name><argument_list pos:start="87:53" pos:end="87:62">(<argument pos:start="87:54" pos:end="87:61"><expr pos:start="87:54" pos:end="87:61"><name pos:start="87:54" pos:end="87:61"><name pos:start="87:54" pos:end="87:56">req</name><operator pos:start="87:57" pos:end="87:58">-&gt;</operator><name pos:start="87:59" pos:end="87:61">dev</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                       <argument pos:start="89:40" pos:end="89:55"><expr pos:start="89:40" pos:end="89:55"><operator pos:start="89:40" pos:end="89:40">&amp;</operator><name pos:start="89:41" pos:end="89:55"><name pos:start="89:41" pos:end="89:43">req</name><operator pos:start="89:44" pos:end="89:45">-&gt;</operator><name pos:start="89:46" pos:end="89:48">out</name><operator pos:start="89:49" pos:end="89:49">.</operator><name pos:start="89:50" pos:end="89:55">sector</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="93:9" pos:end="109:9"><if pos:start="93:9" pos:end="101:9">if <condition pos:start="93:12" pos:end="93:21">(<expr pos:start="93:13" pos:end="93:20"><name pos:start="93:13" pos:end="93:20">is_write</name></expr>)</condition> <block pos:start="93:23" pos:end="101:9">{<block_content pos:start="95:13" pos:end="99:77">

            <expr_stmt pos:start="95:13" pos:end="95:63"><expr pos:start="95:13" pos:end="95:62"><call pos:start="95:13" pos:end="95:62"><name pos:start="95:13" pos:end="95:36">qemu_iovec_init_external</name><argument_list pos:start="95:37" pos:end="95:62">(<argument pos:start="95:38" pos:end="95:47"><expr pos:start="95:38" pos:end="95:47"><operator pos:start="95:38" pos:end="95:38">&amp;</operator><name pos:start="95:39" pos:end="95:47"><name pos:start="95:39" pos:end="95:41">req</name><operator pos:start="95:42" pos:end="95:43">-&gt;</operator><name pos:start="95:44" pos:end="95:47">qiov</name></name></expr></argument>, <argument pos:start="95:50" pos:end="95:52"><expr pos:start="95:50" pos:end="95:52"><name pos:start="95:50" pos:end="95:52">iov</name></expr></argument>, <argument pos:start="95:55" pos:end="95:61"><expr pos:start="95:55" pos:end="95:61"><name pos:start="95:55" pos:end="95:61">out_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="97:13" pos:end="99:77"><expr pos:start="97:13" pos:end="99:76"><call pos:start="97:13" pos:end="99:76"><name pos:start="97:13" pos:end="97:41">trace_virtio_blk_handle_write</name><argument_list pos:start="97:42" pos:end="99:76">(<argument pos:start="97:43" pos:end="97:45"><expr pos:start="97:43" pos:end="97:45"><name pos:start="97:43" pos:end="97:45">req</name></expr></argument>, <argument pos:start="97:48" pos:end="97:62"><expr pos:start="97:48" pos:end="97:62"><name pos:start="97:48" pos:end="97:62"><name pos:start="97:48" pos:end="97:50">req</name><operator pos:start="97:51" pos:end="97:52">-&gt;</operator><name pos:start="97:53" pos:end="97:62">sector_num</name></name></expr></argument>,

                                          <argument pos:start="99:43" pos:end="99:75"><expr pos:start="99:43" pos:end="99:75"><name pos:start="99:43" pos:end="99:56"><name pos:start="99:43" pos:end="99:45">req</name><operator pos:start="99:46" pos:end="99:47">-&gt;</operator><name pos:start="99:48" pos:end="99:51">qiov</name><operator pos:start="99:52" pos:end="99:52">.</operator><name pos:start="99:53" pos:end="99:56">size</name></name> <operator pos:start="99:58" pos:end="99:58">/</operator> <name pos:start="99:60" pos:end="99:75">BDRV_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="101:11" pos:end="109:9">else <block pos:start="101:16" pos:end="109:9">{<block_content pos:start="103:13" pos:end="107:76">

            <expr_stmt pos:start="103:13" pos:end="103:65"><expr pos:start="103:13" pos:end="103:64"><call pos:start="103:13" pos:end="103:64"><name pos:start="103:13" pos:end="103:36">qemu_iovec_init_external</name><argument_list pos:start="103:37" pos:end="103:64">(<argument pos:start="103:38" pos:end="103:47"><expr pos:start="103:38" pos:end="103:47"><operator pos:start="103:38" pos:end="103:38">&amp;</operator><name pos:start="103:39" pos:end="103:47"><name pos:start="103:39" pos:end="103:41">req</name><operator pos:start="103:42" pos:end="103:43">-&gt;</operator><name pos:start="103:44" pos:end="103:47">qiov</name></name></expr></argument>, <argument pos:start="103:50" pos:end="103:55"><expr pos:start="103:50" pos:end="103:55"><name pos:start="103:50" pos:end="103:55">in_iov</name></expr></argument>, <argument pos:start="103:58" pos:end="103:63"><expr pos:start="103:58" pos:end="103:63"><name pos:start="103:58" pos:end="103:63">in_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="105:13" pos:end="107:76"><expr pos:start="105:13" pos:end="107:75"><call pos:start="105:13" pos:end="107:75"><name pos:start="105:13" pos:end="105:40">trace_virtio_blk_handle_read</name><argument_list pos:start="105:41" pos:end="107:75">(<argument pos:start="105:42" pos:end="105:44"><expr pos:start="105:42" pos:end="105:44"><name pos:start="105:42" pos:end="105:44">req</name></expr></argument>, <argument pos:start="105:47" pos:end="105:61"><expr pos:start="105:47" pos:end="105:61"><name pos:start="105:47" pos:end="105:61"><name pos:start="105:47" pos:end="105:49">req</name><operator pos:start="105:50" pos:end="105:51">-&gt;</operator><name pos:start="105:52" pos:end="105:61">sector_num</name></name></expr></argument>,

                                         <argument pos:start="107:42" pos:end="107:74"><expr pos:start="107:42" pos:end="107:74"><name pos:start="107:42" pos:end="107:55"><name pos:start="107:42" pos:end="107:44">req</name><operator pos:start="107:45" pos:end="107:46">-&gt;</operator><name pos:start="107:47" pos:end="107:50">qiov</name><operator pos:start="107:51" pos:end="107:51">.</operator><name pos:start="107:52" pos:end="107:55">size</name></name> <operator pos:start="107:57" pos:end="107:57">/</operator> <name pos:start="107:59" pos:end="107:74">BDRV_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="113:9" pos:end="123:9"><if pos:start="113:9" pos:end="123:9">if <condition pos:start="113:12" pos:end="115:54">(<expr pos:start="113:13" pos:end="115:53"><operator pos:start="113:13" pos:end="113:13">!</operator><call pos:start="113:14" pos:end="115:53"><name pos:start="113:14" pos:end="113:37">virtio_blk_sect_range_ok</name><argument_list pos:start="113:38" pos:end="115:53">(<argument pos:start="113:39" pos:end="113:46"><expr pos:start="113:39" pos:end="113:46"><name pos:start="113:39" pos:end="113:46"><name pos:start="113:39" pos:end="113:41">req</name><operator pos:start="113:42" pos:end="113:43">-&gt;</operator><name pos:start="113:44" pos:end="113:46">dev</name></name></expr></argument>, <argument pos:start="113:49" pos:end="113:63"><expr pos:start="113:49" pos:end="113:63"><name pos:start="113:49" pos:end="113:63"><name pos:start="113:49" pos:end="113:51">req</name><operator pos:start="113:52" pos:end="113:53">-&gt;</operator><name pos:start="113:54" pos:end="113:63">sector_num</name></name></expr></argument>,

                                      <argument pos:start="115:39" pos:end="115:52"><expr pos:start="115:39" pos:end="115:52"><name pos:start="115:39" pos:end="115:52"><name pos:start="115:39" pos:end="115:41">req</name><operator pos:start="115:42" pos:end="115:43">-&gt;</operator><name pos:start="115:44" pos:end="115:47">qiov</name><operator pos:start="115:48" pos:end="115:48">.</operator><name pos:start="115:49" pos:end="115:52">size</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="115:56" pos:end="123:9">{<block_content pos:start="117:13" pos:end="121:19">

            <expr_stmt pos:start="117:13" pos:end="117:61"><expr pos:start="117:13" pos:end="117:60"><call pos:start="117:13" pos:end="117:60"><name pos:start="117:13" pos:end="117:35">virtio_blk_req_complete</name><argument_list pos:start="117:36" pos:end="117:60">(<argument pos:start="117:37" pos:end="117:39"><expr pos:start="117:37" pos:end="117:39"><name pos:start="117:37" pos:end="117:39">req</name></expr></argument>, <argument pos:start="117:42" pos:end="117:59"><expr pos:start="117:42" pos:end="117:59"><name pos:start="117:42" pos:end="117:59">VIRTIO_BLK_S_IOERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:41"><expr pos:start="119:13" pos:end="119:40"><call pos:start="119:13" pos:end="119:40"><name pos:start="119:13" pos:end="119:35">virtio_blk_free_request</name><argument_list pos:start="119:36" pos:end="119:40">(<argument pos:start="119:37" pos:end="119:39"><expr pos:start="119:37" pos:end="119:39"><name pos:start="119:37" pos:end="119:39">req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="121:13" pos:end="121:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="127:9" pos:end="131:72"><expr pos:start="127:9" pos:end="131:71"><call pos:start="127:9" pos:end="131:71"><name pos:start="127:9" pos:end="127:24">block_acct_start</name><argument_list pos:start="127:25" pos:end="131:71">(<argument pos:start="127:26" pos:end="127:53"><expr pos:start="127:26" pos:end="127:53"><call pos:start="127:26" pos:end="127:53"><name pos:start="127:26" pos:end="127:38">blk_get_stats</name><argument_list pos:start="127:39" pos:end="127:53">(<argument pos:start="127:40" pos:end="127:52"><expr pos:start="127:40" pos:end="127:52"><name pos:start="127:40" pos:end="127:52"><name pos:start="127:40" pos:end="127:42">req</name><operator pos:start="127:43" pos:end="127:44">-&gt;</operator><name pos:start="127:45" pos:end="127:47">dev</name><operator pos:start="127:48" pos:end="127:49">-&gt;</operator><name pos:start="127:50" pos:end="127:52">blk</name></name></expr></argument>)</argument_list></call></expr></argument>,

                         <argument pos:start="129:26" pos:end="129:35"><expr pos:start="129:26" pos:end="129:35"><operator pos:start="129:26" pos:end="129:26">&amp;</operator><name pos:start="129:27" pos:end="129:35"><name pos:start="129:27" pos:end="129:29">req</name><operator pos:start="129:30" pos:end="129:31">-&gt;</operator><name pos:start="129:32" pos:end="129:35">acct</name></name></expr></argument>, <argument pos:start="129:38" pos:end="129:51"><expr pos:start="129:38" pos:end="129:51"><name pos:start="129:38" pos:end="129:51"><name pos:start="129:38" pos:end="129:40">req</name><operator pos:start="129:41" pos:end="129:42">-&gt;</operator><name pos:start="129:43" pos:end="129:46">qiov</name><operator pos:start="129:47" pos:end="129:47">.</operator><name pos:start="129:48" pos:end="129:51">size</name></name></expr></argument>,

                         <argument pos:start="131:26" pos:end="131:70"><expr pos:start="131:26" pos:end="131:70"><ternary pos:start="131:26" pos:end="131:70"><condition pos:start="131:26" pos:end="131:35"><expr pos:start="131:26" pos:end="131:33"><name pos:start="131:26" pos:end="131:33">is_write</name></expr> ?</condition><then pos:start="131:37" pos:end="131:52"> <expr pos:start="131:37" pos:end="131:52"><name pos:start="131:37" pos:end="131:52">BLOCK_ACCT_WRITE</name></expr> </then><else pos:start="131:54" pos:end="131:70">: <expr pos:start="131:56" pos:end="131:70"><name pos:start="131:56" pos:end="131:70">BLOCK_ACCT_READ</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="135:9" pos:end="137:21">/* merge would exceed maximum number of requests or IO direction

         * changes */</comment>

        <if_stmt pos:start="139:9" pos:end="147:9"><if pos:start="139:9" pos:end="147:9">if <condition pos:start="139:12" pos:end="143:67">(<expr pos:start="139:13" pos:end="143:66"><name pos:start="139:13" pos:end="139:25"><name pos:start="139:13" pos:end="139:15">mrb</name><operator pos:start="139:16" pos:end="139:17">-&gt;</operator><name pos:start="139:18" pos:end="139:25">num_reqs</name></name> <operator pos:start="139:27" pos:end="139:27">&gt;</operator> <literal type="number" pos:start="139:29" pos:end="139:29">0</literal> <operator pos:start="139:31" pos:end="139:32">&amp;&amp;</operator> <operator pos:start="139:34" pos:end="139:34">(</operator><name pos:start="139:35" pos:end="139:47"><name pos:start="139:35" pos:end="139:37">mrb</name><operator pos:start="139:38" pos:end="139:39">-&gt;</operator><name pos:start="139:40" pos:end="139:47">num_reqs</name></name> <operator pos:start="139:49" pos:end="139:50">==</operator> <name pos:start="139:52" pos:end="139:76">VIRTIO_BLK_MAX_MERGE_REQS</name> <operator pos:start="139:78" pos:end="139:79">||</operator>

                                  <name pos:start="141:35" pos:end="141:42">is_write</name> <operator pos:start="141:44" pos:end="141:45">!=</operator> <name pos:start="141:47" pos:end="141:59"><name pos:start="141:47" pos:end="141:49">mrb</name><operator pos:start="141:50" pos:end="141:51">-&gt;</operator><name pos:start="141:52" pos:end="141:59">is_write</name></name> <operator pos:start="141:61" pos:end="141:62">||</operator>

                                  <operator pos:start="143:35" pos:end="143:35">!</operator><name pos:start="143:36" pos:end="143:65"><name pos:start="143:36" pos:end="143:38">req</name><operator pos:start="143:39" pos:end="143:40">-&gt;</operator><name pos:start="143:41" pos:end="143:43">dev</name><operator pos:start="143:44" pos:end="143:45">-&gt;</operator><name pos:start="143:46" pos:end="143:49">conf</name><operator pos:start="143:50" pos:end="143:50">.</operator><name pos:start="143:51" pos:end="143:65">request_merging</name></name><operator pos:start="143:66" pos:end="143:66">)</operator></expr>)</condition> <block pos:start="143:69" pos:end="147:9">{<block_content pos:start="145:13" pos:end="145:59">

            <expr_stmt pos:start="145:13" pos:end="145:59"><expr pos:start="145:13" pos:end="145:58"><call pos:start="145:13" pos:end="145:58"><name pos:start="145:13" pos:end="145:38">virtio_blk_submit_multireq</name><argument_list pos:start="145:39" pos:end="145:58">(<argument pos:start="145:40" pos:end="145:52"><expr pos:start="145:40" pos:end="145:52"><name pos:start="145:40" pos:end="145:52"><name pos:start="145:40" pos:end="145:42">req</name><operator pos:start="145:43" pos:end="145:44">-&gt;</operator><name pos:start="145:45" pos:end="145:47">dev</name><operator pos:start="145:48" pos:end="145:49">-&gt;</operator><name pos:start="145:50" pos:end="145:52">blk</name></name></expr></argument>, <argument pos:start="145:55" pos:end="145:57"><expr pos:start="145:55" pos:end="145:57"><name pos:start="145:55" pos:end="145:57">mrb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="151:9" pos:end="151:58"><expr pos:start="151:9" pos:end="151:57"><call pos:start="151:9" pos:end="151:57"><name pos:start="151:9" pos:end="151:14">assert</name><argument_list pos:start="151:15" pos:end="151:57">(<argument pos:start="151:16" pos:end="151:56"><expr pos:start="151:16" pos:end="151:56"><name pos:start="151:16" pos:end="151:28"><name pos:start="151:16" pos:end="151:18">mrb</name><operator pos:start="151:19" pos:end="151:20">-&gt;</operator><name pos:start="151:21" pos:end="151:28">num_reqs</name></name> <operator pos:start="151:30" pos:end="151:30">&lt;</operator> <name pos:start="151:32" pos:end="151:56">VIRTIO_BLK_MAX_MERGE_REQS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:41"><expr pos:start="153:9" pos:end="153:40"><name pos:start="153:9" pos:end="153:34"><name pos:start="153:9" pos:end="153:11">mrb</name><operator pos:start="153:12" pos:end="153:13">-&gt;</operator><name pos:start="153:14" pos:end="153:17">reqs</name><index pos:start="153:18" pos:end="153:34">[<expr pos:start="153:19" pos:end="153:33"><name pos:start="153:19" pos:end="153:31"><name pos:start="153:19" pos:end="153:21">mrb</name><operator pos:start="153:22" pos:end="153:23">-&gt;</operator><name pos:start="153:24" pos:end="153:31">num_reqs</name></name><operator pos:start="153:32" pos:end="153:33">++</operator></expr>]</index></name> <operator pos:start="153:36" pos:end="153:36">=</operator> <name pos:start="153:38" pos:end="153:40">req</name></expr>;</expr_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:33"><expr pos:start="155:9" pos:end="155:32"><name pos:start="155:9" pos:end="155:21"><name pos:start="155:9" pos:end="155:11">mrb</name><operator pos:start="155:12" pos:end="155:13">-&gt;</operator><name pos:start="155:14" pos:end="155:21">is_write</name></name> <operator pos:start="155:23" pos:end="155:23">=</operator> <name pos:start="155:25" pos:end="155:32">is_write</name></expr>;</expr_stmt>

        <break pos:start="157:9" pos:end="157:14">break;</break>

    </block_content>}</block>

    <case pos:start="161:5" pos:end="161:28">case <expr pos:start="161:10" pos:end="161:27"><name pos:start="161:10" pos:end="161:27">VIRTIO_BLK_T_FLUSH</name></expr>:</case>

        <expr_stmt pos:start="163:9" pos:end="163:42"><expr pos:start="163:9" pos:end="163:41"><call pos:start="163:9" pos:end="163:41"><name pos:start="163:9" pos:end="163:31">virtio_blk_handle_flush</name><argument_list pos:start="163:32" pos:end="163:41">(<argument pos:start="163:33" pos:end="163:35"><expr pos:start="163:33" pos:end="163:35"><name pos:start="163:33" pos:end="163:35">req</name></expr></argument>, <argument pos:start="163:38" pos:end="163:40"><expr pos:start="163:38" pos:end="163:40"><name pos:start="163:38" pos:end="163:40">mrb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="165:9" pos:end="165:14">break;</break>

    <case pos:start="167:5" pos:end="167:31">case <expr pos:start="167:10" pos:end="167:30"><name pos:start="167:10" pos:end="167:30">VIRTIO_BLK_T_SCSI_CMD</name></expr>:</case>

        <expr_stmt pos:start="169:9" pos:end="169:36"><expr pos:start="169:9" pos:end="169:35"><call pos:start="169:9" pos:end="169:35"><name pos:start="169:9" pos:end="169:30">virtio_blk_handle_scsi</name><argument_list pos:start="169:31" pos:end="169:35">(<argument pos:start="169:32" pos:end="169:34"><expr pos:start="169:32" pos:end="169:34"><name pos:start="169:32" pos:end="169:34">req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="171:9" pos:end="171:14">break;</break>

    <case pos:start="173:5" pos:end="173:29">case <expr pos:start="173:10" pos:end="173:28"><name pos:start="173:10" pos:end="173:28">VIRTIO_BLK_T_GET_ID</name></expr>:</case>

    <block pos:start="175:5" pos:end="205:5">{<block_content pos:start="177:9" pos:end="203:14">

        <decl_stmt pos:start="177:9" pos:end="177:34"><decl pos:start="177:9" pos:end="177:33"><type pos:start="177:9" pos:end="177:21"><name pos:start="177:9" pos:end="177:19">VirtIOBlock</name> <modifier pos:start="177:21" pos:end="177:21">*</modifier></type><name pos:start="177:22" pos:end="177:22">s</name> <init pos:start="177:24" pos:end="177:33">= <expr pos:start="177:26" pos:end="177:33"><name pos:start="177:26" pos:end="177:33"><name pos:start="177:26" pos:end="177:28">req</name><operator pos:start="177:29" pos:end="177:30">-&gt;</operator><name pos:start="177:31" pos:end="177:33">dev</name></name></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="181:9" pos:end="187:11">/*

         * NB: per existing s/n string convention the string is

         * terminated by '\0' only when shorter than buffer.

         */</comment>

        <decl_stmt pos:start="189:9" pos:end="189:66"><decl pos:start="189:9" pos:end="189:65"><type pos:start="189:9" pos:end="189:20"><specifier pos:start="189:9" pos:end="189:13">const</specifier> <name pos:start="189:15" pos:end="189:18">char</name> <modifier pos:start="189:20" pos:end="189:20">*</modifier></type><name pos:start="189:21" pos:end="189:26">serial</name> <init pos:start="189:28" pos:end="189:65">= <expr pos:start="189:30" pos:end="189:65"><ternary pos:start="189:30" pos:end="189:65"><condition pos:start="189:30" pos:end="189:45"><expr pos:start="189:30" pos:end="189:43"><name pos:start="189:30" pos:end="189:43"><name pos:start="189:30" pos:end="189:30">s</name><operator pos:start="189:31" pos:end="189:32">-&gt;</operator><name pos:start="189:33" pos:end="189:36">conf</name><operator pos:start="189:37" pos:end="189:37">.</operator><name pos:start="189:38" pos:end="189:43">serial</name></name></expr> ?</condition><then pos:start="189:47" pos:end="189:60"> <expr pos:start="189:47" pos:end="189:60"><name pos:start="189:47" pos:end="189:60"><name pos:start="189:47" pos:end="189:47">s</name><operator pos:start="189:48" pos:end="189:49">-&gt;</operator><name pos:start="189:50" pos:end="189:53">conf</name><operator pos:start="189:54" pos:end="189:54">.</operator><name pos:start="189:55" pos:end="189:60">serial</name></name></expr> </then><else pos:start="189:62" pos:end="189:65">: <expr pos:start="189:64" pos:end="189:65"><literal type="string" pos:start="189:64" pos:end="189:65">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="191:9" pos:end="195:52"><decl pos:start="191:9" pos:end="195:51"><type pos:start="191:9" pos:end="191:14"><name pos:start="191:9" pos:end="191:14">size_t</name></type> <name pos:start="191:16" pos:end="191:19">size</name> <init pos:start="191:21" pos:end="195:51">= <expr pos:start="191:23" pos:end="195:51"><call pos:start="191:23" pos:end="195:51"><name pos:start="191:23" pos:end="191:25">MIN</name><argument_list pos:start="191:26" pos:end="195:51">(<argument pos:start="191:27" pos:end="191:44"><expr pos:start="191:27" pos:end="191:44"><call pos:start="191:27" pos:end="191:40"><name pos:start="191:27" pos:end="191:32">strlen</name><argument_list pos:start="191:33" pos:end="191:40">(<argument pos:start="191:34" pos:end="191:39"><expr pos:start="191:34" pos:end="191:39"><name pos:start="191:34" pos:end="191:39">serial</name></expr></argument>)</argument_list></call> <operator pos:start="191:42" pos:end="191:42">+</operator> <literal type="number" pos:start="191:44" pos:end="191:44">1</literal></expr></argument>,

                          <argument pos:start="193:27" pos:end="195:50"><expr pos:start="193:27" pos:end="195:50"><call pos:start="193:27" pos:end="195:50"><name pos:start="193:27" pos:end="193:29">MIN</name><argument_list pos:start="193:30" pos:end="195:50">(<argument pos:start="193:31" pos:end="193:54"><expr pos:start="193:31" pos:end="193:54"><call pos:start="193:31" pos:end="193:54"><name pos:start="193:31" pos:end="193:38">iov_size</name><argument_list pos:start="193:39" pos:end="193:54">(<argument pos:start="193:40" pos:end="193:45"><expr pos:start="193:40" pos:end="193:45"><name pos:start="193:40" pos:end="193:45">in_iov</name></expr></argument>, <argument pos:start="193:48" pos:end="193:53"><expr pos:start="193:48" pos:end="193:53"><name pos:start="193:48" pos:end="193:53">in_num</name></expr></argument>)</argument_list></call></expr></argument>,

                              <argument pos:start="195:31" pos:end="195:49"><expr pos:start="195:31" pos:end="195:49"><name pos:start="195:31" pos:end="195:49">VIRTIO_BLK_ID_BYTES</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="197:9" pos:end="197:54"><expr pos:start="197:9" pos:end="197:53"><call pos:start="197:9" pos:end="197:53"><name pos:start="197:9" pos:end="197:20">iov_from_buf</name><argument_list pos:start="197:21" pos:end="197:53">(<argument pos:start="197:22" pos:end="197:27"><expr pos:start="197:22" pos:end="197:27"><name pos:start="197:22" pos:end="197:27">in_iov</name></expr></argument>, <argument pos:start="197:30" pos:end="197:35"><expr pos:start="197:30" pos:end="197:35"><name pos:start="197:30" pos:end="197:35">in_num</name></expr></argument>, <argument pos:start="197:38" pos:end="197:38"><expr pos:start="197:38" pos:end="197:38"><literal type="number" pos:start="197:38" pos:end="197:38">0</literal></expr></argument>, <argument pos:start="197:41" pos:end="197:46"><expr pos:start="197:41" pos:end="197:46"><name pos:start="197:41" pos:end="197:46">serial</name></expr></argument>, <argument pos:start="197:49" pos:end="197:52"><expr pos:start="197:49" pos:end="197:52"><name pos:start="197:49" pos:end="197:52">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="199:9" pos:end="199:54"><expr pos:start="199:9" pos:end="199:53"><call pos:start="199:9" pos:end="199:53"><name pos:start="199:9" pos:end="199:31">virtio_blk_req_complete</name><argument_list pos:start="199:32" pos:end="199:53">(<argument pos:start="199:33" pos:end="199:35"><expr pos:start="199:33" pos:end="199:35"><name pos:start="199:33" pos:end="199:35">req</name></expr></argument>, <argument pos:start="199:38" pos:end="199:52"><expr pos:start="199:38" pos:end="199:52"><name pos:start="199:38" pos:end="199:52">VIRTIO_BLK_S_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="201:9" pos:end="201:37"><expr pos:start="201:9" pos:end="201:36"><call pos:start="201:9" pos:end="201:36"><name pos:start="201:9" pos:end="201:31">virtio_blk_free_request</name><argument_list pos:start="201:32" pos:end="201:36">(<argument pos:start="201:33" pos:end="201:35"><expr pos:start="201:33" pos:end="201:35"><name pos:start="201:33" pos:end="201:35">req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="203:9" pos:end="203:14">break;</break>

    </block_content>}</block>

    <default pos:start="207:5" pos:end="207:12">default:</default>

        <expr_stmt pos:start="209:9" pos:end="209:58"><expr pos:start="209:9" pos:end="209:57"><call pos:start="209:9" pos:end="209:57"><name pos:start="209:9" pos:end="209:31">virtio_blk_req_complete</name><argument_list pos:start="209:32" pos:end="209:57">(<argument pos:start="209:33" pos:end="209:35"><expr pos:start="209:33" pos:end="209:35"><name pos:start="209:33" pos:end="209:35">req</name></expr></argument>, <argument pos:start="209:38" pos:end="209:56"><expr pos:start="209:38" pos:end="209:56"><name pos:start="209:38" pos:end="209:56">VIRTIO_BLK_S_UNSUPP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="211:9" pos:end="211:37"><expr pos:start="211:9" pos:end="211:36"><call pos:start="211:9" pos:end="211:36"><name pos:start="211:9" pos:end="211:31">virtio_blk_free_request</name><argument_list pos:start="211:32" pos:end="211:36">(<argument pos:start="211:33" pos:end="211:35"><expr pos:start="211:33" pos:end="211:35"><name pos:start="211:33" pos:end="211:35">req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
