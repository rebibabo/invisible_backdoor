<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9631.c" pos:tabs="8"><function pos:start="1:1" pos:end="109:1"><type pos:start="1:1" pos:end="1:17"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:17">ExitStatus</name></type> <name pos:start="1:19" pos:end="1:39">gen_store_conditional</name><parameter_list pos:start="1:40" pos:end="3:65">(<parameter pos:start="1:41" pos:end="1:57"><decl pos:start="1:41" pos:end="1:57"><type pos:start="1:41" pos:end="1:57"><name pos:start="1:41" pos:end="1:52">DisasContext</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:57">ctx</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:65"><decl pos:start="1:60" pos:end="1:65"><type pos:start="1:60" pos:end="1:65"><name pos:start="1:60" pos:end="1:62">int</name></type> <name pos:start="1:64" pos:end="1:65">ra</name></decl></parameter>, <parameter pos:start="1:68" pos:end="1:73"><decl pos:start="1:68" pos:end="1:73"><type pos:start="1:68" pos:end="1:73"><name pos:start="1:68" pos:end="1:70">int</name></type> <name pos:start="1:72" pos:end="1:73">rb</name></decl></parameter>,

                                        <parameter pos:start="3:41" pos:end="3:54"><decl pos:start="3:41" pos:end="3:54"><type pos:start="3:41" pos:end="3:54"><name pos:start="3:41" pos:end="3:47">int32_t</name></type> <name pos:start="3:49" pos:end="3:54">disp16</name></decl></parameter>, <parameter pos:start="3:57" pos:end="3:64"><decl pos:start="3:57" pos:end="3:64"><type pos:start="3:57" pos:end="3:64"><name pos:start="3:57" pos:end="3:59">int</name></type> <name pos:start="3:61" pos:end="3:64">quad</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="109:1">{<block_content pos:start="7:5" pos:end="108:0">

    <decl_stmt pos:start="7:5" pos:end="7:14"><decl pos:start="7:5" pos:end="7:13"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">TCGv</name></type> <name pos:start="7:10" pos:end="7:13">addr</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="24:0"><if pos:start="11:5" pos:end="24:0">if <condition pos:start="11:8" pos:end="11:17">(<expr pos:start="11:9" pos:end="11:16"><name pos:start="11:9" pos:end="11:10">ra</name> <operator pos:start="11:12" pos:end="11:13">==</operator> <literal type="number" pos:start="11:15" pos:end="11:16">31</literal></expr>)</condition> <block pos:start="11:19" pos:end="24:0">{<block_content pos:start="17:9" pos:end="17:23">

        <comment type="block" pos:start="13:9" pos:end="15:73">/* ??? Don't bother storing anything.  The user can't tell

           the difference, since the zero register always reads zero.  */</comment>

        <return pos:start="17:9" pos:end="17:23">return <expr pos:start="17:16" pos:end="17:22"><name pos:start="17:16" pos:end="17:22">NO_EXIT</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



<cpp:if pos:start="23:1" pos:end="23:29">#<cpp:directive pos:start="23:2" pos:end="23:3">if</cpp:directive> <expr pos:start="23:5" pos:end="23:29"><call pos:start="23:5" pos:end="23:29"><name pos:start="23:5" pos:end="23:11">defined</name><argument_list pos:start="23:12" pos:end="23:29">(<argument pos:start="23:13" pos:end="23:28"><expr pos:start="23:13" pos:end="23:28"><name pos:start="23:13" pos:end="23:28">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="25:5" pos:end="28:0"><expr pos:start="25:5" pos:end="25:27"><name pos:start="25:5" pos:end="25:8">addr</name> <operator pos:start="25:10" pos:end="25:10">=</operator> <name pos:start="25:12" pos:end="25:27">cpu_lock_st_addr</name></expr>;</expr_stmt>

<cpp:else pos:start="27:1" pos:end="27:5">#<cpp:directive pos:start="27:2" pos:end="27:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="29:5" pos:end="32:0"><expr pos:start="29:5" pos:end="29:31"><name pos:start="29:5" pos:end="29:8">addr</name> <operator pos:start="29:10" pos:end="29:10">=</operator> <call pos:start="29:12" pos:end="29:31"><name pos:start="29:12" pos:end="29:29">tcg_temp_local_new</name><argument_list pos:start="29:30" pos:end="29:31">()</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="31:1" pos:end="31:6">#<cpp:directive pos:start="31:2" pos:end="31:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="35:5" pos:end="40:0"><expr pos:start="35:5" pos:end="35:53"><call pos:start="35:5" pos:end="35:53"><name pos:start="35:5" pos:end="35:20">tcg_gen_addi_i64</name><argument_list pos:start="35:21" pos:end="35:53">(<argument pos:start="35:22" pos:end="35:25"><expr pos:start="35:22" pos:end="35:25"><name pos:start="35:22" pos:end="35:25">addr</name></expr></argument>, <argument pos:start="35:28" pos:end="35:44"><expr pos:start="35:28" pos:end="35:44"><call pos:start="35:28" pos:end="35:44"><name pos:start="35:28" pos:end="35:35">load_gpr</name><argument_list pos:start="35:36" pos:end="35:44">(<argument pos:start="35:37" pos:end="35:39"><expr pos:start="35:37" pos:end="35:39"><name pos:start="35:37" pos:end="35:39">ctx</name></expr></argument>, <argument pos:start="35:42" pos:end="35:43"><expr pos:start="35:42" pos:end="35:43"><name pos:start="35:42" pos:end="35:43">rb</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="35:47" pos:end="35:52"><expr pos:start="35:47" pos:end="35:52"><name pos:start="35:47" pos:end="35:52">disp16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:if pos:start="39:1" pos:end="39:29">#<cpp:directive pos:start="39:2" pos:end="39:3">if</cpp:directive> <expr pos:start="39:5" pos:end="39:29"><call pos:start="39:5" pos:end="39:29"><name pos:start="39:5" pos:end="39:11">defined</name><argument_list pos:start="39:12" pos:end="39:29">(<argument pos:start="39:13" pos:end="39:28"><expr pos:start="39:13" pos:end="39:28"><name pos:start="39:13" pos:end="39:28">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <comment type="block" pos:start="41:5" pos:end="45:47">/* ??? This is handled via a complicated version of compare-and-swap

       in the cpu_loop.  Hopefully one day we'll have a real CAS opcode

       in TCG so that this isn't necessary.  */</comment>

    <return pos:start="47:5" pos:end="50:0">return <expr pos:start="47:12" pos:end="47:60"><call pos:start="47:12" pos:end="47:60"><name pos:start="47:12" pos:end="47:19">gen_excp</name><argument_list pos:start="47:20" pos:end="47:60">(<argument pos:start="47:21" pos:end="47:23"><expr pos:start="47:21" pos:end="47:23"><name pos:start="47:21" pos:end="47:23">ctx</name></expr></argument>, <argument pos:start="47:26" pos:end="47:55"><expr pos:start="47:26" pos:end="47:55"><ternary pos:start="47:26" pos:end="47:55"><condition pos:start="47:26" pos:end="47:31"><expr pos:start="47:26" pos:end="47:29"><name pos:start="47:26" pos:end="47:29">quad</name></expr> ?</condition><then pos:start="47:33" pos:end="47:42"> <expr pos:start="47:33" pos:end="47:42"><name pos:start="47:33" pos:end="47:42">EXCP_STQ_C</name></expr> </then><else pos:start="47:44" pos:end="47:55">: <expr pos:start="47:46" pos:end="47:55"><name pos:start="47:46" pos:end="47:55">EXCP_STL_C</name></expr></else></ternary></expr></argument>, <argument pos:start="47:58" pos:end="47:59"><expr pos:start="47:58" pos:end="47:59"><name pos:start="47:58" pos:end="47:59">ra</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else pos:start="49:1" pos:end="49:5">#<cpp:directive pos:start="49:2" pos:end="49:5">else</cpp:directive></cpp:else>

    <comment type="block" pos:start="51:5" pos:end="53:68">/* ??? In system mode we are never multi-threaded, so CAS can be

       implemented via a non-atomic load-compare-store sequence.  */</comment>

    <block pos:start="55:5" pos:end="108:0">{<block_content pos:start="57:9" pos:end="103:23">

        <decl_stmt pos:start="57:9" pos:end="57:31"><decl pos:start="57:9" pos:end="57:20"><type pos:start="57:9" pos:end="57:11"><name pos:start="57:9" pos:end="57:11">int</name></type> <name pos:start="57:13" pos:end="57:20">lab_fail</name></decl>, <decl pos:start="57:23" pos:end="57:30"><type ref="prev" pos:start="57:9" pos:end="57:11"/><name pos:start="57:23" pos:end="57:30">lab_done</name></decl>;</decl_stmt>

        <decl_stmt pos:start="59:9" pos:end="59:17"><decl pos:start="59:9" pos:end="59:16"><type pos:start="59:9" pos:end="59:12"><name pos:start="59:9" pos:end="59:12">TCGv</name></type> <name pos:start="59:14" pos:end="59:16">val</name></decl>;</decl_stmt>



        <expr_stmt pos:start="63:9" pos:end="63:35"><expr pos:start="63:9" pos:end="63:34"><name pos:start="63:9" pos:end="63:16">lab_fail</name> <operator pos:start="63:18" pos:end="63:18">=</operator> <call pos:start="63:20" pos:end="63:34"><name pos:start="63:20" pos:end="63:32">gen_new_label</name><argument_list pos:start="63:33" pos:end="63:34">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:35"><expr pos:start="65:9" pos:end="65:34"><name pos:start="65:9" pos:end="65:16">lab_done</name> <operator pos:start="65:18" pos:end="65:18">=</operator> <call pos:start="65:20" pos:end="65:34"><name pos:start="65:20" pos:end="65:32">gen_new_label</name><argument_list pos:start="65:33" pos:end="65:34">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:71"><expr pos:start="67:9" pos:end="67:70"><call pos:start="67:9" pos:end="67:70"><name pos:start="67:9" pos:end="67:26">tcg_gen_brcond_i64</name><argument_list pos:start="67:27" pos:end="67:70">(<argument pos:start="67:28" pos:end="67:38"><expr pos:start="67:28" pos:end="67:38"><name pos:start="67:28" pos:end="67:38">TCG_COND_NE</name></expr></argument>, <argument pos:start="67:41" pos:end="67:44"><expr pos:start="67:41" pos:end="67:44"><name pos:start="67:41" pos:end="67:44">addr</name></expr></argument>, <argument pos:start="67:47" pos:end="67:59"><expr pos:start="67:47" pos:end="67:59"><name pos:start="67:47" pos:end="67:59">cpu_lock_addr</name></expr></argument>, <argument pos:start="67:62" pos:end="67:69"><expr pos:start="67:62" pos:end="67:69"><name pos:start="67:62" pos:end="67:69">lab_fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="71:9" pos:end="71:29"><expr pos:start="71:9" pos:end="71:28"><name pos:start="71:9" pos:end="71:11">val</name> <operator pos:start="71:13" pos:end="71:13">=</operator> <call pos:start="71:15" pos:end="71:28"><name pos:start="71:15" pos:end="71:26">tcg_temp_new</name><argument_list pos:start="71:27" pos:end="71:28">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:78"><expr pos:start="73:9" pos:end="73:77"><call pos:start="73:9" pos:end="73:77"><name pos:start="73:9" pos:end="73:27">tcg_gen_qemu_ld_i64</name><argument_list pos:start="73:28" pos:end="73:77">(<argument pos:start="73:29" pos:end="73:31"><expr pos:start="73:29" pos:end="73:31"><name pos:start="73:29" pos:end="73:31">val</name></expr></argument>, <argument pos:start="73:34" pos:end="73:37"><expr pos:start="73:34" pos:end="73:37"><name pos:start="73:34" pos:end="73:37">addr</name></expr></argument>, <argument pos:start="73:40" pos:end="73:51"><expr pos:start="73:40" pos:end="73:51"><name pos:start="73:40" pos:end="73:51"><name pos:start="73:40" pos:end="73:42">ctx</name><operator pos:start="73:43" pos:end="73:44">-&gt;</operator><name pos:start="73:45" pos:end="73:51">mem_idx</name></name></expr></argument>, <argument pos:start="73:54" pos:end="73:76"><expr pos:start="73:54" pos:end="73:76"><ternary pos:start="73:54" pos:end="73:76"><condition pos:start="73:54" pos:end="73:59"><expr pos:start="73:54" pos:end="73:57"><name pos:start="73:54" pos:end="73:57">quad</name></expr> ?</condition><then pos:start="73:61" pos:end="73:66"> <expr pos:start="73:61" pos:end="73:66"><name pos:start="73:61" pos:end="73:66">MO_LEQ</name></expr> </then><else pos:start="73:68" pos:end="73:76">: <expr pos:start="73:70" pos:end="73:76"><name pos:start="73:70" pos:end="73:76">MO_LESL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:71"><expr pos:start="75:9" pos:end="75:70"><call pos:start="75:9" pos:end="75:70"><name pos:start="75:9" pos:end="75:26">tcg_gen_brcond_i64</name><argument_list pos:start="75:27" pos:end="75:70">(<argument pos:start="75:28" pos:end="75:38"><expr pos:start="75:28" pos:end="75:38"><name pos:start="75:28" pos:end="75:38">TCG_COND_NE</name></expr></argument>, <argument pos:start="75:41" pos:end="75:43"><expr pos:start="75:41" pos:end="75:43"><name pos:start="75:41" pos:end="75:43">val</name></expr></argument>, <argument pos:start="75:46" pos:end="75:59"><expr pos:start="75:46" pos:end="75:59"><name pos:start="75:46" pos:end="75:59">cpu_lock_value</name></expr></argument>, <argument pos:start="75:62" pos:end="75:69"><expr pos:start="75:62" pos:end="75:69"><name pos:start="75:62" pos:end="75:69">lab_fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="79:9" pos:end="81:53"><expr pos:start="79:9" pos:end="81:52"><call pos:start="79:9" pos:end="81:52"><name pos:start="79:9" pos:end="79:27">tcg_gen_qemu_st_i64</name><argument_list pos:start="79:28" pos:end="81:52">(<argument pos:start="79:29" pos:end="79:38"><expr pos:start="79:29" pos:end="79:38"><name pos:start="79:29" pos:end="79:38"><name pos:start="79:29" pos:end="79:34">cpu_ir</name><index pos:start="79:35" pos:end="79:38">[<expr pos:start="79:36" pos:end="79:37"><name pos:start="79:36" pos:end="79:37">ra</name></expr>]</index></name></expr></argument>, <argument pos:start="79:41" pos:end="79:44"><expr pos:start="79:41" pos:end="79:44"><name pos:start="79:41" pos:end="79:44">addr</name></expr></argument>, <argument pos:start="79:47" pos:end="79:58"><expr pos:start="79:47" pos:end="79:58"><name pos:start="79:47" pos:end="79:58"><name pos:start="79:47" pos:end="79:49">ctx</name><operator pos:start="79:50" pos:end="79:51">-&gt;</operator><name pos:start="79:52" pos:end="79:58">mem_idx</name></name></expr></argument>,

                            <argument pos:start="81:29" pos:end="81:51"><expr pos:start="81:29" pos:end="81:51"><ternary pos:start="81:29" pos:end="81:51"><condition pos:start="81:29" pos:end="81:34"><expr pos:start="81:29" pos:end="81:32"><name pos:start="81:29" pos:end="81:32">quad</name></expr> ?</condition><then pos:start="81:36" pos:end="81:41"> <expr pos:start="81:36" pos:end="81:41"><name pos:start="81:36" pos:end="81:41">MO_LEQ</name></expr> </then><else pos:start="81:43" pos:end="81:51">: <expr pos:start="81:45" pos:end="81:51"><name pos:start="81:45" pos:end="81:51">MO_LEUL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:40"><expr pos:start="83:9" pos:end="83:39"><call pos:start="83:9" pos:end="83:39"><name pos:start="83:9" pos:end="83:24">tcg_gen_movi_i64</name><argument_list pos:start="83:25" pos:end="83:39">(<argument pos:start="83:26" pos:end="83:35"><expr pos:start="83:26" pos:end="83:35"><name pos:start="83:26" pos:end="83:35"><name pos:start="83:26" pos:end="83:31">cpu_ir</name><index pos:start="83:32" pos:end="83:35">[<expr pos:start="83:33" pos:end="83:34"><name pos:start="83:33" pos:end="83:34">ra</name></expr>]</index></name></expr></argument>, <argument pos:start="83:38" pos:end="83:38"><expr pos:start="83:38" pos:end="83:38"><literal type="number" pos:start="83:38" pos:end="83:38">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:29"><expr pos:start="85:9" pos:end="85:28"><call pos:start="85:9" pos:end="85:28"><name pos:start="85:9" pos:end="85:18">tcg_gen_br</name><argument_list pos:start="85:19" pos:end="85:28">(<argument pos:start="85:20" pos:end="85:27"><expr pos:start="85:20" pos:end="85:27"><name pos:start="85:20" pos:end="85:27">lab_done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="89:9" pos:end="89:32"><expr pos:start="89:9" pos:end="89:31"><call pos:start="89:9" pos:end="89:31"><name pos:start="89:9" pos:end="89:21">gen_set_label</name><argument_list pos:start="89:22" pos:end="89:31">(<argument pos:start="89:23" pos:end="89:30"><expr pos:start="89:23" pos:end="89:30"><name pos:start="89:23" pos:end="89:30">lab_fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:40"><expr pos:start="91:9" pos:end="91:39"><call pos:start="91:9" pos:end="91:39"><name pos:start="91:9" pos:end="91:24">tcg_gen_movi_i64</name><argument_list pos:start="91:25" pos:end="91:39">(<argument pos:start="91:26" pos:end="91:35"><expr pos:start="91:26" pos:end="91:35"><name pos:start="91:26" pos:end="91:35"><name pos:start="91:26" pos:end="91:31">cpu_ir</name><index pos:start="91:32" pos:end="91:35">[<expr pos:start="91:33" pos:end="91:34"><name pos:start="91:33" pos:end="91:34">ra</name></expr>]</index></name></expr></argument>, <argument pos:start="91:38" pos:end="91:38"><expr pos:start="91:38" pos:end="91:38"><literal type="number" pos:start="91:38" pos:end="91:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="95:9" pos:end="95:32"><expr pos:start="95:9" pos:end="95:31"><call pos:start="95:9" pos:end="95:31"><name pos:start="95:9" pos:end="95:21">gen_set_label</name><argument_list pos:start="95:22" pos:end="95:31">(<argument pos:start="95:23" pos:end="95:30"><expr pos:start="95:23" pos:end="95:30"><name pos:start="95:23" pos:end="95:30">lab_done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:44"><expr pos:start="97:9" pos:end="97:43"><call pos:start="97:9" pos:end="97:43"><name pos:start="97:9" pos:end="97:24">tcg_gen_movi_i64</name><argument_list pos:start="97:25" pos:end="97:43">(<argument pos:start="97:26" pos:end="97:38"><expr pos:start="97:26" pos:end="97:38"><name pos:start="97:26" pos:end="97:38">cpu_lock_addr</name></expr></argument>, <argument pos:start="97:41" pos:end="97:42"><expr pos:start="97:41" pos:end="97:42"><operator pos:start="97:41" pos:end="97:41">-</operator><literal type="number" pos:start="97:42" pos:end="97:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="101:9" pos:end="101:28"><expr pos:start="101:9" pos:end="101:27"><call pos:start="101:9" pos:end="101:27"><name pos:start="101:9" pos:end="101:21">tcg_temp_free</name><argument_list pos:start="101:22" pos:end="101:27">(<argument pos:start="101:23" pos:end="101:26"><expr pos:start="101:23" pos:end="101:26"><name pos:start="101:23" pos:end="101:26">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="103:9" pos:end="103:23">return <expr pos:start="103:16" pos:end="103:22"><name pos:start="103:16" pos:end="103:22">NO_EXIT</name></expr>;</return>

    </block_content>}</block>

<cpp:endif pos:start="107:1" pos:end="107:6">#<cpp:directive pos:start="107:2" pos:end="107:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
