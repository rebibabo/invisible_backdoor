<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25.c" pos:tabs="8"><function pos:start="1:1" pos:end="167:13"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">virtio_gpu_load</name><parameter_list pos:start="1:27" pos:end="1:66">(<parameter pos:start="1:28" pos:end="1:38"><decl pos:start="1:28" pos:end="1:38"><type pos:start="1:28" pos:end="1:38"><name pos:start="1:28" pos:end="1:35">QEMUFile</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:38">f</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:52"><decl pos:start="1:41" pos:end="1:52"><type pos:start="1:41" pos:end="1:52"><name pos:start="1:41" pos:end="1:44">void</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:52">opaque</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:65"><decl pos:start="1:55" pos:end="1:65"><type pos:start="1:55" pos:end="1:65"><name pos:start="1:55" pos:end="1:60">size_t</name></type> <name pos:start="1:62" pos:end="1:65">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="167:13">{<block_content pos:start="5:5" pos:end="167:13">

    <decl_stmt pos:start="5:5" pos:end="5:26"><decl pos:start="5:5" pos:end="5:25"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">VirtIOGPU</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:16">g</name> <init pos:start="5:18" pos:end="5:25">= <expr pos:start="5:20" pos:end="5:25"><name pos:start="5:20" pos:end="5:25">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:43"><decl pos:start="7:5" pos:end="7:42"><type pos:start="7:5" pos:end="7:39"><name pos:start="7:5" pos:end="7:37"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:37">virtio_gpu_simple_resource</name></name> <modifier pos:start="7:39" pos:end="7:39">*</modifier></type><name pos:start="7:40" pos:end="7:42">res</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:39"><decl pos:start="9:5" pos:end="9:38"><type pos:start="9:5" pos:end="9:31"><name pos:start="9:5" pos:end="9:29"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:29">virtio_gpu_scanout</name></name> <modifier pos:start="9:31" pos:end="9:31">*</modifier></type><name pos:start="9:32" pos:end="9:38">scanout</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:34"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:24">resource_id</name></decl>, <decl pos:start="11:27" pos:end="11:33"><type ref="prev" pos:start="11:5" pos:end="11:12"/><name pos:start="11:27" pos:end="11:33">pformat</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:10"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:19"><expr pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:5">g</name><operator pos:start="17:6" pos:end="17:7">-&gt;</operator><name pos:start="17:8" pos:end="17:14">hostmem</name></name> <operator pos:start="17:16" pos:end="17:16">=</operator> <literal type="number" pos:start="17:18" pos:end="17:18">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:35"><expr pos:start="21:5" pos:end="21:34"><name pos:start="21:5" pos:end="21:15">resource_id</name> <operator pos:start="21:17" pos:end="21:17">=</operator> <call pos:start="21:19" pos:end="21:34"><name pos:start="21:19" pos:end="21:31">qemu_get_be32</name><argument_list pos:start="21:32" pos:end="21:34">(<argument pos:start="21:33" pos:end="21:33"><expr pos:start="21:33" pos:end="21:33"><name pos:start="21:33" pos:end="21:33">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while pos:start="23:5" pos:end="167:13">while <condition pos:start="23:11" pos:end="23:28">(<expr pos:start="23:12" pos:end="23:27"><name pos:start="23:12" pos:end="23:22">resource_id</name> <operator pos:start="23:24" pos:end="23:25">!=</operator> <literal type="number" pos:start="23:27" pos:end="23:27">0</literal></expr>)</condition> <block pos:start="23:30" pos:end="167:13">{<block_content pos:start="25:9" pos:end="167:13">

        <expr_stmt pos:start="25:9" pos:end="25:59"><expr pos:start="25:9" pos:end="25:58"><name pos:start="25:9" pos:end="25:11">res</name> <operator pos:start="25:13" pos:end="25:13">=</operator> <call pos:start="25:15" pos:end="25:58"><name pos:start="25:15" pos:end="25:20">g_new0</name><argument_list pos:start="25:21" pos:end="25:58">(<argument pos:start="25:22" pos:end="25:54"><expr pos:start="25:22" pos:end="25:54">struct <name pos:start="25:29" pos:end="25:54">virtio_gpu_simple_resource</name></expr></argument>, <argument pos:start="25:57" pos:end="25:57"><expr pos:start="25:57" pos:end="25:57"><literal type="number" pos:start="25:57" pos:end="25:57">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:39"><expr pos:start="27:9" pos:end="27:38"><name pos:start="27:9" pos:end="27:24"><name pos:start="27:9" pos:end="27:11">res</name><operator pos:start="27:12" pos:end="27:13">-&gt;</operator><name pos:start="27:14" pos:end="27:24">resource_id</name></name> <operator pos:start="27:26" pos:end="27:26">=</operator> <name pos:start="27:28" pos:end="27:38">resource_id</name></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:38"><expr pos:start="29:9" pos:end="29:37"><name pos:start="29:9" pos:end="29:18"><name pos:start="29:9" pos:end="29:11">res</name><operator pos:start="29:12" pos:end="29:13">-&gt;</operator><name pos:start="29:14" pos:end="29:18">width</name></name> <operator pos:start="29:20" pos:end="29:20">=</operator> <call pos:start="29:22" pos:end="29:37"><name pos:start="29:22" pos:end="29:34">qemu_get_be32</name><argument_list pos:start="29:35" pos:end="29:37">(<argument pos:start="29:36" pos:end="29:36"><expr pos:start="29:36" pos:end="29:36"><name pos:start="29:36" pos:end="29:36">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:39"><expr pos:start="31:9" pos:end="31:38"><name pos:start="31:9" pos:end="31:19"><name pos:start="31:9" pos:end="31:11">res</name><operator pos:start="31:12" pos:end="31:13">-&gt;</operator><name pos:start="31:14" pos:end="31:19">height</name></name> <operator pos:start="31:21" pos:end="31:21">=</operator> <call pos:start="31:23" pos:end="31:38"><name pos:start="31:23" pos:end="31:35">qemu_get_be32</name><argument_list pos:start="31:36" pos:end="31:38">(<argument pos:start="31:37" pos:end="31:37"><expr pos:start="31:37" pos:end="31:37"><name pos:start="31:37" pos:end="31:37">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:39"><expr pos:start="33:9" pos:end="33:38"><name pos:start="33:9" pos:end="33:19"><name pos:start="33:9" pos:end="33:11">res</name><operator pos:start="33:12" pos:end="33:13">-&gt;</operator><name pos:start="33:14" pos:end="33:19">format</name></name> <operator pos:start="33:21" pos:end="33:21">=</operator> <call pos:start="33:23" pos:end="33:38"><name pos:start="33:23" pos:end="33:35">qemu_get_be32</name><argument_list pos:start="33:36" pos:end="33:38">(<argument pos:start="33:37" pos:end="33:37"><expr pos:start="33:37" pos:end="33:37"><name pos:start="33:37" pos:end="33:37">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:40"><expr pos:start="35:9" pos:end="35:39"><name pos:start="35:9" pos:end="35:20"><name pos:start="35:9" pos:end="35:11">res</name><operator pos:start="35:12" pos:end="35:13">-&gt;</operator><name pos:start="35:14" pos:end="35:20">iov_cnt</name></name> <operator pos:start="35:22" pos:end="35:22">=</operator> <call pos:start="35:24" pos:end="35:39"><name pos:start="35:24" pos:end="35:36">qemu_get_be32</name><argument_list pos:start="35:37" pos:end="35:39">(<argument pos:start="35:38" pos:end="35:38"><expr pos:start="35:38" pos:end="35:38"><name pos:start="35:38" pos:end="35:38">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="39:9" pos:end="39:22">/* allocate */</comment>

        <expr_stmt pos:start="41:9" pos:end="41:49"><expr pos:start="41:9" pos:end="41:48"><name pos:start="41:9" pos:end="41:15">pformat</name> <operator pos:start="41:17" pos:end="41:17">=</operator> <call pos:start="41:19" pos:end="41:48"><name pos:start="41:19" pos:end="41:35">get_pixman_format</name><argument_list pos:start="41:36" pos:end="41:48">(<argument pos:start="41:37" pos:end="41:47"><expr pos:start="41:37" pos:end="41:47"><name pos:start="41:37" pos:end="41:47"><name pos:start="41:37" pos:end="41:39">res</name><operator pos:start="41:40" pos:end="41:41">-&gt;</operator><name pos:start="41:42" pos:end="41:47">format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="43:9" pos:end="167:13"><if pos:start="43:9" pos:end="167:13">if <condition pos:start="43:12" pos:end="43:21">(<expr pos:start="43:13" pos:end="43:20"><operator pos:start="43:13" pos:end="43:13">!</operator><name pos:start="43:14" pos:end="43:20">pformat</name></expr>)</condition> <block pos:start="43:23" pos:end="167:13">{<block_content pos:start="46:13" pos:end="167:13">


            <return pos:start="46:13" pos:end="46:27">return <expr pos:start="46:20" pos:end="46:26"><operator pos:start="46:20" pos:end="46:20">-</operator><name pos:start="46:21" pos:end="46:26">EINVAL</name></expr>;</return>


        <expr_stmt pos:start="49:9" pos:end="53:55"><expr pos:start="49:9" pos:end="53:54"><name pos:start="49:9" pos:end="49:18"><name pos:start="49:9" pos:end="49:11">res</name><operator pos:start="49:12" pos:end="49:13">-&gt;</operator><name pos:start="49:14" pos:end="49:18">image</name></name> <operator pos:start="49:20" pos:end="49:20">=</operator> <call pos:start="49:22" pos:end="53:54"><name pos:start="49:22" pos:end="49:45">pixman_image_create_bits</name><argument_list pos:start="49:46" pos:end="53:54">(<argument pos:start="49:47" pos:end="49:53"><expr pos:start="49:47" pos:end="49:53"><name pos:start="49:47" pos:end="49:53">pformat</name></expr></argument>,

                                              <argument pos:start="51:47" pos:end="51:56"><expr pos:start="51:47" pos:end="51:56"><name pos:start="51:47" pos:end="51:56"><name pos:start="51:47" pos:end="51:49">res</name><operator pos:start="51:50" pos:end="51:51">-&gt;</operator><name pos:start="51:52" pos:end="51:56">width</name></name></expr></argument>, <argument pos:start="51:59" pos:end="51:69"><expr pos:start="51:59" pos:end="51:69"><name pos:start="51:59" pos:end="51:69"><name pos:start="51:59" pos:end="51:61">res</name><operator pos:start="51:62" pos:end="51:63">-&gt;</operator><name pos:start="51:64" pos:end="51:69">height</name></name></expr></argument>,

                                              <argument pos:start="53:47" pos:end="53:50"><expr pos:start="53:47" pos:end="53:50"><name pos:start="53:47" pos:end="53:50">NULL</name></expr></argument>, <argument pos:start="53:53" pos:end="53:53"><expr pos:start="53:53" pos:end="53:53"><literal type="number" pos:start="53:53" pos:end="53:53">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="55:9" pos:end="167:13"><if pos:start="55:9" pos:end="167:13">if <condition pos:start="55:12" pos:end="55:24">(<expr pos:start="55:13" pos:end="55:23"><operator pos:start="55:13" pos:end="55:13">!</operator><name pos:start="55:14" pos:end="55:23"><name pos:start="55:14" pos:end="55:16">res</name><operator pos:start="55:17" pos:end="55:18">-&gt;</operator><name pos:start="55:19" pos:end="55:23">image</name></name></expr>)</condition> <block pos:start="55:26" pos:end="167:13">{<block_content pos:start="58:13" pos:end="167:13">


            <return pos:start="58:13" pos:end="58:27">return <expr pos:start="58:20" pos:end="58:26"><operator pos:start="58:20" pos:end="58:20">-</operator><name pos:start="58:21" pos:end="58:26">EINVAL</name></expr>;</return>




        <expr_stmt pos:start="63:9" pos:end="63:77"><expr pos:start="63:9" pos:end="63:76"><name pos:start="63:9" pos:end="63:20"><name pos:start="63:9" pos:end="63:11">res</name><operator pos:start="63:12" pos:end="63:13">-&gt;</operator><name pos:start="63:14" pos:end="63:20">hostmem</name></name> <operator pos:start="63:22" pos:end="63:22">=</operator> <call pos:start="63:24" pos:end="63:49"><name pos:start="63:24" pos:end="63:40">PIXMAN_FORMAT_BPP</name><argument_list pos:start="63:41" pos:end="63:49">(<argument pos:start="63:42" pos:end="63:48"><expr pos:start="63:42" pos:end="63:48"><name pos:start="63:42" pos:end="63:48">pformat</name></expr></argument>)</argument_list></call> <operator pos:start="63:51" pos:end="63:51">*</operator> <name pos:start="63:53" pos:end="63:62"><name pos:start="63:53" pos:end="63:55">res</name><operator pos:start="63:56" pos:end="63:57">-&gt;</operator><name pos:start="63:58" pos:end="63:62">width</name></name> <operator pos:start="63:64" pos:end="63:64">*</operator> <name pos:start="63:66" pos:end="63:76"><name pos:start="63:66" pos:end="63:68">res</name><operator pos:start="63:69" pos:end="63:70">-&gt;</operator><name pos:start="63:71" pos:end="63:76">height</name></name></expr>;</expr_stmt>



        <expr_stmt pos:start="67:9" pos:end="67:51"><expr pos:start="67:9" pos:end="67:50"><name pos:start="67:9" pos:end="67:18"><name pos:start="67:9" pos:end="67:11">res</name><operator pos:start="67:12" pos:end="67:13">-&gt;</operator><name pos:start="67:14" pos:end="67:18">addrs</name></name> <operator pos:start="67:20" pos:end="67:20">=</operator> <call pos:start="67:22" pos:end="67:50"><name pos:start="67:22" pos:end="67:26">g_new</name><argument_list pos:start="67:27" pos:end="67:50">(<argument pos:start="67:28" pos:end="67:35"><expr pos:start="67:28" pos:end="67:35"><name pos:start="67:28" pos:end="67:35">uint64_t</name></expr></argument>, <argument pos:start="67:38" pos:end="67:49"><expr pos:start="67:38" pos:end="67:49"><name pos:start="67:38" pos:end="67:49"><name pos:start="67:38" pos:end="67:40">res</name><operator pos:start="67:41" pos:end="67:42">-&gt;</operator><name pos:start="67:43" pos:end="67:49">iov_cnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:53"><expr pos:start="69:9" pos:end="69:52"><name pos:start="69:9" pos:end="69:16"><name pos:start="69:9" pos:end="69:11">res</name><operator pos:start="69:12" pos:end="69:13">-&gt;</operator><name pos:start="69:14" pos:end="69:16">iov</name></name> <operator pos:start="69:18" pos:end="69:18">=</operator> <call pos:start="69:20" pos:end="69:52"><name pos:start="69:20" pos:end="69:24">g_new</name><argument_list pos:start="69:25" pos:end="69:52">(<argument pos:start="69:26" pos:end="69:37"><expr pos:start="69:26" pos:end="69:37">struct <name pos:start="69:33" pos:end="69:37">iovec</name></expr></argument>, <argument pos:start="69:40" pos:end="69:51"><expr pos:start="69:40" pos:end="69:51"><name pos:start="69:40" pos:end="69:51"><name pos:start="69:40" pos:end="69:42">res</name><operator pos:start="69:43" pos:end="69:44">-&gt;</operator><name pos:start="69:45" pos:end="69:51">iov_cnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="73:9" pos:end="73:23">/* read data */</comment>

        <for pos:start="75:9" pos:end="167:13">for <control pos:start="75:13" pos:end="75:42">(<init pos:start="75:14" pos:end="75:19"><expr pos:start="75:14" pos:end="75:18"><name pos:start="75:14" pos:end="75:14">i</name> <operator pos:start="75:16" pos:end="75:16">=</operator> <literal type="number" pos:start="75:18" pos:end="75:18">0</literal></expr>;</init> <condition pos:start="75:21" pos:end="75:37"><expr pos:start="75:21" pos:end="75:36"><name pos:start="75:21" pos:end="75:21">i</name> <operator pos:start="75:23" pos:end="75:23">&lt;</operator> <name pos:start="75:25" pos:end="75:36"><name pos:start="75:25" pos:end="75:27">res</name><operator pos:start="75:28" pos:end="75:29">-&gt;</operator><name pos:start="75:30" pos:end="75:36">iov_cnt</name></name></expr>;</condition> <incr pos:start="75:39" pos:end="75:41"><expr pos:start="75:39" pos:end="75:41"><name pos:start="75:39" pos:end="75:39">i</name><operator pos:start="75:40" pos:end="75:41">++</operator></expr></incr>)</control> <block pos:start="75:44" pos:end="167:13">{<block_content pos:start="77:13" pos:end="167:13">

            <expr_stmt pos:start="77:13" pos:end="77:45"><expr pos:start="77:13" pos:end="77:44"><name pos:start="77:13" pos:end="77:25"><name pos:start="77:13" pos:end="77:15">res</name><operator pos:start="77:16" pos:end="77:17">-&gt;</operator><name pos:start="77:18" pos:end="77:22">addrs</name><index pos:start="77:23" pos:end="77:25">[<expr pos:start="77:24" pos:end="77:24"><name pos:start="77:24" pos:end="77:24">i</name></expr>]</index></name> <operator pos:start="77:27" pos:end="77:27">=</operator> <call pos:start="77:29" pos:end="77:44"><name pos:start="77:29" pos:end="77:41">qemu_get_be64</name><argument_list pos:start="77:42" pos:end="77:44">(<argument pos:start="77:43" pos:end="77:43"><expr pos:start="77:43" pos:end="77:43"><name pos:start="77:43" pos:end="77:43">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:51"><expr pos:start="79:13" pos:end="79:50"><name pos:start="79:13" pos:end="79:23"><name pos:start="79:13" pos:end="79:15">res</name><operator pos:start="79:16" pos:end="79:17">-&gt;</operator><name pos:start="79:18" pos:end="79:20">iov</name><index pos:start="79:21" pos:end="79:23">[<expr pos:start="79:22" pos:end="79:22"><name pos:start="79:22" pos:end="79:22">i</name></expr>]</index></name><operator pos:start="79:24" pos:end="79:24">.</operator><name pos:start="79:25" pos:end="79:31">iov_len</name> <operator pos:start="79:33" pos:end="79:33">=</operator> <call pos:start="79:35" pos:end="79:50"><name pos:start="79:35" pos:end="79:47">qemu_get_be32</name><argument_list pos:start="79:48" pos:end="79:50">(<argument pos:start="79:49" pos:end="79:49"><expr pos:start="79:49" pos:end="79:49"><name pos:start="79:49" pos:end="79:49">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        <expr_stmt pos:start="82:9" pos:end="84:75"><expr pos:start="82:9" pos:end="84:74"><call pos:start="82:9" pos:end="84:74"><name pos:start="82:9" pos:end="82:23">qemu_get_buffer</name><argument_list pos:start="82:24" pos:end="84:74">(<argument pos:start="82:25" pos:end="82:25"><expr pos:start="82:25" pos:end="82:25"><name pos:start="82:25" pos:end="82:25">f</name></expr></argument>, <argument pos:start="82:28" pos:end="82:68"><expr pos:start="82:28" pos:end="82:68"><operator pos:start="82:28" pos:end="82:28">(</operator><name pos:start="82:29" pos:end="82:32">void</name> <operator pos:start="82:34" pos:end="82:34">*</operator><operator pos:start="82:35" pos:end="82:35">)</operator><call pos:start="82:36" pos:end="82:68"><name pos:start="82:36" pos:end="82:56">pixman_image_get_data</name><argument_list pos:start="82:57" pos:end="82:68">(<argument pos:start="82:58" pos:end="82:67"><expr pos:start="82:58" pos:end="82:67"><name pos:start="82:58" pos:end="82:67"><name pos:start="82:58" pos:end="82:60">res</name><operator pos:start="82:61" pos:end="82:62">-&gt;</operator><name pos:start="82:63" pos:end="82:67">image</name></name></expr></argument>)</argument_list></call></expr></argument>,

                        <argument pos:start="84:25" pos:end="84:73"><expr pos:start="84:25" pos:end="84:73"><call pos:start="84:25" pos:end="84:59"><name pos:start="84:25" pos:end="84:47">pixman_image_get_stride</name><argument_list pos:start="84:48" pos:end="84:59">(<argument pos:start="84:49" pos:end="84:58"><expr pos:start="84:49" pos:end="84:58"><name pos:start="84:49" pos:end="84:58"><name pos:start="84:49" pos:end="84:51">res</name><operator pos:start="84:52" pos:end="84:53">-&gt;</operator><name pos:start="84:54" pos:end="84:58">image</name></name></expr></argument>)</argument_list></call> <operator pos:start="84:61" pos:end="84:61">*</operator> <name pos:start="84:63" pos:end="84:73"><name pos:start="84:63" pos:end="84:65">res</name><operator pos:start="84:66" pos:end="84:67">-&gt;</operator><name pos:start="84:68" pos:end="84:73">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="88:9" pos:end="88:29">/* restore mapping */</comment>

        <for pos:start="90:9" pos:end="167:13">for <control pos:start="90:13" pos:end="90:42">(<init pos:start="90:14" pos:end="90:19"><expr pos:start="90:14" pos:end="90:18"><name pos:start="90:14" pos:end="90:14">i</name> <operator pos:start="90:16" pos:end="90:16">=</operator> <literal type="number" pos:start="90:18" pos:end="90:18">0</literal></expr>;</init> <condition pos:start="90:21" pos:end="90:37"><expr pos:start="90:21" pos:end="90:36"><name pos:start="90:21" pos:end="90:21">i</name> <operator pos:start="90:23" pos:end="90:23">&lt;</operator> <name pos:start="90:25" pos:end="90:36"><name pos:start="90:25" pos:end="90:27">res</name><operator pos:start="90:28" pos:end="90:29">-&gt;</operator><name pos:start="90:30" pos:end="90:36">iov_cnt</name></name></expr>;</condition> <incr pos:start="90:39" pos:end="90:41"><expr pos:start="90:39" pos:end="90:41"><name pos:start="90:39" pos:end="90:39">i</name><operator pos:start="90:40" pos:end="90:41">++</operator></expr></incr>)</control> <block pos:start="90:44" pos:end="167:13">{<block_content pos:start="92:13" pos:end="167:13">

            <decl_stmt pos:start="92:13" pos:end="92:45"><decl pos:start="92:13" pos:end="92:44"><type pos:start="92:13" pos:end="92:18"><name pos:start="92:13" pos:end="92:18">hwaddr</name></type> <name pos:start="92:20" pos:end="92:22">len</name> <init pos:start="92:24" pos:end="92:44">= <expr pos:start="92:26" pos:end="92:44"><name pos:start="92:26" pos:end="92:36"><name pos:start="92:26" pos:end="92:28">res</name><operator pos:start="92:29" pos:end="92:30">-&gt;</operator><name pos:start="92:31" pos:end="92:33">iov</name><index pos:start="92:34" pos:end="92:36">[<expr pos:start="92:35" pos:end="92:35"><name pos:start="92:35" pos:end="92:35">i</name></expr>]</index></name><operator pos:start="92:37" pos:end="92:37">.</operator><name pos:start="92:38" pos:end="92:44">iov_len</name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="94:13" pos:end="96:64"><expr pos:start="94:13" pos:end="96:63"><name pos:start="94:13" pos:end="94:23"><name pos:start="94:13" pos:end="94:15">res</name><operator pos:start="94:16" pos:end="94:17">-&gt;</operator><name pos:start="94:18" pos:end="94:20">iov</name><index pos:start="94:21" pos:end="94:23">[<expr pos:start="94:22" pos:end="94:22"><name pos:start="94:22" pos:end="94:22">i</name></expr>]</index></name><operator pos:start="94:24" pos:end="94:24">.</operator><name pos:start="94:25" pos:end="94:32">iov_base</name> <operator pos:start="94:34" pos:end="94:34">=</operator>

                <call pos:start="96:17" pos:end="96:63"><name pos:start="96:17" pos:end="96:39">cpu_physical_memory_map</name><argument_list pos:start="96:40" pos:end="96:63">(<argument pos:start="96:41" pos:end="96:53"><expr pos:start="96:41" pos:end="96:53"><name pos:start="96:41" pos:end="96:53"><name pos:start="96:41" pos:end="96:43">res</name><operator pos:start="96:44" pos:end="96:45">-&gt;</operator><name pos:start="96:46" pos:end="96:50">addrs</name><index pos:start="96:51" pos:end="96:53">[<expr pos:start="96:52" pos:end="96:52"><name pos:start="96:52" pos:end="96:52">i</name></expr>]</index></name></expr></argument>, <argument pos:start="96:56" pos:end="96:59"><expr pos:start="96:56" pos:end="96:59"><operator pos:start="96:56" pos:end="96:56">&amp;</operator><name pos:start="96:57" pos:end="96:59">len</name></expr></argument>, <argument pos:start="96:62" pos:end="96:62"><expr pos:start="96:62" pos:end="96:62"><literal type="number" pos:start="96:62" pos:end="96:62">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="98:13" pos:end="167:13"><if pos:start="98:13" pos:end="167:13">if <condition pos:start="98:16" pos:end="98:68">(<expr pos:start="98:17" pos:end="98:67"><operator pos:start="98:17" pos:end="98:17">!</operator><name pos:start="98:18" pos:end="98:28"><name pos:start="98:18" pos:end="98:20">res</name><operator pos:start="98:21" pos:end="98:22">-&gt;</operator><name pos:start="98:23" pos:end="98:25">iov</name><index pos:start="98:26" pos:end="98:28">[<expr pos:start="98:27" pos:end="98:27"><name pos:start="98:27" pos:end="98:27">i</name></expr>]</index></name><operator pos:start="98:29" pos:end="98:29">.</operator><name pos:start="98:30" pos:end="98:37">iov_base</name> <operator pos:start="98:39" pos:end="98:40">||</operator> <name pos:start="98:42" pos:end="98:44">len</name> <operator pos:start="98:46" pos:end="98:47">!=</operator> <name pos:start="98:49" pos:end="98:59"><name pos:start="98:49" pos:end="98:51">res</name><operator pos:start="98:52" pos:end="98:53">-&gt;</operator><name pos:start="98:54" pos:end="98:56">iov</name><index pos:start="98:57" pos:end="98:59">[<expr pos:start="98:58" pos:end="98:58"><name pos:start="98:58" pos:end="98:58">i</name></expr>]</index></name><operator pos:start="98:60" pos:end="98:60">.</operator><name pos:start="98:61" pos:end="98:67">iov_len</name></expr>)</condition> <block pos:start="98:70" pos:end="167:13">{<block_content pos:start="110:17" pos:end="167:13">











                <return pos:start="110:17" pos:end="110:31">return <expr pos:start="110:24" pos:end="110:30"><operator pos:start="110:24" pos:end="110:24">-</operator><name pos:start="110:25" pos:end="110:30">EINVAL</name></expr>;</return>





        <expr_stmt pos:start="116:9" pos:end="116:51"><expr pos:start="116:9" pos:end="116:50"><call pos:start="116:9" pos:end="116:50"><name pos:start="116:9" pos:end="116:26">QTAILQ_INSERT_HEAD</name><argument_list pos:start="116:27" pos:end="116:50">(<argument pos:start="116:28" pos:end="116:38"><expr pos:start="116:28" pos:end="116:38"><operator pos:start="116:28" pos:end="116:28">&amp;</operator><name pos:start="116:29" pos:end="116:38"><name pos:start="116:29" pos:end="116:29">g</name><operator pos:start="116:30" pos:end="116:31">-&gt;</operator><name pos:start="116:32" pos:end="116:38">reslist</name></name></expr></argument>, <argument pos:start="116:41" pos:end="116:43"><expr pos:start="116:41" pos:end="116:43"><name pos:start="116:41" pos:end="116:43">res</name></expr></argument>, <argument pos:start="116:46" pos:end="116:49"><expr pos:start="116:46" pos:end="116:49"><name pos:start="116:46" pos:end="116:49">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="118:9" pos:end="118:35"><expr pos:start="118:9" pos:end="118:34"><name pos:start="118:9" pos:end="118:18"><name pos:start="118:9" pos:end="118:9">g</name><operator pos:start="118:10" pos:end="118:11">-&gt;</operator><name pos:start="118:12" pos:end="118:18">hostmem</name></name> <operator pos:start="118:20" pos:end="118:21">+=</operator> <name pos:start="118:23" pos:end="118:34"><name pos:start="118:23" pos:end="118:25">res</name><operator pos:start="118:26" pos:end="118:27">-&gt;</operator><name pos:start="118:28" pos:end="118:34">hostmem</name></name></expr>;</expr_stmt>



        <expr_stmt pos:start="122:9" pos:end="122:39"><expr pos:start="122:9" pos:end="122:38"><name pos:start="122:9" pos:end="122:19">resource_id</name> <operator pos:start="122:21" pos:end="122:21">=</operator> <call pos:start="122:23" pos:end="122:38"><name pos:start="122:23" pos:end="122:35">qemu_get_be32</name><argument_list pos:start="122:36" pos:end="122:38">(<argument pos:start="122:37" pos:end="122:37"><expr pos:start="122:37" pos:end="122:37"><name pos:start="122:37" pos:end="122:37">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




    <comment type="block" pos:start="127:5" pos:end="127:36">/* load &amp; apply scanout state */</comment>

    <expr_stmt pos:start="129:5" pos:end="129:62"><expr pos:start="129:5" pos:end="129:61"><call pos:start="129:5" pos:end="129:61"><name pos:start="129:5" pos:end="129:22">vmstate_load_state</name><argument_list pos:start="129:23" pos:end="129:61">(<argument pos:start="129:24" pos:end="129:24"><expr pos:start="129:24" pos:end="129:24"><name pos:start="129:24" pos:end="129:24">f</name></expr></argument>, <argument pos:start="129:27" pos:end="129:54"><expr pos:start="129:27" pos:end="129:54"><operator pos:start="129:27" pos:end="129:27">&amp;</operator><name pos:start="129:28" pos:end="129:54">vmstate_virtio_gpu_scanouts</name></expr></argument>, <argument pos:start="129:57" pos:end="129:57"><expr pos:start="129:57" pos:end="129:57"><name pos:start="129:57" pos:end="129:57">g</name></expr></argument>, <argument pos:start="129:60" pos:end="129:60"><expr pos:start="129:60" pos:end="129:60"><literal type="number" pos:start="129:60" pos:end="129:60">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="131:5" pos:end="167:13">for <control pos:start="131:9" pos:end="131:45">(<init pos:start="131:10" pos:end="131:15"><expr pos:start="131:10" pos:end="131:14"><name pos:start="131:10" pos:end="131:10">i</name> <operator pos:start="131:12" pos:end="131:12">=</operator> <literal type="number" pos:start="131:14" pos:end="131:14">0</literal></expr>;</init> <condition pos:start="131:17" pos:end="131:40"><expr pos:start="131:17" pos:end="131:39"><name pos:start="131:17" pos:end="131:17">i</name> <operator pos:start="131:19" pos:end="131:19">&lt;</operator> <name pos:start="131:21" pos:end="131:39"><name pos:start="131:21" pos:end="131:21">g</name><operator pos:start="131:22" pos:end="131:23">-&gt;</operator><name pos:start="131:24" pos:end="131:27">conf</name><operator pos:start="131:28" pos:end="131:28">.</operator><name pos:start="131:29" pos:end="131:39">max_outputs</name></name></expr>;</condition> <incr pos:start="131:42" pos:end="131:44"><expr pos:start="131:42" pos:end="131:44"><name pos:start="131:42" pos:end="131:42">i</name><operator pos:start="131:43" pos:end="131:44">++</operator></expr></incr>)</control> <block pos:start="131:47" pos:end="167:13">{<block_content pos:start="133:9" pos:end="167:13">

        <expr_stmt pos:start="133:9" pos:end="133:33"><expr pos:start="133:9" pos:end="133:32"><name pos:start="133:9" pos:end="133:15">scanout</name> <operator pos:start="133:17" pos:end="133:17">=</operator> <operator pos:start="133:19" pos:end="133:19">&amp;</operator><name pos:start="133:20" pos:end="133:32"><name pos:start="133:20" pos:end="133:20">g</name><operator pos:start="133:21" pos:end="133:22">-&gt;</operator><name pos:start="133:23" pos:end="133:29">scanout</name><index pos:start="133:30" pos:end="133:32">[<expr pos:start="133:31" pos:end="133:31"><name pos:start="133:31" pos:end="133:31">i</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="135:9" pos:end="167:13"><if pos:start="135:9" pos:end="167:13">if <condition pos:start="135:12" pos:end="135:34">(<expr pos:start="135:13" pos:end="135:33"><operator pos:start="135:13" pos:end="135:13">!</operator><name pos:start="135:14" pos:end="135:33"><name pos:start="135:14" pos:end="135:20">scanout</name><operator pos:start="135:21" pos:end="135:22">-&gt;</operator><name pos:start="135:23" pos:end="135:33">resource_id</name></name></expr>)</condition> <block pos:start="135:36" pos:end="167:13">{<block_content pos:start="137:13" pos:end="167:13">

            <continue pos:start="137:13" pos:end="137:21">continue;</continue>


        <expr_stmt pos:start="140:9" pos:end="140:64"><expr pos:start="140:9" pos:end="140:63"><name pos:start="140:9" pos:end="140:11">res</name> <operator pos:start="140:13" pos:end="140:13">=</operator> <call pos:start="140:15" pos:end="140:63"><name pos:start="140:15" pos:end="140:38">virtio_gpu_find_resource</name><argument_list pos:start="140:39" pos:end="140:63">(<argument pos:start="140:40" pos:end="140:40"><expr pos:start="140:40" pos:end="140:40"><name pos:start="140:40" pos:end="140:40">g</name></expr></argument>, <argument pos:start="140:43" pos:end="140:62"><expr pos:start="140:43" pos:end="140:62"><name pos:start="140:43" pos:end="140:62"><name pos:start="140:43" pos:end="140:49">scanout</name><operator pos:start="140:50" pos:end="140:51">-&gt;</operator><name pos:start="140:52" pos:end="140:62">resource_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="142:9" pos:end="167:13"><if pos:start="142:9" pos:end="167:13">if <condition pos:start="142:12" pos:end="142:17">(<expr pos:start="142:13" pos:end="142:16"><operator pos:start="142:13" pos:end="142:13">!</operator><name pos:start="142:14" pos:end="142:16">res</name></expr>)</condition> <block pos:start="142:19" pos:end="167:13">{<block_content pos:start="144:13" pos:end="167:13">

            <return pos:start="144:13" pos:end="144:27">return <expr pos:start="144:20" pos:end="144:26"><operator pos:start="144:20" pos:end="144:20">-</operator><name pos:start="144:21" pos:end="144:26">EINVAL</name></expr>;</return>


        <expr_stmt pos:start="147:9" pos:end="147:68"><expr pos:start="147:9" pos:end="147:67"><name pos:start="147:9" pos:end="147:19"><name pos:start="147:9" pos:end="147:15">scanout</name><operator pos:start="147:16" pos:end="147:17">-&gt;</operator><name pos:start="147:18" pos:end="147:19">ds</name></name> <operator pos:start="147:21" pos:end="147:21">=</operator> <call pos:start="147:23" pos:end="147:67"><name pos:start="147:23" pos:end="147:55">qemu_create_displaysurface_pixman</name><argument_list pos:start="147:56" pos:end="147:67">(<argument pos:start="147:57" pos:end="147:66"><expr pos:start="147:57" pos:end="147:66"><name pos:start="147:57" pos:end="147:66"><name pos:start="147:57" pos:end="147:59">res</name><operator pos:start="147:60" pos:end="147:61">-&gt;</operator><name pos:start="147:62" pos:end="147:66">image</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="149:9" pos:end="167:13"><if pos:start="149:9" pos:end="167:13">if <condition pos:start="149:12" pos:end="149:25">(<expr pos:start="149:13" pos:end="149:24"><operator pos:start="149:13" pos:end="149:13">!</operator><name pos:start="149:14" pos:end="149:24"><name pos:start="149:14" pos:end="149:20">scanout</name><operator pos:start="149:21" pos:end="149:22">-&gt;</operator><name pos:start="149:23" pos:end="149:24">ds</name></name></expr>)</condition> <block pos:start="149:27" pos:end="167:13">{<block_content pos:start="151:13" pos:end="167:13">

            <return pos:start="151:13" pos:end="151:27">return <expr pos:start="151:20" pos:end="151:26"><operator pos:start="151:20" pos:end="151:20">-</operator><name pos:start="151:21" pos:end="151:26">EINVAL</name></expr>;</return>




        <expr_stmt pos:start="156:9" pos:end="156:59"><expr pos:start="156:9" pos:end="156:58"><call pos:start="156:9" pos:end="156:58"><name pos:start="156:9" pos:end="156:31">dpy_gfx_replace_surface</name><argument_list pos:start="156:32" pos:end="156:58">(<argument pos:start="156:33" pos:end="156:44"><expr pos:start="156:33" pos:end="156:44"><name pos:start="156:33" pos:end="156:44"><name pos:start="156:33" pos:end="156:39">scanout</name><operator pos:start="156:40" pos:end="156:41">-&gt;</operator><name pos:start="156:42" pos:end="156:44">con</name></name></expr></argument>, <argument pos:start="156:47" pos:end="156:57"><expr pos:start="156:47" pos:end="156:57"><name pos:start="156:47" pos:end="156:57"><name pos:start="156:47" pos:end="156:53">scanout</name><operator pos:start="156:54" pos:end="156:55">-&gt;</operator><name pos:start="156:56" pos:end="156:57">ds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="158:9" pos:end="158:76"><expr pos:start="158:9" pos:end="158:75"><call pos:start="158:9" pos:end="158:75"><name pos:start="158:9" pos:end="158:22">dpy_gfx_update</name><argument_list pos:start="158:23" pos:end="158:75">(<argument pos:start="158:24" pos:end="158:35"><expr pos:start="158:24" pos:end="158:35"><name pos:start="158:24" pos:end="158:35"><name pos:start="158:24" pos:end="158:30">scanout</name><operator pos:start="158:31" pos:end="158:32">-&gt;</operator><name pos:start="158:33" pos:end="158:35">con</name></name></expr></argument>, <argument pos:start="158:38" pos:end="158:38"><expr pos:start="158:38" pos:end="158:38"><literal type="number" pos:start="158:38" pos:end="158:38">0</literal></expr></argument>, <argument pos:start="158:41" pos:end="158:41"><expr pos:start="158:41" pos:end="158:41"><literal type="number" pos:start="158:41" pos:end="158:41">0</literal></expr></argument>, <argument pos:start="158:44" pos:end="158:57"><expr pos:start="158:44" pos:end="158:57"><name pos:start="158:44" pos:end="158:57"><name pos:start="158:44" pos:end="158:50">scanout</name><operator pos:start="158:51" pos:end="158:52">-&gt;</operator><name pos:start="158:53" pos:end="158:57">width</name></name></expr></argument>, <argument pos:start="158:60" pos:end="158:74"><expr pos:start="158:60" pos:end="158:74"><name pos:start="158:60" pos:end="158:74"><name pos:start="158:60" pos:end="158:66">scanout</name><operator pos:start="158:67" pos:end="158:68">-&gt;</operator><name pos:start="158:69" pos:end="158:74">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="160:9" pos:end="160:43"><expr pos:start="160:9" pos:end="160:42"><call pos:start="160:9" pos:end="160:42"><name pos:start="160:9" pos:end="160:21">update_cursor</name><argument_list pos:start="160:22" pos:end="160:42">(<argument pos:start="160:23" pos:end="160:23"><expr pos:start="160:23" pos:end="160:23"><name pos:start="160:23" pos:end="160:23">g</name></expr></argument>, <argument pos:start="160:26" pos:end="160:41"><expr pos:start="160:26" pos:end="160:41"><operator pos:start="160:26" pos:end="160:26">&amp;</operator><name pos:start="160:27" pos:end="160:41"><name pos:start="160:27" pos:end="160:33">scanout</name><operator pos:start="160:34" pos:end="160:35">-&gt;</operator><name pos:start="160:36" pos:end="160:41">cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="162:9" pos:end="162:41"><expr pos:start="162:9" pos:end="162:40"><name pos:start="162:9" pos:end="162:28"><name pos:start="162:9" pos:end="162:11">res</name><operator pos:start="162:12" pos:end="162:13">-&gt;</operator><name pos:start="162:14" pos:end="162:28">scanout_bitmask</name></name> <operator pos:start="162:30" pos:end="162:31">|=</operator> <operator pos:start="162:33" pos:end="162:33">(</operator><literal type="number" pos:start="162:34" pos:end="162:34">1</literal> <operator pos:start="162:36" pos:end="162:37">&lt;&lt;</operator> <name pos:start="162:39" pos:end="162:39">i</name><operator pos:start="162:40" pos:end="162:40">)</operator></expr>;</expr_stmt>




    <return pos:start="167:5" pos:end="167:13">return <expr pos:start="167:12" pos:end="167:12"><literal type="number" pos:start="167:12" pos:end="167:12">0</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></while></block_content></block></function>
</unit>
