<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4967.c" pos:tabs="8"><function pos:start="1:1" pos:end="109:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:34">ipvideo_decode_opcodes</name><parameter_list pos:start="1:35" pos:end="1:69">(<parameter pos:start="1:36" pos:end="1:52"><decl pos:start="1:36" pos:end="1:52"><type pos:start="1:36" pos:end="1:52"><name pos:start="1:36" pos:end="1:49">IpvideoContext</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:52">s</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:68"><decl pos:start="1:55" pos:end="1:68"><type pos:start="1:55" pos:end="1:68"><name pos:start="1:55" pos:end="1:61">AVFrame</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:68">frame</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="109:1">{<block_content pos:start="5:5" pos:end="107:5">

    <decl_stmt pos:start="5:5" pos:end="5:13"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">x</name></decl>, <decl pos:start="5:12" pos:end="5:12"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:12">y</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:12">unsigned</name> <name pos:start="7:14" pos:end="7:17">char</name></type> <name pos:start="7:19" pos:end="7:24">opcode</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:17">GetBitContext</name></type> <name pos:start="11:19" pos:end="11:20">gb</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:41"><expr pos:start="15:5" pos:end="15:40"><call pos:start="15:5" pos:end="15:40"><name pos:start="15:5" pos:end="15:20">bytestream2_skip</name><argument_list pos:start="15:21" pos:end="15:40">(<argument pos:start="15:22" pos:end="15:35"><expr pos:start="15:22" pos:end="15:35"><operator pos:start="15:22" pos:end="15:22">&amp;</operator><name pos:start="15:23" pos:end="15:35"><name pos:start="15:23" pos:end="15:23">s</name><operator pos:start="15:24" pos:end="15:25">-&gt;</operator><name pos:start="15:26" pos:end="15:35">stream_ptr</name></name></expr></argument>, <argument pos:start="15:38" pos:end="15:39"><expr pos:start="15:38" pos:end="15:39"><literal type="number" pos:start="15:38" pos:end="15:39">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="15:43" pos:end="15:71">/* data starts 14 bytes in */</comment>

    <if_stmt pos:start="17:5" pos:end="35:5"><if pos:start="17:5" pos:end="27:5">if <condition pos:start="17:8" pos:end="17:21">(<expr pos:start="17:9" pos:end="17:20"><operator pos:start="17:9" pos:end="17:9">!</operator><name pos:start="17:10" pos:end="17:20"><name pos:start="17:10" pos:end="17:10">s</name><operator pos:start="17:11" pos:end="17:12">-&gt;</operator><name pos:start="17:13" pos:end="17:20">is_16bpp</name></name></expr>)</condition> <block pos:start="17:23" pos:end="27:5">{<block_content pos:start="21:9" pos:end="25:39">

        <comment type="block" pos:start="19:9" pos:end="19:57">/* this is PAL8, so make the palette available */</comment>

        <expr_stmt pos:start="21:9" pos:end="21:55"><expr pos:start="21:9" pos:end="21:54"><call pos:start="21:9" pos:end="21:54"><name pos:start="21:9" pos:end="21:14">memcpy</name><argument_list pos:start="21:15" pos:end="21:54">(<argument pos:start="21:16" pos:end="21:29"><expr pos:start="21:16" pos:end="21:29"><name pos:start="21:16" pos:end="21:29"><name pos:start="21:16" pos:end="21:20">frame</name><operator pos:start="21:21" pos:end="21:22">-&gt;</operator><name pos:start="21:23" pos:end="21:26">data</name><index pos:start="21:27" pos:end="21:29">[<expr pos:start="21:28" pos:end="21:28"><literal type="number" pos:start="21:28" pos:end="21:28">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="21:32" pos:end="21:37"><expr pos:start="21:32" pos:end="21:37"><name pos:start="21:32" pos:end="21:37"><name pos:start="21:32" pos:end="21:32">s</name><operator pos:start="21:33" pos:end="21:34">-&gt;</operator><name pos:start="21:35" pos:end="21:37">pal</name></name></expr></argument>, <argument pos:start="21:40" pos:end="21:53"><expr pos:start="21:40" pos:end="21:53"><name pos:start="21:40" pos:end="21:53">AVPALETTE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="25:9" pos:end="25:39"><expr pos:start="25:9" pos:end="25:38"><name pos:start="25:9" pos:end="25:17"><name pos:start="25:9" pos:end="25:9">s</name><operator pos:start="25:10" pos:end="25:11">-&gt;</operator><name pos:start="25:12" pos:end="25:17">stride</name></name> <operator pos:start="25:19" pos:end="25:19">=</operator> <name pos:start="25:21" pos:end="25:38"><name pos:start="25:21" pos:end="25:25">frame</name><operator pos:start="25:26" pos:end="25:27">-&gt;</operator><name pos:start="25:28" pos:end="25:35">linesize</name><index pos:start="25:36" pos:end="25:38">[<expr pos:start="25:37" pos:end="25:37"><literal type="number" pos:start="25:37" pos:end="25:37">0</literal></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="27:7" pos:end="35:5">else <block pos:start="27:12" pos:end="35:5">{<block_content pos:start="29:9" pos:end="33:75">

        <expr_stmt pos:start="29:9" pos:end="29:44"><expr pos:start="29:9" pos:end="29:43"><name pos:start="29:9" pos:end="29:17"><name pos:start="29:9" pos:end="29:9">s</name><operator pos:start="29:10" pos:end="29:11">-&gt;</operator><name pos:start="29:12" pos:end="29:17">stride</name></name> <operator pos:start="29:19" pos:end="29:19">=</operator> <name pos:start="29:21" pos:end="29:38"><name pos:start="29:21" pos:end="29:25">frame</name><operator pos:start="29:26" pos:end="29:27">-&gt;</operator><name pos:start="29:28" pos:end="29:35">linesize</name><index pos:start="29:36" pos:end="29:38">[<expr pos:start="29:37" pos:end="29:37"><literal type="number" pos:start="29:37" pos:end="29:37">0</literal></expr>]</index></name> <operator pos:start="29:40" pos:end="29:41">&gt;&gt;</operator> <literal type="number" pos:start="29:43" pos:end="29:43">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:34"><expr pos:start="31:9" pos:end="31:33"><name pos:start="31:9" pos:end="31:17"><name pos:start="31:9" pos:end="31:9">s</name><operator pos:start="31:10" pos:end="31:11">-&gt;</operator><name pos:start="31:12" pos:end="31:17">mv_ptr</name></name> <operator pos:start="31:19" pos:end="31:19">=</operator> <name pos:start="31:21" pos:end="31:33"><name pos:start="31:21" pos:end="31:21">s</name><operator pos:start="31:22" pos:end="31:23">-&gt;</operator><name pos:start="31:24" pos:end="31:33">stream_ptr</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:75"><expr pos:start="33:9" pos:end="33:74"><call pos:start="33:9" pos:end="33:74"><name pos:start="33:9" pos:end="33:24">bytestream2_skip</name><argument_list pos:start="33:25" pos:end="33:74">(<argument pos:start="33:26" pos:end="33:35"><expr pos:start="33:26" pos:end="33:35"><operator pos:start="33:26" pos:end="33:26">&amp;</operator><name pos:start="33:27" pos:end="33:35"><name pos:start="33:27" pos:end="33:27">s</name><operator pos:start="33:28" pos:end="33:29">-&gt;</operator><name pos:start="33:30" pos:end="33:35">mv_ptr</name></name></expr></argument>, <argument pos:start="33:38" pos:end="33:73"><expr pos:start="33:38" pos:end="33:73"><call pos:start="33:38" pos:end="33:73"><name pos:start="33:38" pos:end="33:57">bytestream2_get_le16</name><argument_list pos:start="33:58" pos:end="33:73">(<argument pos:start="33:59" pos:end="33:72"><expr pos:start="33:59" pos:end="33:72"><operator pos:start="33:59" pos:end="33:59">&amp;</operator><name pos:start="33:60" pos:end="33:72"><name pos:start="33:60" pos:end="33:60">s</name><operator pos:start="33:61" pos:end="33:62">-&gt;</operator><name pos:start="33:63" pos:end="33:72">stream_ptr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:32"><expr pos:start="37:5" pos:end="37:31"><name pos:start="37:5" pos:end="37:15"><name pos:start="37:5" pos:end="37:5">s</name><operator pos:start="37:6" pos:end="37:7">-&gt;</operator><name pos:start="37:8" pos:end="37:15">line_inc</name></name> <operator pos:start="37:17" pos:end="37:17">=</operator> <name pos:start="37:19" pos:end="37:27"><name pos:start="37:19" pos:end="37:19">s</name><operator pos:start="37:20" pos:end="37:21">-&gt;</operator><name pos:start="37:22" pos:end="37:27">stride</name></name> <operator pos:start="37:29" pos:end="37:29">-</operator> <literal type="number" pos:start="37:31" pos:end="37:31">8</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="41:78"><expr pos:start="39:5" pos:end="41:77"><name pos:start="39:5" pos:end="39:32"><name pos:start="39:5" pos:end="39:5">s</name><operator pos:start="39:6" pos:end="39:7">-&gt;</operator><name pos:start="39:8" pos:end="39:32">upper_motion_limit_offset</name></name> <operator pos:start="39:34" pos:end="39:34">=</operator> <operator pos:start="39:36" pos:end="39:36">(</operator><name pos:start="39:37" pos:end="39:52"><name pos:start="39:37" pos:end="39:37">s</name><operator pos:start="39:38" pos:end="39:39">-&gt;</operator><name pos:start="39:40" pos:end="39:44">avctx</name><operator pos:start="39:45" pos:end="39:46">-&gt;</operator><name pos:start="39:47" pos:end="39:52">height</name></name> <operator pos:start="39:54" pos:end="39:54">-</operator> <literal type="number" pos:start="39:56" pos:end="39:56">8</literal><operator pos:start="39:57" pos:end="39:57">)</operator> <operator pos:start="39:59" pos:end="39:59">*</operator> <name pos:start="39:61" pos:end="39:78"><name pos:start="39:61" pos:end="39:65">frame</name><operator pos:start="39:66" pos:end="39:67">-&gt;</operator><name pos:start="39:68" pos:end="39:75">linesize</name><index pos:start="39:76" pos:end="39:78">[<expr pos:start="39:77" pos:end="39:77"><literal type="number" pos:start="39:77" pos:end="39:77">0</literal></expr>]</index></name>

                                  <operator pos:start="41:35" pos:end="41:35">+</operator> <operator pos:start="41:37" pos:end="41:37">(</operator><name pos:start="41:38" pos:end="41:52"><name pos:start="41:38" pos:end="41:38">s</name><operator pos:start="41:39" pos:end="41:40">-&gt;</operator><name pos:start="41:41" pos:end="41:45">avctx</name><operator pos:start="41:46" pos:end="41:47">-&gt;</operator><name pos:start="41:48" pos:end="41:52">width</name></name> <operator pos:start="41:54" pos:end="41:54">-</operator> <literal type="number" pos:start="41:56" pos:end="41:56">8</literal><operator pos:start="41:57" pos:end="41:57">)</operator> <operator pos:start="41:59" pos:end="41:59">*</operator> <operator pos:start="41:61" pos:end="41:61">(</operator><literal type="number" pos:start="41:62" pos:end="41:64">1</literal> <operator pos:start="41:64" pos:end="41:64">+</operator> <name pos:start="41:66" pos:end="41:76"><name pos:start="41:66" pos:end="41:66">s</name><operator pos:start="41:67" pos:end="41:68">-&gt;</operator><name pos:start="41:69" pos:end="41:76">is_16bpp</name></name><operator pos:start="41:77" pos:end="41:77">)</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:66"><expr pos:start="45:5" pos:end="45:65"><call pos:start="45:5" pos:end="45:65"><name pos:start="45:5" pos:end="45:17">init_get_bits</name><argument_list pos:start="45:18" pos:end="45:65">(<argument pos:start="45:19" pos:end="45:21"><expr pos:start="45:19" pos:end="45:21"><operator pos:start="45:19" pos:end="45:19">&amp;</operator><name pos:start="45:20" pos:end="45:21">gb</name></expr></argument>, <argument pos:start="45:24" pos:end="45:38"><expr pos:start="45:24" pos:end="45:38"><name pos:start="45:24" pos:end="45:38"><name pos:start="45:24" pos:end="45:24">s</name><operator pos:start="45:25" pos:end="45:26">-&gt;</operator><name pos:start="45:27" pos:end="45:38">decoding_map</name></name></expr></argument>, <argument pos:start="45:41" pos:end="45:64"><expr pos:start="45:41" pos:end="45:64"><name pos:start="45:41" pos:end="45:60"><name pos:start="45:41" pos:end="45:41">s</name><operator pos:start="45:42" pos:end="45:43">-&gt;</operator><name pos:start="45:44" pos:end="45:60">decoding_map_size</name></name> <operator pos:start="45:62" pos:end="45:62">*</operator> <literal type="number" pos:start="45:64" pos:end="45:64">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="47:5" pos:end="97:5">for <control pos:start="47:9" pos:end="47:45">(<init pos:start="47:10" pos:end="47:15"><expr pos:start="47:10" pos:end="47:14"><name pos:start="47:10" pos:end="47:10">y</name> <operator pos:start="47:12" pos:end="47:12">=</operator> <literal type="number" pos:start="47:14" pos:end="47:14">0</literal></expr>;</init> <condition pos:start="47:17" pos:end="47:37"><expr pos:start="47:17" pos:end="47:36"><name pos:start="47:17" pos:end="47:17">y</name> <operator pos:start="47:19" pos:end="47:19">&lt;</operator> <name pos:start="47:21" pos:end="47:36"><name pos:start="47:21" pos:end="47:21">s</name><operator pos:start="47:22" pos:end="47:23">-&gt;</operator><name pos:start="47:24" pos:end="47:28">avctx</name><operator pos:start="47:29" pos:end="47:30">-&gt;</operator><name pos:start="47:31" pos:end="47:36">height</name></name></expr>;</condition> <incr pos:start="47:39" pos:end="47:44"><expr pos:start="47:39" pos:end="47:44"><name pos:start="47:39" pos:end="47:39">y</name> <operator pos:start="47:41" pos:end="47:42">+=</operator> <literal type="number" pos:start="47:44" pos:end="47:44">8</literal></expr></incr>)</control> <block pos:start="47:47" pos:end="97:5">{<block_content pos:start="49:9" pos:end="95:9">

        <for pos:start="49:9" pos:end="95:9">for <control pos:start="49:13" pos:end="49:48">(<init pos:start="49:14" pos:end="49:19"><expr pos:start="49:14" pos:end="49:18"><name pos:start="49:14" pos:end="49:14">x</name> <operator pos:start="49:16" pos:end="49:16">=</operator> <literal type="number" pos:start="49:18" pos:end="49:18">0</literal></expr>;</init> <condition pos:start="49:21" pos:end="49:40"><expr pos:start="49:21" pos:end="49:39"><name pos:start="49:21" pos:end="49:21">x</name> <operator pos:start="49:23" pos:end="49:23">&lt;</operator> <name pos:start="49:25" pos:end="49:39"><name pos:start="49:25" pos:end="49:25">s</name><operator pos:start="49:26" pos:end="49:27">-&gt;</operator><name pos:start="49:28" pos:end="49:32">avctx</name><operator pos:start="49:33" pos:end="49:34">-&gt;</operator><name pos:start="49:35" pos:end="49:39">width</name></name></expr>;</condition> <incr pos:start="49:42" pos:end="49:47"><expr pos:start="49:42" pos:end="49:47"><name pos:start="49:42" pos:end="49:42">x</name> <operator pos:start="49:44" pos:end="49:45">+=</operator> <literal type="number" pos:start="49:47" pos:end="49:47">8</literal></expr></incr>)</control> <block pos:start="49:50" pos:end="95:9">{<block_content pos:start="51:13" pos:end="93:13">

            <if_stmt pos:start="51:13" pos:end="53:23"><if pos:start="51:13" pos:end="53:23">if <condition pos:start="51:16" pos:end="51:39">(<expr pos:start="51:17" pos:end="51:38"><call pos:start="51:17" pos:end="51:34"><name pos:start="51:17" pos:end="51:29">get_bits_left</name><argument_list pos:start="51:30" pos:end="51:34">(<argument pos:start="51:31" pos:end="51:33"><expr pos:start="51:31" pos:end="51:33"><operator pos:start="51:31" pos:end="51:31">&amp;</operator><name pos:start="51:32" pos:end="51:33">gb</name></expr></argument>)</argument_list></call> <operator pos:start="51:36" pos:end="51:36">&lt;</operator> <literal type="number" pos:start="51:38" pos:end="51:38">4</literal></expr>)</condition><block type="pseudo" pos:start="53:17" pos:end="53:23"><block_content pos:start="53:17" pos:end="53:23">

                <return pos:start="53:17" pos:end="53:23">return;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:38"><expr pos:start="55:13" pos:end="55:37"><name pos:start="55:13" pos:end="55:18">opcode</name> <operator pos:start="55:20" pos:end="55:20">=</operator> <call pos:start="55:22" pos:end="55:37"><name pos:start="55:22" pos:end="55:29">get_bits</name><argument_list pos:start="55:30" pos:end="55:37">(<argument pos:start="55:31" pos:end="55:33"><expr pos:start="55:31" pos:end="55:33"><operator pos:start="55:31" pos:end="55:31">&amp;</operator><name pos:start="55:32" pos:end="55:33">gb</name></expr></argument>, <argument pos:start="55:36" pos:end="55:36"><expr pos:start="55:36" pos:end="55:36"><literal type="number" pos:start="55:36" pos:end="55:36">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="59:13" pos:end="63:68"><expr pos:start="59:13" pos:end="63:67"><call pos:start="59:13" pos:end="63:67"><name pos:start="59:13" pos:end="59:19">ff_tlog</name><argument_list pos:start="59:20" pos:end="63:67">(<argument pos:start="59:21" pos:end="59:28"><expr pos:start="59:21" pos:end="59:28"><name pos:start="59:21" pos:end="59:28"><name pos:start="59:21" pos:end="59:21">s</name><operator pos:start="59:22" pos:end="59:23">-&gt;</operator><name pos:start="59:24" pos:end="59:28">avctx</name></name></expr></argument>,

                    <argument pos:start="61:21" pos:end="61:79"><expr pos:start="61:21" pos:end="61:79"><literal type="string" pos:start="61:21" pos:end="61:79">"  block @ (%3d, %3d): encoding 0x%X, data ptr offset %d\n"</literal></expr></argument>,

                    <argument pos:start="63:21" pos:end="63:21"><expr pos:start="63:21" pos:end="63:21"><name pos:start="63:21" pos:end="63:21">x</name></expr></argument>, <argument pos:start="63:24" pos:end="63:24"><expr pos:start="63:24" pos:end="63:24"><name pos:start="63:24" pos:end="63:24">y</name></expr></argument>, <argument pos:start="63:27" pos:end="63:32"><expr pos:start="63:27" pos:end="63:32"><name pos:start="63:27" pos:end="63:32">opcode</name></expr></argument>, <argument pos:start="63:35" pos:end="63:66"><expr pos:start="63:35" pos:end="63:66"><call pos:start="63:35" pos:end="63:66"><name pos:start="63:35" pos:end="63:50">bytestream2_tell</name><argument_list pos:start="63:51" pos:end="63:66">(<argument pos:start="63:52" pos:end="63:65"><expr pos:start="63:52" pos:end="63:65"><operator pos:start="63:52" pos:end="63:52">&amp;</operator><name pos:start="63:53" pos:end="63:65"><name pos:start="63:53" pos:end="63:53">s</name><operator pos:start="63:54" pos:end="63:55">-&gt;</operator><name pos:start="63:56" pos:end="63:65">stream_ptr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="67:13" pos:end="83:13"><if pos:start="67:13" pos:end="75:13">if <condition pos:start="67:16" pos:end="67:29">(<expr pos:start="67:17" pos:end="67:28"><operator pos:start="67:17" pos:end="67:17">!</operator><name pos:start="67:18" pos:end="67:28"><name pos:start="67:18" pos:end="67:18">s</name><operator pos:start="67:19" pos:end="67:20">-&gt;</operator><name pos:start="67:21" pos:end="67:28">is_16bpp</name></name></expr>)</condition> <block pos:start="67:31" pos:end="75:13">{<block_content pos:start="69:17" pos:end="73:61">

                <expr_stmt pos:start="69:17" pos:end="71:53"><expr pos:start="69:17" pos:end="71:52"><name pos:start="69:17" pos:end="69:28"><name pos:start="69:17" pos:end="69:17">s</name><operator pos:start="69:18" pos:end="69:19">-&gt;</operator><name pos:start="69:20" pos:end="69:28">pixel_ptr</name></name> <operator pos:start="69:30" pos:end="69:30">=</operator> <name pos:start="69:32" pos:end="69:45"><name pos:start="69:32" pos:end="69:36">frame</name><operator pos:start="69:37" pos:end="69:38">-&gt;</operator><name pos:start="69:39" pos:end="69:42">data</name><index pos:start="69:43" pos:end="69:45">[<expr pos:start="69:44" pos:end="69:44"><literal type="number" pos:start="69:44" pos:end="69:44">0</literal></expr>]</index></name> <operator pos:start="69:47" pos:end="69:47">+</operator> <name pos:start="69:49" pos:end="69:49">x</name>

                              <operator pos:start="71:31" pos:end="71:31">+</operator> <name pos:start="71:33" pos:end="71:33">y</name><operator pos:start="71:34" pos:end="71:34">*</operator><name pos:start="71:35" pos:end="71:52"><name pos:start="71:35" pos:end="71:39">frame</name><operator pos:start="71:40" pos:end="71:41">-&gt;</operator><name pos:start="71:42" pos:end="71:49">linesize</name><index pos:start="71:50" pos:end="71:52">[<expr pos:start="71:51" pos:end="71:51"><literal type="number" pos:start="71:51" pos:end="71:51">0</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="73:17" pos:end="73:61"><expr pos:start="73:17" pos:end="73:60"><name pos:start="73:17" pos:end="73:19">ret</name> <operator pos:start="73:21" pos:end="73:21">=</operator> <name pos:start="73:23" pos:end="73:50"><name pos:start="73:23" pos:end="73:42">ipvideo_decode_block</name><index pos:start="73:43" pos:end="73:50">[<expr pos:start="73:44" pos:end="73:49"><name pos:start="73:44" pos:end="73:49">opcode</name></expr>]</index></name><operator pos:start="73:51" pos:end="73:51">(</operator><name pos:start="73:52" pos:end="73:52">s</name><operator pos:start="73:53" pos:end="73:53">,</operator> <name pos:start="73:55" pos:end="73:59">frame</name><operator pos:start="73:60" pos:end="73:60">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="75:15" pos:end="83:13">else <block pos:start="75:20" pos:end="83:13">{<block_content pos:start="77:17" pos:end="81:63">

                <expr_stmt pos:start="77:17" pos:end="79:53"><expr pos:start="77:17" pos:end="79:52"><name pos:start="77:17" pos:end="77:28"><name pos:start="77:17" pos:end="77:17">s</name><operator pos:start="77:18" pos:end="77:19">-&gt;</operator><name pos:start="77:20" pos:end="77:28">pixel_ptr</name></name> <operator pos:start="77:30" pos:end="77:30">=</operator> <name pos:start="77:32" pos:end="77:45"><name pos:start="77:32" pos:end="77:36">frame</name><operator pos:start="77:37" pos:end="77:38">-&gt;</operator><name pos:start="77:39" pos:end="77:42">data</name><index pos:start="77:43" pos:end="77:45">[<expr pos:start="77:44" pos:end="77:44"><literal type="number" pos:start="77:44" pos:end="77:44">0</literal></expr>]</index></name> <operator pos:start="77:47" pos:end="77:47">+</operator> <name pos:start="77:49" pos:end="77:49">x</name><operator pos:start="77:50" pos:end="77:50">*</operator><literal type="number" pos:start="77:51" pos:end="79:31">2</literal>

                              <operator pos:start="79:31" pos:end="79:31">+</operator> <name pos:start="79:33" pos:end="79:33">y</name><operator pos:start="79:34" pos:end="79:34">*</operator><name pos:start="79:35" pos:end="79:52"><name pos:start="79:35" pos:end="79:39">frame</name><operator pos:start="79:40" pos:end="79:41">-&gt;</operator><name pos:start="79:42" pos:end="79:49">linesize</name><index pos:start="79:50" pos:end="79:52">[<expr pos:start="79:51" pos:end="79:51"><literal type="number" pos:start="79:51" pos:end="79:51">0</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="81:17" pos:end="81:63"><expr pos:start="81:17" pos:end="81:62"><name pos:start="81:17" pos:end="81:19">ret</name> <operator pos:start="81:21" pos:end="81:21">=</operator> <name pos:start="81:23" pos:end="81:52"><name pos:start="81:23" pos:end="81:44">ipvideo_decode_block16</name><index pos:start="81:45" pos:end="81:52">[<expr pos:start="81:46" pos:end="81:51"><name pos:start="81:46" pos:end="81:51">opcode</name></expr>]</index></name><operator pos:start="81:53" pos:end="81:53">(</operator><name pos:start="81:54" pos:end="81:54">s</name><operator pos:start="81:55" pos:end="81:55">,</operator> <name pos:start="81:57" pos:end="81:61">frame</name><operator pos:start="81:62" pos:end="81:62">)</operator></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="85:13" pos:end="93:13"><if pos:start="85:13" pos:end="93:13">if <condition pos:start="85:16" pos:end="85:25">(<expr pos:start="85:17" pos:end="85:24"><name pos:start="85:17" pos:end="85:19">ret</name> <operator pos:start="85:21" pos:end="85:22">!=</operator> <literal type="number" pos:start="85:24" pos:end="85:24">0</literal></expr>)</condition> <block pos:start="85:27" pos:end="93:13">{<block_content pos:start="87:17" pos:end="91:23">

                <expr_stmt pos:start="87:17" pos:end="89:53"><expr pos:start="87:17" pos:end="89:52"><call pos:start="87:17" pos:end="89:52"><name pos:start="87:17" pos:end="87:22">av_log</name><argument_list pos:start="87:23" pos:end="89:52">(<argument pos:start="87:24" pos:end="87:31"><expr pos:start="87:24" pos:end="87:31"><name pos:start="87:24" pos:end="87:31"><name pos:start="87:24" pos:end="87:24">s</name><operator pos:start="87:25" pos:end="87:26">-&gt;</operator><name pos:start="87:27" pos:end="87:31">avctx</name></name></expr></argument>, <argument pos:start="87:34" pos:end="87:45"><expr pos:start="87:34" pos:end="87:45"><name pos:start="87:34" pos:end="87:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="87:48" pos:end="87:95"><expr pos:start="87:48" pos:end="87:95"><literal type="string" pos:start="87:48" pos:end="87:95">"decode problem on frame %d, @ block (%d, %d)\n"</literal></expr></argument>,

                       <argument pos:start="89:24" pos:end="89:45"><expr pos:start="89:24" pos:end="89:45"><name pos:start="89:24" pos:end="89:45"><name pos:start="89:24" pos:end="89:24">s</name><operator pos:start="89:25" pos:end="89:26">-&gt;</operator><name pos:start="89:27" pos:end="89:31">avctx</name><operator pos:start="89:32" pos:end="89:33">-&gt;</operator><name pos:start="89:34" pos:end="89:45">frame_number</name></name></expr></argument>, <argument pos:start="89:48" pos:end="89:48"><expr pos:start="89:48" pos:end="89:48"><name pos:start="89:48" pos:end="89:48">x</name></expr></argument>, <argument pos:start="89:51" pos:end="89:51"><expr pos:start="89:51" pos:end="89:51"><name pos:start="89:51" pos:end="89:51">y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="91:17" pos:end="91:23">return;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>

    <if_stmt pos:start="99:5" pos:end="107:5"><if pos:start="99:5" pos:end="107:5">if <condition pos:start="99:8" pos:end="99:55">(<expr pos:start="99:9" pos:end="99:54"><call pos:start="99:9" pos:end="99:50"><name pos:start="99:9" pos:end="99:34">bytestream2_get_bytes_left</name><argument_list pos:start="99:35" pos:end="99:50">(<argument pos:start="99:36" pos:end="99:49"><expr pos:start="99:36" pos:end="99:49"><operator pos:start="99:36" pos:end="99:36">&amp;</operator><name pos:start="99:37" pos:end="99:49"><name pos:start="99:37" pos:end="99:37">s</name><operator pos:start="99:38" pos:end="99:39">-&gt;</operator><name pos:start="99:40" pos:end="99:49">stream_ptr</name></name></expr></argument>)</argument_list></call> <operator pos:start="99:52" pos:end="99:52">&gt;</operator> <literal type="number" pos:start="99:54" pos:end="99:54">1</literal></expr>)</condition> <block pos:start="99:57" pos:end="107:5">{<block_content pos:start="101:9" pos:end="105:59">

        <expr_stmt pos:start="101:9" pos:end="105:59"><expr pos:start="101:9" pos:end="105:58"><call pos:start="101:9" pos:end="105:58"><name pos:start="101:9" pos:end="101:14">av_log</name><argument_list pos:start="101:15" pos:end="105:58">(<argument pos:start="101:16" pos:end="101:23"><expr pos:start="101:16" pos:end="101:23"><name pos:start="101:16" pos:end="101:23"><name pos:start="101:16" pos:end="101:16">s</name><operator pos:start="101:17" pos:end="101:18">-&gt;</operator><name pos:start="101:19" pos:end="101:23">avctx</name></name></expr></argument>, <argument pos:start="101:26" pos:end="101:37"><expr pos:start="101:26" pos:end="101:37"><name pos:start="101:26" pos:end="101:37">AV_LOG_DEBUG</name></expr></argument>,

               <argument pos:start="103:16" pos:end="103:58"><expr pos:start="103:16" pos:end="103:58"><literal type="string" pos:start="103:16" pos:end="103:58">"decode finished with %d bytes left over\n"</literal></expr></argument>,

               <argument pos:start="105:16" pos:end="105:57"><expr pos:start="105:16" pos:end="105:57"><call pos:start="105:16" pos:end="105:57"><name pos:start="105:16" pos:end="105:41">bytestream2_get_bytes_left</name><argument_list pos:start="105:42" pos:end="105:57">(<argument pos:start="105:43" pos:end="105:56"><expr pos:start="105:43" pos:end="105:56"><operator pos:start="105:43" pos:end="105:43">&amp;</operator><name pos:start="105:44" pos:end="105:56"><name pos:start="105:44" pos:end="105:44">s</name><operator pos:start="105:45" pos:end="105:46">-&gt;</operator><name pos:start="105:47" pos:end="105:56">stream_ptr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
