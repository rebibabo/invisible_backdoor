<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9625.c" pos:tabs="8"><function pos:start="1:1" pos:end="43:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:37">kvm_s390_vcpu_interrupt_post_load</name><parameter_list pos:start="1:38" pos:end="1:51">(<parameter pos:start="1:39" pos:end="1:50"><decl pos:start="1:39" pos:end="1:50"><type pos:start="1:39" pos:end="1:47"><name pos:start="1:39" pos:end="1:45">S390CPU</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:50">cpu</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="43:1">{<block_content pos:start="5:5" pos:end="41:13">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">CPUState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:16">cs</name> <init pos:start="5:18" pos:end="5:27">= <expr pos:start="5:20" pos:end="5:27"><call pos:start="5:20" pos:end="5:27"><name pos:start="5:20" pos:end="5:22">CPU</name><argument_list pos:start="5:23" pos:end="5:27">(<argument pos:start="5:24" pos:end="5:26"><expr pos:start="5:24" pos:end="5:26"><name pos:start="5:24" pos:end="5:26">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:40"><decl pos:start="7:5" pos:end="7:39"><type pos:start="7:5" pos:end="7:29"><name pos:start="7:5" pos:end="7:29"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:29">kvm_s390_irq_state</name></name></type> <name pos:start="7:31" pos:end="7:39">irq_state</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">r</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="17:5"><if pos:start="13:5" pos:end="17:5">if <condition pos:start="13:8" pos:end="13:64">(<expr pos:start="13:9" pos:end="13:63"><operator pos:start="13:9" pos:end="13:9">!</operator><call pos:start="13:10" pos:end="13:63"><name pos:start="13:10" pos:end="13:28">kvm_check_extension</name><argument_list pos:start="13:29" pos:end="13:63">(<argument pos:start="13:30" pos:end="13:38"><expr pos:start="13:30" pos:end="13:38"><name pos:start="13:30" pos:end="13:38">kvm_state</name></expr></argument>, <argument pos:start="13:41" pos:end="13:62"><expr pos:start="13:41" pos:end="13:62"><name pos:start="13:41" pos:end="13:62">KVM_CAP_S390_IRQ_STATE</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="13:66" pos:end="17:5">{<block_content pos:start="15:9" pos:end="15:23">

        <return pos:start="15:9" pos:end="15:23">return <expr pos:start="15:16" pos:end="15:22"><operator pos:start="15:16" pos:end="15:16">-</operator><name pos:start="15:17" pos:end="15:22">ENOSYS</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="21:5" pos:end="25:5"><if pos:start="21:5" pos:end="25:5">if <condition pos:start="21:8" pos:end="21:38">(<expr pos:start="21:9" pos:end="21:37"><name pos:start="21:9" pos:end="21:32"><name pos:start="21:9" pos:end="21:11">cpu</name><operator pos:start="21:12" pos:end="21:13">-&gt;</operator><name pos:start="21:14" pos:end="21:32">irqstate_saved_size</name></name> <operator pos:start="21:34" pos:end="21:35">==</operator> <literal type="number" pos:start="21:37" pos:end="21:37">0</literal></expr>)</condition> <block pos:start="21:40" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:17">

        <return pos:start="23:9" pos:end="23:17">return <expr pos:start="23:16" pos:end="23:16"><literal type="number" pos:start="23:16" pos:end="23:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:45"><expr pos:start="27:5" pos:end="27:44"><name pos:start="27:5" pos:end="27:17"><name pos:start="27:5" pos:end="27:13">irq_state</name><operator pos:start="27:14" pos:end="27:14">.</operator><name pos:start="27:15" pos:end="27:17">buf</name></name> <operator pos:start="27:19" pos:end="27:19">=</operator> <operator pos:start="27:21" pos:end="27:21">(</operator><name pos:start="27:22" pos:end="27:29">uint64_t</name><operator pos:start="27:30" pos:end="27:30">)</operator> <name pos:start="27:32" pos:end="27:44"><name pos:start="27:32" pos:end="27:34">cpu</name><operator pos:start="27:35" pos:end="27:36">-&gt;</operator><name pos:start="27:37" pos:end="27:44">irqstate</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:45"><expr pos:start="29:5" pos:end="29:44"><name pos:start="29:5" pos:end="29:17"><name pos:start="29:5" pos:end="29:13">irq_state</name><operator pos:start="29:14" pos:end="29:14">.</operator><name pos:start="29:15" pos:end="29:17">len</name></name> <operator pos:start="29:19" pos:end="29:19">=</operator> <name pos:start="29:21" pos:end="29:44"><name pos:start="29:21" pos:end="29:23">cpu</name><operator pos:start="29:24" pos:end="29:25">-&gt;</operator><name pos:start="29:26" pos:end="29:44">irqstate_saved_size</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:63"><expr pos:start="33:5" pos:end="33:62"><name pos:start="33:5" pos:end="33:5">r</name> <operator pos:start="33:7" pos:end="33:7">=</operator> <call pos:start="33:9" pos:end="33:62"><name pos:start="33:9" pos:end="33:22">kvm_vcpu_ioctl</name><argument_list pos:start="33:23" pos:end="33:62">(<argument pos:start="33:24" pos:end="33:25"><expr pos:start="33:24" pos:end="33:25"><name pos:start="33:24" pos:end="33:25">cs</name></expr></argument>, <argument pos:start="33:28" pos:end="33:49"><expr pos:start="33:28" pos:end="33:49"><name pos:start="33:28" pos:end="33:49">KVM_S390_SET_IRQ_STATE</name></expr></argument>, <argument pos:start="33:52" pos:end="33:61"><expr pos:start="33:52" pos:end="33:61"><operator pos:start="33:52" pos:end="33:52">&amp;</operator><name pos:start="33:53" pos:end="33:61">irq_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="39:5"><if pos:start="35:5" pos:end="39:5">if <condition pos:start="35:8" pos:end="35:10">(<expr pos:start="35:9" pos:end="35:9"><name pos:start="35:9" pos:end="35:9">r</name></expr>)</condition> <block pos:start="35:12" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:61">

        <expr_stmt pos:start="37:9" pos:end="37:61"><expr pos:start="37:9" pos:end="37:60"><call pos:start="37:9" pos:end="37:60"><name pos:start="37:9" pos:end="37:20">error_report</name><argument_list pos:start="37:21" pos:end="37:60">(<argument pos:start="37:22" pos:end="37:56"><expr pos:start="37:22" pos:end="37:56"><literal type="string" pos:start="37:22" pos:end="37:56">"Setting interrupt state failed %d"</literal></expr></argument>, <argument pos:start="37:59" pos:end="37:59"><expr pos:start="37:59" pos:end="37:59"><name pos:start="37:59" pos:end="37:59">r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="41:5" pos:end="41:13">return <expr pos:start="41:12" pos:end="41:12"><name pos:start="41:12" pos:end="41:12">r</name></expr>;</return>

</block_content>}</block></function>
</unit>
