<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6995.c" pos:tabs="8"><function pos:start="1:1" pos:end="75:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">qemu_rdma_write</name><parameter_list pos:start="1:27" pos:end="5:40">(<parameter pos:start="1:28" pos:end="1:38"><decl pos:start="1:28" pos:end="1:38"><type pos:start="1:28" pos:end="1:38"><name pos:start="1:28" pos:end="1:35">QEMUFile</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:38">f</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:57"><decl pos:start="1:41" pos:end="1:57"><type pos:start="1:41" pos:end="1:57"><name pos:start="1:41" pos:end="1:51">RDMAContext</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:57">rdma</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:48"><decl pos:start="3:28" pos:end="3:48"><type pos:start="3:28" pos:end="3:48"><name pos:start="3:28" pos:end="3:35">uint64_t</name></type> <name pos:start="3:37" pos:end="3:48">block_offset</name></decl></parameter>, <parameter pos:start="3:51" pos:end="3:65"><decl pos:start="3:51" pos:end="3:65"><type pos:start="3:51" pos:end="3:65"><name pos:start="3:51" pos:end="3:58">uint64_t</name></type> <name pos:start="3:60" pos:end="3:65">offset</name></decl></parameter>,

                           <parameter pos:start="5:28" pos:end="5:39"><decl pos:start="5:28" pos:end="5:39"><type pos:start="5:28" pos:end="5:39"><name pos:start="5:28" pos:end="5:35">uint64_t</name></type> <name pos:start="5:37" pos:end="5:39">len</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="75:1">{<block_content pos:start="9:5" pos:end="73:13">

    <decl_stmt pos:start="9:5" pos:end="9:50"><decl pos:start="9:5" pos:end="9:49"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint64_t</name></type> <name pos:start="9:14" pos:end="9:25">current_addr</name> <init pos:start="9:27" pos:end="9:49">= <expr pos:start="9:29" pos:end="9:49"><name pos:start="9:29" pos:end="9:40">block_offset</name> <operator pos:start="9:42" pos:end="9:42">+</operator> <name pos:start="9:44" pos:end="9:49">offset</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:41"><decl pos:start="11:5" pos:end="11:40"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:18">index</name> <init pos:start="11:20" pos:end="11:40">= <expr pos:start="11:22" pos:end="11:40"><name pos:start="11:22" pos:end="11:40"><name pos:start="11:22" pos:end="11:25">rdma</name><operator pos:start="11:26" pos:end="11:27">-&gt;</operator><name pos:start="11:28" pos:end="11:40">current_index</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:41"><decl pos:start="13:5" pos:end="13:40"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:18">chunk</name> <init pos:start="13:20" pos:end="13:40">= <expr pos:start="13:22" pos:end="13:40"><name pos:start="13:22" pos:end="13:40"><name pos:start="13:22" pos:end="13:25">rdma</name><operator pos:start="13:26" pos:end="13:27">-&gt;</operator><name pos:start="13:28" pos:end="13:40">current_chunk</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:12"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">ret</name></decl>;</decl_stmt>



    <comment type="block" pos:start="19:5" pos:end="19:67">/* If we cannot merge it, we flush the current buffer first. */</comment>

    <if_stmt pos:start="21:5" pos:end="53:5"><if pos:start="21:5" pos:end="53:5">if <condition pos:start="21:8" pos:end="21:60">(<expr pos:start="21:9" pos:end="21:59"><operator pos:start="21:9" pos:end="21:9">!</operator><call pos:start="21:10" pos:end="21:59"><name pos:start="21:10" pos:end="21:34">qemu_rdma_buffer_mergable</name><argument_list pos:start="21:35" pos:end="21:59">(<argument pos:start="21:36" pos:end="21:39"><expr pos:start="21:36" pos:end="21:39"><name pos:start="21:36" pos:end="21:39">rdma</name></expr></argument>, <argument pos:start="21:42" pos:end="21:53"><expr pos:start="21:42" pos:end="21:53"><name pos:start="21:42" pos:end="21:53">current_addr</name></expr></argument>, <argument pos:start="21:56" pos:end="21:58"><expr pos:start="21:56" pos:end="21:58"><name pos:start="21:56" pos:end="21:58">len</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="21:62" pos:end="53:5">{<block_content pos:start="23:9" pos:end="51:36">

        <expr_stmt pos:start="23:9" pos:end="23:45"><expr pos:start="23:9" pos:end="23:44"><name pos:start="23:9" pos:end="23:11">ret</name> <operator pos:start="23:13" pos:end="23:13">=</operator> <call pos:start="23:15" pos:end="23:44"><name pos:start="23:15" pos:end="23:35">qemu_rdma_write_flush</name><argument_list pos:start="23:36" pos:end="23:44">(<argument pos:start="23:37" pos:end="23:37"><expr pos:start="23:37" pos:end="23:37"><name pos:start="23:37" pos:end="23:37">f</name></expr></argument>, <argument pos:start="23:40" pos:end="23:43"><expr pos:start="23:40" pos:end="23:43"><name pos:start="23:40" pos:end="23:43">rdma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="25:9" pos:end="29:9"><if pos:start="25:9" pos:end="29:9">if <condition pos:start="25:12" pos:end="25:16">(<expr pos:start="25:13" pos:end="25:15"><name pos:start="25:13" pos:end="25:15">ret</name></expr>)</condition> <block pos:start="25:18" pos:end="29:9">{<block_content pos:start="27:13" pos:end="27:23">

            <return pos:start="27:13" pos:end="27:23">return <expr pos:start="27:20" pos:end="27:22"><name pos:start="27:20" pos:end="27:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:33"><expr pos:start="31:9" pos:end="31:32"><name pos:start="31:9" pos:end="31:28"><name pos:start="31:9" pos:end="31:12">rdma</name><operator pos:start="31:13" pos:end="31:14">-&gt;</operator><name pos:start="31:15" pos:end="31:28">current_length</name></name> <operator pos:start="31:30" pos:end="31:30">=</operator> <literal type="number" pos:start="31:32" pos:end="31:32">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:42"><expr pos:start="33:9" pos:end="33:41"><name pos:start="33:9" pos:end="33:26"><name pos:start="33:9" pos:end="33:12">rdma</name><operator pos:start="33:13" pos:end="33:14">-&gt;</operator><name pos:start="33:15" pos:end="33:26">current_addr</name></name> <operator pos:start="33:28" pos:end="33:28">=</operator> <name pos:start="33:30" pos:end="33:41">current_addr</name></expr>;</expr_stmt>



        <expr_stmt pos:start="37:9" pos:end="39:70"><expr pos:start="37:9" pos:end="39:69"><name pos:start="37:9" pos:end="37:11">ret</name> <operator pos:start="37:13" pos:end="37:13">=</operator> <call pos:start="37:15" pos:end="39:69"><name pos:start="37:15" pos:end="37:40">qemu_rdma_search_ram_block</name><argument_list pos:start="37:41" pos:end="39:69">(<argument pos:start="37:42" pos:end="37:45"><expr pos:start="37:42" pos:end="37:45"><name pos:start="37:42" pos:end="37:45">rdma</name></expr></argument>, <argument pos:start="37:48" pos:end="37:59"><expr pos:start="37:48" pos:end="37:59"><name pos:start="37:48" pos:end="37:59">block_offset</name></expr></argument>,

                                         <argument pos:start="39:42" pos:end="39:47"><expr pos:start="39:42" pos:end="39:47"><name pos:start="39:42" pos:end="39:47">offset</name></expr></argument>, <argument pos:start="39:50" pos:end="39:52"><expr pos:start="39:50" pos:end="39:52"><name pos:start="39:50" pos:end="39:52">len</name></expr></argument>, <argument pos:start="39:55" pos:end="39:60"><expr pos:start="39:55" pos:end="39:60"><operator pos:start="39:55" pos:end="39:55">&amp;</operator><name pos:start="39:56" pos:end="39:60">index</name></expr></argument>, <argument pos:start="39:63" pos:end="39:68"><expr pos:start="39:63" pos:end="39:68"><operator pos:start="39:63" pos:end="39:63">&amp;</operator><name pos:start="39:64" pos:end="39:68">chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="41:9" pos:end="47:9"><if pos:start="41:9" pos:end="47:9">if <condition pos:start="41:12" pos:end="41:16">(<expr pos:start="41:13" pos:end="41:15"><name pos:start="41:13" pos:end="41:15">ret</name></expr>)</condition> <block pos:start="41:18" pos:end="47:9">{<block_content pos:start="43:13" pos:end="45:23">

            <expr_stmt pos:start="43:13" pos:end="43:57"><expr pos:start="43:13" pos:end="43:56"><call pos:start="43:13" pos:end="43:56"><name pos:start="43:13" pos:end="43:19">fprintf</name><argument_list pos:start="43:20" pos:end="43:56">(<argument pos:start="43:21" pos:end="43:26"><expr pos:start="43:21" pos:end="43:26"><name pos:start="43:21" pos:end="43:26">stderr</name></expr></argument>, <argument pos:start="43:29" pos:end="43:55"><expr pos:start="43:29" pos:end="43:55"><literal type="string" pos:start="43:29" pos:end="43:55">"ram block search failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="45:13" pos:end="45:23">return <expr pos:start="45:20" pos:end="45:22"><name pos:start="45:20" pos:end="45:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:36"><expr pos:start="49:9" pos:end="49:35"><name pos:start="49:9" pos:end="49:27"><name pos:start="49:9" pos:end="49:12">rdma</name><operator pos:start="49:13" pos:end="49:14">-&gt;</operator><name pos:start="49:15" pos:end="49:27">current_index</name></name> <operator pos:start="49:29" pos:end="49:29">=</operator> <name pos:start="49:31" pos:end="49:35">index</name></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:36"><expr pos:start="51:9" pos:end="51:35"><name pos:start="51:9" pos:end="51:27"><name pos:start="51:9" pos:end="51:12">rdma</name><operator pos:start="51:13" pos:end="51:14">-&gt;</operator><name pos:start="51:15" pos:end="51:27">current_chunk</name></name> <operator pos:start="51:29" pos:end="51:29">=</operator> <name pos:start="51:31" pos:end="51:35">chunk</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="57:5" pos:end="57:18">/* merge it */</comment>

    <expr_stmt pos:start="59:5" pos:end="59:32"><expr pos:start="59:5" pos:end="59:31"><name pos:start="59:5" pos:end="59:24"><name pos:start="59:5" pos:end="59:8">rdma</name><operator pos:start="59:9" pos:end="59:10">-&gt;</operator><name pos:start="59:11" pos:end="59:24">current_length</name></name> <operator pos:start="59:26" pos:end="59:27">+=</operator> <name pos:start="59:29" pos:end="59:31">len</name></expr>;</expr_stmt>



    <comment type="block" pos:start="63:5" pos:end="63:41">/* flush it if buffer is too large */</comment>

    <if_stmt pos:start="65:5" pos:end="69:5"><if pos:start="65:5" pos:end="69:5">if <condition pos:start="65:8" pos:end="65:47">(<expr pos:start="65:9" pos:end="65:46"><name pos:start="65:9" pos:end="65:28"><name pos:start="65:9" pos:end="65:12">rdma</name><operator pos:start="65:13" pos:end="65:14">-&gt;</operator><name pos:start="65:15" pos:end="65:28">current_length</name></name> <operator pos:start="65:30" pos:end="65:31">&gt;=</operator> <name pos:start="65:33" pos:end="65:46">RDMA_MERGE_MAX</name></expr>)</condition> <block pos:start="65:49" pos:end="69:5">{<block_content pos:start="67:9" pos:end="67:46">

        <return pos:start="67:9" pos:end="67:46">return <expr pos:start="67:16" pos:end="67:45"><call pos:start="67:16" pos:end="67:45"><name pos:start="67:16" pos:end="67:36">qemu_rdma_write_flush</name><argument_list pos:start="67:37" pos:end="67:45">(<argument pos:start="67:38" pos:end="67:38"><expr pos:start="67:38" pos:end="67:38"><name pos:start="67:38" pos:end="67:38">f</name></expr></argument>, <argument pos:start="67:41" pos:end="67:44"><expr pos:start="67:41" pos:end="67:44"><name pos:start="67:41" pos:end="67:44">rdma</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <return pos:start="73:5" pos:end="73:13">return <expr pos:start="73:12" pos:end="73:12"><literal type="number" pos:start="73:12" pos:end="73:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
