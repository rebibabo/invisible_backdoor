<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13765.c" pos:tabs="8"><function pos:start="1:1" pos:end="93:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">bool</name></type> <name pos:start="1:13" pos:end="1:37">scsi_block_is_passthrough</name><parameter_list pos:start="1:38" pos:end="1:69">(<parameter pos:start="1:39" pos:end="1:54"><decl pos:start="1:39" pos:end="1:54"><type pos:start="1:39" pos:end="1:54"><name pos:start="1:39" pos:end="1:51">SCSIDiskState</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:54">s</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:68"><decl pos:start="1:57" pos:end="1:68"><type pos:start="1:57" pos:end="1:68"><name pos:start="1:57" pos:end="1:63">uint8_t</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:68">buf</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="93:1">{<block_content pos:start="5:5" pos:end="91:16">

    <switch pos:start="5:5" pos:end="87:5">switch <condition pos:start="5:12" pos:end="5:19">(<expr pos:start="5:13" pos:end="5:18"><name pos:start="5:13" pos:end="5:18"><name pos:start="5:13" pos:end="5:15">buf</name><index pos:start="5:16" pos:end="5:18">[<expr pos:start="5:17" pos:end="5:17"><literal type="number" pos:start="5:17" pos:end="5:17">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="5:21" pos:end="87:5">{<block_content pos:start="7:5" pos:end="85:14">

    <case pos:start="7:5" pos:end="7:16">case <expr pos:start="7:10" pos:end="7:15"><name pos:start="7:10" pos:end="7:15">READ_6</name></expr>:</case>

    <case pos:start="9:5" pos:end="9:17">case <expr pos:start="9:10" pos:end="9:16"><name pos:start="9:10" pos:end="9:16">READ_10</name></expr>:</case>

    <case pos:start="11:5" pos:end="11:17">case <expr pos:start="11:10" pos:end="11:16"><name pos:start="11:10" pos:end="11:16">READ_12</name></expr>:</case>

    <case pos:start="13:5" pos:end="13:17">case <expr pos:start="13:10" pos:end="13:16"><name pos:start="13:10" pos:end="13:16">READ_16</name></expr>:</case>

    <case pos:start="15:5" pos:end="15:19">case <expr pos:start="15:10" pos:end="15:18"><name pos:start="15:10" pos:end="15:18">VERIFY_10</name></expr>:</case>

    <case pos:start="17:5" pos:end="17:19">case <expr pos:start="17:10" pos:end="17:18"><name pos:start="17:10" pos:end="17:18">VERIFY_12</name></expr>:</case>

    <case pos:start="19:5" pos:end="19:19">case <expr pos:start="19:10" pos:end="19:18"><name pos:start="19:10" pos:end="19:18">VERIFY_16</name></expr>:</case>

    <case pos:start="21:5" pos:end="21:17">case <expr pos:start="21:10" pos:end="21:16"><name pos:start="21:10" pos:end="21:16">WRITE_6</name></expr>:</case>

    <case pos:start="23:5" pos:end="23:18">case <expr pos:start="23:10" pos:end="23:17"><name pos:start="23:10" pos:end="23:17">WRITE_10</name></expr>:</case>

    <case pos:start="25:5" pos:end="25:18">case <expr pos:start="25:10" pos:end="25:17"><name pos:start="25:10" pos:end="25:17">WRITE_12</name></expr>:</case>

    <case pos:start="27:5" pos:end="27:18">case <expr pos:start="27:10" pos:end="27:17"><name pos:start="27:10" pos:end="27:17">WRITE_16</name></expr>:</case>

    <case pos:start="29:5" pos:end="29:25">case <expr pos:start="29:10" pos:end="29:24"><name pos:start="29:10" pos:end="29:24">WRITE_VERIFY_10</name></expr>:</case>

    <case pos:start="31:5" pos:end="31:25">case <expr pos:start="31:10" pos:end="31:24"><name pos:start="31:10" pos:end="31:24">WRITE_VERIFY_12</name></expr>:</case>

    <case pos:start="33:5" pos:end="33:25">case <expr pos:start="33:10" pos:end="33:24"><name pos:start="33:10" pos:end="33:24">WRITE_VERIFY_16</name></expr>:</case>

        <comment type="block" pos:start="35:9" pos:end="43:11">/* If we are not using O_DIRECT, we might read stale data from the

         * host cache if writes were made using other commands than these

         * ones (such as WRITE SAME or EXTENDED COPY, etc.).  So, without

         * O_DIRECT everything must go through SG_IO.

         */</comment>

        <if_stmt pos:start="45:9" pos:end="49:9"><if pos:start="45:9" pos:end="49:9">if <condition pos:start="45:12" pos:end="45:64">(<expr pos:start="45:13" pos:end="45:63"><operator pos:start="45:13" pos:end="45:13">!</operator><operator pos:start="45:14" pos:end="45:14">(</operator><call pos:start="45:15" pos:end="45:45"><name pos:start="45:15" pos:end="45:28">bdrv_get_flags</name><argument_list pos:start="45:29" pos:end="45:45">(<argument pos:start="45:30" pos:end="45:44"><expr pos:start="45:30" pos:end="45:44"><name pos:start="45:30" pos:end="45:44"><name pos:start="45:30" pos:end="45:30">s</name><operator pos:start="45:31" pos:end="45:32">-&gt;</operator><name pos:start="45:33" pos:end="45:36">qdev</name><operator pos:start="45:37" pos:end="45:37">.</operator><name pos:start="45:38" pos:end="45:41">conf</name><operator pos:start="45:42" pos:end="45:42">.</operator><name pos:start="45:43" pos:end="45:44">bs</name></name></expr></argument>)</argument_list></call> <operator pos:start="45:47" pos:end="45:47">&amp;</operator> <name pos:start="45:49" pos:end="45:62">BDRV_O_NOCACHE</name><operator pos:start="45:63" pos:end="45:63">)</operator></expr>)</condition> <block pos:start="45:66" pos:end="49:9">{<block_content pos:start="47:13" pos:end="47:18">

            <break pos:start="47:13" pos:end="47:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="53:9" pos:end="71:11">/* MMC writing cannot be done via pread/pwrite, because it sometimes

         * involves writing beyond the maximum LBA or to negative LBA (lead-in).

         * And once you do these writes, reading from the block device is

         * unreliable, too.  It is even possible that reads deliver random data

         * from the host page cache (this is probably a Linux bug).

         *

         * We might use scsi_disk_dma_reqops as long as no writing commands are

         * seen, but performance usually isn't paramount on optical media.  So,

         * just make scsi-block operate the same as scsi-generic for them.

         */</comment>

        <if_stmt pos:start="73:9" pos:end="77:9"><if pos:start="73:9" pos:end="77:9">if <condition pos:start="73:12" pos:end="73:37">(<expr pos:start="73:13" pos:end="73:36"><name pos:start="73:13" pos:end="73:24"><name pos:start="73:13" pos:end="73:13">s</name><operator pos:start="73:14" pos:end="73:15">-&gt;</operator><name pos:start="73:16" pos:end="73:19">qdev</name><operator pos:start="73:20" pos:end="73:20">.</operator><name pos:start="73:21" pos:end="73:24">type</name></name> <operator pos:start="73:26" pos:end="73:27">!=</operator> <name pos:start="73:29" pos:end="73:36">TYPE_ROM</name></expr>)</condition> <block pos:start="73:39" pos:end="77:9">{<block_content pos:start="75:13" pos:end="75:25">

            <return pos:start="75:13" pos:end="75:25">return <expr pos:start="75:20" pos:end="75:24"><name pos:start="75:20" pos:end="75:24">false</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <break pos:start="79:9" pos:end="79:14">break;</break>



    <default pos:start="83:5" pos:end="83:12">default:</default>

        <break pos:start="85:9" pos:end="85:14">break;</break>

    </block_content>}</block></switch>



    <return pos:start="91:5" pos:end="91:16">return <expr pos:start="91:12" pos:end="91:15"><name pos:start="91:12" pos:end="91:15">true</name></expr>;</return>

</block_content>}</block></function>
</unit>
