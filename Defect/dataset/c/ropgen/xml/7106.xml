<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7106.c" pos:tabs="8"><function pos:start="1:1" pos:end="103:1"><type pos:start="1:1" pos:end="1:7"><name pos:start="1:1" pos:end="1:7">float64</name></type> <name pos:start="1:9" pos:end="1:28">float64_round_to_int</name><parameter_list pos:start="1:29" pos:end="1:54">( <parameter pos:start="1:31" pos:end="1:52"><decl pos:start="1:31" pos:end="1:52"><type pos:start="1:31" pos:end="1:39"><name pos:start="1:31" pos:end="1:37">float64</name> <name pos:start="1:39" pos:end="1:39">a</name></type> <name pos:start="1:41" pos:end="1:52">STATUS_PARAM</name></decl></parameter> )</parameter_list>

<block pos:start="3:1" pos:end="103:1">{<block_content pos:start="5:5" pos:end="99:13">

    <decl_stmt pos:start="5:5" pos:end="5:15"><decl pos:start="5:5" pos:end="5:14"><type pos:start="5:5" pos:end="5:8"><name pos:start="5:5" pos:end="5:8">flag</name></type> <name pos:start="5:10" pos:end="5:14">aSign</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:15"><decl pos:start="7:5" pos:end="7:14"><type pos:start="7:5" pos:end="7:9"><name pos:start="7:5" pos:end="7:9">int16</name></type> <name pos:start="7:11" pos:end="7:14">aExp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:38"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:10">bits64</name></type> <name pos:start="9:12" pos:end="9:22">lastBitMask</name></decl>, <decl pos:start="9:25" pos:end="9:37"><type ref="prev" pos:start="9:5" pos:end="9:10"/><name pos:start="9:25" pos:end="9:37">roundBitsMask</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">int8</name></type> <name pos:start="11:10" pos:end="11:21">roundingMode</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:14"><decl pos:start="13:5" pos:end="13:13"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">float64</name></type> <name pos:start="13:13" pos:end="13:13">z</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:34"><expr pos:start="17:5" pos:end="17:33"><name pos:start="17:5" pos:end="17:8">aExp</name> <operator pos:start="17:10" pos:end="17:10">=</operator> <call pos:start="17:12" pos:end="17:33"><name pos:start="17:12" pos:end="17:28">extractFloat64Exp</name><argument_list pos:start="17:29" pos:end="17:33">( <argument pos:start="17:31" pos:end="17:31"><expr pos:start="17:31" pos:end="17:31"><name pos:start="17:31" pos:end="17:31">a</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="29:5"><if pos:start="19:5" pos:end="29:5">if <condition pos:start="19:8" pos:end="19:24">( <expr pos:start="19:10" pos:end="19:22"><literal type="number" pos:start="19:10" pos:end="19:14">0x433</literal> <operator pos:start="19:16" pos:end="19:17">&lt;=</operator> <name pos:start="19:19" pos:end="19:22">aExp</name></expr> )</condition> <block pos:start="19:26" pos:end="29:5">{<block_content pos:start="21:9" pos:end="27:17">

        <if_stmt pos:start="21:9" pos:end="25:9"><if pos:start="21:9" pos:end="25:9">if <condition pos:start="21:12" pos:end="21:59">( <expr pos:start="21:14" pos:end="21:57"><operator pos:start="21:14" pos:end="21:14">(</operator> <name pos:start="21:16" pos:end="21:19">aExp</name> <operator pos:start="21:21" pos:end="21:22">==</operator> <literal type="number" pos:start="21:24" pos:end="21:28">0x7FF</literal> <operator pos:start="21:30" pos:end="21:30">)</operator> <operator pos:start="21:32" pos:end="21:33">&amp;&amp;</operator> <call pos:start="21:35" pos:end="21:57"><name pos:start="21:35" pos:end="21:52">extractFloat64Frac</name><argument_list pos:start="21:53" pos:end="21:57">( <argument pos:start="21:55" pos:end="21:55"><expr pos:start="21:55" pos:end="21:55"><name pos:start="21:55" pos:end="21:55">a</name></expr></argument> )</argument_list></call></expr> )</condition> <block pos:start="21:61" pos:end="25:9">{<block_content pos:start="23:13" pos:end="23:58">

            <return pos:start="23:13" pos:end="23:58">return <macro pos:start="23:20" pos:end="23:57"><name pos:start="23:20" pos:end="23:38">propagateFloat64NaN</name><argument_list pos:start="23:39" pos:end="23:57">( <argument pos:start="23:41" pos:end="23:41">a</argument>, <argument pos:start="23:44" pos:end="23:55">a STATUS_VAR</argument> )</argument_list></macro>;</return>

        </block_content>}</block></if></if_stmt>

        <return pos:start="27:9" pos:end="27:17">return <expr pos:start="27:16" pos:end="27:16"><name pos:start="27:16" pos:end="27:16">a</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="31:5" pos:end="65:5"><if pos:start="31:5" pos:end="65:5">if <condition pos:start="31:8" pos:end="31:23">( <expr pos:start="31:10" pos:end="31:21"><name pos:start="31:10" pos:end="31:13">aExp</name> <operator pos:start="31:15" pos:end="31:15">&lt;</operator> <literal type="number" pos:start="31:17" pos:end="31:21">0x3FF</literal></expr> )</condition> <block pos:start="31:25" pos:end="65:5">{<block_content pos:start="33:9" pos:end="63:42">

        <if_stmt pos:start="33:9" pos:end="33:47"><if pos:start="33:9" pos:end="33:47">if <condition pos:start="33:12" pos:end="33:37">( <expr pos:start="33:14" pos:end="33:35"><operator pos:start="33:14" pos:end="33:14">(</operator><name pos:start="33:15" pos:end="33:20">bits64</name><operator pos:start="33:21" pos:end="33:21">)</operator> <operator pos:start="33:23" pos:end="33:23">(</operator> <name pos:start="33:25" pos:end="33:25">a</name><operator pos:start="33:26" pos:end="33:27">&lt;&lt;</operator><literal type="number" pos:start="33:28" pos:end="33:28">1</literal> <operator pos:start="33:30" pos:end="33:30">)</operator> <operator pos:start="33:32" pos:end="33:33">==</operator> <literal type="number" pos:start="33:35" pos:end="33:35">0</literal></expr> )</condition><block type="pseudo" pos:start="33:39" pos:end="33:47"><block_content pos:start="33:39" pos:end="33:47"> <return pos:start="33:39" pos:end="33:47">return <expr pos:start="33:46" pos:end="33:46"><name pos:start="33:46" pos:end="33:46">a</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:60"><expr pos:start="35:9" pos:end="35:59"><call pos:start="35:9" pos:end="35:37"><name pos:start="35:9" pos:end="35:14">STATUS</name><argument_list pos:start="35:15" pos:end="35:37">(<argument pos:start="35:16" pos:end="35:36"><expr pos:start="35:16" pos:end="35:36"><name pos:start="35:16" pos:end="35:36">float_exception_flags</name></expr></argument>)</argument_list></call> <operator pos:start="35:39" pos:end="35:40">|=</operator> <name pos:start="35:42" pos:end="35:59">float_flag_inexact</name></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:40"><expr pos:start="37:9" pos:end="37:39"><name pos:start="37:9" pos:end="37:13">aSign</name> <operator pos:start="37:15" pos:end="37:15">=</operator> <call pos:start="37:17" pos:end="37:39"><name pos:start="37:17" pos:end="37:34">extractFloat64Sign</name><argument_list pos:start="37:35" pos:end="37:39">( <argument pos:start="37:37" pos:end="37:37"><expr pos:start="37:37" pos:end="37:37"><name pos:start="37:37" pos:end="37:37">a</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="39:9" pos:end="61:9">switch <condition pos:start="39:16" pos:end="39:46">( <expr pos:start="39:18" pos:end="39:44"><call pos:start="39:18" pos:end="39:44"><name pos:start="39:18" pos:end="39:23">STATUS</name><argument_list pos:start="39:24" pos:end="39:44">(<argument pos:start="39:25" pos:end="39:43"><expr pos:start="39:25" pos:end="39:43"><name pos:start="39:25" pos:end="39:43">float_rounding_mode</name></expr></argument>)</argument_list></call></expr> )</condition> <block pos:start="39:48" pos:end="61:9">{<block_content pos:start="41:10" pos:end="59:78">

         <case pos:start="41:10" pos:end="41:39">case <expr pos:start="41:15" pos:end="41:38"><name pos:start="41:15" pos:end="41:38">float_round_nearest_even</name></expr>:</case>

            <if_stmt pos:start="43:13" pos:end="47:13"><if pos:start="43:13" pos:end="47:13">if <condition pos:start="43:16" pos:end="43:63">( <expr pos:start="43:18" pos:end="43:61"><operator pos:start="43:18" pos:end="43:18">(</operator> <name pos:start="43:20" pos:end="43:23">aExp</name> <operator pos:start="43:25" pos:end="43:26">==</operator> <literal type="number" pos:start="43:28" pos:end="43:32">0x3FE</literal> <operator pos:start="43:34" pos:end="43:34">)</operator> <operator pos:start="43:36" pos:end="43:37">&amp;&amp;</operator> <call pos:start="43:39" pos:end="43:61"><name pos:start="43:39" pos:end="43:56">extractFloat64Frac</name><argument_list pos:start="43:57" pos:end="43:61">( <argument pos:start="43:59" pos:end="43:59"><expr pos:start="43:59" pos:end="43:59"><name pos:start="43:59" pos:end="43:59">a</name></expr></argument> )</argument_list></call></expr> )</condition> <block pos:start="43:65" pos:end="47:13">{<block_content pos:start="45:17" pos:end="45:54">

                <return pos:start="45:17" pos:end="45:54">return <expr pos:start="45:24" pos:end="45:53"><call pos:start="45:24" pos:end="45:53"><name pos:start="45:24" pos:end="45:34">packFloat64</name><argument_list pos:start="45:35" pos:end="45:53">( <argument pos:start="45:37" pos:end="45:41"><expr pos:start="45:37" pos:end="45:41"><name pos:start="45:37" pos:end="45:41">aSign</name></expr></argument>, <argument pos:start="45:44" pos:end="45:48"><expr pos:start="45:44" pos:end="45:48"><literal type="number" pos:start="45:44" pos:end="45:48">0x3FF</literal></expr></argument>, <argument pos:start="45:51" pos:end="45:51"><expr pos:start="45:51" pos:end="45:51"><literal type="number" pos:start="45:51" pos:end="45:51">0</literal></expr></argument> )</argument_list></call></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <break pos:start="49:13" pos:end="49:18">break;</break>

         <case pos:start="51:10" pos:end="51:31">case <expr pos:start="51:15" pos:end="51:30"><name pos:start="51:15" pos:end="51:30">float_round_down</name></expr>:</case>

            <return pos:start="53:13" pos:end="53:59">return <expr pos:start="53:20" pos:end="53:58"><ternary pos:start="53:20" pos:end="53:58"><condition pos:start="53:20" pos:end="53:26"><expr pos:start="53:20" pos:end="53:24"><name pos:start="53:20" pos:end="53:24">aSign</name></expr> ?</condition><then pos:start="53:28" pos:end="53:54"> <expr pos:start="53:28" pos:end="53:54"><call pos:start="53:28" pos:end="53:54"><name pos:start="53:28" pos:end="53:32">LIT64</name><argument_list pos:start="53:33" pos:end="53:54">( <argument pos:start="53:35" pos:end="53:52"><expr pos:start="53:35" pos:end="53:52"><literal type="number" pos:start="53:35" pos:end="53:52">0xBFF0000000000000</literal></expr></argument> )</argument_list></call></expr> </then><else pos:start="53:56" pos:end="53:58">: <expr pos:start="53:58" pos:end="53:58"><literal type="number" pos:start="53:58" pos:end="53:58">0</literal></expr></else></ternary></expr>;</return>

         <case pos:start="55:10" pos:end="55:29">case <expr pos:start="55:15" pos:end="55:28"><name pos:start="55:15" pos:end="55:28">float_round_up</name></expr>:</case>

            <return pos:start="57:13" pos:end="59:78">return

            <expr pos:start="59:13" pos:end="59:77"><ternary pos:start="59:13" pos:end="59:77"><condition pos:start="59:13" pos:end="59:19"><expr pos:start="59:13" pos:end="59:17"><name pos:start="59:13" pos:end="59:17">aSign</name></expr> ?</condition><then pos:start="59:21" pos:end="59:47"> <expr pos:start="59:21" pos:end="59:47"><call pos:start="59:21" pos:end="59:47"><name pos:start="59:21" pos:end="59:25">LIT64</name><argument_list pos:start="59:26" pos:end="59:47">( <argument pos:start="59:28" pos:end="59:45"><expr pos:start="59:28" pos:end="59:45"><literal type="number" pos:start="59:28" pos:end="59:45">0x8000000000000000</literal></expr></argument> )</argument_list></call></expr> </then><else pos:start="59:49" pos:end="59:77">: <expr pos:start="59:51" pos:end="59:77"><call pos:start="59:51" pos:end="59:77"><name pos:start="59:51" pos:end="59:55">LIT64</name><argument_list pos:start="59:56" pos:end="59:77">( <argument pos:start="59:58" pos:end="59:75"><expr pos:start="59:58" pos:end="59:75"><literal type="number" pos:start="59:58" pos:end="59:75">0x3FF0000000000000</literal></expr></argument> )</argument_list></call></expr></else></ternary></expr>;</return>

        </block_content>}</block></switch>

        <return pos:start="63:9" pos:end="63:42">return <expr pos:start="63:16" pos:end="63:41"><call pos:start="63:16" pos:end="63:41"><name pos:start="63:16" pos:end="63:26">packFloat64</name><argument_list pos:start="63:27" pos:end="63:41">( <argument pos:start="63:29" pos:end="63:33"><expr pos:start="63:29" pos:end="63:33"><name pos:start="63:29" pos:end="63:33">aSign</name></expr></argument>, <argument pos:start="63:36" pos:end="63:36"><expr pos:start="63:36" pos:end="63:36"><literal type="number" pos:start="63:36" pos:end="63:36">0</literal></expr></argument>, <argument pos:start="63:39" pos:end="63:39"><expr pos:start="63:39" pos:end="63:39"><literal type="number" pos:start="63:39" pos:end="63:39">0</literal></expr></argument> )</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:20"><expr pos:start="67:5" pos:end="67:19"><name pos:start="67:5" pos:end="67:15">lastBitMask</name> <operator pos:start="67:17" pos:end="67:17">=</operator> <literal type="number" pos:start="67:19" pos:end="67:19">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:33"><expr pos:start="69:5" pos:end="69:32"><name pos:start="69:5" pos:end="69:15">lastBitMask</name> <operator pos:start="69:17" pos:end="69:19">&lt;&lt;=</operator> <literal type="number" pos:start="69:21" pos:end="69:27">0x433</literal> <operator pos:start="69:27" pos:end="69:27">-</operator> <name pos:start="69:29" pos:end="69:32">aExp</name></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:36"><expr pos:start="71:5" pos:end="71:35"><name pos:start="71:5" pos:end="71:17">roundBitsMask</name> <operator pos:start="71:19" pos:end="71:19">=</operator> <name pos:start="71:21" pos:end="71:31">lastBitMask</name> <operator pos:start="71:33" pos:end="71:33">-</operator> <literal type="number" pos:start="71:35" pos:end="71:35">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:10"><expr pos:start="73:5" pos:end="73:9"><name pos:start="73:5" pos:end="73:5">z</name> <operator pos:start="73:7" pos:end="73:7">=</operator> <name pos:start="73:9" pos:end="73:9">a</name></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:47"><expr pos:start="75:5" pos:end="75:46"><name pos:start="75:5" pos:end="75:16">roundingMode</name> <operator pos:start="75:18" pos:end="75:18">=</operator> <call pos:start="75:20" pos:end="75:46"><name pos:start="75:20" pos:end="75:25">STATUS</name><argument_list pos:start="75:26" pos:end="75:46">(<argument pos:start="75:27" pos:end="75:45"><expr pos:start="75:27" pos:end="75:45"><name pos:start="75:27" pos:end="75:45">float_rounding_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="77:5" pos:end="93:5"><if pos:start="77:5" pos:end="83:5">if <condition pos:start="77:8" pos:end="77:51">( <expr pos:start="77:10" pos:end="77:49"><name pos:start="77:10" pos:end="77:21">roundingMode</name> <operator pos:start="77:23" pos:end="77:24">==</operator> <name pos:start="77:26" pos:end="77:49">float_round_nearest_even</name></expr> )</condition> <block pos:start="77:53" pos:end="83:5">{<block_content pos:start="79:9" pos:end="81:61">

        <expr_stmt pos:start="79:9" pos:end="79:28"><expr pos:start="79:9" pos:end="79:27"><name pos:start="79:9" pos:end="79:9">z</name> <operator pos:start="79:11" pos:end="79:12">+=</operator> <name pos:start="79:14" pos:end="79:24">lastBitMask</name><operator pos:start="79:25" pos:end="79:26">&gt;&gt;</operator><literal type="number" pos:start="79:27" pos:end="79:27">1</literal></expr>;</expr_stmt>

        <if_stmt pos:start="81:9" pos:end="81:61"><if pos:start="81:9" pos:end="81:61">if <condition pos:start="81:12" pos:end="81:41">( <expr pos:start="81:14" pos:end="81:39"><operator pos:start="81:14" pos:end="81:14">(</operator> <name pos:start="81:16" pos:end="81:16">z</name> <operator pos:start="81:18" pos:end="81:18">&amp;</operator> <name pos:start="81:20" pos:end="81:32">roundBitsMask</name> <operator pos:start="81:34" pos:end="81:34">)</operator> <operator pos:start="81:36" pos:end="81:37">==</operator> <literal type="number" pos:start="81:39" pos:end="81:39">0</literal></expr> )</condition><block type="pseudo" pos:start="81:43" pos:end="81:61"><block_content pos:start="81:43" pos:end="81:61"> <expr_stmt pos:start="81:43" pos:end="81:61"><expr pos:start="81:43" pos:end="81:60"><name pos:start="81:43" pos:end="81:43">z</name> <operator pos:start="81:45" pos:end="81:46">&amp;=</operator> <operator pos:start="81:48" pos:end="81:48">~</operator> <name pos:start="81:50" pos:end="81:60">lastBitMask</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="85:5" pos:end="93:5">else if <condition pos:start="85:13" pos:end="85:51">( <expr pos:start="85:15" pos:end="85:49"><name pos:start="85:15" pos:end="85:26">roundingMode</name> <operator pos:start="85:28" pos:end="85:29">!=</operator> <name pos:start="85:31" pos:end="85:49">float_round_to_zero</name></expr> )</condition> <block pos:start="85:53" pos:end="93:5">{<block_content pos:start="87:9" pos:end="91:9">

        <if_stmt pos:start="87:9" pos:end="91:9"><if pos:start="87:9" pos:end="91:9">if <condition pos:start="87:12" pos:end="87:75">( <expr pos:start="87:14" pos:end="87:73"><call pos:start="87:14" pos:end="87:36"><name pos:start="87:14" pos:end="87:31">extractFloat64Sign</name><argument_list pos:start="87:32" pos:end="87:36">( <argument pos:start="87:34" pos:end="87:34"><expr pos:start="87:34" pos:end="87:34"><name pos:start="87:34" pos:end="87:34">z</name></expr></argument> )</argument_list></call> <operator pos:start="87:38" pos:end="87:38">^</operator> <operator pos:start="87:40" pos:end="87:40">(</operator> <name pos:start="87:42" pos:end="87:53">roundingMode</name> <operator pos:start="87:55" pos:end="87:56">==</operator> <name pos:start="87:58" pos:end="87:71">float_round_up</name> <operator pos:start="87:73" pos:end="87:73">)</operator></expr> )</condition> <block pos:start="87:77" pos:end="91:9">{<block_content pos:start="89:13" pos:end="89:31">

            <expr_stmt pos:start="89:13" pos:end="89:31"><expr pos:start="89:13" pos:end="89:30"><name pos:start="89:13" pos:end="89:13">z</name> <operator pos:start="89:15" pos:end="89:16">+=</operator> <name pos:start="89:18" pos:end="89:30">roundBitsMask</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:25"><expr pos:start="95:5" pos:end="95:24"><name pos:start="95:5" pos:end="95:5">z</name> <operator pos:start="95:7" pos:end="95:8">&amp;=</operator> <operator pos:start="95:10" pos:end="95:10">~</operator> <name pos:start="95:12" pos:end="95:24">roundBitsMask</name></expr>;</expr_stmt>

    <if_stmt pos:start="97:5" pos:end="97:70"><if pos:start="97:5" pos:end="97:70">if <condition pos:start="97:8" pos:end="97:17">( <expr pos:start="97:10" pos:end="97:15"><name pos:start="97:10" pos:end="97:10">z</name> <operator pos:start="97:12" pos:end="97:13">!=</operator> <name pos:start="97:15" pos:end="97:15">a</name></expr> )</condition><block type="pseudo" pos:start="97:19" pos:end="97:70"><block_content pos:start="97:19" pos:end="97:70"> <expr_stmt pos:start="97:19" pos:end="97:70"><expr pos:start="97:19" pos:end="97:69"><call pos:start="97:19" pos:end="97:47"><name pos:start="97:19" pos:end="97:24">STATUS</name><argument_list pos:start="97:25" pos:end="97:47">(<argument pos:start="97:26" pos:end="97:46"><expr pos:start="97:26" pos:end="97:46"><name pos:start="97:26" pos:end="97:46">float_exception_flags</name></expr></argument>)</argument_list></call> <operator pos:start="97:49" pos:end="97:50">|=</operator> <name pos:start="97:52" pos:end="97:69">float_flag_inexact</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="99:5" pos:end="99:13">return <expr pos:start="99:12" pos:end="99:12"><name pos:start="99:12" pos:end="99:12">z</name></expr>;</return>



</block_content>}</block></function>
</unit>
