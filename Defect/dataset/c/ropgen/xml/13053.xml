<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13053.c" pos:tabs="8"><function pos:start="1:1" pos:end="137:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">numa_node_parse</name><parameter_list pos:start="1:28" pos:end="1:80">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:43">NumaNodeOptions</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:49">node</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:65"><decl pos:start="1:52" pos:end="1:65"><type pos:start="1:52" pos:end="1:65"><name pos:start="1:52" pos:end="1:59">QemuOpts</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:65">opts</name></decl></parameter>, <parameter pos:start="1:68" pos:end="1:79"><decl pos:start="1:68" pos:end="1:79"><type pos:start="1:68" pos:end="1:79"><name pos:start="1:68" pos:end="1:72">Error</name> <modifier pos:start="1:74" pos:end="1:74">*</modifier><modifier pos:start="1:75" pos:end="1:75">*</modifier></type><name pos:start="1:76" pos:end="1:79">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="137:1">{<block_content pos:start="5:5" pos:end="135:55">

    <decl_stmt pos:start="5:5" pos:end="5:20"><decl pos:start="5:5" pos:end="5:19"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint16_t</name></type> <name pos:start="5:14" pos:end="5:19">nodenr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">uint16List</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:20">cpus</name> <init pos:start="7:22" pos:end="7:27">= <expr pos:start="7:24" pos:end="7:27"><name pos:start="7:24" pos:end="7:27">NULL</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="19:5"><if pos:start="11:5" pos:end="15:5">if <condition pos:start="11:8" pos:end="11:25">(<expr pos:start="11:9" pos:end="11:24"><name pos:start="11:9" pos:end="11:24"><name pos:start="11:9" pos:end="11:12">node</name><operator pos:start="11:13" pos:end="11:14">-&gt;</operator><name pos:start="11:15" pos:end="11:24">has_nodeid</name></name></expr>)</condition> <block pos:start="11:27" pos:end="15:5">{<block_content pos:start="13:9" pos:end="13:30">

        <expr_stmt pos:start="13:9" pos:end="13:30"><expr pos:start="13:9" pos:end="13:29"><name pos:start="13:9" pos:end="13:14">nodenr</name> <operator pos:start="13:16" pos:end="13:16">=</operator> <name pos:start="13:18" pos:end="13:29"><name pos:start="13:18" pos:end="13:21">node</name><operator pos:start="13:22" pos:end="13:23">-&gt;</operator><name pos:start="13:24" pos:end="13:29">nodeid</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="15:7" pos:end="19:5">else <block pos:start="15:12" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:31">

        <expr_stmt pos:start="17:9" pos:end="17:31"><expr pos:start="17:9" pos:end="17:30"><name pos:start="17:9" pos:end="17:14">nodenr</name> <operator pos:start="17:16" pos:end="17:16">=</operator> <name pos:start="17:18" pos:end="17:30">nb_numa_nodes</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="23:5" pos:end="31:5"><if pos:start="23:5" pos:end="31:5">if <condition pos:start="23:8" pos:end="23:28">(<expr pos:start="23:9" pos:end="23:27"><name pos:start="23:9" pos:end="23:14">nodenr</name> <operator pos:start="23:16" pos:end="23:17">&gt;=</operator> <name pos:start="23:19" pos:end="23:27">MAX_NODES</name></expr>)</condition> <block pos:start="23:30" pos:end="31:5">{<block_content pos:start="25:9" pos:end="29:15">

        <expr_stmt pos:start="25:9" pos:end="27:38"><expr pos:start="25:9" pos:end="27:37"><call pos:start="25:9" pos:end="27:37"><name pos:start="25:9" pos:end="25:18">error_setg</name><argument_list pos:start="25:19" pos:end="27:37">(<argument pos:start="25:20" pos:end="25:23"><expr pos:start="25:20" pos:end="25:23"><name pos:start="25:20" pos:end="25:23">errp</name></expr></argument>, <argument pos:start="25:26" pos:end="27:28"><expr pos:start="25:26" pos:end="27:28"><literal type="string" pos:start="25:26" pos:end="25:62">"Max number of NUMA nodes reached: %"</literal>

                   <name pos:start="27:20" pos:end="27:25">PRIu16</name> <literal type="string" pos:start="27:27" pos:end="27:28">""</literal></expr></argument>, <argument pos:start="27:31" pos:end="27:36"><expr pos:start="27:31" pos:end="27:36"><name pos:start="27:31" pos:end="27:36">nodenr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:34">(<expr pos:start="35:9" pos:end="35:33"><name pos:start="35:9" pos:end="35:25"><name pos:start="35:9" pos:end="35:17">numa_info</name><index pos:start="35:18" pos:end="35:25">[<expr pos:start="35:19" pos:end="35:24"><name pos:start="35:19" pos:end="35:24">nodenr</name></expr>]</index></name><operator pos:start="35:26" pos:end="35:26">.</operator><name pos:start="35:27" pos:end="35:33">present</name></expr>)</condition> <block pos:start="35:36" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:15">

        <expr_stmt pos:start="37:9" pos:end="37:68"><expr pos:start="37:9" pos:end="37:67"><call pos:start="37:9" pos:end="37:67"><name pos:start="37:9" pos:end="37:18">error_setg</name><argument_list pos:start="37:19" pos:end="37:67">(<argument pos:start="37:20" pos:end="37:23"><expr pos:start="37:20" pos:end="37:23"><name pos:start="37:20" pos:end="37:23">errp</name></expr></argument>, <argument pos:start="37:26" pos:end="37:58"><expr pos:start="37:26" pos:end="37:58"><literal type="string" pos:start="37:26" pos:end="37:51">"Duplicate NUMA nodeid: %"</literal> <name pos:start="37:53" pos:end="37:58">PRIu16</name></expr></argument>, <argument pos:start="37:61" pos:end="37:66"><expr pos:start="37:61" pos:end="37:66"><name pos:start="37:61" pos:end="37:66">nodenr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="45:5" pos:end="59:5">for <control pos:start="45:9" pos:end="45:52">(<init pos:start="45:10" pos:end="45:27"><expr pos:start="45:10" pos:end="45:26"><name pos:start="45:10" pos:end="45:13">cpus</name> <operator pos:start="45:15" pos:end="45:15">=</operator> <name pos:start="45:17" pos:end="45:26"><name pos:start="45:17" pos:end="45:20">node</name><operator pos:start="45:21" pos:end="45:22">-&gt;</operator><name pos:start="45:23" pos:end="45:26">cpus</name></name></expr>;</init> <condition pos:start="45:29" pos:end="45:33"><expr pos:start="45:29" pos:end="45:32"><name pos:start="45:29" pos:end="45:32">cpus</name></expr>;</condition> <incr pos:start="45:35" pos:end="45:51"><expr pos:start="45:35" pos:end="45:51"><name pos:start="45:35" pos:end="45:38">cpus</name> <operator pos:start="45:40" pos:end="45:40">=</operator> <name pos:start="45:42" pos:end="45:51"><name pos:start="45:42" pos:end="45:45">cpus</name><operator pos:start="45:46" pos:end="45:47">-&gt;</operator><name pos:start="45:48" pos:end="45:51">next</name></name></expr></incr>)</control> <block pos:start="45:54" pos:end="59:5">{<block_content pos:start="47:9" pos:end="57:63">

        <if_stmt pos:start="47:9" pos:end="55:9"><if pos:start="47:9" pos:end="55:9">if <condition pos:start="47:12" pos:end="47:44">(<expr pos:start="47:13" pos:end="47:43"><name pos:start="47:13" pos:end="47:23"><name pos:start="47:13" pos:end="47:16">cpus</name><operator pos:start="47:17" pos:end="47:18">-&gt;</operator><name pos:start="47:19" pos:end="47:23">value</name></name> <operator pos:start="47:25" pos:end="47:26">&gt;=</operator> <name pos:start="47:28" pos:end="47:43">MAX_CPUMASK_BITS</name></expr>)</condition> <block pos:start="47:46" pos:end="55:9">{<block_content pos:start="49:13" pos:end="53:19">

            <expr_stmt pos:start="49:13" pos:end="51:58"><expr pos:start="49:13" pos:end="51:57"><call pos:start="49:13" pos:end="51:57"><name pos:start="49:13" pos:end="49:22">error_setg</name><argument_list pos:start="49:23" pos:end="51:57">(<argument pos:start="49:24" pos:end="49:27"><expr pos:start="49:24" pos:end="49:27"><name pos:start="49:24" pos:end="49:27">errp</name></expr></argument>, <argument pos:start="49:30" pos:end="49:71"><expr pos:start="49:30" pos:end="49:71"><literal type="string" pos:start="49:30" pos:end="49:43">"CPU number %"</literal> <name pos:start="49:45" pos:end="49:50">PRIu16</name> <literal type="string" pos:start="49:52" pos:end="49:71">" is bigger than %d"</literal></expr></argument>,

                       <argument pos:start="51:24" pos:end="51:34"><expr pos:start="51:24" pos:end="51:34"><name pos:start="51:24" pos:end="51:34"><name pos:start="51:24" pos:end="51:27">cpus</name><operator pos:start="51:28" pos:end="51:29">-&gt;</operator><name pos:start="51:30" pos:end="51:34">value</name></name></expr></argument>, <argument pos:start="51:37" pos:end="51:56"><expr pos:start="51:37" pos:end="51:56"><name pos:start="51:37" pos:end="51:52">MAX_CPUMASK_BITS</name> <operator pos:start="51:54" pos:end="51:54">-</operator> <literal type="number" pos:start="51:56" pos:end="51:56">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="53:13" pos:end="53:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:63"><expr pos:start="57:9" pos:end="57:62"><call pos:start="57:9" pos:end="57:62"><name pos:start="57:9" pos:end="57:18">bitmap_set</name><argument_list pos:start="57:19" pos:end="57:62">(<argument pos:start="57:20" pos:end="57:45"><expr pos:start="57:20" pos:end="57:45"><name pos:start="57:20" pos:end="57:36"><name pos:start="57:20" pos:end="57:28">numa_info</name><index pos:start="57:29" pos:end="57:36">[<expr pos:start="57:30" pos:end="57:35"><name pos:start="57:30" pos:end="57:35">nodenr</name></expr>]</index></name><operator pos:start="57:37" pos:end="57:37">.</operator><name pos:start="57:38" pos:end="57:45">node_cpu</name></expr></argument>, <argument pos:start="57:48" pos:end="57:58"><expr pos:start="57:48" pos:end="57:58"><name pos:start="57:48" pos:end="57:58"><name pos:start="57:48" pos:end="57:51">cpus</name><operator pos:start="57:52" pos:end="57:53">-&gt;</operator><name pos:start="57:54" pos:end="57:58">value</name></name></expr></argument>, <argument pos:start="57:61" pos:end="57:61"><expr pos:start="57:61" pos:end="57:61"><literal type="number" pos:start="57:61" pos:end="57:61">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="63:5" pos:end="69:5"><if pos:start="63:5" pos:end="69:5">if <condition pos:start="63:8" pos:end="63:42">(<expr pos:start="63:9" pos:end="63:41"><name pos:start="63:9" pos:end="63:21"><name pos:start="63:9" pos:end="63:12">node</name><operator pos:start="63:13" pos:end="63:14">-&gt;</operator><name pos:start="63:15" pos:end="63:21">has_mem</name></name> <operator pos:start="63:23" pos:end="63:24">&amp;&amp;</operator> <name pos:start="63:26" pos:end="63:41"><name pos:start="63:26" pos:end="63:29">node</name><operator pos:start="63:30" pos:end="63:31">-&gt;</operator><name pos:start="63:32" pos:end="63:41">has_memdev</name></name></expr>)</condition> <block pos:start="63:44" pos:end="69:5">{<block_content pos:start="65:9" pos:end="67:15">

        <expr_stmt pos:start="65:9" pos:end="65:71"><expr pos:start="65:9" pos:end="65:70"><call pos:start="65:9" pos:end="65:70"><name pos:start="65:9" pos:end="65:18">error_setg</name><argument_list pos:start="65:19" pos:end="65:70">(<argument pos:start="65:20" pos:end="65:23"><expr pos:start="65:20" pos:end="65:23"><name pos:start="65:20" pos:end="65:23">errp</name></expr></argument>, <argument pos:start="65:26" pos:end="65:69"><expr pos:start="65:26" pos:end="65:69"><literal type="string" pos:start="65:26" pos:end="65:69">"qemu: cannot specify both mem= and memdev="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="67:9" pos:end="67:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="73:5" pos:end="77:5"><if pos:start="73:5" pos:end="77:5">if <condition pos:start="73:8" pos:end="73:27">(<expr pos:start="73:9" pos:end="73:26"><name pos:start="73:9" pos:end="73:20">have_memdevs</name> <operator pos:start="73:22" pos:end="73:23">==</operator> <operator pos:start="73:25" pos:end="73:25">-</operator><literal type="number" pos:start="73:26" pos:end="73:26">1</literal></expr>)</condition> <block pos:start="73:29" pos:end="77:5">{<block_content pos:start="75:9" pos:end="75:40">

        <expr_stmt pos:start="75:9" pos:end="75:40"><expr pos:start="75:9" pos:end="75:39"><name pos:start="75:9" pos:end="75:20">have_memdevs</name> <operator pos:start="75:22" pos:end="75:22">=</operator> <name pos:start="75:24" pos:end="75:39"><name pos:start="75:24" pos:end="75:27">node</name><operator pos:start="75:28" pos:end="75:29">-&gt;</operator><name pos:start="75:30" pos:end="75:39">has_memdev</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="79:5" pos:end="87:5"><if pos:start="79:5" pos:end="87:5">if <condition pos:start="79:8" pos:end="79:41">(<expr pos:start="79:9" pos:end="79:40"><name pos:start="79:9" pos:end="79:24"><name pos:start="79:9" pos:end="79:12">node</name><operator pos:start="79:13" pos:end="79:14">-&gt;</operator><name pos:start="79:15" pos:end="79:24">has_memdev</name></name> <operator pos:start="79:26" pos:end="79:27">!=</operator> <name pos:start="79:29" pos:end="79:40">have_memdevs</name></expr>)</condition> <block pos:start="79:43" pos:end="87:5">{<block_content pos:start="81:9" pos:end="85:15">

        <expr_stmt pos:start="81:9" pos:end="83:38"><expr pos:start="81:9" pos:end="83:37"><call pos:start="81:9" pos:end="83:37"><name pos:start="81:9" pos:end="81:18">error_setg</name><argument_list pos:start="81:19" pos:end="83:37">(<argument pos:start="81:20" pos:end="81:23"><expr pos:start="81:20" pos:end="81:23"><name pos:start="81:20" pos:end="81:23">errp</name></expr></argument>, <argument pos:start="81:26" pos:end="83:36"><expr pos:start="81:26" pos:end="83:36"><literal type="string" pos:start="81:26" pos:end="81:76">"qemu: memdev option must be specified for either "</literal>

                   <literal type="string" pos:start="83:20" pos:end="83:36">"all or no nodes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="85:9" pos:end="85:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="91:5" pos:end="107:5"><if pos:start="91:5" pos:end="107:5">if <condition pos:start="91:8" pos:end="91:22">(<expr pos:start="91:9" pos:end="91:21"><name pos:start="91:9" pos:end="91:21"><name pos:start="91:9" pos:end="91:12">node</name><operator pos:start="91:13" pos:end="91:14">-&gt;</operator><name pos:start="91:15" pos:end="91:21">has_mem</name></name></expr>)</condition> <block pos:start="91:24" pos:end="107:5">{<block_content pos:start="93:9" pos:end="105:46">

        <decl_stmt pos:start="93:9" pos:end="93:38"><decl pos:start="93:9" pos:end="93:37"><type pos:start="93:9" pos:end="93:16"><name pos:start="93:9" pos:end="93:16">uint64_t</name></type> <name pos:start="93:18" pos:end="93:25">mem_size</name> <init pos:start="93:27" pos:end="93:37">= <expr pos:start="93:29" pos:end="93:37"><name pos:start="93:29" pos:end="93:37"><name pos:start="93:29" pos:end="93:32">node</name><operator pos:start="93:33" pos:end="93:34">-&gt;</operator><name pos:start="93:35" pos:end="93:37">mem</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="95:9" pos:end="95:56"><decl pos:start="95:9" pos:end="95:55"><type pos:start="95:9" pos:end="95:20"><specifier pos:start="95:9" pos:end="95:13">const</specifier> <name pos:start="95:15" pos:end="95:18">char</name> <modifier pos:start="95:20" pos:end="95:20">*</modifier></type><name pos:start="95:21" pos:end="95:27">mem_str</name> <init pos:start="95:29" pos:end="95:55">= <expr pos:start="95:31" pos:end="95:55"><call pos:start="95:31" pos:end="95:55"><name pos:start="95:31" pos:end="95:42">qemu_opt_get</name><argument_list pos:start="95:43" pos:end="95:55">(<argument pos:start="95:44" pos:end="95:47"><expr pos:start="95:44" pos:end="95:47"><name pos:start="95:44" pos:end="95:47">opts</name></expr></argument>, <argument pos:start="95:50" pos:end="95:54"><expr pos:start="95:50" pos:end="95:54"><literal type="string" pos:start="95:50" pos:end="95:54">"mem"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block" pos:start="97:9" pos:end="97:46">/* Fix up legacy suffix-less format */</comment>

        <if_stmt pos:start="99:9" pos:end="103:9"><if pos:start="99:9" pos:end="103:9">if <condition pos:start="99:12" pos:end="99:58">(<expr pos:start="99:13" pos:end="99:57"><call pos:start="99:13" pos:end="99:57"><name pos:start="99:13" pos:end="99:27">g_ascii_isdigit</name><argument_list pos:start="99:28" pos:end="99:57">(<argument pos:start="99:29" pos:end="99:56"><expr pos:start="99:29" pos:end="99:56"><name pos:start="99:29" pos:end="99:56"><name pos:start="99:29" pos:end="99:35">mem_str</name><index pos:start="99:36" pos:end="99:56">[<expr pos:start="99:37" pos:end="99:55"><call pos:start="99:37" pos:end="99:51"><name pos:start="99:37" pos:end="99:42">strlen</name><argument_list pos:start="99:43" pos:end="99:51">(<argument pos:start="99:44" pos:end="99:50"><expr pos:start="99:44" pos:end="99:50"><name pos:start="99:44" pos:end="99:50">mem_str</name></expr></argument>)</argument_list></call> <operator pos:start="99:53" pos:end="99:53">-</operator> <literal type="number" pos:start="99:55" pos:end="99:55">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="99:60" pos:end="103:9">{<block_content pos:start="101:13" pos:end="101:28">

            <expr_stmt pos:start="101:13" pos:end="101:28"><expr pos:start="101:13" pos:end="101:27"><name pos:start="101:13" pos:end="101:20">mem_size</name> <operator pos:start="101:22" pos:end="101:24">&lt;&lt;=</operator> <literal type="number" pos:start="101:26" pos:end="101:27">20</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:46"><expr pos:start="105:9" pos:end="105:45"><name pos:start="105:9" pos:end="105:25"><name pos:start="105:9" pos:end="105:17">numa_info</name><index pos:start="105:18" pos:end="105:25">[<expr pos:start="105:19" pos:end="105:24"><name pos:start="105:19" pos:end="105:24">nodenr</name></expr>]</index></name><operator pos:start="105:26" pos:end="105:26">.</operator><name pos:start="105:27" pos:end="105:34">node_mem</name> <operator pos:start="105:36" pos:end="105:36">=</operator> <name pos:start="105:38" pos:end="105:45">mem_size</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="109:5" pos:end="131:5"><if pos:start="109:5" pos:end="131:5">if <condition pos:start="109:8" pos:end="109:25">(<expr pos:start="109:9" pos:end="109:24"><name pos:start="109:9" pos:end="109:24"><name pos:start="109:9" pos:end="109:12">node</name><operator pos:start="109:13" pos:end="109:14">-&gt;</operator><name pos:start="109:15" pos:end="109:24">has_memdev</name></name></expr>)</condition> <block pos:start="109:27" pos:end="131:5">{<block_content pos:start="111:9" pos:end="129:58">

        <decl_stmt pos:start="111:9" pos:end="111:18"><decl pos:start="111:9" pos:end="111:17"><type pos:start="111:9" pos:end="111:16"><name pos:start="111:9" pos:end="111:14">Object</name> <modifier pos:start="111:16" pos:end="111:16">*</modifier></type><name pos:start="111:17" pos:end="111:17">o</name></decl>;</decl_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:78"><expr pos:start="113:9" pos:end="113:77"><name pos:start="113:9" pos:end="113:9">o</name> <operator pos:start="113:11" pos:end="113:11">=</operator> <call pos:start="113:13" pos:end="113:77"><name pos:start="113:13" pos:end="113:36">object_resolve_path_type</name><argument_list pos:start="113:37" pos:end="113:77">(<argument pos:start="113:38" pos:end="113:49"><expr pos:start="113:38" pos:end="113:49"><name pos:start="113:38" pos:end="113:49"><name pos:start="113:38" pos:end="113:41">node</name><operator pos:start="113:42" pos:end="113:43">-&gt;</operator><name pos:start="113:44" pos:end="113:49">memdev</name></name></expr></argument>, <argument pos:start="113:52" pos:end="113:70"><expr pos:start="113:52" pos:end="113:70"><name pos:start="113:52" pos:end="113:70">TYPE_MEMORY_BACKEND</name></expr></argument>, <argument pos:start="113:73" pos:end="113:76"><expr pos:start="113:73" pos:end="113:76"><name pos:start="113:73" pos:end="113:76">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="115:9" pos:end="121:9"><if pos:start="115:9" pos:end="121:9">if <condition pos:start="115:12" pos:end="115:15">(<expr pos:start="115:13" pos:end="115:14"><operator pos:start="115:13" pos:end="115:13">!</operator><name pos:start="115:14" pos:end="115:14">o</name></expr>)</condition> <block pos:start="115:17" pos:end="121:9">{<block_content pos:start="117:13" pos:end="119:19">

            <expr_stmt pos:start="117:13" pos:end="117:69"><expr pos:start="117:13" pos:end="117:68"><call pos:start="117:13" pos:end="117:68"><name pos:start="117:13" pos:end="117:22">error_setg</name><argument_list pos:start="117:23" pos:end="117:68">(<argument pos:start="117:24" pos:end="117:27"><expr pos:start="117:24" pos:end="117:27"><name pos:start="117:24" pos:end="117:27">errp</name></expr></argument>, <argument pos:start="117:30" pos:end="117:53"><expr pos:start="117:30" pos:end="117:53"><literal type="string" pos:start="117:30" pos:end="117:53">"memdev=%s is ambiguous"</literal></expr></argument>, <argument pos:start="117:56" pos:end="117:67"><expr pos:start="117:56" pos:end="117:67"><name pos:start="117:56" pos:end="117:67"><name pos:start="117:56" pos:end="117:59">node</name><operator pos:start="117:60" pos:end="117:61">-&gt;</operator><name pos:start="117:62" pos:end="117:67">memdev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="119:13" pos:end="119:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="125:9" pos:end="125:22"><expr pos:start="125:9" pos:end="125:21"><call pos:start="125:9" pos:end="125:21"><name pos:start="125:9" pos:end="125:18">object_ref</name><argument_list pos:start="125:19" pos:end="125:21">(<argument pos:start="125:20" pos:end="125:20"><expr pos:start="125:20" pos:end="125:20"><name pos:start="125:20" pos:end="125:20">o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:78"><expr pos:start="127:9" pos:end="127:77"><name pos:start="127:9" pos:end="127:25"><name pos:start="127:9" pos:end="127:17">numa_info</name><index pos:start="127:18" pos:end="127:25">[<expr pos:start="127:19" pos:end="127:24"><name pos:start="127:19" pos:end="127:24">nodenr</name></expr>]</index></name><operator pos:start="127:26" pos:end="127:26">.</operator><name pos:start="127:27" pos:end="127:34">node_mem</name> <operator pos:start="127:36" pos:end="127:36">=</operator> <call pos:start="127:38" pos:end="127:77"><name pos:start="127:38" pos:end="127:60">object_property_get_int</name><argument_list pos:start="127:61" pos:end="127:77">(<argument pos:start="127:62" pos:end="127:62"><expr pos:start="127:62" pos:end="127:62"><name pos:start="127:62" pos:end="127:62">o</name></expr></argument>, <argument pos:start="127:65" pos:end="127:70"><expr pos:start="127:65" pos:end="127:70"><literal type="string" pos:start="127:65" pos:end="127:70">"size"</literal></expr></argument>, <argument pos:start="127:73" pos:end="127:76"><expr pos:start="127:73" pos:end="127:76"><name pos:start="127:73" pos:end="127:76">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:58"><expr pos:start="129:9" pos:end="129:57"><name pos:start="129:9" pos:end="129:25"><name pos:start="129:9" pos:end="129:17">numa_info</name><index pos:start="129:18" pos:end="129:25">[<expr pos:start="129:19" pos:end="129:24"><name pos:start="129:19" pos:end="129:24">nodenr</name></expr>]</index></name><operator pos:start="129:26" pos:end="129:26">.</operator><name pos:start="129:27" pos:end="129:37">node_memdev</name> <operator pos:start="129:39" pos:end="129:39">=</operator> <call pos:start="129:41" pos:end="129:57"><name pos:start="129:41" pos:end="129:54">MEMORY_BACKEND</name><argument_list pos:start="129:55" pos:end="129:57">(<argument pos:start="129:56" pos:end="129:56"><expr pos:start="129:56" pos:end="129:56"><name pos:start="129:56" pos:end="129:56">o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:37"><expr pos:start="133:5" pos:end="133:36"><name pos:start="133:5" pos:end="133:21"><name pos:start="133:5" pos:end="133:13">numa_info</name><index pos:start="133:14" pos:end="133:21">[<expr pos:start="133:15" pos:end="133:20"><name pos:start="133:15" pos:end="133:20">nodenr</name></expr>]</index></name><operator pos:start="133:22" pos:end="133:22">.</operator><name pos:start="133:23" pos:end="133:29">present</name> <operator pos:start="133:31" pos:end="133:31">=</operator> <name pos:start="133:33" pos:end="133:36">true</name></expr>;</expr_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:55"><expr pos:start="135:5" pos:end="135:54"><name pos:start="135:5" pos:end="135:19">max_numa_nodeid</name> <operator pos:start="135:21" pos:end="135:21">=</operator> <call pos:start="135:23" pos:end="135:54"><name pos:start="135:23" pos:end="135:25">MAX</name><argument_list pos:start="135:26" pos:end="135:54">(<argument pos:start="135:27" pos:end="135:41"><expr pos:start="135:27" pos:end="135:41"><name pos:start="135:27" pos:end="135:41">max_numa_nodeid</name></expr></argument>, <argument pos:start="135:44" pos:end="135:53"><expr pos:start="135:44" pos:end="135:53"><name pos:start="135:44" pos:end="135:49">nodenr</name> <operator pos:start="135:51" pos:end="135:51">+</operator> <literal type="number" pos:start="135:53" pos:end="135:53">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
