<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25972.c" pos:tabs="8"><function pos:start="1:1" pos:end="167:1"><type pos:start="1:1" pos:end="1:16"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:16">CCPrepare</name></type> <name pos:start="1:18" pos:end="1:37">gen_prepare_eflags_c</name><parameter_list pos:start="1:38" pos:end="1:64">(<parameter pos:start="1:39" pos:end="1:53"><decl pos:start="1:39" pos:end="1:53"><type pos:start="1:39" pos:end="1:53"><name pos:start="1:39" pos:end="1:50">DisasContext</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:53">s</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:63"><decl pos:start="1:56" pos:end="1:63"><type pos:start="1:56" pos:end="1:63"><name pos:start="1:56" pos:end="1:59">TCGv</name></type> <name pos:start="1:61" pos:end="1:63">reg</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="167:1">{<block_content pos:start="5:5" pos:end="165:5">

    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:8"><name pos:start="5:5" pos:end="5:8">TCGv</name></type> <name pos:start="5:10" pos:end="5:11">t0</name></decl>, <decl pos:start="5:14" pos:end="5:15"><type ref="prev" pos:start="5:5" pos:end="5:8"/><name pos:start="5:14" pos:end="5:15">t1</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:12"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:12">size</name></decl>, <decl pos:start="7:15" pos:end="7:19"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:15" pos:end="7:19">shift</name></decl>;</decl_stmt>



    <switch pos:start="11:5" pos:end="165:5">switch <condition pos:start="11:12" pos:end="11:21">(<expr pos:start="11:13" pos:end="11:20"><name pos:start="11:13" pos:end="11:20"><name pos:start="11:13" pos:end="11:13">s</name><operator pos:start="11:14" pos:end="11:15">-&gt;</operator><name pos:start="11:16" pos:end="11:20">cc_op</name></name></expr>)</condition> <block pos:start="11:23" pos:end="165:5">{<block_content pos:start="13:5" pos:end="163:61">

    <case pos:start="13:5" pos:end="13:35">case <expr pos:start="13:10" pos:end="13:34"><name pos:start="13:10" pos:end="13:19">CC_OP_SUBB</name> <operator pos:start="13:21" pos:end="13:23">...</operator> <name pos:start="13:25" pos:end="13:34">CC_OP_SUBQ</name></expr>:</case>

        <comment type="block" pos:start="15:9" pos:end="15:62">/* (DATA_TYPE)(CC_DST + CC_SRC) &lt; (DATA_TYPE)CC_SRC */</comment>

        <expr_stmt pos:start="17:9" pos:end="17:37"><expr pos:start="17:9" pos:end="17:36"><name pos:start="17:9" pos:end="17:12">size</name> <operator pos:start="17:14" pos:end="17:14">=</operator> <name pos:start="17:16" pos:end="17:23"><name pos:start="17:16" pos:end="17:16">s</name><operator pos:start="17:17" pos:end="17:18">-&gt;</operator><name pos:start="17:19" pos:end="17:23">cc_op</name></name> <operator pos:start="17:25" pos:end="17:25">-</operator> <name pos:start="17:27" pos:end="17:36">CC_OP_SUBB</name></expr>;</expr_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:59"><expr pos:start="19:9" pos:end="19:58"><name pos:start="19:9" pos:end="19:10">t1</name> <operator pos:start="19:12" pos:end="19:12">=</operator> <call pos:start="19:14" pos:end="19:58"><name pos:start="19:14" pos:end="19:23">gen_ext_tl</name><argument_list pos:start="19:24" pos:end="19:58">(<argument pos:start="19:25" pos:end="19:32"><expr pos:start="19:25" pos:end="19:32"><name pos:start="19:25" pos:end="19:32">cpu_tmp0</name></expr></argument>, <argument pos:start="19:35" pos:end="19:44"><expr pos:start="19:35" pos:end="19:44"><name pos:start="19:35" pos:end="19:44">cpu_cc_src</name></expr></argument>, <argument pos:start="19:47" pos:end="19:50"><expr pos:start="19:47" pos:end="19:50"><name pos:start="19:47" pos:end="19:50">size</name></expr></argument>, <argument pos:start="19:53" pos:end="19:57"><expr pos:start="19:53" pos:end="19:57"><name pos:start="19:53" pos:end="19:57">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="21:9" pos:end="21:75">/* If no temporary was used, be careful not to alias t1 and t0.  */</comment>

        <expr_stmt pos:start="23:9" pos:end="23:57"><expr pos:start="23:9" pos:end="23:56"><name pos:start="23:9" pos:end="23:10">t0</name> <operator pos:start="23:12" pos:end="23:12">=</operator> <ternary pos:start="23:14" pos:end="23:56"><condition pos:start="23:14" pos:end="23:41"><expr pos:start="23:14" pos:end="23:39"><call pos:start="23:14" pos:end="23:39"><name pos:start="23:14" pos:end="23:23">TCGV_EQUAL</name><argument_list pos:start="23:24" pos:end="23:39">(<argument pos:start="23:25" pos:end="23:26"><expr pos:start="23:25" pos:end="23:26"><name pos:start="23:25" pos:end="23:26">t1</name></expr></argument>, <argument pos:start="23:29" pos:end="23:38"><expr pos:start="23:29" pos:end="23:38"><name pos:start="23:29" pos:end="23:38">cpu_cc_src</name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="23:43" pos:end="23:50"> <expr pos:start="23:43" pos:end="23:50"><name pos:start="23:43" pos:end="23:50">cpu_tmp0</name></expr> </then><else pos:start="23:52" pos:end="23:56">: <expr pos:start="23:54" pos:end="23:56"><name pos:start="23:54" pos:end="23:56">reg</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:51"><expr pos:start="25:9" pos:end="25:50"><call pos:start="25:9" pos:end="25:50"><name pos:start="25:9" pos:end="25:22">tcg_gen_add_tl</name><argument_list pos:start="25:23" pos:end="25:50">(<argument pos:start="25:24" pos:end="25:25"><expr pos:start="25:24" pos:end="25:25"><name pos:start="25:24" pos:end="25:25">t0</name></expr></argument>, <argument pos:start="25:28" pos:end="25:37"><expr pos:start="25:28" pos:end="25:37"><name pos:start="25:28" pos:end="25:37">cpu_cc_dst</name></expr></argument>, <argument pos:start="25:40" pos:end="25:49"><expr pos:start="25:40" pos:end="25:49"><name pos:start="25:40" pos:end="25:49">cpu_cc_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:27"><expr pos:start="27:9" pos:end="27:26"><call pos:start="27:9" pos:end="27:26"><name pos:start="27:9" pos:end="27:16">gen_extu</name><argument_list pos:start="27:17" pos:end="27:26">(<argument pos:start="27:18" pos:end="27:21"><expr pos:start="27:18" pos:end="27:21"><name pos:start="27:18" pos:end="27:21">size</name></expr></argument>, <argument pos:start="27:24" pos:end="27:25"><expr pos:start="27:24" pos:end="27:25"><name pos:start="27:24" pos:end="27:25">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="29:9" pos:end="29:21">goto <name pos:start="29:14" pos:end="29:20">add_sub</name>;</goto>



    <case pos:start="33:5" pos:end="33:35">case <expr pos:start="33:10" pos:end="33:34"><name pos:start="33:10" pos:end="33:19">CC_OP_ADDB</name> <operator pos:start="33:21" pos:end="33:23">...</operator> <name pos:start="33:25" pos:end="33:34">CC_OP_ADDQ</name></expr>:</case>

        <comment type="block" pos:start="35:9" pos:end="35:51">/* (DATA_TYPE)CC_DST &lt; (DATA_TYPE)CC_SRC */</comment>

        <expr_stmt pos:start="37:9" pos:end="37:37"><expr pos:start="37:9" pos:end="37:36"><name pos:start="37:9" pos:end="37:12">size</name> <operator pos:start="37:14" pos:end="37:14">=</operator> <name pos:start="37:16" pos:end="37:23"><name pos:start="37:16" pos:end="37:16">s</name><operator pos:start="37:17" pos:end="37:18">-&gt;</operator><name pos:start="37:19" pos:end="37:23">cc_op</name></name> <operator pos:start="37:25" pos:end="37:25">-</operator> <name pos:start="37:27" pos:end="37:36">CC_OP_ADDB</name></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:59"><expr pos:start="39:9" pos:end="39:58"><name pos:start="39:9" pos:end="39:10">t1</name> <operator pos:start="39:12" pos:end="39:12">=</operator> <call pos:start="39:14" pos:end="39:58"><name pos:start="39:14" pos:end="39:23">gen_ext_tl</name><argument_list pos:start="39:24" pos:end="39:58">(<argument pos:start="39:25" pos:end="39:32"><expr pos:start="39:25" pos:end="39:32"><name pos:start="39:25" pos:end="39:32">cpu_tmp0</name></expr></argument>, <argument pos:start="39:35" pos:end="39:44"><expr pos:start="39:35" pos:end="39:44"><name pos:start="39:35" pos:end="39:44">cpu_cc_src</name></expr></argument>, <argument pos:start="39:47" pos:end="39:50"><expr pos:start="39:47" pos:end="39:50"><name pos:start="39:47" pos:end="39:50">size</name></expr></argument>, <argument pos:start="39:53" pos:end="39:57"><expr pos:start="39:53" pos:end="39:57"><name pos:start="39:53" pos:end="39:57">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:54"><expr pos:start="41:9" pos:end="41:53"><name pos:start="41:9" pos:end="41:10">t0</name> <operator pos:start="41:12" pos:end="41:12">=</operator> <call pos:start="41:14" pos:end="41:53"><name pos:start="41:14" pos:end="41:23">gen_ext_tl</name><argument_list pos:start="41:24" pos:end="41:53">(<argument pos:start="41:25" pos:end="41:27"><expr pos:start="41:25" pos:end="41:27"><name pos:start="41:25" pos:end="41:27">reg</name></expr></argument>, <argument pos:start="41:30" pos:end="41:39"><expr pos:start="41:30" pos:end="41:39"><name pos:start="41:30" pos:end="41:39">cpu_cc_dst</name></expr></argument>, <argument pos:start="41:42" pos:end="41:45"><expr pos:start="41:42" pos:end="41:45"><name pos:start="41:42" pos:end="41:45">size</name></expr></argument>, <argument pos:start="41:48" pos:end="41:52"><expr pos:start="41:48" pos:end="41:52"><name pos:start="41:48" pos:end="41:52">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <label pos:start="43:5" pos:end="43:12"><name pos:start="43:5" pos:end="43:11">add_sub</name>:</label>

        <return pos:start="45:9" pos:end="47:72">return <expr pos:start="45:16" pos:end="47:71"><operator pos:start="45:16" pos:end="45:16">(</operator><name pos:start="45:17" pos:end="45:25">CCPrepare</name><operator pos:start="45:26" pos:end="45:26">)</operator> <block pos:start="45:28" pos:end="47:71">{ <expr pos:start="45:30" pos:end="45:49"><operator pos:start="45:30" pos:end="45:30">.</operator><name pos:start="45:31" pos:end="45:34">cond</name> <operator pos:start="45:36" pos:end="45:36">=</operator> <name pos:start="45:38" pos:end="45:49">TCG_COND_LTU</name></expr>, <expr pos:start="45:52" pos:end="45:60"><operator pos:start="45:52" pos:end="45:52">.</operator><name pos:start="45:53" pos:end="45:55">reg</name> <operator pos:start="45:57" pos:end="45:57">=</operator> <name pos:start="45:59" pos:end="45:60">t0</name></expr>,

                             <expr pos:start="47:30" pos:end="47:39"><operator pos:start="47:30" pos:end="47:30">.</operator><name pos:start="47:31" pos:end="47:34">reg2</name> <operator pos:start="47:36" pos:end="47:36">=</operator> <name pos:start="47:38" pos:end="47:39">t1</name></expr>, <expr pos:start="47:42" pos:end="47:51"><operator pos:start="47:42" pos:end="47:42">.</operator><name pos:start="47:43" pos:end="47:46">mask</name> <operator pos:start="47:48" pos:end="47:48">=</operator> <operator pos:start="47:50" pos:end="47:50">-</operator><literal type="number" pos:start="47:51" pos:end="47:51">1</literal></expr>, <expr pos:start="47:54" pos:end="47:69"><operator pos:start="47:54" pos:end="47:54">.</operator><name pos:start="47:55" pos:end="47:62">use_reg2</name> <operator pos:start="47:64" pos:end="47:64">=</operator> <name pos:start="47:66" pos:end="47:69">true</name></expr> }</block></expr>;</return>



    <case pos:start="51:5" pos:end="51:35">case <expr pos:start="51:10" pos:end="51:34"><name pos:start="51:10" pos:end="51:19">CC_OP_SBBB</name> <operator pos:start="51:21" pos:end="51:23">...</operator> <name pos:start="51:25" pos:end="51:34">CC_OP_SBBQ</name></expr>:</case>

        <comment type="block" pos:start="53:9" pos:end="53:67">/* (DATA_TYPE)(CC_DST + CC_SRC + 1) &lt;= (DATA_TYPE)CC_SRC */</comment>

        <expr_stmt pos:start="55:9" pos:end="55:37"><expr pos:start="55:9" pos:end="55:36"><name pos:start="55:9" pos:end="55:12">size</name> <operator pos:start="55:14" pos:end="55:14">=</operator> <name pos:start="55:16" pos:end="55:23"><name pos:start="55:16" pos:end="55:16">s</name><operator pos:start="55:17" pos:end="55:18">-&gt;</operator><name pos:start="55:19" pos:end="55:23">cc_op</name></name> <operator pos:start="55:25" pos:end="55:25">-</operator> <name pos:start="55:27" pos:end="55:36">CC_OP_SBBB</name></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:59"><expr pos:start="57:9" pos:end="57:58"><name pos:start="57:9" pos:end="57:10">t1</name> <operator pos:start="57:12" pos:end="57:12">=</operator> <call pos:start="57:14" pos:end="57:58"><name pos:start="57:14" pos:end="57:23">gen_ext_tl</name><argument_list pos:start="57:24" pos:end="57:58">(<argument pos:start="57:25" pos:end="57:32"><expr pos:start="57:25" pos:end="57:32"><name pos:start="57:25" pos:end="57:32">cpu_tmp0</name></expr></argument>, <argument pos:start="57:35" pos:end="57:44"><expr pos:start="57:35" pos:end="57:44"><name pos:start="57:35" pos:end="57:44">cpu_cc_src</name></expr></argument>, <argument pos:start="57:47" pos:end="57:50"><expr pos:start="57:47" pos:end="57:50"><name pos:start="57:47" pos:end="57:50">size</name></expr></argument>, <argument pos:start="57:53" pos:end="57:57"><expr pos:start="57:53" pos:end="57:57"><name pos:start="57:53" pos:end="57:57">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="59:9" pos:end="65:9"><if pos:start="59:9" pos:end="65:9">if <condition pos:start="59:12" pos:end="59:63">(<expr pos:start="59:13" pos:end="59:62"><call pos:start="59:13" pos:end="59:31"><name pos:start="59:13" pos:end="59:22">TCGV_EQUAL</name><argument_list pos:start="59:23" pos:end="59:31">(<argument pos:start="59:24" pos:end="59:25"><expr pos:start="59:24" pos:end="59:25"><name pos:start="59:24" pos:end="59:25">t1</name></expr></argument>, <argument pos:start="59:28" pos:end="59:30"><expr pos:start="59:28" pos:end="59:30"><name pos:start="59:28" pos:end="59:30">reg</name></expr></argument>)</argument_list></call> <operator pos:start="59:33" pos:end="59:34">&amp;&amp;</operator> <call pos:start="59:36" pos:end="59:62"><name pos:start="59:36" pos:end="59:45">TCGV_EQUAL</name><argument_list pos:start="59:46" pos:end="59:62">(<argument pos:start="59:47" pos:end="59:49"><expr pos:start="59:47" pos:end="59:49"><name pos:start="59:47" pos:end="59:49">reg</name></expr></argument>, <argument pos:start="59:52" pos:end="59:61"><expr pos:start="59:52" pos:end="59:61"><name pos:start="59:52" pos:end="59:61">cpu_cc_src</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="59:65" pos:end="65:9">{<block_content pos:start="61:13" pos:end="63:26">

            <expr_stmt pos:start="61:13" pos:end="61:49"><expr pos:start="61:13" pos:end="61:48"><call pos:start="61:13" pos:end="61:48"><name pos:start="61:13" pos:end="61:26">tcg_gen_mov_tl</name><argument_list pos:start="61:27" pos:end="61:48">(<argument pos:start="61:28" pos:end="61:35"><expr pos:start="61:28" pos:end="61:35"><name pos:start="61:28" pos:end="61:35">cpu_tmp0</name></expr></argument>, <argument pos:start="61:38" pos:end="61:47"><expr pos:start="61:38" pos:end="61:47"><name pos:start="61:38" pos:end="61:47">cpu_cc_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:26"><expr pos:start="63:13" pos:end="63:25"><name pos:start="63:13" pos:end="63:14">t1</name> <operator pos:start="63:16" pos:end="63:16">=</operator> <name pos:start="63:18" pos:end="63:25">cpu_tmp0</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="69:9" pos:end="69:52"><expr pos:start="69:9" pos:end="69:51"><call pos:start="69:9" pos:end="69:51"><name pos:start="69:9" pos:end="69:22">tcg_gen_add_tl</name><argument_list pos:start="69:23" pos:end="69:51">(<argument pos:start="69:24" pos:end="69:26"><expr pos:start="69:24" pos:end="69:26"><name pos:start="69:24" pos:end="69:26">reg</name></expr></argument>, <argument pos:start="69:29" pos:end="69:38"><expr pos:start="69:29" pos:end="69:38"><name pos:start="69:29" pos:end="69:38">cpu_cc_dst</name></expr></argument>, <argument pos:start="69:41" pos:end="69:50"><expr pos:start="69:41" pos:end="69:50"><name pos:start="69:41" pos:end="69:50">cpu_cc_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:37"><expr pos:start="71:9" pos:end="71:36"><call pos:start="71:9" pos:end="71:36"><name pos:start="71:9" pos:end="71:23">tcg_gen_addi_tl</name><argument_list pos:start="71:24" pos:end="71:36">(<argument pos:start="71:25" pos:end="71:27"><expr pos:start="71:25" pos:end="71:27"><name pos:start="71:25" pos:end="71:27">reg</name></expr></argument>, <argument pos:start="71:30" pos:end="71:32"><expr pos:start="71:30" pos:end="71:32"><name pos:start="71:30" pos:end="71:32">reg</name></expr></argument>, <argument pos:start="71:35" pos:end="71:35"><expr pos:start="71:35" pos:end="71:35"><literal type="number" pos:start="71:35" pos:end="71:35">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:28"><expr pos:start="73:9" pos:end="73:27"><call pos:start="73:9" pos:end="73:27"><name pos:start="73:9" pos:end="73:16">gen_extu</name><argument_list pos:start="73:17" pos:end="73:27">(<argument pos:start="73:18" pos:end="73:21"><expr pos:start="73:18" pos:end="73:21"><name pos:start="73:18" pos:end="73:21">size</name></expr></argument>, <argument pos:start="73:24" pos:end="73:26"><expr pos:start="73:24" pos:end="73:26"><name pos:start="73:24" pos:end="73:26">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:17"><expr pos:start="75:9" pos:end="75:16"><name pos:start="75:9" pos:end="75:10">t0</name> <operator pos:start="75:12" pos:end="75:12">=</operator> <name pos:start="75:14" pos:end="75:16">reg</name></expr>;</expr_stmt>

        <goto pos:start="77:9" pos:end="77:21">goto <name pos:start="77:14" pos:end="77:20">adc_sbb</name>;</goto>



    <case pos:start="81:5" pos:end="81:35">case <expr pos:start="81:10" pos:end="81:34"><name pos:start="81:10" pos:end="81:19">CC_OP_ADCB</name> <operator pos:start="81:21" pos:end="81:23">...</operator> <name pos:start="81:25" pos:end="81:34">CC_OP_ADCQ</name></expr>:</case>

        <comment type="block" pos:start="83:9" pos:end="83:52">/* (DATA_TYPE)CC_DST &lt;= (DATA_TYPE)CC_SRC */</comment>

        <expr_stmt pos:start="85:9" pos:end="85:37"><expr pos:start="85:9" pos:end="85:36"><name pos:start="85:9" pos:end="85:12">size</name> <operator pos:start="85:14" pos:end="85:14">=</operator> <name pos:start="85:16" pos:end="85:23"><name pos:start="85:16" pos:end="85:16">s</name><operator pos:start="85:17" pos:end="85:18">-&gt;</operator><name pos:start="85:19" pos:end="85:23">cc_op</name></name> <operator pos:start="85:25" pos:end="85:25">-</operator> <name pos:start="85:27" pos:end="85:36">CC_OP_ADCB</name></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:59"><expr pos:start="87:9" pos:end="87:58"><name pos:start="87:9" pos:end="87:10">t1</name> <operator pos:start="87:12" pos:end="87:12">=</operator> <call pos:start="87:14" pos:end="87:58"><name pos:start="87:14" pos:end="87:23">gen_ext_tl</name><argument_list pos:start="87:24" pos:end="87:58">(<argument pos:start="87:25" pos:end="87:32"><expr pos:start="87:25" pos:end="87:32"><name pos:start="87:25" pos:end="87:32">cpu_tmp0</name></expr></argument>, <argument pos:start="87:35" pos:end="87:44"><expr pos:start="87:35" pos:end="87:44"><name pos:start="87:35" pos:end="87:44">cpu_cc_src</name></expr></argument>, <argument pos:start="87:47" pos:end="87:50"><expr pos:start="87:47" pos:end="87:50"><name pos:start="87:47" pos:end="87:50">size</name></expr></argument>, <argument pos:start="87:53" pos:end="87:57"><expr pos:start="87:53" pos:end="87:57"><name pos:start="87:53" pos:end="87:57">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:54"><expr pos:start="89:9" pos:end="89:53"><name pos:start="89:9" pos:end="89:10">t0</name> <operator pos:start="89:12" pos:end="89:12">=</operator> <call pos:start="89:14" pos:end="89:53"><name pos:start="89:14" pos:end="89:23">gen_ext_tl</name><argument_list pos:start="89:24" pos:end="89:53">(<argument pos:start="89:25" pos:end="89:27"><expr pos:start="89:25" pos:end="89:27"><name pos:start="89:25" pos:end="89:27">reg</name></expr></argument>, <argument pos:start="89:30" pos:end="89:39"><expr pos:start="89:30" pos:end="89:39"><name pos:start="89:30" pos:end="89:39">cpu_cc_dst</name></expr></argument>, <argument pos:start="89:42" pos:end="89:45"><expr pos:start="89:42" pos:end="89:45"><name pos:start="89:42" pos:end="89:45">size</name></expr></argument>, <argument pos:start="89:48" pos:end="89:52"><expr pos:start="89:48" pos:end="89:52"><name pos:start="89:48" pos:end="89:52">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <label pos:start="91:5" pos:end="91:12"><name pos:start="91:5" pos:end="91:11">adc_sbb</name>:</label>

        <return pos:start="93:9" pos:end="95:72">return <expr pos:start="93:16" pos:end="95:71"><operator pos:start="93:16" pos:end="93:16">(</operator><name pos:start="93:17" pos:end="93:25">CCPrepare</name><operator pos:start="93:26" pos:end="93:26">)</operator> <block pos:start="93:28" pos:end="95:71">{ <expr pos:start="93:30" pos:end="93:49"><operator pos:start="93:30" pos:end="93:30">.</operator><name pos:start="93:31" pos:end="93:34">cond</name> <operator pos:start="93:36" pos:end="93:36">=</operator> <name pos:start="93:38" pos:end="93:49">TCG_COND_LEU</name></expr>, <expr pos:start="93:52" pos:end="93:60"><operator pos:start="93:52" pos:end="93:52">.</operator><name pos:start="93:53" pos:end="93:55">reg</name> <operator pos:start="93:57" pos:end="93:57">=</operator> <name pos:start="93:59" pos:end="93:60">t0</name></expr>,

                             <expr pos:start="95:30" pos:end="95:39"><operator pos:start="95:30" pos:end="95:30">.</operator><name pos:start="95:31" pos:end="95:34">reg2</name> <operator pos:start="95:36" pos:end="95:36">=</operator> <name pos:start="95:38" pos:end="95:39">t1</name></expr>, <expr pos:start="95:42" pos:end="95:51"><operator pos:start="95:42" pos:end="95:42">.</operator><name pos:start="95:43" pos:end="95:46">mask</name> <operator pos:start="95:48" pos:end="95:48">=</operator> <operator pos:start="95:50" pos:end="95:50">-</operator><literal type="number" pos:start="95:51" pos:end="95:51">1</literal></expr>, <expr pos:start="95:54" pos:end="95:69"><operator pos:start="95:54" pos:end="95:54">.</operator><name pos:start="95:55" pos:end="95:62">use_reg2</name> <operator pos:start="95:64" pos:end="95:64">=</operator> <name pos:start="95:66" pos:end="95:69">true</name></expr> }</block></expr>;</return>



    <case pos:start="99:5" pos:end="99:39">case <expr pos:start="99:10" pos:end="99:38"><name pos:start="99:10" pos:end="99:21">CC_OP_LOGICB</name> <operator pos:start="99:23" pos:end="99:25">...</operator> <name pos:start="99:27" pos:end="99:38">CC_OP_LOGICQ</name></expr>:</case>

        <return pos:start="101:9" pos:end="101:66">return <expr pos:start="101:16" pos:end="101:65"><operator pos:start="101:16" pos:end="101:16">(</operator><name pos:start="101:17" pos:end="101:25">CCPrepare</name><operator pos:start="101:26" pos:end="101:26">)</operator> <block pos:start="101:28" pos:end="101:65">{ <expr pos:start="101:30" pos:end="101:51"><operator pos:start="101:30" pos:end="101:30">.</operator><name pos:start="101:31" pos:end="101:34">cond</name> <operator pos:start="101:36" pos:end="101:36">=</operator> <name pos:start="101:38" pos:end="101:51">TCG_COND_NEVER</name></expr>, <expr pos:start="101:54" pos:end="101:63"><operator pos:start="101:54" pos:end="101:54">.</operator><name pos:start="101:55" pos:end="101:58">mask</name> <operator pos:start="101:60" pos:end="101:60">=</operator> <operator pos:start="101:62" pos:end="101:62">-</operator><literal type="number" pos:start="101:63" pos:end="101:63">1</literal></expr> }</block></expr>;</return>



    <case pos:start="105:5" pos:end="105:35">case <expr pos:start="105:10" pos:end="105:34"><name pos:start="105:10" pos:end="105:19">CC_OP_INCB</name> <operator pos:start="105:21" pos:end="105:23">...</operator> <name pos:start="105:25" pos:end="105:34">CC_OP_INCQ</name></expr>:</case>

    <case pos:start="107:5" pos:end="107:35">case <expr pos:start="107:10" pos:end="107:34"><name pos:start="107:10" pos:end="107:19">CC_OP_DECB</name> <operator pos:start="107:21" pos:end="107:23">...</operator> <name pos:start="107:25" pos:end="107:34">CC_OP_DECQ</name></expr>:</case>

        <return pos:start="109:9" pos:end="111:62">return <expr pos:start="109:16" pos:end="111:61"><operator pos:start="109:16" pos:end="109:16">(</operator><name pos:start="109:17" pos:end="109:25">CCPrepare</name><operator pos:start="109:26" pos:end="109:26">)</operator> <block pos:start="109:28" pos:end="111:61">{ <expr pos:start="109:30" pos:end="109:48"><operator pos:start="109:30" pos:end="109:30">.</operator><name pos:start="109:31" pos:end="109:34">cond</name> <operator pos:start="109:36" pos:end="109:36">=</operator> <name pos:start="109:38" pos:end="109:48">TCG_COND_NE</name></expr>, <expr pos:start="109:51" pos:end="109:67"><operator pos:start="109:51" pos:end="109:51">.</operator><name pos:start="109:52" pos:end="109:54">reg</name> <operator pos:start="109:56" pos:end="109:56">=</operator> <name pos:start="109:58" pos:end="109:67">cpu_cc_src</name></expr>,

                             <expr pos:start="111:30" pos:end="111:39"><operator pos:start="111:30" pos:end="111:30">.</operator><name pos:start="111:31" pos:end="111:34">mask</name> <operator pos:start="111:36" pos:end="111:36">=</operator> <operator pos:start="111:38" pos:end="111:38">-</operator><literal type="number" pos:start="111:39" pos:end="111:39">1</literal></expr>, <expr pos:start="111:42" pos:end="111:59"><operator pos:start="111:42" pos:end="111:42">.</operator><name pos:start="111:43" pos:end="111:52">no_setcond</name> <operator pos:start="111:54" pos:end="111:54">=</operator> <name pos:start="111:56" pos:end="111:59">true</name></expr> }</block></expr>;</return>



    <case pos:start="115:5" pos:end="115:35">case <expr pos:start="115:10" pos:end="115:34"><name pos:start="115:10" pos:end="115:19">CC_OP_SHLB</name> <operator pos:start="115:21" pos:end="115:23">...</operator> <name pos:start="115:25" pos:end="115:34">CC_OP_SHLQ</name></expr>:</case>

        <comment type="block" pos:start="117:9" pos:end="117:45">/* (CC_SRC &gt;&gt; (DATA_BITS - 1)) &amp; 1 */</comment>

        <expr_stmt pos:start="119:9" pos:end="119:37"><expr pos:start="119:9" pos:end="119:36"><name pos:start="119:9" pos:end="119:12">size</name> <operator pos:start="119:14" pos:end="119:14">=</operator> <name pos:start="119:16" pos:end="119:23"><name pos:start="119:16" pos:end="119:16">s</name><operator pos:start="119:17" pos:end="119:18">-&gt;</operator><name pos:start="119:19" pos:end="119:23">cc_op</name></name> <operator pos:start="119:25" pos:end="119:25">-</operator> <name pos:start="119:27" pos:end="119:36">CC_OP_SHLB</name></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:32"><expr pos:start="121:9" pos:end="121:31"><name pos:start="121:9" pos:end="121:13">shift</name> <operator pos:start="121:15" pos:end="121:15">=</operator> <operator pos:start="121:17" pos:end="121:17">(</operator><literal type="number" pos:start="121:18" pos:end="121:18">8</literal> <operator pos:start="121:20" pos:end="121:21">&lt;&lt;</operator> <name pos:start="121:23" pos:end="121:26">size</name><operator pos:start="121:27" pos:end="121:27">)</operator> <operator pos:start="121:29" pos:end="121:29">-</operator> <literal type="number" pos:start="121:31" pos:end="121:31">1</literal></expr>;</expr_stmt>

        <return pos:start="123:9" pos:end="125:64">return <expr pos:start="123:16" pos:end="125:63"><operator pos:start="123:16" pos:end="123:16">(</operator><name pos:start="123:17" pos:end="123:25">CCPrepare</name><operator pos:start="123:26" pos:end="123:26">)</operator> <block pos:start="123:28" pos:end="125:63">{ <expr pos:start="123:30" pos:end="123:48"><operator pos:start="123:30" pos:end="123:30">.</operator><name pos:start="123:31" pos:end="123:34">cond</name> <operator pos:start="123:36" pos:end="123:36">=</operator> <name pos:start="123:38" pos:end="123:48">TCG_COND_NE</name></expr>, <expr pos:start="123:51" pos:end="123:67"><operator pos:start="123:51" pos:end="123:51">.</operator><name pos:start="123:52" pos:end="123:54">reg</name> <operator pos:start="123:56" pos:end="123:56">=</operator> <name pos:start="123:58" pos:end="123:67">cpu_cc_src</name></expr>,

                             <expr pos:start="125:30" pos:end="125:61"><operator pos:start="125:30" pos:end="125:30">.</operator><name pos:start="125:31" pos:end="125:34">mask</name> <operator pos:start="125:36" pos:end="125:36">=</operator> <operator pos:start="125:38" pos:end="125:38">(</operator><name pos:start="125:39" pos:end="125:50">target_ulong</name><operator pos:start="125:51" pos:end="125:51">)</operator><literal type="number" pos:start="125:52" pos:end="125:52">1</literal> <operator pos:start="125:54" pos:end="125:55">&lt;&lt;</operator> <name pos:start="125:57" pos:end="125:61">shift</name></expr> }</block></expr>;</return>



    <case pos:start="129:5" pos:end="129:35">case <expr pos:start="129:10" pos:end="129:34"><name pos:start="129:10" pos:end="129:19">CC_OP_MULB</name> <operator pos:start="129:21" pos:end="129:23">...</operator> <name pos:start="129:25" pos:end="129:34">CC_OP_MULQ</name></expr>:</case>

        <return pos:start="131:9" pos:end="133:61">return <expr pos:start="131:16" pos:end="133:60"><operator pos:start="131:16" pos:end="131:16">(</operator><name pos:start="131:17" pos:end="131:25">CCPrepare</name><operator pos:start="131:26" pos:end="131:26">)</operator> <block pos:start="131:28" pos:end="133:60">{ <expr pos:start="131:30" pos:end="131:48"><operator pos:start="131:30" pos:end="131:30">.</operator><name pos:start="131:31" pos:end="131:34">cond</name> <operator pos:start="131:36" pos:end="131:36">=</operator> <name pos:start="131:38" pos:end="131:48">TCG_COND_NE</name></expr>,

                             <expr pos:start="133:30" pos:end="133:46"><operator pos:start="133:30" pos:end="133:30">.</operator><name pos:start="133:31" pos:end="133:33">reg</name> <operator pos:start="133:35" pos:end="133:35">=</operator> <name pos:start="133:37" pos:end="133:46">cpu_cc_src</name></expr>, <expr pos:start="133:49" pos:end="133:58"><operator pos:start="133:49" pos:end="133:49">.</operator><name pos:start="133:50" pos:end="133:53">mask</name> <operator pos:start="133:55" pos:end="133:55">=</operator> <operator pos:start="133:57" pos:end="133:57">-</operator><literal type="number" pos:start="133:58" pos:end="133:58">1</literal></expr> }</block></expr>;</return>



    <case pos:start="137:5" pos:end="137:22">case <expr pos:start="137:10" pos:end="137:21"><name pos:start="137:10" pos:end="137:21">CC_OP_EFLAGS</name></expr>:</case>

    <case pos:start="139:5" pos:end="139:35">case <expr pos:start="139:10" pos:end="139:34"><name pos:start="139:10" pos:end="139:19">CC_OP_SARB</name> <operator pos:start="139:21" pos:end="139:23">...</operator> <name pos:start="139:25" pos:end="139:34">CC_OP_SARQ</name></expr>:</case>

        <comment type="block" pos:start="141:9" pos:end="141:24">/* CC_SRC &amp; 1 */</comment>

        <return pos:start="143:9" pos:end="145:63">return <expr pos:start="143:16" pos:end="145:62"><operator pos:start="143:16" pos:end="143:16">(</operator><name pos:start="143:17" pos:end="143:25">CCPrepare</name><operator pos:start="143:26" pos:end="143:26">)</operator> <block pos:start="143:28" pos:end="145:62">{ <expr pos:start="143:30" pos:end="143:48"><operator pos:start="143:30" pos:end="143:30">.</operator><name pos:start="143:31" pos:end="143:34">cond</name> <operator pos:start="143:36" pos:end="143:36">=</operator> <name pos:start="143:38" pos:end="143:48">TCG_COND_NE</name></expr>,

                             <expr pos:start="145:30" pos:end="145:46"><operator pos:start="145:30" pos:end="145:30">.</operator><name pos:start="145:31" pos:end="145:33">reg</name> <operator pos:start="145:35" pos:end="145:35">=</operator> <name pos:start="145:37" pos:end="145:46">cpu_cc_src</name></expr>, <expr pos:start="145:49" pos:end="145:60"><operator pos:start="145:49" pos:end="145:49">.</operator><name pos:start="145:50" pos:end="145:53">mask</name> <operator pos:start="145:55" pos:end="145:55">=</operator> <name pos:start="145:57" pos:end="145:60">CC_C</name></expr> }</block></expr>;</return>



    <default pos:start="149:5" pos:end="149:12">default:</default>

       <comment type="block" pos:start="151:8" pos:end="153:72">/* The need to compute only C from CC_OP_DYNAMIC is important

          in efficiently implementing e.g. INC at the start of a TB.  */</comment>

       <expr_stmt pos:start="155:8" pos:end="155:27"><expr pos:start="155:8" pos:end="155:26"><call pos:start="155:8" pos:end="155:26"><name pos:start="155:8" pos:end="155:23">gen_update_cc_op</name><argument_list pos:start="155:24" pos:end="155:26">(<argument pos:start="155:25" pos:end="155:25"><expr pos:start="155:25" pos:end="155:25"><name pos:start="155:25" pos:end="155:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <expr_stmt pos:start="157:8" pos:end="157:65"><expr pos:start="157:8" pos:end="157:64"><call pos:start="157:8" pos:end="157:64"><name pos:start="157:8" pos:end="157:30">gen_helper_cc_compute_c</name><argument_list pos:start="157:31" pos:end="157:64">(<argument pos:start="157:32" pos:end="157:43"><expr pos:start="157:32" pos:end="157:43"><name pos:start="157:32" pos:end="157:43">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="157:46" pos:end="157:52"><expr pos:start="157:46" pos:end="157:52"><name pos:start="157:46" pos:end="157:52">cpu_env</name></expr></argument>, <argument pos:start="157:55" pos:end="157:63"><expr pos:start="157:55" pos:end="157:63"><name pos:start="157:55" pos:end="157:63">cpu_cc_op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <expr_stmt pos:start="159:8" pos:end="159:46"><expr pos:start="159:8" pos:end="159:45"><call pos:start="159:8" pos:end="159:45"><name pos:start="159:8" pos:end="159:26">tcg_gen_extu_i32_tl</name><argument_list pos:start="159:27" pos:end="159:45">(<argument pos:start="159:28" pos:end="159:30"><expr pos:start="159:28" pos:end="159:30"><name pos:start="159:28" pos:end="159:30">reg</name></expr></argument>, <argument pos:start="159:33" pos:end="159:44"><expr pos:start="159:33" pos:end="159:44"><name pos:start="159:33" pos:end="159:44">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <return pos:start="161:8" pos:end="163:61">return <expr pos:start="161:15" pos:end="163:60"><operator pos:start="161:15" pos:end="161:15">(</operator><name pos:start="161:16" pos:end="161:24">CCPrepare</name><operator pos:start="161:25" pos:end="161:25">)</operator> <block pos:start="161:27" pos:end="163:60">{ <expr pos:start="161:29" pos:end="161:47"><operator pos:start="161:29" pos:end="161:29">.</operator><name pos:start="161:30" pos:end="161:33">cond</name> <operator pos:start="161:35" pos:end="161:35">=</operator> <name pos:start="161:37" pos:end="161:47">TCG_COND_NE</name></expr>, <expr pos:start="161:50" pos:end="161:59"><operator pos:start="161:50" pos:end="161:50">.</operator><name pos:start="161:51" pos:end="161:53">reg</name> <operator pos:start="161:55" pos:end="161:55">=</operator> <name pos:start="161:57" pos:end="161:59">reg</name></expr>,

                            <expr pos:start="163:29" pos:end="163:38"><operator pos:start="163:29" pos:end="163:29">.</operator><name pos:start="163:30" pos:end="163:33">mask</name> <operator pos:start="163:35" pos:end="163:35">=</operator> <operator pos:start="163:37" pos:end="163:37">-</operator><literal type="number" pos:start="163:38" pos:end="163:38">1</literal></expr>, <expr pos:start="163:41" pos:end="163:58"><operator pos:start="163:41" pos:end="163:41">.</operator><name pos:start="163:42" pos:end="163:51">no_setcond</name> <operator pos:start="163:53" pos:end="163:53">=</operator> <name pos:start="163:55" pos:end="163:58">true</name></expr> }</block></expr>;</return>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
