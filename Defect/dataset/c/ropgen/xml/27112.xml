<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/27112.c" pos:tabs="8"><function pos:start="1:1" pos:end="103:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:18">drive_hot_add</name><parameter_list pos:start="1:19" pos:end="1:52">(<parameter pos:start="1:20" pos:end="1:31"><decl pos:start="1:20" pos:end="1:31"><type pos:start="1:20" pos:end="1:31"><name pos:start="1:20" pos:end="1:26">Monitor</name> <modifier pos:start="1:28" pos:end="1:28">*</modifier></type><name pos:start="1:29" pos:end="1:31">mon</name></decl></parameter>, <parameter pos:start="1:34" pos:end="1:51"><decl pos:start="1:34" pos:end="1:51"><type pos:start="1:34" pos:end="1:51"><specifier pos:start="1:34" pos:end="1:38">const</specifier> <name pos:start="1:40" pos:end="1:44">QDict</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:51">qdict</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="103:1">{<block_content pos:start="5:5" pos:end="101:11">

    <decl_stmt pos:start="5:5" pos:end="5:21"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">dom</name></decl>, <decl pos:start="5:14" pos:end="5:20"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:14" pos:end="5:20">pci_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">unsigned</name></type> <name pos:start="7:14" pos:end="7:17">slot</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:12"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:12">type</name></decl>, <decl pos:start="9:15" pos:end="9:17"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:15" pos:end="9:17">bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:13">PCIDevice</name> <modifier pos:start="11:15" pos:end="11:15">*</modifier></type><name pos:start="11:16" pos:end="11:18">dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:15"><name pos:start="13:5" pos:end="13:13">DriveInfo</name> <modifier pos:start="13:15" pos:end="13:15">*</modifier></type><name pos:start="13:16" pos:end="13:20">dinfo</name> <init pos:start="13:22" pos:end="13:27">= <expr pos:start="13:24" pos:end="13:27"><name pos:start="13:24" pos:end="13:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:60"><decl pos:start="15:5" pos:end="15:59"><type pos:start="15:5" pos:end="15:16"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:14">char</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:24">pci_addr</name> <init pos:start="15:26" pos:end="15:59">= <expr pos:start="15:28" pos:end="15:59"><call pos:start="15:28" pos:end="15:59"><name pos:start="15:28" pos:end="15:40">qdict_get_str</name><argument_list pos:start="15:41" pos:end="15:59">(<argument pos:start="15:42" pos:end="15:46"><expr pos:start="15:42" pos:end="15:46"><name pos:start="15:42" pos:end="15:46">qdict</name></expr></argument>, <argument pos:start="15:49" pos:end="15:58"><expr pos:start="15:49" pos:end="15:58"><literal type="string" pos:start="15:49" pos:end="15:58">"pci_addr"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:52"><decl pos:start="17:5" pos:end="17:51"><type pos:start="17:5" pos:end="17:16"><specifier pos:start="17:5" pos:end="17:9">const</specifier> <name pos:start="17:11" pos:end="17:14">char</name> <modifier pos:start="17:16" pos:end="17:16">*</modifier></type><name pos:start="17:17" pos:end="17:20">opts</name> <init pos:start="17:22" pos:end="17:51">= <expr pos:start="17:24" pos:end="17:51"><call pos:start="17:24" pos:end="17:51"><name pos:start="17:24" pos:end="17:36">qdict_get_str</name><argument_list pos:start="17:37" pos:end="17:51">(<argument pos:start="17:38" pos:end="17:42"><expr pos:start="17:38" pos:end="17:42"><name pos:start="17:38" pos:end="17:42">qdict</name></expr></argument>, <argument pos:start="17:45" pos:end="17:50"><expr pos:start="17:45" pos:end="17:50"><literal type="string" pos:start="17:45" pos:end="17:50">"opts"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:22"><decl pos:start="19:5" pos:end="19:21"><type pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:12">BusState</name> <modifier pos:start="19:14" pos:end="19:14">*</modifier></type><name pos:start="19:15" pos:end="19:21">scsibus</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:33"><expr pos:start="23:5" pos:end="23:32"><name pos:start="23:5" pos:end="23:9">dinfo</name> <operator pos:start="23:11" pos:end="23:11">=</operator> <call pos:start="23:13" pos:end="23:32"><name pos:start="23:13" pos:end="23:26">add_init_drive</name><argument_list pos:start="23:27" pos:end="23:32">(<argument pos:start="23:28" pos:end="23:31"><expr pos:start="23:28" pos:end="23:31"><name pos:start="23:28" pos:end="23:31">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="27:17"><if pos:start="25:5" pos:end="27:17">if <condition pos:start="25:8" pos:end="25:15">(<expr pos:start="25:9" pos:end="25:14"><operator pos:start="25:9" pos:end="25:9">!</operator><name pos:start="25:10" pos:end="25:14">dinfo</name></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:17"><block_content pos:start="27:9" pos:end="27:17">

        <goto pos:start="27:9" pos:end="27:17">goto <name pos:start="27:14" pos:end="27:16">err</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt pos:start="29:5" pos:end="35:5"><if pos:start="29:5" pos:end="35:5">if <condition pos:start="29:8" pos:end="29:23">(<expr pos:start="29:9" pos:end="29:22"><name pos:start="29:9" pos:end="29:22"><name pos:start="29:9" pos:end="29:13">dinfo</name><operator pos:start="29:14" pos:end="29:15">-&gt;</operator><name pos:start="29:16" pos:end="29:22">devaddr</name></name></expr>)</condition> <block pos:start="29:25" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:17">

        <expr_stmt pos:start="31:9" pos:end="31:62"><expr pos:start="31:9" pos:end="31:61"><call pos:start="31:9" pos:end="31:61"><name pos:start="31:9" pos:end="31:22">monitor_printf</name><argument_list pos:start="31:23" pos:end="31:61">(<argument pos:start="31:24" pos:end="31:26"><expr pos:start="31:24" pos:end="31:26"><name pos:start="31:24" pos:end="31:26">mon</name></expr></argument>, <argument pos:start="31:29" pos:end="31:60"><expr pos:start="31:29" pos:end="31:60"><literal type="string" pos:start="31:29" pos:end="31:60">"Parameter addr not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="33:9" pos:end="33:17">goto <name pos:start="33:14" pos:end="33:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:23"><expr pos:start="37:5" pos:end="37:22"><name pos:start="37:5" pos:end="37:8">type</name> <operator pos:start="37:10" pos:end="37:10">=</operator> <name pos:start="37:12" pos:end="37:22"><name pos:start="37:12" pos:end="37:16">dinfo</name><operator pos:start="37:17" pos:end="37:18">-&gt;</operator><name pos:start="37:19" pos:end="37:22">type</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:35"><expr pos:start="39:5" pos:end="39:34"><name pos:start="39:5" pos:end="39:7">bus</name> <operator pos:start="39:9" pos:end="39:9">=</operator> <call pos:start="39:11" pos:end="39:34"><name pos:start="39:11" pos:end="39:27">drive_get_max_bus</name> <argument_list pos:start="39:29" pos:end="39:34">(<argument pos:start="39:30" pos:end="39:33"><expr pos:start="39:30" pos:end="39:33"><name pos:start="39:30" pos:end="39:33">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="43:5" pos:end="89:5">switch <condition pos:start="43:12" pos:end="43:17">(<expr pos:start="43:13" pos:end="43:16"><name pos:start="43:13" pos:end="43:16">type</name></expr>)</condition> <block pos:start="43:19" pos:end="89:5">{<block_content pos:start="45:5" pos:end="87:17">

    <case pos:start="45:5" pos:end="45:17">case <expr pos:start="45:10" pos:end="45:16"><name pos:start="45:10" pos:end="45:16">IF_SCSI</name></expr>:</case>

        <if_stmt pos:start="47:9" pos:end="51:9"><if pos:start="47:9" pos:end="51:9">if <condition pos:start="47:12" pos:end="47:67">(<expr pos:start="47:13" pos:end="47:66"><call pos:start="47:13" pos:end="47:66"><name pos:start="47:13" pos:end="47:28">pci_read_devaddr</name><argument_list pos:start="47:29" pos:end="47:66">(<argument pos:start="47:30" pos:end="47:32"><expr pos:start="47:30" pos:end="47:32"><name pos:start="47:30" pos:end="47:32">mon</name></expr></argument>, <argument pos:start="47:35" pos:end="47:42"><expr pos:start="47:35" pos:end="47:42"><name pos:start="47:35" pos:end="47:42">pci_addr</name></expr></argument>, <argument pos:start="47:45" pos:end="47:48"><expr pos:start="47:45" pos:end="47:48"><operator pos:start="47:45" pos:end="47:45">&amp;</operator><name pos:start="47:46" pos:end="47:48">dom</name></expr></argument>, <argument pos:start="47:51" pos:end="47:58"><expr pos:start="47:51" pos:end="47:58"><operator pos:start="47:51" pos:end="47:51">&amp;</operator><name pos:start="47:52" pos:end="47:58">pci_bus</name></expr></argument>, <argument pos:start="47:61" pos:end="47:65"><expr pos:start="47:61" pos:end="47:65"><operator pos:start="47:61" pos:end="47:61">&amp;</operator><name pos:start="47:62" pos:end="47:65">slot</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="47:69" pos:end="51:9">{<block_content pos:start="49:13" pos:end="49:21">

            <goto pos:start="49:13" pos:end="49:21">goto <name pos:start="49:18" pos:end="49:20">err</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:48"><expr pos:start="53:9" pos:end="53:47"><name pos:start="53:9" pos:end="53:11">dev</name> <operator pos:start="53:13" pos:end="53:13">=</operator> <call pos:start="53:15" pos:end="53:47"><name pos:start="53:15" pos:end="53:29">pci_find_device</name><argument_list pos:start="53:30" pos:end="53:47">(<argument pos:start="53:31" pos:end="53:37"><expr pos:start="53:31" pos:end="53:37"><name pos:start="53:31" pos:end="53:37">pci_bus</name></expr></argument>, <argument pos:start="53:40" pos:end="53:43"><expr pos:start="53:40" pos:end="53:43"><name pos:start="53:40" pos:end="53:43">slot</name></expr></argument>, <argument pos:start="53:46" pos:end="53:46"><expr pos:start="53:46" pos:end="53:46"><literal type="number" pos:start="53:46" pos:end="53:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="55:9" pos:end="61:9"><if pos:start="55:9" pos:end="61:9">if <condition pos:start="55:12" pos:end="55:17">(<expr pos:start="55:13" pos:end="55:16"><operator pos:start="55:13" pos:end="55:13">!</operator><name pos:start="55:14" pos:end="55:16">dev</name></expr>)</condition> <block pos:start="55:19" pos:end="61:9">{<block_content pos:start="57:13" pos:end="59:21">

            <expr_stmt pos:start="57:13" pos:end="57:77"><expr pos:start="57:13" pos:end="57:76"><call pos:start="57:13" pos:end="57:76"><name pos:start="57:13" pos:end="57:26">monitor_printf</name><argument_list pos:start="57:27" pos:end="57:76">(<argument pos:start="57:28" pos:end="57:30"><expr pos:start="57:28" pos:end="57:30"><name pos:start="57:28" pos:end="57:30">mon</name></expr></argument>, <argument pos:start="57:33" pos:end="57:65"><expr pos:start="57:33" pos:end="57:65"><literal type="string" pos:start="57:33" pos:end="57:65">"no pci device with address %s\n"</literal></expr></argument>, <argument pos:start="57:68" pos:end="57:75"><expr pos:start="57:68" pos:end="57:75"><name pos:start="57:68" pos:end="57:75">pci_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="59:13" pos:end="59:21">goto <name pos:start="59:18" pos:end="59:20">err</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:52"><expr pos:start="63:9" pos:end="63:51"><name pos:start="63:9" pos:end="63:15">scsibus</name> <operator pos:start="63:17" pos:end="63:17">=</operator> <call pos:start="63:19" pos:end="63:51"><name pos:start="63:19" pos:end="63:29">QLIST_FIRST</name><argument_list pos:start="63:30" pos:end="63:51">(<argument pos:start="63:31" pos:end="63:50"><expr pos:start="63:31" pos:end="63:50"><operator pos:start="63:31" pos:end="63:31">&amp;</operator><name pos:start="63:32" pos:end="63:50"><name pos:start="63:32" pos:end="63:34">dev</name><operator pos:start="63:35" pos:end="63:36">-&gt;</operator><name pos:start="63:37" pos:end="63:40">qdev</name><operator pos:start="63:41" pos:end="63:41">.</operator><name pos:start="63:42" pos:end="63:50">child_bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="67:54"><expr pos:start="65:9" pos:end="67:53"><call pos:start="65:9" pos:end="67:53"><name pos:start="65:9" pos:end="65:33">scsi_bus_legacy_add_drive</name><argument_list pos:start="65:34" pos:end="67:53">(<argument pos:start="65:35" pos:end="65:67"><expr pos:start="65:35" pos:end="65:67"><call pos:start="65:35" pos:end="65:67"><name pos:start="65:35" pos:end="65:43">DO_UPCAST</name><argument_list pos:start="65:44" pos:end="65:67">(<argument pos:start="65:45" pos:end="65:51"><expr pos:start="65:45" pos:end="65:51"><name pos:start="65:45" pos:end="65:51">SCSIBus</name></expr></argument>, <argument pos:start="65:54" pos:end="65:57"><expr pos:start="65:54" pos:end="65:57"><name pos:start="65:54" pos:end="65:57">qbus</name></expr></argument>, <argument pos:start="65:60" pos:end="65:66"><expr pos:start="65:60" pos:end="65:66"><name pos:start="65:60" pos:end="65:66">scsibus</name></expr></argument>)</argument_list></call></expr></argument>,

                                  <argument pos:start="67:35" pos:end="67:39"><expr pos:start="67:35" pos:end="67:39"><name pos:start="67:35" pos:end="67:39">dinfo</name></expr></argument>, <argument pos:start="67:42" pos:end="67:52"><expr pos:start="67:42" pos:end="67:52"><name pos:start="67:42" pos:end="67:52"><name pos:start="67:42" pos:end="67:46">dinfo</name><operator pos:start="67:47" pos:end="67:48">-&gt;</operator><name pos:start="67:49" pos:end="67:52">unit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="73:36"><expr pos:start="69:9" pos:end="73:35"><call pos:start="69:9" pos:end="73:35"><name pos:start="69:9" pos:end="69:22">monitor_printf</name><argument_list pos:start="69:23" pos:end="73:35">(<argument pos:start="69:24" pos:end="69:26"><expr pos:start="69:24" pos:end="69:26"><name pos:start="69:24" pos:end="69:26">mon</name></expr></argument>, <argument pos:start="69:29" pos:end="69:50"><expr pos:start="69:29" pos:end="69:50"><literal type="string" pos:start="69:29" pos:end="69:50">"OK bus %d, unit %d\n"</literal></expr></argument>,

                       <argument pos:start="71:24" pos:end="71:33"><expr pos:start="71:24" pos:end="71:33"><name pos:start="71:24" pos:end="71:33"><name pos:start="71:24" pos:end="71:28">dinfo</name><operator pos:start="71:29" pos:end="71:30">-&gt;</operator><name pos:start="71:31" pos:end="71:33">bus</name></name></expr></argument>,

                       <argument pos:start="73:24" pos:end="73:34"><expr pos:start="73:24" pos:end="73:34"><name pos:start="73:24" pos:end="73:34"><name pos:start="73:24" pos:end="73:28">dinfo</name><operator pos:start="73:29" pos:end="73:30">-&gt;</operator><name pos:start="73:31" pos:end="73:34">unit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="75:9" pos:end="75:14">break;</break>

    <case pos:start="77:5" pos:end="77:17">case <expr pos:start="77:10" pos:end="77:16"><name pos:start="77:10" pos:end="77:16">IF_NONE</name></expr>:</case>

        <expr_stmt pos:start="79:9" pos:end="79:36"><expr pos:start="79:9" pos:end="79:35"><call pos:start="79:9" pos:end="79:35"><name pos:start="79:9" pos:end="79:22">monitor_printf</name><argument_list pos:start="79:23" pos:end="79:35">(<argument pos:start="79:24" pos:end="79:26"><expr pos:start="79:24" pos:end="79:26"><name pos:start="79:24" pos:end="79:26">mon</name></expr></argument>, <argument pos:start="79:29" pos:end="79:34"><expr pos:start="79:29" pos:end="79:34"><literal type="string" pos:start="79:29" pos:end="79:34">"OK\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="81:9" pos:end="81:14">break;</break>

    <default pos:start="83:5" pos:end="83:12">default:</default>

        <expr_stmt pos:start="85:9" pos:end="85:70"><expr pos:start="85:9" pos:end="85:69"><call pos:start="85:9" pos:end="85:69"><name pos:start="85:9" pos:end="85:22">monitor_printf</name><argument_list pos:start="85:23" pos:end="85:69">(<argument pos:start="85:24" pos:end="85:26"><expr pos:start="85:24" pos:end="85:26"><name pos:start="85:24" pos:end="85:26">mon</name></expr></argument>, <argument pos:start="85:29" pos:end="85:62"><expr pos:start="85:29" pos:end="85:62"><literal type="string" pos:start="85:29" pos:end="85:62">"Can't hot-add drive to type %d\n"</literal></expr></argument>, <argument pos:start="85:65" pos:end="85:68"><expr pos:start="85:65" pos:end="85:68"><name pos:start="85:65" pos:end="85:68">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="87:9" pos:end="87:17">goto <name pos:start="87:14" pos:end="87:16">err</name>;</goto>

    </block_content>}</block></switch>

    <return pos:start="91:5" pos:end="91:11">return;</return>



<label pos:start="95:1" pos:end="95:4"><name pos:start="95:1" pos:end="95:3">err</name>:</label>

    <if_stmt pos:start="97:5" pos:end="99:28"><if pos:start="97:5" pos:end="99:28">if <condition pos:start="97:8" pos:end="97:14">(<expr pos:start="97:9" pos:end="97:13"><name pos:start="97:9" pos:end="97:13">dinfo</name></expr>)</condition><block type="pseudo" pos:start="99:9" pos:end="99:28"><block_content pos:start="99:9" pos:end="99:28">

        <expr_stmt pos:start="99:9" pos:end="99:28"><expr pos:start="99:9" pos:end="99:27"><call pos:start="99:9" pos:end="99:27"><name pos:start="99:9" pos:end="99:20">drive_uninit</name><argument_list pos:start="99:21" pos:end="99:27">(<argument pos:start="99:22" pos:end="99:26"><expr pos:start="99:22" pos:end="99:26"><name pos:start="99:22" pos:end="99:26">dinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="101:5" pos:end="101:11">return;</return>

</block_content>}</block></function>
</unit>
