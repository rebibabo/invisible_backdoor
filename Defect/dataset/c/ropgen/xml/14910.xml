<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14910.c" pos:tabs="8"><function pos:start="1:1" pos:end="199:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:30">qcow2_alloc_cluster_offset</name><parameter_list pos:start="1:31" pos:end="3:76">(<parameter pos:start="1:32" pos:end="1:51"><decl pos:start="1:32" pos:end="1:51"><type pos:start="1:32" pos:end="1:51"><name pos:start="1:32" pos:end="1:47">BlockDriverState</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:51">bs</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:68"><decl pos:start="1:54" pos:end="1:68"><type pos:start="1:54" pos:end="1:68"><name pos:start="1:54" pos:end="1:61">uint64_t</name></type> <name pos:start="1:63" pos:end="1:68">offset</name></decl></parameter>,

    <parameter pos:start="3:5" pos:end="3:15"><decl pos:start="3:5" pos:end="3:15"><type pos:start="3:5" pos:end="3:15"><name pos:start="3:5" pos:end="3:7">int</name></type> <name pos:start="3:9" pos:end="3:15">n_start</name></decl></parameter>, <parameter pos:start="3:18" pos:end="3:26"><decl pos:start="3:18" pos:end="3:26"><type pos:start="3:18" pos:end="3:26"><name pos:start="3:18" pos:end="3:20">int</name></type> <name pos:start="3:22" pos:end="3:26">n_end</name></decl></parameter>, <parameter pos:start="3:29" pos:end="3:36"><decl pos:start="3:29" pos:end="3:36"><type pos:start="3:29" pos:end="3:36"><name pos:start="3:29" pos:end="3:31">int</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:36">num</name></decl></parameter>, <parameter pos:start="3:39" pos:end="3:59"><decl pos:start="3:39" pos:end="3:59"><type pos:start="3:39" pos:end="3:59"><name pos:start="3:39" pos:end="3:46">uint64_t</name> <modifier pos:start="3:48" pos:end="3:48">*</modifier></type><name pos:start="3:49" pos:end="3:59">host_offset</name></decl></parameter>, <parameter pos:start="3:62" pos:end="3:75"><decl pos:start="3:62" pos:end="3:75"><type pos:start="3:62" pos:end="3:75"><name pos:start="3:62" pos:end="3:71">QCowL2Meta</name> <modifier pos:start="3:73" pos:end="3:73">*</modifier><modifier pos:start="3:74" pos:end="3:74">*</modifier></type><name pos:start="3:75" pos:end="3:75">m</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="199:1">{<block_content pos:start="7:5" pos:end="197:13">

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">BDRVQcowState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">s</name> <init pos:start="7:22" pos:end="7:33">= <expr pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:25">bs</name><operator pos:start="7:26" pos:end="7:27">-&gt;</operator><name pos:start="7:28" pos:end="7:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint64_t</name></type> <name pos:start="9:14" pos:end="9:18">start</name></decl>, <decl pos:start="9:21" pos:end="9:29"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:21" pos:end="9:29">remaining</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:27">cluster_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:22">cur_bytes</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:12"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="21:54"><expr pos:start="19:5" pos:end="21:53"><call pos:start="19:5" pos:end="21:53"><name pos:start="19:5" pos:end="19:37">trace_qcow2_alloc_clusters_offset</name><argument_list pos:start="19:38" pos:end="21:53">(<argument pos:start="19:39" pos:end="19:59"><expr pos:start="19:39" pos:end="19:59"><call pos:start="19:39" pos:end="19:59"><name pos:start="19:39" pos:end="19:57">qemu_coroutine_self</name><argument_list pos:start="19:58" pos:end="19:59">()</argument_list></call></expr></argument>, <argument pos:start="19:62" pos:end="19:67"><expr pos:start="19:62" pos:end="19:67"><name pos:start="19:62" pos:end="19:67">offset</name></expr></argument>,

                                      <argument pos:start="21:39" pos:end="21:45"><expr pos:start="21:39" pos:end="21:45"><name pos:start="21:39" pos:end="21:45">n_start</name></expr></argument>, <argument pos:start="21:48" pos:end="21:52"><expr pos:start="21:48" pos:end="21:52"><name pos:start="21:48" pos:end="21:52">n_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:73"><expr pos:start="25:5" pos:end="25:72"><call pos:start="25:5" pos:end="25:72"><name pos:start="25:5" pos:end="25:10">assert</name><argument_list pos:start="25:11" pos:end="25:72">(<argument pos:start="25:12" pos:end="25:71"><expr pos:start="25:12" pos:end="25:71"><name pos:start="25:12" pos:end="25:18">n_start</name> <operator pos:start="25:20" pos:end="25:20">*</operator> <name pos:start="25:22" pos:end="25:37">BDRV_SECTOR_SIZE</name> <operator pos:start="25:39" pos:end="25:40">==</operator> <call pos:start="25:42" pos:end="25:71"><name pos:start="25:42" pos:end="25:60">offset_into_cluster</name><argument_list pos:start="25:61" pos:end="25:71">(<argument pos:start="25:62" pos:end="25:62"><expr pos:start="25:62" pos:end="25:62"><name pos:start="25:62" pos:end="25:62">s</name></expr></argument>, <argument pos:start="25:65" pos:end="25:70"><expr pos:start="25:65" pos:end="25:70"><name pos:start="25:65" pos:end="25:70">offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:41"><expr pos:start="27:5" pos:end="27:40"><name pos:start="27:5" pos:end="27:10">offset</name> <operator pos:start="27:12" pos:end="27:12">=</operator> <call pos:start="27:14" pos:end="27:40"><name pos:start="27:14" pos:end="27:29">start_of_cluster</name><argument_list pos:start="27:30" pos:end="27:40">(<argument pos:start="27:31" pos:end="27:31"><expr pos:start="27:31" pos:end="27:31"><name pos:start="27:31" pos:end="27:31">s</name></expr></argument>, <argument pos:start="27:34" pos:end="27:39"><expr pos:start="27:34" pos:end="27:39"><name pos:start="27:34" pos:end="27:39">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="31:1" pos:end="31:6"><name pos:start="31:1" pos:end="31:5">again</name>:</label>

    <expr_stmt pos:start="33:5" pos:end="33:51"><expr pos:start="33:5" pos:end="33:50"><name pos:start="33:5" pos:end="33:9">start</name> <operator pos:start="33:11" pos:end="33:11">=</operator> <name pos:start="33:13" pos:end="33:18">offset</name> <operator pos:start="33:20" pos:end="33:20">+</operator> <operator pos:start="33:22" pos:end="33:22">(</operator><name pos:start="33:23" pos:end="33:29">n_start</name> <operator pos:start="33:31" pos:end="33:32">&lt;&lt;</operator> <name pos:start="33:34" pos:end="33:49">BDRV_SECTOR_BITS</name><operator pos:start="33:50" pos:end="33:50">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:54"><expr pos:start="35:5" pos:end="35:53"><name pos:start="35:5" pos:end="35:13">remaining</name> <operator pos:start="35:15" pos:end="35:15">=</operator> <operator pos:start="35:17" pos:end="35:17">(</operator><name pos:start="35:18" pos:end="35:22">n_end</name> <operator pos:start="35:24" pos:end="35:24">-</operator> <name pos:start="35:26" pos:end="35:32">n_start</name><operator pos:start="35:33" pos:end="35:33">)</operator> <operator pos:start="35:35" pos:end="35:36">&lt;&lt;</operator> <name pos:start="35:38" pos:end="35:53">BDRV_SECTOR_BITS</name></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:23"><expr pos:start="37:5" pos:end="37:22"><name pos:start="37:5" pos:end="37:18">cluster_offset</name> <operator pos:start="37:20" pos:end="37:20">=</operator> <literal type="number" pos:start="37:22" pos:end="37:22">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:21"><expr pos:start="39:5" pos:end="39:20"><operator pos:start="39:5" pos:end="39:5">*</operator><name pos:start="39:6" pos:end="39:16">host_offset</name> <operator pos:start="39:18" pos:end="39:18">=</operator> <literal type="number" pos:start="39:20" pos:end="39:20">0</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="43:5" pos:end="75:7">/*

     * Now start gathering as many contiguous clusters as possible:

     *

     * 1. Check for overlaps with in-flight allocations

     *

     *      a) Overlap not in the first cluster -&gt; shorten this request and let

     *         the caller handle the rest in its next loop iteration.

     *

     *      b) Real overlaps of two requests. Yield and restart the search for

     *         contiguous clusters (the situation could have changed while we

     *         were sleeping)

     *

     *      c) TODO: Request starts in the same cluster as the in-flight

     *         allocation ends. Shorten the COW of the in-fight allocation, set

     *         cluster_offset to write to the same cluster and set up the right

     *         synchronisation between the in-flight request and the new one.

     */</comment>

    <expr_stmt pos:start="77:5" pos:end="77:26"><expr pos:start="77:5" pos:end="77:25"><name pos:start="77:5" pos:end="77:13">cur_bytes</name> <operator pos:start="77:15" pos:end="77:15">=</operator> <name pos:start="77:17" pos:end="77:25">remaining</name></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:53"><expr pos:start="79:5" pos:end="79:52"><name pos:start="79:5" pos:end="79:7">ret</name> <operator pos:start="79:9" pos:end="79:9">=</operator> <call pos:start="79:11" pos:end="79:52"><name pos:start="79:11" pos:end="79:29">handle_dependencies</name><argument_list pos:start="79:30" pos:end="79:52">(<argument pos:start="79:31" pos:end="79:32"><expr pos:start="79:31" pos:end="79:32"><name pos:start="79:31" pos:end="79:32">bs</name></expr></argument>, <argument pos:start="79:35" pos:end="79:39"><expr pos:start="79:35" pos:end="79:39"><name pos:start="79:35" pos:end="79:39">start</name></expr></argument>, <argument pos:start="79:42" pos:end="79:51"><expr pos:start="79:42" pos:end="79:51"><operator pos:start="79:42" pos:end="79:42">&amp;</operator><name pos:start="79:43" pos:end="79:51">cur_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="81:5" pos:end="97:5"><if pos:start="81:5" pos:end="85:5">if <condition pos:start="81:8" pos:end="81:23">(<expr pos:start="81:9" pos:end="81:22"><name pos:start="81:9" pos:end="81:11">ret</name> <operator pos:start="81:13" pos:end="81:14">==</operator> <operator pos:start="81:16" pos:end="81:16">-</operator><name pos:start="81:17" pos:end="81:22">EAGAIN</name></expr>)</condition> <block pos:start="81:25" pos:end="85:5">{<block_content pos:start="83:9" pos:end="83:19">

        <goto pos:start="83:9" pos:end="83:19">goto <name pos:start="83:14" pos:end="83:18">again</name>;</goto>

    </block_content>}</block></if> <if type="elseif" pos:start="85:7" pos:end="89:5">else if <condition pos:start="85:15" pos:end="85:23">(<expr pos:start="85:16" pos:end="85:22"><name pos:start="85:16" pos:end="85:18">ret</name> <operator pos:start="85:20" pos:end="85:20">&lt;</operator> <literal type="number" pos:start="85:22" pos:end="85:22">0</literal></expr>)</condition> <block pos:start="85:25" pos:end="89:5">{<block_content pos:start="87:9" pos:end="87:19">

        <return pos:start="87:9" pos:end="87:19">return <expr pos:start="87:16" pos:end="87:18"><name pos:start="87:16" pos:end="87:18">ret</name></expr>;</return>

    </block_content>}</block></if> <else pos:start="89:7" pos:end="97:5">else <block pos:start="89:12" pos:end="97:5">{<block_content>

        <comment type="block" pos:start="91:9" pos:end="95:55">/* handle_dependencies() may have decreased cur_bytes (shortened

         * the allocations below) so that the next dependency is processed

         * correctly during the next loop iteration. */</comment>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="101:5" pos:end="105:7">/*

     * 2. Count contiguous COPIED clusters.

     */</comment>

    <expr_stmt pos:start="107:5" pos:end="107:67"><expr pos:start="107:5" pos:end="107:66"><name pos:start="107:5" pos:end="107:7">ret</name> <operator pos:start="107:9" pos:end="107:9">=</operator> <call pos:start="107:11" pos:end="107:66"><name pos:start="107:11" pos:end="107:23">handle_copied</name><argument_list pos:start="107:24" pos:end="107:66">(<argument pos:start="107:25" pos:end="107:26"><expr pos:start="107:25" pos:end="107:26"><name pos:start="107:25" pos:end="107:26">bs</name></expr></argument>, <argument pos:start="107:29" pos:end="107:33"><expr pos:start="107:29" pos:end="107:33"><name pos:start="107:29" pos:end="107:33">start</name></expr></argument>, <argument pos:start="107:36" pos:end="107:50"><expr pos:start="107:36" pos:end="107:50"><operator pos:start="107:36" pos:end="107:36">&amp;</operator><name pos:start="107:37" pos:end="107:50">cluster_offset</name></expr></argument>, <argument pos:start="107:53" pos:end="107:62"><expr pos:start="107:53" pos:end="107:62"><operator pos:start="107:53" pos:end="107:53">&amp;</operator><name pos:start="107:54" pos:end="107:62">cur_bytes</name></expr></argument>, <argument pos:start="107:65" pos:end="107:65"><expr pos:start="107:65" pos:end="107:65"><name pos:start="107:65" pos:end="107:65">m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="109:5" pos:end="137:5"><if pos:start="109:5" pos:end="113:5">if <condition pos:start="109:8" pos:end="109:16">(<expr pos:start="109:9" pos:end="109:15"><name pos:start="109:9" pos:end="109:11">ret</name> <operator pos:start="109:13" pos:end="109:13">&lt;</operator> <literal type="number" pos:start="109:15" pos:end="109:15">0</literal></expr>)</condition> <block pos:start="109:18" pos:end="113:5">{<block_content pos:start="111:9" pos:end="111:19">

        <return pos:start="111:9" pos:end="111:19">return <expr pos:start="111:16" pos:end="111:18"><name pos:start="111:16" pos:end="111:18">ret</name></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="113:7" pos:end="133:5">else if <condition pos:start="113:15" pos:end="113:19">(<expr pos:start="113:16" pos:end="113:18"><name pos:start="113:16" pos:end="113:18">ret</name></expr>)</condition> <block pos:start="113:21" pos:end="133:5">{<block_content pos:start="115:9" pos:end="131:30">

        <if_stmt pos:start="115:9" pos:end="119:9"><if pos:start="115:9" pos:end="119:9">if <condition pos:start="115:12" pos:end="115:26">(<expr pos:start="115:13" pos:end="115:25"><operator pos:start="115:13" pos:end="115:13">!</operator><operator pos:start="115:14" pos:end="115:14">*</operator><name pos:start="115:15" pos:end="115:25">host_offset</name></expr>)</condition> <block pos:start="115:28" pos:end="119:9">{<block_content pos:start="117:13" pos:end="117:63">

            <expr_stmt pos:start="117:13" pos:end="117:63"><expr pos:start="117:13" pos:end="117:62"><operator pos:start="117:13" pos:end="117:13">*</operator><name pos:start="117:14" pos:end="117:24">host_offset</name> <operator pos:start="117:26" pos:end="117:26">=</operator> <call pos:start="117:28" pos:end="117:62"><name pos:start="117:28" pos:end="117:43">start_of_cluster</name><argument_list pos:start="117:44" pos:end="117:62">(<argument pos:start="117:45" pos:end="117:45"><expr pos:start="117:45" pos:end="117:45"><name pos:start="117:45" pos:end="117:45">s</name></expr></argument>, <argument pos:start="117:48" pos:end="117:61"><expr pos:start="117:48" pos:end="117:61"><name pos:start="117:48" pos:end="117:61">cluster_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="123:9" pos:end="123:37"><expr pos:start="123:9" pos:end="123:36"><name pos:start="123:9" pos:end="123:13">start</name>           <operator pos:start="123:25" pos:end="123:26">+=</operator> <name pos:start="123:28" pos:end="123:36">cur_bytes</name></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:37"><expr pos:start="125:9" pos:end="125:36"><name pos:start="125:9" pos:end="125:17">remaining</name>       <operator pos:start="125:25" pos:end="125:26">-=</operator> <name pos:start="125:28" pos:end="125:36">cur_bytes</name></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:37"><expr pos:start="127:9" pos:end="127:36"><name pos:start="127:9" pos:end="127:22">cluster_offset</name>  <operator pos:start="127:25" pos:end="127:26">+=</operator> <name pos:start="127:28" pos:end="127:36">cur_bytes</name></expr>;</expr_stmt>



        <expr_stmt pos:start="131:9" pos:end="131:30"><expr pos:start="131:9" pos:end="131:29"><name pos:start="131:9" pos:end="131:17">cur_bytes</name> <operator pos:start="131:19" pos:end="131:19">=</operator> <name pos:start="131:21" pos:end="131:29">remaining</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="133:7" pos:end="137:5">else if <condition pos:start="133:15" pos:end="133:30">(<expr pos:start="133:16" pos:end="133:29"><name pos:start="133:16" pos:end="133:24">cur_bytes</name> <operator pos:start="133:26" pos:end="133:27">==</operator> <literal type="number" pos:start="133:29" pos:end="133:29">0</literal></expr>)</condition> <block pos:start="133:32" pos:end="137:5">{<block_content pos:start="135:9" pos:end="135:18">

        <goto pos:start="135:9" pos:end="135:18">goto <name pos:start="135:14" pos:end="135:17">done</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="141:5" pos:end="141:61">/* If there is something left to allocate, do that now */</comment>

    <if_stmt pos:start="143:5" pos:end="147:5"><if pos:start="143:5" pos:end="147:5">if <condition pos:start="143:8" pos:end="143:23">(<expr pos:start="143:9" pos:end="143:22"><name pos:start="143:9" pos:end="143:17">remaining</name> <operator pos:start="143:19" pos:end="143:20">==</operator> <literal type="number" pos:start="143:22" pos:end="143:22">0</literal></expr>)</condition> <block pos:start="143:25" pos:end="147:5">{<block_content pos:start="145:9" pos:end="145:18">

        <goto pos:start="145:9" pos:end="145:18">goto <name pos:start="145:14" pos:end="145:17">done</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="151:5" pos:end="157:7">/*

     * 3. If the request still hasn't completed, allocate new clusters,

     *    considering any cluster_offset of steps 1c or 2.

     */</comment>

    <expr_stmt pos:start="159:5" pos:end="159:66"><expr pos:start="159:5" pos:end="159:65"><name pos:start="159:5" pos:end="159:7">ret</name> <operator pos:start="159:9" pos:end="159:9">=</operator> <call pos:start="159:11" pos:end="159:65"><name pos:start="159:11" pos:end="159:22">handle_alloc</name><argument_list pos:start="159:23" pos:end="159:65">(<argument pos:start="159:24" pos:end="159:25"><expr pos:start="159:24" pos:end="159:25"><name pos:start="159:24" pos:end="159:25">bs</name></expr></argument>, <argument pos:start="159:28" pos:end="159:32"><expr pos:start="159:28" pos:end="159:32"><name pos:start="159:28" pos:end="159:32">start</name></expr></argument>, <argument pos:start="159:35" pos:end="159:49"><expr pos:start="159:35" pos:end="159:49"><operator pos:start="159:35" pos:end="159:35">&amp;</operator><name pos:start="159:36" pos:end="159:49">cluster_offset</name></expr></argument>, <argument pos:start="159:52" pos:end="159:61"><expr pos:start="159:52" pos:end="159:61"><operator pos:start="159:52" pos:end="159:52">&amp;</operator><name pos:start="159:53" pos:end="159:61">cur_bytes</name></expr></argument>, <argument pos:start="159:64" pos:end="159:64"><expr pos:start="159:64" pos:end="159:64"><name pos:start="159:64" pos:end="159:64">m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="161:5" pos:end="181:5"><if pos:start="161:5" pos:end="165:5">if <condition pos:start="161:8" pos:end="161:16">(<expr pos:start="161:9" pos:end="161:15"><name pos:start="161:9" pos:end="161:11">ret</name> <operator pos:start="161:13" pos:end="161:13">&lt;</operator> <literal type="number" pos:start="161:15" pos:end="161:15">0</literal></expr>)</condition> <block pos:start="161:18" pos:end="165:5">{<block_content pos:start="163:9" pos:end="163:19">

        <return pos:start="163:9" pos:end="163:19">return <expr pos:start="163:16" pos:end="163:18"><name pos:start="163:16" pos:end="163:18">ret</name></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="165:7" pos:end="181:5">else if <condition pos:start="165:15" pos:end="165:19">(<expr pos:start="165:16" pos:end="165:18"><name pos:start="165:16" pos:end="165:18">ret</name></expr>)</condition> <block pos:start="165:21" pos:end="181:5">{<block_content pos:start="167:9" pos:end="179:37">

        <if_stmt pos:start="167:9" pos:end="171:9"><if pos:start="167:9" pos:end="171:9">if <condition pos:start="167:12" pos:end="167:26">(<expr pos:start="167:13" pos:end="167:25"><operator pos:start="167:13" pos:end="167:13">!</operator><operator pos:start="167:14" pos:end="167:14">*</operator><name pos:start="167:15" pos:end="167:25">host_offset</name></expr>)</condition> <block pos:start="167:28" pos:end="171:9">{<block_content pos:start="169:13" pos:end="169:63">

            <expr_stmt pos:start="169:13" pos:end="169:63"><expr pos:start="169:13" pos:end="169:62"><operator pos:start="169:13" pos:end="169:13">*</operator><name pos:start="169:14" pos:end="169:24">host_offset</name> <operator pos:start="169:26" pos:end="169:26">=</operator> <call pos:start="169:28" pos:end="169:62"><name pos:start="169:28" pos:end="169:43">start_of_cluster</name><argument_list pos:start="169:44" pos:end="169:62">(<argument pos:start="169:45" pos:end="169:45"><expr pos:start="169:45" pos:end="169:45"><name pos:start="169:45" pos:end="169:45">s</name></expr></argument>, <argument pos:start="169:48" pos:end="169:61"><expr pos:start="169:48" pos:end="169:61"><name pos:start="169:48" pos:end="169:61">cluster_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="175:9" pos:end="175:37"><expr pos:start="175:9" pos:end="175:36"><name pos:start="175:9" pos:end="175:13">start</name>           <operator pos:start="175:25" pos:end="175:26">+=</operator> <name pos:start="175:28" pos:end="175:36">cur_bytes</name></expr>;</expr_stmt>

        <expr_stmt pos:start="177:9" pos:end="177:37"><expr pos:start="177:9" pos:end="177:36"><name pos:start="177:9" pos:end="177:17">remaining</name>       <operator pos:start="177:25" pos:end="177:26">-=</operator> <name pos:start="177:28" pos:end="177:36">cur_bytes</name></expr>;</expr_stmt>

        <expr_stmt pos:start="179:9" pos:end="179:37"><expr pos:start="179:9" pos:end="179:36"><name pos:start="179:9" pos:end="179:22">cluster_offset</name>  <operator pos:start="179:25" pos:end="179:26">+=</operator> <name pos:start="179:28" pos:end="179:36">cur_bytes</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="185:5" pos:end="185:27">/* Some cleanup work */</comment>

<label pos:start="187:1" pos:end="187:5"><name pos:start="187:1" pos:end="187:4">done</name>:</label>

    <expr_stmt pos:start="189:5" pos:end="189:63"><expr pos:start="189:5" pos:end="189:62"><operator pos:start="189:5" pos:end="189:5">*</operator><name pos:start="189:6" pos:end="189:8">num</name> <operator pos:start="189:10" pos:end="189:10">=</operator> <operator pos:start="189:12" pos:end="189:12">(</operator><name pos:start="189:13" pos:end="189:17">n_end</name> <operator pos:start="189:19" pos:end="189:19">-</operator> <name pos:start="189:21" pos:end="189:27">n_start</name><operator pos:start="189:28" pos:end="189:28">)</operator> <operator pos:start="189:30" pos:end="189:30">-</operator> <operator pos:start="189:32" pos:end="189:32">(</operator><name pos:start="189:33" pos:end="189:41">remaining</name> <operator pos:start="189:43" pos:end="189:44">&gt;&gt;</operator> <name pos:start="189:46" pos:end="189:61">BDRV_SECTOR_BITS</name><operator pos:start="189:62" pos:end="189:62">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="191:5" pos:end="191:21"><expr pos:start="191:5" pos:end="191:20"><call pos:start="191:5" pos:end="191:20"><name pos:start="191:5" pos:end="191:10">assert</name><argument_list pos:start="191:11" pos:end="191:20">(<argument pos:start="191:12" pos:end="191:19"><expr pos:start="191:12" pos:end="191:19"><operator pos:start="191:12" pos:end="191:12">*</operator><name pos:start="191:13" pos:end="191:15">num</name> <operator pos:start="191:17" pos:end="191:17">&gt;</operator> <literal type="number" pos:start="191:19" pos:end="191:19">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="193:5" pos:end="193:30"><expr pos:start="193:5" pos:end="193:29"><call pos:start="193:5" pos:end="193:29"><name pos:start="193:5" pos:end="193:10">assert</name><argument_list pos:start="193:11" pos:end="193:29">(<argument pos:start="193:12" pos:end="193:28"><expr pos:start="193:12" pos:end="193:28"><operator pos:start="193:12" pos:end="193:12">*</operator><name pos:start="193:13" pos:end="193:23">host_offset</name> <operator pos:start="193:25" pos:end="193:26">!=</operator> <literal type="number" pos:start="193:28" pos:end="193:28">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="197:5" pos:end="197:13">return <expr pos:start="197:12" pos:end="197:12"><literal type="number" pos:start="197:12" pos:end="197:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
