<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26944.c" pos:tabs="8"><function pos:start="1:1" pos:end="105:1"><type pos:start="1:1" pos:end="1:17"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:17">int</name></type> <name pos:start="1:19" pos:end="1:32">dmg_read_chunk</name><parameter_list pos:start="1:33" pos:end="1:64">(<parameter pos:start="1:34" pos:end="1:48"><decl pos:start="1:34" pos:end="1:48"><type pos:start="1:34" pos:end="1:48"><name pos:start="1:34" pos:end="1:45">BDRVDMGState</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:48">s</name></decl></parameter>,<parameter pos:start="1:50" pos:end="1:63"><decl pos:start="1:50" pos:end="1:63"><type pos:start="1:50" pos:end="1:63"><name pos:start="1:50" pos:end="1:52">int</name></type> <name pos:start="1:54" pos:end="1:63">sector_num</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="105:1">{<block_content pos:start="5:5" pos:end="103:13">

    <if_stmt pos:start="5:5" pos:end="101:5"><if pos:start="5:5" pos:end="101:5">if<condition pos:start="5:7" pos:end="5:58">(<expr pos:start="5:8" pos:end="5:57"><operator pos:start="5:8" pos:end="5:8">!</operator><call pos:start="5:9" pos:end="5:57"><name pos:start="5:9" pos:end="5:26">is_sector_in_chunk</name><argument_list pos:start="5:27" pos:end="5:57">(<argument pos:start="5:28" pos:end="5:28"><expr pos:start="5:28" pos:end="5:28"><name pos:start="5:28" pos:end="5:28">s</name></expr></argument>,<argument pos:start="5:30" pos:end="5:45"><expr pos:start="5:30" pos:end="5:45"><name pos:start="5:30" pos:end="5:45"><name pos:start="5:30" pos:end="5:30">s</name><operator pos:start="5:31" pos:end="5:32">-&gt;</operator><name pos:start="5:33" pos:end="5:45">current_chunk</name></name></expr></argument>,<argument pos:start="5:47" pos:end="5:56"><expr pos:start="5:47" pos:end="5:56"><name pos:start="5:47" pos:end="5:56">sector_num</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="5:60" pos:end="101:5">{<block_content pos:start="7:9" pos:end="99:33">

	<decl_stmt pos:start="7:9" pos:end="7:16"><decl pos:start="7:9" pos:end="7:15"><type pos:start="7:9" pos:end="7:11"><name pos:start="7:9" pos:end="7:11">int</name></type> <name pos:start="7:13" pos:end="7:15">ret</name></decl>;</decl_stmt>

	<decl_stmt pos:start="9:9" pos:end="9:52"><decl pos:start="9:9" pos:end="9:51"><type pos:start="9:9" pos:end="9:16"><name pos:start="9:9" pos:end="9:16">uint32_t</name></type> <name pos:start="9:18" pos:end="9:22">chunk</name> <init pos:start="9:24" pos:end="9:51">= <expr pos:start="9:26" pos:end="9:51"><call pos:start="9:26" pos:end="9:51"><name pos:start="9:26" pos:end="9:37">search_chunk</name><argument_list pos:start="9:38" pos:end="9:51">(<argument pos:start="9:39" pos:end="9:39"><expr pos:start="9:39" pos:end="9:39"><name pos:start="9:39" pos:end="9:39">s</name></expr></argument>,<argument pos:start="9:41" pos:end="9:50"><expr pos:start="9:41" pos:end="9:50"><name pos:start="9:41" pos:end="9:50">sector_num</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



	<if_stmt pos:start="13:9" pos:end="15:22"><if pos:start="13:9" pos:end="15:22">if<condition pos:start="13:11" pos:end="13:30">(<expr pos:start="13:12" pos:end="13:29"><name pos:start="13:12" pos:end="13:16">chunk</name><operator pos:start="13:17" pos:end="13:18">&gt;=</operator><name pos:start="13:19" pos:end="13:29"><name pos:start="13:19" pos:end="13:19">s</name><operator pos:start="13:20" pos:end="13:21">-&gt;</operator><name pos:start="13:22" pos:end="13:29">n_chunks</name></name></expr>)</condition><block type="pseudo" pos:start="15:13" pos:end="15:22"><block_content pos:start="15:13" pos:end="15:22">

	    <return pos:start="15:13" pos:end="15:22">return <expr pos:start="15:20" pos:end="15:21"><operator pos:start="15:20" pos:end="15:20">-</operator><literal type="number" pos:start="15:21" pos:end="15:21">1</literal></expr>;</return></block_content></block></if></if_stmt>



	<expr_stmt pos:start="19:9" pos:end="19:39"><expr pos:start="19:9" pos:end="19:38"><name pos:start="19:9" pos:end="19:24"><name pos:start="19:9" pos:end="19:9">s</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:24">current_chunk</name></name> <operator pos:start="19:26" pos:end="19:26">=</operator> <name pos:start="19:28" pos:end="19:38"><name pos:start="19:28" pos:end="19:28">s</name><operator pos:start="19:29" pos:end="19:30">-&gt;</operator><name pos:start="19:31" pos:end="19:38">n_chunks</name></name></expr>;</expr_stmt>

	<switch pos:start="21:9" pos:end="97:9">switch<condition pos:start="21:15" pos:end="21:31">(<expr pos:start="21:16" pos:end="21:30"><name pos:start="21:16" pos:end="21:30"><name pos:start="21:16" pos:end="21:16">s</name><operator pos:start="21:17" pos:end="21:18">-&gt;</operator><name pos:start="21:19" pos:end="21:23">types</name><index pos:start="21:24" pos:end="21:30">[<expr pos:start="21:25" pos:end="21:29"><name pos:start="21:25" pos:end="21:29">chunk</name></expr>]</index></name></expr>)</condition> <block pos:start="21:33" pos:end="97:9">{<block_content pos:start="23:9" pos:end="95:18">

	<case pos:start="23:9" pos:end="23:24">case <expr pos:start="23:14" pos:end="23:23"><literal type="number" pos:start="23:14" pos:end="23:23">0x80000005</literal></expr>:</case> <block pos:start="23:26" pos:end="77:20">{<block_content pos:start="25:13" pos:end="77:18"> <comment type="block" pos:start="23:28" pos:end="23:48">/* zlib compressed */</comment>

	    <decl_stmt pos:start="25:13" pos:end="25:18"><decl pos:start="25:13" pos:end="25:17"><type pos:start="25:13" pos:end="25:15"><name pos:start="25:13" pos:end="25:15">int</name></type> <name pos:start="25:17" pos:end="25:17">i</name></decl>;</decl_stmt>



	    <comment type="block" pos:start="29:13" pos:end="31:27">/* we need to buffer, because only the chunk as whole can be

	     * inflated. */</comment>

	    <expr_stmt pos:start="33:13" pos:end="33:16"><expr pos:start="33:13" pos:end="33:15"><name pos:start="33:13" pos:end="33:13">i</name><operator pos:start="33:14" pos:end="33:14">=</operator><literal type="number" pos:start="33:15" pos:end="33:15">0</literal></expr>;</expr_stmt>

	    <do pos:start="35:13" pos:end="47:55">do <block pos:start="35:16" pos:end="47:13">{<block_content pos:start="37:17" pos:end="45:23">

		<expr_stmt pos:start="37:17" pos:end="39:51"><expr pos:start="37:17" pos:end="39:50"><name pos:start="37:17" pos:end="37:19">ret</name> <operator pos:start="37:21" pos:end="37:21">=</operator> <call pos:start="37:23" pos:end="39:50"><name pos:start="37:23" pos:end="37:27">pread</name><argument_list pos:start="37:28" pos:end="39:50">(<argument pos:start="37:29" pos:end="37:33"><expr pos:start="37:29" pos:end="37:33"><name pos:start="37:29" pos:end="37:33"><name pos:start="37:29" pos:end="37:29">s</name><operator pos:start="37:30" pos:end="37:31">-&gt;</operator><name pos:start="37:32" pos:end="37:33">fd</name></name></expr></argument>, <argument pos:start="37:36" pos:end="37:56"><expr pos:start="37:36" pos:end="37:56"><name pos:start="37:36" pos:end="37:54"><name pos:start="37:36" pos:end="37:36">s</name><operator pos:start="37:37" pos:end="37:38">-&gt;</operator><name pos:start="37:39" pos:end="37:54">compressed_chunk</name></name><operator pos:start="37:55" pos:end="37:55">+</operator><name pos:start="37:56" pos:end="37:56">i</name></expr></argument>, <argument pos:start="37:59" pos:end="37:77"><expr pos:start="37:59" pos:end="37:77"><name pos:start="37:59" pos:end="37:75"><name pos:start="37:59" pos:end="37:59">s</name><operator pos:start="37:60" pos:end="37:61">-&gt;</operator><name pos:start="37:62" pos:end="37:68">lengths</name><index pos:start="37:69" pos:end="37:75">[<expr pos:start="37:70" pos:end="37:74"><name pos:start="37:70" pos:end="37:74">chunk</name></expr>]</index></name><operator pos:start="37:76" pos:end="37:76">-</operator><name pos:start="37:77" pos:end="37:77">i</name></expr></argument>,

                            <argument pos:start="39:29" pos:end="39:49"><expr pos:start="39:29" pos:end="39:49"><name pos:start="39:29" pos:end="39:45"><name pos:start="39:29" pos:end="39:29">s</name><operator pos:start="39:30" pos:end="39:31">-&gt;</operator><name pos:start="39:32" pos:end="39:38">offsets</name><index pos:start="39:39" pos:end="39:45">[<expr pos:start="39:40" pos:end="39:44"><name pos:start="39:40" pos:end="39:44">chunk</name></expr>]</index></name> <operator pos:start="39:47" pos:end="39:47">+</operator> <name pos:start="39:49" pos:end="39:49">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt pos:start="41:17" pos:end="43:26"><if pos:start="41:17" pos:end="43:26">if<condition pos:start="41:19" pos:end="41:41">(<expr pos:start="41:20" pos:end="41:40"><name pos:start="41:20" pos:end="41:22">ret</name><operator pos:start="41:23" pos:end="41:23">&lt;</operator><literal type="number" pos:start="41:24" pos:end="41:24">0</literal> <operator pos:start="41:26" pos:end="41:27">&amp;&amp;</operator> <name pos:start="41:29" pos:end="41:33">errno</name><operator pos:start="41:34" pos:end="41:35">==</operator><name pos:start="41:36" pos:end="41:40">EINTR</name></expr>)</condition><block type="pseudo" pos:start="43:21" pos:end="43:26"><block_content pos:start="43:21" pos:end="43:26">

		    <expr_stmt pos:start="43:21" pos:end="43:26"><expr pos:start="43:21" pos:end="43:25"><name pos:start="43:21" pos:end="43:23">ret</name><operator pos:start="43:24" pos:end="43:24">=</operator><literal type="number" pos:start="43:25" pos:end="43:25">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt pos:start="45:17" pos:end="45:23"><expr pos:start="45:17" pos:end="45:22"><name pos:start="45:17" pos:end="45:17">i</name><operator pos:start="45:18" pos:end="45:19">+=</operator><name pos:start="45:20" pos:end="45:22">ret</name></expr>;</expr_stmt>

	    </block_content>}</block> while<condition pos:start="47:20" pos:end="47:54">(<expr pos:start="47:21" pos:end="47:53"><name pos:start="47:21" pos:end="47:23">ret</name><operator pos:start="47:24" pos:end="47:25">&gt;=</operator><literal type="number" pos:start="47:26" pos:end="47:26">0</literal> <operator pos:start="47:28" pos:end="47:29">&amp;&amp;</operator> <name pos:start="47:31" pos:end="47:33">ret</name><operator pos:start="47:34" pos:end="47:34">+</operator><name pos:start="47:35" pos:end="47:35">i</name><operator pos:start="47:36" pos:end="47:36">&lt;</operator><name pos:start="47:37" pos:end="47:53"><name pos:start="47:37" pos:end="47:37">s</name><operator pos:start="47:38" pos:end="47:39">-&gt;</operator><name pos:start="47:40" pos:end="47:46">lengths</name><index pos:start="47:47" pos:end="47:53">[<expr pos:start="47:48" pos:end="47:52"><name pos:start="47:48" pos:end="47:52">chunk</name></expr>]</index></name></expr>)</condition>;</do>



	    <if_stmt pos:start="51:13" pos:end="53:26"><if pos:start="51:13" pos:end="53:26">if <condition pos:start="51:16" pos:end="51:41">(<expr pos:start="51:17" pos:end="51:40"><name pos:start="51:17" pos:end="51:19">ret</name> <operator pos:start="51:21" pos:end="51:22">!=</operator> <name pos:start="51:24" pos:end="51:40"><name pos:start="51:24" pos:end="51:24">s</name><operator pos:start="51:25" pos:end="51:26">-&gt;</operator><name pos:start="51:27" pos:end="51:33">lengths</name><index pos:start="51:34" pos:end="51:40">[<expr pos:start="51:35" pos:end="51:39"><name pos:start="51:35" pos:end="51:39">chunk</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="53:17" pos:end="53:26"><block_content pos:start="53:17" pos:end="53:26">

		<return pos:start="53:17" pos:end="53:26">return <expr pos:start="53:24" pos:end="53:25"><operator pos:start="53:24" pos:end="53:24">-</operator><literal type="number" pos:start="53:25" pos:end="53:25">1</literal></expr>;</return></block_content></block></if></if_stmt>



	    <expr_stmt pos:start="57:13" pos:end="57:53"><expr pos:start="57:13" pos:end="57:52"><name pos:start="57:13" pos:end="57:30"><name pos:start="57:13" pos:end="57:13">s</name><operator pos:start="57:14" pos:end="57:15">-&gt;</operator><name pos:start="57:16" pos:end="57:22">zstream</name><operator pos:start="57:23" pos:end="57:23">.</operator><name pos:start="57:24" pos:end="57:30">next_in</name></name> <operator pos:start="57:32" pos:end="57:32">=</operator> <name pos:start="57:34" pos:end="57:52"><name pos:start="57:34" pos:end="57:34">s</name><operator pos:start="57:35" pos:end="57:36">-&gt;</operator><name pos:start="57:37" pos:end="57:52">compressed_chunk</name></name></expr>;</expr_stmt>

	    <expr_stmt pos:start="59:13" pos:end="59:52"><expr pos:start="59:13" pos:end="59:51"><name pos:start="59:13" pos:end="59:31"><name pos:start="59:13" pos:end="59:13">s</name><operator pos:start="59:14" pos:end="59:15">-&gt;</operator><name pos:start="59:16" pos:end="59:22">zstream</name><operator pos:start="59:23" pos:end="59:23">.</operator><name pos:start="59:24" pos:end="59:31">avail_in</name></name> <operator pos:start="59:33" pos:end="59:33">=</operator> <name pos:start="59:35" pos:end="59:51"><name pos:start="59:35" pos:end="59:35">s</name><operator pos:start="59:36" pos:end="59:37">-&gt;</operator><name pos:start="59:38" pos:end="59:44">lengths</name><index pos:start="59:45" pos:end="59:51">[<expr pos:start="59:46" pos:end="59:50"><name pos:start="59:46" pos:end="59:50">chunk</name></expr>]</index></name></expr>;</expr_stmt>

	    <expr_stmt pos:start="61:13" pos:end="61:56"><expr pos:start="61:13" pos:end="61:55"><name pos:start="61:13" pos:end="61:31"><name pos:start="61:13" pos:end="61:13">s</name><operator pos:start="61:14" pos:end="61:15">-&gt;</operator><name pos:start="61:16" pos:end="61:22">zstream</name><operator pos:start="61:23" pos:end="61:23">.</operator><name pos:start="61:24" pos:end="61:31">next_out</name></name> <operator pos:start="61:33" pos:end="61:33">=</operator> <name pos:start="61:35" pos:end="61:55"><name pos:start="61:35" pos:end="61:35">s</name><operator pos:start="61:36" pos:end="61:37">-&gt;</operator><name pos:start="61:38" pos:end="61:55">uncompressed_chunk</name></name></expr>;</expr_stmt>

	    <expr_stmt pos:start="63:13" pos:end="63:62"><expr pos:start="63:13" pos:end="63:61"><name pos:start="63:13" pos:end="63:32"><name pos:start="63:13" pos:end="63:13">s</name><operator pos:start="63:14" pos:end="63:15">-&gt;</operator><name pos:start="63:16" pos:end="63:22">zstream</name><operator pos:start="63:23" pos:end="63:23">.</operator><name pos:start="63:24" pos:end="63:32">avail_out</name></name> <operator pos:start="63:34" pos:end="63:34">=</operator> <literal type="number" pos:start="63:36" pos:end="63:38">512</literal><operator pos:start="63:39" pos:end="63:39">*</operator><name pos:start="63:40" pos:end="63:61"><name pos:start="63:40" pos:end="63:40">s</name><operator pos:start="63:41" pos:end="63:42">-&gt;</operator><name pos:start="63:43" pos:end="63:54">sectorcounts</name><index pos:start="63:55" pos:end="63:61">[<expr pos:start="63:56" pos:end="63:60"><name pos:start="63:56" pos:end="63:60">chunk</name></expr>]</index></name></expr>;</expr_stmt>

	    <expr_stmt pos:start="65:13" pos:end="65:44"><expr pos:start="65:13" pos:end="65:43"><name pos:start="65:13" pos:end="65:15">ret</name> <operator pos:start="65:17" pos:end="65:17">=</operator> <call pos:start="65:19" pos:end="65:43"><name pos:start="65:19" pos:end="65:30">inflateReset</name><argument_list pos:start="65:31" pos:end="65:43">(<argument pos:start="65:32" pos:end="65:42"><expr pos:start="65:32" pos:end="65:42"><operator pos:start="65:32" pos:end="65:32">&amp;</operator><name pos:start="65:33" pos:end="65:42"><name pos:start="65:33" pos:end="65:33">s</name><operator pos:start="65:34" pos:end="65:35">-&gt;</operator><name pos:start="65:36" pos:end="65:42">zstream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <if_stmt pos:start="67:13" pos:end="69:26"><if pos:start="67:13" pos:end="69:26">if<condition pos:start="67:15" pos:end="67:27">(<expr pos:start="67:16" pos:end="67:26"><name pos:start="67:16" pos:end="67:18">ret</name> <operator pos:start="67:20" pos:end="67:21">!=</operator> <name pos:start="67:23" pos:end="67:26">Z_OK</name></expr>)</condition><block type="pseudo" pos:start="69:17" pos:end="69:26"><block_content pos:start="69:17" pos:end="69:26">

		<return pos:start="69:17" pos:end="69:26">return <expr pos:start="69:24" pos:end="69:25"><operator pos:start="69:24" pos:end="69:24">-</operator><literal type="number" pos:start="69:25" pos:end="69:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

	    <expr_stmt pos:start="71:13" pos:end="71:49"><expr pos:start="71:13" pos:end="71:48"><name pos:start="71:13" pos:end="71:15">ret</name> <operator pos:start="71:17" pos:end="71:17">=</operator> <call pos:start="71:19" pos:end="71:48"><name pos:start="71:19" pos:end="71:25">inflate</name><argument_list pos:start="71:26" pos:end="71:48">(<argument pos:start="71:27" pos:end="71:37"><expr pos:start="71:27" pos:end="71:37"><operator pos:start="71:27" pos:end="71:27">&amp;</operator><name pos:start="71:28" pos:end="71:37"><name pos:start="71:28" pos:end="71:28">s</name><operator pos:start="71:29" pos:end="71:30">-&gt;</operator><name pos:start="71:31" pos:end="71:37">zstream</name></name></expr></argument>, <argument pos:start="71:40" pos:end="71:47"><expr pos:start="71:40" pos:end="71:47"><name pos:start="71:40" pos:end="71:47">Z_FINISH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <if_stmt pos:start="73:13" pos:end="75:26"><if pos:start="73:13" pos:end="75:26">if<condition pos:start="73:15" pos:end="73:89">(<expr pos:start="73:16" pos:end="73:88"><name pos:start="73:16" pos:end="73:18">ret</name> <operator pos:start="73:20" pos:end="73:21">!=</operator> <name pos:start="73:23" pos:end="73:34">Z_STREAM_END</name> <operator pos:start="73:36" pos:end="73:37">||</operator> <name pos:start="73:39" pos:end="73:58"><name pos:start="73:39" pos:end="73:39">s</name><operator pos:start="73:40" pos:end="73:41">-&gt;</operator><name pos:start="73:42" pos:end="73:48">zstream</name><operator pos:start="73:49" pos:end="73:49">.</operator><name pos:start="73:50" pos:end="73:58">total_out</name></name> <operator pos:start="73:60" pos:end="73:61">!=</operator> <literal type="number" pos:start="73:63" pos:end="73:65">512</literal><operator pos:start="73:66" pos:end="73:66">*</operator><name pos:start="73:67" pos:end="73:88"><name pos:start="73:67" pos:end="73:67">s</name><operator pos:start="73:68" pos:end="73:69">-&gt;</operator><name pos:start="73:70" pos:end="73:81">sectorcounts</name><index pos:start="73:82" pos:end="73:88">[<expr pos:start="73:83" pos:end="73:87"><name pos:start="73:83" pos:end="73:87">chunk</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="75:17" pos:end="75:26"><block_content pos:start="75:17" pos:end="75:26">

		<return pos:start="75:17" pos:end="75:26">return <expr pos:start="75:24" pos:end="75:25"><operator pos:start="75:24" pos:end="75:24">-</operator><literal type="number" pos:start="75:25" pos:end="75:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

	    <break pos:start="77:13" pos:end="77:18">break;</break> </block_content>}</block>

	<case pos:start="79:9" pos:end="79:15">case <expr pos:start="79:14" pos:end="79:14"><literal type="number" pos:start="79:14" pos:end="79:14">1</literal></expr>:</case> <comment type="block" pos:start="79:17" pos:end="79:26">/* copy */</comment>

	    <expr_stmt pos:start="81:13" pos:end="83:43"><expr pos:start="81:13" pos:end="83:42"><name pos:start="81:13" pos:end="81:15">ret</name> <operator pos:start="81:17" pos:end="81:17">=</operator> <call pos:start="81:19" pos:end="83:42"><name pos:start="81:19" pos:end="81:23">pread</name><argument_list pos:start="81:24" pos:end="83:42">(<argument pos:start="81:25" pos:end="81:29"><expr pos:start="81:25" pos:end="81:29"><name pos:start="81:25" pos:end="81:29"><name pos:start="81:25" pos:end="81:25">s</name><operator pos:start="81:26" pos:end="81:27">-&gt;</operator><name pos:start="81:28" pos:end="81:29">fd</name></name></expr></argument>, <argument pos:start="81:32" pos:end="81:52"><expr pos:start="81:32" pos:end="81:52"><name pos:start="81:32" pos:end="81:52"><name pos:start="81:32" pos:end="81:32">s</name><operator pos:start="81:33" pos:end="81:34">-&gt;</operator><name pos:start="81:35" pos:end="81:52">uncompressed_chunk</name></name></expr></argument>, <argument pos:start="81:55" pos:end="81:71"><expr pos:start="81:55" pos:end="81:71"><name pos:start="81:55" pos:end="81:71"><name pos:start="81:55" pos:end="81:55">s</name><operator pos:start="81:56" pos:end="81:57">-&gt;</operator><name pos:start="81:58" pos:end="81:64">lengths</name><index pos:start="81:65" pos:end="81:71">[<expr pos:start="81:66" pos:end="81:70"><name pos:start="81:66" pos:end="81:70">chunk</name></expr>]</index></name></expr></argument>,

                        <argument pos:start="83:25" pos:end="83:41"><expr pos:start="83:25" pos:end="83:41"><name pos:start="83:25" pos:end="83:41"><name pos:start="83:25" pos:end="83:25">s</name><operator pos:start="83:26" pos:end="83:27">-&gt;</operator><name pos:start="83:28" pos:end="83:34">offsets</name><index pos:start="83:35" pos:end="83:41">[<expr pos:start="83:36" pos:end="83:40"><name pos:start="83:36" pos:end="83:40">chunk</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <if_stmt pos:start="85:13" pos:end="87:26"><if pos:start="85:13" pos:end="87:26">if <condition pos:start="85:16" pos:end="85:41">(<expr pos:start="85:17" pos:end="85:40"><name pos:start="85:17" pos:end="85:19">ret</name> <operator pos:start="85:21" pos:end="85:22">!=</operator> <name pos:start="85:24" pos:end="85:40"><name pos:start="85:24" pos:end="85:24">s</name><operator pos:start="85:25" pos:end="85:26">-&gt;</operator><name pos:start="85:27" pos:end="85:33">lengths</name><index pos:start="85:34" pos:end="85:40">[<expr pos:start="85:35" pos:end="85:39"><name pos:start="85:35" pos:end="85:39">chunk</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="87:17" pos:end="87:26"><block_content pos:start="87:17" pos:end="87:26">

		<return pos:start="87:17" pos:end="87:26">return <expr pos:start="87:24" pos:end="87:25"><operator pos:start="87:24" pos:end="87:24">-</operator><literal type="number" pos:start="87:25" pos:end="87:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

	    <break pos:start="89:13" pos:end="89:18">break;</break>

	<case pos:start="91:9" pos:end="91:15">case <expr pos:start="91:14" pos:end="91:14"><literal type="number" pos:start="91:14" pos:end="91:14">2</literal></expr>:</case> <comment type="block" pos:start="91:17" pos:end="91:26">/* zero */</comment>

	    <expr_stmt pos:start="93:13" pos:end="93:73"><expr pos:start="93:13" pos:end="93:72"><call pos:start="93:13" pos:end="93:72"><name pos:start="93:13" pos:end="93:18">memset</name><argument_list pos:start="93:19" pos:end="93:72">(<argument pos:start="93:20" pos:end="93:40"><expr pos:start="93:20" pos:end="93:40"><name pos:start="93:20" pos:end="93:40"><name pos:start="93:20" pos:end="93:20">s</name><operator pos:start="93:21" pos:end="93:22">-&gt;</operator><name pos:start="93:23" pos:end="93:40">uncompressed_chunk</name></name></expr></argument>, <argument pos:start="93:43" pos:end="93:43"><expr pos:start="93:43" pos:end="93:43"><literal type="number" pos:start="93:43" pos:end="93:43">0</literal></expr></argument>, <argument pos:start="93:46" pos:end="93:71"><expr pos:start="93:46" pos:end="93:71"><literal type="number" pos:start="93:46" pos:end="93:48">512</literal><operator pos:start="93:49" pos:end="93:49">*</operator><name pos:start="93:50" pos:end="93:71"><name pos:start="93:50" pos:end="93:50">s</name><operator pos:start="93:51" pos:end="93:52">-&gt;</operator><name pos:start="93:53" pos:end="93:64">sectorcounts</name><index pos:start="93:65" pos:end="93:71">[<expr pos:start="93:66" pos:end="93:70"><name pos:start="93:66" pos:end="93:70">chunk</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <break pos:start="95:13" pos:end="95:18">break;</break>

	</block_content>}</block></switch>

	<expr_stmt pos:start="99:9" pos:end="99:33"><expr pos:start="99:9" pos:end="99:32"><name pos:start="99:9" pos:end="99:24"><name pos:start="99:9" pos:end="99:9">s</name><operator pos:start="99:10" pos:end="99:11">-&gt;</operator><name pos:start="99:12" pos:end="99:24">current_chunk</name></name> <operator pos:start="99:26" pos:end="99:26">=</operator> <name pos:start="99:28" pos:end="99:32">chunk</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="103:5" pos:end="103:13">return <expr pos:start="103:12" pos:end="103:12"><literal type="number" pos:start="103:12" pos:end="103:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
