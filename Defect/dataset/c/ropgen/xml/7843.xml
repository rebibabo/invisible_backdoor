<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7843.c" pos:tabs="8"><function pos:start="1:1" pos:end="133:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">tcg_out_qemu_st</name><parameter_list pos:start="1:28" pos:end="1:73">(<parameter pos:start="1:29" pos:end="1:41"><decl pos:start="1:29" pos:end="1:41"><type pos:start="1:29" pos:end="1:41"><name pos:start="1:29" pos:end="1:38">TCGContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:41">s</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:61"><decl pos:start="1:44" pos:end="1:61"><type pos:start="1:44" pos:end="1:61"><specifier pos:start="1:44" pos:end="1:48">const</specifier> <name pos:start="1:50" pos:end="1:55">TCGArg</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:61">args</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:72"><decl pos:start="1:64" pos:end="1:72"><type pos:start="1:64" pos:end="1:72"><name pos:start="1:64" pos:end="1:67">bool</name></type> <name pos:start="1:69" pos:end="1:72">is64</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="133:1">{<block_content pos:start="5:5" pos:end="132:0">

    <decl_stmt pos:start="5:5" pos:end="5:34"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:10">TCGReg</name></type> <name pos:start="5:12" pos:end="5:17">datalo</name></decl>, <decl pos:start="5:20" pos:end="5:25"><type ref="prev" pos:start="5:5" pos:end="5:10"/><name pos:start="5:20" pos:end="5:25">datahi</name></decl>, <decl pos:start="5:28" pos:end="5:33"><type ref="prev" pos:start="5:5" pos:end="5:10"/><name pos:start="5:28" pos:end="5:33">addrlo</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:42"><decl pos:start="7:5" pos:end="7:41"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:10">TCGReg</name> <name pos:start="7:12" pos:end="7:17">addrhi</name></type> <name pos:start="7:19" pos:end="7:31">__attribute__</name><argument_list pos:start="7:32" pos:end="7:41">(<argument pos:start="7:33" pos:end="7:40"><expr pos:start="7:33" pos:end="7:40"><operator pos:start="7:33" pos:end="7:33">(</operator><name pos:start="7:34" pos:end="7:39">unused</name><operator pos:start="7:40" pos:end="7:40">)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:15"><name pos:start="9:5" pos:end="9:15">TCGMemOpIdx</name></type> <name pos:start="9:17" pos:end="9:18">oi</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="14:0"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">TCGMemOp</name></type> <name pos:start="11:14" pos:end="11:16">opc</name></decl>;</decl_stmt>

<cpp:if pos:start="13:1" pos:end="13:27">#<cpp:directive pos:start="13:2" pos:end="13:3">if</cpp:directive> <expr pos:start="13:5" pos:end="13:27"><call pos:start="13:5" pos:end="13:27"><name pos:start="13:5" pos:end="13:11">defined</name><argument_list pos:start="13:12" pos:end="13:27">(<argument pos:start="13:13" pos:end="13:26"><expr pos:start="13:13" pos:end="13:26"><name pos:start="13:13" pos:end="13:26">CONFIG_SOFTMMU</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:17"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:17">mem_index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:20"><decl pos:start="17:5" pos:end="17:19"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">TCGMemOp</name></type> <name pos:start="17:14" pos:end="17:19">s_bits</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="22:0"><decl pos:start="19:5" pos:end="19:31"><type pos:start="19:5" pos:end="19:19"><name pos:start="19:5" pos:end="19:17">tcg_insn_unit</name> <modifier pos:start="19:19" pos:end="19:19">*</modifier></type><name pos:start="19:20" pos:end="19:31"><name pos:start="19:20" pos:end="19:28">label_ptr</name><index pos:start="19:29" pos:end="19:31">[<expr pos:start="19:30" pos:end="19:30"><literal type="number" pos:start="19:30" pos:end="19:30">2</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:endif pos:start="21:1" pos:end="21:6">#<cpp:directive pos:start="21:2" pos:end="21:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="25:5" pos:end="25:21"><expr pos:start="25:5" pos:end="25:20"><name pos:start="25:5" pos:end="25:10">datalo</name> <operator pos:start="25:12" pos:end="25:12">=</operator> <operator pos:start="25:14" pos:end="25:14">*</operator><name pos:start="25:15" pos:end="25:18">args</name><operator pos:start="25:19" pos:end="25:20">++</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:63"><expr pos:start="27:5" pos:end="27:62"><name pos:start="27:5" pos:end="27:10">datahi</name> <operator pos:start="27:12" pos:end="27:12">=</operator> <operator pos:start="27:14" pos:end="27:14">(</operator><ternary pos:start="27:15" pos:end="27:61"><condition pos:start="27:15" pos:end="27:49"><expr pos:start="27:15" pos:end="27:47"><name pos:start="27:15" pos:end="27:33">TCG_TARGET_REG_BITS</name> <operator pos:start="27:35" pos:end="27:36">==</operator> <literal type="number" pos:start="27:38" pos:end="27:39">32</literal> <operator pos:start="27:41" pos:end="27:42">&amp;&amp;</operator> <name pos:start="27:44" pos:end="27:47">is64</name></expr> ?</condition><then pos:start="27:51" pos:end="27:57"> <expr pos:start="27:51" pos:end="27:57"><operator pos:start="27:51" pos:end="27:51">*</operator><name pos:start="27:52" pos:end="27:55">args</name><operator pos:start="27:56" pos:end="27:57">++</operator></expr> </then><else pos:start="27:59" pos:end="27:61">: <expr pos:start="27:61" pos:end="27:61"><literal type="number" pos:start="27:61" pos:end="27:61">0</literal></expr></else></ternary><operator pos:start="27:62" pos:end="27:62">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:21"><expr pos:start="29:5" pos:end="29:20"><name pos:start="29:5" pos:end="29:10">addrlo</name> <operator pos:start="29:12" pos:end="29:12">=</operator> <operator pos:start="29:14" pos:end="29:14">*</operator><name pos:start="29:15" pos:end="29:18">args</name><operator pos:start="29:19" pos:end="29:20">++</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:68"><expr pos:start="31:5" pos:end="31:67"><name pos:start="31:5" pos:end="31:10">addrhi</name> <operator pos:start="31:12" pos:end="31:12">=</operator> <operator pos:start="31:14" pos:end="31:14">(</operator><ternary pos:start="31:15" pos:end="31:66"><condition pos:start="31:15" pos:end="31:54"><expr pos:start="31:15" pos:end="31:52"><name pos:start="31:15" pos:end="31:30">TARGET_LONG_BITS</name> <operator pos:start="31:32" pos:end="31:32">&gt;</operator> <name pos:start="31:34" pos:end="31:52">TCG_TARGET_REG_BITS</name></expr> ?</condition><then pos:start="31:56" pos:end="31:62"> <expr pos:start="31:56" pos:end="31:62"><operator pos:start="31:56" pos:end="31:56">*</operator><name pos:start="31:57" pos:end="31:60">args</name><operator pos:start="31:61" pos:end="31:62">++</operator></expr> </then><else pos:start="31:64" pos:end="31:66">: <expr pos:start="31:66" pos:end="31:66"><literal type="number" pos:start="31:66" pos:end="31:66">0</literal></expr></else></ternary><operator pos:start="31:67" pos:end="31:67">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:17"><expr pos:start="33:5" pos:end="33:16"><name pos:start="33:5" pos:end="33:6">oi</name> <operator pos:start="33:8" pos:end="33:8">=</operator> <operator pos:start="33:10" pos:end="33:10">*</operator><name pos:start="33:11" pos:end="33:14">args</name><operator pos:start="33:15" pos:end="33:16">++</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="40:0"><expr pos:start="35:5" pos:end="35:23"><name pos:start="35:5" pos:end="35:7">opc</name> <operator pos:start="35:9" pos:end="35:9">=</operator> <call pos:start="35:11" pos:end="35:23"><name pos:start="35:11" pos:end="35:19">get_memop</name><argument_list pos:start="35:20" pos:end="35:23">(<argument pos:start="35:21" pos:end="35:22"><expr pos:start="35:21" pos:end="35:22"><name pos:start="35:21" pos:end="35:22">oi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:if pos:start="39:1" pos:end="39:27">#<cpp:directive pos:start="39:2" pos:end="39:3">if</cpp:directive> <expr pos:start="39:5" pos:end="39:27"><call pos:start="39:5" pos:end="39:27"><name pos:start="39:5" pos:end="39:11">defined</name><argument_list pos:start="39:12" pos:end="39:27">(<argument pos:start="39:13" pos:end="39:26"><expr pos:start="39:13" pos:end="39:26"><name pos:start="39:13" pos:end="39:26">CONFIG_SOFTMMU</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="41:5" pos:end="41:31"><expr pos:start="41:5" pos:end="41:30"><name pos:start="41:5" pos:end="41:13">mem_index</name> <operator pos:start="41:15" pos:end="41:15">=</operator> <call pos:start="41:17" pos:end="41:30"><name pos:start="41:17" pos:end="41:26">get_mmuidx</name><argument_list pos:start="41:27" pos:end="41:30">(<argument pos:start="41:28" pos:end="41:29"><expr pos:start="41:28" pos:end="41:29"><name pos:start="41:28" pos:end="41:29">oi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:27"><expr pos:start="43:5" pos:end="43:26"><name pos:start="43:5" pos:end="43:10">s_bits</name> <operator pos:start="43:12" pos:end="43:12">=</operator> <name pos:start="43:14" pos:end="43:16">opc</name> <operator pos:start="43:18" pos:end="43:18">&amp;</operator> <name pos:start="43:20" pos:end="43:26">MO_SIZE</name></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="49:67"><expr pos:start="47:5" pos:end="49:66"><call pos:start="47:5" pos:end="49:66"><name pos:start="47:5" pos:end="47:20">tcg_out_tlb_load</name><argument_list pos:start="47:21" pos:end="49:66">(<argument pos:start="47:22" pos:end="47:22"><expr pos:start="47:22" pos:end="47:22"><name pos:start="47:22" pos:end="47:22">s</name></expr></argument>, <argument pos:start="47:25" pos:end="47:30"><expr pos:start="47:25" pos:end="47:30"><name pos:start="47:25" pos:end="47:30">addrlo</name></expr></argument>, <argument pos:start="47:33" pos:end="47:38"><expr pos:start="47:33" pos:end="47:38"><name pos:start="47:33" pos:end="47:38">addrhi</name></expr></argument>, <argument pos:start="47:41" pos:end="47:49"><expr pos:start="47:41" pos:end="47:49"><name pos:start="47:41" pos:end="47:49">mem_index</name></expr></argument>, <argument pos:start="47:52" pos:end="47:57"><expr pos:start="47:52" pos:end="47:57"><name pos:start="47:52" pos:end="47:57">s_bits</name></expr></argument>,

                     <argument pos:start="49:22" pos:end="49:30"><expr pos:start="49:22" pos:end="49:30"><name pos:start="49:22" pos:end="49:30">label_ptr</name></expr></argument>, <argument pos:start="49:33" pos:end="49:65"><expr pos:start="49:33" pos:end="49:65"><call pos:start="49:33" pos:end="49:65"><name pos:start="49:33" pos:end="49:40">offsetof</name><argument_list pos:start="49:41" pos:end="49:65">(<argument pos:start="49:42" pos:end="49:52"><expr pos:start="49:42" pos:end="49:52"><name pos:start="49:42" pos:end="49:52">CPUTLBEntry</name></expr></argument>, <argument pos:start="49:55" pos:end="49:64"><expr pos:start="49:55" pos:end="49:64"><name pos:start="49:55" pos:end="49:64">addr_write</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="53:5" pos:end="53:19">/* TLB Hit.  */</comment>

    <expr_stmt pos:start="55:5" pos:end="55:69"><expr pos:start="55:5" pos:end="55:68"><call pos:start="55:5" pos:end="55:68"><name pos:start="55:5" pos:end="55:26">tcg_out_qemu_st_direct</name><argument_list pos:start="55:27" pos:end="55:68">(<argument pos:start="55:28" pos:end="55:28"><expr pos:start="55:28" pos:end="55:28"><name pos:start="55:28" pos:end="55:28">s</name></expr></argument>, <argument pos:start="55:31" pos:end="55:36"><expr pos:start="55:31" pos:end="55:36"><name pos:start="55:31" pos:end="55:36">datalo</name></expr></argument>, <argument pos:start="55:39" pos:end="55:44"><expr pos:start="55:39" pos:end="55:44"><name pos:start="55:39" pos:end="55:44">datahi</name></expr></argument>, <argument pos:start="55:47" pos:end="55:56"><expr pos:start="55:47" pos:end="55:56"><name pos:start="55:47" pos:end="55:56">TCG_REG_L1</name></expr></argument>, <argument pos:start="55:59" pos:end="55:59"><expr pos:start="55:59" pos:end="55:59"><literal type="number" pos:start="55:59" pos:end="55:59">0</literal></expr></argument>, <argument pos:start="55:62" pos:end="55:62"><expr pos:start="55:62" pos:end="55:62"><literal type="number" pos:start="55:62" pos:end="55:62">0</literal></expr></argument>, <argument pos:start="55:65" pos:end="55:67"><expr pos:start="55:65" pos:end="55:67"><name pos:start="55:65" pos:end="55:67">opc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="59:5" pos:end="59:63">/* Record the current context of a store into ldst label */</comment>

    <expr_stmt pos:start="61:5" pos:end="66:0"><expr pos:start="61:5" pos:end="63:47"><call pos:start="61:5" pos:end="63:47"><name pos:start="61:5" pos:end="61:23">add_qemu_ldst_label</name><argument_list pos:start="61:24" pos:end="63:47">(<argument pos:start="61:25" pos:end="61:25"><expr pos:start="61:25" pos:end="61:25"><name pos:start="61:25" pos:end="61:25">s</name></expr></argument>, <argument pos:start="61:28" pos:end="61:32"><expr pos:start="61:28" pos:end="61:32"><name pos:start="61:28" pos:end="61:32">false</name></expr></argument>, <argument pos:start="61:35" pos:end="61:36"><expr pos:start="61:35" pos:end="61:36"><name pos:start="61:35" pos:end="61:36">oi</name></expr></argument>, <argument pos:start="61:39" pos:end="61:44"><expr pos:start="61:39" pos:end="61:44"><name pos:start="61:39" pos:end="61:44">datalo</name></expr></argument>, <argument pos:start="61:47" pos:end="61:52"><expr pos:start="61:47" pos:end="61:52"><name pos:start="61:47" pos:end="61:52">datahi</name></expr></argument>, <argument pos:start="61:55" pos:end="61:60"><expr pos:start="61:55" pos:end="61:60"><name pos:start="61:55" pos:end="61:60">addrlo</name></expr></argument>, <argument pos:start="61:63" pos:end="61:68"><expr pos:start="61:63" pos:end="61:68"><name pos:start="61:63" pos:end="61:68">addrhi</name></expr></argument>,

                        <argument pos:start="63:25" pos:end="63:35"><expr pos:start="63:25" pos:end="63:35"><name pos:start="63:25" pos:end="63:35"><name pos:start="63:25" pos:end="63:25">s</name><operator pos:start="63:26" pos:end="63:27">-&gt;</operator><name pos:start="63:28" pos:end="63:35">code_ptr</name></name></expr></argument>, <argument pos:start="63:38" pos:end="63:46"><expr pos:start="63:38" pos:end="63:46"><name pos:start="63:38" pos:end="63:46">label_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="65:1" pos:end="65:5">#<cpp:directive pos:start="65:2" pos:end="65:5">else</cpp:directive></cpp:else>

    <block pos:start="67:5" pos:end="132:0">{<block_content pos:start="69:9" pos:end="127:74">

        <decl_stmt pos:start="69:9" pos:end="69:36"><decl pos:start="69:9" pos:end="69:35"><type pos:start="69:9" pos:end="69:15"><name pos:start="69:9" pos:end="69:15">int32_t</name></type> <name pos:start="69:17" pos:end="69:22">offset</name> <init pos:start="69:24" pos:end="69:35">= <expr pos:start="69:26" pos:end="69:35"><name pos:start="69:26" pos:end="69:35">GUEST_BASE</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="71:9" pos:end="71:29"><decl pos:start="71:9" pos:end="71:28"><type pos:start="71:9" pos:end="71:14"><name pos:start="71:9" pos:end="71:14">TCGReg</name></type> <name pos:start="71:16" pos:end="71:19">base</name> <init pos:start="71:21" pos:end="71:28">= <expr pos:start="71:23" pos:end="71:28"><name pos:start="71:23" pos:end="71:28">addrlo</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="73:9" pos:end="73:20"><decl pos:start="73:9" pos:end="73:19"><type pos:start="73:9" pos:end="73:11"><name pos:start="73:9" pos:end="73:11">int</name></type> <name pos:start="73:13" pos:end="73:15">seg</name> <init pos:start="73:17" pos:end="73:19">= <expr pos:start="73:19" pos:end="73:19"><literal type="number" pos:start="73:19" pos:end="73:19">0</literal></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="77:9" pos:end="77:74">/* See comment in tcg_out_qemu_ld re zero-extension of addrlo.  */</comment>

        <if_stmt pos:start="79:9" pos:end="123:9"><if pos:start="79:9" pos:end="91:9">if <condition pos:start="79:12" pos:end="79:48">(<expr pos:start="79:13" pos:end="79:47"><name pos:start="79:13" pos:end="79:22">GUEST_BASE</name> <operator pos:start="79:24" pos:end="79:25">==</operator> <literal type="number" pos:start="79:27" pos:end="79:27">0</literal> <operator pos:start="79:29" pos:end="79:30">||</operator> <name pos:start="79:32" pos:end="79:47">guest_base_flags</name></expr>)</condition> <block pos:start="79:50" pos:end="91:9">{<block_content pos:start="81:13" pos:end="89:13">

            <expr_stmt pos:start="81:13" pos:end="81:35"><expr pos:start="81:13" pos:end="81:34"><name pos:start="81:13" pos:end="81:15">seg</name> <operator pos:start="81:17" pos:end="81:17">=</operator> <name pos:start="81:19" pos:end="81:34">guest_base_flags</name></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:23"><expr pos:start="83:13" pos:end="83:22"><name pos:start="83:13" pos:end="83:18">offset</name> <operator pos:start="83:20" pos:end="83:20">=</operator> <literal type="number" pos:start="83:22" pos:end="83:22">0</literal></expr>;</expr_stmt>

            <if_stmt pos:start="85:13" pos:end="89:13"><if pos:start="85:13" pos:end="89:13">if <condition pos:start="85:16" pos:end="85:55">(<expr pos:start="85:17" pos:end="85:54"><name pos:start="85:17" pos:end="85:35">TCG_TARGET_REG_BITS</name> <operator pos:start="85:37" pos:end="85:37">&gt;</operator> <name pos:start="85:39" pos:end="85:54">TARGET_LONG_BITS</name></expr>)</condition> <block pos:start="85:57" pos:end="89:13">{<block_content pos:start="87:17" pos:end="87:32">

                <expr_stmt pos:start="87:17" pos:end="87:32"><expr pos:start="87:17" pos:end="87:31"><name pos:start="87:17" pos:end="87:19">seg</name> <operator pos:start="87:21" pos:end="87:22">|=</operator> <name pos:start="87:24" pos:end="87:31">P_ADDR32</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="91:11" pos:end="123:9">else if <condition pos:start="91:19" pos:end="91:45">(<expr pos:start="91:20" pos:end="91:44"><name pos:start="91:20" pos:end="91:38">TCG_TARGET_REG_BITS</name> <operator pos:start="91:40" pos:end="91:41">==</operator> <literal type="number" pos:start="91:43" pos:end="91:44">64</literal></expr>)</condition> <block pos:start="91:47" pos:end="123:9">{<block_content pos:start="97:13" pos:end="121:13">

            <comment type="block" pos:start="93:13" pos:end="95:68">/* ??? Note that we can't use the same SIB addressing scheme

               as for loads, since we require L0 free for bswap.  */</comment>

            <if_stmt pos:start="97:13" pos:end="121:13"><if pos:start="97:13" pos:end="115:13">if <condition pos:start="97:16" pos:end="97:37">(<expr pos:start="97:17" pos:end="97:36"><name pos:start="97:17" pos:end="97:22">offset</name> <operator pos:start="97:24" pos:end="97:25">!=</operator> <name pos:start="97:27" pos:end="97:36">GUEST_BASE</name></expr>)</condition> <block pos:start="97:39" pos:end="115:13">{<block_content pos:start="99:17" pos:end="113:27">

                <if_stmt pos:start="99:17" pos:end="105:17"><if pos:start="99:17" pos:end="105:17">if <condition pos:start="99:20" pos:end="99:43">(<expr pos:start="99:21" pos:end="99:42"><name pos:start="99:21" pos:end="99:36">TARGET_LONG_BITS</name> <operator pos:start="99:38" pos:end="99:39">==</operator> <literal type="number" pos:start="99:41" pos:end="99:42">32</literal></expr>)</condition> <block pos:start="99:45" pos:end="105:17">{<block_content pos:start="101:21" pos:end="103:38">

                    <expr_stmt pos:start="101:21" pos:end="101:56"><expr pos:start="101:21" pos:end="101:55"><call pos:start="101:21" pos:end="101:55"><name pos:start="101:21" pos:end="101:34">tcg_out_ext32u</name><argument_list pos:start="101:35" pos:end="101:55">(<argument pos:start="101:36" pos:end="101:36"><expr pos:start="101:36" pos:end="101:36"><name pos:start="101:36" pos:end="101:36">s</name></expr></argument>, <argument pos:start="101:39" pos:end="101:48"><expr pos:start="101:39" pos:end="101:48"><name pos:start="101:39" pos:end="101:48">TCG_REG_L0</name></expr></argument>, <argument pos:start="101:51" pos:end="101:54"><expr pos:start="101:51" pos:end="101:54"><name pos:start="101:51" pos:end="101:54">base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="103:21" pos:end="103:38"><expr pos:start="103:21" pos:end="103:37"><name pos:start="103:21" pos:end="103:24">base</name> <operator pos:start="103:26" pos:end="103:26">=</operator> <name pos:start="103:28" pos:end="103:37">TCG_REG_L0</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="107:17" pos:end="107:70"><expr pos:start="107:17" pos:end="107:69"><call pos:start="107:17" pos:end="107:69"><name pos:start="107:17" pos:end="107:28">tcg_out_movi</name><argument_list pos:start="107:29" pos:end="107:69">(<argument pos:start="107:30" pos:end="107:30"><expr pos:start="107:30" pos:end="107:30"><name pos:start="107:30" pos:end="107:30">s</name></expr></argument>, <argument pos:start="107:33" pos:end="107:44"><expr pos:start="107:33" pos:end="107:44"><name pos:start="107:33" pos:end="107:44">TCG_TYPE_I64</name></expr></argument>, <argument pos:start="107:47" pos:end="107:56"><expr pos:start="107:47" pos:end="107:56"><name pos:start="107:47" pos:end="107:56">TCG_REG_L1</name></expr></argument>, <argument pos:start="107:59" pos:end="107:68"><expr pos:start="107:59" pos:end="107:68"><name pos:start="107:59" pos:end="107:68">GUEST_BASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="109:17" pos:end="109:69"><expr pos:start="109:17" pos:end="109:68"><call pos:start="109:17" pos:end="109:68"><name pos:start="109:17" pos:end="109:27">tgen_arithr</name><argument_list pos:start="109:28" pos:end="109:68">(<argument pos:start="109:29" pos:end="109:29"><expr pos:start="109:29" pos:end="109:29"><name pos:start="109:29" pos:end="109:29">s</name></expr></argument>, <argument pos:start="109:32" pos:end="109:49"><expr pos:start="109:32" pos:end="109:49"><name pos:start="109:32" pos:end="109:40">ARITH_ADD</name> <operator pos:start="109:42" pos:end="109:42">+</operator> <name pos:start="109:44" pos:end="109:49">P_REXW</name></expr></argument>, <argument pos:start="109:52" pos:end="109:61"><expr pos:start="109:52" pos:end="109:61"><name pos:start="109:52" pos:end="109:61">TCG_REG_L1</name></expr></argument>, <argument pos:start="109:64" pos:end="109:67"><expr pos:start="109:64" pos:end="109:67"><name pos:start="109:64" pos:end="109:67">base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="111:17" pos:end="111:34"><expr pos:start="111:17" pos:end="111:33"><name pos:start="111:17" pos:end="111:20">base</name> <operator pos:start="111:22" pos:end="111:22">=</operator> <name pos:start="111:24" pos:end="111:33">TCG_REG_L1</name></expr>;</expr_stmt>

                <expr_stmt pos:start="113:17" pos:end="113:27"><expr pos:start="113:17" pos:end="113:26"><name pos:start="113:17" pos:end="113:22">offset</name> <operator pos:start="113:24" pos:end="113:24">=</operator> <literal type="number" pos:start="113:26" pos:end="113:26">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="115:15" pos:end="121:13">else if <condition pos:start="115:23" pos:end="115:46">(<expr pos:start="115:24" pos:end="115:45"><name pos:start="115:24" pos:end="115:39">TARGET_LONG_BITS</name> <operator pos:start="115:41" pos:end="115:42">==</operator> <literal type="number" pos:start="115:44" pos:end="115:45">32</literal></expr>)</condition> <block pos:start="115:48" pos:end="121:13">{<block_content pos:start="117:17" pos:end="119:34">

                <expr_stmt pos:start="117:17" pos:end="117:52"><expr pos:start="117:17" pos:end="117:51"><call pos:start="117:17" pos:end="117:51"><name pos:start="117:17" pos:end="117:30">tcg_out_ext32u</name><argument_list pos:start="117:31" pos:end="117:51">(<argument pos:start="117:32" pos:end="117:32"><expr pos:start="117:32" pos:end="117:32"><name pos:start="117:32" pos:end="117:32">s</name></expr></argument>, <argument pos:start="117:35" pos:end="117:44"><expr pos:start="117:35" pos:end="117:44"><name pos:start="117:35" pos:end="117:44">TCG_REG_L1</name></expr></argument>, <argument pos:start="117:47" pos:end="117:50"><expr pos:start="117:47" pos:end="117:50"><name pos:start="117:47" pos:end="117:50">base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="119:17" pos:end="119:34"><expr pos:start="119:17" pos:end="119:33"><name pos:start="119:17" pos:end="119:20">base</name> <operator pos:start="119:22" pos:end="119:22">=</operator> <name pos:start="119:24" pos:end="119:33">TCG_REG_L1</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="127:9" pos:end="127:74"><expr pos:start="127:9" pos:end="127:73"><call pos:start="127:9" pos:end="127:73"><name pos:start="127:9" pos:end="127:30">tcg_out_qemu_st_direct</name><argument_list pos:start="127:31" pos:end="127:73">(<argument pos:start="127:32" pos:end="127:32"><expr pos:start="127:32" pos:end="127:32"><name pos:start="127:32" pos:end="127:32">s</name></expr></argument>, <argument pos:start="127:35" pos:end="127:40"><expr pos:start="127:35" pos:end="127:40"><name pos:start="127:35" pos:end="127:40">datalo</name></expr></argument>, <argument pos:start="127:43" pos:end="127:48"><expr pos:start="127:43" pos:end="127:48"><name pos:start="127:43" pos:end="127:48">datahi</name></expr></argument>, <argument pos:start="127:51" pos:end="127:54"><expr pos:start="127:51" pos:end="127:54"><name pos:start="127:51" pos:end="127:54">base</name></expr></argument>, <argument pos:start="127:57" pos:end="127:62"><expr pos:start="127:57" pos:end="127:62"><name pos:start="127:57" pos:end="127:62">offset</name></expr></argument>, <argument pos:start="127:65" pos:end="127:67"><expr pos:start="127:65" pos:end="127:67"><name pos:start="127:65" pos:end="127:67">seg</name></expr></argument>, <argument pos:start="127:70" pos:end="127:72"><expr pos:start="127:70" pos:end="127:72"><name pos:start="127:70" pos:end="127:72">opc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>

<cpp:endif pos:start="131:1" pos:end="131:6">#<cpp:directive pos:start="131:2" pos:end="131:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
