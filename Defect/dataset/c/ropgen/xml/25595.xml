<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25595.c" pos:tabs="8"><function pos:start="1:1" pos:end="237:1"><type pos:start="1:1" pos:end="1:23"><name pos:start="1:1" pos:end="1:3">int</name> <name pos:start="1:5" pos:end="1:23">attribute_align_arg</name></type> <name pos:start="1:25" pos:end="1:36">avcodec_open</name><parameter_list pos:start="1:37" pos:end="1:75">(<parameter pos:start="1:38" pos:end="1:58"><decl pos:start="1:38" pos:end="1:58"><type pos:start="1:38" pos:end="1:58"><name pos:start="1:38" pos:end="1:51">AVCodecContext</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:58">avctx</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:74"><decl pos:start="1:61" pos:end="1:74"><type pos:start="1:61" pos:end="1:74"><name pos:start="1:61" pos:end="1:67">AVCodec</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:74">codec</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="237:1">{<block_content pos:start="5:5" pos:end="235:13">

    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name> <init pos:start="5:13" pos:end="5:15">= <expr pos:start="5:15" pos:end="5:15"><literal type="number" pos:start="5:15" pos:end="5:15">0</literal></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="9:5" pos:end="9:69">/* If there is a user-supplied mutex locking routine, call it. */</comment>

    <if_stmt pos:start="11:5" pos:end="17:5"><if pos:start="11:5" pos:end="17:5">if <condition pos:start="11:8" pos:end="11:22">(<expr pos:start="11:9" pos:end="11:21"><name pos:start="11:9" pos:end="11:21">ff_lockmgr_cb</name></expr>)</condition> <block pos:start="11:24" pos:end="17:5">{<block_content pos:start="13:9" pos:end="15:22">

        <if_stmt pos:start="13:9" pos:end="15:22"><if pos:start="13:9" pos:end="15:22">if <condition pos:start="13:12" pos:end="13:59">(<expr pos:start="13:13" pos:end="13:58"><call pos:start="13:13" pos:end="13:58">(<modifier pos:start="13:14" pos:end="13:14">*</modifier><name pos:start="13:15" pos:end="13:27">ff_lockmgr_cb</name>)<argument_list pos:start="13:29" pos:end="13:58">(<argument pos:start="13:30" pos:end="13:41"><expr pos:start="13:30" pos:end="13:41"><operator pos:start="13:30" pos:end="13:30">&amp;</operator><name pos:start="13:31" pos:end="13:41">codec_mutex</name></expr></argument>, <argument pos:start="13:44" pos:end="13:57"><expr pos:start="13:44" pos:end="13:57"><name pos:start="13:44" pos:end="13:57">AV_LOCK_OBTAIN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="15:13" pos:end="15:22"><block_content pos:start="15:13" pos:end="15:22">

            <return pos:start="15:13" pos:end="15:22">return <expr pos:start="15:20" pos:end="15:21"><operator pos:start="15:20" pos:end="15:20">-</operator><literal type="number" pos:start="15:21" pos:end="15:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:31"><expr pos:start="21:5" pos:end="21:30"><name pos:start="21:5" pos:end="21:28">entangled_thread_counter</name><operator pos:start="21:29" pos:end="21:30">++</operator></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="31:5"><if pos:start="23:5" pos:end="31:5">if<condition pos:start="23:7" pos:end="23:37">(<expr pos:start="23:8" pos:end="23:36"><name pos:start="23:8" pos:end="23:31">entangled_thread_counter</name> <operator pos:start="23:33" pos:end="23:34">!=</operator> <literal type="number" pos:start="23:36" pos:end="23:36">1</literal></expr>)</condition><block pos:start="23:38" pos:end="31:5">{<block_content pos:start="25:9" pos:end="29:17">

        <expr_stmt pos:start="25:9" pos:end="25:97"><expr pos:start="25:9" pos:end="25:96"><call pos:start="25:9" pos:end="25:96"><name pos:start="25:9" pos:end="25:14">av_log</name><argument_list pos:start="25:15" pos:end="25:96">(<argument pos:start="25:16" pos:end="25:20"><expr pos:start="25:16" pos:end="25:20"><name pos:start="25:16" pos:end="25:20">avctx</name></expr></argument>, <argument pos:start="25:23" pos:end="25:34"><expr pos:start="25:23" pos:end="25:34"><name pos:start="25:23" pos:end="25:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="25:37" pos:end="25:95"><expr pos:start="25:37" pos:end="25:95"><literal type="string" pos:start="25:37" pos:end="25:95">"insufficient thread locking around avcodec_open/close()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:17"><expr pos:start="27:9" pos:end="27:16"><name pos:start="27:9" pos:end="27:11">ret</name> <operator pos:start="27:13" pos:end="27:13">=</operator> <operator pos:start="27:15" pos:end="27:15">-</operator><literal type="number" pos:start="27:16" pos:end="27:16">1</literal></expr>;</expr_stmt>

        <goto pos:start="29:9" pos:end="29:17">goto <name pos:start="29:14" pos:end="29:16">end</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if<condition pos:start="35:7" pos:end="35:30">(<expr pos:start="35:8" pos:end="35:29"><name pos:start="35:8" pos:end="35:19"><name pos:start="35:8" pos:end="35:12">avctx</name><operator pos:start="35:13" pos:end="35:14">-&gt;</operator><name pos:start="35:15" pos:end="35:19">codec</name></name> <operator pos:start="35:21" pos:end="35:22">||</operator> <operator pos:start="35:24" pos:end="35:24">!</operator><name pos:start="35:25" pos:end="35:29">codec</name></expr>)</condition> <block pos:start="35:32" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:17">

        <expr_stmt pos:start="37:9" pos:end="37:30"><expr pos:start="37:9" pos:end="37:29"><name pos:start="37:9" pos:end="37:11">ret</name> <operator pos:start="37:13" pos:end="37:13">=</operator> <call pos:start="37:15" pos:end="37:29"><name pos:start="37:15" pos:end="37:21">AVERROR</name><argument_list pos:start="37:22" pos:end="37:29">(<argument pos:start="37:23" pos:end="37:28"><expr pos:start="37:23" pos:end="37:28"><name pos:start="37:23" pos:end="37:28">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="39:9" pos:end="39:17">goto <name pos:start="39:14" pos:end="39:16">end</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="45:5" pos:end="73:5"><if pos:start="45:5" pos:end="69:5">if <condition pos:start="45:8" pos:end="45:34">(<expr pos:start="45:9" pos:end="45:33"><name pos:start="45:9" pos:end="45:29"><name pos:start="45:9" pos:end="45:13">codec</name><operator pos:start="45:14" pos:end="45:15">-&gt;</operator><name pos:start="45:16" pos:end="45:29">priv_data_size</name></name> <operator pos:start="45:31" pos:end="45:31">&gt;</operator> <literal type="number" pos:start="45:33" pos:end="45:33">0</literal></expr>)</condition> <block pos:start="45:36" pos:end="69:5">{<block_content pos:start="47:7" pos:end="67:7">

      <if_stmt pos:start="47:7" pos:end="67:7"><if pos:start="47:7" pos:end="67:7">if<condition pos:start="47:9" pos:end="47:27">(<expr pos:start="47:10" pos:end="47:26"><operator pos:start="47:10" pos:end="47:10">!</operator><name pos:start="47:11" pos:end="47:26"><name pos:start="47:11" pos:end="47:15">avctx</name><operator pos:start="47:16" pos:end="47:17">-&gt;</operator><name pos:start="47:18" pos:end="47:26">priv_data</name></name></expr>)</condition><block pos:start="47:28" pos:end="67:7">{<block_content pos:start="49:9" pos:end="65:9">

        <expr_stmt pos:start="49:9" pos:end="49:61"><expr pos:start="49:9" pos:end="49:60"><name pos:start="49:9" pos:end="49:24"><name pos:start="49:9" pos:end="49:13">avctx</name><operator pos:start="49:14" pos:end="49:15">-&gt;</operator><name pos:start="49:16" pos:end="49:24">priv_data</name></name> <operator pos:start="49:26" pos:end="49:26">=</operator> <call pos:start="49:28" pos:end="49:60"><name pos:start="49:28" pos:end="49:37">av_mallocz</name><argument_list pos:start="49:38" pos:end="49:60">(<argument pos:start="49:39" pos:end="49:59"><expr pos:start="49:39" pos:end="49:59"><name pos:start="49:39" pos:end="49:59"><name pos:start="49:39" pos:end="49:43">codec</name><operator pos:start="49:44" pos:end="49:45">-&gt;</operator><name pos:start="49:46" pos:end="49:59">priv_data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="51:9" pos:end="57:9"><if pos:start="51:9" pos:end="57:9">if <condition pos:start="51:12" pos:end="51:30">(<expr pos:start="51:13" pos:end="51:29"><operator pos:start="51:13" pos:end="51:13">!</operator><name pos:start="51:14" pos:end="51:29"><name pos:start="51:14" pos:end="51:18">avctx</name><operator pos:start="51:19" pos:end="51:20">-&gt;</operator><name pos:start="51:21" pos:end="51:29">priv_data</name></name></expr>)</condition> <block pos:start="51:32" pos:end="57:9">{<block_content pos:start="53:13" pos:end="55:21">

            <expr_stmt pos:start="53:13" pos:end="53:34"><expr pos:start="53:13" pos:end="53:33"><name pos:start="53:13" pos:end="53:15">ret</name> <operator pos:start="53:17" pos:end="53:17">=</operator> <call pos:start="53:19" pos:end="53:33"><name pos:start="53:19" pos:end="53:25">AVERROR</name><argument_list pos:start="53:26" pos:end="53:33">(<argument pos:start="53:27" pos:end="53:32"><expr pos:start="53:27" pos:end="53:32"><name pos:start="53:27" pos:end="53:32">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="55:13" pos:end="55:21">goto <name pos:start="55:18" pos:end="55:20">end</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="59:9" pos:end="65:9"><if pos:start="59:9" pos:end="65:9">if<condition pos:start="59:11" pos:end="59:29">(<expr pos:start="59:12" pos:end="59:28"><name pos:start="59:12" pos:end="59:28"><name pos:start="59:12" pos:end="59:16">codec</name><operator pos:start="59:17" pos:end="59:18">-&gt;</operator><name pos:start="59:19" pos:end="59:28">priv_class</name></name></expr>)</condition><block pos:start="59:30" pos:end="65:9">{<block_content pos:start="61:13" pos:end="63:50"> <comment type="line" pos:start="59:32" pos:end="59:108">//this can be droped once all user apps use   avcodec_get_context_defaults3()</comment>

            <expr_stmt pos:start="61:13" pos:end="61:60"><expr pos:start="61:13" pos:end="61:59"><operator pos:start="61:13" pos:end="61:13">*</operator><operator pos:start="61:14" pos:end="61:14">(</operator><name pos:start="61:15" pos:end="61:21">AVClass</name><operator pos:start="61:22" pos:end="61:22">*</operator><operator pos:start="61:23" pos:end="61:23">*</operator><operator pos:start="61:24" pos:end="61:24">)</operator><name pos:start="61:25" pos:end="61:40"><name pos:start="61:25" pos:end="61:29">avctx</name><operator pos:start="61:30" pos:end="61:31">-&gt;</operator><name pos:start="61:32" pos:end="61:40">priv_data</name></name><operator pos:start="61:41" pos:end="61:41">=</operator> <name pos:start="61:43" pos:end="61:59"><name pos:start="61:43" pos:end="61:47">codec</name><operator pos:start="61:48" pos:end="61:49">-&gt;</operator><name pos:start="61:50" pos:end="61:59">priv_class</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:50"><expr pos:start="63:13" pos:end="63:49"><call pos:start="63:13" pos:end="63:49"><name pos:start="63:13" pos:end="63:31">av_opt_set_defaults</name><argument_list pos:start="63:32" pos:end="63:49">(<argument pos:start="63:33" pos:end="63:48"><expr pos:start="63:33" pos:end="63:48"><name pos:start="63:33" pos:end="63:48"><name pos:start="63:33" pos:end="63:37">avctx</name><operator pos:start="63:38" pos:end="63:39">-&gt;</operator><name pos:start="63:40" pos:end="63:48">priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

      </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="69:7" pos:end="73:5">else <block pos:start="69:12" pos:end="73:5">{<block_content pos:start="71:9" pos:end="71:32">

        <expr_stmt pos:start="71:9" pos:end="71:32"><expr pos:start="71:9" pos:end="71:31"><name pos:start="71:9" pos:end="71:24"><name pos:start="71:9" pos:end="71:13">avctx</name><operator pos:start="71:14" pos:end="71:15">-&gt;</operator><name pos:start="71:16" pos:end="71:24">priv_data</name></name> <operator pos:start="71:26" pos:end="71:26">=</operator> <name pos:start="71:28" pos:end="71:31">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="77:5" pos:end="83:67"><if pos:start="77:5" pos:end="79:79">if<condition pos:start="77:7" pos:end="77:49">(<expr pos:start="77:8" pos:end="77:48"><name pos:start="77:8" pos:end="77:25"><name pos:start="77:8" pos:end="77:12">avctx</name><operator pos:start="77:13" pos:end="77:14">-&gt;</operator><name pos:start="77:15" pos:end="77:25">coded_width</name></name> <operator pos:start="77:27" pos:end="77:28">&amp;&amp;</operator> <name pos:start="77:30" pos:end="77:48"><name pos:start="77:30" pos:end="77:34">avctx</name><operator pos:start="77:35" pos:end="77:36">-&gt;</operator><name pos:start="77:37" pos:end="77:48">coded_height</name></name></expr>)</condition><block type="pseudo" pos:start="79:9" pos:end="79:79"><block_content pos:start="79:9" pos:end="79:79">

        <expr_stmt pos:start="79:9" pos:end="79:79"><expr pos:start="79:9" pos:end="79:78"><call pos:start="79:9" pos:end="79:78"><name pos:start="79:9" pos:end="79:30">avcodec_set_dimensions</name><argument_list pos:start="79:31" pos:end="79:78">(<argument pos:start="79:32" pos:end="79:36"><expr pos:start="79:32" pos:end="79:36"><name pos:start="79:32" pos:end="79:36">avctx</name></expr></argument>, <argument pos:start="79:39" pos:end="79:56"><expr pos:start="79:39" pos:end="79:56"><name pos:start="79:39" pos:end="79:56"><name pos:start="79:39" pos:end="79:43">avctx</name><operator pos:start="79:44" pos:end="79:45">-&gt;</operator><name pos:start="79:46" pos:end="79:56">coded_width</name></name></expr></argument>, <argument pos:start="79:59" pos:end="79:77"><expr pos:start="79:59" pos:end="79:77"><name pos:start="79:59" pos:end="79:77"><name pos:start="79:59" pos:end="79:63">avctx</name><operator pos:start="79:64" pos:end="79:65">-&gt;</operator><name pos:start="79:66" pos:end="79:77">coded_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="81:5" pos:end="83:67">else if<condition pos:start="81:12" pos:end="81:42">(<expr pos:start="81:13" pos:end="81:41"><name pos:start="81:13" pos:end="81:24"><name pos:start="81:13" pos:end="81:17">avctx</name><operator pos:start="81:18" pos:end="81:19">-&gt;</operator><name pos:start="81:20" pos:end="81:24">width</name></name> <operator pos:start="81:26" pos:end="81:27">&amp;&amp;</operator> <name pos:start="81:29" pos:end="81:41"><name pos:start="81:29" pos:end="81:33">avctx</name><operator pos:start="81:34" pos:end="81:35">-&gt;</operator><name pos:start="81:36" pos:end="81:41">height</name></name></expr>)</condition><block type="pseudo" pos:start="83:9" pos:end="83:67"><block_content pos:start="83:9" pos:end="83:67">

        <expr_stmt pos:start="83:9" pos:end="83:67"><expr pos:start="83:9" pos:end="83:66"><call pos:start="83:9" pos:end="83:66"><name pos:start="83:9" pos:end="83:30">avcodec_set_dimensions</name><argument_list pos:start="83:31" pos:end="83:66">(<argument pos:start="83:32" pos:end="83:36"><expr pos:start="83:32" pos:end="83:36"><name pos:start="83:32" pos:end="83:36">avctx</name></expr></argument>, <argument pos:start="83:39" pos:end="83:50"><expr pos:start="83:39" pos:end="83:50"><name pos:start="83:39" pos:end="83:50"><name pos:start="83:39" pos:end="83:43">avctx</name><operator pos:start="83:44" pos:end="83:45">-&gt;</operator><name pos:start="83:46" pos:end="83:50">width</name></name></expr></argument>, <argument pos:start="83:53" pos:end="83:65"><expr pos:start="83:53" pos:end="83:65"><name pos:start="83:53" pos:end="83:65"><name pos:start="83:53" pos:end="83:57">avctx</name><operator pos:start="83:58" pos:end="83:59">-&gt;</operator><name pos:start="83:60" pos:end="83:65">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="87:5" pos:end="97:5"><if pos:start="87:5" pos:end="97:5">if <condition pos:start="87:8" pos:end="91:90">(<expr pos:start="87:9" pos:end="91:89"><operator pos:start="87:9" pos:end="87:9">(</operator><name pos:start="87:10" pos:end="87:27"><name pos:start="87:10" pos:end="87:14">avctx</name><operator pos:start="87:15" pos:end="87:16">-&gt;</operator><name pos:start="87:17" pos:end="87:27">coded_width</name></name> <operator pos:start="87:29" pos:end="87:30">||</operator> <name pos:start="87:32" pos:end="87:50"><name pos:start="87:32" pos:end="87:36">avctx</name><operator pos:start="87:37" pos:end="87:38">-&gt;</operator><name pos:start="87:39" pos:end="87:50">coded_height</name></name> <operator pos:start="87:52" pos:end="87:53">||</operator> <name pos:start="87:55" pos:end="87:66"><name pos:start="87:55" pos:end="87:59">avctx</name><operator pos:start="87:60" pos:end="87:61">-&gt;</operator><name pos:start="87:62" pos:end="87:66">width</name></name> <operator pos:start="87:68" pos:end="87:69">||</operator> <name pos:start="87:71" pos:end="87:83"><name pos:start="87:71" pos:end="87:75">avctx</name><operator pos:start="87:76" pos:end="87:77">-&gt;</operator><name pos:start="87:78" pos:end="87:83">height</name></name><operator pos:start="87:84" pos:end="87:84">)</operator>

        <operator pos:start="89:9" pos:end="89:10">&amp;&amp;</operator> <operator pos:start="89:12" pos:end="89:12">(</operator>  <call pos:start="89:15" pos:end="89:84"><name pos:start="89:15" pos:end="89:33">av_image_check_size</name><argument_list pos:start="89:34" pos:end="89:84">(<argument pos:start="89:35" pos:end="89:52"><expr pos:start="89:35" pos:end="89:52"><name pos:start="89:35" pos:end="89:52"><name pos:start="89:35" pos:end="89:39">avctx</name><operator pos:start="89:40" pos:end="89:41">-&gt;</operator><name pos:start="89:42" pos:end="89:52">coded_width</name></name></expr></argument>, <argument pos:start="89:55" pos:end="89:73"><expr pos:start="89:55" pos:end="89:73"><name pos:start="89:55" pos:end="89:73"><name pos:start="89:55" pos:end="89:59">avctx</name><operator pos:start="89:60" pos:end="89:61">-&gt;</operator><name pos:start="89:62" pos:end="89:73">coded_height</name></name></expr></argument>, <argument pos:start="89:76" pos:end="89:76"><expr pos:start="89:76" pos:end="89:76"><literal type="number" pos:start="89:76" pos:end="89:76">0</literal></expr></argument>, <argument pos:start="89:79" pos:end="89:83"><expr pos:start="89:79" pos:end="89:83"><name pos:start="89:79" pos:end="89:83">avctx</name></expr></argument>)</argument_list></call> <operator pos:start="89:86" pos:end="89:86">&lt;</operator> <literal type="number" pos:start="89:88" pos:end="89:88">0</literal>

           <operator pos:start="91:12" pos:end="91:13">||</operator> <call pos:start="91:15" pos:end="91:84"><name pos:start="91:15" pos:end="91:33">av_image_check_size</name><argument_list pos:start="91:34" pos:end="91:84">(<argument pos:start="91:35" pos:end="91:46"><expr pos:start="91:35" pos:end="91:46"><name pos:start="91:35" pos:end="91:46"><name pos:start="91:35" pos:end="91:39">avctx</name><operator pos:start="91:40" pos:end="91:41">-&gt;</operator><name pos:start="91:42" pos:end="91:46">width</name></name></expr></argument>,       <argument pos:start="91:55" pos:end="91:67"><expr pos:start="91:55" pos:end="91:67"><name pos:start="91:55" pos:end="91:67"><name pos:start="91:55" pos:end="91:59">avctx</name><operator pos:start="91:60" pos:end="91:61">-&gt;</operator><name pos:start="91:62" pos:end="91:67">height</name></name></expr></argument>,       <argument pos:start="91:76" pos:end="91:76"><expr pos:start="91:76" pos:end="91:76"><literal type="number" pos:start="91:76" pos:end="91:76">0</literal></expr></argument>, <argument pos:start="91:79" pos:end="91:83"><expr pos:start="91:79" pos:end="91:83"><name pos:start="91:79" pos:end="91:83">avctx</name></expr></argument>)</argument_list></call> <operator pos:start="91:86" pos:end="91:86">&lt;</operator> <literal type="number" pos:start="91:88" pos:end="91:88">0</literal><operator pos:start="91:89" pos:end="91:89">)</operator></expr>)</condition> <block pos:start="91:92" pos:end="97:5">{<block_content pos:start="93:9" pos:end="95:44">

        <expr_stmt pos:start="93:9" pos:end="93:80"><expr pos:start="93:9" pos:end="93:79"><call pos:start="93:9" pos:end="93:79"><name pos:start="93:9" pos:end="93:14">av_log</name><argument_list pos:start="93:15" pos:end="93:79">(<argument pos:start="93:16" pos:end="93:20"><expr pos:start="93:16" pos:end="93:20"><name pos:start="93:16" pos:end="93:20">avctx</name></expr></argument>, <argument pos:start="93:23" pos:end="93:36"><expr pos:start="93:23" pos:end="93:36"><name pos:start="93:23" pos:end="93:36">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="93:39" pos:end="93:78"><expr pos:start="93:39" pos:end="93:78"><literal type="string" pos:start="93:39" pos:end="93:78">"ignoring invalid width/height values\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:44"><expr pos:start="95:9" pos:end="95:43"><call pos:start="95:9" pos:end="95:43"><name pos:start="95:9" pos:end="95:30">avcodec_set_dimensions</name><argument_list pos:start="95:31" pos:end="95:43">(<argument pos:start="95:32" pos:end="95:36"><expr pos:start="95:32" pos:end="95:36"><name pos:start="95:32" pos:end="95:36">avctx</name></expr></argument>, <argument pos:start="95:39" pos:end="95:39"><expr pos:start="95:39" pos:end="95:39"><literal type="number" pos:start="95:39" pos:end="95:39">0</literal></expr></argument>, <argument pos:start="95:42" pos:end="95:42"><expr pos:start="95:42" pos:end="95:42"><literal type="number" pos:start="95:42" pos:end="95:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="101:5" pos:end="103:74">/* if the decoder init function was already called previously,

       free the already allocated subtitle_header before overwriting it */</comment>

    <if_stmt pos:start="105:5" pos:end="112:0"><if pos:start="105:5" pos:end="112:0">if <condition pos:start="105:8" pos:end="105:22">(<expr pos:start="105:9" pos:end="105:21"><name pos:start="105:9" pos:end="105:21"><name pos:start="105:9" pos:end="105:13">codec</name><operator pos:start="105:14" pos:end="105:15">-&gt;</operator><name pos:start="105:16" pos:end="105:21">decode</name></name></expr>)</condition><block type="pseudo" pos:start="107:9" pos:end="112:0"><block_content pos:start="107:9" pos:end="112:0">

        <expr_stmt pos:start="107:9" pos:end="112:0"><expr pos:start="107:9" pos:end="107:41"><call pos:start="107:9" pos:end="107:41"><name pos:start="107:9" pos:end="107:16">av_freep</name><argument_list pos:start="107:17" pos:end="107:41">(<argument pos:start="107:18" pos:end="107:40"><expr pos:start="107:18" pos:end="107:40"><operator pos:start="107:18" pos:end="107:18">&amp;</operator><name pos:start="107:19" pos:end="107:40"><name pos:start="107:19" pos:end="107:23">avctx</name><operator pos:start="107:24" pos:end="107:25">-&gt;</operator><name pos:start="107:26" pos:end="107:40">subtitle_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<cpp:define pos:start="111:1" pos:end="111:29">#<cpp:directive pos:start="111:2" pos:end="111:7">define</cpp:directive> <cpp:macro pos:start="111:9" pos:end="111:24"><name pos:start="111:9" pos:end="111:24">SANE_NB_CHANNELS</name></cpp:macro> <cpp:value pos:start="111:26" pos:end="111:29">128U</cpp:value></cpp:define>

    <if_stmt pos:start="113:5" pos:end="119:5"><if pos:start="113:5" pos:end="119:5">if <condition pos:start="113:8" pos:end="113:43">(<expr pos:start="113:9" pos:end="113:42"><name pos:start="113:9" pos:end="113:23"><name pos:start="113:9" pos:end="113:13">avctx</name><operator pos:start="113:14" pos:end="113:15">-&gt;</operator><name pos:start="113:16" pos:end="113:23">channels</name></name> <operator pos:start="113:25" pos:end="113:25">&gt;</operator> <name pos:start="113:27" pos:end="113:42">SANE_NB_CHANNELS</name></expr>)</condition> <block pos:start="113:45" pos:end="119:5">{<block_content pos:start="115:9" pos:end="117:26">

        <expr_stmt pos:start="115:9" pos:end="115:30"><expr pos:start="115:9" pos:end="115:29"><name pos:start="115:9" pos:end="115:11">ret</name> <operator pos:start="115:13" pos:end="115:13">=</operator> <call pos:start="115:15" pos:end="115:29"><name pos:start="115:15" pos:end="115:21">AVERROR</name><argument_list pos:start="115:22" pos:end="115:29">(<argument pos:start="115:23" pos:end="115:28"><expr pos:start="115:23" pos:end="115:28"><name pos:start="115:23" pos:end="115:28">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="117:9" pos:end="117:26">goto <name pos:start="117:14" pos:end="117:25">free_and_end</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="123:5" pos:end="123:25"><expr pos:start="123:5" pos:end="123:24"><name pos:start="123:5" pos:end="123:16"><name pos:start="123:5" pos:end="123:9">avctx</name><operator pos:start="123:10" pos:end="123:11">-&gt;</operator><name pos:start="123:12" pos:end="123:16">codec</name></name> <operator pos:start="123:18" pos:end="123:18">=</operator> <name pos:start="123:20" pos:end="123:24">codec</name></expr>;</expr_stmt>

    <if_stmt pos:start="125:5" pos:end="133:5"><if pos:start="125:5" pos:end="133:5">if <condition pos:start="125:8" pos:end="127:41">(<expr pos:start="125:9" pos:end="127:40"><operator pos:start="125:9" pos:end="125:9">(</operator><name pos:start="125:10" pos:end="125:26"><name pos:start="125:10" pos:end="125:14">avctx</name><operator pos:start="125:15" pos:end="125:16">-&gt;</operator><name pos:start="125:17" pos:end="125:26">codec_type</name></name> <operator pos:start="125:28" pos:end="125:29">==</operator> <name pos:start="125:31" pos:end="125:50">AVMEDIA_TYPE_UNKNOWN</name> <operator pos:start="125:52" pos:end="125:53">||</operator> <name pos:start="125:55" pos:end="125:71"><name pos:start="125:55" pos:end="125:59">avctx</name><operator pos:start="125:60" pos:end="125:61">-&gt;</operator><name pos:start="125:62" pos:end="125:71">codec_type</name></name> <operator pos:start="125:73" pos:end="125:74">==</operator> <name pos:start="125:76" pos:end="125:86"><name pos:start="125:76" pos:end="125:80">codec</name><operator pos:start="125:81" pos:end="125:82">-&gt;</operator><name pos:start="125:83" pos:end="125:86">type</name></name><operator pos:start="125:87" pos:end="125:87">)</operator> <operator pos:start="125:89" pos:end="125:90">&amp;&amp;</operator>

        <name pos:start="127:9" pos:end="127:23"><name pos:start="127:9" pos:end="127:13">avctx</name><operator pos:start="127:14" pos:end="127:15">-&gt;</operator><name pos:start="127:16" pos:end="127:23">codec_id</name></name> <operator pos:start="127:25" pos:end="127:26">==</operator> <name pos:start="127:28" pos:end="127:40">CODEC_ID_NONE</name></expr>)</condition> <block pos:start="127:43" pos:end="133:5">{<block_content pos:start="129:9" pos:end="131:38">

        <expr_stmt pos:start="129:9" pos:end="129:40"><expr pos:start="129:9" pos:end="129:39"><name pos:start="129:9" pos:end="129:25"><name pos:start="129:9" pos:end="129:13">avctx</name><operator pos:start="129:14" pos:end="129:15">-&gt;</operator><name pos:start="129:16" pos:end="129:25">codec_type</name></name> <operator pos:start="129:27" pos:end="129:27">=</operator> <name pos:start="129:29" pos:end="129:39"><name pos:start="129:29" pos:end="129:33">codec</name><operator pos:start="129:34" pos:end="129:35">-&gt;</operator><name pos:start="129:36" pos:end="129:39">type</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:38"><expr pos:start="131:9" pos:end="131:37"><name pos:start="131:9" pos:end="131:23"><name pos:start="131:9" pos:end="131:13">avctx</name><operator pos:start="131:14" pos:end="131:15">-&gt;</operator><name pos:start="131:16" pos:end="131:23">codec_id</name></name>   <operator pos:start="131:27" pos:end="131:27">=</operator> <name pos:start="131:29" pos:end="131:37"><name pos:start="131:29" pos:end="131:33">codec</name><operator pos:start="131:34" pos:end="131:35">-&gt;</operator><name pos:start="131:36" pos:end="131:37">id</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="135:5" pos:end="145:5"><if pos:start="135:5" pos:end="145:5">if <condition pos:start="135:8" pos:end="137:76">(<expr pos:start="135:9" pos:end="137:75"><name pos:start="135:9" pos:end="135:23"><name pos:start="135:9" pos:end="135:13">avctx</name><operator pos:start="135:14" pos:end="135:15">-&gt;</operator><name pos:start="135:16" pos:end="135:23">codec_id</name></name> <operator pos:start="135:25" pos:end="135:26">!=</operator> <name pos:start="135:28" pos:end="135:36"><name pos:start="135:28" pos:end="135:32">codec</name><operator pos:start="135:33" pos:end="135:34">-&gt;</operator><name pos:start="135:35" pos:end="135:36">id</name></name> <operator pos:start="135:38" pos:end="135:39">||</operator> <operator pos:start="135:41" pos:end="135:41">(</operator><name pos:start="135:42" pos:end="135:58"><name pos:start="135:42" pos:end="135:46">avctx</name><operator pos:start="135:47" pos:end="135:48">-&gt;</operator><name pos:start="135:49" pos:end="135:58">codec_type</name></name> <operator pos:start="135:60" pos:end="135:61">!=</operator> <name pos:start="135:63" pos:end="135:73"><name pos:start="135:63" pos:end="135:67">codec</name><operator pos:start="135:68" pos:end="135:69">-&gt;</operator><name pos:start="135:70" pos:end="135:73">type</name></name>

                           <operator pos:start="137:28" pos:end="137:29">&amp;&amp;</operator> <name pos:start="137:31" pos:end="137:47"><name pos:start="137:31" pos:end="137:35">avctx</name><operator pos:start="137:36" pos:end="137:37">-&gt;</operator><name pos:start="137:38" pos:end="137:47">codec_type</name></name> <operator pos:start="137:49" pos:end="137:50">!=</operator> <name pos:start="137:52" pos:end="137:74">AVMEDIA_TYPE_ATTACHMENT</name><operator pos:start="137:75" pos:end="137:75">)</operator></expr>)</condition> <block pos:start="137:78" pos:end="145:5">{<block_content pos:start="139:9" pos:end="143:26">

        <expr_stmt pos:start="139:9" pos:end="139:69"><expr pos:start="139:9" pos:end="139:68"><call pos:start="139:9" pos:end="139:68"><name pos:start="139:9" pos:end="139:14">av_log</name><argument_list pos:start="139:15" pos:end="139:68">(<argument pos:start="139:16" pos:end="139:20"><expr pos:start="139:16" pos:end="139:20"><name pos:start="139:16" pos:end="139:20">avctx</name></expr></argument>, <argument pos:start="139:23" pos:end="139:34"><expr pos:start="139:23" pos:end="139:34"><name pos:start="139:23" pos:end="139:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="139:37" pos:end="139:67"><expr pos:start="139:37" pos:end="139:67"><literal type="string" pos:start="139:37" pos:end="139:67">"codec type or id mismatches\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="141:9" pos:end="141:30"><expr pos:start="141:9" pos:end="141:29"><name pos:start="141:9" pos:end="141:11">ret</name> <operator pos:start="141:13" pos:end="141:13">=</operator> <call pos:start="141:15" pos:end="141:29"><name pos:start="141:15" pos:end="141:21">AVERROR</name><argument_list pos:start="141:22" pos:end="141:29">(<argument pos:start="141:23" pos:end="141:28"><expr pos:start="141:23" pos:end="141:28"><name pos:start="141:23" pos:end="141:28">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="143:9" pos:end="143:26">goto <name pos:start="143:14" pos:end="143:25">free_and_end</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="147:5" pos:end="147:28"><expr pos:start="147:5" pos:end="147:27"><name pos:start="147:5" pos:end="147:23"><name pos:start="147:5" pos:end="147:9">avctx</name><operator pos:start="147:10" pos:end="147:11">-&gt;</operator><name pos:start="147:12" pos:end="147:23">frame_number</name></name> <operator pos:start="147:25" pos:end="147:25">=</operator> <literal type="number" pos:start="147:27" pos:end="147:27">0</literal></expr>;</expr_stmt>



    <if_stmt pos:start="151:5" pos:end="161:5"><if pos:start="151:5" pos:end="161:5">if <condition pos:start="151:8" pos:end="151:46">(<expr pos:start="151:9" pos:end="151:45"><name pos:start="151:9" pos:end="151:20">HAVE_THREADS</name> <operator pos:start="151:22" pos:end="151:23">&amp;&amp;</operator> <operator pos:start="151:25" pos:end="151:25">!</operator><name pos:start="151:26" pos:end="151:45"><name pos:start="151:26" pos:end="151:30">avctx</name><operator pos:start="151:31" pos:end="151:32">-&gt;</operator><name pos:start="151:33" pos:end="151:45">thread_opaque</name></name></expr>)</condition> <block pos:start="151:48" pos:end="161:5">{<block_content pos:start="153:9" pos:end="159:9">

        <expr_stmt pos:start="153:9" pos:end="153:36"><expr pos:start="153:9" pos:end="153:35"><name pos:start="153:9" pos:end="153:11">ret</name> <operator pos:start="153:13" pos:end="153:13">=</operator> <call pos:start="153:15" pos:end="153:35"><name pos:start="153:15" pos:end="153:28">ff_thread_init</name><argument_list pos:start="153:29" pos:end="153:35">(<argument pos:start="153:30" pos:end="153:34"><expr pos:start="153:30" pos:end="153:34"><name pos:start="153:30" pos:end="153:34">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="155:9" pos:end="159:9"><if pos:start="155:9" pos:end="159:9">if <condition pos:start="155:12" pos:end="155:20">(<expr pos:start="155:13" pos:end="155:19"><name pos:start="155:13" pos:end="155:15">ret</name> <operator pos:start="155:17" pos:end="155:17">&lt;</operator> <literal type="number" pos:start="155:19" pos:end="155:19">0</literal></expr>)</condition> <block pos:start="155:22" pos:end="159:9">{<block_content pos:start="157:13" pos:end="157:30">

            <goto pos:start="157:13" pos:end="157:30">goto <name pos:start="157:18" pos:end="157:29">free_and_end</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="165:5" pos:end="175:5"><if pos:start="165:5" pos:end="175:5">if <condition pos:start="165:8" pos:end="165:49">(<expr pos:start="165:9" pos:end="165:48"><name pos:start="165:9" pos:end="165:32"><name pos:start="165:9" pos:end="165:13">avctx</name><operator pos:start="165:14" pos:end="165:15">-&gt;</operator><name pos:start="165:16" pos:end="165:20">codec</name><operator pos:start="165:21" pos:end="165:22">-&gt;</operator><name pos:start="165:23" pos:end="165:32">max_lowres</name></name> <operator pos:start="165:34" pos:end="165:34">&lt;</operator> <name pos:start="165:36" pos:end="165:48"><name pos:start="165:36" pos:end="165:40">avctx</name><operator pos:start="165:41" pos:end="165:42">-&gt;</operator><name pos:start="165:43" pos:end="165:48">lowres</name></name></expr>)</condition> <block pos:start="165:51" pos:end="175:5">{<block_content pos:start="167:9" pos:end="173:26">

        <expr_stmt pos:start="167:9" pos:end="169:41"><expr pos:start="167:9" pos:end="169:40"><call pos:start="167:9" pos:end="169:40"><name pos:start="167:9" pos:end="167:14">av_log</name><argument_list pos:start="167:15" pos:end="169:40">(<argument pos:start="167:16" pos:end="167:20"><expr pos:start="167:16" pos:end="167:20"><name pos:start="167:16" pos:end="167:20">avctx</name></expr></argument>, <argument pos:start="167:23" pos:end="167:34"><expr pos:start="167:23" pos:end="167:34"><name pos:start="167:23" pos:end="167:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="167:37" pos:end="167:99"><expr pos:start="167:37" pos:end="167:99"><literal type="string" pos:start="167:37" pos:end="167:99">"The maximum value for lowres supported by the decoder is %d\n"</literal></expr></argument>,

               <argument pos:start="169:16" pos:end="169:39"><expr pos:start="169:16" pos:end="169:39"><name pos:start="169:16" pos:end="169:39"><name pos:start="169:16" pos:end="169:20">avctx</name><operator pos:start="169:21" pos:end="169:22">-&gt;</operator><name pos:start="169:23" pos:end="169:27">codec</name><operator pos:start="169:28" pos:end="169:29">-&gt;</operator><name pos:start="169:30" pos:end="169:39">max_lowres</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:30"><expr pos:start="171:9" pos:end="171:29"><name pos:start="171:9" pos:end="171:11">ret</name> <operator pos:start="171:13" pos:end="171:13">=</operator> <call pos:start="171:15" pos:end="171:29"><name pos:start="171:15" pos:end="171:21">AVERROR</name><argument_list pos:start="171:22" pos:end="171:29">(<argument pos:start="171:23" pos:end="171:28"><expr pos:start="171:23" pos:end="171:28"><name pos:start="171:23" pos:end="171:28">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="173:9" pos:end="173:26">goto <name pos:start="173:14" pos:end="173:25">free_and_end</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="177:5" pos:end="197:5"><if pos:start="177:5" pos:end="197:5">if <condition pos:start="177:8" pos:end="177:58">(<expr pos:start="177:9" pos:end="177:57"><name pos:start="177:9" pos:end="177:33"><name pos:start="177:9" pos:end="177:13">avctx</name><operator pos:start="177:14" pos:end="177:15">-&gt;</operator><name pos:start="177:16" pos:end="177:20">codec</name><operator pos:start="177:21" pos:end="177:22">-&gt;</operator><name pos:start="177:23" pos:end="177:33">sample_fmts</name></name> <operator pos:start="177:35" pos:end="177:36">&amp;&amp;</operator> <name pos:start="177:38" pos:end="177:57"><name pos:start="177:38" pos:end="177:42">avctx</name><operator pos:start="177:43" pos:end="177:44">-&gt;</operator><name pos:start="177:45" pos:end="177:49">codec</name><operator pos:start="177:50" pos:end="177:51">-&gt;</operator><name pos:start="177:52" pos:end="177:57">encode</name></name></expr>)</condition> <block pos:start="177:60" pos:end="197:5">{<block_content pos:start="179:9" pos:end="195:9">

        <decl_stmt pos:start="179:9" pos:end="179:14"><decl pos:start="179:9" pos:end="179:13"><type pos:start="179:9" pos:end="179:11"><name pos:start="179:9" pos:end="179:11">int</name></type> <name pos:start="179:13" pos:end="179:13">i</name></decl>;</decl_stmt>

        <for pos:start="181:9" pos:end="185:22">for <control pos:start="181:13" pos:end="181:76">(<init pos:start="181:14" pos:end="181:19"><expr pos:start="181:14" pos:end="181:18"><name pos:start="181:14" pos:end="181:14">i</name> <operator pos:start="181:16" pos:end="181:16">=</operator> <literal type="number" pos:start="181:18" pos:end="181:18">0</literal></expr>;</init> <condition pos:start="181:21" pos:end="181:71"><expr pos:start="181:21" pos:end="181:70"><name pos:start="181:21" pos:end="181:48"><name pos:start="181:21" pos:end="181:25">avctx</name><operator pos:start="181:26" pos:end="181:27">-&gt;</operator><name pos:start="181:28" pos:end="181:32">codec</name><operator pos:start="181:33" pos:end="181:34">-&gt;</operator><name pos:start="181:35" pos:end="181:45">sample_fmts</name><index pos:start="181:46" pos:end="181:48">[<expr pos:start="181:47" pos:end="181:47"><name pos:start="181:47" pos:end="181:47">i</name></expr>]</index></name> <operator pos:start="181:50" pos:end="181:51">!=</operator> <name pos:start="181:53" pos:end="181:70">AV_SAMPLE_FMT_NONE</name></expr>;</condition> <incr pos:start="181:73" pos:end="181:75"><expr pos:start="181:73" pos:end="181:75"><name pos:start="181:73" pos:end="181:73">i</name><operator pos:start="181:74" pos:end="181:75">++</operator></expr></incr>)</control><block type="pseudo" pos:start="183:13" pos:end="185:22"><block_content pos:start="183:13" pos:end="185:22">

            <if_stmt pos:start="183:13" pos:end="185:22"><if pos:start="183:13" pos:end="185:22">if <condition pos:start="183:16" pos:end="183:66">(<expr pos:start="183:17" pos:end="183:65"><name pos:start="183:17" pos:end="183:33"><name pos:start="183:17" pos:end="183:21">avctx</name><operator pos:start="183:22" pos:end="183:23">-&gt;</operator><name pos:start="183:24" pos:end="183:33">sample_fmt</name></name> <operator pos:start="183:35" pos:end="183:36">==</operator> <name pos:start="183:38" pos:end="183:65"><name pos:start="183:38" pos:end="183:42">avctx</name><operator pos:start="183:43" pos:end="183:44">-&gt;</operator><name pos:start="183:45" pos:end="183:49">codec</name><operator pos:start="183:50" pos:end="183:51">-&gt;</operator><name pos:start="183:52" pos:end="183:62">sample_fmts</name><index pos:start="183:63" pos:end="183:65">[<expr pos:start="183:64" pos:end="183:64"><name pos:start="183:64" pos:end="183:64">i</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="185:17" pos:end="185:22"><block_content pos:start="185:17" pos:end="185:22">

                <break pos:start="185:17" pos:end="185:22">break;</break></block_content></block></if></if_stmt></block_content></block></for>

        <if_stmt pos:start="187:9" pos:end="195:9"><if pos:start="187:9" pos:end="195:9">if <condition pos:start="187:12" pos:end="187:63">(<expr pos:start="187:13" pos:end="187:62"><name pos:start="187:13" pos:end="187:40"><name pos:start="187:13" pos:end="187:17">avctx</name><operator pos:start="187:18" pos:end="187:19">-&gt;</operator><name pos:start="187:20" pos:end="187:24">codec</name><operator pos:start="187:25" pos:end="187:26">-&gt;</operator><name pos:start="187:27" pos:end="187:37">sample_fmts</name><index pos:start="187:38" pos:end="187:40">[<expr pos:start="187:39" pos:end="187:39"><name pos:start="187:39" pos:end="187:39">i</name></expr>]</index></name> <operator pos:start="187:42" pos:end="187:43">==</operator> <name pos:start="187:45" pos:end="187:62">AV_SAMPLE_FMT_NONE</name></expr>)</condition> <block pos:start="187:65" pos:end="195:9">{<block_content pos:start="189:13" pos:end="193:30">

            <expr_stmt pos:start="189:13" pos:end="189:84"><expr pos:start="189:13" pos:end="189:83"><call pos:start="189:13" pos:end="189:83"><name pos:start="189:13" pos:end="189:18">av_log</name><argument_list pos:start="189:19" pos:end="189:83">(<argument pos:start="189:20" pos:end="189:24"><expr pos:start="189:20" pos:end="189:24"><name pos:start="189:20" pos:end="189:24">avctx</name></expr></argument>, <argument pos:start="189:27" pos:end="189:38"><expr pos:start="189:27" pos:end="189:38"><name pos:start="189:27" pos:end="189:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="189:41" pos:end="189:82"><expr pos:start="189:41" pos:end="189:82"><literal type="string" pos:start="189:41" pos:end="189:82">"Specified sample_fmt is not supported.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="191:13" pos:end="191:34"><expr pos:start="191:13" pos:end="191:33"><name pos:start="191:13" pos:end="191:15">ret</name> <operator pos:start="191:17" pos:end="191:17">=</operator> <call pos:start="191:19" pos:end="191:33"><name pos:start="191:19" pos:end="191:25">AVERROR</name><argument_list pos:start="191:26" pos:end="191:33">(<argument pos:start="191:27" pos:end="191:32"><expr pos:start="191:27" pos:end="191:32"><name pos:start="191:27" pos:end="191:32">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="193:13" pos:end="193:30">goto <name pos:start="193:18" pos:end="193:29">free_and_end</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="201:5" pos:end="211:5"><if pos:start="201:5" pos:end="211:5">if<condition pos:start="201:7" pos:end="201:74">(<expr pos:start="201:8" pos:end="201:73"><name pos:start="201:8" pos:end="201:25"><name pos:start="201:8" pos:end="201:12">avctx</name><operator pos:start="201:13" pos:end="201:14">-&gt;</operator><name pos:start="201:15" pos:end="201:19">codec</name><operator pos:start="201:20" pos:end="201:21">-&gt;</operator><name pos:start="201:22" pos:end="201:25">init</name></name> <operator pos:start="201:27" pos:end="201:28">&amp;&amp;</operator> <operator pos:start="201:30" pos:end="201:30">!</operator><operator pos:start="201:31" pos:end="201:31">(</operator><name pos:start="201:32" pos:end="201:56"><name pos:start="201:32" pos:end="201:36">avctx</name><operator pos:start="201:37" pos:end="201:38">-&gt;</operator><name pos:start="201:39" pos:end="201:56">active_thread_type</name></name><operator pos:start="201:57" pos:end="201:57">&amp;</operator><name pos:start="201:58" pos:end="201:72">FF_THREAD_FRAME</name><operator pos:start="201:73" pos:end="201:73">)</operator></expr>)</condition><block pos:start="201:75" pos:end="211:5">{<block_content pos:start="203:9" pos:end="209:9">

        <expr_stmt pos:start="203:9" pos:end="203:40"><expr pos:start="203:9" pos:end="203:39"><name pos:start="203:9" pos:end="203:11">ret</name> <operator pos:start="203:13" pos:end="203:13">=</operator> <call pos:start="203:15" pos:end="203:39"><name pos:start="203:15" pos:end="203:32"><name pos:start="203:15" pos:end="203:19">avctx</name><operator pos:start="203:20" pos:end="203:21">-&gt;</operator><name pos:start="203:22" pos:end="203:26">codec</name><operator pos:start="203:27" pos:end="203:28">-&gt;</operator><name pos:start="203:29" pos:end="203:32">init</name></name><argument_list pos:start="203:33" pos:end="203:39">(<argument pos:start="203:34" pos:end="203:38"><expr pos:start="203:34" pos:end="203:38"><name pos:start="203:34" pos:end="203:38">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="205:9" pos:end="209:9"><if pos:start="205:9" pos:end="209:9">if <condition pos:start="205:12" pos:end="205:20">(<expr pos:start="205:13" pos:end="205:19"><name pos:start="205:13" pos:end="205:15">ret</name> <operator pos:start="205:17" pos:end="205:17">&lt;</operator> <literal type="number" pos:start="205:19" pos:end="205:19">0</literal></expr>)</condition> <block pos:start="205:22" pos:end="209:9">{<block_content pos:start="207:13" pos:end="207:30">

            <goto pos:start="207:13" pos:end="207:30">goto <name pos:start="207:18" pos:end="207:29">free_and_end</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

<label pos:start="213:1" pos:end="213:4"><name pos:start="213:1" pos:end="213:3">end</name>:</label>

    <expr_stmt pos:start="215:5" pos:end="215:31"><expr pos:start="215:5" pos:end="215:30"><name pos:start="215:5" pos:end="215:28">entangled_thread_counter</name><operator pos:start="215:29" pos:end="215:30">--</operator></expr>;</expr_stmt>



    <comment type="block" pos:start="219:5" pos:end="219:42">/* Release any user-supplied mutex. */</comment>

    <if_stmt pos:start="221:5" pos:end="225:5"><if pos:start="221:5" pos:end="225:5">if <condition pos:start="221:8" pos:end="221:22">(<expr pos:start="221:9" pos:end="221:21"><name pos:start="221:9" pos:end="221:21">ff_lockmgr_cb</name></expr>)</condition> <block pos:start="221:24" pos:end="225:5">{<block_content pos:start="223:9" pos:end="223:56">

        <expr_stmt pos:start="223:9" pos:end="223:56"><expr pos:start="223:9" pos:end="223:55"><call pos:start="223:9" pos:end="223:55">(<modifier pos:start="223:10" pos:end="223:10">*</modifier><name pos:start="223:11" pos:end="223:23">ff_lockmgr_cb</name>)<argument_list pos:start="223:25" pos:end="223:55">(<argument pos:start="223:26" pos:end="223:37"><expr pos:start="223:26" pos:end="223:37"><operator pos:start="223:26" pos:end="223:26">&amp;</operator><name pos:start="223:27" pos:end="223:37">codec_mutex</name></expr></argument>, <argument pos:start="223:40" pos:end="223:54"><expr pos:start="223:40" pos:end="223:54"><name pos:start="223:40" pos:end="223:54">AV_LOCK_RELEASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="227:5" pos:end="227:15">return <expr pos:start="227:12" pos:end="227:14"><name pos:start="227:12" pos:end="227:14">ret</name></expr>;</return>

<label pos:start="229:1" pos:end="229:13"><name pos:start="229:1" pos:end="229:12">free_and_end</name>:</label>

    <expr_stmt pos:start="231:5" pos:end="231:32"><expr pos:start="231:5" pos:end="231:31"><call pos:start="231:5" pos:end="231:31"><name pos:start="231:5" pos:end="231:12">av_freep</name><argument_list pos:start="231:13" pos:end="231:31">(<argument pos:start="231:14" pos:end="231:30"><expr pos:start="231:14" pos:end="231:30"><operator pos:start="231:14" pos:end="231:14">&amp;</operator><name pos:start="231:15" pos:end="231:30"><name pos:start="231:15" pos:end="231:19">avctx</name><operator pos:start="231:20" pos:end="231:21">-&gt;</operator><name pos:start="231:22" pos:end="231:30">priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="233:5" pos:end="233:23"><expr pos:start="233:5" pos:end="233:22"><name pos:start="233:5" pos:end="233:16"><name pos:start="233:5" pos:end="233:9">avctx</name><operator pos:start="233:10" pos:end="233:11">-&gt;</operator><name pos:start="233:12" pos:end="233:16">codec</name></name><operator pos:start="233:17" pos:end="233:17">=</operator> <name pos:start="233:19" pos:end="233:22">NULL</name></expr>;</expr_stmt>

    <goto pos:start="235:5" pos:end="235:13">goto <name pos:start="235:10" pos:end="235:12">end</name>;</goto>

</block_content>}</block></function>
</unit>
