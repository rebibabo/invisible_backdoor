<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1768.c" pos:tabs="8"><function pos:start="1:1" pos:end="93:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">sap_fetch_packet</name><parameter_list pos:start="1:28" pos:end="1:62">(<parameter pos:start="1:29" pos:end="1:46"><decl pos:start="1:29" pos:end="1:46"><type pos:start="1:29" pos:end="1:46"><name pos:start="1:29" pos:end="1:43">AVFormatContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:46">s</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:61"><decl pos:start="1:49" pos:end="1:61"><type pos:start="1:49" pos:end="1:61"><name pos:start="1:49" pos:end="1:56">AVPacket</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:61">pkt</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="93:1">{<block_content pos:start="5:5" pos:end="91:15">

    <decl_stmt pos:start="5:5" pos:end="5:40"><decl pos:start="5:5" pos:end="5:39"><type pos:start="5:5" pos:end="5:21"><name pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:19">SAPState</name></name> <modifier pos:start="5:21" pos:end="5:21">*</modifier></type><name pos:start="5:22" pos:end="5:24">sap</name> <init pos:start="5:26" pos:end="5:39">= <expr pos:start="5:28" pos:end="5:39"><name pos:start="5:28" pos:end="5:39"><name pos:start="5:28" pos:end="5:28">s</name><operator pos:start="5:29" pos:end="5:30">-&gt;</operator><name pos:start="5:31" pos:end="5:39">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:46"><decl pos:start="7:5" pos:end="7:45"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:10">fd</name> <init pos:start="7:12" pos:end="7:45">= <expr pos:start="7:14" pos:end="7:45"><call pos:start="7:14" pos:end="7:45"><name pos:start="7:14" pos:end="7:32">url_get_file_handle</name><argument_list pos:start="7:33" pos:end="7:45">(<argument pos:start="7:34" pos:end="7:44"><expr pos:start="7:34" pos:end="7:44"><name pos:start="7:34" pos:end="7:44"><name pos:start="7:34" pos:end="7:36">sap</name><operator pos:start="7:37" pos:end="7:38">-&gt;</operator><name pos:start="7:39" pos:end="7:44">ann_fd</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:15"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">n</name></decl>, <decl pos:start="9:12" pos:end="9:14"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:14">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:10">fd_set</name></type> <name pos:start="11:12" pos:end="11:15">rfds</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:10">struct</name> <name pos:start="13:12" pos:end="13:18">timeval</name></name></type> <name pos:start="13:20" pos:end="13:21">tv</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:26"><decl pos:start="15:5" pos:end="15:25"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">uint8_t</name></type> <name pos:start="15:13" pos:end="15:25"><name pos:start="15:13" pos:end="15:19">recvbuf</name><index pos:start="15:20" pos:end="15:25">[<expr pos:start="15:21" pos:end="15:24"><literal type="number" pos:start="15:21" pos:end="15:24">1500</literal></expr>]</index></name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="21:27"><if pos:start="19:5" pos:end="21:27">if <condition pos:start="19:8" pos:end="19:17">(<expr pos:start="19:9" pos:end="19:16"><name pos:start="19:9" pos:end="19:16"><name pos:start="19:9" pos:end="19:11">sap</name><operator pos:start="19:12" pos:end="19:13">-&gt;</operator><name pos:start="19:14" pos:end="19:16">eof</name></name></expr>)</condition><block type="pseudo" pos:start="21:9" pos:end="21:27"><block_content pos:start="21:9" pos:end="21:27">

        <return pos:start="21:9" pos:end="21:27">return <expr pos:start="21:16" pos:end="21:26"><name pos:start="21:16" pos:end="21:26">AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>



    <while pos:start="25:5" pos:end="59:5">while <condition pos:start="25:11" pos:end="25:13">(<expr pos:start="25:12" pos:end="25:12"><literal type="number" pos:start="25:12" pos:end="25:12">1</literal></expr>)</condition> <block pos:start="25:15" pos:end="59:5">{<block_content pos:start="27:9" pos:end="57:9">

        <expr_stmt pos:start="27:9" pos:end="27:23"><expr pos:start="27:9" pos:end="27:22"><call pos:start="27:9" pos:end="27:22"><name pos:start="27:9" pos:end="27:15">FD_ZERO</name><argument_list pos:start="27:16" pos:end="27:22">(<argument pos:start="27:17" pos:end="27:21"><expr pos:start="27:17" pos:end="27:21"><operator pos:start="27:17" pos:end="27:17">&amp;</operator><name pos:start="27:18" pos:end="27:21">rfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:26"><expr pos:start="29:9" pos:end="29:25"><call pos:start="29:9" pos:end="29:25"><name pos:start="29:9" pos:end="29:14">FD_SET</name><argument_list pos:start="29:15" pos:end="29:25">(<argument pos:start="29:16" pos:end="29:17"><expr pos:start="29:16" pos:end="29:17"><name pos:start="29:16" pos:end="29:17">fd</name></expr></argument>, <argument pos:start="29:20" pos:end="29:24"><expr pos:start="29:20" pos:end="29:24"><operator pos:start="29:20" pos:end="29:20">&amp;</operator><name pos:start="29:21" pos:end="29:24">rfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:35"><expr pos:start="31:9" pos:end="31:34"><name pos:start="31:9" pos:end="31:17"><name pos:start="31:9" pos:end="31:10">tv</name><operator pos:start="31:11" pos:end="31:11">.</operator><name pos:start="31:12" pos:end="31:17">tv_sec</name></name> <operator pos:start="31:19" pos:end="31:19">=</operator> <name pos:start="31:21" pos:end="31:30"><name pos:start="31:21" pos:end="31:22">tv</name><operator pos:start="31:23" pos:end="31:23">.</operator><name pos:start="31:24" pos:end="31:30">tv_usec</name></name> <operator pos:start="31:32" pos:end="31:32">=</operator> <literal type="number" pos:start="31:34" pos:end="31:34">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:51"><expr pos:start="33:9" pos:end="33:50"><name pos:start="33:9" pos:end="33:9">n</name> <operator pos:start="33:11" pos:end="33:11">=</operator> <call pos:start="33:13" pos:end="33:50"><name pos:start="33:13" pos:end="33:18">select</name><argument_list pos:start="33:19" pos:end="33:50">(<argument pos:start="33:20" pos:end="33:25"><expr pos:start="33:20" pos:end="33:25"><name pos:start="33:20" pos:end="33:21">fd</name> <operator pos:start="33:23" pos:end="33:23">+</operator> <literal type="number" pos:start="33:25" pos:end="33:25">1</literal></expr></argument>, <argument pos:start="33:28" pos:end="33:32"><expr pos:start="33:28" pos:end="33:32"><operator pos:start="33:28" pos:end="33:28">&amp;</operator><name pos:start="33:29" pos:end="33:32">rfds</name></expr></argument>, <argument pos:start="33:35" pos:end="33:38"><expr pos:start="33:35" pos:end="33:38"><name pos:start="33:35" pos:end="33:38">NULL</name></expr></argument>, <argument pos:start="33:41" pos:end="33:44"><expr pos:start="33:41" pos:end="33:44"><name pos:start="33:41" pos:end="33:44">NULL</name></expr></argument>, <argument pos:start="33:47" pos:end="33:49"><expr pos:start="33:47" pos:end="33:49"><operator pos:start="33:47" pos:end="33:47">&amp;</operator><name pos:start="33:48" pos:end="33:49">tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="35:9" pos:end="37:18"><if pos:start="35:9" pos:end="37:18">if <condition pos:start="35:12" pos:end="35:43">(<expr pos:start="35:13" pos:end="35:42"><name pos:start="35:13" pos:end="35:13">n</name> <operator pos:start="35:15" pos:end="35:16">&lt;=</operator> <literal type="number" pos:start="35:18" pos:end="35:18">0</literal> <operator pos:start="35:20" pos:end="35:21">||</operator> <operator pos:start="35:23" pos:end="35:23">!</operator><call pos:start="35:24" pos:end="35:42"><name pos:start="35:24" pos:end="35:31">FD_ISSET</name><argument_list pos:start="35:32" pos:end="35:42">(<argument pos:start="35:33" pos:end="35:34"><expr pos:start="35:33" pos:end="35:34"><name pos:start="35:33" pos:end="35:34">fd</name></expr></argument>, <argument pos:start="35:37" pos:end="35:41"><expr pos:start="35:37" pos:end="35:41"><operator pos:start="35:37" pos:end="35:37">&amp;</operator><name pos:start="35:38" pos:end="35:41">rfds</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="37:13" pos:end="37:18"><block_content pos:start="37:13" pos:end="37:18">

            <break pos:start="37:13" pos:end="37:18">break;</break></block_content></block></if></if_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:62"><expr pos:start="39:9" pos:end="39:61"><name pos:start="39:9" pos:end="39:11">ret</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <call pos:start="39:15" pos:end="39:61"><name pos:start="39:15" pos:end="39:22">url_read</name><argument_list pos:start="39:23" pos:end="39:61">(<argument pos:start="39:24" pos:end="39:34"><expr pos:start="39:24" pos:end="39:34"><name pos:start="39:24" pos:end="39:34"><name pos:start="39:24" pos:end="39:26">sap</name><operator pos:start="39:27" pos:end="39:28">-&gt;</operator><name pos:start="39:29" pos:end="39:34">ann_fd</name></name></expr></argument>, <argument pos:start="39:37" pos:end="39:43"><expr pos:start="39:37" pos:end="39:43"><name pos:start="39:37" pos:end="39:43">recvbuf</name></expr></argument>, <argument pos:start="39:46" pos:end="39:60"><expr pos:start="39:46" pos:end="39:60"><sizeof pos:start="39:46" pos:end="39:60">sizeof<argument_list pos:start="39:52" pos:end="39:60">(<argument pos:start="39:53" pos:end="39:59"><expr pos:start="39:53" pos:end="39:59"><name pos:start="39:53" pos:end="39:59">recvbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="41:9" pos:end="57:9"><if pos:start="41:9" pos:end="57:9">if <condition pos:start="41:12" pos:end="41:21">(<expr pos:start="41:13" pos:end="41:20"><name pos:start="41:13" pos:end="41:15">ret</name> <operator pos:start="41:17" pos:end="41:18">&gt;=</operator> <literal type="number" pos:start="41:20" pos:end="41:20">8</literal></expr>)</condition> <block pos:start="41:23" pos:end="57:9">{<block_content pos:start="43:13" pos:end="55:13">

            <decl_stmt pos:start="43:13" pos:end="43:49"><decl pos:start="43:13" pos:end="43:48"><type pos:start="43:13" pos:end="43:20"><name pos:start="43:13" pos:end="43:20">uint16_t</name></type> <name pos:start="43:22" pos:end="43:25">hash</name> <init pos:start="43:27" pos:end="43:48">= <expr pos:start="43:29" pos:end="43:48"><call pos:start="43:29" pos:end="43:48"><name pos:start="43:29" pos:end="43:35">AV_RB16</name><argument_list pos:start="43:36" pos:end="43:48">(<argument pos:start="43:37" pos:end="43:47"><expr pos:start="43:37" pos:end="43:47"><operator pos:start="43:37" pos:end="43:37">&amp;</operator><name pos:start="43:38" pos:end="43:47"><name pos:start="43:38" pos:end="43:44">recvbuf</name><index pos:start="43:45" pos:end="43:47">[<expr pos:start="43:46" pos:end="43:46"><literal type="number" pos:start="43:46" pos:end="43:46">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="block" pos:start="45:13" pos:end="45:65">/* Should ideally check the source IP address, too */</comment>

            <if_stmt pos:start="47:13" pos:end="55:13"><if pos:start="47:13" pos:end="55:13">if <condition pos:start="47:16" pos:end="47:55">(<expr pos:start="47:17" pos:end="47:54"><name pos:start="47:17" pos:end="47:26"><name pos:start="47:17" pos:end="47:23">recvbuf</name><index pos:start="47:24" pos:end="47:26">[<expr pos:start="47:25" pos:end="47:25"><literal type="number" pos:start="47:25" pos:end="47:25">0</literal></expr>]</index></name> <operator pos:start="47:28" pos:end="47:28">&amp;</operator> <literal type="number" pos:start="47:30" pos:end="47:33">0x04</literal> <operator pos:start="47:35" pos:end="47:36">&amp;&amp;</operator> <name pos:start="47:38" pos:end="47:41">hash</name> <operator pos:start="47:43" pos:end="47:44">==</operator> <name pos:start="47:46" pos:end="47:54"><name pos:start="47:46" pos:end="47:48">sap</name><operator pos:start="47:49" pos:end="47:50">-&gt;</operator><name pos:start="47:51" pos:end="47:54">hash</name></name></expr>)</condition> <block pos:start="47:57" pos:end="55:13">{<block_content pos:start="51:17" pos:end="53:35">

                <comment type="block" pos:start="49:17" pos:end="49:37">/* Stream deletion */</comment>

                <expr_stmt pos:start="51:17" pos:end="51:29"><expr pos:start="51:17" pos:end="51:28"><name pos:start="51:17" pos:end="51:24"><name pos:start="51:17" pos:end="51:19">sap</name><operator pos:start="51:20" pos:end="51:21">-&gt;</operator><name pos:start="51:22" pos:end="51:24">eof</name></name> <operator pos:start="51:26" pos:end="51:26">=</operator> <literal type="number" pos:start="51:28" pos:end="51:28">1</literal></expr>;</expr_stmt>

                <return pos:start="53:17" pos:end="53:35">return <expr pos:start="53:24" pos:end="53:34"><name pos:start="53:24" pos:end="53:34">AVERROR_EOF</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="61:5" pos:end="61:43"><expr pos:start="61:5" pos:end="61:42"><name pos:start="61:5" pos:end="61:7">ret</name> <operator pos:start="61:9" pos:end="61:9">=</operator> <call pos:start="61:11" pos:end="61:42"><name pos:start="61:11" pos:end="61:23">av_read_frame</name><argument_list pos:start="61:24" pos:end="61:42">(<argument pos:start="61:25" pos:end="61:36"><expr pos:start="61:25" pos:end="61:36"><name pos:start="61:25" pos:end="61:36"><name pos:start="61:25" pos:end="61:27">sap</name><operator pos:start="61:28" pos:end="61:29">-&gt;</operator><name pos:start="61:30" pos:end="61:36">sdp_ctx</name></name></expr></argument>, <argument pos:start="61:39" pos:end="61:41"><expr pos:start="61:39" pos:end="61:41"><name pos:start="61:39" pos:end="61:41">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="63:5" pos:end="65:19"><if pos:start="63:5" pos:end="65:19">if <condition pos:start="63:8" pos:end="63:16">(<expr pos:start="63:9" pos:end="63:15"><name pos:start="63:9" pos:end="63:11">ret</name> <operator pos:start="63:13" pos:end="63:13">&lt;</operator> <literal type="number" pos:start="63:15" pos:end="63:15">0</literal></expr>)</condition><block type="pseudo" pos:start="65:9" pos:end="65:19"><block_content pos:start="65:9" pos:end="65:19">

        <return pos:start="65:9" pos:end="65:19">return <expr pos:start="65:16" pos:end="65:18"><name pos:start="65:16" pos:end="65:18">ret</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="67:5" pos:end="89:5"><if pos:start="67:5" pos:end="89:5">if <condition pos:start="67:8" pos:end="67:41">(<expr pos:start="67:9" pos:end="67:40"><name pos:start="67:9" pos:end="67:20"><name pos:start="67:9" pos:end="67:9">s</name><operator pos:start="67:10" pos:end="67:11">-&gt;</operator><name pos:start="67:12" pos:end="67:20">ctx_flags</name></name> <operator pos:start="67:22" pos:end="67:22">&amp;</operator> <name pos:start="67:24" pos:end="67:40">AVFMTCTX_NOHEADER</name></expr>)</condition> <block pos:start="67:43" pos:end="89:5">{<block_content pos:start="69:9" pos:end="87:9">

        <while pos:start="69:9" pos:end="87:9">while <condition pos:start="69:15" pos:end="69:56">(<expr pos:start="69:16" pos:end="69:55"><name pos:start="69:16" pos:end="69:39"><name pos:start="69:16" pos:end="69:18">sap</name><operator pos:start="69:19" pos:end="69:20">-&gt;</operator><name pos:start="69:21" pos:end="69:27">sdp_ctx</name><operator pos:start="69:28" pos:end="69:29">-&gt;</operator><name pos:start="69:30" pos:end="69:39">nb_streams</name></name> <operator pos:start="69:41" pos:end="69:41">&gt;</operator> <name pos:start="69:43" pos:end="69:55"><name pos:start="69:43" pos:end="69:43">s</name><operator pos:start="69:44" pos:end="69:45">-&gt;</operator><name pos:start="69:46" pos:end="69:55">nb_streams</name></name></expr>)</condition> <block pos:start="69:58" pos:end="87:9">{<block_content pos:start="71:13" pos:end="85:64">

            <decl_stmt pos:start="71:13" pos:end="71:34"><decl pos:start="71:13" pos:end="71:33"><type pos:start="71:13" pos:end="71:15"><name pos:start="71:13" pos:end="71:15">int</name></type> <name pos:start="71:17" pos:end="71:17">i</name> <init pos:start="71:19" pos:end="71:33">= <expr pos:start="71:21" pos:end="71:33"><name pos:start="71:21" pos:end="71:33"><name pos:start="71:21" pos:end="71:21">s</name><operator pos:start="71:22" pos:end="71:23">-&gt;</operator><name pos:start="71:24" pos:end="71:33">nb_streams</name></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="73:13" pos:end="73:47"><decl pos:start="73:13" pos:end="73:46"><type pos:start="73:13" pos:end="73:22"><name pos:start="73:13" pos:end="73:20">AVStream</name> <modifier pos:start="73:22" pos:end="73:22">*</modifier></type><name pos:start="73:23" pos:end="73:24">st</name> <init pos:start="73:26" pos:end="73:46">= <expr pos:start="73:28" pos:end="73:46"><call pos:start="73:28" pos:end="73:46"><name pos:start="73:28" pos:end="73:40">av_new_stream</name><argument_list pos:start="73:41" pos:end="73:46">(<argument pos:start="73:42" pos:end="73:42"><expr pos:start="73:42" pos:end="73:42"><name pos:start="73:42" pos:end="73:42">s</name></expr></argument>, <argument pos:start="73:45" pos:end="73:45"><expr pos:start="73:45" pos:end="73:45"><name pos:start="73:45" pos:end="73:45">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="75:13" pos:end="81:13"><if pos:start="75:13" pos:end="81:13">if <condition pos:start="75:16" pos:end="75:20">(<expr pos:start="75:17" pos:end="75:19"><operator pos:start="75:17" pos:end="75:17">!</operator><name pos:start="75:18" pos:end="75:19">st</name></expr>)</condition> <block pos:start="75:22" pos:end="81:13">{<block_content pos:start="77:17" pos:end="79:39">

                <expr_stmt pos:start="77:17" pos:end="77:36"><expr pos:start="77:17" pos:end="77:35"><call pos:start="77:17" pos:end="77:35"><name pos:start="77:17" pos:end="77:30">av_free_packet</name><argument_list pos:start="77:31" pos:end="77:35">(<argument pos:start="77:32" pos:end="77:34"><expr pos:start="77:32" pos:end="77:34"><name pos:start="77:32" pos:end="77:34">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="79:17" pos:end="79:39">return <expr pos:start="79:24" pos:end="79:38"><call pos:start="79:24" pos:end="79:38"><name pos:start="79:24" pos:end="79:30">AVERROR</name><argument_list pos:start="79:31" pos:end="79:38">(<argument pos:start="79:32" pos:end="79:37"><expr pos:start="79:32" pos:end="79:37"><name pos:start="79:32" pos:end="79:37">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:77"><expr pos:start="83:13" pos:end="83:76"><call pos:start="83:13" pos:end="83:76"><name pos:start="83:13" pos:end="83:32">avcodec_copy_context</name><argument_list pos:start="83:33" pos:end="83:76">(<argument pos:start="83:34" pos:end="83:42"><expr pos:start="83:34" pos:end="83:42"><name pos:start="83:34" pos:end="83:42"><name pos:start="83:34" pos:end="83:35">st</name><operator pos:start="83:36" pos:end="83:37">-&gt;</operator><name pos:start="83:38" pos:end="83:42">codec</name></name></expr></argument>, <argument pos:start="83:45" pos:end="83:75"><expr pos:start="83:45" pos:end="83:75"><name pos:start="83:45" pos:end="83:68"><name pos:start="83:45" pos:end="83:47">sap</name><operator pos:start="83:48" pos:end="83:49">-&gt;</operator><name pos:start="83:50" pos:end="83:56">sdp_ctx</name><operator pos:start="83:57" pos:end="83:58">-&gt;</operator><name pos:start="83:59" pos:end="83:65">streams</name><index pos:start="83:66" pos:end="83:68">[<expr pos:start="83:67" pos:end="83:67"><name pos:start="83:67" pos:end="83:67">i</name></expr>]</index></name><operator pos:start="83:69" pos:end="83:70">-&gt;</operator><name pos:start="83:71" pos:end="83:75">codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:64"><expr pos:start="85:13" pos:end="85:63"><name pos:start="85:13" pos:end="85:25"><name pos:start="85:13" pos:end="85:14">st</name><operator pos:start="85:15" pos:end="85:16">-&gt;</operator><name pos:start="85:17" pos:end="85:25">time_base</name></name> <operator pos:start="85:27" pos:end="85:27">=</operator> <name pos:start="85:29" pos:end="85:52"><name pos:start="85:29" pos:end="85:31">sap</name><operator pos:start="85:32" pos:end="85:33">-&gt;</operator><name pos:start="85:34" pos:end="85:40">sdp_ctx</name><operator pos:start="85:41" pos:end="85:42">-&gt;</operator><name pos:start="85:43" pos:end="85:49">streams</name><index pos:start="85:50" pos:end="85:52">[<expr pos:start="85:51" pos:end="85:51"><name pos:start="85:51" pos:end="85:51">i</name></expr>]</index></name><operator pos:start="85:53" pos:end="85:54">-&gt;</operator><name pos:start="85:55" pos:end="85:63">time_base</name></expr>;</expr_stmt>

        </block_content>}</block></while>

    </block_content>}</block></if></if_stmt>

    <return pos:start="91:5" pos:end="91:15">return <expr pos:start="91:12" pos:end="91:14"><name pos:start="91:12" pos:end="91:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
