<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/10603.c" pos:tabs="8"><function pos:start="1:1" pos:end="171:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:17">commit_start</name><parameter_list pos:start="1:18" pos:end="7:45">(<parameter pos:start="1:19" pos:end="1:38"><decl pos:start="1:19" pos:end="1:38"><type pos:start="1:19" pos:end="1:38"><name pos:start="1:19" pos:end="1:34">BlockDriverState</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:38">bs</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:62"><decl pos:start="1:41" pos:end="1:62"><type pos:start="1:41" pos:end="1:62"><name pos:start="1:41" pos:end="1:56">BlockDriverState</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:62">base</name></decl></parameter>,

                  <parameter pos:start="3:19" pos:end="3:39"><decl pos:start="3:19" pos:end="3:39"><type pos:start="3:19" pos:end="3:39"><name pos:start="3:19" pos:end="3:34">BlockDriverState</name> <modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:39">top</name></decl></parameter>, <parameter pos:start="3:42" pos:end="3:54"><decl pos:start="3:42" pos:end="3:54"><type pos:start="3:42" pos:end="3:54"><name pos:start="3:42" pos:end="3:48">int64_t</name></type> <name pos:start="3:50" pos:end="3:54">speed</name></decl></parameter>,

                  <parameter pos:start="5:19" pos:end="5:42"><decl pos:start="5:19" pos:end="5:42"><type pos:start="5:19" pos:end="5:42"><name pos:start="5:19" pos:end="5:33">BlockdevOnError</name></type> <name pos:start="5:35" pos:end="5:42">on_error</name></decl></parameter>, <parameter pos:start="5:45" pos:end="5:73"><decl pos:start="5:45" pos:end="5:73"><type pos:start="5:45" pos:end="5:73"><name pos:start="5:45" pos:end="5:69">BlockDriverCompletionFunc</name> <modifier pos:start="5:71" pos:end="5:71">*</modifier></type><name pos:start="5:72" pos:end="5:73">cb</name></decl></parameter>,

                  <parameter pos:start="7:19" pos:end="7:30"><decl pos:start="7:19" pos:end="7:30"><type pos:start="7:19" pos:end="7:30"><name pos:start="7:19" pos:end="7:22">void</name> <modifier pos:start="7:24" pos:end="7:24">*</modifier></type><name pos:start="7:25" pos:end="7:30">opaque</name></decl></parameter>, <parameter pos:start="7:33" pos:end="7:44"><decl pos:start="7:33" pos:end="7:44"><type pos:start="7:33" pos:end="7:44"><name pos:start="7:33" pos:end="7:37">Error</name> <modifier pos:start="7:39" pos:end="7:39">*</modifier><modifier pos:start="7:40" pos:end="7:40">*</modifier></type><name pos:start="7:41" pos:end="7:44">errp</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="171:1">{<block_content pos:start="11:5" pos:end="169:42">

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:18">CommitBlockJob</name> <modifier pos:start="11:20" pos:end="11:20">*</modifier></type><name pos:start="11:21" pos:end="11:21">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:42"><decl pos:start="13:5" pos:end="13:41"><type pos:start="13:5" pos:end="13:22"><name pos:start="13:5" pos:end="13:20">BlockReopenQueue</name> <modifier pos:start="13:22" pos:end="13:22">*</modifier></type><name pos:start="13:23" pos:end="13:34">reopen_queue</name> <init pos:start="13:36" pos:end="13:41">= <expr pos:start="13:38" pos:end="13:41"><name pos:start="13:38" pos:end="13:41">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:27"><decl pos:start="15:5" pos:end="15:26"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:26">orig_overlay_flags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:24"><decl pos:start="17:5" pos:end="17:23"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:23">orig_base_flags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:33"><decl pos:start="19:5" pos:end="19:32"><type pos:start="19:5" pos:end="19:22"><name pos:start="19:5" pos:end="19:20">BlockDriverState</name> <modifier pos:start="19:22" pos:end="19:22">*</modifier></type><name pos:start="19:23" pos:end="19:32">overlay_bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:28"><decl pos:start="21:5" pos:end="21:27"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:9">Error</name> <modifier pos:start="21:11" pos:end="21:11">*</modifier></type><name pos:start="21:12" pos:end="21:20">local_err</name> <init pos:start="21:22" pos:end="21:27">= <expr pos:start="21:24" pos:end="21:27"><name pos:start="21:24" pos:end="21:27">NULL</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="25:5" pos:end="35:5"><if pos:start="25:5" pos:end="35:5">if <condition pos:start="25:8" pos:end="29:38">(<expr pos:start="25:9" pos:end="29:37"><operator pos:start="25:9" pos:end="25:9">(</operator><name pos:start="25:10" pos:end="25:17">on_error</name> <operator pos:start="25:19" pos:end="25:20">==</operator> <name pos:start="25:22" pos:end="25:43">BLOCKDEV_ON_ERROR_STOP</name> <operator pos:start="25:45" pos:end="25:46">||</operator>

         <name pos:start="27:10" pos:end="27:17">on_error</name> <operator pos:start="27:19" pos:end="27:20">==</operator> <name pos:start="27:22" pos:end="27:45">BLOCKDEV_ON_ERROR_ENOSPC</name><operator pos:start="27:46" pos:end="27:46">)</operator> <operator pos:start="27:48" pos:end="27:49">&amp;&amp;</operator>

        <operator pos:start="29:9" pos:end="29:9">!</operator><call pos:start="29:10" pos:end="29:37"><name pos:start="29:10" pos:end="29:33">bdrv_iostatus_is_enabled</name><argument_list pos:start="29:34" pos:end="29:37">(<argument pos:start="29:35" pos:end="29:36"><expr pos:start="29:35" pos:end="29:36"><name pos:start="29:35" pos:end="29:36">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="29:40" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:15">

        <expr_stmt pos:start="31:9" pos:end="31:60"><expr pos:start="31:9" pos:end="31:59"><call pos:start="31:9" pos:end="31:59"><name pos:start="31:9" pos:end="31:17">error_set</name><argument_list pos:start="31:18" pos:end="31:59">(<argument pos:start="31:19" pos:end="31:22"><expr pos:start="31:19" pos:end="31:22"><name pos:start="31:19" pos:end="31:22">errp</name></expr></argument>, <argument pos:start="31:25" pos:end="31:58"><expr pos:start="31:25" pos:end="31:58"><name pos:start="31:25" pos:end="31:58">QERR_INVALID_PARAMETER_COMBINATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="39:5" pos:end="39:64">/* Once we support top == active layer, remove this check */</comment>

    <if_stmt pos:start="41:5" pos:end="49:5"><if pos:start="41:5" pos:end="49:5">if <condition pos:start="41:8" pos:end="41:18">(<expr pos:start="41:9" pos:end="41:17"><name pos:start="41:9" pos:end="41:11">top</name> <operator pos:start="41:13" pos:end="41:14">==</operator> <name pos:start="41:16" pos:end="41:17">bs</name></expr>)</condition> <block pos:start="41:20" pos:end="49:5">{<block_content pos:start="43:9" pos:end="47:15">

        <expr_stmt pos:start="43:9" pos:end="45:77"><expr pos:start="43:9" pos:end="45:76"><call pos:start="43:9" pos:end="45:76"><name pos:start="43:9" pos:end="43:18">error_setg</name><argument_list pos:start="43:19" pos:end="45:76">(<argument pos:start="43:20" pos:end="43:23"><expr pos:start="43:20" pos:end="43:23"><name pos:start="43:20" pos:end="43:23">errp</name></expr></argument>,

                   <argument pos:start="45:20" pos:end="45:75"><expr pos:start="45:20" pos:end="45:75"><literal type="string" pos:start="45:20" pos:end="45:75">"Top image as the active layer is currently unsupported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="47:9" pos:end="47:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="53:5" pos:end="59:5"><if pos:start="53:5" pos:end="59:5">if <condition pos:start="53:8" pos:end="53:20">(<expr pos:start="53:9" pos:end="53:19"><name pos:start="53:9" pos:end="53:11">top</name> <operator pos:start="53:13" pos:end="53:14">==</operator> <name pos:start="53:16" pos:end="53:19">base</name></expr>)</condition> <block pos:start="53:22" pos:end="59:5">{<block_content pos:start="55:9" pos:end="57:15">

        <expr_stmt pos:start="55:9" pos:end="55:79"><expr pos:start="55:9" pos:end="55:78"><call pos:start="55:9" pos:end="55:78"><name pos:start="55:9" pos:end="55:18">error_setg</name><argument_list pos:start="55:19" pos:end="55:78">(<argument pos:start="55:20" pos:end="55:23"><expr pos:start="55:20" pos:end="55:23"><name pos:start="55:20" pos:end="55:23">errp</name></expr></argument>, <argument pos:start="55:26" pos:end="55:77"><expr pos:start="55:26" pos:end="55:77"><literal type="string" pos:start="55:26" pos:end="55:77">"Invalid files for merge: top and base are the same"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="57:9" pos:end="57:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="63:5" pos:end="65:18">/* top and base may be valid, but let's make sure that base is reachable

     * from top */</comment>

    <if_stmt pos:start="67:5" pos:end="77:5"><if pos:start="67:5" pos:end="77:5">if <condition pos:start="67:8" pos:end="67:61">(<expr pos:start="67:9" pos:end="67:60"><call pos:start="67:9" pos:end="67:52"><name pos:start="67:9" pos:end="67:31">bdrv_find_backing_image</name><argument_list pos:start="67:32" pos:end="67:52">(<argument pos:start="67:33" pos:end="67:35"><expr pos:start="67:33" pos:end="67:35"><name pos:start="67:33" pos:end="67:35">top</name></expr></argument>, <argument pos:start="67:38" pos:end="67:51"><expr pos:start="67:38" pos:end="67:51"><name pos:start="67:38" pos:end="67:51"><name pos:start="67:38" pos:end="67:41">base</name><operator pos:start="67:42" pos:end="67:43">-&gt;</operator><name pos:start="67:44" pos:end="67:51">filename</name></name></expr></argument>)</argument_list></call> <operator pos:start="67:54" pos:end="67:55">!=</operator> <name pos:start="67:57" pos:end="67:60">base</name></expr>)</condition> <block pos:start="67:63" pos:end="77:5">{<block_content pos:start="69:9" pos:end="75:15">

        <expr_stmt pos:start="69:9" pos:end="73:50"><expr pos:start="69:9" pos:end="73:49"><call pos:start="69:9" pos:end="73:49"><name pos:start="69:9" pos:end="69:18">error_setg</name><argument_list pos:start="69:19" pos:end="73:49">(<argument pos:start="69:20" pos:end="69:23"><expr pos:start="69:20" pos:end="69:23"><name pos:start="69:20" pos:end="69:23">errp</name></expr></argument>,

                   <argument pos:start="71:20" pos:end="71:61"><expr pos:start="71:20" pos:end="71:61"><literal type="string" pos:start="71:20" pos:end="71:61">"Base (%s) is not reachable from top (%s)"</literal></expr></argument>,

                   <argument pos:start="73:20" pos:end="73:33"><expr pos:start="73:20" pos:end="73:33"><name pos:start="73:20" pos:end="73:33"><name pos:start="73:20" pos:end="73:23">base</name><operator pos:start="73:24" pos:end="73:25">-&gt;</operator><name pos:start="73:26" pos:end="73:33">filename</name></name></expr></argument>, <argument pos:start="73:36" pos:end="73:48"><expr pos:start="73:36" pos:end="73:48"><name pos:start="73:36" pos:end="73:48"><name pos:start="73:36" pos:end="73:38">top</name><operator pos:start="73:39" pos:end="73:40">-&gt;</operator><name pos:start="73:41" pos:end="73:48">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="75:9" pos:end="75:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="81:5" pos:end="81:44"><expr pos:start="81:5" pos:end="81:43"><name pos:start="81:5" pos:end="81:14">overlay_bs</name> <operator pos:start="81:16" pos:end="81:16">=</operator> <call pos:start="81:18" pos:end="81:43"><name pos:start="81:18" pos:end="81:34">bdrv_find_overlay</name><argument_list pos:start="81:35" pos:end="81:43">(<argument pos:start="81:36" pos:end="81:37"><expr pos:start="81:36" pos:end="81:37"><name pos:start="81:36" pos:end="81:37">bs</name></expr></argument>, <argument pos:start="81:40" pos:end="81:42"><expr pos:start="81:40" pos:end="81:42"><name pos:start="81:40" pos:end="81:42">top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="85:5" pos:end="91:5"><if pos:start="85:5" pos:end="91:5">if <condition pos:start="85:8" pos:end="85:27">(<expr pos:start="85:9" pos:end="85:26"><name pos:start="85:9" pos:end="85:18">overlay_bs</name> <operator pos:start="85:20" pos:end="85:21">==</operator> <name pos:start="85:23" pos:end="85:26">NULL</name></expr>)</condition> <block pos:start="85:29" pos:end="91:5">{<block_content pos:start="87:9" pos:end="89:15">

        <expr_stmt pos:start="87:9" pos:end="87:80"><expr pos:start="87:9" pos:end="87:79"><call pos:start="87:9" pos:end="87:79"><name pos:start="87:9" pos:end="87:18">error_setg</name><argument_list pos:start="87:19" pos:end="87:79">(<argument pos:start="87:20" pos:end="87:23"><expr pos:start="87:20" pos:end="87:23"><name pos:start="87:20" pos:end="87:23">errp</name></expr></argument>, <argument pos:start="87:26" pos:end="87:63"><expr pos:start="87:26" pos:end="87:63"><literal type="string" pos:start="87:26" pos:end="87:63">"Could not find overlay image for %s:"</literal></expr></argument>, <argument pos:start="87:66" pos:end="87:78"><expr pos:start="87:66" pos:end="87:78"><name pos:start="87:66" pos:end="87:78"><name pos:start="87:66" pos:end="87:68">top</name><operator pos:start="87:69" pos:end="87:70">-&gt;</operator><name pos:start="87:71" pos:end="87:78">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="89:9" pos:end="89:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="95:5" pos:end="95:46"><expr pos:start="95:5" pos:end="95:45"><name pos:start="95:5" pos:end="95:19">orig_base_flags</name>    <operator pos:start="95:24" pos:end="95:24">=</operator> <call pos:start="95:26" pos:end="95:45"><name pos:start="95:26" pos:end="95:39">bdrv_get_flags</name><argument_list pos:start="95:40" pos:end="95:45">(<argument pos:start="95:41" pos:end="95:44"><expr pos:start="95:41" pos:end="95:44"><name pos:start="95:41" pos:end="95:44">base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:52"><expr pos:start="97:5" pos:end="97:51"><name pos:start="97:5" pos:end="97:22">orig_overlay_flags</name> <operator pos:start="97:24" pos:end="97:24">=</operator> <call pos:start="97:26" pos:end="97:51"><name pos:start="97:26" pos:end="97:39">bdrv_get_flags</name><argument_list pos:start="97:40" pos:end="97:51">(<argument pos:start="97:41" pos:end="97:50"><expr pos:start="97:41" pos:end="97:50"><name pos:start="97:41" pos:end="97:50">overlay_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="101:5" pos:end="101:56">/* convert base &amp; overlay_bs to r/w, if necessary */</comment>

    <if_stmt pos:start="103:5" pos:end="109:5"><if pos:start="103:5" pos:end="109:5">if <condition pos:start="103:8" pos:end="103:41">(<expr pos:start="103:9" pos:end="103:40"><operator pos:start="103:9" pos:end="103:9">!</operator><operator pos:start="103:10" pos:end="103:10">(</operator><name pos:start="103:11" pos:end="103:25">orig_base_flags</name> <operator pos:start="103:27" pos:end="103:27">&amp;</operator> <name pos:start="103:29" pos:end="103:39">BDRV_O_RDWR</name><operator pos:start="103:40" pos:end="103:40">)</operator></expr>)</condition> <block pos:start="103:43" pos:end="109:5">{<block_content pos:start="105:9" pos:end="107:72">

        <expr_stmt pos:start="105:9" pos:end="107:72"><expr pos:start="105:9" pos:end="107:71"><name pos:start="105:9" pos:end="105:20">reopen_queue</name> <operator pos:start="105:22" pos:end="105:22">=</operator> <call pos:start="105:24" pos:end="107:71"><name pos:start="105:24" pos:end="105:40">bdrv_reopen_queue</name><argument_list pos:start="105:41" pos:end="107:71">(<argument pos:start="105:42" pos:end="105:53"><expr pos:start="105:42" pos:end="105:53"><name pos:start="105:42" pos:end="105:53">reopen_queue</name></expr></argument>, <argument pos:start="105:56" pos:end="105:59"><expr pos:start="105:56" pos:end="105:59"><name pos:start="105:56" pos:end="105:59">base</name></expr></argument>,

                                         <argument pos:start="107:42" pos:end="107:70"><expr pos:start="107:42" pos:end="107:70"><name pos:start="107:42" pos:end="107:56">orig_base_flags</name> <operator pos:start="107:58" pos:end="107:58">|</operator> <name pos:start="107:60" pos:end="107:70">BDRV_O_RDWR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="111:5" pos:end="117:5"><if pos:start="111:5" pos:end="117:5">if <condition pos:start="111:8" pos:end="111:44">(<expr pos:start="111:9" pos:end="111:43"><operator pos:start="111:9" pos:end="111:9">!</operator><operator pos:start="111:10" pos:end="111:10">(</operator><name pos:start="111:11" pos:end="111:28">orig_overlay_flags</name> <operator pos:start="111:30" pos:end="111:30">&amp;</operator> <name pos:start="111:32" pos:end="111:42">BDRV_O_RDWR</name><operator pos:start="111:43" pos:end="111:43">)</operator></expr>)</condition> <block pos:start="111:46" pos:end="117:5">{<block_content pos:start="113:9" pos:end="115:75">

        <expr_stmt pos:start="113:9" pos:end="115:75"><expr pos:start="113:9" pos:end="115:74"><name pos:start="113:9" pos:end="113:20">reopen_queue</name> <operator pos:start="113:22" pos:end="113:22">=</operator> <call pos:start="113:24" pos:end="115:74"><name pos:start="113:24" pos:end="113:40">bdrv_reopen_queue</name><argument_list pos:start="113:41" pos:end="115:74">(<argument pos:start="113:42" pos:end="113:53"><expr pos:start="113:42" pos:end="113:53"><name pos:start="113:42" pos:end="113:53">reopen_queue</name></expr></argument>, <argument pos:start="113:56" pos:end="113:65"><expr pos:start="113:56" pos:end="113:65"><name pos:start="113:56" pos:end="113:65">overlay_bs</name></expr></argument>,

                                         <argument pos:start="115:42" pos:end="115:73"><expr pos:start="115:42" pos:end="115:73"><name pos:start="115:42" pos:end="115:59">orig_overlay_flags</name> <operator pos:start="115:61" pos:end="115:61">|</operator> <name pos:start="115:63" pos:end="115:73">BDRV_O_RDWR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="119:5" pos:end="131:5"><if pos:start="119:5" pos:end="131:5">if <condition pos:start="119:8" pos:end="119:21">(<expr pos:start="119:9" pos:end="119:20"><name pos:start="119:9" pos:end="119:20">reopen_queue</name></expr>)</condition> <block pos:start="119:23" pos:end="131:5">{<block_content pos:start="121:9" pos:end="129:9">

        <expr_stmt pos:start="121:9" pos:end="121:55"><expr pos:start="121:9" pos:end="121:54"><call pos:start="121:9" pos:end="121:54"><name pos:start="121:9" pos:end="121:28">bdrv_reopen_multiple</name><argument_list pos:start="121:29" pos:end="121:54">(<argument pos:start="121:30" pos:end="121:41"><expr pos:start="121:30" pos:end="121:41"><name pos:start="121:30" pos:end="121:41">reopen_queue</name></expr></argument>, <argument pos:start="121:44" pos:end="121:53"><expr pos:start="121:44" pos:end="121:53"><operator pos:start="121:44" pos:end="121:44">&amp;</operator><name pos:start="121:45" pos:end="121:53">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="123:9" pos:end="129:9"><if pos:start="123:9" pos:end="129:9">if <condition pos:start="123:12" pos:end="123:30">(<expr pos:start="123:13" pos:end="123:29"><name pos:start="123:13" pos:end="123:21">local_err</name> <operator pos:start="123:23" pos:end="123:24">!=</operator> <name pos:start="123:26" pos:end="123:29">NULL</name></expr>)</condition> <block pos:start="123:32" pos:end="129:9">{<block_content pos:start="125:13" pos:end="127:19">

            <expr_stmt pos:start="125:13" pos:end="125:45"><expr pos:start="125:13" pos:end="125:44"><call pos:start="125:13" pos:end="125:44"><name pos:start="125:13" pos:end="125:27">error_propagate</name><argument_list pos:start="125:28" pos:end="125:44">(<argument pos:start="125:29" pos:end="125:32"><expr pos:start="125:29" pos:end="125:32"><name pos:start="125:29" pos:end="125:32">errp</name></expr></argument>, <argument pos:start="125:35" pos:end="125:43"><expr pos:start="125:35" pos:end="125:43"><name pos:start="125:35" pos:end="125:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="127:13" pos:end="127:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>





    <expr_stmt pos:start="137:5" pos:end="137:72"><expr pos:start="137:5" pos:end="137:71"><name pos:start="137:5" pos:end="137:5">s</name> <operator pos:start="137:7" pos:end="137:7">=</operator> <call pos:start="137:9" pos:end="137:71"><name pos:start="137:9" pos:end="137:24">block_job_create</name><argument_list pos:start="137:25" pos:end="137:71">(<argument pos:start="137:26" pos:end="137:41"><expr pos:start="137:26" pos:end="137:41"><operator pos:start="137:26" pos:end="137:26">&amp;</operator><name pos:start="137:27" pos:end="137:41">commit_job_type</name></expr></argument>, <argument pos:start="137:44" pos:end="137:45"><expr pos:start="137:44" pos:end="137:45"><name pos:start="137:44" pos:end="137:45">bs</name></expr></argument>, <argument pos:start="137:48" pos:end="137:52"><expr pos:start="137:48" pos:end="137:52"><name pos:start="137:48" pos:end="137:52">speed</name></expr></argument>, <argument pos:start="137:55" pos:end="137:56"><expr pos:start="137:55" pos:end="137:56"><name pos:start="137:55" pos:end="137:56">cb</name></expr></argument>, <argument pos:start="137:59" pos:end="137:64"><expr pos:start="137:59" pos:end="137:64"><name pos:start="137:59" pos:end="137:64">opaque</name></expr></argument>, <argument pos:start="137:67" pos:end="137:70"><expr pos:start="137:67" pos:end="137:70"><name pos:start="137:67" pos:end="137:70">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="139:5" pos:end="143:5"><if pos:start="139:5" pos:end="143:5">if <condition pos:start="139:8" pos:end="139:11">(<expr pos:start="139:9" pos:end="139:10"><operator pos:start="139:9" pos:end="139:9">!</operator><name pos:start="139:10" pos:end="139:10">s</name></expr>)</condition> <block pos:start="139:13" pos:end="143:5">{<block_content pos:start="141:9" pos:end="141:15">

        <return pos:start="141:9" pos:end="141:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="147:5" pos:end="147:21"><expr pos:start="147:5" pos:end="147:20"><name pos:start="147:5" pos:end="147:11"><name pos:start="147:5" pos:end="147:5">s</name><operator pos:start="147:6" pos:end="147:7">-&gt;</operator><name pos:start="147:8" pos:end="147:11">base</name></name>   <operator pos:start="147:15" pos:end="147:15">=</operator> <name pos:start="147:17" pos:end="147:20">base</name></expr>;</expr_stmt>

    <expr_stmt pos:start="149:5" pos:end="149:20"><expr pos:start="149:5" pos:end="149:19"><name pos:start="149:5" pos:end="149:10"><name pos:start="149:5" pos:end="149:5">s</name><operator pos:start="149:6" pos:end="149:7">-&gt;</operator><name pos:start="149:8" pos:end="149:10">top</name></name>    <operator pos:start="149:15" pos:end="149:15">=</operator> <name pos:start="149:17" pos:end="149:19">top</name></expr>;</expr_stmt>

    <expr_stmt pos:start="151:5" pos:end="151:19"><expr pos:start="151:5" pos:end="151:18"><name pos:start="151:5" pos:end="151:13"><name pos:start="151:5" pos:end="151:5">s</name><operator pos:start="151:6" pos:end="151:7">-&gt;</operator><name pos:start="151:8" pos:end="151:13">active</name></name> <operator pos:start="151:15" pos:end="151:15">=</operator> <name pos:start="151:17" pos:end="151:18">bs</name></expr>;</expr_stmt>



    <expr_stmt pos:start="155:5" pos:end="155:45"><expr pos:start="155:5" pos:end="155:44"><name pos:start="155:5" pos:end="155:17"><name pos:start="155:5" pos:end="155:5">s</name><operator pos:start="155:6" pos:end="155:7">-&gt;</operator><name pos:start="155:8" pos:end="155:17">base_flags</name></name>          <operator pos:start="155:28" pos:end="155:28">=</operator> <name pos:start="155:30" pos:end="155:44">orig_base_flags</name></expr>;</expr_stmt>

    <expr_stmt pos:start="157:5" pos:end="157:48"><expr pos:start="157:5" pos:end="157:47"><name pos:start="157:5" pos:end="157:25"><name pos:start="157:5" pos:end="157:5">s</name><operator pos:start="157:6" pos:end="157:7">-&gt;</operator><name pos:start="157:8" pos:end="157:25">orig_overlay_flags</name></name>  <operator pos:start="157:28" pos:end="157:28">=</operator> <name pos:start="157:30" pos:end="157:47">orig_overlay_flags</name></expr>;</expr_stmt>



    <expr_stmt pos:start="161:5" pos:end="161:27"><expr pos:start="161:5" pos:end="161:26"><name pos:start="161:5" pos:end="161:15"><name pos:start="161:5" pos:end="161:5">s</name><operator pos:start="161:6" pos:end="161:7">-&gt;</operator><name pos:start="161:8" pos:end="161:15">on_error</name></name> <operator pos:start="161:17" pos:end="161:17">=</operator> <name pos:start="161:19" pos:end="161:26">on_error</name></expr>;</expr_stmt>

    <expr_stmt pos:start="163:5" pos:end="163:53"><expr pos:start="163:5" pos:end="163:52"><name pos:start="163:5" pos:end="163:16"><name pos:start="163:5" pos:end="163:5">s</name><operator pos:start="163:6" pos:end="163:7">-&gt;</operator><name pos:start="163:8" pos:end="163:13">common</name><operator pos:start="163:14" pos:end="163:14">.</operator><name pos:start="163:15" pos:end="163:16">co</name></name> <operator pos:start="163:18" pos:end="163:18">=</operator> <call pos:start="163:20" pos:end="163:52"><name pos:start="163:20" pos:end="163:40">qemu_coroutine_create</name><argument_list pos:start="163:41" pos:end="163:52">(<argument pos:start="163:42" pos:end="163:51"><expr pos:start="163:42" pos:end="163:51"><name pos:start="163:42" pos:end="163:51">commit_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="167:5" pos:end="167:63"><expr pos:start="167:5" pos:end="167:62"><call pos:start="167:5" pos:end="167:62"><name pos:start="167:5" pos:end="167:22">trace_commit_start</name><argument_list pos:start="167:23" pos:end="167:62">(<argument pos:start="167:24" pos:end="167:25"><expr pos:start="167:24" pos:end="167:25"><name pos:start="167:24" pos:end="167:25">bs</name></expr></argument>, <argument pos:start="167:28" pos:end="167:31"><expr pos:start="167:28" pos:end="167:31"><name pos:start="167:28" pos:end="167:31">base</name></expr></argument>, <argument pos:start="167:34" pos:end="167:36"><expr pos:start="167:34" pos:end="167:36"><name pos:start="167:34" pos:end="167:36">top</name></expr></argument>, <argument pos:start="167:39" pos:end="167:39"><expr pos:start="167:39" pos:end="167:39"><name pos:start="167:39" pos:end="167:39">s</name></expr></argument>, <argument pos:start="167:42" pos:end="167:53"><expr pos:start="167:42" pos:end="167:53"><name pos:start="167:42" pos:end="167:53"><name pos:start="167:42" pos:end="167:42">s</name><operator pos:start="167:43" pos:end="167:44">-&gt;</operator><name pos:start="167:45" pos:end="167:50">common</name><operator pos:start="167:51" pos:end="167:51">.</operator><name pos:start="167:52" pos:end="167:53">co</name></name></expr></argument>, <argument pos:start="167:56" pos:end="167:61"><expr pos:start="167:56" pos:end="167:61"><name pos:start="167:56" pos:end="167:61">opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="169:5" pos:end="169:42"><expr pos:start="169:5" pos:end="169:41"><call pos:start="169:5" pos:end="169:41"><name pos:start="169:5" pos:end="169:24">qemu_coroutine_enter</name><argument_list pos:start="169:25" pos:end="169:41">(<argument pos:start="169:26" pos:end="169:37"><expr pos:start="169:26" pos:end="169:37"><name pos:start="169:26" pos:end="169:37"><name pos:start="169:26" pos:end="169:26">s</name><operator pos:start="169:27" pos:end="169:28">-&gt;</operator><name pos:start="169:29" pos:end="169:34">common</name><operator pos:start="169:35" pos:end="169:35">.</operator><name pos:start="169:36" pos:end="169:37">co</name></name></expr></argument>, <argument pos:start="169:40" pos:end="169:40"><expr pos:start="169:40" pos:end="169:40"><name pos:start="169:40" pos:end="169:40">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
