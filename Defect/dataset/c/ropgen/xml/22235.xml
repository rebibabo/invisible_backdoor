<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22235.c" pos:tabs="8"><function pos:start="1:1" pos:end="150:16"><type pos:start="1:1" pos:end="1:13"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">char</name> <modifier pos:start="1:13" pos:end="1:13">*</modifier></type><name pos:start="1:14" pos:end="1:34">spapr_get_fw_dev_path</name><parameter_list pos:start="1:35" pos:end="3:52">(<parameter pos:start="1:36" pos:end="1:52"><decl pos:start="1:36" pos:end="1:52"><type pos:start="1:36" pos:end="1:52"><name pos:start="1:36" pos:end="1:49">FWPathProvider</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:52">p</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:67"><decl pos:start="1:55" pos:end="1:67"><type pos:start="1:55" pos:end="1:67"><name pos:start="1:55" pos:end="1:62">BusState</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:67">bus</name></decl></parameter>,

                                   <parameter pos:start="3:36" pos:end="3:51"><decl pos:start="3:36" pos:end="3:51"><type pos:start="3:36" pos:end="3:51"><name pos:start="3:36" pos:end="3:46">DeviceState</name> <modifier pos:start="3:48" pos:end="3:48">*</modifier></type><name pos:start="3:49" pos:end="3:51">dev</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="150:16">{<block_content pos:start="11:5" pos:end="150:16">

<cpp:define pos:start="7:1" pos:end="9:54">#<cpp:directive pos:start="7:2" pos:end="7:7">define</cpp:directive> <cpp:macro pos:start="7:9" pos:end="7:29"><name pos:start="7:9" pos:end="7:12">CAST</name><parameter_list pos:start="7:13" pos:end="7:29">(<parameter pos:start="7:14" pos:end="7:17"><type pos:start="7:14" pos:end="7:17"><name pos:start="7:14" pos:end="7:17">type</name></type></parameter>, <parameter pos:start="7:20" pos:end="7:22"><type pos:start="7:20" pos:end="7:22"><name pos:start="7:20" pos:end="7:22">obj</name></type></parameter>, <parameter pos:start="7:25" pos:end="7:28"><type pos:start="7:25" pos:end="7:28"><name pos:start="7:25" pos:end="7:28">name</name></type></parameter>)</parameter_list></cpp:macro> \

    <cpp:value pos:start="9:5" pos:end="9:54">((type *)object_dynamic_cast(OBJECT(obj), (name)))</cpp:value></cpp:define>

    <decl_stmt pos:start="11:5" pos:end="11:61"><decl pos:start="11:5" pos:end="11:60"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:14">SCSIDevice</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:17">d</name> <init pos:start="11:19" pos:end="11:60">= <expr pos:start="11:21" pos:end="11:60"><call pos:start="11:21" pos:end="11:60"><name pos:start="11:21" pos:end="11:24">CAST</name><argument_list pos:start="11:25" pos:end="11:60">(<argument pos:start="11:26" pos:end="11:35"><expr pos:start="11:26" pos:end="11:35"><name pos:start="11:26" pos:end="11:35">SCSIDevice</name></expr></argument>,  <argument pos:start="11:39" pos:end="11:41"><expr pos:start="11:39" pos:end="11:41"><name pos:start="11:39" pos:end="11:41">dev</name></expr></argument>, <argument pos:start="11:44" pos:end="11:59"><expr pos:start="11:44" pos:end="11:59"><name pos:start="11:44" pos:end="11:59">TYPE_SCSI_DEVICE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:78"><decl pos:start="13:5" pos:end="13:77"><type pos:start="13:5" pos:end="13:19"><name pos:start="13:5" pos:end="13:17">sPAPRPHBState</name> <modifier pos:start="13:19" pos:end="13:19">*</modifier></type><name pos:start="13:20" pos:end="13:22">phb</name> <init pos:start="13:24" pos:end="13:77">= <expr pos:start="13:26" pos:end="13:77"><call pos:start="13:26" pos:end="13:77"><name pos:start="13:26" pos:end="13:29">CAST</name><argument_list pos:start="13:30" pos:end="13:77">(<argument pos:start="13:31" pos:end="13:43"><expr pos:start="13:31" pos:end="13:43"><name pos:start="13:31" pos:end="13:43">sPAPRPHBState</name></expr></argument>, <argument pos:start="13:46" pos:end="13:48"><expr pos:start="13:46" pos:end="13:48"><name pos:start="13:46" pos:end="13:48">dev</name></expr></argument>, <argument pos:start="13:51" pos:end="13:76"><expr pos:start="13:51" pos:end="13:76"><name pos:start="13:51" pos:end="13:76">TYPE_SPAPR_PCI_HOST_BRIDGE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:78"><decl pos:start="15:5" pos:end="15:77"><type pos:start="15:5" pos:end="15:21"><name pos:start="15:5" pos:end="15:19">VHostSCSICommon</name> <modifier pos:start="15:21" pos:end="15:21">*</modifier></type><name pos:start="15:22" pos:end="15:24">vsc</name> <init pos:start="15:26" pos:end="15:77">= <expr pos:start="15:28" pos:end="15:77"><call pos:start="15:28" pos:end="15:77"><name pos:start="15:28" pos:end="15:31">CAST</name><argument_list pos:start="15:32" pos:end="15:77">(<argument pos:start="15:33" pos:end="15:47"><expr pos:start="15:33" pos:end="15:47"><name pos:start="15:33" pos:end="15:47">VHostSCSICommon</name></expr></argument>, <argument pos:start="15:50" pos:end="15:52"><expr pos:start="15:50" pos:end="15:52"><name pos:start="15:50" pos:end="15:52">dev</name></expr></argument>, <argument pos:start="15:55" pos:end="15:76"><expr pos:start="15:55" pos:end="15:76"><name pos:start="15:55" pos:end="15:76">TYPE_VHOST_SCSI_COMMON</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="150:16"><if pos:start="19:5" pos:end="150:16">if <condition pos:start="19:8" pos:end="19:10">(<expr pos:start="19:9" pos:end="19:9"><name pos:start="19:9" pos:end="19:9">d</name></expr>)</condition> <block pos:start="19:12" pos:end="150:16">{<block_content pos:start="21:9" pos:end="150:16">

        <decl_stmt pos:start="21:9" pos:end="21:61"><decl pos:start="21:9" pos:end="21:60"><type pos:start="21:9" pos:end="21:14"><name pos:start="21:9" pos:end="21:12">void</name> <modifier pos:start="21:14" pos:end="21:14">*</modifier></type><name pos:start="21:15" pos:end="21:19">spapr</name> <init pos:start="21:21" pos:end="21:60">= <expr pos:start="21:23" pos:end="21:60"><call pos:start="21:23" pos:end="21:60"><name pos:start="21:23" pos:end="21:26">CAST</name><argument_list pos:start="21:27" pos:end="21:60">(<argument pos:start="21:28" pos:end="21:31"><expr pos:start="21:28" pos:end="21:31"><name pos:start="21:28" pos:end="21:31">void</name></expr></argument>, <argument pos:start="21:34" pos:end="21:44"><expr pos:start="21:34" pos:end="21:44"><name pos:start="21:34" pos:end="21:44"><name pos:start="21:34" pos:end="21:36">bus</name><operator pos:start="21:37" pos:end="21:38">-&gt;</operator><name pos:start="21:39" pos:end="21:44">parent</name></name></expr></argument>, <argument pos:start="21:47" pos:end="21:59"><expr pos:start="21:47" pos:end="21:59"><literal type="string" pos:start="21:47" pos:end="21:59">"spapr-vscsi"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="23:9" pos:end="23:77"><decl pos:start="23:9" pos:end="23:76"><type pos:start="23:9" pos:end="23:20"><name pos:start="23:9" pos:end="23:18">VirtIOSCSI</name> <modifier pos:start="23:20" pos:end="23:20">*</modifier></type><name pos:start="23:21" pos:end="23:26">virtio</name> <init pos:start="23:28" pos:end="23:76">= <expr pos:start="23:30" pos:end="23:76"><call pos:start="23:30" pos:end="23:76"><name pos:start="23:30" pos:end="23:33">CAST</name><argument_list pos:start="23:34" pos:end="23:76">(<argument pos:start="23:35" pos:end="23:44"><expr pos:start="23:35" pos:end="23:44"><name pos:start="23:35" pos:end="23:44">VirtIOSCSI</name></expr></argument>, <argument pos:start="23:47" pos:end="23:57"><expr pos:start="23:47" pos:end="23:57"><name pos:start="23:47" pos:end="23:57"><name pos:start="23:47" pos:end="23:49">bus</name><operator pos:start="23:50" pos:end="23:51">-&gt;</operator><name pos:start="23:52" pos:end="23:57">parent</name></name></expr></argument>, <argument pos:start="23:60" pos:end="23:75"><expr pos:start="23:60" pos:end="23:75"><name pos:start="23:60" pos:end="23:75">TYPE_VIRTIO_SCSI</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="25:9" pos:end="25:71"><decl pos:start="25:9" pos:end="25:70"><type pos:start="25:9" pos:end="25:19"><name pos:start="25:9" pos:end="25:17">USBDevice</name> <modifier pos:start="25:19" pos:end="25:19">*</modifier></type><name pos:start="25:20" pos:end="25:22">usb</name> <init pos:start="25:24" pos:end="25:70">= <expr pos:start="25:26" pos:end="25:70"><call pos:start="25:26" pos:end="25:70"><name pos:start="25:26" pos:end="25:29">CAST</name><argument_list pos:start="25:30" pos:end="25:70">(<argument pos:start="25:31" pos:end="25:39"><expr pos:start="25:31" pos:end="25:39"><name pos:start="25:31" pos:end="25:39">USBDevice</name></expr></argument>, <argument pos:start="25:42" pos:end="25:52"><expr pos:start="25:42" pos:end="25:52"><name pos:start="25:42" pos:end="25:52"><name pos:start="25:42" pos:end="25:44">bus</name><operator pos:start="25:45" pos:end="25:46">-&gt;</operator><name pos:start="25:47" pos:end="25:52">parent</name></name></expr></argument>, <argument pos:start="25:55" pos:end="25:69"><expr pos:start="25:55" pos:end="25:69"><name pos:start="25:55" pos:end="25:69">TYPE_USB_DEVICE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="29:9" pos:end="150:16"><if pos:start="29:9" pos:end="47:9">if <condition pos:start="29:12" pos:end="29:18">(<expr pos:start="29:13" pos:end="29:17"><name pos:start="29:13" pos:end="29:17">spapr</name></expr>)</condition> <block pos:start="29:20" pos:end="47:9">{<block_content pos:start="41:13" pos:end="45:55">

            <comment type="block" pos:start="31:13" pos:end="39:15">/*

             * Replace "channel@0/disk@0,0" with "disk@8000000000000000":

             * We use SRP luns of the form 8000 | (bus &lt;&lt; 8) | (id &lt;&lt; 5) | lun

             * in the top 16 bits of the 64-bit LUN

             */</comment>

            <decl_stmt pos:start="41:13" pos:end="41:57"><decl pos:start="41:13" pos:end="41:56"><type pos:start="41:13" pos:end="41:20"><name pos:start="41:13" pos:end="41:20">unsigned</name></type> <name pos:start="41:22" pos:end="41:23">id</name> <init pos:start="41:25" pos:end="41:56">= <expr pos:start="41:27" pos:end="41:56"><literal type="number" pos:start="41:27" pos:end="41:32">0x8000</literal> <operator pos:start="41:34" pos:end="41:34">|</operator> <operator pos:start="41:36" pos:end="41:36">(</operator><name pos:start="41:37" pos:end="41:41"><name pos:start="41:37" pos:end="41:37">d</name><operator pos:start="41:38" pos:end="41:39">-&gt;</operator><name pos:start="41:40" pos:end="41:41">id</name></name> <operator pos:start="41:43" pos:end="41:44">&lt;&lt;</operator> <literal type="number" pos:start="41:46" pos:end="41:46">8</literal><operator pos:start="41:47" pos:end="41:47">)</operator> <operator pos:start="41:49" pos:end="41:49">|</operator> <name pos:start="41:51" pos:end="41:56"><name pos:start="41:51" pos:end="41:51">d</name><operator pos:start="41:52" pos:end="41:53">-&gt;</operator><name pos:start="41:54" pos:end="41:56">lun</name></name></expr></init></decl>;</decl_stmt>

            <return pos:start="43:13" pos:end="45:55">return <expr pos:start="43:20" pos:end="45:54"><call pos:start="43:20" pos:end="45:54"><name pos:start="43:20" pos:end="43:34">g_strdup_printf</name><argument_list pos:start="43:35" pos:end="45:54">(<argument pos:start="43:36" pos:end="43:47"><expr pos:start="43:36" pos:end="43:47"><literal type="string" pos:start="43:36" pos:end="43:41">"%s@%"</literal><name pos:start="43:42" pos:end="43:47">PRIX64</name></expr></argument>, <argument pos:start="43:50" pos:end="43:66"><expr pos:start="43:50" pos:end="43:66"><call pos:start="43:50" pos:end="43:66"><name pos:start="43:50" pos:end="43:61">qdev_fw_name</name><argument_list pos:start="43:62" pos:end="43:66">(<argument pos:start="43:63" pos:end="43:65"><expr pos:start="43:63" pos:end="43:65"><name pos:start="43:63" pos:end="43:65">dev</name></expr></argument>)</argument_list></call></expr></argument>,

                                   <argument pos:start="45:36" pos:end="45:53"><expr pos:start="45:36" pos:end="45:53"><operator pos:start="45:36" pos:end="45:36">(</operator><name pos:start="45:37" pos:end="45:44">uint64_t</name><operator pos:start="45:45" pos:end="45:45">)</operator><name pos:start="45:46" pos:end="45:47">id</name> <operator pos:start="45:49" pos:end="45:50">&lt;&lt;</operator> <literal type="number" pos:start="45:52" pos:end="45:53">48</literal></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if> <if type="elseif" pos:start="47:11" pos:end="73:9">else if <condition pos:start="47:19" pos:end="47:26">(<expr pos:start="47:20" pos:end="47:25"><name pos:start="47:20" pos:end="47:25">virtio</name></expr>)</condition> <block pos:start="47:28" pos:end="73:9">{<block_content pos:start="63:13" pos:end="71:55">

            <comment type="block" pos:start="49:13" pos:end="61:15">/*

             * We use SRP luns of the form 01000000 | (target &lt;&lt; 8) | lun

             * in the top 32 bits of the 64-bit LUN

             * Note: the quote above is from SLOF and it is wrong,

             * the actual binding is:

             * swap 0100 or 10 &lt;&lt; or 20 &lt;&lt; ( target lun-id -- srplun )

             */</comment>

            <decl_stmt pos:start="63:13" pos:end="63:61"><decl pos:start="63:13" pos:end="63:60"><type pos:start="63:13" pos:end="63:20"><name pos:start="63:13" pos:end="63:20">unsigned</name></type> <name pos:start="63:22" pos:end="63:23">id</name> <init pos:start="63:25" pos:end="63:60">= <expr pos:start="63:27" pos:end="63:60"><literal type="number" pos:start="63:27" pos:end="63:35">0x1000000</literal> <operator pos:start="63:37" pos:end="63:37">|</operator> <operator pos:start="63:39" pos:end="63:39">(</operator><name pos:start="63:40" pos:end="63:44"><name pos:start="63:40" pos:end="63:40">d</name><operator pos:start="63:41" pos:end="63:42">-&gt;</operator><name pos:start="63:43" pos:end="63:44">id</name></name> <operator pos:start="63:46" pos:end="63:47">&lt;&lt;</operator> <literal type="number" pos:start="63:49" pos:end="63:50">16</literal><operator pos:start="63:51" pos:end="63:51">)</operator> <operator pos:start="63:53" pos:end="63:53">|</operator> <name pos:start="63:55" pos:end="63:60"><name pos:start="63:55" pos:end="63:55">d</name><operator pos:start="63:56" pos:end="63:57">-&gt;</operator><name pos:start="63:58" pos:end="63:60">lun</name></name></expr></init></decl>;</decl_stmt>





            <return pos:start="69:13" pos:end="71:55">return <expr pos:start="69:20" pos:end="71:54"><call pos:start="69:20" pos:end="71:54"><name pos:start="69:20" pos:end="69:34">g_strdup_printf</name><argument_list pos:start="69:35" pos:end="71:54">(<argument pos:start="69:36" pos:end="69:47"><expr pos:start="69:36" pos:end="69:47"><literal type="string" pos:start="69:36" pos:end="69:41">"%s@%"</literal><name pos:start="69:42" pos:end="69:47">PRIX64</name></expr></argument>, <argument pos:start="69:50" pos:end="69:66"><expr pos:start="69:50" pos:end="69:66"><call pos:start="69:50" pos:end="69:66"><name pos:start="69:50" pos:end="69:61">qdev_fw_name</name><argument_list pos:start="69:62" pos:end="69:66">(<argument pos:start="69:63" pos:end="69:65"><expr pos:start="69:63" pos:end="69:65"><name pos:start="69:63" pos:end="69:65">dev</name></expr></argument>)</argument_list></call></expr></argument>,

                                   <argument pos:start="71:36" pos:end="71:53"><expr pos:start="71:36" pos:end="71:53"><operator pos:start="71:36" pos:end="71:36">(</operator><name pos:start="71:37" pos:end="71:44">uint64_t</name><operator pos:start="71:45" pos:end="71:45">)</operator><name pos:start="71:46" pos:end="71:47">id</name> <operator pos:start="71:49" pos:end="71:50">&lt;&lt;</operator> <literal type="number" pos:start="71:52" pos:end="71:53">32</literal></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if> <if type="elseif" pos:start="73:11" pos:end="150:16">else if <condition pos:start="73:19" pos:end="73:23">(<expr pos:start="73:20" pos:end="73:22"><name pos:start="73:20" pos:end="73:22">usb</name></expr>)</condition> <block pos:start="73:25" pos:end="150:16">{<block_content pos:start="83:13" pos:end="150:16">

            <comment type="block" pos:start="75:13" pos:end="81:15">/*

             * We use SRP luns of the form 01000000 | (usb-port &lt;&lt; 16) | lun

             * in the top 32 bits of the 64-bit LUN

             */</comment>

            <decl_stmt pos:start="83:13" pos:end="83:54"><decl pos:start="83:13" pos:end="83:53"><type pos:start="83:13" pos:end="83:20"><name pos:start="83:13" pos:end="83:20">unsigned</name></type> <name pos:start="83:22" pos:end="83:29">usb_port</name> <init pos:start="83:31" pos:end="83:53">= <expr pos:start="83:33" pos:end="83:53"><call pos:start="83:33" pos:end="83:53"><name pos:start="83:33" pos:end="83:36">atoi</name><argument_list pos:start="83:37" pos:end="83:53">(<argument pos:start="83:38" pos:end="83:52"><expr pos:start="83:38" pos:end="83:52"><name pos:start="83:38" pos:end="83:52"><name pos:start="83:38" pos:end="83:40">usb</name><operator pos:start="83:41" pos:end="83:42">-&gt;</operator><name pos:start="83:43" pos:end="83:46">port</name><operator pos:start="83:47" pos:end="83:48">-&gt;</operator><name pos:start="83:49" pos:end="83:52">path</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="85:13" pos:end="85:64"><decl pos:start="85:13" pos:end="85:63"><type pos:start="85:13" pos:end="85:20"><name pos:start="85:13" pos:end="85:20">unsigned</name></type> <name pos:start="85:22" pos:end="85:23">id</name> <init pos:start="85:25" pos:end="85:63">= <expr pos:start="85:27" pos:end="85:63"><literal type="number" pos:start="85:27" pos:end="85:35">0x1000000</literal> <operator pos:start="85:37" pos:end="85:37">|</operator> <operator pos:start="85:39" pos:end="85:39">(</operator><name pos:start="85:40" pos:end="85:47">usb_port</name> <operator pos:start="85:49" pos:end="85:50">&lt;&lt;</operator> <literal type="number" pos:start="85:52" pos:end="85:53">16</literal><operator pos:start="85:54" pos:end="85:54">)</operator> <operator pos:start="85:56" pos:end="85:56">|</operator> <name pos:start="85:58" pos:end="85:63"><name pos:start="85:58" pos:end="85:58">d</name><operator pos:start="85:59" pos:end="85:60">-&gt;</operator><name pos:start="85:61" pos:end="85:63">lun</name></name></expr></init></decl>;</decl_stmt>

            <return pos:start="87:13" pos:end="89:55">return <expr pos:start="87:20" pos:end="89:54"><call pos:start="87:20" pos:end="89:54"><name pos:start="87:20" pos:end="87:34">g_strdup_printf</name><argument_list pos:start="87:35" pos:end="89:54">(<argument pos:start="87:36" pos:end="87:47"><expr pos:start="87:36" pos:end="87:47"><literal type="string" pos:start="87:36" pos:end="87:41">"%s@%"</literal><name pos:start="87:42" pos:end="87:47">PRIX64</name></expr></argument>, <argument pos:start="87:50" pos:end="87:66"><expr pos:start="87:50" pos:end="87:66"><call pos:start="87:50" pos:end="87:66"><name pos:start="87:50" pos:end="87:61">qdev_fw_name</name><argument_list pos:start="87:62" pos:end="87:66">(<argument pos:start="87:63" pos:end="87:65"><expr pos:start="87:63" pos:end="87:65"><name pos:start="87:63" pos:end="87:65">dev</name></expr></argument>)</argument_list></call></expr></argument>,

                                   <argument pos:start="89:36" pos:end="89:53"><expr pos:start="89:36" pos:end="89:53"><operator pos:start="89:36" pos:end="89:36">(</operator><name pos:start="89:37" pos:end="89:44">uint64_t</name><operator pos:start="89:45" pos:end="89:45">)</operator><name pos:start="89:46" pos:end="89:47">id</name> <operator pos:start="89:49" pos:end="89:50">&lt;&lt;</operator> <literal type="number" pos:start="89:52" pos:end="89:53">32</literal></expr></argument>)</argument_list></call></expr>;</return>





    <comment type="block" pos:start="95:5" pos:end="105:7">/*

     * SLOF probes the USB devices, and if it recognizes that the device is a

     * storage device, it changes its name to "storage" instead of "usb-host",

     * and additionally adds a child node for the SCSI LUN, so the correct

     * boot path in SLOF is something like .../storage@1/disk@xxx" instead.

     */</comment>

    <if_stmt pos:start="107:5" pos:end="150:16"><if pos:start="107:5" pos:end="150:16">if <condition pos:start="107:8" pos:end="107:51">(<expr pos:start="107:9" pos:end="107:50"><call pos:start="107:9" pos:end="107:45"><name pos:start="107:9" pos:end="107:14">strcmp</name><argument_list pos:start="107:15" pos:end="107:45">(<argument pos:start="107:16" pos:end="107:25"><expr pos:start="107:16" pos:end="107:25"><literal type="string" pos:start="107:16" pos:end="107:25">"usb-host"</literal></expr></argument>, <argument pos:start="107:28" pos:end="107:44"><expr pos:start="107:28" pos:end="107:44"><call pos:start="107:28" pos:end="107:44"><name pos:start="107:28" pos:end="107:39">qdev_fw_name</name><argument_list pos:start="107:40" pos:end="107:44">(<argument pos:start="107:41" pos:end="107:43"><expr pos:start="107:41" pos:end="107:43"><name pos:start="107:41" pos:end="107:43">dev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator pos:start="107:47" pos:end="107:48">==</operator> <literal type="number" pos:start="107:50" pos:end="107:50">0</literal></expr>)</condition> <block pos:start="107:53" pos:end="150:16">{<block_content pos:start="109:9" pos:end="150:16">

        <decl_stmt pos:start="109:9" pos:end="109:66"><decl pos:start="109:9" pos:end="109:65"><type pos:start="109:9" pos:end="109:19"><name pos:start="109:9" pos:end="109:17">USBDevice</name> <modifier pos:start="109:19" pos:end="109:19">*</modifier></type><name pos:start="109:20" pos:end="109:25">usbdev</name> <init pos:start="109:27" pos:end="109:65">= <expr pos:start="109:29" pos:end="109:65"><call pos:start="109:29" pos:end="109:65"><name pos:start="109:29" pos:end="109:32">CAST</name><argument_list pos:start="109:33" pos:end="109:65">(<argument pos:start="109:34" pos:end="109:42"><expr pos:start="109:34" pos:end="109:42"><name pos:start="109:34" pos:end="109:42">USBDevice</name></expr></argument>, <argument pos:start="109:45" pos:end="109:47"><expr pos:start="109:45" pos:end="109:47"><name pos:start="109:45" pos:end="109:47">dev</name></expr></argument>, <argument pos:start="109:50" pos:end="109:64"><expr pos:start="109:50" pos:end="109:64"><name pos:start="109:50" pos:end="109:64">TYPE_USB_DEVICE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="111:9" pos:end="150:16"><if pos:start="111:9" pos:end="150:16">if <condition pos:start="111:12" pos:end="111:49">(<expr pos:start="111:13" pos:end="111:48"><call pos:start="111:13" pos:end="111:48"><name pos:start="111:13" pos:end="111:40">usb_host_dev_is_scsi_storage</name><argument_list pos:start="111:41" pos:end="111:48">(<argument pos:start="111:42" pos:end="111:47"><expr pos:start="111:42" pos:end="111:47"><name pos:start="111:42" pos:end="111:47">usbdev</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="111:51" pos:end="150:16">{<block_content pos:start="113:13" pos:end="150:16">

            <return pos:start="113:13" pos:end="113:74">return <expr pos:start="113:20" pos:end="113:73"><call pos:start="113:20" pos:end="113:73"><name pos:start="113:20" pos:end="113:34">g_strdup_printf</name><argument_list pos:start="113:35" pos:end="113:73">(<argument pos:start="113:36" pos:end="113:52"><expr pos:start="113:36" pos:end="113:52"><literal type="string" pos:start="113:36" pos:end="113:52">"storage@%s/disk"</literal></expr></argument>, <argument pos:start="113:55" pos:end="113:72"><expr pos:start="113:55" pos:end="113:72"><name pos:start="113:55" pos:end="113:72"><name pos:start="113:55" pos:end="113:60">usbdev</name><operator pos:start="113:61" pos:end="113:62">-&gt;</operator><name pos:start="113:63" pos:end="113:66">port</name><operator pos:start="113:67" pos:end="113:68">-&gt;</operator><name pos:start="113:69" pos:end="113:72">path</name></name></expr></argument>)</argument_list></call></expr>;</return>





    <if_stmt pos:start="119:5" pos:end="150:16"><if pos:start="119:5" pos:end="150:16">if <condition pos:start="119:8" pos:end="119:12">(<expr pos:start="119:9" pos:end="119:11"><name pos:start="119:9" pos:end="119:11">phb</name></expr>)</condition> <block pos:start="119:14" pos:end="150:16">{<block_content pos:start="123:9" pos:end="150:16">

        <comment type="block" pos:start="121:9" pos:end="121:54">/* Replace "pci" with "pci@800000020000000" */</comment>

        <return pos:start="123:9" pos:end="123:57">return <expr pos:start="123:16" pos:end="123:56"><call pos:start="123:16" pos:end="123:56"><name pos:start="123:16" pos:end="123:30">g_strdup_printf</name><argument_list pos:start="123:31" pos:end="123:56">(<argument pos:start="123:32" pos:end="123:44"><expr pos:start="123:32" pos:end="123:44"><literal type="string" pos:start="123:32" pos:end="123:38">"pci@%"</literal><name pos:start="123:39" pos:end="123:44">PRIX64</name></expr></argument>, <argument pos:start="123:47" pos:end="123:55"><expr pos:start="123:47" pos:end="123:55"><name pos:start="123:47" pos:end="123:55"><name pos:start="123:47" pos:end="123:49">phb</name><operator pos:start="123:50" pos:end="123:51">-&gt;</operator><name pos:start="123:52" pos:end="123:55">buid</name></name></expr></argument>)</argument_list></call></expr>;</return>




    <if_stmt pos:start="128:5" pos:end="150:16"><if pos:start="128:5" pos:end="150:16">if <condition pos:start="128:8" pos:end="128:12">(<expr pos:start="128:9" pos:end="128:11"><name pos:start="128:9" pos:end="128:11">vsc</name></expr>)</condition> <block pos:start="128:14" pos:end="150:16">{<block_content pos:start="132:9" pos:end="150:16">

        <comment type="block" pos:start="130:9" pos:end="130:40">/* Same logic as virtio above */</comment>

        <decl_stmt pos:start="132:9" pos:end="132:65"><decl pos:start="132:9" pos:end="132:64"><type pos:start="132:9" pos:end="132:16"><name pos:start="132:9" pos:end="132:16">unsigned</name></type> <name pos:start="132:18" pos:end="132:19">id</name> <init pos:start="132:21" pos:end="132:64">= <expr pos:start="132:23" pos:end="132:64"><literal type="number" pos:start="132:23" pos:end="132:31">0x1000000</literal> <operator pos:start="132:33" pos:end="132:33">|</operator> <operator pos:start="132:35" pos:end="132:35">(</operator><name pos:start="132:36" pos:end="132:46"><name pos:start="132:36" pos:end="132:38">vsc</name><operator pos:start="132:39" pos:end="132:40">-&gt;</operator><name pos:start="132:41" pos:end="132:46">target</name></name> <operator pos:start="132:48" pos:end="132:49">&lt;&lt;</operator> <literal type="number" pos:start="132:51" pos:end="132:52">16</literal><operator pos:start="132:53" pos:end="132:53">)</operator> <operator pos:start="132:55" pos:end="132:55">|</operator> <name pos:start="132:57" pos:end="132:64"><name pos:start="132:57" pos:end="132:59">vsc</name><operator pos:start="132:60" pos:end="132:61">-&gt;</operator><name pos:start="132:62" pos:end="132:64">lun</name></name></expr></init></decl>;</decl_stmt>

        <return pos:start="134:9" pos:end="134:67">return <expr pos:start="134:16" pos:end="134:66"><call pos:start="134:16" pos:end="134:66"><name pos:start="134:16" pos:end="134:30">g_strdup_printf</name><argument_list pos:start="134:31" pos:end="134:66">(<argument pos:start="134:32" pos:end="134:45"><expr pos:start="134:32" pos:end="134:45"><literal type="string" pos:start="134:32" pos:end="134:39">"disk@%"</literal><name pos:start="134:40" pos:end="134:45">PRIX64</name></expr></argument>, <argument pos:start="134:48" pos:end="134:65"><expr pos:start="134:48" pos:end="134:65"><operator pos:start="134:48" pos:end="134:48">(</operator><name pos:start="134:49" pos:end="134:56">uint64_t</name><operator pos:start="134:57" pos:end="134:57">)</operator><name pos:start="134:58" pos:end="134:59">id</name> <operator pos:start="134:61" pos:end="134:62">&lt;&lt;</operator> <literal type="number" pos:start="134:64" pos:end="134:65">32</literal></expr></argument>)</argument_list></call></expr>;</return>




    <if_stmt pos:start="139:5" pos:end="150:16"><if pos:start="139:5" pos:end="150:16">if <condition pos:start="139:8" pos:end="139:53">(<expr pos:start="139:9" pos:end="139:52"><call pos:start="139:9" pos:end="139:52"><name pos:start="139:9" pos:end="139:19">g_str_equal</name><argument_list pos:start="139:20" pos:end="139:52">(<argument pos:start="139:21" pos:end="139:32"><expr pos:start="139:21" pos:end="139:32"><literal type="string" pos:start="139:21" pos:end="139:32">"pci-bridge"</literal></expr></argument>, <argument pos:start="139:35" pos:end="139:51"><expr pos:start="139:35" pos:end="139:51"><call pos:start="139:35" pos:end="139:51"><name pos:start="139:35" pos:end="139:46">qdev_fw_name</name><argument_list pos:start="139:47" pos:end="139:51">(<argument pos:start="139:48" pos:end="139:50"><expr pos:start="139:48" pos:end="139:50"><name pos:start="139:48" pos:end="139:50">dev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="139:55" pos:end="150:16">{<block_content pos:start="143:9" pos:end="150:16">

        <comment type="block" pos:start="141:9" pos:end="141:69">/* SLOF uses "pci" instead of "pci-bridge" for PCI bridges */</comment>

        <decl_stmt pos:start="143:9" pos:end="143:66"><decl pos:start="143:9" pos:end="143:65"><type pos:start="143:9" pos:end="143:19"><name pos:start="143:9" pos:end="143:17">PCIDevice</name> <modifier pos:start="143:19" pos:end="143:19">*</modifier></type><name pos:start="143:20" pos:end="143:25">pcidev</name> <init pos:start="143:27" pos:end="143:65">= <expr pos:start="143:29" pos:end="143:65"><call pos:start="143:29" pos:end="143:65"><name pos:start="143:29" pos:end="143:32">CAST</name><argument_list pos:start="143:33" pos:end="143:65">(<argument pos:start="143:34" pos:end="143:42"><expr pos:start="143:34" pos:end="143:42"><name pos:start="143:34" pos:end="143:42">PCIDevice</name></expr></argument>, <argument pos:start="143:45" pos:end="143:47"><expr pos:start="143:45" pos:end="143:47"><name pos:start="143:45" pos:end="143:47">dev</name></expr></argument>, <argument pos:start="143:50" pos:end="143:64"><expr pos:start="143:50" pos:end="143:64"><name pos:start="143:50" pos:end="143:64">TYPE_PCI_DEVICE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return pos:start="145:9" pos:end="145:66">return <expr pos:start="145:16" pos:end="145:65"><call pos:start="145:16" pos:end="145:65"><name pos:start="145:16" pos:end="145:30">g_strdup_printf</name><argument_list pos:start="145:31" pos:end="145:65">(<argument pos:start="145:32" pos:end="145:39"><expr pos:start="145:32" pos:end="145:39"><literal type="string" pos:start="145:32" pos:end="145:39">"pci@%x"</literal></expr></argument>, <argument pos:start="145:42" pos:end="145:64"><expr pos:start="145:42" pos:end="145:64"><call pos:start="145:42" pos:end="145:64"><name pos:start="145:42" pos:end="145:49">PCI_SLOT</name><argument_list pos:start="145:50" pos:end="145:64">(<argument pos:start="145:51" pos:end="145:63"><expr pos:start="145:51" pos:end="145:63"><name pos:start="145:51" pos:end="145:63"><name pos:start="145:51" pos:end="145:56">pcidev</name><operator pos:start="145:57" pos:end="145:58">-&gt;</operator><name pos:start="145:59" pos:end="145:63">devfn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>




    <return pos:start="150:5" pos:end="150:16">return <expr pos:start="150:12" pos:end="150:15"><name pos:start="150:12" pos:end="150:15">NULL</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function>
</unit>
