<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6671.c" pos:tabs="8"><function pos:start="1:1" pos:end="256:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:21">tlb_set_page_exec</name><parameter_list pos:start="1:22" pos:end="5:50">(<parameter pos:start="1:23" pos:end="1:35"><decl pos:start="1:23" pos:end="1:35"><type pos:start="1:23" pos:end="1:35"><name pos:start="1:23" pos:end="1:30">CPUState</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:35">env</name></decl></parameter>, <parameter pos:start="1:38" pos:end="1:55"><decl pos:start="1:38" pos:end="1:55"><type pos:start="1:38" pos:end="1:55"><name pos:start="1:38" pos:end="1:49">target_ulong</name></type> <name pos:start="1:51" pos:end="1:55">vaddr</name></decl></parameter>, 

                      <parameter pos:start="3:23" pos:end="3:46"><decl pos:start="3:23" pos:end="3:46"><type pos:start="3:23" pos:end="3:46"><name pos:start="3:23" pos:end="3:40">target_phys_addr_t</name></type> <name pos:start="3:42" pos:end="3:46">paddr</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:56"><decl pos:start="3:49" pos:end="3:56"><type pos:start="3:49" pos:end="3:56"><name pos:start="3:49" pos:end="3:51">int</name></type> <name pos:start="3:53" pos:end="3:56">prot</name></decl></parameter>, 

                      <parameter pos:start="5:23" pos:end="5:33"><decl pos:start="5:23" pos:end="5:33"><type pos:start="5:23" pos:end="5:33"><name pos:start="5:23" pos:end="5:25">int</name></type> <name pos:start="5:27" pos:end="5:33">is_user</name></decl></parameter>, <parameter pos:start="5:36" pos:end="5:49"><decl pos:start="5:36" pos:end="5:49"><type pos:start="5:36" pos:end="5:49"><name pos:start="5:36" pos:end="5:38">int</name></type> <name pos:start="5:40" pos:end="5:49">is_softmmu</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="256:1">{<block_content pos:start="9:5" pos:end="254:15">

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">PhysPageDesc</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:19">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:17">long</name></type> <name pos:start="11:19" pos:end="11:20">pd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:12">unsigned</name> <name pos:start="13:14" pos:end="13:16">int</name></type> <name pos:start="13:18" pos:end="13:22">index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:25"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:16">target_ulong</name></type> <name pos:start="15:18" pos:end="15:24">address</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:30"><decl pos:start="17:5" pos:end="17:29"><type pos:start="17:5" pos:end="17:22"><name pos:start="17:5" pos:end="17:22">target_phys_addr_t</name></type> <name pos:start="17:24" pos:end="17:29">addend</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:12"><decl pos:start="19:5" pos:end="19:11"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:20"><decl pos:start="21:5" pos:end="21:19"><type pos:start="21:5" pos:end="21:17"><name pos:start="21:5" pos:end="21:15">CPUTLBEntry</name> <modifier pos:start="21:17" pos:end="21:17">*</modifier></type><name pos:start="21:18" pos:end="21:19">te</name></decl>;</decl_stmt>




    <expr_stmt pos:start="26:5" pos:end="26:50"><expr pos:start="26:5" pos:end="26:49"><name pos:start="26:5" pos:end="26:5">p</name> <operator pos:start="26:7" pos:end="26:7">=</operator> <call pos:start="26:9" pos:end="26:49"><name pos:start="26:9" pos:end="26:22">phys_page_find</name><argument_list pos:start="26:23" pos:end="26:49">(<argument pos:start="26:24" pos:end="26:48"><expr pos:start="26:24" pos:end="26:48"><name pos:start="26:24" pos:end="26:28">paddr</name> <operator pos:start="26:30" pos:end="26:31">&gt;&gt;</operator> <name pos:start="26:33" pos:end="26:48">TARGET_PAGE_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="28:5" pos:end="39:0"><if pos:start="28:5" pos:end="32:5">if <condition pos:start="28:8" pos:end="28:11">(<expr pos:start="28:9" pos:end="28:10"><operator pos:start="28:9" pos:end="28:9">!</operator><name pos:start="28:10" pos:end="28:10">p</name></expr>)</condition> <block pos:start="28:13" pos:end="32:5">{<block_content pos:start="30:9" pos:end="30:31">

        <expr_stmt pos:start="30:9" pos:end="30:31"><expr pos:start="30:9" pos:end="30:30"><name pos:start="30:9" pos:end="30:10">pd</name> <operator pos:start="30:12" pos:end="30:12">=</operator> <name pos:start="30:14" pos:end="30:30">IO_MEM_UNASSIGNED</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="32:7" pos:end="39:0">else <block pos:start="32:12" pos:end="39:0">{<block_content pos:start="34:9" pos:end="34:28">

        <expr_stmt pos:start="34:9" pos:end="34:28"><expr pos:start="34:9" pos:end="34:27"><name pos:start="34:9" pos:end="34:10">pd</name> <operator pos:start="34:12" pos:end="34:12">=</operator> <name pos:start="34:14" pos:end="34:27"><name pos:start="34:14" pos:end="34:14">p</name><operator pos:start="34:15" pos:end="34:16">-&gt;</operator><name pos:start="34:17" pos:end="34:27">phys_offset</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

<cpp:if pos:start="38:1" pos:end="38:22">#<cpp:directive pos:start="38:2" pos:end="38:3">if</cpp:directive> <expr pos:start="38:5" pos:end="38:22"><call pos:start="38:5" pos:end="38:22"><name pos:start="38:5" pos:end="38:11">defined</name><argument_list pos:start="38:12" pos:end="38:22">(<argument pos:start="38:13" pos:end="38:21"><expr pos:start="38:13" pos:end="38:21"><name pos:start="38:13" pos:end="38:21">DEBUG_TLB</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="40:5" pos:end="45:0"><expr pos:start="40:5" pos:end="42:60"><call pos:start="40:5" pos:end="42:60"><name pos:start="40:5" pos:end="40:10">printf</name><argument_list pos:start="40:11" pos:end="42:60">(<argument pos:start="40:12" pos:end="40:97"><expr pos:start="40:12" pos:end="40:97"><literal type="string" pos:start="40:12" pos:end="40:33">"tlb_set_page: vaddr="</literal> <name pos:start="40:35" pos:end="40:47">TARGET_FMT_lx</name> <literal type="string" pos:start="40:49" pos:end="40:97">" paddr=0x%08x prot=%x u=%d smmu=%d pd=0x%08lx\n"</literal></expr></argument>,

           <argument pos:start="42:12" pos:end="42:16"><expr pos:start="42:12" pos:end="42:16"><name pos:start="42:12" pos:end="42:16">vaddr</name></expr></argument>, <argument pos:start="42:19" pos:end="42:28"><expr pos:start="42:19" pos:end="42:28"><operator pos:start="42:19" pos:end="42:19">(</operator><name pos:start="42:20" pos:end="42:22">int</name><operator pos:start="42:23" pos:end="42:23">)</operator><name pos:start="42:24" pos:end="42:28">paddr</name></expr></argument>, <argument pos:start="42:31" pos:end="42:34"><expr pos:start="42:31" pos:end="42:34"><name pos:start="42:31" pos:end="42:34">prot</name></expr></argument>, <argument pos:start="42:37" pos:end="42:43"><expr pos:start="42:37" pos:end="42:43"><name pos:start="42:37" pos:end="42:43">is_user</name></expr></argument>, <argument pos:start="42:46" pos:end="42:55"><expr pos:start="42:46" pos:end="42:55"><name pos:start="42:46" pos:end="42:55">is_softmmu</name></expr></argument>, <argument pos:start="42:58" pos:end="42:59"><expr pos:start="42:58" pos:end="42:59"><name pos:start="42:58" pos:end="42:59">pd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="44:1" pos:end="44:6">#<cpp:directive pos:start="44:2" pos:end="44:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="48:5" pos:end="51:0"><expr pos:start="48:5" pos:end="48:11"><name pos:start="48:5" pos:end="48:7">ret</name> <operator pos:start="48:9" pos:end="48:9">=</operator> <literal type="number" pos:start="48:11" pos:end="48:11">0</literal></expr>;</expr_stmt>

<cpp:if pos:start="50:1" pos:end="50:28">#<cpp:directive pos:start="50:2" pos:end="50:3">if</cpp:directive> <expr pos:start="50:5" pos:end="50:28"><operator pos:start="50:5" pos:end="50:5">!</operator><call pos:start="50:6" pos:end="50:28"><name pos:start="50:6" pos:end="50:12">defined</name><argument_list pos:start="50:13" pos:end="50:28">(<argument pos:start="50:14" pos:end="50:27"><expr pos:start="50:14" pos:end="50:27"><name pos:start="50:14" pos:end="50:27">CONFIG_SOFTMMU</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <if_stmt pos:start="52:5" pos:end="253:0"><if pos:start="52:5" pos:end="171:0">if <condition pos:start="52:8" pos:end="55:0">(<expr pos:start="52:9" pos:end="52:18"><name pos:start="52:9" pos:end="52:18">is_softmmu</name></expr>)</condition> 

<cpp:endif pos:start="54:1" pos:end="54:6">#<cpp:directive pos:start="54:2" pos:end="54:6">endif</cpp:directive></cpp:endif>

    <block pos:start="56:5" pos:end="171:0">{<block_content pos:start="58:9" pos:end="166:9">

        <if_stmt pos:start="58:9" pos:end="74:9"><if pos:start="58:9" pos:end="66:9">if <condition pos:start="58:12" pos:end="58:73">(<expr pos:start="58:13" pos:end="58:72"><operator pos:start="58:13" pos:end="58:13">(</operator><name pos:start="58:14" pos:end="58:15">pd</name> <operator pos:start="58:17" pos:end="58:17">&amp;</operator> <operator pos:start="58:19" pos:end="58:19">~</operator><name pos:start="58:20" pos:end="58:35">TARGET_PAGE_MASK</name><operator pos:start="58:36" pos:end="58:36">)</operator> <operator pos:start="58:38" pos:end="58:38">&gt;</operator> <name pos:start="58:40" pos:end="58:49">IO_MEM_ROM</name> <operator pos:start="58:51" pos:end="58:52">&amp;&amp;</operator> <operator pos:start="58:54" pos:end="58:54">!</operator><operator pos:start="58:55" pos:end="58:55">(</operator><name pos:start="58:56" pos:end="58:57">pd</name> <operator pos:start="58:59" pos:end="58:59">&amp;</operator> <name pos:start="58:61" pos:end="58:71">IO_MEM_ROMD</name><operator pos:start="58:72" pos:end="58:72">)</operator></expr>)</condition> <block pos:start="58:75" pos:end="66:9">{<block_content pos:start="62:13" pos:end="64:27">

            <comment type="block" pos:start="60:13" pos:end="60:32">/* IO memory case */</comment>

            <expr_stmt pos:start="62:13" pos:end="62:33"><expr pos:start="62:13" pos:end="62:32"><name pos:start="62:13" pos:end="62:19">address</name> <operator pos:start="62:21" pos:end="62:21">=</operator> <name pos:start="62:23" pos:end="62:27">vaddr</name> <operator pos:start="62:29" pos:end="62:29">|</operator> <name pos:start="62:31" pos:end="62:32">pd</name></expr>;</expr_stmt>

            <expr_stmt pos:start="64:13" pos:end="64:27"><expr pos:start="64:13" pos:end="64:26"><name pos:start="64:13" pos:end="64:18">addend</name> <operator pos:start="64:20" pos:end="64:20">=</operator> <name pos:start="64:22" pos:end="64:26">paddr</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="66:11" pos:end="74:9">else <block pos:start="66:16" pos:end="74:9">{<block_content pos:start="70:13" pos:end="72:76">

            <comment type="block" pos:start="68:13" pos:end="68:33">/* standard memory */</comment>

            <expr_stmt pos:start="70:13" pos:end="70:28"><expr pos:start="70:13" pos:end="70:27"><name pos:start="70:13" pos:end="70:19">address</name> <operator pos:start="70:21" pos:end="70:21">=</operator> <name pos:start="70:23" pos:end="70:27">vaddr</name></expr>;</expr_stmt>

            <expr_stmt pos:start="72:13" pos:end="72:76"><expr pos:start="72:13" pos:end="72:75"><name pos:start="72:13" pos:end="72:18">addend</name> <operator pos:start="72:20" pos:end="72:20">=</operator> <operator pos:start="72:22" pos:end="72:22">(</operator><name pos:start="72:23" pos:end="72:30">unsigned</name> <name pos:start="72:32" pos:end="72:35">long</name><operator pos:start="72:36" pos:end="72:36">)</operator><name pos:start="72:37" pos:end="72:49">phys_ram_base</name> <operator pos:start="72:51" pos:end="72:51">+</operator> <operator pos:start="72:53" pos:end="72:53">(</operator><name pos:start="72:54" pos:end="72:55">pd</name> <operator pos:start="72:57" pos:end="72:57">&amp;</operator> <name pos:start="72:59" pos:end="72:74">TARGET_PAGE_MASK</name><operator pos:start="72:75" pos:end="72:75">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <comment type="block" pos:start="78:9" pos:end="80:40">/* Make accesses to pages with watchpoints go via the

           watchpoint trap routines.  */</comment>

        <for pos:start="82:9" pos:end="106:9">for <control pos:start="82:13" pos:end="82:49">(<init pos:start="82:14" pos:end="82:19"><expr pos:start="82:14" pos:end="82:18"><name pos:start="82:14" pos:end="82:14">i</name> <operator pos:start="82:16" pos:end="82:16">=</operator> <literal type="number" pos:start="82:18" pos:end="82:18">0</literal></expr>;</init> <condition pos:start="82:21" pos:end="82:44"><expr pos:start="82:21" pos:end="82:43"><name pos:start="82:21" pos:end="82:21">i</name> <operator pos:start="82:23" pos:end="82:23">&lt;</operator> <name pos:start="82:25" pos:end="82:43"><name pos:start="82:25" pos:end="82:27">env</name><operator pos:start="82:28" pos:end="82:29">-&gt;</operator><name pos:start="82:30" pos:end="82:43">nb_watchpoints</name></name></expr>;</condition> <incr pos:start="82:46" pos:end="82:48"><expr pos:start="82:46" pos:end="82:48"><name pos:start="82:46" pos:end="82:46">i</name><operator pos:start="82:47" pos:end="82:48">++</operator></expr></incr>)</control> <block pos:start="82:51" pos:end="106:9">{<block_content pos:start="84:13" pos:end="104:13">

            <if_stmt pos:start="84:13" pos:end="104:13"><if pos:start="84:13" pos:end="104:13">if <condition pos:start="84:16" pos:end="84:71">(<expr pos:start="84:17" pos:end="84:70"><name pos:start="84:17" pos:end="84:21">vaddr</name> <operator pos:start="84:23" pos:end="84:24">==</operator> <operator pos:start="84:26" pos:end="84:26">(</operator><name pos:start="84:27" pos:end="84:44"><name pos:start="84:27" pos:end="84:29">env</name><operator pos:start="84:30" pos:end="84:31">-&gt;</operator><name pos:start="84:32" pos:end="84:41">watchpoint</name><index pos:start="84:42" pos:end="84:44">[<expr pos:start="84:43" pos:end="84:43"><name pos:start="84:43" pos:end="84:43">i</name></expr>]</index></name><operator pos:start="84:45" pos:end="84:45">.</operator><name pos:start="84:46" pos:end="84:50">vaddr</name> <operator pos:start="84:52" pos:end="84:52">&amp;</operator> <name pos:start="84:54" pos:end="84:69">TARGET_PAGE_MASK</name><operator pos:start="84:70" pos:end="84:70">)</operator></expr>)</condition> <block pos:start="84:73" pos:end="104:13">{<block_content pos:start="86:17" pos:end="102:17">

                <if_stmt pos:start="86:17" pos:end="102:17"><if pos:start="86:17" pos:end="92:17">if <condition pos:start="86:20" pos:end="86:48">(<expr pos:start="86:21" pos:end="86:47"><name pos:start="86:21" pos:end="86:27">address</name> <operator pos:start="86:29" pos:end="86:29">&amp;</operator> <operator pos:start="86:31" pos:end="86:31">~</operator><name pos:start="86:32" pos:end="86:47">TARGET_PAGE_MASK</name></expr>)</condition> <block pos:start="86:50" pos:end="92:17">{<block_content pos:start="88:21" pos:end="90:51">

                    <expr_stmt pos:start="88:21" pos:end="88:50"><expr pos:start="88:21" pos:end="88:49"><name pos:start="88:21" pos:end="88:38"><name pos:start="88:21" pos:end="88:23">env</name><operator pos:start="88:24" pos:end="88:25">-&gt;</operator><name pos:start="88:26" pos:end="88:35">watchpoint</name><index pos:start="88:36" pos:end="88:38">[<expr pos:start="88:37" pos:end="88:37"><name pos:start="88:37" pos:end="88:37">i</name></expr>]</index></name><operator pos:start="88:39" pos:end="88:39">.</operator><name pos:start="88:40" pos:end="88:45">is_ram</name> <operator pos:start="88:47" pos:end="88:47">=</operator> <literal type="number" pos:start="88:49" pos:end="88:49">0</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="90:21" pos:end="90:51"><expr pos:start="90:21" pos:end="90:50"><name pos:start="90:21" pos:end="90:27">address</name> <operator pos:start="90:29" pos:end="90:29">=</operator> <name pos:start="90:31" pos:end="90:35">vaddr</name> <operator pos:start="90:37" pos:end="90:37">|</operator> <name pos:start="90:39" pos:end="90:50">io_mem_watch</name></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="92:19" pos:end="102:17">else <block pos:start="92:24" pos:end="102:17">{<block_content pos:start="94:21" pos:end="100:78">

                    <expr_stmt pos:start="94:21" pos:end="94:50"><expr pos:start="94:21" pos:end="94:49"><name pos:start="94:21" pos:end="94:38"><name pos:start="94:21" pos:end="94:23">env</name><operator pos:start="94:24" pos:end="94:25">-&gt;</operator><name pos:start="94:26" pos:end="94:35">watchpoint</name><index pos:start="94:36" pos:end="94:38">[<expr pos:start="94:37" pos:end="94:37"><name pos:start="94:37" pos:end="94:37">i</name></expr>]</index></name><operator pos:start="94:39" pos:end="94:39">.</operator><name pos:start="94:40" pos:end="94:45">is_ram</name> <operator pos:start="94:47" pos:end="94:47">=</operator> <literal type="number" pos:start="94:49" pos:end="94:49">1</literal></expr>;</expr_stmt>

                    <comment type="block" pos:start="96:21" pos:end="98:37">/* TODO: Figure out how to make read watchpoints coexist

                       with code.  */</comment>

                    <expr_stmt pos:start="100:21" pos:end="100:78"><expr pos:start="100:21" pos:end="100:77"><name pos:start="100:21" pos:end="100:22">pd</name> <operator pos:start="100:24" pos:end="100:24">=</operator> <operator pos:start="100:26" pos:end="100:26">(</operator><name pos:start="100:27" pos:end="100:28">pd</name> <operator pos:start="100:30" pos:end="100:30">&amp;</operator> <name pos:start="100:32" pos:end="100:47">TARGET_PAGE_MASK</name><operator pos:start="100:48" pos:end="100:48">)</operator> <operator pos:start="100:50" pos:end="100:50">|</operator> <name pos:start="100:52" pos:end="100:63">io_mem_watch</name> <operator pos:start="100:65" pos:end="100:65">|</operator> <name pos:start="100:67" pos:end="100:77">IO_MEM_ROMD</name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        

        <expr_stmt pos:start="110:9" pos:end="110:65"><expr pos:start="110:9" pos:end="110:64"><name pos:start="110:9" pos:end="110:13">index</name> <operator pos:start="110:15" pos:end="110:15">=</operator> <operator pos:start="110:17" pos:end="110:17">(</operator><name pos:start="110:18" pos:end="110:22">vaddr</name> <operator pos:start="110:24" pos:end="110:25">&gt;&gt;</operator> <name pos:start="110:27" pos:end="110:42">TARGET_PAGE_BITS</name><operator pos:start="110:43" pos:end="110:43">)</operator> <operator pos:start="110:45" pos:end="110:45">&amp;</operator> <operator pos:start="110:47" pos:end="110:47">(</operator><name pos:start="110:48" pos:end="110:59">CPU_TLB_SIZE</name> <operator pos:start="110:61" pos:end="110:61">-</operator> <literal type="number" pos:start="110:63" pos:end="110:63">1</literal><operator pos:start="110:64" pos:end="110:64">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="112:9" pos:end="112:24"><expr pos:start="112:9" pos:end="112:23"><name pos:start="112:9" pos:end="112:14">addend</name> <operator pos:start="112:16" pos:end="112:17">-=</operator> <name pos:start="112:19" pos:end="112:23">vaddr</name></expr>;</expr_stmt>

        <expr_stmt pos:start="114:9" pos:end="114:45"><expr pos:start="114:9" pos:end="114:44"><name pos:start="114:9" pos:end="114:10">te</name> <operator pos:start="114:12" pos:end="114:12">=</operator> <operator pos:start="114:14" pos:end="114:14">&amp;</operator><name pos:start="114:15" pos:end="114:44"><name pos:start="114:15" pos:end="114:17">env</name><operator pos:start="114:18" pos:end="114:19">-&gt;</operator><name pos:start="114:20" pos:end="114:28">tlb_table</name><index pos:start="114:29" pos:end="114:37">[<expr pos:start="114:30" pos:end="114:36"><name pos:start="114:30" pos:end="114:36">is_user</name></expr>]</index><index pos:start="114:38" pos:end="114:44">[<expr pos:start="114:39" pos:end="114:43"><name pos:start="114:39" pos:end="114:43">index</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="116:9" pos:end="116:28"><expr pos:start="116:9" pos:end="116:27"><name pos:start="116:9" pos:end="116:18"><name pos:start="116:9" pos:end="116:10">te</name><operator pos:start="116:11" pos:end="116:12">-&gt;</operator><name pos:start="116:13" pos:end="116:18">addend</name></name> <operator pos:start="116:20" pos:end="116:20">=</operator> <name pos:start="116:22" pos:end="116:27">addend</name></expr>;</expr_stmt>

        <if_stmt pos:start="118:9" pos:end="126:9"><if pos:start="118:9" pos:end="122:9">if <condition pos:start="118:12" pos:end="118:29">(<expr pos:start="118:13" pos:end="118:28"><name pos:start="118:13" pos:end="118:16">prot</name> <operator pos:start="118:18" pos:end="118:18">&amp;</operator> <name pos:start="118:20" pos:end="118:28">PAGE_READ</name></expr>)</condition> <block pos:start="118:31" pos:end="122:9">{<block_content pos:start="120:13" pos:end="120:36">

            <expr_stmt pos:start="120:13" pos:end="120:36"><expr pos:start="120:13" pos:end="120:35"><name pos:start="120:13" pos:end="120:25"><name pos:start="120:13" pos:end="120:14">te</name><operator pos:start="120:15" pos:end="120:16">-&gt;</operator><name pos:start="120:17" pos:end="120:25">addr_read</name></name> <operator pos:start="120:27" pos:end="120:27">=</operator> <name pos:start="120:29" pos:end="120:35">address</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="122:11" pos:end="126:9">else <block pos:start="122:16" pos:end="126:9">{<block_content pos:start="124:13" pos:end="124:31">

            <expr_stmt pos:start="124:13" pos:end="124:31"><expr pos:start="124:13" pos:end="124:30"><name pos:start="124:13" pos:end="124:25"><name pos:start="124:13" pos:end="124:14">te</name><operator pos:start="124:15" pos:end="124:16">-&gt;</operator><name pos:start="124:17" pos:end="124:25">addr_read</name></name> <operator pos:start="124:27" pos:end="124:27">=</operator> <operator pos:start="124:29" pos:end="124:29">-</operator><literal type="number" pos:start="124:30" pos:end="124:30">1</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="128:9" pos:end="136:9"><if pos:start="128:9" pos:end="132:9">if <condition pos:start="128:12" pos:end="128:29">(<expr pos:start="128:13" pos:end="128:28"><name pos:start="128:13" pos:end="128:16">prot</name> <operator pos:start="128:18" pos:end="128:18">&amp;</operator> <name pos:start="128:20" pos:end="128:28">PAGE_EXEC</name></expr>)</condition> <block pos:start="128:31" pos:end="132:9">{<block_content pos:start="130:13" pos:end="130:36">

            <expr_stmt pos:start="130:13" pos:end="130:36"><expr pos:start="130:13" pos:end="130:35"><name pos:start="130:13" pos:end="130:25"><name pos:start="130:13" pos:end="130:14">te</name><operator pos:start="130:15" pos:end="130:16">-&gt;</operator><name pos:start="130:17" pos:end="130:25">addr_code</name></name> <operator pos:start="130:27" pos:end="130:27">=</operator> <name pos:start="130:29" pos:end="130:35">address</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="132:11" pos:end="136:9">else <block pos:start="132:16" pos:end="136:9">{<block_content pos:start="134:13" pos:end="134:31">

            <expr_stmt pos:start="134:13" pos:end="134:31"><expr pos:start="134:13" pos:end="134:30"><name pos:start="134:13" pos:end="134:25"><name pos:start="134:13" pos:end="134:14">te</name><operator pos:start="134:15" pos:end="134:16">-&gt;</operator><name pos:start="134:17" pos:end="134:25">addr_code</name></name> <operator pos:start="134:27" pos:end="134:27">=</operator> <operator pos:start="134:29" pos:end="134:29">-</operator><literal type="number" pos:start="134:30" pos:end="134:30">1</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="138:9" pos:end="166:9"><if pos:start="138:9" pos:end="162:9">if <condition pos:start="138:12" pos:end="138:30">(<expr pos:start="138:13" pos:end="138:29"><name pos:start="138:13" pos:end="138:16">prot</name> <operator pos:start="138:18" pos:end="138:18">&amp;</operator> <name pos:start="138:20" pos:end="138:29">PAGE_WRITE</name></expr>)</condition> <block pos:start="138:32" pos:end="162:9">{<block_content pos:start="140:13" pos:end="160:13">

            <if_stmt pos:start="140:13" pos:end="160:13"><if pos:start="140:13" pos:end="150:13">if <condition pos:start="140:16" pos:end="142:35">(<expr pos:start="140:17" pos:end="142:34"><operator pos:start="140:17" pos:end="140:17">(</operator><name pos:start="140:18" pos:end="140:19">pd</name> <operator pos:start="140:21" pos:end="140:21">&amp;</operator> <operator pos:start="140:23" pos:end="140:23">~</operator><name pos:start="140:24" pos:end="140:39">TARGET_PAGE_MASK</name><operator pos:start="140:40" pos:end="140:40">)</operator> <operator pos:start="140:42" pos:end="140:43">==</operator> <name pos:start="140:45" pos:end="140:54">IO_MEM_ROM</name> <operator pos:start="140:56" pos:end="140:57">||</operator> 

                <operator pos:start="142:17" pos:end="142:17">(</operator><name pos:start="142:18" pos:end="142:19">pd</name> <operator pos:start="142:21" pos:end="142:21">&amp;</operator> <name pos:start="142:23" pos:end="142:33">IO_MEM_ROMD</name><operator pos:start="142:34" pos:end="142:34">)</operator></expr>)</condition> <block pos:start="142:37" pos:end="150:13">{<block_content pos:start="146:17" pos:end="148:61">

                <comment type="block" pos:start="144:17" pos:end="144:57">/* write access calls the I/O callback */</comment>

                <expr_stmt pos:start="146:17" pos:end="148:61"><expr pos:start="146:17" pos:end="148:60"><name pos:start="146:17" pos:end="146:30"><name pos:start="146:17" pos:end="146:18">te</name><operator pos:start="146:19" pos:end="146:20">-&gt;</operator><name pos:start="146:21" pos:end="146:30">addr_write</name></name> <operator pos:start="146:32" pos:end="146:32">=</operator> <name pos:start="146:34" pos:end="146:38">vaddr</name> <operator pos:start="146:40" pos:end="146:40">|</operator> 

                    <operator pos:start="148:21" pos:end="148:21">(</operator><name pos:start="148:22" pos:end="148:23">pd</name> <operator pos:start="148:25" pos:end="148:25">&amp;</operator> <operator pos:start="148:27" pos:end="148:27">~</operator><operator pos:start="148:28" pos:end="148:28">(</operator><name pos:start="148:29" pos:end="148:44">TARGET_PAGE_MASK</name> <operator pos:start="148:46" pos:end="148:46">|</operator> <name pos:start="148:48" pos:end="148:58">IO_MEM_ROMD</name><operator pos:start="148:59" pos:end="148:59">)</operator><operator pos:start="148:60" pos:end="148:60">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="150:15" pos:end="156:13">else if <condition pos:start="150:23" pos:end="152:57">(<expr pos:start="150:24" pos:end="152:56"><operator pos:start="150:24" pos:end="150:24">(</operator><name pos:start="150:25" pos:end="150:26">pd</name> <operator pos:start="150:28" pos:end="150:28">&amp;</operator> <operator pos:start="150:30" pos:end="150:30">~</operator><name pos:start="150:31" pos:end="150:46">TARGET_PAGE_MASK</name><operator pos:start="150:47" pos:end="150:47">)</operator> <operator pos:start="150:49" pos:end="150:50">==</operator> <name pos:start="150:52" pos:end="150:61">IO_MEM_RAM</name> <operator pos:start="150:63" pos:end="150:64">&amp;&amp;</operator> 

                       <operator pos:start="152:24" pos:end="152:24">!</operator><call pos:start="152:25" pos:end="152:56"><name pos:start="152:25" pos:end="152:52">cpu_physical_memory_is_dirty</name><argument_list pos:start="152:53" pos:end="152:56">(<argument pos:start="152:54" pos:end="152:55"><expr pos:start="152:54" pos:end="152:55"><name pos:start="152:54" pos:end="152:55">pd</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="152:59" pos:end="156:13">{<block_content pos:start="154:17" pos:end="154:57">

                <expr_stmt pos:start="154:17" pos:end="154:57"><expr pos:start="154:17" pos:end="154:56"><name pos:start="154:17" pos:end="154:30"><name pos:start="154:17" pos:end="154:18">te</name><operator pos:start="154:19" pos:end="154:20">-&gt;</operator><name pos:start="154:21" pos:end="154:30">addr_write</name></name> <operator pos:start="154:32" pos:end="154:32">=</operator> <name pos:start="154:34" pos:end="154:38">vaddr</name> <operator pos:start="154:40" pos:end="154:40">|</operator> <name pos:start="154:42" pos:end="154:56">IO_MEM_NOTDIRTY</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="156:15" pos:end="160:13">else <block pos:start="156:20" pos:end="160:13">{<block_content pos:start="158:17" pos:end="158:41">

                <expr_stmt pos:start="158:17" pos:end="158:41"><expr pos:start="158:17" pos:end="158:40"><name pos:start="158:17" pos:end="158:30"><name pos:start="158:17" pos:end="158:18">te</name><operator pos:start="158:19" pos:end="158:20">-&gt;</operator><name pos:start="158:21" pos:end="158:30">addr_write</name></name> <operator pos:start="158:32" pos:end="158:32">=</operator> <name pos:start="158:34" pos:end="158:40">address</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="162:11" pos:end="166:9">else <block pos:start="162:16" pos:end="166:9">{<block_content pos:start="164:13" pos:end="164:32">

            <expr_stmt pos:start="164:13" pos:end="164:32"><expr pos:start="164:13" pos:end="164:31"><name pos:start="164:13" pos:end="164:26"><name pos:start="164:13" pos:end="164:14">te</name><operator pos:start="164:15" pos:end="164:16">-&gt;</operator><name pos:start="164:17" pos:end="164:26">addr_write</name></name> <operator pos:start="164:28" pos:end="164:28">=</operator> <operator pos:start="164:30" pos:end="164:30">-</operator><literal type="number" pos:start="164:31" pos:end="164:31">1</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if>

<cpp:if pos:start="170:1" pos:end="170:28">#<cpp:directive pos:start="170:2" pos:end="170:3">if</cpp:directive> <expr pos:start="170:5" pos:end="170:28"><operator pos:start="170:5" pos:end="170:5">!</operator><call pos:start="170:6" pos:end="170:28"><name pos:start="170:6" pos:end="170:12">defined</name><argument_list pos:start="170:13" pos:end="170:28">(<argument pos:start="170:14" pos:end="170:27"><expr pos:start="170:14" pos:end="170:27"><name pos:start="170:14" pos:end="170:27">CONFIG_SOFTMMU</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <else pos:start="172:5" pos:end="253:0">else <block pos:start="172:10" pos:end="253:0">{<block_content pos:start="174:9" pos:end="248:9">

        <if_stmt pos:start="174:9" pos:end="248:9"><if pos:start="174:9" pos:end="184:9">if <condition pos:start="174:12" pos:end="174:50">(<expr pos:start="174:13" pos:end="174:49"><operator pos:start="174:13" pos:end="174:13">(</operator><name pos:start="174:14" pos:end="174:15">pd</name> <operator pos:start="174:17" pos:end="174:17">&amp;</operator> <operator pos:start="174:19" pos:end="174:19">~</operator><name pos:start="174:20" pos:end="174:35">TARGET_PAGE_MASK</name><operator pos:start="174:36" pos:end="174:36">)</operator> <operator pos:start="174:38" pos:end="174:38">&gt;</operator> <name pos:start="174:40" pos:end="174:49">IO_MEM_ROM</name></expr>)</condition> <block pos:start="174:52" pos:end="184:9">{<block_content pos:start="180:13" pos:end="182:24">

            <comment type="block" pos:start="176:13" pos:end="178:26">/* IO access: no mapping is done as it will be handled by the

               soft MMU */</comment>

            <if_stmt pos:start="180:13" pos:end="182:24"><if pos:start="180:13" pos:end="182:24">if <condition pos:start="180:16" pos:end="180:49">(<expr pos:start="180:17" pos:end="180:48"><operator pos:start="180:17" pos:end="180:17">!</operator><operator pos:start="180:18" pos:end="180:18">(</operator><name pos:start="180:19" pos:end="180:29"><name pos:start="180:19" pos:end="180:21">env</name><operator pos:start="180:22" pos:end="180:23">-&gt;</operator><name pos:start="180:24" pos:end="180:29">hflags</name></name> <operator pos:start="180:31" pos:end="180:31">&amp;</operator> <name pos:start="180:33" pos:end="180:47">HF_SOFTMMU_MASK</name><operator pos:start="180:48" pos:end="180:48">)</operator></expr>)</condition><block type="pseudo" pos:start="182:17" pos:end="182:24"><block_content pos:start="182:17" pos:end="182:24">

                <expr_stmt pos:start="182:17" pos:end="182:24"><expr pos:start="182:17" pos:end="182:23"><name pos:start="182:17" pos:end="182:19">ret</name> <operator pos:start="182:21" pos:end="182:21">=</operator> <literal type="number" pos:start="182:23" pos:end="182:23">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="184:11" pos:end="248:9">else <block pos:start="184:16" pos:end="248:9">{<block_content pos:start="186:13" pos:end="246:13">

            <decl_stmt pos:start="186:13" pos:end="186:27"><decl pos:start="186:13" pos:end="186:26"><type pos:start="186:13" pos:end="186:18"><name pos:start="186:13" pos:end="186:16">void</name> <modifier pos:start="186:18" pos:end="186:18">*</modifier></type><name pos:start="186:19" pos:end="186:26">map_addr</name></decl>;</decl_stmt>



            <if_stmt pos:start="190:13" pos:end="246:13"><if pos:start="190:13" pos:end="194:13">if <condition pos:start="190:16" pos:end="190:39">(<expr pos:start="190:17" pos:end="190:38"><name pos:start="190:17" pos:end="190:21">vaddr</name> <operator pos:start="190:23" pos:end="190:24">&gt;=</operator> <name pos:start="190:26" pos:end="190:38">MMAP_AREA_END</name></expr>)</condition> <block pos:start="190:41" pos:end="194:13">{<block_content pos:start="192:17" pos:end="192:24">

                <expr_stmt pos:start="192:17" pos:end="192:24"><expr pos:start="192:17" pos:end="192:23"><name pos:start="192:17" pos:end="192:19">ret</name> <operator pos:start="192:21" pos:end="192:21">=</operator> <literal type="number" pos:start="192:23" pos:end="192:23">2</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="194:15" pos:end="246:13">else <block pos:start="194:20" pos:end="246:13">{<block_content pos:start="196:17" pos:end="244:17">

                <if_stmt pos:start="196:17" pos:end="232:17"><if pos:start="196:17" pos:end="232:17">if <condition pos:start="196:20" pos:end="196:38">(<expr pos:start="196:21" pos:end="196:37"><name pos:start="196:21" pos:end="196:24">prot</name> <operator pos:start="196:26" pos:end="196:26">&amp;</operator> <name pos:start="196:28" pos:end="196:37">PROT_WRITE</name></expr>)</condition> <block pos:start="196:40" pos:end="232:17">{<block_content pos:start="198:21" pos:end="230:21">

                    <if_stmt pos:start="198:21" pos:end="230:21"><if pos:start="198:21" pos:end="230:21">if <condition pos:start="198:24" pos:end="208:60">(<expr pos:start="198:25" pos:end="208:59"><operator pos:start="198:25" pos:end="198:25">(</operator><name pos:start="198:26" pos:end="198:27">pd</name> <operator pos:start="198:29" pos:end="198:29">&amp;</operator> <operator pos:start="198:31" pos:end="198:31">~</operator><name pos:start="198:32" pos:end="198:47">TARGET_PAGE_MASK</name><operator pos:start="198:48" pos:end="198:48">)</operator> <operator pos:start="198:50" pos:end="198:51">==</operator> <name pos:start="198:53" pos:end="198:62">IO_MEM_ROM</name> <operator pos:start="198:64" pos:end="201:0">||</operator> 

<cpp:if pos:start="200:1" pos:end="200:32">#<cpp:directive pos:start="200:2" pos:end="200:3">if</cpp:directive> <expr pos:start="200:5" pos:end="200:32"><call pos:start="200:5" pos:end="200:27"><name pos:start="200:5" pos:end="200:11">defined</name><argument_list pos:start="200:12" pos:end="200:27">(<argument pos:start="200:13" pos:end="200:26"><expr pos:start="200:13" pos:end="200:26"><name pos:start="200:13" pos:end="200:26">TARGET_HAS_SMC</name></expr></argument>)</argument_list></call> <operator pos:start="200:29" pos:end="200:30">||</operator> <literal type="number" pos:start="200:32" pos:end="200:32">1</literal></expr></cpp:if>

                        <name pos:start="202:25" pos:end="202:32">first_tb</name> <operator pos:start="202:34" pos:end="205:0">||</operator>

<cpp:endif pos:start="204:1" pos:end="204:6">#<cpp:directive pos:start="204:2" pos:end="204:6">endif</cpp:directive></cpp:endif>

                        <operator pos:start="206:25" pos:end="206:25">(</operator><operator pos:start="206:26" pos:end="206:26">(</operator><name pos:start="206:27" pos:end="206:28">pd</name> <operator pos:start="206:30" pos:end="206:30">&amp;</operator> <operator pos:start="206:32" pos:end="206:32">~</operator><name pos:start="206:33" pos:end="206:48">TARGET_PAGE_MASK</name><operator pos:start="206:49" pos:end="206:49">)</operator> <operator pos:start="206:51" pos:end="206:52">==</operator> <name pos:start="206:54" pos:end="206:63">IO_MEM_RAM</name> <operator pos:start="206:65" pos:end="206:66">&amp;&amp;</operator> 

                         <operator pos:start="208:26" pos:end="208:26">!</operator><call pos:start="208:27" pos:end="208:58"><name pos:start="208:27" pos:end="208:54">cpu_physical_memory_is_dirty</name><argument_list pos:start="208:55" pos:end="208:58">(<argument pos:start="208:56" pos:end="208:57"><expr pos:start="208:56" pos:end="208:57"><name pos:start="208:56" pos:end="208:57">pd</name></expr></argument>)</argument_list></call><operator pos:start="208:59" pos:end="208:59">)</operator></expr>)</condition> <block pos:start="208:62" pos:end="230:21">{<block_content pos:start="216:25" pos:end="228:44">

                        <comment type="block" pos:start="210:25" pos:end="210:62">/* ROM: we do as if code was inside */</comment>

                        <comment type="block" pos:start="212:25" pos:end="214:46">/* if code is present, we only map as read only and save the

                           original mapping */</comment>

                        <decl_stmt pos:start="216:25" pos:end="216:41"><decl pos:start="216:25" pos:end="216:40"><type pos:start="216:25" pos:end="216:38"><name pos:start="216:25" pos:end="216:36">VirtPageDesc</name> <modifier pos:start="216:38" pos:end="216:38">*</modifier></type><name pos:start="216:39" pos:end="216:40">vp</name></decl>;</decl_stmt>

                        

                        <expr_stmt pos:start="220:25" pos:end="220:80"><expr pos:start="220:25" pos:end="220:79"><name pos:start="220:25" pos:end="220:26">vp</name> <operator pos:start="220:28" pos:end="220:28">=</operator> <call pos:start="220:30" pos:end="220:79"><name pos:start="220:30" pos:end="220:49">virt_page_find_alloc</name><argument_list pos:start="220:50" pos:end="220:79">(<argument pos:start="220:51" pos:end="220:75"><expr pos:start="220:51" pos:end="220:75"><name pos:start="220:51" pos:end="220:55">vaddr</name> <operator pos:start="220:57" pos:end="220:58">&gt;&gt;</operator> <name pos:start="220:60" pos:end="220:75">TARGET_PAGE_BITS</name></expr></argument>, <argument pos:start="220:78" pos:end="220:78"><expr pos:start="220:78" pos:end="220:78"><literal type="number" pos:start="220:78" pos:end="220:78">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="222:25" pos:end="222:43"><expr pos:start="222:25" pos:end="222:42"><name pos:start="222:25" pos:end="222:37"><name pos:start="222:25" pos:end="222:26">vp</name><operator pos:start="222:27" pos:end="222:28">-&gt;</operator><name pos:start="222:29" pos:end="222:37">phys_addr</name></name> <operator pos:start="222:39" pos:end="222:39">=</operator> <name pos:start="222:41" pos:end="222:42">pd</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="224:25" pos:end="224:40"><expr pos:start="224:25" pos:end="224:39"><name pos:start="224:25" pos:end="224:32"><name pos:start="224:25" pos:end="224:26">vp</name><operator pos:start="224:27" pos:end="224:28">-&gt;</operator><name pos:start="224:29" pos:end="224:32">prot</name></name> <operator pos:start="224:34" pos:end="224:34">=</operator> <name pos:start="224:36" pos:end="224:39">prot</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="226:25" pos:end="226:55"><expr pos:start="226:25" pos:end="226:54"><name pos:start="226:25" pos:end="226:37"><name pos:start="226:25" pos:end="226:26">vp</name><operator pos:start="226:27" pos:end="226:28">-&gt;</operator><name pos:start="226:29" pos:end="226:37">valid_tag</name></name> <operator pos:start="226:39" pos:end="226:39">=</operator> <name pos:start="226:41" pos:end="226:54">virt_valid_tag</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="228:25" pos:end="228:44"><expr pos:start="228:25" pos:end="228:43"><name pos:start="228:25" pos:end="228:28">prot</name> <operator pos:start="228:30" pos:end="228:31">&amp;=</operator> <operator pos:start="228:33" pos:end="228:33">~</operator><name pos:start="228:34" pos:end="228:43">PAGE_WRITE</name></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="234:17" pos:end="236:94"><expr pos:start="234:17" pos:end="236:93"><name pos:start="234:17" pos:end="234:24">map_addr</name> <operator pos:start="234:26" pos:end="234:26">=</operator> <call pos:start="234:28" pos:end="236:93"><name pos:start="234:28" pos:end="234:31">mmap</name><argument_list pos:start="234:32" pos:end="236:93">(<argument pos:start="234:33" pos:end="234:45"><expr pos:start="234:33" pos:end="234:45"><operator pos:start="234:33" pos:end="234:33">(</operator><name pos:start="234:34" pos:end="234:37">void</name> <operator pos:start="234:39" pos:end="234:39">*</operator><operator pos:start="234:40" pos:end="234:40">)</operator><name pos:start="234:41" pos:end="234:45">vaddr</name></expr></argument>, <argument pos:start="234:48" pos:end="234:63"><expr pos:start="234:48" pos:end="234:63"><name pos:start="234:48" pos:end="234:63">TARGET_PAGE_SIZE</name></expr></argument>, <argument pos:start="234:66" pos:end="234:69"><expr pos:start="234:66" pos:end="234:69"><name pos:start="234:66" pos:end="234:69">prot</name></expr></argument>, 

                                <argument pos:start="236:33" pos:end="236:54"><expr pos:start="236:33" pos:end="236:54"><name pos:start="236:33" pos:end="236:42">MAP_SHARED</name> <operator pos:start="236:44" pos:end="236:44">|</operator> <name pos:start="236:46" pos:end="236:54">MAP_FIXED</name></expr></argument>, <argument pos:start="236:57" pos:end="236:67"><expr pos:start="236:57" pos:end="236:67"><name pos:start="236:57" pos:end="236:67">phys_ram_fd</name></expr></argument>, <argument pos:start="236:70" pos:end="236:92"><expr pos:start="236:70" pos:end="236:92"><operator pos:start="236:70" pos:end="236:70">(</operator><name pos:start="236:71" pos:end="236:72">pd</name> <operator pos:start="236:74" pos:end="236:74">&amp;</operator> <name pos:start="236:76" pos:end="236:91">TARGET_PAGE_MASK</name><operator pos:start="236:92" pos:end="236:92">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="238:17" pos:end="244:17"><if pos:start="238:17" pos:end="244:17">if <condition pos:start="238:20" pos:end="238:43">(<expr pos:start="238:21" pos:end="238:42"><name pos:start="238:21" pos:end="238:28">map_addr</name> <operator pos:start="238:30" pos:end="238:31">==</operator> <name pos:start="238:33" pos:end="238:42">MAP_FAILED</name></expr>)</condition> <block pos:start="238:45" pos:end="244:17">{<block_content pos:start="240:21" pos:end="242:44">

                    <expr_stmt pos:start="240:21" pos:end="242:44"><expr pos:start="240:21" pos:end="242:43"><call pos:start="240:21" pos:end="242:43"><name pos:start="240:21" pos:end="240:29">cpu_abort</name><argument_list pos:start="240:30" pos:end="242:43">(<argument pos:start="240:31" pos:end="240:33"><expr pos:start="240:31" pos:end="240:33"><name pos:start="240:31" pos:end="240:33">env</name></expr></argument>, <argument pos:start="240:36" pos:end="240:112"><expr pos:start="240:36" pos:end="240:112"><literal type="string" pos:start="240:36" pos:end="240:112">"mmap failed when mapped physical address 0x%08x to virtual address 0x%08x\n"</literal></expr></argument>,

                              <argument pos:start="242:31" pos:end="242:35"><expr pos:start="242:31" pos:end="242:35"><name pos:start="242:31" pos:end="242:35">paddr</name></expr></argument>, <argument pos:start="242:38" pos:end="242:42"><expr pos:start="242:38" pos:end="242:42"><name pos:start="242:38" pos:end="242:42">vaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>

<cpp:endif pos:start="252:1" pos:end="252:6">#<cpp:directive pos:start="252:2" pos:end="252:6">endif</cpp:directive></cpp:endif>

    <return pos:start="254:5" pos:end="254:15">return <expr pos:start="254:12" pos:end="254:14"><name pos:start="254:12" pos:end="254:14">ret</name></expr>;</return>

</block_content>}</block></function></unit>
