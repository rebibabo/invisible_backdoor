<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9391.c" pos:tabs="8"><function pos:start="1:1" pos:end="111:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">fdt_add_cpu_nodes</name><parameter_list pos:start="1:30" pos:end="1:55">(<parameter pos:start="1:31" pos:end="1:54"><decl pos:start="1:31" pos:end="1:54"><type pos:start="1:31" pos:end="1:51"><specifier pos:start="1:31" pos:end="1:35">const</specifier> <name pos:start="1:37" pos:end="1:49">VirtBoardInfo</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:54">vbi</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="111:1">{<block_content pos:start="5:5" pos:end="109:5">

    <decl_stmt pos:start="5:5" pos:end="5:12"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:18">addr_cells</name> <init pos:start="7:20" pos:end="7:22">= <expr pos:start="7:22" pos:end="7:22"><literal type="number" pos:start="7:22" pos:end="7:22">1</literal></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="35:7">/*

     * From Documentation/devicetree/bindings/arm/cpus.txt

     *  On ARM v8 64-bit systems value should be set to 2,

     *  that corresponds to the MPIDR_EL1 register size.

     *  If MPIDR_EL1[63:32] value is equal to 0 on all CPUs

     *  in the system, #address-cells can be set to 1, since

     *  MPIDR_EL1[63:32] bits are not used for CPUs

     *  identification.

     *

     *  Here we actually don't know whether our system is 32- or 64-bit one.

     *  The simplest way to go is to examine affinity IDs of all our CPUs. If

     *  at least one of them has Aff3 populated, we set #address-cells to 2.

     */</comment>

    <for pos:start="37:5" pos:end="51:5">for <control pos:start="37:9" pos:end="37:45">(<init pos:start="37:10" pos:end="37:17"><expr pos:start="37:10" pos:end="37:16"><name pos:start="37:10" pos:end="37:12">cpu</name> <operator pos:start="37:14" pos:end="37:14">=</operator> <literal type="number" pos:start="37:16" pos:end="37:16">0</literal></expr>;</init> <condition pos:start="37:19" pos:end="37:38"><expr pos:start="37:19" pos:end="37:37"><name pos:start="37:19" pos:end="37:21">cpu</name> <operator pos:start="37:23" pos:end="37:23">&lt;</operator> <name pos:start="37:25" pos:end="37:37"><name pos:start="37:25" pos:end="37:27">vbi</name><operator pos:start="37:28" pos:end="37:29">-&gt;</operator><name pos:start="37:30" pos:end="37:37">smp_cpus</name></name></expr>;</condition> <incr pos:start="37:40" pos:end="37:44"><expr pos:start="37:40" pos:end="37:44"><name pos:start="37:40" pos:end="37:42">cpu</name><operator pos:start="37:43" pos:end="37:44">++</operator></expr></incr>)</control> <block pos:start="37:47" pos:end="51:5">{<block_content pos:start="39:9" pos:end="49:9">

        <decl_stmt pos:start="39:9" pos:end="39:52"><decl pos:start="39:9" pos:end="39:51"><type pos:start="39:9" pos:end="39:16"><name pos:start="39:9" pos:end="39:14">ARMCPU</name> <modifier pos:start="39:16" pos:end="39:16">*</modifier></type><name pos:start="39:17" pos:end="39:22">armcpu</name> <init pos:start="39:24" pos:end="39:51">= <expr pos:start="39:26" pos:end="39:51"><call pos:start="39:26" pos:end="39:51"><name pos:start="39:26" pos:end="39:32">ARM_CPU</name><argument_list pos:start="39:33" pos:end="39:51">(<argument pos:start="39:34" pos:end="39:50"><expr pos:start="39:34" pos:end="39:50"><call pos:start="39:34" pos:end="39:50"><name pos:start="39:34" pos:end="39:45">qemu_get_cpu</name><argument_list pos:start="39:46" pos:end="39:50">(<argument pos:start="39:47" pos:end="39:49"><expr pos:start="39:47" pos:end="39:49"><name pos:start="39:47" pos:end="39:49">cpu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="43:9" pos:end="49:9"><if pos:start="43:9" pos:end="49:9">if <condition pos:start="43:12" pos:end="43:48">(<expr pos:start="43:13" pos:end="43:47"><name pos:start="43:13" pos:end="43:31"><name pos:start="43:13" pos:end="43:18">armcpu</name><operator pos:start="43:19" pos:end="43:20">-&gt;</operator><name pos:start="43:21" pos:end="43:31">mp_affinity</name></name> <operator pos:start="43:33" pos:end="43:33">&amp;</operator> <name pos:start="43:35" pos:end="43:47">ARM_AFF3_MASK</name></expr>)</condition> <block pos:start="43:50" pos:end="49:9">{<block_content pos:start="45:13" pos:end="47:18">

            <expr_stmt pos:start="45:13" pos:end="45:27"><expr pos:start="45:13" pos:end="45:26"><name pos:start="45:13" pos:end="45:22">addr_cells</name> <operator pos:start="45:24" pos:end="45:24">=</operator> <literal type="number" pos:start="45:26" pos:end="45:26">2</literal></expr>;</expr_stmt>

            <break pos:start="47:13" pos:end="47:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="55:5" pos:end="55:44"><expr pos:start="55:5" pos:end="55:43"><call pos:start="55:5" pos:end="55:43"><name pos:start="55:5" pos:end="55:24">qemu_fdt_add_subnode</name><argument_list pos:start="55:25" pos:end="55:43">(<argument pos:start="55:26" pos:end="55:33"><expr pos:start="55:26" pos:end="55:33"><name pos:start="55:26" pos:end="55:33"><name pos:start="55:26" pos:end="55:28">vbi</name><operator pos:start="55:29" pos:end="55:30">-&gt;</operator><name pos:start="55:31" pos:end="55:33">fdt</name></name></expr></argument>, <argument pos:start="55:36" pos:end="55:42"><expr pos:start="55:36" pos:end="55:42"><literal type="string" pos:start="55:36" pos:end="55:42">"/cpus"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:75"><expr pos:start="57:5" pos:end="57:74"><call pos:start="57:5" pos:end="57:74"><name pos:start="57:5" pos:end="57:25">qemu_fdt_setprop_cell</name><argument_list pos:start="57:26" pos:end="57:74">(<argument pos:start="57:27" pos:end="57:34"><expr pos:start="57:27" pos:end="57:34"><name pos:start="57:27" pos:end="57:34"><name pos:start="57:27" pos:end="57:29">vbi</name><operator pos:start="57:30" pos:end="57:31">-&gt;</operator><name pos:start="57:32" pos:end="57:34">fdt</name></name></expr></argument>, <argument pos:start="57:37" pos:end="57:43"><expr pos:start="57:37" pos:end="57:43"><literal type="string" pos:start="57:37" pos:end="57:43">"/cpus"</literal></expr></argument>, <argument pos:start="57:46" pos:end="57:61"><expr pos:start="57:46" pos:end="57:61"><literal type="string" pos:start="57:46" pos:end="57:61">"#address-cells"</literal></expr></argument>, <argument pos:start="57:64" pos:end="57:73"><expr pos:start="57:64" pos:end="57:73"><name pos:start="57:64" pos:end="57:73">addr_cells</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:65"><expr pos:start="59:5" pos:end="59:64"><call pos:start="59:5" pos:end="59:64"><name pos:start="59:5" pos:end="59:25">qemu_fdt_setprop_cell</name><argument_list pos:start="59:26" pos:end="59:64">(<argument pos:start="59:27" pos:end="59:34"><expr pos:start="59:27" pos:end="59:34"><name pos:start="59:27" pos:end="59:34"><name pos:start="59:27" pos:end="59:29">vbi</name><operator pos:start="59:30" pos:end="59:31">-&gt;</operator><name pos:start="59:32" pos:end="59:34">fdt</name></name></expr></argument>, <argument pos:start="59:37" pos:end="59:43"><expr pos:start="59:37" pos:end="59:43"><literal type="string" pos:start="59:37" pos:end="59:43">"/cpus"</literal></expr></argument>, <argument pos:start="59:46" pos:end="59:58"><expr pos:start="59:46" pos:end="59:58"><literal type="string" pos:start="59:46" pos:end="59:58">"#size-cells"</literal></expr></argument>, <argument pos:start="59:61" pos:end="59:63"><expr pos:start="59:61" pos:end="59:63"><literal type="number" pos:start="59:61" pos:end="59:63">0x0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="63:5" pos:end="109:5">for <control pos:start="63:9" pos:end="63:50">(<init pos:start="63:10" pos:end="63:33"><expr pos:start="63:10" pos:end="63:32"><name pos:start="63:10" pos:end="63:12">cpu</name> <operator pos:start="63:14" pos:end="63:14">=</operator> <name pos:start="63:16" pos:end="63:28"><name pos:start="63:16" pos:end="63:18">vbi</name><operator pos:start="63:19" pos:end="63:20">-&gt;</operator><name pos:start="63:21" pos:end="63:28">smp_cpus</name></name> <operator pos:start="63:30" pos:end="63:30">-</operator> <literal type="number" pos:start="63:32" pos:end="63:32">1</literal></expr>;</init> <condition pos:start="63:35" pos:end="63:43"><expr pos:start="63:35" pos:end="63:42"><name pos:start="63:35" pos:end="63:37">cpu</name> <operator pos:start="63:39" pos:end="63:40">&gt;=</operator> <literal type="number" pos:start="63:42" pos:end="63:42">0</literal></expr>;</condition> <incr pos:start="63:45" pos:end="63:49"><expr pos:start="63:45" pos:end="63:49"><name pos:start="63:45" pos:end="63:47">cpu</name><operator pos:start="63:48" pos:end="63:49">--</operator></expr></incr>)</control> <block pos:start="63:52" pos:end="109:5">{<block_content pos:start="65:9" pos:end="107:25">

        <decl_stmt pos:start="65:9" pos:end="65:62"><decl pos:start="65:9" pos:end="65:61"><type pos:start="65:9" pos:end="65:14"><name pos:start="65:9" pos:end="65:12">char</name> <modifier pos:start="65:14" pos:end="65:14">*</modifier></type><name pos:start="65:15" pos:end="65:22">nodename</name> <init pos:start="65:24" pos:end="65:61">= <expr pos:start="65:26" pos:end="65:61"><call pos:start="65:26" pos:end="65:61"><name pos:start="65:26" pos:end="65:40">g_strdup_printf</name><argument_list pos:start="65:41" pos:end="65:61">(<argument pos:start="65:42" pos:end="65:55"><expr pos:start="65:42" pos:end="65:55"><literal type="string" pos:start="65:42" pos:end="65:55">"/cpus/cpu@%d"</literal></expr></argument>, <argument pos:start="65:58" pos:end="65:60"><expr pos:start="65:58" pos:end="65:60"><name pos:start="65:58" pos:end="65:60">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="67:9" pos:end="67:52"><decl pos:start="67:9" pos:end="67:51"><type pos:start="67:9" pos:end="67:16"><name pos:start="67:9" pos:end="67:14">ARMCPU</name> <modifier pos:start="67:16" pos:end="67:16">*</modifier></type><name pos:start="67:17" pos:end="67:22">armcpu</name> <init pos:start="67:24" pos:end="67:51">= <expr pos:start="67:26" pos:end="67:51"><call pos:start="67:26" pos:end="67:51"><name pos:start="67:26" pos:end="67:32">ARM_CPU</name><argument_list pos:start="67:33" pos:end="67:51">(<argument pos:start="67:34" pos:end="67:50"><expr pos:start="67:34" pos:end="67:50"><call pos:start="67:34" pos:end="67:50"><name pos:start="67:34" pos:end="67:45">qemu_get_cpu</name><argument_list pos:start="67:46" pos:end="67:50">(<argument pos:start="67:47" pos:end="67:49"><expr pos:start="67:47" pos:end="67:49"><name pos:start="67:47" pos:end="67:49">cpu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="71:9" pos:end="71:49"><expr pos:start="71:9" pos:end="71:48"><call pos:start="71:9" pos:end="71:48"><name pos:start="71:9" pos:end="71:28">qemu_fdt_add_subnode</name><argument_list pos:start="71:29" pos:end="71:48">(<argument pos:start="71:30" pos:end="71:37"><expr pos:start="71:30" pos:end="71:37"><name pos:start="71:30" pos:end="71:37"><name pos:start="71:30" pos:end="71:32">vbi</name><operator pos:start="71:33" pos:end="71:34">-&gt;</operator><name pos:start="71:35" pos:end="71:37">fdt</name></name></expr></argument>, <argument pos:start="71:40" pos:end="71:47"><expr pos:start="71:40" pos:end="71:47"><name pos:start="71:40" pos:end="71:47">nodename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:74"><expr pos:start="73:9" pos:end="73:73"><call pos:start="73:9" pos:end="73:73"><name pos:start="73:9" pos:end="73:31">qemu_fdt_setprop_string</name><argument_list pos:start="73:32" pos:end="73:73">(<argument pos:start="73:33" pos:end="73:40"><expr pos:start="73:33" pos:end="73:40"><name pos:start="73:33" pos:end="73:40"><name pos:start="73:33" pos:end="73:35">vbi</name><operator pos:start="73:36" pos:end="73:37">-&gt;</operator><name pos:start="73:38" pos:end="73:40">fdt</name></name></expr></argument>, <argument pos:start="73:43" pos:end="73:50"><expr pos:start="73:43" pos:end="73:50"><name pos:start="73:43" pos:end="73:50">nodename</name></expr></argument>, <argument pos:start="73:53" pos:end="73:65"><expr pos:start="73:53" pos:end="73:65"><literal type="string" pos:start="73:53" pos:end="73:65">"device_type"</literal></expr></argument>, <argument pos:start="73:68" pos:end="73:72"><expr pos:start="73:68" pos:end="73:72"><literal type="string" pos:start="73:68" pos:end="73:72">"cpu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="77:60"><expr pos:start="75:9" pos:end="77:59"><call pos:start="75:9" pos:end="77:59"><name pos:start="75:9" pos:end="75:31">qemu_fdt_setprop_string</name><argument_list pos:start="75:32" pos:end="77:59">(<argument pos:start="75:33" pos:end="75:40"><expr pos:start="75:33" pos:end="75:40"><name pos:start="75:33" pos:end="75:40"><name pos:start="75:33" pos:end="75:35">vbi</name><operator pos:start="75:36" pos:end="75:37">-&gt;</operator><name pos:start="75:38" pos:end="75:40">fdt</name></name></expr></argument>, <argument pos:start="75:43" pos:end="75:50"><expr pos:start="75:43" pos:end="75:50"><name pos:start="75:43" pos:end="75:50">nodename</name></expr></argument>, <argument pos:start="75:53" pos:end="75:64"><expr pos:start="75:53" pos:end="75:64"><literal type="string" pos:start="75:53" pos:end="75:64">"compatible"</literal></expr></argument>,

                                    <argument pos:start="77:37" pos:end="77:58"><expr pos:start="77:37" pos:end="77:58"><name pos:start="77:37" pos:end="77:58"><name pos:start="77:37" pos:end="77:42">armcpu</name><operator pos:start="77:43" pos:end="77:44">-&gt;</operator><name pos:start="77:45" pos:end="77:58">dtb_compatible</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="81:9" pos:end="87:9"><if pos:start="81:9" pos:end="87:9">if <condition pos:start="81:12" pos:end="81:30">(<expr pos:start="81:13" pos:end="81:29"><name pos:start="81:13" pos:end="81:25"><name pos:start="81:13" pos:end="81:15">vbi</name><operator pos:start="81:16" pos:end="81:17">-&gt;</operator><name pos:start="81:18" pos:end="81:25">smp_cpus</name></name> <operator pos:start="81:27" pos:end="81:27">&gt;</operator> <literal type="number" pos:start="81:29" pos:end="81:29">1</literal></expr>)</condition> <block pos:start="81:32" pos:end="87:9">{<block_content pos:start="83:13" pos:end="85:65">

            <expr_stmt pos:start="83:13" pos:end="85:65"><expr pos:start="83:13" pos:end="85:64"><call pos:start="83:13" pos:end="85:64"><name pos:start="83:13" pos:end="83:35">qemu_fdt_setprop_string</name><argument_list pos:start="83:36" pos:end="85:64">(<argument pos:start="83:37" pos:end="83:44"><expr pos:start="83:37" pos:end="83:44"><name pos:start="83:37" pos:end="83:44"><name pos:start="83:37" pos:end="83:39">vbi</name><operator pos:start="83:40" pos:end="83:41">-&gt;</operator><name pos:start="83:42" pos:end="83:44">fdt</name></name></expr></argument>, <argument pos:start="83:47" pos:end="83:54"><expr pos:start="83:47" pos:end="83:54"><name pos:start="83:47" pos:end="83:54">nodename</name></expr></argument>,

                                        <argument pos:start="85:41" pos:end="85:55"><expr pos:start="85:41" pos:end="85:55"><literal type="string" pos:start="85:41" pos:end="85:55">"enable-method"</literal></expr></argument>, <argument pos:start="85:58" pos:end="85:63"><expr pos:start="85:58" pos:end="85:63"><literal type="string" pos:start="85:58" pos:end="85:63">"psci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="91:9" pos:end="103:9"><if pos:start="91:9" pos:end="97:9">if <condition pos:start="91:12" pos:end="91:28">(<expr pos:start="91:13" pos:end="91:27"><name pos:start="91:13" pos:end="91:22">addr_cells</name> <operator pos:start="91:24" pos:end="91:25">==</operator> <literal type="number" pos:start="91:27" pos:end="91:27">2</literal></expr>)</condition> <block pos:start="91:30" pos:end="97:9">{<block_content pos:start="93:13" pos:end="95:54">

            <expr_stmt pos:start="93:13" pos:end="95:54"><expr pos:start="93:13" pos:end="95:53"><call pos:start="93:13" pos:end="95:53"><name pos:start="93:13" pos:end="93:32">qemu_fdt_setprop_u64</name><argument_list pos:start="93:33" pos:end="95:53">(<argument pos:start="93:34" pos:end="93:41"><expr pos:start="93:34" pos:end="93:41"><name pos:start="93:34" pos:end="93:41"><name pos:start="93:34" pos:end="93:36">vbi</name><operator pos:start="93:37" pos:end="93:38">-&gt;</operator><name pos:start="93:39" pos:end="93:41">fdt</name></name></expr></argument>, <argument pos:start="93:44" pos:end="93:51"><expr pos:start="93:44" pos:end="93:51"><name pos:start="93:44" pos:end="93:51">nodename</name></expr></argument>, <argument pos:start="93:54" pos:end="93:58"><expr pos:start="93:54" pos:end="93:58"><literal type="string" pos:start="93:54" pos:end="93:58">"reg"</literal></expr></argument>,

                                 <argument pos:start="95:34" pos:end="95:52"><expr pos:start="95:34" pos:end="95:52"><name pos:start="95:34" pos:end="95:52"><name pos:start="95:34" pos:end="95:39">armcpu</name><operator pos:start="95:40" pos:end="95:41">-&gt;</operator><name pos:start="95:42" pos:end="95:52">mp_affinity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="97:11" pos:end="103:9">else <block pos:start="97:16" pos:end="103:9">{<block_content pos:start="99:13" pos:end="101:55">

            <expr_stmt pos:start="99:13" pos:end="101:55"><expr pos:start="99:13" pos:end="101:54"><call pos:start="99:13" pos:end="101:54"><name pos:start="99:13" pos:end="99:33">qemu_fdt_setprop_cell</name><argument_list pos:start="99:34" pos:end="101:54">(<argument pos:start="99:35" pos:end="99:42"><expr pos:start="99:35" pos:end="99:42"><name pos:start="99:35" pos:end="99:42"><name pos:start="99:35" pos:end="99:37">vbi</name><operator pos:start="99:38" pos:end="99:39">-&gt;</operator><name pos:start="99:40" pos:end="99:42">fdt</name></name></expr></argument>, <argument pos:start="99:45" pos:end="99:52"><expr pos:start="99:45" pos:end="99:52"><name pos:start="99:45" pos:end="99:52">nodename</name></expr></argument>, <argument pos:start="99:55" pos:end="99:59"><expr pos:start="99:55" pos:end="99:59"><literal type="string" pos:start="99:55" pos:end="99:59">"reg"</literal></expr></argument>,

                                  <argument pos:start="101:35" pos:end="101:53"><expr pos:start="101:35" pos:end="101:53"><name pos:start="101:35" pos:end="101:53"><name pos:start="101:35" pos:end="101:40">armcpu</name><operator pos:start="101:41" pos:end="101:42">-&gt;</operator><name pos:start="101:43" pos:end="101:53">mp_affinity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="107:9" pos:end="107:25"><expr pos:start="107:9" pos:end="107:24"><call pos:start="107:9" pos:end="107:24"><name pos:start="107:9" pos:end="107:14">g_free</name><argument_list pos:start="107:15" pos:end="107:24">(<argument pos:start="107:16" pos:end="107:23"><expr pos:start="107:16" pos:end="107:23"><name pos:start="107:16" pos:end="107:23">nodename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
