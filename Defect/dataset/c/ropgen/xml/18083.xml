<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/18083.c" pos:tabs="8"><function pos:start="1:1" pos:end="107:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">bool</name></type> <name pos:start="1:13" pos:end="1:27">get_queued_page</name><parameter_list pos:start="1:28" pos:end="3:53">(<parameter pos:start="1:29" pos:end="1:40"><decl pos:start="1:29" pos:end="1:40"><type pos:start="1:29" pos:end="1:40"><name pos:start="1:29" pos:end="1:36">RAMState</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:40">rs</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:63"><decl pos:start="1:43" pos:end="1:63"><type pos:start="1:43" pos:end="1:63"><name pos:start="1:43" pos:end="1:58">PageSearchStatus</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:63">pss</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:52"><decl pos:start="3:29" pos:end="3:52"><type pos:start="3:29" pos:end="3:52"><name pos:start="3:29" pos:end="3:38">ram_addr_t</name> <modifier pos:start="3:40" pos:end="3:40">*</modifier></type><name pos:start="3:41" pos:end="3:52">ram_addr_abs</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="107:1">{<block_content pos:start="7:5" pos:end="105:19">

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:12">RAMBlock</name>  <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:20">block</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:14">ram_addr_t</name></type> <name pos:start="9:16" pos:end="9:21">offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:15"><decl pos:start="11:5" pos:end="11:14"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">bool</name></type> <name pos:start="11:10" pos:end="11:14">dirty</name></decl>;</decl_stmt>



    <do pos:start="15:5" pos:end="65:30">do <block pos:start="15:8" pos:end="65:5">{<block_content pos:start="17:9" pos:end="61:9">

        <expr_stmt pos:start="17:9" pos:end="17:56"><expr pos:start="17:9" pos:end="17:55"><name pos:start="17:9" pos:end="17:13">block</name> <operator pos:start="17:15" pos:end="17:15">=</operator> <call pos:start="17:17" pos:end="17:55"><name pos:start="17:17" pos:end="17:28">unqueue_page</name><argument_list pos:start="17:29" pos:end="17:55">(<argument pos:start="17:30" pos:end="17:31"><expr pos:start="17:30" pos:end="17:31"><name pos:start="17:30" pos:end="17:31">rs</name></expr></argument>, <argument pos:start="17:34" pos:end="17:40"><expr pos:start="17:34" pos:end="17:40"><operator pos:start="17:34" pos:end="17:34">&amp;</operator><name pos:start="17:35" pos:end="17:40">offset</name></expr></argument>, <argument pos:start="17:43" pos:end="17:54"><expr pos:start="17:43" pos:end="17:54"><name pos:start="17:43" pos:end="17:54">ram_addr_abs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="19:9" pos:end="29:11">/*

         * We're sending this page, and since it's postcopy nothing else

         * will dirty it, and we must make sure it doesn't get sent again

         * even if this queue request was received after the background

         * search already sent it.

         */</comment>

        <if_stmt pos:start="31:9" pos:end="61:9"><if pos:start="31:9" pos:end="61:9">if <condition pos:start="31:12" pos:end="31:18">(<expr pos:start="31:13" pos:end="31:17"><name pos:start="31:13" pos:end="31:17">block</name></expr>)</condition> <block pos:start="31:20" pos:end="61:9">{<block_content pos:start="33:13" pos:end="59:13">

            <decl_stmt pos:start="33:13" pos:end="33:34"><decl pos:start="33:13" pos:end="33:33"><type pos:start="33:13" pos:end="33:27"><name pos:start="33:13" pos:end="33:20">unsigned</name> <name pos:start="33:22" pos:end="33:25">long</name> <modifier pos:start="33:27" pos:end="33:27">*</modifier></type><name pos:start="33:28" pos:end="33:33">bitmap</name></decl>;</decl_stmt>

            <expr_stmt pos:start="35:13" pos:end="35:60"><expr pos:start="35:13" pos:end="35:59"><name pos:start="35:13" pos:end="35:18">bitmap</name> <operator pos:start="35:20" pos:end="35:20">=</operator> <call pos:start="35:22" pos:end="35:53"><name pos:start="35:22" pos:end="35:36">atomic_rcu_read</name><argument_list pos:start="35:37" pos:end="35:53">(<argument pos:start="35:38" pos:end="35:52"><expr pos:start="35:38" pos:end="35:52"><operator pos:start="35:38" pos:end="35:38">&amp;</operator><name pos:start="35:39" pos:end="35:52"><name pos:start="35:39" pos:end="35:40">rs</name><operator pos:start="35:41" pos:end="35:42">-&gt;</operator><name pos:start="35:43" pos:end="35:52">ram_bitmap</name></name></expr></argument>)</argument_list></call><operator pos:start="35:54" pos:end="35:55">-&gt;</operator><name pos:start="35:56" pos:end="35:59">bmap</name></expr>;</expr_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:72"><expr pos:start="37:13" pos:end="37:71"><name pos:start="37:13" pos:end="37:17">dirty</name> <operator pos:start="37:19" pos:end="37:19">=</operator> <call pos:start="37:21" pos:end="37:71"><name pos:start="37:21" pos:end="37:28">test_bit</name><argument_list pos:start="37:29" pos:end="37:71">(<argument pos:start="37:30" pos:end="37:62"><expr pos:start="37:30" pos:end="37:62"><operator pos:start="37:30" pos:end="37:30">*</operator><name pos:start="37:31" pos:end="37:42">ram_addr_abs</name> <operator pos:start="37:44" pos:end="37:45">&gt;&gt;</operator> <name pos:start="37:47" pos:end="37:62">TARGET_PAGE_BITS</name></expr></argument>, <argument pos:start="37:65" pos:end="37:70"><expr pos:start="37:65" pos:end="37:70"><name pos:start="37:65" pos:end="37:70">bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="39:13" pos:end="59:13"><if pos:start="39:13" pos:end="51:13">if <condition pos:start="39:16" pos:end="39:23">(<expr pos:start="39:17" pos:end="39:22"><operator pos:start="39:17" pos:end="39:17">!</operator><name pos:start="39:18" pos:end="39:22">dirty</name></expr>)</condition> <block pos:start="39:25" pos:end="51:13">{<block_content pos:start="41:17" pos:end="49:71">

                <expr_stmt pos:start="41:17" pos:end="49:71"><expr pos:start="41:17" pos:end="49:70"><call pos:start="41:17" pos:end="49:70"><name pos:start="41:17" pos:end="41:47">trace_get_queued_page_not_dirty</name><argument_list pos:start="41:48" pos:end="49:70">(

                    <argument pos:start="43:21" pos:end="43:32"><expr pos:start="43:21" pos:end="43:32"><name pos:start="43:21" pos:end="43:32"><name pos:start="43:21" pos:end="43:25">block</name><operator pos:start="43:26" pos:end="43:27">-&gt;</operator><name pos:start="43:28" pos:end="43:32">idstr</name></name></expr></argument>, <argument pos:start="43:35" pos:end="43:50"><expr pos:start="43:35" pos:end="43:50"><operator pos:start="43:35" pos:end="43:35">(</operator><name pos:start="43:36" pos:end="43:43">uint64_t</name><operator pos:start="43:44" pos:end="43:44">)</operator><name pos:start="43:45" pos:end="43:50">offset</name></expr></argument>,

                    <argument pos:start="45:21" pos:end="45:43"><expr pos:start="45:21" pos:end="45:43"><operator pos:start="45:21" pos:end="45:21">(</operator><name pos:start="45:22" pos:end="45:29">uint64_t</name><operator pos:start="45:30" pos:end="45:30">)</operator><operator pos:start="45:31" pos:end="45:31">*</operator><name pos:start="45:32" pos:end="45:43">ram_addr_abs</name></expr></argument>,

                    <argument pos:start="47:21" pos:end="49:69"><expr pos:start="47:21" pos:end="49:69"><call pos:start="47:21" pos:end="49:69"><name pos:start="47:21" pos:end="47:28">test_bit</name><argument_list pos:start="47:29" pos:end="49:69">(<argument pos:start="47:30" pos:end="47:62"><expr pos:start="47:30" pos:end="47:62"><operator pos:start="47:30" pos:end="47:30">*</operator><name pos:start="47:31" pos:end="47:42">ram_addr_abs</name> <operator pos:start="47:44" pos:end="47:45">&gt;&gt;</operator> <name pos:start="47:47" pos:end="47:62">TARGET_PAGE_BITS</name></expr></argument>,

                         <argument pos:start="49:26" pos:end="49:68"><expr pos:start="49:26" pos:end="49:68"><call pos:start="49:26" pos:end="49:57"><name pos:start="49:26" pos:end="49:40">atomic_rcu_read</name><argument_list pos:start="49:41" pos:end="49:57">(<argument pos:start="49:42" pos:end="49:56"><expr pos:start="49:42" pos:end="49:56"><operator pos:start="49:42" pos:end="49:42">&amp;</operator><name pos:start="49:43" pos:end="49:56"><name pos:start="49:43" pos:end="49:44">rs</name><operator pos:start="49:45" pos:end="49:46">-&gt;</operator><name pos:start="49:47" pos:end="49:56">ram_bitmap</name></name></expr></argument>)</argument_list></call><operator pos:start="49:58" pos:end="49:59">-&gt;</operator><name pos:start="49:60" pos:end="49:68">unsentmap</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="51:15" pos:end="59:13">else <block pos:start="51:20" pos:end="59:13">{<block_content pos:start="53:17" pos:end="57:63">

                <expr_stmt pos:start="53:17" pos:end="57:63"><expr pos:start="53:17" pos:end="57:62"><call pos:start="53:17" pos:end="57:62"><name pos:start="53:17" pos:end="53:37">trace_get_queued_page</name><argument_list pos:start="53:38" pos:end="57:62">(<argument pos:start="53:39" pos:end="53:50"><expr pos:start="53:39" pos:end="53:50"><name pos:start="53:39" pos:end="53:50"><name pos:start="53:39" pos:end="53:43">block</name><operator pos:start="53:44" pos:end="53:45">-&gt;</operator><name pos:start="53:46" pos:end="53:50">idstr</name></name></expr></argument>,

                                      <argument pos:start="55:39" pos:end="55:54"><expr pos:start="55:39" pos:end="55:54"><operator pos:start="55:39" pos:end="55:39">(</operator><name pos:start="55:40" pos:end="55:47">uint64_t</name><operator pos:start="55:48" pos:end="55:48">)</operator><name pos:start="55:49" pos:end="55:54">offset</name></expr></argument>,

                                      <argument pos:start="57:39" pos:end="57:61"><expr pos:start="57:39" pos:end="57:61"><operator pos:start="57:39" pos:end="57:39">(</operator><name pos:start="57:40" pos:end="57:47">uint64_t</name><operator pos:start="57:48" pos:end="57:48">)</operator><operator pos:start="57:49" pos:end="57:49">*</operator><name pos:start="57:50" pos:end="57:61">ram_addr_abs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>



    </block_content>}</block> while <condition pos:start="65:13" pos:end="65:29">(<expr pos:start="65:14" pos:end="65:28"><name pos:start="65:14" pos:end="65:18">block</name> <operator pos:start="65:20" pos:end="65:21">&amp;&amp;</operator> <operator pos:start="65:23" pos:end="65:23">!</operator><name pos:start="65:24" pos:end="65:28">dirty</name></expr>)</condition>;</do>



    <if_stmt pos:start="69:5" pos:end="101:5"><if pos:start="69:5" pos:end="101:5">if <condition pos:start="69:8" pos:end="69:14">(<expr pos:start="69:9" pos:end="69:13"><name pos:start="69:9" pos:end="69:13">block</name></expr>)</condition> <block pos:start="69:16" pos:end="101:5">{<block_content pos:start="83:9" pos:end="99:29">

        <comment type="block" pos:start="71:9" pos:end="81:11">/*

         * As soon as we start servicing pages out of order, then we have

         * to kill the bulk stage, since the bulk stage assumes

         * in (migration_bitmap_find_and_reset_dirty) that every page is

         * dirty, that's no longer true.

         */</comment>

        <expr_stmt pos:start="83:9" pos:end="83:35"><expr pos:start="83:9" pos:end="83:34"><name pos:start="83:9" pos:end="83:26"><name pos:start="83:9" pos:end="83:10">rs</name><operator pos:start="83:11" pos:end="83:12">-&gt;</operator><name pos:start="83:13" pos:end="83:26">ram_bulk_stage</name></name> <operator pos:start="83:28" pos:end="83:28">=</operator> <name pos:start="83:30" pos:end="83:34">false</name></expr>;</expr_stmt>



        <comment type="block" pos:start="87:9" pos:end="95:11">/*

         * We want the background search to continue from the queued page

         * since the guest is likely to want other pages near to the page

         * it just requested.

         */</comment>

        <expr_stmt pos:start="97:9" pos:end="97:27"><expr pos:start="97:9" pos:end="97:26"><name pos:start="97:9" pos:end="97:18"><name pos:start="97:9" pos:end="97:11">pss</name><operator pos:start="97:12" pos:end="97:13">-&gt;</operator><name pos:start="97:14" pos:end="97:18">block</name></name> <operator pos:start="97:20" pos:end="97:20">=</operator> <name pos:start="97:22" pos:end="97:26">block</name></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:29"><expr pos:start="99:9" pos:end="99:28"><name pos:start="99:9" pos:end="99:19"><name pos:start="99:9" pos:end="99:11">pss</name><operator pos:start="99:12" pos:end="99:13">-&gt;</operator><name pos:start="99:14" pos:end="99:19">offset</name></name> <operator pos:start="99:21" pos:end="99:21">=</operator> <name pos:start="99:23" pos:end="99:28">offset</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="105:5" pos:end="105:19">return <expr pos:start="105:12" pos:end="105:18"><operator pos:start="105:12" pos:end="105:12">!</operator><operator pos:start="105:13" pos:end="105:13">!</operator><name pos:start="105:14" pos:end="105:18">block</name></expr>;</return>

</block_content>}</block></function>
</unit>
