<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17349.c" pos:tabs="8"><function pos:start="1:1" pos:end="491:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:27">ff_msmpeg4_decode_block</name><parameter_list pos:start="1:28" pos:end="3:74">(<parameter pos:start="1:29" pos:end="1:46"><decl pos:start="1:29" pos:end="1:46"><type pos:start="1:29" pos:end="1:46"><name pos:start="1:29" pos:end="1:42">MpegEncContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type> <name pos:start="1:46" pos:end="1:46">s</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:63"><decl pos:start="1:49" pos:end="1:63"><type pos:start="1:49" pos:end="1:63"><name pos:start="1:49" pos:end="1:55">DCTELEM</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type> <name pos:start="1:59" pos:end="1:63">block</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:35"><decl pos:start="3:31" pos:end="3:35"><type pos:start="3:31" pos:end="3:35"><name pos:start="3:31" pos:end="3:33">int</name></type> <name pos:start="3:35" pos:end="3:35">n</name></decl></parameter>, <parameter pos:start="3:38" pos:end="3:46"><decl pos:start="3:38" pos:end="3:46"><type pos:start="3:38" pos:end="3:46"><name pos:start="3:38" pos:end="3:40">int</name></type> <name pos:start="3:42" pos:end="3:46">coded</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:73"><decl pos:start="3:49" pos:end="3:73"><type pos:start="3:49" pos:end="3:73"><specifier pos:start="3:49" pos:end="3:53">const</specifier> <name pos:start="3:55" pos:end="3:61">uint8_t</name> <modifier pos:start="3:63" pos:end="3:63">*</modifier></type><name pos:start="3:64" pos:end="3:73">scan_table</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="491:1">{<block_content pos:start="7:5" pos:end="489:13">

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:13"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:13">level</name></decl>, <decl pos:start="7:16" pos:end="7:16"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:16" pos:end="7:16">i</name></decl>, <decl pos:start="7:19" pos:end="7:22"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:19" pos:end="7:22">last</name></decl>, <decl pos:start="7:25" pos:end="7:27"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:25" pos:end="7:27">run</name></decl>, <decl pos:start="7:30" pos:end="7:37"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:30" pos:end="7:37">run_diff</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:19">dc_pred_dir</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">RLTable</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:15">rl</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:24"><decl pos:start="13:5" pos:end="13:23"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:15">RL_VLC_ELEM</name> <modifier pos:start="13:17" pos:end="13:17">*</modifier></type><name pos:start="13:18" pos:end="13:23">rl_vlc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:12"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:12">qmul</name></decl>, <decl pos:start="15:15" pos:end="15:18"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:15" pos:end="15:18">qadd</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="137:5"><if pos:start="19:5" pos:end="101:5">if <condition pos:start="19:8" pos:end="19:20">(<expr pos:start="19:9" pos:end="19:19"><name pos:start="19:9" pos:end="19:19"><name pos:start="19:9" pos:end="19:9">s</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:19">mb_intra</name></name></expr>)</condition> <block pos:start="19:22" pos:end="101:5">{<block_content pos:start="21:9" pos:end="99:30">

        <expr_stmt pos:start="21:9" pos:end="21:15"><expr pos:start="21:9" pos:end="21:14"><name pos:start="21:9" pos:end="21:12">qmul</name><operator pos:start="21:13" pos:end="21:13">=</operator><literal type="number" pos:start="21:14" pos:end="21:14">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:15"><expr pos:start="23:9" pos:end="23:14"><name pos:start="23:9" pos:end="23:12">qadd</name><operator pos:start="23:13" pos:end="23:13">=</operator><literal type="number" pos:start="23:14" pos:end="23:14">0</literal></expr>;</expr_stmt>



        <comment type="block" pos:start="27:9" pos:end="27:21">/* DC coef */</comment>

        <expr_stmt pos:start="29:9" pos:end="29:54"><expr pos:start="29:9" pos:end="29:53"><name pos:start="29:9" pos:end="29:13">level</name> <operator pos:start="29:15" pos:end="29:15">=</operator> <call pos:start="29:17" pos:end="29:53"><name pos:start="29:17" pos:end="29:33">msmpeg4_decode_dc</name><argument_list pos:start="29:34" pos:end="29:53">(<argument pos:start="29:35" pos:end="29:35"><expr pos:start="29:35" pos:end="29:35"><name pos:start="29:35" pos:end="29:35">s</name></expr></argument>, <argument pos:start="29:38" pos:end="29:38"><expr pos:start="29:38" pos:end="29:38"><name pos:start="29:38" pos:end="29:38">n</name></expr></argument>, <argument pos:start="29:41" pos:end="29:52"><expr pos:start="29:41" pos:end="29:52"><operator pos:start="29:41" pos:end="29:41">&amp;</operator><name pos:start="29:42" pos:end="29:52">dc_pred_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="33:9" pos:end="41:9"><if pos:start="33:9" pos:end="41:9">if <condition pos:start="33:12" pos:end="33:22">(<expr pos:start="33:13" pos:end="33:21"><name pos:start="33:13" pos:end="33:17">level</name> <operator pos:start="33:19" pos:end="33:19">&lt;</operator> <literal type="number" pos:start="33:21" pos:end="33:21">0</literal></expr>)</condition><block pos:start="33:23" pos:end="41:9">{<block_content pos:start="35:13" pos:end="39:46">

            <expr_stmt pos:start="35:13" pos:end="35:98"><expr pos:start="35:13" pos:end="35:97"><call pos:start="35:13" pos:end="35:97"><name pos:start="35:13" pos:end="35:18">av_log</name><argument_list pos:start="35:19" pos:end="35:97">(<argument pos:start="35:20" pos:end="35:27"><expr pos:start="35:20" pos:end="35:27"><name pos:start="35:20" pos:end="35:27"><name pos:start="35:20" pos:end="35:20">s</name><operator pos:start="35:21" pos:end="35:22">-&gt;</operator><name pos:start="35:23" pos:end="35:27">avctx</name></name></expr></argument>, <argument pos:start="35:30" pos:end="35:41"><expr pos:start="35:30" pos:end="35:41"><name pos:start="35:30" pos:end="35:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="35:44" pos:end="35:82"><expr pos:start="35:44" pos:end="35:82"><literal type="string" pos:start="35:44" pos:end="35:82">"dc overflow- block: %d qscale: %d//\n"</literal></expr></argument>, <argument pos:start="35:85" pos:end="35:85"><expr pos:start="35:85" pos:end="35:85"><name pos:start="35:85" pos:end="35:85">n</name></expr></argument>, <argument pos:start="35:88" pos:end="35:96"><expr pos:start="35:88" pos:end="35:96"><name pos:start="35:88" pos:end="35:96"><name pos:start="35:88" pos:end="35:88">s</name><operator pos:start="35:89" pos:end="35:90">-&gt;</operator><name pos:start="35:91" pos:end="35:96">qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="37:13" pos:end="39:46"><if pos:start="37:13" pos:end="37:44">if<condition pos:start="37:15" pos:end="37:35">(<expr pos:start="37:16" pos:end="37:34"><name pos:start="37:16" pos:end="37:34"><name pos:start="37:16" pos:end="37:16">s</name><operator pos:start="37:17" pos:end="37:18">-&gt;</operator><name pos:start="37:19" pos:end="37:34">inter_intra_pred</name></name></expr>)</condition><block type="pseudo" pos:start="37:37" pos:end="37:44"><block_content pos:start="37:37" pos:end="37:44"> <expr_stmt pos:start="37:37" pos:end="37:44"><expr pos:start="37:37" pos:end="37:43"><name pos:start="37:37" pos:end="37:41">level</name><operator pos:start="37:42" pos:end="37:42">=</operator><literal type="number" pos:start="37:43" pos:end="37:43">0</literal></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="39:13" pos:end="39:46">else<block type="pseudo" pos:start="39:37" pos:end="39:46"><block_content pos:start="39:37" pos:end="39:46">                    <return pos:start="39:37" pos:end="39:46">return <expr pos:start="39:44" pos:end="39:45"><operator pos:start="39:44" pos:end="39:44">-</operator><literal type="number" pos:start="39:45" pos:end="39:45">1</literal></expr>;</return></block_content></block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="43:9" pos:end="67:9"><if pos:start="43:9" pos:end="55:9">if <condition pos:start="43:12" pos:end="43:18">(<expr pos:start="43:13" pos:end="43:17"><name pos:start="43:13" pos:end="43:13">n</name> <operator pos:start="43:15" pos:end="43:15">&lt;</operator> <literal type="number" pos:start="43:17" pos:end="43:17">4</literal></expr>)</condition> <block pos:start="43:20" pos:end="55:9">{<block_content pos:start="45:13" pos:end="53:13">

            <expr_stmt pos:start="45:13" pos:end="45:46"><expr pos:start="45:13" pos:end="45:45"><name pos:start="45:13" pos:end="45:14">rl</name> <operator pos:start="45:16" pos:end="45:16">=</operator> <operator pos:start="45:18" pos:end="45:18">&amp;</operator><name pos:start="45:19" pos:end="45:45"><name pos:start="45:19" pos:end="45:26">rl_table</name><index pos:start="45:27" pos:end="45:45">[<expr pos:start="45:28" pos:end="45:44"><name pos:start="45:28" pos:end="45:44"><name pos:start="45:28" pos:end="45:28">s</name><operator pos:start="45:29" pos:end="45:30">-&gt;</operator><name pos:start="45:31" pos:end="45:44">rl_table_index</name></name></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="47:13" pos:end="53:13"><if pos:start="47:13" pos:end="53:13">if<condition pos:start="47:15" pos:end="47:41">(<expr pos:start="47:16" pos:end="47:40"><name pos:start="47:16" pos:end="47:20">level</name> <operator pos:start="47:22" pos:end="47:22">&gt;</operator> <literal type="number" pos:start="47:24" pos:end="47:26">256</literal><operator pos:start="47:27" pos:end="47:27">*</operator><name pos:start="47:28" pos:end="47:40"><name pos:start="47:28" pos:end="47:28">s</name><operator pos:start="47:29" pos:end="47:30">-&gt;</operator><name pos:start="47:31" pos:end="47:40">y_dc_scale</name></name></expr>)</condition><block pos:start="47:42" pos:end="53:13">{<block_content pos:start="49:17" pos:end="51:51">

                <expr_stmt pos:start="49:17" pos:end="49:91"><expr pos:start="49:17" pos:end="49:90"><call pos:start="49:17" pos:end="49:90"><name pos:start="49:17" pos:end="49:22">av_log</name><argument_list pos:start="49:23" pos:end="49:90">(<argument pos:start="49:24" pos:end="49:31"><expr pos:start="49:24" pos:end="49:31"><name pos:start="49:24" pos:end="49:31"><name pos:start="49:24" pos:end="49:24">s</name><operator pos:start="49:25" pos:end="49:26">-&gt;</operator><name pos:start="49:27" pos:end="49:31">avctx</name></name></expr></argument>, <argument pos:start="49:34" pos:end="49:45"><expr pos:start="49:34" pos:end="49:45"><name pos:start="49:34" pos:end="49:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="49:48" pos:end="49:78"><expr pos:start="49:48" pos:end="49:78"><literal type="string" pos:start="49:48" pos:end="49:78">"dc overflow+ L qscale: %d//\n"</literal></expr></argument>, <argument pos:start="49:81" pos:end="49:89"><expr pos:start="49:81" pos:end="49:89"><name pos:start="49:81" pos:end="49:89"><name pos:start="49:81" pos:end="49:81">s</name><operator pos:start="49:82" pos:end="49:83">-&gt;</operator><name pos:start="49:84" pos:end="49:89">qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="51:17" pos:end="51:51"><if pos:start="51:17" pos:end="51:51">if<condition pos:start="51:19" pos:end="51:40">(<expr pos:start="51:20" pos:end="51:39"><operator pos:start="51:20" pos:end="51:20">!</operator><name pos:start="51:21" pos:end="51:39"><name pos:start="51:21" pos:end="51:21">s</name><operator pos:start="51:22" pos:end="51:23">-&gt;</operator><name pos:start="51:24" pos:end="51:39">inter_intra_pred</name></name></expr>)</condition><block type="pseudo" pos:start="51:42" pos:end="51:51"><block_content pos:start="51:42" pos:end="51:51"> <return pos:start="51:42" pos:end="51:51">return <expr pos:start="51:49" pos:end="51:50"><operator pos:start="51:49" pos:end="51:49">-</operator><literal type="number" pos:start="51:50" pos:end="51:50">1</literal></expr>;</return></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="55:11" pos:end="67:9">else <block pos:start="55:16" pos:end="67:9">{<block_content pos:start="57:13" pos:end="65:13">

            <expr_stmt pos:start="57:13" pos:end="57:57"><expr pos:start="57:13" pos:end="57:56"><name pos:start="57:13" pos:end="57:14">rl</name> <operator pos:start="57:16" pos:end="57:16">=</operator> <operator pos:start="57:18" pos:end="57:18">&amp;</operator><name pos:start="57:19" pos:end="57:56"><name pos:start="57:19" pos:end="57:26">rl_table</name><index pos:start="57:27" pos:end="57:56">[<expr pos:start="57:28" pos:end="57:55"><literal type="number" pos:start="57:28" pos:end="57:30">3</literal> <operator pos:start="57:30" pos:end="57:30">+</operator> <name pos:start="57:32" pos:end="57:55"><name pos:start="57:32" pos:end="57:32">s</name><operator pos:start="57:33" pos:end="57:34">-&gt;</operator><name pos:start="57:35" pos:end="57:55">rl_chroma_table_index</name></name></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="59:13" pos:end="65:13"><if pos:start="59:13" pos:end="65:13">if<condition pos:start="59:15" pos:end="59:41">(<expr pos:start="59:16" pos:end="59:40"><name pos:start="59:16" pos:end="59:20">level</name> <operator pos:start="59:22" pos:end="59:22">&gt;</operator> <literal type="number" pos:start="59:24" pos:end="59:26">256</literal><operator pos:start="59:27" pos:end="59:27">*</operator><name pos:start="59:28" pos:end="59:40"><name pos:start="59:28" pos:end="59:28">s</name><operator pos:start="59:29" pos:end="59:30">-&gt;</operator><name pos:start="59:31" pos:end="59:40">c_dc_scale</name></name></expr>)</condition><block pos:start="59:42" pos:end="65:13">{<block_content pos:start="61:17" pos:end="63:51">

                <expr_stmt pos:start="61:17" pos:end="61:91"><expr pos:start="61:17" pos:end="61:90"><call pos:start="61:17" pos:end="61:90"><name pos:start="61:17" pos:end="61:22">av_log</name><argument_list pos:start="61:23" pos:end="61:90">(<argument pos:start="61:24" pos:end="61:31"><expr pos:start="61:24" pos:end="61:31"><name pos:start="61:24" pos:end="61:31"><name pos:start="61:24" pos:end="61:24">s</name><operator pos:start="61:25" pos:end="61:26">-&gt;</operator><name pos:start="61:27" pos:end="61:31">avctx</name></name></expr></argument>, <argument pos:start="61:34" pos:end="61:45"><expr pos:start="61:34" pos:end="61:45"><name pos:start="61:34" pos:end="61:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="61:48" pos:end="61:78"><expr pos:start="61:48" pos:end="61:78"><literal type="string" pos:start="61:48" pos:end="61:78">"dc overflow+ C qscale: %d//\n"</literal></expr></argument>, <argument pos:start="61:81" pos:end="61:89"><expr pos:start="61:81" pos:end="61:89"><name pos:start="61:81" pos:end="61:89"><name pos:start="61:81" pos:end="61:81">s</name><operator pos:start="61:82" pos:end="61:83">-&gt;</operator><name pos:start="61:84" pos:end="61:89">qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="63:17" pos:end="63:51"><if pos:start="63:17" pos:end="63:51">if<condition pos:start="63:19" pos:end="63:40">(<expr pos:start="63:20" pos:end="63:39"><operator pos:start="63:20" pos:end="63:20">!</operator><name pos:start="63:21" pos:end="63:39"><name pos:start="63:21" pos:end="63:21">s</name><operator pos:start="63:22" pos:end="63:23">-&gt;</operator><name pos:start="63:24" pos:end="63:39">inter_intra_pred</name></name></expr>)</condition><block type="pseudo" pos:start="63:42" pos:end="63:51"><block_content pos:start="63:42" pos:end="63:51"> <return pos:start="63:42" pos:end="63:51">return <expr pos:start="63:49" pos:end="63:50"><operator pos:start="63:49" pos:end="63:49">-</operator><literal type="number" pos:start="63:50" pos:end="63:50">1</literal></expr>;</return></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:25"><expr pos:start="69:9" pos:end="69:24"><name pos:start="69:9" pos:end="69:16"><name pos:start="69:9" pos:end="69:13">block</name><index pos:start="69:14" pos:end="69:16">[<expr pos:start="69:15" pos:end="69:15"><literal type="number" pos:start="69:15" pos:end="69:15">0</literal></expr>]</index></name> <operator pos:start="69:18" pos:end="69:18">=</operator> <name pos:start="69:20" pos:end="69:24">level</name></expr>;</expr_stmt>



        <expr_stmt pos:start="73:9" pos:end="73:43"><expr pos:start="73:9" pos:end="73:42"><name pos:start="73:9" pos:end="73:16">run_diff</name> <operator pos:start="73:18" pos:end="73:18">=</operator> <name pos:start="73:20" pos:end="73:37"><name pos:start="73:20" pos:end="73:20">s</name><operator pos:start="73:21" pos:end="73:22">-&gt;</operator><name pos:start="73:23" pos:end="73:37">msmpeg4_version</name></name> <operator pos:start="73:39" pos:end="73:40">&gt;=</operator> <literal type="number" pos:start="73:42" pos:end="73:42">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:14"><expr pos:start="75:9" pos:end="75:13"><name pos:start="75:9" pos:end="75:9">i</name> <operator pos:start="75:11" pos:end="75:11">=</operator> <literal type="number" pos:start="75:13" pos:end="75:13">0</literal></expr>;</expr_stmt>

        <if_stmt pos:start="77:9" pos:end="81:9"><if pos:start="77:9" pos:end="81:9">if <condition pos:start="77:12" pos:end="77:19">(<expr pos:start="77:13" pos:end="77:18"><operator pos:start="77:13" pos:end="77:13">!</operator><name pos:start="77:14" pos:end="77:18">coded</name></expr>)</condition> <block pos:start="77:21" pos:end="81:9">{<block_content pos:start="79:13" pos:end="79:27">

            <goto pos:start="79:13" pos:end="79:27">goto <name pos:start="79:18" pos:end="79:26">not_coded</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="83:9" pos:end="97:9"><if pos:start="83:9" pos:end="93:9">if <condition pos:start="83:12" pos:end="83:23">(<expr pos:start="83:13" pos:end="83:22"><name pos:start="83:13" pos:end="83:22"><name pos:start="83:13" pos:end="83:13">s</name><operator pos:start="83:14" pos:end="83:15">-&gt;</operator><name pos:start="83:16" pos:end="83:22">ac_pred</name></name></expr>)</condition> <block pos:start="83:25" pos:end="93:9">{<block_content pos:start="85:13" pos:end="91:61">

            <if_stmt pos:start="85:13" pos:end="91:61"><if pos:start="85:13" pos:end="87:61">if <condition pos:start="85:16" pos:end="85:33">(<expr pos:start="85:17" pos:end="85:32"><name pos:start="85:17" pos:end="85:27">dc_pred_dir</name> <operator pos:start="85:29" pos:end="85:30">==</operator> <literal type="number" pos:start="85:32" pos:end="85:32">0</literal></expr>)</condition><block type="pseudo" pos:start="87:17" pos:end="87:61"><block_content pos:start="87:17" pos:end="87:61">

                <expr_stmt pos:start="87:17" pos:end="87:61"><expr pos:start="87:17" pos:end="87:60"><name pos:start="87:17" pos:end="87:26">scan_table</name> <operator pos:start="87:28" pos:end="87:28">=</operator> <name pos:start="87:30" pos:end="87:60"><name pos:start="87:30" pos:end="87:30">s</name><operator pos:start="87:31" pos:end="87:32">-&gt;</operator><name pos:start="87:33" pos:end="87:49">intra_v_scantable</name><operator pos:start="87:50" pos:end="87:50">.</operator><name pos:start="87:51" pos:end="87:60">permutated</name></name></expr>;</expr_stmt></block_content></block></if> <comment type="block" pos:start="87:63" pos:end="87:72">/* left */</comment>

            <else pos:start="89:13" pos:end="91:61">else<block type="pseudo" pos:start="91:17" pos:end="91:61"><block_content pos:start="91:17" pos:end="91:61">

                <expr_stmt pos:start="91:17" pos:end="91:61"><expr pos:start="91:17" pos:end="91:60"><name pos:start="91:17" pos:end="91:26">scan_table</name> <operator pos:start="91:28" pos:end="91:28">=</operator> <name pos:start="91:30" pos:end="91:60"><name pos:start="91:30" pos:end="91:30">s</name><operator pos:start="91:31" pos:end="91:32">-&gt;</operator><name pos:start="91:33" pos:end="91:49">intra_h_scantable</name><operator pos:start="91:50" pos:end="91:50">.</operator><name pos:start="91:51" pos:end="91:60">permutated</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt> <comment type="block" pos:start="91:63" pos:end="91:71">/* top */</comment>

        </block_content>}</block></if> <else pos:start="93:11" pos:end="97:9">else <block pos:start="93:16" pos:end="97:9">{<block_content pos:start="95:13" pos:end="95:55">

            <expr_stmt pos:start="95:13" pos:end="95:55"><expr pos:start="95:13" pos:end="95:54"><name pos:start="95:13" pos:end="95:22">scan_table</name> <operator pos:start="95:24" pos:end="95:24">=</operator> <name pos:start="95:26" pos:end="95:54"><name pos:start="95:26" pos:end="95:26">s</name><operator pos:start="95:27" pos:end="95:28">-&gt;</operator><name pos:start="95:29" pos:end="95:43">intra_scantable</name><operator pos:start="95:44" pos:end="95:44">.</operator><name pos:start="95:45" pos:end="95:54">permutated</name></name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:30"><expr pos:start="99:9" pos:end="99:29"><name pos:start="99:9" pos:end="99:14">rl_vlc</name><operator pos:start="99:15" pos:end="99:15">=</operator> <name pos:start="99:17" pos:end="99:29"><name pos:start="99:17" pos:end="99:18">rl</name><operator pos:start="99:19" pos:end="99:20">-&gt;</operator><name pos:start="99:21" pos:end="99:26">rl_vlc</name><index pos:start="99:27" pos:end="99:29">[<expr pos:start="99:28" pos:end="99:28"><literal type="number" pos:start="99:28" pos:end="99:28">0</literal></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="101:7" pos:end="137:5">else <block pos:start="101:12" pos:end="137:5">{<block_content pos:start="103:9" pos:end="135:38">

        <expr_stmt pos:start="103:9" pos:end="103:30"><expr pos:start="103:9" pos:end="103:29"><name pos:start="103:9" pos:end="103:12">qmul</name> <operator pos:start="103:14" pos:end="103:14">=</operator> <name pos:start="103:16" pos:end="103:24"><name pos:start="103:16" pos:end="103:16">s</name><operator pos:start="103:17" pos:end="103:18">-&gt;</operator><name pos:start="103:19" pos:end="103:24">qscale</name></name> <operator pos:start="103:26" pos:end="103:27">&lt;&lt;</operator> <literal type="number" pos:start="103:29" pos:end="103:29">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:35"><expr pos:start="105:9" pos:end="105:34"><name pos:start="105:9" pos:end="105:12">qadd</name> <operator pos:start="105:14" pos:end="105:14">=</operator> <operator pos:start="105:16" pos:end="105:16">(</operator><name pos:start="105:17" pos:end="105:25"><name pos:start="105:17" pos:end="105:17">s</name><operator pos:start="105:18" pos:end="105:19">-&gt;</operator><name pos:start="105:20" pos:end="105:25">qscale</name></name> <operator pos:start="105:27" pos:end="105:27">-</operator> <literal type="number" pos:start="105:29" pos:end="105:29">1</literal><operator pos:start="105:30" pos:end="105:30">)</operator> <operator pos:start="105:32" pos:end="105:32">|</operator> <literal type="number" pos:start="105:34" pos:end="105:34">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:15"><expr pos:start="107:9" pos:end="107:14"><name pos:start="107:9" pos:end="107:9">i</name> <operator pos:start="107:11" pos:end="107:11">=</operator> <operator pos:start="107:13" pos:end="107:13">-</operator><literal type="number" pos:start="107:14" pos:end="107:14">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:46"><expr pos:start="109:9" pos:end="109:45"><name pos:start="109:9" pos:end="109:10">rl</name> <operator pos:start="109:12" pos:end="109:12">=</operator> <operator pos:start="109:14" pos:end="109:14">&amp;</operator><name pos:start="109:15" pos:end="109:45"><name pos:start="109:15" pos:end="109:22">rl_table</name><index pos:start="109:23" pos:end="109:45">[<expr pos:start="109:24" pos:end="109:44"><literal type="number" pos:start="109:24" pos:end="109:26">3</literal> <operator pos:start="109:26" pos:end="109:26">+</operator> <name pos:start="109:28" pos:end="109:44"><name pos:start="109:28" pos:end="109:28">s</name><operator pos:start="109:29" pos:end="109:30">-&gt;</operator><name pos:start="109:31" pos:end="109:44">rl_table_index</name></name></expr>]</index></name></expr>;</expr_stmt>



        <if_stmt pos:start="113:9" pos:end="119:25"><if pos:start="113:9" pos:end="115:25">if<condition pos:start="113:11" pos:end="113:33">(<expr pos:start="113:12" pos:end="113:32"><name pos:start="113:12" pos:end="113:29"><name pos:start="113:12" pos:end="113:12">s</name><operator pos:start="113:13" pos:end="113:14">-&gt;</operator><name pos:start="113:15" pos:end="113:29">msmpeg4_version</name></name><operator pos:start="113:30" pos:end="113:31">==</operator><literal type="number" pos:start="113:32" pos:end="113:32">2</literal></expr>)</condition><block type="pseudo" pos:start="115:13" pos:end="115:25"><block_content pos:start="115:13" pos:end="115:25">

            <expr_stmt pos:start="115:13" pos:end="115:25"><expr pos:start="115:13" pos:end="115:24"><name pos:start="115:13" pos:end="115:20">run_diff</name> <operator pos:start="115:22" pos:end="115:22">=</operator> <literal type="number" pos:start="115:24" pos:end="115:24">0</literal></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="117:9" pos:end="119:25">else<block type="pseudo" pos:start="119:13" pos:end="119:25"><block_content pos:start="119:13" pos:end="119:25">

            <expr_stmt pos:start="119:13" pos:end="119:25"><expr pos:start="119:13" pos:end="119:24"><name pos:start="119:13" pos:end="119:20">run_diff</name> <operator pos:start="119:22" pos:end="119:22">=</operator> <literal type="number" pos:start="119:24" pos:end="119:24">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <if_stmt pos:start="123:9" pos:end="129:9"><if pos:start="123:9" pos:end="129:9">if <condition pos:start="123:12" pos:end="123:19">(<expr pos:start="123:13" pos:end="123:18"><operator pos:start="123:13" pos:end="123:13">!</operator><name pos:start="123:14" pos:end="123:18">coded</name></expr>)</condition> <block pos:start="123:21" pos:end="129:9">{<block_content pos:start="125:13" pos:end="127:21">

            <expr_stmt pos:start="125:13" pos:end="125:39"><expr pos:start="125:13" pos:end="125:38"><name pos:start="125:13" pos:end="125:34"><name pos:start="125:13" pos:end="125:13">s</name><operator pos:start="125:14" pos:end="125:15">-&gt;</operator><name pos:start="125:16" pos:end="125:31">block_last_index</name><index pos:start="125:32" pos:end="125:34">[<expr pos:start="125:33" pos:end="125:33"><name pos:start="125:33" pos:end="125:33">n</name></expr>]</index></name> <operator pos:start="125:36" pos:end="125:36">=</operator> <name pos:start="125:38" pos:end="125:38">i</name></expr>;</expr_stmt>

            <return pos:start="127:13" pos:end="127:21">return <expr pos:start="127:20" pos:end="127:20"><literal type="number" pos:start="127:20" pos:end="127:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="131:9" pos:end="133:55"><if pos:start="131:9" pos:end="133:55">if<condition pos:start="131:11" pos:end="131:23">(<expr pos:start="131:12" pos:end="131:22"><operator pos:start="131:12" pos:end="131:12">!</operator><name pos:start="131:13" pos:end="131:22">scan_table</name></expr>)</condition><block type="pseudo" pos:start="133:13" pos:end="133:55"><block_content pos:start="133:13" pos:end="133:55">

            <expr_stmt pos:start="133:13" pos:end="133:55"><expr pos:start="133:13" pos:end="133:54"><name pos:start="133:13" pos:end="133:22">scan_table</name> <operator pos:start="133:24" pos:end="133:24">=</operator> <name pos:start="133:26" pos:end="133:54"><name pos:start="133:26" pos:end="133:26">s</name><operator pos:start="133:27" pos:end="133:28">-&gt;</operator><name pos:start="133:29" pos:end="133:43">inter_scantable</name><operator pos:start="133:44" pos:end="133:44">.</operator><name pos:start="133:45" pos:end="133:54">permutated</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:38"><expr pos:start="135:9" pos:end="135:37"><name pos:start="135:9" pos:end="135:14">rl_vlc</name><operator pos:start="135:15" pos:end="135:15">=</operator> <name pos:start="135:17" pos:end="135:37"><name pos:start="135:17" pos:end="135:18">rl</name><operator pos:start="135:19" pos:end="135:20">-&gt;</operator><name pos:start="135:21" pos:end="135:26">rl_vlc</name><index pos:start="135:27" pos:end="135:37">[<expr pos:start="135:28" pos:end="135:36"><name pos:start="135:28" pos:end="135:36"><name pos:start="135:28" pos:end="135:28">s</name><operator pos:start="135:29" pos:end="135:30">-&gt;</operator><name pos:start="135:31" pos:end="135:36">qscale</name></name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

  <block pos:start="139:3" pos:end="467:3">{<block_content pos:start="141:5" pos:end="465:29">

    <expr_stmt pos:start="141:5" pos:end="141:28"><expr pos:start="141:5" pos:end="141:27"><call pos:start="141:5" pos:end="141:27"><name pos:start="141:5" pos:end="141:15">OPEN_READER</name><argument_list pos:start="141:16" pos:end="141:27">(<argument pos:start="141:17" pos:end="141:18"><expr pos:start="141:17" pos:end="141:18"><name pos:start="141:17" pos:end="141:18">re</name></expr></argument>, <argument pos:start="141:21" pos:end="141:26"><expr pos:start="141:21" pos:end="141:26"><operator pos:start="141:21" pos:end="141:21">&amp;</operator><name pos:start="141:22" pos:end="141:26"><name pos:start="141:22" pos:end="141:22">s</name><operator pos:start="141:23" pos:end="141:24">-&gt;</operator><name pos:start="141:25" pos:end="141:26">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="143:5" pos:end="463:5">for<control pos:start="143:8" pos:end="143:11">(<init pos:start="143:9" pos:end="143:9">;</init><condition pos:start="143:10" pos:end="143:10">;</condition><incr/>)</control> <block pos:start="143:13" pos:end="463:5">{<block_content pos:start="145:9" pos:end="461:37">

        <expr_stmt pos:start="145:9" pos:end="145:33"><expr pos:start="145:9" pos:end="145:32"><call pos:start="145:9" pos:end="145:32"><name pos:start="145:9" pos:end="145:20">UPDATE_CACHE</name><argument_list pos:start="145:21" pos:end="145:32">(<argument pos:start="145:22" pos:end="145:23"><expr pos:start="145:22" pos:end="145:23"><name pos:start="145:22" pos:end="145:23">re</name></expr></argument>, <argument pos:start="145:26" pos:end="145:31"><expr pos:start="145:26" pos:end="145:31"><operator pos:start="145:26" pos:end="145:26">&amp;</operator><name pos:start="145:27" pos:end="145:31"><name pos:start="145:27" pos:end="145:27">s</name><operator pos:start="145:28" pos:end="145:29">-&gt;</operator><name pos:start="145:30" pos:end="145:31">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:71"><expr pos:start="147:9" pos:end="147:70"><call pos:start="147:9" pos:end="147:70"><name pos:start="147:9" pos:end="147:18">GET_RL_VLC</name><argument_list pos:start="147:19" pos:end="147:70">(<argument pos:start="147:20" pos:end="147:24"><expr pos:start="147:20" pos:end="147:24"><name pos:start="147:20" pos:end="147:24">level</name></expr></argument>, <argument pos:start="147:27" pos:end="147:29"><expr pos:start="147:27" pos:end="147:29"><name pos:start="147:27" pos:end="147:29">run</name></expr></argument>, <argument pos:start="147:32" pos:end="147:33"><expr pos:start="147:32" pos:end="147:33"><name pos:start="147:32" pos:end="147:33">re</name></expr></argument>, <argument pos:start="147:36" pos:end="147:41"><expr pos:start="147:36" pos:end="147:41"><operator pos:start="147:36" pos:end="147:36">&amp;</operator><name pos:start="147:37" pos:end="147:41"><name pos:start="147:37" pos:end="147:37">s</name><operator pos:start="147:38" pos:end="147:39">-&gt;</operator><name pos:start="147:40" pos:end="147:41">gb</name></name></expr></argument>, <argument pos:start="147:44" pos:end="147:49"><expr pos:start="147:44" pos:end="147:49"><name pos:start="147:44" pos:end="147:49">rl_vlc</name></expr></argument>, <argument pos:start="147:52" pos:end="147:63"><expr pos:start="147:52" pos:end="147:63"><name pos:start="147:52" pos:end="147:63">TEX_VLC_BITS</name></expr></argument>, <argument pos:start="147:66" pos:end="147:66"><expr pos:start="147:66" pos:end="147:66"><literal type="number" pos:start="147:66" pos:end="147:66">2</literal></expr></argument>, <argument pos:start="147:69" pos:end="147:69"><expr pos:start="147:69" pos:end="147:69"><literal type="number" pos:start="147:69" pos:end="147:69">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="149:9" pos:end="425:9"><if pos:start="149:9" pos:end="405:9">if <condition pos:start="149:12" pos:end="149:21">(<expr pos:start="149:13" pos:end="149:20"><name pos:start="149:13" pos:end="149:17">level</name><operator pos:start="149:18" pos:end="149:19">==</operator><literal type="number" pos:start="149:20" pos:end="149:20">0</literal></expr>)</condition> <block pos:start="149:23" pos:end="405:9">{<block_content pos:start="151:13" pos:end="403:13">

            <decl_stmt pos:start="151:13" pos:end="151:22"><decl pos:start="151:13" pos:end="151:21"><type pos:start="151:13" pos:end="151:15"><name pos:start="151:13" pos:end="151:15">int</name></type> <name pos:start="151:17" pos:end="151:21">cache</name></decl>;</decl_stmt>

            <expr_stmt pos:start="153:13" pos:end="153:41"><expr pos:start="153:13" pos:end="153:40"><name pos:start="153:13" pos:end="153:17">cache</name><operator pos:start="153:18" pos:end="153:18">=</operator> <call pos:start="153:20" pos:end="153:40"><name pos:start="153:20" pos:end="153:28">GET_CACHE</name><argument_list pos:start="153:29" pos:end="153:40">(<argument pos:start="153:30" pos:end="153:31"><expr pos:start="153:30" pos:end="153:31"><name pos:start="153:30" pos:end="153:31">re</name></expr></argument>, <argument pos:start="153:34" pos:end="153:39"><expr pos:start="153:34" pos:end="153:39"><operator pos:start="153:34" pos:end="153:34">&amp;</operator><name pos:start="153:35" pos:end="153:39"><name pos:start="153:35" pos:end="153:35">s</name><operator pos:start="153:36" pos:end="153:37">-&gt;</operator><name pos:start="153:38" pos:end="153:39">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="155:13" pos:end="155:24">/* escape */</comment>

            <if_stmt pos:start="157:13" pos:end="403:13"><if pos:start="157:13" pos:end="365:13">if <condition pos:start="157:16" pos:end="157:63">(<expr pos:start="157:17" pos:end="157:62"><name pos:start="157:17" pos:end="157:34"><name pos:start="157:17" pos:end="157:17">s</name><operator pos:start="157:18" pos:end="157:19">-&gt;</operator><name pos:start="157:20" pos:end="157:34">msmpeg4_version</name></name><operator pos:start="157:35" pos:end="157:36">==</operator><literal type="number" pos:start="157:37" pos:end="157:37">1</literal> <operator pos:start="157:39" pos:end="157:40">||</operator> <operator pos:start="157:42" pos:end="157:42">(</operator><name pos:start="157:43" pos:end="157:47">cache</name><operator pos:start="157:48" pos:end="157:48">&amp;</operator><literal type="number" pos:start="157:49" pos:end="157:58">0x80000000</literal><operator pos:start="157:59" pos:end="157:59">)</operator><operator pos:start="157:60" pos:end="157:61">==</operator><literal type="number" pos:start="157:62" pos:end="157:62">0</literal></expr>)</condition> <block pos:start="157:65" pos:end="365:13">{<block_content pos:start="159:17" pos:end="363:17">

                <if_stmt pos:start="159:17" pos:end="363:17"><if pos:start="159:17" pos:end="327:17">if <condition pos:start="159:20" pos:end="159:67">(<expr pos:start="159:21" pos:end="159:66"><name pos:start="159:21" pos:end="159:38"><name pos:start="159:21" pos:end="159:21">s</name><operator pos:start="159:22" pos:end="159:23">-&gt;</operator><name pos:start="159:24" pos:end="159:38">msmpeg4_version</name></name><operator pos:start="159:39" pos:end="159:40">==</operator><literal type="number" pos:start="159:41" pos:end="159:41">1</literal> <operator pos:start="159:43" pos:end="159:44">||</operator> <operator pos:start="159:46" pos:end="159:46">(</operator><name pos:start="159:47" pos:end="159:51">cache</name><operator pos:start="159:52" pos:end="159:52">&amp;</operator><literal type="number" pos:start="159:53" pos:end="159:62">0x40000000</literal><operator pos:start="159:63" pos:end="159:63">)</operator><operator pos:start="159:64" pos:end="159:65">==</operator><literal type="number" pos:start="159:66" pos:end="159:66">0</literal></expr>)</condition> <block pos:start="159:69" pos:end="327:17">{<block_content pos:start="163:21" pos:end="326:0">

                    <comment type="block" pos:start="161:21" pos:end="161:38">/* third escape */</comment>

                    <if_stmt pos:start="163:21" pos:end="163:76"><if pos:start="163:21" pos:end="163:76">if<condition pos:start="163:23" pos:end="163:45">(<expr pos:start="163:24" pos:end="163:44"><name pos:start="163:24" pos:end="163:41"><name pos:start="163:24" pos:end="163:24">s</name><operator pos:start="163:25" pos:end="163:26">-&gt;</operator><name pos:start="163:27" pos:end="163:41">msmpeg4_version</name></name><operator pos:start="163:42" pos:end="163:43">!=</operator><literal type="number" pos:start="163:44" pos:end="163:44">1</literal></expr>)</condition><block type="pseudo" pos:start="163:47" pos:end="163:76"><block_content pos:start="163:47" pos:end="163:76"> <expr_stmt pos:start="163:47" pos:end="163:76"><expr pos:start="163:47" pos:end="163:75"><call pos:start="163:47" pos:end="163:75"><name pos:start="163:47" pos:end="163:60">LAST_SKIP_BITS</name><argument_list pos:start="163:61" pos:end="163:75">(<argument pos:start="163:62" pos:end="163:63"><expr pos:start="163:62" pos:end="163:63"><name pos:start="163:62" pos:end="163:63">re</name></expr></argument>, <argument pos:start="163:66" pos:end="163:71"><expr pos:start="163:66" pos:end="163:71"><operator pos:start="163:66" pos:end="163:66">&amp;</operator><name pos:start="163:67" pos:end="163:71"><name pos:start="163:67" pos:end="163:67">s</name><operator pos:start="163:68" pos:end="163:69">-&gt;</operator><name pos:start="163:70" pos:end="163:71">gb</name></name></expr></argument>, <argument pos:start="163:74" pos:end="163:74"><expr pos:start="163:74" pos:end="163:74"><literal type="number" pos:start="163:74" pos:end="163:74">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="165:21" pos:end="165:45"><expr pos:start="165:21" pos:end="165:44"><call pos:start="165:21" pos:end="165:44"><name pos:start="165:21" pos:end="165:32">UPDATE_CACHE</name><argument_list pos:start="165:33" pos:end="165:44">(<argument pos:start="165:34" pos:end="165:35"><expr pos:start="165:34" pos:end="165:35"><name pos:start="165:34" pos:end="165:35">re</name></expr></argument>, <argument pos:start="165:38" pos:end="165:43"><expr pos:start="165:38" pos:end="165:43"><operator pos:start="165:38" pos:end="165:38">&amp;</operator><name pos:start="165:39" pos:end="165:43"><name pos:start="165:39" pos:end="165:39">s</name><operator pos:start="165:40" pos:end="165:41">-&gt;</operator><name pos:start="165:42" pos:end="165:43">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="167:21" pos:end="292:0"><if pos:start="167:21" pos:end="177:21">if<condition pos:start="167:23" pos:end="167:45">(<expr pos:start="167:24" pos:end="167:44"><name pos:start="167:24" pos:end="167:41"><name pos:start="167:24" pos:end="167:24">s</name><operator pos:start="167:25" pos:end="167:26">-&gt;</operator><name pos:start="167:27" pos:end="167:41">msmpeg4_version</name></name><operator pos:start="167:42" pos:end="167:43">&lt;=</operator><literal type="number" pos:start="167:44" pos:end="167:44">3</literal></expr>)</condition><block pos:start="167:46" pos:end="177:21">{<block_content pos:start="169:25" pos:end="175:56">

                        <expr_stmt pos:start="169:25" pos:end="169:57"><expr pos:start="169:25" pos:end="169:56"><name pos:start="169:25" pos:end="169:28">last</name><operator pos:start="169:29" pos:end="169:29">=</operator>  <call pos:start="169:32" pos:end="169:56"><name pos:start="169:32" pos:end="169:41">SHOW_UBITS</name><argument_list pos:start="169:42" pos:end="169:56">(<argument pos:start="169:43" pos:end="169:44"><expr pos:start="169:43" pos:end="169:44"><name pos:start="169:43" pos:end="169:44">re</name></expr></argument>, <argument pos:start="169:47" pos:end="169:52"><expr pos:start="169:47" pos:end="169:52"><operator pos:start="169:47" pos:end="169:47">&amp;</operator><name pos:start="169:48" pos:end="169:52"><name pos:start="169:48" pos:end="169:48">s</name><operator pos:start="169:49" pos:end="169:50">-&gt;</operator><name pos:start="169:51" pos:end="169:52">gb</name></name></expr></argument>, <argument pos:start="169:55" pos:end="169:55"><expr pos:start="169:55" pos:end="169:55"><literal type="number" pos:start="169:55" pos:end="169:55">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="169:59" pos:end="169:84"><expr pos:start="169:59" pos:end="169:83"><call pos:start="169:59" pos:end="169:83"><name pos:start="169:59" pos:end="169:68">SKIP_CACHE</name><argument_list pos:start="169:69" pos:end="169:83">(<argument pos:start="169:70" pos:end="169:71"><expr pos:start="169:70" pos:end="169:71"><name pos:start="169:70" pos:end="169:71">re</name></expr></argument>, <argument pos:start="169:74" pos:end="169:79"><expr pos:start="169:74" pos:end="169:79"><operator pos:start="169:74" pos:end="169:74">&amp;</operator><name pos:start="169:75" pos:end="169:79"><name pos:start="169:75" pos:end="169:75">s</name><operator pos:start="169:76" pos:end="169:77">-&gt;</operator><name pos:start="169:78" pos:end="169:79">gb</name></name></expr></argument>, <argument pos:start="169:82" pos:end="169:82"><expr pos:start="169:82" pos:end="169:82"><literal type="number" pos:start="169:82" pos:end="169:82">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="171:25" pos:end="171:57"><expr pos:start="171:25" pos:end="171:56"><name pos:start="171:25" pos:end="171:27">run</name><operator pos:start="171:28" pos:end="171:28">=</operator>   <call pos:start="171:32" pos:end="171:56"><name pos:start="171:32" pos:end="171:41">SHOW_UBITS</name><argument_list pos:start="171:42" pos:end="171:56">(<argument pos:start="171:43" pos:end="171:44"><expr pos:start="171:43" pos:end="171:44"><name pos:start="171:43" pos:end="171:44">re</name></expr></argument>, <argument pos:start="171:47" pos:end="171:52"><expr pos:start="171:47" pos:end="171:52"><operator pos:start="171:47" pos:end="171:47">&amp;</operator><name pos:start="171:48" pos:end="171:52"><name pos:start="171:48" pos:end="171:48">s</name><operator pos:start="171:49" pos:end="171:50">-&gt;</operator><name pos:start="171:51" pos:end="171:52">gb</name></name></expr></argument>, <argument pos:start="171:55" pos:end="171:55"><expr pos:start="171:55" pos:end="171:55"><literal type="number" pos:start="171:55" pos:end="171:55">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="171:59" pos:end="171:84"><expr pos:start="171:59" pos:end="171:83"><call pos:start="171:59" pos:end="171:83"><name pos:start="171:59" pos:end="171:68">SKIP_CACHE</name><argument_list pos:start="171:69" pos:end="171:83">(<argument pos:start="171:70" pos:end="171:71"><expr pos:start="171:70" pos:end="171:71"><name pos:start="171:70" pos:end="171:71">re</name></expr></argument>, <argument pos:start="171:74" pos:end="171:79"><expr pos:start="171:74" pos:end="171:79"><operator pos:start="171:74" pos:end="171:74">&amp;</operator><name pos:start="171:75" pos:end="171:79"><name pos:start="171:75" pos:end="171:75">s</name><operator pos:start="171:76" pos:end="171:77">-&gt;</operator><name pos:start="171:78" pos:end="171:79">gb</name></name></expr></argument>, <argument pos:start="171:82" pos:end="171:82"><expr pos:start="171:82" pos:end="171:82"><literal type="number" pos:start="171:82" pos:end="171:82">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="173:25" pos:end="173:57"><expr pos:start="173:25" pos:end="173:56"><name pos:start="173:25" pos:end="173:29">level</name><operator pos:start="173:30" pos:end="173:30">=</operator> <call pos:start="173:32" pos:end="173:56"><name pos:start="173:32" pos:end="173:41">SHOW_SBITS</name><argument_list pos:start="173:42" pos:end="173:56">(<argument pos:start="173:43" pos:end="173:44"><expr pos:start="173:43" pos:end="173:44"><name pos:start="173:43" pos:end="173:44">re</name></expr></argument>, <argument pos:start="173:47" pos:end="173:52"><expr pos:start="173:47" pos:end="173:52"><operator pos:start="173:47" pos:end="173:47">&amp;</operator><name pos:start="173:48" pos:end="173:52"><name pos:start="173:48" pos:end="173:48">s</name><operator pos:start="173:49" pos:end="173:50">-&gt;</operator><name pos:start="173:51" pos:end="173:52">gb</name></name></expr></argument>, <argument pos:start="173:55" pos:end="173:55"><expr pos:start="173:55" pos:end="173:55"><literal type="number" pos:start="173:55" pos:end="173:55">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="173:59" pos:end="173:89"><expr pos:start="173:59" pos:end="173:88"><call pos:start="173:59" pos:end="173:88"><name pos:start="173:59" pos:end="173:73">LAST_SKIP_CACHE</name><argument_list pos:start="173:74" pos:end="173:88">(<argument pos:start="173:75" pos:end="173:76"><expr pos:start="173:75" pos:end="173:76"><name pos:start="173:75" pos:end="173:76">re</name></expr></argument>, <argument pos:start="173:79" pos:end="173:84"><expr pos:start="173:79" pos:end="173:84"><operator pos:start="173:79" pos:end="173:79">&amp;</operator><name pos:start="173:80" pos:end="173:84"><name pos:start="173:80" pos:end="173:80">s</name><operator pos:start="173:81" pos:end="173:82">-&gt;</operator><name pos:start="173:83" pos:end="173:84">gb</name></name></expr></argument>, <argument pos:start="173:87" pos:end="173:87"><expr pos:start="173:87" pos:end="173:87"><literal type="number" pos:start="173:87" pos:end="173:87">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="175:25" pos:end="175:56"><expr pos:start="175:25" pos:end="175:55"><call pos:start="175:25" pos:end="175:55"><name pos:start="175:25" pos:end="175:36">SKIP_COUNTER</name><argument_list pos:start="175:37" pos:end="175:55">(<argument pos:start="175:38" pos:end="175:39"><expr pos:start="175:38" pos:end="175:39"><name pos:start="175:38" pos:end="175:39">re</name></expr></argument>, <argument pos:start="175:42" pos:end="175:47"><expr pos:start="175:42" pos:end="175:47"><operator pos:start="175:42" pos:end="175:42">&amp;</operator><name pos:start="175:43" pos:end="175:47"><name pos:start="175:43" pos:end="175:43">s</name><operator pos:start="175:44" pos:end="175:45">-&gt;</operator><name pos:start="175:46" pos:end="175:47">gb</name></name></expr></argument>, <argument pos:start="175:50" pos:end="175:54"><expr pos:start="175:50" pos:end="175:54"><literal type="number" pos:start="175:50" pos:end="175:51">1</literal><operator pos:start="175:51" pos:end="175:51">+</operator><literal type="number" pos:start="175:52" pos:end="175:53">6</literal><operator pos:start="175:53" pos:end="175:53">+</operator><literal type="number" pos:start="175:54" pos:end="175:54">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if><else pos:start="177:22" pos:end="292:0">else<block pos:start="177:26" pos:end="292:0">{<block_content pos:start="179:25" pos:end="247:47">

                        <decl_stmt pos:start="179:25" pos:end="179:33"><decl pos:start="179:25" pos:end="179:32"><type pos:start="179:25" pos:end="179:27"><name pos:start="179:25" pos:end="179:27">int</name></type> <name pos:start="179:29" pos:end="179:32">sign</name></decl>;</decl_stmt>

                        <expr_stmt pos:start="181:25" pos:end="181:57"><expr pos:start="181:25" pos:end="181:56"><name pos:start="181:25" pos:end="181:28">last</name><operator pos:start="181:29" pos:end="181:29">=</operator>  <call pos:start="181:32" pos:end="181:56"><name pos:start="181:32" pos:end="181:41">SHOW_UBITS</name><argument_list pos:start="181:42" pos:end="181:56">(<argument pos:start="181:43" pos:end="181:44"><expr pos:start="181:43" pos:end="181:44"><name pos:start="181:43" pos:end="181:44">re</name></expr></argument>, <argument pos:start="181:47" pos:end="181:52"><expr pos:start="181:47" pos:end="181:52"><operator pos:start="181:47" pos:end="181:47">&amp;</operator><name pos:start="181:48" pos:end="181:52"><name pos:start="181:48" pos:end="181:48">s</name><operator pos:start="181:49" pos:end="181:50">-&gt;</operator><name pos:start="181:51" pos:end="181:52">gb</name></name></expr></argument>, <argument pos:start="181:55" pos:end="181:55"><expr pos:start="181:55" pos:end="181:55"><literal type="number" pos:start="181:55" pos:end="181:55">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="181:59" pos:end="181:83"><expr pos:start="181:59" pos:end="181:82"><call pos:start="181:59" pos:end="181:82"><name pos:start="181:59" pos:end="181:67">SKIP_BITS</name><argument_list pos:start="181:68" pos:end="181:82">(<argument pos:start="181:69" pos:end="181:70"><expr pos:start="181:69" pos:end="181:70"><name pos:start="181:69" pos:end="181:70">re</name></expr></argument>, <argument pos:start="181:73" pos:end="181:78"><expr pos:start="181:73" pos:end="181:78"><operator pos:start="181:73" pos:end="181:73">&amp;</operator><name pos:start="181:74" pos:end="181:78"><name pos:start="181:74" pos:end="181:74">s</name><operator pos:start="181:75" pos:end="181:76">-&gt;</operator><name pos:start="181:77" pos:end="181:78">gb</name></name></expr></argument>, <argument pos:start="181:81" pos:end="181:81"><expr pos:start="181:81" pos:end="181:81"><literal type="number" pos:start="181:81" pos:end="181:81">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="183:25" pos:end="229:25"><if pos:start="183:25" pos:end="229:25">if<condition pos:start="183:27" pos:end="183:49">(<expr pos:start="183:28" pos:end="183:48"><operator pos:start="183:28" pos:end="183:28">!</operator><name pos:start="183:29" pos:end="183:48"><name pos:start="183:29" pos:end="183:29">s</name><operator pos:start="183:30" pos:end="183:31">-&gt;</operator><name pos:start="183:32" pos:end="183:48">esc3_level_length</name></name></expr>)</condition><block pos:start="183:50" pos:end="229:25">{<block_content pos:start="185:29" pos:end="227:53">

                            <decl_stmt pos:start="185:29" pos:end="185:35"><decl pos:start="185:29" pos:end="185:34"><type pos:start="185:29" pos:end="185:31"><name pos:start="185:29" pos:end="185:31">int</name></type> <name pos:start="185:33" pos:end="185:34">ll</name></decl>;</decl_stmt>

                            <comment type="line" pos:start="187:29" pos:end="187:101">//printf("ESC-3 %X at %d %d\n", show_bits(&amp;s-&gt;gb, 24), s-&gt;mb_x, s-&gt;mb_y);</comment>

                            <if_stmt pos:start="189:29" pos:end="217:29"><if pos:start="189:29" pos:end="203:29">if<condition pos:start="189:31" pos:end="189:43">(<expr pos:start="189:32" pos:end="189:42"><name pos:start="189:32" pos:end="189:40"><name pos:start="189:32" pos:end="189:32">s</name><operator pos:start="189:33" pos:end="189:34">-&gt;</operator><name pos:start="189:35" pos:end="189:40">qscale</name></name><operator pos:start="189:41" pos:end="189:41">&lt;</operator><literal type="number" pos:start="189:42" pos:end="189:42">8</literal></expr>)</condition><block pos:start="189:44" pos:end="203:29">{<block_content pos:start="191:33" pos:end="201:33">

                                <expr_stmt pos:start="191:33" pos:end="191:62"><expr pos:start="191:33" pos:end="191:61"><name pos:start="191:33" pos:end="191:34">ll</name><operator pos:start="191:35" pos:end="191:35">=</operator> <call pos:start="191:37" pos:end="191:61"><name pos:start="191:37" pos:end="191:46">SHOW_UBITS</name><argument_list pos:start="191:47" pos:end="191:61">(<argument pos:start="191:48" pos:end="191:49"><expr pos:start="191:48" pos:end="191:49"><name pos:start="191:48" pos:end="191:49">re</name></expr></argument>, <argument pos:start="191:52" pos:end="191:57"><expr pos:start="191:52" pos:end="191:57"><operator pos:start="191:52" pos:end="191:52">&amp;</operator><name pos:start="191:53" pos:end="191:57"><name pos:start="191:53" pos:end="191:53">s</name><operator pos:start="191:54" pos:end="191:55">-&gt;</operator><name pos:start="191:56" pos:end="191:57">gb</name></name></expr></argument>, <argument pos:start="191:60" pos:end="191:60"><expr pos:start="191:60" pos:end="191:60"><literal type="number" pos:start="191:60" pos:end="191:60">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="191:64" pos:end="191:88"><expr pos:start="191:64" pos:end="191:87"><call pos:start="191:64" pos:end="191:87"><name pos:start="191:64" pos:end="191:72">SKIP_BITS</name><argument_list pos:start="191:73" pos:end="191:87">(<argument pos:start="191:74" pos:end="191:75"><expr pos:start="191:74" pos:end="191:75"><name pos:start="191:74" pos:end="191:75">re</name></expr></argument>, <argument pos:start="191:78" pos:end="191:83"><expr pos:start="191:78" pos:end="191:83"><operator pos:start="191:78" pos:end="191:78">&amp;</operator><name pos:start="191:79" pos:end="191:83"><name pos:start="191:79" pos:end="191:79">s</name><operator pos:start="191:80" pos:end="191:81">-&gt;</operator><name pos:start="191:82" pos:end="191:83">gb</name></name></expr></argument>, <argument pos:start="191:86" pos:end="191:86"><expr pos:start="191:86" pos:end="191:86"><literal type="number" pos:start="191:86" pos:end="191:86">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <if_stmt pos:start="193:33" pos:end="201:33"><if pos:start="193:33" pos:end="201:33">if<condition pos:start="193:35" pos:end="193:41">(<expr pos:start="193:36" pos:end="193:40"><name pos:start="193:36" pos:end="193:37">ll</name><operator pos:start="193:38" pos:end="193:39">==</operator><literal type="number" pos:start="193:40" pos:end="193:40">0</literal></expr>)</condition><block pos:start="193:42" pos:end="201:33">{<block_content pos:start="195:37" pos:end="199:41">

                                    <if_stmt pos:start="195:37" pos:end="195:173"><if pos:start="195:37" pos:end="195:173">if<condition pos:start="195:39" pos:end="195:65">(<expr pos:start="195:40" pos:end="195:64"><call pos:start="195:40" pos:end="195:64"><name pos:start="195:40" pos:end="195:49">SHOW_UBITS</name><argument_list pos:start="195:50" pos:end="195:64">(<argument pos:start="195:51" pos:end="195:52"><expr pos:start="195:51" pos:end="195:52"><name pos:start="195:51" pos:end="195:52">re</name></expr></argument>, <argument pos:start="195:55" pos:end="195:60"><expr pos:start="195:55" pos:end="195:60"><operator pos:start="195:55" pos:end="195:55">&amp;</operator><name pos:start="195:56" pos:end="195:60"><name pos:start="195:56" pos:end="195:56">s</name><operator pos:start="195:57" pos:end="195:58">-&gt;</operator><name pos:start="195:59" pos:end="195:60">gb</name></name></expr></argument>, <argument pos:start="195:63" pos:end="195:63"><expr pos:start="195:63" pos:end="195:63"><literal type="number" pos:start="195:63" pos:end="195:63">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="195:67" pos:end="195:173"><block_content pos:start="195:67" pos:end="195:173"> <expr_stmt pos:start="195:67" pos:end="195:173"><expr pos:start="195:67" pos:end="195:172"><call pos:start="195:67" pos:end="195:172"><name pos:start="195:67" pos:end="195:72">av_log</name><argument_list pos:start="195:73" pos:end="195:172">(<argument pos:start="195:74" pos:end="195:81"><expr pos:start="195:74" pos:end="195:81"><name pos:start="195:74" pos:end="195:81"><name pos:start="195:74" pos:end="195:74">s</name><operator pos:start="195:75" pos:end="195:76">-&gt;</operator><name pos:start="195:77" pos:end="195:81">avctx</name></name></expr></argument>, <argument pos:start="195:84" pos:end="195:95"><expr pos:start="195:84" pos:end="195:95"><name pos:start="195:84" pos:end="195:95">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="195:98" pos:end="195:171"><expr pos:start="195:98" pos:end="195:171"><literal type="string" pos:start="195:98" pos:end="195:171">"cool a new vlc code ,contact the ffmpeg developers and upload the file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                                    <expr_stmt pos:start="197:37" pos:end="197:61"><expr pos:start="197:37" pos:end="197:60"><call pos:start="197:37" pos:end="197:60"><name pos:start="197:37" pos:end="197:45">SKIP_BITS</name><argument_list pos:start="197:46" pos:end="197:60">(<argument pos:start="197:47" pos:end="197:48"><expr pos:start="197:47" pos:end="197:48"><name pos:start="197:47" pos:end="197:48">re</name></expr></argument>, <argument pos:start="197:51" pos:end="197:56"><expr pos:start="197:51" pos:end="197:56"><operator pos:start="197:51" pos:end="197:51">&amp;</operator><name pos:start="197:52" pos:end="197:56"><name pos:start="197:52" pos:end="197:52">s</name><operator pos:start="197:53" pos:end="197:54">-&gt;</operator><name pos:start="197:55" pos:end="197:56">gb</name></name></expr></argument>, <argument pos:start="197:59" pos:end="197:59"><expr pos:start="197:59" pos:end="197:59"><literal type="number" pos:start="197:59" pos:end="197:59">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="199:37" pos:end="199:41"><expr pos:start="199:37" pos:end="199:40"><name pos:start="199:37" pos:end="199:38">ll</name><operator pos:start="199:39" pos:end="199:39">=</operator><literal type="number" pos:start="199:40" pos:end="199:40">8</literal></expr>;</expr_stmt>

                                </block_content>}</block></if></if_stmt>

                            </block_content>}</block></if><else pos:start="203:30" pos:end="217:29">else<block pos:start="203:34" pos:end="217:29">{<block_content pos:start="205:33" pos:end="215:66">

                                <expr_stmt pos:start="205:33" pos:end="205:37"><expr pos:start="205:33" pos:end="205:36"><name pos:start="205:33" pos:end="205:34">ll</name><operator pos:start="205:35" pos:end="205:35">=</operator><literal type="number" pos:start="205:36" pos:end="205:36">2</literal></expr>;</expr_stmt>

                                <while pos:start="207:33" pos:end="213:33">while<condition pos:start="207:38" pos:end="207:75">(<expr pos:start="207:39" pos:end="207:74"><name pos:start="207:39" pos:end="207:40">ll</name><operator pos:start="207:41" pos:end="207:41">&lt;</operator><literal type="number" pos:start="207:42" pos:end="207:42">8</literal> <operator pos:start="207:44" pos:end="207:45">&amp;&amp;</operator> <call pos:start="207:47" pos:end="207:71"><name pos:start="207:47" pos:end="207:56">SHOW_UBITS</name><argument_list pos:start="207:57" pos:end="207:71">(<argument pos:start="207:58" pos:end="207:59"><expr pos:start="207:58" pos:end="207:59"><name pos:start="207:58" pos:end="207:59">re</name></expr></argument>, <argument pos:start="207:62" pos:end="207:67"><expr pos:start="207:62" pos:end="207:67"><operator pos:start="207:62" pos:end="207:62">&amp;</operator><name pos:start="207:63" pos:end="207:67"><name pos:start="207:63" pos:end="207:63">s</name><operator pos:start="207:64" pos:end="207:65">-&gt;</operator><name pos:start="207:66" pos:end="207:67">gb</name></name></expr></argument>, <argument pos:start="207:70" pos:end="207:70"><expr pos:start="207:70" pos:end="207:70"><literal type="number" pos:start="207:70" pos:end="207:70">1</literal></expr></argument>)</argument_list></call><operator pos:start="207:72" pos:end="207:73">==</operator><literal type="number" pos:start="207:74" pos:end="207:74">0</literal></expr>)</condition><block pos:start="207:76" pos:end="213:33">{<block_content pos:start="209:37" pos:end="211:61">

                                    <expr_stmt pos:start="209:37" pos:end="209:41"><expr pos:start="209:37" pos:end="209:40"><name pos:start="209:37" pos:end="209:38">ll</name><operator pos:start="209:39" pos:end="209:40">++</operator></expr>;</expr_stmt>

                                    <expr_stmt pos:start="211:37" pos:end="211:61"><expr pos:start="211:37" pos:end="211:60"><call pos:start="211:37" pos:end="211:60"><name pos:start="211:37" pos:end="211:45">SKIP_BITS</name><argument_list pos:start="211:46" pos:end="211:60">(<argument pos:start="211:47" pos:end="211:48"><expr pos:start="211:47" pos:end="211:48"><name pos:start="211:47" pos:end="211:48">re</name></expr></argument>, <argument pos:start="211:51" pos:end="211:56"><expr pos:start="211:51" pos:end="211:56"><operator pos:start="211:51" pos:end="211:51">&amp;</operator><name pos:start="211:52" pos:end="211:56"><name pos:start="211:52" pos:end="211:52">s</name><operator pos:start="211:53" pos:end="211:54">-&gt;</operator><name pos:start="211:55" pos:end="211:56">gb</name></name></expr></argument>, <argument pos:start="211:59" pos:end="211:59"><expr pos:start="211:59" pos:end="211:59"><literal type="number" pos:start="211:59" pos:end="211:59">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                </block_content>}</block></while>

                                <if_stmt pos:start="215:33" pos:end="215:66"><if pos:start="215:33" pos:end="215:66">if<condition pos:start="215:35" pos:end="215:40">(<expr pos:start="215:36" pos:end="215:39"><name pos:start="215:36" pos:end="215:37">ll</name><operator pos:start="215:38" pos:end="215:38">&lt;</operator><literal type="number" pos:start="215:39" pos:end="215:39">8</literal></expr>)</condition><block type="pseudo" pos:start="215:42" pos:end="215:66"><block_content pos:start="215:42" pos:end="215:66"> <expr_stmt pos:start="215:42" pos:end="215:66"><expr pos:start="215:42" pos:end="215:65"><call pos:start="215:42" pos:end="215:65"><name pos:start="215:42" pos:end="215:50">SKIP_BITS</name><argument_list pos:start="215:51" pos:end="215:65">(<argument pos:start="215:52" pos:end="215:53"><expr pos:start="215:52" pos:end="215:53"><name pos:start="215:52" pos:end="215:53">re</name></expr></argument>, <argument pos:start="215:56" pos:end="215:61"><expr pos:start="215:56" pos:end="215:61"><operator pos:start="215:56" pos:end="215:56">&amp;</operator><name pos:start="215:57" pos:end="215:61"><name pos:start="215:57" pos:end="215:57">s</name><operator pos:start="215:58" pos:end="215:59">-&gt;</operator><name pos:start="215:60" pos:end="215:61">gb</name></name></expr></argument>, <argument pos:start="215:64" pos:end="215:64"><expr pos:start="215:64" pos:end="215:64"><literal type="number" pos:start="215:64" pos:end="215:64">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                            </block_content>}</block></else></if_stmt>



                            <expr_stmt pos:start="221:29" pos:end="221:53"><expr pos:start="221:29" pos:end="221:52"><name pos:start="221:29" pos:end="221:48"><name pos:start="221:29" pos:end="221:29">s</name><operator pos:start="221:30" pos:end="221:31">-&gt;</operator><name pos:start="221:32" pos:end="221:48">esc3_level_length</name></name><operator pos:start="221:49" pos:end="221:49">=</operator> <name pos:start="221:51" pos:end="221:52">ll</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="223:29" pos:end="223:78"><expr pos:start="223:29" pos:end="223:77"><name pos:start="223:29" pos:end="223:46"><name pos:start="223:29" pos:end="223:29">s</name><operator pos:start="223:30" pos:end="223:31">-&gt;</operator><name pos:start="223:32" pos:end="223:46">esc3_run_length</name></name><operator pos:start="223:47" pos:end="223:47">=</operator> <call pos:start="223:49" pos:end="223:73"><name pos:start="223:49" pos:end="223:58">SHOW_UBITS</name><argument_list pos:start="223:59" pos:end="223:73">(<argument pos:start="223:60" pos:end="223:61"><expr pos:start="223:60" pos:end="223:61"><name pos:start="223:60" pos:end="223:61">re</name></expr></argument>, <argument pos:start="223:64" pos:end="223:69"><expr pos:start="223:64" pos:end="223:69"><operator pos:start="223:64" pos:end="223:64">&amp;</operator><name pos:start="223:65" pos:end="223:69"><name pos:start="223:65" pos:end="223:65">s</name><operator pos:start="223:66" pos:end="223:67">-&gt;</operator><name pos:start="223:68" pos:end="223:69">gb</name></name></expr></argument>, <argument pos:start="223:72" pos:end="223:72"><expr pos:start="223:72" pos:end="223:72"><literal type="number" pos:start="223:72" pos:end="223:72">2</literal></expr></argument>)</argument_list></call> <operator pos:start="223:75" pos:end="223:75">+</operator> <literal type="number" pos:start="223:77" pos:end="223:77">3</literal></expr>;</expr_stmt> <expr_stmt pos:start="223:80" pos:end="223:104"><expr pos:start="223:80" pos:end="223:103"><call pos:start="223:80" pos:end="223:103"><name pos:start="223:80" pos:end="223:88">SKIP_BITS</name><argument_list pos:start="223:89" pos:end="223:103">(<argument pos:start="223:90" pos:end="223:91"><expr pos:start="223:90" pos:end="223:91"><name pos:start="223:90" pos:end="223:91">re</name></expr></argument>, <argument pos:start="223:94" pos:end="223:99"><expr pos:start="223:94" pos:end="223:99"><operator pos:start="223:94" pos:end="223:94">&amp;</operator><name pos:start="223:95" pos:end="223:99"><name pos:start="223:95" pos:end="223:95">s</name><operator pos:start="223:96" pos:end="223:97">-&gt;</operator><name pos:start="223:98" pos:end="223:99">gb</name></name></expr></argument>, <argument pos:start="223:102" pos:end="223:102"><expr pos:start="223:102" pos:end="223:102"><literal type="number" pos:start="223:102" pos:end="223:102">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="line" pos:start="225:1" pos:end="225:70">//printf("level length:%d, run length: %d\n", ll, s-&gt;esc3_run_length);</comment>

                            <expr_stmt pos:start="227:29" pos:end="227:53"><expr pos:start="227:29" pos:end="227:52"><call pos:start="227:29" pos:end="227:52"><name pos:start="227:29" pos:end="227:40">UPDATE_CACHE</name><argument_list pos:start="227:41" pos:end="227:52">(<argument pos:start="227:42" pos:end="227:43"><expr pos:start="227:42" pos:end="227:43"><name pos:start="227:42" pos:end="227:43">re</name></expr></argument>, <argument pos:start="227:46" pos:end="227:51"><expr pos:start="227:46" pos:end="227:51"><operator pos:start="227:46" pos:end="227:46">&amp;</operator><name pos:start="227:47" pos:end="227:51"><name pos:start="227:47" pos:end="227:47">s</name><operator pos:start="227:48" pos:end="227:49">-&gt;</operator><name pos:start="227:50" pos:end="227:51">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="231:25" pos:end="231:74"><expr pos:start="231:25" pos:end="231:73"><name pos:start="231:25" pos:end="231:27">run</name><operator pos:start="231:28" pos:end="231:28">=</operator>   <call pos:start="231:32" pos:end="231:73"><name pos:start="231:32" pos:end="231:41">SHOW_UBITS</name><argument_list pos:start="231:42" pos:end="231:73">(<argument pos:start="231:43" pos:end="231:44"><expr pos:start="231:43" pos:end="231:44"><name pos:start="231:43" pos:end="231:44">re</name></expr></argument>, <argument pos:start="231:47" pos:end="231:52"><expr pos:start="231:47" pos:end="231:52"><operator pos:start="231:47" pos:end="231:47">&amp;</operator><name pos:start="231:48" pos:end="231:52"><name pos:start="231:48" pos:end="231:48">s</name><operator pos:start="231:49" pos:end="231:50">-&gt;</operator><name pos:start="231:51" pos:end="231:52">gb</name></name></expr></argument>, <argument pos:start="231:55" pos:end="231:72"><expr pos:start="231:55" pos:end="231:72"><name pos:start="231:55" pos:end="231:72"><name pos:start="231:55" pos:end="231:55">s</name><operator pos:start="231:56" pos:end="231:57">-&gt;</operator><name pos:start="231:58" pos:end="231:72">esc3_run_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="233:25" pos:end="233:66"><expr pos:start="233:25" pos:end="233:65"><call pos:start="233:25" pos:end="233:65"><name pos:start="233:25" pos:end="233:33">SKIP_BITS</name><argument_list pos:start="233:34" pos:end="233:65">(<argument pos:start="233:35" pos:end="233:36"><expr pos:start="233:35" pos:end="233:36"><name pos:start="233:35" pos:end="233:36">re</name></expr></argument>, <argument pos:start="233:39" pos:end="233:44"><expr pos:start="233:39" pos:end="233:44"><operator pos:start="233:39" pos:end="233:39">&amp;</operator><name pos:start="233:40" pos:end="233:44"><name pos:start="233:40" pos:end="233:40">s</name><operator pos:start="233:41" pos:end="233:42">-&gt;</operator><name pos:start="233:43" pos:end="233:44">gb</name></name></expr></argument>, <argument pos:start="233:47" pos:end="233:64"><expr pos:start="233:47" pos:end="233:64"><name pos:start="233:47" pos:end="233:64"><name pos:start="233:47" pos:end="233:47">s</name><operator pos:start="233:48" pos:end="233:49">-&gt;</operator><name pos:start="233:50" pos:end="233:64">esc3_run_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                        <expr_stmt pos:start="237:25" pos:end="237:57"><expr pos:start="237:25" pos:end="237:56"><name pos:start="237:25" pos:end="237:28">sign</name><operator pos:start="237:29" pos:end="237:29">=</operator>  <call pos:start="237:32" pos:end="237:56"><name pos:start="237:32" pos:end="237:41">SHOW_UBITS</name><argument_list pos:start="237:42" pos:end="237:56">(<argument pos:start="237:43" pos:end="237:44"><expr pos:start="237:43" pos:end="237:44"><name pos:start="237:43" pos:end="237:44">re</name></expr></argument>, <argument pos:start="237:47" pos:end="237:52"><expr pos:start="237:47" pos:end="237:52"><operator pos:start="237:47" pos:end="237:47">&amp;</operator><name pos:start="237:48" pos:end="237:52"><name pos:start="237:48" pos:end="237:48">s</name><operator pos:start="237:49" pos:end="237:50">-&gt;</operator><name pos:start="237:51" pos:end="237:52">gb</name></name></expr></argument>, <argument pos:start="237:55" pos:end="237:55"><expr pos:start="237:55" pos:end="237:55"><literal type="number" pos:start="237:55" pos:end="237:55">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="239:25" pos:end="239:49"><expr pos:start="239:25" pos:end="239:48"><call pos:start="239:25" pos:end="239:48"><name pos:start="239:25" pos:end="239:33">SKIP_BITS</name><argument_list pos:start="239:34" pos:end="239:48">(<argument pos:start="239:35" pos:end="239:36"><expr pos:start="239:35" pos:end="239:36"><name pos:start="239:35" pos:end="239:36">re</name></expr></argument>, <argument pos:start="239:39" pos:end="239:44"><expr pos:start="239:39" pos:end="239:44"><operator pos:start="239:39" pos:end="239:39">&amp;</operator><name pos:start="239:40" pos:end="239:44"><name pos:start="239:40" pos:end="239:40">s</name><operator pos:start="239:41" pos:end="239:42">-&gt;</operator><name pos:start="239:43" pos:end="239:44">gb</name></name></expr></argument>, <argument pos:start="239:47" pos:end="239:47"><expr pos:start="239:47" pos:end="239:47"><literal type="number" pos:start="239:47" pos:end="239:47">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                        <expr_stmt pos:start="243:25" pos:end="243:76"><expr pos:start="243:25" pos:end="243:75"><name pos:start="243:25" pos:end="243:29">level</name><operator pos:start="243:30" pos:end="243:30">=</operator> <call pos:start="243:32" pos:end="243:75"><name pos:start="243:32" pos:end="243:41">SHOW_UBITS</name><argument_list pos:start="243:42" pos:end="243:75">(<argument pos:start="243:43" pos:end="243:44"><expr pos:start="243:43" pos:end="243:44"><name pos:start="243:43" pos:end="243:44">re</name></expr></argument>, <argument pos:start="243:47" pos:end="243:52"><expr pos:start="243:47" pos:end="243:52"><operator pos:start="243:47" pos:end="243:47">&amp;</operator><name pos:start="243:48" pos:end="243:52"><name pos:start="243:48" pos:end="243:48">s</name><operator pos:start="243:49" pos:end="243:50">-&gt;</operator><name pos:start="243:51" pos:end="243:52">gb</name></name></expr></argument>, <argument pos:start="243:55" pos:end="243:74"><expr pos:start="243:55" pos:end="243:74"><name pos:start="243:55" pos:end="243:74"><name pos:start="243:55" pos:end="243:55">s</name><operator pos:start="243:56" pos:end="243:57">-&gt;</operator><name pos:start="243:58" pos:end="243:74">esc3_level_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="245:25" pos:end="245:68"><expr pos:start="245:25" pos:end="245:67"><call pos:start="245:25" pos:end="245:67"><name pos:start="245:25" pos:end="245:33">SKIP_BITS</name><argument_list pos:start="245:34" pos:end="245:67">(<argument pos:start="245:35" pos:end="245:36"><expr pos:start="245:35" pos:end="245:36"><name pos:start="245:35" pos:end="245:36">re</name></expr></argument>, <argument pos:start="245:39" pos:end="245:44"><expr pos:start="245:39" pos:end="245:44"><operator pos:start="245:39" pos:end="245:39">&amp;</operator><name pos:start="245:40" pos:end="245:44"><name pos:start="245:40" pos:end="245:40">s</name><operator pos:start="245:41" pos:end="245:42">-&gt;</operator><name pos:start="245:43" pos:end="245:44">gb</name></name></expr></argument>, <argument pos:start="245:47" pos:end="245:66"><expr pos:start="245:47" pos:end="245:66"><name pos:start="245:47" pos:end="245:66"><name pos:start="245:47" pos:end="245:47">s</name><operator pos:start="245:48" pos:end="245:49">-&gt;</operator><name pos:start="245:50" pos:end="245:66">esc3_level_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="247:25" pos:end="247:47"><if pos:start="247:25" pos:end="247:47">if<condition pos:start="247:27" pos:end="247:32">(<expr pos:start="247:28" pos:end="247:31"><name pos:start="247:28" pos:end="247:31">sign</name></expr>)</condition><block type="pseudo" pos:start="247:34" pos:end="247:47"><block_content pos:start="247:34" pos:end="247:47"> <expr_stmt pos:start="247:34" pos:end="247:47"><expr pos:start="247:34" pos:end="247:46"><name pos:start="247:34" pos:end="247:38">level</name><operator pos:start="247:39" pos:end="247:39">=</operator> <operator pos:start="247:41" pos:end="247:41">-</operator><name pos:start="247:42" pos:end="247:46">level</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    </block_content>}</block></else></if_stmt>

<comment type="line" pos:start="251:1" pos:end="251:72">//printf("level: %d, run: %d at %d %d\n", level, run, s-&gt;mb_x, s-&gt;mb_y);</comment>

<cpp:if pos:start="253:1" pos:end="253:5">#<cpp:directive pos:start="253:2" pos:end="253:3">if</cpp:directive> <expr pos:start="253:5" pos:end="253:5"><literal type="number" pos:start="253:5" pos:end="253:5">0</literal></expr></cpp:if> <comment type="line" pos:start="253:7" pos:end="253:57">// waste of time / this will detect very few errors</comment>

                    {

                        const int abs_level= FFABS(level);

                        const int run1= run - rl-&gt;max_run[last][abs_level] - run_diff;

                        if(abs_level&lt;=MAX_LEVEL &amp;&amp; run&lt;=MAX_RUN){

                            if(abs_level &lt;= rl-&gt;max_level[last][run]){

                                av_log(s-&gt;avctx, AV_LOG_ERROR, "illegal 3. esc, vlc encoding possible\n");

                                return DECODING_AC_LOST;

                            }

                            if(abs_level &lt;= rl-&gt;max_level[last][run]*2){

                                av_log(s-&gt;avctx, AV_LOG_ERROR, "illegal 3. esc, esc 1 encoding possible\n");

                                return DECODING_AC_LOST;

                            }

                            if(run1&gt;=0 &amp;&amp; abs_level &lt;= rl-&gt;max_level[last][run1]){

                                av_log(s-&gt;avctx, AV_LOG_ERROR, "illegal 3. esc, esc 2 encoding possible\n");

                                return DECODING_AC_LOST;

                            }

                        }

                    }

<cpp:endif pos:start="291:1" pos:end="291:6">#<cpp:directive pos:start="291:2" pos:end="291:6">endif</cpp:directive></cpp:endif>

                    <comment type="line" pos:start="293:21" pos:end="293:83">//level = level * qmul + (level&gt;0) * qadd - (level&lt;=0) * qadd ;</comment>

                    <if_stmt pos:start="295:21" pos:end="310:0"><if pos:start="295:21" pos:end="295:60">if <condition pos:start="295:24" pos:end="295:32">(<expr pos:start="295:25" pos:end="295:31"><name pos:start="295:25" pos:end="295:29">level</name><operator pos:start="295:30" pos:end="295:30">&gt;</operator><literal type="number" pos:start="295:31" pos:end="295:31">0</literal></expr>)</condition><block type="pseudo" pos:start="295:34" pos:end="295:60"><block_content pos:start="295:34" pos:end="295:60"> <expr_stmt pos:start="295:34" pos:end="295:60"><expr pos:start="295:34" pos:end="295:59"><name pos:start="295:34" pos:end="295:38">level</name><operator pos:start="295:39" pos:end="295:39">=</operator> <name pos:start="295:41" pos:end="295:45">level</name> <operator pos:start="295:47" pos:end="295:47">*</operator> <name pos:start="295:49" pos:end="295:52">qmul</name> <operator pos:start="295:54" pos:end="295:54">+</operator> <name pos:start="295:56" pos:end="295:59">qadd</name></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="297:21" pos:end="310:0">else<block type="pseudo" pos:start="297:34" pos:end="310:0"><block_content pos:start="297:34" pos:end="310:0">         <expr_stmt pos:start="297:34" pos:end="310:0"><expr pos:start="297:34" pos:end="297:59"><name pos:start="297:34" pos:end="297:38">level</name><operator pos:start="297:39" pos:end="297:39">=</operator> <name pos:start="297:41" pos:end="297:45">level</name> <operator pos:start="297:47" pos:end="297:47">*</operator> <name pos:start="297:49" pos:end="297:52">qmul</name> <operator pos:start="297:54" pos:end="297:54">-</operator> <name pos:start="297:56" pos:end="297:59">qadd</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if pos:start="299:1" pos:end="299:5">#<cpp:directive pos:start="299:2" pos:end="299:3">if</cpp:directive> <expr pos:start="299:5" pos:end="299:5"><literal type="number" pos:start="299:5" pos:end="299:5">0</literal></expr></cpp:if> <comment type="line" pos:start="299:7" pos:end="299:29">// waste of time too :(</comment>

                    if(level&gt;2048 || level&lt;-2048){

                        av_log(s-&gt;avctx, AV_LOG_ERROR, "|level| overflow in 3. esc\n");

                        return DECODING_AC_LOST;

                    }

<cpp:endif pos:start="309:1" pos:end="309:6">#<cpp:directive pos:start="309:2" pos:end="309:6">endif</cpp:directive></cpp:endif>

                    <expr_stmt pos:start="311:21" pos:end="311:32"><expr pos:start="311:21" pos:end="311:31"><name pos:start="311:21" pos:end="311:21">i</name><operator pos:start="311:22" pos:end="311:23">+=</operator> <name pos:start="311:25" pos:end="311:27">run</name> <operator pos:start="311:29" pos:end="311:29">+</operator> <literal type="number" pos:start="311:31" pos:end="311:31">1</literal></expr>;</expr_stmt>

                    <if_stmt pos:start="313:21" pos:end="316:0"><if pos:start="313:21" pos:end="316:0">if<condition pos:start="313:23" pos:end="313:28">(<expr pos:start="313:24" pos:end="313:27"><name pos:start="313:24" pos:end="313:27">last</name></expr>)</condition><block type="pseudo" pos:start="313:30" pos:end="316:0"><block_content pos:start="313:30" pos:end="316:0"> <expr_stmt pos:start="313:30" pos:end="316:0"><expr pos:start="313:30" pos:end="313:35"><name pos:start="313:30" pos:end="313:30">i</name><operator pos:start="313:31" pos:end="313:32">+=</operator><literal type="number" pos:start="313:33" pos:end="313:35">192</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef pos:start="315:1" pos:end="315:20">#<cpp:directive pos:start="315:2" pos:end="315:6">ifdef</cpp:directive> <name pos:start="315:8" pos:end="315:20">ERROR_DETAILS</name></cpp:ifdef>

                <if_stmt pos:start="317:17" pos:end="326:0"><if pos:start="317:17" pos:end="319:97">if<condition pos:start="317:19" pos:end="317:27">(<expr pos:start="317:20" pos:end="317:26"><name pos:start="317:20" pos:end="317:22">run</name><operator pos:start="317:23" pos:end="317:24">==</operator><literal type="number" pos:start="317:25" pos:end="317:26">66</literal></expr>)</condition><block type="pseudo" pos:start="319:21" pos:end="319:97"><block_content pos:start="319:21" pos:end="319:97">

                    <expr_stmt pos:start="319:21" pos:end="319:97"><expr pos:start="319:21" pos:end="319:96"><call pos:start="319:21" pos:end="319:96"><name pos:start="319:21" pos:end="319:26">av_log</name><argument_list pos:start="319:27" pos:end="319:96">(<argument pos:start="319:28" pos:end="319:35"><expr pos:start="319:28" pos:end="319:35"><name pos:start="319:28" pos:end="319:35"><name pos:start="319:28" pos:end="319:28">s</name><operator pos:start="319:29" pos:end="319:30">-&gt;</operator><name pos:start="319:31" pos:end="319:35">avctx</name></name></expr></argument>, <argument pos:start="319:38" pos:end="319:49"><expr pos:start="319:38" pos:end="319:49"><name pos:start="319:38" pos:end="319:49">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="319:52" pos:end="319:88"><expr pos:start="319:52" pos:end="319:88"><literal type="string" pos:start="319:52" pos:end="319:88">"illegal vlc code in ESC3 level=%d\n"</literal></expr></argument>, <argument pos:start="319:91" pos:end="319:95"><expr pos:start="319:91" pos:end="319:95"><name pos:start="319:91" pos:end="319:95">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="321:17" pos:end="326:0">else if<condition pos:start="321:24" pos:end="321:52">(<expr pos:start="321:25" pos:end="321:51"><operator pos:start="321:25" pos:end="321:25">(</operator><name pos:start="321:26" pos:end="321:26">i</name><operator pos:start="321:27" pos:end="321:27">&gt;</operator><literal type="number" pos:start="321:28" pos:end="321:29">62</literal> <operator pos:start="321:31" pos:end="321:32">&amp;&amp;</operator> <name pos:start="321:34" pos:end="321:34">i</name><operator pos:start="321:35" pos:end="321:35">&lt;</operator><literal type="number" pos:start="321:36" pos:end="321:38">192</literal><operator pos:start="321:39" pos:end="321:39">)</operator> <operator pos:start="321:41" pos:end="321:42">||</operator> <name pos:start="321:44" pos:end="321:44">i</name><operator pos:start="321:45" pos:end="321:45">&gt;</operator><literal type="number" pos:start="321:46" pos:end="321:49">192</literal><operator pos:start="321:49" pos:end="321:49">+</operator><literal type="number" pos:start="321:50" pos:end="321:51">63</literal></expr>)</condition><block type="pseudo" pos:start="323:21" pos:end="326:0"><block_content pos:start="323:21" pos:end="326:0">

                    <expr_stmt pos:start="323:21" pos:end="326:0"><expr pos:start="323:21" pos:end="323:112"><call pos:start="323:21" pos:end="323:112"><name pos:start="323:21" pos:end="323:26">av_log</name><argument_list pos:start="323:27" pos:end="323:112">(<argument pos:start="323:28" pos:end="323:35"><expr pos:start="323:28" pos:end="323:35"><name pos:start="323:28" pos:end="323:35"><name pos:start="323:28" pos:end="323:28">s</name><operator pos:start="323:29" pos:end="323:30">-&gt;</operator><name pos:start="323:31" pos:end="323:35">avctx</name></name></expr></argument>, <argument pos:start="323:38" pos:end="323:49"><expr pos:start="323:38" pos:end="323:49"><name pos:start="323:38" pos:end="323:49">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="323:52" pos:end="323:96"><expr pos:start="323:52" pos:end="323:96"><literal type="string" pos:start="323:52" pos:end="323:96">"run overflow in ESC3 i=%d run=%d level=%d\n"</literal></expr></argument>, <argument pos:start="323:99" pos:end="323:99"><expr pos:start="323:99" pos:end="323:99"><name pos:start="323:99" pos:end="323:99">i</name></expr></argument>, <argument pos:start="323:102" pos:end="323:104"><expr pos:start="323:102" pos:end="323:104"><name pos:start="323:102" pos:end="323:104">run</name></expr></argument>, <argument pos:start="323:107" pos:end="323:111"><expr pos:start="323:107" pos:end="323:111"><name pos:start="323:107" pos:end="323:111">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="325:1" pos:end="325:6">#<cpp:directive pos:start="325:2" pos:end="325:6">endif</cpp:directive></cpp:endif>

                </block_content>}</block></if> <else pos:start="327:19" pos:end="363:17">else <block pos:start="327:24" pos:end="363:17">{<block_content pos:start="333:21" pos:end="362:0">

                    <comment type="block" pos:start="329:21" pos:end="329:39">/* second escape */</comment>

<cpp:if pos:start="331:1" pos:end="331:23">#<cpp:directive pos:start="331:2" pos:end="331:3">if</cpp:directive> <expr pos:start="331:5" pos:end="331:23"><name pos:start="331:5" pos:end="331:18">MIN_CACHE_BITS</name> <operator pos:start="331:20" pos:end="331:20">&lt;</operator> <literal type="number" pos:start="331:22" pos:end="331:23">23</literal></expr></cpp:if>

                    <expr_stmt pos:start="333:21" pos:end="333:50"><expr pos:start="333:21" pos:end="333:49"><call pos:start="333:21" pos:end="333:49"><name pos:start="333:21" pos:end="333:34">LAST_SKIP_BITS</name><argument_list pos:start="333:35" pos:end="333:49">(<argument pos:start="333:36" pos:end="333:37"><expr pos:start="333:36" pos:end="333:37"><name pos:start="333:36" pos:end="333:37">re</name></expr></argument>, <argument pos:start="333:40" pos:end="333:45"><expr pos:start="333:40" pos:end="333:45"><operator pos:start="333:40" pos:end="333:40">&amp;</operator><name pos:start="333:41" pos:end="333:45"><name pos:start="333:41" pos:end="333:41">s</name><operator pos:start="333:42" pos:end="333:43">-&gt;</operator><name pos:start="333:44" pos:end="333:45">gb</name></name></expr></argument>, <argument pos:start="333:48" pos:end="333:48"><expr pos:start="333:48" pos:end="333:48"><literal type="number" pos:start="333:48" pos:end="333:48">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="335:21" pos:end="338:0"><expr pos:start="335:21" pos:end="335:44"><call pos:start="335:21" pos:end="335:44"><name pos:start="335:21" pos:end="335:32">UPDATE_CACHE</name><argument_list pos:start="335:33" pos:end="335:44">(<argument pos:start="335:34" pos:end="335:35"><expr pos:start="335:34" pos:end="335:35"><name pos:start="335:34" pos:end="335:35">re</name></expr></argument>, <argument pos:start="335:38" pos:end="335:43"><expr pos:start="335:38" pos:end="335:43"><operator pos:start="335:38" pos:end="335:38">&amp;</operator><name pos:start="335:39" pos:end="335:43"><name pos:start="335:39" pos:end="335:39">s</name><operator pos:start="335:40" pos:end="335:41">-&gt;</operator><name pos:start="335:42" pos:end="335:43">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="337:1" pos:end="337:5">#<cpp:directive pos:start="337:2" pos:end="337:5">else</cpp:directive></cpp:else>

                    <expr_stmt pos:start="339:21" pos:end="342:0"><expr pos:start="339:21" pos:end="339:44"><call pos:start="339:21" pos:end="339:44"><name pos:start="339:21" pos:end="339:29">SKIP_BITS</name><argument_list pos:start="339:30" pos:end="339:44">(<argument pos:start="339:31" pos:end="339:32"><expr pos:start="339:31" pos:end="339:32"><name pos:start="339:31" pos:end="339:32">re</name></expr></argument>, <argument pos:start="339:35" pos:end="339:40"><expr pos:start="339:35" pos:end="339:40"><operator pos:start="339:35" pos:end="339:35">&amp;</operator><name pos:start="339:36" pos:end="339:40"><name pos:start="339:36" pos:end="339:36">s</name><operator pos:start="339:37" pos:end="339:38">-&gt;</operator><name pos:start="339:39" pos:end="339:40">gb</name></name></expr></argument>, <argument pos:start="339:43" pos:end="339:43"><expr pos:start="339:43" pos:end="339:43"><literal type="number" pos:start="339:43" pos:end="339:43">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="341:1" pos:end="341:6">#<cpp:directive pos:start="341:2" pos:end="341:6">endif</cpp:directive></cpp:endif>

                    <expr_stmt pos:start="343:21" pos:end="343:83"><expr pos:start="343:21" pos:end="343:82"><call pos:start="343:21" pos:end="343:82"><name pos:start="343:21" pos:end="343:30">GET_RL_VLC</name><argument_list pos:start="343:31" pos:end="343:82">(<argument pos:start="343:32" pos:end="343:36"><expr pos:start="343:32" pos:end="343:36"><name pos:start="343:32" pos:end="343:36">level</name></expr></argument>, <argument pos:start="343:39" pos:end="343:41"><expr pos:start="343:39" pos:end="343:41"><name pos:start="343:39" pos:end="343:41">run</name></expr></argument>, <argument pos:start="343:44" pos:end="343:45"><expr pos:start="343:44" pos:end="343:45"><name pos:start="343:44" pos:end="343:45">re</name></expr></argument>, <argument pos:start="343:48" pos:end="343:53"><expr pos:start="343:48" pos:end="343:53"><operator pos:start="343:48" pos:end="343:48">&amp;</operator><name pos:start="343:49" pos:end="343:53"><name pos:start="343:49" pos:end="343:49">s</name><operator pos:start="343:50" pos:end="343:51">-&gt;</operator><name pos:start="343:52" pos:end="343:53">gb</name></name></expr></argument>, <argument pos:start="343:56" pos:end="343:61"><expr pos:start="343:56" pos:end="343:61"><name pos:start="343:56" pos:end="343:61">rl_vlc</name></expr></argument>, <argument pos:start="343:64" pos:end="343:75"><expr pos:start="343:64" pos:end="343:75"><name pos:start="343:64" pos:end="343:75">TEX_VLC_BITS</name></expr></argument>, <argument pos:start="343:78" pos:end="343:78"><expr pos:start="343:78" pos:end="343:78"><literal type="number" pos:start="343:78" pos:end="343:78">2</literal></expr></argument>, <argument pos:start="343:81" pos:end="343:81"><expr pos:start="343:81" pos:end="343:81"><literal type="number" pos:start="343:81" pos:end="343:81">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="345:21" pos:end="345:73"><expr pos:start="345:21" pos:end="345:72"><name pos:start="345:21" pos:end="345:21">i</name><operator pos:start="345:22" pos:end="345:23">+=</operator> <name pos:start="345:25" pos:end="345:27">run</name> <operator pos:start="345:29" pos:end="345:29">+</operator> <name pos:start="345:31" pos:end="345:61"><name pos:start="345:31" pos:end="345:32">rl</name><operator pos:start="345:33" pos:end="345:34">-&gt;</operator><name pos:start="345:35" pos:end="345:41">max_run</name><index pos:start="345:42" pos:end="345:49">[<expr pos:start="345:43" pos:end="345:48"><name pos:start="345:43" pos:end="345:45">run</name><operator pos:start="345:46" pos:end="345:47">&gt;&gt;</operator><literal type="number" pos:start="345:48" pos:end="345:48">7</literal></expr>]</index><index pos:start="345:50" pos:end="345:61">[<expr pos:start="345:51" pos:end="345:60"><name pos:start="345:51" pos:end="345:55">level</name><operator pos:start="345:56" pos:end="345:56">/</operator><name pos:start="345:57" pos:end="345:60">qmul</name></expr>]</index></name> <operator pos:start="345:63" pos:end="345:63">+</operator> <name pos:start="345:65" pos:end="345:72">run_diff</name></expr>;</expr_stmt> <comment type="line" pos:start="345:75" pos:end="345:94">//FIXME opt indexing</comment>

                    <expr_stmt pos:start="347:21" pos:end="347:92"><expr pos:start="347:21" pos:end="347:91"><name pos:start="347:21" pos:end="347:25">level</name> <operator pos:start="347:27" pos:end="347:27">=</operator> <operator pos:start="347:29" pos:end="347:29">(</operator><name pos:start="347:30" pos:end="347:34">level</name> <operator pos:start="347:36" pos:end="347:36">^</operator> <call pos:start="347:38" pos:end="347:62"><name pos:start="347:38" pos:end="347:47">SHOW_SBITS</name><argument_list pos:start="347:48" pos:end="347:62">(<argument pos:start="347:49" pos:end="347:50"><expr pos:start="347:49" pos:end="347:50"><name pos:start="347:49" pos:end="347:50">re</name></expr></argument>, <argument pos:start="347:53" pos:end="347:58"><expr pos:start="347:53" pos:end="347:58"><operator pos:start="347:53" pos:end="347:53">&amp;</operator><name pos:start="347:54" pos:end="347:58"><name pos:start="347:54" pos:end="347:54">s</name><operator pos:start="347:55" pos:end="347:56">-&gt;</operator><name pos:start="347:57" pos:end="347:58">gb</name></name></expr></argument>, <argument pos:start="347:61" pos:end="347:61"><expr pos:start="347:61" pos:end="347:61"><literal type="number" pos:start="347:61" pos:end="347:61">1</literal></expr></argument>)</argument_list></call><operator pos:start="347:63" pos:end="347:63">)</operator> <operator pos:start="347:65" pos:end="347:65">-</operator> <call pos:start="347:67" pos:end="347:91"><name pos:start="347:67" pos:end="347:76">SHOW_SBITS</name><argument_list pos:start="347:77" pos:end="347:91">(<argument pos:start="347:78" pos:end="347:79"><expr pos:start="347:78" pos:end="347:79"><name pos:start="347:78" pos:end="347:79">re</name></expr></argument>, <argument pos:start="347:82" pos:end="347:87"><expr pos:start="347:82" pos:end="347:87"><operator pos:start="347:82" pos:end="347:82">&amp;</operator><name pos:start="347:83" pos:end="347:87"><name pos:start="347:83" pos:end="347:83">s</name><operator pos:start="347:84" pos:end="347:85">-&gt;</operator><name pos:start="347:86" pos:end="347:87">gb</name></name></expr></argument>, <argument pos:start="347:90" pos:end="347:90"><expr pos:start="347:90" pos:end="347:90"><literal type="number" pos:start="347:90" pos:end="347:90">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="349:21" pos:end="352:0"><expr pos:start="349:21" pos:end="349:49"><call pos:start="349:21" pos:end="349:49"><name pos:start="349:21" pos:end="349:34">LAST_SKIP_BITS</name><argument_list pos:start="349:35" pos:end="349:49">(<argument pos:start="349:36" pos:end="349:37"><expr pos:start="349:36" pos:end="349:37"><name pos:start="349:36" pos:end="349:37">re</name></expr></argument>, <argument pos:start="349:40" pos:end="349:45"><expr pos:start="349:40" pos:end="349:45"><operator pos:start="349:40" pos:end="349:40">&amp;</operator><name pos:start="349:41" pos:end="349:45"><name pos:start="349:41" pos:end="349:41">s</name><operator pos:start="349:42" pos:end="349:43">-&gt;</operator><name pos:start="349:44" pos:end="349:45">gb</name></name></expr></argument>, <argument pos:start="349:48" pos:end="349:48"><expr pos:start="349:48" pos:end="349:48"><literal type="number" pos:start="349:48" pos:end="349:48">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="351:1" pos:end="351:20">#<cpp:directive pos:start="351:2" pos:end="351:6">ifdef</cpp:directive> <name pos:start="351:8" pos:end="351:20">ERROR_DETAILS</name></cpp:ifdef>

                <if_stmt pos:start="353:17" pos:end="362:0"><if pos:start="353:17" pos:end="355:97">if<condition pos:start="353:19" pos:end="353:27">(<expr pos:start="353:20" pos:end="353:26"><name pos:start="353:20" pos:end="353:22">run</name><operator pos:start="353:23" pos:end="353:24">==</operator><literal type="number" pos:start="353:25" pos:end="353:26">66</literal></expr>)</condition><block type="pseudo" pos:start="355:21" pos:end="355:97"><block_content pos:start="355:21" pos:end="355:97">

                    <expr_stmt pos:start="355:21" pos:end="355:97"><expr pos:start="355:21" pos:end="355:96"><call pos:start="355:21" pos:end="355:96"><name pos:start="355:21" pos:end="355:26">av_log</name><argument_list pos:start="355:27" pos:end="355:96">(<argument pos:start="355:28" pos:end="355:35"><expr pos:start="355:28" pos:end="355:35"><name pos:start="355:28" pos:end="355:35"><name pos:start="355:28" pos:end="355:28">s</name><operator pos:start="355:29" pos:end="355:30">-&gt;</operator><name pos:start="355:31" pos:end="355:35">avctx</name></name></expr></argument>, <argument pos:start="355:38" pos:end="355:49"><expr pos:start="355:38" pos:end="355:49"><name pos:start="355:38" pos:end="355:49">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="355:52" pos:end="355:88"><expr pos:start="355:52" pos:end="355:88"><literal type="string" pos:start="355:52" pos:end="355:88">"illegal vlc code in ESC2 level=%d\n"</literal></expr></argument>, <argument pos:start="355:91" pos:end="355:95"><expr pos:start="355:91" pos:end="355:95"><name pos:start="355:91" pos:end="355:95">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="357:17" pos:end="362:0">else if<condition pos:start="357:24" pos:end="357:52">(<expr pos:start="357:25" pos:end="357:51"><operator pos:start="357:25" pos:end="357:25">(</operator><name pos:start="357:26" pos:end="357:26">i</name><operator pos:start="357:27" pos:end="357:27">&gt;</operator><literal type="number" pos:start="357:28" pos:end="357:29">62</literal> <operator pos:start="357:31" pos:end="357:32">&amp;&amp;</operator> <name pos:start="357:34" pos:end="357:34">i</name><operator pos:start="357:35" pos:end="357:35">&lt;</operator><literal type="number" pos:start="357:36" pos:end="357:38">192</literal><operator pos:start="357:39" pos:end="357:39">)</operator> <operator pos:start="357:41" pos:end="357:42">||</operator> <name pos:start="357:44" pos:end="357:44">i</name><operator pos:start="357:45" pos:end="357:45">&gt;</operator><literal type="number" pos:start="357:46" pos:end="357:49">192</literal><operator pos:start="357:49" pos:end="357:49">+</operator><literal type="number" pos:start="357:50" pos:end="357:51">63</literal></expr>)</condition><block type="pseudo" pos:start="359:21" pos:end="362:0"><block_content pos:start="359:21" pos:end="362:0">

                    <expr_stmt pos:start="359:21" pos:end="362:0"><expr pos:start="359:21" pos:end="359:112"><call pos:start="359:21" pos:end="359:112"><name pos:start="359:21" pos:end="359:26">av_log</name><argument_list pos:start="359:27" pos:end="359:112">(<argument pos:start="359:28" pos:end="359:35"><expr pos:start="359:28" pos:end="359:35"><name pos:start="359:28" pos:end="359:35"><name pos:start="359:28" pos:end="359:28">s</name><operator pos:start="359:29" pos:end="359:30">-&gt;</operator><name pos:start="359:31" pos:end="359:35">avctx</name></name></expr></argument>, <argument pos:start="359:38" pos:end="359:49"><expr pos:start="359:38" pos:end="359:49"><name pos:start="359:38" pos:end="359:49">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="359:52" pos:end="359:96"><expr pos:start="359:52" pos:end="359:96"><literal type="string" pos:start="359:52" pos:end="359:96">"run overflow in ESC2 i=%d run=%d level=%d\n"</literal></expr></argument>, <argument pos:start="359:99" pos:end="359:99"><expr pos:start="359:99" pos:end="359:99"><name pos:start="359:99" pos:end="359:99">i</name></expr></argument>, <argument pos:start="359:102" pos:end="359:104"><expr pos:start="359:102" pos:end="359:104"><name pos:start="359:102" pos:end="359:104">run</name></expr></argument>, <argument pos:start="359:107" pos:end="359:111"><expr pos:start="359:107" pos:end="359:111"><name pos:start="359:107" pos:end="359:111">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="361:1" pos:end="361:6">#<cpp:directive pos:start="361:2" pos:end="361:6">endif</cpp:directive></cpp:endif>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="365:15" pos:end="403:13">else <block pos:start="365:20" pos:end="403:13">{<block_content pos:start="371:17" pos:end="402:0">

                <comment type="block" pos:start="367:17" pos:end="367:34">/* first escape */</comment>

<cpp:if pos:start="369:1" pos:end="369:23">#<cpp:directive pos:start="369:2" pos:end="369:3">if</cpp:directive> <expr pos:start="369:5" pos:end="369:23"><name pos:start="369:5" pos:end="369:18">MIN_CACHE_BITS</name> <operator pos:start="369:20" pos:end="369:20">&lt;</operator> <literal type="number" pos:start="369:22" pos:end="369:23">22</literal></expr></cpp:if>

                <expr_stmt pos:start="371:17" pos:end="371:46"><expr pos:start="371:17" pos:end="371:45"><call pos:start="371:17" pos:end="371:45"><name pos:start="371:17" pos:end="371:30">LAST_SKIP_BITS</name><argument_list pos:start="371:31" pos:end="371:45">(<argument pos:start="371:32" pos:end="371:33"><expr pos:start="371:32" pos:end="371:33"><name pos:start="371:32" pos:end="371:33">re</name></expr></argument>, <argument pos:start="371:36" pos:end="371:41"><expr pos:start="371:36" pos:end="371:41"><operator pos:start="371:36" pos:end="371:36">&amp;</operator><name pos:start="371:37" pos:end="371:41"><name pos:start="371:37" pos:end="371:37">s</name><operator pos:start="371:38" pos:end="371:39">-&gt;</operator><name pos:start="371:40" pos:end="371:41">gb</name></name></expr></argument>, <argument pos:start="371:44" pos:end="371:44"><expr pos:start="371:44" pos:end="371:44"><literal type="number" pos:start="371:44" pos:end="371:44">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="373:17" pos:end="376:0"><expr pos:start="373:17" pos:end="373:40"><call pos:start="373:17" pos:end="373:40"><name pos:start="373:17" pos:end="373:28">UPDATE_CACHE</name><argument_list pos:start="373:29" pos:end="373:40">(<argument pos:start="373:30" pos:end="373:31"><expr pos:start="373:30" pos:end="373:31"><name pos:start="373:30" pos:end="373:31">re</name></expr></argument>, <argument pos:start="373:34" pos:end="373:39"><expr pos:start="373:34" pos:end="373:39"><operator pos:start="373:34" pos:end="373:34">&amp;</operator><name pos:start="373:35" pos:end="373:39"><name pos:start="373:35" pos:end="373:35">s</name><operator pos:start="373:36" pos:end="373:37">-&gt;</operator><name pos:start="373:38" pos:end="373:39">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="375:1" pos:end="375:5">#<cpp:directive pos:start="375:2" pos:end="375:5">else</cpp:directive></cpp:else>

                <expr_stmt pos:start="377:17" pos:end="380:0"><expr pos:start="377:17" pos:end="377:40"><call pos:start="377:17" pos:end="377:40"><name pos:start="377:17" pos:end="377:25">SKIP_BITS</name><argument_list pos:start="377:26" pos:end="377:40">(<argument pos:start="377:27" pos:end="377:28"><expr pos:start="377:27" pos:end="377:28"><name pos:start="377:27" pos:end="377:28">re</name></expr></argument>, <argument pos:start="377:31" pos:end="377:36"><expr pos:start="377:31" pos:end="377:36"><operator pos:start="377:31" pos:end="377:31">&amp;</operator><name pos:start="377:32" pos:end="377:36"><name pos:start="377:32" pos:end="377:32">s</name><operator pos:start="377:33" pos:end="377:34">-&gt;</operator><name pos:start="377:35" pos:end="377:36">gb</name></name></expr></argument>, <argument pos:start="377:39" pos:end="377:39"><expr pos:start="377:39" pos:end="377:39"><literal type="number" pos:start="377:39" pos:end="377:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="379:1" pos:end="379:6">#<cpp:directive pos:start="379:2" pos:end="379:6">endif</cpp:directive></cpp:endif>

                <expr_stmt pos:start="381:17" pos:end="381:79"><expr pos:start="381:17" pos:end="381:78"><call pos:start="381:17" pos:end="381:78"><name pos:start="381:17" pos:end="381:26">GET_RL_VLC</name><argument_list pos:start="381:27" pos:end="381:78">(<argument pos:start="381:28" pos:end="381:32"><expr pos:start="381:28" pos:end="381:32"><name pos:start="381:28" pos:end="381:32">level</name></expr></argument>, <argument pos:start="381:35" pos:end="381:37"><expr pos:start="381:35" pos:end="381:37"><name pos:start="381:35" pos:end="381:37">run</name></expr></argument>, <argument pos:start="381:40" pos:end="381:41"><expr pos:start="381:40" pos:end="381:41"><name pos:start="381:40" pos:end="381:41">re</name></expr></argument>, <argument pos:start="381:44" pos:end="381:49"><expr pos:start="381:44" pos:end="381:49"><operator pos:start="381:44" pos:end="381:44">&amp;</operator><name pos:start="381:45" pos:end="381:49"><name pos:start="381:45" pos:end="381:45">s</name><operator pos:start="381:46" pos:end="381:47">-&gt;</operator><name pos:start="381:48" pos:end="381:49">gb</name></name></expr></argument>, <argument pos:start="381:52" pos:end="381:57"><expr pos:start="381:52" pos:end="381:57"><name pos:start="381:52" pos:end="381:57">rl_vlc</name></expr></argument>, <argument pos:start="381:60" pos:end="381:71"><expr pos:start="381:60" pos:end="381:71"><name pos:start="381:60" pos:end="381:71">TEX_VLC_BITS</name></expr></argument>, <argument pos:start="381:74" pos:end="381:74"><expr pos:start="381:74" pos:end="381:74"><literal type="number" pos:start="381:74" pos:end="381:74">2</literal></expr></argument>, <argument pos:start="381:77" pos:end="381:77"><expr pos:start="381:77" pos:end="381:77"><literal type="number" pos:start="381:77" pos:end="381:77">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="383:17" pos:end="383:24"><expr pos:start="383:17" pos:end="383:23"><name pos:start="383:17" pos:end="383:17">i</name><operator pos:start="383:18" pos:end="383:19">+=</operator> <name pos:start="383:21" pos:end="383:23">run</name></expr>;</expr_stmt>

                <expr_stmt pos:start="385:17" pos:end="385:73"><expr pos:start="385:17" pos:end="385:72"><name pos:start="385:17" pos:end="385:21">level</name> <operator pos:start="385:23" pos:end="385:23">=</operator> <name pos:start="385:25" pos:end="385:29">level</name> <operator pos:start="385:31" pos:end="385:31">+</operator> <name pos:start="385:33" pos:end="385:65"><name pos:start="385:33" pos:end="385:34">rl</name><operator pos:start="385:35" pos:end="385:36">-&gt;</operator><name pos:start="385:37" pos:end="385:45">max_level</name><index pos:start="385:46" pos:end="385:53">[<expr pos:start="385:47" pos:end="385:52"><name pos:start="385:47" pos:end="385:49">run</name><operator pos:start="385:50" pos:end="385:51">&gt;&gt;</operator><literal type="number" pos:start="385:52" pos:end="385:52">7</literal></expr>]</index><index pos:start="385:54" pos:end="385:65">[<expr pos:start="385:55" pos:end="385:64"><operator pos:start="385:55" pos:end="385:55">(</operator><name pos:start="385:56" pos:end="385:58">run</name><operator pos:start="385:59" pos:end="385:59">-</operator><literal type="number" pos:start="385:60" pos:end="385:60">1</literal><operator pos:start="385:61" pos:end="385:61">)</operator><operator pos:start="385:62" pos:end="385:62">&amp;</operator><literal type="number" pos:start="385:63" pos:end="385:64">63</literal></expr>]</index></name> <operator pos:start="385:67" pos:end="385:67">*</operator> <name pos:start="385:69" pos:end="385:72">qmul</name></expr>;</expr_stmt><comment type="line" pos:start="385:74" pos:end="385:93">//FIXME opt indexing</comment>

                <expr_stmt pos:start="387:17" pos:end="387:88"><expr pos:start="387:17" pos:end="387:87"><name pos:start="387:17" pos:end="387:21">level</name> <operator pos:start="387:23" pos:end="387:23">=</operator> <operator pos:start="387:25" pos:end="387:25">(</operator><name pos:start="387:26" pos:end="387:30">level</name> <operator pos:start="387:32" pos:end="387:32">^</operator> <call pos:start="387:34" pos:end="387:58"><name pos:start="387:34" pos:end="387:43">SHOW_SBITS</name><argument_list pos:start="387:44" pos:end="387:58">(<argument pos:start="387:45" pos:end="387:46"><expr pos:start="387:45" pos:end="387:46"><name pos:start="387:45" pos:end="387:46">re</name></expr></argument>, <argument pos:start="387:49" pos:end="387:54"><expr pos:start="387:49" pos:end="387:54"><operator pos:start="387:49" pos:end="387:49">&amp;</operator><name pos:start="387:50" pos:end="387:54"><name pos:start="387:50" pos:end="387:50">s</name><operator pos:start="387:51" pos:end="387:52">-&gt;</operator><name pos:start="387:53" pos:end="387:54">gb</name></name></expr></argument>, <argument pos:start="387:57" pos:end="387:57"><expr pos:start="387:57" pos:end="387:57"><literal type="number" pos:start="387:57" pos:end="387:57">1</literal></expr></argument>)</argument_list></call><operator pos:start="387:59" pos:end="387:59">)</operator> <operator pos:start="387:61" pos:end="387:61">-</operator> <call pos:start="387:63" pos:end="387:87"><name pos:start="387:63" pos:end="387:72">SHOW_SBITS</name><argument_list pos:start="387:73" pos:end="387:87">(<argument pos:start="387:74" pos:end="387:75"><expr pos:start="387:74" pos:end="387:75"><name pos:start="387:74" pos:end="387:75">re</name></expr></argument>, <argument pos:start="387:78" pos:end="387:83"><expr pos:start="387:78" pos:end="387:83"><operator pos:start="387:78" pos:end="387:78">&amp;</operator><name pos:start="387:79" pos:end="387:83"><name pos:start="387:79" pos:end="387:79">s</name><operator pos:start="387:80" pos:end="387:81">-&gt;</operator><name pos:start="387:82" pos:end="387:83">gb</name></name></expr></argument>, <argument pos:start="387:86" pos:end="387:86"><expr pos:start="387:86" pos:end="387:86"><literal type="number" pos:start="387:86" pos:end="387:86">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="389:17" pos:end="392:0"><expr pos:start="389:17" pos:end="389:45"><call pos:start="389:17" pos:end="389:45"><name pos:start="389:17" pos:end="389:30">LAST_SKIP_BITS</name><argument_list pos:start="389:31" pos:end="389:45">(<argument pos:start="389:32" pos:end="389:33"><expr pos:start="389:32" pos:end="389:33"><name pos:start="389:32" pos:end="389:33">re</name></expr></argument>, <argument pos:start="389:36" pos:end="389:41"><expr pos:start="389:36" pos:end="389:41"><operator pos:start="389:36" pos:end="389:36">&amp;</operator><name pos:start="389:37" pos:end="389:41"><name pos:start="389:37" pos:end="389:37">s</name><operator pos:start="389:38" pos:end="389:39">-&gt;</operator><name pos:start="389:40" pos:end="389:41">gb</name></name></expr></argument>, <argument pos:start="389:44" pos:end="389:44"><expr pos:start="389:44" pos:end="389:44"><literal type="number" pos:start="389:44" pos:end="389:44">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="391:1" pos:end="391:20">#<cpp:directive pos:start="391:2" pos:end="391:6">ifdef</cpp:directive> <name pos:start="391:8" pos:end="391:20">ERROR_DETAILS</name></cpp:ifdef>

                <if_stmt pos:start="393:17" pos:end="402:0"><if pos:start="393:17" pos:end="395:97">if<condition pos:start="393:19" pos:end="393:27">(<expr pos:start="393:20" pos:end="393:26"><name pos:start="393:20" pos:end="393:22">run</name><operator pos:start="393:23" pos:end="393:24">==</operator><literal type="number" pos:start="393:25" pos:end="393:26">66</literal></expr>)</condition><block type="pseudo" pos:start="395:21" pos:end="395:97"><block_content pos:start="395:21" pos:end="395:97">

                    <expr_stmt pos:start="395:21" pos:end="395:97"><expr pos:start="395:21" pos:end="395:96"><call pos:start="395:21" pos:end="395:96"><name pos:start="395:21" pos:end="395:26">av_log</name><argument_list pos:start="395:27" pos:end="395:96">(<argument pos:start="395:28" pos:end="395:35"><expr pos:start="395:28" pos:end="395:35"><name pos:start="395:28" pos:end="395:35"><name pos:start="395:28" pos:end="395:28">s</name><operator pos:start="395:29" pos:end="395:30">-&gt;</operator><name pos:start="395:31" pos:end="395:35">avctx</name></name></expr></argument>, <argument pos:start="395:38" pos:end="395:49"><expr pos:start="395:38" pos:end="395:49"><name pos:start="395:38" pos:end="395:49">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="395:52" pos:end="395:88"><expr pos:start="395:52" pos:end="395:88"><literal type="string" pos:start="395:52" pos:end="395:88">"illegal vlc code in ESC1 level=%d\n"</literal></expr></argument>, <argument pos:start="395:91" pos:end="395:95"><expr pos:start="395:91" pos:end="395:95"><name pos:start="395:91" pos:end="395:95">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="397:17" pos:end="402:0">else if<condition pos:start="397:24" pos:end="397:52">(<expr pos:start="397:25" pos:end="397:51"><operator pos:start="397:25" pos:end="397:25">(</operator><name pos:start="397:26" pos:end="397:26">i</name><operator pos:start="397:27" pos:end="397:27">&gt;</operator><literal type="number" pos:start="397:28" pos:end="397:29">62</literal> <operator pos:start="397:31" pos:end="397:32">&amp;&amp;</operator> <name pos:start="397:34" pos:end="397:34">i</name><operator pos:start="397:35" pos:end="397:35">&lt;</operator><literal type="number" pos:start="397:36" pos:end="397:38">192</literal><operator pos:start="397:39" pos:end="397:39">)</operator> <operator pos:start="397:41" pos:end="397:42">||</operator> <name pos:start="397:44" pos:end="397:44">i</name><operator pos:start="397:45" pos:end="397:45">&gt;</operator><literal type="number" pos:start="397:46" pos:end="397:49">192</literal><operator pos:start="397:49" pos:end="397:49">+</operator><literal type="number" pos:start="397:50" pos:end="397:51">63</literal></expr>)</condition><block type="pseudo" pos:start="399:21" pos:end="402:0"><block_content pos:start="399:21" pos:end="402:0">

                    <expr_stmt pos:start="399:21" pos:end="402:0"><expr pos:start="399:21" pos:end="399:112"><call pos:start="399:21" pos:end="399:112"><name pos:start="399:21" pos:end="399:26">av_log</name><argument_list pos:start="399:27" pos:end="399:112">(<argument pos:start="399:28" pos:end="399:35"><expr pos:start="399:28" pos:end="399:35"><name pos:start="399:28" pos:end="399:35"><name pos:start="399:28" pos:end="399:28">s</name><operator pos:start="399:29" pos:end="399:30">-&gt;</operator><name pos:start="399:31" pos:end="399:35">avctx</name></name></expr></argument>, <argument pos:start="399:38" pos:end="399:49"><expr pos:start="399:38" pos:end="399:49"><name pos:start="399:38" pos:end="399:49">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="399:52" pos:end="399:96"><expr pos:start="399:52" pos:end="399:96"><literal type="string" pos:start="399:52" pos:end="399:96">"run overflow in ESC1 i=%d run=%d level=%d\n"</literal></expr></argument>, <argument pos:start="399:99" pos:end="399:99"><expr pos:start="399:99" pos:end="399:99"><name pos:start="399:99" pos:end="399:99">i</name></expr></argument>, <argument pos:start="399:102" pos:end="399:104"><expr pos:start="399:102" pos:end="399:104"><name pos:start="399:102" pos:end="399:104">run</name></expr></argument>, <argument pos:start="399:107" pos:end="399:111"><expr pos:start="399:107" pos:end="399:111"><name pos:start="399:107" pos:end="399:111">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="401:1" pos:end="401:6">#<cpp:directive pos:start="401:2" pos:end="401:6">endif</cpp:directive></cpp:endif>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="405:11" pos:end="425:9">else <block pos:start="405:16" pos:end="425:9">{<block_content pos:start="407:13" pos:end="424:0">

            <expr_stmt pos:start="407:13" pos:end="407:20"><expr pos:start="407:13" pos:end="407:19"><name pos:start="407:13" pos:end="407:13">i</name><operator pos:start="407:14" pos:end="407:15">+=</operator> <name pos:start="407:17" pos:end="407:19">run</name></expr>;</expr_stmt>

            <expr_stmt pos:start="409:13" pos:end="409:84"><expr pos:start="409:13" pos:end="409:83"><name pos:start="409:13" pos:end="409:17">level</name> <operator pos:start="409:19" pos:end="409:19">=</operator> <operator pos:start="409:21" pos:end="409:21">(</operator><name pos:start="409:22" pos:end="409:26">level</name> <operator pos:start="409:28" pos:end="409:28">^</operator> <call pos:start="409:30" pos:end="409:54"><name pos:start="409:30" pos:end="409:39">SHOW_SBITS</name><argument_list pos:start="409:40" pos:end="409:54">(<argument pos:start="409:41" pos:end="409:42"><expr pos:start="409:41" pos:end="409:42"><name pos:start="409:41" pos:end="409:42">re</name></expr></argument>, <argument pos:start="409:45" pos:end="409:50"><expr pos:start="409:45" pos:end="409:50"><operator pos:start="409:45" pos:end="409:45">&amp;</operator><name pos:start="409:46" pos:end="409:50"><name pos:start="409:46" pos:end="409:46">s</name><operator pos:start="409:47" pos:end="409:48">-&gt;</operator><name pos:start="409:49" pos:end="409:50">gb</name></name></expr></argument>, <argument pos:start="409:53" pos:end="409:53"><expr pos:start="409:53" pos:end="409:53"><literal type="number" pos:start="409:53" pos:end="409:53">1</literal></expr></argument>)</argument_list></call><operator pos:start="409:55" pos:end="409:55">)</operator> <operator pos:start="409:57" pos:end="409:57">-</operator> <call pos:start="409:59" pos:end="409:83"><name pos:start="409:59" pos:end="409:68">SHOW_SBITS</name><argument_list pos:start="409:69" pos:end="409:83">(<argument pos:start="409:70" pos:end="409:71"><expr pos:start="409:70" pos:end="409:71"><name pos:start="409:70" pos:end="409:71">re</name></expr></argument>, <argument pos:start="409:74" pos:end="409:79"><expr pos:start="409:74" pos:end="409:79"><operator pos:start="409:74" pos:end="409:74">&amp;</operator><name pos:start="409:75" pos:end="409:79"><name pos:start="409:75" pos:end="409:75">s</name><operator pos:start="409:76" pos:end="409:77">-&gt;</operator><name pos:start="409:78" pos:end="409:79">gb</name></name></expr></argument>, <argument pos:start="409:82" pos:end="409:82"><expr pos:start="409:82" pos:end="409:82"><literal type="number" pos:start="409:82" pos:end="409:82">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="411:13" pos:end="414:0"><expr pos:start="411:13" pos:end="411:41"><call pos:start="411:13" pos:end="411:41"><name pos:start="411:13" pos:end="411:26">LAST_SKIP_BITS</name><argument_list pos:start="411:27" pos:end="411:41">(<argument pos:start="411:28" pos:end="411:29"><expr pos:start="411:28" pos:end="411:29"><name pos:start="411:28" pos:end="411:29">re</name></expr></argument>, <argument pos:start="411:32" pos:end="411:37"><expr pos:start="411:32" pos:end="411:37"><operator pos:start="411:32" pos:end="411:32">&amp;</operator><name pos:start="411:33" pos:end="411:37"><name pos:start="411:33" pos:end="411:33">s</name><operator pos:start="411:34" pos:end="411:35">-&gt;</operator><name pos:start="411:36" pos:end="411:37">gb</name></name></expr></argument>, <argument pos:start="411:40" pos:end="411:40"><expr pos:start="411:40" pos:end="411:40"><literal type="number" pos:start="411:40" pos:end="411:40">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="413:1" pos:end="413:20">#<cpp:directive pos:start="413:2" pos:end="413:6">ifdef</cpp:directive> <name pos:start="413:8" pos:end="413:20">ERROR_DETAILS</name></cpp:ifdef>

                <if_stmt pos:start="415:17" pos:end="424:0"><if pos:start="415:17" pos:end="417:89">if<condition pos:start="415:19" pos:end="415:27">(<expr pos:start="415:20" pos:end="415:26"><name pos:start="415:20" pos:end="415:22">run</name><operator pos:start="415:23" pos:end="415:24">==</operator><literal type="number" pos:start="415:25" pos:end="415:26">66</literal></expr>)</condition><block type="pseudo" pos:start="417:21" pos:end="417:89"><block_content pos:start="417:21" pos:end="417:89">

                    <expr_stmt pos:start="417:21" pos:end="417:89"><expr pos:start="417:21" pos:end="417:88"><call pos:start="417:21" pos:end="417:88"><name pos:start="417:21" pos:end="417:26">av_log</name><argument_list pos:start="417:27" pos:end="417:88">(<argument pos:start="417:28" pos:end="417:35"><expr pos:start="417:28" pos:end="417:35"><name pos:start="417:28" pos:end="417:35"><name pos:start="417:28" pos:end="417:28">s</name><operator pos:start="417:29" pos:end="417:30">-&gt;</operator><name pos:start="417:31" pos:end="417:35">avctx</name></name></expr></argument>, <argument pos:start="417:38" pos:end="417:49"><expr pos:start="417:38" pos:end="417:49"><name pos:start="417:38" pos:end="417:49">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="417:52" pos:end="417:80"><expr pos:start="417:52" pos:end="417:80"><literal type="string" pos:start="417:52" pos:end="417:80">"illegal vlc code level=%d\n"</literal></expr></argument>, <argument pos:start="417:83" pos:end="417:87"><expr pos:start="417:83" pos:end="417:87"><name pos:start="417:83" pos:end="417:87">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="419:17" pos:end="424:0">else if<condition pos:start="419:24" pos:end="419:52">(<expr pos:start="419:25" pos:end="419:51"><operator pos:start="419:25" pos:end="419:25">(</operator><name pos:start="419:26" pos:end="419:26">i</name><operator pos:start="419:27" pos:end="419:27">&gt;</operator><literal type="number" pos:start="419:28" pos:end="419:29">62</literal> <operator pos:start="419:31" pos:end="419:32">&amp;&amp;</operator> <name pos:start="419:34" pos:end="419:34">i</name><operator pos:start="419:35" pos:end="419:35">&lt;</operator><literal type="number" pos:start="419:36" pos:end="419:38">192</literal><operator pos:start="419:39" pos:end="419:39">)</operator> <operator pos:start="419:41" pos:end="419:42">||</operator> <name pos:start="419:44" pos:end="419:44">i</name><operator pos:start="419:45" pos:end="419:45">&gt;</operator><literal type="number" pos:start="419:46" pos:end="419:49">192</literal><operator pos:start="419:49" pos:end="419:49">+</operator><literal type="number" pos:start="419:50" pos:end="419:51">63</literal></expr>)</condition><block type="pseudo" pos:start="421:21" pos:end="424:0"><block_content pos:start="421:21" pos:end="424:0">

                    <expr_stmt pos:start="421:21" pos:end="424:0"><expr pos:start="421:21" pos:end="421:104"><call pos:start="421:21" pos:end="421:104"><name pos:start="421:21" pos:end="421:26">av_log</name><argument_list pos:start="421:27" pos:end="421:104">(<argument pos:start="421:28" pos:end="421:35"><expr pos:start="421:28" pos:end="421:35"><name pos:start="421:28" pos:end="421:35"><name pos:start="421:28" pos:end="421:28">s</name><operator pos:start="421:29" pos:end="421:30">-&gt;</operator><name pos:start="421:31" pos:end="421:35">avctx</name></name></expr></argument>, <argument pos:start="421:38" pos:end="421:49"><expr pos:start="421:38" pos:end="421:49"><name pos:start="421:38" pos:end="421:49">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="421:52" pos:end="421:88"><expr pos:start="421:52" pos:end="421:88"><literal type="string" pos:start="421:52" pos:end="421:88">"run overflow i=%d run=%d level=%d\n"</literal></expr></argument>, <argument pos:start="421:91" pos:end="421:91"><expr pos:start="421:91" pos:end="421:91"><name pos:start="421:91" pos:end="421:91">i</name></expr></argument>, <argument pos:start="421:94" pos:end="421:96"><expr pos:start="421:94" pos:end="421:96"><name pos:start="421:94" pos:end="421:96">run</name></expr></argument>, <argument pos:start="421:99" pos:end="421:103"><expr pos:start="421:99" pos:end="421:103"><name pos:start="421:99" pos:end="421:103">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="423:1" pos:end="423:6">#<cpp:directive pos:start="423:2" pos:end="423:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="427:9" pos:end="457:9"><if pos:start="427:9" pos:end="457:9">if <condition pos:start="427:12" pos:end="427:19">(<expr pos:start="427:13" pos:end="427:18"><name pos:start="427:13" pos:end="427:13">i</name> <operator pos:start="427:15" pos:end="427:15">&gt;</operator> <literal type="number" pos:start="427:17" pos:end="427:18">62</literal></expr>)</condition><block pos:start="427:20" pos:end="457:9">{<block_content pos:start="429:13" pos:end="455:18">

            <expr_stmt pos:start="429:13" pos:end="429:20"><expr pos:start="429:13" pos:end="429:19"><name pos:start="429:13" pos:end="429:13">i</name><operator pos:start="429:14" pos:end="429:15">-=</operator> <literal type="number" pos:start="429:17" pos:end="429:19">192</literal></expr>;</expr_stmt>

            <if_stmt pos:start="431:13" pos:end="449:13"><if pos:start="431:13" pos:end="449:13">if<condition pos:start="431:15" pos:end="431:23">(<expr pos:start="431:16" pos:end="431:22"><name pos:start="431:16" pos:end="431:16">i</name><operator pos:start="431:17" pos:end="431:17">&amp;</operator><operator pos:start="431:18" pos:end="431:18">(</operator><operator pos:start="431:19" pos:end="431:19">~</operator><literal type="number" pos:start="431:20" pos:end="431:21">63</literal><operator pos:start="431:22" pos:end="431:22">)</operator></expr>)</condition><block pos:start="431:24" pos:end="449:13">{<block_content pos:start="433:17" pos:end="447:17">

                <decl_stmt pos:start="433:17" pos:end="433:76"><decl pos:start="433:17" pos:end="433:75"><type pos:start="433:17" pos:end="433:25"><specifier pos:start="433:17" pos:end="433:21">const</specifier> <name pos:start="433:23" pos:end="433:25">int</name></type> <name pos:start="433:27" pos:end="433:30">left</name><init pos:start="433:31" pos:end="433:75">= <expr pos:start="433:33" pos:end="433:75"><name pos:start="433:33" pos:end="433:50"><name pos:start="433:33" pos:end="433:33">s</name><operator pos:start="433:34" pos:end="433:35">-&gt;</operator><name pos:start="433:36" pos:end="433:37">gb</name><operator pos:start="433:38" pos:end="433:38">.</operator><name pos:start="433:39" pos:end="433:50">size_in_bits</name></name> <operator pos:start="433:52" pos:end="433:52">-</operator> <call pos:start="433:54" pos:end="433:75"><name pos:start="433:54" pos:end="433:67">get_bits_count</name><argument_list pos:start="433:68" pos:end="433:75">(<argument pos:start="433:69" pos:end="433:74"><expr pos:start="433:69" pos:end="433:74"><operator pos:start="433:69" pos:end="433:69">&amp;</operator><name pos:start="433:70" pos:end="433:74"><name pos:start="433:70" pos:end="433:70">s</name><operator pos:start="433:71" pos:end="433:72">-&gt;</operator><name pos:start="433:73" pos:end="433:74">gb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="435:17" pos:end="447:17"><if pos:start="435:17" pos:end="441:17">if<condition pos:start="435:19" pos:end="435:91">(<expr pos:start="435:20" pos:end="435:90"><operator pos:start="435:20" pos:end="435:20">(</operator><operator pos:start="435:21" pos:end="435:21">(</operator><name pos:start="435:22" pos:end="435:22">i</name><operator pos:start="435:23" pos:end="435:23">+</operator><literal type="number" pos:start="435:24" pos:end="435:26">192</literal> <operator pos:start="435:28" pos:end="435:29">==</operator> <literal type="number" pos:start="435:31" pos:end="435:32">64</literal> <operator pos:start="435:34" pos:end="435:35">&amp;&amp;</operator> <name pos:start="435:37" pos:end="435:41">level</name><operator pos:start="435:42" pos:end="435:42">/</operator><name pos:start="435:43" pos:end="435:46">qmul</name><operator pos:start="435:47" pos:end="435:48">==</operator><operator pos:start="435:49" pos:end="435:49">-</operator><literal type="number" pos:start="435:50" pos:end="435:50">1</literal><operator pos:start="435:51" pos:end="435:51">)</operator> <operator pos:start="435:53" pos:end="435:54">||</operator> <name pos:start="435:56" pos:end="435:75"><name pos:start="435:56" pos:end="435:56">s</name><operator pos:start="435:57" pos:end="435:58">-&gt;</operator><name pos:start="435:59" pos:end="435:75">error_recognition</name></name><operator pos:start="435:76" pos:end="435:77">&lt;=</operator><literal type="number" pos:start="435:78" pos:end="435:78">1</literal><operator pos:start="435:79" pos:end="435:79">)</operator> <operator pos:start="435:81" pos:end="435:82">&amp;&amp;</operator> <name pos:start="435:84" pos:end="435:87">left</name><operator pos:start="435:88" pos:end="435:89">&gt;=</operator><literal type="number" pos:start="435:90" pos:end="435:90">0</literal></expr>)</condition><block pos:start="435:92" pos:end="441:17">{<block_content pos:start="437:21" pos:end="439:26">

                    <expr_stmt pos:start="437:21" pos:end="437:101"><expr pos:start="437:21" pos:end="437:100"><call pos:start="437:21" pos:end="437:100"><name pos:start="437:21" pos:end="437:26">av_log</name><argument_list pos:start="437:27" pos:end="437:100">(<argument pos:start="437:28" pos:end="437:35"><expr pos:start="437:28" pos:end="437:35"><name pos:start="437:28" pos:end="437:35"><name pos:start="437:28" pos:end="437:28">s</name><operator pos:start="437:29" pos:end="437:30">-&gt;</operator><name pos:start="437:31" pos:end="437:35">avctx</name></name></expr></argument>, <argument pos:start="437:38" pos:end="437:49"><expr pos:start="437:38" pos:end="437:49"><name pos:start="437:38" pos:end="437:49">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="437:52" pos:end="437:81"><expr pos:start="437:52" pos:end="437:81"><literal type="string" pos:start="437:52" pos:end="437:81">"ignoring overflow at %d %d\n"</literal></expr></argument>, <argument pos:start="437:84" pos:end="437:90"><expr pos:start="437:84" pos:end="437:90"><name pos:start="437:84" pos:end="437:90"><name pos:start="437:84" pos:end="437:84">s</name><operator pos:start="437:85" pos:end="437:86">-&gt;</operator><name pos:start="437:87" pos:end="437:90">mb_x</name></name></expr></argument>, <argument pos:start="437:93" pos:end="437:99"><expr pos:start="437:93" pos:end="437:99"><name pos:start="437:93" pos:end="437:99"><name pos:start="437:93" pos:end="437:93">s</name><operator pos:start="437:94" pos:end="437:95">-&gt;</operator><name pos:start="437:96" pos:end="437:99">mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="439:21" pos:end="439:26">break;</break>

                </block_content>}</block></if><else pos:start="441:18" pos:end="447:17">else<block pos:start="441:22" pos:end="447:17">{<block_content pos:start="443:21" pos:end="445:30">

                    <expr_stmt pos:start="443:21" pos:end="443:98"><expr pos:start="443:21" pos:end="443:97"><call pos:start="443:21" pos:end="443:97"><name pos:start="443:21" pos:end="443:26">av_log</name><argument_list pos:start="443:27" pos:end="443:97">(<argument pos:start="443:28" pos:end="443:35"><expr pos:start="443:28" pos:end="443:35"><name pos:start="443:28" pos:end="443:35"><name pos:start="443:28" pos:end="443:28">s</name><operator pos:start="443:29" pos:end="443:30">-&gt;</operator><name pos:start="443:31" pos:end="443:35">avctx</name></name></expr></argument>, <argument pos:start="443:38" pos:end="443:49"><expr pos:start="443:38" pos:end="443:49"><name pos:start="443:38" pos:end="443:49">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="443:52" pos:end="443:78"><expr pos:start="443:52" pos:end="443:78"><literal type="string" pos:start="443:52" pos:end="443:78">"ac-tex damaged at %d %d\n"</literal></expr></argument>, <argument pos:start="443:81" pos:end="443:87"><expr pos:start="443:81" pos:end="443:87"><name pos:start="443:81" pos:end="443:87"><name pos:start="443:81" pos:end="443:81">s</name><operator pos:start="443:82" pos:end="443:83">-&gt;</operator><name pos:start="443:84" pos:end="443:87">mb_x</name></name></expr></argument>, <argument pos:start="443:90" pos:end="443:96"><expr pos:start="443:90" pos:end="443:96"><name pos:start="443:90" pos:end="443:96"><name pos:start="443:90" pos:end="443:90">s</name><operator pos:start="443:91" pos:end="443:92">-&gt;</operator><name pos:start="443:93" pos:end="443:96">mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="445:21" pos:end="445:30">return <expr pos:start="445:28" pos:end="445:29"><operator pos:start="445:28" pos:end="445:28">-</operator><literal type="number" pos:start="445:29" pos:end="445:29">1</literal></expr>;</return>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="453:13" pos:end="453:41"><expr pos:start="453:13" pos:end="453:40"><name pos:start="453:13" pos:end="453:32"><name pos:start="453:13" pos:end="453:17">block</name><index pos:start="453:18" pos:end="453:32">[<expr pos:start="453:19" pos:end="453:31"><name pos:start="453:19" pos:end="453:31"><name pos:start="453:19" pos:end="453:28">scan_table</name><index pos:start="453:29" pos:end="453:31">[<expr pos:start="453:30" pos:end="453:30"><name pos:start="453:30" pos:end="453:30">i</name></expr>]</index></name></expr>]</index></name> <operator pos:start="453:34" pos:end="453:34">=</operator> <name pos:start="453:36" pos:end="453:40">level</name></expr>;</expr_stmt>

            <break pos:start="455:13" pos:end="455:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="461:9" pos:end="461:37"><expr pos:start="461:9" pos:end="461:36"><name pos:start="461:9" pos:end="461:28"><name pos:start="461:9" pos:end="461:13">block</name><index pos:start="461:14" pos:end="461:28">[<expr pos:start="461:15" pos:end="461:27"><name pos:start="461:15" pos:end="461:27"><name pos:start="461:15" pos:end="461:24">scan_table</name><index pos:start="461:25" pos:end="461:27">[<expr pos:start="461:26" pos:end="461:26"><name pos:start="461:26" pos:end="461:26">i</name></expr>]</index></name></expr>]</index></name> <operator pos:start="461:30" pos:end="461:30">=</operator> <name pos:start="461:32" pos:end="461:36">level</name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="465:5" pos:end="465:29"><expr pos:start="465:5" pos:end="465:28"><call pos:start="465:5" pos:end="465:28"><name pos:start="465:5" pos:end="465:16">CLOSE_READER</name><argument_list pos:start="465:17" pos:end="465:28">(<argument pos:start="465:18" pos:end="465:19"><expr pos:start="465:18" pos:end="465:19"><name pos:start="465:18" pos:end="465:19">re</name></expr></argument>, <argument pos:start="465:22" pos:end="465:27"><expr pos:start="465:22" pos:end="465:27"><operator pos:start="465:22" pos:end="465:22">&amp;</operator><name pos:start="465:23" pos:end="465:27"><name pos:start="465:23" pos:end="465:23">s</name><operator pos:start="465:24" pos:end="465:25">-&gt;</operator><name pos:start="465:26" pos:end="465:27">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block>

 <label pos:start="469:2" pos:end="469:11"><name pos:start="469:2" pos:end="469:10">not_coded</name>:</label>

    <if_stmt pos:start="471:5" pos:end="481:5"><if pos:start="471:5" pos:end="481:5">if <condition pos:start="471:8" pos:end="471:20">(<expr pos:start="471:9" pos:end="471:19"><name pos:start="471:9" pos:end="471:19"><name pos:start="471:9" pos:end="471:9">s</name><operator pos:start="471:10" pos:end="471:11">-&gt;</operator><name pos:start="471:12" pos:end="471:19">mb_intra</name></name></expr>)</condition> <block pos:start="471:22" pos:end="481:5">{<block_content pos:start="473:9" pos:end="479:9">

        <expr_stmt pos:start="473:9" pos:end="473:48"><expr pos:start="473:9" pos:end="473:47"><call pos:start="473:9" pos:end="473:47"><name pos:start="473:9" pos:end="473:21">mpeg4_pred_ac</name><argument_list pos:start="473:22" pos:end="473:47">(<argument pos:start="473:23" pos:end="473:23"><expr pos:start="473:23" pos:end="473:23"><name pos:start="473:23" pos:end="473:23">s</name></expr></argument>, <argument pos:start="473:26" pos:end="473:30"><expr pos:start="473:26" pos:end="473:30"><name pos:start="473:26" pos:end="473:30">block</name></expr></argument>, <argument pos:start="473:33" pos:end="473:33"><expr pos:start="473:33" pos:end="473:33"><name pos:start="473:33" pos:end="473:33">n</name></expr></argument>, <argument pos:start="473:36" pos:end="473:46"><expr pos:start="473:36" pos:end="473:46"><name pos:start="473:36" pos:end="473:46">dc_pred_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="475:9" pos:end="479:9"><if pos:start="475:9" pos:end="479:9">if <condition pos:start="475:12" pos:end="475:23">(<expr pos:start="475:13" pos:end="475:22"><name pos:start="475:13" pos:end="475:22"><name pos:start="475:13" pos:end="475:13">s</name><operator pos:start="475:14" pos:end="475:15">-&gt;</operator><name pos:start="475:16" pos:end="475:22">ac_pred</name></name></expr>)</condition> <block pos:start="475:25" pos:end="479:9">{<block_content pos:start="477:13" pos:end="477:19">

            <expr_stmt pos:start="477:13" pos:end="477:19"><expr pos:start="477:13" pos:end="477:18"><name pos:start="477:13" pos:end="477:13">i</name> <operator pos:start="477:15" pos:end="477:15">=</operator> <literal type="number" pos:start="477:17" pos:end="477:18">63</literal></expr>;</expr_stmt> <comment type="block" pos:start="477:21" pos:end="477:42">/* XXX: not optimal */</comment>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="483:5" pos:end="483:42"><if pos:start="483:5" pos:end="483:42">if<condition pos:start="483:7" pos:end="483:36">(<expr pos:start="483:8" pos:end="483:35"><name pos:start="483:8" pos:end="483:25"><name pos:start="483:8" pos:end="483:8">s</name><operator pos:start="483:9" pos:end="483:10">-&gt;</operator><name pos:start="483:11" pos:end="483:25">msmpeg4_version</name></name><operator pos:start="483:26" pos:end="483:27">&gt;=</operator><literal type="number" pos:start="483:28" pos:end="483:28">4</literal> <operator pos:start="483:30" pos:end="483:31">&amp;&amp;</operator> <name pos:start="483:33" pos:end="483:33">i</name><operator pos:start="483:34" pos:end="483:34">&gt;</operator><literal type="number" pos:start="483:35" pos:end="483:35">0</literal></expr>)</condition><block type="pseudo" pos:start="483:38" pos:end="483:42"><block_content pos:start="483:38" pos:end="483:42"> <expr_stmt pos:start="483:38" pos:end="483:42"><expr pos:start="483:38" pos:end="483:41"><name pos:start="483:38" pos:end="483:38">i</name><operator pos:start="483:39" pos:end="483:39">=</operator><literal type="number" pos:start="483:40" pos:end="483:41">63</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line" pos:start="483:44" pos:end="483:63">//FIXME/XXX optimize</comment>

    <expr_stmt pos:start="485:5" pos:end="485:31"><expr pos:start="485:5" pos:end="485:30"><name pos:start="485:5" pos:end="485:26"><name pos:start="485:5" pos:end="485:5">s</name><operator pos:start="485:6" pos:end="485:7">-&gt;</operator><name pos:start="485:8" pos:end="485:23">block_last_index</name><index pos:start="485:24" pos:end="485:26">[<expr pos:start="485:25" pos:end="485:25"><name pos:start="485:25" pos:end="485:25">n</name></expr>]</index></name> <operator pos:start="485:28" pos:end="485:28">=</operator> <name pos:start="485:30" pos:end="485:30">i</name></expr>;</expr_stmt>



    <return pos:start="489:5" pos:end="489:13">return <expr pos:start="489:12" pos:end="489:12"><literal type="number" pos:start="489:12" pos:end="489:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
