<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15025.c" pos:tabs="8"><function pos:start="1:1" pos:end="43:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">x86_iommu_realize</name><parameter_list pos:start="1:30" pos:end="1:61">(<parameter pos:start="1:31" pos:end="1:46"><decl pos:start="1:31" pos:end="1:46"><type pos:start="1:31" pos:end="1:46"><name pos:start="1:31" pos:end="1:41">DeviceState</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:46">dev</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:60"><decl pos:start="1:49" pos:end="1:60"><type pos:start="1:49" pos:end="1:60"><name pos:start="1:49" pos:end="1:53">Error</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier><modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:60">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="43:1">{<block_content pos:start="5:5" pos:end="41:49">

    <decl_stmt pos:start="5:5" pos:end="5:53"><decl pos:start="5:5" pos:end="5:52"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">X86IOMMUState</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:28">x86_iommu</name> <init pos:start="5:30" pos:end="5:52">= <expr pos:start="5:32" pos:end="5:52"><call pos:start="5:32" pos:end="5:52"><name pos:start="5:32" pos:end="5:47">X86_IOMMU_DEVICE</name><argument_list pos:start="5:48" pos:end="5:52">(<argument pos:start="5:49" pos:end="5:51"><expr pos:start="5:49" pos:end="5:51"><name pos:start="5:49" pos:end="5:51">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:56"><decl pos:start="7:5" pos:end="7:55"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">X86IOMMUClass</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:28">x86_class</name> <init pos:start="7:30" pos:end="7:55">= <expr pos:start="7:32" pos:end="7:55"><call pos:start="7:32" pos:end="7:55"><name pos:start="7:32" pos:end="7:50">X86_IOMMU_GET_CLASS</name><argument_list pos:start="7:51" pos:end="7:55">(<argument pos:start="7:52" pos:end="7:54"><expr pos:start="7:52" pos:end="7:54"><name pos:start="7:52" pos:end="7:54">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:51"><decl pos:start="9:5" pos:end="9:50"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">MachineState</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:20">ms</name> <init pos:start="9:22" pos:end="9:50">= <expr pos:start="9:24" pos:end="9:50"><call pos:start="9:24" pos:end="9:50"><name pos:start="9:24" pos:end="9:30">MACHINE</name><argument_list pos:start="9:31" pos:end="9:50">(<argument pos:start="9:32" pos:end="9:49"><expr pos:start="9:32" pos:end="9:49"><call pos:start="9:32" pos:end="9:49"><name pos:start="9:32" pos:end="9:47">qdev_get_machine</name><argument_list pos:start="9:48" pos:end="9:49">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:45"><decl pos:start="11:5" pos:end="11:44"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">MachineClass</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:20">mc</name> <init pos:start="11:22" pos:end="11:44">= <expr pos:start="11:24" pos:end="11:44"><call pos:start="11:24" pos:end="11:44"><name pos:start="11:24" pos:end="11:40">MACHINE_GET_CLASS</name><argument_list pos:start="11:41" pos:end="11:44">(<argument pos:start="11:42" pos:end="11:43"><expr pos:start="11:42" pos:end="11:43"><name pos:start="11:42" pos:end="11:43">ms</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="15:69"><decl pos:start="13:5" pos:end="15:68"><type pos:start="13:5" pos:end="13:20"><name pos:start="13:5" pos:end="13:18">PCMachineState</name> <modifier pos:start="13:20" pos:end="13:20">*</modifier></type><name pos:start="13:21" pos:end="13:24">pcms</name> <init pos:start="13:26" pos:end="15:68">=

        <expr pos:start="15:9" pos:end="15:68"><call pos:start="15:9" pos:end="15:68"><name pos:start="15:9" pos:end="15:18">PC_MACHINE</name><argument_list pos:start="15:19" pos:end="15:68">(<argument pos:start="15:20" pos:end="15:67"><expr pos:start="15:20" pos:end="15:67"><call pos:start="15:20" pos:end="15:67"><name pos:start="15:20" pos:end="15:38">object_dynamic_cast</name><argument_list pos:start="15:39" pos:end="15:67">(<argument pos:start="15:40" pos:end="15:49"><expr pos:start="15:40" pos:end="15:49"><call pos:start="15:40" pos:end="15:49"><name pos:start="15:40" pos:end="15:45">OBJECT</name><argument_list pos:start="15:46" pos:end="15:49">(<argument pos:start="15:47" pos:end="15:48"><expr pos:start="15:47" pos:end="15:48"><name pos:start="15:47" pos:end="15:48">ms</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="15:52" pos:end="15:66"><expr pos:start="15:52" pos:end="15:66"><name pos:start="15:52" pos:end="15:66">TYPE_PC_MACHINE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:42"><expr pos:start="17:5" pos:end="17:41"><call pos:start="17:5" pos:end="17:41"><name pos:start="17:5" pos:end="17:14">QLIST_INIT</name><argument_list pos:start="17:15" pos:end="17:41">(<argument pos:start="17:16" pos:end="17:40"><expr pos:start="17:16" pos:end="17:40"><operator pos:start="17:16" pos:end="17:16">&amp;</operator><name pos:start="17:17" pos:end="17:40"><name pos:start="17:17" pos:end="17:25">x86_iommu</name><operator pos:start="17:26" pos:end="17:27">-&gt;</operator><name pos:start="17:28" pos:end="17:40">iec_notifiers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="21:5" pos:end="29:5"><if pos:start="21:5" pos:end="29:5">if <condition pos:start="21:8" pos:end="21:14">(<expr pos:start="21:9" pos:end="21:13"><operator pos:start="21:9" pos:end="21:9">!</operator><name pos:start="21:10" pos:end="21:13">pcms</name></expr>)</condition> <block pos:start="21:16" pos:end="29:5">{<block_content pos:start="23:9" pos:end="27:15">

        <expr_stmt pos:start="23:9" pos:end="25:29"><expr pos:start="23:9" pos:end="25:28"><call pos:start="23:9" pos:end="25:28"><name pos:start="23:9" pos:end="23:18">error_setg</name><argument_list pos:start="23:19" pos:end="25:28">(<argument pos:start="23:20" pos:end="23:23"><expr pos:start="23:20" pos:end="23:23"><name pos:start="23:20" pos:end="23:23">errp</name></expr></argument>, <argument pos:start="23:26" pos:end="23:67"><expr pos:start="23:26" pos:end="23:67"><literal type="string" pos:start="23:26" pos:end="23:67">"Machine-type '%s' not supported by IOMMU"</literal></expr></argument>,

                   <argument pos:start="25:20" pos:end="25:27"><expr pos:start="25:20" pos:end="25:27"><name pos:start="25:20" pos:end="25:27"><name pos:start="25:20" pos:end="25:21">mc</name><operator pos:start="25:22" pos:end="25:23">-&gt;</operator><name pos:start="25:24" pos:end="25:27">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="33:5" pos:end="37:5"><if pos:start="33:5" pos:end="37:5">if <condition pos:start="33:8" pos:end="33:27">(<expr pos:start="33:9" pos:end="33:26"><name pos:start="33:9" pos:end="33:26"><name pos:start="33:9" pos:end="33:17">x86_class</name><operator pos:start="33:18" pos:end="33:19">-&gt;</operator><name pos:start="33:20" pos:end="33:26">realize</name></name></expr>)</condition> <block pos:start="33:29" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:38">

        <expr_stmt pos:start="35:9" pos:end="35:38"><expr pos:start="35:9" pos:end="35:37"><call pos:start="35:9" pos:end="35:37"><name pos:start="35:9" pos:end="35:26"><name pos:start="35:9" pos:end="35:17">x86_class</name><operator pos:start="35:18" pos:end="35:19">-&gt;</operator><name pos:start="35:20" pos:end="35:26">realize</name></name><argument_list pos:start="35:27" pos:end="35:37">(<argument pos:start="35:28" pos:end="35:30"><expr pos:start="35:28" pos:end="35:30"><name pos:start="35:28" pos:end="35:30">dev</name></expr></argument>, <argument pos:start="35:33" pos:end="35:36"><expr pos:start="35:33" pos:end="35:36"><name pos:start="35:33" pos:end="35:36">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:49"><expr pos:start="41:5" pos:end="41:48"><call pos:start="41:5" pos:end="41:48"><name pos:start="41:5" pos:end="41:25">x86_iommu_set_default</name><argument_list pos:start="41:26" pos:end="41:48">(<argument pos:start="41:27" pos:end="41:47"><expr pos:start="41:27" pos:end="41:47"><call pos:start="41:27" pos:end="41:47"><name pos:start="41:27" pos:end="41:42">X86_IOMMU_DEVICE</name><argument_list pos:start="41:43" pos:end="41:47">(<argument pos:start="41:44" pos:end="41:46"><expr pos:start="41:44" pos:end="41:46"><name pos:start="41:44" pos:end="41:46">dev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
