<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17286.c" pos:tabs="8"><function pos:start="1:1" pos:end="59:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">jump_to_IPL_code</name><parameter_list pos:start="1:29" pos:end="1:46">(<parameter pos:start="1:30" pos:end="1:45"><decl pos:start="1:30" pos:end="1:45"><type pos:start="1:30" pos:end="1:37"><name pos:start="1:30" pos:end="1:37">uint64_t</name></type> <name pos:start="1:39" pos:end="1:45">address</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="59:1">{<block_content pos:start="7:5" pos:end="57:40">

    <comment type="block" pos:start="5:5" pos:end="5:72">/* store the subsystem information _after_ the bootmap was loaded */</comment>

    <expr_stmt pos:start="7:5" pos:end="7:37"><expr pos:start="7:5" pos:end="7:36"><call pos:start="7:5" pos:end="7:36"><name pos:start="7:5" pos:end="7:34">write_subsystem_identification</name><argument_list pos:start="7:35" pos:end="7:36">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="9:5" pos:end="17:7">/*

     * The IPL PSW is at address 0. We also must not overwrite the

     * content of non-BIOS memory after we loaded the guest, so we

     * save the original content and restore it in jump_to_IPL_2.

     */</comment>

    <decl_stmt pos:start="19:5" pos:end="19:27"><decl pos:start="19:5" pos:end="19:26"><type pos:start="19:5" pos:end="19:15"><name pos:start="19:5" pos:end="19:13">ResetInfo</name> <modifier pos:start="19:15" pos:end="19:15">*</modifier></type><name pos:start="19:16" pos:end="19:22">current</name> <init pos:start="19:24" pos:end="19:26">= <expr pos:start="19:26" pos:end="19:26"><literal type="number" pos:start="19:26" pos:end="19:26">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:20"><expr pos:start="23:5" pos:end="23:19"><name pos:start="23:5" pos:end="23:8">save</name> <operator pos:start="23:10" pos:end="23:10">=</operator> <operator pos:start="23:12" pos:end="23:12">*</operator><name pos:start="23:13" pos:end="23:19">current</name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:61"><expr pos:start="25:5" pos:end="25:60"><name pos:start="25:5" pos:end="25:21"><name pos:start="25:5" pos:end="25:11">current</name><operator pos:start="25:12" pos:end="25:13">-&gt;</operator><name pos:start="25:14" pos:end="25:21">ipl_addr</name></name> <operator pos:start="25:23" pos:end="25:23">=</operator> <operator pos:start="25:25" pos:end="25:25">(</operator><name pos:start="25:26" pos:end="25:33">uint32_t</name><operator pos:start="25:34" pos:end="25:34">)</operator> <operator pos:start="25:36" pos:end="25:36">(</operator><name pos:start="25:37" pos:end="25:44">uint64_t</name><operator pos:start="25:45" pos:end="25:45">)</operator> <operator pos:start="25:47" pos:end="25:47">&amp;</operator><name pos:start="25:48" pos:end="25:60">jump_to_IPL_2</name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:49"><expr pos:start="27:5" pos:end="27:48"><name pos:start="27:5" pos:end="27:25"><name pos:start="27:5" pos:end="27:11">current</name><operator pos:start="27:12" pos:end="27:13">-&gt;</operator><name pos:start="27:14" pos:end="27:25">ipl_continue</name></name> <operator pos:start="27:27" pos:end="27:27">=</operator> <name pos:start="27:29" pos:end="27:35">address</name> <operator pos:start="27:37" pos:end="27:37">&amp;</operator> <literal type="number" pos:start="27:39" pos:end="27:48">0x7fffffff</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:62"><expr pos:start="31:5" pos:end="31:61"><call pos:start="31:5" pos:end="31:61"><name pos:start="31:5" pos:end="31:19">debug_print_int</name><argument_list pos:start="31:20" pos:end="31:61">(<argument pos:start="31:21" pos:end="31:37"><expr pos:start="31:21" pos:end="31:37"><literal type="string" pos:start="31:21" pos:end="31:37">"set IPL addr to"</literal></expr></argument>, <argument pos:start="31:40" pos:end="31:60"><expr pos:start="31:40" pos:end="31:60"><name pos:start="31:40" pos:end="31:60"><name pos:start="31:40" pos:end="31:46">current</name><operator pos:start="31:47" pos:end="31:48">-&gt;</operator><name pos:start="31:49" pos:end="31:60">ipl_continue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:46">/* Ensure the guest output starts fresh */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:21"><expr pos:start="37:5" pos:end="37:20"><call pos:start="37:5" pos:end="37:20"><name pos:start="37:5" pos:end="37:14">sclp_print</name><argument_list pos:start="37:15" pos:end="37:20">(<argument pos:start="37:16" pos:end="37:19"><expr pos:start="37:16" pos:end="37:19"><literal type="string" pos:start="37:16" pos:end="37:19">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="41:5" pos:end="49:7">/*

     * HACK ALERT.

     * We use the load normal reset to keep r15 unchanged. jump_to_IPL_2

     * can then use r15 as its stack pointer.

     */</comment>

    <asm pos:start="51:5" pos:end="55:38">asm <specifier pos:start="51:9" pos:end="51:16">volatile</specifier>("lghi 1,1\n\t"

                 "diag 1,1,0x308\n\t"

                 : : : "1", "memory");</asm>

    <expr_stmt pos:start="57:5" pos:end="57:40"><expr pos:start="57:5" pos:end="57:39"><call pos:start="57:5" pos:end="57:39"><name pos:start="57:5" pos:end="57:16">virtio_panic</name><argument_list pos:start="57:17" pos:end="57:39">(<argument pos:start="57:18" pos:end="57:38"><expr pos:start="57:18" pos:end="57:38"><literal type="string" pos:start="57:18" pos:end="57:38">"\n! IPL returns !\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
