<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3387.c" pos:tabs="8"><function pos:start="1:1" pos:end="95:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:15">hmp_change</name><parameter_list pos:start="1:16" pos:end="1:49">(<parameter pos:start="1:17" pos:end="1:28"><decl pos:start="1:17" pos:end="1:28"><type pos:start="1:17" pos:end="1:28"><name pos:start="1:17" pos:end="1:23">Monitor</name> <modifier pos:start="1:25" pos:end="1:25">*</modifier></type><name pos:start="1:26" pos:end="1:28">mon</name></decl></parameter>, <parameter pos:start="1:31" pos:end="1:48"><decl pos:start="1:31" pos:end="1:48"><type pos:start="1:31" pos:end="1:48"><specifier pos:start="1:31" pos:end="1:35">const</specifier> <name pos:start="1:37" pos:end="1:41">QDict</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:48">qdict</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="95:1">{<block_content pos:start="5:5" pos:end="93:32">

    <decl_stmt pos:start="5:5" pos:end="5:56"><decl pos:start="5:5" pos:end="5:55"><type pos:start="5:5" pos:end="5:16"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:14">char</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:22">device</name> <init pos:start="5:24" pos:end="5:55">= <expr pos:start="5:26" pos:end="5:55"><call pos:start="5:26" pos:end="5:55"><name pos:start="5:26" pos:end="5:38">qdict_get_str</name><argument_list pos:start="5:39" pos:end="5:55">(<argument pos:start="5:40" pos:end="5:44"><expr pos:start="5:40" pos:end="5:44"><name pos:start="5:40" pos:end="5:44">qdict</name></expr></argument>, <argument pos:start="5:47" pos:end="5:54"><expr pos:start="5:47" pos:end="5:54"><literal type="string" pos:start="5:47" pos:end="5:54">"device"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:56"><decl pos:start="7:5" pos:end="7:55"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:22">target</name> <init pos:start="7:24" pos:end="7:55">= <expr pos:start="7:26" pos:end="7:55"><call pos:start="7:26" pos:end="7:55"><name pos:start="7:26" pos:end="7:38">qdict_get_str</name><argument_list pos:start="7:39" pos:end="7:55">(<argument pos:start="7:40" pos:end="7:44"><expr pos:start="7:40" pos:end="7:44"><name pos:start="7:40" pos:end="7:44">qdict</name></expr></argument>, <argument pos:start="7:47" pos:end="7:54"><expr pos:start="7:47" pos:end="7:54"><literal type="string" pos:start="7:47" pos:end="7:54">"target"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:54"><decl pos:start="9:5" pos:end="9:53"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:19">arg</name> <init pos:start="9:21" pos:end="9:53">= <expr pos:start="9:23" pos:end="9:53"><call pos:start="9:23" pos:end="9:53"><name pos:start="9:23" pos:end="9:39">qdict_get_try_str</name><argument_list pos:start="9:40" pos:end="9:53">(<argument pos:start="9:41" pos:end="9:45"><expr pos:start="9:41" pos:end="9:45"><name pos:start="9:41" pos:end="9:45">qdict</name></expr></argument>, <argument pos:start="9:48" pos:end="9:52"><expr pos:start="9:48" pos:end="9:52"><literal type="string" pos:start="9:48" pos:end="9:52">"arg"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:71"><decl pos:start="11:5" pos:end="11:70"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:25">read_only</name> <init pos:start="11:27" pos:end="11:70">= <expr pos:start="11:29" pos:end="11:70"><call pos:start="11:29" pos:end="11:70"><name pos:start="11:29" pos:end="11:45">qdict_get_try_str</name><argument_list pos:start="11:46" pos:end="11:70">(<argument pos:start="11:47" pos:end="11:51"><expr pos:start="11:47" pos:end="11:51"><name pos:start="11:47" pos:end="11:51">qdict</name></expr></argument>, <argument pos:start="11:54" pos:end="11:69"><expr pos:start="11:54" pos:end="11:69"><literal type="string" pos:start="11:54" pos:end="11:69">"read-only-mode"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:50"><decl pos:start="13:5" pos:end="13:49"><type pos:start="13:5" pos:end="13:30"><name pos:start="13:5" pos:end="13:30">BlockdevChangeReadOnlyMode</name></type> <name pos:start="13:32" pos:end="13:45">read_only_mode</name> <init pos:start="13:47" pos:end="13:49">= <expr pos:start="13:49" pos:end="13:49"><literal type="number" pos:start="13:49" pos:end="13:49">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:9">Error</name> <modifier pos:start="15:11" pos:end="15:11">*</modifier></type><name pos:start="15:12" pos:end="15:14">err</name> <init pos:start="15:16" pos:end="15:21">= <expr pos:start="15:18" pos:end="15:21"><name pos:start="15:18" pos:end="15:21">NULL</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="89:5"><if pos:start="19:5" pos:end="47:5">if <condition pos:start="19:8" pos:end="19:35">(<expr pos:start="19:9" pos:end="19:34"><call pos:start="19:9" pos:end="19:29"><name pos:start="19:9" pos:end="19:14">strcmp</name><argument_list pos:start="19:15" pos:end="19:29">(<argument pos:start="19:16" pos:end="19:21"><expr pos:start="19:16" pos:end="19:21"><name pos:start="19:16" pos:end="19:21">device</name></expr></argument>, <argument pos:start="19:24" pos:end="19:28"><expr pos:start="19:24" pos:end="19:28"><literal type="string" pos:start="19:24" pos:end="19:28">"vnc"</literal></expr></argument>)</argument_list></call> <operator pos:start="19:31" pos:end="19:32">==</operator> <literal type="number" pos:start="19:34" pos:end="19:34">0</literal></expr>)</condition> <block pos:start="19:37" pos:end="47:5">{<block_content pos:start="21:9" pos:end="45:52">

        <if_stmt pos:start="21:9" pos:end="29:9"><if pos:start="21:9" pos:end="29:9">if <condition pos:start="21:12" pos:end="21:22">(<expr pos:start="21:13" pos:end="21:21"><name pos:start="21:13" pos:end="21:21">read_only</name></expr>)</condition> <block pos:start="21:24" pos:end="29:9">{<block_content pos:start="23:13" pos:end="27:19">

            <expr_stmt pos:start="23:13" pos:end="25:78"><expr pos:start="23:13" pos:end="25:77"><call pos:start="23:13" pos:end="25:77"><name pos:start="23:13" pos:end="23:26">monitor_printf</name><argument_list pos:start="23:27" pos:end="25:77">(<argument pos:start="23:28" pos:end="23:30"><expr pos:start="23:28" pos:end="23:30"><name pos:start="23:28" pos:end="23:30">mon</name></expr></argument>,

                           <argument pos:start="25:28" pos:end="25:76"><expr pos:start="25:28" pos:end="25:76"><literal type="string" pos:start="25:28" pos:end="25:76">"Parameter 'read-only-mode' is invalid for VNC\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="27:13" pos:end="27:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="31:9" pos:end="43:9"><if pos:start="31:9" pos:end="43:9">if <condition pos:start="31:12" pos:end="33:44">(<expr pos:start="31:13" pos:end="33:43"><call pos:start="31:13" pos:end="31:36"><name pos:start="31:13" pos:end="31:18">strcmp</name><argument_list pos:start="31:19" pos:end="31:36">(<argument pos:start="31:20" pos:end="31:25"><expr pos:start="31:20" pos:end="31:25"><name pos:start="31:20" pos:end="31:25">target</name></expr></argument>, <argument pos:start="31:28" pos:end="31:35"><expr pos:start="31:28" pos:end="31:35"><literal type="string" pos:start="31:28" pos:end="31:35">"passwd"</literal></expr></argument>)</argument_list></call> <operator pos:start="31:38" pos:end="31:39">==</operator> <literal type="number" pos:start="31:41" pos:end="31:41">0</literal> <operator pos:start="31:43" pos:end="31:44">||</operator>

            <call pos:start="33:13" pos:end="33:38"><name pos:start="33:13" pos:end="33:18">strcmp</name><argument_list pos:start="33:19" pos:end="33:38">(<argument pos:start="33:20" pos:end="33:25"><expr pos:start="33:20" pos:end="33:25"><name pos:start="33:20" pos:end="33:25">target</name></expr></argument>, <argument pos:start="33:28" pos:end="33:37"><expr pos:start="33:28" pos:end="33:37"><literal type="string" pos:start="33:28" pos:end="33:37">"password"</literal></expr></argument>)</argument_list></call> <operator pos:start="33:40" pos:end="33:41">==</operator> <literal type="number" pos:start="33:43" pos:end="33:43">0</literal></expr>)</condition> <block pos:start="33:46" pos:end="43:9">{<block_content pos:start="35:13" pos:end="41:13">

            <if_stmt pos:start="35:13" pos:end="41:13"><if pos:start="35:13" pos:end="41:13">if <condition pos:start="35:16" pos:end="35:21">(<expr pos:start="35:17" pos:end="35:20"><operator pos:start="35:17" pos:end="35:17">!</operator><name pos:start="35:18" pos:end="35:20">arg</name></expr>)</condition> <block pos:start="35:23" pos:end="41:13">{<block_content pos:start="37:17" pos:end="39:23">

                <expr_stmt pos:start="37:17" pos:end="37:70"><expr pos:start="37:17" pos:end="37:69"><call pos:start="37:17" pos:end="37:69"><name pos:start="37:17" pos:end="37:37">monitor_read_password</name><argument_list pos:start="37:38" pos:end="37:69">(<argument pos:start="37:39" pos:end="37:41"><expr pos:start="37:39" pos:end="37:41"><name pos:start="37:39" pos:end="37:41">mon</name></expr></argument>, <argument pos:start="37:44" pos:end="37:62"><expr pos:start="37:44" pos:end="37:62"><name pos:start="37:44" pos:end="37:62">hmp_change_read_arg</name></expr></argument>, <argument pos:start="37:65" pos:end="37:68"><expr pos:start="37:65" pos:end="37:68"><name pos:start="37:65" pos:end="37:68">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="39:17" pos:end="39:23">return;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:52"><expr pos:start="45:9" pos:end="45:51"><call pos:start="45:9" pos:end="45:51"><name pos:start="45:9" pos:end="45:18">qmp_change</name><argument_list pos:start="45:19" pos:end="45:51">(<argument pos:start="45:20" pos:end="45:24"><expr pos:start="45:20" pos:end="45:24"><literal type="string" pos:start="45:20" pos:end="45:24">"vnc"</literal></expr></argument>, <argument pos:start="45:27" pos:end="45:32"><expr pos:start="45:27" pos:end="45:32"><name pos:start="45:27" pos:end="45:32">target</name></expr></argument>, <argument pos:start="45:35" pos:end="45:39"><expr pos:start="45:35" pos:end="45:39"><operator pos:start="45:35" pos:end="45:35">!</operator><operator pos:start="45:36" pos:end="45:36">!</operator><name pos:start="45:37" pos:end="45:39">arg</name></expr></argument>, <argument pos:start="45:42" pos:end="45:44"><expr pos:start="45:42" pos:end="45:44"><name pos:start="45:42" pos:end="45:44">arg</name></expr></argument>, <argument pos:start="45:47" pos:end="45:50"><expr pos:start="45:47" pos:end="45:50"><operator pos:start="45:47" pos:end="45:47">&amp;</operator><name pos:start="45:48" pos:end="45:50">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="47:7" pos:end="89:5">else <block pos:start="47:12" pos:end="89:5">{<block_content pos:start="49:9" pos:end="87:9">

        <if_stmt pos:start="49:9" pos:end="67:9"><if pos:start="49:9" pos:end="67:9">if <condition pos:start="49:12" pos:end="49:22">(<expr pos:start="49:13" pos:end="49:21"><name pos:start="49:13" pos:end="49:21">read_only</name></expr>)</condition> <block pos:start="49:24" pos:end="67:9">{<block_content pos:start="51:13" pos:end="65:13">

            <expr_stmt pos:start="51:13" pos:end="57:77"><expr pos:start="51:13" pos:end="57:76"><name pos:start="51:13" pos:end="51:26">read_only_mode</name> <operator pos:start="51:28" pos:end="51:28">=</operator>

                <call pos:start="53:17" pos:end="57:76"><name pos:start="53:17" pos:end="53:31">qapi_enum_parse</name><argument_list pos:start="53:32" pos:end="57:76">(<argument pos:start="53:33" pos:end="53:65"><expr pos:start="53:33" pos:end="53:65"><name pos:start="53:33" pos:end="53:65">BlockdevChangeReadOnlyMode_lookup</name></expr></argument>,

                                <argument pos:start="55:33" pos:end="55:41"><expr pos:start="55:33" pos:end="55:41"><name pos:start="55:33" pos:end="55:41">read_only</name></expr></argument>, <argument pos:start="55:44" pos:end="55:78"><expr pos:start="55:44" pos:end="55:78"><name pos:start="55:44" pos:end="55:78">BLOCKDEV_CHANGE_READ_ONLY_MODE__MAX</name></expr></argument>,

                                <argument pos:start="57:33" pos:end="57:69"><expr pos:start="57:33" pos:end="57:69"><name pos:start="57:33" pos:end="57:69">BLOCKDEV_CHANGE_READ_ONLY_MODE_RETAIN</name></expr></argument>, <argument pos:start="57:72" pos:end="57:75"><expr pos:start="57:72" pos:end="57:75"><operator pos:start="57:72" pos:end="57:72">&amp;</operator><name pos:start="57:73" pos:end="57:75">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="59:13" pos:end="65:13"><if pos:start="59:13" pos:end="65:13">if <condition pos:start="59:16" pos:end="59:20">(<expr pos:start="59:17" pos:end="59:19"><name pos:start="59:17" pos:end="59:19">err</name></expr>)</condition> <block pos:start="59:22" pos:end="65:13">{<block_content pos:start="61:17" pos:end="63:23">

                <expr_stmt pos:start="61:17" pos:end="61:44"><expr pos:start="61:17" pos:end="61:43"><call pos:start="61:17" pos:end="61:43"><name pos:start="61:17" pos:end="61:32">hmp_handle_error</name><argument_list pos:start="61:33" pos:end="61:43">(<argument pos:start="61:34" pos:end="61:36"><expr pos:start="61:34" pos:end="61:36"><name pos:start="61:34" pos:end="61:36">mon</name></expr></argument>, <argument pos:start="61:39" pos:end="61:42"><expr pos:start="61:39" pos:end="61:42"><operator pos:start="61:39" pos:end="61:39">&amp;</operator><name pos:start="61:40" pos:end="61:42">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="63:17" pos:end="63:23">return;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="71:9" pos:end="75:41"><expr pos:start="71:9" pos:end="75:40"><call pos:start="71:9" pos:end="75:40"><name pos:start="71:9" pos:end="71:34">qmp_blockdev_change_medium</name><argument_list pos:start="71:35" pos:end="75:40">(<argument pos:start="71:36" pos:end="71:39"><expr pos:start="71:36" pos:end="71:39"><name pos:start="71:36" pos:end="71:39">true</name></expr></argument>, <argument pos:start="71:42" pos:end="71:47"><expr pos:start="71:42" pos:end="71:47"><name pos:start="71:42" pos:end="71:47">device</name></expr></argument>, <argument pos:start="71:50" pos:end="71:54"><expr pos:start="71:50" pos:end="71:54"><name pos:start="71:50" pos:end="71:54">false</name></expr></argument>, <argument pos:start="71:57" pos:end="71:60"><expr pos:start="71:57" pos:end="71:60"><name pos:start="71:57" pos:end="71:60">NULL</name></expr></argument>, <argument pos:start="71:63" pos:end="71:68"><expr pos:start="71:63" pos:end="71:68"><name pos:start="71:63" pos:end="71:68">target</name></expr></argument>,

                                   <argument pos:start="73:36" pos:end="73:40"><expr pos:start="73:36" pos:end="73:40"><operator pos:start="73:36" pos:end="73:36">!</operator><operator pos:start="73:37" pos:end="73:37">!</operator><name pos:start="73:38" pos:end="73:40">arg</name></expr></argument>, <argument pos:start="73:43" pos:end="73:45"><expr pos:start="73:43" pos:end="73:45"><name pos:start="73:43" pos:end="73:45">arg</name></expr></argument>, <argument pos:start="73:48" pos:end="73:58"><expr pos:start="73:48" pos:end="73:58"><operator pos:start="73:48" pos:end="73:48">!</operator><operator pos:start="73:49" pos:end="73:49">!</operator><name pos:start="73:50" pos:end="73:58">read_only</name></expr></argument>, <argument pos:start="73:61" pos:end="73:74"><expr pos:start="73:61" pos:end="73:74"><name pos:start="73:61" pos:end="73:74">read_only_mode</name></expr></argument>,

                                   <argument pos:start="75:36" pos:end="75:39"><expr pos:start="75:36" pos:end="75:39"><operator pos:start="75:36" pos:end="75:36">&amp;</operator><name pos:start="75:37" pos:end="75:39">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="77:9" pos:end="87:9"><if pos:start="77:9" pos:end="87:9">if <condition pos:start="77:12" pos:end="79:65">(<expr pos:start="77:13" pos:end="79:64"><name pos:start="77:13" pos:end="77:15">err</name> <operator pos:start="77:17" pos:end="77:18">&amp;&amp;</operator>

            <call pos:start="79:13" pos:end="79:32"><name pos:start="79:13" pos:end="79:27">error_get_class</name><argument_list pos:start="79:28" pos:end="79:32">(<argument pos:start="79:29" pos:end="79:31"><expr pos:start="79:29" pos:end="79:31"><name pos:start="79:29" pos:end="79:31">err</name></expr></argument>)</argument_list></call> <operator pos:start="79:34" pos:end="79:35">==</operator> <name pos:start="79:37" pos:end="79:64">ERROR_CLASS_DEVICE_ENCRYPTED</name></expr>)</condition> <block pos:start="79:67" pos:end="87:9">{<block_content pos:start="81:13" pos:end="85:19">

            <expr_stmt pos:start="81:13" pos:end="81:28"><expr pos:start="81:13" pos:end="81:27"><call pos:start="81:13" pos:end="81:27"><name pos:start="81:13" pos:end="81:22">error_free</name><argument_list pos:start="81:23" pos:end="81:27">(<argument pos:start="81:24" pos:end="81:26"><expr pos:start="81:24" pos:end="81:26"><name pos:start="81:24" pos:end="81:26">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:67"><expr pos:start="83:13" pos:end="83:66"><call pos:start="83:13" pos:end="83:66"><name pos:start="83:13" pos:end="83:41">monitor_read_block_device_key</name><argument_list pos:start="83:42" pos:end="83:66">(<argument pos:start="83:43" pos:end="83:45"><expr pos:start="83:43" pos:end="83:45"><name pos:start="83:43" pos:end="83:45">mon</name></expr></argument>, <argument pos:start="83:48" pos:end="83:53"><expr pos:start="83:48" pos:end="83:53"><name pos:start="83:48" pos:end="83:53">device</name></expr></argument>, <argument pos:start="83:56" pos:end="83:59"><expr pos:start="83:56" pos:end="83:59"><name pos:start="83:56" pos:end="83:59">NULL</name></expr></argument>, <argument pos:start="83:62" pos:end="83:65"><expr pos:start="83:62" pos:end="83:65"><name pos:start="83:62" pos:end="83:65">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="85:13" pos:end="85:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="93:5" pos:end="93:32"><expr pos:start="93:5" pos:end="93:31"><call pos:start="93:5" pos:end="93:31"><name pos:start="93:5" pos:end="93:20">hmp_handle_error</name><argument_list pos:start="93:21" pos:end="93:31">(<argument pos:start="93:22" pos:end="93:24"><expr pos:start="93:22" pos:end="93:24"><name pos:start="93:22" pos:end="93:24">mon</name></expr></argument>, <argument pos:start="93:27" pos:end="93:30"><expr pos:start="93:27" pos:end="93:30"><operator pos:start="93:27" pos:end="93:27">&amp;</operator><name pos:start="93:28" pos:end="93:30">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
