<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/7915.c" pos:tabs="8"><function pos:start="1:1" pos:end="261:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">sunrast_decode_frame</name><parameter_list pos:start="1:32" pos:end="3:64">(<parameter pos:start="1:33" pos:end="1:53"><decl pos:start="1:33" pos:end="1:53"><type pos:start="1:33" pos:end="1:53"><name pos:start="1:33" pos:end="1:46">AVCodecContext</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:53">avctx</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:65"><decl pos:start="1:56" pos:end="1:65"><type pos:start="1:56" pos:end="1:65"><name pos:start="1:56" pos:end="1:59">void</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:65">data</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:46"><decl pos:start="3:33" pos:end="3:46"><type pos:start="3:33" pos:end="3:46"><name pos:start="3:33" pos:end="3:35">int</name> <modifier pos:start="3:37" pos:end="3:37">*</modifier></type><name pos:start="3:38" pos:end="3:46">data_size</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:63"><decl pos:start="3:49" pos:end="3:63"><type pos:start="3:49" pos:end="3:63"><name pos:start="3:49" pos:end="3:56">AVPacket</name> <modifier pos:start="3:58" pos:end="3:58">*</modifier></type><name pos:start="3:59" pos:end="3:63">avpkt</name></decl></parameter>)</parameter_list> <block pos:start="3:66" pos:end="261:1">{<block_content pos:start="5:5" pos:end="259:26">

    <decl_stmt pos:start="5:5" pos:end="5:37"><decl pos:start="5:5" pos:end="5:36"><type pos:start="5:5" pos:end="5:19"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:17">uint8_t</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:22">buf</name> <init pos:start="5:24" pos:end="5:36">= <expr pos:start="5:26" pos:end="5:36"><name pos:start="5:26" pos:end="5:36"><name pos:start="5:26" pos:end="5:30">avpkt</name><operator pos:start="5:31" pos:end="5:32">-&gt;</operator><name pos:start="5:33" pos:end="5:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:48"><decl pos:start="7:5" pos:end="7:47"><type pos:start="7:5" pos:end="7:26"><name pos:start="7:5" pos:end="7:18">SUNRASTContext</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier> <specifier pos:start="7:22" pos:end="7:26">const</specifier></type> <name pos:start="7:28" pos:end="7:28">s</name> <init pos:start="7:30" pos:end="7:47">= <expr pos:start="7:32" pos:end="7:47"><name pos:start="7:32" pos:end="7:47"><name pos:start="7:32" pos:end="7:36">avctx</name><operator pos:start="7:37" pos:end="7:38">-&gt;</operator><name pos:start="7:39" pos:end="7:47">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">AVFrame</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:20">picture</name> <init pos:start="9:22" pos:end="9:27">= <expr pos:start="9:24" pos:end="9:27"><name pos:start="9:24" pos:end="9:27">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:36"><decl pos:start="11:5" pos:end="11:35"><type pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:11">AVFrame</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier> <specifier pos:start="11:15" pos:end="11:19">const</specifier></type> <name pos:start="11:21" pos:end="11:21">p</name> <init pos:start="11:23" pos:end="11:35">= <expr pos:start="11:25" pos:end="11:35"><operator pos:start="11:25" pos:end="11:25">&amp;</operator><name pos:start="11:26" pos:end="11:35"><name pos:start="11:26" pos:end="11:26">s</name><operator pos:start="11:27" pos:end="11:28">-&gt;</operator><name pos:start="11:29" pos:end="11:35">picture</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:80"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:12">unsigned</name> <name pos:start="13:14" pos:end="13:16">int</name></type> <name pos:start="13:18" pos:end="13:18">w</name></decl>, <decl pos:start="13:21" pos:end="13:21"><type ref="prev" pos:start="13:5" pos:end="13:16"/><name pos:start="13:21" pos:end="13:21">h</name></decl>, <decl pos:start="13:24" pos:end="13:28"><type ref="prev" pos:start="13:5" pos:end="13:16"/><name pos:start="13:24" pos:end="13:28">depth</name></decl>, <decl pos:start="13:31" pos:end="13:34"><type ref="prev" pos:start="13:5" pos:end="13:16"/><name pos:start="13:31" pos:end="13:34">type</name></decl>, <decl pos:start="13:37" pos:end="13:43"><type ref="prev" pos:start="13:5" pos:end="13:16"/><name pos:start="13:37" pos:end="13:43">maptype</name></decl>, <decl pos:start="13:46" pos:end="13:54"><type ref="prev" pos:start="13:5" pos:end="13:16"/><name pos:start="13:46" pos:end="13:54">maplength</name></decl>, <decl pos:start="13:57" pos:end="13:62"><type ref="prev" pos:start="13:5" pos:end="13:16"/><name pos:start="13:57" pos:end="13:62">stride</name></decl>, <decl pos:start="13:65" pos:end="13:65"><type ref="prev" pos:start="13:5" pos:end="13:16"/><name pos:start="13:65" pos:end="13:65">x</name></decl>, <decl pos:start="13:68" pos:end="13:68"><type ref="prev" pos:start="13:5" pos:end="13:16"/><name pos:start="13:68" pos:end="13:68">y</name></decl>, <decl pos:start="13:71" pos:end="13:73"><type ref="prev" pos:start="13:5" pos:end="13:16"/><name pos:start="13:71" pos:end="13:73">len</name></decl>, <decl pos:start="13:76" pos:end="13:79"><type ref="prev" pos:start="13:5" pos:end="13:16"/><name pos:start="13:76" pos:end="13:79">alen</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:17"><decl pos:start="15:5" pos:end="15:16"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:11">uint8_t</name> <modifier pos:start="15:13" pos:end="15:13">*</modifier></type><name pos:start="15:14" pos:end="15:16">ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:34"><decl pos:start="17:5" pos:end="17:33"><type pos:start="17:5" pos:end="17:19"><specifier pos:start="17:5" pos:end="17:9">const</specifier> <name pos:start="17:11" pos:end="17:17">uint8_t</name> <modifier pos:start="17:19" pos:end="17:19">*</modifier></type><name pos:start="17:20" pos:end="17:27">bufstart</name> <init pos:start="17:29" pos:end="17:33">= <expr pos:start="17:31" pos:end="17:33"><name pos:start="17:31" pos:end="17:33">buf</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="27:5"><if pos:start="21:5" pos:end="27:5">if <condition pos:start="21:8" pos:end="21:35">(<expr pos:start="21:9" pos:end="21:34"><call pos:start="21:9" pos:end="21:20"><name pos:start="21:9" pos:end="21:15">AV_RB32</name><argument_list pos:start="21:16" pos:end="21:20">(<argument pos:start="21:17" pos:end="21:19"><expr pos:start="21:17" pos:end="21:19"><name pos:start="21:17" pos:end="21:19">buf</name></expr></argument>)</argument_list></call> <operator pos:start="21:22" pos:end="21:23">!=</operator> <literal type="number" pos:start="21:25" pos:end="21:34">0x59a66a95</literal></expr>)</condition> <block pos:start="21:37" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:18">

        <expr_stmt pos:start="23:9" pos:end="23:73"><expr pos:start="23:9" pos:end="23:72"><call pos:start="23:9" pos:end="23:72"><name pos:start="23:9" pos:end="23:14">av_log</name><argument_list pos:start="23:15" pos:end="23:72">(<argument pos:start="23:16" pos:end="23:20"><expr pos:start="23:16" pos:end="23:20"><name pos:start="23:16" pos:end="23:20">avctx</name></expr></argument>, <argument pos:start="23:23" pos:end="23:34"><expr pos:start="23:23" pos:end="23:34"><name pos:start="23:23" pos:end="23:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="23:37" pos:end="23:71"><expr pos:start="23:37" pos:end="23:71"><literal type="string" pos:start="23:37" pos:end="23:71">"this is not sunras encoded data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="25:9" pos:end="25:18">return <expr pos:start="25:16" pos:end="25:17"><operator pos:start="25:16" pos:end="25:16">-</operator><literal type="number" pos:start="25:17" pos:end="25:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:31"><expr pos:start="31:5" pos:end="31:30"><name pos:start="31:5" pos:end="31:5">w</name>         <operator pos:start="31:15" pos:end="31:15">=</operator> <call pos:start="31:17" pos:end="31:30"><name pos:start="31:17" pos:end="31:23">AV_RB32</name><argument_list pos:start="31:24" pos:end="31:30">(<argument pos:start="31:25" pos:end="31:29"><expr pos:start="31:25" pos:end="31:29"><name pos:start="31:25" pos:end="31:27">buf</name><operator pos:start="31:28" pos:end="31:28">+</operator><literal type="number" pos:start="31:29" pos:end="31:29">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:31"><expr pos:start="33:5" pos:end="33:30"><name pos:start="33:5" pos:end="33:5">h</name>         <operator pos:start="33:15" pos:end="33:15">=</operator> <call pos:start="33:17" pos:end="33:30"><name pos:start="33:17" pos:end="33:23">AV_RB32</name><argument_list pos:start="33:24" pos:end="33:30">(<argument pos:start="33:25" pos:end="33:29"><expr pos:start="33:25" pos:end="33:29"><name pos:start="33:25" pos:end="33:27">buf</name><operator pos:start="33:28" pos:end="33:28">+</operator><literal type="number" pos:start="33:29" pos:end="33:29">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:32"><expr pos:start="35:5" pos:end="35:31"><name pos:start="35:5" pos:end="35:9">depth</name>     <operator pos:start="35:15" pos:end="35:15">=</operator> <call pos:start="35:17" pos:end="35:31"><name pos:start="35:17" pos:end="35:23">AV_RB32</name><argument_list pos:start="35:24" pos:end="35:31">(<argument pos:start="35:25" pos:end="35:30"><expr pos:start="35:25" pos:end="35:30"><name pos:start="35:25" pos:end="35:27">buf</name><operator pos:start="35:28" pos:end="35:28">+</operator><literal type="number" pos:start="35:29" pos:end="35:30">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:32"><expr pos:start="37:5" pos:end="37:31"><name pos:start="37:5" pos:end="37:8">type</name>      <operator pos:start="37:15" pos:end="37:15">=</operator> <call pos:start="37:17" pos:end="37:31"><name pos:start="37:17" pos:end="37:23">AV_RB32</name><argument_list pos:start="37:24" pos:end="37:31">(<argument pos:start="37:25" pos:end="37:30"><expr pos:start="37:25" pos:end="37:30"><name pos:start="37:25" pos:end="37:27">buf</name><operator pos:start="37:28" pos:end="37:28">+</operator><literal type="number" pos:start="37:29" pos:end="37:30">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:32"><expr pos:start="39:5" pos:end="39:31"><name pos:start="39:5" pos:end="39:11">maptype</name>   <operator pos:start="39:15" pos:end="39:15">=</operator> <call pos:start="39:17" pos:end="39:31"><name pos:start="39:17" pos:end="39:23">AV_RB32</name><argument_list pos:start="39:24" pos:end="39:31">(<argument pos:start="39:25" pos:end="39:30"><expr pos:start="39:25" pos:end="39:30"><name pos:start="39:25" pos:end="39:27">buf</name><operator pos:start="39:28" pos:end="39:28">+</operator><literal type="number" pos:start="39:29" pos:end="39:30">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:32"><expr pos:start="41:5" pos:end="41:31"><name pos:start="41:5" pos:end="41:13">maplength</name> <operator pos:start="41:15" pos:end="41:15">=</operator> <call pos:start="41:17" pos:end="41:31"><name pos:start="41:17" pos:end="41:23">AV_RB32</name><argument_list pos:start="41:24" pos:end="41:31">(<argument pos:start="41:25" pos:end="41:30"><expr pos:start="41:25" pos:end="41:30"><name pos:start="41:25" pos:end="41:27">buf</name><operator pos:start="41:28" pos:end="41:28">+</operator><literal type="number" pos:start="41:29" pos:end="41:30">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="45:5" pos:end="51:5"><if pos:start="45:5" pos:end="51:5">if <condition pos:start="45:8" pos:end="45:56">(<expr pos:start="45:9" pos:end="45:55"><name pos:start="45:9" pos:end="45:12">type</name> <operator pos:start="45:14" pos:end="45:15">==</operator> <name pos:start="45:17" pos:end="45:30">RT_FORMAT_TIFF</name> <operator pos:start="45:32" pos:end="45:33">||</operator> <name pos:start="45:35" pos:end="45:38">type</name> <operator pos:start="45:40" pos:end="45:41">==</operator> <name pos:start="45:43" pos:end="45:55">RT_FORMAT_IFF</name></expr>)</condition> <block pos:start="45:58" pos:end="51:5">{<block_content pos:start="47:9" pos:end="49:18">

        <expr_stmt pos:start="47:9" pos:end="47:72"><expr pos:start="47:9" pos:end="47:71"><call pos:start="47:9" pos:end="47:71"><name pos:start="47:9" pos:end="47:14">av_log</name><argument_list pos:start="47:15" pos:end="47:71">(<argument pos:start="47:16" pos:end="47:20"><expr pos:start="47:16" pos:end="47:20"><name pos:start="47:16" pos:end="47:20">avctx</name></expr></argument>, <argument pos:start="47:23" pos:end="47:34"><expr pos:start="47:23" pos:end="47:34"><name pos:start="47:23" pos:end="47:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="47:37" pos:end="47:70"><expr pos:start="47:37" pos:end="47:70"><literal type="string" pos:start="47:37" pos:end="47:70">"unsupported (compression) type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="49:9" pos:end="49:18">return <expr pos:start="49:16" pos:end="49:17"><operator pos:start="49:16" pos:end="49:16">-</operator><literal type="number" pos:start="49:17" pos:end="49:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="53:5" pos:end="59:5"><if pos:start="53:5" pos:end="59:5">if <condition pos:start="53:8" pos:end="53:29">(<expr pos:start="53:9" pos:end="53:28"><name pos:start="53:9" pos:end="53:12">type</name> <operator pos:start="53:14" pos:end="53:14">&gt;</operator> <name pos:start="53:16" pos:end="53:28">RT_FORMAT_IFF</name></expr>)</condition> <block pos:start="53:31" pos:end="59:5">{<block_content pos:start="55:9" pos:end="57:18">

        <expr_stmt pos:start="55:9" pos:end="55:68"><expr pos:start="55:9" pos:end="55:67"><call pos:start="55:9" pos:end="55:67"><name pos:start="55:9" pos:end="55:14">av_log</name><argument_list pos:start="55:15" pos:end="55:67">(<argument pos:start="55:16" pos:end="55:20"><expr pos:start="55:16" pos:end="55:20"><name pos:start="55:16" pos:end="55:20">avctx</name></expr></argument>, <argument pos:start="55:23" pos:end="55:34"><expr pos:start="55:23" pos:end="55:34"><name pos:start="55:23" pos:end="55:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="55:37" pos:end="55:66"><expr pos:start="55:37" pos:end="55:66"><literal type="string" pos:start="55:37" pos:end="55:66">"invalid (compression) type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="57:9" pos:end="57:18">return <expr pos:start="57:16" pos:end="57:17"><operator pos:start="57:16" pos:end="57:16">-</operator><literal type="number" pos:start="57:17" pos:end="57:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="61:5" pos:end="67:5"><if pos:start="61:5" pos:end="67:5">if <condition pos:start="61:8" pos:end="61:21">(<expr pos:start="61:9" pos:end="61:20"><name pos:start="61:9" pos:end="61:15">maptype</name> <operator pos:start="61:17" pos:end="61:17">&amp;</operator> <operator pos:start="61:19" pos:end="61:19">~</operator><literal type="number" pos:start="61:20" pos:end="61:20">1</literal></expr>)</condition> <block pos:start="61:23" pos:end="67:5">{<block_content pos:start="63:9" pos:end="65:18">

        <expr_stmt pos:start="63:9" pos:end="63:63"><expr pos:start="63:9" pos:end="63:62"><call pos:start="63:9" pos:end="63:62"><name pos:start="63:9" pos:end="63:14">av_log</name><argument_list pos:start="63:15" pos:end="63:62">(<argument pos:start="63:16" pos:end="63:20"><expr pos:start="63:16" pos:end="63:20"><name pos:start="63:16" pos:end="63:20">avctx</name></expr></argument>, <argument pos:start="63:23" pos:end="63:34"><expr pos:start="63:23" pos:end="63:34"><name pos:start="63:23" pos:end="63:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="63:37" pos:end="63:61"><expr pos:start="63:37" pos:end="63:61"><literal type="string" pos:start="63:37" pos:end="63:61">"invalid colormap type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="65:9" pos:end="65:18">return <expr pos:start="65:16" pos:end="65:17"><operator pos:start="65:16" pos:end="65:16">-</operator><literal type="number" pos:start="65:17" pos:end="65:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:14"><expr pos:start="71:5" pos:end="71:13"><name pos:start="71:5" pos:end="71:7">buf</name> <operator pos:start="71:9" pos:end="71:10">+=</operator> <literal type="number" pos:start="71:12" pos:end="71:13">32</literal></expr>;</expr_stmt>



    <switch pos:start="75:5" pos:end="101:5">switch <condition pos:start="75:12" pos:end="75:18">(<expr pos:start="75:13" pos:end="75:17"><name pos:start="75:13" pos:end="75:17">depth</name></expr>)</condition> <block pos:start="75:20" pos:end="101:5">{<block_content pos:start="77:9" pos:end="99:22">

        <case pos:start="77:9" pos:end="77:15">case <expr pos:start="77:14" pos:end="77:14"><literal type="number" pos:start="77:14" pos:end="77:14">1</literal></expr>:</case>

            <expr_stmt pos:start="79:13" pos:end="79:47"><expr pos:start="79:13" pos:end="79:46"><name pos:start="79:13" pos:end="79:26"><name pos:start="79:13" pos:end="79:17">avctx</name><operator pos:start="79:18" pos:end="79:19">-&gt;</operator><name pos:start="79:20" pos:end="79:26">pix_fmt</name></name> <operator pos:start="79:28" pos:end="79:28">=</operator> <name pos:start="79:30" pos:end="79:46">PIX_FMT_MONOWHITE</name></expr>;</expr_stmt>

            <break pos:start="81:13" pos:end="81:18">break;</break>

        <case pos:start="83:9" pos:end="83:15">case <expr pos:start="83:14" pos:end="83:14"><literal type="number" pos:start="83:14" pos:end="83:14">8</literal></expr>:</case>

            <expr_stmt pos:start="85:13" pos:end="85:42"><expr pos:start="85:13" pos:end="85:41"><name pos:start="85:13" pos:end="85:26"><name pos:start="85:13" pos:end="85:17">avctx</name><operator pos:start="85:18" pos:end="85:19">-&gt;</operator><name pos:start="85:20" pos:end="85:26">pix_fmt</name></name> <operator pos:start="85:28" pos:end="85:28">=</operator> <name pos:start="85:30" pos:end="85:41">PIX_FMT_PAL8</name></expr>;</expr_stmt>

            <break pos:start="87:13" pos:end="87:18">break;</break>

        <case pos:start="89:9" pos:end="89:16">case <expr pos:start="89:14" pos:end="89:15"><literal type="number" pos:start="89:14" pos:end="89:15">24</literal></expr>:</case>

            <expr_stmt pos:start="91:13" pos:end="91:85"><expr pos:start="91:13" pos:end="91:84"><name pos:start="91:13" pos:end="91:26"><name pos:start="91:13" pos:end="91:17">avctx</name><operator pos:start="91:18" pos:end="91:19">-&gt;</operator><name pos:start="91:20" pos:end="91:26">pix_fmt</name></name> <operator pos:start="91:28" pos:end="91:28">=</operator> <ternary pos:start="91:30" pos:end="91:84"><condition pos:start="91:30" pos:end="91:54"><expr pos:start="91:30" pos:end="91:52"><operator pos:start="91:30" pos:end="91:30">(</operator><name pos:start="91:31" pos:end="91:34">type</name> <operator pos:start="91:36" pos:end="91:37">==</operator> <name pos:start="91:39" pos:end="91:51">RT_FORMAT_RGB</name><operator pos:start="91:52" pos:end="91:52">)</operator></expr> ?</condition><then pos:start="91:56" pos:end="91:68"> <expr pos:start="91:56" pos:end="91:68"><name pos:start="91:56" pos:end="91:68">PIX_FMT_RGB24</name></expr> </then><else pos:start="91:70" pos:end="91:84">: <expr pos:start="91:72" pos:end="91:84"><name pos:start="91:72" pos:end="91:84">PIX_FMT_BGR24</name></expr></else></ternary></expr>;</expr_stmt>

            <break pos:start="93:13" pos:end="93:18">break;</break>

        <default pos:start="95:9" pos:end="95:16">default:</default>

            <expr_stmt pos:start="97:13" pos:end="97:59"><expr pos:start="97:13" pos:end="97:58"><call pos:start="97:13" pos:end="97:58"><name pos:start="97:13" pos:end="97:18">av_log</name><argument_list pos:start="97:19" pos:end="97:58">(<argument pos:start="97:20" pos:end="97:24"><expr pos:start="97:20" pos:end="97:24"><name pos:start="97:20" pos:end="97:24">avctx</name></expr></argument>, <argument pos:start="97:27" pos:end="97:38"><expr pos:start="97:27" pos:end="97:38"><name pos:start="97:27" pos:end="97:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="97:41" pos:end="97:57"><expr pos:start="97:41" pos:end="97:57"><literal type="string" pos:start="97:41" pos:end="97:57">"invalid depth\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="99:13" pos:end="99:22">return <expr pos:start="99:20" pos:end="99:21"><operator pos:start="99:20" pos:end="99:20">-</operator><literal type="number" pos:start="99:21" pos:end="99:21">1</literal></expr>;</return>

    </block_content>}</block></switch>



    <if_stmt pos:start="105:5" pos:end="107:40"><if pos:start="105:5" pos:end="107:40">if <condition pos:start="105:8" pos:end="105:19">(<expr pos:start="105:9" pos:end="105:18"><name pos:start="105:9" pos:end="105:18"><name pos:start="105:9" pos:end="105:9">p</name><operator pos:start="105:10" pos:end="105:11">-&gt;</operator><name pos:start="105:12" pos:end="105:15">data</name><index pos:start="105:16" pos:end="105:18">[<expr pos:start="105:17" pos:end="105:17"><literal type="number" pos:start="105:17" pos:end="105:17">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="107:9" pos:end="107:40"><block_content pos:start="107:9" pos:end="107:40">

        <expr_stmt pos:start="107:9" pos:end="107:40"><expr pos:start="107:9" pos:end="107:39"><call pos:start="107:9" pos:end="107:39"><name pos:start="107:9" pos:end="107:29"><name pos:start="107:9" pos:end="107:13">avctx</name><operator pos:start="107:14" pos:end="107:15">-&gt;</operator><name pos:start="107:16" pos:end="107:29">release_buffer</name></name><argument_list pos:start="107:30" pos:end="107:39">(<argument pos:start="107:31" pos:end="107:35"><expr pos:start="107:31" pos:end="107:35"><name pos:start="107:31" pos:end="107:35">avctx</name></expr></argument>, <argument pos:start="107:38" pos:end="107:38"><expr pos:start="107:38" pos:end="107:38"><name pos:start="107:38" pos:end="107:38">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="111:5" pos:end="113:18"><if pos:start="111:5" pos:end="113:18">if <condition pos:start="111:8" pos:end="111:44">(<expr pos:start="111:9" pos:end="111:43"><call pos:start="111:9" pos:end="111:43"><name pos:start="111:9" pos:end="111:27">av_image_check_size</name><argument_list pos:start="111:28" pos:end="111:43">(<argument pos:start="111:29" pos:end="111:29"><expr pos:start="111:29" pos:end="111:29"><name pos:start="111:29" pos:end="111:29">w</name></expr></argument>, <argument pos:start="111:32" pos:end="111:32"><expr pos:start="111:32" pos:end="111:32"><name pos:start="111:32" pos:end="111:32">h</name></expr></argument>, <argument pos:start="111:35" pos:end="111:35"><expr pos:start="111:35" pos:end="111:35"><literal type="number" pos:start="111:35" pos:end="111:35">0</literal></expr></argument>, <argument pos:start="111:38" pos:end="111:42"><expr pos:start="111:38" pos:end="111:42"><name pos:start="111:38" pos:end="111:42">avctx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="113:9" pos:end="113:18"><block_content pos:start="113:9" pos:end="113:18">

        <return pos:start="113:9" pos:end="113:18">return <expr pos:start="113:16" pos:end="113:17"><operator pos:start="113:16" pos:end="113:16">-</operator><literal type="number" pos:start="113:17" pos:end="113:17">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="115:5" pos:end="117:44"><if pos:start="115:5" pos:end="117:44">if <condition pos:start="115:8" pos:end="115:48">(<expr pos:start="115:9" pos:end="115:47"><name pos:start="115:9" pos:end="115:9">w</name> <operator pos:start="115:11" pos:end="115:12">!=</operator> <name pos:start="115:14" pos:end="115:25"><name pos:start="115:14" pos:end="115:18">avctx</name><operator pos:start="115:19" pos:end="115:20">-&gt;</operator><name pos:start="115:21" pos:end="115:25">width</name></name> <operator pos:start="115:27" pos:end="115:28">||</operator> <name pos:start="115:30" pos:end="115:30">h</name> <operator pos:start="115:32" pos:end="115:33">!=</operator> <name pos:start="115:35" pos:end="115:47"><name pos:start="115:35" pos:end="115:39">avctx</name><operator pos:start="115:40" pos:end="115:41">-&gt;</operator><name pos:start="115:42" pos:end="115:47">height</name></name></expr>)</condition><block type="pseudo" pos:start="117:9" pos:end="117:44"><block_content pos:start="117:9" pos:end="117:44">

        <expr_stmt pos:start="117:9" pos:end="117:44"><expr pos:start="117:9" pos:end="117:43"><call pos:start="117:9" pos:end="117:43"><name pos:start="117:9" pos:end="117:30">avcodec_set_dimensions</name><argument_list pos:start="117:31" pos:end="117:43">(<argument pos:start="117:32" pos:end="117:36"><expr pos:start="117:32" pos:end="117:36"><name pos:start="117:32" pos:end="117:36">avctx</name></expr></argument>, <argument pos:start="117:39" pos:end="117:39"><expr pos:start="117:39" pos:end="117:39"><name pos:start="117:39" pos:end="117:39">w</name></expr></argument>, <argument pos:start="117:42" pos:end="117:42"><expr pos:start="117:42" pos:end="117:42"><name pos:start="117:42" pos:end="117:42">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="119:5" pos:end="125:5"><if pos:start="119:5" pos:end="125:5">if <condition pos:start="119:8" pos:end="119:40">(<expr pos:start="119:9" pos:end="119:39"><call pos:start="119:9" pos:end="119:35"><name pos:start="119:9" pos:end="119:25"><name pos:start="119:9" pos:end="119:13">avctx</name><operator pos:start="119:14" pos:end="119:15">-&gt;</operator><name pos:start="119:16" pos:end="119:25">get_buffer</name></name><argument_list pos:start="119:26" pos:end="119:35">(<argument pos:start="119:27" pos:end="119:31"><expr pos:start="119:27" pos:end="119:31"><name pos:start="119:27" pos:end="119:31">avctx</name></expr></argument>, <argument pos:start="119:34" pos:end="119:34"><expr pos:start="119:34" pos:end="119:34"><name pos:start="119:34" pos:end="119:34">p</name></expr></argument>)</argument_list></call> <operator pos:start="119:37" pos:end="119:37">&lt;</operator> <literal type="number" pos:start="119:39" pos:end="119:39">0</literal></expr>)</condition> <block pos:start="119:42" pos:end="125:5">{<block_content pos:start="121:9" pos:end="123:18">

        <expr_stmt pos:start="121:9" pos:end="121:61"><expr pos:start="121:9" pos:end="121:60"><call pos:start="121:9" pos:end="121:60"><name pos:start="121:9" pos:end="121:14">av_log</name><argument_list pos:start="121:15" pos:end="121:60">(<argument pos:start="121:16" pos:end="121:20"><expr pos:start="121:16" pos:end="121:20"><name pos:start="121:16" pos:end="121:20">avctx</name></expr></argument>, <argument pos:start="121:23" pos:end="121:34"><expr pos:start="121:23" pos:end="121:34"><name pos:start="121:23" pos:end="121:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="121:37" pos:end="121:59"><expr pos:start="121:37" pos:end="121:59"><literal type="string" pos:start="121:37" pos:end="121:59">"get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="123:9" pos:end="123:18">return <expr pos:start="123:16" pos:end="123:17"><operator pos:start="123:16" pos:end="123:16">-</operator><literal type="number" pos:start="123:17" pos:end="123:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="129:5" pos:end="129:37"><expr pos:start="129:5" pos:end="129:36"><name pos:start="129:5" pos:end="129:16"><name pos:start="129:5" pos:end="129:5">p</name><operator pos:start="129:6" pos:end="129:7">-&gt;</operator><name pos:start="129:8" pos:end="129:16">pict_type</name></name> <operator pos:start="129:18" pos:end="129:18">=</operator> <name pos:start="129:20" pos:end="129:36">AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>



    <if_stmt pos:start="133:5" pos:end="169:5"><if pos:start="133:5" pos:end="139:5">if <condition pos:start="133:8" pos:end="133:32">(<expr pos:start="133:9" pos:end="133:31"><name pos:start="133:9" pos:end="133:13">depth</name> <operator pos:start="133:15" pos:end="133:16">!=</operator> <literal type="number" pos:start="133:18" pos:end="133:18">8</literal> <operator pos:start="133:20" pos:end="133:21">&amp;&amp;</operator> <name pos:start="133:23" pos:end="133:31">maplength</name></expr>)</condition> <block pos:start="133:34" pos:end="139:5">{<block_content pos:start="135:9" pos:end="135:106">

        <expr_stmt pos:start="135:9" pos:end="135:106"><expr pos:start="135:9" pos:end="135:105"><call pos:start="135:9" pos:end="135:105"><name pos:start="135:9" pos:end="135:14">av_log</name><argument_list pos:start="135:15" pos:end="135:105">(<argument pos:start="135:16" pos:end="135:20"><expr pos:start="135:16" pos:end="135:20"><name pos:start="135:16" pos:end="135:20">avctx</name></expr></argument>, <argument pos:start="135:23" pos:end="135:36"><expr pos:start="135:23" pos:end="135:36"><name pos:start="135:23" pos:end="135:36">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="135:39" pos:end="135:104"><expr pos:start="135:39" pos:end="135:104"><literal type="string" pos:start="135:39" pos:end="135:104">"useless colormap found or file is corrupted, trying to recover\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    </block_content>}</block></if> <if type="elseif" pos:start="139:7" pos:end="169:5">else if <condition pos:start="139:15" pos:end="139:26">(<expr pos:start="139:16" pos:end="139:25"><name pos:start="139:16" pos:end="139:20">depth</name> <operator pos:start="139:22" pos:end="139:23">==</operator> <literal type="number" pos:start="139:25" pos:end="139:25">8</literal></expr>)</condition> <block pos:start="139:28" pos:end="169:5">{<block_content pos:start="141:9" pos:end="167:79">

        <decl_stmt pos:start="141:9" pos:end="141:41"><decl pos:start="141:9" pos:end="141:40"><type pos:start="141:9" pos:end="141:20"><name pos:start="141:9" pos:end="141:16">unsigned</name> <name pos:start="141:18" pos:end="141:20">int</name></type> <name pos:start="141:22" pos:end="141:24">len</name> <init pos:start="141:26" pos:end="141:40">= <expr pos:start="141:28" pos:end="141:40"><name pos:start="141:28" pos:end="141:36">maplength</name> <operator pos:start="141:38" pos:end="141:38">/</operator> <literal type="number" pos:start="141:40" pos:end="141:40">3</literal></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="145:9" pos:end="151:9"><if pos:start="145:9" pos:end="151:9">if <condition pos:start="145:12" pos:end="145:23">(<expr pos:start="145:13" pos:end="145:22"><operator pos:start="145:13" pos:end="145:13">!</operator><name pos:start="145:14" pos:end="145:22">maplength</name></expr>)</condition> <block pos:start="145:25" pos:end="151:9">{<block_content pos:start="147:13" pos:end="149:22">

            <expr_stmt pos:start="147:13" pos:end="147:63"><expr pos:start="147:13" pos:end="147:62"><call pos:start="147:13" pos:end="147:62"><name pos:start="147:13" pos:end="147:18">av_log</name><argument_list pos:start="147:19" pos:end="147:62">(<argument pos:start="147:20" pos:end="147:24"><expr pos:start="147:20" pos:end="147:24"><name pos:start="147:20" pos:end="147:24">avctx</name></expr></argument>, <argument pos:start="147:27" pos:end="147:38"><expr pos:start="147:27" pos:end="147:38"><name pos:start="147:27" pos:end="147:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="147:41" pos:end="147:61"><expr pos:start="147:41" pos:end="147:61"><literal type="string" pos:start="147:41" pos:end="147:61">"colormap expected\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="149:13" pos:end="149:22">return <expr pos:start="149:20" pos:end="149:21"><operator pos:start="149:20" pos:end="149:20">-</operator><literal type="number" pos:start="149:21" pos:end="149:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="153:9" pos:end="159:9"><if pos:start="153:9" pos:end="159:9">if <condition pos:start="153:12" pos:end="153:45">(<expr pos:start="153:13" pos:end="153:44"><name pos:start="153:13" pos:end="153:21">maplength</name> <operator pos:start="153:23" pos:end="153:23">%</operator> <literal type="number" pos:start="153:25" pos:end="153:25">3</literal> <operator pos:start="153:27" pos:end="153:28">||</operator> <name pos:start="153:30" pos:end="153:38">maplength</name> <operator pos:start="153:40" pos:end="153:40">&gt;</operator> <literal type="number" pos:start="153:42" pos:end="153:44">768</literal></expr>)</condition> <block pos:start="153:47" pos:end="159:9">{<block_content pos:start="155:13" pos:end="157:22">

            <expr_stmt pos:start="155:13" pos:end="155:71"><expr pos:start="155:13" pos:end="155:70"><call pos:start="155:13" pos:end="155:70"><name pos:start="155:13" pos:end="155:18">av_log</name><argument_list pos:start="155:19" pos:end="155:70">(<argument pos:start="155:20" pos:end="155:24"><expr pos:start="155:20" pos:end="155:24"><name pos:start="155:20" pos:end="155:24">avctx</name></expr></argument>, <argument pos:start="155:27" pos:end="155:40"><expr pos:start="155:27" pos:end="155:40"><name pos:start="155:27" pos:end="155:40">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="155:43" pos:end="155:69"><expr pos:start="155:43" pos:end="155:69"><literal type="string" pos:start="155:43" pos:end="155:69">"invalid colormap length\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="157:13" pos:end="157:22">return <expr pos:start="157:20" pos:end="157:21"><operator pos:start="157:20" pos:end="157:20">-</operator><literal type="number" pos:start="157:21" pos:end="157:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="163:9" pos:end="163:25"><expr pos:start="163:9" pos:end="163:24"><name pos:start="163:9" pos:end="163:11">ptr</name> <operator pos:start="163:13" pos:end="163:13">=</operator> <name pos:start="163:15" pos:end="163:24"><name pos:start="163:15" pos:end="163:15">p</name><operator pos:start="163:16" pos:end="163:17">-&gt;</operator><name pos:start="163:18" pos:end="163:21">data</name><index pos:start="163:22" pos:end="163:24">[<expr pos:start="163:23" pos:end="163:23"><literal type="number" pos:start="163:23" pos:end="163:23">1</literal></expr>]</index></name></expr>;</expr_stmt>

        <for pos:start="165:9" pos:end="167:79">for <control pos:start="165:13" pos:end="165:37">(<init pos:start="165:14" pos:end="165:17"><expr pos:start="165:14" pos:end="165:16"><name pos:start="165:14" pos:end="165:14">x</name><operator pos:start="165:15" pos:end="165:15">=</operator><literal type="number" pos:start="165:16" pos:end="165:16">0</literal></expr>;</init> <condition pos:start="165:19" pos:end="165:24"><expr pos:start="165:19" pos:end="165:23"><name pos:start="165:19" pos:end="165:19">x</name><operator pos:start="165:20" pos:end="165:20">&lt;</operator><name pos:start="165:21" pos:end="165:23">len</name></expr>;</condition> <incr pos:start="165:26" pos:end="165:36"><expr pos:start="165:26" pos:end="165:28"><name pos:start="165:26" pos:end="165:26">x</name><operator pos:start="165:27" pos:end="165:28">++</operator></expr><operator pos:start="165:29" pos:end="165:29">,</operator> <expr pos:start="165:31" pos:end="165:36"><name pos:start="165:31" pos:end="165:33">ptr</name><operator pos:start="165:34" pos:end="165:35">+=</operator><literal type="number" pos:start="165:36" pos:end="165:36">4</literal></expr></incr>)</control><block type="pseudo" pos:start="167:13" pos:end="167:79"><block_content pos:start="167:13" pos:end="167:79">

            <expr_stmt pos:start="167:13" pos:end="167:79"><expr pos:start="167:13" pos:end="167:78"><operator pos:start="167:13" pos:end="167:13">*</operator><operator pos:start="167:14" pos:end="167:14">(</operator><name pos:start="167:15" pos:end="167:22">uint32_t</name> <operator pos:start="167:24" pos:end="167:24">*</operator><operator pos:start="167:25" pos:end="167:25">)</operator><name pos:start="167:26" pos:end="167:28">ptr</name> <operator pos:start="167:30" pos:end="167:30">=</operator> <operator pos:start="167:32" pos:end="167:32">(</operator><name pos:start="167:33" pos:end="167:38"><name pos:start="167:33" pos:end="167:35">buf</name><index pos:start="167:36" pos:end="167:38">[<expr pos:start="167:37" pos:end="167:37"><name pos:start="167:37" pos:end="167:37">x</name></expr>]</index></name><operator pos:start="167:39" pos:end="167:40">&lt;&lt;</operator><literal type="number" pos:start="167:41" pos:end="167:42">16</literal><operator pos:start="167:43" pos:end="167:43">)</operator> <operator pos:start="167:45" pos:end="167:45">+</operator> <operator pos:start="167:47" pos:end="167:47">(</operator><name pos:start="167:48" pos:end="167:57"><name pos:start="167:48" pos:end="167:50">buf</name><index pos:start="167:51" pos:end="167:57">[<expr pos:start="167:52" pos:end="167:56"><name pos:start="167:52" pos:end="167:54">len</name><operator pos:start="167:55" pos:end="167:55">+</operator><name pos:start="167:56" pos:end="167:56">x</name></expr>]</index></name><operator pos:start="167:58" pos:end="167:59">&lt;&lt;</operator><literal type="number" pos:start="167:60" pos:end="167:60">8</literal><operator pos:start="167:61" pos:end="167:61">)</operator> <operator pos:start="167:63" pos:end="167:63">+</operator> <name pos:start="167:65" pos:end="167:78"><name pos:start="167:65" pos:end="167:67">buf</name><index pos:start="167:68" pos:end="167:78">[<expr pos:start="167:69" pos:end="167:77"><name pos:start="167:69" pos:end="167:71">len</name><operator pos:start="167:72" pos:end="167:72">+</operator><name pos:start="167:73" pos:end="167:75">len</name><operator pos:start="167:76" pos:end="167:76">+</operator><name pos:start="167:77" pos:end="167:77">x</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="173:5" pos:end="173:21"><expr pos:start="173:5" pos:end="173:20"><name pos:start="173:5" pos:end="173:7">buf</name> <operator pos:start="173:9" pos:end="173:10">+=</operator> <name pos:start="173:12" pos:end="173:20">maplength</name></expr>;</expr_stmt>



    <expr_stmt pos:start="177:5" pos:end="177:24"><expr pos:start="177:5" pos:end="177:23"><name pos:start="177:5" pos:end="177:7">ptr</name>    <operator pos:start="177:12" pos:end="177:12">=</operator> <name pos:start="177:14" pos:end="177:23"><name pos:start="177:14" pos:end="177:14">p</name><operator pos:start="177:15" pos:end="177:16">-&gt;</operator><name pos:start="177:17" pos:end="177:20">data</name><index pos:start="177:21" pos:end="177:23">[<expr pos:start="177:22" pos:end="177:22"><literal type="number" pos:start="177:22" pos:end="177:22">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="179:5" pos:end="179:28"><expr pos:start="179:5" pos:end="179:27"><name pos:start="179:5" pos:end="179:10">stride</name> <operator pos:start="179:12" pos:end="179:12">=</operator> <name pos:start="179:14" pos:end="179:27"><name pos:start="179:14" pos:end="179:14">p</name><operator pos:start="179:15" pos:end="179:16">-&gt;</operator><name pos:start="179:17" pos:end="179:24">linesize</name><index pos:start="179:25" pos:end="179:27">[<expr pos:start="179:26" pos:end="179:26"><literal type="number" pos:start="179:26" pos:end="179:26">0</literal></expr>]</index></name></expr>;</expr_stmt>



    <comment type="block" pos:start="183:5" pos:end="183:52">/* scanlines are aligned on 16 bit boundaries */</comment>

    <expr_stmt pos:start="185:5" pos:end="185:32"><expr pos:start="185:5" pos:end="185:31"><name pos:start="185:5" pos:end="185:7">len</name>  <operator pos:start="185:10" pos:end="185:10">=</operator> <operator pos:start="185:12" pos:end="185:12">(</operator><name pos:start="185:13" pos:end="185:17">depth</name> <operator pos:start="185:19" pos:end="185:19">*</operator> <name pos:start="185:21" pos:end="185:21">w</name> <operator pos:start="185:23" pos:end="185:23">+</operator> <literal type="number" pos:start="185:25" pos:end="185:25">7</literal><operator pos:start="185:26" pos:end="185:26">)</operator> <operator pos:start="185:28" pos:end="185:29">&gt;&gt;</operator> <literal type="number" pos:start="185:31" pos:end="185:31">3</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="187:5" pos:end="187:25"><expr pos:start="187:5" pos:end="187:24"><name pos:start="187:5" pos:end="187:8">alen</name> <operator pos:start="187:10" pos:end="187:10">=</operator> <name pos:start="187:12" pos:end="187:14">len</name> <operator pos:start="187:16" pos:end="187:16">+</operator> <operator pos:start="187:18" pos:end="187:18">(</operator><name pos:start="187:19" pos:end="187:21">len</name><operator pos:start="187:22" pos:end="187:22">&amp;</operator><literal type="number" pos:start="187:23" pos:end="187:23">1</literal><operator pos:start="187:24" pos:end="187:24">)</operator></expr>;</expr_stmt>



    <if_stmt pos:start="191:5" pos:end="249:5"><if pos:start="191:5" pos:end="237:5">if <condition pos:start="191:8" pos:end="191:32">(<expr pos:start="191:9" pos:end="191:31"><name pos:start="191:9" pos:end="191:12">type</name> <operator pos:start="191:14" pos:end="191:15">==</operator> <name pos:start="191:17" pos:end="191:31">RT_BYTE_ENCODED</name></expr>)</condition> <block pos:start="191:34" pos:end="237:5">{<block_content pos:start="193:9" pos:end="235:9">

        <decl_stmt pos:start="193:9" pos:end="193:23"><decl pos:start="193:9" pos:end="193:17"><type pos:start="193:9" pos:end="193:11"><name pos:start="193:9" pos:end="193:11">int</name></type> <name pos:start="193:13" pos:end="193:17">value</name></decl>, <decl pos:start="193:20" pos:end="193:22"><type ref="prev" pos:start="193:9" pos:end="193:11"/><name pos:start="193:20" pos:end="193:22">run</name></decl>;</decl_stmt>

        <decl_stmt pos:start="195:9" pos:end="195:38"><decl pos:start="195:9" pos:end="195:37"><type pos:start="195:9" pos:end="195:17"><name pos:start="195:9" pos:end="195:15">uint8_t</name> <modifier pos:start="195:17" pos:end="195:17">*</modifier></type><name pos:start="195:18" pos:end="195:20">end</name> <init pos:start="195:22" pos:end="195:37">= <expr pos:start="195:24" pos:end="195:37"><name pos:start="195:24" pos:end="195:26">ptr</name> <operator pos:start="195:28" pos:end="195:28">+</operator> <name pos:start="195:30" pos:end="195:30">h</name><operator pos:start="195:31" pos:end="195:31">*</operator><name pos:start="195:32" pos:end="195:37">stride</name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="199:9" pos:end="199:14"><expr pos:start="199:9" pos:end="199:13"><name pos:start="199:9" pos:end="199:9">x</name> <operator pos:start="199:11" pos:end="199:11">=</operator> <literal type="number" pos:start="199:13" pos:end="199:13">0</literal></expr>;</expr_stmt>

        <while pos:start="201:9" pos:end="235:9">while <condition pos:start="201:15" pos:end="201:26">(<expr pos:start="201:16" pos:end="201:25"><name pos:start="201:16" pos:end="201:18">ptr</name> <operator pos:start="201:20" pos:end="201:21">!=</operator> <name pos:start="201:23" pos:end="201:25">end</name></expr>)</condition> <block pos:start="201:28" pos:end="235:9">{<block_content pos:start="203:13" pos:end="233:13">

            <expr_stmt pos:start="203:13" pos:end="203:20"><expr pos:start="203:13" pos:end="203:19"><name pos:start="203:13" pos:end="203:15">run</name> <operator pos:start="203:17" pos:end="203:17">=</operator> <literal type="number" pos:start="203:19" pos:end="203:19">1</literal></expr>;</expr_stmt>

            <if_stmt pos:start="205:13" pos:end="213:13"><if pos:start="205:13" pos:end="213:13">if <condition pos:start="205:16" pos:end="205:41">(<expr pos:start="205:17" pos:end="205:40"><operator pos:start="205:17" pos:end="205:17">(</operator><name pos:start="205:18" pos:end="205:22">value</name> <operator pos:start="205:24" pos:end="205:24">=</operator> <operator pos:start="205:26" pos:end="205:26">*</operator><name pos:start="205:27" pos:end="205:29">buf</name><operator pos:start="205:30" pos:end="205:31">++</operator><operator pos:start="205:32" pos:end="205:32">)</operator> <operator pos:start="205:34" pos:end="205:35">==</operator> <literal type="number" pos:start="205:37" pos:end="205:40">0x80</literal></expr>)</condition> <block pos:start="205:43" pos:end="213:13">{<block_content pos:start="207:17" pos:end="211:35">

                <expr_stmt pos:start="207:17" pos:end="207:33"><expr pos:start="207:17" pos:end="207:32"><name pos:start="207:17" pos:end="207:19">run</name> <operator pos:start="207:21" pos:end="207:21">=</operator> <operator pos:start="207:23" pos:end="207:23">*</operator><name pos:start="207:24" pos:end="207:26">buf</name><operator pos:start="207:27" pos:end="207:28">++</operator> <operator pos:start="207:30" pos:end="207:30">+</operator> <literal type="number" pos:start="207:32" pos:end="207:32">1</literal></expr>;</expr_stmt>

                <if_stmt pos:start="209:17" pos:end="211:35"><if pos:start="209:17" pos:end="211:35">if <condition pos:start="209:20" pos:end="209:29">(<expr pos:start="209:21" pos:end="209:28"><name pos:start="209:21" pos:end="209:23">run</name> <operator pos:start="209:25" pos:end="209:26">!=</operator> <literal type="number" pos:start="209:28" pos:end="209:28">1</literal></expr>)</condition><block type="pseudo" pos:start="211:21" pos:end="211:35"><block_content pos:start="211:21" pos:end="211:35">

                    <expr_stmt pos:start="211:21" pos:end="211:35"><expr pos:start="211:21" pos:end="211:34"><name pos:start="211:21" pos:end="211:25">value</name> <operator pos:start="211:27" pos:end="211:27">=</operator> <operator pos:start="211:29" pos:end="211:29">*</operator><name pos:start="211:30" pos:end="211:32">buf</name><operator pos:start="211:33" pos:end="211:34">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <while pos:start="215:13" pos:end="233:13">while <condition pos:start="215:19" pos:end="215:25">(<expr pos:start="215:20" pos:end="215:24"><name pos:start="215:20" pos:end="215:22">run</name><operator pos:start="215:23" pos:end="215:24">--</operator></expr>)</condition> <block pos:start="215:27" pos:end="233:13">{<block_content pos:start="217:17" pos:end="231:17">

                <if_stmt pos:start="217:17" pos:end="219:35"><if pos:start="217:17" pos:end="219:35">if <condition pos:start="217:20" pos:end="217:28">(<expr pos:start="217:21" pos:end="217:27"><name pos:start="217:21" pos:end="217:21">x</name> <operator pos:start="217:23" pos:end="217:23">&lt;</operator> <name pos:start="217:25" pos:end="217:27">len</name></expr>)</condition><block type="pseudo" pos:start="219:21" pos:end="219:35"><block_content pos:start="219:21" pos:end="219:35">

                    <expr_stmt pos:start="219:21" pos:end="219:35"><expr pos:start="219:21" pos:end="219:34"><name pos:start="219:21" pos:end="219:26"><name pos:start="219:21" pos:end="219:23">ptr</name><index pos:start="219:24" pos:end="219:26">[<expr pos:start="219:25" pos:end="219:25"><name pos:start="219:25" pos:end="219:25">x</name></expr>]</index></name> <operator pos:start="219:28" pos:end="219:28">=</operator> <name pos:start="219:30" pos:end="219:34">value</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="221:17" pos:end="231:17"><if pos:start="221:17" pos:end="231:17">if <condition pos:start="221:20" pos:end="221:32">(<expr pos:start="221:21" pos:end="221:31"><operator pos:start="221:21" pos:end="221:22">++</operator><name pos:start="221:23" pos:end="221:23">x</name> <operator pos:start="221:25" pos:end="221:26">&gt;=</operator> <name pos:start="221:28" pos:end="221:31">alen</name></expr>)</condition> <block pos:start="221:34" pos:end="231:17">{<block_content pos:start="223:21" pos:end="229:30">

                    <expr_stmt pos:start="223:21" pos:end="223:26"><expr pos:start="223:21" pos:end="223:25"><name pos:start="223:21" pos:end="223:21">x</name> <operator pos:start="223:23" pos:end="223:23">=</operator> <literal type="number" pos:start="223:25" pos:end="223:25">0</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="225:21" pos:end="225:34"><expr pos:start="225:21" pos:end="225:33"><name pos:start="225:21" pos:end="225:23">ptr</name> <operator pos:start="225:25" pos:end="225:26">+=</operator> <name pos:start="225:28" pos:end="225:33">stride</name></expr>;</expr_stmt>

                    <if_stmt pos:start="227:21" pos:end="229:30"><if pos:start="227:21" pos:end="229:30">if <condition pos:start="227:24" pos:end="227:35">(<expr pos:start="227:25" pos:end="227:34"><name pos:start="227:25" pos:end="227:27">ptr</name> <operator pos:start="227:29" pos:end="227:30">==</operator> <name pos:start="227:32" pos:end="227:34">end</name></expr>)</condition><block type="pseudo" pos:start="229:25" pos:end="229:30"><block_content pos:start="229:25" pos:end="229:30">

                        <break pos:start="229:25" pos:end="229:30">break;</break></block_content></block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></while>

        </block_content>}</block></while>

    </block_content>}</block></if> <else pos:start="237:7" pos:end="249:5">else <block pos:start="237:12" pos:end="249:5">{<block_content pos:start="239:9" pos:end="247:9">

        <for pos:start="239:9" pos:end="247:9">for <control pos:start="239:13" pos:end="239:27">(<init pos:start="239:14" pos:end="239:17"><expr pos:start="239:14" pos:end="239:16"><name pos:start="239:14" pos:end="239:14">y</name><operator pos:start="239:15" pos:end="239:15">=</operator><literal type="number" pos:start="239:16" pos:end="239:16">0</literal></expr>;</init> <condition pos:start="239:19" pos:end="239:22"><expr pos:start="239:19" pos:end="239:21"><name pos:start="239:19" pos:end="239:19">y</name><operator pos:start="239:20" pos:end="239:20">&lt;</operator><name pos:start="239:21" pos:end="239:21">h</name></expr>;</condition> <incr pos:start="239:24" pos:end="239:26"><expr pos:start="239:24" pos:end="239:26"><name pos:start="239:24" pos:end="239:24">y</name><operator pos:start="239:25" pos:end="239:26">++</operator></expr></incr>)</control> <block pos:start="239:29" pos:end="247:9">{<block_content pos:start="241:13" pos:end="245:24">

            <expr_stmt pos:start="241:13" pos:end="241:34"><expr pos:start="241:13" pos:end="241:33"><call pos:start="241:13" pos:end="241:33"><name pos:start="241:13" pos:end="241:18">memcpy</name><argument_list pos:start="241:19" pos:end="241:33">(<argument pos:start="241:20" pos:end="241:22"><expr pos:start="241:20" pos:end="241:22"><name pos:start="241:20" pos:end="241:22">ptr</name></expr></argument>, <argument pos:start="241:25" pos:end="241:27"><expr pos:start="241:25" pos:end="241:27"><name pos:start="241:25" pos:end="241:27">buf</name></expr></argument>, <argument pos:start="241:30" pos:end="241:32"><expr pos:start="241:30" pos:end="241:32"><name pos:start="241:30" pos:end="241:32">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="243:13" pos:end="243:26"><expr pos:start="243:13" pos:end="243:25"><name pos:start="243:13" pos:end="243:15">ptr</name> <operator pos:start="243:17" pos:end="243:18">+=</operator> <name pos:start="243:20" pos:end="243:25">stride</name></expr>;</expr_stmt>

            <expr_stmt pos:start="245:13" pos:end="245:24"><expr pos:start="245:13" pos:end="245:23"><name pos:start="245:13" pos:end="245:15">buf</name> <operator pos:start="245:17" pos:end="245:18">+=</operator> <name pos:start="245:20" pos:end="245:23">alen</name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="253:5" pos:end="253:26"><expr pos:start="253:5" pos:end="253:25"><operator pos:start="253:5" pos:end="253:5">*</operator><name pos:start="253:6" pos:end="253:12">picture</name> <operator pos:start="253:14" pos:end="253:14">=</operator> <name pos:start="253:16" pos:end="253:25"><name pos:start="253:16" pos:end="253:16">s</name><operator pos:start="253:17" pos:end="253:18">-&gt;</operator><name pos:start="253:19" pos:end="253:25">picture</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="255:5" pos:end="255:33"><expr pos:start="255:5" pos:end="255:32"><operator pos:start="255:5" pos:end="255:5">*</operator><name pos:start="255:6" pos:end="255:14">data_size</name> <operator pos:start="255:16" pos:end="255:16">=</operator> <sizeof pos:start="255:18" pos:end="255:32">sizeof<argument_list pos:start="255:24" pos:end="255:32">(<argument pos:start="255:25" pos:end="255:31"><expr pos:start="255:25" pos:end="255:31"><name pos:start="255:25" pos:end="255:31">AVFrame</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>



    <return pos:start="259:5" pos:end="259:26">return <expr pos:start="259:12" pos:end="259:25"><name pos:start="259:12" pos:end="259:14">buf</name> <operator pos:start="259:16" pos:end="259:16">-</operator> <name pos:start="259:18" pos:end="259:25">bufstart</name></expr>;</return>

</block_content>}</block></function>
</unit>
