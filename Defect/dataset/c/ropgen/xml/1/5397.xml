<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5397.c" pos:tabs="8"><function pos:start="1:1" pos:end="106:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:30">vhost_scsi_realize</name><parameter_list pos:start="1:31" pos:end="1:62">(<parameter pos:start="1:32" pos:end="1:47"><decl pos:start="1:32" pos:end="1:47"><type pos:start="1:32" pos:end="1:47"><name pos:start="1:32" pos:end="1:42">DeviceState</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:47">dev</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:61"><decl pos:start="1:50" pos:end="1:61"><type pos:start="1:50" pos:end="1:61"><name pos:start="1:50" pos:end="1:54">Error</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier><modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:61">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="106:1">{<block_content pos:start="5:5" pos:end="104:46">

    <decl_stmt pos:start="5:5" pos:end="5:51"><decl pos:start="5:5" pos:end="5:50"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:20">VirtIOSCSICommon</name> <modifier pos:start="5:22" pos:end="5:22">*</modifier></type><name pos:start="5:23" pos:end="5:24">vs</name> <init pos:start="5:26" pos:end="5:50">= <expr pos:start="5:28" pos:end="5:50"><call pos:start="5:28" pos:end="5:50"><name pos:start="5:28" pos:end="5:45">VIRTIO_SCSI_COMMON</name><argument_list pos:start="5:46" pos:end="5:50">(<argument pos:start="5:47" pos:end="5:49"><expr pos:start="5:47" pos:end="5:49"><name pos:start="5:47" pos:end="5:49">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:35"><decl pos:start="7:5" pos:end="7:34"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">VHostSCSI</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:16">s</name> <init pos:start="7:18" pos:end="7:34">= <expr pos:start="7:20" pos:end="7:34"><call pos:start="7:20" pos:end="7:34"><name pos:start="7:20" pos:end="7:29">VHOST_SCSI</name><argument_list pos:start="7:30" pos:end="7:34">(<argument pos:start="7:31" pos:end="7:33"><expr pos:start="7:31" pos:end="7:33"><name pos:start="7:31" pos:end="7:33">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:9">Error</name> <modifier pos:start="9:11" pos:end="9:11">*</modifier></type><name pos:start="9:12" pos:end="9:14">err</name> <init pos:start="9:16" pos:end="9:21">= <expr pos:start="9:18" pos:end="9:21"><name pos:start="9:18" pos:end="9:21">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:15">vhostfd</name> <init pos:start="11:17" pos:end="11:20">= <expr pos:start="11:19" pos:end="11:20"><operator pos:start="11:19" pos:end="11:19">-</operator><literal type="number" pos:start="11:20" pos:end="11:20">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:12"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="23:5"><if pos:start="17:5" pos:end="23:5">if <condition pos:start="17:8" pos:end="17:23">(<expr pos:start="17:9" pos:end="17:22"><operator pos:start="17:9" pos:end="17:9">!</operator><name pos:start="17:10" pos:end="17:22"><name pos:start="17:10" pos:end="17:11">vs</name><operator pos:start="17:12" pos:end="17:13">-&gt;</operator><name pos:start="17:14" pos:end="17:17">conf</name><operator pos:start="17:18" pos:end="17:18">.</operator><name pos:start="17:19" pos:end="17:22">wwpn</name></name></expr>)</condition> <block pos:start="17:25" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:15">

        <expr_stmt pos:start="19:9" pos:end="19:53"><expr pos:start="19:9" pos:end="19:52"><call pos:start="19:9" pos:end="19:52"><name pos:start="19:9" pos:end="19:18">error_setg</name><argument_list pos:start="19:19" pos:end="19:52">(<argument pos:start="19:20" pos:end="19:23"><expr pos:start="19:20" pos:end="19:23"><name pos:start="19:20" pos:end="19:23">errp</name></expr></argument>, <argument pos:start="19:26" pos:end="19:51"><expr pos:start="19:26" pos:end="19:51"><literal type="string" pos:start="19:26" pos:end="19:51">"vhost-scsi: missing wwpn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="27:5" pos:end="53:5"><if pos:start="27:5" pos:end="39:5">if <condition pos:start="27:8" pos:end="27:25">(<expr pos:start="27:9" pos:end="27:24"><name pos:start="27:9" pos:end="27:24"><name pos:start="27:9" pos:end="27:10">vs</name><operator pos:start="27:11" pos:end="27:12">-&gt;</operator><name pos:start="27:13" pos:end="27:16">conf</name><operator pos:start="27:17" pos:end="27:17">.</operator><name pos:start="27:18" pos:end="27:24">vhostfd</name></name></expr>)</condition> <block pos:start="27:27" pos:end="39:5">{<block_content pos:start="29:9" pos:end="37:9">

        <expr_stmt pos:start="29:9" pos:end="29:69"><expr pos:start="29:9" pos:end="29:68"><name pos:start="29:9" pos:end="29:15">vhostfd</name> <operator pos:start="29:17" pos:end="29:17">=</operator> <call pos:start="29:19" pos:end="29:68"><name pos:start="29:19" pos:end="29:41">monitor_handle_fd_param</name><argument_list pos:start="29:42" pos:end="29:68">(<argument pos:start="29:43" pos:end="29:49"><expr pos:start="29:43" pos:end="29:49"><name pos:start="29:43" pos:end="29:49">cur_mon</name></expr></argument>, <argument pos:start="29:52" pos:end="29:67"><expr pos:start="29:52" pos:end="29:67"><name pos:start="29:52" pos:end="29:67"><name pos:start="29:52" pos:end="29:53">vs</name><operator pos:start="29:54" pos:end="29:55">-&gt;</operator><name pos:start="29:56" pos:end="29:59">conf</name><operator pos:start="29:60" pos:end="29:60">.</operator><name pos:start="29:61" pos:end="29:67">vhostfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="31:9" pos:end="37:9"><if pos:start="31:9" pos:end="37:9">if <condition pos:start="31:12" pos:end="31:26">(<expr pos:start="31:13" pos:end="31:25"><name pos:start="31:13" pos:end="31:19">vhostfd</name> <operator pos:start="31:21" pos:end="31:22">==</operator> <operator pos:start="31:24" pos:end="31:24">-</operator><literal type="number" pos:start="31:25" pos:end="31:25">1</literal></expr>)</condition> <block pos:start="31:28" pos:end="37:9">{<block_content pos:start="33:13" pos:end="35:19">

            <expr_stmt pos:start="33:13" pos:end="33:68"><expr pos:start="33:13" pos:end="33:67"><call pos:start="33:13" pos:end="33:67"><name pos:start="33:13" pos:end="33:22">error_setg</name><argument_list pos:start="33:23" pos:end="33:67">(<argument pos:start="33:24" pos:end="33:27"><expr pos:start="33:24" pos:end="33:27"><name pos:start="33:24" pos:end="33:27">errp</name></expr></argument>, <argument pos:start="33:30" pos:end="33:66"><expr pos:start="33:30" pos:end="33:66"><literal type="string" pos:start="33:30" pos:end="33:66">"vhost-scsi: unable to parse vhostfd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="35:13" pos:end="35:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="39:7" pos:end="53:5">else <block pos:start="39:12" pos:end="53:5">{<block_content pos:start="41:9" pos:end="51:9">

        <expr_stmt pos:start="41:9" pos:end="41:50"><expr pos:start="41:9" pos:end="41:49"><name pos:start="41:9" pos:end="41:15">vhostfd</name> <operator pos:start="41:17" pos:end="41:17">=</operator> <call pos:start="41:19" pos:end="41:49"><name pos:start="41:19" pos:end="41:22">open</name><argument_list pos:start="41:23" pos:end="41:49">(<argument pos:start="41:24" pos:end="41:40"><expr pos:start="41:24" pos:end="41:40"><literal type="string" pos:start="41:24" pos:end="41:40">"/dev/vhost-scsi"</literal></expr></argument>, <argument pos:start="41:43" pos:end="41:48"><expr pos:start="41:43" pos:end="41:48"><name pos:start="41:43" pos:end="41:48">O_RDWR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="43:9" pos:end="51:9"><if pos:start="43:9" pos:end="51:9">if <condition pos:start="43:12" pos:end="43:24">(<expr pos:start="43:13" pos:end="43:23"><name pos:start="43:13" pos:end="43:19">vhostfd</name> <operator pos:start="43:21" pos:end="43:21">&lt;</operator> <literal type="number" pos:start="43:23" pos:end="43:23">0</literal></expr>)</condition> <block pos:start="43:26" pos:end="51:9">{<block_content pos:start="45:13" pos:end="49:19">

            <expr_stmt pos:start="45:13" pos:end="47:40"><expr pos:start="45:13" pos:end="47:39"><call pos:start="45:13" pos:end="47:39"><name pos:start="45:13" pos:end="45:22">error_setg</name><argument_list pos:start="45:23" pos:end="47:39">(<argument pos:start="45:24" pos:end="45:27"><expr pos:start="45:24" pos:end="45:27"><name pos:start="45:24" pos:end="45:27">errp</name></expr></argument>, <argument pos:start="45:30" pos:end="45:76"><expr pos:start="45:30" pos:end="45:76"><literal type="string" pos:start="45:30" pos:end="45:76">"vhost-scsi: open vhost char device failed: %s"</literal></expr></argument>,

                       <argument pos:start="47:24" pos:end="47:38"><expr pos:start="47:24" pos:end="47:38"><call pos:start="47:24" pos:end="47:38"><name pos:start="47:24" pos:end="47:31">strerror</name><argument_list pos:start="47:32" pos:end="47:38">(<argument pos:start="47:33" pos:end="47:37"><expr pos:start="47:33" pos:end="47:37"><name pos:start="47:33" pos:end="47:37">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="49:13" pos:end="49:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="57:5" pos:end="61:58"><expr pos:start="57:5" pos:end="61:57"><call pos:start="57:5" pos:end="61:57"><name pos:start="57:5" pos:end="57:30">virtio_scsi_common_realize</name><argument_list pos:start="57:31" pos:end="61:57">(<argument pos:start="57:32" pos:end="57:34"><expr pos:start="57:32" pos:end="57:34"><name pos:start="57:32" pos:end="57:34">dev</name></expr></argument>, <argument pos:start="57:37" pos:end="57:40"><expr pos:start="57:37" pos:end="57:40"><operator pos:start="57:37" pos:end="57:37">&amp;</operator><name pos:start="57:38" pos:end="57:40">err</name></expr></argument>, <argument pos:start="57:43" pos:end="57:67"><expr pos:start="57:43" pos:end="57:67"><name pos:start="57:43" pos:end="57:67">vhost_dummy_handle_output</name></expr></argument>,

                               <argument pos:start="59:32" pos:end="59:56"><expr pos:start="59:32" pos:end="59:56"><name pos:start="59:32" pos:end="59:56">vhost_dummy_handle_output</name></expr></argument>,

                               <argument pos:start="61:32" pos:end="61:56"><expr pos:start="61:32" pos:end="61:56"><name pos:start="61:32" pos:end="61:56">vhost_dummy_handle_output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="63:5" pos:end="70:5"><if pos:start="63:5" pos:end="70:5">if <condition pos:start="63:8" pos:end="63:20">(<expr pos:start="63:9" pos:end="63:19"><name pos:start="63:9" pos:end="63:11">err</name> <operator pos:start="63:13" pos:end="63:14">!=</operator> <name pos:start="63:16" pos:end="63:19">NULL</name></expr>)</condition> <block pos:start="63:22" pos:end="70:5">{<block_content pos:start="65:9" pos:end="68:15">

        <expr_stmt pos:start="65:9" pos:end="65:35"><expr pos:start="65:9" pos:end="65:34"><call pos:start="65:9" pos:end="65:34"><name pos:start="65:9" pos:end="65:23">error_propagate</name><argument_list pos:start="65:24" pos:end="65:34">(<argument pos:start="65:25" pos:end="65:28"><expr pos:start="65:25" pos:end="65:28"><name pos:start="65:25" pos:end="65:28">errp</name></expr></argument>, <argument pos:start="65:31" pos:end="65:33"><expr pos:start="65:31" pos:end="65:33"><name pos:start="65:31" pos:end="65:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        <return pos:start="68:9" pos:end="68:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="74:5" pos:end="74:64"><expr pos:start="74:5" pos:end="74:63"><name pos:start="74:5" pos:end="74:15"><name pos:start="74:5" pos:end="74:5">s</name><operator pos:start="74:6" pos:end="74:7">-&gt;</operator><name pos:start="74:8" pos:end="74:10">dev</name><operator pos:start="74:11" pos:end="74:11">.</operator><name pos:start="74:12" pos:end="74:15">nvqs</name></name> <operator pos:start="74:17" pos:end="74:17">=</operator> <name pos:start="74:19" pos:end="74:41">VHOST_SCSI_VQ_NUM_FIXED</name> <operator pos:start="74:43" pos:end="74:43">+</operator> <name pos:start="74:45" pos:end="74:63"><name pos:start="74:45" pos:end="74:46">vs</name><operator pos:start="74:47" pos:end="74:48">-&gt;</operator><name pos:start="74:49" pos:end="74:52">conf</name><operator pos:start="74:53" pos:end="74:53">.</operator><name pos:start="74:54" pos:end="74:63">num_queues</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="76:5" pos:end="76:60"><expr pos:start="76:5" pos:end="76:59"><name pos:start="76:5" pos:end="76:14"><name pos:start="76:5" pos:end="76:5">s</name><operator pos:start="76:6" pos:end="76:7">-&gt;</operator><name pos:start="76:8" pos:end="76:10">dev</name><operator pos:start="76:11" pos:end="76:11">.</operator><name pos:start="76:12" pos:end="76:14">vqs</name></name> <operator pos:start="76:16" pos:end="76:16">=</operator> <call pos:start="76:18" pos:end="76:59"><name pos:start="76:18" pos:end="76:22">g_new</name><argument_list pos:start="76:23" pos:end="76:59">(<argument pos:start="76:24" pos:end="76:45"><expr pos:start="76:24" pos:end="76:45">struct <name pos:start="76:31" pos:end="76:45">vhost_virtqueue</name></expr></argument>, <argument pos:start="76:48" pos:end="76:58"><expr pos:start="76:48" pos:end="76:58"><name pos:start="76:48" pos:end="76:58"><name pos:start="76:48" pos:end="76:48">s</name><operator pos:start="76:49" pos:end="76:50">-&gt;</operator><name pos:start="76:51" pos:end="76:53">dev</name><operator pos:start="76:54" pos:end="76:54">.</operator><name pos:start="76:55" pos:end="76:58">nvqs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="78:5" pos:end="78:24"><expr pos:start="78:5" pos:end="78:23"><name pos:start="78:5" pos:end="78:19"><name pos:start="78:5" pos:end="78:5">s</name><operator pos:start="78:6" pos:end="78:7">-&gt;</operator><name pos:start="78:8" pos:end="78:10">dev</name><operator pos:start="78:11" pos:end="78:11">.</operator><name pos:start="78:12" pos:end="78:19">vq_index</name></name> <operator pos:start="78:21" pos:end="78:21">=</operator> <literal type="number" pos:start="78:23" pos:end="78:23">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="80:5" pos:end="80:32"><expr pos:start="80:5" pos:end="80:31"><name pos:start="80:5" pos:end="80:27"><name pos:start="80:5" pos:end="80:5">s</name><operator pos:start="80:6" pos:end="80:7">-&gt;</operator><name pos:start="80:8" pos:end="80:10">dev</name><operator pos:start="80:11" pos:end="80:11">.</operator><name pos:start="80:12" pos:end="80:27">backend_features</name></name> <operator pos:start="80:29" pos:end="80:29">=</operator> <literal type="number" pos:start="80:31" pos:end="80:31">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="84:5" pos:end="86:58"><expr pos:start="84:5" pos:end="86:57"><name pos:start="84:5" pos:end="84:7">ret</name> <operator pos:start="84:9" pos:end="84:9">=</operator> <call pos:start="84:11" pos:end="86:57"><name pos:start="84:11" pos:end="84:24">vhost_dev_init</name><argument_list pos:start="84:25" pos:end="86:57">(<argument pos:start="84:26" pos:end="84:32"><expr pos:start="84:26" pos:end="84:32"><operator pos:start="84:26" pos:end="84:26">&amp;</operator><name pos:start="84:27" pos:end="84:32"><name pos:start="84:27" pos:end="84:27">s</name><operator pos:start="84:28" pos:end="84:29">-&gt;</operator><name pos:start="84:30" pos:end="84:32">dev</name></name></expr></argument>, <argument pos:start="84:35" pos:end="84:60"><expr pos:start="84:35" pos:end="84:60"><operator pos:start="84:35" pos:end="84:35">(</operator><name pos:start="84:36" pos:end="84:39">void</name> <operator pos:start="84:41" pos:end="84:41">*</operator><operator pos:start="84:42" pos:end="84:42">)</operator><operator pos:start="84:43" pos:end="84:43">(</operator><name pos:start="84:44" pos:end="84:52">uintptr_t</name><operator pos:start="84:53" pos:end="84:53">)</operator><name pos:start="84:54" pos:end="84:60">vhostfd</name></expr></argument>,

                         <argument pos:start="86:26" pos:end="86:50"><expr pos:start="86:26" pos:end="86:50"><name pos:start="86:26" pos:end="86:50">VHOST_BACKEND_TYPE_KERNEL</name></expr></argument>, <argument pos:start="86:53" pos:end="86:56"><expr pos:start="86:53" pos:end="86:56"><name pos:start="86:53" pos:end="86:56">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="88:5" pos:end="96:5"><if pos:start="88:5" pos:end="96:5">if <condition pos:start="88:8" pos:end="88:16">(<expr pos:start="88:9" pos:end="88:15"><name pos:start="88:9" pos:end="88:11">ret</name> <operator pos:start="88:13" pos:end="88:13">&lt;</operator> <literal type="number" pos:start="88:15" pos:end="88:15">0</literal></expr>)</condition> <block pos:start="88:18" pos:end="96:5">{<block_content pos:start="90:9" pos:end="94:15">

        <expr_stmt pos:start="90:9" pos:end="92:35"><expr pos:start="90:9" pos:end="92:34"><call pos:start="90:9" pos:end="92:34"><name pos:start="90:9" pos:end="90:18">error_setg</name><argument_list pos:start="90:19" pos:end="92:34">(<argument pos:start="90:20" pos:end="90:23"><expr pos:start="90:20" pos:end="90:23"><name pos:start="90:20" pos:end="90:23">errp</name></expr></argument>, <argument pos:start="90:26" pos:end="90:70"><expr pos:start="90:26" pos:end="90:70"><literal type="string" pos:start="90:26" pos:end="90:70">"vhost-scsi: vhost initialization failed: %s"</literal></expr></argument>,

                   <argument pos:start="92:20" pos:end="92:33"><expr pos:start="92:20" pos:end="92:33"><call pos:start="92:20" pos:end="92:33"><name pos:start="92:20" pos:end="92:27">strerror</name><argument_list pos:start="92:28" pos:end="92:33">(<argument pos:start="92:29" pos:end="92:32"><expr pos:start="92:29" pos:end="92:32"><operator pos:start="92:29" pos:end="92:29">-</operator><name pos:start="92:30" pos:end="92:32">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="94:9" pos:end="94:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="100:5" pos:end="102:53"><expr pos:start="100:5" pos:end="102:52"><call pos:start="100:5" pos:end="102:52"><name pos:start="100:5" pos:end="100:14">error_setg</name><argument_list pos:start="100:15" pos:end="102:52">(<argument pos:start="100:16" pos:end="100:36"><expr pos:start="100:16" pos:end="100:36"><operator pos:start="100:16" pos:end="100:16">&amp;</operator><name pos:start="100:17" pos:end="100:36"><name pos:start="100:17" pos:end="100:17">s</name><operator pos:start="100:18" pos:end="100:19">-&gt;</operator><name pos:start="100:20" pos:end="100:36">migration_blocker</name></name></expr></argument>,

            <argument pos:start="102:13" pos:end="102:51"><expr pos:start="102:13" pos:end="102:51"><literal type="string" pos:start="102:13" pos:end="102:51">"vhost-scsi does not support migration"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="104:5" pos:end="104:46"><expr pos:start="104:5" pos:end="104:45"><call pos:start="104:5" pos:end="104:45"><name pos:start="104:5" pos:end="104:23">migrate_add_blocker</name><argument_list pos:start="104:24" pos:end="104:45">(<argument pos:start="104:25" pos:end="104:44"><expr pos:start="104:25" pos:end="104:44"><name pos:start="104:25" pos:end="104:44"><name pos:start="104:25" pos:end="104:25">s</name><operator pos:start="104:26" pos:end="104:27">-&gt;</operator><name pos:start="104:28" pos:end="104:44">migration_blocker</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function></unit>
