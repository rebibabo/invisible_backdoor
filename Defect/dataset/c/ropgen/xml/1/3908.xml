<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3908.c" pos:tabs="8"><function pos:start="1:1" pos:end="191:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">usb_xhci_realize</name><parameter_list pos:start="1:29" pos:end="1:65">(<parameter pos:start="1:30" pos:end="1:50"><decl pos:start="1:30" pos:end="1:50"><type pos:start="1:30" pos:end="1:50"><name pos:start="1:30" pos:end="1:45"><name pos:start="1:30" pos:end="1:35">struct</name> <name pos:start="1:37" pos:end="1:45">PCIDevice</name></name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:50">dev</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:64"><decl pos:start="1:53" pos:end="1:64"><type pos:start="1:53" pos:end="1:64"><name pos:start="1:53" pos:end="1:57">Error</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier><modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:64">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="191:1">{<block_content pos:start="5:5" pos:end="189:5">

    <decl_stmt pos:start="5:5" pos:end="5:15"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>, <decl pos:start="5:12" pos:end="5:14"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:14">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:9">Error</name> <modifier pos:start="7:11" pos:end="7:11">*</modifier></type><name pos:start="7:12" pos:end="7:14">err</name> <init pos:start="7:16" pos:end="7:21">= <expr pos:start="7:18" pos:end="7:21"><name pos:start="7:18" pos:end="7:21">NULL</name></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="11:5" pos:end="11:32"><decl pos:start="11:5" pos:end="11:31"><type pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:13">XHCIState</name> <modifier pos:start="11:15" pos:end="11:15">*</modifier></type><name pos:start="11:16" pos:end="11:19">xhci</name> <init pos:start="11:21" pos:end="11:31">= <expr pos:start="11:23" pos:end="11:31"><call pos:start="11:23" pos:end="11:31"><name pos:start="11:23" pos:end="11:26">XHCI</name><argument_list pos:start="11:27" pos:end="11:31">(<argument pos:start="11:28" pos:end="11:30"><expr pos:start="11:28" pos:end="11:30"><name pos:start="11:28" pos:end="11:30">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:39"><expr pos:start="15:5" pos:end="15:38"><name pos:start="15:5" pos:end="15:31"><name pos:start="15:5" pos:end="15:7">dev</name><operator pos:start="15:8" pos:end="15:9">-&gt;</operator><name pos:start="15:10" pos:end="15:15">config</name><index pos:start="15:16" pos:end="15:31">[<expr pos:start="15:17" pos:end="15:30"><name pos:start="15:17" pos:end="15:30">PCI_CLASS_PROG</name></expr>]</index></name> <operator pos:start="15:33" pos:end="15:33">=</operator> <literal type="number" pos:start="15:35" pos:end="15:38">0x30</literal></expr>;</expr_stmt>    <comment type="block" pos:start="15:44" pos:end="15:53">/* xHCI */</comment>

    <expr_stmt pos:start="17:5" pos:end="17:42"><expr pos:start="17:5" pos:end="17:41"><name pos:start="17:5" pos:end="17:34"><name pos:start="17:5" pos:end="17:7">dev</name><operator pos:start="17:8" pos:end="17:9">-&gt;</operator><name pos:start="17:10" pos:end="17:15">config</name><index pos:start="17:16" pos:end="17:34">[<expr pos:start="17:17" pos:end="17:33"><name pos:start="17:17" pos:end="17:33">PCI_INTERRUPT_PIN</name></expr>]</index></name> <operator pos:start="17:36" pos:end="17:36">=</operator> <literal type="number" pos:start="17:38" pos:end="17:41">0x01</literal></expr>;</expr_stmt> <comment type="block" pos:start="17:44" pos:end="17:64">/* interrupt pin 1 */</comment>

    <expr_stmt pos:start="19:5" pos:end="19:44"><expr pos:start="19:5" pos:end="19:43"><name pos:start="19:5" pos:end="19:36"><name pos:start="19:5" pos:end="19:7">dev</name><operator pos:start="19:8" pos:end="19:9">-&gt;</operator><name pos:start="19:10" pos:end="19:15">config</name><index pos:start="19:16" pos:end="19:36">[<expr pos:start="19:17" pos:end="19:35"><name pos:start="19:17" pos:end="19:35">PCI_CACHE_LINE_SIZE</name></expr>]</index></name> <operator pos:start="19:38" pos:end="19:38">=</operator> <literal type="number" pos:start="19:40" pos:end="19:43">0x10</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:29"><expr pos:start="21:5" pos:end="21:28"><name pos:start="21:5" pos:end="21:21"><name pos:start="21:5" pos:end="21:7">dev</name><operator pos:start="21:8" pos:end="21:9">-&gt;</operator><name pos:start="21:10" pos:end="21:15">config</name><index pos:start="21:16" pos:end="21:21">[<expr pos:start="21:17" pos:end="21:20"><literal type="number" pos:start="21:17" pos:end="21:20">0x60</literal></expr>]</index></name> <operator pos:start="21:23" pos:end="21:23">=</operator> <literal type="number" pos:start="21:25" pos:end="21:28">0x30</literal></expr>;</expr_stmt> <comment type="block" pos:start="21:31" pos:end="21:50">/* release number */</comment>



    <expr_stmt pos:start="25:5" pos:end="25:24"><expr pos:start="25:5" pos:end="25:23"><call pos:start="25:5" pos:end="25:23"><name pos:start="25:5" pos:end="25:17">usb_xhci_init</name><argument_list pos:start="25:18" pos:end="25:23">(<argument pos:start="25:19" pos:end="25:22"><expr pos:start="25:19" pos:end="25:22"><name pos:start="25:19" pos:end="25:22">xhci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="29:5" pos:end="59:5"><if pos:start="29:5" pos:end="59:5">if <condition pos:start="29:8" pos:end="29:37">(<expr pos:start="29:9" pos:end="29:36"><name pos:start="29:9" pos:end="29:17"><name pos:start="29:9" pos:end="29:12">xhci</name><operator pos:start="29:13" pos:end="29:14">-&gt;</operator><name pos:start="29:15" pos:end="29:17">msi</name></name> <operator pos:start="29:19" pos:end="29:20">!=</operator> <name pos:start="29:22" pos:end="29:36">ON_OFF_AUTO_OFF</name></expr>)</condition> <block pos:start="29:39" pos:end="59:5">{<block_content pos:start="31:9" pos:end="57:24">

        <expr_stmt pos:start="31:9" pos:end="31:69"><expr pos:start="31:9" pos:end="31:68"><name pos:start="31:9" pos:end="31:11">ret</name> <operator pos:start="31:13" pos:end="31:13">=</operator> <call pos:start="31:15" pos:end="31:68"><name pos:start="31:15" pos:end="31:22">msi_init</name><argument_list pos:start="31:23" pos:end="31:68">(<argument pos:start="31:24" pos:end="31:26"><expr pos:start="31:24" pos:end="31:26"><name pos:start="31:24" pos:end="31:26">dev</name></expr></argument>, <argument pos:start="31:29" pos:end="31:32"><expr pos:start="31:29" pos:end="31:32"><literal type="number" pos:start="31:29" pos:end="31:32">0x70</literal></expr></argument>, <argument pos:start="31:35" pos:end="31:48"><expr pos:start="31:35" pos:end="31:48"><name pos:start="31:35" pos:end="31:48"><name pos:start="31:35" pos:end="31:38">xhci</name><operator pos:start="31:39" pos:end="31:40">-&gt;</operator><name pos:start="31:41" pos:end="31:48">numintrs</name></name></expr></argument>, <argument pos:start="31:51" pos:end="31:54"><expr pos:start="31:51" pos:end="31:54"><name pos:start="31:51" pos:end="31:54">true</name></expr></argument>, <argument pos:start="31:57" pos:end="31:61"><expr pos:start="31:57" pos:end="31:61"><name pos:start="31:57" pos:end="31:61">false</name></expr></argument>, <argument pos:start="31:64" pos:end="31:67"><expr pos:start="31:64" pos:end="31:67"><operator pos:start="31:64" pos:end="31:64">&amp;</operator><name pos:start="31:65" pos:end="31:67">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="33:9" pos:end="35:36">/* Any error other than -ENOTSUP(board's MSI support is broken)

         * is a programming error */</comment>

        <expr_stmt pos:start="37:9" pos:end="37:40"><expr pos:start="37:9" pos:end="37:39"><call pos:start="37:9" pos:end="37:39"><name pos:start="37:9" pos:end="37:14">assert</name><argument_list pos:start="37:15" pos:end="37:39">(<argument pos:start="37:16" pos:end="37:38"><expr pos:start="37:16" pos:end="37:38"><operator pos:start="37:16" pos:end="37:16">!</operator><name pos:start="37:17" pos:end="37:19">ret</name> <operator pos:start="37:21" pos:end="37:22">||</operator> <name pos:start="37:24" pos:end="37:26">ret</name> <operator pos:start="37:28" pos:end="37:29">==</operator> <operator pos:start="37:31" pos:end="37:31">-</operator><name pos:start="37:32" pos:end="37:38">ENOTSUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="39:9" pos:end="51:9"><if pos:start="39:9" pos:end="51:9">if <condition pos:start="39:12" pos:end="39:47">(<expr pos:start="39:13" pos:end="39:46"><name pos:start="39:13" pos:end="39:15">ret</name> <operator pos:start="39:17" pos:end="39:18">&amp;&amp;</operator> <name pos:start="39:20" pos:end="39:28"><name pos:start="39:20" pos:end="39:23">xhci</name><operator pos:start="39:24" pos:end="39:25">-&gt;</operator><name pos:start="39:26" pos:end="39:28">msi</name></name> <operator pos:start="39:30" pos:end="39:31">==</operator> <name pos:start="39:33" pos:end="39:46">ON_OFF_AUTO_ON</name></expr>)</condition> <block pos:start="39:49" pos:end="51:9">{<block_content pos:start="43:13" pos:end="49:19">

            <comment type="block" pos:start="41:13" pos:end="41:68">/* Can't satisfy user's explicit msi=on request, fail */</comment>

            <expr_stmt pos:start="43:13" pos:end="45:57"><expr pos:start="43:13" pos:end="45:56"><call pos:start="43:13" pos:end="45:56"><name pos:start="43:13" pos:end="43:29">error_append_hint</name><argument_list pos:start="43:30" pos:end="45:56">(<argument pos:start="43:31" pos:end="43:34"><expr pos:start="43:31" pos:end="43:34"><operator pos:start="43:31" pos:end="43:31">&amp;</operator><name pos:start="43:32" pos:end="43:34">err</name></expr></argument>, <argument pos:start="43:37" pos:end="45:55"><expr pos:start="43:37" pos:end="45:55"><literal type="string" pos:start="43:37" pos:end="43:76">"You have to use msi=auto (default) or "</literal>

                    <literal type="string" pos:start="45:21" pos:end="45:55">"msi=off with this machine type.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="47:13" pos:end="47:39"><expr pos:start="47:13" pos:end="47:38"><call pos:start="47:13" pos:end="47:38"><name pos:start="47:13" pos:end="47:27">error_propagate</name><argument_list pos:start="47:28" pos:end="47:38">(<argument pos:start="47:29" pos:end="47:32"><expr pos:start="47:29" pos:end="47:32"><name pos:start="47:29" pos:end="47:32">errp</name></expr></argument>, <argument pos:start="47:35" pos:end="47:37"><expr pos:start="47:35" pos:end="47:37"><name pos:start="47:35" pos:end="47:37">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="49:13" pos:end="49:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:54"><expr pos:start="53:9" pos:end="53:53"><call pos:start="53:9" pos:end="53:53"><name pos:start="53:9" pos:end="53:14">assert</name><argument_list pos:start="53:15" pos:end="53:53">(<argument pos:start="53:16" pos:end="53:52"><expr pos:start="53:16" pos:end="53:52"><operator pos:start="53:16" pos:end="53:16">!</operator><name pos:start="53:17" pos:end="53:19">err</name> <operator pos:start="53:21" pos:end="53:22">||</operator> <name pos:start="53:24" pos:end="53:32"><name pos:start="53:24" pos:end="53:27">xhci</name><operator pos:start="53:28" pos:end="53:29">-&gt;</operator><name pos:start="53:30" pos:end="53:32">msi</name></name> <operator pos:start="53:34" pos:end="53:35">==</operator> <name pos:start="53:37" pos:end="53:52">ON_OFF_AUTO_AUTO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="55:9" pos:end="55:61">/* With msi=auto, we fall back to MSI off silently */</comment>

        <expr_stmt pos:start="57:9" pos:end="57:24"><expr pos:start="57:9" pos:end="57:23"><call pos:start="57:9" pos:end="57:23"><name pos:start="57:9" pos:end="57:18">error_free</name><argument_list pos:start="57:19" pos:end="57:23">(<argument pos:start="57:20" pos:end="57:22"><expr pos:start="57:20" pos:end="57:22"><name pos:start="57:20" pos:end="57:22">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="63:5" pos:end="67:5"><if pos:start="63:5" pos:end="67:5">if <condition pos:start="63:8" pos:end="63:34">(<expr pos:start="63:9" pos:end="63:33"><name pos:start="63:9" pos:end="63:22"><name pos:start="63:9" pos:end="63:12">xhci</name><operator pos:start="63:13" pos:end="63:14">-&gt;</operator><name pos:start="63:15" pos:end="63:22">numintrs</name></name> <operator pos:start="63:24" pos:end="63:24">&gt;</operator> <name pos:start="63:26" pos:end="63:33">MAXINTRS</name></expr>)</condition> <block pos:start="63:36" pos:end="67:5">{<block_content pos:start="65:9" pos:end="65:34">

        <expr_stmt pos:start="65:9" pos:end="65:34"><expr pos:start="65:9" pos:end="65:33"><name pos:start="65:9" pos:end="65:22"><name pos:start="65:9" pos:end="65:12">xhci</name><operator pos:start="65:13" pos:end="65:14">-&gt;</operator><name pos:start="65:15" pos:end="65:22">numintrs</name></name> <operator pos:start="65:24" pos:end="65:24">=</operator> <name pos:start="65:26" pos:end="65:33">MAXINTRS</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <while pos:start="69:5" pos:end="73:5">while <condition pos:start="69:11" pos:end="69:49">(<expr pos:start="69:12" pos:end="69:48"><name pos:start="69:12" pos:end="69:25"><name pos:start="69:12" pos:end="69:15">xhci</name><operator pos:start="69:16" pos:end="69:17">-&gt;</operator><name pos:start="69:18" pos:end="69:25">numintrs</name></name> <operator pos:start="69:27" pos:end="69:27">&amp;</operator> <operator pos:start="69:29" pos:end="69:29">(</operator><name pos:start="69:30" pos:end="69:43"><name pos:start="69:30" pos:end="69:33">xhci</name><operator pos:start="69:34" pos:end="69:35">-&gt;</operator><name pos:start="69:36" pos:end="69:43">numintrs</name></name> <operator pos:start="69:45" pos:end="69:45">-</operator> <literal type="number" pos:start="69:47" pos:end="69:47">1</literal><operator pos:start="69:48" pos:end="69:48">)</operator></expr>)</condition> <block pos:start="69:51" pos:end="73:5">{<block_content pos:start="71:9" pos:end="71:25">   <comment type="block" pos:start="69:55" pos:end="69:72">/* ! power of 2 */</comment>

        <expr_stmt pos:start="71:9" pos:end="71:25"><expr pos:start="71:9" pos:end="71:24"><name pos:start="71:9" pos:end="71:22"><name pos:start="71:9" pos:end="71:12">xhci</name><operator pos:start="71:13" pos:end="71:14">-&gt;</operator><name pos:start="71:15" pos:end="71:22">numintrs</name></name><operator pos:start="71:23" pos:end="71:24">++</operator></expr>;</expr_stmt>

    </block_content>}</block></while>

    <if_stmt pos:start="75:5" pos:end="79:5"><if pos:start="75:5" pos:end="79:5">if <condition pos:start="75:8" pos:end="75:27">(<expr pos:start="75:9" pos:end="75:26"><name pos:start="75:9" pos:end="75:22"><name pos:start="75:9" pos:end="75:12">xhci</name><operator pos:start="75:13" pos:end="75:14">-&gt;</operator><name pos:start="75:15" pos:end="75:22">numintrs</name></name> <operator pos:start="75:24" pos:end="75:24">&lt;</operator> <literal type="number" pos:start="75:26" pos:end="75:26">1</literal></expr>)</condition> <block pos:start="75:29" pos:end="79:5">{<block_content pos:start="77:9" pos:end="77:27">

        <expr_stmt pos:start="77:9" pos:end="77:27"><expr pos:start="77:9" pos:end="77:26"><name pos:start="77:9" pos:end="77:22"><name pos:start="77:9" pos:end="77:12">xhci</name><operator pos:start="77:13" pos:end="77:14">-&gt;</operator><name pos:start="77:15" pos:end="77:22">numintrs</name></name> <operator pos:start="77:24" pos:end="77:24">=</operator> <literal type="number" pos:start="77:26" pos:end="77:26">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="81:5" pos:end="85:5"><if pos:start="81:5" pos:end="85:5">if <condition pos:start="81:8" pos:end="81:34">(<expr pos:start="81:9" pos:end="81:33"><name pos:start="81:9" pos:end="81:22"><name pos:start="81:9" pos:end="81:12">xhci</name><operator pos:start="81:13" pos:end="81:14">-&gt;</operator><name pos:start="81:15" pos:end="81:22">numslots</name></name> <operator pos:start="81:24" pos:end="81:24">&gt;</operator> <name pos:start="81:26" pos:end="81:33">MAXSLOTS</name></expr>)</condition> <block pos:start="81:36" pos:end="85:5">{<block_content pos:start="83:9" pos:end="83:34">

        <expr_stmt pos:start="83:9" pos:end="83:34"><expr pos:start="83:9" pos:end="83:33"><name pos:start="83:9" pos:end="83:22"><name pos:start="83:9" pos:end="83:12">xhci</name><operator pos:start="83:13" pos:end="83:14">-&gt;</operator><name pos:start="83:15" pos:end="83:22">numslots</name></name> <operator pos:start="83:24" pos:end="83:24">=</operator> <name pos:start="83:26" pos:end="83:33">MAXSLOTS</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="87:5" pos:end="91:5"><if pos:start="87:5" pos:end="91:5">if <condition pos:start="87:8" pos:end="87:27">(<expr pos:start="87:9" pos:end="87:26"><name pos:start="87:9" pos:end="87:22"><name pos:start="87:9" pos:end="87:12">xhci</name><operator pos:start="87:13" pos:end="87:14">-&gt;</operator><name pos:start="87:15" pos:end="87:22">numslots</name></name> <operator pos:start="87:24" pos:end="87:24">&lt;</operator> <literal type="number" pos:start="87:26" pos:end="87:26">1</literal></expr>)</condition> <block pos:start="87:29" pos:end="91:5">{<block_content pos:start="89:9" pos:end="89:27">

        <expr_stmt pos:start="89:9" pos:end="89:27"><expr pos:start="89:9" pos:end="89:26"><name pos:start="89:9" pos:end="89:22"><name pos:start="89:9" pos:end="89:12">xhci</name><operator pos:start="89:13" pos:end="89:14">-&gt;</operator><name pos:start="89:15" pos:end="89:22">numslots</name></name> <operator pos:start="89:24" pos:end="89:24">=</operator> <literal type="number" pos:start="89:26" pos:end="89:26">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="93:5" pos:end="101:5"><if pos:start="93:5" pos:end="97:5">if <condition pos:start="93:8" pos:end="93:54">(<expr pos:start="93:9" pos:end="93:53"><call pos:start="93:9" pos:end="93:53"><name pos:start="93:9" pos:end="93:21">xhci_get_flag</name><argument_list pos:start="93:22" pos:end="93:53">(<argument pos:start="93:23" pos:end="93:26"><expr pos:start="93:23" pos:end="93:26"><name pos:start="93:23" pos:end="93:26">xhci</name></expr></argument>, <argument pos:start="93:29" pos:end="93:52"><expr pos:start="93:29" pos:end="93:52"><name pos:start="93:29" pos:end="93:52">XHCI_FLAG_ENABLE_STREAMS</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="93:56" pos:end="97:5">{<block_content pos:start="95:9" pos:end="95:36">

        <expr_stmt pos:start="95:9" pos:end="95:36"><expr pos:start="95:9" pos:end="95:35"><name pos:start="95:9" pos:end="95:31"><name pos:start="95:9" pos:end="95:12">xhci</name><operator pos:start="95:13" pos:end="95:14">-&gt;</operator><name pos:start="95:15" pos:end="95:31">max_pstreams_mask</name></name> <operator pos:start="95:33" pos:end="95:33">=</operator> <literal type="number" pos:start="95:35" pos:end="95:35">7</literal></expr>;</expr_stmt> <comment type="block" pos:start="95:38" pos:end="95:65">/* == 256 primary streams */</comment>

    </block_content>}</block></if> <else pos:start="97:7" pos:end="101:5">else <block pos:start="97:12" pos:end="101:5">{<block_content pos:start="99:9" pos:end="99:36">

        <expr_stmt pos:start="99:9" pos:end="99:36"><expr pos:start="99:9" pos:end="99:35"><name pos:start="99:9" pos:end="99:31"><name pos:start="99:9" pos:end="99:12">xhci</name><operator pos:start="99:13" pos:end="99:14">-&gt;</operator><name pos:start="99:15" pos:end="99:31">max_pstreams_mask</name></name> <operator pos:start="99:33" pos:end="99:33">=</operator> <literal type="number" pos:start="99:35" pos:end="99:35">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="105:5" pos:end="105:83"><expr pos:start="105:5" pos:end="105:82"><name pos:start="105:5" pos:end="105:22"><name pos:start="105:5" pos:end="105:8">xhci</name><operator pos:start="105:9" pos:end="105:10">-&gt;</operator><name pos:start="105:11" pos:end="105:22">mfwrap_timer</name></name> <operator pos:start="105:24" pos:end="105:24">=</operator> <call pos:start="105:26" pos:end="105:82"><name pos:start="105:26" pos:end="105:37">timer_new_ns</name><argument_list pos:start="105:38" pos:end="105:82">(<argument pos:start="105:39" pos:end="105:56"><expr pos:start="105:39" pos:end="105:56"><name pos:start="105:39" pos:end="105:56">QEMU_CLOCK_VIRTUAL</name></expr></argument>, <argument pos:start="105:59" pos:end="105:75"><expr pos:start="105:59" pos:end="105:75"><name pos:start="105:59" pos:end="105:75">xhci_mfwrap_timer</name></expr></argument>, <argument pos:start="105:78" pos:end="105:81"><expr pos:start="105:78" pos:end="105:81"><name pos:start="105:78" pos:end="105:81">xhci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="109:5" pos:end="109:67"><expr pos:start="109:5" pos:end="109:66"><call pos:start="109:5" pos:end="109:66"><name pos:start="109:5" pos:end="109:22">memory_region_init</name><argument_list pos:start="109:23" pos:end="109:66">(<argument pos:start="109:24" pos:end="109:33"><expr pos:start="109:24" pos:end="109:33"><operator pos:start="109:24" pos:end="109:24">&amp;</operator><name pos:start="109:25" pos:end="109:33"><name pos:start="109:25" pos:end="109:28">xhci</name><operator pos:start="109:29" pos:end="109:30">-&gt;</operator><name pos:start="109:31" pos:end="109:33">mem</name></name></expr></argument>, <argument pos:start="109:36" pos:end="109:47"><expr pos:start="109:36" pos:end="109:47"><call pos:start="109:36" pos:end="109:47"><name pos:start="109:36" pos:end="109:41">OBJECT</name><argument_list pos:start="109:42" pos:end="109:47">(<argument pos:start="109:43" pos:end="109:46"><expr pos:start="109:43" pos:end="109:46"><name pos:start="109:43" pos:end="109:46">xhci</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="109:50" pos:end="109:55"><expr pos:start="109:50" pos:end="109:55"><literal type="string" pos:start="109:50" pos:end="109:55">"xhci"</literal></expr></argument>, <argument pos:start="109:58" pos:end="109:65"><expr pos:start="109:58" pos:end="109:65"><name pos:start="109:58" pos:end="109:65">LEN_REGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="113:51"><expr pos:start="111:5" pos:end="113:50"><call pos:start="111:5" pos:end="113:50"><name pos:start="111:5" pos:end="111:25">memory_region_init_io</name><argument_list pos:start="111:26" pos:end="113:50">(<argument pos:start="111:27" pos:end="111:40"><expr pos:start="111:27" pos:end="111:40"><operator pos:start="111:27" pos:end="111:27">&amp;</operator><name pos:start="111:28" pos:end="111:40"><name pos:start="111:28" pos:end="111:31">xhci</name><operator pos:start="111:32" pos:end="111:33">-&gt;</operator><name pos:start="111:34" pos:end="111:40">mem_cap</name></name></expr></argument>, <argument pos:start="111:43" pos:end="111:54"><expr pos:start="111:43" pos:end="111:54"><call pos:start="111:43" pos:end="111:54"><name pos:start="111:43" pos:end="111:48">OBJECT</name><argument_list pos:start="111:49" pos:end="111:54">(<argument pos:start="111:50" pos:end="111:53"><expr pos:start="111:50" pos:end="111:53"><name pos:start="111:50" pos:end="111:53">xhci</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="111:57" pos:end="111:69"><expr pos:start="111:57" pos:end="111:69"><operator pos:start="111:57" pos:end="111:57">&amp;</operator><name pos:start="111:58" pos:end="111:69">xhci_cap_ops</name></expr></argument>, <argument pos:start="111:72" pos:end="111:75"><expr pos:start="111:72" pos:end="111:75"><name pos:start="111:72" pos:end="111:75">xhci</name></expr></argument>,

                          <argument pos:start="113:27" pos:end="113:40"><expr pos:start="113:27" pos:end="113:40"><literal type="string" pos:start="113:27" pos:end="113:40">"capabilities"</literal></expr></argument>, <argument pos:start="113:43" pos:end="113:49"><expr pos:start="113:43" pos:end="113:49"><name pos:start="113:43" pos:end="113:49">LEN_CAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="117:48"><expr pos:start="115:5" pos:end="117:47"><call pos:start="115:5" pos:end="117:47"><name pos:start="115:5" pos:end="115:25">memory_region_init_io</name><argument_list pos:start="115:26" pos:end="117:47">(<argument pos:start="115:27" pos:end="115:41"><expr pos:start="115:27" pos:end="115:41"><operator pos:start="115:27" pos:end="115:27">&amp;</operator><name pos:start="115:28" pos:end="115:41"><name pos:start="115:28" pos:end="115:31">xhci</name><operator pos:start="115:32" pos:end="115:33">-&gt;</operator><name pos:start="115:34" pos:end="115:41">mem_oper</name></name></expr></argument>, <argument pos:start="115:44" pos:end="115:55"><expr pos:start="115:44" pos:end="115:55"><call pos:start="115:44" pos:end="115:55"><name pos:start="115:44" pos:end="115:49">OBJECT</name><argument_list pos:start="115:50" pos:end="115:55">(<argument pos:start="115:51" pos:end="115:54"><expr pos:start="115:51" pos:end="115:54"><name pos:start="115:51" pos:end="115:54">xhci</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="115:58" pos:end="115:71"><expr pos:start="115:58" pos:end="115:71"><operator pos:start="115:58" pos:end="115:58">&amp;</operator><name pos:start="115:59" pos:end="115:71">xhci_oper_ops</name></expr></argument>, <argument pos:start="115:74" pos:end="115:77"><expr pos:start="115:74" pos:end="115:77"><name pos:start="115:74" pos:end="115:77">xhci</name></expr></argument>,

                          <argument pos:start="117:27" pos:end="117:39"><expr pos:start="117:27" pos:end="117:39"><literal type="string" pos:start="117:27" pos:end="117:39">"operational"</literal></expr></argument>, <argument pos:start="117:42" pos:end="117:46"><expr pos:start="117:42" pos:end="117:46"><literal type="number" pos:start="117:42" pos:end="117:46">0x400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="121:50"><expr pos:start="119:5" pos:end="121:49"><call pos:start="119:5" pos:end="121:49"><name pos:start="119:5" pos:end="119:25">memory_region_init_io</name><argument_list pos:start="119:26" pos:end="121:49">(<argument pos:start="119:27" pos:end="119:44"><expr pos:start="119:27" pos:end="119:44"><operator pos:start="119:27" pos:end="119:27">&amp;</operator><name pos:start="119:28" pos:end="119:44"><name pos:start="119:28" pos:end="119:31">xhci</name><operator pos:start="119:32" pos:end="119:33">-&gt;</operator><name pos:start="119:34" pos:end="119:44">mem_runtime</name></name></expr></argument>, <argument pos:start="119:47" pos:end="119:58"><expr pos:start="119:47" pos:end="119:58"><call pos:start="119:47" pos:end="119:58"><name pos:start="119:47" pos:end="119:52">OBJECT</name><argument_list pos:start="119:53" pos:end="119:58">(<argument pos:start="119:54" pos:end="119:57"><expr pos:start="119:54" pos:end="119:57"><name pos:start="119:54" pos:end="119:57">xhci</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="119:61" pos:end="119:77"><expr pos:start="119:61" pos:end="119:77"><operator pos:start="119:61" pos:end="119:61">&amp;</operator><name pos:start="119:62" pos:end="119:77">xhci_runtime_ops</name></expr></argument>, <argument pos:start="119:80" pos:end="119:83"><expr pos:start="119:80" pos:end="119:83"><name pos:start="119:80" pos:end="119:83">xhci</name></expr></argument>,

                          <argument pos:start="121:27" pos:end="121:35"><expr pos:start="121:27" pos:end="121:35"><literal type="string" pos:start="121:27" pos:end="121:35">"runtime"</literal></expr></argument>, <argument pos:start="121:38" pos:end="121:48"><expr pos:start="121:38" pos:end="121:48"><name pos:start="121:38" pos:end="121:48">LEN_RUNTIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="125:52"><expr pos:start="123:5" pos:end="125:51"><call pos:start="123:5" pos:end="125:51"><name pos:start="123:5" pos:end="123:25">memory_region_init_io</name><argument_list pos:start="123:26" pos:end="125:51">(<argument pos:start="123:27" pos:end="123:45"><expr pos:start="123:27" pos:end="123:45"><operator pos:start="123:27" pos:end="123:27">&amp;</operator><name pos:start="123:28" pos:end="123:45"><name pos:start="123:28" pos:end="123:31">xhci</name><operator pos:start="123:32" pos:end="123:33">-&gt;</operator><name pos:start="123:34" pos:end="123:45">mem_doorbell</name></name></expr></argument>, <argument pos:start="123:48" pos:end="123:59"><expr pos:start="123:48" pos:end="123:59"><call pos:start="123:48" pos:end="123:59"><name pos:start="123:48" pos:end="123:53">OBJECT</name><argument_list pos:start="123:54" pos:end="123:59">(<argument pos:start="123:55" pos:end="123:58"><expr pos:start="123:55" pos:end="123:58"><name pos:start="123:55" pos:end="123:58">xhci</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="123:62" pos:end="123:79"><expr pos:start="123:62" pos:end="123:79"><operator pos:start="123:62" pos:end="123:62">&amp;</operator><name pos:start="123:63" pos:end="123:79">xhci_doorbell_ops</name></expr></argument>, <argument pos:start="123:82" pos:end="123:85"><expr pos:start="123:82" pos:end="123:85"><name pos:start="123:82" pos:end="123:85">xhci</name></expr></argument>,

                          <argument pos:start="125:27" pos:end="125:36"><expr pos:start="125:27" pos:end="125:36"><literal type="string" pos:start="125:27" pos:end="125:36">"doorbell"</literal></expr></argument>, <argument pos:start="125:39" pos:end="125:50"><expr pos:start="125:39" pos:end="125:50"><name pos:start="125:39" pos:end="125:50">LEN_DOORBELL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="129:5" pos:end="129:74"><expr pos:start="129:5" pos:end="129:73"><call pos:start="129:5" pos:end="129:73"><name pos:start="129:5" pos:end="129:31">memory_region_add_subregion</name><argument_list pos:start="129:32" pos:end="129:73">(<argument pos:start="129:33" pos:end="129:42"><expr pos:start="129:33" pos:end="129:42"><operator pos:start="129:33" pos:end="129:33">&amp;</operator><name pos:start="129:34" pos:end="129:42"><name pos:start="129:34" pos:end="129:37">xhci</name><operator pos:start="129:38" pos:end="129:39">-&gt;</operator><name pos:start="129:40" pos:end="129:42">mem</name></name></expr></argument>, <argument pos:start="129:45" pos:end="129:45"><expr pos:start="129:45" pos:end="129:45"><literal type="number" pos:start="129:45" pos:end="129:45">0</literal></expr></argument>,            <argument pos:start="129:59" pos:end="129:72"><expr pos:start="129:59" pos:end="129:72"><operator pos:start="129:59" pos:end="129:59">&amp;</operator><name pos:start="129:60" pos:end="129:72"><name pos:start="129:60" pos:end="129:63">xhci</name><operator pos:start="129:64" pos:end="129:65">-&gt;</operator><name pos:start="129:66" pos:end="129:72">mem_cap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:75"><expr pos:start="131:5" pos:end="131:74"><call pos:start="131:5" pos:end="131:74"><name pos:start="131:5" pos:end="131:31">memory_region_add_subregion</name><argument_list pos:start="131:32" pos:end="131:74">(<argument pos:start="131:33" pos:end="131:42"><expr pos:start="131:33" pos:end="131:42"><operator pos:start="131:33" pos:end="131:33">&amp;</operator><name pos:start="131:34" pos:end="131:42"><name pos:start="131:34" pos:end="131:37">xhci</name><operator pos:start="131:38" pos:end="131:39">-&gt;</operator><name pos:start="131:40" pos:end="131:42">mem</name></name></expr></argument>, <argument pos:start="131:45" pos:end="131:52"><expr pos:start="131:45" pos:end="131:52"><name pos:start="131:45" pos:end="131:52">OFF_OPER</name></expr></argument>,     <argument pos:start="131:59" pos:end="131:73"><expr pos:start="131:59" pos:end="131:73"><operator pos:start="131:59" pos:end="131:59">&amp;</operator><name pos:start="131:60" pos:end="131:73"><name pos:start="131:60" pos:end="131:63">xhci</name><operator pos:start="131:64" pos:end="131:65">-&gt;</operator><name pos:start="131:66" pos:end="131:73">mem_oper</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:78"><expr pos:start="133:5" pos:end="133:77"><call pos:start="133:5" pos:end="133:77"><name pos:start="133:5" pos:end="133:31">memory_region_add_subregion</name><argument_list pos:start="133:32" pos:end="133:77">(<argument pos:start="133:33" pos:end="133:42"><expr pos:start="133:33" pos:end="133:42"><operator pos:start="133:33" pos:end="133:33">&amp;</operator><name pos:start="133:34" pos:end="133:42"><name pos:start="133:34" pos:end="133:37">xhci</name><operator pos:start="133:38" pos:end="133:39">-&gt;</operator><name pos:start="133:40" pos:end="133:42">mem</name></name></expr></argument>, <argument pos:start="133:45" pos:end="133:55"><expr pos:start="133:45" pos:end="133:55"><name pos:start="133:45" pos:end="133:55">OFF_RUNTIME</name></expr></argument>,  <argument pos:start="133:59" pos:end="133:76"><expr pos:start="133:59" pos:end="133:76"><operator pos:start="133:59" pos:end="133:59">&amp;</operator><name pos:start="133:60" pos:end="133:76"><name pos:start="133:60" pos:end="133:63">xhci</name><operator pos:start="133:64" pos:end="133:65">-&gt;</operator><name pos:start="133:66" pos:end="133:76">mem_runtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:79"><expr pos:start="135:5" pos:end="135:78"><call pos:start="135:5" pos:end="135:78"><name pos:start="135:5" pos:end="135:31">memory_region_add_subregion</name><argument_list pos:start="135:32" pos:end="135:78">(<argument pos:start="135:33" pos:end="135:42"><expr pos:start="135:33" pos:end="135:42"><operator pos:start="135:33" pos:end="135:33">&amp;</operator><name pos:start="135:34" pos:end="135:42"><name pos:start="135:34" pos:end="135:37">xhci</name><operator pos:start="135:38" pos:end="135:39">-&gt;</operator><name pos:start="135:40" pos:end="135:42">mem</name></name></expr></argument>, <argument pos:start="135:45" pos:end="135:56"><expr pos:start="135:45" pos:end="135:56"><name pos:start="135:45" pos:end="135:56">OFF_DOORBELL</name></expr></argument>, <argument pos:start="135:59" pos:end="135:77"><expr pos:start="135:59" pos:end="135:77"><operator pos:start="135:59" pos:end="135:59">&amp;</operator><name pos:start="135:60" pos:end="135:77"><name pos:start="135:60" pos:end="135:63">xhci</name><operator pos:start="135:64" pos:end="135:65">-&gt;</operator><name pos:start="135:66" pos:end="135:77">mem_doorbell</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="139:5" pos:end="153:5">for <control pos:start="139:9" pos:end="139:40">(<init pos:start="139:10" pos:end="139:15"><expr pos:start="139:10" pos:end="139:14"><name pos:start="139:10" pos:end="139:10">i</name> <operator pos:start="139:12" pos:end="139:12">=</operator> <literal type="number" pos:start="139:14" pos:end="139:14">0</literal></expr>;</init> <condition pos:start="139:17" pos:end="139:35"><expr pos:start="139:17" pos:end="139:34"><name pos:start="139:17" pos:end="139:17">i</name> <operator pos:start="139:19" pos:end="139:19">&lt;</operator> <name pos:start="139:21" pos:end="139:34"><name pos:start="139:21" pos:end="139:24">xhci</name><operator pos:start="139:25" pos:end="139:26">-&gt;</operator><name pos:start="139:27" pos:end="139:34">numports</name></name></expr>;</condition> <incr pos:start="139:37" pos:end="139:39"><expr pos:start="139:37" pos:end="139:39"><name pos:start="139:37" pos:end="139:37">i</name><operator pos:start="139:38" pos:end="139:39">++</operator></expr></incr>)</control> <block pos:start="139:42" pos:end="153:5">{<block_content pos:start="141:9" pos:end="151:68">

        <decl_stmt pos:start="141:9" pos:end="141:41"><decl pos:start="141:9" pos:end="141:40"><type pos:start="141:9" pos:end="141:18"><name pos:start="141:9" pos:end="141:16">XHCIPort</name> <modifier pos:start="141:18" pos:end="141:18">*</modifier></type><name pos:start="141:19" pos:end="141:22">port</name> <init pos:start="141:24" pos:end="141:40">= <expr pos:start="141:26" pos:end="141:40"><operator pos:start="141:26" pos:end="141:26">&amp;</operator><name pos:start="141:27" pos:end="141:40"><name pos:start="141:27" pos:end="141:30">xhci</name><operator pos:start="141:31" pos:end="141:32">-&gt;</operator><name pos:start="141:33" pos:end="141:37">ports</name><index pos:start="141:38" pos:end="141:40">[<expr pos:start="141:39" pos:end="141:39"><name pos:start="141:39" pos:end="141:39">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="143:9" pos:end="143:54"><decl pos:start="143:9" pos:end="143:53"><type pos:start="143:9" pos:end="143:16"><name pos:start="143:9" pos:end="143:16">uint32_t</name></type> <name pos:start="143:18" pos:end="143:23">offset</name> <init pos:start="143:25" pos:end="143:53">= <expr pos:start="143:27" pos:end="143:53"><name pos:start="143:27" pos:end="143:34">OFF_OPER</name> <operator pos:start="143:36" pos:end="143:36">+</operator> <literal type="number" pos:start="143:38" pos:end="143:44">0x400</literal> <operator pos:start="143:44" pos:end="143:44">+</operator> <literal type="number" pos:start="143:46" pos:end="143:49">0x10</literal> <operator pos:start="143:51" pos:end="143:51">*</operator> <name pos:start="143:53" pos:end="143:53">i</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:26"><expr pos:start="145:9" pos:end="145:25"><name pos:start="145:9" pos:end="145:18"><name pos:start="145:9" pos:end="145:12">port</name><operator pos:start="145:13" pos:end="145:14">-&gt;</operator><name pos:start="145:15" pos:end="145:18">xhci</name></name> <operator pos:start="145:20" pos:end="145:20">=</operator> <name pos:start="145:22" pos:end="145:25">xhci</name></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="149:48"><expr pos:start="147:9" pos:end="149:47"><call pos:start="147:9" pos:end="149:47"><name pos:start="147:9" pos:end="147:29">memory_region_init_io</name><argument_list pos:start="147:30" pos:end="149:47">(<argument pos:start="147:31" pos:end="147:40"><expr pos:start="147:31" pos:end="147:40"><operator pos:start="147:31" pos:end="147:31">&amp;</operator><name pos:start="147:32" pos:end="147:40"><name pos:start="147:32" pos:end="147:35">port</name><operator pos:start="147:36" pos:end="147:37">-&gt;</operator><name pos:start="147:38" pos:end="147:40">mem</name></name></expr></argument>, <argument pos:start="147:43" pos:end="147:54"><expr pos:start="147:43" pos:end="147:54"><call pos:start="147:43" pos:end="147:54"><name pos:start="147:43" pos:end="147:48">OBJECT</name><argument_list pos:start="147:49" pos:end="147:54">(<argument pos:start="147:50" pos:end="147:53"><expr pos:start="147:50" pos:end="147:53"><name pos:start="147:50" pos:end="147:53">xhci</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="147:57" pos:end="147:70"><expr pos:start="147:57" pos:end="147:70"><operator pos:start="147:57" pos:end="147:57">&amp;</operator><name pos:start="147:58" pos:end="147:70">xhci_port_ops</name></expr></argument>, <argument pos:start="147:73" pos:end="147:76"><expr pos:start="147:73" pos:end="147:76"><name pos:start="147:73" pos:end="147:76">port</name></expr></argument>,

                              <argument pos:start="149:31" pos:end="149:40"><expr pos:start="149:31" pos:end="149:40"><name pos:start="149:31" pos:end="149:40"><name pos:start="149:31" pos:end="149:34">port</name><operator pos:start="149:35" pos:end="149:36">-&gt;</operator><name pos:start="149:37" pos:end="149:40">name</name></name></expr></argument>, <argument pos:start="149:43" pos:end="149:46"><expr pos:start="149:43" pos:end="149:46"><literal type="number" pos:start="149:43" pos:end="149:46">0x10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:68"><expr pos:start="151:9" pos:end="151:67"><call pos:start="151:9" pos:end="151:67"><name pos:start="151:9" pos:end="151:35">memory_region_add_subregion</name><argument_list pos:start="151:36" pos:end="151:67">(<argument pos:start="151:37" pos:end="151:46"><expr pos:start="151:37" pos:end="151:46"><operator pos:start="151:37" pos:end="151:37">&amp;</operator><name pos:start="151:38" pos:end="151:46"><name pos:start="151:38" pos:end="151:41">xhci</name><operator pos:start="151:42" pos:end="151:43">-&gt;</operator><name pos:start="151:44" pos:end="151:46">mem</name></name></expr></argument>, <argument pos:start="151:49" pos:end="151:54"><expr pos:start="151:49" pos:end="151:54"><name pos:start="151:49" pos:end="151:54">offset</name></expr></argument>, <argument pos:start="151:57" pos:end="151:66"><expr pos:start="151:57" pos:end="151:66"><operator pos:start="151:57" pos:end="151:57">&amp;</operator><name pos:start="151:58" pos:end="151:66"><name pos:start="151:58" pos:end="151:61">port</name><operator pos:start="151:62" pos:end="151:63">-&gt;</operator><name pos:start="151:64" pos:end="151:66">mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="157:5" pos:end="161:33"><expr pos:start="157:5" pos:end="161:32"><call pos:start="157:5" pos:end="161:32"><name pos:start="157:5" pos:end="157:20">pci_register_bar</name><argument_list pos:start="157:21" pos:end="161:32">(<argument pos:start="157:22" pos:end="157:24"><expr pos:start="157:22" pos:end="157:24"><name pos:start="157:22" pos:end="157:24">dev</name></expr></argument>, <argument pos:start="157:27" pos:end="157:27"><expr pos:start="157:27" pos:end="157:27"><literal type="number" pos:start="157:27" pos:end="157:27">0</literal></expr></argument>,

                     <argument pos:start="159:22" pos:end="159:79"><expr pos:start="159:22" pos:end="159:79"><name pos:start="159:22" pos:end="159:50">PCI_BASE_ADDRESS_SPACE_MEMORY</name><operator pos:start="159:51" pos:end="159:51">|</operator><name pos:start="159:52" pos:end="159:79">PCI_BASE_ADDRESS_MEM_TYPE_64</name></expr></argument>,

                     <argument pos:start="161:22" pos:end="161:31"><expr pos:start="161:22" pos:end="161:31"><operator pos:start="161:22" pos:end="161:22">&amp;</operator><name pos:start="161:23" pos:end="161:31"><name pos:start="161:23" pos:end="161:26">xhci</name><operator pos:start="161:27" pos:end="161:28">-&gt;</operator><name pos:start="161:29" pos:end="161:31">mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="165:5" pos:end="173:5"><if pos:start="165:5" pos:end="173:5">if <condition pos:start="165:8" pos:end="167:57">(<expr pos:start="165:9" pos:end="167:56"><call pos:start="165:9" pos:end="165:36"><name pos:start="165:9" pos:end="165:26">pci_bus_is_express</name><argument_list pos:start="165:27" pos:end="165:36">(<argument pos:start="165:28" pos:end="165:35"><expr pos:start="165:28" pos:end="165:35"><name pos:start="165:28" pos:end="165:35"><name pos:start="165:28" pos:end="165:30">dev</name><operator pos:start="165:31" pos:end="165:32">-&gt;</operator><name pos:start="165:33" pos:end="165:35">bus</name></name></expr></argument>)</argument_list></call> <operator pos:start="165:38" pos:end="165:39">||</operator>

        <call pos:start="167:9" pos:end="167:56"><name pos:start="167:9" pos:end="167:21">xhci_get_flag</name><argument_list pos:start="167:22" pos:end="167:56">(<argument pos:start="167:23" pos:end="167:26"><expr pos:start="167:23" pos:end="167:26"><name pos:start="167:23" pos:end="167:26">xhci</name></expr></argument>, <argument pos:start="167:29" pos:end="167:55"><expr pos:start="167:29" pos:end="167:55"><name pos:start="167:29" pos:end="167:55">XHCI_FLAG_FORCE_PCIE_ENDCAP</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="167:59" pos:end="173:5">{<block_content pos:start="169:9" pos:end="171:25">

        <expr_stmt pos:start="169:9" pos:end="169:48"><expr pos:start="169:9" pos:end="169:47"><name pos:start="169:9" pos:end="169:11">ret</name> <operator pos:start="169:13" pos:end="169:13">=</operator> <call pos:start="169:15" pos:end="169:47"><name pos:start="169:15" pos:end="169:36">pcie_endpoint_cap_init</name><argument_list pos:start="169:37" pos:end="169:47">(<argument pos:start="169:38" pos:end="169:40"><expr pos:start="169:38" pos:end="169:40"><name pos:start="169:38" pos:end="169:40">dev</name></expr></argument>, <argument pos:start="169:43" pos:end="169:46"><expr pos:start="169:43" pos:end="169:46"><literal type="number" pos:start="169:43" pos:end="169:46">0xa0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:25"><expr pos:start="171:9" pos:end="171:24"><call pos:start="171:9" pos:end="171:24"><name pos:start="171:9" pos:end="171:14">assert</name><argument_list pos:start="171:15" pos:end="171:24">(<argument pos:start="171:16" pos:end="171:23"><expr pos:start="171:16" pos:end="171:23"><name pos:start="171:16" pos:end="171:18">ret</name> <operator pos:start="171:20" pos:end="171:21">&gt;=</operator> <literal type="number" pos:start="171:23" pos:end="171:23">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="177:5" pos:end="189:5"><if pos:start="177:5" pos:end="189:5">if <condition pos:start="177:8" pos:end="177:38">(<expr pos:start="177:9" pos:end="177:37"><name pos:start="177:9" pos:end="177:18"><name pos:start="177:9" pos:end="177:12">xhci</name><operator pos:start="177:13" pos:end="177:14">-&gt;</operator><name pos:start="177:15" pos:end="177:18">msix</name></name> <operator pos:start="177:20" pos:end="177:21">!=</operator> <name pos:start="177:23" pos:end="177:37">ON_OFF_AUTO_OFF</name></expr>)</condition> <block pos:start="177:40" pos:end="189:5">{<block_content pos:start="181:9" pos:end="187:24">

        <comment type="block" pos:start="179:9" pos:end="179:35">/* TODO check for errors */</comment>

        <expr_stmt pos:start="181:9" pos:end="187:24"><expr pos:start="181:9" pos:end="187:23"><call pos:start="181:9" pos:end="187:23"><name pos:start="181:9" pos:end="181:17">msix_init</name><argument_list pos:start="181:18" pos:end="187:23">(<argument pos:start="181:19" pos:end="181:21"><expr pos:start="181:19" pos:end="181:21"><name pos:start="181:19" pos:end="181:21">dev</name></expr></argument>, <argument pos:start="181:24" pos:end="181:37"><expr pos:start="181:24" pos:end="181:37"><name pos:start="181:24" pos:end="181:37"><name pos:start="181:24" pos:end="181:27">xhci</name><operator pos:start="181:28" pos:end="181:29">-&gt;</operator><name pos:start="181:30" pos:end="181:37">numintrs</name></name></expr></argument>,

                  <argument pos:start="183:19" pos:end="183:28"><expr pos:start="183:19" pos:end="183:28"><operator pos:start="183:19" pos:end="183:19">&amp;</operator><name pos:start="183:20" pos:end="183:28"><name pos:start="183:20" pos:end="183:23">xhci</name><operator pos:start="183:24" pos:end="183:25">-&gt;</operator><name pos:start="183:26" pos:end="183:28">mem</name></name></expr></argument>, <argument pos:start="183:31" pos:end="183:31"><expr pos:start="183:31" pos:end="183:31"><literal type="number" pos:start="183:31" pos:end="183:31">0</literal></expr></argument>, <argument pos:start="183:34" pos:end="183:47"><expr pos:start="183:34" pos:end="183:47"><name pos:start="183:34" pos:end="183:47">OFF_MSIX_TABLE</name></expr></argument>,

                  <argument pos:start="185:19" pos:end="185:28"><expr pos:start="185:19" pos:end="185:28"><operator pos:start="185:19" pos:end="185:19">&amp;</operator><name pos:start="185:20" pos:end="185:28"><name pos:start="185:20" pos:end="185:23">xhci</name><operator pos:start="185:24" pos:end="185:25">-&gt;</operator><name pos:start="185:26" pos:end="185:28">mem</name></name></expr></argument>, <argument pos:start="185:31" pos:end="185:31"><expr pos:start="185:31" pos:end="185:31"><literal type="number" pos:start="185:31" pos:end="185:31">0</literal></expr></argument>, <argument pos:start="185:34" pos:end="185:45"><expr pos:start="185:34" pos:end="185:45"><name pos:start="185:34" pos:end="185:45">OFF_MSIX_PBA</name></expr></argument>,

                  <argument pos:start="187:19" pos:end="187:22"><expr pos:start="187:19" pos:end="187:22"><literal type="number" pos:start="187:19" pos:end="187:22">0x90</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
