<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6216.c" pos:tabs="8"><function pos:start="1:1" pos:end="223:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">av_cold</name> <name pos:start="1:16" pos:end="1:18">int</name></type> <name pos:start="1:20" pos:end="1:38">fdk_aac_decode_init</name><parameter_list pos:start="1:39" pos:end="1:61">(<parameter pos:start="1:40" pos:end="1:60"><decl pos:start="1:40" pos:end="1:60"><type pos:start="1:40" pos:end="1:55"><name pos:start="1:40" pos:end="1:53">AVCodecContext</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:60">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="223:1">{<block_content pos:start="5:5" pos:end="221:15">

    <decl_stmt pos:start="5:5" pos:end="5:43"><decl pos:start="5:5" pos:end="5:42"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:20">FDKAACDecContext</name> <modifier pos:start="5:22" pos:end="5:22">*</modifier></type><name pos:start="5:23" pos:end="5:23">s</name> <init pos:start="5:25" pos:end="5:42">= <expr pos:start="5:27" pos:end="5:42"><name pos:start="5:27" pos:end="5:42"><name pos:start="5:27" pos:end="5:31">avctx</name><operator pos:start="5:32" pos:end="5:33">-&gt;</operator><name pos:start="5:34" pos:end="5:42">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:26"><decl pos:start="7:5" pos:end="7:25"><type pos:start="7:5" pos:end="7:21"><name pos:start="7:5" pos:end="7:21">AAC_DECODER_ERROR</name></type> <name pos:start="7:23" pos:end="7:25">err</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:85"><expr pos:start="13:5" pos:end="13:84"><name pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:5">s</name><operator pos:start="13:6" pos:end="13:7">-&gt;</operator><name pos:start="13:8" pos:end="13:13">handle</name></name> <operator pos:start="13:15" pos:end="13:15">=</operator> <call pos:start="13:17" pos:end="13:84"><name pos:start="13:17" pos:end="13:31">aacDecoder_Open</name><argument_list pos:start="13:32" pos:end="13:84">(<argument pos:start="13:33" pos:end="13:80"><expr pos:start="13:33" pos:end="13:80"><ternary pos:start="13:33" pos:end="13:80"><condition pos:start="13:33" pos:end="13:55"><expr pos:start="13:33" pos:end="13:53"><name pos:start="13:33" pos:end="13:53"><name pos:start="13:33" pos:end="13:37">avctx</name><operator pos:start="13:38" pos:end="13:39">-&gt;</operator><name pos:start="13:40" pos:end="13:53">extradata_size</name></name></expr> ?</condition><then pos:start="13:57" pos:end="13:66"> <expr pos:start="13:57" pos:end="13:66"><name pos:start="13:57" pos:end="13:66">TT_MP4_RAW</name></expr> </then><else pos:start="13:68" pos:end="13:80">: <expr pos:start="13:70" pos:end="13:80"><name pos:start="13:70" pos:end="13:80">TT_MP4_ADTS</name></expr></else></ternary></expr></argument>, <argument pos:start="13:83" pos:end="13:83"><expr pos:start="13:83" pos:end="13:83"><literal type="number" pos:start="13:83" pos:end="13:83">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="21:5"><if pos:start="15:5" pos:end="21:5">if <condition pos:start="15:8" pos:end="15:19">(<expr pos:start="15:9" pos:end="15:18"><operator pos:start="15:9" pos:end="15:9">!</operator><name pos:start="15:10" pos:end="15:18"><name pos:start="15:10" pos:end="15:10">s</name><operator pos:start="15:11" pos:end="15:12">-&gt;</operator><name pos:start="15:13" pos:end="15:18">handle</name></name></expr>)</condition> <block pos:start="15:21" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:31">

        <expr_stmt pos:start="17:9" pos:end="17:63"><expr pos:start="17:9" pos:end="17:62"><call pos:start="17:9" pos:end="17:62"><name pos:start="17:9" pos:end="17:14">av_log</name><argument_list pos:start="17:15" pos:end="17:62">(<argument pos:start="17:16" pos:end="17:20"><expr pos:start="17:16" pos:end="17:20"><name pos:start="17:16" pos:end="17:20">avctx</name></expr></argument>, <argument pos:start="17:23" pos:end="17:34"><expr pos:start="17:23" pos:end="17:34"><name pos:start="17:23" pos:end="17:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="17:37" pos:end="17:61"><expr pos:start="17:37" pos:end="17:61"><literal type="string" pos:start="17:37" pos:end="17:61">"Error opening decoder\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:31">return <expr pos:start="19:16" pos:end="19:30"><name pos:start="19:16" pos:end="19:30">AVERROR_UNKNOWN</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="25:5" pos:end="37:5"><if pos:start="25:5" pos:end="37:5">if <condition pos:start="25:8" pos:end="25:30">(<expr pos:start="25:9" pos:end="25:29"><name pos:start="25:9" pos:end="25:29"><name pos:start="25:9" pos:end="25:13">avctx</name><operator pos:start="25:14" pos:end="25:15">-&gt;</operator><name pos:start="25:16" pos:end="25:29">extradata_size</name></name></expr>)</condition> <block pos:start="25:32" pos:end="37:5">{<block_content pos:start="27:9" pos:end="35:9">

        <if_stmt pos:start="27:9" pos:end="35:9"><if pos:start="27:9" pos:end="35:9">if <condition pos:start="27:12" pos:end="29:79">(<expr pos:start="27:13" pos:end="29:78"><operator pos:start="27:13" pos:end="27:13">(</operator><name pos:start="27:14" pos:end="27:16">err</name> <operator pos:start="27:18" pos:end="27:18">=</operator> <call pos:start="27:20" pos:end="29:63"><name pos:start="27:20" pos:end="27:39">aacDecoder_ConfigRaw</name><argument_list pos:start="27:40" pos:end="29:63">(<argument pos:start="27:41" pos:end="27:49"><expr pos:start="27:41" pos:end="27:49"><name pos:start="27:41" pos:end="27:49"><name pos:start="27:41" pos:end="27:41">s</name><operator pos:start="27:42" pos:end="27:43">-&gt;</operator><name pos:start="27:44" pos:end="27:49">handle</name></name></expr></argument>, <argument pos:start="27:52" pos:end="27:68"><expr pos:start="27:52" pos:end="27:68"><operator pos:start="27:52" pos:end="27:52">&amp;</operator><name pos:start="27:53" pos:end="27:68"><name pos:start="27:53" pos:end="27:57">avctx</name><operator pos:start="27:58" pos:end="27:59">-&gt;</operator><name pos:start="27:60" pos:end="27:68">extradata</name></name></expr></argument>,

                                        <argument pos:start="29:41" pos:end="29:62"><expr pos:start="29:41" pos:end="29:62"><operator pos:start="29:41" pos:end="29:41">&amp;</operator><name pos:start="29:42" pos:end="29:62"><name pos:start="29:42" pos:end="29:46">avctx</name><operator pos:start="29:47" pos:end="29:48">-&gt;</operator><name pos:start="29:49" pos:end="29:62">extradata_size</name></name></expr></argument>)</argument_list></call><operator pos:start="29:64" pos:end="29:64">)</operator> <operator pos:start="29:66" pos:end="29:67">!=</operator> <name pos:start="29:69" pos:end="29:78">AAC_DEC_OK</name></expr>)</condition> <block pos:start="29:81" pos:end="35:9">{<block_content pos:start="31:13" pos:end="33:39">

            <expr_stmt pos:start="31:13" pos:end="31:69"><expr pos:start="31:13" pos:end="31:68"><call pos:start="31:13" pos:end="31:68"><name pos:start="31:13" pos:end="31:18">av_log</name><argument_list pos:start="31:19" pos:end="31:68">(<argument pos:start="31:20" pos:end="31:24"><expr pos:start="31:20" pos:end="31:24"><name pos:start="31:20" pos:end="31:24">avctx</name></expr></argument>, <argument pos:start="31:27" pos:end="31:38"><expr pos:start="31:27" pos:end="31:38"><name pos:start="31:27" pos:end="31:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="31:41" pos:end="31:67"><expr pos:start="31:41" pos:end="31:67"><literal type="string" pos:start="31:41" pos:end="31:67">"Unable to set extradata\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="33:13" pos:end="33:39">return <expr pos:start="33:20" pos:end="33:38"><name pos:start="33:20" pos:end="33:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="41:5" pos:end="49:5"><if pos:start="41:5" pos:end="49:5">if <condition pos:start="41:8" pos:end="43:69">(<expr pos:start="41:9" pos:end="43:68"><operator pos:start="41:9" pos:end="41:9">(</operator><name pos:start="41:10" pos:end="41:12">err</name> <operator pos:start="41:14" pos:end="41:14">=</operator> <call pos:start="41:16" pos:end="43:53"><name pos:start="41:16" pos:end="41:34">aacDecoder_SetParam</name><argument_list pos:start="41:35" pos:end="43:53">(<argument pos:start="41:36" pos:end="41:44"><expr pos:start="41:36" pos:end="41:44"><name pos:start="41:36" pos:end="41:44"><name pos:start="41:36" pos:end="41:36">s</name><operator pos:start="41:37" pos:end="41:38">-&gt;</operator><name pos:start="41:39" pos:end="41:44">handle</name></name></expr></argument>, <argument pos:start="41:47" pos:end="41:64"><expr pos:start="41:47" pos:end="41:64"><name pos:start="41:47" pos:end="41:64">AAC_CONCEAL_METHOD</name></expr></argument>,

                                   <argument pos:start="43:36" pos:end="43:52"><expr pos:start="43:36" pos:end="43:52"><name pos:start="43:36" pos:end="43:52"><name pos:start="43:36" pos:end="43:36">s</name><operator pos:start="43:37" pos:end="43:38">-&gt;</operator><name pos:start="43:39" pos:end="43:52">conceal_method</name></name></expr></argument>)</argument_list></call><operator pos:start="43:54" pos:end="43:54">)</operator> <operator pos:start="43:56" pos:end="43:57">!=</operator> <name pos:start="43:59" pos:end="43:68">AAC_DEC_OK</name></expr>)</condition> <block pos:start="43:71" pos:end="49:5">{<block_content pos:start="45:9" pos:end="47:31">

        <expr_stmt pos:start="45:9" pos:end="45:80"><expr pos:start="45:9" pos:end="45:79"><call pos:start="45:9" pos:end="45:79"><name pos:start="45:9" pos:end="45:14">av_log</name><argument_list pos:start="45:15" pos:end="45:79">(<argument pos:start="45:16" pos:end="45:20"><expr pos:start="45:16" pos:end="45:20"><name pos:start="45:16" pos:end="45:20">avctx</name></expr></argument>, <argument pos:start="45:23" pos:end="45:34"><expr pos:start="45:23" pos:end="45:34"><name pos:start="45:23" pos:end="45:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="45:37" pos:end="45:78"><expr pos:start="45:37" pos:end="45:78"><literal type="string" pos:start="45:37" pos:end="45:78">"Unable to set error concealment method\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="47:9" pos:end="47:31">return <expr pos:start="47:16" pos:end="47:30"><name pos:start="47:16" pos:end="47:30">AVERROR_UNKNOWN</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="53:5" pos:end="123:5"><if pos:start="53:5" pos:end="123:5">if <condition pos:start="53:8" pos:end="55:61">(<expr pos:start="53:9" pos:end="55:60"><name pos:start="53:9" pos:end="53:37"><name pos:start="53:9" pos:end="53:13">avctx</name><operator pos:start="53:14" pos:end="53:15">-&gt;</operator><name pos:start="53:16" pos:end="53:37">request_channel_layout</name></name> <operator pos:start="53:39" pos:end="53:39">&gt;</operator> <literal type="number" pos:start="53:41" pos:end="53:41">0</literal> <operator pos:start="53:43" pos:end="53:44">&amp;&amp;</operator>

        <name pos:start="55:9" pos:end="55:37"><name pos:start="55:9" pos:end="55:13">avctx</name><operator pos:start="55:14" pos:end="55:15">-&gt;</operator><name pos:start="55:16" pos:end="55:37">request_channel_layout</name></name> <operator pos:start="55:39" pos:end="55:40">!=</operator> <name pos:start="55:42" pos:end="55:60">AV_CH_LAYOUT_NATIVE</name></expr>)</condition> <block pos:start="55:63" pos:end="123:5">{<block_content pos:start="57:9" pos:end="121:9">

        <decl_stmt pos:start="57:9" pos:end="57:34"><decl pos:start="57:9" pos:end="57:33"><type pos:start="57:9" pos:end="57:11"><name pos:start="57:9" pos:end="57:11">int</name></type> <name pos:start="57:13" pos:end="57:28">downmix_channels</name> <init pos:start="57:30" pos:end="57:33">= <expr pos:start="57:32" pos:end="57:33"><operator pos:start="57:32" pos:end="57:32">-</operator><literal type="number" pos:start="57:33" pos:end="57:33">1</literal></expr></init></decl>;</decl_stmt>



        <switch pos:start="61:9" pos:end="83:9">switch <condition pos:start="61:16" pos:end="61:46">(<expr pos:start="61:17" pos:end="61:45"><name pos:start="61:17" pos:end="61:45"><name pos:start="61:17" pos:end="61:21">avctx</name><operator pos:start="61:22" pos:end="61:23">-&gt;</operator><name pos:start="61:24" pos:end="61:45">request_channel_layout</name></name></expr>)</condition> <block pos:start="61:48" pos:end="83:9">{<block_content pos:start="63:9" pos:end="81:18">

        <case pos:start="63:9" pos:end="63:33">case <expr pos:start="63:14" pos:end="63:32"><name pos:start="63:14" pos:end="63:32">AV_CH_LAYOUT_STEREO</name></expr>:</case>

        <case pos:start="65:9" pos:end="65:41">case <expr pos:start="65:14" pos:end="65:40"><name pos:start="65:14" pos:end="65:40">AV_CH_LAYOUT_STEREO_DOWNMIX</name></expr>:</case>

            <expr_stmt pos:start="67:13" pos:end="67:33"><expr pos:start="67:13" pos:end="67:32"><name pos:start="67:13" pos:end="67:28">downmix_channels</name> <operator pos:start="67:30" pos:end="67:30">=</operator> <literal type="number" pos:start="67:32" pos:end="67:32">2</literal></expr>;</expr_stmt>

            <break pos:start="69:13" pos:end="69:18">break;</break>

        <case pos:start="71:9" pos:end="71:31">case <expr pos:start="71:14" pos:end="71:30"><name pos:start="71:14" pos:end="71:30">AV_CH_LAYOUT_MONO</name></expr>:</case>

            <expr_stmt pos:start="73:13" pos:end="73:33"><expr pos:start="73:13" pos:end="73:32"><name pos:start="73:13" pos:end="73:28">downmix_channels</name> <operator pos:start="73:30" pos:end="73:30">=</operator> <literal type="number" pos:start="73:32" pos:end="73:32">1</literal></expr>;</expr_stmt>

            <break pos:start="75:13" pos:end="75:18">break;</break>

        <default pos:start="77:9" pos:end="77:16">default:</default>

            <expr_stmt pos:start="79:13" pos:end="79:78"><expr pos:start="79:13" pos:end="79:77"><call pos:start="79:13" pos:end="79:77"><name pos:start="79:13" pos:end="79:18">av_log</name><argument_list pos:start="79:19" pos:end="79:77">(<argument pos:start="79:20" pos:end="79:24"><expr pos:start="79:20" pos:end="79:24"><name pos:start="79:20" pos:end="79:24">avctx</name></expr></argument>, <argument pos:start="79:27" pos:end="79:40"><expr pos:start="79:27" pos:end="79:40"><name pos:start="79:27" pos:end="79:40">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="79:43" pos:end="79:76"><expr pos:start="79:43" pos:end="79:76"><literal type="string" pos:start="79:43" pos:end="79:76">"Invalid request_channel_layout\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="81:13" pos:end="81:18">break;</break>

        </block_content>}</block></switch>



        <if_stmt pos:start="87:9" pos:end="121:9"><if pos:start="87:9" pos:end="121:9">if <condition pos:start="87:12" pos:end="87:35">(<expr pos:start="87:13" pos:end="87:34"><name pos:start="87:13" pos:end="87:28">downmix_channels</name> <operator pos:start="87:30" pos:end="87:31">!=</operator> <operator pos:start="87:33" pos:end="87:33">-</operator><literal type="number" pos:start="87:34" pos:end="87:34">1</literal></expr>)</condition> <block pos:start="87:37" pos:end="121:9">{<block_content pos:start="89:13" pos:end="119:13">

            <if_stmt pos:start="89:13" pos:end="119:13"><if pos:start="89:13" pos:end="95:13">if <condition pos:start="89:16" pos:end="91:68">(<expr pos:start="89:17" pos:end="91:67"><call pos:start="89:17" pos:end="91:53"><name pos:start="89:17" pos:end="89:35">aacDecoder_SetParam</name><argument_list pos:start="89:36" pos:end="91:53">(<argument pos:start="89:37" pos:end="89:45"><expr pos:start="89:37" pos:end="89:45"><name pos:start="89:37" pos:end="89:45"><name pos:start="89:37" pos:end="89:37">s</name><operator pos:start="89:38" pos:end="89:39">-&gt;</operator><name pos:start="89:40" pos:end="89:45">handle</name></name></expr></argument>, <argument pos:start="89:48" pos:end="89:74"><expr pos:start="89:48" pos:end="89:74"><name pos:start="89:48" pos:end="89:74">AAC_PCM_MAX_OUTPUT_CHANNELS</name></expr></argument>,

                                    <argument pos:start="91:37" pos:end="91:52"><expr pos:start="91:37" pos:end="91:52"><name pos:start="91:37" pos:end="91:52">downmix_channels</name></expr></argument>)</argument_list></call> <operator pos:start="91:55" pos:end="91:56">!=</operator> <name pos:start="91:58" pos:end="91:67">AAC_DEC_OK</name></expr>)</condition> <block pos:start="91:70" pos:end="95:13">{<block_content pos:start="93:16" pos:end="93:95">

               <expr_stmt pos:start="93:16" pos:end="93:95"><expr pos:start="93:16" pos:end="93:94"><call pos:start="93:16" pos:end="93:94"><name pos:start="93:16" pos:end="93:21">av_log</name><argument_list pos:start="93:22" pos:end="93:94">(<argument pos:start="93:23" pos:end="93:27"><expr pos:start="93:23" pos:end="93:27"><name pos:start="93:23" pos:end="93:27">avctx</name></expr></argument>, <argument pos:start="93:30" pos:end="93:43"><expr pos:start="93:30" pos:end="93:43"><name pos:start="93:30" pos:end="93:43">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="93:46" pos:end="93:93"><expr pos:start="93:46" pos:end="93:93"><literal type="string" pos:start="93:46" pos:end="93:93">"Unable to set output channels in the decoder\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="95:15" pos:end="119:13">else <block pos:start="95:20" pos:end="119:13">{<block_content pos:start="97:16" pos:end="117:16">

               <expr_stmt pos:start="97:16" pos:end="97:59"><expr pos:start="97:16" pos:end="97:58"><name pos:start="97:16" pos:end="97:28"><name pos:start="97:16" pos:end="97:16">s</name><operator pos:start="97:17" pos:end="97:18">-&gt;</operator><name pos:start="97:19" pos:end="97:28">anc_buffer</name></name> <operator pos:start="97:30" pos:end="97:30">=</operator> <call pos:start="97:32" pos:end="97:58"><name pos:start="97:32" pos:end="97:40">av_malloc</name><argument_list pos:start="97:41" pos:end="97:58">(<argument pos:start="97:42" pos:end="97:57"><expr pos:start="97:42" pos:end="97:57"><name pos:start="97:42" pos:end="97:57">DMX_ANC_BUFFSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

               <if_stmt pos:start="99:16" pos:end="107:16"><if pos:start="99:16" pos:end="107:16">if <condition pos:start="99:19" pos:end="99:34">(<expr pos:start="99:20" pos:end="99:33"><operator pos:start="99:20" pos:end="99:20">!</operator><name pos:start="99:21" pos:end="99:33"><name pos:start="99:21" pos:end="99:21">s</name><operator pos:start="99:22" pos:end="99:23">-&gt;</operator><name pos:start="99:24" pos:end="99:33">anc_buffer</name></name></expr>)</condition> <block pos:start="99:36" pos:end="107:16">{<block_content pos:start="101:20" pos:end="105:29">

                   <expr_stmt pos:start="101:20" pos:end="101:104"><expr pos:start="101:20" pos:end="101:103"><call pos:start="101:20" pos:end="101:103"><name pos:start="101:20" pos:end="101:25">av_log</name><argument_list pos:start="101:26" pos:end="101:103">(<argument pos:start="101:27" pos:end="101:31"><expr pos:start="101:27" pos:end="101:31"><name pos:start="101:27" pos:end="101:31">avctx</name></expr></argument>, <argument pos:start="101:34" pos:end="101:45"><expr pos:start="101:34" pos:end="101:45"><name pos:start="101:34" pos:end="101:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="101:48" pos:end="101:102"><expr pos:start="101:48" pos:end="101:102"><literal type="string" pos:start="101:48" pos:end="101:102">"Unable to allocate ancillary buffer for the decoder\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                   <expr_stmt pos:start="103:20" pos:end="103:41"><expr pos:start="103:20" pos:end="103:40"><name pos:start="103:20" pos:end="103:22">ret</name> <operator pos:start="103:24" pos:end="103:24">=</operator> <call pos:start="103:26" pos:end="103:40"><name pos:start="103:26" pos:end="103:32">AVERROR</name><argument_list pos:start="103:33" pos:end="103:40">(<argument pos:start="103:34" pos:end="103:39"><expr pos:start="103:34" pos:end="103:39"><name pos:start="103:34" pos:end="103:39">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                   <goto pos:start="105:20" pos:end="105:29">goto <name pos:start="105:25" pos:end="105:28">fail</name>;</goto>

               </block_content>}</block></if></if_stmt>

               <if_stmt pos:start="109:16" pos:end="117:16"><if pos:start="109:16" pos:end="117:16">if <condition pos:start="109:19" pos:end="109:86">(<expr pos:start="109:20" pos:end="109:85"><call pos:start="109:20" pos:end="109:85"><name pos:start="109:20" pos:end="109:41">aacDecoder_AncDataInit</name><argument_list pos:start="109:42" pos:end="109:85">(<argument pos:start="109:43" pos:end="109:51"><expr pos:start="109:43" pos:end="109:51"><name pos:start="109:43" pos:end="109:51"><name pos:start="109:43" pos:end="109:43">s</name><operator pos:start="109:44" pos:end="109:45">-&gt;</operator><name pos:start="109:46" pos:end="109:51">handle</name></name></expr></argument>, <argument pos:start="109:54" pos:end="109:66"><expr pos:start="109:54" pos:end="109:66"><name pos:start="109:54" pos:end="109:66"><name pos:start="109:54" pos:end="109:54">s</name><operator pos:start="109:55" pos:end="109:56">-&gt;</operator><name pos:start="109:57" pos:end="109:66">anc_buffer</name></name></expr></argument>, <argument pos:start="109:69" pos:end="109:84"><expr pos:start="109:69" pos:end="109:84"><name pos:start="109:69" pos:end="109:84">DMX_ANC_BUFFSIZE</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="109:88" pos:end="117:16">{<block_content pos:start="111:20" pos:end="115:29">

                   <expr_stmt pos:start="111:20" pos:end="111:111"><expr pos:start="111:20" pos:end="111:110"><call pos:start="111:20" pos:end="111:110"><name pos:start="111:20" pos:end="111:25">av_log</name><argument_list pos:start="111:26" pos:end="111:110">(<argument pos:start="111:27" pos:end="111:31"><expr pos:start="111:27" pos:end="111:31"><name pos:start="111:27" pos:end="111:31">avctx</name></expr></argument>, <argument pos:start="111:34" pos:end="111:45"><expr pos:start="111:34" pos:end="111:45"><name pos:start="111:34" pos:end="111:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="111:48" pos:end="111:109"><expr pos:start="111:48" pos:end="111:109"><literal type="string" pos:start="111:48" pos:end="111:109">"Unable to register downmix ancillary buffer in the decoder\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                   <expr_stmt pos:start="113:20" pos:end="113:41"><expr pos:start="113:20" pos:end="113:40"><name pos:start="113:20" pos:end="113:22">ret</name> <operator pos:start="113:24" pos:end="113:24">=</operator> <name pos:start="113:26" pos:end="113:40">AVERROR_UNKNOWN</name></expr>;</expr_stmt>

                   <goto pos:start="115:20" pos:end="115:29">goto <name pos:start="115:25" pos:end="115:28">fail</name>;</goto>

               </block_content>}</block></if></if_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="127:5" pos:end="137:5"><if pos:start="127:5" pos:end="137:5">if <condition pos:start="127:8" pos:end="127:27">(<expr pos:start="127:9" pos:end="127:26"><name pos:start="127:9" pos:end="127:20"><name pos:start="127:9" pos:end="127:9">s</name><operator pos:start="127:10" pos:end="127:11">-&gt;</operator><name pos:start="127:12" pos:end="127:20">drc_boost</name></name> <operator pos:start="127:22" pos:end="127:23">!=</operator> <operator pos:start="127:25" pos:end="127:25">-</operator><literal type="number" pos:start="127:26" pos:end="127:26">1</literal></expr>)</condition> <block pos:start="127:29" pos:end="137:5">{<block_content pos:start="129:9" pos:end="135:9">

        <if_stmt pos:start="129:9" pos:end="135:9"><if pos:start="129:9" pos:end="135:9">if <condition pos:start="129:12" pos:end="129:93">(<expr pos:start="129:13" pos:end="129:92"><call pos:start="129:13" pos:end="129:78"><name pos:start="129:13" pos:end="129:31">aacDecoder_SetParam</name><argument_list pos:start="129:32" pos:end="129:78">(<argument pos:start="129:33" pos:end="129:41"><expr pos:start="129:33" pos:end="129:41"><name pos:start="129:33" pos:end="129:41"><name pos:start="129:33" pos:end="129:33">s</name><operator pos:start="129:34" pos:end="129:35">-&gt;</operator><name pos:start="129:36" pos:end="129:41">handle</name></name></expr></argument>, <argument pos:start="129:44" pos:end="129:63"><expr pos:start="129:44" pos:end="129:63"><name pos:start="129:44" pos:end="129:63">AAC_DRC_BOOST_FACTOR</name></expr></argument>, <argument pos:start="129:66" pos:end="129:77"><expr pos:start="129:66" pos:end="129:77"><name pos:start="129:66" pos:end="129:77"><name pos:start="129:66" pos:end="129:66">s</name><operator pos:start="129:67" pos:end="129:68">-&gt;</operator><name pos:start="129:69" pos:end="129:77">drc_boost</name></name></expr></argument>)</argument_list></call> <operator pos:start="129:80" pos:end="129:81">!=</operator> <name pos:start="129:83" pos:end="129:92">AAC_DEC_OK</name></expr>)</condition> <block pos:start="129:95" pos:end="135:9">{<block_content pos:start="131:13" pos:end="133:35">

            <expr_stmt pos:start="131:13" pos:end="131:91"><expr pos:start="131:13" pos:end="131:90"><call pos:start="131:13" pos:end="131:90"><name pos:start="131:13" pos:end="131:18">av_log</name><argument_list pos:start="131:19" pos:end="131:90">(<argument pos:start="131:20" pos:end="131:24"><expr pos:start="131:20" pos:end="131:24"><name pos:start="131:20" pos:end="131:24">avctx</name></expr></argument>, <argument pos:start="131:27" pos:end="131:38"><expr pos:start="131:27" pos:end="131:38"><name pos:start="131:27" pos:end="131:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="131:41" pos:end="131:89"><expr pos:start="131:41" pos:end="131:89"><literal type="string" pos:start="131:41" pos:end="131:89">"Unable to set DRC boost factor in the decoder\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="133:13" pos:end="133:35">return <expr pos:start="133:20" pos:end="133:34"><name pos:start="133:20" pos:end="133:34">AVERROR_UNKNOWN</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="141:5" pos:end="151:5"><if pos:start="141:5" pos:end="151:5">if <condition pos:start="141:8" pos:end="141:25">(<expr pos:start="141:9" pos:end="141:24"><name pos:start="141:9" pos:end="141:18"><name pos:start="141:9" pos:end="141:9">s</name><operator pos:start="141:10" pos:end="141:11">-&gt;</operator><name pos:start="141:12" pos:end="141:18">drc_cut</name></name> <operator pos:start="141:20" pos:end="141:21">!=</operator> <operator pos:start="141:23" pos:end="141:23">-</operator><literal type="number" pos:start="141:24" pos:end="141:24">1</literal></expr>)</condition> <block pos:start="141:27" pos:end="151:5">{<block_content pos:start="143:9" pos:end="149:9">

        <if_stmt pos:start="143:9" pos:end="149:9"><if pos:start="143:9" pos:end="149:9">if <condition pos:start="143:12" pos:end="143:97">(<expr pos:start="143:13" pos:end="143:96"><call pos:start="143:13" pos:end="143:82"><name pos:start="143:13" pos:end="143:31">aacDecoder_SetParam</name><argument_list pos:start="143:32" pos:end="143:82">(<argument pos:start="143:33" pos:end="143:41"><expr pos:start="143:33" pos:end="143:41"><name pos:start="143:33" pos:end="143:41"><name pos:start="143:33" pos:end="143:33">s</name><operator pos:start="143:34" pos:end="143:35">-&gt;</operator><name pos:start="143:36" pos:end="143:41">handle</name></name></expr></argument>, <argument pos:start="143:44" pos:end="143:69"><expr pos:start="143:44" pos:end="143:69"><name pos:start="143:44" pos:end="143:69">AAC_DRC_ATTENUATION_FACTOR</name></expr></argument>, <argument pos:start="143:72" pos:end="143:81"><expr pos:start="143:72" pos:end="143:81"><name pos:start="143:72" pos:end="143:81"><name pos:start="143:72" pos:end="143:72">s</name><operator pos:start="143:73" pos:end="143:74">-&gt;</operator><name pos:start="143:75" pos:end="143:81">drc_cut</name></name></expr></argument>)</argument_list></call> <operator pos:start="143:84" pos:end="143:85">!=</operator> <name pos:start="143:87" pos:end="143:96">AAC_DEC_OK</name></expr>)</condition> <block pos:start="143:99" pos:end="149:9">{<block_content pos:start="145:13" pos:end="147:35">

            <expr_stmt pos:start="145:13" pos:end="145:97"><expr pos:start="145:13" pos:end="145:96"><call pos:start="145:13" pos:end="145:96"><name pos:start="145:13" pos:end="145:18">av_log</name><argument_list pos:start="145:19" pos:end="145:96">(<argument pos:start="145:20" pos:end="145:24"><expr pos:start="145:20" pos:end="145:24"><name pos:start="145:20" pos:end="145:24">avctx</name></expr></argument>, <argument pos:start="145:27" pos:end="145:38"><expr pos:start="145:27" pos:end="145:38"><name pos:start="145:27" pos:end="145:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="145:41" pos:end="145:95"><expr pos:start="145:41" pos:end="145:95"><literal type="string" pos:start="145:41" pos:end="145:95">"Unable to set DRC attenuation factor in the decoder\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="147:13" pos:end="147:35">return <expr pos:start="147:20" pos:end="147:34"><name pos:start="147:20" pos:end="147:34">AVERROR_UNKNOWN</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="155:5" pos:end="165:5"><if pos:start="155:5" pos:end="165:5">if <condition pos:start="155:8" pos:end="155:27">(<expr pos:start="155:9" pos:end="155:26"><name pos:start="155:9" pos:end="155:20"><name pos:start="155:9" pos:end="155:9">s</name><operator pos:start="155:10" pos:end="155:11">-&gt;</operator><name pos:start="155:12" pos:end="155:20">drc_level</name></name> <operator pos:start="155:22" pos:end="155:23">!=</operator> <operator pos:start="155:25" pos:end="155:25">-</operator><literal type="number" pos:start="155:26" pos:end="155:26">1</literal></expr>)</condition> <block pos:start="155:29" pos:end="165:5">{<block_content pos:start="157:9" pos:end="163:9">

        <if_stmt pos:start="157:9" pos:end="163:9"><if pos:start="157:9" pos:end="163:9">if <condition pos:start="157:12" pos:end="157:96">(<expr pos:start="157:13" pos:end="157:95"><call pos:start="157:13" pos:end="157:81"><name pos:start="157:13" pos:end="157:31">aacDecoder_SetParam</name><argument_list pos:start="157:32" pos:end="157:81">(<argument pos:start="157:33" pos:end="157:41"><expr pos:start="157:33" pos:end="157:41"><name pos:start="157:33" pos:end="157:41"><name pos:start="157:33" pos:end="157:33">s</name><operator pos:start="157:34" pos:end="157:35">-&gt;</operator><name pos:start="157:36" pos:end="157:41">handle</name></name></expr></argument>, <argument pos:start="157:44" pos:end="157:66"><expr pos:start="157:44" pos:end="157:66"><name pos:start="157:44" pos:end="157:66">AAC_DRC_REFERENCE_LEVEL</name></expr></argument>, <argument pos:start="157:69" pos:end="157:80"><expr pos:start="157:69" pos:end="157:80"><name pos:start="157:69" pos:end="157:80"><name pos:start="157:69" pos:end="157:69">s</name><operator pos:start="157:70" pos:end="157:71">-&gt;</operator><name pos:start="157:72" pos:end="157:80">drc_level</name></name></expr></argument>)</argument_list></call> <operator pos:start="157:83" pos:end="157:84">!=</operator> <name pos:start="157:86" pos:end="157:95">AAC_DEC_OK</name></expr>)</condition> <block pos:start="157:98" pos:end="163:9">{<block_content pos:start="159:13" pos:end="161:35">

            <expr_stmt pos:start="159:13" pos:end="159:94"><expr pos:start="159:13" pos:end="159:93"><call pos:start="159:13" pos:end="159:93"><name pos:start="159:13" pos:end="159:18">av_log</name><argument_list pos:start="159:19" pos:end="159:93">(<argument pos:start="159:20" pos:end="159:24"><expr pos:start="159:20" pos:end="159:24"><name pos:start="159:20" pos:end="159:24">avctx</name></expr></argument>, <argument pos:start="159:27" pos:end="159:38"><expr pos:start="159:27" pos:end="159:38"><name pos:start="159:27" pos:end="159:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="159:41" pos:end="159:92"><expr pos:start="159:41" pos:end="159:92"><literal type="string" pos:start="159:41" pos:end="159:92">"Unable to set DRC reference level in the decoder\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="161:13" pos:end="161:35">return <expr pos:start="161:20" pos:end="161:34"><name pos:start="161:20" pos:end="161:34">AVERROR_UNKNOWN</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="169:5" pos:end="184:0"><if pos:start="169:5" pos:end="184:0">if <condition pos:start="169:8" pos:end="169:27">(<expr pos:start="169:9" pos:end="169:26"><name pos:start="169:9" pos:end="169:20"><name pos:start="169:9" pos:end="169:9">s</name><operator pos:start="169:10" pos:end="169:11">-&gt;</operator><name pos:start="169:12" pos:end="169:20">drc_heavy</name></name> <operator pos:start="169:22" pos:end="169:23">!=</operator> <operator pos:start="169:25" pos:end="169:25">-</operator><literal type="number" pos:start="169:26" pos:end="169:26">1</literal></expr>)</condition> <block pos:start="169:29" pos:end="184:0">{<block_content pos:start="171:9" pos:end="177:9">

        <if_stmt pos:start="171:9" pos:end="177:9"><if pos:start="171:9" pos:end="177:9">if <condition pos:start="171:12" pos:end="171:98">(<expr pos:start="171:13" pos:end="171:97"><call pos:start="171:13" pos:end="171:83"><name pos:start="171:13" pos:end="171:31">aacDecoder_SetParam</name><argument_list pos:start="171:32" pos:end="171:83">(<argument pos:start="171:33" pos:end="171:41"><expr pos:start="171:33" pos:end="171:41"><name pos:start="171:33" pos:end="171:41"><name pos:start="171:33" pos:end="171:33">s</name><operator pos:start="171:34" pos:end="171:35">-&gt;</operator><name pos:start="171:36" pos:end="171:41">handle</name></name></expr></argument>, <argument pos:start="171:44" pos:end="171:68"><expr pos:start="171:44" pos:end="171:68"><name pos:start="171:44" pos:end="171:68">AAC_DRC_HEAVY_COMPRESSION</name></expr></argument>, <argument pos:start="171:71" pos:end="171:82"><expr pos:start="171:71" pos:end="171:82"><name pos:start="171:71" pos:end="171:82"><name pos:start="171:71" pos:end="171:71">s</name><operator pos:start="171:72" pos:end="171:73">-&gt;</operator><name pos:start="171:74" pos:end="171:82">drc_heavy</name></name></expr></argument>)</argument_list></call> <operator pos:start="171:85" pos:end="171:86">!=</operator> <name pos:start="171:88" pos:end="171:97">AAC_DEC_OK</name></expr>)</condition> <block pos:start="171:100" pos:end="177:9">{<block_content pos:start="173:13" pos:end="175:35">

            <expr_stmt pos:start="173:13" pos:end="173:96"><expr pos:start="173:13" pos:end="173:95"><call pos:start="173:13" pos:end="173:95"><name pos:start="173:13" pos:end="173:18">av_log</name><argument_list pos:start="173:19" pos:end="173:95">(<argument pos:start="173:20" pos:end="173:24"><expr pos:start="173:20" pos:end="173:24"><name pos:start="173:20" pos:end="173:24">avctx</name></expr></argument>, <argument pos:start="173:27" pos:end="173:38"><expr pos:start="173:27" pos:end="173:38"><name pos:start="173:27" pos:end="173:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="173:41" pos:end="173:94"><expr pos:start="173:41" pos:end="173:94"><literal type="string" pos:start="173:41" pos:end="173:94">"Unable to set DRC heavy compression in the decoder\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="175:13" pos:end="175:35">return <expr pos:start="175:20" pos:end="175:34"><name pos:start="175:20" pos:end="175:34">AVERROR_UNKNOWN</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="183:1" pos:end="183:25">#<cpp:directive pos:start="183:2" pos:end="183:6">ifdef</cpp:directive> <name pos:start="183:8" pos:end="183:25">AACDECODER_LIB_VL0</name></cpp:ifdef>

    <if_stmt pos:start="185:5" pos:end="194:0"><if pos:start="185:5" pos:end="194:0">if <condition pos:start="185:8" pos:end="185:93">(<expr pos:start="185:9" pos:end="185:92"><call pos:start="185:9" pos:end="185:78"><name pos:start="185:9" pos:end="185:27">aacDecoder_SetParam</name><argument_list pos:start="185:28" pos:end="185:78">(<argument pos:start="185:29" pos:end="185:37"><expr pos:start="185:29" pos:end="185:37"><name pos:start="185:29" pos:end="185:37"><name pos:start="185:29" pos:end="185:29">s</name><operator pos:start="185:30" pos:end="185:31">-&gt;</operator><name pos:start="185:32" pos:end="185:37">handle</name></name></expr></argument>, <argument pos:start="185:40" pos:end="185:61"><expr pos:start="185:40" pos:end="185:61"><name pos:start="185:40" pos:end="185:61">AAC_PCM_LIMITER_ENABLE</name></expr></argument>, <argument pos:start="185:64" pos:end="185:77"><expr pos:start="185:64" pos:end="185:77"><name pos:start="185:64" pos:end="185:77"><name pos:start="185:64" pos:end="185:64">s</name><operator pos:start="185:65" pos:end="185:66">-&gt;</operator><name pos:start="185:67" pos:end="185:77">level_limit</name></name></expr></argument>)</argument_list></call> <operator pos:start="185:80" pos:end="185:81">!=</operator> <name pos:start="185:83" pos:end="185:92">AAC_DEC_OK</name></expr>)</condition> <block pos:start="185:95" pos:end="194:0">{<block_content pos:start="187:9" pos:end="189:31">

        <expr_stmt pos:start="187:9" pos:end="187:95"><expr pos:start="187:9" pos:end="187:94"><call pos:start="187:9" pos:end="187:94"><name pos:start="187:9" pos:end="187:14">av_log</name><argument_list pos:start="187:15" pos:end="187:94">(<argument pos:start="187:16" pos:end="187:20"><expr pos:start="187:16" pos:end="187:20"><name pos:start="187:16" pos:end="187:20">avctx</name></expr></argument>, <argument pos:start="187:23" pos:end="187:34"><expr pos:start="187:23" pos:end="187:34"><name pos:start="187:23" pos:end="187:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="187:37" pos:end="187:93"><expr pos:start="187:37" pos:end="187:93"><literal type="string" pos:start="187:37" pos:end="187:93">"Unable to set in signal level limiting in the decoder\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="189:9" pos:end="189:31">return <expr pos:start="189:16" pos:end="189:30"><name pos:start="189:16" pos:end="189:30">AVERROR_UNKNOWN</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="193:1" pos:end="193:6">#<cpp:directive pos:start="193:2" pos:end="193:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="197:5" pos:end="197:42"><expr pos:start="197:5" pos:end="197:41"><name pos:start="197:5" pos:end="197:21"><name pos:start="197:5" pos:end="197:9">avctx</name><operator pos:start="197:10" pos:end="197:11">-&gt;</operator><name pos:start="197:12" pos:end="197:21">sample_fmt</name></name> <operator pos:start="197:23" pos:end="197:23">=</operator> <name pos:start="197:25" pos:end="197:41">AV_SAMPLE_FMT_S16</name></expr>;</expr_stmt>



    <expr_stmt pos:start="201:5" pos:end="201:69"><expr pos:start="201:5" pos:end="201:68"><name pos:start="201:5" pos:end="201:26"><name pos:start="201:5" pos:end="201:5">s</name><operator pos:start="201:6" pos:end="201:7">-&gt;</operator><name pos:start="201:8" pos:end="201:26">decoder_buffer_size</name></name> <operator pos:start="201:28" pos:end="201:28">=</operator> <name pos:start="201:30" pos:end="201:45">DECODER_BUFFSIZE</name> <operator pos:start="201:47" pos:end="201:47">*</operator> <name pos:start="201:49" pos:end="201:68">DECODER_MAX_CHANNELS</name></expr>;</expr_stmt>

    <expr_stmt pos:start="203:5" pos:end="203:58"><expr pos:start="203:5" pos:end="203:57"><name pos:start="203:5" pos:end="203:21"><name pos:start="203:5" pos:end="203:5">s</name><operator pos:start="203:6" pos:end="203:7">-&gt;</operator><name pos:start="203:8" pos:end="203:21">decoder_buffer</name></name> <operator pos:start="203:23" pos:end="203:23">=</operator> <call pos:start="203:25" pos:end="203:57"><name pos:start="203:25" pos:end="203:33">av_malloc</name><argument_list pos:start="203:34" pos:end="203:57">(<argument pos:start="203:35" pos:end="203:56"><expr pos:start="203:35" pos:end="203:56"><name pos:start="203:35" pos:end="203:56"><name pos:start="203:35" pos:end="203:35">s</name><operator pos:start="203:36" pos:end="203:37">-&gt;</operator><name pos:start="203:38" pos:end="203:56">decoder_buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="205:5" pos:end="211:5"><if pos:start="205:5" pos:end="211:5">if <condition pos:start="205:8" pos:end="205:27">(<expr pos:start="205:9" pos:end="205:26"><operator pos:start="205:9" pos:end="205:9">!</operator><name pos:start="205:10" pos:end="205:26"><name pos:start="205:10" pos:end="205:10">s</name><operator pos:start="205:11" pos:end="205:12">-&gt;</operator><name pos:start="205:13" pos:end="205:26">decoder_buffer</name></name></expr>)</condition> <block pos:start="205:29" pos:end="211:5">{<block_content pos:start="207:9" pos:end="209:18">

        <expr_stmt pos:start="207:9" pos:end="207:30"><expr pos:start="207:9" pos:end="207:29"><name pos:start="207:9" pos:end="207:11">ret</name> <operator pos:start="207:13" pos:end="207:13">=</operator> <call pos:start="207:15" pos:end="207:29"><name pos:start="207:15" pos:end="207:21">AVERROR</name><argument_list pos:start="207:22" pos:end="207:29">(<argument pos:start="207:23" pos:end="207:28"><expr pos:start="207:23" pos:end="207:28"><name pos:start="207:23" pos:end="207:28">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="209:9" pos:end="209:18">goto <name pos:start="209:14" pos:end="209:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <return pos:start="215:5" pos:end="215:13">return <expr pos:start="215:12" pos:end="215:12"><literal type="number" pos:start="215:12" pos:end="215:12">0</literal></expr>;</return>

<label pos:start="217:1" pos:end="217:5"><name pos:start="217:1" pos:end="217:4">fail</name>:</label>

    <expr_stmt pos:start="219:5" pos:end="219:32"><expr pos:start="219:5" pos:end="219:31"><call pos:start="219:5" pos:end="219:31"><name pos:start="219:5" pos:end="219:24">fdk_aac_decode_close</name><argument_list pos:start="219:25" pos:end="219:31">(<argument pos:start="219:26" pos:end="219:30"><expr pos:start="219:26" pos:end="219:30"><name pos:start="219:26" pos:end="219:30">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="221:5" pos:end="221:15">return <expr pos:start="221:12" pos:end="221:14"><name pos:start="221:12" pos:end="221:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
