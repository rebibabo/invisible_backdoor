<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26628.c" pos:tabs="8"><function pos:start="1:1" pos:end="101:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:23">aio_set_fd_handler</name><parameter_list pos:start="1:24" pos:end="11:37">(<parameter pos:start="1:25" pos:end="1:39"><decl pos:start="1:25" pos:end="1:39"><type pos:start="1:25" pos:end="1:39"><name pos:start="1:25" pos:end="1:34">AioContext</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:39">ctx</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:30"><decl pos:start="3:25" pos:end="3:30"><type pos:start="3:25" pos:end="3:30"><name pos:start="3:25" pos:end="3:27">int</name></type> <name pos:start="3:29" pos:end="3:30">fd</name></decl></parameter>,

                        <parameter pos:start="5:25" pos:end="5:42"><decl pos:start="5:25" pos:end="5:42"><type pos:start="5:25" pos:end="5:42"><name pos:start="5:25" pos:end="5:33">IOHandler</name> <modifier pos:start="5:35" pos:end="5:35">*</modifier></type><name pos:start="5:36" pos:end="5:42">io_read</name></decl></parameter>,

                        <parameter pos:start="7:25" pos:end="7:43"><decl pos:start="7:25" pos:end="7:43"><type pos:start="7:25" pos:end="7:43"><name pos:start="7:25" pos:end="7:33">IOHandler</name> <modifier pos:start="7:35" pos:end="7:35">*</modifier></type><name pos:start="7:36" pos:end="7:43">io_write</name></decl></parameter>,

                        <parameter pos:start="9:25" pos:end="9:49"><decl pos:start="9:25" pos:end="9:49"><type pos:start="9:25" pos:end="9:49"><name pos:start="9:25" pos:end="9:39">AioFlushHandler</name> <modifier pos:start="9:41" pos:end="9:41">*</modifier></type><name pos:start="9:42" pos:end="9:49">io_flush</name></decl></parameter>,

                        <parameter pos:start="11:25" pos:end="11:36"><decl pos:start="11:25" pos:end="11:36"><type pos:start="11:25" pos:end="11:36"><name pos:start="11:25" pos:end="11:28">void</name> <modifier pos:start="11:30" pos:end="11:30">*</modifier></type><name pos:start="11:31" pos:end="11:36">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="13:1" pos:end="101:1">{<block_content pos:start="15:5" pos:end="99:20">

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:14">AioHandler</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:20">node</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:37"><expr pos:start="19:5" pos:end="19:36"><name pos:start="19:5" pos:end="19:8">node</name> <operator pos:start="19:10" pos:end="19:10">=</operator> <call pos:start="19:12" pos:end="19:36"><name pos:start="19:12" pos:end="19:27">find_aio_handler</name><argument_list pos:start="19:28" pos:end="19:36">(<argument pos:start="19:29" pos:end="19:31"><expr pos:start="19:29" pos:end="19:31"><name pos:start="19:29" pos:end="19:31">ctx</name></expr></argument>, <argument pos:start="19:34" pos:end="19:35"><expr pos:start="19:34" pos:end="19:35"><name pos:start="19:34" pos:end="19:35">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="23:5" pos:end="23:41">/* Are we deleting the fd handler? */</comment>

    <if_stmt pos:start="25:5" pos:end="95:5"><if pos:start="25:5" pos:end="59:5">if <condition pos:start="25:8" pos:end="25:30">(<expr pos:start="25:9" pos:end="25:29"><operator pos:start="25:9" pos:end="25:9">!</operator><name pos:start="25:10" pos:end="25:16">io_read</name> <operator pos:start="25:18" pos:end="25:19">&amp;&amp;</operator> <operator pos:start="25:21" pos:end="25:21">!</operator><name pos:start="25:22" pos:end="25:29">io_write</name></expr>)</condition> <block pos:start="25:32" pos:end="59:5">{<block_content pos:start="27:9" pos:end="57:9">

        <if_stmt pos:start="27:9" pos:end="57:9"><if pos:start="27:9" pos:end="57:9">if <condition pos:start="27:12" pos:end="27:17">(<expr pos:start="27:13" pos:end="27:16"><name pos:start="27:13" pos:end="27:16">node</name></expr>)</condition> <block pos:start="27:19" pos:end="57:9">{<block_content pos:start="29:13" pos:end="55:13">

            <expr_stmt pos:start="29:13" pos:end="29:59"><expr pos:start="29:13" pos:end="29:58"><call pos:start="29:13" pos:end="29:58"><name pos:start="29:13" pos:end="29:32">g_source_remove_poll</name><argument_list pos:start="29:33" pos:end="29:58">(<argument pos:start="29:34" pos:end="29:45"><expr pos:start="29:34" pos:end="29:45"><operator pos:start="29:34" pos:end="29:34">&amp;</operator><name pos:start="29:35" pos:end="29:45"><name pos:start="29:35" pos:end="29:37">ctx</name><operator pos:start="29:38" pos:end="29:39">-&gt;</operator><name pos:start="29:40" pos:end="29:45">source</name></name></expr></argument>, <argument pos:start="29:48" pos:end="29:57"><expr pos:start="29:48" pos:end="29:57"><operator pos:start="29:48" pos:end="29:48">&amp;</operator><name pos:start="29:49" pos:end="29:57"><name pos:start="29:49" pos:end="29:52">node</name><operator pos:start="29:53" pos:end="29:54">-&gt;</operator><name pos:start="29:55" pos:end="29:57">pfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="33:13" pos:end="33:68">/* If the lock is held, just mark the node as deleted */</comment>

            <if_stmt pos:start="35:13" pos:end="55:13"><if pos:start="35:13" pos:end="41:13">if <condition pos:start="35:16" pos:end="35:38">(<expr pos:start="35:17" pos:end="35:37"><name pos:start="35:17" pos:end="35:37"><name pos:start="35:17" pos:end="35:19">ctx</name><operator pos:start="35:20" pos:end="35:21">-&gt;</operator><name pos:start="35:22" pos:end="35:37">walking_handlers</name></name></expr>)</condition> <block pos:start="35:40" pos:end="41:13">{<block_content pos:start="37:17" pos:end="39:38">

                <expr_stmt pos:start="37:17" pos:end="37:34"><expr pos:start="37:17" pos:end="37:33"><name pos:start="37:17" pos:end="37:29"><name pos:start="37:17" pos:end="37:20">node</name><operator pos:start="37:21" pos:end="37:22">-&gt;</operator><name pos:start="37:23" pos:end="37:29">deleted</name></name> <operator pos:start="37:31" pos:end="37:31">=</operator> <literal type="number" pos:start="37:33" pos:end="37:33">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="39:17" pos:end="39:38"><expr pos:start="39:17" pos:end="39:37"><name pos:start="39:17" pos:end="39:33"><name pos:start="39:17" pos:end="39:20">node</name><operator pos:start="39:21" pos:end="39:22">-&gt;</operator><name pos:start="39:23" pos:end="39:25">pfd</name><operator pos:start="39:26" pos:end="39:26">.</operator><name pos:start="39:27" pos:end="39:33">revents</name></name> <operator pos:start="39:35" pos:end="39:35">=</operator> <literal type="number" pos:start="39:37" pos:end="39:37">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="41:15" pos:end="55:13">else <block pos:start="41:20" pos:end="55:13">{<block_content pos:start="51:17" pos:end="53:29">

                <comment type="block" pos:start="43:17" pos:end="49:19">/* Otherwise, delete it for real.  We can't just mark it as

                 * deleted because deleted nodes are only cleaned up after

                 * releasing the walking_handlers lock.

                 */</comment>

                <expr_stmt pos:start="51:17" pos:end="51:41"><expr pos:start="51:17" pos:end="51:40"><call pos:start="51:17" pos:end="51:40"><name pos:start="51:17" pos:end="51:28">QLIST_REMOVE</name><argument_list pos:start="51:29" pos:end="51:40">(<argument pos:start="51:30" pos:end="51:33"><expr pos:start="51:30" pos:end="51:33"><name pos:start="51:30" pos:end="51:33">node</name></expr></argument>, <argument pos:start="51:36" pos:end="51:39"><expr pos:start="51:36" pos:end="51:39"><name pos:start="51:36" pos:end="51:39">node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="53:17" pos:end="53:29"><expr pos:start="53:17" pos:end="53:28"><call pos:start="53:17" pos:end="53:28"><name pos:start="53:17" pos:end="53:22">g_free</name><argument_list pos:start="53:23" pos:end="53:28">(<argument pos:start="53:24" pos:end="53:27"><expr pos:start="53:24" pos:end="53:27"><name pos:start="53:24" pos:end="53:27">node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="59:7" pos:end="95:5">else <block pos:start="59:12" pos:end="95:5">{<block_content pos:start="61:9" pos:end="93:65">

        <if_stmt pos:start="61:9" pos:end="75:9"><if pos:start="61:9" pos:end="75:9">if <condition pos:start="61:12" pos:end="61:25">(<expr pos:start="61:13" pos:end="61:24"><name pos:start="61:13" pos:end="61:16">node</name> <operator pos:start="61:18" pos:end="61:19">==</operator> <name pos:start="61:21" pos:end="61:24">NULL</name></expr>)</condition> <block pos:start="61:27" pos:end="75:9">{<block_content pos:start="65:13" pos:end="73:56">

            <comment type="block" pos:start="63:13" pos:end="63:60">/* Alloc and insert if it's not already there */</comment>

            <expr_stmt pos:start="65:13" pos:end="65:49"><expr pos:start="65:13" pos:end="65:48"><name pos:start="65:13" pos:end="65:16">node</name> <operator pos:start="65:18" pos:end="65:18">=</operator> <call pos:start="65:20" pos:end="65:48"><name pos:start="65:20" pos:end="65:28">g_malloc0</name><argument_list pos:start="65:29" pos:end="65:48">(<argument pos:start="65:30" pos:end="65:47"><expr pos:start="65:30" pos:end="65:47"><sizeof pos:start="65:30" pos:end="65:47">sizeof<argument_list pos:start="65:36" pos:end="65:47">(<argument pos:start="65:37" pos:end="65:46"><expr pos:start="65:37" pos:end="65:46"><name pos:start="65:37" pos:end="65:46">AioHandler</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:30"><expr pos:start="67:13" pos:end="67:29"><name pos:start="67:13" pos:end="67:24"><name pos:start="67:13" pos:end="67:16">node</name><operator pos:start="67:17" pos:end="67:18">-&gt;</operator><name pos:start="67:19" pos:end="67:21">pfd</name><operator pos:start="67:22" pos:end="67:22">.</operator><name pos:start="67:23" pos:end="67:24">fd</name></name> <operator pos:start="67:26" pos:end="67:26">=</operator> <name pos:start="67:28" pos:end="67:29">fd</name></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:62"><expr pos:start="69:13" pos:end="69:61"><call pos:start="69:13" pos:end="69:61"><name pos:start="69:13" pos:end="69:29">QLIST_INSERT_HEAD</name><argument_list pos:start="69:30" pos:end="69:61">(<argument pos:start="69:31" pos:end="69:48"><expr pos:start="69:31" pos:end="69:48"><operator pos:start="69:31" pos:end="69:31">&amp;</operator><name pos:start="69:32" pos:end="69:48"><name pos:start="69:32" pos:end="69:34">ctx</name><operator pos:start="69:35" pos:end="69:36">-&gt;</operator><name pos:start="69:37" pos:end="69:48">aio_handlers</name></name></expr></argument>, <argument pos:start="69:51" pos:end="69:54"><expr pos:start="69:51" pos:end="69:54"><name pos:start="69:51" pos:end="69:54">node</name></expr></argument>, <argument pos:start="69:57" pos:end="69:60"><expr pos:start="69:57" pos:end="69:60"><name pos:start="69:57" pos:end="69:60">node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="73:13" pos:end="73:56"><expr pos:start="73:13" pos:end="73:55"><call pos:start="73:13" pos:end="73:55"><name pos:start="73:13" pos:end="73:29">g_source_add_poll</name><argument_list pos:start="73:30" pos:end="73:55">(<argument pos:start="73:31" pos:end="73:42"><expr pos:start="73:31" pos:end="73:42"><operator pos:start="73:31" pos:end="73:31">&amp;</operator><name pos:start="73:32" pos:end="73:42"><name pos:start="73:32" pos:end="73:34">ctx</name><operator pos:start="73:35" pos:end="73:36">-&gt;</operator><name pos:start="73:37" pos:end="73:42">source</name></name></expr></argument>, <argument pos:start="73:45" pos:end="73:54"><expr pos:start="73:45" pos:end="73:54"><operator pos:start="73:45" pos:end="73:45">&amp;</operator><name pos:start="73:46" pos:end="73:54"><name pos:start="73:46" pos:end="73:49">node</name><operator pos:start="73:50" pos:end="73:51">-&gt;</operator><name pos:start="73:52" pos:end="73:54">pfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="77:9" pos:end="77:52">/* Update handler with latest information */</comment>

        <expr_stmt pos:start="79:9" pos:end="79:32"><expr pos:start="79:9" pos:end="79:31"><name pos:start="79:9" pos:end="79:21"><name pos:start="79:9" pos:end="79:12">node</name><operator pos:start="79:13" pos:end="79:14">-&gt;</operator><name pos:start="79:15" pos:end="79:21">io_read</name></name> <operator pos:start="79:23" pos:end="79:23">=</operator> <name pos:start="79:25" pos:end="79:31">io_read</name></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:34"><expr pos:start="81:9" pos:end="81:33"><name pos:start="81:9" pos:end="81:22"><name pos:start="81:9" pos:end="81:12">node</name><operator pos:start="81:13" pos:end="81:14">-&gt;</operator><name pos:start="81:15" pos:end="81:22">io_write</name></name> <operator pos:start="81:24" pos:end="81:24">=</operator> <name pos:start="81:26" pos:end="81:33">io_write</name></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:34"><expr pos:start="83:9" pos:end="83:33"><name pos:start="83:9" pos:end="83:22"><name pos:start="83:9" pos:end="83:12">node</name><operator pos:start="83:13" pos:end="83:14">-&gt;</operator><name pos:start="83:15" pos:end="83:22">io_flush</name></name> <operator pos:start="83:24" pos:end="83:24">=</operator> <name pos:start="83:26" pos:end="83:33">io_flush</name></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:30"><expr pos:start="85:9" pos:end="85:29"><name pos:start="85:9" pos:end="85:20"><name pos:start="85:9" pos:end="85:12">node</name><operator pos:start="85:13" pos:end="85:14">-&gt;</operator><name pos:start="85:15" pos:end="85:20">opaque</name></name> <operator pos:start="85:22" pos:end="85:22">=</operator> <name pos:start="85:24" pos:end="85:29">opaque</name></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:31"><expr pos:start="87:9" pos:end="87:30"><name pos:start="87:9" pos:end="87:25"><name pos:start="87:9" pos:end="87:12">node</name><operator pos:start="87:13" pos:end="87:14">-&gt;</operator><name pos:start="87:15" pos:end="87:25">pollfds_idx</name></name> <operator pos:start="87:27" pos:end="87:27">=</operator> <operator pos:start="87:29" pos:end="87:29">-</operator><literal type="number" pos:start="87:30" pos:end="87:30">1</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="91:9" pos:end="91:73"><expr pos:start="91:9" pos:end="91:72"><name pos:start="91:9" pos:end="91:24"><name pos:start="91:9" pos:end="91:12">node</name><operator pos:start="91:13" pos:end="91:14">-&gt;</operator><name pos:start="91:15" pos:end="91:17">pfd</name><operator pos:start="91:18" pos:end="91:18">.</operator><name pos:start="91:19" pos:end="91:24">events</name></name> <operator pos:start="91:26" pos:end="91:26">=</operator> <operator pos:start="91:28" pos:end="91:28">(</operator><ternary pos:start="91:29" pos:end="91:71"><condition pos:start="91:29" pos:end="91:37"><expr pos:start="91:29" pos:end="91:35"><name pos:start="91:29" pos:end="91:35">io_read</name></expr> ?</condition><then pos:start="91:39" pos:end="91:67"> <expr pos:start="91:39" pos:end="91:67"><name pos:start="91:39" pos:end="91:45">G_IO_IN</name> <operator pos:start="91:47" pos:end="91:47">|</operator> <name pos:start="91:49" pos:end="91:56">G_IO_HUP</name> <operator pos:start="91:58" pos:end="91:58">|</operator> <name pos:start="91:60" pos:end="91:67">G_IO_ERR</name></expr> </then><else pos:start="91:69" pos:end="91:71">: <expr pos:start="91:71" pos:end="91:71"><literal type="number" pos:start="91:71" pos:end="91:71">0</literal></expr></else></ternary><operator pos:start="91:72" pos:end="91:72">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:65"><expr pos:start="93:9" pos:end="93:64"><name pos:start="93:9" pos:end="93:24"><name pos:start="93:9" pos:end="93:12">node</name><operator pos:start="93:13" pos:end="93:14">-&gt;</operator><name pos:start="93:15" pos:end="93:17">pfd</name><operator pos:start="93:18" pos:end="93:18">.</operator><name pos:start="93:19" pos:end="93:24">events</name></name> <operator pos:start="93:26" pos:end="93:27">|=</operator> <operator pos:start="93:29" pos:end="93:29">(</operator><ternary pos:start="93:30" pos:end="93:63"><condition pos:start="93:30" pos:end="93:39"><expr pos:start="93:30" pos:end="93:37"><name pos:start="93:30" pos:end="93:37">io_write</name></expr> ?</condition><then pos:start="93:41" pos:end="93:59"> <expr pos:start="93:41" pos:end="93:59"><name pos:start="93:41" pos:end="93:48">G_IO_OUT</name> <operator pos:start="93:50" pos:end="93:50">|</operator> <name pos:start="93:52" pos:end="93:59">G_IO_ERR</name></expr> </then><else pos:start="93:61" pos:end="93:63">: <expr pos:start="93:63" pos:end="93:63"><literal type="number" pos:start="93:63" pos:end="93:63">0</literal></expr></else></ternary><operator pos:start="93:64" pos:end="93:64">)</operator></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="99:5" pos:end="99:20"><expr pos:start="99:5" pos:end="99:19"><call pos:start="99:5" pos:end="99:19"><name pos:start="99:5" pos:end="99:14">aio_notify</name><argument_list pos:start="99:15" pos:end="99:19">(<argument pos:start="99:16" pos:end="99:18"><expr pos:start="99:16" pos:end="99:18"><name pos:start="99:16" pos:end="99:18">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
