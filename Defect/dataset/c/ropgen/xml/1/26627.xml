<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26627.c" pos:tabs="8"><function pos:start="1:1" pos:end="123:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">decode_header_trees</name><parameter_list pos:start="1:31" pos:end="1:50">(<parameter pos:start="1:32" pos:end="1:49"><decl pos:start="1:32" pos:end="1:49"><type pos:start="1:32" pos:end="1:46"><name pos:start="1:32" pos:end="1:44">SmackVContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:49">smk</name></decl></parameter>)</parameter_list> <block pos:start="1:52" pos:end="123:1">{<block_content pos:start="3:5" pos:end="121:13">

    <decl_stmt pos:start="3:5" pos:end="3:21"><decl pos:start="3:5" pos:end="3:20"><type pos:start="3:5" pos:end="3:17"><name pos:start="3:5" pos:end="3:17">GetBitContext</name></type> <name pos:start="3:19" pos:end="3:20">gb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="5:5" pos:end="5:56"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:17">mmap_size</name></decl>, <decl pos:start="5:20" pos:end="5:28"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:20" pos:end="5:28">mclr_size</name></decl>, <decl pos:start="5:31" pos:end="5:39"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:31" pos:end="5:39">full_size</name></decl>, <decl pos:start="5:42" pos:end="5:50"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:42" pos:end="5:50">type_size</name></decl>, <decl pos:start="5:53" pos:end="5:55"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:53" pos:end="5:55">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:47"><expr pos:start="9:5" pos:end="9:46"><name pos:start="9:5" pos:end="9:13">mmap_size</name> <operator pos:start="9:15" pos:end="9:15">=</operator> <call pos:start="9:17" pos:end="9:46"><name pos:start="9:17" pos:end="9:23">AV_RL32</name><argument_list pos:start="9:24" pos:end="9:46">(<argument pos:start="9:25" pos:end="9:45"><expr pos:start="9:25" pos:end="9:45"><name pos:start="9:25" pos:end="9:45"><name pos:start="9:25" pos:end="9:27">smk</name><operator pos:start="9:28" pos:end="9:29">-&gt;</operator><name pos:start="9:30" pos:end="9:34">avctx</name><operator pos:start="9:35" pos:end="9:36">-&gt;</operator><name pos:start="9:37" pos:end="9:45">extradata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="11:5" pos:end="11:51"><expr pos:start="11:5" pos:end="11:50"><name pos:start="11:5" pos:end="11:13">mclr_size</name> <operator pos:start="11:15" pos:end="11:15">=</operator> <call pos:start="11:17" pos:end="11:50"><name pos:start="11:17" pos:end="11:23">AV_RL32</name><argument_list pos:start="11:24" pos:end="11:50">(<argument pos:start="11:25" pos:end="11:49"><expr pos:start="11:25" pos:end="11:49"><name pos:start="11:25" pos:end="11:45"><name pos:start="11:25" pos:end="11:27">smk</name><operator pos:start="11:28" pos:end="11:29">-&gt;</operator><name pos:start="11:30" pos:end="11:34">avctx</name><operator pos:start="11:35" pos:end="11:36">-&gt;</operator><name pos:start="11:37" pos:end="11:45">extradata</name></name> <operator pos:start="11:47" pos:end="11:47">+</operator> <literal type="number" pos:start="11:49" pos:end="11:49">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:51"><expr pos:start="13:5" pos:end="13:50"><name pos:start="13:5" pos:end="13:13">full_size</name> <operator pos:start="13:15" pos:end="13:15">=</operator> <call pos:start="13:17" pos:end="13:50"><name pos:start="13:17" pos:end="13:23">AV_RL32</name><argument_list pos:start="13:24" pos:end="13:50">(<argument pos:start="13:25" pos:end="13:49"><expr pos:start="13:25" pos:end="13:49"><name pos:start="13:25" pos:end="13:45"><name pos:start="13:25" pos:end="13:27">smk</name><operator pos:start="13:28" pos:end="13:29">-&gt;</operator><name pos:start="13:30" pos:end="13:34">avctx</name><operator pos:start="13:35" pos:end="13:36">-&gt;</operator><name pos:start="13:37" pos:end="13:45">extradata</name></name> <operator pos:start="13:47" pos:end="13:47">+</operator> <literal type="number" pos:start="13:49" pos:end="13:49">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:52"><expr pos:start="15:5" pos:end="15:51"><name pos:start="15:5" pos:end="15:13">type_size</name> <operator pos:start="15:15" pos:end="15:15">=</operator> <call pos:start="15:17" pos:end="15:51"><name pos:start="15:17" pos:end="15:23">AV_RL32</name><argument_list pos:start="15:24" pos:end="15:51">(<argument pos:start="15:25" pos:end="15:50"><expr pos:start="15:25" pos:end="15:50"><name pos:start="15:25" pos:end="15:45"><name pos:start="15:25" pos:end="15:27">smk</name><operator pos:start="15:28" pos:end="15:29">-&gt;</operator><name pos:start="15:30" pos:end="15:34">avctx</name><operator pos:start="15:35" pos:end="15:36">-&gt;</operator><name pos:start="15:37" pos:end="15:45">extradata</name></name> <operator pos:start="15:47" pos:end="15:47">+</operator> <literal type="number" pos:start="15:49" pos:end="15:50">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:85"><expr pos:start="19:5" pos:end="19:84"><call pos:start="19:5" pos:end="19:84"><name pos:start="19:5" pos:end="19:18">init_get_bits8</name><argument_list pos:start="19:19" pos:end="19:84">(<argument pos:start="19:20" pos:end="19:22"><expr pos:start="19:20" pos:end="19:22"><operator pos:start="19:20" pos:end="19:20">&amp;</operator><name pos:start="19:21" pos:end="19:22">gb</name></expr></argument>, <argument pos:start="19:25" pos:end="19:50"><expr pos:start="19:25" pos:end="19:50"><name pos:start="19:25" pos:end="19:45"><name pos:start="19:25" pos:end="19:27">smk</name><operator pos:start="19:28" pos:end="19:29">-&gt;</operator><name pos:start="19:30" pos:end="19:34">avctx</name><operator pos:start="19:35" pos:end="19:36">-&gt;</operator><name pos:start="19:37" pos:end="19:45">extradata</name></name> <operator pos:start="19:47" pos:end="19:47">+</operator> <literal type="number" pos:start="19:49" pos:end="19:50">16</literal></expr></argument>, <argument pos:start="19:53" pos:end="19:83"><expr pos:start="19:53" pos:end="19:83"><name pos:start="19:53" pos:end="19:78"><name pos:start="19:53" pos:end="19:55">smk</name><operator pos:start="19:56" pos:end="19:57">-&gt;</operator><name pos:start="19:58" pos:end="19:62">avctx</name><operator pos:start="19:63" pos:end="19:64">-&gt;</operator><name pos:start="19:65" pos:end="19:78">extradata_size</name></name> <operator pos:start="19:80" pos:end="19:80">-</operator> <literal type="number" pos:start="19:82" pos:end="19:83">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="23:5" pos:end="45:5"><if pos:start="23:5" pos:end="37:5">if<condition pos:start="23:7" pos:end="23:23">(<expr pos:start="23:8" pos:end="23:22"><operator pos:start="23:8" pos:end="23:8">!</operator><call pos:start="23:9" pos:end="23:22"><name pos:start="23:9" pos:end="23:17">get_bits1</name><argument_list pos:start="23:18" pos:end="23:22">(<argument pos:start="23:19" pos:end="23:21"><expr pos:start="23:19" pos:end="23:21"><operator pos:start="23:19" pos:end="23:19">&amp;</operator><name pos:start="23:20" pos:end="23:21">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="23:25" pos:end="37:5">{<block_content pos:start="25:9" pos:end="35:70">

        <expr_stmt pos:start="25:9" pos:end="25:64"><expr pos:start="25:9" pos:end="25:63"><call pos:start="25:9" pos:end="25:63"><name pos:start="25:9" pos:end="25:14">av_log</name><argument_list pos:start="25:15" pos:end="25:63">(<argument pos:start="25:16" pos:end="25:25"><expr pos:start="25:16" pos:end="25:25"><name pos:start="25:16" pos:end="25:25"><name pos:start="25:16" pos:end="25:18">smk</name><operator pos:start="25:19" pos:end="25:20">-&gt;</operator><name pos:start="25:21" pos:end="25:25">avctx</name></name></expr></argument>, <argument pos:start="25:28" pos:end="25:38"><expr pos:start="25:28" pos:end="25:38"><name pos:start="25:28" pos:end="25:38">AV_LOG_INFO</name></expr></argument>, <argument pos:start="25:41" pos:end="25:62"><expr pos:start="25:41" pos:end="25:62"><literal type="string" pos:start="25:41" pos:end="25:62">"Skipping MMAP tree\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:51"><expr pos:start="27:9" pos:end="27:50"><name pos:start="27:9" pos:end="27:21"><name pos:start="27:9" pos:end="27:11">smk</name><operator pos:start="27:12" pos:end="27:13">-&gt;</operator><name pos:start="27:14" pos:end="27:21">mmap_tbl</name></name> <operator pos:start="27:23" pos:end="27:23">=</operator> <call pos:start="27:25" pos:end="27:50"><name pos:start="27:25" pos:end="27:33">av_malloc</name><argument_list pos:start="27:34" pos:end="27:50">(<argument pos:start="27:35" pos:end="27:49"><expr pos:start="27:35" pos:end="27:49"><sizeof pos:start="27:35" pos:end="27:45">sizeof<argument_list pos:start="27:41" pos:end="27:45">(<argument pos:start="27:42" pos:end="27:44"><expr pos:start="27:42" pos:end="27:44"><name pos:start="27:42" pos:end="27:44">int</name></expr></argument>)</argument_list></sizeof> <operator pos:start="27:47" pos:end="27:47">*</operator> <literal type="number" pos:start="27:49" pos:end="27:49">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="29:9" pos:end="31:35"><if pos:start="29:9" pos:end="31:35">if <condition pos:start="29:12" pos:end="29:27">(<expr pos:start="29:13" pos:end="29:26"><operator pos:start="29:13" pos:end="29:13">!</operator><name pos:start="29:14" pos:end="29:26"><name pos:start="29:14" pos:end="29:16">smk</name><operator pos:start="29:17" pos:end="29:18">-&gt;</operator><name pos:start="29:19" pos:end="29:26">mmap_tbl</name></name></expr>)</condition><block type="pseudo" pos:start="31:13" pos:end="31:35"><block_content pos:start="31:13" pos:end="31:35">

            <return pos:start="31:13" pos:end="31:35">return <expr pos:start="31:20" pos:end="31:34"><call pos:start="31:20" pos:end="31:34"><name pos:start="31:20" pos:end="31:26">AVERROR</name><argument_list pos:start="31:27" pos:end="31:34">(<argument pos:start="31:28" pos:end="31:33"><expr pos:start="31:28" pos:end="31:33"><name pos:start="31:28" pos:end="31:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:29"><expr pos:start="33:9" pos:end="33:28"><name pos:start="33:9" pos:end="33:24"><name pos:start="33:9" pos:end="33:11">smk</name><operator pos:start="33:12" pos:end="33:13">-&gt;</operator><name pos:start="33:14" pos:end="33:21">mmap_tbl</name><index pos:start="33:22" pos:end="33:24">[<expr pos:start="33:23" pos:end="33:23"><literal type="number" pos:start="33:23" pos:end="33:23">0</literal></expr>]</index></name> <operator pos:start="33:26" pos:end="33:26">=</operator> <literal type="number" pos:start="33:28" pos:end="33:28">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:70"><expr pos:start="35:9" pos:end="35:69"><name pos:start="35:9" pos:end="35:25"><name pos:start="35:9" pos:end="35:11">smk</name><operator pos:start="35:12" pos:end="35:13">-&gt;</operator><name pos:start="35:14" pos:end="35:22">mmap_last</name><index pos:start="35:23" pos:end="35:25">[<expr pos:start="35:24" pos:end="35:24"><literal type="number" pos:start="35:24" pos:end="35:24">0</literal></expr>]</index></name> <operator pos:start="35:27" pos:end="35:27">=</operator> <name pos:start="35:29" pos:end="35:45"><name pos:start="35:29" pos:end="35:31">smk</name><operator pos:start="35:32" pos:end="35:33">-&gt;</operator><name pos:start="35:34" pos:end="35:42">mmap_last</name><index pos:start="35:43" pos:end="35:45">[<expr pos:start="35:44" pos:end="35:44"><literal type="number" pos:start="35:44" pos:end="35:44">1</literal></expr>]</index></name> <operator pos:start="35:47" pos:end="35:47">=</operator> <name pos:start="35:49" pos:end="35:65"><name pos:start="35:49" pos:end="35:51">smk</name><operator pos:start="35:52" pos:end="35:53">-&gt;</operator><name pos:start="35:54" pos:end="35:62">mmap_last</name><index pos:start="35:63" pos:end="35:65">[<expr pos:start="35:64" pos:end="35:64"><literal type="number" pos:start="35:64" pos:end="35:64">2</literal></expr>]</index></name> <operator pos:start="35:67" pos:end="35:67">=</operator> <literal type="number" pos:start="35:69" pos:end="35:69">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="37:7" pos:end="45:5">else <block pos:start="37:12" pos:end="45:5">{<block_content pos:start="39:9" pos:end="43:23">

        <expr_stmt pos:start="39:9" pos:end="39:94"><expr pos:start="39:9" pos:end="39:93"><name pos:start="39:9" pos:end="39:11">ret</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <call pos:start="39:15" pos:end="39:93"><name pos:start="39:15" pos:end="39:40">smacker_decode_header_tree</name><argument_list pos:start="39:41" pos:end="39:93">(<argument pos:start="39:42" pos:end="39:44"><expr pos:start="39:42" pos:end="39:44"><name pos:start="39:42" pos:end="39:44">smk</name></expr></argument>, <argument pos:start="39:47" pos:end="39:49"><expr pos:start="39:47" pos:end="39:49"><operator pos:start="39:47" pos:end="39:47">&amp;</operator><name pos:start="39:48" pos:end="39:49">gb</name></expr></argument>, <argument pos:start="39:52" pos:end="39:65"><expr pos:start="39:52" pos:end="39:65"><operator pos:start="39:52" pos:end="39:52">&amp;</operator><name pos:start="39:53" pos:end="39:65"><name pos:start="39:53" pos:end="39:55">smk</name><operator pos:start="39:56" pos:end="39:57">-&gt;</operator><name pos:start="39:58" pos:end="39:65">mmap_tbl</name></name></expr></argument>, <argument pos:start="39:68" pos:end="39:81"><expr pos:start="39:68" pos:end="39:81"><name pos:start="39:68" pos:end="39:81"><name pos:start="39:68" pos:end="39:70">smk</name><operator pos:start="39:71" pos:end="39:72">-&gt;</operator><name pos:start="39:73" pos:end="39:81">mmap_last</name></name></expr></argument>, <argument pos:start="39:84" pos:end="39:92"><expr pos:start="39:84" pos:end="39:92"><name pos:start="39:84" pos:end="39:92">mmap_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="41:9" pos:end="43:23"><if pos:start="41:9" pos:end="43:23">if <condition pos:start="41:12" pos:end="41:20">(<expr pos:start="41:13" pos:end="41:19"><name pos:start="41:13" pos:end="41:15">ret</name> <operator pos:start="41:17" pos:end="41:17">&lt;</operator> <literal type="number" pos:start="41:19" pos:end="41:19">0</literal></expr>)</condition><block type="pseudo" pos:start="43:13" pos:end="43:23"><block_content pos:start="43:13" pos:end="43:23">

            <return pos:start="43:13" pos:end="43:23">return <expr pos:start="43:20" pos:end="43:22"><name pos:start="43:20" pos:end="43:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="47:5" pos:end="69:5"><if pos:start="47:5" pos:end="61:5">if<condition pos:start="47:7" pos:end="47:23">(<expr pos:start="47:8" pos:end="47:22"><operator pos:start="47:8" pos:end="47:8">!</operator><call pos:start="47:9" pos:end="47:22"><name pos:start="47:9" pos:end="47:17">get_bits1</name><argument_list pos:start="47:18" pos:end="47:22">(<argument pos:start="47:19" pos:end="47:21"><expr pos:start="47:19" pos:end="47:21"><operator pos:start="47:19" pos:end="47:19">&amp;</operator><name pos:start="47:20" pos:end="47:21">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="47:25" pos:end="61:5">{<block_content pos:start="49:9" pos:end="59:70">

        <expr_stmt pos:start="49:9" pos:end="49:64"><expr pos:start="49:9" pos:end="49:63"><call pos:start="49:9" pos:end="49:63"><name pos:start="49:9" pos:end="49:14">av_log</name><argument_list pos:start="49:15" pos:end="49:63">(<argument pos:start="49:16" pos:end="49:25"><expr pos:start="49:16" pos:end="49:25"><name pos:start="49:16" pos:end="49:25"><name pos:start="49:16" pos:end="49:18">smk</name><operator pos:start="49:19" pos:end="49:20">-&gt;</operator><name pos:start="49:21" pos:end="49:25">avctx</name></name></expr></argument>, <argument pos:start="49:28" pos:end="49:38"><expr pos:start="49:28" pos:end="49:38"><name pos:start="49:28" pos:end="49:38">AV_LOG_INFO</name></expr></argument>, <argument pos:start="49:41" pos:end="49:62"><expr pos:start="49:41" pos:end="49:62"><literal type="string" pos:start="49:41" pos:end="49:62">"Skipping MCLR tree\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:51"><expr pos:start="51:9" pos:end="51:50"><name pos:start="51:9" pos:end="51:21"><name pos:start="51:9" pos:end="51:11">smk</name><operator pos:start="51:12" pos:end="51:13">-&gt;</operator><name pos:start="51:14" pos:end="51:21">mclr_tbl</name></name> <operator pos:start="51:23" pos:end="51:23">=</operator> <call pos:start="51:25" pos:end="51:50"><name pos:start="51:25" pos:end="51:33">av_malloc</name><argument_list pos:start="51:34" pos:end="51:50">(<argument pos:start="51:35" pos:end="51:49"><expr pos:start="51:35" pos:end="51:49"><sizeof pos:start="51:35" pos:end="51:45">sizeof<argument_list pos:start="51:41" pos:end="51:45">(<argument pos:start="51:42" pos:end="51:44"><expr pos:start="51:42" pos:end="51:44"><name pos:start="51:42" pos:end="51:44">int</name></expr></argument>)</argument_list></sizeof> <operator pos:start="51:47" pos:end="51:47">*</operator> <literal type="number" pos:start="51:49" pos:end="51:49">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="53:9" pos:end="55:35"><if pos:start="53:9" pos:end="55:35">if <condition pos:start="53:12" pos:end="53:27">(<expr pos:start="53:13" pos:end="53:26"><operator pos:start="53:13" pos:end="53:13">!</operator><name pos:start="53:14" pos:end="53:26"><name pos:start="53:14" pos:end="53:16">smk</name><operator pos:start="53:17" pos:end="53:18">-&gt;</operator><name pos:start="53:19" pos:end="53:26">mclr_tbl</name></name></expr>)</condition><block type="pseudo" pos:start="55:13" pos:end="55:35"><block_content pos:start="55:13" pos:end="55:35">

            <return pos:start="55:13" pos:end="55:35">return <expr pos:start="55:20" pos:end="55:34"><call pos:start="55:20" pos:end="55:34"><name pos:start="55:20" pos:end="55:26">AVERROR</name><argument_list pos:start="55:27" pos:end="55:34">(<argument pos:start="55:28" pos:end="55:33"><expr pos:start="55:28" pos:end="55:33"><name pos:start="55:28" pos:end="55:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:29"><expr pos:start="57:9" pos:end="57:28"><name pos:start="57:9" pos:end="57:24"><name pos:start="57:9" pos:end="57:11">smk</name><operator pos:start="57:12" pos:end="57:13">-&gt;</operator><name pos:start="57:14" pos:end="57:21">mclr_tbl</name><index pos:start="57:22" pos:end="57:24">[<expr pos:start="57:23" pos:end="57:23"><literal type="number" pos:start="57:23" pos:end="57:23">0</literal></expr>]</index></name> <operator pos:start="57:26" pos:end="57:26">=</operator> <literal type="number" pos:start="57:28" pos:end="57:28">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:70"><expr pos:start="59:9" pos:end="59:69"><name pos:start="59:9" pos:end="59:25"><name pos:start="59:9" pos:end="59:11">smk</name><operator pos:start="59:12" pos:end="59:13">-&gt;</operator><name pos:start="59:14" pos:end="59:22">mclr_last</name><index pos:start="59:23" pos:end="59:25">[<expr pos:start="59:24" pos:end="59:24"><literal type="number" pos:start="59:24" pos:end="59:24">0</literal></expr>]</index></name> <operator pos:start="59:27" pos:end="59:27">=</operator> <name pos:start="59:29" pos:end="59:45"><name pos:start="59:29" pos:end="59:31">smk</name><operator pos:start="59:32" pos:end="59:33">-&gt;</operator><name pos:start="59:34" pos:end="59:42">mclr_last</name><index pos:start="59:43" pos:end="59:45">[<expr pos:start="59:44" pos:end="59:44"><literal type="number" pos:start="59:44" pos:end="59:44">1</literal></expr>]</index></name> <operator pos:start="59:47" pos:end="59:47">=</operator> <name pos:start="59:49" pos:end="59:65"><name pos:start="59:49" pos:end="59:51">smk</name><operator pos:start="59:52" pos:end="59:53">-&gt;</operator><name pos:start="59:54" pos:end="59:62">mclr_last</name><index pos:start="59:63" pos:end="59:65">[<expr pos:start="59:64" pos:end="59:64"><literal type="number" pos:start="59:64" pos:end="59:64">2</literal></expr>]</index></name> <operator pos:start="59:67" pos:end="59:67">=</operator> <literal type="number" pos:start="59:69" pos:end="59:69">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="61:7" pos:end="69:5">else <block pos:start="61:12" pos:end="69:5">{<block_content pos:start="63:9" pos:end="67:23">

        <expr_stmt pos:start="63:9" pos:end="63:94"><expr pos:start="63:9" pos:end="63:93"><name pos:start="63:9" pos:end="63:11">ret</name> <operator pos:start="63:13" pos:end="63:13">=</operator> <call pos:start="63:15" pos:end="63:93"><name pos:start="63:15" pos:end="63:40">smacker_decode_header_tree</name><argument_list pos:start="63:41" pos:end="63:93">(<argument pos:start="63:42" pos:end="63:44"><expr pos:start="63:42" pos:end="63:44"><name pos:start="63:42" pos:end="63:44">smk</name></expr></argument>, <argument pos:start="63:47" pos:end="63:49"><expr pos:start="63:47" pos:end="63:49"><operator pos:start="63:47" pos:end="63:47">&amp;</operator><name pos:start="63:48" pos:end="63:49">gb</name></expr></argument>, <argument pos:start="63:52" pos:end="63:65"><expr pos:start="63:52" pos:end="63:65"><operator pos:start="63:52" pos:end="63:52">&amp;</operator><name pos:start="63:53" pos:end="63:65"><name pos:start="63:53" pos:end="63:55">smk</name><operator pos:start="63:56" pos:end="63:57">-&gt;</operator><name pos:start="63:58" pos:end="63:65">mclr_tbl</name></name></expr></argument>, <argument pos:start="63:68" pos:end="63:81"><expr pos:start="63:68" pos:end="63:81"><name pos:start="63:68" pos:end="63:81"><name pos:start="63:68" pos:end="63:70">smk</name><operator pos:start="63:71" pos:end="63:72">-&gt;</operator><name pos:start="63:73" pos:end="63:81">mclr_last</name></name></expr></argument>, <argument pos:start="63:84" pos:end="63:92"><expr pos:start="63:84" pos:end="63:92"><name pos:start="63:84" pos:end="63:92">mclr_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="65:9" pos:end="67:23"><if pos:start="65:9" pos:end="67:23">if <condition pos:start="65:12" pos:end="65:20">(<expr pos:start="65:13" pos:end="65:19"><name pos:start="65:13" pos:end="65:15">ret</name> <operator pos:start="65:17" pos:end="65:17">&lt;</operator> <literal type="number" pos:start="65:19" pos:end="65:19">0</literal></expr>)</condition><block type="pseudo" pos:start="67:13" pos:end="67:23"><block_content pos:start="67:13" pos:end="67:23">

            <return pos:start="67:13" pos:end="67:23">return <expr pos:start="67:20" pos:end="67:22"><name pos:start="67:20" pos:end="67:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="71:5" pos:end="93:5"><if pos:start="71:5" pos:end="85:5">if<condition pos:start="71:7" pos:end="71:23">(<expr pos:start="71:8" pos:end="71:22"><operator pos:start="71:8" pos:end="71:8">!</operator><call pos:start="71:9" pos:end="71:22"><name pos:start="71:9" pos:end="71:17">get_bits1</name><argument_list pos:start="71:18" pos:end="71:22">(<argument pos:start="71:19" pos:end="71:21"><expr pos:start="71:19" pos:end="71:21"><operator pos:start="71:19" pos:end="71:19">&amp;</operator><name pos:start="71:20" pos:end="71:21">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="71:25" pos:end="85:5">{<block_content pos:start="73:9" pos:end="83:70">

        <expr_stmt pos:start="73:9" pos:end="73:64"><expr pos:start="73:9" pos:end="73:63"><call pos:start="73:9" pos:end="73:63"><name pos:start="73:9" pos:end="73:14">av_log</name><argument_list pos:start="73:15" pos:end="73:63">(<argument pos:start="73:16" pos:end="73:25"><expr pos:start="73:16" pos:end="73:25"><name pos:start="73:16" pos:end="73:25"><name pos:start="73:16" pos:end="73:18">smk</name><operator pos:start="73:19" pos:end="73:20">-&gt;</operator><name pos:start="73:21" pos:end="73:25">avctx</name></name></expr></argument>, <argument pos:start="73:28" pos:end="73:38"><expr pos:start="73:28" pos:end="73:38"><name pos:start="73:28" pos:end="73:38">AV_LOG_INFO</name></expr></argument>, <argument pos:start="73:41" pos:end="73:62"><expr pos:start="73:41" pos:end="73:62"><literal type="string" pos:start="73:41" pos:end="73:62">"Skipping FULL tree\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:51"><expr pos:start="75:9" pos:end="75:50"><name pos:start="75:9" pos:end="75:21"><name pos:start="75:9" pos:end="75:11">smk</name><operator pos:start="75:12" pos:end="75:13">-&gt;</operator><name pos:start="75:14" pos:end="75:21">full_tbl</name></name> <operator pos:start="75:23" pos:end="75:23">=</operator> <call pos:start="75:25" pos:end="75:50"><name pos:start="75:25" pos:end="75:33">av_malloc</name><argument_list pos:start="75:34" pos:end="75:50">(<argument pos:start="75:35" pos:end="75:49"><expr pos:start="75:35" pos:end="75:49"><sizeof pos:start="75:35" pos:end="75:45">sizeof<argument_list pos:start="75:41" pos:end="75:45">(<argument pos:start="75:42" pos:end="75:44"><expr pos:start="75:42" pos:end="75:44"><name pos:start="75:42" pos:end="75:44">int</name></expr></argument>)</argument_list></sizeof> <operator pos:start="75:47" pos:end="75:47">*</operator> <literal type="number" pos:start="75:49" pos:end="75:49">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="77:9" pos:end="79:35"><if pos:start="77:9" pos:end="79:35">if <condition pos:start="77:12" pos:end="77:27">(<expr pos:start="77:13" pos:end="77:26"><operator pos:start="77:13" pos:end="77:13">!</operator><name pos:start="77:14" pos:end="77:26"><name pos:start="77:14" pos:end="77:16">smk</name><operator pos:start="77:17" pos:end="77:18">-&gt;</operator><name pos:start="77:19" pos:end="77:26">full_tbl</name></name></expr>)</condition><block type="pseudo" pos:start="79:13" pos:end="79:35"><block_content pos:start="79:13" pos:end="79:35">

            <return pos:start="79:13" pos:end="79:35">return <expr pos:start="79:20" pos:end="79:34"><call pos:start="79:20" pos:end="79:34"><name pos:start="79:20" pos:end="79:26">AVERROR</name><argument_list pos:start="79:27" pos:end="79:34">(<argument pos:start="79:28" pos:end="79:33"><expr pos:start="79:28" pos:end="79:33"><name pos:start="79:28" pos:end="79:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:29"><expr pos:start="81:9" pos:end="81:28"><name pos:start="81:9" pos:end="81:24"><name pos:start="81:9" pos:end="81:11">smk</name><operator pos:start="81:12" pos:end="81:13">-&gt;</operator><name pos:start="81:14" pos:end="81:21">full_tbl</name><index pos:start="81:22" pos:end="81:24">[<expr pos:start="81:23" pos:end="81:23"><literal type="number" pos:start="81:23" pos:end="81:23">0</literal></expr>]</index></name> <operator pos:start="81:26" pos:end="81:26">=</operator> <literal type="number" pos:start="81:28" pos:end="81:28">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:70"><expr pos:start="83:9" pos:end="83:69"><name pos:start="83:9" pos:end="83:25"><name pos:start="83:9" pos:end="83:11">smk</name><operator pos:start="83:12" pos:end="83:13">-&gt;</operator><name pos:start="83:14" pos:end="83:22">full_last</name><index pos:start="83:23" pos:end="83:25">[<expr pos:start="83:24" pos:end="83:24"><literal type="number" pos:start="83:24" pos:end="83:24">0</literal></expr>]</index></name> <operator pos:start="83:27" pos:end="83:27">=</operator> <name pos:start="83:29" pos:end="83:45"><name pos:start="83:29" pos:end="83:31">smk</name><operator pos:start="83:32" pos:end="83:33">-&gt;</operator><name pos:start="83:34" pos:end="83:42">full_last</name><index pos:start="83:43" pos:end="83:45">[<expr pos:start="83:44" pos:end="83:44"><literal type="number" pos:start="83:44" pos:end="83:44">1</literal></expr>]</index></name> <operator pos:start="83:47" pos:end="83:47">=</operator> <name pos:start="83:49" pos:end="83:65"><name pos:start="83:49" pos:end="83:51">smk</name><operator pos:start="83:52" pos:end="83:53">-&gt;</operator><name pos:start="83:54" pos:end="83:62">full_last</name><index pos:start="83:63" pos:end="83:65">[<expr pos:start="83:64" pos:end="83:64"><literal type="number" pos:start="83:64" pos:end="83:64">2</literal></expr>]</index></name> <operator pos:start="83:67" pos:end="83:67">=</operator> <literal type="number" pos:start="83:69" pos:end="83:69">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="85:7" pos:end="93:5">else <block pos:start="85:12" pos:end="93:5">{<block_content pos:start="87:9" pos:end="91:23">

        <expr_stmt pos:start="87:9" pos:end="87:94"><expr pos:start="87:9" pos:end="87:93"><name pos:start="87:9" pos:end="87:11">ret</name> <operator pos:start="87:13" pos:end="87:13">=</operator> <call pos:start="87:15" pos:end="87:93"><name pos:start="87:15" pos:end="87:40">smacker_decode_header_tree</name><argument_list pos:start="87:41" pos:end="87:93">(<argument pos:start="87:42" pos:end="87:44"><expr pos:start="87:42" pos:end="87:44"><name pos:start="87:42" pos:end="87:44">smk</name></expr></argument>, <argument pos:start="87:47" pos:end="87:49"><expr pos:start="87:47" pos:end="87:49"><operator pos:start="87:47" pos:end="87:47">&amp;</operator><name pos:start="87:48" pos:end="87:49">gb</name></expr></argument>, <argument pos:start="87:52" pos:end="87:65"><expr pos:start="87:52" pos:end="87:65"><operator pos:start="87:52" pos:end="87:52">&amp;</operator><name pos:start="87:53" pos:end="87:65"><name pos:start="87:53" pos:end="87:55">smk</name><operator pos:start="87:56" pos:end="87:57">-&gt;</operator><name pos:start="87:58" pos:end="87:65">full_tbl</name></name></expr></argument>, <argument pos:start="87:68" pos:end="87:81"><expr pos:start="87:68" pos:end="87:81"><name pos:start="87:68" pos:end="87:81"><name pos:start="87:68" pos:end="87:70">smk</name><operator pos:start="87:71" pos:end="87:72">-&gt;</operator><name pos:start="87:73" pos:end="87:81">full_last</name></name></expr></argument>, <argument pos:start="87:84" pos:end="87:92"><expr pos:start="87:84" pos:end="87:92"><name pos:start="87:84" pos:end="87:92">full_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="89:9" pos:end="91:23"><if pos:start="89:9" pos:end="91:23">if <condition pos:start="89:12" pos:end="89:20">(<expr pos:start="89:13" pos:end="89:19"><name pos:start="89:13" pos:end="89:15">ret</name> <operator pos:start="89:17" pos:end="89:17">&lt;</operator> <literal type="number" pos:start="89:19" pos:end="89:19">0</literal></expr>)</condition><block type="pseudo" pos:start="91:13" pos:end="91:23"><block_content pos:start="91:13" pos:end="91:23">

            <return pos:start="91:13" pos:end="91:23">return <expr pos:start="91:20" pos:end="91:22"><name pos:start="91:20" pos:end="91:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="95:5" pos:end="117:5"><if pos:start="95:5" pos:end="109:5">if<condition pos:start="95:7" pos:end="95:23">(<expr pos:start="95:8" pos:end="95:22"><operator pos:start="95:8" pos:end="95:8">!</operator><call pos:start="95:9" pos:end="95:22"><name pos:start="95:9" pos:end="95:17">get_bits1</name><argument_list pos:start="95:18" pos:end="95:22">(<argument pos:start="95:19" pos:end="95:21"><expr pos:start="95:19" pos:end="95:21"><operator pos:start="95:19" pos:end="95:19">&amp;</operator><name pos:start="95:20" pos:end="95:21">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="95:25" pos:end="109:5">{<block_content pos:start="97:9" pos:end="107:70">

        <expr_stmt pos:start="97:9" pos:end="97:64"><expr pos:start="97:9" pos:end="97:63"><call pos:start="97:9" pos:end="97:63"><name pos:start="97:9" pos:end="97:14">av_log</name><argument_list pos:start="97:15" pos:end="97:63">(<argument pos:start="97:16" pos:end="97:25"><expr pos:start="97:16" pos:end="97:25"><name pos:start="97:16" pos:end="97:25"><name pos:start="97:16" pos:end="97:18">smk</name><operator pos:start="97:19" pos:end="97:20">-&gt;</operator><name pos:start="97:21" pos:end="97:25">avctx</name></name></expr></argument>, <argument pos:start="97:28" pos:end="97:38"><expr pos:start="97:28" pos:end="97:38"><name pos:start="97:28" pos:end="97:38">AV_LOG_INFO</name></expr></argument>, <argument pos:start="97:41" pos:end="97:62"><expr pos:start="97:41" pos:end="97:62"><literal type="string" pos:start="97:41" pos:end="97:62">"Skipping TYPE tree\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:51"><expr pos:start="99:9" pos:end="99:50"><name pos:start="99:9" pos:end="99:21"><name pos:start="99:9" pos:end="99:11">smk</name><operator pos:start="99:12" pos:end="99:13">-&gt;</operator><name pos:start="99:14" pos:end="99:21">type_tbl</name></name> <operator pos:start="99:23" pos:end="99:23">=</operator> <call pos:start="99:25" pos:end="99:50"><name pos:start="99:25" pos:end="99:33">av_malloc</name><argument_list pos:start="99:34" pos:end="99:50">(<argument pos:start="99:35" pos:end="99:49"><expr pos:start="99:35" pos:end="99:49"><sizeof pos:start="99:35" pos:end="99:45">sizeof<argument_list pos:start="99:41" pos:end="99:45">(<argument pos:start="99:42" pos:end="99:44"><expr pos:start="99:42" pos:end="99:44"><name pos:start="99:42" pos:end="99:44">int</name></expr></argument>)</argument_list></sizeof> <operator pos:start="99:47" pos:end="99:47">*</operator> <literal type="number" pos:start="99:49" pos:end="99:49">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="101:9" pos:end="103:35"><if pos:start="101:9" pos:end="103:35">if <condition pos:start="101:12" pos:end="101:27">(<expr pos:start="101:13" pos:end="101:26"><operator pos:start="101:13" pos:end="101:13">!</operator><name pos:start="101:14" pos:end="101:26"><name pos:start="101:14" pos:end="101:16">smk</name><operator pos:start="101:17" pos:end="101:18">-&gt;</operator><name pos:start="101:19" pos:end="101:26">type_tbl</name></name></expr>)</condition><block type="pseudo" pos:start="103:13" pos:end="103:35"><block_content pos:start="103:13" pos:end="103:35">

            <return pos:start="103:13" pos:end="103:35">return <expr pos:start="103:20" pos:end="103:34"><call pos:start="103:20" pos:end="103:34"><name pos:start="103:20" pos:end="103:26">AVERROR</name><argument_list pos:start="103:27" pos:end="103:34">(<argument pos:start="103:28" pos:end="103:33"><expr pos:start="103:28" pos:end="103:33"><name pos:start="103:28" pos:end="103:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:29"><expr pos:start="105:9" pos:end="105:28"><name pos:start="105:9" pos:end="105:24"><name pos:start="105:9" pos:end="105:11">smk</name><operator pos:start="105:12" pos:end="105:13">-&gt;</operator><name pos:start="105:14" pos:end="105:21">type_tbl</name><index pos:start="105:22" pos:end="105:24">[<expr pos:start="105:23" pos:end="105:23"><literal type="number" pos:start="105:23" pos:end="105:23">0</literal></expr>]</index></name> <operator pos:start="105:26" pos:end="105:26">=</operator> <literal type="number" pos:start="105:28" pos:end="105:28">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:70"><expr pos:start="107:9" pos:end="107:69"><name pos:start="107:9" pos:end="107:25"><name pos:start="107:9" pos:end="107:11">smk</name><operator pos:start="107:12" pos:end="107:13">-&gt;</operator><name pos:start="107:14" pos:end="107:22">type_last</name><index pos:start="107:23" pos:end="107:25">[<expr pos:start="107:24" pos:end="107:24"><literal type="number" pos:start="107:24" pos:end="107:24">0</literal></expr>]</index></name> <operator pos:start="107:27" pos:end="107:27">=</operator> <name pos:start="107:29" pos:end="107:45"><name pos:start="107:29" pos:end="107:31">smk</name><operator pos:start="107:32" pos:end="107:33">-&gt;</operator><name pos:start="107:34" pos:end="107:42">type_last</name><index pos:start="107:43" pos:end="107:45">[<expr pos:start="107:44" pos:end="107:44"><literal type="number" pos:start="107:44" pos:end="107:44">1</literal></expr>]</index></name> <operator pos:start="107:47" pos:end="107:47">=</operator> <name pos:start="107:49" pos:end="107:65"><name pos:start="107:49" pos:end="107:51">smk</name><operator pos:start="107:52" pos:end="107:53">-&gt;</operator><name pos:start="107:54" pos:end="107:62">type_last</name><index pos:start="107:63" pos:end="107:65">[<expr pos:start="107:64" pos:end="107:64"><literal type="number" pos:start="107:64" pos:end="107:64">2</literal></expr>]</index></name> <operator pos:start="107:67" pos:end="107:67">=</operator> <literal type="number" pos:start="107:69" pos:end="107:69">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="109:7" pos:end="117:5">else <block pos:start="109:12" pos:end="117:5">{<block_content pos:start="111:9" pos:end="115:23">

        <expr_stmt pos:start="111:9" pos:end="111:94"><expr pos:start="111:9" pos:end="111:93"><name pos:start="111:9" pos:end="111:11">ret</name> <operator pos:start="111:13" pos:end="111:13">=</operator> <call pos:start="111:15" pos:end="111:93"><name pos:start="111:15" pos:end="111:40">smacker_decode_header_tree</name><argument_list pos:start="111:41" pos:end="111:93">(<argument pos:start="111:42" pos:end="111:44"><expr pos:start="111:42" pos:end="111:44"><name pos:start="111:42" pos:end="111:44">smk</name></expr></argument>, <argument pos:start="111:47" pos:end="111:49"><expr pos:start="111:47" pos:end="111:49"><operator pos:start="111:47" pos:end="111:47">&amp;</operator><name pos:start="111:48" pos:end="111:49">gb</name></expr></argument>, <argument pos:start="111:52" pos:end="111:65"><expr pos:start="111:52" pos:end="111:65"><operator pos:start="111:52" pos:end="111:52">&amp;</operator><name pos:start="111:53" pos:end="111:65"><name pos:start="111:53" pos:end="111:55">smk</name><operator pos:start="111:56" pos:end="111:57">-&gt;</operator><name pos:start="111:58" pos:end="111:65">type_tbl</name></name></expr></argument>, <argument pos:start="111:68" pos:end="111:81"><expr pos:start="111:68" pos:end="111:81"><name pos:start="111:68" pos:end="111:81"><name pos:start="111:68" pos:end="111:70">smk</name><operator pos:start="111:71" pos:end="111:72">-&gt;</operator><name pos:start="111:73" pos:end="111:81">type_last</name></name></expr></argument>, <argument pos:start="111:84" pos:end="111:92"><expr pos:start="111:84" pos:end="111:92"><name pos:start="111:84" pos:end="111:92">type_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="113:9" pos:end="115:23"><if pos:start="113:9" pos:end="115:23">if <condition pos:start="113:12" pos:end="113:20">(<expr pos:start="113:13" pos:end="113:19"><name pos:start="113:13" pos:end="113:15">ret</name> <operator pos:start="113:17" pos:end="113:17">&lt;</operator> <literal type="number" pos:start="113:19" pos:end="113:19">0</literal></expr>)</condition><block type="pseudo" pos:start="115:13" pos:end="115:23"><block_content pos:start="115:13" pos:end="115:23">

            <return pos:start="115:13" pos:end="115:23">return <expr pos:start="115:20" pos:end="115:22"><name pos:start="115:20" pos:end="115:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <return pos:start="121:5" pos:end="121:13">return <expr pos:start="121:12" pos:end="121:12"><literal type="number" pos:start="121:12" pos:end="121:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
