<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2692.c" pos:tabs="8"><function pos:start="1:1" pos:end="331:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">vmdk_snapshot_create</name><parameter_list pos:start="1:32" pos:end="1:79">(<parameter pos:start="1:33" pos:end="1:52"><decl pos:start="1:33" pos:end="1:52"><type pos:start="1:33" pos:end="1:52"><specifier pos:start="1:33" pos:end="1:37">const</specifier> <name pos:start="1:39" pos:end="1:42">char</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:52">filename</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:78"><decl pos:start="1:55" pos:end="1:78"><type pos:start="1:55" pos:end="1:78"><specifier pos:start="1:55" pos:end="1:59">const</specifier> <name pos:start="1:61" pos:end="1:64">char</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:78">backing_file</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="331:1">{<block_content pos:start="5:5" pos:end="329:15">

    <decl_stmt pos:start="5:5" pos:end="5:21"><decl pos:start="5:5" pos:end="5:14"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:14">snp_fd</name></decl>, <decl pos:start="5:17" pos:end="5:20"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:17" pos:end="5:20">p_fd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:18">p_cid</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:36"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">char</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:16">p_name</name></decl>, <decl pos:start="11:19" pos:end="11:25"><type ref="prev" pos:start="11:5" pos:end="11:10"><modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:25">gd_buf</name></decl>, <decl pos:start="11:28" pos:end="11:35"><type ref="prev" pos:start="11:5" pos:end="11:10"><modifier pos:start="11:28" pos:end="11:28">*</modifier></type><name pos:start="11:29" pos:end="11:35">rgd_buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:41"><decl pos:start="13:5" pos:end="13:29"><type pos:start="13:5" pos:end="13:16"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:14">char</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:29">real_filename</name></decl>, <decl pos:start="13:32" pos:end="13:40"><type ref="prev" pos:start="13:5" pos:end="13:16"><modifier pos:start="13:32" pos:end="13:32">*</modifier></type><name pos:start="13:33" pos:end="13:40">temp_str</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:23"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:15"><name pos:start="15:5" pos:end="15:15">VMDK4Header</name></type> <name pos:start="15:17" pos:end="15:22">header</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:34"><decl pos:start="17:5" pos:end="17:24"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:24">gde_entries</name></decl>, <decl pos:start="17:27" pos:end="17:33"><type ref="prev" pos:start="17:5" pos:end="17:12"/><name pos:start="17:27" pos:end="17:33">gd_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:53"><decl pos:start="19:5" pos:end="19:21"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:11">int64_t</name></type> <name pos:start="19:13" pos:end="19:21">gd_offset</name></decl>, <decl pos:start="19:24" pos:end="19:33"><type ref="prev" pos:start="19:5" pos:end="19:11"/><name pos:start="19:24" pos:end="19:33">rgd_offset</name></decl>, <decl pos:start="19:36" pos:end="19:43"><type ref="prev" pos:start="19:5" pos:end="19:11"/><name pos:start="19:36" pos:end="19:43">capacity</name></decl>, <decl pos:start="19:46" pos:end="19:52"><type ref="prev" pos:start="19:5" pos:end="19:11"/><name pos:start="19:46" pos:end="19:52">gt_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:64"><decl pos:start="21:5" pos:end="21:26"><type pos:start="21:5" pos:end="21:8"><name pos:start="21:5" pos:end="21:8">char</name></type> <name pos:start="21:10" pos:end="21:26"><name pos:start="21:10" pos:end="21:15">p_desc</name><index pos:start="21:16" pos:end="21:26">[<expr pos:start="21:17" pos:end="21:25"><name pos:start="21:17" pos:end="21:25">DESC_SIZE</name></expr>]</index></name></decl>, <decl pos:start="21:29" pos:end="21:45"><type ref="prev" pos:start="21:5" pos:end="21:8"/><name pos:start="21:29" pos:end="21:45"><name pos:start="21:29" pos:end="21:34">s_desc</name><index pos:start="21:35" pos:end="21:45">[<expr pos:start="21:36" pos:end="21:44"><name pos:start="21:36" pos:end="21:44">DESC_SIZE</name></expr>]</index></name></decl>, <decl pos:start="21:48" pos:end="21:63"><type ref="prev" pos:start="21:5" pos:end="21:8"/><name pos:start="21:48" pos:end="21:63"><name pos:start="21:48" pos:end="21:50">hdr</name><index pos:start="21:51" pos:end="21:63">[<expr pos:start="21:52" pos:end="21:62"><name pos:start="21:52" pos:end="21:62">HEADER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="49:9"><decl pos:start="23:5" pos:end="49:8"><type pos:start="23:5" pos:end="23:21"><specifier pos:start="23:5" pos:end="23:10">static</specifier> <specifier pos:start="23:12" pos:end="23:16">const</specifier> <name pos:start="23:18" pos:end="23:21">char</name></type> <name pos:start="23:23" pos:end="23:37"><name pos:start="23:23" pos:end="23:35">desc_template</name><index pos:start="23:36" pos:end="23:37">[]</index></name> <init pos:start="23:39" pos:end="49:8">=

    <expr pos:start="25:5" pos:end="49:8"><literal type="string" pos:start="25:5" pos:end="25:29">"# Disk DescriptorFile\n"</literal>

    <literal type="string" pos:start="27:5" pos:end="27:17">"version=1\n"</literal>

    <literal type="string" pos:start="29:5" pos:end="29:14">"CID=%x\n"</literal>

    <literal type="string" pos:start="31:5" pos:end="31:20">"parentCID=%x\n"</literal>

    <literal type="string" pos:start="33:5" pos:end="33:39">"createType=\"monolithicSparse\"\n"</literal>

    <literal type="string" pos:start="35:5" pos:end="35:33">"parentFileNameHint=\"%s\"\n"</literal>

    <literal type="string" pos:start="37:5" pos:end="37:8">"\n"</literal>

    <literal type="string" pos:start="39:5" pos:end="39:28">"# Extent description\n"</literal>

    <literal type="string" pos:start="41:5" pos:end="41:27">"RW %u SPARSE \"%s\"\n"</literal>

    <literal type="string" pos:start="43:5" pos:end="43:8">"\n"</literal>

    <literal type="string" pos:start="45:5" pos:end="45:29">"# The Disk Data Base \n"</literal>

    <literal type="string" pos:start="47:5" pos:end="47:12">"#DDB\n"</literal>

    <literal type="string" pos:start="49:5" pos:end="49:8">"\n"</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:87"><expr pos:start="53:5" pos:end="53:86"><name pos:start="53:5" pos:end="53:10">snp_fd</name> <operator pos:start="53:12" pos:end="53:12">=</operator> <call pos:start="53:14" pos:end="53:86"><name pos:start="53:14" pos:end="53:17">open</name><argument_list pos:start="53:18" pos:end="53:86">(<argument pos:start="53:19" pos:end="53:26"><expr pos:start="53:19" pos:end="53:26"><name pos:start="53:19" pos:end="53:26">filename</name></expr></argument>, <argument pos:start="53:29" pos:end="53:79"><expr pos:start="53:29" pos:end="53:79"><name pos:start="53:29" pos:end="53:34">O_RDWR</name> <operator pos:start="53:36" pos:end="53:36">|</operator> <name pos:start="53:38" pos:end="53:44">O_CREAT</name> <operator pos:start="53:46" pos:end="53:46">|</operator> <name pos:start="53:48" pos:end="53:54">O_TRUNC</name> <operator pos:start="53:56" pos:end="53:56">|</operator> <name pos:start="53:58" pos:end="53:65">O_BINARY</name> <operator pos:start="53:67" pos:end="53:67">|</operator> <name pos:start="53:69" pos:end="53:79">O_LARGEFILE</name></expr></argument>, <argument pos:start="53:82" pos:end="53:85"><expr pos:start="53:82" pos:end="53:85"><literal type="number" pos:start="53:82" pos:end="53:85">0644</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="55:5" pos:end="57:22"><if pos:start="55:5" pos:end="57:22">if <condition pos:start="55:8" pos:end="55:19">(<expr pos:start="55:9" pos:end="55:18"><name pos:start="55:9" pos:end="55:14">snp_fd</name> <operator pos:start="55:16" pos:end="55:16">&lt;</operator> <literal type="number" pos:start="55:18" pos:end="55:18">0</literal></expr>)</condition><block type="pseudo" pos:start="57:9" pos:end="57:22"><block_content pos:start="57:9" pos:end="57:22">

        <return pos:start="57:9" pos:end="57:22">return <expr pos:start="57:16" pos:end="57:21"><operator pos:start="57:16" pos:end="57:16">-</operator><name pos:start="57:17" pos:end="57:21">errno</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:65"><expr pos:start="59:5" pos:end="59:64"><name pos:start="59:5" pos:end="59:8">p_fd</name> <operator pos:start="59:10" pos:end="59:10">=</operator> <call pos:start="59:12" pos:end="59:64"><name pos:start="59:12" pos:end="59:15">open</name><argument_list pos:start="59:16" pos:end="59:64">(<argument pos:start="59:17" pos:end="59:28"><expr pos:start="59:17" pos:end="59:28"><name pos:start="59:17" pos:end="59:28">backing_file</name></expr></argument>, <argument pos:start="59:31" pos:end="59:63"><expr pos:start="59:31" pos:end="59:63"><name pos:start="59:31" pos:end="59:38">O_RDONLY</name> <operator pos:start="59:40" pos:end="59:40">|</operator> <name pos:start="59:42" pos:end="59:49">O_BINARY</name> <operator pos:start="59:51" pos:end="59:51">|</operator> <name pos:start="59:53" pos:end="59:63">O_LARGEFILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="61:5" pos:end="67:5"><if pos:start="61:5" pos:end="67:5">if <condition pos:start="61:8" pos:end="61:17">(<expr pos:start="61:9" pos:end="61:16"><name pos:start="61:9" pos:end="61:12">p_fd</name> <operator pos:start="61:14" pos:end="61:14">&lt;</operator> <literal type="number" pos:start="61:16" pos:end="61:16">0</literal></expr>)</condition> <block pos:start="61:19" pos:end="67:5">{<block_content pos:start="63:9" pos:end="65:22">

        <expr_stmt pos:start="63:9" pos:end="63:22"><expr pos:start="63:9" pos:end="63:21"><call pos:start="63:9" pos:end="63:21"><name pos:start="63:9" pos:end="63:13">close</name><argument_list pos:start="63:14" pos:end="63:21">(<argument pos:start="63:15" pos:end="63:20"><expr pos:start="63:15" pos:end="63:20"><name pos:start="63:15" pos:end="63:20">snp_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="65:9" pos:end="65:22">return <expr pos:start="65:16" pos:end="65:21"><operator pos:start="65:16" pos:end="65:16">-</operator><name pos:start="65:17" pos:end="65:21">errno</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="71:5" pos:end="71:25">/* read the header */</comment>

    <if_stmt pos:start="73:5" pos:end="79:5"><if pos:start="73:5" pos:end="79:5">if <condition pos:start="73:8" pos:end="73:41">(<expr pos:start="73:9" pos:end="73:40"><call pos:start="73:9" pos:end="73:34"><name pos:start="73:9" pos:end="73:13">lseek</name><argument_list pos:start="73:14" pos:end="73:34">(<argument pos:start="73:15" pos:end="73:18"><expr pos:start="73:15" pos:end="73:18"><name pos:start="73:15" pos:end="73:18">p_fd</name></expr></argument>, <argument pos:start="73:21" pos:end="73:23"><expr pos:start="73:21" pos:end="73:23"><literal type="number" pos:start="73:21" pos:end="73:23">0x0</literal></expr></argument>, <argument pos:start="73:26" pos:end="73:33"><expr pos:start="73:26" pos:end="73:33"><name pos:start="73:26" pos:end="73:33">SEEK_SET</name></expr></argument>)</argument_list></call> <operator pos:start="73:36" pos:end="73:37">==</operator> <operator pos:start="73:39" pos:end="73:39">-</operator><literal type="number" pos:start="73:40" pos:end="73:40">1</literal></expr>)</condition> <block pos:start="73:43" pos:end="79:5">{<block_content pos:start="75:9" pos:end="77:18">

        <expr_stmt pos:start="75:9" pos:end="75:21"><expr pos:start="75:9" pos:end="75:20"><name pos:start="75:9" pos:end="75:11">ret</name> <operator pos:start="75:13" pos:end="75:13">=</operator> <operator pos:start="75:15" pos:end="75:15">-</operator><name pos:start="75:16" pos:end="75:20">errno</name></expr>;</expr_stmt>

        <goto pos:start="77:9" pos:end="77:18">goto <name pos:start="77:14" pos:end="77:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="81:5" pos:end="87:5"><if pos:start="81:5" pos:end="87:5">if <condition pos:start="81:8" pos:end="81:52">(<expr pos:start="81:9" pos:end="81:51"><call pos:start="81:9" pos:end="81:36"><name pos:start="81:9" pos:end="81:12">read</name><argument_list pos:start="81:13" pos:end="81:36">(<argument pos:start="81:14" pos:end="81:17"><expr pos:start="81:14" pos:end="81:17"><name pos:start="81:14" pos:end="81:17">p_fd</name></expr></argument>, <argument pos:start="81:20" pos:end="81:22"><expr pos:start="81:20" pos:end="81:22"><name pos:start="81:20" pos:end="81:22">hdr</name></expr></argument>, <argument pos:start="81:25" pos:end="81:35"><expr pos:start="81:25" pos:end="81:35"><name pos:start="81:25" pos:end="81:35">HEADER_SIZE</name></expr></argument>)</argument_list></call> <operator pos:start="81:38" pos:end="81:39">!=</operator> <name pos:start="81:41" pos:end="81:51">HEADER_SIZE</name></expr>)</condition> <block pos:start="81:54" pos:end="87:5">{<block_content pos:start="83:9" pos:end="85:18">

        <expr_stmt pos:start="83:9" pos:end="83:21"><expr pos:start="83:9" pos:end="83:20"><name pos:start="83:9" pos:end="83:11">ret</name> <operator pos:start="83:13" pos:end="83:13">=</operator> <operator pos:start="83:15" pos:end="83:15">-</operator><name pos:start="83:16" pos:end="83:20">errno</name></expr>;</expr_stmt>

        <goto pos:start="85:9" pos:end="85:18">goto <name pos:start="85:14" pos:end="85:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="91:5" pos:end="91:26">/* write the header */</comment>

    <if_stmt pos:start="93:5" pos:end="99:5"><if pos:start="93:5" pos:end="99:5">if <condition pos:start="93:8" pos:end="93:43">(<expr pos:start="93:9" pos:end="93:42"><call pos:start="93:9" pos:end="93:36"><name pos:start="93:9" pos:end="93:13">lseek</name><argument_list pos:start="93:14" pos:end="93:36">(<argument pos:start="93:15" pos:end="93:20"><expr pos:start="93:15" pos:end="93:20"><name pos:start="93:15" pos:end="93:20">snp_fd</name></expr></argument>, <argument pos:start="93:23" pos:end="93:25"><expr pos:start="93:23" pos:end="93:25"><literal type="number" pos:start="93:23" pos:end="93:25">0x0</literal></expr></argument>, <argument pos:start="93:28" pos:end="93:35"><expr pos:start="93:28" pos:end="93:35"><name pos:start="93:28" pos:end="93:35">SEEK_SET</name></expr></argument>)</argument_list></call> <operator pos:start="93:38" pos:end="93:39">==</operator> <operator pos:start="93:41" pos:end="93:41">-</operator><literal type="number" pos:start="93:42" pos:end="93:42">1</literal></expr>)</condition> <block pos:start="93:45" pos:end="99:5">{<block_content pos:start="95:9" pos:end="97:18">

        <expr_stmt pos:start="95:9" pos:end="95:21"><expr pos:start="95:9" pos:end="95:20"><name pos:start="95:9" pos:end="95:11">ret</name> <operator pos:start="95:13" pos:end="95:13">=</operator> <operator pos:start="95:15" pos:end="95:15">-</operator><name pos:start="95:16" pos:end="95:20">errno</name></expr>;</expr_stmt>

        <goto pos:start="97:9" pos:end="97:18">goto <name pos:start="97:14" pos:end="97:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="101:5" pos:end="107:5"><if pos:start="101:5" pos:end="107:5">if <condition pos:start="101:8" pos:end="101:46">(<expr pos:start="101:9" pos:end="101:45"><call pos:start="101:9" pos:end="101:39"><name pos:start="101:9" pos:end="101:13">write</name><argument_list pos:start="101:14" pos:end="101:39">(<argument pos:start="101:15" pos:end="101:20"><expr pos:start="101:15" pos:end="101:20"><name pos:start="101:15" pos:end="101:20">snp_fd</name></expr></argument>, <argument pos:start="101:23" pos:end="101:25"><expr pos:start="101:23" pos:end="101:25"><name pos:start="101:23" pos:end="101:25">hdr</name></expr></argument>, <argument pos:start="101:28" pos:end="101:38"><expr pos:start="101:28" pos:end="101:38"><name pos:start="101:28" pos:end="101:38">HEADER_SIZE</name></expr></argument>)</argument_list></call> <operator pos:start="101:41" pos:end="101:42">==</operator> <operator pos:start="101:44" pos:end="101:44">-</operator><literal type="number" pos:start="101:45" pos:end="101:45">1</literal></expr>)</condition> <block pos:start="101:48" pos:end="107:5">{<block_content pos:start="103:9" pos:end="105:18">

        <expr_stmt pos:start="103:9" pos:end="103:21"><expr pos:start="103:9" pos:end="103:20"><name pos:start="103:9" pos:end="103:11">ret</name> <operator pos:start="103:13" pos:end="103:13">=</operator> <operator pos:start="103:15" pos:end="103:15">-</operator><name pos:start="103:16" pos:end="103:20">errno</name></expr>;</expr_stmt>

        <goto pos:start="105:9" pos:end="105:18">goto <name pos:start="105:14" pos:end="105:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="111:5" pos:end="111:39"><expr pos:start="111:5" pos:end="111:38"><call pos:start="111:5" pos:end="111:38"><name pos:start="111:5" pos:end="111:10">memset</name><argument_list pos:start="111:11" pos:end="111:38">(<argument pos:start="111:12" pos:end="111:18"><expr pos:start="111:12" pos:end="111:18"><operator pos:start="111:12" pos:end="111:12">&amp;</operator><name pos:start="111:13" pos:end="111:18">header</name></expr></argument>, <argument pos:start="111:21" pos:end="111:21"><expr pos:start="111:21" pos:end="111:21"><literal type="number" pos:start="111:21" pos:end="111:21">0</literal></expr></argument>, <argument pos:start="111:24" pos:end="111:37"><expr pos:start="111:24" pos:end="111:37"><sizeof pos:start="111:24" pos:end="111:37">sizeof<argument_list pos:start="111:30" pos:end="111:37">(<argument pos:start="111:31" pos:end="111:36"><expr pos:start="111:31" pos:end="111:36"><name pos:start="111:31" pos:end="111:36">header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:44"><expr pos:start="113:5" pos:end="113:43"><call pos:start="113:5" pos:end="113:43"><name pos:start="113:5" pos:end="113:10">memcpy</name><argument_list pos:start="113:11" pos:end="113:43">(<argument pos:start="113:12" pos:end="113:18"><expr pos:start="113:12" pos:end="113:18"><operator pos:start="113:12" pos:end="113:12">&amp;</operator><name pos:start="113:13" pos:end="113:18">header</name></expr></argument>,<argument pos:start="113:20" pos:end="113:26"><expr pos:start="113:20" pos:end="113:26"><operator pos:start="113:20" pos:end="113:20">&amp;</operator><name pos:start="113:21" pos:end="113:26"><name pos:start="113:21" pos:end="113:23">hdr</name><index pos:start="113:24" pos:end="113:26">[<expr pos:start="113:25" pos:end="113:25"><literal type="number" pos:start="113:25" pos:end="113:25">4</literal></expr>]</index></name></expr></argument>, <argument pos:start="113:29" pos:end="113:42"><expr pos:start="113:29" pos:end="113:42"><sizeof pos:start="113:29" pos:end="113:42">sizeof<argument_list pos:start="113:35" pos:end="113:42">(<argument pos:start="113:36" pos:end="113:41"><expr pos:start="113:36" pos:end="113:41"><name pos:start="113:36" pos:end="113:41">header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="113:46" pos:end="113:68">// skip the VMDK4_MAGIC</comment>



    <if_stmt pos:start="117:5" pos:end="123:5"><if pos:start="117:5" pos:end="123:5">if <condition pos:start="117:8" pos:end="117:52">(<expr pos:start="117:9" pos:end="117:51"><call pos:start="117:9" pos:end="117:51"><name pos:start="117:9" pos:end="117:17">ftruncate</name><argument_list pos:start="117:18" pos:end="117:51">(<argument pos:start="117:19" pos:end="117:24"><expr pos:start="117:19" pos:end="117:24"><name pos:start="117:19" pos:end="117:24">snp_fd</name></expr></argument>, <argument pos:start="117:27" pos:end="117:50"><expr pos:start="117:27" pos:end="117:50"><name pos:start="117:27" pos:end="117:45"><name pos:start="117:27" pos:end="117:32">header</name><operator pos:start="117:33" pos:end="117:33">.</operator><name pos:start="117:34" pos:end="117:45">grain_offset</name></name> <operator pos:start="117:47" pos:end="117:48">&lt;&lt;</operator> <literal type="number" pos:start="117:50" pos:end="117:50">9</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="117:54" pos:end="123:5">{<block_content pos:start="119:9" pos:end="121:18">

        <expr_stmt pos:start="119:9" pos:end="119:21"><expr pos:start="119:9" pos:end="119:20"><name pos:start="119:9" pos:end="119:11">ret</name> <operator pos:start="119:13" pos:end="119:13">=</operator> <operator pos:start="119:15" pos:end="119:15">-</operator><name pos:start="119:16" pos:end="119:20">errno</name></expr>;</expr_stmt>

        <goto pos:start="121:9" pos:end="121:18">goto <name pos:start="121:14" pos:end="121:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="125:5" pos:end="125:39">/* the descriptor offset = 0x200 */</comment>

    <if_stmt pos:start="127:5" pos:end="133:5"><if pos:start="127:5" pos:end="133:5">if <condition pos:start="127:8" pos:end="127:43">(<expr pos:start="127:9" pos:end="127:42"><call pos:start="127:9" pos:end="127:36"><name pos:start="127:9" pos:end="127:13">lseek</name><argument_list pos:start="127:14" pos:end="127:36">(<argument pos:start="127:15" pos:end="127:18"><expr pos:start="127:15" pos:end="127:18"><name pos:start="127:15" pos:end="127:18">p_fd</name></expr></argument>, <argument pos:start="127:21" pos:end="127:25"><expr pos:start="127:21" pos:end="127:25"><literal type="number" pos:start="127:21" pos:end="127:25">0x200</literal></expr></argument>, <argument pos:start="127:28" pos:end="127:35"><expr pos:start="127:28" pos:end="127:35"><name pos:start="127:28" pos:end="127:35">SEEK_SET</name></expr></argument>)</argument_list></call> <operator pos:start="127:38" pos:end="127:39">==</operator> <operator pos:start="127:41" pos:end="127:41">-</operator><literal type="number" pos:start="127:42" pos:end="127:42">1</literal></expr>)</condition> <block pos:start="127:45" pos:end="133:5">{<block_content pos:start="129:9" pos:end="131:18">

        <expr_stmt pos:start="129:9" pos:end="129:21"><expr pos:start="129:9" pos:end="129:20"><name pos:start="129:9" pos:end="129:11">ret</name> <operator pos:start="129:13" pos:end="129:13">=</operator> <operator pos:start="129:15" pos:end="129:15">-</operator><name pos:start="129:16" pos:end="129:20">errno</name></expr>;</expr_stmt>

        <goto pos:start="131:9" pos:end="131:18">goto <name pos:start="131:14" pos:end="131:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="135:5" pos:end="141:5"><if pos:start="135:5" pos:end="141:5">if <condition pos:start="135:8" pos:end="135:51">(<expr pos:start="135:9" pos:end="135:50"><call pos:start="135:9" pos:end="135:37"><name pos:start="135:9" pos:end="135:12">read</name><argument_list pos:start="135:13" pos:end="135:37">(<argument pos:start="135:14" pos:end="135:17"><expr pos:start="135:14" pos:end="135:17"><name pos:start="135:14" pos:end="135:17">p_fd</name></expr></argument>, <argument pos:start="135:20" pos:end="135:25"><expr pos:start="135:20" pos:end="135:25"><name pos:start="135:20" pos:end="135:25">p_desc</name></expr></argument>, <argument pos:start="135:28" pos:end="135:36"><expr pos:start="135:28" pos:end="135:36"><name pos:start="135:28" pos:end="135:36">DESC_SIZE</name></expr></argument>)</argument_list></call> <operator pos:start="135:39" pos:end="135:40">!=</operator> <name pos:start="135:42" pos:end="135:50">DESC_SIZE</name></expr>)</condition> <block pos:start="135:53" pos:end="141:5">{<block_content pos:start="137:9" pos:end="139:18">

        <expr_stmt pos:start="137:9" pos:end="137:21"><expr pos:start="137:9" pos:end="137:20"><name pos:start="137:9" pos:end="137:11">ret</name> <operator pos:start="137:13" pos:end="137:13">=</operator> <operator pos:start="137:15" pos:end="137:15">-</operator><name pos:start="137:16" pos:end="137:20">errno</name></expr>;</expr_stmt>

        <goto pos:start="139:9" pos:end="139:18">goto <name pos:start="139:14" pos:end="139:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="145:5" pos:end="151:5"><if pos:start="145:5" pos:end="151:5">if <condition pos:start="145:8" pos:end="145:48">(<expr pos:start="145:9" pos:end="145:47"><operator pos:start="145:9" pos:end="145:9">(</operator><name pos:start="145:10" pos:end="145:15">p_name</name> <operator pos:start="145:17" pos:end="145:17">=</operator> <call pos:start="145:19" pos:end="145:38"><name pos:start="145:19" pos:end="145:24">strstr</name><argument_list pos:start="145:25" pos:end="145:38">(<argument pos:start="145:26" pos:end="145:31"><expr pos:start="145:26" pos:end="145:31"><name pos:start="145:26" pos:end="145:31">p_desc</name></expr></argument>,<argument pos:start="145:33" pos:end="145:37"><expr pos:start="145:33" pos:end="145:37"><literal type="string" pos:start="145:33" pos:end="145:37">"CID"</literal></expr></argument>)</argument_list></call><operator pos:start="145:39" pos:end="145:39">)</operator> <operator pos:start="145:41" pos:end="145:42">!=</operator> <name pos:start="145:44" pos:end="145:47">NULL</name></expr>)</condition> <block pos:start="145:50" pos:end="151:5">{<block_content pos:start="147:9" pos:end="149:35">

        <expr_stmt pos:start="147:9" pos:end="147:32"><expr pos:start="147:9" pos:end="147:31"><name pos:start="147:9" pos:end="147:14">p_name</name> <operator pos:start="147:16" pos:end="147:17">+=</operator> <sizeof pos:start="147:19" pos:end="147:31">sizeof<argument_list pos:start="147:25" pos:end="147:31">(<argument pos:start="147:26" pos:end="147:30"><expr pos:start="147:26" pos:end="147:30"><literal type="string" pos:start="147:26" pos:end="147:30">"CID"</literal></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:35"><expr pos:start="149:9" pos:end="149:34"><call pos:start="149:9" pos:end="149:34"><name pos:start="149:9" pos:end="149:14">sscanf</name><argument_list pos:start="149:15" pos:end="149:34">(<argument pos:start="149:16" pos:end="149:21"><expr pos:start="149:16" pos:end="149:21"><name pos:start="149:16" pos:end="149:21">p_name</name></expr></argument>,<argument pos:start="149:23" pos:end="149:26"><expr pos:start="149:23" pos:end="149:26"><literal type="string" pos:start="149:23" pos:end="149:26">"%x"</literal></expr></argument>,<argument pos:start="149:28" pos:end="149:33"><expr pos:start="149:28" pos:end="149:33"><operator pos:start="149:28" pos:end="149:28">&amp;</operator><name pos:start="149:29" pos:end="149:33">p_cid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="155:5" pos:end="155:29"><expr pos:start="155:5" pos:end="155:28"><name pos:start="155:5" pos:end="155:17">real_filename</name> <operator pos:start="155:19" pos:end="155:19">=</operator> <name pos:start="155:21" pos:end="155:28">filename</name></expr>;</expr_stmt>

    <if_stmt pos:start="157:5" pos:end="159:37"><if pos:start="157:5" pos:end="159:37">if <condition pos:start="157:8" pos:end="157:58">(<expr pos:start="157:9" pos:end="157:57"><operator pos:start="157:9" pos:end="157:9">(</operator><name pos:start="157:10" pos:end="157:17">temp_str</name> <operator pos:start="157:19" pos:end="157:19">=</operator> <call pos:start="157:21" pos:end="157:48"><name pos:start="157:21" pos:end="157:27">strrchr</name><argument_list pos:start="157:28" pos:end="157:48">(<argument pos:start="157:29" pos:end="157:41"><expr pos:start="157:29" pos:end="157:41"><name pos:start="157:29" pos:end="157:41">real_filename</name></expr></argument>, <argument pos:start="157:44" pos:end="157:47"><expr pos:start="157:44" pos:end="157:47"><literal type="char" pos:start="157:44" pos:end="157:47">'\\'</literal></expr></argument>)</argument_list></call><operator pos:start="157:49" pos:end="157:49">)</operator> <operator pos:start="157:51" pos:end="157:52">!=</operator> <name pos:start="157:54" pos:end="157:57">NULL</name></expr>)</condition><block type="pseudo" pos:start="159:9" pos:end="159:37"><block_content pos:start="159:9" pos:end="159:37">

        <expr_stmt pos:start="159:9" pos:end="159:37"><expr pos:start="159:9" pos:end="159:36"><name pos:start="159:9" pos:end="159:21">real_filename</name> <operator pos:start="159:23" pos:end="159:23">=</operator> <name pos:start="159:25" pos:end="159:32">temp_str</name> <operator pos:start="159:34" pos:end="159:34">+</operator> <literal type="number" pos:start="159:36" pos:end="159:36">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="161:5" pos:end="163:37"><if pos:start="161:5" pos:end="163:37">if <condition pos:start="161:8" pos:end="161:57">(<expr pos:start="161:9" pos:end="161:56"><operator pos:start="161:9" pos:end="161:9">(</operator><name pos:start="161:10" pos:end="161:17">temp_str</name> <operator pos:start="161:19" pos:end="161:19">=</operator> <call pos:start="161:21" pos:end="161:47"><name pos:start="161:21" pos:end="161:27">strrchr</name><argument_list pos:start="161:28" pos:end="161:47">(<argument pos:start="161:29" pos:end="161:41"><expr pos:start="161:29" pos:end="161:41"><name pos:start="161:29" pos:end="161:41">real_filename</name></expr></argument>, <argument pos:start="161:44" pos:end="161:46"><expr pos:start="161:44" pos:end="161:46"><literal type="char" pos:start="161:44" pos:end="161:46">'/'</literal></expr></argument>)</argument_list></call><operator pos:start="161:48" pos:end="161:48">)</operator> <operator pos:start="161:50" pos:end="161:51">!=</operator> <name pos:start="161:53" pos:end="161:56">NULL</name></expr>)</condition><block type="pseudo" pos:start="163:9" pos:end="163:37"><block_content pos:start="163:9" pos:end="163:37">

        <expr_stmt pos:start="163:9" pos:end="163:37"><expr pos:start="163:9" pos:end="163:36"><name pos:start="163:9" pos:end="163:21">real_filename</name> <operator pos:start="163:23" pos:end="163:23">=</operator> <name pos:start="163:25" pos:end="163:32">temp_str</name> <operator pos:start="163:34" pos:end="163:34">+</operator> <literal type="number" pos:start="163:36" pos:end="163:36">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="165:5" pos:end="167:37"><if pos:start="165:5" pos:end="167:37">if <condition pos:start="165:8" pos:end="165:57">(<expr pos:start="165:9" pos:end="165:56"><operator pos:start="165:9" pos:end="165:9">(</operator><name pos:start="165:10" pos:end="165:17">temp_str</name> <operator pos:start="165:19" pos:end="165:19">=</operator> <call pos:start="165:21" pos:end="165:47"><name pos:start="165:21" pos:end="165:27">strrchr</name><argument_list pos:start="165:28" pos:end="165:47">(<argument pos:start="165:29" pos:end="165:41"><expr pos:start="165:29" pos:end="165:41"><name pos:start="165:29" pos:end="165:41">real_filename</name></expr></argument>, <argument pos:start="165:44" pos:end="165:46"><expr pos:start="165:44" pos:end="165:46"><literal type="char" pos:start="165:44" pos:end="165:46">':'</literal></expr></argument>)</argument_list></call><operator pos:start="165:48" pos:end="165:48">)</operator> <operator pos:start="165:50" pos:end="165:51">!=</operator> <name pos:start="165:53" pos:end="165:56">NULL</name></expr>)</condition><block type="pseudo" pos:start="167:9" pos:end="167:37"><block_content pos:start="167:9" pos:end="167:37">

        <expr_stmt pos:start="167:9" pos:end="167:37"><expr pos:start="167:9" pos:end="167:36"><name pos:start="167:9" pos:end="167:21">real_filename</name> <operator pos:start="167:23" pos:end="167:23">=</operator> <name pos:start="167:25" pos:end="167:32">temp_str</name> <operator pos:start="167:34" pos:end="167:34">+</operator> <literal type="number" pos:start="167:36" pos:end="167:36">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="171:5" pos:end="173:55"><expr pos:start="171:5" pos:end="173:54"><call pos:start="171:5" pos:end="173:54"><name pos:start="171:5" pos:end="171:12">snprintf</name><argument_list pos:start="171:13" pos:end="173:54">(<argument pos:start="171:14" pos:end="171:19"><expr pos:start="171:14" pos:end="171:19"><name pos:start="171:14" pos:end="171:19">s_desc</name></expr></argument>, <argument pos:start="171:22" pos:end="171:35"><expr pos:start="171:22" pos:end="171:35"><sizeof pos:start="171:22" pos:end="171:35">sizeof<argument_list pos:start="171:28" pos:end="171:35">(<argument pos:start="171:29" pos:end="171:34"><expr pos:start="171:29" pos:end="171:34"><name pos:start="171:29" pos:end="171:34">s_desc</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="171:38" pos:end="171:50"><expr pos:start="171:38" pos:end="171:50"><name pos:start="171:38" pos:end="171:50">desc_template</name></expr></argument>, <argument pos:start="171:53" pos:end="171:57"><expr pos:start="171:53" pos:end="171:57"><name pos:start="171:53" pos:end="171:57">p_cid</name></expr></argument>, <argument pos:start="171:60" pos:end="171:64"><expr pos:start="171:60" pos:end="171:64"><name pos:start="171:60" pos:end="171:64">p_cid</name></expr></argument>, <argument pos:start="171:67" pos:end="171:78"><expr pos:start="171:67" pos:end="171:78"><name pos:start="171:67" pos:end="171:78">backing_file</name></expr></argument>,

             <argument pos:start="173:14" pos:end="173:38"><expr pos:start="173:14" pos:end="173:38"><operator pos:start="173:14" pos:end="173:14">(</operator><name pos:start="173:15" pos:end="173:22">uint32_t</name><operator pos:start="173:23" pos:end="173:23">)</operator><name pos:start="173:24" pos:end="173:38"><name pos:start="173:24" pos:end="173:29">header</name><operator pos:start="173:30" pos:end="173:30">.</operator><name pos:start="173:31" pos:end="173:38">capacity</name></name></expr></argument>, <argument pos:start="173:41" pos:end="173:53"><expr pos:start="173:41" pos:end="173:53"><name pos:start="173:41" pos:end="173:53">real_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="177:5" pos:end="177:30">/* write the descriptor */</comment>

    <if_stmt pos:start="179:5" pos:end="185:5"><if pos:start="179:5" pos:end="185:5">if <condition pos:start="179:8" pos:end="179:45">(<expr pos:start="179:9" pos:end="179:44"><call pos:start="179:9" pos:end="179:38"><name pos:start="179:9" pos:end="179:13">lseek</name><argument_list pos:start="179:14" pos:end="179:38">(<argument pos:start="179:15" pos:end="179:20"><expr pos:start="179:15" pos:end="179:20"><name pos:start="179:15" pos:end="179:20">snp_fd</name></expr></argument>, <argument pos:start="179:23" pos:end="179:27"><expr pos:start="179:23" pos:end="179:27"><literal type="number" pos:start="179:23" pos:end="179:27">0x200</literal></expr></argument>, <argument pos:start="179:30" pos:end="179:37"><expr pos:start="179:30" pos:end="179:37"><name pos:start="179:30" pos:end="179:37">SEEK_SET</name></expr></argument>)</argument_list></call> <operator pos:start="179:40" pos:end="179:41">==</operator> <operator pos:start="179:43" pos:end="179:43">-</operator><literal type="number" pos:start="179:44" pos:end="179:44">1</literal></expr>)</condition> <block pos:start="179:47" pos:end="185:5">{<block_content pos:start="181:9" pos:end="183:18">

        <expr_stmt pos:start="181:9" pos:end="181:21"><expr pos:start="181:9" pos:end="181:20"><name pos:start="181:9" pos:end="181:11">ret</name> <operator pos:start="181:13" pos:end="181:13">=</operator> <operator pos:start="181:15" pos:end="181:15">-</operator><name pos:start="181:16" pos:end="181:20">errno</name></expr>;</expr_stmt>

        <goto pos:start="183:9" pos:end="183:18">goto <name pos:start="183:14" pos:end="183:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="187:5" pos:end="193:5"><if pos:start="187:5" pos:end="193:5">if <condition pos:start="187:8" pos:end="187:52">(<expr pos:start="187:9" pos:end="187:51"><call pos:start="187:9" pos:end="187:45"><name pos:start="187:9" pos:end="187:13">write</name><argument_list pos:start="187:14" pos:end="187:45">(<argument pos:start="187:15" pos:end="187:20"><expr pos:start="187:15" pos:end="187:20"><name pos:start="187:15" pos:end="187:20">snp_fd</name></expr></argument>, <argument pos:start="187:23" pos:end="187:28"><expr pos:start="187:23" pos:end="187:28"><name pos:start="187:23" pos:end="187:28">s_desc</name></expr></argument>, <argument pos:start="187:31" pos:end="187:44"><expr pos:start="187:31" pos:end="187:44"><call pos:start="187:31" pos:end="187:44"><name pos:start="187:31" pos:end="187:36">strlen</name><argument_list pos:start="187:37" pos:end="187:44">(<argument pos:start="187:38" pos:end="187:43"><expr pos:start="187:38" pos:end="187:43"><name pos:start="187:38" pos:end="187:43">s_desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator pos:start="187:47" pos:end="187:48">==</operator> <operator pos:start="187:50" pos:end="187:50">-</operator><literal type="number" pos:start="187:51" pos:end="187:51">1</literal></expr>)</condition> <block pos:start="187:54" pos:end="193:5">{<block_content pos:start="189:9" pos:end="191:18">

        <expr_stmt pos:start="189:9" pos:end="189:21"><expr pos:start="189:9" pos:end="189:20"><name pos:start="189:9" pos:end="189:11">ret</name> <operator pos:start="189:13" pos:end="189:13">=</operator> <operator pos:start="189:15" pos:end="189:15">-</operator><name pos:start="189:16" pos:end="189:20">errno</name></expr>;</expr_stmt>

        <goto pos:start="191:9" pos:end="191:18">goto <name pos:start="191:14" pos:end="191:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="197:5" pos:end="197:47"><expr pos:start="197:5" pos:end="197:46"><name pos:start="197:5" pos:end="197:13">gd_offset</name> <operator pos:start="197:15" pos:end="197:15">=</operator> <name pos:start="197:17" pos:end="197:32"><name pos:start="197:17" pos:end="197:22">header</name><operator pos:start="197:23" pos:end="197:23">.</operator><name pos:start="197:24" pos:end="197:32">gd_offset</name></name> <operator pos:start="197:34" pos:end="197:34">*</operator> <name pos:start="197:36" pos:end="197:46">SECTOR_SIZE</name></expr>;</expr_stmt>     <comment type="line" pos:start="197:53" pos:end="197:73">// offset of GD table</comment>

    <expr_stmt pos:start="199:5" pos:end="199:49"><expr pos:start="199:5" pos:end="199:48"><name pos:start="199:5" pos:end="199:14">rgd_offset</name> <operator pos:start="199:16" pos:end="199:16">=</operator> <name pos:start="199:18" pos:end="199:34"><name pos:start="199:18" pos:end="199:23">header</name><operator pos:start="199:24" pos:end="199:24">.</operator><name pos:start="199:25" pos:end="199:34">rgd_offset</name></name> <operator pos:start="199:36" pos:end="199:36">*</operator> <name pos:start="199:38" pos:end="199:48">SECTOR_SIZE</name></expr>;</expr_stmt>   <comment type="line" pos:start="199:53" pos:end="199:74">// offset of RGD table</comment>

    <expr_stmt pos:start="201:5" pos:end="201:45"><expr pos:start="201:5" pos:end="201:44"><name pos:start="201:5" pos:end="201:12">capacity</name> <operator pos:start="201:14" pos:end="201:14">=</operator> <name pos:start="201:16" pos:end="201:30"><name pos:start="201:16" pos:end="201:21">header</name><operator pos:start="201:22" pos:end="201:22">.</operator><name pos:start="201:23" pos:end="201:30">capacity</name></name> <operator pos:start="201:32" pos:end="201:32">*</operator> <name pos:start="201:34" pos:end="201:44">SECTOR_SIZE</name></expr>;</expr_stmt>       <comment type="line" pos:start="201:53" pos:end="201:66">// Extent size</comment>

    <comment type="block" pos:start="203:5" pos:end="209:7">/*

     * Each GDE span 32M disk, means:

     * 512 GTE per GT, each GTE points to grain

     */</comment>

    <expr_stmt pos:start="211:5" pos:end="211:82"><expr pos:start="211:5" pos:end="211:81"><name pos:start="211:5" pos:end="211:11">gt_size</name> <operator pos:start="211:13" pos:end="211:13">=</operator> <operator pos:start="211:15" pos:end="211:15">(</operator><name pos:start="211:16" pos:end="211:22">int64_t</name><operator pos:start="211:23" pos:end="211:23">)</operator><name pos:start="211:24" pos:end="211:46"><name pos:start="211:24" pos:end="211:29">header</name><operator pos:start="211:30" pos:end="211:30">.</operator><name pos:start="211:31" pos:end="211:46">num_gtes_per_gte</name></name> <operator pos:start="211:48" pos:end="211:48">*</operator> <name pos:start="211:50" pos:end="211:67"><name pos:start="211:50" pos:end="211:55">header</name><operator pos:start="211:56" pos:end="211:56">.</operator><name pos:start="211:57" pos:end="211:67">granularity</name></name> <operator pos:start="211:69" pos:end="211:69">*</operator> <name pos:start="211:71" pos:end="211:81">SECTOR_SIZE</name></expr>;</expr_stmt>

    <if_stmt pos:start="213:5" pos:end="219:5"><if pos:start="213:5" pos:end="219:5">if <condition pos:start="213:8" pos:end="213:17">(<expr pos:start="213:9" pos:end="213:16"><operator pos:start="213:9" pos:end="213:9">!</operator><name pos:start="213:10" pos:end="213:16">gt_size</name></expr>)</condition> <block pos:start="213:19" pos:end="219:5">{<block_content pos:start="215:9" pos:end="217:18">

        <expr_stmt pos:start="215:9" pos:end="215:22"><expr pos:start="215:9" pos:end="215:21"><name pos:start="215:9" pos:end="215:11">ret</name> <operator pos:start="215:13" pos:end="215:13">=</operator> <operator pos:start="215:15" pos:end="215:15">-</operator><name pos:start="215:16" pos:end="215:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="217:9" pos:end="217:18">goto <name pos:start="217:14" pos:end="217:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="221:5" pos:end="221:49"><expr pos:start="221:5" pos:end="221:48"><name pos:start="221:5" pos:end="221:15">gde_entries</name> <operator pos:start="221:17" pos:end="221:17">=</operator> <operator pos:start="221:19" pos:end="221:19">(</operator><name pos:start="221:20" pos:end="221:27">uint32_t</name><operator pos:start="221:28" pos:end="221:28">)</operator><operator pos:start="221:29" pos:end="221:29">(</operator><name pos:start="221:30" pos:end="221:37">capacity</name> <operator pos:start="221:39" pos:end="221:39">/</operator> <name pos:start="221:41" pos:end="221:47">gt_size</name><operator pos:start="221:48" pos:end="221:48">)</operator></expr>;</expr_stmt>  <comment type="line" pos:start="221:52" pos:end="221:72">// number of gde/rgde</comment>

    <expr_stmt pos:start="223:5" pos:end="223:45"><expr pos:start="223:5" pos:end="223:44"><name pos:start="223:5" pos:end="223:11">gd_size</name> <operator pos:start="223:13" pos:end="223:13">=</operator> <name pos:start="223:15" pos:end="223:25">gde_entries</name> <operator pos:start="223:27" pos:end="223:27">*</operator> <sizeof pos:start="223:29" pos:end="223:44">sizeof<argument_list pos:start="223:35" pos:end="223:44">(<argument pos:start="223:36" pos:end="223:43"><expr pos:start="223:36" pos:end="223:43"><name pos:start="223:36" pos:end="223:43">uint32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>



    <comment type="block" pos:start="227:5" pos:end="227:19">/* write RGD */</comment>

    <expr_stmt pos:start="229:5" pos:end="229:35"><expr pos:start="229:5" pos:end="229:34"><name pos:start="229:5" pos:end="229:11">rgd_buf</name> <operator pos:start="229:13" pos:end="229:13">=</operator> <call pos:start="229:15" pos:end="229:34"><name pos:start="229:15" pos:end="229:25">qemu_malloc</name><argument_list pos:start="229:26" pos:end="229:34">(<argument pos:start="229:27" pos:end="229:33"><expr pos:start="229:27" pos:end="229:33"><name pos:start="229:27" pos:end="229:33">gd_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="231:5" pos:end="237:5"><if pos:start="231:5" pos:end="237:5">if <condition pos:start="231:8" pos:end="231:48">(<expr pos:start="231:9" pos:end="231:47"><call pos:start="231:9" pos:end="231:41"><name pos:start="231:9" pos:end="231:13">lseek</name><argument_list pos:start="231:14" pos:end="231:41">(<argument pos:start="231:15" pos:end="231:18"><expr pos:start="231:15" pos:end="231:18"><name pos:start="231:15" pos:end="231:18">p_fd</name></expr></argument>, <argument pos:start="231:21" pos:end="231:30"><expr pos:start="231:21" pos:end="231:30"><name pos:start="231:21" pos:end="231:30">rgd_offset</name></expr></argument>, <argument pos:start="231:33" pos:end="231:40"><expr pos:start="231:33" pos:end="231:40"><name pos:start="231:33" pos:end="231:40">SEEK_SET</name></expr></argument>)</argument_list></call> <operator pos:start="231:43" pos:end="231:44">==</operator> <operator pos:start="231:46" pos:end="231:46">-</operator><literal type="number" pos:start="231:47" pos:end="231:47">1</literal></expr>)</condition> <block pos:start="231:50" pos:end="237:5">{<block_content pos:start="233:9" pos:end="235:22">

        <expr_stmt pos:start="233:9" pos:end="233:21"><expr pos:start="233:9" pos:end="233:20"><name pos:start="233:9" pos:end="233:11">ret</name> <operator pos:start="233:13" pos:end="233:13">=</operator> <operator pos:start="233:15" pos:end="233:15">-</operator><name pos:start="233:16" pos:end="233:20">errno</name></expr>;</expr_stmt>

        <goto pos:start="235:9" pos:end="235:22">goto <name pos:start="235:14" pos:end="235:21">fail_rgd</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="239:5" pos:end="245:5"><if pos:start="239:5" pos:end="245:5">if <condition pos:start="239:8" pos:end="239:48">(<expr pos:start="239:9" pos:end="239:47"><call pos:start="239:9" pos:end="239:36"><name pos:start="239:9" pos:end="239:12">read</name><argument_list pos:start="239:13" pos:end="239:36">(<argument pos:start="239:14" pos:end="239:17"><expr pos:start="239:14" pos:end="239:17"><name pos:start="239:14" pos:end="239:17">p_fd</name></expr></argument>, <argument pos:start="239:20" pos:end="239:26"><expr pos:start="239:20" pos:end="239:26"><name pos:start="239:20" pos:end="239:26">rgd_buf</name></expr></argument>, <argument pos:start="239:29" pos:end="239:35"><expr pos:start="239:29" pos:end="239:35"><name pos:start="239:29" pos:end="239:35">gd_size</name></expr></argument>)</argument_list></call> <operator pos:start="239:38" pos:end="239:39">!=</operator> <name pos:start="239:41" pos:end="239:47">gd_size</name></expr>)</condition> <block pos:start="239:50" pos:end="245:5">{<block_content pos:start="241:9" pos:end="243:22">

        <expr_stmt pos:start="241:9" pos:end="241:21"><expr pos:start="241:9" pos:end="241:20"><name pos:start="241:9" pos:end="241:11">ret</name> <operator pos:start="241:13" pos:end="241:13">=</operator> <operator pos:start="241:15" pos:end="241:15">-</operator><name pos:start="241:16" pos:end="241:20">errno</name></expr>;</expr_stmt>

        <goto pos:start="243:9" pos:end="243:22">goto <name pos:start="243:14" pos:end="243:21">fail_rgd</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="247:5" pos:end="253:5"><if pos:start="247:5" pos:end="253:5">if <condition pos:start="247:8" pos:end="247:50">(<expr pos:start="247:9" pos:end="247:49"><call pos:start="247:9" pos:end="247:43"><name pos:start="247:9" pos:end="247:13">lseek</name><argument_list pos:start="247:14" pos:end="247:43">(<argument pos:start="247:15" pos:end="247:20"><expr pos:start="247:15" pos:end="247:20"><name pos:start="247:15" pos:end="247:20">snp_fd</name></expr></argument>, <argument pos:start="247:23" pos:end="247:32"><expr pos:start="247:23" pos:end="247:32"><name pos:start="247:23" pos:end="247:32">rgd_offset</name></expr></argument>, <argument pos:start="247:35" pos:end="247:42"><expr pos:start="247:35" pos:end="247:42"><name pos:start="247:35" pos:end="247:42">SEEK_SET</name></expr></argument>)</argument_list></call> <operator pos:start="247:45" pos:end="247:46">==</operator> <operator pos:start="247:48" pos:end="247:48">-</operator><literal type="number" pos:start="247:49" pos:end="247:49">1</literal></expr>)</condition> <block pos:start="247:52" pos:end="253:5">{<block_content pos:start="249:9" pos:end="251:22">

        <expr_stmt pos:start="249:9" pos:end="249:21"><expr pos:start="249:9" pos:end="249:20"><name pos:start="249:9" pos:end="249:11">ret</name> <operator pos:start="249:13" pos:end="249:13">=</operator> <operator pos:start="249:15" pos:end="249:15">-</operator><name pos:start="249:16" pos:end="249:20">errno</name></expr>;</expr_stmt>

        <goto pos:start="251:9" pos:end="251:22">goto <name pos:start="251:14" pos:end="251:21">fail_rgd</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="255:5" pos:end="261:5"><if pos:start="255:5" pos:end="261:5">if <condition pos:start="255:8" pos:end="255:46">(<expr pos:start="255:9" pos:end="255:45"><call pos:start="255:9" pos:end="255:39"><name pos:start="255:9" pos:end="255:13">write</name><argument_list pos:start="255:14" pos:end="255:39">(<argument pos:start="255:15" pos:end="255:20"><expr pos:start="255:15" pos:end="255:20"><name pos:start="255:15" pos:end="255:20">snp_fd</name></expr></argument>, <argument pos:start="255:23" pos:end="255:29"><expr pos:start="255:23" pos:end="255:29"><name pos:start="255:23" pos:end="255:29">rgd_buf</name></expr></argument>, <argument pos:start="255:32" pos:end="255:38"><expr pos:start="255:32" pos:end="255:38"><name pos:start="255:32" pos:end="255:38">gd_size</name></expr></argument>)</argument_list></call> <operator pos:start="255:41" pos:end="255:42">==</operator> <operator pos:start="255:44" pos:end="255:44">-</operator><literal type="number" pos:start="255:45" pos:end="255:45">1</literal></expr>)</condition> <block pos:start="255:48" pos:end="261:5">{<block_content pos:start="257:9" pos:end="259:22">

        <expr_stmt pos:start="257:9" pos:end="257:21"><expr pos:start="257:9" pos:end="257:20"><name pos:start="257:9" pos:end="257:11">ret</name> <operator pos:start="257:13" pos:end="257:13">=</operator> <operator pos:start="257:15" pos:end="257:15">-</operator><name pos:start="257:16" pos:end="257:20">errno</name></expr>;</expr_stmt>

        <goto pos:start="259:9" pos:end="259:22">goto <name pos:start="259:14" pos:end="259:21">fail_rgd</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="263:5" pos:end="263:23"><expr pos:start="263:5" pos:end="263:22"><call pos:start="263:5" pos:end="263:22"><name pos:start="263:5" pos:end="263:13">qemu_free</name><argument_list pos:start="263:14" pos:end="263:22">(<argument pos:start="263:15" pos:end="263:21"><expr pos:start="263:15" pos:end="263:21"><name pos:start="263:15" pos:end="263:21">rgd_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="267:5" pos:end="267:18">/* write GD */</comment>

    <expr_stmt pos:start="269:5" pos:end="269:34"><expr pos:start="269:5" pos:end="269:33"><name pos:start="269:5" pos:end="269:10">gd_buf</name> <operator pos:start="269:12" pos:end="269:12">=</operator> <call pos:start="269:14" pos:end="269:33"><name pos:start="269:14" pos:end="269:24">qemu_malloc</name><argument_list pos:start="269:25" pos:end="269:33">(<argument pos:start="269:26" pos:end="269:32"><expr pos:start="269:26" pos:end="269:32"><name pos:start="269:26" pos:end="269:32">gd_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="271:5" pos:end="277:5"><if pos:start="271:5" pos:end="277:5">if <condition pos:start="271:8" pos:end="271:47">(<expr pos:start="271:9" pos:end="271:46"><call pos:start="271:9" pos:end="271:40"><name pos:start="271:9" pos:end="271:13">lseek</name><argument_list pos:start="271:14" pos:end="271:40">(<argument pos:start="271:15" pos:end="271:18"><expr pos:start="271:15" pos:end="271:18"><name pos:start="271:15" pos:end="271:18">p_fd</name></expr></argument>, <argument pos:start="271:21" pos:end="271:29"><expr pos:start="271:21" pos:end="271:29"><name pos:start="271:21" pos:end="271:29">gd_offset</name></expr></argument>, <argument pos:start="271:32" pos:end="271:39"><expr pos:start="271:32" pos:end="271:39"><name pos:start="271:32" pos:end="271:39">SEEK_SET</name></expr></argument>)</argument_list></call> <operator pos:start="271:42" pos:end="271:43">==</operator> <operator pos:start="271:45" pos:end="271:45">-</operator><literal type="number" pos:start="271:46" pos:end="271:46">1</literal></expr>)</condition> <block pos:start="271:49" pos:end="277:5">{<block_content pos:start="273:9" pos:end="275:21">

        <expr_stmt pos:start="273:9" pos:end="273:21"><expr pos:start="273:9" pos:end="273:20"><name pos:start="273:9" pos:end="273:11">ret</name> <operator pos:start="273:13" pos:end="273:13">=</operator> <operator pos:start="273:15" pos:end="273:15">-</operator><name pos:start="273:16" pos:end="273:20">errno</name></expr>;</expr_stmt>

        <goto pos:start="275:9" pos:end="275:21">goto <name pos:start="275:14" pos:end="275:20">fail_gd</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="279:5" pos:end="285:5"><if pos:start="279:5" pos:end="285:5">if <condition pos:start="279:8" pos:end="279:47">(<expr pos:start="279:9" pos:end="279:46"><call pos:start="279:9" pos:end="279:35"><name pos:start="279:9" pos:end="279:12">read</name><argument_list pos:start="279:13" pos:end="279:35">(<argument pos:start="279:14" pos:end="279:17"><expr pos:start="279:14" pos:end="279:17"><name pos:start="279:14" pos:end="279:17">p_fd</name></expr></argument>, <argument pos:start="279:20" pos:end="279:25"><expr pos:start="279:20" pos:end="279:25"><name pos:start="279:20" pos:end="279:25">gd_buf</name></expr></argument>, <argument pos:start="279:28" pos:end="279:34"><expr pos:start="279:28" pos:end="279:34"><name pos:start="279:28" pos:end="279:34">gd_size</name></expr></argument>)</argument_list></call> <operator pos:start="279:37" pos:end="279:38">!=</operator> <name pos:start="279:40" pos:end="279:46">gd_size</name></expr>)</condition> <block pos:start="279:49" pos:end="285:5">{<block_content pos:start="281:9" pos:end="283:21">

        <expr_stmt pos:start="281:9" pos:end="281:21"><expr pos:start="281:9" pos:end="281:20"><name pos:start="281:9" pos:end="281:11">ret</name> <operator pos:start="281:13" pos:end="281:13">=</operator> <operator pos:start="281:15" pos:end="281:15">-</operator><name pos:start="281:16" pos:end="281:20">errno</name></expr>;</expr_stmt>

        <goto pos:start="283:9" pos:end="283:21">goto <name pos:start="283:14" pos:end="283:20">fail_gd</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="287:5" pos:end="293:5"><if pos:start="287:5" pos:end="293:5">if <condition pos:start="287:8" pos:end="287:49">(<expr pos:start="287:9" pos:end="287:48"><call pos:start="287:9" pos:end="287:42"><name pos:start="287:9" pos:end="287:13">lseek</name><argument_list pos:start="287:14" pos:end="287:42">(<argument pos:start="287:15" pos:end="287:20"><expr pos:start="287:15" pos:end="287:20"><name pos:start="287:15" pos:end="287:20">snp_fd</name></expr></argument>, <argument pos:start="287:23" pos:end="287:31"><expr pos:start="287:23" pos:end="287:31"><name pos:start="287:23" pos:end="287:31">gd_offset</name></expr></argument>, <argument pos:start="287:34" pos:end="287:41"><expr pos:start="287:34" pos:end="287:41"><name pos:start="287:34" pos:end="287:41">SEEK_SET</name></expr></argument>)</argument_list></call> <operator pos:start="287:44" pos:end="287:45">==</operator> <operator pos:start="287:47" pos:end="287:47">-</operator><literal type="number" pos:start="287:48" pos:end="287:48">1</literal></expr>)</condition> <block pos:start="287:51" pos:end="293:5">{<block_content pos:start="289:9" pos:end="291:21">

        <expr_stmt pos:start="289:9" pos:end="289:21"><expr pos:start="289:9" pos:end="289:20"><name pos:start="289:9" pos:end="289:11">ret</name> <operator pos:start="289:13" pos:end="289:13">=</operator> <operator pos:start="289:15" pos:end="289:15">-</operator><name pos:start="289:16" pos:end="289:20">errno</name></expr>;</expr_stmt>

        <goto pos:start="291:9" pos:end="291:21">goto <name pos:start="291:14" pos:end="291:20">fail_gd</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="295:5" pos:end="301:5"><if pos:start="295:5" pos:end="301:5">if <condition pos:start="295:8" pos:end="295:45">(<expr pos:start="295:9" pos:end="295:44"><call pos:start="295:9" pos:end="295:38"><name pos:start="295:9" pos:end="295:13">write</name><argument_list pos:start="295:14" pos:end="295:38">(<argument pos:start="295:15" pos:end="295:20"><expr pos:start="295:15" pos:end="295:20"><name pos:start="295:15" pos:end="295:20">snp_fd</name></expr></argument>, <argument pos:start="295:23" pos:end="295:28"><expr pos:start="295:23" pos:end="295:28"><name pos:start="295:23" pos:end="295:28">gd_buf</name></expr></argument>, <argument pos:start="295:31" pos:end="295:37"><expr pos:start="295:31" pos:end="295:37"><name pos:start="295:31" pos:end="295:37">gd_size</name></expr></argument>)</argument_list></call> <operator pos:start="295:40" pos:end="295:41">==</operator> <operator pos:start="295:43" pos:end="295:43">-</operator><literal type="number" pos:start="295:44" pos:end="295:44">1</literal></expr>)</condition> <block pos:start="295:47" pos:end="301:5">{<block_content pos:start="297:9" pos:end="299:21">

        <expr_stmt pos:start="297:9" pos:end="297:21"><expr pos:start="297:9" pos:end="297:20"><name pos:start="297:9" pos:end="297:11">ret</name> <operator pos:start="297:13" pos:end="297:13">=</operator> <operator pos:start="297:15" pos:end="297:15">-</operator><name pos:start="297:16" pos:end="297:20">errno</name></expr>;</expr_stmt>

        <goto pos:start="299:9" pos:end="299:21">goto <name pos:start="299:14" pos:end="299:20">fail_gd</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="303:5" pos:end="303:22"><expr pos:start="303:5" pos:end="303:21"><call pos:start="303:5" pos:end="303:21"><name pos:start="303:5" pos:end="303:13">qemu_free</name><argument_list pos:start="303:14" pos:end="303:21">(<argument pos:start="303:15" pos:end="303:20"><expr pos:start="303:15" pos:end="303:20"><name pos:start="303:15" pos:end="303:20">gd_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="307:5" pos:end="307:16"><expr pos:start="307:5" pos:end="307:15"><call pos:start="307:5" pos:end="307:15"><name pos:start="307:5" pos:end="307:9">close</name><argument_list pos:start="307:10" pos:end="307:15">(<argument pos:start="307:11" pos:end="307:14"><expr pos:start="307:11" pos:end="307:14"><name pos:start="307:11" pos:end="307:14">p_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="309:5" pos:end="309:18"><expr pos:start="309:5" pos:end="309:17"><call pos:start="309:5" pos:end="309:17"><name pos:start="309:5" pos:end="309:9">close</name><argument_list pos:start="309:10" pos:end="309:17">(<argument pos:start="309:11" pos:end="309:16"><expr pos:start="309:11" pos:end="309:16"><name pos:start="309:11" pos:end="309:16">snp_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="311:5" pos:end="311:13">return <expr pos:start="311:12" pos:end="311:12"><literal type="number" pos:start="311:12" pos:end="311:12">0</literal></expr>;</return>



    <label pos:start="315:5" pos:end="315:12"><name pos:start="315:5" pos:end="315:11">fail_gd</name>:</label>

    <expr_stmt pos:start="317:5" pos:end="317:22"><expr pos:start="317:5" pos:end="317:21"><call pos:start="317:5" pos:end="317:21"><name pos:start="317:5" pos:end="317:13">qemu_free</name><argument_list pos:start="317:14" pos:end="317:21">(<argument pos:start="317:15" pos:end="317:20"><expr pos:start="317:15" pos:end="317:20"><name pos:start="317:15" pos:end="317:20">gd_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <label pos:start="319:5" pos:end="319:13"><name pos:start="319:5" pos:end="319:12">fail_rgd</name>:</label>

    <expr_stmt pos:start="321:5" pos:end="321:23"><expr pos:start="321:5" pos:end="321:22"><call pos:start="321:5" pos:end="321:22"><name pos:start="321:5" pos:end="321:13">qemu_free</name><argument_list pos:start="321:14" pos:end="321:22">(<argument pos:start="321:15" pos:end="321:21"><expr pos:start="321:15" pos:end="321:21"><name pos:start="321:15" pos:end="321:21">rgd_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <label pos:start="323:5" pos:end="323:9"><name pos:start="323:5" pos:end="323:8">fail</name>:</label>

    <expr_stmt pos:start="325:5" pos:end="325:16"><expr pos:start="325:5" pos:end="325:15"><call pos:start="325:5" pos:end="325:15"><name pos:start="325:5" pos:end="325:9">close</name><argument_list pos:start="325:10" pos:end="325:15">(<argument pos:start="325:11" pos:end="325:14"><expr pos:start="325:11" pos:end="325:14"><name pos:start="325:11" pos:end="325:14">p_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="327:5" pos:end="327:18"><expr pos:start="327:5" pos:end="327:17"><call pos:start="327:5" pos:end="327:17"><name pos:start="327:5" pos:end="327:9">close</name><argument_list pos:start="327:10" pos:end="327:17">(<argument pos:start="327:11" pos:end="327:16"><expr pos:start="327:11" pos:end="327:16"><name pos:start="327:11" pos:end="327:16">snp_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="329:5" pos:end="329:15">return <expr pos:start="329:12" pos:end="329:14"><name pos:start="329:12" pos:end="329:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
