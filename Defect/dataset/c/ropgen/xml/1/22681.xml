<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22681.c" pos:tabs="8"><function pos:start="1:1" pos:end="49:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">get_whole_cluster</name><parameter_list pos:start="1:29" pos:end="3:59">(<parameter pos:start="1:30" pos:end="1:49"><decl pos:start="1:30" pos:end="1:49"><type pos:start="1:30" pos:end="1:49"><name pos:start="1:30" pos:end="1:45">BlockDriverState</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:49">bs</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:74"><decl pos:start="1:52" pos:end="1:74"><type pos:start="1:52" pos:end="1:74"><name pos:start="1:52" pos:end="1:59">uint64_t</name></type> <name pos:start="1:61" pos:end="1:74">cluster_offset</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:44"><decl pos:start="3:30" pos:end="3:44"><type pos:start="3:30" pos:end="3:44"><name pos:start="3:30" pos:end="3:37">uint64_t</name></type> <name pos:start="3:39" pos:end="3:44">offset</name></decl></parameter>, <parameter pos:start="3:47" pos:end="3:58"><decl pos:start="3:47" pos:end="3:58"><type pos:start="3:47" pos:end="3:58"><name pos:start="3:47" pos:end="3:49">int</name></type> <name pos:start="3:51" pos:end="3:58">allocate</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="49:1">{<block_content pos:start="7:5" pos:end="47:13">

    <decl_stmt pos:start="7:5" pos:end="7:35"><decl pos:start="7:5" pos:end="7:34"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint64_t</name></type> <name pos:start="7:14" pos:end="7:34">parent_cluster_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:34"><decl pos:start="9:5" pos:end="9:33"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">BDRVVmdkState</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:20">s</name> <init pos:start="9:22" pos:end="9:33">= <expr pos:start="9:24" pos:end="9:33"><name pos:start="9:24" pos:end="9:33"><name pos:start="9:24" pos:end="9:25">bs</name><operator pos:start="9:26" pos:end="9:27">-&gt;</operator><name pos:start="9:28" pos:end="9:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:49"><decl pos:start="11:5" pos:end="11:48"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">uint8_t</name></type>  <name pos:start="11:14" pos:end="11:48"><name pos:start="11:14" pos:end="11:24">whole_grain</name><index pos:start="11:25" pos:end="11:48">[<expr pos:start="11:26" pos:end="11:47"><name pos:start="11:26" pos:end="11:43"><name pos:start="11:26" pos:end="11:26">s</name><operator pos:start="11:27" pos:end="11:28">-&gt;</operator><name pos:start="11:29" pos:end="11:43">cluster_sectors</name></name><operator pos:start="11:44" pos:end="11:44">*</operator><literal type="number" pos:start="11:45" pos:end="11:47">512</literal></expr>]</index></name></decl>;</decl_stmt>        <comment type="line" pos:start="11:58" pos:end="11:106">// 128 sectors * 512 bytes each = grain size 64KB</comment>



    <comment type="line" pos:start="15:5" pos:end="15:71">// we will be here if it's first write on non-exist grain(cluster).</comment>

    <comment type="line" pos:start="17:5" pos:end="17:46">// try to read from parent image, if exist</comment>

    <if_stmt pos:start="19:5" pos:end="45:5"><if pos:start="19:5" pos:end="45:5">if <condition pos:start="19:8" pos:end="19:26">(<expr pos:start="19:9" pos:end="19:25"><name pos:start="19:9" pos:end="19:25"><name pos:start="19:9" pos:end="19:9">s</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:13">hd</name><operator pos:start="19:14" pos:end="19:15">-&gt;</operator><name pos:start="19:16" pos:end="19:25">backing_hd</name></name></expr>)</condition> <block pos:start="19:28" pos:end="45:5">{<block_content pos:start="21:9" pos:end="43:22">

        <decl_stmt pos:start="21:9" pos:end="21:54"><decl pos:start="21:9" pos:end="21:53"><type pos:start="21:9" pos:end="21:23"><name pos:start="21:9" pos:end="21:21">BDRVVmdkState</name> <modifier pos:start="21:23" pos:end="21:23">*</modifier></type><name pos:start="21:24" pos:end="21:25">ps</name> <init pos:start="21:27" pos:end="21:53">= <expr pos:start="21:29" pos:end="21:53"><name pos:start="21:29" pos:end="21:53"><name pos:start="21:29" pos:end="21:29">s</name><operator pos:start="21:30" pos:end="21:31">-&gt;</operator><name pos:start="21:32" pos:end="21:33">hd</name><operator pos:start="21:34" pos:end="21:35">-&gt;</operator><name pos:start="21:36" pos:end="21:45">backing_hd</name><operator pos:start="21:46" pos:end="21:47">-&gt;</operator><name pos:start="21:48" pos:end="21:53">opaque</name></name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="25:9" pos:end="27:22"><if pos:start="25:9" pos:end="27:22">if <condition pos:start="25:12" pos:end="25:35">(<expr pos:start="25:13" pos:end="25:34"><operator pos:start="25:13" pos:end="25:13">!</operator><call pos:start="25:14" pos:end="25:34"><name pos:start="25:14" pos:end="25:30">vmdk_is_cid_valid</name><argument_list pos:start="25:31" pos:end="25:34">(<argument pos:start="25:32" pos:end="25:33"><expr pos:start="25:32" pos:end="25:33"><name pos:start="25:32" pos:end="25:33">bs</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="27:13" pos:end="27:22"><block_content pos:start="27:13" pos:end="27:22">

            <return pos:start="27:13" pos:end="27:22">return <expr pos:start="27:20" pos:end="27:21"><operator pos:start="27:20" pos:end="27:20">-</operator><literal type="number" pos:start="27:21" pos:end="27:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:88"><expr pos:start="29:9" pos:end="29:87"><name pos:start="29:9" pos:end="29:29">parent_cluster_offset</name> <operator pos:start="29:31" pos:end="29:31">=</operator> <call pos:start="29:33" pos:end="29:87"><name pos:start="29:33" pos:end="29:50">get_cluster_offset</name><argument_list pos:start="29:51" pos:end="29:87">(<argument pos:start="29:52" pos:end="29:68"><expr pos:start="29:52" pos:end="29:68"><name pos:start="29:52" pos:end="29:68"><name pos:start="29:52" pos:end="29:52">s</name><operator pos:start="29:53" pos:end="29:54">-&gt;</operator><name pos:start="29:55" pos:end="29:56">hd</name><operator pos:start="29:57" pos:end="29:58">-&gt;</operator><name pos:start="29:59" pos:end="29:68">backing_hd</name></name></expr></argument>, <argument pos:start="29:71" pos:end="29:76"><expr pos:start="29:71" pos:end="29:76"><name pos:start="29:71" pos:end="29:76">offset</name></expr></argument>, <argument pos:start="29:79" pos:end="29:86"><expr pos:start="29:79" pos:end="29:86"><name pos:start="29:79" pos:end="29:86">allocate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="31:9" pos:end="35:22"><if pos:start="31:9" pos:end="35:22">if <condition pos:start="31:12" pos:end="33:100">(<expr pos:start="31:13" pos:end="33:99"><call pos:start="31:13" pos:end="31:91"><name pos:start="31:13" pos:end="31:22">bdrv_pread</name><argument_list pos:start="31:23" pos:end="31:91">(<argument pos:start="31:24" pos:end="31:29"><expr pos:start="31:24" pos:end="31:29"><name pos:start="31:24" pos:end="31:29"><name pos:start="31:24" pos:end="31:25">ps</name><operator pos:start="31:26" pos:end="31:27">-&gt;</operator><name pos:start="31:28" pos:end="31:29">hd</name></name></expr></argument>, <argument pos:start="31:32" pos:end="31:52"><expr pos:start="31:32" pos:end="31:52"><name pos:start="31:32" pos:end="31:52">parent_cluster_offset</name></expr></argument>, <argument pos:start="31:55" pos:end="31:65"><expr pos:start="31:55" pos:end="31:65"><name pos:start="31:55" pos:end="31:65">whole_grain</name></expr></argument>, <argument pos:start="31:68" pos:end="31:90"><expr pos:start="31:68" pos:end="31:90"><name pos:start="31:68" pos:end="31:86"><name pos:start="31:68" pos:end="31:69">ps</name><operator pos:start="31:70" pos:end="31:71">-&gt;</operator><name pos:start="31:72" pos:end="31:86">cluster_sectors</name></name><operator pos:start="31:87" pos:end="31:87">*</operator><literal type="number" pos:start="31:88" pos:end="31:90">512</literal></expr></argument>)</argument_list></call> <operator pos:start="31:93" pos:end="31:94">!=</operator> 

                                                                            <name pos:start="33:77" pos:end="33:95"><name pos:start="33:77" pos:end="33:78">ps</name><operator pos:start="33:79" pos:end="33:80">-&gt;</operator><name pos:start="33:81" pos:end="33:95">cluster_sectors</name></name><operator pos:start="33:96" pos:end="33:96">*</operator><literal type="number" pos:start="33:97" pos:end="33:99">512</literal></expr>)</condition><block type="pseudo" pos:start="35:13" pos:end="35:22"><block_content pos:start="35:13" pos:end="35:22">

            <return pos:start="35:13" pos:end="35:22">return <expr pos:start="35:20" pos:end="35:21"><operator pos:start="35:20" pos:end="35:20">-</operator><literal type="number" pos:start="35:21" pos:end="35:21">1</literal></expr>;</return></block_content></block></if></if_stmt>



        <if_stmt pos:start="39:9" pos:end="43:22"><if pos:start="39:9" pos:end="43:22">if <condition pos:start="39:12" pos:end="41:96">(<expr pos:start="39:13" pos:end="41:95"><call pos:start="39:13" pos:end="39:85"><name pos:start="39:13" pos:end="39:23">bdrv_pwrite</name><argument_list pos:start="39:24" pos:end="39:85">(<argument pos:start="39:25" pos:end="39:29"><expr pos:start="39:25" pos:end="39:29"><name pos:start="39:25" pos:end="39:29"><name pos:start="39:25" pos:end="39:25">s</name><operator pos:start="39:26" pos:end="39:27">-&gt;</operator><name pos:start="39:28" pos:end="39:29">hd</name></name></expr></argument>, <argument pos:start="39:32" pos:end="39:50"><expr pos:start="39:32" pos:end="39:50"><name pos:start="39:32" pos:end="39:45">cluster_offset</name> <operator pos:start="39:47" pos:end="39:48">&lt;&lt;</operator> <literal type="number" pos:start="39:50" pos:end="39:50">9</literal></expr></argument>, <argument pos:start="39:53" pos:end="39:63"><expr pos:start="39:53" pos:end="39:63"><name pos:start="39:53" pos:end="39:63">whole_grain</name></expr></argument>, <argument pos:start="39:66" pos:end="39:84"><expr pos:start="39:66" pos:end="39:84"><sizeof pos:start="39:66" pos:end="39:84">sizeof<argument_list pos:start="39:72" pos:end="39:84">(<argument pos:start="39:73" pos:end="39:83"><expr pos:start="39:73" pos:end="39:83"><name pos:start="39:73" pos:end="39:83">whole_grain</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="39:87" pos:end="39:88">!=</operator> 

                                                                            <sizeof pos:start="41:77" pos:end="41:95">sizeof<argument_list pos:start="41:83" pos:end="41:95">(<argument pos:start="41:84" pos:end="41:94"><expr pos:start="41:84" pos:end="41:94"><name pos:start="41:84" pos:end="41:94">whole_grain</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo" pos:start="43:13" pos:end="43:22"><block_content pos:start="43:13" pos:end="43:22">

            <return pos:start="43:13" pos:end="43:22">return <expr pos:start="43:20" pos:end="43:21"><operator pos:start="43:20" pos:end="43:20">-</operator><literal type="number" pos:start="43:21" pos:end="43:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="47:5" pos:end="47:13">return <expr pos:start="47:12" pos:end="47:12"><literal type="number" pos:start="47:12" pos:end="47:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
