<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20837.c" pos:tabs="8"><function pos:start="1:1" pos:end="209:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">imx_serial_write</name><parameter_list pos:start="1:29" pos:end="3:59">(<parameter pos:start="1:30" pos:end="1:41"><decl pos:start="1:30" pos:end="1:41"><type pos:start="1:30" pos:end="1:41"><name pos:start="1:30" pos:end="1:33">void</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:41">opaque</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:56"><decl pos:start="1:44" pos:end="1:56"><type pos:start="1:44" pos:end="1:56"><name pos:start="1:44" pos:end="1:49">hwaddr</name></type> <name pos:start="1:51" pos:end="1:56">offset</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:43"><decl pos:start="3:30" pos:end="3:43"><type pos:start="3:30" pos:end="3:43"><name pos:start="3:30" pos:end="3:37">uint64_t</name></type> <name pos:start="3:39" pos:end="3:43">value</name></decl></parameter>, <parameter pos:start="3:46" pos:end="3:58"><decl pos:start="3:46" pos:end="3:58"><type pos:start="3:46" pos:end="3:58"><name pos:start="3:46" pos:end="3:53">unsigned</name></type> <name pos:start="3:55" pos:end="3:58">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="209:1">{<block_content pos:start="7:5" pos:end="207:5">

    <decl_stmt pos:start="7:5" pos:end="7:49"><decl pos:start="7:5" pos:end="7:48"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">IMXSerialState</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:21">s</name> <init pos:start="7:23" pos:end="7:48">= <expr pos:start="7:25" pos:end="7:48"><operator pos:start="7:25" pos:end="7:25">(</operator><name pos:start="7:26" pos:end="7:39">IMXSerialState</name> <operator pos:start="7:41" pos:end="7:41">*</operator><operator pos:start="7:42" pos:end="7:42">)</operator><name pos:start="7:43" pos:end="7:48">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:17">char</name></type> <name pos:start="9:19" pos:end="9:20">ch</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="15:75"><expr pos:start="13:5" pos:end="15:74"><call pos:start="13:5" pos:end="15:74"><name pos:start="13:5" pos:end="13:11">DPRINTF</name><argument_list pos:start="13:12" pos:end="15:74">(<argument pos:start="13:13" pos:end="13:68"><expr pos:start="13:13" pos:end="13:68"><literal type="string" pos:start="13:13" pos:end="13:30">"write(offset=0x%"</literal> <name pos:start="13:32" pos:end="13:42">HWADDR_PRIx</name> <literal type="string" pos:start="13:44" pos:end="13:68">", value = 0x%x) to %s\n"</literal></expr></argument>,

            <argument pos:start="15:13" pos:end="15:18"><expr pos:start="15:13" pos:end="15:18"><name pos:start="15:13" pos:end="15:18">offset</name></expr></argument>, <argument pos:start="15:21" pos:end="15:39"><expr pos:start="15:21" pos:end="15:39"><operator pos:start="15:21" pos:end="15:21">(</operator><name pos:start="15:22" pos:end="15:29">unsigned</name> <name pos:start="15:31" pos:end="15:33">int</name><operator pos:start="15:34" pos:end="15:34">)</operator><name pos:start="15:35" pos:end="15:39">value</name></expr></argument>, <argument pos:start="15:42" pos:end="15:73"><expr pos:start="15:42" pos:end="15:73"><ternary pos:start="15:42" pos:end="15:73"><condition pos:start="15:42" pos:end="15:49"><expr pos:start="15:42" pos:end="15:47"><name pos:start="15:42" pos:end="15:47"><name pos:start="15:42" pos:end="15:42">s</name><operator pos:start="15:43" pos:end="15:44">-&gt;</operator><name pos:start="15:45" pos:end="15:47">chr</name></name></expr> ?</condition><then pos:start="15:51" pos:end="15:63"> <expr pos:start="15:51" pos:end="15:63"><name pos:start="15:51" pos:end="15:63"><name pos:start="15:51" pos:end="15:51">s</name><operator pos:start="15:52" pos:end="15:53">-&gt;</operator><name pos:start="15:54" pos:end="15:56">chr</name><operator pos:start="15:57" pos:end="15:58">-&gt;</operator><name pos:start="15:59" pos:end="15:63">label</name></name></expr> </then><else pos:start="15:65" pos:end="15:73">: <expr pos:start="15:67" pos:end="15:73"><literal type="string" pos:start="15:67" pos:end="15:73">"NODEV"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="19:5" pos:end="207:5">switch <condition pos:start="19:12" pos:end="19:24">(<expr pos:start="19:13" pos:end="19:23"><name pos:start="19:13" pos:end="19:18">offset</name> <operator pos:start="19:20" pos:end="19:21">&gt;&gt;</operator> <literal type="number" pos:start="19:23" pos:end="19:23">2</literal></expr>)</condition> <block pos:start="19:26" pos:end="207:5">{<block_content pos:start="21:5" pos:end="205:75">

    <case pos:start="21:5" pos:end="21:14">case <expr pos:start="21:10" pos:end="21:13"><literal type="number" pos:start="21:10" pos:end="21:13">0x10</literal></expr>:</case> <comment type="block" pos:start="21:16" pos:end="21:25">/* UTXD */</comment>

        <expr_stmt pos:start="23:9" pos:end="23:19"><expr pos:start="23:9" pos:end="23:18"><name pos:start="23:9" pos:end="23:10">ch</name> <operator pos:start="23:12" pos:end="23:12">=</operator> <name pos:start="23:14" pos:end="23:18">value</name></expr>;</expr_stmt>

        <if_stmt pos:start="25:9" pos:end="41:9"><if pos:start="25:9" pos:end="41:9">if <condition pos:start="25:12" pos:end="25:32">(<expr pos:start="25:13" pos:end="25:31"><name pos:start="25:13" pos:end="25:19"><name pos:start="25:13" pos:end="25:13">s</name><operator pos:start="25:14" pos:end="25:15">-&gt;</operator><name pos:start="25:16" pos:end="25:19">ucr2</name></name> <operator pos:start="25:21" pos:end="25:21">&amp;</operator> <name pos:start="25:23" pos:end="25:31">UCR2_TXEN</name></expr>)</condition> <block pos:start="25:34" pos:end="41:9">{<block_content pos:start="27:13" pos:end="39:26">

            <if_stmt pos:start="27:13" pos:end="31:13"><if pos:start="27:13" pos:end="31:13">if <condition pos:start="27:16" pos:end="27:23">(<expr pos:start="27:17" pos:end="27:22"><name pos:start="27:17" pos:end="27:22"><name pos:start="27:17" pos:end="27:17">s</name><operator pos:start="27:18" pos:end="27:19">-&gt;</operator><name pos:start="27:20" pos:end="27:22">chr</name></name></expr>)</condition> <block pos:start="27:25" pos:end="31:13">{<block_content pos:start="29:17" pos:end="29:50">

                <expr_stmt pos:start="29:17" pos:end="29:50"><expr pos:start="29:17" pos:end="29:49"><call pos:start="29:17" pos:end="29:49"><name pos:start="29:17" pos:end="29:33">qemu_chr_fe_write</name><argument_list pos:start="29:34" pos:end="29:49">(<argument pos:start="29:35" pos:end="29:40"><expr pos:start="29:35" pos:end="29:40"><name pos:start="29:35" pos:end="29:40"><name pos:start="29:35" pos:end="29:35">s</name><operator pos:start="29:36" pos:end="29:37">-&gt;</operator><name pos:start="29:38" pos:end="29:40">chr</name></name></expr></argument>, <argument pos:start="29:43" pos:end="29:45"><expr pos:start="29:43" pos:end="29:45"><operator pos:start="29:43" pos:end="29:43">&amp;</operator><name pos:start="29:44" pos:end="29:45">ch</name></expr></argument>, <argument pos:start="29:48" pos:end="29:48"><expr pos:start="29:48" pos:end="29:48"><literal type="number" pos:start="29:48" pos:end="29:48">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="33:13" pos:end="33:34"><expr pos:start="33:13" pos:end="33:33"><name pos:start="33:13" pos:end="33:19"><name pos:start="33:13" pos:end="33:13">s</name><operator pos:start="33:14" pos:end="33:15">-&gt;</operator><name pos:start="33:16" pos:end="33:19">usr1</name></name> <operator pos:start="33:21" pos:end="33:22">&amp;=</operator> <operator pos:start="33:24" pos:end="33:24">~</operator><name pos:start="33:25" pos:end="33:33">USR1_TRDY</name></expr>;</expr_stmt>

            <expr_stmt pos:start="35:13" pos:end="35:26"><expr pos:start="35:13" pos:end="35:25"><call pos:start="35:13" pos:end="35:25"><name pos:start="35:13" pos:end="35:22">imx_update</name><argument_list pos:start="35:23" pos:end="35:25">(<argument pos:start="35:24" pos:end="35:24"><expr pos:start="35:24" pos:end="35:24"><name pos:start="35:24" pos:end="35:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:33"><expr pos:start="37:13" pos:end="37:32"><name pos:start="37:13" pos:end="37:19"><name pos:start="37:13" pos:end="37:13">s</name><operator pos:start="37:14" pos:end="37:15">-&gt;</operator><name pos:start="37:16" pos:end="37:19">usr1</name></name> <operator pos:start="37:21" pos:end="37:22">|=</operator> <name pos:start="37:24" pos:end="37:32">USR1_TRDY</name></expr>;</expr_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:26"><expr pos:start="39:13" pos:end="39:25"><call pos:start="39:13" pos:end="39:25"><name pos:start="39:13" pos:end="39:22">imx_update</name><argument_list pos:start="39:23" pos:end="39:25">(<argument pos:start="39:24" pos:end="39:24"><expr pos:start="39:24" pos:end="39:24"><name pos:start="39:24" pos:end="39:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="43:9" pos:end="43:14">break;</break>



    <case pos:start="47:5" pos:end="47:14">case <expr pos:start="47:10" pos:end="47:13"><literal type="number" pos:start="47:10" pos:end="47:13">0x20</literal></expr>:</case> <comment type="block" pos:start="47:16" pos:end="47:25">/* UCR1 */</comment>

        <expr_stmt pos:start="49:9" pos:end="49:33"><expr pos:start="49:9" pos:end="49:32"><name pos:start="49:9" pos:end="49:15"><name pos:start="49:9" pos:end="49:9">s</name><operator pos:start="49:10" pos:end="49:11">-&gt;</operator><name pos:start="49:12" pos:end="49:15">ucr1</name></name> <operator pos:start="49:17" pos:end="49:17">=</operator> <name pos:start="49:19" pos:end="49:23">value</name> <operator pos:start="49:25" pos:end="49:25">&amp;</operator> <literal type="number" pos:start="49:27" pos:end="49:32">0xffff</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="53:9" pos:end="53:57"><expr pos:start="53:9" pos:end="53:56"><call pos:start="53:9" pos:end="53:56"><name pos:start="53:9" pos:end="53:15">DPRINTF</name><argument_list pos:start="53:16" pos:end="53:56">(<argument pos:start="53:17" pos:end="53:34"><expr pos:start="53:17" pos:end="53:34"><literal type="string" pos:start="53:17" pos:end="53:34">"write(ucr1=%x)\n"</literal></expr></argument>, <argument pos:start="53:37" pos:end="53:55"><expr pos:start="53:37" pos:end="53:55"><operator pos:start="53:37" pos:end="53:37">(</operator><name pos:start="53:38" pos:end="53:45">unsigned</name> <name pos:start="53:47" pos:end="53:49">int</name><operator pos:start="53:50" pos:end="53:50">)</operator><name pos:start="53:51" pos:end="53:55">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="57:9" pos:end="57:22"><expr pos:start="57:9" pos:end="57:21"><call pos:start="57:9" pos:end="57:21"><name pos:start="57:9" pos:end="57:18">imx_update</name><argument_list pos:start="57:19" pos:end="57:21">(<argument pos:start="57:20" pos:end="57:20"><expr pos:start="57:20" pos:end="57:20"><name pos:start="57:20" pos:end="57:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="59:9" pos:end="59:14">break;</break>



    <case pos:start="63:5" pos:end="63:14">case <expr pos:start="63:10" pos:end="63:13"><literal type="number" pos:start="63:10" pos:end="63:13">0x21</literal></expr>:</case> <comment type="block" pos:start="63:16" pos:end="63:25">/* UCR2 */</comment>

        <comment type="block" pos:start="65:9" pos:end="73:11">/*

         * Only a few bits in control register 2 are implemented as yet.

         * If it's intended to use a real serial device as a back-end, this

         * register will have to be implemented more fully.

         */</comment>

        <if_stmt pos:start="75:9" pos:end="83:9"><if pos:start="75:9" pos:end="83:9">if <condition pos:start="75:12" pos:end="75:33">(<expr pos:start="75:13" pos:end="75:32"><operator pos:start="75:13" pos:end="75:13">!</operator><operator pos:start="75:14" pos:end="75:14">(</operator><name pos:start="75:15" pos:end="75:19">value</name> <operator pos:start="75:21" pos:end="75:21">&amp;</operator> <name pos:start="75:23" pos:end="75:31">UCR2_SRST</name><operator pos:start="75:32" pos:end="75:32">)</operator></expr>)</condition> <block pos:start="75:35" pos:end="83:9">{<block_content pos:start="77:13" pos:end="81:31">

            <expr_stmt pos:start="77:13" pos:end="77:32"><expr pos:start="77:13" pos:end="77:31"><call pos:start="77:13" pos:end="77:31"><name pos:start="77:13" pos:end="77:28">imx_serial_reset</name><argument_list pos:start="77:29" pos:end="77:31">(<argument pos:start="77:30" pos:end="77:30"><expr pos:start="77:30" pos:end="77:30"><name pos:start="77:30" pos:end="77:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:26"><expr pos:start="79:13" pos:end="79:25"><call pos:start="79:13" pos:end="79:25"><name pos:start="79:13" pos:end="79:22">imx_update</name><argument_list pos:start="79:23" pos:end="79:25">(<argument pos:start="79:24" pos:end="79:24"><expr pos:start="79:24" pos:end="79:24"><name pos:start="79:24" pos:end="79:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:31"><expr pos:start="81:13" pos:end="81:30"><name pos:start="81:13" pos:end="81:17">value</name> <operator pos:start="81:19" pos:end="81:20">|=</operator> <name pos:start="81:22" pos:end="81:30">UCR2_SRST</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="85:9" pos:end="97:9"><if pos:start="85:9" pos:end="97:9">if <condition pos:start="85:12" pos:end="85:30">(<expr pos:start="85:13" pos:end="85:29"><name pos:start="85:13" pos:end="85:17">value</name> <operator pos:start="85:19" pos:end="85:19">&amp;</operator> <name pos:start="85:21" pos:end="85:29">UCR2_RXEN</name></expr>)</condition> <block pos:start="85:32" pos:end="97:9">{<block_content pos:start="87:13" pos:end="95:13">

            <if_stmt pos:start="87:13" pos:end="95:13"><if pos:start="87:13" pos:end="95:13">if <condition pos:start="87:16" pos:end="87:39">(<expr pos:start="87:17" pos:end="87:38"><operator pos:start="87:17" pos:end="87:17">!</operator><operator pos:start="87:18" pos:end="87:18">(</operator><name pos:start="87:19" pos:end="87:25"><name pos:start="87:19" pos:end="87:19">s</name><operator pos:start="87:20" pos:end="87:21">-&gt;</operator><name pos:start="87:22" pos:end="87:25">ucr2</name></name> <operator pos:start="87:27" pos:end="87:27">&amp;</operator> <name pos:start="87:29" pos:end="87:37">UCR2_RXEN</name><operator pos:start="87:38" pos:end="87:38">)</operator></expr>)</condition> <block pos:start="87:41" pos:end="95:13">{<block_content pos:start="89:17" pos:end="93:17">

                <if_stmt pos:start="89:17" pos:end="93:17"><if pos:start="89:17" pos:end="93:17">if <condition pos:start="89:20" pos:end="89:27">(<expr pos:start="89:21" pos:end="89:26"><name pos:start="89:21" pos:end="89:26"><name pos:start="89:21" pos:end="89:21">s</name><operator pos:start="89:22" pos:end="89:23">-&gt;</operator><name pos:start="89:24" pos:end="89:26">chr</name></name></expr>)</condition> <block pos:start="89:29" pos:end="93:17">{<block_content pos:start="91:21" pos:end="91:50">

                    <expr_stmt pos:start="91:21" pos:end="91:50"><expr pos:start="91:21" pos:end="91:49"><call pos:start="91:21" pos:end="91:49"><name pos:start="91:21" pos:end="91:41">qemu_chr_accept_input</name><argument_list pos:start="91:42" pos:end="91:49">(<argument pos:start="91:43" pos:end="91:48"><expr pos:start="91:43" pos:end="91:48"><name pos:start="91:43" pos:end="91:48"><name pos:start="91:43" pos:end="91:43">s</name><operator pos:start="91:44" pos:end="91:45">-&gt;</operator><name pos:start="91:46" pos:end="91:48">chr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:33"><expr pos:start="99:9" pos:end="99:32"><name pos:start="99:9" pos:end="99:15"><name pos:start="99:9" pos:end="99:9">s</name><operator pos:start="99:10" pos:end="99:11">-&gt;</operator><name pos:start="99:12" pos:end="99:15">ucr2</name></name> <operator pos:start="99:17" pos:end="99:17">=</operator> <name pos:start="99:19" pos:end="99:23">value</name> <operator pos:start="99:25" pos:end="99:25">&amp;</operator> <literal type="number" pos:start="99:27" pos:end="99:32">0xffff</literal></expr>;</expr_stmt>

        <break pos:start="101:9" pos:end="101:14">break;</break>



    <case pos:start="105:5" pos:end="105:14">case <expr pos:start="105:10" pos:end="105:13"><literal type="number" pos:start="105:10" pos:end="105:13">0x25</literal></expr>:</case> <comment type="block" pos:start="105:16" pos:end="105:25">/* USR1 */</comment>

        <expr_stmt pos:start="107:9" pos:end="109:69"><expr pos:start="107:9" pos:end="109:68"><name pos:start="107:9" pos:end="107:13">value</name> <operator pos:start="107:15" pos:end="107:16">&amp;=</operator> <name pos:start="107:18" pos:end="107:27">USR1_AWAKE</name> <operator pos:start="107:29" pos:end="107:29">|</operator> <name pos:start="107:31" pos:end="107:41">USR1_AIRINT</name> <operator pos:start="107:43" pos:end="107:43">|</operator> <name pos:start="107:45" pos:end="107:53">USR1_DTRD</name> <operator pos:start="107:55" pos:end="107:55">|</operator> <name pos:start="107:57" pos:end="107:66">USR1_AGTIM</name> <operator pos:start="107:68" pos:end="107:68">|</operator>

                 <name pos:start="109:18" pos:end="109:29">USR1_FRAMERR</name> <operator pos:start="109:31" pos:end="109:31">|</operator> <name pos:start="109:33" pos:end="109:41">USR1_ESCF</name> <operator pos:start="109:43" pos:end="109:43">|</operator> <name pos:start="109:45" pos:end="109:53">USR1_RTSD</name> <operator pos:start="109:55" pos:end="109:55">|</operator> <name pos:start="109:57" pos:end="109:68">USR1_PARTYER</name></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:26"><expr pos:start="111:9" pos:end="111:25"><name pos:start="111:9" pos:end="111:15"><name pos:start="111:9" pos:end="111:9">s</name><operator pos:start="111:10" pos:end="111:11">-&gt;</operator><name pos:start="111:12" pos:end="111:15">usr1</name></name> <operator pos:start="111:17" pos:end="111:18">&amp;=</operator> <operator pos:start="111:20" pos:end="111:20">~</operator><name pos:start="111:21" pos:end="111:25">value</name></expr>;</expr_stmt>

        <break pos:start="113:9" pos:end="113:14">break;</break>



    <case pos:start="117:5" pos:end="117:14">case <expr pos:start="117:10" pos:end="117:13"><literal type="number" pos:start="117:10" pos:end="117:13">0x26</literal></expr>:</case> <comment type="block" pos:start="117:16" pos:end="117:25">/* USR2 */</comment>

        <comment type="block" pos:start="119:9" pos:end="125:11">/*

         * Writing 1 to some bits clears them; all other

         * values are ignored

         */</comment>

        <expr_stmt pos:start="127:9" pos:end="131:65"><expr pos:start="127:9" pos:end="131:64"><name pos:start="127:9" pos:end="127:13">value</name> <operator pos:start="127:15" pos:end="127:16">&amp;=</operator> <name pos:start="127:18" pos:end="127:26">USR2_ADET</name> <operator pos:start="127:28" pos:end="127:28">|</operator> <name pos:start="127:30" pos:end="127:38">USR2_DTRF</name> <operator pos:start="127:40" pos:end="127:40">|</operator> <name pos:start="127:42" pos:end="127:50">USR2_IDLE</name> <operator pos:start="127:52" pos:end="127:52">|</operator> <name pos:start="127:54" pos:end="127:62">USR2_ACST</name> <operator pos:start="127:64" pos:end="127:64">|</operator>

                 <name pos:start="129:18" pos:end="129:28">USR2_RIDELT</name> <operator pos:start="129:30" pos:end="129:30">|</operator> <name pos:start="129:32" pos:end="129:41">USR2_IRINT</name> <operator pos:start="129:43" pos:end="129:43">|</operator> <name pos:start="129:45" pos:end="129:53">USR2_WAKE</name> <operator pos:start="129:55" pos:end="129:55">|</operator>

                 <name pos:start="131:18" pos:end="131:29">USR2_DCDDELT</name> <operator pos:start="131:31" pos:end="131:31">|</operator> <name pos:start="131:33" pos:end="131:41">USR2_RTSF</name> <operator pos:start="131:43" pos:end="131:43">|</operator> <name pos:start="131:45" pos:end="131:53">USR2_BRCD</name> <operator pos:start="131:55" pos:end="131:55">|</operator> <name pos:start="131:57" pos:end="131:64">USR2_ORE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:26"><expr pos:start="133:9" pos:end="133:25"><name pos:start="133:9" pos:end="133:15"><name pos:start="133:9" pos:end="133:9">s</name><operator pos:start="133:10" pos:end="133:11">-&gt;</operator><name pos:start="133:12" pos:end="133:15">usr2</name></name> <operator pos:start="133:17" pos:end="133:18">&amp;=</operator> <operator pos:start="133:20" pos:end="133:20">~</operator><name pos:start="133:21" pos:end="133:25">value</name></expr>;</expr_stmt>

        <break pos:start="135:9" pos:end="135:14">break;</break>



    <comment type="block" pos:start="139:5" pos:end="145:7">/*

     * Linux expects to see what it writes to these registers

     * We don't currently alter the baud rate

     */</comment>

    <case pos:start="147:5" pos:end="147:14">case <expr pos:start="147:10" pos:end="147:13"><literal type="number" pos:start="147:10" pos:end="147:13">0x29</literal></expr>:</case> <comment type="block" pos:start="147:16" pos:end="147:25">/* UBIR */</comment>

        <expr_stmt pos:start="149:9" pos:end="149:33"><expr pos:start="149:9" pos:end="149:32"><name pos:start="149:9" pos:end="149:15"><name pos:start="149:9" pos:end="149:9">s</name><operator pos:start="149:10" pos:end="149:11">-&gt;</operator><name pos:start="149:12" pos:end="149:15">ubrc</name></name> <operator pos:start="149:17" pos:end="149:17">=</operator> <name pos:start="149:19" pos:end="149:23">value</name> <operator pos:start="149:25" pos:end="149:25">&amp;</operator> <literal type="number" pos:start="149:27" pos:end="149:32">0xffff</literal></expr>;</expr_stmt>

        <break pos:start="151:9" pos:end="151:14">break;</break>



    <case pos:start="155:5" pos:end="155:14">case <expr pos:start="155:10" pos:end="155:13"><literal type="number" pos:start="155:10" pos:end="155:13">0x2a</literal></expr>:</case> <comment type="block" pos:start="155:16" pos:end="155:25">/* UBMR */</comment>

        <expr_stmt pos:start="157:9" pos:end="157:33"><expr pos:start="157:9" pos:end="157:32"><name pos:start="157:9" pos:end="157:15"><name pos:start="157:9" pos:end="157:9">s</name><operator pos:start="157:10" pos:end="157:11">-&gt;</operator><name pos:start="157:12" pos:end="157:15">ubmr</name></name> <operator pos:start="157:17" pos:end="157:17">=</operator> <name pos:start="157:19" pos:end="157:23">value</name> <operator pos:start="157:25" pos:end="157:25">&amp;</operator> <literal type="number" pos:start="157:27" pos:end="157:32">0xffff</literal></expr>;</expr_stmt>

        <break pos:start="159:9" pos:end="159:14">break;</break>



    <case pos:start="163:5" pos:end="163:14">case <expr pos:start="163:10" pos:end="163:13"><literal type="number" pos:start="163:10" pos:end="163:13">0x2c</literal></expr>:</case> <comment type="block" pos:start="163:16" pos:end="163:31">/* One ms reg */</comment>

        <expr_stmt pos:start="165:9" pos:end="165:34"><expr pos:start="165:9" pos:end="165:33"><name pos:start="165:9" pos:end="165:16"><name pos:start="165:9" pos:end="165:9">s</name><operator pos:start="165:10" pos:end="165:11">-&gt;</operator><name pos:start="165:12" pos:end="165:16">onems</name></name> <operator pos:start="165:18" pos:end="165:18">=</operator> <name pos:start="165:20" pos:end="165:24">value</name> <operator pos:start="165:26" pos:end="165:26">&amp;</operator> <literal type="number" pos:start="165:28" pos:end="165:33">0xffff</literal></expr>;</expr_stmt>

        <break pos:start="167:9" pos:end="167:14">break;</break>



    <case pos:start="171:5" pos:end="171:14">case <expr pos:start="171:10" pos:end="171:13"><literal type="number" pos:start="171:10" pos:end="171:13">0x24</literal></expr>:</case> <comment type="block" pos:start="171:16" pos:end="171:42">/* FIFO control register */</comment>

        <expr_stmt pos:start="173:9" pos:end="173:33"><expr pos:start="173:9" pos:end="173:32"><name pos:start="173:9" pos:end="173:15"><name pos:start="173:9" pos:end="173:9">s</name><operator pos:start="173:10" pos:end="173:11">-&gt;</operator><name pos:start="173:12" pos:end="173:15">ufcr</name></name> <operator pos:start="173:17" pos:end="173:17">=</operator> <name pos:start="173:19" pos:end="173:23">value</name> <operator pos:start="173:25" pos:end="173:25">&amp;</operator> <literal type="number" pos:start="173:27" pos:end="173:32">0xffff</literal></expr>;</expr_stmt>

        <break pos:start="175:9" pos:end="175:14">break;</break>



    <case pos:start="179:5" pos:end="179:14">case <expr pos:start="179:10" pos:end="179:13"><literal type="number" pos:start="179:10" pos:end="179:13">0x22</literal></expr>:</case> <comment type="block" pos:start="179:16" pos:end="179:25">/* UCR3 */</comment>

        <expr_stmt pos:start="181:9" pos:end="181:33"><expr pos:start="181:9" pos:end="181:32"><name pos:start="181:9" pos:end="181:15"><name pos:start="181:9" pos:end="181:9">s</name><operator pos:start="181:10" pos:end="181:11">-&gt;</operator><name pos:start="181:12" pos:end="181:15">ucr3</name></name> <operator pos:start="181:17" pos:end="181:17">=</operator> <name pos:start="181:19" pos:end="181:23">value</name> <operator pos:start="181:25" pos:end="181:25">&amp;</operator> <literal type="number" pos:start="181:27" pos:end="181:32">0xffff</literal></expr>;</expr_stmt>

        <break pos:start="183:9" pos:end="183:14">break;</break>



    <case pos:start="187:5" pos:end="187:14">case <expr pos:start="187:10" pos:end="187:13"><literal type="number" pos:start="187:10" pos:end="187:13">0x2d</literal></expr>:</case> <comment type="block" pos:start="187:16" pos:end="187:25">/* UTS1 */</comment>

    <case pos:start="189:5" pos:end="189:14">case <expr pos:start="189:10" pos:end="189:13"><literal type="number" pos:start="189:10" pos:end="189:13">0x23</literal></expr>:</case> <comment type="block" pos:start="189:16" pos:end="189:25">/* UCR4 */</comment>

        <expr_stmt pos:start="191:9" pos:end="193:75"><expr pos:start="191:9" pos:end="193:74"><call pos:start="191:9" pos:end="193:74"><name pos:start="191:9" pos:end="191:21">qemu_log_mask</name><argument_list pos:start="191:22" pos:end="193:74">(<argument pos:start="191:23" pos:end="191:31"><expr pos:start="191:23" pos:end="191:31"><name pos:start="191:23" pos:end="191:31">LOG_UNIMP</name></expr></argument>, <argument pos:start="191:34" pos:end="193:38"><expr pos:start="191:34" pos:end="193:38"><literal type="string" pos:start="191:34" pos:end="191:64">"[%s]%s: Unimplemented reg 0x%"</literal>

                      <name pos:start="193:23" pos:end="193:33">HWADDR_PRIx</name> <literal type="string" pos:start="193:35" pos:end="193:38">"\n"</literal></expr></argument>, <argument pos:start="193:41" pos:end="193:55"><expr pos:start="193:41" pos:end="193:55"><name pos:start="193:41" pos:end="193:55">TYPE_IMX_SERIAL</name></expr></argument>, <argument pos:start="193:58" pos:end="193:65"><expr pos:start="193:58" pos:end="193:65"><name pos:start="193:58" pos:end="193:65">__func__</name></expr></argument>, <argument pos:start="193:68" pos:end="193:73"><expr pos:start="193:68" pos:end="193:73"><name pos:start="193:68" pos:end="193:73">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="195:9" pos:end="195:18">/* TODO */</comment>

        <break pos:start="197:9" pos:end="197:14">break;</break>



    <default pos:start="201:5" pos:end="201:12">default:</default>

        <expr_stmt pos:start="203:9" pos:end="205:75"><expr pos:start="203:9" pos:end="205:74"><call pos:start="203:9" pos:end="205:74"><name pos:start="203:9" pos:end="203:21">qemu_log_mask</name><argument_list pos:start="203:22" pos:end="205:74">(<argument pos:start="203:23" pos:end="203:37"><expr pos:start="203:23" pos:end="203:37"><name pos:start="203:23" pos:end="203:37">LOG_GUEST_ERROR</name></expr></argument>, <argument pos:start="203:40" pos:end="205:38"><expr pos:start="203:40" pos:end="205:38"><literal type="string" pos:start="203:40" pos:end="203:75">"[%s]%s: Bad register at offset 0x%"</literal>

                      <name pos:start="205:23" pos:end="205:33">HWADDR_PRIx</name> <literal type="string" pos:start="205:35" pos:end="205:38">"\n"</literal></expr></argument>, <argument pos:start="205:41" pos:end="205:55"><expr pos:start="205:41" pos:end="205:55"><name pos:start="205:41" pos:end="205:55">TYPE_IMX_SERIAL</name></expr></argument>, <argument pos:start="205:58" pos:end="205:65"><expr pos:start="205:58" pos:end="205:65"><name pos:start="205:58" pos:end="205:65">__func__</name></expr></argument>, <argument pos:start="205:68" pos:end="205:73"><expr pos:start="205:68" pos:end="205:73"><name pos:start="205:68" pos:end="205:73">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
