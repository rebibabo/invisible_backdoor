<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/1786.c" pos:tabs="8"><function pos:start="1:1" pos:end="109:1"><type pos:start="1:1" pos:end="1:8"><name pos:start="1:1" pos:end="1:8">uint32_t</name></type> <name pos:start="1:10" pos:end="1:22">vga_mem_readb</name><parameter_list pos:start="1:23" pos:end="1:54">(<parameter pos:start="1:24" pos:end="1:40"><decl pos:start="1:24" pos:end="1:40"><type pos:start="1:24" pos:end="1:40"><name pos:start="1:24" pos:end="1:37">VGACommonState</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:40">s</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:53"><decl pos:start="1:43" pos:end="1:53"><type pos:start="1:43" pos:end="1:53"><name pos:start="1:43" pos:end="1:48">hwaddr</name></type> <name pos:start="1:50" pos:end="1:53">addr</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="109:1">{<block_content pos:start="5:5" pos:end="107:15">

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:23"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:23">memory_map_mode</name></decl>, <decl pos:start="5:26" pos:end="5:30"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:26" pos:end="5:30">plane</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:16">ret</name></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="11:38">/* convert to VGA memory offset */</comment>

    <expr_stmt pos:start="13:5" pos:end="13:53"><expr pos:start="13:5" pos:end="13:52"><name pos:start="13:5" pos:end="13:19">memory_map_mode</name> <operator pos:start="13:21" pos:end="13:21">=</operator> <operator pos:start="13:23" pos:end="13:23">(</operator><name pos:start="13:24" pos:end="13:42"><name pos:start="13:24" pos:end="13:24">s</name><operator pos:start="13:25" pos:end="13:26">-&gt;</operator><name pos:start="13:27" pos:end="13:28">gr</name><index pos:start="13:29" pos:end="13:42">[<expr pos:start="13:30" pos:end="13:41"><name pos:start="13:30" pos:end="13:41">VGA_GFX_MISC</name></expr>]</index></name> <operator pos:start="13:44" pos:end="13:45">&gt;&gt;</operator> <literal type="number" pos:start="13:47" pos:end="13:47">2</literal><operator pos:start="13:48" pos:end="13:48">)</operator> <operator pos:start="13:50" pos:end="13:50">&amp;</operator> <literal type="number" pos:start="13:52" pos:end="13:52">3</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:20"><expr pos:start="15:5" pos:end="15:19"><name pos:start="15:5" pos:end="15:8">addr</name> <operator pos:start="15:10" pos:end="15:11">&amp;=</operator> <literal type="number" pos:start="15:13" pos:end="15:19">0x1ffff</literal></expr>;</expr_stmt>

    <switch pos:start="17:5" pos:end="55:5">switch<condition pos:start="17:11" pos:end="17:27">(<expr pos:start="17:12" pos:end="17:26"><name pos:start="17:12" pos:end="17:26">memory_map_mode</name></expr>)</condition> <block pos:start="17:29" pos:end="55:5">{<block_content pos:start="19:5" pos:end="53:14">

    <case pos:start="19:5" pos:end="19:11">case <expr pos:start="19:10" pos:end="19:10"><literal type="number" pos:start="19:10" pos:end="19:10">0</literal></expr>:</case>

        <break pos:start="21:9" pos:end="21:14">break;</break>

    <case pos:start="23:5" pos:end="23:11">case <expr pos:start="23:10" pos:end="23:10"><literal type="number" pos:start="23:10" pos:end="23:10">1</literal></expr>:</case>

        <if_stmt pos:start="25:9" pos:end="27:24"><if pos:start="25:9" pos:end="27:24">if <condition pos:start="25:12" pos:end="25:28">(<expr pos:start="25:13" pos:end="25:27"><name pos:start="25:13" pos:end="25:16">addr</name> <operator pos:start="25:18" pos:end="25:19">&gt;=</operator> <literal type="number" pos:start="25:21" pos:end="25:27">0x10000</literal></expr>)</condition><block type="pseudo" pos:start="27:13" pos:end="27:24"><block_content pos:start="27:13" pos:end="27:24">

            <return pos:start="27:13" pos:end="27:24">return <expr pos:start="27:20" pos:end="27:23"><literal type="number" pos:start="27:20" pos:end="27:23">0xff</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:31"><expr pos:start="29:9" pos:end="29:30"><name pos:start="29:9" pos:end="29:12">addr</name> <operator pos:start="29:14" pos:end="29:15">+=</operator> <name pos:start="29:17" pos:end="29:30"><name pos:start="29:17" pos:end="29:17">s</name><operator pos:start="29:18" pos:end="29:19">-&gt;</operator><name pos:start="29:20" pos:end="29:30">bank_offset</name></name></expr>;</expr_stmt>

        <break pos:start="31:9" pos:end="31:14">break;</break>

    <case pos:start="33:5" pos:end="33:11">case <expr pos:start="33:10" pos:end="33:10"><literal type="number" pos:start="33:10" pos:end="33:10">2</literal></expr>:</case>

        <expr_stmt pos:start="35:9" pos:end="35:24"><expr pos:start="35:9" pos:end="35:23"><name pos:start="35:9" pos:end="35:12">addr</name> <operator pos:start="35:14" pos:end="35:15">-=</operator> <literal type="number" pos:start="35:17" pos:end="35:23">0x10000</literal></expr>;</expr_stmt>

        <if_stmt pos:start="37:9" pos:end="39:24"><if pos:start="37:9" pos:end="39:24">if <condition pos:start="37:12" pos:end="37:27">(<expr pos:start="37:13" pos:end="37:26"><name pos:start="37:13" pos:end="37:16">addr</name> <operator pos:start="37:18" pos:end="37:19">&gt;=</operator> <literal type="number" pos:start="37:21" pos:end="37:26">0x8000</literal></expr>)</condition><block type="pseudo" pos:start="39:13" pos:end="39:24"><block_content pos:start="39:13" pos:end="39:24">

            <return pos:start="39:13" pos:end="39:24">return <expr pos:start="39:20" pos:end="39:23"><literal type="number" pos:start="39:20" pos:end="39:23">0xff</literal></expr>;</return></block_content></block></if></if_stmt>

        <break pos:start="41:9" pos:end="41:14">break;</break>

    <default pos:start="43:5" pos:end="43:12">default:</default>

    <case pos:start="45:5" pos:end="45:11">case <expr pos:start="45:10" pos:end="45:10"><literal type="number" pos:start="45:10" pos:end="45:10">3</literal></expr>:</case>

        <expr_stmt pos:start="47:9" pos:end="47:24"><expr pos:start="47:9" pos:end="47:23"><name pos:start="47:9" pos:end="47:12">addr</name> <operator pos:start="47:14" pos:end="47:15">-=</operator> <literal type="number" pos:start="47:17" pos:end="47:23">0x18000</literal></expr>;</expr_stmt>

        <if_stmt pos:start="49:9" pos:end="51:24"><if pos:start="49:9" pos:end="51:24">if <condition pos:start="49:12" pos:end="49:27">(<expr pos:start="49:13" pos:end="49:26"><name pos:start="49:13" pos:end="49:16">addr</name> <operator pos:start="49:18" pos:end="49:19">&gt;=</operator> <literal type="number" pos:start="49:21" pos:end="49:26">0x8000</literal></expr>)</condition><block type="pseudo" pos:start="51:13" pos:end="51:24"><block_content pos:start="51:13" pos:end="51:24">

            <return pos:start="51:13" pos:end="51:24">return <expr pos:start="51:20" pos:end="51:23"><literal type="number" pos:start="51:20" pos:end="51:23">0xff</literal></expr>;</return></block_content></block></if></if_stmt>

        <break pos:start="53:9" pos:end="53:14">break;</break>

    </block_content>}</block></switch>



    <if_stmt pos:start="59:5" pos:end="105:5"><if pos:start="59:5" pos:end="65:5">if <condition pos:start="59:8" pos:end="59:53">(<expr pos:start="59:9" pos:end="59:52"><name pos:start="59:9" pos:end="59:34"><name pos:start="59:9" pos:end="59:9">s</name><operator pos:start="59:10" pos:end="59:11">-&gt;</operator><name pos:start="59:12" pos:end="59:13">sr</name><index pos:start="59:14" pos:end="59:34">[<expr pos:start="59:15" pos:end="59:33"><name pos:start="59:15" pos:end="59:33">VGA_SEQ_MEMORY_MODE</name></expr>]</index></name> <operator pos:start="59:36" pos:end="59:36">&amp;</operator> <name pos:start="59:38" pos:end="59:52">VGA_SR04_CHN_4M</name></expr>)</condition> <block pos:start="59:55" pos:end="65:5">{<block_content pos:start="63:9" pos:end="63:32">

        <comment type="block" pos:start="61:9" pos:end="61:44">/* chain 4 mode : simplest access */</comment>

        <expr_stmt pos:start="63:9" pos:end="63:32"><expr pos:start="63:9" pos:end="63:31"><name pos:start="63:9" pos:end="63:11">ret</name> <operator pos:start="63:13" pos:end="63:13">=</operator> <name pos:start="63:15" pos:end="63:31"><name pos:start="63:15" pos:end="63:15">s</name><operator pos:start="63:16" pos:end="63:17">-&gt;</operator><name pos:start="63:18" pos:end="63:25">vram_ptr</name><index pos:start="63:26" pos:end="63:31">[<expr pos:start="63:27" pos:end="63:30"><name pos:start="63:27" pos:end="63:30">addr</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="65:7" pos:end="73:5">else if <condition pos:start="65:15" pos:end="65:42">(<expr pos:start="65:16" pos:end="65:41"><name pos:start="65:16" pos:end="65:34"><name pos:start="65:16" pos:end="65:16">s</name><operator pos:start="65:17" pos:end="65:18">-&gt;</operator><name pos:start="65:19" pos:end="65:20">gr</name><index pos:start="65:21" pos:end="65:34">[<expr pos:start="65:22" pos:end="65:33"><name pos:start="65:22" pos:end="65:33">VGA_GFX_MODE</name></expr>]</index></name> <operator pos:start="65:36" pos:end="65:36">&amp;</operator> <literal type="number" pos:start="65:38" pos:end="65:41">0x10</literal></expr>)</condition> <block pos:start="65:44" pos:end="73:5">{<block_content pos:start="69:9" pos:end="71:54">

        <comment type="block" pos:start="67:9" pos:end="67:51">/* odd/even mode (aka text mode mapping) */</comment>

        <expr_stmt pos:start="69:9" pos:end="69:61"><expr pos:start="69:9" pos:end="69:60"><name pos:start="69:9" pos:end="69:13">plane</name> <operator pos:start="69:15" pos:end="69:15">=</operator> <operator pos:start="69:17" pos:end="69:17">(</operator><name pos:start="69:18" pos:end="69:42"><name pos:start="69:18" pos:end="69:18">s</name><operator pos:start="69:19" pos:end="69:20">-&gt;</operator><name pos:start="69:21" pos:end="69:22">gr</name><index pos:start="69:23" pos:end="69:42">[<expr pos:start="69:24" pos:end="69:41"><name pos:start="69:24" pos:end="69:41">VGA_GFX_PLANE_READ</name></expr>]</index></name> <operator pos:start="69:44" pos:end="69:44">&amp;</operator> <literal type="number" pos:start="69:46" pos:end="69:46">2</literal><operator pos:start="69:47" pos:end="69:47">)</operator> <operator pos:start="69:49" pos:end="69:49">|</operator> <operator pos:start="69:51" pos:end="69:51">(</operator><name pos:start="69:52" pos:end="69:55">addr</name> <operator pos:start="69:57" pos:end="69:57">&amp;</operator> <literal type="number" pos:start="69:59" pos:end="69:59">1</literal><operator pos:start="69:60" pos:end="69:60">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:54"><expr pos:start="71:9" pos:end="71:53"><name pos:start="71:9" pos:end="71:11">ret</name> <operator pos:start="71:13" pos:end="71:13">=</operator> <name pos:start="71:15" pos:end="71:53"><name pos:start="71:15" pos:end="71:15">s</name><operator pos:start="71:16" pos:end="71:17">-&gt;</operator><name pos:start="71:18" pos:end="71:25">vram_ptr</name><index pos:start="71:26" pos:end="71:53">[<expr pos:start="71:27" pos:end="71:52"><operator pos:start="71:27" pos:end="71:27">(</operator><operator pos:start="71:28" pos:end="71:28">(</operator><name pos:start="71:29" pos:end="71:32">addr</name> <operator pos:start="71:34" pos:end="71:34">&amp;</operator> <operator pos:start="71:36" pos:end="71:36">~</operator><literal type="number" pos:start="71:37" pos:end="71:37">1</literal><operator pos:start="71:38" pos:end="71:38">)</operator> <operator pos:start="71:40" pos:end="71:41">&lt;&lt;</operator> <literal type="number" pos:start="71:43" pos:end="71:43">1</literal><operator pos:start="71:44" pos:end="71:44">)</operator> <operator pos:start="71:46" pos:end="71:46">|</operator> <name pos:start="71:48" pos:end="71:52">plane</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="73:7" pos:end="105:5">else <block pos:start="73:12" pos:end="105:5">{<block_content pos:start="77:9" pos:end="103:9">

        <comment type="block" pos:start="75:9" pos:end="75:41">/* standard VGA latched access */</comment>

        <expr_stmt pos:start="77:9" pos:end="77:51"><expr pos:start="77:9" pos:end="77:50"><name pos:start="77:9" pos:end="77:16"><name pos:start="77:9" pos:end="77:9">s</name><operator pos:start="77:10" pos:end="77:11">-&gt;</operator><name pos:start="77:12" pos:end="77:16">latch</name></name> <operator pos:start="77:18" pos:end="77:18">=</operator> <operator pos:start="77:20" pos:end="77:20">(</operator><operator pos:start="77:21" pos:end="77:21">(</operator><name pos:start="77:22" pos:end="77:29">uint32_t</name> <operator pos:start="77:31" pos:end="77:31">*</operator><operator pos:start="77:32" pos:end="77:32">)</operator><name pos:start="77:33" pos:end="77:43"><name pos:start="77:33" pos:end="77:33">s</name><operator pos:start="77:34" pos:end="77:35">-&gt;</operator><name pos:start="77:36" pos:end="77:43">vram_ptr</name></name><operator pos:start="77:44" pos:end="77:44">)</operator><index pos:start="77:45" pos:end="77:50">[<expr pos:start="77:46" pos:end="77:49"><name pos:start="77:46" pos:end="77:49">addr</name></expr>]</index></expr>;</expr_stmt>



        <if_stmt pos:start="81:9" pos:end="103:9"><if pos:start="81:9" pos:end="89:9">if <condition pos:start="81:12" pos:end="81:42">(<expr pos:start="81:13" pos:end="81:41"><operator pos:start="81:13" pos:end="81:13">!</operator><operator pos:start="81:14" pos:end="81:14">(</operator><name pos:start="81:15" pos:end="81:33"><name pos:start="81:15" pos:end="81:15">s</name><operator pos:start="81:16" pos:end="81:17">-&gt;</operator><name pos:start="81:18" pos:end="81:19">gr</name><index pos:start="81:20" pos:end="81:33">[<expr pos:start="81:21" pos:end="81:32"><name pos:start="81:21" pos:end="81:32">VGA_GFX_MODE</name></expr>]</index></name> <operator pos:start="81:35" pos:end="81:35">&amp;</operator> <literal type="number" pos:start="81:37" pos:end="81:40">0x08</literal><operator pos:start="81:41" pos:end="81:41">)</operator></expr>)</condition> <block pos:start="81:44" pos:end="89:9">{<block_content pos:start="85:13" pos:end="87:45">

            <comment type="block" pos:start="83:13" pos:end="83:29">/* read mode 0 */</comment>

            <expr_stmt pos:start="85:13" pos:end="85:46"><expr pos:start="85:13" pos:end="85:45"><name pos:start="85:13" pos:end="85:17">plane</name> <operator pos:start="85:19" pos:end="85:19">=</operator> <name pos:start="85:21" pos:end="85:45"><name pos:start="85:21" pos:end="85:21">s</name><operator pos:start="85:22" pos:end="85:23">-&gt;</operator><name pos:start="85:24" pos:end="85:25">gr</name><index pos:start="85:26" pos:end="85:45">[<expr pos:start="85:27" pos:end="85:44"><name pos:start="85:27" pos:end="85:44">VGA_GFX_PLANE_READ</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:45"><expr pos:start="87:13" pos:end="87:44"><name pos:start="87:13" pos:end="87:15">ret</name> <operator pos:start="87:17" pos:end="87:17">=</operator> <call pos:start="87:19" pos:end="87:44"><name pos:start="87:19" pos:end="87:27">GET_PLANE</name><argument_list pos:start="87:28" pos:end="87:44">(<argument pos:start="87:29" pos:end="87:36"><expr pos:start="87:29" pos:end="87:36"><name pos:start="87:29" pos:end="87:36"><name pos:start="87:29" pos:end="87:29">s</name><operator pos:start="87:30" pos:end="87:31">-&gt;</operator><name pos:start="87:32" pos:end="87:36">latch</name></name></expr></argument>, <argument pos:start="87:39" pos:end="87:43"><expr pos:start="87:39" pos:end="87:43"><name pos:start="87:39" pos:end="87:43">plane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="89:11" pos:end="103:9">else <block pos:start="89:16" pos:end="103:9">{<block_content pos:start="93:13" pos:end="101:32">

            <comment type="block" pos:start="91:13" pos:end="91:29">/* read mode 1 */</comment>

            <expr_stmt pos:start="93:13" pos:end="95:52"><expr pos:start="93:13" pos:end="95:51"><name pos:start="93:13" pos:end="93:15">ret</name> <operator pos:start="93:17" pos:end="93:17">=</operator> <operator pos:start="93:19" pos:end="93:19">(</operator><name pos:start="93:20" pos:end="93:27"><name pos:start="93:20" pos:end="93:20">s</name><operator pos:start="93:21" pos:end="93:22">-&gt;</operator><name pos:start="93:23" pos:end="93:27">latch</name></name> <operator pos:start="93:29" pos:end="93:29">^</operator> <name pos:start="93:31" pos:end="93:66"><name pos:start="93:31" pos:end="93:36">mask16</name><index pos:start="93:37" pos:end="93:66">[<expr pos:start="93:38" pos:end="93:65"><name pos:start="93:38" pos:end="93:65"><name pos:start="93:38" pos:end="93:38">s</name><operator pos:start="93:39" pos:end="93:40">-&gt;</operator><name pos:start="93:41" pos:end="93:42">gr</name><index pos:start="93:43" pos:end="93:65">[<expr pos:start="93:44" pos:end="93:64"><name pos:start="93:44" pos:end="93:64">VGA_GFX_COMPARE_VALUE</name></expr>]</index></name></expr>]</index></name><operator pos:start="93:67" pos:end="93:67">)</operator> <operator pos:start="93:69" pos:end="93:69">&amp;</operator>

                <name pos:start="95:17" pos:end="95:51"><name pos:start="95:17" pos:end="95:22">mask16</name><index pos:start="95:23" pos:end="95:51">[<expr pos:start="95:24" pos:end="95:50"><name pos:start="95:24" pos:end="95:50"><name pos:start="95:24" pos:end="95:24">s</name><operator pos:start="95:25" pos:end="95:26">-&gt;</operator><name pos:start="95:27" pos:end="95:28">gr</name><index pos:start="95:29" pos:end="95:50">[<expr pos:start="95:30" pos:end="95:49"><name pos:start="95:30" pos:end="95:49">VGA_GFX_COMPARE_MASK</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:29"><expr pos:start="97:13" pos:end="97:28"><name pos:start="97:13" pos:end="97:15">ret</name> <operator pos:start="97:17" pos:end="97:18">|=</operator> <name pos:start="97:20" pos:end="97:22">ret</name> <operator pos:start="97:24" pos:end="97:25">&gt;&gt;</operator> <literal type="number" pos:start="97:27" pos:end="97:28">16</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:28"><expr pos:start="99:13" pos:end="99:27"><name pos:start="99:13" pos:end="99:15">ret</name> <operator pos:start="99:17" pos:end="99:18">|=</operator> <name pos:start="99:20" pos:end="99:22">ret</name> <operator pos:start="99:24" pos:end="99:25">&gt;&gt;</operator> <literal type="number" pos:start="99:27" pos:end="99:27">8</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:32"><expr pos:start="101:13" pos:end="101:31"><name pos:start="101:13" pos:end="101:15">ret</name> <operator pos:start="101:17" pos:end="101:17">=</operator> <operator pos:start="101:19" pos:end="101:19">(</operator><operator pos:start="101:20" pos:end="101:20">~</operator><name pos:start="101:21" pos:end="101:23">ret</name><operator pos:start="101:24" pos:end="101:24">)</operator> <operator pos:start="101:26" pos:end="101:26">&amp;</operator> <literal type="number" pos:start="101:28" pos:end="101:31">0xff</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>

    <return pos:start="107:5" pos:end="107:15">return <expr pos:start="107:12" pos:end="107:14"><name pos:start="107:12" pos:end="107:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
