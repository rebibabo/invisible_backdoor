<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3243.c" pos:tabs="8"><function pos:start="1:1" pos:end="159:1"><type pos:start="1:1" pos:end="1:15"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">uint64_t</name></type> <name pos:start="1:17" pos:end="1:24">do_cvttq</name><parameter_list pos:start="1:25" pos:end="1:71">(<parameter pos:start="1:26" pos:end="1:43"><decl pos:start="1:26" pos:end="1:43"><type pos:start="1:26" pos:end="1:43"><name pos:start="1:26" pos:end="1:38">CPUAlphaState</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:43">env</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:55"><decl pos:start="1:46" pos:end="1:55"><type pos:start="1:46" pos:end="1:55"><name pos:start="1:46" pos:end="1:53">uint64_t</name></type> <name pos:start="1:55" pos:end="1:55">a</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:70"><decl pos:start="1:58" pos:end="1:70"><type pos:start="1:58" pos:end="1:70"><name pos:start="1:58" pos:end="1:60">int</name></type> <name pos:start="1:62" pos:end="1:70">roundmode</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="159:1">{<block_content pos:start="5:5" pos:end="157:15">

    <decl_stmt pos:start="5:5" pos:end="5:27"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint64_t</name></type> <name pos:start="5:14" pos:end="5:17">frac</name></decl>, <decl pos:start="5:20" pos:end="5:26"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:20" pos:end="5:22">ret</name> <init pos:start="5:24" pos:end="5:26">= <expr pos:start="5:26" pos:end="5:26"><literal type="number" pos:start="5:26" pos:end="5:26">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:32"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:16">exp</name></decl>, <decl pos:start="7:19" pos:end="7:22"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:19" pos:end="7:22">sign</name></decl>, <decl pos:start="7:25" pos:end="7:31"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:25" pos:end="7:27">exc</name> <init pos:start="7:29" pos:end="7:31">= <expr pos:start="7:31" pos:end="7:31"><literal type="number" pos:start="7:31" pos:end="7:31">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:14"><decl pos:start="9:5" pos:end="9:13"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:13">shift</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:21"><expr pos:start="13:5" pos:end="13:20"><name pos:start="13:5" pos:end="13:8">sign</name> <operator pos:start="13:10" pos:end="13:10">=</operator> <operator pos:start="13:12" pos:end="13:12">(</operator><name pos:start="13:13" pos:end="13:13">a</name> <operator pos:start="13:15" pos:end="13:16">&gt;&gt;</operator> <literal type="number" pos:start="13:18" pos:end="13:19">63</literal><operator pos:start="13:20" pos:end="13:20">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:38"><expr pos:start="15:5" pos:end="15:37"><name pos:start="15:5" pos:end="15:7">exp</name> <operator pos:start="15:9" pos:end="15:9">=</operator> <operator pos:start="15:11" pos:end="15:11">(</operator><name pos:start="15:12" pos:end="15:19">uint32_t</name><operator pos:start="15:20" pos:end="15:20">)</operator><operator pos:start="15:21" pos:end="15:21">(</operator><name pos:start="15:22" pos:end="15:22">a</name> <operator pos:start="15:24" pos:end="15:25">&gt;&gt;</operator> <literal type="number" pos:start="15:27" pos:end="15:28">52</literal><operator pos:start="15:29" pos:end="15:29">)</operator> <operator pos:start="15:31" pos:end="15:31">&amp;</operator> <literal type="number" pos:start="15:33" pos:end="15:37">0x7ff</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:34"><expr pos:start="17:5" pos:end="17:33"><name pos:start="17:5" pos:end="17:8">frac</name> <operator pos:start="17:10" pos:end="17:10">=</operator> <name pos:start="17:12" pos:end="17:12">a</name> <operator pos:start="17:14" pos:end="17:14">&amp;</operator> <literal type="number" pos:start="17:16" pos:end="17:33">0xfffffffffffffull</literal></expr>;</expr_stmt>



    <if_stmt pos:start="21:5" pos:end="151:5"><if pos:start="21:5" pos:end="29:5">if <condition pos:start="21:8" pos:end="21:17">(<expr pos:start="21:9" pos:end="21:16"><name pos:start="21:9" pos:end="21:11">exp</name> <operator pos:start="21:13" pos:end="21:14">==</operator> <literal type="number" pos:start="21:16" pos:end="21:16">0</literal></expr>)</condition> <block pos:start="21:19" pos:end="29:5">{<block_content pos:start="23:9" pos:end="27:9">

        <if_stmt pos:start="23:9" pos:end="27:9"><if pos:start="23:9" pos:end="27:9">if <condition pos:start="23:12" pos:end="23:32">(<expr pos:start="23:13" pos:end="23:31"><call pos:start="23:13" pos:end="23:31"><name pos:start="23:13" pos:end="23:20">unlikely</name><argument_list pos:start="23:21" pos:end="23:31">(<argument pos:start="23:22" pos:end="23:30"><expr pos:start="23:22" pos:end="23:30"><name pos:start="23:22" pos:end="23:25">frac</name> <operator pos:start="23:27" pos:end="23:28">!=</operator> <literal type="number" pos:start="23:30" pos:end="23:30">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="23:34" pos:end="27:9">{<block_content pos:start="25:13" pos:end="25:30">

            <goto pos:start="25:13" pos:end="25:30">goto <name pos:start="25:18" pos:end="25:29">do_underflow</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="29:7" pos:end="33:5">else if <condition pos:start="29:15" pos:end="29:28">(<expr pos:start="29:16" pos:end="29:27"><name pos:start="29:16" pos:end="29:18">exp</name> <operator pos:start="29:20" pos:end="29:21">==</operator> <literal type="number" pos:start="29:23" pos:end="29:27">0x7ff</literal></expr>)</condition> <block pos:start="29:30" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:23">

        <expr_stmt pos:start="31:9" pos:end="31:23"><expr pos:start="31:9" pos:end="31:22"><name pos:start="31:9" pos:end="31:11">exc</name> <operator pos:start="31:13" pos:end="31:13">=</operator> <name pos:start="31:15" pos:end="31:22">FPCR_INV</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="33:7" pos:end="151:5">else <block pos:start="33:12" pos:end="151:5">{<block_content pos:start="37:9" pos:end="149:9">

        <comment type="block" pos:start="35:9" pos:end="35:36">/* Restore implicit bit.  */</comment>

        <expr_stmt pos:start="37:9" pos:end="37:36"><expr pos:start="37:9" pos:end="37:35"><name pos:start="37:9" pos:end="37:12">frac</name> <operator pos:start="37:14" pos:end="37:15">|=</operator> <literal type="number" pos:start="37:17" pos:end="37:35">0x10000000000000ull</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="41:9" pos:end="41:32"><expr pos:start="41:9" pos:end="41:31"><name pos:start="41:9" pos:end="41:13">shift</name> <operator pos:start="41:15" pos:end="41:15">=</operator> <name pos:start="41:17" pos:end="41:19">exp</name> <operator pos:start="41:21" pos:end="41:21">-</operator> <literal type="number" pos:start="41:23" pos:end="41:28">1023</literal> <operator pos:start="41:28" pos:end="41:28">-</operator> <literal type="number" pos:start="41:30" pos:end="41:31">52</literal></expr>;</expr_stmt>

        <if_stmt pos:start="43:9" pos:end="143:9"><if pos:start="43:9" pos:end="63:9">if <condition pos:start="43:12" pos:end="43:23">(<expr pos:start="43:13" pos:end="43:22"><name pos:start="43:13" pos:end="43:17">shift</name> <operator pos:start="43:19" pos:end="43:20">&gt;=</operator> <literal type="number" pos:start="43:22" pos:end="43:22">0</literal></expr>)</condition> <block pos:start="43:25" pos:end="63:9">{<block_content pos:start="49:13" pos:end="61:13">

            <comment type="block" pos:start="45:13" pos:end="47:66">/* In this case the number is so large that we must shift

               the fraction left.  There is no rounding to do.  */</comment>

            <if_stmt pos:start="49:13" pos:end="53:13"><if pos:start="49:13" pos:end="53:13">if <condition pos:start="49:16" pos:end="49:27">(<expr pos:start="49:17" pos:end="49:26"><name pos:start="49:17" pos:end="49:21">shift</name> <operator pos:start="49:23" pos:end="49:23">&lt;</operator> <literal type="number" pos:start="49:25" pos:end="49:26">64</literal></expr>)</condition> <block pos:start="49:29" pos:end="53:13">{<block_content pos:start="51:17" pos:end="51:36">

                <expr_stmt pos:start="51:17" pos:end="51:36"><expr pos:start="51:17" pos:end="51:35"><name pos:start="51:17" pos:end="51:19">ret</name> <operator pos:start="51:21" pos:end="51:21">=</operator> <name pos:start="51:23" pos:end="51:26">frac</name> <operator pos:start="51:28" pos:end="51:29">&lt;&lt;</operator> <name pos:start="51:31" pos:end="51:35">shift</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="55:13" pos:end="55:73">/* Check for overflow.  Note the special case of -0x1p63.  */</comment>

            <if_stmt pos:start="57:13" pos:end="61:13"><if pos:start="57:13" pos:end="61:13">if <condition pos:start="57:16" pos:end="57:58">(<expr pos:start="57:17" pos:end="57:57"><name pos:start="57:17" pos:end="57:21">shift</name> <operator pos:start="57:23" pos:end="57:24">&gt;=</operator> <literal type="number" pos:start="57:26" pos:end="57:27">11</literal> <operator pos:start="57:29" pos:end="57:30">&amp;&amp;</operator> <name pos:start="57:32" pos:end="57:32">a</name> <operator pos:start="57:34" pos:end="57:35">!=</operator> <literal type="number" pos:start="57:37" pos:end="57:57">0xC3E0000000000000ull</literal></expr>)</condition> <block pos:start="57:60" pos:end="61:13">{<block_content pos:start="59:17" pos:end="59:42">

                <expr_stmt pos:start="59:17" pos:end="59:42"><expr pos:start="59:17" pos:end="59:41"><name pos:start="59:17" pos:end="59:19">exc</name> <operator pos:start="59:21" pos:end="59:21">=</operator> <name pos:start="59:23" pos:end="59:30">FPCR_IOV</name> <operator pos:start="59:32" pos:end="59:32">|</operator> <name pos:start="59:34" pos:end="59:41">FPCR_INE</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="63:11" pos:end="143:9">else <block pos:start="63:16" pos:end="143:9">{<block_content pos:start="65:13" pos:end="141:13">

            <decl_stmt pos:start="65:13" pos:end="65:27"><decl pos:start="65:13" pos:end="65:26"><type pos:start="65:13" pos:end="65:20"><name pos:start="65:13" pos:end="65:20">uint64_t</name></type> <name pos:start="65:22" pos:end="65:26">round</name></decl>;</decl_stmt>



            <comment type="block" pos:start="69:13" pos:end="77:72">/* In this case the number is smaller than the fraction as

               represented by the 52 bit number.  Here we must think

               about rounding the result.  Handle this by shifting the

               fractional part of the number into the high bits of ROUND.

               This will let us efficiently handle round-to-nearest.  */</comment>

            <expr_stmt pos:start="79:13" pos:end="79:27"><expr pos:start="79:13" pos:end="79:26"><name pos:start="79:13" pos:end="79:17">shift</name> <operator pos:start="79:19" pos:end="79:19">=</operator> <operator pos:start="79:21" pos:end="79:21">-</operator><name pos:start="79:22" pos:end="79:26">shift</name></expr>;</expr_stmt>

            <if_stmt pos:start="81:13" pos:end="97:13"><if pos:start="81:13" pos:end="87:13">if <condition pos:start="81:16" pos:end="81:27">(<expr pos:start="81:17" pos:end="81:26"><name pos:start="81:17" pos:end="81:21">shift</name> <operator pos:start="81:23" pos:end="81:23">&lt;</operator> <literal type="number" pos:start="81:25" pos:end="81:26">63</literal></expr>)</condition> <block pos:start="81:29" pos:end="87:13">{<block_content pos:start="83:17" pos:end="85:45">

                <expr_stmt pos:start="83:17" pos:end="83:36"><expr pos:start="83:17" pos:end="83:35"><name pos:start="83:17" pos:end="83:19">ret</name> <operator pos:start="83:21" pos:end="83:21">=</operator> <name pos:start="83:23" pos:end="83:26">frac</name> <operator pos:start="83:28" pos:end="83:29">&gt;&gt;</operator> <name pos:start="83:31" pos:end="83:35">shift</name></expr>;</expr_stmt>

                <expr_stmt pos:start="85:17" pos:end="85:45"><expr pos:start="85:17" pos:end="85:44"><name pos:start="85:17" pos:end="85:21">round</name> <operator pos:start="85:23" pos:end="85:23">=</operator> <name pos:start="85:25" pos:end="85:28">frac</name> <operator pos:start="85:30" pos:end="85:31">&lt;&lt;</operator> <operator pos:start="85:33" pos:end="85:33">(</operator><literal type="number" pos:start="85:34" pos:end="85:37">64</literal> <operator pos:start="85:37" pos:end="85:37">-</operator> <name pos:start="85:39" pos:end="85:43">shift</name><operator pos:start="85:44" pos:end="85:44">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="87:15" pos:end="97:13">else <block pos:start="87:20" pos:end="97:13">{<block_content pos:start="93:13" pos:end="95:26">

                <comment type="block" pos:start="89:17" pos:end="91:68">/* The exponent is so small we shift out everything.

                   Leave a sticky bit for proper rounding below.  */</comment>

            <label pos:start="93:13" pos:end="93:25"><name pos:start="93:13" pos:end="93:24">do_underflow</name>:</label>

                <expr_stmt pos:start="95:17" pos:end="95:26"><expr pos:start="95:17" pos:end="95:25"><name pos:start="95:17" pos:end="95:21">round</name> <operator pos:start="95:23" pos:end="95:23">=</operator> <literal type="number" pos:start="95:25" pos:end="95:25">1</literal></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <if_stmt pos:start="101:13" pos:end="141:13"><if pos:start="101:13" pos:end="141:13">if <condition pos:start="101:16" pos:end="101:22">(<expr pos:start="101:17" pos:end="101:21"><name pos:start="101:17" pos:end="101:21">round</name></expr>)</condition> <block pos:start="101:24" pos:end="141:13">{<block_content pos:start="103:17" pos:end="139:17">

                <expr_stmt pos:start="103:17" pos:end="103:31"><expr pos:start="103:17" pos:end="103:30"><name pos:start="103:17" pos:end="103:19">exc</name> <operator pos:start="103:21" pos:end="103:21">=</operator> <name pos:start="103:23" pos:end="103:30">FPCR_INE</name></expr>;</expr_stmt>

                <switch pos:start="105:17" pos:end="139:17">switch <condition pos:start="105:24" pos:end="105:34">(<expr pos:start="105:25" pos:end="105:33"><name pos:start="105:25" pos:end="105:33">roundmode</name></expr>)</condition> <block pos:start="105:36" pos:end="139:17">{<block_content pos:start="107:17" pos:end="137:26">

                <case pos:start="107:17" pos:end="107:46">case <expr pos:start="107:22" pos:end="107:45"><name pos:start="107:22" pos:end="107:45">float_round_nearest_even</name></expr>:</case>

                    <if_stmt pos:start="109:21" pos:end="119:21"><if pos:start="109:21" pos:end="115:21">if <condition pos:start="109:24" pos:end="109:46">(<expr pos:start="109:25" pos:end="109:45"><name pos:start="109:25" pos:end="109:29">round</name> <operator pos:start="109:31" pos:end="109:32">==</operator> <operator pos:start="109:34" pos:end="109:34">(</operator><literal type="number" pos:start="109:35" pos:end="109:38">1ull</literal> <operator pos:start="109:40" pos:end="109:41">&lt;&lt;</operator> <literal type="number" pos:start="109:43" pos:end="109:44">63</literal><operator pos:start="109:45" pos:end="109:45">)</operator></expr>)</condition> <block pos:start="109:48" pos:end="115:21">{<block_content pos:start="113:25" pos:end="113:41">

                        <comment type="block" pos:start="111:25" pos:end="111:70">/* Fraction is exactly 0.5; round to even.  */</comment>

                        <expr_stmt pos:start="113:25" pos:end="113:41"><expr pos:start="113:25" pos:end="113:40"><name pos:start="113:25" pos:end="113:27">ret</name> <operator pos:start="113:29" pos:end="113:30">+=</operator> <operator pos:start="113:32" pos:end="113:32">(</operator><name pos:start="113:33" pos:end="113:35">ret</name> <operator pos:start="113:37" pos:end="113:37">&amp;</operator> <literal type="number" pos:start="113:39" pos:end="113:39">1</literal><operator pos:start="113:40" pos:end="113:40">)</operator></expr>;</expr_stmt>

                    </block_content>}</block></if> <if type="elseif" pos:start="115:23" pos:end="119:21">else if <condition pos:start="115:31" pos:end="115:52">(<expr pos:start="115:32" pos:end="115:51"><name pos:start="115:32" pos:end="115:36">round</name> <operator pos:start="115:38" pos:end="115:38">&gt;</operator> <operator pos:start="115:40" pos:end="115:40">(</operator><literal type="number" pos:start="115:41" pos:end="115:44">1ull</literal> <operator pos:start="115:46" pos:end="115:47">&lt;&lt;</operator> <literal type="number" pos:start="115:49" pos:end="115:50">63</literal><operator pos:start="115:51" pos:end="115:51">)</operator></expr>)</condition> <block pos:start="115:54" pos:end="119:21">{<block_content pos:start="117:25" pos:end="117:33">

                        <expr_stmt pos:start="117:25" pos:end="117:33"><expr pos:start="117:25" pos:end="117:32"><name pos:start="117:25" pos:end="117:27">ret</name> <operator pos:start="117:29" pos:end="117:30">+=</operator> <literal type="number" pos:start="117:32" pos:end="117:32">1</literal></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <break pos:start="121:21" pos:end="121:26">break;</break>

                <case pos:start="123:17" pos:end="123:41">case <expr pos:start="123:22" pos:end="123:40"><name pos:start="123:22" pos:end="123:40">float_round_to_zero</name></expr>:</case>

                    <break pos:start="125:21" pos:end="125:26">break;</break>

                <case pos:start="127:17" pos:end="127:36">case <expr pos:start="127:22" pos:end="127:35"><name pos:start="127:22" pos:end="127:35">float_round_up</name></expr>:</case>

                    <expr_stmt pos:start="129:21" pos:end="129:36"><expr pos:start="129:21" pos:end="129:35"><name pos:start="129:21" pos:end="129:23">ret</name> <operator pos:start="129:25" pos:end="129:26">+=</operator> <literal type="number" pos:start="129:28" pos:end="129:30">1</literal> <operator pos:start="129:30" pos:end="129:30">-</operator> <name pos:start="129:32" pos:end="129:35">sign</name></expr>;</expr_stmt>

                    <break pos:start="131:21" pos:end="131:26">break;</break>

                <case pos:start="133:17" pos:end="133:38">case <expr pos:start="133:22" pos:end="133:37"><name pos:start="133:22" pos:end="133:37">float_round_down</name></expr>:</case>

                    <expr_stmt pos:start="135:21" pos:end="135:32"><expr pos:start="135:21" pos:end="135:31"><name pos:start="135:21" pos:end="135:23">ret</name> <operator pos:start="135:25" pos:end="135:26">+=</operator> <name pos:start="135:28" pos:end="135:31">sign</name></expr>;</expr_stmt>

                    <break pos:start="137:21" pos:end="137:26">break;</break>

                </block_content>}</block></switch>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="145:9" pos:end="149:9"><if pos:start="145:9" pos:end="149:9">if <condition pos:start="145:12" pos:end="145:17">(<expr pos:start="145:13" pos:end="145:16"><name pos:start="145:13" pos:end="145:16">sign</name></expr>)</condition> <block pos:start="145:19" pos:end="149:9">{<block_content pos:start="147:13" pos:end="147:23">

            <expr_stmt pos:start="147:13" pos:end="147:23"><expr pos:start="147:13" pos:end="147:22"><name pos:start="147:13" pos:end="147:15">ret</name> <operator pos:start="147:17" pos:end="147:17">=</operator> <operator pos:start="147:19" pos:end="147:19">-</operator><name pos:start="147:20" pos:end="147:22">ret</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="153:5" pos:end="153:26"><expr pos:start="153:5" pos:end="153:25"><name pos:start="153:5" pos:end="153:19"><name pos:start="153:5" pos:end="153:7">env</name><operator pos:start="153:8" pos:end="153:9">-&gt;</operator><name pos:start="153:10" pos:end="153:19">error_code</name></name> <operator pos:start="153:21" pos:end="153:21">=</operator> <name pos:start="153:23" pos:end="153:25">exc</name></expr>;</expr_stmt>



    <return pos:start="157:5" pos:end="157:15">return <expr pos:start="157:12" pos:end="157:14"><name pos:start="157:12" pos:end="157:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
