<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2338.c" pos:tabs="8"><function pos:start="1:1" pos:end="120:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:21">s390_init</name><parameter_list pos:start="1:22" pos:end="6:44">(<parameter pos:start="1:23" pos:end="1:44"><decl pos:start="1:23" pos:end="1:44"><type pos:start="1:23" pos:end="1:44"><name pos:start="1:23" pos:end="1:32">ram_addr_t</name></type> <name pos:start="1:34" pos:end="1:44">my_ram_size</name></decl></parameter>,
                      <parameter pos:start="2:23" pos:end="2:45"><decl pos:start="2:23" pos:end="2:45"><type pos:start="2:23" pos:end="2:45"><specifier pos:start="2:23" pos:end="2:27">const</specifier> <name pos:start="2:29" pos:end="2:32">char</name> <modifier pos:start="2:34" pos:end="2:34">*</modifier></type><name pos:start="2:35" pos:end="2:45">boot_device</name></decl></parameter>,
                      <parameter pos:start="3:23" pos:end="3:49"><decl pos:start="3:23" pos:end="3:49"><type pos:start="3:23" pos:end="3:49"><specifier pos:start="3:23" pos:end="3:27">const</specifier> <name pos:start="3:29" pos:end="3:32">char</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:49">kernel_filename</name></decl></parameter>,
                      <parameter pos:start="4:23" pos:end="4:48"><decl pos:start="4:23" pos:end="4:48"><type pos:start="4:23" pos:end="4:48"><specifier pos:start="4:23" pos:end="4:27">const</specifier> <name pos:start="4:29" pos:end="4:32">char</name> <modifier pos:start="4:34" pos:end="4:34">*</modifier></type><name pos:start="4:35" pos:end="4:48">kernel_cmdline</name></decl></parameter>,
                      <parameter pos:start="5:23" pos:end="5:49"><decl pos:start="5:23" pos:end="5:49"><type pos:start="5:23" pos:end="5:49"><specifier pos:start="5:23" pos:end="5:27">const</specifier> <name pos:start="5:29" pos:end="5:32">char</name> <modifier pos:start="5:34" pos:end="5:34">*</modifier></type><name pos:start="5:35" pos:end="5:49">initrd_filename</name></decl></parameter>,
                      <parameter pos:start="6:23" pos:end="6:43"><decl pos:start="6:23" pos:end="6:43"><type pos:start="6:23" pos:end="6:43"><specifier pos:start="6:23" pos:end="6:27">const</specifier> <name pos:start="6:29" pos:end="6:32">char</name> <modifier pos:start="6:34" pos:end="6:34">*</modifier></type><name pos:start="6:35" pos:end="6:43">cpu_model</name></decl></parameter>)</parameter_list>
<block pos:start="7:1" pos:end="120:1">{<block_content pos:start="8:5" pos:end="119:5">
    <decl_stmt pos:start="8:5" pos:end="8:25"><decl pos:start="8:5" pos:end="8:24"><type pos:start="8:5" pos:end="8:14"><name pos:start="8:5" pos:end="8:12">CPUState</name> <modifier pos:start="8:14" pos:end="8:14">*</modifier></type><name pos:start="8:15" pos:end="8:17">env</name> <init pos:start="8:19" pos:end="8:24">= <expr pos:start="8:21" pos:end="8:24"><name pos:start="8:21" pos:end="8:24">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:47"><decl pos:start="9:5" pos:end="9:46"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">MemoryRegion</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:24">sysmem</name> <init pos:start="9:26" pos:end="9:46">= <expr pos:start="9:28" pos:end="9:46"><call pos:start="9:28" pos:end="9:46"><name pos:start="9:28" pos:end="9:44">get_system_memory</name><argument_list pos:start="9:45" pos:end="9:46">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="10:5" pos:end="10:47"><decl pos:start="10:5" pos:end="10:46"><type pos:start="10:5" pos:end="10:18"><name pos:start="10:5" pos:end="10:16">MemoryRegion</name> <modifier pos:start="10:18" pos:end="10:18">*</modifier></type><name pos:start="10:19" pos:end="10:21">ram</name> <init pos:start="10:23" pos:end="10:46">= <expr pos:start="10:25" pos:end="10:46"><call pos:start="10:25" pos:end="10:46"><name pos:start="10:25" pos:end="10:29">g_new</name><argument_list pos:start="10:30" pos:end="10:46">(<argument pos:start="10:31" pos:end="10:42"><expr pos:start="10:31" pos:end="10:42"><name pos:start="10:31" pos:end="10:42">MemoryRegion</name></expr></argument>, <argument pos:start="10:45" pos:end="10:45"><expr pos:start="10:45" pos:end="10:45"><literal type="number" pos:start="10:45" pos:end="10:45">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:14">ram_addr_t</name></type> <name pos:start="11:16" pos:end="11:26">kernel_size</name> <init pos:start="11:28" pos:end="11:30">= <expr pos:start="11:30" pos:end="11:30"><literal type="number" pos:start="11:30" pos:end="11:30">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="12:5" pos:end="12:29"><decl pos:start="12:5" pos:end="12:28"><type pos:start="12:5" pos:end="12:14"><name pos:start="12:5" pos:end="12:14">ram_addr_t</name></type> <name pos:start="12:16" pos:end="12:28">initrd_offset</name></decl>;</decl_stmt>
    <decl_stmt pos:start="13:5" pos:end="13:31"><decl pos:start="13:5" pos:end="13:30"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:14">ram_addr_t</name></type> <name pos:start="13:16" pos:end="13:26">initrd_size</name> <init pos:start="13:28" pos:end="13:30">= <expr pos:start="13:30" pos:end="13:30"><literal type="number" pos:start="13:30" pos:end="13:30">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="14:5" pos:end="14:18"><decl pos:start="14:5" pos:end="14:17"><type pos:start="14:5" pos:end="14:7"><name pos:start="14:5" pos:end="14:7">int</name></type> <name pos:start="14:9" pos:end="14:13">shift</name> <init pos:start="14:15" pos:end="14:17">= <expr pos:start="14:17" pos:end="14:17"><literal type="number" pos:start="14:17" pos:end="14:17">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="15:5" pos:end="15:26"><decl pos:start="15:5" pos:end="15:25"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:11">uint8_t</name> <modifier pos:start="15:13" pos:end="15:13">*</modifier></type><name pos:start="15:14" pos:end="15:25">storage_keys</name></decl>;</decl_stmt>
    <decl_stmt pos:start="16:5" pos:end="16:24"><decl pos:start="16:5" pos:end="16:23"><type pos:start="16:5" pos:end="16:10"><name pos:start="16:5" pos:end="16:8">void</name> <modifier pos:start="16:10" pos:end="16:10">*</modifier></type><name pos:start="16:11" pos:end="16:23">virtio_region</name></decl>;</decl_stmt>
    <decl_stmt pos:start="17:5" pos:end="17:41"><decl pos:start="17:5" pos:end="17:40"><type pos:start="17:5" pos:end="17:22"><name pos:start="17:5" pos:end="17:22">target_phys_addr_t</name></type> <name pos:start="17:24" pos:end="17:40">virtio_region_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="18:5" pos:end="18:43"><decl pos:start="18:5" pos:end="18:42"><type pos:start="18:5" pos:end="18:22"><name pos:start="18:5" pos:end="18:22">target_phys_addr_t</name></type> <name pos:start="18:24" pos:end="18:42">virtio_region_start</name></decl>;</decl_stmt>
    <decl_stmt pos:start="19:5" pos:end="19:10"><decl pos:start="19:5" pos:end="19:9"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:9">i</name></decl>;</decl_stmt>
    <comment type="block" pos:start="20:5" pos:end="21:58">/* s390x ram size detection needs a 16bit multiplier + an increment. So
       guests &gt; 64GB can be specified in 2MB steps etc. */</comment>
    <while pos:start="22:5" pos:end="24:5">while <condition pos:start="22:11" pos:end="22:49">(<expr pos:start="22:12" pos:end="22:48"><operator pos:start="22:12" pos:end="22:12">(</operator><name pos:start="22:13" pos:end="22:23">my_ram_size</name> <operator pos:start="22:25" pos:end="22:26">&gt;&gt;</operator> <operator pos:start="22:28" pos:end="22:28">(</operator><literal type="number" pos:start="22:29" pos:end="22:32">20</literal> <operator pos:start="22:32" pos:end="22:32">+</operator> <name pos:start="22:34" pos:end="22:38">shift</name><operator pos:start="22:39" pos:end="22:39">)</operator><operator pos:start="22:40" pos:end="22:40">)</operator> <operator pos:start="22:42" pos:end="22:42">&gt;</operator> <literal type="number" pos:start="22:44" pos:end="22:48">65535</literal></expr>)</condition> <block pos:start="22:51" pos:end="24:5">{<block_content pos:start="23:9" pos:end="23:16">
        <expr_stmt pos:start="23:9" pos:end="23:16"><expr pos:start="23:9" pos:end="23:15"><name pos:start="23:9" pos:end="23:13">shift</name><operator pos:start="23:14" pos:end="23:15">++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt pos:start="25:5" pos:end="25:62"><expr pos:start="25:5" pos:end="25:61"><name pos:start="25:5" pos:end="25:15">my_ram_size</name> <operator pos:start="25:17" pos:end="25:17">=</operator> <name pos:start="25:19" pos:end="25:29">my_ram_size</name> <operator pos:start="25:31" pos:end="25:32">&gt;&gt;</operator> <operator pos:start="25:34" pos:end="25:34">(</operator><literal type="number" pos:start="25:35" pos:end="25:38">20</literal> <operator pos:start="25:38" pos:end="25:38">+</operator> <name pos:start="25:40" pos:end="25:44">shift</name><operator pos:start="25:45" pos:end="25:45">)</operator> <operator pos:start="25:47" pos:end="25:48">&lt;&lt;</operator> <operator pos:start="25:50" pos:end="25:50">(</operator><literal type="number" pos:start="25:51" pos:end="25:54">20</literal> <operator pos:start="25:54" pos:end="25:54">+</operator> <name pos:start="25:56" pos:end="25:60">shift</name><operator pos:start="25:61" pos:end="25:61">)</operator></expr>;</expr_stmt>
    <comment type="block" pos:start="26:5" pos:end="26:71">/* lets propagate the changed ram size into the global variable. */</comment>
    <expr_stmt pos:start="27:5" pos:end="27:27"><expr pos:start="27:5" pos:end="27:26"><name pos:start="27:5" pos:end="27:12">ram_size</name> <operator pos:start="27:14" pos:end="27:14">=</operator> <name pos:start="27:16" pos:end="27:26">my_ram_size</name></expr>;</expr_stmt>
    <comment type="block" pos:start="28:5" pos:end="28:19">/* get a BUS */</comment>
    <expr_stmt pos:start="29:5" pos:end="29:50"><expr pos:start="29:5" pos:end="29:49"><name pos:start="29:5" pos:end="29:12">s390_bus</name> <operator pos:start="29:14" pos:end="29:14">=</operator> <call pos:start="29:16" pos:end="29:49"><name pos:start="29:16" pos:end="29:35">s390_virtio_bus_init</name><argument_list pos:start="29:36" pos:end="29:49">(<argument pos:start="29:37" pos:end="29:48"><expr pos:start="29:37" pos:end="29:48"><operator pos:start="29:37" pos:end="29:37">&amp;</operator><name pos:start="29:38" pos:end="29:48">my_ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="30:5" pos:end="30:22">/* allocate RAM */</comment>
    <expr_stmt pos:start="31:5" pos:end="31:63"><expr pos:start="31:5" pos:end="31:62"><call pos:start="31:5" pos:end="31:62"><name pos:start="31:5" pos:end="31:26">memory_region_init_ram</name><argument_list pos:start="31:27" pos:end="31:62">(<argument pos:start="31:28" pos:end="31:30"><expr pos:start="31:28" pos:end="31:30"><name pos:start="31:28" pos:end="31:30">ram</name></expr></argument>, <argument pos:start="31:33" pos:end="31:36"><expr pos:start="31:33" pos:end="31:36"><name pos:start="31:33" pos:end="31:36">NULL</name></expr></argument>, <argument pos:start="31:39" pos:end="31:48"><expr pos:start="31:39" pos:end="31:48"><literal type="string" pos:start="31:39" pos:end="31:48">"s390.ram"</literal></expr></argument>, <argument pos:start="31:51" pos:end="31:61"><expr pos:start="31:51" pos:end="31:61"><name pos:start="31:51" pos:end="31:61">my_ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="32:5" pos:end="32:48"><expr pos:start="32:5" pos:end="32:47"><call pos:start="32:5" pos:end="32:47"><name pos:start="32:5" pos:end="32:31">memory_region_add_subregion</name><argument_list pos:start="32:32" pos:end="32:47">(<argument pos:start="32:33" pos:end="32:38"><expr pos:start="32:33" pos:end="32:38"><name pos:start="32:33" pos:end="32:38">sysmem</name></expr></argument>, <argument pos:start="32:41" pos:end="32:41"><expr pos:start="32:41" pos:end="32:41"><literal type="number" pos:start="32:41" pos:end="32:41">0</literal></expr></argument>, <argument pos:start="32:44" pos:end="32:46"><expr pos:start="32:44" pos:end="32:46"><name pos:start="32:44" pos:end="32:46">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="33:5" pos:end="33:31">/* allocate storage keys */</comment>
    <expr_stmt pos:start="34:5" pos:end="34:61"><expr pos:start="34:5" pos:end="34:60"><name pos:start="34:5" pos:end="34:16">storage_keys</name> <operator pos:start="34:18" pos:end="34:18">=</operator> <call pos:start="34:20" pos:end="34:60"><name pos:start="34:20" pos:end="34:28">g_malloc0</name><argument_list pos:start="34:29" pos:end="34:60">(<argument pos:start="34:30" pos:end="34:59"><expr pos:start="34:30" pos:end="34:59"><name pos:start="34:30" pos:end="34:40">my_ram_size</name> <operator pos:start="34:42" pos:end="34:42">/</operator> <name pos:start="34:44" pos:end="34:59">TARGET_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="35:5" pos:end="35:19">/* init CPUs */</comment>
    <if_stmt pos:start="36:5" pos:end="38:5"><if pos:start="36:5" pos:end="38:5">if <condition pos:start="36:8" pos:end="36:26">(<expr pos:start="36:9" pos:end="36:25"><name pos:start="36:9" pos:end="36:17">cpu_model</name> <operator pos:start="36:19" pos:end="36:20">==</operator> <name pos:start="36:22" pos:end="36:25">NULL</name></expr>)</condition> <block pos:start="36:28" pos:end="38:5">{<block_content pos:start="37:9" pos:end="37:27">
        <expr_stmt pos:start="37:9" pos:end="37:27"><expr pos:start="37:9" pos:end="37:26"><name pos:start="37:9" pos:end="37:17">cpu_model</name> <operator pos:start="37:19" pos:end="37:19">=</operator> <literal type="string" pos:start="37:21" pos:end="37:26">"host"</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="39:5" pos:end="39:57"><expr pos:start="39:5" pos:end="39:56"><name pos:start="39:5" pos:end="39:14">ipi_states</name> <operator pos:start="39:16" pos:end="39:16">=</operator> <call pos:start="39:18" pos:end="39:56"><name pos:start="39:18" pos:end="39:25">g_malloc</name><argument_list pos:start="39:26" pos:end="39:56">(<argument pos:start="39:27" pos:end="39:55"><expr pos:start="39:27" pos:end="39:55"><sizeof pos:start="39:27" pos:end="39:44">sizeof<argument_list pos:start="39:33" pos:end="39:44">(<argument pos:start="39:34" pos:end="39:43"><expr pos:start="39:34" pos:end="39:43"><name pos:start="39:34" pos:end="39:41">CPUState</name> <operator pos:start="39:43" pos:end="39:43">*</operator></expr></argument>)</argument_list></sizeof> <operator pos:start="39:46" pos:end="39:46">*</operator> <name pos:start="39:48" pos:end="39:55">smp_cpus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for pos:start="40:5" pos:end="50:5">for <control pos:start="40:9" pos:end="40:34">(<init pos:start="40:10" pos:end="40:15"><expr pos:start="40:10" pos:end="40:14"><name pos:start="40:10" pos:end="40:10">i</name> <operator pos:start="40:12" pos:end="40:12">=</operator> <literal type="number" pos:start="40:14" pos:end="40:14">0</literal></expr>;</init> <condition pos:start="40:17" pos:end="40:29"><expr pos:start="40:17" pos:end="40:28"><name pos:start="40:17" pos:end="40:17">i</name> <operator pos:start="40:19" pos:end="40:19">&lt;</operator> <name pos:start="40:21" pos:end="40:28">smp_cpus</name></expr>;</condition> <incr pos:start="40:31" pos:end="40:33"><expr pos:start="40:31" pos:end="40:33"><name pos:start="40:31" pos:end="40:31">i</name><operator pos:start="40:32" pos:end="40:33">++</operator></expr></incr>)</control> <block pos:start="40:36" pos:end="50:5">{<block_content pos:start="41:9" pos:end="49:45">
        <decl_stmt pos:start="41:9" pos:end="41:26"><decl pos:start="41:9" pos:end="41:25"><type pos:start="41:9" pos:end="41:18"><name pos:start="41:9" pos:end="41:16">CPUState</name> <modifier pos:start="41:18" pos:end="41:18">*</modifier></type><name pos:start="41:19" pos:end="41:25">tmp_env</name></decl>;</decl_stmt>
        <expr_stmt pos:start="42:9" pos:end="42:38"><expr pos:start="42:9" pos:end="42:37"><name pos:start="42:9" pos:end="42:15">tmp_env</name> <operator pos:start="42:17" pos:end="42:17">=</operator> <call pos:start="42:19" pos:end="42:37"><name pos:start="42:19" pos:end="42:26">cpu_init</name><argument_list pos:start="42:27" pos:end="42:37">(<argument pos:start="42:28" pos:end="42:36"><expr pos:start="42:28" pos:end="42:36"><name pos:start="42:28" pos:end="42:36">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="43:9" pos:end="45:9"><if pos:start="43:9" pos:end="45:9">if <condition pos:start="43:12" pos:end="43:17">(<expr pos:start="43:13" pos:end="43:16"><operator pos:start="43:13" pos:end="43:13">!</operator><name pos:start="43:14" pos:end="43:16">env</name></expr>)</condition> <block pos:start="43:19" pos:end="45:9">{<block_content pos:start="44:13" pos:end="44:26">
            <expr_stmt pos:start="44:13" pos:end="44:26"><expr pos:start="44:13" pos:end="44:25"><name pos:start="44:13" pos:end="44:15">env</name> <operator pos:start="44:17" pos:end="44:17">=</operator> <name pos:start="44:19" pos:end="44:25">tmp_env</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="46:9" pos:end="46:32"><expr pos:start="46:9" pos:end="46:31"><name pos:start="46:9" pos:end="46:21"><name pos:start="46:9" pos:end="46:18">ipi_states</name><index pos:start="46:19" pos:end="46:21">[<expr pos:start="46:20" pos:end="46:20"><name pos:start="46:20" pos:end="46:20">i</name></expr>]</index></name> <operator pos:start="46:23" pos:end="46:23">=</operator> <name pos:start="46:25" pos:end="46:31">tmp_env</name></expr>;</expr_stmt>
        <expr_stmt pos:start="47:9" pos:end="47:28"><expr pos:start="47:9" pos:end="47:27"><name pos:start="47:9" pos:end="47:23"><name pos:start="47:9" pos:end="47:15">tmp_env</name><operator pos:start="47:16" pos:end="47:17">-&gt;</operator><name pos:start="47:18" pos:end="47:23">halted</name></name> <operator pos:start="47:25" pos:end="47:25">=</operator> <literal type="number" pos:start="47:27" pos:end="47:27">1</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="48:9" pos:end="48:44"><expr pos:start="48:9" pos:end="48:43"><name pos:start="48:9" pos:end="48:32"><name pos:start="48:9" pos:end="48:15">tmp_env</name><operator pos:start="48:16" pos:end="48:17">-&gt;</operator><name pos:start="48:18" pos:end="48:32">exception_index</name></name> <operator pos:start="48:34" pos:end="48:34">=</operator> <name pos:start="48:36" pos:end="48:43">EXCP_HLT</name></expr>;</expr_stmt>
        <expr_stmt pos:start="49:9" pos:end="49:45"><expr pos:start="49:9" pos:end="49:44"><name pos:start="49:9" pos:end="49:29"><name pos:start="49:9" pos:end="49:15">tmp_env</name><operator pos:start="49:16" pos:end="49:17">-&gt;</operator><name pos:start="49:18" pos:end="49:29">storage_keys</name></name> <operator pos:start="49:31" pos:end="49:31">=</operator> <name pos:start="49:33" pos:end="49:44">storage_keys</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <comment type="block" pos:start="51:5" pos:end="51:28">/* One CPU has to run */</comment>
    <expr_stmt pos:start="52:5" pos:end="52:30"><expr pos:start="52:5" pos:end="52:29"><call pos:start="52:5" pos:end="52:29"><name pos:start="52:5" pos:end="52:24">s390_add_running_cpu</name><argument_list pos:start="52:25" pos:end="52:29">(<argument pos:start="52:26" pos:end="52:28"><expr pos:start="52:26" pos:end="52:28"><name pos:start="52:26" pos:end="52:28">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="53:5" pos:end="79:5"><if pos:start="53:5" pos:end="61:5">if <condition pos:start="53:8" pos:end="53:24">(<expr pos:start="53:9" pos:end="53:23"><name pos:start="53:9" pos:end="53:23">kernel_filename</name></expr>)</condition> <block pos:start="53:26" pos:end="61:5">{<block_content pos:start="54:9" pos:end="60:46">
        <expr_stmt pos:start="54:9" pos:end="54:71"><expr pos:start="54:9" pos:end="54:70"><name pos:start="54:9" pos:end="54:19">kernel_size</name> <operator pos:start="54:21" pos:end="54:21">=</operator> <call pos:start="54:23" pos:end="54:70"><name pos:start="54:23" pos:end="54:32">load_image</name><argument_list pos:start="54:33" pos:end="54:70">(<argument pos:start="54:34" pos:end="54:48"><expr pos:start="54:34" pos:end="54:48"><name pos:start="54:34" pos:end="54:48">kernel_filename</name></expr></argument>, <argument pos:start="54:51" pos:end="54:69"><expr pos:start="54:51" pos:end="54:69"><call pos:start="54:51" pos:end="54:69"><name pos:start="54:51" pos:end="54:66">qemu_get_ram_ptr</name><argument_list pos:start="54:67" pos:end="54:69">(<argument pos:start="54:68" pos:end="54:68"><expr pos:start="54:68" pos:end="54:68"><literal type="number" pos:start="54:68" pos:end="54:68">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="55:9" pos:end="58:9"><if pos:start="55:9" pos:end="58:9">if <condition pos:start="55:12" pos:end="55:53">(<expr pos:start="55:13" pos:end="55:52"><call pos:start="55:13" pos:end="55:42"><name pos:start="55:13" pos:end="55:24">lduw_be_phys</name><argument_list pos:start="55:25" pos:end="55:42">(<argument pos:start="55:26" pos:end="55:41"><expr pos:start="55:26" pos:end="55:41"><name pos:start="55:26" pos:end="55:41">KERN_IMAGE_START</name></expr></argument>)</argument_list></call> <operator pos:start="55:44" pos:end="55:45">!=</operator> <literal type="number" pos:start="55:47" pos:end="55:52">0x0dd0</literal></expr>)</condition> <block pos:start="55:55" pos:end="58:9">{<block_content pos:start="56:13" pos:end="57:20">
            <expr_stmt pos:start="56:13" pos:end="56:75"><expr pos:start="56:13" pos:end="56:74"><call pos:start="56:13" pos:end="56:74"><name pos:start="56:13" pos:end="56:19">fprintf</name><argument_list pos:start="56:20" pos:end="56:74">(<argument pos:start="56:21" pos:end="56:26"><expr pos:start="56:21" pos:end="56:26"><name pos:start="56:21" pos:end="56:26">stderr</name></expr></argument>, <argument pos:start="56:29" pos:end="56:73"><expr pos:start="56:29" pos:end="56:73"><literal type="string" pos:start="56:29" pos:end="56:73">"Specified image is not an s390 boot image\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="57:13" pos:end="57:20"><expr pos:start="57:13" pos:end="57:19"><call pos:start="57:13" pos:end="57:19"><name pos:start="57:13" pos:end="57:16">exit</name><argument_list pos:start="57:17" pos:end="57:19">(<argument pos:start="57:18" pos:end="57:18"><expr pos:start="57:18" pos:end="57:18"><literal type="number" pos:start="57:18" pos:end="57:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="59:9" pos:end="59:41"><expr pos:start="59:9" pos:end="59:40"><name pos:start="59:9" pos:end="59:21"><name pos:start="59:9" pos:end="59:11">env</name><operator pos:start="59:12" pos:end="59:13">-&gt;</operator><name pos:start="59:14" pos:end="59:16">psw</name><operator pos:start="59:17" pos:end="59:17">.</operator><name pos:start="59:18" pos:end="59:21">addr</name></name> <operator pos:start="59:23" pos:end="59:23">=</operator> <name pos:start="59:25" pos:end="59:40">KERN_IMAGE_START</name></expr>;</expr_stmt>
        <expr_stmt pos:start="60:9" pos:end="60:46"><expr pos:start="60:9" pos:end="60:45"><name pos:start="60:9" pos:end="60:21"><name pos:start="60:9" pos:end="60:11">env</name><operator pos:start="60:12" pos:end="60:13">-&gt;</operator><name pos:start="60:14" pos:end="60:16">psw</name><operator pos:start="60:17" pos:end="60:17">.</operator><name pos:start="60:18" pos:end="60:21">mask</name></name> <operator pos:start="60:23" pos:end="60:23">=</operator> <literal type="number" pos:start="60:25" pos:end="60:45">0x0000000180000000ULL</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="61:7" pos:end="79:5">else <block pos:start="61:12" pos:end="79:5">{<block_content pos:start="62:9" pos:end="78:46">
        <decl_stmt pos:start="62:9" pos:end="62:33"><decl pos:start="62:9" pos:end="62:32"><type pos:start="62:9" pos:end="62:18"><name pos:start="62:9" pos:end="62:18">ram_addr_t</name></type> <name pos:start="62:20" pos:end="62:28">bios_size</name> <init pos:start="62:30" pos:end="62:32">= <expr pos:start="62:32" pos:end="62:32"><literal type="number" pos:start="62:32" pos:end="62:32">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="63:9" pos:end="63:28"><decl pos:start="63:9" pos:end="63:27"><type pos:start="63:9" pos:end="63:14"><name pos:start="63:9" pos:end="63:12">char</name> <modifier pos:start="63:14" pos:end="63:14">*</modifier></type><name pos:start="63:15" pos:end="63:27">bios_filename</name></decl>;</decl_stmt>
        <comment type="block" pos:start="64:9" pos:end="64:34">/* Load zipl bootloader */</comment>
        <if_stmt pos:start="65:9" pos:end="67:9"><if pos:start="65:9" pos:end="67:9">if <condition pos:start="65:12" pos:end="65:30">(<expr pos:start="65:13" pos:end="65:29"><name pos:start="65:13" pos:end="65:21">bios_name</name> <operator pos:start="65:23" pos:end="65:24">==</operator> <name pos:start="65:26" pos:end="65:29">NULL</name></expr>)</condition> <block pos:start="65:32" pos:end="67:9">{<block_content pos:start="66:13" pos:end="66:38">
            <expr_stmt pos:start="66:13" pos:end="66:38"><expr pos:start="66:13" pos:end="66:37"><name pos:start="66:13" pos:end="66:21">bios_name</name> <operator pos:start="66:23" pos:end="66:23">=</operator> <name pos:start="66:25" pos:end="66:37">ZIPL_FILENAME</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="68:9" pos:end="68:71"><expr pos:start="68:9" pos:end="68:70"><name pos:start="68:9" pos:end="68:21">bios_filename</name> <operator pos:start="68:23" pos:end="68:23">=</operator> <call pos:start="68:25" pos:end="68:70"><name pos:start="68:25" pos:end="68:38">qemu_find_file</name><argument_list pos:start="68:39" pos:end="68:70">(<argument pos:start="68:40" pos:end="68:58"><expr pos:start="68:40" pos:end="68:58"><name pos:start="68:40" pos:end="68:58">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="68:61" pos:end="68:69"><expr pos:start="68:61" pos:end="68:69"><name pos:start="68:61" pos:end="68:69">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="69:9" pos:end="69:80"><expr pos:start="69:9" pos:end="69:79"><name pos:start="69:9" pos:end="69:17">bios_size</name> <operator pos:start="69:19" pos:end="69:19">=</operator> <call pos:start="69:21" pos:end="69:79"><name pos:start="69:21" pos:end="69:30">load_image</name><argument_list pos:start="69:31" pos:end="69:79">(<argument pos:start="69:32" pos:end="69:44"><expr pos:start="69:32" pos:end="69:44"><name pos:start="69:32" pos:end="69:44">bios_filename</name></expr></argument>, <argument pos:start="69:47" pos:end="69:78"><expr pos:start="69:47" pos:end="69:78"><call pos:start="69:47" pos:end="69:78"><name pos:start="69:47" pos:end="69:62">qemu_get_ram_ptr</name><argument_list pos:start="69:63" pos:end="69:78">(<argument pos:start="69:64" pos:end="69:77"><expr pos:start="69:64" pos:end="69:77"><name pos:start="69:64" pos:end="69:77">ZIPL_LOAD_ADDR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="70:9" pos:end="70:30"><expr pos:start="70:9" pos:end="70:29"><call pos:start="70:9" pos:end="70:29"><name pos:start="70:9" pos:end="70:14">g_free</name><argument_list pos:start="70:15" pos:end="70:29">(<argument pos:start="70:16" pos:end="70:28"><expr pos:start="70:16" pos:end="70:28"><name pos:start="70:16" pos:end="70:28">bios_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="71:9" pos:end="73:9"><if pos:start="71:9" pos:end="73:9">if <condition pos:start="71:12" pos:end="71:32">(<expr pos:start="71:13" pos:end="71:31"><operator pos:start="71:13" pos:end="71:13">(</operator><name pos:start="71:14" pos:end="71:17">long</name><operator pos:start="71:18" pos:end="71:18">)</operator><name pos:start="71:19" pos:end="71:27">bios_size</name> <operator pos:start="71:29" pos:end="71:29">&lt;</operator> <literal type="number" pos:start="71:31" pos:end="71:31">0</literal></expr>)</condition> <block pos:start="71:34" pos:end="73:9">{<block_content pos:start="72:13" pos:end="72:68">
            <expr_stmt pos:start="72:13" pos:end="72:68"><expr pos:start="72:13" pos:end="72:67"><call pos:start="72:13" pos:end="72:67"><name pos:start="72:13" pos:end="72:20">hw_error</name><argument_list pos:start="72:21" pos:end="72:67">(<argument pos:start="72:22" pos:end="72:55"><expr pos:start="72:22" pos:end="72:55"><literal type="string" pos:start="72:22" pos:end="72:55">"could not load bootloader '%s'\n"</literal></expr></argument>, <argument pos:start="72:58" pos:end="72:66"><expr pos:start="72:58" pos:end="72:66"><name pos:start="72:58" pos:end="72:66">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="74:9" pos:end="76:9"><if pos:start="74:9" pos:end="76:9">if <condition pos:start="74:12" pos:end="74:29">(<expr pos:start="74:13" pos:end="74:28"><name pos:start="74:13" pos:end="74:21">bios_size</name> <operator pos:start="74:23" pos:end="74:23">&gt;</operator> <literal type="number" pos:start="74:25" pos:end="74:28">4096</literal></expr>)</condition> <block pos:start="74:31" pos:end="76:9">{<block_content pos:start="75:13" pos:end="75:52">
            <expr_stmt pos:start="75:13" pos:end="75:52"><expr pos:start="75:13" pos:end="75:51"><call pos:start="75:13" pos:end="75:51"><name pos:start="75:13" pos:end="75:20">hw_error</name><argument_list pos:start="75:21" pos:end="75:51">(<argument pos:start="75:22" pos:end="75:50"><expr pos:start="75:22" pos:end="75:50"><literal type="string" pos:start="75:22" pos:end="75:50">"stage1 bootloader is &gt; 4k\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="77:9" pos:end="77:35"><expr pos:start="77:9" pos:end="77:34"><name pos:start="77:9" pos:end="77:21"><name pos:start="77:9" pos:end="77:11">env</name><operator pos:start="77:12" pos:end="77:13">-&gt;</operator><name pos:start="77:14" pos:end="77:16">psw</name><operator pos:start="77:17" pos:end="77:17">.</operator><name pos:start="77:18" pos:end="77:21">addr</name></name> <operator pos:start="77:23" pos:end="77:23">=</operator> <name pos:start="77:25" pos:end="77:34">ZIPL_START</name></expr>;</expr_stmt>
        <expr_stmt pos:start="78:9" pos:end="78:46"><expr pos:start="78:9" pos:end="78:45"><name pos:start="78:9" pos:end="78:21"><name pos:start="78:9" pos:end="78:11">env</name><operator pos:start="78:12" pos:end="78:13">-&gt;</operator><name pos:start="78:14" pos:end="78:16">psw</name><operator pos:start="78:17" pos:end="78:17">.</operator><name pos:start="78:18" pos:end="78:21">mask</name></name> <operator pos:start="78:23" pos:end="78:23">=</operator> <literal type="number" pos:start="78:25" pos:end="78:45">0x0000000180000000ULL</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt pos:start="80:5" pos:end="88:5"><if pos:start="80:5" pos:end="88:5">if <condition pos:start="80:8" pos:end="80:24">(<expr pos:start="80:9" pos:end="80:23"><name pos:start="80:9" pos:end="80:23">initrd_filename</name></expr>)</condition> <block pos:start="80:26" pos:end="88:5">{<block_content pos:start="81:9" pos:end="87:51">
        <expr_stmt pos:start="81:9" pos:end="81:37"><expr pos:start="81:9" pos:end="81:36"><name pos:start="81:9" pos:end="81:21">initrd_offset</name> <operator pos:start="81:23" pos:end="81:23">=</operator> <name pos:start="81:25" pos:end="81:36">INITRD_START</name></expr>;</expr_stmt>
        <while pos:start="82:9" pos:end="84:9">while <condition pos:start="82:15" pos:end="82:54">(<expr pos:start="82:16" pos:end="82:53"><name pos:start="82:16" pos:end="82:26">kernel_size</name> <operator pos:start="82:28" pos:end="82:28">+</operator> <literal type="number" pos:start="82:30" pos:end="82:37">0x100000</literal> <operator pos:start="82:39" pos:end="82:39">&gt;</operator> <name pos:start="82:41" pos:end="82:53">initrd_offset</name></expr>)</condition> <block pos:start="82:56" pos:end="84:9">{<block_content pos:start="83:13" pos:end="83:38">
            <expr_stmt pos:start="83:13" pos:end="83:38"><expr pos:start="83:13" pos:end="83:37"><name pos:start="83:13" pos:end="83:25">initrd_offset</name> <operator pos:start="83:27" pos:end="83:28">+=</operator> <literal type="number" pos:start="83:30" pos:end="83:37">0x100000</literal></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt pos:start="85:9" pos:end="85:83"><expr pos:start="85:9" pos:end="85:82"><name pos:start="85:9" pos:end="85:19">initrd_size</name> <operator pos:start="85:21" pos:end="85:21">=</operator> <call pos:start="85:23" pos:end="85:82"><name pos:start="85:23" pos:end="85:32">load_image</name><argument_list pos:start="85:33" pos:end="85:82">(<argument pos:start="85:34" pos:end="85:48"><expr pos:start="85:34" pos:end="85:48"><name pos:start="85:34" pos:end="85:48">initrd_filename</name></expr></argument>, <argument pos:start="85:51" pos:end="85:81"><expr pos:start="85:51" pos:end="85:81"><call pos:start="85:51" pos:end="85:81"><name pos:start="85:51" pos:end="85:66">qemu_get_ram_ptr</name><argument_list pos:start="85:67" pos:end="85:81">(<argument pos:start="85:68" pos:end="85:80"><expr pos:start="85:68" pos:end="85:80"><name pos:start="85:68" pos:end="85:80">initrd_offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="86:9" pos:end="86:54"><expr pos:start="86:9" pos:end="86:53"><call pos:start="86:9" pos:end="86:53"><name pos:start="86:9" pos:end="86:19">stq_be_phys</name><argument_list pos:start="86:20" pos:end="86:53">(<argument pos:start="86:21" pos:end="86:37"><expr pos:start="86:21" pos:end="86:37"><name pos:start="86:21" pos:end="86:37">INITRD_PARM_START</name></expr></argument>, <argument pos:start="86:40" pos:end="86:52"><expr pos:start="86:40" pos:end="86:52"><name pos:start="86:40" pos:end="86:52">initrd_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="87:9" pos:end="87:51"><expr pos:start="87:9" pos:end="87:50"><call pos:start="87:9" pos:end="87:50"><name pos:start="87:9" pos:end="87:19">stq_be_phys</name><argument_list pos:start="87:20" pos:end="87:50">(<argument pos:start="87:21" pos:end="87:36"><expr pos:start="87:21" pos:end="87:36"><name pos:start="87:21" pos:end="87:36">INITRD_PARM_SIZE</name></expr></argument>, <argument pos:start="87:39" pos:end="87:49"><expr pos:start="87:39" pos:end="87:49"><name pos:start="87:39" pos:end="87:49">initrd_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="89:5" pos:end="92:5"><if pos:start="89:5" pos:end="92:5">if <condition pos:start="89:8" pos:end="89:23">(<expr pos:start="89:9" pos:end="89:22"><name pos:start="89:9" pos:end="89:22">kernel_cmdline</name></expr>)</condition> <block pos:start="89:25" pos:end="92:5">{<block_content pos:start="90:9" pos:end="91:62">
        <expr_stmt pos:start="90:9" pos:end="91:62"><expr pos:start="90:9" pos:end="91:61"><call pos:start="90:9" pos:end="91:61"><name pos:start="90:9" pos:end="90:33">cpu_physical_memory_write</name><argument_list pos:start="90:34" pos:end="91:61">(<argument pos:start="90:35" pos:end="90:48"><expr pos:start="90:35" pos:end="90:48"><name pos:start="90:35" pos:end="90:48">KERN_PARM_AREA</name></expr></argument>, <argument pos:start="90:51" pos:end="90:64"><expr pos:start="90:51" pos:end="90:64"><name pos:start="90:51" pos:end="90:64">kernel_cmdline</name></expr></argument>,
                                  <argument pos:start="91:35" pos:end="91:60"><expr pos:start="91:35" pos:end="91:60"><call pos:start="91:35" pos:end="91:56"><name pos:start="91:35" pos:end="91:40">strlen</name><argument_list pos:start="91:41" pos:end="91:56">(<argument pos:start="91:42" pos:end="91:55"><expr pos:start="91:42" pos:end="91:55"><name pos:start="91:42" pos:end="91:55">kernel_cmdline</name></expr></argument>)</argument_list></call> <operator pos:start="91:58" pos:end="91:58">+</operator> <literal type="number" pos:start="91:60" pos:end="91:60">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block" pos:start="93:5" pos:end="93:40">/* Create VirtIO network adapters */</comment>
    <for pos:start="94:5" pos:end="107:5">for<control pos:start="94:8" pos:end="94:32">(<init pos:start="94:9" pos:end="94:14"><expr pos:start="94:9" pos:end="94:13"><name pos:start="94:9" pos:end="94:9">i</name> <operator pos:start="94:11" pos:end="94:11">=</operator> <literal type="number" pos:start="94:13" pos:end="94:13">0</literal></expr>;</init> <condition pos:start="94:16" pos:end="94:27"><expr pos:start="94:16" pos:end="94:26"><name pos:start="94:16" pos:end="94:16">i</name> <operator pos:start="94:18" pos:end="94:18">&lt;</operator> <name pos:start="94:20" pos:end="94:26">nb_nics</name></expr>;</condition> <incr pos:start="94:29" pos:end="94:31"><expr pos:start="94:29" pos:end="94:31"><name pos:start="94:29" pos:end="94:29">i</name><operator pos:start="94:30" pos:end="94:31">++</operator></expr></incr>)</control> <block pos:start="94:34" pos:end="107:5">{<block_content pos:start="95:9" pos:end="106:30">
        <decl_stmt pos:start="95:9" pos:end="95:35"><decl pos:start="95:9" pos:end="95:34"><type pos:start="95:9" pos:end="95:17"><name pos:start="95:9" pos:end="95:15">NICInfo</name> <modifier pos:start="95:17" pos:end="95:17">*</modifier></type><name pos:start="95:18" pos:end="95:19">nd</name> <init pos:start="95:21" pos:end="95:34">= <expr pos:start="95:23" pos:end="95:34"><operator pos:start="95:23" pos:end="95:23">&amp;</operator><name pos:start="95:24" pos:end="95:34"><name pos:start="95:24" pos:end="95:31">nd_table</name><index pos:start="95:32" pos:end="95:34">[<expr pos:start="95:33" pos:end="95:33"><name pos:start="95:33" pos:end="95:33">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="96:9" pos:end="96:25"><decl pos:start="96:9" pos:end="96:24"><type pos:start="96:9" pos:end="96:21"><name pos:start="96:9" pos:end="96:19">DeviceState</name> <modifier pos:start="96:21" pos:end="96:21">*</modifier></type><name pos:start="96:22" pos:end="96:24">dev</name></decl>;</decl_stmt>
        <if_stmt pos:start="97:9" pos:end="99:9"><if pos:start="97:9" pos:end="99:9">if <condition pos:start="97:12" pos:end="97:23">(<expr pos:start="97:13" pos:end="97:22"><operator pos:start="97:13" pos:end="97:13">!</operator><name pos:start="97:14" pos:end="97:22"><name pos:start="97:14" pos:end="97:15">nd</name><operator pos:start="97:16" pos:end="97:17">-&gt;</operator><name pos:start="97:18" pos:end="97:22">model</name></name></expr>)</condition> <block pos:start="97:25" pos:end="99:9">{<block_content pos:start="98:13" pos:end="98:43">
            <expr_stmt pos:start="98:13" pos:end="98:43"><expr pos:start="98:13" pos:end="98:42"><name pos:start="98:13" pos:end="98:21"><name pos:start="98:13" pos:end="98:14">nd</name><operator pos:start="98:15" pos:end="98:16">-&gt;</operator><name pos:start="98:17" pos:end="98:21">model</name></name> <operator pos:start="98:23" pos:end="98:23">=</operator> <call pos:start="98:25" pos:end="98:42"><name pos:start="98:25" pos:end="98:32">g_strdup</name><argument_list pos:start="98:33" pos:end="98:42">(<argument pos:start="98:34" pos:end="98:41"><expr pos:start="98:34" pos:end="98:41"><literal type="string" pos:start="98:34" pos:end="98:41">"virtio"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="100:9" pos:end="103:9"><if pos:start="100:9" pos:end="103:9">if <condition pos:start="100:12" pos:end="100:40">(<expr pos:start="100:13" pos:end="100:39"><call pos:start="100:13" pos:end="100:39"><name pos:start="100:13" pos:end="100:18">strcmp</name><argument_list pos:start="100:19" pos:end="100:39">(<argument pos:start="100:20" pos:end="100:28"><expr pos:start="100:20" pos:end="100:28"><name pos:start="100:20" pos:end="100:28"><name pos:start="100:20" pos:end="100:21">nd</name><operator pos:start="100:22" pos:end="100:23">-&gt;</operator><name pos:start="100:24" pos:end="100:28">model</name></name></expr></argument>, <argument pos:start="100:31" pos:end="100:38"><expr pos:start="100:31" pos:end="100:38"><literal type="string" pos:start="100:31" pos:end="100:38">"virtio"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="100:42" pos:end="103:9">{<block_content pos:start="101:13" pos:end="102:20">
            <expr_stmt pos:start="101:13" pos:end="101:64"><expr pos:start="101:13" pos:end="101:63"><call pos:start="101:13" pos:end="101:63"><name pos:start="101:13" pos:end="101:19">fprintf</name><argument_list pos:start="101:20" pos:end="101:63">(<argument pos:start="101:21" pos:end="101:26"><expr pos:start="101:21" pos:end="101:26"><name pos:start="101:21" pos:end="101:26">stderr</name></expr></argument>, <argument pos:start="101:29" pos:end="101:62"><expr pos:start="101:29" pos:end="101:62"><literal type="string" pos:start="101:29" pos:end="101:62">"S390 only supports VirtIO nics\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="102:13" pos:end="102:20"><expr pos:start="102:13" pos:end="102:19"><call pos:start="102:13" pos:end="102:19"><name pos:start="102:13" pos:end="102:16">exit</name><argument_list pos:start="102:17" pos:end="102:19">(<argument pos:start="102:18" pos:end="102:18"><expr pos:start="102:18" pos:end="102:18"><literal type="number" pos:start="102:18" pos:end="102:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="104:9" pos:end="104:67"><expr pos:start="104:9" pos:end="104:66"><name pos:start="104:9" pos:end="104:11">dev</name> <operator pos:start="104:13" pos:end="104:13">=</operator> <call pos:start="104:15" pos:end="104:66"><name pos:start="104:15" pos:end="104:25">qdev_create</name><argument_list pos:start="104:26" pos:end="104:66">(<argument pos:start="104:27" pos:end="104:46"><expr pos:start="104:27" pos:end="104:46"><operator pos:start="104:27" pos:end="104:27">(</operator><name pos:start="104:28" pos:end="104:35">BusState</name> <operator pos:start="104:37" pos:end="104:37">*</operator><operator pos:start="104:38" pos:end="104:38">)</operator><name pos:start="104:39" pos:end="104:46">s390_bus</name></expr></argument>, <argument pos:start="104:49" pos:end="104:65"><expr pos:start="104:49" pos:end="104:65"><literal type="string" pos:start="104:49" pos:end="104:65">"virtio-net-s390"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="105:9" pos:end="105:41"><expr pos:start="105:9" pos:end="105:40"><call pos:start="105:9" pos:end="105:40"><name pos:start="105:9" pos:end="105:31">qdev_set_nic_properties</name><argument_list pos:start="105:32" pos:end="105:40">(<argument pos:start="105:33" pos:end="105:35"><expr pos:start="105:33" pos:end="105:35"><name pos:start="105:33" pos:end="105:35">dev</name></expr></argument>, <argument pos:start="105:38" pos:end="105:39"><expr pos:start="105:38" pos:end="105:39"><name pos:start="105:38" pos:end="105:39">nd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="106:9" pos:end="106:30"><expr pos:start="106:9" pos:end="106:29"><call pos:start="106:9" pos:end="106:29"><name pos:start="106:9" pos:end="106:24">qdev_init_nofail</name><argument_list pos:start="106:25" pos:end="106:29">(<argument pos:start="106:26" pos:end="106:28"><expr pos:start="106:26" pos:end="106:28"><name pos:start="106:26" pos:end="106:28">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <comment type="block" pos:start="108:5" pos:end="108:35">/* Create VirtIO disk drives */</comment>
    <for pos:start="109:5" pos:end="119:5">for<control pos:start="109:8" pos:end="109:37">(<init pos:start="109:9" pos:end="109:14"><expr pos:start="109:9" pos:end="109:13"><name pos:start="109:9" pos:end="109:9">i</name> <operator pos:start="109:11" pos:end="109:11">=</operator> <literal type="number" pos:start="109:13" pos:end="109:13">0</literal></expr>;</init> <condition pos:start="109:16" pos:end="109:32"><expr pos:start="109:16" pos:end="109:31"><name pos:start="109:16" pos:end="109:16">i</name> <operator pos:start="109:18" pos:end="109:18">&lt;</operator> <name pos:start="109:20" pos:end="109:31">MAX_BLK_DEVS</name></expr>;</condition> <incr pos:start="109:34" pos:end="109:36"><expr pos:start="109:34" pos:end="109:36"><name pos:start="109:34" pos:end="109:34">i</name><operator pos:start="109:35" pos:end="109:36">++</operator></expr></incr>)</control> <block pos:start="109:39" pos:end="119:5">{<block_content pos:start="110:9" pos:end="118:30">
        <decl_stmt pos:start="110:9" pos:end="110:25"><decl pos:start="110:9" pos:end="110:24"><type pos:start="110:9" pos:end="110:19"><name pos:start="110:9" pos:end="110:17">DriveInfo</name> <modifier pos:start="110:19" pos:end="110:19">*</modifier></type><name pos:start="110:20" pos:end="110:24">dinfo</name></decl>;</decl_stmt>
        <decl_stmt pos:start="111:9" pos:end="111:25"><decl pos:start="111:9" pos:end="111:24"><type pos:start="111:9" pos:end="111:21"><name pos:start="111:9" pos:end="111:19">DeviceState</name> <modifier pos:start="111:21" pos:end="111:21">*</modifier></type><name pos:start="111:22" pos:end="111:24">dev</name></decl>;</decl_stmt>
        <expr_stmt pos:start="112:9" pos:end="112:40"><expr pos:start="112:9" pos:end="112:39"><name pos:start="112:9" pos:end="112:13">dinfo</name> <operator pos:start="112:15" pos:end="112:15">=</operator> <call pos:start="112:17" pos:end="112:39"><name pos:start="112:17" pos:end="112:25">drive_get</name><argument_list pos:start="112:26" pos:end="112:39">(<argument pos:start="112:27" pos:end="112:32"><expr pos:start="112:27" pos:end="112:32"><name pos:start="112:27" pos:end="112:32">IF_IDE</name></expr></argument>, <argument pos:start="112:35" pos:end="112:35"><expr pos:start="112:35" pos:end="112:35"><literal type="number" pos:start="112:35" pos:end="112:35">0</literal></expr></argument>, <argument pos:start="112:38" pos:end="112:38"><expr pos:start="112:38" pos:end="112:38"><name pos:start="112:38" pos:end="112:38">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="113:9" pos:end="115:9"><if pos:start="113:9" pos:end="115:9">if <condition pos:start="113:12" pos:end="113:19">(<expr pos:start="113:13" pos:end="113:18"><operator pos:start="113:13" pos:end="113:13">!</operator><name pos:start="113:14" pos:end="113:18">dinfo</name></expr>)</condition> <block pos:start="113:21" pos:end="115:9">{<block_content pos:start="114:13" pos:end="114:21">
            <continue pos:start="114:13" pos:end="114:21">continue;</continue>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="116:9" pos:end="116:67"><expr pos:start="116:9" pos:end="116:66"><name pos:start="116:9" pos:end="116:11">dev</name> <operator pos:start="116:13" pos:end="116:13">=</operator> <call pos:start="116:15" pos:end="116:66"><name pos:start="116:15" pos:end="116:25">qdev_create</name><argument_list pos:start="116:26" pos:end="116:66">(<argument pos:start="116:27" pos:end="116:46"><expr pos:start="116:27" pos:end="116:46"><operator pos:start="116:27" pos:end="116:27">(</operator><name pos:start="116:28" pos:end="116:35">BusState</name> <operator pos:start="116:37" pos:end="116:37">*</operator><operator pos:start="116:38" pos:end="116:38">)</operator><name pos:start="116:39" pos:end="116:46">s390_bus</name></expr></argument>, <argument pos:start="116:49" pos:end="116:65"><expr pos:start="116:49" pos:end="116:65"><literal type="string" pos:start="116:49" pos:end="116:65">"virtio-blk-s390"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="117:9" pos:end="117:62"><expr pos:start="117:9" pos:end="117:61"><call pos:start="117:9" pos:end="117:61"><name pos:start="117:9" pos:end="117:34">qdev_prop_set_drive_nofail</name><argument_list pos:start="117:35" pos:end="117:61">(<argument pos:start="117:36" pos:end="117:38"><expr pos:start="117:36" pos:end="117:38"><name pos:start="117:36" pos:end="117:38">dev</name></expr></argument>, <argument pos:start="117:41" pos:end="117:47"><expr pos:start="117:41" pos:end="117:47"><literal type="string" pos:start="117:41" pos:end="117:47">"drive"</literal></expr></argument>, <argument pos:start="117:50" pos:end="117:60"><expr pos:start="117:50" pos:end="117:60"><name pos:start="117:50" pos:end="117:60"><name pos:start="117:50" pos:end="117:54">dinfo</name><operator pos:start="117:55" pos:end="117:56">-&gt;</operator><name pos:start="117:57" pos:end="117:60">bdrv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="118:9" pos:end="118:30"><expr pos:start="118:9" pos:end="118:29"><call pos:start="118:9" pos:end="118:29"><name pos:start="118:9" pos:end="118:24">qdev_init_nofail</name><argument_list pos:start="118:25" pos:end="118:29">(<argument pos:start="118:26" pos:end="118:28"><expr pos:start="118:26" pos:end="118:28"><name pos:start="118:26" pos:end="118:28">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function></unit>
