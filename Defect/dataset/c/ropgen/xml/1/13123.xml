<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13123.c" pos:tabs="8"><function pos:start="1:1" pos:end="157:1"><type pos:start="1:1" pos:end="1:23"><name pos:start="1:1" pos:end="1:3">int</name> <name pos:start="1:5" pos:end="1:23">attribute_align_arg</name></type> <name pos:start="1:25" pos:end="1:44">avcodec_encode_audio</name><parameter_list pos:start="1:45" pos:end="5:66">(<parameter pos:start="1:46" pos:end="1:66"><decl pos:start="1:46" pos:end="1:66"><type pos:start="1:46" pos:end="1:66"><name pos:start="1:46" pos:end="1:59">AVCodecContext</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:66">avctx</name></decl></parameter>,

                                             <parameter pos:start="3:46" pos:end="3:57"><decl pos:start="3:46" pos:end="3:57"><type pos:start="3:46" pos:end="3:57"><name pos:start="3:46" pos:end="3:52">uint8_t</name> <modifier pos:start="3:54" pos:end="3:54">*</modifier></type><name pos:start="3:55" pos:end="3:57">buf</name></decl></parameter>, <parameter pos:start="3:60" pos:end="3:71"><decl pos:start="3:60" pos:end="3:71"><type pos:start="3:60" pos:end="3:71"><name pos:start="3:60" pos:end="3:62">int</name></type> <name pos:start="3:64" pos:end="3:71">buf_size</name></decl></parameter>,

                                             <parameter pos:start="5:46" pos:end="5:65"><decl pos:start="5:46" pos:end="5:65"><type pos:start="5:46" pos:end="5:65"><specifier pos:start="5:46" pos:end="5:50">const</specifier> <name pos:start="5:52" pos:end="5:56">short</name> <modifier pos:start="5:58" pos:end="5:58">*</modifier></type><name pos:start="5:59" pos:end="5:65">samples</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="157:1">{<block_content pos:start="9:5" pos:end="155:32">

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">AVPacket</name></type> <name pos:start="9:14" pos:end="9:16">pkt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">AVFrame</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:18">frame</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:38"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name></decl>, <decl pos:start="13:14" pos:end="13:25"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:14" pos:end="13:25">samples_size</name></decl>, <decl pos:start="13:28" pos:end="13:37"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:28" pos:end="13:37">got_packet</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:25"><expr pos:start="17:5" pos:end="17:24"><call pos:start="17:5" pos:end="17:24"><name pos:start="17:5" pos:end="17:18">av_init_packet</name><argument_list pos:start="17:19" pos:end="17:24">(<argument pos:start="17:20" pos:end="17:23"><expr pos:start="17:20" pos:end="17:23"><operator pos:start="17:20" pos:end="17:20">&amp;</operator><name pos:start="17:21" pos:end="17:23">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:19"><expr pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:7">pkt</name><operator pos:start="19:8" pos:end="19:8">.</operator><name pos:start="19:9" pos:end="19:12">data</name></name> <operator pos:start="19:14" pos:end="19:14">=</operator> <name pos:start="19:16" pos:end="19:18">buf</name></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:24"><expr pos:start="21:5" pos:end="21:23"><name pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:7">pkt</name><operator pos:start="21:8" pos:end="21:8">.</operator><name pos:start="21:9" pos:end="21:12">size</name></name> <operator pos:start="21:14" pos:end="21:14">=</operator> <name pos:start="21:16" pos:end="21:23">buf_size</name></expr>;</expr_stmt>



    <if_stmt pos:start="25:5" pos:end="125:5"><if pos:start="25:5" pos:end="121:5">if <condition pos:start="25:8" pos:end="25:16">(<expr pos:start="25:9" pos:end="25:15"><name pos:start="25:9" pos:end="25:15">samples</name></expr>)</condition> <block pos:start="25:18" pos:end="121:5">{<block_content pos:start="27:9" pos:end="119:59">

        <expr_stmt pos:start="27:9" pos:end="27:33"><expr pos:start="27:9" pos:end="27:32"><name pos:start="27:9" pos:end="27:13">frame</name> <operator pos:start="27:15" pos:end="27:15">=</operator> <call pos:start="27:17" pos:end="27:32"><name pos:start="27:17" pos:end="27:30">av_frame_alloc</name><argument_list pos:start="27:31" pos:end="27:32">()</argument_list></call></expr>;</expr_stmt>





        <if_stmt pos:start="33:9" pos:end="73:9"><if pos:start="33:9" pos:end="37:9">if <condition pos:start="33:12" pos:end="33:30">(<expr pos:start="33:13" pos:end="33:29"><name pos:start="33:13" pos:end="33:29"><name pos:start="33:13" pos:end="33:17">avctx</name><operator pos:start="33:18" pos:end="33:19">-&gt;</operator><name pos:start="33:20" pos:end="33:29">frame_size</name></name></expr>)</condition> <block pos:start="33:32" pos:end="37:9">{<block_content pos:start="35:13" pos:end="35:50">

            <expr_stmt pos:start="35:13" pos:end="35:50"><expr pos:start="35:13" pos:end="35:49"><name pos:start="35:13" pos:end="35:29"><name pos:start="35:13" pos:end="35:17">frame</name><operator pos:start="35:18" pos:end="35:19">-&gt;</operator><name pos:start="35:20" pos:end="35:29">nb_samples</name></name> <operator pos:start="35:31" pos:end="35:31">=</operator> <name pos:start="35:33" pos:end="35:49"><name pos:start="35:33" pos:end="35:37">avctx</name><operator pos:start="35:38" pos:end="35:39">-&gt;</operator><name pos:start="35:40" pos:end="35:49">frame_size</name></name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="37:11" pos:end="73:9">else <block pos:start="37:16" pos:end="73:9">{<block_content pos:start="43:13" pos:end="71:43">

            <comment type="block" pos:start="39:13" pos:end="41:49">/* if frame_size is not set, the number of samples must be

             * calculated from the buffer size */</comment>

            <decl_stmt pos:start="43:13" pos:end="43:31"><decl pos:start="43:13" pos:end="43:30"><type pos:start="43:13" pos:end="43:19"><name pos:start="43:13" pos:end="43:19">int64_t</name></type> <name pos:start="43:21" pos:end="43:30">nb_samples</name></decl>;</decl_stmt>

            <if_stmt pos:start="45:13" pos:end="55:13"><if pos:start="45:13" pos:end="55:13">if <condition pos:start="45:16" pos:end="45:57">(<expr pos:start="45:17" pos:end="45:56"><operator pos:start="45:17" pos:end="45:17">!</operator><call pos:start="45:18" pos:end="45:56"><name pos:start="45:18" pos:end="45:39">av_get_bits_per_sample</name><argument_list pos:start="45:40" pos:end="45:56">(<argument pos:start="45:41" pos:end="45:55"><expr pos:start="45:41" pos:end="45:55"><name pos:start="45:41" pos:end="45:55"><name pos:start="45:41" pos:end="45:45">avctx</name><operator pos:start="45:46" pos:end="45:47">-&gt;</operator><name pos:start="45:48" pos:end="45:55">codec_id</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="45:59" pos:end="55:13">{<block_content pos:start="47:17" pos:end="53:39">

                <expr_stmt pos:start="47:17" pos:end="49:68"><expr pos:start="47:17" pos:end="49:67"><call pos:start="47:17" pos:end="49:67"><name pos:start="47:17" pos:end="47:22">av_log</name><argument_list pos:start="47:23" pos:end="49:67">(<argument pos:start="47:24" pos:end="47:28"><expr pos:start="47:24" pos:end="47:28"><name pos:start="47:24" pos:end="47:28">avctx</name></expr></argument>, <argument pos:start="47:31" pos:end="47:42"><expr pos:start="47:31" pos:end="47:42"><name pos:start="47:31" pos:end="47:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="47:45" pos:end="49:66"><expr pos:start="47:45" pos:end="49:66"><literal type="string" pos:start="47:45" pos:end="47:78">"avcodec_encode_audio() does not "</literal>

                                            <literal type="string" pos:start="49:45" pos:end="49:66">"support this codec\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="51:17" pos:end="51:38"><expr pos:start="51:17" pos:end="51:37"><call pos:start="51:17" pos:end="51:37"><name pos:start="51:17" pos:end="51:29">av_frame_free</name><argument_list pos:start="51:30" pos:end="51:37">(<argument pos:start="51:31" pos:end="51:36"><expr pos:start="51:31" pos:end="51:36"><operator pos:start="51:31" pos:end="51:31">&amp;</operator><name pos:start="51:32" pos:end="51:36">frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="53:17" pos:end="53:39">return <expr pos:start="53:24" pos:end="53:38"><call pos:start="53:24" pos:end="53:38"><name pos:start="53:24" pos:end="53:30">AVERROR</name><argument_list pos:start="53:31" pos:end="53:38">(<argument pos:start="53:32" pos:end="53:37"><expr pos:start="53:32" pos:end="53:37"><name pos:start="53:32" pos:end="53:37">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="57:13" pos:end="61:43"><expr pos:start="57:13" pos:end="61:42"><name pos:start="57:13" pos:end="57:22">nb_samples</name> <operator pos:start="57:24" pos:end="57:24">=</operator> <operator pos:start="57:26" pos:end="57:26">(</operator><name pos:start="57:27" pos:end="57:33">int64_t</name><operator pos:start="57:34" pos:end="57:34">)</operator><name pos:start="57:35" pos:end="57:42">buf_size</name> <operator pos:start="57:44" pos:end="57:44">*</operator> <literal type="number" pos:start="57:46" pos:end="57:46">8</literal> <operator pos:start="57:48" pos:end="57:48">/</operator>

                         <operator pos:start="59:26" pos:end="59:26">(</operator><call pos:start="59:27" pos:end="59:65"><name pos:start="59:27" pos:end="59:48">av_get_bits_per_sample</name><argument_list pos:start="59:49" pos:end="59:65">(<argument pos:start="59:50" pos:end="59:64"><expr pos:start="59:50" pos:end="59:64"><name pos:start="59:50" pos:end="59:64"><name pos:start="59:50" pos:end="59:54">avctx</name><operator pos:start="59:55" pos:end="59:56">-&gt;</operator><name pos:start="59:57" pos:end="59:64">codec_id</name></name></expr></argument>)</argument_list></call> <operator pos:start="59:67" pos:end="59:67">*</operator>

                          <name pos:start="61:27" pos:end="61:41"><name pos:start="61:27" pos:end="61:31">avctx</name><operator pos:start="61:32" pos:end="61:33">-&gt;</operator><name pos:start="61:34" pos:end="61:41">channels</name></name><operator pos:start="61:42" pos:end="61:42">)</operator></expr>;</expr_stmt>

            <if_stmt pos:start="63:13" pos:end="69:13"><if pos:start="63:13" pos:end="69:13">if <condition pos:start="63:16" pos:end="63:38">(<expr pos:start="63:17" pos:end="63:37"><name pos:start="63:17" pos:end="63:26">nb_samples</name> <operator pos:start="63:28" pos:end="63:29">&gt;=</operator> <name pos:start="63:31" pos:end="63:37">INT_MAX</name></expr>)</condition> <block pos:start="63:40" pos:end="69:13">{<block_content pos:start="65:17" pos:end="67:39">

                <expr_stmt pos:start="65:17" pos:end="65:38"><expr pos:start="65:17" pos:end="65:37"><call pos:start="65:17" pos:end="65:37"><name pos:start="65:17" pos:end="65:29">av_frame_free</name><argument_list pos:start="65:30" pos:end="65:37">(<argument pos:start="65:31" pos:end="65:36"><expr pos:start="65:31" pos:end="65:36"><operator pos:start="65:31" pos:end="65:31">&amp;</operator><name pos:start="65:32" pos:end="65:36">frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="67:17" pos:end="67:39">return <expr pos:start="67:24" pos:end="67:38"><call pos:start="67:24" pos:end="67:38"><name pos:start="67:24" pos:end="67:30">AVERROR</name><argument_list pos:start="67:31" pos:end="67:38">(<argument pos:start="67:32" pos:end="67:37"><expr pos:start="67:32" pos:end="67:37"><name pos:start="67:32" pos:end="67:37">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:43"><expr pos:start="71:13" pos:end="71:42"><name pos:start="71:13" pos:end="71:29"><name pos:start="71:13" pos:end="71:17">frame</name><operator pos:start="71:18" pos:end="71:19">-&gt;</operator><name pos:start="71:20" pos:end="71:29">nb_samples</name></name> <operator pos:start="71:31" pos:end="71:31">=</operator> <name pos:start="71:33" pos:end="71:42">nb_samples</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <comment type="block" pos:start="77:9" pos:end="79:33">/* it is assumed that the samples buffer is large enough based on the

         * relevant parameters */</comment>

        <expr_stmt pos:start="81:9" pos:end="85:72"><expr pos:start="81:9" pos:end="85:71"><name pos:start="81:9" pos:end="81:20">samples_size</name> <operator pos:start="81:22" pos:end="81:22">=</operator> <call pos:start="81:24" pos:end="85:71"><name pos:start="81:24" pos:end="81:49">av_samples_get_buffer_size</name><argument_list pos:start="81:50" pos:end="85:71">(<argument pos:start="81:51" pos:end="81:54"><expr pos:start="81:51" pos:end="81:54"><name pos:start="81:51" pos:end="81:54">NULL</name></expr></argument>, <argument pos:start="81:57" pos:end="81:71"><expr pos:start="81:57" pos:end="81:71"><name pos:start="81:57" pos:end="81:71"><name pos:start="81:57" pos:end="81:61">avctx</name><operator pos:start="81:62" pos:end="81:63">-&gt;</operator><name pos:start="81:64" pos:end="81:71">channels</name></name></expr></argument>,

                                                  <argument pos:start="83:51" pos:end="83:67"><expr pos:start="83:51" pos:end="83:67"><name pos:start="83:51" pos:end="83:67"><name pos:start="83:51" pos:end="83:55">frame</name><operator pos:start="83:56" pos:end="83:57">-&gt;</operator><name pos:start="83:58" pos:end="83:67">nb_samples</name></name></expr></argument>,

                                                  <argument pos:start="85:51" pos:end="85:67"><expr pos:start="85:51" pos:end="85:67"><name pos:start="85:51" pos:end="85:67"><name pos:start="85:51" pos:end="85:55">avctx</name><operator pos:start="85:56" pos:end="85:57">-&gt;</operator><name pos:start="85:58" pos:end="85:67">sample_fmt</name></name></expr></argument>, <argument pos:start="85:70" pos:end="85:70"><expr pos:start="85:70" pos:end="85:70"><literal type="number" pos:start="85:70" pos:end="85:70">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="87:9" pos:end="99:9"><if pos:start="87:9" pos:end="99:9">if <condition pos:start="87:12" pos:end="93:66">(<expr pos:start="87:13" pos:end="93:65"><operator pos:start="87:13" pos:end="87:13">(</operator><name pos:start="87:14" pos:end="87:16">ret</name> <operator pos:start="87:18" pos:end="87:18">=</operator> <call pos:start="87:20" pos:end="93:60"><name pos:start="87:20" pos:end="87:43">avcodec_fill_audio_frame</name><argument_list pos:start="87:44" pos:end="93:60">(<argument pos:start="87:45" pos:end="87:49"><expr pos:start="87:45" pos:end="87:49"><name pos:start="87:45" pos:end="87:49">frame</name></expr></argument>, <argument pos:start="87:52" pos:end="87:66"><expr pos:start="87:52" pos:end="87:66"><name pos:start="87:52" pos:end="87:66"><name pos:start="87:52" pos:end="87:56">avctx</name><operator pos:start="87:57" pos:end="87:58">-&gt;</operator><name pos:start="87:59" pos:end="87:66">channels</name></name></expr></argument>,

                                            <argument pos:start="89:45" pos:end="89:61"><expr pos:start="89:45" pos:end="89:61"><name pos:start="89:45" pos:end="89:61"><name pos:start="89:45" pos:end="89:49">avctx</name><operator pos:start="89:50" pos:end="89:51">-&gt;</operator><name pos:start="89:52" pos:end="89:61">sample_fmt</name></name></expr></argument>,

                                            <argument pos:start="91:45" pos:end="91:68"><expr pos:start="91:45" pos:end="91:68"><operator pos:start="91:45" pos:end="91:45">(</operator><specifier pos:start="91:46" pos:end="91:50">const</specifier> <name pos:start="91:52" pos:end="91:58">uint8_t</name> <operator pos:start="91:60" pos:end="91:60">*</operator><operator pos:start="91:61" pos:end="91:61">)</operator><name pos:start="91:62" pos:end="91:68">samples</name></expr></argument>,

                                            <argument pos:start="93:45" pos:end="93:56"><expr pos:start="93:45" pos:end="93:56"><name pos:start="93:45" pos:end="93:56">samples_size</name></expr></argument>, <argument pos:start="93:59" pos:end="93:59"><expr pos:start="93:59" pos:end="93:59"><literal type="number" pos:start="93:59" pos:end="93:59">1</literal></expr></argument>)</argument_list></call><operator pos:start="93:61" pos:end="93:61">)</operator> <operator pos:start="93:63" pos:end="93:63">&lt;</operator> <literal type="number" pos:start="93:65" pos:end="93:65">0</literal></expr>)</condition> <block pos:start="93:68" pos:end="99:9">{<block_content pos:start="95:13" pos:end="97:23">

            <expr_stmt pos:start="95:13" pos:end="95:34"><expr pos:start="95:13" pos:end="95:33"><call pos:start="95:13" pos:end="95:33"><name pos:start="95:13" pos:end="95:25">av_frame_free</name><argument_list pos:start="95:26" pos:end="95:33">(<argument pos:start="95:27" pos:end="95:32"><expr pos:start="95:27" pos:end="95:32"><operator pos:start="95:27" pos:end="95:27">&amp;</operator><name pos:start="95:28" pos:end="95:32">frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="97:13" pos:end="97:23">return <expr pos:start="97:20" pos:end="97:22"><name pos:start="97:20" pos:end="97:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="103:9" pos:end="107:47">/* fabricate frame pts from sample count.

         * this is needed because the avcodec_encode_audio() API does not have

         * a way for the user to provide pts */</comment>

        <if_stmt pos:start="109:9" pos:end="117:40"><if pos:start="109:9" pos:end="113:80">if <condition pos:start="109:12" pos:end="109:55">(<expr pos:start="109:13" pos:end="109:54"><name pos:start="109:13" pos:end="109:30"><name pos:start="109:13" pos:end="109:17">avctx</name><operator pos:start="109:18" pos:end="109:19">-&gt;</operator><name pos:start="109:20" pos:end="109:30">sample_rate</name></name> <operator pos:start="109:32" pos:end="109:33">&amp;&amp;</operator> <name pos:start="109:35" pos:end="109:54"><name pos:start="109:35" pos:end="109:39">avctx</name><operator pos:start="109:40" pos:end="109:41">-&gt;</operator><name pos:start="109:42" pos:end="109:50">time_base</name><operator pos:start="109:51" pos:end="109:51">.</operator><name pos:start="109:52" pos:end="109:54">num</name></name></expr>)</condition><block type="pseudo" pos:start="111:13" pos:end="113:80"><block_content pos:start="111:13" pos:end="113:80">

            <expr_stmt pos:start="111:13" pos:end="113:80"><expr pos:start="111:13" pos:end="113:79"><name pos:start="111:13" pos:end="111:22"><name pos:start="111:13" pos:end="111:17">frame</name><operator pos:start="111:18" pos:end="111:19">-&gt;</operator><name pos:start="111:20" pos:end="111:22">pts</name></name> <operator pos:start="111:24" pos:end="111:24">=</operator> <call pos:start="111:26" pos:end="113:79"><name pos:start="111:26" pos:end="111:48">ff_samples_to_time_base</name><argument_list pos:start="111:49" pos:end="113:79">(<argument pos:start="111:50" pos:end="111:54"><expr pos:start="111:50" pos:end="111:54"><name pos:start="111:50" pos:end="111:54">avctx</name></expr></argument>,

                                                 <argument pos:start="113:50" pos:end="113:78"><expr pos:start="113:50" pos:end="113:78"><name pos:start="113:50" pos:end="113:78"><name pos:start="113:50" pos:end="113:54">avctx</name><operator pos:start="113:55" pos:end="113:56">-&gt;</operator><name pos:start="113:57" pos:end="113:64">internal</name><operator pos:start="113:65" pos:end="113:66">-&gt;</operator><name pos:start="113:67" pos:end="113:78">sample_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="115:9" pos:end="117:40">else<block type="pseudo" pos:start="117:13" pos:end="117:40"><block_content pos:start="117:13" pos:end="117:40">

            <expr_stmt pos:start="117:13" pos:end="117:40"><expr pos:start="117:13" pos:end="117:39"><name pos:start="117:13" pos:end="117:22"><name pos:start="117:13" pos:end="117:17">frame</name><operator pos:start="117:18" pos:end="117:19">-&gt;</operator><name pos:start="117:20" pos:end="117:22">pts</name></name> <operator pos:start="117:24" pos:end="117:24">=</operator> <name pos:start="117:26" pos:end="117:39">AV_NOPTS_VALUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:59"><expr pos:start="119:9" pos:end="119:58"><name pos:start="119:9" pos:end="119:37"><name pos:start="119:9" pos:end="119:13">avctx</name><operator pos:start="119:14" pos:end="119:15">-&gt;</operator><name pos:start="119:16" pos:end="119:23">internal</name><operator pos:start="119:24" pos:end="119:25">-&gt;</operator><name pos:start="119:26" pos:end="119:37">sample_count</name></name> <operator pos:start="119:39" pos:end="119:40">+=</operator> <name pos:start="119:42" pos:end="119:58"><name pos:start="119:42" pos:end="119:46">frame</name><operator pos:start="119:47" pos:end="119:48">-&gt;</operator><name pos:start="119:49" pos:end="119:58">nb_samples</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="121:7" pos:end="125:5">else <block pos:start="121:12" pos:end="125:5">{<block_content pos:start="123:9" pos:end="123:21">

        <expr_stmt pos:start="123:9" pos:end="123:21"><expr pos:start="123:9" pos:end="123:20"><name pos:start="123:9" pos:end="123:13">frame</name> <operator pos:start="123:15" pos:end="123:15">=</operator> <name pos:start="123:17" pos:end="123:20">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="129:5" pos:end="129:19"><expr pos:start="129:5" pos:end="129:18"><name pos:start="129:5" pos:end="129:14">got_packet</name> <operator pos:start="129:16" pos:end="129:16">=</operator> <literal type="number" pos:start="129:18" pos:end="129:18">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:65"><expr pos:start="131:5" pos:end="131:64"><name pos:start="131:5" pos:end="131:7">ret</name> <operator pos:start="131:9" pos:end="131:9">=</operator> <call pos:start="131:11" pos:end="131:64"><name pos:start="131:11" pos:end="131:31">avcodec_encode_audio2</name><argument_list pos:start="131:32" pos:end="131:64">(<argument pos:start="131:33" pos:end="131:37"><expr pos:start="131:33" pos:end="131:37"><name pos:start="131:33" pos:end="131:37">avctx</name></expr></argument>, <argument pos:start="131:40" pos:end="131:43"><expr pos:start="131:40" pos:end="131:43"><operator pos:start="131:40" pos:end="131:40">&amp;</operator><name pos:start="131:41" pos:end="131:43">pkt</name></expr></argument>, <argument pos:start="131:46" pos:end="131:50"><expr pos:start="131:46" pos:end="131:50"><name pos:start="131:46" pos:end="131:50">frame</name></expr></argument>, <argument pos:start="131:53" pos:end="131:63"><expr pos:start="131:53" pos:end="131:63"><operator pos:start="131:53" pos:end="131:53">&amp;</operator><name pos:start="131:54" pos:end="131:63">got_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="133:5" pos:end="139:5"><if pos:start="133:5" pos:end="139:5">if <condition pos:start="133:8" pos:end="133:49">(<expr pos:start="133:9" pos:end="133:48"><operator pos:start="133:9" pos:end="133:9">!</operator><name pos:start="133:10" pos:end="133:12">ret</name> <operator pos:start="133:14" pos:end="133:15">&amp;&amp;</operator> <name pos:start="133:17" pos:end="133:26">got_packet</name> <operator pos:start="133:28" pos:end="133:29">&amp;&amp;</operator> <name pos:start="133:31" pos:end="133:48"><name pos:start="133:31" pos:end="133:35">avctx</name><operator pos:start="133:36" pos:end="133:37">-&gt;</operator><name pos:start="133:38" pos:end="133:48">coded_frame</name></name></expr>)</condition> <block pos:start="133:51" pos:end="139:5">{<block_content pos:start="135:9" pos:end="137:72">

        <expr_stmt pos:start="135:9" pos:end="135:48"><expr pos:start="135:9" pos:end="135:47"><name pos:start="135:9" pos:end="135:31"><name pos:start="135:9" pos:end="135:13">avctx</name><operator pos:start="135:14" pos:end="135:15">-&gt;</operator><name pos:start="135:16" pos:end="135:26">coded_frame</name><operator pos:start="135:27" pos:end="135:28">-&gt;</operator><name pos:start="135:29" pos:end="135:31">pts</name></name>       <operator pos:start="135:39" pos:end="135:39">=</operator> <name pos:start="135:41" pos:end="135:47"><name pos:start="135:41" pos:end="135:43">pkt</name><operator pos:start="135:44" pos:end="135:44">.</operator><name pos:start="135:45" pos:end="135:47">pts</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:72"><expr pos:start="137:9" pos:end="137:71"><name pos:start="137:9" pos:end="137:37"><name pos:start="137:9" pos:end="137:13">avctx</name><operator pos:start="137:14" pos:end="137:15">-&gt;</operator><name pos:start="137:16" pos:end="137:26">coded_frame</name><operator pos:start="137:27" pos:end="137:28">-&gt;</operator><name pos:start="137:29" pos:end="137:37">key_frame</name></name> <operator pos:start="137:39" pos:end="137:39">=</operator> <operator pos:start="137:41" pos:end="137:41">!</operator><operator pos:start="137:42" pos:end="137:42">!</operator><operator pos:start="137:43" pos:end="137:43">(</operator><name pos:start="137:44" pos:end="137:52"><name pos:start="137:44" pos:end="137:46">pkt</name><operator pos:start="137:47" pos:end="137:47">.</operator><name pos:start="137:48" pos:end="137:52">flags</name></name> <operator pos:start="137:54" pos:end="137:54">&amp;</operator> <name pos:start="137:56" pos:end="137:70">AV_PKT_FLAG_KEY</name><operator pos:start="137:71" pos:end="137:71">)</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="141:5" pos:end="141:54">/* free any side data since we cannot return it */</comment>

    <expr_stmt pos:start="143:5" pos:end="143:35"><expr pos:start="143:5" pos:end="143:34"><call pos:start="143:5" pos:end="143:34"><name pos:start="143:5" pos:end="143:28">av_packet_free_side_data</name><argument_list pos:start="143:29" pos:end="143:34">(<argument pos:start="143:30" pos:end="143:33"><expr pos:start="143:30" pos:end="143:33"><operator pos:start="143:30" pos:end="143:30">&amp;</operator><name pos:start="143:31" pos:end="143:33">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="147:5" pos:end="149:40"><if pos:start="147:5" pos:end="149:40">if <condition pos:start="147:8" pos:end="147:53">(<expr pos:start="147:9" pos:end="147:52"><name pos:start="147:9" pos:end="147:13">frame</name> <operator pos:start="147:15" pos:end="147:16">&amp;&amp;</operator> <name pos:start="147:18" pos:end="147:37"><name pos:start="147:18" pos:end="147:22">frame</name><operator pos:start="147:23" pos:end="147:24">-&gt;</operator><name pos:start="147:25" pos:end="147:37">extended_data</name></name> <operator pos:start="147:39" pos:end="147:40">!=</operator> <name pos:start="147:42" pos:end="147:52"><name pos:start="147:42" pos:end="147:46">frame</name><operator pos:start="147:47" pos:end="147:48">-&gt;</operator><name pos:start="147:49" pos:end="147:52">data</name></name></expr>)</condition><block type="pseudo" pos:start="149:9" pos:end="149:40"><block_content pos:start="149:9" pos:end="149:40">

        <expr_stmt pos:start="149:9" pos:end="149:40"><expr pos:start="149:9" pos:end="149:39"><call pos:start="149:9" pos:end="149:39"><name pos:start="149:9" pos:end="149:16">av_freep</name><argument_list pos:start="149:17" pos:end="149:39">(<argument pos:start="149:18" pos:end="149:38"><expr pos:start="149:18" pos:end="149:38"><operator pos:start="149:18" pos:end="149:18">&amp;</operator><name pos:start="149:19" pos:end="149:38"><name pos:start="149:19" pos:end="149:23">frame</name><operator pos:start="149:24" pos:end="149:25">-&gt;</operator><name pos:start="149:26" pos:end="149:38">extended_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="153:5" pos:end="153:26"><expr pos:start="153:5" pos:end="153:25"><call pos:start="153:5" pos:end="153:25"><name pos:start="153:5" pos:end="153:17">av_frame_free</name><argument_list pos:start="153:18" pos:end="153:25">(<argument pos:start="153:19" pos:end="153:24"><expr pos:start="153:19" pos:end="153:24"><operator pos:start="153:19" pos:end="153:19">&amp;</operator><name pos:start="153:20" pos:end="153:24">frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="155:5" pos:end="155:32">return <expr pos:start="155:12" pos:end="155:31"><ternary pos:start="155:12" pos:end="155:31"><condition pos:start="155:12" pos:end="155:16"><expr pos:start="155:12" pos:end="155:14"><name pos:start="155:12" pos:end="155:14">ret</name></expr> ?</condition><then pos:start="155:18" pos:end="155:20"> <expr pos:start="155:18" pos:end="155:20"><name pos:start="155:18" pos:end="155:20">ret</name></expr> </then><else pos:start="155:22" pos:end="155:31">: <expr pos:start="155:24" pos:end="155:31"><name pos:start="155:24" pos:end="155:31"><name pos:start="155:24" pos:end="155:26">pkt</name><operator pos:start="155:27" pos:end="155:27">.</operator><name pos:start="155:28" pos:end="155:31">size</name></name></expr></else></ternary></expr>;</return>

</block_content>}</block></function></unit>
