<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/7238.c" pos:tabs="8"><function pos:start="1:1" pos:end="242:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:19">gen_cp0</name> <parameter_list pos:start="1:21" pos:end="1:88">(<parameter pos:start="1:22" pos:end="1:38"><decl pos:start="1:22" pos:end="1:38"><type pos:start="1:22" pos:end="1:38"><name pos:start="1:22" pos:end="1:33">CPUMIPSState</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:38">env</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:57"><decl pos:start="1:41" pos:end="1:57"><type pos:start="1:41" pos:end="1:57"><name pos:start="1:41" pos:end="1:52">DisasContext</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:57">ctx</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:71"><decl pos:start="1:60" pos:end="1:71"><type pos:start="1:60" pos:end="1:71"><name pos:start="1:60" pos:end="1:67">uint32_t</name></type> <name pos:start="1:69" pos:end="1:71">opc</name></decl></parameter>, <parameter pos:start="1:74" pos:end="1:79"><decl pos:start="1:74" pos:end="1:79"><type pos:start="1:74" pos:end="1:79"><name pos:start="1:74" pos:end="1:76">int</name></type> <name pos:start="1:78" pos:end="1:79">rt</name></decl></parameter>, <parameter pos:start="1:82" pos:end="1:87"><decl pos:start="1:82" pos:end="1:87"><type pos:start="1:82" pos:end="1:87"><name pos:start="1:82" pos:end="1:84">int</name></type> <name pos:start="1:86" pos:end="1:87">rd</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="242:1">{<block_content pos:start="5:5" pos:end="240:50">

    <decl_stmt pos:start="5:5" pos:end="5:29"><decl pos:start="5:5" pos:end="5:28"><type pos:start="5:5" pos:end="5:16"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:14">char</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:19">opn</name> <init pos:start="5:21" pos:end="5:28">= <expr pos:start="5:23" pos:end="5:28"><literal type="string" pos:start="5:23" pos:end="5:28">"ldst"</literal></expr></init></decl>;</decl_stmt>




    <switch pos:start="10:5" pos:end="236:5">switch <condition pos:start="10:12" pos:end="10:16">(<expr pos:start="10:13" pos:end="10:15"><name pos:start="10:13" pos:end="10:15">opc</name></expr>)</condition> <block pos:start="10:18" pos:end="236:5">{<block_content pos:start="12:5" pos:end="234:15">

    <case pos:start="12:5" pos:end="12:18">case <expr pos:start="12:10" pos:end="12:17"><name pos:start="12:10" pos:end="12:17">OPC_MFC0</name></expr>:</case>

        <if_stmt pos:start="14:9" pos:end="20:9"><if pos:start="14:9" pos:end="20:9">if <condition pos:start="14:12" pos:end="14:20">(<expr pos:start="14:13" pos:end="14:19"><name pos:start="14:13" pos:end="14:14">rt</name> <operator pos:start="14:16" pos:end="14:17">==</operator> <literal type="number" pos:start="14:19" pos:end="14:19">0</literal></expr>)</condition> <block pos:start="14:22" pos:end="20:9">{<block_content pos:start="18:13" pos:end="18:19">

            <comment type="block" pos:start="16:13" pos:end="16:31">/* Treat as NOP. */</comment>

            <return pos:start="18:13" pos:end="18:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="22:9" pos:end="22:63"><expr pos:start="22:9" pos:end="22:62"><call pos:start="22:9" pos:end="22:62"><name pos:start="22:9" pos:end="22:16">gen_mfc0</name><argument_list pos:start="22:17" pos:end="22:62">(<argument pos:start="22:18" pos:end="22:20"><expr pos:start="22:18" pos:end="22:20"><name pos:start="22:18" pos:end="22:20">env</name></expr></argument>, <argument pos:start="22:23" pos:end="22:25"><expr pos:start="22:23" pos:end="22:25"><name pos:start="22:23" pos:end="22:25">ctx</name></expr></argument>, <argument pos:start="22:28" pos:end="22:38"><expr pos:start="22:28" pos:end="22:38"><name pos:start="22:28" pos:end="22:38"><name pos:start="22:28" pos:end="22:34">cpu_gpr</name><index pos:start="22:35" pos:end="22:38">[<expr pos:start="22:36" pos:end="22:37"><name pos:start="22:36" pos:end="22:37">rt</name></expr>]</index></name></expr></argument>, <argument pos:start="22:41" pos:end="22:42"><expr pos:start="22:41" pos:end="22:42"><name pos:start="22:41" pos:end="22:42">rd</name></expr></argument>, <argument pos:start="22:45" pos:end="22:61"><expr pos:start="22:45" pos:end="22:61"><name pos:start="22:45" pos:end="22:55"><name pos:start="22:45" pos:end="22:47">ctx</name><operator pos:start="22:48" pos:end="22:49">-&gt;</operator><name pos:start="22:50" pos:end="22:55">opcode</name></name> <operator pos:start="22:57" pos:end="22:57">&amp;</operator> <literal type="number" pos:start="22:59" pos:end="22:61">0x7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="24:9" pos:end="24:21"><expr pos:start="24:9" pos:end="24:20"><name pos:start="24:9" pos:end="24:11">opn</name> <operator pos:start="24:13" pos:end="24:13">=</operator> <literal type="string" pos:start="24:15" pos:end="24:20">"mfc0"</literal></expr>;</expr_stmt>

        <break pos:start="26:9" pos:end="26:14">break;</break>

    <case pos:start="28:5" pos:end="28:18">case <expr pos:start="28:10" pos:end="28:17"><name pos:start="28:10" pos:end="28:17">OPC_MTC0</name></expr>:</case>

        <block pos:start="30:9" pos:end="42:9">{<block_content pos:start="32:13" pos:end="40:30">

            <decl_stmt pos:start="32:13" pos:end="32:37"><decl pos:start="32:13" pos:end="32:36"><type pos:start="32:13" pos:end="32:16"><name pos:start="32:13" pos:end="32:16">TCGv</name></type> <name pos:start="32:18" pos:end="32:19">t0</name> <init pos:start="32:21" pos:end="32:36">= <expr pos:start="32:23" pos:end="32:36"><call pos:start="32:23" pos:end="32:36"><name pos:start="32:23" pos:end="32:34">tcg_temp_new</name><argument_list pos:start="32:35" pos:end="32:36">()</argument_list></call></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="36:13" pos:end="36:33"><expr pos:start="36:13" pos:end="36:32"><call pos:start="36:13" pos:end="36:32"><name pos:start="36:13" pos:end="36:24">gen_load_gpr</name><argument_list pos:start="36:25" pos:end="36:32">(<argument pos:start="36:26" pos:end="36:27"><expr pos:start="36:26" pos:end="36:27"><name pos:start="36:26" pos:end="36:27">t0</name></expr></argument>, <argument pos:start="36:30" pos:end="36:31"><expr pos:start="36:30" pos:end="36:31"><name pos:start="36:30" pos:end="36:31">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="38:13" pos:end="38:58"><expr pos:start="38:13" pos:end="38:57"><call pos:start="38:13" pos:end="38:57"><name pos:start="38:13" pos:end="38:20">gen_mtc0</name><argument_list pos:start="38:21" pos:end="38:57">(<argument pos:start="38:22" pos:end="38:24"><expr pos:start="38:22" pos:end="38:24"><name pos:start="38:22" pos:end="38:24">env</name></expr></argument>, <argument pos:start="38:27" pos:end="38:29"><expr pos:start="38:27" pos:end="38:29"><name pos:start="38:27" pos:end="38:29">ctx</name></expr></argument>, <argument pos:start="38:32" pos:end="38:33"><expr pos:start="38:32" pos:end="38:33"><name pos:start="38:32" pos:end="38:33">t0</name></expr></argument>, <argument pos:start="38:36" pos:end="38:37"><expr pos:start="38:36" pos:end="38:37"><name pos:start="38:36" pos:end="38:37">rd</name></expr></argument>, <argument pos:start="38:40" pos:end="38:56"><expr pos:start="38:40" pos:end="38:56"><name pos:start="38:40" pos:end="38:50"><name pos:start="38:40" pos:end="38:42">ctx</name><operator pos:start="38:43" pos:end="38:44">-&gt;</operator><name pos:start="38:45" pos:end="38:50">opcode</name></name> <operator pos:start="38:52" pos:end="38:52">&amp;</operator> <literal type="number" pos:start="38:54" pos:end="38:56">0x7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="40:13" pos:end="40:30"><expr pos:start="40:13" pos:end="40:29"><call pos:start="40:13" pos:end="40:29"><name pos:start="40:13" pos:end="40:25">tcg_temp_free</name><argument_list pos:start="40:26" pos:end="40:29">(<argument pos:start="40:27" pos:end="40:28"><expr pos:start="40:27" pos:end="40:28"><name pos:start="40:27" pos:end="40:28">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <expr_stmt pos:start="44:9" pos:end="44:21"><expr pos:start="44:9" pos:end="44:20"><name pos:start="44:9" pos:end="44:11">opn</name> <operator pos:start="44:13" pos:end="44:13">=</operator> <literal type="string" pos:start="44:15" pos:end="44:20">"mtc0"</literal></expr>;</expr_stmt>

        <break pos:start="46:9" pos:end="49:0">break;</break>

<cpp:if pos:start="48:1" pos:end="48:26">#<cpp:directive pos:start="48:2" pos:end="48:3">if</cpp:directive> <expr pos:start="48:5" pos:end="48:26"><call pos:start="48:5" pos:end="48:26"><name pos:start="48:5" pos:end="48:11">defined</name><argument_list pos:start="48:12" pos:end="48:26">(<argument pos:start="48:13" pos:end="48:25"><expr pos:start="48:13" pos:end="48:25"><name pos:start="48:13" pos:end="48:25">TARGET_MIPS64</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="50:5" pos:end="50:19">case <expr pos:start="50:10" pos:end="50:18"><name pos:start="50:10" pos:end="50:18">OPC_DMFC0</name></expr>:</case>

        <expr_stmt pos:start="52:9" pos:end="52:40"><expr pos:start="52:9" pos:end="52:39"><call pos:start="52:9" pos:end="52:39"><name pos:start="52:9" pos:end="52:18">check_insn</name><argument_list pos:start="52:19" pos:end="52:39">(<argument pos:start="52:20" pos:end="52:22"><expr pos:start="52:20" pos:end="52:22"><name pos:start="52:20" pos:end="52:22">env</name></expr></argument>, <argument pos:start="52:25" pos:end="52:27"><expr pos:start="52:25" pos:end="52:27"><name pos:start="52:25" pos:end="52:27">ctx</name></expr></argument>, <argument pos:start="52:30" pos:end="52:38"><expr pos:start="52:30" pos:end="52:38"><name pos:start="52:30" pos:end="52:38">ISA_MIPS3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="54:9" pos:end="60:9"><if pos:start="54:9" pos:end="60:9">if <condition pos:start="54:12" pos:end="54:20">(<expr pos:start="54:13" pos:end="54:19"><name pos:start="54:13" pos:end="54:14">rt</name> <operator pos:start="54:16" pos:end="54:17">==</operator> <literal type="number" pos:start="54:19" pos:end="54:19">0</literal></expr>)</condition> <block pos:start="54:22" pos:end="60:9">{<block_content pos:start="58:13" pos:end="58:19">

            <comment type="block" pos:start="56:13" pos:end="56:31">/* Treat as NOP. */</comment>

            <return pos:start="58:13" pos:end="58:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="62:9" pos:end="62:64"><expr pos:start="62:9" pos:end="62:63"><call pos:start="62:9" pos:end="62:63"><name pos:start="62:9" pos:end="62:17">gen_dmfc0</name><argument_list pos:start="62:18" pos:end="62:63">(<argument pos:start="62:19" pos:end="62:21"><expr pos:start="62:19" pos:end="62:21"><name pos:start="62:19" pos:end="62:21">env</name></expr></argument>, <argument pos:start="62:24" pos:end="62:26"><expr pos:start="62:24" pos:end="62:26"><name pos:start="62:24" pos:end="62:26">ctx</name></expr></argument>, <argument pos:start="62:29" pos:end="62:39"><expr pos:start="62:29" pos:end="62:39"><name pos:start="62:29" pos:end="62:39"><name pos:start="62:29" pos:end="62:35">cpu_gpr</name><index pos:start="62:36" pos:end="62:39">[<expr pos:start="62:37" pos:end="62:38"><name pos:start="62:37" pos:end="62:38">rt</name></expr>]</index></name></expr></argument>, <argument pos:start="62:42" pos:end="62:43"><expr pos:start="62:42" pos:end="62:43"><name pos:start="62:42" pos:end="62:43">rd</name></expr></argument>, <argument pos:start="62:46" pos:end="62:62"><expr pos:start="62:46" pos:end="62:62"><name pos:start="62:46" pos:end="62:56"><name pos:start="62:46" pos:end="62:48">ctx</name><operator pos:start="62:49" pos:end="62:50">-&gt;</operator><name pos:start="62:51" pos:end="62:56">opcode</name></name> <operator pos:start="62:58" pos:end="62:58">&amp;</operator> <literal type="number" pos:start="62:60" pos:end="62:62">0x7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="64:9" pos:end="64:22"><expr pos:start="64:9" pos:end="64:21"><name pos:start="64:9" pos:end="64:11">opn</name> <operator pos:start="64:13" pos:end="64:13">=</operator> <literal type="string" pos:start="64:15" pos:end="64:21">"dmfc0"</literal></expr>;</expr_stmt>

        <break pos:start="66:9" pos:end="66:14">break;</break>

    <case pos:start="68:5" pos:end="68:19">case <expr pos:start="68:10" pos:end="68:18"><name pos:start="68:10" pos:end="68:18">OPC_DMTC0</name></expr>:</case>

        <expr_stmt pos:start="70:9" pos:end="70:40"><expr pos:start="70:9" pos:end="70:39"><call pos:start="70:9" pos:end="70:39"><name pos:start="70:9" pos:end="70:18">check_insn</name><argument_list pos:start="70:19" pos:end="70:39">(<argument pos:start="70:20" pos:end="70:22"><expr pos:start="70:20" pos:end="70:22"><name pos:start="70:20" pos:end="70:22">env</name></expr></argument>, <argument pos:start="70:25" pos:end="70:27"><expr pos:start="70:25" pos:end="70:27"><name pos:start="70:25" pos:end="70:27">ctx</name></expr></argument>, <argument pos:start="70:30" pos:end="70:38"><expr pos:start="70:30" pos:end="70:38"><name pos:start="70:30" pos:end="70:38">ISA_MIPS3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <block pos:start="72:9" pos:end="84:9">{<block_content pos:start="74:13" pos:end="82:30">

            <decl_stmt pos:start="74:13" pos:end="74:37"><decl pos:start="74:13" pos:end="74:36"><type pos:start="74:13" pos:end="74:16"><name pos:start="74:13" pos:end="74:16">TCGv</name></type> <name pos:start="74:18" pos:end="74:19">t0</name> <init pos:start="74:21" pos:end="74:36">= <expr pos:start="74:23" pos:end="74:36"><call pos:start="74:23" pos:end="74:36"><name pos:start="74:23" pos:end="74:34">tcg_temp_new</name><argument_list pos:start="74:35" pos:end="74:36">()</argument_list></call></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="78:13" pos:end="78:33"><expr pos:start="78:13" pos:end="78:32"><call pos:start="78:13" pos:end="78:32"><name pos:start="78:13" pos:end="78:24">gen_load_gpr</name><argument_list pos:start="78:25" pos:end="78:32">(<argument pos:start="78:26" pos:end="78:27"><expr pos:start="78:26" pos:end="78:27"><name pos:start="78:26" pos:end="78:27">t0</name></expr></argument>, <argument pos:start="78:30" pos:end="78:31"><expr pos:start="78:30" pos:end="78:31"><name pos:start="78:30" pos:end="78:31">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="80:13" pos:end="80:59"><expr pos:start="80:13" pos:end="80:58"><call pos:start="80:13" pos:end="80:58"><name pos:start="80:13" pos:end="80:21">gen_dmtc0</name><argument_list pos:start="80:22" pos:end="80:58">(<argument pos:start="80:23" pos:end="80:25"><expr pos:start="80:23" pos:end="80:25"><name pos:start="80:23" pos:end="80:25">env</name></expr></argument>, <argument pos:start="80:28" pos:end="80:30"><expr pos:start="80:28" pos:end="80:30"><name pos:start="80:28" pos:end="80:30">ctx</name></expr></argument>, <argument pos:start="80:33" pos:end="80:34"><expr pos:start="80:33" pos:end="80:34"><name pos:start="80:33" pos:end="80:34">t0</name></expr></argument>, <argument pos:start="80:37" pos:end="80:38"><expr pos:start="80:37" pos:end="80:38"><name pos:start="80:37" pos:end="80:38">rd</name></expr></argument>, <argument pos:start="80:41" pos:end="80:57"><expr pos:start="80:41" pos:end="80:57"><name pos:start="80:41" pos:end="80:51"><name pos:start="80:41" pos:end="80:43">ctx</name><operator pos:start="80:44" pos:end="80:45">-&gt;</operator><name pos:start="80:46" pos:end="80:51">opcode</name></name> <operator pos:start="80:53" pos:end="80:53">&amp;</operator> <literal type="number" pos:start="80:55" pos:end="80:57">0x7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="82:13" pos:end="82:30"><expr pos:start="82:13" pos:end="82:29"><call pos:start="82:13" pos:end="82:29"><name pos:start="82:13" pos:end="82:25">tcg_temp_free</name><argument_list pos:start="82:26" pos:end="82:29">(<argument pos:start="82:27" pos:end="82:28"><expr pos:start="82:27" pos:end="82:28"><name pos:start="82:27" pos:end="82:28">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <expr_stmt pos:start="86:9" pos:end="86:22"><expr pos:start="86:9" pos:end="86:21"><name pos:start="86:9" pos:end="86:11">opn</name> <operator pos:start="86:13" pos:end="86:13">=</operator> <literal type="string" pos:start="86:15" pos:end="86:21">"dmtc0"</literal></expr>;</expr_stmt>

        <break pos:start="88:9" pos:end="91:0">break;</break>

<cpp:endif pos:start="90:1" pos:end="90:6">#<cpp:directive pos:start="90:2" pos:end="90:6">endif</cpp:directive></cpp:endif>

    <case pos:start="92:5" pos:end="92:18">case <expr pos:start="92:10" pos:end="92:17"><name pos:start="92:10" pos:end="92:17">OPC_MFTR</name></expr>:</case>

        <expr_stmt pos:start="94:9" pos:end="94:37"><expr pos:start="94:9" pos:end="94:36"><call pos:start="94:9" pos:end="94:36"><name pos:start="94:9" pos:end="94:18">check_insn</name><argument_list pos:start="94:19" pos:end="94:36">(<argument pos:start="94:20" pos:end="94:22"><expr pos:start="94:20" pos:end="94:22"><name pos:start="94:20" pos:end="94:22">env</name></expr></argument>, <argument pos:start="94:25" pos:end="94:27"><expr pos:start="94:25" pos:end="94:27"><name pos:start="94:25" pos:end="94:27">ctx</name></expr></argument>, <argument pos:start="94:30" pos:end="94:35"><expr pos:start="94:30" pos:end="94:35"><name pos:start="94:30" pos:end="94:35">ASE_MT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="96:9" pos:end="102:9"><if pos:start="96:9" pos:end="102:9">if <condition pos:start="96:12" pos:end="96:20">(<expr pos:start="96:13" pos:end="96:19"><name pos:start="96:13" pos:end="96:14">rd</name> <operator pos:start="96:16" pos:end="96:17">==</operator> <literal type="number" pos:start="96:19" pos:end="96:19">0</literal></expr>)</condition> <block pos:start="96:22" pos:end="102:9">{<block_content pos:start="100:13" pos:end="100:19">

            <comment type="block" pos:start="98:13" pos:end="98:31">/* Treat as NOP. */</comment>

            <return pos:start="100:13" pos:end="100:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="104:9" pos:end="106:60"><expr pos:start="104:9" pos:end="106:59"><call pos:start="104:9" pos:end="106:59"><name pos:start="104:9" pos:end="104:16">gen_mftr</name><argument_list pos:start="104:17" pos:end="106:59">(<argument pos:start="104:18" pos:end="104:20"><expr pos:start="104:18" pos:end="104:20"><name pos:start="104:18" pos:end="104:20">env</name></expr></argument>, <argument pos:start="104:23" pos:end="104:25"><expr pos:start="104:23" pos:end="104:25"><name pos:start="104:23" pos:end="104:25">ctx</name></expr></argument>, <argument pos:start="104:28" pos:end="104:29"><expr pos:start="104:28" pos:end="104:29"><name pos:start="104:28" pos:end="104:29">rt</name></expr></argument>, <argument pos:start="104:32" pos:end="104:33"><expr pos:start="104:32" pos:end="104:33"><name pos:start="104:32" pos:end="104:33">rd</name></expr></argument>, <argument pos:start="104:36" pos:end="104:57"><expr pos:start="104:36" pos:end="104:57"><operator pos:start="104:36" pos:end="104:36">(</operator><name pos:start="104:37" pos:end="104:47"><name pos:start="104:37" pos:end="104:39">ctx</name><operator pos:start="104:40" pos:end="104:41">-&gt;</operator><name pos:start="104:42" pos:end="104:47">opcode</name></name> <operator pos:start="104:49" pos:end="104:50">&gt;&gt;</operator> <literal type="number" pos:start="104:52" pos:end="104:52">5</literal><operator pos:start="104:53" pos:end="104:53">)</operator> <operator pos:start="104:55" pos:end="104:55">&amp;</operator> <literal type="number" pos:start="104:57" pos:end="104:57">1</literal></expr></argument>,

                 <argument pos:start="106:18" pos:end="106:34"><expr pos:start="106:18" pos:end="106:34"><name pos:start="106:18" pos:end="106:28"><name pos:start="106:18" pos:end="106:20">ctx</name><operator pos:start="106:21" pos:end="106:22">-&gt;</operator><name pos:start="106:23" pos:end="106:28">opcode</name></name> <operator pos:start="106:30" pos:end="106:30">&amp;</operator> <literal type="number" pos:start="106:32" pos:end="106:34">0x7</literal></expr></argument>, <argument pos:start="106:37" pos:end="106:58"><expr pos:start="106:37" pos:end="106:58"><operator pos:start="106:37" pos:end="106:37">(</operator><name pos:start="106:38" pos:end="106:48"><name pos:start="106:38" pos:end="106:40">ctx</name><operator pos:start="106:41" pos:end="106:42">-&gt;</operator><name pos:start="106:43" pos:end="106:48">opcode</name></name> <operator pos:start="106:50" pos:end="106:51">&gt;&gt;</operator> <literal type="number" pos:start="106:53" pos:end="106:53">4</literal><operator pos:start="106:54" pos:end="106:54">)</operator> <operator pos:start="106:56" pos:end="106:56">&amp;</operator> <literal type="number" pos:start="106:58" pos:end="106:58">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="108:9" pos:end="108:21"><expr pos:start="108:9" pos:end="108:20"><name pos:start="108:9" pos:end="108:11">opn</name> <operator pos:start="108:13" pos:end="108:13">=</operator> <literal type="string" pos:start="108:15" pos:end="108:20">"mftr"</literal></expr>;</expr_stmt>

        <break pos:start="110:9" pos:end="110:14">break;</break>

    <case pos:start="112:5" pos:end="112:18">case <expr pos:start="112:10" pos:end="112:17"><name pos:start="112:10" pos:end="112:17">OPC_MTTR</name></expr>:</case>

        <expr_stmt pos:start="114:9" pos:end="114:37"><expr pos:start="114:9" pos:end="114:36"><call pos:start="114:9" pos:end="114:36"><name pos:start="114:9" pos:end="114:18">check_insn</name><argument_list pos:start="114:19" pos:end="114:36">(<argument pos:start="114:20" pos:end="114:22"><expr pos:start="114:20" pos:end="114:22"><name pos:start="114:20" pos:end="114:22">env</name></expr></argument>, <argument pos:start="114:25" pos:end="114:27"><expr pos:start="114:25" pos:end="114:27"><name pos:start="114:25" pos:end="114:27">ctx</name></expr></argument>, <argument pos:start="114:30" pos:end="114:35"><expr pos:start="114:30" pos:end="114:35"><name pos:start="114:30" pos:end="114:35">ASE_MT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="116:9" pos:end="118:60"><expr pos:start="116:9" pos:end="118:59"><call pos:start="116:9" pos:end="118:59"><name pos:start="116:9" pos:end="116:16">gen_mttr</name><argument_list pos:start="116:17" pos:end="118:59">(<argument pos:start="116:18" pos:end="116:20"><expr pos:start="116:18" pos:end="116:20"><name pos:start="116:18" pos:end="116:20">env</name></expr></argument>, <argument pos:start="116:23" pos:end="116:25"><expr pos:start="116:23" pos:end="116:25"><name pos:start="116:23" pos:end="116:25">ctx</name></expr></argument>, <argument pos:start="116:28" pos:end="116:29"><expr pos:start="116:28" pos:end="116:29"><name pos:start="116:28" pos:end="116:29">rd</name></expr></argument>, <argument pos:start="116:32" pos:end="116:33"><expr pos:start="116:32" pos:end="116:33"><name pos:start="116:32" pos:end="116:33">rt</name></expr></argument>, <argument pos:start="116:36" pos:end="116:57"><expr pos:start="116:36" pos:end="116:57"><operator pos:start="116:36" pos:end="116:36">(</operator><name pos:start="116:37" pos:end="116:47"><name pos:start="116:37" pos:end="116:39">ctx</name><operator pos:start="116:40" pos:end="116:41">-&gt;</operator><name pos:start="116:42" pos:end="116:47">opcode</name></name> <operator pos:start="116:49" pos:end="116:50">&gt;&gt;</operator> <literal type="number" pos:start="116:52" pos:end="116:52">5</literal><operator pos:start="116:53" pos:end="116:53">)</operator> <operator pos:start="116:55" pos:end="116:55">&amp;</operator> <literal type="number" pos:start="116:57" pos:end="116:57">1</literal></expr></argument>,

                 <argument pos:start="118:18" pos:end="118:34"><expr pos:start="118:18" pos:end="118:34"><name pos:start="118:18" pos:end="118:28"><name pos:start="118:18" pos:end="118:20">ctx</name><operator pos:start="118:21" pos:end="118:22">-&gt;</operator><name pos:start="118:23" pos:end="118:28">opcode</name></name> <operator pos:start="118:30" pos:end="118:30">&amp;</operator> <literal type="number" pos:start="118:32" pos:end="118:34">0x7</literal></expr></argument>, <argument pos:start="118:37" pos:end="118:58"><expr pos:start="118:37" pos:end="118:58"><operator pos:start="118:37" pos:end="118:37">(</operator><name pos:start="118:38" pos:end="118:48"><name pos:start="118:38" pos:end="118:40">ctx</name><operator pos:start="118:41" pos:end="118:42">-&gt;</operator><name pos:start="118:43" pos:end="118:48">opcode</name></name> <operator pos:start="118:50" pos:end="118:51">&gt;&gt;</operator> <literal type="number" pos:start="118:53" pos:end="118:53">4</literal><operator pos:start="118:54" pos:end="118:54">)</operator> <operator pos:start="118:56" pos:end="118:56">&amp;</operator> <literal type="number" pos:start="118:58" pos:end="118:58">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="120:9" pos:end="120:21"><expr pos:start="120:9" pos:end="120:20"><name pos:start="120:9" pos:end="120:11">opn</name> <operator pos:start="120:13" pos:end="120:13">=</operator> <literal type="string" pos:start="120:15" pos:end="120:20">"mttr"</literal></expr>;</expr_stmt>

        <break pos:start="122:9" pos:end="122:14">break;</break>

    <case pos:start="124:5" pos:end="124:19">case <expr pos:start="124:10" pos:end="124:18"><name pos:start="124:10" pos:end="124:18">OPC_TLBWI</name></expr>:</case>

        <expr_stmt pos:start="126:9" pos:end="126:22"><expr pos:start="126:9" pos:end="126:21"><name pos:start="126:9" pos:end="126:11">opn</name> <operator pos:start="126:13" pos:end="126:13">=</operator> <literal type="string" pos:start="126:15" pos:end="126:21">"tlbwi"</literal></expr>;</expr_stmt>

        <if_stmt pos:start="128:9" pos:end="130:21"><if pos:start="128:9" pos:end="130:21">if <condition pos:start="128:12" pos:end="128:36">(<expr pos:start="128:13" pos:end="128:35"><operator pos:start="128:13" pos:end="128:13">!</operator><name pos:start="128:14" pos:end="128:35"><name pos:start="128:14" pos:end="128:16">env</name><operator pos:start="128:17" pos:end="128:18">-&gt;</operator><name pos:start="128:19" pos:end="128:21">tlb</name><operator pos:start="128:22" pos:end="128:23">-&gt;</operator><name pos:start="128:24" pos:end="128:35">helper_tlbwi</name></name></expr>)</condition><block type="pseudo" pos:start="130:13" pos:end="130:21"><block_content pos:start="130:13" pos:end="130:21">

            <goto pos:start="130:13" pos:end="130:21">goto <name pos:start="130:18" pos:end="130:20">die</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="132:9" pos:end="132:27"><expr pos:start="132:9" pos:end="132:26"><call pos:start="132:9" pos:end="132:26"><name pos:start="132:9" pos:end="132:24">gen_helper_tlbwi</name><argument_list pos:start="132:25" pos:end="132:26">()</argument_list></call></expr>;</expr_stmt>

        <break pos:start="134:9" pos:end="134:14">break;</break>

    <case pos:start="136:5" pos:end="136:19">case <expr pos:start="136:10" pos:end="136:18"><name pos:start="136:10" pos:end="136:18">OPC_TLBWR</name></expr>:</case>

        <expr_stmt pos:start="138:9" pos:end="138:22"><expr pos:start="138:9" pos:end="138:21"><name pos:start="138:9" pos:end="138:11">opn</name> <operator pos:start="138:13" pos:end="138:13">=</operator> <literal type="string" pos:start="138:15" pos:end="138:21">"tlbwr"</literal></expr>;</expr_stmt>

        <if_stmt pos:start="140:9" pos:end="142:21"><if pos:start="140:9" pos:end="142:21">if <condition pos:start="140:12" pos:end="140:36">(<expr pos:start="140:13" pos:end="140:35"><operator pos:start="140:13" pos:end="140:13">!</operator><name pos:start="140:14" pos:end="140:35"><name pos:start="140:14" pos:end="140:16">env</name><operator pos:start="140:17" pos:end="140:18">-&gt;</operator><name pos:start="140:19" pos:end="140:21">tlb</name><operator pos:start="140:22" pos:end="140:23">-&gt;</operator><name pos:start="140:24" pos:end="140:35">helper_tlbwr</name></name></expr>)</condition><block type="pseudo" pos:start="142:13" pos:end="142:21"><block_content pos:start="142:13" pos:end="142:21">

            <goto pos:start="142:13" pos:end="142:21">goto <name pos:start="142:18" pos:end="142:20">die</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="144:9" pos:end="144:27"><expr pos:start="144:9" pos:end="144:26"><call pos:start="144:9" pos:end="144:26"><name pos:start="144:9" pos:end="144:24">gen_helper_tlbwr</name><argument_list pos:start="144:25" pos:end="144:26">()</argument_list></call></expr>;</expr_stmt>

        <break pos:start="146:9" pos:end="146:14">break;</break>

    <case pos:start="148:5" pos:end="148:18">case <expr pos:start="148:10" pos:end="148:17"><name pos:start="148:10" pos:end="148:17">OPC_TLBP</name></expr>:</case>

        <expr_stmt pos:start="150:9" pos:end="150:21"><expr pos:start="150:9" pos:end="150:20"><name pos:start="150:9" pos:end="150:11">opn</name> <operator pos:start="150:13" pos:end="150:13">=</operator> <literal type="string" pos:start="150:15" pos:end="150:20">"tlbp"</literal></expr>;</expr_stmt>

        <if_stmt pos:start="152:9" pos:end="154:21"><if pos:start="152:9" pos:end="154:21">if <condition pos:start="152:12" pos:end="152:35">(<expr pos:start="152:13" pos:end="152:34"><operator pos:start="152:13" pos:end="152:13">!</operator><name pos:start="152:14" pos:end="152:34"><name pos:start="152:14" pos:end="152:16">env</name><operator pos:start="152:17" pos:end="152:18">-&gt;</operator><name pos:start="152:19" pos:end="152:21">tlb</name><operator pos:start="152:22" pos:end="152:23">-&gt;</operator><name pos:start="152:24" pos:end="152:34">helper_tlbp</name></name></expr>)</condition><block type="pseudo" pos:start="154:13" pos:end="154:21"><block_content pos:start="154:13" pos:end="154:21">

            <goto pos:start="154:13" pos:end="154:21">goto <name pos:start="154:18" pos:end="154:20">die</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="156:9" pos:end="156:26"><expr pos:start="156:9" pos:end="156:25"><call pos:start="156:9" pos:end="156:25"><name pos:start="156:9" pos:end="156:23">gen_helper_tlbp</name><argument_list pos:start="156:24" pos:end="156:25">()</argument_list></call></expr>;</expr_stmt>

        <break pos:start="158:9" pos:end="158:14">break;</break>

    <case pos:start="160:5" pos:end="160:18">case <expr pos:start="160:10" pos:end="160:17"><name pos:start="160:10" pos:end="160:17">OPC_TLBR</name></expr>:</case>

        <expr_stmt pos:start="162:9" pos:end="162:21"><expr pos:start="162:9" pos:end="162:20"><name pos:start="162:9" pos:end="162:11">opn</name> <operator pos:start="162:13" pos:end="162:13">=</operator> <literal type="string" pos:start="162:15" pos:end="162:20">"tlbr"</literal></expr>;</expr_stmt>

        <if_stmt pos:start="164:9" pos:end="166:21"><if pos:start="164:9" pos:end="166:21">if <condition pos:start="164:12" pos:end="164:35">(<expr pos:start="164:13" pos:end="164:34"><operator pos:start="164:13" pos:end="164:13">!</operator><name pos:start="164:14" pos:end="164:34"><name pos:start="164:14" pos:end="164:16">env</name><operator pos:start="164:17" pos:end="164:18">-&gt;</operator><name pos:start="164:19" pos:end="164:21">tlb</name><operator pos:start="164:22" pos:end="164:23">-&gt;</operator><name pos:start="164:24" pos:end="164:34">helper_tlbr</name></name></expr>)</condition><block type="pseudo" pos:start="166:13" pos:end="166:21"><block_content pos:start="166:13" pos:end="166:21">

            <goto pos:start="166:13" pos:end="166:21">goto <name pos:start="166:18" pos:end="166:20">die</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="168:9" pos:end="168:26"><expr pos:start="168:9" pos:end="168:25"><call pos:start="168:9" pos:end="168:25"><name pos:start="168:9" pos:end="168:23">gen_helper_tlbr</name><argument_list pos:start="168:24" pos:end="168:25">()</argument_list></call></expr>;</expr_stmt>

        <break pos:start="170:9" pos:end="170:14">break;</break>

    <case pos:start="172:5" pos:end="172:18">case <expr pos:start="172:10" pos:end="172:17"><name pos:start="172:10" pos:end="172:17">OPC_ERET</name></expr>:</case>

        <expr_stmt pos:start="174:9" pos:end="174:21"><expr pos:start="174:9" pos:end="174:20"><name pos:start="174:9" pos:end="174:11">opn</name> <operator pos:start="174:13" pos:end="174:13">=</operator> <literal type="string" pos:start="174:15" pos:end="174:20">"eret"</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="176:9" pos:end="176:40"><expr pos:start="176:9" pos:end="176:39"><call pos:start="176:9" pos:end="176:39"><name pos:start="176:9" pos:end="176:18">check_insn</name><argument_list pos:start="176:19" pos:end="176:39">(<argument pos:start="176:20" pos:end="176:22"><expr pos:start="176:20" pos:end="176:22"><name pos:start="176:20" pos:end="176:22">env</name></expr></argument>, <argument pos:start="176:25" pos:end="176:27"><expr pos:start="176:25" pos:end="176:27"><name pos:start="176:25" pos:end="176:27">ctx</name></expr></argument>, <argument pos:start="176:30" pos:end="176:38"><expr pos:start="176:30" pos:end="176:38"><name pos:start="176:30" pos:end="176:38">ISA_MIPS2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="178:9" pos:end="178:26"><expr pos:start="178:9" pos:end="178:25"><call pos:start="178:9" pos:end="178:25"><name pos:start="178:9" pos:end="178:23">gen_helper_eret</name><argument_list pos:start="178:24" pos:end="178:25">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="180:9" pos:end="180:30"><expr pos:start="180:9" pos:end="180:29"><name pos:start="180:9" pos:end="180:19"><name pos:start="180:9" pos:end="180:11">ctx</name><operator pos:start="180:12" pos:end="180:13">-&gt;</operator><name pos:start="180:14" pos:end="180:19">bstate</name></name> <operator pos:start="180:21" pos:end="180:21">=</operator> <name pos:start="180:23" pos:end="180:29">BS_EXCP</name></expr>;</expr_stmt>

        <break pos:start="182:9" pos:end="182:14">break;</break>

    <case pos:start="184:5" pos:end="184:19">case <expr pos:start="184:10" pos:end="184:18"><name pos:start="184:10" pos:end="184:18">OPC_DERET</name></expr>:</case>

        <expr_stmt pos:start="186:9" pos:end="186:22"><expr pos:start="186:9" pos:end="186:21"><name pos:start="186:9" pos:end="186:11">opn</name> <operator pos:start="186:13" pos:end="186:13">=</operator> <literal type="string" pos:start="186:15" pos:end="186:21">"deret"</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="188:9" pos:end="188:41"><expr pos:start="188:9" pos:end="188:40"><call pos:start="188:9" pos:end="188:40"><name pos:start="188:9" pos:end="188:18">check_insn</name><argument_list pos:start="188:19" pos:end="188:40">(<argument pos:start="188:20" pos:end="188:22"><expr pos:start="188:20" pos:end="188:22"><name pos:start="188:20" pos:end="188:22">env</name></expr></argument>, <argument pos:start="188:25" pos:end="188:27"><expr pos:start="188:25" pos:end="188:27"><name pos:start="188:25" pos:end="188:27">ctx</name></expr></argument>, <argument pos:start="188:30" pos:end="188:39"><expr pos:start="188:30" pos:end="188:39"><name pos:start="188:30" pos:end="188:39">ISA_MIPS32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="190:9" pos:end="202:9"><if pos:start="190:9" pos:end="196:9">if <condition pos:start="190:12" pos:end="190:43">(<expr pos:start="190:13" pos:end="190:42"><operator pos:start="190:13" pos:end="190:13">!</operator><operator pos:start="190:14" pos:end="190:14">(</operator><name pos:start="190:15" pos:end="190:25"><name pos:start="190:15" pos:end="190:17">ctx</name><operator pos:start="190:18" pos:end="190:19">-&gt;</operator><name pos:start="190:20" pos:end="190:25">hflags</name></name> <operator pos:start="190:27" pos:end="190:27">&amp;</operator> <name pos:start="190:29" pos:end="190:41">MIPS_HFLAG_DM</name><operator pos:start="190:42" pos:end="190:42">)</operator></expr>)</condition> <block pos:start="190:45" pos:end="196:9">{<block_content pos:start="192:13" pos:end="194:45">

            <expr_stmt pos:start="192:13" pos:end="192:28"><expr pos:start="192:13" pos:end="192:27"><call pos:start="192:13" pos:end="192:27"><name pos:start="192:13" pos:end="192:22">MIPS_INVAL</name><argument_list pos:start="192:23" pos:end="192:27">(<argument pos:start="192:24" pos:end="192:26"><expr pos:start="192:24" pos:end="192:26"><name pos:start="192:24" pos:end="192:26">opn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="194:13" pos:end="194:45"><expr pos:start="194:13" pos:end="194:44"><call pos:start="194:13" pos:end="194:44"><name pos:start="194:13" pos:end="194:30">generate_exception</name><argument_list pos:start="194:31" pos:end="194:44">(<argument pos:start="194:32" pos:end="194:34"><expr pos:start="194:32" pos:end="194:34"><name pos:start="194:32" pos:end="194:34">ctx</name></expr></argument>, <argument pos:start="194:37" pos:end="194:43"><expr pos:start="194:37" pos:end="194:43"><name pos:start="194:37" pos:end="194:43">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="196:11" pos:end="202:9">else <block pos:start="196:16" pos:end="202:9">{<block_content pos:start="198:13" pos:end="200:34">

            <expr_stmt pos:start="198:13" pos:end="198:31"><expr pos:start="198:13" pos:end="198:30"><call pos:start="198:13" pos:end="198:30"><name pos:start="198:13" pos:end="198:28">gen_helper_deret</name><argument_list pos:start="198:29" pos:end="198:30">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="200:13" pos:end="200:34"><expr pos:start="200:13" pos:end="200:33"><name pos:start="200:13" pos:end="200:23"><name pos:start="200:13" pos:end="200:15">ctx</name><operator pos:start="200:16" pos:end="200:17">-&gt;</operator><name pos:start="200:18" pos:end="200:23">bstate</name></name> <operator pos:start="200:25" pos:end="200:25">=</operator> <name pos:start="200:27" pos:end="200:33">BS_EXCP</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="204:9" pos:end="204:14">break;</break>

    <case pos:start="206:5" pos:end="206:18">case <expr pos:start="206:10" pos:end="206:17"><name pos:start="206:10" pos:end="206:17">OPC_WAIT</name></expr>:</case>

        <expr_stmt pos:start="208:9" pos:end="208:21"><expr pos:start="208:9" pos:end="208:20"><name pos:start="208:9" pos:end="208:11">opn</name> <operator pos:start="208:13" pos:end="208:13">=</operator> <literal type="string" pos:start="208:15" pos:end="208:20">"wait"</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="210:9" pos:end="210:53"><expr pos:start="210:9" pos:end="210:52"><call pos:start="210:9" pos:end="210:52"><name pos:start="210:9" pos:end="210:18">check_insn</name><argument_list pos:start="210:19" pos:end="210:52">(<argument pos:start="210:20" pos:end="210:22"><expr pos:start="210:20" pos:end="210:22"><name pos:start="210:20" pos:end="210:22">env</name></expr></argument>, <argument pos:start="210:25" pos:end="210:27"><expr pos:start="210:25" pos:end="210:27"><name pos:start="210:25" pos:end="210:27">ctx</name></expr></argument>, <argument pos:start="210:30" pos:end="210:51"><expr pos:start="210:30" pos:end="210:51"><name pos:start="210:30" pos:end="210:38">ISA_MIPS3</name> <operator pos:start="210:40" pos:end="210:40">|</operator> <name pos:start="210:42" pos:end="210:51">ISA_MIPS32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="212:9" pos:end="212:76">/* If we get an exception, we want to restart at next instruction */</comment>

        <expr_stmt pos:start="214:9" pos:end="214:21"><expr pos:start="214:9" pos:end="214:20"><name pos:start="214:9" pos:end="214:15"><name pos:start="214:9" pos:end="214:11">ctx</name><operator pos:start="214:12" pos:end="214:13">-&gt;</operator><name pos:start="214:14" pos:end="214:15">pc</name></name> <operator pos:start="214:17" pos:end="214:18">+=</operator> <literal type="number" pos:start="214:20" pos:end="214:20">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="216:9" pos:end="216:31"><expr pos:start="216:9" pos:end="216:30"><call pos:start="216:9" pos:end="216:30"><name pos:start="216:9" pos:end="216:22">save_cpu_state</name><argument_list pos:start="216:23" pos:end="216:30">(<argument pos:start="216:24" pos:end="216:26"><expr pos:start="216:24" pos:end="216:26"><name pos:start="216:24" pos:end="216:26">ctx</name></expr></argument>, <argument pos:start="216:29" pos:end="216:29"><expr pos:start="216:29" pos:end="216:29"><literal type="number" pos:start="216:29" pos:end="216:29">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="218:9" pos:end="218:21"><expr pos:start="218:9" pos:end="218:20"><name pos:start="218:9" pos:end="218:15"><name pos:start="218:9" pos:end="218:11">ctx</name><operator pos:start="218:12" pos:end="218:13">-&gt;</operator><name pos:start="218:14" pos:end="218:15">pc</name></name> <operator pos:start="218:17" pos:end="218:18">-=</operator> <literal type="number" pos:start="218:20" pos:end="218:20">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="220:9" pos:end="220:26"><expr pos:start="220:9" pos:end="220:25"><call pos:start="220:9" pos:end="220:25"><name pos:start="220:9" pos:end="220:23">gen_helper_wait</name><argument_list pos:start="220:24" pos:end="220:25">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="222:9" pos:end="222:30"><expr pos:start="222:9" pos:end="222:29"><name pos:start="222:9" pos:end="222:19"><name pos:start="222:9" pos:end="222:11">ctx</name><operator pos:start="222:12" pos:end="222:13">-&gt;</operator><name pos:start="222:14" pos:end="222:19">bstate</name></name> <operator pos:start="222:21" pos:end="222:21">=</operator> <name pos:start="222:23" pos:end="222:29">BS_EXCP</name></expr>;</expr_stmt>

        <break pos:start="224:9" pos:end="224:14">break;</break>

    <default pos:start="226:5" pos:end="226:12">default:</default>

 <label pos:start="228:2" pos:end="228:5"><name pos:start="228:2" pos:end="228:4">die</name>:</label>

        <expr_stmt pos:start="230:9" pos:end="230:24"><expr pos:start="230:9" pos:end="230:23"><call pos:start="230:9" pos:end="230:23"><name pos:start="230:9" pos:end="230:18">MIPS_INVAL</name><argument_list pos:start="230:19" pos:end="230:23">(<argument pos:start="230:20" pos:end="230:22"><expr pos:start="230:20" pos:end="230:22"><name pos:start="230:20" pos:end="230:22">opn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="232:9" pos:end="232:41"><expr pos:start="232:9" pos:end="232:40"><call pos:start="232:9" pos:end="232:40"><name pos:start="232:9" pos:end="232:26">generate_exception</name><argument_list pos:start="232:27" pos:end="232:40">(<argument pos:start="232:28" pos:end="232:30"><expr pos:start="232:28" pos:end="232:30"><name pos:start="232:28" pos:end="232:30">ctx</name></expr></argument>, <argument pos:start="232:33" pos:end="232:39"><expr pos:start="232:33" pos:end="232:39"><name pos:start="232:33" pos:end="232:39">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="234:9" pos:end="234:15">return;</return>

    </block_content>}</block></switch>

    <expr_stmt pos:start="238:5" pos:end="238:14"><expr pos:start="238:5" pos:end="238:13"><operator pos:start="238:5" pos:end="238:5">(</operator><name pos:start="238:6" pos:end="238:9">void</name><operator pos:start="238:10" pos:end="238:10">)</operator><name pos:start="238:11" pos:end="238:13">opn</name></expr>;</expr_stmt> <comment type="block" pos:start="238:16" pos:end="238:45">/* avoid a compiler warning */</comment>

    <expr_stmt pos:start="240:5" pos:end="240:50"><expr pos:start="240:5" pos:end="240:49"><call pos:start="240:5" pos:end="240:49"><name pos:start="240:5" pos:end="240:14">MIPS_DEBUG</name><argument_list pos:start="240:15" pos:end="240:49">(<argument pos:start="240:16" pos:end="240:25"><expr pos:start="240:16" pos:end="240:25"><literal type="string" pos:start="240:16" pos:end="240:25">"%s %s %d"</literal></expr></argument>, <argument pos:start="240:28" pos:end="240:30"><expr pos:start="240:28" pos:end="240:30"><name pos:start="240:28" pos:end="240:30">opn</name></expr></argument>, <argument pos:start="240:33" pos:end="240:44"><expr pos:start="240:33" pos:end="240:44"><name pos:start="240:33" pos:end="240:44"><name pos:start="240:33" pos:end="240:40">regnames</name><index pos:start="240:41" pos:end="240:44">[<expr pos:start="240:42" pos:end="240:43"><name pos:start="240:42" pos:end="240:43">rt</name></expr>]</index></name></expr></argument>, <argument pos:start="240:47" pos:end="240:48"><expr pos:start="240:47" pos:end="240:48"><name pos:start="240:47" pos:end="240:48">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function></unit>
