<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13344.c" pos:tabs="8"><function pos:start="1:1" pos:end="161:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">cdrom_pio_impl</name><parameter_list pos:start="1:27" pos:end="1:39">(<parameter pos:start="1:28" pos:end="1:38"><decl pos:start="1:28" pos:end="1:38"><type pos:start="1:28" pos:end="1:30"><name pos:start="1:28" pos:end="1:30">int</name></type> <name pos:start="1:32" pos:end="1:38">nblocks</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="161:1">{<block_content pos:start="5:5" pos:end="159:26">

    <decl_stmt pos:start="5:5" pos:end="5:20"><decl pos:start="5:5" pos:end="5:19"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">QPCIDevice</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:19">dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:32"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">void</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:20">bmdma_base</name></decl>, <decl pos:start="7:23" pos:end="7:31"><type ref="prev" pos:start="7:5" pos:end="7:10"><modifier pos:start="7:23" pos:end="7:23">*</modifier></type><name pos:start="7:24" pos:end="7:31">ide_base</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:13"><decl pos:start="9:5" pos:end="9:12"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">FILE</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:12">fh</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:39"><decl pos:start="11:5" pos:end="11:38"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:19">patt_blocks</name> <init pos:start="11:21" pos:end="11:38">= <expr pos:start="11:23" pos:end="11:38"><call pos:start="11:23" pos:end="11:38"><name pos:start="11:23" pos:end="11:25">MAX</name><argument_list pos:start="11:26" pos:end="11:38">(<argument pos:start="11:27" pos:end="11:28"><expr pos:start="11:27" pos:end="11:28"><literal type="number" pos:start="11:27" pos:end="11:28">16</literal></expr></argument>, <argument pos:start="11:31" pos:end="11:37"><expr pos:start="11:31" pos:end="11:37"><name pos:start="11:31" pos:end="11:37">nblocks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:53"><decl pos:start="13:5" pos:end="13:52"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:10">size_t</name></type> <name pos:start="13:12" pos:end="13:19">patt_len</name> <init pos:start="13:21" pos:end="13:52">= <expr pos:start="13:23" pos:end="13:52"><name pos:start="13:23" pos:end="13:38">ATAPI_BLOCK_SIZE</name> <operator pos:start="13:40" pos:end="13:40">*</operator> <name pos:start="13:42" pos:end="13:52">patt_blocks</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:39"><decl pos:start="15:5" pos:end="15:38"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">char</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:17">pattern</name> <init pos:start="15:19" pos:end="15:38">= <expr pos:start="15:21" pos:end="15:38"><call pos:start="15:21" pos:end="15:38"><name pos:start="15:21" pos:end="15:28">g_malloc</name><argument_list pos:start="15:29" pos:end="15:38">(<argument pos:start="15:30" pos:end="15:37"><expr pos:start="15:30" pos:end="15:37"><name pos:start="15:30" pos:end="15:37">patt_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:47"><decl pos:start="17:5" pos:end="17:46"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:10">size_t</name></type> <name pos:start="17:12" pos:end="17:17">rxsize</name> <init pos:start="17:19" pos:end="17:46">= <expr pos:start="17:21" pos:end="17:46"><name pos:start="17:21" pos:end="17:36">ATAPI_BLOCK_SIZE</name> <operator pos:start="17:38" pos:end="17:38">*</operator> <name pos:start="17:40" pos:end="17:46">nblocks</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:37"><decl pos:start="19:5" pos:end="19:36"><type pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:12">uint16_t</name> <modifier pos:start="19:14" pos:end="19:14">*</modifier></type><name pos:start="19:15" pos:end="19:16">rx</name> <init pos:start="19:18" pos:end="19:36">= <expr pos:start="19:20" pos:end="19:36"><call pos:start="19:20" pos:end="19:36"><name pos:start="19:20" pos:end="19:28">g_malloc0</name><argument_list pos:start="19:29" pos:end="19:36">(<argument pos:start="19:30" pos:end="19:35"><expr pos:start="19:30" pos:end="19:35"><name pos:start="19:30" pos:end="19:35">rxsize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:13"><decl pos:start="21:5" pos:end="21:9"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:9">i</name></decl>, <decl pos:start="21:12" pos:end="21:12"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:12" pos:end="21:12">j</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:17"><decl pos:start="23:5" pos:end="23:16"><type pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:11">uint8_t</name></type> <name pos:start="23:13" pos:end="23:16">data</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:19"><decl pos:start="25:5" pos:end="25:18"><type pos:start="25:5" pos:end="25:12"><name pos:start="25:5" pos:end="25:12">uint16_t</name></type> <name pos:start="25:14" pos:end="25:18">limit</name></decl>;</decl_stmt>



    <comment type="block" pos:start="29:5" pos:end="29:59">/* Prepopulate the CDROM with an interesting pattern */</comment>

    <expr_stmt pos:start="31:5" pos:end="31:58"><expr pos:start="31:5" pos:end="31:57"><call pos:start="31:5" pos:end="31:57"><name pos:start="31:5" pos:end="31:20">generate_pattern</name><argument_list pos:start="31:21" pos:end="31:57">(<argument pos:start="31:22" pos:end="31:28"><expr pos:start="31:22" pos:end="31:28"><name pos:start="31:22" pos:end="31:28">pattern</name></expr></argument>, <argument pos:start="31:31" pos:end="31:38"><expr pos:start="31:31" pos:end="31:38"><name pos:start="31:31" pos:end="31:38">patt_len</name></expr></argument>, <argument pos:start="31:41" pos:end="31:56"><expr pos:start="31:41" pos:end="31:56"><name pos:start="31:41" pos:end="31:56">ATAPI_BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:31"><expr pos:start="33:5" pos:end="33:30"><name pos:start="33:5" pos:end="33:6">fh</name> <operator pos:start="33:8" pos:end="33:8">=</operator> <call pos:start="33:10" pos:end="33:30"><name pos:start="33:10" pos:end="33:14">fopen</name><argument_list pos:start="33:15" pos:end="33:30">(<argument pos:start="33:16" pos:end="33:23"><expr pos:start="33:16" pos:end="33:23"><name pos:start="33:16" pos:end="33:23">tmp_path</name></expr></argument>, <argument pos:start="33:26" pos:end="33:29"><expr pos:start="33:26" pos:end="33:29"><literal type="string" pos:start="33:26" pos:end="33:29">"w+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:55"><expr pos:start="35:5" pos:end="35:54"><call pos:start="35:5" pos:end="35:54"><name pos:start="35:5" pos:end="35:10">fwrite</name><argument_list pos:start="35:11" pos:end="35:54">(<argument pos:start="35:12" pos:end="35:18"><expr pos:start="35:12" pos:end="35:18"><name pos:start="35:12" pos:end="35:18">pattern</name></expr></argument>, <argument pos:start="35:21" pos:end="35:36"><expr pos:start="35:21" pos:end="35:36"><name pos:start="35:21" pos:end="35:36">ATAPI_BLOCK_SIZE</name></expr></argument>, <argument pos:start="35:39" pos:end="35:49"><expr pos:start="35:39" pos:end="35:49"><name pos:start="35:39" pos:end="35:49">patt_blocks</name></expr></argument>, <argument pos:start="35:52" pos:end="35:53"><expr pos:start="35:52" pos:end="35:53"><name pos:start="35:52" pos:end="35:53">fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:15"><expr pos:start="37:5" pos:end="37:14"><call pos:start="37:5" pos:end="37:14"><name pos:start="37:5" pos:end="37:10">fclose</name><argument_list pos:start="37:11" pos:end="37:14">(<argument pos:start="37:12" pos:end="37:13"><expr pos:start="37:12" pos:end="37:13"><name pos:start="37:12" pos:end="37:13">fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="41:5" pos:end="43:67"><expr pos:start="41:5" pos:end="43:66"><call pos:start="41:5" pos:end="43:66"><name pos:start="41:5" pos:end="41:18">ide_test_start</name><argument_list pos:start="41:19" pos:end="43:66">(<argument pos:start="41:20" pos:end="43:55"><expr pos:start="41:20" pos:end="43:55"><literal type="string" pos:start="41:20" pos:end="41:82">"-drive if=none,file=%s,media=cdrom,format=raw,id=sr0,index=0 "</literal>

                   <literal type="string" pos:start="43:20" pos:end="43:55">"-device ide-cd,drive=sr0,bus=ide.0"</literal></expr></argument>, <argument pos:start="43:58" pos:end="43:65"><expr pos:start="43:58" pos:end="43:65"><name pos:start="43:58" pos:end="43:65">tmp_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:49"><expr pos:start="45:5" pos:end="45:48"><name pos:start="45:5" pos:end="45:7">dev</name> <operator pos:start="45:9" pos:end="45:9">=</operator> <call pos:start="45:11" pos:end="45:48"><name pos:start="45:11" pos:end="45:24">get_pci_device</name><argument_list pos:start="45:25" pos:end="45:48">(<argument pos:start="45:26" pos:end="45:36"><expr pos:start="45:26" pos:end="45:36"><operator pos:start="45:26" pos:end="45:26">&amp;</operator><name pos:start="45:27" pos:end="45:36">bmdma_base</name></expr></argument>, <argument pos:start="45:39" pos:end="45:47"><expr pos:start="45:39" pos:end="45:47"><operator pos:start="45:39" pos:end="45:39">&amp;</operator><name pos:start="45:40" pos:end="45:47">ide_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:51"><expr pos:start="47:5" pos:end="47:50"><call pos:start="47:5" pos:end="47:50"><name pos:start="47:5" pos:end="47:26">qtest_irq_intercept_in</name><argument_list pos:start="47:27" pos:end="47:50">(<argument pos:start="47:28" pos:end="47:39"><expr pos:start="47:28" pos:end="47:39"><name pos:start="47:28" pos:end="47:39">global_qtest</name></expr></argument>, <argument pos:start="47:42" pos:end="47:49"><expr pos:start="47:42" pos:end="47:49"><literal type="string" pos:start="47:42" pos:end="47:49">"ioapic"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="51:5" pos:end="51:36">/* PACKET command on device 0 */</comment>

    <expr_stmt pos:start="53:5" pos:end="53:50"><expr pos:start="53:5" pos:end="53:49"><call pos:start="53:5" pos:end="53:49"><name pos:start="53:5" pos:end="53:18">qpci_io_writeb</name><argument_list pos:start="53:19" pos:end="53:49">(<argument pos:start="53:20" pos:end="53:22"><expr pos:start="53:20" pos:end="53:22"><name pos:start="53:20" pos:end="53:22">dev</name></expr></argument>, <argument pos:start="53:25" pos:end="53:45"><expr pos:start="53:25" pos:end="53:45"><name pos:start="53:25" pos:end="53:32">ide_base</name> <operator pos:start="53:34" pos:end="53:34">+</operator> <name pos:start="53:36" pos:end="53:45">reg_device</name></expr></argument>, <argument pos:start="53:48" pos:end="53:48"><expr pos:start="53:48" pos:end="53:48"><literal type="number" pos:start="53:48" pos:end="53:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:76"><expr pos:start="55:5" pos:end="55:75"><call pos:start="55:5" pos:end="55:75"><name pos:start="55:5" pos:end="55:18">qpci_io_writeb</name><argument_list pos:start="55:19" pos:end="55:75">(<argument pos:start="55:20" pos:end="55:22"><expr pos:start="55:20" pos:end="55:22"><name pos:start="55:20" pos:end="55:22">dev</name></expr></argument>, <argument pos:start="55:25" pos:end="55:49"><expr pos:start="55:25" pos:end="55:49"><name pos:start="55:25" pos:end="55:32">ide_base</name> <operator pos:start="55:34" pos:end="55:34">+</operator> <name pos:start="55:36" pos:end="55:49">reg_lba_middle</name></expr></argument>, <argument pos:start="55:52" pos:end="55:74"><expr pos:start="55:52" pos:end="55:74"><name pos:start="55:52" pos:end="55:67">BYTE_COUNT_LIMIT</name> <operator pos:start="55:69" pos:end="55:69">&amp;</operator> <literal type="number" pos:start="55:71" pos:end="55:74">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="59:51"><expr pos:start="57:5" pos:end="59:50"><call pos:start="57:5" pos:end="59:50"><name pos:start="57:5" pos:end="57:18">qpci_io_writeb</name><argument_list pos:start="57:19" pos:end="59:50">(<argument pos:start="57:20" pos:end="57:22"><expr pos:start="57:20" pos:end="57:22"><name pos:start="57:20" pos:end="57:22">dev</name></expr></argument>, <argument pos:start="57:25" pos:end="57:47"><expr pos:start="57:25" pos:end="57:47"><name pos:start="57:25" pos:end="57:32">ide_base</name> <operator pos:start="57:34" pos:end="57:34">+</operator> <name pos:start="57:36" pos:end="57:47">reg_lba_high</name></expr></argument>,

                   <argument pos:start="59:20" pos:end="59:49"><expr pos:start="59:20" pos:end="59:49"><operator pos:start="59:20" pos:end="59:20">(</operator><name pos:start="59:21" pos:end="59:36">BYTE_COUNT_LIMIT</name> <operator pos:start="59:38" pos:end="59:39">&gt;&gt;</operator> <literal type="number" pos:start="59:41" pos:end="59:41">8</literal> <operator pos:start="59:43" pos:end="59:43">&amp;</operator> <literal type="number" pos:start="59:45" pos:end="59:48">0xFF</literal><operator pos:start="59:49" pos:end="59:49">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:60"><expr pos:start="61:5" pos:end="61:59"><call pos:start="61:5" pos:end="61:59"><name pos:start="61:5" pos:end="61:18">qpci_io_writeb</name><argument_list pos:start="61:19" pos:end="61:59">(<argument pos:start="61:20" pos:end="61:22"><expr pos:start="61:20" pos:end="61:22"><name pos:start="61:20" pos:end="61:22">dev</name></expr></argument>, <argument pos:start="61:25" pos:end="61:46"><expr pos:start="61:25" pos:end="61:46"><name pos:start="61:25" pos:end="61:32">ide_base</name> <operator pos:start="61:34" pos:end="61:34">+</operator> <name pos:start="61:36" pos:end="61:46">reg_command</name></expr></argument>, <argument pos:start="61:49" pos:end="61:58"><expr pos:start="61:49" pos:end="61:58"><name pos:start="61:49" pos:end="61:58">CMD_PACKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="63:5" pos:end="63:35">/* HP0: Check_Status_A State */</comment>

    <expr_stmt pos:start="65:5" pos:end="65:16"><expr pos:start="65:5" pos:end="65:15"><call pos:start="65:5" pos:end="65:15"><name pos:start="65:5" pos:end="65:10">nsleep</name><argument_list pos:start="65:11" pos:end="65:15">(<argument pos:start="65:12" pos:end="65:14"><expr pos:start="65:12" pos:end="65:14"><literal type="number" pos:start="65:12" pos:end="65:14">400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:31"><expr pos:start="67:5" pos:end="67:30"><name pos:start="67:5" pos:end="67:8">data</name> <operator pos:start="67:10" pos:end="67:10">=</operator> <call pos:start="67:12" pos:end="67:30"><name pos:start="67:12" pos:end="67:25">ide_wait_clear</name><argument_list pos:start="67:26" pos:end="67:30">(<argument pos:start="67:27" pos:end="67:29"><expr pos:start="67:27" pos:end="67:29"><name pos:start="67:27" pos:end="67:29">BSY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="69:5" pos:end="69:32">/* HP1: Send_Packet State */</comment>

    <expr_stmt pos:start="71:5" pos:end="71:37"><expr pos:start="71:5" pos:end="71:36"><call pos:start="71:5" pos:end="71:36"><name pos:start="71:5" pos:end="71:18">assert_bit_set</name><argument_list pos:start="71:19" pos:end="71:36">(<argument pos:start="71:20" pos:end="71:23"><expr pos:start="71:20" pos:end="71:23"><name pos:start="71:20" pos:end="71:23">data</name></expr></argument>, <argument pos:start="71:26" pos:end="71:35"><expr pos:start="71:26" pos:end="71:35"><name pos:start="71:26" pos:end="71:28">DRQ</name> <operator pos:start="71:30" pos:end="71:30">|</operator> <name pos:start="71:32" pos:end="71:35">DRDY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:43"><expr pos:start="73:5" pos:end="73:42"><call pos:start="73:5" pos:end="73:42"><name pos:start="73:5" pos:end="73:20">assert_bit_clear</name><argument_list pos:start="73:21" pos:end="73:42">(<argument pos:start="73:22" pos:end="73:25"><expr pos:start="73:22" pos:end="73:25"><name pos:start="73:22" pos:end="73:25">data</name></expr></argument>, <argument pos:start="73:28" pos:end="73:41"><expr pos:start="73:28" pos:end="73:41"><name pos:start="73:28" pos:end="73:30">ERR</name> <operator pos:start="73:32" pos:end="73:32">|</operator> <name pos:start="73:34" pos:end="73:35">DF</name> <operator pos:start="73:37" pos:end="73:37">|</operator> <name pos:start="73:39" pos:end="73:41">BSY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="77:5" pos:end="77:61">/* SCSI CDB (READ10) -- read n*2048 bytes from block 0 */</comment>

    <expr_stmt pos:start="79:5" pos:end="79:52"><expr pos:start="79:5" pos:end="79:51"><call pos:start="79:5" pos:end="79:51"><name pos:start="79:5" pos:end="79:24">send_scsi_cdb_read10</name><argument_list pos:start="79:25" pos:end="79:51">(<argument pos:start="79:26" pos:end="79:28"><expr pos:start="79:26" pos:end="79:28"><name pos:start="79:26" pos:end="79:28">dev</name></expr></argument>, <argument pos:start="79:31" pos:end="79:38"><expr pos:start="79:31" pos:end="79:38"><name pos:start="79:31" pos:end="79:38">ide_base</name></expr></argument>, <argument pos:start="79:41" pos:end="79:41"><expr pos:start="79:41" pos:end="79:41"><literal type="number" pos:start="79:41" pos:end="79:41">0</literal></expr></argument>, <argument pos:start="79:44" pos:end="79:50"><expr pos:start="79:44" pos:end="79:50"><name pos:start="79:44" pos:end="79:50">nblocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="83:5" pos:end="93:76">/* Read data back: occurs in bursts of 'BYTE_COUNT_LIMIT' bytes.

     * If BYTE_COUNT_LIMIT is odd, we transfer BYTE_COUNT_LIMIT - 1 bytes.

     * We allow an odd limit only when the remaining transfer size is

     * less than BYTE_COUNT_LIMIT. However, SCSI's read10 command can only

     * request n blocks, so our request size is always even.

     * For this reason, we assume there is never a hanging byte to fetch. */</comment>

    <expr_stmt pos:start="95:5" pos:end="95:28"><expr pos:start="95:5" pos:end="95:27"><call pos:start="95:5" pos:end="95:27"><name pos:start="95:5" pos:end="95:12">g_assert</name><argument_list pos:start="95:13" pos:end="95:27">(<argument pos:start="95:14" pos:end="95:26"><expr pos:start="95:14" pos:end="95:26"><operator pos:start="95:14" pos:end="95:14">!</operator><operator pos:start="95:15" pos:end="95:15">(</operator><name pos:start="95:16" pos:end="95:21">rxsize</name> <operator pos:start="95:23" pos:end="95:23">&amp;</operator> <literal type="number" pos:start="95:25" pos:end="95:25">1</literal><operator pos:start="95:26" pos:end="95:26">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:34"><expr pos:start="97:5" pos:end="97:33"><name pos:start="97:5" pos:end="97:9">limit</name> <operator pos:start="97:11" pos:end="97:11">=</operator> <name pos:start="97:13" pos:end="97:28">BYTE_COUNT_LIMIT</name> <operator pos:start="97:30" pos:end="97:30">&amp;</operator> <operator pos:start="97:32" pos:end="97:32">~</operator><literal type="number" pos:start="97:33" pos:end="97:33">1</literal></expr>;</expr_stmt>

    <for pos:start="99:5" pos:end="133:5">for <control pos:start="99:9" pos:end="99:53">(<init pos:start="99:10" pos:end="99:15"><expr pos:start="99:10" pos:end="99:14"><name pos:start="99:10" pos:end="99:10">i</name> <operator pos:start="99:12" pos:end="99:12">=</operator> <literal type="number" pos:start="99:14" pos:end="99:14">0</literal></expr>;</init> <condition pos:start="99:17" pos:end="99:48"><expr pos:start="99:17" pos:end="99:47"><name pos:start="99:17" pos:end="99:17">i</name> <operator pos:start="99:19" pos:end="99:19">&lt;</operator> <call pos:start="99:21" pos:end="99:47"><name pos:start="99:21" pos:end="99:32">DIV_ROUND_UP</name><argument_list pos:start="99:33" pos:end="99:47">(<argument pos:start="99:34" pos:end="99:39"><expr pos:start="99:34" pos:end="99:39"><name pos:start="99:34" pos:end="99:39">rxsize</name></expr></argument>, <argument pos:start="99:42" pos:end="99:46"><expr pos:start="99:42" pos:end="99:46"><name pos:start="99:42" pos:end="99:46">limit</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="99:50" pos:end="99:52"><expr pos:start="99:50" pos:end="99:52"><name pos:start="99:50" pos:end="99:50">i</name><operator pos:start="99:51" pos:end="99:52">++</operator></expr></incr>)</control> <block pos:start="99:55" pos:end="133:5">{<block_content pos:start="101:9" pos:end="131:9">

        <decl_stmt pos:start="101:9" pos:end="101:40"><decl pos:start="101:9" pos:end="101:39"><type pos:start="101:9" pos:end="101:14"><name pos:start="101:9" pos:end="101:14">size_t</name></type> <name pos:start="101:16" pos:end="101:21">offset</name> <init pos:start="101:23" pos:end="101:39">= <expr pos:start="101:25" pos:end="101:39"><name pos:start="101:25" pos:end="101:25">i</name> <operator pos:start="101:27" pos:end="101:27">*</operator> <operator pos:start="101:29" pos:end="101:29">(</operator><name pos:start="101:30" pos:end="101:34">limit</name> <operator pos:start="101:36" pos:end="101:36">/</operator> <literal type="number" pos:start="101:38" pos:end="101:38">2</literal><operator pos:start="101:39" pos:end="101:39">)</operator></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="103:9" pos:end="103:43"><decl pos:start="103:9" pos:end="103:42"><type pos:start="103:9" pos:end="103:14"><name pos:start="103:9" pos:end="103:14">size_t</name></type> <name pos:start="103:16" pos:end="103:18">rem</name> <init pos:start="103:20" pos:end="103:42">= <expr pos:start="103:22" pos:end="103:42"><operator pos:start="103:22" pos:end="103:22">(</operator><name pos:start="103:23" pos:end="103:28">rxsize</name> <operator pos:start="103:30" pos:end="103:30">/</operator> <literal type="number" pos:start="103:32" pos:end="103:32">2</literal><operator pos:start="103:33" pos:end="103:33">)</operator> <operator pos:start="103:35" pos:end="103:35">-</operator> <name pos:start="103:37" pos:end="103:42">offset</name></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="107:9" pos:end="107:29">/* HP3: INTRQ_Wait */</comment>

        <expr_stmt pos:start="109:9" pos:end="109:39"><expr pos:start="109:9" pos:end="109:38"><call pos:start="109:9" pos:end="109:38"><name pos:start="109:9" pos:end="109:21">ide_wait_intr</name><argument_list pos:start="109:22" pos:end="109:38">(<argument pos:start="109:23" pos:end="109:37"><expr pos:start="109:23" pos:end="109:37"><name pos:start="109:23" pos:end="109:37">IDE_PRIMARY_IRQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="113:9" pos:end="113:49">/* HP2: Check_Status_B (and clear IRQ) */</comment>

        <expr_stmt pos:start="115:9" pos:end="115:35"><expr pos:start="115:9" pos:end="115:34"><name pos:start="115:9" pos:end="115:12">data</name> <operator pos:start="115:14" pos:end="115:14">=</operator> <call pos:start="115:16" pos:end="115:34"><name pos:start="115:16" pos:end="115:29">ide_wait_clear</name><argument_list pos:start="115:30" pos:end="115:34">(<argument pos:start="115:31" pos:end="115:33"><expr pos:start="115:31" pos:end="115:33"><name pos:start="115:31" pos:end="115:33">BSY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:41"><expr pos:start="117:9" pos:end="117:40"><call pos:start="117:9" pos:end="117:40"><name pos:start="117:9" pos:end="117:22">assert_bit_set</name><argument_list pos:start="117:23" pos:end="117:40">(<argument pos:start="117:24" pos:end="117:27"><expr pos:start="117:24" pos:end="117:27"><name pos:start="117:24" pos:end="117:27">data</name></expr></argument>, <argument pos:start="117:30" pos:end="117:39"><expr pos:start="117:30" pos:end="117:39"><name pos:start="117:30" pos:end="117:32">DRQ</name> <operator pos:start="117:34" pos:end="117:34">|</operator> <name pos:start="117:36" pos:end="117:39">DRDY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:47"><expr pos:start="119:9" pos:end="119:46"><call pos:start="119:9" pos:end="119:46"><name pos:start="119:9" pos:end="119:24">assert_bit_clear</name><argument_list pos:start="119:25" pos:end="119:46">(<argument pos:start="119:26" pos:end="119:29"><expr pos:start="119:26" pos:end="119:29"><name pos:start="119:26" pos:end="119:29">data</name></expr></argument>, <argument pos:start="119:32" pos:end="119:45"><expr pos:start="119:32" pos:end="119:45"><name pos:start="119:32" pos:end="119:34">ERR</name> <operator pos:start="119:36" pos:end="119:36">|</operator> <name pos:start="119:38" pos:end="119:39">DF</name> <operator pos:start="119:41" pos:end="119:41">|</operator> <name pos:start="119:43" pos:end="119:45">BSY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="123:9" pos:end="123:32">/* HP4: Transfer_Data */</comment>

        <for pos:start="125:9" pos:end="131:9">for <control pos:start="125:13" pos:end="125:51">(<init pos:start="125:14" pos:end="125:19"><expr pos:start="125:14" pos:end="125:18"><name pos:start="125:14" pos:end="125:14">j</name> <operator pos:start="125:16" pos:end="125:16">=</operator> <literal type="number" pos:start="125:18" pos:end="125:18">0</literal></expr>;</init> <condition pos:start="125:21" pos:end="125:46"><expr pos:start="125:21" pos:end="125:45"><name pos:start="125:21" pos:end="125:21">j</name> <operator pos:start="125:23" pos:end="125:23">&lt;</operator> <call pos:start="125:25" pos:end="125:45"><name pos:start="125:25" pos:end="125:27">MIN</name><argument_list pos:start="125:28" pos:end="125:45">(<argument pos:start="125:29" pos:end="125:39"><expr pos:start="125:29" pos:end="125:39"><operator pos:start="125:29" pos:end="125:29">(</operator><name pos:start="125:30" pos:end="125:34">limit</name> <operator pos:start="125:36" pos:end="125:36">/</operator> <literal type="number" pos:start="125:38" pos:end="125:38">2</literal><operator pos:start="125:39" pos:end="125:39">)</operator></expr></argument>, <argument pos:start="125:42" pos:end="125:44"><expr pos:start="125:42" pos:end="125:44"><name pos:start="125:42" pos:end="125:44">rem</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="125:48" pos:end="125:50"><expr pos:start="125:48" pos:end="125:50"><name pos:start="125:48" pos:end="125:48">j</name><operator pos:start="125:49" pos:end="125:50">++</operator></expr></incr>)</control> <block pos:start="125:53" pos:end="131:9">{<block_content pos:start="127:13" pos:end="129:77">

            <expr_stmt pos:start="127:13" pos:end="129:77"><expr pos:start="127:13" pos:end="129:76"><name pos:start="127:13" pos:end="127:26"><name pos:start="127:13" pos:end="127:14">rx</name><index pos:start="127:15" pos:end="127:26">[<expr pos:start="127:16" pos:end="127:25"><name pos:start="127:16" pos:end="127:21">offset</name> <operator pos:start="127:23" pos:end="127:23">+</operator> <name pos:start="127:25" pos:end="127:25">j</name></expr>]</index></name> <operator pos:start="127:28" pos:end="127:28">=</operator> <call pos:start="127:30" pos:end="129:76"><name pos:start="127:30" pos:end="127:40">cpu_to_le16</name><argument_list pos:start="127:41" pos:end="129:76">(<argument pos:start="127:42" pos:end="129:75"><expr pos:start="127:42" pos:end="129:75"><call pos:start="127:42" pos:end="129:75"><name pos:start="127:42" pos:end="127:54">qpci_io_readw</name><argument_list pos:start="127:55" pos:end="129:75">(<argument pos:start="127:56" pos:end="127:58"><expr pos:start="127:56" pos:end="127:58"><name pos:start="127:56" pos:end="127:58">dev</name></expr></argument>,

                                                       <argument pos:start="129:56" pos:end="129:74"><expr pos:start="129:56" pos:end="129:74"><name pos:start="129:56" pos:end="129:63">ide_base</name> <operator pos:start="129:65" pos:end="129:65">+</operator> <name pos:start="129:67" pos:end="129:74">reg_data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>



    <comment type="block" pos:start="137:5" pos:end="137:40">/* Check for final completion IRQ */</comment>

    <expr_stmt pos:start="139:5" pos:end="139:35"><expr pos:start="139:5" pos:end="139:34"><call pos:start="139:5" pos:end="139:34"><name pos:start="139:5" pos:end="139:17">ide_wait_intr</name><argument_list pos:start="139:18" pos:end="139:34">(<argument pos:start="139:19" pos:end="139:33"><expr pos:start="139:19" pos:end="139:33"><name pos:start="139:19" pos:end="139:33">IDE_PRIMARY_IRQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="143:5" pos:end="143:34">/* Sanity check final state */</comment>

    <expr_stmt pos:start="145:5" pos:end="145:31"><expr pos:start="145:5" pos:end="145:30"><name pos:start="145:5" pos:end="145:8">data</name> <operator pos:start="145:10" pos:end="145:10">=</operator> <call pos:start="145:12" pos:end="145:30"><name pos:start="145:12" pos:end="145:25">ide_wait_clear</name><argument_list pos:start="145:26" pos:end="145:30">(<argument pos:start="145:27" pos:end="145:29"><expr pos:start="145:27" pos:end="145:29"><name pos:start="145:27" pos:end="145:29">DRQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="147:5" pos:end="147:31"><expr pos:start="147:5" pos:end="147:30"><call pos:start="147:5" pos:end="147:30"><name pos:start="147:5" pos:end="147:18">assert_bit_set</name><argument_list pos:start="147:19" pos:end="147:30">(<argument pos:start="147:20" pos:end="147:23"><expr pos:start="147:20" pos:end="147:23"><name pos:start="147:20" pos:end="147:23">data</name></expr></argument>, <argument pos:start="147:26" pos:end="147:29"><expr pos:start="147:26" pos:end="147:29"><name pos:start="147:26" pos:end="147:29">DRDY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="149:5" pos:end="149:49"><expr pos:start="149:5" pos:end="149:48"><call pos:start="149:5" pos:end="149:48"><name pos:start="149:5" pos:end="149:20">assert_bit_clear</name><argument_list pos:start="149:21" pos:end="149:48">(<argument pos:start="149:22" pos:end="149:25"><expr pos:start="149:22" pos:end="149:25"><name pos:start="149:22" pos:end="149:25">data</name></expr></argument>, <argument pos:start="149:28" pos:end="149:47"><expr pos:start="149:28" pos:end="149:47"><name pos:start="149:28" pos:end="149:30">DRQ</name> <operator pos:start="149:32" pos:end="149:32">|</operator> <name pos:start="149:34" pos:end="149:36">ERR</name> <operator pos:start="149:38" pos:end="149:38">|</operator> <name pos:start="149:40" pos:end="149:41">DF</name> <operator pos:start="149:43" pos:end="149:43">|</operator> <name pos:start="149:45" pos:end="149:47">BSY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="153:5" pos:end="153:56"><expr pos:start="153:5" pos:end="153:55"><call pos:start="153:5" pos:end="153:55"><name pos:start="153:5" pos:end="153:19">g_assert_cmpint</name><argument_list pos:start="153:20" pos:end="153:55">(<argument pos:start="153:21" pos:end="153:47"><expr pos:start="153:21" pos:end="153:47"><call pos:start="153:21" pos:end="153:47"><name pos:start="153:21" pos:end="153:26">memcmp</name><argument_list pos:start="153:27" pos:end="153:47">(<argument pos:start="153:28" pos:end="153:34"><expr pos:start="153:28" pos:end="153:34"><name pos:start="153:28" pos:end="153:34">pattern</name></expr></argument>, <argument pos:start="153:37" pos:end="153:38"><expr pos:start="153:37" pos:end="153:38"><name pos:start="153:37" pos:end="153:38">rx</name></expr></argument>, <argument pos:start="153:41" pos:end="153:46"><expr pos:start="153:41" pos:end="153:46"><name pos:start="153:41" pos:end="153:46">rxsize</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="153:50" pos:end="153:51"><expr pos:start="153:50" pos:end="153:51"><operator pos:start="153:50" pos:end="153:51">==</operator></expr></argument>, <argument pos:start="153:54" pos:end="153:54"><expr pos:start="153:54" pos:end="153:54"><literal type="number" pos:start="153:54" pos:end="153:54">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="155:5" pos:end="155:20"><expr pos:start="155:5" pos:end="155:19"><call pos:start="155:5" pos:end="155:19"><name pos:start="155:5" pos:end="155:10">g_free</name><argument_list pos:start="155:11" pos:end="155:19">(<argument pos:start="155:12" pos:end="155:18"><expr pos:start="155:12" pos:end="155:18"><name pos:start="155:12" pos:end="155:18">pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="157:5" pos:end="157:15"><expr pos:start="157:5" pos:end="157:14"><call pos:start="157:5" pos:end="157:14"><name pos:start="157:5" pos:end="157:10">g_free</name><argument_list pos:start="157:11" pos:end="157:14">(<argument pos:start="157:12" pos:end="157:13"><expr pos:start="157:12" pos:end="157:13"><name pos:start="157:12" pos:end="157:13">rx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="159:5" pos:end="159:26"><expr pos:start="159:5" pos:end="159:25"><call pos:start="159:5" pos:end="159:25"><name pos:start="159:5" pos:end="159:23">test_bmdma_teardown</name><argument_list pos:start="159:24" pos:end="159:25">()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
