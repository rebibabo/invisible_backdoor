<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6024.c" pos:tabs="8"><function pos:start="1:1" pos:end="101:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:32">libshine_encode_frame</name><parameter_list pos:start="1:33" pos:end="3:75">(<parameter pos:start="1:34" pos:end="1:54"><decl pos:start="1:34" pos:end="1:54"><type pos:start="1:34" pos:end="1:54"><name pos:start="1:34" pos:end="1:47">AVCodecContext</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:54">avctx</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:71"><decl pos:start="1:57" pos:end="1:71"><type pos:start="1:57" pos:end="1:71"><name pos:start="1:57" pos:end="1:64">AVPacket</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:71">avpkt</name></decl></parameter>,

                                 <parameter pos:start="3:34" pos:end="3:53"><decl pos:start="3:34" pos:end="3:53"><type pos:start="3:34" pos:end="3:53"><specifier pos:start="3:34" pos:end="3:38">const</specifier> <name pos:start="3:40" pos:end="3:46">AVFrame</name> <modifier pos:start="3:48" pos:end="3:48">*</modifier></type><name pos:start="3:49" pos:end="3:53">frame</name></decl></parameter>, <parameter pos:start="3:56" pos:end="3:74"><decl pos:start="3:56" pos:end="3:74"><type pos:start="3:56" pos:end="3:74"><name pos:start="3:56" pos:end="3:58">int</name> <modifier pos:start="3:60" pos:end="3:60">*</modifier></type><name pos:start="3:61" pos:end="3:74">got_packet_ptr</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="101:1">{<block_content pos:start="7:5" pos:end="99:13">

    <decl_stmt pos:start="7:5" pos:end="7:39"><decl pos:start="7:5" pos:end="7:38"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">SHINEContext</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:19">s</name> <init pos:start="7:21" pos:end="7:38">= <expr pos:start="7:23" pos:end="7:38"><name pos:start="7:23" pos:end="7:38"><name pos:start="7:23" pos:end="7:27">avctx</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:38">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:19">MPADecodeHeader</name></type> <name pos:start="9:21" pos:end="9:23">hdr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:24"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:17">char</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:23">data</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">long</name></type> <name pos:start="13:10" pos:end="13:16">written</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:17"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">ret</name></decl>, <decl pos:start="15:14" pos:end="15:16"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:14" pos:end="15:16">len</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="25:47"><if pos:start="19:5" pos:end="21:80">if <condition pos:start="19:8" pos:end="19:14">(<expr pos:start="19:9" pos:end="19:13"><name pos:start="19:9" pos:end="19:13">frame</name></expr>)</condition><block type="pseudo" pos:start="21:9" pos:end="21:80"><block_content pos:start="21:9" pos:end="21:80">

        <expr_stmt pos:start="21:9" pos:end="21:80"><expr pos:start="21:9" pos:end="21:79"><name pos:start="21:9" pos:end="21:12">data</name> <operator pos:start="21:14" pos:end="21:14">=</operator> <call pos:start="21:16" pos:end="21:79"><name pos:start="21:16" pos:end="21:34">shine_encode_buffer</name><argument_list pos:start="21:35" pos:end="21:79">(<argument pos:start="21:36" pos:end="21:43"><expr pos:start="21:36" pos:end="21:43"><name pos:start="21:36" pos:end="21:43"><name pos:start="21:36" pos:end="21:36">s</name><operator pos:start="21:37" pos:end="21:38">-&gt;</operator><name pos:start="21:39" pos:end="21:43">shine</name></name></expr></argument>, <argument pos:start="21:46" pos:end="21:68"><expr pos:start="21:46" pos:end="21:68"><operator pos:start="21:46" pos:end="21:46">(</operator><name pos:start="21:47" pos:end="21:53">int16_t</name> <operator pos:start="21:55" pos:end="21:55">*</operator><operator pos:start="21:56" pos:end="21:56">*</operator><operator pos:start="21:57" pos:end="21:57">)</operator><name pos:start="21:58" pos:end="21:68"><name pos:start="21:58" pos:end="21:62">frame</name><operator pos:start="21:63" pos:end="21:64">-&gt;</operator><name pos:start="21:65" pos:end="21:68">data</name></name></expr></argument>, <argument pos:start="21:71" pos:end="21:78"><expr pos:start="21:71" pos:end="21:78"><operator pos:start="21:71" pos:end="21:71">&amp;</operator><name pos:start="21:72" pos:end="21:78">written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="23:5" pos:end="25:47">else<block type="pseudo" pos:start="25:9" pos:end="25:47"><block_content pos:start="25:9" pos:end="25:47">

        <expr_stmt pos:start="25:9" pos:end="25:47"><expr pos:start="25:9" pos:end="25:46"><name pos:start="25:9" pos:end="25:12">data</name> <operator pos:start="25:14" pos:end="25:14">=</operator> <call pos:start="25:16" pos:end="25:46"><name pos:start="25:16" pos:end="25:26">shine_flush</name><argument_list pos:start="25:27" pos:end="25:46">(<argument pos:start="25:28" pos:end="25:35"><expr pos:start="25:28" pos:end="25:35"><name pos:start="25:28" pos:end="25:35"><name pos:start="25:28" pos:end="25:28">s</name><operator pos:start="25:29" pos:end="25:30">-&gt;</operator><name pos:start="25:31" pos:end="25:35">shine</name></name></expr></argument>, <argument pos:start="25:38" pos:end="25:45"><expr pos:start="25:38" pos:end="25:45"><operator pos:start="25:38" pos:end="25:38">&amp;</operator><name pos:start="25:39" pos:end="25:45">written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt pos:start="27:5" pos:end="29:18"><if pos:start="27:5" pos:end="29:18">if <condition pos:start="27:8" pos:end="27:20">(<expr pos:start="27:9" pos:end="27:19"><name pos:start="27:9" pos:end="27:15">written</name> <operator pos:start="27:17" pos:end="27:17">&lt;</operator> <literal type="number" pos:start="27:19" pos:end="27:19">0</literal></expr>)</condition><block type="pseudo" pos:start="29:9" pos:end="29:18"><block_content pos:start="29:9" pos:end="29:18">

        <return pos:start="29:9" pos:end="29:18">return <expr pos:start="29:16" pos:end="29:17"><operator pos:start="29:16" pos:end="29:16">-</operator><literal type="number" pos:start="29:17" pos:end="29:17">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="31:5" pos:end="45:5"><if pos:start="31:5" pos:end="45:5">if <condition pos:start="31:8" pos:end="31:20">(<expr pos:start="31:9" pos:end="31:19"><name pos:start="31:9" pos:end="31:15">written</name> <operator pos:start="31:17" pos:end="31:17">&gt;</operator> <literal type="number" pos:start="31:19" pos:end="31:19">0</literal></expr>)</condition> <block pos:start="31:22" pos:end="45:5">{<block_content pos:start="33:9" pos:end="43:35">

        <if_stmt pos:start="33:9" pos:end="39:9"><if pos:start="33:9" pos:end="39:9">if <condition pos:start="33:12" pos:end="33:52">(<expr pos:start="33:13" pos:end="33:51"><name pos:start="33:13" pos:end="33:27"><name pos:start="33:13" pos:end="33:13">s</name><operator pos:start="33:14" pos:end="33:15">-&gt;</operator><name pos:start="33:16" pos:end="33:27">buffer_index</name></name> <operator pos:start="33:29" pos:end="33:29">+</operator> <name pos:start="33:31" pos:end="33:37">written</name> <operator pos:start="33:39" pos:end="33:39">&gt;</operator> <name pos:start="33:41" pos:end="33:51">BUFFER_SIZE</name></expr>)</condition> <block pos:start="33:54" pos:end="39:9">{<block_content pos:start="35:13" pos:end="37:31">

            <expr_stmt pos:start="35:13" pos:end="35:71"><expr pos:start="35:13" pos:end="35:70"><call pos:start="35:13" pos:end="35:70"><name pos:start="35:13" pos:end="35:18">av_log</name><argument_list pos:start="35:19" pos:end="35:70">(<argument pos:start="35:20" pos:end="35:24"><expr pos:start="35:20" pos:end="35:24"><name pos:start="35:20" pos:end="35:24">avctx</name></expr></argument>, <argument pos:start="35:27" pos:end="35:38"><expr pos:start="35:27" pos:end="35:38"><name pos:start="35:27" pos:end="35:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="35:41" pos:end="35:69"><expr pos:start="35:41" pos:end="35:69"><literal type="string" pos:start="35:41" pos:end="35:69">"internal buffer too small\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="37:13" pos:end="37:31">return <expr pos:start="37:20" pos:end="37:30"><name pos:start="37:20" pos:end="37:30">AVERROR_BUG</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:59"><expr pos:start="41:9" pos:end="41:58"><call pos:start="41:9" pos:end="41:58"><name pos:start="41:9" pos:end="41:14">memcpy</name><argument_list pos:start="41:15" pos:end="41:58">(<argument pos:start="41:16" pos:end="41:42"><expr pos:start="41:16" pos:end="41:42"><name pos:start="41:16" pos:end="41:24"><name pos:start="41:16" pos:end="41:16">s</name><operator pos:start="41:17" pos:end="41:18">-&gt;</operator><name pos:start="41:19" pos:end="41:24">buffer</name></name> <operator pos:start="41:26" pos:end="41:26">+</operator> <name pos:start="41:28" pos:end="41:42"><name pos:start="41:28" pos:end="41:28">s</name><operator pos:start="41:29" pos:end="41:30">-&gt;</operator><name pos:start="41:31" pos:end="41:42">buffer_index</name></name></expr></argument>, <argument pos:start="41:45" pos:end="41:48"><expr pos:start="41:45" pos:end="41:48"><name pos:start="41:45" pos:end="41:48">data</name></expr></argument>, <argument pos:start="41:51" pos:end="41:57"><expr pos:start="41:51" pos:end="41:57"><name pos:start="41:51" pos:end="41:57">written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:35"><expr pos:start="43:9" pos:end="43:34"><name pos:start="43:9" pos:end="43:23"><name pos:start="43:9" pos:end="43:9">s</name><operator pos:start="43:10" pos:end="43:11">-&gt;</operator><name pos:start="43:12" pos:end="43:23">buffer_index</name></name> <operator pos:start="43:25" pos:end="43:26">+=</operator> <name pos:start="43:28" pos:end="43:34">written</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="47:5" pos:end="53:5"><if pos:start="47:5" pos:end="53:5">if <condition pos:start="47:8" pos:end="47:14">(<expr pos:start="47:9" pos:end="47:13"><name pos:start="47:9" pos:end="47:13">frame</name></expr>)</condition> <block pos:start="47:16" pos:end="53:5">{<block_content pos:start="49:9" pos:end="51:23">

        <if_stmt pos:start="49:9" pos:end="51:23"><if pos:start="49:9" pos:end="51:23">if <condition pos:start="49:12" pos:end="49:56">(<expr pos:start="49:13" pos:end="49:55"><operator pos:start="49:13" pos:end="49:13">(</operator><name pos:start="49:14" pos:end="49:16">ret</name> <operator pos:start="49:18" pos:end="49:18">=</operator> <call pos:start="49:20" pos:end="49:50"><name pos:start="49:20" pos:end="49:34">ff_af_queue_add</name><argument_list pos:start="49:35" pos:end="49:50">(<argument pos:start="49:36" pos:end="49:42"><expr pos:start="49:36" pos:end="49:42"><operator pos:start="49:36" pos:end="49:36">&amp;</operator><name pos:start="49:37" pos:end="49:42"><name pos:start="49:37" pos:end="49:37">s</name><operator pos:start="49:38" pos:end="49:39">-&gt;</operator><name pos:start="49:40" pos:end="49:42">afq</name></name></expr></argument>, <argument pos:start="49:45" pos:end="49:49"><expr pos:start="49:45" pos:end="49:49"><name pos:start="49:45" pos:end="49:49">frame</name></expr></argument>)</argument_list></call><operator pos:start="49:51" pos:end="49:51">)</operator> <operator pos:start="49:53" pos:end="49:53">&lt;</operator> <literal type="number" pos:start="49:55" pos:end="49:55">0</literal></expr>)</condition><block type="pseudo" pos:start="51:13" pos:end="51:23"><block_content pos:start="51:13" pos:end="51:23">

            <return pos:start="51:13" pos:end="51:23">return <expr pos:start="51:20" pos:end="51:22"><name pos:start="51:20" pos:end="51:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="57:5" pos:end="59:17"><if pos:start="57:5" pos:end="59:17">if <condition pos:start="57:8" pos:end="57:51">(<expr pos:start="57:9" pos:end="57:50"><name pos:start="57:9" pos:end="57:23"><name pos:start="57:9" pos:end="57:9">s</name><operator pos:start="57:10" pos:end="57:11">-&gt;</operator><name pos:start="57:12" pos:end="57:23">buffer_index</name></name> <operator pos:start="57:25" pos:end="57:25">&lt;</operator> <literal type="number" pos:start="57:27" pos:end="57:27">4</literal> <operator pos:start="57:29" pos:end="57:30">||</operator> <operator pos:start="57:32" pos:end="57:32">!</operator><name pos:start="57:33" pos:end="57:50"><name pos:start="57:33" pos:end="57:33">s</name><operator pos:start="57:34" pos:end="57:35">-&gt;</operator><name pos:start="57:36" pos:end="57:38">afq</name><operator pos:start="57:39" pos:end="57:39">.</operator><name pos:start="57:40" pos:end="57:50">frame_count</name></name></expr>)</condition><block type="pseudo" pos:start="59:9" pos:end="59:17"><block_content pos:start="59:9" pos:end="59:17">

        <return pos:start="59:9" pos:end="59:17">return <expr pos:start="59:16" pos:end="59:16"><literal type="number" pos:start="59:16" pos:end="59:16">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="61:5" pos:end="67:5"><if pos:start="61:5" pos:end="67:5">if <condition pos:start="61:8" pos:end="61:65">(<expr pos:start="61:9" pos:end="61:64"><call pos:start="61:9" pos:end="61:64"><name pos:start="61:9" pos:end="61:38">avpriv_mpegaudio_decode_header</name><argument_list pos:start="61:39" pos:end="61:64">(<argument pos:start="61:40" pos:end="61:43"><expr pos:start="61:40" pos:end="61:43"><operator pos:start="61:40" pos:end="61:40">&amp;</operator><name pos:start="61:41" pos:end="61:43">hdr</name></expr></argument>, <argument pos:start="61:46" pos:end="61:63"><expr pos:start="61:46" pos:end="61:63"><call pos:start="61:46" pos:end="61:63"><name pos:start="61:46" pos:end="61:52">AV_RB32</name><argument_list pos:start="61:53" pos:end="61:63">(<argument pos:start="61:54" pos:end="61:62"><expr pos:start="61:54" pos:end="61:62"><name pos:start="61:54" pos:end="61:62"><name pos:start="61:54" pos:end="61:54">s</name><operator pos:start="61:55" pos:end="61:56">-&gt;</operator><name pos:start="61:57" pos:end="61:62">buffer</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="61:67" pos:end="67:5">{<block_content pos:start="63:9" pos:end="65:18">

        <expr_stmt pos:start="63:9" pos:end="63:74"><expr pos:start="63:9" pos:end="63:73"><call pos:start="63:9" pos:end="63:73"><name pos:start="63:9" pos:end="63:14">av_log</name><argument_list pos:start="63:15" pos:end="63:73">(<argument pos:start="63:16" pos:end="63:20"><expr pos:start="63:16" pos:end="63:20"><name pos:start="63:16" pos:end="63:20">avctx</name></expr></argument>, <argument pos:start="63:23" pos:end="63:34"><expr pos:start="63:23" pos:end="63:34"><name pos:start="63:23" pos:end="63:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="63:37" pos:end="63:72"><expr pos:start="63:37" pos:end="63:72"><literal type="string" pos:start="63:37" pos:end="63:72">"free format output not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="65:9" pos:end="65:18">return <expr pos:start="65:16" pos:end="65:17"><operator pos:start="65:16" pos:end="65:16">-</operator><literal type="number" pos:start="65:17" pos:end="65:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:25"><expr pos:start="71:5" pos:end="71:24"><name pos:start="71:5" pos:end="71:7">len</name> <operator pos:start="71:9" pos:end="71:9">=</operator> <name pos:start="71:11" pos:end="71:24"><name pos:start="71:11" pos:end="71:13">hdr</name><operator pos:start="71:14" pos:end="71:14">.</operator><name pos:start="71:15" pos:end="71:24">frame_size</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="73:5" pos:end="97:5"><if pos:start="73:5" pos:end="97:5">if <condition pos:start="73:8" pos:end="73:31">(<expr pos:start="73:9" pos:end="73:30"><name pos:start="73:9" pos:end="73:11">len</name> <operator pos:start="73:13" pos:end="73:14">&lt;=</operator> <name pos:start="73:16" pos:end="73:30"><name pos:start="73:16" pos:end="73:16">s</name><operator pos:start="73:17" pos:end="73:18">-&gt;</operator><name pos:start="73:19" pos:end="73:30">buffer_index</name></name></expr>)</condition> <block pos:start="73:33" pos:end="97:5">{<block_content pos:start="75:9" pos:end="95:28">

        <if_stmt pos:start="75:9" pos:end="77:23"><if pos:start="75:9" pos:end="77:23">if <condition pos:start="75:12" pos:end="75:56">(<expr pos:start="75:13" pos:end="75:55"><operator pos:start="75:13" pos:end="75:13">(</operator><name pos:start="75:14" pos:end="75:16">ret</name> <operator pos:start="75:18" pos:end="75:18">=</operator> <call pos:start="75:20" pos:end="75:54"><name pos:start="75:20" pos:end="75:35">ff_alloc_packet2</name><argument_list pos:start="75:36" pos:end="75:54">(<argument pos:start="75:37" pos:end="75:41"><expr pos:start="75:37" pos:end="75:41"><name pos:start="75:37" pos:end="75:41">avctx</name></expr></argument>, <argument pos:start="75:44" pos:end="75:48"><expr pos:start="75:44" pos:end="75:48"><name pos:start="75:44" pos:end="75:48">avpkt</name></expr></argument>, <argument pos:start="75:51" pos:end="75:53"><expr pos:start="75:51" pos:end="75:53"><name pos:start="75:51" pos:end="75:53">len</name></expr></argument>)</argument_list></call><operator pos:start="75:55" pos:end="75:55">)</operator></expr>)</condition><block type="pseudo" pos:start="77:13" pos:end="77:23"><block_content pos:start="77:13" pos:end="77:23">

            <return pos:start="77:13" pos:end="77:23">return <expr pos:start="77:20" pos:end="77:22"><name pos:start="77:20" pos:end="77:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:44"><expr pos:start="79:9" pos:end="79:43"><call pos:start="79:9" pos:end="79:43"><name pos:start="79:9" pos:end="79:14">memcpy</name><argument_list pos:start="79:15" pos:end="79:43">(<argument pos:start="79:16" pos:end="79:26"><expr pos:start="79:16" pos:end="79:26"><name pos:start="79:16" pos:end="79:26"><name pos:start="79:16" pos:end="79:20">avpkt</name><operator pos:start="79:21" pos:end="79:22">-&gt;</operator><name pos:start="79:23" pos:end="79:26">data</name></name></expr></argument>, <argument pos:start="79:29" pos:end="79:37"><expr pos:start="79:29" pos:end="79:37"><name pos:start="79:29" pos:end="79:37"><name pos:start="79:29" pos:end="79:29">s</name><operator pos:start="79:30" pos:end="79:31">-&gt;</operator><name pos:start="79:32" pos:end="79:37">buffer</name></name></expr></argument>, <argument pos:start="79:40" pos:end="79:42"><expr pos:start="79:40" pos:end="79:42"><name pos:start="79:40" pos:end="79:42">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:31"><expr pos:start="81:9" pos:end="81:30"><name pos:start="81:9" pos:end="81:23"><name pos:start="81:9" pos:end="81:9">s</name><operator pos:start="81:10" pos:end="81:11">-&gt;</operator><name pos:start="81:12" pos:end="81:23">buffer_index</name></name> <operator pos:start="81:25" pos:end="81:26">-=</operator> <name pos:start="81:28" pos:end="81:30">len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:61"><expr pos:start="83:9" pos:end="83:60"><call pos:start="83:9" pos:end="83:60"><name pos:start="83:9" pos:end="83:15">memmove</name><argument_list pos:start="83:16" pos:end="83:60">(<argument pos:start="83:17" pos:end="83:25"><expr pos:start="83:17" pos:end="83:25"><name pos:start="83:17" pos:end="83:25"><name pos:start="83:17" pos:end="83:17">s</name><operator pos:start="83:18" pos:end="83:19">-&gt;</operator><name pos:start="83:20" pos:end="83:25">buffer</name></name></expr></argument>, <argument pos:start="83:28" pos:end="83:42"><expr pos:start="83:28" pos:end="83:42"><name pos:start="83:28" pos:end="83:36"><name pos:start="83:28" pos:end="83:28">s</name><operator pos:start="83:29" pos:end="83:30">-&gt;</operator><name pos:start="83:31" pos:end="83:36">buffer</name></name> <operator pos:start="83:38" pos:end="83:38">+</operator> <name pos:start="83:40" pos:end="83:42">len</name></expr></argument>, <argument pos:start="83:45" pos:end="83:59"><expr pos:start="83:45" pos:end="83:59"><name pos:start="83:45" pos:end="83:59"><name pos:start="83:45" pos:end="83:45">s</name><operator pos:start="83:46" pos:end="83:47">-&gt;</operator><name pos:start="83:48" pos:end="83:59">buffer_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="87:9" pos:end="89:45"><expr pos:start="87:9" pos:end="89:44"><call pos:start="87:9" pos:end="89:44"><name pos:start="87:9" pos:end="87:26">ff_af_queue_remove</name><argument_list pos:start="87:27" pos:end="89:44">(<argument pos:start="87:28" pos:end="87:34"><expr pos:start="87:28" pos:end="87:34"><operator pos:start="87:28" pos:end="87:28">&amp;</operator><name pos:start="87:29" pos:end="87:34"><name pos:start="87:29" pos:end="87:29">s</name><operator pos:start="87:30" pos:end="87:31">-&gt;</operator><name pos:start="87:32" pos:end="87:34">afq</name></name></expr></argument>, <argument pos:start="87:37" pos:end="87:53"><expr pos:start="87:37" pos:end="87:53"><name pos:start="87:37" pos:end="87:53"><name pos:start="87:37" pos:end="87:41">avctx</name><operator pos:start="87:42" pos:end="87:43">-&gt;</operator><name pos:start="87:44" pos:end="87:53">frame_size</name></name></expr></argument>, <argument pos:start="87:56" pos:end="87:66"><expr pos:start="87:56" pos:end="87:66"><operator pos:start="87:56" pos:end="87:56">&amp;</operator><name pos:start="87:57" pos:end="87:66"><name pos:start="87:57" pos:end="87:61">avpkt</name><operator pos:start="87:62" pos:end="87:63">-&gt;</operator><name pos:start="87:64" pos:end="87:66">pts</name></name></expr></argument>,

                           <argument pos:start="89:28" pos:end="89:43"><expr pos:start="89:28" pos:end="89:43"><operator pos:start="89:28" pos:end="89:28">&amp;</operator><name pos:start="89:29" pos:end="89:43"><name pos:start="89:29" pos:end="89:33">avpkt</name><operator pos:start="89:34" pos:end="89:35">-&gt;</operator><name pos:start="89:36" pos:end="89:43">duration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="93:9" pos:end="93:26"><expr pos:start="93:9" pos:end="93:25"><name pos:start="93:9" pos:end="93:19"><name pos:start="93:9" pos:end="93:13">avpkt</name><operator pos:start="93:14" pos:end="93:15">-&gt;</operator><name pos:start="93:16" pos:end="93:19">size</name></name> <operator pos:start="93:21" pos:end="93:21">=</operator> <name pos:start="93:23" pos:end="93:25">len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:28"><expr pos:start="95:9" pos:end="95:27"><operator pos:start="95:9" pos:end="95:9">*</operator><name pos:start="95:10" pos:end="95:23">got_packet_ptr</name> <operator pos:start="95:25" pos:end="95:25">=</operator> <literal type="number" pos:start="95:27" pos:end="95:27">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="99:5" pos:end="99:13">return <expr pos:start="99:12" pos:end="99:12"><literal type="number" pos:start="99:12" pos:end="99:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
