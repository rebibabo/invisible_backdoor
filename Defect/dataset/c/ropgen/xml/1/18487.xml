<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/18487.c" pos:tabs="8"><function pos:start="1:1" pos:end="347:1"><type pos:start="1:1" pos:end="1:25"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name> <name pos:start="1:20" pos:end="1:25">RENAME</name></type>(<name pos:start="1:27" pos:end="1:32">hScale</name>)<parameter_list pos:start="1:34" pos:end="3:98">(<parameter pos:start="1:35" pos:end="1:46"><decl pos:start="1:35" pos:end="1:46"><type pos:start="1:35" pos:end="1:46"><name pos:start="1:35" pos:end="1:41">int16_t</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:46">dst</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:56"><decl pos:start="1:49" pos:end="1:56"><type pos:start="1:49" pos:end="1:56"><name pos:start="1:49" pos:end="1:51">int</name></type> <name pos:start="1:53" pos:end="1:56">dstW</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:76"><decl pos:start="1:59" pos:end="1:76"><type pos:start="1:59" pos:end="1:76"><specifier pos:start="1:59" pos:end="1:63">const</specifier> <name pos:start="1:65" pos:end="1:71">uint8_t</name> <modifier pos:start="1:73" pos:end="1:73">*</modifier></type><name pos:start="1:74" pos:end="1:76">src</name></decl></parameter>, <parameter pos:start="1:79" pos:end="1:86"><decl pos:start="1:79" pos:end="1:86"><type pos:start="1:79" pos:end="1:86"><name pos:start="1:79" pos:end="1:81">int</name></type> <name pos:start="1:83" pos:end="1:86">srcW</name></decl></parameter>, <parameter pos:start="1:89" pos:end="1:96"><decl pos:start="1:89" pos:end="1:96"><type pos:start="1:89" pos:end="1:96"><name pos:start="1:89" pos:end="1:91">int</name></type> <name pos:start="1:93" pos:end="1:96">xInc</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:55"><decl pos:start="3:35" pos:end="3:55"><type pos:start="3:35" pos:end="3:55"><specifier pos:start="3:35" pos:end="3:39">const</specifier> <name pos:start="3:41" pos:end="3:47">int16_t</name> <modifier pos:start="3:49" pos:end="3:49">*</modifier></type><name pos:start="3:50" pos:end="3:55">filter</name></decl></parameter>, <parameter pos:start="3:58" pos:end="3:81"><decl pos:start="3:58" pos:end="3:81"><type pos:start="3:58" pos:end="3:81"><specifier pos:start="3:58" pos:end="3:62">const</specifier> <name pos:start="3:64" pos:end="3:70">int16_t</name> <modifier pos:start="3:72" pos:end="3:72">*</modifier></type><name pos:start="3:73" pos:end="3:81">filterPos</name></decl></parameter>, <parameter pos:start="3:84" pos:end="3:97"><decl pos:start="3:84" pos:end="3:97"><type pos:start="3:84" pos:end="3:97"><name pos:start="3:84" pos:end="3:86">int</name></type> <name pos:start="3:88" pos:end="3:97">filterSize</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="347:1">{<block_content pos:start="9:5" pos:end="346:0">

<cpp:if pos:start="7:1" pos:end="7:24">#<cpp:directive pos:start="7:2" pos:end="7:3">if</cpp:directive> <expr pos:start="7:5" pos:end="7:24"><name pos:start="7:5" pos:end="7:24">COMPILE_TEMPLATE_MMX</name></expr></cpp:if>

    <expr_stmt pos:start="9:5" pos:end="9:48"><expr pos:start="9:5" pos:end="9:47"><call pos:start="9:5" pos:end="9:47"><name pos:start="9:5" pos:end="9:10">assert</name><argument_list pos:start="9:11" pos:end="9:47">(<argument pos:start="9:12" pos:end="9:46"><expr pos:start="9:12" pos:end="9:46"><name pos:start="9:12" pos:end="9:21">filterSize</name> <operator pos:start="9:23" pos:end="9:23">%</operator> <literal type="number" pos:start="9:25" pos:end="9:25">4</literal> <operator pos:start="9:27" pos:end="9:28">==</operator> <literal type="number" pos:start="9:30" pos:end="9:30">0</literal> <operator pos:start="9:32" pos:end="9:33">&amp;&amp;</operator> <name pos:start="9:35" pos:end="9:44">filterSize</name><operator pos:start="9:45" pos:end="9:45">&gt;</operator><literal type="number" pos:start="9:46" pos:end="9:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="11:5" pos:end="310:0"><if pos:start="11:5" pos:end="99:5">if <condition pos:start="11:8" pos:end="11:22">(<expr pos:start="11:9" pos:end="11:21"><name pos:start="11:9" pos:end="11:18">filterSize</name><operator pos:start="11:19" pos:end="11:20">==</operator><literal type="number" pos:start="11:21" pos:end="11:21">4</literal></expr>)</condition> <block pos:start="11:24" pos:end="99:5">{<block_content pos:start="13:9" pos:end="97:10"> <comment type="line" pos:start="11:26" pos:end="11:79">// Always true for upscaling, sometimes for down, too.</comment>

        <decl_stmt pos:start="13:9" pos:end="13:33"><decl pos:start="13:9" pos:end="13:32"><type pos:start="13:9" pos:end="13:15"><name pos:start="13:9" pos:end="13:15">x86_reg</name></type> <name pos:start="13:17" pos:end="13:23">counter</name><init pos:start="13:24" pos:end="13:32">= <expr pos:start="13:26" pos:end="13:32"><operator pos:start="13:26" pos:end="13:26">-</operator><literal type="number" pos:start="13:27" pos:end="13:27">2</literal><operator pos:start="13:28" pos:end="13:28">*</operator><name pos:start="13:29" pos:end="13:32">dstW</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="15:9" pos:end="15:27"><expr pos:start="15:9" pos:end="15:26"><name pos:start="15:9" pos:end="15:14">filter</name><operator pos:start="15:15" pos:end="15:16">-=</operator> <name pos:start="15:18" pos:end="15:24">counter</name><operator pos:start="15:25" pos:end="15:25">*</operator><literal type="number" pos:start="15:26" pos:end="15:26">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="17:9" pos:end="17:30"><expr pos:start="17:9" pos:end="17:29"><name pos:start="17:9" pos:end="17:17">filterPos</name><operator pos:start="17:18" pos:end="17:19">-=</operator> <name pos:start="17:21" pos:end="17:27">counter</name><operator pos:start="17:28" pos:end="17:28">/</operator><literal type="number" pos:start="17:29" pos:end="17:29">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:24"><expr pos:start="19:9" pos:end="19:23"><name pos:start="19:9" pos:end="19:11">dst</name><operator pos:start="19:12" pos:end="19:13">-=</operator> <name pos:start="19:15" pos:end="19:21">counter</name><operator pos:start="19:22" pos:end="19:22">/</operator><literal type="number" pos:start="19:23" pos:end="19:23">2</literal></expr>;</expr_stmt>

        <asm pos:start="21:9" pos:end="97:10">__asm__ <specifier pos:start="21:17" pos:end="21:24">volatile</specifier>(

<cpp:if pos:start="23:1" pos:end="23:16">#<cpp:directive pos:start="23:2" pos:end="23:3">if</cpp:directive> <expr pos:start="23:5" pos:end="23:16"><call pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:11">defined</name><argument_list pos:start="23:12" pos:end="23:16">(<argument pos:start="23:13" pos:end="23:15"><expr pos:start="23:13" pos:end="23:15"><name pos:start="23:13" pos:end="23:15">PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

            "push            %%"REG_b"              \n\t"

<cpp:endif pos:start="27:1" pos:end="27:6">#<cpp:directive pos:start="27:2" pos:end="27:6">endif</cpp:directive></cpp:endif>

            "pxor                %%mm7, %%mm7       \n\t"

            "push           %%"REG_BP"              \n\t" <comment type="line" pos:start="31:59" pos:end="31:83">// we use 7 regs here ...</comment>

            "mov             %%"REG_a", %%"REG_BP"  \n\t"

            ASMALIGN(4)

            "1:                                     \n\t"

            "movzwl   (%2, %%"REG_BP"), %%eax       \n\t"

            "movzwl  2(%2, %%"REG_BP"), %%ebx       \n\t"

            "movq  (%1, %%"REG_BP", 4), %%mm1       \n\t"

            "movq 8(%1, %%"REG_BP", 4), %%mm3       \n\t"

            "movd      (%3, %%"REG_a"), %%mm0       \n\t"

            "movd      (%3, %%"REG_b"), %%mm2       \n\t"

            "punpcklbw           %%mm7, %%mm0       \n\t"

            "punpcklbw           %%mm7, %%mm2       \n\t"

            "pmaddwd             %%mm1, %%mm0       \n\t"

            "pmaddwd             %%mm2, %%mm3       \n\t"

            "movq                %%mm0, %%mm4       \n\t"

            "punpckldq           %%mm3, %%mm0       \n\t"

            "punpckhdq           %%mm3, %%mm4       \n\t"

            "paddd               %%mm4, %%mm0       \n\t"

            "psrad                  $7, %%mm0       \n\t"

            "packssdw            %%mm0, %%mm0       \n\t"

            "movd                %%mm0, (%4, %%"REG_BP")    \n\t"

            "add                    $4, %%"REG_BP"  \n\t"

            " jnc                   1b              \n\t"



            "pop            %%"REG_BP"              \n\t"

<cpp:if pos:start="81:1" pos:end="81:16">#<cpp:directive pos:start="81:2" pos:end="81:3">if</cpp:directive> <expr pos:start="81:5" pos:end="81:16"><call pos:start="81:5" pos:end="81:16"><name pos:start="81:5" pos:end="81:11">defined</name><argument_list pos:start="81:12" pos:end="81:16">(<argument pos:start="81:13" pos:end="81:15"><expr pos:start="81:13" pos:end="81:15"><name pos:start="81:13" pos:end="81:15">PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

            "pop             %%"REG_b"              \n\t"

<cpp:endif pos:start="85:1" pos:end="85:6">#<cpp:directive pos:start="85:2" pos:end="85:6">endif</cpp:directive></cpp:endif>

            : "+a" (counter)

            : "c" (filter), "d" (filterPos), "S" (src), "D" (dst)

<cpp:if pos:start="91:1" pos:end="91:17">#<cpp:directive pos:start="91:2" pos:end="91:3">if</cpp:directive> <expr pos:start="91:5" pos:end="91:17"><operator pos:start="91:5" pos:end="91:5">!</operator><call pos:start="91:6" pos:end="91:17"><name pos:start="91:6" pos:end="91:12">defined</name><argument_list pos:start="91:13" pos:end="91:17">(<argument pos:start="91:14" pos:end="91:16"><expr pos:start="91:14" pos:end="91:16"><name pos:start="91:14" pos:end="91:16">PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

            : "%"REG_b

<cpp:endif pos:start="95:1" pos:end="95:6">#<cpp:directive pos:start="95:2" pos:end="95:6">endif</cpp:directive></cpp:endif>

        );</asm>

    </block_content>}</block></if> <if type="elseif" pos:start="99:7" pos:end="209:5">else if <condition pos:start="99:15" pos:end="99:29">(<expr pos:start="99:16" pos:end="99:28"><name pos:start="99:16" pos:end="99:25">filterSize</name><operator pos:start="99:26" pos:end="99:27">==</operator><literal type="number" pos:start="99:28" pos:end="99:28">8</literal></expr>)</condition> <block pos:start="99:31" pos:end="209:5">{<block_content pos:start="101:9" pos:end="207:10">

        <decl_stmt pos:start="101:9" pos:end="101:33"><decl pos:start="101:9" pos:end="101:32"><type pos:start="101:9" pos:end="101:15"><name pos:start="101:9" pos:end="101:15">x86_reg</name></type> <name pos:start="101:17" pos:end="101:23">counter</name><init pos:start="101:24" pos:end="101:32">= <expr pos:start="101:26" pos:end="101:32"><operator pos:start="101:26" pos:end="101:26">-</operator><literal type="number" pos:start="101:27" pos:end="101:27">2</literal><operator pos:start="101:28" pos:end="101:28">*</operator><name pos:start="101:29" pos:end="101:32">dstW</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:27"><expr pos:start="103:9" pos:end="103:26"><name pos:start="103:9" pos:end="103:14">filter</name><operator pos:start="103:15" pos:end="103:16">-=</operator> <name pos:start="103:18" pos:end="103:24">counter</name><operator pos:start="103:25" pos:end="103:25">*</operator><literal type="number" pos:start="103:26" pos:end="103:26">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:30"><expr pos:start="105:9" pos:end="105:29"><name pos:start="105:9" pos:end="105:17">filterPos</name><operator pos:start="105:18" pos:end="105:19">-=</operator> <name pos:start="105:21" pos:end="105:27">counter</name><operator pos:start="105:28" pos:end="105:28">/</operator><literal type="number" pos:start="105:29" pos:end="105:29">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:24"><expr pos:start="107:9" pos:end="107:23"><name pos:start="107:9" pos:end="107:11">dst</name><operator pos:start="107:12" pos:end="107:13">-=</operator> <name pos:start="107:15" pos:end="107:21">counter</name><operator pos:start="107:22" pos:end="107:22">/</operator><literal type="number" pos:start="107:23" pos:end="107:23">2</literal></expr>;</expr_stmt>

        <asm pos:start="109:9" pos:end="207:10">__asm__ <specifier pos:start="109:17" pos:end="109:24">volatile</specifier>(

<cpp:if pos:start="111:1" pos:end="111:16">#<cpp:directive pos:start="111:2" pos:end="111:3">if</cpp:directive> <expr pos:start="111:5" pos:end="111:16"><call pos:start="111:5" pos:end="111:16"><name pos:start="111:5" pos:end="111:11">defined</name><argument_list pos:start="111:12" pos:end="111:16">(<argument pos:start="111:13" pos:end="111:15"><expr pos:start="111:13" pos:end="111:15"><name pos:start="111:13" pos:end="111:15">PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

            "push             %%"REG_b"             \n\t"

<cpp:endif pos:start="115:1" pos:end="115:6">#<cpp:directive pos:start="115:2" pos:end="115:6">endif</cpp:directive></cpp:endif>

            "pxor                 %%mm7, %%mm7      \n\t"

            "push            %%"REG_BP"             \n\t" <comment type="line" pos:start="119:59" pos:end="119:83">// we use 7 regs here ...</comment>

            "mov              %%"REG_a", %%"REG_BP" \n\t"

            ASMALIGN(4)

            "1:                                     \n\t"

            "movzwl    (%2, %%"REG_BP"), %%eax      \n\t"

            "movzwl   2(%2, %%"REG_BP"), %%ebx      \n\t"

            "movq   (%1, %%"REG_BP", 8), %%mm1      \n\t"

            "movq 16(%1, %%"REG_BP", 8), %%mm3      \n\t"

            "movd       (%3, %%"REG_a"), %%mm0      \n\t"

            "movd       (%3, %%"REG_b"), %%mm2      \n\t"

            "punpcklbw            %%mm7, %%mm0      \n\t"

            "punpcklbw            %%mm7, %%mm2      \n\t"

            "pmaddwd              %%mm1, %%mm0      \n\t"

            "pmaddwd              %%mm2, %%mm3      \n\t"



            "movq  8(%1, %%"REG_BP", 8), %%mm1      \n\t"

            "movq 24(%1, %%"REG_BP", 8), %%mm5      \n\t"

            "movd      4(%3, %%"REG_a"), %%mm4      \n\t"

            "movd      4(%3, %%"REG_b"), %%mm2      \n\t"

            "punpcklbw            %%mm7, %%mm4      \n\t"

            "punpcklbw            %%mm7, %%mm2      \n\t"

            "pmaddwd              %%mm1, %%mm4      \n\t"

            "pmaddwd              %%mm2, %%mm5      \n\t"

            "paddd                %%mm4, %%mm0      \n\t"

            "paddd                %%mm5, %%mm3      \n\t"

            "movq                 %%mm0, %%mm4      \n\t"

            "punpckldq            %%mm3, %%mm0      \n\t"

            "punpckhdq            %%mm3, %%mm4      \n\t"

            "paddd                %%mm4, %%mm0      \n\t"

            "psrad                   $7, %%mm0      \n\t"

            "packssdw             %%mm0, %%mm0      \n\t"

            "movd                 %%mm0, (%4, %%"REG_BP")   \n\t"

            "add                     $4, %%"REG_BP" \n\t"

            " jnc                    1b             \n\t"



            "pop             %%"REG_BP"             \n\t"

<cpp:if pos:start="191:1" pos:end="191:16">#<cpp:directive pos:start="191:2" pos:end="191:3">if</cpp:directive> <expr pos:start="191:5" pos:end="191:16"><call pos:start="191:5" pos:end="191:16"><name pos:start="191:5" pos:end="191:11">defined</name><argument_list pos:start="191:12" pos:end="191:16">(<argument pos:start="191:13" pos:end="191:15"><expr pos:start="191:13" pos:end="191:15"><name pos:start="191:13" pos:end="191:15">PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

            "pop              %%"REG_b"             \n\t"

<cpp:endif pos:start="195:1" pos:end="195:6">#<cpp:directive pos:start="195:2" pos:end="195:6">endif</cpp:directive></cpp:endif>

            : "+a" (counter)

            : "c" (filter), "d" (filterPos), "S" (src), "D" (dst)

<cpp:if pos:start="201:1" pos:end="201:17">#<cpp:directive pos:start="201:2" pos:end="201:3">if</cpp:directive> <expr pos:start="201:5" pos:end="201:17"><operator pos:start="201:5" pos:end="201:5">!</operator><call pos:start="201:6" pos:end="201:17"><name pos:start="201:6" pos:end="201:12">defined</name><argument_list pos:start="201:13" pos:end="201:17">(<argument pos:start="201:14" pos:end="201:16"><expr pos:start="201:14" pos:end="201:16"><name pos:start="201:14" pos:end="201:16">PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

            : "%"REG_b

<cpp:endif pos:start="205:1" pos:end="205:6">#<cpp:directive pos:start="205:2" pos:end="205:6">endif</cpp:directive></cpp:endif>

        );</asm>

    </block_content>}</block></if> <else pos:start="209:7" pos:end="310:0">else <block pos:start="209:12" pos:end="310:0">{<block_content pos:start="211:9" pos:end="303:10">

        <decl_stmt pos:start="211:9" pos:end="211:47"><decl pos:start="211:9" pos:end="211:46"><type pos:start="211:9" pos:end="211:23"><specifier pos:start="211:9" pos:end="211:13">const</specifier> <name pos:start="211:15" pos:end="211:21">uint8_t</name> <modifier pos:start="211:23" pos:end="211:23">*</modifier></type><name pos:start="211:24" pos:end="211:29">offset</name> <init pos:start="211:31" pos:end="211:46">= <expr pos:start="211:33" pos:end="211:46"><name pos:start="211:33" pos:end="211:35">src</name><operator pos:start="211:36" pos:end="211:36">+</operator><name pos:start="211:37" pos:end="211:46">filterSize</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="213:9" pos:end="213:33"><decl pos:start="213:9" pos:end="213:32"><type pos:start="213:9" pos:end="213:15"><name pos:start="213:9" pos:end="213:15">x86_reg</name></type> <name pos:start="213:17" pos:end="213:23">counter</name><init pos:start="213:24" pos:end="213:32">= <expr pos:start="213:26" pos:end="213:32"><operator pos:start="213:26" pos:end="213:26">-</operator><literal type="number" pos:start="213:27" pos:end="213:27">2</literal><operator pos:start="213:28" pos:end="213:28">*</operator><name pos:start="213:29" pos:end="213:32">dstW</name></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:start="215:9" pos:end="215:40">//filter-= counter*filterSize/2;</comment>

        <expr_stmt pos:start="217:9" pos:end="217:30"><expr pos:start="217:9" pos:end="217:29"><name pos:start="217:9" pos:end="217:17">filterPos</name><operator pos:start="217:18" pos:end="217:19">-=</operator> <name pos:start="217:21" pos:end="217:27">counter</name><operator pos:start="217:28" pos:end="217:28">/</operator><literal type="number" pos:start="217:29" pos:end="217:29">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="219:9" pos:end="219:24"><expr pos:start="219:9" pos:end="219:23"><name pos:start="219:9" pos:end="219:11">dst</name><operator pos:start="219:12" pos:end="219:13">-=</operator> <name pos:start="219:15" pos:end="219:21">counter</name><operator pos:start="219:22" pos:end="219:22">/</operator><literal type="number" pos:start="219:23" pos:end="219:23">2</literal></expr>;</expr_stmt>

        <asm pos:start="221:9" pos:end="303:10">__asm__ <specifier pos:start="221:17" pos:end="221:24">volatile</specifier>(

            "pxor                  %%mm7, %%mm7     \n\t"

            ASMALIGN(4)

            "1:                                     \n\t"

            "mov                      %2, %%"REG_c" \n\t"

            "movzwl      (%%"REG_c", %0), %%eax     \n\t"

            "movzwl     2(%%"REG_c", %0), %%edx     \n\t"

            "mov                      %5, %%"REG_c" \n\t"

            "pxor                  %%mm4, %%mm4     \n\t"

            "pxor                  %%mm5, %%mm5     \n\t"

            "2:                                     \n\t"

            "movq                   (%1), %%mm1     \n\t"

            "movq               (%1, %6), %%mm3     \n\t"

            "movd (%%"REG_c", %%"REG_a"), %%mm0     \n\t"

            "movd (%%"REG_c", %%"REG_d"), %%mm2     \n\t"

            "punpcklbw             %%mm7, %%mm0     \n\t"

            "punpcklbw             %%mm7, %%mm2     \n\t"

            "pmaddwd               %%mm1, %%mm0     \n\t"

            "pmaddwd               %%mm2, %%mm3     \n\t"

            "paddd                 %%mm3, %%mm5     \n\t"

            "paddd                 %%mm0, %%mm4     \n\t"

            "add                      $8, %1        \n\t"

            "add                      $4, %%"REG_c" \n\t"

            "cmp                      %4, %%"REG_c" \n\t"

            " jb                      2b            \n\t"

            "add                      %6, %1        \n\t"

            "movq                  %%mm4, %%mm0     \n\t"

            "punpckldq             %%mm5, %%mm4     \n\t"

            "punpckhdq             %%mm5, %%mm0     \n\t"

            "paddd                 %%mm0, %%mm4     \n\t"

            "psrad                    $7, %%mm4     \n\t"

            "packssdw              %%mm4, %%mm4     \n\t"

            "mov                      %3, %%"REG_a" \n\t"

            "movd                  %%mm4, (%%"REG_a", %0)   \n\t"

            "add                      $4, %0        \n\t"

            " jnc                     1b            \n\t"



            : "+r" (counter), "+r" (filter)

            : "m" (filterPos), "m" (dst), "m"(offset),

            "m" (src), "r" ((x86_reg)filterSize*2)

            : "%"REG_a, "%"REG_c, "%"REG_d

        );</asm>

    </block_content>}</block></else></if_stmt>

<cpp:else pos:start="307:1" pos:end="307:5">#<cpp:directive pos:start="307:2" pos:end="307:5">else</cpp:directive></cpp:else>

<cpp:if pos:start="309:1" pos:end="309:28">#<cpp:directive pos:start="309:2" pos:end="309:3">if</cpp:directive> <expr pos:start="309:5" pos:end="309:28"><name pos:start="309:5" pos:end="309:28">COMPILE_TEMPLATE_ALTIVEC</name></expr></cpp:if>

    <expr_stmt pos:start="311:5" pos:end="314:0"><expr pos:start="311:5" pos:end="311:82"><call pos:start="311:5" pos:end="311:82"><name pos:start="311:5" pos:end="311:23">hScale_altivec_real</name><argument_list pos:start="311:24" pos:end="311:82">(<argument pos:start="311:25" pos:end="311:27"><expr pos:start="311:25" pos:end="311:27"><name pos:start="311:25" pos:end="311:27">dst</name></expr></argument>, <argument pos:start="311:30" pos:end="311:33"><expr pos:start="311:30" pos:end="311:33"><name pos:start="311:30" pos:end="311:33">dstW</name></expr></argument>, <argument pos:start="311:36" pos:end="311:38"><expr pos:start="311:36" pos:end="311:38"><name pos:start="311:36" pos:end="311:38">src</name></expr></argument>, <argument pos:start="311:41" pos:end="311:44"><expr pos:start="311:41" pos:end="311:44"><name pos:start="311:41" pos:end="311:44">srcW</name></expr></argument>, <argument pos:start="311:47" pos:end="311:50"><expr pos:start="311:47" pos:end="311:50"><name pos:start="311:47" pos:end="311:50">xInc</name></expr></argument>, <argument pos:start="311:53" pos:end="311:58"><expr pos:start="311:53" pos:end="311:58"><name pos:start="311:53" pos:end="311:58">filter</name></expr></argument>, <argument pos:start="311:61" pos:end="311:69"><expr pos:start="311:61" pos:end="311:69"><name pos:start="311:61" pos:end="311:69">filterPos</name></expr></argument>, <argument pos:start="311:72" pos:end="311:81"><expr pos:start="311:72" pos:end="311:81"><name pos:start="311:72" pos:end="311:81">filterSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="313:1" pos:end="313:5">#<cpp:directive pos:start="313:2" pos:end="313:5">else</cpp:directive></cpp:else>

    <decl_stmt pos:start="315:5" pos:end="315:10"><decl pos:start="315:5" pos:end="315:9"><type pos:start="315:5" pos:end="315:7"><name pos:start="315:5" pos:end="315:7">int</name></type> <name pos:start="315:9" pos:end="315:9">i</name></decl>;</decl_stmt>

    <for pos:start="317:5" pos:end="346:0">for <control pos:start="317:9" pos:end="317:26">(<init pos:start="317:10" pos:end="317:13"><expr pos:start="317:10" pos:end="317:12"><name pos:start="317:10" pos:end="317:10">i</name><operator pos:start="317:11" pos:end="317:11">=</operator><literal type="number" pos:start="317:12" pos:end="317:12">0</literal></expr>;</init> <condition pos:start="317:15" pos:end="317:21"><expr pos:start="317:15" pos:end="317:20"><name pos:start="317:15" pos:end="317:15">i</name><operator pos:start="317:16" pos:end="317:16">&lt;</operator><name pos:start="317:17" pos:end="317:20">dstW</name></expr>;</condition> <incr pos:start="317:23" pos:end="317:25"><expr pos:start="317:23" pos:end="317:25"><name pos:start="317:23" pos:end="317:23">i</name><operator pos:start="317:24" pos:end="317:25">++</operator></expr></incr>)</control> <block pos:start="317:28" pos:end="346:0">{<block_content pos:start="319:9" pos:end="337:42">

        <decl_stmt pos:start="319:9" pos:end="319:14"><decl pos:start="319:9" pos:end="319:13"><type pos:start="319:9" pos:end="319:11"><name pos:start="319:9" pos:end="319:11">int</name></type> <name pos:start="319:13" pos:end="319:13">j</name></decl>;</decl_stmt>

        <decl_stmt pos:start="321:9" pos:end="321:33"><decl pos:start="321:9" pos:end="321:32"><type pos:start="321:9" pos:end="321:11"><name pos:start="321:9" pos:end="321:11">int</name></type> <name pos:start="321:13" pos:end="321:18">srcPos</name><init pos:start="321:19" pos:end="321:32">= <expr pos:start="321:21" pos:end="321:32"><name pos:start="321:21" pos:end="321:32"><name pos:start="321:21" pos:end="321:29">filterPos</name><index pos:start="321:30" pos:end="321:32">[<expr pos:start="321:31" pos:end="321:31"><name pos:start="321:31" pos:end="321:31">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="323:9" pos:end="323:18"><decl pos:start="323:9" pos:end="323:17"><type pos:start="323:9" pos:end="323:11"><name pos:start="323:9" pos:end="323:11">int</name></type> <name pos:start="323:13" pos:end="323:15">val</name><init pos:start="323:16" pos:end="323:17">=<expr pos:start="323:17" pos:end="323:17"><literal type="number" pos:start="323:17" pos:end="323:17">0</literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:start="325:9" pos:end="325:50">//printf("filterPos: %d\n", filterPos[i]);</comment>

        <for pos:start="327:9" pos:end="333:9">for <control pos:start="327:13" pos:end="327:36">(<init pos:start="327:14" pos:end="327:17"><expr pos:start="327:14" pos:end="327:16"><name pos:start="327:14" pos:end="327:14">j</name><operator pos:start="327:15" pos:end="327:15">=</operator><literal type="number" pos:start="327:16" pos:end="327:16">0</literal></expr>;</init> <condition pos:start="327:19" pos:end="327:31"><expr pos:start="327:19" pos:end="327:30"><name pos:start="327:19" pos:end="327:19">j</name><operator pos:start="327:20" pos:end="327:20">&lt;</operator><name pos:start="327:21" pos:end="327:30">filterSize</name></expr>;</condition> <incr pos:start="327:33" pos:end="327:35"><expr pos:start="327:33" pos:end="327:35"><name pos:start="327:33" pos:end="327:33">j</name><operator pos:start="327:34" pos:end="327:35">++</operator></expr></incr>)</control> <block pos:start="327:38" pos:end="333:9">{<block_content pos:start="331:13" pos:end="331:67">

            <comment type="line" pos:start="329:13" pos:end="329:74">//printf("filter: %d, src: %d\n", filter[i], src[srcPos + j]);</comment>

            <expr_stmt pos:start="331:13" pos:end="331:67"><expr pos:start="331:13" pos:end="331:66"><name pos:start="331:13" pos:end="331:15">val</name> <operator pos:start="331:17" pos:end="331:18">+=</operator> <operator pos:start="331:20" pos:end="331:20">(</operator><operator pos:start="331:21" pos:end="331:21">(</operator><name pos:start="331:22" pos:end="331:24">int</name><operator pos:start="331:25" pos:end="331:25">)</operator><name pos:start="331:26" pos:end="331:40"><name pos:start="331:26" pos:end="331:28">src</name><index pos:start="331:29" pos:end="331:40">[<expr pos:start="331:30" pos:end="331:39"><name pos:start="331:30" pos:end="331:35">srcPos</name> <operator pos:start="331:37" pos:end="331:37">+</operator> <name pos:start="331:39" pos:end="331:39">j</name></expr>]</index></name><operator pos:start="331:41" pos:end="331:41">)</operator><operator pos:start="331:42" pos:end="331:42">*</operator><name pos:start="331:43" pos:end="331:66"><name pos:start="331:43" pos:end="331:48">filter</name><index pos:start="331:49" pos:end="331:66">[<expr pos:start="331:50" pos:end="331:65"><name pos:start="331:50" pos:end="331:59">filterSize</name><operator pos:start="331:60" pos:end="331:60">*</operator><name pos:start="331:61" pos:end="331:61">i</name> <operator pos:start="331:63" pos:end="331:63">+</operator> <name pos:start="331:65" pos:end="331:65">j</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <comment type="line" pos:start="335:9" pos:end="335:32">//filter += hFilterSize;</comment>

        <expr_stmt pos:start="337:9" pos:end="337:42"><expr pos:start="337:9" pos:end="337:41"><name pos:start="337:9" pos:end="337:14"><name pos:start="337:9" pos:end="337:11">dst</name><index pos:start="337:12" pos:end="337:14">[<expr pos:start="337:13" pos:end="337:13"><name pos:start="337:13" pos:end="337:13">i</name></expr>]</index></name> <operator pos:start="337:16" pos:end="337:16">=</operator> <call pos:start="337:18" pos:end="337:41"><name pos:start="337:18" pos:end="337:22">FFMIN</name><argument_list pos:start="337:23" pos:end="337:41">(<argument pos:start="337:24" pos:end="337:29"><expr pos:start="337:24" pos:end="337:29"><name pos:start="337:24" pos:end="337:26">val</name><operator pos:start="337:27" pos:end="337:28">&gt;&gt;</operator><literal type="number" pos:start="337:29" pos:end="337:29">7</literal></expr></argument>, <argument pos:start="337:32" pos:end="337:40"><expr pos:start="337:32" pos:end="337:40"><operator pos:start="337:32" pos:end="337:32">(</operator><literal type="number" pos:start="337:33" pos:end="337:33">1</literal><operator pos:start="337:34" pos:end="337:35">&lt;&lt;</operator><literal type="number" pos:start="337:36" pos:end="337:37">15</literal><operator pos:start="337:38" pos:end="337:38">)</operator><operator pos:start="337:39" pos:end="337:39">-</operator><literal type="number" pos:start="337:40" pos:end="337:40">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="337:44" pos:end="337:82">// the cubic equation does overflow ...</comment>

        <comment type="line" pos:start="339:9" pos:end="339:26">//dst[i] = val&gt;&gt;7;</comment>

    </block_content>}</block></for>

<cpp:endif pos:start="343:1" pos:end="343:6">#<cpp:directive pos:start="343:2" pos:end="343:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="343:8" pos:end="343:37">/* COMPILE_TEMPLATE_ALTIVEC */</comment>

<cpp:endif pos:start="345:1" pos:end="345:6">#<cpp:directive pos:start="345:2" pos:end="345:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="345:8" pos:end="345:24">/* COMPILE_MMX */</comment>

</block_content>}</block></function>
</unit>
