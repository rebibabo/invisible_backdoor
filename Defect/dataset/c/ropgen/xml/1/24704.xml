<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24704.c" pos:tabs="8"><function pos:start="1:1" pos:end="95:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">ccid_handle_data</name><parameter_list pos:start="1:28" pos:end="1:57">(<parameter pos:start="1:29" pos:end="1:42"><decl pos:start="1:29" pos:end="1:42"><type pos:start="1:29" pos:end="1:42"><name pos:start="1:29" pos:end="1:37">USBDevice</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:42">dev</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:56"><decl pos:start="1:45" pos:end="1:56"><type pos:start="1:45" pos:end="1:56"><name pos:start="1:45" pos:end="1:53">USBPacket</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:56">p</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="95:1">{<block_content pos:start="5:5" pos:end="93:15">

    <decl_stmt pos:start="5:5" pos:end="5:56"><decl pos:start="5:5" pos:end="5:55"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">USBCCIDState</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:19">s</name> <init pos:start="5:21" pos:end="5:55">= <expr pos:start="5:23" pos:end="5:55"><call pos:start="5:23" pos:end="5:55"><name pos:start="5:23" pos:end="5:31">DO_UPCAST</name><argument_list pos:start="5:32" pos:end="5:55">(<argument pos:start="5:33" pos:end="5:44"><expr pos:start="5:33" pos:end="5:44"><name pos:start="5:33" pos:end="5:44">USBCCIDState</name></expr></argument>, <argument pos:start="5:47" pos:end="5:49"><expr pos:start="5:47" pos:end="5:49"><name pos:start="5:47" pos:end="5:49">dev</name></expr></argument>, <argument pos:start="5:52" pos:end="5:54"><expr pos:start="5:52" pos:end="5:54"><name pos:start="5:52" pos:end="5:54">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name> <init pos:start="7:13" pos:end="7:15">= <expr pos:start="7:15" pos:end="7:15"><literal type="number" pos:start="7:15" pos:end="7:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">uint8_t</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:17">data</name> <init pos:start="9:19" pos:end="9:27">= <expr pos:start="9:21" pos:end="9:27"><name pos:start="9:21" pos:end="9:27"><name pos:start="9:21" pos:end="9:21">p</name><operator pos:start="9:22" pos:end="9:23">-&gt;</operator><name pos:start="9:24" pos:end="9:27">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">len</name> <init pos:start="11:13" pos:end="11:20">= <expr pos:start="11:15" pos:end="11:20"><name pos:start="11:15" pos:end="11:20"><name pos:start="11:15" pos:end="11:15">p</name><operator pos:start="11:16" pos:end="11:17">-&gt;</operator><name pos:start="11:18" pos:end="11:20">len</name></name></expr></init></decl>;</decl_stmt>



    <switch pos:start="15:5" pos:end="89:5">switch <condition pos:start="15:12" pos:end="15:19">(<expr pos:start="15:13" pos:end="15:18"><name pos:start="15:13" pos:end="15:18"><name pos:start="15:13" pos:end="15:13">p</name><operator pos:start="15:14" pos:end="15:15">-&gt;</operator><name pos:start="15:16" pos:end="15:18">pid</name></name></expr>)</condition> <block pos:start="15:21" pos:end="89:5">{<block_content pos:start="17:5" pos:end="87:14">

    <case pos:start="17:5" pos:end="17:23">case <expr pos:start="17:10" pos:end="17:22"><name pos:start="17:10" pos:end="17:22">USB_TOKEN_OUT</name></expr>:</case>

        <expr_stmt pos:start="19:9" pos:end="19:41"><expr pos:start="19:9" pos:end="19:40"><name pos:start="19:9" pos:end="19:11">ret</name> <operator pos:start="19:13" pos:end="19:13">=</operator> <call pos:start="19:15" pos:end="19:40"><name pos:start="19:15" pos:end="19:34">ccid_handle_bulk_out</name><argument_list pos:start="19:35" pos:end="19:40">(<argument pos:start="19:36" pos:end="19:36"><expr pos:start="19:36" pos:end="19:36"><name pos:start="19:36" pos:end="19:36">s</name></expr></argument>, <argument pos:start="19:39" pos:end="19:39"><expr pos:start="19:39" pos:end="19:39"><name pos:start="19:39" pos:end="19:39">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="21:9" pos:end="21:14">break;</break>



    <case pos:start="25:5" pos:end="25:22">case <expr pos:start="25:10" pos:end="25:21"><name pos:start="25:10" pos:end="25:21">USB_TOKEN_IN</name></expr>:</case>

        <switch pos:start="27:9" pos:end="77:9">switch <condition pos:start="27:16" pos:end="27:31">(<expr pos:start="27:17" pos:end="27:30"><name pos:start="27:17" pos:end="27:24"><name pos:start="27:17" pos:end="27:17">p</name><operator pos:start="27:18" pos:end="27:19">-&gt;</operator><name pos:start="27:20" pos:end="27:24">devep</name></name> <operator pos:start="27:26" pos:end="27:26">&amp;</operator> <literal type="number" pos:start="27:28" pos:end="27:30">0xf</literal></expr>)</condition> <block pos:start="27:33" pos:end="77:9">{<block_content pos:start="29:9" pos:end="75:18">

        <case pos:start="29:9" pos:end="29:29">case <expr pos:start="29:14" pos:end="29:28"><name pos:start="29:14" pos:end="29:28">CCID_BULK_IN_EP</name></expr>:</case>

            <if_stmt pos:start="31:13" pos:end="39:13"><if pos:start="31:13" pos:end="35:13">if <condition pos:start="31:16" pos:end="31:21">(<expr pos:start="31:17" pos:end="31:20"><operator pos:start="31:17" pos:end="31:17">!</operator><name pos:start="31:18" pos:end="31:20">len</name></expr>)</condition> <block pos:start="31:23" pos:end="35:13">{<block_content pos:start="33:17" pos:end="33:34">

                <expr_stmt pos:start="33:17" pos:end="33:34"><expr pos:start="33:17" pos:end="33:33"><name pos:start="33:17" pos:end="33:19">ret</name> <operator pos:start="33:21" pos:end="33:21">=</operator> <name pos:start="33:23" pos:end="33:33">USB_RET_NAK</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="35:15" pos:end="39:13">else <block pos:start="35:20" pos:end="39:13">{<block_content pos:start="37:17" pos:end="37:63">

                <expr_stmt pos:start="37:17" pos:end="37:63"><expr pos:start="37:17" pos:end="37:62"><name pos:start="37:17" pos:end="37:19">ret</name> <operator pos:start="37:21" pos:end="37:21">=</operator> <call pos:start="37:23" pos:end="37:62"><name pos:start="37:23" pos:end="37:48">ccid_bulk_in_copy_to_guest</name><argument_list pos:start="37:49" pos:end="37:62">(<argument pos:start="37:50" pos:end="37:50"><expr pos:start="37:50" pos:end="37:50"><name pos:start="37:50" pos:end="37:50">s</name></expr></argument>, <argument pos:start="37:53" pos:end="37:56"><expr pos:start="37:53" pos:end="37:56"><name pos:start="37:53" pos:end="37:56">data</name></expr></argument>, <argument pos:start="37:59" pos:end="37:61"><expr pos:start="37:59" pos:end="37:61"><name pos:start="37:59" pos:end="37:61">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="41:13" pos:end="41:18">break;</break>

        <case pos:start="43:9" pos:end="43:28">case <expr pos:start="43:14" pos:end="43:27"><name pos:start="43:14" pos:end="43:27">CCID_INT_IN_EP</name></expr>:</case>

            <if_stmt pos:start="45:13" pos:end="67:13"><if pos:start="45:13" pos:end="67:13">if <condition pos:start="45:16" pos:end="45:38">(<expr pos:start="45:17" pos:end="45:37"><name pos:start="45:17" pos:end="45:37"><name pos:start="45:17" pos:end="45:17">s</name><operator pos:start="45:18" pos:end="45:19">-&gt;</operator><name pos:start="45:20" pos:end="45:37">notify_slot_change</name></name></expr>)</condition> <block pos:start="45:40" pos:end="67:13">{<block_content pos:start="49:17" pos:end="65:48">

                <comment type="block" pos:start="47:17" pos:end="47:57">/* page 56, RDR_to_PC_NotifySlotChange */</comment>

                <expr_stmt pos:start="49:17" pos:end="49:71"><expr pos:start="49:17" pos:end="49:70"><name pos:start="49:17" pos:end="49:23"><name pos:start="49:17" pos:end="49:20">data</name><index pos:start="49:21" pos:end="49:23">[<expr pos:start="49:22" pos:end="49:22"><literal type="number" pos:start="49:22" pos:end="49:22">0</literal></expr>]</index></name> <operator pos:start="49:25" pos:end="49:25">=</operator> <name pos:start="49:27" pos:end="49:70">CCID_MESSAGE_TYPE_RDR_to_PC_NotifySlotChange</name></expr>;</expr_stmt>

                <expr_stmt pos:start="51:17" pos:end="51:44"><expr pos:start="51:17" pos:end="51:43"><name pos:start="51:17" pos:end="51:23"><name pos:start="51:17" pos:end="51:20">data</name><index pos:start="51:21" pos:end="51:23">[<expr pos:start="51:22" pos:end="51:22"><literal type="number" pos:start="51:22" pos:end="51:22">1</literal></expr>]</index></name> <operator pos:start="51:25" pos:end="51:25">=</operator> <name pos:start="51:27" pos:end="51:43"><name pos:start="51:27" pos:end="51:27">s</name><operator pos:start="51:28" pos:end="51:29">-&gt;</operator><name pos:start="51:30" pos:end="51:43">bmSlotICCState</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="53:17" pos:end="53:24"><expr pos:start="53:17" pos:end="53:23"><name pos:start="53:17" pos:end="53:19">ret</name> <operator pos:start="53:21" pos:end="53:21">=</operator> <literal type="number" pos:start="53:23" pos:end="53:23">2</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="55:17" pos:end="55:46"><expr pos:start="55:17" pos:end="55:45"><name pos:start="55:17" pos:end="55:37"><name pos:start="55:17" pos:end="55:17">s</name><operator pos:start="55:18" pos:end="55:19">-&gt;</operator><name pos:start="55:20" pos:end="55:37">notify_slot_change</name></name> <operator pos:start="55:39" pos:end="55:39">=</operator> <name pos:start="55:41" pos:end="55:45">false</name></expr>;</expr_stmt>

                <expr_stmt pos:start="57:17" pos:end="57:58"><expr pos:start="57:17" pos:end="57:57"><name pos:start="57:17" pos:end="57:33"><name pos:start="57:17" pos:end="57:17">s</name><operator pos:start="57:18" pos:end="57:19">-&gt;</operator><name pos:start="57:20" pos:end="57:33">bmSlotICCState</name></name> <operator pos:start="57:35" pos:end="57:36">&amp;=</operator> <operator pos:start="57:38" pos:end="57:38">~</operator><name pos:start="57:39" pos:end="57:57">SLOT_0_CHANGED_MASK</name></expr>;</expr_stmt>

                <expr_stmt pos:start="59:17" pos:end="65:48"><expr pos:start="59:17" pos:end="65:47"><call pos:start="59:17" pos:end="65:47"><name pos:start="59:17" pos:end="59:23">DPRINTF</name><argument_list pos:start="59:24" pos:end="65:47">(<argument pos:start="59:25" pos:end="59:25"><expr pos:start="59:25" pos:end="59:25"><name pos:start="59:25" pos:end="59:25">s</name></expr></argument>, <argument pos:start="59:28" pos:end="59:33"><expr pos:start="59:28" pos:end="59:33"><name pos:start="59:28" pos:end="59:33">D_INFO</name></expr></argument>,

                        <argument pos:start="61:25" pos:end="63:44"><expr pos:start="61:25" pos:end="63:44"><literal type="string" pos:start="61:25" pos:end="61:70">"handle_data: int_in: notify_slot_change %X, "</literal>

                        <literal type="string" pos:start="63:25" pos:end="63:44">"requested len %d\n"</literal></expr></argument>,

                        <argument pos:start="65:25" pos:end="65:41"><expr pos:start="65:25" pos:end="65:41"><name pos:start="65:25" pos:end="65:41"><name pos:start="65:25" pos:end="65:25">s</name><operator pos:start="65:26" pos:end="65:27">-&gt;</operator><name pos:start="65:28" pos:end="65:41">bmSlotICCState</name></name></expr></argument>, <argument pos:start="65:44" pos:end="65:46"><expr pos:start="65:44" pos:end="65:46"><name pos:start="65:44" pos:end="65:46">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="69:13" pos:end="69:18">break;</break>

        <default pos:start="71:9" pos:end="71:16">default:</default>

            <expr_stmt pos:start="73:13" pos:end="73:44"><expr pos:start="73:13" pos:end="73:43"><call pos:start="73:13" pos:end="73:43"><name pos:start="73:13" pos:end="73:19">DPRINTF</name><argument_list pos:start="73:20" pos:end="73:43">(<argument pos:start="73:21" pos:end="73:21"><expr pos:start="73:21" pos:end="73:21"><name pos:start="73:21" pos:end="73:21">s</name></expr></argument>, <argument pos:start="73:24" pos:end="73:24"><expr pos:start="73:24" pos:end="73:24"><literal type="number" pos:start="73:24" pos:end="73:24">1</literal></expr></argument>, <argument pos:start="73:27" pos:end="73:42"><expr pos:start="73:27" pos:end="73:42"><literal type="string" pos:start="73:27" pos:end="73:42">"Bad endpoint\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="75:13" pos:end="75:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="79:9" pos:end="79:14">break;</break>

    <default pos:start="81:5" pos:end="81:12">default:</default>

        <expr_stmt pos:start="83:9" pos:end="83:37"><expr pos:start="83:9" pos:end="83:36"><call pos:start="83:9" pos:end="83:36"><name pos:start="83:9" pos:end="83:15">DPRINTF</name><argument_list pos:start="83:16" pos:end="83:36">(<argument pos:start="83:17" pos:end="83:17"><expr pos:start="83:17" pos:end="83:17"><name pos:start="83:17" pos:end="83:17">s</name></expr></argument>, <argument pos:start="83:20" pos:end="83:20"><expr pos:start="83:20" pos:end="83:20"><literal type="number" pos:start="83:20" pos:end="83:20">1</literal></expr></argument>, <argument pos:start="83:23" pos:end="83:35"><expr pos:start="83:23" pos:end="83:35"><literal type="string" pos:start="83:23" pos:end="83:35">"Bad token\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:28"><expr pos:start="85:9" pos:end="85:27"><name pos:start="85:9" pos:end="85:11">ret</name> <operator pos:start="85:13" pos:end="85:13">=</operator> <name pos:start="85:15" pos:end="85:27">USB_RET_STALL</name></expr>;</expr_stmt>

        <break pos:start="87:9" pos:end="87:14">break;</break>

    </block_content>}</block></switch>



    <return pos:start="93:5" pos:end="93:15">return <expr pos:start="93:12" pos:end="93:14"><name pos:start="93:12" pos:end="93:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
