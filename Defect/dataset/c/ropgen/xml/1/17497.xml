<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17497.c" pos:tabs="8"><function pos:start="1:1" pos:end="125:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">decode_i_frame</name><parameter_list pos:start="1:26" pos:end="1:90">(<parameter pos:start="1:27" pos:end="1:41"><decl pos:start="1:27" pos:end="1:41"><type pos:start="1:27" pos:end="1:41"><name pos:start="1:27" pos:end="1:38">FourXContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:41">f</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:57"><decl pos:start="1:44" pos:end="1:57"><type pos:start="1:44" pos:end="1:57"><name pos:start="1:44" pos:end="1:50">AVFrame</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:57">frame</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:77"><decl pos:start="1:60" pos:end="1:77"><type pos:start="1:60" pos:end="1:77"><specifier pos:start="1:60" pos:end="1:64">const</specifier> <name pos:start="1:66" pos:end="1:72">uint8_t</name> <modifier pos:start="1:74" pos:end="1:74">*</modifier></type><name pos:start="1:75" pos:end="1:77">buf</name></decl></parameter>, <parameter pos:start="1:80" pos:end="1:89"><decl pos:start="1:80" pos:end="1:89"><type pos:start="1:80" pos:end="1:89"><name pos:start="1:80" pos:end="1:82">int</name></type> <name pos:start="1:84" pos:end="1:89">length</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="125:1">{<block_content pos:start="5:5" pos:end="123:13">

    <decl_stmt pos:start="5:5" pos:end="5:18"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">x</name></decl>, <decl pos:start="5:12" pos:end="5:12"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:12">y</name></decl>, <decl pos:start="5:15" pos:end="5:17"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:15" pos:end="5:17">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:39"><decl pos:start="7:5" pos:end="7:38"><type pos:start="7:5" pos:end="7:13"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:13">int</name></type> <name pos:start="7:15" pos:end="7:19">width</name>  <init pos:start="7:22" pos:end="7:38">= <expr pos:start="7:24" pos:end="7:38"><name pos:start="7:24" pos:end="7:38"><name pos:start="7:24" pos:end="7:24">f</name><operator pos:start="7:25" pos:end="7:26">-&gt;</operator><name pos:start="7:27" pos:end="7:31">avctx</name><operator pos:start="7:32" pos:end="7:33">-&gt;</operator><name pos:start="7:34" pos:end="7:38">width</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:40"><decl pos:start="9:5" pos:end="9:39"><type pos:start="9:5" pos:end="9:13"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:13">int</name></type> <name pos:start="9:15" pos:end="9:20">height</name> <init pos:start="9:22" pos:end="9:39">= <expr pos:start="9:24" pos:end="9:39"><name pos:start="9:24" pos:end="9:39"><name pos:start="9:24" pos:end="9:24">f</name><operator pos:start="9:25" pos:end="9:26">-&gt;</operator><name pos:start="9:27" pos:end="9:31">avctx</name><operator pos:start="9:32" pos:end="9:33">-&gt;</operator><name pos:start="9:34" pos:end="9:39">height</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:53"><decl pos:start="11:5" pos:end="11:52"><type pos:start="11:5" pos:end="11:22"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:18">unsigned</name> <name pos:start="11:20" pos:end="11:22">int</name></type> <name pos:start="11:24" pos:end="11:37">bitstream_size</name> <init pos:start="11:39" pos:end="11:52">= <expr pos:start="11:41" pos:end="11:52"><call pos:start="11:41" pos:end="11:52"><name pos:start="11:41" pos:end="11:47">AV_RL32</name><argument_list pos:start="11:48" pos:end="11:52">(<argument pos:start="11:49" pos:end="11:51"><expr pos:start="11:49" pos:end="11:51"><name pos:start="11:49" pos:end="11:51">buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:30"><decl pos:start="13:5" pos:end="13:29"><type pos:start="13:5" pos:end="13:19"><name pos:start="13:5" pos:end="13:7">int</name> <name pos:start="13:9" pos:end="13:19">token_count</name></type> <name pos:start="13:21" pos:end="13:29">av_unused</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:32"><decl pos:start="15:5" pos:end="15:31"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:12">unsigned</name> <name pos:start="15:14" pos:end="15:16">int</name></type> <name pos:start="15:18" pos:end="15:31">prestream_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:29"><decl pos:start="17:5" pos:end="17:28"><type pos:start="17:5" pos:end="17:19"><specifier pos:start="17:5" pos:end="17:9">const</specifier> <name pos:start="17:11" pos:end="17:17">uint8_t</name> <modifier pos:start="17:19" pos:end="17:19">*</modifier></type><name pos:start="17:20" pos:end="17:28">prestream</name></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="27:5"><if pos:start="21:5" pos:end="27:5">if <condition pos:start="21:8" pos:end="21:37">(<expr pos:start="21:9" pos:end="21:36"><name pos:start="21:9" pos:end="21:14">length</name> <operator pos:start="21:16" pos:end="21:16">&lt;</operator> <name pos:start="21:18" pos:end="21:31">bitstream_size</name> <operator pos:start="21:33" pos:end="21:33">+</operator> <literal type="number" pos:start="21:35" pos:end="21:36">12</literal></expr>)</condition> <block pos:start="21:39" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:35">

        <expr_stmt pos:start="23:9" pos:end="23:66"><expr pos:start="23:9" pos:end="23:65"><call pos:start="23:9" pos:end="23:65"><name pos:start="23:9" pos:end="23:14">av_log</name><argument_list pos:start="23:15" pos:end="23:65">(<argument pos:start="23:16" pos:end="23:23"><expr pos:start="23:16" pos:end="23:23"><name pos:start="23:16" pos:end="23:23"><name pos:start="23:16" pos:end="23:16">f</name><operator pos:start="23:17" pos:end="23:18">-&gt;</operator><name pos:start="23:19" pos:end="23:23">avctx</name></name></expr></argument>, <argument pos:start="23:26" pos:end="23:37"><expr pos:start="23:26" pos:end="23:37"><name pos:start="23:26" pos:end="23:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="23:40" pos:end="23:64"><expr pos:start="23:40" pos:end="23:64"><literal type="string" pos:start="23:40" pos:end="23:64">"packet size too small\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="25:9" pos:end="25:35">return <expr pos:start="25:16" pos:end="25:34"><name pos:start="25:16" pos:end="25:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:59"><expr pos:start="31:5" pos:end="31:58"><name pos:start="31:5" pos:end="31:15">token_count</name>    <operator pos:start="31:20" pos:end="31:20">=</operator>     <call pos:start="31:26" pos:end="31:58"><name pos:start="31:26" pos:end="31:32">AV_RL32</name><argument_list pos:start="31:33" pos:end="31:58">(<argument pos:start="31:34" pos:end="31:57"><expr pos:start="31:34" pos:end="31:57"><name pos:start="31:34" pos:end="31:36">buf</name> <operator pos:start="31:38" pos:end="31:38">+</operator> <name pos:start="31:40" pos:end="31:53">bitstream_size</name> <operator pos:start="31:55" pos:end="31:55">+</operator> <literal type="number" pos:start="31:57" pos:end="31:57">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:59"><expr pos:start="33:5" pos:end="33:58"><name pos:start="33:5" pos:end="33:18">prestream_size</name> <operator pos:start="33:20" pos:end="33:20">=</operator> <literal type="number" pos:start="33:22" pos:end="33:22">4</literal> <operator pos:start="33:24" pos:end="33:24">*</operator> <call pos:start="33:26" pos:end="33:58"><name pos:start="33:26" pos:end="33:32">AV_RL32</name><argument_list pos:start="33:33" pos:end="33:58">(<argument pos:start="33:34" pos:end="33:57"><expr pos:start="33:34" pos:end="33:57"><name pos:start="33:34" pos:end="33:36">buf</name> <operator pos:start="33:38" pos:end="33:38">+</operator> <name pos:start="33:40" pos:end="33:53">bitstream_size</name> <operator pos:start="33:55" pos:end="33:55">+</operator> <literal type="number" pos:start="33:57" pos:end="33:57">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:59"><expr pos:start="35:5" pos:end="35:58"><name pos:start="35:5" pos:end="35:13">prestream</name>      <operator pos:start="35:20" pos:end="35:20">=</operator>             <name pos:start="35:34" pos:end="35:36">buf</name> <operator pos:start="35:38" pos:end="35:38">+</operator> <name pos:start="35:40" pos:end="35:53">bitstream_size</name> <operator pos:start="35:55" pos:end="35:55">+</operator> <literal type="number" pos:start="35:57" pos:end="35:58">12</literal></expr>;</expr_stmt>



    <if_stmt pos:start="39:5" pos:end="51:5"><if pos:start="39:5" pos:end="51:5">if <condition pos:start="39:8" pos:end="43:38">(<expr pos:start="39:9" pos:end="43:37"><name pos:start="39:9" pos:end="39:22">prestream_size</name> <operator pos:start="39:24" pos:end="39:24">+</operator> <name pos:start="39:26" pos:end="39:39">bitstream_size</name> <operator pos:start="39:41" pos:end="39:41">+</operator> <literal type="number" pos:start="39:43" pos:end="39:44">12</literal> <operator pos:start="39:46" pos:end="39:47">!=</operator> <name pos:start="39:49" pos:end="39:54">length</name>

        <operator pos:start="41:9" pos:end="41:10">||</operator> <name pos:start="41:12" pos:end="41:25">bitstream_size</name> <operator pos:start="41:27" pos:end="41:27">&gt;</operator> <operator pos:start="41:29" pos:end="41:29">(</operator><literal type="number" pos:start="41:30" pos:end="41:30">1</literal> <operator pos:start="41:32" pos:end="41:33">&lt;&lt;</operator> <literal type="number" pos:start="41:35" pos:end="41:36">26</literal><operator pos:start="41:37" pos:end="41:37">)</operator>

        <operator pos:start="43:9" pos:end="43:10">||</operator> <name pos:start="43:12" pos:end="43:25">prestream_size</name> <operator pos:start="43:27" pos:end="43:27">&gt;</operator> <operator pos:start="43:29" pos:end="43:29">(</operator><literal type="number" pos:start="43:30" pos:end="43:30">1</literal> <operator pos:start="43:32" pos:end="43:33">&lt;&lt;</operator> <literal type="number" pos:start="43:35" pos:end="43:36">26</literal><operator pos:start="43:37" pos:end="43:37">)</operator></expr>)</condition> <block pos:start="43:40" pos:end="51:5">{<block_content pos:start="45:9" pos:end="49:35">

        <expr_stmt pos:start="45:9" pos:end="47:55"><expr pos:start="45:9" pos:end="47:54"><call pos:start="45:9" pos:end="47:54"><name pos:start="45:9" pos:end="45:14">av_log</name><argument_list pos:start="45:15" pos:end="47:54">(<argument pos:start="45:16" pos:end="45:23"><expr pos:start="45:16" pos:end="45:23"><name pos:start="45:16" pos:end="45:23"><name pos:start="45:16" pos:end="45:16">f</name><operator pos:start="45:17" pos:end="45:18">-&gt;</operator><name pos:start="45:19" pos:end="45:23">avctx</name></name></expr></argument>, <argument pos:start="45:26" pos:end="45:37"><expr pos:start="45:26" pos:end="45:37"><name pos:start="45:26" pos:end="45:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="45:40" pos:end="45:65"><expr pos:start="45:40" pos:end="45:65"><literal type="string" pos:start="45:40" pos:end="45:65">"size mismatch %d %d %d\n"</literal></expr></argument>,

               <argument pos:start="47:16" pos:end="47:29"><expr pos:start="47:16" pos:end="47:29"><name pos:start="47:16" pos:end="47:29">prestream_size</name></expr></argument>, <argument pos:start="47:32" pos:end="47:45"><expr pos:start="47:32" pos:end="47:45"><name pos:start="47:32" pos:end="47:45">bitstream_size</name></expr></argument>, <argument pos:start="47:48" pos:end="47:53"><expr pos:start="47:48" pos:end="47:53"><name pos:start="47:48" pos:end="47:53">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="49:9" pos:end="49:35">return <expr pos:start="49:16" pos:end="49:34"><name pos:start="49:16" pos:end="49:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:66"><expr pos:start="55:5" pos:end="55:65"><name pos:start="55:5" pos:end="55:13">prestream</name> <operator pos:start="55:15" pos:end="55:15">=</operator> <call pos:start="55:17" pos:end="55:65"><name pos:start="55:17" pos:end="55:35">read_huffman_tables</name><argument_list pos:start="55:36" pos:end="55:65">(<argument pos:start="55:37" pos:end="55:37"><expr pos:start="55:37" pos:end="55:37"><name pos:start="55:37" pos:end="55:37">f</name></expr></argument>, <argument pos:start="55:40" pos:end="55:48"><expr pos:start="55:40" pos:end="55:48"><name pos:start="55:40" pos:end="55:48">prestream</name></expr></argument>, <argument pos:start="55:51" pos:end="55:64"><expr pos:start="55:51" pos:end="55:64"><name pos:start="55:51" pos:end="55:64">prestream_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="57:5" pos:end="63:5"><if pos:start="57:5" pos:end="63:5">if <condition pos:start="57:8" pos:end="57:19">(<expr pos:start="57:9" pos:end="57:18"><operator pos:start="57:9" pos:end="57:9">!</operator><name pos:start="57:10" pos:end="57:18">prestream</name></expr>)</condition> <block pos:start="57:21" pos:end="63:5">{<block_content pos:start="59:9" pos:end="61:35">

        <expr_stmt pos:start="59:9" pos:end="59:74"><expr pos:start="59:9" pos:end="59:73"><call pos:start="59:9" pos:end="59:73"><name pos:start="59:9" pos:end="59:14">av_log</name><argument_list pos:start="59:15" pos:end="59:73">(<argument pos:start="59:16" pos:end="59:23"><expr pos:start="59:16" pos:end="59:23"><name pos:start="59:16" pos:end="59:23"><name pos:start="59:16" pos:end="59:16">f</name><operator pos:start="59:17" pos:end="59:18">-&gt;</operator><name pos:start="59:19" pos:end="59:23">avctx</name></name></expr></argument>, <argument pos:start="59:26" pos:end="59:37"><expr pos:start="59:26" pos:end="59:37"><name pos:start="59:26" pos:end="59:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="59:40" pos:end="59:72"><expr pos:start="59:40" pos:end="59:72"><literal type="string" pos:start="59:40" pos:end="59:72">"Error reading Huffman tables.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="61:9" pos:end="61:35">return <expr pos:start="61:16" pos:end="61:34"><name pos:start="61:16" pos:end="61:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:55"><expr pos:start="67:5" pos:end="67:54"><call pos:start="67:5" pos:end="67:54"><name pos:start="67:5" pos:end="67:17">init_get_bits</name><argument_list pos:start="67:18" pos:end="67:54">(<argument pos:start="67:19" pos:end="67:24"><expr pos:start="67:19" pos:end="67:24"><operator pos:start="67:19" pos:end="67:19">&amp;</operator><name pos:start="67:20" pos:end="67:24"><name pos:start="67:20" pos:end="67:20">f</name><operator pos:start="67:21" pos:end="67:22">-&gt;</operator><name pos:start="67:23" pos:end="67:24">gb</name></name></expr></argument>, <argument pos:start="67:27" pos:end="67:33"><expr pos:start="67:27" pos:end="67:33"><name pos:start="67:27" pos:end="67:29">buf</name> <operator pos:start="67:31" pos:end="67:31">+</operator> <literal type="number" pos:start="67:33" pos:end="67:33">4</literal></expr></argument>, <argument pos:start="67:36" pos:end="67:53"><expr pos:start="67:36" pos:end="67:53"><literal type="number" pos:start="67:36" pos:end="67:36">8</literal> <operator pos:start="67:38" pos:end="67:38">*</operator> <name pos:start="67:40" pos:end="67:53">bitstream_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:46"><expr pos:start="71:5" pos:end="71:45"><name pos:start="71:5" pos:end="71:18">prestream_size</name> <operator pos:start="71:20" pos:end="71:20">=</operator> <name pos:start="71:22" pos:end="71:27">length</name> <operator pos:start="71:29" pos:end="71:29">+</operator> <name pos:start="71:31" pos:end="71:33">buf</name> <operator pos:start="71:35" pos:end="71:35">-</operator> <name pos:start="71:37" pos:end="71:45">prestream</name></expr>;</expr_stmt>



    <expr_stmt pos:start="75:5" pos:end="77:66"><expr pos:start="75:5" pos:end="77:65"><call pos:start="75:5" pos:end="77:65"><name pos:start="75:5" pos:end="75:18">av_fast_malloc</name><argument_list pos:start="75:19" pos:end="77:65">(<argument pos:start="75:20" pos:end="75:39"><expr pos:start="75:20" pos:end="75:39"><operator pos:start="75:20" pos:end="75:20">&amp;</operator><name pos:start="75:21" pos:end="75:39"><name pos:start="75:21" pos:end="75:21">f</name><operator pos:start="75:22" pos:end="75:23">-&gt;</operator><name pos:start="75:24" pos:end="75:39">bitstream_buffer</name></name></expr></argument>, <argument pos:start="75:42" pos:end="75:66"><expr pos:start="75:42" pos:end="75:66"><operator pos:start="75:42" pos:end="75:42">&amp;</operator><name pos:start="75:43" pos:end="75:66"><name pos:start="75:43" pos:end="75:43">f</name><operator pos:start="75:44" pos:end="75:45">-&gt;</operator><name pos:start="75:46" pos:end="75:66">bitstream_buffer_size</name></name></expr></argument>,

                   <argument pos:start="77:20" pos:end="77:64"><expr pos:start="77:20" pos:end="77:64"><name pos:start="77:20" pos:end="77:33">prestream_size</name> <operator pos:start="77:35" pos:end="77:35">+</operator> <name pos:start="77:37" pos:end="77:64">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="79:5" pos:end="81:31"><if pos:start="79:5" pos:end="81:31">if <condition pos:start="79:8" pos:end="79:29">(<expr pos:start="79:9" pos:end="79:28"><operator pos:start="79:9" pos:end="79:9">!</operator><name pos:start="79:10" pos:end="79:28"><name pos:start="79:10" pos:end="79:10">f</name><operator pos:start="79:11" pos:end="79:12">-&gt;</operator><name pos:start="79:13" pos:end="79:28">bitstream_buffer</name></name></expr>)</condition><block type="pseudo" pos:start="81:9" pos:end="81:31"><block_content pos:start="81:9" pos:end="81:31">

        <return pos:start="81:9" pos:end="81:31">return <expr pos:start="81:16" pos:end="81:30"><call pos:start="81:16" pos:end="81:30"><name pos:start="81:16" pos:end="81:22">AVERROR</name><argument_list pos:start="81:23" pos:end="81:30">(<argument pos:start="81:24" pos:end="81:29"><expr pos:start="81:24" pos:end="81:29"><name pos:start="81:24" pos:end="81:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="83:5" pos:end="85:41"><expr pos:start="83:5" pos:end="85:40"><call pos:start="83:5" pos:end="85:40"><name pos:start="83:5" pos:end="83:20"><name pos:start="83:5" pos:end="83:5">f</name><operator pos:start="83:6" pos:end="83:7">-&gt;</operator><name pos:start="83:8" pos:end="83:10">dsp</name><operator pos:start="83:11" pos:end="83:11">.</operator><name pos:start="83:12" pos:end="83:20">bswap_buf</name></name><argument_list pos:start="83:21" pos:end="85:40">(<argument pos:start="83:22" pos:end="83:40"><expr pos:start="83:22" pos:end="83:40"><name pos:start="83:22" pos:end="83:40"><name pos:start="83:22" pos:end="83:22">f</name><operator pos:start="83:23" pos:end="83:24">-&gt;</operator><name pos:start="83:25" pos:end="83:40">bitstream_buffer</name></name></expr></argument>, <argument pos:start="83:43" pos:end="83:68"><expr pos:start="83:43" pos:end="83:68"><operator pos:start="83:43" pos:end="83:43">(</operator><specifier pos:start="83:44" pos:end="83:48">const</specifier> <name pos:start="83:50" pos:end="83:57">uint32_t</name><operator pos:start="83:58" pos:end="83:58">*</operator><operator pos:start="83:59" pos:end="83:59">)</operator><name pos:start="83:60" pos:end="83:68">prestream</name></expr></argument>,

                     <argument pos:start="85:22" pos:end="85:39"><expr pos:start="85:22" pos:end="85:39"><name pos:start="85:22" pos:end="85:35">prestream_size</name> <operator pos:start="85:37" pos:end="85:37">/</operator> <literal type="number" pos:start="85:39" pos:end="85:39">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="89:44"><expr pos:start="87:5" pos:end="89:43"><call pos:start="87:5" pos:end="89:43"><name pos:start="87:5" pos:end="87:10">memset</name><argument_list pos:start="87:11" pos:end="89:43">(<argument pos:start="87:12" pos:end="87:57"><expr pos:start="87:12" pos:end="87:57"><operator pos:start="87:12" pos:end="87:12">(</operator><name pos:start="87:13" pos:end="87:19">uint8_t</name><operator pos:start="87:20" pos:end="87:20">*</operator><operator pos:start="87:21" pos:end="87:21">)</operator><name pos:start="87:22" pos:end="87:40"><name pos:start="87:22" pos:end="87:22">f</name><operator pos:start="87:23" pos:end="87:24">-&gt;</operator><name pos:start="87:25" pos:end="87:40">bitstream_buffer</name></name> <operator pos:start="87:42" pos:end="87:42">+</operator> <name pos:start="87:44" pos:end="87:57">prestream_size</name></expr></argument>,

           <argument pos:start="89:12" pos:end="89:12"><expr pos:start="89:12" pos:end="89:12"><literal type="number" pos:start="89:12" pos:end="89:12">0</literal></expr></argument>, <argument pos:start="89:15" pos:end="89:42"><expr pos:start="89:15" pos:end="89:42"><name pos:start="89:15" pos:end="89:42">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:71"><expr pos:start="91:5" pos:end="91:70"><call pos:start="91:5" pos:end="91:70"><name pos:start="91:5" pos:end="91:17">init_get_bits</name><argument_list pos:start="91:18" pos:end="91:70">(<argument pos:start="91:19" pos:end="91:28"><expr pos:start="91:19" pos:end="91:28"><operator pos:start="91:19" pos:end="91:19">&amp;</operator><name pos:start="91:20" pos:end="91:28"><name pos:start="91:20" pos:end="91:20">f</name><operator pos:start="91:21" pos:end="91:22">-&gt;</operator><name pos:start="91:23" pos:end="91:28">pre_gb</name></name></expr></argument>, <argument pos:start="91:31" pos:end="91:49"><expr pos:start="91:31" pos:end="91:49"><name pos:start="91:31" pos:end="91:49"><name pos:start="91:31" pos:end="91:31">f</name><operator pos:start="91:32" pos:end="91:33">-&gt;</operator><name pos:start="91:34" pos:end="91:49">bitstream_buffer</name></name></expr></argument>, <argument pos:start="91:52" pos:end="91:69"><expr pos:start="91:52" pos:end="91:69"><literal type="number" pos:start="91:52" pos:end="91:52">8</literal> <operator pos:start="91:54" pos:end="91:54">*</operator> <name pos:start="91:56" pos:end="91:69">prestream_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="95:5" pos:end="95:33"><expr pos:start="95:5" pos:end="95:32"><name pos:start="95:5" pos:end="95:14"><name pos:start="95:5" pos:end="95:5">f</name><operator pos:start="95:6" pos:end="95:7">-&gt;</operator><name pos:start="95:8" pos:end="95:14">last_dc</name></name> <operator pos:start="95:16" pos:end="95:16">=</operator> <literal type="number" pos:start="95:18" pos:end="95:18">0</literal> <operator pos:start="95:20" pos:end="95:20">*</operator> <literal type="number" pos:start="95:22" pos:end="95:24">128</literal> <operator pos:start="95:26" pos:end="95:26">*</operator> <literal type="number" pos:start="95:28" pos:end="95:28">8</literal> <operator pos:start="95:30" pos:end="95:30">*</operator> <literal type="number" pos:start="95:32" pos:end="95:32">8</literal></expr>;</expr_stmt>



    <for pos:start="99:5" pos:end="113:5">for <control pos:start="99:9" pos:end="99:36">(<init pos:start="99:10" pos:end="99:15"><expr pos:start="99:10" pos:end="99:14"><name pos:start="99:10" pos:end="99:10">y</name> <operator pos:start="99:12" pos:end="99:12">=</operator> <literal type="number" pos:start="99:14" pos:end="99:14">0</literal></expr>;</init> <condition pos:start="99:17" pos:end="99:27"><expr pos:start="99:17" pos:end="99:26"><name pos:start="99:17" pos:end="99:17">y</name> <operator pos:start="99:19" pos:end="99:19">&lt;</operator> <name pos:start="99:21" pos:end="99:26">height</name></expr>;</condition> <incr pos:start="99:29" pos:end="99:35"><expr pos:start="99:29" pos:end="99:35"><name pos:start="99:29" pos:end="99:29">y</name> <operator pos:start="99:31" pos:end="99:32">+=</operator> <literal type="number" pos:start="99:34" pos:end="99:35">16</literal></expr></incr>)</control> <block pos:start="99:38" pos:end="113:5">{<block_content pos:start="101:9" pos:end="111:9">

        <for pos:start="101:9" pos:end="111:9">for <control pos:start="101:13" pos:end="101:39">(<init pos:start="101:14" pos:end="101:19"><expr pos:start="101:14" pos:end="101:18"><name pos:start="101:14" pos:end="101:14">x</name> <operator pos:start="101:16" pos:end="101:16">=</operator> <literal type="number" pos:start="101:18" pos:end="101:18">0</literal></expr>;</init> <condition pos:start="101:21" pos:end="101:30"><expr pos:start="101:21" pos:end="101:29"><name pos:start="101:21" pos:end="101:21">x</name> <operator pos:start="101:23" pos:end="101:23">&lt;</operator> <name pos:start="101:25" pos:end="101:29">width</name></expr>;</condition> <incr pos:start="101:32" pos:end="101:38"><expr pos:start="101:32" pos:end="101:38"><name pos:start="101:32" pos:end="101:32">x</name> <operator pos:start="101:34" pos:end="101:35">+=</operator> <literal type="number" pos:start="101:37" pos:end="101:38">16</literal></expr></incr>)</control> <block pos:start="101:41" pos:end="111:9">{<block_content pos:start="103:13" pos:end="109:37">

            <if_stmt pos:start="103:13" pos:end="105:27"><if pos:start="103:13" pos:end="105:27">if <condition pos:start="103:16" pos:end="103:43">(<expr pos:start="103:17" pos:end="103:42"><operator pos:start="103:17" pos:end="103:17">(</operator><name pos:start="103:18" pos:end="103:20">ret</name> <operator pos:start="103:22" pos:end="103:22">=</operator> <call pos:start="103:24" pos:end="103:37"><name pos:start="103:24" pos:end="103:34">decode_i_mb</name><argument_list pos:start="103:35" pos:end="103:37">(<argument pos:start="103:36" pos:end="103:36"><expr pos:start="103:36" pos:end="103:36"><name pos:start="103:36" pos:end="103:36">f</name></expr></argument>)</argument_list></call><operator pos:start="103:38" pos:end="103:38">)</operator> <operator pos:start="103:40" pos:end="103:40">&lt;</operator> <literal type="number" pos:start="103:42" pos:end="103:42">0</literal></expr>)</condition><block type="pseudo" pos:start="105:17" pos:end="105:27"><block_content pos:start="105:17" pos:end="105:27">

                <return pos:start="105:17" pos:end="105:27">return <expr pos:start="105:24" pos:end="105:26"><name pos:start="105:24" pos:end="105:26">ret</name></expr>;</return></block_content></block></if></if_stmt>



            <expr_stmt pos:start="109:13" pos:end="109:37"><expr pos:start="109:13" pos:end="109:36"><call pos:start="109:13" pos:end="109:36"><name pos:start="109:13" pos:end="109:20">idct_put</name><argument_list pos:start="109:21" pos:end="109:36">(<argument pos:start="109:22" pos:end="109:22"><expr pos:start="109:22" pos:end="109:22"><name pos:start="109:22" pos:end="109:22">f</name></expr></argument>, <argument pos:start="109:25" pos:end="109:29"><expr pos:start="109:25" pos:end="109:29"><name pos:start="109:25" pos:end="109:29">frame</name></expr></argument>, <argument pos:start="109:32" pos:end="109:32"><expr pos:start="109:32" pos:end="109:32"><name pos:start="109:32" pos:end="109:32">x</name></expr></argument>, <argument pos:start="109:35" pos:end="109:35"><expr pos:start="109:35" pos:end="109:35"><name pos:start="109:35" pos:end="109:35">y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>



    <if_stmt pos:start="117:5" pos:end="119:57"><if pos:start="117:5" pos:end="119:57">if <condition pos:start="117:8" pos:end="117:72">(<expr pos:start="117:9" pos:end="117:71"><call pos:start="117:9" pos:end="117:64"><name pos:start="117:9" pos:end="117:16">get_vlc2</name><argument_list pos:start="117:17" pos:end="117:64">(<argument pos:start="117:18" pos:end="117:27"><expr pos:start="117:18" pos:end="117:27"><operator pos:start="117:18" pos:end="117:18">&amp;</operator><name pos:start="117:19" pos:end="117:27"><name pos:start="117:19" pos:end="117:19">f</name><operator pos:start="117:20" pos:end="117:21">-&gt;</operator><name pos:start="117:22" pos:end="117:27">pre_gb</name></name></expr></argument>, <argument pos:start="117:30" pos:end="117:45"><expr pos:start="117:30" pos:end="117:45"><name pos:start="117:30" pos:end="117:45"><name pos:start="117:30" pos:end="117:30">f</name><operator pos:start="117:31" pos:end="117:32">-&gt;</operator><name pos:start="117:33" pos:end="117:39">pre_vlc</name><operator pos:start="117:40" pos:end="117:40">.</operator><name pos:start="117:41" pos:end="117:45">table</name></name></expr></argument>, <argument pos:start="117:48" pos:end="117:60"><expr pos:start="117:48" pos:end="117:60"><name pos:start="117:48" pos:end="117:60">ACDC_VLC_BITS</name></expr></argument>, <argument pos:start="117:63" pos:end="117:63"><expr pos:start="117:63" pos:end="117:63"><literal type="number" pos:start="117:63" pos:end="117:63">3</literal></expr></argument>)</argument_list></call> <operator pos:start="117:66" pos:end="117:67">!=</operator> <literal type="number" pos:start="117:69" pos:end="117:71">256</literal></expr>)</condition><block type="pseudo" pos:start="119:9" pos:end="119:57"><block_content pos:start="119:9" pos:end="119:57">

        <expr_stmt pos:start="119:9" pos:end="119:57"><expr pos:start="119:9" pos:end="119:56"><call pos:start="119:9" pos:end="119:56"><name pos:start="119:9" pos:end="119:14">av_log</name><argument_list pos:start="119:15" pos:end="119:56">(<argument pos:start="119:16" pos:end="119:23"><expr pos:start="119:16" pos:end="119:23"><name pos:start="119:16" pos:end="119:23"><name pos:start="119:16" pos:end="119:16">f</name><operator pos:start="119:17" pos:end="119:18">-&gt;</operator><name pos:start="119:19" pos:end="119:23">avctx</name></name></expr></argument>, <argument pos:start="119:26" pos:end="119:37"><expr pos:start="119:26" pos:end="119:37"><name pos:start="119:26" pos:end="119:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="119:40" pos:end="119:55"><expr pos:start="119:40" pos:end="119:55"><literal type="string" pos:start="119:40" pos:end="119:55">"end mismatch\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <return pos:start="123:5" pos:end="123:13">return <expr pos:start="123:12" pos:end="123:12"><literal type="number" pos:start="123:12" pos:end="123:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
