<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22594.c" pos:tabs="8"><function pos:start="1:1" pos:end="305:1"><type pos:start="1:1" pos:end="1:17"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:17">int</name></type> <name pos:start="1:19" pos:end="1:38">vertClassify_altivec</name><parameter_list pos:start="1:39" pos:end="1:79">(<parameter pos:start="1:40" pos:end="1:52"><decl pos:start="1:40" pos:end="1:52"><type pos:start="1:40" pos:end="1:50"><name pos:start="1:40" pos:end="1:46">uint8_t</name></type> <name pos:start="1:48" pos:end="1:52"><name pos:start="1:48" pos:end="1:50">src</name><index pos:start="1:51" pos:end="1:52">[]</index></name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:64"><decl pos:start="1:55" pos:end="1:64"><type pos:start="1:55" pos:end="1:64"><name pos:start="1:55" pos:end="1:57">int</name></type> <name pos:start="1:59" pos:end="1:64">stride</name></decl></parameter>, <parameter pos:start="1:67" pos:end="1:78"><decl pos:start="1:67" pos:end="1:78"><type pos:start="1:67" pos:end="1:78"><name pos:start="1:67" pos:end="1:75">PPContext</name> <modifier pos:start="1:77" pos:end="1:77">*</modifier></type><name pos:start="1:78" pos:end="1:78">c</name></decl></parameter>)</parameter_list> <block pos:start="1:81" pos:end="305:1">{<block_content pos:start="15:5" pos:end="303:18">

    <comment type="block" pos:start="3:5" pos:end="13:6">/*

    this code makes no assumption on src or stride.

    One could remove the recomputation of the perm

    vector by assuming (stride % 16) == 0, unfortunately

    this is not always true.

    */</comment>

    <expr_stmt pos:start="15:5" pos:end="27:22"><expr pos:start="15:5" pos:end="27:21"><call pos:start="15:5" pos:end="15:36"><name pos:start="15:5" pos:end="15:19">DECLARE_ALIGNED</name><argument_list pos:start="15:20" pos:end="15:36">(<argument pos:start="15:21" pos:end="15:22"><expr pos:start="15:21" pos:end="15:22"><literal type="number" pos:start="15:21" pos:end="15:22">16</literal></expr></argument>, <argument pos:start="15:25" pos:end="15:29"><expr pos:start="15:25" pos:end="15:29"><name pos:start="15:25" pos:end="15:29">short</name></expr></argument>, <argument pos:start="15:32" pos:end="15:35"><expr pos:start="15:32" pos:end="15:35"><name pos:start="15:32" pos:end="15:35">data</name></expr></argument>)</argument_list></call><index pos:start="15:37" pos:end="15:39">[<expr pos:start="15:38" pos:end="15:38"><literal type="number" pos:start="15:38" pos:end="15:38">8</literal></expr>]</index> <operator pos:start="15:41" pos:end="15:41">=</operator>

                    <block pos:start="17:21" pos:end="27:21">{

                        <expr pos:start="19:25" pos:end="19:65"><operator pos:start="19:25" pos:end="19:25">(</operator><operator pos:start="19:26" pos:end="19:26">(</operator><name pos:start="19:27" pos:end="19:35"><name pos:start="19:27" pos:end="19:27">c</name><operator pos:start="19:28" pos:end="19:29">-&gt;</operator><name pos:start="19:30" pos:end="19:35">nonBQP</name></name><operator pos:start="19:36" pos:end="19:36">*</operator><name pos:start="19:37" pos:end="19:56"><name pos:start="19:37" pos:end="19:37">c</name><operator pos:start="19:38" pos:end="19:39">-&gt;</operator><name pos:start="19:40" pos:end="19:45">ppMode</name><operator pos:start="19:46" pos:end="19:46">.</operator><name pos:start="19:47" pos:end="19:56">baseDcDiff</name></name><operator pos:start="19:57" pos:end="19:57">)</operator><operator pos:start="19:58" pos:end="19:59">&gt;&gt;</operator><literal type="number" pos:start="19:60" pos:end="19:60">8</literal><operator pos:start="19:61" pos:end="19:61">)</operator> <operator pos:start="19:63" pos:end="19:63">+</operator> <literal type="number" pos:start="19:65" pos:end="19:65">1</literal></expr>,

                        <expr pos:start="21:25" pos:end="21:39"><name pos:start="21:25" pos:end="21:31"><name pos:start="21:25" pos:end="21:28">data</name><index pos:start="21:29" pos:end="21:31">[<expr pos:start="21:30" pos:end="21:30"><literal type="number" pos:start="21:30" pos:end="21:30">0</literal></expr>]</index></name> <operator pos:start="21:33" pos:end="21:33">*</operator> <literal type="number" pos:start="21:35" pos:end="21:37">2</literal> <operator pos:start="21:37" pos:end="21:37">+</operator> <literal type="number" pos:start="21:39" pos:end="21:39">1</literal></expr>,

                        <expr pos:start="23:25" pos:end="23:33"><name pos:start="23:25" pos:end="23:29"><name pos:start="23:25" pos:end="23:25">c</name><operator pos:start="23:26" pos:end="23:27">-&gt;</operator><name pos:start="23:28" pos:end="23:29">QP</name></name> <operator pos:start="23:31" pos:end="23:31">*</operator> <literal type="number" pos:start="23:33" pos:end="23:33">2</literal></expr>,

                        <expr pos:start="25:25" pos:end="25:33"><name pos:start="25:25" pos:end="25:29"><name pos:start="25:25" pos:end="25:25">c</name><operator pos:start="25:26" pos:end="25:27">-&gt;</operator><name pos:start="25:28" pos:end="25:29">QP</name></name> <operator pos:start="25:31" pos:end="25:31">*</operator> <literal type="number" pos:start="25:33" pos:end="25:33">4</literal></expr>

                    }</block></expr>;</expr_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:14"><decl pos:start="29:5" pos:end="29:13"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:13">numEq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:24"><decl pos:start="31:5" pos:end="31:23"><type pos:start="31:5" pos:end="31:13"><name pos:start="31:5" pos:end="31:11">uint8_t</name> <modifier pos:start="31:13" pos:end="31:13">*</modifier></type><name pos:start="31:14" pos:end="31:17">src2</name> <init pos:start="31:19" pos:end="31:23">= <expr pos:start="31:21" pos:end="31:23"><name pos:start="31:21" pos:end="31:23">src</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:35"><decl pos:start="33:5" pos:end="33:34"><type pos:start="33:5" pos:end="33:23"><name pos:start="33:5" pos:end="33:10">vector</name> <name pos:start="33:12" pos:end="33:17">signed</name> <name pos:start="33:19" pos:end="33:23">short</name></type> <name pos:start="33:25" pos:end="33:34">v_dcOffset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:29"><decl pos:start="35:5" pos:end="35:28"><type pos:start="35:5" pos:end="35:23"><name pos:start="35:5" pos:end="35:10">vector</name> <name pos:start="35:12" pos:end="35:17">signed</name> <name pos:start="35:19" pos:end="35:23">short</name></type> <name pos:start="35:25" pos:end="35:28">v2QP</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:31"><decl pos:start="37:5" pos:end="37:30"><type pos:start="37:5" pos:end="37:25"><name pos:start="37:5" pos:end="37:10">vector</name> <name pos:start="37:12" pos:end="37:19">unsigned</name> <name pos:start="37:21" pos:end="37:25">short</name></type> <name pos:start="37:27" pos:end="37:30">v4QP</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:40"><decl pos:start="39:5" pos:end="39:39"><type pos:start="39:5" pos:end="39:25"><name pos:start="39:5" pos:end="39:10">vector</name> <name pos:start="39:12" pos:end="39:19">unsigned</name> <name pos:start="39:21" pos:end="39:25">short</name></type> <name pos:start="39:27" pos:end="39:39">v_dcThreshold</name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:43"><decl pos:start="41:5" pos:end="41:42"><type pos:start="41:5" pos:end="41:13"><specifier pos:start="41:5" pos:end="41:9">const</specifier> <name pos:start="41:11" pos:end="41:13">int</name></type> <name pos:start="41:15" pos:end="41:26">properStride</name> <init pos:start="41:28" pos:end="41:42">= <expr pos:start="41:30" pos:end="41:42"><operator pos:start="41:30" pos:end="41:30">(</operator><name pos:start="41:31" pos:end="41:36">stride</name> <operator pos:start="41:38" pos:end="41:38">%</operator> <literal type="number" pos:start="41:40" pos:end="41:41">16</literal><operator pos:start="41:42" pos:end="41:42">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:52"><decl pos:start="43:5" pos:end="43:51"><type pos:start="43:5" pos:end="43:13"><specifier pos:start="43:5" pos:end="43:9">const</specifier> <name pos:start="43:11" pos:end="43:13">int</name></type> <name pos:start="43:15" pos:end="43:22">srcAlign</name> <init pos:start="43:24" pos:end="43:51">= <expr pos:start="43:26" pos:end="43:51"><operator pos:start="43:26" pos:end="43:26">(</operator><operator pos:start="43:27" pos:end="43:27">(</operator><name pos:start="43:28" pos:end="43:35">unsigned</name> <name pos:start="43:37" pos:end="43:40">long</name><operator pos:start="43:41" pos:end="43:41">)</operator><name pos:start="43:42" pos:end="43:45">src2</name> <operator pos:start="43:47" pos:end="43:47">%</operator> <literal type="number" pos:start="43:49" pos:end="43:50">16</literal><operator pos:start="43:51" pos:end="43:51">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:69"><decl pos:start="45:5" pos:end="45:68"><type pos:start="45:5" pos:end="45:13"><specifier pos:start="45:5" pos:end="45:9">const</specifier> <name pos:start="45:11" pos:end="45:13">int</name></type> <name pos:start="45:15" pos:end="45:25">two_vectors</name> <init pos:start="45:27" pos:end="45:68">= <expr pos:start="45:29" pos:end="45:68"><ternary pos:start="45:29" pos:end="45:68"><condition pos:start="45:29" pos:end="45:62"><expr pos:start="45:29" pos:end="45:60"><operator pos:start="45:29" pos:end="45:29">(</operator><operator pos:start="45:30" pos:end="45:30">(</operator><name pos:start="45:31" pos:end="45:38">srcAlign</name> <operator pos:start="45:40" pos:end="45:40">&gt;</operator> <literal type="number" pos:start="45:42" pos:end="45:42">8</literal><operator pos:start="45:43" pos:end="45:43">)</operator> <operator pos:start="45:45" pos:end="45:46">||</operator> <name pos:start="45:48" pos:end="45:59">properStride</name><operator pos:start="45:60" pos:end="45:60">)</operator></expr> ?</condition><then pos:start="45:64" pos:end="45:64"> <expr pos:start="45:64" pos:end="45:64"><literal type="number" pos:start="45:64" pos:end="45:64">1</literal></expr> </then><else pos:start="45:66" pos:end="45:68">: <expr pos:start="45:68" pos:end="45:68"><literal type="number" pos:start="45:68" pos:end="45:68">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:52"><decl pos:start="47:5" pos:end="47:51"><type pos:start="47:5" pos:end="47:27"><specifier pos:start="47:5" pos:end="47:9">const</specifier> <name pos:start="47:11" pos:end="47:16">vector</name> <name pos:start="47:18" pos:end="47:23">signed</name> <name pos:start="47:25" pos:end="47:27">int</name></type> <name pos:start="47:29" pos:end="47:32">zero</name> <init pos:start="47:34" pos:end="47:51">= <expr pos:start="47:36" pos:end="47:51"><call pos:start="47:36" pos:end="47:51"><name pos:start="47:36" pos:end="47:48">vec_splat_s32</name><argument_list pos:start="47:49" pos:end="47:51">(<argument pos:start="47:50" pos:end="47:50"><expr pos:start="47:50" pos:end="47:50"><literal type="number" pos:start="47:50" pos:end="47:50">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="49:5" pos:end="49:54"><decl pos:start="49:5" pos:end="49:53"><type pos:start="49:5" pos:end="49:29"><specifier pos:start="49:5" pos:end="49:9">const</specifier> <name pos:start="49:11" pos:end="49:16">vector</name> <name pos:start="49:18" pos:end="49:23">signed</name> <name pos:start="49:25" pos:end="49:29">short</name></type> <name pos:start="49:31" pos:end="49:34">mask</name> <init pos:start="49:36" pos:end="49:53">= <expr pos:start="49:38" pos:end="49:53"><call pos:start="49:38" pos:end="49:53"><name pos:start="49:38" pos:end="49:50">vec_splat_s16</name><argument_list pos:start="49:51" pos:end="49:53">(<argument pos:start="49:52" pos:end="49:52"><expr pos:start="49:52" pos:end="49:52"><literal type="number" pos:start="49:52" pos:end="49:52">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="51:5" pos:end="51:49"><decl pos:start="51:5" pos:end="51:48"><type pos:start="51:5" pos:end="51:21"><name pos:start="51:5" pos:end="51:10">vector</name> <name pos:start="51:12" pos:end="51:17">signed</name> <name pos:start="51:19" pos:end="51:21">int</name></type> <name pos:start="51:23" pos:end="51:29">v_numEq</name> <init pos:start="51:31" pos:end="51:48">= <expr pos:start="51:33" pos:end="51:48"><call pos:start="51:33" pos:end="51:48"><name pos:start="51:33" pos:end="51:45">vec_splat_s32</name><argument_list pos:start="51:46" pos:end="51:48">(<argument pos:start="51:47" pos:end="51:47"><expr pos:start="51:47" pos:end="51:47"><literal type="number" pos:start="51:47" pos:end="51:47">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="53:5" pos:end="53:49"><decl pos:start="53:5" pos:end="53:48"><type pos:start="53:5" pos:end="53:23"><name pos:start="53:5" pos:end="53:10">vector</name> <name pos:start="53:12" pos:end="53:17">signed</name> <name pos:start="53:19" pos:end="53:23">short</name></type> <name pos:start="53:25" pos:end="53:30">v_data</name> <init pos:start="53:32" pos:end="53:48">= <expr pos:start="53:34" pos:end="53:48"><call pos:start="53:34" pos:end="53:48"><name pos:start="53:34" pos:end="53:39">vec_ld</name><argument_list pos:start="53:40" pos:end="53:48">(<argument pos:start="53:41" pos:end="53:41"><expr pos:start="53:41" pos:end="53:41"><literal type="number" pos:start="53:41" pos:end="53:41">0</literal></expr></argument>, <argument pos:start="53:44" pos:end="53:47"><expr pos:start="53:44" pos:end="53:47"><name pos:start="53:44" pos:end="53:47">data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="55:5" pos:end="57:67"><decl pos:start="55:5" pos:end="55:33"><type pos:start="55:5" pos:end="55:23"><name pos:start="55:5" pos:end="55:10">vector</name> <name pos:start="55:12" pos:end="55:17">signed</name> <name pos:start="55:19" pos:end="55:23">short</name></type> <name pos:start="55:25" pos:end="55:33">v_srcAss0</name></decl>, <decl pos:start="55:36" pos:end="55:44"><type ref="prev" pos:start="55:5" pos:end="55:23"/><name pos:start="55:36" pos:end="55:44">v_srcAss1</name></decl>, <decl pos:start="55:47" pos:end="55:55"><type ref="prev" pos:start="55:5" pos:end="55:23"/><name pos:start="55:47" pos:end="55:55">v_srcAss2</name></decl>, <decl pos:start="55:58" pos:end="55:66"><type ref="prev" pos:start="55:5" pos:end="55:23"/><name pos:start="55:58" pos:end="55:66">v_srcAss3</name></decl>,

                        <decl pos:start="57:25" pos:end="57:33"><type ref="prev" pos:start="55:5" pos:end="55:23"/><name pos:start="57:25" pos:end="57:33">v_srcAss4</name></decl>, <decl pos:start="57:36" pos:end="57:44"><type ref="prev" pos:start="55:5" pos:end="55:23"/><name pos:start="57:36" pos:end="57:44">v_srcAss5</name></decl>, <decl pos:start="57:47" pos:end="57:55"><type ref="prev" pos:start="55:5" pos:end="55:23"/><name pos:start="57:47" pos:end="57:55">v_srcAss6</name></decl>, <decl pos:start="57:58" pos:end="57:66"><type ref="prev" pos:start="55:5" pos:end="55:23"/><name pos:start="57:58" pos:end="57:66">v_srcAss7</name></decl>;</decl_stmt>

<comment type="line" pos:start="59:1" pos:end="59:35">//FIXME avoid this mess if possible</comment>

    <decl_stmt pos:start="61:5" pos:end="75:33"><decl pos:start="61:5" pos:end="61:23"><type pos:start="61:5" pos:end="61:16"><specifier pos:start="61:5" pos:end="61:12">register</specifier> <name pos:start="61:14" pos:end="61:16">int</name></type> <name pos:start="61:18" pos:end="61:19">j0</name> <init pos:start="61:21" pos:end="61:23">= <expr pos:start="61:23" pos:end="61:23"><literal type="number" pos:start="61:23" pos:end="61:23">0</literal></expr></init></decl>,

                 <decl pos:start="63:18" pos:end="63:28"><type ref="prev" pos:start="61:5" pos:end="61:16"/><name pos:start="63:18" pos:end="63:19">j1</name> <init pos:start="63:21" pos:end="63:28">= <expr pos:start="63:23" pos:end="63:28"><name pos:start="63:23" pos:end="63:28">stride</name></expr></init></decl>,

                 <decl pos:start="65:18" pos:end="65:32"><type ref="prev" pos:start="61:5" pos:end="61:16"/><name pos:start="65:18" pos:end="65:19">j2</name> <init pos:start="65:21" pos:end="65:32">= <expr pos:start="65:23" pos:end="65:32"><literal type="number" pos:start="65:23" pos:end="65:23">2</literal> <operator pos:start="65:25" pos:end="65:25">*</operator> <name pos:start="65:27" pos:end="65:32">stride</name></expr></init></decl>,

                 <decl pos:start="67:18" pos:end="67:32"><type ref="prev" pos:start="61:5" pos:end="61:16"/><name pos:start="67:18" pos:end="67:19">j3</name> <init pos:start="67:21" pos:end="67:32">= <expr pos:start="67:23" pos:end="67:32"><literal type="number" pos:start="67:23" pos:end="67:23">3</literal> <operator pos:start="67:25" pos:end="67:25">*</operator> <name pos:start="67:27" pos:end="67:32">stride</name></expr></init></decl>,

                 <decl pos:start="69:18" pos:end="69:32"><type ref="prev" pos:start="61:5" pos:end="61:16"/><name pos:start="69:18" pos:end="69:19">j4</name> <init pos:start="69:21" pos:end="69:32">= <expr pos:start="69:23" pos:end="69:32"><literal type="number" pos:start="69:23" pos:end="69:23">4</literal> <operator pos:start="69:25" pos:end="69:25">*</operator> <name pos:start="69:27" pos:end="69:32">stride</name></expr></init></decl>,

                 <decl pos:start="71:18" pos:end="71:32"><type ref="prev" pos:start="61:5" pos:end="61:16"/><name pos:start="71:18" pos:end="71:19">j5</name> <init pos:start="71:21" pos:end="71:32">= <expr pos:start="71:23" pos:end="71:32"><literal type="number" pos:start="71:23" pos:end="71:23">5</literal> <operator pos:start="71:25" pos:end="71:25">*</operator> <name pos:start="71:27" pos:end="71:32">stride</name></expr></init></decl>,

                 <decl pos:start="73:18" pos:end="73:32"><type ref="prev" pos:start="61:5" pos:end="61:16"/><name pos:start="73:18" pos:end="73:19">j6</name> <init pos:start="73:21" pos:end="73:32">= <expr pos:start="73:23" pos:end="73:32"><literal type="number" pos:start="73:23" pos:end="73:23">6</literal> <operator pos:start="73:25" pos:end="73:25">*</operator> <name pos:start="73:27" pos:end="73:32">stride</name></expr></init></decl>,

                 <decl pos:start="75:18" pos:end="75:32"><type ref="prev" pos:start="61:5" pos:end="61:16"/><name pos:start="75:18" pos:end="75:19">j7</name> <init pos:start="75:21" pos:end="75:32">= <expr pos:start="75:23" pos:end="75:32"><literal type="number" pos:start="75:23" pos:end="75:23">7</literal> <operator pos:start="75:25" pos:end="75:25">*</operator> <name pos:start="75:27" pos:end="75:32">stride</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="77:5" pos:end="79:60"><decl pos:start="77:5" pos:end="77:32"><type pos:start="77:5" pos:end="77:24"><name pos:start="77:5" pos:end="77:10">vector</name> <name pos:start="77:12" pos:end="77:19">unsigned</name> <name pos:start="77:21" pos:end="77:24">char</name></type> <name pos:start="77:26" pos:end="77:32">v_srcA0</name></decl>, <decl pos:start="77:35" pos:end="77:41"><type ref="prev" pos:start="77:5" pos:end="77:24"/><name pos:start="77:35" pos:end="77:41">v_srcA1</name></decl>, <decl pos:start="77:44" pos:end="77:50"><type ref="prev" pos:start="77:5" pos:end="77:24"/><name pos:start="77:44" pos:end="77:50">v_srcA2</name></decl>, <decl pos:start="77:53" pos:end="77:59"><type ref="prev" pos:start="77:5" pos:end="77:24"/><name pos:start="77:53" pos:end="77:59">v_srcA3</name></decl>,

                         <decl pos:start="79:26" pos:end="79:32"><type ref="prev" pos:start="77:5" pos:end="77:24"/><name pos:start="79:26" pos:end="79:32">v_srcA4</name></decl>, <decl pos:start="79:35" pos:end="79:41"><type ref="prev" pos:start="77:5" pos:end="77:24"/><name pos:start="79:35" pos:end="79:41">v_srcA5</name></decl>, <decl pos:start="79:44" pos:end="79:50"><type ref="prev" pos:start="77:5" pos:end="77:24"/><name pos:start="79:44" pos:end="79:50">v_srcA6</name></decl>, <decl pos:start="79:53" pos:end="79:59"><type ref="prev" pos:start="77:5" pos:end="77:24"/><name pos:start="79:53" pos:end="79:59">v_srcA7</name></decl>;</decl_stmt>



    <expr_stmt pos:start="83:5" pos:end="83:38"><expr pos:start="83:5" pos:end="83:37"><name pos:start="83:5" pos:end="83:14">v_dcOffset</name> <operator pos:start="83:16" pos:end="83:16">=</operator> <call pos:start="83:18" pos:end="83:37"><name pos:start="83:18" pos:end="83:26">vec_splat</name><argument_list pos:start="83:27" pos:end="83:37">(<argument pos:start="83:28" pos:end="83:33"><expr pos:start="83:28" pos:end="83:33"><name pos:start="83:28" pos:end="83:33">v_data</name></expr></argument>, <argument pos:start="83:36" pos:end="83:36"><expr pos:start="83:36" pos:end="83:36"><literal type="number" pos:start="83:36" pos:end="83:36">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:64"><expr pos:start="85:5" pos:end="85:63"><name pos:start="85:5" pos:end="85:17">v_dcThreshold</name> <operator pos:start="85:19" pos:end="85:19">=</operator> <operator pos:start="85:21" pos:end="85:21">(</operator><name pos:start="85:22" pos:end="85:27">vector</name> <name pos:start="85:29" pos:end="85:36">unsigned</name> <name pos:start="85:38" pos:end="85:42">short</name><operator pos:start="85:43" pos:end="85:43">)</operator><call pos:start="85:44" pos:end="85:63"><name pos:start="85:44" pos:end="85:52">vec_splat</name><argument_list pos:start="85:53" pos:end="85:63">(<argument pos:start="85:54" pos:end="85:59"><expr pos:start="85:54" pos:end="85:59"><name pos:start="85:54" pos:end="85:59">v_data</name></expr></argument>, <argument pos:start="85:62" pos:end="85:62"><expr pos:start="85:62" pos:end="85:62"><literal type="number" pos:start="85:62" pos:end="85:62">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:32"><expr pos:start="87:5" pos:end="87:31"><name pos:start="87:5" pos:end="87:8">v2QP</name> <operator pos:start="87:10" pos:end="87:10">=</operator> <call pos:start="87:12" pos:end="87:31"><name pos:start="87:12" pos:end="87:20">vec_splat</name><argument_list pos:start="87:21" pos:end="87:31">(<argument pos:start="87:22" pos:end="87:27"><expr pos:start="87:22" pos:end="87:27"><name pos:start="87:22" pos:end="87:27">v_data</name></expr></argument>, <argument pos:start="87:30" pos:end="87:30"><expr pos:start="87:30" pos:end="87:30"><literal type="number" pos:start="87:30" pos:end="87:30">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:55"><expr pos:start="89:5" pos:end="89:54"><name pos:start="89:5" pos:end="89:8">v4QP</name> <operator pos:start="89:10" pos:end="89:10">=</operator> <operator pos:start="89:12" pos:end="89:12">(</operator><name pos:start="89:13" pos:end="89:18">vector</name> <name pos:start="89:20" pos:end="89:27">unsigned</name> <name pos:start="89:29" pos:end="89:33">short</name><operator pos:start="89:34" pos:end="89:34">)</operator><call pos:start="89:35" pos:end="89:54"><name pos:start="89:35" pos:end="89:43">vec_splat</name><argument_list pos:start="89:44" pos:end="89:54">(<argument pos:start="89:45" pos:end="89:50"><expr pos:start="89:45" pos:end="89:50"><name pos:start="89:45" pos:end="89:50">v_data</name></expr></argument>, <argument pos:start="89:53" pos:end="89:53"><expr pos:start="89:53" pos:end="89:53"><literal type="number" pos:start="89:53" pos:end="89:53">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="93:5" pos:end="132:0"><expr pos:start="93:5" pos:end="93:22"><name pos:start="93:5" pos:end="93:8">src2</name> <operator pos:start="93:10" pos:end="93:11">+=</operator> <name pos:start="93:13" pos:end="93:18">stride</name> <operator pos:start="93:20" pos:end="93:20">*</operator> <literal type="number" pos:start="93:22" pos:end="93:22">4</literal></expr>;</expr_stmt>



<cpp:define pos:start="97:1" pos:end="119:73">#<cpp:directive pos:start="97:2" pos:end="97:7">define</cpp:directive> <cpp:macro pos:start="97:9" pos:end="97:20"><name pos:start="97:9" pos:end="97:17">LOAD_LINE</name><parameter_list pos:start="97:18" pos:end="97:20">(<parameter pos:start="97:19" pos:end="97:19"><type pos:start="97:19" pos:end="97:19"><name pos:start="97:19" pos:end="97:19">i</name></type></parameter>)</parameter_list></cpp:macro>                                                    \

    <cpp:value pos:start="99:5" pos:end="119:73">{                                                                   \

    vector unsigned char perm##i = vec_lvsl(j##i, src2);                \

    vector unsigned char v_srcA2##i;                                    \

    vector unsigned char v_srcA1##i = vec_ld(j##i, src2);               \

    if (two_vectors)                                                    \

        v_srcA2##i = vec_ld(j##i + 16, src2);                           \

    v_srcA##i =                                                         \

        vec_perm(v_srcA1##i, v_srcA2##i, perm##i);                      \

    v_srcAss##i =                                                       \

        (vector signed short)vec_mergeh((vector signed char)zero,       \

                                        (vector signed char)v_srcA##i); }</cpp:value></cpp:define>



<cpp:define pos:start="123:1" pos:end="131:70">#<cpp:directive pos:start="123:2" pos:end="123:7">define</cpp:directive> <cpp:macro pos:start="123:9" pos:end="123:28"><name pos:start="123:9" pos:end="123:25">LOAD_LINE_ALIGNED</name><parameter_list pos:start="123:26" pos:end="123:28">(<parameter pos:start="123:27" pos:end="123:27"><type pos:start="123:27" pos:end="123:27"><name pos:start="123:27" pos:end="123:27">i</name></type></parameter>)</parameter_list></cpp:macro>                                            \

    <cpp:value pos:start="125:5" pos:end="131:70">v_srcA##i = vec_ld(j##i, src2);                                     \

    v_srcAss##i =                                                       \

        (vector signed short)vec_mergeh((vector signed char)zero,       \

                                        (vector signed char)v_srcA##i)</cpp:value></cpp:define>



    <comment type="block" pos:start="135:5" pos:end="139:53">/* Special-casing the aligned case is worthwhile, as all calls from

     * the (transposed) horizontable deblocks will be aligned, in addition

     * to the naturally aligned vertical deblocks. */</comment>

    <if_stmt pos:start="141:5" pos:end="202:0"><if pos:start="141:5" pos:end="159:5">if <condition pos:start="141:8" pos:end="141:33">(<expr pos:start="141:9" pos:end="141:32"><name pos:start="141:9" pos:end="141:20">properStride</name> <operator pos:start="141:22" pos:end="141:23">&amp;&amp;</operator> <name pos:start="141:25" pos:end="141:32">srcAlign</name></expr>)</condition> <block pos:start="141:35" pos:end="159:5">{<block_content pos:start="143:9" pos:end="157:29">

        <expr_stmt pos:start="143:9" pos:end="143:29"><expr pos:start="143:9" pos:end="143:28"><call pos:start="143:9" pos:end="143:28"><name pos:start="143:9" pos:end="143:25">LOAD_LINE_ALIGNED</name><argument_list pos:start="143:26" pos:end="143:28">(<argument pos:start="143:27" pos:end="143:27"><expr pos:start="143:27" pos:end="143:27"><literal type="number" pos:start="143:27" pos:end="143:27">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:29"><expr pos:start="145:9" pos:end="145:28"><call pos:start="145:9" pos:end="145:28"><name pos:start="145:9" pos:end="145:25">LOAD_LINE_ALIGNED</name><argument_list pos:start="145:26" pos:end="145:28">(<argument pos:start="145:27" pos:end="145:27"><expr pos:start="145:27" pos:end="145:27"><literal type="number" pos:start="145:27" pos:end="145:27">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:29"><expr pos:start="147:9" pos:end="147:28"><call pos:start="147:9" pos:end="147:28"><name pos:start="147:9" pos:end="147:25">LOAD_LINE_ALIGNED</name><argument_list pos:start="147:26" pos:end="147:28">(<argument pos:start="147:27" pos:end="147:27"><expr pos:start="147:27" pos:end="147:27"><literal type="number" pos:start="147:27" pos:end="147:27">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:29"><expr pos:start="149:9" pos:end="149:28"><call pos:start="149:9" pos:end="149:28"><name pos:start="149:9" pos:end="149:25">LOAD_LINE_ALIGNED</name><argument_list pos:start="149:26" pos:end="149:28">(<argument pos:start="149:27" pos:end="149:27"><expr pos:start="149:27" pos:end="149:27"><literal type="number" pos:start="149:27" pos:end="149:27">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:29"><expr pos:start="151:9" pos:end="151:28"><call pos:start="151:9" pos:end="151:28"><name pos:start="151:9" pos:end="151:25">LOAD_LINE_ALIGNED</name><argument_list pos:start="151:26" pos:end="151:28">(<argument pos:start="151:27" pos:end="151:27"><expr pos:start="151:27" pos:end="151:27"><literal type="number" pos:start="151:27" pos:end="151:27">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:29"><expr pos:start="153:9" pos:end="153:28"><call pos:start="153:9" pos:end="153:28"><name pos:start="153:9" pos:end="153:25">LOAD_LINE_ALIGNED</name><argument_list pos:start="153:26" pos:end="153:28">(<argument pos:start="153:27" pos:end="153:27"><expr pos:start="153:27" pos:end="153:27"><literal type="number" pos:start="153:27" pos:end="153:27">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:29"><expr pos:start="155:9" pos:end="155:28"><call pos:start="155:9" pos:end="155:28"><name pos:start="155:9" pos:end="155:25">LOAD_LINE_ALIGNED</name><argument_list pos:start="155:26" pos:end="155:28">(<argument pos:start="155:27" pos:end="155:27"><expr pos:start="155:27" pos:end="155:27"><literal type="number" pos:start="155:27" pos:end="155:27">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="157:9" pos:end="157:29"><expr pos:start="157:9" pos:end="157:28"><call pos:start="157:9" pos:end="157:28"><name pos:start="157:9" pos:end="157:25">LOAD_LINE_ALIGNED</name><argument_list pos:start="157:26" pos:end="157:28">(<argument pos:start="157:27" pos:end="157:27"><expr pos:start="157:27" pos:end="157:27"><literal type="number" pos:start="157:27" pos:end="157:27">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="159:7" pos:end="202:0">else <block pos:start="159:12" pos:end="202:0">{<block_content pos:start="161:9" pos:end="175:21">

        <expr_stmt pos:start="161:9" pos:end="161:21"><expr pos:start="161:9" pos:end="161:20"><call pos:start="161:9" pos:end="161:20"><name pos:start="161:9" pos:end="161:17">LOAD_LINE</name><argument_list pos:start="161:18" pos:end="161:20">(<argument pos:start="161:19" pos:end="161:19"><expr pos:start="161:19" pos:end="161:19"><literal type="number" pos:start="161:19" pos:end="161:19">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:21"><expr pos:start="163:9" pos:end="163:20"><call pos:start="163:9" pos:end="163:20"><name pos:start="163:9" pos:end="163:17">LOAD_LINE</name><argument_list pos:start="163:18" pos:end="163:20">(<argument pos:start="163:19" pos:end="163:19"><expr pos:start="163:19" pos:end="163:19"><literal type="number" pos:start="163:19" pos:end="163:19">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="165:9" pos:end="165:21"><expr pos:start="165:9" pos:end="165:20"><call pos:start="165:9" pos:end="165:20"><name pos:start="165:9" pos:end="165:17">LOAD_LINE</name><argument_list pos:start="165:18" pos:end="165:20">(<argument pos:start="165:19" pos:end="165:19"><expr pos:start="165:19" pos:end="165:19"><literal type="number" pos:start="165:19" pos:end="165:19">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="167:9" pos:end="167:21"><expr pos:start="167:9" pos:end="167:20"><call pos:start="167:9" pos:end="167:20"><name pos:start="167:9" pos:end="167:17">LOAD_LINE</name><argument_list pos:start="167:18" pos:end="167:20">(<argument pos:start="167:19" pos:end="167:19"><expr pos:start="167:19" pos:end="167:19"><literal type="number" pos:start="167:19" pos:end="167:19">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="169:9" pos:end="169:21"><expr pos:start="169:9" pos:end="169:20"><call pos:start="169:9" pos:end="169:20"><name pos:start="169:9" pos:end="169:17">LOAD_LINE</name><argument_list pos:start="169:18" pos:end="169:20">(<argument pos:start="169:19" pos:end="169:19"><expr pos:start="169:19" pos:end="169:19"><literal type="number" pos:start="169:19" pos:end="169:19">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:21"><expr pos:start="171:9" pos:end="171:20"><call pos:start="171:9" pos:end="171:20"><name pos:start="171:9" pos:end="171:17">LOAD_LINE</name><argument_list pos:start="171:18" pos:end="171:20">(<argument pos:start="171:19" pos:end="171:19"><expr pos:start="171:19" pos:end="171:19"><literal type="number" pos:start="171:19" pos:end="171:19">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:21"><expr pos:start="173:9" pos:end="173:20"><call pos:start="173:9" pos:end="173:20"><name pos:start="173:9" pos:end="173:17">LOAD_LINE</name><argument_list pos:start="173:18" pos:end="173:20">(<argument pos:start="173:19" pos:end="173:19"><expr pos:start="173:19" pos:end="173:19"><literal type="number" pos:start="173:19" pos:end="173:19">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="175:9" pos:end="175:21"><expr pos:start="175:9" pos:end="175:20"><call pos:start="175:9" pos:end="175:20"><name pos:start="175:9" pos:end="175:17">LOAD_LINE</name><argument_list pos:start="175:18" pos:end="175:20">(<argument pos:start="175:19" pos:end="175:19"><expr pos:start="175:19" pos:end="175:19"><literal type="number" pos:start="175:19" pos:end="175:19">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

<cpp:undef pos:start="179:1" pos:end="179:16">#<cpp:directive pos:start="179:2" pos:end="179:6">undef</cpp:directive> <name pos:start="179:8" pos:end="179:16">LOAD_LINE</name></cpp:undef>

<cpp:undef pos:start="181:1" pos:end="181:24">#<cpp:directive pos:start="181:2" pos:end="181:6">undef</cpp:directive> <name pos:start="181:8" pos:end="181:24">LOAD_LINE_ALIGNED</name></cpp:undef>



<cpp:define pos:start="185:1" pos:end="201:67">#<cpp:directive pos:start="185:2" pos:end="185:7">define</cpp:directive> <cpp:macro pos:start="185:9" pos:end="185:18"><name pos:start="185:9" pos:end="185:12">ITER</name><parameter_list pos:start="185:13" pos:end="185:18">(<parameter pos:start="185:14" pos:end="185:14"><type pos:start="185:14" pos:end="185:14"><name pos:start="185:14" pos:end="185:14">i</name></type></parameter>, <parameter pos:start="185:17" pos:end="185:17"><type pos:start="185:17" pos:end="185:17"><name pos:start="185:17" pos:end="185:17">j</name></type></parameter>)</parameter_list></cpp:macro>                                                      \

    <cpp:value pos:start="187:5" pos:end="201:67">const vector signed short v_diff##i =                               \

        vec_sub(v_srcAss##i, v_srcAss##j);                              \

    const vector signed short v_sum##i =                                \

        vec_add(v_diff##i, v_dcOffset);                                 \

    const vector signed short v_comp##i =                               \

        (vector signed short)vec_cmplt((vector unsigned short)v_sum##i, \

                                       v_dcThreshold);                  \

    const vector signed short v_part##i = vec_and(mask, v_comp##i);</cpp:value></cpp:define>



    <block pos:start="205:5" pos:end="242:0">{<block_content pos:start="207:9" pos:end="235:46">

        <macro pos:start="207:9" pos:end="207:18"><name pos:start="207:9" pos:end="207:12">ITER</name><argument_list pos:start="207:13" pos:end="207:18">(<argument pos:start="207:14" pos:end="207:14"><literal type="number" pos:start="207:14" pos:end="207:14">0</literal></argument>, <argument pos:start="207:17" pos:end="207:17"><literal type="number" pos:start="207:17" pos:end="207:17">1</literal></argument>)</argument_list></macro>

        <macro pos:start="209:9" pos:end="209:18"><name pos:start="209:9" pos:end="209:12">ITER</name><argument_list pos:start="209:13" pos:end="209:18">(<argument pos:start="209:14" pos:end="209:14"><literal type="number" pos:start="209:14" pos:end="209:14">1</literal></argument>, <argument pos:start="209:17" pos:end="209:17"><literal type="number" pos:start="209:17" pos:end="209:17">2</literal></argument>)</argument_list></macro>

        <macro pos:start="211:9" pos:end="211:18"><name pos:start="211:9" pos:end="211:12">ITER</name><argument_list pos:start="211:13" pos:end="211:18">(<argument pos:start="211:14" pos:end="211:14"><literal type="number" pos:start="211:14" pos:end="211:14">2</literal></argument>, <argument pos:start="211:17" pos:end="211:17"><literal type="number" pos:start="211:17" pos:end="211:17">3</literal></argument>)</argument_list></macro>

        <macro pos:start="213:9" pos:end="213:18"><name pos:start="213:9" pos:end="213:12">ITER</name><argument_list pos:start="213:13" pos:end="213:18">(<argument pos:start="213:14" pos:end="213:14"><literal type="number" pos:start="213:14" pos:end="213:14">3</literal></argument>, <argument pos:start="213:17" pos:end="213:17"><literal type="number" pos:start="213:17" pos:end="213:17">4</literal></argument>)</argument_list></macro>

        <macro pos:start="215:9" pos:end="215:18"><name pos:start="215:9" pos:end="215:12">ITER</name><argument_list pos:start="215:13" pos:end="215:18">(<argument pos:start="215:14" pos:end="215:14"><literal type="number" pos:start="215:14" pos:end="215:14">4</literal></argument>, <argument pos:start="215:17" pos:end="215:17"><literal type="number" pos:start="215:17" pos:end="215:17">5</literal></argument>)</argument_list></macro>

        <macro pos:start="217:9" pos:end="217:18"><name pos:start="217:9" pos:end="217:12">ITER</name><argument_list pos:start="217:13" pos:end="217:18">(<argument pos:start="217:14" pos:end="217:14"><literal type="number" pos:start="217:14" pos:end="217:14">5</literal></argument>, <argument pos:start="217:17" pos:end="217:17"><literal type="number" pos:start="217:17" pos:end="217:17">6</literal></argument>)</argument_list></macro>

        <macro pos:start="219:9" pos:end="219:18"><name pos:start="219:9" pos:end="219:12">ITER</name><argument_list pos:start="219:13" pos:end="219:18">(<argument pos:start="219:14" pos:end="219:14"><literal type="number" pos:start="219:14" pos:end="219:14">6</literal></argument>, <argument pos:start="219:17" pos:end="219:17"><literal type="number" pos:start="219:17" pos:end="219:17">7</literal></argument>)</argument_list></macro>



        <expr_stmt pos:start="223:9" pos:end="223:46"><expr pos:start="223:9" pos:end="223:45"><name pos:start="223:9" pos:end="223:15">v_numEq</name> <operator pos:start="223:17" pos:end="223:17">=</operator> <call pos:start="223:19" pos:end="223:45"><name pos:start="223:19" pos:end="223:27">vec_sum4s</name><argument_list pos:start="223:28" pos:end="223:45">(<argument pos:start="223:29" pos:end="223:35"><expr pos:start="223:29" pos:end="223:35"><name pos:start="223:29" pos:end="223:35">v_part0</name></expr></argument>, <argument pos:start="223:38" pos:end="223:44"><expr pos:start="223:38" pos:end="223:44"><name pos:start="223:38" pos:end="223:44">v_numEq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="225:9" pos:end="225:46"><expr pos:start="225:9" pos:end="225:45"><name pos:start="225:9" pos:end="225:15">v_numEq</name> <operator pos:start="225:17" pos:end="225:17">=</operator> <call pos:start="225:19" pos:end="225:45"><name pos:start="225:19" pos:end="225:27">vec_sum4s</name><argument_list pos:start="225:28" pos:end="225:45">(<argument pos:start="225:29" pos:end="225:35"><expr pos:start="225:29" pos:end="225:35"><name pos:start="225:29" pos:end="225:35">v_part1</name></expr></argument>, <argument pos:start="225:38" pos:end="225:44"><expr pos:start="225:38" pos:end="225:44"><name pos:start="225:38" pos:end="225:44">v_numEq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="227:9" pos:end="227:46"><expr pos:start="227:9" pos:end="227:45"><name pos:start="227:9" pos:end="227:15">v_numEq</name> <operator pos:start="227:17" pos:end="227:17">=</operator> <call pos:start="227:19" pos:end="227:45"><name pos:start="227:19" pos:end="227:27">vec_sum4s</name><argument_list pos:start="227:28" pos:end="227:45">(<argument pos:start="227:29" pos:end="227:35"><expr pos:start="227:29" pos:end="227:35"><name pos:start="227:29" pos:end="227:35">v_part2</name></expr></argument>, <argument pos:start="227:38" pos:end="227:44"><expr pos:start="227:38" pos:end="227:44"><name pos:start="227:38" pos:end="227:44">v_numEq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="229:9" pos:end="229:46"><expr pos:start="229:9" pos:end="229:45"><name pos:start="229:9" pos:end="229:15">v_numEq</name> <operator pos:start="229:17" pos:end="229:17">=</operator> <call pos:start="229:19" pos:end="229:45"><name pos:start="229:19" pos:end="229:27">vec_sum4s</name><argument_list pos:start="229:28" pos:end="229:45">(<argument pos:start="229:29" pos:end="229:35"><expr pos:start="229:29" pos:end="229:35"><name pos:start="229:29" pos:end="229:35">v_part3</name></expr></argument>, <argument pos:start="229:38" pos:end="229:44"><expr pos:start="229:38" pos:end="229:44"><name pos:start="229:38" pos:end="229:44">v_numEq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="231:9" pos:end="231:46"><expr pos:start="231:9" pos:end="231:45"><name pos:start="231:9" pos:end="231:15">v_numEq</name> <operator pos:start="231:17" pos:end="231:17">=</operator> <call pos:start="231:19" pos:end="231:45"><name pos:start="231:19" pos:end="231:27">vec_sum4s</name><argument_list pos:start="231:28" pos:end="231:45">(<argument pos:start="231:29" pos:end="231:35"><expr pos:start="231:29" pos:end="231:35"><name pos:start="231:29" pos:end="231:35">v_part4</name></expr></argument>, <argument pos:start="231:38" pos:end="231:44"><expr pos:start="231:38" pos:end="231:44"><name pos:start="231:38" pos:end="231:44">v_numEq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="233:9" pos:end="233:46"><expr pos:start="233:9" pos:end="233:45"><name pos:start="233:9" pos:end="233:15">v_numEq</name> <operator pos:start="233:17" pos:end="233:17">=</operator> <call pos:start="233:19" pos:end="233:45"><name pos:start="233:19" pos:end="233:27">vec_sum4s</name><argument_list pos:start="233:28" pos:end="233:45">(<argument pos:start="233:29" pos:end="233:35"><expr pos:start="233:29" pos:end="233:35"><name pos:start="233:29" pos:end="233:35">v_part5</name></expr></argument>, <argument pos:start="233:38" pos:end="233:44"><expr pos:start="233:38" pos:end="233:44"><name pos:start="233:38" pos:end="233:44">v_numEq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="235:9" pos:end="235:46"><expr pos:start="235:9" pos:end="235:45"><name pos:start="235:9" pos:end="235:15">v_numEq</name> <operator pos:start="235:17" pos:end="235:17">=</operator> <call pos:start="235:19" pos:end="235:45"><name pos:start="235:19" pos:end="235:27">vec_sum4s</name><argument_list pos:start="235:28" pos:end="235:45">(<argument pos:start="235:29" pos:end="235:35"><expr pos:start="235:29" pos:end="235:35"><name pos:start="235:29" pos:end="235:35">v_part6</name></expr></argument>, <argument pos:start="235:38" pos:end="235:44"><expr pos:start="235:38" pos:end="235:44"><name pos:start="235:38" pos:end="235:44">v_numEq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>



<cpp:undef pos:start="241:1" pos:end="241:11">#<cpp:directive pos:start="241:2" pos:end="241:6">undef</cpp:directive> <name pos:start="241:8" pos:end="241:11">ITER</name></cpp:undef>



    <expr_stmt pos:start="245:5" pos:end="245:38"><expr pos:start="245:5" pos:end="245:37"><name pos:start="245:5" pos:end="245:11">v_numEq</name> <operator pos:start="245:13" pos:end="245:13">=</operator> <call pos:start="245:15" pos:end="245:37"><name pos:start="245:15" pos:end="245:22">vec_sums</name><argument_list pos:start="245:23" pos:end="245:37">(<argument pos:start="245:24" pos:end="245:30"><expr pos:start="245:24" pos:end="245:30"><name pos:start="245:24" pos:end="245:30">v_numEq</name></expr></argument>, <argument pos:start="245:33" pos:end="245:36"><expr pos:start="245:33" pos:end="245:36"><name pos:start="245:33" pos:end="245:36">zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="249:5" pos:end="249:36"><expr pos:start="249:5" pos:end="249:35"><name pos:start="249:5" pos:end="249:11">v_numEq</name> <operator pos:start="249:13" pos:end="249:13">=</operator> <call pos:start="249:15" pos:end="249:35"><name pos:start="249:15" pos:end="249:23">vec_splat</name><argument_list pos:start="249:24" pos:end="249:35">(<argument pos:start="249:25" pos:end="249:31"><expr pos:start="249:25" pos:end="249:31"><name pos:start="249:25" pos:end="249:31">v_numEq</name></expr></argument>, <argument pos:start="249:34" pos:end="249:34"><expr pos:start="249:34" pos:end="249:34"><literal type="number" pos:start="249:34" pos:end="249:34">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="251:5" pos:end="251:32"><expr pos:start="251:5" pos:end="251:31"><call pos:start="251:5" pos:end="251:31"><name pos:start="251:5" pos:end="251:11">vec_ste</name><argument_list pos:start="251:12" pos:end="251:31">(<argument pos:start="251:13" pos:end="251:19"><expr pos:start="251:13" pos:end="251:19"><name pos:start="251:13" pos:end="251:19">v_numEq</name></expr></argument>, <argument pos:start="251:22" pos:end="251:22"><expr pos:start="251:22" pos:end="251:22"><literal type="number" pos:start="251:22" pos:end="251:22">0</literal></expr></argument>, <argument pos:start="251:25" pos:end="251:30"><expr pos:start="251:25" pos:end="251:30"><operator pos:start="251:25" pos:end="251:25">&amp;</operator><name pos:start="251:26" pos:end="251:30">numEq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="255:5" pos:end="303:18"><if pos:start="255:5" pos:end="301:5">if <condition pos:start="255:8" pos:end="255:44">(<expr pos:start="255:9" pos:end="255:43"><name pos:start="255:9" pos:end="255:13">numEq</name> <operator pos:start="255:15" pos:end="255:15">&gt;</operator> <name pos:start="255:17" pos:end="255:43"><name pos:start="255:17" pos:end="255:17">c</name><operator pos:start="255:18" pos:end="255:19">-&gt;</operator><name pos:start="255:20" pos:end="255:25">ppMode</name><operator pos:start="255:26" pos:end="255:26">.</operator><name pos:start="255:27" pos:end="255:43">flatnessThreshold</name></name></expr>)</condition><block pos:start="255:45" pos:end="301:5">{<block_content pos:start="257:9" pos:end="299:21">

        <decl_stmt pos:start="257:9" pos:end="261:61"><decl pos:start="257:9" pos:end="261:60"><type pos:start="257:9" pos:end="257:34"><specifier pos:start="257:9" pos:end="257:13">const</specifier> <name pos:start="257:15" pos:end="257:20">vector</name> <name pos:start="257:22" pos:end="257:29">unsigned</name> <name pos:start="257:31" pos:end="257:34">char</name></type> <name pos:start="257:36" pos:end="257:40">mmoP1</name> <init pos:start="257:42" pos:end="261:60">= <expr pos:start="257:44" pos:end="261:60"><operator pos:start="257:44" pos:end="257:44">(</operator><specifier pos:start="257:45" pos:end="257:49">const</specifier> <name pos:start="257:51" pos:end="257:56">vector</name> <name pos:start="257:58" pos:end="257:65">unsigned</name> <name pos:start="257:67" pos:end="257:70">char</name><operator pos:start="257:71" pos:end="257:71">)</operator>

            <block pos:start="259:13" pos:end="261:60">{<expr pos:start="259:14" pos:end="259:17"><literal type="number" pos:start="259:14" pos:end="259:17">0x1f</literal></expr>, <expr pos:start="259:20" pos:end="259:23"><literal type="number" pos:start="259:20" pos:end="259:23">0x1f</literal></expr>, <expr pos:start="259:26" pos:end="259:29"><literal type="number" pos:start="259:26" pos:end="259:29">0x1f</literal></expr>, <expr pos:start="259:32" pos:end="259:35"><literal type="number" pos:start="259:32" pos:end="259:35">0x1f</literal></expr>, <expr pos:start="259:38" pos:end="259:41"><literal type="number" pos:start="259:38" pos:end="259:41">0x1f</literal></expr>, <expr pos:start="259:44" pos:end="259:47"><literal type="number" pos:start="259:44" pos:end="259:47">0x1f</literal></expr>, <expr pos:start="259:50" pos:end="259:53"><literal type="number" pos:start="259:50" pos:end="259:53">0x1f</literal></expr>, <expr pos:start="259:56" pos:end="259:59"><literal type="number" pos:start="259:56" pos:end="259:59">0x1f</literal></expr>,

             <expr pos:start="261:14" pos:end="261:17"><literal type="number" pos:start="261:14" pos:end="261:17">0x00</literal></expr>, <expr pos:start="261:20" pos:end="261:23"><literal type="number" pos:start="261:20" pos:end="261:23">0x01</literal></expr>, <expr pos:start="261:26" pos:end="261:29"><literal type="number" pos:start="261:26" pos:end="261:29">0x12</literal></expr>, <expr pos:start="261:32" pos:end="261:35"><literal type="number" pos:start="261:32" pos:end="261:35">0x13</literal></expr>, <expr pos:start="261:38" pos:end="261:41"><literal type="number" pos:start="261:38" pos:end="261:41">0x08</literal></expr>, <expr pos:start="261:44" pos:end="261:47"><literal type="number" pos:start="261:44" pos:end="261:47">0x09</literal></expr>, <expr pos:start="261:50" pos:end="261:53"><literal type="number" pos:start="261:50" pos:end="261:53">0x1A</literal></expr>, <expr pos:start="261:56" pos:end="261:59"><literal type="number" pos:start="261:56" pos:end="261:59">0x1B</literal></expr>}</block></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="263:9" pos:end="267:61"><decl pos:start="263:9" pos:end="267:60"><type pos:start="263:9" pos:end="263:34"><specifier pos:start="263:9" pos:end="263:13">const</specifier> <name pos:start="263:15" pos:end="263:20">vector</name> <name pos:start="263:22" pos:end="263:29">unsigned</name> <name pos:start="263:31" pos:end="263:34">char</name></type> <name pos:start="263:36" pos:end="263:40">mmoP2</name> <init pos:start="263:42" pos:end="267:60">= <expr pos:start="263:44" pos:end="267:60"><operator pos:start="263:44" pos:end="263:44">(</operator><specifier pos:start="263:45" pos:end="263:49">const</specifier> <name pos:start="263:51" pos:end="263:56">vector</name> <name pos:start="263:58" pos:end="263:65">unsigned</name> <name pos:start="263:67" pos:end="263:70">char</name><operator pos:start="263:71" pos:end="263:71">)</operator>

            <block pos:start="265:13" pos:end="267:60">{<expr pos:start="265:14" pos:end="265:17"><literal type="number" pos:start="265:14" pos:end="265:17">0x04</literal></expr>, <expr pos:start="265:20" pos:end="265:23"><literal type="number" pos:start="265:20" pos:end="265:23">0x05</literal></expr>, <expr pos:start="265:26" pos:end="265:29"><literal type="number" pos:start="265:26" pos:end="265:29">0x16</literal></expr>, <expr pos:start="265:32" pos:end="265:35"><literal type="number" pos:start="265:32" pos:end="265:35">0x17</literal></expr>, <expr pos:start="265:38" pos:end="265:41"><literal type="number" pos:start="265:38" pos:end="265:41">0x0C</literal></expr>, <expr pos:start="265:44" pos:end="265:47"><literal type="number" pos:start="265:44" pos:end="265:47">0x0D</literal></expr>, <expr pos:start="265:50" pos:end="265:53"><literal type="number" pos:start="265:50" pos:end="265:53">0x1E</literal></expr>, <expr pos:start="265:56" pos:end="265:59"><literal type="number" pos:start="265:56" pos:end="265:59">0x1F</literal></expr>,

             <expr pos:start="267:14" pos:end="267:17"><literal type="number" pos:start="267:14" pos:end="267:17">0x1f</literal></expr>, <expr pos:start="267:20" pos:end="267:23"><literal type="number" pos:start="267:20" pos:end="267:23">0x1f</literal></expr>, <expr pos:start="267:26" pos:end="267:29"><literal type="number" pos:start="267:26" pos:end="267:29">0x1f</literal></expr>, <expr pos:start="267:32" pos:end="267:35"><literal type="number" pos:start="267:32" pos:end="267:35">0x1f</literal></expr>, <expr pos:start="267:38" pos:end="267:41"><literal type="number" pos:start="267:38" pos:end="267:41">0x1f</literal></expr>, <expr pos:start="267:44" pos:end="267:47"><literal type="number" pos:start="267:44" pos:end="267:47">0x1f</literal></expr>, <expr pos:start="267:50" pos:end="267:53"><literal type="number" pos:start="267:50" pos:end="267:53">0x1f</literal></expr>, <expr pos:start="267:56" pos:end="267:59"><literal type="number" pos:start="267:56" pos:end="267:59">0x1f</literal></expr>}</block></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="269:9" pos:end="271:43"><decl pos:start="269:9" pos:end="271:42"><type pos:start="269:9" pos:end="269:34"><specifier pos:start="269:9" pos:end="269:13">const</specifier> <name pos:start="269:15" pos:end="269:20">vector</name> <name pos:start="269:22" pos:end="269:29">unsigned</name> <name pos:start="269:31" pos:end="269:34">char</name></type> <name pos:start="269:36" pos:end="269:39">mmoP</name> <init pos:start="269:41" pos:end="271:42">= <expr pos:start="269:43" pos:end="271:42"><operator pos:start="269:43" pos:end="269:43">(</operator><specifier pos:start="269:44" pos:end="269:48">const</specifier> <name pos:start="269:50" pos:end="269:55">vector</name> <name pos:start="269:57" pos:end="269:64">unsigned</name> <name pos:start="269:66" pos:end="269:69">char</name><operator pos:start="269:70" pos:end="269:70">)</operator>

            <call pos:start="271:13" pos:end="271:42"><name pos:start="271:13" pos:end="271:20">vec_lvsl</name><argument_list pos:start="271:21" pos:end="271:42">(<argument pos:start="271:22" pos:end="271:22"><expr pos:start="271:22" pos:end="271:22"><literal type="number" pos:start="271:22" pos:end="271:22">8</literal></expr></argument>, <argument pos:start="271:25" pos:end="271:41"><expr pos:start="271:25" pos:end="271:41"><operator pos:start="271:25" pos:end="271:25">(</operator><name pos:start="271:26" pos:end="271:33">unsigned</name> <name pos:start="271:35" pos:end="271:38">char</name><operator pos:start="271:39" pos:end="271:39">*</operator><operator pos:start="271:40" pos:end="271:40">)</operator><literal type="number" pos:start="271:41" pos:end="271:41">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <decl_stmt pos:start="275:9" pos:end="275:74"><decl pos:start="275:9" pos:end="275:73"><type pos:start="275:9" pos:end="275:27"><name pos:start="275:9" pos:end="275:14">vector</name> <name pos:start="275:16" pos:end="275:21">signed</name> <name pos:start="275:23" pos:end="275:27">short</name></type> <name pos:start="275:29" pos:end="275:33">mmoL1</name> <init pos:start="275:35" pos:end="275:73">= <expr pos:start="275:37" pos:end="275:73"><call pos:start="275:37" pos:end="275:73"><name pos:start="275:37" pos:end="275:44">vec_perm</name><argument_list pos:start="275:45" pos:end="275:73">(<argument pos:start="275:46" pos:end="275:54"><expr pos:start="275:46" pos:end="275:54"><name pos:start="275:46" pos:end="275:54">v_srcAss0</name></expr></argument>, <argument pos:start="275:57" pos:end="275:65"><expr pos:start="275:57" pos:end="275:65"><name pos:start="275:57" pos:end="275:65">v_srcAss2</name></expr></argument>, <argument pos:start="275:68" pos:end="275:72"><expr pos:start="275:68" pos:end="275:72"><name pos:start="275:68" pos:end="275:72">mmoP1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="277:9" pos:end="277:74"><decl pos:start="277:9" pos:end="277:73"><type pos:start="277:9" pos:end="277:27"><name pos:start="277:9" pos:end="277:14">vector</name> <name pos:start="277:16" pos:end="277:21">signed</name> <name pos:start="277:23" pos:end="277:27">short</name></type> <name pos:start="277:29" pos:end="277:33">mmoL2</name> <init pos:start="277:35" pos:end="277:73">= <expr pos:start="277:37" pos:end="277:73"><call pos:start="277:37" pos:end="277:73"><name pos:start="277:37" pos:end="277:44">vec_perm</name><argument_list pos:start="277:45" pos:end="277:73">(<argument pos:start="277:46" pos:end="277:54"><expr pos:start="277:46" pos:end="277:54"><name pos:start="277:46" pos:end="277:54">v_srcAss4</name></expr></argument>, <argument pos:start="277:57" pos:end="277:65"><expr pos:start="277:57" pos:end="277:65"><name pos:start="277:57" pos:end="277:65">v_srcAss6</name></expr></argument>, <argument pos:start="277:68" pos:end="277:72"><expr pos:start="277:68" pos:end="277:72"><name pos:start="277:68" pos:end="277:72">mmoP2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="279:9" pos:end="279:64"><decl pos:start="279:9" pos:end="279:63"><type pos:start="279:9" pos:end="279:27"><name pos:start="279:9" pos:end="279:14">vector</name> <name pos:start="279:16" pos:end="279:21">signed</name> <name pos:start="279:23" pos:end="279:27">short</name></type> <name pos:start="279:29" pos:end="279:32">mmoL</name> <init pos:start="279:34" pos:end="279:63">= <expr pos:start="279:36" pos:end="279:63"><call pos:start="279:36" pos:end="279:63"><name pos:start="279:36" pos:end="279:43">vec_perm</name><argument_list pos:start="279:44" pos:end="279:63">(<argument pos:start="279:45" pos:end="279:49"><expr pos:start="279:45" pos:end="279:49"><name pos:start="279:45" pos:end="279:49">mmoL1</name></expr></argument>, <argument pos:start="279:52" pos:end="279:56"><expr pos:start="279:52" pos:end="279:56"><name pos:start="279:52" pos:end="279:56">mmoL2</name></expr></argument>, <argument pos:start="279:59" pos:end="279:62"><expr pos:start="279:59" pos:end="279:62"><name pos:start="279:59" pos:end="279:62">mmoP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="281:9" pos:end="281:74"><decl pos:start="281:9" pos:end="281:73"><type pos:start="281:9" pos:end="281:27"><name pos:start="281:9" pos:end="281:14">vector</name> <name pos:start="281:16" pos:end="281:21">signed</name> <name pos:start="281:23" pos:end="281:27">short</name></type> <name pos:start="281:29" pos:end="281:33">mmoR1</name> <init pos:start="281:35" pos:end="281:73">= <expr pos:start="281:37" pos:end="281:73"><call pos:start="281:37" pos:end="281:73"><name pos:start="281:37" pos:end="281:44">vec_perm</name><argument_list pos:start="281:45" pos:end="281:73">(<argument pos:start="281:46" pos:end="281:54"><expr pos:start="281:46" pos:end="281:54"><name pos:start="281:46" pos:end="281:54">v_srcAss5</name></expr></argument>, <argument pos:start="281:57" pos:end="281:65"><expr pos:start="281:57" pos:end="281:65"><name pos:start="281:57" pos:end="281:65">v_srcAss7</name></expr></argument>, <argument pos:start="281:68" pos:end="281:72"><expr pos:start="281:68" pos:end="281:72"><name pos:start="281:68" pos:end="281:72">mmoP1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="283:9" pos:end="283:74"><decl pos:start="283:9" pos:end="283:73"><type pos:start="283:9" pos:end="283:27"><name pos:start="283:9" pos:end="283:14">vector</name> <name pos:start="283:16" pos:end="283:21">signed</name> <name pos:start="283:23" pos:end="283:27">short</name></type> <name pos:start="283:29" pos:end="283:33">mmoR2</name> <init pos:start="283:35" pos:end="283:73">= <expr pos:start="283:37" pos:end="283:73"><call pos:start="283:37" pos:end="283:73"><name pos:start="283:37" pos:end="283:44">vec_perm</name><argument_list pos:start="283:45" pos:end="283:73">(<argument pos:start="283:46" pos:end="283:54"><expr pos:start="283:46" pos:end="283:54"><name pos:start="283:46" pos:end="283:54">v_srcAss1</name></expr></argument>, <argument pos:start="283:57" pos:end="283:65"><expr pos:start="283:57" pos:end="283:65"><name pos:start="283:57" pos:end="283:65">v_srcAss3</name></expr></argument>, <argument pos:start="283:68" pos:end="283:72"><expr pos:start="283:68" pos:end="283:72"><name pos:start="283:68" pos:end="283:72">mmoP2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="285:9" pos:end="285:64"><decl pos:start="285:9" pos:end="285:63"><type pos:start="285:9" pos:end="285:27"><name pos:start="285:9" pos:end="285:14">vector</name> <name pos:start="285:16" pos:end="285:21">signed</name> <name pos:start="285:23" pos:end="285:27">short</name></type> <name pos:start="285:29" pos:end="285:32">mmoR</name> <init pos:start="285:34" pos:end="285:63">= <expr pos:start="285:36" pos:end="285:63"><call pos:start="285:36" pos:end="285:63"><name pos:start="285:36" pos:end="285:43">vec_perm</name><argument_list pos:start="285:44" pos:end="285:63">(<argument pos:start="285:45" pos:end="285:49"><expr pos:start="285:45" pos:end="285:49"><name pos:start="285:45" pos:end="285:49">mmoR1</name></expr></argument>, <argument pos:start="285:52" pos:end="285:56"><expr pos:start="285:52" pos:end="285:56"><name pos:start="285:52" pos:end="285:56">mmoR2</name></expr></argument>, <argument pos:start="285:59" pos:end="285:62"><expr pos:start="285:59" pos:end="285:62"><name pos:start="285:59" pos:end="285:62">mmoP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="287:9" pos:end="287:58"><decl pos:start="287:9" pos:end="287:57"><type pos:start="287:9" pos:end="287:27"><name pos:start="287:9" pos:end="287:14">vector</name> <name pos:start="287:16" pos:end="287:21">signed</name> <name pos:start="287:23" pos:end="287:27">short</name></type> <name pos:start="287:29" pos:end="287:35">mmoDiff</name> <init pos:start="287:37" pos:end="287:57">= <expr pos:start="287:39" pos:end="287:57"><call pos:start="287:39" pos:end="287:57"><name pos:start="287:39" pos:end="287:45">vec_sub</name><argument_list pos:start="287:46" pos:end="287:57">(<argument pos:start="287:47" pos:end="287:50"><expr pos:start="287:47" pos:end="287:50"><name pos:start="287:47" pos:end="287:50">mmoL</name></expr></argument>, <argument pos:start="287:53" pos:end="287:56"><expr pos:start="287:53" pos:end="287:56"><name pos:start="287:53" pos:end="287:56">mmoR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="289:9" pos:end="289:85"><decl pos:start="289:9" pos:end="289:84"><type pos:start="289:9" pos:end="289:29"><name pos:start="289:9" pos:end="289:14">vector</name> <name pos:start="289:16" pos:end="289:23">unsigned</name> <name pos:start="289:25" pos:end="289:29">short</name></type> <name pos:start="289:31" pos:end="289:36">mmoSum</name> <init pos:start="289:38" pos:end="289:84">= <expr pos:start="289:40" pos:end="289:84"><operator pos:start="289:40" pos:end="289:40">(</operator><name pos:start="289:41" pos:end="289:46">vector</name> <name pos:start="289:48" pos:end="289:55">unsigned</name> <name pos:start="289:57" pos:end="289:61">short</name><operator pos:start="289:62" pos:end="289:62">)</operator><call pos:start="289:63" pos:end="289:84"><name pos:start="289:63" pos:end="289:69">vec_add</name><argument_list pos:start="289:70" pos:end="289:84">(<argument pos:start="289:71" pos:end="289:77"><expr pos:start="289:71" pos:end="289:77"><name pos:start="289:71" pos:end="289:77">mmoDiff</name></expr></argument>, <argument pos:start="289:80" pos:end="289:83"><expr pos:start="289:80" pos:end="289:83"><name pos:start="289:80" pos:end="289:83">v2QP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="293:9" pos:end="299:21"><if pos:start="293:9" pos:end="295:21">if <condition pos:start="293:12" pos:end="293:37">(<expr pos:start="293:13" pos:end="293:36"><call pos:start="293:13" pos:end="293:36"><name pos:start="293:13" pos:end="293:22">vec_any_gt</name><argument_list pos:start="293:23" pos:end="293:36">(<argument pos:start="293:24" pos:end="293:29"><expr pos:start="293:24" pos:end="293:29"><name pos:start="293:24" pos:end="293:29">mmoSum</name></expr></argument>, <argument pos:start="293:32" pos:end="293:35"><expr pos:start="293:32" pos:end="293:35"><name pos:start="293:32" pos:end="293:35">v4QP</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="295:13" pos:end="295:21"><block_content pos:start="295:13" pos:end="295:21">

            <return pos:start="295:13" pos:end="295:21">return <expr pos:start="295:20" pos:end="295:20"><literal type="number" pos:start="295:20" pos:end="295:20">0</literal></expr>;</return></block_content></block></if>

        <else pos:start="297:9" pos:end="299:21">else<block type="pseudo" pos:start="299:13" pos:end="299:21"><block_content pos:start="299:13" pos:end="299:21">

            <return pos:start="299:13" pos:end="299:21">return <expr pos:start="299:20" pos:end="299:20"><literal type="number" pos:start="299:20" pos:end="299:20">1</literal></expr>;</return></block_content></block></else></if_stmt>

    </block_content>}</block></if>

    <else pos:start="303:5" pos:end="303:18">else<block type="pseudo" pos:start="303:10" pos:end="303:18"><block_content pos:start="303:10" pos:end="303:18"> <return pos:start="303:10" pos:end="303:18">return <expr pos:start="303:17" pos:end="303:17"><literal type="number" pos:start="303:17" pos:end="303:17">2</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>
</unit>
