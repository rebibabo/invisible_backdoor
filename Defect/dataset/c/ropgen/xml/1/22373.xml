<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22373.c" pos:tabs="8"><function pos:start="1:1" pos:end="427:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">xwd_decode_frame</name><parameter_list pos:start="1:28" pos:end="3:60">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:61"><decl pos:start="1:52" pos:end="1:61"><type pos:start="1:52" pos:end="1:61"><name pos:start="1:52" pos:end="1:55">void</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:61">data</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:42"><decl pos:start="3:29" pos:end="3:42"><type pos:start="3:29" pos:end="3:42"><name pos:start="3:29" pos:end="3:31">int</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:42">got_frame</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:59"><decl pos:start="3:45" pos:end="3:59"><type pos:start="3:45" pos:end="3:59"><name pos:start="3:45" pos:end="3:52">AVPacket</name> <modifier pos:start="3:54" pos:end="3:54">*</modifier></type><name pos:start="3:55" pos:end="3:59">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="427:1">{<block_content pos:start="7:5" pos:end="425:20">

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">AVFrame</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:14">p</name> <init pos:start="7:16" pos:end="7:21">= <expr pos:start="7:18" pos:end="7:21"><name pos:start="7:18" pos:end="7:21">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">buf</name> <init pos:start="9:24" pos:end="9:36">= <expr pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:30">avpkt</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:39"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>, <decl pos:start="11:12" pos:end="11:14"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:12" pos:end="11:14">ret</name></decl>, <decl pos:start="11:17" pos:end="11:38"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:17" pos:end="11:24">buf_size</name> <init pos:start="11:26" pos:end="11:38">= <expr pos:start="11:28" pos:end="11:38"><name pos:start="11:28" pos:end="11:38"><name pos:start="11:28" pos:end="11:32">avpkt</name><operator pos:start="11:33" pos:end="11:34">-&gt;</operator><name pos:start="11:35" pos:end="11:38">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:51"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:20">version</name></decl>, <decl pos:start="13:23" pos:end="13:33"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:23" pos:end="13:33">header_size</name></decl>, <decl pos:start="13:36" pos:end="13:41"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:36" pos:end="13:41">vclass</name></decl>, <decl pos:start="13:44" pos:end="13:50"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:44" pos:end="13:50">ncolors</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:44"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:20">xoffset</name></decl>, <decl pos:start="15:23" pos:end="15:24"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:23" pos:end="15:24">be</name></decl>, <decl pos:start="15:27" pos:end="15:29"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:27" pos:end="15:29">bpp</name></decl>, <decl pos:start="15:32" pos:end="15:36"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:32" pos:end="15:36">lsize</name></decl>, <decl pos:start="15:39" pos:end="15:43"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:39" pos:end="15:43">rsize</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:56"><decl pos:start="17:5" pos:end="17:22"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:22">pixformat</name></decl>, <decl pos:start="17:25" pos:end="17:32"><type ref="prev" pos:start="17:5" pos:end="17:12"/><name pos:start="17:25" pos:end="17:32">pixdepth</name></decl>, <decl pos:start="17:35" pos:end="17:39"><type ref="prev" pos:start="17:5" pos:end="17:12"/><name pos:start="17:35" pos:end="17:39">bunit</name></decl>, <decl pos:start="17:42" pos:end="17:49"><type ref="prev" pos:start="17:5" pos:end="17:12"/><name pos:start="17:42" pos:end="17:49">bitorder</name></decl>, <decl pos:start="17:52" pos:end="17:55"><type ref="prev" pos:start="17:5" pos:end="17:12"/><name pos:start="17:52" pos:end="17:55">bpad</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:20"><decl pos:start="19:5" pos:end="19:19"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint32_t</name></type> <name pos:start="19:14" pos:end="19:19"><name pos:start="19:14" pos:end="19:16">rgb</name><index pos:start="19:17" pos:end="19:19">[<expr pos:start="19:18" pos:end="19:18"><literal type="number" pos:start="19:18" pos:end="19:18">3</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:17"><decl pos:start="21:5" pos:end="21:16"><type pos:start="21:5" pos:end="21:13"><name pos:start="21:5" pos:end="21:11">uint8_t</name> <modifier pos:start="21:13" pos:end="21:13">*</modifier></type><name pos:start="21:14" pos:end="21:16">ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:22"><decl pos:start="23:5" pos:end="23:21"><type pos:start="23:5" pos:end="23:18"><name pos:start="23:5" pos:end="23:18">GetByteContext</name></type> <name pos:start="23:20" pos:end="23:21">gb</name></decl>;</decl_stmt>



    <if_stmt pos:start="27:5" pos:end="29:35"><if pos:start="27:5" pos:end="29:35">if <condition pos:start="27:8" pos:end="27:35">(<expr pos:start="27:9" pos:end="27:34"><name pos:start="27:9" pos:end="27:16">buf_size</name> <operator pos:start="27:18" pos:end="27:18">&lt;</operator> <name pos:start="27:20" pos:end="27:34">XWD_HEADER_SIZE</name></expr>)</condition><block type="pseudo" pos:start="29:9" pos:end="29:35"><block_content pos:start="29:9" pos:end="29:35">

        <return pos:start="29:9" pos:end="29:35">return <expr pos:start="29:16" pos:end="29:34"><name pos:start="29:16" pos:end="29:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:41"><expr pos:start="33:5" pos:end="33:40"><call pos:start="33:5" pos:end="33:40"><name pos:start="33:5" pos:end="33:20">bytestream2_init</name><argument_list pos:start="33:21" pos:end="33:40">(<argument pos:start="33:22" pos:end="33:24"><expr pos:start="33:22" pos:end="33:24"><operator pos:start="33:22" pos:end="33:22">&amp;</operator><name pos:start="33:23" pos:end="33:24">gb</name></expr></argument>, <argument pos:start="33:27" pos:end="33:29"><expr pos:start="33:27" pos:end="33:29"><name pos:start="33:27" pos:end="33:29">buf</name></expr></argument>, <argument pos:start="33:32" pos:end="33:39"><expr pos:start="33:32" pos:end="33:39"><name pos:start="33:32" pos:end="33:39">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:45"><expr pos:start="35:5" pos:end="35:44"><name pos:start="35:5" pos:end="35:15">header_size</name> <operator pos:start="35:17" pos:end="35:17">=</operator> <call pos:start="35:19" pos:end="35:44"><name pos:start="35:19" pos:end="35:39">bytestream2_get_be32u</name><argument_list pos:start="35:40" pos:end="35:44">(<argument pos:start="35:41" pos:end="35:43"><expr pos:start="35:41" pos:end="35:43"><operator pos:start="35:41" pos:end="35:41">&amp;</operator><name pos:start="35:42" pos:end="35:43">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:41"><expr pos:start="39:5" pos:end="39:40"><name pos:start="39:5" pos:end="39:11">version</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <call pos:start="39:15" pos:end="39:40"><name pos:start="39:15" pos:end="39:35">bytestream2_get_be32u</name><argument_list pos:start="39:36" pos:end="39:40">(<argument pos:start="39:37" pos:end="39:39"><expr pos:start="39:37" pos:end="39:39"><operator pos:start="39:37" pos:end="39:37">&amp;</operator><name pos:start="39:38" pos:end="39:39">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="47:5"><if pos:start="41:5" pos:end="47:5">if <condition pos:start="41:8" pos:end="41:31">(<expr pos:start="41:9" pos:end="41:30"><name pos:start="41:9" pos:end="41:15">version</name> <operator pos:start="41:17" pos:end="41:18">!=</operator> <name pos:start="41:20" pos:end="41:30">XWD_VERSION</name></expr>)</condition> <block pos:start="41:33" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:35">

        <expr_stmt pos:start="43:9" pos:end="43:61"><expr pos:start="43:9" pos:end="43:60"><call pos:start="43:9" pos:end="43:60"><name pos:start="43:9" pos:end="43:14">av_log</name><argument_list pos:start="43:15" pos:end="43:60">(<argument pos:start="43:16" pos:end="43:20"><expr pos:start="43:16" pos:end="43:20"><name pos:start="43:16" pos:end="43:20">avctx</name></expr></argument>, <argument pos:start="43:23" pos:end="43:34"><expr pos:start="43:23" pos:end="43:34"><name pos:start="43:23" pos:end="43:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="43:37" pos:end="43:59"><expr pos:start="43:37" pos:end="43:59"><literal type="string" pos:start="43:37" pos:end="43:59">"unsupported version\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="45:9" pos:end="45:35">return <expr pos:start="45:16" pos:end="45:34"><name pos:start="45:16" pos:end="45:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="51:5" pos:end="57:5"><if pos:start="51:5" pos:end="57:5">if <condition pos:start="51:8" pos:end="51:64">(<expr pos:start="51:9" pos:end="51:63"><name pos:start="51:9" pos:end="51:16">buf_size</name> <operator pos:start="51:18" pos:end="51:18">&lt;</operator> <name pos:start="51:20" pos:end="51:30">header_size</name> <operator pos:start="51:32" pos:end="51:33">||</operator> <name pos:start="51:35" pos:end="51:45">header_size</name> <operator pos:start="51:47" pos:end="51:47">&lt;</operator> <name pos:start="51:49" pos:end="51:63">XWD_HEADER_SIZE</name></expr>)</condition> <block pos:start="51:66" pos:end="57:5">{<block_content pos:start="53:9" pos:end="55:35">

        <expr_stmt pos:start="53:9" pos:end="53:61"><expr pos:start="53:9" pos:end="53:60"><call pos:start="53:9" pos:end="53:60"><name pos:start="53:9" pos:end="53:14">av_log</name><argument_list pos:start="53:15" pos:end="53:60">(<argument pos:start="53:16" pos:end="53:20"><expr pos:start="53:16" pos:end="53:20"><name pos:start="53:16" pos:end="53:20">avctx</name></expr></argument>, <argument pos:start="53:23" pos:end="53:34"><expr pos:start="53:23" pos:end="53:34"><name pos:start="53:23" pos:end="53:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="53:37" pos:end="53:59"><expr pos:start="53:37" pos:end="53:59"><literal type="string" pos:start="53:37" pos:end="53:59">"invalid header size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="55:9" pos:end="55:35">return <expr pos:start="55:16" pos:end="55:34"><name pos:start="55:16" pos:end="55:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:47"><expr pos:start="61:5" pos:end="61:46"><name pos:start="61:5" pos:end="61:13">pixformat</name>     <operator pos:start="61:19" pos:end="61:19">=</operator> <call pos:start="61:21" pos:end="61:46"><name pos:start="61:21" pos:end="61:41">bytestream2_get_be32u</name><argument_list pos:start="61:42" pos:end="61:46">(<argument pos:start="61:43" pos:end="61:45"><expr pos:start="61:43" pos:end="61:45"><operator pos:start="61:43" pos:end="61:43">&amp;</operator><name pos:start="61:44" pos:end="61:45">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:47"><expr pos:start="63:5" pos:end="63:46"><name pos:start="63:5" pos:end="63:12">pixdepth</name>      <operator pos:start="63:19" pos:end="63:19">=</operator> <call pos:start="63:21" pos:end="63:46"><name pos:start="63:21" pos:end="63:41">bytestream2_get_be32u</name><argument_list pos:start="63:42" pos:end="63:46">(<argument pos:start="63:43" pos:end="63:45"><expr pos:start="63:43" pos:end="63:45"><operator pos:start="63:43" pos:end="63:43">&amp;</operator><name pos:start="63:44" pos:end="63:45">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:47"><expr pos:start="65:5" pos:end="65:46"><name pos:start="65:5" pos:end="65:16"><name pos:start="65:5" pos:end="65:9">avctx</name><operator pos:start="65:10" pos:end="65:11">-&gt;</operator><name pos:start="65:12" pos:end="65:16">width</name></name>  <operator pos:start="65:19" pos:end="65:19">=</operator> <call pos:start="65:21" pos:end="65:46"><name pos:start="65:21" pos:end="65:41">bytestream2_get_be32u</name><argument_list pos:start="65:42" pos:end="65:46">(<argument pos:start="65:43" pos:end="65:45"><expr pos:start="65:43" pos:end="65:45"><operator pos:start="65:43" pos:end="65:43">&amp;</operator><name pos:start="65:44" pos:end="65:45">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:47"><expr pos:start="67:5" pos:end="67:46"><name pos:start="67:5" pos:end="67:17"><name pos:start="67:5" pos:end="67:9">avctx</name><operator pos:start="67:10" pos:end="67:11">-&gt;</operator><name pos:start="67:12" pos:end="67:17">height</name></name> <operator pos:start="67:19" pos:end="67:19">=</operator> <call pos:start="67:21" pos:end="67:46"><name pos:start="67:21" pos:end="67:41">bytestream2_get_be32u</name><argument_list pos:start="67:42" pos:end="67:46">(<argument pos:start="67:43" pos:end="67:45"><expr pos:start="67:43" pos:end="67:45"><operator pos:start="67:43" pos:end="67:43">&amp;</operator><name pos:start="67:44" pos:end="67:45">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:47"><expr pos:start="69:5" pos:end="69:46"><name pos:start="69:5" pos:end="69:11">xoffset</name>       <operator pos:start="69:19" pos:end="69:19">=</operator> <call pos:start="69:21" pos:end="69:46"><name pos:start="69:21" pos:end="69:41">bytestream2_get_be32u</name><argument_list pos:start="69:42" pos:end="69:46">(<argument pos:start="69:43" pos:end="69:45"><expr pos:start="69:43" pos:end="69:45"><operator pos:start="69:43" pos:end="69:43">&amp;</operator><name pos:start="69:44" pos:end="69:45">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:47"><expr pos:start="71:5" pos:end="71:46"><name pos:start="71:5" pos:end="71:6">be</name>            <operator pos:start="71:19" pos:end="71:19">=</operator> <call pos:start="71:21" pos:end="71:46"><name pos:start="71:21" pos:end="71:41">bytestream2_get_be32u</name><argument_list pos:start="71:42" pos:end="71:46">(<argument pos:start="71:43" pos:end="71:45"><expr pos:start="71:43" pos:end="71:45"><operator pos:start="71:43" pos:end="71:43">&amp;</operator><name pos:start="71:44" pos:end="71:45">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:47"><expr pos:start="73:5" pos:end="73:46"><name pos:start="73:5" pos:end="73:9">bunit</name>         <operator pos:start="73:19" pos:end="73:19">=</operator> <call pos:start="73:21" pos:end="73:46"><name pos:start="73:21" pos:end="73:41">bytestream2_get_be32u</name><argument_list pos:start="73:42" pos:end="73:46">(<argument pos:start="73:43" pos:end="73:45"><expr pos:start="73:43" pos:end="73:45"><operator pos:start="73:43" pos:end="73:43">&amp;</operator><name pos:start="73:44" pos:end="73:45">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:47"><expr pos:start="75:5" pos:end="75:46"><name pos:start="75:5" pos:end="75:12">bitorder</name>      <operator pos:start="75:19" pos:end="75:19">=</operator> <call pos:start="75:21" pos:end="75:46"><name pos:start="75:21" pos:end="75:41">bytestream2_get_be32u</name><argument_list pos:start="75:42" pos:end="75:46">(<argument pos:start="75:43" pos:end="75:45"><expr pos:start="75:43" pos:end="75:45"><operator pos:start="75:43" pos:end="75:43">&amp;</operator><name pos:start="75:44" pos:end="75:45">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:47"><expr pos:start="77:5" pos:end="77:46"><name pos:start="77:5" pos:end="77:8">bpad</name>          <operator pos:start="77:19" pos:end="77:19">=</operator> <call pos:start="77:21" pos:end="77:46"><name pos:start="77:21" pos:end="77:41">bytestream2_get_be32u</name><argument_list pos:start="77:42" pos:end="77:46">(<argument pos:start="77:43" pos:end="77:45"><expr pos:start="77:43" pos:end="77:45"><operator pos:start="77:43" pos:end="77:43">&amp;</operator><name pos:start="77:44" pos:end="77:45">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:47"><expr pos:start="79:5" pos:end="79:46"><name pos:start="79:5" pos:end="79:7">bpp</name>           <operator pos:start="79:19" pos:end="79:19">=</operator> <call pos:start="79:21" pos:end="79:46"><name pos:start="79:21" pos:end="79:41">bytestream2_get_be32u</name><argument_list pos:start="79:42" pos:end="79:46">(<argument pos:start="79:43" pos:end="79:45"><expr pos:start="79:43" pos:end="79:45"><operator pos:start="79:43" pos:end="79:43">&amp;</operator><name pos:start="79:44" pos:end="79:45">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:47"><expr pos:start="81:5" pos:end="81:46"><name pos:start="81:5" pos:end="81:9">lsize</name>         <operator pos:start="81:19" pos:end="81:19">=</operator> <call pos:start="81:21" pos:end="81:46"><name pos:start="81:21" pos:end="81:41">bytestream2_get_be32u</name><argument_list pos:start="81:42" pos:end="81:46">(<argument pos:start="81:43" pos:end="81:45"><expr pos:start="81:43" pos:end="81:45"><operator pos:start="81:43" pos:end="81:43">&amp;</operator><name pos:start="81:44" pos:end="81:45">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:47"><expr pos:start="83:5" pos:end="83:46"><name pos:start="83:5" pos:end="83:10">vclass</name>        <operator pos:start="83:19" pos:end="83:19">=</operator> <call pos:start="83:21" pos:end="83:46"><name pos:start="83:21" pos:end="83:41">bytestream2_get_be32u</name><argument_list pos:start="83:42" pos:end="83:46">(<argument pos:start="83:43" pos:end="83:45"><expr pos:start="83:43" pos:end="83:45"><operator pos:start="83:43" pos:end="83:43">&amp;</operator><name pos:start="83:44" pos:end="83:45">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:47"><expr pos:start="85:5" pos:end="85:46"><name pos:start="85:5" pos:end="85:10"><name pos:start="85:5" pos:end="85:7">rgb</name><index pos:start="85:8" pos:end="85:10">[<expr pos:start="85:9" pos:end="85:9"><literal type="number" pos:start="85:9" pos:end="85:9">0</literal></expr>]</index></name>        <operator pos:start="85:19" pos:end="85:19">=</operator> <call pos:start="85:21" pos:end="85:46"><name pos:start="85:21" pos:end="85:41">bytestream2_get_be32u</name><argument_list pos:start="85:42" pos:end="85:46">(<argument pos:start="85:43" pos:end="85:45"><expr pos:start="85:43" pos:end="85:45"><operator pos:start="85:43" pos:end="85:43">&amp;</operator><name pos:start="85:44" pos:end="85:45">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:47"><expr pos:start="87:5" pos:end="87:46"><name pos:start="87:5" pos:end="87:10"><name pos:start="87:5" pos:end="87:7">rgb</name><index pos:start="87:8" pos:end="87:10">[<expr pos:start="87:9" pos:end="87:9"><literal type="number" pos:start="87:9" pos:end="87:9">1</literal></expr>]</index></name>        <operator pos:start="87:19" pos:end="87:19">=</operator> <call pos:start="87:21" pos:end="87:46"><name pos:start="87:21" pos:end="87:41">bytestream2_get_be32u</name><argument_list pos:start="87:42" pos:end="87:46">(<argument pos:start="87:43" pos:end="87:45"><expr pos:start="87:43" pos:end="87:45"><operator pos:start="87:43" pos:end="87:43">&amp;</operator><name pos:start="87:44" pos:end="87:45">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:47"><expr pos:start="89:5" pos:end="89:46"><name pos:start="89:5" pos:end="89:10"><name pos:start="89:5" pos:end="89:7">rgb</name><index pos:start="89:8" pos:end="89:10">[<expr pos:start="89:9" pos:end="89:9"><literal type="number" pos:start="89:9" pos:end="89:9">2</literal></expr>]</index></name>        <operator pos:start="89:19" pos:end="89:19">=</operator> <call pos:start="89:21" pos:end="89:46"><name pos:start="89:21" pos:end="89:41">bytestream2_get_be32u</name><argument_list pos:start="89:42" pos:end="89:46">(<argument pos:start="89:43" pos:end="89:45"><expr pos:start="89:43" pos:end="89:45"><operator pos:start="89:43" pos:end="89:43">&amp;</operator><name pos:start="89:44" pos:end="89:45">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:30"><expr pos:start="91:5" pos:end="91:29"><call pos:start="91:5" pos:end="91:29"><name pos:start="91:5" pos:end="91:21">bytestream2_skipu</name><argument_list pos:start="91:22" pos:end="91:29">(<argument pos:start="91:23" pos:end="91:25"><expr pos:start="91:23" pos:end="91:25"><operator pos:start="91:23" pos:end="91:23">&amp;</operator><name pos:start="91:24" pos:end="91:25">gb</name></expr></argument>, <argument pos:start="91:28" pos:end="91:28"><expr pos:start="91:28" pos:end="91:28"><literal type="number" pos:start="91:28" pos:end="91:28">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:47"><expr pos:start="93:5" pos:end="93:46"><name pos:start="93:5" pos:end="93:11">ncolors</name>       <operator pos:start="93:19" pos:end="93:19">=</operator> <call pos:start="93:21" pos:end="93:46"><name pos:start="93:21" pos:end="93:41">bytestream2_get_be32u</name><argument_list pos:start="93:42" pos:end="93:46">(<argument pos:start="93:43" pos:end="93:45"><expr pos:start="93:43" pos:end="93:45"><operator pos:start="93:43" pos:end="93:43">&amp;</operator><name pos:start="93:44" pos:end="93:45">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:65"><expr pos:start="95:5" pos:end="95:64"><call pos:start="95:5" pos:end="95:64"><name pos:start="95:5" pos:end="95:21">bytestream2_skipu</name><argument_list pos:start="95:22" pos:end="95:64">(<argument pos:start="95:23" pos:end="95:25"><expr pos:start="95:23" pos:end="95:25"><operator pos:start="95:23" pos:end="95:23">&amp;</operator><name pos:start="95:24" pos:end="95:25">gb</name></expr></argument>, <argument pos:start="95:28" pos:end="95:63"><expr pos:start="95:28" pos:end="95:63"><name pos:start="95:28" pos:end="95:38">header_size</name> <operator pos:start="95:40" pos:end="95:40">-</operator> <operator pos:start="95:42" pos:end="95:42">(</operator><name pos:start="95:43" pos:end="95:57">XWD_HEADER_SIZE</name> <operator pos:start="95:59" pos:end="95:59">-</operator> <literal type="number" pos:start="95:61" pos:end="95:62">20</literal><operator pos:start="95:63" pos:end="95:63">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="99:5" pos:end="103:55"><expr pos:start="99:5" pos:end="103:54"><call pos:start="99:5" pos:end="103:54"><name pos:start="99:5" pos:end="99:10">av_log</name><argument_list pos:start="99:11" pos:end="103:54">(<argument pos:start="99:12" pos:end="99:16"><expr pos:start="99:12" pos:end="99:16"><name pos:start="99:12" pos:end="99:16">avctx</name></expr></argument>, <argument pos:start="99:19" pos:end="99:30"><expr pos:start="99:19" pos:end="99:30"><name pos:start="99:19" pos:end="99:30">AV_LOG_DEBUG</name></expr></argument>,

           <argument pos:start="101:12" pos:end="101:107"><expr pos:start="101:12" pos:end="101:107"><literal type="string" pos:start="101:12" pos:end="101:24">"pixformat %"</literal><name pos:start="101:25" pos:end="101:30">PRIu32</name><literal type="string" pos:start="101:31" pos:end="101:44">", pixdepth %"</literal><name pos:start="101:45" pos:end="101:50">PRIu32</name><literal type="string" pos:start="101:51" pos:end="101:61">", bunit %"</literal><name pos:start="101:62" pos:end="101:67">PRIu32</name><literal type="string" pos:start="101:68" pos:end="101:81">", bitorder %"</literal><name pos:start="101:82" pos:end="101:87">PRIu32</name><literal type="string" pos:start="101:88" pos:end="101:97">", bpad %"</literal><name pos:start="101:98" pos:end="101:103">PRIu32</name><literal type="string" pos:start="101:104" pos:end="101:107">"\n"</literal></expr></argument>,

           <argument pos:start="103:12" pos:end="103:20"><expr pos:start="103:12" pos:end="103:20"><name pos:start="103:12" pos:end="103:20">pixformat</name></expr></argument>, <argument pos:start="103:23" pos:end="103:30"><expr pos:start="103:23" pos:end="103:30"><name pos:start="103:23" pos:end="103:30">pixdepth</name></expr></argument>, <argument pos:start="103:33" pos:end="103:37"><expr pos:start="103:33" pos:end="103:37"><name pos:start="103:33" pos:end="103:37">bunit</name></expr></argument>, <argument pos:start="103:40" pos:end="103:47"><expr pos:start="103:40" pos:end="103:47"><name pos:start="103:40" pos:end="103:47">bitorder</name></expr></argument>, <argument pos:start="103:50" pos:end="103:53"><expr pos:start="103:50" pos:end="103:53"><name pos:start="103:50" pos:end="103:53">bpad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="109:53"><expr pos:start="105:5" pos:end="109:52"><call pos:start="105:5" pos:end="109:52"><name pos:start="105:5" pos:end="105:10">av_log</name><argument_list pos:start="105:11" pos:end="109:52">(<argument pos:start="105:12" pos:end="105:16"><expr pos:start="105:12" pos:end="105:16"><name pos:start="105:12" pos:end="105:16">avctx</name></expr></argument>, <argument pos:start="105:19" pos:end="105:30"><expr pos:start="105:19" pos:end="105:30"><name pos:start="105:19" pos:end="105:30">AV_LOG_DEBUG</name></expr></argument>,

           <argument pos:start="107:12" pos:end="107:115"><expr pos:start="107:12" pos:end="107:115"><literal type="string" pos:start="107:12" pos:end="107:21">"vclass %"</literal><name pos:start="107:22" pos:end="107:27">PRIu32</name><literal type="string" pos:start="107:28" pos:end="107:40">", ncolors %"</literal><name pos:start="107:41" pos:end="107:46">PRIu32</name><literal type="string" pos:start="107:47" pos:end="107:55">", bpp %"</literal><name pos:start="107:56" pos:end="107:61">PRIu32</name><literal type="string" pos:start="107:62" pos:end="107:69">", be %"</literal><name pos:start="107:70" pos:end="107:75">PRIu32</name><literal type="string" pos:start="107:76" pos:end="107:86">", lsize %"</literal><name pos:start="107:87" pos:end="107:92">PRIu32</name><literal type="string" pos:start="107:93" pos:end="107:105">", xoffset %"</literal><name pos:start="107:106" pos:end="107:111">PRIu32</name><literal type="string" pos:start="107:112" pos:end="107:115">"\n"</literal></expr></argument>,

           <argument pos:start="109:12" pos:end="109:17"><expr pos:start="109:12" pos:end="109:17"><name pos:start="109:12" pos:end="109:17">vclass</name></expr></argument>, <argument pos:start="109:20" pos:end="109:26"><expr pos:start="109:20" pos:end="109:26"><name pos:start="109:20" pos:end="109:26">ncolors</name></expr></argument>, <argument pos:start="109:29" pos:end="109:31"><expr pos:start="109:29" pos:end="109:31"><name pos:start="109:29" pos:end="109:31">bpp</name></expr></argument>, <argument pos:start="109:34" pos:end="109:35"><expr pos:start="109:34" pos:end="109:35"><name pos:start="109:34" pos:end="109:35">be</name></expr></argument>, <argument pos:start="109:38" pos:end="109:42"><expr pos:start="109:38" pos:end="109:42"><name pos:start="109:38" pos:end="109:42">lsize</name></expr></argument>, <argument pos:start="109:45" pos:end="109:51"><expr pos:start="109:45" pos:end="109:51"><name pos:start="109:45" pos:end="109:51">xoffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="115:35"><expr pos:start="111:5" pos:end="115:34"><call pos:start="111:5" pos:end="115:34"><name pos:start="111:5" pos:end="111:10">av_log</name><argument_list pos:start="111:11" pos:end="115:34">(<argument pos:start="111:12" pos:end="111:16"><expr pos:start="111:12" pos:end="111:16"><name pos:start="111:12" pos:end="111:16">avctx</name></expr></argument>, <argument pos:start="111:19" pos:end="111:30"><expr pos:start="111:19" pos:end="111:30"><name pos:start="111:19" pos:end="111:30">AV_LOG_DEBUG</name></expr></argument>,

           <argument pos:start="113:12" pos:end="113:64"><expr pos:start="113:12" pos:end="113:64"><literal type="string" pos:start="113:12" pos:end="113:19">"red %0"</literal><name pos:start="113:20" pos:end="113:25">PRIx32</name><literal type="string" pos:start="113:26" pos:end="113:37">", green %0"</literal><name pos:start="113:38" pos:end="113:43">PRIx32</name><literal type="string" pos:start="113:44" pos:end="113:54">", blue %0"</literal><name pos:start="113:55" pos:end="113:60">PRIx32</name><literal type="string" pos:start="113:61" pos:end="113:64">"\n"</literal></expr></argument>,

           <argument pos:start="115:12" pos:end="115:17"><expr pos:start="115:12" pos:end="115:17"><name pos:start="115:12" pos:end="115:17"><name pos:start="115:12" pos:end="115:14">rgb</name><index pos:start="115:15" pos:end="115:17">[<expr pos:start="115:16" pos:end="115:16"><literal type="number" pos:start="115:16" pos:end="115:16">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="115:20" pos:end="115:25"><expr pos:start="115:20" pos:end="115:25"><name pos:start="115:20" pos:end="115:25"><name pos:start="115:20" pos:end="115:22">rgb</name><index pos:start="115:23" pos:end="115:25">[<expr pos:start="115:24" pos:end="115:24"><literal type="number" pos:start="115:24" pos:end="115:24">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="115:28" pos:end="115:33"><expr pos:start="115:28" pos:end="115:33"><name pos:start="115:28" pos:end="115:33"><name pos:start="115:28" pos:end="115:30">rgb</name><index pos:start="115:31" pos:end="115:33">[<expr pos:start="115:32" pos:end="115:32"><literal type="number" pos:start="115:32" pos:end="115:32">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="119:5" pos:end="125:5"><if pos:start="119:5" pos:end="125:5">if <condition pos:start="119:8" pos:end="119:33">(<expr pos:start="119:9" pos:end="119:32"><name pos:start="119:9" pos:end="119:17">pixformat</name> <operator pos:start="119:19" pos:end="119:19">&gt;</operator> <name pos:start="119:21" pos:end="119:32">XWD_Z_PIXMAP</name></expr>)</condition> <block pos:start="119:35" pos:end="125:5">{<block_content pos:start="121:9" pos:end="123:35">

        <expr_stmt pos:start="121:9" pos:end="121:63"><expr pos:start="121:9" pos:end="121:62"><call pos:start="121:9" pos:end="121:62"><name pos:start="121:9" pos:end="121:14">av_log</name><argument_list pos:start="121:15" pos:end="121:62">(<argument pos:start="121:16" pos:end="121:20"><expr pos:start="121:16" pos:end="121:20"><name pos:start="121:16" pos:end="121:20">avctx</name></expr></argument>, <argument pos:start="121:23" pos:end="121:34"><expr pos:start="121:23" pos:end="121:34"><name pos:start="121:23" pos:end="121:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="121:37" pos:end="121:61"><expr pos:start="121:37" pos:end="121:61"><literal type="string" pos:start="121:37" pos:end="121:61">"invalid pixmap format\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="123:9" pos:end="123:35">return <expr pos:start="123:16" pos:end="123:34"><name pos:start="123:16" pos:end="123:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="129:5" pos:end="135:5"><if pos:start="129:5" pos:end="135:5">if <condition pos:start="129:8" pos:end="129:39">(<expr pos:start="129:9" pos:end="129:38"><name pos:start="129:9" pos:end="129:16">pixdepth</name> <operator pos:start="129:18" pos:end="129:19">==</operator> <literal type="number" pos:start="129:21" pos:end="129:21">0</literal> <operator pos:start="129:23" pos:end="129:24">||</operator> <name pos:start="129:26" pos:end="129:33">pixdepth</name> <operator pos:start="129:35" pos:end="129:35">&gt;</operator> <literal type="number" pos:start="129:37" pos:end="129:38">32</literal></expr>)</condition> <block pos:start="129:41" pos:end="135:5">{<block_content pos:start="131:9" pos:end="133:35">

        <expr_stmt pos:start="131:9" pos:end="131:62"><expr pos:start="131:9" pos:end="131:61"><call pos:start="131:9" pos:end="131:61"><name pos:start="131:9" pos:end="131:14">av_log</name><argument_list pos:start="131:15" pos:end="131:61">(<argument pos:start="131:16" pos:end="131:20"><expr pos:start="131:16" pos:end="131:20"><name pos:start="131:16" pos:end="131:20">avctx</name></expr></argument>, <argument pos:start="131:23" pos:end="131:34"><expr pos:start="131:23" pos:end="131:34"><name pos:start="131:23" pos:end="131:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="131:37" pos:end="131:60"><expr pos:start="131:37" pos:end="131:60"><literal type="string" pos:start="131:37" pos:end="131:60">"invalid pixmap depth\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="133:9" pos:end="133:35">return <expr pos:start="133:16" pos:end="133:34"><name pos:start="133:16" pos:end="133:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="139:5" pos:end="145:5"><if pos:start="139:5" pos:end="145:5">if <condition pos:start="139:8" pos:end="139:16">(<expr pos:start="139:9" pos:end="139:15"><name pos:start="139:9" pos:end="139:15">xoffset</name></expr>)</condition> <block pos:start="139:18" pos:end="145:5">{<block_content pos:start="141:9" pos:end="143:36">

        <expr_stmt pos:start="141:9" pos:end="141:67"><expr pos:start="141:9" pos:end="141:66"><call pos:start="141:9" pos:end="141:66"><name pos:start="141:9" pos:end="141:29">avpriv_request_sample</name><argument_list pos:start="141:30" pos:end="141:66">(<argument pos:start="141:31" pos:end="141:35"><expr pos:start="141:31" pos:end="141:35"><name pos:start="141:31" pos:end="141:35">avctx</name></expr></argument>, <argument pos:start="141:38" pos:end="141:56"><expr pos:start="141:38" pos:end="141:56"><literal type="string" pos:start="141:38" pos:end="141:48">"xoffset %"</literal><name pos:start="141:49" pos:end="141:54">PRIu32</name><literal type="string" pos:start="141:55" pos:end="141:56">""</literal></expr></argument>, <argument pos:start="141:59" pos:end="141:65"><expr pos:start="141:59" pos:end="141:65"><name pos:start="141:59" pos:end="141:65">xoffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="143:9" pos:end="143:36">return <expr pos:start="143:16" pos:end="143:35"><name pos:start="143:16" pos:end="143:35">AVERROR_PATCHWELCOME</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="149:5" pos:end="155:5"><if pos:start="149:5" pos:end="155:5">if <condition pos:start="149:8" pos:end="149:15">(<expr pos:start="149:9" pos:end="149:14"><name pos:start="149:9" pos:end="149:10">be</name> <operator pos:start="149:12" pos:end="149:12">&gt;</operator> <literal type="number" pos:start="149:14" pos:end="149:14">1</literal></expr>)</condition> <block pos:start="149:17" pos:end="155:5">{<block_content pos:start="151:9" pos:end="153:35">

        <expr_stmt pos:start="151:9" pos:end="151:60"><expr pos:start="151:9" pos:end="151:59"><call pos:start="151:9" pos:end="151:59"><name pos:start="151:9" pos:end="151:14">av_log</name><argument_list pos:start="151:15" pos:end="151:59">(<argument pos:start="151:16" pos:end="151:20"><expr pos:start="151:16" pos:end="151:20"><name pos:start="151:16" pos:end="151:20">avctx</name></expr></argument>, <argument pos:start="151:23" pos:end="151:34"><expr pos:start="151:23" pos:end="151:34"><name pos:start="151:23" pos:end="151:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="151:37" pos:end="151:58"><expr pos:start="151:37" pos:end="151:58"><literal type="string" pos:start="151:37" pos:end="151:58">"invalid byte order\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="153:9" pos:end="153:35">return <expr pos:start="153:16" pos:end="153:34"><name pos:start="153:16" pos:end="153:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="159:5" pos:end="165:5"><if pos:start="159:5" pos:end="165:5">if <condition pos:start="159:8" pos:end="159:21">(<expr pos:start="159:9" pos:end="159:20"><name pos:start="159:9" pos:end="159:16">bitorder</name> <operator pos:start="159:18" pos:end="159:18">&gt;</operator> <literal type="number" pos:start="159:20" pos:end="159:20">1</literal></expr>)</condition> <block pos:start="159:23" pos:end="165:5">{<block_content pos:start="161:9" pos:end="163:35">

        <expr_stmt pos:start="161:9" pos:end="161:66"><expr pos:start="161:9" pos:end="161:65"><call pos:start="161:9" pos:end="161:65"><name pos:start="161:9" pos:end="161:14">av_log</name><argument_list pos:start="161:15" pos:end="161:65">(<argument pos:start="161:16" pos:end="161:20"><expr pos:start="161:16" pos:end="161:20"><name pos:start="161:16" pos:end="161:20">avctx</name></expr></argument>, <argument pos:start="161:23" pos:end="161:34"><expr pos:start="161:23" pos:end="161:34"><name pos:start="161:23" pos:end="161:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="161:37" pos:end="161:64"><expr pos:start="161:37" pos:end="161:64"><literal type="string" pos:start="161:37" pos:end="161:64">"invalid bitmap bit order\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="163:9" pos:end="163:35">return <expr pos:start="163:16" pos:end="163:34"><name pos:start="163:16" pos:end="163:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="169:5" pos:end="175:5"><if pos:start="169:5" pos:end="175:5">if <condition pos:start="169:8" pos:end="169:49">(<expr pos:start="169:9" pos:end="169:48"><name pos:start="169:9" pos:end="169:13">bunit</name> <operator pos:start="169:15" pos:end="169:16">!=</operator> <literal type="number" pos:start="169:18" pos:end="169:18">8</literal> <operator pos:start="169:20" pos:end="169:21">&amp;&amp;</operator> <name pos:start="169:23" pos:end="169:27">bunit</name> <operator pos:start="169:29" pos:end="169:30">!=</operator> <literal type="number" pos:start="169:32" pos:end="169:33">16</literal> <operator pos:start="169:35" pos:end="169:36">&amp;&amp;</operator> <name pos:start="169:38" pos:end="169:42">bunit</name> <operator pos:start="169:44" pos:end="169:45">!=</operator> <literal type="number" pos:start="169:47" pos:end="169:48">32</literal></expr>)</condition> <block pos:start="169:51" pos:end="175:5">{<block_content pos:start="171:9" pos:end="173:35">

        <expr_stmt pos:start="171:9" pos:end="171:61"><expr pos:start="171:9" pos:end="171:60"><call pos:start="171:9" pos:end="171:60"><name pos:start="171:9" pos:end="171:14">av_log</name><argument_list pos:start="171:15" pos:end="171:60">(<argument pos:start="171:16" pos:end="171:20"><expr pos:start="171:16" pos:end="171:20"><name pos:start="171:16" pos:end="171:20">avctx</name></expr></argument>, <argument pos:start="171:23" pos:end="171:34"><expr pos:start="171:23" pos:end="171:34"><name pos:start="171:23" pos:end="171:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="171:37" pos:end="171:59"><expr pos:start="171:37" pos:end="171:59"><literal type="string" pos:start="171:37" pos:end="171:59">"invalid bitmap unit\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="173:9" pos:end="173:35">return <expr pos:start="173:16" pos:end="173:34"><name pos:start="173:16" pos:end="173:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="179:5" pos:end="185:5"><if pos:start="179:5" pos:end="185:5">if <condition pos:start="179:8" pos:end="179:46">(<expr pos:start="179:9" pos:end="179:45"><name pos:start="179:9" pos:end="179:12">bpad</name> <operator pos:start="179:14" pos:end="179:15">!=</operator> <literal type="number" pos:start="179:17" pos:end="179:17">8</literal> <operator pos:start="179:19" pos:end="179:20">&amp;&amp;</operator> <name pos:start="179:22" pos:end="179:25">bpad</name> <operator pos:start="179:27" pos:end="179:28">!=</operator> <literal type="number" pos:start="179:30" pos:end="179:31">16</literal> <operator pos:start="179:33" pos:end="179:34">&amp;&amp;</operator> <name pos:start="179:36" pos:end="179:39">bpad</name> <operator pos:start="179:41" pos:end="179:42">!=</operator> <literal type="number" pos:start="179:44" pos:end="179:45">32</literal></expr>)</condition> <block pos:start="179:48" pos:end="185:5">{<block_content pos:start="181:9" pos:end="183:35">

        <expr_stmt pos:start="181:9" pos:end="181:70"><expr pos:start="181:9" pos:end="181:69"><call pos:start="181:9" pos:end="181:69"><name pos:start="181:9" pos:end="181:14">av_log</name><argument_list pos:start="181:15" pos:end="181:69">(<argument pos:start="181:16" pos:end="181:20"><expr pos:start="181:16" pos:end="181:20"><name pos:start="181:16" pos:end="181:20">avctx</name></expr></argument>, <argument pos:start="181:23" pos:end="181:34"><expr pos:start="181:23" pos:end="181:34"><name pos:start="181:23" pos:end="181:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="181:37" pos:end="181:68"><expr pos:start="181:37" pos:end="181:68"><literal type="string" pos:start="181:37" pos:end="181:68">"invalid bitmap scan-line pad\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="183:9" pos:end="183:35">return <expr pos:start="183:16" pos:end="183:34"><name pos:start="183:16" pos:end="183:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="189:5" pos:end="195:5"><if pos:start="189:5" pos:end="195:5">if <condition pos:start="189:8" pos:end="189:29">(<expr pos:start="189:9" pos:end="189:28"><name pos:start="189:9" pos:end="189:11">bpp</name> <operator pos:start="189:13" pos:end="189:14">==</operator> <literal type="number" pos:start="189:16" pos:end="189:16">0</literal> <operator pos:start="189:18" pos:end="189:19">||</operator> <name pos:start="189:21" pos:end="189:23">bpp</name> <operator pos:start="189:25" pos:end="189:25">&gt;</operator> <literal type="number" pos:start="189:27" pos:end="189:28">32</literal></expr>)</condition> <block pos:start="189:31" pos:end="195:5">{<block_content pos:start="191:9" pos:end="193:35">

        <expr_stmt pos:start="191:9" pos:end="191:64"><expr pos:start="191:9" pos:end="191:63"><call pos:start="191:9" pos:end="191:63"><name pos:start="191:9" pos:end="191:14">av_log</name><argument_list pos:start="191:15" pos:end="191:63">(<argument pos:start="191:16" pos:end="191:20"><expr pos:start="191:16" pos:end="191:20"><name pos:start="191:16" pos:end="191:20">avctx</name></expr></argument>, <argument pos:start="191:23" pos:end="191:34"><expr pos:start="191:23" pos:end="191:34"><name pos:start="191:23" pos:end="191:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="191:37" pos:end="191:62"><expr pos:start="191:37" pos:end="191:62"><literal type="string" pos:start="191:37" pos:end="191:62">"invalid bits per pixel\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="193:9" pos:end="193:35">return <expr pos:start="193:16" pos:end="193:34"><name pos:start="193:16" pos:end="193:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="199:5" pos:end="205:5"><if pos:start="199:5" pos:end="205:5">if <condition pos:start="199:8" pos:end="199:22">(<expr pos:start="199:9" pos:end="199:21"><name pos:start="199:9" pos:end="199:15">ncolors</name> <operator pos:start="199:17" pos:end="199:17">&gt;</operator> <literal type="number" pos:start="199:19" pos:end="199:21">256</literal></expr>)</condition> <block pos:start="199:24" pos:end="205:5">{<block_content pos:start="201:9" pos:end="203:35">

        <expr_stmt pos:start="201:9" pos:end="201:79"><expr pos:start="201:9" pos:end="201:78"><call pos:start="201:9" pos:end="201:78"><name pos:start="201:9" pos:end="201:14">av_log</name><argument_list pos:start="201:15" pos:end="201:78">(<argument pos:start="201:16" pos:end="201:20"><expr pos:start="201:16" pos:end="201:20"><name pos:start="201:16" pos:end="201:20">avctx</name></expr></argument>, <argument pos:start="201:23" pos:end="201:34"><expr pos:start="201:23" pos:end="201:34"><name pos:start="201:23" pos:end="201:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="201:37" pos:end="201:77"><expr pos:start="201:37" pos:end="201:77"><literal type="string" pos:start="201:37" pos:end="201:77">"invalid number of entries in colormap\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="203:9" pos:end="203:35">return <expr pos:start="203:16" pos:end="203:34"><name pos:start="203:16" pos:end="203:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="209:5" pos:end="211:19"><if pos:start="209:5" pos:end="211:19">if <condition pos:start="209:8" pos:end="209:78">(<expr pos:start="209:9" pos:end="209:77"><operator pos:start="209:9" pos:end="209:9">(</operator><name pos:start="209:10" pos:end="209:12">ret</name> <operator pos:start="209:14" pos:end="209:14">=</operator> <call pos:start="209:16" pos:end="209:72"><name pos:start="209:16" pos:end="209:34">av_image_check_size</name><argument_list pos:start="209:35" pos:end="209:72">(<argument pos:start="209:36" pos:end="209:47"><expr pos:start="209:36" pos:end="209:47"><name pos:start="209:36" pos:end="209:47"><name pos:start="209:36" pos:end="209:40">avctx</name><operator pos:start="209:41" pos:end="209:42">-&gt;</operator><name pos:start="209:43" pos:end="209:47">width</name></name></expr></argument>, <argument pos:start="209:50" pos:end="209:62"><expr pos:start="209:50" pos:end="209:62"><name pos:start="209:50" pos:end="209:62"><name pos:start="209:50" pos:end="209:54">avctx</name><operator pos:start="209:55" pos:end="209:56">-&gt;</operator><name pos:start="209:57" pos:end="209:62">height</name></name></expr></argument>, <argument pos:start="209:65" pos:end="209:65"><expr pos:start="209:65" pos:end="209:65"><literal type="number" pos:start="209:65" pos:end="209:65">0</literal></expr></argument>, <argument pos:start="209:68" pos:end="209:71"><expr pos:start="209:68" pos:end="209:71"><name pos:start="209:68" pos:end="209:71">NULL</name></expr></argument>)</argument_list></call><operator pos:start="209:73" pos:end="209:73">)</operator> <operator pos:start="209:75" pos:end="209:75">&lt;</operator> <literal type="number" pos:start="209:77" pos:end="209:77">0</literal></expr>)</condition><block type="pseudo" pos:start="211:9" pos:end="211:19"><block_content pos:start="211:9" pos:end="211:19">

        <return pos:start="211:9" pos:end="211:19">return <expr pos:start="211:16" pos:end="211:18"><name pos:start="211:16" pos:end="211:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="215:5" pos:end="215:50"><expr pos:start="215:5" pos:end="215:49"><name pos:start="215:5" pos:end="215:9">rsize</name> <operator pos:start="215:11" pos:end="215:11">=</operator> <call pos:start="215:13" pos:end="215:45"><name pos:start="215:13" pos:end="215:19">FFALIGN</name><argument_list pos:start="215:20" pos:end="215:45">(<argument pos:start="215:21" pos:end="215:38"><expr pos:start="215:21" pos:end="215:38"><name pos:start="215:21" pos:end="215:32"><name pos:start="215:21" pos:end="215:25">avctx</name><operator pos:start="215:26" pos:end="215:27">-&gt;</operator><name pos:start="215:28" pos:end="215:32">width</name></name> <operator pos:start="215:34" pos:end="215:34">*</operator> <name pos:start="215:36" pos:end="215:38">bpp</name></expr></argument>, <argument pos:start="215:41" pos:end="215:44"><expr pos:start="215:41" pos:end="215:44"><name pos:start="215:41" pos:end="215:44">bpad</name></expr></argument>)</argument_list></call> <operator pos:start="215:47" pos:end="215:47">/</operator> <literal type="number" pos:start="215:49" pos:end="215:49">8</literal></expr>;</expr_stmt>

    <if_stmt pos:start="217:5" pos:end="223:5"><if pos:start="217:5" pos:end="223:5">if <condition pos:start="217:8" pos:end="217:22">(<expr pos:start="217:9" pos:end="217:21"><name pos:start="217:9" pos:end="217:13">lsize</name> <operator pos:start="217:15" pos:end="217:15">&lt;</operator> <name pos:start="217:17" pos:end="217:21">rsize</name></expr>)</condition> <block pos:start="217:24" pos:end="223:5">{<block_content pos:start="219:9" pos:end="221:35">

        <expr_stmt pos:start="219:9" pos:end="219:69"><expr pos:start="219:9" pos:end="219:68"><call pos:start="219:9" pos:end="219:68"><name pos:start="219:9" pos:end="219:14">av_log</name><argument_list pos:start="219:15" pos:end="219:68">(<argument pos:start="219:16" pos:end="219:20"><expr pos:start="219:16" pos:end="219:20"><name pos:start="219:16" pos:end="219:20">avctx</name></expr></argument>, <argument pos:start="219:23" pos:end="219:34"><expr pos:start="219:23" pos:end="219:34"><name pos:start="219:23" pos:end="219:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="219:37" pos:end="219:67"><expr pos:start="219:37" pos:end="219:67"><literal type="string" pos:start="219:37" pos:end="219:67">"invalid bytes per scan-line\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="221:9" pos:end="221:35">return <expr pos:start="221:16" pos:end="221:34"><name pos:start="221:16" pos:end="221:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="227:5" pos:end="233:5"><if pos:start="227:5" pos:end="233:5">if <condition pos:start="227:8" pos:end="227:100">(<expr pos:start="227:9" pos:end="227:99"><call pos:start="227:9" pos:end="227:39"><name pos:start="227:9" pos:end="227:34">bytestream2_get_bytes_left</name><argument_list pos:start="227:35" pos:end="227:39">(<argument pos:start="227:36" pos:end="227:38"><expr pos:start="227:36" pos:end="227:38"><operator pos:start="227:36" pos:end="227:36">&amp;</operator><name pos:start="227:37" pos:end="227:38">gb</name></expr></argument>)</argument_list></call> <operator pos:start="227:41" pos:end="227:41">&lt;</operator> <name pos:start="227:43" pos:end="227:49">ncolors</name> <operator pos:start="227:51" pos:end="227:51">*</operator> <name pos:start="227:53" pos:end="227:65">XWD_CMAP_SIZE</name> <operator pos:start="227:67" pos:end="227:67">+</operator> <operator pos:start="227:69" pos:end="227:69">(</operator><name pos:start="227:70" pos:end="227:77">uint64_t</name><operator pos:start="227:78" pos:end="227:78">)</operator><name pos:start="227:79" pos:end="227:91"><name pos:start="227:79" pos:end="227:83">avctx</name><operator pos:start="227:84" pos:end="227:85">-&gt;</operator><name pos:start="227:86" pos:end="227:91">height</name></name> <operator pos:start="227:93" pos:end="227:93">*</operator> <name pos:start="227:95" pos:end="227:99">lsize</name></expr>)</condition> <block pos:start="227:102" pos:end="233:5">{<block_content pos:start="229:9" pos:end="231:35">

        <expr_stmt pos:start="229:9" pos:end="229:64"><expr pos:start="229:9" pos:end="229:63"><call pos:start="229:9" pos:end="229:63"><name pos:start="229:9" pos:end="229:14">av_log</name><argument_list pos:start="229:15" pos:end="229:63">(<argument pos:start="229:16" pos:end="229:20"><expr pos:start="229:16" pos:end="229:20"><name pos:start="229:16" pos:end="229:20">avctx</name></expr></argument>, <argument pos:start="229:23" pos:end="229:34"><expr pos:start="229:23" pos:end="229:34"><name pos:start="229:23" pos:end="229:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="229:37" pos:end="229:62"><expr pos:start="229:37" pos:end="229:62"><literal type="string" pos:start="229:37" pos:end="229:62">"input buffer too small\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="231:9" pos:end="231:35">return <expr pos:start="231:16" pos:end="231:34"><name pos:start="231:16" pos:end="231:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="237:5" pos:end="243:5"><if pos:start="237:5" pos:end="243:5">if <condition pos:start="237:8" pos:end="237:34">(<expr pos:start="237:9" pos:end="237:33"><name pos:start="237:9" pos:end="237:17">pixformat</name> <operator pos:start="237:19" pos:end="237:20">!=</operator> <name pos:start="237:22" pos:end="237:33">XWD_Z_PIXMAP</name></expr>)</condition> <block pos:start="237:36" pos:end="243:5">{<block_content pos:start="239:9" pos:end="241:36">

        <expr_stmt pos:start="239:9" pos:end="239:81"><expr pos:start="239:9" pos:end="239:80"><call pos:start="239:9" pos:end="239:80"><name pos:start="239:9" pos:end="239:37">avpriv_report_missing_feature</name><argument_list pos:start="239:38" pos:end="239:80">(<argument pos:start="239:39" pos:end="239:43"><expr pos:start="239:39" pos:end="239:43"><name pos:start="239:39" pos:end="239:43">avctx</name></expr></argument>, <argument pos:start="239:46" pos:end="239:68"><expr pos:start="239:46" pos:end="239:68"><literal type="string" pos:start="239:46" pos:end="239:62">"Pixmap format %"</literal><name pos:start="239:63" pos:end="239:68">PRIu32</name></expr></argument>, <argument pos:start="239:71" pos:end="239:79"><expr pos:start="239:71" pos:end="239:79"><name pos:start="239:71" pos:end="239:79">pixformat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="241:9" pos:end="241:36">return <expr pos:start="241:16" pos:end="241:35"><name pos:start="241:16" pos:end="241:35">AVERROR_PATCHWELCOME</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="247:5" pos:end="247:37"><expr pos:start="247:5" pos:end="247:36"><name pos:start="247:5" pos:end="247:18"><name pos:start="247:5" pos:end="247:9">avctx</name><operator pos:start="247:10" pos:end="247:11">-&gt;</operator><name pos:start="247:12" pos:end="247:18">pix_fmt</name></name> <operator pos:start="247:20" pos:end="247:20">=</operator> <name pos:start="247:22" pos:end="247:36">AV_PIX_FMT_NONE</name></expr>;</expr_stmt>

    <switch pos:start="249:5" pos:end="341:5">switch <condition pos:start="249:12" pos:end="249:19">(<expr pos:start="249:13" pos:end="249:18"><name pos:start="249:13" pos:end="249:18">vclass</name></expr>)</condition> <block pos:start="249:21" pos:end="341:5">{<block_content pos:start="251:5" pos:end="339:35">

    <case pos:start="251:5" pos:end="251:25">case <expr pos:start="251:10" pos:end="251:24"><name pos:start="251:10" pos:end="251:24">XWD_STATIC_GRAY</name></expr>:</case>

    <case pos:start="253:5" pos:end="253:24">case <expr pos:start="253:10" pos:end="253:23"><name pos:start="253:10" pos:end="253:23">XWD_GRAY_SCALE</name></expr>:</case>

        <if_stmt pos:start="255:9" pos:end="257:39"><if pos:start="255:9" pos:end="257:39">if <condition pos:start="255:12" pos:end="255:33">(<expr pos:start="255:13" pos:end="255:32"><name pos:start="255:13" pos:end="255:15">bpp</name> <operator pos:start="255:17" pos:end="255:18">!=</operator> <literal type="number" pos:start="255:20" pos:end="255:20">1</literal> <operator pos:start="255:22" pos:end="255:23">&amp;&amp;</operator> <name pos:start="255:25" pos:end="255:27">bpp</name> <operator pos:start="255:29" pos:end="255:30">!=</operator> <literal type="number" pos:start="255:32" pos:end="255:32">8</literal></expr>)</condition><block type="pseudo" pos:start="257:13" pos:end="257:39"><block_content pos:start="257:13" pos:end="257:39">

            <return pos:start="257:13" pos:end="257:39">return <expr pos:start="257:20" pos:end="257:38"><name pos:start="257:20" pos:end="257:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="259:9" pos:end="267:9"><if pos:start="259:9" pos:end="263:9">if <condition pos:start="259:12" pos:end="259:26">(<expr pos:start="259:13" pos:end="259:25"><name pos:start="259:13" pos:end="259:20">pixdepth</name> <operator pos:start="259:22" pos:end="259:23">==</operator> <literal type="number" pos:start="259:25" pos:end="259:25">1</literal></expr>)</condition> <block pos:start="259:28" pos:end="263:9">{<block_content pos:start="261:13" pos:end="261:50">

            <expr_stmt pos:start="261:13" pos:end="261:50"><expr pos:start="261:13" pos:end="261:49"><name pos:start="261:13" pos:end="261:26"><name pos:start="261:13" pos:end="261:17">avctx</name><operator pos:start="261:18" pos:end="261:19">-&gt;</operator><name pos:start="261:20" pos:end="261:26">pix_fmt</name></name> <operator pos:start="261:28" pos:end="261:28">=</operator> <name pos:start="261:30" pos:end="261:49">AV_PIX_FMT_MONOWHITE</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="263:11" pos:end="267:9">else if <condition pos:start="263:19" pos:end="263:33">(<expr pos:start="263:20" pos:end="263:32"><name pos:start="263:20" pos:end="263:27">pixdepth</name> <operator pos:start="263:29" pos:end="263:30">==</operator> <literal type="number" pos:start="263:32" pos:end="263:32">8</literal></expr>)</condition> <block pos:start="263:35" pos:end="267:9">{<block_content pos:start="265:13" pos:end="265:46">

            <expr_stmt pos:start="265:13" pos:end="265:46"><expr pos:start="265:13" pos:end="265:45"><name pos:start="265:13" pos:end="265:26"><name pos:start="265:13" pos:end="265:17">avctx</name><operator pos:start="265:18" pos:end="265:19">-&gt;</operator><name pos:start="265:20" pos:end="265:26">pix_fmt</name></name> <operator pos:start="265:28" pos:end="265:28">=</operator> <name pos:start="265:30" pos:end="265:45">AV_PIX_FMT_GRAY8</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="269:9" pos:end="269:14">break;</break>

    <case pos:start="271:5" pos:end="271:26">case <expr pos:start="271:10" pos:end="271:25"><name pos:start="271:10" pos:end="271:25">XWD_STATIC_COLOR</name></expr>:</case>

    <case pos:start="273:5" pos:end="273:26">case <expr pos:start="273:10" pos:end="273:25"><name pos:start="273:10" pos:end="273:25">XWD_PSEUDO_COLOR</name></expr>:</case>

        <if_stmt pos:start="275:9" pos:end="277:45"><if pos:start="275:9" pos:end="277:45">if <condition pos:start="275:12" pos:end="275:21">(<expr pos:start="275:13" pos:end="275:20"><name pos:start="275:13" pos:end="275:15">bpp</name> <operator pos:start="275:17" pos:end="275:18">==</operator> <literal type="number" pos:start="275:20" pos:end="275:20">8</literal></expr>)</condition><block type="pseudo" pos:start="277:13" pos:end="277:45"><block_content pos:start="277:13" pos:end="277:45">

            <expr_stmt pos:start="277:13" pos:end="277:45"><expr pos:start="277:13" pos:end="277:44"><name pos:start="277:13" pos:end="277:26"><name pos:start="277:13" pos:end="277:17">avctx</name><operator pos:start="277:18" pos:end="277:19">-&gt;</operator><name pos:start="277:20" pos:end="277:26">pix_fmt</name></name> <operator pos:start="277:28" pos:end="277:28">=</operator> <name pos:start="277:30" pos:end="277:44">AV_PIX_FMT_PAL8</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <break pos:start="279:9" pos:end="279:14">break;</break>

    <case pos:start="281:5" pos:end="281:24">case <expr pos:start="281:10" pos:end="281:23"><name pos:start="281:10" pos:end="281:23">XWD_TRUE_COLOR</name></expr>:</case>

    <case pos:start="283:5" pos:end="283:26">case <expr pos:start="283:10" pos:end="283:25"><name pos:start="283:10" pos:end="283:25">XWD_DIRECT_COLOR</name></expr>:</case>

        <if_stmt pos:start="285:9" pos:end="287:39"><if pos:start="285:9" pos:end="287:39">if <condition pos:start="285:12" pos:end="285:48">(<expr pos:start="285:13" pos:end="285:47"><name pos:start="285:13" pos:end="285:15">bpp</name> <operator pos:start="285:17" pos:end="285:18">!=</operator> <literal type="number" pos:start="285:20" pos:end="285:21">16</literal> <operator pos:start="285:23" pos:end="285:24">&amp;&amp;</operator> <name pos:start="285:26" pos:end="285:28">bpp</name> <operator pos:start="285:30" pos:end="285:31">!=</operator> <literal type="number" pos:start="285:33" pos:end="285:34">24</literal> <operator pos:start="285:36" pos:end="285:37">&amp;&amp;</operator> <name pos:start="285:39" pos:end="285:41">bpp</name> <operator pos:start="285:43" pos:end="285:44">!=</operator> <literal type="number" pos:start="285:46" pos:end="285:47">32</literal></expr>)</condition><block type="pseudo" pos:start="287:13" pos:end="287:39"><block_content pos:start="287:13" pos:end="287:39">

            <return pos:start="287:13" pos:end="287:39">return <expr pos:start="287:20" pos:end="287:38"><name pos:start="287:20" pos:end="287:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="289:9" pos:end="329:9"><if pos:start="289:9" pos:end="299:9">if <condition pos:start="289:12" pos:end="289:40">(<expr pos:start="289:13" pos:end="289:39"><name pos:start="289:13" pos:end="289:15">bpp</name> <operator pos:start="289:17" pos:end="289:18">==</operator> <literal type="number" pos:start="289:20" pos:end="289:21">16</literal> <operator pos:start="289:23" pos:end="289:24">&amp;&amp;</operator> <name pos:start="289:26" pos:end="289:33">pixdepth</name> <operator pos:start="289:35" pos:end="289:36">==</operator> <literal type="number" pos:start="289:38" pos:end="289:39">15</literal></expr>)</condition> <block pos:start="289:42" pos:end="299:9">{<block_content pos:start="291:13" pos:end="297:80">

            <if_stmt pos:start="291:13" pos:end="297:80"><if pos:start="291:13" pos:end="293:80">if <condition pos:start="291:16" pos:end="291:70">(<expr pos:start="291:17" pos:end="291:69"><name pos:start="291:17" pos:end="291:22"><name pos:start="291:17" pos:end="291:19">rgb</name><index pos:start="291:20" pos:end="291:22">[<expr pos:start="291:21" pos:end="291:21"><literal type="number" pos:start="291:21" pos:end="291:21">0</literal></expr>]</index></name> <operator pos:start="291:24" pos:end="291:25">==</operator> <literal type="number" pos:start="291:27" pos:end="291:32">0x7C00</literal> <operator pos:start="291:34" pos:end="291:35">&amp;&amp;</operator> <name pos:start="291:37" pos:end="291:42"><name pos:start="291:37" pos:end="291:39">rgb</name><index pos:start="291:40" pos:end="291:42">[<expr pos:start="291:41" pos:end="291:41"><literal type="number" pos:start="291:41" pos:end="291:41">1</literal></expr>]</index></name> <operator pos:start="291:44" pos:end="291:45">==</operator> <literal type="number" pos:start="291:47" pos:end="291:51">0x3E0</literal> <operator pos:start="291:53" pos:end="291:54">&amp;&amp;</operator> <name pos:start="291:56" pos:end="291:61"><name pos:start="291:56" pos:end="291:58">rgb</name><index pos:start="291:59" pos:end="291:61">[<expr pos:start="291:60" pos:end="291:60"><literal type="number" pos:start="291:60" pos:end="291:60">2</literal></expr>]</index></name> <operator pos:start="291:63" pos:end="291:64">==</operator> <literal type="number" pos:start="291:66" pos:end="291:69">0x1F</literal></expr>)</condition><block type="pseudo" pos:start="293:17" pos:end="293:80"><block_content pos:start="293:17" pos:end="293:80">

                <expr_stmt pos:start="293:17" pos:end="293:80"><expr pos:start="293:17" pos:end="293:79"><name pos:start="293:17" pos:end="293:30"><name pos:start="293:17" pos:end="293:21">avctx</name><operator pos:start="293:22" pos:end="293:23">-&gt;</operator><name pos:start="293:24" pos:end="293:30">pix_fmt</name></name> <operator pos:start="293:32" pos:end="293:32">=</operator> <ternary pos:start="293:34" pos:end="293:79"><condition pos:start="293:34" pos:end="293:37"><expr pos:start="293:34" pos:end="293:35"><name pos:start="293:34" pos:end="293:35">be</name></expr> ?</condition><then pos:start="293:39" pos:end="293:57"> <expr pos:start="293:39" pos:end="293:57"><name pos:start="293:39" pos:end="293:57">AV_PIX_FMT_RGB555BE</name></expr> </then><else pos:start="293:59" pos:end="293:79">: <expr pos:start="293:61" pos:end="293:79"><name pos:start="293:61" pos:end="293:79">AV_PIX_FMT_RGB555LE</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="295:13" pos:end="297:80">else if <condition pos:start="295:21" pos:end="295:75">(<expr pos:start="295:22" pos:end="295:74"><name pos:start="295:22" pos:end="295:27"><name pos:start="295:22" pos:end="295:24">rgb</name><index pos:start="295:25" pos:end="295:27">[<expr pos:start="295:26" pos:end="295:26"><literal type="number" pos:start="295:26" pos:end="295:26">0</literal></expr>]</index></name> <operator pos:start="295:29" pos:end="295:30">==</operator> <literal type="number" pos:start="295:32" pos:end="295:35">0x1F</literal> <operator pos:start="295:37" pos:end="295:38">&amp;&amp;</operator> <name pos:start="295:40" pos:end="295:45"><name pos:start="295:40" pos:end="295:42">rgb</name><index pos:start="295:43" pos:end="295:45">[<expr pos:start="295:44" pos:end="295:44"><literal type="number" pos:start="295:44" pos:end="295:44">1</literal></expr>]</index></name> <operator pos:start="295:47" pos:end="295:48">==</operator> <literal type="number" pos:start="295:50" pos:end="295:54">0x3E0</literal> <operator pos:start="295:56" pos:end="295:57">&amp;&amp;</operator> <name pos:start="295:59" pos:end="295:64"><name pos:start="295:59" pos:end="295:61">rgb</name><index pos:start="295:62" pos:end="295:64">[<expr pos:start="295:63" pos:end="295:63"><literal type="number" pos:start="295:63" pos:end="295:63">2</literal></expr>]</index></name> <operator pos:start="295:66" pos:end="295:67">==</operator> <literal type="number" pos:start="295:69" pos:end="295:74">0x7C00</literal></expr>)</condition><block type="pseudo" pos:start="297:17" pos:end="297:80"><block_content pos:start="297:17" pos:end="297:80">

                <expr_stmt pos:start="297:17" pos:end="297:80"><expr pos:start="297:17" pos:end="297:79"><name pos:start="297:17" pos:end="297:30"><name pos:start="297:17" pos:end="297:21">avctx</name><operator pos:start="297:22" pos:end="297:23">-&gt;</operator><name pos:start="297:24" pos:end="297:30">pix_fmt</name></name> <operator pos:start="297:32" pos:end="297:32">=</operator> <ternary pos:start="297:34" pos:end="297:79"><condition pos:start="297:34" pos:end="297:37"><expr pos:start="297:34" pos:end="297:35"><name pos:start="297:34" pos:end="297:35">be</name></expr> ?</condition><then pos:start="297:39" pos:end="297:57"> <expr pos:start="297:39" pos:end="297:57"><name pos:start="297:39" pos:end="297:57">AV_PIX_FMT_BGR555BE</name></expr> </then><else pos:start="297:59" pos:end="297:79">: <expr pos:start="297:61" pos:end="297:79"><name pos:start="297:61" pos:end="297:79">AV_PIX_FMT_BGR555LE</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="299:11" pos:end="309:9">else if <condition pos:start="299:19" pos:end="299:47">(<expr pos:start="299:20" pos:end="299:46"><name pos:start="299:20" pos:end="299:22">bpp</name> <operator pos:start="299:24" pos:end="299:25">==</operator> <literal type="number" pos:start="299:27" pos:end="299:28">16</literal> <operator pos:start="299:30" pos:end="299:31">&amp;&amp;</operator> <name pos:start="299:33" pos:end="299:40">pixdepth</name> <operator pos:start="299:42" pos:end="299:43">==</operator> <literal type="number" pos:start="299:45" pos:end="299:46">16</literal></expr>)</condition> <block pos:start="299:49" pos:end="309:9">{<block_content pos:start="301:13" pos:end="307:80">

            <if_stmt pos:start="301:13" pos:end="307:80"><if pos:start="301:13" pos:end="303:80">if <condition pos:start="301:16" pos:end="301:70">(<expr pos:start="301:17" pos:end="301:69"><name pos:start="301:17" pos:end="301:22"><name pos:start="301:17" pos:end="301:19">rgb</name><index pos:start="301:20" pos:end="301:22">[<expr pos:start="301:21" pos:end="301:21"><literal type="number" pos:start="301:21" pos:end="301:21">0</literal></expr>]</index></name> <operator pos:start="301:24" pos:end="301:25">==</operator> <literal type="number" pos:start="301:27" pos:end="301:32">0xF800</literal> <operator pos:start="301:34" pos:end="301:35">&amp;&amp;</operator> <name pos:start="301:37" pos:end="301:42"><name pos:start="301:37" pos:end="301:39">rgb</name><index pos:start="301:40" pos:end="301:42">[<expr pos:start="301:41" pos:end="301:41"><literal type="number" pos:start="301:41" pos:end="301:41">1</literal></expr>]</index></name> <operator pos:start="301:44" pos:end="301:45">==</operator> <literal type="number" pos:start="301:47" pos:end="301:51">0x7E0</literal> <operator pos:start="301:53" pos:end="301:54">&amp;&amp;</operator> <name pos:start="301:56" pos:end="301:61"><name pos:start="301:56" pos:end="301:58">rgb</name><index pos:start="301:59" pos:end="301:61">[<expr pos:start="301:60" pos:end="301:60"><literal type="number" pos:start="301:60" pos:end="301:60">2</literal></expr>]</index></name> <operator pos:start="301:63" pos:end="301:64">==</operator> <literal type="number" pos:start="301:66" pos:end="301:69">0x1F</literal></expr>)</condition><block type="pseudo" pos:start="303:17" pos:end="303:80"><block_content pos:start="303:17" pos:end="303:80">

                <expr_stmt pos:start="303:17" pos:end="303:80"><expr pos:start="303:17" pos:end="303:79"><name pos:start="303:17" pos:end="303:30"><name pos:start="303:17" pos:end="303:21">avctx</name><operator pos:start="303:22" pos:end="303:23">-&gt;</operator><name pos:start="303:24" pos:end="303:30">pix_fmt</name></name> <operator pos:start="303:32" pos:end="303:32">=</operator> <ternary pos:start="303:34" pos:end="303:79"><condition pos:start="303:34" pos:end="303:37"><expr pos:start="303:34" pos:end="303:35"><name pos:start="303:34" pos:end="303:35">be</name></expr> ?</condition><then pos:start="303:39" pos:end="303:57"> <expr pos:start="303:39" pos:end="303:57"><name pos:start="303:39" pos:end="303:57">AV_PIX_FMT_RGB565BE</name></expr> </then><else pos:start="303:59" pos:end="303:79">: <expr pos:start="303:61" pos:end="303:79"><name pos:start="303:61" pos:end="303:79">AV_PIX_FMT_RGB565LE</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="305:13" pos:end="307:80">else if <condition pos:start="305:21" pos:end="305:75">(<expr pos:start="305:22" pos:end="305:74"><name pos:start="305:22" pos:end="305:27"><name pos:start="305:22" pos:end="305:24">rgb</name><index pos:start="305:25" pos:end="305:27">[<expr pos:start="305:26" pos:end="305:26"><literal type="number" pos:start="305:26" pos:end="305:26">0</literal></expr>]</index></name> <operator pos:start="305:29" pos:end="305:30">==</operator> <literal type="number" pos:start="305:32" pos:end="305:35">0x1F</literal> <operator pos:start="305:37" pos:end="305:38">&amp;&amp;</operator> <name pos:start="305:40" pos:end="305:45"><name pos:start="305:40" pos:end="305:42">rgb</name><index pos:start="305:43" pos:end="305:45">[<expr pos:start="305:44" pos:end="305:44"><literal type="number" pos:start="305:44" pos:end="305:44">1</literal></expr>]</index></name> <operator pos:start="305:47" pos:end="305:48">==</operator> <literal type="number" pos:start="305:50" pos:end="305:54">0x7E0</literal> <operator pos:start="305:56" pos:end="305:57">&amp;&amp;</operator> <name pos:start="305:59" pos:end="305:64"><name pos:start="305:59" pos:end="305:61">rgb</name><index pos:start="305:62" pos:end="305:64">[<expr pos:start="305:63" pos:end="305:63"><literal type="number" pos:start="305:63" pos:end="305:63">2</literal></expr>]</index></name> <operator pos:start="305:66" pos:end="305:67">==</operator> <literal type="number" pos:start="305:69" pos:end="305:74">0xF800</literal></expr>)</condition><block type="pseudo" pos:start="307:17" pos:end="307:80"><block_content pos:start="307:17" pos:end="307:80">

                <expr_stmt pos:start="307:17" pos:end="307:80"><expr pos:start="307:17" pos:end="307:79"><name pos:start="307:17" pos:end="307:30"><name pos:start="307:17" pos:end="307:21">avctx</name><operator pos:start="307:22" pos:end="307:23">-&gt;</operator><name pos:start="307:24" pos:end="307:30">pix_fmt</name></name> <operator pos:start="307:32" pos:end="307:32">=</operator> <ternary pos:start="307:34" pos:end="307:79"><condition pos:start="307:34" pos:end="307:37"><expr pos:start="307:34" pos:end="307:35"><name pos:start="307:34" pos:end="307:35">be</name></expr> ?</condition><then pos:start="307:39" pos:end="307:57"> <expr pos:start="307:39" pos:end="307:57"><name pos:start="307:39" pos:end="307:57">AV_PIX_FMT_BGR565BE</name></expr> </then><else pos:start="307:59" pos:end="307:79">: <expr pos:start="307:61" pos:end="307:79"><name pos:start="307:61" pos:end="307:79">AV_PIX_FMT_BGR565LE</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="309:11" pos:end="319:9">else if <condition pos:start="309:19" pos:end="309:29">(<expr pos:start="309:20" pos:end="309:28"><name pos:start="309:20" pos:end="309:22">bpp</name> <operator pos:start="309:24" pos:end="309:25">==</operator> <literal type="number" pos:start="309:27" pos:end="309:28">24</literal></expr>)</condition> <block pos:start="309:31" pos:end="319:9">{<block_content pos:start="311:13" pos:end="317:74">

            <if_stmt pos:start="311:13" pos:end="317:74"><if pos:start="311:13" pos:end="313:74">if <condition pos:start="311:16" pos:end="311:73">(<expr pos:start="311:17" pos:end="311:72"><name pos:start="311:17" pos:end="311:22"><name pos:start="311:17" pos:end="311:19">rgb</name><index pos:start="311:20" pos:end="311:22">[<expr pos:start="311:21" pos:end="311:21"><literal type="number" pos:start="311:21" pos:end="311:21">0</literal></expr>]</index></name> <operator pos:start="311:24" pos:end="311:25">==</operator> <literal type="number" pos:start="311:27" pos:end="311:34">0xFF0000</literal> <operator pos:start="311:36" pos:end="311:37">&amp;&amp;</operator> <name pos:start="311:39" pos:end="311:44"><name pos:start="311:39" pos:end="311:41">rgb</name><index pos:start="311:42" pos:end="311:44">[<expr pos:start="311:43" pos:end="311:43"><literal type="number" pos:start="311:43" pos:end="311:43">1</literal></expr>]</index></name> <operator pos:start="311:46" pos:end="311:47">==</operator> <literal type="number" pos:start="311:49" pos:end="311:54">0xFF00</literal> <operator pos:start="311:56" pos:end="311:57">&amp;&amp;</operator> <name pos:start="311:59" pos:end="311:64"><name pos:start="311:59" pos:end="311:61">rgb</name><index pos:start="311:62" pos:end="311:64">[<expr pos:start="311:63" pos:end="311:63"><literal type="number" pos:start="311:63" pos:end="311:63">2</literal></expr>]</index></name> <operator pos:start="311:66" pos:end="311:67">==</operator> <literal type="number" pos:start="311:69" pos:end="311:72">0xFF</literal></expr>)</condition><block type="pseudo" pos:start="313:17" pos:end="313:74"><block_content pos:start="313:17" pos:end="313:74">

                <expr_stmt pos:start="313:17" pos:end="313:74"><expr pos:start="313:17" pos:end="313:73"><name pos:start="313:17" pos:end="313:30"><name pos:start="313:17" pos:end="313:21">avctx</name><operator pos:start="313:22" pos:end="313:23">-&gt;</operator><name pos:start="313:24" pos:end="313:30">pix_fmt</name></name> <operator pos:start="313:32" pos:end="313:32">=</operator> <ternary pos:start="313:34" pos:end="313:73"><condition pos:start="313:34" pos:end="313:37"><expr pos:start="313:34" pos:end="313:35"><name pos:start="313:34" pos:end="313:35">be</name></expr> ?</condition><then pos:start="313:39" pos:end="313:54"> <expr pos:start="313:39" pos:end="313:54"><name pos:start="313:39" pos:end="313:54">AV_PIX_FMT_RGB24</name></expr> </then><else pos:start="313:56" pos:end="313:73">: <expr pos:start="313:58" pos:end="313:73"><name pos:start="313:58" pos:end="313:73">AV_PIX_FMT_BGR24</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="315:13" pos:end="317:74">else if <condition pos:start="315:21" pos:end="315:78">(<expr pos:start="315:22" pos:end="315:77"><name pos:start="315:22" pos:end="315:27"><name pos:start="315:22" pos:end="315:24">rgb</name><index pos:start="315:25" pos:end="315:27">[<expr pos:start="315:26" pos:end="315:26"><literal type="number" pos:start="315:26" pos:end="315:26">0</literal></expr>]</index></name> <operator pos:start="315:29" pos:end="315:30">==</operator> <literal type="number" pos:start="315:32" pos:end="315:35">0xFF</literal> <operator pos:start="315:37" pos:end="315:38">&amp;&amp;</operator> <name pos:start="315:40" pos:end="315:45"><name pos:start="315:40" pos:end="315:42">rgb</name><index pos:start="315:43" pos:end="315:45">[<expr pos:start="315:44" pos:end="315:44"><literal type="number" pos:start="315:44" pos:end="315:44">1</literal></expr>]</index></name> <operator pos:start="315:47" pos:end="315:48">==</operator> <literal type="number" pos:start="315:50" pos:end="315:55">0xFF00</literal> <operator pos:start="315:57" pos:end="315:58">&amp;&amp;</operator> <name pos:start="315:60" pos:end="315:65"><name pos:start="315:60" pos:end="315:62">rgb</name><index pos:start="315:63" pos:end="315:65">[<expr pos:start="315:64" pos:end="315:64"><literal type="number" pos:start="315:64" pos:end="315:64">2</literal></expr>]</index></name> <operator pos:start="315:67" pos:end="315:68">==</operator> <literal type="number" pos:start="315:70" pos:end="315:77">0xFF0000</literal></expr>)</condition><block type="pseudo" pos:start="317:17" pos:end="317:74"><block_content pos:start="317:17" pos:end="317:74">

                <expr_stmt pos:start="317:17" pos:end="317:74"><expr pos:start="317:17" pos:end="317:73"><name pos:start="317:17" pos:end="317:30"><name pos:start="317:17" pos:end="317:21">avctx</name><operator pos:start="317:22" pos:end="317:23">-&gt;</operator><name pos:start="317:24" pos:end="317:30">pix_fmt</name></name> <operator pos:start="317:32" pos:end="317:32">=</operator> <ternary pos:start="317:34" pos:end="317:73"><condition pos:start="317:34" pos:end="317:37"><expr pos:start="317:34" pos:end="317:35"><name pos:start="317:34" pos:end="317:35">be</name></expr> ?</condition><then pos:start="317:39" pos:end="317:54"> <expr pos:start="317:39" pos:end="317:54"><name pos:start="317:39" pos:end="317:54">AV_PIX_FMT_BGR24</name></expr> </then><else pos:start="317:56" pos:end="317:73">: <expr pos:start="317:58" pos:end="317:73"><name pos:start="317:58" pos:end="317:73">AV_PIX_FMT_RGB24</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="319:11" pos:end="329:9">else if <condition pos:start="319:19" pos:end="319:29">(<expr pos:start="319:20" pos:end="319:28"><name pos:start="319:20" pos:end="319:22">bpp</name> <operator pos:start="319:24" pos:end="319:25">==</operator> <literal type="number" pos:start="319:27" pos:end="319:28">32</literal></expr>)</condition> <block pos:start="319:31" pos:end="329:9">{<block_content pos:start="321:13" pos:end="327:72">

            <if_stmt pos:start="321:13" pos:end="327:72"><if pos:start="321:13" pos:end="323:72">if <condition pos:start="321:16" pos:end="321:73">(<expr pos:start="321:17" pos:end="321:72"><name pos:start="321:17" pos:end="321:22"><name pos:start="321:17" pos:end="321:19">rgb</name><index pos:start="321:20" pos:end="321:22">[<expr pos:start="321:21" pos:end="321:21"><literal type="number" pos:start="321:21" pos:end="321:21">0</literal></expr>]</index></name> <operator pos:start="321:24" pos:end="321:25">==</operator> <literal type="number" pos:start="321:27" pos:end="321:34">0xFF0000</literal> <operator pos:start="321:36" pos:end="321:37">&amp;&amp;</operator> <name pos:start="321:39" pos:end="321:44"><name pos:start="321:39" pos:end="321:41">rgb</name><index pos:start="321:42" pos:end="321:44">[<expr pos:start="321:43" pos:end="321:43"><literal type="number" pos:start="321:43" pos:end="321:43">1</literal></expr>]</index></name> <operator pos:start="321:46" pos:end="321:47">==</operator> <literal type="number" pos:start="321:49" pos:end="321:54">0xFF00</literal> <operator pos:start="321:56" pos:end="321:57">&amp;&amp;</operator> <name pos:start="321:59" pos:end="321:64"><name pos:start="321:59" pos:end="321:61">rgb</name><index pos:start="321:62" pos:end="321:64">[<expr pos:start="321:63" pos:end="321:63"><literal type="number" pos:start="321:63" pos:end="321:63">2</literal></expr>]</index></name> <operator pos:start="321:66" pos:end="321:67">==</operator> <literal type="number" pos:start="321:69" pos:end="321:72">0xFF</literal></expr>)</condition><block type="pseudo" pos:start="323:17" pos:end="323:72"><block_content pos:start="323:17" pos:end="323:72">

                <expr_stmt pos:start="323:17" pos:end="323:72"><expr pos:start="323:17" pos:end="323:71"><name pos:start="323:17" pos:end="323:30"><name pos:start="323:17" pos:end="323:21">avctx</name><operator pos:start="323:22" pos:end="323:23">-&gt;</operator><name pos:start="323:24" pos:end="323:30">pix_fmt</name></name> <operator pos:start="323:32" pos:end="323:32">=</operator> <ternary pos:start="323:34" pos:end="323:71"><condition pos:start="323:34" pos:end="323:37"><expr pos:start="323:34" pos:end="323:35"><name pos:start="323:34" pos:end="323:35">be</name></expr> ?</condition><then pos:start="323:39" pos:end="323:53"> <expr pos:start="323:39" pos:end="323:53"><name pos:start="323:39" pos:end="323:53">AV_PIX_FMT_ARGB</name></expr> </then><else pos:start="323:55" pos:end="323:71">: <expr pos:start="323:57" pos:end="323:71"><name pos:start="323:57" pos:end="323:71">AV_PIX_FMT_BGRA</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="325:13" pos:end="327:72">else if <condition pos:start="325:21" pos:end="325:78">(<expr pos:start="325:22" pos:end="325:77"><name pos:start="325:22" pos:end="325:27"><name pos:start="325:22" pos:end="325:24">rgb</name><index pos:start="325:25" pos:end="325:27">[<expr pos:start="325:26" pos:end="325:26"><literal type="number" pos:start="325:26" pos:end="325:26">0</literal></expr>]</index></name> <operator pos:start="325:29" pos:end="325:30">==</operator> <literal type="number" pos:start="325:32" pos:end="325:35">0xFF</literal> <operator pos:start="325:37" pos:end="325:38">&amp;&amp;</operator> <name pos:start="325:40" pos:end="325:45"><name pos:start="325:40" pos:end="325:42">rgb</name><index pos:start="325:43" pos:end="325:45">[<expr pos:start="325:44" pos:end="325:44"><literal type="number" pos:start="325:44" pos:end="325:44">1</literal></expr>]</index></name> <operator pos:start="325:47" pos:end="325:48">==</operator> <literal type="number" pos:start="325:50" pos:end="325:55">0xFF00</literal> <operator pos:start="325:57" pos:end="325:58">&amp;&amp;</operator> <name pos:start="325:60" pos:end="325:65"><name pos:start="325:60" pos:end="325:62">rgb</name><index pos:start="325:63" pos:end="325:65">[<expr pos:start="325:64" pos:end="325:64"><literal type="number" pos:start="325:64" pos:end="325:64">2</literal></expr>]</index></name> <operator pos:start="325:67" pos:end="325:68">==</operator> <literal type="number" pos:start="325:70" pos:end="325:77">0xFF0000</literal></expr>)</condition><block type="pseudo" pos:start="327:17" pos:end="327:72"><block_content pos:start="327:17" pos:end="327:72">

                <expr_stmt pos:start="327:17" pos:end="327:72"><expr pos:start="327:17" pos:end="327:71"><name pos:start="327:17" pos:end="327:30"><name pos:start="327:17" pos:end="327:21">avctx</name><operator pos:start="327:22" pos:end="327:23">-&gt;</operator><name pos:start="327:24" pos:end="327:30">pix_fmt</name></name> <operator pos:start="327:32" pos:end="327:32">=</operator> <ternary pos:start="327:34" pos:end="327:71"><condition pos:start="327:34" pos:end="327:37"><expr pos:start="327:34" pos:end="327:35"><name pos:start="327:34" pos:end="327:35">be</name></expr> ?</condition><then pos:start="327:39" pos:end="327:53"> <expr pos:start="327:39" pos:end="327:53"><name pos:start="327:39" pos:end="327:53">AV_PIX_FMT_ABGR</name></expr> </then><else pos:start="327:55" pos:end="327:71">: <expr pos:start="327:57" pos:end="327:71"><name pos:start="327:57" pos:end="327:71">AV_PIX_FMT_RGBA</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="331:9" pos:end="331:56"><expr pos:start="331:9" pos:end="331:55"><call pos:start="331:9" pos:end="331:55"><name pos:start="331:9" pos:end="331:25">bytestream2_skipu</name><argument_list pos:start="331:26" pos:end="331:55">(<argument pos:start="331:27" pos:end="331:29"><expr pos:start="331:27" pos:end="331:29"><operator pos:start="331:27" pos:end="331:27">&amp;</operator><name pos:start="331:28" pos:end="331:29">gb</name></expr></argument>, <argument pos:start="331:32" pos:end="331:54"><expr pos:start="331:32" pos:end="331:54"><name pos:start="331:32" pos:end="331:38">ncolors</name> <operator pos:start="331:40" pos:end="331:40">*</operator> <name pos:start="331:42" pos:end="331:54">XWD_CMAP_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="333:9" pos:end="333:14">break;</break>

    <default pos:start="335:5" pos:end="335:12">default:</default>

        <expr_stmt pos:start="337:9" pos:end="337:62"><expr pos:start="337:9" pos:end="337:61"><call pos:start="337:9" pos:end="337:61"><name pos:start="337:9" pos:end="337:14">av_log</name><argument_list pos:start="337:15" pos:end="337:61">(<argument pos:start="337:16" pos:end="337:20"><expr pos:start="337:16" pos:end="337:20"><name pos:start="337:16" pos:end="337:20">avctx</name></expr></argument>, <argument pos:start="337:23" pos:end="337:34"><expr pos:start="337:23" pos:end="337:34"><name pos:start="337:23" pos:end="337:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="337:37" pos:end="337:60"><expr pos:start="337:37" pos:end="337:60"><literal type="string" pos:start="337:37" pos:end="337:60">"invalid visual class\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="339:9" pos:end="339:35">return <expr pos:start="339:16" pos:end="339:34"><name pos:start="339:16" pos:end="339:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></switch>



    <if_stmt pos:start="345:5" pos:end="355:5"><if pos:start="345:5" pos:end="355:5">if <condition pos:start="345:8" pos:end="345:42">(<expr pos:start="345:9" pos:end="345:41"><name pos:start="345:9" pos:end="345:22"><name pos:start="345:9" pos:end="345:13">avctx</name><operator pos:start="345:14" pos:end="345:15">-&gt;</operator><name pos:start="345:16" pos:end="345:22">pix_fmt</name></name> <operator pos:start="345:24" pos:end="345:25">==</operator> <name pos:start="345:27" pos:end="345:41">AV_PIX_FMT_NONE</name></expr>)</condition> <block pos:start="345:44" pos:end="355:5">{<block_content pos:start="347:9" pos:end="353:36">

        <expr_stmt pos:start="347:9" pos:end="351:53"><expr pos:start="347:9" pos:end="351:52"><call pos:start="347:9" pos:end="351:52"><name pos:start="347:9" pos:end="347:29">avpriv_request_sample</name><argument_list pos:start="347:30" pos:end="351:52">(<argument pos:start="347:31" pos:end="347:35"><expr pos:start="347:31" pos:end="347:35"><name pos:start="347:31" pos:end="347:35">avctx</name></expr></argument>,

                              <argument pos:start="349:31" pos:end="349:97"><expr pos:start="349:31" pos:end="349:97"><literal type="string" pos:start="349:31" pos:end="349:51">"Unknown file: bpp %"</literal><name pos:start="349:52" pos:end="349:57">PRIu32</name><literal type="string" pos:start="349:58" pos:end="349:71">", pixdepth %"</literal><name pos:start="349:72" pos:end="349:77">PRIu32</name><literal type="string" pos:start="349:78" pos:end="349:89">", vclass %"</literal><name pos:start="349:90" pos:end="349:95">PRIu32</name><literal type="string" pos:start="349:96" pos:end="349:97">""</literal></expr></argument>,

                              <argument pos:start="351:31" pos:end="351:33"><expr pos:start="351:31" pos:end="351:33"><name pos:start="351:31" pos:end="351:33">bpp</name></expr></argument>, <argument pos:start="351:36" pos:end="351:43"><expr pos:start="351:36" pos:end="351:43"><name pos:start="351:36" pos:end="351:43">pixdepth</name></expr></argument>, <argument pos:start="351:46" pos:end="351:51"><expr pos:start="351:46" pos:end="351:51"><name pos:start="351:46" pos:end="351:51">vclass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="353:9" pos:end="353:36">return <expr pos:start="353:16" pos:end="353:35"><name pos:start="353:16" pos:end="353:35">AVERROR_PATCHWELCOME</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="359:5" pos:end="361:19"><if pos:start="359:5" pos:end="361:19">if <condition pos:start="359:8" pos:end="359:47">(<expr pos:start="359:9" pos:end="359:46"><operator pos:start="359:9" pos:end="359:9">(</operator><name pos:start="359:10" pos:end="359:12">ret</name> <operator pos:start="359:14" pos:end="359:14">=</operator> <call pos:start="359:16" pos:end="359:41"><name pos:start="359:16" pos:end="359:28">ff_get_buffer</name><argument_list pos:start="359:29" pos:end="359:41">(<argument pos:start="359:30" pos:end="359:34"><expr pos:start="359:30" pos:end="359:34"><name pos:start="359:30" pos:end="359:34">avctx</name></expr></argument>, <argument pos:start="359:37" pos:end="359:37"><expr pos:start="359:37" pos:end="359:37"><name pos:start="359:37" pos:end="359:37">p</name></expr></argument>, <argument pos:start="359:40" pos:end="359:40"><expr pos:start="359:40" pos:end="359:40"><literal type="number" pos:start="359:40" pos:end="359:40">0</literal></expr></argument>)</argument_list></call><operator pos:start="359:42" pos:end="359:42">)</operator> <operator pos:start="359:44" pos:end="359:44">&lt;</operator> <literal type="number" pos:start="359:46" pos:end="359:46">0</literal></expr>)</condition><block type="pseudo" pos:start="361:9" pos:end="361:19"><block_content pos:start="361:9" pos:end="361:19">

        <return pos:start="361:9" pos:end="361:19">return <expr pos:start="361:16" pos:end="361:18"><name pos:start="361:16" pos:end="361:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="365:5" pos:end="365:21"><expr pos:start="365:5" pos:end="365:20"><name pos:start="365:5" pos:end="365:16"><name pos:start="365:5" pos:end="365:5">p</name><operator pos:start="365:6" pos:end="365:7">-&gt;</operator><name pos:start="365:8" pos:end="365:16">key_frame</name></name> <operator pos:start="365:18" pos:end="365:18">=</operator> <literal type="number" pos:start="365:20" pos:end="365:20">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="367:5" pos:end="367:37"><expr pos:start="367:5" pos:end="367:36"><name pos:start="367:5" pos:end="367:16"><name pos:start="367:5" pos:end="367:5">p</name><operator pos:start="367:6" pos:end="367:7">-&gt;</operator><name pos:start="367:8" pos:end="367:16">pict_type</name></name> <operator pos:start="367:18" pos:end="367:18">=</operator> <name pos:start="367:20" pos:end="367:36">AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>



    <if_stmt pos:start="371:5" pos:end="403:5"><if pos:start="371:5" pos:end="403:5">if <condition pos:start="371:8" pos:end="371:42">(<expr pos:start="371:9" pos:end="371:41"><name pos:start="371:9" pos:end="371:22"><name pos:start="371:9" pos:end="371:13">avctx</name><operator pos:start="371:14" pos:end="371:15">-&gt;</operator><name pos:start="371:16" pos:end="371:22">pix_fmt</name></name> <operator pos:start="371:24" pos:end="371:25">==</operator> <name pos:start="371:27" pos:end="371:41">AV_PIX_FMT_PAL8</name></expr>)</condition> <block pos:start="371:44" pos:end="403:5">{<block_content pos:start="373:9" pos:end="401:9">

        <decl_stmt pos:start="373:9" pos:end="373:47"><decl pos:start="373:9" pos:end="373:46"><type pos:start="373:9" pos:end="373:18"><name pos:start="373:9" pos:end="373:16">uint32_t</name> <modifier pos:start="373:18" pos:end="373:18">*</modifier></type><name pos:start="373:19" pos:end="373:21">dst</name> <init pos:start="373:23" pos:end="373:46">= <expr pos:start="373:25" pos:end="373:46"><operator pos:start="373:25" pos:end="373:25">(</operator><name pos:start="373:26" pos:end="373:33">uint32_t</name> <operator pos:start="373:35" pos:end="373:35">*</operator><operator pos:start="373:36" pos:end="373:36">)</operator><name pos:start="373:37" pos:end="373:46"><name pos:start="373:37" pos:end="373:37">p</name><operator pos:start="373:38" pos:end="373:39">-&gt;</operator><name pos:start="373:40" pos:end="373:43">data</name><index pos:start="373:44" pos:end="373:46">[<expr pos:start="373:45" pos:end="373:45"><literal type="number" pos:start="373:45" pos:end="373:45">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="375:9" pos:end="375:33"><decl pos:start="375:9" pos:end="375:19"><type pos:start="375:9" pos:end="375:15"><name pos:start="375:9" pos:end="375:15">uint8_t</name></type> <name pos:start="375:17" pos:end="375:19">red</name></decl>, <decl pos:start="375:22" pos:end="375:26"><type ref="prev" pos:start="375:9" pos:end="375:15"/><name pos:start="375:22" pos:end="375:26">green</name></decl>, <decl pos:start="375:29" pos:end="375:32"><type ref="prev" pos:start="375:9" pos:end="375:15"/><name pos:start="375:29" pos:end="375:32">blue</name></decl>;</decl_stmt>



        <for pos:start="379:9" pos:end="401:9">for <control pos:start="379:13" pos:end="379:37">(<init pos:start="379:14" pos:end="379:19"><expr pos:start="379:14" pos:end="379:18"><name pos:start="379:14" pos:end="379:14">i</name> <operator pos:start="379:16" pos:end="379:16">=</operator> <literal type="number" pos:start="379:18" pos:end="379:18">0</literal></expr>;</init> <condition pos:start="379:21" pos:end="379:32"><expr pos:start="379:21" pos:end="379:31"><name pos:start="379:21" pos:end="379:21">i</name> <operator pos:start="379:23" pos:end="379:23">&lt;</operator> <name pos:start="379:25" pos:end="379:31">ncolors</name></expr>;</condition> <incr pos:start="379:34" pos:end="379:36"><expr pos:start="379:34" pos:end="379:36"><name pos:start="379:34" pos:end="379:34">i</name><operator pos:start="379:35" pos:end="379:36">++</operator></expr></incr>)</control> <block pos:start="379:39" pos:end="401:9">{<block_content pos:start="383:13" pos:end="399:51">



            <expr_stmt pos:start="383:13" pos:end="383:38"><expr pos:start="383:13" pos:end="383:37"><call pos:start="383:13" pos:end="383:37"><name pos:start="383:13" pos:end="383:29">bytestream2_skipu</name><argument_list pos:start="383:30" pos:end="383:37">(<argument pos:start="383:31" pos:end="383:33"><expr pos:start="383:31" pos:end="383:33"><operator pos:start="383:31" pos:end="383:31">&amp;</operator><name pos:start="383:32" pos:end="383:33">gb</name></expr></argument>, <argument pos:start="383:36" pos:end="383:36"><expr pos:start="383:36" pos:end="383:36"><literal type="number" pos:start="383:36" pos:end="383:36">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="383:40" pos:end="383:68">// skip colormap entry number</comment>

            <expr_stmt pos:start="385:13" pos:end="385:48"><expr pos:start="385:13" pos:end="385:47"><name pos:start="385:13" pos:end="385:15">red</name>    <operator pos:start="385:20" pos:end="385:20">=</operator> <call pos:start="385:22" pos:end="385:47"><name pos:start="385:22" pos:end="385:42">bytestream2_get_byteu</name><argument_list pos:start="385:43" pos:end="385:47">(<argument pos:start="385:44" pos:end="385:46"><expr pos:start="385:44" pos:end="385:46"><operator pos:start="385:44" pos:end="385:44">&amp;</operator><name pos:start="385:45" pos:end="385:46">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="387:13" pos:end="387:38"><expr pos:start="387:13" pos:end="387:37"><call pos:start="387:13" pos:end="387:37"><name pos:start="387:13" pos:end="387:29">bytestream2_skipu</name><argument_list pos:start="387:30" pos:end="387:37">(<argument pos:start="387:31" pos:end="387:33"><expr pos:start="387:31" pos:end="387:33"><operator pos:start="387:31" pos:end="387:31">&amp;</operator><name pos:start="387:32" pos:end="387:33">gb</name></expr></argument>, <argument pos:start="387:36" pos:end="387:36"><expr pos:start="387:36" pos:end="387:36"><literal type="number" pos:start="387:36" pos:end="387:36">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="389:13" pos:end="389:48"><expr pos:start="389:13" pos:end="389:47"><name pos:start="389:13" pos:end="389:17">green</name>  <operator pos:start="389:20" pos:end="389:20">=</operator> <call pos:start="389:22" pos:end="389:47"><name pos:start="389:22" pos:end="389:42">bytestream2_get_byteu</name><argument_list pos:start="389:43" pos:end="389:47">(<argument pos:start="389:44" pos:end="389:46"><expr pos:start="389:44" pos:end="389:46"><operator pos:start="389:44" pos:end="389:44">&amp;</operator><name pos:start="389:45" pos:end="389:46">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="391:13" pos:end="391:38"><expr pos:start="391:13" pos:end="391:37"><call pos:start="391:13" pos:end="391:37"><name pos:start="391:13" pos:end="391:29">bytestream2_skipu</name><argument_list pos:start="391:30" pos:end="391:37">(<argument pos:start="391:31" pos:end="391:33"><expr pos:start="391:31" pos:end="391:33"><operator pos:start="391:31" pos:end="391:31">&amp;</operator><name pos:start="391:32" pos:end="391:33">gb</name></expr></argument>, <argument pos:start="391:36" pos:end="391:36"><expr pos:start="391:36" pos:end="391:36"><literal type="number" pos:start="391:36" pos:end="391:36">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="393:13" pos:end="393:48"><expr pos:start="393:13" pos:end="393:47"><name pos:start="393:13" pos:end="393:16">blue</name>   <operator pos:start="393:20" pos:end="393:20">=</operator> <call pos:start="393:22" pos:end="393:47"><name pos:start="393:22" pos:end="393:42">bytestream2_get_byteu</name><argument_list pos:start="393:43" pos:end="393:47">(<argument pos:start="393:44" pos:end="393:46"><expr pos:start="393:44" pos:end="393:46"><operator pos:start="393:44" pos:end="393:44">&amp;</operator><name pos:start="393:45" pos:end="393:46">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="395:13" pos:end="395:38"><expr pos:start="395:13" pos:end="395:37"><call pos:start="395:13" pos:end="395:37"><name pos:start="395:13" pos:end="395:29">bytestream2_skipu</name><argument_list pos:start="395:30" pos:end="395:37">(<argument pos:start="395:31" pos:end="395:33"><expr pos:start="395:31" pos:end="395:33"><operator pos:start="395:31" pos:end="395:31">&amp;</operator><name pos:start="395:32" pos:end="395:33">gb</name></expr></argument>, <argument pos:start="395:36" pos:end="395:36"><expr pos:start="395:36" pos:end="395:36"><literal type="number" pos:start="395:36" pos:end="395:36">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="395:40" pos:end="395:71">// skip bitmask flag and padding</comment>



            <expr_stmt pos:start="399:13" pos:end="399:51"><expr pos:start="399:13" pos:end="399:50"><name pos:start="399:13" pos:end="399:18"><name pos:start="399:13" pos:end="399:15">dst</name><index pos:start="399:16" pos:end="399:18">[<expr pos:start="399:17" pos:end="399:17"><name pos:start="399:17" pos:end="399:17">i</name></expr>]</index></name> <operator pos:start="399:20" pos:end="399:20">=</operator> <name pos:start="399:22" pos:end="399:24">red</name> <operator pos:start="399:26" pos:end="399:27">&lt;&lt;</operator> <literal type="number" pos:start="399:29" pos:end="399:30">16</literal> <operator pos:start="399:32" pos:end="399:32">|</operator> <name pos:start="399:34" pos:end="399:38">green</name> <operator pos:start="399:40" pos:end="399:41">&lt;&lt;</operator> <literal type="number" pos:start="399:43" pos:end="399:43">8</literal> <operator pos:start="399:45" pos:end="399:45">|</operator> <name pos:start="399:47" pos:end="399:50">blue</name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="407:5" pos:end="407:21"><expr pos:start="407:5" pos:end="407:20"><name pos:start="407:5" pos:end="407:7">ptr</name> <operator pos:start="407:9" pos:end="407:9">=</operator> <name pos:start="407:11" pos:end="407:20"><name pos:start="407:11" pos:end="407:11">p</name><operator pos:start="407:12" pos:end="407:13">-&gt;</operator><name pos:start="407:14" pos:end="407:17">data</name><index pos:start="407:18" pos:end="407:20">[<expr pos:start="407:19" pos:end="407:19"><literal type="number" pos:start="407:19" pos:end="407:19">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <for pos:start="409:5" pos:end="417:5">for <control pos:start="409:9" pos:end="409:39">(<init pos:start="409:10" pos:end="409:15"><expr pos:start="409:10" pos:end="409:14"><name pos:start="409:10" pos:end="409:10">i</name> <operator pos:start="409:12" pos:end="409:12">=</operator> <literal type="number" pos:start="409:14" pos:end="409:14">0</literal></expr>;</init> <condition pos:start="409:17" pos:end="409:34"><expr pos:start="409:17" pos:end="409:33"><name pos:start="409:17" pos:end="409:17">i</name> <operator pos:start="409:19" pos:end="409:19">&lt;</operator> <name pos:start="409:21" pos:end="409:33"><name pos:start="409:21" pos:end="409:25">avctx</name><operator pos:start="409:26" pos:end="409:27">-&gt;</operator><name pos:start="409:28" pos:end="409:33">height</name></name></expr>;</condition> <incr pos:start="409:36" pos:end="409:38"><expr pos:start="409:36" pos:end="409:38"><name pos:start="409:36" pos:end="409:36">i</name><operator pos:start="409:37" pos:end="409:38">++</operator></expr></incr>)</control> <block pos:start="409:41" pos:end="417:5">{<block_content pos:start="411:9" pos:end="415:30">

        <expr_stmt pos:start="411:9" pos:end="411:49"><expr pos:start="411:9" pos:end="411:48"><call pos:start="411:9" pos:end="411:48"><name pos:start="411:9" pos:end="411:31">bytestream2_get_bufferu</name><argument_list pos:start="411:32" pos:end="411:48">(<argument pos:start="411:33" pos:end="411:35"><expr pos:start="411:33" pos:end="411:35"><operator pos:start="411:33" pos:end="411:33">&amp;</operator><name pos:start="411:34" pos:end="411:35">gb</name></expr></argument>, <argument pos:start="411:38" pos:end="411:40"><expr pos:start="411:38" pos:end="411:40"><name pos:start="411:38" pos:end="411:40">ptr</name></expr></argument>, <argument pos:start="411:43" pos:end="411:47"><expr pos:start="411:43" pos:end="411:47"><name pos:start="411:43" pos:end="411:47">rsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="413:9" pos:end="413:46"><expr pos:start="413:9" pos:end="413:45"><call pos:start="413:9" pos:end="413:45"><name pos:start="413:9" pos:end="413:25">bytestream2_skipu</name><argument_list pos:start="413:26" pos:end="413:45">(<argument pos:start="413:27" pos:end="413:29"><expr pos:start="413:27" pos:end="413:29"><operator pos:start="413:27" pos:end="413:27">&amp;</operator><name pos:start="413:28" pos:end="413:29">gb</name></expr></argument>, <argument pos:start="413:32" pos:end="413:44"><expr pos:start="413:32" pos:end="413:44"><name pos:start="413:32" pos:end="413:36">lsize</name> <operator pos:start="413:38" pos:end="413:38">-</operator> <name pos:start="413:40" pos:end="413:44">rsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="415:9" pos:end="415:30"><expr pos:start="415:9" pos:end="415:29"><name pos:start="415:9" pos:end="415:11">ptr</name> <operator pos:start="415:13" pos:end="415:14">+=</operator> <name pos:start="415:16" pos:end="415:29"><name pos:start="415:16" pos:end="415:16">p</name><operator pos:start="415:17" pos:end="415:18">-&gt;</operator><name pos:start="415:19" pos:end="415:26">linesize</name><index pos:start="415:27" pos:end="415:29">[<expr pos:start="415:28" pos:end="415:28"><literal type="number" pos:start="415:28" pos:end="415:28">0</literal></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="421:5" pos:end="421:25"><expr pos:start="421:5" pos:end="421:24"><operator pos:start="421:5" pos:end="421:5">*</operator><name pos:start="421:6" pos:end="421:14">got_frame</name>       <operator pos:start="421:22" pos:end="421:22">=</operator> <literal type="number" pos:start="421:24" pos:end="421:24">1</literal></expr>;</expr_stmt>



    <return pos:start="425:5" pos:end="425:20">return <expr pos:start="425:12" pos:end="425:19"><name pos:start="425:12" pos:end="425:19">buf_size</name></expr>;</return>

</block_content>}</block></function>
</unit>
