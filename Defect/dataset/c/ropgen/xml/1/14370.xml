<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14370.c" pos:tabs="8"><function pos:start="1:1" pos:end="101:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:23">pc_numa_cpu</name><parameter_list pos:start="1:24" pos:end="1:41">(<parameter pos:start="1:25" pos:end="1:40"><decl pos:start="1:25" pos:end="1:40"><type pos:start="1:25" pos:end="1:36"><specifier pos:start="1:25" pos:end="1:29">const</specifier> <name pos:start="1:31" pos:end="1:34">void</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:40">data</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="101:1">{<block_content pos:start="5:5" pos:end="99:16">

    <decl_stmt pos:start="5:5" pos:end="5:14"><decl pos:start="5:5" pos:end="5:13"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:8">char</name> <modifier pos:start="5:10" pos:end="5:10">*</modifier></type><name pos:start="5:11" pos:end="5:13">cli</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:9">QDict</name> <modifier pos:start="7:11" pos:end="7:11">*</modifier></type><name pos:start="7:12" pos:end="7:15">resp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:9">QList</name> <modifier pos:start="9:11" pos:end="9:11">*</modifier></type><name pos:start="9:12" pos:end="9:15">cpus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:19"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:17">QObject</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:20">e</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="25:65"><expr pos:start="15:5" pos:end="25:64"><name pos:start="15:5" pos:end="15:7">cli</name> <operator pos:start="15:9" pos:end="15:9">=</operator> <call pos:start="15:11" pos:end="25:64"><name pos:start="15:11" pos:end="15:18">make_cli</name><argument_list pos:start="15:19" pos:end="25:64">(<argument pos:start="15:20" pos:end="15:23"><expr pos:start="15:20" pos:end="15:23"><name pos:start="15:20" pos:end="15:23">data</name></expr></argument>, <argument pos:start="15:26" pos:end="25:63"><expr pos:start="15:26" pos:end="25:63"><literal type="string" pos:start="15:26" pos:end="15:75">"-cpu pentium -smp 8,sockets=2,cores=2,threads=2 "</literal>

        <literal type="string" pos:start="17:9" pos:end="17:50">"-numa node,nodeid=0 -numa node,nodeid=1 "</literal>

        <literal type="string" pos:start="19:9" pos:end="19:42">"-numa cpu,node-id=1,socket-id=0 "</literal>

        <literal type="string" pos:start="21:9" pos:end="21:52">"-numa cpu,node-id=0,socket-id=1,core-id=0 "</literal>

        <literal type="string" pos:start="23:9" pos:end="23:64">"-numa cpu,node-id=0,socket-id=1,core-id=1,thread-id=0 "</literal>

        <literal type="string" pos:start="25:9" pos:end="25:63">"-numa cpu,node-id=1,socket-id=1,core-id=1,thread-id=1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:21"><expr pos:start="27:5" pos:end="27:20"><call pos:start="27:5" pos:end="27:20"><name pos:start="27:5" pos:end="27:15">qtest_start</name><argument_list pos:start="27:16" pos:end="27:20">(<argument pos:start="27:17" pos:end="27:19"><expr pos:start="27:17" pos:end="27:19"><name pos:start="27:17" pos:end="27:19">cli</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:27"><expr pos:start="29:5" pos:end="29:26"><name pos:start="29:5" pos:end="29:8">cpus</name> <operator pos:start="29:10" pos:end="29:10">=</operator> <call pos:start="29:12" pos:end="29:26"><name pos:start="29:12" pos:end="29:19">get_cpus</name><argument_list pos:start="29:20" pos:end="29:26">(<argument pos:start="29:21" pos:end="29:25"><expr pos:start="29:21" pos:end="29:25"><operator pos:start="29:21" pos:end="29:21">&amp;</operator><name pos:start="29:22" pos:end="29:25">resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:19"><expr pos:start="31:5" pos:end="31:18"><call pos:start="31:5" pos:end="31:18"><name pos:start="31:5" pos:end="31:12">g_assert</name><argument_list pos:start="31:13" pos:end="31:18">(<argument pos:start="31:14" pos:end="31:17"><expr pos:start="31:14" pos:end="31:17"><name pos:start="31:14" pos:end="31:17">cpus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <while pos:start="35:5" pos:end="91:5">while <condition pos:start="35:11" pos:end="35:33">(<expr pos:start="35:12" pos:end="35:32"><operator pos:start="35:12" pos:end="35:12">(</operator><name pos:start="35:13" pos:end="35:13">e</name> <operator pos:start="35:15" pos:end="35:15">=</operator> <call pos:start="35:17" pos:end="35:31"><name pos:start="35:17" pos:end="35:25">qlist_pop</name><argument_list pos:start="35:26" pos:end="35:31">(<argument pos:start="35:27" pos:end="35:30"><expr pos:start="35:27" pos:end="35:30"><name pos:start="35:27" pos:end="35:30">cpus</name></expr></argument>)</argument_list></call><operator pos:start="35:32" pos:end="35:32">)</operator></expr>)</condition> <block pos:start="35:35" pos:end="91:5">{<block_content pos:start="37:9" pos:end="89:9">

        <decl_stmt pos:start="37:9" pos:end="37:27"><decl pos:start="37:9" pos:end="37:18"><type pos:start="37:9" pos:end="37:15"><name pos:start="37:9" pos:end="37:13">QDict</name> <modifier pos:start="37:15" pos:end="37:15">*</modifier></type><name pos:start="37:16" pos:end="37:18">cpu</name></decl>, <decl pos:start="37:21" pos:end="37:26"><type ref="prev" pos:start="37:9" pos:end="37:15"><modifier pos:start="37:21" pos:end="37:21">*</modifier></type><name pos:start="37:22" pos:end="37:26">props</name></decl>;</decl_stmt>

        <decl_stmt pos:start="39:9" pos:end="39:43"><decl pos:start="39:9" pos:end="39:22"><type pos:start="39:9" pos:end="39:15"><name pos:start="39:9" pos:end="39:15">int64_t</name></type> <name pos:start="39:17" pos:end="39:22">socket</name></decl>, <decl pos:start="39:25" pos:end="39:28"><type ref="prev" pos:start="39:9" pos:end="39:15"/><name pos:start="39:25" pos:end="39:28">core</name></decl>, <decl pos:start="39:31" pos:end="39:36"><type ref="prev" pos:start="39:9" pos:end="39:15"/><name pos:start="39:31" pos:end="39:36">thread</name></decl>, <decl pos:start="39:39" pos:end="39:42"><type ref="prev" pos:start="39:9" pos:end="39:15"/><name pos:start="39:39" pos:end="39:42">node</name></decl>;</decl_stmt>



        <expr_stmt pos:start="43:9" pos:end="43:34"><expr pos:start="43:9" pos:end="43:33"><name pos:start="43:9" pos:end="43:11">cpu</name> <operator pos:start="43:13" pos:end="43:13">=</operator> <call pos:start="43:15" pos:end="43:33"><name pos:start="43:15" pos:end="43:30">qobject_to_qdict</name><argument_list pos:start="43:31" pos:end="43:33">(<argument pos:start="43:32" pos:end="43:32"><expr pos:start="43:32" pos:end="43:32"><name pos:start="43:32" pos:end="43:32">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:45"><expr pos:start="45:9" pos:end="45:44"><call pos:start="45:9" pos:end="45:44"><name pos:start="45:9" pos:end="45:16">g_assert</name><argument_list pos:start="45:17" pos:end="45:44">(<argument pos:start="45:18" pos:end="45:43"><expr pos:start="45:18" pos:end="45:43"><call pos:start="45:18" pos:end="45:43"><name pos:start="45:18" pos:end="45:29">qdict_haskey</name><argument_list pos:start="45:30" pos:end="45:43">(<argument pos:start="45:31" pos:end="45:33"><expr pos:start="45:31" pos:end="45:33"><name pos:start="45:31" pos:end="45:33">cpu</name></expr></argument>, <argument pos:start="45:36" pos:end="45:42"><expr pos:start="45:36" pos:end="45:42"><literal type="string" pos:start="45:36" pos:end="45:42">"props"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:46"><expr pos:start="47:9" pos:end="47:45"><name pos:start="47:9" pos:end="47:13">props</name> <operator pos:start="47:15" pos:end="47:15">=</operator> <call pos:start="47:17" pos:end="47:45"><name pos:start="47:17" pos:end="47:31">qdict_get_qdict</name><argument_list pos:start="47:32" pos:end="47:45">(<argument pos:start="47:33" pos:end="47:35"><expr pos:start="47:33" pos:end="47:35"><name pos:start="47:33" pos:end="47:35">cpu</name></expr></argument>, <argument pos:start="47:38" pos:end="47:44"><expr pos:start="47:38" pos:end="47:44"><literal type="string" pos:start="47:38" pos:end="47:44">"props"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="51:9" pos:end="51:49"><expr pos:start="51:9" pos:end="51:48"><call pos:start="51:9" pos:end="51:48"><name pos:start="51:9" pos:end="51:16">g_assert</name><argument_list pos:start="51:17" pos:end="51:48">(<argument pos:start="51:18" pos:end="51:47"><expr pos:start="51:18" pos:end="51:47"><call pos:start="51:18" pos:end="51:47"><name pos:start="51:18" pos:end="51:29">qdict_haskey</name><argument_list pos:start="51:30" pos:end="51:47">(<argument pos:start="51:31" pos:end="51:35"><expr pos:start="51:31" pos:end="51:35"><name pos:start="51:31" pos:end="51:35">props</name></expr></argument>, <argument pos:start="51:38" pos:end="51:46"><expr pos:start="51:38" pos:end="51:46"><literal type="string" pos:start="51:38" pos:end="51:46">"node-id"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:47"><expr pos:start="53:9" pos:end="53:46"><name pos:start="53:9" pos:end="53:12">node</name> <operator pos:start="53:14" pos:end="53:14">=</operator> <call pos:start="53:16" pos:end="53:46"><name pos:start="53:16" pos:end="53:28">qdict_get_int</name><argument_list pos:start="53:29" pos:end="53:46">(<argument pos:start="53:30" pos:end="53:34"><expr pos:start="53:30" pos:end="53:34"><name pos:start="53:30" pos:end="53:34">props</name></expr></argument>, <argument pos:start="53:37" pos:end="53:45"><expr pos:start="53:37" pos:end="53:45"><literal type="string" pos:start="53:37" pos:end="53:45">"node-id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:51"><expr pos:start="55:9" pos:end="55:50"><call pos:start="55:9" pos:end="55:50"><name pos:start="55:9" pos:end="55:16">g_assert</name><argument_list pos:start="55:17" pos:end="55:50">(<argument pos:start="55:18" pos:end="55:49"><expr pos:start="55:18" pos:end="55:49"><call pos:start="55:18" pos:end="55:49"><name pos:start="55:18" pos:end="55:29">qdict_haskey</name><argument_list pos:start="55:30" pos:end="55:49">(<argument pos:start="55:31" pos:end="55:35"><expr pos:start="55:31" pos:end="55:35"><name pos:start="55:31" pos:end="55:35">props</name></expr></argument>, <argument pos:start="55:38" pos:end="55:48"><expr pos:start="55:38" pos:end="55:48"><literal type="string" pos:start="55:38" pos:end="55:48">"socket-id"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:51"><expr pos:start="57:9" pos:end="57:50"><name pos:start="57:9" pos:end="57:14">socket</name> <operator pos:start="57:16" pos:end="57:16">=</operator> <call pos:start="57:18" pos:end="57:50"><name pos:start="57:18" pos:end="57:30">qdict_get_int</name><argument_list pos:start="57:31" pos:end="57:50">(<argument pos:start="57:32" pos:end="57:36"><expr pos:start="57:32" pos:end="57:36"><name pos:start="57:32" pos:end="57:36">props</name></expr></argument>, <argument pos:start="57:39" pos:end="57:49"><expr pos:start="57:39" pos:end="57:49"><literal type="string" pos:start="57:39" pos:end="57:49">"socket-id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:49"><expr pos:start="59:9" pos:end="59:48"><call pos:start="59:9" pos:end="59:48"><name pos:start="59:9" pos:end="59:16">g_assert</name><argument_list pos:start="59:17" pos:end="59:48">(<argument pos:start="59:18" pos:end="59:47"><expr pos:start="59:18" pos:end="59:47"><call pos:start="59:18" pos:end="59:47"><name pos:start="59:18" pos:end="59:29">qdict_haskey</name><argument_list pos:start="59:30" pos:end="59:47">(<argument pos:start="59:31" pos:end="59:35"><expr pos:start="59:31" pos:end="59:35"><name pos:start="59:31" pos:end="59:35">props</name></expr></argument>, <argument pos:start="59:38" pos:end="59:46"><expr pos:start="59:38" pos:end="59:46"><literal type="string" pos:start="59:38" pos:end="59:46">"core-id"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:47"><expr pos:start="61:9" pos:end="61:46"><name pos:start="61:9" pos:end="61:12">core</name> <operator pos:start="61:14" pos:end="61:14">=</operator> <call pos:start="61:16" pos:end="61:46"><name pos:start="61:16" pos:end="61:28">qdict_get_int</name><argument_list pos:start="61:29" pos:end="61:46">(<argument pos:start="61:30" pos:end="61:34"><expr pos:start="61:30" pos:end="61:34"><name pos:start="61:30" pos:end="61:34">props</name></expr></argument>, <argument pos:start="61:37" pos:end="61:45"><expr pos:start="61:37" pos:end="61:45"><literal type="string" pos:start="61:37" pos:end="61:45">"core-id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:51"><expr pos:start="63:9" pos:end="63:50"><call pos:start="63:9" pos:end="63:50"><name pos:start="63:9" pos:end="63:16">g_assert</name><argument_list pos:start="63:17" pos:end="63:50">(<argument pos:start="63:18" pos:end="63:49"><expr pos:start="63:18" pos:end="63:49"><call pos:start="63:18" pos:end="63:49"><name pos:start="63:18" pos:end="63:29">qdict_haskey</name><argument_list pos:start="63:30" pos:end="63:49">(<argument pos:start="63:31" pos:end="63:35"><expr pos:start="63:31" pos:end="63:35"><name pos:start="63:31" pos:end="63:35">props</name></expr></argument>, <argument pos:start="63:38" pos:end="63:48"><expr pos:start="63:38" pos:end="63:48"><literal type="string" pos:start="63:38" pos:end="63:48">"thread-id"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:51"><expr pos:start="65:9" pos:end="65:50"><name pos:start="65:9" pos:end="65:14">thread</name> <operator pos:start="65:16" pos:end="65:16">=</operator> <call pos:start="65:18" pos:end="65:50"><name pos:start="65:18" pos:end="65:30">qdict_get_int</name><argument_list pos:start="65:31" pos:end="65:50">(<argument pos:start="65:32" pos:end="65:36"><expr pos:start="65:32" pos:end="65:36"><name pos:start="65:32" pos:end="65:36">props</name></expr></argument>, <argument pos:start="65:39" pos:end="65:49"><expr pos:start="65:39" pos:end="65:49"><literal type="string" pos:start="65:39" pos:end="65:49">"thread-id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="69:9" pos:end="89:9"><if pos:start="69:9" pos:end="73:9">if <condition pos:start="69:12" pos:end="69:24">(<expr pos:start="69:13" pos:end="69:23"><name pos:start="69:13" pos:end="69:18">socket</name> <operator pos:start="69:20" pos:end="69:21">==</operator> <literal type="number" pos:start="69:23" pos:end="69:23">0</literal></expr>)</condition> <block pos:start="69:26" pos:end="73:9">{<block_content pos:start="71:13" pos:end="71:41">

            <expr_stmt pos:start="71:13" pos:end="71:41"><expr pos:start="71:13" pos:end="71:40"><call pos:start="71:13" pos:end="71:40"><name pos:start="71:13" pos:end="71:27">g_assert_cmpint</name><argument_list pos:start="71:28" pos:end="71:40">(<argument pos:start="71:29" pos:end="71:32"><expr pos:start="71:29" pos:end="71:32"><name pos:start="71:29" pos:end="71:32">node</name></expr></argument>, <argument pos:start="71:35" pos:end="71:36"><expr pos:start="71:35" pos:end="71:36"><operator pos:start="71:35" pos:end="71:36">==</operator></expr></argument>, <argument pos:start="71:39" pos:end="71:39"><expr pos:start="71:39" pos:end="71:39"><literal type="number" pos:start="71:39" pos:end="71:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="73:11" pos:end="77:9">else if <condition pos:start="73:19" pos:end="73:44">(<expr pos:start="73:20" pos:end="73:43"><name pos:start="73:20" pos:end="73:25">socket</name> <operator pos:start="73:27" pos:end="73:28">==</operator> <literal type="number" pos:start="73:30" pos:end="73:30">1</literal> <operator pos:start="73:32" pos:end="73:33">&amp;&amp;</operator> <name pos:start="73:35" pos:end="73:38">core</name> <operator pos:start="73:40" pos:end="73:41">==</operator> <literal type="number" pos:start="73:43" pos:end="73:43">0</literal></expr>)</condition> <block pos:start="73:46" pos:end="77:9">{<block_content pos:start="75:13" pos:end="75:41">

            <expr_stmt pos:start="75:13" pos:end="75:41"><expr pos:start="75:13" pos:end="75:40"><call pos:start="75:13" pos:end="75:40"><name pos:start="75:13" pos:end="75:27">g_assert_cmpint</name><argument_list pos:start="75:28" pos:end="75:40">(<argument pos:start="75:29" pos:end="75:32"><expr pos:start="75:29" pos:end="75:32"><name pos:start="75:29" pos:end="75:32">node</name></expr></argument>, <argument pos:start="75:35" pos:end="75:36"><expr pos:start="75:35" pos:end="75:36"><operator pos:start="75:35" pos:end="75:36">==</operator></expr></argument>, <argument pos:start="75:39" pos:end="75:39"><expr pos:start="75:39" pos:end="75:39"><literal type="number" pos:start="75:39" pos:end="75:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="77:11" pos:end="81:9">else if <condition pos:start="77:19" pos:end="77:59">(<expr pos:start="77:20" pos:end="77:58"><name pos:start="77:20" pos:end="77:25">socket</name> <operator pos:start="77:27" pos:end="77:28">==</operator> <literal type="number" pos:start="77:30" pos:end="77:30">1</literal> <operator pos:start="77:32" pos:end="77:33">&amp;&amp;</operator> <name pos:start="77:35" pos:end="77:38">core</name> <operator pos:start="77:40" pos:end="77:41">==</operator> <literal type="number" pos:start="77:43" pos:end="77:43">1</literal> <operator pos:start="77:45" pos:end="77:46">&amp;&amp;</operator> <name pos:start="77:48" pos:end="77:53">thread</name> <operator pos:start="77:55" pos:end="77:56">==</operator> <literal type="number" pos:start="77:58" pos:end="77:58">0</literal></expr>)</condition> <block pos:start="77:61" pos:end="81:9">{<block_content pos:start="79:13" pos:end="79:41">

            <expr_stmt pos:start="79:13" pos:end="79:41"><expr pos:start="79:13" pos:end="79:40"><call pos:start="79:13" pos:end="79:40"><name pos:start="79:13" pos:end="79:27">g_assert_cmpint</name><argument_list pos:start="79:28" pos:end="79:40">(<argument pos:start="79:29" pos:end="79:32"><expr pos:start="79:29" pos:end="79:32"><name pos:start="79:29" pos:end="79:32">node</name></expr></argument>, <argument pos:start="79:35" pos:end="79:36"><expr pos:start="79:35" pos:end="79:36"><operator pos:start="79:35" pos:end="79:36">==</operator></expr></argument>, <argument pos:start="79:39" pos:end="79:39"><expr pos:start="79:39" pos:end="79:39"><literal type="number" pos:start="79:39" pos:end="79:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="81:11" pos:end="85:9">else if <condition pos:start="81:19" pos:end="81:59">(<expr pos:start="81:20" pos:end="81:58"><name pos:start="81:20" pos:end="81:25">socket</name> <operator pos:start="81:27" pos:end="81:28">==</operator> <literal type="number" pos:start="81:30" pos:end="81:30">1</literal> <operator pos:start="81:32" pos:end="81:33">&amp;&amp;</operator> <name pos:start="81:35" pos:end="81:38">core</name> <operator pos:start="81:40" pos:end="81:41">==</operator> <literal type="number" pos:start="81:43" pos:end="81:43">1</literal> <operator pos:start="81:45" pos:end="81:46">&amp;&amp;</operator> <name pos:start="81:48" pos:end="81:53">thread</name> <operator pos:start="81:55" pos:end="81:56">==</operator> <literal type="number" pos:start="81:58" pos:end="81:58">1</literal></expr>)</condition> <block pos:start="81:61" pos:end="85:9">{<block_content pos:start="83:13" pos:end="83:41">

            <expr_stmt pos:start="83:13" pos:end="83:41"><expr pos:start="83:13" pos:end="83:40"><call pos:start="83:13" pos:end="83:40"><name pos:start="83:13" pos:end="83:27">g_assert_cmpint</name><argument_list pos:start="83:28" pos:end="83:40">(<argument pos:start="83:29" pos:end="83:32"><expr pos:start="83:29" pos:end="83:32"><name pos:start="83:29" pos:end="83:32">node</name></expr></argument>, <argument pos:start="83:35" pos:end="83:36"><expr pos:start="83:35" pos:end="83:36"><operator pos:start="83:35" pos:end="83:36">==</operator></expr></argument>, <argument pos:start="83:39" pos:end="83:39"><expr pos:start="83:39" pos:end="83:39"><literal type="number" pos:start="83:39" pos:end="83:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="85:11" pos:end="89:9">else <block pos:start="85:16" pos:end="89:9">{<block_content pos:start="87:13" pos:end="87:28">

            <expr_stmt pos:start="87:13" pos:end="87:28"><expr pos:start="87:13" pos:end="87:27"><call pos:start="87:13" pos:end="87:27"><name pos:start="87:13" pos:end="87:20">g_assert</name><argument_list pos:start="87:21" pos:end="87:27">(<argument pos:start="87:22" pos:end="87:26"><expr pos:start="87:22" pos:end="87:26"><name pos:start="87:22" pos:end="87:26">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="95:5" pos:end="95:18"><expr pos:start="95:5" pos:end="95:17"><call pos:start="95:5" pos:end="95:17"><name pos:start="95:5" pos:end="95:11">QDECREF</name><argument_list pos:start="95:12" pos:end="95:17">(<argument pos:start="95:13" pos:end="95:16"><expr pos:start="95:13" pos:end="95:16"><name pos:start="95:13" pos:end="95:16">resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:16"><expr pos:start="97:5" pos:end="97:15"><call pos:start="97:5" pos:end="97:15"><name pos:start="97:5" pos:end="97:13">qtest_end</name><argument_list pos:start="97:14" pos:end="97:15">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:16"><expr pos:start="99:5" pos:end="99:15"><call pos:start="99:5" pos:end="99:15"><name pos:start="99:5" pos:end="99:10">g_free</name><argument_list pos:start="99:11" pos:end="99:15">(<argument pos:start="99:12" pos:end="99:14"><expr pos:start="99:12" pos:end="99:14"><name pos:start="99:12" pos:end="99:14">cli</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
