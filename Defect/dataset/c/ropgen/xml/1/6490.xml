<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6490.c" pos:tabs="8"><function pos:start="1:1" pos:end="213:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:19">run_test</name><parameter_list pos:start="1:20" pos:end="3:44">(<parameter pos:start="1:21" pos:end="1:32"><decl pos:start="1:21" pos:end="1:32"><type pos:start="1:21" pos:end="1:32"><name pos:start="1:21" pos:end="1:27">AVCodec</name> <modifier pos:start="1:29" pos:end="1:29">*</modifier></type><name pos:start="1:30" pos:end="1:32">enc</name></decl></parameter>, <parameter pos:start="1:35" pos:end="1:46"><decl pos:start="1:35" pos:end="1:46"><type pos:start="1:35" pos:end="1:46"><name pos:start="1:35" pos:end="1:41">AVCodec</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:46">dec</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:71"><decl pos:start="1:49" pos:end="1:71"><type pos:start="1:49" pos:end="1:71"><name pos:start="1:49" pos:end="1:62">AVCodecContext</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:71">enc_ctx</name></decl></parameter>,

                    <parameter pos:start="3:21" pos:end="3:43"><decl pos:start="3:21" pos:end="3:43"><type pos:start="3:21" pos:end="3:43"><name pos:start="3:21" pos:end="3:34">AVCodecContext</name> <modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:43">dec_ctx</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="213:1">{<block_content pos:start="7:5" pos:end="211:13">

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">AVPacket</name></type> <name pos:start="7:14" pos:end="7:20">enc_pkt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:34"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">AVFrame</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:21">in_frame</name></decl>, <decl pos:start="9:24" pos:end="9:33"><type ref="prev" pos:start="9:5" pos:end="9:13"><modifier pos:start="9:24" pos:end="9:24">*</modifier></type><name pos:start="9:25" pos:end="9:33">out_frame</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:44"><decl pos:start="11:5" pos:end="11:26"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">uint8_t</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:19">raw_in</name> <init pos:start="11:21" pos:end="11:26">= <expr pos:start="11:23" pos:end="11:26"><name pos:start="11:23" pos:end="11:26">NULL</name></expr></init></decl>, <decl pos:start="11:29" pos:end="11:43"><type ref="prev" pos:start="11:5" pos:end="11:13"><modifier pos:start="11:29" pos:end="11:29">*</modifier></type><name pos:start="11:30" pos:end="11:36">raw_out</name> <init pos:start="11:38" pos:end="11:43">= <expr pos:start="11:40" pos:end="11:43"><name pos:start="11:40" pos:end="11:43">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:38"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:17">in_offset</name> <init pos:start="13:19" pos:end="13:21">= <expr pos:start="13:21" pos:end="13:21"><literal type="number" pos:start="13:21" pos:end="13:21">0</literal></expr></init></decl>, <decl pos:start="13:24" pos:end="13:37"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:24" pos:end="13:33">out_offset</name> <init pos:start="13:35" pos:end="13:37">= <expr pos:start="13:37" pos:end="13:37"><literal type="number" pos:start="13:37" pos:end="13:37">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:23">frame_data_size</name> <init pos:start="15:25" pos:end="15:27">= <expr pos:start="15:27" pos:end="15:27"><literal type="number" pos:start="15:27" pos:end="15:27">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:14">result</name> <init pos:start="17:16" pos:end="17:18">= <expr pos:start="17:18" pos:end="17:18"><literal type="number" pos:start="17:18" pos:end="17:18">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:23"><decl pos:start="19:5" pos:end="19:22"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:18">got_output</name> <init pos:start="19:20" pos:end="19:22">= <expr pos:start="19:22" pos:end="19:22"><literal type="number" pos:start="19:22" pos:end="19:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:14"><decl pos:start="21:5" pos:end="21:13"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:9">i</name> <init pos:start="21:11" pos:end="21:13">= <expr pos:start="21:13" pos:end="21:13"><literal type="number" pos:start="21:13" pos:end="21:13">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:32"><expr pos:start="25:5" pos:end="25:31"><name pos:start="25:5" pos:end="25:12">in_frame</name> <operator pos:start="25:14" pos:end="25:14">=</operator> <call pos:start="25:16" pos:end="25:31"><name pos:start="25:16" pos:end="25:29">av_frame_alloc</name><argument_list pos:start="25:30" pos:end="25:31">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:18">(<expr pos:start="27:9" pos:end="27:17"><operator pos:start="27:9" pos:end="27:9">!</operator><name pos:start="27:10" pos:end="27:17">in_frame</name></expr>)</condition> <block pos:start="27:20" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:31">

        <expr_stmt pos:start="29:9" pos:end="29:67"><expr pos:start="29:9" pos:end="29:66"><call pos:start="29:9" pos:end="29:66"><name pos:start="29:9" pos:end="29:14">av_log</name><argument_list pos:start="29:15" pos:end="29:66">(<argument pos:start="29:16" pos:end="29:19"><expr pos:start="29:16" pos:end="29:19"><name pos:start="29:16" pos:end="29:19">NULL</name></expr></argument>, <argument pos:start="29:22" pos:end="29:33"><expr pos:start="29:22" pos:end="29:33"><name pos:start="29:22" pos:end="29:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="29:36" pos:end="29:65"><expr pos:start="29:36" pos:end="29:65"><literal type="string" pos:start="29:36" pos:end="29:65">"Can't allocate input frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:31">return <expr pos:start="31:16" pos:end="31:30"><call pos:start="31:16" pos:end="31:30"><name pos:start="31:16" pos:end="31:22">AVERROR</name><argument_list pos:start="31:23" pos:end="31:30">(<argument pos:start="31:24" pos:end="31:29"><expr pos:start="31:24" pos:end="31:29"><name pos:start="31:24" pos:end="31:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:47"><expr pos:start="37:5" pos:end="37:46"><name pos:start="37:5" pos:end="37:24"><name pos:start="37:5" pos:end="37:12">in_frame</name><operator pos:start="37:13" pos:end="37:14">-&gt;</operator><name pos:start="37:15" pos:end="37:24">nb_samples</name></name> <operator pos:start="37:26" pos:end="37:26">=</operator> <name pos:start="37:28" pos:end="37:46"><name pos:start="37:28" pos:end="37:34">enc_ctx</name><operator pos:start="37:35" pos:end="37:36">-&gt;</operator><name pos:start="37:37" pos:end="37:46">frame_size</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:43"><expr pos:start="39:5" pos:end="39:42"><name pos:start="39:5" pos:end="39:20"><name pos:start="39:5" pos:end="39:12">in_frame</name><operator pos:start="39:13" pos:end="39:14">-&gt;</operator><name pos:start="39:15" pos:end="39:20">format</name></name> <operator pos:start="39:22" pos:end="39:22">=</operator> <name pos:start="39:24" pos:end="39:42"><name pos:start="39:24" pos:end="39:30">enc_ctx</name><operator pos:start="39:31" pos:end="39:32">-&gt;</operator><name pos:start="39:33" pos:end="39:42">sample_fmt</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:55"><expr pos:start="41:5" pos:end="41:54"><name pos:start="41:5" pos:end="41:28"><name pos:start="41:5" pos:end="41:12">in_frame</name><operator pos:start="41:13" pos:end="41:14">-&gt;</operator><name pos:start="41:15" pos:end="41:28">channel_layout</name></name> <operator pos:start="41:30" pos:end="41:30">=</operator> <name pos:start="41:32" pos:end="41:54"><name pos:start="41:32" pos:end="41:38">enc_ctx</name><operator pos:start="41:39" pos:end="41:40">-&gt;</operator><name pos:start="41:41" pos:end="41:54">channel_layout</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="43:5" pos:end="49:5"><if pos:start="43:5" pos:end="49:5">if <condition pos:start="43:8" pos:end="43:47">(<expr pos:start="43:9" pos:end="43:46"><call pos:start="43:9" pos:end="43:41"><name pos:start="43:9" pos:end="43:27">av_frame_get_buffer</name><argument_list pos:start="43:28" pos:end="43:41">(<argument pos:start="43:29" pos:end="43:36"><expr pos:start="43:29" pos:end="43:36"><name pos:start="43:29" pos:end="43:36">in_frame</name></expr></argument>, <argument pos:start="43:39" pos:end="43:40"><expr pos:start="43:39" pos:end="43:40"><literal type="number" pos:start="43:39" pos:end="43:40">32</literal></expr></argument>)</argument_list></call> <operator pos:start="43:43" pos:end="43:44">!=</operator> <literal type="number" pos:start="43:46" pos:end="43:46">0</literal></expr>)</condition> <block pos:start="43:49" pos:end="49:5">{<block_content pos:start="45:9" pos:end="47:31">

        <expr_stmt pos:start="45:9" pos:end="45:80"><expr pos:start="45:9" pos:end="45:79"><call pos:start="45:9" pos:end="45:79"><name pos:start="45:9" pos:end="45:14">av_log</name><argument_list pos:start="45:15" pos:end="45:79">(<argument pos:start="45:16" pos:end="45:19"><expr pos:start="45:16" pos:end="45:19"><name pos:start="45:16" pos:end="45:19">NULL</name></expr></argument>, <argument pos:start="45:22" pos:end="45:33"><expr pos:start="45:22" pos:end="45:33"><name pos:start="45:22" pos:end="45:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="45:36" pos:end="45:78"><expr pos:start="45:36" pos:end="45:78"><literal type="string" pos:start="45:36" pos:end="45:78">"Can't allocate a buffer for input frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="47:9" pos:end="47:31">return <expr pos:start="47:16" pos:end="47:30"><call pos:start="47:16" pos:end="47:30"><name pos:start="47:16" pos:end="47:22">AVERROR</name><argument_list pos:start="47:23" pos:end="47:30">(<argument pos:start="47:24" pos:end="47:29"><expr pos:start="47:24" pos:end="47:29"><name pos:start="47:24" pos:end="47:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:33"><expr pos:start="53:5" pos:end="53:32"><name pos:start="53:5" pos:end="53:13">out_frame</name> <operator pos:start="53:15" pos:end="53:15">=</operator> <call pos:start="53:17" pos:end="53:32"><name pos:start="53:17" pos:end="53:30">av_frame_alloc</name><argument_list pos:start="53:31" pos:end="53:32">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="55:5" pos:end="61:5"><if pos:start="55:5" pos:end="61:5">if <condition pos:start="55:8" pos:end="55:19">(<expr pos:start="55:9" pos:end="55:18"><operator pos:start="55:9" pos:end="55:9">!</operator><name pos:start="55:10" pos:end="55:18">out_frame</name></expr>)</condition> <block pos:start="55:21" pos:end="61:5">{<block_content pos:start="57:9" pos:end="59:31">

        <expr_stmt pos:start="57:9" pos:end="57:68"><expr pos:start="57:9" pos:end="57:67"><call pos:start="57:9" pos:end="57:67"><name pos:start="57:9" pos:end="57:14">av_log</name><argument_list pos:start="57:15" pos:end="57:67">(<argument pos:start="57:16" pos:end="57:19"><expr pos:start="57:16" pos:end="57:19"><name pos:start="57:16" pos:end="57:19">NULL</name></expr></argument>, <argument pos:start="57:22" pos:end="57:33"><expr pos:start="57:22" pos:end="57:33"><name pos:start="57:22" pos:end="57:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="57:36" pos:end="57:66"><expr pos:start="57:36" pos:end="57:66"><literal type="string" pos:start="57:36" pos:end="57:66">"Can't allocate output frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="59:9" pos:end="59:31">return <expr pos:start="59:16" pos:end="59:30"><call pos:start="59:16" pos:end="59:30"><name pos:start="59:16" pos:end="59:22">AVERROR</name><argument_list pos:start="59:23" pos:end="59:30">(<argument pos:start="59:24" pos:end="59:29"><expr pos:start="59:24" pos:end="59:29"><name pos:start="59:24" pos:end="59:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:65"><expr pos:start="65:5" pos:end="65:64"><name pos:start="65:5" pos:end="65:10">raw_in</name> <operator pos:start="65:12" pos:end="65:12">=</operator> <call pos:start="65:14" pos:end="65:64"><name pos:start="65:14" pos:end="65:22">av_malloc</name><argument_list pos:start="65:23" pos:end="65:64">(<argument pos:start="65:24" pos:end="65:63"><expr pos:start="65:24" pos:end="65:63"><name pos:start="65:24" pos:end="65:44"><name pos:start="65:24" pos:end="65:31">in_frame</name><operator pos:start="65:32" pos:end="65:33">-&gt;</operator><name pos:start="65:34" pos:end="65:41">linesize</name><index pos:start="65:42" pos:end="65:44">[<expr pos:start="65:43" pos:end="65:43"><literal type="number" pos:start="65:43" pos:end="65:43">0</literal></expr>]</index></name> <operator pos:start="65:46" pos:end="65:46">*</operator> <name pos:start="65:48" pos:end="65:63">NUMBER_OF_FRAMES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="67:5" pos:end="73:5"><if pos:start="67:5" pos:end="73:5">if <condition pos:start="67:8" pos:end="67:16">(<expr pos:start="67:9" pos:end="67:15"><operator pos:start="67:9" pos:end="67:9">!</operator><name pos:start="67:10" pos:end="67:15">raw_in</name></expr>)</condition> <block pos:start="67:18" pos:end="73:5">{<block_content pos:start="69:9" pos:end="71:31">

        <expr_stmt pos:start="69:9" pos:end="69:73"><expr pos:start="69:9" pos:end="69:72"><call pos:start="69:9" pos:end="69:72"><name pos:start="69:9" pos:end="69:14">av_log</name><argument_list pos:start="69:15" pos:end="69:72">(<argument pos:start="69:16" pos:end="69:19"><expr pos:start="69:16" pos:end="69:19"><name pos:start="69:16" pos:end="69:19">NULL</name></expr></argument>, <argument pos:start="69:22" pos:end="69:33"><expr pos:start="69:22" pos:end="69:33"><name pos:start="69:22" pos:end="69:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="69:36" pos:end="69:71"><expr pos:start="69:36" pos:end="69:71"><literal type="string" pos:start="69:36" pos:end="69:71">"Can't allocate memory for raw_in\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="71:9" pos:end="71:31">return <expr pos:start="71:16" pos:end="71:30"><call pos:start="71:16" pos:end="71:30"><name pos:start="71:16" pos:end="71:22">AVERROR</name><argument_list pos:start="71:23" pos:end="71:30">(<argument pos:start="71:24" pos:end="71:29"><expr pos:start="71:24" pos:end="71:29"><name pos:start="71:24" pos:end="71:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:66"><expr pos:start="77:5" pos:end="77:65"><name pos:start="77:5" pos:end="77:11">raw_out</name> <operator pos:start="77:13" pos:end="77:13">=</operator> <call pos:start="77:15" pos:end="77:65"><name pos:start="77:15" pos:end="77:23">av_malloc</name><argument_list pos:start="77:24" pos:end="77:65">(<argument pos:start="77:25" pos:end="77:64"><expr pos:start="77:25" pos:end="77:64"><name pos:start="77:25" pos:end="77:45"><name pos:start="77:25" pos:end="77:32">in_frame</name><operator pos:start="77:33" pos:end="77:34">-&gt;</operator><name pos:start="77:35" pos:end="77:42">linesize</name><index pos:start="77:43" pos:end="77:45">[<expr pos:start="77:44" pos:end="77:44"><literal type="number" pos:start="77:44" pos:end="77:44">0</literal></expr>]</index></name> <operator pos:start="77:47" pos:end="77:47">*</operator> <name pos:start="77:49" pos:end="77:64">NUMBER_OF_FRAMES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="79:5" pos:end="85:5"><if pos:start="79:5" pos:end="85:5">if <condition pos:start="79:8" pos:end="79:17">(<expr pos:start="79:9" pos:end="79:16"><operator pos:start="79:9" pos:end="79:9">!</operator><name pos:start="79:10" pos:end="79:16">raw_out</name></expr>)</condition> <block pos:start="79:19" pos:end="85:5">{<block_content pos:start="81:9" pos:end="83:31">

        <expr_stmt pos:start="81:9" pos:end="81:74"><expr pos:start="81:9" pos:end="81:73"><call pos:start="81:9" pos:end="81:73"><name pos:start="81:9" pos:end="81:14">av_log</name><argument_list pos:start="81:15" pos:end="81:73">(<argument pos:start="81:16" pos:end="81:19"><expr pos:start="81:16" pos:end="81:19"><name pos:start="81:16" pos:end="81:19">NULL</name></expr></argument>, <argument pos:start="81:22" pos:end="81:33"><expr pos:start="81:22" pos:end="81:33"><name pos:start="81:22" pos:end="81:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="81:36" pos:end="81:72"><expr pos:start="81:36" pos:end="81:72"><literal type="string" pos:start="81:36" pos:end="81:72">"Can't allocate memory for raw_out\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="83:9" pos:end="83:31">return <expr pos:start="83:16" pos:end="83:30"><call pos:start="83:16" pos:end="83:30"><name pos:start="83:16" pos:end="83:22">AVERROR</name><argument_list pos:start="83:23" pos:end="83:30">(<argument pos:start="83:24" pos:end="83:29"><expr pos:start="83:24" pos:end="83:29"><name pos:start="83:24" pos:end="83:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="89:5" pos:end="185:5">for <control pos:start="89:9" pos:end="89:42">(<init pos:start="89:10" pos:end="89:15"><expr pos:start="89:10" pos:end="89:14"><name pos:start="89:10" pos:end="89:10">i</name> <operator pos:start="89:12" pos:end="89:12">=</operator> <literal type="number" pos:start="89:14" pos:end="89:14">0</literal></expr>;</init> <condition pos:start="89:17" pos:end="89:37"><expr pos:start="89:17" pos:end="89:36"><name pos:start="89:17" pos:end="89:17">i</name> <operator pos:start="89:19" pos:end="89:19">&lt;</operator> <name pos:start="89:21" pos:end="89:36">NUMBER_OF_FRAMES</name></expr>;</condition> <incr pos:start="89:39" pos:end="89:41"><expr pos:start="89:39" pos:end="89:41"><name pos:start="89:39" pos:end="89:39">i</name><operator pos:start="89:40" pos:end="89:41">++</operator></expr></incr>)</control> <block pos:start="89:44" pos:end="185:5">{<block_content pos:start="91:9" pos:end="183:33">

        <expr_stmt pos:start="91:9" pos:end="91:33"><expr pos:start="91:9" pos:end="91:32"><call pos:start="91:9" pos:end="91:32"><name pos:start="91:9" pos:end="91:22">av_init_packet</name><argument_list pos:start="91:23" pos:end="91:32">(<argument pos:start="91:24" pos:end="91:31"><expr pos:start="91:24" pos:end="91:31"><operator pos:start="91:24" pos:end="91:24">&amp;</operator><name pos:start="91:25" pos:end="91:31">enc_pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:28"><expr pos:start="93:9" pos:end="93:27"><name pos:start="93:9" pos:end="93:20"><name pos:start="93:9" pos:end="93:15">enc_pkt</name><operator pos:start="93:16" pos:end="93:16">.</operator><name pos:start="93:17" pos:end="93:20">data</name></name> <operator pos:start="93:22" pos:end="93:22">=</operator> <name pos:start="93:24" pos:end="93:27">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:25"><expr pos:start="95:9" pos:end="95:24"><name pos:start="95:9" pos:end="95:20"><name pos:start="95:9" pos:end="95:15">enc_pkt</name><operator pos:start="95:16" pos:end="95:16">.</operator><name pos:start="95:17" pos:end="95:20">size</name></name> <operator pos:start="95:22" pos:end="95:22">=</operator> <literal type="number" pos:start="95:24" pos:end="95:24">0</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="99:9" pos:end="101:67"><expr pos:start="99:9" pos:end="101:66"><call pos:start="99:9" pos:end="101:66"><name pos:start="99:9" pos:end="99:26">generate_raw_frame</name><argument_list pos:start="99:27" pos:end="101:66">(<argument pos:start="99:28" pos:end="99:57"><expr pos:start="99:28" pos:end="99:57"><operator pos:start="99:28" pos:end="99:28">(</operator><name pos:start="99:29" pos:end="99:36">uint16_t</name><operator pos:start="99:37" pos:end="99:37">*</operator><operator pos:start="99:38" pos:end="99:38">)</operator><operator pos:start="99:39" pos:end="99:39">(</operator><name pos:start="99:40" pos:end="99:56"><name pos:start="99:40" pos:end="99:47">in_frame</name><operator pos:start="99:48" pos:end="99:49">-&gt;</operator><name pos:start="99:50" pos:end="99:53">data</name><index pos:start="99:54" pos:end="99:56">[<expr pos:start="99:55" pos:end="99:55"><literal type="number" pos:start="99:55" pos:end="99:55">0</literal></expr>]</index></name><operator pos:start="99:57" pos:end="99:57">)</operator></expr></argument>, <argument pos:start="99:60" pos:end="99:60"><expr pos:start="99:60" pos:end="99:60"><name pos:start="99:60" pos:end="99:60">i</name></expr></argument>, <argument pos:start="99:63" pos:end="99:82"><expr pos:start="99:63" pos:end="99:82"><name pos:start="99:63" pos:end="99:82"><name pos:start="99:63" pos:end="99:69">enc_ctx</name><operator pos:start="99:70" pos:end="99:71">-&gt;</operator><name pos:start="99:72" pos:end="99:82">sample_rate</name></name></expr></argument>,

                           <argument pos:start="101:28" pos:end="101:44"><expr pos:start="101:28" pos:end="101:44"><name pos:start="101:28" pos:end="101:44"><name pos:start="101:28" pos:end="101:34">enc_ctx</name><operator pos:start="101:35" pos:end="101:36">-&gt;</operator><name pos:start="101:37" pos:end="101:44">channels</name></name></expr></argument>, <argument pos:start="101:47" pos:end="101:65"><expr pos:start="101:47" pos:end="101:65"><name pos:start="101:47" pos:end="101:65"><name pos:start="101:47" pos:end="101:53">enc_ctx</name><operator pos:start="101:54" pos:end="101:55">-&gt;</operator><name pos:start="101:56" pos:end="101:65">frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:77"><expr pos:start="103:9" pos:end="103:76"><call pos:start="103:9" pos:end="103:76"><name pos:start="103:9" pos:end="103:14">memcpy</name><argument_list pos:start="103:15" pos:end="103:76">(<argument pos:start="103:16" pos:end="103:33"><expr pos:start="103:16" pos:end="103:33"><name pos:start="103:16" pos:end="103:21">raw_in</name> <operator pos:start="103:23" pos:end="103:23">+</operator> <name pos:start="103:25" pos:end="103:33">in_offset</name></expr></argument>, <argument pos:start="103:36" pos:end="103:52"><expr pos:start="103:36" pos:end="103:52"><name pos:start="103:36" pos:end="103:52"><name pos:start="103:36" pos:end="103:43">in_frame</name><operator pos:start="103:44" pos:end="103:45">-&gt;</operator><name pos:start="103:46" pos:end="103:49">data</name><index pos:start="103:50" pos:end="103:52">[<expr pos:start="103:51" pos:end="103:51"><literal type="number" pos:start="103:51" pos:end="103:51">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="103:55" pos:end="103:75"><expr pos:start="103:55" pos:end="103:75"><name pos:start="103:55" pos:end="103:75"><name pos:start="103:55" pos:end="103:62">in_frame</name><operator pos:start="103:63" pos:end="103:64">-&gt;</operator><name pos:start="103:65" pos:end="103:72">linesize</name><index pos:start="103:73" pos:end="103:75">[<expr pos:start="103:74" pos:end="103:74"><literal type="number" pos:start="103:74" pos:end="103:74">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:43"><expr pos:start="105:9" pos:end="105:42"><name pos:start="105:9" pos:end="105:17">in_offset</name> <operator pos:start="105:19" pos:end="105:20">+=</operator> <name pos:start="105:22" pos:end="105:42"><name pos:start="105:22" pos:end="105:29">in_frame</name><operator pos:start="105:30" pos:end="105:31">-&gt;</operator><name pos:start="105:32" pos:end="105:39">linesize</name><index pos:start="105:40" pos:end="105:42">[<expr pos:start="105:41" pos:end="105:41"><literal type="number" pos:start="105:41" pos:end="105:41">0</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:81"><expr pos:start="107:9" pos:end="107:80"><name pos:start="107:9" pos:end="107:14">result</name> <operator pos:start="107:16" pos:end="107:16">=</operator> <call pos:start="107:18" pos:end="107:80"><name pos:start="107:18" pos:end="107:38">avcodec_encode_audio2</name><argument_list pos:start="107:39" pos:end="107:80">(<argument pos:start="107:40" pos:end="107:46"><expr pos:start="107:40" pos:end="107:46"><name pos:start="107:40" pos:end="107:46">enc_ctx</name></expr></argument>, <argument pos:start="107:49" pos:end="107:56"><expr pos:start="107:49" pos:end="107:56"><operator pos:start="107:49" pos:end="107:49">&amp;</operator><name pos:start="107:50" pos:end="107:56">enc_pkt</name></expr></argument>, <argument pos:start="107:59" pos:end="107:66"><expr pos:start="107:59" pos:end="107:66"><name pos:start="107:59" pos:end="107:66">in_frame</name></expr></argument>, <argument pos:start="107:69" pos:end="107:79"><expr pos:start="107:69" pos:end="107:79"><operator pos:start="107:69" pos:end="107:69">&amp;</operator><name pos:start="107:70" pos:end="107:79">got_output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="109:9" pos:end="115:9"><if pos:start="109:9" pos:end="115:9">if <condition pos:start="109:12" pos:end="109:23">(<expr pos:start="109:13" pos:end="109:22"><name pos:start="109:13" pos:end="109:18">result</name> <operator pos:start="109:20" pos:end="109:20">&lt;</operator> <literal type="number" pos:start="109:22" pos:end="109:22">0</literal></expr>)</condition> <block pos:start="109:25" pos:end="115:9">{<block_content pos:start="111:13" pos:end="113:26">

            <expr_stmt pos:start="111:13" pos:end="111:71"><expr pos:start="111:13" pos:end="111:70"><call pos:start="111:13" pos:end="111:70"><name pos:start="111:13" pos:end="111:18">av_log</name><argument_list pos:start="111:19" pos:end="111:70">(<argument pos:start="111:20" pos:end="111:23"><expr pos:start="111:20" pos:end="111:23"><name pos:start="111:20" pos:end="111:23">NULL</name></expr></argument>, <argument pos:start="111:26" pos:end="111:37"><expr pos:start="111:26" pos:end="111:37"><name pos:start="111:26" pos:end="111:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="111:40" pos:end="111:69"><expr pos:start="111:40" pos:end="111:69"><literal type="string" pos:start="111:40" pos:end="111:69">"Error encoding audio frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="113:13" pos:end="113:26">return <expr pos:start="113:20" pos:end="113:25"><name pos:start="113:20" pos:end="113:25">result</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="119:9" pos:end="119:74">/* if we get an encoded packet, feed it straight to the decoder */</comment>

        <if_stmt pos:start="121:9" pos:end="181:9"><if pos:start="121:9" pos:end="181:9">if <condition pos:start="121:12" pos:end="121:23">(<expr pos:start="121:13" pos:end="121:22"><name pos:start="121:13" pos:end="121:22">got_output</name></expr>)</condition> <block pos:start="121:25" pos:end="181:9">{<block_content pos:start="123:13" pos:end="179:13">

            <expr_stmt pos:start="123:13" pos:end="123:86"><expr pos:start="123:13" pos:end="123:85"><name pos:start="123:13" pos:end="123:18">result</name> <operator pos:start="123:20" pos:end="123:20">=</operator> <call pos:start="123:22" pos:end="123:85"><name pos:start="123:22" pos:end="123:42">avcodec_decode_audio4</name><argument_list pos:start="123:43" pos:end="123:85">(<argument pos:start="123:44" pos:end="123:50"><expr pos:start="123:44" pos:end="123:50"><name pos:start="123:44" pos:end="123:50">dec_ctx</name></expr></argument>, <argument pos:start="123:53" pos:end="123:61"><expr pos:start="123:53" pos:end="123:61"><name pos:start="123:53" pos:end="123:61">out_frame</name></expr></argument>, <argument pos:start="123:64" pos:end="123:74"><expr pos:start="123:64" pos:end="123:74"><operator pos:start="123:64" pos:end="123:64">&amp;</operator><name pos:start="123:65" pos:end="123:74">got_output</name></expr></argument>, <argument pos:start="123:77" pos:end="123:84"><expr pos:start="123:77" pos:end="123:84"><operator pos:start="123:77" pos:end="123:77">&amp;</operator><name pos:start="123:78" pos:end="123:84">enc_pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="125:13" pos:end="131:13"><if pos:start="125:13" pos:end="131:13">if <condition pos:start="125:16" pos:end="125:27">(<expr pos:start="125:17" pos:end="125:26"><name pos:start="125:17" pos:end="125:22">result</name> <operator pos:start="125:24" pos:end="125:24">&lt;</operator> <literal type="number" pos:start="125:26" pos:end="125:26">0</literal></expr>)</condition> <block pos:start="125:29" pos:end="131:13">{<block_content pos:start="127:17" pos:end="129:30">

                <expr_stmt pos:start="127:17" pos:end="127:76"><expr pos:start="127:17" pos:end="127:75"><call pos:start="127:17" pos:end="127:75"><name pos:start="127:17" pos:end="127:22">av_log</name><argument_list pos:start="127:23" pos:end="127:75">(<argument pos:start="127:24" pos:end="127:27"><expr pos:start="127:24" pos:end="127:27"><name pos:start="127:24" pos:end="127:27">NULL</name></expr></argument>, <argument pos:start="127:30" pos:end="127:41"><expr pos:start="127:30" pos:end="127:41"><name pos:start="127:30" pos:end="127:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="127:44" pos:end="127:74"><expr pos:start="127:44" pos:end="127:74"><literal type="string" pos:start="127:44" pos:end="127:74">"Error decoding audio packet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="129:17" pos:end="129:30">return <expr pos:start="129:24" pos:end="129:29"><name pos:start="129:24" pos:end="129:29">result</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="135:13" pos:end="179:13"><if pos:start="135:13" pos:end="179:13">if <condition pos:start="135:16" pos:end="135:27">(<expr pos:start="135:17" pos:end="135:26"><name pos:start="135:17" pos:end="135:26">got_output</name></expr>)</condition> <block pos:start="135:29" pos:end="179:13">{<block_content pos:start="137:17" pos:end="177:53">

                <if_stmt pos:start="137:17" pos:end="143:17"><if pos:start="137:17" pos:end="143:17">if <condition pos:start="137:20" pos:end="137:43">(<expr pos:start="137:21" pos:end="137:42"><name pos:start="137:21" pos:end="137:26">result</name> <operator pos:start="137:28" pos:end="137:29">!=</operator> <name pos:start="137:31" pos:end="137:42"><name pos:start="137:31" pos:end="137:37">enc_pkt</name><operator pos:start="137:38" pos:end="137:38">.</operator><name pos:start="137:39" pos:end="137:42">size</name></name></expr>)</condition> <block pos:start="137:45" pos:end="143:17">{<block_content pos:start="139:21" pos:end="141:43">

                    <expr_stmt pos:start="139:21" pos:end="139:142"><expr pos:start="139:21" pos:end="139:141"><call pos:start="139:21" pos:end="139:141"><name pos:start="139:21" pos:end="139:26">av_log</name><argument_list pos:start="139:27" pos:end="139:141">(<argument pos:start="139:28" pos:end="139:31"><expr pos:start="139:28" pos:end="139:31"><name pos:start="139:28" pos:end="139:31">NULL</name></expr></argument>, <argument pos:start="139:34" pos:end="139:44"><expr pos:start="139:34" pos:end="139:44"><name pos:start="139:34" pos:end="139:44">AV_LOG_INFO</name></expr></argument>, <argument pos:start="139:47" pos:end="139:140"><expr pos:start="139:47" pos:end="139:140"><literal type="string" pos:start="139:47" pos:end="139:140">"Decoder consumed only part of a packet, it is allowed to do so -- need to update this test\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="141:21" pos:end="141:43">return <expr pos:start="141:28" pos:end="141:42"><name pos:start="141:28" pos:end="141:42">AVERROR_UNKNOWN</name></expr>;</return>

                </block_content>}</block></if></if_stmt>



                <if_stmt pos:start="147:17" pos:end="153:17"><if pos:start="147:17" pos:end="153:17">if <condition pos:start="147:20" pos:end="147:66">(<expr pos:start="147:21" pos:end="147:65"><name pos:start="147:21" pos:end="147:40"><name pos:start="147:21" pos:end="147:28">in_frame</name><operator pos:start="147:29" pos:end="147:30">-&gt;</operator><name pos:start="147:31" pos:end="147:40">nb_samples</name></name> <operator pos:start="147:42" pos:end="147:43">!=</operator> <name pos:start="147:45" pos:end="147:65"><name pos:start="147:45" pos:end="147:53">out_frame</name><operator pos:start="147:54" pos:end="147:55">-&gt;</operator><name pos:start="147:56" pos:end="147:65">nb_samples</name></name></expr>)</condition> <block pos:start="147:68" pos:end="153:17">{<block_content pos:start="149:21" pos:end="151:43">

                    <expr_stmt pos:start="149:21" pos:end="149:123"><expr pos:start="149:21" pos:end="149:122"><call pos:start="149:21" pos:end="149:122"><name pos:start="149:21" pos:end="149:26">av_log</name><argument_list pos:start="149:27" pos:end="149:122">(<argument pos:start="149:28" pos:end="149:31"><expr pos:start="149:28" pos:end="149:31"><name pos:start="149:28" pos:end="149:31">NULL</name></expr></argument>, <argument pos:start="149:34" pos:end="149:45"><expr pos:start="149:34" pos:end="149:45"><name pos:start="149:34" pos:end="149:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="149:48" pos:end="149:121"><expr pos:start="149:48" pos:end="149:121"><literal type="string" pos:start="149:48" pos:end="149:121">"Error frames before and after decoding has different number of samples\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="151:21" pos:end="151:43">return <expr pos:start="151:28" pos:end="151:42"><name pos:start="151:28" pos:end="151:42">AVERROR_UNKNOWN</name></expr>;</return>

                </block_content>}</block></if></if_stmt>



                <if_stmt pos:start="157:17" pos:end="163:17"><if pos:start="157:17" pos:end="163:17">if <condition pos:start="157:20" pos:end="157:74">(<expr pos:start="157:21" pos:end="157:73"><name pos:start="157:21" pos:end="157:44"><name pos:start="157:21" pos:end="157:28">in_frame</name><operator pos:start="157:29" pos:end="157:30">-&gt;</operator><name pos:start="157:31" pos:end="157:44">channel_layout</name></name> <operator pos:start="157:46" pos:end="157:47">!=</operator> <name pos:start="157:49" pos:end="157:73"><name pos:start="157:49" pos:end="157:57">out_frame</name><operator pos:start="157:58" pos:end="157:59">-&gt;</operator><name pos:start="157:60" pos:end="157:73">channel_layout</name></name></expr>)</condition> <block pos:start="157:76" pos:end="163:17">{<block_content pos:start="159:21" pos:end="161:43">

                    <expr_stmt pos:start="159:21" pos:end="159:120"><expr pos:start="159:21" pos:end="159:119"><call pos:start="159:21" pos:end="159:119"><name pos:start="159:21" pos:end="159:26">av_log</name><argument_list pos:start="159:27" pos:end="159:119">(<argument pos:start="159:28" pos:end="159:31"><expr pos:start="159:28" pos:end="159:31"><name pos:start="159:28" pos:end="159:31">NULL</name></expr></argument>, <argument pos:start="159:34" pos:end="159:45"><expr pos:start="159:34" pos:end="159:45"><name pos:start="159:34" pos:end="159:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="159:48" pos:end="159:118"><expr pos:start="159:48" pos:end="159:118"><literal type="string" pos:start="159:48" pos:end="159:118">"Error frames before and after decoding has different channel layout\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="161:21" pos:end="161:43">return <expr pos:start="161:28" pos:end="161:42"><name pos:start="161:28" pos:end="161:42">AVERROR_UNKNOWN</name></expr>;</return>

                </block_content>}</block></if></if_stmt>



                <if_stmt pos:start="167:17" pos:end="173:17"><if pos:start="167:17" pos:end="173:17">if <condition pos:start="167:20" pos:end="167:58">(<expr pos:start="167:21" pos:end="167:57"><name pos:start="167:21" pos:end="167:36"><name pos:start="167:21" pos:end="167:28">in_frame</name><operator pos:start="167:29" pos:end="167:30">-&gt;</operator><name pos:start="167:31" pos:end="167:36">format</name></name> <operator pos:start="167:38" pos:end="167:39">!=</operator> <name pos:start="167:41" pos:end="167:57"><name pos:start="167:41" pos:end="167:49">out_frame</name><operator pos:start="167:50" pos:end="167:51">-&gt;</operator><name pos:start="167:52" pos:end="167:57">format</name></name></expr>)</condition> <block pos:start="167:60" pos:end="173:17">{<block_content pos:start="169:21" pos:end="171:43">

                    <expr_stmt pos:start="169:21" pos:end="169:119"><expr pos:start="169:21" pos:end="169:118"><call pos:start="169:21" pos:end="169:118"><name pos:start="169:21" pos:end="169:26">av_log</name><argument_list pos:start="169:27" pos:end="169:118">(<argument pos:start="169:28" pos:end="169:31"><expr pos:start="169:28" pos:end="169:31"><name pos:start="169:28" pos:end="169:31">NULL</name></expr></argument>, <argument pos:start="169:34" pos:end="169:45"><expr pos:start="169:34" pos:end="169:45"><name pos:start="169:34" pos:end="169:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="169:48" pos:end="169:117"><expr pos:start="169:48" pos:end="169:117"><literal type="string" pos:start="169:48" pos:end="169:117">"Error frames before and after decoding has different sample format\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="171:21" pos:end="171:43">return <expr pos:start="171:28" pos:end="171:42"><name pos:start="171:28" pos:end="171:42">AVERROR_UNKNOWN</name></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="175:17" pos:end="175:89"><expr pos:start="175:17" pos:end="175:88"><call pos:start="175:17" pos:end="175:88"><name pos:start="175:17" pos:end="175:22">memcpy</name><argument_list pos:start="175:23" pos:end="175:88">(<argument pos:start="175:24" pos:end="175:43"><expr pos:start="175:24" pos:end="175:43"><name pos:start="175:24" pos:end="175:30">raw_out</name> <operator pos:start="175:32" pos:end="175:32">+</operator> <name pos:start="175:34" pos:end="175:43">out_offset</name></expr></argument>, <argument pos:start="175:46" pos:end="175:63"><expr pos:start="175:46" pos:end="175:63"><name pos:start="175:46" pos:end="175:63"><name pos:start="175:46" pos:end="175:54">out_frame</name><operator pos:start="175:55" pos:end="175:56">-&gt;</operator><name pos:start="175:57" pos:end="175:60">data</name><index pos:start="175:61" pos:end="175:63">[<expr pos:start="175:62" pos:end="175:62"><literal type="number" pos:start="175:62" pos:end="175:62">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="175:66" pos:end="175:87"><expr pos:start="175:66" pos:end="175:87"><name pos:start="175:66" pos:end="175:87"><name pos:start="175:66" pos:end="175:74">out_frame</name><operator pos:start="175:75" pos:end="175:76">-&gt;</operator><name pos:start="175:77" pos:end="175:84">linesize</name><index pos:start="175:85" pos:end="175:87">[<expr pos:start="175:86" pos:end="175:86"><literal type="number" pos:start="175:86" pos:end="175:86">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="177:17" pos:end="177:53"><expr pos:start="177:17" pos:end="177:52"><name pos:start="177:17" pos:end="177:26">out_offset</name> <operator pos:start="177:28" pos:end="177:29">+=</operator> <name pos:start="177:31" pos:end="177:52"><name pos:start="177:31" pos:end="177:39">out_frame</name><operator pos:start="177:40" pos:end="177:41">-&gt;</operator><name pos:start="177:42" pos:end="177:49">linesize</name><index pos:start="177:50" pos:end="177:52">[<expr pos:start="177:51" pos:end="177:51"><literal type="number" pos:start="177:51" pos:end="177:51">0</literal></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="183:9" pos:end="183:33"><expr pos:start="183:9" pos:end="183:32"><call pos:start="183:9" pos:end="183:32"><name pos:start="183:9" pos:end="183:22">av_free_packet</name><argument_list pos:start="183:23" pos:end="183:32">(<argument pos:start="183:24" pos:end="183:31"><expr pos:start="183:24" pos:end="183:31"><operator pos:start="183:24" pos:end="183:24">&amp;</operator><name pos:start="183:25" pos:end="183:31">enc_pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="189:5" pos:end="195:5"><if pos:start="189:5" pos:end="195:5">if <condition pos:start="189:8" pos:end="189:73">(<expr pos:start="189:9" pos:end="189:72"><call pos:start="189:9" pos:end="189:67"><name pos:start="189:9" pos:end="189:14">memcmp</name><argument_list pos:start="189:15" pos:end="189:67">(<argument pos:start="189:16" pos:end="189:21"><expr pos:start="189:16" pos:end="189:21"><name pos:start="189:16" pos:end="189:21">raw_in</name></expr></argument>, <argument pos:start="189:24" pos:end="189:30"><expr pos:start="189:24" pos:end="189:30"><name pos:start="189:24" pos:end="189:30">raw_out</name></expr></argument>, <argument pos:start="189:33" pos:end="189:66"><expr pos:start="189:33" pos:end="189:66"><name pos:start="189:33" pos:end="189:47">frame_data_size</name> <operator pos:start="189:49" pos:end="189:49">*</operator> <name pos:start="189:51" pos:end="189:66">NUMBER_OF_FRAMES</name></expr></argument>)</argument_list></call> <operator pos:start="189:69" pos:end="189:70">!=</operator> <literal type="number" pos:start="189:72" pos:end="189:72">0</literal></expr>)</condition> <block pos:start="189:75" pos:end="195:5">{<block_content pos:start="191:9" pos:end="193:17">

        <expr_stmt pos:start="191:9" pos:end="191:55"><expr pos:start="191:9" pos:end="191:54"><call pos:start="191:9" pos:end="191:54"><name pos:start="191:9" pos:end="191:14">av_log</name><argument_list pos:start="191:15" pos:end="191:54">(<argument pos:start="191:16" pos:end="191:19"><expr pos:start="191:16" pos:end="191:19"><name pos:start="191:16" pos:end="191:19">NULL</name></expr></argument>, <argument pos:start="191:22" pos:end="191:33"><expr pos:start="191:22" pos:end="191:33"><name pos:start="191:22" pos:end="191:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="191:36" pos:end="191:53"><expr pos:start="191:36" pos:end="191:53"><literal type="string" pos:start="191:36" pos:end="191:53">"Output differs\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="193:9" pos:end="193:17">return <expr pos:start="193:16" pos:end="193:16"><literal type="number" pos:start="193:16" pos:end="193:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="199:5" pos:end="199:38"><expr pos:start="199:5" pos:end="199:37"><call pos:start="199:5" pos:end="199:37"><name pos:start="199:5" pos:end="199:10">av_log</name><argument_list pos:start="199:11" pos:end="199:37">(<argument pos:start="199:12" pos:end="199:15"><expr pos:start="199:12" pos:end="199:15"><name pos:start="199:12" pos:end="199:15">NULL</name></expr></argument>, <argument pos:start="199:18" pos:end="199:28"><expr pos:start="199:18" pos:end="199:28"><name pos:start="199:18" pos:end="199:28">AV_LOG_INFO</name></expr></argument>, <argument pos:start="199:31" pos:end="199:36"><expr pos:start="199:31" pos:end="199:36"><literal type="string" pos:start="199:31" pos:end="199:36">"OK\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="203:5" pos:end="203:22"><expr pos:start="203:5" pos:end="203:21"><call pos:start="203:5" pos:end="203:21"><name pos:start="203:5" pos:end="203:12">av_freep</name><argument_list pos:start="203:13" pos:end="203:21">(<argument pos:start="203:14" pos:end="203:20"><expr pos:start="203:14" pos:end="203:20"><operator pos:start="203:14" pos:end="203:14">&amp;</operator><name pos:start="203:15" pos:end="203:20">raw_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="205:5" pos:end="205:23"><expr pos:start="205:5" pos:end="205:22"><call pos:start="205:5" pos:end="205:22"><name pos:start="205:5" pos:end="205:12">av_freep</name><argument_list pos:start="205:13" pos:end="205:22">(<argument pos:start="205:14" pos:end="205:21"><expr pos:start="205:14" pos:end="205:21"><operator pos:start="205:14" pos:end="205:14">&amp;</operator><name pos:start="205:15" pos:end="205:21">raw_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="207:5" pos:end="207:29"><expr pos:start="207:5" pos:end="207:28"><call pos:start="207:5" pos:end="207:28"><name pos:start="207:5" pos:end="207:17">av_frame_free</name><argument_list pos:start="207:18" pos:end="207:28">(<argument pos:start="207:19" pos:end="207:27"><expr pos:start="207:19" pos:end="207:27"><operator pos:start="207:19" pos:end="207:19">&amp;</operator><name pos:start="207:20" pos:end="207:27">in_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="209:5" pos:end="209:30"><expr pos:start="209:5" pos:end="209:29"><call pos:start="209:5" pos:end="209:29"><name pos:start="209:5" pos:end="209:17">av_frame_free</name><argument_list pos:start="209:18" pos:end="209:29">(<argument pos:start="209:19" pos:end="209:28"><expr pos:start="209:19" pos:end="209:28"><operator pos:start="209:19" pos:end="209:19">&amp;</operator><name pos:start="209:20" pos:end="209:28">out_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="211:5" pos:end="211:13">return <expr pos:start="211:12" pos:end="211:12"><literal type="number" pos:start="211:12" pos:end="211:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
