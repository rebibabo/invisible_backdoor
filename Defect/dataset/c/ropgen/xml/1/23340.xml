<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/23340.c" pos:tabs="8"><function pos:start="1:1" pos:end="143:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <name pos:start="1:13" pos:end="1:18">RENAME</name></type>(<name pos:start="1:20" pos:end="1:34">interleaveBytes</name>)<parameter_list pos:start="1:36" pos:end="5:66">(<parameter pos:start="1:37" pos:end="1:55"><decl pos:start="1:37" pos:end="1:55"><type pos:start="1:37" pos:end="1:55"><specifier pos:start="1:37" pos:end="1:41">const</specifier> <name pos:start="1:43" pos:end="1:49">uint8_t</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:55">src1</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:76"><decl pos:start="1:58" pos:end="1:76"><type pos:start="1:58" pos:end="1:76"><specifier pos:start="1:58" pos:end="1:62">const</specifier> <name pos:start="1:64" pos:end="1:70">uint8_t</name> <modifier pos:start="1:72" pos:end="1:72">*</modifier></type><name pos:start="1:73" pos:end="1:76">src2</name></decl></parameter>, <parameter pos:start="1:79" pos:end="1:91"><decl pos:start="1:79" pos:end="1:91"><type pos:start="1:79" pos:end="1:91"><name pos:start="1:79" pos:end="1:85">uint8_t</name> <modifier pos:start="1:87" pos:end="1:87">*</modifier></type><name pos:start="1:88" pos:end="1:91">dest</name></decl></parameter>,

                                    <parameter pos:start="3:37" pos:end="3:45"><decl pos:start="3:37" pos:end="3:45"><type pos:start="3:37" pos:end="3:45"><name pos:start="3:37" pos:end="3:39">int</name></type> <name pos:start="3:41" pos:end="3:45">width</name></decl></parameter>, <parameter pos:start="3:48" pos:end="3:57"><decl pos:start="3:48" pos:end="3:57"><type pos:start="3:48" pos:end="3:57"><name pos:start="3:48" pos:end="3:50">int</name></type> <name pos:start="3:52" pos:end="3:57">height</name></decl></parameter>, <parameter pos:start="3:60" pos:end="3:73"><decl pos:start="3:60" pos:end="3:73"><type pos:start="3:60" pos:end="3:73"><name pos:start="3:60" pos:end="3:62">int</name></type> <name pos:start="3:64" pos:end="3:73">src1Stride</name></decl></parameter>,

                                    <parameter pos:start="5:37" pos:end="5:50"><decl pos:start="5:37" pos:end="5:50"><type pos:start="5:37" pos:end="5:50"><name pos:start="5:37" pos:end="5:39">int</name></type> <name pos:start="5:41" pos:end="5:50">src2Stride</name></decl></parameter>, <parameter pos:start="5:53" pos:end="5:65"><decl pos:start="5:53" pos:end="5:65"><type pos:start="5:53" pos:end="5:65"><name pos:start="5:53" pos:end="5:55">int</name></type> <name pos:start="5:57" pos:end="5:65">dstStride</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="143:1">{<block_content pos:start="9:5" pos:end="141:14">

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">h</name></decl>;</decl_stmt>



    <for pos:start="13:5" pos:end="127:5">for <control pos:start="13:9" pos:end="13:30">(<init pos:start="13:10" pos:end="13:13"><expr pos:start="13:10" pos:end="13:12"><name pos:start="13:10" pos:end="13:10">h</name><operator pos:start="13:11" pos:end="13:11">=</operator><literal type="number" pos:start="13:12" pos:end="13:12">0</literal></expr>;</init> <condition pos:start="13:15" pos:end="13:25"><expr pos:start="13:15" pos:end="13:24"><name pos:start="13:15" pos:end="13:15">h</name> <operator pos:start="13:17" pos:end="13:17">&lt;</operator> <name pos:start="13:19" pos:end="13:24">height</name></expr>;</condition> <incr pos:start="13:27" pos:end="13:29"><expr pos:start="13:27" pos:end="13:29"><name pos:start="13:27" pos:end="13:27">h</name><operator pos:start="13:28" pos:end="13:29">++</operator></expr></incr>)</control> <block pos:start="13:32" pos:end="127:5">{<block_content pos:start="15:9" pos:end="125:27">

        <decl_stmt pos:start="15:9" pos:end="15:14"><decl pos:start="15:9" pos:end="15:13"><type pos:start="15:9" pos:end="15:11"><name pos:start="15:9" pos:end="15:11">int</name></type> <name pos:start="15:13" pos:end="15:13">w</name></decl>;</decl_stmt>



        <if_stmt pos:start="19:9" pos:end="60:0"><if pos:start="19:9" pos:end="60:0">if <condition pos:start="19:12" pos:end="22:0">(<expr pos:start="19:13" pos:end="19:23"><name pos:start="19:13" pos:end="19:17">width</name> <operator pos:start="19:19" pos:end="19:20">&gt;=</operator> <literal type="number" pos:start="19:22" pos:end="19:23">16</literal></expr>)</condition><block type="pseudo" pos:start="23:9" pos:end="60:0"><block_content pos:start="23:9" pos:end="60:0">

<cpp:if pos:start="21:1" pos:end="21:25">#<cpp:directive pos:start="21:2" pos:end="21:3">if</cpp:directive> <expr pos:start="21:5" pos:end="21:25"><name pos:start="21:5" pos:end="21:25">COMPILE_TEMPLATE_SSE2</name></expr></cpp:if>

        <asm pos:start="23:9" pos:end="60:0">__asm__(

            "xor              %%"REG_a", %%"REG_a"  \n\t"

            "1:                                     \n\t"

            PREFETCH" 64(%1, %%"REG_a")             \n\t"

            PREFETCH" 64(%2, %%"REG_a")             \n\t"

            "movdqa     (%1, %%"REG_a"), %%xmm0     \n\t"

            "movdqa     (%1, %%"REG_a"), %%xmm1     \n\t"

            "movdqa     (%2, %%"REG_a"), %%xmm2     \n\t"

            "punpcklbw           %%xmm2, %%xmm0     \n\t"

            "punpckhbw           %%xmm2, %%xmm1     \n\t"

            "movntdq             %%xmm0,   (%0, %%"REG_a", 2)   \n\t"

            "movntdq             %%xmm1, 16(%0, %%"REG_a", 2)   \n\t"

            "add                    $16, %%"REG_a"  \n\t"

            "cmp                     %3, %%"REG_a"  \n\t"

            " jb                     1b             \n\t"

            ::"r"(dest), "r"(src1), "r"(src2), "r" ((x86_reg)width-15)

            : "memory", XMM_CLOBBERS("xmm0", "xmm1", "xmm2",) "%"REG_a

        );</asm></block_content></block></if></if_stmt>

<cpp:else pos:start="59:1" pos:end="59:5">#<cpp:directive pos:start="59:2" pos:end="59:5">else</cpp:directive></cpp:else>

        <asm pos:start="61:9" pos:end="112:0">__asm__(

            "xor %%"REG_a", %%"REG_a"               \n\t"

            "1:                                     \n\t"

            PREFETCH" 64(%1, %%"REG_a")             \n\t"

            PREFETCH" 64(%2, %%"REG_a")             \n\t"

            "movq       (%1, %%"REG_a"), %%mm0      \n\t"

            "movq      8(%1, %%"REG_a"), %%mm2      \n\t"

            "movq                 %%mm0, %%mm1      \n\t"

            "movq                 %%mm2, %%mm3      \n\t"

            "movq       (%2, %%"REG_a"), %%mm4      \n\t"

            "movq      8(%2, %%"REG_a"), %%mm5      \n\t"

            "punpcklbw            %%mm4, %%mm0      \n\t"

            "punpckhbw            %%mm4, %%mm1      \n\t"

            "punpcklbw            %%mm5, %%mm2      \n\t"

            "punpckhbw            %%mm5, %%mm3      \n\t"

            MOVNTQ"               %%mm0,   (%0, %%"REG_a", 2)   \n\t"

            MOVNTQ"               %%mm1,  8(%0, %%"REG_a", 2)   \n\t"

            MOVNTQ"               %%mm2, 16(%0, %%"REG_a", 2)   \n\t"

            MOVNTQ"               %%mm3, 24(%0, %%"REG_a", 2)   \n\t"

            "add                    $16, %%"REG_a"  \n\t"

            "cmp                     %3, %%"REG_a"  \n\t"

            " jb                     1b             \n\t"

            ::"r"(dest), "r"(src1), "r"(src2), "r" ((x86_reg)width-15)

            : "memory", "%"REG_a

        );</asm>

<cpp:endif pos:start="111:1" pos:end="111:6">#<cpp:directive pos:start="111:2" pos:end="111:6">endif</cpp:directive></cpp:endif>

        <for pos:start="113:9" pos:end="119:9">for <control pos:start="113:13" pos:end="113:46">(<init pos:start="113:14" pos:end="113:30"><expr pos:start="113:14" pos:end="113:29"><name pos:start="113:14" pos:end="113:14">w</name><operator pos:start="113:15" pos:end="113:15">=</operator> <operator pos:start="113:17" pos:end="113:17">(</operator><name pos:start="113:18" pos:end="113:22">width</name><operator pos:start="113:23" pos:end="113:23">&amp;</operator><operator pos:start="113:24" pos:end="113:24">(</operator><operator pos:start="113:25" pos:end="113:25">~</operator><literal type="number" pos:start="113:26" pos:end="113:27">15</literal><operator pos:start="113:28" pos:end="113:28">)</operator><operator pos:start="113:29" pos:end="113:29">)</operator></expr>;</init> <condition pos:start="113:32" pos:end="113:41"><expr pos:start="113:32" pos:end="113:40"><name pos:start="113:32" pos:end="113:32">w</name> <operator pos:start="113:34" pos:end="113:34">&lt;</operator> <name pos:start="113:36" pos:end="113:40">width</name></expr>;</condition> <incr pos:start="113:43" pos:end="113:45"><expr pos:start="113:43" pos:end="113:45"><name pos:start="113:43" pos:end="113:43">w</name><operator pos:start="113:44" pos:end="113:45">++</operator></expr></incr>)</control> <block pos:start="113:48" pos:end="119:9">{<block_content pos:start="115:13" pos:end="117:34">

            <expr_stmt pos:start="115:13" pos:end="115:34"><expr pos:start="115:13" pos:end="115:33"><name pos:start="115:13" pos:end="115:23"><name pos:start="115:13" pos:end="115:16">dest</name><index pos:start="115:17" pos:end="115:23">[<expr pos:start="115:18" pos:end="115:22"><literal type="number" pos:start="115:18" pos:end="115:18">2</literal><operator pos:start="115:19" pos:end="115:19">*</operator><name pos:start="115:20" pos:end="115:20">w</name><operator pos:start="115:21" pos:end="115:21">+</operator><literal type="number" pos:start="115:22" pos:end="115:22">0</literal></expr>]</index></name> <operator pos:start="115:25" pos:end="115:25">=</operator> <name pos:start="115:27" pos:end="115:33"><name pos:start="115:27" pos:end="115:30">src1</name><index pos:start="115:31" pos:end="115:33">[<expr pos:start="115:32" pos:end="115:32"><name pos:start="115:32" pos:end="115:32">w</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="117:13" pos:end="117:34"><expr pos:start="117:13" pos:end="117:33"><name pos:start="117:13" pos:end="117:23"><name pos:start="117:13" pos:end="117:16">dest</name><index pos:start="117:17" pos:end="117:23">[<expr pos:start="117:18" pos:end="117:22"><literal type="number" pos:start="117:18" pos:end="117:18">2</literal><operator pos:start="117:19" pos:end="117:19">*</operator><name pos:start="117:20" pos:end="117:20">w</name><operator pos:start="117:21" pos:end="117:21">+</operator><literal type="number" pos:start="117:22" pos:end="117:22">1</literal></expr>]</index></name> <operator pos:start="117:25" pos:end="117:25">=</operator> <name pos:start="117:27" pos:end="117:33"><name pos:start="117:27" pos:end="117:30">src2</name><index pos:start="117:31" pos:end="117:33">[<expr pos:start="117:32" pos:end="117:32"><name pos:start="117:32" pos:end="117:32">w</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="121:9" pos:end="121:26"><expr pos:start="121:9" pos:end="121:25"><name pos:start="121:9" pos:end="121:12">dest</name> <operator pos:start="121:14" pos:end="121:15">+=</operator> <name pos:start="121:17" pos:end="121:25">dstStride</name></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:27"><expr pos:start="123:9" pos:end="123:26"><name pos:start="123:9" pos:end="123:12">src1</name> <operator pos:start="123:14" pos:end="123:15">+=</operator> <name pos:start="123:17" pos:end="123:26">src1Stride</name></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:27"><expr pos:start="125:9" pos:end="125:26"><name pos:start="125:9" pos:end="125:12">src2</name> <operator pos:start="125:14" pos:end="125:15">+=</operator> <name pos:start="125:17" pos:end="125:26">src2Stride</name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <asm pos:start="129:5" pos:end="141:14">__asm__(

<cpp:if pos:start="131:1" pos:end="131:26">#<cpp:directive pos:start="131:2" pos:end="131:3">if</cpp:directive> <expr pos:start="131:5" pos:end="131:26"><operator pos:start="131:5" pos:end="131:5">!</operator><name pos:start="131:6" pos:end="131:26">COMPILE_TEMPLATE_SSE2</name></expr></cpp:if>

            EMMS"       \n\t"

<cpp:endif pos:start="135:1" pos:end="135:6">#<cpp:directive pos:start="135:2" pos:end="135:6">endif</cpp:directive></cpp:endif>

            SFENCE"     \n\t"

            ::: "memory"

            );</asm>

</block_content>}</block></function>
</unit>
