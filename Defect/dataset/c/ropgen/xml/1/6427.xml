<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6427.c" pos:tabs="8"><function pos:start="1:1" pos:end="231:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:17">backup_start</name><parameter_list pos:start="1:18" pos:end="13:49">(<parameter pos:start="1:19" pos:end="1:36"><decl pos:start="1:19" pos:end="1:36"><type pos:start="1:19" pos:end="1:36"><specifier pos:start="1:19" pos:end="1:23">const</specifier> <name pos:start="1:25" pos:end="1:28">char</name> <modifier pos:start="1:30" pos:end="1:30">*</modifier></type><name pos:start="1:31" pos:end="1:36">job_id</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:58"><decl pos:start="1:39" pos:end="1:58"><type pos:start="1:39" pos:end="1:58"><name pos:start="1:39" pos:end="1:54">BlockDriverState</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:58">bs</name></decl></parameter>,

                  <parameter pos:start="3:19" pos:end="3:42"><decl pos:start="3:19" pos:end="3:42"><type pos:start="3:19" pos:end="3:42"><name pos:start="3:19" pos:end="3:34">BlockDriverState</name> <modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:42">target</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:57"><decl pos:start="3:45" pos:end="3:57"><type pos:start="3:45" pos:end="3:57"><name pos:start="3:45" pos:end="3:51">int64_t</name></type> <name pos:start="3:53" pos:end="3:57">speed</name></decl></parameter>,

                  <parameter pos:start="5:19" pos:end="5:42"><decl pos:start="5:19" pos:end="5:42"><type pos:start="5:19" pos:end="5:42"><name pos:start="5:19" pos:end="5:32">MirrorSyncMode</name></type> <name pos:start="5:34" pos:end="5:42">sync_mode</name></decl></parameter>, <parameter pos:start="5:45" pos:end="5:72"><decl pos:start="5:45" pos:end="5:72"><type pos:start="5:45" pos:end="5:72"><name pos:start="5:45" pos:end="5:59">BdrvDirtyBitmap</name> <modifier pos:start="5:61" pos:end="5:61">*</modifier></type><name pos:start="5:62" pos:end="5:72">sync_bitmap</name></decl></parameter>,

                  <parameter pos:start="7:19" pos:end="7:49"><decl pos:start="7:19" pos:end="7:49"><type pos:start="7:19" pos:end="7:49"><name pos:start="7:19" pos:end="7:33">BlockdevOnError</name></type> <name pos:start="7:35" pos:end="7:49">on_source_error</name></decl></parameter>,

                  <parameter pos:start="9:19" pos:end="9:49"><decl pos:start="9:19" pos:end="9:49"><type pos:start="9:19" pos:end="9:49"><name pos:start="9:19" pos:end="9:33">BlockdevOnError</name></type> <name pos:start="9:35" pos:end="9:49">on_target_error</name></decl></parameter>,

                  <parameter pos:start="11:19" pos:end="11:41"><decl pos:start="11:19" pos:end="11:41"><type pos:start="11:19" pos:end="11:41"><name pos:start="11:19" pos:end="11:37">BlockCompletionFunc</name> <modifier pos:start="11:39" pos:end="11:39">*</modifier></type><name pos:start="11:40" pos:end="11:41">cb</name></decl></parameter>, <parameter pos:start="11:44" pos:end="11:55"><decl pos:start="11:44" pos:end="11:55"><type pos:start="11:44" pos:end="11:55"><name pos:start="11:44" pos:end="11:47">void</name> <modifier pos:start="11:49" pos:end="11:49">*</modifier></type><name pos:start="11:50" pos:end="11:55">opaque</name></decl></parameter>,

                  <parameter pos:start="13:19" pos:end="13:34"><decl pos:start="13:19" pos:end="13:34"><type pos:start="13:19" pos:end="13:34"><name pos:start="13:19" pos:end="13:29">BlockJobTxn</name> <modifier pos:start="13:31" pos:end="13:31">*</modifier></type><name pos:start="13:32" pos:end="13:34">txn</name></decl></parameter>, <parameter pos:start="13:37" pos:end="13:48"><decl pos:start="13:37" pos:end="13:48"><type pos:start="13:37" pos:end="13:48"><name pos:start="13:37" pos:end="13:41">Error</name> <modifier pos:start="13:43" pos:end="13:43">*</modifier><modifier pos:start="13:44" pos:end="13:44">*</modifier></type><name pos:start="13:45" pos:end="13:48">errp</name></decl></parameter>)</parameter_list>

<block pos:start="15:1" pos:end="231:1">{<block_content pos:start="17:5" pos:end="229:5">

    <decl_stmt pos:start="17:5" pos:end="17:16"><decl pos:start="17:5" pos:end="17:15"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">int64_t</name></type> <name pos:start="17:13" pos:end="17:15">len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:24"><decl pos:start="19:5" pos:end="19:23"><type pos:start="19:5" pos:end="19:19"><name pos:start="19:5" pos:end="19:19">BlockDriverInfo</name></type> <name pos:start="19:21" pos:end="19:23">bdi</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:31"><decl pos:start="21:5" pos:end="21:30"><type pos:start="21:5" pos:end="21:20"><name pos:start="21:5" pos:end="21:18">BackupBlockJob</name> <modifier pos:start="21:20" pos:end="21:20">*</modifier></type><name pos:start="21:21" pos:end="21:23">job</name> <init pos:start="21:25" pos:end="21:30">= <expr pos:start="21:27" pos:end="21:30"><name pos:start="21:27" pos:end="21:30">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:12"><decl pos:start="23:5" pos:end="23:11"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:15"><expr pos:start="27:5" pos:end="27:14"><call pos:start="27:5" pos:end="27:14"><name pos:start="27:5" pos:end="27:10">assert</name><argument_list pos:start="27:11" pos:end="27:14">(<argument pos:start="27:12" pos:end="27:13"><expr pos:start="27:12" pos:end="27:13"><name pos:start="27:12" pos:end="27:13">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:19"><expr pos:start="29:5" pos:end="29:18"><call pos:start="29:5" pos:end="29:18"><name pos:start="29:5" pos:end="29:10">assert</name><argument_list pos:start="29:11" pos:end="29:18">(<argument pos:start="29:12" pos:end="29:17"><expr pos:start="29:12" pos:end="29:17"><name pos:start="29:12" pos:end="29:17">target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="33:5" pos:end="39:5"><if pos:start="33:5" pos:end="39:5">if <condition pos:start="33:8" pos:end="33:21">(<expr pos:start="33:9" pos:end="33:20"><name pos:start="33:9" pos:end="33:10">bs</name> <operator pos:start="33:12" pos:end="33:13">==</operator> <name pos:start="33:15" pos:end="33:20">target</name></expr>)</condition> <block pos:start="33:23" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:15">

        <expr_stmt pos:start="35:9" pos:end="35:65"><expr pos:start="35:9" pos:end="35:64"><call pos:start="35:9" pos:end="35:64"><name pos:start="35:9" pos:end="35:18">error_setg</name><argument_list pos:start="35:19" pos:end="35:64">(<argument pos:start="35:20" pos:end="35:23"><expr pos:start="35:20" pos:end="35:23"><name pos:start="35:20" pos:end="35:23">errp</name></expr></argument>, <argument pos:start="35:26" pos:end="35:63"><expr pos:start="35:26" pos:end="35:63"><literal type="string" pos:start="35:26" pos:end="35:63">"Source and target cannot be the same"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="37:9" pos:end="37:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="43:5" pos:end="51:5"><if pos:start="43:5" pos:end="51:5">if <condition pos:start="43:8" pos:end="43:30">(<expr pos:start="43:9" pos:end="43:29"><operator pos:start="43:9" pos:end="43:9">!</operator><call pos:start="43:10" pos:end="43:29"><name pos:start="43:10" pos:end="43:25">bdrv_is_inserted</name><argument_list pos:start="43:26" pos:end="43:29">(<argument pos:start="43:27" pos:end="43:28"><expr pos:start="43:27" pos:end="43:28"><name pos:start="43:27" pos:end="43:28">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="43:32" pos:end="51:5">{<block_content pos:start="45:9" pos:end="49:15">

        <expr_stmt pos:start="45:9" pos:end="47:45"><expr pos:start="45:9" pos:end="47:44"><call pos:start="45:9" pos:end="47:44"><name pos:start="45:9" pos:end="45:18">error_setg</name><argument_list pos:start="45:19" pos:end="47:44">(<argument pos:start="45:20" pos:end="45:23"><expr pos:start="45:20" pos:end="45:23"><name pos:start="45:20" pos:end="45:23">errp</name></expr></argument>, <argument pos:start="45:26" pos:end="45:53"><expr pos:start="45:26" pos:end="45:53"><literal type="string" pos:start="45:26" pos:end="45:53">"Device is not inserted: %s"</literal></expr></argument>,

                   <argument pos:start="47:20" pos:end="47:43"><expr pos:start="47:20" pos:end="47:43"><call pos:start="47:20" pos:end="47:43"><name pos:start="47:20" pos:end="47:39">bdrv_get_device_name</name><argument_list pos:start="47:40" pos:end="47:43">(<argument pos:start="47:41" pos:end="47:42"><expr pos:start="47:41" pos:end="47:42"><name pos:start="47:41" pos:end="47:42">bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="49:9" pos:end="49:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="55:5" pos:end="63:5"><if pos:start="55:5" pos:end="63:5">if <condition pos:start="55:8" pos:end="55:34">(<expr pos:start="55:9" pos:end="55:33"><operator pos:start="55:9" pos:end="55:9">!</operator><call pos:start="55:10" pos:end="55:33"><name pos:start="55:10" pos:end="55:25">bdrv_is_inserted</name><argument_list pos:start="55:26" pos:end="55:33">(<argument pos:start="55:27" pos:end="55:32"><expr pos:start="55:27" pos:end="55:32"><name pos:start="55:27" pos:end="55:32">target</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="55:36" pos:end="63:5">{<block_content pos:start="57:9" pos:end="61:15">

        <expr_stmt pos:start="57:9" pos:end="59:49"><expr pos:start="57:9" pos:end="59:48"><call pos:start="57:9" pos:end="59:48"><name pos:start="57:9" pos:end="57:18">error_setg</name><argument_list pos:start="57:19" pos:end="59:48">(<argument pos:start="57:20" pos:end="57:23"><expr pos:start="57:20" pos:end="57:23"><name pos:start="57:20" pos:end="57:23">errp</name></expr></argument>, <argument pos:start="57:26" pos:end="57:53"><expr pos:start="57:26" pos:end="57:53"><literal type="string" pos:start="57:26" pos:end="57:53">"Device is not inserted: %s"</literal></expr></argument>,

                   <argument pos:start="59:20" pos:end="59:47"><expr pos:start="59:20" pos:end="59:47"><call pos:start="59:20" pos:end="59:47"><name pos:start="59:20" pos:end="59:39">bdrv_get_device_name</name><argument_list pos:start="59:40" pos:end="59:47">(<argument pos:start="59:41" pos:end="59:46"><expr pos:start="59:41" pos:end="59:46"><name pos:start="59:41" pos:end="59:46">target</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="61:9" pos:end="61:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="67:5" pos:end="71:5"><if pos:start="67:5" pos:end="71:5">if <condition pos:start="67:8" pos:end="67:66">(<expr pos:start="67:9" pos:end="67:65"><call pos:start="67:9" pos:end="67:65"><name pos:start="67:9" pos:end="67:26">bdrv_op_is_blocked</name><argument_list pos:start="67:27" pos:end="67:65">(<argument pos:start="67:28" pos:end="67:29"><expr pos:start="67:28" pos:end="67:29"><name pos:start="67:28" pos:end="67:29">bs</name></expr></argument>, <argument pos:start="67:32" pos:end="67:58"><expr pos:start="67:32" pos:end="67:58"><name pos:start="67:32" pos:end="67:58">BLOCK_OP_TYPE_BACKUP_SOURCE</name></expr></argument>, <argument pos:start="67:61" pos:end="67:64"><expr pos:start="67:61" pos:end="67:64"><name pos:start="67:61" pos:end="67:64">errp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="67:68" pos:end="71:5">{<block_content pos:start="69:9" pos:end="69:15">

        <return pos:start="69:9" pos:end="69:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="75:5" pos:end="79:5"><if pos:start="75:5" pos:end="79:5">if <condition pos:start="75:8" pos:end="75:70">(<expr pos:start="75:9" pos:end="75:69"><call pos:start="75:9" pos:end="75:69"><name pos:start="75:9" pos:end="75:26">bdrv_op_is_blocked</name><argument_list pos:start="75:27" pos:end="75:69">(<argument pos:start="75:28" pos:end="75:33"><expr pos:start="75:28" pos:end="75:33"><name pos:start="75:28" pos:end="75:33">target</name></expr></argument>, <argument pos:start="75:36" pos:end="75:62"><expr pos:start="75:36" pos:end="75:62"><name pos:start="75:36" pos:end="75:62">BLOCK_OP_TYPE_BACKUP_TARGET</name></expr></argument>, <argument pos:start="75:65" pos:end="75:68"><expr pos:start="75:65" pos:end="75:68"><name pos:start="75:65" pos:end="75:68">errp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="75:72" pos:end="79:5">{<block_content pos:start="77:9" pos:end="77:15">

        <return pos:start="77:9" pos:end="77:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="83:5" pos:end="117:5"><if pos:start="83:5" pos:end="105:5">if <condition pos:start="83:8" pos:end="83:50">(<expr pos:start="83:9" pos:end="83:49"><name pos:start="83:9" pos:end="83:17">sync_mode</name> <operator pos:start="83:19" pos:end="83:20">==</operator> <name pos:start="83:22" pos:end="83:49">MIRROR_SYNC_MODE_INCREMENTAL</name></expr>)</condition> <block pos:start="83:52" pos:end="105:5">{<block_content pos:start="85:9" pos:end="103:9">

        <if_stmt pos:start="85:9" pos:end="93:9"><if pos:start="85:9" pos:end="93:9">if <condition pos:start="85:12" pos:end="85:25">(<expr pos:start="85:13" pos:end="85:24"><operator pos:start="85:13" pos:end="85:13">!</operator><name pos:start="85:14" pos:end="85:24">sync_bitmap</name></expr>)</condition> <block pos:start="85:27" pos:end="93:9">{<block_content pos:start="87:13" pos:end="91:19">

            <expr_stmt pos:start="87:13" pos:end="89:58"><expr pos:start="87:13" pos:end="89:57"><call pos:start="87:13" pos:end="89:57"><name pos:start="87:13" pos:end="87:22">error_setg</name><argument_list pos:start="87:23" pos:end="89:57">(<argument pos:start="87:24" pos:end="87:27"><expr pos:start="87:24" pos:end="87:27"><name pos:start="87:24" pos:end="87:27">errp</name></expr></argument>, <argument pos:start="87:30" pos:end="89:56"><expr pos:start="87:30" pos:end="89:56"><literal type="string" pos:start="87:30" pos:end="87:68">"must provide a valid bitmap name for "</literal>

                             <literal type="string" pos:start="89:30" pos:end="89:56">"\"incremental\" sync mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="91:13" pos:end="91:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="97:9" pos:end="97:63">/* Create a new bitmap, and freeze/disable this one. */</comment>

        <if_stmt pos:start="99:9" pos:end="103:9"><if pos:start="99:9" pos:end="103:9">if <condition pos:start="99:12" pos:end="99:74">(<expr pos:start="99:13" pos:end="99:73"><call pos:start="99:13" pos:end="99:69"><name pos:start="99:13" pos:end="99:46">bdrv_dirty_bitmap_create_successor</name><argument_list pos:start="99:47" pos:end="99:69">(<argument pos:start="99:48" pos:end="99:49"><expr pos:start="99:48" pos:end="99:49"><name pos:start="99:48" pos:end="99:49">bs</name></expr></argument>, <argument pos:start="99:52" pos:end="99:62"><expr pos:start="99:52" pos:end="99:62"><name pos:start="99:52" pos:end="99:62">sync_bitmap</name></expr></argument>, <argument pos:start="99:65" pos:end="99:68"><expr pos:start="99:65" pos:end="99:68"><name pos:start="99:65" pos:end="99:68">errp</name></expr></argument>)</argument_list></call> <operator pos:start="99:71" pos:end="99:71">&lt;</operator> <literal type="number" pos:start="99:73" pos:end="99:73">0</literal></expr>)</condition> <block pos:start="99:76" pos:end="103:9">{<block_content pos:start="101:13" pos:end="101:19">

            <return pos:start="101:13" pos:end="101:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="105:7" pos:end="117:5">else if <condition pos:start="105:15" pos:end="105:27">(<expr pos:start="105:16" pos:end="105:26"><name pos:start="105:16" pos:end="105:26">sync_bitmap</name></expr>)</condition> <block pos:start="105:29" pos:end="117:5">{<block_content pos:start="107:9" pos:end="115:15">

        <expr_stmt pos:start="107:9" pos:end="113:53"><expr pos:start="107:9" pos:end="113:52"><call pos:start="107:9" pos:end="113:52"><name pos:start="107:9" pos:end="107:18">error_setg</name><argument_list pos:start="107:19" pos:end="113:52">(<argument pos:start="107:20" pos:end="107:23"><expr pos:start="107:20" pos:end="107:23"><name pos:start="107:20" pos:end="107:23">errp</name></expr></argument>,

                   <argument pos:start="109:20" pos:end="111:64"><expr pos:start="109:20" pos:end="111:64"><literal type="string" pos:start="109:20" pos:end="109:63">"a sync_bitmap was provided to backup_run, "</literal>

                   <literal type="string" pos:start="111:20" pos:end="111:64">"but received an incompatible sync_mode (%s)"</literal></expr></argument>,

                   <argument pos:start="113:20" pos:end="113:51"><expr pos:start="113:20" pos:end="113:51"><name pos:start="113:20" pos:end="113:51"><name pos:start="113:20" pos:end="113:40">MirrorSyncMode_lookup</name><index pos:start="113:41" pos:end="113:51">[<expr pos:start="113:42" pos:end="113:50"><name pos:start="113:42" pos:end="113:50">sync_mode</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="115:9" pos:end="115:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="121:5" pos:end="121:29"><expr pos:start="121:5" pos:end="121:28"><name pos:start="121:5" pos:end="121:7">len</name> <operator pos:start="121:9" pos:end="121:9">=</operator> <call pos:start="121:11" pos:end="121:28"><name pos:start="121:11" pos:end="121:24">bdrv_getlength</name><argument_list pos:start="121:25" pos:end="121:28">(<argument pos:start="121:26" pos:end="121:27"><expr pos:start="121:26" pos:end="121:27"><name pos:start="121:26" pos:end="121:27">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="123:5" pos:end="131:5"><if pos:start="123:5" pos:end="131:5">if <condition pos:start="123:8" pos:end="123:16">(<expr pos:start="123:9" pos:end="123:15"><name pos:start="123:9" pos:end="123:11">len</name> <operator pos:start="123:13" pos:end="123:13">&lt;</operator> <literal type="number" pos:start="123:15" pos:end="123:15">0</literal></expr>)</condition> <block pos:start="123:18" pos:end="131:5">{<block_content pos:start="125:9" pos:end="129:19">

        <expr_stmt pos:start="125:9" pos:end="127:51"><expr pos:start="125:9" pos:end="127:50"><call pos:start="125:9" pos:end="127:50"><name pos:start="125:9" pos:end="125:24">error_setg_errno</name><argument_list pos:start="125:25" pos:end="127:50">(<argument pos:start="125:26" pos:end="125:29"><expr pos:start="125:26" pos:end="125:29"><name pos:start="125:26" pos:end="125:29">errp</name></expr></argument>, <argument pos:start="125:32" pos:end="125:35"><expr pos:start="125:32" pos:end="125:35"><operator pos:start="125:32" pos:end="125:32">-</operator><name pos:start="125:33" pos:end="125:35">len</name></expr></argument>, <argument pos:start="125:38" pos:end="125:68"><expr pos:start="125:38" pos:end="125:68"><literal type="string" pos:start="125:38" pos:end="125:68">"unable to get length for '%s'"</literal></expr></argument>,

                         <argument pos:start="127:26" pos:end="127:49"><expr pos:start="127:26" pos:end="127:49"><call pos:start="127:26" pos:end="127:49"><name pos:start="127:26" pos:end="127:45">bdrv_get_device_name</name><argument_list pos:start="127:46" pos:end="127:49">(<argument pos:start="127:47" pos:end="127:48"><expr pos:start="127:47" pos:end="127:48"><name pos:start="127:47" pos:end="127:48">bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="129:9" pos:end="129:19">goto <name pos:start="129:14" pos:end="129:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="135:5" pos:end="137:45"><expr pos:start="135:5" pos:end="137:44"><name pos:start="135:5" pos:end="135:7">job</name> <operator pos:start="135:9" pos:end="135:9">=</operator> <call pos:start="135:11" pos:end="137:44"><name pos:start="135:11" pos:end="135:26">block_job_create</name><argument_list pos:start="135:27" pos:end="137:44">(<argument pos:start="135:28" pos:end="135:33"><expr pos:start="135:28" pos:end="135:33"><name pos:start="135:28" pos:end="135:33">job_id</name></expr></argument>, <argument pos:start="135:36" pos:end="135:53"><expr pos:start="135:36" pos:end="135:53"><operator pos:start="135:36" pos:end="135:36">&amp;</operator><name pos:start="135:37" pos:end="135:53">backup_job_driver</name></expr></argument>, <argument pos:start="135:56" pos:end="135:57"><expr pos:start="135:56" pos:end="135:57"><name pos:start="135:56" pos:end="135:57">bs</name></expr></argument>, <argument pos:start="135:60" pos:end="135:64"><expr pos:start="135:60" pos:end="135:64"><name pos:start="135:60" pos:end="135:64">speed</name></expr></argument>,

                           <argument pos:start="137:28" pos:end="137:29"><expr pos:start="137:28" pos:end="137:29"><name pos:start="137:28" pos:end="137:29">cb</name></expr></argument>, <argument pos:start="137:32" pos:end="137:37"><expr pos:start="137:32" pos:end="137:37"><name pos:start="137:32" pos:end="137:37">opaque</name></expr></argument>, <argument pos:start="137:40" pos:end="137:43"><expr pos:start="137:40" pos:end="137:43"><name pos:start="137:40" pos:end="137:43">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="139:5" pos:end="143:5"><if pos:start="139:5" pos:end="143:5">if <condition pos:start="139:8" pos:end="139:13">(<expr pos:start="139:9" pos:end="139:12"><operator pos:start="139:9" pos:end="139:9">!</operator><name pos:start="139:10" pos:end="139:12">job</name></expr>)</condition> <block pos:start="139:15" pos:end="143:5">{<block_content pos:start="141:9" pos:end="141:19">

        <goto pos:start="141:9" pos:end="141:19">goto <name pos:start="141:14" pos:end="141:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="147:5" pos:end="147:28"><expr pos:start="147:5" pos:end="147:27"><name pos:start="147:5" pos:end="147:15"><name pos:start="147:5" pos:end="147:7">job</name><operator pos:start="147:8" pos:end="147:9">-&gt;</operator><name pos:start="147:10" pos:end="147:15">target</name></name> <operator pos:start="147:17" pos:end="147:17">=</operator> <call pos:start="147:19" pos:end="147:27"><name pos:start="147:19" pos:end="147:25">blk_new</name><argument_list pos:start="147:26" pos:end="147:27">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="149:5" pos:end="149:39"><expr pos:start="149:5" pos:end="149:38"><call pos:start="149:5" pos:end="149:38"><name pos:start="149:5" pos:end="149:17">blk_insert_bs</name><argument_list pos:start="149:18" pos:end="149:38">(<argument pos:start="149:19" pos:end="149:29"><expr pos:start="149:19" pos:end="149:29"><name pos:start="149:19" pos:end="149:29"><name pos:start="149:19" pos:end="149:21">job</name><operator pos:start="149:22" pos:end="149:23">-&gt;</operator><name pos:start="149:24" pos:end="149:29">target</name></name></expr></argument>, <argument pos:start="149:32" pos:end="149:37"><expr pos:start="149:32" pos:end="149:37"><name pos:start="149:32" pos:end="149:37">target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="153:5" pos:end="153:43"><expr pos:start="153:5" pos:end="153:42"><name pos:start="153:5" pos:end="153:24"><name pos:start="153:5" pos:end="153:7">job</name><operator pos:start="153:8" pos:end="153:9">-&gt;</operator><name pos:start="153:10" pos:end="153:24">on_source_error</name></name> <operator pos:start="153:26" pos:end="153:26">=</operator> <name pos:start="153:28" pos:end="153:42">on_source_error</name></expr>;</expr_stmt>

    <expr_stmt pos:start="155:5" pos:end="155:43"><expr pos:start="155:5" pos:end="155:42"><name pos:start="155:5" pos:end="155:24"><name pos:start="155:5" pos:end="155:7">job</name><operator pos:start="155:8" pos:end="155:9">-&gt;</operator><name pos:start="155:10" pos:end="155:24">on_target_error</name></name> <operator pos:start="155:26" pos:end="155:26">=</operator> <name pos:start="155:28" pos:end="155:42">on_target_error</name></expr>;</expr_stmt>

    <expr_stmt pos:start="157:5" pos:end="157:31"><expr pos:start="157:5" pos:end="157:30"><name pos:start="157:5" pos:end="157:18"><name pos:start="157:5" pos:end="157:7">job</name><operator pos:start="157:8" pos:end="157:9">-&gt;</operator><name pos:start="157:10" pos:end="157:18">sync_mode</name></name> <operator pos:start="157:20" pos:end="157:20">=</operator> <name pos:start="157:22" pos:end="157:30">sync_mode</name></expr>;</expr_stmt>

    <expr_stmt pos:start="159:5" pos:end="161:42"><expr pos:start="159:5" pos:end="161:41"><name pos:start="159:5" pos:end="159:20"><name pos:start="159:5" pos:end="159:7">job</name><operator pos:start="159:8" pos:end="159:9">-&gt;</operator><name pos:start="159:10" pos:end="159:20">sync_bitmap</name></name> <operator pos:start="159:22" pos:end="159:22">=</operator> <ternary pos:start="159:24" pos:end="161:41"><condition pos:start="159:24" pos:end="159:66"><expr pos:start="159:24" pos:end="159:64"><name pos:start="159:24" pos:end="159:32">sync_mode</name> <operator pos:start="159:34" pos:end="159:35">==</operator> <name pos:start="159:37" pos:end="159:64">MIRROR_SYNC_MODE_INCREMENTAL</name></expr> ?</condition><then pos:start="161:24" pos:end="161:34">

                       <expr pos:start="161:24" pos:end="161:34"><name pos:start="161:24" pos:end="161:34">sync_bitmap</name></expr> </then><else pos:start="161:36" pos:end="161:41">: <expr pos:start="161:38" pos:end="161:41"><name pos:start="161:38" pos:end="161:41">NULL</name></expr></else></ternary></expr>;</expr_stmt>



    <comment type="block" pos:start="165:5" pos:end="169:68">/* If there is no backing file on the target, we cannot rely on COW if our

     * backup cluster size is smaller than the target cluster size. Even for

     * targets with a backing file, try to avoid COW if possible. */</comment>

    <expr_stmt pos:start="171:5" pos:end="171:38"><expr pos:start="171:5" pos:end="171:37"><name pos:start="171:5" pos:end="171:7">ret</name> <operator pos:start="171:9" pos:end="171:9">=</operator> <call pos:start="171:11" pos:end="171:37"><name pos:start="171:11" pos:end="171:23">bdrv_get_info</name><argument_list pos:start="171:24" pos:end="171:37">(<argument pos:start="171:25" pos:end="171:30"><expr pos:start="171:25" pos:end="171:30"><name pos:start="171:25" pos:end="171:30">target</name></expr></argument>, <argument pos:start="171:33" pos:end="171:36"><expr pos:start="171:33" pos:end="171:36"><operator pos:start="171:33" pos:end="171:33">&amp;</operator><name pos:start="171:34" pos:end="171:36">bdi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="173:5" pos:end="197:5"><if pos:start="173:5" pos:end="187:5">if <condition pos:start="173:8" pos:end="173:36">(<expr pos:start="173:9" pos:end="173:35"><name pos:start="173:9" pos:end="173:11">ret</name> <operator pos:start="173:13" pos:end="173:13">&lt;</operator> <literal type="number" pos:start="173:15" pos:end="173:15">0</literal> <operator pos:start="173:17" pos:end="173:18">&amp;&amp;</operator> <operator pos:start="173:20" pos:end="173:20">!</operator><name pos:start="173:21" pos:end="173:35"><name pos:start="173:21" pos:end="173:26">target</name><operator pos:start="173:27" pos:end="173:28">-&gt;</operator><name pos:start="173:29" pos:end="173:35">backing</name></name></expr>)</condition> <block pos:start="173:38" pos:end="187:5">{<block_content pos:start="175:9" pos:end="185:19">

        <expr_stmt pos:start="175:9" pos:end="179:41"><expr pos:start="175:9" pos:end="179:40"><call pos:start="175:9" pos:end="179:40"><name pos:start="175:9" pos:end="175:24">error_setg_errno</name><argument_list pos:start="175:25" pos:end="179:40">(<argument pos:start="175:26" pos:end="175:29"><expr pos:start="175:26" pos:end="175:29"><name pos:start="175:26" pos:end="175:29">errp</name></expr></argument>, <argument pos:start="175:32" pos:end="175:35"><expr pos:start="175:32" pos:end="175:35"><operator pos:start="175:32" pos:end="175:32">-</operator><name pos:start="175:33" pos:end="175:35">ret</name></expr></argument>,

            <argument pos:start="177:13" pos:end="179:39"><expr pos:start="177:13" pos:end="179:39"><literal type="string" pos:start="177:13" pos:end="177:71">"Couldn't determine the cluster size of the target image, "</literal>

            <literal type="string" pos:start="179:13" pos:end="179:39">"which has no backing file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="181:9" pos:end="183:79"><expr pos:start="181:9" pos:end="183:78"><call pos:start="181:9" pos:end="183:78"><name pos:start="181:9" pos:end="181:25">error_append_hint</name><argument_list pos:start="181:26" pos:end="183:78">(<argument pos:start="181:27" pos:end="181:30"><expr pos:start="181:27" pos:end="181:30"><name pos:start="181:27" pos:end="181:30">errp</name></expr></argument>,

            <argument pos:start="183:13" pos:end="183:77"><expr pos:start="183:13" pos:end="183:77"><literal type="string" pos:start="183:13" pos:end="183:77">"Aborting, since this may create an unusable destination image\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="185:9" pos:end="185:19">goto <name pos:start="185:14" pos:end="185:18">error</name>;</goto>

    </block_content>}</block></if> <if type="elseif" pos:start="187:7" pos:end="193:5">else if <condition pos:start="187:15" pos:end="187:42">(<expr pos:start="187:16" pos:end="187:41"><name pos:start="187:16" pos:end="187:18">ret</name> <operator pos:start="187:20" pos:end="187:20">&lt;</operator> <literal type="number" pos:start="187:22" pos:end="187:22">0</literal> <operator pos:start="187:24" pos:end="187:25">&amp;&amp;</operator> <name pos:start="187:27" pos:end="187:41"><name pos:start="187:27" pos:end="187:32">target</name><operator pos:start="187:33" pos:end="187:34">-&gt;</operator><name pos:start="187:35" pos:end="187:41">backing</name></name></expr>)</condition> <block pos:start="187:44" pos:end="193:5">{<block_content pos:start="191:9" pos:end="191:56">

        <comment type="block" pos:start="189:9" pos:end="189:46">/* Not fatal; just trudge on ahead. */</comment>

        <expr_stmt pos:start="191:9" pos:end="191:56"><expr pos:start="191:9" pos:end="191:55"><name pos:start="191:9" pos:end="191:25"><name pos:start="191:9" pos:end="191:11">job</name><operator pos:start="191:12" pos:end="191:13">-&gt;</operator><name pos:start="191:14" pos:end="191:25">cluster_size</name></name> <operator pos:start="191:27" pos:end="191:27">=</operator> <name pos:start="191:29" pos:end="191:55">BACKUP_CLUSTER_SIZE_DEFAULT</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="193:7" pos:end="197:5">else <block pos:start="193:12" pos:end="197:5">{<block_content pos:start="195:9" pos:end="195:79">

        <expr_stmt pos:start="195:9" pos:end="195:79"><expr pos:start="195:9" pos:end="195:78"><name pos:start="195:9" pos:end="195:25"><name pos:start="195:9" pos:end="195:11">job</name><operator pos:start="195:12" pos:end="195:13">-&gt;</operator><name pos:start="195:14" pos:end="195:25">cluster_size</name></name> <operator pos:start="195:27" pos:end="195:27">=</operator> <call pos:start="195:29" pos:end="195:78"><name pos:start="195:29" pos:end="195:31">MAX</name><argument_list pos:start="195:32" pos:end="195:78">(<argument pos:start="195:33" pos:end="195:59"><expr pos:start="195:33" pos:end="195:59"><name pos:start="195:33" pos:end="195:59">BACKUP_CLUSTER_SIZE_DEFAULT</name></expr></argument>, <argument pos:start="195:62" pos:end="195:77"><expr pos:start="195:62" pos:end="195:77"><name pos:start="195:62" pos:end="195:77"><name pos:start="195:62" pos:end="195:64">bdi</name><operator pos:start="195:65" pos:end="195:65">.</operator><name pos:start="195:66" pos:end="195:77">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="201:5" pos:end="201:51"><expr pos:start="201:5" pos:end="201:50"><call pos:start="201:5" pos:end="201:50"><name pos:start="201:5" pos:end="201:21">bdrv_op_block_all</name><argument_list pos:start="201:22" pos:end="201:50">(<argument pos:start="201:23" pos:end="201:28"><expr pos:start="201:23" pos:end="201:28"><name pos:start="201:23" pos:end="201:28">target</name></expr></argument>, <argument pos:start="201:31" pos:end="201:49"><expr pos:start="201:31" pos:end="201:49"><name pos:start="201:31" pos:end="201:49"><name pos:start="201:31" pos:end="201:33">job</name><operator pos:start="201:34" pos:end="201:35">-&gt;</operator><name pos:start="201:36" pos:end="201:41">common</name><operator pos:start="201:42" pos:end="201:42">.</operator><name pos:start="201:43" pos:end="201:49">blocker</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="203:5" pos:end="203:26"><expr pos:start="203:5" pos:end="203:25"><name pos:start="203:5" pos:end="203:19"><name pos:start="203:5" pos:end="203:7">job</name><operator pos:start="203:8" pos:end="203:9">-&gt;</operator><name pos:start="203:10" pos:end="203:15">common</name><operator pos:start="203:16" pos:end="203:16">.</operator><name pos:start="203:17" pos:end="203:19">len</name></name> <operator pos:start="203:21" pos:end="203:21">=</operator> <name pos:start="203:23" pos:end="203:25">len</name></expr>;</expr_stmt>

    <expr_stmt pos:start="205:5" pos:end="205:55"><expr pos:start="205:5" pos:end="205:54"><name pos:start="205:5" pos:end="205:18"><name pos:start="205:5" pos:end="205:7">job</name><operator pos:start="205:8" pos:end="205:9">-&gt;</operator><name pos:start="205:10" pos:end="205:15">common</name><operator pos:start="205:16" pos:end="205:16">.</operator><name pos:start="205:17" pos:end="205:18">co</name></name> <operator pos:start="205:20" pos:end="205:20">=</operator> <call pos:start="205:22" pos:end="205:54"><name pos:start="205:22" pos:end="205:42">qemu_coroutine_create</name><argument_list pos:start="205:43" pos:end="205:54">(<argument pos:start="205:44" pos:end="205:53"><expr pos:start="205:44" pos:end="205:53"><name pos:start="205:44" pos:end="205:53">backup_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="207:5" pos:end="207:45"><expr pos:start="207:5" pos:end="207:44"><call pos:start="207:5" pos:end="207:44"><name pos:start="207:5" pos:end="207:25">block_job_txn_add_job</name><argument_list pos:start="207:26" pos:end="207:44">(<argument pos:start="207:27" pos:end="207:29"><expr pos:start="207:27" pos:end="207:29"><name pos:start="207:27" pos:end="207:29">txn</name></expr></argument>, <argument pos:start="207:32" pos:end="207:43"><expr pos:start="207:32" pos:end="207:43"><operator pos:start="207:32" pos:end="207:32">&amp;</operator><name pos:start="207:33" pos:end="207:43"><name pos:start="207:33" pos:end="207:35">job</name><operator pos:start="207:36" pos:end="207:37">-&gt;</operator><name pos:start="207:38" pos:end="207:43">common</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="209:5" pos:end="209:46"><expr pos:start="209:5" pos:end="209:45"><call pos:start="209:5" pos:end="209:45"><name pos:start="209:5" pos:end="209:24">qemu_coroutine_enter</name><argument_list pos:start="209:25" pos:end="209:45">(<argument pos:start="209:26" pos:end="209:39"><expr pos:start="209:26" pos:end="209:39"><name pos:start="209:26" pos:end="209:39"><name pos:start="209:26" pos:end="209:28">job</name><operator pos:start="209:29" pos:end="209:30">-&gt;</operator><name pos:start="209:31" pos:end="209:36">common</name><operator pos:start="209:37" pos:end="209:37">.</operator><name pos:start="209:38" pos:end="209:39">co</name></name></expr></argument>, <argument pos:start="209:42" pos:end="209:44"><expr pos:start="209:42" pos:end="209:44"><name pos:start="209:42" pos:end="209:44">job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="211:5" pos:end="211:11">return;</return>



 <label pos:start="215:2" pos:end="215:7"><name pos:start="215:2" pos:end="215:6">error</name>:</label>

    <if_stmt pos:start="217:5" pos:end="221:5"><if pos:start="217:5" pos:end="221:5">if <condition pos:start="217:8" pos:end="217:20">(<expr pos:start="217:9" pos:end="217:19"><name pos:start="217:9" pos:end="217:19">sync_bitmap</name></expr>)</condition> <block pos:start="217:22" pos:end="221:5">{<block_content pos:start="219:9" pos:end="219:57">

        <expr_stmt pos:start="219:9" pos:end="219:57"><expr pos:start="219:9" pos:end="219:56"><call pos:start="219:9" pos:end="219:56"><name pos:start="219:9" pos:end="219:33">bdrv_reclaim_dirty_bitmap</name><argument_list pos:start="219:34" pos:end="219:56">(<argument pos:start="219:35" pos:end="219:36"><expr pos:start="219:35" pos:end="219:36"><name pos:start="219:35" pos:end="219:36">bs</name></expr></argument>, <argument pos:start="219:39" pos:end="219:49"><expr pos:start="219:39" pos:end="219:49"><name pos:start="219:39" pos:end="219:49">sync_bitmap</name></expr></argument>, <argument pos:start="219:52" pos:end="219:55"><expr pos:start="219:52" pos:end="219:55"><name pos:start="219:52" pos:end="219:55">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="223:5" pos:end="229:5"><if pos:start="223:5" pos:end="229:5">if <condition pos:start="223:8" pos:end="223:12">(<expr pos:start="223:9" pos:end="223:11"><name pos:start="223:9" pos:end="223:11">job</name></expr>)</condition> <block pos:start="223:14" pos:end="229:5">{<block_content pos:start="225:9" pos:end="227:38">

        <expr_stmt pos:start="225:9" pos:end="225:31"><expr pos:start="225:9" pos:end="225:30"><call pos:start="225:9" pos:end="225:30"><name pos:start="225:9" pos:end="225:17">blk_unref</name><argument_list pos:start="225:18" pos:end="225:30">(<argument pos:start="225:19" pos:end="225:29"><expr pos:start="225:19" pos:end="225:29"><name pos:start="225:19" pos:end="225:29"><name pos:start="225:19" pos:end="225:21">job</name><operator pos:start="225:22" pos:end="225:23">-&gt;</operator><name pos:start="225:24" pos:end="225:29">target</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="227:9" pos:end="227:38"><expr pos:start="227:9" pos:end="227:37"><call pos:start="227:9" pos:end="227:37"><name pos:start="227:9" pos:end="227:23">block_job_unref</name><argument_list pos:start="227:24" pos:end="227:37">(<argument pos:start="227:25" pos:end="227:36"><expr pos:start="227:25" pos:end="227:36"><operator pos:start="227:25" pos:end="227:25">&amp;</operator><name pos:start="227:26" pos:end="227:36"><name pos:start="227:26" pos:end="227:28">job</name><operator pos:start="227:29" pos:end="227:30">-&gt;</operator><name pos:start="227:31" pos:end="227:36">common</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
