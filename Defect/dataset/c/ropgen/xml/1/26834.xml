<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26834.c" pos:tabs="8"><function pos:start="1:1" pos:end="169:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:37">vhost_dev_unassign_memory</name><parameter_list pos:start="1:38" pos:end="5:52">(<parameter pos:start="1:39" pos:end="1:59"><decl pos:start="1:39" pos:end="1:59"><type pos:start="1:39" pos:end="1:59"><name pos:start="1:39" pos:end="1:54"><name pos:start="1:39" pos:end="1:44">struct</name> <name pos:start="1:46" pos:end="1:54">vhost_dev</name></name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:59">dev</name></decl></parameter>,

                                      <parameter pos:start="3:39" pos:end="3:57"><decl pos:start="3:39" pos:end="3:57"><type pos:start="3:39" pos:end="3:57"><name pos:start="3:39" pos:end="3:46">uint64_t</name></type> <name pos:start="3:48" pos:end="3:57">start_addr</name></decl></parameter>,

                                      <parameter pos:start="5:39" pos:end="5:51"><decl pos:start="5:39" pos:end="5:51"><type pos:start="5:39" pos:end="5:51"><name pos:start="5:39" pos:end="5:46">uint64_t</name></type> <name pos:start="5:48" pos:end="5:51">size</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="169:1">{<block_content pos:start="9:5" pos:end="167:5">

    <decl_stmt pos:start="9:5" pos:end="9:41"><decl pos:start="9:5" pos:end="9:12"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:12">from</name></decl>, <decl pos:start="9:15" pos:end="9:16"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:15" pos:end="9:16">to</name></decl>, <decl pos:start="9:19" pos:end="9:40"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:19" pos:end="9:19">n</name> <init pos:start="9:21" pos:end="9:40">= <expr pos:start="9:23" pos:end="9:40"><name pos:start="9:23" pos:end="9:40"><name pos:start="9:23" pos:end="9:25">dev</name><operator pos:start="9:26" pos:end="9:27">-&gt;</operator><name pos:start="9:28" pos:end="9:30">mem</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:40">nregions</name></name></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="11:5" pos:end="11:62">/* Track overlapping/split regions for sanity checking. */</comment>

    <decl_stmt pos:start="13:5" pos:end="13:74"><decl pos:start="13:5" pos:end="13:25"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:21">overlap_start</name> <init pos:start="13:23" pos:end="13:25">= <expr pos:start="13:25" pos:end="13:25"><literal type="number" pos:start="13:25" pos:end="13:25">0</literal></expr></init></decl>, <decl pos:start="13:28" pos:end="13:42"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:28" pos:end="13:38">overlap_end</name> <init pos:start="13:40" pos:end="13:42">= <expr pos:start="13:42" pos:end="13:42"><literal type="number" pos:start="13:42" pos:end="13:42">0</literal></expr></init></decl>, <decl pos:start="13:45" pos:end="13:62"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:45" pos:end="13:58">overlap_middle</name> <init pos:start="13:60" pos:end="13:62">= <expr pos:start="13:62" pos:end="13:62"><literal type="number" pos:start="13:62" pos:end="13:62">0</literal></expr></init></decl>, <decl pos:start="13:65" pos:end="13:73"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:65" pos:end="13:69">split</name> <init pos:start="13:71" pos:end="13:73">= <expr pos:start="13:73" pos:end="13:73"><literal type="number" pos:start="13:73" pos:end="13:73">0</literal></expr></init></decl>;</decl_stmt>



    <for pos:start="17:5" pos:end="167:5">for <control pos:start="17:9" pos:end="17:50">(<init pos:start="17:10" pos:end="17:26"><expr pos:start="17:10" pos:end="17:17"><name pos:start="17:10" pos:end="17:13">from</name> <operator pos:start="17:15" pos:end="17:15">=</operator> <literal type="number" pos:start="17:17" pos:end="17:17">0</literal></expr><operator pos:start="17:18" pos:end="17:18">,</operator> <expr pos:start="17:20" pos:end="17:25"><name pos:start="17:20" pos:end="17:21">to</name> <operator pos:start="17:23" pos:end="17:23">=</operator> <literal type="number" pos:start="17:25" pos:end="17:25">0</literal></expr>;</init> <condition pos:start="17:28" pos:end="17:36"><expr pos:start="17:28" pos:end="17:35"><name pos:start="17:28" pos:end="17:31">from</name> <operator pos:start="17:33" pos:end="17:33">&lt;</operator> <name pos:start="17:35" pos:end="17:35">n</name></expr>;</condition> <incr pos:start="17:38" pos:end="17:49"><expr pos:start="17:38" pos:end="17:43"><operator pos:start="17:38" pos:end="17:39">++</operator><name pos:start="17:40" pos:end="17:43">from</name></expr><operator pos:start="17:44" pos:end="17:44">,</operator> <expr pos:start="17:46" pos:end="17:49"><operator pos:start="17:46" pos:end="17:47">++</operator><name pos:start="17:48" pos:end="17:49">to</name></expr></incr>)</control> <block pos:start="17:52" pos:end="167:5">{<block_content pos:start="19:9" pos:end="165:16">

        <decl_stmt pos:start="19:9" pos:end="19:65"><decl pos:start="19:9" pos:end="19:64"><type pos:start="19:9" pos:end="19:36"><name pos:start="19:9" pos:end="19:34"><name pos:start="19:9" pos:end="19:14">struct</name> <name pos:start="19:16" pos:end="19:34">vhost_memory_region</name></name> <modifier pos:start="19:36" pos:end="19:36">*</modifier></type><name pos:start="19:37" pos:end="19:39">reg</name> <init pos:start="19:41" pos:end="19:64">= <expr pos:start="19:43" pos:end="19:64"><name pos:start="19:43" pos:end="19:59"><name pos:start="19:43" pos:end="19:45">dev</name><operator pos:start="19:46" pos:end="19:47">-&gt;</operator><name pos:start="19:48" pos:end="19:50">mem</name><operator pos:start="19:51" pos:end="19:52">-&gt;</operator><name pos:start="19:53" pos:end="19:59">regions</name></name> <operator pos:start="19:61" pos:end="19:61">+</operator> <name pos:start="19:63" pos:end="19:64">to</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="21:9" pos:end="21:25"><decl pos:start="21:9" pos:end="21:24"><type pos:start="21:9" pos:end="21:16"><name pos:start="21:9" pos:end="21:16">uint64_t</name></type> <name pos:start="21:18" pos:end="21:24">reglast</name></decl>;</decl_stmt>

        <decl_stmt pos:start="23:9" pos:end="23:25"><decl pos:start="23:9" pos:end="23:24"><type pos:start="23:9" pos:end="23:16"><name pos:start="23:9" pos:end="23:16">uint64_t</name></type> <name pos:start="23:18" pos:end="23:24">memlast</name></decl>;</decl_stmt>

        <decl_stmt pos:start="25:9" pos:end="25:24"><decl pos:start="25:9" pos:end="25:23"><type pos:start="25:9" pos:end="25:16"><name pos:start="25:9" pos:end="25:16">uint64_t</name></type> <name pos:start="25:18" pos:end="25:23">change</name></decl>;</decl_stmt>



        <comment type="block" pos:start="29:9" pos:end="29:30">/* clone old region */</comment>

        <if_stmt pos:start="31:9" pos:end="35:9"><if pos:start="31:9" pos:end="35:9">if <condition pos:start="31:12" pos:end="31:23">(<expr pos:start="31:13" pos:end="31:22"><name pos:start="31:13" pos:end="31:14">to</name> <operator pos:start="31:16" pos:end="31:17">!=</operator> <name pos:start="31:19" pos:end="31:22">from</name></expr>)</condition> <block pos:start="31:25" pos:end="35:9">{<block_content pos:start="33:13" pos:end="33:63">

            <expr_stmt pos:start="33:13" pos:end="33:63"><expr pos:start="33:13" pos:end="33:62"><call pos:start="33:13" pos:end="33:62"><name pos:start="33:13" pos:end="33:18">memcpy</name><argument_list pos:start="33:19" pos:end="33:62">(<argument pos:start="33:20" pos:end="33:22"><expr pos:start="33:20" pos:end="33:22"><name pos:start="33:20" pos:end="33:22">reg</name></expr></argument>, <argument pos:start="33:25" pos:end="33:48"><expr pos:start="33:25" pos:end="33:48"><name pos:start="33:25" pos:end="33:41"><name pos:start="33:25" pos:end="33:27">dev</name><operator pos:start="33:28" pos:end="33:29">-&gt;</operator><name pos:start="33:30" pos:end="33:32">mem</name><operator pos:start="33:33" pos:end="33:34">-&gt;</operator><name pos:start="33:35" pos:end="33:41">regions</name></name> <operator pos:start="33:43" pos:end="33:43">+</operator> <name pos:start="33:45" pos:end="33:48">from</name></expr></argument>, <argument pos:start="33:51" pos:end="33:61"><expr pos:start="33:51" pos:end="33:61"><sizeof pos:start="33:51" pos:end="33:56">sizeof <name/></sizeof>*<name pos:start="33:59" pos:end="33:61">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="39:9" pos:end="39:34">/* No overlap is simple */</comment>

        <if_stmt pos:start="41:9" pos:end="47:9"><if pos:start="41:9" pos:end="47:9">if <condition pos:start="41:12" pos:end="43:46">(<expr pos:start="41:13" pos:end="43:45"><operator pos:start="41:13" pos:end="41:13">!</operator><call pos:start="41:14" pos:end="43:45"><name pos:start="41:14" pos:end="41:27">ranges_overlap</name><argument_list pos:start="41:28" pos:end="43:45">(<argument pos:start="41:29" pos:end="41:48"><expr pos:start="41:29" pos:end="41:48"><name pos:start="41:29" pos:end="41:48"><name pos:start="41:29" pos:end="41:31">reg</name><operator pos:start="41:32" pos:end="41:33">-&gt;</operator><name pos:start="41:34" pos:end="41:48">guest_phys_addr</name></name></expr></argument>, <argument pos:start="41:51" pos:end="41:66"><expr pos:start="41:51" pos:end="41:66"><name pos:start="41:51" pos:end="41:66"><name pos:start="41:51" pos:end="41:53">reg</name><operator pos:start="41:54" pos:end="41:55">-&gt;</operator><name pos:start="41:56" pos:end="41:66">memory_size</name></name></expr></argument>,

                            <argument pos:start="43:29" pos:end="43:38"><expr pos:start="43:29" pos:end="43:38"><name pos:start="43:29" pos:end="43:38">start_addr</name></expr></argument>, <argument pos:start="43:41" pos:end="43:44"><expr pos:start="43:41" pos:end="43:44"><name pos:start="43:41" pos:end="43:44">size</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="43:48" pos:end="47:9">{<block_content pos:start="45:13" pos:end="45:21">

            <continue pos:start="45:13" pos:end="45:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="51:9" pos:end="55:53">/* Split only happens if supplied region

         * is in the middle of an existing one. Thus it can not

         * overlap with any other existing region. */</comment>

        <expr_stmt pos:start="57:9" pos:end="57:23"><expr pos:start="57:9" pos:end="57:22"><call pos:start="57:9" pos:end="57:22"><name pos:start="57:9" pos:end="57:14">assert</name><argument_list pos:start="57:15" pos:end="57:22">(<argument pos:start="57:16" pos:end="57:21"><expr pos:start="57:16" pos:end="57:21"><operator pos:start="57:16" pos:end="57:16">!</operator><name pos:start="57:17" pos:end="57:21">split</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="61:9" pos:end="61:73"><expr pos:start="61:9" pos:end="61:72"><name pos:start="61:9" pos:end="61:15">reglast</name> <operator pos:start="61:17" pos:end="61:17">=</operator> <call pos:start="61:19" pos:end="61:72"><name pos:start="61:19" pos:end="61:32">range_get_last</name><argument_list pos:start="61:33" pos:end="61:72">(<argument pos:start="61:34" pos:end="61:53"><expr pos:start="61:34" pos:end="61:53"><name pos:start="61:34" pos:end="61:53"><name pos:start="61:34" pos:end="61:36">reg</name><operator pos:start="61:37" pos:end="61:38">-&gt;</operator><name pos:start="61:39" pos:end="61:53">guest_phys_addr</name></name></expr></argument>, <argument pos:start="61:56" pos:end="61:71"><expr pos:start="61:56" pos:end="61:71"><name pos:start="61:56" pos:end="61:71"><name pos:start="61:56" pos:end="61:58">reg</name><operator pos:start="61:59" pos:end="61:60">-&gt;</operator><name pos:start="61:61" pos:end="61:71">memory_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:51"><expr pos:start="63:9" pos:end="63:50"><name pos:start="63:9" pos:end="63:15">memlast</name> <operator pos:start="63:17" pos:end="63:17">=</operator> <call pos:start="63:19" pos:end="63:50"><name pos:start="63:19" pos:end="63:32">range_get_last</name><argument_list pos:start="63:33" pos:end="63:50">(<argument pos:start="63:34" pos:end="63:43"><expr pos:start="63:34" pos:end="63:43"><name pos:start="63:34" pos:end="63:43">start_addr</name></expr></argument>, <argument pos:start="63:46" pos:end="63:49"><expr pos:start="63:46" pos:end="63:49"><name pos:start="63:46" pos:end="63:49">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="67:9" pos:end="67:33">/* Remove whole region */</comment>

        <if_stmt pos:start="69:9" pos:end="81:9"><if pos:start="69:9" pos:end="81:9">if <condition pos:start="69:12" pos:end="69:69">(<expr pos:start="69:13" pos:end="69:68"><name pos:start="69:13" pos:end="69:22">start_addr</name> <operator pos:start="69:24" pos:end="69:25">&lt;=</operator> <name pos:start="69:27" pos:end="69:46"><name pos:start="69:27" pos:end="69:29">reg</name><operator pos:start="69:30" pos:end="69:31">-&gt;</operator><name pos:start="69:32" pos:end="69:46">guest_phys_addr</name></name> <operator pos:start="69:48" pos:end="69:49">&amp;&amp;</operator> <name pos:start="69:51" pos:end="69:57">memlast</name> <operator pos:start="69:59" pos:end="69:60">&gt;=</operator> <name pos:start="69:62" pos:end="69:68">reglast</name></expr>)</condition> <block pos:start="69:71" pos:end="81:9">{<block_content pos:start="71:13" pos:end="79:21">

            <expr_stmt pos:start="71:13" pos:end="71:33"><expr pos:start="71:13" pos:end="71:32"><operator pos:start="71:13" pos:end="71:14">--</operator><name pos:start="71:15" pos:end="71:32"><name pos:start="71:15" pos:end="71:17">dev</name><operator pos:start="71:18" pos:end="71:19">-&gt;</operator><name pos:start="71:20" pos:end="71:22">mem</name><operator pos:start="71:23" pos:end="71:24">-&gt;</operator><name pos:start="71:25" pos:end="71:32">nregions</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="73:13" pos:end="73:17"><expr pos:start="73:13" pos:end="73:16"><operator pos:start="73:13" pos:end="73:14">--</operator><name pos:start="73:15" pos:end="73:16">to</name></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:28"><expr pos:start="75:13" pos:end="75:27"><call pos:start="75:13" pos:end="75:27"><name pos:start="75:13" pos:end="75:18">assert</name><argument_list pos:start="75:19" pos:end="75:27">(<argument pos:start="75:20" pos:end="75:26"><expr pos:start="75:20" pos:end="75:26"><name pos:start="75:20" pos:end="75:21">to</name> <operator pos:start="75:23" pos:end="75:24">&gt;=</operator> <literal type="number" pos:start="75:26" pos:end="75:26">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:29"><expr pos:start="77:13" pos:end="77:28"><operator pos:start="77:13" pos:end="77:14">++</operator><name pos:start="77:15" pos:end="77:28">overlap_middle</name></expr>;</expr_stmt>

            <continue pos:start="79:13" pos:end="79:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="85:9" pos:end="85:27">/* Shrink region */</comment>

        <if_stmt pos:start="87:9" pos:end="99:9"><if pos:start="87:9" pos:end="99:9">if <condition pos:start="87:12" pos:end="87:31">(<expr pos:start="87:13" pos:end="87:30"><name pos:start="87:13" pos:end="87:19">memlast</name> <operator pos:start="87:21" pos:end="87:22">&gt;=</operator> <name pos:start="87:24" pos:end="87:30">reglast</name></expr>)</condition> <block pos:start="87:33" pos:end="99:9">{<block_content pos:start="89:13" pos:end="97:21">

            <expr_stmt pos:start="89:13" pos:end="89:65"><expr pos:start="89:13" pos:end="89:64"><name pos:start="89:13" pos:end="89:28"><name pos:start="89:13" pos:end="89:15">reg</name><operator pos:start="89:16" pos:end="89:17">-&gt;</operator><name pos:start="89:18" pos:end="89:28">memory_size</name></name> <operator pos:start="89:30" pos:end="89:30">=</operator> <name pos:start="89:32" pos:end="89:41">start_addr</name> <operator pos:start="89:43" pos:end="89:43">-</operator> <name pos:start="89:45" pos:end="89:64"><name pos:start="89:45" pos:end="89:47">reg</name><operator pos:start="89:48" pos:end="89:49">-&gt;</operator><name pos:start="89:50" pos:end="89:64">guest_phys_addr</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:37"><expr pos:start="91:13" pos:end="91:36"><call pos:start="91:13" pos:end="91:36"><name pos:start="91:13" pos:end="91:18">assert</name><argument_list pos:start="91:19" pos:end="91:36">(<argument pos:start="91:20" pos:end="91:35"><expr pos:start="91:20" pos:end="91:35"><name pos:start="91:20" pos:end="91:35"><name pos:start="91:20" pos:end="91:22">reg</name><operator pos:start="91:23" pos:end="91:24">-&gt;</operator><name pos:start="91:25" pos:end="91:35">memory_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:33"><expr pos:start="93:13" pos:end="93:32"><call pos:start="93:13" pos:end="93:32"><name pos:start="93:13" pos:end="93:18">assert</name><argument_list pos:start="93:19" pos:end="93:32">(<argument pos:start="93:20" pos:end="93:31"><expr pos:start="93:20" pos:end="93:31"><operator pos:start="93:20" pos:end="93:20">!</operator><name pos:start="93:21" pos:end="93:31">overlap_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:26"><expr pos:start="95:13" pos:end="95:25"><operator pos:start="95:13" pos:end="95:14">++</operator><name pos:start="95:15" pos:end="95:25">overlap_end</name></expr>;</expr_stmt>

            <continue pos:start="97:13" pos:end="97:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="103:9" pos:end="103:26">/* Shift region */</comment>

        <if_stmt pos:start="105:9" pos:end="123:9"><if pos:start="105:9" pos:end="123:9">if <condition pos:start="105:12" pos:end="105:47">(<expr pos:start="105:13" pos:end="105:46"><name pos:start="105:13" pos:end="105:22">start_addr</name> <operator pos:start="105:24" pos:end="105:25">&lt;=</operator> <name pos:start="105:27" pos:end="105:46"><name pos:start="105:27" pos:end="105:29">reg</name><operator pos:start="105:30" pos:end="105:31">-&gt;</operator><name pos:start="105:32" pos:end="105:46">guest_phys_addr</name></name></expr>)</condition> <block pos:start="105:49" pos:end="123:9">{<block_content pos:start="107:13" pos:end="121:21">

            <expr_stmt pos:start="107:13" pos:end="107:56"><expr pos:start="107:13" pos:end="107:55"><name pos:start="107:13" pos:end="107:18">change</name> <operator pos:start="107:20" pos:end="107:20">=</operator> <name pos:start="107:22" pos:end="107:28">memlast</name> <operator pos:start="107:30" pos:end="107:30">+</operator> <literal type="number" pos:start="107:32" pos:end="107:34">1</literal> <operator pos:start="107:34" pos:end="107:34">-</operator> <name pos:start="107:36" pos:end="107:55"><name pos:start="107:36" pos:end="107:38">reg</name><operator pos:start="107:39" pos:end="107:40">-&gt;</operator><name pos:start="107:41" pos:end="107:55">guest_phys_addr</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="109:13" pos:end="109:39"><expr pos:start="109:13" pos:end="109:38"><name pos:start="109:13" pos:end="109:28"><name pos:start="109:13" pos:end="109:15">reg</name><operator pos:start="109:16" pos:end="109:17">-&gt;</operator><name pos:start="109:18" pos:end="109:28">memory_size</name></name> <operator pos:start="109:30" pos:end="109:31">-=</operator> <name pos:start="109:33" pos:end="109:38">change</name></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:43"><expr pos:start="111:13" pos:end="111:42"><name pos:start="111:13" pos:end="111:32"><name pos:start="111:13" pos:end="111:15">reg</name><operator pos:start="111:16" pos:end="111:17">-&gt;</operator><name pos:start="111:18" pos:end="111:32">guest_phys_addr</name></name> <operator pos:start="111:34" pos:end="111:35">+=</operator> <name pos:start="111:37" pos:end="111:42">change</name></expr>;</expr_stmt>

            <expr_stmt pos:start="113:13" pos:end="113:42"><expr pos:start="113:13" pos:end="113:41"><name pos:start="113:13" pos:end="113:31"><name pos:start="113:13" pos:end="113:15">reg</name><operator pos:start="113:16" pos:end="113:17">-&gt;</operator><name pos:start="113:18" pos:end="113:31">userspace_addr</name></name> <operator pos:start="113:33" pos:end="113:34">+=</operator> <name pos:start="113:36" pos:end="113:41">change</name></expr>;</expr_stmt>

            <expr_stmt pos:start="115:13" pos:end="115:37"><expr pos:start="115:13" pos:end="115:36"><call pos:start="115:13" pos:end="115:36"><name pos:start="115:13" pos:end="115:18">assert</name><argument_list pos:start="115:19" pos:end="115:36">(<argument pos:start="115:20" pos:end="115:35"><expr pos:start="115:20" pos:end="115:35"><name pos:start="115:20" pos:end="115:35"><name pos:start="115:20" pos:end="115:22">reg</name><operator pos:start="115:23" pos:end="115:24">-&gt;</operator><name pos:start="115:25" pos:end="115:35">memory_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="117:13" pos:end="117:35"><expr pos:start="117:13" pos:end="117:34"><call pos:start="117:13" pos:end="117:34"><name pos:start="117:13" pos:end="117:18">assert</name><argument_list pos:start="117:19" pos:end="117:34">(<argument pos:start="117:20" pos:end="117:33"><expr pos:start="117:20" pos:end="117:33"><operator pos:start="117:20" pos:end="117:20">!</operator><name pos:start="117:21" pos:end="117:33">overlap_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:28"><expr pos:start="119:13" pos:end="119:27"><operator pos:start="119:13" pos:end="119:14">++</operator><name pos:start="119:15" pos:end="119:27">overlap_start</name></expr>;</expr_stmt>

            <continue pos:start="121:13" pos:end="121:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="127:9" pos:end="131:53">/* This only happens if supplied region

         * is in the middle of an existing one. Thus it can not

         * overlap with any other existing region. */</comment>

        <expr_stmt pos:start="133:9" pos:end="133:31"><expr pos:start="133:9" pos:end="133:30"><call pos:start="133:9" pos:end="133:30"><name pos:start="133:9" pos:end="133:14">assert</name><argument_list pos:start="133:15" pos:end="133:30">(<argument pos:start="133:16" pos:end="133:29"><expr pos:start="133:16" pos:end="133:29"><operator pos:start="133:16" pos:end="133:16">!</operator><name pos:start="133:17" pos:end="133:29">overlap_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:29"><expr pos:start="135:9" pos:end="135:28"><call pos:start="135:9" pos:end="135:28"><name pos:start="135:9" pos:end="135:14">assert</name><argument_list pos:start="135:15" pos:end="135:28">(<argument pos:start="135:16" pos:end="135:27"><expr pos:start="135:16" pos:end="135:27"><operator pos:start="135:16" pos:end="135:16">!</operator><name pos:start="135:17" pos:end="135:27">overlap_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:32"><expr pos:start="137:9" pos:end="137:31"><call pos:start="137:9" pos:end="137:31"><name pos:start="137:9" pos:end="137:14">assert</name><argument_list pos:start="137:15" pos:end="137:31">(<argument pos:start="137:16" pos:end="137:30"><expr pos:start="137:16" pos:end="137:30"><operator pos:start="137:16" pos:end="137:16">!</operator><name pos:start="137:17" pos:end="137:30">overlap_middle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="139:9" pos:end="139:65">/* Split region: shrink first part, shift second part. */</comment>

        <expr_stmt pos:start="141:9" pos:end="141:56"><expr pos:start="141:9" pos:end="141:55"><call pos:start="141:9" pos:end="141:55"><name pos:start="141:9" pos:end="141:14">memcpy</name><argument_list pos:start="141:15" pos:end="141:55">(<argument pos:start="141:16" pos:end="141:36"><expr pos:start="141:16" pos:end="141:36"><name pos:start="141:16" pos:end="141:32"><name pos:start="141:16" pos:end="141:18">dev</name><operator pos:start="141:19" pos:end="141:20">-&gt;</operator><name pos:start="141:21" pos:end="141:23">mem</name><operator pos:start="141:24" pos:end="141:25">-&gt;</operator><name pos:start="141:26" pos:end="141:32">regions</name></name> <operator pos:start="141:34" pos:end="141:34">+</operator> <name pos:start="141:36" pos:end="141:36">n</name></expr></argument>, <argument pos:start="141:39" pos:end="141:41"><expr pos:start="141:39" pos:end="141:41"><name pos:start="141:39" pos:end="141:41">reg</name></expr></argument>, <argument pos:start="141:44" pos:end="141:54"><expr pos:start="141:44" pos:end="141:54"><sizeof pos:start="141:44" pos:end="141:49">sizeof <name/></sizeof>*<name pos:start="141:52" pos:end="141:54">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="143:9" pos:end="143:61"><expr pos:start="143:9" pos:end="143:60"><name pos:start="143:9" pos:end="143:24"><name pos:start="143:9" pos:end="143:11">reg</name><operator pos:start="143:12" pos:end="143:13">-&gt;</operator><name pos:start="143:14" pos:end="143:24">memory_size</name></name> <operator pos:start="143:26" pos:end="143:26">=</operator> <name pos:start="143:28" pos:end="143:37">start_addr</name> <operator pos:start="143:39" pos:end="143:39">-</operator> <name pos:start="143:41" pos:end="143:60"><name pos:start="143:41" pos:end="143:43">reg</name><operator pos:start="143:44" pos:end="143:45">-&gt;</operator><name pos:start="143:46" pos:end="143:60">guest_phys_addr</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:33"><expr pos:start="145:9" pos:end="145:32"><call pos:start="145:9" pos:end="145:32"><name pos:start="145:9" pos:end="145:14">assert</name><argument_list pos:start="145:15" pos:end="145:32">(<argument pos:start="145:16" pos:end="145:31"><expr pos:start="145:16" pos:end="145:31"><name pos:start="145:16" pos:end="145:31"><name pos:start="145:16" pos:end="145:18">reg</name><operator pos:start="145:19" pos:end="145:20">-&gt;</operator><name pos:start="145:21" pos:end="145:31">memory_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:52"><expr pos:start="147:9" pos:end="147:51"><name pos:start="147:9" pos:end="147:14">change</name> <operator pos:start="147:16" pos:end="147:16">=</operator> <name pos:start="147:18" pos:end="147:24">memlast</name> <operator pos:start="147:26" pos:end="147:26">+</operator> <literal type="number" pos:start="147:28" pos:end="147:30">1</literal> <operator pos:start="147:30" pos:end="147:30">-</operator> <name pos:start="147:32" pos:end="147:51"><name pos:start="147:32" pos:end="147:34">reg</name><operator pos:start="147:35" pos:end="147:36">-&gt;</operator><name pos:start="147:37" pos:end="147:51">guest_phys_addr</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:36"><expr pos:start="149:9" pos:end="149:35"><name pos:start="149:9" pos:end="149:11">reg</name> <operator pos:start="149:13" pos:end="149:13">=</operator> <name pos:start="149:15" pos:end="149:31"><name pos:start="149:15" pos:end="149:17">dev</name><operator pos:start="149:18" pos:end="149:19">-&gt;</operator><name pos:start="149:20" pos:end="149:22">mem</name><operator pos:start="149:23" pos:end="149:24">-&gt;</operator><name pos:start="149:25" pos:end="149:31">regions</name></name> <operator pos:start="149:33" pos:end="149:33">+</operator> <name pos:start="149:35" pos:end="149:35">n</name></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:35"><expr pos:start="151:9" pos:end="151:34"><name pos:start="151:9" pos:end="151:24"><name pos:start="151:9" pos:end="151:11">reg</name><operator pos:start="151:12" pos:end="151:13">-&gt;</operator><name pos:start="151:14" pos:end="151:24">memory_size</name></name> <operator pos:start="151:26" pos:end="151:27">-=</operator> <name pos:start="151:29" pos:end="151:34">change</name></expr>;</expr_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:33"><expr pos:start="153:9" pos:end="153:32"><call pos:start="153:9" pos:end="153:32"><name pos:start="153:9" pos:end="153:14">assert</name><argument_list pos:start="153:15" pos:end="153:32">(<argument pos:start="153:16" pos:end="153:31"><expr pos:start="153:16" pos:end="153:31"><name pos:start="153:16" pos:end="153:31"><name pos:start="153:16" pos:end="153:18">reg</name><operator pos:start="153:19" pos:end="153:20">-&gt;</operator><name pos:start="153:21" pos:end="153:31">memory_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:39"><expr pos:start="155:9" pos:end="155:38"><name pos:start="155:9" pos:end="155:28"><name pos:start="155:9" pos:end="155:11">reg</name><operator pos:start="155:12" pos:end="155:13">-&gt;</operator><name pos:start="155:14" pos:end="155:28">guest_phys_addr</name></name> <operator pos:start="155:30" pos:end="155:31">+=</operator> <name pos:start="155:33" pos:end="155:38">change</name></expr>;</expr_stmt>

        <expr_stmt pos:start="157:9" pos:end="157:38"><expr pos:start="157:9" pos:end="157:37"><name pos:start="157:9" pos:end="157:27"><name pos:start="157:9" pos:end="157:11">reg</name><operator pos:start="157:12" pos:end="157:13">-&gt;</operator><name pos:start="157:14" pos:end="157:27">userspace_addr</name></name> <operator pos:start="157:29" pos:end="157:30">+=</operator> <name pos:start="157:32" pos:end="157:37">change</name></expr>;</expr_stmt>

        <comment type="block" pos:start="159:9" pos:end="159:42">/* Never add more than 1 region */</comment>

        <expr_stmt pos:start="161:9" pos:end="161:40"><expr pos:start="161:9" pos:end="161:39"><call pos:start="161:9" pos:end="161:39"><name pos:start="161:9" pos:end="161:14">assert</name><argument_list pos:start="161:15" pos:end="161:39">(<argument pos:start="161:16" pos:end="161:38"><expr pos:start="161:16" pos:end="161:38"><name pos:start="161:16" pos:end="161:33"><name pos:start="161:16" pos:end="161:18">dev</name><operator pos:start="161:19" pos:end="161:20">-&gt;</operator><name pos:start="161:21" pos:end="161:23">mem</name><operator pos:start="161:24" pos:end="161:25">-&gt;</operator><name pos:start="161:26" pos:end="161:33">nregions</name></name> <operator pos:start="161:35" pos:end="161:36">==</operator> <name pos:start="161:38" pos:end="161:38">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:29"><expr pos:start="163:9" pos:end="163:28"><operator pos:start="163:9" pos:end="163:10">++</operator><name pos:start="163:11" pos:end="163:28"><name pos:start="163:11" pos:end="163:13">dev</name><operator pos:start="163:14" pos:end="163:15">-&gt;</operator><name pos:start="163:16" pos:end="163:18">mem</name><operator pos:start="163:19" pos:end="163:20">-&gt;</operator><name pos:start="163:21" pos:end="163:28">nregions</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="165:9" pos:end="165:16"><expr pos:start="165:9" pos:end="165:15"><operator pos:start="165:9" pos:end="165:10">++</operator><name pos:start="165:11" pos:end="165:15">split</name></expr>;</expr_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
