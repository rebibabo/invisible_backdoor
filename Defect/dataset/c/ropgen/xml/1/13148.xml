<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13148.c" pos:tabs="8"><function pos:start="1:1" pos:end="77:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:42">qemu_rdma_exchange_get_response</name><parameter_list pos:start="1:43" pos:end="3:64">(<parameter pos:start="1:44" pos:end="1:60"><decl pos:start="1:44" pos:end="1:60"><type pos:start="1:44" pos:end="1:60"><name pos:start="1:44" pos:end="1:54">RDMAContext</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:60">rdma</name></decl></parameter>,

                <parameter pos:start="3:17" pos:end="3:39"><decl pos:start="3:17" pos:end="3:39"><type pos:start="3:17" pos:end="3:39"><name pos:start="3:17" pos:end="3:33">RDMAControlHeader</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:39">head</name></decl></parameter>, <parameter pos:start="3:42" pos:end="3:54"><decl pos:start="3:42" pos:end="3:54"><type pos:start="3:42" pos:end="3:54"><name pos:start="3:42" pos:end="3:44">int</name></type> <name pos:start="3:46" pos:end="3:54">expecting</name></decl></parameter>, <parameter pos:start="3:57" pos:end="3:63"><decl pos:start="3:57" pos:end="3:63"><type pos:start="3:57" pos:end="3:63"><name pos:start="3:57" pos:end="3:59">int</name></type> <name pos:start="3:61" pos:end="3:63">idx</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="77:1">{<block_content pos:start="7:5" pos:end="75:13">

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:21">byte_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="11:50"><decl pos:start="9:5" pos:end="11:49"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name> <init pos:start="9:13" pos:end="11:49">= <expr pos:start="9:15" pos:end="11:49"><call pos:start="9:15" pos:end="11:49"><name pos:start="9:15" pos:end="9:38">qemu_rdma_block_for_wrid</name><argument_list pos:start="9:39" pos:end="11:49">(<argument pos:start="9:40" pos:end="9:43"><expr pos:start="9:40" pos:end="9:43"><name pos:start="9:40" pos:end="9:43">rdma</name></expr></argument>, <argument pos:start="9:46" pos:end="9:73"><expr pos:start="9:46" pos:end="9:73"><name pos:start="9:46" pos:end="9:67">RDMA_WRID_RECV_CONTROL</name> <operator pos:start="9:69" pos:end="9:69">+</operator> <name pos:start="9:71" pos:end="9:73">idx</name></expr></argument>,

                                       <argument pos:start="11:40" pos:end="11:48"><expr pos:start="11:40" pos:end="11:48"><operator pos:start="11:40" pos:end="11:40">&amp;</operator><name pos:start="11:41" pos:end="11:48">byte_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="21:5"><if pos:start="15:5" pos:end="21:5">if <condition pos:start="15:8" pos:end="15:16">(<expr pos:start="15:9" pos:end="15:15"><name pos:start="15:9" pos:end="15:11">ret</name> <operator pos:start="15:13" pos:end="15:13">&lt;</operator> <literal type="number" pos:start="15:15" pos:end="15:15">0</literal></expr>)</condition> <block pos:start="15:18" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:19">

        <expr_stmt pos:start="17:9" pos:end="17:73"><expr pos:start="17:9" pos:end="17:72"><call pos:start="17:9" pos:end="17:72"><name pos:start="17:9" pos:end="17:15">fprintf</name><argument_list pos:start="17:16" pos:end="17:72">(<argument pos:start="17:17" pos:end="17:22"><expr pos:start="17:17" pos:end="17:22"><name pos:start="17:17" pos:end="17:22">stderr</name></expr></argument>, <argument pos:start="17:25" pos:end="17:71"><expr pos:start="17:25" pos:end="17:71"><literal type="string" pos:start="17:25" pos:end="17:71">"rdma migration: recv polling control error!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:19">return <expr pos:start="19:16" pos:end="19:18"><name pos:start="19:16" pos:end="19:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:60"><expr pos:start="25:5" pos:end="25:59"><call pos:start="25:5" pos:end="25:59"><name pos:start="25:5" pos:end="25:22">network_to_control</name><argument_list pos:start="25:23" pos:end="25:59">(<argument pos:start="25:24" pos:end="25:58"><expr pos:start="25:24" pos:end="25:58"><operator pos:start="25:24" pos:end="25:24">(</operator><name pos:start="25:25" pos:end="25:28">void</name> <operator pos:start="25:30" pos:end="25:30">*</operator><operator pos:start="25:31" pos:end="25:31">)</operator> <name pos:start="25:33" pos:end="25:50"><name pos:start="25:33" pos:end="25:36">rdma</name><operator pos:start="25:37" pos:end="25:38">-&gt;</operator><name pos:start="25:39" pos:end="25:45">wr_data</name><index pos:start="25:46" pos:end="25:50">[<expr pos:start="25:47" pos:end="25:49"><name pos:start="25:47" pos:end="25:49">idx</name></expr>]</index></name><operator pos:start="25:51" pos:end="25:51">.</operator><name pos:start="25:52" pos:end="25:58">control</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:72"><expr pos:start="27:5" pos:end="27:71"><call pos:start="27:5" pos:end="27:71"><name pos:start="27:5" pos:end="27:10">memcpy</name><argument_list pos:start="27:11" pos:end="27:71">(<argument pos:start="27:12" pos:end="27:15"><expr pos:start="27:12" pos:end="27:15"><name pos:start="27:12" pos:end="27:15">head</name></expr></argument>, <argument pos:start="27:18" pos:end="27:43"><expr pos:start="27:18" pos:end="27:43"><name pos:start="27:18" pos:end="27:35"><name pos:start="27:18" pos:end="27:21">rdma</name><operator pos:start="27:22" pos:end="27:23">-&gt;</operator><name pos:start="27:24" pos:end="27:30">wr_data</name><index pos:start="27:31" pos:end="27:35">[<expr pos:start="27:32" pos:end="27:34"><name pos:start="27:32" pos:end="27:34">idx</name></expr>]</index></name><operator pos:start="27:36" pos:end="27:36">.</operator><name pos:start="27:37" pos:end="27:43">control</name></expr></argument>, <argument pos:start="27:46" pos:end="27:70"><expr pos:start="27:46" pos:end="27:70"><sizeof pos:start="27:46" pos:end="27:70">sizeof<argument_list pos:start="27:52" pos:end="27:70">(<argument pos:start="27:53" pos:end="27:69"><expr pos:start="27:53" pos:end="27:69"><name pos:start="27:53" pos:end="27:69">RDMAControlHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:69"><expr pos:start="31:5" pos:end="31:68"><call pos:start="31:5" pos:end="31:68"><name pos:start="31:5" pos:end="31:13">DDDPRINTF</name><argument_list pos:start="31:14" pos:end="31:68">(<argument pos:start="31:15" pos:end="31:42"><expr pos:start="31:15" pos:end="31:42"><literal type="string" pos:start="31:15" pos:end="31:42">"CONTROL: %s receiving...\n"</literal></expr></argument>, <argument pos:start="31:45" pos:end="31:67"><expr pos:start="31:45" pos:end="31:67"><name pos:start="31:45" pos:end="31:67"><name pos:start="31:45" pos:end="31:56">control_desc</name><index pos:start="31:57" pos:end="31:67">[<expr pos:start="31:58" pos:end="31:66"><name pos:start="31:58" pos:end="31:66">expecting</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="35:5" pos:end="53:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:39">(<expr pos:start="35:9" pos:end="35:38"><name pos:start="35:9" pos:end="35:17">expecting</name> <operator pos:start="35:19" pos:end="35:20">==</operator> <name pos:start="35:22" pos:end="35:38">RDMA_CONTROL_NONE</name></expr>)</condition> <block pos:start="35:41" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:56">

        <expr_stmt pos:start="37:9" pos:end="39:56"><expr pos:start="37:9" pos:end="39:55"><call pos:start="37:9" pos:end="39:55"><name pos:start="37:9" pos:end="37:17">DDDPRINTF</name><argument_list pos:start="37:18" pos:end="39:55">(<argument pos:start="37:19" pos:end="37:43"><expr pos:start="37:19" pos:end="37:43"><literal type="string" pos:start="37:19" pos:end="37:43">"Surprise: got %s (%d)\n"</literal></expr></argument>,

                  <argument pos:start="39:19" pos:end="39:42"><expr pos:start="39:19" pos:end="39:42"><name pos:start="39:19" pos:end="39:42"><name pos:start="39:19" pos:end="39:30">control_desc</name><index pos:start="39:31" pos:end="39:42">[<expr pos:start="39:32" pos:end="39:41"><name pos:start="39:32" pos:end="39:41"><name pos:start="39:32" pos:end="39:35">head</name><operator pos:start="39:36" pos:end="39:37">-&gt;</operator><name pos:start="39:38" pos:end="39:41">type</name></name></expr>]</index></name></expr></argument>, <argument pos:start="39:45" pos:end="39:54"><expr pos:start="39:45" pos:end="39:54"><name pos:start="39:45" pos:end="39:54"><name pos:start="39:45" pos:end="39:48">head</name><operator pos:start="39:49" pos:end="39:50">-&gt;</operator><name pos:start="39:51" pos:end="39:54">type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="41:7" pos:end="53:5">else if <condition pos:start="41:15" pos:end="41:75">(<expr pos:start="41:16" pos:end="41:74"><name pos:start="41:16" pos:end="41:25"><name pos:start="41:16" pos:end="41:19">head</name><operator pos:start="41:20" pos:end="41:21">-&gt;</operator><name pos:start="41:22" pos:end="41:25">type</name></name> <operator pos:start="41:27" pos:end="41:28">!=</operator> <name pos:start="41:30" pos:end="41:38">expecting</name> <operator pos:start="41:40" pos:end="41:41">||</operator> <name pos:start="41:43" pos:end="41:52"><name pos:start="41:43" pos:end="41:46">head</name><operator pos:start="41:47" pos:end="41:48">-&gt;</operator><name pos:start="41:49" pos:end="41:52">type</name></name> <operator pos:start="41:54" pos:end="41:55">==</operator> <name pos:start="41:57" pos:end="41:74">RDMA_CONTROL_ERROR</name></expr>)</condition> <block pos:start="41:77" pos:end="53:5">{<block_content pos:start="43:9" pos:end="51:20">

        <expr_stmt pos:start="43:9" pos:end="49:65"><expr pos:start="43:9" pos:end="49:64"><call pos:start="43:9" pos:end="49:64"><name pos:start="43:9" pos:end="43:15">fprintf</name><argument_list pos:start="43:16" pos:end="49:64">(<argument pos:start="43:17" pos:end="43:22"><expr pos:start="43:17" pos:end="43:22"><name pos:start="43:17" pos:end="43:22">stderr</name></expr></argument>, <argument pos:start="43:25" pos:end="45:50"><expr pos:start="43:25" pos:end="45:50"><literal type="string" pos:start="43:25" pos:end="43:65">"Was expecting a %s (%d) control message"</literal>

                <literal type="string" pos:start="45:17" pos:end="45:50">", but got: %s (%d), length: %d\n"</literal></expr></argument>,

                <argument pos:start="47:17" pos:end="47:39"><expr pos:start="47:17" pos:end="47:39"><name pos:start="47:17" pos:end="47:39"><name pos:start="47:17" pos:end="47:28">control_desc</name><index pos:start="47:29" pos:end="47:39">[<expr pos:start="47:30" pos:end="47:38"><name pos:start="47:30" pos:end="47:38">expecting</name></expr>]</index></name></expr></argument>, <argument pos:start="47:42" pos:end="47:50"><expr pos:start="47:42" pos:end="47:50"><name pos:start="47:42" pos:end="47:50">expecting</name></expr></argument>,

                <argument pos:start="49:17" pos:end="49:40"><expr pos:start="49:17" pos:end="49:40"><name pos:start="49:17" pos:end="49:40"><name pos:start="49:17" pos:end="49:28">control_desc</name><index pos:start="49:29" pos:end="49:40">[<expr pos:start="49:30" pos:end="49:39"><name pos:start="49:30" pos:end="49:39"><name pos:start="49:30" pos:end="49:33">head</name><operator pos:start="49:34" pos:end="49:35">-&gt;</operator><name pos:start="49:36" pos:end="49:39">type</name></name></expr>]</index></name></expr></argument>, <argument pos:start="49:43" pos:end="49:52"><expr pos:start="49:43" pos:end="49:52"><name pos:start="49:43" pos:end="49:52"><name pos:start="49:43" pos:end="49:46">head</name><operator pos:start="49:47" pos:end="49:48">-&gt;</operator><name pos:start="49:49" pos:end="49:52">type</name></name></expr></argument>, <argument pos:start="49:55" pos:end="49:63"><expr pos:start="49:55" pos:end="49:63"><name pos:start="49:55" pos:end="49:63"><name pos:start="49:55" pos:end="49:58">head</name><operator pos:start="49:59" pos:end="49:60">-&gt;</operator><name pos:start="49:61" pos:end="49:63">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="51:9" pos:end="51:20">return <expr pos:start="51:16" pos:end="51:19"><operator pos:start="51:16" pos:end="51:16">-</operator><name pos:start="51:17" pos:end="51:19">EIO</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="55:5" pos:end="61:5"><if pos:start="55:5" pos:end="61:5">if <condition pos:start="55:8" pos:end="55:60">(<expr pos:start="55:9" pos:end="55:59"><name pos:start="55:9" pos:end="55:17"><name pos:start="55:9" pos:end="55:12">head</name><operator pos:start="55:13" pos:end="55:14">-&gt;</operator><name pos:start="55:15" pos:end="55:17">len</name></name> <operator pos:start="55:19" pos:end="55:19">&gt;</operator> <name pos:start="55:21" pos:end="55:43">RDMA_CONTROL_MAX_BUFFER</name> <operator pos:start="55:45" pos:end="55:45">-</operator> <sizeof pos:start="55:47" pos:end="55:59">sizeof<argument_list pos:start="55:53" pos:end="55:59">(<argument pos:start="55:54" pos:end="55:58"><expr pos:start="55:54" pos:end="55:58"><operator pos:start="55:54" pos:end="55:54">*</operator><name pos:start="55:55" pos:end="55:58">head</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="55:62" pos:end="61:5">{<block_content pos:start="57:9" pos:end="59:23">

        <expr_stmt pos:start="57:9" pos:end="57:60"><expr pos:start="57:9" pos:end="57:59"><call pos:start="57:9" pos:end="57:59"><name pos:start="57:9" pos:end="57:15">fprintf</name><argument_list pos:start="57:16" pos:end="57:59">(<argument pos:start="57:17" pos:end="57:22"><expr pos:start="57:17" pos:end="57:22"><name pos:start="57:17" pos:end="57:22">stderr</name></expr></argument>, <argument pos:start="57:25" pos:end="57:47"><expr pos:start="57:25" pos:end="57:47"><literal type="string" pos:start="57:25" pos:end="57:47">"too long length: %d\n"</literal></expr></argument>, <argument pos:start="57:50" pos:end="57:58"><expr pos:start="57:50" pos:end="57:58"><name pos:start="57:50" pos:end="57:58"><name pos:start="57:50" pos:end="57:53">head</name><operator pos:start="57:54" pos:end="57:55">-&gt;</operator><name pos:start="57:56" pos:end="57:58">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="59:9" pos:end="59:23">return <expr pos:start="59:16" pos:end="59:22"><operator pos:start="59:16" pos:end="59:16">-</operator><name pos:start="59:17" pos:end="59:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="63:5" pos:end="71:5"><if pos:start="63:5" pos:end="71:5">if <condition pos:start="63:8" pos:end="63:46">(<expr pos:start="63:9" pos:end="63:45"><sizeof pos:start="63:9" pos:end="63:21">sizeof<argument_list pos:start="63:15" pos:end="63:21">(<argument pos:start="63:16" pos:end="63:20"><expr pos:start="63:16" pos:end="63:20"><operator pos:start="63:16" pos:end="63:16">*</operator><name pos:start="63:17" pos:end="63:20">head</name></expr></argument>)</argument_list></sizeof> <operator pos:start="63:23" pos:end="63:23">+</operator> <name pos:start="63:25" pos:end="63:33"><name pos:start="63:25" pos:end="63:28">head</name><operator pos:start="63:29" pos:end="63:30">-&gt;</operator><name pos:start="63:31" pos:end="63:33">len</name></name> <operator pos:start="63:35" pos:end="63:36">!=</operator> <name pos:start="63:38" pos:end="63:45">byte_len</name></expr>)</condition> <block pos:start="63:48" pos:end="71:5">{<block_content pos:start="65:9" pos:end="69:23">

        <expr_stmt pos:start="65:9" pos:end="67:37"><expr pos:start="65:9" pos:end="67:36"><call pos:start="65:9" pos:end="67:36"><name pos:start="65:9" pos:end="65:15">fprintf</name><argument_list pos:start="65:16" pos:end="67:36">(<argument pos:start="65:17" pos:end="65:22"><expr pos:start="65:17" pos:end="65:22"><name pos:start="65:17" pos:end="65:22">stderr</name></expr></argument>, <argument pos:start="65:25" pos:end="65:60"><expr pos:start="65:25" pos:end="65:60"><literal type="string" pos:start="65:25" pos:end="65:60">"Malformed length: %d byte_len %d\n"</literal></expr></argument>,

                <argument pos:start="67:17" pos:end="67:25"><expr pos:start="67:17" pos:end="67:25"><name pos:start="67:17" pos:end="67:25"><name pos:start="67:17" pos:end="67:20">head</name><operator pos:start="67:21" pos:end="67:22">-&gt;</operator><name pos:start="67:23" pos:end="67:25">len</name></name></expr></argument>, <argument pos:start="67:28" pos:end="67:35"><expr pos:start="67:28" pos:end="67:35"><name pos:start="67:28" pos:end="67:35">byte_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="69:9" pos:end="69:23">return <expr pos:start="69:16" pos:end="69:22"><operator pos:start="69:16" pos:end="69:16">-</operator><name pos:start="69:17" pos:end="69:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <return pos:start="75:5" pos:end="75:13">return <expr pos:start="75:12" pos:end="75:12"><literal type="number" pos:start="75:12" pos:end="75:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
