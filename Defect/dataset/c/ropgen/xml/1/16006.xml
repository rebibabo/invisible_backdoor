<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/16006.c" pos:tabs="8"><function pos:start="1:1" pos:end="305:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">aac_decode_frame_int</name><parameter_list pos:start="1:32" pos:end="3:70">(<parameter pos:start="1:33" pos:end="1:53"><decl pos:start="1:33" pos:end="1:53"><type pos:start="1:33" pos:end="1:53"><name pos:start="1:33" pos:end="1:46">AVCodecContext</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:53">avctx</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:65"><decl pos:start="1:56" pos:end="1:65"><type pos:start="1:56" pos:end="1:65"><name pos:start="1:56" pos:end="1:59">void</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:65">data</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:50"><decl pos:start="3:33" pos:end="3:50"><type pos:start="3:33" pos:end="3:50"><name pos:start="3:33" pos:end="3:35">int</name> <modifier pos:start="3:37" pos:end="3:37">*</modifier></type><name pos:start="3:38" pos:end="3:50">got_frame_ptr</name></decl></parameter>, <parameter pos:start="3:53" pos:end="3:69"><decl pos:start="3:53" pos:end="3:69"><type pos:start="3:53" pos:end="3:69"><name pos:start="3:53" pos:end="3:65">GetBitContext</name> <modifier pos:start="3:67" pos:end="3:67">*</modifier></type><name pos:start="3:68" pos:end="3:69">gb</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="305:1">{<block_content pos:start="7:5" pos:end="303:15">

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">AACContext</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:18">ac</name> <init pos:start="7:20" pos:end="7:37">= <expr pos:start="7:22" pos:end="7:37"><name pos:start="7:22" pos:end="7:37"><name pos:start="7:22" pos:end="7:26">avctx</name><operator pos:start="7:27" pos:end="7:28">-&gt;</operator><name pos:start="7:29" pos:end="7:37">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:49"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:18">ChannelElement</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:23">che</name> <init pos:start="9:25" pos:end="9:30">= <expr pos:start="9:27" pos:end="9:30"><name pos:start="9:27" pos:end="9:30">NULL</name></expr></init></decl>, <decl pos:start="9:33" pos:end="9:48"><type ref="prev" pos:start="9:5" pos:end="9:20"><modifier pos:start="9:33" pos:end="9:33">*</modifier></type><name pos:start="9:34" pos:end="9:41">che_prev</name> <init pos:start="9:43" pos:end="9:48">= <expr pos:start="9:45" pos:end="9:48"><name pos:start="9:45" pos:end="9:48">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:63"><decl pos:start="11:5" pos:end="11:35"><type pos:start="11:5" pos:end="11:25"><name pos:start="11:5" pos:end="11:25"><name pos:start="11:5" pos:end="11:8">enum</name> <name pos:start="11:10" pos:end="11:25">RawDataBlockType</name></name></type> <name pos:start="11:27" pos:end="11:35">elem_type</name></decl>, <decl pos:start="11:38" pos:end="11:62"><type ref="prev" pos:start="11:5" pos:end="11:25"/><name pos:start="11:38" pos:end="11:51">elem_type_prev</name> <init pos:start="11:53" pos:end="11:62">= <expr pos:start="11:55" pos:end="11:62"><name pos:start="11:55" pos:end="11:62">TYPE_END</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">err</name></decl>, <decl pos:start="13:14" pos:end="13:20"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:14" pos:end="13:20">elem_id</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:64"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:15">samples</name> <init pos:start="15:17" pos:end="15:19">= <expr pos:start="15:19" pos:end="15:19"><literal type="number" pos:start="15:19" pos:end="15:19">0</literal></expr></init></decl>, <decl pos:start="15:22" pos:end="15:31"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:22" pos:end="15:31">multiplier</name></decl>, <decl pos:start="15:34" pos:end="15:48"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:34" pos:end="15:44">audio_found</name> <init pos:start="15:46" pos:end="15:48">= <expr pos:start="15:48" pos:end="15:48"><literal type="number" pos:start="15:48" pos:end="15:48">0</literal></expr></init></decl>, <decl pos:start="15:51" pos:end="15:63"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:51" pos:end="15:59">pce_found</name> <init pos:start="15:61" pos:end="15:63">= <expr pos:start="15:63" pos:end="15:63"><literal type="number" pos:start="15:63" pos:end="15:63">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="41:5"><if pos:start="19:5" pos:end="41:5">if <condition pos:start="19:8" pos:end="19:35">(<expr pos:start="19:9" pos:end="19:34"><call pos:start="19:9" pos:end="19:25"><name pos:start="19:9" pos:end="19:17">show_bits</name><argument_list pos:start="19:18" pos:end="19:25">(<argument pos:start="19:19" pos:end="19:20"><expr pos:start="19:19" pos:end="19:20"><name pos:start="19:19" pos:end="19:20">gb</name></expr></argument>, <argument pos:start="19:23" pos:end="19:24"><expr pos:start="19:23" pos:end="19:24"><literal type="number" pos:start="19:23" pos:end="19:24">12</literal></expr></argument>)</argument_list></call> <operator pos:start="19:27" pos:end="19:28">==</operator> <literal type="number" pos:start="19:30" pos:end="19:34">0xfff</literal></expr>)</condition> <block pos:start="19:37" pos:end="41:5">{<block_content pos:start="21:9" pos:end="39:9">

        <if_stmt pos:start="21:9" pos:end="29:9"><if pos:start="21:9" pos:end="29:9">if <condition pos:start="21:12" pos:end="21:48">(<expr pos:start="21:13" pos:end="21:47"><call pos:start="21:13" pos:end="21:43"><name pos:start="21:13" pos:end="21:35">parse_adts_frame_header</name><argument_list pos:start="21:36" pos:end="21:43">(<argument pos:start="21:37" pos:end="21:38"><expr pos:start="21:37" pos:end="21:38"><name pos:start="21:37" pos:end="21:38">ac</name></expr></argument>, <argument pos:start="21:41" pos:end="21:42"><expr pos:start="21:41" pos:end="21:42"><name pos:start="21:41" pos:end="21:42">gb</name></expr></argument>)</argument_list></call> <operator pos:start="21:45" pos:end="21:45">&lt;</operator> <literal type="number" pos:start="21:47" pos:end="21:47">0</literal></expr>)</condition> <block pos:start="21:50" pos:end="29:9">{<block_content pos:start="23:13" pos:end="27:22">

            <expr_stmt pos:start="23:13" pos:end="23:78"><expr pos:start="23:13" pos:end="23:77"><call pos:start="23:13" pos:end="23:77"><name pos:start="23:13" pos:end="23:18">av_log</name><argument_list pos:start="23:19" pos:end="23:77">(<argument pos:start="23:20" pos:end="23:24"><expr pos:start="23:20" pos:end="23:24"><name pos:start="23:20" pos:end="23:24">avctx</name></expr></argument>, <argument pos:start="23:27" pos:end="23:38"><expr pos:start="23:27" pos:end="23:38"><name pos:start="23:27" pos:end="23:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="23:41" pos:end="23:76"><expr pos:start="23:41" pos:end="23:76"><literal type="string" pos:start="23:41" pos:end="23:76">"Error decoding AAC frame header.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="25:13" pos:end="25:21"><expr pos:start="25:13" pos:end="25:20"><name pos:start="25:13" pos:end="25:15">err</name> <operator pos:start="25:17" pos:end="25:17">=</operator> <operator pos:start="25:19" pos:end="25:19">-</operator><literal type="number" pos:start="25:20" pos:end="25:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="27:13" pos:end="27:22">goto <name pos:start="27:18" pos:end="27:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="31:9" pos:end="39:9"><if pos:start="31:9" pos:end="39:9">if <condition pos:start="31:12" pos:end="31:47">(<expr pos:start="31:13" pos:end="31:46"><name pos:start="31:13" pos:end="31:21"><name pos:start="31:13" pos:end="31:14">ac</name><operator pos:start="31:15" pos:end="31:16">-&gt;</operator><name pos:start="31:17" pos:end="31:18">oc</name><index pos:start="31:19" pos:end="31:21">[<expr pos:start="31:20" pos:end="31:20"><literal type="number" pos:start="31:20" pos:end="31:20">1</literal></expr>]</index></name><operator pos:start="31:22" pos:end="31:22">.</operator><name pos:start="31:23" pos:end="31:41"><name pos:start="31:23" pos:end="31:26">m4ac</name><operator pos:start="31:27" pos:end="31:27">.</operator><name pos:start="31:28" pos:end="31:41">sampling_index</name></name> <operator pos:start="31:43" pos:end="31:43">&gt;</operator> <literal type="number" pos:start="31:45" pos:end="31:46">12</literal></expr>)</condition> <block pos:start="31:49" pos:end="39:9">{<block_content pos:start="33:13" pos:end="37:22">

            <expr_stmt pos:start="33:13" pos:end="33:111"><expr pos:start="33:13" pos:end="33:110"><call pos:start="33:13" pos:end="33:110"><name pos:start="33:13" pos:end="33:18">av_log</name><argument_list pos:start="33:19" pos:end="33:110">(<argument pos:start="33:20" pos:end="33:28"><expr pos:start="33:20" pos:end="33:28"><name pos:start="33:20" pos:end="33:28"><name pos:start="33:20" pos:end="33:21">ac</name><operator pos:start="33:22" pos:end="33:23">-&gt;</operator><name pos:start="33:24" pos:end="33:28">avctx</name></name></expr></argument>, <argument pos:start="33:31" pos:end="33:42"><expr pos:start="33:31" pos:end="33:42"><name pos:start="33:31" pos:end="33:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="33:45" pos:end="33:78"><expr pos:start="33:45" pos:end="33:78"><literal type="string" pos:start="33:45" pos:end="33:78">"invalid sampling rate index %d\n"</literal></expr></argument>, <argument pos:start="33:81" pos:end="33:109"><expr pos:start="33:81" pos:end="33:109"><name pos:start="33:81" pos:end="33:89"><name pos:start="33:81" pos:end="33:82">ac</name><operator pos:start="33:83" pos:end="33:84">-&gt;</operator><name pos:start="33:85" pos:end="33:86">oc</name><index pos:start="33:87" pos:end="33:89">[<expr pos:start="33:88" pos:end="33:88"><literal type="number" pos:start="33:88" pos:end="33:88">1</literal></expr>]</index></name><operator pos:start="33:90" pos:end="33:90">.</operator><name pos:start="33:91" pos:end="33:109"><name pos:start="33:91" pos:end="33:94">m4ac</name><operator pos:start="33:95" pos:end="33:95">.</operator><name pos:start="33:96" pos:end="33:109">sampling_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="35:13" pos:end="35:21"><expr pos:start="35:13" pos:end="35:20"><name pos:start="35:13" pos:end="35:15">err</name> <operator pos:start="35:17" pos:end="35:17">=</operator> <operator pos:start="35:19" pos:end="35:19">-</operator><literal type="number" pos:start="35:20" pos:end="35:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="37:13" pos:end="37:22">goto <name pos:start="37:18" pos:end="37:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:24"><expr pos:start="45:5" pos:end="45:23"><name pos:start="45:5" pos:end="45:19"><name pos:start="45:5" pos:end="45:6">ac</name><operator pos:start="45:7" pos:end="45:8">-&gt;</operator><name pos:start="45:9" pos:end="45:19">tags_mapped</name></name> <operator pos:start="45:21" pos:end="45:21">=</operator> <literal type="number" pos:start="45:23" pos:end="45:23">0</literal></expr>;</expr_stmt>

    <comment type="line" pos:start="47:5" pos:end="47:12">// parse</comment>

    <while pos:start="49:5" pos:end="227:5">while <condition pos:start="49:11" pos:end="49:53">(<expr pos:start="49:12" pos:end="49:52"><operator pos:start="49:12" pos:end="49:12">(</operator><name pos:start="49:13" pos:end="49:21">elem_type</name> <operator pos:start="49:23" pos:end="49:23">=</operator> <call pos:start="49:25" pos:end="49:39"><name pos:start="49:25" pos:end="49:32">get_bits</name><argument_list pos:start="49:33" pos:end="49:39">(<argument pos:start="49:34" pos:end="49:35"><expr pos:start="49:34" pos:end="49:35"><name pos:start="49:34" pos:end="49:35">gb</name></expr></argument>, <argument pos:start="49:38" pos:end="49:38"><expr pos:start="49:38" pos:end="49:38"><literal type="number" pos:start="49:38" pos:end="49:38">3</literal></expr></argument>)</argument_list></call><operator pos:start="49:40" pos:end="49:40">)</operator> <operator pos:start="49:42" pos:end="49:43">!=</operator> <name pos:start="49:45" pos:end="49:52">TYPE_END</name></expr>)</condition> <block pos:start="49:55" pos:end="227:5">{<block_content pos:start="51:9" pos:end="225:9">

        <expr_stmt pos:start="51:9" pos:end="51:34"><expr pos:start="51:9" pos:end="51:33"><name pos:start="51:9" pos:end="51:15">elem_id</name> <operator pos:start="51:17" pos:end="51:17">=</operator> <call pos:start="51:19" pos:end="51:33"><name pos:start="51:19" pos:end="51:26">get_bits</name><argument_list pos:start="51:27" pos:end="51:33">(<argument pos:start="51:28" pos:end="51:29"><expr pos:start="51:28" pos:end="51:29"><name pos:start="51:28" pos:end="51:29">gb</name></expr></argument>, <argument pos:start="51:32" pos:end="51:32"><expr pos:start="51:32" pos:end="51:32"><literal type="number" pos:start="51:32" pos:end="51:32">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="55:9" pos:end="71:9"><if pos:start="55:9" pos:end="71:9">if <condition pos:start="55:12" pos:end="55:33">(<expr pos:start="55:13" pos:end="55:32"><name pos:start="55:13" pos:end="55:21">elem_type</name> <operator pos:start="55:23" pos:end="55:23">&lt;</operator> <name pos:start="55:25" pos:end="55:32">TYPE_DSE</name></expr>)</condition> <block pos:start="55:35" pos:end="71:9">{<block_content pos:start="57:13" pos:end="69:27">

            <if_stmt pos:start="57:13" pos:end="67:13"><if pos:start="57:13" pos:end="67:13">if <condition pos:start="57:16" pos:end="57:55">(<expr pos:start="57:17" pos:end="57:54"><operator pos:start="57:17" pos:end="57:17">!</operator><operator pos:start="57:18" pos:end="57:18">(</operator><name pos:start="57:19" pos:end="57:21">che</name><operator pos:start="57:22" pos:end="57:22">=</operator><call pos:start="57:23" pos:end="57:53"><name pos:start="57:23" pos:end="57:29">get_che</name><argument_list pos:start="57:30" pos:end="57:53">(<argument pos:start="57:31" pos:end="57:32"><expr pos:start="57:31" pos:end="57:32"><name pos:start="57:31" pos:end="57:32">ac</name></expr></argument>, <argument pos:start="57:35" pos:end="57:43"><expr pos:start="57:35" pos:end="57:43"><name pos:start="57:35" pos:end="57:43">elem_type</name></expr></argument>, <argument pos:start="57:46" pos:end="57:52"><expr pos:start="57:46" pos:end="57:52"><name pos:start="57:46" pos:end="57:52">elem_id</name></expr></argument>)</argument_list></call><operator pos:start="57:54" pos:end="57:54">)</operator></expr>)</condition> <block pos:start="57:57" pos:end="67:13">{<block_content pos:start="59:17" pos:end="65:26">

                <expr_stmt pos:start="59:17" pos:end="61:43"><expr pos:start="59:17" pos:end="61:42"><call pos:start="59:17" pos:end="61:42"><name pos:start="59:17" pos:end="59:22">av_log</name><argument_list pos:start="59:23" pos:end="61:42">(<argument pos:start="59:24" pos:end="59:32"><expr pos:start="59:24" pos:end="59:32"><name pos:start="59:24" pos:end="59:32"><name pos:start="59:24" pos:end="59:25">ac</name><operator pos:start="59:26" pos:end="59:27">-&gt;</operator><name pos:start="59:28" pos:end="59:32">avctx</name></name></expr></argument>, <argument pos:start="59:35" pos:end="59:46"><expr pos:start="59:35" pos:end="59:46"><name pos:start="59:35" pos:end="59:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="59:49" pos:end="59:90"><expr pos:start="59:49" pos:end="59:90"><literal type="string" pos:start="59:49" pos:end="59:90">"channel element %d.%d is not allocated\n"</literal></expr></argument>,

                       <argument pos:start="61:24" pos:end="61:32"><expr pos:start="61:24" pos:end="61:32"><name pos:start="61:24" pos:end="61:32">elem_type</name></expr></argument>, <argument pos:start="61:35" pos:end="61:41"><expr pos:start="61:35" pos:end="61:41"><name pos:start="61:35" pos:end="61:41">elem_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="63:17" pos:end="63:25"><expr pos:start="63:17" pos:end="63:24"><name pos:start="63:17" pos:end="63:19">err</name> <operator pos:start="63:21" pos:end="63:21">=</operator> <operator pos:start="63:23" pos:end="63:23">-</operator><literal type="number" pos:start="63:24" pos:end="63:24">1</literal></expr>;</expr_stmt>

                <goto pos:start="65:17" pos:end="65:26">goto <name pos:start="65:22" pos:end="65:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:27"><expr pos:start="69:13" pos:end="69:26"><name pos:start="69:13" pos:end="69:19">samples</name> <operator pos:start="69:21" pos:end="69:21">=</operator> <literal type="number" pos:start="69:23" pos:end="69:26">1024</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <switch pos:start="75:9" pos:end="201:9">switch <condition pos:start="75:16" pos:end="75:26">(<expr pos:start="75:17" pos:end="75:25"><name pos:start="75:17" pos:end="75:25">elem_type</name></expr>)</condition> <block pos:start="75:28" pos:end="201:9">{<block_content pos:start="79:9" pos:end="199:18">



        <case pos:start="79:9" pos:end="79:22">case <expr pos:start="79:14" pos:end="79:21"><name pos:start="79:14" pos:end="79:21">TYPE_SCE</name></expr>:</case>

            <expr_stmt pos:start="81:13" pos:end="81:56"><expr pos:start="81:13" pos:end="81:55"><name pos:start="81:13" pos:end="81:15">err</name> <operator pos:start="81:17" pos:end="81:17">=</operator> <call pos:start="81:19" pos:end="81:55"><name pos:start="81:19" pos:end="81:28">decode_ics</name><argument_list pos:start="81:29" pos:end="81:55">(<argument pos:start="81:30" pos:end="81:31"><expr pos:start="81:30" pos:end="81:31"><name pos:start="81:30" pos:end="81:31">ac</name></expr></argument>, <argument pos:start="81:34" pos:end="81:44"><expr pos:start="81:34" pos:end="81:44"><operator pos:start="81:34" pos:end="81:34">&amp;</operator><name pos:start="81:35" pos:end="81:44"><name pos:start="81:35" pos:end="81:37">che</name><operator pos:start="81:38" pos:end="81:39">-&gt;</operator><name pos:start="81:40" pos:end="81:41">ch</name><index pos:start="81:42" pos:end="81:44">[<expr pos:start="81:43" pos:end="81:43"><literal type="number" pos:start="81:43" pos:end="81:43">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="81:47" pos:end="81:48"><expr pos:start="81:47" pos:end="81:48"><name pos:start="81:47" pos:end="81:48">gb</name></expr></argument>, <argument pos:start="81:51" pos:end="81:51"><expr pos:start="81:51" pos:end="81:51"><literal type="number" pos:start="81:51" pos:end="81:51">0</literal></expr></argument>, <argument pos:start="81:54" pos:end="81:54"><expr pos:start="81:54" pos:end="81:54"><literal type="number" pos:start="81:54" pos:end="81:54">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:28"><expr pos:start="83:13" pos:end="83:27"><name pos:start="83:13" pos:end="83:23">audio_found</name> <operator pos:start="83:25" pos:end="83:25">=</operator> <literal type="number" pos:start="83:27" pos:end="83:27">1</literal></expr>;</expr_stmt>

            <break pos:start="85:13" pos:end="85:18">break;</break>



        <case pos:start="89:9" pos:end="89:22">case <expr pos:start="89:14" pos:end="89:21"><name pos:start="89:14" pos:end="89:21">TYPE_CPE</name></expr>:</case>

            <expr_stmt pos:start="91:13" pos:end="91:42"><expr pos:start="91:13" pos:end="91:41"><name pos:start="91:13" pos:end="91:15">err</name> <operator pos:start="91:17" pos:end="91:17">=</operator> <call pos:start="91:19" pos:end="91:41"><name pos:start="91:19" pos:end="91:28">decode_cpe</name><argument_list pos:start="91:29" pos:end="91:41">(<argument pos:start="91:30" pos:end="91:31"><expr pos:start="91:30" pos:end="91:31"><name pos:start="91:30" pos:end="91:31">ac</name></expr></argument>, <argument pos:start="91:34" pos:end="91:35"><expr pos:start="91:34" pos:end="91:35"><name pos:start="91:34" pos:end="91:35">gb</name></expr></argument>, <argument pos:start="91:38" pos:end="91:40"><expr pos:start="91:38" pos:end="91:40"><name pos:start="91:38" pos:end="91:40">che</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:28"><expr pos:start="93:13" pos:end="93:27"><name pos:start="93:13" pos:end="93:23">audio_found</name> <operator pos:start="93:25" pos:end="93:25">=</operator> <literal type="number" pos:start="93:27" pos:end="93:27">1</literal></expr>;</expr_stmt>

            <break pos:start="95:13" pos:end="95:18">break;</break>



        <case pos:start="99:9" pos:end="99:22">case <expr pos:start="99:14" pos:end="99:21"><name pos:start="99:14" pos:end="99:21">TYPE_CCE</name></expr>:</case>

            <expr_stmt pos:start="101:13" pos:end="101:42"><expr pos:start="101:13" pos:end="101:41"><name pos:start="101:13" pos:end="101:15">err</name> <operator pos:start="101:17" pos:end="101:17">=</operator> <call pos:start="101:19" pos:end="101:41"><name pos:start="101:19" pos:end="101:28">decode_cce</name><argument_list pos:start="101:29" pos:end="101:41">(<argument pos:start="101:30" pos:end="101:31"><expr pos:start="101:30" pos:end="101:31"><name pos:start="101:30" pos:end="101:31">ac</name></expr></argument>, <argument pos:start="101:34" pos:end="101:35"><expr pos:start="101:34" pos:end="101:35"><name pos:start="101:34" pos:end="101:35">gb</name></expr></argument>, <argument pos:start="101:38" pos:end="101:40"><expr pos:start="101:38" pos:end="101:40"><name pos:start="101:38" pos:end="101:40">che</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="103:13" pos:end="103:18">break;</break>



        <case pos:start="107:9" pos:end="107:22">case <expr pos:start="107:14" pos:end="107:21"><name pos:start="107:14" pos:end="107:21">TYPE_LFE</name></expr>:</case>

            <expr_stmt pos:start="109:13" pos:end="109:56"><expr pos:start="109:13" pos:end="109:55"><name pos:start="109:13" pos:end="109:15">err</name> <operator pos:start="109:17" pos:end="109:17">=</operator> <call pos:start="109:19" pos:end="109:55"><name pos:start="109:19" pos:end="109:28">decode_ics</name><argument_list pos:start="109:29" pos:end="109:55">(<argument pos:start="109:30" pos:end="109:31"><expr pos:start="109:30" pos:end="109:31"><name pos:start="109:30" pos:end="109:31">ac</name></expr></argument>, <argument pos:start="109:34" pos:end="109:44"><expr pos:start="109:34" pos:end="109:44"><operator pos:start="109:34" pos:end="109:34">&amp;</operator><name pos:start="109:35" pos:end="109:44"><name pos:start="109:35" pos:end="109:37">che</name><operator pos:start="109:38" pos:end="109:39">-&gt;</operator><name pos:start="109:40" pos:end="109:41">ch</name><index pos:start="109:42" pos:end="109:44">[<expr pos:start="109:43" pos:end="109:43"><literal type="number" pos:start="109:43" pos:end="109:43">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="109:47" pos:end="109:48"><expr pos:start="109:47" pos:end="109:48"><name pos:start="109:47" pos:end="109:48">gb</name></expr></argument>, <argument pos:start="109:51" pos:end="109:51"><expr pos:start="109:51" pos:end="109:51"><literal type="number" pos:start="109:51" pos:end="109:51">0</literal></expr></argument>, <argument pos:start="109:54" pos:end="109:54"><expr pos:start="109:54" pos:end="109:54"><literal type="number" pos:start="109:54" pos:end="109:54">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:28"><expr pos:start="111:13" pos:end="111:27"><name pos:start="111:13" pos:end="111:23">audio_found</name> <operator pos:start="111:25" pos:end="111:25">=</operator> <literal type="number" pos:start="111:27" pos:end="111:27">1</literal></expr>;</expr_stmt>

            <break pos:start="113:13" pos:end="113:18">break;</break>



        <case pos:start="117:9" pos:end="117:22">case <expr pos:start="117:14" pos:end="117:21"><name pos:start="117:14" pos:end="117:21">TYPE_DSE</name></expr>:</case>

            <expr_stmt pos:start="119:13" pos:end="119:51"><expr pos:start="119:13" pos:end="119:50"><name pos:start="119:13" pos:end="119:15">err</name> <operator pos:start="119:17" pos:end="119:17">=</operator> <call pos:start="119:19" pos:end="119:50"><name pos:start="119:19" pos:end="119:42">skip_data_stream_element</name><argument_list pos:start="119:43" pos:end="119:50">(<argument pos:start="119:44" pos:end="119:45"><expr pos:start="119:44" pos:end="119:45"><name pos:start="119:44" pos:end="119:45">ac</name></expr></argument>, <argument pos:start="119:48" pos:end="119:49"><expr pos:start="119:48" pos:end="119:49"><name pos:start="119:48" pos:end="119:49">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="121:13" pos:end="121:18">break;</break>



        <case pos:start="125:9" pos:end="125:22">case <expr pos:start="125:14" pos:end="125:21"><name pos:start="125:14" pos:end="125:21">TYPE_PCE</name></expr>:</case> <block pos:start="125:24" pos:end="165:9">{<block_content pos:start="127:13" pos:end="163:18">

            <decl_stmt pos:start="127:13" pos:end="127:49"><decl pos:start="127:13" pos:end="127:48"><type pos:start="127:13" pos:end="127:19"><name pos:start="127:13" pos:end="127:19">uint8_t</name></type> <name pos:start="127:21" pos:end="127:48"><name pos:start="127:21" pos:end="127:30">layout_map</name><index pos:start="127:31" pos:end="127:45">[<expr pos:start="127:32" pos:end="127:44"><name pos:start="127:32" pos:end="127:42">MAX_ELEM_ID</name><operator pos:start="127:43" pos:end="127:43">*</operator><literal type="number" pos:start="127:44" pos:end="127:44">4</literal></expr>]</index><index pos:start="127:46" pos:end="127:48">[<expr pos:start="127:47" pos:end="127:47"><literal type="number" pos:start="127:47" pos:end="127:47">3</literal></expr>]</index></name></decl>;</decl_stmt>

            <decl_stmt pos:start="129:13" pos:end="129:21"><decl pos:start="129:13" pos:end="129:20"><type pos:start="129:13" pos:end="129:15"><name pos:start="129:13" pos:end="129:15">int</name></type> <name pos:start="129:17" pos:end="129:20">tags</name></decl>;</decl_stmt>

            <expr_stmt pos:start="131:13" pos:end="131:42"><expr pos:start="131:13" pos:end="131:41"><call pos:start="131:13" pos:end="131:41"><name pos:start="131:13" pos:end="131:37">push_output_configuration</name><argument_list pos:start="131:38" pos:end="131:41">(<argument pos:start="131:39" pos:end="131:40"><expr pos:start="131:39" pos:end="131:40"><name pos:start="131:39" pos:end="131:40">ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="133:13" pos:end="133:70"><expr pos:start="133:13" pos:end="133:69"><name pos:start="133:13" pos:end="133:16">tags</name> <operator pos:start="133:18" pos:end="133:18">=</operator> <call pos:start="133:20" pos:end="133:69"><name pos:start="133:20" pos:end="133:29">decode_pce</name><argument_list pos:start="133:30" pos:end="133:69">(<argument pos:start="133:31" pos:end="133:35"><expr pos:start="133:31" pos:end="133:35"><name pos:start="133:31" pos:end="133:35">avctx</name></expr></argument>, <argument pos:start="133:38" pos:end="133:52"><expr pos:start="133:38" pos:end="133:52"><operator pos:start="133:38" pos:end="133:38">&amp;</operator><name pos:start="133:39" pos:end="133:47"><name pos:start="133:39" pos:end="133:40">ac</name><operator pos:start="133:41" pos:end="133:42">-&gt;</operator><name pos:start="133:43" pos:end="133:44">oc</name><index pos:start="133:45" pos:end="133:47">[<expr pos:start="133:46" pos:end="133:46"><literal type="number" pos:start="133:46" pos:end="133:46">1</literal></expr>]</index></name><operator pos:start="133:48" pos:end="133:48">.</operator><name pos:start="133:49" pos:end="133:52">m4ac</name></expr></argument>, <argument pos:start="133:55" pos:end="133:64"><expr pos:start="133:55" pos:end="133:64"><name pos:start="133:55" pos:end="133:64">layout_map</name></expr></argument>, <argument pos:start="133:67" pos:end="133:68"><expr pos:start="133:67" pos:end="133:68"><name pos:start="133:67" pos:end="133:68">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="135:13" pos:end="141:13"><if pos:start="135:13" pos:end="141:13">if <condition pos:start="135:16" pos:end="135:25">(<expr pos:start="135:17" pos:end="135:24"><name pos:start="135:17" pos:end="135:20">tags</name> <operator pos:start="135:22" pos:end="135:22">&lt;</operator> <literal type="number" pos:start="135:24" pos:end="135:24">0</literal></expr>)</condition> <block pos:start="135:27" pos:end="141:13">{<block_content pos:start="137:17" pos:end="139:22">

                <expr_stmt pos:start="137:17" pos:end="137:27"><expr pos:start="137:17" pos:end="137:26"><name pos:start="137:17" pos:end="137:19">err</name> <operator pos:start="137:21" pos:end="137:21">=</operator> <name pos:start="137:23" pos:end="137:26">tags</name></expr>;</expr_stmt>

                <break pos:start="139:17" pos:end="139:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="143:13" pos:end="161:13"><if pos:start="143:13" pos:end="151:13">if <condition pos:start="143:16" pos:end="143:26">(<expr pos:start="143:17" pos:end="143:25"><name pos:start="143:17" pos:end="143:25">pce_found</name></expr>)</condition> <block pos:start="143:28" pos:end="151:13">{<block_content pos:start="145:17" pos:end="149:45">

                <expr_stmt pos:start="145:17" pos:end="147:114"><expr pos:start="145:17" pos:end="147:113"><call pos:start="145:17" pos:end="147:113"><name pos:start="145:17" pos:end="145:22">av_log</name><argument_list pos:start="145:23" pos:end="147:113">(<argument pos:start="145:24" pos:end="145:28"><expr pos:start="145:24" pos:end="145:28"><name pos:start="145:24" pos:end="145:28">avctx</name></expr></argument>, <argument pos:start="145:31" pos:end="145:42"><expr pos:start="145:31" pos:end="145:42"><name pos:start="145:31" pos:end="145:42">AV_LOG_ERROR</name></expr></argument>,

                       <argument pos:start="147:24" pos:end="147:112"><expr pos:start="147:24" pos:end="147:112"><literal type="string" pos:start="147:24" pos:end="147:112">"Not evaluating a further program_config_element as this construct is dubious at best.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="149:17" pos:end="149:45"><expr pos:start="149:17" pos:end="149:44"><call pos:start="149:17" pos:end="149:44"><name pos:start="149:17" pos:end="149:40">pop_output_configuration</name><argument_list pos:start="149:41" pos:end="149:44">(<argument pos:start="149:42" pos:end="149:43"><expr pos:start="149:42" pos:end="149:43"><name pos:start="149:42" pos:end="149:43">ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="151:15" pos:end="161:13">else <block pos:start="151:20" pos:end="161:13">{<block_content pos:start="153:17" pos:end="159:30">

                <expr_stmt pos:start="153:17" pos:end="153:78"><expr pos:start="153:17" pos:end="153:77"><name pos:start="153:17" pos:end="153:19">err</name> <operator pos:start="153:21" pos:end="153:21">=</operator> <call pos:start="153:23" pos:end="153:77"><name pos:start="153:23" pos:end="153:38">output_configure</name><argument_list pos:start="153:39" pos:end="153:77">(<argument pos:start="153:40" pos:end="153:41"><expr pos:start="153:40" pos:end="153:41"><name pos:start="153:40" pos:end="153:41">ac</name></expr></argument>, <argument pos:start="153:44" pos:end="153:53"><expr pos:start="153:44" pos:end="153:53"><name pos:start="153:44" pos:end="153:53">layout_map</name></expr></argument>, <argument pos:start="153:56" pos:end="153:59"><expr pos:start="153:56" pos:end="153:59"><name pos:start="153:56" pos:end="153:59">tags</name></expr></argument>, <argument pos:start="153:62" pos:end="153:62"><expr pos:start="153:62" pos:end="153:62"><literal type="number" pos:start="153:62" pos:end="153:62">0</literal></expr></argument>, <argument pos:start="153:65" pos:end="153:76"><expr pos:start="153:65" pos:end="153:76"><name pos:start="153:65" pos:end="153:76">OC_TRIAL_PCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="155:17" pos:end="157:51"><if pos:start="155:17" pos:end="157:51">if <condition pos:start="155:20" pos:end="155:25">(<expr pos:start="155:21" pos:end="155:24"><operator pos:start="155:21" pos:end="155:21">!</operator><name pos:start="155:22" pos:end="155:24">err</name></expr>)</condition><block type="pseudo" pos:start="157:21" pos:end="157:51"><block_content pos:start="157:21" pos:end="157:51">

                    <expr_stmt pos:start="157:21" pos:end="157:51"><expr pos:start="157:21" pos:end="157:50"><name pos:start="157:21" pos:end="157:29"><name pos:start="157:21" pos:end="157:22">ac</name><operator pos:start="157:23" pos:end="157:24">-&gt;</operator><name pos:start="157:25" pos:end="157:26">oc</name><index pos:start="157:27" pos:end="157:29">[<expr pos:start="157:28" pos:end="157:28"><literal type="number" pos:start="157:28" pos:end="157:28">1</literal></expr>]</index></name><operator pos:start="157:30" pos:end="157:30">.</operator><name pos:start="157:31" pos:end="157:46"><name pos:start="157:31" pos:end="157:34">m4ac</name><operator pos:start="157:35" pos:end="157:35">.</operator><name pos:start="157:36" pos:end="157:46">chan_config</name></name> <operator pos:start="157:48" pos:end="157:48">=</operator> <literal type="number" pos:start="157:50" pos:end="157:50">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="159:17" pos:end="159:30"><expr pos:start="159:17" pos:end="159:29"><name pos:start="159:17" pos:end="159:25">pce_found</name> <operator pos:start="159:27" pos:end="159:27">=</operator> <literal type="number" pos:start="159:29" pos:end="159:29">1</literal></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="163:13" pos:end="163:18">break;</break>

        </block_content>}</block>



        <case pos:start="169:9" pos:end="169:22">case <expr pos:start="169:14" pos:end="169:21"><name pos:start="169:14" pos:end="169:21">TYPE_FIL</name></expr>:</case>

            <if_stmt pos:start="171:13" pos:end="173:47"><if pos:start="171:13" pos:end="173:47">if <condition pos:start="171:16" pos:end="171:30">(<expr pos:start="171:17" pos:end="171:29"><name pos:start="171:17" pos:end="171:23">elem_id</name> <operator pos:start="171:25" pos:end="171:26">==</operator> <literal type="number" pos:start="171:28" pos:end="171:29">15</literal></expr>)</condition><block type="pseudo" pos:start="173:17" pos:end="173:47"><block_content pos:start="173:17" pos:end="173:47">

                <expr_stmt pos:start="173:17" pos:end="173:47"><expr pos:start="173:17" pos:end="173:46"><name pos:start="173:17" pos:end="173:23">elem_id</name> <operator pos:start="173:25" pos:end="173:26">+=</operator> <call pos:start="173:28" pos:end="173:42"><name pos:start="173:28" pos:end="173:35">get_bits</name><argument_list pos:start="173:36" pos:end="173:42">(<argument pos:start="173:37" pos:end="173:38"><expr pos:start="173:37" pos:end="173:38"><name pos:start="173:37" pos:end="173:38">gb</name></expr></argument>, <argument pos:start="173:41" pos:end="173:41"><expr pos:start="173:41" pos:end="173:41"><literal type="number" pos:start="173:41" pos:end="173:41">8</literal></expr></argument>)</argument_list></call> <operator pos:start="173:44" pos:end="173:44">-</operator> <literal type="number" pos:start="173:46" pos:end="173:46">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="175:13" pos:end="183:13"><if pos:start="175:13" pos:end="183:13">if <condition pos:start="175:16" pos:end="175:48">(<expr pos:start="175:17" pos:end="175:47"><call pos:start="175:17" pos:end="175:33"><name pos:start="175:17" pos:end="175:29">get_bits_left</name><argument_list pos:start="175:30" pos:end="175:33">(<argument pos:start="175:31" pos:end="175:32"><expr pos:start="175:31" pos:end="175:32"><name pos:start="175:31" pos:end="175:32">gb</name></expr></argument>)</argument_list></call> <operator pos:start="175:35" pos:end="175:35">&lt;</operator> <literal type="number" pos:start="175:37" pos:end="175:37">8</literal> <operator pos:start="175:39" pos:end="175:39">*</operator> <name pos:start="175:41" pos:end="175:47">elem_id</name></expr>)</condition> <block pos:start="175:50" pos:end="183:13">{<block_content pos:start="177:21" pos:end="181:30">

                    <expr_stmt pos:start="177:21" pos:end="177:62"><expr pos:start="177:21" pos:end="177:61"><call pos:start="177:21" pos:end="177:61"><name pos:start="177:21" pos:end="177:26">av_log</name><argument_list pos:start="177:27" pos:end="177:61">(<argument pos:start="177:28" pos:end="177:32"><expr pos:start="177:28" pos:end="177:32"><name pos:start="177:28" pos:end="177:32">avctx</name></expr></argument>, <argument pos:start="177:35" pos:end="177:46"><expr pos:start="177:35" pos:end="177:46"><name pos:start="177:35" pos:end="177:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="177:49" pos:end="177:60"><expr pos:start="177:49" pos:end="177:60"><name pos:start="177:49" pos:end="177:60">overread_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="179:21" pos:end="179:29"><expr pos:start="179:21" pos:end="179:28"><name pos:start="179:21" pos:end="179:23">err</name> <operator pos:start="179:25" pos:end="179:25">=</operator> <operator pos:start="179:27" pos:end="179:27">-</operator><literal type="number" pos:start="179:28" pos:end="179:28">1</literal></expr>;</expr_stmt>

                    <goto pos:start="181:21" pos:end="181:30">goto <name pos:start="181:26" pos:end="181:29">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <while pos:start="185:13" pos:end="187:95">while <condition pos:start="185:19" pos:end="185:31">(<expr pos:start="185:20" pos:end="185:30"><name pos:start="185:20" pos:end="185:26">elem_id</name> <operator pos:start="185:28" pos:end="185:28">&gt;</operator> <literal type="number" pos:start="185:30" pos:end="185:30">0</literal></expr>)</condition><block type="pseudo" pos:start="187:17" pos:end="187:95"><block_content pos:start="187:17" pos:end="187:95">

                <expr_stmt pos:start="187:17" pos:end="187:95"><expr pos:start="187:17" pos:end="187:94"><name pos:start="187:17" pos:end="187:23">elem_id</name> <operator pos:start="187:25" pos:end="187:26">-=</operator> <call pos:start="187:28" pos:end="187:94"><name pos:start="187:28" pos:end="187:51">decode_extension_payload</name><argument_list pos:start="187:52" pos:end="187:94">(<argument pos:start="187:53" pos:end="187:54"><expr pos:start="187:53" pos:end="187:54"><name pos:start="187:53" pos:end="187:54">ac</name></expr></argument>, <argument pos:start="187:57" pos:end="187:58"><expr pos:start="187:57" pos:end="187:58"><name pos:start="187:57" pos:end="187:58">gb</name></expr></argument>, <argument pos:start="187:61" pos:end="187:67"><expr pos:start="187:61" pos:end="187:67"><name pos:start="187:61" pos:end="187:67">elem_id</name></expr></argument>, <argument pos:start="187:70" pos:end="187:77"><expr pos:start="187:70" pos:end="187:77"><name pos:start="187:70" pos:end="187:77">che_prev</name></expr></argument>, <argument pos:start="187:80" pos:end="187:93"><expr pos:start="187:80" pos:end="187:93"><name pos:start="187:80" pos:end="187:93">elem_type_prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

            <expr_stmt pos:start="189:13" pos:end="189:20"><expr pos:start="189:13" pos:end="189:19"><name pos:start="189:13" pos:end="189:15">err</name> <operator pos:start="189:17" pos:end="189:17">=</operator> <literal type="number" pos:start="189:19" pos:end="189:19">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="189:22" pos:end="189:32">/* FIXME */</comment>

            <break pos:start="191:13" pos:end="191:18">break;</break>



        <default pos:start="195:9" pos:end="195:16">default:</default>

            <expr_stmt pos:start="197:13" pos:end="197:21"><expr pos:start="197:13" pos:end="197:20"><name pos:start="197:13" pos:end="197:15">err</name> <operator pos:start="197:17" pos:end="197:17">=</operator> <operator pos:start="197:19" pos:end="197:19">-</operator><literal type="number" pos:start="197:20" pos:end="197:20">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="197:23" pos:end="197:71">/* should not happen, but keeps compiler happy */</comment>

            <break pos:start="199:13" pos:end="199:18">break;</break>

        </block_content>}</block></switch>



        <expr_stmt pos:start="205:9" pos:end="205:29"><expr pos:start="205:9" pos:end="205:28"><name pos:start="205:9" pos:end="205:16">che_prev</name>       <operator pos:start="205:24" pos:end="205:24">=</operator> <name pos:start="205:26" pos:end="205:28">che</name></expr>;</expr_stmt>

        <expr_stmt pos:start="207:9" pos:end="207:35"><expr pos:start="207:9" pos:end="207:34"><name pos:start="207:9" pos:end="207:22">elem_type_prev</name> <operator pos:start="207:24" pos:end="207:24">=</operator> <name pos:start="207:26" pos:end="207:34">elem_type</name></expr>;</expr_stmt>



        <if_stmt pos:start="211:9" pos:end="213:22"><if pos:start="211:9" pos:end="213:22">if <condition pos:start="211:12" pos:end="211:16">(<expr pos:start="211:13" pos:end="211:15"><name pos:start="211:13" pos:end="211:15">err</name></expr>)</condition><block type="pseudo" pos:start="213:13" pos:end="213:22"><block_content pos:start="213:13" pos:end="213:22">

            <goto pos:start="213:13" pos:end="213:22">goto <name pos:start="213:18" pos:end="213:21">fail</name>;</goto></block_content></block></if></if_stmt>



        <if_stmt pos:start="217:9" pos:end="225:9"><if pos:start="217:9" pos:end="225:9">if <condition pos:start="217:12" pos:end="217:34">(<expr pos:start="217:13" pos:end="217:33"><call pos:start="217:13" pos:end="217:29"><name pos:start="217:13" pos:end="217:25">get_bits_left</name><argument_list pos:start="217:26" pos:end="217:29">(<argument pos:start="217:27" pos:end="217:28"><expr pos:start="217:27" pos:end="217:28"><name pos:start="217:27" pos:end="217:28">gb</name></expr></argument>)</argument_list></call> <operator pos:start="217:31" pos:end="217:31">&lt;</operator> <literal type="number" pos:start="217:33" pos:end="217:33">3</literal></expr>)</condition> <block pos:start="217:36" pos:end="225:9">{<block_content pos:start="219:13" pos:end="223:22">

            <expr_stmt pos:start="219:13" pos:end="219:54"><expr pos:start="219:13" pos:end="219:53"><call pos:start="219:13" pos:end="219:53"><name pos:start="219:13" pos:end="219:18">av_log</name><argument_list pos:start="219:19" pos:end="219:53">(<argument pos:start="219:20" pos:end="219:24"><expr pos:start="219:20" pos:end="219:24"><name pos:start="219:20" pos:end="219:24">avctx</name></expr></argument>, <argument pos:start="219:27" pos:end="219:38"><expr pos:start="219:27" pos:end="219:38"><name pos:start="219:27" pos:end="219:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="219:41" pos:end="219:52"><expr pos:start="219:41" pos:end="219:52"><name pos:start="219:41" pos:end="219:52">overread_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="221:13" pos:end="221:21"><expr pos:start="221:13" pos:end="221:20"><name pos:start="221:13" pos:end="221:15">err</name> <operator pos:start="221:17" pos:end="221:17">=</operator> <operator pos:start="221:19" pos:end="221:19">-</operator><literal type="number" pos:start="221:20" pos:end="221:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="223:13" pos:end="223:22">goto <name pos:start="223:18" pos:end="223:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="231:5" pos:end="231:27"><expr pos:start="231:5" pos:end="231:26"><call pos:start="231:5" pos:end="231:26"><name pos:start="231:5" pos:end="231:22">spectral_to_sample</name><argument_list pos:start="231:23" pos:end="231:26">(<argument pos:start="231:24" pos:end="231:25"><expr pos:start="231:24" pos:end="231:25"><name pos:start="231:24" pos:end="231:25">ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="235:5" pos:end="235:109"><expr pos:start="235:5" pos:end="235:108"><name pos:start="235:5" pos:end="235:14">multiplier</name> <operator pos:start="235:16" pos:end="235:16">=</operator> <ternary pos:start="235:18" pos:end="235:108"><condition pos:start="235:18" pos:end="235:44"><expr pos:start="235:18" pos:end="235:42"><operator pos:start="235:18" pos:end="235:18">(</operator><name pos:start="235:19" pos:end="235:27"><name pos:start="235:19" pos:end="235:20">ac</name><operator pos:start="235:21" pos:end="235:22">-&gt;</operator><name pos:start="235:23" pos:end="235:24">oc</name><index pos:start="235:25" pos:end="235:27">[<expr pos:start="235:26" pos:end="235:26"><literal type="number" pos:start="235:26" pos:end="235:26">1</literal></expr>]</index></name><operator pos:start="235:28" pos:end="235:28">.</operator><name pos:start="235:29" pos:end="235:36"><name pos:start="235:29" pos:end="235:32">m4ac</name><operator pos:start="235:33" pos:end="235:33">.</operator><name pos:start="235:34" pos:end="235:36">sbr</name></name> <operator pos:start="235:38" pos:end="235:39">==</operator> <literal type="number" pos:start="235:41" pos:end="235:41">1</literal><operator pos:start="235:42" pos:end="235:42">)</operator></expr> ?</condition><then pos:start="235:46" pos:end="235:104"> <expr pos:start="235:46" pos:end="235:104"><name pos:start="235:46" pos:end="235:54"><name pos:start="235:46" pos:end="235:47">ac</name><operator pos:start="235:48" pos:end="235:49">-&gt;</operator><name pos:start="235:50" pos:end="235:51">oc</name><index pos:start="235:52" pos:end="235:54">[<expr pos:start="235:53" pos:end="235:53"><literal type="number" pos:start="235:53" pos:end="235:53">1</literal></expr>]</index></name><operator pos:start="235:55" pos:end="235:55">.</operator><name pos:start="235:56" pos:end="235:75"><name pos:start="235:56" pos:end="235:59">m4ac</name><operator pos:start="235:60" pos:end="235:60">.</operator><name pos:start="235:61" pos:end="235:75">ext_sample_rate</name></name> <operator pos:start="235:77" pos:end="235:77">&gt;</operator> <name pos:start="235:79" pos:end="235:87"><name pos:start="235:79" pos:end="235:80">ac</name><operator pos:start="235:81" pos:end="235:82">-&gt;</operator><name pos:start="235:83" pos:end="235:84">oc</name><index pos:start="235:85" pos:end="235:87">[<expr pos:start="235:86" pos:end="235:86"><literal type="number" pos:start="235:86" pos:end="235:86">1</literal></expr>]</index></name><operator pos:start="235:88" pos:end="235:88">.</operator><name pos:start="235:89" pos:end="235:104"><name pos:start="235:89" pos:end="235:92">m4ac</name><operator pos:start="235:93" pos:end="235:93">.</operator><name pos:start="235:94" pos:end="235:104">sample_rate</name></name></expr> </then><else pos:start="235:106" pos:end="235:108">: <expr pos:start="235:108" pos:end="235:108"><literal type="number" pos:start="235:108" pos:end="235:108">0</literal></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt pos:start="237:5" pos:end="237:27"><expr pos:start="237:5" pos:end="237:26"><name pos:start="237:5" pos:end="237:11">samples</name> <operator pos:start="237:13" pos:end="237:15">&lt;&lt;=</operator> <name pos:start="237:17" pos:end="237:26">multiplier</name></expr>;</expr_stmt>



    <if_stmt pos:start="241:5" pos:end="279:5"><if pos:start="241:5" pos:end="279:5">if <condition pos:start="241:8" pos:end="241:16">(<expr pos:start="241:9" pos:end="241:15"><name pos:start="241:9" pos:end="241:15">samples</name></expr>)</condition> <block pos:start="241:18" pos:end="279:5">{<block_content pos:start="245:9" pos:end="277:37">

        <comment type="block" pos:start="243:9" pos:end="243:31">/* get output buffer */</comment>

        <expr_stmt pos:start="245:9" pos:end="245:39"><expr pos:start="245:9" pos:end="245:38"><name pos:start="245:9" pos:end="245:28"><name pos:start="245:9" pos:end="245:10">ac</name><operator pos:start="245:11" pos:end="245:12">-&gt;</operator><name pos:start="245:13" pos:end="245:17">frame</name><operator pos:start="245:18" pos:end="245:18">.</operator><name pos:start="245:19" pos:end="245:28">nb_samples</name></name> <operator pos:start="245:30" pos:end="245:30">=</operator> <name pos:start="245:32" pos:end="245:38">samples</name></expr>;</expr_stmt>

        <if_stmt pos:start="247:9" pos:end="255:9"><if pos:start="247:9" pos:end="255:9">if <condition pos:start="247:12" pos:end="247:61">(<expr pos:start="247:13" pos:end="247:60"><operator pos:start="247:13" pos:end="247:13">(</operator><name pos:start="247:14" pos:end="247:16">err</name> <operator pos:start="247:18" pos:end="247:18">=</operator> <call pos:start="247:20" pos:end="247:55"><name pos:start="247:20" pos:end="247:36"><name pos:start="247:20" pos:end="247:24">avctx</name><operator pos:start="247:25" pos:end="247:26">-&gt;</operator><name pos:start="247:27" pos:end="247:36">get_buffer</name></name><argument_list pos:start="247:37" pos:end="247:55">(<argument pos:start="247:38" pos:end="247:42"><expr pos:start="247:38" pos:end="247:42"><name pos:start="247:38" pos:end="247:42">avctx</name></expr></argument>, <argument pos:start="247:45" pos:end="247:54"><expr pos:start="247:45" pos:end="247:54"><operator pos:start="247:45" pos:end="247:45">&amp;</operator><name pos:start="247:46" pos:end="247:54"><name pos:start="247:46" pos:end="247:47">ac</name><operator pos:start="247:48" pos:end="247:49">-&gt;</operator><name pos:start="247:50" pos:end="247:54">frame</name></name></expr></argument>)</argument_list></call><operator pos:start="247:56" pos:end="247:56">)</operator> <operator pos:start="247:58" pos:end="247:58">&lt;</operator> <literal type="number" pos:start="247:60" pos:end="247:60">0</literal></expr>)</condition> <block pos:start="247:63" pos:end="255:9">{<block_content pos:start="249:13" pos:end="253:22">

            <expr_stmt pos:start="249:13" pos:end="249:65"><expr pos:start="249:13" pos:end="249:64"><call pos:start="249:13" pos:end="249:64"><name pos:start="249:13" pos:end="249:18">av_log</name><argument_list pos:start="249:19" pos:end="249:64">(<argument pos:start="249:20" pos:end="249:24"><expr pos:start="249:20" pos:end="249:24"><name pos:start="249:20" pos:end="249:24">avctx</name></expr></argument>, <argument pos:start="249:27" pos:end="249:38"><expr pos:start="249:27" pos:end="249:38"><name pos:start="249:27" pos:end="249:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="249:41" pos:end="249:63"><expr pos:start="249:41" pos:end="249:63"><literal type="string" pos:start="249:41" pos:end="249:63">"get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="251:13" pos:end="251:21"><expr pos:start="251:13" pos:end="251:20"><name pos:start="251:13" pos:end="251:15">err</name> <operator pos:start="251:17" pos:end="251:17">=</operator> <operator pos:start="251:19" pos:end="251:19">-</operator><literal type="number" pos:start="251:20" pos:end="251:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="253:13" pos:end="253:22">goto <name pos:start="253:18" pos:end="253:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="259:9" pos:end="273:77"><if pos:start="259:9" pos:end="265:68">if <condition pos:start="259:12" pos:end="259:51">(<expr pos:start="259:13" pos:end="259:50"><name pos:start="259:13" pos:end="259:29"><name pos:start="259:13" pos:end="259:17">avctx</name><operator pos:start="259:18" pos:end="259:19">-&gt;</operator><name pos:start="259:20" pos:end="259:29">sample_fmt</name></name> <operator pos:start="259:31" pos:end="259:32">==</operator> <name pos:start="259:34" pos:end="259:50">AV_SAMPLE_FMT_FLT</name></expr>)</condition><block type="pseudo" pos:start="261:13" pos:end="265:68"><block_content pos:start="261:13" pos:end="265:68">

            <expr_stmt pos:start="261:13" pos:end="265:68"><expr pos:start="261:13" pos:end="265:67"><call pos:start="261:13" pos:end="265:67"><name pos:start="261:13" pos:end="261:41"><name pos:start="261:13" pos:end="261:14">ac</name><operator pos:start="261:15" pos:end="261:16">-&gt;</operator><name pos:start="261:17" pos:end="261:24">fmt_conv</name><operator pos:start="261:25" pos:end="261:25">.</operator><name pos:start="261:26" pos:end="261:41">float_interleave</name></name><argument_list pos:start="261:42" pos:end="265:67">(<argument pos:start="261:43" pos:end="261:68"><expr pos:start="261:43" pos:end="261:68"><operator pos:start="261:43" pos:end="261:43">(</operator><name pos:start="261:44" pos:end="261:48">float</name> <operator pos:start="261:50" pos:end="261:50">*</operator><operator pos:start="261:51" pos:end="261:51">)</operator><name pos:start="261:52" pos:end="261:68"><name pos:start="261:52" pos:end="261:53">ac</name><operator pos:start="261:54" pos:end="261:55">-&gt;</operator><name pos:start="261:56" pos:end="261:60">frame</name><operator pos:start="261:61" pos:end="261:61">.</operator><name pos:start="261:62" pos:end="261:65">data</name><index pos:start="261:66" pos:end="261:68">[<expr pos:start="261:67" pos:end="261:67"><literal type="number" pos:start="261:67" pos:end="261:67">0</literal></expr>]</index></name></expr></argument>,

                                          <argument pos:start="263:43" pos:end="263:73"><expr pos:start="263:43" pos:end="263:73"><operator pos:start="263:43" pos:end="263:43">(</operator><specifier pos:start="263:44" pos:end="263:48">const</specifier> <name pos:start="263:50" pos:end="263:54">float</name> <operator pos:start="263:56" pos:end="263:56">*</operator><operator pos:start="263:57" pos:end="263:57">*</operator><operator pos:start="263:58" pos:end="263:58">)</operator><name pos:start="263:59" pos:end="263:73"><name pos:start="263:59" pos:end="263:60">ac</name><operator pos:start="263:61" pos:end="263:62">-&gt;</operator><name pos:start="263:63" pos:end="263:73">output_data</name></name></expr></argument>,

                                          <argument pos:start="265:43" pos:end="265:49"><expr pos:start="265:43" pos:end="265:49"><name pos:start="265:43" pos:end="265:49">samples</name></expr></argument>, <argument pos:start="265:52" pos:end="265:66"><expr pos:start="265:52" pos:end="265:66"><name pos:start="265:52" pos:end="265:66"><name pos:start="265:52" pos:end="265:56">avctx</name><operator pos:start="265:57" pos:end="265:58">-&gt;</operator><name pos:start="265:59" pos:end="265:66">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="267:9" pos:end="273:77">else<block type="pseudo" pos:start="269:13" pos:end="273:77"><block_content pos:start="269:13" pos:end="273:77">

            <expr_stmt pos:start="269:13" pos:end="273:77"><expr pos:start="269:13" pos:end="273:76"><call pos:start="269:13" pos:end="273:76"><name pos:start="269:13" pos:end="269:50"><name pos:start="269:13" pos:end="269:14">ac</name><operator pos:start="269:15" pos:end="269:16">-&gt;</operator><name pos:start="269:17" pos:end="269:24">fmt_conv</name><operator pos:start="269:25" pos:end="269:25">.</operator><name pos:start="269:26" pos:end="269:50">float_to_int16_interleave</name></name><argument_list pos:start="269:51" pos:end="273:76">(<argument pos:start="269:52" pos:end="269:79"><expr pos:start="269:52" pos:end="269:79"><operator pos:start="269:52" pos:end="269:52">(</operator><name pos:start="269:53" pos:end="269:59">int16_t</name> <operator pos:start="269:61" pos:end="269:61">*</operator><operator pos:start="269:62" pos:end="269:62">)</operator><name pos:start="269:63" pos:end="269:79"><name pos:start="269:63" pos:end="269:64">ac</name><operator pos:start="269:65" pos:end="269:66">-&gt;</operator><name pos:start="269:67" pos:end="269:71">frame</name><operator pos:start="269:72" pos:end="269:72">.</operator><name pos:start="269:73" pos:end="269:76">data</name><index pos:start="269:77" pos:end="269:79">[<expr pos:start="269:78" pos:end="269:78"><literal type="number" pos:start="269:78" pos:end="269:78">0</literal></expr>]</index></name></expr></argument>,

                                                   <argument pos:start="271:52" pos:end="271:82"><expr pos:start="271:52" pos:end="271:82"><operator pos:start="271:52" pos:end="271:52">(</operator><specifier pos:start="271:53" pos:end="271:57">const</specifier> <name pos:start="271:59" pos:end="271:63">float</name> <operator pos:start="271:65" pos:end="271:65">*</operator><operator pos:start="271:66" pos:end="271:66">*</operator><operator pos:start="271:67" pos:end="271:67">)</operator><name pos:start="271:68" pos:end="271:82"><name pos:start="271:68" pos:end="271:69">ac</name><operator pos:start="271:70" pos:end="271:71">-&gt;</operator><name pos:start="271:72" pos:end="271:82">output_data</name></name></expr></argument>,

                                                   <argument pos:start="273:52" pos:end="273:58"><expr pos:start="273:52" pos:end="273:58"><name pos:start="273:52" pos:end="273:58">samples</name></expr></argument>, <argument pos:start="273:61" pos:end="273:75"><expr pos:start="273:61" pos:end="273:75"><name pos:start="273:61" pos:end="273:75"><name pos:start="273:61" pos:end="273:65">avctx</name><operator pos:start="273:66" pos:end="273:67">-&gt;</operator><name pos:start="273:68" pos:end="273:75">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <expr_stmt pos:start="277:9" pos:end="277:37"><expr pos:start="277:9" pos:end="277:36"><operator pos:start="277:9" pos:end="277:9">*</operator><operator pos:start="277:10" pos:end="277:10">(</operator><name pos:start="277:11" pos:end="277:17">AVFrame</name> <operator pos:start="277:19" pos:end="277:19">*</operator><operator pos:start="277:20" pos:end="277:20">)</operator><name pos:start="277:21" pos:end="277:24">data</name> <operator pos:start="277:26" pos:end="277:26">=</operator> <name pos:start="277:28" pos:end="277:36"><name pos:start="277:28" pos:end="277:29">ac</name><operator pos:start="277:30" pos:end="277:31">-&gt;</operator><name pos:start="277:32" pos:end="277:36">frame</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="281:5" pos:end="281:31"><expr pos:start="281:5" pos:end="281:30"><operator pos:start="281:5" pos:end="281:5">*</operator><name pos:start="281:6" pos:end="281:18">got_frame_ptr</name> <operator pos:start="281:20" pos:end="281:20">=</operator> <operator pos:start="281:22" pos:end="281:22">!</operator><operator pos:start="281:23" pos:end="281:23">!</operator><name pos:start="281:24" pos:end="281:30">samples</name></expr>;</expr_stmt>



    <if_stmt pos:start="285:5" pos:end="293:5"><if pos:start="285:5" pos:end="293:5">if <condition pos:start="285:8" pos:end="285:40">(<expr pos:start="285:9" pos:end="285:39"><name pos:start="285:9" pos:end="285:17"><name pos:start="285:9" pos:end="285:10">ac</name><operator pos:start="285:11" pos:end="285:12">-&gt;</operator><name pos:start="285:13" pos:end="285:14">oc</name><index pos:start="285:15" pos:end="285:17">[<expr pos:start="285:16" pos:end="285:16"><literal type="number" pos:start="285:16" pos:end="285:16">1</literal></expr>]</index></name><operator pos:start="285:18" pos:end="285:18">.</operator><name pos:start="285:19" pos:end="285:24">status</name> <operator pos:start="285:26" pos:end="285:27">&amp;&amp;</operator> <name pos:start="285:29" pos:end="285:39">audio_found</name></expr>)</condition> <block pos:start="285:42" pos:end="293:5">{<block_content pos:start="287:9" pos:end="291:37">

        <expr_stmt pos:start="287:9" pos:end="287:70"><expr pos:start="287:9" pos:end="287:69"><name pos:start="287:9" pos:end="287:26"><name pos:start="287:9" pos:end="287:13">avctx</name><operator pos:start="287:14" pos:end="287:15">-&gt;</operator><name pos:start="287:16" pos:end="287:26">sample_rate</name></name> <operator pos:start="287:28" pos:end="287:28">=</operator> <name pos:start="287:30" pos:end="287:38"><name pos:start="287:30" pos:end="287:31">ac</name><operator pos:start="287:32" pos:end="287:33">-&gt;</operator><name pos:start="287:34" pos:end="287:35">oc</name><index pos:start="287:36" pos:end="287:38">[<expr pos:start="287:37" pos:end="287:37"><literal type="number" pos:start="287:37" pos:end="287:37">1</literal></expr>]</index></name><operator pos:start="287:39" pos:end="287:39">.</operator><name pos:start="287:40" pos:end="287:55"><name pos:start="287:40" pos:end="287:43">m4ac</name><operator pos:start="287:44" pos:end="287:44">.</operator><name pos:start="287:45" pos:end="287:55">sample_rate</name></name> <operator pos:start="287:57" pos:end="287:58">&lt;&lt;</operator> <name pos:start="287:60" pos:end="287:69">multiplier</name></expr>;</expr_stmt>

        <expr_stmt pos:start="289:9" pos:end="289:36"><expr pos:start="289:9" pos:end="289:35"><name pos:start="289:9" pos:end="289:25"><name pos:start="289:9" pos:end="289:13">avctx</name><operator pos:start="289:14" pos:end="289:15">-&gt;</operator><name pos:start="289:16" pos:end="289:25">frame_size</name></name> <operator pos:start="289:27" pos:end="289:27">=</operator> <name pos:start="289:29" pos:end="289:35">samples</name></expr>;</expr_stmt>

        <expr_stmt pos:start="291:9" pos:end="291:37"><expr pos:start="291:9" pos:end="291:36"><name pos:start="291:9" pos:end="291:17"><name pos:start="291:9" pos:end="291:10">ac</name><operator pos:start="291:11" pos:end="291:12">-&gt;</operator><name pos:start="291:13" pos:end="291:14">oc</name><index pos:start="291:15" pos:end="291:17">[<expr pos:start="291:16" pos:end="291:16"><literal type="number" pos:start="291:16" pos:end="291:16">1</literal></expr>]</index></name><operator pos:start="291:18" pos:end="291:18">.</operator><name pos:start="291:19" pos:end="291:24">status</name> <operator pos:start="291:26" pos:end="291:26">=</operator> <name pos:start="291:28" pos:end="291:36">OC_LOCKED</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="297:5" pos:end="297:13">return <expr pos:start="297:12" pos:end="297:12"><literal type="number" pos:start="297:12" pos:end="297:12">0</literal></expr>;</return>

<label pos:start="299:1" pos:end="299:5"><name pos:start="299:1" pos:end="299:4">fail</name>:</label>

    <expr_stmt pos:start="301:5" pos:end="301:33"><expr pos:start="301:5" pos:end="301:32"><call pos:start="301:5" pos:end="301:32"><name pos:start="301:5" pos:end="301:28">pop_output_configuration</name><argument_list pos:start="301:29" pos:end="301:32">(<argument pos:start="301:30" pos:end="301:31"><expr pos:start="301:30" pos:end="301:31"><name pos:start="301:30" pos:end="301:31">ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="303:5" pos:end="303:15">return <expr pos:start="303:12" pos:end="303:14"><name pos:start="303:12" pos:end="303:14">err</name></expr>;</return>

</block_content>}</block></function>
</unit>
