<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4169.c" pos:tabs="8"><function pos:start="1:1" pos:end="97:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:39">ehci_advance_periodic_state</name><parameter_list pos:start="1:40" pos:end="1:56">(<parameter pos:start="1:41" pos:end="1:55"><decl pos:start="1:41" pos:end="1:55"><type pos:start="1:41" pos:end="1:51"><name pos:start="1:41" pos:end="1:49">EHCIState</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:55">ehci</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="97:1">{<block_content pos:start="5:5" pos:end="95:5">

    <decl_stmt pos:start="5:5" pos:end="5:19"><decl pos:start="5:5" pos:end="5:18"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint32_t</name></type> <name pos:start="5:14" pos:end="5:18">entry</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:17">list</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:13"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:13">int</name></type> <name pos:start="9:15" pos:end="9:19">async</name> <init pos:start="9:21" pos:end="9:23">= <expr pos:start="9:23" pos:end="9:23"><literal type="number" pos:start="9:23" pos:end="9:23">0</literal></expr></init></decl>;</decl_stmt>



    <comment type="line" pos:start="13:5" pos:end="13:10">// 4.6</comment>



    <switch pos:start="17:5" pos:end="95:5">switch<condition pos:start="17:11" pos:end="17:39">(<expr pos:start="17:12" pos:end="17:38"><call pos:start="17:12" pos:end="17:38"><name pos:start="17:12" pos:end="17:25">ehci_get_state</name><argument_list pos:start="17:26" pos:end="17:38">(<argument pos:start="17:27" pos:end="17:30"><expr pos:start="17:27" pos:end="17:30"><name pos:start="17:27" pos:end="17:30">ehci</name></expr></argument>, <argument pos:start="17:33" pos:end="17:37"><expr pos:start="17:33" pos:end="17:37"><name pos:start="17:33" pos:end="17:37">async</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="17:41" pos:end="95:5">{<block_content pos:start="19:5" pos:end="93:18">

    <case pos:start="19:5" pos:end="19:22">case <expr pos:start="19:10" pos:end="19:21"><name pos:start="19:10" pos:end="19:21">EST_INACTIVE</name></expr>:</case>

        <if_stmt pos:start="21:9" pos:end="31:18"><if pos:start="21:9" pos:end="29:9">if <condition pos:start="21:12" pos:end="21:65">( <expr pos:start="21:14" pos:end="21:64"><operator pos:start="21:14" pos:end="21:14">!</operator><operator pos:start="21:15" pos:end="21:15">(</operator><name pos:start="21:16" pos:end="21:28"><name pos:start="21:16" pos:end="21:19">ehci</name><operator pos:start="21:20" pos:end="21:21">-&gt;</operator><name pos:start="21:22" pos:end="21:28">frindex</name></name> <operator pos:start="21:30" pos:end="21:30">&amp;</operator> <literal type="number" pos:start="21:32" pos:end="21:32">7</literal><operator pos:start="21:33" pos:end="21:33">)</operator> <operator pos:start="21:35" pos:end="21:36">&amp;&amp;</operator> <operator pos:start="21:38" pos:end="21:38">(</operator><name pos:start="21:39" pos:end="21:50"><name pos:start="21:39" pos:end="21:42">ehci</name><operator pos:start="21:43" pos:end="21:44">-&gt;</operator><name pos:start="21:45" pos:end="21:50">usbcmd</name></name> <operator pos:start="21:52" pos:end="21:52">&amp;</operator> <name pos:start="21:54" pos:end="21:63">USBCMD_PSE</name><operator pos:start="21:64" pos:end="21:64">)</operator></expr>)</condition> <block pos:start="21:67" pos:end="29:9">{<block_content pos:start="23:13" pos:end="25:52">

            <expr_stmt pos:start="23:13" pos:end="23:46"><expr pos:start="23:13" pos:end="23:45"><call pos:start="23:13" pos:end="23:45"><name pos:start="23:13" pos:end="23:27">ehci_set_usbsts</name><argument_list pos:start="23:28" pos:end="23:45">(<argument pos:start="23:29" pos:end="23:32"><expr pos:start="23:29" pos:end="23:32"><name pos:start="23:29" pos:end="23:32">ehci</name></expr></argument>, <argument pos:start="23:35" pos:end="23:44"><expr pos:start="23:35" pos:end="23:44"><name pos:start="23:35" pos:end="23:44">USBSTS_PSS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="25:13" pos:end="25:52"><expr pos:start="25:13" pos:end="25:51"><call pos:start="25:13" pos:end="25:51"><name pos:start="25:13" pos:end="25:26">ehci_set_state</name><argument_list pos:start="25:27" pos:end="25:51">(<argument pos:start="25:28" pos:end="25:31"><expr pos:start="25:28" pos:end="25:31"><name pos:start="25:28" pos:end="25:31">ehci</name></expr></argument>, <argument pos:start="25:34" pos:end="25:38"><expr pos:start="25:34" pos:end="25:38"><name pos:start="25:34" pos:end="25:38">async</name></expr></argument>, <argument pos:start="25:41" pos:end="25:50"><expr pos:start="25:41" pos:end="25:50"><name pos:start="25:41" pos:end="25:50">EST_ACTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:start="27:13" pos:end="27:47">// No break, fall through to ACTIVE</comment>

        </block_content>}</block></if> <else pos:start="29:11" pos:end="31:18">else<block type="pseudo" pos:start="31:13" pos:end="31:18"><block_content pos:start="31:13" pos:end="31:18">

            <break pos:start="31:13" pos:end="31:18">break;</break></block_content></block></else></if_stmt>



    <case pos:start="35:5" pos:end="35:20">case <expr pos:start="35:10" pos:end="35:19"><name pos:start="35:10" pos:end="35:19">EST_ACTIVE</name></expr>:</case>

        <if_stmt pos:start="37:9" pos:end="45:9"><if pos:start="37:9" pos:end="45:9">if <condition pos:start="37:12" pos:end="37:66">( <expr pos:start="37:14" pos:end="37:65"><operator pos:start="37:14" pos:end="37:14">!</operator><operator pos:start="37:15" pos:end="37:15">(</operator><name pos:start="37:16" pos:end="37:28"><name pos:start="37:16" pos:end="37:19">ehci</name><operator pos:start="37:20" pos:end="37:21">-&gt;</operator><name pos:start="37:22" pos:end="37:28">frindex</name></name> <operator pos:start="37:30" pos:end="37:30">&amp;</operator> <literal type="number" pos:start="37:32" pos:end="37:32">7</literal><operator pos:start="37:33" pos:end="37:33">)</operator> <operator pos:start="37:35" pos:end="37:36">&amp;&amp;</operator> <operator pos:start="37:38" pos:end="37:38">!</operator><operator pos:start="37:39" pos:end="37:39">(</operator><name pos:start="37:40" pos:end="37:51"><name pos:start="37:40" pos:end="37:43">ehci</name><operator pos:start="37:44" pos:end="37:45">-&gt;</operator><name pos:start="37:46" pos:end="37:51">usbcmd</name></name> <operator pos:start="37:53" pos:end="37:53">&amp;</operator> <name pos:start="37:55" pos:end="37:64">USBCMD_PSE</name><operator pos:start="37:65" pos:end="37:65">)</operator></expr>)</condition> <block pos:start="37:68" pos:end="45:9">{<block_content pos:start="39:13" pos:end="43:18">

            <expr_stmt pos:start="39:13" pos:end="39:48"><expr pos:start="39:13" pos:end="39:47"><call pos:start="39:13" pos:end="39:47"><name pos:start="39:13" pos:end="39:29">ehci_clear_usbsts</name><argument_list pos:start="39:30" pos:end="39:47">(<argument pos:start="39:31" pos:end="39:34"><expr pos:start="39:31" pos:end="39:34"><name pos:start="39:31" pos:end="39:34">ehci</name></expr></argument>, <argument pos:start="39:37" pos:end="39:46"><expr pos:start="39:37" pos:end="39:46"><name pos:start="39:37" pos:end="39:46">USBSTS_PSS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:54"><expr pos:start="41:13" pos:end="41:53"><call pos:start="41:13" pos:end="41:53"><name pos:start="41:13" pos:end="41:26">ehci_set_state</name><argument_list pos:start="41:27" pos:end="41:53">(<argument pos:start="41:28" pos:end="41:31"><expr pos:start="41:28" pos:end="41:31"><name pos:start="41:28" pos:end="41:31">ehci</name></expr></argument>, <argument pos:start="41:34" pos:end="41:38"><expr pos:start="41:34" pos:end="41:38"><name pos:start="41:34" pos:end="41:38">async</name></expr></argument>, <argument pos:start="41:41" pos:end="41:52"><expr pos:start="41:41" pos:end="41:52"><name pos:start="41:41" pos:end="41:52">EST_INACTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="43:13" pos:end="43:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="49:9" pos:end="49:51"><expr pos:start="49:9" pos:end="49:50"><name pos:start="49:9" pos:end="49:12">list</name> <operator pos:start="49:14" pos:end="49:14">=</operator> <name pos:start="49:16" pos:end="49:37"><name pos:start="49:16" pos:end="49:19">ehci</name><operator pos:start="49:20" pos:end="49:21">-&gt;</operator><name pos:start="49:22" pos:end="49:37">periodiclistbase</name></name> <operator pos:start="49:39" pos:end="49:39">&amp;</operator> <literal type="number" pos:start="49:41" pos:end="49:50">0xfffff000</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="51:9" pos:end="51:46">/* check that register has been set */</comment>

        <if_stmt pos:start="53:9" pos:end="57:9"><if pos:start="53:9" pos:end="57:9">if <condition pos:start="53:12" pos:end="53:22">(<expr pos:start="53:13" pos:end="53:21"><name pos:start="53:13" pos:end="53:16">list</name> <operator pos:start="53:18" pos:end="53:19">==</operator> <literal type="number" pos:start="53:21" pos:end="53:21">0</literal></expr>)</condition> <block pos:start="53:24" pos:end="57:9">{<block_content pos:start="55:13" pos:end="55:18">

            <break pos:start="55:13" pos:end="55:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:48"><expr pos:start="59:9" pos:end="59:47"><name pos:start="59:9" pos:end="59:12">list</name> <operator pos:start="59:14" pos:end="59:15">|=</operator> <operator pos:start="59:17" pos:end="59:17">(</operator><operator pos:start="59:18" pos:end="59:18">(</operator><name pos:start="59:19" pos:end="59:31"><name pos:start="59:19" pos:end="59:22">ehci</name><operator pos:start="59:23" pos:end="59:24">-&gt;</operator><name pos:start="59:25" pos:end="59:31">frindex</name></name> <operator pos:start="59:33" pos:end="59:33">&amp;</operator> <literal type="number" pos:start="59:35" pos:end="59:40">0x1ff8</literal><operator pos:start="59:41" pos:end="59:41">)</operator> <operator pos:start="59:43" pos:end="59:44">&gt;&gt;</operator> <literal type="number" pos:start="59:46" pos:end="59:46">1</literal><operator pos:start="59:47" pos:end="59:47">)</operator></expr>;</expr_stmt>



        <expr_stmt pos:start="63:9" pos:end="63:61"><expr pos:start="63:9" pos:end="63:60"><call pos:start="63:9" pos:end="63:60"><name pos:start="63:9" pos:end="63:20">pci_dma_read</name><argument_list pos:start="63:21" pos:end="63:60">(<argument pos:start="63:22" pos:end="63:31"><expr pos:start="63:22" pos:end="63:31"><operator pos:start="63:22" pos:end="63:22">&amp;</operator><name pos:start="63:23" pos:end="63:31"><name pos:start="63:23" pos:end="63:26">ehci</name><operator pos:start="63:27" pos:end="63:28">-&gt;</operator><name pos:start="63:29" pos:end="63:31">dev</name></name></expr></argument>, <argument pos:start="63:34" pos:end="63:37"><expr pos:start="63:34" pos:end="63:37"><name pos:start="63:34" pos:end="63:37">list</name></expr></argument>, <argument pos:start="63:40" pos:end="63:45"><expr pos:start="63:40" pos:end="63:45"><operator pos:start="63:40" pos:end="63:40">&amp;</operator><name pos:start="63:41" pos:end="63:45">entry</name></expr></argument>, <argument pos:start="63:48" pos:end="63:59"><expr pos:start="63:48" pos:end="63:59"><sizeof pos:start="63:48" pos:end="63:59">sizeof <name pos:start="63:55" pos:end="63:59">entry</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:35"><expr pos:start="65:9" pos:end="65:34"><name pos:start="65:9" pos:end="65:13">entry</name> <operator pos:start="65:15" pos:end="65:15">=</operator> <call pos:start="65:17" pos:end="65:34"><name pos:start="65:17" pos:end="65:27">le32_to_cpu</name><argument_list pos:start="65:28" pos:end="65:34">(<argument pos:start="65:29" pos:end="65:33"><expr pos:start="65:29" pos:end="65:33"><name pos:start="65:29" pos:end="65:33">entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="69:9" pos:end="71:48"><expr pos:start="69:9" pos:end="71:47"><call pos:start="69:9" pos:end="71:47"><name pos:start="69:9" pos:end="69:15">DPRINTF</name><argument_list pos:start="69:16" pos:end="71:47">(<argument pos:start="69:17" pos:end="69:61"><expr pos:start="69:17" pos:end="69:61"><literal type="string" pos:start="69:17" pos:end="69:61">"PERIODIC state adv fr=%d.  [%08X] -&gt; %08X\n"</literal></expr></argument>,

                <argument pos:start="71:17" pos:end="71:33"><expr pos:start="71:17" pos:end="71:33"><name pos:start="71:17" pos:end="71:29"><name pos:start="71:17" pos:end="71:20">ehci</name><operator pos:start="71:21" pos:end="71:22">-&gt;</operator><name pos:start="71:23" pos:end="71:29">frindex</name></name> <operator pos:start="71:31" pos:end="71:31">/</operator> <literal type="number" pos:start="71:33" pos:end="71:33">8</literal></expr></argument>, <argument pos:start="71:36" pos:end="71:39"><expr pos:start="71:36" pos:end="71:39"><name pos:start="71:36" pos:end="71:39">list</name></expr></argument>, <argument pos:start="71:42" pos:end="71:46"><expr pos:start="71:42" pos:end="71:46"><name pos:start="71:42" pos:end="71:46">entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:47"><expr pos:start="73:9" pos:end="73:46"><call pos:start="73:9" pos:end="73:46"><name pos:start="73:9" pos:end="73:27">ehci_set_fetch_addr</name><argument_list pos:start="73:28" pos:end="73:46">(<argument pos:start="73:29" pos:end="73:32"><expr pos:start="73:29" pos:end="73:32"><name pos:start="73:29" pos:end="73:32">ehci</name></expr></argument>, <argument pos:start="73:35" pos:end="73:39"><expr pos:start="73:35" pos:end="73:39"><name pos:start="73:35" pos:end="73:39">async</name></expr></argument>,<argument pos:start="73:41" pos:end="73:45"><expr pos:start="73:41" pos:end="73:45"><name pos:start="73:41" pos:end="73:45">entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:52"><expr pos:start="75:9" pos:end="75:51"><call pos:start="75:9" pos:end="75:51"><name pos:start="75:9" pos:end="75:22">ehci_set_state</name><argument_list pos:start="75:23" pos:end="75:51">(<argument pos:start="75:24" pos:end="75:27"><expr pos:start="75:24" pos:end="75:27"><name pos:start="75:24" pos:end="75:27">ehci</name></expr></argument>, <argument pos:start="75:30" pos:end="75:34"><expr pos:start="75:30" pos:end="75:34"><name pos:start="75:30" pos:end="75:34">async</name></expr></argument>, <argument pos:start="75:37" pos:end="75:50"><expr pos:start="75:37" pos:end="75:50"><name pos:start="75:37" pos:end="75:50">EST_FETCHENTRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:40"><expr pos:start="77:9" pos:end="77:39"><call pos:start="77:9" pos:end="77:39"><name pos:start="77:9" pos:end="77:26">ehci_advance_state</name><argument_list pos:start="77:27" pos:end="77:39">(<argument pos:start="77:28" pos:end="77:31"><expr pos:start="77:28" pos:end="77:31"><name pos:start="77:28" pos:end="77:31">ehci</name></expr></argument>, <argument pos:start="77:34" pos:end="77:38"><expr pos:start="77:34" pos:end="77:38"><name pos:start="77:34" pos:end="77:38">async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:44"><expr pos:start="79:9" pos:end="79:43"><call pos:start="79:9" pos:end="79:43"><name pos:start="79:9" pos:end="79:30">ehci_queues_rip_unused</name><argument_list pos:start="79:31" pos:end="79:43">(<argument pos:start="79:32" pos:end="79:35"><expr pos:start="79:32" pos:end="79:35"><name pos:start="79:32" pos:end="79:35">ehci</name></expr></argument>, <argument pos:start="79:38" pos:end="79:42"><expr pos:start="79:38" pos:end="79:42"><name pos:start="79:38" pos:end="79:42">async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="81:9" pos:end="81:14">break;</break>



    <default pos:start="85:5" pos:end="85:12">default:</default>

        <comment type="block" pos:start="87:9" pos:end="87:60">/* this should only be due to a developer mistake */</comment>

        <expr_stmt pos:start="89:9" pos:end="91:55"><expr pos:start="89:9" pos:end="91:54"><call pos:start="89:9" pos:end="91:54"><name pos:start="89:9" pos:end="89:15">fprintf</name><argument_list pos:start="89:16" pos:end="91:54">(<argument pos:start="89:17" pos:end="89:22"><expr pos:start="89:17" pos:end="89:22"><name pos:start="89:17" pos:end="89:22">stderr</name></expr></argument>, <argument pos:start="89:25" pos:end="91:39"><expr pos:start="89:25" pos:end="91:39"><literal type="string" pos:start="89:25" pos:end="89:55">"ehci: Bad periodic state %d. "</literal>

                <literal type="string" pos:start="91:17" pos:end="91:39">"Resetting to active\n"</literal></expr></argument>, <argument pos:start="91:42" pos:end="91:53"><expr pos:start="91:42" pos:end="91:53"><name pos:start="91:42" pos:end="91:53"><name pos:start="91:42" pos:end="91:45">ehci</name><operator pos:start="91:46" pos:end="91:47">-&gt;</operator><name pos:start="91:48" pos:end="91:53">pstate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:18"><expr pos:start="93:9" pos:end="93:17"><call pos:start="93:9" pos:end="93:17"><name pos:start="93:9" pos:end="93:14">assert</name><argument_list pos:start="93:15" pos:end="93:17">(<argument pos:start="93:16" pos:end="93:16"><expr pos:start="93:16" pos:end="93:16"><literal type="number" pos:start="93:16" pos:end="93:16">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
