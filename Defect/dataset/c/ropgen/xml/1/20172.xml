<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20172.c" pos:tabs="8"><function pos:start="1:1" pos:end="29:13"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">decode_residuals</name><parameter_list pos:start="1:28" pos:end="1:77">(<parameter pos:start="1:29" pos:end="1:42"><decl pos:start="1:29" pos:end="1:42"><type pos:start="1:29" pos:end="1:42"><name pos:start="1:29" pos:end="1:39">FLACContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:42">s</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:60"><decl pos:start="1:45" pos:end="1:60"><type pos:start="1:45" pos:end="1:60"><name pos:start="1:45" pos:end="1:51">int32_t</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:60">decoded</name></decl></parameter>, <parameter pos:start="1:63" pos:end="1:76"><decl pos:start="1:63" pos:end="1:76"><type pos:start="1:63" pos:end="1:76"><name pos:start="1:63" pos:end="1:65">int</name></type> <name pos:start="1:67" pos:end="1:76">pred_order</name></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="29:13">{<block_content pos:start="3:5" pos:end="29:13">
    <decl_stmt pos:start="3:5" pos:end="3:51"><decl pos:start="3:5" pos:end="3:9"><type pos:start="3:5" pos:end="3:7"><name pos:start="3:5" pos:end="3:7">int</name></type> <name pos:start="3:9" pos:end="3:9">i</name></decl>, <decl pos:start="3:12" pos:end="3:14"><type ref="prev" pos:start="3:5" pos:end="3:7"/><name pos:start="3:12" pos:end="3:14">tmp</name></decl>, <decl pos:start="3:17" pos:end="3:25"><type ref="prev" pos:start="3:5" pos:end="3:7"/><name pos:start="3:17" pos:end="3:25">partition</name></decl>, <decl pos:start="3:28" pos:end="3:38"><type ref="prev" pos:start="3:5" pos:end="3:7"/><name pos:start="3:28" pos:end="3:38">method_type</name></decl>, <decl pos:start="3:41" pos:end="3:50"><type ref="prev" pos:start="3:5" pos:end="3:7"/><name pos:start="3:41" pos:end="3:50">rice_order</name></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="4:28"><decl pos:start="4:5" pos:end="4:17"><type pos:start="4:5" pos:end="4:7"><name pos:start="4:5" pos:end="4:7">int</name></type> <name pos:start="4:9" pos:end="4:17">rice_bits</name></decl>, <decl pos:start="4:20" pos:end="4:27"><type ref="prev" pos:start="4:5" pos:end="4:7"/><name pos:start="4:20" pos:end="4:27">rice_esc</name></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:15">samples</name></decl>;</decl_stmt>
    <expr_stmt pos:start="6:5" pos:end="6:38"><expr pos:start="6:5" pos:end="6:37"><name pos:start="6:5" pos:end="6:15">method_type</name> <operator pos:start="6:17" pos:end="6:17">=</operator> <call pos:start="6:19" pos:end="6:37"><name pos:start="6:19" pos:end="6:26">get_bits</name><argument_list pos:start="6:27" pos:end="6:37">(<argument pos:start="6:28" pos:end="6:33"><expr pos:start="6:28" pos:end="6:33"><operator pos:start="6:28" pos:end="6:28">&amp;</operator><name pos:start="6:29" pos:end="6:33"><name pos:start="6:29" pos:end="6:29">s</name><operator pos:start="6:30" pos:end="6:31">-&gt;</operator><name pos:start="6:32" pos:end="6:33">gb</name></name></expr></argument>, <argument pos:start="6:36" pos:end="6:36"><expr pos:start="6:36" pos:end="6:36"><literal type="number" pos:start="6:36" pos:end="6:36">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="7:5" pos:end="29:13"><if pos:start="7:5" pos:end="29:13">if <condition pos:start="7:8" pos:end="7:24">(<expr pos:start="7:9" pos:end="7:23"><name pos:start="7:9" pos:end="7:19">method_type</name> <operator pos:start="7:21" pos:end="7:21">&gt;</operator> <literal type="number" pos:start="7:23" pos:end="7:23">1</literal></expr>)</condition> <block pos:start="7:26" pos:end="29:13">{<block_content pos:start="8:9" pos:end="29:13">
        <expr_stmt pos:start="8:9" pos:end="9:28"><expr pos:start="8:9" pos:end="9:27"><call pos:start="8:9" pos:end="9:27"><name pos:start="8:9" pos:end="8:14">av_log</name><argument_list pos:start="8:15" pos:end="9:27">(<argument pos:start="8:16" pos:end="8:23"><expr pos:start="8:16" pos:end="8:23"><name pos:start="8:16" pos:end="8:23"><name pos:start="8:16" pos:end="8:16">s</name><operator pos:start="8:17" pos:end="8:18">-&gt;</operator><name pos:start="8:19" pos:end="8:23">avctx</name></name></expr></argument>, <argument pos:start="8:26" pos:end="8:37"><expr pos:start="8:26" pos:end="8:37"><name pos:start="8:26" pos:end="8:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="8:40" pos:end="8:76"><expr pos:start="8:40" pos:end="8:76"><literal type="string" pos:start="8:40" pos:end="8:76">"illegal residual coding method %d\n"</literal></expr></argument>,
               <argument pos:start="9:16" pos:end="9:26"><expr pos:start="9:16" pos:end="9:26"><name pos:start="9:16" pos:end="9:26">method_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="10:5" pos:end="10:37"><expr pos:start="10:5" pos:end="10:36"><name pos:start="10:5" pos:end="10:14">rice_order</name> <operator pos:start="10:16" pos:end="10:16">=</operator> <call pos:start="10:18" pos:end="10:36"><name pos:start="10:18" pos:end="10:25">get_bits</name><argument_list pos:start="10:26" pos:end="10:36">(<argument pos:start="10:27" pos:end="10:32"><expr pos:start="10:27" pos:end="10:32"><operator pos:start="10:27" pos:end="10:27">&amp;</operator><name pos:start="10:28" pos:end="10:32"><name pos:start="10:28" pos:end="10:28">s</name><operator pos:start="10:29" pos:end="10:30">-&gt;</operator><name pos:start="10:31" pos:end="10:32">gb</name></name></expr></argument>, <argument pos:start="10:35" pos:end="10:35"><expr pos:start="10:35" pos:end="10:35"><literal type="number" pos:start="10:35" pos:end="10:35">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="11:5" pos:end="11:40"><expr pos:start="11:5" pos:end="11:39"><name pos:start="11:5" pos:end="11:11">samples</name><operator pos:start="11:12" pos:end="11:12">=</operator> <name pos:start="11:14" pos:end="11:25"><name pos:start="11:14" pos:end="11:14">s</name><operator pos:start="11:15" pos:end="11:16">-&gt;</operator><name pos:start="11:17" pos:end="11:25">blocksize</name></name> <operator pos:start="11:27" pos:end="11:28">&gt;&gt;</operator> <name pos:start="11:30" pos:end="11:39">rice_order</name></expr>;</expr_stmt>
    <if_stmt pos:start="12:5" pos:end="29:13"><if pos:start="12:5" pos:end="29:13">if <condition pos:start="12:8" pos:end="12:29">(<expr pos:start="12:9" pos:end="12:28"><name pos:start="12:9" pos:end="12:18">pred_order</name> <operator pos:start="12:20" pos:end="12:20">&gt;</operator> <name pos:start="12:22" pos:end="12:28">samples</name></expr>)</condition> <block pos:start="12:31" pos:end="29:13">{<block_content pos:start="13:9" pos:end="29:13">
        <expr_stmt pos:start="13:9" pos:end="14:36"><expr pos:start="13:9" pos:end="14:35"><call pos:start="13:9" pos:end="14:35"><name pos:start="13:9" pos:end="13:14">av_log</name><argument_list pos:start="13:15" pos:end="14:35">(<argument pos:start="13:16" pos:end="13:23"><expr pos:start="13:16" pos:end="13:23"><name pos:start="13:16" pos:end="13:23"><name pos:start="13:16" pos:end="13:16">s</name><operator pos:start="13:17" pos:end="13:18">-&gt;</operator><name pos:start="13:19" pos:end="13:23">avctx</name></name></expr></argument>, <argument pos:start="13:26" pos:end="13:37"><expr pos:start="13:26" pos:end="13:37"><name pos:start="13:26" pos:end="13:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="13:40" pos:end="13:75"><expr pos:start="13:40" pos:end="13:75"><literal type="string" pos:start="13:40" pos:end="13:75">"invalid predictor order: %i &gt; %i\n"</literal></expr></argument>,
               <argument pos:start="14:16" pos:end="14:25"><expr pos:start="14:16" pos:end="14:25"><name pos:start="14:16" pos:end="14:25">pred_order</name></expr></argument>, <argument pos:start="14:28" pos:end="14:34"><expr pos:start="14:28" pos:end="14:34"><name pos:start="14:28" pos:end="14:34">samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="15:5" pos:end="15:32"><expr pos:start="15:5" pos:end="15:31"><name pos:start="15:5" pos:end="15:13">rice_bits</name> <operator pos:start="15:15" pos:end="15:15">=</operator> <literal type="number" pos:start="15:17" pos:end="15:19">4</literal> <operator pos:start="15:19" pos:end="15:19">+</operator> <name pos:start="15:21" pos:end="15:31">method_type</name></expr>;</expr_stmt>
    <expr_stmt pos:start="16:5" pos:end="16:37"><expr pos:start="16:5" pos:end="16:36"><name pos:start="16:5" pos:end="16:12">rice_esc</name>  <operator pos:start="16:15" pos:end="16:15">=</operator> <operator pos:start="16:17" pos:end="16:17">(</operator><literal type="number" pos:start="16:18" pos:end="16:18">1</literal> <operator pos:start="16:20" pos:end="16:21">&lt;&lt;</operator> <name pos:start="16:23" pos:end="16:31">rice_bits</name><operator pos:start="16:32" pos:end="16:32">)</operator> <operator pos:start="16:34" pos:end="16:34">-</operator> <literal type="number" pos:start="16:36" pos:end="16:36">1</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="17:5" pos:end="17:26"><expr pos:start="17:5" pos:end="17:25"><name pos:start="17:5" pos:end="17:11">decoded</name> <operator pos:start="17:13" pos:end="17:14">+=</operator> <name pos:start="17:16" pos:end="17:25">pred_order</name></expr>;</expr_stmt>
    <expr_stmt pos:start="18:5" pos:end="18:18"><expr pos:start="18:5" pos:end="18:17"><name pos:start="18:5" pos:end="18:5">i</name><operator pos:start="18:6" pos:end="18:6">=</operator> <name pos:start="18:8" pos:end="18:17">pred_order</name></expr>;</expr_stmt>
    <for pos:start="19:5" pos:end="29:13">for <control pos:start="19:9" pos:end="19:67">(<init pos:start="19:10" pos:end="19:23"><expr pos:start="19:10" pos:end="19:22"><name pos:start="19:10" pos:end="19:18">partition</name> <operator pos:start="19:20" pos:end="19:20">=</operator> <literal type="number" pos:start="19:22" pos:end="19:22">0</literal></expr>;</init> <condition pos:start="19:25" pos:end="19:54"><expr pos:start="19:25" pos:end="19:53"><name pos:start="19:25" pos:end="19:33">partition</name> <operator pos:start="19:35" pos:end="19:35">&lt;</operator> <operator pos:start="19:37" pos:end="19:37">(</operator><literal type="number" pos:start="19:38" pos:end="19:38">1</literal> <operator pos:start="19:40" pos:end="19:41">&lt;&lt;</operator> <name pos:start="19:43" pos:end="19:52">rice_order</name><operator pos:start="19:53" pos:end="19:53">)</operator></expr>;</condition> <incr pos:start="19:56" pos:end="19:66"><expr pos:start="19:56" pos:end="19:66"><name pos:start="19:56" pos:end="19:64">partition</name><operator pos:start="19:65" pos:end="19:66">++</operator></expr></incr>)</control> <block pos:start="19:69" pos:end="29:13">{<block_content pos:start="20:9" pos:end="29:13">
        <expr_stmt pos:start="20:9" pos:end="20:42"><expr pos:start="20:9" pos:end="20:41"><name pos:start="20:9" pos:end="20:11">tmp</name> <operator pos:start="20:13" pos:end="20:13">=</operator> <call pos:start="20:15" pos:end="20:41"><name pos:start="20:15" pos:end="20:22">get_bits</name><argument_list pos:start="20:23" pos:end="20:41">(<argument pos:start="20:24" pos:end="20:29"><expr pos:start="20:24" pos:end="20:29"><operator pos:start="20:24" pos:end="20:24">&amp;</operator><name pos:start="20:25" pos:end="20:29"><name pos:start="20:25" pos:end="20:25">s</name><operator pos:start="20:26" pos:end="20:27">-&gt;</operator><name pos:start="20:28" pos:end="20:29">gb</name></name></expr></argument>, <argument pos:start="20:32" pos:end="20:40"><expr pos:start="20:32" pos:end="20:40"><name pos:start="20:32" pos:end="20:40">rice_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="21:9" pos:end="29:13"><if pos:start="21:9" pos:end="25:9">if <condition pos:start="21:12" pos:end="21:28">(<expr pos:start="21:13" pos:end="21:27"><name pos:start="21:13" pos:end="21:15">tmp</name> <operator pos:start="21:17" pos:end="21:18">==</operator> <name pos:start="21:20" pos:end="21:27">rice_esc</name></expr>)</condition> <block pos:start="21:30" pos:end="25:9">{<block_content pos:start="22:13" pos:end="24:57">
            <expr_stmt pos:start="22:13" pos:end="22:38"><expr pos:start="22:13" pos:end="22:37"><name pos:start="22:13" pos:end="22:15">tmp</name> <operator pos:start="22:17" pos:end="22:17">=</operator> <call pos:start="22:19" pos:end="22:37"><name pos:start="22:19" pos:end="22:26">get_bits</name><argument_list pos:start="22:27" pos:end="22:37">(<argument pos:start="22:28" pos:end="22:33"><expr pos:start="22:28" pos:end="22:33"><operator pos:start="22:28" pos:end="22:28">&amp;</operator><name pos:start="22:29" pos:end="22:33"><name pos:start="22:29" pos:end="22:29">s</name><operator pos:start="22:30" pos:end="22:31">-&gt;</operator><name pos:start="22:32" pos:end="22:33">gb</name></name></expr></argument>, <argument pos:start="22:36" pos:end="22:36"><expr pos:start="22:36" pos:end="22:36"><literal type="number" pos:start="22:36" pos:end="22:36">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for pos:start="23:13" pos:end="24:57">for <control pos:start="23:17" pos:end="23:36">(<init pos:start="23:18" pos:end="23:18">;</init> <condition pos:start="23:20" pos:end="23:31"><expr pos:start="23:20" pos:end="23:30"><name pos:start="23:20" pos:end="23:20">i</name> <operator pos:start="23:22" pos:end="23:22">&lt;</operator> <name pos:start="23:24" pos:end="23:30">samples</name></expr>;</condition> <incr pos:start="23:33" pos:end="23:35"><expr pos:start="23:33" pos:end="23:35"><name pos:start="23:33" pos:end="23:33">i</name><operator pos:start="23:34" pos:end="23:35">++</operator></expr></incr>)</control><block type="pseudo" pos:start="24:17" pos:end="24:57"><block_content pos:start="24:17" pos:end="24:57">
                <expr_stmt pos:start="24:17" pos:end="24:57"><expr pos:start="24:17" pos:end="24:56"><operator pos:start="24:17" pos:end="24:17">*</operator><name pos:start="24:18" pos:end="24:24">decoded</name><operator pos:start="24:25" pos:end="24:26">++</operator> <operator pos:start="24:28" pos:end="24:28">=</operator> <call pos:start="24:30" pos:end="24:56"><name pos:start="24:30" pos:end="24:43">get_sbits_long</name><argument_list pos:start="24:44" pos:end="24:56">(<argument pos:start="24:45" pos:end="24:50"><expr pos:start="24:45" pos:end="24:50"><operator pos:start="24:45" pos:end="24:45">&amp;</operator><name pos:start="24:46" pos:end="24:50"><name pos:start="24:46" pos:end="24:46">s</name><operator pos:start="24:47" pos:end="24:48">-&gt;</operator><name pos:start="24:49" pos:end="24:50">gb</name></name></expr></argument>, <argument pos:start="24:53" pos:end="24:55"><expr pos:start="24:53" pos:end="24:55"><name pos:start="24:53" pos:end="24:55">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        </block_content>}</block></if> <else pos:start="25:11" pos:end="29:13">else <block pos:start="25:16" pos:end="29:13">{<block_content pos:start="26:13" pos:end="29:13">
            <for pos:start="26:13" pos:end="29:13">for <control pos:start="26:17" pos:end="26:36">(<init pos:start="26:18" pos:end="26:18">;</init> <condition pos:start="26:20" pos:end="26:31"><expr pos:start="26:20" pos:end="26:30"><name pos:start="26:20" pos:end="26:20">i</name> <operator pos:start="26:22" pos:end="26:22">&lt;</operator> <name pos:start="26:24" pos:end="26:30">samples</name></expr>;</condition> <incr pos:start="26:33" pos:end="26:35"><expr pos:start="26:33" pos:end="26:35"><name pos:start="26:33" pos:end="26:33">i</name><operator pos:start="26:34" pos:end="26:35">++</operator></expr></incr>)</control> <block pos:start="26:38" pos:end="29:13">{<block_content pos:start="27:17" pos:end="29:13">
                <expr_stmt pos:start="27:17" pos:end="27:73"><expr pos:start="27:17" pos:end="27:72"><operator pos:start="27:17" pos:end="27:17">*</operator><name pos:start="27:18" pos:end="27:24">decoded</name><operator pos:start="27:25" pos:end="27:26">++</operator> <operator pos:start="27:28" pos:end="27:28">=</operator> <call pos:start="27:30" pos:end="27:72"><name pos:start="27:30" pos:end="27:47">get_sr_golomb_flac</name><argument_list pos:start="27:48" pos:end="27:72">(<argument pos:start="27:49" pos:end="27:54"><expr pos:start="27:49" pos:end="27:54"><operator pos:start="27:49" pos:end="27:49">&amp;</operator><name pos:start="27:50" pos:end="27:54"><name pos:start="27:50" pos:end="27:50">s</name><operator pos:start="27:51" pos:end="27:52">-&gt;</operator><name pos:start="27:53" pos:end="27:54">gb</name></name></expr></argument>, <argument pos:start="27:57" pos:end="27:59"><expr pos:start="27:57" pos:end="27:59"><name pos:start="27:57" pos:end="27:59">tmp</name></expr></argument>, <argument pos:start="27:62" pos:end="27:68"><expr pos:start="27:62" pos:end="27:68"><name pos:start="27:62" pos:end="27:68">INT_MAX</name></expr></argument>, <argument pos:start="27:71" pos:end="27:71"><expr pos:start="27:71" pos:end="27:71"><literal type="number" pos:start="27:71" pos:end="27:71">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="28:9" pos:end="28:13"><expr pos:start="28:9" pos:end="28:12"><name pos:start="28:9" pos:end="28:9">i</name><operator pos:start="28:10" pos:end="28:10">=</operator> <literal type="number" pos:start="28:12" pos:end="28:12">0</literal></expr>;</expr_stmt>
    <return pos:start="29:5" pos:end="29:13">return <expr pos:start="29:12" pos:end="29:12"><literal type="number" pos:start="29:12" pos:end="29:12">0</literal></expr>;</return></block_content></block></for></block_content></block></else></if_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function></unit>
