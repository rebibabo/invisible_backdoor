<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/23982.c" pos:tabs="8"><function pos:start="1:1" pos:end="99:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">test_retry_flush</name><parameter_list pos:start="1:29" pos:end="1:49">(<parameter pos:start="1:30" pos:end="1:48"><decl pos:start="1:30" pos:end="1:48"><type pos:start="1:30" pos:end="1:41"><specifier pos:start="1:30" pos:end="1:34">const</specifier> <name pos:start="1:36" pos:end="1:39">char</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:48">machine</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="99:1">{<block_content pos:start="5:5" pos:end="97:20">

    <decl_stmt pos:start="5:5" pos:end="5:20"><decl pos:start="5:5" pos:end="5:19"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">QPCIDevice</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:19">dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:32"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">void</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:20">bmdma_base</name></decl>, <decl pos:start="7:23" pos:end="7:31"><type ref="prev" pos:start="7:5" pos:end="7:10"><modifier pos:start="7:23" pos:end="7:23">*</modifier></type><name pos:start="7:24" pos:end="7:31">ide_base</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">uint8_t</name></type> <name pos:start="9:13" pos:end="9:16">data</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:17">s</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:57"><expr pos:start="15:5" pos:end="15:56"><call pos:start="15:5" pos:end="15:56"><name pos:start="15:5" pos:end="15:27">prepare_blkdebug_script</name><argument_list pos:start="15:28" pos:end="15:56">(<argument pos:start="15:29" pos:end="15:38"><expr pos:start="15:29" pos:end="15:38"><name pos:start="15:29" pos:end="15:38">debug_path</name></expr></argument>, <argument pos:start="15:41" pos:end="15:55"><expr pos:start="15:41" pos:end="15:55"><literal type="string" pos:start="15:41" pos:end="15:55">"flush_to_disk"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="19:5" pos:end="27:30"><expr pos:start="19:5" pos:end="27:29"><call pos:start="19:5" pos:end="27:29"><name pos:start="19:5" pos:end="19:18">ide_test_start</name><argument_list pos:start="19:19" pos:end="27:29">(

        <argument pos:start="21:9" pos:end="25:33"><expr pos:start="21:9" pos:end="25:33"><literal type="string" pos:start="21:9" pos:end="21:20">"-vnc none "</literal>

        <literal type="string" pos:start="23:9" pos:end="23:71">"-drive file=blkdebug:%s:%s,if=ide,cache=writeback,format=raw,"</literal>

        <literal type="string" pos:start="25:9" pos:end="25:33">"rerror=stop,werror=stop"</literal></expr></argument>,

        <argument pos:start="27:9" pos:end="27:18"><expr pos:start="27:9" pos:end="27:18"><name pos:start="27:9" pos:end="27:18">debug_path</name></expr></argument>, <argument pos:start="27:21" pos:end="27:28"><expr pos:start="27:21" pos:end="27:28"><name pos:start="27:21" pos:end="27:28">tmp_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:49"><expr pos:start="31:5" pos:end="31:48"><name pos:start="31:5" pos:end="31:7">dev</name> <operator pos:start="31:9" pos:end="31:9">=</operator> <call pos:start="31:11" pos:end="31:48"><name pos:start="31:11" pos:end="31:24">get_pci_device</name><argument_list pos:start="31:25" pos:end="31:48">(<argument pos:start="31:26" pos:end="31:36"><expr pos:start="31:26" pos:end="31:36"><operator pos:start="31:26" pos:end="31:26">&amp;</operator><name pos:start="31:27" pos:end="31:36">bmdma_base</name></expr></argument>, <argument pos:start="31:39" pos:end="31:47"><expr pos:start="31:39" pos:end="31:47"><operator pos:start="31:39" pos:end="31:39">&amp;</operator><name pos:start="31:40" pos:end="31:47">ide_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:51"><expr pos:start="35:5" pos:end="35:50"><call pos:start="35:5" pos:end="35:50"><name pos:start="35:5" pos:end="35:26">qtest_irq_intercept_in</name><argument_list pos:start="35:27" pos:end="35:50">(<argument pos:start="35:28" pos:end="35:39"><expr pos:start="35:28" pos:end="35:39"><name pos:start="35:28" pos:end="35:39">global_qtest</name></expr></argument>, <argument pos:start="35:42" pos:end="35:49"><expr pos:start="35:42" pos:end="35:49"><literal type="string" pos:start="35:42" pos:end="35:49">"ioapic"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="39:5" pos:end="39:70">/* Dirty media so that CMD_FLUSH_CACHE will actually go to disk */</comment>

    <expr_stmt pos:start="41:5" pos:end="41:18"><expr pos:start="41:5" pos:end="41:17"><call pos:start="41:5" pos:end="41:17"><name pos:start="41:5" pos:end="41:14">make_dirty</name><argument_list pos:start="41:15" pos:end="41:17">(<argument pos:start="41:16" pos:end="41:16"><expr pos:start="41:16" pos:end="41:16"><literal type="number" pos:start="41:16" pos:end="41:16">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="45:5" pos:end="45:40">/* FLUSH CACHE command on device 0*/</comment>

    <expr_stmt pos:start="47:5" pos:end="47:50"><expr pos:start="47:5" pos:end="47:49"><call pos:start="47:5" pos:end="47:49"><name pos:start="47:5" pos:end="47:18">qpci_io_writeb</name><argument_list pos:start="47:19" pos:end="47:49">(<argument pos:start="47:20" pos:end="47:22"><expr pos:start="47:20" pos:end="47:22"><name pos:start="47:20" pos:end="47:22">dev</name></expr></argument>, <argument pos:start="47:25" pos:end="47:45"><expr pos:start="47:25" pos:end="47:45"><name pos:start="47:25" pos:end="47:32">ide_base</name> <operator pos:start="47:34" pos:end="47:34">+</operator> <name pos:start="47:36" pos:end="47:45">reg_device</name></expr></argument>, <argument pos:start="47:48" pos:end="47:48"><expr pos:start="47:48" pos:end="47:48"><literal type="number" pos:start="47:48" pos:end="47:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:65"><expr pos:start="49:5" pos:end="49:64"><call pos:start="49:5" pos:end="49:64"><name pos:start="49:5" pos:end="49:18">qpci_io_writeb</name><argument_list pos:start="49:19" pos:end="49:64">(<argument pos:start="49:20" pos:end="49:22"><expr pos:start="49:20" pos:end="49:22"><name pos:start="49:20" pos:end="49:22">dev</name></expr></argument>, <argument pos:start="49:25" pos:end="49:46"><expr pos:start="49:25" pos:end="49:46"><name pos:start="49:25" pos:end="49:32">ide_base</name> <operator pos:start="49:34" pos:end="49:34">+</operator> <name pos:start="49:36" pos:end="49:46">reg_command</name></expr></argument>, <argument pos:start="49:49" pos:end="49:63"><expr pos:start="49:49" pos:end="49:63"><name pos:start="49:49" pos:end="49:63">CMD_FLUSH_CACHE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="53:5" pos:end="53:48">/* Check status while request is in flight*/</comment>

    <expr_stmt pos:start="55:5" pos:end="55:53"><expr pos:start="55:5" pos:end="55:52"><name pos:start="55:5" pos:end="55:8">data</name> <operator pos:start="55:10" pos:end="55:10">=</operator> <call pos:start="55:12" pos:end="55:52"><name pos:start="55:12" pos:end="55:24">qpci_io_readb</name><argument_list pos:start="55:25" pos:end="55:52">(<argument pos:start="55:26" pos:end="55:28"><expr pos:start="55:26" pos:end="55:28"><name pos:start="55:26" pos:end="55:28">dev</name></expr></argument>, <argument pos:start="55:31" pos:end="55:51"><expr pos:start="55:31" pos:end="55:51"><name pos:start="55:31" pos:end="55:38">ide_base</name> <operator pos:start="55:40" pos:end="55:40">+</operator> <name pos:start="55:42" pos:end="55:51">reg_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:37"><expr pos:start="57:5" pos:end="57:36"><call pos:start="57:5" pos:end="57:36"><name pos:start="57:5" pos:end="57:18">assert_bit_set</name><argument_list pos:start="57:19" pos:end="57:36">(<argument pos:start="57:20" pos:end="57:23"><expr pos:start="57:20" pos:end="57:23"><name pos:start="57:20" pos:end="57:23">data</name></expr></argument>, <argument pos:start="57:26" pos:end="57:35"><expr pos:start="57:26" pos:end="57:35"><name pos:start="57:26" pos:end="57:28">BSY</name> <operator pos:start="57:30" pos:end="57:30">|</operator> <name pos:start="57:32" pos:end="57:35">DRDY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:43"><expr pos:start="59:5" pos:end="59:42"><call pos:start="59:5" pos:end="59:42"><name pos:start="59:5" pos:end="59:20">assert_bit_clear</name><argument_list pos:start="59:21" pos:end="59:42">(<argument pos:start="59:22" pos:end="59:25"><expr pos:start="59:22" pos:end="59:25"><name pos:start="59:22" pos:end="59:25">data</name></expr></argument>, <argument pos:start="59:28" pos:end="59:41"><expr pos:start="59:28" pos:end="59:41"><name pos:start="59:28" pos:end="59:29">DF</name> <operator pos:start="59:31" pos:end="59:31">|</operator> <name pos:start="59:33" pos:end="59:35">ERR</name> <operator pos:start="59:37" pos:end="59:37">|</operator> <name pos:start="59:39" pos:end="59:41">DRQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:26"><expr pos:start="63:5" pos:end="63:25"><call pos:start="63:5" pos:end="63:25"><name pos:start="63:5" pos:end="63:17">qmp_eventwait</name><argument_list pos:start="63:18" pos:end="63:25">(<argument pos:start="63:19" pos:end="63:24"><expr pos:start="63:19" pos:end="63:24"><literal type="string" pos:start="63:19" pos:end="63:24">"STOP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="67:5" pos:end="67:30">/* Complete the command */</comment>

    <expr_stmt pos:start="69:5" pos:end="69:30"><expr pos:start="69:5" pos:end="69:29"><name pos:start="69:5" pos:end="69:5">s</name> <operator pos:start="69:7" pos:end="69:7">=</operator> <literal type="string" pos:start="69:9" pos:end="69:29">"{'execute':'cont' }"</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:28"><expr pos:start="71:5" pos:end="71:27"><call pos:start="71:5" pos:end="71:27"><name pos:start="71:5" pos:end="71:24">qmp_discard_response</name><argument_list pos:start="71:25" pos:end="71:27">(<argument pos:start="71:26" pos:end="71:26"><expr pos:start="71:26" pos:end="71:26"><name pos:start="71:26" pos:end="71:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="75:5" pos:end="75:25">/* Check registers */</comment>

    <expr_stmt pos:start="77:5" pos:end="77:53"><expr pos:start="77:5" pos:end="77:52"><name pos:start="77:5" pos:end="77:8">data</name> <operator pos:start="77:10" pos:end="77:10">=</operator> <call pos:start="77:12" pos:end="77:52"><name pos:start="77:12" pos:end="77:24">qpci_io_readb</name><argument_list pos:start="77:25" pos:end="77:52">(<argument pos:start="77:26" pos:end="77:28"><expr pos:start="77:26" pos:end="77:28"><name pos:start="77:26" pos:end="77:28">dev</name></expr></argument>, <argument pos:start="77:31" pos:end="77:51"><expr pos:start="77:31" pos:end="77:51"><name pos:start="77:31" pos:end="77:38">ide_base</name> <operator pos:start="77:40" pos:end="77:40">+</operator> <name pos:start="77:42" pos:end="77:51">reg_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:39"><expr pos:start="79:5" pos:end="79:38"><call pos:start="79:5" pos:end="79:38"><name pos:start="79:5" pos:end="79:19">g_assert_cmpint</name><argument_list pos:start="79:20" pos:end="79:38">(<argument pos:start="79:21" pos:end="79:30"><expr pos:start="79:21" pos:end="79:30"><name pos:start="79:21" pos:end="79:24">data</name> <operator pos:start="79:26" pos:end="79:26">&amp;</operator> <name pos:start="79:28" pos:end="79:30">DEV</name></expr></argument>, <argument pos:start="79:33" pos:end="79:34"><expr pos:start="79:33" pos:end="79:34"><operator pos:start="79:33" pos:end="79:34">==</operator></expr></argument>, <argument pos:start="79:37" pos:end="79:37"><expr pos:start="79:37" pos:end="79:37"><literal type="number" pos:start="79:37" pos:end="79:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <do pos:start="83:5" pos:end="87:25">do <block pos:start="83:8" pos:end="87:5">{<block_content pos:start="85:9" pos:end="85:57">

        <expr_stmt pos:start="85:9" pos:end="85:57"><expr pos:start="85:9" pos:end="85:56"><name pos:start="85:9" pos:end="85:12">data</name> <operator pos:start="85:14" pos:end="85:14">=</operator> <call pos:start="85:16" pos:end="85:56"><name pos:start="85:16" pos:end="85:28">qpci_io_readb</name><argument_list pos:start="85:29" pos:end="85:56">(<argument pos:start="85:30" pos:end="85:32"><expr pos:start="85:30" pos:end="85:32"><name pos:start="85:30" pos:end="85:32">dev</name></expr></argument>, <argument pos:start="85:35" pos:end="85:55"><expr pos:start="85:35" pos:end="85:55"><name pos:start="85:35" pos:end="85:42">ide_base</name> <operator pos:start="85:44" pos:end="85:44">+</operator> <name pos:start="85:46" pos:end="85:55">reg_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> while <condition pos:start="87:13" pos:end="87:24">(<expr pos:start="87:14" pos:end="87:23"><name pos:start="87:14" pos:end="87:17">data</name> <operator pos:start="87:19" pos:end="87:19">&amp;</operator> <name pos:start="87:21" pos:end="87:23">BSY</name></expr>)</condition>;</do>



    <expr_stmt pos:start="91:5" pos:end="91:31"><expr pos:start="91:5" pos:end="91:30"><call pos:start="91:5" pos:end="91:30"><name pos:start="91:5" pos:end="91:18">assert_bit_set</name><argument_list pos:start="91:19" pos:end="91:30">(<argument pos:start="91:20" pos:end="91:23"><expr pos:start="91:20" pos:end="91:23"><name pos:start="91:20" pos:end="91:23">data</name></expr></argument>, <argument pos:start="91:26" pos:end="91:29"><expr pos:start="91:26" pos:end="91:29"><name pos:start="91:26" pos:end="91:29">DRDY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:49"><expr pos:start="93:5" pos:end="93:48"><call pos:start="93:5" pos:end="93:48"><name pos:start="93:5" pos:end="93:20">assert_bit_clear</name><argument_list pos:start="93:21" pos:end="93:48">(<argument pos:start="93:22" pos:end="93:25"><expr pos:start="93:22" pos:end="93:25"><name pos:start="93:22" pos:end="93:25">data</name></expr></argument>, <argument pos:start="93:28" pos:end="93:47"><expr pos:start="93:28" pos:end="93:47"><name pos:start="93:28" pos:end="93:30">BSY</name> <operator pos:start="93:32" pos:end="93:32">|</operator> <name pos:start="93:34" pos:end="93:35">DF</name> <operator pos:start="93:37" pos:end="93:37">|</operator> <name pos:start="93:39" pos:end="93:41">ERR</name> <operator pos:start="93:43" pos:end="93:43">|</operator> <name pos:start="93:45" pos:end="93:47">DRQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="97:5" pos:end="97:20"><expr pos:start="97:5" pos:end="97:19"><call pos:start="97:5" pos:end="97:19"><name pos:start="97:5" pos:end="97:17">ide_test_quit</name><argument_list pos:start="97:18" pos:end="97:19">()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
