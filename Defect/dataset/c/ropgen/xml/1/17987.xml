<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17987.c" pos:tabs="8"><function pos:start="1:1" pos:end="301:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">sun4c_hw_init</name><parameter_list pos:start="1:26" pos:end="9:77">(<parameter pos:start="1:27" pos:end="1:51"><decl pos:start="1:27" pos:end="1:51"><type pos:start="1:27" pos:end="1:51"><specifier pos:start="1:27" pos:end="1:31">const</specifier> <name pos:start="1:33" pos:end="1:44"><name pos:start="1:33" pos:end="1:38">struct</name> <name pos:start="1:40" pos:end="1:44">hwdef</name></name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:51">hwdef</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:72"><decl pos:start="1:54" pos:end="1:72"><type pos:start="1:54" pos:end="1:72"><name pos:start="1:54" pos:end="1:63">ram_addr_t</name></type> <name pos:start="1:65" pos:end="1:72">RAM_size</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:49"><decl pos:start="3:27" pos:end="3:49"><type pos:start="3:27" pos:end="3:49"><specifier pos:start="3:27" pos:end="3:31">const</specifier> <name pos:start="3:33" pos:end="3:36">char</name> <modifier pos:start="3:38" pos:end="3:38">*</modifier></type><name pos:start="3:39" pos:end="3:49">boot_device</name></decl></parameter>,

                          <parameter pos:start="5:27" pos:end="5:42"><decl pos:start="5:27" pos:end="5:42"><type pos:start="5:27" pos:end="5:42"><name pos:start="5:27" pos:end="5:38">DisplayState</name> <modifier pos:start="5:40" pos:end="5:40">*</modifier></type><name pos:start="5:41" pos:end="5:42">ds</name></decl></parameter>, <parameter pos:start="5:45" pos:end="5:71"><decl pos:start="5:45" pos:end="5:71"><type pos:start="5:45" pos:end="5:71"><specifier pos:start="5:45" pos:end="5:49">const</specifier> <name pos:start="5:51" pos:end="5:54">char</name> <modifier pos:start="5:56" pos:end="5:56">*</modifier></type><name pos:start="5:57" pos:end="5:71">kernel_filename</name></decl></parameter>,

                          <parameter pos:start="7:27" pos:end="7:52"><decl pos:start="7:27" pos:end="7:52"><type pos:start="7:27" pos:end="7:52"><specifier pos:start="7:27" pos:end="7:31">const</specifier> <name pos:start="7:33" pos:end="7:36">char</name> <modifier pos:start="7:38" pos:end="7:38">*</modifier></type><name pos:start="7:39" pos:end="7:52">kernel_cmdline</name></decl></parameter>,

                          <parameter pos:start="9:27" pos:end="9:53"><decl pos:start="9:27" pos:end="9:53"><type pos:start="9:27" pos:end="9:53"><specifier pos:start="9:27" pos:end="9:31">const</specifier> <name pos:start="9:33" pos:end="9:36">char</name> <modifier pos:start="9:38" pos:end="9:38">*</modifier></type><name pos:start="9:39" pos:end="9:53">initrd_filename</name></decl></parameter>, <parameter pos:start="9:56" pos:end="9:76"><decl pos:start="9:56" pos:end="9:76"><type pos:start="9:56" pos:end="9:76"><specifier pos:start="9:56" pos:end="9:60">const</specifier> <name pos:start="9:62" pos:end="9:65">char</name> <modifier pos:start="9:67" pos:end="9:67">*</modifier></type><name pos:start="9:68" pos:end="9:76">cpu_model</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="301:1">{<block_content pos:start="13:5" pos:end="299:65">

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">CPUState</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:17">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:12">unsigned</name> <name pos:start="15:14" pos:end="15:16">int</name></type> <name pos:start="15:18" pos:end="15:18">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:52"><decl pos:start="17:5" pos:end="17:15"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:8">void</name> <modifier pos:start="17:10" pos:end="17:10">*</modifier></type><name pos:start="17:11" pos:end="17:15">iommu</name></decl>, <decl pos:start="17:18" pos:end="17:24"><type ref="prev" pos:start="17:5" pos:end="17:10"><modifier pos:start="17:18" pos:end="17:18">*</modifier></type><name pos:start="17:19" pos:end="17:24">espdma</name></decl>, <decl pos:start="17:27" pos:end="17:32"><type ref="prev" pos:start="17:5" pos:end="17:10"><modifier pos:start="17:27" pos:end="17:27">*</modifier></type><name pos:start="17:28" pos:end="17:32">ledma</name></decl>, <decl pos:start="17:35" pos:end="17:43"><type ref="prev" pos:start="17:5" pos:end="17:10"><modifier pos:start="17:35" pos:end="17:35">*</modifier></type><name pos:start="17:36" pos:end="17:43">main_esp</name></decl>, <decl pos:start="17:46" pos:end="17:51"><type ref="prev" pos:start="17:5" pos:end="17:10"><modifier pos:start="17:46" pos:end="17:46">*</modifier></type><name pos:start="17:47" pos:end="17:51">nvram</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:61"><decl pos:start="19:5" pos:end="19:22"><type pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:12">qemu_irq</name> <modifier pos:start="19:14" pos:end="19:14">*</modifier></type><name pos:start="19:15" pos:end="19:22">cpu_irqs</name></decl>, <decl pos:start="19:25" pos:end="19:35"><type ref="prev" pos:start="19:5" pos:end="19:14"><modifier pos:start="19:25" pos:end="19:25">*</modifier></type><name pos:start="19:26" pos:end="19:35">slavio_irq</name></decl>, <decl pos:start="19:38" pos:end="19:48"><type ref="prev" pos:start="19:5" pos:end="19:14"><modifier pos:start="19:38" pos:end="19:38">*</modifier></type><name pos:start="19:39" pos:end="19:48">espdma_irq</name></decl>, <decl pos:start="19:51" pos:end="19:60"><type ref="prev" pos:start="19:5" pos:end="19:14"><modifier pos:start="19:51" pos:end="19:51">*</modifier></type><name pos:start="19:52" pos:end="19:60">ledma_irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:35"><decl pos:start="21:5" pos:end="21:23"><type pos:start="21:5" pos:end="21:14"><name pos:start="21:5" pos:end="21:12">qemu_irq</name> <modifier pos:start="21:14" pos:end="21:14">*</modifier></type><name pos:start="21:15" pos:end="21:23">esp_reset</name></decl>, <decl pos:start="21:26" pos:end="21:34"><type ref="prev" pos:start="21:5" pos:end="21:14"><modifier pos:start="21:26" pos:end="21:26">*</modifier></type><name pos:start="21:27" pos:end="21:34">le_reset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:21"><decl pos:start="23:5" pos:end="23:20"><type pos:start="23:5" pos:end="23:14"><name pos:start="23:5" pos:end="23:12">qemu_irq</name> <modifier pos:start="23:14" pos:end="23:14">*</modifier></type><name pos:start="23:15" pos:end="23:20">fdc_tc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:43"><decl pos:start="25:5" pos:end="25:29"><type pos:start="25:5" pos:end="25:17"><name pos:start="25:5" pos:end="25:12">unsigned</name> <name pos:start="25:14" pos:end="25:17">long</name></type> <name pos:start="25:19" pos:end="25:29">prom_offset</name></decl>, <decl pos:start="25:32" pos:end="25:42"><type ref="prev" pos:start="25:5" pos:end="25:17"/><name pos:start="25:32" pos:end="25:42">kernel_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:12"><decl pos:start="27:5" pos:end="27:11"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:19"><decl pos:start="29:5" pos:end="29:18"><type pos:start="29:5" pos:end="29:8"><name pos:start="29:5" pos:end="29:8">char</name></type> <name pos:start="29:10" pos:end="29:18"><name pos:start="29:10" pos:end="29:12">buf</name><index pos:start="29:13" pos:end="29:18">[<expr pos:start="29:14" pos:end="29:17"><literal type="number" pos:start="29:14" pos:end="29:17">1024</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:33"><decl pos:start="31:5" pos:end="31:32"><type pos:start="31:5" pos:end="31:22"><name pos:start="31:5" pos:end="31:20">BlockDriverState</name> <modifier pos:start="31:22" pos:end="31:22">*</modifier></type><name pos:start="31:23" pos:end="31:32"><name pos:start="31:23" pos:end="31:24">fd</name><index pos:start="31:25" pos:end="31:32">[<expr pos:start="31:26" pos:end="31:31"><name pos:start="31:26" pos:end="31:31">MAX_FD</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:20"><decl pos:start="33:5" pos:end="33:19"><type pos:start="33:5" pos:end="33:7"><name pos:start="33:5" pos:end="33:7">int</name></type> <name pos:start="33:9" pos:end="33:19">drive_index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:17"><decl pos:start="35:5" pos:end="35:16"><type pos:start="35:5" pos:end="35:10"><name pos:start="35:5" pos:end="35:8">void</name> <modifier pos:start="35:10" pos:end="35:10">*</modifier></type><name pos:start="35:11" pos:end="35:16">fw_cfg</name></decl>;</decl_stmt>



    <comment type="block" pos:start="39:5" pos:end="39:18">/* init CPU */</comment>

    <if_stmt pos:start="41:5" pos:end="43:45"><if pos:start="41:5" pos:end="43:45">if <condition pos:start="41:8" pos:end="41:19">(<expr pos:start="41:9" pos:end="41:18"><operator pos:start="41:9" pos:end="41:9">!</operator><name pos:start="41:10" pos:end="41:18">cpu_model</name></expr>)</condition><block type="pseudo" pos:start="43:9" pos:end="43:45"><block_content pos:start="43:9" pos:end="43:45">

        <expr_stmt pos:start="43:9" pos:end="43:45"><expr pos:start="43:9" pos:end="43:44"><name pos:start="43:9" pos:end="43:17">cpu_model</name> <operator pos:start="43:19" pos:end="43:19">=</operator> <name pos:start="43:21" pos:end="43:44"><name pos:start="43:21" pos:end="43:25">hwdef</name><operator pos:start="43:26" pos:end="43:27">-&gt;</operator><name pos:start="43:28" pos:end="43:44">default_cpu_model</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:30"><expr pos:start="47:5" pos:end="47:29"><name pos:start="47:5" pos:end="47:7">env</name> <operator pos:start="47:9" pos:end="47:9">=</operator> <call pos:start="47:11" pos:end="47:29"><name pos:start="47:11" pos:end="47:18">cpu_init</name><argument_list pos:start="47:19" pos:end="47:29">(<argument pos:start="47:20" pos:end="47:28"><expr pos:start="47:20" pos:end="47:28"><name pos:start="47:20" pos:end="47:28">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="55:5"><if pos:start="49:5" pos:end="55:5">if <condition pos:start="49:8" pos:end="49:13">(<expr pos:start="49:9" pos:end="49:12"><operator pos:start="49:9" pos:end="49:9">!</operator><name pos:start="49:10" pos:end="49:12">env</name></expr>)</condition> <block pos:start="49:15" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:16">

        <expr_stmt pos:start="51:9" pos:end="51:71"><expr pos:start="51:9" pos:end="51:70"><call pos:start="51:9" pos:end="51:70"><name pos:start="51:9" pos:end="51:15">fprintf</name><argument_list pos:start="51:16" pos:end="51:70">(<argument pos:start="51:17" pos:end="51:22"><expr pos:start="51:17" pos:end="51:22"><name pos:start="51:17" pos:end="51:22">stderr</name></expr></argument>, <argument pos:start="51:25" pos:end="51:69"><expr pos:start="51:25" pos:end="51:69"><literal type="string" pos:start="51:25" pos:end="51:69">"qemu: Unable to find Sparc CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:16"><expr pos:start="53:9" pos:end="53:15"><call pos:start="53:9" pos:end="53:15"><name pos:start="53:9" pos:end="53:12">exit</name><argument_list pos:start="53:13" pos:end="53:15">(<argument pos:start="53:14" pos:end="53:14"><expr pos:start="53:14" pos:end="53:14"><literal type="number" pos:start="53:14" pos:end="53:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:29"><expr pos:start="59:5" pos:end="59:28"><call pos:start="59:5" pos:end="59:28"><name pos:start="59:5" pos:end="59:20">cpu_sparc_set_id</name><argument_list pos:start="59:21" pos:end="59:28">(<argument pos:start="59:22" pos:end="59:24"><expr pos:start="59:22" pos:end="59:24"><name pos:start="59:22" pos:end="59:24">env</name></expr></argument>, <argument pos:start="59:27" pos:end="59:27"><expr pos:start="59:27" pos:end="59:27"><literal type="number" pos:start="59:27" pos:end="59:27">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:45"><expr pos:start="63:5" pos:end="63:44"><call pos:start="63:5" pos:end="63:44"><name pos:start="63:5" pos:end="63:23">qemu_register_reset</name><argument_list pos:start="63:24" pos:end="63:44">(<argument pos:start="63:25" pos:end="63:38"><expr pos:start="63:25" pos:end="63:38"><name pos:start="63:25" pos:end="63:38">main_cpu_reset</name></expr></argument>, <argument pos:start="63:41" pos:end="63:43"><expr pos:start="63:41" pos:end="63:43"><name pos:start="63:41" pos:end="63:43">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:62"><expr pos:start="65:5" pos:end="65:61"><name pos:start="65:5" pos:end="65:12">cpu_irqs</name> <operator pos:start="65:14" pos:end="65:14">=</operator> <call pos:start="65:16" pos:end="65:61"><name pos:start="65:16" pos:end="65:33">qemu_allocate_irqs</name><argument_list pos:start="65:34" pos:end="65:61">(<argument pos:start="65:35" pos:end="65:45"><expr pos:start="65:35" pos:end="65:45"><name pos:start="65:35" pos:end="65:45">cpu_set_irq</name></expr></argument>, <argument pos:start="65:48" pos:end="65:50"><expr pos:start="65:48" pos:end="65:50"><name pos:start="65:48" pos:end="65:50">env</name></expr></argument>, <argument pos:start="65:53" pos:end="65:60"><expr pos:start="65:53" pos:end="65:60"><name pos:start="65:53" pos:end="65:60">MAX_PILS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:40"><expr pos:start="67:5" pos:end="67:39"><name pos:start="67:5" pos:end="67:18"><name pos:start="67:5" pos:end="67:7">env</name><operator pos:start="67:8" pos:end="67:9">-&gt;</operator><name pos:start="67:10" pos:end="67:18">prom_addr</name></name> <operator pos:start="67:20" pos:end="67:20">=</operator> <name pos:start="67:22" pos:end="67:39"><name pos:start="67:22" pos:end="67:26">hwdef</name><operator pos:start="67:27" pos:end="67:28">-&gt;</operator><name pos:start="67:29" pos:end="67:39">slavio_base</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="71:5" pos:end="71:22">/* allocate RAM */</comment>

    <if_stmt pos:start="73:5" pos:end="85:5"><if pos:start="73:5" pos:end="85:5">if <condition pos:start="73:8" pos:end="73:44">(<expr pos:start="73:9" pos:end="73:43"><operator pos:start="73:9" pos:end="73:9">(</operator><name pos:start="73:10" pos:end="73:17">uint64_t</name><operator pos:start="73:18" pos:end="73:18">)</operator><name pos:start="73:19" pos:end="73:26">RAM_size</name> <operator pos:start="73:28" pos:end="73:28">&gt;</operator> <name pos:start="73:30" pos:end="73:43"><name pos:start="73:30" pos:end="73:34">hwdef</name><operator pos:start="73:35" pos:end="73:36">-&gt;</operator><name pos:start="73:37" pos:end="73:43">max_mem</name></name></expr>)</condition> <block pos:start="73:46" pos:end="85:5">{<block_content pos:start="75:9" pos:end="83:16">

        <expr_stmt pos:start="75:9" pos:end="81:64"><expr pos:start="75:9" pos:end="81:63"><call pos:start="75:9" pos:end="81:63"><name pos:start="75:9" pos:end="75:15">fprintf</name><argument_list pos:start="75:16" pos:end="81:63">(<argument pos:start="75:17" pos:end="75:22"><expr pos:start="75:17" pos:end="75:22"><name pos:start="75:17" pos:end="75:22">stderr</name></expr></argument>,

                <argument pos:start="77:17" pos:end="77:74"><expr pos:start="77:17" pos:end="77:74"><literal type="string" pos:start="77:17" pos:end="77:74">"qemu: Too much memory for this machine: %d, maximum %d\n"</literal></expr></argument>,

                <argument pos:start="79:17" pos:end="79:56"><expr pos:start="79:17" pos:end="79:56"><operator pos:start="79:17" pos:end="79:17">(</operator><name pos:start="79:18" pos:end="79:25">unsigned</name> <name pos:start="79:27" pos:end="79:29">int</name><operator pos:start="79:30" pos:end="79:30">)</operator><operator pos:start="79:31" pos:end="79:31">(</operator><name pos:start="79:32" pos:end="79:39">RAM_size</name> <operator pos:start="79:41" pos:end="79:41">/</operator> <operator pos:start="79:43" pos:end="79:43">(</operator><literal type="number" pos:start="79:44" pos:end="79:47">1024</literal> <operator pos:start="79:49" pos:end="79:49">*</operator> <literal type="number" pos:start="79:51" pos:end="79:54">1024</literal><operator pos:start="79:55" pos:end="79:55">)</operator><operator pos:start="79:56" pos:end="79:56">)</operator></expr></argument>,

                <argument pos:start="81:17" pos:end="81:62"><expr pos:start="81:17" pos:end="81:62"><operator pos:start="81:17" pos:end="81:17">(</operator><name pos:start="81:18" pos:end="81:25">unsigned</name> <name pos:start="81:27" pos:end="81:29">int</name><operator pos:start="81:30" pos:end="81:30">)</operator><operator pos:start="81:31" pos:end="81:31">(</operator><name pos:start="81:32" pos:end="81:45"><name pos:start="81:32" pos:end="81:36">hwdef</name><operator pos:start="81:37" pos:end="81:38">-&gt;</operator><name pos:start="81:39" pos:end="81:45">max_mem</name></name> <operator pos:start="81:47" pos:end="81:47">/</operator> <operator pos:start="81:49" pos:end="81:49">(</operator><literal type="number" pos:start="81:50" pos:end="81:53">1024</literal> <operator pos:start="81:55" pos:end="81:55">*</operator> <literal type="number" pos:start="81:57" pos:end="81:60">1024</literal><operator pos:start="81:61" pos:end="81:61">)</operator><operator pos:start="81:62" pos:end="81:62">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:16"><expr pos:start="83:9" pos:end="83:15"><call pos:start="83:9" pos:end="83:15"><name pos:start="83:9" pos:end="83:12">exit</name><argument_list pos:start="83:13" pos:end="83:15">(<argument pos:start="83:14" pos:end="83:14"><expr pos:start="83:14" pos:end="83:14"><literal type="number" pos:start="83:14" pos:end="83:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:49"><expr pos:start="87:5" pos:end="87:48"><call pos:start="87:5" pos:end="87:48"><name pos:start="87:5" pos:end="87:32">cpu_register_physical_memory</name><argument_list pos:start="87:33" pos:end="87:48">(<argument pos:start="87:34" pos:end="87:34"><expr pos:start="87:34" pos:end="87:34"><literal type="number" pos:start="87:34" pos:end="87:34">0</literal></expr></argument>, <argument pos:start="87:37" pos:end="87:44"><expr pos:start="87:37" pos:end="87:44"><name pos:start="87:37" pos:end="87:44">RAM_size</name></expr></argument>, <argument pos:start="87:47" pos:end="87:47"><expr pos:start="87:47" pos:end="87:47"><literal type="number" pos:start="87:47" pos:end="87:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="91:5" pos:end="91:24">/* load boot prom */</comment>

    <expr_stmt pos:start="93:5" pos:end="93:46"><expr pos:start="93:5" pos:end="93:45"><name pos:start="93:5" pos:end="93:15">prom_offset</name> <operator pos:start="93:17" pos:end="93:17">=</operator> <name pos:start="93:19" pos:end="93:26">RAM_size</name> <operator pos:start="93:28" pos:end="93:28">+</operator> <name pos:start="93:30" pos:end="93:45"><name pos:start="93:30" pos:end="93:34">hwdef</name><operator pos:start="93:35" pos:end="93:36">-&gt;</operator><name pos:start="93:37" pos:end="93:45">vram_size</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="101:59"><expr pos:start="95:5" pos:end="101:58"><call pos:start="95:5" pos:end="101:58"><name pos:start="95:5" pos:end="95:32">cpu_register_physical_memory</name><argument_list pos:start="95:33" pos:end="101:58">(<argument pos:start="95:34" pos:end="95:51"><expr pos:start="95:34" pos:end="95:51"><name pos:start="95:34" pos:end="95:51"><name pos:start="95:34" pos:end="95:38">hwdef</name><operator pos:start="95:39" pos:end="95:40">-&gt;</operator><name pos:start="95:41" pos:end="95:51">slavio_base</name></name></expr></argument>,

                                 <argument pos:start="97:34" pos:end="99:49"><expr pos:start="97:34" pos:end="99:49"><operator pos:start="97:34" pos:end="97:34">(</operator><name pos:start="97:35" pos:end="97:47">PROM_SIZE_MAX</name> <operator pos:start="97:49" pos:end="97:49">+</operator> <name pos:start="97:51" pos:end="97:66">TARGET_PAGE_SIZE</name> <operator pos:start="97:68" pos:end="97:68">-</operator> <literal type="number" pos:start="97:70" pos:end="97:70">1</literal><operator pos:start="97:71" pos:end="97:71">)</operator> <operator pos:start="97:73" pos:end="97:73">&amp;</operator>

                                 <name pos:start="99:34" pos:end="99:49">TARGET_PAGE_MASK</name></expr></argument>,

                                 <argument pos:start="101:34" pos:end="101:57"><expr pos:start="101:34" pos:end="101:57"><name pos:start="101:34" pos:end="101:44">prom_offset</name> <operator pos:start="101:46" pos:end="101:46">|</operator> <name pos:start="101:48" pos:end="101:57">IO_MEM_ROM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="105:5" pos:end="107:34"><if pos:start="105:5" pos:end="107:34">if <condition pos:start="105:8" pos:end="105:26">(<expr pos:start="105:9" pos:end="105:25"><name pos:start="105:9" pos:end="105:17">bios_name</name> <operator pos:start="105:19" pos:end="105:20">==</operator> <name pos:start="105:22" pos:end="105:25">NULL</name></expr>)</condition><block type="pseudo" pos:start="107:9" pos:end="107:34"><block_content pos:start="107:9" pos:end="107:34">

        <expr_stmt pos:start="107:9" pos:end="107:34"><expr pos:start="107:9" pos:end="107:33"><name pos:start="107:9" pos:end="107:17">bios_name</name> <operator pos:start="107:19" pos:end="107:19">=</operator> <name pos:start="107:21" pos:end="107:33">PROM_FILENAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:61"><expr pos:start="109:5" pos:end="109:60"><call pos:start="109:5" pos:end="109:60"><name pos:start="109:5" pos:end="109:12">snprintf</name><argument_list pos:start="109:13" pos:end="109:60">(<argument pos:start="109:14" pos:end="109:16"><expr pos:start="109:14" pos:end="109:16"><name pos:start="109:14" pos:end="109:16">buf</name></expr></argument>, <argument pos:start="109:19" pos:end="109:29"><expr pos:start="109:19" pos:end="109:29"><sizeof pos:start="109:19" pos:end="109:29">sizeof<argument_list pos:start="109:25" pos:end="109:29">(<argument pos:start="109:26" pos:end="109:28"><expr pos:start="109:26" pos:end="109:28"><name pos:start="109:26" pos:end="109:28">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="109:32" pos:end="109:38"><expr pos:start="109:32" pos:end="109:38"><literal type="string" pos:start="109:32" pos:end="109:38">"%s/%s"</literal></expr></argument>, <argument pos:start="109:41" pos:end="109:48"><expr pos:start="109:41" pos:end="109:48"><name pos:start="109:41" pos:end="109:48">bios_dir</name></expr></argument>, <argument pos:start="109:51" pos:end="109:59"><expr pos:start="109:51" pos:end="109:59"><name pos:start="109:51" pos:end="109:59">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:75"><expr pos:start="111:5" pos:end="111:74"><name pos:start="111:5" pos:end="111:7">ret</name> <operator pos:start="111:9" pos:end="111:9">=</operator> <call pos:start="111:11" pos:end="111:74"><name pos:start="111:11" pos:end="111:18">load_elf</name><argument_list pos:start="111:19" pos:end="111:74">(<argument pos:start="111:20" pos:end="111:22"><expr pos:start="111:20" pos:end="111:22"><name pos:start="111:20" pos:end="111:22">buf</name></expr></argument>, <argument pos:start="111:25" pos:end="111:55"><expr pos:start="111:25" pos:end="111:55"><name pos:start="111:25" pos:end="111:42"><name pos:start="111:25" pos:end="111:29">hwdef</name><operator pos:start="111:30" pos:end="111:31">-&gt;</operator><name pos:start="111:32" pos:end="111:42">slavio_base</name></name> <operator pos:start="111:44" pos:end="111:44">-</operator> <name pos:start="111:46" pos:end="111:55">PROM_VADDR</name></expr></argument>, <argument pos:start="111:58" pos:end="111:61"><expr pos:start="111:58" pos:end="111:61"><name pos:start="111:58" pos:end="111:61">NULL</name></expr></argument>, <argument pos:start="111:64" pos:end="111:67"><expr pos:start="111:64" pos:end="111:67"><name pos:start="111:64" pos:end="111:67">NULL</name></expr></argument>, <argument pos:start="111:70" pos:end="111:73"><expr pos:start="111:70" pos:end="111:73"><name pos:start="111:70" pos:end="111:73">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="113:5" pos:end="115:74"><if pos:start="113:5" pos:end="115:74">if <condition pos:start="113:8" pos:end="113:39">(<expr pos:start="113:9" pos:end="113:38"><name pos:start="113:9" pos:end="113:24"><name pos:start="113:9" pos:end="113:11">ret</name> <argument_list type="generic" pos:start="113:13" pos:end="113:24">&lt; <argument pos:start="113:15" pos:end="113:22"><expr pos:start="113:15" pos:end="113:22"><literal type="number" pos:start="113:15" pos:end="113:15">0</literal> <operator pos:start="113:17" pos:end="113:18">||</operator> <name pos:start="113:20" pos:end="113:22">ret</name></expr></argument> &gt;</argument_list></name> <name pos:start="113:26" pos:end="113:38">PROM_SIZE_MAX</name></expr>)</condition><block type="pseudo" pos:start="115:9" pos:end="115:74"><block_content pos:start="115:9" pos:end="115:74">

        <expr_stmt pos:start="115:9" pos:end="115:74"><expr pos:start="115:9" pos:end="115:73"><name pos:start="115:9" pos:end="115:11">ret</name> <operator pos:start="115:13" pos:end="115:13">=</operator> <call pos:start="115:15" pos:end="115:73"><name pos:start="115:15" pos:end="115:33">load_image_targphys</name><argument_list pos:start="115:34" pos:end="115:73">(<argument pos:start="115:35" pos:end="115:37"><expr pos:start="115:35" pos:end="115:37"><name pos:start="115:35" pos:end="115:37">buf</name></expr></argument>, <argument pos:start="115:40" pos:end="115:57"><expr pos:start="115:40" pos:end="115:57"><name pos:start="115:40" pos:end="115:57"><name pos:start="115:40" pos:end="115:44">hwdef</name><operator pos:start="115:45" pos:end="115:46">-&gt;</operator><name pos:start="115:47" pos:end="115:57">slavio_base</name></name></expr></argument>, <argument pos:start="115:60" pos:end="115:72"><expr pos:start="115:60" pos:end="115:72"><name pos:start="115:60" pos:end="115:72">PROM_SIZE_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="117:5" pos:end="125:5"><if pos:start="117:5" pos:end="125:5">if <condition pos:start="117:8" pos:end="117:39">(<expr pos:start="117:9" pos:end="117:38"><name pos:start="117:9" pos:end="117:24"><name pos:start="117:9" pos:end="117:11">ret</name> <argument_list type="generic" pos:start="117:13" pos:end="117:24">&lt; <argument pos:start="117:15" pos:end="117:22"><expr pos:start="117:15" pos:end="117:22"><literal type="number" pos:start="117:15" pos:end="117:15">0</literal> <operator pos:start="117:17" pos:end="117:18">||</operator> <name pos:start="117:20" pos:end="117:22">ret</name></expr></argument> &gt;</argument_list></name> <name pos:start="117:26" pos:end="117:38">PROM_SIZE_MAX</name></expr>)</condition> <block pos:start="117:41" pos:end="125:5">{<block_content pos:start="119:9" pos:end="123:16">

        <expr_stmt pos:start="119:9" pos:end="121:21"><expr pos:start="119:9" pos:end="121:20"><call pos:start="119:9" pos:end="121:20"><name pos:start="119:9" pos:end="119:15">fprintf</name><argument_list pos:start="119:16" pos:end="121:20">(<argument pos:start="119:17" pos:end="119:22"><expr pos:start="119:17" pos:end="119:22"><name pos:start="119:17" pos:end="119:22">stderr</name></expr></argument>, <argument pos:start="119:25" pos:end="119:58"><expr pos:start="119:25" pos:end="119:58"><literal type="string" pos:start="119:25" pos:end="119:58">"qemu: could not load prom '%s'\n"</literal></expr></argument>,

                <argument pos:start="121:17" pos:end="121:19"><expr pos:start="121:17" pos:end="121:19"><name pos:start="121:17" pos:end="121:19">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:16"><expr pos:start="123:9" pos:end="123:15"><call pos:start="123:9" pos:end="123:15"><name pos:start="123:9" pos:end="123:12">exit</name><argument_list pos:start="123:13" pos:end="123:15">(<argument pos:start="123:14" pos:end="123:14"><expr pos:start="123:14" pos:end="123:14"><literal type="number" pos:start="123:14" pos:end="123:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:67"><expr pos:start="127:5" pos:end="127:66"><name pos:start="127:5" pos:end="127:15">prom_offset</name> <operator pos:start="127:17" pos:end="127:18">+=</operator> <operator pos:start="127:20" pos:end="127:20">(</operator><name pos:start="127:21" pos:end="127:23">ret</name> <operator pos:start="127:25" pos:end="127:25">+</operator> <name pos:start="127:27" pos:end="127:42">TARGET_PAGE_SIZE</name> <operator pos:start="127:44" pos:end="127:44">-</operator> <literal type="number" pos:start="127:46" pos:end="127:46">1</literal><operator pos:start="127:47" pos:end="127:47">)</operator> <operator pos:start="127:49" pos:end="127:49">&amp;</operator> <name pos:start="127:51" pos:end="127:66">TARGET_PAGE_MASK</name></expr>;</expr_stmt>



    <comment type="block" pos:start="131:5" pos:end="131:24">/* set up devices */</comment>

    <expr_stmt pos:start="133:5" pos:end="135:61"><expr pos:start="133:5" pos:end="135:60"><name pos:start="133:5" pos:end="133:17">slavio_intctl</name> <operator pos:start="133:19" pos:end="133:19">=</operator> <call pos:start="133:21" pos:end="135:60"><name pos:start="133:21" pos:end="133:37">sun4c_intctl_init</name><argument_list pos:start="133:38" pos:end="135:60">(<argument pos:start="133:39" pos:end="133:62"><expr pos:start="133:39" pos:end="133:62"><name pos:start="133:39" pos:end="133:62"><name pos:start="133:39" pos:end="133:43">hwdef</name><operator pos:start="133:44" pos:end="133:45">-&gt;</operator><name pos:start="133:46" pos:end="133:62">sun4c_intctl_base</name></name></expr></argument>,

                                      <argument pos:start="135:39" pos:end="135:49"><expr pos:start="135:39" pos:end="135:49"><operator pos:start="135:39" pos:end="135:39">&amp;</operator><name pos:start="135:40" pos:end="135:49">slavio_irq</name></expr></argument>, <argument pos:start="135:52" pos:end="135:59"><expr pos:start="135:52" pos:end="135:59"><name pos:start="135:52" pos:end="135:59">cpu_irqs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="139:5" pos:end="141:50"><expr pos:start="139:5" pos:end="141:49"><name pos:start="139:5" pos:end="139:9">iommu</name> <operator pos:start="139:11" pos:end="139:11">=</operator> <call pos:start="139:13" pos:end="141:49"><name pos:start="139:13" pos:end="139:22">iommu_init</name><argument_list pos:start="139:23" pos:end="141:49">(<argument pos:start="139:24" pos:end="139:40"><expr pos:start="139:24" pos:end="139:40"><name pos:start="139:24" pos:end="139:40"><name pos:start="139:24" pos:end="139:28">hwdef</name><operator pos:start="139:29" pos:end="139:30">-&gt;</operator><name pos:start="139:31" pos:end="139:40">iommu_base</name></name></expr></argument>, <argument pos:start="139:43" pos:end="139:62"><expr pos:start="139:43" pos:end="139:62"><name pos:start="139:43" pos:end="139:62"><name pos:start="139:43" pos:end="139:47">hwdef</name><operator pos:start="139:48" pos:end="139:49">-&gt;</operator><name pos:start="139:50" pos:end="139:62">iommu_version</name></name></expr></argument>,

                       <argument pos:start="141:24" pos:end="141:48"><expr pos:start="141:24" pos:end="141:48"><name pos:start="141:24" pos:end="141:48"><name pos:start="141:24" pos:end="141:33">slavio_irq</name><index pos:start="141:34" pos:end="141:48">[<expr pos:start="141:35" pos:end="141:47"><name pos:start="141:35" pos:end="141:47"><name pos:start="141:35" pos:end="141:39">hwdef</name><operator pos:start="141:40" pos:end="141:41">-&gt;</operator><name pos:start="141:42" pos:end="141:47">me_irq</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="145:5" pos:end="147:62"><expr pos:start="145:5" pos:end="147:61"><name pos:start="145:5" pos:end="145:10">espdma</name> <operator pos:start="145:12" pos:end="145:12">=</operator> <call pos:start="145:14" pos:end="147:61"><name pos:start="145:14" pos:end="145:29">sparc32_dma_init</name><argument_list pos:start="145:30" pos:end="147:61">(<argument pos:start="145:31" pos:end="145:45"><expr pos:start="145:31" pos:end="145:45"><name pos:start="145:31" pos:end="145:45"><name pos:start="145:31" pos:end="145:35">hwdef</name><operator pos:start="145:36" pos:end="145:37">-&gt;</operator><name pos:start="145:38" pos:end="145:45">dma_base</name></name></expr></argument>, <argument pos:start="145:48" pos:end="145:73"><expr pos:start="145:48" pos:end="145:73"><name pos:start="145:48" pos:end="145:73"><name pos:start="145:48" pos:end="145:57">slavio_irq</name><index pos:start="145:58" pos:end="145:73">[<expr pos:start="145:59" pos:end="145:72"><name pos:start="145:59" pos:end="145:72"><name pos:start="145:59" pos:end="145:63">hwdef</name><operator pos:start="145:64" pos:end="145:65">-&gt;</operator><name pos:start="145:66" pos:end="145:72">esp_irq</name></name></expr>]</index></name></expr></argument>,

                              <argument pos:start="147:31" pos:end="147:35"><expr pos:start="147:31" pos:end="147:35"><name pos:start="147:31" pos:end="147:35">iommu</name></expr></argument>, <argument pos:start="147:38" pos:end="147:48"><expr pos:start="147:38" pos:end="147:48"><operator pos:start="147:38" pos:end="147:38">&amp;</operator><name pos:start="147:39" pos:end="147:48">espdma_irq</name></expr></argument>, <argument pos:start="147:51" pos:end="147:60"><expr pos:start="147:51" pos:end="147:60"><operator pos:start="147:51" pos:end="147:51">&amp;</operator><name pos:start="147:52" pos:end="147:60">esp_reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="151:5" pos:end="155:40"><expr pos:start="151:5" pos:end="155:39"><name pos:start="151:5" pos:end="151:9">ledma</name> <operator pos:start="151:11" pos:end="151:11">=</operator> <call pos:start="151:13" pos:end="155:39"><name pos:start="151:13" pos:end="151:28">sparc32_dma_init</name><argument_list pos:start="151:29" pos:end="155:39">(<argument pos:start="151:30" pos:end="151:52"><expr pos:start="151:30" pos:end="151:52"><name pos:start="151:30" pos:end="151:44"><name pos:start="151:30" pos:end="151:34">hwdef</name><operator pos:start="151:35" pos:end="151:36">-&gt;</operator><name pos:start="151:37" pos:end="151:44">dma_base</name></name> <operator pos:start="151:46" pos:end="151:46">+</operator> <literal type="number" pos:start="151:48" pos:end="151:52">16ULL</literal></expr></argument>,

                             <argument pos:start="153:30" pos:end="153:54"><expr pos:start="153:30" pos:end="153:54"><name pos:start="153:30" pos:end="153:54"><name pos:start="153:30" pos:end="153:39">slavio_irq</name><index pos:start="153:40" pos:end="153:54">[<expr pos:start="153:41" pos:end="153:53"><name pos:start="153:41" pos:end="153:53"><name pos:start="153:41" pos:end="153:45">hwdef</name><operator pos:start="153:46" pos:end="153:47">-&gt;</operator><name pos:start="153:48" pos:end="153:53">le_irq</name></name></expr>]</index></name></expr></argument>, <argument pos:start="153:57" pos:end="153:61"><expr pos:start="153:57" pos:end="153:61"><name pos:start="153:57" pos:end="153:61">iommu</name></expr></argument>, <argument pos:start="153:64" pos:end="153:73"><expr pos:start="153:64" pos:end="153:73"><operator pos:start="153:64" pos:end="153:64">&amp;</operator><name pos:start="153:65" pos:end="153:73">ledma_irq</name></expr></argument>,

                             <argument pos:start="155:30" pos:end="155:38"><expr pos:start="155:30" pos:end="155:38"><operator pos:start="155:30" pos:end="155:30">&amp;</operator><name pos:start="155:31" pos:end="155:38">le_reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="159:5" pos:end="165:5"><if pos:start="159:5" pos:end="165:5">if <condition pos:start="159:8" pos:end="159:50">(<expr pos:start="159:9" pos:end="159:49"><name pos:start="159:9" pos:end="159:21">graphic_depth</name> <operator pos:start="159:23" pos:end="159:24">!=</operator> <literal type="number" pos:start="159:26" pos:end="159:26">8</literal> <operator pos:start="159:28" pos:end="159:29">&amp;&amp;</operator> <name pos:start="159:31" pos:end="159:43">graphic_depth</name> <operator pos:start="159:45" pos:end="159:46">!=</operator> <literal type="number" pos:start="159:48" pos:end="159:49">24</literal></expr>)</condition> <block pos:start="159:52" pos:end="165:5">{<block_content pos:start="161:9" pos:end="163:17">

        <expr_stmt pos:start="161:9" pos:end="161:72"><expr pos:start="161:9" pos:end="161:71"><call pos:start="161:9" pos:end="161:71"><name pos:start="161:9" pos:end="161:15">fprintf</name><argument_list pos:start="161:16" pos:end="161:71">(<argument pos:start="161:17" pos:end="161:22"><expr pos:start="161:17" pos:end="161:22"><name pos:start="161:17" pos:end="161:22">stderr</name></expr></argument>, <argument pos:start="161:25" pos:end="161:55"><expr pos:start="161:25" pos:end="161:55"><literal type="string" pos:start="161:25" pos:end="161:55">"qemu: Unsupported depth: %d\n"</literal></expr></argument>, <argument pos:start="161:58" pos:end="161:70"><expr pos:start="161:58" pos:end="161:70"><name pos:start="161:58" pos:end="161:70">graphic_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:17"><expr pos:start="163:9" pos:end="163:16"><call pos:start="163:9" pos:end="163:16"><name pos:start="163:9" pos:end="163:12">exit</name> <argument_list pos:start="163:14" pos:end="163:16">(<argument pos:start="163:15" pos:end="163:15"><expr pos:start="163:15" pos:end="163:15"><literal type="number" pos:start="163:15" pos:end="163:15">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="167:5" pos:end="169:77"><expr pos:start="167:5" pos:end="169:76"><call pos:start="167:5" pos:end="169:76"><name pos:start="167:5" pos:end="167:12">tcx_init</name><argument_list pos:start="167:13" pos:end="169:76">(<argument pos:start="167:14" pos:end="167:15"><expr pos:start="167:14" pos:end="167:15"><name pos:start="167:14" pos:end="167:15">ds</name></expr></argument>, <argument pos:start="167:18" pos:end="167:32"><expr pos:start="167:18" pos:end="167:32"><name pos:start="167:18" pos:end="167:32"><name pos:start="167:18" pos:end="167:22">hwdef</name><operator pos:start="167:23" pos:end="167:24">-&gt;</operator><name pos:start="167:25" pos:end="167:32">tcx_base</name></name></expr></argument>, <argument pos:start="167:35" pos:end="167:58"><expr pos:start="167:35" pos:end="167:58"><name pos:start="167:35" pos:end="167:47">phys_ram_base</name> <operator pos:start="167:49" pos:end="167:49">+</operator> <name pos:start="167:51" pos:end="167:58">RAM_size</name></expr></argument>, <argument pos:start="167:61" pos:end="167:68"><expr pos:start="167:61" pos:end="167:68"><name pos:start="167:61" pos:end="167:68">RAM_size</name></expr></argument>,

             <argument pos:start="169:14" pos:end="169:29"><expr pos:start="169:14" pos:end="169:29"><name pos:start="169:14" pos:end="169:29"><name pos:start="169:14" pos:end="169:18">hwdef</name><operator pos:start="169:19" pos:end="169:20">-&gt;</operator><name pos:start="169:21" pos:end="169:29">vram_size</name></name></expr></argument>, <argument pos:start="169:32" pos:end="169:44"><expr pos:start="169:32" pos:end="169:44"><name pos:start="169:32" pos:end="169:44">graphic_width</name></expr></argument>, <argument pos:start="169:47" pos:end="169:60"><expr pos:start="169:47" pos:end="169:60"><name pos:start="169:47" pos:end="169:60">graphic_height</name></expr></argument>, <argument pos:start="169:63" pos:end="169:75"><expr pos:start="169:63" pos:end="169:75"><name pos:start="169:63" pos:end="169:75">graphic_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="173:5" pos:end="191:5"><if pos:start="173:5" pos:end="179:5">if <condition pos:start="173:8" pos:end="175:51">(<expr pos:start="173:9" pos:end="175:50"><name pos:start="173:9" pos:end="173:19"><name pos:start="173:9" pos:end="173:16">nd_table</name><index pos:start="173:17" pos:end="173:19">[<expr pos:start="173:18" pos:end="173:18"><literal type="number" pos:start="173:18" pos:end="173:18">0</literal></expr>]</index></name><operator pos:start="173:20" pos:end="173:20">.</operator><name pos:start="173:21" pos:end="173:25">model</name> <operator pos:start="173:27" pos:end="173:28">==</operator> <name pos:start="173:30" pos:end="173:33">NULL</name>

        <operator pos:start="175:9" pos:end="175:10">||</operator> <call pos:start="175:12" pos:end="175:45"><name pos:start="175:12" pos:end="175:17">strcmp</name><argument_list pos:start="175:18" pos:end="175:45">(<argument pos:start="175:19" pos:end="175:35"><expr pos:start="175:19" pos:end="175:35"><name pos:start="175:19" pos:end="175:29"><name pos:start="175:19" pos:end="175:26">nd_table</name><index pos:start="175:27" pos:end="175:29">[<expr pos:start="175:28" pos:end="175:28"><literal type="number" pos:start="175:28" pos:end="175:28">0</literal></expr>]</index></name><operator pos:start="175:30" pos:end="175:30">.</operator><name pos:start="175:31" pos:end="175:35">model</name></expr></argument>, <argument pos:start="175:38" pos:end="175:44"><expr pos:start="175:38" pos:end="175:44"><literal type="string" pos:start="175:38" pos:end="175:44">"lance"</literal></expr></argument>)</argument_list></call> <operator pos:start="175:47" pos:end="175:48">==</operator> <literal type="number" pos:start="175:50" pos:end="175:50">0</literal></expr>)</condition> <block pos:start="175:53" pos:end="179:5">{<block_content pos:start="177:9" pos:end="177:78">

        <expr_stmt pos:start="177:9" pos:end="177:78"><expr pos:start="177:9" pos:end="177:77"><call pos:start="177:9" pos:end="177:77"><name pos:start="177:9" pos:end="177:18">lance_init</name><argument_list pos:start="177:19" pos:end="177:77">(<argument pos:start="177:20" pos:end="177:31"><expr pos:start="177:20" pos:end="177:31"><operator pos:start="177:20" pos:end="177:20">&amp;</operator><name pos:start="177:21" pos:end="177:31"><name pos:start="177:21" pos:end="177:28">nd_table</name><index pos:start="177:29" pos:end="177:31">[<expr pos:start="177:30" pos:end="177:30"><literal type="number" pos:start="177:30" pos:end="177:30">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="177:34" pos:end="177:47"><expr pos:start="177:34" pos:end="177:47"><name pos:start="177:34" pos:end="177:47"><name pos:start="177:34" pos:end="177:38">hwdef</name><operator pos:start="177:39" pos:end="177:40">-&gt;</operator><name pos:start="177:41" pos:end="177:47">le_base</name></name></expr></argument>, <argument pos:start="177:50" pos:end="177:54"><expr pos:start="177:50" pos:end="177:54"><name pos:start="177:50" pos:end="177:54">ledma</name></expr></argument>, <argument pos:start="177:57" pos:end="177:66"><expr pos:start="177:57" pos:end="177:66"><operator pos:start="177:57" pos:end="177:57">*</operator><name pos:start="177:58" pos:end="177:66">ledma_irq</name></expr></argument>, <argument pos:start="177:69" pos:end="177:76"><expr pos:start="177:69" pos:end="177:76"><name pos:start="177:69" pos:end="177:76">le_reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="179:7" pos:end="185:5">else if <condition pos:start="179:15" pos:end="179:51">(<expr pos:start="179:16" pos:end="179:50"><call pos:start="179:16" pos:end="179:45"><name pos:start="179:16" pos:end="179:21">strcmp</name><argument_list pos:start="179:22" pos:end="179:45">(<argument pos:start="179:23" pos:end="179:39"><expr pos:start="179:23" pos:end="179:39"><name pos:start="179:23" pos:end="179:33"><name pos:start="179:23" pos:end="179:30">nd_table</name><index pos:start="179:31" pos:end="179:33">[<expr pos:start="179:32" pos:end="179:32"><literal type="number" pos:start="179:32" pos:end="179:32">0</literal></expr>]</index></name><operator pos:start="179:34" pos:end="179:34">.</operator><name pos:start="179:35" pos:end="179:39">model</name></expr></argument>, <argument pos:start="179:42" pos:end="179:44"><expr pos:start="179:42" pos:end="179:44"><literal type="string" pos:start="179:42" pos:end="179:44">"?"</literal></expr></argument>)</argument_list></call> <operator pos:start="179:47" pos:end="179:48">==</operator> <literal type="number" pos:start="179:50" pos:end="179:50">0</literal></expr>)</condition> <block pos:start="179:53" pos:end="185:5">{<block_content pos:start="181:9" pos:end="183:17">

        <expr_stmt pos:start="181:9" pos:end="181:57"><expr pos:start="181:9" pos:end="181:56"><call pos:start="181:9" pos:end="181:56"><name pos:start="181:9" pos:end="181:15">fprintf</name><argument_list pos:start="181:16" pos:end="181:56">(<argument pos:start="181:17" pos:end="181:22"><expr pos:start="181:17" pos:end="181:22"><name pos:start="181:17" pos:end="181:22">stderr</name></expr></argument>, <argument pos:start="181:25" pos:end="181:55"><expr pos:start="181:25" pos:end="181:55"><literal type="string" pos:start="181:25" pos:end="181:55">"qemu: Supported NICs: lance\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="183:9" pos:end="183:17"><expr pos:start="183:9" pos:end="183:16"><call pos:start="183:9" pos:end="183:16"><name pos:start="183:9" pos:end="183:12">exit</name> <argument_list pos:start="183:14" pos:end="183:16">(<argument pos:start="183:15" pos:end="183:15"><expr pos:start="183:15" pos:end="183:15"><literal type="number" pos:start="183:15" pos:end="183:15">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="185:7" pos:end="191:5">else <block pos:start="185:12" pos:end="191:5">{<block_content pos:start="187:9" pos:end="189:17">

        <expr_stmt pos:start="187:9" pos:end="187:74"><expr pos:start="187:9" pos:end="187:73"><call pos:start="187:9" pos:end="187:73"><name pos:start="187:9" pos:end="187:15">fprintf</name><argument_list pos:start="187:16" pos:end="187:73">(<argument pos:start="187:17" pos:end="187:22"><expr pos:start="187:17" pos:end="187:22"><name pos:start="187:17" pos:end="187:22">stderr</name></expr></argument>, <argument pos:start="187:25" pos:end="187:53"><expr pos:start="187:25" pos:end="187:53"><literal type="string" pos:start="187:25" pos:end="187:53">"qemu: Unsupported NIC: %s\n"</literal></expr></argument>, <argument pos:start="187:56" pos:end="187:72"><expr pos:start="187:56" pos:end="187:72"><name pos:start="187:56" pos:end="187:66"><name pos:start="187:56" pos:end="187:63">nd_table</name><index pos:start="187:64" pos:end="187:66">[<expr pos:start="187:65" pos:end="187:65"><literal type="number" pos:start="187:65" pos:end="187:65">0</literal></expr>]</index></name><operator pos:start="187:67" pos:end="187:67">.</operator><name pos:start="187:68" pos:end="187:72">model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="189:9" pos:end="189:17"><expr pos:start="189:9" pos:end="189:16"><call pos:start="189:9" pos:end="189:16"><name pos:start="189:9" pos:end="189:12">exit</name> <argument_list pos:start="189:14" pos:end="189:16">(<argument pos:start="189:15" pos:end="189:15"><expr pos:start="189:15" pos:end="189:15"><literal type="number" pos:start="189:15" pos:end="189:15">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="195:5" pos:end="197:46"><expr pos:start="195:5" pos:end="197:45"><name pos:start="195:5" pos:end="195:9">nvram</name> <operator pos:start="195:11" pos:end="195:11">=</operator> <call pos:start="195:13" pos:end="197:45"><name pos:start="195:13" pos:end="195:23">m48t59_init</name><argument_list pos:start="195:24" pos:end="197:45">(<argument pos:start="195:25" pos:end="195:37"><expr pos:start="195:25" pos:end="195:37"><name pos:start="195:25" pos:end="195:37"><name pos:start="195:25" pos:end="195:34">slavio_irq</name><index pos:start="195:35" pos:end="195:37">[<expr pos:start="195:36" pos:end="195:36"><literal type="number" pos:start="195:36" pos:end="195:36">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="195:40" pos:end="195:56"><expr pos:start="195:40" pos:end="195:56"><name pos:start="195:40" pos:end="195:56"><name pos:start="195:40" pos:end="195:44">hwdef</name><operator pos:start="195:45" pos:end="195:46">-&gt;</operator><name pos:start="195:47" pos:end="195:56">nvram_base</name></name></expr></argument>, <argument pos:start="195:59" pos:end="195:59"><expr pos:start="195:59" pos:end="195:59"><literal type="number" pos:start="195:59" pos:end="195:59">0</literal></expr></argument>,

                        <argument pos:start="197:25" pos:end="197:41"><expr pos:start="197:25" pos:end="197:41"><name pos:start="197:25" pos:end="197:41"><name pos:start="197:25" pos:end="197:29">hwdef</name><operator pos:start="197:30" pos:end="197:31">-&gt;</operator><name pos:start="197:32" pos:end="197:41">nvram_size</name></name></expr></argument>, <argument pos:start="197:44" pos:end="197:44"><expr pos:start="197:44" pos:end="197:44"><literal type="number" pos:start="197:44" pos:end="197:44">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="201:5" pos:end="203:41"><expr pos:start="201:5" pos:end="203:40"><call pos:start="201:5" pos:end="203:40"><name pos:start="201:5" pos:end="201:29">slavio_serial_ms_kbd_init</name><argument_list pos:start="201:30" pos:end="203:40">(<argument pos:start="201:31" pos:end="201:47"><expr pos:start="201:31" pos:end="201:47"><name pos:start="201:31" pos:end="201:47"><name pos:start="201:31" pos:end="201:35">hwdef</name><operator pos:start="201:36" pos:end="201:37">-&gt;</operator><name pos:start="201:38" pos:end="201:47">ms_kb_base</name></name></expr></argument>, <argument pos:start="201:50" pos:end="201:77"><expr pos:start="201:50" pos:end="201:77"><name pos:start="201:50" pos:end="201:77"><name pos:start="201:50" pos:end="201:59">slavio_irq</name><index pos:start="201:60" pos:end="201:77">[<expr pos:start="201:61" pos:end="201:76"><name pos:start="201:61" pos:end="201:76"><name pos:start="201:61" pos:end="201:65">hwdef</name><operator pos:start="201:66" pos:end="201:67">-&gt;</operator><name pos:start="201:68" pos:end="201:76">ms_kb_irq</name></name></expr>]</index></name></expr></argument>,

                              <argument pos:start="203:31" pos:end="203:39"><expr pos:start="203:31" pos:end="203:39"><name pos:start="203:31" pos:end="203:39">nographic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:start="205:5" pos:end="205:72">// Slavio TTYA (base+4, Linux ttyS0) is the first Qemu serial device</comment>

    <comment type="line" pos:start="207:5" pos:end="207:73">// Slavio TTYB (base+0, Linux ttyS1) is the second Qemu serial device</comment>

    <expr_stmt pos:start="209:5" pos:end="211:53"><expr pos:start="209:5" pos:end="211:52"><call pos:start="209:5" pos:end="211:52"><name pos:start="209:5" pos:end="209:22">slavio_serial_init</name><argument_list pos:start="209:23" pos:end="211:52">(<argument pos:start="209:24" pos:end="209:41"><expr pos:start="209:24" pos:end="209:41"><name pos:start="209:24" pos:end="209:41"><name pos:start="209:24" pos:end="209:28">hwdef</name><operator pos:start="209:29" pos:end="209:30">-&gt;</operator><name pos:start="209:31" pos:end="209:41">serial_base</name></name></expr></argument>, <argument pos:start="209:44" pos:end="209:69"><expr pos:start="209:44" pos:end="209:69"><name pos:start="209:44" pos:end="209:69"><name pos:start="209:44" pos:end="209:53">slavio_irq</name><index pos:start="209:54" pos:end="209:69">[<expr pos:start="209:55" pos:end="209:68"><name pos:start="209:55" pos:end="209:68"><name pos:start="209:55" pos:end="209:59">hwdef</name><operator pos:start="209:60" pos:end="209:61">-&gt;</operator><name pos:start="209:62" pos:end="209:68">ser_irq</name></name></expr>]</index></name></expr></argument>,

                       <argument pos:start="211:24" pos:end="211:36"><expr pos:start="211:24" pos:end="211:36"><name pos:start="211:24" pos:end="211:36"><name pos:start="211:24" pos:end="211:33">serial_hds</name><index pos:start="211:34" pos:end="211:36">[<expr pos:start="211:35" pos:end="211:35"><literal type="number" pos:start="211:35" pos:end="211:35">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="211:39" pos:end="211:51"><expr pos:start="211:39" pos:end="211:51"><name pos:start="211:39" pos:end="211:51"><name pos:start="211:39" pos:end="211:48">serial_hds</name><index pos:start="211:49" pos:end="211:51">[<expr pos:start="211:50" pos:end="211:50"><literal type="number" pos:start="211:50" pos:end="211:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="215:5" pos:end="219:76"><expr pos:start="215:5" pos:end="219:75"><name pos:start="215:5" pos:end="215:15">slavio_misc</name> <operator pos:start="215:17" pos:end="215:17">=</operator> <call pos:start="215:19" pos:end="219:75"><name pos:start="215:19" pos:end="215:34">slavio_misc_init</name><argument_list pos:start="215:35" pos:end="219:75">(<argument pos:start="215:36" pos:end="215:37"><expr pos:start="215:36" pos:end="215:37"><operator pos:start="215:36" pos:end="215:36">-</operator><literal type="number" pos:start="215:37" pos:end="215:37">1</literal></expr></argument>, <argument pos:start="215:40" pos:end="215:54"><expr pos:start="215:40" pos:end="215:54"><name pos:start="215:40" pos:end="215:54"><name pos:start="215:40" pos:end="215:44">hwdef</name><operator pos:start="215:45" pos:end="215:46">-&gt;</operator><name pos:start="215:47" pos:end="215:54">apc_base</name></name></expr></argument>,

                                   <argument pos:start="217:36" pos:end="217:51"><expr pos:start="217:36" pos:end="217:51"><name pos:start="217:36" pos:end="217:51"><name pos:start="217:36" pos:end="217:40">hwdef</name><operator pos:start="217:41" pos:end="217:42">-&gt;</operator><name pos:start="217:43" pos:end="217:51">aux1_base</name></name></expr></argument>, <argument pos:start="217:54" pos:end="217:69"><expr pos:start="217:54" pos:end="217:69"><name pos:start="217:54" pos:end="217:69"><name pos:start="217:54" pos:end="217:58">hwdef</name><operator pos:start="217:59" pos:end="217:60">-&gt;</operator><name pos:start="217:61" pos:end="217:69">aux2_base</name></name></expr></argument>,

                                   <argument pos:start="219:36" pos:end="219:60"><expr pos:start="219:36" pos:end="219:60"><name pos:start="219:36" pos:end="219:60"><name pos:start="219:36" pos:end="219:45">slavio_irq</name><index pos:start="219:46" pos:end="219:60">[<expr pos:start="219:47" pos:end="219:59"><name pos:start="219:47" pos:end="219:59"><name pos:start="219:47" pos:end="219:51">hwdef</name><operator pos:start="219:52" pos:end="219:53">-&gt;</operator><name pos:start="219:54" pos:end="219:59">me_irq</name></name></expr>]</index></name></expr></argument>, <argument pos:start="219:63" pos:end="219:65"><expr pos:start="219:63" pos:end="219:65"><name pos:start="219:63" pos:end="219:65">env</name></expr></argument>, <argument pos:start="219:68" pos:end="219:74"><expr pos:start="219:68" pos:end="219:74"><operator pos:start="219:68" pos:end="219:68">&amp;</operator><name pos:start="219:69" pos:end="219:74">fdc_tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="223:5" pos:end="241:5"><if pos:start="223:5" pos:end="241:5">if <condition pos:start="223:8" pos:end="223:49">(<expr pos:start="223:9" pos:end="223:48"><name pos:start="223:9" pos:end="223:22"><name pos:start="223:9" pos:end="223:13">hwdef</name><operator pos:start="223:14" pos:end="223:15">-&gt;</operator><name pos:start="223:16" pos:end="223:22">fd_base</name></name> <operator pos:start="223:24" pos:end="223:25">!=</operator> <operator pos:start="223:27" pos:end="223:27">(</operator><name pos:start="223:28" pos:end="223:45">target_phys_addr_t</name><operator pos:start="223:46" pos:end="223:46">)</operator><operator pos:start="223:47" pos:end="223:47">-</operator><literal type="number" pos:start="223:48" pos:end="223:48">1</literal></expr>)</condition> <block pos:start="223:51" pos:end="241:5">{<block_content pos:start="227:9" pos:end="239:34">

        <comment type="block" pos:start="225:9" pos:end="225:47">/* there is zero or one floppy drive */</comment>

        <expr_stmt pos:start="227:9" pos:end="227:29"><expr pos:start="227:9" pos:end="227:28"><name pos:start="227:9" pos:end="227:13"><name pos:start="227:9" pos:end="227:10">fd</name><index pos:start="227:11" pos:end="227:13">[<expr pos:start="227:12" pos:end="227:12"><literal type="number" pos:start="227:12" pos:end="227:12">1</literal></expr>]</index></name> <operator pos:start="227:15" pos:end="227:15">=</operator> <name pos:start="227:17" pos:end="227:21"><name pos:start="227:17" pos:end="227:18">fd</name><index pos:start="227:19" pos:end="227:21">[<expr pos:start="227:20" pos:end="227:20"><literal type="number" pos:start="227:20" pos:end="227:20">0</literal></expr>]</index></name> <operator pos:start="227:23" pos:end="227:23">=</operator> <name pos:start="227:25" pos:end="227:28">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="229:9" pos:end="229:55"><expr pos:start="229:9" pos:end="229:54"><name pos:start="229:9" pos:end="229:19">drive_index</name> <operator pos:start="229:21" pos:end="229:21">=</operator> <call pos:start="229:23" pos:end="229:54"><name pos:start="229:23" pos:end="229:37">drive_get_index</name><argument_list pos:start="229:38" pos:end="229:54">(<argument pos:start="229:39" pos:end="229:47"><expr pos:start="229:39" pos:end="229:47"><name pos:start="229:39" pos:end="229:47">IF_FLOPPY</name></expr></argument>, <argument pos:start="229:50" pos:end="229:50"><expr pos:start="229:50" pos:end="229:50"><literal type="number" pos:start="229:50" pos:end="229:50">0</literal></expr></argument>, <argument pos:start="229:53" pos:end="229:53"><expr pos:start="229:53" pos:end="229:53"><literal type="number" pos:start="229:53" pos:end="229:53">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="231:9" pos:end="233:51"><if pos:start="231:9" pos:end="233:51">if <condition pos:start="231:12" pos:end="231:30">(<expr pos:start="231:13" pos:end="231:29"><name pos:start="231:13" pos:end="231:23">drive_index</name> <operator pos:start="231:25" pos:end="231:26">!=</operator> <operator pos:start="231:28" pos:end="231:28">-</operator><literal type="number" pos:start="231:29" pos:end="231:29">1</literal></expr>)</condition><block type="pseudo" pos:start="233:13" pos:end="233:51"><block_content pos:start="233:13" pos:end="233:51">

            <expr_stmt pos:start="233:13" pos:end="233:51"><expr pos:start="233:13" pos:end="233:50"><name pos:start="233:13" pos:end="233:17"><name pos:start="233:13" pos:end="233:14">fd</name><index pos:start="233:15" pos:end="233:17">[<expr pos:start="233:16" pos:end="233:16"><literal type="number" pos:start="233:16" pos:end="233:16">0</literal></expr>]</index></name> <operator pos:start="233:19" pos:end="233:19">=</operator> <name pos:start="233:21" pos:end="233:45"><name pos:start="233:21" pos:end="233:32">drives_table</name><index pos:start="233:33" pos:end="233:45">[<expr pos:start="233:34" pos:end="233:44"><name pos:start="233:34" pos:end="233:44">drive_index</name></expr>]</index></name><operator pos:start="233:46" pos:end="233:46">.</operator><name pos:start="233:47" pos:end="233:50">bdrv</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="237:9" pos:end="239:34"><expr pos:start="237:9" pos:end="239:33"><call pos:start="237:9" pos:end="239:33"><name pos:start="237:9" pos:end="237:25">sun4m_fdctrl_init</name><argument_list pos:start="237:26" pos:end="239:33">(<argument pos:start="237:27" pos:end="237:51"><expr pos:start="237:27" pos:end="237:51"><name pos:start="237:27" pos:end="237:51"><name pos:start="237:27" pos:end="237:36">slavio_irq</name><index pos:start="237:37" pos:end="237:51">[<expr pos:start="237:38" pos:end="237:50"><name pos:start="237:38" pos:end="237:50"><name pos:start="237:38" pos:end="237:42">hwdef</name><operator pos:start="237:43" pos:end="237:44">-&gt;</operator><name pos:start="237:45" pos:end="237:50">fd_irq</name></name></expr>]</index></name></expr></argument>, <argument pos:start="237:54" pos:end="237:67"><expr pos:start="237:54" pos:end="237:67"><name pos:start="237:54" pos:end="237:67"><name pos:start="237:54" pos:end="237:58">hwdef</name><operator pos:start="237:59" pos:end="237:60">-&gt;</operator><name pos:start="237:61" pos:end="237:67">fd_base</name></name></expr></argument>, <argument pos:start="237:70" pos:end="237:71"><expr pos:start="237:70" pos:end="237:71"><name pos:start="237:70" pos:end="237:71">fd</name></expr></argument>,

                          <argument pos:start="239:27" pos:end="239:32"><expr pos:start="239:27" pos:end="239:32"><name pos:start="239:27" pos:end="239:32">fdc_tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="245:5" pos:end="251:5"><if pos:start="245:5" pos:end="251:5">if <condition pos:start="245:8" pos:end="245:39">(<expr pos:start="245:9" pos:end="245:38"><call pos:start="245:9" pos:end="245:34"><name pos:start="245:9" pos:end="245:25">drive_get_max_bus</name><argument_list pos:start="245:26" pos:end="245:34">(<argument pos:start="245:27" pos:end="245:33"><expr pos:start="245:27" pos:end="245:33"><name pos:start="245:27" pos:end="245:33">IF_SCSI</name></expr></argument>)</argument_list></call> <operator pos:start="245:36" pos:end="245:36">&gt;</operator> <literal type="number" pos:start="245:38" pos:end="245:38">0</literal></expr>)</condition> <block pos:start="245:41" pos:end="251:5">{<block_content pos:start="247:9" pos:end="249:16">

        <expr_stmt pos:start="247:9" pos:end="247:53"><expr pos:start="247:9" pos:end="247:52"><call pos:start="247:9" pos:end="247:52"><name pos:start="247:9" pos:end="247:15">fprintf</name><argument_list pos:start="247:16" pos:end="247:52">(<argument pos:start="247:17" pos:end="247:22"><expr pos:start="247:17" pos:end="247:22"><name pos:start="247:17" pos:end="247:22">stderr</name></expr></argument>, <argument pos:start="247:25" pos:end="247:51"><expr pos:start="247:25" pos:end="247:51"><literal type="string" pos:start="247:25" pos:end="247:51">"qemu: too many SCSI bus\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="249:9" pos:end="249:16"><expr pos:start="249:9" pos:end="249:15"><call pos:start="249:9" pos:end="249:15"><name pos:start="249:9" pos:end="249:12">exit</name><argument_list pos:start="249:13" pos:end="249:15">(<argument pos:start="249:14" pos:end="249:14"><expr pos:start="249:14" pos:end="249:14"><literal type="number" pos:start="249:14" pos:end="249:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="255:5" pos:end="259:56"><expr pos:start="255:5" pos:end="259:55"><name pos:start="255:5" pos:end="255:12">main_esp</name> <operator pos:start="255:14" pos:end="255:14">=</operator> <call pos:start="255:16" pos:end="259:55"><name pos:start="255:16" pos:end="255:23">esp_init</name><argument_list pos:start="255:24" pos:end="259:55">(<argument pos:start="255:25" pos:end="255:39"><expr pos:start="255:25" pos:end="255:39"><name pos:start="255:25" pos:end="255:39"><name pos:start="255:25" pos:end="255:29">hwdef</name><operator pos:start="255:30" pos:end="255:31">-&gt;</operator><name pos:start="255:32" pos:end="255:39">esp_base</name></name></expr></argument>, <argument pos:start="255:42" pos:end="255:42"><expr pos:start="255:42" pos:end="255:42"><literal type="number" pos:start="255:42" pos:end="255:42">2</literal></expr></argument>,

                        <argument pos:start="257:25" pos:end="257:42"><expr pos:start="257:25" pos:end="257:42"><name pos:start="257:25" pos:end="257:42">espdma_memory_read</name></expr></argument>, <argument pos:start="257:45" pos:end="257:63"><expr pos:start="257:45" pos:end="257:63"><name pos:start="257:45" pos:end="257:63">espdma_memory_write</name></expr></argument>,

                        <argument pos:start="259:25" pos:end="259:30"><expr pos:start="259:25" pos:end="259:30"><name pos:start="259:25" pos:end="259:30">espdma</name></expr></argument>, <argument pos:start="259:33" pos:end="259:43"><expr pos:start="259:33" pos:end="259:43"><operator pos:start="259:33" pos:end="259:33">*</operator><name pos:start="259:34" pos:end="259:43">espdma_irq</name></expr></argument>, <argument pos:start="259:46" pos:end="259:54"><expr pos:start="259:46" pos:end="259:54"><name pos:start="259:46" pos:end="259:54">esp_reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="263:5" pos:end="273:5">for <control pos:start="263:9" pos:end="263:38">(<init pos:start="263:10" pos:end="263:15"><expr pos:start="263:10" pos:end="263:14"><name pos:start="263:10" pos:end="263:10">i</name> <operator pos:start="263:12" pos:end="263:12">=</operator> <literal type="number" pos:start="263:14" pos:end="263:14">0</literal></expr>;</init> <condition pos:start="263:17" pos:end="263:33"><expr pos:start="263:17" pos:end="263:32"><name pos:start="263:17" pos:end="263:17">i</name> <operator pos:start="263:19" pos:end="263:19">&lt;</operator> <name pos:start="263:21" pos:end="263:32">ESP_MAX_DEVS</name></expr>;</condition> <incr pos:start="263:35" pos:end="263:37"><expr pos:start="263:35" pos:end="263:37"><name pos:start="263:35" pos:end="263:35">i</name><operator pos:start="263:36" pos:end="263:37">++</operator></expr></incr>)</control> <block pos:start="263:40" pos:end="273:5">{<block_content pos:start="265:9" pos:end="271:69">

        <expr_stmt pos:start="265:9" pos:end="265:53"><expr pos:start="265:9" pos:end="265:52"><name pos:start="265:9" pos:end="265:19">drive_index</name> <operator pos:start="265:21" pos:end="265:21">=</operator> <call pos:start="265:23" pos:end="265:52"><name pos:start="265:23" pos:end="265:37">drive_get_index</name><argument_list pos:start="265:38" pos:end="265:52">(<argument pos:start="265:39" pos:end="265:45"><expr pos:start="265:39" pos:end="265:45"><name pos:start="265:39" pos:end="265:45">IF_SCSI</name></expr></argument>, <argument pos:start="265:48" pos:end="265:48"><expr pos:start="265:48" pos:end="265:48"><literal type="number" pos:start="265:48" pos:end="265:48">0</literal></expr></argument>, <argument pos:start="265:51" pos:end="265:51"><expr pos:start="265:51" pos:end="265:51"><name pos:start="265:51" pos:end="265:51">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="267:9" pos:end="269:21"><if pos:start="267:9" pos:end="269:21">if <condition pos:start="267:12" pos:end="267:30">(<expr pos:start="267:13" pos:end="267:29"><name pos:start="267:13" pos:end="267:23">drive_index</name> <operator pos:start="267:25" pos:end="267:26">==</operator> <operator pos:start="267:28" pos:end="267:28">-</operator><literal type="number" pos:start="267:29" pos:end="267:29">1</literal></expr>)</condition><block type="pseudo" pos:start="269:13" pos:end="269:21"><block_content pos:start="269:13" pos:end="269:21">

            <continue pos:start="269:13" pos:end="269:21">continue;</continue></block_content></block></if></if_stmt>

        <expr_stmt pos:start="271:9" pos:end="271:69"><expr pos:start="271:9" pos:end="271:68"><call pos:start="271:9" pos:end="271:68"><name pos:start="271:9" pos:end="271:23">esp_scsi_attach</name><argument_list pos:start="271:24" pos:end="271:68">(<argument pos:start="271:25" pos:end="271:32"><expr pos:start="271:25" pos:end="271:32"><name pos:start="271:25" pos:end="271:32">main_esp</name></expr></argument>, <argument pos:start="271:35" pos:end="271:64"><expr pos:start="271:35" pos:end="271:64"><name pos:start="271:35" pos:end="271:59"><name pos:start="271:35" pos:end="271:46">drives_table</name><index pos:start="271:47" pos:end="271:59">[<expr pos:start="271:48" pos:end="271:58"><name pos:start="271:48" pos:end="271:58">drive_index</name></expr>]</index></name><operator pos:start="271:60" pos:end="271:60">.</operator><name pos:start="271:61" pos:end="271:64">bdrv</name></expr></argument>, <argument pos:start="271:67" pos:end="271:67"><expr pos:start="271:67" pos:end="271:67"><name pos:start="271:67" pos:end="271:67">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="277:5" pos:end="279:46"><expr pos:start="277:5" pos:end="279:45"><name pos:start="277:5" pos:end="277:15">kernel_size</name> <operator pos:start="277:17" pos:end="277:17">=</operator> <call pos:start="277:19" pos:end="279:45"><name pos:start="277:19" pos:end="277:35">sun4m_load_kernel</name><argument_list pos:start="277:36" pos:end="279:45">(<argument pos:start="277:37" pos:end="277:51"><expr pos:start="277:37" pos:end="277:51"><name pos:start="277:37" pos:end="277:51">kernel_filename</name></expr></argument>, <argument pos:start="277:54" pos:end="277:68"><expr pos:start="277:54" pos:end="277:68"><name pos:start="277:54" pos:end="277:68">initrd_filename</name></expr></argument>,

                                    <argument pos:start="279:37" pos:end="279:44"><expr pos:start="279:37" pos:end="279:44"><name pos:start="279:37" pos:end="279:44">RAM_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="283:5" pos:end="289:24"><expr pos:start="283:5" pos:end="289:23"><call pos:start="283:5" pos:end="289:23"><name pos:start="283:5" pos:end="283:14">nvram_init</name><argument_list pos:start="283:15" pos:end="289:23">(<argument pos:start="283:16" pos:end="283:20"><expr pos:start="283:16" pos:end="283:20"><name pos:start="283:16" pos:end="283:20">nvram</name></expr></argument>, <argument pos:start="283:23" pos:end="283:53"><expr pos:start="283:23" pos:end="283:53"><operator pos:start="283:23" pos:end="283:23">(</operator><name pos:start="283:24" pos:end="283:30">uint8_t</name> <operator pos:start="283:32" pos:end="283:32">*</operator><operator pos:start="283:33" pos:end="283:33">)</operator><operator pos:start="283:34" pos:end="283:34">&amp;</operator><name pos:start="283:35" pos:end="283:45"><name pos:start="283:35" pos:end="283:42">nd_table</name><index pos:start="283:43" pos:end="283:45">[<expr pos:start="283:44" pos:end="283:44"><literal type="number" pos:start="283:44" pos:end="283:44">0</literal></expr>]</index></name><operator pos:start="283:46" pos:end="283:46">.</operator><name pos:start="283:47" pos:end="283:53">macaddr</name></expr></argument>, <argument pos:start="283:56" pos:end="283:69"><expr pos:start="283:56" pos:end="283:69"><name pos:start="283:56" pos:end="283:69">kernel_cmdline</name></expr></argument>,

               <argument pos:start="285:16" pos:end="285:26"><expr pos:start="285:16" pos:end="285:26"><name pos:start="285:16" pos:end="285:26">boot_device</name></expr></argument>, <argument pos:start="285:29" pos:end="285:36"><expr pos:start="285:29" pos:end="285:36"><name pos:start="285:29" pos:end="285:36">RAM_size</name></expr></argument>, <argument pos:start="285:39" pos:end="285:49"><expr pos:start="285:39" pos:end="285:49"><name pos:start="285:39" pos:end="285:49">kernel_size</name></expr></argument>, <argument pos:start="285:52" pos:end="285:64"><expr pos:start="285:52" pos:end="285:64"><name pos:start="285:52" pos:end="285:64">graphic_width</name></expr></argument>,

               <argument pos:start="287:16" pos:end="287:29"><expr pos:start="287:16" pos:end="287:29"><name pos:start="287:16" pos:end="287:29">graphic_height</name></expr></argument>, <argument pos:start="287:32" pos:end="287:44"><expr pos:start="287:32" pos:end="287:44"><name pos:start="287:32" pos:end="287:44">graphic_depth</name></expr></argument>, <argument pos:start="287:47" pos:end="287:69"><expr pos:start="287:47" pos:end="287:69"><name pos:start="287:47" pos:end="287:69"><name pos:start="287:47" pos:end="287:51">hwdef</name><operator pos:start="287:52" pos:end="287:53">-&gt;</operator><name pos:start="287:54" pos:end="287:69">nvram_machine_id</name></name></expr></argument>,

               <argument pos:start="289:16" pos:end="289:22"><expr pos:start="289:16" pos:end="289:22"><literal type="string" pos:start="289:16" pos:end="289:22">"Sun4c"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="293:5" pos:end="293:55"><expr pos:start="293:5" pos:end="293:54"><name pos:start="293:5" pos:end="293:10">fw_cfg</name> <operator pos:start="293:12" pos:end="293:12">=</operator> <call pos:start="293:14" pos:end="293:54"><name pos:start="293:14" pos:end="293:24">fw_cfg_init</name><argument_list pos:start="293:25" pos:end="293:54">(<argument pos:start="293:26" pos:end="293:26"><expr pos:start="293:26" pos:end="293:26"><literal type="number" pos:start="293:26" pos:end="293:26">0</literal></expr></argument>, <argument pos:start="293:29" pos:end="293:29"><expr pos:start="293:29" pos:end="293:29"><literal type="number" pos:start="293:29" pos:end="293:29">0</literal></expr></argument>, <argument pos:start="293:32" pos:end="293:39"><expr pos:start="293:32" pos:end="293:39"><name pos:start="293:32" pos:end="293:39">CFG_ADDR</name></expr></argument>, <argument pos:start="293:42" pos:end="293:53"><expr pos:start="293:42" pos:end="293:53"><name pos:start="293:42" pos:end="293:49">CFG_ADDR</name> <operator pos:start="293:51" pos:end="293:51">+</operator> <literal type="number" pos:start="293:53" pos:end="293:53">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="295:5" pos:end="295:41"><expr pos:start="295:5" pos:end="295:40"><call pos:start="295:5" pos:end="295:40"><name pos:start="295:5" pos:end="295:18">fw_cfg_add_i32</name><argument_list pos:start="295:19" pos:end="295:40">(<argument pos:start="295:20" pos:end="295:25"><expr pos:start="295:20" pos:end="295:25"><name pos:start="295:20" pos:end="295:25">fw_cfg</name></expr></argument>, <argument pos:start="295:28" pos:end="295:36"><expr pos:start="295:28" pos:end="295:36"><name pos:start="295:28" pos:end="295:36">FW_CFG_ID</name></expr></argument>, <argument pos:start="295:39" pos:end="295:39"><expr pos:start="295:39" pos:end="295:39"><literal type="number" pos:start="295:39" pos:end="295:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="297:5" pos:end="297:64"><expr pos:start="297:5" pos:end="297:63"><call pos:start="297:5" pos:end="297:63"><name pos:start="297:5" pos:end="297:18">fw_cfg_add_i64</name><argument_list pos:start="297:19" pos:end="297:63">(<argument pos:start="297:20" pos:end="297:25"><expr pos:start="297:20" pos:end="297:25"><name pos:start="297:20" pos:end="297:25">fw_cfg</name></expr></argument>, <argument pos:start="297:28" pos:end="297:42"><expr pos:start="297:28" pos:end="297:42"><name pos:start="297:28" pos:end="297:42">FW_CFG_RAM_SIZE</name></expr></argument>, <argument pos:start="297:45" pos:end="297:62"><expr pos:start="297:45" pos:end="297:62"><operator pos:start="297:45" pos:end="297:45">(</operator><name pos:start="297:46" pos:end="297:53">uint64_t</name><operator pos:start="297:54" pos:end="297:54">)</operator><name pos:start="297:55" pos:end="297:62">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="299:5" pos:end="299:65"><expr pos:start="299:5" pos:end="299:64"><call pos:start="299:5" pos:end="299:64"><name pos:start="299:5" pos:end="299:18">fw_cfg_add_i16</name><argument_list pos:start="299:19" pos:end="299:64">(<argument pos:start="299:20" pos:end="299:25"><expr pos:start="299:20" pos:end="299:25"><name pos:start="299:20" pos:end="299:25">fw_cfg</name></expr></argument>, <argument pos:start="299:28" pos:end="299:44"><expr pos:start="299:28" pos:end="299:44"><name pos:start="299:28" pos:end="299:44">FW_CFG_MACHINE_ID</name></expr></argument>, <argument pos:start="299:47" pos:end="299:63"><expr pos:start="299:47" pos:end="299:63"><name pos:start="299:47" pos:end="299:63"><name pos:start="299:47" pos:end="299:51">hwdef</name><operator pos:start="299:52" pos:end="299:53">-&gt;</operator><name pos:start="299:54" pos:end="299:63">machine_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
