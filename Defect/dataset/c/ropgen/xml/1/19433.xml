<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19433.c" pos:tabs="8"><function pos:start="1:1" pos:end="61:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:34">vhdx_create_new_headers</name><parameter_list pos:start="1:35" pos:end="3:53">(<parameter pos:start="1:36" pos:end="1:55"><decl pos:start="1:36" pos:end="1:55"><type pos:start="1:36" pos:end="1:55"><name pos:start="1:36" pos:end="1:51">BlockDriverState</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:55">bs</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:76"><decl pos:start="1:58" pos:end="1:76"><type pos:start="1:58" pos:end="1:76"><name pos:start="1:58" pos:end="1:65">uint64_t</name></type> <name pos:start="1:67" pos:end="1:76">image_size</name></decl></parameter>,

                                   <parameter pos:start="3:36" pos:end="3:52"><decl pos:start="3:36" pos:end="3:52"><type pos:start="3:36" pos:end="3:52"><name pos:start="3:36" pos:end="3:43">uint32_t</name></type> <name pos:start="3:45" pos:end="3:52">log_size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="61:1">{<block_content pos:start="7:5" pos:end="59:15">

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name> <init pos:start="7:13" pos:end="7:15">= <expr pos:start="7:15" pos:end="7:15"><literal type="number" pos:start="7:15" pos:end="7:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:14">VHDXHeader</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:19">hdr</name> <init pos:start="9:21" pos:end="9:26">= <expr pos:start="9:23" pos:end="9:26"><name pos:start="9:23" pos:end="9:26">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:40"><expr pos:start="13:5" pos:end="13:39"><name pos:start="13:5" pos:end="13:7">hdr</name> <operator pos:start="13:9" pos:end="13:9">=</operator> <call pos:start="13:11" pos:end="13:39"><name pos:start="13:11" pos:end="13:19">g_malloc0</name><argument_list pos:start="13:20" pos:end="13:39">(<argument pos:start="13:21" pos:end="13:38"><expr pos:start="13:21" pos:end="13:38"><sizeof pos:start="13:21" pos:end="13:38">sizeof<argument_list pos:start="13:27" pos:end="13:38">(<argument pos:start="13:28" pos:end="13:37"><expr pos:start="13:28" pos:end="13:37"><name pos:start="13:28" pos:end="13:37">VHDXHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:49"><expr pos:start="17:5" pos:end="17:48"><name pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:7">hdr</name><operator pos:start="17:8" pos:end="17:9">-&gt;</operator><name pos:start="17:10" pos:end="17:18">signature</name></name>       <operator pos:start="17:26" pos:end="17:26">=</operator> <name pos:start="17:28" pos:end="17:48">VHDX_HEADER_SIGNATURE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:42"><expr pos:start="19:5" pos:end="19:41"><name pos:start="19:5" pos:end="19:24"><name pos:start="19:5" pos:end="19:7">hdr</name><operator pos:start="19:8" pos:end="19:9">-&gt;</operator><name pos:start="19:10" pos:end="19:24">sequence_number</name></name> <operator pos:start="19:26" pos:end="19:26">=</operator> <call pos:start="19:28" pos:end="19:41"><name pos:start="19:28" pos:end="19:39">g_random_int</name><argument_list pos:start="19:40" pos:end="19:41">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:29"><expr pos:start="21:5" pos:end="21:28"><name pos:start="21:5" pos:end="21:20"><name pos:start="21:5" pos:end="21:7">hdr</name><operator pos:start="21:8" pos:end="21:9">-&gt;</operator><name pos:start="21:10" pos:end="21:20">log_version</name></name>     <operator pos:start="21:26" pos:end="21:26">=</operator> <literal type="number" pos:start="21:28" pos:end="21:28">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:29"><expr pos:start="23:5" pos:end="23:28"><name pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:7">hdr</name><operator pos:start="23:8" pos:end="23:9">-&gt;</operator><name pos:start="23:10" pos:end="23:16">version</name></name>         <operator pos:start="23:26" pos:end="23:26">=</operator> <literal type="number" pos:start="23:28" pos:end="23:28">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:36"><expr pos:start="25:5" pos:end="25:35"><name pos:start="25:5" pos:end="25:19"><name pos:start="25:5" pos:end="25:7">hdr</name><operator pos:start="25:8" pos:end="25:9">-&gt;</operator><name pos:start="25:10" pos:end="25:19">log_length</name></name>      <operator pos:start="25:26" pos:end="25:26">=</operator> <name pos:start="25:28" pos:end="25:35">log_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:51"><expr pos:start="27:5" pos:end="27:50"><name pos:start="27:5" pos:end="27:19"><name pos:start="27:5" pos:end="27:7">hdr</name><operator pos:start="27:8" pos:end="27:9">-&gt;</operator><name pos:start="27:10" pos:end="27:19">log_offset</name></name>      <operator pos:start="27:26" pos:end="27:26">=</operator> <name pos:start="27:28" pos:end="27:50">VHDX_HEADER_SECTION_END</name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:46"><expr pos:start="29:5" pos:end="29:45"><call pos:start="29:5" pos:end="29:45"><name pos:start="29:5" pos:end="29:22">vhdx_guid_generate</name><argument_list pos:start="29:23" pos:end="29:45">(<argument pos:start="29:24" pos:end="29:44"><expr pos:start="29:24" pos:end="29:44"><operator pos:start="29:24" pos:end="29:24">&amp;</operator><name pos:start="29:25" pos:end="29:44"><name pos:start="29:25" pos:end="29:27">hdr</name><operator pos:start="29:28" pos:end="29:29">-&gt;</operator><name pos:start="29:30" pos:end="29:44">file_write_guid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:46"><expr pos:start="31:5" pos:end="31:45"><call pos:start="31:5" pos:end="31:45"><name pos:start="31:5" pos:end="31:22">vhdx_guid_generate</name><argument_list pos:start="31:23" pos:end="31:45">(<argument pos:start="31:24" pos:end="31:44"><expr pos:start="31:24" pos:end="31:44"><operator pos:start="31:24" pos:end="31:24">&amp;</operator><name pos:start="31:25" pos:end="31:44"><name pos:start="31:25" pos:end="31:27">hdr</name><operator pos:start="31:28" pos:end="31:29">-&gt;</operator><name pos:start="31:30" pos:end="31:44">data_write_guid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:65"><expr pos:start="35:5" pos:end="35:64"><name pos:start="35:5" pos:end="35:7">ret</name> <operator pos:start="35:9" pos:end="35:9">=</operator> <call pos:start="35:11" pos:end="35:64"><name pos:start="35:11" pos:end="35:27">vhdx_write_header</name><argument_list pos:start="35:28" pos:end="35:64">(<argument pos:start="35:29" pos:end="35:30"><expr pos:start="35:29" pos:end="35:30"><name pos:start="35:29" pos:end="35:30">bs</name></expr></argument>, <argument pos:start="35:33" pos:end="35:35"><expr pos:start="35:33" pos:end="35:35"><name pos:start="35:33" pos:end="35:35">hdr</name></expr></argument>, <argument pos:start="35:38" pos:end="35:56"><expr pos:start="35:38" pos:end="35:56"><name pos:start="35:38" pos:end="35:56">VHDX_HEADER1_OFFSET</name></expr></argument>, <argument pos:start="35:59" pos:end="35:63"><expr pos:start="35:59" pos:end="35:63"><name pos:start="35:59" pos:end="35:63">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="41:5"><if pos:start="37:5" pos:end="41:5">if <condition pos:start="37:8" pos:end="37:16">(<expr pos:start="37:9" pos:end="37:15"><name pos:start="37:9" pos:end="37:11">ret</name> <operator pos:start="37:13" pos:end="37:13">&lt;</operator> <literal type="number" pos:start="37:15" pos:end="37:15">0</literal></expr>)</condition> <block pos:start="37:18" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:18">

        <goto pos:start="39:9" pos:end="39:18">goto <name pos:start="39:14" pos:end="39:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:27"><expr pos:start="43:5" pos:end="43:26"><name pos:start="43:5" pos:end="43:24"><name pos:start="43:5" pos:end="43:7">hdr</name><operator pos:start="43:8" pos:end="43:9">-&gt;</operator><name pos:start="43:10" pos:end="43:24">sequence_number</name></name><operator pos:start="43:25" pos:end="43:26">++</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:65"><expr pos:start="45:5" pos:end="45:64"><name pos:start="45:5" pos:end="45:7">ret</name> <operator pos:start="45:9" pos:end="45:9">=</operator> <call pos:start="45:11" pos:end="45:64"><name pos:start="45:11" pos:end="45:27">vhdx_write_header</name><argument_list pos:start="45:28" pos:end="45:64">(<argument pos:start="45:29" pos:end="45:30"><expr pos:start="45:29" pos:end="45:30"><name pos:start="45:29" pos:end="45:30">bs</name></expr></argument>, <argument pos:start="45:33" pos:end="45:35"><expr pos:start="45:33" pos:end="45:35"><name pos:start="45:33" pos:end="45:35">hdr</name></expr></argument>, <argument pos:start="45:38" pos:end="45:56"><expr pos:start="45:38" pos:end="45:56"><name pos:start="45:38" pos:end="45:56">VHDX_HEADER2_OFFSET</name></expr></argument>, <argument pos:start="45:59" pos:end="45:63"><expr pos:start="45:59" pos:end="45:63"><name pos:start="45:59" pos:end="45:63">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="51:5"><if pos:start="47:5" pos:end="51:5">if <condition pos:start="47:8" pos:end="47:16">(<expr pos:start="47:9" pos:end="47:15"><name pos:start="47:9" pos:end="47:11">ret</name> <operator pos:start="47:13" pos:end="47:13">&lt;</operator> <literal type="number" pos:start="47:15" pos:end="47:15">0</literal></expr>)</condition> <block pos:start="47:18" pos:end="51:5">{<block_content pos:start="49:9" pos:end="49:18">

        <goto pos:start="49:9" pos:end="49:18">goto <name pos:start="49:14" pos:end="49:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



<label pos:start="55:1" pos:end="55:5"><name pos:start="55:1" pos:end="55:4">exit</name>:</label>

    <expr_stmt pos:start="57:5" pos:end="57:16"><expr pos:start="57:5" pos:end="57:15"><call pos:start="57:5" pos:end="57:15"><name pos:start="57:5" pos:end="57:10">g_free</name><argument_list pos:start="57:11" pos:end="57:15">(<argument pos:start="57:12" pos:end="57:14"><expr pos:start="57:12" pos:end="57:14"><name pos:start="57:12" pos:end="57:14">hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="59:5" pos:end="59:15">return <expr pos:start="59:12" pos:end="59:14"><name pos:start="59:12" pos:end="59:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
