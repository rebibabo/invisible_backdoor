<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/18196.c" pos:tabs="8"><function pos:start="1:1" pos:end="93:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:34">xio3130_upstream_initfn</name><parameter_list pos:start="1:35" pos:end="1:48">(<parameter pos:start="1:36" pos:end="1:47"><decl pos:start="1:36" pos:end="1:47"><type pos:start="1:36" pos:end="1:46"><name pos:start="1:36" pos:end="1:44">PCIDevice</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:47">d</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="93:1">{<block_content pos:start="5:5" pos:end="91:14">

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:30"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">PCIEPort</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:15">p</name> <init pos:start="5:17" pos:end="5:30">= <expr pos:start="5:19" pos:end="5:30"><call pos:start="5:19" pos:end="5:30"><name pos:start="5:19" pos:end="5:27">PCIE_PORT</name><argument_list pos:start="5:28" pos:end="5:30">(<argument pos:start="5:29" pos:end="5:29"><expr pos:start="5:29" pos:end="5:29"><name pos:start="5:29" pos:end="5:29">d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:11"><decl pos:start="7:5" pos:end="7:10"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:10">rc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:9">Error</name> <modifier pos:start="9:11" pos:end="9:11">*</modifier></type><name pos:start="9:12" pos:end="9:14">err</name> <init pos:start="9:16" pos:end="9:21">= <expr pos:start="9:18" pos:end="9:21"><name pos:start="9:18" pos:end="9:21">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:40"><expr pos:start="13:5" pos:end="13:39"><call pos:start="13:5" pos:end="13:39"><name pos:start="13:5" pos:end="13:21">pci_bridge_initfn</name><argument_list pos:start="13:22" pos:end="13:39">(<argument pos:start="13:23" pos:end="13:23"><expr pos:start="13:23" pos:end="13:23"><name pos:start="13:23" pos:end="13:23">d</name></expr></argument>, <argument pos:start="13:26" pos:end="13:38"><expr pos:start="13:26" pos:end="13:38"><name pos:start="13:26" pos:end="13:38">TYPE_PCIE_BUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:26"><expr pos:start="15:5" pos:end="15:25"><call pos:start="15:5" pos:end="15:25"><name pos:start="15:5" pos:end="15:22">pcie_port_init_reg</name><argument_list pos:start="15:23" pos:end="15:25">(<argument pos:start="15:24" pos:end="15:24"><expr pos:start="15:24" pos:end="15:24"><name pos:start="15:24" pos:end="15:24">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="19:5" pos:end="23:77"><expr pos:start="19:5" pos:end="23:76"><name pos:start="19:5" pos:end="19:6">rc</name> <operator pos:start="19:8" pos:end="19:8">=</operator> <call pos:start="19:10" pos:end="23:76"><name pos:start="19:10" pos:end="19:17">msi_init</name><argument_list pos:start="19:18" pos:end="23:76">(<argument pos:start="19:19" pos:end="19:19"><expr pos:start="19:19" pos:end="19:19"><name pos:start="19:19" pos:end="19:19">d</name></expr></argument>, <argument pos:start="19:22" pos:end="19:39"><expr pos:start="19:22" pos:end="19:39"><name pos:start="19:22" pos:end="19:39">XIO3130_MSI_OFFSET</name></expr></argument>, <argument pos:start="19:42" pos:end="19:62"><expr pos:start="19:42" pos:end="19:62"><name pos:start="19:42" pos:end="19:62">XIO3130_MSI_NR_VECTOR</name></expr></argument>,

                  <argument pos:start="21:19" pos:end="21:67"><expr pos:start="21:19" pos:end="21:67"><name pos:start="21:19" pos:end="21:45">XIO3130_MSI_SUPPORTED_FLAGS</name> <operator pos:start="21:47" pos:end="21:47">&amp;</operator> <name pos:start="21:49" pos:end="21:67">PCI_MSI_FLAGS_64BIT</name></expr></argument>,

                  <argument pos:start="23:19" pos:end="23:69"><expr pos:start="23:19" pos:end="23:69"><name pos:start="23:19" pos:end="23:45">XIO3130_MSI_SUPPORTED_FLAGS</name> <operator pos:start="23:47" pos:end="23:47">&amp;</operator> <name pos:start="23:49" pos:end="23:69">PCI_MSI_FLAGS_MASKBIT</name></expr></argument>, <argument pos:start="23:72" pos:end="23:75"><expr pos:start="23:72" pos:end="23:75"><operator pos:start="23:72" pos:end="23:72">&amp;</operator><name pos:start="23:73" pos:end="23:75">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="33:5"><if pos:start="25:5" pos:end="33:5">if <condition pos:start="25:8" pos:end="25:15">(<expr pos:start="25:9" pos:end="25:14"><name pos:start="25:9" pos:end="25:10">rc</name> <operator pos:start="25:12" pos:end="25:12">&lt;</operator> <literal type="number" pos:start="25:14" pos:end="25:14">0</literal></expr>)</condition> <block pos:start="25:17" pos:end="33:5">{<block_content pos:start="27:9" pos:end="31:24">

        <expr_stmt pos:start="27:9" pos:end="27:31"><expr pos:start="27:9" pos:end="27:30"><call pos:start="27:9" pos:end="27:30"><name pos:start="27:9" pos:end="27:14">assert</name><argument_list pos:start="27:15" pos:end="27:30">(<argument pos:start="27:16" pos:end="27:29"><expr pos:start="27:16" pos:end="27:29"><name pos:start="27:16" pos:end="27:17">rc</name> <operator pos:start="27:19" pos:end="27:20">==</operator> <operator pos:start="27:22" pos:end="27:22">-</operator><name pos:start="27:23" pos:end="27:29">ENOTSUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:30"><expr pos:start="29:9" pos:end="29:29"><call pos:start="29:9" pos:end="29:29"><name pos:start="29:9" pos:end="29:24">error_report_err</name><argument_list pos:start="29:25" pos:end="29:29">(<argument pos:start="29:26" pos:end="29:28"><expr pos:start="29:26" pos:end="29:28"><name pos:start="29:26" pos:end="29:28">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="31:9" pos:end="31:24">goto <name pos:start="31:14" pos:end="31:23">err_bridge</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="39:71"><expr pos:start="37:5" pos:end="39:70"><name pos:start="37:5" pos:end="37:6">rc</name> <operator pos:start="37:8" pos:end="37:8">=</operator> <call pos:start="37:10" pos:end="39:70"><name pos:start="37:10" pos:end="37:30">pci_bridge_ssvid_init</name><argument_list pos:start="37:31" pos:end="39:70">(<argument pos:start="37:32" pos:end="37:32"><expr pos:start="37:32" pos:end="37:32"><name pos:start="37:32" pos:end="37:32">d</name></expr></argument>, <argument pos:start="37:35" pos:end="37:54"><expr pos:start="37:35" pos:end="37:54"><name pos:start="37:35" pos:end="37:54">XIO3130_SSVID_OFFSET</name></expr></argument>,

                               <argument pos:start="39:32" pos:end="39:49"><expr pos:start="39:32" pos:end="39:49"><name pos:start="39:32" pos:end="39:49">XIO3130_SSVID_SVID</name></expr></argument>, <argument pos:start="39:52" pos:end="39:69"><expr pos:start="39:52" pos:end="39:69"><name pos:start="39:52" pos:end="39:69">XIO3130_SSVID_SSID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="45:5"><if pos:start="41:5" pos:end="45:5">if <condition pos:start="41:8" pos:end="41:15">(<expr pos:start="41:9" pos:end="41:14"><name pos:start="41:9" pos:end="41:10">rc</name> <operator pos:start="41:12" pos:end="41:12">&lt;</operator> <literal type="number" pos:start="41:14" pos:end="41:14">0</literal></expr>)</condition> <block pos:start="41:17" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:24">

        <goto pos:start="43:9" pos:end="43:24">goto <name pos:start="43:14" pos:end="43:23">err_bridge</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="49:5" pos:end="51:32"><expr pos:start="49:5" pos:end="51:31"><name pos:start="49:5" pos:end="49:6">rc</name> <operator pos:start="49:8" pos:end="49:8">=</operator> <call pos:start="49:10" pos:end="51:31"><name pos:start="49:10" pos:end="49:22">pcie_cap_init</name><argument_list pos:start="49:23" pos:end="51:31">(<argument pos:start="49:24" pos:end="49:24"><expr pos:start="49:24" pos:end="49:24"><name pos:start="49:24" pos:end="49:24">d</name></expr></argument>, <argument pos:start="49:27" pos:end="49:44"><expr pos:start="49:27" pos:end="49:44"><name pos:start="49:27" pos:end="49:44">XIO3130_EXP_OFFSET</name></expr></argument>, <argument pos:start="49:47" pos:end="49:67"><expr pos:start="49:47" pos:end="49:67"><name pos:start="49:47" pos:end="49:67">PCI_EXP_TYPE_UPSTREAM</name></expr></argument>,

                       <argument pos:start="51:24" pos:end="51:30"><expr pos:start="51:24" pos:end="51:30"><name pos:start="51:24" pos:end="51:30"><name pos:start="51:24" pos:end="51:24">p</name><operator pos:start="51:25" pos:end="51:26">-&gt;</operator><name pos:start="51:27" pos:end="51:30">port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="57:5"><if pos:start="53:5" pos:end="57:5">if <condition pos:start="53:8" pos:end="53:15">(<expr pos:start="53:9" pos:end="53:14"><name pos:start="53:9" pos:end="53:10">rc</name> <operator pos:start="53:12" pos:end="53:12">&lt;</operator> <literal type="number" pos:start="53:14" pos:end="53:14">0</literal></expr>)</condition> <block pos:start="53:17" pos:end="57:5">{<block_content pos:start="55:9" pos:end="55:21">

        <goto pos:start="55:9" pos:end="55:21">goto <name pos:start="55:14" pos:end="55:20">err_msi</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:25"><expr pos:start="59:5" pos:end="59:24"><call pos:start="59:5" pos:end="59:24"><name pos:start="59:5" pos:end="59:21">pcie_cap_flr_init</name><argument_list pos:start="59:22" pos:end="59:24">(<argument pos:start="59:23" pos:end="59:23"><expr pos:start="59:23" pos:end="59:23"><name pos:start="59:23" pos:end="59:23">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:28"><expr pos:start="61:5" pos:end="61:27"><call pos:start="61:5" pos:end="61:27"><name pos:start="61:5" pos:end="61:24">pcie_cap_deverr_init</name><argument_list pos:start="61:25" pos:end="61:27">(<argument pos:start="61:26" pos:end="61:26"><expr pos:start="61:26" pos:end="61:26"><name pos:start="61:26" pos:end="61:26">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:62"><expr pos:start="65:5" pos:end="65:61"><name pos:start="65:5" pos:end="65:6">rc</name> <operator pos:start="65:8" pos:end="65:8">=</operator> <call pos:start="65:10" pos:end="65:61"><name pos:start="65:10" pos:end="65:22">pcie_aer_init</name><argument_list pos:start="65:23" pos:end="65:61">(<argument pos:start="65:24" pos:end="65:24"><expr pos:start="65:24" pos:end="65:24"><name pos:start="65:24" pos:end="65:24">d</name></expr></argument>, <argument pos:start="65:27" pos:end="65:44"><expr pos:start="65:27" pos:end="65:44"><name pos:start="65:27" pos:end="65:44">XIO3130_AER_OFFSET</name></expr></argument>, <argument pos:start="65:47" pos:end="65:60"><expr pos:start="65:47" pos:end="65:60"><name pos:start="65:47" pos:end="65:60">PCI_ERR_SIZEOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="67:5" pos:end="71:5"><if pos:start="67:5" pos:end="71:5">if <condition pos:start="67:8" pos:end="67:15">(<expr pos:start="67:9" pos:end="67:14"><name pos:start="67:9" pos:end="67:10">rc</name> <operator pos:start="67:12" pos:end="67:12">&lt;</operator> <literal type="number" pos:start="67:14" pos:end="67:14">0</literal></expr>)</condition> <block pos:start="67:17" pos:end="71:5">{<block_content pos:start="69:9" pos:end="69:17">

        <goto pos:start="69:9" pos:end="69:17">goto <name pos:start="69:14" pos:end="69:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <return pos:start="75:5" pos:end="75:13">return <expr pos:start="75:12" pos:end="75:12"><literal type="number" pos:start="75:12" pos:end="75:12">0</literal></expr>;</return>



<label pos:start="79:1" pos:end="79:4"><name pos:start="79:1" pos:end="79:3">err</name>:</label>

    <expr_stmt pos:start="81:5" pos:end="81:21"><expr pos:start="81:5" pos:end="81:20"><call pos:start="81:5" pos:end="81:20"><name pos:start="81:5" pos:end="81:17">pcie_cap_exit</name><argument_list pos:start="81:18" pos:end="81:20">(<argument pos:start="81:19" pos:end="81:19"><expr pos:start="81:19" pos:end="81:19"><name pos:start="81:19" pos:end="81:19">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="83:1" pos:end="83:8"><name pos:start="83:1" pos:end="83:7">err_msi</name>:</label>

    <expr_stmt pos:start="85:5" pos:end="85:18"><expr pos:start="85:5" pos:end="85:17"><call pos:start="85:5" pos:end="85:17"><name pos:start="85:5" pos:end="85:14">msi_uninit</name><argument_list pos:start="85:15" pos:end="85:17">(<argument pos:start="85:16" pos:end="85:16"><expr pos:start="85:16" pos:end="85:16"><name pos:start="85:16" pos:end="85:16">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="87:1" pos:end="87:11"><name pos:start="87:1" pos:end="87:10">err_bridge</name>:</label>

    <expr_stmt pos:start="89:5" pos:end="89:25"><expr pos:start="89:5" pos:end="89:24"><call pos:start="89:5" pos:end="89:24"><name pos:start="89:5" pos:end="89:21">pci_bridge_exitfn</name><argument_list pos:start="89:22" pos:end="89:24">(<argument pos:start="89:23" pos:end="89:23"><expr pos:start="89:23" pos:end="89:23"><name pos:start="89:23" pos:end="89:23">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="91:5" pos:end="91:14">return <expr pos:start="91:12" pos:end="91:13"><name pos:start="91:12" pos:end="91:13">rc</name></expr>;</return>

</block_content>}</block></function>
</unit>
