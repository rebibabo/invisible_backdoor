<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6317.c" pos:tabs="8"><function pos:start="1:1" pos:end="919:72"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:37">rtl8139_cplus_transmit_one</name><parameter_list pos:start="1:38" pos:end="1:54">(<parameter pos:start="1:39" pos:end="1:53"><decl pos:start="1:39" pos:end="1:53"><type pos:start="1:39" pos:end="1:52"><name pos:start="1:39" pos:end="1:50">RTL8139State</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:53">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="919:72">{<block_content pos:start="5:5" pos:end="919:72">

    <if_stmt pos:start="5:5" pos:end="13:5"><if pos:start="5:5" pos:end="13:5">if <condition pos:start="5:8" pos:end="5:40">(<expr pos:start="5:9" pos:end="5:39"><operator pos:start="5:9" pos:end="5:9">!</operator><call pos:start="5:10" pos:end="5:39"><name pos:start="5:10" pos:end="5:36">rtl8139_transmitter_enabled</name><argument_list pos:start="5:37" pos:end="5:39">(<argument pos:start="5:38" pos:end="5:38"><expr pos:start="5:38" pos:end="5:38"><name pos:start="5:38" pos:end="5:38">s</name></expr></argument>)</argument_list></call></expr>)</condition>

    <block pos:start="7:5" pos:end="13:5">{<block_content pos:start="9:9" pos:end="11:17">

        <expr_stmt pos:start="9:9" pos:end="9:55"><expr pos:start="9:9" pos:end="9:54"><call pos:start="9:9" pos:end="9:54"><name pos:start="9:9" pos:end="9:15">DPRINTF</name><argument_list pos:start="9:16" pos:end="9:54">(<argument pos:start="9:17" pos:end="9:53"><expr pos:start="9:17" pos:end="9:53"><literal type="string" pos:start="9:17" pos:end="9:53">"+++ C+ mode: transmitter disabled\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="11:9" pos:end="11:17">return <expr pos:start="11:16" pos:end="11:16"><literal type="number" pos:start="11:16" pos:end="11:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="17:5" pos:end="25:5"><if pos:start="17:5" pos:end="25:5">if <condition pos:start="17:8" pos:end="17:43">(<expr pos:start="17:9" pos:end="17:42"><operator pos:start="17:9" pos:end="17:9">!</operator><call pos:start="17:10" pos:end="17:42"><name pos:start="17:10" pos:end="17:39">rtl8139_cp_transmitter_enabled</name><argument_list pos:start="17:40" pos:end="17:42">(<argument pos:start="17:41" pos:end="17:41"><expr pos:start="17:41" pos:end="17:41"><name pos:start="17:41" pos:end="17:41">s</name></expr></argument>)</argument_list></call></expr>)</condition>

    <block pos:start="19:5" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:18">

        <expr_stmt pos:start="21:9" pos:end="21:58"><expr pos:start="21:9" pos:end="21:57"><call pos:start="21:9" pos:end="21:57"><name pos:start="21:9" pos:end="21:15">DPRINTF</name><argument_list pos:start="21:16" pos:end="21:57">(<argument pos:start="21:17" pos:end="21:56"><expr pos:start="21:17" pos:end="21:56"><literal type="string" pos:start="21:17" pos:end="21:56">"+++ C+ mode: C+ transmitter disabled\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="23:18">return <expr pos:start="23:16" pos:end="23:16"><literal type="number" pos:start="23:16" pos:end="23:16">0</literal></expr> ;</return>

    </block_content>}</block></if></if_stmt>



    <decl_stmt pos:start="29:5" pos:end="29:40"><decl pos:start="29:5" pos:end="29:39"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:18">descriptor</name> <init pos:start="29:20" pos:end="29:39">= <expr pos:start="29:22" pos:end="29:39"><name pos:start="29:22" pos:end="29:39"><name pos:start="29:22" pos:end="29:22">s</name><operator pos:start="29:23" pos:end="29:24">-&gt;</operator><name pos:start="29:25" pos:end="29:39">currCPlusTxDesc</name></name></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="33:5" pos:end="33:79"><decl pos:start="33:5" pos:end="33:78"><type pos:start="33:5" pos:end="33:14"><name pos:start="33:5" pos:end="33:14">dma_addr_t</name></type> <name pos:start="33:16" pos:end="33:33">cplus_tx_ring_desc</name> <init pos:start="33:35" pos:end="33:78">= <expr pos:start="33:37" pos:end="33:78"><call pos:start="33:37" pos:end="33:78"><name pos:start="33:37" pos:end="33:50">rtl8139_addr64</name><argument_list pos:start="33:51" pos:end="33:78">(<argument pos:start="33:52" pos:end="33:63"><expr pos:start="33:52" pos:end="33:63"><name pos:start="33:52" pos:end="33:63"><name pos:start="33:52" pos:end="33:52">s</name><operator pos:start="33:53" pos:end="33:54">-&gt;</operator><name pos:start="33:55" pos:end="33:60">TxAddr</name><index pos:start="33:61" pos:end="33:63">[<expr pos:start="33:62" pos:end="33:62"><literal type="number" pos:start="33:62" pos:end="33:62">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="33:66" pos:end="33:77"><expr pos:start="33:66" pos:end="33:77"><name pos:start="33:66" pos:end="33:77"><name pos:start="33:66" pos:end="33:66">s</name><operator pos:start="33:67" pos:end="33:68">-&gt;</operator><name pos:start="33:69" pos:end="33:74">TxAddr</name><index pos:start="33:75" pos:end="33:77">[<expr pos:start="33:76" pos:end="33:76"><literal type="number" pos:start="33:76" pos:end="33:76">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="37:5" pos:end="37:30">/* Normal priority ring */</comment>

    <expr_stmt pos:start="39:5" pos:end="39:42"><expr pos:start="39:5" pos:end="39:41"><name pos:start="39:5" pos:end="39:22">cplus_tx_ring_desc</name> <operator pos:start="39:24" pos:end="39:25">+=</operator> <literal type="number" pos:start="39:27" pos:end="39:28">16</literal> <operator pos:start="39:30" pos:end="39:30">*</operator> <name pos:start="39:32" pos:end="39:41">descriptor</name></expr>;</expr_stmt>



    <expr_stmt pos:start="43:5" pos:end="47:42"><expr pos:start="43:5" pos:end="47:41"><call pos:start="43:5" pos:end="47:41"><name pos:start="43:5" pos:end="43:11">DPRINTF</name><argument_list pos:start="43:12" pos:end="47:41">(<argument pos:start="43:13" pos:end="45:40"><expr pos:start="43:13" pos:end="45:40"><literal type="string" pos:start="43:13" pos:end="43:71">"+++ C+ mode reading TX descriptor %d from host memory at "</literal>

        <literal type="string" pos:start="45:9" pos:end="45:24">"%08x %08x = 0x"</literal><name pos:start="45:25" pos:end="45:36">DMA_ADDR_FMT</name><literal type="string" pos:start="45:37" pos:end="45:40">"\n"</literal></expr></argument>, <argument pos:start="45:43" pos:end="45:52"><expr pos:start="45:43" pos:end="45:52"><name pos:start="45:43" pos:end="45:52">descriptor</name></expr></argument>, <argument pos:start="45:55" pos:end="45:66"><expr pos:start="45:55" pos:end="45:66"><name pos:start="45:55" pos:end="45:66"><name pos:start="45:55" pos:end="45:55">s</name><operator pos:start="45:56" pos:end="45:57">-&gt;</operator><name pos:start="45:58" pos:end="45:63">TxAddr</name><index pos:start="45:64" pos:end="45:66">[<expr pos:start="45:65" pos:end="45:65"><literal type="number" pos:start="45:65" pos:end="45:65">1</literal></expr>]</index></name></expr></argument>,

        <argument pos:start="47:9" pos:end="47:20"><expr pos:start="47:9" pos:end="47:20"><name pos:start="47:9" pos:end="47:20"><name pos:start="47:9" pos:end="47:9">s</name><operator pos:start="47:10" pos:end="47:11">-&gt;</operator><name pos:start="47:12" pos:end="47:17">TxAddr</name><index pos:start="47:18" pos:end="47:20">[<expr pos:start="47:19" pos:end="47:19"><literal type="number" pos:start="47:19" pos:end="47:19">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="47:23" pos:end="47:40"><expr pos:start="47:23" pos:end="47:40"><name pos:start="47:23" pos:end="47:40">cplus_tx_ring_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <decl_stmt pos:start="51:5" pos:end="51:46"><decl pos:start="51:5" pos:end="51:16"><type pos:start="51:5" pos:end="51:12"><name pos:start="51:5" pos:end="51:12">uint32_t</name></type> <name pos:start="51:14" pos:end="51:16">val</name></decl>, <decl pos:start="51:19" pos:end="51:23"><type ref="prev" pos:start="51:5" pos:end="51:12"/><name pos:start="51:19" pos:end="51:23">txdw0</name></decl>,<decl pos:start="51:25" pos:end="51:29"><type ref="prev" pos:start="51:5" pos:end="51:12"/><name pos:start="51:25" pos:end="51:29">txdw1</name></decl>,<decl pos:start="51:31" pos:end="51:37"><type ref="prev" pos:start="51:5" pos:end="51:12"/><name pos:start="51:31" pos:end="51:37">txbufLO</name></decl>,<decl pos:start="51:39" pos:end="51:45"><type ref="prev" pos:start="51:5" pos:end="51:12"/><name pos:start="51:39" pos:end="51:45">txbufHI</name></decl>;</decl_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:69"><expr pos:start="55:5" pos:end="55:68"><call pos:start="55:5" pos:end="55:68"><name pos:start="55:5" pos:end="55:16">pci_dma_read</name><argument_list pos:start="55:17" pos:end="55:68">(<argument pos:start="55:18" pos:end="55:24"><expr pos:start="55:18" pos:end="55:24"><operator pos:start="55:18" pos:end="55:18">&amp;</operator><name pos:start="55:19" pos:end="55:24"><name pos:start="55:19" pos:end="55:19">s</name><operator pos:start="55:20" pos:end="55:21">-&gt;</operator><name pos:start="55:22" pos:end="55:24">dev</name></name></expr></argument>, <argument pos:start="55:27" pos:end="55:44"><expr pos:start="55:27" pos:end="55:44"><name pos:start="55:27" pos:end="55:44">cplus_tx_ring_desc</name></expr></argument>,    <argument pos:start="55:50" pos:end="55:64"><expr pos:start="55:50" pos:end="55:64"><operator pos:start="55:50" pos:end="55:50">(</operator><name pos:start="55:51" pos:end="55:57">uint8_t</name> <operator pos:start="55:59" pos:end="55:59">*</operator><operator pos:start="55:60" pos:end="55:60">)</operator><operator pos:start="55:61" pos:end="55:61">&amp;</operator><name pos:start="55:62" pos:end="55:64">val</name></expr></argument>, <argument pos:start="55:67" pos:end="55:67"><expr pos:start="55:67" pos:end="55:67"><literal type="number" pos:start="55:67" pos:end="55:67">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:29"><expr pos:start="57:5" pos:end="57:28"><name pos:start="57:5" pos:end="57:9">txdw0</name> <operator pos:start="57:11" pos:end="57:11">=</operator> <call pos:start="57:13" pos:end="57:28"><name pos:start="57:13" pos:end="57:23">le32_to_cpu</name><argument_list pos:start="57:24" pos:end="57:28">(<argument pos:start="57:25" pos:end="57:27"><expr pos:start="57:25" pos:end="57:27"><name pos:start="57:25" pos:end="57:27">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:69"><expr pos:start="59:5" pos:end="59:68"><call pos:start="59:5" pos:end="59:68"><name pos:start="59:5" pos:end="59:16">pci_dma_read</name><argument_list pos:start="59:17" pos:end="59:68">(<argument pos:start="59:18" pos:end="59:24"><expr pos:start="59:18" pos:end="59:24"><operator pos:start="59:18" pos:end="59:18">&amp;</operator><name pos:start="59:19" pos:end="59:24"><name pos:start="59:19" pos:end="59:19">s</name><operator pos:start="59:20" pos:end="59:21">-&gt;</operator><name pos:start="59:22" pos:end="59:24">dev</name></name></expr></argument>, <argument pos:start="59:27" pos:end="59:46"><expr pos:start="59:27" pos:end="59:46"><name pos:start="59:27" pos:end="59:44">cplus_tx_ring_desc</name><operator pos:start="59:45" pos:end="59:45">+</operator><literal type="number" pos:start="59:46" pos:end="59:46">4</literal></expr></argument>,  <argument pos:start="59:50" pos:end="59:64"><expr pos:start="59:50" pos:end="59:64"><operator pos:start="59:50" pos:end="59:50">(</operator><name pos:start="59:51" pos:end="59:57">uint8_t</name> <operator pos:start="59:59" pos:end="59:59">*</operator><operator pos:start="59:60" pos:end="59:60">)</operator><operator pos:start="59:61" pos:end="59:61">&amp;</operator><name pos:start="59:62" pos:end="59:64">val</name></expr></argument>, <argument pos:start="59:67" pos:end="59:67"><expr pos:start="59:67" pos:end="59:67"><literal type="number" pos:start="59:67" pos:end="59:67">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:29"><expr pos:start="61:5" pos:end="61:28"><name pos:start="61:5" pos:end="61:9">txdw1</name> <operator pos:start="61:11" pos:end="61:11">=</operator> <call pos:start="61:13" pos:end="61:28"><name pos:start="61:13" pos:end="61:23">le32_to_cpu</name><argument_list pos:start="61:24" pos:end="61:28">(<argument pos:start="61:25" pos:end="61:27"><expr pos:start="61:25" pos:end="61:27"><name pos:start="61:25" pos:end="61:27">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:69"><expr pos:start="63:5" pos:end="63:68"><call pos:start="63:5" pos:end="63:68"><name pos:start="63:5" pos:end="63:16">pci_dma_read</name><argument_list pos:start="63:17" pos:end="63:68">(<argument pos:start="63:18" pos:end="63:24"><expr pos:start="63:18" pos:end="63:24"><operator pos:start="63:18" pos:end="63:18">&amp;</operator><name pos:start="63:19" pos:end="63:24"><name pos:start="63:19" pos:end="63:19">s</name><operator pos:start="63:20" pos:end="63:21">-&gt;</operator><name pos:start="63:22" pos:end="63:24">dev</name></name></expr></argument>, <argument pos:start="63:27" pos:end="63:46"><expr pos:start="63:27" pos:end="63:46"><name pos:start="63:27" pos:end="63:44">cplus_tx_ring_desc</name><operator pos:start="63:45" pos:end="63:45">+</operator><literal type="number" pos:start="63:46" pos:end="63:46">8</literal></expr></argument>,  <argument pos:start="63:50" pos:end="63:64"><expr pos:start="63:50" pos:end="63:64"><operator pos:start="63:50" pos:end="63:50">(</operator><name pos:start="63:51" pos:end="63:57">uint8_t</name> <operator pos:start="63:59" pos:end="63:59">*</operator><operator pos:start="63:60" pos:end="63:60">)</operator><operator pos:start="63:61" pos:end="63:61">&amp;</operator><name pos:start="63:62" pos:end="63:64">val</name></expr></argument>, <argument pos:start="63:67" pos:end="63:67"><expr pos:start="63:67" pos:end="63:67"><literal type="number" pos:start="63:67" pos:end="63:67">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:31"><expr pos:start="65:5" pos:end="65:30"><name pos:start="65:5" pos:end="65:11">txbufLO</name> <operator pos:start="65:13" pos:end="65:13">=</operator> <call pos:start="65:15" pos:end="65:30"><name pos:start="65:15" pos:end="65:25">le32_to_cpu</name><argument_list pos:start="65:26" pos:end="65:30">(<argument pos:start="65:27" pos:end="65:29"><expr pos:start="65:27" pos:end="65:29"><name pos:start="65:27" pos:end="65:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:69"><expr pos:start="67:5" pos:end="67:68"><call pos:start="67:5" pos:end="67:68"><name pos:start="67:5" pos:end="67:16">pci_dma_read</name><argument_list pos:start="67:17" pos:end="67:68">(<argument pos:start="67:18" pos:end="67:24"><expr pos:start="67:18" pos:end="67:24"><operator pos:start="67:18" pos:end="67:18">&amp;</operator><name pos:start="67:19" pos:end="67:24"><name pos:start="67:19" pos:end="67:19">s</name><operator pos:start="67:20" pos:end="67:21">-&gt;</operator><name pos:start="67:22" pos:end="67:24">dev</name></name></expr></argument>, <argument pos:start="67:27" pos:end="67:47"><expr pos:start="67:27" pos:end="67:47"><name pos:start="67:27" pos:end="67:44">cplus_tx_ring_desc</name><operator pos:start="67:45" pos:end="67:45">+</operator><literal type="number" pos:start="67:46" pos:end="67:47">12</literal></expr></argument>, <argument pos:start="67:50" pos:end="67:64"><expr pos:start="67:50" pos:end="67:64"><operator pos:start="67:50" pos:end="67:50">(</operator><name pos:start="67:51" pos:end="67:57">uint8_t</name> <operator pos:start="67:59" pos:end="67:59">*</operator><operator pos:start="67:60" pos:end="67:60">)</operator><operator pos:start="67:61" pos:end="67:61">&amp;</operator><name pos:start="67:62" pos:end="67:64">val</name></expr></argument>, <argument pos:start="67:67" pos:end="67:67"><expr pos:start="67:67" pos:end="67:67"><literal type="number" pos:start="67:67" pos:end="67:67">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:31"><expr pos:start="69:5" pos:end="69:30"><name pos:start="69:5" pos:end="69:11">txbufHI</name> <operator pos:start="69:13" pos:end="69:13">=</operator> <call pos:start="69:15" pos:end="69:30"><name pos:start="69:15" pos:end="69:25">le32_to_cpu</name><argument_list pos:start="69:26" pos:end="69:30">(<argument pos:start="69:27" pos:end="69:29"><expr pos:start="69:27" pos:end="69:29"><name pos:start="69:27" pos:end="69:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="73:5" pos:end="160:0"><expr pos:start="73:5" pos:end="75:39"><call pos:start="73:5" pos:end="75:39"><name pos:start="73:5" pos:end="73:11">DPRINTF</name><argument_list pos:start="73:12" pos:end="75:39">(<argument pos:start="73:13" pos:end="73:64"><expr pos:start="73:13" pos:end="73:64"><literal type="string" pos:start="73:13" pos:end="73:64">"+++ C+ mode TX descriptor %d %08x %08x %08x %08x\n"</literal></expr></argument>, <argument pos:start="73:67" pos:end="73:76"><expr pos:start="73:67" pos:end="73:76"><name pos:start="73:67" pos:end="73:76">descriptor</name></expr></argument>,

        <argument pos:start="75:9" pos:end="75:13"><expr pos:start="75:9" pos:end="75:13"><name pos:start="75:9" pos:end="75:13">txdw0</name></expr></argument>, <argument pos:start="75:16" pos:end="75:20"><expr pos:start="75:16" pos:end="75:20"><name pos:start="75:16" pos:end="75:20">txdw1</name></expr></argument>, <argument pos:start="75:23" pos:end="75:29"><expr pos:start="75:23" pos:end="75:29"><name pos:start="75:23" pos:end="75:29">txbufLO</name></expr></argument>, <argument pos:start="75:32" pos:end="75:38"><expr pos:start="75:32" pos:end="75:38"><name pos:start="75:32" pos:end="75:38">txbufHI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<comment type="block" pos:start="79:1" pos:end="79:23">/* w0 ownership flag */</comment>

<cpp:define pos:start="81:1" pos:end="81:25">#<cpp:directive pos:start="81:2" pos:end="81:7">define</cpp:directive> <cpp:macro pos:start="81:9" pos:end="81:17"><name pos:start="81:9" pos:end="81:17">CP_TX_OWN</name></cpp:macro> <cpp:value pos:start="81:19" pos:end="81:25">(1&lt;&lt;31)</cpp:value></cpp:define>

<comment type="block" pos:start="83:1" pos:end="83:25">/* w0 end of ring flag */</comment>

<cpp:define pos:start="85:1" pos:end="85:25">#<cpp:directive pos:start="85:2" pos:end="85:7">define</cpp:directive> <cpp:macro pos:start="85:9" pos:end="85:17"><name pos:start="85:9" pos:end="85:17">CP_TX_EOR</name></cpp:macro> <cpp:value pos:start="85:19" pos:end="85:25">(1&lt;&lt;30)</cpp:value></cpp:define>

<comment type="block" pos:start="87:1" pos:end="87:43">/* first segment of received packet flag */</comment>

<cpp:define pos:start="89:1" pos:end="89:24">#<cpp:directive pos:start="89:2" pos:end="89:7">define</cpp:directive> <cpp:macro pos:start="89:9" pos:end="89:16"><name pos:start="89:9" pos:end="89:16">CP_TX_FS</name></cpp:macro> <cpp:value pos:start="89:18" pos:end="89:24">(1&lt;&lt;29)</cpp:value></cpp:define>

<comment type="block" pos:start="91:1" pos:end="91:42">/* last segment of received packet flag */</comment>

<cpp:define pos:start="93:1" pos:end="93:24">#<cpp:directive pos:start="93:2" pos:end="93:7">define</cpp:directive> <cpp:macro pos:start="93:9" pos:end="93:16"><name pos:start="93:9" pos:end="93:16">CP_TX_LS</name></cpp:macro> <cpp:value pos:start="93:18" pos:end="93:24">(1&lt;&lt;28)</cpp:value></cpp:define>

<comment type="block" pos:start="95:1" pos:end="95:28">/* large send packet flag */</comment>

<cpp:define pos:start="97:1" pos:end="97:27">#<cpp:directive pos:start="97:2" pos:end="97:7">define</cpp:directive> <cpp:macro pos:start="97:9" pos:end="97:19"><name pos:start="97:9" pos:end="97:19">CP_TX_LGSEN</name></cpp:macro> <cpp:value pos:start="97:21" pos:end="97:27">(1&lt;&lt;27)</cpp:value></cpp:define>

<comment type="block" pos:start="99:1" pos:end="99:39">/* large send MSS mask, bits 16...25 */</comment>

<cpp:define pos:start="101:1" pos:end="101:44">#<cpp:directive pos:start="101:2" pos:end="101:7">define</cpp:directive> <cpp:macro pos:start="101:9" pos:end="101:28"><name pos:start="101:9" pos:end="101:28">CP_TC_LGSEN_MSS_MASK</name></cpp:macro> <cpp:value pos:start="101:30" pos:end="101:44">((1 &lt;&lt; 12) - 1)</cpp:value></cpp:define>



<comment type="block" pos:start="105:1" pos:end="105:30">/* IP checksum offload flag */</comment>

<cpp:define pos:start="107:1" pos:end="107:26">#<cpp:directive pos:start="107:2" pos:end="107:7">define</cpp:directive> <cpp:macro pos:start="107:9" pos:end="107:18"><name pos:start="107:9" pos:end="107:18">CP_TX_IPCS</name></cpp:macro> <cpp:value pos:start="107:20" pos:end="107:26">(1&lt;&lt;18)</cpp:value></cpp:define>

<comment type="block" pos:start="109:1" pos:end="109:31">/* UDP checksum offload flag */</comment>

<cpp:define pos:start="111:1" pos:end="111:27">#<cpp:directive pos:start="111:2" pos:end="111:7">define</cpp:directive> <cpp:macro pos:start="111:9" pos:end="111:19"><name pos:start="111:9" pos:end="111:19">CP_TX_UDPCS</name></cpp:macro> <cpp:value pos:start="111:21" pos:end="111:27">(1&lt;&lt;17)</cpp:value></cpp:define>

<comment type="block" pos:start="113:1" pos:end="113:31">/* TCP checksum offload flag */</comment>

<cpp:define pos:start="115:1" pos:end="115:27">#<cpp:directive pos:start="115:2" pos:end="115:7">define</cpp:directive> <cpp:macro pos:start="115:9" pos:end="115:19"><name pos:start="115:9" pos:end="115:19">CP_TX_TCPCS</name></cpp:macro> <cpp:value pos:start="115:21" pos:end="115:27">(1&lt;&lt;16)</cpp:value></cpp:define>



<comment type="block" pos:start="119:1" pos:end="119:34">/* w0 bits 0...15 : buffer size */</comment>

<cpp:define pos:start="121:1" pos:end="121:33">#<cpp:directive pos:start="121:2" pos:end="121:7">define</cpp:directive> <cpp:macro pos:start="121:9" pos:end="121:25"><name pos:start="121:9" pos:end="121:25">CP_TX_BUFFER_SIZE</name></cpp:macro> <cpp:value pos:start="121:27" pos:end="121:33">(1&lt;&lt;16)</cpp:value></cpp:define>

<cpp:define pos:start="123:1" pos:end="123:54">#<cpp:directive pos:start="123:2" pos:end="123:7">define</cpp:directive> <cpp:macro pos:start="123:9" pos:end="123:30"><name pos:start="123:9" pos:end="123:30">CP_TX_BUFFER_SIZE_MASK</name></cpp:macro> <cpp:value pos:start="123:32" pos:end="123:54">(CP_TX_BUFFER_SIZE - 1)</cpp:value></cpp:define>

<comment type="block" pos:start="125:1" pos:end="125:21">/* w1 add tag flag */</comment>

<cpp:define pos:start="127:1" pos:end="127:26">#<cpp:directive pos:start="127:2" pos:end="127:7">define</cpp:directive> <cpp:macro pos:start="127:9" pos:end="127:18"><name pos:start="127:9" pos:end="127:18">CP_TX_TAGC</name></cpp:macro> <cpp:value pos:start="127:20" pos:end="127:26">(1&lt;&lt;17)</cpp:value></cpp:define>

<comment type="block" pos:start="129:1" pos:end="129:44">/* w1 bits 0...15 : VLAN tag (big endian) */</comment>

<cpp:define pos:start="131:1" pos:end="131:41">#<cpp:directive pos:start="131:2" pos:end="131:7">define</cpp:directive> <cpp:macro pos:start="131:9" pos:end="131:27"><name pos:start="131:9" pos:end="131:27">CP_TX_VLAN_TAG_MASK</name></cpp:macro> <cpp:value pos:start="131:29" pos:end="131:41">((1&lt;&lt;16) - 1)</cpp:value></cpp:define>

<comment type="block" pos:start="133:1" pos:end="133:36">/* w2 low  32bit of Rx buffer ptr */</comment>

<comment type="block" pos:start="135:1" pos:end="135:36">/* w3 high 32bit of Rx buffer ptr */</comment>



<comment type="block" pos:start="139:1" pos:end="139:28">/* set after transmission */</comment>

<comment type="block" pos:start="141:1" pos:end="141:24">/* FIFO underrun flag */</comment>

<cpp:define pos:start="143:1" pos:end="143:32">#<cpp:directive pos:start="143:2" pos:end="143:7">define</cpp:directive> <cpp:macro pos:start="143:9" pos:end="143:24"><name pos:start="143:9" pos:end="143:24">CP_TX_STATUS_UNF</name></cpp:macro> <cpp:value pos:start="143:26" pos:end="143:32">(1&lt;&lt;25)</cpp:value></cpp:define>

<comment type="block" pos:start="145:1" pos:end="145:66">/* transmit error summary flag, valid if set any of three below */</comment>

<cpp:define pos:start="147:1" pos:end="147:32">#<cpp:directive pos:start="147:2" pos:end="147:7">define</cpp:directive> <cpp:macro pos:start="147:9" pos:end="147:24"><name pos:start="147:9" pos:end="147:24">CP_TX_STATUS_TES</name></cpp:macro> <cpp:value pos:start="147:26" pos:end="147:32">(1&lt;&lt;23)</cpp:value></cpp:define>

<comment type="block" pos:start="149:1" pos:end="149:34">/* out-of-window collision flag */</comment>

<cpp:define pos:start="151:1" pos:end="151:32">#<cpp:directive pos:start="151:2" pos:end="151:7">define</cpp:directive> <cpp:macro pos:start="151:9" pos:end="151:24"><name pos:start="151:9" pos:end="151:24">CP_TX_STATUS_OWC</name></cpp:macro> <cpp:value pos:start="151:26" pos:end="151:32">(1&lt;&lt;22)</cpp:value></cpp:define>

<comment type="block" pos:start="153:1" pos:end="153:23">/* link failure flag */</comment>

<cpp:define pos:start="155:1" pos:end="155:33">#<cpp:directive pos:start="155:2" pos:end="155:7">define</cpp:directive> <cpp:macro pos:start="155:9" pos:end="155:25"><name pos:start="155:9" pos:end="155:25">CP_TX_STATUS_LNKF</name></cpp:macro> <cpp:value pos:start="155:27" pos:end="155:33">(1&lt;&lt;21)</cpp:value></cpp:define>

<comment type="block" pos:start="157:1" pos:end="157:31">/* excessive collisions flag */</comment>

<cpp:define pos:start="159:1" pos:end="159:32">#<cpp:directive pos:start="159:2" pos:end="159:7">define</cpp:directive> <cpp:macro pos:start="159:9" pos:end="159:24"><name pos:start="159:9" pos:end="159:24">CP_TX_STATUS_EXC</name></cpp:macro> <cpp:value pos:start="159:26" pos:end="159:32">(1&lt;&lt;20)</cpp:value></cpp:define>



    <if_stmt pos:start="163:5" pos:end="171:5"><if pos:start="163:5" pos:end="171:5">if <condition pos:start="163:8" pos:end="163:29">(<expr pos:start="163:9" pos:end="163:28"><operator pos:start="163:9" pos:end="163:9">!</operator><operator pos:start="163:10" pos:end="163:10">(</operator><name pos:start="163:11" pos:end="163:15">txdw0</name> <operator pos:start="163:17" pos:end="163:17">&amp;</operator> <name pos:start="163:19" pos:end="163:27">CP_TX_OWN</name><operator pos:start="163:28" pos:end="163:28">)</operator></expr>)</condition>

    <block pos:start="165:5" pos:end="171:5">{<block_content pos:start="167:9" pos:end="169:18">

        <expr_stmt pos:start="167:9" pos:end="167:77"><expr pos:start="167:9" pos:end="167:76"><call pos:start="167:9" pos:end="167:76"><name pos:start="167:9" pos:end="167:15">DPRINTF</name><argument_list pos:start="167:16" pos:end="167:76">(<argument pos:start="167:17" pos:end="167:63"><expr pos:start="167:17" pos:end="167:63"><literal type="string" pos:start="167:17" pos:end="167:63">"C+ Tx mode : descriptor %d is owned by host\n"</literal></expr></argument>, <argument pos:start="167:66" pos:end="167:75"><expr pos:start="167:66" pos:end="167:75"><name pos:start="167:66" pos:end="167:75">descriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="169:9" pos:end="169:18">return <expr pos:start="169:16" pos:end="169:16"><literal type="number" pos:start="169:16" pos:end="169:16">0</literal></expr> ;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="175:5" pos:end="175:78"><expr pos:start="175:5" pos:end="175:77"><call pos:start="175:5" pos:end="175:77"><name pos:start="175:5" pos:end="175:11">DPRINTF</name><argument_list pos:start="175:12" pos:end="175:77">(<argument pos:start="175:13" pos:end="175:64"><expr pos:start="175:13" pos:end="175:64"><literal type="string" pos:start="175:13" pos:end="175:64">"+++ C+ Tx mode : transmitting from descriptor %d\n"</literal></expr></argument>, <argument pos:start="175:67" pos:end="175:76"><expr pos:start="175:67" pos:end="175:76"><name pos:start="175:67" pos:end="175:76">descriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="179:5" pos:end="193:5"><if pos:start="179:5" pos:end="193:5">if <condition pos:start="179:8" pos:end="179:25">(<expr pos:start="179:9" pos:end="179:24"><name pos:start="179:9" pos:end="179:13">txdw0</name> <operator pos:start="179:15" pos:end="179:15">&amp;</operator> <name pos:start="179:17" pos:end="179:24">CP_TX_FS</name></expr>)</condition>

    <block pos:start="181:5" pos:end="193:5">{<block_content pos:start="183:9" pos:end="191:37">

        <expr_stmt pos:start="183:9" pos:end="185:40"><expr pos:start="183:9" pos:end="185:39"><call pos:start="183:9" pos:end="185:39"><name pos:start="183:9" pos:end="183:15">DPRINTF</name><argument_list pos:start="183:16" pos:end="185:39">(<argument pos:start="183:17" pos:end="185:26"><expr pos:start="183:17" pos:end="185:26"><literal type="string" pos:start="183:17" pos:end="183:66">"+++ C+ Tx mode : descriptor %d is first segment "</literal>

            <literal type="string" pos:start="185:13" pos:end="185:26">"descriptor\n"</literal></expr></argument>, <argument pos:start="185:29" pos:end="185:38"><expr pos:start="185:29" pos:end="185:38"><name pos:start="185:29" pos:end="185:38">descriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="189:9" pos:end="189:42">/* reset internal buffer offset */</comment>

        <expr_stmt pos:start="191:9" pos:end="191:37"><expr pos:start="191:9" pos:end="191:36"><name pos:start="191:9" pos:end="191:32"><name pos:start="191:9" pos:end="191:9">s</name><operator pos:start="191:10" pos:end="191:11">-&gt;</operator><name pos:start="191:12" pos:end="191:32">cplus_txbuffer_offset</name></name> <operator pos:start="191:34" pos:end="191:34">=</operator> <literal type="number" pos:start="191:36" pos:end="191:36">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <decl_stmt pos:start="197:5" pos:end="197:48"><decl pos:start="197:5" pos:end="197:47"><type pos:start="197:5" pos:end="197:7"><name pos:start="197:5" pos:end="197:7">int</name></type> <name pos:start="197:9" pos:end="197:14">txsize</name> <init pos:start="197:16" pos:end="197:47">= <expr pos:start="197:18" pos:end="197:47"><name pos:start="197:18" pos:end="197:22">txdw0</name> <operator pos:start="197:24" pos:end="197:24">&amp;</operator> <name pos:start="197:26" pos:end="197:47">CP_TX_BUFFER_SIZE_MASK</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="199:5" pos:end="199:58"><decl pos:start="199:5" pos:end="199:57"><type pos:start="199:5" pos:end="199:14"><name pos:start="199:5" pos:end="199:14">dma_addr_t</name></type> <name pos:start="199:16" pos:end="199:22">tx_addr</name> <init pos:start="199:24" pos:end="199:57">= <expr pos:start="199:26" pos:end="199:57"><call pos:start="199:26" pos:end="199:57"><name pos:start="199:26" pos:end="199:39">rtl8139_addr64</name><argument_list pos:start="199:40" pos:end="199:57">(<argument pos:start="199:41" pos:end="199:47"><expr pos:start="199:41" pos:end="199:47"><name pos:start="199:41" pos:end="199:47">txbufLO</name></expr></argument>, <argument pos:start="199:50" pos:end="199:56"><expr pos:start="199:50" pos:end="199:56"><name pos:start="199:50" pos:end="199:56">txbufHI</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="203:5" pos:end="203:63">/* make sure we have enough space to assemble the packet */</comment>

    <if_stmt pos:start="205:5" pos:end="221:5"><if pos:start="205:5" pos:end="221:5">if <condition pos:start="205:8" pos:end="205:27">(<expr pos:start="205:9" pos:end="205:26"><operator pos:start="205:9" pos:end="205:9">!</operator><name pos:start="205:10" pos:end="205:26"><name pos:start="205:10" pos:end="205:10">s</name><operator pos:start="205:11" pos:end="205:12">-&gt;</operator><name pos:start="205:13" pos:end="205:26">cplus_txbuffer</name></name></expr>)</condition>

    <block pos:start="207:5" pos:end="221:5">{<block_content pos:start="209:9" pos:end="219:35">

        <expr_stmt pos:start="209:9" pos:end="209:50"><expr pos:start="209:9" pos:end="209:49"><name pos:start="209:9" pos:end="209:29"><name pos:start="209:9" pos:end="209:9">s</name><operator pos:start="209:10" pos:end="209:11">-&gt;</operator><name pos:start="209:12" pos:end="209:29">cplus_txbuffer_len</name></name> <operator pos:start="209:31" pos:end="209:31">=</operator> <name pos:start="209:33" pos:end="209:49">CP_TX_BUFFER_SIZE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="211:9" pos:end="211:60"><expr pos:start="211:9" pos:end="211:59"><name pos:start="211:9" pos:end="211:25"><name pos:start="211:9" pos:end="211:9">s</name><operator pos:start="211:10" pos:end="211:11">-&gt;</operator><name pos:start="211:12" pos:end="211:25">cplus_txbuffer</name></name> <operator pos:start="211:27" pos:end="211:27">=</operator> <call pos:start="211:29" pos:end="211:59"><name pos:start="211:29" pos:end="211:36">g_malloc</name><argument_list pos:start="211:37" pos:end="211:59">(<argument pos:start="211:38" pos:end="211:58"><expr pos:start="211:38" pos:end="211:58"><name pos:start="211:38" pos:end="211:58"><name pos:start="211:38" pos:end="211:38">s</name><operator pos:start="211:39" pos:end="211:40">-&gt;</operator><name pos:start="211:41" pos:end="211:58">cplus_txbuffer_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="213:9" pos:end="213:37"><expr pos:start="213:9" pos:end="213:36"><name pos:start="213:9" pos:end="213:32"><name pos:start="213:9" pos:end="213:9">s</name><operator pos:start="213:10" pos:end="213:11">-&gt;</operator><name pos:start="213:12" pos:end="213:32">cplus_txbuffer_offset</name></name> <operator pos:start="213:34" pos:end="213:34">=</operator> <literal type="number" pos:start="213:36" pos:end="213:36">0</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="217:9" pos:end="219:35"><expr pos:start="217:9" pos:end="219:34"><call pos:start="217:9" pos:end="219:34"><name pos:start="217:9" pos:end="217:15">DPRINTF</name><argument_list pos:start="217:16" pos:end="219:34">(<argument pos:start="217:17" pos:end="217:70"><expr pos:start="217:17" pos:end="217:70"><literal type="string" pos:start="217:17" pos:end="217:70">"+++ C+ mode transmission buffer allocated space %d\n"</literal></expr></argument>,

            <argument pos:start="219:13" pos:end="219:33"><expr pos:start="219:13" pos:end="219:33"><name pos:start="219:13" pos:end="219:33"><name pos:start="219:13" pos:end="219:13">s</name><operator pos:start="219:14" pos:end="219:15">-&gt;</operator><name pos:start="219:16" pos:end="219:33">cplus_txbuffer_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <while pos:start="225:5" pos:end="239:5">while <condition pos:start="225:11" pos:end="225:91">(<expr pos:start="225:12" pos:end="225:90"><name pos:start="225:12" pos:end="225:28"><name pos:start="225:12" pos:end="225:12">s</name><operator pos:start="225:13" pos:end="225:14">-&gt;</operator><name pos:start="225:15" pos:end="225:28">cplus_txbuffer</name></name> <operator pos:start="225:30" pos:end="225:31">&amp;&amp;</operator> <name pos:start="225:33" pos:end="225:56"><name pos:start="225:33" pos:end="225:33">s</name><operator pos:start="225:34" pos:end="225:35">-&gt;</operator><name pos:start="225:36" pos:end="225:56">cplus_txbuffer_offset</name></name> <operator pos:start="225:58" pos:end="225:58">+</operator> <name pos:start="225:60" pos:end="225:65">txsize</name> <operator pos:start="225:67" pos:end="225:68">&gt;=</operator> <name pos:start="225:70" pos:end="225:90"><name pos:start="225:70" pos:end="225:70">s</name><operator pos:start="225:71" pos:end="225:72">-&gt;</operator><name pos:start="225:73" pos:end="225:90">cplus_txbuffer_len</name></name></expr>)</condition>

    <block pos:start="227:5" pos:end="239:5">{<block_content pos:start="229:9" pos:end="237:35">

        <expr_stmt pos:start="229:9" pos:end="229:51"><expr pos:start="229:9" pos:end="229:50"><name pos:start="229:9" pos:end="229:29"><name pos:start="229:9" pos:end="229:9">s</name><operator pos:start="229:10" pos:end="229:11">-&gt;</operator><name pos:start="229:12" pos:end="229:29">cplus_txbuffer_len</name></name> <operator pos:start="229:31" pos:end="229:32">+=</operator> <name pos:start="229:34" pos:end="229:50">CP_TX_BUFFER_SIZE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="231:9" pos:end="231:80"><expr pos:start="231:9" pos:end="231:79"><name pos:start="231:9" pos:end="231:25"><name pos:start="231:9" pos:end="231:9">s</name><operator pos:start="231:10" pos:end="231:11">-&gt;</operator><name pos:start="231:12" pos:end="231:25">cplus_txbuffer</name></name> <operator pos:start="231:27" pos:end="231:27">=</operator> <call pos:start="231:29" pos:end="231:79"><name pos:start="231:29" pos:end="231:37">g_realloc</name><argument_list pos:start="231:38" pos:end="231:79">(<argument pos:start="231:39" pos:end="231:55"><expr pos:start="231:39" pos:end="231:55"><name pos:start="231:39" pos:end="231:55"><name pos:start="231:39" pos:end="231:39">s</name><operator pos:start="231:40" pos:end="231:41">-&gt;</operator><name pos:start="231:42" pos:end="231:55">cplus_txbuffer</name></name></expr></argument>, <argument pos:start="231:58" pos:end="231:78"><expr pos:start="231:58" pos:end="231:78"><name pos:start="231:58" pos:end="231:78"><name pos:start="231:58" pos:end="231:58">s</name><operator pos:start="231:59" pos:end="231:60">-&gt;</operator><name pos:start="231:61" pos:end="231:78">cplus_txbuffer_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="235:9" pos:end="237:35"><expr pos:start="235:9" pos:end="237:34"><call pos:start="235:9" pos:end="237:34"><name pos:start="235:9" pos:end="235:15">DPRINTF</name><argument_list pos:start="235:16" pos:end="237:34">(<argument pos:start="235:17" pos:end="235:71"><expr pos:start="235:17" pos:end="235:71"><literal type="string" pos:start="235:17" pos:end="235:71">"+++ C+ mode transmission buffer space changed to %d\n"</literal></expr></argument>,

            <argument pos:start="237:13" pos:end="237:33"><expr pos:start="237:13" pos:end="237:33"><name pos:start="237:13" pos:end="237:33"><name pos:start="237:13" pos:end="237:13">s</name><operator pos:start="237:14" pos:end="237:15">-&gt;</operator><name pos:start="237:16" pos:end="237:33">cplus_txbuffer_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="243:5" pos:end="267:5"><if pos:start="243:5" pos:end="267:5">if <condition pos:start="243:8" pos:end="243:27">(<expr pos:start="243:9" pos:end="243:26"><operator pos:start="243:9" pos:end="243:9">!</operator><name pos:start="243:10" pos:end="243:26"><name pos:start="243:10" pos:end="243:10">s</name><operator pos:start="243:11" pos:end="243:12">-&gt;</operator><name pos:start="243:13" pos:end="243:26">cplus_txbuffer</name></name></expr>)</condition>

    <block pos:start="245:5" pos:end="267:5">{<block_content pos:start="251:9" pos:end="265:17">

        <comment type="block" pos:start="247:9" pos:end="247:27">/* out of memory */</comment>



        <expr_stmt pos:start="251:9" pos:end="253:35"><expr pos:start="251:9" pos:end="253:34"><call pos:start="251:9" pos:end="253:34"><name pos:start="251:9" pos:end="251:15">DPRINTF</name><argument_list pos:start="251:16" pos:end="253:34">(<argument pos:start="251:17" pos:end="251:72"><expr pos:start="251:17" pos:end="251:72"><literal type="string" pos:start="251:17" pos:end="251:72">"+++ C+ mode transmiter failed to reallocate %d bytes\n"</literal></expr></argument>,

            <argument pos:start="253:13" pos:end="253:33"><expr pos:start="253:13" pos:end="253:33"><name pos:start="253:13" pos:end="253:33"><name pos:start="253:13" pos:end="253:13">s</name><operator pos:start="253:14" pos:end="253:15">-&gt;</operator><name pos:start="253:16" pos:end="253:33">cplus_txbuffer_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="257:9" pos:end="257:34">/* update tally counter */</comment>

        <expr_stmt pos:start="259:9" pos:end="259:34"><expr pos:start="259:9" pos:end="259:33"><operator pos:start="259:9" pos:end="259:10">++</operator><name pos:start="259:11" pos:end="259:33"><name pos:start="259:11" pos:end="259:11">s</name><operator pos:start="259:12" pos:end="259:13">-&gt;</operator><name pos:start="259:14" pos:end="259:27">tally_counters</name><operator pos:start="259:28" pos:end="259:28">.</operator><name pos:start="259:29" pos:end="259:33">TxERR</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="261:9" pos:end="261:34"><expr pos:start="261:9" pos:end="261:33"><operator pos:start="261:9" pos:end="261:10">++</operator><name pos:start="261:11" pos:end="261:33"><name pos:start="261:11" pos:end="261:11">s</name><operator pos:start="261:12" pos:end="261:13">-&gt;</operator><name pos:start="261:14" pos:end="261:27">tally_counters</name><operator pos:start="261:28" pos:end="261:28">.</operator><name pos:start="261:29" pos:end="261:33">TxAbt</name></name></expr>;</expr_stmt>



        <return pos:start="265:9" pos:end="265:17">return <expr pos:start="265:16" pos:end="265:16"><literal type="number" pos:start="265:16" pos:end="265:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="271:5" pos:end="271:40">/* append more data to the packet */</comment>



    <expr_stmt pos:start="275:5" pos:end="279:38"><expr pos:start="275:5" pos:end="279:37"><call pos:start="275:5" pos:end="279:37"><name pos:start="275:5" pos:end="275:11">DPRINTF</name><argument_list pos:start="275:12" pos:end="279:37">(<argument pos:start="275:13" pos:end="277:41"><expr pos:start="275:13" pos:end="277:41"><literal type="string" pos:start="275:13" pos:end="275:72">"+++ C+ mode transmit reading %d bytes from host memory at "</literal>

            <name pos:start="277:13" pos:end="277:24">DMA_ADDR_FMT</name><literal type="string" pos:start="277:25" pos:end="277:41">" to offset %d\n"</literal></expr></argument>, <argument pos:start="277:44" pos:end="277:49"><expr pos:start="277:44" pos:end="277:49"><name pos:start="277:44" pos:end="277:49">txsize</name></expr></argument>, <argument pos:start="277:52" pos:end="277:58"><expr pos:start="277:52" pos:end="277:58"><name pos:start="277:52" pos:end="277:58">tx_addr</name></expr></argument>,

            <argument pos:start="279:13" pos:end="279:36"><expr pos:start="279:13" pos:end="279:36"><name pos:start="279:13" pos:end="279:36"><name pos:start="279:13" pos:end="279:13">s</name><operator pos:start="279:14" pos:end="279:15">-&gt;</operator><name pos:start="279:16" pos:end="279:36">cplus_txbuffer_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="283:5" pos:end="285:71"><expr pos:start="283:5" pos:end="285:70"><call pos:start="283:5" pos:end="285:70"><name pos:start="283:5" pos:end="283:16">pci_dma_read</name><argument_list pos:start="283:17" pos:end="285:70">(<argument pos:start="283:18" pos:end="283:24"><expr pos:start="283:18" pos:end="283:24"><operator pos:start="283:18" pos:end="283:18">&amp;</operator><name pos:start="283:19" pos:end="283:24"><name pos:start="283:19" pos:end="283:19">s</name><operator pos:start="283:20" pos:end="283:21">-&gt;</operator><name pos:start="283:22" pos:end="283:24">dev</name></name></expr></argument>, <argument pos:start="283:27" pos:end="283:33"><expr pos:start="283:27" pos:end="283:33"><name pos:start="283:27" pos:end="283:33">tx_addr</name></expr></argument>,

                 <argument pos:start="285:18" pos:end="285:61"><expr pos:start="285:18" pos:end="285:61"><name pos:start="285:18" pos:end="285:34"><name pos:start="285:18" pos:end="285:18">s</name><operator pos:start="285:19" pos:end="285:20">-&gt;</operator><name pos:start="285:21" pos:end="285:34">cplus_txbuffer</name></name> <operator pos:start="285:36" pos:end="285:36">+</operator> <name pos:start="285:38" pos:end="285:61"><name pos:start="285:38" pos:end="285:38">s</name><operator pos:start="285:39" pos:end="285:40">-&gt;</operator><name pos:start="285:41" pos:end="285:61">cplus_txbuffer_offset</name></name></expr></argument>, <argument pos:start="285:64" pos:end="285:69"><expr pos:start="285:64" pos:end="285:69"><name pos:start="285:64" pos:end="285:69">txsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="287:5" pos:end="287:39"><expr pos:start="287:5" pos:end="287:38"><name pos:start="287:5" pos:end="287:28"><name pos:start="287:5" pos:end="287:5">s</name><operator pos:start="287:6" pos:end="287:7">-&gt;</operator><name pos:start="287:8" pos:end="287:28">cplus_txbuffer_offset</name></name> <operator pos:start="287:30" pos:end="287:31">+=</operator> <name pos:start="287:33" pos:end="287:38">txsize</name></expr>;</expr_stmt>



    <comment type="block" pos:start="291:5" pos:end="291:36">/* seek to next Rx descriptor */</comment>

    <if_stmt pos:start="293:5" pos:end="311:5"><if pos:start="293:5" pos:end="299:5">if <condition pos:start="293:8" pos:end="293:26">(<expr pos:start="293:9" pos:end="293:25"><name pos:start="293:9" pos:end="293:13">txdw0</name> <operator pos:start="293:15" pos:end="293:15">&amp;</operator> <name pos:start="293:17" pos:end="293:25">CP_TX_EOR</name></expr>)</condition>

    <block pos:start="295:5" pos:end="299:5">{<block_content pos:start="297:9" pos:end="297:31">

        <expr_stmt pos:start="297:9" pos:end="297:31"><expr pos:start="297:9" pos:end="297:30"><name pos:start="297:9" pos:end="297:26"><name pos:start="297:9" pos:end="297:9">s</name><operator pos:start="297:10" pos:end="297:11">-&gt;</operator><name pos:start="297:12" pos:end="297:26">currCPlusTxDesc</name></name> <operator pos:start="297:28" pos:end="297:28">=</operator> <literal type="number" pos:start="297:30" pos:end="297:30">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if>

    <else pos:start="301:5" pos:end="311:5">else

    <block pos:start="303:5" pos:end="311:5">{<block_content pos:start="305:9" pos:end="309:35">

        <expr_stmt pos:start="305:9" pos:end="305:29"><expr pos:start="305:9" pos:end="305:28"><operator pos:start="305:9" pos:end="305:10">++</operator><name pos:start="305:11" pos:end="305:28"><name pos:start="305:11" pos:end="305:11">s</name><operator pos:start="305:12" pos:end="305:13">-&gt;</operator><name pos:start="305:14" pos:end="305:28">currCPlusTxDesc</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="307:9" pos:end="309:35"><if pos:start="307:9" pos:end="309:35">if <condition pos:start="307:12" pos:end="307:37">(<expr pos:start="307:13" pos:end="307:36"><name pos:start="307:13" pos:end="307:30"><name pos:start="307:13" pos:end="307:13">s</name><operator pos:start="307:14" pos:end="307:15">-&gt;</operator><name pos:start="307:16" pos:end="307:30">currCPlusTxDesc</name></name> <operator pos:start="307:32" pos:end="307:33">&gt;=</operator> <literal type="number" pos:start="307:35" pos:end="307:36">64</literal></expr>)</condition><block type="pseudo" pos:start="309:13" pos:end="309:35"><block_content pos:start="309:13" pos:end="309:35">

            <expr_stmt pos:start="309:13" pos:end="309:35"><expr pos:start="309:13" pos:end="309:34"><name pos:start="309:13" pos:end="309:30"><name pos:start="309:13" pos:end="309:13">s</name><operator pos:start="309:14" pos:end="309:15">-&gt;</operator><name pos:start="309:16" pos:end="309:30">currCPlusTxDesc</name></name> <operator pos:start="309:32" pos:end="309:32">=</operator> <literal type="number" pos:start="309:34" pos:end="309:34">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="315:5" pos:end="315:38">/* transfer ownership to target */</comment>

    <expr_stmt pos:start="317:5" pos:end="317:24"><expr pos:start="317:5" pos:end="317:23"><name pos:start="317:5" pos:end="317:9">txdw0</name> <operator pos:start="317:11" pos:end="317:12">&amp;=</operator> <operator pos:start="317:14" pos:end="317:14">~</operator><name pos:start="317:15" pos:end="317:23">CP_RX_OWN</name></expr>;</expr_stmt>



    <comment type="block" pos:start="321:5" pos:end="321:36">/* reset error indicator bits */</comment>

    <expr_stmt pos:start="323:5" pos:end="323:31"><expr pos:start="323:5" pos:end="323:30"><name pos:start="323:5" pos:end="323:9">txdw0</name> <operator pos:start="323:11" pos:end="323:12">&amp;=</operator> <operator pos:start="323:14" pos:end="323:14">~</operator><name pos:start="323:15" pos:end="323:30">CP_TX_STATUS_UNF</name></expr>;</expr_stmt>

    <expr_stmt pos:start="325:5" pos:end="325:31"><expr pos:start="325:5" pos:end="325:30"><name pos:start="325:5" pos:end="325:9">txdw0</name> <operator pos:start="325:11" pos:end="325:12">&amp;=</operator> <operator pos:start="325:14" pos:end="325:14">~</operator><name pos:start="325:15" pos:end="325:30">CP_TX_STATUS_TES</name></expr>;</expr_stmt>

    <expr_stmt pos:start="327:5" pos:end="327:31"><expr pos:start="327:5" pos:end="327:30"><name pos:start="327:5" pos:end="327:9">txdw0</name> <operator pos:start="327:11" pos:end="327:12">&amp;=</operator> <operator pos:start="327:14" pos:end="327:14">~</operator><name pos:start="327:15" pos:end="327:30">CP_TX_STATUS_OWC</name></expr>;</expr_stmt>

    <expr_stmt pos:start="329:5" pos:end="329:32"><expr pos:start="329:5" pos:end="329:31"><name pos:start="329:5" pos:end="329:9">txdw0</name> <operator pos:start="329:11" pos:end="329:12">&amp;=</operator> <operator pos:start="329:14" pos:end="329:14">~</operator><name pos:start="329:15" pos:end="329:31">CP_TX_STATUS_LNKF</name></expr>;</expr_stmt>

    <expr_stmt pos:start="331:5" pos:end="331:31"><expr pos:start="331:5" pos:end="331:30"><name pos:start="331:5" pos:end="331:9">txdw0</name> <operator pos:start="331:11" pos:end="331:12">&amp;=</operator> <operator pos:start="331:14" pos:end="331:14">~</operator><name pos:start="331:15" pos:end="331:30">CP_TX_STATUS_EXC</name></expr>;</expr_stmt>



    <comment type="block" pos:start="335:5" pos:end="335:26">/* update ring data */</comment>

    <expr_stmt pos:start="337:5" pos:end="337:29"><expr pos:start="337:5" pos:end="337:28"><name pos:start="337:5" pos:end="337:7">val</name> <operator pos:start="337:9" pos:end="337:9">=</operator> <call pos:start="337:11" pos:end="337:28"><name pos:start="337:11" pos:end="337:21">cpu_to_le32</name><argument_list pos:start="337:22" pos:end="337:28">(<argument pos:start="337:23" pos:end="337:27"><expr pos:start="337:23" pos:end="337:27"><name pos:start="337:23" pos:end="337:27">txdw0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="339:5" pos:end="339:67"><expr pos:start="339:5" pos:end="339:66"><call pos:start="339:5" pos:end="339:66"><name pos:start="339:5" pos:end="339:17">pci_dma_write</name><argument_list pos:start="339:18" pos:end="339:66">(<argument pos:start="339:19" pos:end="339:25"><expr pos:start="339:19" pos:end="339:25"><operator pos:start="339:19" pos:end="339:19">&amp;</operator><name pos:start="339:20" pos:end="339:25"><name pos:start="339:20" pos:end="339:20">s</name><operator pos:start="339:21" pos:end="339:22">-&gt;</operator><name pos:start="339:23" pos:end="339:25">dev</name></name></expr></argument>, <argument pos:start="339:28" pos:end="339:45"><expr pos:start="339:28" pos:end="339:45"><name pos:start="339:28" pos:end="339:45">cplus_tx_ring_desc</name></expr></argument>, <argument pos:start="339:48" pos:end="339:62"><expr pos:start="339:48" pos:end="339:62"><operator pos:start="339:48" pos:end="339:48">(</operator><name pos:start="339:49" pos:end="339:55">uint8_t</name> <operator pos:start="339:57" pos:end="339:57">*</operator><operator pos:start="339:58" pos:end="339:58">)</operator><operator pos:start="339:59" pos:end="339:59">&amp;</operator><name pos:start="339:60" pos:end="339:62">val</name></expr></argument>, <argument pos:start="339:65" pos:end="339:65"><expr pos:start="339:65" pos:end="339:65"><literal type="number" pos:start="339:65" pos:end="339:65">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="343:5" pos:end="343:88">/* Now decide if descriptor being processed is holding the last segment of packet */</comment>

    <if_stmt pos:start="345:5" pos:end="919:72"><if pos:start="345:5" pos:end="919:72">if <condition pos:start="345:8" pos:end="345:25">(<expr pos:start="345:9" pos:end="345:24"><name pos:start="345:9" pos:end="345:13">txdw0</name> <operator pos:start="345:15" pos:end="345:15">&amp;</operator> <name pos:start="345:17" pos:end="345:24">CP_TX_LS</name></expr>)</condition>

    <block pos:start="347:5" pos:end="919:72">{<block_content pos:start="349:9" pos:end="919:72">

        <decl_stmt pos:start="349:9" pos:end="349:46"><decl pos:start="349:9" pos:end="349:45"><type pos:start="349:9" pos:end="349:15"><name pos:start="349:9" pos:end="349:15">uint8_t</name></type> <name pos:start="349:17" pos:end="349:45"><name pos:start="349:17" pos:end="349:34">dot1q_buffer_space</name><index pos:start="349:35" pos:end="349:45">[<expr pos:start="349:36" pos:end="349:44"><name pos:start="349:36" pos:end="349:44">VLAN_HLEN</name></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="351:9" pos:end="351:31"><decl pos:start="351:9" pos:end="351:30"><type pos:start="351:9" pos:end="351:18"><name pos:start="351:9" pos:end="351:16">uint16_t</name> <modifier pos:start="351:18" pos:end="351:18">*</modifier></type><name pos:start="351:19" pos:end="351:30">dot1q_buffer</name></decl>;</decl_stmt>



        <expr_stmt pos:start="355:9" pos:end="357:24"><expr pos:start="355:9" pos:end="357:23"><call pos:start="355:9" pos:end="357:23"><name pos:start="355:9" pos:end="355:15">DPRINTF</name><argument_list pos:start="355:16" pos:end="357:23">(<argument pos:start="355:17" pos:end="355:77"><expr pos:start="355:17" pos:end="355:77"><literal type="string" pos:start="355:17" pos:end="355:77">"+++ C+ Tx mode : descriptor %d is last segment descriptor\n"</literal></expr></argument>,

            <argument pos:start="357:13" pos:end="357:22"><expr pos:start="357:13" pos:end="357:22"><name pos:start="357:13" pos:end="357:22">descriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="361:9" pos:end="361:49">/* can transfer fully assembled packet */</comment>



        <decl_stmt pos:start="365:9" pos:end="365:51"><decl pos:start="365:9" pos:end="365:50"><type pos:start="365:9" pos:end="365:17"><name pos:start="365:9" pos:end="365:15">uint8_t</name> <modifier pos:start="365:17" pos:end="365:17">*</modifier></type><name pos:start="365:18" pos:end="365:29">saved_buffer</name>  <init pos:start="365:32" pos:end="365:50">= <expr pos:start="365:34" pos:end="365:50"><name pos:start="365:34" pos:end="365:50"><name pos:start="365:34" pos:end="365:34">s</name><operator pos:start="365:35" pos:end="365:36">-&gt;</operator><name pos:start="365:37" pos:end="365:50">cplus_txbuffer</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="367:9" pos:end="367:58"><decl pos:start="367:9" pos:end="367:57"><type pos:start="367:9" pos:end="367:11"><name pos:start="367:9" pos:end="367:11">int</name></type>      <name pos:start="367:18" pos:end="367:27">saved_size</name>    <init pos:start="367:32" pos:end="367:57">= <expr pos:start="367:34" pos:end="367:57"><name pos:start="367:34" pos:end="367:57"><name pos:start="367:34" pos:end="367:34">s</name><operator pos:start="367:35" pos:end="367:36">-&gt;</operator><name pos:start="367:37" pos:end="367:57">cplus_txbuffer_offset</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="369:9" pos:end="369:58"><decl pos:start="369:9" pos:end="369:57"><type pos:start="369:9" pos:end="369:11"><name pos:start="369:9" pos:end="369:11">int</name></type>      <name pos:start="369:18" pos:end="369:33">saved_buffer_len</name> <init pos:start="369:35" pos:end="369:57">= <expr pos:start="369:37" pos:end="369:57"><name pos:start="369:37" pos:end="369:57"><name pos:start="369:37" pos:end="369:37">s</name><operator pos:start="369:38" pos:end="369:39">-&gt;</operator><name pos:start="369:40" pos:end="369:57">cplus_txbuffer_len</name></name></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="373:9" pos:end="373:29">/* create vlan tag */</comment>

        <if_stmt pos:start="375:9" pos:end="919:72"><if pos:start="375:9" pos:end="919:72">if <condition pos:start="375:12" pos:end="375:31">(<expr pos:start="375:13" pos:end="375:30"><name pos:start="375:13" pos:end="375:17">txdw1</name> <operator pos:start="375:19" pos:end="375:19">&amp;</operator> <name pos:start="375:21" pos:end="375:30">CP_TX_TAGC</name></expr>)</condition> <block pos:start="375:33" pos:end="919:72">{<block_content pos:start="381:13" pos:end="919:72">

            <comment type="block" pos:start="377:13" pos:end="379:51">/* the vlan tag is in BE byte order in the descriptor

             * BE + le_to_cpu() + ~swap()~ = cpu */</comment>

            <macro pos:start="381:13" pos:end="919:72"><name pos:start="381:13" pos:end="381:19">DPRINTF</name><argument_list pos:start="381:20" pos:end="919:72">(<argument pos:start="381:21" pos:end="919:72"><literal type="string" pos:start="381:21" pos:end="381:64">"+++ C+ Tx mode : inserting vlan tag with ""</literal>tci: %u\n<literal type="string" pos:start="381:74" pos:end="417:21">",

                bswap16(txdw1 &amp; CP_TX_VLAN_TAG_MASK));



            dot1q_buffer = (uint16_t *) dot1q_buffer_space;

            dot1q_buffer[0] = cpu_to_be16(ETH_P_8021Q);

            /* BE + le_to_cpu() + ~cpu_to_le()~ = BE */

            dot1q_buffer[1] = cpu_to_le16(txdw1 &amp; CP_TX_VLAN_TAG_MASK);

        } else {

            dot1q_buffer = NULL;

        }



        /* reset the card space to protect from recursive call */

        s-&gt;cplus_txbuffer = NULL;

        s-&gt;cplus_txbuffer_offset = 0;

        s-&gt;cplus_txbuffer_len = 0;



        if (txdw0 &amp; (CP_TX_IPCS | CP_TX_UDPCS | CP_TX_TCPCS | CP_TX_LGSEN))

        {

            DPRINTF("</literal>+++ C+ mode offloaded task checksum\n<literal type="string" pos:start="417:59" pos:end="445:25">");



            /* ip packet header */

            ip_header *ip = NULL;

            int hlen = 0;

            uint8_t  ip_protocol = 0;

            uint16_t ip_data_len = 0;



            uint8_t *eth_payload_data = NULL;

            size_t   eth_payload_len  = 0;



            int proto = be16_to_cpu(*(uint16_t *)(saved_buffer + 12));

            if (proto == ETH_P_IP)

            {

                DPRINTF("</literal>+++ C+ mode has IP packet\n<literal type="string" pos:start="445:53" pos:end="463:29">");



                /* not aligned */

                eth_payload_data = saved_buffer + ETH_HLEN;

                eth_payload_len  = saved_size   - ETH_HLEN;



                ip = (ip_header*)eth_payload_data;



                if (IP_HEADER_VERSION(ip) != IP_HEADER_VERSION_4) {

                    DPRINTF("</literal>+++ C+ mode packet has bad IP version %d <literal type="string" pos:start="463:71" pos:end="465:25">"

                        "</literal>expected %d\n<literal type="string" pos:start="465:39" pos:end="493:29">", IP_HEADER_VERSION(ip),

                        IP_HEADER_VERSION_4);

                    ip = NULL;

                } else {

                    hlen = IP_HEADER_LENGTH(ip);

                    ip_protocol = ip-&gt;ip_p;

                    ip_data_len = be16_to_cpu(ip-&gt;ip_len) - hlen;

                }

            }



            if (ip)

            {

                if (txdw0 &amp; CP_TX_IPCS)

                {

                    DPRINTF("</literal>+++ C+ mode need IP checksum\n<literal type="string" pos:start="493:60" pos:end="513:33">");



                    if (hlen&lt;sizeof(ip_header) || hlen&gt;eth_payload_len) {/* min header length */

                        /* bad packet header len */

                        /* or packet too short */

                    }

                    else

                    {

                        ip-&gt;ip_sum = 0;

                        ip-&gt;ip_sum = ip_checksum(ip, hlen);

                        DPRINTF("</literal>+++ C+ mode IP header len=%d checksum=%<literal type="number" pos:start="513:73" pos:end="513:75">04x</literal>\n<literal type="string" pos:start="513:78" pos:end="531:29">",

                            hlen, ip-&gt;ip_sum);

                    }

                }



                if ((txdw0 &amp; CP_TX_LGSEN) &amp;&amp; ip_protocol == IP_PROTO_TCP)

                {

                    int large_send_mss = (txdw0 &gt;&gt; 16) &amp; CP_TC_LGSEN_MSS_MASK;



                    DPRINTF("</literal>+++ C+ mode offloaded task TSO MTU=%d IP data %d <literal type="string" pos:start="531:79" pos:end="533:25">"

                        "</literal>frame data %d specified MSS=%d\n<literal type="string" pos:start="533:58" pos:end="583:29">", ETH_MTU,

                        ip_data_len, saved_size - ETH_HLEN, large_send_mss);



                    int tcp_send_offset = 0;

                    int send_count = 0;



                    /* maximum IP header length is 60 bytes */

                    uint8_t saved_ip_header[60];



                    /* save IP header template; data area is used in tcp checksum calculation */

                    memcpy(saved_ip_header, eth_payload_data, hlen);



                    /* a placeholder for checksum calculation routine in tcp case */

                    uint8_t *data_to_checksum     = eth_payload_data + hlen - 12;

                    //                    size_t   data_to_checksum_len = eth_payload_len  - hlen + 12;



                    /* pointer to TCP header */

                    tcp_header *p_tcp_hdr = (tcp_header*)(eth_payload_data + hlen);



                    int tcp_hlen = TCP_HEADER_DATA_OFFSET(p_tcp_hdr);



                    /* ETH_MTU = ip header len + tcp header len + payload */

                    int tcp_data_len = ip_data_len - tcp_hlen;

                    int tcp_chunk_size = ETH_MTU - hlen - tcp_hlen;



                    DPRINTF("</literal>+++ C+ mode TSO IP data len %d TCP hlen %d TCP <literal type="string" pos:start="583:77" pos:end="585:25">"

                        "</literal>data len %d TCP chunk size %d\n<literal type="string" pos:start="585:57" pos:end="623:33">", ip_data_len,

                        tcp_hlen, tcp_data_len, tcp_chunk_size);



                    /* note the cycle below overwrites IP header data,

                       but restores it from saved_ip_header before sending packet */



                    int is_last_frame = 0;



                    for (tcp_send_offset = 0; tcp_send_offset &lt; tcp_data_len; tcp_send_offset += tcp_chunk_size)

                    {

                        uint16_t chunk_size = tcp_chunk_size;



                        /* check if this is the last frame */

                        if (tcp_send_offset + tcp_chunk_size &gt;= tcp_data_len)

                        {

                            is_last_frame = 1;

                            chunk_size = tcp_data_len - tcp_send_offset;

                        }



                        DPRINTF("</literal>+++ C+ mode TSO TCP seqno %<literal type="number" pos:start="623:61" pos:end="623:63">08x</literal>\n<literal type="string" pos:start="623:66" pos:end="637:33">",

                            be32_to_cpu(p_tcp_hdr-&gt;th_seq));



                        /* add 4 TCP pseudoheader fields */

                        /* copy IP source and destination fields */

                        memcpy(data_to_checksum, saved_ip_header + 12, 8);



                        DPRINTF("</literal>+++ C+ mode TSO calculating TCP checksum for <literal type="string" pos:start="637:79" pos:end="639:29">"

                            "</literal>packet with %d bytes data\n<literal type="string" pos:start="639:57" pos:end="685:33">", tcp_hlen +

                            chunk_size);



                        if (tcp_send_offset)

                        {

                            memcpy((uint8_t*)p_tcp_hdr + tcp_hlen, (uint8_t*)p_tcp_hdr + tcp_hlen + tcp_send_offset, chunk_size);

                        }



                        /* keep PUSH and FIN flags only for the last frame */

                        if (!is_last_frame)

                        {

                            TCP_HEADER_CLEAR_FLAGS(p_tcp_hdr, TCP_FLAG_PUSH|TCP_FLAG_FIN);

                        }



                        /* recalculate TCP checksum */

                        ip_pseudo_header *p_tcpip_hdr = (ip_pseudo_header *)data_to_checksum;

                        p_tcpip_hdr-&gt;zeros      = 0;

                        p_tcpip_hdr-&gt;ip_proto   = IP_PROTO_TCP;

                        p_tcpip_hdr-&gt;ip_payload = cpu_to_be16(tcp_hlen + chunk_size);



                        p_tcp_hdr-&gt;th_sum = 0;



                        int tcp_checksum = ip_checksum(data_to_checksum, tcp_hlen + chunk_size + 12);

                        DPRINTF("</literal>+++ C+ mode TSO TCP checksum %<literal type="number" pos:start="685:64" pos:end="685:66">04x</literal>\n<literal type="string" pos:start="685:69" pos:end="717:33">",

                            tcp_checksum);



                        p_tcp_hdr-&gt;th_sum = tcp_checksum;



                        /* restore IP header */

                        memcpy(eth_payload_data, saved_ip_header, hlen);



                        /* set IP data length and recalculate IP checksum */

                        ip-&gt;ip_len = cpu_to_be16(hlen + tcp_hlen + chunk_size);



                        /* increment IP id for subsequent frames */

                        ip-&gt;ip_id = cpu_to_be16(tcp_send_offset/tcp_chunk_size + be16_to_cpu(ip-&gt;ip_id));



                        ip-&gt;ip_sum = 0;

                        ip-&gt;ip_sum = ip_checksum(eth_payload_data, hlen);

                        DPRINTF("</literal>+++ C+ mode TSO IP header len=%d <literal type="string" pos:start="717:67" pos:end="719:29">"

                            "</literal>checksum=%<literal type="number" pos:start="719:40" pos:end="719:42">04x</literal>\n<literal type="string" pos:start="719:45" pos:end="725:33">", hlen, ip-&gt;ip_sum);



                        int tso_send_size = ETH_HLEN + hlen + tcp_hlen + chunk_size;

                        DPRINTF("</literal>+++ C+ mode TSO transferring packet size <literal type="string" pos:start="725:75" pos:end="727:29">"

                            "</literal>%d\n<literal type="string" pos:start="727:34" pos:end="755:29">", tso_send_size);

                        rtl8139_transfer_frame(s, saved_buffer, tso_send_size,

                            0, (uint8_t *) dot1q_buffer);



                        /* add transferred count to TCP sequence number */

                        p_tcp_hdr-&gt;th_seq = cpu_to_be32(chunk_size + be32_to_cpu(p_tcp_hdr-&gt;th_seq));

                        ++send_count;

                    }



                    /* Stop sending this frame */

                    saved_size = 0;

                }

                else if (txdw0 &amp; (CP_TX_TCPCS|CP_TX_UDPCS))

                {

                    DPRINTF("</literal>+++ C+ mode need TCP or UDP checksum\n<literal type="string" pos:start="755:68" pos:end="785:33">");



                    /* maximum IP header length is 60 bytes */

                    uint8_t saved_ip_header[60];

                    memcpy(saved_ip_header, eth_payload_data, hlen);



                    uint8_t *data_to_checksum     = eth_payload_data + hlen - 12;

                    //                    size_t   data_to_checksum_len = eth_payload_len  - hlen + 12;



                    /* add 4 TCP pseudoheader fields */

                    /* copy IP source and destination fields */

                    memcpy(data_to_checksum, saved_ip_header + 12, 8);



                    if ((txdw0 &amp; CP_TX_TCPCS) &amp;&amp; ip_protocol == IP_PROTO_TCP)

                    {

                        DPRINTF("</literal>+++ C+ mode calculating TCP checksum for <literal type="string" pos:start="785:75" pos:end="787:29">"

                            "</literal>packet with %d bytes data\n<literal type="string" pos:start="787:57" pos:end="811:33">", ip_data_len);



                        ip_pseudo_header *p_tcpip_hdr = (ip_pseudo_header *)data_to_checksum;

                        p_tcpip_hdr-&gt;zeros      = 0;

                        p_tcpip_hdr-&gt;ip_proto   = IP_PROTO_TCP;

                        p_tcpip_hdr-&gt;ip_payload = cpu_to_be16(ip_data_len);



                        tcp_header* p_tcp_hdr = (tcp_header *) (data_to_checksum+12);



                        p_tcp_hdr-&gt;th_sum = 0;



                        int tcp_checksum = ip_checksum(data_to_checksum, ip_data_len + 12);

                        DPRINTF("</literal>+++ C+ mode TCP checksum %<literal type="number" pos:start="811:60" pos:end="811:62">04x</literal>\n<literal type="string" pos:start="811:65" pos:end="825:33">",

                            tcp_checksum);



                        p_tcp_hdr-&gt;th_sum = tcp_checksum;

                    }

                    else if ((txdw0 &amp; CP_TX_UDPCS) &amp;&amp; ip_protocol == IP_PROTO_UDP)

                    {

                        DPRINTF("</literal>+++ C+ mode calculating UDP checksum for <literal type="string" pos:start="825:75" pos:end="827:29">"

                            "</literal>packet with %d bytes data\n<literal type="string" pos:start="827:57" pos:end="851:33">", ip_data_len);



                        ip_pseudo_header *p_udpip_hdr = (ip_pseudo_header *)data_to_checksum;

                        p_udpip_hdr-&gt;zeros      = 0;

                        p_udpip_hdr-&gt;ip_proto   = IP_PROTO_UDP;

                        p_udpip_hdr-&gt;ip_payload = cpu_to_be16(ip_data_len);



                        udp_header *p_udp_hdr = (udp_header *) (data_to_checksum+12);



                        p_udp_hdr-&gt;uh_sum = 0;



                        int udp_checksum = ip_checksum(data_to_checksum, ip_data_len + 12);

                        DPRINTF("</literal>+++ C+ mode UDP checksum %<literal type="number" pos:start="851:60" pos:end="851:62">04x</literal>\n<literal type="string" pos:start="851:65" pos:end="881:17">",

                            udp_checksum);



                        p_udp_hdr-&gt;uh_sum = udp_checksum;

                    }



                    /* restore IP header */

                    memcpy(eth_payload_data, saved_ip_header, hlen);

                }

            }

        }



        /* update tally counter */

        ++s-&gt;tally_counters.TxOk;



        DPRINTF("</literal>+++ C+ mode transmitting %d bytes packet\n<literal type="string" pos:start="881:60" pos:end="919:17">", saved_size);



        rtl8139_transfer_frame(s, saved_buffer, saved_size, 1,

            (uint8_t *) dot1q_buffer);



        /* restore card space if there was no recursion and reset offset */

        if (!s-&gt;cplus_txbuffer)

        {

            s-&gt;cplus_txbuffer        = saved_buffer;

            s-&gt;cplus_txbuffer_len    = saved_buffer_len;

            s-&gt;cplus_txbuffer_offset = 0;

        }

        else

        {

            g_free(saved_buffer);

        }

    }

    else

    {

        DPRINTF("</literal>+++ C+ mode transmission continue to next descriptor\n<literal type="string" pos:start="919:72" pos:end="919:72">"</literal></argument></argument_list></macro></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function>);

    }



    return 1;

}
</unit>
