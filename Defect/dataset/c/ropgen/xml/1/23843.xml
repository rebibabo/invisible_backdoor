<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/23843.c" pos:tabs="8"><function pos:start="1:1" pos:end="61:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:23">av_lockmgr_register</name><parameter_list pos:start="1:24" pos:end="1:66">(<parameter pos:start="1:25" pos:end="1:65"><function_decl pos:start="1:25" pos:end="1:65"><type pos:start="1:25" pos:end="1:27"><name pos:start="1:25" pos:end="1:27">int</name></type> (<modifier pos:start="1:30" pos:end="1:30">*</modifier><name pos:start="1:31" pos:end="1:32">cb</name>)<parameter_list pos:start="1:34" pos:end="1:65">(<parameter pos:start="1:35" pos:end="1:46"><decl pos:start="1:35" pos:end="1:46"><type pos:start="1:35" pos:end="1:46"><name pos:start="1:35" pos:end="1:38">void</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier><modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:46">mutex</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:64"><decl pos:start="1:49" pos:end="1:64"><type pos:start="1:49" pos:end="1:64"><name pos:start="1:49" pos:end="1:61"><name pos:start="1:49" pos:end="1:52">enum</name> <name pos:start="1:54" pos:end="1:61">AVLockOp</name></name></type> <name pos:start="1:63" pos:end="1:64">op</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="61:1">{<block_content pos:start="5:5" pos:end="59:13">

    <if_stmt pos:start="5:5" pos:end="21:5"><if pos:start="5:5" pos:end="21:5">if <condition pos:start="5:8" pos:end="5:19">(<expr pos:start="5:9" pos:end="5:18"><name pos:start="5:9" pos:end="5:18">lockmgr_cb</name></expr>)</condition> <block pos:start="5:21" pos:end="21:5">{<block_content pos:start="11:9" pos:end="19:30">

        <comment type="line" pos:start="7:9" pos:end="7:68">// There is no good way to rollback a failure to destroy the</comment>

        <comment type="line" pos:start="9:9" pos:end="9:40">// mutex, so we ignore failures.</comment>

        <expr_stmt pos:start="11:9" pos:end="11:53"><expr pos:start="11:9" pos:end="11:52"><call pos:start="11:9" pos:end="11:52"><name pos:start="11:9" pos:end="11:18">lockmgr_cb</name><argument_list pos:start="11:19" pos:end="11:52">(<argument pos:start="11:20" pos:end="11:31"><expr pos:start="11:20" pos:end="11:31"><operator pos:start="11:20" pos:end="11:20">&amp;</operator><name pos:start="11:21" pos:end="11:31">codec_mutex</name></expr></argument>,    <argument pos:start="11:37" pos:end="11:51"><expr pos:start="11:37" pos:end="11:51"><name pos:start="11:37" pos:end="11:51">AV_LOCK_DESTROY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="13:9" pos:end="13:53"><expr pos:start="13:9" pos:end="13:52"><call pos:start="13:9" pos:end="13:52"><name pos:start="13:9" pos:end="13:18">lockmgr_cb</name><argument_list pos:start="13:19" pos:end="13:52">(<argument pos:start="13:20" pos:end="13:34"><expr pos:start="13:20" pos:end="13:34"><operator pos:start="13:20" pos:end="13:20">&amp;</operator><name pos:start="13:21" pos:end="13:34">avformat_mutex</name></expr></argument>, <argument pos:start="13:37" pos:end="13:51"><expr pos:start="13:37" pos:end="13:51"><name pos:start="13:37" pos:end="13:51">AV_LOCK_DESTROY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="15:9" pos:end="15:30"><expr pos:start="15:9" pos:end="15:29"><name pos:start="15:9" pos:end="15:18">lockmgr_cb</name>     <operator pos:start="15:24" pos:end="15:24">=</operator> <name pos:start="15:26" pos:end="15:29">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="17:9" pos:end="17:30"><expr pos:start="17:9" pos:end="17:29"><name pos:start="17:9" pos:end="17:19">codec_mutex</name>    <operator pos:start="17:24" pos:end="17:24">=</operator> <name pos:start="17:26" pos:end="17:29">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:30"><expr pos:start="19:9" pos:end="19:29"><name pos:start="19:9" pos:end="19:22">avformat_mutex</name> <operator pos:start="19:24" pos:end="19:24">=</operator> <name pos:start="19:26" pos:end="19:29">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="25:5" pos:end="55:5"><if pos:start="25:5" pos:end="55:5">if <condition pos:start="25:8" pos:end="25:11">(<expr pos:start="25:9" pos:end="25:10"><name pos:start="25:9" pos:end="25:10">cb</name></expr>)</condition> <block pos:start="25:13" pos:end="55:5">{<block_content pos:start="27:9" pos:end="53:44">

        <decl_stmt pos:start="27:9" pos:end="27:40"><decl pos:start="27:9" pos:end="27:39"><type pos:start="27:9" pos:end="27:14"><name pos:start="27:9" pos:end="27:12">void</name> <modifier pos:start="27:14" pos:end="27:14">*</modifier></type><name pos:start="27:15" pos:end="27:29">new_codec_mutex</name>    <init pos:start="27:34" pos:end="27:39">= <expr pos:start="27:36" pos:end="27:39"><name pos:start="27:36" pos:end="27:39">NULL</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="29:9" pos:end="29:40"><decl pos:start="29:9" pos:end="29:39"><type pos:start="29:9" pos:end="29:14"><name pos:start="29:9" pos:end="29:12">void</name> <modifier pos:start="29:14" pos:end="29:14">*</modifier></type><name pos:start="29:15" pos:end="29:32">new_avformat_mutex</name> <init pos:start="29:34" pos:end="29:39">= <expr pos:start="29:36" pos:end="29:39"><name pos:start="29:36" pos:end="29:39">NULL</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="31:9" pos:end="31:16"><decl pos:start="31:9" pos:end="31:15"><type pos:start="31:9" pos:end="31:11"><name pos:start="31:9" pos:end="31:11">int</name></type> <name pos:start="31:13" pos:end="31:15">err</name></decl>;</decl_stmt>

        <if_stmt pos:start="33:9" pos:end="37:9"><if pos:start="33:9" pos:end="37:9">if <condition pos:start="33:12" pos:end="33:55">(<expr pos:start="33:13" pos:end="33:54"><name pos:start="33:13" pos:end="33:15">err</name> <operator pos:start="33:17" pos:end="33:17">=</operator> <call pos:start="33:19" pos:end="33:54"><name pos:start="33:19" pos:end="33:20">cb</name><argument_list pos:start="33:21" pos:end="33:54">(<argument pos:start="33:22" pos:end="33:37"><expr pos:start="33:22" pos:end="33:37"><operator pos:start="33:22" pos:end="33:22">&amp;</operator><name pos:start="33:23" pos:end="33:37">new_codec_mutex</name></expr></argument>, <argument pos:start="33:40" pos:end="33:53"><expr pos:start="33:40" pos:end="33:53"><name pos:start="33:40" pos:end="33:53">AV_LOCK_CREATE</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="33:57" pos:end="37:9">{<block_content pos:start="35:13" pos:end="35:51">

            <return pos:start="35:13" pos:end="35:51">return <expr pos:start="35:20" pos:end="35:50"><ternary pos:start="35:20" pos:end="35:50"><condition pos:start="35:20" pos:end="35:28"><expr pos:start="35:20" pos:end="35:26"><name pos:start="35:20" pos:end="35:22">err</name> <operator pos:start="35:24" pos:end="35:24">&gt;</operator> <literal type="number" pos:start="35:26" pos:end="35:26">0</literal></expr> ?</condition><then pos:start="35:30" pos:end="35:44"> <expr pos:start="35:30" pos:end="35:44"><name pos:start="35:30" pos:end="35:44">AVERROR_UNKNOWN</name></expr> </then><else pos:start="35:46" pos:end="35:50">: <expr pos:start="35:48" pos:end="35:50"><name pos:start="35:48" pos:end="35:50">err</name></expr></else></ternary></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="39:9" pos:end="47:9"><if pos:start="39:9" pos:end="47:9">if <condition pos:start="39:12" pos:end="39:58">(<expr pos:start="39:13" pos:end="39:57"><name pos:start="39:13" pos:end="39:15">err</name> <operator pos:start="39:17" pos:end="39:17">=</operator> <call pos:start="39:19" pos:end="39:57"><name pos:start="39:19" pos:end="39:20">cb</name><argument_list pos:start="39:21" pos:end="39:57">(<argument pos:start="39:22" pos:end="39:40"><expr pos:start="39:22" pos:end="39:40"><operator pos:start="39:22" pos:end="39:22">&amp;</operator><name pos:start="39:23" pos:end="39:40">new_avformat_mutex</name></expr></argument>, <argument pos:start="39:43" pos:end="39:56"><expr pos:start="39:43" pos:end="39:56"><name pos:start="39:43" pos:end="39:56">AV_LOCK_CREATE</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="39:60" pos:end="47:9">{<block_content pos:start="43:13" pos:end="45:51">

            <comment type="line" pos:start="41:13" pos:end="41:66">// Ignore failures to destroy the newly created mutex.</comment>

            <expr_stmt pos:start="43:13" pos:end="43:50"><expr pos:start="43:13" pos:end="43:49"><call pos:start="43:13" pos:end="43:49"><name pos:start="43:13" pos:end="43:14">cb</name><argument_list pos:start="43:15" pos:end="43:49">(<argument pos:start="43:16" pos:end="43:31"><expr pos:start="43:16" pos:end="43:31"><operator pos:start="43:16" pos:end="43:16">&amp;</operator><name pos:start="43:17" pos:end="43:31">new_codec_mutex</name></expr></argument>, <argument pos:start="43:34" pos:end="43:48"><expr pos:start="43:34" pos:end="43:48"><name pos:start="43:34" pos:end="43:48">AV_LOCK_DESTROY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="45:13" pos:end="45:51">return <expr pos:start="45:20" pos:end="45:50"><ternary pos:start="45:20" pos:end="45:50"><condition pos:start="45:20" pos:end="45:28"><expr pos:start="45:20" pos:end="45:26"><name pos:start="45:20" pos:end="45:22">err</name> <operator pos:start="45:24" pos:end="45:24">&gt;</operator> <literal type="number" pos:start="45:26" pos:end="45:26">0</literal></expr> ?</condition><then pos:start="45:30" pos:end="45:44"> <expr pos:start="45:30" pos:end="45:44"><name pos:start="45:30" pos:end="45:44">AVERROR_UNKNOWN</name></expr> </then><else pos:start="45:46" pos:end="45:50">: <expr pos:start="45:48" pos:end="45:50"><name pos:start="45:48" pos:end="45:50">err</name></expr></else></ternary></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:28"><expr pos:start="49:9" pos:end="49:27"><name pos:start="49:9" pos:end="49:18">lockmgr_cb</name>     <operator pos:start="49:24" pos:end="49:24">=</operator> <name pos:start="49:26" pos:end="49:27">cb</name></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:41"><expr pos:start="51:9" pos:end="51:40"><name pos:start="51:9" pos:end="51:19">codec_mutex</name>    <operator pos:start="51:24" pos:end="51:24">=</operator> <name pos:start="51:26" pos:end="51:40">new_codec_mutex</name></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:44"><expr pos:start="53:9" pos:end="53:43"><name pos:start="53:9" pos:end="53:22">avformat_mutex</name> <operator pos:start="53:24" pos:end="53:24">=</operator> <name pos:start="53:26" pos:end="53:43">new_avformat_mutex</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="59:5" pos:end="59:13">return <expr pos:start="59:12" pos:end="59:12"><literal type="number" pos:start="59:12" pos:end="59:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
