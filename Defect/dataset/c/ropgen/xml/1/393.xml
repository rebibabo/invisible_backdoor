<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/393.c" pos:tabs="8"><function pos:start="1:1" pos:end="101:1"><type pos:start="1:1" pos:end="1:8"><name pos:start="1:1" pos:end="1:8">uint64_t</name></type> <name pos:start="1:10" pos:end="1:30">pc_dimm_get_free_addr</name><parameter_list pos:start="1:31" pos:end="7:44">(<parameter pos:start="1:32" pos:end="1:59"><decl pos:start="1:32" pos:end="1:59"><type pos:start="1:32" pos:end="1:59"><name pos:start="1:32" pos:end="1:39">uint64_t</name></type> <name pos:start="1:41" pos:end="1:59">address_space_start</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:58"><decl pos:start="3:32" pos:end="3:58"><type pos:start="3:32" pos:end="3:58"><name pos:start="3:32" pos:end="3:39">uint64_t</name></type> <name pos:start="3:41" pos:end="3:58">address_space_size</name></decl></parameter>,

                               <parameter pos:start="5:32" pos:end="5:45"><decl pos:start="5:32" pos:end="5:45"><type pos:start="5:32" pos:end="5:45"><name pos:start="5:32" pos:end="5:39">uint64_t</name> <modifier pos:start="5:41" pos:end="5:41">*</modifier></type><name pos:start="5:42" pos:end="5:45">hint</name></decl></parameter>, <parameter pos:start="5:48" pos:end="5:60"><decl pos:start="5:48" pos:end="5:60"><type pos:start="5:48" pos:end="5:60"><name pos:start="5:48" pos:end="5:55">uint64_t</name></type> <name pos:start="5:57" pos:end="5:60">size</name></decl></parameter>,

                               <parameter pos:start="7:32" pos:end="7:43"><decl pos:start="7:32" pos:end="7:43"><type pos:start="7:32" pos:end="7:43"><name pos:start="7:32" pos:end="7:36">Error</name> <modifier pos:start="7:38" pos:end="7:38">*</modifier><modifier pos:start="7:39" pos:end="7:39">*</modifier></type><name pos:start="7:40" pos:end="7:43">errp</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="101:1">{<block_content pos:start="11:5" pos:end="99:15">

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:10">GSList</name> <modifier pos:start="11:12" pos:end="11:12">*</modifier></type><name pos:start="11:13" pos:end="11:16">list</name> <init pos:start="11:18" pos:end="11:23">= <expr pos:start="11:20" pos:end="11:23"><name pos:start="11:20" pos:end="11:23">NULL</name></expr></init></decl>, <decl pos:start="11:26" pos:end="11:30"><type ref="prev" pos:start="11:5" pos:end="11:12"><modifier pos:start="11:26" pos:end="11:26">*</modifier></type><name pos:start="11:27" pos:end="11:30">item</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:31"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:21">new_addr</name></decl>, <decl pos:start="13:24" pos:end="13:30"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:24" pos:end="13:26">ret</name> <init pos:start="13:28" pos:end="13:30">= <expr pos:start="13:30" pos:end="13:30"><literal type="number" pos:start="13:30" pos:end="13:30">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:74"><decl pos:start="15:5" pos:end="15:73"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint64_t</name></type> <name pos:start="15:14" pos:end="15:30">address_space_end</name> <init pos:start="15:32" pos:end="15:73">= <expr pos:start="15:34" pos:end="15:73"><name pos:start="15:34" pos:end="15:52">address_space_start</name> <operator pos:start="15:54" pos:end="15:54">+</operator> <name pos:start="15:56" pos:end="15:73">address_space_size</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:51"><expr pos:start="19:5" pos:end="19:50"><call pos:start="19:5" pos:end="19:50"><name pos:start="19:5" pos:end="19:10">assert</name><argument_list pos:start="19:11" pos:end="19:50">(<argument pos:start="19:12" pos:end="19:49"><expr pos:start="19:12" pos:end="19:49"><name pos:start="19:12" pos:end="19:28">address_space_end</name> <operator pos:start="19:30" pos:end="19:30">&gt;</operator> <name pos:start="19:32" pos:end="19:49">address_space_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:72"><expr pos:start="21:5" pos:end="21:71"><call pos:start="21:5" pos:end="21:71"><name pos:start="21:5" pos:end="21:24">object_child_foreach</name><argument_list pos:start="21:25" pos:end="21:71">(<argument pos:start="21:26" pos:end="21:43"><expr pos:start="21:26" pos:end="21:43"><call pos:start="21:26" pos:end="21:43"><name pos:start="21:26" pos:end="21:41">qdev_get_machine</name><argument_list pos:start="21:42" pos:end="21:43">()</argument_list></call></expr></argument>, <argument pos:start="21:46" pos:end="21:63"><expr pos:start="21:46" pos:end="21:63"><name pos:start="21:46" pos:end="21:63">pc_dimm_built_list</name></expr></argument>, <argument pos:start="21:66" pos:end="21:70"><expr pos:start="21:66" pos:end="21:70"><operator pos:start="21:66" pos:end="21:66">&amp;</operator><name pos:start="21:67" pos:end="21:70">list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="25:5" pos:end="33:5"><if pos:start="25:5" pos:end="29:5">if <condition pos:start="25:8" pos:end="25:13">(<expr pos:start="25:9" pos:end="25:12"><name pos:start="25:9" pos:end="25:12">hint</name></expr>)</condition> <block pos:start="25:15" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:25">

        <expr_stmt pos:start="27:9" pos:end="27:25"><expr pos:start="27:9" pos:end="27:24"><name pos:start="27:9" pos:end="27:16">new_addr</name> <operator pos:start="27:18" pos:end="27:18">=</operator> <operator pos:start="27:20" pos:end="27:20">*</operator><name pos:start="27:21" pos:end="27:24">hint</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="29:7" pos:end="33:5">else <block pos:start="29:12" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:39">

        <expr_stmt pos:start="31:9" pos:end="31:39"><expr pos:start="31:9" pos:end="31:38"><name pos:start="31:9" pos:end="31:16">new_addr</name> <operator pos:start="31:18" pos:end="31:18">=</operator> <name pos:start="31:20" pos:end="31:38">address_space_start</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="37:5" pos:end="37:51">/* find address range that will fit new DIMM */</comment>

    <for pos:start="39:5" pos:end="73:5">for <control pos:start="39:9" pos:end="39:54">(<init pos:start="39:10" pos:end="39:21"><expr pos:start="39:10" pos:end="39:20"><name pos:start="39:10" pos:end="39:13">item</name> <operator pos:start="39:15" pos:end="39:15">=</operator> <name pos:start="39:17" pos:end="39:20">list</name></expr>;</init> <condition pos:start="39:23" pos:end="39:27"><expr pos:start="39:23" pos:end="39:26"><name pos:start="39:23" pos:end="39:26">item</name></expr>;</condition> <incr pos:start="39:29" pos:end="39:53"><expr pos:start="39:29" pos:end="39:53"><name pos:start="39:29" pos:end="39:32">item</name> <operator pos:start="39:34" pos:end="39:34">=</operator> <call pos:start="39:36" pos:end="39:53"><name pos:start="39:36" pos:end="39:47">g_slist_next</name><argument_list pos:start="39:48" pos:end="39:53">(<argument pos:start="39:49" pos:end="39:52"><expr pos:start="39:49" pos:end="39:52"><name pos:start="39:49" pos:end="39:52">item</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block pos:start="39:56" pos:end="73:5">{<block_content pos:start="41:9" pos:end="71:9">

        <decl_stmt pos:start="41:9" pos:end="41:40"><decl pos:start="41:9" pos:end="41:39"><type pos:start="41:9" pos:end="41:22"><name pos:start="41:9" pos:end="41:20">PCDIMMDevice</name> <modifier pos:start="41:22" pos:end="41:22">*</modifier></type><name pos:start="41:23" pos:end="41:26">dimm</name> <init pos:start="41:28" pos:end="41:39">= <expr pos:start="41:30" pos:end="41:39"><name pos:start="41:30" pos:end="41:39"><name pos:start="41:30" pos:end="41:33">item</name><operator pos:start="41:34" pos:end="41:35">-&gt;</operator><name pos:start="41:36" pos:end="41:39">data</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="43:9" pos:end="47:59"><decl pos:start="43:9" pos:end="47:58"><type pos:start="43:9" pos:end="43:16"><name pos:start="43:9" pos:end="43:16">uint64_t</name></type> <name pos:start="43:18" pos:end="43:26">dimm_size</name> <init pos:start="43:28" pos:end="47:58">= <expr pos:start="43:30" pos:end="47:58"><call pos:start="43:30" pos:end="47:58"><name pos:start="43:30" pos:end="43:52">object_property_get_int</name><argument_list pos:start="43:53" pos:end="47:58">(<argument pos:start="43:54" pos:end="43:65"><expr pos:start="43:54" pos:end="43:65"><call pos:start="43:54" pos:end="43:65"><name pos:start="43:54" pos:end="43:59">OBJECT</name><argument_list pos:start="43:60" pos:end="43:65">(<argument pos:start="43:61" pos:end="43:64"><expr pos:start="43:61" pos:end="43:64"><name pos:start="43:61" pos:end="43:64">dimm</name></expr></argument>)</argument_list></call></expr></argument>,

                                                     <argument pos:start="45:54" pos:end="45:70"><expr pos:start="45:54" pos:end="45:70"><name pos:start="45:54" pos:end="45:70">PC_DIMM_SIZE_PROP</name></expr></argument>,

                                                     <argument pos:start="47:54" pos:end="47:57"><expr pos:start="47:54" pos:end="47:57"><name pos:start="47:54" pos:end="47:57">errp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="49:9" pos:end="53:9"><if pos:start="49:9" pos:end="53:9">if <condition pos:start="49:12" pos:end="49:26">(<expr pos:start="49:13" pos:end="49:25"><name pos:start="49:13" pos:end="49:16">errp</name> <operator pos:start="49:18" pos:end="49:19">&amp;&amp;</operator> <operator pos:start="49:21" pos:end="49:21">*</operator><name pos:start="49:22" pos:end="49:25">errp</name></expr>)</condition> <block pos:start="49:28" pos:end="53:9">{<block_content pos:start="51:13" pos:end="51:21">

            <goto pos:start="51:13" pos:end="51:21">goto <name pos:start="51:18" pos:end="51:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="57:9" pos:end="71:9"><if pos:start="57:9" pos:end="71:9">if <condition pos:start="57:12" pos:end="57:66">(<expr pos:start="57:13" pos:end="57:65"><call pos:start="57:13" pos:end="57:65"><name pos:start="57:13" pos:end="57:26">ranges_overlap</name><argument_list pos:start="57:27" pos:end="57:65">(<argument pos:start="57:28" pos:end="57:37"><expr pos:start="57:28" pos:end="57:37"><name pos:start="57:28" pos:end="57:37"><name pos:start="57:28" pos:end="57:31">dimm</name><operator pos:start="57:32" pos:end="57:33">-&gt;</operator><name pos:start="57:34" pos:end="57:37">addr</name></name></expr></argument>, <argument pos:start="57:40" pos:end="57:48"><expr pos:start="57:40" pos:end="57:48"><name pos:start="57:40" pos:end="57:48">dimm_size</name></expr></argument>, <argument pos:start="57:51" pos:end="57:58"><expr pos:start="57:51" pos:end="57:58"><name pos:start="57:51" pos:end="57:58">new_addr</name></expr></argument>, <argument pos:start="57:61" pos:end="57:64"><expr pos:start="57:61" pos:end="57:64"><name pos:start="57:61" pos:end="57:64">size</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="57:68" pos:end="71:9">{<block_content pos:start="59:13" pos:end="69:46">

            <if_stmt pos:start="59:13" pos:end="67:13"><if pos:start="59:13" pos:end="67:13">if <condition pos:start="59:16" pos:end="59:21">(<expr pos:start="59:17" pos:end="59:20"><name pos:start="59:17" pos:end="59:20">hint</name></expr>)</condition> <block pos:start="59:23" pos:end="67:13">{<block_content pos:start="61:17" pos:end="65:25">

                <decl_stmt pos:start="61:17" pos:end="61:46"><decl pos:start="61:17" pos:end="61:45"><type pos:start="61:17" pos:end="61:29"><name pos:start="61:17" pos:end="61:27">DeviceState</name> <modifier pos:start="61:29" pos:end="61:29">*</modifier></type><name pos:start="61:30" pos:end="61:30">d</name> <init pos:start="61:32" pos:end="61:45">= <expr pos:start="61:34" pos:end="61:45"><call pos:start="61:34" pos:end="61:45"><name pos:start="61:34" pos:end="61:39">DEVICE</name><argument_list pos:start="61:40" pos:end="61:45">(<argument pos:start="61:41" pos:end="61:44"><expr pos:start="61:41" pos:end="61:44"><name pos:start="61:41" pos:end="61:44">dimm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="63:17" pos:end="63:77"><expr pos:start="63:17" pos:end="63:76"><call pos:start="63:17" pos:end="63:76"><name pos:start="63:17" pos:end="63:26">error_setg</name><argument_list pos:start="63:27" pos:end="63:76">(<argument pos:start="63:28" pos:end="63:31"><expr pos:start="63:28" pos:end="63:31"><name pos:start="63:28" pos:end="63:31">errp</name></expr></argument>, <argument pos:start="63:34" pos:end="63:68"><expr pos:start="63:34" pos:end="63:68"><literal type="string" pos:start="63:34" pos:end="63:68">"address range conflicts with '%s'"</literal></expr></argument>, <argument pos:start="63:71" pos:end="63:75"><expr pos:start="63:71" pos:end="63:75"><name pos:start="63:71" pos:end="63:75"><name pos:start="63:71" pos:end="63:71">d</name><operator pos:start="63:72" pos:end="63:73">-&gt;</operator><name pos:start="63:74" pos:end="63:75">id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="65:17" pos:end="65:25">goto <name pos:start="65:22" pos:end="65:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:46"><expr pos:start="69:13" pos:end="69:45"><name pos:start="69:13" pos:end="69:20">new_addr</name> <operator pos:start="69:22" pos:end="69:22">=</operator> <name pos:start="69:24" pos:end="69:33"><name pos:start="69:24" pos:end="69:27">dimm</name><operator pos:start="69:28" pos:end="69:29">-&gt;</operator><name pos:start="69:30" pos:end="69:33">addr</name></name> <operator pos:start="69:35" pos:end="69:35">+</operator> <name pos:start="69:37" pos:end="69:45">dimm_size</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="75:5" pos:end="75:19"><expr pos:start="75:5" pos:end="75:18"><name pos:start="75:5" pos:end="75:7">ret</name> <operator pos:start="75:9" pos:end="75:9">=</operator> <name pos:start="75:11" pos:end="75:18">new_addr</name></expr>;</expr_stmt>



    <if_stmt pos:start="79:5" pos:end="91:5"><if pos:start="79:5" pos:end="85:5">if <condition pos:start="79:8" pos:end="79:39">(<expr pos:start="79:9" pos:end="79:38"><name pos:start="79:9" pos:end="79:16">new_addr</name> <operator pos:start="79:18" pos:end="79:18">&lt;</operator> <name pos:start="79:20" pos:end="79:38">address_space_start</name></expr>)</condition> <block pos:start="79:41" pos:end="85:5">{<block_content pos:start="81:9" pos:end="83:75">

        <expr_stmt pos:start="81:9" pos:end="83:75"><expr pos:start="81:9" pos:end="83:74"><call pos:start="81:9" pos:end="83:74"><name pos:start="81:9" pos:end="81:18">error_setg</name><argument_list pos:start="81:19" pos:end="83:74">(<argument pos:start="81:20" pos:end="81:23"><expr pos:start="81:20" pos:end="81:23"><name pos:start="81:20" pos:end="81:23">errp</name></expr></argument>, <argument pos:start="81:26" pos:end="83:36"><expr pos:start="81:26" pos:end="83:36"><literal type="string" pos:start="81:26" pos:end="81:48">"can't add memory [0x%"</literal> <name pos:start="81:50" pos:end="81:55">PRIx64</name> <literal type="string" pos:start="81:57" pos:end="81:62">":0x%"</literal> <name pos:start="81:64" pos:end="81:69">PRIx64</name>

                   <literal type="string" pos:start="83:20" pos:end="83:29">"] at 0x%"</literal> <name pos:start="83:31" pos:end="83:36">PRIx64</name></expr></argument>, <argument pos:start="83:39" pos:end="83:46"><expr pos:start="83:39" pos:end="83:46"><name pos:start="83:39" pos:end="83:46">new_addr</name></expr></argument>, <argument pos:start="83:49" pos:end="83:52"><expr pos:start="83:49" pos:end="83:52"><name pos:start="83:49" pos:end="83:52">size</name></expr></argument>, <argument pos:start="83:55" pos:end="83:73"><expr pos:start="83:55" pos:end="83:73"><name pos:start="83:55" pos:end="83:73">address_space_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="85:7" pos:end="91:5">else if <condition pos:start="85:15" pos:end="85:53">(<expr pos:start="85:16" pos:end="85:52"><operator pos:start="85:16" pos:end="85:16">(</operator><name pos:start="85:17" pos:end="85:24">new_addr</name> <operator pos:start="85:26" pos:end="85:26">+</operator> <name pos:start="85:28" pos:end="85:31">size</name><operator pos:start="85:32" pos:end="85:32">)</operator> <operator pos:start="85:34" pos:end="85:34">&gt;</operator> <name pos:start="85:36" pos:end="85:52">address_space_end</name></expr>)</condition> <block pos:start="85:55" pos:end="91:5">{<block_content pos:start="87:9" pos:end="89:77">

        <expr_stmt pos:start="87:9" pos:end="89:77"><expr pos:start="87:9" pos:end="89:76"><call pos:start="87:9" pos:end="89:76"><name pos:start="87:9" pos:end="87:18">error_setg</name><argument_list pos:start="87:19" pos:end="89:76">(<argument pos:start="87:20" pos:end="87:23"><expr pos:start="87:20" pos:end="87:23"><name pos:start="87:20" pos:end="87:23">errp</name></expr></argument>, <argument pos:start="87:26" pos:end="89:40"><expr pos:start="87:26" pos:end="89:40"><literal type="string" pos:start="87:26" pos:end="87:48">"can't add memory [0x%"</literal> <name pos:start="87:50" pos:end="87:55">PRIx64</name> <literal type="string" pos:start="87:57" pos:end="87:62">":0x%"</literal> <name pos:start="87:64" pos:end="87:69">PRIx64</name>

                   <literal type="string" pos:start="89:20" pos:end="89:33">"] beyond 0x%"</literal> <name pos:start="89:35" pos:end="89:40">PRIx64</name></expr></argument>, <argument pos:start="89:43" pos:end="89:50"><expr pos:start="89:43" pos:end="89:50"><name pos:start="89:43" pos:end="89:50">new_addr</name></expr></argument>, <argument pos:start="89:53" pos:end="89:56"><expr pos:start="89:53" pos:end="89:56"><name pos:start="89:53" pos:end="89:56">size</name></expr></argument>, <argument pos:start="89:59" pos:end="89:75"><expr pos:start="89:59" pos:end="89:75"><name pos:start="89:59" pos:end="89:75">address_space_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



<label pos:start="95:1" pos:end="95:4"><name pos:start="95:1" pos:end="95:3">out</name>:</label>

    <expr_stmt pos:start="97:5" pos:end="97:23"><expr pos:start="97:5" pos:end="97:22"><call pos:start="97:5" pos:end="97:22"><name pos:start="97:5" pos:end="97:16">g_slist_free</name><argument_list pos:start="97:17" pos:end="97:22">(<argument pos:start="97:18" pos:end="97:21"><expr pos:start="97:18" pos:end="97:21"><name pos:start="97:18" pos:end="97:21">list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="99:5" pos:end="99:15">return <expr pos:start="99:12" pos:end="99:14"><name pos:start="99:12" pos:end="99:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
