<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5750.c" pos:tabs="8"><function pos:start="1:1" pos:end="103:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:21">smp_parse</name><parameter_list pos:start="1:22" pos:end="1:37">(<parameter pos:start="1:23" pos:end="1:36"><decl pos:start="1:23" pos:end="1:36"><type pos:start="1:23" pos:end="1:32"><name pos:start="1:23" pos:end="1:30">QemuOpts</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:36">opts</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="103:1">{<block_content pos:start="5:5" pos:end="99:5">

    <if_stmt pos:start="5:5" pos:end="73:5"><if pos:start="5:5" pos:end="73:5">if <condition pos:start="5:8" pos:end="5:13">(<expr pos:start="5:9" pos:end="5:12"><name pos:start="5:9" pos:end="5:12">opts</name></expr>)</condition> <block pos:start="5:15" pos:end="73:5">{<block_content pos:start="9:9" pos:end="69:48">



        <decl_stmt pos:start="9:9" pos:end="9:64"><decl pos:start="9:9" pos:end="9:63"><type pos:start="9:9" pos:end="9:16"><name pos:start="9:9" pos:end="9:16">unsigned</name></type> <name pos:start="9:18" pos:end="9:21">cpus</name>    <init pos:start="9:26" pos:end="9:63">= <expr pos:start="9:28" pos:end="9:63"><call pos:start="9:28" pos:end="9:63"><name pos:start="9:28" pos:end="9:46">qemu_opt_get_number</name><argument_list pos:start="9:47" pos:end="9:63">(<argument pos:start="9:48" pos:end="9:51"><expr pos:start="9:48" pos:end="9:51"><name pos:start="9:48" pos:end="9:51">opts</name></expr></argument>, <argument pos:start="9:54" pos:end="9:59"><expr pos:start="9:54" pos:end="9:59"><literal type="string" pos:start="9:54" pos:end="9:59">"cpus"</literal></expr></argument>, <argument pos:start="9:62" pos:end="9:62"><expr pos:start="9:62" pos:end="9:62"><literal type="number" pos:start="9:62" pos:end="9:62">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="11:9" pos:end="11:67"><decl pos:start="11:9" pos:end="11:66"><type pos:start="11:9" pos:end="11:16"><name pos:start="11:9" pos:end="11:16">unsigned</name></type> <name pos:start="11:18" pos:end="11:24">sockets</name> <init pos:start="11:26" pos:end="11:66">= <expr pos:start="11:28" pos:end="11:66"><call pos:start="11:28" pos:end="11:66"><name pos:start="11:28" pos:end="11:46">qemu_opt_get_number</name><argument_list pos:start="11:47" pos:end="11:66">(<argument pos:start="11:48" pos:end="11:51"><expr pos:start="11:48" pos:end="11:51"><name pos:start="11:48" pos:end="11:51">opts</name></expr></argument>, <argument pos:start="11:54" pos:end="11:62"><expr pos:start="11:54" pos:end="11:62"><literal type="string" pos:start="11:54" pos:end="11:62">"sockets"</literal></expr></argument>, <argument pos:start="11:65" pos:end="11:65"><expr pos:start="11:65" pos:end="11:65"><literal type="number" pos:start="11:65" pos:end="11:65">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="13:9" pos:end="13:65"><decl pos:start="13:9" pos:end="13:64"><type pos:start="13:9" pos:end="13:16"><name pos:start="13:9" pos:end="13:16">unsigned</name></type> <name pos:start="13:18" pos:end="13:22">cores</name>   <init pos:start="13:26" pos:end="13:64">= <expr pos:start="13:28" pos:end="13:64"><call pos:start="13:28" pos:end="13:64"><name pos:start="13:28" pos:end="13:46">qemu_opt_get_number</name><argument_list pos:start="13:47" pos:end="13:64">(<argument pos:start="13:48" pos:end="13:51"><expr pos:start="13:48" pos:end="13:51"><name pos:start="13:48" pos:end="13:51">opts</name></expr></argument>, <argument pos:start="13:54" pos:end="13:60"><expr pos:start="13:54" pos:end="13:60"><literal type="string" pos:start="13:54" pos:end="13:60">"cores"</literal></expr></argument>, <argument pos:start="13:63" pos:end="13:63"><expr pos:start="13:63" pos:end="13:63"><literal type="number" pos:start="13:63" pos:end="13:63">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="15:9" pos:end="15:67"><decl pos:start="15:9" pos:end="15:66"><type pos:start="15:9" pos:end="15:16"><name pos:start="15:9" pos:end="15:16">unsigned</name></type> <name pos:start="15:18" pos:end="15:24">threads</name> <init pos:start="15:26" pos:end="15:66">= <expr pos:start="15:28" pos:end="15:66"><call pos:start="15:28" pos:end="15:66"><name pos:start="15:28" pos:end="15:46">qemu_opt_get_number</name><argument_list pos:start="15:47" pos:end="15:66">(<argument pos:start="15:48" pos:end="15:51"><expr pos:start="15:48" pos:end="15:51"><name pos:start="15:48" pos:end="15:51">opts</name></expr></argument>, <argument pos:start="15:54" pos:end="15:62"><expr pos:start="15:54" pos:end="15:62"><literal type="string" pos:start="15:54" pos:end="15:62">"threads"</literal></expr></argument>, <argument pos:start="15:65" pos:end="15:65"><expr pos:start="15:65" pos:end="15:65"><literal type="number" pos:start="15:65" pos:end="15:65">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="19:9" pos:end="19:76">/* compute missing values, prefer sockets over cores over threads */</comment>

        <if_stmt pos:start="21:9" pos:end="57:9"><if pos:start="21:9" pos:end="35:9">if <condition pos:start="21:12" pos:end="21:38">(<expr pos:start="21:13" pos:end="21:37"><name pos:start="21:13" pos:end="21:16">cpus</name> <operator pos:start="21:18" pos:end="21:19">==</operator> <literal type="number" pos:start="21:21" pos:end="21:21">0</literal> <operator pos:start="21:23" pos:end="21:24">||</operator> <name pos:start="21:26" pos:end="21:32">sockets</name> <operator pos:start="21:34" pos:end="21:35">==</operator> <literal type="number" pos:start="21:37" pos:end="21:37">0</literal></expr>)</condition> <block pos:start="21:40" pos:end="35:9">{<block_content pos:start="23:13" pos:end="33:13">

            <expr_stmt pos:start="23:13" pos:end="23:48"><expr pos:start="23:13" pos:end="23:47"><name pos:start="23:13" pos:end="23:19">sockets</name> <operator pos:start="23:21" pos:end="23:21">=</operator> <ternary pos:start="23:23" pos:end="23:47"><condition pos:start="23:23" pos:end="23:35"><expr pos:start="23:23" pos:end="23:33"><name pos:start="23:23" pos:end="23:29">sockets</name> <operator pos:start="23:31" pos:end="23:31">&gt;</operator> <literal type="number" pos:start="23:33" pos:end="23:33">0</literal></expr> ?</condition><then pos:start="23:37" pos:end="23:43"> <expr pos:start="23:37" pos:end="23:43"><name pos:start="23:37" pos:end="23:43">sockets</name></expr> </then><else pos:start="23:45" pos:end="23:47">: <expr pos:start="23:47" pos:end="23:47"><literal type="number" pos:start="23:47" pos:end="23:47">1</literal></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="25:13" pos:end="25:42"><expr pos:start="25:13" pos:end="25:41"><name pos:start="25:13" pos:end="25:17">cores</name> <operator pos:start="25:19" pos:end="25:19">=</operator> <ternary pos:start="25:21" pos:end="25:41"><condition pos:start="25:21" pos:end="25:31"><expr pos:start="25:21" pos:end="25:29"><name pos:start="25:21" pos:end="25:25">cores</name> <operator pos:start="25:27" pos:end="25:27">&gt;</operator> <literal type="number" pos:start="25:29" pos:end="25:29">0</literal></expr> ?</condition><then pos:start="25:33" pos:end="25:37"> <expr pos:start="25:33" pos:end="25:37"><name pos:start="25:33" pos:end="25:37">cores</name></expr> </then><else pos:start="25:39" pos:end="25:41">: <expr pos:start="25:41" pos:end="25:41"><literal type="number" pos:start="25:41" pos:end="25:41">1</literal></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="27:13" pos:end="27:48"><expr pos:start="27:13" pos:end="27:47"><name pos:start="27:13" pos:end="27:19">threads</name> <operator pos:start="27:21" pos:end="27:21">=</operator> <ternary pos:start="27:23" pos:end="27:47"><condition pos:start="27:23" pos:end="27:35"><expr pos:start="27:23" pos:end="27:33"><name pos:start="27:23" pos:end="27:29">threads</name> <operator pos:start="27:31" pos:end="27:31">&gt;</operator> <literal type="number" pos:start="27:33" pos:end="27:33">0</literal></expr> ?</condition><then pos:start="27:37" pos:end="27:43"> <expr pos:start="27:37" pos:end="27:43"><name pos:start="27:37" pos:end="27:43">threads</name></expr> </then><else pos:start="27:45" pos:end="27:47">: <expr pos:start="27:47" pos:end="27:47"><literal type="number" pos:start="27:47" pos:end="27:47">1</literal></expr></else></ternary></expr>;</expr_stmt>

            <if_stmt pos:start="29:13" pos:end="33:13"><if pos:start="29:13" pos:end="33:13">if <condition pos:start="29:16" pos:end="29:26">(<expr pos:start="29:17" pos:end="29:25"><name pos:start="29:17" pos:end="29:20">cpus</name> <operator pos:start="29:22" pos:end="29:23">==</operator> <literal type="number" pos:start="29:25" pos:end="29:25">0</literal></expr>)</condition> <block pos:start="29:28" pos:end="33:13">{<block_content pos:start="31:17" pos:end="31:49">

                <expr_stmt pos:start="31:17" pos:end="31:49"><expr pos:start="31:17" pos:end="31:48"><name pos:start="31:17" pos:end="31:20">cpus</name> <operator pos:start="31:22" pos:end="31:22">=</operator> <name pos:start="31:24" pos:end="31:28">cores</name> <operator pos:start="31:30" pos:end="31:30">*</operator> <name pos:start="31:32" pos:end="31:38">threads</name> <operator pos:start="31:40" pos:end="31:40">*</operator> <name pos:start="31:42" pos:end="31:48">sockets</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="35:11" pos:end="41:9">else if <condition pos:start="35:19" pos:end="35:30">(<expr pos:start="35:20" pos:end="35:29"><name pos:start="35:20" pos:end="35:24">cores</name> <operator pos:start="35:26" pos:end="35:27">==</operator> <literal type="number" pos:start="35:29" pos:end="35:29">0</literal></expr>)</condition> <block pos:start="35:32" pos:end="41:9">{<block_content pos:start="37:13" pos:end="39:47">

            <expr_stmt pos:start="37:13" pos:end="37:48"><expr pos:start="37:13" pos:end="37:47"><name pos:start="37:13" pos:end="37:19">threads</name> <operator pos:start="37:21" pos:end="37:21">=</operator> <ternary pos:start="37:23" pos:end="37:47"><condition pos:start="37:23" pos:end="37:35"><expr pos:start="37:23" pos:end="37:33"><name pos:start="37:23" pos:end="37:29">threads</name> <operator pos:start="37:31" pos:end="37:31">&gt;</operator> <literal type="number" pos:start="37:33" pos:end="37:33">0</literal></expr> ?</condition><then pos:start="37:37" pos:end="37:43"> <expr pos:start="37:37" pos:end="37:43"><name pos:start="37:37" pos:end="37:43">threads</name></expr> </then><else pos:start="37:45" pos:end="37:47">: <expr pos:start="37:47" pos:end="37:47"><literal type="number" pos:start="37:47" pos:end="37:47">1</literal></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:47"><expr pos:start="39:13" pos:end="39:46"><name pos:start="39:13" pos:end="39:17">cores</name> <operator pos:start="39:19" pos:end="39:19">=</operator> <name pos:start="39:21" pos:end="39:24">cpus</name> <operator pos:start="39:26" pos:end="39:26">/</operator> <operator pos:start="39:28" pos:end="39:28">(</operator><name pos:start="39:29" pos:end="39:35">sockets</name> <operator pos:start="39:37" pos:end="39:37">*</operator> <name pos:start="39:39" pos:end="39:45">threads</name><operator pos:start="39:46" pos:end="39:46">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="41:11" pos:end="45:9">else if <condition pos:start="41:19" pos:end="41:32">(<expr pos:start="41:20" pos:end="41:31"><name pos:start="41:20" pos:end="41:26">threads</name> <operator pos:start="41:28" pos:end="41:29">==</operator> <literal type="number" pos:start="41:31" pos:end="41:31">0</literal></expr>)</condition> <block pos:start="41:34" pos:end="45:9">{<block_content pos:start="43:13" pos:end="43:47">

            <expr_stmt pos:start="43:13" pos:end="43:47"><expr pos:start="43:13" pos:end="43:46"><name pos:start="43:13" pos:end="43:19">threads</name> <operator pos:start="43:21" pos:end="43:21">=</operator> <name pos:start="43:23" pos:end="43:26">cpus</name> <operator pos:start="43:28" pos:end="43:28">/</operator> <operator pos:start="43:30" pos:end="43:30">(</operator><name pos:start="43:31" pos:end="43:35">cores</name> <operator pos:start="43:37" pos:end="43:37">*</operator> <name pos:start="43:39" pos:end="43:45">sockets</name><operator pos:start="43:46" pos:end="43:46">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="45:11" pos:end="57:9">else if <condition pos:start="45:19" pos:end="45:52">(<expr pos:start="45:20" pos:end="45:51"><name pos:start="45:20" pos:end="45:26">sockets</name> <operator pos:start="45:28" pos:end="45:28">*</operator> <name pos:start="45:30" pos:end="45:34">cores</name> <operator pos:start="45:36" pos:end="45:36">*</operator> <name pos:start="45:38" pos:end="45:44">threads</name> <operator pos:start="45:46" pos:end="45:46">&lt;</operator> <name pos:start="45:48" pos:end="45:51">cpus</name></expr>)</condition> <block pos:start="45:54" pos:end="57:9">{<block_content pos:start="47:13" pos:end="55:20">

            <expr_stmt pos:start="47:13" pos:end="53:51"><expr pos:start="47:13" pos:end="53:50"><call pos:start="47:13" pos:end="53:50"><name pos:start="47:13" pos:end="47:19">fprintf</name><argument_list pos:start="47:20" pos:end="53:50">(<argument pos:start="47:21" pos:end="47:26"><expr pos:start="47:21" pos:end="47:26"><name pos:start="47:21" pos:end="47:26">stderr</name></expr></argument>, <argument pos:start="47:29" pos:end="51:37"><expr pos:start="47:29" pos:end="51:37"><literal type="string" pos:start="47:29" pos:end="47:51">"cpu topology: error: "</literal>

                    <literal type="string" pos:start="49:21" pos:end="49:65">"sockets (%u) * cores (%u) * threads (%u) &lt; "</literal>

                    <literal type="string" pos:start="51:21" pos:end="51:37">"smp_cpus (%u)\n"</literal></expr></argument>,

                    <argument pos:start="53:21" pos:end="53:27"><expr pos:start="53:21" pos:end="53:27"><name pos:start="53:21" pos:end="53:27">sockets</name></expr></argument>, <argument pos:start="53:30" pos:end="53:34"><expr pos:start="53:30" pos:end="53:34"><name pos:start="53:30" pos:end="53:34">cores</name></expr></argument>, <argument pos:start="53:37" pos:end="53:43"><expr pos:start="53:37" pos:end="53:43"><name pos:start="53:37" pos:end="53:43">threads</name></expr></argument>, <argument pos:start="53:46" pos:end="53:49"><expr pos:start="53:46" pos:end="53:49"><name pos:start="53:46" pos:end="53:49">cpus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:20"><expr pos:start="55:13" pos:end="55:19"><call pos:start="55:13" pos:end="55:19"><name pos:start="55:13" pos:end="55:16">exit</name><argument_list pos:start="55:17" pos:end="55:19">(<argument pos:start="55:18" pos:end="55:18"><expr pos:start="55:18" pos:end="55:18"><literal type="number" pos:start="55:18" pos:end="55:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="61:9" pos:end="61:59"><expr pos:start="61:9" pos:end="61:58"><name pos:start="61:9" pos:end="61:16">max_cpus</name> <operator pos:start="61:18" pos:end="61:18">=</operator> <call pos:start="61:20" pos:end="61:58"><name pos:start="61:20" pos:end="61:38">qemu_opt_get_number</name><argument_list pos:start="61:39" pos:end="61:58">(<argument pos:start="61:40" pos:end="61:43"><expr pos:start="61:40" pos:end="61:43"><name pos:start="61:40" pos:end="61:43">opts</name></expr></argument>, <argument pos:start="61:46" pos:end="61:54"><expr pos:start="61:46" pos:end="61:54"><literal type="string" pos:start="61:46" pos:end="61:54">"maxcpus"</literal></expr></argument>, <argument pos:start="61:57" pos:end="61:57"><expr pos:start="61:57" pos:end="61:57"><literal type="number" pos:start="61:57" pos:end="61:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="65:9" pos:end="65:24"><expr pos:start="65:9" pos:end="65:23"><name pos:start="65:9" pos:end="65:16">smp_cpus</name> <operator pos:start="65:18" pos:end="65:18">=</operator> <name pos:start="65:20" pos:end="65:23">cpus</name></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:42"><expr pos:start="67:9" pos:end="67:41"><name pos:start="67:9" pos:end="67:17">smp_cores</name> <operator pos:start="67:19" pos:end="67:19">=</operator> <ternary pos:start="67:21" pos:end="67:41"><condition pos:start="67:21" pos:end="67:31"><expr pos:start="67:21" pos:end="67:29"><name pos:start="67:21" pos:end="67:25">cores</name> <operator pos:start="67:27" pos:end="67:27">&gt;</operator> <literal type="number" pos:start="67:29" pos:end="67:29">0</literal></expr> ?</condition><then pos:start="67:33" pos:end="67:37"> <expr pos:start="67:33" pos:end="67:37"><name pos:start="67:33" pos:end="67:37">cores</name></expr> </then><else pos:start="67:39" pos:end="67:41">: <expr pos:start="67:41" pos:end="67:41"><literal type="number" pos:start="67:41" pos:end="67:41">1</literal></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:48"><expr pos:start="69:9" pos:end="69:47"><name pos:start="69:9" pos:end="69:19">smp_threads</name> <operator pos:start="69:21" pos:end="69:21">=</operator> <ternary pos:start="69:23" pos:end="69:47"><condition pos:start="69:23" pos:end="69:35"><expr pos:start="69:23" pos:end="69:33"><name pos:start="69:23" pos:end="69:29">threads</name> <operator pos:start="69:31" pos:end="69:31">&gt;</operator> <literal type="number" pos:start="69:33" pos:end="69:33">0</literal></expr> ?</condition><then pos:start="69:37" pos:end="69:43"> <expr pos:start="69:37" pos:end="69:43"><name pos:start="69:37" pos:end="69:43">threads</name></expr> </then><else pos:start="69:45" pos:end="69:47">: <expr pos:start="69:47" pos:end="69:47"><literal type="number" pos:start="69:47" pos:end="69:47">1</literal></expr></else></ternary></expr>;</expr_stmt>



    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="77:5" pos:end="81:5"><if pos:start="77:5" pos:end="81:5">if <condition pos:start="77:8" pos:end="77:22">(<expr pos:start="77:9" pos:end="77:21"><name pos:start="77:9" pos:end="77:16">max_cpus</name> <operator pos:start="77:18" pos:end="77:19">==</operator> <literal type="number" pos:start="77:21" pos:end="77:21">0</literal></expr>)</condition> <block pos:start="77:24" pos:end="81:5">{<block_content pos:start="79:9" pos:end="79:28">

        <expr_stmt pos:start="79:9" pos:end="79:28"><expr pos:start="79:9" pos:end="79:27"><name pos:start="79:9" pos:end="79:16">max_cpus</name> <operator pos:start="79:18" pos:end="79:18">=</operator> <name pos:start="79:20" pos:end="79:27">smp_cpus</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="85:5" pos:end="91:5"><if pos:start="85:5" pos:end="91:5">if <condition pos:start="85:8" pos:end="85:36">(<expr pos:start="85:9" pos:end="85:35"><name pos:start="85:9" pos:end="85:16">max_cpus</name> <operator pos:start="85:18" pos:end="85:18">&gt;</operator> <name pos:start="85:20" pos:end="85:35">MAX_CPUMASK_BITS</name></expr>)</condition> <block pos:start="85:38" pos:end="91:5">{<block_content pos:start="87:9" pos:end="89:16">

        <expr_stmt pos:start="87:9" pos:end="87:59"><expr pos:start="87:9" pos:end="87:58"><call pos:start="87:9" pos:end="87:58"><name pos:start="87:9" pos:end="87:15">fprintf</name><argument_list pos:start="87:16" pos:end="87:58">(<argument pos:start="87:17" pos:end="87:22"><expr pos:start="87:17" pos:end="87:22"><name pos:start="87:17" pos:end="87:22">stderr</name></expr></argument>, <argument pos:start="87:25" pos:end="87:57"><expr pos:start="87:25" pos:end="87:57"><literal type="string" pos:start="87:25" pos:end="87:57">"Unsupported number of maxcpus\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:16"><expr pos:start="89:9" pos:end="89:15"><call pos:start="89:9" pos:end="89:15"><name pos:start="89:9" pos:end="89:12">exit</name><argument_list pos:start="89:13" pos:end="89:15">(<argument pos:start="89:14" pos:end="89:14"><expr pos:start="89:14" pos:end="89:14"><literal type="number" pos:start="89:14" pos:end="89:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="93:5" pos:end="99:5"><if pos:start="93:5" pos:end="99:5">if <condition pos:start="93:8" pos:end="93:28">(<expr pos:start="93:9" pos:end="93:27"><name pos:start="93:9" pos:end="93:16">max_cpus</name> <operator pos:start="93:18" pos:end="93:18">&lt;</operator> <name pos:start="93:20" pos:end="93:27">smp_cpus</name></expr>)</condition> <block pos:start="93:30" pos:end="99:5">{<block_content pos:start="95:9" pos:end="97:16">

        <expr_stmt pos:start="95:9" pos:end="95:74"><expr pos:start="95:9" pos:end="95:73"><call pos:start="95:9" pos:end="95:73"><name pos:start="95:9" pos:end="95:15">fprintf</name><argument_list pos:start="95:16" pos:end="95:73">(<argument pos:start="95:17" pos:end="95:22"><expr pos:start="95:17" pos:end="95:22"><name pos:start="95:17" pos:end="95:22">stderr</name></expr></argument>, <argument pos:start="95:25" pos:end="95:72"><expr pos:start="95:25" pos:end="95:72"><literal type="string" pos:start="95:25" pos:end="95:72">"maxcpus must be equal to or greater than smp\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:16"><expr pos:start="97:9" pos:end="97:15"><call pos:start="97:9" pos:end="97:15"><name pos:start="97:9" pos:end="97:12">exit</name><argument_list pos:start="97:13" pos:end="97:15">(<argument pos:start="97:14" pos:end="97:14"><expr pos:start="97:14" pos:end="97:14"><literal type="number" pos:start="97:14" pos:end="97:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



</block_content>}</block></function>
</unit>
