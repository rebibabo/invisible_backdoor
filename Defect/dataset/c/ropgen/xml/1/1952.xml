<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/1952.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:33"><name pos:start="1:1" pos:end="1:10">aio_read_f</name><argument_list pos:start="1:11" pos:end="1:33">(<argument pos:start="1:12" pos:end="1:19">int argc</argument>, <argument pos:start="1:22" pos:end="1:32">char **argv</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="125:1">{<block_content pos:start="5:9" pos:end="123:17">

	<decl_stmt pos:start="5:9" pos:end="5:22"><decl pos:start="5:9" pos:end="5:18"><type pos:start="5:9" pos:end="5:11"><name pos:start="5:9" pos:end="5:11">int</name></type> <name pos:start="5:13" pos:end="5:18">nr_iov</name></decl>, <decl pos:start="5:21" pos:end="5:21"><type ref="prev" pos:start="5:9" pos:end="5:11"/><name pos:start="5:21" pos:end="5:21">c</name></decl>;</decl_stmt>

	<decl_stmt pos:start="7:9" pos:end="7:64"><decl pos:start="7:9" pos:end="7:63"><type pos:start="7:9" pos:end="7:24"><name pos:start="7:9" pos:end="7:22"><name pos:start="7:9" pos:end="7:14">struct</name> <name pos:start="7:16" pos:end="7:22">aio_ctx</name></name> <modifier pos:start="7:24" pos:end="7:24">*</modifier></type><name pos:start="7:25" pos:end="7:27">ctx</name> <init pos:start="7:29" pos:end="7:63">= <expr pos:start="7:31" pos:end="7:63"><call pos:start="7:31" pos:end="7:63"><name pos:start="7:31" pos:end="7:36">calloc</name><argument_list pos:start="7:37" pos:end="7:63">(<argument pos:start="7:38" pos:end="7:38"><expr pos:start="7:38" pos:end="7:38"><literal type="number" pos:start="7:38" pos:end="7:38">1</literal></expr></argument>, <argument pos:start="7:41" pos:end="7:62"><expr pos:start="7:41" pos:end="7:62"><sizeof pos:start="7:41" pos:end="7:62">sizeof<argument_list pos:start="7:47" pos:end="7:62">(<argument pos:start="7:48" pos:end="7:61"><expr pos:start="7:48" pos:end="7:61">struct <name pos:start="7:55" pos:end="7:61">aio_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="9:9" pos:end="9:30"><decl pos:start="9:9" pos:end="9:29"><type pos:start="9:9" pos:end="9:26"><name pos:start="9:9" pos:end="9:24">BlockDriverAIOCB</name> <modifier pos:start="9:26" pos:end="9:26">*</modifier></type><name pos:start="9:27" pos:end="9:29">acb</name></decl>;</decl_stmt>



	<while pos:start="13:9" pos:end="55:9">while <condition pos:start="13:15" pos:end="13:56">(<expr pos:start="13:16" pos:end="13:55"><operator pos:start="13:16" pos:end="13:16">(</operator><name pos:start="13:17" pos:end="13:17">c</name> <operator pos:start="13:19" pos:end="13:19">=</operator> <call pos:start="13:21" pos:end="13:47"><name pos:start="13:21" pos:end="13:26">getopt</name><argument_list pos:start="13:27" pos:end="13:47">(<argument pos:start="13:28" pos:end="13:31"><expr pos:start="13:28" pos:end="13:31"><name pos:start="13:28" pos:end="13:31">argc</name></expr></argument>, <argument pos:start="13:34" pos:end="13:37"><expr pos:start="13:34" pos:end="13:37"><name pos:start="13:34" pos:end="13:37">argv</name></expr></argument>, <argument pos:start="13:40" pos:end="13:46"><expr pos:start="13:40" pos:end="13:46"><literal type="string" pos:start="13:40" pos:end="13:46">"CP:qv"</literal></expr></argument>)</argument_list></call><operator pos:start="13:48" pos:end="13:48">)</operator> <operator pos:start="13:50" pos:end="13:51">!=</operator> <name pos:start="13:53" pos:end="13:55">EOF</name></expr>)</condition> <block pos:start="13:58" pos:end="55:9">{<block_content pos:start="15:17" pos:end="53:17">

		<switch pos:start="15:17" pos:end="53:17">switch <condition pos:start="15:24" pos:end="15:26">(<expr pos:start="15:25" pos:end="15:25"><name pos:start="15:25" pos:end="15:25">c</name></expr>)</condition> <block pos:start="15:28" pos:end="53:17">{<block_content pos:start="17:17" pos:end="51:60">

		<case pos:start="17:17" pos:end="17:25">case <expr pos:start="17:22" pos:end="17:24"><literal type="char" pos:start="17:22" pos:end="17:24">'C'</literal></expr>:</case>

			<expr_stmt pos:start="19:25" pos:end="19:39"><expr pos:start="19:25" pos:end="19:38"><name pos:start="19:25" pos:end="19:34"><name pos:start="19:25" pos:end="19:27">ctx</name><operator pos:start="19:28" pos:end="19:29">-&gt;</operator><name pos:start="19:30" pos:end="19:34">Cflag</name></name> <operator pos:start="19:36" pos:end="19:36">=</operator> <literal type="number" pos:start="19:38" pos:end="19:38">1</literal></expr>;</expr_stmt>

			<break pos:start="21:25" pos:end="21:30">break;</break>

		<case pos:start="23:17" pos:end="23:25">case <expr pos:start="23:22" pos:end="23:24"><literal type="char" pos:start="23:22" pos:end="23:24">'P'</literal></expr>:</case>

			<expr_stmt pos:start="25:25" pos:end="25:39"><expr pos:start="25:25" pos:end="25:38"><name pos:start="25:25" pos:end="25:34"><name pos:start="25:25" pos:end="25:27">ctx</name><operator pos:start="25:28" pos:end="25:29">-&gt;</operator><name pos:start="25:30" pos:end="25:34">Pflag</name></name> <operator pos:start="25:36" pos:end="25:36">=</operator> <literal type="number" pos:start="25:38" pos:end="25:38">1</literal></expr>;</expr_stmt>

			<expr_stmt pos:start="27:25" pos:end="27:61"><expr pos:start="27:25" pos:end="27:60"><name pos:start="27:25" pos:end="27:36"><name pos:start="27:25" pos:end="27:27">ctx</name><operator pos:start="27:28" pos:end="27:29">-&gt;</operator><name pos:start="27:30" pos:end="27:36">pattern</name></name> <operator pos:start="27:38" pos:end="27:38">=</operator> <call pos:start="27:40" pos:end="27:60"><name pos:start="27:40" pos:end="27:52">parse_pattern</name><argument_list pos:start="27:53" pos:end="27:60">(<argument pos:start="27:54" pos:end="27:59"><expr pos:start="27:54" pos:end="27:59"><name pos:start="27:54" pos:end="27:59">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt pos:start="29:25" pos:end="31:41"><if pos:start="29:25" pos:end="31:41">if <condition pos:start="29:28" pos:end="29:45">(<expr pos:start="29:29" pos:end="29:44"><name pos:start="29:29" pos:end="29:40"><name pos:start="29:29" pos:end="29:31">ctx</name><operator pos:start="29:32" pos:end="29:33">-&gt;</operator><name pos:start="29:34" pos:end="29:40">pattern</name></name> <operator pos:start="29:42" pos:end="29:42">&lt;</operator> <literal type="number" pos:start="29:44" pos:end="29:44">0</literal></expr>)</condition><block type="pseudo" pos:start="31:33" pos:end="31:41"><block_content pos:start="31:33" pos:end="31:41">

				<return pos:start="31:33" pos:end="31:41">return <expr pos:start="31:40" pos:end="31:40"><literal type="number" pos:start="31:40" pos:end="31:40">0</literal></expr>;</return></block_content></block></if></if_stmt>

			<break pos:start="33:25" pos:end="33:30">break;</break>

		<case pos:start="35:17" pos:end="35:25">case <expr pos:start="35:22" pos:end="35:24"><literal type="char" pos:start="35:22" pos:end="35:24">'q'</literal></expr>:</case>

			<expr_stmt pos:start="37:25" pos:end="37:39"><expr pos:start="37:25" pos:end="37:38"><name pos:start="37:25" pos:end="37:34"><name pos:start="37:25" pos:end="37:27">ctx</name><operator pos:start="37:28" pos:end="37:29">-&gt;</operator><name pos:start="37:30" pos:end="37:34">qflag</name></name> <operator pos:start="37:36" pos:end="37:36">=</operator> <literal type="number" pos:start="37:38" pos:end="37:38">1</literal></expr>;</expr_stmt>

			<break pos:start="39:25" pos:end="39:30">break;</break>

		<case pos:start="41:17" pos:end="41:25">case <expr pos:start="41:22" pos:end="41:24"><literal type="char" pos:start="41:22" pos:end="41:24">'v'</literal></expr>:</case>

			<expr_stmt pos:start="43:25" pos:end="43:39"><expr pos:start="43:25" pos:end="43:38"><name pos:start="43:25" pos:end="43:34"><name pos:start="43:25" pos:end="43:27">ctx</name><operator pos:start="43:28" pos:end="43:29">-&gt;</operator><name pos:start="43:30" pos:end="43:34">vflag</name></name> <operator pos:start="43:36" pos:end="43:36">=</operator> <literal type="number" pos:start="43:38" pos:end="43:38">1</literal></expr>;</expr_stmt>

			<break pos:start="45:25" pos:end="45:30">break;</break>

		<default pos:start="47:17" pos:end="47:24">default:</default>

			<expr_stmt pos:start="49:25" pos:end="49:34"><expr pos:start="49:25" pos:end="49:33"><call pos:start="49:25" pos:end="49:33"><name pos:start="49:25" pos:end="49:28">free</name><argument_list pos:start="49:29" pos:end="49:33">(<argument pos:start="49:30" pos:end="49:32"><expr pos:start="49:30" pos:end="49:32"><name pos:start="49:30" pos:end="49:32">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<return pos:start="51:25" pos:end="51:60">return <expr pos:start="51:32" pos:end="51:59"><call pos:start="51:32" pos:end="51:59"><name pos:start="51:32" pos:end="51:44">command_usage</name><argument_list pos:start="51:45" pos:end="51:59">(<argument pos:start="51:46" pos:end="51:58"><expr pos:start="51:46" pos:end="51:58"><operator pos:start="51:46" pos:end="51:46">&amp;</operator><name pos:start="51:47" pos:end="51:58">aio_read_cmd</name></expr></argument>)</argument_list></call></expr>;</return>

		</block_content>}</block></switch>

	</block_content>}</block></while>



	<if_stmt pos:start="59:9" pos:end="65:9"><if pos:start="59:9" pos:end="65:9">if <condition pos:start="59:12" pos:end="59:30">(<expr pos:start="59:13" pos:end="59:29"><name pos:start="59:13" pos:end="59:18">optind</name> <operator pos:start="59:20" pos:end="59:20">&gt;</operator> <name pos:start="59:22" pos:end="59:25">argc</name> <operator pos:start="59:27" pos:end="59:27">-</operator> <literal type="number" pos:start="59:29" pos:end="59:29">2</literal></expr>)</condition> <block pos:start="59:32" pos:end="65:9">{<block_content pos:start="61:17" pos:end="63:52">

		<expr_stmt pos:start="61:17" pos:end="61:26"><expr pos:start="61:17" pos:end="61:25"><call pos:start="61:17" pos:end="61:25"><name pos:start="61:17" pos:end="61:20">free</name><argument_list pos:start="61:21" pos:end="61:25">(<argument pos:start="61:22" pos:end="61:24"><expr pos:start="61:22" pos:end="61:24"><name pos:start="61:22" pos:end="61:24">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return pos:start="63:17" pos:end="63:52">return <expr pos:start="63:24" pos:end="63:51"><call pos:start="63:24" pos:end="63:51"><name pos:start="63:24" pos:end="63:36">command_usage</name><argument_list pos:start="63:37" pos:end="63:51">(<argument pos:start="63:38" pos:end="63:50"><expr pos:start="63:38" pos:end="63:50"><operator pos:start="63:38" pos:end="63:38">&amp;</operator><name pos:start="63:39" pos:end="63:50">aio_read_cmd</name></expr></argument>)</argument_list></call></expr>;</return>

	</block_content>}</block></if></if_stmt>



	<expr_stmt pos:start="69:9" pos:end="69:43"><expr pos:start="69:9" pos:end="69:42"><name pos:start="69:9" pos:end="69:19"><name pos:start="69:9" pos:end="69:11">ctx</name><operator pos:start="69:12" pos:end="69:13">-&gt;</operator><name pos:start="69:14" pos:end="69:19">offset</name></name> <operator pos:start="69:21" pos:end="69:21">=</operator> <call pos:start="69:23" pos:end="69:42"><name pos:start="69:23" pos:end="69:28">cvtnum</name><argument_list pos:start="69:29" pos:end="69:42">(<argument pos:start="69:30" pos:end="69:41"><expr pos:start="69:30" pos:end="69:41"><name pos:start="69:30" pos:end="69:41"><name pos:start="69:30" pos:end="69:33">argv</name><index pos:start="69:34" pos:end="69:41">[<expr pos:start="69:35" pos:end="69:40"><name pos:start="69:35" pos:end="69:40">optind</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt pos:start="71:9" pos:end="79:9"><if pos:start="71:9" pos:end="79:9">if <condition pos:start="71:12" pos:end="71:28">(<expr pos:start="71:13" pos:end="71:27"><name pos:start="71:13" pos:end="71:23"><name pos:start="71:13" pos:end="71:15">ctx</name><operator pos:start="71:16" pos:end="71:17">-&gt;</operator><name pos:start="71:18" pos:end="71:23">offset</name></name> <operator pos:start="71:25" pos:end="71:25">&lt;</operator> <literal type="number" pos:start="71:27" pos:end="71:27">0</literal></expr>)</condition> <block pos:start="71:30" pos:end="79:9">{<block_content pos:start="73:17" pos:end="77:25">

		<expr_stmt pos:start="73:17" pos:end="73:76"><expr pos:start="73:17" pos:end="73:75"><call pos:start="73:17" pos:end="73:75"><name pos:start="73:17" pos:end="73:22">printf</name><argument_list pos:start="73:23" pos:end="73:75">(<argument pos:start="73:24" pos:end="73:60"><expr pos:start="73:24" pos:end="73:60"><literal type="string" pos:start="73:24" pos:end="73:60">"non-numeric length argument -- %s\n"</literal></expr></argument>, <argument pos:start="73:63" pos:end="73:74"><expr pos:start="73:63" pos:end="73:74"><name pos:start="73:63" pos:end="73:74"><name pos:start="73:63" pos:end="73:66">argv</name><index pos:start="73:67" pos:end="73:74">[<expr pos:start="73:68" pos:end="73:73"><name pos:start="73:68" pos:end="73:73">optind</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="75:17" pos:end="75:26"><expr pos:start="75:17" pos:end="75:25"><call pos:start="75:17" pos:end="75:25"><name pos:start="75:17" pos:end="75:20">free</name><argument_list pos:start="75:21" pos:end="75:25">(<argument pos:start="75:22" pos:end="75:24"><expr pos:start="75:22" pos:end="75:24"><name pos:start="75:22" pos:end="75:24">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return pos:start="77:17" pos:end="77:25">return <expr pos:start="77:24" pos:end="77:24"><literal type="number" pos:start="77:24" pos:end="77:24">0</literal></expr>;</return>

	</block_content>}</block></if></if_stmt>

	<expr_stmt pos:start="81:9" pos:end="81:17"><expr pos:start="81:9" pos:end="81:16"><name pos:start="81:9" pos:end="81:14">optind</name><operator pos:start="81:15" pos:end="81:16">++</operator></expr>;</expr_stmt>



	<if_stmt pos:start="85:9" pos:end="95:9"><if pos:start="85:9" pos:end="95:9">if <condition pos:start="85:12" pos:end="85:32">(<expr pos:start="85:13" pos:end="85:31"><name pos:start="85:13" pos:end="85:23"><name pos:start="85:13" pos:end="85:15">ctx</name><operator pos:start="85:16" pos:end="85:17">-&gt;</operator><name pos:start="85:18" pos:end="85:23">offset</name></name> <operator pos:start="85:25" pos:end="85:25">&amp;</operator> <literal type="number" pos:start="85:27" pos:end="85:31">0x1ff</literal></expr>)</condition> <block pos:start="85:34" pos:end="95:9">{<block_content pos:start="87:17" pos:end="93:25">

		<expr_stmt pos:start="87:17" pos:end="89:36"><expr pos:start="87:17" pos:end="89:35"><call pos:start="87:17" pos:end="89:35"><name pos:start="87:17" pos:end="87:22">printf</name><argument_list pos:start="87:23" pos:end="89:35">(<argument pos:start="87:24" pos:end="87:67"><expr pos:start="87:24" pos:end="87:67"><literal type="string" pos:start="87:24" pos:end="87:33">"offset %"</literal> <name pos:start="87:35" pos:end="87:40">PRId64</name> <literal type="string" pos:start="87:42" pos:end="87:67">" is not sector aligned\n"</literal></expr></argument>,

                       <argument pos:start="89:24" pos:end="89:34"><expr pos:start="89:24" pos:end="89:34"><name pos:start="89:24" pos:end="89:34"><name pos:start="89:24" pos:end="89:26">ctx</name><operator pos:start="89:27" pos:end="89:28">-&gt;</operator><name pos:start="89:29" pos:end="89:34">offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="91:17" pos:end="91:26"><expr pos:start="91:17" pos:end="91:25"><call pos:start="91:17" pos:end="91:25"><name pos:start="91:17" pos:end="91:20">free</name><argument_list pos:start="91:21" pos:end="91:25">(<argument pos:start="91:22" pos:end="91:24"><expr pos:start="91:22" pos:end="91:24"><name pos:start="91:22" pos:end="91:24">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return pos:start="93:17" pos:end="93:25">return <expr pos:start="93:24" pos:end="93:24"><literal type="number" pos:start="93:24" pos:end="93:24">0</literal></expr>;</return>

	</block_content>}</block></if></if_stmt>



	<expr_stmt pos:start="99:9" pos:end="99:31"><expr pos:start="99:9" pos:end="99:30"><name pos:start="99:9" pos:end="99:14">nr_iov</name> <operator pos:start="99:16" pos:end="99:16">=</operator> <name pos:start="99:18" pos:end="99:21">argc</name> <operator pos:start="99:23" pos:end="99:23">-</operator> <name pos:start="99:25" pos:end="99:30">optind</name></expr>;</expr_stmt>

	<expr_stmt pos:start="101:9" pos:end="101:73"><expr pos:start="101:9" pos:end="101:72"><name pos:start="101:9" pos:end="101:16"><name pos:start="101:9" pos:end="101:11">ctx</name><operator pos:start="101:12" pos:end="101:13">-&gt;</operator><name pos:start="101:14" pos:end="101:16">buf</name></name> <operator pos:start="101:18" pos:end="101:18">=</operator> <call pos:start="101:20" pos:end="101:72"><name pos:start="101:20" pos:end="101:31">create_iovec</name><argument_list pos:start="101:32" pos:end="101:72">(<argument pos:start="101:33" pos:end="101:42"><expr pos:start="101:33" pos:end="101:42"><operator pos:start="101:33" pos:end="101:33">&amp;</operator><name pos:start="101:34" pos:end="101:42"><name pos:start="101:34" pos:end="101:36">ctx</name><operator pos:start="101:37" pos:end="101:38">-&gt;</operator><name pos:start="101:39" pos:end="101:42">qiov</name></name></expr></argument>, <argument pos:start="101:45" pos:end="101:57"><expr pos:start="101:45" pos:end="101:57"><operator pos:start="101:45" pos:end="101:45">&amp;</operator><name pos:start="101:46" pos:end="101:57"><name pos:start="101:46" pos:end="101:49">argv</name><index pos:start="101:50" pos:end="101:57">[<expr pos:start="101:51" pos:end="101:56"><name pos:start="101:51" pos:end="101:56">optind</name></expr>]</index></name></expr></argument>, <argument pos:start="101:60" pos:end="101:65"><expr pos:start="101:60" pos:end="101:65"><name pos:start="101:60" pos:end="101:65">nr_iov</name></expr></argument>, <argument pos:start="101:68" pos:end="101:71"><expr pos:start="101:68" pos:end="101:71"><literal type="number" pos:start="101:68" pos:end="101:71">0xab</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<expr_stmt pos:start="105:9" pos:end="105:37"><expr pos:start="105:9" pos:end="105:36"><call pos:start="105:9" pos:end="105:36"><name pos:start="105:9" pos:end="105:20">gettimeofday</name><argument_list pos:start="105:21" pos:end="105:36">(<argument pos:start="105:22" pos:end="105:29"><expr pos:start="105:22" pos:end="105:29"><operator pos:start="105:22" pos:end="105:22">&amp;</operator><name pos:start="105:23" pos:end="105:29"><name pos:start="105:23" pos:end="105:25">ctx</name><operator pos:start="105:26" pos:end="105:27">-&gt;</operator><name pos:start="105:28" pos:end="105:29">t1</name></name></expr></argument>, <argument pos:start="105:32" pos:end="105:35"><expr pos:start="105:32" pos:end="105:35"><name pos:start="105:32" pos:end="105:35">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="107:9" pos:end="109:71"><expr pos:start="107:9" pos:end="109:70"><name pos:start="107:9" pos:end="107:11">acb</name> <operator pos:start="107:13" pos:end="107:13">=</operator> <call pos:start="107:15" pos:end="109:70"><name pos:start="107:15" pos:end="107:28">bdrv_aio_readv</name><argument_list pos:start="107:29" pos:end="109:70">(<argument pos:start="107:30" pos:end="107:31"><expr pos:start="107:30" pos:end="107:31"><name pos:start="107:30" pos:end="107:31">bs</name></expr></argument>, <argument pos:start="107:34" pos:end="107:49"><expr pos:start="107:34" pos:end="107:49"><name pos:start="107:34" pos:end="107:44"><name pos:start="107:34" pos:end="107:36">ctx</name><operator pos:start="107:37" pos:end="107:38">-&gt;</operator><name pos:start="107:39" pos:end="107:44">offset</name></name> <operator pos:start="107:46" pos:end="107:47">&gt;&gt;</operator> <literal type="number" pos:start="107:49" pos:end="107:49">9</literal></expr></argument>, <argument pos:start="107:52" pos:end="107:61"><expr pos:start="107:52" pos:end="107:61"><operator pos:start="107:52" pos:end="107:52">&amp;</operator><name pos:start="107:53" pos:end="107:61"><name pos:start="107:53" pos:end="107:55">ctx</name><operator pos:start="107:56" pos:end="107:57">-&gt;</operator><name pos:start="107:58" pos:end="107:61">qiov</name></name></expr></argument>,

			      <argument pos:start="109:31" pos:end="109:49"><expr pos:start="109:31" pos:end="109:49"><name pos:start="109:31" pos:end="109:44"><name pos:start="109:31" pos:end="109:33">ctx</name><operator pos:start="109:34" pos:end="109:35">-&gt;</operator><name pos:start="109:36" pos:end="109:39">qiov</name><operator pos:start="109:40" pos:end="109:40">.</operator><name pos:start="109:41" pos:end="109:44">size</name></name> <operator pos:start="109:46" pos:end="109:47">&gt;&gt;</operator> <literal type="number" pos:start="109:49" pos:end="109:49">9</literal></expr></argument>, <argument pos:start="109:52" pos:end="109:64"><expr pos:start="109:52" pos:end="109:64"><name pos:start="109:52" pos:end="109:64">aio_read_done</name></expr></argument>, <argument pos:start="109:67" pos:end="109:69"><expr pos:start="109:67" pos:end="109:69"><name pos:start="109:67" pos:end="109:69">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt pos:start="111:9" pos:end="119:9"><if pos:start="111:9" pos:end="119:9">if <condition pos:start="111:12" pos:end="111:17">(<expr pos:start="111:13" pos:end="111:16"><operator pos:start="111:13" pos:end="111:13">!</operator><name pos:start="111:14" pos:end="111:16">acb</name></expr>)</condition> <block pos:start="111:19" pos:end="119:9">{<block_content pos:start="113:17" pos:end="117:28">

		<expr_stmt pos:start="113:17" pos:end="113:31"><expr pos:start="113:17" pos:end="113:30"><call pos:start="113:17" pos:end="113:30"><name pos:start="113:17" pos:end="113:20">free</name><argument_list pos:start="113:21" pos:end="113:30">(<argument pos:start="113:22" pos:end="113:29"><expr pos:start="113:22" pos:end="113:29"><name pos:start="113:22" pos:end="113:29"><name pos:start="113:22" pos:end="113:24">ctx</name><operator pos:start="113:25" pos:end="113:26">-&gt;</operator><name pos:start="113:27" pos:end="113:29">buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="115:17" pos:end="115:26"><expr pos:start="115:17" pos:end="115:25"><call pos:start="115:17" pos:end="115:25"><name pos:start="115:17" pos:end="115:20">free</name><argument_list pos:start="115:21" pos:end="115:25">(<argument pos:start="115:22" pos:end="115:24"><expr pos:start="115:22" pos:end="115:24"><name pos:start="115:22" pos:end="115:24">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return pos:start="117:17" pos:end="117:28">return <expr pos:start="117:24" pos:end="117:27"><operator pos:start="117:24" pos:end="117:24">-</operator><name pos:start="117:25" pos:end="117:27">EIO</name></expr>;</return>

	</block_content>}</block></if></if_stmt>



	<return pos:start="123:9" pos:end="123:17">return <expr pos:start="123:16" pos:end="123:16"><literal type="number" pos:start="123:16" pos:end="123:16">0</literal></expr>;</return>

</block_content>}</block>
</unit>
