<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/15230.c" pos:tabs="8"><function pos:start="1:1" pos:end="103:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:25">configure_filtergraph</name><parameter_list pos:start="1:26" pos:end="1:42">(<parameter pos:start="1:27" pos:end="1:41"><decl pos:start="1:27" pos:end="1:41"><type pos:start="1:27" pos:end="1:39"><name pos:start="1:27" pos:end="1:37">FilterGraph</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:41">fg</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="103:1">{<block_content pos:start="5:5" pos:end="101:13">

    <decl_stmt pos:start="5:5" pos:end="5:42"><decl pos:start="5:5" pos:end="5:25"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">AVFilterInOut</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:25">inputs</name></decl>, <decl pos:start="5:28" pos:end="5:35"><type ref="prev" pos:start="5:5" pos:end="5:19"><modifier pos:start="5:28" pos:end="5:28">*</modifier></type><name pos:start="5:29" pos:end="5:35">outputs</name></decl>, <decl pos:start="5:38" pos:end="5:41"><type ref="prev" pos:start="5:5" pos:end="5:19"><modifier pos:start="5:38" pos:end="5:38">*</modifier></type><name pos:start="5:39" pos:end="5:41">cur</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:41"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name></decl>, <decl pos:start="7:14" pos:end="7:14"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:14" pos:end="7:14">i</name></decl>, <decl pos:start="7:17" pos:end="7:40"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:17" pos:end="7:22">simple</name> <init pos:start="7:24" pos:end="7:40">= <expr pos:start="7:26" pos:end="7:40"><operator pos:start="7:26" pos:end="7:26">!</operator><name pos:start="7:27" pos:end="7:40"><name pos:start="7:27" pos:end="7:28">fg</name><operator pos:start="7:29" pos:end="7:30">-&gt;</operator><name pos:start="7:31" pos:end="7:40">graph_desc</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="11:53"><decl pos:start="9:5" pos:end="11:52"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:26">graph_desc</name> <init pos:start="9:28" pos:end="11:52">= <expr pos:start="9:30" pos:end="11:52"><ternary pos:start="9:30" pos:end="11:52"><condition pos:start="9:30" pos:end="9:37"><expr pos:start="9:30" pos:end="9:35"><name pos:start="9:30" pos:end="9:35">simple</name></expr> ?</condition><then pos:start="9:39" pos:end="9:67"> <expr pos:start="9:39" pos:end="9:67"><name pos:start="9:39" pos:end="9:52"><name pos:start="9:39" pos:end="9:40">fg</name><operator pos:start="9:41" pos:end="9:42">-&gt;</operator><name pos:start="9:43" pos:end="9:49">outputs</name><index pos:start="9:50" pos:end="9:52">[<expr pos:start="9:51" pos:end="9:51"><literal type="number" pos:start="9:51" pos:end="9:51">0</literal></expr>]</index></name><operator pos:start="9:53" pos:end="9:54">-&gt;</operator><name pos:start="9:55" pos:end="9:67"><name pos:start="9:55" pos:end="9:57">ost</name><operator pos:start="9:58" pos:end="9:59">-&gt;</operator><name pos:start="9:60" pos:end="9:67">avfilter</name></name></expr> </then><else pos:start="9:69" pos:end="11:52">:

                                      <expr pos:start="11:39" pos:end="11:52"><name pos:start="11:39" pos:end="11:52"><name pos:start="11:39" pos:end="11:40">fg</name><operator pos:start="11:41" pos:end="11:42">-&gt;</operator><name pos:start="11:43" pos:end="11:52">graph_desc</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:36"><expr pos:start="15:5" pos:end="15:35"><call pos:start="15:5" pos:end="15:35"><name pos:start="15:5" pos:end="15:23">avfilter_graph_free</name><argument_list pos:start="15:24" pos:end="15:35">(<argument pos:start="15:25" pos:end="15:34"><expr pos:start="15:25" pos:end="15:34"><operator pos:start="15:25" pos:end="15:25">&amp;</operator><name pos:start="15:26" pos:end="15:34"><name pos:start="15:26" pos:end="15:27">fg</name><operator pos:start="15:28" pos:end="15:29">-&gt;</operator><name pos:start="15:30" pos:end="15:34">graph</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="19:31"><if pos:start="17:5" pos:end="19:31">if <condition pos:start="17:8" pos:end="17:46">(<expr pos:start="17:9" pos:end="17:45"><operator pos:start="17:9" pos:end="17:9">!</operator><operator pos:start="17:10" pos:end="17:10">(</operator><name pos:start="17:11" pos:end="17:19"><name pos:start="17:11" pos:end="17:12">fg</name><operator pos:start="17:13" pos:end="17:14">-&gt;</operator><name pos:start="17:15" pos:end="17:19">graph</name></name> <operator pos:start="17:21" pos:end="17:21">=</operator> <call pos:start="17:23" pos:end="17:44"><name pos:start="17:23" pos:end="17:42">avfilter_graph_alloc</name><argument_list pos:start="17:43" pos:end="17:44">()</argument_list></call><operator pos:start="17:45" pos:end="17:45">)</operator></expr>)</condition><block type="pseudo" pos:start="19:9" pos:end="19:31"><block_content pos:start="19:9" pos:end="19:31">

        <return pos:start="19:9" pos:end="19:31">return <expr pos:start="19:16" pos:end="19:30"><call pos:start="19:16" pos:end="19:30"><name pos:start="19:16" pos:end="19:22">AVERROR</name><argument_list pos:start="19:23" pos:end="19:30">(<argument pos:start="19:24" pos:end="19:29"><expr pos:start="19:24" pos:end="19:29"><name pos:start="19:24" pos:end="19:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="23:5" pos:end="55:5"><if pos:start="23:5" pos:end="55:5">if <condition pos:start="23:8" pos:end="23:15">(<expr pos:start="23:9" pos:end="23:14"><name pos:start="23:9" pos:end="23:14">simple</name></expr>)</condition> <block pos:start="23:17" pos:end="55:5">{<block_content pos:start="25:9" pos:end="53:56">

        <decl_stmt pos:start="25:9" pos:end="25:48"><decl pos:start="25:9" pos:end="25:47"><type pos:start="25:9" pos:end="25:22"><name pos:start="25:9" pos:end="25:20">OutputStream</name> <modifier pos:start="25:22" pos:end="25:22">*</modifier></type><name pos:start="25:23" pos:end="25:25">ost</name> <init pos:start="25:27" pos:end="25:47">= <expr pos:start="25:29" pos:end="25:47"><name pos:start="25:29" pos:end="25:42"><name pos:start="25:29" pos:end="25:30">fg</name><operator pos:start="25:31" pos:end="25:32">-&gt;</operator><name pos:start="25:33" pos:end="25:39">outputs</name><index pos:start="25:40" pos:end="25:42">[<expr pos:start="25:41" pos:end="25:41"><literal type="number" pos:start="25:41" pos:end="25:41">0</literal></expr>]</index></name><operator pos:start="25:43" pos:end="25:44">-&gt;</operator><name pos:start="25:45" pos:end="25:47">ost</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="27:9" pos:end="27:23"><decl pos:start="27:9" pos:end="27:22"><type pos:start="27:9" pos:end="27:12"><name pos:start="27:9" pos:end="27:12">char</name></type> <name pos:start="27:14" pos:end="27:22"><name pos:start="27:14" pos:end="27:17">args</name><index pos:start="27:18" pos:end="27:22">[<expr pos:start="27:19" pos:end="27:21"><literal type="number" pos:start="27:19" pos:end="27:21">512</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="29:9" pos:end="29:36"><decl pos:start="29:9" pos:end="29:35"><type pos:start="29:9" pos:end="29:27"><name pos:start="29:9" pos:end="29:25">AVDictionaryEntry</name> <modifier pos:start="29:27" pos:end="29:27">*</modifier></type><name pos:start="29:28" pos:end="29:28">e</name> <init pos:start="29:30" pos:end="29:35">= <expr pos:start="29:32" pos:end="29:35"><name pos:start="29:32" pos:end="29:35">NULL</name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="33:9" pos:end="33:77"><expr pos:start="33:9" pos:end="33:76"><call pos:start="33:9" pos:end="33:76"><name pos:start="33:9" pos:end="33:16">snprintf</name><argument_list pos:start="33:17" pos:end="33:76">(<argument pos:start="33:18" pos:end="33:21"><expr pos:start="33:18" pos:end="33:21"><name pos:start="33:18" pos:end="33:21">args</name></expr></argument>, <argument pos:start="33:24" pos:end="33:35"><expr pos:start="33:24" pos:end="33:35"><sizeof pos:start="33:24" pos:end="33:35">sizeof<argument_list pos:start="33:30" pos:end="33:35">(<argument pos:start="33:31" pos:end="33:34"><expr pos:start="33:31" pos:end="33:34"><name pos:start="33:31" pos:end="33:34">args</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="33:38" pos:end="33:49"><expr pos:start="33:38" pos:end="33:49"><literal type="string" pos:start="33:38" pos:end="33:49">"flags=0x%X"</literal></expr></argument>, <argument pos:start="33:52" pos:end="33:75"><expr pos:start="33:52" pos:end="33:75"><operator pos:start="33:52" pos:end="33:52">(</operator><name pos:start="33:53" pos:end="33:60">unsigned</name><operator pos:start="33:61" pos:end="33:61">)</operator><name pos:start="33:62" pos:end="33:75"><name pos:start="33:62" pos:end="33:64">ost</name><operator pos:start="33:65" pos:end="33:66">-&gt;</operator><name pos:start="33:67" pos:end="33:75">sws_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:52"><expr pos:start="35:9" pos:end="35:51"><name pos:start="35:9" pos:end="35:33"><name pos:start="35:9" pos:end="35:10">fg</name><operator pos:start="35:11" pos:end="35:12">-&gt;</operator><name pos:start="35:13" pos:end="35:17">graph</name><operator pos:start="35:18" pos:end="35:19">-&gt;</operator><name pos:start="35:20" pos:end="35:33">scale_sws_opts</name></name> <operator pos:start="35:35" pos:end="35:35">=</operator> <call pos:start="35:37" pos:end="35:51"><name pos:start="35:37" pos:end="35:45">av_strdup</name><argument_list pos:start="35:46" pos:end="35:51">(<argument pos:start="35:47" pos:end="35:50"><expr pos:start="35:47" pos:end="35:50"><name pos:start="35:47" pos:end="35:50">args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="39:9" pos:end="39:23"><expr pos:start="39:9" pos:end="39:22"><name pos:start="39:9" pos:end="39:15"><name pos:start="39:9" pos:end="39:12">args</name><index pos:start="39:13" pos:end="39:15">[<expr pos:start="39:14" pos:end="39:14"><literal type="number" pos:start="39:14" pos:end="39:14">0</literal></expr>]</index></name> <operator pos:start="39:17" pos:end="39:17">=</operator> <literal type="char" pos:start="39:19" pos:end="39:22">'\0'</literal></expr>;</expr_stmt>

        <while pos:start="41:9" pos:end="47:9">while <condition pos:start="41:15" pos:end="43:56">(<expr pos:start="41:16" pos:end="43:55"><operator pos:start="41:16" pos:end="41:16">(</operator><name pos:start="41:17" pos:end="41:17">e</name> <operator pos:start="41:19" pos:end="41:19">=</operator> <call pos:start="41:21" pos:end="43:54"><name pos:start="41:21" pos:end="41:31">av_dict_get</name><argument_list pos:start="41:32" pos:end="43:54">(<argument pos:start="41:33" pos:end="41:66"><expr pos:start="41:33" pos:end="41:66"><name pos:start="41:33" pos:end="41:46"><name pos:start="41:33" pos:end="41:34">fg</name><operator pos:start="41:35" pos:end="41:36">-&gt;</operator><name pos:start="41:37" pos:end="41:43">outputs</name><index pos:start="41:44" pos:end="41:46">[<expr pos:start="41:45" pos:end="41:45"><literal type="number" pos:start="41:45" pos:end="41:45">0</literal></expr>]</index></name><operator pos:start="41:47" pos:end="41:48">-&gt;</operator><name pos:start="41:49" pos:end="41:66"><name pos:start="41:49" pos:end="41:51">ost</name><operator pos:start="41:52" pos:end="41:53">-&gt;</operator><name pos:start="41:54" pos:end="41:66">resample_opts</name></name></expr></argument>, <argument pos:start="41:69" pos:end="41:70"><expr pos:start="41:69" pos:end="41:70"><literal type="string" pos:start="41:69" pos:end="41:70">""</literal></expr></argument>, <argument pos:start="41:73" pos:end="41:73"><expr pos:start="41:73" pos:end="41:73"><name pos:start="41:73" pos:end="41:73">e</name></expr></argument>,

                                <argument pos:start="43:33" pos:end="43:53"><expr pos:start="43:33" pos:end="43:53"><name pos:start="43:33" pos:end="43:53">AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call><operator pos:start="43:55" pos:end="43:55">)</operator></expr>)</condition> <block pos:start="43:58" pos:end="47:9">{<block_content pos:start="45:13" pos:end="45:72">

            <expr_stmt pos:start="45:13" pos:end="45:72"><expr pos:start="45:13" pos:end="45:71"><call pos:start="45:13" pos:end="45:71"><name pos:start="45:13" pos:end="45:23">av_strlcatf</name><argument_list pos:start="45:24" pos:end="45:71">(<argument pos:start="45:25" pos:end="45:28"><expr pos:start="45:25" pos:end="45:28"><name pos:start="45:25" pos:end="45:28">args</name></expr></argument>, <argument pos:start="45:31" pos:end="45:42"><expr pos:start="45:31" pos:end="45:42"><sizeof pos:start="45:31" pos:end="45:42">sizeof<argument_list pos:start="45:37" pos:end="45:42">(<argument pos:start="45:38" pos:end="45:41"><expr pos:start="45:38" pos:end="45:41"><name pos:start="45:38" pos:end="45:41">args</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="45:45" pos:end="45:52"><expr pos:start="45:45" pos:end="45:52"><literal type="string" pos:start="45:45" pos:end="45:52">"%s=%s:"</literal></expr></argument>, <argument pos:start="45:55" pos:end="45:60"><expr pos:start="45:55" pos:end="45:60"><name pos:start="45:55" pos:end="45:60"><name pos:start="45:55" pos:end="45:55">e</name><operator pos:start="45:56" pos:end="45:57">-&gt;</operator><name pos:start="45:58" pos:end="45:60">key</name></name></expr></argument>, <argument pos:start="45:63" pos:end="45:70"><expr pos:start="45:63" pos:end="45:70"><name pos:start="45:63" pos:end="45:70"><name pos:start="45:63" pos:end="45:63">e</name><operator pos:start="45:64" pos:end="45:65">-&gt;</operator><name pos:start="45:66" pos:end="45:70">value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></while>

        <if_stmt pos:start="49:9" pos:end="51:42"><if pos:start="49:9" pos:end="51:42">if <condition pos:start="49:12" pos:end="49:25">(<expr pos:start="49:13" pos:end="49:24"><call pos:start="49:13" pos:end="49:24"><name pos:start="49:13" pos:end="49:18">strlen</name><argument_list pos:start="49:19" pos:end="49:24">(<argument pos:start="49:20" pos:end="49:23"><expr pos:start="49:20" pos:end="49:23"><name pos:start="49:20" pos:end="49:23">args</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="51:13" pos:end="51:42"><block_content pos:start="51:13" pos:end="51:42">

            <expr_stmt pos:start="51:13" pos:end="51:42"><expr pos:start="51:13" pos:end="51:41"><name pos:start="51:13" pos:end="51:34"><name pos:start="51:13" pos:end="51:16">args</name><index pos:start="51:17" pos:end="51:34">[<expr pos:start="51:18" pos:end="51:33"><call pos:start="51:18" pos:end="51:29"><name pos:start="51:18" pos:end="51:23">strlen</name><argument_list pos:start="51:24" pos:end="51:29">(<argument pos:start="51:25" pos:end="51:28"><expr pos:start="51:25" pos:end="51:28"><name pos:start="51:25" pos:end="51:28">args</name></expr></argument>)</argument_list></call> <operator pos:start="51:31" pos:end="51:31">-</operator> <literal type="number" pos:start="51:33" pos:end="51:33">1</literal></expr>]</index></name> <operator pos:start="51:36" pos:end="51:36">=</operator> <literal type="char" pos:start="51:38" pos:end="51:41">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:56"><expr pos:start="53:9" pos:end="53:55"><name pos:start="53:9" pos:end="53:37"><name pos:start="53:9" pos:end="53:10">fg</name><operator pos:start="53:11" pos:end="53:12">-&gt;</operator><name pos:start="53:13" pos:end="53:17">graph</name><operator pos:start="53:18" pos:end="53:19">-&gt;</operator><name pos:start="53:20" pos:end="53:37">resample_lavr_opts</name></name> <operator pos:start="53:39" pos:end="53:39">=</operator> <call pos:start="53:41" pos:end="53:55"><name pos:start="53:41" pos:end="53:49">av_strdup</name><argument_list pos:start="53:50" pos:end="53:55">(<argument pos:start="53:51" pos:end="53:54"><expr pos:start="53:51" pos:end="53:54"><name pos:start="53:51" pos:end="53:54">args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="59:5" pos:end="61:19"><if pos:start="59:5" pos:end="61:19">if <condition pos:start="59:8" pos:end="59:84">(<expr pos:start="59:9" pos:end="59:83"><operator pos:start="59:9" pos:end="59:9">(</operator><name pos:start="59:10" pos:end="59:12">ret</name> <operator pos:start="59:14" pos:end="59:14">=</operator> <call pos:start="59:16" pos:end="59:78"><name pos:start="59:16" pos:end="59:36">avfilter_graph_parse2</name><argument_list pos:start="59:37" pos:end="59:78">(<argument pos:start="59:38" pos:end="59:46"><expr pos:start="59:38" pos:end="59:46"><name pos:start="59:38" pos:end="59:46"><name pos:start="59:38" pos:end="59:39">fg</name><operator pos:start="59:40" pos:end="59:41">-&gt;</operator><name pos:start="59:42" pos:end="59:46">graph</name></name></expr></argument>, <argument pos:start="59:49" pos:end="59:58"><expr pos:start="59:49" pos:end="59:58"><name pos:start="59:49" pos:end="59:58">graph_desc</name></expr></argument>, <argument pos:start="59:61" pos:end="59:67"><expr pos:start="59:61" pos:end="59:67"><operator pos:start="59:61" pos:end="59:61">&amp;</operator><name pos:start="59:62" pos:end="59:67">inputs</name></expr></argument>, <argument pos:start="59:70" pos:end="59:77"><expr pos:start="59:70" pos:end="59:77"><operator pos:start="59:70" pos:end="59:70">&amp;</operator><name pos:start="59:71" pos:end="59:77">outputs</name></expr></argument>)</argument_list></call><operator pos:start="59:79" pos:end="59:79">)</operator> <operator pos:start="59:81" pos:end="59:81">&lt;</operator> <literal type="number" pos:start="59:83" pos:end="59:83">0</literal></expr>)</condition><block type="pseudo" pos:start="61:9" pos:end="61:19"><block_content pos:start="61:9" pos:end="61:19">

        <return pos:start="61:9" pos:end="61:19">return <expr pos:start="61:16" pos:end="61:18"><name pos:start="61:16" pos:end="61:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="65:5" pos:end="73:5"><if pos:start="65:5" pos:end="73:5">if <condition pos:start="65:8" pos:end="65:73">(<expr pos:start="65:9" pos:end="65:72"><name pos:start="65:9" pos:end="65:14">simple</name> <operator pos:start="65:16" pos:end="65:17">&amp;&amp;</operator> <operator pos:start="65:19" pos:end="65:19">(</operator><operator pos:start="65:20" pos:end="65:20">!</operator><name pos:start="65:21" pos:end="65:26">inputs</name> <operator pos:start="65:28" pos:end="65:29">||</operator> <name pos:start="65:31" pos:end="65:42"><name pos:start="65:31" pos:end="65:36">inputs</name><operator pos:start="65:37" pos:end="65:38">-&gt;</operator><name pos:start="65:39" pos:end="65:42">next</name></name> <operator pos:start="65:44" pos:end="65:45">||</operator> <operator pos:start="65:47" pos:end="65:47">!</operator><name pos:start="65:48" pos:end="65:54">outputs</name> <operator pos:start="65:56" pos:end="65:57">||</operator> <name pos:start="65:59" pos:end="65:71"><name pos:start="65:59" pos:end="65:65">outputs</name><operator pos:start="65:66" pos:end="65:67">-&gt;</operator><name pos:start="65:68" pos:end="65:71">next</name></name><operator pos:start="65:72" pos:end="65:72">)</operator></expr>)</condition> <block pos:start="65:75" pos:end="73:5">{<block_content pos:start="67:9" pos:end="71:31">

        <expr_stmt pos:start="67:9" pos:end="69:62"><expr pos:start="67:9" pos:end="69:61"><call pos:start="67:9" pos:end="69:61"><name pos:start="67:9" pos:end="67:14">av_log</name><argument_list pos:start="67:15" pos:end="69:61">(<argument pos:start="67:16" pos:end="67:19"><expr pos:start="67:16" pos:end="67:19"><name pos:start="67:16" pos:end="67:19">NULL</name></expr></argument>, <argument pos:start="67:22" pos:end="67:33"><expr pos:start="67:22" pos:end="67:33"><name pos:start="67:22" pos:end="67:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="67:36" pos:end="69:48"><expr pos:start="67:36" pos:end="69:48"><literal type="string" pos:start="67:36" pos:end="67:75">"Simple filtergraph '%s' does not have "</literal>

               <literal type="string" pos:start="69:16" pos:end="69:48">"exactly one input and output.\n"</literal></expr></argument>, <argument pos:start="69:51" pos:end="69:60"><expr pos:start="69:51" pos:end="69:60"><name pos:start="69:51" pos:end="69:60">graph_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="71:9" pos:end="71:31">return <expr pos:start="71:16" pos:end="71:30"><call pos:start="71:16" pos:end="71:30"><name pos:start="71:16" pos:end="71:22">AVERROR</name><argument_list pos:start="71:23" pos:end="71:30">(<argument pos:start="71:24" pos:end="71:29"><expr pos:start="71:24" pos:end="71:29"><name pos:start="71:24" pos:end="71:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="77:5" pos:end="81:23">for <control pos:start="77:9" pos:end="77:56">(<init pos:start="77:10" pos:end="77:29"><expr pos:start="77:10" pos:end="77:21"><name pos:start="77:10" pos:end="77:12">cur</name> <operator pos:start="77:14" pos:end="77:14">=</operator> <name pos:start="77:16" pos:end="77:21">inputs</name></expr><operator pos:start="77:22" pos:end="77:22">,</operator> <expr pos:start="77:24" pos:end="77:28"><name pos:start="77:24" pos:end="77:24">i</name> <operator pos:start="77:26" pos:end="77:26">=</operator> <literal type="number" pos:start="77:28" pos:end="77:28">0</literal></expr>;</init> <condition pos:start="77:31" pos:end="77:34"><expr pos:start="77:31" pos:end="77:33"><name pos:start="77:31" pos:end="77:33">cur</name></expr>;</condition> <incr pos:start="77:36" pos:end="77:55"><expr pos:start="77:36" pos:end="77:50"><name pos:start="77:36" pos:end="77:38">cur</name> <operator pos:start="77:40" pos:end="77:40">=</operator> <name pos:start="77:42" pos:end="77:50"><name pos:start="77:42" pos:end="77:44">cur</name><operator pos:start="77:45" pos:end="77:46">-&gt;</operator><name pos:start="77:47" pos:end="77:50">next</name></name></expr><operator pos:start="77:51" pos:end="77:51">,</operator> <expr pos:start="77:53" pos:end="77:55"><name pos:start="77:53" pos:end="77:53">i</name><operator pos:start="77:54" pos:end="77:55">++</operator></expr></incr>)</control><block type="pseudo" pos:start="79:9" pos:end="81:23"><block_content pos:start="79:9" pos:end="81:23">

        <if_stmt pos:start="79:9" pos:end="81:23"><if pos:start="79:9" pos:end="81:23">if <condition pos:start="79:12" pos:end="79:71">(<expr pos:start="79:13" pos:end="79:70"><operator pos:start="79:13" pos:end="79:13">(</operator><name pos:start="79:14" pos:end="79:16">ret</name> <operator pos:start="79:18" pos:end="79:18">=</operator> <call pos:start="79:20" pos:end="79:65"><name pos:start="79:20" pos:end="79:41">configure_input_filter</name><argument_list pos:start="79:42" pos:end="79:65">(<argument pos:start="79:43" pos:end="79:44"><expr pos:start="79:43" pos:end="79:44"><name pos:start="79:43" pos:end="79:44">fg</name></expr></argument>, <argument pos:start="79:47" pos:end="79:59"><expr pos:start="79:47" pos:end="79:59"><name pos:start="79:47" pos:end="79:59"><name pos:start="79:47" pos:end="79:48">fg</name><operator pos:start="79:49" pos:end="79:50">-&gt;</operator><name pos:start="79:51" pos:end="79:56">inputs</name><index pos:start="79:57" pos:end="79:59">[<expr pos:start="79:58" pos:end="79:58"><name pos:start="79:58" pos:end="79:58">i</name></expr>]</index></name></expr></argument>, <argument pos:start="79:62" pos:end="79:64"><expr pos:start="79:62" pos:end="79:64"><name pos:start="79:62" pos:end="79:64">cur</name></expr></argument>)</argument_list></call><operator pos:start="79:66" pos:end="79:66">)</operator> <operator pos:start="79:68" pos:end="79:68">&lt;</operator> <literal type="number" pos:start="79:70" pos:end="79:70">0</literal></expr>)</condition><block type="pseudo" pos:start="81:13" pos:end="81:23"><block_content pos:start="81:13" pos:end="81:23">

            <return pos:start="81:13" pos:end="81:23">return <expr pos:start="81:20" pos:end="81:22"><name pos:start="81:20" pos:end="81:22">ret</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

    <expr_stmt pos:start="83:5" pos:end="83:33"><expr pos:start="83:5" pos:end="83:32"><call pos:start="83:5" pos:end="83:32"><name pos:start="83:5" pos:end="83:23">avfilter_inout_free</name><argument_list pos:start="83:24" pos:end="83:32">(<argument pos:start="83:25" pos:end="83:31"><expr pos:start="83:25" pos:end="83:31"><operator pos:start="83:25" pos:end="83:25">&amp;</operator><name pos:start="83:26" pos:end="83:31">inputs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="87:5" pos:end="89:57">for <control pos:start="87:9" pos:end="87:57">(<init pos:start="87:10" pos:end="87:30"><expr pos:start="87:10" pos:end="87:22"><name pos:start="87:10" pos:end="87:12">cur</name> <operator pos:start="87:14" pos:end="87:14">=</operator> <name pos:start="87:16" pos:end="87:22">outputs</name></expr><operator pos:start="87:23" pos:end="87:23">,</operator> <expr pos:start="87:25" pos:end="87:29"><name pos:start="87:25" pos:end="87:25">i</name> <operator pos:start="87:27" pos:end="87:27">=</operator> <literal type="number" pos:start="87:29" pos:end="87:29">0</literal></expr>;</init> <condition pos:start="87:32" pos:end="87:35"><expr pos:start="87:32" pos:end="87:34"><name pos:start="87:32" pos:end="87:34">cur</name></expr>;</condition> <incr pos:start="87:37" pos:end="87:56"><expr pos:start="87:37" pos:end="87:51"><name pos:start="87:37" pos:end="87:39">cur</name> <operator pos:start="87:41" pos:end="87:41">=</operator> <name pos:start="87:43" pos:end="87:51"><name pos:start="87:43" pos:end="87:45">cur</name><operator pos:start="87:46" pos:end="87:47">-&gt;</operator><name pos:start="87:48" pos:end="87:51">next</name></name></expr><operator pos:start="87:52" pos:end="87:52">,</operator> <expr pos:start="87:54" pos:end="87:56"><name pos:start="87:54" pos:end="87:54">i</name><operator pos:start="87:55" pos:end="87:56">++</operator></expr></incr>)</control><block type="pseudo" pos:start="89:9" pos:end="89:57"><block_content pos:start="89:9" pos:end="89:57">

        <expr_stmt pos:start="89:9" pos:end="89:57"><expr pos:start="89:9" pos:end="89:56"><call pos:start="89:9" pos:end="89:56"><name pos:start="89:9" pos:end="89:31">configure_output_filter</name><argument_list pos:start="89:32" pos:end="89:56">(<argument pos:start="89:33" pos:end="89:34"><expr pos:start="89:33" pos:end="89:34"><name pos:start="89:33" pos:end="89:34">fg</name></expr></argument>, <argument pos:start="89:37" pos:end="89:50"><expr pos:start="89:37" pos:end="89:50"><name pos:start="89:37" pos:end="89:50"><name pos:start="89:37" pos:end="89:38">fg</name><operator pos:start="89:39" pos:end="89:40">-&gt;</operator><name pos:start="89:41" pos:end="89:47">outputs</name><index pos:start="89:48" pos:end="89:50">[<expr pos:start="89:49" pos:end="89:49"><name pos:start="89:49" pos:end="89:49">i</name></expr>]</index></name></expr></argument>, <argument pos:start="89:53" pos:end="89:55"><expr pos:start="89:53" pos:end="89:55"><name pos:start="89:53" pos:end="89:55">cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <expr_stmt pos:start="91:5" pos:end="91:34"><expr pos:start="91:5" pos:end="91:33"><call pos:start="91:5" pos:end="91:33"><name pos:start="91:5" pos:end="91:23">avfilter_inout_free</name><argument_list pos:start="91:24" pos:end="91:33">(<argument pos:start="91:25" pos:end="91:32"><expr pos:start="91:25" pos:end="91:32"><operator pos:start="91:25" pos:end="91:25">&amp;</operator><name pos:start="91:26" pos:end="91:32">outputs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="95:5" pos:end="97:19"><if pos:start="95:5" pos:end="97:19">if <condition pos:start="95:8" pos:end="95:59">(<expr pos:start="95:9" pos:end="95:58"><operator pos:start="95:9" pos:end="95:9">(</operator><name pos:start="95:10" pos:end="95:12">ret</name> <operator pos:start="95:14" pos:end="95:14">=</operator> <call pos:start="95:16" pos:end="95:53"><name pos:start="95:16" pos:end="95:36">avfilter_graph_config</name><argument_list pos:start="95:37" pos:end="95:53">(<argument pos:start="95:38" pos:end="95:46"><expr pos:start="95:38" pos:end="95:46"><name pos:start="95:38" pos:end="95:46"><name pos:start="95:38" pos:end="95:39">fg</name><operator pos:start="95:40" pos:end="95:41">-&gt;</operator><name pos:start="95:42" pos:end="95:46">graph</name></name></expr></argument>, <argument pos:start="95:49" pos:end="95:52"><expr pos:start="95:49" pos:end="95:52"><name pos:start="95:49" pos:end="95:52">NULL</name></expr></argument>)</argument_list></call><operator pos:start="95:54" pos:end="95:54">)</operator> <operator pos:start="95:56" pos:end="95:56">&lt;</operator> <literal type="number" pos:start="95:58" pos:end="95:58">0</literal></expr>)</condition><block type="pseudo" pos:start="97:9" pos:end="97:19"><block_content pos:start="97:9" pos:end="97:19">

        <return pos:start="97:9" pos:end="97:19">return <expr pos:start="97:16" pos:end="97:18"><name pos:start="97:16" pos:end="97:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <return pos:start="101:5" pos:end="101:13">return <expr pos:start="101:12" pos:end="101:12"><literal type="number" pos:start="101:12" pos:end="101:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
