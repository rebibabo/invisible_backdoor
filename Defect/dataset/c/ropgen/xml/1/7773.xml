<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/7773.c" pos:tabs="8"><function pos:start="1:1" pos:end="479:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">tak_decode_frame</name><parameter_list pos:start="1:28" pos:end="3:62">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:61"><decl pos:start="1:52" pos:end="1:61"><type pos:start="1:52" pos:end="1:61"><name pos:start="1:52" pos:end="1:55">void</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:61">data</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:46"><decl pos:start="3:29" pos:end="3:46"><type pos:start="3:29" pos:end="3:46"><name pos:start="3:29" pos:end="3:31">int</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:46">got_frame_ptr</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:61"><decl pos:start="3:49" pos:end="3:61"><type pos:start="3:49" pos:end="3:61"><name pos:start="3:49" pos:end="3:56">AVPacket</name> <modifier pos:start="3:58" pos:end="3:58">*</modifier></type><name pos:start="3:59" pos:end="3:61">pkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="479:1">{<block_content pos:start="7:5" pos:end="477:21">

    <decl_stmt pos:start="7:5" pos:end="7:41"><decl pos:start="7:5" pos:end="7:40"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">TAKDecContext</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">s</name>  <init pos:start="7:23" pos:end="7:40">= <expr pos:start="7:25" pos:end="7:40"><name pos:start="7:25" pos:end="7:40"><name pos:start="7:25" pos:end="7:29">avctx</name><operator pos:start="7:30" pos:end="7:31">-&gt;</operator><name pos:start="7:32" pos:end="7:40">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:28"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">AVFrame</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:18">frame</name>    <init pos:start="9:23" pos:end="9:28">= <expr pos:start="9:25" pos:end="9:28"><name pos:start="9:25" pos:end="9:28">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:39"><decl pos:start="11:5" pos:end="11:38"><type pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:15">ThreadFrame</name></type> <name pos:start="11:17" pos:end="11:22">tframe</name> <init pos:start="11:24" pos:end="11:38">= <expr pos:start="11:26" pos:end="11:38"><block pos:start="11:26" pos:end="11:38">{ <expr pos:start="11:28" pos:end="11:36"><operator pos:start="11:28" pos:end="11:28">.</operator><name pos:start="11:29" pos:end="11:29">f</name> <operator pos:start="11:31" pos:end="11:31">=</operator> <name pos:start="11:33" pos:end="11:36">data</name></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:31"><decl pos:start="13:5" pos:end="13:30"><type pos:start="13:5" pos:end="13:19"><name pos:start="13:5" pos:end="13:17">GetBitContext</name> <modifier pos:start="13:19" pos:end="13:19">*</modifier></type><name pos:start="13:20" pos:end="13:21">gb</name> <init pos:start="13:23" pos:end="13:30">= <expr pos:start="13:25" pos:end="13:30"><operator pos:start="13:25" pos:end="13:25">&amp;</operator><name pos:start="13:26" pos:end="13:30"><name pos:start="13:26" pos:end="13:26">s</name><operator pos:start="13:27" pos:end="13:28">-&gt;</operator><name pos:start="13:29" pos:end="13:30">gb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:12"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:12">chan</name></decl>, <decl pos:start="15:15" pos:end="15:15"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:15" pos:end="15:15">i</name></decl>, <decl pos:start="15:18" pos:end="15:20"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:18" pos:end="15:20">ret</name></decl>, <decl pos:start="15:23" pos:end="15:27"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:23" pos:end="15:27">hsize</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="21:35"><if pos:start="19:5" pos:end="21:35">if <condition pos:start="19:8" pos:end="19:47">(<expr pos:start="19:9" pos:end="19:46"><name pos:start="19:9" pos:end="19:17"><name pos:start="19:9" pos:end="19:11">pkt</name><operator pos:start="19:12" pos:end="19:13">-&gt;</operator><name pos:start="19:14" pos:end="19:17">size</name></name> <operator pos:start="19:19" pos:end="19:19">&lt;</operator> <name pos:start="19:21" pos:end="19:46">TAK_MIN_FRAME_HEADER_BYTES</name></expr>)</condition><block type="pseudo" pos:start="21:9" pos:end="21:35"><block_content pos:start="21:9" pos:end="21:35">

        <return pos:start="21:9" pos:end="21:35">return <expr pos:start="21:16" pos:end="21:34"><name pos:start="21:16" pos:end="21:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="25:5" pos:end="27:19"><if pos:start="25:5" pos:end="27:19">if <condition pos:start="25:8" pos:end="25:61">(<expr pos:start="25:9" pos:end="25:60"><operator pos:start="25:9" pos:end="25:9">(</operator><name pos:start="25:10" pos:end="25:12">ret</name> <operator pos:start="25:14" pos:end="25:14">=</operator> <call pos:start="25:16" pos:end="25:55"><name pos:start="25:16" pos:end="25:29">init_get_bits8</name><argument_list pos:start="25:30" pos:end="25:55">(<argument pos:start="25:31" pos:end="25:32"><expr pos:start="25:31" pos:end="25:32"><name pos:start="25:31" pos:end="25:32">gb</name></expr></argument>, <argument pos:start="25:35" pos:end="25:43"><expr pos:start="25:35" pos:end="25:43"><name pos:start="25:35" pos:end="25:43"><name pos:start="25:35" pos:end="25:37">pkt</name><operator pos:start="25:38" pos:end="25:39">-&gt;</operator><name pos:start="25:40" pos:end="25:43">data</name></name></expr></argument>, <argument pos:start="25:46" pos:end="25:54"><expr pos:start="25:46" pos:end="25:54"><name pos:start="25:46" pos:end="25:54"><name pos:start="25:46" pos:end="25:48">pkt</name><operator pos:start="25:49" pos:end="25:50">-&gt;</operator><name pos:start="25:51" pos:end="25:54">size</name></name></expr></argument>)</argument_list></call><operator pos:start="25:56" pos:end="25:56">)</operator> <operator pos:start="25:58" pos:end="25:58">&lt;</operator> <literal type="number" pos:start="25:60" pos:end="25:60">0</literal></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:19"><block_content pos:start="27:9" pos:end="27:19">

        <return pos:start="27:9" pos:end="27:19">return <expr pos:start="27:16" pos:end="27:18"><name pos:start="27:16" pos:end="27:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="31:5" pos:end="33:19"><if pos:start="31:5" pos:end="33:19">if <condition pos:start="31:8" pos:end="31:69">(<expr pos:start="31:9" pos:end="31:68"><operator pos:start="31:9" pos:end="31:9">(</operator><name pos:start="31:10" pos:end="31:12">ret</name> <operator pos:start="31:14" pos:end="31:14">=</operator> <call pos:start="31:16" pos:end="31:63"><name pos:start="31:16" pos:end="31:41">ff_tak_decode_frame_header</name><argument_list pos:start="31:42" pos:end="31:63">(<argument pos:start="31:43" pos:end="31:47"><expr pos:start="31:43" pos:end="31:47"><name pos:start="31:43" pos:end="31:47">avctx</name></expr></argument>, <argument pos:start="31:50" pos:end="31:51"><expr pos:start="31:50" pos:end="31:51"><name pos:start="31:50" pos:end="31:51">gb</name></expr></argument>, <argument pos:start="31:54" pos:end="31:59"><expr pos:start="31:54" pos:end="31:59"><operator pos:start="31:54" pos:end="31:54">&amp;</operator><name pos:start="31:55" pos:end="31:59"><name pos:start="31:55" pos:end="31:55">s</name><operator pos:start="31:56" pos:end="31:57">-&gt;</operator><name pos:start="31:58" pos:end="31:59">ti</name></name></expr></argument>, <argument pos:start="31:62" pos:end="31:62"><expr pos:start="31:62" pos:end="31:62"><literal type="number" pos:start="31:62" pos:end="31:62">0</literal></expr></argument>)</argument_list></call><operator pos:start="31:64" pos:end="31:64">)</operator> <operator pos:start="31:66" pos:end="31:66">&lt;</operator> <literal type="number" pos:start="31:68" pos:end="31:68">0</literal></expr>)</condition><block type="pseudo" pos:start="33:9" pos:end="33:19"><block_content pos:start="33:9" pos:end="33:19">

        <return pos:start="33:9" pos:end="33:19">return <expr pos:start="33:16" pos:end="33:18"><name pos:start="33:16" pos:end="33:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:35"><expr pos:start="37:5" pos:end="37:34"><name pos:start="37:5" pos:end="37:9">hsize</name> <operator pos:start="37:11" pos:end="37:11">=</operator> <call pos:start="37:13" pos:end="37:30"><name pos:start="37:13" pos:end="37:26">get_bits_count</name><argument_list pos:start="37:27" pos:end="37:30">(<argument pos:start="37:28" pos:end="37:29"><expr pos:start="37:28" pos:end="37:29"><name pos:start="37:28" pos:end="37:29">gb</name></expr></argument>)</argument_list></call> <operator pos:start="37:32" pos:end="37:32">/</operator> <literal type="number" pos:start="37:34" pos:end="37:34">8</literal></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="51:5"><if pos:start="39:5" pos:end="51:5">if <condition pos:start="39:8" pos:end="39:66">(<expr pos:start="39:9" pos:end="39:65"><name pos:start="39:9" pos:end="39:30"><name pos:start="39:9" pos:end="39:13">avctx</name><operator pos:start="39:14" pos:end="39:15">-&gt;</operator><name pos:start="39:16" pos:end="39:30">err_recognition</name></name> <operator pos:start="39:32" pos:end="39:32">&amp;</operator> <operator pos:start="39:34" pos:end="39:34">(</operator><name pos:start="39:35" pos:end="39:48">AV_EF_CRCCHECK</name><operator pos:start="39:49" pos:end="39:49">|</operator><name pos:start="39:50" pos:end="39:64">AV_EF_COMPLIANT</name><operator pos:start="39:65" pos:end="39:65">)</operator></expr>)</condition> <block pos:start="39:68" pos:end="51:5">{<block_content pos:start="41:9" pos:end="49:9">

        <if_stmt pos:start="41:9" pos:end="49:9"><if pos:start="41:9" pos:end="49:9">if <condition pos:start="41:12" pos:end="41:47">(<expr pos:start="41:13" pos:end="41:46"><call pos:start="41:13" pos:end="41:46"><name pos:start="41:13" pos:end="41:28">ff_tak_check_crc</name><argument_list pos:start="41:29" pos:end="41:46">(<argument pos:start="41:30" pos:end="41:38"><expr pos:start="41:30" pos:end="41:38"><name pos:start="41:30" pos:end="41:38"><name pos:start="41:30" pos:end="41:32">pkt</name><operator pos:start="41:33" pos:end="41:34">-&gt;</operator><name pos:start="41:35" pos:end="41:38">data</name></name></expr></argument>, <argument pos:start="41:41" pos:end="41:45"><expr pos:start="41:41" pos:end="41:45"><name pos:start="41:41" pos:end="41:45">hsize</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="41:49" pos:end="49:9">{<block_content pos:start="43:13" pos:end="47:43">

            <expr_stmt pos:start="43:13" pos:end="43:55"><expr pos:start="43:13" pos:end="43:54"><call pos:start="43:13" pos:end="43:54"><name pos:start="43:13" pos:end="43:18">av_log</name><argument_list pos:start="43:19" pos:end="43:54">(<argument pos:start="43:20" pos:end="43:24"><expr pos:start="43:20" pos:end="43:24"><name pos:start="43:20" pos:end="43:24">avctx</name></expr></argument>, <argument pos:start="43:27" pos:end="43:38"><expr pos:start="43:27" pos:end="43:38"><name pos:start="43:27" pos:end="43:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="43:41" pos:end="43:53"><expr pos:start="43:41" pos:end="43:53"><literal type="string" pos:start="43:41" pos:end="43:53">"CRC error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="45:13" pos:end="47:43"><if pos:start="45:13" pos:end="47:43">if <condition pos:start="45:16" pos:end="45:55">(<expr pos:start="45:17" pos:end="45:54"><name pos:start="45:17" pos:end="45:38"><name pos:start="45:17" pos:end="45:21">avctx</name><operator pos:start="45:22" pos:end="45:23">-&gt;</operator><name pos:start="45:24" pos:end="45:38">err_recognition</name></name> <operator pos:start="45:40" pos:end="45:40">&amp;</operator> <name pos:start="45:42" pos:end="45:54">AV_EF_EXPLODE</name></expr>)</condition><block type="pseudo" pos:start="47:17" pos:end="47:43"><block_content pos:start="47:17" pos:end="47:43">

                <return pos:start="47:17" pos:end="47:43">return <expr pos:start="47:24" pos:end="47:42"><name pos:start="47:24" pos:end="47:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="55:5" pos:end="63:5"><if pos:start="55:5" pos:end="63:5">if <condition pos:start="55:8" pos:end="57:46">(<expr pos:start="55:9" pos:end="57:45"><name pos:start="55:9" pos:end="55:19"><name pos:start="55:9" pos:end="55:9">s</name><operator pos:start="55:10" pos:end="55:11">-&gt;</operator><name pos:start="55:12" pos:end="55:13">ti</name><operator pos:start="55:14" pos:end="55:14">.</operator><name pos:start="55:15" pos:end="55:19">codec</name></name> <operator pos:start="55:21" pos:end="55:22">!=</operator> <name pos:start="55:24" pos:end="55:44">TAK_CODEC_MONO_STEREO</name> <operator pos:start="55:46" pos:end="55:47">&amp;&amp;</operator>

        <name pos:start="57:9" pos:end="57:19"><name pos:start="57:9" pos:end="57:9">s</name><operator pos:start="57:10" pos:end="57:11">-&gt;</operator><name pos:start="57:12" pos:end="57:13">ti</name><operator pos:start="57:14" pos:end="57:14">.</operator><name pos:start="57:15" pos:end="57:19">codec</name></name> <operator pos:start="57:21" pos:end="57:22">!=</operator> <name pos:start="57:24" pos:end="57:45">TAK_CODEC_MULTICHANNEL</name></expr>)</condition> <block pos:start="57:48" pos:end="63:5">{<block_content pos:start="59:9" pos:end="61:36">

        <expr_stmt pos:start="59:9" pos:end="59:79"><expr pos:start="59:9" pos:end="59:78"><call pos:start="59:9" pos:end="59:78"><name pos:start="59:9" pos:end="59:37">avpriv_report_missing_feature</name><argument_list pos:start="59:38" pos:end="59:78">(<argument pos:start="59:39" pos:end="59:43"><expr pos:start="59:39" pos:end="59:43"><name pos:start="59:39" pos:end="59:43">avctx</name></expr></argument>, <argument pos:start="59:46" pos:end="59:64"><expr pos:start="59:46" pos:end="59:64"><literal type="string" pos:start="59:46" pos:end="59:64">"TAK codec type %d"</literal></expr></argument>, <argument pos:start="59:67" pos:end="59:77"><expr pos:start="59:67" pos:end="59:77"><name pos:start="59:67" pos:end="59:77"><name pos:start="59:67" pos:end="59:67">s</name><operator pos:start="59:68" pos:end="59:69">-&gt;</operator><name pos:start="59:70" pos:end="59:71">ti</name><operator pos:start="59:72" pos:end="59:72">.</operator><name pos:start="59:73" pos:end="59:77">codec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="61:9" pos:end="61:36">return <expr pos:start="61:16" pos:end="61:35"><name pos:start="61:16" pos:end="61:35">AVERROR_PATCHWELCOME</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="65:5" pos:end="73:5"><if pos:start="65:5" pos:end="73:5">if <condition pos:start="65:8" pos:end="65:24">(<expr pos:start="65:9" pos:end="65:23"><name pos:start="65:9" pos:end="65:23"><name pos:start="65:9" pos:end="65:9">s</name><operator pos:start="65:10" pos:end="65:11">-&gt;</operator><name pos:start="65:12" pos:end="65:13">ti</name><operator pos:start="65:14" pos:end="65:14">.</operator><name pos:start="65:15" pos:end="65:23">data_type</name></name></expr>)</condition> <block pos:start="65:26" pos:end="73:5">{<block_content pos:start="67:9" pos:end="71:35">

        <expr_stmt pos:start="67:9" pos:end="69:63"><expr pos:start="67:9" pos:end="69:62"><call pos:start="67:9" pos:end="69:62"><name pos:start="67:9" pos:end="67:14">av_log</name><argument_list pos:start="67:15" pos:end="69:62">(<argument pos:start="67:16" pos:end="67:20"><expr pos:start="67:16" pos:end="67:20"><name pos:start="67:16" pos:end="67:20">avctx</name></expr></argument>, <argument pos:start="67:23" pos:end="67:34"><expr pos:start="67:23" pos:end="67:34"><name pos:start="67:23" pos:end="67:34">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="69:16" pos:end="69:44"><expr pos:start="69:16" pos:end="69:44"><literal type="string" pos:start="69:16" pos:end="69:44">"unsupported data type: %d\n"</literal></expr></argument>, <argument pos:start="69:47" pos:end="69:61"><expr pos:start="69:47" pos:end="69:61"><name pos:start="69:47" pos:end="69:61"><name pos:start="69:47" pos:end="69:47">s</name><operator pos:start="69:48" pos:end="69:49">-&gt;</operator><name pos:start="69:50" pos:end="69:51">ti</name><operator pos:start="69:52" pos:end="69:52">.</operator><name pos:start="69:53" pos:end="69:61">data_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="71:9" pos:end="71:35">return <expr pos:start="71:16" pos:end="71:34"><name pos:start="71:16" pos:end="71:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="75:5" pos:end="83:5"><if pos:start="75:5" pos:end="83:5">if <condition pos:start="75:8" pos:end="75:67">(<expr pos:start="75:9" pos:end="75:66"><name pos:start="75:9" pos:end="75:19"><name pos:start="75:9" pos:end="75:9">s</name><operator pos:start="75:10" pos:end="75:11">-&gt;</operator><name pos:start="75:12" pos:end="75:13">ti</name><operator pos:start="75:14" pos:end="75:14">.</operator><name pos:start="75:15" pos:end="75:19">codec</name></name> <operator pos:start="75:21" pos:end="75:22">==</operator> <name pos:start="75:24" pos:end="75:44">TAK_CODEC_MONO_STEREO</name> <operator pos:start="75:46" pos:end="75:47">&amp;&amp;</operator> <name pos:start="75:49" pos:end="75:62"><name pos:start="75:49" pos:end="75:49">s</name><operator pos:start="75:50" pos:end="75:51">-&gt;</operator><name pos:start="75:52" pos:end="75:53">ti</name><operator pos:start="75:54" pos:end="75:54">.</operator><name pos:start="75:55" pos:end="75:62">channels</name></name> <operator pos:start="75:64" pos:end="75:64">&gt;</operator> <literal type="number" pos:start="75:66" pos:end="75:66">2</literal></expr>)</condition> <block pos:start="75:69" pos:end="83:5">{<block_content pos:start="77:9" pos:end="81:35">

        <expr_stmt pos:start="77:9" pos:end="79:67"><expr pos:start="77:9" pos:end="79:66"><call pos:start="77:9" pos:end="79:66"><name pos:start="77:9" pos:end="77:14">av_log</name><argument_list pos:start="77:15" pos:end="79:66">(<argument pos:start="77:16" pos:end="77:20"><expr pos:start="77:16" pos:end="77:20"><name pos:start="77:16" pos:end="77:20">avctx</name></expr></argument>, <argument pos:start="77:23" pos:end="77:34"><expr pos:start="77:23" pos:end="77:34"><name pos:start="77:23" pos:end="77:34">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="79:16" pos:end="79:49"><expr pos:start="79:16" pos:end="79:49"><literal type="string" pos:start="79:16" pos:end="79:49">"invalid number of channels: %d\n"</literal></expr></argument>, <argument pos:start="79:52" pos:end="79:65"><expr pos:start="79:52" pos:end="79:65"><name pos:start="79:52" pos:end="79:65"><name pos:start="79:52" pos:end="79:52">s</name><operator pos:start="79:53" pos:end="79:54">-&gt;</operator><name pos:start="79:55" pos:end="79:56">ti</name><operator pos:start="79:57" pos:end="79:57">.</operator><name pos:start="79:58" pos:end="79:65">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="81:9" pos:end="81:35">return <expr pos:start="81:16" pos:end="81:34"><name pos:start="81:16" pos:end="81:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="85:5" pos:end="93:5"><if pos:start="85:5" pos:end="93:5">if <condition pos:start="85:8" pos:end="85:27">(<expr pos:start="85:9" pos:end="85:26"><name pos:start="85:9" pos:end="85:22"><name pos:start="85:9" pos:end="85:9">s</name><operator pos:start="85:10" pos:end="85:11">-&gt;</operator><name pos:start="85:12" pos:end="85:13">ti</name><operator pos:start="85:14" pos:end="85:14">.</operator><name pos:start="85:15" pos:end="85:22">channels</name></name> <operator pos:start="85:24" pos:end="85:24">&gt;</operator> <literal type="number" pos:start="85:26" pos:end="85:26">6</literal></expr>)</condition> <block pos:start="85:29" pos:end="93:5">{<block_content pos:start="87:9" pos:end="91:35">

        <expr_stmt pos:start="87:9" pos:end="89:71"><expr pos:start="87:9" pos:end="89:70"><call pos:start="87:9" pos:end="89:70"><name pos:start="87:9" pos:end="87:14">av_log</name><argument_list pos:start="87:15" pos:end="89:70">(<argument pos:start="87:16" pos:end="87:20"><expr pos:start="87:16" pos:end="87:20"><name pos:start="87:16" pos:end="87:20">avctx</name></expr></argument>, <argument pos:start="87:23" pos:end="87:34"><expr pos:start="87:23" pos:end="87:34"><name pos:start="87:23" pos:end="87:34">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="89:16" pos:end="89:53"><expr pos:start="89:16" pos:end="89:53"><literal type="string" pos:start="89:16" pos:end="89:53">"unsupported number of channels: %d\n"</literal></expr></argument>, <argument pos:start="89:56" pos:end="89:69"><expr pos:start="89:56" pos:end="89:69"><name pos:start="89:56" pos:end="89:69"><name pos:start="89:56" pos:end="89:56">s</name><operator pos:start="89:57" pos:end="89:58">-&gt;</operator><name pos:start="89:59" pos:end="89:60">ti</name><operator pos:start="89:61" pos:end="89:61">.</operator><name pos:start="89:62" pos:end="89:69">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="91:9" pos:end="91:35">return <expr pos:start="91:16" pos:end="91:34"><name pos:start="91:16" pos:end="91:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="97:5" pos:end="103:5"><if pos:start="97:5" pos:end="103:5">if <condition pos:start="97:8" pos:end="97:33">(<expr pos:start="97:9" pos:end="97:32"><name pos:start="97:9" pos:end="97:27"><name pos:start="97:9" pos:end="97:9">s</name><operator pos:start="97:10" pos:end="97:11">-&gt;</operator><name pos:start="97:12" pos:end="97:13">ti</name><operator pos:start="97:14" pos:end="97:14">.</operator><name pos:start="97:15" pos:end="97:27">frame_samples</name></name> <operator pos:start="97:29" pos:end="97:30">&lt;=</operator> <literal type="number" pos:start="97:32" pos:end="97:32">0</literal></expr>)</condition> <block pos:start="97:35" pos:end="103:5">{<block_content pos:start="99:9" pos:end="101:35">

        <expr_stmt pos:start="99:9" pos:end="99:79"><expr pos:start="99:9" pos:end="99:78"><call pos:start="99:9" pos:end="99:78"><name pos:start="99:9" pos:end="99:14">av_log</name><argument_list pos:start="99:15" pos:end="99:78">(<argument pos:start="99:16" pos:end="99:20"><expr pos:start="99:16" pos:end="99:20"><name pos:start="99:16" pos:end="99:20">avctx</name></expr></argument>, <argument pos:start="99:23" pos:end="99:34"><expr pos:start="99:23" pos:end="99:34"><name pos:start="99:23" pos:end="99:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="99:37" pos:end="99:77"><expr pos:start="99:37" pos:end="99:77"><literal type="string" pos:start="99:37" pos:end="99:77">"unsupported/invalid number of samples\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="101:9" pos:end="101:35">return <expr pos:start="101:16" pos:end="101:34"><name pos:start="101:16" pos:end="101:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="107:5" pos:end="107:43"><expr pos:start="107:5" pos:end="107:42"><name pos:start="107:5" pos:end="107:30"><name pos:start="107:5" pos:end="107:9">avctx</name><operator pos:start="107:10" pos:end="107:11">-&gt;</operator><name pos:start="107:12" pos:end="107:30">bits_per_raw_sample</name></name> <operator pos:start="107:32" pos:end="107:32">=</operator> <name pos:start="107:34" pos:end="107:42"><name pos:start="107:34" pos:end="107:34">s</name><operator pos:start="107:35" pos:end="107:36">-&gt;</operator><name pos:start="107:37" pos:end="107:38">ti</name><operator pos:start="107:39" pos:end="107:39">.</operator><name pos:start="107:40" pos:end="107:42">bps</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="109:5" pos:end="111:19"><if pos:start="109:5" pos:end="111:19">if <condition pos:start="109:8" pos:end="109:42">(<expr pos:start="109:9" pos:end="109:41"><operator pos:start="109:9" pos:end="109:9">(</operator><name pos:start="109:10" pos:end="109:12">ret</name> <operator pos:start="109:14" pos:end="109:14">=</operator> <call pos:start="109:16" pos:end="109:36"><name pos:start="109:16" pos:end="109:29">set_bps_params</name><argument_list pos:start="109:30" pos:end="109:36">(<argument pos:start="109:31" pos:end="109:35"><expr pos:start="109:31" pos:end="109:35"><name pos:start="109:31" pos:end="109:35">avctx</name></expr></argument>)</argument_list></call><operator pos:start="109:37" pos:end="109:37">)</operator> <operator pos:start="109:39" pos:end="109:39">&lt;</operator> <literal type="number" pos:start="109:41" pos:end="109:41">0</literal></expr>)</condition><block type="pseudo" pos:start="111:9" pos:end="111:19"><block_content pos:start="111:9" pos:end="111:19">

        <return pos:start="111:9" pos:end="111:19">return <expr pos:start="111:16" pos:end="111:18"><name pos:start="111:16" pos:end="111:18">ret</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="113:5" pos:end="119:5"><if pos:start="113:5" pos:end="119:5">if <condition pos:start="113:8" pos:end="113:48">(<expr pos:start="113:9" pos:end="113:47"><name pos:start="113:9" pos:end="113:25"><name pos:start="113:9" pos:end="113:9">s</name><operator pos:start="113:10" pos:end="113:11">-&gt;</operator><name pos:start="113:12" pos:end="113:13">ti</name><operator pos:start="113:14" pos:end="113:14">.</operator><name pos:start="113:15" pos:end="113:25">sample_rate</name></name> <operator pos:start="113:27" pos:end="113:28">!=</operator> <name pos:start="113:30" pos:end="113:47"><name pos:start="113:30" pos:end="113:34">avctx</name><operator pos:start="113:35" pos:end="113:36">-&gt;</operator><name pos:start="113:37" pos:end="113:47">sample_rate</name></name></expr>)</condition> <block pos:start="113:50" pos:end="119:5">{<block_content pos:start="115:9" pos:end="117:38">

        <expr_stmt pos:start="115:9" pos:end="115:47"><expr pos:start="115:9" pos:end="115:46"><name pos:start="115:9" pos:end="115:26"><name pos:start="115:9" pos:end="115:13">avctx</name><operator pos:start="115:14" pos:end="115:15">-&gt;</operator><name pos:start="115:16" pos:end="115:26">sample_rate</name></name> <operator pos:start="115:28" pos:end="115:28">=</operator> <name pos:start="115:30" pos:end="115:46"><name pos:start="115:30" pos:end="115:30">s</name><operator pos:start="115:31" pos:end="115:32">-&gt;</operator><name pos:start="115:33" pos:end="115:34">ti</name><operator pos:start="115:35" pos:end="115:35">.</operator><name pos:start="115:36" pos:end="115:46">sample_rate</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:38"><expr pos:start="117:9" pos:end="117:37"><call pos:start="117:9" pos:end="117:37"><name pos:start="117:9" pos:end="117:30">set_sample_rate_params</name><argument_list pos:start="117:31" pos:end="117:37">(<argument pos:start="117:32" pos:end="117:36"><expr pos:start="117:32" pos:end="117:36"><name pos:start="117:32" pos:end="117:36">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="121:5" pos:end="123:48"><if pos:start="121:5" pos:end="123:48">if <condition pos:start="121:8" pos:end="121:24">(<expr pos:start="121:9" pos:end="121:23"><name pos:start="121:9" pos:end="121:23"><name pos:start="121:9" pos:end="121:9">s</name><operator pos:start="121:10" pos:end="121:11">-&gt;</operator><name pos:start="121:12" pos:end="121:13">ti</name><operator pos:start="121:14" pos:end="121:14">.</operator><name pos:start="121:15" pos:end="121:23">ch_layout</name></name></expr>)</condition><block type="pseudo" pos:start="123:9" pos:end="123:48"><block_content pos:start="123:9" pos:end="123:48">

        <expr_stmt pos:start="123:9" pos:end="123:48"><expr pos:start="123:9" pos:end="123:47"><name pos:start="123:9" pos:end="123:29"><name pos:start="123:9" pos:end="123:13">avctx</name><operator pos:start="123:14" pos:end="123:15">-&gt;</operator><name pos:start="123:16" pos:end="123:29">channel_layout</name></name> <operator pos:start="123:31" pos:end="123:31">=</operator> <name pos:start="123:33" pos:end="123:47"><name pos:start="123:33" pos:end="123:33">s</name><operator pos:start="123:34" pos:end="123:35">-&gt;</operator><name pos:start="123:36" pos:end="123:37">ti</name><operator pos:start="123:38" pos:end="123:38">.</operator><name pos:start="123:39" pos:end="123:47">ch_layout</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:37"><expr pos:start="125:5" pos:end="125:36"><name pos:start="125:5" pos:end="125:19"><name pos:start="125:5" pos:end="125:9">avctx</name><operator pos:start="125:10" pos:end="125:11">-&gt;</operator><name pos:start="125:12" pos:end="125:19">channels</name></name> <operator pos:start="125:21" pos:end="125:21">=</operator> <name pos:start="125:23" pos:end="125:36"><name pos:start="125:23" pos:end="125:23">s</name><operator pos:start="125:24" pos:end="125:25">-&gt;</operator><name pos:start="125:26" pos:end="125:27">ti</name><operator pos:start="125:28" pos:end="125:28">.</operator><name pos:start="125:29" pos:end="125:36">channels</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="129:5" pos:end="131:67"><expr pos:start="129:5" pos:end="131:66"><name pos:start="129:5" pos:end="129:17"><name pos:start="129:5" pos:end="129:5">s</name><operator pos:start="129:6" pos:end="129:7">-&gt;</operator><name pos:start="129:8" pos:end="129:17">nb_samples</name></name> <operator pos:start="129:19" pos:end="129:19">=</operator> <ternary pos:start="129:21" pos:end="131:66"><condition pos:start="129:21" pos:end="129:46"><expr pos:start="129:21" pos:end="129:44"><name pos:start="129:21" pos:end="129:44"><name pos:start="129:21" pos:end="129:21">s</name><operator pos:start="129:22" pos:end="129:23">-&gt;</operator><name pos:start="129:24" pos:end="129:25">ti</name><operator pos:start="129:26" pos:end="129:26">.</operator><name pos:start="129:27" pos:end="129:44">last_frame_samples</name></name></expr> ?</condition><then pos:start="129:48" pos:end="129:71"> <expr pos:start="129:48" pos:end="129:71"><name pos:start="129:48" pos:end="129:71"><name pos:start="129:48" pos:end="129:48">s</name><operator pos:start="129:49" pos:end="129:50">-&gt;</operator><name pos:start="129:51" pos:end="129:52">ti</name><operator pos:start="129:53" pos:end="129:53">.</operator><name pos:start="129:54" pos:end="129:71">last_frame_samples</name></name></expr>

                                             </then><else pos:start="131:46" pos:end="131:66">: <expr pos:start="131:48" pos:end="131:66"><name pos:start="131:48" pos:end="131:66"><name pos:start="131:48" pos:end="131:48">s</name><operator pos:start="131:49" pos:end="131:50">-&gt;</operator><name pos:start="131:51" pos:end="131:52">ti</name><operator pos:start="131:53" pos:end="131:53">.</operator><name pos:start="131:54" pos:end="131:66">frame_samples</name></name></expr></else></ternary></expr>;</expr_stmt>



    <expr_stmt pos:start="135:5" pos:end="135:38"><expr pos:start="135:5" pos:end="135:37"><name pos:start="135:5" pos:end="135:21"><name pos:start="135:5" pos:end="135:9">frame</name><operator pos:start="135:10" pos:end="135:11">-&gt;</operator><name pos:start="135:12" pos:end="135:21">nb_samples</name></name> <operator pos:start="135:23" pos:end="135:23">=</operator> <name pos:start="135:25" pos:end="135:37"><name pos:start="135:25" pos:end="135:25">s</name><operator pos:start="135:26" pos:end="135:27">-&gt;</operator><name pos:start="135:28" pos:end="135:37">nb_samples</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="137:5" pos:end="139:19"><if pos:start="137:5" pos:end="139:19">if <condition pos:start="137:8" pos:end="137:60">(<expr pos:start="137:9" pos:end="137:59"><operator pos:start="137:9" pos:end="137:9">(</operator><name pos:start="137:10" pos:end="137:12">ret</name> <operator pos:start="137:14" pos:end="137:14">=</operator> <call pos:start="137:16" pos:end="137:54"><name pos:start="137:16" pos:end="137:35">ff_thread_get_buffer</name><argument_list pos:start="137:36" pos:end="137:54">(<argument pos:start="137:37" pos:end="137:41"><expr pos:start="137:37" pos:end="137:41"><name pos:start="137:37" pos:end="137:41">avctx</name></expr></argument>, <argument pos:start="137:44" pos:end="137:50"><expr pos:start="137:44" pos:end="137:50"><operator pos:start="137:44" pos:end="137:44">&amp;</operator><name pos:start="137:45" pos:end="137:50">tframe</name></expr></argument>, <argument pos:start="137:53" pos:end="137:53"><expr pos:start="137:53" pos:end="137:53"><literal type="number" pos:start="137:53" pos:end="137:53">0</literal></expr></argument>)</argument_list></call><operator pos:start="137:55" pos:end="137:55">)</operator> <operator pos:start="137:57" pos:end="137:57">&lt;</operator> <literal type="number" pos:start="137:59" pos:end="137:59">0</literal></expr>)</condition><block type="pseudo" pos:start="139:9" pos:end="139:19"><block_content pos:start="139:9" pos:end="139:19">

        <return pos:start="139:9" pos:end="139:19">return <expr pos:start="139:16" pos:end="139:18"><name pos:start="139:16" pos:end="139:18">ret</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="141:5" pos:end="141:34"><expr pos:start="141:5" pos:end="141:33"><call pos:start="141:5" pos:end="141:33"><name pos:start="141:5" pos:end="141:26">ff_thread_finish_setup</name><argument_list pos:start="141:27" pos:end="141:33">(<argument pos:start="141:28" pos:end="141:32"><expr pos:start="141:28" pos:end="141:32"><name pos:start="141:28" pos:end="141:32">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="145:5" pos:end="179:5"><if pos:start="145:5" pos:end="173:5">if <condition pos:start="145:8" pos:end="145:41">(<expr pos:start="145:9" pos:end="145:40"><name pos:start="145:9" pos:end="145:34"><name pos:start="145:9" pos:end="145:13">avctx</name><operator pos:start="145:14" pos:end="145:15">-&gt;</operator><name pos:start="145:16" pos:end="145:34">bits_per_raw_sample</name></name> <operator pos:start="145:36" pos:end="145:37">&lt;=</operator> <literal type="number" pos:start="145:39" pos:end="145:40">16</literal></expr>)</condition> <block pos:start="145:43" pos:end="173:5">{<block_content pos:start="147:9" pos:end="171:23">

        <decl_stmt pos:start="147:9" pos:end="151:73"><decl pos:start="147:9" pos:end="151:72"><type pos:start="147:9" pos:end="147:11"><name pos:start="147:9" pos:end="147:11">int</name></type> <name pos:start="147:13" pos:end="147:20">buf_size</name> <init pos:start="147:22" pos:end="151:72">= <expr pos:start="147:24" pos:end="151:72"><call pos:start="147:24" pos:end="151:72"><name pos:start="147:24" pos:end="147:49">av_samples_get_buffer_size</name><argument_list pos:start="147:50" pos:end="151:72">(<argument pos:start="147:51" pos:end="147:54"><expr pos:start="147:51" pos:end="147:54"><name pos:start="147:51" pos:end="147:54">NULL</name></expr></argument>, <argument pos:start="147:57" pos:end="147:71"><expr pos:start="147:57" pos:end="147:71"><name pos:start="147:57" pos:end="147:71"><name pos:start="147:57" pos:end="147:61">avctx</name><operator pos:start="147:62" pos:end="147:63">-&gt;</operator><name pos:start="147:64" pos:end="147:71">channels</name></name></expr></argument>,

                                                  <argument pos:start="149:51" pos:end="149:63"><expr pos:start="149:51" pos:end="149:63"><name pos:start="149:51" pos:end="149:63"><name pos:start="149:51" pos:end="149:51">s</name><operator pos:start="149:52" pos:end="149:53">-&gt;</operator><name pos:start="149:54" pos:end="149:63">nb_samples</name></name></expr></argument>,

                                                  <argument pos:start="151:51" pos:end="151:68"><expr pos:start="151:51" pos:end="151:68"><name pos:start="151:51" pos:end="151:68">AV_SAMPLE_FMT_S32P</name></expr></argument>, <argument pos:start="151:71" pos:end="151:71"><expr pos:start="151:71" pos:end="151:71"><literal type="number" pos:start="151:71" pos:end="151:71">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="153:9" pos:end="155:28"><if pos:start="153:9" pos:end="155:28">if <condition pos:start="153:12" pos:end="153:25">(<expr pos:start="153:13" pos:end="153:24"><name pos:start="153:13" pos:end="153:20">buf_size</name> <operator pos:start="153:22" pos:end="153:22">&lt;</operator> <literal type="number" pos:start="153:24" pos:end="153:24">0</literal></expr>)</condition><block type="pseudo" pos:start="155:13" pos:end="155:28"><block_content pos:start="155:13" pos:end="155:28">

            <return pos:start="155:13" pos:end="155:28">return <expr pos:start="155:20" pos:end="155:27"><name pos:start="155:20" pos:end="155:27">buf_size</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="157:9" pos:end="157:76"><expr pos:start="157:9" pos:end="157:75"><call pos:start="157:9" pos:end="157:75"><name pos:start="157:9" pos:end="157:22">av_fast_malloc</name><argument_list pos:start="157:23" pos:end="157:75">(<argument pos:start="157:24" pos:end="157:40"><expr pos:start="157:24" pos:end="157:40"><operator pos:start="157:24" pos:end="157:24">&amp;</operator><name pos:start="157:25" pos:end="157:40"><name pos:start="157:25" pos:end="157:25">s</name><operator pos:start="157:26" pos:end="157:27">-&gt;</operator><name pos:start="157:28" pos:end="157:40">decode_buffer</name></name></expr></argument>, <argument pos:start="157:43" pos:end="157:64"><expr pos:start="157:43" pos:end="157:64"><operator pos:start="157:43" pos:end="157:43">&amp;</operator><name pos:start="157:44" pos:end="157:64"><name pos:start="157:44" pos:end="157:44">s</name><operator pos:start="157:45" pos:end="157:46">-&gt;</operator><name pos:start="157:47" pos:end="157:64">decode_buffer_size</name></name></expr></argument>, <argument pos:start="157:67" pos:end="157:74"><expr pos:start="157:67" pos:end="157:74"><name pos:start="157:67" pos:end="157:74">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="159:9" pos:end="161:35"><if pos:start="159:9" pos:end="161:35">if <condition pos:start="159:12" pos:end="159:30">(<expr pos:start="159:13" pos:end="159:29"><operator pos:start="159:13" pos:end="159:13">!</operator><name pos:start="159:14" pos:end="159:29"><name pos:start="159:14" pos:end="159:14">s</name><operator pos:start="159:15" pos:end="159:16">-&gt;</operator><name pos:start="159:17" pos:end="159:29">decode_buffer</name></name></expr>)</condition><block type="pseudo" pos:start="161:13" pos:end="161:35"><block_content pos:start="161:13" pos:end="161:35">

            <return pos:start="161:13" pos:end="161:35">return <expr pos:start="161:20" pos:end="161:34"><call pos:start="161:20" pos:end="161:34"><name pos:start="161:20" pos:end="161:26">AVERROR</name><argument_list pos:start="161:27" pos:end="161:34">(<argument pos:start="161:28" pos:end="161:33"><expr pos:start="161:28" pos:end="161:33"><name pos:start="161:28" pos:end="161:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="163:9" pos:end="167:75"><expr pos:start="163:9" pos:end="167:74"><name pos:start="163:9" pos:end="163:11">ret</name> <operator pos:start="163:13" pos:end="163:13">=</operator> <call pos:start="163:15" pos:end="167:74"><name pos:start="163:15" pos:end="163:36">av_samples_fill_arrays</name><argument_list pos:start="163:37" pos:end="167:74">(<argument pos:start="163:38" pos:end="163:59"><expr pos:start="163:38" pos:end="163:59"><operator pos:start="163:38" pos:end="163:38">(</operator><name pos:start="163:39" pos:end="163:45">uint8_t</name> <operator pos:start="163:47" pos:end="163:47">*</operator><operator pos:start="163:48" pos:end="163:48">*</operator><operator pos:start="163:49" pos:end="163:49">)</operator><name pos:start="163:50" pos:end="163:59"><name pos:start="163:50" pos:end="163:50">s</name><operator pos:start="163:51" pos:end="163:52">-&gt;</operator><name pos:start="163:53" pos:end="163:59">decoded</name></name></expr></argument>, <argument pos:start="163:62" pos:end="163:65"><expr pos:start="163:62" pos:end="163:65"><name pos:start="163:62" pos:end="163:65">NULL</name></expr></argument>,

                                     <argument pos:start="165:38" pos:end="165:53"><expr pos:start="165:38" pos:end="165:53"><name pos:start="165:38" pos:end="165:53"><name pos:start="165:38" pos:end="165:38">s</name><operator pos:start="165:39" pos:end="165:40">-&gt;</operator><name pos:start="165:41" pos:end="165:53">decode_buffer</name></name></expr></argument>, <argument pos:start="165:56" pos:end="165:70"><expr pos:start="165:56" pos:end="165:70"><name pos:start="165:56" pos:end="165:70"><name pos:start="165:56" pos:end="165:60">avctx</name><operator pos:start="165:61" pos:end="165:62">-&gt;</operator><name pos:start="165:63" pos:end="165:70">channels</name></name></expr></argument>,

                                     <argument pos:start="167:38" pos:end="167:50"><expr pos:start="167:38" pos:end="167:50"><name pos:start="167:38" pos:end="167:50"><name pos:start="167:38" pos:end="167:38">s</name><operator pos:start="167:39" pos:end="167:40">-&gt;</operator><name pos:start="167:41" pos:end="167:50">nb_samples</name></name></expr></argument>, <argument pos:start="167:53" pos:end="167:70"><expr pos:start="167:53" pos:end="167:70"><name pos:start="167:53" pos:end="167:70">AV_SAMPLE_FMT_S32P</name></expr></argument>, <argument pos:start="167:73" pos:end="167:73"><expr pos:start="167:73" pos:end="167:73"><literal type="number" pos:start="167:73" pos:end="167:73">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="169:9" pos:end="171:23"><if pos:start="169:9" pos:end="171:23">if <condition pos:start="169:12" pos:end="169:20">(<expr pos:start="169:13" pos:end="169:19"><name pos:start="169:13" pos:end="169:15">ret</name> <operator pos:start="169:17" pos:end="169:17">&lt;</operator> <literal type="number" pos:start="169:19" pos:end="169:19">0</literal></expr>)</condition><block type="pseudo" pos:start="171:13" pos:end="171:23"><block_content pos:start="171:13" pos:end="171:23">

            <return pos:start="171:13" pos:end="171:23">return <expr pos:start="171:20" pos:end="171:22"><name pos:start="171:20" pos:end="171:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="173:7" pos:end="179:5">else <block pos:start="173:12" pos:end="179:5">{<block_content pos:start="175:9" pos:end="177:69">

        <for pos:start="175:9" pos:end="177:69">for <control pos:start="175:13" pos:end="175:54">(<init pos:start="175:14" pos:end="175:22"><expr pos:start="175:14" pos:end="175:21"><name pos:start="175:14" pos:end="175:17">chan</name> <operator pos:start="175:19" pos:end="175:19">=</operator> <literal type="number" pos:start="175:21" pos:end="175:21">0</literal></expr>;</init> <condition pos:start="175:24" pos:end="175:46"><expr pos:start="175:24" pos:end="175:45"><name pos:start="175:24" pos:end="175:27">chan</name> <operator pos:start="175:29" pos:end="175:29">&lt;</operator> <name pos:start="175:31" pos:end="175:45"><name pos:start="175:31" pos:end="175:35">avctx</name><operator pos:start="175:36" pos:end="175:37">-&gt;</operator><name pos:start="175:38" pos:end="175:45">channels</name></name></expr>;</condition> <incr pos:start="175:48" pos:end="175:53"><expr pos:start="175:48" pos:end="175:53"><name pos:start="175:48" pos:end="175:51">chan</name><operator pos:start="175:52" pos:end="175:53">++</operator></expr></incr>)</control><block type="pseudo" pos:start="177:13" pos:end="177:69"><block_content pos:start="177:13" pos:end="177:69">

            <expr_stmt pos:start="177:13" pos:end="177:69"><expr pos:start="177:13" pos:end="177:68"><name pos:start="177:13" pos:end="177:28"><name pos:start="177:13" pos:end="177:13">s</name><operator pos:start="177:14" pos:end="177:15">-&gt;</operator><name pos:start="177:16" pos:end="177:22">decoded</name><index pos:start="177:23" pos:end="177:28">[<expr pos:start="177:24" pos:end="177:27"><name pos:start="177:24" pos:end="177:27">chan</name></expr>]</index></name> <operator pos:start="177:30" pos:end="177:30">=</operator> <operator pos:start="177:32" pos:end="177:32">(</operator><name pos:start="177:33" pos:end="177:39">int32_t</name> <operator pos:start="177:41" pos:end="177:41">*</operator><operator pos:start="177:42" pos:end="177:42">)</operator><name pos:start="177:43" pos:end="177:68"><name pos:start="177:43" pos:end="177:47">frame</name><operator pos:start="177:48" pos:end="177:49">-&gt;</operator><name pos:start="177:50" pos:end="177:62">extended_data</name><index pos:start="177:63" pos:end="177:68">[<expr pos:start="177:64" pos:end="177:67"><name pos:start="177:64" pos:end="177:67">chan</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="183:5" pos:end="383:5"><if pos:start="183:5" pos:end="195:5">if <condition pos:start="183:8" pos:end="183:27">(<expr pos:start="183:9" pos:end="183:26"><name pos:start="183:9" pos:end="183:21"><name pos:start="183:9" pos:end="183:9">s</name><operator pos:start="183:10" pos:end="183:11">-&gt;</operator><name pos:start="183:12" pos:end="183:21">nb_samples</name></name> <operator pos:start="183:23" pos:end="183:23">&lt;</operator> <literal type="number" pos:start="183:25" pos:end="183:26">16</literal></expr>)</condition> <block pos:start="183:29" pos:end="195:5">{<block_content pos:start="185:9" pos:end="193:9">

        <for pos:start="185:9" pos:end="193:9">for <control pos:start="185:13" pos:end="185:54">(<init pos:start="185:14" pos:end="185:22"><expr pos:start="185:14" pos:end="185:21"><name pos:start="185:14" pos:end="185:17">chan</name> <operator pos:start="185:19" pos:end="185:19">=</operator> <literal type="number" pos:start="185:21" pos:end="185:21">0</literal></expr>;</init> <condition pos:start="185:24" pos:end="185:46"><expr pos:start="185:24" pos:end="185:45"><name pos:start="185:24" pos:end="185:27">chan</name> <operator pos:start="185:29" pos:end="185:29">&lt;</operator> <name pos:start="185:31" pos:end="185:45"><name pos:start="185:31" pos:end="185:35">avctx</name><operator pos:start="185:36" pos:end="185:37">-&gt;</operator><name pos:start="185:38" pos:end="185:45">channels</name></name></expr>;</condition> <incr pos:start="185:48" pos:end="185:53"><expr pos:start="185:48" pos:end="185:53"><name pos:start="185:48" pos:end="185:51">chan</name><operator pos:start="185:52" pos:end="185:53">++</operator></expr></incr>)</control> <block pos:start="185:56" pos:end="193:9">{<block_content pos:start="187:13" pos:end="191:71">

            <decl_stmt pos:start="187:13" pos:end="187:48"><decl pos:start="187:13" pos:end="187:47"><type pos:start="187:13" pos:end="187:21"><name pos:start="187:13" pos:end="187:19">int32_t</name> <modifier pos:start="187:21" pos:end="187:21">*</modifier></type><name pos:start="187:22" pos:end="187:28">decoded</name> <init pos:start="187:30" pos:end="187:47">= <expr pos:start="187:32" pos:end="187:47"><name pos:start="187:32" pos:end="187:47"><name pos:start="187:32" pos:end="187:32">s</name><operator pos:start="187:33" pos:end="187:34">-&gt;</operator><name pos:start="187:35" pos:end="187:41">decoded</name><index pos:start="187:42" pos:end="187:47">[<expr pos:start="187:43" pos:end="187:46"><name pos:start="187:43" pos:end="187:46">chan</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <for pos:start="189:13" pos:end="191:71">for <control pos:start="189:17" pos:end="189:47">(<init pos:start="189:18" pos:end="189:23"><expr pos:start="189:18" pos:end="189:22"><name pos:start="189:18" pos:end="189:18">i</name> <operator pos:start="189:20" pos:end="189:20">=</operator> <literal type="number" pos:start="189:22" pos:end="189:22">0</literal></expr>;</init> <condition pos:start="189:25" pos:end="189:42"><expr pos:start="189:25" pos:end="189:41"><name pos:start="189:25" pos:end="189:25">i</name> <operator pos:start="189:27" pos:end="189:27">&lt;</operator> <name pos:start="189:29" pos:end="189:41"><name pos:start="189:29" pos:end="189:29">s</name><operator pos:start="189:30" pos:end="189:31">-&gt;</operator><name pos:start="189:32" pos:end="189:41">nb_samples</name></name></expr>;</condition> <incr pos:start="189:44" pos:end="189:46"><expr pos:start="189:44" pos:end="189:46"><name pos:start="189:44" pos:end="189:44">i</name><operator pos:start="189:45" pos:end="189:46">++</operator></expr></incr>)</control><block type="pseudo" pos:start="191:17" pos:end="191:71"><block_content pos:start="191:17" pos:end="191:71">

                <expr_stmt pos:start="191:17" pos:end="191:71"><expr pos:start="191:17" pos:end="191:70"><name pos:start="191:17" pos:end="191:26"><name pos:start="191:17" pos:end="191:23">decoded</name><index pos:start="191:24" pos:end="191:26">[<expr pos:start="191:25" pos:end="191:25"><name pos:start="191:25" pos:end="191:25">i</name></expr>]</index></name> <operator pos:start="191:28" pos:end="191:28">=</operator> <call pos:start="191:30" pos:end="191:70"><name pos:start="191:30" pos:end="191:38">get_sbits</name><argument_list pos:start="191:39" pos:end="191:70">(<argument pos:start="191:40" pos:end="191:41"><expr pos:start="191:40" pos:end="191:41"><name pos:start="191:40" pos:end="191:41">gb</name></expr></argument>, <argument pos:start="191:44" pos:end="191:69"><expr pos:start="191:44" pos:end="191:69"><name pos:start="191:44" pos:end="191:69"><name pos:start="191:44" pos:end="191:48">avctx</name><operator pos:start="191:49" pos:end="191:50">-&gt;</operator><name pos:start="191:51" pos:end="191:69">bits_per_raw_sample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></for>

    </block_content>}</block></if> <else pos:start="195:7" pos:end="383:5">else <block pos:start="195:12" pos:end="383:5">{<block_content pos:start="197:9" pos:end="381:9">

        <if_stmt pos:start="197:9" pos:end="359:9"><if pos:start="197:9" pos:end="227:9">if <condition pos:start="197:12" pos:end="197:49">(<expr pos:start="197:13" pos:end="197:48"><name pos:start="197:13" pos:end="197:23"><name pos:start="197:13" pos:end="197:13">s</name><operator pos:start="197:14" pos:end="197:15">-&gt;</operator><name pos:start="197:16" pos:end="197:17">ti</name><operator pos:start="197:18" pos:end="197:18">.</operator><name pos:start="197:19" pos:end="197:23">codec</name></name> <operator pos:start="197:25" pos:end="197:26">==</operator> <name pos:start="197:28" pos:end="197:48">TAK_CODEC_MONO_STEREO</name></expr>)</condition> <block pos:start="197:51" pos:end="227:9">{<block_content pos:start="199:13" pos:end="225:13">

            <for pos:start="199:13" pos:end="203:31">for <control pos:start="199:17" pos:end="199:58">(<init pos:start="199:18" pos:end="199:26"><expr pos:start="199:18" pos:end="199:25"><name pos:start="199:18" pos:end="199:21">chan</name> <operator pos:start="199:23" pos:end="199:23">=</operator> <literal type="number" pos:start="199:25" pos:end="199:25">0</literal></expr>;</init> <condition pos:start="199:28" pos:end="199:50"><expr pos:start="199:28" pos:end="199:49"><name pos:start="199:28" pos:end="199:31">chan</name> <operator pos:start="199:33" pos:end="199:33">&lt;</operator> <name pos:start="199:35" pos:end="199:49"><name pos:start="199:35" pos:end="199:39">avctx</name><operator pos:start="199:40" pos:end="199:41">-&gt;</operator><name pos:start="199:42" pos:end="199:49">channels</name></name></expr>;</condition> <incr pos:start="199:52" pos:end="199:57"><expr pos:start="199:52" pos:end="199:57"><name pos:start="199:52" pos:end="199:55">chan</name><operator pos:start="199:56" pos:end="199:57">++</operator></expr></incr>)</control><block type="pseudo" pos:start="201:17" pos:end="203:31"><block_content pos:start="201:17" pos:end="203:31">

                <if_stmt pos:start="201:17" pos:end="203:31"><if pos:start="201:17" pos:end="203:31">if <condition pos:start="201:20" pos:end="201:50">(<expr pos:start="201:21" pos:end="201:49"><name pos:start="201:21" pos:end="201:23">ret</name> <operator pos:start="201:25" pos:end="201:25">=</operator> <call pos:start="201:27" pos:end="201:49"><name pos:start="201:27" pos:end="201:40">decode_channel</name><argument_list pos:start="201:41" pos:end="201:49">(<argument pos:start="201:42" pos:end="201:42"><expr pos:start="201:42" pos:end="201:42"><name pos:start="201:42" pos:end="201:42">s</name></expr></argument>, <argument pos:start="201:45" pos:end="201:48"><expr pos:start="201:45" pos:end="201:48"><name pos:start="201:45" pos:end="201:48">chan</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="203:21" pos:end="203:31"><block_content pos:start="203:21" pos:end="203:31">

                    <return pos:start="203:21" pos:end="203:31">return <expr pos:start="203:28" pos:end="203:30"><name pos:start="203:28" pos:end="203:30">ret</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>



            <if_stmt pos:start="207:13" pos:end="225:13"><if pos:start="207:13" pos:end="225:13">if <condition pos:start="207:16" pos:end="207:37">(<expr pos:start="207:17" pos:end="207:36"><name pos:start="207:17" pos:end="207:31"><name pos:start="207:17" pos:end="207:21">avctx</name><operator pos:start="207:22" pos:end="207:23">-&gt;</operator><name pos:start="207:24" pos:end="207:31">channels</name></name> <operator pos:start="207:33" pos:end="207:34">==</operator> <literal type="number" pos:start="207:36" pos:end="207:36">2</literal></expr>)</condition> <block pos:start="207:39" pos:end="225:13">{<block_content pos:start="209:17" pos:end="223:31">

                <expr_stmt pos:start="209:17" pos:end="209:54"><expr pos:start="209:17" pos:end="209:53"><name pos:start="209:17" pos:end="209:31"><name pos:start="209:17" pos:end="209:17">s</name><operator pos:start="209:18" pos:end="209:19">-&gt;</operator><name pos:start="209:20" pos:end="209:31">nb_subframes</name></name> <operator pos:start="209:33" pos:end="209:33">=</operator> <call pos:start="209:35" pos:end="209:49"><name pos:start="209:35" pos:end="209:42">get_bits</name><argument_list pos:start="209:43" pos:end="209:49">(<argument pos:start="209:44" pos:end="209:45"><expr pos:start="209:44" pos:end="209:45"><name pos:start="209:44" pos:end="209:45">gb</name></expr></argument>, <argument pos:start="209:48" pos:end="209:48"><expr pos:start="209:48" pos:end="209:48"><literal type="number" pos:start="209:48" pos:end="209:48">1</literal></expr></argument>)</argument_list></call> <operator pos:start="209:51" pos:end="209:51">+</operator> <literal type="number" pos:start="209:53" pos:end="209:53">1</literal></expr>;</expr_stmt>

                <if_stmt pos:start="211:17" pos:end="215:17"><if pos:start="211:17" pos:end="215:17">if <condition pos:start="211:20" pos:end="211:40">(<expr pos:start="211:21" pos:end="211:39"><name pos:start="211:21" pos:end="211:35"><name pos:start="211:21" pos:end="211:21">s</name><operator pos:start="211:22" pos:end="211:23">-&gt;</operator><name pos:start="211:24" pos:end="211:35">nb_subframes</name></name> <operator pos:start="211:37" pos:end="211:37">&gt;</operator> <literal type="number" pos:start="211:39" pos:end="211:39">1</literal></expr>)</condition> <block pos:start="211:42" pos:end="215:17">{<block_content pos:start="213:21" pos:end="213:57">

                    <expr_stmt pos:start="213:21" pos:end="213:57"><expr pos:start="213:21" pos:end="213:56"><name pos:start="213:21" pos:end="213:38"><name pos:start="213:21" pos:end="213:21">s</name><operator pos:start="213:22" pos:end="213:23">-&gt;</operator><name pos:start="213:24" pos:end="213:35">subframe_len</name><index pos:start="213:36" pos:end="213:38">[<expr pos:start="213:37" pos:end="213:37"><literal type="number" pos:start="213:37" pos:end="213:37">1</literal></expr>]</index></name> <operator pos:start="213:40" pos:end="213:40">=</operator> <call pos:start="213:42" pos:end="213:56"><name pos:start="213:42" pos:end="213:49">get_bits</name><argument_list pos:start="213:50" pos:end="213:56">(<argument pos:start="213:51" pos:end="213:52"><expr pos:start="213:51" pos:end="213:52"><name pos:start="213:51" pos:end="213:52">gb</name></expr></argument>, <argument pos:start="213:55" pos:end="213:55"><expr pos:start="213:55" pos:end="213:55"><literal type="number" pos:start="213:55" pos:end="213:55">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="219:17" pos:end="219:43"><expr pos:start="219:17" pos:end="219:42"><name pos:start="219:17" pos:end="219:24"><name pos:start="219:17" pos:end="219:17">s</name><operator pos:start="219:18" pos:end="219:19">-&gt;</operator><name pos:start="219:20" pos:end="219:24">dmode</name></name> <operator pos:start="219:26" pos:end="219:26">=</operator> <call pos:start="219:28" pos:end="219:42"><name pos:start="219:28" pos:end="219:35">get_bits</name><argument_list pos:start="219:36" pos:end="219:42">(<argument pos:start="219:37" pos:end="219:38"><expr pos:start="219:37" pos:end="219:38"><name pos:start="219:37" pos:end="219:38">gb</name></expr></argument>, <argument pos:start="219:41" pos:end="219:41"><expr pos:start="219:41" pos:end="219:41"><literal type="number" pos:start="219:41" pos:end="219:41">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="221:17" pos:end="223:31"><if pos:start="221:17" pos:end="223:31">if <condition pos:start="221:20" pos:end="221:66">(<expr pos:start="221:21" pos:end="221:65"><name pos:start="221:21" pos:end="221:23">ret</name> <operator pos:start="221:25" pos:end="221:25">=</operator> <call pos:start="221:27" pos:end="221:65"><name pos:start="221:27" pos:end="221:37">decorrelate</name><argument_list pos:start="221:38" pos:end="221:65">(<argument pos:start="221:39" pos:end="221:39"><expr pos:start="221:39" pos:end="221:39"><name pos:start="221:39" pos:end="221:39">s</name></expr></argument>, <argument pos:start="221:42" pos:end="221:42"><expr pos:start="221:42" pos:end="221:42"><literal type="number" pos:start="221:42" pos:end="221:42">0</literal></expr></argument>, <argument pos:start="221:45" pos:end="221:45"><expr pos:start="221:45" pos:end="221:45"><literal type="number" pos:start="221:45" pos:end="221:45">1</literal></expr></argument>, <argument pos:start="221:48" pos:end="221:64"><expr pos:start="221:48" pos:end="221:64"><name pos:start="221:48" pos:end="221:60"><name pos:start="221:48" pos:end="221:48">s</name><operator pos:start="221:49" pos:end="221:50">-&gt;</operator><name pos:start="221:51" pos:end="221:60">nb_samples</name></name> <operator pos:start="221:62" pos:end="221:62">-</operator> <literal type="number" pos:start="221:64" pos:end="221:64">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="223:21" pos:end="223:31"><block_content pos:start="223:21" pos:end="223:31">

                    <return pos:start="223:21" pos:end="223:31">return <expr pos:start="223:28" pos:end="223:30"><name pos:start="223:28" pos:end="223:30">ret</name></expr>;</return></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="227:11" pos:end="359:9">else if <condition pos:start="227:19" pos:end="227:57">(<expr pos:start="227:20" pos:end="227:56"><name pos:start="227:20" pos:end="227:30"><name pos:start="227:20" pos:end="227:20">s</name><operator pos:start="227:21" pos:end="227:22">-&gt;</operator><name pos:start="227:23" pos:end="227:24">ti</name><operator pos:start="227:25" pos:end="227:25">.</operator><name pos:start="227:26" pos:end="227:30">codec</name></name> <operator pos:start="227:32" pos:end="227:33">==</operator> <name pos:start="227:35" pos:end="227:56">TAK_CODEC_MULTICHANNEL</name></expr>)</condition> <block pos:start="227:59" pos:end="359:9">{<block_content pos:start="229:13" pos:end="357:13">

            <if_stmt pos:start="229:13" pos:end="321:13"><if pos:start="229:13" pos:end="309:13">if <condition pos:start="229:16" pos:end="229:30">(<expr pos:start="229:17" pos:end="229:29"><call pos:start="229:17" pos:end="229:29"><name pos:start="229:17" pos:end="229:25">get_bits1</name><argument_list pos:start="229:26" pos:end="229:29">(<argument pos:start="229:27" pos:end="229:28"><expr pos:start="229:27" pos:end="229:28"><name pos:start="229:27" pos:end="229:28">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="229:32" pos:end="309:13">{<block_content pos:start="231:17" pos:end="307:17">

                <decl_stmt pos:start="231:17" pos:end="231:32"><decl pos:start="231:17" pos:end="231:31"><type pos:start="231:17" pos:end="231:19"><name pos:start="231:17" pos:end="231:19">int</name></type> <name pos:start="231:21" pos:end="231:27">ch_mask</name> <init pos:start="231:29" pos:end="231:31">= <expr pos:start="231:31" pos:end="231:31"><literal type="number" pos:start="231:31" pos:end="231:31">0</literal></expr></init></decl>;</decl_stmt>



                <expr_stmt pos:start="235:17" pos:end="235:43"><expr pos:start="235:17" pos:end="235:42"><name pos:start="235:17" pos:end="235:20">chan</name> <operator pos:start="235:22" pos:end="235:22">=</operator> <call pos:start="235:24" pos:end="235:38"><name pos:start="235:24" pos:end="235:31">get_bits</name><argument_list pos:start="235:32" pos:end="235:38">(<argument pos:start="235:33" pos:end="235:34"><expr pos:start="235:33" pos:end="235:34"><name pos:start="235:33" pos:end="235:34">gb</name></expr></argument>, <argument pos:start="235:37" pos:end="235:37"><expr pos:start="235:37" pos:end="235:37"><literal type="number" pos:start="235:37" pos:end="235:37">4</literal></expr></argument>)</argument_list></call> <operator pos:start="235:40" pos:end="235:40">+</operator> <literal type="number" pos:start="235:42" pos:end="235:42">1</literal></expr>;</expr_stmt>

                <if_stmt pos:start="237:17" pos:end="239:47"><if pos:start="237:17" pos:end="239:47">if <condition pos:start="237:20" pos:end="237:43">(<expr pos:start="237:21" pos:end="237:42"><name pos:start="237:21" pos:end="237:24">chan</name> <operator pos:start="237:26" pos:end="237:26">&gt;</operator> <name pos:start="237:28" pos:end="237:42"><name pos:start="237:28" pos:end="237:32">avctx</name><operator pos:start="237:33" pos:end="237:34">-&gt;</operator><name pos:start="237:35" pos:end="237:42">channels</name></name></expr>)</condition><block type="pseudo" pos:start="239:21" pos:end="239:47"><block_content pos:start="239:21" pos:end="239:47">

                    <return pos:start="239:21" pos:end="239:47">return <expr pos:start="239:28" pos:end="239:46"><name pos:start="239:28" pos:end="239:46">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



                <for pos:start="243:17" pos:end="307:17">for <control pos:start="243:21" pos:end="243:42">(<init pos:start="243:22" pos:end="243:27"><expr pos:start="243:22" pos:end="243:26"><name pos:start="243:22" pos:end="243:22">i</name> <operator pos:start="243:24" pos:end="243:24">=</operator> <literal type="number" pos:start="243:26" pos:end="243:26">0</literal></expr>;</init> <condition pos:start="243:29" pos:end="243:37"><expr pos:start="243:29" pos:end="243:36"><name pos:start="243:29" pos:end="243:29">i</name> <operator pos:start="243:31" pos:end="243:31">&lt;</operator> <name pos:start="243:33" pos:end="243:36">chan</name></expr>;</condition> <incr pos:start="243:39" pos:end="243:41"><expr pos:start="243:39" pos:end="243:41"><name pos:start="243:39" pos:end="243:39">i</name><operator pos:start="243:40" pos:end="243:41">++</operator></expr></incr>)</control> <block pos:start="243:44" pos:end="307:17">{<block_content pos:start="245:21" pos:end="305:41">

                    <decl_stmt pos:start="245:21" pos:end="245:47"><decl pos:start="245:21" pos:end="245:46"><type pos:start="245:21" pos:end="245:23"><name pos:start="245:21" pos:end="245:23">int</name></type> <name pos:start="245:25" pos:end="245:28">nbit</name> <init pos:start="245:30" pos:end="245:46">= <expr pos:start="245:32" pos:end="245:46"><call pos:start="245:32" pos:end="245:46"><name pos:start="245:32" pos:end="245:39">get_bits</name><argument_list pos:start="245:40" pos:end="245:46">(<argument pos:start="245:41" pos:end="245:42"><expr pos:start="245:41" pos:end="245:42"><name pos:start="245:41" pos:end="245:42">gb</name></expr></argument>, <argument pos:start="245:45" pos:end="245:45"><expr pos:start="245:45" pos:end="245:45"><literal type="number" pos:start="245:45" pos:end="245:45">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



                    <if_stmt pos:start="249:21" pos:end="251:51"><if pos:start="249:21" pos:end="251:51">if <condition pos:start="249:24" pos:end="249:48">(<expr pos:start="249:25" pos:end="249:47"><name pos:start="249:25" pos:end="249:28">nbit</name> <operator pos:start="249:30" pos:end="249:31">&gt;=</operator> <name pos:start="249:33" pos:end="249:47"><name pos:start="249:33" pos:end="249:37">avctx</name><operator pos:start="249:38" pos:end="249:39">-&gt;</operator><name pos:start="249:40" pos:end="249:47">channels</name></name></expr>)</condition><block type="pseudo" pos:start="251:25" pos:end="251:51"><block_content pos:start="251:25" pos:end="251:51">

                        <return pos:start="251:25" pos:end="251:51">return <expr pos:start="251:32" pos:end="251:50"><name pos:start="251:32" pos:end="251:50">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



                    <if_stmt pos:start="255:21" pos:end="257:51"><if pos:start="255:21" pos:end="257:51">if <condition pos:start="255:24" pos:end="255:44">(<expr pos:start="255:25" pos:end="255:43"><name pos:start="255:25" pos:end="255:31">ch_mask</name> <operator pos:start="255:33" pos:end="255:33">&amp;</operator> <literal type="number" pos:start="255:35" pos:end="255:35">1</literal> <operator pos:start="255:37" pos:end="255:38">&lt;&lt;</operator> <name pos:start="255:40" pos:end="255:43">nbit</name></expr>)</condition><block type="pseudo" pos:start="257:25" pos:end="257:51"><block_content pos:start="257:25" pos:end="257:51">

                        <return pos:start="257:25" pos:end="257:51">return <expr pos:start="257:32" pos:end="257:50"><name pos:start="257:32" pos:end="257:50">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



                    <expr_stmt pos:start="261:21" pos:end="261:60"><expr pos:start="261:21" pos:end="261:59"><name pos:start="261:21" pos:end="261:35"><name pos:start="261:21" pos:end="261:21">s</name><operator pos:start="261:22" pos:end="261:23">-&gt;</operator><name pos:start="261:24" pos:end="261:32">mcdparams</name><index pos:start="261:33" pos:end="261:35">[<expr pos:start="261:34" pos:end="261:34"><name pos:start="261:34" pos:end="261:34">i</name></expr>]</index></name><operator pos:start="261:36" pos:end="261:36">.</operator><name pos:start="261:37" pos:end="261:43">present</name> <operator pos:start="261:45" pos:end="261:45">=</operator> <call pos:start="261:47" pos:end="261:59"><name pos:start="261:47" pos:end="261:55">get_bits1</name><argument_list pos:start="261:56" pos:end="261:59">(<argument pos:start="261:57" pos:end="261:58"><expr pos:start="261:57" pos:end="261:58"><name pos:start="261:57" pos:end="261:58">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="263:21" pos:end="299:21"><if pos:start="263:21" pos:end="299:21">if <condition pos:start="263:24" pos:end="263:48">(<expr pos:start="263:25" pos:end="263:47"><name pos:start="263:25" pos:end="263:39"><name pos:start="263:25" pos:end="263:25">s</name><operator pos:start="263:26" pos:end="263:27">-&gt;</operator><name pos:start="263:28" pos:end="263:36">mcdparams</name><index pos:start="263:37" pos:end="263:39">[<expr pos:start="263:38" pos:end="263:38"><name pos:start="263:38" pos:end="263:38">i</name></expr>]</index></name><operator pos:start="263:40" pos:end="263:40">.</operator><name pos:start="263:41" pos:end="263:47">present</name></expr>)</condition> <block pos:start="263:50" pos:end="299:21">{<block_content pos:start="265:25" pos:end="297:25">

                        <expr_stmt pos:start="265:25" pos:end="265:64"><expr pos:start="265:25" pos:end="265:63"><name pos:start="265:25" pos:end="265:39"><name pos:start="265:25" pos:end="265:25">s</name><operator pos:start="265:26" pos:end="265:27">-&gt;</operator><name pos:start="265:28" pos:end="265:36">mcdparams</name><index pos:start="265:37" pos:end="265:39">[<expr pos:start="265:38" pos:end="265:38"><name pos:start="265:38" pos:end="265:38">i</name></expr>]</index></name><operator pos:start="265:40" pos:end="265:40">.</operator><name pos:start="265:41" pos:end="265:45">index</name> <operator pos:start="265:47" pos:end="265:47">=</operator> <call pos:start="265:49" pos:end="265:63"><name pos:start="265:49" pos:end="265:56">get_bits</name><argument_list pos:start="265:57" pos:end="265:63">(<argument pos:start="265:58" pos:end="265:59"><expr pos:start="265:58" pos:end="265:59"><name pos:start="265:58" pos:end="265:59">gb</name></expr></argument>, <argument pos:start="265:62" pos:end="265:62"><expr pos:start="265:62" pos:end="265:62"><literal type="number" pos:start="265:62" pos:end="265:62">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="267:25" pos:end="267:64"><expr pos:start="267:25" pos:end="267:63"><name pos:start="267:25" pos:end="267:39"><name pos:start="267:25" pos:end="267:25">s</name><operator pos:start="267:26" pos:end="267:27">-&gt;</operator><name pos:start="267:28" pos:end="267:36">mcdparams</name><index pos:start="267:37" pos:end="267:39">[<expr pos:start="267:38" pos:end="267:38"><name pos:start="267:38" pos:end="267:38">i</name></expr>]</index></name><operator pos:start="267:40" pos:end="267:40">.</operator><name pos:start="267:41" pos:end="267:45">chan2</name> <operator pos:start="267:47" pos:end="267:47">=</operator> <call pos:start="267:49" pos:end="267:63"><name pos:start="267:49" pos:end="267:56">get_bits</name><argument_list pos:start="267:57" pos:end="267:63">(<argument pos:start="267:58" pos:end="267:59"><expr pos:start="267:58" pos:end="267:59"><name pos:start="267:58" pos:end="267:59">gb</name></expr></argument>, <argument pos:start="267:62" pos:end="267:62"><expr pos:start="267:62" pos:end="267:62"><literal type="number" pos:start="267:62" pos:end="267:62">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="269:25" pos:end="279:25"><if pos:start="269:25" pos:end="279:25">if <condition pos:start="269:28" pos:end="269:69">(<expr pos:start="269:29" pos:end="269:68"><name pos:start="269:29" pos:end="269:43"><name pos:start="269:29" pos:end="269:29">s</name><operator pos:start="269:30" pos:end="269:31">-&gt;</operator><name pos:start="269:32" pos:end="269:40">mcdparams</name><index pos:start="269:41" pos:end="269:43">[<expr pos:start="269:42" pos:end="269:42"><name pos:start="269:42" pos:end="269:42">i</name></expr>]</index></name><operator pos:start="269:44" pos:end="269:44">.</operator><name pos:start="269:45" pos:end="269:49">chan2</name> <operator pos:start="269:51" pos:end="269:52">&gt;=</operator> <name pos:start="269:54" pos:end="269:68"><name pos:start="269:54" pos:end="269:58">avctx</name><operator pos:start="269:59" pos:end="269:60">-&gt;</operator><name pos:start="269:61" pos:end="269:68">channels</name></name></expr>)</condition> <block pos:start="269:71" pos:end="279:25">{<block_content pos:start="271:29" pos:end="277:55">

                            <expr_stmt pos:start="271:29" pos:end="275:75"><expr pos:start="271:29" pos:end="275:74"><call pos:start="271:29" pos:end="275:74"><name pos:start="271:29" pos:end="271:34">av_log</name><argument_list pos:start="271:35" pos:end="275:74">(<argument pos:start="271:36" pos:end="271:40"><expr pos:start="271:36" pos:end="271:40"><name pos:start="271:36" pos:end="271:40">avctx</name></expr></argument>, <argument pos:start="271:43" pos:end="271:54"><expr pos:start="271:43" pos:end="271:54"><name pos:start="271:43" pos:end="271:54">AV_LOG_ERROR</name></expr></argument>,

                                   <argument pos:start="273:36" pos:end="273:79"><expr pos:start="273:36" pos:end="273:79"><literal type="string" pos:start="273:36" pos:end="273:79">"invalid channel 2 (%d) for %d channel(s)\n"</literal></expr></argument>,

                                   <argument pos:start="275:36" pos:end="275:56"><expr pos:start="275:36" pos:end="275:56"><name pos:start="275:36" pos:end="275:50"><name pos:start="275:36" pos:end="275:36">s</name><operator pos:start="275:37" pos:end="275:38">-&gt;</operator><name pos:start="275:39" pos:end="275:47">mcdparams</name><index pos:start="275:48" pos:end="275:50">[<expr pos:start="275:49" pos:end="275:49"><name pos:start="275:49" pos:end="275:49">i</name></expr>]</index></name><operator pos:start="275:51" pos:end="275:51">.</operator><name pos:start="275:52" pos:end="275:56">chan2</name></expr></argument>, <argument pos:start="275:59" pos:end="275:73"><expr pos:start="275:59" pos:end="275:73"><name pos:start="275:59" pos:end="275:73"><name pos:start="275:59" pos:end="275:63">avctx</name><operator pos:start="275:64" pos:end="275:65">-&gt;</operator><name pos:start="275:66" pos:end="275:73">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <return pos:start="277:29" pos:end="277:55">return <expr pos:start="277:36" pos:end="277:54"><name pos:start="277:36" pos:end="277:54">AVERROR_INVALIDDATA</name></expr>;</return>

                        </block_content>}</block></if></if_stmt>

                        <if_stmt pos:start="281:25" pos:end="297:25"><if pos:start="281:25" pos:end="293:25">if <condition pos:start="281:28" pos:end="281:55">(<expr pos:start="281:29" pos:end="281:54"><name pos:start="281:29" pos:end="281:43"><name pos:start="281:29" pos:end="281:29">s</name><operator pos:start="281:30" pos:end="281:31">-&gt;</operator><name pos:start="281:32" pos:end="281:40">mcdparams</name><index pos:start="281:41" pos:end="281:43">[<expr pos:start="281:42" pos:end="281:42"><name pos:start="281:42" pos:end="281:42">i</name></expr>]</index></name><operator pos:start="281:44" pos:end="281:44">.</operator><name pos:start="281:45" pos:end="281:49">index</name> <operator pos:start="281:51" pos:end="281:52">==</operator> <literal type="number" pos:start="281:54" pos:end="281:54">1</literal></expr>)</condition> <block pos:start="281:57" pos:end="293:25">{<block_content pos:start="283:29" pos:end="291:66">

                            <if_stmt pos:start="283:29" pos:end="287:59"><if pos:start="283:29" pos:end="287:59">if <condition pos:start="283:32" pos:end="285:71">(<expr pos:start="283:33" pos:end="285:70"><operator pos:start="283:33" pos:end="283:33">(</operator><name pos:start="283:34" pos:end="283:37">nbit</name> <operator pos:start="283:39" pos:end="283:40">==</operator> <name pos:start="283:42" pos:end="283:56"><name pos:start="283:42" pos:end="283:42">s</name><operator pos:start="283:43" pos:end="283:44">-&gt;</operator><name pos:start="283:45" pos:end="283:53">mcdparams</name><index pos:start="283:54" pos:end="283:56">[<expr pos:start="283:55" pos:end="283:55"><name pos:start="283:55" pos:end="283:55">i</name></expr>]</index></name><operator pos:start="283:57" pos:end="283:57">.</operator><name pos:start="283:58" pos:end="283:62">chan2</name><operator pos:start="283:63" pos:end="283:63">)</operator> <operator pos:start="283:65" pos:end="283:66">||</operator>

                                <operator pos:start="285:33" pos:end="285:33">(</operator><name pos:start="285:34" pos:end="285:40">ch_mask</name> <operator pos:start="285:42" pos:end="285:42">&amp;</operator> <literal type="number" pos:start="285:44" pos:end="285:44">1</literal> <operator pos:start="285:46" pos:end="285:47">&lt;&lt;</operator> <name pos:start="285:49" pos:end="285:63"><name pos:start="285:49" pos:end="285:49">s</name><operator pos:start="285:50" pos:end="285:51">-&gt;</operator><name pos:start="285:52" pos:end="285:60">mcdparams</name><index pos:start="285:61" pos:end="285:63">[<expr pos:start="285:62" pos:end="285:62"><name pos:start="285:62" pos:end="285:62">i</name></expr>]</index></name><operator pos:start="285:64" pos:end="285:64">.</operator><name pos:start="285:65" pos:end="285:69">chan2</name><operator pos:start="285:70" pos:end="285:70">)</operator></expr>)</condition><block type="pseudo" pos:start="287:33" pos:end="287:59"><block_content pos:start="287:33" pos:end="287:59">

                                <return pos:start="287:33" pos:end="287:59">return <expr pos:start="287:40" pos:end="287:58"><name pos:start="287:40" pos:end="287:58">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



                            <expr_stmt pos:start="291:29" pos:end="291:66"><expr pos:start="291:29" pos:end="291:65"><name pos:start="291:29" pos:end="291:35">ch_mask</name> <operator pos:start="291:37" pos:end="291:38">|=</operator> <literal type="number" pos:start="291:40" pos:end="291:40">1</literal> <operator pos:start="291:42" pos:end="291:43">&lt;&lt;</operator> <name pos:start="291:45" pos:end="291:59"><name pos:start="291:45" pos:end="291:45">s</name><operator pos:start="291:46" pos:end="291:47">-&gt;</operator><name pos:start="291:48" pos:end="291:56">mcdparams</name><index pos:start="291:57" pos:end="291:59">[<expr pos:start="291:58" pos:end="291:58"><name pos:start="291:58" pos:end="291:58">i</name></expr>]</index></name><operator pos:start="291:60" pos:end="291:60">.</operator><name pos:start="291:61" pos:end="291:65">chan2</name></expr>;</expr_stmt>

                        </block_content>}</block></if> <if type="elseif" pos:start="293:27" pos:end="297:25">else if <condition pos:start="293:35" pos:end="293:75">(<expr pos:start="293:36" pos:end="293:74"><operator pos:start="293:36" pos:end="293:36">!</operator><operator pos:start="293:37" pos:end="293:37">(</operator><name pos:start="293:38" pos:end="293:44">ch_mask</name> <operator pos:start="293:46" pos:end="293:46">&amp;</operator> <literal type="number" pos:start="293:48" pos:end="293:48">1</literal> <operator pos:start="293:50" pos:end="293:51">&lt;&lt;</operator> <name pos:start="293:53" pos:end="293:67"><name pos:start="293:53" pos:end="293:53">s</name><operator pos:start="293:54" pos:end="293:55">-&gt;</operator><name pos:start="293:56" pos:end="293:64">mcdparams</name><index pos:start="293:65" pos:end="293:67">[<expr pos:start="293:66" pos:end="293:66"><name pos:start="293:66" pos:end="293:66">i</name></expr>]</index></name><operator pos:start="293:68" pos:end="293:68">.</operator><name pos:start="293:69" pos:end="293:73">chan2</name><operator pos:start="293:74" pos:end="293:74">)</operator></expr>)</condition> <block pos:start="293:77" pos:end="297:25">{<block_content pos:start="295:29" pos:end="295:55">

                            <return pos:start="295:29" pos:end="295:55">return <expr pos:start="295:36" pos:end="295:54"><name pos:start="295:36" pos:end="295:54">AVERROR_INVALIDDATA</name></expr>;</return>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="301:21" pos:end="301:49"><expr pos:start="301:21" pos:end="301:48"><name pos:start="301:21" pos:end="301:35"><name pos:start="301:21" pos:end="301:21">s</name><operator pos:start="301:22" pos:end="301:23">-&gt;</operator><name pos:start="301:24" pos:end="301:32">mcdparams</name><index pos:start="301:33" pos:end="301:35">[<expr pos:start="301:34" pos:end="301:34"><name pos:start="301:34" pos:end="301:34">i</name></expr>]</index></name><operator pos:start="301:36" pos:end="301:36">.</operator><name pos:start="301:37" pos:end="301:41">chan1</name> <operator pos:start="301:43" pos:end="301:43">=</operator> <name pos:start="301:45" pos:end="301:48">nbit</name></expr>;</expr_stmt>



                    <expr_stmt pos:start="305:21" pos:end="305:41"><expr pos:start="305:21" pos:end="305:40"><name pos:start="305:21" pos:end="305:27">ch_mask</name> <operator pos:start="305:29" pos:end="305:30">|=</operator> <literal type="number" pos:start="305:32" pos:end="305:32">1</literal> <operator pos:start="305:34" pos:end="305:35">&lt;&lt;</operator> <name pos:start="305:37" pos:end="305:40">nbit</name></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if> <else pos:start="309:15" pos:end="321:13">else <block pos:start="309:20" pos:end="321:13">{<block_content pos:start="311:17" pos:end="319:17">

                <expr_stmt pos:start="311:17" pos:end="311:39"><expr pos:start="311:17" pos:end="311:38"><name pos:start="311:17" pos:end="311:20">chan</name> <operator pos:start="311:22" pos:end="311:22">=</operator> <name pos:start="311:24" pos:end="311:38"><name pos:start="311:24" pos:end="311:28">avctx</name><operator pos:start="311:29" pos:end="311:30">-&gt;</operator><name pos:start="311:31" pos:end="311:38">channels</name></name></expr>;</expr_stmt>

                <for pos:start="313:17" pos:end="319:17">for <control pos:start="313:21" pos:end="313:42">(<init pos:start="313:22" pos:end="313:27"><expr pos:start="313:22" pos:end="313:26"><name pos:start="313:22" pos:end="313:22">i</name> <operator pos:start="313:24" pos:end="313:24">=</operator> <literal type="number" pos:start="313:26" pos:end="313:26">0</literal></expr>;</init> <condition pos:start="313:29" pos:end="313:37"><expr pos:start="313:29" pos:end="313:36"><name pos:start="313:29" pos:end="313:29">i</name> <operator pos:start="313:31" pos:end="313:31">&lt;</operator> <name pos:start="313:33" pos:end="313:36">chan</name></expr>;</condition> <incr pos:start="313:39" pos:end="313:41"><expr pos:start="313:39" pos:end="313:41"><name pos:start="313:39" pos:end="313:39">i</name><operator pos:start="313:40" pos:end="313:41">++</operator></expr></incr>)</control> <block pos:start="313:44" pos:end="319:17">{<block_content pos:start="315:21" pos:end="317:48">

                    <expr_stmt pos:start="315:21" pos:end="315:48"><expr pos:start="315:21" pos:end="315:47"><name pos:start="315:21" pos:end="315:35"><name pos:start="315:21" pos:end="315:21">s</name><operator pos:start="315:22" pos:end="315:23">-&gt;</operator><name pos:start="315:24" pos:end="315:32">mcdparams</name><index pos:start="315:33" pos:end="315:35">[<expr pos:start="315:34" pos:end="315:34"><name pos:start="315:34" pos:end="315:34">i</name></expr>]</index></name><operator pos:start="315:36" pos:end="315:36">.</operator><name pos:start="315:37" pos:end="315:43">present</name> <operator pos:start="315:45" pos:end="315:45">=</operator> <literal type="number" pos:start="315:47" pos:end="315:47">0</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="317:21" pos:end="317:48"><expr pos:start="317:21" pos:end="317:47"><name pos:start="317:21" pos:end="317:35"><name pos:start="317:21" pos:end="317:21">s</name><operator pos:start="317:22" pos:end="317:23">-&gt;</operator><name pos:start="317:24" pos:end="317:32">mcdparams</name><index pos:start="317:33" pos:end="317:35">[<expr pos:start="317:34" pos:end="317:34"><name pos:start="317:34" pos:end="317:34">i</name></expr>]</index></name><operator pos:start="317:36" pos:end="317:36">.</operator><name pos:start="317:37" pos:end="317:41">chan1</name>   <operator pos:start="317:45" pos:end="317:45">=</operator> <name pos:start="317:47" pos:end="317:47">i</name></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></else></if_stmt>



            <for pos:start="325:13" pos:end="357:13">for <control pos:start="325:17" pos:end="325:38">(<init pos:start="325:18" pos:end="325:23"><expr pos:start="325:18" pos:end="325:22"><name pos:start="325:18" pos:end="325:18">i</name> <operator pos:start="325:20" pos:end="325:20">=</operator> <literal type="number" pos:start="325:22" pos:end="325:22">0</literal></expr>;</init> <condition pos:start="325:25" pos:end="325:33"><expr pos:start="325:25" pos:end="325:32"><name pos:start="325:25" pos:end="325:25">i</name> <operator pos:start="325:27" pos:end="325:27">&lt;</operator> <name pos:start="325:29" pos:end="325:32">chan</name></expr>;</condition> <incr pos:start="325:35" pos:end="325:37"><expr pos:start="325:35" pos:end="325:37"><name pos:start="325:35" pos:end="325:35">i</name><operator pos:start="325:36" pos:end="325:37">++</operator></expr></incr>)</control> <block pos:start="325:40" pos:end="357:13">{<block_content pos:start="327:17" pos:end="355:17">

                <if_stmt pos:start="327:17" pos:end="331:35"><if pos:start="327:17" pos:end="331:35">if <condition pos:start="327:20" pos:end="327:74">(<expr pos:start="327:21" pos:end="327:73"><name pos:start="327:21" pos:end="327:35"><name pos:start="327:21" pos:end="327:21">s</name><operator pos:start="327:22" pos:end="327:23">-&gt;</operator><name pos:start="327:24" pos:end="327:32">mcdparams</name><index pos:start="327:33" pos:end="327:35">[<expr pos:start="327:34" pos:end="327:34"><name pos:start="327:34" pos:end="327:34">i</name></expr>]</index></name><operator pos:start="327:36" pos:end="327:36">.</operator><name pos:start="327:37" pos:end="327:43">present</name> <operator pos:start="327:45" pos:end="327:46">&amp;&amp;</operator> <name pos:start="327:48" pos:end="327:62"><name pos:start="327:48" pos:end="327:48">s</name><operator pos:start="327:49" pos:end="327:50">-&gt;</operator><name pos:start="327:51" pos:end="327:59">mcdparams</name><index pos:start="327:60" pos:end="327:62">[<expr pos:start="327:61" pos:end="327:61"><name pos:start="327:61" pos:end="327:61">i</name></expr>]</index></name><operator pos:start="327:63" pos:end="327:63">.</operator><name pos:start="327:64" pos:end="327:68">index</name> <operator pos:start="327:70" pos:end="327:71">==</operator> <literal type="number" pos:start="327:73" pos:end="327:73">1</literal></expr>)</condition><block type="pseudo" pos:start="329:21" pos:end="331:35"><block_content pos:start="329:21" pos:end="331:35">

                    <if_stmt pos:start="329:21" pos:end="331:35"><if pos:start="329:21" pos:end="331:35">if <condition pos:start="329:24" pos:end="329:71">(<expr pos:start="329:25" pos:end="329:70"><name pos:start="329:25" pos:end="329:27">ret</name> <operator pos:start="329:29" pos:end="329:29">=</operator> <call pos:start="329:31" pos:end="329:70"><name pos:start="329:31" pos:end="329:44">decode_channel</name><argument_list pos:start="329:45" pos:end="329:70">(<argument pos:start="329:46" pos:end="329:46"><expr pos:start="329:46" pos:end="329:46"><name pos:start="329:46" pos:end="329:46">s</name></expr></argument>, <argument pos:start="329:49" pos:end="329:69"><expr pos:start="329:49" pos:end="329:69"><name pos:start="329:49" pos:end="329:63"><name pos:start="329:49" pos:end="329:49">s</name><operator pos:start="329:50" pos:end="329:51">-&gt;</operator><name pos:start="329:52" pos:end="329:60">mcdparams</name><index pos:start="329:61" pos:end="329:63">[<expr pos:start="329:62" pos:end="329:62"><name pos:start="329:62" pos:end="329:62">i</name></expr>]</index></name><operator pos:start="329:64" pos:end="329:64">.</operator><name pos:start="329:65" pos:end="329:69">chan2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="331:25" pos:end="331:35"><block_content pos:start="331:25" pos:end="331:35">

                        <return pos:start="331:25" pos:end="331:35">return <expr pos:start="331:32" pos:end="331:34"><name pos:start="331:32" pos:end="331:34">ret</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>



                <if_stmt pos:start="335:17" pos:end="337:31"><if pos:start="335:17" pos:end="337:31">if <condition pos:start="335:20" pos:end="335:67">(<expr pos:start="335:21" pos:end="335:66"><name pos:start="335:21" pos:end="335:23">ret</name> <operator pos:start="335:25" pos:end="335:25">=</operator> <call pos:start="335:27" pos:end="335:66"><name pos:start="335:27" pos:end="335:40">decode_channel</name><argument_list pos:start="335:41" pos:end="335:66">(<argument pos:start="335:42" pos:end="335:42"><expr pos:start="335:42" pos:end="335:42"><name pos:start="335:42" pos:end="335:42">s</name></expr></argument>, <argument pos:start="335:45" pos:end="335:65"><expr pos:start="335:45" pos:end="335:65"><name pos:start="335:45" pos:end="335:59"><name pos:start="335:45" pos:end="335:45">s</name><operator pos:start="335:46" pos:end="335:47">-&gt;</operator><name pos:start="335:48" pos:end="335:56">mcdparams</name><index pos:start="335:57" pos:end="335:59">[<expr pos:start="335:58" pos:end="335:58"><name pos:start="335:58" pos:end="335:58">i</name></expr>]</index></name><operator pos:start="335:60" pos:end="335:60">.</operator><name pos:start="335:61" pos:end="335:65">chan1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="337:21" pos:end="337:31"><block_content pos:start="337:21" pos:end="337:31">

                    <return pos:start="337:21" pos:end="337:31">return <expr pos:start="337:28" pos:end="337:30"><name pos:start="337:28" pos:end="337:30">ret</name></expr>;</return></block_content></block></if></if_stmt>



                <if_stmt pos:start="341:17" pos:end="355:17"><if pos:start="341:17" pos:end="355:17">if <condition pos:start="341:20" pos:end="341:44">(<expr pos:start="341:21" pos:end="341:43"><name pos:start="341:21" pos:end="341:35"><name pos:start="341:21" pos:end="341:21">s</name><operator pos:start="341:22" pos:end="341:23">-&gt;</operator><name pos:start="341:24" pos:end="341:32">mcdparams</name><index pos:start="341:33" pos:end="341:35">[<expr pos:start="341:34" pos:end="341:34"><name pos:start="341:34" pos:end="341:34">i</name></expr>]</index></name><operator pos:start="341:36" pos:end="341:36">.</operator><name pos:start="341:37" pos:end="341:43">present</name></expr>)</condition> <block pos:start="341:46" pos:end="355:17">{<block_content pos:start="343:21" pos:end="353:35">

                    <expr_stmt pos:start="343:21" pos:end="343:64"><expr pos:start="343:21" pos:end="343:63"><name pos:start="343:21" pos:end="343:28"><name pos:start="343:21" pos:end="343:21">s</name><operator pos:start="343:22" pos:end="343:23">-&gt;</operator><name pos:start="343:24" pos:end="343:28">dmode</name></name> <operator pos:start="343:30" pos:end="343:30">=</operator> <name pos:start="343:32" pos:end="343:63"><name pos:start="343:32" pos:end="343:40">mc_dmodes</name><index pos:start="343:41" pos:end="343:63">[<expr pos:start="343:42" pos:end="343:62"><name pos:start="343:42" pos:end="343:56"><name pos:start="343:42" pos:end="343:42">s</name><operator pos:start="343:43" pos:end="343:44">-&gt;</operator><name pos:start="343:45" pos:end="343:53">mcdparams</name><index pos:start="343:54" pos:end="343:56">[<expr pos:start="343:55" pos:end="343:55"><name pos:start="343:55" pos:end="343:55">i</name></expr>]</index></name><operator pos:start="343:57" pos:end="343:57">.</operator><name pos:start="343:58" pos:end="343:62">index</name></expr>]</index></name></expr>;</expr_stmt>

                    <if_stmt pos:start="345:21" pos:end="353:35"><if pos:start="345:21" pos:end="353:35">if <condition pos:start="345:24" pos:end="351:61">(<expr pos:start="345:25" pos:end="351:60"><name pos:start="345:25" pos:end="345:27">ret</name> <operator pos:start="345:29" pos:end="345:29">=</operator> <call pos:start="345:31" pos:end="351:60"><name pos:start="345:31" pos:end="345:41">decorrelate</name><argument_list pos:start="345:42" pos:end="351:60">(<argument pos:start="345:43" pos:end="345:43"><expr pos:start="345:43" pos:end="345:43"><name pos:start="345:43" pos:end="345:43">s</name></expr></argument>,

                                          <argument pos:start="347:43" pos:end="347:63"><expr pos:start="347:43" pos:end="347:63"><name pos:start="347:43" pos:end="347:57"><name pos:start="347:43" pos:end="347:43">s</name><operator pos:start="347:44" pos:end="347:45">-&gt;</operator><name pos:start="347:46" pos:end="347:54">mcdparams</name><index pos:start="347:55" pos:end="347:57">[<expr pos:start="347:56" pos:end="347:56"><name pos:start="347:56" pos:end="347:56">i</name></expr>]</index></name><operator pos:start="347:58" pos:end="347:58">.</operator><name pos:start="347:59" pos:end="347:63">chan2</name></expr></argument>,

                                          <argument pos:start="349:43" pos:end="349:63"><expr pos:start="349:43" pos:end="349:63"><name pos:start="349:43" pos:end="349:57"><name pos:start="349:43" pos:end="349:43">s</name><operator pos:start="349:44" pos:end="349:45">-&gt;</operator><name pos:start="349:46" pos:end="349:54">mcdparams</name><index pos:start="349:55" pos:end="349:57">[<expr pos:start="349:56" pos:end="349:56"><name pos:start="349:56" pos:end="349:56">i</name></expr>]</index></name><operator pos:start="349:58" pos:end="349:58">.</operator><name pos:start="349:59" pos:end="349:63">chan1</name></expr></argument>,

                                          <argument pos:start="351:43" pos:end="351:59"><expr pos:start="351:43" pos:end="351:59"><name pos:start="351:43" pos:end="351:55"><name pos:start="351:43" pos:end="351:43">s</name><operator pos:start="351:44" pos:end="351:45">-&gt;</operator><name pos:start="351:46" pos:end="351:55">nb_samples</name></name> <operator pos:start="351:57" pos:end="351:57">-</operator> <literal type="number" pos:start="351:59" pos:end="351:59">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="353:25" pos:end="353:35"><block_content pos:start="353:25" pos:end="353:35">

                        <return pos:start="353:25" pos:end="353:35">return <expr pos:start="353:32" pos:end="353:34"><name pos:start="353:32" pos:end="353:34">ret</name></expr>;</return></block_content></block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>



        <for pos:start="363:9" pos:end="381:9">for <control pos:start="363:13" pos:end="363:54">(<init pos:start="363:14" pos:end="363:22"><expr pos:start="363:14" pos:end="363:21"><name pos:start="363:14" pos:end="363:17">chan</name> <operator pos:start="363:19" pos:end="363:19">=</operator> <literal type="number" pos:start="363:21" pos:end="363:21">0</literal></expr>;</init> <condition pos:start="363:24" pos:end="363:46"><expr pos:start="363:24" pos:end="363:45"><name pos:start="363:24" pos:end="363:27">chan</name> <operator pos:start="363:29" pos:end="363:29">&lt;</operator> <name pos:start="363:31" pos:end="363:45"><name pos:start="363:31" pos:end="363:35">avctx</name><operator pos:start="363:36" pos:end="363:37">-&gt;</operator><name pos:start="363:38" pos:end="363:45">channels</name></name></expr>;</condition> <incr pos:start="363:48" pos:end="363:53"><expr pos:start="363:48" pos:end="363:53"><name pos:start="363:48" pos:end="363:51">chan</name><operator pos:start="363:52" pos:end="363:53">++</operator></expr></incr>)</control> <block pos:start="363:56" pos:end="381:9">{<block_content pos:start="365:13" pos:end="379:61">

            <decl_stmt pos:start="365:13" pos:end="365:48"><decl pos:start="365:13" pos:end="365:47"><type pos:start="365:13" pos:end="365:21"><name pos:start="365:13" pos:end="365:19">int32_t</name> <modifier pos:start="365:21" pos:end="365:21">*</modifier></type><name pos:start="365:22" pos:end="365:28">decoded</name> <init pos:start="365:30" pos:end="365:47">= <expr pos:start="365:32" pos:end="365:47"><name pos:start="365:32" pos:end="365:47"><name pos:start="365:32" pos:end="365:32">s</name><operator pos:start="365:33" pos:end="365:34">-&gt;</operator><name pos:start="365:35" pos:end="365:41">decoded</name><index pos:start="365:42" pos:end="365:47">[<expr pos:start="365:43" pos:end="365:46"><name pos:start="365:43" pos:end="365:46">chan</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="369:13" pos:end="371:70"><if pos:start="369:13" pos:end="371:70">if <condition pos:start="369:16" pos:end="369:34">(<expr pos:start="369:17" pos:end="369:33"><name pos:start="369:17" pos:end="369:33"><name pos:start="369:17" pos:end="369:17">s</name><operator pos:start="369:18" pos:end="369:19">-&gt;</operator><name pos:start="369:20" pos:end="369:27">lpc_mode</name><index pos:start="369:28" pos:end="369:33">[<expr pos:start="369:29" pos:end="369:32"><name pos:start="369:29" pos:end="369:32">chan</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="371:17" pos:end="371:70"><block_content pos:start="371:17" pos:end="371:70">

                <expr_stmt pos:start="371:17" pos:end="371:70"><expr pos:start="371:17" pos:end="371:69"><call pos:start="371:17" pos:end="371:69"><name pos:start="371:17" pos:end="371:26">decode_lpc</name><argument_list pos:start="371:27" pos:end="371:69">(<argument pos:start="371:28" pos:end="371:34"><expr pos:start="371:28" pos:end="371:34"><name pos:start="371:28" pos:end="371:34">decoded</name></expr></argument>, <argument pos:start="371:37" pos:end="371:53"><expr pos:start="371:37" pos:end="371:53"><name pos:start="371:37" pos:end="371:53"><name pos:start="371:37" pos:end="371:37">s</name><operator pos:start="371:38" pos:end="371:39">-&gt;</operator><name pos:start="371:40" pos:end="371:47">lpc_mode</name><index pos:start="371:48" pos:end="371:53">[<expr pos:start="371:49" pos:end="371:52"><name pos:start="371:49" pos:end="371:52">chan</name></expr>]</index></name></expr></argument>, <argument pos:start="371:56" pos:end="371:68"><expr pos:start="371:56" pos:end="371:68"><name pos:start="371:56" pos:end="371:68"><name pos:start="371:56" pos:end="371:56">s</name><operator pos:start="371:57" pos:end="371:58">-&gt;</operator><name pos:start="371:59" pos:end="371:68">nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <if_stmt pos:start="375:13" pos:end="379:61"><if pos:start="375:13" pos:end="379:61">if <condition pos:start="375:16" pos:end="375:42">(<expr pos:start="375:17" pos:end="375:41"><name pos:start="375:17" pos:end="375:37"><name pos:start="375:17" pos:end="375:17">s</name><operator pos:start="375:18" pos:end="375:19">-&gt;</operator><name pos:start="375:20" pos:end="375:31">sample_shift</name><index pos:start="375:32" pos:end="375:37">[<expr pos:start="375:33" pos:end="375:36"><name pos:start="375:33" pos:end="375:36">chan</name></expr>]</index></name> <operator pos:start="375:39" pos:end="375:39">&gt;</operator> <literal type="number" pos:start="375:41" pos:end="375:41">0</literal></expr>)</condition><block type="pseudo" pos:start="377:17" pos:end="379:61"><block_content pos:start="377:17" pos:end="379:61">

                <for pos:start="377:17" pos:end="379:61">for <control pos:start="377:21" pos:end="377:51">(<init pos:start="377:22" pos:end="377:27"><expr pos:start="377:22" pos:end="377:26"><name pos:start="377:22" pos:end="377:22">i</name> <operator pos:start="377:24" pos:end="377:24">=</operator> <literal type="number" pos:start="377:26" pos:end="377:26">0</literal></expr>;</init> <condition pos:start="377:29" pos:end="377:46"><expr pos:start="377:29" pos:end="377:45"><name pos:start="377:29" pos:end="377:29">i</name> <operator pos:start="377:31" pos:end="377:31">&lt;</operator> <name pos:start="377:33" pos:end="377:45"><name pos:start="377:33" pos:end="377:33">s</name><operator pos:start="377:34" pos:end="377:35">-&gt;</operator><name pos:start="377:36" pos:end="377:45">nb_samples</name></name></expr>;</condition> <incr pos:start="377:48" pos:end="377:50"><expr pos:start="377:48" pos:end="377:50"><name pos:start="377:48" pos:end="377:48">i</name><operator pos:start="377:49" pos:end="377:50">++</operator></expr></incr>)</control><block type="pseudo" pos:start="379:21" pos:end="379:61"><block_content pos:start="379:21" pos:end="379:61">

                    <expr_stmt pos:start="379:21" pos:end="379:61"><expr pos:start="379:21" pos:end="379:60"><name pos:start="379:21" pos:end="379:30"><name pos:start="379:21" pos:end="379:27">decoded</name><index pos:start="379:28" pos:end="379:30">[<expr pos:start="379:29" pos:end="379:29"><name pos:start="379:29" pos:end="379:29">i</name></expr>]</index></name> <operator pos:start="379:32" pos:end="379:33">*=</operator> <literal type="number" pos:start="379:35" pos:end="379:35">1</literal> <operator pos:start="379:37" pos:end="379:38">&lt;&lt;</operator> <name pos:start="379:40" pos:end="379:60"><name pos:start="379:40" pos:end="379:40">s</name><operator pos:start="379:41" pos:end="379:42">-&gt;</operator><name pos:start="379:43" pos:end="379:54">sample_shift</name><index pos:start="379:55" pos:end="379:60">[<expr pos:start="379:56" pos:end="379:59"><name pos:start="379:56" pos:end="379:59">chan</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="387:5" pos:end="387:23"><expr pos:start="387:5" pos:end="387:22"><call pos:start="387:5" pos:end="387:22"><name pos:start="387:5" pos:end="387:18">align_get_bits</name><argument_list pos:start="387:19" pos:end="387:22">(<argument pos:start="387:20" pos:end="387:21"><expr pos:start="387:20" pos:end="387:21"><name pos:start="387:20" pos:end="387:21">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="389:5" pos:end="389:22"><expr pos:start="389:5" pos:end="389:21"><call pos:start="389:5" pos:end="389:21"><name pos:start="389:5" pos:end="389:13">skip_bits</name><argument_list pos:start="389:14" pos:end="389:21">(<argument pos:start="389:15" pos:end="389:16"><expr pos:start="389:15" pos:end="389:16"><name pos:start="389:15" pos:end="389:16">gb</name></expr></argument>, <argument pos:start="389:19" pos:end="389:20"><expr pos:start="389:19" pos:end="389:20"><literal type="number" pos:start="389:19" pos:end="389:20">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="391:5" pos:end="397:51"><if pos:start="391:5" pos:end="393:50">if <condition pos:start="391:8" pos:end="391:30">(<expr pos:start="391:9" pos:end="391:29"><call pos:start="391:9" pos:end="391:25"><name pos:start="391:9" pos:end="391:21">get_bits_left</name><argument_list pos:start="391:22" pos:end="391:25">(<argument pos:start="391:23" pos:end="391:24"><expr pos:start="391:23" pos:end="391:24"><name pos:start="391:23" pos:end="391:24">gb</name></expr></argument>)</argument_list></call> <operator pos:start="391:27" pos:end="391:27">&lt;</operator> <literal type="number" pos:start="391:29" pos:end="391:29">0</literal></expr>)</condition><block type="pseudo" pos:start="393:9" pos:end="393:50"><block_content pos:start="393:9" pos:end="393:50">

        <expr_stmt pos:start="393:9" pos:end="393:50"><expr pos:start="393:9" pos:end="393:49"><call pos:start="393:9" pos:end="393:49"><name pos:start="393:9" pos:end="393:14">av_log</name><argument_list pos:start="393:15" pos:end="393:49">(<argument pos:start="393:16" pos:end="393:20"><expr pos:start="393:16" pos:end="393:20"><name pos:start="393:16" pos:end="393:20">avctx</name></expr></argument>, <argument pos:start="393:23" pos:end="393:34"><expr pos:start="393:23" pos:end="393:34"><name pos:start="393:23" pos:end="393:34">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="393:37" pos:end="393:48"><expr pos:start="393:37" pos:end="393:48"><literal type="string" pos:start="393:37" pos:end="393:48">"overread\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="395:5" pos:end="397:51">else if <condition pos:start="395:13" pos:end="395:35">(<expr pos:start="395:14" pos:end="395:34"><call pos:start="395:14" pos:end="395:30"><name pos:start="395:14" pos:end="395:26">get_bits_left</name><argument_list pos:start="395:27" pos:end="395:30">(<argument pos:start="395:28" pos:end="395:29"><expr pos:start="395:28" pos:end="395:29"><name pos:start="395:28" pos:end="395:29">gb</name></expr></argument>)</argument_list></call> <operator pos:start="395:32" pos:end="395:32">&gt;</operator> <literal type="number" pos:start="395:34" pos:end="395:34">0</literal></expr>)</condition><block type="pseudo" pos:start="397:9" pos:end="397:51"><block_content pos:start="397:9" pos:end="397:51">

        <expr_stmt pos:start="397:9" pos:end="397:51"><expr pos:start="397:9" pos:end="397:50"><call pos:start="397:9" pos:end="397:50"><name pos:start="397:9" pos:end="397:14">av_log</name><argument_list pos:start="397:15" pos:end="397:50">(<argument pos:start="397:16" pos:end="397:20"><expr pos:start="397:16" pos:end="397:20"><name pos:start="397:16" pos:end="397:20">avctx</name></expr></argument>, <argument pos:start="397:23" pos:end="397:34"><expr pos:start="397:23" pos:end="397:34"><name pos:start="397:23" pos:end="397:34">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="397:37" pos:end="397:49"><expr pos:start="397:37" pos:end="397:49"><literal type="string" pos:start="397:37" pos:end="397:49">"underread\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="401:5" pos:end="415:5"><if pos:start="401:5" pos:end="415:5">if <condition pos:start="401:8" pos:end="401:68">(<expr pos:start="401:9" pos:end="401:67"><name pos:start="401:9" pos:end="401:30"><name pos:start="401:9" pos:end="401:13">avctx</name><operator pos:start="401:14" pos:end="401:15">-&gt;</operator><name pos:start="401:16" pos:end="401:30">err_recognition</name></name> <operator pos:start="401:32" pos:end="401:32">&amp;</operator> <operator pos:start="401:34" pos:end="401:34">(</operator><name pos:start="401:35" pos:end="401:48">AV_EF_CRCCHECK</name> <operator pos:start="401:50" pos:end="401:50">|</operator> <name pos:start="401:52" pos:end="401:66">AV_EF_COMPLIANT</name><operator pos:start="401:67" pos:end="401:67">)</operator></expr>)</condition> <block pos:start="401:70" pos:end="415:5">{<block_content pos:start="403:9" pos:end="413:9">

        <if_stmt pos:start="403:9" pos:end="413:9"><if pos:start="403:9" pos:end="413:9">if <condition pos:start="403:12" pos:end="405:61">(<expr pos:start="403:13" pos:end="405:60"><call pos:start="403:13" pos:end="405:60"><name pos:start="403:13" pos:end="403:28">ff_tak_check_crc</name><argument_list pos:start="403:29" pos:end="405:60">(<argument pos:start="403:30" pos:end="403:46"><expr pos:start="403:30" pos:end="403:46"><name pos:start="403:30" pos:end="403:38"><name pos:start="403:30" pos:end="403:32">pkt</name><operator pos:start="403:33" pos:end="403:34">-&gt;</operator><name pos:start="403:35" pos:end="403:38">data</name></name> <operator pos:start="403:40" pos:end="403:40">+</operator> <name pos:start="403:42" pos:end="403:46">hsize</name></expr></argument>,

                             <argument pos:start="405:30" pos:end="405:59"><expr pos:start="405:30" pos:end="405:59"><call pos:start="405:30" pos:end="405:47"><name pos:start="405:30" pos:end="405:43">get_bits_count</name><argument_list pos:start="405:44" pos:end="405:47">(<argument pos:start="405:45" pos:end="405:46"><expr pos:start="405:45" pos:end="405:46"><name pos:start="405:45" pos:end="405:46">gb</name></expr></argument>)</argument_list></call> <operator pos:start="405:49" pos:end="405:49">/</operator> <literal type="number" pos:start="405:51" pos:end="405:53">8</literal> <operator pos:start="405:53" pos:end="405:53">-</operator> <name pos:start="405:55" pos:end="405:59">hsize</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="405:63" pos:end="413:9">{<block_content pos:start="407:13" pos:end="411:43">

            <expr_stmt pos:start="407:13" pos:end="407:55"><expr pos:start="407:13" pos:end="407:54"><call pos:start="407:13" pos:end="407:54"><name pos:start="407:13" pos:end="407:18">av_log</name><argument_list pos:start="407:19" pos:end="407:54">(<argument pos:start="407:20" pos:end="407:24"><expr pos:start="407:20" pos:end="407:24"><name pos:start="407:20" pos:end="407:24">avctx</name></expr></argument>, <argument pos:start="407:27" pos:end="407:38"><expr pos:start="407:27" pos:end="407:38"><name pos:start="407:27" pos:end="407:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="407:41" pos:end="407:53"><expr pos:start="407:41" pos:end="407:53"><literal type="string" pos:start="407:41" pos:end="407:53">"CRC error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="409:13" pos:end="411:43"><if pos:start="409:13" pos:end="411:43">if <condition pos:start="409:16" pos:end="409:55">(<expr pos:start="409:17" pos:end="409:54"><name pos:start="409:17" pos:end="409:38"><name pos:start="409:17" pos:end="409:21">avctx</name><operator pos:start="409:22" pos:end="409:23">-&gt;</operator><name pos:start="409:24" pos:end="409:38">err_recognition</name></name> <operator pos:start="409:40" pos:end="409:40">&amp;</operator> <name pos:start="409:42" pos:end="409:54">AV_EF_EXPLODE</name></expr>)</condition><block type="pseudo" pos:start="411:17" pos:end="411:43"><block_content pos:start="411:17" pos:end="411:43">

                <return pos:start="411:17" pos:end="411:43">return <expr pos:start="411:24" pos:end="411:42"><name pos:start="411:24" pos:end="411:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="419:5" pos:end="419:34">/* convert to output buffer */</comment>

    <switch pos:start="421:5" pos:end="469:5">switch <condition pos:start="421:12" pos:end="421:30">(<expr pos:start="421:13" pos:end="421:29"><name pos:start="421:13" pos:end="421:29"><name pos:start="421:13" pos:end="421:17">avctx</name><operator pos:start="421:18" pos:end="421:19">-&gt;</operator><name pos:start="421:20" pos:end="421:29">sample_fmt</name></name></expr>)</condition> <block pos:start="421:32" pos:end="469:5">{<block_content pos:start="423:5" pos:end="467:14">

    <case pos:start="423:5" pos:end="423:27">case <expr pos:start="423:10" pos:end="423:26"><name pos:start="423:10" pos:end="423:26">AV_SAMPLE_FMT_U8P</name></expr>:</case>

        <for pos:start="425:9" pos:end="435:9">for <control pos:start="425:13" pos:end="425:54">(<init pos:start="425:14" pos:end="425:22"><expr pos:start="425:14" pos:end="425:21"><name pos:start="425:14" pos:end="425:17">chan</name> <operator pos:start="425:19" pos:end="425:19">=</operator> <literal type="number" pos:start="425:21" pos:end="425:21">0</literal></expr>;</init> <condition pos:start="425:24" pos:end="425:46"><expr pos:start="425:24" pos:end="425:45"><name pos:start="425:24" pos:end="425:27">chan</name> <operator pos:start="425:29" pos:end="425:29">&lt;</operator> <name pos:start="425:31" pos:end="425:45"><name pos:start="425:31" pos:end="425:35">avctx</name><operator pos:start="425:36" pos:end="425:37">-&gt;</operator><name pos:start="425:38" pos:end="425:45">channels</name></name></expr>;</condition> <incr pos:start="425:48" pos:end="425:53"><expr pos:start="425:48" pos:end="425:53"><name pos:start="425:48" pos:end="425:51">chan</name><operator pos:start="425:52" pos:end="425:53">++</operator></expr></incr>)</control> <block pos:start="425:56" pos:end="435:9">{<block_content pos:start="427:13" pos:end="433:47">

            <decl_stmt pos:start="427:13" pos:end="427:69"><decl pos:start="427:13" pos:end="427:68"><type pos:start="427:13" pos:end="427:21"><name pos:start="427:13" pos:end="427:19">uint8_t</name> <modifier pos:start="427:21" pos:end="427:21">*</modifier></type><name pos:start="427:22" pos:end="427:28">samples</name> <init pos:start="427:30" pos:end="427:68">= <expr pos:start="427:32" pos:end="427:68"><operator pos:start="427:32" pos:end="427:32">(</operator><name pos:start="427:33" pos:end="427:39">uint8_t</name> <operator pos:start="427:41" pos:end="427:41">*</operator><operator pos:start="427:42" pos:end="427:42">)</operator><name pos:start="427:43" pos:end="427:68"><name pos:start="427:43" pos:end="427:47">frame</name><operator pos:start="427:48" pos:end="427:49">-&gt;</operator><name pos:start="427:50" pos:end="427:62">extended_data</name><index pos:start="427:63" pos:end="427:68">[<expr pos:start="427:64" pos:end="427:67"><name pos:start="427:64" pos:end="427:67">chan</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="429:13" pos:end="429:48"><decl pos:start="429:13" pos:end="429:47"><type pos:start="429:13" pos:end="429:21"><name pos:start="429:13" pos:end="429:19">int32_t</name> <modifier pos:start="429:21" pos:end="429:21">*</modifier></type><name pos:start="429:22" pos:end="429:28">decoded</name> <init pos:start="429:30" pos:end="429:47">= <expr pos:start="429:32" pos:end="429:47"><name pos:start="429:32" pos:end="429:47"><name pos:start="429:32" pos:end="429:32">s</name><operator pos:start="429:33" pos:end="429:34">-&gt;</operator><name pos:start="429:35" pos:end="429:41">decoded</name><index pos:start="429:42" pos:end="429:47">[<expr pos:start="429:43" pos:end="429:46"><name pos:start="429:43" pos:end="429:46">chan</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <for pos:start="431:13" pos:end="433:47">for <control pos:start="431:17" pos:end="431:47">(<init pos:start="431:18" pos:end="431:23"><expr pos:start="431:18" pos:end="431:22"><name pos:start="431:18" pos:end="431:18">i</name> <operator pos:start="431:20" pos:end="431:20">=</operator> <literal type="number" pos:start="431:22" pos:end="431:22">0</literal></expr>;</init> <condition pos:start="431:25" pos:end="431:42"><expr pos:start="431:25" pos:end="431:41"><name pos:start="431:25" pos:end="431:25">i</name> <operator pos:start="431:27" pos:end="431:27">&lt;</operator> <name pos:start="431:29" pos:end="431:41"><name pos:start="431:29" pos:end="431:29">s</name><operator pos:start="431:30" pos:end="431:31">-&gt;</operator><name pos:start="431:32" pos:end="431:41">nb_samples</name></name></expr>;</condition> <incr pos:start="431:44" pos:end="431:46"><expr pos:start="431:44" pos:end="431:46"><name pos:start="431:44" pos:end="431:44">i</name><operator pos:start="431:45" pos:end="431:46">++</operator></expr></incr>)</control><block type="pseudo" pos:start="433:17" pos:end="433:47"><block_content pos:start="433:17" pos:end="433:47">

                <expr_stmt pos:start="433:17" pos:end="433:47"><expr pos:start="433:17" pos:end="433:46"><name pos:start="433:17" pos:end="433:26"><name pos:start="433:17" pos:end="433:23">samples</name><index pos:start="433:24" pos:end="433:26">[<expr pos:start="433:25" pos:end="433:25"><name pos:start="433:25" pos:end="433:25">i</name></expr>]</index></name> <operator pos:start="433:28" pos:end="433:28">=</operator> <name pos:start="433:30" pos:end="433:39"><name pos:start="433:30" pos:end="433:36">decoded</name><index pos:start="433:37" pos:end="433:39">[<expr pos:start="433:38" pos:end="433:38"><name pos:start="433:38" pos:end="433:38">i</name></expr>]</index></name> <operator pos:start="433:41" pos:end="433:41">+</operator> <literal type="number" pos:start="433:43" pos:end="433:46">0x80</literal></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></for>

        <break pos:start="437:9" pos:end="437:14">break;</break>

    <case pos:start="439:5" pos:end="439:28">case <expr pos:start="439:10" pos:end="439:27"><name pos:start="439:10" pos:end="439:27">AV_SAMPLE_FMT_S16P</name></expr>:</case>

        <for pos:start="441:9" pos:end="451:9">for <control pos:start="441:13" pos:end="441:54">(<init pos:start="441:14" pos:end="441:22"><expr pos:start="441:14" pos:end="441:21"><name pos:start="441:14" pos:end="441:17">chan</name> <operator pos:start="441:19" pos:end="441:19">=</operator> <literal type="number" pos:start="441:21" pos:end="441:21">0</literal></expr>;</init> <condition pos:start="441:24" pos:end="441:46"><expr pos:start="441:24" pos:end="441:45"><name pos:start="441:24" pos:end="441:27">chan</name> <operator pos:start="441:29" pos:end="441:29">&lt;</operator> <name pos:start="441:31" pos:end="441:45"><name pos:start="441:31" pos:end="441:35">avctx</name><operator pos:start="441:36" pos:end="441:37">-&gt;</operator><name pos:start="441:38" pos:end="441:45">channels</name></name></expr>;</condition> <incr pos:start="441:48" pos:end="441:53"><expr pos:start="441:48" pos:end="441:53"><name pos:start="441:48" pos:end="441:51">chan</name><operator pos:start="441:52" pos:end="441:53">++</operator></expr></incr>)</control> <block pos:start="441:56" pos:end="451:9">{<block_content pos:start="443:13" pos:end="449:40">

            <decl_stmt pos:start="443:13" pos:end="443:69"><decl pos:start="443:13" pos:end="443:68"><type pos:start="443:13" pos:end="443:21"><name pos:start="443:13" pos:end="443:19">int16_t</name> <modifier pos:start="443:21" pos:end="443:21">*</modifier></type><name pos:start="443:22" pos:end="443:28">samples</name> <init pos:start="443:30" pos:end="443:68">= <expr pos:start="443:32" pos:end="443:68"><operator pos:start="443:32" pos:end="443:32">(</operator><name pos:start="443:33" pos:end="443:39">int16_t</name> <operator pos:start="443:41" pos:end="443:41">*</operator><operator pos:start="443:42" pos:end="443:42">)</operator><name pos:start="443:43" pos:end="443:68"><name pos:start="443:43" pos:end="443:47">frame</name><operator pos:start="443:48" pos:end="443:49">-&gt;</operator><name pos:start="443:50" pos:end="443:62">extended_data</name><index pos:start="443:63" pos:end="443:68">[<expr pos:start="443:64" pos:end="443:67"><name pos:start="443:64" pos:end="443:67">chan</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="445:13" pos:end="445:48"><decl pos:start="445:13" pos:end="445:47"><type pos:start="445:13" pos:end="445:21"><name pos:start="445:13" pos:end="445:19">int32_t</name> <modifier pos:start="445:21" pos:end="445:21">*</modifier></type><name pos:start="445:22" pos:end="445:28">decoded</name> <init pos:start="445:30" pos:end="445:47">= <expr pos:start="445:32" pos:end="445:47"><name pos:start="445:32" pos:end="445:47"><name pos:start="445:32" pos:end="445:32">s</name><operator pos:start="445:33" pos:end="445:34">-&gt;</operator><name pos:start="445:35" pos:end="445:41">decoded</name><index pos:start="445:42" pos:end="445:47">[<expr pos:start="445:43" pos:end="445:46"><name pos:start="445:43" pos:end="445:46">chan</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <for pos:start="447:13" pos:end="449:40">for <control pos:start="447:17" pos:end="447:47">(<init pos:start="447:18" pos:end="447:23"><expr pos:start="447:18" pos:end="447:22"><name pos:start="447:18" pos:end="447:18">i</name> <operator pos:start="447:20" pos:end="447:20">=</operator> <literal type="number" pos:start="447:22" pos:end="447:22">0</literal></expr>;</init> <condition pos:start="447:25" pos:end="447:42"><expr pos:start="447:25" pos:end="447:41"><name pos:start="447:25" pos:end="447:25">i</name> <operator pos:start="447:27" pos:end="447:27">&lt;</operator> <name pos:start="447:29" pos:end="447:41"><name pos:start="447:29" pos:end="447:29">s</name><operator pos:start="447:30" pos:end="447:31">-&gt;</operator><name pos:start="447:32" pos:end="447:41">nb_samples</name></name></expr>;</condition> <incr pos:start="447:44" pos:end="447:46"><expr pos:start="447:44" pos:end="447:46"><name pos:start="447:44" pos:end="447:44">i</name><operator pos:start="447:45" pos:end="447:46">++</operator></expr></incr>)</control><block type="pseudo" pos:start="449:17" pos:end="449:40"><block_content pos:start="449:17" pos:end="449:40">

                <expr_stmt pos:start="449:17" pos:end="449:40"><expr pos:start="449:17" pos:end="449:39"><name pos:start="449:17" pos:end="449:26"><name pos:start="449:17" pos:end="449:23">samples</name><index pos:start="449:24" pos:end="449:26">[<expr pos:start="449:25" pos:end="449:25"><name pos:start="449:25" pos:end="449:25">i</name></expr>]</index></name> <operator pos:start="449:28" pos:end="449:28">=</operator> <name pos:start="449:30" pos:end="449:39"><name pos:start="449:30" pos:end="449:36">decoded</name><index pos:start="449:37" pos:end="449:39">[<expr pos:start="449:38" pos:end="449:38"><name pos:start="449:38" pos:end="449:38">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></for>

        <break pos:start="453:9" pos:end="453:14">break;</break>

    <case pos:start="455:5" pos:end="455:28">case <expr pos:start="455:10" pos:end="455:27"><name pos:start="455:10" pos:end="455:27">AV_SAMPLE_FMT_S32P</name></expr>:</case>

        <for pos:start="457:9" pos:end="465:9">for <control pos:start="457:13" pos:end="457:54">(<init pos:start="457:14" pos:end="457:22"><expr pos:start="457:14" pos:end="457:21"><name pos:start="457:14" pos:end="457:17">chan</name> <operator pos:start="457:19" pos:end="457:19">=</operator> <literal type="number" pos:start="457:21" pos:end="457:21">0</literal></expr>;</init> <condition pos:start="457:24" pos:end="457:46"><expr pos:start="457:24" pos:end="457:45"><name pos:start="457:24" pos:end="457:27">chan</name> <operator pos:start="457:29" pos:end="457:29">&lt;</operator> <name pos:start="457:31" pos:end="457:45"><name pos:start="457:31" pos:end="457:35">avctx</name><operator pos:start="457:36" pos:end="457:37">-&gt;</operator><name pos:start="457:38" pos:end="457:45">channels</name></name></expr>;</condition> <incr pos:start="457:48" pos:end="457:53"><expr pos:start="457:48" pos:end="457:53"><name pos:start="457:48" pos:end="457:51">chan</name><operator pos:start="457:52" pos:end="457:53">++</operator></expr></incr>)</control> <block pos:start="457:56" pos:end="465:9">{<block_content pos:start="459:13" pos:end="463:37">

            <decl_stmt pos:start="459:13" pos:end="459:69"><decl pos:start="459:13" pos:end="459:68"><type pos:start="459:13" pos:end="459:21"><name pos:start="459:13" pos:end="459:19">int32_t</name> <modifier pos:start="459:21" pos:end="459:21">*</modifier></type><name pos:start="459:22" pos:end="459:28">samples</name> <init pos:start="459:30" pos:end="459:68">= <expr pos:start="459:32" pos:end="459:68"><operator pos:start="459:32" pos:end="459:32">(</operator><name pos:start="459:33" pos:end="459:39">int32_t</name> <operator pos:start="459:41" pos:end="459:41">*</operator><operator pos:start="459:42" pos:end="459:42">)</operator><name pos:start="459:43" pos:end="459:68"><name pos:start="459:43" pos:end="459:47">frame</name><operator pos:start="459:48" pos:end="459:49">-&gt;</operator><name pos:start="459:50" pos:end="459:62">extended_data</name><index pos:start="459:63" pos:end="459:68">[<expr pos:start="459:64" pos:end="459:67"><name pos:start="459:64" pos:end="459:67">chan</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <for pos:start="461:13" pos:end="463:37">for <control pos:start="461:17" pos:end="461:47">(<init pos:start="461:18" pos:end="461:23"><expr pos:start="461:18" pos:end="461:22"><name pos:start="461:18" pos:end="461:18">i</name> <operator pos:start="461:20" pos:end="461:20">=</operator> <literal type="number" pos:start="461:22" pos:end="461:22">0</literal></expr>;</init> <condition pos:start="461:25" pos:end="461:42"><expr pos:start="461:25" pos:end="461:41"><name pos:start="461:25" pos:end="461:25">i</name> <operator pos:start="461:27" pos:end="461:27">&lt;</operator> <name pos:start="461:29" pos:end="461:41"><name pos:start="461:29" pos:end="461:29">s</name><operator pos:start="461:30" pos:end="461:31">-&gt;</operator><name pos:start="461:32" pos:end="461:41">nb_samples</name></name></expr>;</condition> <incr pos:start="461:44" pos:end="461:46"><expr pos:start="461:44" pos:end="461:46"><name pos:start="461:44" pos:end="461:44">i</name><operator pos:start="461:45" pos:end="461:46">++</operator></expr></incr>)</control><block type="pseudo" pos:start="463:17" pos:end="463:37"><block_content pos:start="463:17" pos:end="463:37">

                <expr_stmt pos:start="463:17" pos:end="463:37"><expr pos:start="463:17" pos:end="463:36"><name pos:start="463:17" pos:end="463:26"><name pos:start="463:17" pos:end="463:23">samples</name><index pos:start="463:24" pos:end="463:26">[<expr pos:start="463:25" pos:end="463:25"><name pos:start="463:25" pos:end="463:25">i</name></expr>]</index></name> <operator pos:start="463:28" pos:end="463:29">*=</operator> <literal type="number" pos:start="463:31" pos:end="463:31">1</literal> <operator pos:start="463:33" pos:end="463:34">&lt;&lt;</operator> <literal type="number" pos:start="463:36" pos:end="463:36">8</literal></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></for>

        <break pos:start="467:9" pos:end="467:14">break;</break>

    </block_content>}</block></switch>



    <expr_stmt pos:start="473:5" pos:end="473:23"><expr pos:start="473:5" pos:end="473:22"><operator pos:start="473:5" pos:end="473:5">*</operator><name pos:start="473:6" pos:end="473:18">got_frame_ptr</name> <operator pos:start="473:20" pos:end="473:20">=</operator> <literal type="number" pos:start="473:22" pos:end="473:22">1</literal></expr>;</expr_stmt>



    <return pos:start="477:5" pos:end="477:21">return <expr pos:start="477:12" pos:end="477:20"><name pos:start="477:12" pos:end="477:20"><name pos:start="477:12" pos:end="477:14">pkt</name><operator pos:start="477:15" pos:end="477:16">-&gt;</operator><name pos:start="477:17" pos:end="477:20">size</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
