<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21138.c" pos:tabs="8"><function pos:start="1:1" pos:end="133:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:23">syborg_init</name><parameter_list pos:start="1:24" pos:end="7:75">(<parameter pos:start="1:25" pos:end="1:43"><decl pos:start="1:25" pos:end="1:43"><type pos:start="1:25" pos:end="1:43"><name pos:start="1:25" pos:end="1:34">ram_addr_t</name></type> <name pos:start="1:36" pos:end="1:43">ram_size</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:47"><decl pos:start="3:25" pos:end="3:47"><type pos:start="3:25" pos:end="3:47"><specifier pos:start="3:25" pos:end="3:29">const</specifier> <name pos:start="3:31" pos:end="3:34">char</name> <modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:47">boot_device</name></decl></parameter>,

                        <parameter pos:start="5:25" pos:end="5:51"><decl pos:start="5:25" pos:end="5:51"><type pos:start="5:25" pos:end="5:51"><specifier pos:start="5:25" pos:end="5:29">const</specifier> <name pos:start="5:31" pos:end="5:34">char</name> <modifier pos:start="5:36" pos:end="5:36">*</modifier></type><name pos:start="5:37" pos:end="5:51">kernel_filename</name></decl></parameter>, <parameter pos:start="5:54" pos:end="5:79"><decl pos:start="5:54" pos:end="5:79"><type pos:start="5:54" pos:end="5:79"><specifier pos:start="5:54" pos:end="5:58">const</specifier> <name pos:start="5:60" pos:end="5:63">char</name> <modifier pos:start="5:65" pos:end="5:65">*</modifier></type><name pos:start="5:66" pos:end="5:79">kernel_cmdline</name></decl></parameter>,

                        <parameter pos:start="7:25" pos:end="7:51"><decl pos:start="7:25" pos:end="7:51"><type pos:start="7:25" pos:end="7:51"><specifier pos:start="7:25" pos:end="7:29">const</specifier> <name pos:start="7:31" pos:end="7:34">char</name> <modifier pos:start="7:36" pos:end="7:36">*</modifier></type><name pos:start="7:37" pos:end="7:51">initrd_filename</name></decl></parameter>, <parameter pos:start="7:54" pos:end="7:74"><decl pos:start="7:54" pos:end="7:74"><type pos:start="7:54" pos:end="7:74"><specifier pos:start="7:54" pos:end="7:58">const</specifier> <name pos:start="7:60" pos:end="7:63">char</name> <modifier pos:start="7:65" pos:end="7:65">*</modifier></type><name pos:start="7:66" pos:end="7:74">cpu_model</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="133:1">{<block_content pos:start="11:5" pos:end="131:40">

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">CPUState</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:17">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">qemu_irq</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:21">cpu_pic</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">qemu_irq</name></type> <name pos:start="15:14" pos:end="15:20"><name pos:start="15:14" pos:end="15:16">pic</name><index pos:start="15:17" pos:end="15:20">[<expr pos:start="15:18" pos:end="15:19"><literal type="number" pos:start="15:18" pos:end="15:19">64</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:24"><decl pos:start="17:5" pos:end="17:23"><type pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:14">ram_addr_t</name></type> <name pos:start="17:16" pos:end="17:23">ram_addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:21"><decl pos:start="19:5" pos:end="19:20"><type pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:15">DeviceState</name> <modifier pos:start="19:17" pos:end="19:17">*</modifier></type><name pos:start="19:18" pos:end="19:20">dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:10"><decl pos:start="21:5" pos:end="21:9"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:9">i</name></decl>;</decl_stmt>



    <if_stmt pos:start="25:5" pos:end="27:32"><if pos:start="25:5" pos:end="27:32">if <condition pos:start="25:8" pos:end="25:19">(<expr pos:start="25:9" pos:end="25:18"><operator pos:start="25:9" pos:end="25:9">!</operator><name pos:start="25:10" pos:end="25:18">cpu_model</name></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:32"><block_content pos:start="27:9" pos:end="27:32">

        <expr_stmt pos:start="27:9" pos:end="27:32"><expr pos:start="27:9" pos:end="27:31"><name pos:start="27:9" pos:end="27:17">cpu_model</name> <operator pos:start="27:19" pos:end="27:19">=</operator> <literal type="string" pos:start="27:21" pos:end="27:31">"cortex-a8"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:30"><expr pos:start="29:5" pos:end="29:29"><name pos:start="29:5" pos:end="29:7">env</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <call pos:start="29:11" pos:end="29:29"><name pos:start="29:11" pos:end="29:18">cpu_init</name><argument_list pos:start="29:19" pos:end="29:29">(<argument pos:start="29:20" pos:end="29:28"><expr pos:start="29:20" pos:end="29:28"><name pos:start="29:20" pos:end="29:28">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="37:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:13">(<expr pos:start="31:9" pos:end="31:12"><operator pos:start="31:9" pos:end="31:9">!</operator><name pos:start="31:10" pos:end="31:12">env</name></expr>)</condition> <block pos:start="31:15" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:16">

        <expr_stmt pos:start="33:9" pos:end="33:59"><expr pos:start="33:9" pos:end="33:58"><call pos:start="33:9" pos:end="33:58"><name pos:start="33:9" pos:end="33:15">fprintf</name><argument_list pos:start="33:16" pos:end="33:58">(<argument pos:start="33:17" pos:end="33:22"><expr pos:start="33:17" pos:end="33:22"><name pos:start="33:17" pos:end="33:22">stderr</name></expr></argument>, <argument pos:start="33:25" pos:end="33:57"><expr pos:start="33:25" pos:end="33:57"><literal type="string" pos:start="33:25" pos:end="33:57">"Unable to find CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:16"><expr pos:start="35:9" pos:end="35:15"><call pos:start="35:9" pos:end="35:15"><name pos:start="35:9" pos:end="35:12">exit</name><argument_list pos:start="35:13" pos:end="35:15">(<argument pos:start="35:14" pos:end="35:14"><expr pos:start="35:14" pos:end="35:14"><literal type="number" pos:start="35:14" pos:end="35:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:30">/* RAM at address zero. */</comment>

    <expr_stmt pos:start="43:5" pos:end="43:40"><expr pos:start="43:5" pos:end="43:39"><name pos:start="43:5" pos:end="43:12">ram_addr</name> <operator pos:start="43:14" pos:end="43:14">=</operator> <call pos:start="43:16" pos:end="43:39"><name pos:start="43:16" pos:end="43:29">qemu_ram_alloc</name><argument_list pos:start="43:30" pos:end="43:39">(<argument pos:start="43:31" pos:end="43:38"><expr pos:start="43:31" pos:end="43:38"><name pos:start="43:31" pos:end="43:38">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:69"><expr pos:start="45:5" pos:end="45:68"><call pos:start="45:5" pos:end="45:68"><name pos:start="45:5" pos:end="45:32">cpu_register_physical_memory</name><argument_list pos:start="45:33" pos:end="45:68">(<argument pos:start="45:34" pos:end="45:34"><expr pos:start="45:34" pos:end="45:34"><literal type="number" pos:start="45:34" pos:end="45:34">0</literal></expr></argument>, <argument pos:start="45:37" pos:end="45:44"><expr pos:start="45:37" pos:end="45:44"><name pos:start="45:37" pos:end="45:44">ram_size</name></expr></argument>, <argument pos:start="45:47" pos:end="45:67"><expr pos:start="45:47" pos:end="45:67"><name pos:start="45:47" pos:end="45:54">ram_addr</name> <operator pos:start="45:56" pos:end="45:56">|</operator> <name pos:start="45:58" pos:end="45:67">IO_MEM_RAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:36"><expr pos:start="49:5" pos:end="49:35"><name pos:start="49:5" pos:end="49:11">cpu_pic</name> <operator pos:start="49:13" pos:end="49:13">=</operator> <call pos:start="49:15" pos:end="49:35"><name pos:start="49:15" pos:end="49:30">arm_pic_init_cpu</name><argument_list pos:start="49:31" pos:end="49:35">(<argument pos:start="49:32" pos:end="49:34"><expr pos:start="49:32" pos:end="49:34"><name pos:start="49:32" pos:end="49:34">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="53:57"><expr pos:start="51:5" pos:end="53:56"><name pos:start="51:5" pos:end="51:7">dev</name> <operator pos:start="51:9" pos:end="51:9">=</operator> <call pos:start="51:11" pos:end="53:56"><name pos:start="51:11" pos:end="51:30">sysbus_create_simple</name><argument_list pos:start="51:31" pos:end="53:56">(<argument pos:start="51:32" pos:end="51:49"><expr pos:start="51:32" pos:end="51:49"><literal type="string" pos:start="51:32" pos:end="51:49">"syborg,interrupt"</literal></expr></argument>, <argument pos:start="51:52" pos:end="51:61"><expr pos:start="51:52" pos:end="51:61"><literal type="number" pos:start="51:52" pos:end="51:61">0xC0000000</literal></expr></argument>,

                               <argument pos:start="53:32" pos:end="53:55"><expr pos:start="53:32" pos:end="53:55"><name pos:start="53:32" pos:end="53:55"><name pos:start="53:32" pos:end="53:38">cpu_pic</name><index pos:start="53:39" pos:end="53:55">[<expr pos:start="53:40" pos:end="53:54"><name pos:start="53:40" pos:end="53:54">ARM_PIC_CPU_IRQ</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="55:5" pos:end="59:5">for <control pos:start="55:9" pos:end="55:28">(<init pos:start="55:10" pos:end="55:15"><expr pos:start="55:10" pos:end="55:14"><name pos:start="55:10" pos:end="55:10">i</name> <operator pos:start="55:12" pos:end="55:12">=</operator> <literal type="number" pos:start="55:14" pos:end="55:14">0</literal></expr>;</init> <condition pos:start="55:17" pos:end="55:23"><expr pos:start="55:17" pos:end="55:22"><name pos:start="55:17" pos:end="55:17">i</name> <operator pos:start="55:19" pos:end="55:19">&lt;</operator> <literal type="number" pos:start="55:21" pos:end="55:22">64</literal></expr>;</condition> <incr pos:start="55:25" pos:end="55:27"><expr pos:start="55:25" pos:end="55:27"><name pos:start="55:25" pos:end="55:25">i</name><operator pos:start="55:26" pos:end="55:27">++</operator></expr></incr>)</control> <block pos:start="55:30" pos:end="59:5">{<block_content pos:start="57:9" pos:end="57:42">

        <expr_stmt pos:start="57:9" pos:end="57:42"><expr pos:start="57:9" pos:end="57:41"><name pos:start="57:9" pos:end="57:14"><name pos:start="57:9" pos:end="57:11">pic</name><index pos:start="57:12" pos:end="57:14">[<expr pos:start="57:13" pos:end="57:13"><name pos:start="57:13" pos:end="57:13">i</name></expr>]</index></name> <operator pos:start="57:16" pos:end="57:16">=</operator> <call pos:start="57:18" pos:end="57:41"><name pos:start="57:18" pos:end="57:33">qdev_get_gpio_in</name><argument_list pos:start="57:34" pos:end="57:41">(<argument pos:start="57:35" pos:end="57:37"><expr pos:start="57:35" pos:end="57:37"><name pos:start="57:35" pos:end="57:37">dev</name></expr></argument>, <argument pos:start="57:40" pos:end="57:40"><expr pos:start="57:40" pos:end="57:40"><name pos:start="57:40" pos:end="57:40">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="63:5" pos:end="63:57"><expr pos:start="63:5" pos:end="63:56"><call pos:start="63:5" pos:end="63:56"><name pos:start="63:5" pos:end="63:24">sysbus_create_simple</name><argument_list pos:start="63:25" pos:end="63:56">(<argument pos:start="63:26" pos:end="63:37"><expr pos:start="63:26" pos:end="63:37"><literal type="string" pos:start="63:26" pos:end="63:37">"syborg,rtc"</literal></expr></argument>, <argument pos:start="63:40" pos:end="63:49"><expr pos:start="63:40" pos:end="63:49"><literal type="number" pos:start="63:40" pos:end="63:49">0xC0001000</literal></expr></argument>, <argument pos:start="63:52" pos:end="63:55"><expr pos:start="63:52" pos:end="63:55"><name pos:start="63:52" pos:end="63:55">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:44"><expr pos:start="67:5" pos:end="67:43"><name pos:start="67:5" pos:end="67:7">dev</name> <operator pos:start="67:9" pos:end="67:9">=</operator> <call pos:start="67:11" pos:end="67:43"><name pos:start="67:11" pos:end="67:21">qdev_create</name><argument_list pos:start="67:22" pos:end="67:43">(<argument pos:start="67:23" pos:end="67:26"><expr pos:start="67:23" pos:end="67:26"><name pos:start="67:23" pos:end="67:26">NULL</name></expr></argument>, <argument pos:start="67:29" pos:end="67:42"><expr pos:start="67:29" pos:end="67:42"><literal type="string" pos:start="67:29" pos:end="67:42">"syborg,timer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:52"><expr pos:start="69:5" pos:end="69:51"><call pos:start="69:5" pos:end="69:51"><name pos:start="69:5" pos:end="69:24">qdev_prop_set_uint32</name><argument_list pos:start="69:25" pos:end="69:51">(<argument pos:start="69:26" pos:end="69:28"><expr pos:start="69:26" pos:end="69:28"><name pos:start="69:26" pos:end="69:28">dev</name></expr></argument>, <argument pos:start="69:31" pos:end="69:41"><expr pos:start="69:31" pos:end="69:41"><literal type="string" pos:start="69:31" pos:end="69:41">"frequency"</literal></expr></argument>, <argument pos:start="69:44" pos:end="69:50"><expr pos:start="69:44" pos:end="69:50"><literal type="number" pos:start="69:44" pos:end="69:50">1000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:19"><expr pos:start="71:5" pos:end="71:18"><call pos:start="71:5" pos:end="71:18"><name pos:start="71:5" pos:end="71:13">qdev_init</name><argument_list pos:start="71:14" pos:end="71:18">(<argument pos:start="71:15" pos:end="71:17"><expr pos:start="71:15" pos:end="71:17"><name pos:start="71:15" pos:end="71:17">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:58"><expr pos:start="73:5" pos:end="73:57"><call pos:start="73:5" pos:end="73:57"><name pos:start="73:5" pos:end="73:19">sysbus_mmio_map</name><argument_list pos:start="73:20" pos:end="73:57">(<argument pos:start="73:21" pos:end="73:41"><expr pos:start="73:21" pos:end="73:41"><call pos:start="73:21" pos:end="73:41"><name pos:start="73:21" pos:end="73:36">sysbus_from_qdev</name><argument_list pos:start="73:37" pos:end="73:41">(<argument pos:start="73:38" pos:end="73:40"><expr pos:start="73:38" pos:end="73:40"><name pos:start="73:38" pos:end="73:40">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="73:44" pos:end="73:44"><expr pos:start="73:44" pos:end="73:44"><literal type="number" pos:start="73:44" pos:end="73:44">0</literal></expr></argument>, <argument pos:start="73:47" pos:end="73:56"><expr pos:start="73:47" pos:end="73:56"><literal type="number" pos:start="73:47" pos:end="73:56">0xC0002000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:57"><expr pos:start="75:5" pos:end="75:56"><call pos:start="75:5" pos:end="75:56"><name pos:start="75:5" pos:end="75:22">sysbus_connect_irq</name><argument_list pos:start="75:23" pos:end="75:56">(<argument pos:start="75:24" pos:end="75:44"><expr pos:start="75:24" pos:end="75:44"><call pos:start="75:24" pos:end="75:44"><name pos:start="75:24" pos:end="75:39">sysbus_from_qdev</name><argument_list pos:start="75:40" pos:end="75:44">(<argument pos:start="75:41" pos:end="75:43"><expr pos:start="75:41" pos:end="75:43"><name pos:start="75:41" pos:end="75:43">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="75:47" pos:end="75:47"><expr pos:start="75:47" pos:end="75:47"><literal type="number" pos:start="75:47" pos:end="75:47">0</literal></expr></argument>, <argument pos:start="75:50" pos:end="75:55"><expr pos:start="75:50" pos:end="75:55"><name pos:start="75:50" pos:end="75:55"><name pos:start="75:50" pos:end="75:52">pic</name><index pos:start="75:53" pos:end="75:55">[<expr pos:start="75:54" pos:end="75:54"><literal type="number" pos:start="75:54" pos:end="75:54">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:64"><expr pos:start="79:5" pos:end="79:63"><call pos:start="79:5" pos:end="79:63"><name pos:start="79:5" pos:end="79:24">sysbus_create_simple</name><argument_list pos:start="79:25" pos:end="79:63">(<argument pos:start="79:26" pos:end="79:42"><expr pos:start="79:26" pos:end="79:42"><literal type="string" pos:start="79:26" pos:end="79:42">"syborg,keyboard"</literal></expr></argument>, <argument pos:start="79:45" pos:end="79:54"><expr pos:start="79:45" pos:end="79:54"><literal type="number" pos:start="79:45" pos:end="79:54">0xC0003000</literal></expr></argument>, <argument pos:start="79:57" pos:end="79:62"><expr pos:start="79:57" pos:end="79:62"><name pos:start="79:57" pos:end="79:62"><name pos:start="79:57" pos:end="79:59">pic</name><index pos:start="79:60" pos:end="79:62">[<expr pos:start="79:61" pos:end="79:61"><literal type="number" pos:start="79:61" pos:end="79:61">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:63"><expr pos:start="81:5" pos:end="81:62"><call pos:start="81:5" pos:end="81:62"><name pos:start="81:5" pos:end="81:24">sysbus_create_simple</name><argument_list pos:start="81:25" pos:end="81:62">(<argument pos:start="81:26" pos:end="81:41"><expr pos:start="81:26" pos:end="81:41"><literal type="string" pos:start="81:26" pos:end="81:41">"syborg,pointer"</literal></expr></argument>, <argument pos:start="81:44" pos:end="81:53"><expr pos:start="81:44" pos:end="81:53"><literal type="number" pos:start="81:44" pos:end="81:53">0xC0004000</literal></expr></argument>, <argument pos:start="81:56" pos:end="81:61"><expr pos:start="81:56" pos:end="81:61"><name pos:start="81:56" pos:end="81:61"><name pos:start="81:56" pos:end="81:58">pic</name><index pos:start="81:59" pos:end="81:61">[<expr pos:start="81:60" pos:end="81:60"><literal type="number" pos:start="81:60" pos:end="81:60">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:67"><expr pos:start="83:5" pos:end="83:66"><call pos:start="83:5" pos:end="83:66"><name pos:start="83:5" pos:end="83:24">sysbus_create_simple</name><argument_list pos:start="83:25" pos:end="83:66">(<argument pos:start="83:26" pos:end="83:45"><expr pos:start="83:26" pos:end="83:45"><literal type="string" pos:start="83:26" pos:end="83:45">"syborg,framebuffer"</literal></expr></argument>, <argument pos:start="83:48" pos:end="83:57"><expr pos:start="83:48" pos:end="83:57"><literal type="number" pos:start="83:48" pos:end="83:57">0xC0005000</literal></expr></argument>, <argument pos:start="83:60" pos:end="83:65"><expr pos:start="83:60" pos:end="83:65"><name pos:start="83:60" pos:end="83:65"><name pos:start="83:60" pos:end="83:62">pic</name><index pos:start="83:63" pos:end="83:65">[<expr pos:start="83:64" pos:end="83:64"><literal type="number" pos:start="83:64" pos:end="83:64">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:62"><expr pos:start="85:5" pos:end="85:61"><call pos:start="85:5" pos:end="85:61"><name pos:start="85:5" pos:end="85:24">sysbus_create_simple</name><argument_list pos:start="85:25" pos:end="85:61">(<argument pos:start="85:26" pos:end="85:40"><expr pos:start="85:26" pos:end="85:40"><literal type="string" pos:start="85:26" pos:end="85:40">"syborg,serial"</literal></expr></argument>, <argument pos:start="85:43" pos:end="85:52"><expr pos:start="85:43" pos:end="85:52"><literal type="number" pos:start="85:43" pos:end="85:52">0xC0006000</literal></expr></argument>, <argument pos:start="85:55" pos:end="85:60"><expr pos:start="85:55" pos:end="85:60"><name pos:start="85:55" pos:end="85:60"><name pos:start="85:55" pos:end="85:57">pic</name><index pos:start="85:58" pos:end="85:60">[<expr pos:start="85:59" pos:end="85:59"><literal type="number" pos:start="85:59" pos:end="85:59">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:62"><expr pos:start="87:5" pos:end="87:61"><call pos:start="87:5" pos:end="87:61"><name pos:start="87:5" pos:end="87:24">sysbus_create_simple</name><argument_list pos:start="87:25" pos:end="87:61">(<argument pos:start="87:26" pos:end="87:40"><expr pos:start="87:26" pos:end="87:40"><literal type="string" pos:start="87:26" pos:end="87:40">"syborg,serial"</literal></expr></argument>, <argument pos:start="87:43" pos:end="87:52"><expr pos:start="87:43" pos:end="87:52"><literal type="number" pos:start="87:43" pos:end="87:52">0xC0007000</literal></expr></argument>, <argument pos:start="87:55" pos:end="87:60"><expr pos:start="87:55" pos:end="87:60"><name pos:start="87:55" pos:end="87:60"><name pos:start="87:55" pos:end="87:57">pic</name><index pos:start="87:58" pos:end="87:60">[<expr pos:start="87:59" pos:end="87:59"><literal type="number" pos:start="87:59" pos:end="87:59">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:62"><expr pos:start="89:5" pos:end="89:61"><call pos:start="89:5" pos:end="89:61"><name pos:start="89:5" pos:end="89:24">sysbus_create_simple</name><argument_list pos:start="89:25" pos:end="89:61">(<argument pos:start="89:26" pos:end="89:40"><expr pos:start="89:26" pos:end="89:40"><literal type="string" pos:start="89:26" pos:end="89:40">"syborg,serial"</literal></expr></argument>, <argument pos:start="89:43" pos:end="89:52"><expr pos:start="89:43" pos:end="89:52"><literal type="number" pos:start="89:43" pos:end="89:52">0xC0008000</literal></expr></argument>, <argument pos:start="89:55" pos:end="89:60"><expr pos:start="89:55" pos:end="89:60"><name pos:start="89:55" pos:end="89:60"><name pos:start="89:55" pos:end="89:57">pic</name><index pos:start="89:58" pos:end="89:60">[<expr pos:start="89:59" pos:end="89:59"><literal type="number" pos:start="89:59" pos:end="89:59">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:62"><expr pos:start="91:5" pos:end="91:61"><call pos:start="91:5" pos:end="91:61"><name pos:start="91:5" pos:end="91:24">sysbus_create_simple</name><argument_list pos:start="91:25" pos:end="91:61">(<argument pos:start="91:26" pos:end="91:40"><expr pos:start="91:26" pos:end="91:40"><literal type="string" pos:start="91:26" pos:end="91:40">"syborg,serial"</literal></expr></argument>, <argument pos:start="91:43" pos:end="91:52"><expr pos:start="91:43" pos:end="91:52"><literal type="number" pos:start="91:43" pos:end="91:52">0xC0009000</literal></expr></argument>, <argument pos:start="91:55" pos:end="91:60"><expr pos:start="91:55" pos:end="91:60"><name pos:start="91:55" pos:end="91:60"><name pos:start="91:55" pos:end="91:57">pic</name><index pos:start="91:58" pos:end="91:60">[<expr pos:start="91:59" pos:end="91:59"><literal type="number" pos:start="91:59" pos:end="91:59">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="95:5" pos:end="117:5"><if pos:start="95:5" pos:end="117:5">if <condition pos:start="95:8" pos:end="95:25">(<expr pos:start="95:9" pos:end="95:24"><name pos:start="95:9" pos:end="95:19"><name pos:start="95:9" pos:end="95:16">nd_table</name><index pos:start="95:17" pos:end="95:19">[<expr pos:start="95:18" pos:end="95:18"><literal type="number" pos:start="95:18" pos:end="95:18">0</literal></expr>]</index></name><operator pos:start="95:20" pos:end="95:20">.</operator><name pos:start="95:21" pos:end="95:24">vlan</name></expr>)</condition> <block pos:start="95:27" pos:end="117:5">{<block_content pos:start="97:9" pos:end="115:41">

        <decl_stmt pos:start="97:9" pos:end="97:25"><decl pos:start="97:9" pos:end="97:24"><type pos:start="97:9" pos:end="97:21"><name pos:start="97:9" pos:end="97:19">DeviceState</name> <modifier pos:start="97:21" pos:end="97:21">*</modifier></type><name pos:start="97:22" pos:end="97:24">dev</name></decl>;</decl_stmt>

        <decl_stmt pos:start="99:9" pos:end="99:24"><decl pos:start="99:9" pos:end="99:23"><type pos:start="99:9" pos:end="99:22"><name pos:start="99:9" pos:end="99:20">SysBusDevice</name> <modifier pos:start="99:22" pos:end="99:22">*</modifier></type><name pos:start="99:23" pos:end="99:23">s</name></decl>;</decl_stmt>



        <expr_stmt pos:start="103:9" pos:end="103:53"><expr pos:start="103:9" pos:end="103:52"><call pos:start="103:9" pos:end="103:52"><name pos:start="103:9" pos:end="103:28">qemu_check_nic_model</name><argument_list pos:start="103:29" pos:end="103:52">(<argument pos:start="103:30" pos:end="103:41"><expr pos:start="103:30" pos:end="103:41"><operator pos:start="103:30" pos:end="103:30">&amp;</operator><name pos:start="103:31" pos:end="103:41"><name pos:start="103:31" pos:end="103:38">nd_table</name><index pos:start="103:39" pos:end="103:41">[<expr pos:start="103:40" pos:end="103:40"><literal type="number" pos:start="103:40" pos:end="103:40">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="103:44" pos:end="103:51"><expr pos:start="103:44" pos:end="103:51"><literal type="string" pos:start="103:44" pos:end="103:51">"virtio"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:53"><expr pos:start="105:9" pos:end="105:52"><name pos:start="105:9" pos:end="105:11">dev</name> <operator pos:start="105:13" pos:end="105:13">=</operator> <call pos:start="105:15" pos:end="105:52"><name pos:start="105:15" pos:end="105:25">qdev_create</name><argument_list pos:start="105:26" pos:end="105:52">(<argument pos:start="105:27" pos:end="105:30"><expr pos:start="105:27" pos:end="105:30"><name pos:start="105:27" pos:end="105:30">NULL</name></expr></argument>, <argument pos:start="105:33" pos:end="105:51"><expr pos:start="105:33" pos:end="105:51"><literal type="string" pos:start="105:33" pos:end="105:51">"syborg,virtio-net"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:31"><expr pos:start="107:9" pos:end="107:30"><name pos:start="107:9" pos:end="107:15"><name pos:start="107:9" pos:end="107:11">dev</name><operator pos:start="107:12" pos:end="107:13">-&gt;</operator><name pos:start="107:14" pos:end="107:15">nd</name></name> <operator pos:start="107:17" pos:end="107:17">=</operator> <operator pos:start="107:19" pos:end="107:19">&amp;</operator><name pos:start="107:20" pos:end="107:30"><name pos:start="107:20" pos:end="107:27">nd_table</name><index pos:start="107:28" pos:end="107:30">[<expr pos:start="107:29" pos:end="107:29"><literal type="number" pos:start="107:29" pos:end="107:29">0</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:23"><expr pos:start="109:9" pos:end="109:22"><call pos:start="109:9" pos:end="109:22"><name pos:start="109:9" pos:end="109:17">qdev_init</name><argument_list pos:start="109:18" pos:end="109:22">(<argument pos:start="109:19" pos:end="109:21"><expr pos:start="109:19" pos:end="109:21"><name pos:start="109:19" pos:end="109:21">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:34"><expr pos:start="111:9" pos:end="111:33"><name pos:start="111:9" pos:end="111:9">s</name> <operator pos:start="111:11" pos:end="111:11">=</operator> <call pos:start="111:13" pos:end="111:33"><name pos:start="111:13" pos:end="111:28">sysbus_from_qdev</name><argument_list pos:start="111:29" pos:end="111:33">(<argument pos:start="111:30" pos:end="111:32"><expr pos:start="111:30" pos:end="111:32"><name pos:start="111:30" pos:end="111:32">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:42"><expr pos:start="113:9" pos:end="113:41"><call pos:start="113:9" pos:end="113:41"><name pos:start="113:9" pos:end="113:23">sysbus_mmio_map</name><argument_list pos:start="113:24" pos:end="113:41">(<argument pos:start="113:25" pos:end="113:25"><expr pos:start="113:25" pos:end="113:25"><name pos:start="113:25" pos:end="113:25">s</name></expr></argument>, <argument pos:start="113:28" pos:end="113:28"><expr pos:start="113:28" pos:end="113:28"><literal type="number" pos:start="113:28" pos:end="113:28">0</literal></expr></argument>, <argument pos:start="113:31" pos:end="113:40"><expr pos:start="113:31" pos:end="113:40"><literal type="number" pos:start="113:31" pos:end="113:40">0xc000c000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:41"><expr pos:start="115:9" pos:end="115:40"><call pos:start="115:9" pos:end="115:40"><name pos:start="115:9" pos:end="115:26">sysbus_connect_irq</name><argument_list pos:start="115:27" pos:end="115:40">(<argument pos:start="115:28" pos:end="115:28"><expr pos:start="115:28" pos:end="115:28"><name pos:start="115:28" pos:end="115:28">s</name></expr></argument>, <argument pos:start="115:31" pos:end="115:31"><expr pos:start="115:31" pos:end="115:31"><literal type="number" pos:start="115:31" pos:end="115:31">0</literal></expr></argument>, <argument pos:start="115:34" pos:end="115:39"><expr pos:start="115:34" pos:end="115:39"><name pos:start="115:34" pos:end="115:39"><name pos:start="115:34" pos:end="115:36">pic</name><index pos:start="115:37" pos:end="115:39">[<expr pos:start="115:38" pos:end="115:38"><literal type="number" pos:start="115:38" pos:end="115:38">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="121:5" pos:end="121:37"><expr pos:start="121:5" pos:end="121:36"><name pos:start="121:5" pos:end="121:25"><name pos:start="121:5" pos:end="121:16">syborg_binfo</name><operator pos:start="121:17" pos:end="121:17">.</operator><name pos:start="121:18" pos:end="121:25">ram_size</name></name> <operator pos:start="121:27" pos:end="121:27">=</operator> <name pos:start="121:29" pos:end="121:36">ram_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:51"><expr pos:start="123:5" pos:end="123:50"><name pos:start="123:5" pos:end="123:32"><name pos:start="123:5" pos:end="123:16">syborg_binfo</name><operator pos:start="123:17" pos:end="123:17">.</operator><name pos:start="123:18" pos:end="123:32">kernel_filename</name></name> <operator pos:start="123:34" pos:end="123:34">=</operator> <name pos:start="123:36" pos:end="123:50">kernel_filename</name></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:49"><expr pos:start="125:5" pos:end="125:48"><name pos:start="125:5" pos:end="125:31"><name pos:start="125:5" pos:end="125:16">syborg_binfo</name><operator pos:start="125:17" pos:end="125:17">.</operator><name pos:start="125:18" pos:end="125:31">kernel_cmdline</name></name> <operator pos:start="125:33" pos:end="125:33">=</operator> <name pos:start="125:35" pos:end="125:48">kernel_cmdline</name></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:51"><expr pos:start="127:5" pos:end="127:50"><name pos:start="127:5" pos:end="127:32"><name pos:start="127:5" pos:end="127:16">syborg_binfo</name><operator pos:start="127:17" pos:end="127:17">.</operator><name pos:start="127:18" pos:end="127:32">initrd_filename</name></name> <operator pos:start="127:34" pos:end="127:34">=</operator> <name pos:start="127:36" pos:end="127:50">initrd_filename</name></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:30"><expr pos:start="129:5" pos:end="129:29"><name pos:start="129:5" pos:end="129:25"><name pos:start="129:5" pos:end="129:16">syborg_binfo</name><operator pos:start="129:17" pos:end="129:17">.</operator><name pos:start="129:18" pos:end="129:25">board_id</name></name> <operator pos:start="129:27" pos:end="129:27">=</operator> <literal type="number" pos:start="129:29" pos:end="129:29">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:40"><expr pos:start="131:5" pos:end="131:39"><call pos:start="131:5" pos:end="131:39"><name pos:start="131:5" pos:end="131:19">arm_load_kernel</name><argument_list pos:start="131:20" pos:end="131:39">(<argument pos:start="131:21" pos:end="131:23"><expr pos:start="131:21" pos:end="131:23"><name pos:start="131:21" pos:end="131:23">env</name></expr></argument>, <argument pos:start="131:26" pos:end="131:38"><expr pos:start="131:26" pos:end="131:38"><operator pos:start="131:26" pos:end="131:26">&amp;</operator><name pos:start="131:27" pos:end="131:38">syborg_binfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
