<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24662.c" pos:tabs="8"><function pos:start="1:1" pos:end="129:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:20">r2d_init</name><parameter_list pos:start="1:21" pos:end="7:65">(<parameter pos:start="1:22" pos:end="1:40"><decl pos:start="1:22" pos:end="1:40"><type pos:start="1:22" pos:end="1:40"><name pos:start="1:22" pos:end="1:31">ram_addr_t</name></type> <name pos:start="1:33" pos:end="1:40">ram_size</name></decl></parameter>,

              <parameter pos:start="3:15" pos:end="3:37"><decl pos:start="3:15" pos:end="3:37"><type pos:start="3:15" pos:end="3:37"><specifier pos:start="3:15" pos:end="3:19">const</specifier> <name pos:start="3:21" pos:end="3:24">char</name> <modifier pos:start="3:26" pos:end="3:26">*</modifier></type><name pos:start="3:27" pos:end="3:37">boot_device</name></decl></parameter>,

	      <parameter pos:start="5:15" pos:end="5:41"><decl pos:start="5:15" pos:end="5:41"><type pos:start="5:15" pos:end="5:41"><specifier pos:start="5:15" pos:end="5:19">const</specifier> <name pos:start="5:21" pos:end="5:24">char</name> <modifier pos:start="5:26" pos:end="5:26">*</modifier></type><name pos:start="5:27" pos:end="5:41">kernel_filename</name></decl></parameter>, <parameter pos:start="5:44" pos:end="5:69"><decl pos:start="5:44" pos:end="5:69"><type pos:start="5:44" pos:end="5:69"><specifier pos:start="5:44" pos:end="5:48">const</specifier> <name pos:start="5:50" pos:end="5:53">char</name> <modifier pos:start="5:55" pos:end="5:55">*</modifier></type><name pos:start="5:56" pos:end="5:69">kernel_cmdline</name></decl></parameter>,

	      <parameter pos:start="7:15" pos:end="7:41"><decl pos:start="7:15" pos:end="7:41"><type pos:start="7:15" pos:end="7:41"><specifier pos:start="7:15" pos:end="7:19">const</specifier> <name pos:start="7:21" pos:end="7:24">char</name> <modifier pos:start="7:26" pos:end="7:26">*</modifier></type><name pos:start="7:27" pos:end="7:41">initrd_filename</name></decl></parameter>, <parameter pos:start="7:44" pos:end="7:64"><decl pos:start="7:44" pos:end="7:64"><type pos:start="7:44" pos:end="7:64"><specifier pos:start="7:44" pos:end="7:48">const</specifier> <name pos:start="7:50" pos:end="7:53">char</name> <modifier pos:start="7:55" pos:end="7:55">*</modifier></type><name pos:start="7:56" pos:end="7:64">cpu_model</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="129:1">{<block_content pos:start="11:5" pos:end="127:5">

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">CPUState</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:17">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:26"><decl pos:start="13:5" pos:end="13:25"><type pos:start="13:5" pos:end="13:24"><name pos:start="13:5" pos:end="13:22"><name pos:start="13:5" pos:end="13:10">struct</name> <name pos:start="13:12" pos:end="13:22">SH7750State</name></name> <modifier pos:start="13:24" pos:end="13:24">*</modifier></type><name pos:start="13:25" pos:end="13:25">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:26"><decl pos:start="15:5" pos:end="15:25"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:14">ram_addr_t</name></type> <name pos:start="15:16" pos:end="15:25">sdram_addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:18"><decl pos:start="17:5" pos:end="17:17"><type pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:12">qemu_irq</name> <modifier pos:start="17:14" pos:end="17:14">*</modifier></type><name pos:start="17:15" pos:end="17:17">irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:16"><decl pos:start="19:5" pos:end="19:15"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:10">PCIBus</name> <modifier pos:start="19:12" pos:end="19:12">*</modifier></type><name pos:start="19:13" pos:end="19:15">pci</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:21"><decl pos:start="21:5" pos:end="21:20"><type pos:start="21:5" pos:end="21:15"><name pos:start="21:5" pos:end="21:13">DriveInfo</name> <modifier pos:start="21:15" pos:end="21:15">*</modifier></type><name pos:start="21:16" pos:end="21:20">dinfo</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:10"><decl pos:start="23:5" pos:end="23:9"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:9">i</name></decl>;</decl_stmt>



    <if_stmt pos:start="27:5" pos:end="29:30"><if pos:start="27:5" pos:end="29:30">if <condition pos:start="27:8" pos:end="27:19">(<expr pos:start="27:9" pos:end="27:18"><operator pos:start="27:9" pos:end="27:9">!</operator><name pos:start="27:10" pos:end="27:18">cpu_model</name></expr>)</condition><block type="pseudo" pos:start="29:9" pos:end="29:30"><block_content pos:start="29:9" pos:end="29:30">

        <expr_stmt pos:start="29:9" pos:end="29:30"><expr pos:start="29:9" pos:end="29:29"><name pos:start="29:9" pos:end="29:17">cpu_model</name> <operator pos:start="29:19" pos:end="29:19">=</operator> <literal type="string" pos:start="29:21" pos:end="29:29">"SH7751R"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:30"><expr pos:start="33:5" pos:end="33:29"><name pos:start="33:5" pos:end="33:7">env</name> <operator pos:start="33:9" pos:end="33:9">=</operator> <call pos:start="33:11" pos:end="33:29"><name pos:start="33:11" pos:end="33:18">cpu_init</name><argument_list pos:start="33:19" pos:end="33:29">(<argument pos:start="33:20" pos:end="33:28"><expr pos:start="33:20" pos:end="33:28"><name pos:start="33:20" pos:end="33:28">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:13">(<expr pos:start="35:9" pos:end="35:12"><operator pos:start="35:9" pos:end="35:9">!</operator><name pos:start="35:10" pos:end="35:12">env</name></expr>)</condition> <block pos:start="35:15" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:16">

        <expr_stmt pos:start="37:9" pos:end="37:59"><expr pos:start="37:9" pos:end="37:58"><call pos:start="37:9" pos:end="37:58"><name pos:start="37:9" pos:end="37:15">fprintf</name><argument_list pos:start="37:16" pos:end="37:58">(<argument pos:start="37:17" pos:end="37:22"><expr pos:start="37:17" pos:end="37:22"><name pos:start="37:17" pos:end="37:22">stderr</name></expr></argument>, <argument pos:start="37:25" pos:end="37:57"><expr pos:start="37:25" pos:end="37:57"><literal type="string" pos:start="37:25" pos:end="37:57">"Unable to find CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:16"><expr pos:start="39:9" pos:end="39:15"><call pos:start="39:9" pos:end="39:15"><name pos:start="39:9" pos:end="39:12">exit</name><argument_list pos:start="39:13" pos:end="39:15">(<argument pos:start="39:14" pos:end="39:14"><expr pos:start="39:14" pos:end="39:14"><literal type="number" pos:start="39:14" pos:end="39:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="45:5" pos:end="45:31">/* Allocate memory space */</comment>

    <expr_stmt pos:start="47:5" pos:end="47:44"><expr pos:start="47:5" pos:end="47:43"><name pos:start="47:5" pos:end="47:14">sdram_addr</name> <operator pos:start="47:16" pos:end="47:16">=</operator> <call pos:start="47:18" pos:end="47:43"><name pos:start="47:18" pos:end="47:31">qemu_ram_alloc</name><argument_list pos:start="47:32" pos:end="47:43">(<argument pos:start="47:33" pos:end="47:42"><expr pos:start="47:33" pos:end="47:42"><name pos:start="47:33" pos:end="47:42">SDRAM_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:69"><expr pos:start="49:5" pos:end="49:68"><call pos:start="49:5" pos:end="49:68"><name pos:start="49:5" pos:end="49:32">cpu_register_physical_memory</name><argument_list pos:start="49:33" pos:end="49:68">(<argument pos:start="49:34" pos:end="49:43"><expr pos:start="49:34" pos:end="49:43"><name pos:start="49:34" pos:end="49:43">SDRAM_BASE</name></expr></argument>, <argument pos:start="49:46" pos:end="49:55"><expr pos:start="49:46" pos:end="49:55"><name pos:start="49:46" pos:end="49:55">SDRAM_SIZE</name></expr></argument>, <argument pos:start="49:58" pos:end="49:67"><expr pos:start="49:58" pos:end="49:67"><name pos:start="49:58" pos:end="49:67">sdram_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="51:5" pos:end="51:30">/* Register peripherals */</comment>

    <expr_stmt pos:start="53:5" pos:end="53:25"><expr pos:start="53:5" pos:end="53:24"><name pos:start="53:5" pos:end="53:5">s</name> <operator pos:start="53:7" pos:end="53:7">=</operator> <call pos:start="53:9" pos:end="53:24"><name pos:start="53:9" pos:end="53:19">sh7750_init</name><argument_list pos:start="53:20" pos:end="53:24">(<argument pos:start="53:21" pos:end="53:23"><expr pos:start="53:21" pos:end="53:23"><name pos:start="53:21" pos:end="53:23">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:51"><expr pos:start="55:5" pos:end="55:50"><name pos:start="55:5" pos:end="55:7">irq</name> <operator pos:start="55:9" pos:end="55:9">=</operator> <call pos:start="55:11" pos:end="55:50"><name pos:start="55:11" pos:end="55:23">r2d_fpga_init</name><argument_list pos:start="55:24" pos:end="55:50">(<argument pos:start="55:25" pos:end="55:34"><expr pos:start="55:25" pos:end="55:34"><literal type="number" pos:start="55:25" pos:end="55:34">0x04000000</literal></expr></argument>, <argument pos:start="55:37" pos:end="55:49"><expr pos:start="55:37" pos:end="55:49"><call pos:start="55:37" pos:end="55:49"><name pos:start="55:37" pos:end="55:46">sh7750_irl</name><argument_list pos:start="55:47" pos:end="55:49">(<argument pos:start="55:48" pos:end="55:48"><expr pos:start="55:48" pos:end="55:48"><name pos:start="55:48" pos:end="55:48">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:75"><expr pos:start="57:5" pos:end="57:74"><name pos:start="57:5" pos:end="57:7">pci</name> <operator pos:start="57:9" pos:end="57:9">=</operator> <call pos:start="57:11" pos:end="57:74"><name pos:start="57:11" pos:end="57:29">sh_pci_register_bus</name><argument_list pos:start="57:30" pos:end="57:74">(<argument pos:start="57:31" pos:end="57:45"><expr pos:start="57:31" pos:end="57:45"><name pos:start="57:31" pos:end="57:45">r2d_pci_set_irq</name></expr></argument>, <argument pos:start="57:48" pos:end="57:62"><expr pos:start="57:48" pos:end="57:62"><name pos:start="57:48" pos:end="57:62">r2d_pci_map_irq</name></expr></argument>, <argument pos:start="57:65" pos:end="57:67"><expr pos:start="57:65" pos:end="57:67"><name pos:start="57:65" pos:end="57:67">irq</name></expr></argument>, <argument pos:start="57:70" pos:end="57:70"><expr pos:start="57:70" pos:end="57:70"><literal type="number" pos:start="57:70" pos:end="57:70">0</literal></expr></argument>, <argument pos:start="57:73" pos:end="57:73"><expr pos:start="57:73" pos:end="57:73"><literal type="number" pos:start="57:73" pos:end="57:73">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:71"><expr pos:start="61:5" pos:end="61:70"><call pos:start="61:5" pos:end="61:70"><name pos:start="61:5" pos:end="61:14">sm501_init</name><argument_list pos:start="61:15" pos:end="61:70">(<argument pos:start="61:16" pos:end="61:25"><expr pos:start="61:16" pos:end="61:25"><literal type="number" pos:start="61:16" pos:end="61:25">0x10000000</literal></expr></argument>, <argument pos:start="61:28" pos:end="61:42"><expr pos:start="61:28" pos:end="61:42"><name pos:start="61:28" pos:end="61:42">SM501_VRAM_SIZE</name></expr></argument>, <argument pos:start="61:45" pos:end="61:54"><expr pos:start="61:45" pos:end="61:54"><name pos:start="61:45" pos:end="61:54"><name pos:start="61:45" pos:end="61:47">irq</name><index pos:start="61:48" pos:end="61:54">[<expr pos:start="61:49" pos:end="61:53"><name pos:start="61:49" pos:end="61:53">SM501</name></expr>]</index></name></expr></argument>, <argument pos:start="61:57" pos:end="61:69"><expr pos:start="61:57" pos:end="61:69"><name pos:start="61:57" pos:end="61:69"><name pos:start="61:57" pos:end="61:66">serial_hds</name><index pos:start="61:67" pos:end="61:69">[<expr pos:start="61:68" pos:end="61:68"><literal type="number" pos:start="61:68" pos:end="61:68">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="65:5" pos:end="65:50">/* onboard CF (True IDE mode, Master only). */</comment>

    <if_stmt pos:start="67:5" pos:end="71:35"><if pos:start="67:5" pos:end="71:35">if <condition pos:start="67:8" pos:end="67:50">(<expr pos:start="67:9" pos:end="67:49"><operator pos:start="67:9" pos:end="67:9">(</operator><name pos:start="67:10" pos:end="67:14">dinfo</name> <operator pos:start="67:16" pos:end="67:16">=</operator> <call pos:start="67:18" pos:end="67:40"><name pos:start="67:18" pos:end="67:26">drive_get</name><argument_list pos:start="67:27" pos:end="67:40">(<argument pos:start="67:28" pos:end="67:33"><expr pos:start="67:28" pos:end="67:33"><name pos:start="67:28" pos:end="67:33">IF_IDE</name></expr></argument>, <argument pos:start="67:36" pos:end="67:36"><expr pos:start="67:36" pos:end="67:36"><literal type="number" pos:start="67:36" pos:end="67:36">0</literal></expr></argument>, <argument pos:start="67:39" pos:end="67:39"><expr pos:start="67:39" pos:end="67:39"><literal type="number" pos:start="67:39" pos:end="67:39">0</literal></expr></argument>)</argument_list></call><operator pos:start="67:41" pos:end="67:41">)</operator> <operator pos:start="67:43" pos:end="67:44">!=</operator> <name pos:start="67:46" pos:end="67:49">NULL</name></expr>)</condition><block type="pseudo" pos:start="69:9" pos:end="71:35"><block_content pos:start="69:9" pos:end="71:35">

	<expr_stmt pos:start="69:9" pos:end="71:35"><expr pos:start="69:9" pos:end="71:34"><call pos:start="69:9" pos:end="71:34"><name pos:start="69:9" pos:end="69:21">mmio_ide_init</name><argument_list pos:start="69:22" pos:end="71:34">(<argument pos:start="69:23" pos:end="69:32"><expr pos:start="69:23" pos:end="69:32"><literal type="number" pos:start="69:23" pos:end="69:32">0x14001000</literal></expr></argument>, <argument pos:start="69:35" pos:end="69:44"><expr pos:start="69:35" pos:end="69:44"><literal type="number" pos:start="69:35" pos:end="69:44">0x1400080c</literal></expr></argument>, <argument pos:start="69:47" pos:end="69:57"><expr pos:start="69:47" pos:end="69:57"><name pos:start="69:47" pos:end="69:57"><name pos:start="69:47" pos:end="69:49">irq</name><index pos:start="69:50" pos:end="69:57">[<expr pos:start="69:51" pos:end="69:56"><name pos:start="69:51" pos:end="69:56">CF_IDE</name></expr>]</index></name></expr></argument>, <argument pos:start="69:60" pos:end="69:60"><expr pos:start="69:60" pos:end="69:60"><literal type="number" pos:start="69:60" pos:end="69:60">1</literal></expr></argument>,

		      <argument pos:start="71:23" pos:end="71:27"><expr pos:start="71:23" pos:end="71:27"><name pos:start="71:23" pos:end="71:27">dinfo</name></expr></argument>, <argument pos:start="71:30" pos:end="71:33"><expr pos:start="71:30" pos:end="71:33"><name pos:start="71:30" pos:end="71:33">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="75:5" pos:end="75:45">/* NIC: rtl8139 on-board, and 2 slots. */</comment>

    <for pos:start="77:5" pos:end="79:65">for <control pos:start="77:9" pos:end="77:33">(<init pos:start="77:10" pos:end="77:15"><expr pos:start="77:10" pos:end="77:14"><name pos:start="77:10" pos:end="77:10">i</name> <operator pos:start="77:12" pos:end="77:12">=</operator> <literal type="number" pos:start="77:14" pos:end="77:14">0</literal></expr>;</init> <condition pos:start="77:17" pos:end="77:28"><expr pos:start="77:17" pos:end="77:27"><name pos:start="77:17" pos:end="77:17">i</name> <operator pos:start="77:19" pos:end="77:19">&lt;</operator> <name pos:start="77:21" pos:end="77:27">nb_nics</name></expr>;</condition> <incr pos:start="77:30" pos:end="77:32"><expr pos:start="77:30" pos:end="77:32"><name pos:start="77:30" pos:end="77:30">i</name><operator pos:start="77:31" pos:end="77:32">++</operator></expr></incr>)</control><block type="pseudo" pos:start="79:9" pos:end="79:65"><block_content pos:start="79:9" pos:end="79:65">

        <expr_stmt pos:start="79:9" pos:end="79:65"><expr pos:start="79:9" pos:end="79:64"><call pos:start="79:9" pos:end="79:64"><name pos:start="79:9" pos:end="79:20">pci_nic_init</name><argument_list pos:start="79:21" pos:end="79:64">(<argument pos:start="79:22" pos:end="79:33"><expr pos:start="79:22" pos:end="79:33"><operator pos:start="79:22" pos:end="79:22">&amp;</operator><name pos:start="79:23" pos:end="79:33"><name pos:start="79:23" pos:end="79:30">nd_table</name><index pos:start="79:31" pos:end="79:33">[<expr pos:start="79:32" pos:end="79:32"><name pos:start="79:32" pos:end="79:32">i</name></expr>]</index></name></expr></argument>, <argument pos:start="79:36" pos:end="79:44"><expr pos:start="79:36" pos:end="79:44"><literal type="string" pos:start="79:36" pos:end="79:44">"rtl8139"</literal></expr></argument>, <argument pos:start="79:47" pos:end="79:63"><expr pos:start="79:47" pos:end="79:63"><ternary pos:start="79:47" pos:end="79:63"><condition pos:start="79:47" pos:end="79:52"><expr pos:start="79:47" pos:end="79:50"><name pos:start="79:47" pos:end="79:47">i</name><operator pos:start="79:48" pos:end="79:49">==</operator><literal type="number" pos:start="79:50" pos:end="79:50">0</literal></expr> ?</condition><then pos:start="79:54" pos:end="79:56"> <expr pos:start="79:54" pos:end="79:56"><literal type="string" pos:start="79:54" pos:end="79:56">"2"</literal></expr> </then><else pos:start="79:58" pos:end="79:63">: <expr pos:start="79:60" pos:end="79:63"><name pos:start="79:60" pos:end="79:63">NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <comment type="block" pos:start="83:5" pos:end="83:43">/* Todo: register on board registers */</comment>

    <if_stmt pos:start="85:5" pos:end="127:5"><if pos:start="85:5" pos:end="127:5">if <condition pos:start="85:8" pos:end="85:24">(<expr pos:start="85:9" pos:end="85:23"><name pos:start="85:9" pos:end="85:23">kernel_filename</name></expr>)</condition> <block pos:start="85:26" pos:end="127:5">{<block_content pos:start="87:7" pos:end="125:7">

      <decl_stmt pos:start="87:7" pos:end="87:22"><decl pos:start="87:7" pos:end="87:21"><type pos:start="87:7" pos:end="87:9"><name pos:start="87:7" pos:end="87:9">int</name></type> <name pos:start="87:11" pos:end="87:21">kernel_size</name></decl>;</decl_stmt>

      <comment type="block" pos:start="89:7" pos:end="89:59">/* initialization which should be done by firmware */</comment>

      <expr_stmt pos:start="91:7" pos:end="91:34"><expr pos:start="91:7" pos:end="91:33"><call pos:start="91:7" pos:end="91:33"><name pos:start="91:7" pos:end="91:14">stl_phys</name><argument_list pos:start="91:15" pos:end="91:33">(<argument pos:start="91:16" pos:end="91:26"><expr pos:start="91:16" pos:end="91:26"><name pos:start="91:16" pos:end="91:26">SH7750_BCR1</name></expr></argument>, <argument pos:start="91:29" pos:end="91:32"><expr pos:start="91:29" pos:end="91:32"><literal type="number" pos:start="91:29" pos:end="91:29">1</literal><operator pos:start="91:30" pos:end="91:31">&lt;&lt;</operator><literal type="number" pos:start="91:32" pos:end="91:32">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="91:36" pos:end="91:50">/* cs3 SDRAM */</comment>

      <expr_stmt pos:start="93:7" pos:end="93:38"><expr pos:start="93:7" pos:end="93:37"><call pos:start="93:7" pos:end="93:37"><name pos:start="93:7" pos:end="93:14">stw_phys</name><argument_list pos:start="93:15" pos:end="93:37">(<argument pos:start="93:16" pos:end="93:26"><expr pos:start="93:16" pos:end="93:26"><name pos:start="93:16" pos:end="93:26">SH7750_BCR2</name></expr></argument>, <argument pos:start="93:29" pos:end="93:36"><expr pos:start="93:29" pos:end="93:36"><literal type="number" pos:start="93:29" pos:end="93:29">3</literal><operator pos:start="93:30" pos:end="93:31">&lt;&lt;</operator><operator pos:start="93:32" pos:end="93:32">(</operator><literal type="number" pos:start="93:33" pos:end="93:33">3</literal><operator pos:start="93:34" pos:end="93:34">*</operator><literal type="number" pos:start="93:35" pos:end="93:35">2</literal><operator pos:start="93:36" pos:end="93:36">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="93:40" pos:end="93:54">/* cs3 32bit */</comment>



      <if_stmt pos:start="97:7" pos:end="115:7"><if pos:start="97:7" pos:end="109:7">if <condition pos:start="97:10" pos:end="97:25">(<expr pos:start="97:11" pos:end="97:24"><name pos:start="97:11" pos:end="97:24">kernel_cmdline</name></expr>)</condition> <block pos:start="97:27" pos:end="109:7">{<block_content pos:start="99:11" pos:end="107:70">

          <expr_stmt pos:start="99:11" pos:end="103:67"><expr pos:start="99:11" pos:end="103:66"><name pos:start="99:11" pos:end="99:21">kernel_size</name> <operator pos:start="99:23" pos:end="99:23">=</operator> <call pos:start="99:25" pos:end="103:66"><name pos:start="99:25" pos:end="99:43">load_image_targphys</name><argument_list pos:start="99:44" pos:end="103:66">(<argument pos:start="99:45" pos:end="99:59"><expr pos:start="99:45" pos:end="99:59"><name pos:start="99:45" pos:end="99:59">kernel_filename</name></expr></argument>,

				   <argument pos:start="101:36" pos:end="101:65"><expr pos:start="101:36" pos:end="101:65"><name pos:start="101:36" pos:end="101:45">SDRAM_BASE</name> <operator pos:start="101:47" pos:end="101:47">+</operator> <name pos:start="101:49" pos:end="101:65">LINUX_LOAD_OFFSET</name></expr></argument>,

				   <argument pos:start="103:36" pos:end="103:65"><expr pos:start="103:36" pos:end="103:65"><name pos:start="103:36" pos:end="103:45">SDRAM_SIZE</name> <operator pos:start="103:47" pos:end="103:47">-</operator> <name pos:start="103:49" pos:end="103:65">LINUX_LOAD_OFFSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt pos:start="105:11" pos:end="105:66"><expr pos:start="105:11" pos:end="105:65"><name pos:start="105:11" pos:end="105:17"><name pos:start="105:11" pos:end="105:13">env</name><operator pos:start="105:14" pos:end="105:15">-&gt;</operator><name pos:start="105:16" pos:end="105:17">pc</name></name> <operator pos:start="105:19" pos:end="105:19">=</operator> <operator pos:start="105:21" pos:end="105:21">(</operator><name pos:start="105:22" pos:end="105:31">SDRAM_BASE</name> <operator pos:start="105:33" pos:end="105:33">+</operator> <name pos:start="105:35" pos:end="105:51">LINUX_LOAD_OFFSET</name><operator pos:start="105:52" pos:end="105:52">)</operator> <operator pos:start="105:54" pos:end="105:54">|</operator> <literal type="number" pos:start="105:56" pos:end="105:65">0xa0000000</literal></expr>;</expr_stmt>

          <expr_stmt pos:start="107:11" pos:end="107:70"><expr pos:start="107:11" pos:end="107:69"><call pos:start="107:11" pos:end="107:69"><name pos:start="107:11" pos:end="107:26">pstrcpy_targphys</name><argument_list pos:start="107:27" pos:end="107:69">(<argument pos:start="107:28" pos:end="107:47"><expr pos:start="107:28" pos:end="107:47"><name pos:start="107:28" pos:end="107:37">SDRAM_BASE</name> <operator pos:start="107:39" pos:end="107:39">+</operator> <literal type="number" pos:start="107:41" pos:end="107:47">0x10100</literal></expr></argument>, <argument pos:start="107:50" pos:end="107:52"><expr pos:start="107:50" pos:end="107:52"><literal type="number" pos:start="107:50" pos:end="107:52">256</literal></expr></argument>, <argument pos:start="107:55" pos:end="107:68"><expr pos:start="107:55" pos:end="107:68"><name pos:start="107:55" pos:end="107:68">kernel_cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      </block_content>}</block></if> <else pos:start="109:9" pos:end="115:7">else <block pos:start="109:14" pos:end="115:7">{<block_content pos:start="111:11" pos:end="113:44">

          <expr_stmt pos:start="111:11" pos:end="111:85"><expr pos:start="111:11" pos:end="111:84"><name pos:start="111:11" pos:end="111:21">kernel_size</name> <operator pos:start="111:23" pos:end="111:23">=</operator> <call pos:start="111:25" pos:end="111:84"><name pos:start="111:25" pos:end="111:43">load_image_targphys</name><argument_list pos:start="111:44" pos:end="111:84">(<argument pos:start="111:45" pos:end="111:59"><expr pos:start="111:45" pos:end="111:59"><name pos:start="111:45" pos:end="111:59">kernel_filename</name></expr></argument>, <argument pos:start="111:62" pos:end="111:71"><expr pos:start="111:62" pos:end="111:71"><name pos:start="111:62" pos:end="111:71">SDRAM_BASE</name></expr></argument>, <argument pos:start="111:74" pos:end="111:83"><expr pos:start="111:74" pos:end="111:83"><name pos:start="111:74" pos:end="111:83">SDRAM_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt pos:start="113:11" pos:end="113:44"><expr pos:start="113:11" pos:end="113:43"><name pos:start="113:11" pos:end="113:17"><name pos:start="113:11" pos:end="113:13">env</name><operator pos:start="113:14" pos:end="113:15">-&gt;</operator><name pos:start="113:16" pos:end="113:17">pc</name></name> <operator pos:start="113:19" pos:end="113:19">=</operator> <name pos:start="113:21" pos:end="113:30">SDRAM_BASE</name> <operator pos:start="113:32" pos:end="113:32">|</operator> <literal type="number" pos:start="113:34" pos:end="113:43">0xa0000000</literal></expr>;</expr_stmt> <comment type="block" pos:start="113:46" pos:end="113:69">/* Start from P2 area */</comment>

      </block_content>}</block></else></if_stmt>



      <if_stmt pos:start="119:7" pos:end="125:7"><if pos:start="119:7" pos:end="125:7">if <condition pos:start="119:10" pos:end="119:26">(<expr pos:start="119:11" pos:end="119:25"><name pos:start="119:11" pos:end="119:21">kernel_size</name> <operator pos:start="119:23" pos:end="119:23">&lt;</operator> <literal type="number" pos:start="119:25" pos:end="119:25">0</literal></expr>)</condition> <block pos:start="119:28" pos:end="125:7">{<block_content pos:start="121:9" pos:end="123:16">

        <expr_stmt pos:start="121:9" pos:end="121:79"><expr pos:start="121:9" pos:end="121:78"><call pos:start="121:9" pos:end="121:78"><name pos:start="121:9" pos:end="121:15">fprintf</name><argument_list pos:start="121:16" pos:end="121:78">(<argument pos:start="121:17" pos:end="121:22"><expr pos:start="121:17" pos:end="121:22"><name pos:start="121:17" pos:end="121:22">stderr</name></expr></argument>, <argument pos:start="121:25" pos:end="121:60"><expr pos:start="121:25" pos:end="121:60"><literal type="string" pos:start="121:25" pos:end="121:60">"qemu: could not load kernel '%s'\n"</literal></expr></argument>, <argument pos:start="121:63" pos:end="121:77"><expr pos:start="121:63" pos:end="121:77"><name pos:start="121:63" pos:end="121:77">kernel_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:16"><expr pos:start="123:9" pos:end="123:15"><call pos:start="123:9" pos:end="123:15"><name pos:start="123:9" pos:end="123:12">exit</name><argument_list pos:start="123:13" pos:end="123:15">(<argument pos:start="123:14" pos:end="123:14"><expr pos:start="123:14" pos:end="123:14"><literal type="number" pos:start="123:14" pos:end="123:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
