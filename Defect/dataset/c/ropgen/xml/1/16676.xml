<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/16676.c" pos:tabs="8"><function pos:start="1:1" pos:end="145:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">nbd_send_negotiate</name><parameter_list pos:start="1:30" pos:end="1:48">(<parameter pos:start="1:31" pos:end="1:47"><decl pos:start="1:31" pos:end="1:47"><type pos:start="1:31" pos:end="1:41"><name pos:start="1:31" pos:end="1:39">NBDClient</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:47">client</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="145:1">{<block_content pos:start="5:5" pos:end="143:14">

    <decl_stmt pos:start="5:5" pos:end="5:29"><decl pos:start="5:5" pos:end="5:28"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:13">csock</name> <init pos:start="5:15" pos:end="5:28">= <expr pos:start="5:17" pos:end="5:28"><name pos:start="5:17" pos:end="5:28"><name pos:start="5:17" pos:end="5:22">client</name><operator pos:start="5:23" pos:end="5:24">-&gt;</operator><name pos:start="5:25" pos:end="5:28">sock</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:30"><decl pos:start="7:5" pos:end="7:29"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">char</name></type> <name pos:start="7:10" pos:end="7:29"><name pos:start="7:10" pos:end="7:12">buf</name><index pos:start="7:13" pos:end="7:29">[<expr pos:start="7:14" pos:end="7:28"><literal type="number" pos:start="7:14" pos:end="7:16">8</literal> <operator pos:start="7:16" pos:end="7:16">+</operator> <literal type="number" pos:start="7:18" pos:end="7:20">8</literal> <operator pos:start="7:20" pos:end="7:20">+</operator> <literal type="number" pos:start="7:22" pos:end="7:24">8</literal> <operator pos:start="7:24" pos:end="7:24">+</operator> <literal type="number" pos:start="7:26" pos:end="7:28">128</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:11"><decl pos:start="9:5" pos:end="9:10"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:10">rc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="13:66"><decl pos:start="11:5" pos:end="13:65"><type pos:start="11:5" pos:end="11:13"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:13">int</name></type> <name pos:start="11:15" pos:end="11:21">myflags</name> <init pos:start="11:23" pos:end="13:65">= <expr pos:start="11:25" pos:end="13:65"><operator pos:start="11:25" pos:end="11:25">(</operator><name pos:start="11:26" pos:end="11:43">NBD_FLAG_HAS_FLAGS</name> <operator pos:start="11:45" pos:end="11:45">|</operator> <name pos:start="11:47" pos:end="11:64">NBD_FLAG_SEND_TRIM</name> <operator pos:start="11:66" pos:end="11:66">|</operator>

                         <name pos:start="13:26" pos:end="13:44">NBD_FLAG_SEND_FLUSH</name> <operator pos:start="13:46" pos:end="13:46">|</operator> <name pos:start="13:48" pos:end="13:64">NBD_FLAG_SEND_FUA</name><operator pos:start="13:65" pos:end="13:65">)</operator></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="17:5" pos:end="51:7">/* Negotiation header without options:

        [ 0 ..   7]   passwd       ("NBDMAGIC")

        [ 8 ..  15]   magic        (NBD_CLIENT_MAGIC)

        [16 ..  23]   size

        [24 ..  25]   server flags (0)

        [24 ..  27]   export flags

        [28 .. 151]   reserved     (0)



       Negotiation header with options, part 1:

        [ 0 ..   7]   passwd       ("NBDMAGIC")

        [ 8 ..  15]   magic        (NBD_OPTS_MAGIC)

        [16 ..  17]   server flags (0)



       part 2 (after options are sent):

        [18 ..  25]   size

        [26 ..  27]   export flags

        [28 .. 151]   reserved     (0)

     */</comment>



    <expr_stmt pos:start="55:5" pos:end="55:28"><expr pos:start="55:5" pos:end="55:27"><call pos:start="55:5" pos:end="55:27"><name pos:start="55:5" pos:end="55:20">socket_set_block</name><argument_list pos:start="55:21" pos:end="55:27">(<argument pos:start="55:22" pos:end="55:26"><expr pos:start="55:22" pos:end="55:26"><name pos:start="55:22" pos:end="55:26">csock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:17"><expr pos:start="57:5" pos:end="57:16"><name pos:start="57:5" pos:end="57:6">rc</name> <operator pos:start="57:8" pos:end="57:8">=</operator> <operator pos:start="57:10" pos:end="57:10">-</operator><name pos:start="57:11" pos:end="57:16">EINVAL</name></expr>;</expr_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:36"><expr pos:start="61:5" pos:end="61:35"><call pos:start="61:5" pos:end="61:35"><name pos:start="61:5" pos:end="61:9">TRACE</name><argument_list pos:start="61:10" pos:end="61:35">(<argument pos:start="61:11" pos:end="61:34"><expr pos:start="61:11" pos:end="61:34"><literal type="string" pos:start="61:11" pos:end="61:34">"Beginning negotiation."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:31"><expr pos:start="63:5" pos:end="63:30"><call pos:start="63:5" pos:end="63:30"><name pos:start="63:5" pos:end="63:10">memcpy</name><argument_list pos:start="63:11" pos:end="63:30">(<argument pos:start="63:12" pos:end="63:14"><expr pos:start="63:12" pos:end="63:14"><name pos:start="63:12" pos:end="63:14">buf</name></expr></argument>, <argument pos:start="63:17" pos:end="63:26"><expr pos:start="63:17" pos:end="63:26"><literal type="string" pos:start="63:17" pos:end="63:26">"NBDMAGIC"</literal></expr></argument>, <argument pos:start="63:29" pos:end="63:29"><expr pos:start="63:29" pos:end="63:29"><literal type="number" pos:start="63:29" pos:end="63:29">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="65:5" pos:end="79:5"><if pos:start="65:5" pos:end="75:5">if <condition pos:start="65:8" pos:end="65:20">(<expr pos:start="65:9" pos:end="65:19"><name pos:start="65:9" pos:end="65:19"><name pos:start="65:9" pos:end="65:14">client</name><operator pos:start="65:15" pos:end="65:16">-&gt;</operator><name pos:start="65:17" pos:end="65:19">exp</name></name></expr>)</condition> <block pos:start="65:22" pos:end="75:5">{<block_content pos:start="67:9" pos:end="73:77">

        <expr_stmt pos:start="67:9" pos:end="67:55"><expr pos:start="67:9" pos:end="67:54"><call pos:start="67:9" pos:end="67:54"><name pos:start="67:9" pos:end="67:14">assert</name> <argument_list pos:start="67:16" pos:end="67:54">(<argument pos:start="67:17" pos:end="67:53"><expr pos:start="67:17" pos:end="67:53"><operator pos:start="67:17" pos:end="67:17">(</operator><name pos:start="67:18" pos:end="67:38"><name pos:start="67:18" pos:end="67:23">client</name><operator pos:start="67:24" pos:end="67:25">-&gt;</operator><name pos:start="67:26" pos:end="67:28">exp</name><operator pos:start="67:29" pos:end="67:30">-&gt;</operator><name pos:start="67:31" pos:end="67:38">nbdflags</name></name> <operator pos:start="67:40" pos:end="67:40">&amp;</operator> <operator pos:start="67:42" pos:end="67:42">~</operator><literal type="number" pos:start="67:43" pos:end="67:47">65535</literal><operator pos:start="67:48" pos:end="67:48">)</operator> <operator pos:start="67:50" pos:end="67:51">==</operator> <literal type="number" pos:start="67:53" pos:end="67:53">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:61"><expr pos:start="69:9" pos:end="69:60"><call pos:start="69:9" pos:end="69:60"><name pos:start="69:9" pos:end="69:20">cpu_to_be64w</name><argument_list pos:start="69:21" pos:end="69:60">(<argument pos:start="69:22" pos:end="69:41"><expr pos:start="69:22" pos:end="69:41"><operator pos:start="69:22" pos:end="69:22">(</operator><name pos:start="69:23" pos:end="69:30">uint64_t</name><operator pos:start="69:31" pos:end="69:31">*</operator><operator pos:start="69:32" pos:end="69:32">)</operator><operator pos:start="69:33" pos:end="69:33">(</operator><name pos:start="69:34" pos:end="69:36">buf</name> <operator pos:start="69:38" pos:end="69:38">+</operator> <literal type="number" pos:start="69:40" pos:end="69:40">8</literal><operator pos:start="69:41" pos:end="69:41">)</operator></expr></argument>, <argument pos:start="69:44" pos:end="69:59"><expr pos:start="69:44" pos:end="69:59"><name pos:start="69:44" pos:end="69:59">NBD_CLIENT_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:63"><expr pos:start="71:9" pos:end="71:62"><call pos:start="71:9" pos:end="71:62"><name pos:start="71:9" pos:end="71:20">cpu_to_be64w</name><argument_list pos:start="71:21" pos:end="71:62">(<argument pos:start="71:22" pos:end="71:42"><expr pos:start="71:22" pos:end="71:42"><operator pos:start="71:22" pos:end="71:22">(</operator><name pos:start="71:23" pos:end="71:30">uint64_t</name><operator pos:start="71:31" pos:end="71:31">*</operator><operator pos:start="71:32" pos:end="71:32">)</operator><operator pos:start="71:33" pos:end="71:33">(</operator><name pos:start="71:34" pos:end="71:36">buf</name> <operator pos:start="71:38" pos:end="71:38">+</operator> <literal type="number" pos:start="71:40" pos:end="71:41">16</literal><operator pos:start="71:42" pos:end="71:42">)</operator></expr></argument>, <argument pos:start="71:45" pos:end="71:61"><expr pos:start="71:45" pos:end="71:61"><name pos:start="71:45" pos:end="71:61"><name pos:start="71:45" pos:end="71:50">client</name><operator pos:start="71:51" pos:end="71:52">-&gt;</operator><name pos:start="71:53" pos:end="71:55">exp</name><operator pos:start="71:56" pos:end="71:57">-&gt;</operator><name pos:start="71:58" pos:end="71:61">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:77"><expr pos:start="73:9" pos:end="73:76"><call pos:start="73:9" pos:end="73:76"><name pos:start="73:9" pos:end="73:20">cpu_to_be16w</name><argument_list pos:start="73:21" pos:end="73:76">(<argument pos:start="73:22" pos:end="73:42"><expr pos:start="73:22" pos:end="73:42"><operator pos:start="73:22" pos:end="73:22">(</operator><name pos:start="73:23" pos:end="73:30">uint16_t</name><operator pos:start="73:31" pos:end="73:31">*</operator><operator pos:start="73:32" pos:end="73:32">)</operator><operator pos:start="73:33" pos:end="73:33">(</operator><name pos:start="73:34" pos:end="73:36">buf</name> <operator pos:start="73:38" pos:end="73:38">+</operator> <literal type="number" pos:start="73:40" pos:end="73:41">26</literal><operator pos:start="73:42" pos:end="73:42">)</operator></expr></argument>, <argument pos:start="73:45" pos:end="73:75"><expr pos:start="73:45" pos:end="73:75"><name pos:start="73:45" pos:end="73:65"><name pos:start="73:45" pos:end="73:50">client</name><operator pos:start="73:51" pos:end="73:52">-&gt;</operator><name pos:start="73:53" pos:end="73:55">exp</name><operator pos:start="73:56" pos:end="73:57">-&gt;</operator><name pos:start="73:58" pos:end="73:65">nbdflags</name></name> <operator pos:start="73:67" pos:end="73:67">|</operator> <name pos:start="73:69" pos:end="73:75">myflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="75:7" pos:end="79:5">else <block pos:start="75:12" pos:end="79:5">{<block_content pos:start="77:9" pos:end="77:59">

        <expr_stmt pos:start="77:9" pos:end="77:59"><expr pos:start="77:9" pos:end="77:58"><call pos:start="77:9" pos:end="77:58"><name pos:start="77:9" pos:end="77:20">cpu_to_be64w</name><argument_list pos:start="77:21" pos:end="77:58">(<argument pos:start="77:22" pos:end="77:41"><expr pos:start="77:22" pos:end="77:41"><operator pos:start="77:22" pos:end="77:22">(</operator><name pos:start="77:23" pos:end="77:30">uint64_t</name><operator pos:start="77:31" pos:end="77:31">*</operator><operator pos:start="77:32" pos:end="77:32">)</operator><operator pos:start="77:33" pos:end="77:33">(</operator><name pos:start="77:34" pos:end="77:36">buf</name> <operator pos:start="77:38" pos:end="77:38">+</operator> <literal type="number" pos:start="77:40" pos:end="77:40">8</literal><operator pos:start="77:41" pos:end="77:41">)</operator></expr></argument>, <argument pos:start="77:44" pos:end="77:57"><expr pos:start="77:44" pos:end="77:57"><name pos:start="77:44" pos:end="77:57">NBD_OPTS_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:29"><expr pos:start="81:5" pos:end="81:28"><call pos:start="81:5" pos:end="81:28"><name pos:start="81:5" pos:end="81:10">memset</name><argument_list pos:start="81:11" pos:end="81:28">(<argument pos:start="81:12" pos:end="81:19"><expr pos:start="81:12" pos:end="81:19"><name pos:start="81:12" pos:end="81:14">buf</name> <operator pos:start="81:16" pos:end="81:16">+</operator> <literal type="number" pos:start="81:18" pos:end="81:19">28</literal></expr></argument>, <argument pos:start="81:22" pos:end="81:22"><expr pos:start="81:22" pos:end="81:22"><literal type="number" pos:start="81:22" pos:end="81:22">0</literal></expr></argument>, <argument pos:start="81:25" pos:end="81:27"><expr pos:start="81:25" pos:end="81:27"><literal type="number" pos:start="81:25" pos:end="81:27">124</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="85:5" pos:end="131:5"><if pos:start="85:5" pos:end="95:5">if <condition pos:start="85:8" pos:end="85:20">(<expr pos:start="85:9" pos:end="85:19"><name pos:start="85:9" pos:end="85:19"><name pos:start="85:9" pos:end="85:14">client</name><operator pos:start="85:15" pos:end="85:16">-&gt;</operator><name pos:start="85:17" pos:end="85:19">exp</name></name></expr>)</condition> <block pos:start="85:22" pos:end="95:5">{<block_content pos:start="87:9" pos:end="93:9">

        <if_stmt pos:start="87:9" pos:end="93:9"><if pos:start="87:9" pos:end="93:9">if <condition pos:start="87:12" pos:end="87:63">(<expr pos:start="87:13" pos:end="87:62"><call pos:start="87:13" pos:end="87:47"><name pos:start="87:13" pos:end="87:22">write_sync</name><argument_list pos:start="87:23" pos:end="87:47">(<argument pos:start="87:24" pos:end="87:28"><expr pos:start="87:24" pos:end="87:28"><name pos:start="87:24" pos:end="87:28">csock</name></expr></argument>, <argument pos:start="87:31" pos:end="87:33"><expr pos:start="87:31" pos:end="87:33"><name pos:start="87:31" pos:end="87:33">buf</name></expr></argument>, <argument pos:start="87:36" pos:end="87:46"><expr pos:start="87:36" pos:end="87:46"><sizeof pos:start="87:36" pos:end="87:46">sizeof<argument_list pos:start="87:42" pos:end="87:46">(<argument pos:start="87:43" pos:end="87:45"><expr pos:start="87:43" pos:end="87:45"><name pos:start="87:43" pos:end="87:45">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="87:49" pos:end="87:50">!=</operator> <sizeof pos:start="87:52" pos:end="87:62">sizeof<argument_list pos:start="87:58" pos:end="87:62">(<argument pos:start="87:59" pos:end="87:61"><expr pos:start="87:59" pos:end="87:61"><name pos:start="87:59" pos:end="87:61">buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="87:65" pos:end="93:9">{<block_content pos:start="89:13" pos:end="91:22">

            <expr_stmt pos:start="89:13" pos:end="89:32"><expr pos:start="89:13" pos:end="89:31"><call pos:start="89:13" pos:end="89:31"><name pos:start="89:13" pos:end="89:15">LOG</name><argument_list pos:start="89:16" pos:end="89:31">(<argument pos:start="89:17" pos:end="89:30"><expr pos:start="89:17" pos:end="89:30"><literal type="string" pos:start="89:17" pos:end="89:30">"write failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="91:13" pos:end="91:22">goto <name pos:start="91:18" pos:end="91:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="95:7" pos:end="131:5">else <block pos:start="95:12" pos:end="131:5">{<block_content pos:start="97:9" pos:end="129:9">

        <if_stmt pos:start="97:9" pos:end="103:9"><if pos:start="97:9" pos:end="103:9">if <condition pos:start="97:12" pos:end="97:45">(<expr pos:start="97:13" pos:end="97:44"><call pos:start="97:13" pos:end="97:38"><name pos:start="97:13" pos:end="97:22">write_sync</name><argument_list pos:start="97:23" pos:end="97:38">(<argument pos:start="97:24" pos:end="97:28"><expr pos:start="97:24" pos:end="97:28"><name pos:start="97:24" pos:end="97:28">csock</name></expr></argument>, <argument pos:start="97:31" pos:end="97:33"><expr pos:start="97:31" pos:end="97:33"><name pos:start="97:31" pos:end="97:33">buf</name></expr></argument>, <argument pos:start="97:36" pos:end="97:37"><expr pos:start="97:36" pos:end="97:37"><literal type="number" pos:start="97:36" pos:end="97:37">18</literal></expr></argument>)</argument_list></call> <operator pos:start="97:40" pos:end="97:41">!=</operator> <literal type="number" pos:start="97:43" pos:end="97:44">18</literal></expr>)</condition> <block pos:start="97:47" pos:end="103:9">{<block_content pos:start="99:13" pos:end="101:22">

            <expr_stmt pos:start="99:13" pos:end="99:32"><expr pos:start="99:13" pos:end="99:31"><call pos:start="99:13" pos:end="99:31"><name pos:start="99:13" pos:end="99:15">LOG</name><argument_list pos:start="99:16" pos:end="99:31">(<argument pos:start="99:17" pos:end="99:30"><expr pos:start="99:17" pos:end="99:30"><literal type="string" pos:start="99:17" pos:end="99:30">"write failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="101:13" pos:end="101:22">goto <name pos:start="101:18" pos:end="101:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:41"><expr pos:start="105:9" pos:end="105:40"><name pos:start="105:9" pos:end="105:10">rc</name> <operator pos:start="105:12" pos:end="105:12">=</operator> <call pos:start="105:14" pos:end="105:40"><name pos:start="105:14" pos:end="105:32">nbd_receive_options</name><argument_list pos:start="105:33" pos:end="105:40">(<argument pos:start="105:34" pos:end="105:39"><expr pos:start="105:34" pos:end="105:39"><name pos:start="105:34" pos:end="105:39">client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="107:9" pos:end="113:9"><if pos:start="107:9" pos:end="113:9">if <condition pos:start="107:12" pos:end="107:19">(<expr pos:start="107:13" pos:end="107:18"><name pos:start="107:13" pos:end="107:14">rc</name> <operator pos:start="107:16" pos:end="107:16">&lt;</operator> <literal type="number" pos:start="107:18" pos:end="107:18">0</literal></expr>)</condition> <block pos:start="107:21" pos:end="113:9">{<block_content pos:start="109:13" pos:end="111:22">

            <expr_stmt pos:start="109:13" pos:end="109:45"><expr pos:start="109:13" pos:end="109:44"><call pos:start="109:13" pos:end="109:44"><name pos:start="109:13" pos:end="109:15">LOG</name><argument_list pos:start="109:16" pos:end="109:44">(<argument pos:start="109:17" pos:end="109:43"><expr pos:start="109:17" pos:end="109:43"><literal type="string" pos:start="109:17" pos:end="109:43">"option negotiation failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="111:13" pos:end="111:22">goto <name pos:start="111:18" pos:end="111:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="117:9" pos:end="117:55"><expr pos:start="117:9" pos:end="117:54"><call pos:start="117:9" pos:end="117:54"><name pos:start="117:9" pos:end="117:14">assert</name> <argument_list pos:start="117:16" pos:end="117:54">(<argument pos:start="117:17" pos:end="117:53"><expr pos:start="117:17" pos:end="117:53"><operator pos:start="117:17" pos:end="117:17">(</operator><name pos:start="117:18" pos:end="117:38"><name pos:start="117:18" pos:end="117:23">client</name><operator pos:start="117:24" pos:end="117:25">-&gt;</operator><name pos:start="117:26" pos:end="117:28">exp</name><operator pos:start="117:29" pos:end="117:30">-&gt;</operator><name pos:start="117:31" pos:end="117:38">nbdflags</name></name> <operator pos:start="117:40" pos:end="117:40">&amp;</operator> <operator pos:start="117:42" pos:end="117:42">~</operator><literal type="number" pos:start="117:43" pos:end="117:47">65535</literal><operator pos:start="117:48" pos:end="117:48">)</operator> <operator pos:start="117:50" pos:end="117:51">==</operator> <literal type="number" pos:start="117:53" pos:end="117:53">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:63"><expr pos:start="119:9" pos:end="119:62"><call pos:start="119:9" pos:end="119:62"><name pos:start="119:9" pos:end="119:20">cpu_to_be64w</name><argument_list pos:start="119:21" pos:end="119:62">(<argument pos:start="119:22" pos:end="119:42"><expr pos:start="119:22" pos:end="119:42"><operator pos:start="119:22" pos:end="119:22">(</operator><name pos:start="119:23" pos:end="119:30">uint64_t</name><operator pos:start="119:31" pos:end="119:31">*</operator><operator pos:start="119:32" pos:end="119:32">)</operator><operator pos:start="119:33" pos:end="119:33">(</operator><name pos:start="119:34" pos:end="119:36">buf</name> <operator pos:start="119:38" pos:end="119:38">+</operator> <literal type="number" pos:start="119:40" pos:end="119:41">18</literal><operator pos:start="119:42" pos:end="119:42">)</operator></expr></argument>, <argument pos:start="119:45" pos:end="119:61"><expr pos:start="119:45" pos:end="119:61"><name pos:start="119:45" pos:end="119:61"><name pos:start="119:45" pos:end="119:50">client</name><operator pos:start="119:51" pos:end="119:52">-&gt;</operator><name pos:start="119:53" pos:end="119:55">exp</name><operator pos:start="119:56" pos:end="119:57">-&gt;</operator><name pos:start="119:58" pos:end="119:61">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:77"><expr pos:start="121:9" pos:end="121:76"><call pos:start="121:9" pos:end="121:76"><name pos:start="121:9" pos:end="121:20">cpu_to_be16w</name><argument_list pos:start="121:21" pos:end="121:76">(<argument pos:start="121:22" pos:end="121:42"><expr pos:start="121:22" pos:end="121:42"><operator pos:start="121:22" pos:end="121:22">(</operator><name pos:start="121:23" pos:end="121:30">uint16_t</name><operator pos:start="121:31" pos:end="121:31">*</operator><operator pos:start="121:32" pos:end="121:32">)</operator><operator pos:start="121:33" pos:end="121:33">(</operator><name pos:start="121:34" pos:end="121:36">buf</name> <operator pos:start="121:38" pos:end="121:38">+</operator> <literal type="number" pos:start="121:40" pos:end="121:41">26</literal><operator pos:start="121:42" pos:end="121:42">)</operator></expr></argument>, <argument pos:start="121:45" pos:end="121:75"><expr pos:start="121:45" pos:end="121:75"><name pos:start="121:45" pos:end="121:65"><name pos:start="121:45" pos:end="121:50">client</name><operator pos:start="121:51" pos:end="121:52">-&gt;</operator><name pos:start="121:53" pos:end="121:55">exp</name><operator pos:start="121:56" pos:end="121:57">-&gt;</operator><name pos:start="121:58" pos:end="121:65">nbdflags</name></name> <operator pos:start="121:67" pos:end="121:67">|</operator> <name pos:start="121:69" pos:end="121:75">myflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="123:9" pos:end="129:9"><if pos:start="123:9" pos:end="129:9">if <condition pos:start="123:12" pos:end="123:78">(<expr pos:start="123:13" pos:end="123:77"><call pos:start="123:13" pos:end="123:57"><name pos:start="123:13" pos:end="123:22">write_sync</name><argument_list pos:start="123:23" pos:end="123:57">(<argument pos:start="123:24" pos:end="123:28"><expr pos:start="123:24" pos:end="123:28"><name pos:start="123:24" pos:end="123:28">csock</name></expr></argument>, <argument pos:start="123:31" pos:end="123:38"><expr pos:start="123:31" pos:end="123:38"><name pos:start="123:31" pos:end="123:33">buf</name> <operator pos:start="123:35" pos:end="123:35">+</operator> <literal type="number" pos:start="123:37" pos:end="123:38">18</literal></expr></argument>, <argument pos:start="123:41" pos:end="123:56"><expr pos:start="123:41" pos:end="123:56"><sizeof pos:start="123:41" pos:end="123:51">sizeof<argument_list pos:start="123:47" pos:end="123:51">(<argument pos:start="123:48" pos:end="123:50"><expr pos:start="123:48" pos:end="123:50"><name pos:start="123:48" pos:end="123:50">buf</name></expr></argument>)</argument_list></sizeof> <operator pos:start="123:53" pos:end="123:53">-</operator> <literal type="number" pos:start="123:55" pos:end="123:56">18</literal></expr></argument>)</argument_list></call> <operator pos:start="123:59" pos:end="123:60">!=</operator> <sizeof pos:start="123:62" pos:end="123:72">sizeof<argument_list pos:start="123:68" pos:end="123:72">(<argument pos:start="123:69" pos:end="123:71"><expr pos:start="123:69" pos:end="123:71"><name pos:start="123:69" pos:end="123:71">buf</name></expr></argument>)</argument_list></sizeof> <operator pos:start="123:74" pos:end="123:74">-</operator> <literal type="number" pos:start="123:76" pos:end="123:77">18</literal></expr>)</condition> <block pos:start="123:80" pos:end="129:9">{<block_content pos:start="125:13" pos:end="127:22">

            <expr_stmt pos:start="125:13" pos:end="125:32"><expr pos:start="125:13" pos:end="125:31"><call pos:start="125:13" pos:end="125:31"><name pos:start="125:13" pos:end="125:15">LOG</name><argument_list pos:start="125:16" pos:end="125:31">(<argument pos:start="125:17" pos:end="125:30"><expr pos:start="125:17" pos:end="125:30"><literal type="string" pos:start="125:17" pos:end="125:30">"write failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="127:13" pos:end="127:22">goto <name pos:start="127:18" pos:end="127:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="135:5" pos:end="135:36"><expr pos:start="135:5" pos:end="135:35"><call pos:start="135:5" pos:end="135:35"><name pos:start="135:5" pos:end="135:9">TRACE</name><argument_list pos:start="135:10" pos:end="135:35">(<argument pos:start="135:11" pos:end="135:34"><expr pos:start="135:11" pos:end="135:34"><literal type="string" pos:start="135:11" pos:end="135:34">"Negotiation succeeded."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="137:5" pos:end="137:11"><expr pos:start="137:5" pos:end="137:10"><name pos:start="137:5" pos:end="137:6">rc</name> <operator pos:start="137:8" pos:end="137:8">=</operator> <literal type="number" pos:start="137:10" pos:end="137:10">0</literal></expr>;</expr_stmt>

<label pos:start="139:1" pos:end="139:5"><name pos:start="139:1" pos:end="139:4">fail</name>:</label>

    <expr_stmt pos:start="141:5" pos:end="141:31"><expr pos:start="141:5" pos:end="141:30"><call pos:start="141:5" pos:end="141:30"><name pos:start="141:5" pos:end="141:23">socket_set_nonblock</name><argument_list pos:start="141:24" pos:end="141:30">(<argument pos:start="141:25" pos:end="141:29"><expr pos:start="141:25" pos:end="141:29"><name pos:start="141:25" pos:end="141:29">csock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="143:5" pos:end="143:14">return <expr pos:start="143:12" pos:end="143:13"><name pos:start="143:12" pos:end="143:13">rc</name></expr>;</return>

</block_content>}</block></function>
</unit>
