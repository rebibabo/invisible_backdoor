<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13625.c" pos:tabs="8"><function pos:start="1:1" pos:end="315:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:35">vmxnet3_activate_device</name><parameter_list pos:start="1:36" pos:end="1:52">(<parameter pos:start="1:37" pos:end="1:51"><decl pos:start="1:37" pos:end="1:51"><type pos:start="1:37" pos:end="1:50"><name pos:start="1:37" pos:end="1:48">VMXNET3State</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:51">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="315:1">{<block_content pos:start="5:5" pos:end="313:28">

    <decl_stmt pos:start="5:5" pos:end="5:10"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:55"><decl pos:start="7:5" pos:end="7:54"><type pos:start="7:5" pos:end="7:25"><specifier pos:start="7:5" pos:end="7:10">static</specifier> <specifier pos:start="7:12" pos:end="7:16">const</specifier> <name pos:start="7:18" pos:end="7:25">uint32_t</name></type> <name pos:start="7:27" pos:end="7:50">VMXNET3_DEF_TX_THRESHOLD</name> <init pos:start="7:52" pos:end="7:54">= <expr pos:start="7:54" pos:end="7:54"><literal type="number" pos:start="7:54" pos:end="7:54">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:10">hwaddr</name></type> <name pos:start="9:12" pos:end="9:26">qdescr_table_pa</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:15">pa</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:17">size</name></decl>;</decl_stmt>



    <comment type="block" pos:start="17:5" pos:end="17:42">/* Verify configuration consistency */</comment>

    <if_stmt pos:start="19:5" pos:end="25:5"><if pos:start="19:5" pos:end="25:5">if <condition pos:start="19:8" pos:end="19:51">(<expr pos:start="19:9" pos:end="19:50"><operator pos:start="19:9" pos:end="19:9">!</operator><call pos:start="19:10" pos:end="19:50"><name pos:start="19:10" pos:end="19:36">vmxnet3_verify_driver_magic</name><argument_list pos:start="19:37" pos:end="19:50">(<argument pos:start="19:38" pos:end="19:49"><expr pos:start="19:38" pos:end="19:49"><name pos:start="19:38" pos:end="19:49"><name pos:start="19:38" pos:end="19:38">s</name><operator pos:start="19:39" pos:end="19:40">-&gt;</operator><name pos:start="19:41" pos:end="19:49">drv_shmem</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="19:53" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:15">

        <expr_stmt pos:start="21:9" pos:end="21:74"><expr pos:start="21:9" pos:end="21:73"><call pos:start="21:9" pos:end="21:73"><name pos:start="21:9" pos:end="21:17">VMW_ERPRN</name><argument_list pos:start="21:18" pos:end="21:73">(<argument pos:start="21:19" pos:end="21:72"><expr pos:start="21:19" pos:end="21:72"><literal type="string" pos:start="21:19" pos:end="21:72">"Device configuration received from driver is invalid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="23:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="29:5" pos:end="29:36">/* Verify if device is active */</comment>

    <if_stmt pos:start="31:5" pos:end="37:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:25">(<expr pos:start="31:9" pos:end="31:24"><name pos:start="31:9" pos:end="31:24"><name pos:start="31:9" pos:end="31:9">s</name><operator pos:start="31:10" pos:end="31:11">-&gt;</operator><name pos:start="31:12" pos:end="31:24">device_active</name></name></expr>)</condition> <block pos:start="31:27" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:15">

        <expr_stmt pos:start="33:9" pos:end="33:46"><expr pos:start="33:9" pos:end="33:45"><call pos:start="33:9" pos:end="33:45"><name pos:start="33:9" pos:end="33:17">VMW_CFPRN</name><argument_list pos:start="33:18" pos:end="33:45">(<argument pos:start="33:19" pos:end="33:44"><expr pos:start="33:19" pos:end="33:44"><literal type="string" pos:start="33:19" pos:end="33:44">"Vmxnet3 device is active"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:36"><expr pos:start="41:5" pos:end="41:35"><call pos:start="41:5" pos:end="41:35"><name pos:start="41:5" pos:end="41:32">vmxnet3_adjust_by_guest_type</name><argument_list pos:start="41:33" pos:end="41:35">(<argument pos:start="41:34" pos:end="41:34"><expr pos:start="41:34" pos:end="41:34"><name pos:start="41:34" pos:end="41:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:31"><expr pos:start="43:5" pos:end="43:30"><call pos:start="43:5" pos:end="43:30"><name pos:start="43:5" pos:end="43:27">vmxnet3_update_features</name><argument_list pos:start="43:28" pos:end="43:30">(<argument pos:start="43:29" pos:end="43:29"><expr pos:start="43:29" pos:end="43:29"><name pos:start="43:29" pos:end="43:29">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:31"><expr pos:start="45:5" pos:end="45:30"><call pos:start="45:5" pos:end="45:30"><name pos:start="45:5" pos:end="45:27">vmxnet3_update_pm_state</name><argument_list pos:start="45:28" pos:end="45:30">(<argument pos:start="45:29" pos:end="45:29"><expr pos:start="45:29" pos:end="45:29"><name pos:start="45:29" pos:end="45:29">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:34"><expr pos:start="47:5" pos:end="47:33"><call pos:start="47:5" pos:end="47:33"><name pos:start="47:5" pos:end="47:30">vmxnet3_setup_rx_filtering</name><argument_list pos:start="47:31" pos:end="47:33">(<argument pos:start="47:32" pos:end="47:32"><expr pos:start="47:32" pos:end="47:32"><name pos:start="47:32" pos:end="47:32">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="49:5" pos:end="49:41">/* Cache fields from shared memory */</comment>

    <expr_stmt pos:start="51:5" pos:end="51:71"><expr pos:start="51:5" pos:end="51:70"><name pos:start="51:5" pos:end="51:10"><name pos:start="51:5" pos:end="51:5">s</name><operator pos:start="51:6" pos:end="51:7">-&gt;</operator><name pos:start="51:8" pos:end="51:10">mtu</name></name> <operator pos:start="51:12" pos:end="51:12">=</operator> <call pos:start="51:14" pos:end="51:70"><name pos:start="51:14" pos:end="51:38">VMXNET3_READ_DRV_SHARED32</name><argument_list pos:start="51:39" pos:end="51:70">(<argument pos:start="51:40" pos:end="51:51"><expr pos:start="51:40" pos:end="51:51"><name pos:start="51:40" pos:end="51:51"><name pos:start="51:40" pos:end="51:40">s</name><operator pos:start="51:41" pos:end="51:42">-&gt;</operator><name pos:start="51:43" pos:end="51:51">drv_shmem</name></name></expr></argument>, <argument pos:start="51:54" pos:end="51:69"><expr pos:start="51:54" pos:end="51:69"><name pos:start="51:54" pos:end="51:69"><name pos:start="51:54" pos:end="51:60">devRead</name><operator pos:start="51:61" pos:end="51:61">.</operator><name pos:start="51:62" pos:end="51:65">misc</name><operator pos:start="51:66" pos:end="51:66">.</operator><name pos:start="51:67" pos:end="51:69">mtu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:35"><expr pos:start="53:5" pos:end="53:34"><call pos:start="53:5" pos:end="53:34"><name pos:start="53:5" pos:end="53:13">VMW_CFPRN</name><argument_list pos:start="53:14" pos:end="53:34">(<argument pos:start="53:15" pos:end="53:25"><expr pos:start="53:15" pos:end="53:25"><literal type="string" pos:start="53:15" pos:end="53:25">"MTU is %u"</literal></expr></argument>, <argument pos:start="53:28" pos:end="53:33"><expr pos:start="53:28" pos:end="53:33"><name pos:start="53:28" pos:end="53:33"><name pos:start="53:28" pos:end="53:28">s</name><operator pos:start="53:29" pos:end="53:30">-&gt;</operator><name pos:start="53:31" pos:end="53:33">mtu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="57:5" pos:end="59:73"><expr pos:start="57:5" pos:end="59:72"><name pos:start="57:5" pos:end="57:19"><name pos:start="57:5" pos:end="57:5">s</name><operator pos:start="57:6" pos:end="57:7">-&gt;</operator><name pos:start="57:8" pos:end="57:19">max_rx_frags</name></name> <operator pos:start="57:21" pos:end="57:21">=</operator>

        <call pos:start="59:9" pos:end="59:72"><name pos:start="59:9" pos:end="59:33">VMXNET3_READ_DRV_SHARED16</name><argument_list pos:start="59:34" pos:end="59:72">(<argument pos:start="59:35" pos:end="59:46"><expr pos:start="59:35" pos:end="59:46"><name pos:start="59:35" pos:end="59:46"><name pos:start="59:35" pos:end="59:35">s</name><operator pos:start="59:36" pos:end="59:37">-&gt;</operator><name pos:start="59:38" pos:end="59:46">drv_shmem</name></name></expr></argument>, <argument pos:start="59:49" pos:end="59:71"><expr pos:start="59:49" pos:end="59:71"><name pos:start="59:49" pos:end="59:71"><name pos:start="59:49" pos:end="59:55">devRead</name><operator pos:start="59:56" pos:end="59:56">.</operator><name pos:start="59:57" pos:end="59:60">misc</name><operator pos:start="59:61" pos:end="59:61">.</operator><name pos:start="59:62" pos:end="59:71">maxNumRxSG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="63:5" pos:end="67:5"><if pos:start="63:5" pos:end="67:5">if <condition pos:start="63:8" pos:end="63:29">(<expr pos:start="63:9" pos:end="63:28"><name pos:start="63:9" pos:end="63:23"><name pos:start="63:9" pos:end="63:9">s</name><operator pos:start="63:10" pos:end="63:11">-&gt;</operator><name pos:start="63:12" pos:end="63:23">max_rx_frags</name></name> <operator pos:start="63:25" pos:end="63:26">==</operator> <literal type="number" pos:start="63:28" pos:end="63:28">0</literal></expr>)</condition> <block pos:start="63:31" pos:end="67:5">{<block_content pos:start="65:9" pos:end="65:28">

        <expr_stmt pos:start="65:9" pos:end="65:28"><expr pos:start="65:9" pos:end="65:27"><name pos:start="65:9" pos:end="65:23"><name pos:start="65:9" pos:end="65:9">s</name><operator pos:start="65:10" pos:end="65:11">-&gt;</operator><name pos:start="65:12" pos:end="65:23">max_rx_frags</name></name> <operator pos:start="65:25" pos:end="65:25">=</operator> <literal type="number" pos:start="65:27" pos:end="65:27">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:57"><expr pos:start="71:5" pos:end="71:56"><call pos:start="71:5" pos:end="71:56"><name pos:start="71:5" pos:end="71:13">VMW_CFPRN</name><argument_list pos:start="71:14" pos:end="71:56">(<argument pos:start="71:15" pos:end="71:38"><expr pos:start="71:15" pos:end="71:38"><literal type="string" pos:start="71:15" pos:end="71:38">"Max RX fragments is %u"</literal></expr></argument>, <argument pos:start="71:41" pos:end="71:55"><expr pos:start="71:41" pos:end="71:55"><name pos:start="71:41" pos:end="71:55"><name pos:start="71:41" pos:end="71:41">s</name><operator pos:start="71:42" pos:end="71:43">-&gt;</operator><name pos:start="71:44" pos:end="71:55">max_rx_frags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="75:5" pos:end="77:78"><expr pos:start="75:5" pos:end="77:77"><name pos:start="75:5" pos:end="75:20"><name pos:start="75:5" pos:end="75:5">s</name><operator pos:start="75:6" pos:end="75:7">-&gt;</operator><name pos:start="75:8" pos:end="75:20">event_int_idx</name></name> <operator pos:start="75:22" pos:end="75:22">=</operator>

        <call pos:start="77:9" pos:end="77:77"><name pos:start="77:9" pos:end="77:32">VMXNET3_READ_DRV_SHARED8</name><argument_list pos:start="77:33" pos:end="77:77">(<argument pos:start="77:34" pos:end="77:45"><expr pos:start="77:34" pos:end="77:45"><name pos:start="77:34" pos:end="77:45"><name pos:start="77:34" pos:end="77:34">s</name><operator pos:start="77:35" pos:end="77:36">-&gt;</operator><name pos:start="77:37" pos:end="77:45">drv_shmem</name></name></expr></argument>, <argument pos:start="77:48" pos:end="77:76"><expr pos:start="77:48" pos:end="77:76"><name pos:start="77:48" pos:end="77:76"><name pos:start="77:48" pos:end="77:54">devRead</name><operator pos:start="77:55" pos:end="77:55">.</operator><name pos:start="77:56" pos:end="77:63">intrConf</name><operator pos:start="77:64" pos:end="77:64">.</operator><name pos:start="77:65" pos:end="77:76">eventIntrIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:53"><expr pos:start="79:5" pos:end="79:52"><call pos:start="79:5" pos:end="79:52"><name pos:start="79:5" pos:end="79:10">assert</name><argument_list pos:start="79:11" pos:end="79:52">(<argument pos:start="79:12" pos:end="79:51"><expr pos:start="79:12" pos:end="79:51"><call pos:start="79:12" pos:end="79:51"><name pos:start="79:12" pos:end="79:30">vmxnet3_verify_intx</name><argument_list pos:start="79:31" pos:end="79:51">(<argument pos:start="79:32" pos:end="79:32"><expr pos:start="79:32" pos:end="79:32"><name pos:start="79:32" pos:end="79:32">s</name></expr></argument>, <argument pos:start="79:35" pos:end="79:50"><expr pos:start="79:35" pos:end="79:50"><name pos:start="79:35" pos:end="79:50"><name pos:start="79:35" pos:end="79:35">s</name><operator pos:start="79:36" pos:end="79:37">-&gt;</operator><name pos:start="79:38" pos:end="79:50">event_int_idx</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:63"><expr pos:start="81:5" pos:end="81:62"><call pos:start="81:5" pos:end="81:62"><name pos:start="81:5" pos:end="81:13">VMW_CFPRN</name><argument_list pos:start="81:14" pos:end="81:62">(<argument pos:start="81:15" pos:end="81:43"><expr pos:start="81:15" pos:end="81:43"><literal type="string" pos:start="81:15" pos:end="81:43">"Events interrupt line is %u"</literal></expr></argument>, <argument pos:start="81:46" pos:end="81:61"><expr pos:start="81:46" pos:end="81:61"><name pos:start="81:46" pos:end="81:61"><name pos:start="81:46" pos:end="81:46">s</name><operator pos:start="81:47" pos:end="81:48">-&gt;</operator><name pos:start="81:49" pos:end="81:61">event_int_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="85:5" pos:end="87:74"><expr pos:start="85:5" pos:end="87:73"><name pos:start="85:5" pos:end="85:23"><name pos:start="85:5" pos:end="85:5">s</name><operator pos:start="85:6" pos:end="85:7">-&gt;</operator><name pos:start="85:8" pos:end="85:23">auto_int_masking</name></name> <operator pos:start="85:25" pos:end="85:25">=</operator>

        <call pos:start="87:9" pos:end="87:73"><name pos:start="87:9" pos:end="87:32">VMXNET3_READ_DRV_SHARED8</name><argument_list pos:start="87:33" pos:end="87:73">(<argument pos:start="87:34" pos:end="87:45"><expr pos:start="87:34" pos:end="87:45"><name pos:start="87:34" pos:end="87:45"><name pos:start="87:34" pos:end="87:34">s</name><operator pos:start="87:35" pos:end="87:36">-&gt;</operator><name pos:start="87:37" pos:end="87:45">drv_shmem</name></name></expr></argument>, <argument pos:start="87:48" pos:end="87:72"><expr pos:start="87:48" pos:end="87:72"><name pos:start="87:48" pos:end="87:72"><name pos:start="87:48" pos:end="87:54">devRead</name><operator pos:start="87:55" pos:end="87:55">.</operator><name pos:start="87:56" pos:end="87:63">intrConf</name><operator pos:start="87:64" pos:end="87:64">.</operator><name pos:start="87:65" pos:end="87:72">autoMask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:77"><expr pos:start="89:5" pos:end="89:76"><call pos:start="89:5" pos:end="89:76"><name pos:start="89:5" pos:end="89:13">VMW_CFPRN</name><argument_list pos:start="89:14" pos:end="89:76">(<argument pos:start="89:15" pos:end="89:49"><expr pos:start="89:15" pos:end="89:49"><literal type="string" pos:start="89:15" pos:end="89:49">"Automatic interrupt masking is %d"</literal></expr></argument>, <argument pos:start="89:52" pos:end="89:75"><expr pos:start="89:52" pos:end="89:75"><operator pos:start="89:52" pos:end="89:52">(</operator><name pos:start="89:53" pos:end="89:55">int</name><operator pos:start="89:56" pos:end="89:56">)</operator><name pos:start="89:57" pos:end="89:75"><name pos:start="89:57" pos:end="89:57">s</name><operator pos:start="89:58" pos:end="89:59">-&gt;</operator><name pos:start="89:60" pos:end="89:75">auto_int_masking</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="93:5" pos:end="95:73"><expr pos:start="93:5" pos:end="95:72"><name pos:start="93:5" pos:end="93:14"><name pos:start="93:5" pos:end="93:5">s</name><operator pos:start="93:6" pos:end="93:7">-&gt;</operator><name pos:start="93:8" pos:end="93:14">txq_num</name></name> <operator pos:start="93:16" pos:end="93:16">=</operator>

        <call pos:start="95:9" pos:end="95:72"><name pos:start="95:9" pos:end="95:32">VMXNET3_READ_DRV_SHARED8</name><argument_list pos:start="95:33" pos:end="95:72">(<argument pos:start="95:34" pos:end="95:45"><expr pos:start="95:34" pos:end="95:45"><name pos:start="95:34" pos:end="95:45"><name pos:start="95:34" pos:end="95:34">s</name><operator pos:start="95:35" pos:end="95:36">-&gt;</operator><name pos:start="95:37" pos:end="95:45">drv_shmem</name></name></expr></argument>, <argument pos:start="95:48" pos:end="95:71"><expr pos:start="95:48" pos:end="95:71"><name pos:start="95:48" pos:end="95:71"><name pos:start="95:48" pos:end="95:54">devRead</name><operator pos:start="95:55" pos:end="95:55">.</operator><name pos:start="95:56" pos:end="95:59">misc</name><operator pos:start="95:60" pos:end="95:60">.</operator><name pos:start="95:61" pos:end="95:71">numTxQueues</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="99:73"><expr pos:start="97:5" pos:end="99:72"><name pos:start="97:5" pos:end="97:14"><name pos:start="97:5" pos:end="97:5">s</name><operator pos:start="97:6" pos:end="97:7">-&gt;</operator><name pos:start="97:8" pos:end="97:14">rxq_num</name></name> <operator pos:start="97:16" pos:end="97:16">=</operator>

        <call pos:start="99:9" pos:end="99:72"><name pos:start="99:9" pos:end="99:32">VMXNET3_READ_DRV_SHARED8</name><argument_list pos:start="99:33" pos:end="99:72">(<argument pos:start="99:34" pos:end="99:45"><expr pos:start="99:34" pos:end="99:45"><name pos:start="99:34" pos:end="99:45"><name pos:start="99:34" pos:end="99:34">s</name><operator pos:start="99:35" pos:end="99:36">-&gt;</operator><name pos:start="99:37" pos:end="99:45">drv_shmem</name></name></expr></argument>, <argument pos:start="99:48" pos:end="99:71"><expr pos:start="99:48" pos:end="99:71"><name pos:start="99:48" pos:end="99:71"><name pos:start="99:48" pos:end="99:54">devRead</name><operator pos:start="99:55" pos:end="99:55">.</operator><name pos:start="99:56" pos:end="99:59">misc</name><operator pos:start="99:60" pos:end="99:60">.</operator><name pos:start="99:61" pos:end="99:71">numRxQueues</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="103:5" pos:end="103:70"><expr pos:start="103:5" pos:end="103:69"><call pos:start="103:5" pos:end="103:69"><name pos:start="103:5" pos:end="103:13">VMW_CFPRN</name><argument_list pos:start="103:14" pos:end="103:69">(<argument pos:start="103:15" pos:end="103:44"><expr pos:start="103:15" pos:end="103:44"><literal type="string" pos:start="103:15" pos:end="103:44">"Number of TX/RX queues %u/%u"</literal></expr></argument>, <argument pos:start="103:47" pos:end="103:56"><expr pos:start="103:47" pos:end="103:56"><name pos:start="103:47" pos:end="103:56"><name pos:start="103:47" pos:end="103:47">s</name><operator pos:start="103:48" pos:end="103:49">-&gt;</operator><name pos:start="103:50" pos:end="103:56">txq_num</name></name></expr></argument>, <argument pos:start="103:59" pos:end="103:68"><expr pos:start="103:59" pos:end="103:68"><name pos:start="103:59" pos:end="103:68"><name pos:start="103:59" pos:end="103:59">s</name><operator pos:start="103:60" pos:end="103:61">-&gt;</operator><name pos:start="103:62" pos:end="103:68">rxq_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:31"><expr pos:start="105:5" pos:end="105:30"><call pos:start="105:5" pos:end="105:30"><name pos:start="105:5" pos:end="105:27">vmxnet3_validate_queues</name><argument_list pos:start="105:28" pos:end="105:30">(<argument pos:start="105:29" pos:end="105:29"><expr pos:start="105:29" pos:end="105:29"><name pos:start="105:29" pos:end="105:29">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="109:5" pos:end="111:74"><expr pos:start="109:5" pos:end="111:73"><name pos:start="109:5" pos:end="109:19">qdescr_table_pa</name> <operator pos:start="109:21" pos:end="109:21">=</operator>

        <call pos:start="111:9" pos:end="111:73"><name pos:start="111:9" pos:end="111:33">VMXNET3_READ_DRV_SHARED64</name><argument_list pos:start="111:34" pos:end="111:73">(<argument pos:start="111:35" pos:end="111:46"><expr pos:start="111:35" pos:end="111:46"><name pos:start="111:35" pos:end="111:46"><name pos:start="111:35" pos:end="111:35">s</name><operator pos:start="111:36" pos:end="111:37">-&gt;</operator><name pos:start="111:38" pos:end="111:46">drv_shmem</name></name></expr></argument>, <argument pos:start="111:49" pos:end="111:72"><expr pos:start="111:49" pos:end="111:72"><name pos:start="111:49" pos:end="111:72"><name pos:start="111:49" pos:end="111:55">devRead</name><operator pos:start="111:56" pos:end="111:56">.</operator><name pos:start="111:57" pos:end="111:60">misc</name><operator pos:start="111:61" pos:end="111:61">.</operator><name pos:start="111:62" pos:end="111:72">queueDescPA</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:79"><expr pos:start="113:5" pos:end="113:78"><call pos:start="113:5" pos:end="113:78"><name pos:start="113:5" pos:end="113:13">VMW_CFPRN</name><argument_list pos:start="113:14" pos:end="113:78">(<argument pos:start="113:15" pos:end="113:60"><expr pos:start="113:15" pos:end="113:60"><literal type="string" pos:start="113:15" pos:end="113:53">"TX queues descriptors table is at 0x%"</literal> <name pos:start="113:55" pos:end="113:60">PRIx64</name></expr></argument>, <argument pos:start="113:63" pos:end="113:77"><expr pos:start="113:63" pos:end="113:77"><name pos:start="113:63" pos:end="113:77">qdescr_table_pa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="117:5" pos:end="123:7">/*

     * Worst-case scenario is a packet that holds all TX rings space so

     * we calculate total size of all TX rings for max TX fragments number

     */</comment>

    <expr_stmt pos:start="125:5" pos:end="125:24"><expr pos:start="125:5" pos:end="125:23"><name pos:start="125:5" pos:end="125:19"><name pos:start="125:5" pos:end="125:5">s</name><operator pos:start="125:6" pos:end="125:7">-&gt;</operator><name pos:start="125:8" pos:end="125:19">max_tx_frags</name></name> <operator pos:start="125:21" pos:end="125:21">=</operator> <literal type="number" pos:start="125:23" pos:end="125:23">0</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="129:5" pos:end="129:19">/* TX queues */</comment>

    <for pos:start="131:5" pos:end="207:5">for <control pos:start="131:9" pos:end="131:36">(<init pos:start="131:10" pos:end="131:15"><expr pos:start="131:10" pos:end="131:14"><name pos:start="131:10" pos:end="131:10">i</name> <operator pos:start="131:12" pos:end="131:12">=</operator> <literal type="number" pos:start="131:14" pos:end="131:14">0</literal></expr>;</init> <condition pos:start="131:17" pos:end="131:31"><expr pos:start="131:17" pos:end="131:30"><name pos:start="131:17" pos:end="131:17">i</name> <operator pos:start="131:19" pos:end="131:19">&lt;</operator> <name pos:start="131:21" pos:end="131:30"><name pos:start="131:21" pos:end="131:21">s</name><operator pos:start="131:22" pos:end="131:23">-&gt;</operator><name pos:start="131:24" pos:end="131:30">txq_num</name></name></expr>;</condition> <incr pos:start="131:33" pos:end="131:35"><expr pos:start="131:33" pos:end="131:35"><name pos:start="131:33" pos:end="131:33">i</name><operator pos:start="131:34" pos:end="131:35">++</operator></expr></incr>)</control> <block pos:start="131:38" pos:end="207:5">{<block_content pos:start="133:9" pos:end="205:65">

        <decl_stmt pos:start="133:9" pos:end="135:69"><decl pos:start="133:9" pos:end="135:68"><type pos:start="133:9" pos:end="133:14"><name pos:start="133:9" pos:end="133:14">hwaddr</name></type> <name pos:start="133:16" pos:end="133:24">qdescr_pa</name> <init pos:start="133:26" pos:end="135:68">=

            <expr pos:start="135:13" pos:end="135:68"><name pos:start="135:13" pos:end="135:27">qdescr_table_pa</name> <operator pos:start="135:29" pos:end="135:29">+</operator> <name pos:start="135:31" pos:end="135:31">i</name> <operator pos:start="135:33" pos:end="135:33">*</operator> <sizeof pos:start="135:35" pos:end="135:68">sizeof<argument_list pos:start="135:41" pos:end="135:68">(<argument pos:start="135:42" pos:end="135:67"><expr pos:start="135:42" pos:end="135:67">struct <name pos:start="135:49" pos:end="135:67">Vmxnet3_TxQueueDesc</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="139:9" pos:end="139:53">/* Read interrupt number for this TX queue */</comment>

        <expr_stmt pos:start="141:9" pos:end="143:66"><expr pos:start="141:9" pos:end="143:65"><name pos:start="141:9" pos:end="141:23"><name pos:start="141:9" pos:end="141:9">s</name><operator pos:start="141:10" pos:end="141:11">-&gt;</operator><name pos:start="141:12" pos:end="141:20">txq_descr</name><index pos:start="141:21" pos:end="141:23">[<expr pos:start="141:22" pos:end="141:22"><name pos:start="141:22" pos:end="141:22">i</name></expr>]</index></name><operator pos:start="141:24" pos:end="141:24">.</operator><name pos:start="141:25" pos:end="141:32">intr_idx</name> <operator pos:start="141:34" pos:end="141:34">=</operator>

            <call pos:start="143:13" pos:end="143:65"><name pos:start="143:13" pos:end="143:40">VMXNET3_READ_TX_QUEUE_DESCR8</name><argument_list pos:start="143:41" pos:end="143:65">(<argument pos:start="143:42" pos:end="143:50"><expr pos:start="143:42" pos:end="143:50"><name pos:start="143:42" pos:end="143:50">qdescr_pa</name></expr></argument>, <argument pos:start="143:53" pos:end="143:64"><expr pos:start="143:53" pos:end="143:64"><name pos:start="143:53" pos:end="143:64"><name pos:start="143:53" pos:end="143:56">conf</name><operator pos:start="143:57" pos:end="143:57">.</operator><name pos:start="143:58" pos:end="143:64">intrIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:65"><expr pos:start="145:9" pos:end="145:64"><call pos:start="145:9" pos:end="145:64"><name pos:start="145:9" pos:end="145:14">assert</name><argument_list pos:start="145:15" pos:end="145:64">(<argument pos:start="145:16" pos:end="145:63"><expr pos:start="145:16" pos:end="145:63"><call pos:start="145:16" pos:end="145:63"><name pos:start="145:16" pos:end="145:34">vmxnet3_verify_intx</name><argument_list pos:start="145:35" pos:end="145:63">(<argument pos:start="145:36" pos:end="145:36"><expr pos:start="145:36" pos:end="145:36"><name pos:start="145:36" pos:end="145:36">s</name></expr></argument>, <argument pos:start="145:39" pos:end="145:62"><expr pos:start="145:39" pos:end="145:62"><name pos:start="145:39" pos:end="145:53"><name pos:start="145:39" pos:end="145:39">s</name><operator pos:start="145:40" pos:end="145:41">-&gt;</operator><name pos:start="145:42" pos:end="145:50">txq_descr</name><index pos:start="145:51" pos:end="145:53">[<expr pos:start="145:52" pos:end="145:52"><name pos:start="145:52" pos:end="145:52">i</name></expr>]</index></name><operator pos:start="145:54" pos:end="145:54">.</operator><name pos:start="145:55" pos:end="145:62">intr_idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="149:9" pos:end="149:76"><expr pos:start="149:9" pos:end="149:75"><call pos:start="149:9" pos:end="149:75"><name pos:start="149:9" pos:end="149:17">VMW_CFPRN</name><argument_list pos:start="149:18" pos:end="149:75">(<argument pos:start="149:19" pos:end="149:45"><expr pos:start="149:19" pos:end="149:45"><literal type="string" pos:start="149:19" pos:end="149:45">"TX Queue %d interrupt: %d"</literal></expr></argument>, <argument pos:start="149:48" pos:end="149:48"><expr pos:start="149:48" pos:end="149:48"><name pos:start="149:48" pos:end="149:48">i</name></expr></argument>, <argument pos:start="149:51" pos:end="149:74"><expr pos:start="149:51" pos:end="149:74"><name pos:start="149:51" pos:end="149:65"><name pos:start="149:51" pos:end="149:51">s</name><operator pos:start="149:52" pos:end="149:53">-&gt;</operator><name pos:start="149:54" pos:end="149:62">txq_descr</name><index pos:start="149:63" pos:end="149:65">[<expr pos:start="149:64" pos:end="149:64"><name pos:start="149:64" pos:end="149:64">i</name></expr>]</index></name><operator pos:start="149:66" pos:end="149:66">.</operator><name pos:start="149:67" pos:end="149:74">intr_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="153:9" pos:end="153:55">/* Read rings memory locations for TX queues */</comment>

        <expr_stmt pos:start="155:9" pos:end="155:73"><expr pos:start="155:9" pos:end="155:72"><name pos:start="155:9" pos:end="155:10">pa</name> <operator pos:start="155:12" pos:end="155:12">=</operator> <call pos:start="155:14" pos:end="155:72"><name pos:start="155:14" pos:end="155:42">VMXNET3_READ_TX_QUEUE_DESCR64</name><argument_list pos:start="155:43" pos:end="155:72">(<argument pos:start="155:44" pos:end="155:52"><expr pos:start="155:44" pos:end="155:52"><name pos:start="155:44" pos:end="155:52">qdescr_pa</name></expr></argument>, <argument pos:start="155:55" pos:end="155:71"><expr pos:start="155:55" pos:end="155:71"><name pos:start="155:55" pos:end="155:71"><name pos:start="155:55" pos:end="155:58">conf</name><operator pos:start="155:59" pos:end="155:59">.</operator><name pos:start="155:60" pos:end="155:71">txRingBasePA</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="157:9" pos:end="157:73"><expr pos:start="157:9" pos:end="157:72"><name pos:start="157:9" pos:end="157:12">size</name> <operator pos:start="157:14" pos:end="157:14">=</operator> <call pos:start="157:16" pos:end="157:72"><name pos:start="157:16" pos:end="157:44">VMXNET3_READ_TX_QUEUE_DESCR32</name><argument_list pos:start="157:45" pos:end="157:72">(<argument pos:start="157:46" pos:end="157:54"><expr pos:start="157:46" pos:end="157:54"><name pos:start="157:46" pos:end="157:54">qdescr_pa</name></expr></argument>, <argument pos:start="157:57" pos:end="157:71"><expr pos:start="157:57" pos:end="157:71"><name pos:start="157:57" pos:end="157:71"><name pos:start="157:57" pos:end="157:60">conf</name><operator pos:start="157:61" pos:end="157:61">.</operator><name pos:start="157:62" pos:end="157:71">txRingSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="161:9" pos:end="163:64"><expr pos:start="161:9" pos:end="163:63"><call pos:start="161:9" pos:end="163:63"><name pos:start="161:9" pos:end="161:25">vmxnet3_ring_init</name><argument_list pos:start="161:26" pos:end="163:63">(<argument pos:start="161:27" pos:end="161:50"><expr pos:start="161:27" pos:end="161:50"><operator pos:start="161:27" pos:end="161:27">&amp;</operator><name pos:start="161:28" pos:end="161:42"><name pos:start="161:28" pos:end="161:28">s</name><operator pos:start="161:29" pos:end="161:30">-&gt;</operator><name pos:start="161:31" pos:end="161:39">txq_descr</name><index pos:start="161:40" pos:end="161:42">[<expr pos:start="161:41" pos:end="161:41"><name pos:start="161:41" pos:end="161:41">i</name></expr>]</index></name><operator pos:start="161:43" pos:end="161:43">.</operator><name pos:start="161:44" pos:end="161:50">tx_ring</name></expr></argument>, <argument pos:start="161:53" pos:end="161:54"><expr pos:start="161:53" pos:end="161:54"><name pos:start="161:53" pos:end="161:54">pa</name></expr></argument>, <argument pos:start="161:57" pos:end="161:60"><expr pos:start="161:57" pos:end="161:60"><name pos:start="161:57" pos:end="161:60">size</name></expr></argument>,

                          <argument pos:start="163:27" pos:end="163:55"><expr pos:start="163:27" pos:end="163:55"><sizeof pos:start="163:27" pos:end="163:55">sizeof<argument_list pos:start="163:33" pos:end="163:55">(<argument pos:start="163:34" pos:end="163:54"><expr pos:start="163:34" pos:end="163:54">struct <name pos:start="163:41" pos:end="163:54">Vmxnet3_TxDesc</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="163:58" pos:end="163:62"><expr pos:start="163:58" pos:end="163:62"><name pos:start="163:58" pos:end="163:62">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="165:9" pos:end="165:72"><expr pos:start="165:9" pos:end="165:71"><call pos:start="165:9" pos:end="165:71"><name pos:start="165:9" pos:end="165:25">VMXNET3_RING_DUMP</name><argument_list pos:start="165:26" pos:end="165:71">(<argument pos:start="165:27" pos:end="165:35"><expr pos:start="165:27" pos:end="165:35"><name pos:start="165:27" pos:end="165:35">VMW_CFPRN</name></expr></argument>, <argument pos:start="165:38" pos:end="165:41"><expr pos:start="165:38" pos:end="165:41"><literal type="string" pos:start="165:38" pos:end="165:41">"TX"</literal></expr></argument>, <argument pos:start="165:44" pos:end="165:44"><expr pos:start="165:44" pos:end="165:44"><name pos:start="165:44" pos:end="165:44">i</name></expr></argument>, <argument pos:start="165:47" pos:end="165:70"><expr pos:start="165:47" pos:end="165:70"><operator pos:start="165:47" pos:end="165:47">&amp;</operator><name pos:start="165:48" pos:end="165:62"><name pos:start="165:48" pos:end="165:48">s</name><operator pos:start="165:49" pos:end="165:50">-&gt;</operator><name pos:start="165:51" pos:end="165:59">txq_descr</name><index pos:start="165:60" pos:end="165:62">[<expr pos:start="165:61" pos:end="165:61"><name pos:start="165:61" pos:end="165:61">i</name></expr>]</index></name><operator pos:start="165:63" pos:end="165:63">.</operator><name pos:start="165:64" pos:end="165:70">tx_ring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="169:9" pos:end="169:32"><expr pos:start="169:9" pos:end="169:31"><name pos:start="169:9" pos:end="169:23"><name pos:start="169:9" pos:end="169:9">s</name><operator pos:start="169:10" pos:end="169:11">-&gt;</operator><name pos:start="169:12" pos:end="169:23">max_tx_frags</name></name> <operator pos:start="169:25" pos:end="169:26">+=</operator> <name pos:start="169:28" pos:end="169:31">size</name></expr>;</expr_stmt>



        <comment type="block" pos:start="173:9" pos:end="173:22">/* TXC ring */</comment>

        <expr_stmt pos:start="175:9" pos:end="175:75"><expr pos:start="175:9" pos:end="175:74"><name pos:start="175:9" pos:end="175:10">pa</name> <operator pos:start="175:12" pos:end="175:12">=</operator> <call pos:start="175:14" pos:end="175:74"><name pos:start="175:14" pos:end="175:42">VMXNET3_READ_TX_QUEUE_DESCR64</name><argument_list pos:start="175:43" pos:end="175:74">(<argument pos:start="175:44" pos:end="175:52"><expr pos:start="175:44" pos:end="175:52"><name pos:start="175:44" pos:end="175:52">qdescr_pa</name></expr></argument>, <argument pos:start="175:55" pos:end="175:73"><expr pos:start="175:55" pos:end="175:73"><name pos:start="175:55" pos:end="175:73"><name pos:start="175:55" pos:end="175:58">conf</name><operator pos:start="175:59" pos:end="175:59">.</operator><name pos:start="175:60" pos:end="175:73">compRingBasePA</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="177:9" pos:end="177:75"><expr pos:start="177:9" pos:end="177:74"><name pos:start="177:9" pos:end="177:12">size</name> <operator pos:start="177:14" pos:end="177:14">=</operator> <call pos:start="177:16" pos:end="177:74"><name pos:start="177:16" pos:end="177:44">VMXNET3_READ_TX_QUEUE_DESCR32</name><argument_list pos:start="177:45" pos:end="177:74">(<argument pos:start="177:46" pos:end="177:54"><expr pos:start="177:46" pos:end="177:54"><name pos:start="177:46" pos:end="177:54">qdescr_pa</name></expr></argument>, <argument pos:start="177:57" pos:end="177:73"><expr pos:start="177:57" pos:end="177:73"><name pos:start="177:57" pos:end="177:73"><name pos:start="177:57" pos:end="177:60">conf</name><operator pos:start="177:61" pos:end="177:61">.</operator><name pos:start="177:62" pos:end="177:73">compRingSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="179:9" pos:end="181:67"><expr pos:start="179:9" pos:end="181:66"><call pos:start="179:9" pos:end="181:66"><name pos:start="179:9" pos:end="179:25">vmxnet3_ring_init</name><argument_list pos:start="179:26" pos:end="181:66">(<argument pos:start="179:27" pos:end="179:52"><expr pos:start="179:27" pos:end="179:52"><operator pos:start="179:27" pos:end="179:27">&amp;</operator><name pos:start="179:28" pos:end="179:42"><name pos:start="179:28" pos:end="179:28">s</name><operator pos:start="179:29" pos:end="179:30">-&gt;</operator><name pos:start="179:31" pos:end="179:39">txq_descr</name><index pos:start="179:40" pos:end="179:42">[<expr pos:start="179:41" pos:end="179:41"><name pos:start="179:41" pos:end="179:41">i</name></expr>]</index></name><operator pos:start="179:43" pos:end="179:43">.</operator><name pos:start="179:44" pos:end="179:52">comp_ring</name></expr></argument>, <argument pos:start="179:55" pos:end="179:56"><expr pos:start="179:55" pos:end="179:56"><name pos:start="179:55" pos:end="179:56">pa</name></expr></argument>, <argument pos:start="179:59" pos:end="179:62"><expr pos:start="179:59" pos:end="179:62"><name pos:start="179:59" pos:end="179:62">size</name></expr></argument>,

                          <argument pos:start="181:27" pos:end="181:59"><expr pos:start="181:27" pos:end="181:59"><sizeof pos:start="181:27" pos:end="181:59">sizeof<argument_list pos:start="181:33" pos:end="181:59">(<argument pos:start="181:34" pos:end="181:58"><expr pos:start="181:34" pos:end="181:58">struct <name pos:start="181:41" pos:end="181:58">Vmxnet3_TxCompDesc</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="181:62" pos:end="181:65"><expr pos:start="181:62" pos:end="181:65"><name pos:start="181:62" pos:end="181:65">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="183:9" pos:end="183:75"><expr pos:start="183:9" pos:end="183:74"><call pos:start="183:9" pos:end="183:74"><name pos:start="183:9" pos:end="183:25">VMXNET3_RING_DUMP</name><argument_list pos:start="183:26" pos:end="183:74">(<argument pos:start="183:27" pos:end="183:35"><expr pos:start="183:27" pos:end="183:35"><name pos:start="183:27" pos:end="183:35">VMW_CFPRN</name></expr></argument>, <argument pos:start="183:38" pos:end="183:42"><expr pos:start="183:38" pos:end="183:42"><literal type="string" pos:start="183:38" pos:end="183:42">"TXC"</literal></expr></argument>, <argument pos:start="183:45" pos:end="183:45"><expr pos:start="183:45" pos:end="183:45"><name pos:start="183:45" pos:end="183:45">i</name></expr></argument>, <argument pos:start="183:48" pos:end="183:73"><expr pos:start="183:48" pos:end="183:73"><operator pos:start="183:48" pos:end="183:48">&amp;</operator><name pos:start="183:49" pos:end="183:63"><name pos:start="183:49" pos:end="183:49">s</name><operator pos:start="183:50" pos:end="183:51">-&gt;</operator><name pos:start="183:52" pos:end="183:60">txq_descr</name><index pos:start="183:61" pos:end="183:63">[<expr pos:start="183:62" pos:end="183:62"><name pos:start="183:62" pos:end="183:62">i</name></expr>]</index></name><operator pos:start="183:64" pos:end="183:64">.</operator><name pos:start="183:65" pos:end="183:73">comp_ring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="187:9" pos:end="189:68"><expr pos:start="187:9" pos:end="189:67"><name pos:start="187:9" pos:end="187:23"><name pos:start="187:9" pos:end="187:9">s</name><operator pos:start="187:10" pos:end="187:11">-&gt;</operator><name pos:start="187:12" pos:end="187:20">txq_descr</name><index pos:start="187:21" pos:end="187:23">[<expr pos:start="187:22" pos:end="187:22"><name pos:start="187:22" pos:end="187:22">i</name></expr>]</index></name><operator pos:start="187:24" pos:end="187:24">.</operator><name pos:start="187:25" pos:end="187:35">tx_stats_pa</name> <operator pos:start="187:37" pos:end="187:37">=</operator>

            <name pos:start="189:13" pos:end="189:21">qdescr_pa</name> <operator pos:start="189:23" pos:end="189:23">+</operator> <call pos:start="189:25" pos:end="189:67"><name pos:start="189:25" pos:end="189:32">offsetof</name><argument_list pos:start="189:33" pos:end="189:67">(<argument pos:start="189:34" pos:end="189:59"><expr pos:start="189:34" pos:end="189:59">struct <name pos:start="189:41" pos:end="189:59">Vmxnet3_TxQueueDesc</name></expr></argument>, <argument pos:start="189:62" pos:end="189:66"><expr pos:start="189:62" pos:end="189:66"><name pos:start="189:62" pos:end="189:66">stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="193:9" pos:end="195:50"><expr pos:start="193:9" pos:end="195:49"><call pos:start="193:9" pos:end="195:49"><name pos:start="193:9" pos:end="193:14">memset</name><argument_list pos:start="193:15" pos:end="195:49">(<argument pos:start="193:16" pos:end="193:41"><expr pos:start="193:16" pos:end="193:41"><operator pos:start="193:16" pos:end="193:16">&amp;</operator><name pos:start="193:17" pos:end="193:31"><name pos:start="193:17" pos:end="193:17">s</name><operator pos:start="193:18" pos:end="193:19">-&gt;</operator><name pos:start="193:20" pos:end="193:28">txq_descr</name><index pos:start="193:29" pos:end="193:31">[<expr pos:start="193:30" pos:end="193:30"><name pos:start="193:30" pos:end="193:30">i</name></expr>]</index></name><operator pos:start="193:32" pos:end="193:32">.</operator><name pos:start="193:33" pos:end="193:41">txq_stats</name></expr></argument>, <argument pos:start="193:44" pos:end="193:44"><expr pos:start="193:44" pos:end="193:44"><literal type="number" pos:start="193:44" pos:end="193:44">0</literal></expr></argument>,

               <argument pos:start="195:16" pos:end="195:48"><expr pos:start="195:16" pos:end="195:48"><sizeof pos:start="195:16" pos:end="195:48">sizeof<argument_list pos:start="195:22" pos:end="195:48">(<argument pos:start="195:23" pos:end="195:47"><expr pos:start="195:23" pos:end="195:47"><name pos:start="195:23" pos:end="195:37"><name pos:start="195:23" pos:end="195:23">s</name><operator pos:start="195:24" pos:end="195:25">-&gt;</operator><name pos:start="195:26" pos:end="195:34">txq_descr</name><index pos:start="195:35" pos:end="195:37">[<expr pos:start="195:36" pos:end="195:36"><name pos:start="195:36" pos:end="195:36">i</name></expr>]</index></name><operator pos:start="195:38" pos:end="195:38">.</operator><name pos:start="195:39" pos:end="195:47">txq_stats</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="199:9" pos:end="199:55">/* Fill device-managed parameters for queues */</comment>

        <expr_stmt pos:start="201:9" pos:end="205:65"><expr pos:start="201:9" pos:end="205:64"><call pos:start="201:9" pos:end="205:64"><name pos:start="201:9" pos:end="201:38">VMXNET3_WRITE_TX_QUEUE_DESCR32</name><argument_list pos:start="201:39" pos:end="205:64">(<argument pos:start="201:40" pos:end="201:48"><expr pos:start="201:40" pos:end="201:48"><name pos:start="201:40" pos:end="201:48">qdescr_pa</name></expr></argument>,

                                       <argument pos:start="203:40" pos:end="203:55"><expr pos:start="203:40" pos:end="203:55"><name pos:start="203:40" pos:end="203:55"><name pos:start="203:40" pos:end="203:43">ctrl</name><operator pos:start="203:44" pos:end="203:44">.</operator><name pos:start="203:45" pos:end="203:55">txThreshold</name></name></expr></argument>,

                                       <argument pos:start="205:40" pos:end="205:63"><expr pos:start="205:40" pos:end="205:63"><name pos:start="205:40" pos:end="205:63">VMXNET3_DEF_TX_THRESHOLD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="211:5" pos:end="211:39">/* Preallocate TX packet wrapper */</comment>

    <expr_stmt pos:start="213:5" pos:end="213:57"><expr pos:start="213:5" pos:end="213:56"><call pos:start="213:5" pos:end="213:56"><name pos:start="213:5" pos:end="213:13">VMW_CFPRN</name><argument_list pos:start="213:14" pos:end="213:56">(<argument pos:start="213:15" pos:end="213:38"><expr pos:start="213:15" pos:end="213:38"><literal type="string" pos:start="213:15" pos:end="213:38">"Max TX fragments is %u"</literal></expr></argument>, <argument pos:start="213:41" pos:end="213:55"><expr pos:start="213:41" pos:end="213:55"><name pos:start="213:41" pos:end="213:55"><name pos:start="213:41" pos:end="213:41">s</name><operator pos:start="213:42" pos:end="213:43">-&gt;</operator><name pos:start="213:44" pos:end="213:55">max_tx_frags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="215:5" pos:end="217:55"><expr pos:start="215:5" pos:end="217:54"><call pos:start="215:5" pos:end="217:54"><name pos:start="215:5" pos:end="215:19">net_tx_pkt_init</name><argument_list pos:start="215:20" pos:end="217:54">(<argument pos:start="215:21" pos:end="215:30"><expr pos:start="215:21" pos:end="215:30"><operator pos:start="215:21" pos:end="215:21">&amp;</operator><name pos:start="215:22" pos:end="215:30"><name pos:start="215:22" pos:end="215:22">s</name><operator pos:start="215:23" pos:end="215:24">-&gt;</operator><name pos:start="215:25" pos:end="215:30">tx_pkt</name></name></expr></argument>, <argument pos:start="215:33" pos:end="215:45"><expr pos:start="215:33" pos:end="215:45"><call pos:start="215:33" pos:end="215:45"><name pos:start="215:33" pos:end="215:42">PCI_DEVICE</name><argument_list pos:start="215:43" pos:end="215:45">(<argument pos:start="215:44" pos:end="215:44"><expr pos:start="215:44" pos:end="215:44"><name pos:start="215:44" pos:end="215:44">s</name></expr></argument>)</argument_list></call></expr></argument>,

                    <argument pos:start="217:21" pos:end="217:35"><expr pos:start="217:21" pos:end="217:35"><name pos:start="217:21" pos:end="217:35"><name pos:start="217:21" pos:end="217:21">s</name><operator pos:start="217:22" pos:end="217:23">-&gt;</operator><name pos:start="217:24" pos:end="217:35">max_tx_frags</name></name></expr></argument>, <argument pos:start="217:38" pos:end="217:53"><expr pos:start="217:38" pos:end="217:53"><name pos:start="217:38" pos:end="217:53"><name pos:start="217:38" pos:end="217:38">s</name><operator pos:start="217:39" pos:end="217:40">-&gt;</operator><name pos:start="217:41" pos:end="217:53">peer_has_vhdr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="219:5" pos:end="219:50"><expr pos:start="219:5" pos:end="219:49"><call pos:start="219:5" pos:end="219:49"><name pos:start="219:5" pos:end="219:19">net_rx_pkt_init</name><argument_list pos:start="219:20" pos:end="219:49">(<argument pos:start="219:21" pos:end="219:30"><expr pos:start="219:21" pos:end="219:30"><operator pos:start="219:21" pos:end="219:21">&amp;</operator><name pos:start="219:22" pos:end="219:30"><name pos:start="219:22" pos:end="219:22">s</name><operator pos:start="219:23" pos:end="219:24">-&gt;</operator><name pos:start="219:25" pos:end="219:30">rx_pkt</name></name></expr></argument>, <argument pos:start="219:33" pos:end="219:48"><expr pos:start="219:33" pos:end="219:48"><name pos:start="219:33" pos:end="219:48"><name pos:start="219:33" pos:end="219:33">s</name><operator pos:start="219:34" pos:end="219:35">-&gt;</operator><name pos:start="219:36" pos:end="219:48">peer_has_vhdr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="223:5" pos:end="223:51">/* Read rings memory locations for RX queues */</comment>

    <for pos:start="225:5" pos:end="295:5">for <control pos:start="225:9" pos:end="225:36">(<init pos:start="225:10" pos:end="225:15"><expr pos:start="225:10" pos:end="225:14"><name pos:start="225:10" pos:end="225:10">i</name> <operator pos:start="225:12" pos:end="225:12">=</operator> <literal type="number" pos:start="225:14" pos:end="225:14">0</literal></expr>;</init> <condition pos:start="225:17" pos:end="225:31"><expr pos:start="225:17" pos:end="225:30"><name pos:start="225:17" pos:end="225:17">i</name> <operator pos:start="225:19" pos:end="225:19">&lt;</operator> <name pos:start="225:21" pos:end="225:30"><name pos:start="225:21" pos:end="225:21">s</name><operator pos:start="225:22" pos:end="225:23">-&gt;</operator><name pos:start="225:24" pos:end="225:30">rxq_num</name></name></expr>;</condition> <incr pos:start="225:33" pos:end="225:35"><expr pos:start="225:33" pos:end="225:35"><name pos:start="225:33" pos:end="225:33">i</name><operator pos:start="225:34" pos:end="225:35">++</operator></expr></incr>)</control> <block pos:start="225:38" pos:end="295:5">{<block_content pos:start="227:9" pos:end="293:50">

        <decl_stmt pos:start="227:9" pos:end="227:14"><decl pos:start="227:9" pos:end="227:13"><type pos:start="227:9" pos:end="227:11"><name pos:start="227:9" pos:end="227:11">int</name></type> <name pos:start="227:13" pos:end="227:13">j</name></decl>;</decl_stmt>

        <decl_stmt pos:start="229:9" pos:end="233:51"><decl pos:start="229:9" pos:end="233:50"><type pos:start="229:9" pos:end="229:14"><name pos:start="229:9" pos:end="229:14">hwaddr</name></type> <name pos:start="229:16" pos:end="229:20">qd_pa</name> <init pos:start="229:22" pos:end="233:50">=

            <expr pos:start="231:13" pos:end="233:50"><name pos:start="231:13" pos:end="231:27">qdescr_table_pa</name> <operator pos:start="231:29" pos:end="231:29">+</operator> <name pos:start="231:31" pos:end="231:40"><name pos:start="231:31" pos:end="231:31">s</name><operator pos:start="231:32" pos:end="231:33">-&gt;</operator><name pos:start="231:34" pos:end="231:40">txq_num</name></name> <operator pos:start="231:42" pos:end="231:42">*</operator> <sizeof pos:start="231:44" pos:end="231:77">sizeof<argument_list pos:start="231:50" pos:end="231:77">(<argument pos:start="231:51" pos:end="231:76"><expr pos:start="231:51" pos:end="231:76">struct <name pos:start="231:58" pos:end="231:76">Vmxnet3_TxQueueDesc</name></expr></argument>)</argument_list></sizeof> <operator pos:start="231:79" pos:end="231:79">+</operator>

            <name pos:start="233:13" pos:end="233:13">i</name> <operator pos:start="233:15" pos:end="233:15">*</operator> <sizeof pos:start="233:17" pos:end="233:50">sizeof<argument_list pos:start="233:23" pos:end="233:50">(<argument pos:start="233:24" pos:end="233:49"><expr pos:start="233:24" pos:end="233:49">struct <name pos:start="233:31" pos:end="233:49">Vmxnet3_RxQueueDesc</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="237:9" pos:end="237:53">/* Read interrupt number for this RX queue */</comment>

        <expr_stmt pos:start="239:9" pos:end="241:62"><expr pos:start="239:9" pos:end="241:61"><name pos:start="239:9" pos:end="239:23"><name pos:start="239:9" pos:end="239:9">s</name><operator pos:start="239:10" pos:end="239:11">-&gt;</operator><name pos:start="239:12" pos:end="239:20">rxq_descr</name><index pos:start="239:21" pos:end="239:23">[<expr pos:start="239:22" pos:end="239:22"><name pos:start="239:22" pos:end="239:22">i</name></expr>]</index></name><operator pos:start="239:24" pos:end="239:24">.</operator><name pos:start="239:25" pos:end="239:32">intr_idx</name> <operator pos:start="239:34" pos:end="239:34">=</operator>

            <call pos:start="241:13" pos:end="241:61"><name pos:start="241:13" pos:end="241:40">VMXNET3_READ_TX_QUEUE_DESCR8</name><argument_list pos:start="241:41" pos:end="241:61">(<argument pos:start="241:42" pos:end="241:46"><expr pos:start="241:42" pos:end="241:46"><name pos:start="241:42" pos:end="241:46">qd_pa</name></expr></argument>, <argument pos:start="241:49" pos:end="241:60"><expr pos:start="241:49" pos:end="241:60"><name pos:start="241:49" pos:end="241:60"><name pos:start="241:49" pos:end="241:52">conf</name><operator pos:start="241:53" pos:end="241:53">.</operator><name pos:start="241:54" pos:end="241:60">intrIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="243:9" pos:end="243:65"><expr pos:start="243:9" pos:end="243:64"><call pos:start="243:9" pos:end="243:64"><name pos:start="243:9" pos:end="243:14">assert</name><argument_list pos:start="243:15" pos:end="243:64">(<argument pos:start="243:16" pos:end="243:63"><expr pos:start="243:16" pos:end="243:63"><call pos:start="243:16" pos:end="243:63"><name pos:start="243:16" pos:end="243:34">vmxnet3_verify_intx</name><argument_list pos:start="243:35" pos:end="243:63">(<argument pos:start="243:36" pos:end="243:36"><expr pos:start="243:36" pos:end="243:36"><name pos:start="243:36" pos:end="243:36">s</name></expr></argument>, <argument pos:start="243:39" pos:end="243:62"><expr pos:start="243:39" pos:end="243:62"><name pos:start="243:39" pos:end="243:53"><name pos:start="243:39" pos:end="243:39">s</name><operator pos:start="243:40" pos:end="243:41">-&gt;</operator><name pos:start="243:42" pos:end="243:50">rxq_descr</name><index pos:start="243:51" pos:end="243:53">[<expr pos:start="243:52" pos:end="243:52"><name pos:start="243:52" pos:end="243:52">i</name></expr>]</index></name><operator pos:start="243:54" pos:end="243:54">.</operator><name pos:start="243:55" pos:end="243:62">intr_idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="247:9" pos:end="247:76"><expr pos:start="247:9" pos:end="247:75"><call pos:start="247:9" pos:end="247:75"><name pos:start="247:9" pos:end="247:17">VMW_CFPRN</name><argument_list pos:start="247:18" pos:end="247:75">(<argument pos:start="247:19" pos:end="247:45"><expr pos:start="247:19" pos:end="247:45"><literal type="string" pos:start="247:19" pos:end="247:45">"RX Queue %d interrupt: %d"</literal></expr></argument>, <argument pos:start="247:48" pos:end="247:48"><expr pos:start="247:48" pos:end="247:48"><name pos:start="247:48" pos:end="247:48">i</name></expr></argument>, <argument pos:start="247:51" pos:end="247:74"><expr pos:start="247:51" pos:end="247:74"><name pos:start="247:51" pos:end="247:65"><name pos:start="247:51" pos:end="247:51">s</name><operator pos:start="247:52" pos:end="247:53">-&gt;</operator><name pos:start="247:54" pos:end="247:62">rxq_descr</name><index pos:start="247:63" pos:end="247:65">[<expr pos:start="247:64" pos:end="247:64"><name pos:start="247:64" pos:end="247:64">i</name></expr>]</index></name><operator pos:start="247:66" pos:end="247:66">.</operator><name pos:start="247:67" pos:end="247:74">intr_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="251:9" pos:end="251:41">/* Read rings memory locations */</comment>

        <for pos:start="253:9" pos:end="269:9">for <control pos:start="253:13" pos:end="253:56">(<init pos:start="253:14" pos:end="253:19"><expr pos:start="253:14" pos:end="253:18"><name pos:start="253:14" pos:end="253:14">j</name> <operator pos:start="253:16" pos:end="253:16">=</operator> <literal type="number" pos:start="253:18" pos:end="253:18">0</literal></expr>;</init> <condition pos:start="253:21" pos:end="253:51"><expr pos:start="253:21" pos:end="253:50"><name pos:start="253:21" pos:end="253:21">j</name> <operator pos:start="253:23" pos:end="253:23">&lt;</operator> <name pos:start="253:25" pos:end="253:50">VMXNET3_RX_RINGS_PER_QUEUE</name></expr>;</condition> <incr pos:start="253:53" pos:end="253:55"><expr pos:start="253:53" pos:end="253:55"><name pos:start="253:53" pos:end="253:53">j</name><operator pos:start="253:54" pos:end="253:55">++</operator></expr></incr>)</control> <block pos:start="253:58" pos:end="269:9">{<block_content pos:start="257:13" pos:end="267:38">

            <comment type="block" pos:start="255:13" pos:end="255:26">/* RX rings */</comment>

            <expr_stmt pos:start="257:13" pos:end="257:76"><expr pos:start="257:13" pos:end="257:75"><name pos:start="257:13" pos:end="257:14">pa</name> <operator pos:start="257:16" pos:end="257:16">=</operator> <call pos:start="257:18" pos:end="257:75"><name pos:start="257:18" pos:end="257:46">VMXNET3_READ_RX_QUEUE_DESCR64</name><argument_list pos:start="257:47" pos:end="257:75">(<argument pos:start="257:48" pos:end="257:52"><expr pos:start="257:48" pos:end="257:52"><name pos:start="257:48" pos:end="257:52">qd_pa</name></expr></argument>, <argument pos:start="257:55" pos:end="257:74"><expr pos:start="257:55" pos:end="257:74"><name pos:start="257:55" pos:end="257:74"><name pos:start="257:55" pos:end="257:58">conf</name><operator pos:start="257:59" pos:end="257:59">.</operator><name pos:start="257:60" pos:end="257:71">rxRingBasePA</name><index pos:start="257:72" pos:end="257:74">[<expr pos:start="257:73" pos:end="257:73"><name pos:start="257:73" pos:end="257:73">j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="259:13" pos:end="259:76"><expr pos:start="259:13" pos:end="259:75"><name pos:start="259:13" pos:end="259:16">size</name> <operator pos:start="259:18" pos:end="259:18">=</operator> <call pos:start="259:20" pos:end="259:75"><name pos:start="259:20" pos:end="259:48">VMXNET3_READ_RX_QUEUE_DESCR32</name><argument_list pos:start="259:49" pos:end="259:75">(<argument pos:start="259:50" pos:end="259:54"><expr pos:start="259:50" pos:end="259:54"><name pos:start="259:50" pos:end="259:54">qd_pa</name></expr></argument>, <argument pos:start="259:57" pos:end="259:74"><expr pos:start="259:57" pos:end="259:74"><name pos:start="259:57" pos:end="259:74"><name pos:start="259:57" pos:end="259:60">conf</name><operator pos:start="259:61" pos:end="259:61">.</operator><name pos:start="259:62" pos:end="259:71">rxRingSize</name><index pos:start="259:72" pos:end="259:74">[<expr pos:start="259:73" pos:end="259:73"><name pos:start="259:73" pos:end="259:73">j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="261:13" pos:end="263:68"><expr pos:start="261:13" pos:end="263:67"><call pos:start="261:13" pos:end="263:67"><name pos:start="261:13" pos:end="261:29">vmxnet3_ring_init</name><argument_list pos:start="261:30" pos:end="263:67">(<argument pos:start="261:31" pos:end="261:57"><expr pos:start="261:31" pos:end="261:57"><operator pos:start="261:31" pos:end="261:31">&amp;</operator><name pos:start="261:32" pos:end="261:46"><name pos:start="261:32" pos:end="261:32">s</name><operator pos:start="261:33" pos:end="261:34">-&gt;</operator><name pos:start="261:35" pos:end="261:43">rxq_descr</name><index pos:start="261:44" pos:end="261:46">[<expr pos:start="261:45" pos:end="261:45"><name pos:start="261:45" pos:end="261:45">i</name></expr>]</index></name><operator pos:start="261:47" pos:end="261:47">.</operator><name pos:start="261:48" pos:end="261:57"><name pos:start="261:48" pos:end="261:54">rx_ring</name><index pos:start="261:55" pos:end="261:57">[<expr pos:start="261:56" pos:end="261:56"><name pos:start="261:56" pos:end="261:56">j</name></expr>]</index></name></expr></argument>, <argument pos:start="261:60" pos:end="261:61"><expr pos:start="261:60" pos:end="261:61"><name pos:start="261:60" pos:end="261:61">pa</name></expr></argument>, <argument pos:start="261:64" pos:end="261:67"><expr pos:start="261:64" pos:end="261:67"><name pos:start="261:64" pos:end="261:67">size</name></expr></argument>,

                              <argument pos:start="263:31" pos:end="263:59"><expr pos:start="263:31" pos:end="263:59"><sizeof pos:start="263:31" pos:end="263:59">sizeof<argument_list pos:start="263:37" pos:end="263:59">(<argument pos:start="263:38" pos:end="263:58"><expr pos:start="263:38" pos:end="263:58">struct <name pos:start="263:45" pos:end="263:58">Vmxnet3_RxDesc</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="263:62" pos:end="263:66"><expr pos:start="263:62" pos:end="263:66"><name pos:start="263:62" pos:end="263:66">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="265:13" pos:end="267:38"><expr pos:start="265:13" pos:end="267:37"><call pos:start="265:13" pos:end="267:37"><name pos:start="265:13" pos:end="265:21">VMW_CFPRN</name><argument_list pos:start="265:22" pos:end="267:37">(<argument pos:start="265:23" pos:end="265:67"><expr pos:start="265:23" pos:end="265:67"><literal type="string" pos:start="265:23" pos:end="265:47">"RX queue %d:%d: Base: %"</literal> <name pos:start="265:49" pos:end="265:54">PRIx64</name> <literal type="string" pos:start="265:56" pos:end="265:67">", Size: %d"</literal></expr></argument>,

                      <argument pos:start="267:23" pos:end="267:23"><expr pos:start="267:23" pos:end="267:23"><name pos:start="267:23" pos:end="267:23">i</name></expr></argument>, <argument pos:start="267:26" pos:end="267:26"><expr pos:start="267:26" pos:end="267:26"><name pos:start="267:26" pos:end="267:26">j</name></expr></argument>, <argument pos:start="267:29" pos:end="267:30"><expr pos:start="267:29" pos:end="267:30"><name pos:start="267:29" pos:end="267:30">pa</name></expr></argument>, <argument pos:start="267:33" pos:end="267:36"><expr pos:start="267:33" pos:end="267:36"><name pos:start="267:33" pos:end="267:36">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>



        <comment type="block" pos:start="273:9" pos:end="273:22">/* RXC ring */</comment>

        <expr_stmt pos:start="275:9" pos:end="275:71"><expr pos:start="275:9" pos:end="275:70"><name pos:start="275:9" pos:end="275:10">pa</name> <operator pos:start="275:12" pos:end="275:12">=</operator> <call pos:start="275:14" pos:end="275:70"><name pos:start="275:14" pos:end="275:42">VMXNET3_READ_RX_QUEUE_DESCR64</name><argument_list pos:start="275:43" pos:end="275:70">(<argument pos:start="275:44" pos:end="275:48"><expr pos:start="275:44" pos:end="275:48"><name pos:start="275:44" pos:end="275:48">qd_pa</name></expr></argument>, <argument pos:start="275:51" pos:end="275:69"><expr pos:start="275:51" pos:end="275:69"><name pos:start="275:51" pos:end="275:69"><name pos:start="275:51" pos:end="275:54">conf</name><operator pos:start="275:55" pos:end="275:55">.</operator><name pos:start="275:56" pos:end="275:69">compRingBasePA</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="277:9" pos:end="277:71"><expr pos:start="277:9" pos:end="277:70"><name pos:start="277:9" pos:end="277:12">size</name> <operator pos:start="277:14" pos:end="277:14">=</operator> <call pos:start="277:16" pos:end="277:70"><name pos:start="277:16" pos:end="277:44">VMXNET3_READ_RX_QUEUE_DESCR32</name><argument_list pos:start="277:45" pos:end="277:70">(<argument pos:start="277:46" pos:end="277:50"><expr pos:start="277:46" pos:end="277:50"><name pos:start="277:46" pos:end="277:50">qd_pa</name></expr></argument>, <argument pos:start="277:53" pos:end="277:69"><expr pos:start="277:53" pos:end="277:69"><name pos:start="277:53" pos:end="277:69"><name pos:start="277:53" pos:end="277:56">conf</name><operator pos:start="277:57" pos:end="277:57">.</operator><name pos:start="277:58" pos:end="277:69">compRingSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="279:9" pos:end="281:67"><expr pos:start="279:9" pos:end="281:66"><call pos:start="279:9" pos:end="281:66"><name pos:start="279:9" pos:end="279:25">vmxnet3_ring_init</name><argument_list pos:start="279:26" pos:end="281:66">(<argument pos:start="279:27" pos:end="279:52"><expr pos:start="279:27" pos:end="279:52"><operator pos:start="279:27" pos:end="279:27">&amp;</operator><name pos:start="279:28" pos:end="279:42"><name pos:start="279:28" pos:end="279:28">s</name><operator pos:start="279:29" pos:end="279:30">-&gt;</operator><name pos:start="279:31" pos:end="279:39">rxq_descr</name><index pos:start="279:40" pos:end="279:42">[<expr pos:start="279:41" pos:end="279:41"><name pos:start="279:41" pos:end="279:41">i</name></expr>]</index></name><operator pos:start="279:43" pos:end="279:43">.</operator><name pos:start="279:44" pos:end="279:52">comp_ring</name></expr></argument>, <argument pos:start="279:55" pos:end="279:56"><expr pos:start="279:55" pos:end="279:56"><name pos:start="279:55" pos:end="279:56">pa</name></expr></argument>, <argument pos:start="279:59" pos:end="279:62"><expr pos:start="279:59" pos:end="279:62"><name pos:start="279:59" pos:end="279:62">size</name></expr></argument>,

                          <argument pos:start="281:27" pos:end="281:59"><expr pos:start="281:27" pos:end="281:59"><sizeof pos:start="281:27" pos:end="281:59">sizeof<argument_list pos:start="281:33" pos:end="281:59">(<argument pos:start="281:34" pos:end="281:58"><expr pos:start="281:34" pos:end="281:58">struct <name pos:start="281:41" pos:end="281:58">Vmxnet3_RxCompDesc</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="281:62" pos:end="281:65"><expr pos:start="281:62" pos:end="281:65"><name pos:start="281:62" pos:end="281:65">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="283:9" pos:end="283:76"><expr pos:start="283:9" pos:end="283:75"><call pos:start="283:9" pos:end="283:75"><name pos:start="283:9" pos:end="283:17">VMW_CFPRN</name><argument_list pos:start="283:18" pos:end="283:75">(<argument pos:start="283:19" pos:end="283:61"><expr pos:start="283:19" pos:end="283:61"><literal type="string" pos:start="283:19" pos:end="283:41">"RXC queue %d: Base: %"</literal> <name pos:start="283:43" pos:end="283:48">PRIx64</name> <literal type="string" pos:start="283:50" pos:end="283:61">", Size: %d"</literal></expr></argument>, <argument pos:start="283:64" pos:end="283:64"><expr pos:start="283:64" pos:end="283:64"><name pos:start="283:64" pos:end="283:64">i</name></expr></argument>, <argument pos:start="283:67" pos:end="283:68"><expr pos:start="283:67" pos:end="283:68"><name pos:start="283:67" pos:end="283:68">pa</name></expr></argument>, <argument pos:start="283:71" pos:end="283:74"><expr pos:start="283:71" pos:end="283:74"><name pos:start="283:71" pos:end="283:74">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="287:9" pos:end="289:64"><expr pos:start="287:9" pos:end="289:63"><name pos:start="287:9" pos:end="287:23"><name pos:start="287:9" pos:end="287:9">s</name><operator pos:start="287:10" pos:end="287:11">-&gt;</operator><name pos:start="287:12" pos:end="287:20">rxq_descr</name><index pos:start="287:21" pos:end="287:23">[<expr pos:start="287:22" pos:end="287:22"><name pos:start="287:22" pos:end="287:22">i</name></expr>]</index></name><operator pos:start="287:24" pos:end="287:24">.</operator><name pos:start="287:25" pos:end="287:35">rx_stats_pa</name> <operator pos:start="287:37" pos:end="287:37">=</operator>

            <name pos:start="289:13" pos:end="289:17">qd_pa</name> <operator pos:start="289:19" pos:end="289:19">+</operator> <call pos:start="289:21" pos:end="289:63"><name pos:start="289:21" pos:end="289:28">offsetof</name><argument_list pos:start="289:29" pos:end="289:63">(<argument pos:start="289:30" pos:end="289:55"><expr pos:start="289:30" pos:end="289:55">struct <name pos:start="289:37" pos:end="289:55">Vmxnet3_RxQueueDesc</name></expr></argument>, <argument pos:start="289:58" pos:end="289:62"><expr pos:start="289:58" pos:end="289:62"><name pos:start="289:58" pos:end="289:62">stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="291:9" pos:end="293:50"><expr pos:start="291:9" pos:end="293:49"><call pos:start="291:9" pos:end="293:49"><name pos:start="291:9" pos:end="291:14">memset</name><argument_list pos:start="291:15" pos:end="293:49">(<argument pos:start="291:16" pos:end="291:41"><expr pos:start="291:16" pos:end="291:41"><operator pos:start="291:16" pos:end="291:16">&amp;</operator><name pos:start="291:17" pos:end="291:31"><name pos:start="291:17" pos:end="291:17">s</name><operator pos:start="291:18" pos:end="291:19">-&gt;</operator><name pos:start="291:20" pos:end="291:28">rxq_descr</name><index pos:start="291:29" pos:end="291:31">[<expr pos:start="291:30" pos:end="291:30"><name pos:start="291:30" pos:end="291:30">i</name></expr>]</index></name><operator pos:start="291:32" pos:end="291:32">.</operator><name pos:start="291:33" pos:end="291:41">rxq_stats</name></expr></argument>, <argument pos:start="291:44" pos:end="291:44"><expr pos:start="291:44" pos:end="291:44"><literal type="number" pos:start="291:44" pos:end="291:44">0</literal></expr></argument>,

               <argument pos:start="293:16" pos:end="293:48"><expr pos:start="293:16" pos:end="293:48"><sizeof pos:start="293:16" pos:end="293:48">sizeof<argument_list pos:start="293:22" pos:end="293:48">(<argument pos:start="293:23" pos:end="293:47"><expr pos:start="293:23" pos:end="293:47"><name pos:start="293:23" pos:end="293:37"><name pos:start="293:23" pos:end="293:23">s</name><operator pos:start="293:24" pos:end="293:25">-&gt;</operator><name pos:start="293:26" pos:end="293:34">rxq_descr</name><index pos:start="293:35" pos:end="293:37">[<expr pos:start="293:36" pos:end="293:36"><name pos:start="293:36" pos:end="293:36">i</name></expr>]</index></name><operator pos:start="293:38" pos:end="293:38">.</operator><name pos:start="293:39" pos:end="293:47">rxq_stats</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="299:5" pos:end="299:35"><expr pos:start="299:5" pos:end="299:34"><call pos:start="299:5" pos:end="299:34"><name pos:start="299:5" pos:end="299:31">vmxnet3_validate_interrupts</name><argument_list pos:start="299:32" pos:end="299:34">(<argument pos:start="299:33" pos:end="299:33"><expr pos:start="299:33" pos:end="299:33"><name pos:start="299:33" pos:end="299:33">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="303:5" pos:end="303:67">/* Make sure everything is in place before device activation */</comment>

    <expr_stmt pos:start="305:5" pos:end="305:14"><expr pos:start="305:5" pos:end="305:13"><call pos:start="305:5" pos:end="305:13"><name pos:start="305:5" pos:end="305:11">smp_wmb</name><argument_list pos:start="305:12" pos:end="305:13">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="309:5" pos:end="309:25"><expr pos:start="309:5" pos:end="309:24"><call pos:start="309:5" pos:end="309:24"><name pos:start="309:5" pos:end="309:21">vmxnet3_reset_mac</name><argument_list pos:start="309:22" pos:end="309:24">(<argument pos:start="309:23" pos:end="309:23"><expr pos:start="309:23" pos:end="309:23"><name pos:start="309:23" pos:end="309:23">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="313:5" pos:end="313:28"><expr pos:start="313:5" pos:end="313:27"><name pos:start="313:5" pos:end="313:20"><name pos:start="313:5" pos:end="313:5">s</name><operator pos:start="313:6" pos:end="313:7">-&gt;</operator><name pos:start="313:8" pos:end="313:20">device_active</name></name> <operator pos:start="313:22" pos:end="313:22">=</operator> <name pos:start="313:24" pos:end="313:27">true</name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
