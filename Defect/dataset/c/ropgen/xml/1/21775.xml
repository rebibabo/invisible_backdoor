<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21775.c" pos:tabs="8"><function pos:start="1:1" pos:end="133:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:19">cpu_dump_state</name><parameter_list pos:start="1:20" pos:end="5:30">(<parameter pos:start="1:21" pos:end="1:33"><decl pos:start="1:21" pos:end="1:33"><type pos:start="1:21" pos:end="1:33"><name pos:start="1:21" pos:end="1:28">CPUState</name> <modifier pos:start="1:30" pos:end="1:30">*</modifier></type><name pos:start="1:31" pos:end="1:33">env</name></decl></parameter>, <parameter pos:start="1:36" pos:end="1:42"><decl pos:start="1:36" pos:end="1:42"><type pos:start="1:36" pos:end="1:42"><name pos:start="1:36" pos:end="1:39">FILE</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:42">f</name></decl></parameter>, 

                    <parameter pos:start="3:21" pos:end="3:69"><function_decl pos:start="3:21" pos:end="3:69"><type pos:start="3:21" pos:end="3:23"><name pos:start="3:21" pos:end="3:23">int</name></type> (<modifier pos:start="3:26" pos:end="3:26">*</modifier><name pos:start="3:27" pos:end="3:37">cpu_fprintf</name>)<parameter_list pos:start="3:39" pos:end="3:69">(<parameter pos:start="3:40" pos:end="3:46"><decl pos:start="3:40" pos:end="3:46"><type pos:start="3:40" pos:end="3:46"><name pos:start="3:40" pos:end="3:43">FILE</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier></type><name pos:start="3:46" pos:end="3:46">f</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:63"><decl pos:start="3:49" pos:end="3:63"><type pos:start="3:49" pos:end="3:63"><specifier pos:start="3:49" pos:end="3:53">const</specifier> <name pos:start="3:55" pos:end="3:58">char</name> <modifier pos:start="3:60" pos:end="3:60">*</modifier></type><name pos:start="3:61" pos:end="3:63">fmt</name></decl></parameter>, <parameter pos:start="3:66" pos:end="3:68"><decl pos:start="3:66" pos:end="3:68"><type pos:start="3:66" pos:end="3:68"><modifier pos:start="3:66" pos:end="3:68">...</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,

                    <parameter pos:start="5:21" pos:end="5:29"><decl pos:start="5:21" pos:end="5:29"><type pos:start="5:21" pos:end="5:29"><name pos:start="5:21" pos:end="5:23">int</name></type> <name pos:start="5:25" pos:end="5:29">flags</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="133:1">{<block_content pos:start="29:5" pos:end="132:0">

<cpp:if pos:start="9:1" pos:end="9:30">#<cpp:directive pos:start="9:2" pos:end="9:3">if</cpp:directive> <expr pos:start="9:5" pos:end="9:30"><call pos:start="9:5" pos:end="9:25"><name pos:start="9:5" pos:end="9:11">defined</name><argument_list pos:start="9:12" pos:end="9:25">(<argument pos:start="9:13" pos:end="9:24"><expr pos:start="9:13" pos:end="9:24"><name pos:start="9:13" pos:end="9:24">TARGET_PPC64</name></expr></argument>)</argument_list></call> <operator pos:start="9:27" pos:end="9:28">||</operator> <literal type="number" pos:start="9:30" pos:end="9:30">1</literal></expr></cpp:if>

<cpp:define pos:start="11:1" pos:end="11:15">#<cpp:directive pos:start="11:2" pos:end="11:7">define</cpp:directive> <cpp:macro pos:start="11:9" pos:end="11:12"><name pos:start="11:9" pos:end="11:12">FILL</name></cpp:macro> <cpp:value pos:start="11:14" pos:end="11:15">""</cpp:value></cpp:define>

<cpp:define pos:start="13:1" pos:end="13:15">#<cpp:directive pos:start="13:2" pos:end="13:7">define</cpp:directive> <cpp:macro pos:start="13:9" pos:end="13:12"><name pos:start="13:9" pos:end="13:12">RGPL</name></cpp:macro>  <cpp:value pos:start="13:15" pos:end="13:15">4</cpp:value></cpp:define>

<cpp:define pos:start="15:1" pos:end="15:15">#<cpp:directive pos:start="15:2" pos:end="15:7">define</cpp:directive> <cpp:macro pos:start="15:9" pos:end="15:12"><name pos:start="15:9" pos:end="15:12">RFPL</name></cpp:macro>  <cpp:value pos:start="15:15" pos:end="15:15">4</cpp:value></cpp:define>

<cpp:else pos:start="17:1" pos:end="17:5">#<cpp:directive pos:start="17:2" pos:end="17:5">else</cpp:directive></cpp:else>

<cpp:define pos:start="19:1" pos:end="19:23">#<cpp:directive pos:start="19:2" pos:end="19:7">define</cpp:directive> <cpp:macro pos:start="19:9" pos:end="19:12"><name pos:start="19:9" pos:end="19:12">FILL</name></cpp:macro> <cpp:value pos:start="19:14" pos:end="19:23">"        "</cpp:value></cpp:define>

<cpp:define pos:start="21:1" pos:end="21:15">#<cpp:directive pos:start="21:2" pos:end="21:7">define</cpp:directive> <cpp:macro pos:start="21:9" pos:end="21:12"><name pos:start="21:9" pos:end="21:12">RGPL</name></cpp:macro>  <cpp:value pos:start="21:15" pos:end="21:15">8</cpp:value></cpp:define>

<cpp:define pos:start="23:1" pos:end="23:15">#<cpp:directive pos:start="23:2" pos:end="23:7">define</cpp:directive> <cpp:macro pos:start="23:9" pos:end="23:12"><name pos:start="23:9" pos:end="23:12">RFPL</name></cpp:macro>  <cpp:value pos:start="23:15" pos:end="23:15">4</cpp:value></cpp:define>

<cpp:endif pos:start="25:1" pos:end="25:6">#<cpp:directive pos:start="25:2" pos:end="25:6">endif</cpp:directive></cpp:endif>



    <decl_stmt pos:start="29:5" pos:end="29:10"><decl pos:start="29:5" pos:end="29:9"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="33:5" pos:end="35:45"><expr pos:start="33:5" pos:end="35:44"><call pos:start="33:5" pos:end="35:44"><name pos:start="33:5" pos:end="33:15">cpu_fprintf</name><argument_list pos:start="33:16" pos:end="35:44">(<argument pos:start="33:17" pos:end="33:17"><expr pos:start="33:17" pos:end="33:17"><name pos:start="33:17" pos:end="33:17">f</name></expr></argument>, <argument pos:start="33:20" pos:end="33:60"><expr pos:start="33:20" pos:end="33:60"><literal type="string" pos:start="33:20" pos:end="33:25">"NIP "</literal> <name pos:start="33:27" pos:end="33:30">REGX</name> <literal type="string" pos:start="33:32" pos:end="33:37">" LR "</literal> <name pos:start="33:39" pos:end="33:42">REGX</name> <literal type="string" pos:start="33:44" pos:end="33:50">" CTR "</literal> <name pos:start="33:52" pos:end="33:55">REGX</name> <literal type="string" pos:start="33:57" pos:end="33:60">"\n"</literal></expr></argument>,

                <argument pos:start="35:17" pos:end="35:24"><expr pos:start="35:17" pos:end="35:24"><name pos:start="35:17" pos:end="35:24"><name pos:start="35:17" pos:end="35:19">env</name><operator pos:start="35:20" pos:end="35:21">-&gt;</operator><name pos:start="35:22" pos:end="35:24">nip</name></name></expr></argument>, <argument pos:start="35:27" pos:end="35:33"><expr pos:start="35:27" pos:end="35:33"><name pos:start="35:27" pos:end="35:33"><name pos:start="35:27" pos:end="35:29">env</name><operator pos:start="35:30" pos:end="35:31">-&gt;</operator><name pos:start="35:32" pos:end="35:33">lr</name></name></expr></argument>, <argument pos:start="35:36" pos:end="35:43"><expr pos:start="35:36" pos:end="35:43"><name pos:start="35:36" pos:end="35:43"><name pos:start="35:36" pos:end="35:38">env</name><operator pos:start="35:39" pos:end="35:40">-&gt;</operator><name pos:start="35:41" pos:end="35:43">ctr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro pos:start="37:5" pos:end="57:17"><name pos:start="37:5" pos:end="37:15">cpu_fprintf</name><argument_list pos:start="37:16" pos:end="57:17">(<argument pos:start="37:17" pos:end="37:17">f</argument>, <argument pos:start="37:20" pos:end="45:20"><literal type="string" pos:start="37:20" pos:end="37:25">"MSR "</literal> REGX FILL <literal type="string" pos:start="37:37" pos:end="40:0">" XER %08x      TB %08x %08x "</literal>

<cpp:if pos:start="39:1" pos:end="39:30">#<cpp:directive pos:start="39:2" pos:end="39:3">if</cpp:directive> <expr pos:start="39:5" pos:end="39:30"><operator pos:start="39:5" pos:end="39:5">!</operator><call pos:start="39:6" pos:end="39:30"><name pos:start="39:6" pos:end="39:12">defined</name><argument_list pos:start="39:13" pos:end="39:30">(<argument pos:start="39:14" pos:end="39:29"><expr pos:start="39:14" pos:end="39:29"><name pos:start="39:14" pos:end="39:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

                <literal type="string" pos:start="41:17" pos:end="44:0">"DECR %08x"</literal>

<cpp:endif pos:start="43:1" pos:end="43:6">#<cpp:directive pos:start="43:2" pos:end="43:6">endif</cpp:directive></cpp:endif>

                <literal type="string" pos:start="45:17" pos:end="45:20">"\n"</literal></argument>,

                <argument pos:start="47:17" pos:end="47:32">do_load_msr(env)</argument>, <argument pos:start="47:35" pos:end="47:47">load_xer(env)</argument>, <argument pos:start="47:50" pos:end="47:70">cpu_ppc_load_tbu(env)</argument>,

                <argument pos:start="49:17" pos:end="52:0">cpu_ppc_load_tbl(env)</argument>

<cpp:if pos:start="51:1" pos:end="51:30">#<cpp:directive pos:start="51:2" pos:end="51:3">if</cpp:directive> <expr pos:start="51:5" pos:end="51:30"><operator pos:start="51:5" pos:end="51:5">!</operator><call pos:start="51:6" pos:end="51:30"><name pos:start="51:6" pos:end="51:12">defined</name><argument_list pos:start="51:13" pos:end="51:30">(<argument pos:start="51:14" pos:end="51:29"><expr pos:start="51:14" pos:end="51:29"><name pos:start="51:14" pos:end="51:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

                , <argument pos:start="53:19" pos:end="56:0">cpu_ppc_load_decr(env)</argument>

<cpp:endif pos:start="55:1" pos:end="55:6">#<cpp:directive pos:start="55:2" pos:end="55:6">endif</cpp:directive></cpp:endif>

                )</argument_list></macro><empty_stmt pos:start="57:18" pos:end="57:18">;</empty_stmt>

    <for pos:start="59:5" pos:end="71:5">for <control pos:start="59:9" pos:end="59:28">(<init pos:start="59:10" pos:end="59:15"><expr pos:start="59:10" pos:end="59:14"><name pos:start="59:10" pos:end="59:10">i</name> <operator pos:start="59:12" pos:end="59:12">=</operator> <literal type="number" pos:start="59:14" pos:end="59:14">0</literal></expr>;</init> <condition pos:start="59:17" pos:end="59:23"><expr pos:start="59:17" pos:end="59:22"><name pos:start="59:17" pos:end="59:17">i</name> <operator pos:start="59:19" pos:end="59:19">&lt;</operator> <literal type="number" pos:start="59:21" pos:end="59:22">32</literal></expr>;</condition> <incr pos:start="59:25" pos:end="59:27"><expr pos:start="59:25" pos:end="59:27"><name pos:start="59:25" pos:end="59:25">i</name><operator pos:start="59:26" pos:end="59:27">++</operator></expr></incr>)</control> <block pos:start="59:30" pos:end="71:5">{<block_content pos:start="61:9" pos:end="69:33">

        <if_stmt pos:start="61:9" pos:end="63:41"><if pos:start="61:9" pos:end="63:41">if <condition pos:start="61:12" pos:end="61:34">(<expr pos:start="61:13" pos:end="61:33"><operator pos:start="61:13" pos:end="61:13">(</operator><name pos:start="61:14" pos:end="61:14">i</name> <operator pos:start="61:16" pos:end="61:16">&amp;</operator> <operator pos:start="61:18" pos:end="61:18">(</operator><name pos:start="61:19" pos:end="61:22">RGPL</name> <operator pos:start="61:24" pos:end="61:24">-</operator> <literal type="number" pos:start="61:26" pos:end="61:26">1</literal><operator pos:start="61:27" pos:end="61:27">)</operator><operator pos:start="61:28" pos:end="61:28">)</operator> <operator pos:start="61:30" pos:end="61:31">==</operator> <literal type="number" pos:start="61:33" pos:end="61:33">0</literal></expr>)</condition><block type="pseudo" pos:start="63:13" pos:end="63:41"><block_content pos:start="63:13" pos:end="63:41">

            <expr_stmt pos:start="63:13" pos:end="63:41"><expr pos:start="63:13" pos:end="63:40"><call pos:start="63:13" pos:end="63:40"><name pos:start="63:13" pos:end="63:23">cpu_fprintf</name><argument_list pos:start="63:24" pos:end="63:40">(<argument pos:start="63:25" pos:end="63:25"><expr pos:start="63:25" pos:end="63:25"><name pos:start="63:25" pos:end="63:25">f</name></expr></argument>, <argument pos:start="63:28" pos:end="63:36"><expr pos:start="63:28" pos:end="63:36"><literal type="string" pos:start="63:28" pos:end="63:36">"GPR%02d"</literal></expr></argument>, <argument pos:start="63:39" pos:end="63:39"><expr pos:start="63:39" pos:end="63:39"><name pos:start="63:39" pos:end="63:39">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:46"><expr pos:start="65:9" pos:end="65:45"><call pos:start="65:9" pos:end="65:45"><name pos:start="65:9" pos:end="65:19">cpu_fprintf</name><argument_list pos:start="65:20" pos:end="65:45">(<argument pos:start="65:21" pos:end="65:21"><expr pos:start="65:21" pos:end="65:21"><name pos:start="65:21" pos:end="65:21">f</name></expr></argument>, <argument pos:start="65:24" pos:end="65:31"><expr pos:start="65:24" pos:end="65:31"><literal type="string" pos:start="65:24" pos:end="65:26">" "</literal> <name pos:start="65:28" pos:end="65:31">REGX</name></expr></argument>, <argument pos:start="65:34" pos:end="65:44"><expr pos:start="65:34" pos:end="65:44"><name pos:start="65:34" pos:end="65:44"><name pos:start="65:34" pos:end="65:36">env</name><operator pos:start="65:37" pos:end="65:38">-&gt;</operator><name pos:start="65:39" pos:end="65:41">gpr</name><index pos:start="65:42" pos:end="65:44">[<expr pos:start="65:43" pos:end="65:43"><name pos:start="65:43" pos:end="65:43">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="67:9" pos:end="69:33"><if pos:start="67:9" pos:end="69:33">if <condition pos:start="67:12" pos:end="67:43">(<expr pos:start="67:13" pos:end="67:42"><operator pos:start="67:13" pos:end="67:13">(</operator><name pos:start="67:14" pos:end="67:14">i</name> <operator pos:start="67:16" pos:end="67:16">&amp;</operator> <operator pos:start="67:18" pos:end="67:18">(</operator><name pos:start="67:19" pos:end="67:22">RGPL</name> <operator pos:start="67:24" pos:end="67:24">-</operator> <literal type="number" pos:start="67:26" pos:end="67:26">1</literal><operator pos:start="67:27" pos:end="67:27">)</operator><operator pos:start="67:28" pos:end="67:28">)</operator> <operator pos:start="67:30" pos:end="67:31">==</operator> <operator pos:start="67:33" pos:end="67:33">(</operator><name pos:start="67:34" pos:end="67:37">RGPL</name> <operator pos:start="67:39" pos:end="67:39">-</operator> <literal type="number" pos:start="67:41" pos:end="67:41">1</literal><operator pos:start="67:42" pos:end="67:42">)</operator></expr>)</condition><block type="pseudo" pos:start="69:13" pos:end="69:33"><block_content pos:start="69:13" pos:end="69:33">

            <expr_stmt pos:start="69:13" pos:end="69:33"><expr pos:start="69:13" pos:end="69:32"><call pos:start="69:13" pos:end="69:32"><name pos:start="69:13" pos:end="69:23">cpu_fprintf</name><argument_list pos:start="69:24" pos:end="69:32">(<argument pos:start="69:25" pos:end="69:25"><expr pos:start="69:25" pos:end="69:25"><name pos:start="69:25" pos:end="69:25">f</name></expr></argument>, <argument pos:start="69:28" pos:end="69:31"><expr pos:start="69:28" pos:end="69:31"><literal type="string" pos:start="69:28" pos:end="69:31">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="73:5" pos:end="73:26"><expr pos:start="73:5" pos:end="73:25"><call pos:start="73:5" pos:end="73:25"><name pos:start="73:5" pos:end="73:15">cpu_fprintf</name><argument_list pos:start="73:16" pos:end="73:25">(<argument pos:start="73:17" pos:end="73:17"><expr pos:start="73:17" pos:end="73:17"><name pos:start="73:17" pos:end="73:17">f</name></expr></argument>, <argument pos:start="73:20" pos:end="73:24"><expr pos:start="73:20" pos:end="73:24"><literal type="string" pos:start="73:20" pos:end="73:24">"CR "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="75:5" pos:end="77:44">for <control pos:start="75:9" pos:end="75:27">(<init pos:start="75:10" pos:end="75:15"><expr pos:start="75:10" pos:end="75:14"><name pos:start="75:10" pos:end="75:10">i</name> <operator pos:start="75:12" pos:end="75:12">=</operator> <literal type="number" pos:start="75:14" pos:end="75:14">0</literal></expr>;</init> <condition pos:start="75:17" pos:end="75:22"><expr pos:start="75:17" pos:end="75:21"><name pos:start="75:17" pos:end="75:17">i</name> <operator pos:start="75:19" pos:end="75:19">&lt;</operator> <literal type="number" pos:start="75:21" pos:end="75:21">8</literal></expr>;</condition> <incr pos:start="75:24" pos:end="75:26"><expr pos:start="75:24" pos:end="75:26"><name pos:start="75:24" pos:end="75:24">i</name><operator pos:start="75:25" pos:end="75:26">++</operator></expr></incr>)</control><block type="pseudo" pos:start="77:9" pos:end="77:44"><block_content pos:start="77:9" pos:end="77:44">

        <expr_stmt pos:start="77:9" pos:end="77:44"><expr pos:start="77:9" pos:end="77:43"><call pos:start="77:9" pos:end="77:43"><name pos:start="77:9" pos:end="77:19">cpu_fprintf</name><argument_list pos:start="77:20" pos:end="77:43">(<argument pos:start="77:21" pos:end="77:21"><expr pos:start="77:21" pos:end="77:21"><name pos:start="77:21" pos:end="77:21">f</name></expr></argument>, <argument pos:start="77:24" pos:end="77:29"><expr pos:start="77:24" pos:end="77:29"><literal type="string" pos:start="77:24" pos:end="77:29">"%01x"</literal></expr></argument>, <argument pos:start="77:32" pos:end="77:42"><expr pos:start="77:32" pos:end="77:42"><name pos:start="77:32" pos:end="77:42"><name pos:start="77:32" pos:end="77:34">env</name><operator pos:start="77:35" pos:end="77:36">-&gt;</operator><name pos:start="77:37" pos:end="77:39">crf</name><index pos:start="77:40" pos:end="77:42">[<expr pos:start="77:41" pos:end="77:41"><name pos:start="77:41" pos:end="77:41">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <expr_stmt pos:start="79:5" pos:end="79:26"><expr pos:start="79:5" pos:end="79:25"><call pos:start="79:5" pos:end="79:25"><name pos:start="79:5" pos:end="79:15">cpu_fprintf</name><argument_list pos:start="79:16" pos:end="79:25">(<argument pos:start="79:17" pos:end="79:17"><expr pos:start="79:17" pos:end="79:17"><name pos:start="79:17" pos:end="79:17">f</name></expr></argument>, <argument pos:start="79:20" pos:end="79:24"><expr pos:start="79:20" pos:end="79:24"><literal type="string" pos:start="79:20" pos:end="79:24">"  ["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="81:5" pos:end="99:5">for <control pos:start="81:9" pos:end="81:27">(<init pos:start="81:10" pos:end="81:15"><expr pos:start="81:10" pos:end="81:14"><name pos:start="81:10" pos:end="81:10">i</name> <operator pos:start="81:12" pos:end="81:12">=</operator> <literal type="number" pos:start="81:14" pos:end="81:14">0</literal></expr>;</init> <condition pos:start="81:17" pos:end="81:22"><expr pos:start="81:17" pos:end="81:21"><name pos:start="81:17" pos:end="81:17">i</name> <operator pos:start="81:19" pos:end="81:19">&lt;</operator> <literal type="number" pos:start="81:21" pos:end="81:21">8</literal></expr>;</condition> <incr pos:start="81:24" pos:end="81:26"><expr pos:start="81:24" pos:end="81:26"><name pos:start="81:24" pos:end="81:24">i</name><operator pos:start="81:25" pos:end="81:26">++</operator></expr></incr>)</control> <block pos:start="81:29" pos:end="99:5">{<block_content pos:start="83:9" pos:end="97:67">

        <decl_stmt pos:start="83:9" pos:end="83:21"><decl pos:start="83:9" pos:end="83:20"><type pos:start="83:9" pos:end="83:12"><name pos:start="83:9" pos:end="83:12">char</name></type> <name pos:start="83:14" pos:end="83:14">a</name> <init pos:start="83:16" pos:end="83:20">= <expr pos:start="83:18" pos:end="83:20"><literal type="char" pos:start="83:18" pos:end="83:20">'-'</literal></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="85:9" pos:end="95:20"><if pos:start="85:9" pos:end="87:20">if <condition pos:start="85:12" pos:end="85:31">(<expr pos:start="85:13" pos:end="85:30"><name pos:start="85:13" pos:end="85:23"><name pos:start="85:13" pos:end="85:15">env</name><operator pos:start="85:16" pos:end="85:17">-&gt;</operator><name pos:start="85:18" pos:end="85:20">crf</name><index pos:start="85:21" pos:end="85:23">[<expr pos:start="85:22" pos:end="85:22"><name pos:start="85:22" pos:end="85:22">i</name></expr>]</index></name> <operator pos:start="85:25" pos:end="85:25">&amp;</operator> <literal type="number" pos:start="85:27" pos:end="85:30">0x08</literal></expr>)</condition><block type="pseudo" pos:start="87:13" pos:end="87:20"><block_content pos:start="87:13" pos:end="87:20">

            <expr_stmt pos:start="87:13" pos:end="87:20"><expr pos:start="87:13" pos:end="87:19"><name pos:start="87:13" pos:end="87:13">a</name> <operator pos:start="87:15" pos:end="87:15">=</operator> <literal type="char" pos:start="87:17" pos:end="87:19">'L'</literal></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="89:9" pos:end="91:20">else if <condition pos:start="89:17" pos:end="89:36">(<expr pos:start="89:18" pos:end="89:35"><name pos:start="89:18" pos:end="89:28"><name pos:start="89:18" pos:end="89:20">env</name><operator pos:start="89:21" pos:end="89:22">-&gt;</operator><name pos:start="89:23" pos:end="89:25">crf</name><index pos:start="89:26" pos:end="89:28">[<expr pos:start="89:27" pos:end="89:27"><name pos:start="89:27" pos:end="89:27">i</name></expr>]</index></name> <operator pos:start="89:30" pos:end="89:30">&amp;</operator> <literal type="number" pos:start="89:32" pos:end="89:35">0x04</literal></expr>)</condition><block type="pseudo" pos:start="91:13" pos:end="91:20"><block_content pos:start="91:13" pos:end="91:20">

            <expr_stmt pos:start="91:13" pos:end="91:20"><expr pos:start="91:13" pos:end="91:19"><name pos:start="91:13" pos:end="91:13">a</name> <operator pos:start="91:15" pos:end="91:15">=</operator> <literal type="char" pos:start="91:17" pos:end="91:19">'G'</literal></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="93:9" pos:end="95:20">else if <condition pos:start="93:17" pos:end="93:36">(<expr pos:start="93:18" pos:end="93:35"><name pos:start="93:18" pos:end="93:28"><name pos:start="93:18" pos:end="93:20">env</name><operator pos:start="93:21" pos:end="93:22">-&gt;</operator><name pos:start="93:23" pos:end="93:25">crf</name><index pos:start="93:26" pos:end="93:28">[<expr pos:start="93:27" pos:end="93:27"><name pos:start="93:27" pos:end="93:27">i</name></expr>]</index></name> <operator pos:start="93:30" pos:end="93:30">&amp;</operator> <literal type="number" pos:start="93:32" pos:end="93:35">0x02</literal></expr>)</condition><block type="pseudo" pos:start="95:13" pos:end="95:20"><block_content pos:start="95:13" pos:end="95:20">

            <expr_stmt pos:start="95:13" pos:end="95:20"><expr pos:start="95:13" pos:end="95:19"><name pos:start="95:13" pos:end="95:13">a</name> <operator pos:start="95:15" pos:end="95:15">=</operator> <literal type="char" pos:start="95:17" pos:end="95:19">'E'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:67"><expr pos:start="97:9" pos:end="97:66"><call pos:start="97:9" pos:end="97:66"><name pos:start="97:9" pos:end="97:19">cpu_fprintf</name><argument_list pos:start="97:20" pos:end="97:66">(<argument pos:start="97:21" pos:end="97:21"><expr pos:start="97:21" pos:end="97:21"><name pos:start="97:21" pos:end="97:21">f</name></expr></argument>, <argument pos:start="97:24" pos:end="97:30"><expr pos:start="97:24" pos:end="97:30"><literal type="string" pos:start="97:24" pos:end="97:30">" %c%c"</literal></expr></argument>, <argument pos:start="97:33" pos:end="97:33"><expr pos:start="97:33" pos:end="97:33"><name pos:start="97:33" pos:end="97:33">a</name></expr></argument>, <argument pos:start="97:36" pos:end="97:65"><expr pos:start="97:36" pos:end="97:65"><ternary pos:start="97:36" pos:end="97:65"><condition pos:start="97:36" pos:end="97:55"><expr pos:start="97:36" pos:end="97:53"><name pos:start="97:36" pos:end="97:46"><name pos:start="97:36" pos:end="97:38">env</name><operator pos:start="97:39" pos:end="97:40">-&gt;</operator><name pos:start="97:41" pos:end="97:43">crf</name><index pos:start="97:44" pos:end="97:46">[<expr pos:start="97:45" pos:end="97:45"><name pos:start="97:45" pos:end="97:45">i</name></expr>]</index></name> <operator pos:start="97:48" pos:end="97:48">&amp;</operator> <literal type="number" pos:start="97:50" pos:end="97:53">0x01</literal></expr> ?</condition><then pos:start="97:57" pos:end="97:59"> <expr pos:start="97:57" pos:end="97:59"><literal type="char" pos:start="97:57" pos:end="97:59">'O'</literal></expr> </then><else pos:start="97:61" pos:end="97:65">: <expr pos:start="97:63" pos:end="97:65"><literal type="char" pos:start="97:63" pos:end="97:65">' '</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="101:5" pos:end="101:74"><expr pos:start="101:5" pos:end="101:73"><call pos:start="101:5" pos:end="101:73"><name pos:start="101:5" pos:end="101:15">cpu_fprintf</name><argument_list pos:start="101:16" pos:end="101:73">(<argument pos:start="101:17" pos:end="101:17"><expr pos:start="101:17" pos:end="101:17"><name pos:start="101:17" pos:end="101:17">f</name></expr></argument>, <argument pos:start="101:20" pos:end="101:58"><expr pos:start="101:20" pos:end="101:58"><literal type="string" pos:start="101:20" pos:end="101:36">" ]             "</literal> <name pos:start="101:38" pos:end="101:41">FILL</name> <literal type="string" pos:start="101:43" pos:end="101:48">"RES "</literal> <name pos:start="101:50" pos:end="101:53">REGX</name> <literal type="string" pos:start="101:55" pos:end="101:58">"\n"</literal></expr></argument>, <argument pos:start="101:61" pos:end="101:72"><expr pos:start="101:61" pos:end="101:72"><name pos:start="101:61" pos:end="101:72"><name pos:start="101:61" pos:end="101:63">env</name><operator pos:start="101:64" pos:end="101:65">-&gt;</operator><name pos:start="101:66" pos:end="101:72">reserve</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="103:5" pos:end="115:5">for <control pos:start="103:9" pos:end="103:28">(<init pos:start="103:10" pos:end="103:15"><expr pos:start="103:10" pos:end="103:14"><name pos:start="103:10" pos:end="103:10">i</name> <operator pos:start="103:12" pos:end="103:12">=</operator> <literal type="number" pos:start="103:14" pos:end="103:14">0</literal></expr>;</init> <condition pos:start="103:17" pos:end="103:23"><expr pos:start="103:17" pos:end="103:22"><name pos:start="103:17" pos:end="103:17">i</name> <operator pos:start="103:19" pos:end="103:19">&lt;</operator> <literal type="number" pos:start="103:21" pos:end="103:22">32</literal></expr>;</condition> <incr pos:start="103:25" pos:end="103:27"><expr pos:start="103:25" pos:end="103:27"><name pos:start="103:25" pos:end="103:25">i</name><operator pos:start="103:26" pos:end="103:27">++</operator></expr></incr>)</control> <block pos:start="103:30" pos:end="115:5">{<block_content pos:start="105:9" pos:end="113:33">

        <if_stmt pos:start="105:9" pos:end="107:41"><if pos:start="105:9" pos:end="107:41">if <condition pos:start="105:12" pos:end="105:34">(<expr pos:start="105:13" pos:end="105:33"><operator pos:start="105:13" pos:end="105:13">(</operator><name pos:start="105:14" pos:end="105:14">i</name> <operator pos:start="105:16" pos:end="105:16">&amp;</operator> <operator pos:start="105:18" pos:end="105:18">(</operator><name pos:start="105:19" pos:end="105:22">RFPL</name> <operator pos:start="105:24" pos:end="105:24">-</operator> <literal type="number" pos:start="105:26" pos:end="105:26">1</literal><operator pos:start="105:27" pos:end="105:27">)</operator><operator pos:start="105:28" pos:end="105:28">)</operator> <operator pos:start="105:30" pos:end="105:31">==</operator> <literal type="number" pos:start="105:33" pos:end="105:33">0</literal></expr>)</condition><block type="pseudo" pos:start="107:13" pos:end="107:41"><block_content pos:start="107:13" pos:end="107:41">

            <expr_stmt pos:start="107:13" pos:end="107:41"><expr pos:start="107:13" pos:end="107:40"><call pos:start="107:13" pos:end="107:40"><name pos:start="107:13" pos:end="107:23">cpu_fprintf</name><argument_list pos:start="107:24" pos:end="107:40">(<argument pos:start="107:25" pos:end="107:25"><expr pos:start="107:25" pos:end="107:25"><name pos:start="107:25" pos:end="107:25">f</name></expr></argument>, <argument pos:start="107:28" pos:end="107:36"><expr pos:start="107:28" pos:end="107:36"><literal type="string" pos:start="107:28" pos:end="107:36">"FPR%02d"</literal></expr></argument>, <argument pos:start="107:39" pos:end="107:39"><expr pos:start="107:39" pos:end="107:39"><name pos:start="107:39" pos:end="107:39">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:68"><expr pos:start="109:9" pos:end="109:67"><call pos:start="109:9" pos:end="109:67"><name pos:start="109:9" pos:end="109:19">cpu_fprintf</name><argument_list pos:start="109:20" pos:end="109:67">(<argument pos:start="109:21" pos:end="109:21"><expr pos:start="109:21" pos:end="109:21"><name pos:start="109:21" pos:end="109:21">f</name></expr></argument>, <argument pos:start="109:24" pos:end="109:37"><expr pos:start="109:24" pos:end="109:37"><literal type="string" pos:start="109:24" pos:end="109:30">" %016"</literal> <name pos:start="109:32" pos:end="109:37">PRIx64</name></expr></argument>, <argument pos:start="109:40" pos:end="109:66"><expr pos:start="109:40" pos:end="109:66"><operator pos:start="109:40" pos:end="109:40">*</operator><operator pos:start="109:41" pos:end="109:41">(</operator><operator pos:start="109:42" pos:end="109:42">(</operator><name pos:start="109:43" pos:end="109:50">uint64_t</name> <operator pos:start="109:52" pos:end="109:52">*</operator><operator pos:start="109:53" pos:end="109:53">)</operator><operator pos:start="109:54" pos:end="109:54">&amp;</operator><name pos:start="109:55" pos:end="109:65"><name pos:start="109:55" pos:end="109:57">env</name><operator pos:start="109:58" pos:end="109:59">-&gt;</operator><name pos:start="109:60" pos:end="109:62">fpr</name><index pos:start="109:63" pos:end="109:65">[<expr pos:start="109:64" pos:end="109:64"><name pos:start="109:64" pos:end="109:64">i</name></expr>]</index></name><operator pos:start="109:66" pos:end="109:66">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="111:9" pos:end="113:33"><if pos:start="111:9" pos:end="113:33">if <condition pos:start="111:12" pos:end="111:43">(<expr pos:start="111:13" pos:end="111:42"><operator pos:start="111:13" pos:end="111:13">(</operator><name pos:start="111:14" pos:end="111:14">i</name> <operator pos:start="111:16" pos:end="111:16">&amp;</operator> <operator pos:start="111:18" pos:end="111:18">(</operator><name pos:start="111:19" pos:end="111:22">RFPL</name> <operator pos:start="111:24" pos:end="111:24">-</operator> <literal type="number" pos:start="111:26" pos:end="111:26">1</literal><operator pos:start="111:27" pos:end="111:27">)</operator><operator pos:start="111:28" pos:end="111:28">)</operator> <operator pos:start="111:30" pos:end="111:31">==</operator> <operator pos:start="111:33" pos:end="111:33">(</operator><name pos:start="111:34" pos:end="111:37">RFPL</name> <operator pos:start="111:39" pos:end="111:39">-</operator> <literal type="number" pos:start="111:41" pos:end="111:41">1</literal><operator pos:start="111:42" pos:end="111:42">)</operator></expr>)</condition><block type="pseudo" pos:start="113:13" pos:end="113:33"><block_content pos:start="113:13" pos:end="113:33">

            <expr_stmt pos:start="113:13" pos:end="113:33"><expr pos:start="113:13" pos:end="113:32"><call pos:start="113:13" pos:end="113:32"><name pos:start="113:13" pos:end="113:23">cpu_fprintf</name><argument_list pos:start="113:24" pos:end="113:32">(<argument pos:start="113:25" pos:end="113:25"><expr pos:start="113:25" pos:end="113:25"><name pos:start="113:25" pos:end="113:25">f</name></expr></argument>, <argument pos:start="113:28" pos:end="113:31"><expr pos:start="113:28" pos:end="113:31"><literal type="string" pos:start="113:28" pos:end="113:31">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></for>

    <macro pos:start="117:5" pos:end="121:66"><name pos:start="117:5" pos:end="117:15">cpu_fprintf</name><argument_list pos:start="117:16" pos:end="121:66">(<argument pos:start="117:17" pos:end="117:17">f</argument>, <argument pos:start="117:20" pos:end="119:33"><literal type="string" pos:start="117:20" pos:end="117:26">"SRR0 "</literal> REGX <literal type="string" pos:start="117:33" pos:end="117:40">" SRR1 "</literal> REGX <literal type="string" pos:start="117:47" pos:end="117:57">"         "</literal> FILL FILL FILL

                <literal type="string" pos:start="119:17" pos:end="119:23">"SDR1 "</literal> REGX <literal type="string" pos:start="119:30" pos:end="119:33">"\n"</literal></argument>,

                <argument pos:start="121:17" pos:end="121:34">env-&gt;spr[SPR_SRR0]</argument>, <argument pos:start="121:37" pos:end="121:54">env-&gt;spr[SPR_SRR1]</argument>, <argument pos:start="121:57" pos:end="121:65">env-&gt;sdr1</argument>)</argument_list></macro><empty_stmt pos:start="121:67" pos:end="132:0">;</empty_stmt>



<cpp:undef pos:start="125:1" pos:end="125:11">#<cpp:directive pos:start="125:2" pos:end="125:6">undef</cpp:directive> <name pos:start="125:8" pos:end="125:11">REGX</name></cpp:undef>

<cpp:undef pos:start="127:1" pos:end="127:11">#<cpp:directive pos:start="127:2" pos:end="127:6">undef</cpp:directive> <name pos:start="127:8" pos:end="127:11">RGPL</name></cpp:undef>

<cpp:undef pos:start="129:1" pos:end="129:11">#<cpp:directive pos:start="129:2" pos:end="129:6">undef</cpp:directive> <name pos:start="129:8" pos:end="129:11">RFPL</name></cpp:undef>

<cpp:undef pos:start="131:1" pos:end="131:11">#<cpp:directive pos:start="131:2" pos:end="131:6">undef</cpp:directive> <name pos:start="131:8" pos:end="131:11">FILL</name></cpp:undef>

</block_content>}</block></function>
</unit>
