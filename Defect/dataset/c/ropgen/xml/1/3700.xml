<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3700.c" pos:tabs="8"><function pos:start="1:1" pos:end="67:1"><type pos:start="1:1" pos:end="1:13"><name pos:start="1:1" pos:end="1:11">SerialState</name> <modifier pos:start="1:13" pos:end="1:13">*</modifier></type><name pos:start="1:14" pos:end="1:27">serial_mm_init</name> <parameter_list pos:start="1:29" pos:end="5:66">(<parameter pos:start="1:30" pos:end="1:52"><decl pos:start="1:30" pos:end="1:52"><type pos:start="1:30" pos:end="1:52"><name pos:start="1:30" pos:end="1:47">target_phys_addr_t</name></type> <name pos:start="1:49" pos:end="1:52">base</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:66"><decl pos:start="1:55" pos:end="1:66"><type pos:start="1:55" pos:end="1:66"><name pos:start="1:55" pos:end="1:57">int</name></type> <name pos:start="1:59" pos:end="1:66">it_shift</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:41"><decl pos:start="3:30" pos:end="3:41"><type pos:start="3:30" pos:end="3:41"><name pos:start="3:30" pos:end="3:37">qemu_irq</name></type> <name pos:start="3:39" pos:end="3:41">irq</name></decl></parameter>, <parameter pos:start="3:44" pos:end="3:55"><decl pos:start="3:44" pos:end="3:55"><type pos:start="3:44" pos:end="3:55"><name pos:start="3:44" pos:end="3:46">int</name></type> <name pos:start="3:48" pos:end="3:55">baudbase</name></decl></parameter>,

                             <parameter pos:start="5:30" pos:end="5:49"><decl pos:start="5:30" pos:end="5:49"><type pos:start="5:30" pos:end="5:49"><name pos:start="5:30" pos:end="5:44">CharDriverState</name> <modifier pos:start="5:46" pos:end="5:46">*</modifier></type><name pos:start="5:47" pos:end="5:49">chr</name></decl></parameter>, <parameter pos:start="5:52" pos:end="5:65"><decl pos:start="5:52" pos:end="5:65"><type pos:start="5:52" pos:end="5:65"><name pos:start="5:52" pos:end="5:54">int</name></type> <name pos:start="5:56" pos:end="5:65">ioregister</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="67:1">{<block_content pos:start="9:5" pos:end="65:13">

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">SerialState</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:18">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:20"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:19">s_io_memory</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:42"><expr pos:start="15:5" pos:end="15:41"><name pos:start="15:5" pos:end="15:5">s</name> <operator pos:start="15:7" pos:end="15:7">=</operator> <call pos:start="15:9" pos:end="15:41"><name pos:start="15:9" pos:end="15:20">qemu_mallocz</name><argument_list pos:start="15:21" pos:end="15:41">(<argument pos:start="15:22" pos:end="15:40"><expr pos:start="15:22" pos:end="15:40"><sizeof pos:start="15:22" pos:end="15:40">sizeof<argument_list pos:start="15:28" pos:end="15:40">(<argument pos:start="15:29" pos:end="15:39"><expr pos:start="15:29" pos:end="15:39"><name pos:start="15:29" pos:end="15:39">SerialState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="19:20"><if pos:start="17:5" pos:end="19:20">if <condition pos:start="17:8" pos:end="17:11">(<expr pos:start="17:9" pos:end="17:10"><operator pos:start="17:9" pos:end="17:9">!</operator><name pos:start="17:10" pos:end="17:10">s</name></expr>)</condition><block type="pseudo" pos:start="19:9" pos:end="19:20"><block_content pos:start="19:9" pos:end="19:20">

        <return pos:start="19:9" pos:end="19:20">return <expr pos:start="19:16" pos:end="19:19"><name pos:start="19:16" pos:end="19:19">NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:17"><expr pos:start="21:5" pos:end="21:16"><name pos:start="21:5" pos:end="21:10"><name pos:start="21:5" pos:end="21:5">s</name><operator pos:start="21:6" pos:end="21:7">-&gt;</operator><name pos:start="21:8" pos:end="21:10">irq</name></name> <operator pos:start="21:12" pos:end="21:12">=</operator> <name pos:start="21:14" pos:end="21:16">irq</name></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:19"><expr pos:start="23:5" pos:end="23:18"><name pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:5">s</name><operator pos:start="23:6" pos:end="23:7">-&gt;</operator><name pos:start="23:8" pos:end="23:11">base</name></name> <operator pos:start="23:13" pos:end="23:13">=</operator> <name pos:start="23:15" pos:end="23:18">base</name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:27"><expr pos:start="25:5" pos:end="25:26"><name pos:start="25:5" pos:end="25:15"><name pos:start="25:5" pos:end="25:5">s</name><operator pos:start="25:6" pos:end="25:7">-&gt;</operator><name pos:start="25:8" pos:end="25:15">it_shift</name></name> <operator pos:start="25:17" pos:end="25:17">=</operator> <name pos:start="25:19" pos:end="25:26">it_shift</name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:26"><expr pos:start="27:5" pos:end="27:25"><name pos:start="27:5" pos:end="27:15"><name pos:start="27:5" pos:end="27:5">s</name><operator pos:start="27:6" pos:end="27:7">-&gt;</operator><name pos:start="27:8" pos:end="27:15">baudbase</name></name><operator pos:start="27:16" pos:end="27:16">=</operator> <name pos:start="27:18" pos:end="27:25">baudbase</name></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:62"><expr pos:start="31:5" pos:end="31:61"><name pos:start="31:5" pos:end="31:15"><name pos:start="31:5" pos:end="31:5">s</name><operator pos:start="31:6" pos:end="31:7">-&gt;</operator><name pos:start="31:8" pos:end="31:15">tx_timer</name></name> <operator pos:start="31:17" pos:end="31:17">=</operator> <call pos:start="31:19" pos:end="31:61"><name pos:start="31:19" pos:end="31:32">qemu_new_timer</name><argument_list pos:start="31:33" pos:end="31:61">(<argument pos:start="31:34" pos:end="31:41"><expr pos:start="31:34" pos:end="31:41"><name pos:start="31:34" pos:end="31:41">vm_clock</name></expr></argument>, <argument pos:start="31:44" pos:end="31:57"><expr pos:start="31:44" pos:end="31:57"><name pos:start="31:44" pos:end="31:57">serial_tx_done</name></expr></argument>, <argument pos:start="31:60" pos:end="31:60"><expr pos:start="31:60" pos:end="31:60"><name pos:start="31:60" pos:end="31:60">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="35:20"><if pos:start="33:5" pos:end="35:20">if <condition pos:start="33:8" pos:end="33:21">(<expr pos:start="33:9" pos:end="33:20"><operator pos:start="33:9" pos:end="33:9">!</operator><name pos:start="33:10" pos:end="33:20"><name pos:start="33:10" pos:end="33:10">s</name><operator pos:start="33:11" pos:end="33:12">-&gt;</operator><name pos:start="33:13" pos:end="33:20">tx_timer</name></name></expr>)</condition><block type="pseudo" pos:start="35:9" pos:end="35:20"><block_content pos:start="35:9" pos:end="35:20">

        <return pos:start="35:9" pos:end="35:20">return <expr pos:start="35:16" pos:end="35:19"><name pos:start="35:16" pos:end="35:19">NULL</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:41"><expr pos:start="39:5" pos:end="39:40"><call pos:start="39:5" pos:end="39:40"><name pos:start="39:5" pos:end="39:23">qemu_register_reset</name><argument_list pos:start="39:24" pos:end="39:40">(<argument pos:start="39:25" pos:end="39:36"><expr pos:start="39:25" pos:end="39:36"><name pos:start="39:25" pos:end="39:36">serial_reset</name></expr></argument>, <argument pos:start="39:39" pos:end="39:39"><expr pos:start="39:39" pos:end="39:39"><name pos:start="39:39" pos:end="39:39">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:20"><expr pos:start="41:5" pos:end="41:19"><call pos:start="41:5" pos:end="41:19"><name pos:start="41:5" pos:end="41:16">serial_reset</name><argument_list pos:start="41:17" pos:end="41:19">(<argument pos:start="41:18" pos:end="41:18"><expr pos:start="41:18" pos:end="41:18"><name pos:start="41:18" pos:end="41:18">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:68"><expr pos:start="45:5" pos:end="45:67"><call pos:start="45:5" pos:end="45:67"><name pos:start="45:5" pos:end="45:19">register_savevm</name><argument_list pos:start="45:20" pos:end="45:67">(<argument pos:start="45:21" pos:end="45:28"><expr pos:start="45:21" pos:end="45:28"><literal type="string" pos:start="45:21" pos:end="45:28">"serial"</literal></expr></argument>, <argument pos:start="45:31" pos:end="45:34"><expr pos:start="45:31" pos:end="45:34"><name pos:start="45:31" pos:end="45:34">base</name></expr></argument>, <argument pos:start="45:37" pos:end="45:37"><expr pos:start="45:37" pos:end="45:37"><literal type="number" pos:start="45:37" pos:end="45:37">2</literal></expr></argument>, <argument pos:start="45:40" pos:end="45:50"><expr pos:start="45:40" pos:end="45:50"><name pos:start="45:40" pos:end="45:50">serial_save</name></expr></argument>, <argument pos:start="45:53" pos:end="45:63"><expr pos:start="45:53" pos:end="45:63"><name pos:start="45:53" pos:end="45:63">serial_load</name></expr></argument>, <argument pos:start="45:66" pos:end="45:66"><expr pos:start="45:66" pos:end="45:66"><name pos:start="45:66" pos:end="45:66">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="49:5" pos:end="57:5"><if pos:start="49:5" pos:end="57:5">if <condition pos:start="49:8" pos:end="49:19">(<expr pos:start="49:9" pos:end="49:18"><name pos:start="49:9" pos:end="49:18">ioregister</name></expr>)</condition> <block pos:start="49:21" pos:end="57:5">{<block_content pos:start="51:9" pos:end="55:71">

        <expr_stmt pos:start="51:9" pos:end="53:65"><expr pos:start="51:9" pos:end="53:64"><name pos:start="51:9" pos:end="51:19">s_io_memory</name> <operator pos:start="51:21" pos:end="51:21">=</operator> <call pos:start="51:23" pos:end="53:64"><name pos:start="51:23" pos:end="51:44">cpu_register_io_memory</name><argument_list pos:start="51:45" pos:end="53:64">(<argument pos:start="51:46" pos:end="51:46"><expr pos:start="51:46" pos:end="51:46"><literal type="number" pos:start="51:46" pos:end="51:46">0</literal></expr></argument>, <argument pos:start="51:49" pos:end="51:62"><expr pos:start="51:49" pos:end="51:62"><name pos:start="51:49" pos:end="51:62">serial_mm_read</name></expr></argument>,

                                             <argument pos:start="53:46" pos:end="53:60"><expr pos:start="53:46" pos:end="53:60"><name pos:start="53:46" pos:end="53:60">serial_mm_write</name></expr></argument>, <argument pos:start="53:63" pos:end="53:63"><expr pos:start="53:63" pos:end="53:63"><name pos:start="53:63" pos:end="53:63">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:71"><expr pos:start="55:9" pos:end="55:70"><call pos:start="55:9" pos:end="55:70"><name pos:start="55:9" pos:end="55:36">cpu_register_physical_memory</name><argument_list pos:start="55:37" pos:end="55:70">(<argument pos:start="55:38" pos:end="55:41"><expr pos:start="55:38" pos:end="55:41"><name pos:start="55:38" pos:end="55:41">base</name></expr></argument>, <argument pos:start="55:44" pos:end="55:56"><expr pos:start="55:44" pos:end="55:56"><literal type="number" pos:start="55:44" pos:end="55:44">8</literal> <operator pos:start="55:46" pos:end="55:47">&lt;&lt;</operator> <name pos:start="55:49" pos:end="55:56">it_shift</name></expr></argument>, <argument pos:start="55:59" pos:end="55:69"><expr pos:start="55:59" pos:end="55:69"><name pos:start="55:59" pos:end="55:69">s_io_memory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:17"><expr pos:start="59:5" pos:end="59:16"><name pos:start="59:5" pos:end="59:10"><name pos:start="59:5" pos:end="59:5">s</name><operator pos:start="59:6" pos:end="59:7">-&gt;</operator><name pos:start="59:8" pos:end="59:10">chr</name></name> <operator pos:start="59:12" pos:end="59:12">=</operator> <name pos:start="59:14" pos:end="59:16">chr</name></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="63:43"><expr pos:start="61:5" pos:end="63:42"><call pos:start="61:5" pos:end="63:42"><name pos:start="61:5" pos:end="61:25">qemu_chr_add_handlers</name><argument_list pos:start="61:26" pos:end="63:42">(<argument pos:start="61:27" pos:end="61:29"><expr pos:start="61:27" pos:end="61:29"><name pos:start="61:27" pos:end="61:29">chr</name></expr></argument>, <argument pos:start="61:32" pos:end="61:50"><expr pos:start="61:32" pos:end="61:50"><name pos:start="61:32" pos:end="61:50">serial_can_receive1</name></expr></argument>, <argument pos:start="61:53" pos:end="61:67"><expr pos:start="61:53" pos:end="61:67"><name pos:start="61:53" pos:end="61:67">serial_receive1</name></expr></argument>,

                          <argument pos:start="63:27" pos:end="63:38"><expr pos:start="63:27" pos:end="63:38"><name pos:start="63:27" pos:end="63:38">serial_event</name></expr></argument>, <argument pos:start="63:41" pos:end="63:41"><expr pos:start="63:41" pos:end="63:41"><name pos:start="63:41" pos:end="63:41">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="65:5" pos:end="65:13">return <expr pos:start="65:12" pos:end="65:12"><name pos:start="65:12" pos:end="65:12">s</name></expr>;</return>

</block_content>}</block></function>
</unit>
