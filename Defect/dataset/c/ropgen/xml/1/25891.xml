<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25891.c" pos:tabs="8"><function pos:start="1:1" pos:end="75:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">test_primitives</name><parameter_list pos:start="1:28" pos:end="1:49">(<parameter pos:start="1:29" pos:end="1:48"><decl pos:start="1:29" pos:end="1:48"><type pos:start="1:29" pos:end="1:41"><name pos:start="1:29" pos:end="1:41">gconstpointer</name></type> <name pos:start="1:43" pos:end="1:48">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="75:1">{<block_content pos:start="5:5" pos:end="73:20">

    <decl_stmt pos:start="5:5" pos:end="5:41"><decl pos:start="5:5" pos:end="5:40"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">TestArgs</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:18">args</name> <init pos:start="5:20" pos:end="5:40">= <expr pos:start="5:22" pos:end="5:40"><operator pos:start="5:22" pos:end="5:22">(</operator><name pos:start="5:23" pos:end="5:30">TestArgs</name> <operator pos:start="5:32" pos:end="5:32">*</operator><operator pos:start="5:33" pos:end="5:33">)</operator> <name pos:start="5:35" pos:end="5:40">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:40"><decl pos:start="7:5" pos:end="7:39"><type pos:start="7:5" pos:end="7:24"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:22">SerializeOps</name> <modifier pos:start="7:24" pos:end="7:24">*</modifier></type><name pos:start="7:25" pos:end="7:27">ops</name> <init pos:start="7:29" pos:end="7:39">= <expr pos:start="7:31" pos:end="7:39"><name pos:start="7:31" pos:end="7:39"><name pos:start="7:31" pos:end="7:34">args</name><operator pos:start="7:35" pos:end="7:36">-&gt;</operator><name pos:start="7:37" pos:end="7:39">ops</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:40"><decl pos:start="9:5" pos:end="9:39"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">PrimitiveType</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:21">pt</name> <init pos:start="9:23" pos:end="9:39">= <expr pos:start="9:25" pos:end="9:39"><name pos:start="9:25" pos:end="9:39"><name pos:start="9:25" pos:end="9:28">args</name><operator pos:start="9:29" pos:end="9:30">-&gt;</operator><name pos:start="9:31" pos:end="9:39">test_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:57"><decl pos:start="11:5" pos:end="11:56"><type pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:17">PrimitiveType</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:26">pt_copy</name> <init pos:start="11:28" pos:end="11:56">= <expr pos:start="11:30" pos:end="11:56"><call pos:start="11:30" pos:end="11:56"><name pos:start="11:30" pos:end="11:38">g_malloc0</name><argument_list pos:start="11:39" pos:end="11:56">(<argument pos:start="11:40" pos:end="11:55"><expr pos:start="11:40" pos:end="11:55"><sizeof pos:start="11:40" pos:end="11:55">sizeof<argument_list pos:start="11:46" pos:end="11:55">(<argument pos:start="11:47" pos:end="11:54"><expr pos:start="11:47" pos:end="11:54"><operator pos:start="11:47" pos:end="11:47">*</operator><name pos:start="11:48" pos:end="11:54">pt_copy</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:9">Error</name> <modifier pos:start="13:11" pos:end="13:11">*</modifier></type><name pos:start="13:12" pos:end="13:14">err</name> <init pos:start="13:16" pos:end="13:21">= <expr pos:start="13:18" pos:end="13:21"><name pos:start="13:18" pos:end="13:21">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:25"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">void</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:24">serialize_data</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:28"><decl pos:start="17:5" pos:end="17:17"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:8">char</name> <modifier pos:start="17:10" pos:end="17:10">*</modifier></type><name pos:start="17:11" pos:end="17:17">double1</name></decl>, <decl pos:start="17:20" pos:end="17:27"><type ref="prev" pos:start="17:5" pos:end="17:10"><modifier pos:start="17:20" pos:end="17:20">*</modifier></type><name pos:start="17:21" pos:end="17:27">double2</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:29"><expr pos:start="21:5" pos:end="21:28"><name pos:start="21:5" pos:end="21:17"><name pos:start="21:5" pos:end="21:11">pt_copy</name><operator pos:start="21:12" pos:end="21:13">-&gt;</operator><name pos:start="21:14" pos:end="21:17">type</name></name> <operator pos:start="21:19" pos:end="21:19">=</operator> <name pos:start="21:21" pos:end="21:28"><name pos:start="21:21" pos:end="21:22">pt</name><operator pos:start="21:23" pos:end="21:24">-&gt;</operator><name pos:start="21:25" pos:end="21:28">type</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:68"><expr pos:start="23:5" pos:end="23:67"><call pos:start="23:5" pos:end="23:67"><name pos:start="23:5" pos:end="23:18"><name pos:start="23:5" pos:end="23:7">ops</name><operator pos:start="23:8" pos:end="23:9">-&gt;</operator><name pos:start="23:10" pos:end="23:18">serialize</name></name><argument_list pos:start="23:19" pos:end="23:67">(<argument pos:start="23:20" pos:end="23:21"><expr pos:start="23:20" pos:end="23:21"><name pos:start="23:20" pos:end="23:21">pt</name></expr></argument>, <argument pos:start="23:24" pos:end="23:38"><expr pos:start="23:24" pos:end="23:38"><operator pos:start="23:24" pos:end="23:24">&amp;</operator><name pos:start="23:25" pos:end="23:38">serialize_data</name></expr></argument>, <argument pos:start="23:41" pos:end="23:60"><expr pos:start="23:41" pos:end="23:60"><name pos:start="23:41" pos:end="23:60">visit_primitive_type</name></expr></argument>, <argument pos:start="23:63" pos:end="23:66"><expr pos:start="23:63" pos:end="23:66"><operator pos:start="23:63" pos:end="23:63">&amp;</operator><name pos:start="23:64" pos:end="23:66">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:84"><expr pos:start="25:5" pos:end="25:83"><call pos:start="25:5" pos:end="25:83"><name pos:start="25:5" pos:end="25:20"><name pos:start="25:5" pos:end="25:7">ops</name><operator pos:start="25:8" pos:end="25:9">-&gt;</operator><name pos:start="25:10" pos:end="25:20">deserialize</name></name><argument_list pos:start="25:21" pos:end="25:83">(<argument pos:start="25:22" pos:end="25:38"><expr pos:start="25:22" pos:end="25:38"><operator pos:start="25:22" pos:end="25:22">(</operator><name pos:start="25:23" pos:end="25:26">void</name> <operator pos:start="25:28" pos:end="25:28">*</operator><operator pos:start="25:29" pos:end="25:29">*</operator><operator pos:start="25:30" pos:end="25:30">)</operator><operator pos:start="25:31" pos:end="25:31">&amp;</operator><name pos:start="25:32" pos:end="25:38">pt_copy</name></expr></argument>, <argument pos:start="25:41" pos:end="25:54"><expr pos:start="25:41" pos:end="25:54"><name pos:start="25:41" pos:end="25:54">serialize_data</name></expr></argument>, <argument pos:start="25:57" pos:end="25:76"><expr pos:start="25:57" pos:end="25:76"><name pos:start="25:57" pos:end="25:76">visit_primitive_type</name></expr></argument>, <argument pos:start="25:79" pos:end="25:82"><expr pos:start="25:79" pos:end="25:82"><operator pos:start="25:79" pos:end="25:79">&amp;</operator><name pos:start="25:80" pos:end="25:82">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:26"><expr pos:start="29:5" pos:end="29:25"><call pos:start="29:5" pos:end="29:25"><name pos:start="29:5" pos:end="29:12">g_assert</name><argument_list pos:start="29:13" pos:end="29:25">(<argument pos:start="29:14" pos:end="29:24"><expr pos:start="29:14" pos:end="29:24"><name pos:start="29:14" pos:end="29:16">err</name> <operator pos:start="29:18" pos:end="29:19">==</operator> <name pos:start="29:21" pos:end="29:24">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:30"><expr pos:start="31:5" pos:end="31:29"><call pos:start="31:5" pos:end="31:29"><name pos:start="31:5" pos:end="31:12">g_assert</name><argument_list pos:start="31:13" pos:end="31:29">(<argument pos:start="31:14" pos:end="31:28"><expr pos:start="31:14" pos:end="31:28"><name pos:start="31:14" pos:end="31:20">pt_copy</name> <operator pos:start="31:22" pos:end="31:23">!=</operator> <name pos:start="31:25" pos:end="31:28">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="65:5"><if pos:start="33:5" pos:end="39:5">if <condition pos:start="33:8" pos:end="33:33">(<expr pos:start="33:9" pos:end="33:32"><name pos:start="33:9" pos:end="33:16"><name pos:start="33:9" pos:end="33:10">pt</name><operator pos:start="33:11" pos:end="33:12">-&gt;</operator><name pos:start="33:13" pos:end="33:16">type</name></name> <operator pos:start="33:18" pos:end="33:19">==</operator> <name pos:start="33:21" pos:end="33:32">PTYPE_STRING</name></expr>)</condition> <block pos:start="33:35" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:46">

        <expr_stmt pos:start="35:9" pos:end="35:69"><expr pos:start="35:9" pos:end="35:68"><call pos:start="35:9" pos:end="35:68"><name pos:start="35:9" pos:end="35:23">g_assert_cmpstr</name><argument_list pos:start="35:24" pos:end="35:68">(<argument pos:start="35:25" pos:end="35:40"><expr pos:start="35:25" pos:end="35:40"><name pos:start="35:25" pos:end="35:40"><name pos:start="35:25" pos:end="35:26">pt</name><operator pos:start="35:27" pos:end="35:28">-&gt;</operator><name pos:start="35:29" pos:end="35:33">value</name><operator pos:start="35:34" pos:end="35:34">.</operator><name pos:start="35:35" pos:end="35:40">string</name></name></expr></argument>, <argument pos:start="35:43" pos:end="35:44"><expr pos:start="35:43" pos:end="35:44"><operator pos:start="35:43" pos:end="35:44">==</operator></expr></argument>, <argument pos:start="35:47" pos:end="35:67"><expr pos:start="35:47" pos:end="35:67"><name pos:start="35:47" pos:end="35:67"><name pos:start="35:47" pos:end="35:53">pt_copy</name><operator pos:start="35:54" pos:end="35:55">-&gt;</operator><name pos:start="35:56" pos:end="35:60">value</name><operator pos:start="35:61" pos:end="35:61">.</operator><name pos:start="35:62" pos:end="35:67">string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:46"><expr pos:start="37:9" pos:end="37:45"><call pos:start="37:9" pos:end="37:45"><name pos:start="37:9" pos:end="37:14">g_free</name><argument_list pos:start="37:15" pos:end="37:45">(<argument pos:start="37:16" pos:end="37:44"><expr pos:start="37:16" pos:end="37:44"><operator pos:start="37:16" pos:end="37:16">(</operator><name pos:start="37:17" pos:end="37:20">char</name> <operator pos:start="37:22" pos:end="37:22">*</operator><operator pos:start="37:23" pos:end="37:23">)</operator><name pos:start="37:24" pos:end="37:44"><name pos:start="37:24" pos:end="37:30">pt_copy</name><operator pos:start="37:31" pos:end="37:32">-&gt;</operator><name pos:start="37:33" pos:end="37:37">value</name><operator pos:start="37:38" pos:end="37:38">.</operator><name pos:start="37:39" pos:end="37:44">string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="39:7" pos:end="57:5">else if <condition pos:start="39:15" pos:end="39:40">(<expr pos:start="39:16" pos:end="39:39"><name pos:start="39:16" pos:end="39:23"><name pos:start="39:16" pos:end="39:17">pt</name><operator pos:start="39:18" pos:end="39:19">-&gt;</operator><name pos:start="39:20" pos:end="39:23">type</name></name> <operator pos:start="39:25" pos:end="39:26">==</operator> <name pos:start="39:28" pos:end="39:39">PTYPE_NUMBER</name></expr>)</condition> <block pos:start="39:42" pos:end="57:5">{<block_content pos:start="47:9" pos:end="55:24">

        <comment type="block" pos:start="41:9" pos:end="45:11">/* we serialize with %f for our reference visitors, so rather than fuzzy

         * floating math to test "equality", just compare the formatted values

         */</comment>

        <expr_stmt pos:start="47:9" pos:end="47:73"><expr pos:start="47:9" pos:end="47:72"><name pos:start="47:9" pos:end="47:15">double1</name> <operator pos:start="47:17" pos:end="47:17">=</operator> <call pos:start="47:19" pos:end="47:72"><name pos:start="47:19" pos:end="47:27">g_malloc0</name><argument_list pos:start="47:28" pos:end="47:72">(<argument pos:start="47:29" pos:end="47:71"><expr pos:start="47:29" pos:end="47:71"><call pos:start="47:29" pos:end="47:71"><name pos:start="47:29" pos:end="47:53">calc_float_string_storage</name><argument_list pos:start="47:54" pos:end="47:71">(<argument pos:start="47:55" pos:end="47:70"><expr pos:start="47:55" pos:end="47:70"><name pos:start="47:55" pos:end="47:70"><name pos:start="47:55" pos:end="47:56">pt</name><operator pos:start="47:57" pos:end="47:58">-&gt;</operator><name pos:start="47:59" pos:end="47:63">value</name><operator pos:start="47:64" pos:end="47:64">.</operator><name pos:start="47:65" pos:end="47:70">number</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:78"><expr pos:start="49:9" pos:end="49:77"><name pos:start="49:9" pos:end="49:15">double2</name> <operator pos:start="49:17" pos:end="49:17">=</operator> <call pos:start="49:19" pos:end="49:77"><name pos:start="49:19" pos:end="49:27">g_malloc0</name><argument_list pos:start="49:28" pos:end="49:77">(<argument pos:start="49:29" pos:end="49:76"><expr pos:start="49:29" pos:end="49:76"><call pos:start="49:29" pos:end="49:76"><name pos:start="49:29" pos:end="49:53">calc_float_string_storage</name><argument_list pos:start="49:54" pos:end="49:76">(<argument pos:start="49:55" pos:end="49:75"><expr pos:start="49:55" pos:end="49:75"><name pos:start="49:55" pos:end="49:75"><name pos:start="49:55" pos:end="49:61">pt_copy</name><operator pos:start="49:62" pos:end="49:63">-&gt;</operator><name pos:start="49:64" pos:end="49:68">value</name><operator pos:start="49:69" pos:end="49:69">.</operator><name pos:start="49:70" pos:end="49:75">number</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:46"><expr pos:start="51:9" pos:end="51:45"><call pos:start="51:9" pos:end="51:45"><name pos:start="51:9" pos:end="51:23">g_assert_cmpstr</name><argument_list pos:start="51:24" pos:end="51:45">(<argument pos:start="51:25" pos:end="51:31"><expr pos:start="51:25" pos:end="51:31"><name pos:start="51:25" pos:end="51:31">double1</name></expr></argument>, <argument pos:start="51:34" pos:end="51:35"><expr pos:start="51:34" pos:end="51:35"><operator pos:start="51:34" pos:end="51:35">==</operator></expr></argument>, <argument pos:start="51:38" pos:end="51:44"><expr pos:start="51:38" pos:end="51:44"><name pos:start="51:38" pos:end="51:44">double2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:24"><expr pos:start="53:9" pos:end="53:23"><call pos:start="53:9" pos:end="53:23"><name pos:start="53:9" pos:end="53:14">g_free</name><argument_list pos:start="53:15" pos:end="53:23">(<argument pos:start="53:16" pos:end="53:22"><expr pos:start="53:16" pos:end="53:22"><name pos:start="53:16" pos:end="53:22">double1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:24"><expr pos:start="55:9" pos:end="55:23"><call pos:start="55:9" pos:end="55:23"><name pos:start="55:9" pos:end="55:14">g_free</name><argument_list pos:start="55:15" pos:end="55:23">(<argument pos:start="55:16" pos:end="55:22"><expr pos:start="55:16" pos:end="55:22"><name pos:start="55:16" pos:end="55:22">double2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="57:7" pos:end="61:5">else if <condition pos:start="57:15" pos:end="57:41">(<expr pos:start="57:16" pos:end="57:40"><name pos:start="57:16" pos:end="57:23"><name pos:start="57:16" pos:end="57:17">pt</name><operator pos:start="57:18" pos:end="57:19">-&gt;</operator><name pos:start="57:20" pos:end="57:23">type</name></name> <operator pos:start="57:25" pos:end="57:26">==</operator> <name pos:start="57:28" pos:end="57:40">PTYPE_BOOLEAN</name></expr>)</condition> <block pos:start="57:43" pos:end="61:5">{<block_content pos:start="59:9" pos:end="59:62">

        <expr_stmt pos:start="59:9" pos:end="59:62"><expr pos:start="59:9" pos:end="59:61"><call pos:start="59:9" pos:end="59:61"><name pos:start="59:9" pos:end="59:23">g_assert_cmpint</name><argument_list pos:start="59:24" pos:end="59:61">(<argument pos:start="59:25" pos:end="59:39"><expr pos:start="59:25" pos:end="59:39"><operator pos:start="59:25" pos:end="59:25">!</operator><operator pos:start="59:26" pos:end="59:26">!</operator><name pos:start="59:27" pos:end="59:39"><name pos:start="59:27" pos:end="59:28">pt</name><operator pos:start="59:29" pos:end="59:30">-&gt;</operator><name pos:start="59:31" pos:end="59:35">value</name><operator pos:start="59:36" pos:end="59:36">.</operator><name pos:start="59:37" pos:end="59:39">max</name></name></expr></argument>, <argument pos:start="59:42" pos:end="59:43"><expr pos:start="59:42" pos:end="59:43"><operator pos:start="59:42" pos:end="59:43">==</operator></expr></argument>, <argument pos:start="59:46" pos:end="59:60"><expr pos:start="59:46" pos:end="59:60"><operator pos:start="59:46" pos:end="59:46">!</operator><operator pos:start="59:47" pos:end="59:47">!</operator><name pos:start="59:48" pos:end="59:60"><name pos:start="59:48" pos:end="59:49">pt</name><operator pos:start="59:50" pos:end="59:51">-&gt;</operator><name pos:start="59:52" pos:end="59:56">value</name><operator pos:start="59:57" pos:end="59:57">.</operator><name pos:start="59:58" pos:end="59:60">max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="61:7" pos:end="65:5">else <block pos:start="61:12" pos:end="65:5">{<block_content pos:start="63:9" pos:end="63:63">

        <expr_stmt pos:start="63:9" pos:end="63:63"><expr pos:start="63:9" pos:end="63:62"><call pos:start="63:9" pos:end="63:62"><name pos:start="63:9" pos:end="63:23">g_assert_cmpint</name><argument_list pos:start="63:24" pos:end="63:62">(<argument pos:start="63:25" pos:end="63:37"><expr pos:start="63:25" pos:end="63:37"><name pos:start="63:25" pos:end="63:37"><name pos:start="63:25" pos:end="63:26">pt</name><operator pos:start="63:27" pos:end="63:28">-&gt;</operator><name pos:start="63:29" pos:end="63:33">value</name><operator pos:start="63:34" pos:end="63:34">.</operator><name pos:start="63:35" pos:end="63:37">max</name></name></expr></argument>, <argument pos:start="63:40" pos:end="63:41"><expr pos:start="63:40" pos:end="63:41"><operator pos:start="63:40" pos:end="63:41">==</operator></expr></argument>, <argument pos:start="63:44" pos:end="63:61"><expr pos:start="63:44" pos:end="63:61"><name pos:start="63:44" pos:end="63:61"><name pos:start="63:44" pos:end="63:50">pt_copy</name><operator pos:start="63:51" pos:end="63:52">-&gt;</operator><name pos:start="63:53" pos:end="63:57">value</name><operator pos:start="63:58" pos:end="63:58">.</operator><name pos:start="63:59" pos:end="63:61">max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:33"><expr pos:start="69:5" pos:end="69:32"><call pos:start="69:5" pos:end="69:32"><name pos:start="69:5" pos:end="69:16"><name pos:start="69:5" pos:end="69:7">ops</name><operator pos:start="69:8" pos:end="69:9">-&gt;</operator><name pos:start="69:10" pos:end="69:16">cleanup</name></name><argument_list pos:start="69:17" pos:end="69:32">(<argument pos:start="69:18" pos:end="69:31"><expr pos:start="69:18" pos:end="69:31"><name pos:start="69:18" pos:end="69:31">serialize_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:17"><expr pos:start="71:5" pos:end="71:16"><call pos:start="71:5" pos:end="71:16"><name pos:start="71:5" pos:end="71:10">g_free</name><argument_list pos:start="71:11" pos:end="71:16">(<argument pos:start="71:12" pos:end="71:15"><expr pos:start="71:12" pos:end="71:15"><name pos:start="71:12" pos:end="71:15">args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:20"><expr pos:start="73:5" pos:end="73:19"><call pos:start="73:5" pos:end="73:19"><name pos:start="73:5" pos:end="73:10">g_free</name><argument_list pos:start="73:11" pos:end="73:19">(<argument pos:start="73:12" pos:end="73:18"><expr pos:start="73:12" pos:end="73:18"><name pos:start="73:12" pos:end="73:18">pt_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
