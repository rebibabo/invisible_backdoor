<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/942.c" pos:tabs="8"><function pos:start="1:1" pos:end="589:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:32">process_ipmovie_chunk</name><parameter_list pos:start="1:33" pos:end="3:18">(<parameter pos:start="1:34" pos:end="1:48"><decl pos:start="1:34" pos:end="1:48"><type pos:start="1:34" pos:end="1:48"><name pos:start="1:34" pos:end="1:45">IPMVEContext</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:48">s</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:67"><decl pos:start="1:51" pos:end="1:67"><type pos:start="1:51" pos:end="1:67"><name pos:start="1:51" pos:end="1:63">ByteIOContext</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:67">pb</name></decl></parameter>,

    <parameter pos:start="3:5" pos:end="3:17"><decl pos:start="3:5" pos:end="3:17"><type pos:start="3:5" pos:end="3:17"><name pos:start="3:5" pos:end="3:12">AVPacket</name> <modifier pos:start="3:14" pos:end="3:14">*</modifier></type><name pos:start="3:15" pos:end="3:17">pkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="589:1">{<block_content pos:start="7:5" pos:end="587:22">

    <decl_stmt pos:start="7:5" pos:end="7:54"><decl pos:start="7:5" pos:end="7:53"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:12">unsigned</name> <name pos:start="7:14" pos:end="7:17">char</name></type> <name pos:start="7:19" pos:end="7:53"><name pos:start="7:19" pos:end="7:32">chunk_preamble</name><index pos:start="7:33" pos:end="7:53">[<expr pos:start="7:34" pos:end="7:52"><name pos:start="7:34" pos:end="7:52">CHUNK_PREAMBLE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:18">chunk_type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:18">chunk_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:56"><decl pos:start="13:5" pos:end="13:55"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:12">unsigned</name> <name pos:start="13:14" pos:end="13:17">char</name></type> <name pos:start="13:19" pos:end="13:55"><name pos:start="13:19" pos:end="13:33">opcode_preamble</name><index pos:start="13:34" pos:end="13:55">[<expr pos:start="13:35" pos:end="13:54"><name pos:start="13:35" pos:end="13:54">OPCODE_PREAMBLE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:30"><decl pos:start="15:5" pos:end="15:29"><type pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:12">unsigned</name> <name pos:start="15:14" pos:end="15:17">char</name></type> <name pos:start="15:19" pos:end="15:29">opcode_type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:33"><decl pos:start="17:5" pos:end="17:32"><type pos:start="17:5" pos:end="17:17"><name pos:start="17:5" pos:end="17:12">unsigned</name> <name pos:start="17:14" pos:end="17:17">char</name></type> <name pos:start="17:19" pos:end="17:32">opcode_version</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:20"><decl pos:start="19:5" pos:end="19:19"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:19">opcode_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:32"><decl pos:start="21:5" pos:end="21:31"><type pos:start="21:5" pos:end="21:17"><name pos:start="21:5" pos:end="21:12">unsigned</name> <name pos:start="21:14" pos:end="21:17">char</name></type> <name pos:start="21:19" pos:end="21:31"><name pos:start="21:19" pos:end="21:25">scratch</name><index pos:start="21:26" pos:end="21:31">[<expr pos:start="21:27" pos:end="21:30"><literal type="number" pos:start="21:27" pos:end="21:30">1024</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:13"><decl pos:start="23:5" pos:end="23:9"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:9">i</name></decl>, <decl pos:start="23:12" pos:end="23:12"><type ref="prev" pos:start="23:5" pos:end="23:7"/><name pos:start="23:12" pos:end="23:12">j</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:32"><decl pos:start="25:5" pos:end="25:19"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:19">first_color</name></decl>, <decl pos:start="25:22" pos:end="25:31"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:22" pos:end="25:31">last_color</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:20"><decl pos:start="27:5" pos:end="27:19"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:19">audio_flags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:26"><decl pos:start="29:5" pos:end="29:19"><type pos:start="29:5" pos:end="29:17"><name pos:start="29:5" pos:end="29:12">unsigned</name> <name pos:start="29:14" pos:end="29:17">char</name></type> <name pos:start="29:19" pos:end="29:19">r</name></decl>, <decl pos:start="29:22" pos:end="29:22"><type ref="prev" pos:start="29:5" pos:end="29:17"/><name pos:start="29:22" pos:end="29:22">g</name></decl>, <decl pos:start="29:25" pos:end="29:25"><type ref="prev" pos:start="29:5" pos:end="29:17"/><name pos:start="29:25" pos:end="29:25">b</name></decl>;</decl_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:46">/* see if there are any pending packets */</comment>

    <expr_stmt pos:start="35:5" pos:end="35:49"><expr pos:start="35:5" pos:end="35:48"><name pos:start="35:5" pos:end="35:14">chunk_type</name> <operator pos:start="35:16" pos:end="35:16">=</operator> <call pos:start="35:18" pos:end="35:48"><name pos:start="35:18" pos:end="35:36">load_ipmovie_packet</name><argument_list pos:start="35:37" pos:end="35:48">(<argument pos:start="35:38" pos:end="35:38"><expr pos:start="35:38" pos:end="35:38"><name pos:start="35:38" pos:end="35:38">s</name></expr></argument>, <argument pos:start="35:41" pos:end="35:42"><expr pos:start="35:41" pos:end="35:42"><name pos:start="35:41" pos:end="35:42">pb</name></expr></argument>, <argument pos:start="35:45" pos:end="35:47"><expr pos:start="35:45" pos:end="35:47"><name pos:start="35:45" pos:end="35:47">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="39:26"><if pos:start="37:5" pos:end="39:26">if <condition pos:start="37:8" pos:end="37:66">(<expr pos:start="37:9" pos:end="37:65"><operator pos:start="37:9" pos:end="37:9">(</operator><name pos:start="37:10" pos:end="37:19">chunk_type</name> <operator pos:start="37:21" pos:end="37:22">==</operator> <name pos:start="37:24" pos:end="37:34">CHUNK_VIDEO</name><operator pos:start="37:35" pos:end="37:35">)</operator> <operator pos:start="37:37" pos:end="37:38">&amp;&amp;</operator> <operator pos:start="37:40" pos:end="37:40">(</operator><name pos:start="37:41" pos:end="37:50">chunk_type</name> <operator pos:start="37:52" pos:end="37:53">!=</operator> <name pos:start="37:55" pos:end="37:64">CHUNK_DONE</name><operator pos:start="37:65" pos:end="37:65">)</operator></expr>)</condition><block type="pseudo" pos:start="39:9" pos:end="39:26"><block_content pos:start="39:9" pos:end="39:26">

        <return pos:start="39:9" pos:end="39:26">return <expr pos:start="39:16" pos:end="39:25"><name pos:start="39:16" pos:end="39:25">chunk_type</name></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="43:5" pos:end="43:71">/* read the next chunk, wherever the file happens to be pointing */</comment>

    <if_stmt pos:start="45:5" pos:end="47:25"><if pos:start="45:5" pos:end="47:25">if <condition pos:start="45:8" pos:end="45:21">(<expr pos:start="45:9" pos:end="45:20"><call pos:start="45:9" pos:end="45:20"><name pos:start="45:9" pos:end="45:16">url_feof</name><argument_list pos:start="45:17" pos:end="45:20">(<argument pos:start="45:18" pos:end="45:19"><expr pos:start="45:18" pos:end="45:19"><name pos:start="45:18" pos:end="45:19">pb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="47:9" pos:end="47:25"><block_content pos:start="47:9" pos:end="47:25">

        <return pos:start="47:9" pos:end="47:25">return <expr pos:start="47:16" pos:end="47:24"><name pos:start="47:16" pos:end="47:24">CHUNK_EOF</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="49:5" pos:end="53:25"><if pos:start="49:5" pos:end="53:25">if <condition pos:start="49:8" pos:end="51:28">(<expr pos:start="49:9" pos:end="51:27"><call pos:start="49:9" pos:end="49:59"><name pos:start="49:9" pos:end="49:18">get_buffer</name><argument_list pos:start="49:19" pos:end="49:59">(<argument pos:start="49:20" pos:end="49:21"><expr pos:start="49:20" pos:end="49:21"><name pos:start="49:20" pos:end="49:21">pb</name></expr></argument>, <argument pos:start="49:24" pos:end="49:37"><expr pos:start="49:24" pos:end="49:37"><name pos:start="49:24" pos:end="49:37">chunk_preamble</name></expr></argument>, <argument pos:start="49:40" pos:end="49:58"><expr pos:start="49:40" pos:end="49:58"><name pos:start="49:40" pos:end="49:58">CHUNK_PREAMBLE_SIZE</name></expr></argument>)</argument_list></call> <operator pos:start="49:61" pos:end="49:62">!=</operator>

        <name pos:start="51:9" pos:end="51:27">CHUNK_PREAMBLE_SIZE</name></expr>)</condition><block type="pseudo" pos:start="53:9" pos:end="53:25"><block_content pos:start="53:9" pos:end="53:25">

        <return pos:start="53:9" pos:end="53:25">return <expr pos:start="53:16" pos:end="53:24"><name pos:start="53:16" pos:end="53:24">CHUNK_BAD</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:45"><expr pos:start="55:5" pos:end="55:44"><name pos:start="55:5" pos:end="55:14">chunk_size</name> <operator pos:start="55:16" pos:end="55:16">=</operator> <call pos:start="55:18" pos:end="55:44"><name pos:start="55:18" pos:end="55:24">AV_RL16</name><argument_list pos:start="55:25" pos:end="55:44">(<argument pos:start="55:26" pos:end="55:43"><expr pos:start="55:26" pos:end="55:43"><operator pos:start="55:26" pos:end="55:26">&amp;</operator><name pos:start="55:27" pos:end="55:43"><name pos:start="55:27" pos:end="55:40">chunk_preamble</name><index pos:start="55:41" pos:end="55:43">[<expr pos:start="55:42" pos:end="55:42"><literal type="number" pos:start="55:42" pos:end="55:42">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:45"><expr pos:start="57:5" pos:end="57:44"><name pos:start="57:5" pos:end="57:14">chunk_type</name> <operator pos:start="57:16" pos:end="57:16">=</operator> <call pos:start="57:18" pos:end="57:44"><name pos:start="57:18" pos:end="57:24">AV_RL16</name><argument_list pos:start="57:25" pos:end="57:44">(<argument pos:start="57:26" pos:end="57:43"><expr pos:start="57:26" pos:end="57:43"><operator pos:start="57:26" pos:end="57:26">&amp;</operator><name pos:start="57:27" pos:end="57:43"><name pos:start="57:27" pos:end="57:40">chunk_preamble</name><index pos:start="57:41" pos:end="57:43">[<expr pos:start="57:42" pos:end="57:42"><literal type="number" pos:start="57:42" pos:end="57:42">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:79"><expr pos:start="61:5" pos:end="61:78"><call pos:start="61:5" pos:end="61:78"><name pos:start="61:5" pos:end="61:17">debug_ipmovie</name><argument_list pos:start="61:18" pos:end="61:78">(<argument pos:start="61:19" pos:end="61:53"><expr pos:start="61:19" pos:end="61:53"><literal type="string" pos:start="61:19" pos:end="61:53">"chunk type 0x%04X, 0x%04X bytes: "</literal></expr></argument>, <argument pos:start="61:56" pos:end="61:65"><expr pos:start="61:56" pos:end="61:65"><name pos:start="61:56" pos:end="61:65">chunk_type</name></expr></argument>, <argument pos:start="61:68" pos:end="61:77"><expr pos:start="61:68" pos:end="61:77"><name pos:start="61:68" pos:end="61:77">chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="65:5" pos:end="127:5">switch <condition pos:start="65:12" pos:end="65:23">(<expr pos:start="65:13" pos:end="65:22"><name pos:start="65:13" pos:end="65:22">chunk_type</name></expr>)</condition> <block pos:start="65:25" pos:end="127:5">{<block_content pos:start="69:5" pos:end="123:14">



    <case pos:start="69:5" pos:end="69:26">case <expr pos:start="69:10" pos:end="69:25"><name pos:start="69:10" pos:end="69:25">CHUNK_INIT_AUDIO</name></expr>:</case>

        <expr_stmt pos:start="71:9" pos:end="71:44"><expr pos:start="71:9" pos:end="71:43"><call pos:start="71:9" pos:end="71:43"><name pos:start="71:9" pos:end="71:21">debug_ipmovie</name><argument_list pos:start="71:22" pos:end="71:43">(<argument pos:start="71:23" pos:end="71:42"><expr pos:start="71:23" pos:end="71:42"><literal type="string" pos:start="71:23" pos:end="71:42">"initialize audio\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="73:9" pos:end="73:14">break;</break>



    <case pos:start="77:5" pos:end="77:26">case <expr pos:start="77:10" pos:end="77:25"><name pos:start="77:10" pos:end="77:25">CHUNK_AUDIO_ONLY</name></expr>:</case>

        <expr_stmt pos:start="79:9" pos:end="79:38"><expr pos:start="79:9" pos:end="79:37"><call pos:start="79:9" pos:end="79:37"><name pos:start="79:9" pos:end="79:21">debug_ipmovie</name><argument_list pos:start="79:22" pos:end="79:37">(<argument pos:start="79:23" pos:end="79:36"><expr pos:start="79:23" pos:end="79:36"><literal type="string" pos:start="79:23" pos:end="79:36">"audio only\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="81:9" pos:end="81:14">break;</break>



    <case pos:start="85:5" pos:end="85:26">case <expr pos:start="85:10" pos:end="85:25"><name pos:start="85:10" pos:end="85:25">CHUNK_INIT_VIDEO</name></expr>:</case>

        <expr_stmt pos:start="87:9" pos:end="87:44"><expr pos:start="87:9" pos:end="87:43"><call pos:start="87:9" pos:end="87:43"><name pos:start="87:9" pos:end="87:21">debug_ipmovie</name><argument_list pos:start="87:22" pos:end="87:43">(<argument pos:start="87:23" pos:end="87:42"><expr pos:start="87:23" pos:end="87:42"><literal type="string" pos:start="87:23" pos:end="87:42">"initialize video\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="89:9" pos:end="89:14">break;</break>



    <case pos:start="93:5" pos:end="93:21">case <expr pos:start="93:10" pos:end="93:20"><name pos:start="93:10" pos:end="93:20">CHUNK_VIDEO</name></expr>:</case>

        <expr_stmt pos:start="95:9" pos:end="95:45"><expr pos:start="95:9" pos:end="95:44"><call pos:start="95:9" pos:end="95:44"><name pos:start="95:9" pos:end="95:21">debug_ipmovie</name><argument_list pos:start="95:22" pos:end="95:44">(<argument pos:start="95:23" pos:end="95:43"><expr pos:start="95:23" pos:end="95:43"><literal type="string" pos:start="95:23" pos:end="95:43">"video (and audio)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="97:9" pos:end="97:14">break;</break>



    <case pos:start="101:5" pos:end="101:24">case <expr pos:start="101:10" pos:end="101:23"><name pos:start="101:10" pos:end="101:23">CHUNK_SHUTDOWN</name></expr>:</case>

        <expr_stmt pos:start="103:9" pos:end="103:36"><expr pos:start="103:9" pos:end="103:35"><call pos:start="103:9" pos:end="103:35"><name pos:start="103:9" pos:end="103:21">debug_ipmovie</name><argument_list pos:start="103:22" pos:end="103:35">(<argument pos:start="103:23" pos:end="103:34"><expr pos:start="103:23" pos:end="103:34"><literal type="string" pos:start="103:23" pos:end="103:34">"shutdown\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="105:9" pos:end="105:14">break;</break>



    <case pos:start="109:5" pos:end="109:19">case <expr pos:start="109:10" pos:end="109:18"><name pos:start="109:10" pos:end="109:18">CHUNK_END</name></expr>:</case>

        <expr_stmt pos:start="111:9" pos:end="111:31"><expr pos:start="111:9" pos:end="111:30"><call pos:start="111:9" pos:end="111:30"><name pos:start="111:9" pos:end="111:21">debug_ipmovie</name><argument_list pos:start="111:22" pos:end="111:30">(<argument pos:start="111:23" pos:end="111:29"><expr pos:start="111:23" pos:end="111:29"><literal type="string" pos:start="111:23" pos:end="111:29">"end\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="113:9" pos:end="113:14">break;</break>



    <default pos:start="117:5" pos:end="117:12">default:</default>

        <expr_stmt pos:start="119:9" pos:end="119:41"><expr pos:start="119:9" pos:end="119:40"><call pos:start="119:9" pos:end="119:40"><name pos:start="119:9" pos:end="119:21">debug_ipmovie</name><argument_list pos:start="119:22" pos:end="119:40">(<argument pos:start="119:23" pos:end="119:39"><expr pos:start="119:23" pos:end="119:39"><literal type="string" pos:start="119:23" pos:end="119:39">"invalid chunk\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:31"><expr pos:start="121:9" pos:end="121:30"><name pos:start="121:9" pos:end="121:18">chunk_type</name> <operator pos:start="121:20" pos:end="121:20">=</operator> <name pos:start="121:22" pos:end="121:30">CHUNK_BAD</name></expr>;</expr_stmt>

        <break pos:start="123:9" pos:end="123:14">break;</break>



    </block_content>}</block></switch>



    <while pos:start="131:5" pos:end="569:5">while <condition pos:start="131:11" pos:end="131:57">(<expr pos:start="131:12" pos:end="131:56"><operator pos:start="131:12" pos:end="131:12">(</operator><name pos:start="131:13" pos:end="131:22">chunk_size</name> <operator pos:start="131:24" pos:end="131:24">&gt;</operator> <literal type="number" pos:start="131:26" pos:end="131:26">0</literal><operator pos:start="131:27" pos:end="131:27">)</operator> <operator pos:start="131:29" pos:end="131:30">&amp;&amp;</operator> <operator pos:start="131:32" pos:end="131:32">(</operator><name pos:start="131:33" pos:end="131:42">chunk_type</name> <operator pos:start="131:44" pos:end="131:45">!=</operator> <name pos:start="131:47" pos:end="131:55">CHUNK_BAD</name><operator pos:start="131:56" pos:end="131:56">)</operator></expr>)</condition> <block pos:start="131:59" pos:end="569:5">{<block_content pos:start="137:8" pos:end="567:9">



        <comment type="block" pos:start="135:9" pos:end="135:75">/* read the next chunk, wherever the file happens to be pointing */</comment>

       <if_stmt pos:start="137:8" pos:end="143:9"><if pos:start="137:8" pos:end="143:9">if <condition pos:start="137:11" pos:end="137:24">(<expr pos:start="137:12" pos:end="137:23"><call pos:start="137:12" pos:end="137:23"><name pos:start="137:12" pos:end="137:19">url_feof</name><argument_list pos:start="137:20" pos:end="137:23">(<argument pos:start="137:21" pos:end="137:22"><expr pos:start="137:21" pos:end="137:22"><name pos:start="137:21" pos:end="137:22">pb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="137:26" pos:end="143:9">{<block_content pos:start="139:13" pos:end="141:18">

            <expr_stmt pos:start="139:13" pos:end="139:35"><expr pos:start="139:13" pos:end="139:34"><name pos:start="139:13" pos:end="139:22">chunk_type</name> <operator pos:start="139:24" pos:end="139:24">=</operator> <name pos:start="139:26" pos:end="139:34">CHUNK_EOF</name></expr>;</expr_stmt>

            <break pos:start="141:13" pos:end="141:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="145:9" pos:end="153:9"><if pos:start="145:9" pos:end="153:9">if <condition pos:start="145:12" pos:end="147:32">(<expr pos:start="145:13" pos:end="147:31"><call pos:start="145:13" pos:end="145:64"><name pos:start="145:13" pos:end="145:22">get_buffer</name><argument_list pos:start="145:23" pos:end="145:64">(<argument pos:start="145:24" pos:end="145:25"><expr pos:start="145:24" pos:end="145:25"><name pos:start="145:24" pos:end="145:25">pb</name></expr></argument>, <argument pos:start="145:28" pos:end="145:42"><expr pos:start="145:28" pos:end="145:42"><name pos:start="145:28" pos:end="145:42">opcode_preamble</name></expr></argument>, <argument pos:start="145:45" pos:end="145:63"><expr pos:start="145:45" pos:end="145:63"><name pos:start="145:45" pos:end="145:63">CHUNK_PREAMBLE_SIZE</name></expr></argument>)</argument_list></call> <operator pos:start="145:66" pos:end="145:67">!=</operator>

            <name pos:start="147:13" pos:end="147:31">CHUNK_PREAMBLE_SIZE</name></expr>)</condition> <block pos:start="147:34" pos:end="153:9">{<block_content pos:start="149:13" pos:end="151:18">

            <expr_stmt pos:start="149:13" pos:end="149:35"><expr pos:start="149:13" pos:end="149:34"><name pos:start="149:13" pos:end="149:22">chunk_type</name> <operator pos:start="149:24" pos:end="149:24">=</operator> <name pos:start="149:26" pos:end="149:34">CHUNK_BAD</name></expr>;</expr_stmt>

            <break pos:start="151:13" pos:end="151:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="157:9" pos:end="157:51"><expr pos:start="157:9" pos:end="157:50"><name pos:start="157:9" pos:end="157:19">opcode_size</name> <operator pos:start="157:21" pos:end="157:21">=</operator> <call pos:start="157:23" pos:end="157:50"><name pos:start="157:23" pos:end="157:29">AV_RL16</name><argument_list pos:start="157:30" pos:end="157:50">(<argument pos:start="157:31" pos:end="157:49"><expr pos:start="157:31" pos:end="157:49"><operator pos:start="157:31" pos:end="157:31">&amp;</operator><name pos:start="157:32" pos:end="157:49"><name pos:start="157:32" pos:end="157:46">opcode_preamble</name><index pos:start="157:47" pos:end="157:49">[<expr pos:start="157:48" pos:end="157:48"><literal type="number" pos:start="157:48" pos:end="157:48">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="159:9" pos:end="159:41"><expr pos:start="159:9" pos:end="159:40"><name pos:start="159:9" pos:end="159:19">opcode_type</name> <operator pos:start="159:21" pos:end="159:21">=</operator> <name pos:start="159:23" pos:end="159:40"><name pos:start="159:23" pos:end="159:37">opcode_preamble</name><index pos:start="159:38" pos:end="159:40">[<expr pos:start="159:39" pos:end="159:39"><literal type="number" pos:start="159:39" pos:end="159:39">2</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="161:9" pos:end="161:44"><expr pos:start="161:9" pos:end="161:43"><name pos:start="161:9" pos:end="161:22">opcode_version</name> <operator pos:start="161:24" pos:end="161:24">=</operator> <name pos:start="161:26" pos:end="161:43"><name pos:start="161:26" pos:end="161:40">opcode_preamble</name><index pos:start="161:41" pos:end="161:43">[<expr pos:start="161:42" pos:end="161:42"><literal type="number" pos:start="161:42" pos:end="161:42">3</literal></expr>]</index></name></expr>;</expr_stmt>



        <expr_stmt pos:start="165:9" pos:end="165:43"><expr pos:start="165:9" pos:end="165:42"><name pos:start="165:9" pos:end="165:18">chunk_size</name> <operator pos:start="165:20" pos:end="165:21">-=</operator> <name pos:start="165:23" pos:end="165:42">OPCODE_PREAMBLE_SIZE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="167:9" pos:end="167:34"><expr pos:start="167:9" pos:end="167:33"><name pos:start="167:9" pos:end="167:18">chunk_size</name> <operator pos:start="167:20" pos:end="167:21">-=</operator> <name pos:start="167:23" pos:end="167:33">opcode_size</name></expr>;</expr_stmt>

        <if_stmt pos:start="169:9" pos:end="177:9"><if pos:start="169:9" pos:end="177:9">if <condition pos:start="169:12" pos:end="169:27">(<expr pos:start="169:13" pos:end="169:26"><name pos:start="169:13" pos:end="169:22">chunk_size</name> <operator pos:start="169:24" pos:end="169:24">&lt;</operator> <literal type="number" pos:start="169:26" pos:end="169:26">0</literal></expr>)</condition> <block pos:start="169:29" pos:end="177:9">{<block_content pos:start="171:13" pos:end="175:18">

            <expr_stmt pos:start="171:13" pos:end="171:71"><expr pos:start="171:13" pos:end="171:70"><call pos:start="171:13" pos:end="171:70"><name pos:start="171:13" pos:end="171:25">debug_ipmovie</name><argument_list pos:start="171:26" pos:end="171:70">(<argument pos:start="171:27" pos:end="171:69"><expr pos:start="171:27" pos:end="171:69"><literal type="string" pos:start="171:27" pos:end="171:69">"chunk_size countdown just went negative\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="173:13" pos:end="173:35"><expr pos:start="173:13" pos:end="173:34"><name pos:start="173:13" pos:end="173:22">chunk_type</name> <operator pos:start="173:24" pos:end="173:24">=</operator> <name pos:start="173:26" pos:end="173:34">CHUNK_BAD</name></expr>;</expr_stmt>

            <break pos:start="175:13" pos:end="175:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="181:9" pos:end="183:54"><expr pos:start="181:9" pos:end="183:53"><call pos:start="181:9" pos:end="183:53"><name pos:start="181:9" pos:end="181:21">debug_ipmovie</name><argument_list pos:start="181:22" pos:end="183:53">(<argument pos:start="181:23" pos:end="181:70"><expr pos:start="181:23" pos:end="181:70"><literal type="string" pos:start="181:23" pos:end="181:70">"  opcode type %02X, version %d, 0x%04X bytes: "</literal></expr></argument>,

            <argument pos:start="183:13" pos:end="183:23"><expr pos:start="183:13" pos:end="183:23"><name pos:start="183:13" pos:end="183:23">opcode_type</name></expr></argument>, <argument pos:start="183:26" pos:end="183:39"><expr pos:start="183:26" pos:end="183:39"><name pos:start="183:26" pos:end="183:39">opcode_version</name></expr></argument>, <argument pos:start="183:42" pos:end="183:52"><expr pos:start="183:42" pos:end="183:52"><name pos:start="183:42" pos:end="183:52">opcode_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="185:9" pos:end="567:9">switch <condition pos:start="185:16" pos:end="185:28">(<expr pos:start="185:17" pos:end="185:27"><name pos:start="185:17" pos:end="185:27">opcode_type</name></expr>)</condition> <block pos:start="185:30" pos:end="567:9">{<block_content pos:start="189:9" pos:end="563:18">



        <case pos:start="189:9" pos:end="189:34">case <expr pos:start="189:14" pos:end="189:33"><name pos:start="189:14" pos:end="189:33">OPCODE_END_OF_STREAM</name></expr>:</case>

            <expr_stmt pos:start="191:13" pos:end="191:45"><expr pos:start="191:13" pos:end="191:44"><call pos:start="191:13" pos:end="191:44"><name pos:start="191:13" pos:end="191:25">debug_ipmovie</name><argument_list pos:start="191:26" pos:end="191:44">(<argument pos:start="191:27" pos:end="191:43"><expr pos:start="191:27" pos:end="191:43"><literal type="string" pos:start="191:27" pos:end="191:43">"end of stream\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="193:13" pos:end="193:49"><expr pos:start="193:13" pos:end="193:48"><call pos:start="193:13" pos:end="193:48"><name pos:start="193:13" pos:end="193:21">url_fseek</name><argument_list pos:start="193:22" pos:end="193:48">(<argument pos:start="193:23" pos:end="193:24"><expr pos:start="193:23" pos:end="193:24"><name pos:start="193:23" pos:end="193:24">pb</name></expr></argument>, <argument pos:start="193:27" pos:end="193:37"><expr pos:start="193:27" pos:end="193:37"><name pos:start="193:27" pos:end="193:37">opcode_size</name></expr></argument>, <argument pos:start="193:40" pos:end="193:47"><expr pos:start="193:40" pos:end="193:47"><name pos:start="193:40" pos:end="193:47">SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="195:13" pos:end="195:18">break;</break>



        <case pos:start="199:9" pos:end="199:33">case <expr pos:start="199:14" pos:end="199:32"><name pos:start="199:14" pos:end="199:32">OPCODE_END_OF_CHUNK</name></expr>:</case>

            <expr_stmt pos:start="201:13" pos:end="201:44"><expr pos:start="201:13" pos:end="201:43"><call pos:start="201:13" pos:end="201:43"><name pos:start="201:13" pos:end="201:25">debug_ipmovie</name><argument_list pos:start="201:26" pos:end="201:43">(<argument pos:start="201:27" pos:end="201:42"><expr pos:start="201:27" pos:end="201:42"><literal type="string" pos:start="201:27" pos:end="201:42">"end of chunk\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="203:13" pos:end="203:49"><expr pos:start="203:13" pos:end="203:48"><call pos:start="203:13" pos:end="203:48"><name pos:start="203:13" pos:end="203:21">url_fseek</name><argument_list pos:start="203:22" pos:end="203:48">(<argument pos:start="203:23" pos:end="203:24"><expr pos:start="203:23" pos:end="203:24"><name pos:start="203:23" pos:end="203:24">pb</name></expr></argument>, <argument pos:start="203:27" pos:end="203:37"><expr pos:start="203:27" pos:end="203:37"><name pos:start="203:27" pos:end="203:37">opcode_size</name></expr></argument>, <argument pos:start="203:40" pos:end="203:47"><expr pos:start="203:40" pos:end="203:47"><name pos:start="203:40" pos:end="203:47">SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="205:13" pos:end="205:18">break;</break>



        <case pos:start="209:9" pos:end="209:33">case <expr pos:start="209:14" pos:end="209:32"><name pos:start="209:14" pos:end="209:32">OPCODE_CREATE_TIMER</name></expr>:</case>

            <expr_stmt pos:start="211:13" pos:end="211:44"><expr pos:start="211:13" pos:end="211:43"><call pos:start="211:13" pos:end="211:43"><name pos:start="211:13" pos:end="211:25">debug_ipmovie</name><argument_list pos:start="211:26" pos:end="211:43">(<argument pos:start="211:27" pos:end="211:42"><expr pos:start="211:27" pos:end="211:42"><literal type="string" pos:start="211:27" pos:end="211:42">"create timer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="213:13" pos:end="221:13"><if pos:start="213:13" pos:end="221:13">if <condition pos:start="213:16" pos:end="213:58">(<expr pos:start="213:17" pos:end="213:57"><operator pos:start="213:17" pos:end="213:17">(</operator><name pos:start="213:18" pos:end="213:31">opcode_version</name> <operator pos:start="213:33" pos:end="213:33">&gt;</operator> <literal type="number" pos:start="213:35" pos:end="213:35">0</literal><operator pos:start="213:36" pos:end="213:36">)</operator> <operator pos:start="213:38" pos:end="213:39">||</operator> <operator pos:start="213:41" pos:end="213:41">(</operator><name pos:start="213:42" pos:end="213:52">opcode_size</name> <operator pos:start="213:54" pos:end="213:54">&gt;</operator> <literal type="number" pos:start="213:56" pos:end="213:56">6</literal><operator pos:start="213:57" pos:end="213:57">)</operator></expr>)</condition> <block pos:start="213:60" pos:end="221:13">{<block_content pos:start="215:17" pos:end="219:22">

                <expr_stmt pos:start="215:17" pos:end="215:59"><expr pos:start="215:17" pos:end="215:58"><call pos:start="215:17" pos:end="215:58"><name pos:start="215:17" pos:end="215:29">debug_ipmovie</name><argument_list pos:start="215:30" pos:end="215:58">(<argument pos:start="215:31" pos:end="215:57"><expr pos:start="215:31" pos:end="215:57"><literal type="string" pos:start="215:31" pos:end="215:57">"bad create_timer opcode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="217:17" pos:end="217:39"><expr pos:start="217:17" pos:end="217:38"><name pos:start="217:17" pos:end="217:26">chunk_type</name> <operator pos:start="217:28" pos:end="217:28">=</operator> <name pos:start="217:30" pos:end="217:38">CHUNK_BAD</name></expr>;</expr_stmt>

                <break pos:start="219:17" pos:end="219:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="223:13" pos:end="231:13"><if pos:start="223:13" pos:end="231:13">if <condition pos:start="223:16" pos:end="225:28">(<expr pos:start="223:17" pos:end="225:27"><call pos:start="223:17" pos:end="223:52"><name pos:start="223:17" pos:end="223:26">get_buffer</name><argument_list pos:start="223:27" pos:end="223:52">(<argument pos:start="223:28" pos:end="223:29"><expr pos:start="223:28" pos:end="223:29"><name pos:start="223:28" pos:end="223:29">pb</name></expr></argument>, <argument pos:start="223:32" pos:end="223:38"><expr pos:start="223:32" pos:end="223:38"><name pos:start="223:32" pos:end="223:38">scratch</name></expr></argument>, <argument pos:start="223:41" pos:end="223:51"><expr pos:start="223:41" pos:end="223:51"><name pos:start="223:41" pos:end="223:51">opcode_size</name></expr></argument>)</argument_list></call> <operator pos:start="223:54" pos:end="223:55">!=</operator>

                <name pos:start="225:17" pos:end="225:27">opcode_size</name></expr>)</condition> <block pos:start="225:30" pos:end="231:13">{<block_content pos:start="227:17" pos:end="229:22">

                <expr_stmt pos:start="227:17" pos:end="227:39"><expr pos:start="227:17" pos:end="227:38"><name pos:start="227:17" pos:end="227:26">chunk_type</name> <operator pos:start="227:28" pos:end="227:28">=</operator> <name pos:start="227:30" pos:end="227:38">CHUNK_BAD</name></expr>;</expr_stmt>

                <break pos:start="229:17" pos:end="229:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="233:13" pos:end="233:79"><expr pos:start="233:13" pos:end="233:78"><name pos:start="233:13" pos:end="233:18"><name pos:start="233:13" pos:end="233:13">s</name><operator pos:start="233:14" pos:end="233:15">-&gt;</operator><name pos:start="233:16" pos:end="233:18">fps</name></name> <operator pos:start="233:20" pos:end="233:20">=</operator> <literal type="number" pos:start="233:22" pos:end="233:30">1000000.0</literal> <operator pos:start="233:32" pos:end="233:32">/</operator> <operator pos:start="233:34" pos:end="233:34">(</operator><call pos:start="233:35" pos:end="233:54"><name pos:start="233:35" pos:end="233:41">AV_RL32</name><argument_list pos:start="233:42" pos:end="233:54">(<argument pos:start="233:43" pos:end="233:53"><expr pos:start="233:43" pos:end="233:53"><operator pos:start="233:43" pos:end="233:43">&amp;</operator><name pos:start="233:44" pos:end="233:53"><name pos:start="233:44" pos:end="233:50">scratch</name><index pos:start="233:51" pos:end="233:53">[<expr pos:start="233:52" pos:end="233:52"><literal type="number" pos:start="233:52" pos:end="233:52">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="233:56" pos:end="233:56">*</operator> <call pos:start="233:58" pos:end="233:77"><name pos:start="233:58" pos:end="233:64">AV_RL16</name><argument_list pos:start="233:65" pos:end="233:77">(<argument pos:start="233:66" pos:end="233:76"><expr pos:start="233:66" pos:end="233:76"><operator pos:start="233:66" pos:end="233:66">&amp;</operator><name pos:start="233:67" pos:end="233:76"><name pos:start="233:67" pos:end="233:73">scratch</name><index pos:start="233:74" pos:end="233:76">[<expr pos:start="233:75" pos:end="233:75"><literal type="number" pos:start="233:75" pos:end="233:75">4</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="233:78" pos:end="233:78">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="235:13" pos:end="235:46"><expr pos:start="235:13" pos:end="235:45"><name pos:start="235:13" pos:end="235:28"><name pos:start="235:13" pos:end="235:13">s</name><operator pos:start="235:14" pos:end="235:15">-&gt;</operator><name pos:start="235:16" pos:end="235:28">frame_pts_inc</name></name> <operator pos:start="235:30" pos:end="235:30">=</operator> <literal type="number" pos:start="235:32" pos:end="235:36">90000</literal> <operator pos:start="235:38" pos:end="235:38">/</operator> <name pos:start="235:40" pos:end="235:45"><name pos:start="235:40" pos:end="235:40">s</name><operator pos:start="235:41" pos:end="235:42">-&gt;</operator><name pos:start="235:43" pos:end="235:45">fps</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="237:13" pos:end="239:68"><expr pos:start="237:13" pos:end="239:67"><call pos:start="237:13" pos:end="239:67"><name pos:start="237:13" pos:end="237:25">debug_ipmovie</name><argument_list pos:start="237:26" pos:end="239:67">(<argument pos:start="237:27" pos:end="237:80"><expr pos:start="237:27" pos:end="237:80"><literal type="string" pos:start="237:27" pos:end="237:80">"  %.2f frames/second (timer div = %d, subdiv = %d)\n"</literal></expr></argument>,

                <argument pos:start="239:17" pos:end="239:22"><expr pos:start="239:17" pos:end="239:22"><name pos:start="239:17" pos:end="239:22"><name pos:start="239:17" pos:end="239:17">s</name><operator pos:start="239:18" pos:end="239:19">-&gt;</operator><name pos:start="239:20" pos:end="239:22">fps</name></name></expr></argument>, <argument pos:start="239:25" pos:end="239:44"><expr pos:start="239:25" pos:end="239:44"><call pos:start="239:25" pos:end="239:44"><name pos:start="239:25" pos:end="239:31">AV_RL32</name><argument_list pos:start="239:32" pos:end="239:44">(<argument pos:start="239:33" pos:end="239:43"><expr pos:start="239:33" pos:end="239:43"><operator pos:start="239:33" pos:end="239:33">&amp;</operator><name pos:start="239:34" pos:end="239:43"><name pos:start="239:34" pos:end="239:40">scratch</name><index pos:start="239:41" pos:end="239:43">[<expr pos:start="239:42" pos:end="239:42"><literal type="number" pos:start="239:42" pos:end="239:42">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="239:47" pos:end="239:66"><expr pos:start="239:47" pos:end="239:66"><call pos:start="239:47" pos:end="239:66"><name pos:start="239:47" pos:end="239:53">AV_RL16</name><argument_list pos:start="239:54" pos:end="239:66">(<argument pos:start="239:55" pos:end="239:65"><expr pos:start="239:55" pos:end="239:65"><operator pos:start="239:55" pos:end="239:55">&amp;</operator><name pos:start="239:56" pos:end="239:65"><name pos:start="239:56" pos:end="239:62">scratch</name><index pos:start="239:63" pos:end="239:65">[<expr pos:start="239:64" pos:end="239:64"><literal type="number" pos:start="239:64" pos:end="239:64">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="241:13" pos:end="241:18">break;</break>



        <case pos:start="245:9" pos:end="245:39">case <expr pos:start="245:14" pos:end="245:38"><name pos:start="245:14" pos:end="245:38">OPCODE_INIT_AUDIO_BUFFERS</name></expr>:</case>

            <expr_stmt pos:start="247:13" pos:end="247:56"><expr pos:start="247:13" pos:end="247:55"><call pos:start="247:13" pos:end="247:55"><name pos:start="247:13" pos:end="247:25">debug_ipmovie</name><argument_list pos:start="247:26" pos:end="247:55">(<argument pos:start="247:27" pos:end="247:54"><expr pos:start="247:27" pos:end="247:54"><literal type="string" pos:start="247:27" pos:end="247:54">"initialize audio buffers\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="249:13" pos:end="257:13"><if pos:start="249:13" pos:end="257:13">if <condition pos:start="249:16" pos:end="249:59">(<expr pos:start="249:17" pos:end="249:58"><operator pos:start="249:17" pos:end="249:17">(</operator><name pos:start="249:18" pos:end="249:31">opcode_version</name> <operator pos:start="249:33" pos:end="249:33">&gt;</operator> <literal type="number" pos:start="249:35" pos:end="249:35">1</literal><operator pos:start="249:36" pos:end="249:36">)</operator> <operator pos:start="249:38" pos:end="249:39">||</operator> <operator pos:start="249:41" pos:end="249:41">(</operator><name pos:start="249:42" pos:end="249:52">opcode_size</name> <operator pos:start="249:54" pos:end="249:54">&gt;</operator> <literal type="number" pos:start="249:56" pos:end="249:57">10</literal><operator pos:start="249:58" pos:end="249:58">)</operator></expr>)</condition> <block pos:start="249:61" pos:end="257:13">{<block_content pos:start="251:17" pos:end="255:22">

                <expr_stmt pos:start="251:17" pos:end="251:65"><expr pos:start="251:17" pos:end="251:64"><call pos:start="251:17" pos:end="251:64"><name pos:start="251:17" pos:end="251:29">debug_ipmovie</name><argument_list pos:start="251:30" pos:end="251:64">(<argument pos:start="251:31" pos:end="251:63"><expr pos:start="251:31" pos:end="251:63"><literal type="string" pos:start="251:31" pos:end="251:63">"bad init_audio_buffers opcode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="253:17" pos:end="253:39"><expr pos:start="253:17" pos:end="253:38"><name pos:start="253:17" pos:end="253:26">chunk_type</name> <operator pos:start="253:28" pos:end="253:28">=</operator> <name pos:start="253:30" pos:end="253:38">CHUNK_BAD</name></expr>;</expr_stmt>

                <break pos:start="255:17" pos:end="255:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="259:13" pos:end="267:13"><if pos:start="259:13" pos:end="267:13">if <condition pos:start="259:16" pos:end="261:28">(<expr pos:start="259:17" pos:end="261:27"><call pos:start="259:17" pos:end="259:52"><name pos:start="259:17" pos:end="259:26">get_buffer</name><argument_list pos:start="259:27" pos:end="259:52">(<argument pos:start="259:28" pos:end="259:29"><expr pos:start="259:28" pos:end="259:29"><name pos:start="259:28" pos:end="259:29">pb</name></expr></argument>, <argument pos:start="259:32" pos:end="259:38"><expr pos:start="259:32" pos:end="259:38"><name pos:start="259:32" pos:end="259:38">scratch</name></expr></argument>, <argument pos:start="259:41" pos:end="259:51"><expr pos:start="259:41" pos:end="259:51"><name pos:start="259:41" pos:end="259:51">opcode_size</name></expr></argument>)</argument_list></call> <operator pos:start="259:54" pos:end="259:55">!=</operator>

                <name pos:start="261:17" pos:end="261:27">opcode_size</name></expr>)</condition> <block pos:start="261:30" pos:end="267:13">{<block_content pos:start="263:17" pos:end="265:22">

                <expr_stmt pos:start="263:17" pos:end="263:39"><expr pos:start="263:17" pos:end="263:38"><name pos:start="263:17" pos:end="263:26">chunk_type</name> <operator pos:start="263:28" pos:end="263:28">=</operator> <name pos:start="263:30" pos:end="263:38">CHUNK_BAD</name></expr>;</expr_stmt>

                <break pos:start="265:17" pos:end="265:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="269:13" pos:end="269:56"><expr pos:start="269:13" pos:end="269:55"><name pos:start="269:13" pos:end="269:32"><name pos:start="269:13" pos:end="269:13">s</name><operator pos:start="269:14" pos:end="269:15">-&gt;</operator><name pos:start="269:16" pos:end="269:32">audio_sample_rate</name></name> <operator pos:start="269:34" pos:end="269:34">=</operator> <call pos:start="269:36" pos:end="269:55"><name pos:start="269:36" pos:end="269:42">AV_RL16</name><argument_list pos:start="269:43" pos:end="269:55">(<argument pos:start="269:44" pos:end="269:54"><expr pos:start="269:44" pos:end="269:54"><operator pos:start="269:44" pos:end="269:44">&amp;</operator><name pos:start="269:45" pos:end="269:54"><name pos:start="269:45" pos:end="269:51">scratch</name><index pos:start="269:52" pos:end="269:54">[<expr pos:start="269:53" pos:end="269:53"><literal type="number" pos:start="269:53" pos:end="269:53">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="271:13" pos:end="271:47"><expr pos:start="271:13" pos:end="271:46"><name pos:start="271:13" pos:end="271:23">audio_flags</name> <operator pos:start="271:25" pos:end="271:25">=</operator> <call pos:start="271:27" pos:end="271:46"><name pos:start="271:27" pos:end="271:33">AV_RL16</name><argument_list pos:start="271:34" pos:end="271:46">(<argument pos:start="271:35" pos:end="271:45"><expr pos:start="271:35" pos:end="271:45"><operator pos:start="271:35" pos:end="271:35">&amp;</operator><name pos:start="271:36" pos:end="271:45"><name pos:start="271:36" pos:end="271:42">scratch</name><index pos:start="271:43" pos:end="271:45">[<expr pos:start="271:44" pos:end="271:44"><literal type="number" pos:start="271:44" pos:end="271:44">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="273:13" pos:end="273:58">/* bit 0 of the flags: 0 = mono, 1 = stereo */</comment>

            <expr_stmt pos:start="275:13" pos:end="275:54"><expr pos:start="275:13" pos:end="275:53"><name pos:start="275:13" pos:end="275:29"><name pos:start="275:13" pos:end="275:13">s</name><operator pos:start="275:14" pos:end="275:15">-&gt;</operator><name pos:start="275:16" pos:end="275:29">audio_channels</name></name> <operator pos:start="275:31" pos:end="275:31">=</operator> <operator pos:start="275:33" pos:end="275:33">(</operator><name pos:start="275:34" pos:end="275:44">audio_flags</name> <operator pos:start="275:46" pos:end="275:46">&amp;</operator> <literal type="number" pos:start="275:48" pos:end="275:48">1</literal><operator pos:start="275:49" pos:end="275:49">)</operator> <operator pos:start="275:51" pos:end="275:51">+</operator> <literal type="number" pos:start="275:53" pos:end="275:53">1</literal></expr>;</expr_stmt>

            <comment type="block" pos:start="277:13" pos:end="277:59">/* bit 1 of the flags: 0 = 8 bit, 1 = 16 bit */</comment>

            <expr_stmt pos:start="279:13" pos:end="279:63"><expr pos:start="279:13" pos:end="279:62"><name pos:start="279:13" pos:end="279:25"><name pos:start="279:13" pos:end="279:13">s</name><operator pos:start="279:14" pos:end="279:15">-&gt;</operator><name pos:start="279:16" pos:end="279:25">audio_bits</name></name> <operator pos:start="279:27" pos:end="279:27">=</operator> <operator pos:start="279:29" pos:end="279:29">(</operator><operator pos:start="279:30" pos:end="279:30">(</operator><operator pos:start="279:31" pos:end="279:31">(</operator><name pos:start="279:32" pos:end="279:42">audio_flags</name> <operator pos:start="279:44" pos:end="279:45">&gt;&gt;</operator> <literal type="number" pos:start="279:47" pos:end="279:47">1</literal><operator pos:start="279:48" pos:end="279:48">)</operator> <operator pos:start="279:50" pos:end="279:50">&amp;</operator> <literal type="number" pos:start="279:52" pos:end="279:52">1</literal><operator pos:start="279:53" pos:end="279:53">)</operator> <operator pos:start="279:55" pos:end="279:55">+</operator> <literal type="number" pos:start="279:57" pos:end="279:57">1</literal><operator pos:start="279:58" pos:end="279:58">)</operator> <operator pos:start="279:60" pos:end="279:60">*</operator> <literal type="number" pos:start="279:62" pos:end="279:62">8</literal></expr>;</expr_stmt>

            <comment type="block" pos:start="281:13" pos:end="281:70">/* bit 2 indicates compressed audio in version 1 opcode */</comment>

            <if_stmt pos:start="283:13" pos:end="293:48"><if pos:start="283:13" pos:end="285:56">if <condition pos:start="283:16" pos:end="283:61">(<expr pos:start="283:17" pos:end="283:60"><operator pos:start="283:17" pos:end="283:17">(</operator><name pos:start="283:18" pos:end="283:31">opcode_version</name> <operator pos:start="283:33" pos:end="283:34">==</operator> <literal type="number" pos:start="283:36" pos:end="283:36">1</literal><operator pos:start="283:37" pos:end="283:37">)</operator> <operator pos:start="283:39" pos:end="283:40">&amp;&amp;</operator> <operator pos:start="283:42" pos:end="283:42">(</operator><name pos:start="283:43" pos:end="283:53">audio_flags</name> <operator pos:start="283:55" pos:end="283:55">&amp;</operator> <literal type="number" pos:start="283:57" pos:end="283:59">0x4</literal><operator pos:start="283:60" pos:end="283:60">)</operator></expr>)</condition><block type="pseudo" pos:start="285:17" pos:end="285:56"><block_content pos:start="285:17" pos:end="285:56">

                <expr_stmt pos:start="285:17" pos:end="285:56"><expr pos:start="285:17" pos:end="285:55"><name pos:start="285:17" pos:end="285:29"><name pos:start="285:17" pos:end="285:17">s</name><operator pos:start="285:18" pos:end="285:19">-&gt;</operator><name pos:start="285:20" pos:end="285:29">audio_type</name></name> <operator pos:start="285:31" pos:end="285:31">=</operator> <name pos:start="285:33" pos:end="285:55">CODEC_ID_INTERPLAY_DPCM</name></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="287:13" pos:end="289:51">else if <condition pos:start="287:21" pos:end="287:41">(<expr pos:start="287:22" pos:end="287:40"><name pos:start="287:22" pos:end="287:34"><name pos:start="287:22" pos:end="287:22">s</name><operator pos:start="287:23" pos:end="287:24">-&gt;</operator><name pos:start="287:25" pos:end="287:34">audio_bits</name></name> <operator pos:start="287:36" pos:end="287:37">==</operator> <literal type="number" pos:start="287:39" pos:end="287:40">16</literal></expr>)</condition><block type="pseudo" pos:start="289:17" pos:end="289:51"><block_content pos:start="289:17" pos:end="289:51">

                <expr_stmt pos:start="289:17" pos:end="289:51"><expr pos:start="289:17" pos:end="289:50"><name pos:start="289:17" pos:end="289:29"><name pos:start="289:17" pos:end="289:17">s</name><operator pos:start="289:18" pos:end="289:19">-&gt;</operator><name pos:start="289:20" pos:end="289:29">audio_type</name></name> <operator pos:start="289:31" pos:end="289:31">=</operator> <name pos:start="289:33" pos:end="289:50">CODEC_ID_PCM_S16LE</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="291:13" pos:end="293:48">else<block type="pseudo" pos:start="293:17" pos:end="293:48"><block_content pos:start="293:17" pos:end="293:48">

                <expr_stmt pos:start="293:17" pos:end="293:48"><expr pos:start="293:17" pos:end="293:47"><name pos:start="293:17" pos:end="293:29"><name pos:start="293:17" pos:end="293:17">s</name><operator pos:start="293:18" pos:end="293:19">-&gt;</operator><name pos:start="293:20" pos:end="293:29">audio_type</name></name> <operator pos:start="293:31" pos:end="293:31">=</operator> <name pos:start="293:33" pos:end="293:47">CODEC_ID_PCM_U8</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="295:13" pos:end="305:43"><expr pos:start="295:13" pos:end="305:42"><call pos:start="295:13" pos:end="305:42"><name pos:start="295:13" pos:end="295:25">debug_ipmovie</name><argument_list pos:start="295:26" pos:end="305:42">(<argument pos:start="295:27" pos:end="295:66"><expr pos:start="295:27" pos:end="295:66"><literal type="string" pos:start="295:27" pos:end="295:66">"audio: %d bits, %d Hz, %s, %s format\n"</literal></expr></argument>,

                <argument pos:start="297:17" pos:end="297:29"><expr pos:start="297:17" pos:end="297:29"><name pos:start="297:17" pos:end="297:29"><name pos:start="297:17" pos:end="297:17">s</name><operator pos:start="297:18" pos:end="297:19">-&gt;</operator><name pos:start="297:20" pos:end="297:29">audio_bits</name></name></expr></argument>,

                <argument pos:start="299:17" pos:end="299:36"><expr pos:start="299:17" pos:end="299:36"><name pos:start="299:17" pos:end="299:36"><name pos:start="299:17" pos:end="299:17">s</name><operator pos:start="299:18" pos:end="299:19">-&gt;</operator><name pos:start="299:20" pos:end="299:36">audio_sample_rate</name></name></expr></argument>,

                <argument pos:start="301:17" pos:end="301:60"><expr pos:start="301:17" pos:end="301:60"><ternary pos:start="301:17" pos:end="301:60"><condition pos:start="301:17" pos:end="301:42"><expr pos:start="301:17" pos:end="301:40"><operator pos:start="301:17" pos:end="301:17">(</operator><name pos:start="301:18" pos:end="301:34"><name pos:start="301:18" pos:end="301:18">s</name><operator pos:start="301:19" pos:end="301:20">-&gt;</operator><name pos:start="301:21" pos:end="301:34">audio_channels</name></name> <operator pos:start="301:36" pos:end="301:37">==</operator> <literal type="number" pos:start="301:39" pos:end="301:39">2</literal><operator pos:start="301:40" pos:end="301:40">)</operator></expr> ?</condition><then pos:start="301:44" pos:end="301:51"> <expr pos:start="301:44" pos:end="301:51"><literal type="string" pos:start="301:44" pos:end="301:51">"stereo"</literal></expr> </then><else pos:start="301:53" pos:end="301:60">: <expr pos:start="301:55" pos:end="301:60"><literal type="string" pos:start="301:55" pos:end="301:60">"mono"</literal></expr></else></ternary></expr></argument>,

                <argument pos:start="303:17" pos:end="305:41"><expr pos:start="303:17" pos:end="305:41"><ternary pos:start="303:17" pos:end="305:41"><condition pos:start="303:17" pos:end="303:60"><expr pos:start="303:17" pos:end="303:58"><operator pos:start="303:17" pos:end="303:17">(</operator><name pos:start="303:18" pos:end="303:30"><name pos:start="303:18" pos:end="303:18">s</name><operator pos:start="303:19" pos:end="303:20">-&gt;</operator><name pos:start="303:21" pos:end="303:30">audio_type</name></name> <operator pos:start="303:32" pos:end="303:33">==</operator> <name pos:start="303:35" pos:end="303:57">CODEC_ID_INTERPLAY_DPCM</name><operator pos:start="303:58" pos:end="303:58">)</operator></expr> ?</condition><then pos:start="305:17" pos:end="305:33">

                <expr pos:start="305:17" pos:end="305:33"><literal type="string" pos:start="305:17" pos:end="305:33">"Interplay audio"</literal></expr> </then><else pos:start="305:35" pos:end="305:41">: <expr pos:start="305:37" pos:end="305:41"><literal type="string" pos:start="305:37" pos:end="305:41">"PCM"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="307:13" pos:end="307:18">break;</break>



        <case pos:start="311:9" pos:end="311:37">case <expr pos:start="311:14" pos:end="311:36"><name pos:start="311:14" pos:end="311:36">OPCODE_START_STOP_AUDIO</name></expr>:</case>

            <expr_stmt pos:start="313:13" pos:end="313:48"><expr pos:start="313:13" pos:end="313:47"><call pos:start="313:13" pos:end="313:47"><name pos:start="313:13" pos:end="313:25">debug_ipmovie</name><argument_list pos:start="313:26" pos:end="313:47">(<argument pos:start="313:27" pos:end="313:46"><expr pos:start="313:27" pos:end="313:46"><literal type="string" pos:start="313:27" pos:end="313:46">"start/stop audio\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="315:13" pos:end="315:49"><expr pos:start="315:13" pos:end="315:48"><call pos:start="315:13" pos:end="315:48"><name pos:start="315:13" pos:end="315:21">url_fseek</name><argument_list pos:start="315:22" pos:end="315:48">(<argument pos:start="315:23" pos:end="315:24"><expr pos:start="315:23" pos:end="315:24"><name pos:start="315:23" pos:end="315:24">pb</name></expr></argument>, <argument pos:start="315:27" pos:end="315:37"><expr pos:start="315:27" pos:end="315:37"><name pos:start="315:27" pos:end="315:37">opcode_size</name></expr></argument>, <argument pos:start="315:40" pos:end="315:47"><expr pos:start="315:40" pos:end="315:47"><name pos:start="315:40" pos:end="315:47">SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="317:13" pos:end="317:18">break;</break>



        <case pos:start="321:9" pos:end="321:39">case <expr pos:start="321:14" pos:end="321:38"><name pos:start="321:14" pos:end="321:38">OPCODE_INIT_VIDEO_BUFFERS</name></expr>:</case>

            <expr_stmt pos:start="323:13" pos:end="323:56"><expr pos:start="323:13" pos:end="323:55"><call pos:start="323:13" pos:end="323:55"><name pos:start="323:13" pos:end="323:25">debug_ipmovie</name><argument_list pos:start="323:26" pos:end="323:55">(<argument pos:start="323:27" pos:end="323:54"><expr pos:start="323:27" pos:end="323:54"><literal type="string" pos:start="323:27" pos:end="323:54">"initialize video buffers\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="325:13" pos:end="333:13"><if pos:start="325:13" pos:end="333:13">if <condition pos:start="325:16" pos:end="325:58">(<expr pos:start="325:17" pos:end="325:57"><operator pos:start="325:17" pos:end="325:17">(</operator><name pos:start="325:18" pos:end="325:31">opcode_version</name> <operator pos:start="325:33" pos:end="325:33">&gt;</operator> <literal type="number" pos:start="325:35" pos:end="325:35">2</literal><operator pos:start="325:36" pos:end="325:36">)</operator> <operator pos:start="325:38" pos:end="325:39">||</operator> <operator pos:start="325:41" pos:end="325:41">(</operator><name pos:start="325:42" pos:end="325:52">opcode_size</name> <operator pos:start="325:54" pos:end="325:54">&gt;</operator> <literal type="number" pos:start="325:56" pos:end="325:56">8</literal><operator pos:start="325:57" pos:end="325:57">)</operator></expr>)</condition> <block pos:start="325:60" pos:end="333:13">{<block_content pos:start="327:17" pos:end="331:22">

                <expr_stmt pos:start="327:17" pos:end="327:65"><expr pos:start="327:17" pos:end="327:64"><call pos:start="327:17" pos:end="327:64"><name pos:start="327:17" pos:end="327:29">debug_ipmovie</name><argument_list pos:start="327:30" pos:end="327:64">(<argument pos:start="327:31" pos:end="327:63"><expr pos:start="327:31" pos:end="327:63"><literal type="string" pos:start="327:31" pos:end="327:63">"bad init_video_buffers opcode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="329:17" pos:end="329:39"><expr pos:start="329:17" pos:end="329:38"><name pos:start="329:17" pos:end="329:26">chunk_type</name> <operator pos:start="329:28" pos:end="329:28">=</operator> <name pos:start="329:30" pos:end="329:38">CHUNK_BAD</name></expr>;</expr_stmt>

                <break pos:start="331:17" pos:end="331:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="335:13" pos:end="343:13"><if pos:start="335:13" pos:end="343:13">if <condition pos:start="335:16" pos:end="337:28">(<expr pos:start="335:17" pos:end="337:27"><call pos:start="335:17" pos:end="335:52"><name pos:start="335:17" pos:end="335:26">get_buffer</name><argument_list pos:start="335:27" pos:end="335:52">(<argument pos:start="335:28" pos:end="335:29"><expr pos:start="335:28" pos:end="335:29"><name pos:start="335:28" pos:end="335:29">pb</name></expr></argument>, <argument pos:start="335:32" pos:end="335:38"><expr pos:start="335:32" pos:end="335:38"><name pos:start="335:32" pos:end="335:38">scratch</name></expr></argument>, <argument pos:start="335:41" pos:end="335:51"><expr pos:start="335:41" pos:end="335:51"><name pos:start="335:41" pos:end="335:51">opcode_size</name></expr></argument>)</argument_list></call> <operator pos:start="335:54" pos:end="335:55">!=</operator>

                <name pos:start="337:17" pos:end="337:27">opcode_size</name></expr>)</condition> <block pos:start="337:30" pos:end="343:13">{<block_content pos:start="339:17" pos:end="341:22">

                <expr_stmt pos:start="339:17" pos:end="339:39"><expr pos:start="339:17" pos:end="339:38"><name pos:start="339:17" pos:end="339:26">chunk_type</name> <operator pos:start="339:28" pos:end="339:28">=</operator> <name pos:start="339:30" pos:end="339:38">CHUNK_BAD</name></expr>;</expr_stmt>

                <break pos:start="341:17" pos:end="341:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="345:13" pos:end="345:54"><expr pos:start="345:13" pos:end="345:53"><name pos:start="345:13" pos:end="345:26"><name pos:start="345:13" pos:end="345:13">s</name><operator pos:start="345:14" pos:end="345:15">-&gt;</operator><name pos:start="345:16" pos:end="345:26">video_width</name></name> <operator pos:start="345:28" pos:end="345:28">=</operator> <call pos:start="345:30" pos:end="345:49"><name pos:start="345:30" pos:end="345:36">AV_RL16</name><argument_list pos:start="345:37" pos:end="345:49">(<argument pos:start="345:38" pos:end="345:48"><expr pos:start="345:38" pos:end="345:48"><operator pos:start="345:38" pos:end="345:38">&amp;</operator><name pos:start="345:39" pos:end="345:48"><name pos:start="345:39" pos:end="345:45">scratch</name><index pos:start="345:46" pos:end="345:48">[<expr pos:start="345:47" pos:end="345:47"><literal type="number" pos:start="345:47" pos:end="345:47">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="345:51" pos:end="345:51">*</operator> <literal type="number" pos:start="345:53" pos:end="345:53">8</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="347:13" pos:end="347:55"><expr pos:start="347:13" pos:end="347:54"><name pos:start="347:13" pos:end="347:27"><name pos:start="347:13" pos:end="347:13">s</name><operator pos:start="347:14" pos:end="347:15">-&gt;</operator><name pos:start="347:16" pos:end="347:27">video_height</name></name> <operator pos:start="347:29" pos:end="347:29">=</operator> <call pos:start="347:31" pos:end="347:50"><name pos:start="347:31" pos:end="347:37">AV_RL16</name><argument_list pos:start="347:38" pos:end="347:50">(<argument pos:start="347:39" pos:end="347:49"><expr pos:start="347:39" pos:end="347:49"><operator pos:start="347:39" pos:end="347:39">&amp;</operator><name pos:start="347:40" pos:end="347:49"><name pos:start="347:40" pos:end="347:46">scratch</name><index pos:start="347:47" pos:end="347:49">[<expr pos:start="347:48" pos:end="347:48"><literal type="number" pos:start="347:48" pos:end="347:48">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="347:52" pos:end="347:52">*</operator> <literal type="number" pos:start="347:54" pos:end="347:54">8</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="349:13" pos:end="351:49"><expr pos:start="349:13" pos:end="351:48"><call pos:start="349:13" pos:end="351:48"><name pos:start="349:13" pos:end="349:25">debug_ipmovie</name><argument_list pos:start="349:26" pos:end="351:48">(<argument pos:start="349:27" pos:end="349:55"><expr pos:start="349:27" pos:end="349:55"><literal type="string" pos:start="349:27" pos:end="349:55">"video resolution: %d x %d\n"</literal></expr></argument>,

                <argument pos:start="351:17" pos:end="351:30"><expr pos:start="351:17" pos:end="351:30"><name pos:start="351:17" pos:end="351:30"><name pos:start="351:17" pos:end="351:17">s</name><operator pos:start="351:18" pos:end="351:19">-&gt;</operator><name pos:start="351:20" pos:end="351:30">video_width</name></name></expr></argument>, <argument pos:start="351:33" pos:end="351:47"><expr pos:start="351:33" pos:end="351:47"><name pos:start="351:33" pos:end="351:47"><name pos:start="351:33" pos:end="351:33">s</name><operator pos:start="351:34" pos:end="351:35">-&gt;</operator><name pos:start="351:36" pos:end="351:47">video_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="353:13" pos:end="353:18">break;</break>



        <case pos:start="357:9" pos:end="357:31">case <expr pos:start="357:14" pos:end="357:30"><name pos:start="357:14" pos:end="357:30">OPCODE_UNKNOWN_06</name></expr>:</case>

        <case pos:start="359:9" pos:end="359:31">case <expr pos:start="359:14" pos:end="359:30"><name pos:start="359:14" pos:end="359:30">OPCODE_UNKNOWN_0E</name></expr>:</case>

        <case pos:start="361:9" pos:end="361:31">case <expr pos:start="361:14" pos:end="361:30"><name pos:start="361:14" pos:end="361:30">OPCODE_UNKNOWN_10</name></expr>:</case>

        <case pos:start="363:9" pos:end="363:31">case <expr pos:start="363:14" pos:end="363:30"><name pos:start="363:14" pos:end="363:30">OPCODE_UNKNOWN_12</name></expr>:</case>

        <case pos:start="365:9" pos:end="365:31">case <expr pos:start="365:14" pos:end="365:30"><name pos:start="365:14" pos:end="365:30">OPCODE_UNKNOWN_13</name></expr>:</case>

        <case pos:start="367:9" pos:end="367:31">case <expr pos:start="367:14" pos:end="367:30"><name pos:start="367:14" pos:end="367:30">OPCODE_UNKNOWN_14</name></expr>:</case>

        <case pos:start="369:9" pos:end="369:31">case <expr pos:start="369:14" pos:end="369:30"><name pos:start="369:14" pos:end="369:30">OPCODE_UNKNOWN_15</name></expr>:</case>

            <expr_stmt pos:start="371:13" pos:end="371:81"><expr pos:start="371:13" pos:end="371:80"><call pos:start="371:13" pos:end="371:80"><name pos:start="371:13" pos:end="371:25">debug_ipmovie</name><argument_list pos:start="371:26" pos:end="371:80">(<argument pos:start="371:27" pos:end="371:66"><expr pos:start="371:27" pos:end="371:66"><literal type="string" pos:start="371:27" pos:end="371:66">"unknown (but documented) opcode %02X\n"</literal></expr></argument>, <argument pos:start="371:69" pos:end="371:79"><expr pos:start="371:69" pos:end="371:79"><name pos:start="371:69" pos:end="371:79">opcode_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="373:13" pos:end="373:49"><expr pos:start="373:13" pos:end="373:48"><call pos:start="373:13" pos:end="373:48"><name pos:start="373:13" pos:end="373:21">url_fseek</name><argument_list pos:start="373:22" pos:end="373:48">(<argument pos:start="373:23" pos:end="373:24"><expr pos:start="373:23" pos:end="373:24"><name pos:start="373:23" pos:end="373:24">pb</name></expr></argument>, <argument pos:start="373:27" pos:end="373:37"><expr pos:start="373:27" pos:end="373:37"><name pos:start="373:27" pos:end="373:37">opcode_size</name></expr></argument>, <argument pos:start="373:40" pos:end="373:47"><expr pos:start="373:40" pos:end="373:47"><name pos:start="373:40" pos:end="373:47">SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="375:13" pos:end="375:18">break;</break>



        <case pos:start="379:9" pos:end="379:32">case <expr pos:start="379:14" pos:end="379:31"><name pos:start="379:14" pos:end="379:31">OPCODE_SEND_BUFFER</name></expr>:</case>

            <expr_stmt pos:start="381:13" pos:end="381:43"><expr pos:start="381:13" pos:end="381:42"><call pos:start="381:13" pos:end="381:42"><name pos:start="381:13" pos:end="381:25">debug_ipmovie</name><argument_list pos:start="381:26" pos:end="381:42">(<argument pos:start="381:27" pos:end="381:41"><expr pos:start="381:27" pos:end="381:41"><literal type="string" pos:start="381:27" pos:end="381:41">"send buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="383:13" pos:end="383:49"><expr pos:start="383:13" pos:end="383:48"><call pos:start="383:13" pos:end="383:48"><name pos:start="383:13" pos:end="383:21">url_fseek</name><argument_list pos:start="383:22" pos:end="383:48">(<argument pos:start="383:23" pos:end="383:24"><expr pos:start="383:23" pos:end="383:24"><name pos:start="383:23" pos:end="383:24">pb</name></expr></argument>, <argument pos:start="383:27" pos:end="383:37"><expr pos:start="383:27" pos:end="383:37"><name pos:start="383:27" pos:end="383:37">opcode_size</name></expr></argument>, <argument pos:start="383:40" pos:end="383:47"><expr pos:start="383:40" pos:end="383:47"><name pos:start="383:40" pos:end="383:47">SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="385:13" pos:end="385:18">break;</break>



        <case pos:start="389:9" pos:end="389:32">case <expr pos:start="389:14" pos:end="389:31"><name pos:start="389:14" pos:end="389:31">OPCODE_AUDIO_FRAME</name></expr>:</case>

            <expr_stmt pos:start="391:13" pos:end="391:43"><expr pos:start="391:13" pos:end="391:42"><call pos:start="391:13" pos:end="391:42"><name pos:start="391:13" pos:end="391:25">debug_ipmovie</name><argument_list pos:start="391:26" pos:end="391:42">(<argument pos:start="391:27" pos:end="391:41"><expr pos:start="391:27" pos:end="391:41"><literal type="string" pos:start="391:27" pos:end="391:41">"audio frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="395:13" pos:end="395:50">/* log position and move on for now */</comment>

            <expr_stmt pos:start="397:13" pos:end="397:50"><expr pos:start="397:13" pos:end="397:49"><name pos:start="397:13" pos:end="397:33"><name pos:start="397:13" pos:end="397:13">s</name><operator pos:start="397:14" pos:end="397:15">-&gt;</operator><name pos:start="397:16" pos:end="397:33">audio_chunk_offset</name></name> <operator pos:start="397:35" pos:end="397:35">=</operator> <call pos:start="397:37" pos:end="397:49"><name pos:start="397:37" pos:end="397:45">url_ftell</name><argument_list pos:start="397:46" pos:end="397:49">(<argument pos:start="397:47" pos:end="397:48"><expr pos:start="397:47" pos:end="397:48"><name pos:start="397:47" pos:end="397:48">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="399:13" pos:end="399:46"><expr pos:start="399:13" pos:end="399:45"><name pos:start="399:13" pos:end="399:31"><name pos:start="399:13" pos:end="399:13">s</name><operator pos:start="399:14" pos:end="399:15">-&gt;</operator><name pos:start="399:16" pos:end="399:31">audio_chunk_size</name></name> <operator pos:start="399:33" pos:end="399:33">=</operator> <name pos:start="399:35" pos:end="399:45">opcode_size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="401:13" pos:end="401:49"><expr pos:start="401:13" pos:end="401:48"><call pos:start="401:13" pos:end="401:48"><name pos:start="401:13" pos:end="401:21">url_fseek</name><argument_list pos:start="401:22" pos:end="401:48">(<argument pos:start="401:23" pos:end="401:24"><expr pos:start="401:23" pos:end="401:24"><name pos:start="401:23" pos:end="401:24">pb</name></expr></argument>, <argument pos:start="401:27" pos:end="401:37"><expr pos:start="401:27" pos:end="401:37"><name pos:start="401:27" pos:end="401:37">opcode_size</name></expr></argument>, <argument pos:start="401:40" pos:end="401:47"><expr pos:start="401:40" pos:end="401:47"><name pos:start="401:40" pos:end="401:47">SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="403:13" pos:end="403:18">break;</break>



        <case pos:start="407:9" pos:end="407:34">case <expr pos:start="407:14" pos:end="407:33"><name pos:start="407:14" pos:end="407:33">OPCODE_SILENCE_FRAME</name></expr>:</case>

            <expr_stmt pos:start="409:13" pos:end="409:45"><expr pos:start="409:13" pos:end="409:44"><call pos:start="409:13" pos:end="409:44"><name pos:start="409:13" pos:end="409:25">debug_ipmovie</name><argument_list pos:start="409:26" pos:end="409:44">(<argument pos:start="409:27" pos:end="409:43"><expr pos:start="409:27" pos:end="409:43"><literal type="string" pos:start="409:27" pos:end="409:43">"silence frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="411:13" pos:end="411:49"><expr pos:start="411:13" pos:end="411:48"><call pos:start="411:13" pos:end="411:48"><name pos:start="411:13" pos:end="411:21">url_fseek</name><argument_list pos:start="411:22" pos:end="411:48">(<argument pos:start="411:23" pos:end="411:24"><expr pos:start="411:23" pos:end="411:24"><name pos:start="411:23" pos:end="411:24">pb</name></expr></argument>, <argument pos:start="411:27" pos:end="411:37"><expr pos:start="411:27" pos:end="411:37"><name pos:start="411:27" pos:end="411:37">opcode_size</name></expr></argument>, <argument pos:start="411:40" pos:end="411:47"><expr pos:start="411:40" pos:end="411:47"><name pos:start="411:40" pos:end="411:47">SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="413:13" pos:end="413:18">break;</break>



        <case pos:start="417:9" pos:end="417:36">case <expr pos:start="417:14" pos:end="417:35"><name pos:start="417:14" pos:end="417:35">OPCODE_INIT_VIDEO_MODE</name></expr>:</case>

            <expr_stmt pos:start="419:13" pos:end="419:53"><expr pos:start="419:13" pos:end="419:52"><call pos:start="419:13" pos:end="419:52"><name pos:start="419:13" pos:end="419:25">debug_ipmovie</name><argument_list pos:start="419:26" pos:end="419:52">(<argument pos:start="419:27" pos:end="419:51"><expr pos:start="419:27" pos:end="419:51"><literal type="string" pos:start="419:27" pos:end="419:51">"initialize video mode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="421:13" pos:end="421:49"><expr pos:start="421:13" pos:end="421:48"><call pos:start="421:13" pos:end="421:48"><name pos:start="421:13" pos:end="421:21">url_fseek</name><argument_list pos:start="421:22" pos:end="421:48">(<argument pos:start="421:23" pos:end="421:24"><expr pos:start="421:23" pos:end="421:24"><name pos:start="421:23" pos:end="421:24">pb</name></expr></argument>, <argument pos:start="421:27" pos:end="421:37"><expr pos:start="421:27" pos:end="421:37"><name pos:start="421:27" pos:end="421:37">opcode_size</name></expr></argument>, <argument pos:start="421:40" pos:end="421:47"><expr pos:start="421:40" pos:end="421:47"><name pos:start="421:40" pos:end="421:47">SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="423:13" pos:end="423:18">break;</break>



        <case pos:start="427:9" pos:end="427:36">case <expr pos:start="427:14" pos:end="427:35"><name pos:start="427:14" pos:end="427:35">OPCODE_CREATE_GRADIENT</name></expr>:</case>

            <expr_stmt pos:start="429:13" pos:end="429:47"><expr pos:start="429:13" pos:end="429:46"><call pos:start="429:13" pos:end="429:46"><name pos:start="429:13" pos:end="429:25">debug_ipmovie</name><argument_list pos:start="429:26" pos:end="429:46">(<argument pos:start="429:27" pos:end="429:45"><expr pos:start="429:27" pos:end="429:45"><literal type="string" pos:start="429:27" pos:end="429:45">"create gradient\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="431:13" pos:end="431:49"><expr pos:start="431:13" pos:end="431:48"><call pos:start="431:13" pos:end="431:48"><name pos:start="431:13" pos:end="431:21">url_fseek</name><argument_list pos:start="431:22" pos:end="431:48">(<argument pos:start="431:23" pos:end="431:24"><expr pos:start="431:23" pos:end="431:24"><name pos:start="431:23" pos:end="431:24">pb</name></expr></argument>, <argument pos:start="431:27" pos:end="431:37"><expr pos:start="431:27" pos:end="431:37"><name pos:start="431:27" pos:end="431:37">opcode_size</name></expr></argument>, <argument pos:start="431:40" pos:end="431:47"><expr pos:start="431:40" pos:end="431:47"><name pos:start="431:40" pos:end="431:47">SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="433:13" pos:end="433:18">break;</break>



        <case pos:start="437:9" pos:end="437:32">case <expr pos:start="437:14" pos:end="437:31"><name pos:start="437:14" pos:end="437:31">OPCODE_SET_PALETTE</name></expr>:</case>

            <expr_stmt pos:start="439:13" pos:end="439:43"><expr pos:start="439:13" pos:end="439:42"><call pos:start="439:13" pos:end="439:42"><name pos:start="439:13" pos:end="439:25">debug_ipmovie</name><argument_list pos:start="439:26" pos:end="439:42">(<argument pos:start="439:27" pos:end="439:41"><expr pos:start="439:27" pos:end="439:41"><literal type="string" pos:start="439:27" pos:end="439:41">"set palette\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="441:13" pos:end="443:37">/* check for the logical maximum palette size

             * (3 * 256 + 4 bytes) */</comment>

            <if_stmt pos:start="445:13" pos:end="453:13"><if pos:start="445:13" pos:end="453:13">if <condition pos:start="445:16" pos:end="445:36">(<expr pos:start="445:17" pos:end="445:35"><name pos:start="445:17" pos:end="445:27">opcode_size</name> <operator pos:start="445:29" pos:end="445:29">&gt;</operator> <literal type="number" pos:start="445:31" pos:end="445:35">0x304</literal></expr>)</condition> <block pos:start="445:38" pos:end="453:13">{<block_content pos:start="447:17" pos:end="451:22">

                <expr_stmt pos:start="447:17" pos:end="447:79"><expr pos:start="447:17" pos:end="447:78"><call pos:start="447:17" pos:end="447:78"><name pos:start="447:17" pos:end="447:29">debug_ipmovie</name><argument_list pos:start="447:30" pos:end="447:78">(<argument pos:start="447:31" pos:end="447:77"><expr pos:start="447:31" pos:end="447:77"><literal type="string" pos:start="447:31" pos:end="447:77">"demux_ipmovie: set_palette opcode too large\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="449:17" pos:end="449:39"><expr pos:start="449:17" pos:end="449:38"><name pos:start="449:17" pos:end="449:26">chunk_type</name> <operator pos:start="449:28" pos:end="449:28">=</operator> <name pos:start="449:30" pos:end="449:38">CHUNK_BAD</name></expr>;</expr_stmt>

                <break pos:start="451:17" pos:end="451:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="455:13" pos:end="461:13"><if pos:start="455:13" pos:end="461:13">if <condition pos:start="455:16" pos:end="455:68">(<expr pos:start="455:17" pos:end="455:67"><call pos:start="455:17" pos:end="455:52"><name pos:start="455:17" pos:end="455:26">get_buffer</name><argument_list pos:start="455:27" pos:end="455:52">(<argument pos:start="455:28" pos:end="455:29"><expr pos:start="455:28" pos:end="455:29"><name pos:start="455:28" pos:end="455:29">pb</name></expr></argument>, <argument pos:start="455:32" pos:end="455:38"><expr pos:start="455:32" pos:end="455:38"><name pos:start="455:32" pos:end="455:38">scratch</name></expr></argument>, <argument pos:start="455:41" pos:end="455:51"><expr pos:start="455:41" pos:end="455:51"><name pos:start="455:41" pos:end="455:51">opcode_size</name></expr></argument>)</argument_list></call> <operator pos:start="455:54" pos:end="455:55">!=</operator> <name pos:start="455:57" pos:end="455:67">opcode_size</name></expr>)</condition> <block pos:start="455:70" pos:end="461:13">{<block_content pos:start="457:17" pos:end="459:22">

                <expr_stmt pos:start="457:17" pos:end="457:39"><expr pos:start="457:17" pos:end="457:38"><name pos:start="457:17" pos:end="457:26">chunk_type</name> <operator pos:start="457:28" pos:end="457:28">=</operator> <name pos:start="457:30" pos:end="457:38">CHUNK_BAD</name></expr>;</expr_stmt>

                <break pos:start="459:17" pos:end="459:22">break;</break>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="465:13" pos:end="465:63">/* load the palette into internal data structure */</comment>

            <expr_stmt pos:start="467:13" pos:end="467:47"><expr pos:start="467:13" pos:end="467:46"><name pos:start="467:13" pos:end="467:23">first_color</name> <operator pos:start="467:25" pos:end="467:25">=</operator> <call pos:start="467:27" pos:end="467:46"><name pos:start="467:27" pos:end="467:33">AV_RL16</name><argument_list pos:start="467:34" pos:end="467:46">(<argument pos:start="467:35" pos:end="467:45"><expr pos:start="467:35" pos:end="467:45"><operator pos:start="467:35" pos:end="467:35">&amp;</operator><name pos:start="467:36" pos:end="467:45"><name pos:start="467:36" pos:end="467:42">scratch</name><index pos:start="467:43" pos:end="467:45">[<expr pos:start="467:44" pos:end="467:44"><literal type="number" pos:start="467:44" pos:end="467:44">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="469:13" pos:end="469:64"><expr pos:start="469:13" pos:end="469:63"><name pos:start="469:13" pos:end="469:22">last_color</name> <operator pos:start="469:24" pos:end="469:24">=</operator> <name pos:start="469:26" pos:end="469:36">first_color</name> <operator pos:start="469:38" pos:end="469:38">+</operator> <call pos:start="469:40" pos:end="469:59"><name pos:start="469:40" pos:end="469:46">AV_RL16</name><argument_list pos:start="469:47" pos:end="469:59">(<argument pos:start="469:48" pos:end="469:58"><expr pos:start="469:48" pos:end="469:58"><operator pos:start="469:48" pos:end="469:48">&amp;</operator><name pos:start="469:49" pos:end="469:58"><name pos:start="469:49" pos:end="469:55">scratch</name><index pos:start="469:56" pos:end="469:58">[<expr pos:start="469:57" pos:end="469:57"><literal type="number" pos:start="469:57" pos:end="469:57">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="469:61" pos:end="469:61">-</operator> <literal type="number" pos:start="469:63" pos:end="469:63">1</literal></expr>;</expr_stmt>

            <comment type="block" pos:start="471:13" pos:end="471:61">/* sanity check (since they are 16 bit values) */</comment>

            <if_stmt pos:start="473:13" pos:end="483:13"><if pos:start="473:13" pos:end="483:13">if <condition pos:start="473:16" pos:end="473:60">(<expr pos:start="473:17" pos:end="473:59"><operator pos:start="473:17" pos:end="473:17">(</operator><name pos:start="473:18" pos:end="473:28">first_color</name> <operator pos:start="473:30" pos:end="473:30">&gt;</operator> <literal type="number" pos:start="473:32" pos:end="473:35">0xFF</literal><operator pos:start="473:36" pos:end="473:36">)</operator> <operator pos:start="473:38" pos:end="473:39">||</operator> <operator pos:start="473:41" pos:end="473:41">(</operator><name pos:start="473:42" pos:end="473:51">last_color</name> <operator pos:start="473:53" pos:end="473:53">&gt;</operator> <literal type="number" pos:start="473:55" pos:end="473:58">0xFF</literal><operator pos:start="473:59" pos:end="473:59">)</operator></expr>)</condition> <block pos:start="473:62" pos:end="483:13">{<block_content pos:start="475:17" pos:end="481:22">

                <expr_stmt pos:start="475:17" pos:end="477:45"><expr pos:start="475:17" pos:end="477:44"><call pos:start="475:17" pos:end="477:44"><name pos:start="475:17" pos:end="475:29">debug_ipmovie</name><argument_list pos:start="475:30" pos:end="477:44">(<argument pos:start="475:31" pos:end="475:92"><expr pos:start="475:31" pos:end="475:92"><literal type="string" pos:start="475:31" pos:end="475:92">"demux_ipmovie: set_palette indices out of range (%d -&gt; %d)\n"</literal></expr></argument>,

                    <argument pos:start="477:21" pos:end="477:31"><expr pos:start="477:21" pos:end="477:31"><name pos:start="477:21" pos:end="477:31">first_color</name></expr></argument>, <argument pos:start="477:34" pos:end="477:43"><expr pos:start="477:34" pos:end="477:43"><name pos:start="477:34" pos:end="477:43">last_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="479:17" pos:end="479:39"><expr pos:start="479:17" pos:end="479:38"><name pos:start="479:17" pos:end="479:26">chunk_type</name> <operator pos:start="479:28" pos:end="479:28">=</operator> <name pos:start="479:30" pos:end="479:38">CHUNK_BAD</name></expr>;</expr_stmt>

                <break pos:start="481:17" pos:end="481:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="485:13" pos:end="485:18"><expr pos:start="485:13" pos:end="485:17"><name pos:start="485:13" pos:end="485:13">j</name> <operator pos:start="485:15" pos:end="485:15">=</operator> <literal type="number" pos:start="485:17" pos:end="485:17">4</literal></expr>;</expr_stmt>  <comment type="block" pos:start="485:21" pos:end="485:54">/* offset of first palette data */</comment>

            <for pos:start="487:13" pos:end="501:13">for <control pos:start="487:17" pos:end="487:55">(<init pos:start="487:18" pos:end="487:33"><expr pos:start="487:18" pos:end="487:32"><name pos:start="487:18" pos:end="487:18">i</name> <operator pos:start="487:20" pos:end="487:20">=</operator> <name pos:start="487:22" pos:end="487:32">first_color</name></expr>;</init> <condition pos:start="487:35" pos:end="487:50"><expr pos:start="487:35" pos:end="487:49"><name pos:start="487:35" pos:end="487:35">i</name> <operator pos:start="487:37" pos:end="487:38">&lt;=</operator> <name pos:start="487:40" pos:end="487:49">last_color</name></expr>;</condition> <incr pos:start="487:52" pos:end="487:54"><expr pos:start="487:52" pos:end="487:54"><name pos:start="487:52" pos:end="487:52">i</name><operator pos:start="487:53" pos:end="487:54">++</operator></expr></incr>)</control> <block pos:start="487:57" pos:end="501:13">{<block_content pos:start="493:17" pos:end="499:75">

                <comment type="block" pos:start="489:17" pos:end="491:62">/* the palette is stored as a 6-bit VGA palette, thus each

                 * component is shifted up to a 8-bit range */</comment>

                <expr_stmt pos:start="493:17" pos:end="493:37"><expr pos:start="493:17" pos:end="493:36"><name pos:start="493:17" pos:end="493:17">r</name> <operator pos:start="493:19" pos:end="493:19">=</operator> <name pos:start="493:21" pos:end="493:32"><name pos:start="493:21" pos:end="493:27">scratch</name><index pos:start="493:28" pos:end="493:32">[<expr pos:start="493:29" pos:end="493:31"><name pos:start="493:29" pos:end="493:29">j</name><operator pos:start="493:30" pos:end="493:31">++</operator></expr>]</index></name> <operator pos:start="493:34" pos:end="493:34">*</operator> <literal type="number" pos:start="493:36" pos:end="493:36">4</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="495:17" pos:end="495:37"><expr pos:start="495:17" pos:end="495:36"><name pos:start="495:17" pos:end="495:17">g</name> <operator pos:start="495:19" pos:end="495:19">=</operator> <name pos:start="495:21" pos:end="495:32"><name pos:start="495:21" pos:end="495:27">scratch</name><index pos:start="495:28" pos:end="495:32">[<expr pos:start="495:29" pos:end="495:31"><name pos:start="495:29" pos:end="495:29">j</name><operator pos:start="495:30" pos:end="495:31">++</operator></expr>]</index></name> <operator pos:start="495:34" pos:end="495:34">*</operator> <literal type="number" pos:start="495:36" pos:end="495:36">4</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="497:17" pos:end="497:37"><expr pos:start="497:17" pos:end="497:36"><name pos:start="497:17" pos:end="497:17">b</name> <operator pos:start="497:19" pos:end="497:19">=</operator> <name pos:start="497:21" pos:end="497:32"><name pos:start="497:21" pos:end="497:27">scratch</name><index pos:start="497:28" pos:end="497:32">[<expr pos:start="497:29" pos:end="497:31"><name pos:start="497:29" pos:end="497:29">j</name><operator pos:start="497:30" pos:end="497:31">++</operator></expr>]</index></name> <operator pos:start="497:34" pos:end="497:34">*</operator> <literal type="number" pos:start="497:36" pos:end="497:36">4</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="499:17" pos:end="499:75"><expr pos:start="499:17" pos:end="499:74"><name pos:start="499:17" pos:end="499:45"><name pos:start="499:17" pos:end="499:17">s</name><operator pos:start="499:18" pos:end="499:19">-&gt;</operator><name pos:start="499:20" pos:end="499:34">palette_control</name><operator pos:start="499:35" pos:end="499:35">.</operator><name pos:start="499:36" pos:end="499:42">palette</name><index pos:start="499:43" pos:end="499:45">[<expr pos:start="499:44" pos:end="499:44"><name pos:start="499:44" pos:end="499:44">i</name></expr>]</index></name> <operator pos:start="499:47" pos:end="499:47">=</operator> <operator pos:start="499:49" pos:end="499:49">(</operator><name pos:start="499:50" pos:end="499:50">r</name> <operator pos:start="499:52" pos:end="499:53">&lt;&lt;</operator> <literal type="number" pos:start="499:55" pos:end="499:56">16</literal><operator pos:start="499:57" pos:end="499:57">)</operator> <operator pos:start="499:59" pos:end="499:59">|</operator> <operator pos:start="499:61" pos:end="499:61">(</operator><name pos:start="499:62" pos:end="499:62">g</name> <operator pos:start="499:64" pos:end="499:65">&lt;&lt;</operator> <literal type="number" pos:start="499:67" pos:end="499:67">8</literal><operator pos:start="499:68" pos:end="499:68">)</operator> <operator pos:start="499:70" pos:end="499:70">|</operator> <operator pos:start="499:72" pos:end="499:72">(</operator><name pos:start="499:73" pos:end="499:73">b</name><operator pos:start="499:74" pos:end="499:74">)</operator></expr>;</expr_stmt>

            </block_content>}</block></for>

            <comment type="block" pos:start="503:13" pos:end="503:43">/* indicate a palette change */</comment>

            <expr_stmt pos:start="505:13" pos:end="505:51"><expr pos:start="505:13" pos:end="505:50"><name pos:start="505:13" pos:end="505:46"><name pos:start="505:13" pos:end="505:13">s</name><operator pos:start="505:14" pos:end="505:15">-&gt;</operator><name pos:start="505:16" pos:end="505:30">palette_control</name><operator pos:start="505:31" pos:end="505:31">.</operator><name pos:start="505:32" pos:end="505:46">palette_changed</name></name> <operator pos:start="505:48" pos:end="505:48">=</operator> <literal type="number" pos:start="505:50" pos:end="505:50">1</literal></expr>;</expr_stmt>

            <break pos:start="507:13" pos:end="507:18">break;</break>



        <case pos:start="511:9" pos:end="511:43">case <expr pos:start="511:14" pos:end="511:42"><name pos:start="511:14" pos:end="511:42">OPCODE_SET_PALETTE_COMPRESSED</name></expr>:</case>

            <expr_stmt pos:start="513:13" pos:end="513:54"><expr pos:start="513:13" pos:end="513:53"><call pos:start="513:13" pos:end="513:53"><name pos:start="513:13" pos:end="513:25">debug_ipmovie</name><argument_list pos:start="513:26" pos:end="513:53">(<argument pos:start="513:27" pos:end="513:52"><expr pos:start="513:27" pos:end="513:52"><literal type="string" pos:start="513:27" pos:end="513:52">"set palette compressed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="515:13" pos:end="515:49"><expr pos:start="515:13" pos:end="515:48"><call pos:start="515:13" pos:end="515:48"><name pos:start="515:13" pos:end="515:21">url_fseek</name><argument_list pos:start="515:22" pos:end="515:48">(<argument pos:start="515:23" pos:end="515:24"><expr pos:start="515:23" pos:end="515:24"><name pos:start="515:23" pos:end="515:24">pb</name></expr></argument>, <argument pos:start="515:27" pos:end="515:37"><expr pos:start="515:27" pos:end="515:37"><name pos:start="515:27" pos:end="515:37">opcode_size</name></expr></argument>, <argument pos:start="515:40" pos:end="515:47"><expr pos:start="515:40" pos:end="515:47"><name pos:start="515:40" pos:end="515:47">SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="517:13" pos:end="517:18">break;</break>



        <case pos:start="521:9" pos:end="521:37">case <expr pos:start="521:14" pos:end="521:36"><name pos:start="521:14" pos:end="521:36">OPCODE_SET_DECODING_MAP</name></expr>:</case>

            <expr_stmt pos:start="523:13" pos:end="523:48"><expr pos:start="523:13" pos:end="523:47"><call pos:start="523:13" pos:end="523:47"><name pos:start="523:13" pos:end="523:25">debug_ipmovie</name><argument_list pos:start="523:26" pos:end="523:47">(<argument pos:start="523:27" pos:end="523:46"><expr pos:start="523:27" pos:end="523:46"><literal type="string" pos:start="523:27" pos:end="523:46">"set decoding map\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="527:13" pos:end="527:50">/* log position and move on for now */</comment>

            <expr_stmt pos:start="529:13" pos:end="529:55"><expr pos:start="529:13" pos:end="529:54"><name pos:start="529:13" pos:end="529:38"><name pos:start="529:13" pos:end="529:13">s</name><operator pos:start="529:14" pos:end="529:15">-&gt;</operator><name pos:start="529:16" pos:end="529:38">decode_map_chunk_offset</name></name> <operator pos:start="529:40" pos:end="529:40">=</operator> <call pos:start="529:42" pos:end="529:54"><name pos:start="529:42" pos:end="529:50">url_ftell</name><argument_list pos:start="529:51" pos:end="529:54">(<argument pos:start="529:52" pos:end="529:53"><expr pos:start="529:52" pos:end="529:53"><name pos:start="529:52" pos:end="529:53">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="531:13" pos:end="531:51"><expr pos:start="531:13" pos:end="531:50"><name pos:start="531:13" pos:end="531:36"><name pos:start="531:13" pos:end="531:13">s</name><operator pos:start="531:14" pos:end="531:15">-&gt;</operator><name pos:start="531:16" pos:end="531:36">decode_map_chunk_size</name></name> <operator pos:start="531:38" pos:end="531:38">=</operator> <name pos:start="531:40" pos:end="531:50">opcode_size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="533:13" pos:end="533:49"><expr pos:start="533:13" pos:end="533:48"><call pos:start="533:13" pos:end="533:48"><name pos:start="533:13" pos:end="533:21">url_fseek</name><argument_list pos:start="533:22" pos:end="533:48">(<argument pos:start="533:23" pos:end="533:24"><expr pos:start="533:23" pos:end="533:24"><name pos:start="533:23" pos:end="533:24">pb</name></expr></argument>, <argument pos:start="533:27" pos:end="533:37"><expr pos:start="533:27" pos:end="533:37"><name pos:start="533:27" pos:end="533:37">opcode_size</name></expr></argument>, <argument pos:start="533:40" pos:end="533:47"><expr pos:start="533:40" pos:end="533:47"><name pos:start="533:40" pos:end="533:47">SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="535:13" pos:end="535:18">break;</break>



        <case pos:start="539:9" pos:end="539:31">case <expr pos:start="539:14" pos:end="539:30"><name pos:start="539:14" pos:end="539:30">OPCODE_VIDEO_DATA</name></expr>:</case>

            <expr_stmt pos:start="541:13" pos:end="541:46"><expr pos:start="541:13" pos:end="541:45"><call pos:start="541:13" pos:end="541:45"><name pos:start="541:13" pos:end="541:25">debug_ipmovie</name><argument_list pos:start="541:26" pos:end="541:45">(<argument pos:start="541:27" pos:end="541:44"><expr pos:start="541:27" pos:end="541:44"><literal type="string" pos:start="541:27" pos:end="541:44">"set video data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="545:13" pos:end="545:50">/* log position and move on for now */</comment>

            <expr_stmt pos:start="547:13" pos:end="547:50"><expr pos:start="547:13" pos:end="547:49"><name pos:start="547:13" pos:end="547:33"><name pos:start="547:13" pos:end="547:13">s</name><operator pos:start="547:14" pos:end="547:15">-&gt;</operator><name pos:start="547:16" pos:end="547:33">video_chunk_offset</name></name> <operator pos:start="547:35" pos:end="547:35">=</operator> <call pos:start="547:37" pos:end="547:49"><name pos:start="547:37" pos:end="547:45">url_ftell</name><argument_list pos:start="547:46" pos:end="547:49">(<argument pos:start="547:47" pos:end="547:48"><expr pos:start="547:47" pos:end="547:48"><name pos:start="547:47" pos:end="547:48">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="549:13" pos:end="549:46"><expr pos:start="549:13" pos:end="549:45"><name pos:start="549:13" pos:end="549:31"><name pos:start="549:13" pos:end="549:13">s</name><operator pos:start="549:14" pos:end="549:15">-&gt;</operator><name pos:start="549:16" pos:end="549:31">video_chunk_size</name></name> <operator pos:start="549:33" pos:end="549:33">=</operator> <name pos:start="549:35" pos:end="549:45">opcode_size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="551:13" pos:end="551:49"><expr pos:start="551:13" pos:end="551:48"><call pos:start="551:13" pos:end="551:48"><name pos:start="551:13" pos:end="551:21">url_fseek</name><argument_list pos:start="551:22" pos:end="551:48">(<argument pos:start="551:23" pos:end="551:24"><expr pos:start="551:23" pos:end="551:24"><name pos:start="551:23" pos:end="551:24">pb</name></expr></argument>, <argument pos:start="551:27" pos:end="551:37"><expr pos:start="551:27" pos:end="551:37"><name pos:start="551:27" pos:end="551:37">opcode_size</name></expr></argument>, <argument pos:start="551:40" pos:end="551:47"><expr pos:start="551:40" pos:end="551:47"><name pos:start="551:40" pos:end="551:47">SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="553:13" pos:end="553:18">break;</break>



        <default pos:start="557:9" pos:end="557:16">default:</default>

            <expr_stmt pos:start="559:13" pos:end="559:55"><expr pos:start="559:13" pos:end="559:54"><call pos:start="559:13" pos:end="559:54"><name pos:start="559:13" pos:end="559:25">debug_ipmovie</name><argument_list pos:start="559:26" pos:end="559:54">(<argument pos:start="559:27" pos:end="559:53"><expr pos:start="559:27" pos:end="559:53"><literal type="string" pos:start="559:27" pos:end="559:53">"*** unknown opcode type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="561:13" pos:end="561:35"><expr pos:start="561:13" pos:end="561:34"><name pos:start="561:13" pos:end="561:22">chunk_type</name> <operator pos:start="561:24" pos:end="561:24">=</operator> <name pos:start="561:26" pos:end="561:34">CHUNK_BAD</name></expr>;</expr_stmt>

            <break pos:start="563:13" pos:end="563:18">break;</break>



        </block_content>}</block></switch>

    </block_content>}</block></while>



    <comment type="block" pos:start="573:5" pos:end="573:52">/* make a note of where the stream is sitting */</comment>

    <expr_stmt pos:start="575:5" pos:end="575:41"><expr pos:start="575:5" pos:end="575:40"><name pos:start="575:5" pos:end="575:24"><name pos:start="575:5" pos:end="575:5">s</name><operator pos:start="575:6" pos:end="575:7">-&gt;</operator><name pos:start="575:8" pos:end="575:24">next_chunk_offset</name></name> <operator pos:start="575:26" pos:end="575:26">=</operator> <call pos:start="575:28" pos:end="575:40"><name pos:start="575:28" pos:end="575:36">url_ftell</name><argument_list pos:start="575:37" pos:end="575:40">(<argument pos:start="575:38" pos:end="575:39"><expr pos:start="575:38" pos:end="575:39"><name pos:start="575:38" pos:end="575:39">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="579:5" pos:end="579:51">/* dispatch the first of any pending packets */</comment>

    <if_stmt pos:start="581:5" pos:end="583:53"><if pos:start="581:5" pos:end="583:53">if <condition pos:start="581:8" pos:end="581:72">(<expr pos:start="581:9" pos:end="581:71"><operator pos:start="581:9" pos:end="581:9">(</operator><name pos:start="581:10" pos:end="581:19">chunk_type</name> <operator pos:start="581:21" pos:end="581:22">==</operator> <name pos:start="581:24" pos:end="581:34">CHUNK_VIDEO</name><operator pos:start="581:35" pos:end="581:35">)</operator> <operator pos:start="581:37" pos:end="581:38">||</operator> <operator pos:start="581:40" pos:end="581:40">(</operator><name pos:start="581:41" pos:end="581:50">chunk_type</name> <operator pos:start="581:52" pos:end="581:53">==</operator> <name pos:start="581:55" pos:end="581:70">CHUNK_AUDIO_ONLY</name><operator pos:start="581:71" pos:end="581:71">)</operator></expr>)</condition><block type="pseudo" pos:start="583:9" pos:end="583:53"><block_content pos:start="583:9" pos:end="583:53">

        <expr_stmt pos:start="583:9" pos:end="583:53"><expr pos:start="583:9" pos:end="583:52"><name pos:start="583:9" pos:end="583:18">chunk_type</name> <operator pos:start="583:20" pos:end="583:20">=</operator> <call pos:start="583:22" pos:end="583:52"><name pos:start="583:22" pos:end="583:40">load_ipmovie_packet</name><argument_list pos:start="583:41" pos:end="583:52">(<argument pos:start="583:42" pos:end="583:42"><expr pos:start="583:42" pos:end="583:42"><name pos:start="583:42" pos:end="583:42">s</name></expr></argument>, <argument pos:start="583:45" pos:end="583:46"><expr pos:start="583:45" pos:end="583:46"><name pos:start="583:45" pos:end="583:46">pb</name></expr></argument>, <argument pos:start="583:49" pos:end="583:51"><expr pos:start="583:49" pos:end="583:51"><name pos:start="583:49" pos:end="583:51">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <return pos:start="587:5" pos:end="587:22">return <expr pos:start="587:12" pos:end="587:21"><name pos:start="587:12" pos:end="587:21">chunk_type</name></expr>;</return>

</block_content>}</block></function>
</unit>
