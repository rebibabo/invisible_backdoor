<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13633.c" pos:tabs="8"><function pos:start="1:1" pos:end="147:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:35">vhost_client_set_memory</name><parameter_list pos:start="1:36" pos:end="9:51">(<parameter pos:start="1:37" pos:end="1:63"><decl pos:start="1:37" pos:end="1:63"><type pos:start="1:37" pos:end="1:63"><name pos:start="1:37" pos:end="1:55">CPUPhysMemoryClient</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:63">client</name></decl></parameter>,

                                    <parameter pos:start="3:37" pos:end="3:65"><decl pos:start="3:37" pos:end="3:65"><type pos:start="3:37" pos:end="3:65"><name pos:start="3:37" pos:end="3:54">target_phys_addr_t</name></type> <name pos:start="3:56" pos:end="3:65">start_addr</name></decl></parameter>,

                                    <parameter pos:start="5:37" pos:end="5:51"><decl pos:start="5:37" pos:end="5:51"><type pos:start="5:37" pos:end="5:51"><name pos:start="5:37" pos:end="5:46">ram_addr_t</name></type> <name pos:start="5:48" pos:end="5:51">size</name></decl></parameter>,

                                    <parameter pos:start="7:37" pos:end="7:58"><decl pos:start="7:37" pos:end="7:58"><type pos:start="7:37" pos:end="7:58"><name pos:start="7:37" pos:end="7:46">ram_addr_t</name></type> <name pos:start="7:48" pos:end="7:58">phys_offset</name></decl></parameter>,

                                    <parameter pos:start="9:37" pos:end="9:50"><decl pos:start="9:37" pos:end="9:50"><type pos:start="9:37" pos:end="9:50"><name pos:start="9:37" pos:end="9:40">bool</name></type> <name pos:start="9:42" pos:end="9:50">log_dirty</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="147:1">{<block_content pos:start="13:5" pos:end="145:5">

    <decl_stmt pos:start="13:5" pos:end="13:75"><decl pos:start="13:5" pos:end="13:74"><type pos:start="13:5" pos:end="13:22"><name pos:start="13:5" pos:end="13:20"><name pos:start="13:5" pos:end="13:10">struct</name> <name pos:start="13:12" pos:end="13:20">vhost_dev</name></name> <modifier pos:start="13:22" pos:end="13:22">*</modifier></type><name pos:start="13:23" pos:end="13:25">dev</name> <init pos:start="13:27" pos:end="13:74">= <expr pos:start="13:29" pos:end="13:74"><call pos:start="13:29" pos:end="13:74"><name pos:start="13:29" pos:end="13:40">container_of</name><argument_list pos:start="13:41" pos:end="13:74">(<argument pos:start="13:42" pos:end="13:47"><expr pos:start="13:42" pos:end="13:47"><name pos:start="13:42" pos:end="13:47">client</name></expr></argument>, <argument pos:start="13:50" pos:end="13:65"><expr pos:start="13:50" pos:end="13:65">struct <name pos:start="13:57" pos:end="13:65">vhost_dev</name></expr></argument>, <argument pos:start="13:68" pos:end="13:73"><expr pos:start="13:68" pos:end="13:73"><name pos:start="13:68" pos:end="13:73">client</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:55"><decl pos:start="15:5" pos:end="15:54"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:14">ram_addr_t</name></type> <name pos:start="15:16" pos:end="15:20">flags</name> <init pos:start="15:22" pos:end="15:54">= <expr pos:start="15:24" pos:end="15:54"><name pos:start="15:24" pos:end="15:34">phys_offset</name> <operator pos:start="15:36" pos:end="15:36">&amp;</operator> <operator pos:start="15:38" pos:end="15:38">~</operator><name pos:start="15:39" pos:end="15:54">TARGET_PAGE_MASK</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="19:63"><decl pos:start="17:5" pos:end="19:62"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">s</name> <init pos:start="17:11" pos:end="19:62">= <expr pos:start="17:13" pos:end="19:62"><call pos:start="17:13" pos:end="17:50"><name pos:start="17:13" pos:end="17:20">offsetof</name><argument_list pos:start="17:21" pos:end="17:50">(<argument pos:start="17:22" pos:end="17:40"><expr pos:start="17:22" pos:end="17:40">struct <name pos:start="17:29" pos:end="17:40">vhost_memory</name></expr></argument>, <argument pos:start="17:43" pos:end="17:49"><expr pos:start="17:43" pos:end="17:49"><name pos:start="17:43" pos:end="17:49">regions</name></expr></argument>)</argument_list></call> <operator pos:start="17:52" pos:end="17:52">+</operator>

        <operator pos:start="19:9" pos:end="19:9">(</operator><name pos:start="19:10" pos:end="19:27"><name pos:start="19:10" pos:end="19:12">dev</name><operator pos:start="19:13" pos:end="19:14">-&gt;</operator><name pos:start="19:15" pos:end="19:17">mem</name><operator pos:start="19:18" pos:end="19:19">-&gt;</operator><name pos:start="19:20" pos:end="19:27">nregions</name></name> <operator pos:start="19:29" pos:end="19:29">+</operator> <literal type="number" pos:start="19:31" pos:end="19:31">1</literal><operator pos:start="19:32" pos:end="19:32">)</operator> <operator pos:start="19:34" pos:end="19:34">*</operator> <sizeof pos:start="19:36" pos:end="19:62">sizeof <name pos:start="19:43" pos:end="19:62"><name pos:start="19:43" pos:end="19:45">dev</name><operator pos:start="19:46" pos:end="19:47">-&gt;</operator><name pos:start="19:48" pos:end="19:50">mem</name><operator pos:start="19:51" pos:end="19:52">-&gt;</operator><name pos:start="19:53" pos:end="19:59">regions</name><index pos:start="19:60" pos:end="19:62">[<expr pos:start="19:61" pos:end="19:61"><literal type="number" pos:start="19:61" pos:end="19:61">0</literal></expr>]</index></name></sizeof></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:22"><decl pos:start="21:5" pos:end="21:21"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">uint64_t</name></type> <name pos:start="21:14" pos:end="21:21">log_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:10"><decl pos:start="23:5" pos:end="23:9"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:9">r</name></decl>;</decl_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:38"><expr pos:start="27:5" pos:end="27:37"><name pos:start="27:5" pos:end="27:12"><name pos:start="27:5" pos:end="27:7">dev</name><operator pos:start="27:8" pos:end="27:9">-&gt;</operator><name pos:start="27:10" pos:end="27:12">mem</name></name> <operator pos:start="27:14" pos:end="27:14">=</operator> <call pos:start="27:16" pos:end="27:37"><name pos:start="27:16" pos:end="27:24">g_realloc</name><argument_list pos:start="27:25" pos:end="27:37">(<argument pos:start="27:26" pos:end="27:33"><expr pos:start="27:26" pos:end="27:33"><name pos:start="27:26" pos:end="27:33"><name pos:start="27:26" pos:end="27:28">dev</name><operator pos:start="27:29" pos:end="27:30">-&gt;</operator><name pos:start="27:31" pos:end="27:33">mem</name></name></expr></argument>, <argument pos:start="27:36" pos:end="27:36"><expr pos:start="27:36" pos:end="27:36"><name pos:start="27:36" pos:end="27:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="31:5" pos:end="35:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:18">(<expr pos:start="31:9" pos:end="31:17"><name pos:start="31:9" pos:end="31:17">log_dirty</name></expr>)</condition> <block pos:start="31:20" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:34">

        <expr_stmt pos:start="33:9" pos:end="33:34"><expr pos:start="33:9" pos:end="33:33"><name pos:start="33:9" pos:end="33:13">flags</name> <operator pos:start="33:15" pos:end="33:15">=</operator> <name pos:start="33:17" pos:end="33:33">IO_MEM_UNASSIGNED</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:17"><expr pos:start="39:5" pos:end="39:16"><call pos:start="39:5" pos:end="39:16"><name pos:start="39:5" pos:end="39:10">assert</name><argument_list pos:start="39:11" pos:end="39:16">(<argument pos:start="39:12" pos:end="39:15"><expr pos:start="39:12" pos:end="39:15"><name pos:start="39:12" pos:end="39:15">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="43:5" pos:end="43:84">/* Optimize no-change case. At least cirrus_vga does this a lot at this time. */</comment>

    <if_stmt pos:start="45:5" pos:end="67:5"><if pos:start="45:5" pos:end="57:5">if <condition pos:start="45:8" pos:end="45:28">(<expr pos:start="45:9" pos:end="45:27"><name pos:start="45:9" pos:end="45:13">flags</name> <operator pos:start="45:15" pos:end="45:16">==</operator> <name pos:start="45:18" pos:end="45:27">IO_MEM_RAM</name></expr>)</condition> <block pos:start="45:30" pos:end="57:5">{<block_content pos:start="47:9" pos:end="55:9">

        <if_stmt pos:start="47:9" pos:end="55:9"><if pos:start="47:9" pos:end="55:9">if <condition pos:start="47:12" pos:end="49:76">(<expr pos:start="47:13" pos:end="49:75"><operator pos:start="47:13" pos:end="47:13">!</operator><call pos:start="47:14" pos:end="49:75"><name pos:start="47:14" pos:end="47:33">vhost_dev_cmp_memory</name><argument_list pos:start="47:34" pos:end="49:75">(<argument pos:start="47:35" pos:end="47:37"><expr pos:start="47:35" pos:end="47:37"><name pos:start="47:35" pos:end="47:37">dev</name></expr></argument>, <argument pos:start="47:40" pos:end="47:49"><expr pos:start="47:40" pos:end="47:49"><name pos:start="47:40" pos:end="47:49">start_addr</name></expr></argument>, <argument pos:start="47:52" pos:end="47:55"><expr pos:start="47:52" pos:end="47:55"><name pos:start="47:52" pos:end="47:55">size</name></expr></argument>,

                                  <argument pos:start="49:35" pos:end="49:74"><expr pos:start="49:35" pos:end="49:74"><operator pos:start="49:35" pos:end="49:35">(</operator><name pos:start="49:36" pos:end="49:44">uintptr_t</name><operator pos:start="49:45" pos:end="49:45">)</operator><call pos:start="49:46" pos:end="49:74"><name pos:start="49:46" pos:end="49:61">qemu_get_ram_ptr</name><argument_list pos:start="49:62" pos:end="49:74">(<argument pos:start="49:63" pos:end="49:73"><expr pos:start="49:63" pos:end="49:73"><name pos:start="49:63" pos:end="49:73">phys_offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="49:78" pos:end="55:9">{<block_content pos:start="53:13" pos:end="53:19">

            <comment type="block" pos:start="51:13" pos:end="51:65">/* Region exists with same address. Nothing to do. */</comment>

            <return pos:start="53:13" pos:end="53:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="57:7" pos:end="67:5">else <block pos:start="57:12" pos:end="67:5">{<block_content pos:start="59:9" pos:end="65:9">

        <if_stmt pos:start="59:9" pos:end="65:9"><if pos:start="59:9" pos:end="65:9">if <condition pos:start="59:12" pos:end="59:55">(<expr pos:start="59:13" pos:end="59:54"><operator pos:start="59:13" pos:end="59:13">!</operator><call pos:start="59:14" pos:end="59:54"><name pos:start="59:14" pos:end="59:31">vhost_dev_find_reg</name><argument_list pos:start="59:32" pos:end="59:54">(<argument pos:start="59:33" pos:end="59:35"><expr pos:start="59:33" pos:end="59:35"><name pos:start="59:33" pos:end="59:35">dev</name></expr></argument>, <argument pos:start="59:38" pos:end="59:47"><expr pos:start="59:38" pos:end="59:47"><name pos:start="59:38" pos:end="59:47">start_addr</name></expr></argument>, <argument pos:start="59:50" pos:end="59:53"><expr pos:start="59:50" pos:end="59:53"><name pos:start="59:50" pos:end="59:53">size</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="59:57" pos:end="65:9">{<block_content pos:start="63:13" pos:end="63:19">

            <comment type="block" pos:start="61:13" pos:end="61:70">/* Removing region that we don't access. Nothing to do. */</comment>

            <return pos:start="63:13" pos:end="63:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:53"><expr pos:start="71:5" pos:end="71:52"><call pos:start="71:5" pos:end="71:52"><name pos:start="71:5" pos:end="71:29">vhost_dev_unassign_memory</name><argument_list pos:start="71:30" pos:end="71:52">(<argument pos:start="71:31" pos:end="71:33"><expr pos:start="71:31" pos:end="71:33"><name pos:start="71:31" pos:end="71:33">dev</name></expr></argument>, <argument pos:start="71:36" pos:end="71:45"><expr pos:start="71:36" pos:end="71:45"><name pos:start="71:36" pos:end="71:45">start_addr</name></expr></argument>, <argument pos:start="71:48" pos:end="71:51"><expr pos:start="71:48" pos:end="71:51"><name pos:start="71:48" pos:end="71:51">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="73:5" pos:end="87:5"><if pos:start="73:5" pos:end="81:5">if <condition pos:start="73:8" pos:end="73:28">(<expr pos:start="73:9" pos:end="73:27"><name pos:start="73:9" pos:end="73:13">flags</name> <operator pos:start="73:15" pos:end="73:16">==</operator> <name pos:start="73:18" pos:end="73:27">IO_MEM_RAM</name></expr>)</condition> <block pos:start="73:30" pos:end="81:5">{<block_content pos:start="77:9" pos:end="79:74">

        <comment type="block" pos:start="75:9" pos:end="75:64">/* Add given mapping, merging adjacent regions if any */</comment>

        <expr_stmt pos:start="77:9" pos:end="79:74"><expr pos:start="77:9" pos:end="79:73"><call pos:start="77:9" pos:end="79:73"><name pos:start="77:9" pos:end="77:31">vhost_dev_assign_memory</name><argument_list pos:start="77:32" pos:end="79:73">(<argument pos:start="77:33" pos:end="77:35"><expr pos:start="77:33" pos:end="77:35"><name pos:start="77:33" pos:end="77:35">dev</name></expr></argument>, <argument pos:start="77:38" pos:end="77:47"><expr pos:start="77:38" pos:end="77:47"><name pos:start="77:38" pos:end="77:47">start_addr</name></expr></argument>, <argument pos:start="77:50" pos:end="77:53"><expr pos:start="77:50" pos:end="77:53"><name pos:start="77:50" pos:end="77:53">size</name></expr></argument>,

                                <argument pos:start="79:33" pos:end="79:72"><expr pos:start="79:33" pos:end="79:72"><operator pos:start="79:33" pos:end="79:33">(</operator><name pos:start="79:34" pos:end="79:42">uintptr_t</name><operator pos:start="79:43" pos:end="79:43">)</operator><call pos:start="79:44" pos:end="79:72"><name pos:start="79:44" pos:end="79:59">qemu_get_ram_ptr</name><argument_list pos:start="79:60" pos:end="79:72">(<argument pos:start="79:61" pos:end="79:71"><expr pos:start="79:61" pos:end="79:71"><name pos:start="79:61" pos:end="79:71">phys_offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="81:7" pos:end="87:5">else <block pos:start="81:12" pos:end="87:5">{<block_content pos:start="85:9" pos:end="85:57">

        <comment type="block" pos:start="83:9" pos:end="83:57">/* Remove old mapping for this memory, if any. */</comment>

        <expr_stmt pos:start="85:9" pos:end="85:57"><expr pos:start="85:9" pos:end="85:56"><call pos:start="85:9" pos:end="85:56"><name pos:start="85:9" pos:end="85:33">vhost_dev_unassign_memory</name><argument_list pos:start="85:34" pos:end="85:56">(<argument pos:start="85:35" pos:end="85:37"><expr pos:start="85:35" pos:end="85:37"><name pos:start="85:35" pos:end="85:37">dev</name></expr></argument>, <argument pos:start="85:40" pos:end="85:49"><expr pos:start="85:40" pos:end="85:49"><name pos:start="85:40" pos:end="85:49">start_addr</name></expr></argument>, <argument pos:start="85:52" pos:end="85:55"><expr pos:start="85:52" pos:end="85:55"><name pos:start="85:52" pos:end="85:55">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="91:5" pos:end="95:5"><if pos:start="91:5" pos:end="95:5">if <condition pos:start="91:8" pos:end="91:22">(<expr pos:start="91:9" pos:end="91:21"><operator pos:start="91:9" pos:end="91:9">!</operator><name pos:start="91:10" pos:end="91:21"><name pos:start="91:10" pos:end="91:12">dev</name><operator pos:start="91:13" pos:end="91:14">-&gt;</operator><name pos:start="91:15" pos:end="91:21">started</name></name></expr>)</condition> <block pos:start="91:24" pos:end="95:5">{<block_content pos:start="93:9" pos:end="93:15">

        <return pos:start="93:9" pos:end="93:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="99:5" pos:end="105:5"><if pos:start="99:5" pos:end="105:5">if <condition pos:start="99:8" pos:end="99:21">(<expr pos:start="99:9" pos:end="99:20"><name pos:start="99:9" pos:end="99:20"><name pos:start="99:9" pos:end="99:11">dev</name><operator pos:start="99:12" pos:end="99:13">-&gt;</operator><name pos:start="99:14" pos:end="99:20">started</name></name></expr>)</condition> <block pos:start="99:23" pos:end="105:5">{<block_content pos:start="101:9" pos:end="103:23">

        <expr_stmt pos:start="101:9" pos:end="101:62"><expr pos:start="101:9" pos:end="101:61"><name pos:start="101:9" pos:end="101:9">r</name> <operator pos:start="101:11" pos:end="101:11">=</operator> <call pos:start="101:13" pos:end="101:61"><name pos:start="101:13" pos:end="101:38">vhost_verify_ring_mappings</name><argument_list pos:start="101:39" pos:end="101:61">(<argument pos:start="101:40" pos:end="101:42"><expr pos:start="101:40" pos:end="101:42"><name pos:start="101:40" pos:end="101:42">dev</name></expr></argument>, <argument pos:start="101:45" pos:end="101:54"><expr pos:start="101:45" pos:end="101:54"><name pos:start="101:45" pos:end="101:54">start_addr</name></expr></argument>, <argument pos:start="101:57" pos:end="101:60"><expr pos:start="101:57" pos:end="101:60"><name pos:start="101:57" pos:end="101:60">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:23"><expr pos:start="103:9" pos:end="103:22"><call pos:start="103:9" pos:end="103:22"><name pos:start="103:9" pos:end="103:14">assert</name><argument_list pos:start="103:15" pos:end="103:22">(<argument pos:start="103:16" pos:end="103:21"><expr pos:start="103:16" pos:end="103:21"><name pos:start="103:16" pos:end="103:16">r</name> <operator pos:start="103:18" pos:end="103:19">&gt;=</operator> <literal type="number" pos:start="103:21" pos:end="103:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="109:5" pos:end="117:5"><if pos:start="109:5" pos:end="117:5">if <condition pos:start="109:8" pos:end="109:26">(<expr pos:start="109:9" pos:end="109:25"><operator pos:start="109:9" pos:end="109:9">!</operator><name pos:start="109:10" pos:end="109:25"><name pos:start="109:10" pos:end="109:12">dev</name><operator pos:start="109:13" pos:end="109:14">-&gt;</operator><name pos:start="109:15" pos:end="109:25">log_enabled</name></name></expr>)</condition> <block pos:start="109:28" pos:end="117:5">{<block_content pos:start="111:9" pos:end="115:15">

        <expr_stmt pos:start="111:9" pos:end="111:63"><expr pos:start="111:9" pos:end="111:62"><name pos:start="111:9" pos:end="111:9">r</name> <operator pos:start="111:11" pos:end="111:11">=</operator> <call pos:start="111:13" pos:end="111:62"><name pos:start="111:13" pos:end="111:17">ioctl</name><argument_list pos:start="111:18" pos:end="111:62">(<argument pos:start="111:19" pos:end="111:30"><expr pos:start="111:19" pos:end="111:30"><name pos:start="111:19" pos:end="111:30"><name pos:start="111:19" pos:end="111:21">dev</name><operator pos:start="111:22" pos:end="111:23">-&gt;</operator><name pos:start="111:24" pos:end="111:30">control</name></name></expr></argument>, <argument pos:start="111:33" pos:end="111:51"><expr pos:start="111:33" pos:end="111:51"><name pos:start="111:33" pos:end="111:51">VHOST_SET_MEM_TABLE</name></expr></argument>, <argument pos:start="111:54" pos:end="111:61"><expr pos:start="111:54" pos:end="111:61"><name pos:start="111:54" pos:end="111:61"><name pos:start="111:54" pos:end="111:56">dev</name><operator pos:start="111:57" pos:end="111:58">-&gt;</operator><name pos:start="111:59" pos:end="111:61">mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:23"><expr pos:start="113:9" pos:end="113:22"><call pos:start="113:9" pos:end="113:22"><name pos:start="113:9" pos:end="113:14">assert</name><argument_list pos:start="113:15" pos:end="113:22">(<argument pos:start="113:16" pos:end="113:21"><expr pos:start="113:16" pos:end="113:21"><name pos:start="113:16" pos:end="113:16">r</name> <operator pos:start="113:18" pos:end="113:19">&gt;=</operator> <literal type="number" pos:start="113:21" pos:end="113:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="115:9" pos:end="115:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="119:5" pos:end="126:0"><expr pos:start="119:5" pos:end="119:38"><name pos:start="119:5" pos:end="119:12">log_size</name> <operator pos:start="119:14" pos:end="119:14">=</operator> <call pos:start="119:16" pos:end="119:38"><name pos:start="119:16" pos:end="119:33">vhost_get_log_size</name><argument_list pos:start="119:34" pos:end="119:38">(<argument pos:start="119:35" pos:end="119:37"><expr pos:start="119:35" pos:end="119:37"><name pos:start="119:35" pos:end="119:37">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="121:5" pos:end="123:50">/* We allocate an extra 4K bytes to log,

     * to reduce the * number of reallocations. */</comment>

<cpp:define pos:start="125:1" pos:end="125:52">#<cpp:directive pos:start="125:2" pos:end="125:7">define</cpp:directive> <cpp:macro pos:start="125:9" pos:end="125:24"><name pos:start="125:9" pos:end="125:24">VHOST_LOG_BUFFER</name></cpp:macro> <cpp:value pos:start="125:26" pos:end="125:52">(0x1000 / sizeof *dev-&gt;log)</cpp:value></cpp:define>

    <comment type="block" pos:start="127:5" pos:end="127:66">/* To log more, must increase log size before table update. */</comment>

    <if_stmt pos:start="129:5" pos:end="133:5"><if pos:start="129:5" pos:end="133:5">if <condition pos:start="129:8" pos:end="129:33">(<expr pos:start="129:9" pos:end="129:32"><name pos:start="129:9" pos:end="129:21"><name pos:start="129:9" pos:end="129:11">dev</name><operator pos:start="129:12" pos:end="129:13">-&gt;</operator><name pos:start="129:14" pos:end="129:21">log_size</name></name> <operator pos:start="129:23" pos:end="129:23">&lt;</operator> <name pos:start="129:25" pos:end="129:32">log_size</name></expr>)</condition> <block pos:start="129:35" pos:end="133:5">{<block_content pos:start="131:9" pos:end="131:63">

        <expr_stmt pos:start="131:9" pos:end="131:63"><expr pos:start="131:9" pos:end="131:62"><call pos:start="131:9" pos:end="131:62"><name pos:start="131:9" pos:end="131:28">vhost_dev_log_resize</name><argument_list pos:start="131:29" pos:end="131:62">(<argument pos:start="131:30" pos:end="131:32"><expr pos:start="131:30" pos:end="131:32"><name pos:start="131:30" pos:end="131:32">dev</name></expr></argument>, <argument pos:start="131:35" pos:end="131:61"><expr pos:start="131:35" pos:end="131:61"><name pos:start="131:35" pos:end="131:42">log_size</name> <operator pos:start="131:44" pos:end="131:44">+</operator> <name pos:start="131:46" pos:end="131:61">VHOST_LOG_BUFFER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:59"><expr pos:start="135:5" pos:end="135:58"><name pos:start="135:5" pos:end="135:5">r</name> <operator pos:start="135:7" pos:end="135:7">=</operator> <call pos:start="135:9" pos:end="135:58"><name pos:start="135:9" pos:end="135:13">ioctl</name><argument_list pos:start="135:14" pos:end="135:58">(<argument pos:start="135:15" pos:end="135:26"><expr pos:start="135:15" pos:end="135:26"><name pos:start="135:15" pos:end="135:26"><name pos:start="135:15" pos:end="135:17">dev</name><operator pos:start="135:18" pos:end="135:19">-&gt;</operator><name pos:start="135:20" pos:end="135:26">control</name></name></expr></argument>, <argument pos:start="135:29" pos:end="135:47"><expr pos:start="135:29" pos:end="135:47"><name pos:start="135:29" pos:end="135:47">VHOST_SET_MEM_TABLE</name></expr></argument>, <argument pos:start="135:50" pos:end="135:57"><expr pos:start="135:50" pos:end="135:57"><name pos:start="135:50" pos:end="135:57"><name pos:start="135:50" pos:end="135:52">dev</name><operator pos:start="135:53" pos:end="135:54">-&gt;</operator><name pos:start="135:55" pos:end="135:57">mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="137:5" pos:end="137:19"><expr pos:start="137:5" pos:end="137:18"><call pos:start="137:5" pos:end="137:18"><name pos:start="137:5" pos:end="137:10">assert</name><argument_list pos:start="137:11" pos:end="137:18">(<argument pos:start="137:12" pos:end="137:17"><expr pos:start="137:12" pos:end="137:17"><name pos:start="137:12" pos:end="137:12">r</name> <operator pos:start="137:14" pos:end="137:15">&gt;=</operator> <literal type="number" pos:start="137:17" pos:end="137:17">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="139:5" pos:end="139:69">/* To log less, can only decrease log size after table update. */</comment>

    <if_stmt pos:start="141:5" pos:end="145:5"><if pos:start="141:5" pos:end="145:5">if <condition pos:start="141:8" pos:end="141:52">(<expr pos:start="141:9" pos:end="141:51"><name pos:start="141:9" pos:end="141:21"><name pos:start="141:9" pos:end="141:11">dev</name><operator pos:start="141:12" pos:end="141:13">-&gt;</operator><name pos:start="141:14" pos:end="141:21">log_size</name></name> <operator pos:start="141:23" pos:end="141:23">&gt;</operator> <name pos:start="141:25" pos:end="141:32">log_size</name> <operator pos:start="141:34" pos:end="141:34">+</operator> <name pos:start="141:36" pos:end="141:51">VHOST_LOG_BUFFER</name></expr>)</condition> <block pos:start="141:54" pos:end="145:5">{<block_content pos:start="143:9" pos:end="143:44">

        <expr_stmt pos:start="143:9" pos:end="143:44"><expr pos:start="143:9" pos:end="143:43"><call pos:start="143:9" pos:end="143:43"><name pos:start="143:9" pos:end="143:28">vhost_dev_log_resize</name><argument_list pos:start="143:29" pos:end="143:43">(<argument pos:start="143:30" pos:end="143:32"><expr pos:start="143:30" pos:end="143:32"><name pos:start="143:30" pos:end="143:32">dev</name></expr></argument>, <argument pos:start="143:35" pos:end="143:42"><expr pos:start="143:35" pos:end="143:42"><name pos:start="143:35" pos:end="143:42">log_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
