<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24772.c" pos:tabs="8"><function pos:start="1:1" pos:end="47:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:33">qemu_chr_fe_write_log</name><parameter_list pos:start="1:34" pos:end="3:65">(<parameter pos:start="1:35" pos:end="1:52"><decl pos:start="1:35" pos:end="1:52"><type pos:start="1:35" pos:end="1:52"><name pos:start="1:35" pos:end="1:49">CharDriverState</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:52">s</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:52"><decl pos:start="3:35" pos:end="3:52"><type pos:start="3:35" pos:end="3:52"><specifier pos:start="3:35" pos:end="3:39">const</specifier> <name pos:start="3:41" pos:end="3:47">uint8_t</name> <modifier pos:start="3:49" pos:end="3:49">*</modifier></type><name pos:start="3:50" pos:end="3:52">buf</name></decl></parameter>, <parameter pos:start="3:55" pos:end="3:64"><decl pos:start="3:55" pos:end="3:64"><type pos:start="3:55" pos:end="3:64"><name pos:start="3:55" pos:end="3:60">size_t</name></type> <name pos:start="3:62" pos:end="3:64">len</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="47:1">{<block_content pos:start="7:5" pos:end="45:5">

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:10">size_t</name></type> <name pos:start="7:12" pos:end="7:15">done</name> <init pos:start="7:17" pos:end="7:19">= <expr pos:start="7:19" pos:end="7:19"><literal type="number" pos:start="7:19" pos:end="7:19">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">ssize_t</name></type> <name pos:start="9:13" pos:end="9:15">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="17:5"><if pos:start="13:5" pos:end="17:5">if <condition pos:start="13:8" pos:end="13:21">(<expr pos:start="13:9" pos:end="13:20"><name pos:start="13:9" pos:end="13:16"><name pos:start="13:9" pos:end="13:9">s</name><operator pos:start="13:10" pos:end="13:11">-&gt;</operator><name pos:start="13:12" pos:end="13:16">logfd</name></name> <operator pos:start="13:18" pos:end="13:18">&lt;</operator> <literal type="number" pos:start="13:20" pos:end="13:20">0</literal></expr>)</condition> <block pos:start="13:23" pos:end="17:5">{<block_content pos:start="15:9" pos:end="15:15">

        <return pos:start="15:9" pos:end="15:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <while pos:start="21:5" pos:end="45:5">while <condition pos:start="21:11" pos:end="21:22">(<expr pos:start="21:12" pos:end="21:21"><name pos:start="21:12" pos:end="21:15">done</name> <operator pos:start="21:17" pos:end="21:17">&lt;</operator> <name pos:start="21:19" pos:end="21:21">len</name></expr>)</condition> <block pos:start="21:24" pos:end="45:5">{<block_content pos:start="23:9" pos:end="43:20">

        <do pos:start="23:9" pos:end="33:47">do <block pos:start="23:12" pos:end="33:9">{<block_content pos:start="25:13" pos:end="31:13">

            <expr_stmt pos:start="25:13" pos:end="25:58"><expr pos:start="25:13" pos:end="25:57"><name pos:start="25:13" pos:end="25:15">ret</name> <operator pos:start="25:17" pos:end="25:17">=</operator> <call pos:start="25:19" pos:end="25:57"><name pos:start="25:19" pos:end="25:23">write</name><argument_list pos:start="25:24" pos:end="25:57">(<argument pos:start="25:25" pos:end="25:32"><expr pos:start="25:25" pos:end="25:32"><name pos:start="25:25" pos:end="25:32"><name pos:start="25:25" pos:end="25:25">s</name><operator pos:start="25:26" pos:end="25:27">-&gt;</operator><name pos:start="25:28" pos:end="25:32">logfd</name></name></expr></argument>, <argument pos:start="25:35" pos:end="25:44"><expr pos:start="25:35" pos:end="25:44"><name pos:start="25:35" pos:end="25:37">buf</name> <operator pos:start="25:39" pos:end="25:39">+</operator> <name pos:start="25:41" pos:end="25:44">done</name></expr></argument>, <argument pos:start="25:47" pos:end="25:56"><expr pos:start="25:47" pos:end="25:56"><name pos:start="25:47" pos:end="25:49">len</name> <operator pos:start="25:51" pos:end="25:51">-</operator> <name pos:start="25:53" pos:end="25:56">done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="27:13" pos:end="31:13"><if pos:start="27:13" pos:end="31:13">if <condition pos:start="27:16" pos:end="27:45">(<expr pos:start="27:17" pos:end="27:44"><name pos:start="27:17" pos:end="27:19">ret</name> <operator pos:start="27:21" pos:end="27:22">==</operator> <operator pos:start="27:24" pos:end="27:24">-</operator><literal type="number" pos:start="27:25" pos:end="27:25">1</literal> <operator pos:start="27:27" pos:end="27:28">&amp;&amp;</operator> <name pos:start="27:30" pos:end="27:34">errno</name> <operator pos:start="27:36" pos:end="27:37">==</operator> <name pos:start="27:39" pos:end="27:44">EAGAIN</name></expr>)</condition> <block pos:start="27:47" pos:end="31:13">{<block_content pos:start="29:17" pos:end="29:30">

                <expr_stmt pos:start="29:17" pos:end="29:30"><expr pos:start="29:17" pos:end="29:29"><call pos:start="29:17" pos:end="29:29"><name pos:start="29:17" pos:end="29:24">g_usleep</name><argument_list pos:start="29:25" pos:end="29:29">(<argument pos:start="29:26" pos:end="29:28"><expr pos:start="29:26" pos:end="29:28"><literal type="number" pos:start="29:26" pos:end="29:28">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block> while <condition pos:start="33:17" pos:end="33:46">(<expr pos:start="33:18" pos:end="33:45"><name pos:start="33:18" pos:end="33:20">ret</name> <operator pos:start="33:22" pos:end="33:23">==</operator> <operator pos:start="33:25" pos:end="33:25">-</operator><literal type="number" pos:start="33:26" pos:end="33:26">1</literal> <operator pos:start="33:28" pos:end="33:29">&amp;&amp;</operator> <name pos:start="33:31" pos:end="33:35">errno</name> <operator pos:start="33:37" pos:end="33:38">==</operator> <name pos:start="33:40" pos:end="33:45">EAGAIN</name></expr>)</condition>;</do>



        <if_stmt pos:start="37:9" pos:end="41:9"><if pos:start="37:9" pos:end="41:9">if <condition pos:start="37:12" pos:end="37:21">(<expr pos:start="37:13" pos:end="37:20"><name pos:start="37:13" pos:end="37:15">ret</name> <operator pos:start="37:17" pos:end="37:18">&lt;=</operator> <literal type="number" pos:start="37:20" pos:end="37:20">0</literal></expr>)</condition> <block pos:start="37:23" pos:end="41:9">{<block_content pos:start="39:13" pos:end="39:19">

            <return pos:start="39:13" pos:end="39:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:20"><expr pos:start="43:9" pos:end="43:19"><name pos:start="43:9" pos:end="43:12">done</name> <operator pos:start="43:14" pos:end="43:15">+=</operator> <name pos:start="43:17" pos:end="43:19">ret</name></expr>;</expr_stmt>

    </block_content>}</block></while>

</block_content>}</block></function>
</unit>
