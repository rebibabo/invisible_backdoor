<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/7047.c" pos:tabs="8"><function pos:start="1:1" pos:end="93:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:21">kvm_arch_pre_run</name><parameter_list pos:start="1:22" pos:end="1:57">(<parameter pos:start="1:23" pos:end="1:35"><decl pos:start="1:23" pos:end="1:35"><type pos:start="1:23" pos:end="1:35"><name pos:start="1:23" pos:end="1:30">CPUState</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:35">env</name></decl></parameter>, <parameter pos:start="1:38" pos:end="1:56"><decl pos:start="1:38" pos:end="1:56"><type pos:start="1:38" pos:end="1:56"><name pos:start="1:38" pos:end="1:51"><name pos:start="1:38" pos:end="1:43">struct</name> <name pos:start="1:45" pos:end="1:51">kvm_run</name></name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:56">run</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="93:1">{<block_content pos:start="7:5" pos:end="91:5">

    <comment type="block" pos:start="5:5" pos:end="5:20">/* Inject NMI */</comment>

    <if_stmt pos:start="7:5" pos:end="15:5"><if pos:start="7:5" pos:end="15:5">if <condition pos:start="7:8" pos:end="7:51">(<expr pos:start="7:9" pos:end="7:50"><name pos:start="7:9" pos:end="7:30"><name pos:start="7:9" pos:end="7:11">env</name><operator pos:start="7:12" pos:end="7:13">-&gt;</operator><name pos:start="7:14" pos:end="7:30">interrupt_request</name></name> <operator pos:start="7:32" pos:end="7:32">&amp;</operator> <name pos:start="7:34" pos:end="7:50">CPU_INTERRUPT_NMI</name></expr>)</condition> <block pos:start="7:53" pos:end="15:5">{<block_content pos:start="9:9" pos:end="13:37">

        <expr_stmt pos:start="9:9" pos:end="9:53"><expr pos:start="9:9" pos:end="9:52"><name pos:start="9:9" pos:end="9:30"><name pos:start="9:9" pos:end="9:11">env</name><operator pos:start="9:12" pos:end="9:13">-&gt;</operator><name pos:start="9:14" pos:end="9:30">interrupt_request</name></name> <operator pos:start="9:32" pos:end="9:33">&amp;=</operator> <operator pos:start="9:35" pos:end="9:35">~</operator><name pos:start="9:36" pos:end="9:52">CPU_INTERRUPT_NMI</name></expr>;</expr_stmt>

        <expr_stmt pos:start="11:9" pos:end="11:34"><expr pos:start="11:9" pos:end="11:33"><call pos:start="11:9" pos:end="11:33"><name pos:start="11:9" pos:end="11:15">DPRINTF</name><argument_list pos:start="11:16" pos:end="11:33">(<argument pos:start="11:17" pos:end="11:32"><expr pos:start="11:17" pos:end="11:32"><literal type="string" pos:start="11:17" pos:end="11:32">"injected NMI\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="13:9" pos:end="13:37"><expr pos:start="13:9" pos:end="13:36"><call pos:start="13:9" pos:end="13:36"><name pos:start="13:9" pos:end="13:22">kvm_vcpu_ioctl</name><argument_list pos:start="13:23" pos:end="13:36">(<argument pos:start="13:24" pos:end="13:26"><expr pos:start="13:24" pos:end="13:26"><name pos:start="13:24" pos:end="13:26">env</name></expr></argument>, <argument pos:start="13:29" pos:end="13:35"><expr pos:start="13:29" pos:end="13:35"><name pos:start="13:29" pos:end="13:35">KVM_NMI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="19:5" pos:end="91:5"><if pos:start="19:5" pos:end="91:5">if <condition pos:start="19:8" pos:end="19:33">(<expr pos:start="19:9" pos:end="19:32"><operator pos:start="19:9" pos:end="19:9">!</operator><call pos:start="19:10" pos:end="19:32"><name pos:start="19:10" pos:end="19:30">kvm_irqchip_in_kernel</name><argument_list pos:start="19:31" pos:end="19:32">()</argument_list></call></expr>)</condition> <block pos:start="19:35" pos:end="91:5">{<block_content pos:start="23:9" pos:end="89:53">

        <comment type="block" pos:start="21:9" pos:end="21:78">/* Force the VCPU out of its inner loop to process the INIT request */</comment>

        <if_stmt pos:start="23:9" pos:end="27:9"><if pos:start="23:9" pos:end="27:9">if <condition pos:start="23:12" pos:end="23:56">(<expr pos:start="23:13" pos:end="23:55"><name pos:start="23:13" pos:end="23:34"><name pos:start="23:13" pos:end="23:15">env</name><operator pos:start="23:16" pos:end="23:17">-&gt;</operator><name pos:start="23:18" pos:end="23:34">interrupt_request</name></name> <operator pos:start="23:36" pos:end="23:36">&amp;</operator> <name pos:start="23:38" pos:end="23:55">CPU_INTERRUPT_INIT</name></expr>)</condition> <block pos:start="23:58" pos:end="27:9">{<block_content pos:start="25:13" pos:end="25:34">

            <expr_stmt pos:start="25:13" pos:end="25:34"><expr pos:start="25:13" pos:end="25:33"><name pos:start="25:13" pos:end="25:29"><name pos:start="25:13" pos:end="25:15">env</name><operator pos:start="25:16" pos:end="25:17">-&gt;</operator><name pos:start="25:18" pos:end="25:29">exit_request</name></name> <operator pos:start="25:31" pos:end="25:31">=</operator> <literal type="number" pos:start="25:33" pos:end="25:33">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="31:9" pos:end="31:67">/* Try to inject an interrupt if the guest can accept it */</comment>

        <if_stmt pos:start="33:9" pos:end="63:9"><if pos:start="33:9" pos:end="63:9">if <condition pos:start="33:12" pos:end="37:36">(<expr pos:start="33:13" pos:end="37:35"><name pos:start="33:13" pos:end="33:46"><name pos:start="33:13" pos:end="33:15">run</name><operator pos:start="33:16" pos:end="33:17">-&gt;</operator><name pos:start="33:18" pos:end="33:46">ready_for_interrupt_injection</name></name> <operator pos:start="33:48" pos:end="33:49">&amp;&amp;</operator>

            <operator pos:start="35:13" pos:end="35:13">(</operator><name pos:start="35:14" pos:end="35:35"><name pos:start="35:14" pos:end="35:16">env</name><operator pos:start="35:17" pos:end="35:18">-&gt;</operator><name pos:start="35:19" pos:end="35:35">interrupt_request</name></name> <operator pos:start="35:37" pos:end="35:37">&amp;</operator> <name pos:start="35:39" pos:end="35:56">CPU_INTERRUPT_HARD</name><operator pos:start="35:57" pos:end="35:57">)</operator> <operator pos:start="35:59" pos:end="35:60">&amp;&amp;</operator>

            <operator pos:start="37:13" pos:end="37:13">(</operator><name pos:start="37:14" pos:end="37:24"><name pos:start="37:14" pos:end="37:16">env</name><operator pos:start="37:17" pos:end="37:18">-&gt;</operator><name pos:start="37:19" pos:end="37:24">eflags</name></name> <operator pos:start="37:26" pos:end="37:26">&amp;</operator> <name pos:start="37:28" pos:end="37:34">IF_MASK</name><operator pos:start="37:35" pos:end="37:35">)</operator></expr>)</condition> <block pos:start="37:38" pos:end="63:9">{<block_content pos:start="39:13" pos:end="61:13">

            <decl_stmt pos:start="39:13" pos:end="39:20"><decl pos:start="39:13" pos:end="39:19"><type pos:start="39:13" pos:end="39:15"><name pos:start="39:13" pos:end="39:15">int</name></type> <name pos:start="39:17" pos:end="39:19">irq</name></decl>;</decl_stmt>



            <expr_stmt pos:start="43:13" pos:end="43:58"><expr pos:start="43:13" pos:end="43:57"><name pos:start="43:13" pos:end="43:34"><name pos:start="43:13" pos:end="43:15">env</name><operator pos:start="43:16" pos:end="43:17">-&gt;</operator><name pos:start="43:18" pos:end="43:34">interrupt_request</name></name> <operator pos:start="43:36" pos:end="43:37">&amp;=</operator> <operator pos:start="43:39" pos:end="43:39">~</operator><name pos:start="43:40" pos:end="43:57">CPU_INTERRUPT_HARD</name></expr>;</expr_stmt>

            <expr_stmt pos:start="45:13" pos:end="45:45"><expr pos:start="45:13" pos:end="45:44"><name pos:start="45:13" pos:end="45:15">irq</name> <operator pos:start="45:17" pos:end="45:17">=</operator> <call pos:start="45:19" pos:end="45:44"><name pos:start="45:19" pos:end="45:39">cpu_get_pic_interrupt</name><argument_list pos:start="45:40" pos:end="45:44">(<argument pos:start="45:41" pos:end="45:43"><expr pos:start="45:41" pos:end="45:43"><name pos:start="45:41" pos:end="45:43">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="47:13" pos:end="61:13"><if pos:start="47:13" pos:end="61:13">if <condition pos:start="47:16" pos:end="47:25">(<expr pos:start="47:17" pos:end="47:24"><name pos:start="47:17" pos:end="47:19">irq</name> <operator pos:start="47:21" pos:end="47:22">&gt;=</operator> <literal type="number" pos:start="47:24" pos:end="47:24">0</literal></expr>)</condition> <block pos:start="47:27" pos:end="61:13">{<block_content pos:start="49:17" pos:end="59:58">

                <decl_stmt pos:start="49:17" pos:end="49:42"><decl pos:start="49:17" pos:end="49:41"><type pos:start="49:17" pos:end="49:36"><name pos:start="49:17" pos:end="49:36"><name pos:start="49:17" pos:end="49:22">struct</name> <name pos:start="49:24" pos:end="49:36">kvm_interrupt</name></name></type> <name pos:start="49:38" pos:end="49:41">intr</name></decl>;</decl_stmt>



                <expr_stmt pos:start="53:17" pos:end="53:31"><expr pos:start="53:17" pos:end="53:30"><name pos:start="53:17" pos:end="53:24"><name pos:start="53:17" pos:end="53:20">intr</name><operator pos:start="53:21" pos:end="53:21">.</operator><name pos:start="53:22" pos:end="53:24">irq</name></name> <operator pos:start="53:26" pos:end="53:26">=</operator> <name pos:start="53:28" pos:end="53:30">irq</name></expr>;</expr_stmt>

                <comment type="block" pos:start="55:17" pos:end="55:35">/* FIXME: errors */</comment>

                <expr_stmt pos:start="57:17" pos:end="57:56"><expr pos:start="57:17" pos:end="57:55"><call pos:start="57:17" pos:end="57:55"><name pos:start="57:17" pos:end="57:23">DPRINTF</name><argument_list pos:start="57:24" pos:end="57:55">(<argument pos:start="57:25" pos:end="57:49"><expr pos:start="57:25" pos:end="57:49"><literal type="string" pos:start="57:25" pos:end="57:49">"injected interrupt %d\n"</literal></expr></argument>, <argument pos:start="57:52" pos:end="57:54"><expr pos:start="57:52" pos:end="57:54"><name pos:start="57:52" pos:end="57:54">irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="59:17" pos:end="59:58"><expr pos:start="59:17" pos:end="59:57"><call pos:start="59:17" pos:end="59:57"><name pos:start="59:17" pos:end="59:30">kvm_vcpu_ioctl</name><argument_list pos:start="59:31" pos:end="59:57">(<argument pos:start="59:32" pos:end="59:34"><expr pos:start="59:32" pos:end="59:34"><name pos:start="59:32" pos:end="59:34">env</name></expr></argument>, <argument pos:start="59:37" pos:end="59:49"><expr pos:start="59:37" pos:end="59:49"><name pos:start="59:37" pos:end="59:49">KVM_INTERRUPT</name></expr></argument>, <argument pos:start="59:52" pos:end="59:56"><expr pos:start="59:52" pos:end="59:56"><operator pos:start="59:52" pos:end="59:52">&amp;</operator><name pos:start="59:53" pos:end="59:56">intr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="67:9" pos:end="73:33">/* If we have an interrupt but the guest is not ready to receive an

         * interrupt, request an interrupt window exit.  This will

         * cause a return to userspace as soon as the guest is ready to

         * receive interrupts. */</comment>

        <if_stmt pos:start="75:9" pos:end="83:9"><if pos:start="75:9" pos:end="79:9">if <condition pos:start="75:12" pos:end="75:58">(<expr pos:start="75:13" pos:end="75:57"><operator pos:start="75:13" pos:end="75:13">(</operator><name pos:start="75:14" pos:end="75:35"><name pos:start="75:14" pos:end="75:16">env</name><operator pos:start="75:17" pos:end="75:18">-&gt;</operator><name pos:start="75:19" pos:end="75:35">interrupt_request</name></name> <operator pos:start="75:37" pos:end="75:37">&amp;</operator> <name pos:start="75:39" pos:end="75:56">CPU_INTERRUPT_HARD</name><operator pos:start="75:57" pos:end="75:57">)</operator></expr>)</condition> <block pos:start="75:60" pos:end="79:9">{<block_content pos:start="77:13" pos:end="77:46">

            <expr_stmt pos:start="77:13" pos:end="77:46"><expr pos:start="77:13" pos:end="77:45"><name pos:start="77:13" pos:end="77:41"><name pos:start="77:13" pos:end="77:15">run</name><operator pos:start="77:16" pos:end="77:17">-&gt;</operator><name pos:start="77:18" pos:end="77:41">request_interrupt_window</name></name> <operator pos:start="77:43" pos:end="77:43">=</operator> <literal type="number" pos:start="77:45" pos:end="77:45">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="79:11" pos:end="83:9">else <block pos:start="79:16" pos:end="83:9">{<block_content pos:start="81:13" pos:end="81:46">

            <expr_stmt pos:start="81:13" pos:end="81:46"><expr pos:start="81:13" pos:end="81:45"><name pos:start="81:13" pos:end="81:41"><name pos:start="81:13" pos:end="81:15">run</name><operator pos:start="81:16" pos:end="81:17">-&gt;</operator><name pos:start="81:18" pos:end="81:41">request_interrupt_window</name></name> <operator pos:start="81:43" pos:end="81:43">=</operator> <literal type="number" pos:start="81:45" pos:end="81:45">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="87:9" pos:end="87:33"><expr pos:start="87:9" pos:end="87:32"><call pos:start="87:9" pos:end="87:32"><name pos:start="87:9" pos:end="87:15">DPRINTF</name><argument_list pos:start="87:16" pos:end="87:32">(<argument pos:start="87:17" pos:end="87:31"><expr pos:start="87:17" pos:end="87:31"><literal type="string" pos:start="87:17" pos:end="87:31">"setting tpr\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:53"><expr pos:start="89:9" pos:end="89:52"><name pos:start="89:9" pos:end="89:16"><name pos:start="89:9" pos:end="89:11">run</name><operator pos:start="89:12" pos:end="89:13">-&gt;</operator><name pos:start="89:14" pos:end="89:16">cr8</name></name> <operator pos:start="89:18" pos:end="89:18">=</operator> <call pos:start="89:20" pos:end="89:52"><name pos:start="89:20" pos:end="89:35">cpu_get_apic_tpr</name><argument_list pos:start="89:36" pos:end="89:52">(<argument pos:start="89:37" pos:end="89:51"><expr pos:start="89:37" pos:end="89:51"><name pos:start="89:37" pos:end="89:51"><name pos:start="89:37" pos:end="89:39">env</name><operator pos:start="89:40" pos:end="89:41">-&gt;</operator><name pos:start="89:42" pos:end="89:51">apic_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
