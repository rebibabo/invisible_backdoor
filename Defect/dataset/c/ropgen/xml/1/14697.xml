<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14697.c" pos:tabs="8"><function pos:start="1:1" pos:end="119:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">raw_probe_alignment</name><parameter_list pos:start="1:32" pos:end="1:75">(<parameter pos:start="1:33" pos:end="1:52"><decl pos:start="1:33" pos:end="1:52"><type pos:start="1:33" pos:end="1:52"><name pos:start="1:33" pos:end="1:48">BlockDriverState</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:52">bs</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:60"><decl pos:start="1:55" pos:end="1:60"><type pos:start="1:55" pos:end="1:60"><name pos:start="1:55" pos:end="1:57">int</name></type> <name pos:start="1:59" pos:end="1:60">fd</name></decl></parameter>, <parameter pos:start="1:63" pos:end="1:74"><decl pos:start="1:63" pos:end="1:74"><type pos:start="1:63" pos:end="1:74"><name pos:start="1:63" pos:end="1:67">Error</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier><modifier pos:start="1:70" pos:end="1:70">*</modifier></type><name pos:start="1:71" pos:end="1:74">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="119:1">{<block_content pos:start="5:5" pos:end="117:5">

    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:32"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">BDRVRawState</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:19">s</name> <init pos:start="5:21" pos:end="5:32">= <expr pos:start="5:23" pos:end="5:32"><name pos:start="5:23" pos:end="5:32"><name pos:start="5:23" pos:end="5:24">bs</name><operator pos:start="5:25" pos:end="5:26">-&gt;</operator><name pos:start="5:27" pos:end="5:32">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:14"><decl pos:start="7:5" pos:end="7:13"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">char</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:13">buf</name></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="13:60">/* For /dev/sg devices the alignment is not really used.

       With buffered I/O, we don't have any restrictions. */</comment>

    <if_stmt pos:start="15:5" pos:end="23:5"><if pos:start="15:5" pos:end="23:5">if <condition pos:start="15:8" pos:end="15:38">(<expr pos:start="15:9" pos:end="15:37"><name pos:start="15:9" pos:end="15:14"><name pos:start="15:9" pos:end="15:10">bs</name><operator pos:start="15:11" pos:end="15:12">-&gt;</operator><name pos:start="15:13" pos:end="15:14">sg</name></name> <operator pos:start="15:16" pos:end="15:17">||</operator> <operator pos:start="15:19" pos:end="15:19">!</operator><name pos:start="15:20" pos:end="15:37"><name pos:start="15:20" pos:end="15:20">s</name><operator pos:start="15:21" pos:end="15:22">-&gt;</operator><name pos:start="15:23" pos:end="15:37">needs_alignment</name></name></expr>)</condition> <block pos:start="15:40" pos:end="23:5">{<block_content pos:start="17:9" pos:end="21:15">

        <expr_stmt pos:start="17:9" pos:end="17:34"><expr pos:start="17:9" pos:end="17:33"><name pos:start="17:9" pos:end="17:29"><name pos:start="17:9" pos:end="17:10">bs</name><operator pos:start="17:11" pos:end="17:12">-&gt;</operator><name pos:start="17:13" pos:end="17:29">request_alignment</name></name> <operator pos:start="17:31" pos:end="17:31">=</operator> <literal type="number" pos:start="17:33" pos:end="17:33">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:25"><expr pos:start="19:9" pos:end="19:24"><name pos:start="19:9" pos:end="19:20"><name pos:start="19:9" pos:end="19:9">s</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:20">buf_align</name></name> <operator pos:start="19:22" pos:end="19:22">=</operator> <literal type="number" pos:start="19:24" pos:end="19:24">1</literal></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:30"><expr pos:start="27:5" pos:end="27:29"><name pos:start="27:5" pos:end="27:25"><name pos:start="27:5" pos:end="27:6">bs</name><operator pos:start="27:7" pos:end="27:8">-&gt;</operator><name pos:start="27:9" pos:end="27:25">request_alignment</name></name> <operator pos:start="27:27" pos:end="27:27">=</operator> <literal type="number" pos:start="27:29" pos:end="27:29">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:21"><expr pos:start="29:5" pos:end="29:20"><name pos:start="29:5" pos:end="29:16"><name pos:start="29:5" pos:end="29:5">s</name><operator pos:start="29:6" pos:end="29:7">-&gt;</operator><name pos:start="29:8" pos:end="29:16">buf_align</name></name> <operator pos:start="29:18" pos:end="29:18">=</operator> <literal type="number" pos:start="29:20" pos:end="29:20">0</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="31:5" pos:end="31:67">/* Let's try to use the logical blocksize for the alignment. */</comment>

    <if_stmt pos:start="33:5" pos:end="40:0"><if pos:start="33:5" pos:end="40:0">if <condition pos:start="33:8" pos:end="33:64">(<expr pos:start="33:9" pos:end="33:63"><call pos:start="33:9" pos:end="33:59"><name pos:start="33:9" pos:end="33:31">probe_logical_blocksize</name><argument_list pos:start="33:32" pos:end="33:59">(<argument pos:start="33:33" pos:end="33:34"><expr pos:start="33:33" pos:end="33:34"><name pos:start="33:33" pos:end="33:34">fd</name></expr></argument>, <argument pos:start="33:37" pos:end="33:58"><expr pos:start="33:37" pos:end="33:58"><operator pos:start="33:37" pos:end="33:37">&amp;</operator><name pos:start="33:38" pos:end="33:58"><name pos:start="33:38" pos:end="33:39">bs</name><operator pos:start="33:40" pos:end="33:41">-&gt;</operator><name pos:start="33:42" pos:end="33:58">request_alignment</name></name></expr></argument>)</argument_list></call> <operator pos:start="33:61" pos:end="33:61">&lt;</operator> <literal type="number" pos:start="33:63" pos:end="33:63">0</literal></expr>)</condition> <block pos:start="33:66" pos:end="40:0">{<block_content pos:start="35:9" pos:end="35:34">

        <expr_stmt pos:start="35:9" pos:end="35:34"><expr pos:start="35:9" pos:end="35:33"><name pos:start="35:9" pos:end="35:29"><name pos:start="35:9" pos:end="35:10">bs</name><operator pos:start="35:11" pos:end="35:12">-&gt;</operator><name pos:start="35:13" pos:end="35:29">request_alignment</name></name> <operator pos:start="35:31" pos:end="35:31">=</operator> <literal type="number" pos:start="35:33" pos:end="35:33">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:ifdef pos:start="39:1" pos:end="39:17">#<cpp:directive pos:start="39:2" pos:end="39:6">ifdef</cpp:directive> <name pos:start="39:8" pos:end="39:17">CONFIG_XFS</name></cpp:ifdef>

    <if_stmt pos:start="41:5" pos:end="58:0"><if pos:start="41:5" pos:end="58:0">if <condition pos:start="41:8" pos:end="41:18">(<expr pos:start="41:9" pos:end="41:17"><name pos:start="41:9" pos:end="41:17"><name pos:start="41:9" pos:end="41:9">s</name><operator pos:start="41:10" pos:end="41:11">-&gt;</operator><name pos:start="41:12" pos:end="41:17">is_xfs</name></name></expr>)</condition> <block pos:start="41:20" pos:end="58:0">{<block_content pos:start="43:9" pos:end="53:9">

        <decl_stmt pos:start="43:9" pos:end="43:26"><decl pos:start="43:9" pos:end="43:25"><type pos:start="43:9" pos:end="43:22"><name pos:start="43:9" pos:end="43:22"><name pos:start="43:9" pos:end="43:14">struct</name> <name pos:start="43:16" pos:end="43:22">dioattr</name></name></type> <name pos:start="43:24" pos:end="43:25">da</name></decl>;</decl_stmt>

        <if_stmt pos:start="45:9" pos:end="53:9"><if pos:start="45:9" pos:end="53:9">if <condition pos:start="45:12" pos:end="45:56">(<expr pos:start="45:13" pos:end="45:55"><call pos:start="45:13" pos:end="45:50"><name pos:start="45:13" pos:end="45:18">xfsctl</name><argument_list pos:start="45:19" pos:end="45:50">(<argument pos:start="45:20" pos:end="45:23"><expr pos:start="45:20" pos:end="45:23"><name pos:start="45:20" pos:end="45:23">NULL</name></expr></argument>, <argument pos:start="45:26" pos:end="45:27"><expr pos:start="45:26" pos:end="45:27"><name pos:start="45:26" pos:end="45:27">fd</name></expr></argument>, <argument pos:start="45:30" pos:end="45:44"><expr pos:start="45:30" pos:end="45:44"><name pos:start="45:30" pos:end="45:44">XFS_IOC_DIOINFO</name></expr></argument>, <argument pos:start="45:47" pos:end="45:49"><expr pos:start="45:47" pos:end="45:49"><operator pos:start="45:47" pos:end="45:47">&amp;</operator><name pos:start="45:48" pos:end="45:49">da</name></expr></argument>)</argument_list></call> <operator pos:start="45:52" pos:end="45:53">&gt;=</operator> <literal type="number" pos:start="45:55" pos:end="45:55">0</literal></expr>)</condition> <block pos:start="45:58" pos:end="53:9">{<block_content pos:start="47:13" pos:end="47:49">

            <expr_stmt pos:start="47:13" pos:end="47:49"><expr pos:start="47:13" pos:end="47:48"><name pos:start="47:13" pos:end="47:33"><name pos:start="47:13" pos:end="47:14">bs</name><operator pos:start="47:15" pos:end="47:16">-&gt;</operator><name pos:start="47:17" pos:end="47:33">request_alignment</name></name> <operator pos:start="47:35" pos:end="47:35">=</operator> <name pos:start="47:37" pos:end="47:48"><name pos:start="47:37" pos:end="47:38">da</name><operator pos:start="47:39" pos:end="47:39">.</operator><name pos:start="47:40" pos:end="47:48">d_miniosz</name></name></expr>;</expr_stmt>

            <comment type="block" pos:start="49:13" pos:end="49:64">/* The kernel returns wrong information for d_mem */</comment>

            <comment type="block" pos:start="51:13" pos:end="51:42">/* s-&gt;buf_align = da.d_mem; */</comment>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="57:1" pos:end="57:6">#<cpp:directive pos:start="57:2" pos:end="57:6">endif</cpp:directive></cpp:endif>



    <comment type="block" pos:start="61:5" pos:end="61:70">/* If we could not get the sizes so far, we can only guess them */</comment>

    <if_stmt pos:start="63:5" pos:end="83:5"><if pos:start="63:5" pos:end="83:5">if <condition pos:start="63:8" pos:end="63:22">(<expr pos:start="63:9" pos:end="63:21"><operator pos:start="63:9" pos:end="63:9">!</operator><name pos:start="63:10" pos:end="63:21"><name pos:start="63:10" pos:end="63:10">s</name><operator pos:start="63:11" pos:end="63:12">-&gt;</operator><name pos:start="63:13" pos:end="63:21">buf_align</name></name></expr>)</condition> <block pos:start="63:24" pos:end="83:5">{<block_content pos:start="65:9" pos:end="81:24">

        <decl_stmt pos:start="65:9" pos:end="65:21"><decl pos:start="65:9" pos:end="65:20"><type pos:start="65:9" pos:end="65:14"><name pos:start="65:9" pos:end="65:14">size_t</name></type> <name pos:start="65:16" pos:end="65:20">align</name></decl>;</decl_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:62"><expr pos:start="67:9" pos:end="67:61"><name pos:start="67:9" pos:end="67:11">buf</name> <operator pos:start="67:13" pos:end="67:13">=</operator> <call pos:start="67:15" pos:end="67:61"><name pos:start="67:15" pos:end="67:27">qemu_memalign</name><argument_list pos:start="67:28" pos:end="67:61">(<argument pos:start="67:29" pos:end="67:41"><expr pos:start="67:29" pos:end="67:41"><name pos:start="67:29" pos:end="67:41">MAX_BLOCKSIZE</name></expr></argument>, <argument pos:start="67:44" pos:end="67:60"><expr pos:start="67:44" pos:end="67:60"><literal type="number" pos:start="67:44" pos:end="67:44">2</literal> <operator pos:start="67:46" pos:end="67:46">*</operator> <name pos:start="67:48" pos:end="67:60">MAX_BLOCKSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="69:9" pos:end="79:9">for <control pos:start="69:13" pos:end="69:62">(<init pos:start="69:14" pos:end="69:25"><expr pos:start="69:14" pos:end="69:24"><name pos:start="69:14" pos:end="69:18">align</name> <operator pos:start="69:20" pos:end="69:20">=</operator> <literal type="number" pos:start="69:22" pos:end="69:24">512</literal></expr>;</init> <condition pos:start="69:27" pos:end="69:49"><expr pos:start="69:27" pos:end="69:48"><name pos:start="69:27" pos:end="69:31">align</name> <operator pos:start="69:33" pos:end="69:34">&lt;=</operator> <name pos:start="69:36" pos:end="69:48">MAX_BLOCKSIZE</name></expr>;</condition> <incr pos:start="69:51" pos:end="69:61"><expr pos:start="69:51" pos:end="69:61"><name pos:start="69:51" pos:end="69:55">align</name> <operator pos:start="69:57" pos:end="69:59">&lt;&lt;=</operator> <literal type="number" pos:start="69:61" pos:end="69:61">1</literal></expr></incr>)</control> <block pos:start="69:64" pos:end="79:9">{<block_content pos:start="71:13" pos:end="77:13">

            <if_stmt pos:start="71:13" pos:end="77:13"><if pos:start="71:13" pos:end="77:13">if <condition pos:start="71:16" pos:end="71:62">(<expr pos:start="71:17" pos:end="71:61"><call pos:start="71:17" pos:end="71:56"><name pos:start="71:17" pos:end="71:21">pread</name><argument_list pos:start="71:22" pos:end="71:56">(<argument pos:start="71:23" pos:end="71:24"><expr pos:start="71:23" pos:end="71:24"><name pos:start="71:23" pos:end="71:24">fd</name></expr></argument>, <argument pos:start="71:27" pos:end="71:37"><expr pos:start="71:27" pos:end="71:37"><name pos:start="71:27" pos:end="71:29">buf</name> <operator pos:start="71:31" pos:end="71:31">+</operator> <name pos:start="71:33" pos:end="71:37">align</name></expr></argument>, <argument pos:start="71:40" pos:end="71:52"><expr pos:start="71:40" pos:end="71:52"><name pos:start="71:40" pos:end="71:52">MAX_BLOCKSIZE</name></expr></argument>, <argument pos:start="71:55" pos:end="71:55"><expr pos:start="71:55" pos:end="71:55"><literal type="number" pos:start="71:55" pos:end="71:55">0</literal></expr></argument>)</argument_list></call> <operator pos:start="71:58" pos:end="71:59">&gt;=</operator> <literal type="number" pos:start="71:61" pos:end="71:61">0</literal></expr>)</condition> <block pos:start="71:64" pos:end="77:13">{<block_content pos:start="73:17" pos:end="75:22">

                <expr_stmt pos:start="73:17" pos:end="73:37"><expr pos:start="73:17" pos:end="73:36"><name pos:start="73:17" pos:end="73:28"><name pos:start="73:17" pos:end="73:17">s</name><operator pos:start="73:18" pos:end="73:19">-&gt;</operator><name pos:start="73:20" pos:end="73:28">buf_align</name></name> <operator pos:start="73:30" pos:end="73:30">=</operator> <name pos:start="73:32" pos:end="73:36">align</name></expr>;</expr_stmt>

                <break pos:start="75:17" pos:end="75:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="81:9" pos:end="81:24"><expr pos:start="81:9" pos:end="81:23"><call pos:start="81:9" pos:end="81:23"><name pos:start="81:9" pos:end="81:18">qemu_vfree</name><argument_list pos:start="81:19" pos:end="81:23">(<argument pos:start="81:20" pos:end="81:22"><expr pos:start="81:20" pos:end="81:22"><name pos:start="81:20" pos:end="81:22">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="87:5" pos:end="107:5"><if pos:start="87:5" pos:end="107:5">if <condition pos:start="87:8" pos:end="87:31">(<expr pos:start="87:9" pos:end="87:30"><operator pos:start="87:9" pos:end="87:9">!</operator><name pos:start="87:10" pos:end="87:30"><name pos:start="87:10" pos:end="87:11">bs</name><operator pos:start="87:12" pos:end="87:13">-&gt;</operator><name pos:start="87:14" pos:end="87:30">request_alignment</name></name></expr>)</condition> <block pos:start="87:33" pos:end="107:5">{<block_content pos:start="89:9" pos:end="105:24">

        <decl_stmt pos:start="89:9" pos:end="89:21"><decl pos:start="89:9" pos:end="89:20"><type pos:start="89:9" pos:end="89:14"><name pos:start="89:9" pos:end="89:14">size_t</name></type> <name pos:start="89:16" pos:end="89:20">align</name></decl>;</decl_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:57"><expr pos:start="91:9" pos:end="91:56"><name pos:start="91:9" pos:end="91:11">buf</name> <operator pos:start="91:13" pos:end="91:13">=</operator> <call pos:start="91:15" pos:end="91:56"><name pos:start="91:15" pos:end="91:27">qemu_memalign</name><argument_list pos:start="91:28" pos:end="91:56">(<argument pos:start="91:29" pos:end="91:40"><expr pos:start="91:29" pos:end="91:40"><name pos:start="91:29" pos:end="91:40"><name pos:start="91:29" pos:end="91:29">s</name><operator pos:start="91:30" pos:end="91:31">-&gt;</operator><name pos:start="91:32" pos:end="91:40">buf_align</name></name></expr></argument>, <argument pos:start="91:43" pos:end="91:55"><expr pos:start="91:43" pos:end="91:55"><name pos:start="91:43" pos:end="91:55">MAX_BLOCKSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="93:9" pos:end="103:9">for <control pos:start="93:13" pos:end="93:62">(<init pos:start="93:14" pos:end="93:25"><expr pos:start="93:14" pos:end="93:24"><name pos:start="93:14" pos:end="93:18">align</name> <operator pos:start="93:20" pos:end="93:20">=</operator> <literal type="number" pos:start="93:22" pos:end="93:24">512</literal></expr>;</init> <condition pos:start="93:27" pos:end="93:49"><expr pos:start="93:27" pos:end="93:48"><name pos:start="93:27" pos:end="93:31">align</name> <operator pos:start="93:33" pos:end="93:34">&lt;=</operator> <name pos:start="93:36" pos:end="93:48">MAX_BLOCKSIZE</name></expr>;</condition> <incr pos:start="93:51" pos:end="93:61"><expr pos:start="93:51" pos:end="93:61"><name pos:start="93:51" pos:end="93:55">align</name> <operator pos:start="93:57" pos:end="93:59">&lt;&lt;=</operator> <literal type="number" pos:start="93:61" pos:end="93:61">1</literal></expr></incr>)</control> <block pos:start="93:64" pos:end="103:9">{<block_content pos:start="95:13" pos:end="101:13">

            <if_stmt pos:start="95:13" pos:end="101:13"><if pos:start="95:13" pos:end="101:13">if <condition pos:start="95:16" pos:end="95:46">(<expr pos:start="95:17" pos:end="95:45"><call pos:start="95:17" pos:end="95:40"><name pos:start="95:17" pos:end="95:21">pread</name><argument_list pos:start="95:22" pos:end="95:40">(<argument pos:start="95:23" pos:end="95:24"><expr pos:start="95:23" pos:end="95:24"><name pos:start="95:23" pos:end="95:24">fd</name></expr></argument>, <argument pos:start="95:27" pos:end="95:29"><expr pos:start="95:27" pos:end="95:29"><name pos:start="95:27" pos:end="95:29">buf</name></expr></argument>, <argument pos:start="95:32" pos:end="95:36"><expr pos:start="95:32" pos:end="95:36"><name pos:start="95:32" pos:end="95:36">align</name></expr></argument>, <argument pos:start="95:39" pos:end="95:39"><expr pos:start="95:39" pos:end="95:39"><literal type="number" pos:start="95:39" pos:end="95:39">0</literal></expr></argument>)</argument_list></call> <operator pos:start="95:42" pos:end="95:43">&gt;=</operator> <literal type="number" pos:start="95:45" pos:end="95:45">0</literal></expr>)</condition> <block pos:start="95:48" pos:end="101:13">{<block_content pos:start="97:17" pos:end="99:22">

                <expr_stmt pos:start="97:17" pos:end="97:46"><expr pos:start="97:17" pos:end="97:45"><name pos:start="97:17" pos:end="97:37"><name pos:start="97:17" pos:end="97:18">bs</name><operator pos:start="97:19" pos:end="97:20">-&gt;</operator><name pos:start="97:21" pos:end="97:37">request_alignment</name></name> <operator pos:start="97:39" pos:end="97:39">=</operator> <name pos:start="97:41" pos:end="97:45">align</name></expr>;</expr_stmt>

                <break pos:start="99:17" pos:end="99:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="105:9" pos:end="105:24"><expr pos:start="105:9" pos:end="105:23"><call pos:start="105:9" pos:end="105:23"><name pos:start="105:9" pos:end="105:18">qemu_vfree</name><argument_list pos:start="105:19" pos:end="105:23">(<argument pos:start="105:20" pos:end="105:22"><expr pos:start="105:20" pos:end="105:22"><name pos:start="105:20" pos:end="105:22">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="111:5" pos:end="117:5"><if pos:start="111:5" pos:end="117:5">if <condition pos:start="111:8" pos:end="111:48">(<expr pos:start="111:9" pos:end="111:47"><operator pos:start="111:9" pos:end="111:9">!</operator><name pos:start="111:10" pos:end="111:21"><name pos:start="111:10" pos:end="111:10">s</name><operator pos:start="111:11" pos:end="111:12">-&gt;</operator><name pos:start="111:13" pos:end="111:21">buf_align</name></name> <operator pos:start="111:23" pos:end="111:24">||</operator> <operator pos:start="111:26" pos:end="111:26">!</operator><name pos:start="111:27" pos:end="111:47"><name pos:start="111:27" pos:end="111:28">bs</name><operator pos:start="111:29" pos:end="111:30">-&gt;</operator><name pos:start="111:31" pos:end="111:47">request_alignment</name></name></expr>)</condition> <block pos:start="111:50" pos:end="117:5">{<block_content pos:start="113:9" pos:end="115:50">

        <expr_stmt pos:start="113:9" pos:end="115:50"><expr pos:start="113:9" pos:end="115:49"><call pos:start="113:9" pos:end="115:49"><name pos:start="113:9" pos:end="113:18">error_setg</name><argument_list pos:start="113:19" pos:end="115:49">(<argument pos:start="113:20" pos:end="113:23"><expr pos:start="113:20" pos:end="113:23"><name pos:start="113:20" pos:end="113:23">errp</name></expr></argument>, <argument pos:start="113:26" pos:end="115:48"><expr pos:start="113:26" pos:end="115:48"><literal type="string" pos:start="113:26" pos:end="113:70">"Could not find working O_DIRECT alignment. "</literal>

                         <literal type="string" pos:start="115:26" pos:end="115:48">"Try cache.direct=off."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
