<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17102.c" pos:tabs="8"><function pos:start="1:1" pos:end="103:35"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">decode_packet</name><parameter_list pos:start="1:25" pos:end="2:61">(<parameter pos:start="1:26" pos:end="1:46"><decl pos:start="1:26" pos:end="1:46"><type pos:start="1:26" pos:end="1:46"><name pos:start="1:26" pos:end="1:39">AVCodecContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:46">avctx</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:58"><decl pos:start="1:49" pos:end="1:58"><type pos:start="1:49" pos:end="1:58"><name pos:start="1:49" pos:end="1:52">void</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:58">data</name></decl></parameter>,
                         <parameter pos:start="2:26" pos:end="2:43"><decl pos:start="2:26" pos:end="2:43"><type pos:start="2:26" pos:end="2:43"><name pos:start="2:26" pos:end="2:28">int</name> <modifier pos:start="2:30" pos:end="2:30">*</modifier></type><name pos:start="2:31" pos:end="2:43">got_frame_ptr</name></decl></parameter>, <parameter pos:start="2:46" pos:end="2:60"><decl pos:start="2:46" pos:end="2:60"><type pos:start="2:46" pos:end="2:60"><name pos:start="2:46" pos:end="2:53">AVPacket</name><modifier pos:start="2:54" pos:end="2:54">*</modifier></type> <name pos:start="2:56" pos:end="2:60">avpkt</name></decl></parameter>)</parameter_list>
<block pos:start="3:1" pos:end="103:35">{<block_content pos:start="4:5" pos:end="103:35">
    <decl_stmt pos:start="4:5" pos:end="4:42"><decl pos:start="4:5" pos:end="4:41"><type pos:start="4:5" pos:end="4:21"><name pos:start="4:5" pos:end="4:19">WMAProDecodeCtx</name> <modifier pos:start="4:21" pos:end="4:21">*</modifier></type><name pos:start="4:22" pos:end="4:22">s</name> <init pos:start="4:24" pos:end="4:41">= <expr pos:start="4:26" pos:end="4:41"><name pos:start="4:26" pos:end="4:41"><name pos:start="4:26" pos:end="4:30">avctx</name><operator pos:start="4:31" pos:end="4:32">-&gt;</operator><name pos:start="4:33" pos:end="4:41">priv_data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:32"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:17">GetBitContext</name><modifier pos:start="5:18" pos:end="5:18">*</modifier></type> <name pos:start="5:20" pos:end="5:21">gb</name>  <init pos:start="5:24" pos:end="5:32">= <expr pos:start="5:26" pos:end="5:32"><operator pos:start="5:26" pos:end="5:26">&amp;</operator><name pos:start="5:27" pos:end="5:32"><name pos:start="5:27" pos:end="5:27">s</name><operator pos:start="5:28" pos:end="5:29">-&gt;</operator><name pos:start="5:30" pos:end="5:32">pgb</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:37"><decl pos:start="6:5" pos:end="6:36"><type pos:start="6:5" pos:end="6:18"><specifier pos:start="6:5" pos:end="6:9">const</specifier> <name pos:start="6:11" pos:end="6:17">uint8_t</name><modifier pos:start="6:18" pos:end="6:18">*</modifier></type> <name pos:start="6:20" pos:end="6:22">buf</name> <init pos:start="6:24" pos:end="6:36">= <expr pos:start="6:26" pos:end="6:36"><name pos:start="6:26" pos:end="6:36"><name pos:start="6:26" pos:end="6:30">avpkt</name><operator pos:start="6:31" pos:end="6:32">-&gt;</operator><name pos:start="6:33" pos:end="6:36">data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:16">buf_size</name>       <init pos:start="7:24" pos:end="7:36">= <expr pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:30">avpkt</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:36">size</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:28"><decl pos:start="8:5" pos:end="8:27"><type pos:start="8:5" pos:end="8:7"><name pos:start="8:5" pos:end="8:7">int</name></type> <name pos:start="8:9" pos:end="8:27">num_bits_prev_frame</name></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:30">packet_sequence_number</name></decl>;</decl_stmt>
    <expr_stmt pos:start="10:5" pos:end="10:23"><expr pos:start="10:5" pos:end="10:22"><operator pos:start="10:5" pos:end="10:5">*</operator><name pos:start="10:6" pos:end="10:18">got_frame_ptr</name> <operator pos:start="10:20" pos:end="10:20">=</operator> <literal type="number" pos:start="10:22" pos:end="10:22">0</literal></expr>;</expr_stmt>
    <if_stmt pos:start="11:5" pos:end="103:35"><if pos:start="11:5" pos:end="103:35">if <condition pos:start="11:8" pos:end="11:28">(<expr pos:start="11:9" pos:end="11:27"><name pos:start="11:9" pos:end="11:23"><name pos:start="11:9" pos:end="11:9">s</name><operator pos:start="11:10" pos:end="11:11">-&gt;</operator><name pos:start="11:12" pos:end="11:23">skip_packets</name></name> <operator pos:start="11:25" pos:end="11:25">&gt;</operator> <literal type="number" pos:start="11:27" pos:end="11:27">0</literal></expr>)</condition> <block pos:start="11:30" pos:end="103:35">{<block_content pos:start="12:9" pos:end="103:35">
        <expr_stmt pos:start="12:9" pos:end="12:26"><expr pos:start="12:9" pos:end="12:25"><name pos:start="12:9" pos:end="12:23"><name pos:start="12:9" pos:end="12:9">s</name><operator pos:start="12:10" pos:end="12:11">-&gt;</operator><name pos:start="12:12" pos:end="12:23">skip_packets</name></name><operator pos:start="12:24" pos:end="12:25">--</operator></expr>;</expr_stmt>
        <return pos:start="13:9" pos:end="13:54">return <expr pos:start="13:16" pos:end="13:53"><call pos:start="13:16" pos:end="13:53"><name pos:start="13:16" pos:end="13:20">FFMIN</name><argument_list pos:start="13:21" pos:end="13:53">(<argument pos:start="13:22" pos:end="13:32"><expr pos:start="13:22" pos:end="13:32"><name pos:start="13:22" pos:end="13:32"><name pos:start="13:22" pos:end="13:26">avpkt</name><operator pos:start="13:27" pos:end="13:28">-&gt;</operator><name pos:start="13:29" pos:end="13:32">size</name></name></expr></argument>, <argument pos:start="13:35" pos:end="13:52"><expr pos:start="13:35" pos:end="13:52"><name pos:start="13:35" pos:end="13:52"><name pos:start="13:35" pos:end="13:39">avctx</name><operator pos:start="13:40" pos:end="13:41">-&gt;</operator><name pos:start="13:42" pos:end="13:52">block_align</name></name></expr></argument>)</argument_list></call></expr>;</return>
    <if_stmt pos:start="14:5" pos:end="103:35"><if pos:start="14:5" pos:end="103:35">if <condition pos:start="14:8" pos:end="14:41">(<expr pos:start="14:9" pos:end="14:40"><name pos:start="14:9" pos:end="14:22"><name pos:start="14:9" pos:end="14:9">s</name><operator pos:start="14:10" pos:end="14:11">-&gt;</operator><name pos:start="14:12" pos:end="14:22">packet_done</name></name> <operator pos:start="14:24" pos:end="14:25">||</operator> <name pos:start="14:27" pos:end="14:40"><name pos:start="14:27" pos:end="14:27">s</name><operator pos:start="14:28" pos:end="14:29">-&gt;</operator><name pos:start="14:30" pos:end="14:40">packet_loss</name></name></expr>)</condition> <block pos:start="14:43" pos:end="103:35">{<block_content pos:start="15:9" pos:end="103:35">
        <expr_stmt pos:start="15:9" pos:end="15:27"><expr pos:start="15:9" pos:end="15:26"><name pos:start="15:9" pos:end="15:22"><name pos:start="15:9" pos:end="15:9">s</name><operator pos:start="15:10" pos:end="15:11">-&gt;</operator><name pos:start="15:12" pos:end="15:22">packet_done</name></name> <operator pos:start="15:24" pos:end="15:24">=</operator> <literal type="number" pos:start="15:26" pos:end="15:26">0</literal></expr>;</expr_stmt>
        <comment type="block" format="doxygen" pos:start="16:9" pos:end="16:49">/** sanity check for the buffer length */</comment>
        <if_stmt pos:start="17:9" pos:end="103:35"><if pos:start="17:9" pos:end="103:35">if <condition pos:start="17:12" pos:end="17:83">(<expr pos:start="17:13" pos:end="17:82"><name pos:start="17:13" pos:end="17:27"><name pos:start="17:13" pos:end="17:17">avctx</name><operator pos:start="17:18" pos:end="17:19">-&gt;</operator><name pos:start="17:20" pos:end="17:27">codec_id</name></name> <operator pos:start="17:29" pos:end="17:30">==</operator> <name pos:start="17:32" pos:end="17:49">AV_CODEC_ID_WMAPRO</name> <operator pos:start="17:51" pos:end="17:52">&amp;&amp;</operator> <name pos:start="17:54" pos:end="17:61">buf_size</name> <operator pos:start="17:63" pos:end="17:63">&lt;</operator> <name pos:start="17:65" pos:end="17:82"><name pos:start="17:65" pos:end="17:69">avctx</name><operator pos:start="17:70" pos:end="17:71">-&gt;</operator><name pos:start="17:72" pos:end="17:82">block_align</name></name></expr>)</condition> <block pos:start="17:85" pos:end="103:35">{<block_content pos:start="18:13" pos:end="103:35">
            <expr_stmt pos:start="18:13" pos:end="19:49"><expr pos:start="18:13" pos:end="19:48"><call pos:start="18:13" pos:end="19:48"><name pos:start="18:13" pos:end="18:18">av_log</name><argument_list pos:start="18:19" pos:end="19:48">(<argument pos:start="18:20" pos:end="18:24"><expr pos:start="18:20" pos:end="18:24"><name pos:start="18:20" pos:end="18:24">avctx</name></expr></argument>, <argument pos:start="18:27" pos:end="18:38"><expr pos:start="18:27" pos:end="18:38"><name pos:start="18:27" pos:end="18:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="18:41" pos:end="18:76"><expr pos:start="18:41" pos:end="18:76"><literal type="string" pos:start="18:41" pos:end="18:76">"Input packet too small (%d &lt; %d)\n"</literal></expr></argument>,
                   <argument pos:start="19:20" pos:end="19:27"><expr pos:start="19:20" pos:end="19:27"><name pos:start="19:20" pos:end="19:27">buf_size</name></expr></argument>, <argument pos:start="19:30" pos:end="19:47"><expr pos:start="19:30" pos:end="19:47"><name pos:start="19:30" pos:end="19:47"><name pos:start="19:30" pos:end="19:34">avctx</name><operator pos:start="19:35" pos:end="19:36">-&gt;</operator><name pos:start="19:37" pos:end="19:47">block_align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="20:13" pos:end="20:39">return <expr pos:start="20:20" pos:end="20:38"><name pos:start="20:20" pos:end="20:38">AVERROR_INVALIDDATA</name></expr>;</return>
        <if_stmt pos:start="21:9" pos:end="103:35"><if pos:start="21:9" pos:end="24:9">if <condition pos:start="21:12" pos:end="21:50">(<expr pos:start="21:13" pos:end="21:49"><name pos:start="21:13" pos:end="21:27"><name pos:start="21:13" pos:end="21:17">avctx</name><operator pos:start="21:18" pos:end="21:19">-&gt;</operator><name pos:start="21:20" pos:end="21:27">codec_id</name></name> <operator pos:start="21:29" pos:end="21:30">==</operator> <name pos:start="21:32" pos:end="21:49">AV_CODEC_ID_WMAPRO</name></expr>)</condition> <block pos:start="21:52" pos:end="24:9">{<block_content pos:start="22:13" pos:end="23:42">
            <expr_stmt pos:start="22:13" pos:end="22:65"><expr pos:start="22:13" pos:end="22:64"><name pos:start="22:13" pos:end="22:32"><name pos:start="22:13" pos:end="22:13">s</name><operator pos:start="22:14" pos:end="22:15">-&gt;</operator><name pos:start="22:16" pos:end="22:32">next_packet_start</name></name> <operator pos:start="22:34" pos:end="22:34">=</operator> <name pos:start="22:36" pos:end="22:43">buf_size</name> <operator pos:start="22:45" pos:end="22:45">-</operator> <name pos:start="22:47" pos:end="22:64"><name pos:start="22:47" pos:end="22:51">avctx</name><operator pos:start="22:52" pos:end="22:53">-&gt;</operator><name pos:start="22:54" pos:end="22:64">block_align</name></name></expr>;</expr_stmt>
            <expr_stmt pos:start="23:13" pos:end="23:42"><expr pos:start="23:13" pos:end="23:41"><name pos:start="23:13" pos:end="23:20">buf_size</name> <operator pos:start="23:22" pos:end="23:22">=</operator> <name pos:start="23:24" pos:end="23:41"><name pos:start="23:24" pos:end="23:28">avctx</name><operator pos:start="23:29" pos:end="23:30">-&gt;</operator><name pos:start="23:31" pos:end="23:41">block_align</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="24:11" pos:end="103:35">else <block pos:start="24:16" pos:end="103:35">{<block_content pos:start="25:13" pos:end="103:35">
            <expr_stmt pos:start="25:13" pos:end="25:82"><expr pos:start="25:13" pos:end="25:81"><name pos:start="25:13" pos:end="25:32"><name pos:start="25:13" pos:end="25:13">s</name><operator pos:start="25:14" pos:end="25:15">-&gt;</operator><name pos:start="25:16" pos:end="25:32">next_packet_start</name></name> <operator pos:start="25:34" pos:end="25:34">=</operator> <name pos:start="25:36" pos:end="25:43">buf_size</name> <operator pos:start="25:45" pos:end="25:45">-</operator> <call pos:start="25:47" pos:end="25:81"><name pos:start="25:47" pos:end="25:51">FFMIN</name><argument_list pos:start="25:52" pos:end="25:81">(<argument pos:start="25:53" pos:end="25:60"><expr pos:start="25:53" pos:end="25:60"><name pos:start="25:53" pos:end="25:60">buf_size</name></expr></argument>, <argument pos:start="25:63" pos:end="25:80"><expr pos:start="25:63" pos:end="25:80"><name pos:start="25:63" pos:end="25:80"><name pos:start="25:63" pos:end="25:67">avctx</name><operator pos:start="25:68" pos:end="25:69">-&gt;</operator><name pos:start="25:70" pos:end="25:80">block_align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="26:13" pos:end="26:59"><expr pos:start="26:13" pos:end="26:58"><name pos:start="26:13" pos:end="26:20">buf_size</name> <operator pos:start="26:22" pos:end="26:22">=</operator> <call pos:start="26:24" pos:end="26:58"><name pos:start="26:24" pos:end="26:28">FFMIN</name><argument_list pos:start="26:29" pos:end="26:58">(<argument pos:start="26:30" pos:end="26:37"><expr pos:start="26:30" pos:end="26:37"><name pos:start="26:30" pos:end="26:37">buf_size</name></expr></argument>, <argument pos:start="26:40" pos:end="26:57"><expr pos:start="26:40" pos:end="26:57"><name pos:start="26:40" pos:end="26:57"><name pos:start="26:40" pos:end="26:44">avctx</name><operator pos:start="26:45" pos:end="26:46">-&gt;</operator><name pos:start="26:47" pos:end="26:57">block_align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="27:9" pos:end="27:40"><expr pos:start="27:9" pos:end="27:39"><name pos:start="27:9" pos:end="27:23"><name pos:start="27:9" pos:end="27:9">s</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:23">buf_bit_size</name></name> <operator pos:start="27:25" pos:end="27:25">=</operator> <name pos:start="27:27" pos:end="27:34">buf_size</name> <operator pos:start="27:36" pos:end="27:37">&lt;&lt;</operator> <literal type="number" pos:start="27:39" pos:end="27:39">3</literal></expr>;</expr_stmt>
        <comment type="block" format="doxygen" pos:start="28:9" pos:end="28:34">/** parse packet header */</comment>
        <expr_stmt pos:start="29:9" pos:end="29:48"><expr pos:start="29:9" pos:end="29:47"><call pos:start="29:9" pos:end="29:47"><name pos:start="29:9" pos:end="29:21">init_get_bits</name><argument_list pos:start="29:22" pos:end="29:47">(<argument pos:start="29:23" pos:end="29:24"><expr pos:start="29:23" pos:end="29:24"><name pos:start="29:23" pos:end="29:24">gb</name></expr></argument>, <argument pos:start="29:27" pos:end="29:29"><expr pos:start="29:27" pos:end="29:29"><name pos:start="29:27" pos:end="29:29">buf</name></expr></argument>, <argument pos:start="29:32" pos:end="29:46"><expr pos:start="29:32" pos:end="29:46"><name pos:start="29:32" pos:end="29:46"><name pos:start="29:32" pos:end="29:32">s</name><operator pos:start="29:33" pos:end="29:34">-&gt;</operator><name pos:start="29:35" pos:end="29:46">buf_bit_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="30:9" pos:end="103:35"><if pos:start="30:9" pos:end="33:9">if <condition pos:start="30:12" pos:end="30:48">(<expr pos:start="30:13" pos:end="30:47"><name pos:start="30:13" pos:end="30:27"><name pos:start="30:13" pos:end="30:17">avctx</name><operator pos:start="30:18" pos:end="30:19">-&gt;</operator><name pos:start="30:20" pos:end="30:27">codec_id</name></name> <operator pos:start="30:29" pos:end="30:30">!=</operator> <name pos:start="30:32" pos:end="30:47">AV_CODEC_ID_XMA2</name></expr>)</condition> <block pos:start="30:50" pos:end="33:9">{<block_content pos:start="31:13" pos:end="32:29">
            <expr_stmt pos:start="31:13" pos:end="31:53"><expr pos:start="31:13" pos:end="31:52"><name pos:start="31:13" pos:end="31:34">packet_sequence_number</name> <operator pos:start="31:36" pos:end="31:36">=</operator> <call pos:start="31:38" pos:end="31:52"><name pos:start="31:38" pos:end="31:45">get_bits</name><argument_list pos:start="31:46" pos:end="31:52">(<argument pos:start="31:47" pos:end="31:48"><expr pos:start="31:47" pos:end="31:48"><name pos:start="31:47" pos:end="31:48">gb</name></expr></argument>, <argument pos:start="31:51" pos:end="31:51"><expr pos:start="31:51" pos:end="31:51"><literal type="number" pos:start="31:51" pos:end="31:51">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="32:13" pos:end="32:29"><expr pos:start="32:13" pos:end="32:28"><call pos:start="32:13" pos:end="32:28"><name pos:start="32:13" pos:end="32:21">skip_bits</name><argument_list pos:start="32:22" pos:end="32:28">(<argument pos:start="32:23" pos:end="32:24"><expr pos:start="32:23" pos:end="32:24"><name pos:start="32:23" pos:end="32:24">gb</name></expr></argument>, <argument pos:start="32:27" pos:end="32:27"><expr pos:start="32:27" pos:end="32:27"><literal type="number" pos:start="32:27" pos:end="32:27">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="33:11" pos:end="103:35">else <block pos:start="33:16" pos:end="103:35">{<block_content pos:start="34:13" pos:end="103:35">
            <expr_stmt pos:start="34:13" pos:end="34:44"><expr pos:start="34:13" pos:end="34:43"><name pos:start="34:13" pos:end="34:25"><name pos:start="34:13" pos:end="34:13">s</name><operator pos:start="34:14" pos:end="34:15">-&gt;</operator><name pos:start="34:16" pos:end="34:25">num_frames</name></name> <operator pos:start="34:27" pos:end="34:27">=</operator> <call pos:start="34:29" pos:end="34:43"><name pos:start="34:29" pos:end="34:36">get_bits</name><argument_list pos:start="34:37" pos:end="34:43">(<argument pos:start="34:38" pos:end="34:39"><expr pos:start="34:38" pos:end="34:39"><name pos:start="34:38" pos:end="34:39">gb</name></expr></argument>, <argument pos:start="34:42" pos:end="34:42"><expr pos:start="34:42" pos:end="34:42"><literal type="number" pos:start="34:42" pos:end="34:42">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="35:13" pos:end="35:39"><expr pos:start="35:13" pos:end="35:38"><name pos:start="35:13" pos:end="35:34">packet_sequence_number</name> <operator pos:start="35:36" pos:end="35:36">=</operator> <literal type="number" pos:start="35:38" pos:end="35:38">0</literal></expr>;</expr_stmt>
        <comment type="block" format="doxygen" pos:start="36:9" pos:end="36:77">/** get number of bits that need to be added to the previous frame */</comment>
        <expr_stmt pos:start="37:9" pos:end="37:63"><expr pos:start="37:9" pos:end="37:62"><name pos:start="37:9" pos:end="37:27">num_bits_prev_frame</name> <operator pos:start="37:29" pos:end="37:29">=</operator> <call pos:start="37:31" pos:end="37:62"><name pos:start="37:31" pos:end="37:38">get_bits</name><argument_list pos:start="37:39" pos:end="37:62">(<argument pos:start="37:40" pos:end="37:41"><expr pos:start="37:40" pos:end="37:41"><name pos:start="37:40" pos:end="37:41">gb</name></expr></argument>, <argument pos:start="37:44" pos:end="37:61"><expr pos:start="37:44" pos:end="37:61"><name pos:start="37:44" pos:end="37:61"><name pos:start="37:44" pos:end="37:44">s</name><operator pos:start="37:45" pos:end="37:46">-&gt;</operator><name pos:start="37:47" pos:end="37:61">log2_frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="38:9" pos:end="103:35"><if pos:start="38:9" pos:end="103:35">if <condition pos:start="38:12" pos:end="38:50">(<expr pos:start="38:13" pos:end="38:49"><name pos:start="38:13" pos:end="38:27"><name pos:start="38:13" pos:end="38:17">avctx</name><operator pos:start="38:18" pos:end="38:19">-&gt;</operator><name pos:start="38:20" pos:end="38:27">codec_id</name></name> <operator pos:start="38:29" pos:end="38:30">!=</operator> <name pos:start="38:32" pos:end="38:49">AV_CODEC_ID_WMAPRO</name></expr>)</condition> <block pos:start="38:52" pos:end="103:35">{<block_content pos:start="39:13" pos:end="103:35">
            <expr_stmt pos:start="39:13" pos:end="39:29"><expr pos:start="39:13" pos:end="39:28"><call pos:start="39:13" pos:end="39:28"><name pos:start="39:13" pos:end="39:21">skip_bits</name><argument_list pos:start="39:22" pos:end="39:28">(<argument pos:start="39:23" pos:end="39:24"><expr pos:start="39:23" pos:end="39:24"><name pos:start="39:23" pos:end="39:24">gb</name></expr></argument>, <argument pos:start="39:27" pos:end="39:27"><expr pos:start="39:27" pos:end="39:27"><literal type="number" pos:start="39:27" pos:end="39:27">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="40:13" pos:end="40:46"><expr pos:start="40:13" pos:end="40:45"><name pos:start="40:13" pos:end="40:27"><name pos:start="40:13" pos:end="40:13">s</name><operator pos:start="40:14" pos:end="40:15">-&gt;</operator><name pos:start="40:16" pos:end="40:27">skip_packets</name></name> <operator pos:start="40:29" pos:end="40:29">=</operator> <call pos:start="40:31" pos:end="40:45"><name pos:start="40:31" pos:end="40:38">get_bits</name><argument_list pos:start="40:39" pos:end="40:45">(<argument pos:start="40:40" pos:end="40:41"><expr pos:start="40:40" pos:end="40:41"><name pos:start="40:40" pos:end="40:41">gb</name></expr></argument>, <argument pos:start="40:44" pos:end="40:44"><expr pos:start="40:44" pos:end="40:44"><literal type="number" pos:start="40:44" pos:end="40:44">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="41:9" pos:end="42:37"><expr pos:start="41:9" pos:end="42:36"><call pos:start="41:9" pos:end="42:36"><name pos:start="41:9" pos:end="41:15">ff_dlog</name><argument_list pos:start="41:16" pos:end="42:36">(<argument pos:start="41:17" pos:end="41:21"><expr pos:start="41:17" pos:end="41:21"><name pos:start="41:17" pos:end="41:21">avctx</name></expr></argument>, <argument pos:start="41:24" pos:end="41:46"><expr pos:start="41:24" pos:end="41:46"><literal type="string" pos:start="41:24" pos:end="41:46">"packet[%d]: nbpf %x\n"</literal></expr></argument>, <argument pos:start="41:49" pos:end="41:67"><expr pos:start="41:49" pos:end="41:67"><name pos:start="41:49" pos:end="41:67"><name pos:start="41:49" pos:end="41:53">avctx</name><operator pos:start="41:54" pos:end="41:55">-&gt;</operator><name pos:start="41:56" pos:end="41:67">frame_number</name></name></expr></argument>,
                <argument pos:start="42:17" pos:end="42:35"><expr pos:start="42:17" pos:end="42:35"><name pos:start="42:17" pos:end="42:35">num_bits_prev_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" format="doxygen" pos:start="43:9" pos:end="43:36">/** check for packet loss */</comment>
        <if_stmt pos:start="44:9" pos:end="103:35"><if pos:start="44:9" pos:end="103:35">if <condition pos:start="44:12" pos:end="45:78">(<expr pos:start="44:13" pos:end="45:77"><name pos:start="44:13" pos:end="44:27"><name pos:start="44:13" pos:end="44:17">avctx</name><operator pos:start="44:18" pos:end="44:19">-&gt;</operator><name pos:start="44:20" pos:end="44:27">codec_id</name></name> <operator pos:start="44:29" pos:end="44:30">!=</operator> <name pos:start="44:32" pos:end="44:47">AV_CODEC_ID_XMA2</name> <operator pos:start="44:49" pos:end="44:50">&amp;&amp;</operator> <operator pos:start="44:52" pos:end="44:52">!</operator><name pos:start="44:53" pos:end="44:66"><name pos:start="44:53" pos:end="44:53">s</name><operator pos:start="44:54" pos:end="44:55">-&gt;</operator><name pos:start="44:56" pos:end="44:66">packet_loss</name></name> <operator pos:start="44:68" pos:end="44:69">&amp;&amp;</operator>
            <operator pos:start="45:13" pos:end="45:13">(</operator><operator pos:start="45:14" pos:end="45:14">(</operator><name pos:start="45:15" pos:end="45:39"><name pos:start="45:15" pos:end="45:15">s</name><operator pos:start="45:16" pos:end="45:17">-&gt;</operator><name pos:start="45:18" pos:end="45:39">packet_sequence_number</name></name> <operator pos:start="45:41" pos:end="45:41">+</operator> <literal type="number" pos:start="45:43" pos:end="45:43">1</literal><operator pos:start="45:44" pos:end="45:44">)</operator> <operator pos:start="45:46" pos:end="45:46">&amp;</operator> <literal type="number" pos:start="45:48" pos:end="45:50">0xF</literal><operator pos:start="45:51" pos:end="45:51">)</operator> <operator pos:start="45:53" pos:end="45:54">!=</operator> <name pos:start="45:56" pos:end="45:77">packet_sequence_number</name></expr>)</condition> <block pos:start="45:80" pos:end="103:35">{<block_content pos:start="46:13" pos:end="103:35">
            <expr_stmt pos:start="46:13" pos:end="48:70"><expr pos:start="46:13" pos:end="48:69"><call pos:start="46:13" pos:end="48:69"><name pos:start="46:13" pos:end="46:18">av_log</name><argument_list pos:start="46:19" pos:end="48:69">(<argument pos:start="46:20" pos:end="46:24"><expr pos:start="46:20" pos:end="46:24"><name pos:start="46:20" pos:end="46:24">avctx</name></expr></argument>, <argument pos:start="46:27" pos:end="46:38"><expr pos:start="46:27" pos:end="46:38"><name pos:start="46:27" pos:end="46:38">AV_LOG_ERROR</name></expr></argument>,
                   <argument pos:start="47:20" pos:end="47:63"><expr pos:start="47:20" pos:end="47:63"><literal type="string" pos:start="47:20" pos:end="47:48">"Packet loss detected! seq %"</literal><name pos:start="47:49" pos:end="47:53">PRIx8</name><literal type="string" pos:start="47:54" pos:end="47:63">" vs %x\n"</literal></expr></argument>,
                   <argument pos:start="48:20" pos:end="48:44"><expr pos:start="48:20" pos:end="48:44"><name pos:start="48:20" pos:end="48:44"><name pos:start="48:20" pos:end="48:20">s</name><operator pos:start="48:21" pos:end="48:22">-&gt;</operator><name pos:start="48:23" pos:end="48:44">packet_sequence_number</name></name></expr></argument>, <argument pos:start="48:47" pos:end="48:68"><expr pos:start="48:47" pos:end="48:68"><name pos:start="48:47" pos:end="48:68">packet_sequence_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="49:9" pos:end="49:59"><expr pos:start="49:9" pos:end="49:58"><name pos:start="49:9" pos:end="49:33"><name pos:start="49:9" pos:end="49:9">s</name><operator pos:start="49:10" pos:end="49:11">-&gt;</operator><name pos:start="49:12" pos:end="49:33">packet_sequence_number</name></name> <operator pos:start="49:35" pos:end="49:35">=</operator> <name pos:start="49:37" pos:end="49:58">packet_sequence_number</name></expr>;</expr_stmt>
        <if_stmt pos:start="50:9" pos:end="103:35"><if pos:start="50:9" pos:end="103:35">if <condition pos:start="50:12" pos:end="50:36">(<expr pos:start="50:13" pos:end="50:35"><name pos:start="50:13" pos:end="50:31">num_bits_prev_frame</name> <operator pos:start="50:33" pos:end="50:33">&gt;</operator> <literal type="number" pos:start="50:35" pos:end="50:35">0</literal></expr>)</condition> <block pos:start="50:38" pos:end="103:35">{<block_content pos:start="51:13" pos:end="103:35">
            <decl_stmt pos:start="51:13" pos:end="51:77"><decl pos:start="51:13" pos:end="51:76"><type pos:start="51:13" pos:end="51:15"><name pos:start="51:13" pos:end="51:15">int</name></type> <name pos:start="51:17" pos:end="51:37">remaining_packet_bits</name> <init pos:start="51:39" pos:end="51:76">= <expr pos:start="51:41" pos:end="51:76"><name pos:start="51:41" pos:end="51:55"><name pos:start="51:41" pos:end="51:41">s</name><operator pos:start="51:42" pos:end="51:43">-&gt;</operator><name pos:start="51:44" pos:end="51:55">buf_bit_size</name></name> <operator pos:start="51:57" pos:end="51:57">-</operator> <call pos:start="51:59" pos:end="51:76"><name pos:start="51:59" pos:end="51:72">get_bits_count</name><argument_list pos:start="51:73" pos:end="51:76">(<argument pos:start="51:74" pos:end="51:75"><expr pos:start="51:74" pos:end="51:75"><name pos:start="51:74" pos:end="51:75">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt pos:start="52:13" pos:end="103:35"><if pos:start="52:13" pos:end="63:9">if <condition pos:start="52:16" pos:end="52:61">(<expr pos:start="52:17" pos:end="52:60"><name pos:start="52:17" pos:end="52:35">num_bits_prev_frame</name> <operator pos:start="52:37" pos:end="52:38">&gt;=</operator> <name pos:start="52:40" pos:end="52:60">remaining_packet_bits</name></expr>)</condition> <block pos:start="52:63" pos:end="63:9">{<block_content pos:start="53:17" pos:end="62:53">
                <expr_stmt pos:start="53:17" pos:end="53:60"><expr pos:start="53:17" pos:end="53:59"><name pos:start="53:17" pos:end="53:35">num_bits_prev_frame</name> <operator pos:start="53:37" pos:end="53:37">=</operator> <name pos:start="53:39" pos:end="53:59">remaining_packet_bits</name></expr>;</expr_stmt>
                <expr_stmt pos:start="54:17" pos:end="54:35"><expr pos:start="54:17" pos:end="54:34"><name pos:start="54:17" pos:end="54:30"><name pos:start="54:17" pos:end="54:17">s</name><operator pos:start="54:18" pos:end="54:19">-&gt;</operator><name pos:start="54:20" pos:end="54:30">packet_done</name></name> <operator pos:start="54:32" pos:end="54:32">=</operator> <literal type="number" pos:start="54:34" pos:end="54:34">1</literal></expr>;</expr_stmt>
            <comment type="block" format="doxygen" pos:start="55:13" pos:end="56:57">/** append the previous frame data to the remaining data from the
                previous packet to create a full frame */</comment>
            <expr_stmt pos:start="57:13" pos:end="57:53"><expr pos:start="57:13" pos:end="57:52"><call pos:start="57:13" pos:end="57:52"><name pos:start="57:13" pos:end="57:21">save_bits</name><argument_list pos:start="57:22" pos:end="57:52">(<argument pos:start="57:23" pos:end="57:23"><expr pos:start="57:23" pos:end="57:23"><name pos:start="57:23" pos:end="57:23">s</name></expr></argument>, <argument pos:start="57:26" pos:end="57:27"><expr pos:start="57:26" pos:end="57:27"><name pos:start="57:26" pos:end="57:27">gb</name></expr></argument>, <argument pos:start="57:30" pos:end="57:48"><expr pos:start="57:30" pos:end="57:48"><name pos:start="57:30" pos:end="57:48">num_bits_prev_frame</name></expr></argument>, <argument pos:start="57:51" pos:end="57:51"><expr pos:start="57:51" pos:end="57:51"><literal type="number" pos:start="57:51" pos:end="57:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="58:13" pos:end="59:57"><expr pos:start="58:13" pos:end="59:56"><call pos:start="58:13" pos:end="59:56"><name pos:start="58:13" pos:end="58:19">ff_dlog</name><argument_list pos:start="58:20" pos:end="59:56">(<argument pos:start="58:21" pos:end="58:25"><expr pos:start="58:21" pos:end="58:25"><name pos:start="58:21" pos:end="58:25">avctx</name></expr></argument>, <argument pos:start="58:28" pos:end="58:64"><expr pos:start="58:28" pos:end="58:64"><literal type="string" pos:start="58:28" pos:end="58:64">"accumulated %x bits of frame data\n"</literal></expr></argument>,
                    <argument pos:start="59:21" pos:end="59:55"><expr pos:start="59:21" pos:end="59:55"><name pos:start="59:21" pos:end="59:37"><name pos:start="59:21" pos:end="59:21">s</name><operator pos:start="59:22" pos:end="59:23">-&gt;</operator><name pos:start="59:24" pos:end="59:37">num_saved_bits</name></name> <operator pos:start="59:39" pos:end="59:39">-</operator> <name pos:start="59:41" pos:end="59:55"><name pos:start="59:41" pos:end="59:41">s</name><operator pos:start="59:42" pos:end="59:43">-&gt;</operator><name pos:start="59:44" pos:end="59:55">frame_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block" format="doxygen" pos:start="60:13" pos:end="60:63">/** decode the cross packet frame if it is valid */</comment>
            <if_stmt pos:start="61:13" pos:end="62:53"><if pos:start="61:13" pos:end="62:53">if <condition pos:start="61:16" pos:end="61:32">(<expr pos:start="61:17" pos:end="61:31"><operator pos:start="61:17" pos:end="61:17">!</operator><name pos:start="61:18" pos:end="61:31"><name pos:start="61:18" pos:end="61:18">s</name><operator pos:start="61:19" pos:end="61:20">-&gt;</operator><name pos:start="61:21" pos:end="61:31">packet_loss</name></name></expr>)</condition><block type="pseudo" pos:start="62:17" pos:end="62:53"><block_content pos:start="62:17" pos:end="62:53">
                <expr_stmt pos:start="62:17" pos:end="62:53"><expr pos:start="62:17" pos:end="62:52"><call pos:start="62:17" pos:end="62:52"><name pos:start="62:17" pos:end="62:28">decode_frame</name><argument_list pos:start="62:29" pos:end="62:52">(<argument pos:start="62:30" pos:end="62:30"><expr pos:start="62:30" pos:end="62:30"><name pos:start="62:30" pos:end="62:30">s</name></expr></argument>, <argument pos:start="62:33" pos:end="62:36"><expr pos:start="62:33" pos:end="62:36"><name pos:start="62:33" pos:end="62:36">data</name></expr></argument>, <argument pos:start="62:39" pos:end="62:51"><expr pos:start="62:39" pos:end="62:51"><name pos:start="62:39" pos:end="62:51">got_frame_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="63:11" pos:end="103:35">else if <condition pos:start="63:19" pos:end="63:55">(<expr pos:start="63:20" pos:end="63:54"><name pos:start="63:20" pos:end="63:36"><name pos:start="63:20" pos:end="63:20">s</name><operator pos:start="63:21" pos:end="63:22">-&gt;</operator><name pos:start="63:23" pos:end="63:36">num_saved_bits</name></name> <operator pos:start="63:38" pos:end="63:38">-</operator> <name pos:start="63:40" pos:end="63:54"><name pos:start="63:40" pos:end="63:40">s</name><operator pos:start="63:41" pos:end="63:42">-&gt;</operator><name pos:start="63:43" pos:end="63:54">frame_offset</name></name></expr>)</condition> <block pos:start="63:57" pos:end="103:35">{<block_content pos:start="64:13" pos:end="103:35">
            <expr_stmt pos:start="64:13" pos:end="65:57"><expr pos:start="64:13" pos:end="65:56"><call pos:start="64:13" pos:end="65:56"><name pos:start="64:13" pos:end="64:19">ff_dlog</name><argument_list pos:start="64:20" pos:end="65:56">(<argument pos:start="64:21" pos:end="64:25"><expr pos:start="64:21" pos:end="64:25"><name pos:start="64:21" pos:end="64:25">avctx</name></expr></argument>, <argument pos:start="64:28" pos:end="64:64"><expr pos:start="64:28" pos:end="64:64"><literal type="string" pos:start="64:28" pos:end="64:64">"ignoring %x previously saved bits\n"</literal></expr></argument>,
                    <argument pos:start="65:21" pos:end="65:55"><expr pos:start="65:21" pos:end="65:55"><name pos:start="65:21" pos:end="65:37"><name pos:start="65:21" pos:end="65:21">s</name><operator pos:start="65:22" pos:end="65:23">-&gt;</operator><name pos:start="65:24" pos:end="65:37">num_saved_bits</name></name> <operator pos:start="65:39" pos:end="65:39">-</operator> <name pos:start="65:41" pos:end="65:55"><name pos:start="65:41" pos:end="65:41">s</name><operator pos:start="65:42" pos:end="65:43">-&gt;</operator><name pos:start="65:44" pos:end="65:55">frame_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="66:9" pos:end="103:35"><if pos:start="66:9" pos:end="72:5">if <condition pos:start="66:12" pos:end="66:27">(<expr pos:start="66:13" pos:end="66:26"><name pos:start="66:13" pos:end="66:26"><name pos:start="66:13" pos:end="66:13">s</name><operator pos:start="66:14" pos:end="66:15">-&gt;</operator><name pos:start="66:16" pos:end="66:26">packet_loss</name></name></expr>)</condition> <block pos:start="66:29" pos:end="72:5">{<block_content pos:start="70:13" pos:end="71:31">
            <comment type="block" format="doxygen" pos:start="67:13" pos:end="69:42">/** reset number of saved bits so that the decoder
                does not start to decode incomplete frames in the
                s-&gt;len_prefix == 0 case */</comment>
            <expr_stmt pos:start="70:13" pos:end="70:34"><expr pos:start="70:13" pos:end="70:33"><name pos:start="70:13" pos:end="70:29"><name pos:start="70:13" pos:end="70:13">s</name><operator pos:start="70:14" pos:end="70:15">-&gt;</operator><name pos:start="70:16" pos:end="70:29">num_saved_bits</name></name> <operator pos:start="70:31" pos:end="70:31">=</operator> <literal type="number" pos:start="70:33" pos:end="70:33">0</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="71:13" pos:end="71:31"><expr pos:start="71:13" pos:end="71:30"><name pos:start="71:13" pos:end="71:26"><name pos:start="71:13" pos:end="71:13">s</name><operator pos:start="71:14" pos:end="71:15">-&gt;</operator><name pos:start="71:16" pos:end="71:26">packet_loss</name></name> <operator pos:start="71:28" pos:end="71:28">=</operator> <literal type="number" pos:start="71:30" pos:end="71:30">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="72:7" pos:end="103:35">else <block pos:start="72:12" pos:end="103:35">{<block_content pos:start="73:9" pos:end="103:35">
        <decl_stmt pos:start="73:9" pos:end="73:23"><decl pos:start="73:9" pos:end="73:22"><type pos:start="73:9" pos:end="73:11"><name pos:start="73:9" pos:end="73:11">int</name></type> <name pos:start="73:13" pos:end="73:22">frame_size</name></decl>;</decl_stmt>
        <expr_stmt pos:start="74:9" pos:end="74:68"><expr pos:start="74:9" pos:end="74:67"><name pos:start="74:9" pos:end="74:23"><name pos:start="74:9" pos:end="74:9">s</name><operator pos:start="74:10" pos:end="74:11">-&gt;</operator><name pos:start="74:12" pos:end="74:23">buf_bit_size</name></name> <operator pos:start="74:25" pos:end="74:25">=</operator> <operator pos:start="74:27" pos:end="74:27">(</operator><name pos:start="74:28" pos:end="74:38"><name pos:start="74:28" pos:end="74:32">avpkt</name><operator pos:start="74:33" pos:end="74:34">-&gt;</operator><name pos:start="74:35" pos:end="74:38">size</name></name> <operator pos:start="74:40" pos:end="74:40">-</operator> <name pos:start="74:42" pos:end="74:61"><name pos:start="74:42" pos:end="74:42">s</name><operator pos:start="74:43" pos:end="74:44">-&gt;</operator><name pos:start="74:45" pos:end="74:61">next_packet_start</name></name><operator pos:start="74:62" pos:end="74:62">)</operator> <operator pos:start="74:64" pos:end="74:65">&lt;&lt;</operator> <literal type="number" pos:start="74:67" pos:end="74:67">3</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="75:9" pos:end="75:56"><expr pos:start="75:9" pos:end="75:55"><call pos:start="75:9" pos:end="75:55"><name pos:start="75:9" pos:end="75:21">init_get_bits</name><argument_list pos:start="75:22" pos:end="75:55">(<argument pos:start="75:23" pos:end="75:24"><expr pos:start="75:23" pos:end="75:24"><name pos:start="75:23" pos:end="75:24">gb</name></expr></argument>, <argument pos:start="75:27" pos:end="75:37"><expr pos:start="75:27" pos:end="75:37"><name pos:start="75:27" pos:end="75:37"><name pos:start="75:27" pos:end="75:31">avpkt</name><operator pos:start="75:32" pos:end="75:33">-&gt;</operator><name pos:start="75:34" pos:end="75:37">data</name></name></expr></argument>, <argument pos:start="75:40" pos:end="75:54"><expr pos:start="75:40" pos:end="75:54"><name pos:start="75:40" pos:end="75:54"><name pos:start="75:40" pos:end="75:40">s</name><operator pos:start="75:41" pos:end="75:42">-&gt;</operator><name pos:start="75:43" pos:end="75:54">buf_bit_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="76:9" pos:end="76:40"><expr pos:start="76:9" pos:end="76:39"><call pos:start="76:9" pos:end="76:39"><name pos:start="76:9" pos:end="76:17">skip_bits</name><argument_list pos:start="76:18" pos:end="76:39">(<argument pos:start="76:19" pos:end="76:20"><expr pos:start="76:19" pos:end="76:20"><name pos:start="76:19" pos:end="76:20">gb</name></expr></argument>, <argument pos:start="76:23" pos:end="76:38"><expr pos:start="76:23" pos:end="76:38"><name pos:start="76:23" pos:end="76:38"><name pos:start="76:23" pos:end="76:23">s</name><operator pos:start="76:24" pos:end="76:25">-&gt;</operator><name pos:start="76:26" pos:end="76:38">packet_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="77:9" pos:end="94:31"><if pos:start="77:9" pos:end="83:9">if <condition pos:start="77:12" pos:end="79:48">(<expr pos:start="77:13" pos:end="79:47"><name pos:start="77:13" pos:end="77:25"><name pos:start="77:13" pos:end="77:13">s</name><operator pos:start="77:14" pos:end="77:15">-&gt;</operator><name pos:start="77:16" pos:end="77:25">len_prefix</name></name> <operator pos:start="77:27" pos:end="77:28">&amp;&amp;</operator> <call pos:start="77:30" pos:end="77:50"><name pos:start="77:30" pos:end="77:43">remaining_bits</name><argument_list pos:start="77:44" pos:end="77:50">(<argument pos:start="77:45" pos:end="77:45"><expr pos:start="77:45" pos:end="77:45"><name pos:start="77:45" pos:end="77:45">s</name></expr></argument>, <argument pos:start="77:48" pos:end="77:49"><expr pos:start="77:48" pos:end="77:49"><name pos:start="77:48" pos:end="77:49">gb</name></expr></argument>)</argument_list></call> <operator pos:start="77:52" pos:end="77:52">&gt;</operator> <name pos:start="77:54" pos:end="77:71"><name pos:start="77:54" pos:end="77:54">s</name><operator pos:start="77:55" pos:end="77:56">-&gt;</operator><name pos:start="77:57" pos:end="77:71">log2_frame_size</name></name> <operator pos:start="77:73" pos:end="77:74">&amp;&amp;</operator>
            <operator pos:start="78:13" pos:end="78:13">(</operator><name pos:start="78:14" pos:end="78:23">frame_size</name> <operator pos:start="78:25" pos:end="78:25">=</operator> <call pos:start="78:27" pos:end="78:59"><name pos:start="78:27" pos:end="78:35">show_bits</name><argument_list pos:start="78:36" pos:end="78:59">(<argument pos:start="78:37" pos:end="78:38"><expr pos:start="78:37" pos:end="78:38"><name pos:start="78:37" pos:end="78:38">gb</name></expr></argument>, <argument pos:start="78:41" pos:end="78:58"><expr pos:start="78:41" pos:end="78:58"><name pos:start="78:41" pos:end="78:58"><name pos:start="78:41" pos:end="78:41">s</name><operator pos:start="78:42" pos:end="78:43">-&gt;</operator><name pos:start="78:44" pos:end="78:58">log2_frame_size</name></name></expr></argument>)</argument_list></call><operator pos:start="78:60" pos:end="78:60">)</operator> <operator pos:start="78:62" pos:end="78:63">&amp;&amp;</operator>
            <name pos:start="79:13" pos:end="79:22">frame_size</name> <operator pos:start="79:24" pos:end="79:25">&lt;=</operator> <call pos:start="79:27" pos:end="79:47"><name pos:start="79:27" pos:end="79:40">remaining_bits</name><argument_list pos:start="79:41" pos:end="79:47">(<argument pos:start="79:42" pos:end="79:42"><expr pos:start="79:42" pos:end="79:42"><name pos:start="79:42" pos:end="79:42">s</name></expr></argument>, <argument pos:start="79:45" pos:end="79:46"><expr pos:start="79:45" pos:end="79:46"><name pos:start="79:45" pos:end="79:46">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="79:50" pos:end="83:9">{<block_content pos:start="80:13" pos:end="82:71">
            <expr_stmt pos:start="80:13" pos:end="80:44"><expr pos:start="80:13" pos:end="80:43"><call pos:start="80:13" pos:end="80:43"><name pos:start="80:13" pos:end="80:21">save_bits</name><argument_list pos:start="80:22" pos:end="80:43">(<argument pos:start="80:23" pos:end="80:23"><expr pos:start="80:23" pos:end="80:23"><name pos:start="80:23" pos:end="80:23">s</name></expr></argument>, <argument pos:start="80:26" pos:end="80:27"><expr pos:start="80:26" pos:end="80:27"><name pos:start="80:26" pos:end="80:27">gb</name></expr></argument>, <argument pos:start="80:30" pos:end="80:39"><expr pos:start="80:30" pos:end="80:39"><name pos:start="80:30" pos:end="80:39">frame_size</name></expr></argument>, <argument pos:start="80:42" pos:end="80:42"><expr pos:start="80:42" pos:end="80:42"><literal type="number" pos:start="80:42" pos:end="80:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="81:13" pos:end="82:71"><if pos:start="81:13" pos:end="82:71">if <condition pos:start="81:16" pos:end="81:32">(<expr pos:start="81:17" pos:end="81:31"><operator pos:start="81:17" pos:end="81:17">!</operator><name pos:start="81:18" pos:end="81:31"><name pos:start="81:18" pos:end="81:18">s</name><operator pos:start="81:19" pos:end="81:20">-&gt;</operator><name pos:start="81:21" pos:end="81:31">packet_loss</name></name></expr>)</condition><block type="pseudo" pos:start="82:17" pos:end="82:71"><block_content pos:start="82:17" pos:end="82:71">
                <expr_stmt pos:start="82:17" pos:end="82:71"><expr pos:start="82:17" pos:end="82:70"><name pos:start="82:17" pos:end="82:30"><name pos:start="82:17" pos:end="82:17">s</name><operator pos:start="82:18" pos:end="82:19">-&gt;</operator><name pos:start="82:20" pos:end="82:30">packet_done</name></name> <operator pos:start="82:32" pos:end="82:32">=</operator> <operator pos:start="82:34" pos:end="82:34">!</operator><call pos:start="82:35" pos:end="82:70"><name pos:start="82:35" pos:end="82:46">decode_frame</name><argument_list pos:start="82:47" pos:end="82:70">(<argument pos:start="82:48" pos:end="82:48"><expr pos:start="82:48" pos:end="82:48"><name pos:start="82:48" pos:end="82:48">s</name></expr></argument>, <argument pos:start="82:51" pos:end="82:54"><expr pos:start="82:51" pos:end="82:54"><name pos:start="82:51" pos:end="82:54">data</name></expr></argument>, <argument pos:start="82:57" pos:end="82:69"><expr pos:start="82:57" pos:end="82:69"><name pos:start="82:57" pos:end="82:69">got_frame_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="83:11" pos:end="93:9">else if <condition pos:start="83:19" pos:end="84:65">(<expr pos:start="83:20" pos:end="84:64"><operator pos:start="83:20" pos:end="83:20">!</operator><name pos:start="83:21" pos:end="83:33"><name pos:start="83:21" pos:end="83:21">s</name><operator pos:start="83:22" pos:end="83:23">-&gt;</operator><name pos:start="83:24" pos:end="83:33">len_prefix</name></name>
                   <operator pos:start="84:20" pos:end="84:21">&amp;&amp;</operator> <name pos:start="84:23" pos:end="84:39"><name pos:start="84:23" pos:end="84:23">s</name><operator pos:start="84:24" pos:end="84:25">-&gt;</operator><name pos:start="84:26" pos:end="84:39">num_saved_bits</name></name> <operator pos:start="84:41" pos:end="84:41">&gt;</operator> <call pos:start="84:43" pos:end="84:64"><name pos:start="84:43" pos:end="84:56">get_bits_count</name><argument_list pos:start="84:57" pos:end="84:64">(<argument pos:start="84:58" pos:end="84:63"><expr pos:start="84:58" pos:end="84:63"><operator pos:start="84:58" pos:end="84:58">&amp;</operator><name pos:start="84:59" pos:end="84:63"><name pos:start="84:59" pos:end="84:59">s</name><operator pos:start="84:60" pos:end="84:61">-&gt;</operator><name pos:start="84:62" pos:end="84:63">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="84:67" pos:end="93:9">{<block_content pos:start="92:13" pos:end="92:67">
            <comment type="block" format="doxygen" pos:start="85:13" pos:end="91:65">/** when the frames do not have a length prefix, we don't know
                the compressed length of the individual frames
                however, we know what part of a new packet belongs to the
                previous frame
                therefore we save the incoming packet first, then we append
                the "previous frame" data from the next packet so that
                we get a buffer that only contains full frames */</comment>
            <expr_stmt pos:start="92:13" pos:end="92:67"><expr pos:start="92:13" pos:end="92:66"><name pos:start="92:13" pos:end="92:26"><name pos:start="92:13" pos:end="92:13">s</name><operator pos:start="92:14" pos:end="92:15">-&gt;</operator><name pos:start="92:16" pos:end="92:26">packet_done</name></name> <operator pos:start="92:28" pos:end="92:28">=</operator> <operator pos:start="92:30" pos:end="92:30">!</operator><call pos:start="92:31" pos:end="92:66"><name pos:start="92:31" pos:end="92:42">decode_frame</name><argument_list pos:start="92:43" pos:end="92:66">(<argument pos:start="92:44" pos:end="92:44"><expr pos:start="92:44" pos:end="92:44"><name pos:start="92:44" pos:end="92:44">s</name></expr></argument>, <argument pos:start="92:47" pos:end="92:50"><expr pos:start="92:47" pos:end="92:50"><name pos:start="92:47" pos:end="92:50">data</name></expr></argument>, <argument pos:start="92:53" pos:end="92:65"><expr pos:start="92:53" pos:end="92:65"><name pos:start="92:53" pos:end="92:65">got_frame_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="93:11" pos:end="94:31">else<block type="pseudo" pos:start="94:13" pos:end="94:31"><block_content pos:start="94:13" pos:end="94:31">
            <expr_stmt pos:start="94:13" pos:end="94:31"><expr pos:start="94:13" pos:end="94:30"><name pos:start="94:13" pos:end="94:26"><name pos:start="94:13" pos:end="94:13">s</name><operator pos:start="94:14" pos:end="94:15">-&gt;</operator><name pos:start="94:16" pos:end="94:26">packet_done</name></name> <operator pos:start="94:28" pos:end="94:28">=</operator> <literal type="number" pos:start="94:30" pos:end="94:30">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <if_stmt pos:start="95:5" pos:end="103:35"><if pos:start="95:5" pos:end="103:35">if <condition pos:start="95:8" pos:end="96:34">(<expr pos:start="95:9" pos:end="96:33"><name pos:start="95:9" pos:end="95:22"><name pos:start="95:9" pos:end="95:9">s</name><operator pos:start="95:10" pos:end="95:11">-&gt;</operator><name pos:start="95:12" pos:end="95:22">packet_done</name></name> <operator pos:start="95:24" pos:end="95:25">&amp;&amp;</operator> <operator pos:start="95:27" pos:end="95:27">!</operator><name pos:start="95:28" pos:end="95:41"><name pos:start="95:28" pos:end="95:28">s</name><operator pos:start="95:29" pos:end="95:30">-&gt;</operator><name pos:start="95:31" pos:end="95:41">packet_loss</name></name> <operator pos:start="95:43" pos:end="95:44">&amp;&amp;</operator>
        <call pos:start="96:9" pos:end="96:29"><name pos:start="96:9" pos:end="96:22">remaining_bits</name><argument_list pos:start="96:23" pos:end="96:29">(<argument pos:start="96:24" pos:end="96:24"><expr pos:start="96:24" pos:end="96:24"><name pos:start="96:24" pos:end="96:24">s</name></expr></argument>, <argument pos:start="96:27" pos:end="96:28"><expr pos:start="96:27" pos:end="96:28"><name pos:start="96:27" pos:end="96:28">gb</name></expr></argument>)</argument_list></call> <operator pos:start="96:31" pos:end="96:31">&gt;</operator> <literal type="number" pos:start="96:33" pos:end="96:33">0</literal></expr>)</condition> <block pos:start="96:36" pos:end="103:35">{<block_content pos:start="99:9" pos:end="103:35">
        <comment type="block" format="doxygen" pos:start="97:9" pos:end="98:35">/** save the rest of the data so that it can be decoded
            with the next packet */</comment>
        <expr_stmt pos:start="99:9" pos:end="99:51"><expr pos:start="99:9" pos:end="99:50"><call pos:start="99:9" pos:end="99:50"><name pos:start="99:9" pos:end="99:17">save_bits</name><argument_list pos:start="99:18" pos:end="99:50">(<argument pos:start="99:19" pos:end="99:19"><expr pos:start="99:19" pos:end="99:19"><name pos:start="99:19" pos:end="99:19">s</name></expr></argument>, <argument pos:start="99:22" pos:end="99:23"><expr pos:start="99:22" pos:end="99:23"><name pos:start="99:22" pos:end="99:23">gb</name></expr></argument>, <argument pos:start="99:26" pos:end="99:46"><expr pos:start="99:26" pos:end="99:46"><call pos:start="99:26" pos:end="99:46"><name pos:start="99:26" pos:end="99:39">remaining_bits</name><argument_list pos:start="99:40" pos:end="99:46">(<argument pos:start="99:41" pos:end="99:41"><expr pos:start="99:41" pos:end="99:41"><name pos:start="99:41" pos:end="99:41">s</name></expr></argument>, <argument pos:start="99:44" pos:end="99:45"><expr pos:start="99:44" pos:end="99:45"><name pos:start="99:44" pos:end="99:45">gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="99:49" pos:end="99:49"><expr pos:start="99:49" pos:end="99:49"><literal type="number" pos:start="99:49" pos:end="99:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="100:5" pos:end="100:46"><expr pos:start="100:5" pos:end="100:45"><name pos:start="100:5" pos:end="100:20"><name pos:start="100:5" pos:end="100:5">s</name><operator pos:start="100:6" pos:end="100:7">-&gt;</operator><name pos:start="100:8" pos:end="100:20">packet_offset</name></name> <operator pos:start="100:22" pos:end="100:22">=</operator> <call pos:start="100:24" pos:end="100:41"><name pos:start="100:24" pos:end="100:37">get_bits_count</name><argument_list pos:start="100:38" pos:end="100:41">(<argument pos:start="100:39" pos:end="100:40"><expr pos:start="100:39" pos:end="100:40"><name pos:start="100:39" pos:end="100:40">gb</name></expr></argument>)</argument_list></call> <operator pos:start="100:43" pos:end="100:43">&amp;</operator> <literal type="number" pos:start="100:45" pos:end="100:45">7</literal></expr>;</expr_stmt>
    <if_stmt pos:start="101:5" pos:end="102:35"><if pos:start="101:5" pos:end="102:35">if <condition pos:start="101:8" pos:end="101:23">(<expr pos:start="101:9" pos:end="101:22"><name pos:start="101:9" pos:end="101:22"><name pos:start="101:9" pos:end="101:9">s</name><operator pos:start="101:10" pos:end="101:11">-&gt;</operator><name pos:start="101:12" pos:end="101:22">packet_loss</name></name></expr>)</condition><block type="pseudo" pos:start="102:9" pos:end="102:35"><block_content pos:start="102:9" pos:end="102:35">
        <return pos:start="102:9" pos:end="102:35">return <expr pos:start="102:16" pos:end="102:34"><name pos:start="102:16" pos:end="102:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
    <return pos:start="103:5" pos:end="103:35">return <expr pos:start="103:12" pos:end="103:34"><call pos:start="103:12" pos:end="103:29"><name pos:start="103:12" pos:end="103:25">get_bits_count</name><argument_list pos:start="103:26" pos:end="103:29">(<argument pos:start="103:27" pos:end="103:28"><expr pos:start="103:27" pos:end="103:28"><name pos:start="103:27" pos:end="103:28">gb</name></expr></argument>)</argument_list></call> <operator pos:start="103:31" pos:end="103:32">&gt;&gt;</operator> <literal type="number" pos:start="103:34" pos:end="103:34">3</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function></unit>
