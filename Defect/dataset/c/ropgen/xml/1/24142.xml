<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24142.c" pos:tabs="8"><function pos:start="1:1" pos:end="447:1"><type pos:start="1:1" pos:end="1:25"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name> <name pos:start="1:20" pos:end="1:25">RENAME</name></type>(<name pos:start="1:27" pos:end="1:33">hyscale</name>)<parameter_list pos:start="1:35" pos:end="9:72">(<parameter pos:start="1:36" pos:end="1:48"><decl pos:start="1:36" pos:end="1:48"><type pos:start="1:36" pos:end="1:48"><name pos:start="1:36" pos:end="1:45">SwsContext</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:48">c</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:63"><decl pos:start="1:51" pos:end="1:63"><type pos:start="1:51" pos:end="1:63"><name pos:start="1:51" pos:end="1:58">uint16_t</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:63">dst</name></decl></parameter>, <parameter pos:start="1:66" pos:end="1:78"><decl pos:start="1:66" pos:end="1:78"><type pos:start="1:66" pos:end="1:78"><name pos:start="1:66" pos:end="1:69">long</name></type> <name pos:start="1:71" pos:end="1:78">dstWidth</name></decl></parameter>, <parameter pos:start="1:81" pos:end="1:92"><decl pos:start="1:81" pos:end="1:92"><type pos:start="1:81" pos:end="1:92"><name pos:start="1:81" pos:end="1:87">uint8_t</name> <modifier pos:start="1:89" pos:end="1:89">*</modifier></type><name pos:start="1:90" pos:end="1:92">src</name></decl></parameter>, <parameter pos:start="1:95" pos:end="1:102"><decl pos:start="1:95" pos:end="1:102"><type pos:start="1:95" pos:end="1:102"><name pos:start="1:95" pos:end="1:97">int</name></type> <name pos:start="1:99" pos:end="1:102">srcW</name></decl></parameter>, <parameter pos:start="1:105" pos:end="1:112"><decl pos:start="1:105" pos:end="1:112"><type pos:start="1:105" pos:end="1:112"><name pos:start="1:105" pos:end="1:107">int</name></type> <name pos:start="1:109" pos:end="1:112">xInc</name></decl></parameter>,

                                   <parameter pos:start="3:36" pos:end="3:44"><decl pos:start="3:36" pos:end="3:44"><type pos:start="3:36" pos:end="3:44"><name pos:start="3:36" pos:end="3:38">int</name></type> <name pos:start="3:40" pos:end="3:44">flags</name></decl></parameter>, <parameter pos:start="3:47" pos:end="3:63"><decl pos:start="3:47" pos:end="3:63"><type pos:start="3:47" pos:end="3:63"><name pos:start="3:47" pos:end="3:49">int</name></type> <name pos:start="3:51" pos:end="3:63">canMMX2BeUsed</name></decl></parameter>, <parameter pos:start="3:66" pos:end="3:84"><decl pos:start="3:66" pos:end="3:84"><type pos:start="3:66" pos:end="3:84"><name pos:start="3:66" pos:end="3:72">int16_t</name> <modifier pos:start="3:74" pos:end="3:74">*</modifier></type><name pos:start="3:75" pos:end="3:84">hLumFilter</name></decl></parameter>,

                                   <parameter pos:start="5:36" pos:end="5:57"><decl pos:start="5:36" pos:end="5:57"><type pos:start="5:36" pos:end="5:57"><name pos:start="5:36" pos:end="5:42">int16_t</name> <modifier pos:start="5:44" pos:end="5:44">*</modifier></type><name pos:start="5:45" pos:end="5:57">hLumFilterPos</name></decl></parameter>, <parameter pos:start="5:60" pos:end="5:77"><decl pos:start="5:60" pos:end="5:77"><type pos:start="5:60" pos:end="5:77"><name pos:start="5:60" pos:end="5:62">int</name></type> <name pos:start="5:64" pos:end="5:77">hLumFilterSize</name></decl></parameter>, <parameter pos:start="5:80" pos:end="5:95"><decl pos:start="5:80" pos:end="5:95"><type pos:start="5:80" pos:end="5:95"><name pos:start="5:80" pos:end="5:83">void</name> <modifier pos:start="5:85" pos:end="5:85">*</modifier></type><name pos:start="5:86" pos:end="5:95">funnyYCode</name></decl></parameter>,

                                   <parameter pos:start="7:36" pos:end="7:48"><decl pos:start="7:36" pos:end="7:48"><type pos:start="7:36" pos:end="7:48"><name pos:start="7:36" pos:end="7:38">int</name></type> <name pos:start="7:40" pos:end="7:48">srcFormat</name></decl></parameter>, <parameter pos:start="7:51" pos:end="7:75"><decl pos:start="7:51" pos:end="7:75"><type pos:start="7:51" pos:end="7:75"><name pos:start="7:51" pos:end="7:57">uint8_t</name> <modifier pos:start="7:59" pos:end="7:59">*</modifier></type><name pos:start="7:60" pos:end="7:75">formatConvBuffer</name></decl></parameter>, <parameter pos:start="7:78" pos:end="7:96"><decl pos:start="7:78" pos:end="7:96"><type pos:start="7:78" pos:end="7:96"><name pos:start="7:78" pos:end="7:84">int16_t</name> <modifier pos:start="7:86" pos:end="7:86">*</modifier></type><name pos:start="7:87" pos:end="7:96">mmx2Filter</name></decl></parameter>,

                                   <parameter pos:start="9:36" pos:end="9:57"><decl pos:start="9:36" pos:end="9:57"><type pos:start="9:36" pos:end="9:57"><name pos:start="9:36" pos:end="9:42">int32_t</name> <modifier pos:start="9:44" pos:end="9:44">*</modifier></type><name pos:start="9:45" pos:end="9:57">mmx2FilterPos</name></decl></parameter>, <parameter pos:start="9:60" pos:end="9:71"><decl pos:start="9:60" pos:end="9:71"><type pos:start="9:60" pos:end="9:71"><name pos:start="9:60" pos:end="9:66">uint8_t</name> <modifier pos:start="9:68" pos:end="9:68">*</modifier></type><name pos:start="9:69" pos:end="9:71">pal</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="447:1">{<block_content pos:start="13:5" pos:end="445:5">

    <if_stmt pos:start="13:5" pos:end="146:0"><if pos:start="13:5" pos:end="21:5">if <condition pos:start="13:8" pos:end="13:66">(<expr pos:start="13:9" pos:end="13:65"><name pos:start="13:9" pos:end="13:17">srcFormat</name><operator pos:start="13:18" pos:end="13:19">==</operator><name pos:start="13:20" pos:end="13:34">PIX_FMT_YUYV422</name> <operator pos:start="13:36" pos:end="13:37">||</operator> <name pos:start="13:39" pos:end="13:47">srcFormat</name><operator pos:start="13:48" pos:end="13:49">==</operator><name pos:start="13:50" pos:end="13:65">PIX_FMT_GRAY16BE</name></expr>)</condition>

    <block pos:start="15:5" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:30">

        <function_decl pos:start="17:9" pos:end="17:53"><type pos:start="17:9" pos:end="17:14"><name pos:start="17:9" pos:end="17:14">RENAME</name></type>(<name pos:start="17:16" pos:end="17:22">yuy2ToY</name>)<parameter_list pos:start="17:24" pos:end="17:52">(<parameter pos:start="17:25" pos:end="17:40"><decl pos:start="17:25" pos:end="17:40"><type pos:start="17:25" pos:end="17:40"><name pos:start="17:25" pos:end="17:40">formatConvBuffer</name></type></decl></parameter>, <parameter pos:start="17:43" pos:end="17:45"><decl pos:start="17:43" pos:end="17:45"><type pos:start="17:43" pos:end="17:45"><name pos:start="17:43" pos:end="17:45">src</name></type></decl></parameter>, <parameter pos:start="17:48" pos:end="17:51"><decl pos:start="17:48" pos:end="17:51"><type pos:start="17:48" pos:end="17:51"><name pos:start="17:48" pos:end="17:51">srcW</name></type></decl></parameter>)</parameter_list>;</function_decl>

        <expr_stmt pos:start="19:9" pos:end="19:30"><expr pos:start="19:9" pos:end="19:29"><name pos:start="19:9" pos:end="19:11">src</name><operator pos:start="19:12" pos:end="19:12">=</operator> <name pos:start="19:14" pos:end="19:29">formatConvBuffer</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="23:5" pos:end="31:5">else if <condition pos:start="23:13" pos:end="23:71">(<expr pos:start="23:14" pos:end="23:70"><name pos:start="23:14" pos:end="23:22">srcFormat</name><operator pos:start="23:23" pos:end="23:24">==</operator><name pos:start="23:25" pos:end="23:39">PIX_FMT_UYVY422</name> <operator pos:start="23:41" pos:end="23:42">||</operator> <name pos:start="23:44" pos:end="23:52">srcFormat</name><operator pos:start="23:53" pos:end="23:54">==</operator><name pos:start="23:55" pos:end="23:70">PIX_FMT_GRAY16LE</name></expr>)</condition>

    <block pos:start="25:5" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:30">

        <function_decl pos:start="27:9" pos:end="27:53"><type pos:start="27:9" pos:end="27:14"><name pos:start="27:9" pos:end="27:14">RENAME</name></type>(<name pos:start="27:16" pos:end="27:22">uyvyToY</name>)<parameter_list pos:start="27:24" pos:end="27:52">(<parameter pos:start="27:25" pos:end="27:40"><decl pos:start="27:25" pos:end="27:40"><type pos:start="27:25" pos:end="27:40"><name pos:start="27:25" pos:end="27:40">formatConvBuffer</name></type></decl></parameter>, <parameter pos:start="27:43" pos:end="27:45"><decl pos:start="27:43" pos:end="27:45"><type pos:start="27:43" pos:end="27:45"><name pos:start="27:43" pos:end="27:45">src</name></type></decl></parameter>, <parameter pos:start="27:48" pos:end="27:51"><decl pos:start="27:48" pos:end="27:51"><type pos:start="27:48" pos:end="27:51"><name pos:start="27:48" pos:end="27:51">srcW</name></type></decl></parameter>)</parameter_list>;</function_decl>

        <expr_stmt pos:start="29:9" pos:end="29:30"><expr pos:start="29:9" pos:end="29:29"><name pos:start="29:9" pos:end="29:11">src</name><operator pos:start="29:12" pos:end="29:12">=</operator> <name pos:start="29:14" pos:end="29:29">formatConvBuffer</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="33:5" pos:end="41:5">else if <condition pos:start="33:13" pos:end="33:38">(<expr pos:start="33:14" pos:end="33:37"><name pos:start="33:14" pos:end="33:22">srcFormat</name><operator pos:start="33:23" pos:end="33:24">==</operator><name pos:start="33:25" pos:end="33:37">PIX_FMT_RGB32</name></expr>)</condition>

    <block pos:start="35:5" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:30">

        <function_decl pos:start="37:9" pos:end="37:54"><type pos:start="37:9" pos:end="37:14"><name pos:start="37:9" pos:end="37:14">RENAME</name></type>(<name pos:start="37:16" pos:end="37:23">bgr32ToY</name>)<parameter_list pos:start="37:25" pos:end="37:53">(<parameter pos:start="37:26" pos:end="37:41"><decl pos:start="37:26" pos:end="37:41"><type pos:start="37:26" pos:end="37:41"><name pos:start="37:26" pos:end="37:41">formatConvBuffer</name></type></decl></parameter>, <parameter pos:start="37:44" pos:end="37:46"><decl pos:start="37:44" pos:end="37:46"><type pos:start="37:44" pos:end="37:46"><name pos:start="37:44" pos:end="37:46">src</name></type></decl></parameter>, <parameter pos:start="37:49" pos:end="37:52"><decl pos:start="37:49" pos:end="37:52"><type pos:start="37:49" pos:end="37:52"><name pos:start="37:49" pos:end="37:52">srcW</name></type></decl></parameter>)</parameter_list>;</function_decl>

        <expr_stmt pos:start="39:9" pos:end="39:30"><expr pos:start="39:9" pos:end="39:29"><name pos:start="39:9" pos:end="39:11">src</name><operator pos:start="39:12" pos:end="39:12">=</operator> <name pos:start="39:14" pos:end="39:29">formatConvBuffer</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="43:5" pos:end="51:5">else if <condition pos:start="43:13" pos:end="43:40">(<expr pos:start="43:14" pos:end="43:39"><name pos:start="43:14" pos:end="43:22">srcFormat</name><operator pos:start="43:23" pos:end="43:24">==</operator><name pos:start="43:25" pos:end="43:39">PIX_FMT_RGB32_1</name></expr>)</condition>

    <block pos:start="45:5" pos:end="51:5">{<block_content pos:start="47:9" pos:end="49:30">

        <expr_stmt pos:start="47:9" pos:end="47:65"><expr pos:start="47:9" pos:end="47:64"><call pos:start="47:9" pos:end="47:64"><call pos:start="47:9" pos:end="47:24"><name pos:start="47:9" pos:end="47:14">RENAME</name><argument_list pos:start="47:15" pos:end="47:24">(<argument pos:start="47:16" pos:end="47:23"><expr pos:start="47:16" pos:end="47:23"><name pos:start="47:16" pos:end="47:23">bgr32ToY</name></expr></argument>)</argument_list></call><argument_list pos:start="47:25" pos:end="47:64">(<argument pos:start="47:26" pos:end="47:41"><expr pos:start="47:26" pos:end="47:41"><name pos:start="47:26" pos:end="47:41">formatConvBuffer</name></expr></argument>, <argument pos:start="47:44" pos:end="47:57"><expr pos:start="47:44" pos:end="47:57"><name pos:start="47:44" pos:end="47:46">src</name><operator pos:start="47:47" pos:end="47:47">+</operator><name pos:start="47:48" pos:end="47:57">ALT32_CORR</name></expr></argument>, <argument pos:start="47:60" pos:end="47:63"><expr pos:start="47:60" pos:end="47:63"><name pos:start="47:60" pos:end="47:63">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:30"><expr pos:start="49:9" pos:end="49:29"><name pos:start="49:9" pos:end="49:11">src</name><operator pos:start="49:12" pos:end="49:12">=</operator> <name pos:start="49:14" pos:end="49:29">formatConvBuffer</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="53:5" pos:end="61:5">else if <condition pos:start="53:13" pos:end="53:38">(<expr pos:start="53:14" pos:end="53:37"><name pos:start="53:14" pos:end="53:22">srcFormat</name><operator pos:start="53:23" pos:end="53:24">==</operator><name pos:start="53:25" pos:end="53:37">PIX_FMT_BGR24</name></expr>)</condition>

    <block pos:start="55:5" pos:end="61:5">{<block_content pos:start="57:9" pos:end="59:30">

        <function_decl pos:start="57:9" pos:end="57:54"><type pos:start="57:9" pos:end="57:14"><name pos:start="57:9" pos:end="57:14">RENAME</name></type>(<name pos:start="57:16" pos:end="57:23">bgr24ToY</name>)<parameter_list pos:start="57:25" pos:end="57:53">(<parameter pos:start="57:26" pos:end="57:41"><decl pos:start="57:26" pos:end="57:41"><type pos:start="57:26" pos:end="57:41"><name pos:start="57:26" pos:end="57:41">formatConvBuffer</name></type></decl></parameter>, <parameter pos:start="57:44" pos:end="57:46"><decl pos:start="57:44" pos:end="57:46"><type pos:start="57:44" pos:end="57:46"><name pos:start="57:44" pos:end="57:46">src</name></type></decl></parameter>, <parameter pos:start="57:49" pos:end="57:52"><decl pos:start="57:49" pos:end="57:52"><type pos:start="57:49" pos:end="57:52"><name pos:start="57:49" pos:end="57:52">srcW</name></type></decl></parameter>)</parameter_list>;</function_decl>

        <expr_stmt pos:start="59:9" pos:end="59:30"><expr pos:start="59:9" pos:end="59:29"><name pos:start="59:9" pos:end="59:11">src</name><operator pos:start="59:12" pos:end="59:12">=</operator> <name pos:start="59:14" pos:end="59:29">formatConvBuffer</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="63:5" pos:end="71:5">else if <condition pos:start="63:13" pos:end="63:39">(<expr pos:start="63:14" pos:end="63:38"><name pos:start="63:14" pos:end="63:22">srcFormat</name><operator pos:start="63:23" pos:end="63:24">==</operator><name pos:start="63:25" pos:end="63:38">PIX_FMT_BGR565</name></expr>)</condition>

    <block pos:start="65:5" pos:end="71:5">{<block_content pos:start="67:9" pos:end="69:30">

        <function_decl pos:start="67:9" pos:end="67:54"><type pos:start="67:9" pos:end="67:14"><name pos:start="67:9" pos:end="67:14">RENAME</name></type>(<name pos:start="67:16" pos:end="67:23">bgr16ToY</name>)<parameter_list pos:start="67:25" pos:end="67:53">(<parameter pos:start="67:26" pos:end="67:41"><decl pos:start="67:26" pos:end="67:41"><type pos:start="67:26" pos:end="67:41"><name pos:start="67:26" pos:end="67:41">formatConvBuffer</name></type></decl></parameter>, <parameter pos:start="67:44" pos:end="67:46"><decl pos:start="67:44" pos:end="67:46"><type pos:start="67:44" pos:end="67:46"><name pos:start="67:44" pos:end="67:46">src</name></type></decl></parameter>, <parameter pos:start="67:49" pos:end="67:52"><decl pos:start="67:49" pos:end="67:52"><type pos:start="67:49" pos:end="67:52"><name pos:start="67:49" pos:end="67:52">srcW</name></type></decl></parameter>)</parameter_list>;</function_decl>

        <expr_stmt pos:start="69:9" pos:end="69:30"><expr pos:start="69:9" pos:end="69:29"><name pos:start="69:9" pos:end="69:11">src</name><operator pos:start="69:12" pos:end="69:12">=</operator> <name pos:start="69:14" pos:end="69:29">formatConvBuffer</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="73:5" pos:end="81:5">else if <condition pos:start="73:13" pos:end="73:39">(<expr pos:start="73:14" pos:end="73:38"><name pos:start="73:14" pos:end="73:22">srcFormat</name><operator pos:start="73:23" pos:end="73:24">==</operator><name pos:start="73:25" pos:end="73:38">PIX_FMT_BGR555</name></expr>)</condition>

    <block pos:start="75:5" pos:end="81:5">{<block_content pos:start="77:9" pos:end="79:30">

        <function_decl pos:start="77:9" pos:end="77:54"><type pos:start="77:9" pos:end="77:14"><name pos:start="77:9" pos:end="77:14">RENAME</name></type>(<name pos:start="77:16" pos:end="77:23">bgr15ToY</name>)<parameter_list pos:start="77:25" pos:end="77:53">(<parameter pos:start="77:26" pos:end="77:41"><decl pos:start="77:26" pos:end="77:41"><type pos:start="77:26" pos:end="77:41"><name pos:start="77:26" pos:end="77:41">formatConvBuffer</name></type></decl></parameter>, <parameter pos:start="77:44" pos:end="77:46"><decl pos:start="77:44" pos:end="77:46"><type pos:start="77:44" pos:end="77:46"><name pos:start="77:44" pos:end="77:46">src</name></type></decl></parameter>, <parameter pos:start="77:49" pos:end="77:52"><decl pos:start="77:49" pos:end="77:52"><type pos:start="77:49" pos:end="77:52"><name pos:start="77:49" pos:end="77:52">srcW</name></type></decl></parameter>)</parameter_list>;</function_decl>

        <expr_stmt pos:start="79:9" pos:end="79:30"><expr pos:start="79:9" pos:end="79:29"><name pos:start="79:9" pos:end="79:11">src</name><operator pos:start="79:12" pos:end="79:12">=</operator> <name pos:start="79:14" pos:end="79:29">formatConvBuffer</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="83:5" pos:end="91:5">else if <condition pos:start="83:13" pos:end="83:38">(<expr pos:start="83:14" pos:end="83:37"><name pos:start="83:14" pos:end="83:22">srcFormat</name><operator pos:start="83:23" pos:end="83:24">==</operator><name pos:start="83:25" pos:end="83:37">PIX_FMT_BGR32</name></expr>)</condition>

    <block pos:start="85:5" pos:end="91:5">{<block_content pos:start="87:9" pos:end="89:30">

        <function_decl pos:start="87:9" pos:end="87:54"><type pos:start="87:9" pos:end="87:14"><name pos:start="87:9" pos:end="87:14">RENAME</name></type>(<name pos:start="87:16" pos:end="87:23">rgb32ToY</name>)<parameter_list pos:start="87:25" pos:end="87:53">(<parameter pos:start="87:26" pos:end="87:41"><decl pos:start="87:26" pos:end="87:41"><type pos:start="87:26" pos:end="87:41"><name pos:start="87:26" pos:end="87:41">formatConvBuffer</name></type></decl></parameter>, <parameter pos:start="87:44" pos:end="87:46"><decl pos:start="87:44" pos:end="87:46"><type pos:start="87:44" pos:end="87:46"><name pos:start="87:44" pos:end="87:46">src</name></type></decl></parameter>, <parameter pos:start="87:49" pos:end="87:52"><decl pos:start="87:49" pos:end="87:52"><type pos:start="87:49" pos:end="87:52"><name pos:start="87:49" pos:end="87:52">srcW</name></type></decl></parameter>)</parameter_list>;</function_decl>

        <expr_stmt pos:start="89:9" pos:end="89:30"><expr pos:start="89:9" pos:end="89:29"><name pos:start="89:9" pos:end="89:11">src</name><operator pos:start="89:12" pos:end="89:12">=</operator> <name pos:start="89:14" pos:end="89:29">formatConvBuffer</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="93:5" pos:end="101:5">else if <condition pos:start="93:13" pos:end="93:40">(<expr pos:start="93:14" pos:end="93:39"><name pos:start="93:14" pos:end="93:22">srcFormat</name><operator pos:start="93:23" pos:end="93:24">==</operator><name pos:start="93:25" pos:end="93:39">PIX_FMT_BGR32_1</name></expr>)</condition>

    <block pos:start="95:5" pos:end="101:5">{<block_content pos:start="97:9" pos:end="99:30">

        <expr_stmt pos:start="97:9" pos:end="97:65"><expr pos:start="97:9" pos:end="97:64"><call pos:start="97:9" pos:end="97:64"><call pos:start="97:9" pos:end="97:24"><name pos:start="97:9" pos:end="97:14">RENAME</name><argument_list pos:start="97:15" pos:end="97:24">(<argument pos:start="97:16" pos:end="97:23"><expr pos:start="97:16" pos:end="97:23"><name pos:start="97:16" pos:end="97:23">rgb32ToY</name></expr></argument>)</argument_list></call><argument_list pos:start="97:25" pos:end="97:64">(<argument pos:start="97:26" pos:end="97:41"><expr pos:start="97:26" pos:end="97:41"><name pos:start="97:26" pos:end="97:41">formatConvBuffer</name></expr></argument>, <argument pos:start="97:44" pos:end="97:57"><expr pos:start="97:44" pos:end="97:57"><name pos:start="97:44" pos:end="97:46">src</name><operator pos:start="97:47" pos:end="97:47">+</operator><name pos:start="97:48" pos:end="97:57">ALT32_CORR</name></expr></argument>, <argument pos:start="97:60" pos:end="97:63"><expr pos:start="97:60" pos:end="97:63"><name pos:start="97:60" pos:end="97:63">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:30"><expr pos:start="99:9" pos:end="99:29"><name pos:start="99:9" pos:end="99:11">src</name><operator pos:start="99:12" pos:end="99:12">=</operator> <name pos:start="99:14" pos:end="99:29">formatConvBuffer</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="103:5" pos:end="111:5">else if <condition pos:start="103:13" pos:end="103:38">(<expr pos:start="103:14" pos:end="103:37"><name pos:start="103:14" pos:end="103:22">srcFormat</name><operator pos:start="103:23" pos:end="103:24">==</operator><name pos:start="103:25" pos:end="103:37">PIX_FMT_RGB24</name></expr>)</condition>

    <block pos:start="105:5" pos:end="111:5">{<block_content pos:start="107:9" pos:end="109:30">

        <function_decl pos:start="107:9" pos:end="107:54"><type pos:start="107:9" pos:end="107:14"><name pos:start="107:9" pos:end="107:14">RENAME</name></type>(<name pos:start="107:16" pos:end="107:23">rgb24ToY</name>)<parameter_list pos:start="107:25" pos:end="107:53">(<parameter pos:start="107:26" pos:end="107:41"><decl pos:start="107:26" pos:end="107:41"><type pos:start="107:26" pos:end="107:41"><name pos:start="107:26" pos:end="107:41">formatConvBuffer</name></type></decl></parameter>, <parameter pos:start="107:44" pos:end="107:46"><decl pos:start="107:44" pos:end="107:46"><type pos:start="107:44" pos:end="107:46"><name pos:start="107:44" pos:end="107:46">src</name></type></decl></parameter>, <parameter pos:start="107:49" pos:end="107:52"><decl pos:start="107:49" pos:end="107:52"><type pos:start="107:49" pos:end="107:52"><name pos:start="107:49" pos:end="107:52">srcW</name></type></decl></parameter>)</parameter_list>;</function_decl>

        <expr_stmt pos:start="109:9" pos:end="109:30"><expr pos:start="109:9" pos:end="109:29"><name pos:start="109:9" pos:end="109:11">src</name><operator pos:start="109:12" pos:end="109:12">=</operator> <name pos:start="109:14" pos:end="109:29">formatConvBuffer</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="113:5" pos:end="121:5">else if <condition pos:start="113:13" pos:end="113:39">(<expr pos:start="113:14" pos:end="113:38"><name pos:start="113:14" pos:end="113:22">srcFormat</name><operator pos:start="113:23" pos:end="113:24">==</operator><name pos:start="113:25" pos:end="113:38">PIX_FMT_RGB565</name></expr>)</condition>

    <block pos:start="115:5" pos:end="121:5">{<block_content pos:start="117:9" pos:end="119:30">

        <function_decl pos:start="117:9" pos:end="117:54"><type pos:start="117:9" pos:end="117:14"><name pos:start="117:9" pos:end="117:14">RENAME</name></type>(<name pos:start="117:16" pos:end="117:23">rgb16ToY</name>)<parameter_list pos:start="117:25" pos:end="117:53">(<parameter pos:start="117:26" pos:end="117:41"><decl pos:start="117:26" pos:end="117:41"><type pos:start="117:26" pos:end="117:41"><name pos:start="117:26" pos:end="117:41">formatConvBuffer</name></type></decl></parameter>, <parameter pos:start="117:44" pos:end="117:46"><decl pos:start="117:44" pos:end="117:46"><type pos:start="117:44" pos:end="117:46"><name pos:start="117:44" pos:end="117:46">src</name></type></decl></parameter>, <parameter pos:start="117:49" pos:end="117:52"><decl pos:start="117:49" pos:end="117:52"><type pos:start="117:49" pos:end="117:52"><name pos:start="117:49" pos:end="117:52">srcW</name></type></decl></parameter>)</parameter_list>;</function_decl>

        <expr_stmt pos:start="119:9" pos:end="119:30"><expr pos:start="119:9" pos:end="119:29"><name pos:start="119:9" pos:end="119:11">src</name><operator pos:start="119:12" pos:end="119:12">=</operator> <name pos:start="119:14" pos:end="119:29">formatConvBuffer</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="123:5" pos:end="131:5">else if <condition pos:start="123:13" pos:end="123:39">(<expr pos:start="123:14" pos:end="123:38"><name pos:start="123:14" pos:end="123:22">srcFormat</name><operator pos:start="123:23" pos:end="123:24">==</operator><name pos:start="123:25" pos:end="123:38">PIX_FMT_RGB555</name></expr>)</condition>

    <block pos:start="125:5" pos:end="131:5">{<block_content pos:start="127:9" pos:end="129:30">

        <function_decl pos:start="127:9" pos:end="127:54"><type pos:start="127:9" pos:end="127:14"><name pos:start="127:9" pos:end="127:14">RENAME</name></type>(<name pos:start="127:16" pos:end="127:23">rgb15ToY</name>)<parameter_list pos:start="127:25" pos:end="127:53">(<parameter pos:start="127:26" pos:end="127:41"><decl pos:start="127:26" pos:end="127:41"><type pos:start="127:26" pos:end="127:41"><name pos:start="127:26" pos:end="127:41">formatConvBuffer</name></type></decl></parameter>, <parameter pos:start="127:44" pos:end="127:46"><decl pos:start="127:44" pos:end="127:46"><type pos:start="127:44" pos:end="127:46"><name pos:start="127:44" pos:end="127:46">src</name></type></decl></parameter>, <parameter pos:start="127:49" pos:end="127:52"><decl pos:start="127:49" pos:end="127:52"><type pos:start="127:49" pos:end="127:52"><name pos:start="127:49" pos:end="127:52">srcW</name></type></decl></parameter>)</parameter_list>;</function_decl>

        <expr_stmt pos:start="129:9" pos:end="129:30"><expr pos:start="129:9" pos:end="129:29"><name pos:start="129:9" pos:end="129:11">src</name><operator pos:start="129:12" pos:end="129:12">=</operator> <name pos:start="129:14" pos:end="129:29">formatConvBuffer</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="133:5" pos:end="146:0">else if <condition pos:start="133:13" pos:end="133:156">(<expr pos:start="133:14" pos:end="133:155"><name pos:start="133:14" pos:end="133:22">srcFormat</name><operator pos:start="133:23" pos:end="133:24">==</operator><name pos:start="133:25" pos:end="133:36">PIX_FMT_RGB8</name> <operator pos:start="133:38" pos:end="133:39">||</operator> <name pos:start="133:41" pos:end="133:49">srcFormat</name><operator pos:start="133:50" pos:end="133:51">==</operator><name pos:start="133:52" pos:end="133:63">PIX_FMT_BGR8</name> <operator pos:start="133:65" pos:end="133:66">||</operator> <name pos:start="133:68" pos:end="133:76">srcFormat</name><operator pos:start="133:77" pos:end="133:78">==</operator><name pos:start="133:79" pos:end="133:90">PIX_FMT_PAL8</name> <operator pos:start="133:92" pos:end="133:93">||</operator> <name pos:start="133:95" pos:end="133:103">srcFormat</name><operator pos:start="133:104" pos:end="133:105">==</operator><name pos:start="133:106" pos:end="133:122">PIX_FMT_BGR4_BYTE</name>  <operator pos:start="133:125" pos:end="133:126">||</operator> <name pos:start="133:128" pos:end="133:136">srcFormat</name><operator pos:start="133:137" pos:end="133:138">==</operator><name pos:start="133:139" pos:end="133:155">PIX_FMT_RGB4_BYTE</name></expr>)</condition>

    <block pos:start="135:5" pos:end="146:0">{<block_content pos:start="137:9" pos:end="139:30">

        <expr_stmt pos:start="137:9" pos:end="137:68"><expr pos:start="137:9" pos:end="137:67"><call pos:start="137:9" pos:end="137:67"><call pos:start="137:9" pos:end="137:22"><name pos:start="137:9" pos:end="137:14">RENAME</name><argument_list pos:start="137:15" pos:end="137:22">(<argument pos:start="137:16" pos:end="137:21"><expr pos:start="137:16" pos:end="137:21"><name pos:start="137:16" pos:end="137:21">palToY</name></expr></argument>)</argument_list></call><argument_list pos:start="137:23" pos:end="137:67">(<argument pos:start="137:24" pos:end="137:39"><expr pos:start="137:24" pos:end="137:39"><name pos:start="137:24" pos:end="137:39">formatConvBuffer</name></expr></argument>, <argument pos:start="137:42" pos:end="137:44"><expr pos:start="137:42" pos:end="137:44"><name pos:start="137:42" pos:end="137:44">src</name></expr></argument>, <argument pos:start="137:47" pos:end="137:50"><expr pos:start="137:47" pos:end="137:50"><name pos:start="137:47" pos:end="137:50">srcW</name></expr></argument>, <argument pos:start="137:53" pos:end="137:66"><expr pos:start="137:53" pos:end="137:66"><operator pos:start="137:53" pos:end="137:53">(</operator><name pos:start="137:54" pos:end="137:61">uint32_t</name><operator pos:start="137:62" pos:end="137:62">*</operator><operator pos:start="137:63" pos:end="137:63">)</operator><name pos:start="137:64" pos:end="137:66">pal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:30"><expr pos:start="139:9" pos:end="139:29"><name pos:start="139:9" pos:end="139:11">src</name><operator pos:start="139:12" pos:end="139:12">=</operator> <name pos:start="139:14" pos:end="139:29">formatConvBuffer</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="145:1" pos:end="145:15">#<cpp:directive pos:start="145:2" pos:end="145:6">ifdef</cpp:directive> <name pos:start="145:8" pos:end="145:15">HAVE_MMX</name></cpp:ifdef>

    <comment type="line" pos:start="147:5" pos:end="147:96">// Use the new MMX scaler if the MMX2 one can't be used (it is faster than the x86 ASM one).</comment>

    <if_stmt pos:start="149:5" pos:end="419:5"><if pos:start="149:5" pos:end="419:5">if <condition pos:start="149:8" pos:end="152:0">(<expr pos:start="149:9" pos:end="149:54"><operator pos:start="149:9" pos:end="149:9">!</operator><operator pos:start="149:10" pos:end="149:10">(</operator><name pos:start="149:11" pos:end="149:15">flags</name><operator pos:start="149:16" pos:end="149:16">&amp;</operator><name pos:start="149:17" pos:end="149:33">SWS_FAST_BILINEAR</name><operator pos:start="149:34" pos:end="149:34">)</operator> <operator pos:start="149:36" pos:end="149:37">||</operator> <operator pos:start="149:39" pos:end="149:39">(</operator><operator pos:start="149:40" pos:end="149:40">!</operator><name pos:start="149:41" pos:end="149:53">canMMX2BeUsed</name><operator pos:start="149:54" pos:end="149:54">)</operator></expr>)</condition><block type="pseudo" pos:start="153:5" pos:end="419:5"><block_content pos:start="153:5" pos:end="419:5">

<cpp:else pos:start="151:1" pos:end="151:5">#<cpp:directive pos:start="151:2" pos:end="151:5">else</cpp:directive></cpp:else>

    <if_stmt pos:start="153:5" pos:end="419:5"><if pos:start="153:5" pos:end="161:5">if <condition pos:start="153:8" pos:end="156:0">(<expr pos:start="153:9" pos:end="153:34"><operator pos:start="153:9" pos:end="153:9">!</operator><operator pos:start="153:10" pos:end="153:10">(</operator><name pos:start="153:11" pos:end="153:15">flags</name><operator pos:start="153:16" pos:end="153:16">&amp;</operator><name pos:start="153:17" pos:end="153:33">SWS_FAST_BILINEAR</name><operator pos:start="153:34" pos:end="153:34">)</operator></expr>)</condition>

<cpp:endif pos:start="155:1" pos:end="155:6">#<cpp:directive pos:start="155:2" pos:end="155:6">endif</cpp:directive></cpp:endif>

    <block pos:start="157:5" pos:end="161:5">{<block_content pos:start="159:9" pos:end="159:98">

        <function_decl pos:start="159:9" pos:end="159:98"><type pos:start="159:9" pos:end="159:14"><name pos:start="159:9" pos:end="159:14">RENAME</name></type>(<name pos:start="159:16" pos:end="159:21">hScale</name>)<parameter_list pos:start="159:23" pos:end="159:97">(<parameter pos:start="159:24" pos:end="159:26"><decl pos:start="159:24" pos:end="159:26"><type pos:start="159:24" pos:end="159:26"><name pos:start="159:24" pos:end="159:26">dst</name></type></decl></parameter>, <parameter pos:start="159:29" pos:end="159:36"><decl pos:start="159:29" pos:end="159:36"><type pos:start="159:29" pos:end="159:36"><name pos:start="159:29" pos:end="159:36">dstWidth</name></type></decl></parameter>, <parameter pos:start="159:39" pos:end="159:41"><decl pos:start="159:39" pos:end="159:41"><type pos:start="159:39" pos:end="159:41"><name pos:start="159:39" pos:end="159:41">src</name></type></decl></parameter>, <parameter pos:start="159:44" pos:end="159:47"><decl pos:start="159:44" pos:end="159:47"><type pos:start="159:44" pos:end="159:47"><name pos:start="159:44" pos:end="159:47">srcW</name></type></decl></parameter>, <parameter pos:start="159:50" pos:end="159:53"><decl pos:start="159:50" pos:end="159:53"><type pos:start="159:50" pos:end="159:53"><name pos:start="159:50" pos:end="159:53">xInc</name></type></decl></parameter>, <parameter pos:start="159:56" pos:end="159:65"><decl pos:start="159:56" pos:end="159:65"><type pos:start="159:56" pos:end="159:65"><name pos:start="159:56" pos:end="159:65">hLumFilter</name></type></decl></parameter>, <parameter pos:start="159:68" pos:end="159:80"><decl pos:start="159:68" pos:end="159:80"><type pos:start="159:68" pos:end="159:80"><name pos:start="159:68" pos:end="159:80">hLumFilterPos</name></type></decl></parameter>, <parameter pos:start="159:83" pos:end="159:96"><decl pos:start="159:83" pos:end="159:96"><type pos:start="159:83" pos:end="159:96"><name pos:start="159:83" pos:end="159:96">hLumFilterSize</name></type></decl></parameter>)</parameter_list>;</function_decl>

    </block_content>}</block></if>

    <else pos:start="163:5" pos:end="419:5">else <comment type="line" pos:start="163:10" pos:end="163:50">// fast bilinear upscale / crap downscale</comment>

    <block pos:start="165:5" pos:end="419:5">{<block_content pos:start="171:9" pos:end="418:0">

<cpp:if pos:start="167:1" pos:end="167:21">#<cpp:directive pos:start="167:2" pos:end="167:3">if</cpp:directive> <expr pos:start="167:5" pos:end="167:21"><call pos:start="167:5" pos:end="167:21"><name pos:start="167:5" pos:end="167:11">defined</name><argument_list pos:start="167:12" pos:end="167:21">(<argument pos:start="167:13" pos:end="167:20"><expr pos:start="167:13" pos:end="167:20"><name pos:start="167:13" pos:end="167:20">ARCH_X86</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:ifdef pos:start="169:1" pos:end="169:16">#<cpp:directive pos:start="169:2" pos:end="169:6">ifdef</cpp:directive> <name pos:start="169:8" pos:end="169:16">HAVE_MMX2</name></cpp:ifdef>

        <decl_stmt pos:start="171:9" pos:end="174:0"><decl pos:start="171:9" pos:end="171:13"><type pos:start="171:9" pos:end="171:11"><name pos:start="171:9" pos:end="171:11">int</name></type> <name pos:start="171:13" pos:end="171:13">i</name></decl>;</decl_stmt>

<cpp:if pos:start="173:1" pos:end="173:16">#<cpp:directive pos:start="173:2" pos:end="173:3">if</cpp:directive> <expr pos:start="173:5" pos:end="173:16"><call pos:start="173:5" pos:end="173:16"><name pos:start="173:5" pos:end="173:11">defined</name><argument_list pos:start="173:12" pos:end="173:16">(<argument pos:start="173:13" pos:end="173:15"><expr pos:start="173:13" pos:end="173:15"><name pos:start="173:13" pos:end="173:15">PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <decl_stmt pos:start="175:9" pos:end="178:0"><decl pos:start="175:9" pos:end="175:52"><type pos:start="175:9" pos:end="175:24"><name pos:start="175:9" pos:end="175:16">uint64_t</name> <name pos:start="175:18" pos:end="175:24">ebxsave</name></type> <name pos:start="175:26" pos:end="175:38">__attribute__</name><argument_list pos:start="175:39" pos:end="175:52">(<argument pos:start="175:40" pos:end="175:51"><expr pos:start="175:40" pos:end="175:51"><operator pos:start="175:40" pos:end="175:40">(</operator><call pos:start="175:41" pos:end="175:50"><name pos:start="175:41" pos:end="175:47">aligned</name><argument_list pos:start="175:48" pos:end="175:50">(<argument pos:start="175:49" pos:end="175:49"><expr pos:start="175:49" pos:end="175:49"><literal type="number" pos:start="175:49" pos:end="175:49">8</literal></expr></argument>)</argument_list></call><operator pos:start="175:51" pos:end="175:51">)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif pos:start="177:1" pos:end="177:6">#<cpp:directive pos:start="177:2" pos:end="177:6">endif</cpp:directive></cpp:endif>

        <if_stmt pos:start="179:9" pos:end="398:0"><if pos:start="179:9" pos:end="299:9">if <condition pos:start="179:12" pos:end="179:26">(<expr pos:start="179:13" pos:end="179:25"><name pos:start="179:13" pos:end="179:25">canMMX2BeUsed</name></expr>)</condition>

        <block pos:start="181:9" pos:end="299:9">{<block_content pos:start="183:13" pos:end="297:84">

            <asm pos:start="183:13" pos:end="295:14">asm <specifier pos:start="183:17" pos:end="183:24">volatile</specifier>(

<cpp:if pos:start="185:1" pos:end="185:16">#<cpp:directive pos:start="185:2" pos:end="185:3">if</cpp:directive> <expr pos:start="185:5" pos:end="185:16"><call pos:start="185:5" pos:end="185:16"><name pos:start="185:5" pos:end="185:11">defined</name><argument_list pos:start="185:12" pos:end="185:16">(<argument pos:start="185:13" pos:end="185:15"><expr pos:start="185:13" pos:end="185:15"><name pos:start="185:13" pos:end="185:15">PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

            "mov               %%"REG_b", %5        \n\t"

<cpp:endif pos:start="189:1" pos:end="189:6">#<cpp:directive pos:start="189:2" pos:end="189:6">endif</cpp:directive></cpp:endif>

            "pxor                  %%mm7, %%mm7     \n\t"

            "mov                      %0, %%"REG_c" \n\t"

            "mov                      %1, %%"REG_D" \n\t"

            "mov                      %2, %%"REG_d" \n\t"

            "mov                      %3, %%"REG_b" \n\t"

            "xor               %%"REG_a", %%"REG_a" \n\t" <comment type="line" pos:start="201:59" pos:end="201:62">// i</comment>

            PREFETCH"        (%%"REG_c")            \n\t"

            PREFETCH"      32(%%"REG_c")            \n\t"

            PREFETCH"      64(%%"REG_c")            \n\t"



<cpp:ifdef pos:start="211:1" pos:end="211:18">#<cpp:directive pos:start="211:2" pos:end="211:6">ifdef</cpp:directive> <name pos:start="211:8" pos:end="211:18">ARCH_X86_64</name></cpp:ifdef>



<cpp:define pos:start="215:1" pos:end="231:5">#<cpp:directive pos:start="215:2" pos:end="215:7">define</cpp:directive> <cpp:macro pos:start="215:9" pos:end="215:20"><name pos:start="215:9" pos:end="215:20">FUNNY_Y_CODE</name></cpp:macro> \

            <cpp:value pos:start="217:13" pos:end="231:5">"movl            (%%"REG_b"), %%esi     \n\t"\

            "call                    *%4            \n\t"\

            "movl (%%"REG_b", %%"REG_a"), %%esi     \n\t"\

            "add               %%"REG_S", %%"REG_c" \n\t"\

            "add               %%"REG_a", %%"REG_D" \n\t"\

            "xor               %%"REG_a", %%"REG_a" \n\t"\



#else</cpp:value></cpp:define>



<cpp:define pos:start="235:1" pos:end="249:6">#<cpp:directive pos:start="235:2" pos:end="235:7">define</cpp:directive> <cpp:macro pos:start="235:9" pos:end="235:20"><name pos:start="235:9" pos:end="235:20">FUNNY_Y_CODE</name></cpp:macro> \

            <cpp:value pos:start="237:13" pos:end="249:6">"movl (%%"REG_b"), %%esi        \n\t"\

            "call         *%4                       \n\t"\

            "addl (%%"REG_b", %%"REG_a"), %%"REG_c" \n\t"\

            "add               %%"REG_a", %%"REG_D" \n\t"\

            "xor               %%"REG_a", %%"REG_a" \n\t"\



#endif</cpp:value></cpp:define> <comment type="block" pos:start="249:8" pos:end="249:24">/* ARCH_X86_64 */</comment>



FUNNY_Y_CODE

FUNNY_Y_CODE

FUNNY_Y_CODE

FUNNY_Y_CODE

FUNNY_Y_CODE

FUNNY_Y_CODE

FUNNY_Y_CODE

FUNNY_Y_CODE



<cpp:if pos:start="271:1" pos:end="271:16">#<cpp:directive pos:start="271:2" pos:end="271:3">if</cpp:directive> <expr pos:start="271:5" pos:end="271:16"><call pos:start="271:5" pos:end="271:16"><name pos:start="271:5" pos:end="271:11">defined</name><argument_list pos:start="271:12" pos:end="271:16">(<argument pos:start="271:13" pos:end="271:15"><expr pos:start="271:13" pos:end="271:15"><name pos:start="271:13" pos:end="271:15">PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

            "mov                      %5, %%"REG_b" \n\t"

<cpp:endif pos:start="275:1" pos:end="275:6">#<cpp:directive pos:start="275:2" pos:end="275:6">endif</cpp:directive></cpp:endif>

            :: "m" (src), "m" (dst), "m" (mmx2Filter), "m" (mmx2FilterPos),

            "m" (funnyYCode)

<cpp:if pos:start="281:1" pos:end="281:16">#<cpp:directive pos:start="281:2" pos:end="281:3">if</cpp:directive> <expr pos:start="281:5" pos:end="281:16"><call pos:start="281:5" pos:end="281:16"><name pos:start="281:5" pos:end="281:11">defined</name><argument_list pos:start="281:12" pos:end="281:16">(<argument pos:start="281:13" pos:end="281:15"><expr pos:start="281:13" pos:end="281:15"><name pos:start="281:13" pos:end="281:15">PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

            ,"m" (ebxsave)

<cpp:endif pos:start="285:1" pos:end="285:6">#<cpp:directive pos:start="285:2" pos:end="285:6">endif</cpp:directive></cpp:endif>

            : "%"REG_a, "%"REG_c, "%"REG_d, "%"REG_S, "%"REG_D

<cpp:if pos:start="289:1" pos:end="289:17">#<cpp:directive pos:start="289:2" pos:end="289:3">if</cpp:directive> <expr pos:start="289:5" pos:end="289:17"><operator pos:start="289:5" pos:end="289:5">!</operator><call pos:start="289:6" pos:end="289:17"><name pos:start="289:6" pos:end="289:12">defined</name><argument_list pos:start="289:13" pos:end="289:17">(<argument pos:start="289:14" pos:end="289:16"><expr pos:start="289:14" pos:end="289:16"><name pos:start="289:14" pos:end="289:16">PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

            ,"%"REG_b

<cpp:endif pos:start="293:1" pos:end="293:6">#<cpp:directive pos:start="293:2" pos:end="293:6">endif</cpp:directive></cpp:endif>

            );</asm>

            <for pos:start="297:13" pos:end="297:84">for <control pos:start="297:17" pos:end="297:58">(<init pos:start="297:18" pos:end="297:30"><expr pos:start="297:18" pos:end="297:29"><name pos:start="297:18" pos:end="297:18">i</name><operator pos:start="297:19" pos:end="297:19">=</operator><name pos:start="297:20" pos:end="297:27">dstWidth</name><operator pos:start="297:28" pos:end="297:28">-</operator><literal type="number" pos:start="297:29" pos:end="297:29">1</literal></expr>;</init> <condition pos:start="297:32" pos:end="297:53"><expr pos:start="297:32" pos:end="297:52"><operator pos:start="297:32" pos:end="297:32">(</operator><name pos:start="297:33" pos:end="297:33">i</name><operator pos:start="297:34" pos:end="297:34">*</operator><name pos:start="297:35" pos:end="297:38">xInc</name><operator pos:start="297:39" pos:end="297:39">)</operator><operator pos:start="297:40" pos:end="297:41">&gt;&gt;</operator><literal type="number" pos:start="297:42" pos:end="297:43">16</literal> <operator pos:start="297:45" pos:end="297:46">&gt;=</operator><name pos:start="297:47" pos:end="297:50">srcW</name><operator pos:start="297:51" pos:end="297:51">-</operator><literal type="number" pos:start="297:52" pos:end="297:52">1</literal></expr>;</condition> <incr pos:start="297:55" pos:end="297:57"><expr pos:start="297:55" pos:end="297:57"><name pos:start="297:55" pos:end="297:55">i</name><operator pos:start="297:56" pos:end="297:57">--</operator></expr></incr>)</control><block type="pseudo" pos:start="297:60" pos:end="297:84"><block_content pos:start="297:60" pos:end="297:84"> <expr_stmt pos:start="297:60" pos:end="297:84"><expr pos:start="297:60" pos:end="297:83"><name pos:start="297:60" pos:end="297:65"><name pos:start="297:60" pos:end="297:62">dst</name><index pos:start="297:63" pos:end="297:65">[<expr pos:start="297:64" pos:end="297:64"><name pos:start="297:64" pos:end="297:64">i</name></expr>]</index></name> <operator pos:start="297:67" pos:end="297:67">=</operator> <name pos:start="297:69" pos:end="297:79"><name pos:start="297:69" pos:end="297:71">src</name><index pos:start="297:72" pos:end="297:79">[<expr pos:start="297:73" pos:end="297:78"><name pos:start="297:73" pos:end="297:76">srcW</name><operator pos:start="297:77" pos:end="297:77">-</operator><literal type="number" pos:start="297:78" pos:end="297:78">1</literal></expr>]</index></name><operator pos:start="297:80" pos:end="297:80">*</operator><literal type="number" pos:start="297:81" pos:end="297:83">128</literal></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></if>

        <else pos:start="301:9" pos:end="398:0">else

        <block pos:start="303:9" pos:end="398:0">{<block_content pos:start="307:9" pos:end="392:0">

<cpp:endif pos:start="305:1" pos:end="305:6">#<cpp:directive pos:start="305:2" pos:end="305:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="305:8" pos:end="305:22">/* HAVE_MMX2 */</comment>

        <decl_stmt pos:start="307:9" pos:end="307:37"><decl pos:start="307:9" pos:end="307:36"><type pos:start="307:9" pos:end="307:12"><name pos:start="307:9" pos:end="307:12">long</name></type> <name pos:start="307:14" pos:end="307:23">xInc_shr16</name> <init pos:start="307:25" pos:end="307:36">= <expr pos:start="307:27" pos:end="307:36"><name pos:start="307:27" pos:end="307:30">xInc</name> <operator pos:start="307:32" pos:end="307:33">&gt;&gt;</operator> <literal type="number" pos:start="307:35" pos:end="307:36">16</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="309:9" pos:end="309:43"><decl pos:start="309:9" pos:end="309:42"><type pos:start="309:9" pos:end="309:16"><name pos:start="309:9" pos:end="309:16">uint16_t</name></type> <name pos:start="309:18" pos:end="309:26">xInc_mask</name> <init pos:start="309:28" pos:end="309:42">= <expr pos:start="309:30" pos:end="309:42"><name pos:start="309:30" pos:end="309:33">xInc</name> <operator pos:start="309:35" pos:end="309:35">&amp;</operator> <literal type="number" pos:start="309:37" pos:end="309:42">0xffff</literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:start="311:9" pos:end="311:36">//NO MMX just normal asm ...</comment>

        <asm pos:start="313:9" pos:end="392:0">asm <specifier pos:start="313:13" pos:end="313:20">volatile</specifier>(

        "xor %%"REG_a", %%"REG_a"            \n\t" <comment type="line" pos:start="315:52" pos:end="315:55">// i</comment>

        "xor %%"REG_d", %%"REG_d"            \n\t" <comment type="line" pos:start="317:52" pos:end="317:56">// xx</comment>

        "xorl    %%ecx, %%ecx                \n\t" <comment type="line" pos:start="319:52" pos:end="319:62">// 2*xalpha</comment>

        ASMALIGN(4)

        "1:                                  \n\t"

        "movzbl    (%0, %%"REG_d"), %%edi    \n\t" <comment type="line" pos:start="325:52" pos:end="325:60">//src[xx]</comment>

        "movzbl   1(%0, %%"REG_d"), %%esi    \n\t" <comment type="line" pos:start="327:52" pos:end="327:62">//src[xx+1]</comment>

        "subl    %%edi, %%esi                \n\t" <comment type="line" pos:start="329:52" pos:end="329:72">//src[xx+1] - src[xx]</comment>

        "imull   %%ecx, %%esi                \n\t" <comment type="line" pos:start="331:52" pos:end="331:83">//(src[xx+1] - src[xx])*2*xalpha</comment>

        "shll      $16, %%edi                \n\t"

        "addl    %%edi, %%esi                \n\t" <comment type="line" pos:start="335:52" pos:end="335:94">//src[xx+1]*2*xalpha + src[xx]*(1-2*xalpha)</comment>

        "mov        %1, %%"REG_D"            \n\t"

        "shrl       $9, %%esi                \n\t"

        "movw     %%si, (%%"REG_D", %%"REG_a", 2)   \n\t"

        "addw       %4, %%cx                 \n\t" <comment type="line" pos:start="343:52" pos:end="343:74">//2*xalpha += xInc&amp;0xFF</comment>

        "adc        %3, %%"REG_d"            \n\t" <comment type="line" pos:start="345:52" pos:end="345:73">//xx+= xInc&gt;&gt;8 + carry</comment>



        "movzbl    (%0, %%"REG_d"), %%edi    \n\t" <comment type="line" pos:start="349:52" pos:end="349:60">//src[xx]</comment>

        "movzbl   1(%0, %%"REG_d"), %%esi    \n\t" <comment type="line" pos:start="351:52" pos:end="351:62">//src[xx+1]</comment>

        "subl    %%edi, %%esi                \n\t" <comment type="line" pos:start="353:52" pos:end="353:72">//src[xx+1] - src[xx]</comment>

        "imull   %%ecx, %%esi                \n\t" <comment type="line" pos:start="355:52" pos:end="355:83">//(src[xx+1] - src[xx])*2*xalpha</comment>

        "shll      $16, %%edi                \n\t"

        "addl    %%edi, %%esi                \n\t" <comment type="line" pos:start="359:52" pos:end="359:94">//src[xx+1]*2*xalpha + src[xx]*(1-2*xalpha)</comment>

        "mov        %1, %%"REG_D"            \n\t"

        "shrl       $9, %%esi                \n\t"

        "movw     %%si, 2(%%"REG_D", %%"REG_a", 2)  \n\t"

        "addw       %4, %%cx                 \n\t" <comment type="line" pos:start="367:52" pos:end="367:74">//2*xalpha += xInc&amp;0xFF</comment>

        "adc        %3, %%"REG_d"            \n\t" <comment type="line" pos:start="369:52" pos:end="369:73">//xx+= xInc&gt;&gt;8 + carry</comment>





        "add        $2, %%"REG_a"            \n\t"

        "cmp        %2, %%"REG_a"            \n\t"

        " jb        1b                       \n\t"





        :: "r" (src), "m" (dst), "m" (dstWidth), "m" (xInc_shr16), "m" (xInc_mask)

        : "%"REG_a, "%"REG_d, "%ecx", "%"REG_D, "%esi"

        );</asm>

<cpp:ifdef pos:start="391:1" pos:end="391:16">#<cpp:directive pos:start="391:2" pos:end="391:6">ifdef</cpp:directive> <name pos:start="391:8" pos:end="391:16">HAVE_MMX2</name></cpp:ifdef>

        </block_content>}</block></else></if_stmt> <comment type="line" pos:start="393:11" pos:end="393:33">//if MMX2 can't be used</comment>

<cpp:endif pos:start="395:1" pos:end="395:6">#<cpp:directive pos:start="395:2" pos:end="395:6">endif</cpp:directive></cpp:endif>

<cpp:else pos:start="397:1" pos:end="397:5">#<cpp:directive pos:start="397:2" pos:end="397:5">else</cpp:directive></cpp:else>

        <decl_stmt pos:start="399:9" pos:end="399:14"><decl pos:start="399:9" pos:end="399:13"><type pos:start="399:9" pos:end="399:11"><name pos:start="399:9" pos:end="399:11">int</name></type> <name pos:start="399:13" pos:end="399:13">i</name></decl>;</decl_stmt>

        <decl_stmt pos:start="401:9" pos:end="401:28"><decl pos:start="401:9" pos:end="401:27"><type pos:start="401:9" pos:end="401:20"><name pos:start="401:9" pos:end="401:16">unsigned</name> <name pos:start="401:18" pos:end="401:20">int</name></type> <name pos:start="401:22" pos:end="401:25">xpos</name><init pos:start="401:26" pos:end="401:27">=<expr pos:start="401:27" pos:end="401:27"><literal type="number" pos:start="401:27" pos:end="401:27">0</literal></expr></init></decl>;</decl_stmt>

        <for pos:start="403:9" pos:end="418:0">for <control pos:start="403:13" pos:end="403:32">(<init pos:start="403:14" pos:end="403:17"><expr pos:start="403:14" pos:end="403:16"><name pos:start="403:14" pos:end="403:14">i</name><operator pos:start="403:15" pos:end="403:15">=</operator><literal type="number" pos:start="403:16" pos:end="403:16">0</literal></expr>;</init><condition pos:start="403:18" pos:end="403:28"><expr pos:start="403:18" pos:end="403:27"><name pos:start="403:18" pos:end="403:18">i</name><operator pos:start="403:19" pos:end="403:19">&lt;</operator><name pos:start="403:20" pos:end="403:27">dstWidth</name></expr>;</condition><incr pos:start="403:29" pos:end="403:31"><expr pos:start="403:29" pos:end="403:31"><name pos:start="403:29" pos:end="403:29">i</name><operator pos:start="403:30" pos:end="403:31">++</operator></expr></incr>)</control>

        <block pos:start="405:9" pos:end="418:0">{<block_content pos:start="407:13" pos:end="413:23">

            <decl_stmt pos:start="407:13" pos:end="407:46"><decl pos:start="407:13" pos:end="407:45"><type pos:start="407:13" pos:end="407:33"><specifier pos:start="407:13" pos:end="407:20">register</specifier> <name pos:start="407:22" pos:end="407:29">unsigned</name> <name pos:start="407:31" pos:end="407:33">int</name></type> <name pos:start="407:35" pos:end="407:36">xx</name><init pos:start="407:37" pos:end="407:45">=<expr pos:start="407:38" pos:end="407:45"><name pos:start="407:38" pos:end="407:41">xpos</name><operator pos:start="407:42" pos:end="407:43">&gt;&gt;</operator><literal type="number" pos:start="407:44" pos:end="407:45">16</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="409:13" pos:end="409:58"><decl pos:start="409:13" pos:end="409:57"><type pos:start="409:13" pos:end="409:33"><specifier pos:start="409:13" pos:end="409:20">register</specifier> <name pos:start="409:22" pos:end="409:29">unsigned</name> <name pos:start="409:31" pos:end="409:33">int</name></type> <name pos:start="409:35" pos:end="409:40">xalpha</name><init pos:start="409:41" pos:end="409:57">=<expr pos:start="409:42" pos:end="409:57"><operator pos:start="409:42" pos:end="409:42">(</operator><name pos:start="409:43" pos:end="409:46">xpos</name><operator pos:start="409:47" pos:end="409:47">&amp;</operator><literal type="number" pos:start="409:48" pos:end="409:53">0xFFFF</literal><operator pos:start="409:54" pos:end="409:54">)</operator><operator pos:start="409:55" pos:end="409:56">&gt;&gt;</operator><literal type="number" pos:start="409:57" pos:end="409:57">9</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="411:13" pos:end="411:64"><expr pos:start="411:13" pos:end="411:63"><name pos:start="411:13" pos:end="411:18"><name pos:start="411:13" pos:end="411:15">dst</name><index pos:start="411:16" pos:end="411:18">[<expr pos:start="411:17" pos:end="411:17"><name pos:start="411:17" pos:end="411:17">i</name></expr>]</index></name><operator pos:start="411:19" pos:end="411:19">=</operator> <operator pos:start="411:21" pos:end="411:21">(</operator><name pos:start="411:22" pos:end="411:28"><name pos:start="411:22" pos:end="411:24">src</name><index pos:start="411:25" pos:end="411:28">[<expr pos:start="411:26" pos:end="411:27"><name pos:start="411:26" pos:end="411:27">xx</name></expr>]</index></name><operator pos:start="411:29" pos:end="411:30">&lt;&lt;</operator><literal type="number" pos:start="411:31" pos:end="411:31">7</literal><operator pos:start="411:32" pos:end="411:32">)</operator> <operator pos:start="411:34" pos:end="411:34">+</operator> <operator pos:start="411:36" pos:end="411:36">(</operator><name pos:start="411:37" pos:end="411:45"><name pos:start="411:37" pos:end="411:39">src</name><index pos:start="411:40" pos:end="411:45">[<expr pos:start="411:41" pos:end="411:44"><name pos:start="411:41" pos:end="411:42">xx</name><operator pos:start="411:43" pos:end="411:43">+</operator><literal type="number" pos:start="411:44" pos:end="411:44">1</literal></expr>]</index></name> <operator pos:start="411:47" pos:end="411:47">-</operator> <name pos:start="411:49" pos:end="411:55"><name pos:start="411:49" pos:end="411:51">src</name><index pos:start="411:52" pos:end="411:55">[<expr pos:start="411:53" pos:end="411:54"><name pos:start="411:53" pos:end="411:54">xx</name></expr>]</index></name><operator pos:start="411:56" pos:end="411:56">)</operator><operator pos:start="411:57" pos:end="411:57">*</operator><name pos:start="411:58" pos:end="411:63">xalpha</name></expr>;</expr_stmt>

            <expr_stmt pos:start="413:13" pos:end="413:23"><expr pos:start="413:13" pos:end="413:22"><name pos:start="413:13" pos:end="413:16">xpos</name><operator pos:start="413:17" pos:end="413:18">+=</operator><name pos:start="413:19" pos:end="413:22">xInc</name></expr>;</expr_stmt>

        </block_content>}</block></for>

<cpp:endif pos:start="417:1" pos:end="417:6">#<cpp:directive pos:start="417:2" pos:end="417:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="417:8" pos:end="417:30">/* defined(ARCH_X86) */</comment>

    </block_content>}</block></else></if_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="423:5" pos:end="445:5"><if pos:start="423:5" pos:end="445:5">if<condition pos:start="423:7" pos:end="423:83">(<expr pos:start="423:8" pos:end="423:82"><name pos:start="423:8" pos:end="423:18"><name pos:start="423:8" pos:end="423:8">c</name><operator pos:start="423:9" pos:end="423:10">-&gt;</operator><name pos:start="423:11" pos:end="423:18">srcRange</name></name> <operator pos:start="423:20" pos:end="423:21">!=</operator> <name pos:start="423:23" pos:end="423:33"><name pos:start="423:23" pos:end="423:23">c</name><operator pos:start="423:24" pos:end="423:25">-&gt;</operator><name pos:start="423:26" pos:end="423:33">dstRange</name></name> <operator pos:start="423:35" pos:end="423:36">&amp;&amp;</operator> <operator pos:start="423:38" pos:end="423:38">!</operator><operator pos:start="423:39" pos:end="423:39">(</operator><call pos:start="423:40" pos:end="423:58"><name pos:start="423:40" pos:end="423:44">isRGB</name><argument_list pos:start="423:45" pos:end="423:58">(<argument pos:start="423:46" pos:end="423:57"><expr pos:start="423:46" pos:end="423:57"><name pos:start="423:46" pos:end="423:57"><name pos:start="423:46" pos:end="423:46">c</name><operator pos:start="423:47" pos:end="423:48">-&gt;</operator><name pos:start="423:49" pos:end="423:57">dstFormat</name></name></expr></argument>)</argument_list></call> <operator pos:start="423:60" pos:end="423:61">||</operator> <call pos:start="423:63" pos:end="423:81"><name pos:start="423:63" pos:end="423:67">isBGR</name><argument_list pos:start="423:68" pos:end="423:81">(<argument pos:start="423:69" pos:end="423:80"><expr pos:start="423:69" pos:end="423:80"><name pos:start="423:69" pos:end="423:80"><name pos:start="423:69" pos:end="423:69">c</name><operator pos:start="423:70" pos:end="423:71">-&gt;</operator><name pos:start="423:72" pos:end="423:80">dstFormat</name></name></expr></argument>)</argument_list></call><operator pos:start="423:82" pos:end="423:82">)</operator></expr>)</condition><block pos:start="423:84" pos:end="445:5">{<block_content pos:start="425:9" pos:end="443:9">

        <decl_stmt pos:start="425:9" pos:end="425:14"><decl pos:start="425:9" pos:end="425:13"><type pos:start="425:9" pos:end="425:11"><name pos:start="425:9" pos:end="425:11">int</name></type> <name pos:start="425:13" pos:end="425:13">i</name></decl>;</decl_stmt>

        <comment type="line" pos:start="427:9" pos:end="427:75">//FIXME all pal and rgb srcFormats could do this convertion as well</comment>

        <comment type="line" pos:start="429:9" pos:end="429:86">//FIXME all scalers more complex than bilinear could do half of this transform</comment>

        <if_stmt pos:start="431:9" pos:end="443:9"><if pos:start="431:9" pos:end="437:9">if<condition pos:start="431:11" pos:end="431:23">(<expr pos:start="431:12" pos:end="431:22"><name pos:start="431:12" pos:end="431:22"><name pos:start="431:12" pos:end="431:12">c</name><operator pos:start="431:13" pos:end="431:14">-&gt;</operator><name pos:start="431:15" pos:end="431:22">srcRange</name></name></expr>)</condition><block pos:start="431:24" pos:end="437:9">{<block_content pos:start="433:13" pos:end="435:54">

            <for pos:start="433:13" pos:end="435:54">for <control pos:start="433:17" pos:end="433:38">(<init pos:start="433:18" pos:end="433:21"><expr pos:start="433:18" pos:end="433:20"><name pos:start="433:18" pos:end="433:18">i</name><operator pos:start="433:19" pos:end="433:19">=</operator><literal type="number" pos:start="433:20" pos:end="433:20">0</literal></expr>;</init> <condition pos:start="433:23" pos:end="433:33"><expr pos:start="433:23" pos:end="433:32"><name pos:start="433:23" pos:end="433:23">i</name><operator pos:start="433:24" pos:end="433:24">&lt;</operator><name pos:start="433:25" pos:end="433:32">dstWidth</name></expr>;</condition> <incr pos:start="433:35" pos:end="433:37"><expr pos:start="433:35" pos:end="433:37"><name pos:start="433:35" pos:end="433:35">i</name><operator pos:start="433:36" pos:end="433:37">++</operator></expr></incr>)</control><block type="pseudo" pos:start="435:17" pos:end="435:54"><block_content pos:start="435:17" pos:end="435:54">

                <expr_stmt pos:start="435:17" pos:end="435:54"><expr pos:start="435:17" pos:end="435:53"><name pos:start="435:17" pos:end="435:22"><name pos:start="435:17" pos:end="435:19">dst</name><index pos:start="435:20" pos:end="435:22">[<expr pos:start="435:21" pos:end="435:21"><name pos:start="435:21" pos:end="435:21">i</name></expr>]</index></name><operator pos:start="435:23" pos:end="435:23">=</operator> <operator pos:start="435:25" pos:end="435:25">(</operator><name pos:start="435:26" pos:end="435:31"><name pos:start="435:26" pos:end="435:28">dst</name><index pos:start="435:29" pos:end="435:31">[<expr pos:start="435:30" pos:end="435:30"><name pos:start="435:30" pos:end="435:30">i</name></expr>]</index></name><operator pos:start="435:32" pos:end="435:32">*</operator><literal type="number" pos:start="435:33" pos:end="435:39">14071</literal> <operator pos:start="435:39" pos:end="435:39">+</operator> <literal type="number" pos:start="435:41" pos:end="435:48">33561947</literal><operator pos:start="435:49" pos:end="435:49">)</operator><operator pos:start="435:50" pos:end="435:51">&gt;&gt;</operator><literal type="number" pos:start="435:52" pos:end="435:53">14</literal></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></if><else pos:start="437:10" pos:end="443:9">else<block pos:start="437:14" pos:end="443:9">{<block_content pos:start="439:13" pos:end="441:54">

            <for pos:start="439:13" pos:end="441:54">for <control pos:start="439:17" pos:end="439:38">(<init pos:start="439:18" pos:end="439:21"><expr pos:start="439:18" pos:end="439:20"><name pos:start="439:18" pos:end="439:18">i</name><operator pos:start="439:19" pos:end="439:19">=</operator><literal type="number" pos:start="439:20" pos:end="439:20">0</literal></expr>;</init> <condition pos:start="439:23" pos:end="439:33"><expr pos:start="439:23" pos:end="439:32"><name pos:start="439:23" pos:end="439:23">i</name><operator pos:start="439:24" pos:end="439:24">&lt;</operator><name pos:start="439:25" pos:end="439:32">dstWidth</name></expr>;</condition> <incr pos:start="439:35" pos:end="439:37"><expr pos:start="439:35" pos:end="439:37"><name pos:start="439:35" pos:end="439:35">i</name><operator pos:start="439:36" pos:end="439:37">++</operator></expr></incr>)</control><block type="pseudo" pos:start="441:17" pos:end="441:54"><block_content pos:start="441:17" pos:end="441:54">

                <expr_stmt pos:start="441:17" pos:end="441:54"><expr pos:start="441:17" pos:end="441:53"><name pos:start="441:17" pos:end="441:22"><name pos:start="441:17" pos:end="441:19">dst</name><index pos:start="441:20" pos:end="441:22">[<expr pos:start="441:21" pos:end="441:21"><name pos:start="441:21" pos:end="441:21">i</name></expr>]</index></name><operator pos:start="441:23" pos:end="441:23">=</operator> <operator pos:start="441:25" pos:end="441:25">(</operator><name pos:start="441:26" pos:end="441:31"><name pos:start="441:26" pos:end="441:28">dst</name><index pos:start="441:29" pos:end="441:31">[<expr pos:start="441:30" pos:end="441:30"><name pos:start="441:30" pos:end="441:30">i</name></expr>]</index></name><operator pos:start="441:32" pos:end="441:32">*</operator><literal type="number" pos:start="441:33" pos:end="441:39">19077</literal> <operator pos:start="441:39" pos:end="441:39">-</operator> <literal type="number" pos:start="441:41" pos:end="441:48">39057361</literal><operator pos:start="441:49" pos:end="441:49">)</operator><operator pos:start="441:50" pos:end="441:51">&gt;&gt;</operator><literal type="number" pos:start="441:52" pos:end="441:53">14</literal></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
