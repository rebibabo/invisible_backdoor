<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/1330.c" pos:tabs="8"><function pos:start="1:1" pos:end="433:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">pcm_decode_frame</name><parameter_list pos:start="1:28" pos:end="5:44">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:38"><decl pos:start="3:29" pos:end="3:38"><type pos:start="3:29" pos:end="3:38"><name pos:start="3:29" pos:end="3:32">void</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:38">data</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:54"><decl pos:start="3:41" pos:end="3:54"><type pos:start="3:41" pos:end="3:54"><name pos:start="3:41" pos:end="3:43">int</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier></type><name pos:start="3:46" pos:end="3:54">data_size</name></decl></parameter>,

                            <parameter pos:start="5:29" pos:end="5:43"><decl pos:start="5:29" pos:end="5:43"><type pos:start="5:29" pos:end="5:43"><name pos:start="5:29" pos:end="5:36">AVPacket</name> <modifier pos:start="5:38" pos:end="5:38">*</modifier></type><name pos:start="5:39" pos:end="5:43">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="433:1">{<block_content pos:start="9:5" pos:end="431:21">

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">buf</name> <init pos:start="9:24" pos:end="9:36">= <expr pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:30">avpkt</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">buf_size</name> <init pos:start="11:18" pos:end="11:30">= <expr pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:24">avpkt</name><operator pos:start="11:25" pos:end="11:26">-&gt;</operator><name pos:start="11:27" pos:end="11:30">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:36"><decl pos:start="13:5" pos:end="13:35"><type pos:start="13:5" pos:end="13:15"><name pos:start="13:5" pos:end="13:13">PCMDecode</name> <modifier pos:start="13:15" pos:end="13:15">*</modifier></type><name pos:start="13:16" pos:end="13:16">s</name> <init pos:start="13:18" pos:end="13:35">= <expr pos:start="13:20" pos:end="13:35"><name pos:start="13:20" pos:end="13:35"><name pos:start="13:20" pos:end="13:24">avctx</name><operator pos:start="13:25" pos:end="13:26">-&gt;</operator><name pos:start="13:27" pos:end="13:35">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:29"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:19">sample_size</name></decl>, <decl pos:start="15:22" pos:end="15:22"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:22" pos:end="15:22">c</name></decl>, <decl pos:start="15:25" pos:end="15:25"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:25" pos:end="15:25">n</name></decl>, <decl pos:start="15:28" pos:end="15:28"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:28" pos:end="15:28">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:9">short</name> <modifier pos:start="17:11" pos:end="17:11">*</modifier></type><name pos:start="17:12" pos:end="17:18">samples</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:51"><decl pos:start="19:5" pos:end="19:22"><type pos:start="19:5" pos:end="19:19"><specifier pos:start="19:5" pos:end="19:9">const</specifier> <name pos:start="19:11" pos:end="19:17">uint8_t</name> <modifier pos:start="19:19" pos:end="19:19">*</modifier></type><name pos:start="19:20" pos:end="19:22">src</name></decl>, <decl pos:start="19:25" pos:end="19:29"><type ref="prev" pos:start="19:5" pos:end="19:19"><modifier pos:start="19:25" pos:end="19:25">*</modifier></type><name pos:start="19:26" pos:end="19:29">src8</name></decl>, <decl pos:start="19:32" pos:end="19:50"><type ref="prev" pos:start="19:5" pos:end="19:19"><modifier pos:start="19:32" pos:end="19:32">*</modifier></type><name pos:start="19:33" pos:end="19:50"><name pos:start="19:33" pos:end="19:36">src2</name><index pos:start="19:37" pos:end="19:50">[<expr pos:start="19:38" pos:end="19:49"><name pos:start="19:38" pos:end="19:49">MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:19"><decl pos:start="21:5" pos:end="21:18"><type pos:start="21:5" pos:end="21:13"><name pos:start="21:5" pos:end="21:11">uint8_t</name> <modifier pos:start="21:13" pos:end="21:13">*</modifier></type><name pos:start="21:14" pos:end="21:18">dstu8</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:25"><decl pos:start="23:5" pos:end="23:24"><type pos:start="23:5" pos:end="23:13"><name pos:start="23:5" pos:end="23:11">int16_t</name> <modifier pos:start="23:13" pos:end="23:13">*</modifier></type><name pos:start="23:14" pos:end="23:24">dst_int16_t</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:25"><decl pos:start="25:5" pos:end="25:24"><type pos:start="25:5" pos:end="25:13"><name pos:start="25:5" pos:end="25:11">int32_t</name> <modifier pos:start="25:13" pos:end="25:13">*</modifier></type><name pos:start="25:14" pos:end="25:24">dst_int32_t</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:25"><decl pos:start="27:5" pos:end="27:24"><type pos:start="27:5" pos:end="27:13"><name pos:start="27:5" pos:end="27:11">int64_t</name> <modifier pos:start="27:13" pos:end="27:13">*</modifier></type><name pos:start="27:14" pos:end="27:24">dst_int64_t</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:27"><decl pos:start="29:5" pos:end="29:26"><type pos:start="29:5" pos:end="29:14"><name pos:start="29:5" pos:end="29:12">uint16_t</name> <modifier pos:start="29:14" pos:end="29:14">*</modifier></type><name pos:start="29:15" pos:end="29:26">dst_uint16_t</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:27"><decl pos:start="31:5" pos:end="31:26"><type pos:start="31:5" pos:end="31:14"><name pos:start="31:5" pos:end="31:12">uint32_t</name> <modifier pos:start="31:14" pos:end="31:14">*</modifier></type><name pos:start="31:15" pos:end="31:26">dst_uint32_t</name></decl>;</decl_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:19"><expr pos:start="35:5" pos:end="35:18"><name pos:start="35:5" pos:end="35:11">samples</name> <operator pos:start="35:13" pos:end="35:13">=</operator> <name pos:start="35:15" pos:end="35:18">data</name></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:14"><expr pos:start="37:5" pos:end="37:13"><name pos:start="37:5" pos:end="37:7">src</name> <operator pos:start="37:9" pos:end="37:9">=</operator> <name pos:start="37:11" pos:end="37:13">buf</name></expr>;</expr_stmt>



    <if_stmt pos:start="41:5" pos:end="47:5"><if pos:start="41:5" pos:end="47:5">if <condition pos:start="41:8" pos:end="41:56">(<expr pos:start="41:9" pos:end="41:55"><name pos:start="41:9" pos:end="41:25"><name pos:start="41:9" pos:end="41:13">avctx</name><operator pos:start="41:14" pos:end="41:15">-&gt;</operator><name pos:start="41:16" pos:end="41:25">sample_fmt</name></name><operator pos:start="41:26" pos:end="41:27">!=</operator><name pos:start="41:28" pos:end="41:55"><name pos:start="41:28" pos:end="41:32">avctx</name><operator pos:start="41:33" pos:end="41:34">-&gt;</operator><name pos:start="41:35" pos:end="41:39">codec</name><operator pos:start="41:40" pos:end="41:41">-&gt;</operator><name pos:start="41:42" pos:end="41:52">sample_fmts</name><index pos:start="41:53" pos:end="41:55">[<expr pos:start="41:54" pos:end="41:54"><literal type="number" pos:start="41:54" pos:end="41:54">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="41:58" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:18">

        <expr_stmt pos:start="43:9" pos:end="43:60"><expr pos:start="43:9" pos:end="43:59"><call pos:start="43:9" pos:end="43:59"><name pos:start="43:9" pos:end="43:14">av_log</name><argument_list pos:start="43:15" pos:end="43:59">(<argument pos:start="43:16" pos:end="43:20"><expr pos:start="43:16" pos:end="43:20"><name pos:start="43:16" pos:end="43:20">avctx</name></expr></argument>, <argument pos:start="43:23" pos:end="43:34"><expr pos:start="43:23" pos:end="43:34"><name pos:start="43:23" pos:end="43:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="43:37" pos:end="43:58"><expr pos:start="43:37" pos:end="43:58"><literal type="string" pos:start="43:37" pos:end="43:58">"invalid sample_fmt\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="45:9" pos:end="45:18">return <expr pos:start="45:16" pos:end="45:17"><operator pos:start="45:16" pos:end="45:16">-</operator><literal type="number" pos:start="45:17" pos:end="45:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="51:5" pos:end="57:5"><if pos:start="51:5" pos:end="57:5">if<condition pos:start="51:7" pos:end="51:62">(<expr pos:start="51:8" pos:end="51:61"><name pos:start="51:8" pos:end="51:22"><name pos:start="51:8" pos:end="51:12">avctx</name><operator pos:start="51:13" pos:end="51:14">-&gt;</operator><name pos:start="51:15" pos:end="51:22">channels</name></name> <operator pos:start="51:24" pos:end="51:25">&lt;=</operator> <literal type="number" pos:start="51:27" pos:end="51:27">0</literal> <operator pos:start="51:29" pos:end="51:30">||</operator> <name pos:start="51:32" pos:end="51:46"><name pos:start="51:32" pos:end="51:36">avctx</name><operator pos:start="51:37" pos:end="51:38">-&gt;</operator><name pos:start="51:39" pos:end="51:46">channels</name></name> <operator pos:start="51:48" pos:end="51:48">&gt;</operator> <name pos:start="51:50" pos:end="51:61">MAX_CHANNELS</name></expr>)</condition><block pos:start="51:63" pos:end="57:5">{<block_content pos:start="53:9" pos:end="55:18">

        <expr_stmt pos:start="53:9" pos:end="53:68"><expr pos:start="53:9" pos:end="53:67"><call pos:start="53:9" pos:end="53:67"><name pos:start="53:9" pos:end="53:14">av_log</name><argument_list pos:start="53:15" pos:end="53:67">(<argument pos:start="53:16" pos:end="53:20"><expr pos:start="53:16" pos:end="53:20"><name pos:start="53:16" pos:end="53:20">avctx</name></expr></argument>, <argument pos:start="53:23" pos:end="53:34"><expr pos:start="53:23" pos:end="53:34"><name pos:start="53:23" pos:end="53:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="53:37" pos:end="53:66"><expr pos:start="53:37" pos:end="53:66"><literal type="string" pos:start="53:37" pos:end="53:66">"PCM channels out of bounds\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="55:9" pos:end="55:18">return <expr pos:start="55:16" pos:end="55:17"><operator pos:start="55:16" pos:end="55:16">-</operator><literal type="number" pos:start="55:17" pos:end="55:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:60"><expr pos:start="61:5" pos:end="61:59"><name pos:start="61:5" pos:end="61:15">sample_size</name> <operator pos:start="61:17" pos:end="61:17">=</operator> <call pos:start="61:19" pos:end="61:57"><name pos:start="61:19" pos:end="61:40">av_get_bits_per_sample</name><argument_list pos:start="61:41" pos:end="61:57">(<argument pos:start="61:42" pos:end="61:56"><expr pos:start="61:42" pos:end="61:56"><name pos:start="61:42" pos:end="61:56"><name pos:start="61:42" pos:end="61:46">avctx</name><operator pos:start="61:47" pos:end="61:48">-&gt;</operator><name pos:start="61:49" pos:end="61:56">codec_id</name></name></expr></argument>)</argument_list></call><operator pos:start="61:58" pos:end="61:58">/</operator><literal type="number" pos:start="61:59" pos:end="61:59">8</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="65:5" pos:end="65:63">/* av_get_bits_per_sample returns 0 for CODEC_ID_PCM_DVD */</comment>

    <if_stmt pos:start="67:5" pos:end="77:24"><if pos:start="67:5" pos:end="71:59">if <condition pos:start="67:8" pos:end="67:44">(<expr pos:start="67:9" pos:end="67:43"><name pos:start="67:9" pos:end="67:24">CODEC_ID_PCM_DVD</name> <operator pos:start="67:26" pos:end="67:27">==</operator> <name pos:start="67:29" pos:end="67:43"><name pos:start="67:29" pos:end="67:33">avctx</name><operator pos:start="67:34" pos:end="67:35">-&gt;</operator><name pos:start="67:36" pos:end="67:43">codec_id</name></name></expr>)</condition><block type="pseudo" pos:start="71:9" pos:end="71:59"><block_content pos:start="71:9" pos:end="71:59">

        <comment type="block" pos:start="69:9" pos:end="69:60">/* 2 samples are interleaved per block in PCM_DVD */</comment>

        <expr_stmt pos:start="71:9" pos:end="71:59"><expr pos:start="71:9" pos:end="71:58"><name pos:start="71:9" pos:end="71:19">sample_size</name> <operator pos:start="71:21" pos:end="71:21">=</operator> <name pos:start="71:23" pos:end="71:50"><name pos:start="71:23" pos:end="71:27">avctx</name><operator pos:start="71:28" pos:end="71:29">-&gt;</operator><name pos:start="71:30" pos:end="71:50">bits_per_coded_sample</name></name> <operator pos:start="71:52" pos:end="71:52">*</operator> <literal type="number" pos:start="71:54" pos:end="71:54">2</literal> <operator pos:start="71:56" pos:end="71:56">/</operator> <literal type="number" pos:start="71:58" pos:end="71:58">8</literal></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="73:5" pos:end="77:24">else if <condition pos:start="73:13" pos:end="73:49">(<expr pos:start="73:14" pos:end="73:48"><name pos:start="73:14" pos:end="73:28"><name pos:start="73:14" pos:end="73:18">avctx</name><operator pos:start="73:19" pos:end="73:20">-&gt;</operator><name pos:start="73:21" pos:end="73:28">codec_id</name></name> <operator pos:start="73:30" pos:end="73:31">==</operator> <name pos:start="73:33" pos:end="73:48">CODEC_ID_PCM_LXF</name></expr>)</condition><block type="pseudo" pos:start="77:9" pos:end="77:24"><block_content pos:start="77:9" pos:end="77:24">

        <comment type="block" pos:start="75:9" pos:end="75:58">/* we process 40-bit blocks per channel for LXF */</comment>

        <expr_stmt pos:start="77:9" pos:end="77:24"><expr pos:start="77:9" pos:end="77:23"><name pos:start="77:9" pos:end="77:19">sample_size</name> <operator pos:start="77:21" pos:end="77:21">=</operator> <literal type="number" pos:start="77:23" pos:end="77:23">5</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="81:5" pos:end="87:5"><if pos:start="81:5" pos:end="87:5">if <condition pos:start="81:8" pos:end="81:25">(<expr pos:start="81:9" pos:end="81:24"><name pos:start="81:9" pos:end="81:19">sample_size</name> <operator pos:start="81:21" pos:end="81:22">==</operator> <literal type="number" pos:start="81:24" pos:end="81:24">0</literal></expr>)</condition> <block pos:start="81:27" pos:end="87:5">{<block_content pos:start="83:9" pos:end="85:31">

        <expr_stmt pos:start="83:9" pos:end="83:61"><expr pos:start="83:9" pos:end="83:60"><call pos:start="83:9" pos:end="83:60"><name pos:start="83:9" pos:end="83:14">av_log</name><argument_list pos:start="83:15" pos:end="83:60">(<argument pos:start="83:16" pos:end="83:20"><expr pos:start="83:16" pos:end="83:20"><name pos:start="83:16" pos:end="83:20">avctx</name></expr></argument>, <argument pos:start="83:23" pos:end="83:34"><expr pos:start="83:23" pos:end="83:34"><name pos:start="83:23" pos:end="83:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="83:37" pos:end="83:59"><expr pos:start="83:37" pos:end="83:59"><literal type="string" pos:start="83:37" pos:end="83:59">"Invalid sample_size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="85:9" pos:end="85:31">return <expr pos:start="85:16" pos:end="85:30"><call pos:start="85:16" pos:end="85:30"><name pos:start="85:16" pos:end="85:22">AVERROR</name><argument_list pos:start="85:23" pos:end="85:30">(<argument pos:start="85:24" pos:end="85:29"><expr pos:start="85:24" pos:end="85:29"><name pos:start="85:24" pos:end="85:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="91:5" pos:end="91:38"><expr pos:start="91:5" pos:end="91:37"><name pos:start="91:5" pos:end="91:5">n</name> <operator pos:start="91:7" pos:end="91:7">=</operator> <name pos:start="91:9" pos:end="91:23"><name pos:start="91:9" pos:end="91:13">avctx</name><operator pos:start="91:14" pos:end="91:15">-&gt;</operator><name pos:start="91:16" pos:end="91:23">channels</name></name> <operator pos:start="91:25" pos:end="91:25">*</operator> <name pos:start="91:27" pos:end="91:37">sample_size</name></expr>;</expr_stmt>



    <if_stmt pos:start="95:5" pos:end="107:5"><if pos:start="95:5" pos:end="107:5">if<condition pos:start="95:7" pos:end="95:25">(<expr pos:start="95:8" pos:end="95:24"><name pos:start="95:8" pos:end="95:8">n</name> <operator pos:start="95:10" pos:end="95:11">&amp;&amp;</operator> <name pos:start="95:13" pos:end="95:20">buf_size</name> <operator pos:start="95:22" pos:end="95:22">%</operator> <name pos:start="95:24" pos:end="95:24">n</name></expr>)</condition><block pos:start="95:26" pos:end="107:5">{<block_content pos:start="97:9" pos:end="105:37">

        <if_stmt pos:start="97:9" pos:end="105:37"><if pos:start="97:9" pos:end="103:9">if <condition pos:start="97:12" pos:end="97:25">(<expr pos:start="97:13" pos:end="97:24"><name pos:start="97:13" pos:end="97:20">buf_size</name> <operator pos:start="97:22" pos:end="97:22">&lt;</operator> <name pos:start="97:24" pos:end="97:24">n</name></expr>)</condition> <block pos:start="97:27" pos:end="103:9">{<block_content pos:start="99:13" pos:end="101:22">

            <expr_stmt pos:start="99:13" pos:end="99:64"><expr pos:start="99:13" pos:end="99:63"><call pos:start="99:13" pos:end="99:63"><name pos:start="99:13" pos:end="99:18">av_log</name><argument_list pos:start="99:19" pos:end="99:63">(<argument pos:start="99:20" pos:end="99:24"><expr pos:start="99:20" pos:end="99:24"><name pos:start="99:20" pos:end="99:24">avctx</name></expr></argument>, <argument pos:start="99:27" pos:end="99:38"><expr pos:start="99:27" pos:end="99:38"><name pos:start="99:27" pos:end="99:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="99:41" pos:end="99:62"><expr pos:start="99:41" pos:end="99:62"><literal type="string" pos:start="99:41" pos:end="99:62">"invalid PCM packet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="101:13" pos:end="101:22">return <expr pos:start="101:20" pos:end="101:21"><operator pos:start="101:20" pos:end="101:20">-</operator><literal type="number" pos:start="101:21" pos:end="101:21">1</literal></expr>;</return>

        </block_content>}</block></if><else pos:start="103:10" pos:end="105:37">else<block type="pseudo" pos:start="105:13" pos:end="105:37"><block_content pos:start="105:13" pos:end="105:37">

            <expr_stmt pos:start="105:13" pos:end="105:37"><expr pos:start="105:13" pos:end="105:36"><name pos:start="105:13" pos:end="105:20">buf_size</name> <operator pos:start="105:22" pos:end="105:23">-=</operator> <name pos:start="105:25" pos:end="105:32">buf_size</name> <operator pos:start="105:34" pos:end="105:34">%</operator> <name pos:start="105:36" pos:end="105:36">n</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="111:5" pos:end="111:44"><expr pos:start="111:5" pos:end="111:43"><name pos:start="111:5" pos:end="111:12">buf_size</name><operator pos:start="111:13" pos:end="111:13">=</operator> <call pos:start="111:15" pos:end="111:43"><name pos:start="111:15" pos:end="111:19">FFMIN</name><argument_list pos:start="111:20" pos:end="111:43">(<argument pos:start="111:21" pos:end="111:28"><expr pos:start="111:21" pos:end="111:28"><name pos:start="111:21" pos:end="111:28">buf_size</name></expr></argument>, <argument pos:start="111:31" pos:end="111:42"><expr pos:start="111:31" pos:end="111:42"><operator pos:start="111:31" pos:end="111:31">*</operator><name pos:start="111:32" pos:end="111:40">data_size</name><operator pos:start="111:41" pos:end="111:41">/</operator><literal type="number" pos:start="111:42" pos:end="111:42">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:17"><expr pos:start="113:5" pos:end="113:16"><operator pos:start="113:5" pos:end="113:5">*</operator><name pos:start="113:6" pos:end="113:14">data_size</name><operator pos:start="113:15" pos:end="113:15">=</operator><literal type="number" pos:start="113:16" pos:end="113:16">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="117:5" pos:end="117:29"><expr pos:start="117:5" pos:end="117:28"><name pos:start="117:5" pos:end="117:5">n</name> <operator pos:start="117:7" pos:end="117:7">=</operator> <name pos:start="117:9" pos:end="117:16">buf_size</name><operator pos:start="117:17" pos:end="117:17">/</operator><name pos:start="117:18" pos:end="117:28">sample_size</name></expr>;</expr_stmt>



    <switch pos:start="121:5" pos:end="427:5">switch<condition pos:start="121:11" pos:end="121:28">(<expr pos:start="121:12" pos:end="121:27"><name pos:start="121:12" pos:end="121:27"><name pos:start="121:12" pos:end="121:16">avctx</name><operator pos:start="121:17" pos:end="121:18">-&gt;</operator><name pos:start="121:19" pos:end="121:23">codec</name><operator pos:start="121:24" pos:end="121:25">-&gt;</operator><name pos:start="121:26" pos:end="121:27">id</name></name></expr>)</condition> <block pos:start="121:30" pos:end="427:5">{<block_content pos:start="123:5" pos:end="425:18">

    <case pos:start="123:5" pos:end="123:28">case <expr pos:start="123:10" pos:end="123:27"><name pos:start="123:10" pos:end="123:27">CODEC_ID_PCM_U32LE</name></expr>:</case>

        <macro pos:start="125:9" pos:end="125:62"><name pos:start="125:9" pos:end="125:14">DECODE</name><argument_list pos:start="125:15" pos:end="125:62">(<argument pos:start="125:16" pos:end="125:23">uint32_t</argument>, <argument pos:start="125:26" pos:end="125:29">le32</argument>, <argument pos:start="125:32" pos:end="125:34">src</argument>, <argument pos:start="125:37" pos:end="125:43">samples</argument>, <argument pos:start="125:46" pos:end="125:46">n</argument>, <argument pos:start="125:49" pos:end="125:49"><literal type="number" pos:start="125:49" pos:end="125:49">0</literal></argument>, <argument pos:start="125:52" pos:end="125:61"><literal type="number" pos:start="125:52" pos:end="125:61">0x80000000</literal></argument>)</argument_list></macro>

        <break pos:start="127:9" pos:end="127:14">break;</break>

    <case pos:start="129:5" pos:end="129:28">case <expr pos:start="129:10" pos:end="129:27"><name pos:start="129:10" pos:end="129:27">CODEC_ID_PCM_U32BE</name></expr>:</case>

        <macro pos:start="131:9" pos:end="131:62"><name pos:start="131:9" pos:end="131:14">DECODE</name><argument_list pos:start="131:15" pos:end="131:62">(<argument pos:start="131:16" pos:end="131:23">uint32_t</argument>, <argument pos:start="131:26" pos:end="131:29">be32</argument>, <argument pos:start="131:32" pos:end="131:34">src</argument>, <argument pos:start="131:37" pos:end="131:43">samples</argument>, <argument pos:start="131:46" pos:end="131:46">n</argument>, <argument pos:start="131:49" pos:end="131:49"><literal type="number" pos:start="131:49" pos:end="131:49">0</literal></argument>, <argument pos:start="131:52" pos:end="131:61"><literal type="number" pos:start="131:52" pos:end="131:61">0x80000000</literal></argument>)</argument_list></macro>

        <break pos:start="133:9" pos:end="133:14">break;</break>

    <case pos:start="135:5" pos:end="135:28">case <expr pos:start="135:10" pos:end="135:27"><name pos:start="135:10" pos:end="135:27">CODEC_ID_PCM_S24LE</name></expr>:</case>

        <macro pos:start="137:9" pos:end="137:52"><name pos:start="137:9" pos:end="137:14">DECODE</name><argument_list pos:start="137:15" pos:end="137:52">(<argument pos:start="137:16" pos:end="137:22">int32_t</argument>, <argument pos:start="137:25" pos:end="137:28">le24</argument>, <argument pos:start="137:31" pos:end="137:33">src</argument>, <argument pos:start="137:36" pos:end="137:42">samples</argument>, <argument pos:start="137:45" pos:end="137:45">n</argument>, <argument pos:start="137:48" pos:end="137:48"><literal type="number" pos:start="137:48" pos:end="137:48">8</literal></argument>, <argument pos:start="137:51" pos:end="137:51"><literal type="number" pos:start="137:51" pos:end="137:51">0</literal></argument>)</argument_list></macro>

        <break pos:start="139:9" pos:end="139:14">break;</break>

    <case pos:start="141:5" pos:end="141:28">case <expr pos:start="141:10" pos:end="141:27"><name pos:start="141:10" pos:end="141:27">CODEC_ID_PCM_S24BE</name></expr>:</case>

        <macro pos:start="143:9" pos:end="143:52"><name pos:start="143:9" pos:end="143:14">DECODE</name><argument_list pos:start="143:15" pos:end="143:52">(<argument pos:start="143:16" pos:end="143:22">int32_t</argument>, <argument pos:start="143:25" pos:end="143:28">be24</argument>, <argument pos:start="143:31" pos:end="143:33">src</argument>, <argument pos:start="143:36" pos:end="143:42">samples</argument>, <argument pos:start="143:45" pos:end="143:45">n</argument>, <argument pos:start="143:48" pos:end="143:48"><literal type="number" pos:start="143:48" pos:end="143:48">8</literal></argument>, <argument pos:start="143:51" pos:end="143:51"><literal type="number" pos:start="143:51" pos:end="143:51">0</literal></argument>)</argument_list></macro>

        <break pos:start="145:9" pos:end="145:14">break;</break>

    <case pos:start="147:5" pos:end="147:28">case <expr pos:start="147:10" pos:end="147:27"><name pos:start="147:10" pos:end="147:27">CODEC_ID_PCM_U24LE</name></expr>:</case>

        <macro pos:start="149:9" pos:end="149:60"><name pos:start="149:9" pos:end="149:14">DECODE</name><argument_list pos:start="149:15" pos:end="149:60">(<argument pos:start="149:16" pos:end="149:23">uint32_t</argument>, <argument pos:start="149:26" pos:end="149:29">le24</argument>, <argument pos:start="149:32" pos:end="149:34">src</argument>, <argument pos:start="149:37" pos:end="149:43">samples</argument>, <argument pos:start="149:46" pos:end="149:46">n</argument>, <argument pos:start="149:49" pos:end="149:49"><literal type="number" pos:start="149:49" pos:end="149:49">8</literal></argument>, <argument pos:start="149:52" pos:end="149:59"><literal type="number" pos:start="149:52" pos:end="149:59">0x800000</literal></argument>)</argument_list></macro>

        <break pos:start="151:9" pos:end="151:14">break;</break>

    <case pos:start="153:5" pos:end="153:28">case <expr pos:start="153:10" pos:end="153:27"><name pos:start="153:10" pos:end="153:27">CODEC_ID_PCM_U24BE</name></expr>:</case>

        <macro pos:start="155:9" pos:end="155:60"><name pos:start="155:9" pos:end="155:14">DECODE</name><argument_list pos:start="155:15" pos:end="155:60">(<argument pos:start="155:16" pos:end="155:23">uint32_t</argument>, <argument pos:start="155:26" pos:end="155:29">be24</argument>, <argument pos:start="155:32" pos:end="155:34">src</argument>, <argument pos:start="155:37" pos:end="155:43">samples</argument>, <argument pos:start="155:46" pos:end="155:46">n</argument>, <argument pos:start="155:49" pos:end="155:49"><literal type="number" pos:start="155:49" pos:end="155:49">8</literal></argument>, <argument pos:start="155:52" pos:end="155:59"><literal type="number" pos:start="155:52" pos:end="155:59">0x800000</literal></argument>)</argument_list></macro>

        <break pos:start="157:9" pos:end="157:14">break;</break>

    <case pos:start="159:5" pos:end="159:30">case <expr pos:start="159:10" pos:end="159:29"><name pos:start="159:10" pos:end="159:29">CODEC_ID_PCM_S24DAUD</name></expr>:</case>

        <for pos:start="161:9" pos:end="171:9">for<control pos:start="161:12" pos:end="161:21">(<init pos:start="161:13" pos:end="161:13">;</init><condition pos:start="161:14" pos:end="161:17"><expr pos:start="161:14" pos:end="161:16"><name pos:start="161:14" pos:end="161:14">n</name><operator pos:start="161:15" pos:end="161:15">&gt;</operator><literal type="number" pos:start="161:16" pos:end="161:16">0</literal></expr>;</condition><incr pos:start="161:18" pos:end="161:20"><expr pos:start="161:18" pos:end="161:20"><name pos:start="161:18" pos:end="161:18">n</name><operator pos:start="161:19" pos:end="161:20">--</operator></expr></incr>)</control> <block pos:start="161:23" pos:end="171:9">{<block_content pos:start="163:11" pos:end="169:51">

          <decl_stmt pos:start="163:11" pos:end="163:49"><decl pos:start="163:11" pos:end="163:48"><type pos:start="163:11" pos:end="163:18"><name pos:start="163:11" pos:end="163:18">uint32_t</name></type> <name pos:start="163:20" pos:end="163:20">v</name> <init pos:start="163:22" pos:end="163:48">= <expr pos:start="163:24" pos:end="163:48"><call pos:start="163:24" pos:end="163:48"><name pos:start="163:24" pos:end="163:42">bytestream_get_be24</name><argument_list pos:start="163:43" pos:end="163:48">(<argument pos:start="163:44" pos:end="163:47"><expr pos:start="163:44" pos:end="163:47"><operator pos:start="163:44" pos:end="163:44">&amp;</operator><name pos:start="163:45" pos:end="163:47">src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <expr_stmt pos:start="165:11" pos:end="165:18"><expr pos:start="165:11" pos:end="165:17"><name pos:start="165:11" pos:end="165:11">v</name> <operator pos:start="165:13" pos:end="165:15">&gt;&gt;=</operator> <literal type="number" pos:start="165:17" pos:end="165:17">4</literal></expr>;</expr_stmt> <comment type="line" pos:start="165:20" pos:end="165:41">// sync flags are here</comment>

          <expr_stmt pos:start="167:11" pos:end="169:51"><expr pos:start="167:11" pos:end="169:50"><operator pos:start="167:11" pos:end="167:11">*</operator><name pos:start="167:12" pos:end="167:18">samples</name><operator pos:start="167:19" pos:end="167:20">++</operator> <operator pos:start="167:22" pos:end="167:22">=</operator> <name pos:start="167:24" pos:end="167:50"><name pos:start="167:24" pos:end="167:33">av_reverse</name><index pos:start="167:34" pos:end="167:50">[<expr pos:start="167:35" pos:end="167:49"><operator pos:start="167:35" pos:end="167:35">(</operator><name pos:start="167:36" pos:end="167:36">v</name> <operator pos:start="167:38" pos:end="167:39">&gt;&gt;</operator> <literal type="number" pos:start="167:41" pos:end="167:41">8</literal><operator pos:start="167:42" pos:end="167:42">)</operator> <operator pos:start="167:44" pos:end="167:44">&amp;</operator> <literal type="number" pos:start="167:46" pos:end="167:49">0xff</literal></expr>]</index></name> <operator pos:start="167:52" pos:end="167:52">+</operator>

                       <operator pos:start="169:24" pos:end="169:24">(</operator><name pos:start="169:25" pos:end="169:44"><name pos:start="169:25" pos:end="169:34">av_reverse</name><index pos:start="169:35" pos:end="169:44">[<expr pos:start="169:36" pos:end="169:43"><name pos:start="169:36" pos:end="169:36">v</name> <operator pos:start="169:38" pos:end="169:38">&amp;</operator> <literal type="number" pos:start="169:40" pos:end="169:43">0xff</literal></expr>]</index></name> <operator pos:start="169:46" pos:end="169:47">&lt;&lt;</operator> <literal type="number" pos:start="169:49" pos:end="169:49">8</literal><operator pos:start="169:50" pos:end="169:50">)</operator></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="173:9" pos:end="173:14">break;</break>

    <case pos:start="175:5" pos:end="175:35">case <expr pos:start="175:10" pos:end="175:34"><name pos:start="175:10" pos:end="175:34">CODEC_ID_PCM_S16LE_PLANAR</name></expr>:</case>

        <expr_stmt pos:start="177:9" pos:end="177:29"><expr pos:start="177:9" pos:end="177:28"><name pos:start="177:9" pos:end="177:9">n</name> <operator pos:start="177:11" pos:end="177:12">/=</operator> <name pos:start="177:14" pos:end="177:28"><name pos:start="177:14" pos:end="177:18">avctx</name><operator pos:start="177:19" pos:end="177:20">-&gt;</operator><name pos:start="177:21" pos:end="177:28">channels</name></name></expr>;</expr_stmt>

        <for pos:start="179:9" pos:end="181:34">for<control pos:start="179:12" pos:end="179:38">(<init pos:start="179:13" pos:end="179:16"><expr pos:start="179:13" pos:end="179:15"><name pos:start="179:13" pos:end="179:13">c</name><operator pos:start="179:14" pos:end="179:14">=</operator><literal type="number" pos:start="179:15" pos:end="179:15">0</literal></expr>;</init><condition pos:start="179:17" pos:end="179:34"><expr pos:start="179:17" pos:end="179:33"><name pos:start="179:17" pos:end="179:17">c</name><operator pos:start="179:18" pos:end="179:18">&lt;</operator><name pos:start="179:19" pos:end="179:33"><name pos:start="179:19" pos:end="179:23">avctx</name><operator pos:start="179:24" pos:end="179:25">-&gt;</operator><name pos:start="179:26" pos:end="179:33">channels</name></name></expr>;</condition><incr pos:start="179:35" pos:end="179:37"><expr pos:start="179:35" pos:end="179:37"><name pos:start="179:35" pos:end="179:35">c</name><operator pos:start="179:36" pos:end="179:37">++</operator></expr></incr>)</control><block type="pseudo" pos:start="181:13" pos:end="181:34"><block_content pos:start="181:13" pos:end="181:34">

            <expr_stmt pos:start="181:13" pos:end="181:34"><expr pos:start="181:13" pos:end="181:33"><name pos:start="181:13" pos:end="181:19"><name pos:start="181:13" pos:end="181:16">src2</name><index pos:start="181:17" pos:end="181:19">[<expr pos:start="181:18" pos:end="181:18"><name pos:start="181:18" pos:end="181:18">c</name></expr>]</index></name> <operator pos:start="181:21" pos:end="181:21">=</operator> <operator pos:start="181:23" pos:end="181:23">&amp;</operator><name pos:start="181:24" pos:end="181:33"><name pos:start="181:24" pos:end="181:26">src</name><index pos:start="181:27" pos:end="181:33">[<expr pos:start="181:28" pos:end="181:32"><name pos:start="181:28" pos:end="181:28">c</name><operator pos:start="181:29" pos:end="181:29">*</operator><name pos:start="181:30" pos:end="181:30">n</name><operator pos:start="181:31" pos:end="181:31">*</operator><literal type="number" pos:start="181:32" pos:end="181:32">2</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

        <for pos:start="183:9" pos:end="187:59">for<control pos:start="183:12" pos:end="183:21">(<init pos:start="183:13" pos:end="183:13">;</init><condition pos:start="183:14" pos:end="183:17"><expr pos:start="183:14" pos:end="183:16"><name pos:start="183:14" pos:end="183:14">n</name><operator pos:start="183:15" pos:end="183:15">&gt;</operator><literal type="number" pos:start="183:16" pos:end="183:16">0</literal></expr>;</condition><incr pos:start="183:18" pos:end="183:20"><expr pos:start="183:18" pos:end="183:20"><name pos:start="183:18" pos:end="183:18">n</name><operator pos:start="183:19" pos:end="183:20">--</operator></expr></incr>)</control><block type="pseudo" pos:start="185:13" pos:end="187:59"><block_content pos:start="185:13" pos:end="187:59">

            <for pos:start="185:13" pos:end="187:59">for<control pos:start="185:16" pos:end="185:42">(<init pos:start="185:17" pos:end="185:20"><expr pos:start="185:17" pos:end="185:19"><name pos:start="185:17" pos:end="185:17">c</name><operator pos:start="185:18" pos:end="185:18">=</operator><literal type="number" pos:start="185:19" pos:end="185:19">0</literal></expr>;</init><condition pos:start="185:21" pos:end="185:38"><expr pos:start="185:21" pos:end="185:37"><name pos:start="185:21" pos:end="185:21">c</name><operator pos:start="185:22" pos:end="185:22">&lt;</operator><name pos:start="185:23" pos:end="185:37"><name pos:start="185:23" pos:end="185:27">avctx</name><operator pos:start="185:28" pos:end="185:29">-&gt;</operator><name pos:start="185:30" pos:end="185:37">channels</name></name></expr>;</condition><incr pos:start="185:39" pos:end="185:41"><expr pos:start="185:39" pos:end="185:41"><name pos:start="185:39" pos:end="185:39">c</name><operator pos:start="185:40" pos:end="185:41">++</operator></expr></incr>)</control><block type="pseudo" pos:start="187:17" pos:end="187:59"><block_content pos:start="187:17" pos:end="187:59">

                <expr_stmt pos:start="187:17" pos:end="187:59"><expr pos:start="187:17" pos:end="187:58"><operator pos:start="187:17" pos:end="187:17">*</operator><name pos:start="187:18" pos:end="187:24">samples</name><operator pos:start="187:25" pos:end="187:26">++</operator> <operator pos:start="187:28" pos:end="187:28">=</operator> <call pos:start="187:30" pos:end="187:58"><name pos:start="187:30" pos:end="187:48">bytestream_get_le16</name><argument_list pos:start="187:49" pos:end="187:58">(<argument pos:start="187:50" pos:end="187:57"><expr pos:start="187:50" pos:end="187:57"><operator pos:start="187:50" pos:end="187:50">&amp;</operator><name pos:start="187:51" pos:end="187:57"><name pos:start="187:51" pos:end="187:54">src2</name><index pos:start="187:55" pos:end="187:57">[<expr pos:start="187:56" pos:end="187:56"><name pos:start="187:56" pos:end="187:56">c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

        <expr_stmt pos:start="189:9" pos:end="189:38"><expr pos:start="189:9" pos:end="189:37"><name pos:start="189:9" pos:end="189:11">src</name> <operator pos:start="189:13" pos:end="189:13">=</operator> <name pos:start="189:15" pos:end="189:37"><name pos:start="189:15" pos:end="189:18">src2</name><index pos:start="189:19" pos:end="189:37">[<expr pos:start="189:20" pos:end="189:36"><name pos:start="189:20" pos:end="189:34"><name pos:start="189:20" pos:end="189:24">avctx</name><operator pos:start="189:25" pos:end="189:26">-&gt;</operator><name pos:start="189:27" pos:end="189:34">channels</name></name><operator pos:start="189:35" pos:end="189:35">-</operator><literal type="number" pos:start="189:36" pos:end="189:36">1</literal></expr>]</index></name></expr>;</expr_stmt>

        <break pos:start="191:9" pos:end="191:14">break;</break>

    <case pos:start="193:5" pos:end="193:28">case <expr pos:start="193:10" pos:end="193:27"><name pos:start="193:10" pos:end="193:27">CODEC_ID_PCM_U16LE</name></expr>:</case>

        <macro pos:start="195:9" pos:end="195:58"><name pos:start="195:9" pos:end="195:14">DECODE</name><argument_list pos:start="195:15" pos:end="195:58">(<argument pos:start="195:16" pos:end="195:23">uint16_t</argument>, <argument pos:start="195:26" pos:end="195:29">le16</argument>, <argument pos:start="195:32" pos:end="195:34">src</argument>, <argument pos:start="195:37" pos:end="195:43">samples</argument>, <argument pos:start="195:46" pos:end="195:46">n</argument>, <argument pos:start="195:49" pos:end="195:49"><literal type="number" pos:start="195:49" pos:end="195:49">0</literal></argument>, <argument pos:start="195:52" pos:end="195:57"><literal type="number" pos:start="195:52" pos:end="195:57">0x8000</literal></argument>)</argument_list></macro>

        <break pos:start="197:9" pos:end="197:14">break;</break>

    <case pos:start="199:5" pos:end="199:28">case <expr pos:start="199:10" pos:end="199:27"><name pos:start="199:10" pos:end="199:27">CODEC_ID_PCM_U16BE</name></expr>:</case>

        <macro pos:start="201:9" pos:end="201:58"><name pos:start="201:9" pos:end="201:14">DECODE</name><argument_list pos:start="201:15" pos:end="201:58">(<argument pos:start="201:16" pos:end="201:23">uint16_t</argument>, <argument pos:start="201:26" pos:end="201:29">be16</argument>, <argument pos:start="201:32" pos:end="201:34">src</argument>, <argument pos:start="201:37" pos:end="201:43">samples</argument>, <argument pos:start="201:46" pos:end="201:46">n</argument>, <argument pos:start="201:49" pos:end="201:49"><literal type="number" pos:start="201:49" pos:end="201:49">0</literal></argument>, <argument pos:start="201:52" pos:end="201:57"><literal type="number" pos:start="201:52" pos:end="201:57">0x8000</literal></argument>)</argument_list></macro>

        <break pos:start="203:9" pos:end="203:14">break;</break>

    <case pos:start="205:5" pos:end="205:25">case <expr pos:start="205:10" pos:end="205:24"><name pos:start="205:10" pos:end="205:24">CODEC_ID_PCM_S8</name></expr>:</case>

        <expr_stmt pos:start="207:9" pos:end="207:33"><expr pos:start="207:9" pos:end="207:32"><name pos:start="207:9" pos:end="207:13">dstu8</name><operator pos:start="207:14" pos:end="207:14">=</operator> <operator pos:start="207:16" pos:end="207:16">(</operator><name pos:start="207:17" pos:end="207:23">uint8_t</name><operator pos:start="207:24" pos:end="207:24">*</operator><operator pos:start="207:25" pos:end="207:25">)</operator><name pos:start="207:26" pos:end="207:32">samples</name></expr>;</expr_stmt>

        <for pos:start="209:9" pos:end="213:9">for<control pos:start="209:12" pos:end="209:21">(<init pos:start="209:13" pos:end="209:13">;</init><condition pos:start="209:14" pos:end="209:17"><expr pos:start="209:14" pos:end="209:16"><name pos:start="209:14" pos:end="209:14">n</name><operator pos:start="209:15" pos:end="209:15">&gt;</operator><literal type="number" pos:start="209:16" pos:end="209:16">0</literal></expr>;</condition><incr pos:start="209:18" pos:end="209:20"><expr pos:start="209:18" pos:end="209:20"><name pos:start="209:18" pos:end="209:18">n</name><operator pos:start="209:19" pos:end="209:20">--</operator></expr></incr>)</control> <block pos:start="209:23" pos:end="213:9">{<block_content pos:start="211:13" pos:end="211:36">

            <expr_stmt pos:start="211:13" pos:end="211:36"><expr pos:start="211:13" pos:end="211:35"><operator pos:start="211:13" pos:end="211:13">*</operator><name pos:start="211:14" pos:end="211:18">dstu8</name><operator pos:start="211:19" pos:end="211:20">++</operator> <operator pos:start="211:22" pos:end="211:22">=</operator> <operator pos:start="211:24" pos:end="211:24">*</operator><name pos:start="211:25" pos:end="211:27">src</name><operator pos:start="211:28" pos:end="211:29">++</operator> <operator pos:start="211:31" pos:end="211:31">+</operator> <literal type="number" pos:start="211:33" pos:end="211:35">128</literal></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="215:9" pos:end="215:31"><expr pos:start="215:9" pos:end="215:30"><name pos:start="215:9" pos:end="215:15">samples</name><operator pos:start="215:16" pos:end="215:16">=</operator> <operator pos:start="215:18" pos:end="215:18">(</operator><name pos:start="215:19" pos:end="215:23">short</name><operator pos:start="215:24" pos:end="215:24">*</operator><operator pos:start="215:25" pos:end="215:25">)</operator><name pos:start="215:26" pos:end="215:30">dstu8</name></expr>;</expr_stmt>

        <break pos:start="217:9" pos:end="220:0">break;</break>

<cpp:if pos:start="219:1" pos:end="219:18">#<cpp:directive pos:start="219:2" pos:end="219:3">if</cpp:directive> <expr pos:start="219:5" pos:end="219:18"><name pos:start="219:5" pos:end="219:18">HAVE_BIGENDIAN</name></expr></cpp:if>

    <case pos:start="221:5" pos:end="221:28">case <expr pos:start="221:10" pos:end="221:27"><name pos:start="221:10" pos:end="221:27">CODEC_ID_PCM_F64LE</name></expr>:</case>

        <macro pos:start="223:9" pos:end="223:52"><name pos:start="223:9" pos:end="223:14">DECODE</name><argument_list pos:start="223:15" pos:end="223:52">(<argument pos:start="223:16" pos:end="223:22">int64_t</argument>, <argument pos:start="223:25" pos:end="223:28">le64</argument>, <argument pos:start="223:31" pos:end="223:33">src</argument>, <argument pos:start="223:36" pos:end="223:42">samples</argument>, <argument pos:start="223:45" pos:end="223:45">n</argument>, <argument pos:start="223:48" pos:end="223:48"><literal type="number" pos:start="223:48" pos:end="223:48">0</literal></argument>, <argument pos:start="223:51" pos:end="223:51"><literal type="number" pos:start="223:51" pos:end="223:51">0</literal></argument>)</argument_list></macro>

        <break pos:start="225:9" pos:end="225:14">break;</break>

    <case pos:start="227:5" pos:end="227:28">case <expr pos:start="227:10" pos:end="227:27"><name pos:start="227:10" pos:end="227:27">CODEC_ID_PCM_S32LE</name></expr>:</case>

    <case pos:start="229:5" pos:end="229:28">case <expr pos:start="229:10" pos:end="229:27"><name pos:start="229:10" pos:end="229:27">CODEC_ID_PCM_F32LE</name></expr>:</case>

        <macro pos:start="231:9" pos:end="231:52"><name pos:start="231:9" pos:end="231:14">DECODE</name><argument_list pos:start="231:15" pos:end="231:52">(<argument pos:start="231:16" pos:end="231:22">int32_t</argument>, <argument pos:start="231:25" pos:end="231:28">le32</argument>, <argument pos:start="231:31" pos:end="231:33">src</argument>, <argument pos:start="231:36" pos:end="231:42">samples</argument>, <argument pos:start="231:45" pos:end="231:45">n</argument>, <argument pos:start="231:48" pos:end="231:48"><literal type="number" pos:start="231:48" pos:end="231:48">0</literal></argument>, <argument pos:start="231:51" pos:end="231:51"><literal type="number" pos:start="231:51" pos:end="231:51">0</literal></argument>)</argument_list></macro>

        <break pos:start="233:9" pos:end="233:14">break;</break>

    <case pos:start="235:5" pos:end="235:28">case <expr pos:start="235:10" pos:end="235:27"><name pos:start="235:10" pos:end="235:27">CODEC_ID_PCM_S16LE</name></expr>:</case>

        <macro pos:start="237:9" pos:end="237:52"><name pos:start="237:9" pos:end="237:14">DECODE</name><argument_list pos:start="237:15" pos:end="237:52">(<argument pos:start="237:16" pos:end="237:22">int16_t</argument>, <argument pos:start="237:25" pos:end="237:28">le16</argument>, <argument pos:start="237:31" pos:end="237:33">src</argument>, <argument pos:start="237:36" pos:end="237:42">samples</argument>, <argument pos:start="237:45" pos:end="237:45">n</argument>, <argument pos:start="237:48" pos:end="237:48"><literal type="number" pos:start="237:48" pos:end="237:48">0</literal></argument>, <argument pos:start="237:51" pos:end="237:51"><literal type="number" pos:start="237:51" pos:end="237:51">0</literal></argument>)</argument_list></macro>

        <break pos:start="239:9" pos:end="239:14">break;</break>

    <case pos:start="241:5" pos:end="241:28">case <expr pos:start="241:10" pos:end="241:27"><name pos:start="241:10" pos:end="241:27">CODEC_ID_PCM_F64BE</name></expr>:</case>

    <case pos:start="243:5" pos:end="243:28">case <expr pos:start="243:10" pos:end="243:27"><name pos:start="243:10" pos:end="243:27">CODEC_ID_PCM_F32BE</name></expr>:</case>

    <case pos:start="245:5" pos:end="245:28">case <expr pos:start="245:10" pos:end="245:27"><name pos:start="245:10" pos:end="245:27">CODEC_ID_PCM_S32BE</name></expr>:</case>

    <case pos:start="247:5" pos:end="250:0">case <expr pos:start="247:10" pos:end="247:27"><name pos:start="247:10" pos:end="247:27">CODEC_ID_PCM_S16BE</name></expr>:</case>

<cpp:else pos:start="249:1" pos:end="249:5">#<cpp:directive pos:start="249:2" pos:end="249:5">else</cpp:directive></cpp:else>

    <case pos:start="251:5" pos:end="251:28">case <expr pos:start="251:10" pos:end="251:27"><name pos:start="251:10" pos:end="251:27">CODEC_ID_PCM_F64BE</name></expr>:</case>

        <macro pos:start="253:9" pos:end="253:52"><name pos:start="253:9" pos:end="253:14">DECODE</name><argument_list pos:start="253:15" pos:end="253:52">(<argument pos:start="253:16" pos:end="253:22">int64_t</argument>, <argument pos:start="253:25" pos:end="253:28">be64</argument>, <argument pos:start="253:31" pos:end="253:33">src</argument>, <argument pos:start="253:36" pos:end="253:42">samples</argument>, <argument pos:start="253:45" pos:end="253:45">n</argument>, <argument pos:start="253:48" pos:end="253:48"><literal type="number" pos:start="253:48" pos:end="253:48">0</literal></argument>, <argument pos:start="253:51" pos:end="253:51"><literal type="number" pos:start="253:51" pos:end="253:51">0</literal></argument>)</argument_list></macro>

        <break pos:start="255:9" pos:end="255:14">break;</break>

    <case pos:start="257:5" pos:end="257:28">case <expr pos:start="257:10" pos:end="257:27"><name pos:start="257:10" pos:end="257:27">CODEC_ID_PCM_F32BE</name></expr>:</case>

    <case pos:start="259:5" pos:end="259:28">case <expr pos:start="259:10" pos:end="259:27"><name pos:start="259:10" pos:end="259:27">CODEC_ID_PCM_S32BE</name></expr>:</case>

        <macro pos:start="261:9" pos:end="261:52"><name pos:start="261:9" pos:end="261:14">DECODE</name><argument_list pos:start="261:15" pos:end="261:52">(<argument pos:start="261:16" pos:end="261:22">int32_t</argument>, <argument pos:start="261:25" pos:end="261:28">be32</argument>, <argument pos:start="261:31" pos:end="261:33">src</argument>, <argument pos:start="261:36" pos:end="261:42">samples</argument>, <argument pos:start="261:45" pos:end="261:45">n</argument>, <argument pos:start="261:48" pos:end="261:48"><literal type="number" pos:start="261:48" pos:end="261:48">0</literal></argument>, <argument pos:start="261:51" pos:end="261:51"><literal type="number" pos:start="261:51" pos:end="261:51">0</literal></argument>)</argument_list></macro>

        <break pos:start="263:9" pos:end="263:14">break;</break>

    <case pos:start="265:5" pos:end="265:28">case <expr pos:start="265:10" pos:end="265:27"><name pos:start="265:10" pos:end="265:27">CODEC_ID_PCM_S16BE</name></expr>:</case>

        <macro pos:start="267:9" pos:end="267:52"><name pos:start="267:9" pos:end="267:14">DECODE</name><argument_list pos:start="267:15" pos:end="267:52">(<argument pos:start="267:16" pos:end="267:22">int16_t</argument>, <argument pos:start="267:25" pos:end="267:28">be16</argument>, <argument pos:start="267:31" pos:end="267:33">src</argument>, <argument pos:start="267:36" pos:end="267:42">samples</argument>, <argument pos:start="267:45" pos:end="267:45">n</argument>, <argument pos:start="267:48" pos:end="267:48"><literal type="number" pos:start="267:48" pos:end="267:48">0</literal></argument>, <argument pos:start="267:51" pos:end="267:51"><literal type="number" pos:start="267:51" pos:end="267:51">0</literal></argument>)</argument_list></macro>

        <break pos:start="269:9" pos:end="269:14">break;</break>

    <case pos:start="271:5" pos:end="271:28">case <expr pos:start="271:10" pos:end="271:27"><name pos:start="271:10" pos:end="271:27">CODEC_ID_PCM_F64LE</name></expr>:</case>

    <case pos:start="273:5" pos:end="273:28">case <expr pos:start="273:10" pos:end="273:27"><name pos:start="273:10" pos:end="273:27">CODEC_ID_PCM_F32LE</name></expr>:</case>

    <case pos:start="275:5" pos:end="275:28">case <expr pos:start="275:10" pos:end="275:27"><name pos:start="275:10" pos:end="275:27">CODEC_ID_PCM_S32LE</name></expr>:</case>

    <case pos:start="277:5" pos:end="280:0">case <expr pos:start="277:10" pos:end="277:27"><name pos:start="277:10" pos:end="277:27">CODEC_ID_PCM_S16LE</name></expr>:</case>

<cpp:endif pos:start="279:1" pos:end="279:6">#<cpp:directive pos:start="279:2" pos:end="279:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="279:8" pos:end="279:27">/* HAVE_BIGENDIAN */</comment>

    <case pos:start="281:5" pos:end="281:25">case <expr pos:start="281:10" pos:end="281:24"><name pos:start="281:10" pos:end="281:24">CODEC_ID_PCM_U8</name></expr>:</case>

        <expr_stmt pos:start="283:9" pos:end="283:44"><expr pos:start="283:9" pos:end="283:43"><call pos:start="283:9" pos:end="283:43"><name pos:start="283:9" pos:end="283:14">memcpy</name><argument_list pos:start="283:15" pos:end="283:43">(<argument pos:start="283:16" pos:end="283:22"><expr pos:start="283:16" pos:end="283:22"><name pos:start="283:16" pos:end="283:22">samples</name></expr></argument>, <argument pos:start="283:25" pos:end="283:27"><expr pos:start="283:25" pos:end="283:27"><name pos:start="283:25" pos:end="283:27">src</name></expr></argument>, <argument pos:start="283:30" pos:end="283:42"><expr pos:start="283:30" pos:end="283:42"><name pos:start="283:30" pos:end="283:30">n</name><operator pos:start="283:31" pos:end="283:31">*</operator><name pos:start="283:32" pos:end="283:42">sample_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="285:9" pos:end="285:29"><expr pos:start="285:9" pos:end="285:28"><name pos:start="285:9" pos:end="285:11">src</name> <operator pos:start="285:13" pos:end="285:14">+=</operator> <name pos:start="285:16" pos:end="285:16">n</name><operator pos:start="285:17" pos:end="285:17">*</operator><name pos:start="285:18" pos:end="285:28">sample_size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="287:9" pos:end="287:59"><expr pos:start="287:9" pos:end="287:58"><name pos:start="287:9" pos:end="287:15">samples</name> <operator pos:start="287:17" pos:end="287:17">=</operator> <operator pos:start="287:19" pos:end="287:19">(</operator><name pos:start="287:20" pos:end="287:24">short</name><operator pos:start="287:25" pos:end="287:25">*</operator><operator pos:start="287:26" pos:end="287:26">)</operator><operator pos:start="287:27" pos:end="287:27">(</operator><operator pos:start="287:28" pos:end="287:28">(</operator><name pos:start="287:29" pos:end="287:35">uint8_t</name><operator pos:start="287:36" pos:end="287:36">*</operator><operator pos:start="287:37" pos:end="287:37">)</operator><name pos:start="287:38" pos:end="287:41">data</name> <operator pos:start="287:43" pos:end="287:43">+</operator> <name pos:start="287:45" pos:end="287:45">n</name><operator pos:start="287:46" pos:end="287:46">*</operator><name pos:start="287:47" pos:end="287:57">sample_size</name><operator pos:start="287:58" pos:end="287:58">)</operator></expr>;</expr_stmt>

        <break pos:start="289:9" pos:end="289:14">break;</break>

    <case pos:start="291:5" pos:end="291:27">case <expr pos:start="291:10" pos:end="291:26"><name pos:start="291:10" pos:end="291:26">CODEC_ID_PCM_ZORK</name></expr>:</case>

        <for pos:start="293:9" pos:end="303:9">for<control pos:start="293:12" pos:end="293:21">(<init pos:start="293:13" pos:end="293:13">;</init><condition pos:start="293:14" pos:end="293:17"><expr pos:start="293:14" pos:end="293:16"><name pos:start="293:14" pos:end="293:14">n</name><operator pos:start="293:15" pos:end="293:15">&gt;</operator><literal type="number" pos:start="293:16" pos:end="293:16">0</literal></expr>;</condition><incr pos:start="293:18" pos:end="293:20"><expr pos:start="293:18" pos:end="293:20"><name pos:start="293:18" pos:end="293:18">n</name><operator pos:start="293:19" pos:end="293:20">--</operator></expr></incr>)</control> <block pos:start="293:23" pos:end="303:9">{<block_content pos:start="295:13" pos:end="301:32">

            <decl_stmt pos:start="295:13" pos:end="295:26"><decl pos:start="295:13" pos:end="295:25"><type pos:start="295:13" pos:end="295:15"><name pos:start="295:13" pos:end="295:15">int</name></type> <name pos:start="295:17" pos:end="295:17">x</name><init pos:start="295:18" pos:end="295:25">= <expr pos:start="295:20" pos:end="295:25"><operator pos:start="295:20" pos:end="295:20">*</operator><name pos:start="295:21" pos:end="295:23">src</name><operator pos:start="295:24" pos:end="295:25">++</operator></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="297:13" pos:end="299:29"><if pos:start="297:13" pos:end="297:30">if<condition pos:start="297:15" pos:end="297:21">(<expr pos:start="297:16" pos:end="297:20"><name pos:start="297:16" pos:end="297:16">x</name><operator pos:start="297:17" pos:end="297:17">&amp;</operator><literal type="number" pos:start="297:18" pos:end="297:20">128</literal></expr>)</condition><block type="pseudo" pos:start="297:23" pos:end="297:30"><block_content pos:start="297:23" pos:end="297:30"> <expr_stmt pos:start="297:23" pos:end="297:30"><expr pos:start="297:23" pos:end="297:29"><name pos:start="297:23" pos:end="297:23">x</name><operator pos:start="297:24" pos:end="297:25">-=</operator> <literal type="number" pos:start="297:27" pos:end="297:29">128</literal></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="299:13" pos:end="299:29">else<block type="pseudo" pos:start="299:23" pos:end="299:29"><block_content pos:start="299:23" pos:end="299:29">      <expr_stmt pos:start="299:23" pos:end="299:29"><expr pos:start="299:23" pos:end="299:28"><name pos:start="299:23" pos:end="299:23">x</name> <operator pos:start="299:25" pos:end="299:25">=</operator> <operator pos:start="299:27" pos:end="299:27">-</operator><name pos:start="299:28" pos:end="299:28">x</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="301:13" pos:end="301:32"><expr pos:start="301:13" pos:end="301:31"><operator pos:start="301:13" pos:end="301:13">*</operator><name pos:start="301:14" pos:end="301:20">samples</name><operator pos:start="301:21" pos:end="301:22">++</operator> <operator pos:start="301:24" pos:end="301:24">=</operator> <name pos:start="301:26" pos:end="301:26">x</name> <operator pos:start="301:28" pos:end="301:29">&lt;&lt;</operator> <literal type="number" pos:start="301:31" pos:end="301:31">8</literal></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="305:9" pos:end="305:14">break;</break>

    <case pos:start="307:5" pos:end="307:27">case <expr pos:start="307:10" pos:end="307:26"><name pos:start="307:10" pos:end="307:26">CODEC_ID_PCM_ALAW</name></expr>:</case>

    <case pos:start="309:5" pos:end="309:28">case <expr pos:start="309:10" pos:end="309:27"><name pos:start="309:10" pos:end="309:27">CODEC_ID_PCM_MULAW</name></expr>:</case>

        <for pos:start="311:9" pos:end="315:9">for<control pos:start="311:12" pos:end="311:21">(<init pos:start="311:13" pos:end="311:13">;</init><condition pos:start="311:14" pos:end="311:17"><expr pos:start="311:14" pos:end="311:16"><name pos:start="311:14" pos:end="311:14">n</name><operator pos:start="311:15" pos:end="311:15">&gt;</operator><literal type="number" pos:start="311:16" pos:end="311:16">0</literal></expr>;</condition><incr pos:start="311:18" pos:end="311:20"><expr pos:start="311:18" pos:end="311:20"><name pos:start="311:18" pos:end="311:18">n</name><operator pos:start="311:19" pos:end="311:20">--</operator></expr></incr>)</control> <block pos:start="311:23" pos:end="315:9">{<block_content pos:start="313:13" pos:end="313:42">

            <expr_stmt pos:start="313:13" pos:end="313:42"><expr pos:start="313:13" pos:end="313:41"><operator pos:start="313:13" pos:end="313:13">*</operator><name pos:start="313:14" pos:end="313:20">samples</name><operator pos:start="313:21" pos:end="313:22">++</operator> <operator pos:start="313:24" pos:end="313:24">=</operator> <name pos:start="313:26" pos:end="313:41"><name pos:start="313:26" pos:end="313:26">s</name><operator pos:start="313:27" pos:end="313:28">-&gt;</operator><name pos:start="313:29" pos:end="313:33">table</name><index pos:start="313:34" pos:end="313:41">[<expr pos:start="313:35" pos:end="313:40"><operator pos:start="313:35" pos:end="313:35">*</operator><name pos:start="313:36" pos:end="313:38">src</name><operator pos:start="313:39" pos:end="313:40">++</operator></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="317:9" pos:end="317:14">break;</break>

    <case pos:start="319:5" pos:end="319:26">case <expr pos:start="319:10" pos:end="319:25"><name pos:start="319:10" pos:end="319:25">CODEC_ID_PCM_DVD</name></expr>:</case>

        <expr_stmt pos:start="321:9" pos:end="321:27"><expr pos:start="321:9" pos:end="321:26"><name pos:start="321:9" pos:end="321:19">dst_int32_t</name> <operator pos:start="321:21" pos:end="321:21">=</operator> <name pos:start="321:23" pos:end="321:26">data</name></expr>;</expr_stmt>

        <expr_stmt pos:start="323:9" pos:end="323:29"><expr pos:start="323:9" pos:end="323:28"><name pos:start="323:9" pos:end="323:9">n</name> <operator pos:start="323:11" pos:end="323:12">/=</operator> <name pos:start="323:14" pos:end="323:28"><name pos:start="323:14" pos:end="323:18">avctx</name><operator pos:start="323:19" pos:end="323:20">-&gt;</operator><name pos:start="323:21" pos:end="323:28">channels</name></name></expr>;</expr_stmt>

        <switch pos:start="325:9" pos:end="377:9">switch <condition pos:start="325:16" pos:end="325:45">(<expr pos:start="325:17" pos:end="325:44"><name pos:start="325:17" pos:end="325:44"><name pos:start="325:17" pos:end="325:21">avctx</name><operator pos:start="325:22" pos:end="325:23">-&gt;</operator><name pos:start="325:24" pos:end="325:44">bits_per_coded_sample</name></name></expr>)</condition> <block pos:start="325:47" pos:end="377:9">{<block_content pos:start="327:9" pos:end="375:22">

        <case pos:start="327:9" pos:end="327:16">case <expr pos:start="327:14" pos:end="327:15"><literal type="number" pos:start="327:14" pos:end="327:15">20</literal></expr>:</case>

            <while pos:start="329:13" pos:end="345:13">while <condition pos:start="329:19" pos:end="329:23">(<expr pos:start="329:20" pos:end="329:22"><name pos:start="329:20" pos:end="329:20">n</name><operator pos:start="329:21" pos:end="329:22">--</operator></expr>)</condition> <block pos:start="329:25" pos:end="345:13">{<block_content pos:start="331:17" pos:end="343:27">

                <expr_stmt pos:start="331:17" pos:end="331:36"><expr pos:start="331:17" pos:end="331:35"><name pos:start="331:17" pos:end="331:17">c</name> <operator pos:start="331:19" pos:end="331:19">=</operator> <name pos:start="331:21" pos:end="331:35"><name pos:start="331:21" pos:end="331:25">avctx</name><operator pos:start="331:26" pos:end="331:27">-&gt;</operator><name pos:start="331:28" pos:end="331:35">channels</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="333:17" pos:end="333:33"><expr pos:start="333:17" pos:end="333:32"><name pos:start="333:17" pos:end="333:20">src8</name> <operator pos:start="333:22" pos:end="333:22">=</operator> <name pos:start="333:24" pos:end="333:26">src</name> <operator pos:start="333:28" pos:end="333:28">+</operator> <literal type="number" pos:start="333:30" pos:end="333:30">4</literal><operator pos:start="333:31" pos:end="333:31">*</operator><name pos:start="333:32" pos:end="333:32">c</name></expr>;</expr_stmt>

                <while pos:start="335:17" pos:end="341:17">while <condition pos:start="335:23" pos:end="335:27">(<expr pos:start="335:24" pos:end="335:26"><name pos:start="335:24" pos:end="335:24">c</name><operator pos:start="335:25" pos:end="335:26">--</operator></expr>)</condition> <block pos:start="335:29" pos:end="341:17">{<block_content pos:start="337:21" pos:end="339:97">

                    <expr_stmt pos:start="337:21" pos:end="337:96"><expr pos:start="337:21" pos:end="337:95"><operator pos:start="337:21" pos:end="337:21">*</operator><name pos:start="337:22" pos:end="337:32">dst_int32_t</name><operator pos:start="337:33" pos:end="337:34">++</operator> <operator pos:start="337:36" pos:end="337:36">=</operator> <operator pos:start="337:38" pos:end="337:38">(</operator><call pos:start="337:39" pos:end="337:63"><name pos:start="337:39" pos:end="337:57">bytestream_get_be16</name><argument_list pos:start="337:58" pos:end="337:63">(<argument pos:start="337:59" pos:end="337:62"><expr pos:start="337:59" pos:end="337:62"><operator pos:start="337:59" pos:end="337:59">&amp;</operator><name pos:start="337:60" pos:end="337:62">src</name></expr></argument>)</argument_list></call> <operator pos:start="337:65" pos:end="337:66">&lt;&lt;</operator> <literal type="number" pos:start="337:68" pos:end="337:69">16</literal><operator pos:start="337:70" pos:end="337:70">)</operator> <operator pos:start="337:72" pos:end="337:72">+</operator> <operator pos:start="337:74" pos:end="337:74">(</operator><operator pos:start="337:75" pos:end="337:75">(</operator><operator pos:start="337:76" pos:end="337:76">*</operator><name pos:start="337:77" pos:end="337:80">src8</name>   <operator pos:start="337:84" pos:end="337:84">&amp;</operator><literal type="number" pos:start="337:85" pos:end="337:88">0xf0</literal><operator pos:start="337:89" pos:end="337:89">)</operator> <operator pos:start="337:91" pos:end="337:92">&lt;&lt;</operator> <literal type="number" pos:start="337:94" pos:end="337:94">8</literal><operator pos:start="337:95" pos:end="337:95">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="339:21" pos:end="339:97"><expr pos:start="339:21" pos:end="339:96"><operator pos:start="339:21" pos:end="339:21">*</operator><name pos:start="339:22" pos:end="339:32">dst_int32_t</name><operator pos:start="339:33" pos:end="339:34">++</operator> <operator pos:start="339:36" pos:end="339:36">=</operator> <operator pos:start="339:38" pos:end="339:38">(</operator><call pos:start="339:39" pos:end="339:63"><name pos:start="339:39" pos:end="339:57">bytestream_get_be16</name><argument_list pos:start="339:58" pos:end="339:63">(<argument pos:start="339:59" pos:end="339:62"><expr pos:start="339:59" pos:end="339:62"><operator pos:start="339:59" pos:end="339:59">&amp;</operator><name pos:start="339:60" pos:end="339:62">src</name></expr></argument>)</argument_list></call> <operator pos:start="339:65" pos:end="339:66">&lt;&lt;</operator> <literal type="number" pos:start="339:68" pos:end="339:69">16</literal><operator pos:start="339:70" pos:end="339:70">)</operator> <operator pos:start="339:72" pos:end="339:72">+</operator> <operator pos:start="339:74" pos:end="339:74">(</operator><operator pos:start="339:75" pos:end="339:75">(</operator><operator pos:start="339:76" pos:end="339:76">*</operator><name pos:start="339:77" pos:end="339:80">src8</name><operator pos:start="339:81" pos:end="339:82">++</operator> <operator pos:start="339:84" pos:end="339:84">&amp;</operator><literal type="number" pos:start="339:85" pos:end="339:88">0x0f</literal><operator pos:start="339:89" pos:end="339:89">)</operator> <operator pos:start="339:91" pos:end="339:92">&lt;&lt;</operator> <literal type="number" pos:start="339:94" pos:end="339:95">12</literal><operator pos:start="339:96" pos:end="339:96">)</operator></expr>;</expr_stmt>

                </block_content>}</block></while>

                <expr_stmt pos:start="343:17" pos:end="343:27"><expr pos:start="343:17" pos:end="343:26"><name pos:start="343:17" pos:end="343:19">src</name> <operator pos:start="343:21" pos:end="343:21">=</operator> <name pos:start="343:23" pos:end="343:26">src8</name></expr>;</expr_stmt>

            </block_content>}</block></while>

            <break pos:start="347:13" pos:end="347:18">break;</break>

        <case pos:start="349:9" pos:end="349:16">case <expr pos:start="349:14" pos:end="349:15"><literal type="number" pos:start="349:14" pos:end="349:15">24</literal></expr>:</case>

            <while pos:start="351:13" pos:end="367:13">while <condition pos:start="351:19" pos:end="351:23">(<expr pos:start="351:20" pos:end="351:22"><name pos:start="351:20" pos:end="351:20">n</name><operator pos:start="351:21" pos:end="351:22">--</operator></expr>)</condition> <block pos:start="351:25" pos:end="367:13">{<block_content pos:start="353:17" pos:end="365:27">

                <expr_stmt pos:start="353:17" pos:end="353:36"><expr pos:start="353:17" pos:end="353:35"><name pos:start="353:17" pos:end="353:17">c</name> <operator pos:start="353:19" pos:end="353:19">=</operator> <name pos:start="353:21" pos:end="353:35"><name pos:start="353:21" pos:end="353:25">avctx</name><operator pos:start="353:26" pos:end="353:27">-&gt;</operator><name pos:start="353:28" pos:end="353:35">channels</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="355:17" pos:end="355:33"><expr pos:start="355:17" pos:end="355:32"><name pos:start="355:17" pos:end="355:20">src8</name> <operator pos:start="355:22" pos:end="355:22">=</operator> <name pos:start="355:24" pos:end="355:26">src</name> <operator pos:start="355:28" pos:end="355:28">+</operator> <literal type="number" pos:start="355:30" pos:end="355:30">4</literal><operator pos:start="355:31" pos:end="355:31">*</operator><name pos:start="355:32" pos:end="355:32">c</name></expr>;</expr_stmt>

                <while pos:start="357:17" pos:end="363:17">while <condition pos:start="357:23" pos:end="357:27">(<expr pos:start="357:24" pos:end="357:26"><name pos:start="357:24" pos:end="357:24">c</name><operator pos:start="357:25" pos:end="357:26">--</operator></expr>)</condition> <block pos:start="357:29" pos:end="363:17">{<block_content pos:start="359:21" pos:end="361:90">

                    <expr_stmt pos:start="359:21" pos:end="359:90"><expr pos:start="359:21" pos:end="359:89"><operator pos:start="359:21" pos:end="359:21">*</operator><name pos:start="359:22" pos:end="359:32">dst_int32_t</name><operator pos:start="359:33" pos:end="359:34">++</operator> <operator pos:start="359:36" pos:end="359:36">=</operator> <operator pos:start="359:38" pos:end="359:38">(</operator><call pos:start="359:39" pos:end="359:63"><name pos:start="359:39" pos:end="359:57">bytestream_get_be16</name><argument_list pos:start="359:58" pos:end="359:63">(<argument pos:start="359:59" pos:end="359:62"><expr pos:start="359:59" pos:end="359:62"><operator pos:start="359:59" pos:end="359:59">&amp;</operator><name pos:start="359:60" pos:end="359:62">src</name></expr></argument>)</argument_list></call> <operator pos:start="359:65" pos:end="359:66">&lt;&lt;</operator> <literal type="number" pos:start="359:68" pos:end="359:69">16</literal><operator pos:start="359:70" pos:end="359:70">)</operator> <operator pos:start="359:72" pos:end="359:72">+</operator> <operator pos:start="359:74" pos:end="359:74">(</operator><operator pos:start="359:75" pos:end="359:75">(</operator><operator pos:start="359:76" pos:end="359:76">*</operator><name pos:start="359:77" pos:end="359:80">src8</name><operator pos:start="359:81" pos:end="359:82">++</operator><operator pos:start="359:83" pos:end="359:83">)</operator> <operator pos:start="359:85" pos:end="359:86">&lt;&lt;</operator> <literal type="number" pos:start="359:88" pos:end="359:88">8</literal><operator pos:start="359:89" pos:end="359:89">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="361:21" pos:end="361:90"><expr pos:start="361:21" pos:end="361:89"><operator pos:start="361:21" pos:end="361:21">*</operator><name pos:start="361:22" pos:end="361:32">dst_int32_t</name><operator pos:start="361:33" pos:end="361:34">++</operator> <operator pos:start="361:36" pos:end="361:36">=</operator> <operator pos:start="361:38" pos:end="361:38">(</operator><call pos:start="361:39" pos:end="361:63"><name pos:start="361:39" pos:end="361:57">bytestream_get_be16</name><argument_list pos:start="361:58" pos:end="361:63">(<argument pos:start="361:59" pos:end="361:62"><expr pos:start="361:59" pos:end="361:62"><operator pos:start="361:59" pos:end="361:59">&amp;</operator><name pos:start="361:60" pos:end="361:62">src</name></expr></argument>)</argument_list></call> <operator pos:start="361:65" pos:end="361:66">&lt;&lt;</operator> <literal type="number" pos:start="361:68" pos:end="361:69">16</literal><operator pos:start="361:70" pos:end="361:70">)</operator> <operator pos:start="361:72" pos:end="361:72">+</operator> <operator pos:start="361:74" pos:end="361:74">(</operator><operator pos:start="361:75" pos:end="361:75">(</operator><operator pos:start="361:76" pos:end="361:76">*</operator><name pos:start="361:77" pos:end="361:80">src8</name><operator pos:start="361:81" pos:end="361:82">++</operator><operator pos:start="361:83" pos:end="361:83">)</operator> <operator pos:start="361:85" pos:end="361:86">&lt;&lt;</operator> <literal type="number" pos:start="361:88" pos:end="361:88">8</literal><operator pos:start="361:89" pos:end="361:89">)</operator></expr>;</expr_stmt>

                </block_content>}</block></while>

                <expr_stmt pos:start="365:17" pos:end="365:27"><expr pos:start="365:17" pos:end="365:26"><name pos:start="365:17" pos:end="365:19">src</name> <operator pos:start="365:21" pos:end="365:21">=</operator> <name pos:start="365:23" pos:end="365:26">src8</name></expr>;</expr_stmt>

            </block_content>}</block></while>

            <break pos:start="369:13" pos:end="369:18">break;</break>

        <default pos:start="371:9" pos:end="371:16">default:</default>

            <expr_stmt pos:start="373:13" pos:end="373:78"><expr pos:start="373:13" pos:end="373:77"><call pos:start="373:13" pos:end="373:77"><name pos:start="373:13" pos:end="373:18">av_log</name><argument_list pos:start="373:19" pos:end="373:77">(<argument pos:start="373:20" pos:end="373:24"><expr pos:start="373:20" pos:end="373:24"><name pos:start="373:20" pos:end="373:24">avctx</name></expr></argument>, <argument pos:start="373:27" pos:end="373:38"><expr pos:start="373:27" pos:end="373:38"><name pos:start="373:27" pos:end="373:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="373:41" pos:end="373:76"><expr pos:start="373:41" pos:end="373:76"><literal type="string" pos:start="373:41" pos:end="373:76">"PCM DVD unsupported sample depth\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="375:13" pos:end="375:22">return <expr pos:start="375:20" pos:end="375:21"><operator pos:start="375:20" pos:end="375:20">-</operator><literal type="number" pos:start="375:21" pos:end="375:21">1</literal></expr>;</return>

        </block_content>}</block></switch>

        <expr_stmt pos:start="379:9" pos:end="379:40"><expr pos:start="379:9" pos:end="379:39"><name pos:start="379:9" pos:end="379:15">samples</name> <operator pos:start="379:17" pos:end="379:17">=</operator> <operator pos:start="379:19" pos:end="379:19">(</operator><name pos:start="379:20" pos:end="379:24">short</name> <operator pos:start="379:26" pos:end="379:26">*</operator><operator pos:start="379:27" pos:end="379:27">)</operator> <name pos:start="379:29" pos:end="379:39">dst_int32_t</name></expr>;</expr_stmt>

        <break pos:start="381:9" pos:end="381:14">break;</break>

    <case pos:start="383:5" pos:end="383:26">case <expr pos:start="383:10" pos:end="383:25"><name pos:start="383:10" pos:end="383:25">CODEC_ID_PCM_LXF</name></expr>:</case>

        <expr_stmt pos:start="385:9" pos:end="385:27"><expr pos:start="385:9" pos:end="385:26"><name pos:start="385:9" pos:end="385:19">dst_int32_t</name> <operator pos:start="385:21" pos:end="385:21">=</operator> <name pos:start="385:23" pos:end="385:26">data</name></expr>;</expr_stmt>

        <expr_stmt pos:start="387:9" pos:end="387:29"><expr pos:start="387:9" pos:end="387:28"><name pos:start="387:9" pos:end="387:9">n</name> <operator pos:start="387:11" pos:end="387:12">/=</operator> <name pos:start="387:14" pos:end="387:28"><name pos:start="387:14" pos:end="387:18">avctx</name><operator pos:start="387:19" pos:end="387:20">-&gt;</operator><name pos:start="387:21" pos:end="387:28">channels</name></name></expr>;</expr_stmt>

        <comment type="line" pos:start="389:9" pos:end="389:33">//unpack and de-planerize</comment>

        <for pos:start="391:9" pos:end="415:9">for <control pos:start="391:13" pos:end="391:31">(<init pos:start="391:14" pos:end="391:19"><expr pos:start="391:14" pos:end="391:18"><name pos:start="391:14" pos:end="391:14">i</name> <operator pos:start="391:16" pos:end="391:16">=</operator> <literal type="number" pos:start="391:18" pos:end="391:18">0</literal></expr>;</init> <condition pos:start="391:21" pos:end="391:26"><expr pos:start="391:21" pos:end="391:25"><name pos:start="391:21" pos:end="391:21">i</name> <operator pos:start="391:23" pos:end="391:23">&lt;</operator> <name pos:start="391:25" pos:end="391:25">n</name></expr>;</condition> <incr pos:start="391:28" pos:end="391:30"><expr pos:start="391:28" pos:end="391:30"><name pos:start="391:28" pos:end="391:28">i</name><operator pos:start="391:29" pos:end="391:30">++</operator></expr></incr>)</control> <block pos:start="391:33" pos:end="415:9">{<block_content pos:start="393:13" pos:end="413:13">

            <for pos:start="393:13" pos:end="401:13">for <control pos:start="393:17" pos:end="393:80">(<init pos:start="393:18" pos:end="393:41"><expr pos:start="393:18" pos:end="393:22"><name pos:start="393:18" pos:end="393:18">c</name> <operator pos:start="393:20" pos:end="393:20">=</operator> <literal type="number" pos:start="393:22" pos:end="393:22">0</literal></expr><operator pos:start="393:23" pos:end="393:23">,</operator> <expr pos:start="393:25" pos:end="393:40"><name pos:start="393:25" pos:end="393:28">src8</name> <operator pos:start="393:30" pos:end="393:30">=</operator> <name pos:start="393:32" pos:end="393:34">src</name> <operator pos:start="393:36" pos:end="393:36">+</operator> <name pos:start="393:38" pos:end="393:38">i</name><operator pos:start="393:39" pos:end="393:39">*</operator><literal type="number" pos:start="393:40" pos:end="393:40">5</literal></expr>;</init> <condition pos:start="393:43" pos:end="393:62"><expr pos:start="393:43" pos:end="393:61"><name pos:start="393:43" pos:end="393:43">c</name> <operator pos:start="393:45" pos:end="393:45">&lt;</operator> <name pos:start="393:47" pos:end="393:61"><name pos:start="393:47" pos:end="393:51">avctx</name><operator pos:start="393:52" pos:end="393:53">-&gt;</operator><name pos:start="393:54" pos:end="393:61">channels</name></name></expr>;</condition> <incr pos:start="393:64" pos:end="393:79"><expr pos:start="393:64" pos:end="393:66"><name pos:start="393:64" pos:end="393:64">c</name><operator pos:start="393:65" pos:end="393:66">++</operator></expr><operator pos:start="393:67" pos:end="393:67">,</operator> <expr pos:start="393:69" pos:end="393:79"><name pos:start="393:69" pos:end="393:72">src8</name> <operator pos:start="393:74" pos:end="393:75">+=</operator> <name pos:start="393:77" pos:end="393:77">n</name><operator pos:start="393:78" pos:end="393:78">*</operator><literal type="number" pos:start="393:79" pos:end="393:79">5</literal></expr></incr>)</control> <block pos:start="393:82" pos:end="401:13">{<block_content pos:start="397:17" pos:end="399:66">

                <comment type="line" pos:start="395:17" pos:end="395:59">//extract low 20 bits and expand to 32 bits</comment>

                <expr_stmt pos:start="397:17" pos:end="399:66"><expr pos:start="397:17" pos:end="399:65"><operator pos:start="397:17" pos:end="397:17">*</operator><name pos:start="397:18" pos:end="397:28">dst_int32_t</name><operator pos:start="397:29" pos:end="397:30">++</operator> <operator pos:start="397:32" pos:end="397:32">=</operator> <operator pos:start="397:34" pos:end="397:34">(</operator><name pos:start="397:35" pos:end="397:41"><name pos:start="397:35" pos:end="397:38">src8</name><index pos:start="397:39" pos:end="397:41">[<expr pos:start="397:40" pos:end="397:40"><literal type="number" pos:start="397:40" pos:end="397:40">2</literal></expr>]</index></name> <operator pos:start="397:43" pos:end="397:44">&lt;&lt;</operator> <literal type="number" pos:start="397:46" pos:end="397:47">28</literal><operator pos:start="397:48" pos:end="397:48">)</operator> <operator pos:start="397:50" pos:end="397:50">|</operator> <operator pos:start="397:52" pos:end="397:52">(</operator><name pos:start="397:53" pos:end="397:59"><name pos:start="397:53" pos:end="397:56">src8</name><index pos:start="397:57" pos:end="397:59">[<expr pos:start="397:58" pos:end="397:58"><literal type="number" pos:start="397:58" pos:end="397:58">1</literal></expr>]</index></name> <operator pos:start="397:61" pos:end="397:62">&lt;&lt;</operator> <literal type="number" pos:start="397:64" pos:end="397:65">20</literal><operator pos:start="397:66" pos:end="397:66">)</operator> <operator pos:start="397:68" pos:end="397:68">|</operator> <operator pos:start="397:70" pos:end="397:70">(</operator><name pos:start="397:71" pos:end="397:77"><name pos:start="397:71" pos:end="397:74">src8</name><index pos:start="397:75" pos:end="397:77">[<expr pos:start="397:76" pos:end="397:76"><literal type="number" pos:start="397:76" pos:end="397:76">0</literal></expr>]</index></name> <operator pos:start="397:79" pos:end="397:80">&lt;&lt;</operator> <literal type="number" pos:start="397:82" pos:end="397:83">12</literal><operator pos:start="397:84" pos:end="397:84">)</operator> <operator pos:start="397:86" pos:end="397:86">|</operator>

                                 <operator pos:start="399:34" pos:end="399:34">(</operator><operator pos:start="399:35" pos:end="399:35">(</operator><name pos:start="399:36" pos:end="399:42"><name pos:start="399:36" pos:end="399:39">src8</name><index pos:start="399:40" pos:end="399:42">[<expr pos:start="399:41" pos:end="399:41"><literal type="number" pos:start="399:41" pos:end="399:41">2</literal></expr>]</index></name> <operator pos:start="399:44" pos:end="399:44">&amp;</operator> <literal type="number" pos:start="399:46" pos:end="399:48">0xF</literal><operator pos:start="399:49" pos:end="399:49">)</operator> <operator pos:start="399:51" pos:end="399:52">&lt;&lt;</operator> <literal type="number" pos:start="399:54" pos:end="399:54">8</literal><operator pos:start="399:55" pos:end="399:55">)</operator> <operator pos:start="399:57" pos:end="399:57">|</operator> <name pos:start="399:59" pos:end="399:65"><name pos:start="399:59" pos:end="399:62">src8</name><index pos:start="399:63" pos:end="399:65">[<expr pos:start="399:64" pos:end="399:64"><literal type="number" pos:start="399:64" pos:end="399:64">1</literal></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></for>



            <for pos:start="405:13" pos:end="413:13">for <control pos:start="405:17" pos:end="405:80">(<init pos:start="405:18" pos:end="405:41"><expr pos:start="405:18" pos:end="405:22"><name pos:start="405:18" pos:end="405:18">c</name> <operator pos:start="405:20" pos:end="405:20">=</operator> <literal type="number" pos:start="405:22" pos:end="405:22">0</literal></expr><operator pos:start="405:23" pos:end="405:23">,</operator> <expr pos:start="405:25" pos:end="405:40"><name pos:start="405:25" pos:end="405:28">src8</name> <operator pos:start="405:30" pos:end="405:30">=</operator> <name pos:start="405:32" pos:end="405:34">src</name> <operator pos:start="405:36" pos:end="405:36">+</operator> <name pos:start="405:38" pos:end="405:38">i</name><operator pos:start="405:39" pos:end="405:39">*</operator><literal type="number" pos:start="405:40" pos:end="405:40">5</literal></expr>;</init> <condition pos:start="405:43" pos:end="405:62"><expr pos:start="405:43" pos:end="405:61"><name pos:start="405:43" pos:end="405:43">c</name> <operator pos:start="405:45" pos:end="405:45">&lt;</operator> <name pos:start="405:47" pos:end="405:61"><name pos:start="405:47" pos:end="405:51">avctx</name><operator pos:start="405:52" pos:end="405:53">-&gt;</operator><name pos:start="405:54" pos:end="405:61">channels</name></name></expr>;</condition> <incr pos:start="405:64" pos:end="405:79"><expr pos:start="405:64" pos:end="405:66"><name pos:start="405:64" pos:end="405:64">c</name><operator pos:start="405:65" pos:end="405:66">++</operator></expr><operator pos:start="405:67" pos:end="405:67">,</operator> <expr pos:start="405:69" pos:end="405:79"><name pos:start="405:69" pos:end="405:72">src8</name> <operator pos:start="405:74" pos:end="405:75">+=</operator> <name pos:start="405:77" pos:end="405:77">n</name><operator pos:start="405:78" pos:end="405:78">*</operator><literal type="number" pos:start="405:79" pos:end="405:79">5</literal></expr></incr>)</control> <block pos:start="405:82" pos:end="413:13">{<block_content pos:start="409:17" pos:end="411:91">

                <comment type="line" pos:start="407:17" pos:end="407:60">//extract high 20 bits and expand to 32 bits</comment>

                <expr_stmt pos:start="409:17" pos:end="411:91"><expr pos:start="409:17" pos:end="411:90"><operator pos:start="409:17" pos:end="409:17">*</operator><name pos:start="409:18" pos:end="409:28">dst_int32_t</name><operator pos:start="409:29" pos:end="409:30">++</operator> <operator pos:start="409:32" pos:end="409:32">=</operator> <operator pos:start="409:34" pos:end="409:34">(</operator><name pos:start="409:35" pos:end="409:41"><name pos:start="409:35" pos:end="409:38">src8</name><index pos:start="409:39" pos:end="409:41">[<expr pos:start="409:40" pos:end="409:40"><literal type="number" pos:start="409:40" pos:end="409:40">4</literal></expr>]</index></name> <operator pos:start="409:43" pos:end="409:44">&lt;&lt;</operator> <literal type="number" pos:start="409:46" pos:end="409:47">24</literal><operator pos:start="409:48" pos:end="409:48">)</operator> <operator pos:start="409:50" pos:end="409:50">|</operator> <operator pos:start="409:52" pos:end="409:52">(</operator><name pos:start="409:53" pos:end="409:59"><name pos:start="409:53" pos:end="409:56">src8</name><index pos:start="409:57" pos:end="409:59">[<expr pos:start="409:58" pos:end="409:58"><literal type="number" pos:start="409:58" pos:end="409:58">3</literal></expr>]</index></name> <operator pos:start="409:61" pos:end="409:62">&lt;&lt;</operator> <literal type="number" pos:start="409:64" pos:end="409:65">16</literal><operator pos:start="409:66" pos:end="409:66">)</operator> <operator pos:start="409:68" pos:end="409:68">|</operator>

                                 <operator pos:start="411:34" pos:end="411:34">(</operator><operator pos:start="411:35" pos:end="411:35">(</operator><name pos:start="411:36" pos:end="411:42"><name pos:start="411:36" pos:end="411:39">src8</name><index pos:start="411:40" pos:end="411:42">[<expr pos:start="411:41" pos:end="411:41"><literal type="number" pos:start="411:41" pos:end="411:41">2</literal></expr>]</index></name> <operator pos:start="411:44" pos:end="411:44">&amp;</operator> <literal type="number" pos:start="411:46" pos:end="411:49">0xF0</literal><operator pos:start="411:50" pos:end="411:50">)</operator> <operator pos:start="411:52" pos:end="411:53">&lt;&lt;</operator> <literal type="number" pos:start="411:55" pos:end="411:55">8</literal><operator pos:start="411:56" pos:end="411:56">)</operator> <operator pos:start="411:58" pos:end="411:58">|</operator> <operator pos:start="411:60" pos:end="411:60">(</operator><name pos:start="411:61" pos:end="411:67"><name pos:start="411:61" pos:end="411:64">src8</name><index pos:start="411:65" pos:end="411:67">[<expr pos:start="411:66" pos:end="411:66"><literal type="number" pos:start="411:66" pos:end="411:66">4</literal></expr>]</index></name> <operator pos:start="411:69" pos:end="411:70">&lt;&lt;</operator> <literal type="number" pos:start="411:72" pos:end="411:72">4</literal><operator pos:start="411:73" pos:end="411:73">)</operator> <operator pos:start="411:75" pos:end="411:75">|</operator> <operator pos:start="411:77" pos:end="411:77">(</operator><name pos:start="411:78" pos:end="411:84"><name pos:start="411:78" pos:end="411:81">src8</name><index pos:start="411:82" pos:end="411:84">[<expr pos:start="411:83" pos:end="411:83"><literal type="number" pos:start="411:83" pos:end="411:83">3</literal></expr>]</index></name> <operator pos:start="411:86" pos:end="411:87">&gt;&gt;</operator> <literal type="number" pos:start="411:89" pos:end="411:89">4</literal><operator pos:start="411:90" pos:end="411:90">)</operator></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>

        <expr_stmt pos:start="417:9" pos:end="417:39"><expr pos:start="417:9" pos:end="417:38"><name pos:start="417:9" pos:end="417:11">src</name> <operator pos:start="417:13" pos:end="417:14">+=</operator> <name pos:start="417:16" pos:end="417:16">n</name> <operator pos:start="417:18" pos:end="417:18">*</operator> <name pos:start="417:20" pos:end="417:34"><name pos:start="417:20" pos:end="417:24">avctx</name><operator pos:start="417:25" pos:end="417:26">-&gt;</operator><name pos:start="417:27" pos:end="417:34">channels</name></name> <operator pos:start="417:36" pos:end="417:36">*</operator> <literal type="number" pos:start="417:38" pos:end="417:38">5</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="419:9" pos:end="419:40"><expr pos:start="419:9" pos:end="419:39"><name pos:start="419:9" pos:end="419:15">samples</name> <operator pos:start="419:17" pos:end="419:17">=</operator> <operator pos:start="419:19" pos:end="419:19">(</operator><name pos:start="419:20" pos:end="419:24">short</name> <operator pos:start="419:26" pos:end="419:26">*</operator><operator pos:start="419:27" pos:end="419:27">)</operator> <name pos:start="419:29" pos:end="419:39">dst_int32_t</name></expr>;</expr_stmt>

        <break pos:start="421:9" pos:end="421:14">break;</break>

    <default pos:start="423:5" pos:end="423:12">default:</default>

        <return pos:start="425:9" pos:end="425:18">return <expr pos:start="425:16" pos:end="425:17"><operator pos:start="425:16" pos:end="425:16">-</operator><literal type="number" pos:start="425:17" pos:end="425:17">1</literal></expr>;</return>

    </block_content>}</block></switch>

    <expr_stmt pos:start="429:5" pos:end="429:54"><expr pos:start="429:5" pos:end="429:53"><operator pos:start="429:5" pos:end="429:5">*</operator><name pos:start="429:6" pos:end="429:14">data_size</name> <operator pos:start="429:16" pos:end="429:16">=</operator> <operator pos:start="429:18" pos:end="429:18">(</operator><name pos:start="429:19" pos:end="429:25">uint8_t</name> <operator pos:start="429:27" pos:end="429:27">*</operator><operator pos:start="429:28" pos:end="429:28">)</operator><name pos:start="429:29" pos:end="429:35">samples</name> <operator pos:start="429:37" pos:end="429:37">-</operator> <operator pos:start="429:39" pos:end="429:39">(</operator><name pos:start="429:40" pos:end="429:46">uint8_t</name> <operator pos:start="429:48" pos:end="429:48">*</operator><operator pos:start="429:49" pos:end="429:49">)</operator><name pos:start="429:50" pos:end="429:53">data</name></expr>;</expr_stmt>

    <return pos:start="431:5" pos:end="431:21">return <expr pos:start="431:12" pos:end="431:20"><name pos:start="431:12" pos:end="431:14">src</name> <operator pos:start="431:16" pos:end="431:16">-</operator> <name pos:start="431:18" pos:end="431:20">buf</name></expr>;</return>

</block_content>}</block></function>
</unit>
