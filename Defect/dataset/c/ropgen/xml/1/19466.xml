<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19466.c" pos:tabs="8"><function pos:start="1:1" pos:end="200:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:25">pc_basic_device_init</name><parameter_list pos:start="1:26" pos:end="9:45">(<parameter pos:start="1:27" pos:end="1:41"><decl pos:start="1:27" pos:end="1:41"><type pos:start="1:27" pos:end="1:41"><name pos:start="1:27" pos:end="1:32">ISABus</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:41">isa_bus</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:56"><decl pos:start="1:44" pos:end="1:56"><type pos:start="1:44" pos:end="1:56"><name pos:start="1:44" pos:end="1:51">qemu_irq</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:56">gsi</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:47"><decl pos:start="3:27" pos:end="3:47"><type pos:start="3:27" pos:end="3:47"><name pos:start="3:27" pos:end="3:35">ISADevice</name> <modifier pos:start="3:37" pos:end="3:37">*</modifier><modifier pos:start="3:38" pos:end="3:38">*</modifier></type><name pos:start="3:39" pos:end="3:47">rtc_state</name></decl></parameter>,

                          <parameter pos:start="5:27" pos:end="5:44"><decl pos:start="5:27" pos:end="5:44"><type pos:start="5:27" pos:end="5:44"><name pos:start="5:27" pos:end="5:30">bool</name></type> <name pos:start="5:32" pos:end="5:44">create_fdctrl</name></decl></parameter>,

                          <parameter pos:start="7:27" pos:end="7:40"><decl pos:start="7:27" pos:end="7:40"><type pos:start="7:27" pos:end="7:40"><name pos:start="7:27" pos:end="7:30">bool</name></type> <name pos:start="7:32" pos:end="7:40">no_vmport</name></decl></parameter>,

                          <parameter pos:start="9:27" pos:end="9:44"><decl pos:start="9:27" pos:end="9:44"><type pos:start="9:27" pos:end="9:44"><name pos:start="9:27" pos:end="9:34">uint32_t</name></type> <name pos:start="9:36" pos:end="9:44">hpet_irqs</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="200:1">{<block_content pos:start="13:5" pos:end="198:5">

    <decl_stmt pos:start="13:5" pos:end="13:10"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:26"><decl pos:start="15:5" pos:end="15:25"><type pos:start="15:5" pos:end="15:15"><name pos:start="15:5" pos:end="15:13">DriveInfo</name> <modifier pos:start="15:15" pos:end="15:15">*</modifier></type><name pos:start="15:16" pos:end="15:25"><name pos:start="15:16" pos:end="15:17">fd</name><index pos:start="15:18" pos:end="15:25">[<expr pos:start="15:19" pos:end="15:24"><name pos:start="15:19" pos:end="15:24">MAX_FD</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:29"><decl pos:start="17:5" pos:end="17:28"><type pos:start="17:5" pos:end="17:17"><name pos:start="17:5" pos:end="17:15">DeviceState</name> <modifier pos:start="17:17" pos:end="17:17">*</modifier></type><name pos:start="17:18" pos:end="17:21">hpet</name> <init pos:start="17:23" pos:end="17:28">= <expr pos:start="17:25" pos:end="17:28"><name pos:start="17:25" pos:end="17:28">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:24"><decl pos:start="19:5" pos:end="19:23"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:19">pit_isa_irq</name> <init pos:start="19:21" pos:end="19:23">= <expr pos:start="19:23" pos:end="19:23"><literal type="number" pos:start="19:23" pos:end="19:23">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:32"><decl pos:start="21:5" pos:end="21:31"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">qemu_irq</name></type> <name pos:start="21:14" pos:end="21:24">pit_alt_irq</name> <init pos:start="21:26" pos:end="21:31">= <expr pos:start="21:28" pos:end="21:31"><name pos:start="21:28" pos:end="21:31">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:28"><decl pos:start="23:5" pos:end="23:27"><type pos:start="23:5" pos:end="23:12"><name pos:start="23:5" pos:end="23:12">qemu_irq</name></type> <name pos:start="23:14" pos:end="23:20">rtc_irq</name> <init pos:start="23:22" pos:end="23:27">= <expr pos:start="23:24" pos:end="23:27"><name pos:start="23:24" pos:end="23:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:23"><decl pos:start="25:5" pos:end="25:22"><type pos:start="25:5" pos:end="25:14"><name pos:start="25:5" pos:end="25:12">qemu_irq</name> <modifier pos:start="25:14" pos:end="25:14">*</modifier></type><name pos:start="25:15" pos:end="25:22">a20_line</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:53"><decl pos:start="27:5" pos:end="27:20"><type pos:start="27:5" pos:end="27:15"><name pos:start="27:5" pos:end="27:13">ISADevice</name> <modifier pos:start="27:15" pos:end="27:15">*</modifier></type><name pos:start="27:16" pos:end="27:20">i8042</name></decl>, <decl pos:start="27:23" pos:end="27:29"><type ref="prev" pos:start="27:5" pos:end="27:15"><modifier pos:start="27:23" pos:end="27:23">*</modifier></type><name pos:start="27:24" pos:end="27:29">port92</name></decl>, <decl pos:start="27:32" pos:end="27:39"><type ref="prev" pos:start="27:5" pos:end="27:15"><modifier pos:start="27:32" pos:end="27:32">*</modifier></type><name pos:start="27:33" pos:end="27:39">vmmouse</name></decl>, <decl pos:start="27:42" pos:end="27:52"><type ref="prev" pos:start="27:5" pos:end="27:15"><modifier pos:start="27:42" pos:end="27:42">*</modifier></type><name pos:start="27:43" pos:end="27:45">pit</name> <init pos:start="27:47" pos:end="27:52">= <expr pos:start="27:49" pos:end="27:52"><name pos:start="27:49" pos:end="27:52">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:55"><decl pos:start="29:5" pos:end="29:54"><type pos:start="29:5" pos:end="29:18"><name pos:start="29:5" pos:end="29:16">MemoryRegion</name> <modifier pos:start="29:18" pos:end="29:18">*</modifier></type><name pos:start="29:19" pos:end="29:29">ioport80_io</name> <init pos:start="29:31" pos:end="29:54">= <expr pos:start="29:33" pos:end="29:54"><call pos:start="29:33" pos:end="29:54"><name pos:start="29:33" pos:end="29:37">g_new</name><argument_list pos:start="29:38" pos:end="29:54">(<argument pos:start="29:39" pos:end="29:50"><expr pos:start="29:39" pos:end="29:50"><name pos:start="29:39" pos:end="29:50">MemoryRegion</name></expr></argument>, <argument pos:start="29:53" pos:end="29:53"><expr pos:start="29:53" pos:end="29:53"><literal type="number" pos:start="29:53" pos:end="29:53">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:55"><decl pos:start="31:5" pos:end="31:54"><type pos:start="31:5" pos:end="31:18"><name pos:start="31:5" pos:end="31:16">MemoryRegion</name> <modifier pos:start="31:18" pos:end="31:18">*</modifier></type><name pos:start="31:19" pos:end="31:29">ioportF0_io</name> <init pos:start="31:31" pos:end="31:54">= <expr pos:start="31:33" pos:end="31:54"><call pos:start="31:33" pos:end="31:54"><name pos:start="31:33" pos:end="31:37">g_new</name><argument_list pos:start="31:38" pos:end="31:54">(<argument pos:start="31:39" pos:end="31:50"><expr pos:start="31:39" pos:end="31:50"><name pos:start="31:39" pos:end="31:50">MemoryRegion</name></expr></argument>, <argument pos:start="31:53" pos:end="31:53"><expr pos:start="31:53" pos:end="31:53"><literal type="number" pos:start="31:53" pos:end="31:53">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:84"><expr pos:start="35:5" pos:end="35:83"><call pos:start="35:5" pos:end="35:83"><name pos:start="35:5" pos:end="35:25">memory_region_init_io</name><argument_list pos:start="35:26" pos:end="35:83">(<argument pos:start="35:27" pos:end="35:37"><expr pos:start="35:27" pos:end="35:37"><name pos:start="35:27" pos:end="35:37">ioport80_io</name></expr></argument>, <argument pos:start="35:40" pos:end="35:43"><expr pos:start="35:40" pos:end="35:43"><name pos:start="35:40" pos:end="35:43">NULL</name></expr></argument>, <argument pos:start="35:46" pos:end="35:61"><expr pos:start="35:46" pos:end="35:61"><operator pos:start="35:46" pos:end="35:46">&amp;</operator><name pos:start="35:47" pos:end="35:61">ioport80_io_ops</name></expr></argument>, <argument pos:start="35:64" pos:end="35:67"><expr pos:start="35:64" pos:end="35:67"><name pos:start="35:64" pos:end="35:67">NULL</name></expr></argument>, <argument pos:start="35:70" pos:end="35:79"><expr pos:start="35:70" pos:end="35:79"><literal type="string" pos:start="35:70" pos:end="35:79">"ioport80"</literal></expr></argument>, <argument pos:start="35:82" pos:end="35:82"><expr pos:start="35:82" pos:end="35:82"><literal type="number" pos:start="35:82" pos:end="35:82">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:78"><expr pos:start="37:5" pos:end="37:77"><call pos:start="37:5" pos:end="37:77"><name pos:start="37:5" pos:end="37:31">memory_region_add_subregion</name><argument_list pos:start="37:32" pos:end="37:77">(<argument pos:start="37:33" pos:end="37:57"><expr pos:start="37:33" pos:end="37:57"><name pos:start="37:33" pos:end="37:57"><name pos:start="37:33" pos:end="37:39">isa_bus</name><operator pos:start="37:40" pos:end="37:41">-&gt;</operator><name pos:start="37:42" pos:end="37:57">address_space_io</name></name></expr></argument>, <argument pos:start="37:60" pos:end="37:63"><expr pos:start="37:60" pos:end="37:63"><literal type="number" pos:start="37:60" pos:end="37:63">0x80</literal></expr></argument>, <argument pos:start="37:66" pos:end="37:76"><expr pos:start="37:66" pos:end="37:76"><name pos:start="37:66" pos:end="37:76">ioport80_io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:84"><expr pos:start="41:5" pos:end="41:83"><call pos:start="41:5" pos:end="41:83"><name pos:start="41:5" pos:end="41:25">memory_region_init_io</name><argument_list pos:start="41:26" pos:end="41:83">(<argument pos:start="41:27" pos:end="41:37"><expr pos:start="41:27" pos:end="41:37"><name pos:start="41:27" pos:end="41:37">ioportF0_io</name></expr></argument>, <argument pos:start="41:40" pos:end="41:43"><expr pos:start="41:40" pos:end="41:43"><name pos:start="41:40" pos:end="41:43">NULL</name></expr></argument>, <argument pos:start="41:46" pos:end="41:61"><expr pos:start="41:46" pos:end="41:61"><operator pos:start="41:46" pos:end="41:46">&amp;</operator><name pos:start="41:47" pos:end="41:61">ioportF0_io_ops</name></expr></argument>, <argument pos:start="41:64" pos:end="41:67"><expr pos:start="41:64" pos:end="41:67"><name pos:start="41:64" pos:end="41:67">NULL</name></expr></argument>, <argument pos:start="41:70" pos:end="41:79"><expr pos:start="41:70" pos:end="41:79"><literal type="string" pos:start="41:70" pos:end="41:79">"ioportF0"</literal></expr></argument>, <argument pos:start="41:82" pos:end="41:82"><expr pos:start="41:82" pos:end="41:82"><literal type="number" pos:start="41:82" pos:end="41:82">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:78"><expr pos:start="43:5" pos:end="43:77"><call pos:start="43:5" pos:end="43:77"><name pos:start="43:5" pos:end="43:31">memory_region_add_subregion</name><argument_list pos:start="43:32" pos:end="43:77">(<argument pos:start="43:33" pos:end="43:57"><expr pos:start="43:33" pos:end="43:57"><name pos:start="43:33" pos:end="43:57"><name pos:start="43:33" pos:end="43:39">isa_bus</name><operator pos:start="43:40" pos:end="43:41">-&gt;</operator><name pos:start="43:42" pos:end="43:57">address_space_io</name></name></expr></argument>, <argument pos:start="43:60" pos:end="43:63"><expr pos:start="43:60" pos:end="43:63"><literal type="number" pos:start="43:60" pos:end="43:63">0xf0</literal></expr></argument>, <argument pos:start="43:66" pos:end="43:76"><expr pos:start="43:66" pos:end="43:76"><name pos:start="43:66" pos:end="43:76">ioportF0_io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="47:5" pos:end="57:7">/*

     * Check if an HPET shall be created.

     *

     * Without KVM_CAP_PIT_STATE2, we cannot switch off the in-kernel PIT

     * when the HPET wants to take over. Thus we have to disable the latter.

     */</comment>

    <if_stmt pos:start="59:5" pos:end="105:5"><if pos:start="59:5" pos:end="105:5">if <condition pos:start="59:8" pos:end="59:71">(<expr pos:start="59:9" pos:end="59:70"><operator pos:start="59:9" pos:end="59:9">!</operator><name pos:start="59:10" pos:end="59:16">no_hpet</name> <operator pos:start="59:18" pos:end="59:19">&amp;&amp;</operator> <operator pos:start="59:21" pos:end="59:21">(</operator><operator pos:start="59:22" pos:end="59:22">!</operator><call pos:start="59:23" pos:end="59:45"><name pos:start="59:23" pos:end="59:43">kvm_irqchip_in_kernel</name><argument_list pos:start="59:44" pos:end="59:45">()</argument_list></call> <operator pos:start="59:47" pos:end="59:48">||</operator> <call pos:start="59:50" pos:end="59:69"><name pos:start="59:50" pos:end="59:67">kvm_has_pit_state2</name><argument_list pos:start="59:68" pos:end="59:69">()</argument_list></call><operator pos:start="59:70" pos:end="59:70">)</operator></expr>)</condition> <block pos:start="59:73" pos:end="105:5">{<block_content pos:start="63:9" pos:end="103:9">

        <comment type="block" pos:start="61:9" pos:end="61:79">/* In order to set property, here not using sysbus_try_create_simple */</comment>

        <expr_stmt pos:start="63:9" pos:end="63:48"><expr pos:start="63:9" pos:end="63:47"><name pos:start="63:9" pos:end="63:12">hpet</name> <operator pos:start="63:14" pos:end="63:14">=</operator> <call pos:start="63:16" pos:end="63:47"><name pos:start="63:16" pos:end="63:30">qdev_try_create</name><argument_list pos:start="63:31" pos:end="63:47">(<argument pos:start="63:32" pos:end="63:35"><expr pos:start="63:32" pos:end="63:35"><name pos:start="63:32" pos:end="63:35">NULL</name></expr></argument>, <argument pos:start="63:38" pos:end="63:46"><expr pos:start="63:38" pos:end="63:46"><name pos:start="63:38" pos:end="63:46">TYPE_HPET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="65:9" pos:end="103:9"><if pos:start="65:9" pos:end="103:9">if <condition pos:start="65:12" pos:end="65:17">(<expr pos:start="65:13" pos:end="65:16"><name pos:start="65:13" pos:end="65:16">hpet</name></expr>)</condition> <block pos:start="65:19" pos:end="103:9">{<block_content pos:start="75:13" pos:end="101:66">

            <comment type="block" pos:start="67:13" pos:end="73:15">/* For pc-piix-*, hpet's intcap is always IRQ2. For pc-q35-1.7

             * and earlier, use IRQ2 for compat. Otherwise, use IRQ16~23,

             * IRQ8 and IRQ2.

             */</comment>

            <decl_stmt pos:start="75:13" pos:end="77:39"><decl pos:start="75:13" pos:end="77:38"><type pos:start="75:13" pos:end="75:19"><name pos:start="75:13" pos:end="75:19">uint8_t</name></type> <name pos:start="75:21" pos:end="75:26">compat</name> <init pos:start="75:28" pos:end="77:38">= <expr pos:start="75:30" pos:end="77:38"><call pos:start="75:30" pos:end="77:38"><name pos:start="75:30" pos:end="75:52">object_property_get_int</name><argument_list pos:start="75:53" pos:end="77:38">(<argument pos:start="75:54" pos:end="75:65"><expr pos:start="75:54" pos:end="75:65"><call pos:start="75:54" pos:end="75:65"><name pos:start="75:54" pos:end="75:59">OBJECT</name><argument_list pos:start="75:60" pos:end="75:65">(<argument pos:start="75:61" pos:end="75:64"><expr pos:start="75:61" pos:end="75:64"><name pos:start="75:61" pos:end="75:64">hpet</name></expr></argument>)</argument_list></call></expr></argument>,

                    <argument pos:start="77:21" pos:end="77:31"><expr pos:start="77:21" pos:end="77:31"><name pos:start="77:21" pos:end="77:31">HPET_INTCAP</name></expr></argument>, <argument pos:start="77:34" pos:end="77:37"><expr pos:start="77:34" pos:end="77:37"><name pos:start="77:34" pos:end="77:37">NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="79:13" pos:end="83:13"><if pos:start="79:13" pos:end="83:13">if <condition pos:start="79:16" pos:end="79:24">(<expr pos:start="79:17" pos:end="79:23"><operator pos:start="79:17" pos:end="79:17">!</operator><name pos:start="79:18" pos:end="79:23">compat</name></expr>)</condition> <block pos:start="79:26" pos:end="83:13">{<block_content pos:start="81:17" pos:end="81:67">

                <expr_stmt pos:start="81:17" pos:end="81:67"><expr pos:start="81:17" pos:end="81:66"><call pos:start="81:17" pos:end="81:66"><name pos:start="81:17" pos:end="81:36">qdev_prop_set_uint32</name><argument_list pos:start="81:37" pos:end="81:66">(<argument pos:start="81:38" pos:end="81:41"><expr pos:start="81:38" pos:end="81:41"><name pos:start="81:38" pos:end="81:41">hpet</name></expr></argument>, <argument pos:start="81:44" pos:end="81:54"><expr pos:start="81:44" pos:end="81:54"><name pos:start="81:44" pos:end="81:54">HPET_INTCAP</name></expr></argument>, <argument pos:start="81:57" pos:end="81:65"><expr pos:start="81:57" pos:end="81:65"><name pos:start="81:57" pos:end="81:65">hpet_irqs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:35"><expr pos:start="85:13" pos:end="85:34"><call pos:start="85:13" pos:end="85:34"><name pos:start="85:13" pos:end="85:28">qdev_init_nofail</name><argument_list pos:start="85:29" pos:end="85:34">(<argument pos:start="85:30" pos:end="85:33"><expr pos:start="85:30" pos:end="85:33"><name pos:start="85:30" pos:end="85:33">hpet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:64"><expr pos:start="87:13" pos:end="87:63"><call pos:start="87:13" pos:end="87:63"><name pos:start="87:13" pos:end="87:27">sysbus_mmio_map</name><argument_list pos:start="87:28" pos:end="87:63">(<argument pos:start="87:29" pos:end="87:48"><expr pos:start="87:29" pos:end="87:48"><call pos:start="87:29" pos:end="87:48"><name pos:start="87:29" pos:end="87:42">SYS_BUS_DEVICE</name><argument_list pos:start="87:43" pos:end="87:48">(<argument pos:start="87:44" pos:end="87:47"><expr pos:start="87:44" pos:end="87:47"><name pos:start="87:44" pos:end="87:47">hpet</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="87:51" pos:end="87:51"><expr pos:start="87:51" pos:end="87:51"><literal type="number" pos:start="87:51" pos:end="87:51">0</literal></expr></argument>, <argument pos:start="87:54" pos:end="87:62"><expr pos:start="87:54" pos:end="87:62"><name pos:start="87:54" pos:end="87:62">HPET_BASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <for pos:start="91:13" pos:end="95:13">for <control pos:start="91:17" pos:end="91:46">(<init pos:start="91:18" pos:end="91:23"><expr pos:start="91:18" pos:end="91:22"><name pos:start="91:18" pos:end="91:18">i</name> <operator pos:start="91:20" pos:end="91:20">=</operator> <literal type="number" pos:start="91:22" pos:end="91:22">0</literal></expr>;</init> <condition pos:start="91:25" pos:end="91:41"><expr pos:start="91:25" pos:end="91:40"><name pos:start="91:25" pos:end="91:25">i</name> <operator pos:start="91:27" pos:end="91:27">&lt;</operator> <name pos:start="91:29" pos:end="91:40">GSI_NUM_PINS</name></expr>;</condition> <incr pos:start="91:43" pos:end="91:45"><expr pos:start="91:43" pos:end="91:45"><name pos:start="91:43" pos:end="91:43">i</name><operator pos:start="91:44" pos:end="91:45">++</operator></expr></incr>)</control> <block pos:start="91:48" pos:end="95:13">{<block_content pos:start="93:17" pos:end="93:68">

                <expr_stmt pos:start="93:17" pos:end="93:68"><expr pos:start="93:17" pos:end="93:67"><call pos:start="93:17" pos:end="93:67"><name pos:start="93:17" pos:end="93:34">sysbus_connect_irq</name><argument_list pos:start="93:35" pos:end="93:67">(<argument pos:start="93:36" pos:end="93:55"><expr pos:start="93:36" pos:end="93:55"><call pos:start="93:36" pos:end="93:55"><name pos:start="93:36" pos:end="93:49">SYS_BUS_DEVICE</name><argument_list pos:start="93:50" pos:end="93:55">(<argument pos:start="93:51" pos:end="93:54"><expr pos:start="93:51" pos:end="93:54"><name pos:start="93:51" pos:end="93:54">hpet</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="93:58" pos:end="93:58"><expr pos:start="93:58" pos:end="93:58"><name pos:start="93:58" pos:end="93:58">i</name></expr></argument>, <argument pos:start="93:61" pos:end="93:66"><expr pos:start="93:61" pos:end="93:66"><name pos:start="93:61" pos:end="93:66"><name pos:start="93:61" pos:end="93:63">gsi</name><index pos:start="93:64" pos:end="93:66">[<expr pos:start="93:65" pos:end="93:65"><name pos:start="93:65" pos:end="93:65">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="97:13" pos:end="97:29"><expr pos:start="97:13" pos:end="97:28"><name pos:start="97:13" pos:end="97:23">pit_isa_irq</name> <operator pos:start="97:25" pos:end="97:25">=</operator> <operator pos:start="97:27" pos:end="97:27">-</operator><literal type="number" pos:start="97:28" pos:end="97:28">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:70"><expr pos:start="99:13" pos:end="99:69"><name pos:start="99:13" pos:end="99:23">pit_alt_irq</name> <operator pos:start="99:25" pos:end="99:25">=</operator> <call pos:start="99:27" pos:end="99:69"><name pos:start="99:27" pos:end="99:42">qdev_get_gpio_in</name><argument_list pos:start="99:43" pos:end="99:69">(<argument pos:start="99:44" pos:end="99:47"><expr pos:start="99:44" pos:end="99:47"><name pos:start="99:44" pos:end="99:47">hpet</name></expr></argument>, <argument pos:start="99:50" pos:end="99:68"><expr pos:start="99:50" pos:end="99:68"><name pos:start="99:50" pos:end="99:68">HPET_LEGACY_PIT_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:66"><expr pos:start="101:13" pos:end="101:65"><name pos:start="101:13" pos:end="101:19">rtc_irq</name> <operator pos:start="101:21" pos:end="101:21">=</operator> <call pos:start="101:23" pos:end="101:65"><name pos:start="101:23" pos:end="101:38">qdev_get_gpio_in</name><argument_list pos:start="101:39" pos:end="101:65">(<argument pos:start="101:40" pos:end="101:43"><expr pos:start="101:40" pos:end="101:43"><name pos:start="101:40" pos:end="101:43">hpet</name></expr></argument>, <argument pos:start="101:46" pos:end="101:64"><expr pos:start="101:46" pos:end="101:64"><name pos:start="101:46" pos:end="101:64">HPET_LEGACY_RTC_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:50"><expr pos:start="107:5" pos:end="107:49"><operator pos:start="107:5" pos:end="107:5">*</operator><name pos:start="107:6" pos:end="107:14">rtc_state</name> <operator pos:start="107:16" pos:end="107:16">=</operator> <call pos:start="107:18" pos:end="107:49"><name pos:start="107:18" pos:end="107:25">rtc_init</name><argument_list pos:start="107:26" pos:end="107:49">(<argument pos:start="107:27" pos:end="107:33"><expr pos:start="107:27" pos:end="107:33"><name pos:start="107:27" pos:end="107:33">isa_bus</name></expr></argument>, <argument pos:start="107:36" pos:end="107:39"><expr pos:start="107:36" pos:end="107:39"><literal type="number" pos:start="107:36" pos:end="107:39">2000</literal></expr></argument>, <argument pos:start="107:42" pos:end="107:48"><expr pos:start="107:42" pos:end="107:48"><name pos:start="107:42" pos:end="107:48">rtc_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="111:5" pos:end="111:52"><expr pos:start="111:5" pos:end="111:51"><call pos:start="111:5" pos:end="111:51"><name pos:start="111:5" pos:end="111:26">qemu_register_boot_set</name><argument_list pos:start="111:27" pos:end="111:51">(<argument pos:start="111:28" pos:end="111:38"><expr pos:start="111:28" pos:end="111:38"><name pos:start="111:28" pos:end="111:38">pc_boot_set</name></expr></argument>, <argument pos:start="111:41" pos:end="111:50"><expr pos:start="111:41" pos:end="111:50"><operator pos:start="111:41" pos:end="111:41">*</operator><name pos:start="111:42" pos:end="111:50">rtc_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="115:5" pos:end="137:5"><if pos:start="115:5" pos:end="137:5">if <condition pos:start="115:8" pos:end="115:23">(<expr pos:start="115:9" pos:end="115:22"><operator pos:start="115:9" pos:end="115:9">!</operator><call pos:start="115:10" pos:end="115:22"><name pos:start="115:10" pos:end="115:20">xen_enabled</name><argument_list pos:start="115:21" pos:end="115:22">()</argument_list></call></expr>)</condition> <block pos:start="115:25" pos:end="137:5">{<block_content pos:start="117:9" pos:end="135:33">

        <if_stmt pos:start="117:9" pos:end="125:9"><if pos:start="117:9" pos:end="121:9">if <condition pos:start="117:12" pos:end="117:32">(<expr pos:start="117:13" pos:end="117:31"><call pos:start="117:13" pos:end="117:31"><name pos:start="117:13" pos:end="117:29">kvm_pit_in_kernel</name><argument_list pos:start="117:30" pos:end="117:31">()</argument_list></call></expr>)</condition> <block pos:start="117:34" pos:end="121:9">{<block_content pos:start="119:13" pos:end="119:46">

            <expr_stmt pos:start="119:13" pos:end="119:46"><expr pos:start="119:13" pos:end="119:45"><name pos:start="119:13" pos:end="119:15">pit</name> <operator pos:start="119:17" pos:end="119:17">=</operator> <call pos:start="119:19" pos:end="119:45"><name pos:start="119:19" pos:end="119:30">kvm_pit_init</name><argument_list pos:start="119:31" pos:end="119:45">(<argument pos:start="119:32" pos:end="119:38"><expr pos:start="119:32" pos:end="119:38"><name pos:start="119:32" pos:end="119:38">isa_bus</name></expr></argument>, <argument pos:start="119:41" pos:end="119:44"><expr pos:start="119:41" pos:end="119:44"><literal type="number" pos:start="119:41" pos:end="119:44">0x40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="121:11" pos:end="125:9">else <block pos:start="121:16" pos:end="125:9">{<block_content pos:start="123:13" pos:end="123:68">

            <expr_stmt pos:start="123:13" pos:end="123:68"><expr pos:start="123:13" pos:end="123:67"><name pos:start="123:13" pos:end="123:15">pit</name> <operator pos:start="123:17" pos:end="123:17">=</operator> <call pos:start="123:19" pos:end="123:67"><name pos:start="123:19" pos:end="123:26">pit_init</name><argument_list pos:start="123:27" pos:end="123:67">(<argument pos:start="123:28" pos:end="123:34"><expr pos:start="123:28" pos:end="123:34"><name pos:start="123:28" pos:end="123:34">isa_bus</name></expr></argument>, <argument pos:start="123:37" pos:end="123:40"><expr pos:start="123:37" pos:end="123:40"><literal type="number" pos:start="123:37" pos:end="123:40">0x40</literal></expr></argument>, <argument pos:start="123:43" pos:end="123:53"><expr pos:start="123:43" pos:end="123:53"><name pos:start="123:43" pos:end="123:53">pit_isa_irq</name></expr></argument>, <argument pos:start="123:56" pos:end="123:66"><expr pos:start="123:56" pos:end="123:66"><name pos:start="123:56" pos:end="123:66">pit_alt_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="127:9" pos:end="133:9"><if pos:start="127:9" pos:end="133:9">if <condition pos:start="127:12" pos:end="127:17">(<expr pos:start="127:13" pos:end="127:16"><name pos:start="127:13" pos:end="127:16">hpet</name></expr>)</condition> <block pos:start="127:19" pos:end="133:9">{<block_content pos:start="131:13" pos:end="131:77">

            <comment type="block" pos:start="129:13" pos:end="129:64">/* connect PIT to output control line of the HPET */</comment>

            <expr_stmt pos:start="131:13" pos:end="131:77"><expr pos:start="131:13" pos:end="131:76"><call pos:start="131:13" pos:end="131:76"><name pos:start="131:13" pos:end="131:33">qdev_connect_gpio_out</name><argument_list pos:start="131:34" pos:end="131:76">(<argument pos:start="131:35" pos:end="131:38"><expr pos:start="131:35" pos:end="131:38"><name pos:start="131:35" pos:end="131:38">hpet</name></expr></argument>, <argument pos:start="131:41" pos:end="131:41"><expr pos:start="131:41" pos:end="131:41"><literal type="number" pos:start="131:41" pos:end="131:41">0</literal></expr></argument>, <argument pos:start="131:44" pos:end="131:75"><expr pos:start="131:44" pos:end="131:75"><call pos:start="131:44" pos:end="131:75"><name pos:start="131:44" pos:end="131:59">qdev_get_gpio_in</name><argument_list pos:start="131:60" pos:end="131:75">(<argument pos:start="131:61" pos:end="131:71"><expr pos:start="131:61" pos:end="131:71"><call pos:start="131:61" pos:end="131:71"><name pos:start="131:61" pos:end="131:66">DEVICE</name><argument_list pos:start="131:67" pos:end="131:71">(<argument pos:start="131:68" pos:end="131:70"><expr pos:start="131:68" pos:end="131:70"><name pos:start="131:68" pos:end="131:70">pit</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="131:74" pos:end="131:74"><expr pos:start="131:74" pos:end="131:74"><literal type="number" pos:start="131:74" pos:end="131:74">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:33"><expr pos:start="135:9" pos:end="135:32"><call pos:start="135:9" pos:end="135:32"><name pos:start="135:9" pos:end="135:18">pcspk_init</name><argument_list pos:start="135:19" pos:end="135:32">(<argument pos:start="135:20" pos:end="135:26"><expr pos:start="135:20" pos:end="135:26"><name pos:start="135:20" pos:end="135:26">isa_bus</name></expr></argument>, <argument pos:start="135:29" pos:end="135:31"><expr pos:start="135:29" pos:end="135:31"><name pos:start="135:29" pos:end="135:31">pit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="141:5" pos:end="141:51"><expr pos:start="141:5" pos:end="141:50"><call pos:start="141:5" pos:end="141:50"><name pos:start="141:5" pos:end="141:23">serial_hds_isa_init</name><argument_list pos:start="141:24" pos:end="141:50">(<argument pos:start="141:25" pos:end="141:31"><expr pos:start="141:25" pos:end="141:31"><name pos:start="141:25" pos:end="141:31">isa_bus</name></expr></argument>, <argument pos:start="141:34" pos:end="141:49"><expr pos:start="141:34" pos:end="141:49"><name pos:start="141:34" pos:end="141:49">MAX_SERIAL_PORTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="143:5" pos:end="143:55"><expr pos:start="143:5" pos:end="143:54"><call pos:start="143:5" pos:end="143:54"><name pos:start="143:5" pos:end="143:25">parallel_hds_isa_init</name><argument_list pos:start="143:26" pos:end="143:54">(<argument pos:start="143:27" pos:end="143:33"><expr pos:start="143:27" pos:end="143:33"><name pos:start="143:27" pos:end="143:33">isa_bus</name></expr></argument>, <argument pos:start="143:36" pos:end="143:53"><expr pos:start="143:36" pos:end="143:53"><name pos:start="143:36" pos:end="143:53">MAX_PARALLEL_PORTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="147:5" pos:end="147:72"><expr pos:start="147:5" pos:end="147:71"><name pos:start="147:5" pos:end="147:12">a20_line</name> <operator pos:start="147:14" pos:end="147:14">=</operator> <call pos:start="147:16" pos:end="147:71"><name pos:start="147:16" pos:end="147:33">qemu_allocate_irqs</name><argument_list pos:start="147:34" pos:end="147:71">(<argument pos:start="147:35" pos:end="147:56"><expr pos:start="147:35" pos:end="147:56"><name pos:start="147:35" pos:end="147:56">handle_a20_line_change</name></expr></argument>, <argument pos:start="147:59" pos:end="147:67"><expr pos:start="147:59" pos:end="147:67"><name pos:start="147:59" pos:end="147:67">first_cpu</name></expr></argument>, <argument pos:start="147:70" pos:end="147:70"><expr pos:start="147:70" pos:end="147:70"><literal type="number" pos:start="147:70" pos:end="147:70">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="149:5" pos:end="149:48"><expr pos:start="149:5" pos:end="149:47"><name pos:start="149:5" pos:end="149:9">i8042</name> <operator pos:start="149:11" pos:end="149:11">=</operator> <call pos:start="149:13" pos:end="149:47"><name pos:start="149:13" pos:end="149:29">isa_create_simple</name><argument_list pos:start="149:30" pos:end="149:47">(<argument pos:start="149:31" pos:end="149:37"><expr pos:start="149:31" pos:end="149:37"><name pos:start="149:31" pos:end="149:37">isa_bus</name></expr></argument>, <argument pos:start="149:40" pos:end="149:46"><expr pos:start="149:40" pos:end="149:46"><literal type="string" pos:start="149:40" pos:end="149:46">"i8042"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="151:5" pos:end="151:45"><expr pos:start="151:5" pos:end="151:44"><call pos:start="151:5" pos:end="151:44"><name pos:start="151:5" pos:end="151:24">i8042_setup_a20_line</name><argument_list pos:start="151:25" pos:end="151:44">(<argument pos:start="151:26" pos:end="151:30"><expr pos:start="151:26" pos:end="151:30"><name pos:start="151:26" pos:end="151:30">i8042</name></expr></argument>, <argument pos:start="151:33" pos:end="151:43"><expr pos:start="151:33" pos:end="151:43"><name pos:start="151:33" pos:end="151:43"><name pos:start="151:33" pos:end="151:40">a20_line</name><index pos:start="151:41" pos:end="151:43">[<expr pos:start="151:42" pos:end="151:42"><literal type="number" pos:start="151:42" pos:end="151:42">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="153:5" pos:end="163:5"><if pos:start="153:5" pos:end="159:5">if <condition pos:start="153:8" pos:end="153:19">(<expr pos:start="153:9" pos:end="153:18"><operator pos:start="153:9" pos:end="153:9">!</operator><name pos:start="153:10" pos:end="153:18">no_vmport</name></expr>)</condition> <block pos:start="153:21" pos:end="159:5">{<block_content pos:start="155:9" pos:end="157:53">

        <expr_stmt pos:start="155:9" pos:end="155:29"><expr pos:start="155:9" pos:end="155:28"><call pos:start="155:9" pos:end="155:28"><name pos:start="155:9" pos:end="155:19">vmport_init</name><argument_list pos:start="155:20" pos:end="155:28">(<argument pos:start="155:21" pos:end="155:27"><expr pos:start="155:21" pos:end="155:27"><name pos:start="155:21" pos:end="155:27">isa_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="157:9" pos:end="157:53"><expr pos:start="157:9" pos:end="157:52"><name pos:start="157:9" pos:end="157:15">vmmouse</name> <operator pos:start="157:17" pos:end="157:17">=</operator> <call pos:start="157:19" pos:end="157:52"><name pos:start="157:19" pos:end="157:32">isa_try_create</name><argument_list pos:start="157:33" pos:end="157:52">(<argument pos:start="157:34" pos:end="157:40"><expr pos:start="157:34" pos:end="157:40"><name pos:start="157:34" pos:end="157:40">isa_bus</name></expr></argument>, <argument pos:start="157:43" pos:end="157:51"><expr pos:start="157:43" pos:end="157:51"><literal type="string" pos:start="157:43" pos:end="157:51">"vmmouse"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="159:7" pos:end="163:5">else <block pos:start="159:12" pos:end="163:5">{<block_content pos:start="161:9" pos:end="161:23">

        <expr_stmt pos:start="161:9" pos:end="161:23"><expr pos:start="161:9" pos:end="161:22"><name pos:start="161:9" pos:end="161:15">vmmouse</name> <operator pos:start="161:17" pos:end="161:17">=</operator> <name pos:start="161:19" pos:end="161:22">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="165:5" pos:end="173:5"><if pos:start="165:5" pos:end="173:5">if <condition pos:start="165:8" pos:end="165:16">(<expr pos:start="165:9" pos:end="165:15"><name pos:start="165:9" pos:end="165:15">vmmouse</name></expr>)</condition> <block pos:start="165:18" pos:end="173:5">{<block_content pos:start="167:9" pos:end="171:30">

        <decl_stmt pos:start="167:9" pos:end="167:43"><decl pos:start="167:9" pos:end="167:42"><type pos:start="167:9" pos:end="167:21"><name pos:start="167:9" pos:end="167:19">DeviceState</name> <modifier pos:start="167:21" pos:end="167:21">*</modifier></type><name pos:start="167:22" pos:end="167:24">dev</name> <init pos:start="167:26" pos:end="167:42">= <expr pos:start="167:28" pos:end="167:42"><call pos:start="167:28" pos:end="167:42"><name pos:start="167:28" pos:end="167:33">DEVICE</name><argument_list pos:start="167:34" pos:end="167:42">(<argument pos:start="167:35" pos:end="167:41"><expr pos:start="167:35" pos:end="167:41"><name pos:start="167:35" pos:end="167:41">vmmouse</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="169:9" pos:end="169:51"><expr pos:start="169:9" pos:end="169:50"><call pos:start="169:9" pos:end="169:50"><name pos:start="169:9" pos:end="169:25">qdev_prop_set_ptr</name><argument_list pos:start="169:26" pos:end="169:50">(<argument pos:start="169:27" pos:end="169:29"><expr pos:start="169:27" pos:end="169:29"><name pos:start="169:27" pos:end="169:29">dev</name></expr></argument>, <argument pos:start="169:32" pos:end="169:42"><expr pos:start="169:32" pos:end="169:42"><literal type="string" pos:start="169:32" pos:end="169:42">"ps2_mouse"</literal></expr></argument>, <argument pos:start="169:45" pos:end="169:49"><expr pos:start="169:45" pos:end="169:49"><name pos:start="169:45" pos:end="169:49">i8042</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:30"><expr pos:start="171:9" pos:end="171:29"><call pos:start="171:9" pos:end="171:29"><name pos:start="171:9" pos:end="171:24">qdev_init_nofail</name><argument_list pos:start="171:25" pos:end="171:29">(<argument pos:start="171:26" pos:end="171:28"><expr pos:start="171:26" pos:end="171:28"><name pos:start="171:26" pos:end="171:28">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="175:5" pos:end="175:50"><expr pos:start="175:5" pos:end="175:49"><name pos:start="175:5" pos:end="175:10">port92</name> <operator pos:start="175:12" pos:end="175:12">=</operator> <call pos:start="175:14" pos:end="175:49"><name pos:start="175:14" pos:end="175:30">isa_create_simple</name><argument_list pos:start="175:31" pos:end="175:49">(<argument pos:start="175:32" pos:end="175:38"><expr pos:start="175:32" pos:end="175:38"><name pos:start="175:32" pos:end="175:38">isa_bus</name></expr></argument>, <argument pos:start="175:41" pos:end="175:48"><expr pos:start="175:41" pos:end="175:48"><literal type="string" pos:start="175:41" pos:end="175:48">"port92"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="177:5" pos:end="177:37"><expr pos:start="177:5" pos:end="177:36"><call pos:start="177:5" pos:end="177:36"><name pos:start="177:5" pos:end="177:15">port92_init</name><argument_list pos:start="177:16" pos:end="177:36">(<argument pos:start="177:17" pos:end="177:22"><expr pos:start="177:17" pos:end="177:22"><name pos:start="177:17" pos:end="177:22">port92</name></expr></argument>, <argument pos:start="177:25" pos:end="177:35"><expr pos:start="177:25" pos:end="177:35"><name pos:start="177:25" pos:end="177:35"><name pos:start="177:25" pos:end="177:32">a20_line</name><index pos:start="177:33" pos:end="177:35">[<expr pos:start="177:34" pos:end="177:34"><literal type="number" pos:start="177:34" pos:end="177:34">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




    <expr_stmt pos:start="182:5" pos:end="182:25"><expr pos:start="182:5" pos:end="182:24"><call pos:start="182:5" pos:end="182:24"><name pos:start="182:5" pos:end="182:12">DMA_init</name><argument_list pos:start="182:13" pos:end="182:24">(<argument pos:start="182:14" pos:end="182:20"><expr pos:start="182:14" pos:end="182:20"><name pos:start="182:14" pos:end="182:20">isa_bus</name></expr></argument>, <argument pos:start="182:23" pos:end="182:23"><expr pos:start="182:23" pos:end="182:23"><literal type="number" pos:start="182:23" pos:end="182:23">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="186:5" pos:end="192:5">for<control pos:start="186:8" pos:end="186:31">(<init pos:start="186:9" pos:end="186:14"><expr pos:start="186:9" pos:end="186:13"><name pos:start="186:9" pos:end="186:9">i</name> <operator pos:start="186:11" pos:end="186:11">=</operator> <literal type="number" pos:start="186:13" pos:end="186:13">0</literal></expr>;</init> <condition pos:start="186:16" pos:end="186:26"><expr pos:start="186:16" pos:end="186:25"><name pos:start="186:16" pos:end="186:16">i</name> <operator pos:start="186:18" pos:end="186:18">&lt;</operator> <name pos:start="186:20" pos:end="186:25">MAX_FD</name></expr>;</condition> <incr pos:start="186:28" pos:end="186:30"><expr pos:start="186:28" pos:end="186:30"><name pos:start="186:28" pos:end="186:28">i</name><operator pos:start="186:29" pos:end="186:30">++</operator></expr></incr>)</control> <block pos:start="186:33" pos:end="192:5">{<block_content pos:start="188:9" pos:end="190:33">

        <expr_stmt pos:start="188:9" pos:end="188:43"><expr pos:start="188:9" pos:end="188:42"><name pos:start="188:9" pos:end="188:13"><name pos:start="188:9" pos:end="188:10">fd</name><index pos:start="188:11" pos:end="188:13">[<expr pos:start="188:12" pos:end="188:12"><name pos:start="188:12" pos:end="188:12">i</name></expr>]</index></name> <operator pos:start="188:15" pos:end="188:15">=</operator> <call pos:start="188:17" pos:end="188:42"><name pos:start="188:17" pos:end="188:25">drive_get</name><argument_list pos:start="188:26" pos:end="188:42">(<argument pos:start="188:27" pos:end="188:35"><expr pos:start="188:27" pos:end="188:35"><name pos:start="188:27" pos:end="188:35">IF_FLOPPY</name></expr></argument>, <argument pos:start="188:38" pos:end="188:38"><expr pos:start="188:38" pos:end="188:38"><literal type="number" pos:start="188:38" pos:end="188:38">0</literal></expr></argument>, <argument pos:start="188:41" pos:end="188:41"><expr pos:start="188:41" pos:end="188:41"><name pos:start="188:41" pos:end="188:41">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="190:9" pos:end="190:33"><expr pos:start="190:9" pos:end="190:32"><name pos:start="190:9" pos:end="190:21">create_fdctrl</name> <operator pos:start="190:23" pos:end="190:24">|=</operator> <operator pos:start="190:26" pos:end="190:26">!</operator><operator pos:start="190:27" pos:end="190:27">!</operator><name pos:start="190:28" pos:end="190:32"><name pos:start="190:28" pos:end="190:29">fd</name><index pos:start="190:30" pos:end="190:32">[<expr pos:start="190:31" pos:end="190:31"><name pos:start="190:31" pos:end="190:31">i</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <if_stmt pos:start="194:5" pos:end="198:5"><if pos:start="194:5" pos:end="198:5">if <condition pos:start="194:8" pos:end="194:22">(<expr pos:start="194:9" pos:end="194:21"><name pos:start="194:9" pos:end="194:21">create_fdctrl</name></expr>)</condition> <block pos:start="194:24" pos:end="198:5">{<block_content pos:start="196:9" pos:end="196:37">

        <expr_stmt pos:start="196:9" pos:end="196:37"><expr pos:start="196:9" pos:end="196:36"><call pos:start="196:9" pos:end="196:36"><name pos:start="196:9" pos:end="196:23">fdctrl_init_isa</name><argument_list pos:start="196:24" pos:end="196:36">(<argument pos:start="196:25" pos:end="196:31"><expr pos:start="196:25" pos:end="196:31"><name pos:start="196:25" pos:end="196:31">isa_bus</name></expr></argument>, <argument pos:start="196:34" pos:end="196:35"><expr pos:start="196:34" pos:end="196:35"><name pos:start="196:34" pos:end="196:35">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function></unit>
