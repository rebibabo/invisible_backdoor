<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4603.c" pos:tabs="8"><function pos:start="1:1" pos:end="221:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:23">av_image_fill_black</name><parameter_list pos:start="1:24" pos:end="5:46">(<parameter pos:start="1:25" pos:end="1:44"><decl pos:start="1:25" pos:end="1:44"><type pos:start="1:25" pos:end="1:41"><name pos:start="1:25" pos:end="1:31">uint8_t</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:44"><name pos:start="1:34" pos:end="1:41">dst_data</name><index pos:start="1:42" pos:end="1:44">[<expr pos:start="1:43" pos:end="1:43"><literal type="number" pos:start="1:43" pos:end="1:43">4</literal></expr>]</index></name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:77"><decl pos:start="1:47" pos:end="1:77"><type pos:start="1:47" pos:end="1:74"><specifier pos:start="1:47" pos:end="1:51">const</specifier> <name pos:start="1:53" pos:end="1:61">ptrdiff_t</name></type> <name pos:start="1:63" pos:end="1:77"><name pos:start="1:63" pos:end="1:74">dst_linesize</name><index pos:start="1:75" pos:end="1:77">[<expr pos:start="1:76" pos:end="1:76"><literal type="number" pos:start="1:76" pos:end="1:76">4</literal></expr>]</index></name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:50"><decl pos:start="3:25" pos:end="3:50"><type pos:start="3:25" pos:end="3:50"><name pos:start="3:25" pos:end="3:42"><name pos:start="3:25" pos:end="3:28">enum</name> <name pos:start="3:30" pos:end="3:42">AVPixelFormat</name></name></type> <name pos:start="3:44" pos:end="3:50">pix_fmt</name></decl></parameter>, <parameter pos:start="3:53" pos:end="3:75"><decl pos:start="3:53" pos:end="3:75"><type pos:start="3:53" pos:end="3:75"><name pos:start="3:53" pos:end="3:69"><name pos:start="3:53" pos:end="3:56">enum</name> <name pos:start="3:58" pos:end="3:69">AVColorRange</name></name></type> <name pos:start="3:71" pos:end="3:75">range</name></decl></parameter>,

                        <parameter pos:start="5:25" pos:end="5:33"><decl pos:start="5:25" pos:end="5:33"><type pos:start="5:25" pos:end="5:33"><name pos:start="5:25" pos:end="5:27">int</name></type> <name pos:start="5:29" pos:end="5:33">width</name></decl></parameter>, <parameter pos:start="5:36" pos:end="5:45"><decl pos:start="5:36" pos:end="5:45"><type pos:start="5:36" pos:end="5:45"><name pos:start="5:36" pos:end="5:38">int</name></type> <name pos:start="5:40" pos:end="5:45">height</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="221:1">{<block_content pos:start="9:5" pos:end="219:13">

    <decl_stmt pos:start="9:5" pos:end="9:66"><decl pos:start="9:5" pos:end="9:65"><type pos:start="9:5" pos:end="9:30"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:28">AVPixFmtDescriptor</name> <modifier pos:start="9:30" pos:end="9:30">*</modifier></type><name pos:start="9:31" pos:end="9:34">desc</name> <init pos:start="9:36" pos:end="9:65">= <expr pos:start="9:38" pos:end="9:65"><call pos:start="9:38" pos:end="9:65"><name pos:start="9:38" pos:end="9:56">av_pix_fmt_desc_get</name><argument_list pos:start="9:57" pos:end="9:65">(<argument pos:start="9:58" pos:end="9:64"><expr pos:start="9:58" pos:end="9:64"><name pos:start="9:58" pos:end="9:64">pix_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:53"><decl pos:start="11:5" pos:end="11:52"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:17">nb_planes</name> <init pos:start="11:19" pos:end="11:52">= <expr pos:start="11:21" pos:end="11:52"><call pos:start="11:21" pos:end="11:52"><name pos:start="11:21" pos:end="11:43">av_pix_fmt_count_planes</name><argument_list pos:start="11:44" pos:end="11:52">(<argument pos:start="11:45" pos:end="11:51"><expr pos:start="11:45" pos:end="11:51"><name pos:start="11:45" pos:end="11:51">pix_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line" pos:start="13:5" pos:end="13:86">// A pixel or a group of pixels on each plane, with a value that represents black.</comment>

    <comment type="line" pos:start="15:5" pos:end="15:62">// Consider e.g. AV_PIX_FMT_UYVY422 for non-trivial cases.</comment>

    <decl_stmt pos:start="17:5" pos:end="17:49"><decl pos:start="17:5" pos:end="17:48"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">uint8_t</name></type> <name pos:start="17:13" pos:end="17:42"><name pos:start="17:13" pos:end="17:23">clear_block</name><index pos:start="17:24" pos:end="17:26">[<expr pos:start="17:25" pos:end="17:25"><literal type="number" pos:start="17:25" pos:end="17:25">4</literal></expr>]</index><index pos:start="17:27" pos:end="17:42">[<expr pos:start="17:28" pos:end="17:41"><name pos:start="17:28" pos:end="17:41">MAX_BLOCK_SIZE</name></expr>]</index></name> <init pos:start="17:44" pos:end="17:48">= <expr pos:start="17:46" pos:end="17:48"><block pos:start="17:46" pos:end="17:48">{<expr pos:start="17:47" pos:end="17:47"><literal type="number" pos:start="17:47" pos:end="17:47">0</literal></expr>}</block></expr></init></decl>;</decl_stmt> <comment type="line" pos:start="17:51" pos:end="17:73">// clear padding with 0</comment>

    <decl_stmt pos:start="19:5" pos:end="19:34"><decl pos:start="19:5" pos:end="19:33"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:27"><name pos:start="19:9" pos:end="19:24">clear_block_size</name><index pos:start="19:25" pos:end="19:27">[<expr pos:start="19:26" pos:end="19:26"><literal type="number" pos:start="19:26" pos:end="19:26">4</literal></expr>]</index></name> <init pos:start="19:29" pos:end="19:33">= <expr pos:start="19:31" pos:end="19:33"><block pos:start="19:31" pos:end="19:33">{<expr pos:start="19:32" pos:end="19:32"><literal type="number" pos:start="19:32" pos:end="19:32">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:40"><decl pos:start="21:5" pos:end="21:39"><type pos:start="21:5" pos:end="21:13"><name pos:start="21:5" pos:end="21:13">ptrdiff_t</name></type> <name pos:start="21:15" pos:end="21:33"><name pos:start="21:15" pos:end="21:30">plane_line_bytes</name><index pos:start="21:31" pos:end="21:33">[<expr pos:start="21:32" pos:end="21:32"><literal type="number" pos:start="21:32" pos:end="21:32">4</literal></expr>]</index></name> <init pos:start="21:35" pos:end="21:39">= <expr pos:start="21:37" pos:end="21:39"><block pos:start="21:37" pos:end="21:39">{<expr pos:start="21:38" pos:end="21:38"><literal type="number" pos:start="21:38" pos:end="21:38">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:21"><decl pos:start="23:5" pos:end="23:11"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:11">rgb</name></decl>, <decl pos:start="23:14" pos:end="23:20"><type ref="prev" pos:start="23:5" pos:end="23:7"/><name pos:start="23:14" pos:end="23:20">limited</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:17"><decl pos:start="25:5" pos:end="25:13"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:13">plane</name></decl>, <decl pos:start="25:16" pos:end="25:16"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:16" pos:end="25:16">c</name></decl>;</decl_stmt>



    <if_stmt pos:start="29:5" pos:end="31:31"><if pos:start="29:5" pos:end="31:31">if <condition pos:start="29:8" pos:end="29:89">(<expr pos:start="29:9" pos:end="29:88"><operator pos:start="29:9" pos:end="29:9">!</operator><name pos:start="29:10" pos:end="29:13">desc</name> <operator pos:start="29:15" pos:end="29:16">||</operator> <name pos:start="29:18" pos:end="29:45"><name pos:start="29:18" pos:end="29:26">nb_planes</name> <argument_list type="generic" pos:start="29:28" pos:end="29:45">&lt; <argument pos:start="29:30" pos:end="29:43"><expr pos:start="29:30" pos:end="29:43"><literal type="number" pos:start="29:30" pos:end="29:30">1</literal> <operator pos:start="29:32" pos:end="29:33">||</operator> <name pos:start="29:35" pos:end="29:43">nb_planes</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="29:47" pos:end="29:47">4</literal> <operator pos:start="29:49" pos:end="29:50">||</operator> <name pos:start="29:52" pos:end="29:62"><name pos:start="29:52" pos:end="29:55">desc</name><operator pos:start="29:56" pos:end="29:57">-&gt;</operator><name pos:start="29:58" pos:end="29:62">flags</name></name> <operator pos:start="29:64" pos:end="29:64">&amp;</operator> <name pos:start="29:66" pos:end="29:88">AV_PIX_FMT_FLAG_HWACCEL</name></expr>)</condition><block type="pseudo" pos:start="31:9" pos:end="31:31"><block_content pos:start="31:9" pos:end="31:31">

        <return pos:start="31:9" pos:end="31:31">return <expr pos:start="31:16" pos:end="31:30"><call pos:start="31:16" pos:end="31:30"><name pos:start="31:16" pos:end="31:22">AVERROR</name><argument_list pos:start="31:23" pos:end="31:30">(<argument pos:start="31:24" pos:end="31:29"><expr pos:start="31:24" pos:end="31:29"><name pos:start="31:24" pos:end="31:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:48"><expr pos:start="35:5" pos:end="35:47"><name pos:start="35:5" pos:end="35:7">rgb</name> <operator pos:start="35:9" pos:end="35:9">=</operator> <operator pos:start="35:11" pos:end="35:11">!</operator><operator pos:start="35:12" pos:end="35:12">!</operator><operator pos:start="35:13" pos:end="35:13">(</operator><name pos:start="35:14" pos:end="35:24"><name pos:start="35:14" pos:end="35:17">desc</name><operator pos:start="35:18" pos:end="35:19">-&gt;</operator><name pos:start="35:20" pos:end="35:24">flags</name></name> <operator pos:start="35:26" pos:end="35:26">&amp;</operator> <name pos:start="35:28" pos:end="35:46">AV_PIX_FMT_FLAG_RGB</name><operator pos:start="35:47" pos:end="35:47">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:48"><expr pos:start="37:5" pos:end="37:47"><name pos:start="37:5" pos:end="37:11">limited</name> <operator pos:start="37:13" pos:end="37:13">=</operator> <operator pos:start="37:15" pos:end="37:15">!</operator><name pos:start="37:16" pos:end="37:18">rgb</name> <operator pos:start="37:20" pos:end="37:21">&amp;&amp;</operator> <name pos:start="37:23" pos:end="37:27">range</name> <operator pos:start="37:29" pos:end="37:30">!=</operator> <name pos:start="37:32" pos:end="37:47">AVCOL_RANGE_JPEG</name></expr>;</expr_stmt>



    <if_stmt pos:start="41:5" pos:end="79:5"><if pos:start="41:5" pos:end="79:5">if <condition pos:start="41:8" pos:end="41:48">(<expr pos:start="41:9" pos:end="41:47"><name pos:start="41:9" pos:end="41:19"><name pos:start="41:9" pos:end="41:12">desc</name><operator pos:start="41:13" pos:end="41:14">-&gt;</operator><name pos:start="41:15" pos:end="41:19">flags</name></name> <operator pos:start="41:21" pos:end="41:21">&amp;</operator> <name pos:start="41:23" pos:end="41:47">AV_PIX_FMT_FLAG_BITSTREAM</name></expr>)</condition> <block pos:start="41:50" pos:end="79:5">{<block_content pos:start="43:9" pos:end="77:17">

        <decl_stmt pos:start="43:9" pos:end="43:71"><decl pos:start="43:9" pos:end="43:70"><type pos:start="43:9" pos:end="43:17"><name pos:start="43:9" pos:end="43:17">ptrdiff_t</name></type> <name pos:start="43:19" pos:end="43:27">bytewidth</name> <init pos:start="43:29" pos:end="43:70">= <expr pos:start="43:31" pos:end="43:70"><call pos:start="43:31" pos:end="43:70"><name pos:start="43:31" pos:end="43:51">av_image_get_linesize</name><argument_list pos:start="43:52" pos:end="43:70">(<argument pos:start="43:53" pos:end="43:59"><expr pos:start="43:53" pos:end="43:59"><name pos:start="43:53" pos:end="43:59">pix_fmt</name></expr></argument>, <argument pos:start="43:62" pos:end="43:66"><expr pos:start="43:62" pos:end="43:66"><name pos:start="43:62" pos:end="43:66">width</name></expr></argument>, <argument pos:start="43:69" pos:end="43:69"><expr pos:start="43:69" pos:end="43:69"><literal type="number" pos:start="43:69" pos:end="43:69">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="45:9" pos:end="45:22"><decl pos:start="45:9" pos:end="45:21"><type pos:start="45:9" pos:end="45:17"><name pos:start="45:9" pos:end="45:15">uint8_t</name> <modifier pos:start="45:17" pos:end="45:17">*</modifier></type><name pos:start="45:18" pos:end="45:21">data</name></decl>;</decl_stmt>

        <decl_stmt pos:start="47:9" pos:end="47:86"><decl pos:start="47:9" pos:end="47:85"><type pos:start="47:9" pos:end="47:11"><name pos:start="47:9" pos:end="47:11">int</name></type> <name pos:start="47:13" pos:end="47:16">mono</name> <init pos:start="47:18" pos:end="47:85">= <expr pos:start="47:20" pos:end="47:85"><name pos:start="47:20" pos:end="47:26">pix_fmt</name> <operator pos:start="47:28" pos:end="47:29">==</operator> <name pos:start="47:31" pos:end="47:50">AV_PIX_FMT_MONOWHITE</name> <operator pos:start="47:52" pos:end="47:53">||</operator> <name pos:start="47:55" pos:end="47:61">pix_fmt</name> <operator pos:start="47:63" pos:end="47:64">==</operator> <name pos:start="47:66" pos:end="47:85">AV_PIX_FMT_MONOBLACK</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="49:9" pos:end="49:62"><decl pos:start="49:9" pos:end="49:61"><type pos:start="49:9" pos:end="49:11"><name pos:start="49:9" pos:end="49:11">int</name></type> <name pos:start="49:13" pos:end="49:16">fill</name> <init pos:start="49:18" pos:end="49:61">= <expr pos:start="49:20" pos:end="49:61"><ternary pos:start="49:20" pos:end="49:61"><condition pos:start="49:20" pos:end="49:52"><expr pos:start="49:20" pos:end="49:50"><name pos:start="49:20" pos:end="49:26">pix_fmt</name> <operator pos:start="49:28" pos:end="49:29">==</operator> <name pos:start="49:31" pos:end="49:50">AV_PIX_FMT_MONOWHITE</name></expr> ?</condition><then pos:start="49:54" pos:end="49:57"> <expr pos:start="49:54" pos:end="49:57"><literal type="number" pos:start="49:54" pos:end="49:57">0xFF</literal></expr> </then><else pos:start="49:59" pos:end="49:61">: <expr pos:start="49:61" pos:end="49:61"><literal type="number" pos:start="49:61" pos:end="49:61">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="51:9" pos:end="53:35"><if pos:start="51:9" pos:end="53:35">if <condition pos:start="51:12" pos:end="51:62">(<expr pos:start="51:13" pos:end="51:61"><name pos:start="51:13" pos:end="51:21">nb_planes</name> <operator pos:start="51:23" pos:end="51:24">!=</operator> <literal type="number" pos:start="51:26" pos:end="51:26">1</literal> <operator pos:start="51:28" pos:end="51:29">||</operator> <operator pos:start="51:31" pos:end="51:31">!</operator><operator pos:start="51:32" pos:end="51:32">(</operator><name pos:start="51:33" pos:end="51:35">rgb</name> <operator pos:start="51:37" pos:end="51:38">||</operator> <name pos:start="51:40" pos:end="51:43">mono</name><operator pos:start="51:44" pos:end="51:44">)</operator> <operator pos:start="51:46" pos:end="51:47">||</operator> <name pos:start="51:49" pos:end="51:57">bytewidth</name> <operator pos:start="51:59" pos:end="51:59">&lt;</operator> <literal type="number" pos:start="51:61" pos:end="51:61">1</literal></expr>)</condition><block type="pseudo" pos:start="53:13" pos:end="53:35"><block_content pos:start="53:13" pos:end="53:35">

            <return pos:start="53:13" pos:end="53:35">return <expr pos:start="53:20" pos:end="53:34"><call pos:start="53:20" pos:end="53:34"><name pos:start="53:20" pos:end="53:26">AVERROR</name><argument_list pos:start="53:27" pos:end="53:34">(<argument pos:start="53:28" pos:end="53:33"><expr pos:start="53:28" pos:end="53:33"><name pos:start="53:28" pos:end="53:33">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



        <if_stmt pos:start="57:9" pos:end="59:21"><if pos:start="57:9" pos:end="59:21">if <condition pos:start="57:12" pos:end="57:22">(<expr pos:start="57:13" pos:end="57:21"><operator pos:start="57:13" pos:end="57:13">!</operator><name pos:start="57:14" pos:end="57:21">dst_data</name></expr>)</condition><block type="pseudo" pos:start="59:13" pos:end="59:21"><block_content pos:start="59:13" pos:end="59:21">

            <return pos:start="59:13" pos:end="59:21">return <expr pos:start="59:20" pos:end="59:20"><literal type="number" pos:start="59:20" pos:end="59:20">0</literal></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="63:9" pos:end="63:27"><expr pos:start="63:9" pos:end="63:26"><name pos:start="63:9" pos:end="63:12">data</name> <operator pos:start="63:14" pos:end="63:14">=</operator> <name pos:start="63:16" pos:end="63:26"><name pos:start="63:16" pos:end="63:23">dst_data</name><index pos:start="63:24" pos:end="63:26">[<expr pos:start="63:25" pos:end="63:25"><literal type="number" pos:start="63:25" pos:end="63:25">0</literal></expr>]</index></name></expr>;</expr_stmt>



        <comment type="line" pos:start="67:9" pos:end="67:86">// (Bitstream + alpha will be handled incorrectly - it'll remain transparent.)</comment>

        <for pos:start="69:9" pos:end="75:9">for <control pos:start="69:13" pos:end="69:35">(<init pos:start="69:14" pos:end="69:14">;</init><condition pos:start="69:15" pos:end="69:25"><expr pos:start="69:15" pos:end="69:24"><name pos:start="69:15" pos:end="69:20">height</name> <operator pos:start="69:22" pos:end="69:22">&gt;</operator> <literal type="number" pos:start="69:24" pos:end="69:24">0</literal></expr>;</condition> <incr pos:start="69:27" pos:end="69:34"><expr pos:start="69:27" pos:end="69:34"><name pos:start="69:27" pos:end="69:32">height</name><operator pos:start="69:33" pos:end="69:34">--</operator></expr></incr>)</control> <block pos:start="69:37" pos:end="75:9">{<block_content pos:start="71:13" pos:end="73:36">

            <expr_stmt pos:start="71:13" pos:end="71:42"><expr pos:start="71:13" pos:end="71:41"><call pos:start="71:13" pos:end="71:41"><name pos:start="71:13" pos:end="71:18">memset</name><argument_list pos:start="71:19" pos:end="71:41">(<argument pos:start="71:20" pos:end="71:23"><expr pos:start="71:20" pos:end="71:23"><name pos:start="71:20" pos:end="71:23">data</name></expr></argument>, <argument pos:start="71:26" pos:end="71:29"><expr pos:start="71:26" pos:end="71:29"><name pos:start="71:26" pos:end="71:29">fill</name></expr></argument>, <argument pos:start="71:32" pos:end="71:40"><expr pos:start="71:32" pos:end="71:40"><name pos:start="71:32" pos:end="71:40">bytewidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="73:13" pos:end="73:36"><expr pos:start="73:13" pos:end="73:35"><name pos:start="73:13" pos:end="73:16">data</name> <operator pos:start="73:18" pos:end="73:19">+=</operator> <name pos:start="73:21" pos:end="73:35"><name pos:start="73:21" pos:end="73:32">dst_linesize</name><index pos:start="73:33" pos:end="73:35">[<expr pos:start="73:34" pos:end="73:34"><literal type="number" pos:start="73:34" pos:end="73:34">0</literal></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <return pos:start="77:9" pos:end="77:17">return <expr pos:start="77:16" pos:end="77:16"><literal type="number" pos:start="77:16" pos:end="77:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="83:5" pos:end="101:5">for <control pos:start="83:9" pos:end="83:45">(<init pos:start="83:10" pos:end="83:15"><expr pos:start="83:10" pos:end="83:14"><name pos:start="83:10" pos:end="83:10">c</name> <operator pos:start="83:12" pos:end="83:12">=</operator> <literal type="number" pos:start="83:14" pos:end="83:14">0</literal></expr>;</init> <condition pos:start="83:17" pos:end="83:40"><expr pos:start="83:17" pos:end="83:39"><name pos:start="83:17" pos:end="83:17">c</name> <operator pos:start="83:19" pos:end="83:19">&lt;</operator> <name pos:start="83:21" pos:end="83:39"><name pos:start="83:21" pos:end="83:24">desc</name><operator pos:start="83:25" pos:end="83:26">-&gt;</operator><name pos:start="83:27" pos:end="83:39">nb_components</name></name></expr>;</condition> <incr pos:start="83:42" pos:end="83:44"><expr pos:start="83:42" pos:end="83:44"><name pos:start="83:42" pos:end="83:42">c</name><operator pos:start="83:43" pos:end="83:44">++</operator></expr></incr>)</control> <block pos:start="83:47" pos:end="101:5">{<block_content pos:start="85:9" pos:end="99:35">

        <decl_stmt pos:start="85:9" pos:end="85:57"><decl pos:start="85:9" pos:end="85:56"><type pos:start="85:9" pos:end="85:35"><specifier pos:start="85:9" pos:end="85:13">const</specifier> <name pos:start="85:15" pos:end="85:35">AVComponentDescriptor</name></type> <name pos:start="85:37" pos:end="85:40">comp</name> <init pos:start="85:42" pos:end="85:56">= <expr pos:start="85:44" pos:end="85:56"><name pos:start="85:44" pos:end="85:56"><name pos:start="85:44" pos:end="85:47">desc</name><operator pos:start="85:48" pos:end="85:49">-&gt;</operator><name pos:start="85:50" pos:end="85:53">comp</name><index pos:start="85:54" pos:end="85:56">[<expr pos:start="85:55" pos:end="85:55"><name pos:start="85:55" pos:end="85:55">c</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



        <comment type="line" pos:start="89:9" pos:end="89:71">// We try to operate on entire non-subsampled pixel groups (for</comment>

        <comment type="line" pos:start="91:9" pos:end="91:70">// AV_PIX_FMT_UYVY422 this would mean two consecutive pixels).</comment>

        <expr_stmt pos:start="93:9" pos:end="93:86"><expr pos:start="93:9" pos:end="93:85"><name pos:start="93:9" pos:end="93:36"><name pos:start="93:9" pos:end="93:24">clear_block_size</name><index pos:start="93:25" pos:end="93:36">[<expr pos:start="93:26" pos:end="93:35"><name pos:start="93:26" pos:end="93:35"><name pos:start="93:26" pos:end="93:29">comp</name><operator pos:start="93:30" pos:end="93:30">.</operator><name pos:start="93:31" pos:end="93:35">plane</name></name></expr>]</index></name> <operator pos:start="93:38" pos:end="93:38">=</operator> <call pos:start="93:40" pos:end="93:85"><name pos:start="93:40" pos:end="93:44">FFMAX</name><argument_list pos:start="93:45" pos:end="93:85">(<argument pos:start="93:46" pos:end="93:73"><expr pos:start="93:46" pos:end="93:73"><name pos:start="93:46" pos:end="93:73"><name pos:start="93:46" pos:end="93:61">clear_block_size</name><index pos:start="93:62" pos:end="93:73">[<expr pos:start="93:63" pos:end="93:72"><name pos:start="93:63" pos:end="93:72"><name pos:start="93:63" pos:end="93:66">comp</name><operator pos:start="93:67" pos:end="93:67">.</operator><name pos:start="93:68" pos:end="93:72">plane</name></name></expr>]</index></name></expr></argument>, <argument pos:start="93:76" pos:end="93:84"><expr pos:start="93:76" pos:end="93:84"><name pos:start="93:76" pos:end="93:84"><name pos:start="93:76" pos:end="93:79">comp</name><operator pos:start="93:80" pos:end="93:80">.</operator><name pos:start="93:81" pos:end="93:84">step</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="97:9" pos:end="99:35"><if pos:start="97:9" pos:end="99:35">if <condition pos:start="97:12" pos:end="97:58">(<expr pos:start="97:13" pos:end="97:57"><name pos:start="97:13" pos:end="97:40"><name pos:start="97:13" pos:end="97:28">clear_block_size</name><index pos:start="97:29" pos:end="97:40">[<expr pos:start="97:30" pos:end="97:39"><name pos:start="97:30" pos:end="97:39"><name pos:start="97:30" pos:end="97:33">comp</name><operator pos:start="97:34" pos:end="97:34">.</operator><name pos:start="97:35" pos:end="97:39">plane</name></name></expr>]</index></name> <operator pos:start="97:42" pos:end="97:42">&gt;</operator> <name pos:start="97:44" pos:end="97:57">MAX_BLOCK_SIZE</name></expr>)</condition><block type="pseudo" pos:start="99:13" pos:end="99:35"><block_content pos:start="99:13" pos:end="99:35">

            <return pos:start="99:13" pos:end="99:35">return <expr pos:start="99:20" pos:end="99:34"><call pos:start="99:20" pos:end="99:34"><name pos:start="99:20" pos:end="99:26">AVERROR</name><argument_list pos:start="99:27" pos:end="99:34">(<argument pos:start="99:28" pos:end="99:33"><expr pos:start="99:28" pos:end="99:33"><name pos:start="99:28" pos:end="99:33">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="line" pos:start="105:5" pos:end="105:75">// Create a byte array for clearing 1 pixel (sometimes several pixels).</comment>

    <for pos:start="107:5" pos:end="173:5">for <control pos:start="107:9" pos:end="107:45">(<init pos:start="107:10" pos:end="107:15"><expr pos:start="107:10" pos:end="107:14"><name pos:start="107:10" pos:end="107:10">c</name> <operator pos:start="107:12" pos:end="107:12">=</operator> <literal type="number" pos:start="107:14" pos:end="107:14">0</literal></expr>;</init> <condition pos:start="107:17" pos:end="107:40"><expr pos:start="107:17" pos:end="107:39"><name pos:start="107:17" pos:end="107:17">c</name> <operator pos:start="107:19" pos:end="107:19">&lt;</operator> <name pos:start="107:21" pos:end="107:39"><name pos:start="107:21" pos:end="107:24">desc</name><operator pos:start="107:25" pos:end="107:26">-&gt;</operator><name pos:start="107:27" pos:end="107:39">nb_components</name></name></expr>;</condition> <incr pos:start="107:42" pos:end="107:44"><expr pos:start="107:42" pos:end="107:44"><name pos:start="107:42" pos:end="107:42">c</name><operator pos:start="107:43" pos:end="107:44">++</operator></expr></incr>)</control> <block pos:start="107:47" pos:end="173:5">{<block_content pos:start="109:9" pos:end="171:77">

        <decl_stmt pos:start="109:9" pos:end="109:57"><decl pos:start="109:9" pos:end="109:56"><type pos:start="109:9" pos:end="109:35"><specifier pos:start="109:9" pos:end="109:13">const</specifier> <name pos:start="109:15" pos:end="109:35">AVComponentDescriptor</name></type> <name pos:start="109:37" pos:end="109:40">comp</name> <init pos:start="109:42" pos:end="109:56">= <expr pos:start="109:44" pos:end="109:56"><name pos:start="109:44" pos:end="109:56"><name pos:start="109:44" pos:end="109:47">desc</name><operator pos:start="109:48" pos:end="109:49">-&gt;</operator><name pos:start="109:50" pos:end="109:53">comp</name><index pos:start="109:54" pos:end="109:56">[<expr pos:start="109:55" pos:end="109:55"><name pos:start="109:55" pos:end="109:55">c</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:start="111:9" pos:end="111:65">// (Multiple pixels happen e.g. with AV_PIX_FMT_UYVY422.)</comment>

        <decl_stmt pos:start="113:9" pos:end="113:57"><decl pos:start="113:9" pos:end="113:56"><type pos:start="113:9" pos:end="113:11"><name pos:start="113:9" pos:end="113:11">int</name></type> <name pos:start="113:13" pos:end="113:13">w</name> <init pos:start="113:15" pos:end="113:56">= <expr pos:start="113:17" pos:end="113:56"><name pos:start="113:17" pos:end="113:44"><name pos:start="113:17" pos:end="113:32">clear_block_size</name><index pos:start="113:33" pos:end="113:44">[<expr pos:start="113:34" pos:end="113:43"><name pos:start="113:34" pos:end="113:43"><name pos:start="113:34" pos:end="113:37">comp</name><operator pos:start="113:38" pos:end="113:38">.</operator><name pos:start="113:39" pos:end="113:43">plane</name></name></expr>]</index></name> <operator pos:start="113:46" pos:end="113:46">/</operator> <name pos:start="113:48" pos:end="113:56"><name pos:start="113:48" pos:end="113:51">comp</name><operator pos:start="113:52" pos:end="113:52">.</operator><name pos:start="113:53" pos:end="113:56">step</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="115:9" pos:end="115:27"><decl pos:start="115:9" pos:end="115:26"><type pos:start="115:9" pos:end="115:17"><name pos:start="115:9" pos:end="115:15">uint8_t</name> <modifier pos:start="115:17" pos:end="115:17">*</modifier></type><name pos:start="115:18" pos:end="115:26"><name pos:start="115:18" pos:end="115:23">c_data</name><index pos:start="115:24" pos:end="115:26">[<expr pos:start="115:25" pos:end="115:25"><literal type="number" pos:start="115:25" pos:end="115:25">4</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="117:9" pos:end="117:38"><decl pos:start="117:9" pos:end="117:37"><type pos:start="117:9" pos:end="117:17"><specifier pos:start="117:9" pos:end="117:13">const</specifier> <name pos:start="117:15" pos:end="117:17">int</name></type> <name pos:start="117:19" pos:end="117:31"><name pos:start="117:19" pos:end="117:28">c_linesize</name><index pos:start="117:29" pos:end="117:31">[<expr pos:start="117:30" pos:end="117:30"><literal type="number" pos:start="117:30" pos:end="117:30">4</literal></expr>]</index></name> <init pos:start="117:33" pos:end="117:37">= <expr pos:start="117:35" pos:end="117:37"><block pos:start="117:35" pos:end="117:37">{<expr pos:start="117:36" pos:end="117:36"><literal type="number" pos:start="117:36" pos:end="117:36">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="119:9" pos:end="119:43"><decl pos:start="119:9" pos:end="119:42"><type pos:start="119:9" pos:end="119:16"><name pos:start="119:9" pos:end="119:16">uint16_t</name></type> <name pos:start="119:18" pos:end="119:42"><name pos:start="119:18" pos:end="119:26">src_array</name><index pos:start="119:27" pos:end="119:42">[<expr pos:start="119:28" pos:end="119:41"><name pos:start="119:28" pos:end="119:41">MAX_BLOCK_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="121:9" pos:end="121:25"><decl pos:start="121:9" pos:end="121:24"><type pos:start="121:9" pos:end="121:16"><name pos:start="121:9" pos:end="121:16">uint16_t</name></type> <name pos:start="121:18" pos:end="121:20">src</name> <init pos:start="121:22" pos:end="121:24">= <expr pos:start="121:24" pos:end="121:24"><literal type="number" pos:start="121:24" pos:end="121:24">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="123:9" pos:end="123:14"><decl pos:start="123:9" pos:end="123:13"><type pos:start="123:9" pos:end="123:11"><name pos:start="123:9" pos:end="123:11">int</name></type> <name pos:start="123:13" pos:end="123:13">x</name></decl>;</decl_stmt>



        <if_stmt pos:start="127:9" pos:end="129:35"><if pos:start="127:9" pos:end="129:35">if <condition pos:start="127:12" pos:end="127:28">(<expr pos:start="127:13" pos:end="127:27"><name pos:start="127:13" pos:end="127:22"><name pos:start="127:13" pos:end="127:16">comp</name><operator pos:start="127:17" pos:end="127:17">.</operator><name pos:start="127:18" pos:end="127:22">depth</name></name> <operator pos:start="127:24" pos:end="127:24">&gt;</operator> <literal type="number" pos:start="127:26" pos:end="127:27">16</literal></expr>)</condition><block type="pseudo" pos:start="129:13" pos:end="129:35"><block_content pos:start="129:13" pos:end="129:35">

            <return pos:start="129:13" pos:end="129:35">return <expr pos:start="129:20" pos:end="129:34"><call pos:start="129:20" pos:end="129:34"><name pos:start="129:20" pos:end="129:26">AVERROR</name><argument_list pos:start="129:27" pos:end="129:34">(<argument pos:start="129:28" pos:end="129:33"><expr pos:start="129:28" pos:end="129:33"><name pos:start="129:28" pos:end="129:33">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="131:9" pos:end="133:35"><if pos:start="131:9" pos:end="133:35">if <condition pos:start="131:12" pos:end="131:35">(<expr pos:start="131:13" pos:end="131:34"><operator pos:start="131:13" pos:end="131:13">!</operator><name pos:start="131:14" pos:end="131:16">rgb</name> <operator pos:start="131:18" pos:end="131:19">&amp;&amp;</operator> <name pos:start="131:21" pos:end="131:30"><name pos:start="131:21" pos:end="131:24">comp</name><operator pos:start="131:25" pos:end="131:25">.</operator><name pos:start="131:26" pos:end="131:30">depth</name></name> <operator pos:start="131:32" pos:end="131:32">&lt;</operator> <literal type="number" pos:start="131:34" pos:end="131:34">8</literal></expr>)</condition><block type="pseudo" pos:start="133:13" pos:end="133:35"><block_content pos:start="133:13" pos:end="133:35">

            <return pos:start="133:13" pos:end="133:35">return <expr pos:start="133:20" pos:end="133:34"><call pos:start="133:20" pos:end="133:34"><name pos:start="133:20" pos:end="133:26">AVERROR</name><argument_list pos:start="133:27" pos:end="133:34">(<argument pos:start="133:28" pos:end="133:33"><expr pos:start="133:28" pos:end="133:33"><name pos:start="133:28" pos:end="133:33">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="135:9" pos:end="137:35"><if pos:start="135:9" pos:end="137:35">if <condition pos:start="135:12" pos:end="135:18">(<expr pos:start="135:13" pos:end="135:17"><name pos:start="135:13" pos:end="135:13">w</name> <operator pos:start="135:15" pos:end="135:15">&lt;</operator> <literal type="number" pos:start="135:17" pos:end="135:17">1</literal></expr>)</condition><block type="pseudo" pos:start="137:13" pos:end="137:35"><block_content pos:start="137:13" pos:end="137:35">

            <return pos:start="137:13" pos:end="137:35">return <expr pos:start="137:20" pos:end="137:34"><call pos:start="137:20" pos:end="137:34"><name pos:start="137:20" pos:end="137:26">AVERROR</name><argument_list pos:start="137:27" pos:end="137:34">(<argument pos:start="137:28" pos:end="137:33"><expr pos:start="137:28" pos:end="137:33"><name pos:start="137:28" pos:end="137:33">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



        <if_stmt pos:start="141:9" pos:end="155:9"><if pos:start="141:9" pos:end="145:9">if <condition pos:start="141:12" pos:end="141:30">(<expr pos:start="141:13" pos:end="141:29"><name pos:start="141:13" pos:end="141:13">c</name> <operator pos:start="141:15" pos:end="141:16">==</operator> <literal type="number" pos:start="141:18" pos:end="141:18">0</literal> <operator pos:start="141:20" pos:end="141:21">&amp;&amp;</operator> <name pos:start="141:23" pos:end="141:29">limited</name></expr>)</condition> <block pos:start="141:32" pos:end="145:9">{<block_content pos:start="143:13" pos:end="143:41">

            <expr_stmt pos:start="143:13" pos:end="143:41"><expr pos:start="143:13" pos:end="143:40"><name pos:start="143:13" pos:end="143:15">src</name> <operator pos:start="143:17" pos:end="143:17">=</operator> <literal type="number" pos:start="143:19" pos:end="143:20">16</literal> <operator pos:start="143:22" pos:end="143:23">&lt;&lt;</operator> <operator pos:start="143:25" pos:end="143:25">(</operator><name pos:start="143:26" pos:end="143:35"><name pos:start="143:26" pos:end="143:29">comp</name><operator pos:start="143:30" pos:end="143:30">.</operator><name pos:start="143:31" pos:end="143:35">depth</name></name> <operator pos:start="143:37" pos:end="143:37">-</operator> <literal type="number" pos:start="143:39" pos:end="143:39">8</literal><operator pos:start="143:40" pos:end="143:40">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="145:11" pos:end="149:9">else if <condition pos:start="145:19" pos:end="145:46">(<expr pos:start="145:20" pos:end="145:45"><operator pos:start="145:20" pos:end="145:20">(</operator><name pos:start="145:21" pos:end="145:21">c</name> <operator pos:start="145:23" pos:end="145:24">==</operator> <literal type="number" pos:start="145:26" pos:end="145:26">1</literal> <operator pos:start="145:28" pos:end="145:29">||</operator> <name pos:start="145:31" pos:end="145:31">c</name> <operator pos:start="145:33" pos:end="145:34">==</operator> <literal type="number" pos:start="145:36" pos:end="145:36">2</literal><operator pos:start="145:37" pos:end="145:37">)</operator> <operator pos:start="145:39" pos:end="145:40">&amp;&amp;</operator> <operator pos:start="145:42" pos:end="145:42">!</operator><name pos:start="145:43" pos:end="145:45">rgb</name></expr>)</condition> <block pos:start="145:48" pos:end="149:9">{<block_content pos:start="147:13" pos:end="147:42">

            <expr_stmt pos:start="147:13" pos:end="147:42"><expr pos:start="147:13" pos:end="147:41"><name pos:start="147:13" pos:end="147:15">src</name> <operator pos:start="147:17" pos:end="147:17">=</operator> <literal type="number" pos:start="147:19" pos:end="147:21">128</literal> <operator pos:start="147:23" pos:end="147:24">&lt;&lt;</operator> <operator pos:start="147:26" pos:end="147:26">(</operator><name pos:start="147:27" pos:end="147:36"><name pos:start="147:27" pos:end="147:30">comp</name><operator pos:start="147:31" pos:end="147:31">.</operator><name pos:start="147:32" pos:end="147:36">depth</name></name> <operator pos:start="147:38" pos:end="147:38">-</operator> <literal type="number" pos:start="147:40" pos:end="147:40">8</literal><operator pos:start="147:41" pos:end="147:41">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="149:11" pos:end="155:9">else if <condition pos:start="149:19" pos:end="149:26">(<expr pos:start="149:20" pos:end="149:25"><name pos:start="149:20" pos:end="149:20">c</name> <operator pos:start="149:22" pos:end="149:23">==</operator> <literal type="number" pos:start="149:25" pos:end="149:25">3</literal></expr>)</condition> <block pos:start="149:28" pos:end="155:9">{<block_content pos:start="153:13" pos:end="153:40">

            <comment type="line" pos:start="151:13" pos:end="151:63">// (Assume even limited YUV uses full range alpha.)</comment>

            <expr_stmt pos:start="153:13" pos:end="153:40"><expr pos:start="153:13" pos:end="153:39"><name pos:start="153:13" pos:end="153:15">src</name> <operator pos:start="153:17" pos:end="153:17">=</operator> <operator pos:start="153:19" pos:end="153:19">(</operator><literal type="number" pos:start="153:20" pos:end="153:20">1</literal> <operator pos:start="153:22" pos:end="153:23">&lt;&lt;</operator> <name pos:start="153:25" pos:end="153:34"><name pos:start="153:25" pos:end="153:28">comp</name><operator pos:start="153:29" pos:end="153:29">.</operator><name pos:start="153:30" pos:end="153:34">depth</name></name><operator pos:start="153:35" pos:end="153:35">)</operator> <operator pos:start="153:37" pos:end="153:37">-</operator> <literal type="number" pos:start="153:39" pos:end="153:39">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <for pos:start="159:9" pos:end="161:31">for <control pos:start="159:13" pos:end="159:31">(<init pos:start="159:14" pos:end="159:19"><expr pos:start="159:14" pos:end="159:18"><name pos:start="159:14" pos:end="159:14">x</name> <operator pos:start="159:16" pos:end="159:16">=</operator> <literal type="number" pos:start="159:18" pos:end="159:18">0</literal></expr>;</init> <condition pos:start="159:21" pos:end="159:26"><expr pos:start="159:21" pos:end="159:25"><name pos:start="159:21" pos:end="159:21">x</name> <operator pos:start="159:23" pos:end="159:23">&lt;</operator> <name pos:start="159:25" pos:end="159:25">w</name></expr>;</condition> <incr pos:start="159:28" pos:end="159:30"><expr pos:start="159:28" pos:end="159:30"><name pos:start="159:28" pos:end="159:28">x</name><operator pos:start="159:29" pos:end="159:30">++</operator></expr></incr>)</control><block type="pseudo" pos:start="161:13" pos:end="161:31"><block_content pos:start="161:13" pos:end="161:31">

            <expr_stmt pos:start="161:13" pos:end="161:31"><expr pos:start="161:13" pos:end="161:30"><name pos:start="161:13" pos:end="161:24"><name pos:start="161:13" pos:end="161:21">src_array</name><index pos:start="161:22" pos:end="161:24">[<expr pos:start="161:23" pos:end="161:23"><name pos:start="161:23" pos:end="161:23">x</name></expr>]</index></name> <operator pos:start="161:26" pos:end="161:26">=</operator> <name pos:start="161:28" pos:end="161:30">src</name></expr>;</expr_stmt></block_content></block></for>



        <for pos:start="165:9" pos:end="167:43">for <control pos:start="165:13" pos:end="165:31">(<init pos:start="165:14" pos:end="165:19"><expr pos:start="165:14" pos:end="165:18"><name pos:start="165:14" pos:end="165:14">x</name> <operator pos:start="165:16" pos:end="165:16">=</operator> <literal type="number" pos:start="165:18" pos:end="165:18">0</literal></expr>;</init> <condition pos:start="165:21" pos:end="165:26"><expr pos:start="165:21" pos:end="165:25"><name pos:start="165:21" pos:end="165:21">x</name> <operator pos:start="165:23" pos:end="165:23">&lt;</operator> <literal type="number" pos:start="165:25" pos:end="165:25">4</literal></expr>;</condition> <incr pos:start="165:28" pos:end="165:30"><expr pos:start="165:28" pos:end="165:30"><name pos:start="165:28" pos:end="165:28">x</name><operator pos:start="165:29" pos:end="165:30">++</operator></expr></incr>)</control><block type="pseudo" pos:start="167:13" pos:end="167:43"><block_content pos:start="167:13" pos:end="167:43">

            <expr_stmt pos:start="167:13" pos:end="167:43"><expr pos:start="167:13" pos:end="167:42"><name pos:start="167:13" pos:end="167:21"><name pos:start="167:13" pos:end="167:18">c_data</name><index pos:start="167:19" pos:end="167:21">[<expr pos:start="167:20" pos:end="167:20"><name pos:start="167:20" pos:end="167:20">x</name></expr>]</index></name> <operator pos:start="167:23" pos:end="167:23">=</operator> <operator pos:start="167:25" pos:end="167:25">&amp;</operator><name pos:start="167:26" pos:end="167:42"><name pos:start="167:26" pos:end="167:36">clear_block</name><index pos:start="167:37" pos:end="167:39">[<expr pos:start="167:38" pos:end="167:38"><name pos:start="167:38" pos:end="167:38">x</name></expr>]</index><index pos:start="167:40" pos:end="167:42">[<expr pos:start="167:41" pos:end="167:41"><literal type="number" pos:start="167:41" pos:end="167:41">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>



        <expr_stmt pos:start="171:9" pos:end="171:77"><expr pos:start="171:9" pos:end="171:76"><call pos:start="171:9" pos:end="171:76"><name pos:start="171:9" pos:end="171:27">av_write_image_line</name><argument_list pos:start="171:28" pos:end="171:76">(<argument pos:start="171:29" pos:end="171:37"><expr pos:start="171:29" pos:end="171:37"><name pos:start="171:29" pos:end="171:37">src_array</name></expr></argument>, <argument pos:start="171:40" pos:end="171:45"><expr pos:start="171:40" pos:end="171:45"><name pos:start="171:40" pos:end="171:45">c_data</name></expr></argument>, <argument pos:start="171:48" pos:end="171:57"><expr pos:start="171:48" pos:end="171:57"><name pos:start="171:48" pos:end="171:57">c_linesize</name></expr></argument>, <argument pos:start="171:60" pos:end="171:63"><expr pos:start="171:60" pos:end="171:63"><name pos:start="171:60" pos:end="171:63">desc</name></expr></argument>, <argument pos:start="171:66" pos:end="171:66"><expr pos:start="171:66" pos:end="171:66"><literal type="number" pos:start="171:66" pos:end="171:66">0</literal></expr></argument>, <argument pos:start="171:69" pos:end="171:69"><expr pos:start="171:69" pos:end="171:69"><literal type="number" pos:start="171:69" pos:end="171:69">0</literal></expr></argument>, <argument pos:start="171:72" pos:end="171:72"><expr pos:start="171:72" pos:end="171:72"><name pos:start="171:72" pos:end="171:72">c</name></expr></argument>, <argument pos:start="171:75" pos:end="171:75"><expr pos:start="171:75" pos:end="171:75"><name pos:start="171:75" pos:end="171:75">w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <for pos:start="177:5" pos:end="185:5">for <control pos:start="177:9" pos:end="177:47">(<init pos:start="177:10" pos:end="177:19"><expr pos:start="177:10" pos:end="177:18"><name pos:start="177:10" pos:end="177:14">plane</name> <operator pos:start="177:16" pos:end="177:16">=</operator> <literal type="number" pos:start="177:18" pos:end="177:18">0</literal></expr>;</init> <condition pos:start="177:21" pos:end="177:38"><expr pos:start="177:21" pos:end="177:37"><name pos:start="177:21" pos:end="177:25">plane</name> <operator pos:start="177:27" pos:end="177:27">&lt;</operator> <name pos:start="177:29" pos:end="177:37">nb_planes</name></expr>;</condition> <incr pos:start="177:40" pos:end="177:46"><expr pos:start="177:40" pos:end="177:46"><name pos:start="177:40" pos:end="177:44">plane</name><operator pos:start="177:45" pos:end="177:46">++</operator></expr></incr>)</control> <block pos:start="177:49" pos:end="185:5">{<block_content pos:start="179:9" pos:end="183:35">

        <expr_stmt pos:start="179:9" pos:end="179:79"><expr pos:start="179:9" pos:end="179:78"><name pos:start="179:9" pos:end="179:31"><name pos:start="179:9" pos:end="179:24">plane_line_bytes</name><index pos:start="179:25" pos:end="179:31">[<expr pos:start="179:26" pos:end="179:30"><name pos:start="179:26" pos:end="179:30">plane</name></expr>]</index></name> <operator pos:start="179:33" pos:end="179:33">=</operator> <call pos:start="179:35" pos:end="179:78"><name pos:start="179:35" pos:end="179:55">av_image_get_linesize</name><argument_list pos:start="179:56" pos:end="179:78">(<argument pos:start="179:57" pos:end="179:63"><expr pos:start="179:57" pos:end="179:63"><name pos:start="179:57" pos:end="179:63">pix_fmt</name></expr></argument>, <argument pos:start="179:66" pos:end="179:70"><expr pos:start="179:66" pos:end="179:70"><name pos:start="179:66" pos:end="179:70">width</name></expr></argument>, <argument pos:start="179:73" pos:end="179:77"><expr pos:start="179:73" pos:end="179:77"><name pos:start="179:73" pos:end="179:77">plane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="181:9" pos:end="183:35"><if pos:start="181:9" pos:end="183:35">if <condition pos:start="181:12" pos:end="181:40">(<expr pos:start="181:13" pos:end="181:39"><name pos:start="181:13" pos:end="181:35"><name pos:start="181:13" pos:end="181:28">plane_line_bytes</name><index pos:start="181:29" pos:end="181:35">[<expr pos:start="181:30" pos:end="181:34"><name pos:start="181:30" pos:end="181:34">plane</name></expr>]</index></name> <operator pos:start="181:37" pos:end="181:37">&lt;</operator> <literal type="number" pos:start="181:39" pos:end="181:39">0</literal></expr>)</condition><block type="pseudo" pos:start="183:13" pos:end="183:35"><block_content pos:start="183:13" pos:end="183:35">

            <return pos:start="183:13" pos:end="183:35">return <expr pos:start="183:20" pos:end="183:34"><call pos:start="183:20" pos:end="183:34"><name pos:start="183:20" pos:end="183:26">AVERROR</name><argument_list pos:start="183:27" pos:end="183:34">(<argument pos:start="183:28" pos:end="183:33"><expr pos:start="183:28" pos:end="183:33"><name pos:start="183:28" pos:end="183:33">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="189:5" pos:end="191:17"><if pos:start="189:5" pos:end="191:17">if <condition pos:start="189:8" pos:end="189:18">(<expr pos:start="189:9" pos:end="189:17"><operator pos:start="189:9" pos:end="189:9">!</operator><name pos:start="189:10" pos:end="189:17">dst_data</name></expr>)</condition><block type="pseudo" pos:start="191:9" pos:end="191:17"><block_content pos:start="191:9" pos:end="191:17">

        <return pos:start="191:9" pos:end="191:17">return <expr pos:start="191:16" pos:end="191:16"><literal type="number" pos:start="191:16" pos:end="191:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <for pos:start="195:5" pos:end="215:5">for <control pos:start="195:9" pos:end="195:47">(<init pos:start="195:10" pos:end="195:19"><expr pos:start="195:10" pos:end="195:18"><name pos:start="195:10" pos:end="195:14">plane</name> <operator pos:start="195:16" pos:end="195:16">=</operator> <literal type="number" pos:start="195:18" pos:end="195:18">0</literal></expr>;</init> <condition pos:start="195:21" pos:end="195:38"><expr pos:start="195:21" pos:end="195:37"><name pos:start="195:21" pos:end="195:25">plane</name> <operator pos:start="195:27" pos:end="195:27">&lt;</operator> <name pos:start="195:29" pos:end="195:37">nb_planes</name></expr>;</condition> <incr pos:start="195:40" pos:end="195:46"><expr pos:start="195:40" pos:end="195:46"><name pos:start="195:40" pos:end="195:44">plane</name><operator pos:start="195:45" pos:end="195:46">++</operator></expr></incr>)</control> <block pos:start="195:49" pos:end="215:5">{<block_content pos:start="197:9" pos:end="213:9">

        <decl_stmt pos:start="197:9" pos:end="197:51"><decl pos:start="197:9" pos:end="197:50"><type pos:start="197:9" pos:end="197:14"><name pos:start="197:9" pos:end="197:14">size_t</name></type> <name pos:start="197:16" pos:end="197:24">bytewidth</name> <init pos:start="197:26" pos:end="197:50">= <expr pos:start="197:28" pos:end="197:50"><name pos:start="197:28" pos:end="197:50"><name pos:start="197:28" pos:end="197:43">plane_line_bytes</name><index pos:start="197:44" pos:end="197:50">[<expr pos:start="197:45" pos:end="197:49"><name pos:start="197:45" pos:end="197:49">plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="199:9" pos:end="199:40"><decl pos:start="199:9" pos:end="199:39"><type pos:start="199:9" pos:end="199:17"><name pos:start="199:9" pos:end="199:15">uint8_t</name> <modifier pos:start="199:17" pos:end="199:17">*</modifier></type><name pos:start="199:18" pos:end="199:21">data</name> <init pos:start="199:23" pos:end="199:39">= <expr pos:start="199:25" pos:end="199:39"><name pos:start="199:25" pos:end="199:39"><name pos:start="199:25" pos:end="199:32">dst_data</name><index pos:start="199:33" pos:end="199:39">[<expr pos:start="199:34" pos:end="199:38"><name pos:start="199:34" pos:end="199:38">plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="201:9" pos:end="201:76"><decl pos:start="201:9" pos:end="201:75"><type pos:start="201:9" pos:end="201:11"><name pos:start="201:9" pos:end="201:11">int</name></type> <name pos:start="201:13" pos:end="201:22">chroma_div</name> <init pos:start="201:24" pos:end="201:75">= <expr pos:start="201:26" pos:end="201:75"><ternary pos:start="201:26" pos:end="201:75"><condition pos:start="201:26" pos:end="201:51"><expr pos:start="201:26" pos:end="201:49"><name pos:start="201:26" pos:end="201:30">plane</name> <operator pos:start="201:32" pos:end="201:33">==</operator> <literal type="number" pos:start="201:35" pos:end="201:35">1</literal> <operator pos:start="201:37" pos:end="201:38">||</operator> <name pos:start="201:40" pos:end="201:44">plane</name> <operator pos:start="201:46" pos:end="201:47">==</operator> <literal type="number" pos:start="201:49" pos:end="201:49">2</literal></expr> ?</condition><then pos:start="201:53" pos:end="201:71"> <expr pos:start="201:53" pos:end="201:71"><name pos:start="201:53" pos:end="201:71"><name pos:start="201:53" pos:end="201:56">desc</name><operator pos:start="201:57" pos:end="201:58">-&gt;</operator><name pos:start="201:59" pos:end="201:71">log2_chroma_h</name></name></expr> </then><else pos:start="201:73" pos:end="201:75">: <expr pos:start="201:75" pos:end="201:75"><literal type="number" pos:start="201:75" pos:end="201:75">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="203:9" pos:end="203:72"><decl pos:start="203:9" pos:end="203:71"><type pos:start="203:9" pos:end="203:11"><name pos:start="203:9" pos:end="203:11">int</name></type> <name pos:start="203:13" pos:end="203:19">plane_h</name> <init pos:start="203:21" pos:end="203:71">= <expr pos:start="203:23" pos:end="203:71"><operator pos:start="203:23" pos:end="203:23">(</operator><operator pos:start="203:24" pos:end="203:24">(</operator><name pos:start="203:25" pos:end="203:30">height</name> <operator pos:start="203:32" pos:end="203:32">+</operator> <operator pos:start="203:34" pos:end="203:34">(</operator> <literal type="number" pos:start="203:36" pos:end="203:36">1</literal> <operator pos:start="203:38" pos:end="203:39">&lt;&lt;</operator> <name pos:start="203:41" pos:end="203:50">chroma_div</name><operator pos:start="203:51" pos:end="203:51">)</operator> <operator pos:start="203:53" pos:end="203:53">-</operator> <literal type="number" pos:start="203:55" pos:end="203:55">1</literal><operator pos:start="203:56" pos:end="203:56">)</operator><operator pos:start="203:57" pos:end="203:57">)</operator> <operator pos:start="203:59" pos:end="203:60">&gt;&gt;</operator> <name pos:start="203:62" pos:end="203:71">chroma_div</name></expr></init></decl>;</decl_stmt>



        <for pos:start="207:9" pos:end="213:9">for <control pos:start="207:13" pos:end="207:38">(<init pos:start="207:14" pos:end="207:14">;</init> <condition pos:start="207:16" pos:end="207:27"><expr pos:start="207:16" pos:end="207:26"><name pos:start="207:16" pos:end="207:22">plane_h</name> <operator pos:start="207:24" pos:end="207:24">&gt;</operator> <literal type="number" pos:start="207:26" pos:end="207:26">0</literal></expr>;</condition> <incr pos:start="207:29" pos:end="207:37"><expr pos:start="207:29" pos:end="207:37"><name pos:start="207:29" pos:end="207:35">plane_h</name><operator pos:start="207:36" pos:end="207:37">--</operator></expr></incr>)</control> <block pos:start="207:40" pos:end="213:9">{<block_content pos:start="209:13" pos:end="211:40">

            <expr_stmt pos:start="209:13" pos:end="209:91"><expr pos:start="209:13" pos:end="209:90"><call pos:start="209:13" pos:end="209:90"><name pos:start="209:13" pos:end="209:24">memset_bytes</name><argument_list pos:start="209:25" pos:end="209:90">(<argument pos:start="209:26" pos:end="209:29"><expr pos:start="209:26" pos:end="209:29"><name pos:start="209:26" pos:end="209:29">data</name></expr></argument>, <argument pos:start="209:32" pos:end="209:40"><expr pos:start="209:32" pos:end="209:40"><name pos:start="209:32" pos:end="209:40">bytewidth</name></expr></argument>, <argument pos:start="209:43" pos:end="209:64"><expr pos:start="209:43" pos:end="209:64"><operator pos:start="209:43" pos:end="209:43">&amp;</operator><name pos:start="209:44" pos:end="209:64"><name pos:start="209:44" pos:end="209:54">clear_block</name><index pos:start="209:55" pos:end="209:61">[<expr pos:start="209:56" pos:end="209:60"><name pos:start="209:56" pos:end="209:60">plane</name></expr>]</index><index pos:start="209:62" pos:end="209:64">[<expr pos:start="209:63" pos:end="209:63"><literal type="number" pos:start="209:63" pos:end="209:63">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="209:67" pos:end="209:89"><expr pos:start="209:67" pos:end="209:89"><name pos:start="209:67" pos:end="209:89"><name pos:start="209:67" pos:end="209:82">clear_block_size</name><index pos:start="209:83" pos:end="209:89">[<expr pos:start="209:84" pos:end="209:88"><name pos:start="209:84" pos:end="209:88">plane</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="211:13" pos:end="211:40"><expr pos:start="211:13" pos:end="211:39"><name pos:start="211:13" pos:end="211:16">data</name> <operator pos:start="211:18" pos:end="211:19">+=</operator> <name pos:start="211:21" pos:end="211:39"><name pos:start="211:21" pos:end="211:32">dst_linesize</name><index pos:start="211:33" pos:end="211:39">[<expr pos:start="211:34" pos:end="211:38"><name pos:start="211:34" pos:end="211:38">plane</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>



    <return pos:start="219:5" pos:end="219:13">return <expr pos:start="219:12" pos:end="219:12"><literal type="number" pos:start="219:12" pos:end="219:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
