<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/37.c" pos:tabs="8"><function pos:start="1:1" pos:end="197:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:21">ff_get_wav_header</name><parameter_list pos:start="1:22" pos:end="3:70">(<parameter pos:start="1:23" pos:end="1:40"><decl pos:start="1:23" pos:end="1:40"><type pos:start="1:23" pos:end="1:40"><name pos:start="1:23" pos:end="1:37">AVFormatContext</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:40">s</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:57"><decl pos:start="1:43" pos:end="1:57"><type pos:start="1:43" pos:end="1:57"><name pos:start="1:43" pos:end="1:53">AVIOContext</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:57">pb</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:43"><decl pos:start="3:23" pos:end="3:43"><type pos:start="3:23" pos:end="3:43"><name pos:start="3:23" pos:end="3:36">AVCodecContext</name> <modifier pos:start="3:38" pos:end="3:38">*</modifier></type><name pos:start="3:39" pos:end="3:43">codec</name></decl></parameter>, <parameter pos:start="3:46" pos:end="3:53"><decl pos:start="3:46" pos:end="3:53"><type pos:start="3:46" pos:end="3:53"><name pos:start="3:46" pos:end="3:48">int</name></type> <name pos:start="3:50" pos:end="3:53">size</name></decl></parameter>, <parameter pos:start="3:56" pos:end="3:69"><decl pos:start="3:56" pos:end="3:69"><type pos:start="3:56" pos:end="3:69"><name pos:start="3:56" pos:end="3:58">int</name></type> <name pos:start="3:60" pos:end="3:69">big_endian</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="197:1">{<block_content pos:start="7:5" pos:end="195:13">

    <decl_stmt pos:start="7:5" pos:end="7:11"><decl pos:start="7:5" pos:end="7:10"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:10">id</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint64_t</name></type> <name pos:start="9:14" pos:end="9:20">bitrate</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="19:5"><if pos:start="13:5" pos:end="19:5">if <condition pos:start="13:8" pos:end="13:18">(<expr pos:start="13:9" pos:end="13:17"><name pos:start="13:9" pos:end="13:12">size</name> <operator pos:start="13:14" pos:end="13:14">&lt;</operator> <literal type="number" pos:start="13:16" pos:end="13:17">14</literal></expr>)</condition> <block pos:start="13:20" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:35">

        <expr_stmt pos:start="15:9" pos:end="15:61"><expr pos:start="15:9" pos:end="15:60"><call pos:start="15:9" pos:end="15:60"><name pos:start="15:9" pos:end="15:29">avpriv_request_sample</name><argument_list pos:start="15:30" pos:end="15:60">(<argument pos:start="15:31" pos:end="15:35"><expr pos:start="15:31" pos:end="15:35"><name pos:start="15:31" pos:end="15:35">codec</name></expr></argument>, <argument pos:start="15:38" pos:end="15:59"><expr pos:start="15:38" pos:end="15:59"><literal type="string" pos:start="15:38" pos:end="15:59">"wav header size &lt; 14"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="17:9" pos:end="17:35">return <expr pos:start="17:16" pos:end="17:34"><name pos:start="17:16" pos:end="17:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:44"><expr pos:start="23:5" pos:end="23:43"><name pos:start="23:5" pos:end="23:21"><name pos:start="23:5" pos:end="23:9">codec</name><operator pos:start="23:10" pos:end="23:11">-&gt;</operator><name pos:start="23:12" pos:end="23:21">codec_type</name></name>  <operator pos:start="23:24" pos:end="23:24">=</operator> <name pos:start="23:26" pos:end="23:43">AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="49:5"><if pos:start="25:5" pos:end="37:5">if <condition pos:start="25:8" pos:end="25:20">(<expr pos:start="25:9" pos:end="25:19"><operator pos:start="25:9" pos:end="25:9">!</operator><name pos:start="25:10" pos:end="25:19">big_endian</name></expr>)</condition> <block pos:start="25:22" pos:end="37:5">{<block_content pos:start="27:9" pos:end="35:43">

        <expr_stmt pos:start="27:9" pos:end="27:43"><expr pos:start="27:9" pos:end="27:42"><name pos:start="27:9" pos:end="27:10">id</name>                 <operator pos:start="27:28" pos:end="27:28">=</operator> <call pos:start="27:30" pos:end="27:42"><name pos:start="27:30" pos:end="27:38">avio_rl16</name><argument_list pos:start="27:39" pos:end="27:42">(<argument pos:start="27:40" pos:end="27:41"><expr pos:start="27:40" pos:end="27:41"><name pos:start="27:40" pos:end="27:41">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:43"><expr pos:start="29:9" pos:end="29:42"><name pos:start="29:9" pos:end="29:23"><name pos:start="29:9" pos:end="29:13">codec</name><operator pos:start="29:14" pos:end="29:15">-&gt;</operator><name pos:start="29:16" pos:end="29:23">channels</name></name>    <operator pos:start="29:28" pos:end="29:28">=</operator> <call pos:start="29:30" pos:end="29:42"><name pos:start="29:30" pos:end="29:38">avio_rl16</name><argument_list pos:start="29:39" pos:end="29:42">(<argument pos:start="29:40" pos:end="29:41"><expr pos:start="29:40" pos:end="29:41"><name pos:start="29:40" pos:end="29:41">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:43"><expr pos:start="31:9" pos:end="31:42"><name pos:start="31:9" pos:end="31:26"><name pos:start="31:9" pos:end="31:13">codec</name><operator pos:start="31:14" pos:end="31:15">-&gt;</operator><name pos:start="31:16" pos:end="31:26">sample_rate</name></name> <operator pos:start="31:28" pos:end="31:28">=</operator> <call pos:start="31:30" pos:end="31:42"><name pos:start="31:30" pos:end="31:38">avio_rl32</name><argument_list pos:start="31:39" pos:end="31:42">(<argument pos:start="31:40" pos:end="31:41"><expr pos:start="31:40" pos:end="31:41"><name pos:start="31:40" pos:end="31:41">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:47"><expr pos:start="33:9" pos:end="33:46"><name pos:start="33:9" pos:end="33:15">bitrate</name>            <operator pos:start="33:28" pos:end="33:28">=</operator> <call pos:start="33:30" pos:end="33:42"><name pos:start="33:30" pos:end="33:38">avio_rl32</name><argument_list pos:start="33:39" pos:end="33:42">(<argument pos:start="33:40" pos:end="33:41"><expr pos:start="33:40" pos:end="33:41"><name pos:start="33:40" pos:end="33:41">pb</name></expr></argument>)</argument_list></call> <operator pos:start="33:44" pos:end="33:44">*</operator> <literal type="number" pos:start="33:46" pos:end="33:46">8</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:43"><expr pos:start="35:9" pos:end="35:42"><name pos:start="35:9" pos:end="35:26"><name pos:start="35:9" pos:end="35:13">codec</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:26">block_align</name></name> <operator pos:start="35:28" pos:end="35:28">=</operator> <call pos:start="35:30" pos:end="35:42"><name pos:start="35:30" pos:end="35:38">avio_rl16</name><argument_list pos:start="35:39" pos:end="35:42">(<argument pos:start="35:40" pos:end="35:41"><expr pos:start="35:40" pos:end="35:41"><name pos:start="35:40" pos:end="35:41">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="37:7" pos:end="49:5">else <block pos:start="37:12" pos:end="49:5">{<block_content pos:start="39:9" pos:end="47:43">

        <expr_stmt pos:start="39:9" pos:end="39:43"><expr pos:start="39:9" pos:end="39:42"><name pos:start="39:9" pos:end="39:10">id</name>                 <operator pos:start="39:28" pos:end="39:28">=</operator> <call pos:start="39:30" pos:end="39:42"><name pos:start="39:30" pos:end="39:38">avio_rb16</name><argument_list pos:start="39:39" pos:end="39:42">(<argument pos:start="39:40" pos:end="39:41"><expr pos:start="39:40" pos:end="39:41"><name pos:start="39:40" pos:end="39:41">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:43"><expr pos:start="41:9" pos:end="41:42"><name pos:start="41:9" pos:end="41:23"><name pos:start="41:9" pos:end="41:13">codec</name><operator pos:start="41:14" pos:end="41:15">-&gt;</operator><name pos:start="41:16" pos:end="41:23">channels</name></name>    <operator pos:start="41:28" pos:end="41:28">=</operator> <call pos:start="41:30" pos:end="41:42"><name pos:start="41:30" pos:end="41:38">avio_rb16</name><argument_list pos:start="41:39" pos:end="41:42">(<argument pos:start="41:40" pos:end="41:41"><expr pos:start="41:40" pos:end="41:41"><name pos:start="41:40" pos:end="41:41">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:43"><expr pos:start="43:9" pos:end="43:42"><name pos:start="43:9" pos:end="43:26"><name pos:start="43:9" pos:end="43:13">codec</name><operator pos:start="43:14" pos:end="43:15">-&gt;</operator><name pos:start="43:16" pos:end="43:26">sample_rate</name></name> <operator pos:start="43:28" pos:end="43:28">=</operator> <call pos:start="43:30" pos:end="43:42"><name pos:start="43:30" pos:end="43:38">avio_rb32</name><argument_list pos:start="43:39" pos:end="43:42">(<argument pos:start="43:40" pos:end="43:41"><expr pos:start="43:40" pos:end="43:41"><name pos:start="43:40" pos:end="43:41">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:47"><expr pos:start="45:9" pos:end="45:46"><name pos:start="45:9" pos:end="45:15">bitrate</name>            <operator pos:start="45:28" pos:end="45:28">=</operator> <call pos:start="45:30" pos:end="45:42"><name pos:start="45:30" pos:end="45:38">avio_rb32</name><argument_list pos:start="45:39" pos:end="45:42">(<argument pos:start="45:40" pos:end="45:41"><expr pos:start="45:40" pos:end="45:41"><name pos:start="45:40" pos:end="45:41">pb</name></expr></argument>)</argument_list></call> <operator pos:start="45:44" pos:end="45:44">*</operator> <literal type="number" pos:start="45:46" pos:end="45:46">8</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:43"><expr pos:start="47:9" pos:end="47:42"><name pos:start="47:9" pos:end="47:26"><name pos:start="47:9" pos:end="47:13">codec</name><operator pos:start="47:14" pos:end="47:15">-&gt;</operator><name pos:start="47:16" pos:end="47:26">block_align</name></name> <operator pos:start="47:28" pos:end="47:28">=</operator> <call pos:start="47:30" pos:end="47:42"><name pos:start="47:30" pos:end="47:38">avio_rb16</name><argument_list pos:start="47:39" pos:end="47:42">(<argument pos:start="47:40" pos:end="47:41"><expr pos:start="47:40" pos:end="47:41"><name pos:start="47:40" pos:end="47:41">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="51:5" pos:end="67:5"><if pos:start="51:5" pos:end="55:5">if <condition pos:start="51:8" pos:end="51:19">(<expr pos:start="51:9" pos:end="51:18"><name pos:start="51:9" pos:end="51:12">size</name> <operator pos:start="51:14" pos:end="51:15">==</operator> <literal type="number" pos:start="51:17" pos:end="51:18">14</literal></expr>)</condition> <block pos:start="51:21" pos:end="55:5">{<block_content pos:start="53:9" pos:end="53:41">  <comment type="block" pos:start="51:24" pos:end="51:72">/* We're dealing with plain vanilla WAVEFORMAT */</comment>

        <expr_stmt pos:start="53:9" pos:end="53:41"><expr pos:start="53:9" pos:end="53:40"><name pos:start="53:9" pos:end="53:36"><name pos:start="53:9" pos:end="53:13">codec</name><operator pos:start="53:14" pos:end="53:15">-&gt;</operator><name pos:start="53:16" pos:end="53:36">bits_per_coded_sample</name></name> <operator pos:start="53:38" pos:end="53:38">=</operator> <literal type="number" pos:start="53:40" pos:end="53:40">8</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="55:7" pos:end="67:5">else <block pos:start="55:12" pos:end="67:5">{<block_content pos:start="57:9" pos:end="65:9">

        <if_stmt pos:start="57:9" pos:end="65:9"><if pos:start="57:9" pos:end="61:9">if <condition pos:start="57:12" pos:end="57:24">(<expr pos:start="57:13" pos:end="57:23"><operator pos:start="57:13" pos:end="57:13">!</operator><name pos:start="57:14" pos:end="57:23">big_endian</name></expr>)</condition> <block pos:start="57:26" pos:end="61:9">{<block_content pos:start="59:13" pos:end="59:57">

            <expr_stmt pos:start="59:13" pos:end="59:57"><expr pos:start="59:13" pos:end="59:56"><name pos:start="59:13" pos:end="59:40"><name pos:start="59:13" pos:end="59:17">codec</name><operator pos:start="59:18" pos:end="59:19">-&gt;</operator><name pos:start="59:20" pos:end="59:40">bits_per_coded_sample</name></name> <operator pos:start="59:42" pos:end="59:42">=</operator> <call pos:start="59:44" pos:end="59:56"><name pos:start="59:44" pos:end="59:52">avio_rl16</name><argument_list pos:start="59:53" pos:end="59:56">(<argument pos:start="59:54" pos:end="59:55"><expr pos:start="59:54" pos:end="59:55"><name pos:start="59:54" pos:end="59:55">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="61:11" pos:end="65:9">else <block pos:start="61:16" pos:end="65:9">{<block_content pos:start="63:13" pos:end="63:57">

            <expr_stmt pos:start="63:13" pos:end="63:57"><expr pos:start="63:13" pos:end="63:56"><name pos:start="63:13" pos:end="63:40"><name pos:start="63:13" pos:end="63:17">codec</name><operator pos:start="63:18" pos:end="63:19">-&gt;</operator><name pos:start="63:20" pos:end="63:40">bits_per_coded_sample</name></name> <operator pos:start="63:42" pos:end="63:42">=</operator> <call pos:start="63:44" pos:end="63:56"><name pos:start="63:44" pos:end="63:52">avio_rb16</name><argument_list pos:start="63:53" pos:end="63:56">(<argument pos:start="63:54" pos:end="63:55"><expr pos:start="63:54" pos:end="63:55"><name pos:start="63:54" pos:end="63:55">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="69:5" pos:end="81:5"><if pos:start="69:5" pos:end="73:5">if <condition pos:start="69:8" pos:end="69:21">(<expr pos:start="69:9" pos:end="69:20"><name pos:start="69:9" pos:end="69:10">id</name> <operator pos:start="69:12" pos:end="69:13">==</operator> <literal type="number" pos:start="69:15" pos:end="69:20">0xFFFE</literal></expr>)</condition> <block pos:start="69:23" pos:end="73:5">{<block_content pos:start="71:9" pos:end="71:29">

        <expr_stmt pos:start="71:9" pos:end="71:29"><expr pos:start="71:9" pos:end="71:28"><name pos:start="71:9" pos:end="71:24"><name pos:start="71:9" pos:end="71:13">codec</name><operator pos:start="71:14" pos:end="71:15">-&gt;</operator><name pos:start="71:16" pos:end="71:24">codec_tag</name></name> <operator pos:start="71:26" pos:end="71:26">=</operator> <literal type="number" pos:start="71:28" pos:end="71:28">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="73:7" pos:end="81:5">else <block pos:start="73:12" pos:end="81:5">{<block_content pos:start="75:9" pos:end="79:77">

        <expr_stmt pos:start="75:9" pos:end="75:30"><expr pos:start="75:9" pos:end="75:29"><name pos:start="75:9" pos:end="75:24"><name pos:start="75:9" pos:end="75:13">codec</name><operator pos:start="75:14" pos:end="75:15">-&gt;</operator><name pos:start="75:16" pos:end="75:24">codec_tag</name></name> <operator pos:start="75:26" pos:end="75:26">=</operator> <name pos:start="75:28" pos:end="75:29">id</name></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="79:77"><expr pos:start="77:9" pos:end="79:76"><name pos:start="77:9" pos:end="77:23"><name pos:start="77:9" pos:end="77:13">codec</name><operator pos:start="77:14" pos:end="77:15">-&gt;</operator><name pos:start="77:16" pos:end="77:23">codec_id</name></name>  <operator pos:start="77:26" pos:end="77:26">=</operator> <call pos:start="77:28" pos:end="79:76"><name pos:start="77:28" pos:end="77:46">ff_wav_codec_get_id</name><argument_list pos:start="77:47" pos:end="79:76">(<argument pos:start="77:48" pos:end="77:49"><expr pos:start="77:48" pos:end="77:49"><name pos:start="77:48" pos:end="77:49">id</name></expr></argument>,

                                               <argument pos:start="79:48" pos:end="79:75"><expr pos:start="79:48" pos:end="79:75"><name pos:start="79:48" pos:end="79:75"><name pos:start="79:48" pos:end="79:52">codec</name><operator pos:start="79:53" pos:end="79:54">-&gt;</operator><name pos:start="79:55" pos:end="79:75">bits_per_coded_sample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="83:5" pos:end="129:5"><if pos:start="83:5" pos:end="129:5">if <condition pos:start="83:8" pos:end="83:19">(<expr pos:start="83:9" pos:end="83:18"><name pos:start="83:9" pos:end="83:12">size</name> <operator pos:start="83:14" pos:end="83:15">&gt;=</operator> <literal type="number" pos:start="83:17" pos:end="83:18">18</literal></expr>)</condition> <block pos:start="83:21" pos:end="129:5">{<block_content pos:start="85:9" pos:end="127:32">  <comment type="block" pos:start="83:24" pos:end="83:70">/* We're obviously dealing with WAVEFORMATEX */</comment>

        <decl_stmt pos:start="85:9" pos:end="85:35"><decl pos:start="85:9" pos:end="85:34"><type pos:start="85:9" pos:end="85:11"><name pos:start="85:9" pos:end="85:11">int</name></type> <name pos:start="85:13" pos:end="85:18">cbSize</name> <init pos:start="85:20" pos:end="85:34">= <expr pos:start="85:22" pos:end="85:34"><call pos:start="85:22" pos:end="85:34"><name pos:start="85:22" pos:end="85:30">avio_rl16</name><argument_list pos:start="85:31" pos:end="85:34">(<argument pos:start="85:32" pos:end="85:33"><expr pos:start="85:32" pos:end="85:33"><name pos:start="85:32" pos:end="85:33">pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="85:37" pos:end="85:48">/* cbSize */</comment>

        <if_stmt pos:start="87:9" pos:end="93:9"><if pos:start="87:9" pos:end="93:9">if <condition pos:start="87:12" pos:end="87:23">(<expr pos:start="87:13" pos:end="87:22"><name pos:start="87:13" pos:end="87:22">big_endian</name></expr>)</condition> <block pos:start="87:25" pos:end="93:9">{<block_content pos:start="89:13" pos:end="91:40">

            <expr_stmt pos:start="89:13" pos:end="89:90"><expr pos:start="89:13" pos:end="89:89"><call pos:start="89:13" pos:end="89:89"><name pos:start="89:13" pos:end="89:41">avpriv_report_missing_feature</name><argument_list pos:start="89:42" pos:end="89:89">(<argument pos:start="89:43" pos:end="89:47"><expr pos:start="89:43" pos:end="89:47"><name pos:start="89:43" pos:end="89:47">codec</name></expr></argument>, <argument pos:start="89:50" pos:end="89:88"><expr pos:start="89:50" pos:end="89:88"><literal type="string" pos:start="89:50" pos:end="89:88">"WAVEFORMATEX support for RIFX files\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="91:13" pos:end="91:40">return <expr pos:start="91:20" pos:end="91:39"><name pos:start="91:20" pos:end="91:39">AVERROR_PATCHWELCOME</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:20"><expr pos:start="95:9" pos:end="95:19"><name pos:start="95:9" pos:end="95:12">size</name>  <operator pos:start="95:15" pos:end="95:16">-=</operator> <literal type="number" pos:start="95:18" pos:end="95:19">18</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:37"><expr pos:start="97:9" pos:end="97:36"><name pos:start="97:9" pos:end="97:14">cbSize</name> <operator pos:start="97:16" pos:end="97:16">=</operator> <call pos:start="97:18" pos:end="97:36"><name pos:start="97:18" pos:end="97:22">FFMIN</name><argument_list pos:start="97:23" pos:end="97:36">(<argument pos:start="97:24" pos:end="97:27"><expr pos:start="97:24" pos:end="97:27"><name pos:start="97:24" pos:end="97:27">size</name></expr></argument>, <argument pos:start="97:30" pos:end="97:35"><expr pos:start="97:30" pos:end="97:35"><name pos:start="97:30" pos:end="97:35">cbSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="99:9" pos:end="107:9"><if pos:start="99:9" pos:end="107:9">if <condition pos:start="99:12" pos:end="99:41">(<expr pos:start="99:13" pos:end="99:40"><name pos:start="99:13" pos:end="99:18">cbSize</name> <operator pos:start="99:20" pos:end="99:21">&gt;=</operator> <literal type="number" pos:start="99:23" pos:end="99:24">22</literal> <operator pos:start="99:26" pos:end="99:27">&amp;&amp;</operator> <name pos:start="99:29" pos:end="99:30">id</name> <operator pos:start="99:32" pos:end="99:33">==</operator> <literal type="number" pos:start="99:35" pos:end="99:40">0xfffe</literal></expr>)</condition> <block pos:start="99:43" pos:end="107:9">{<block_content pos:start="101:13" pos:end="105:25"> <comment type="block" pos:start="99:45" pos:end="99:70">/* WAVEFORMATEXTENSIBLE */</comment>

            <expr_stmt pos:start="101:13" pos:end="101:42"><expr pos:start="101:13" pos:end="101:41"><call pos:start="101:13" pos:end="101:41"><name pos:start="101:13" pos:end="101:30">parse_waveformatex</name><argument_list pos:start="101:31" pos:end="101:41">(<argument pos:start="101:32" pos:end="101:33"><expr pos:start="101:32" pos:end="101:33"><name pos:start="101:32" pos:end="101:33">pb</name></expr></argument>, <argument pos:start="101:36" pos:end="101:40"><expr pos:start="101:36" pos:end="101:40"><name pos:start="101:36" pos:end="101:40">codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:25"><expr pos:start="103:13" pos:end="103:24"><name pos:start="103:13" pos:end="103:18">cbSize</name> <operator pos:start="103:20" pos:end="103:21">-=</operator> <literal type="number" pos:start="103:23" pos:end="103:24">22</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="105:13" pos:end="105:25"><expr pos:start="105:13" pos:end="105:24"><name pos:start="105:13" pos:end="105:16">size</name>   <operator pos:start="105:20" pos:end="105:21">-=</operator> <literal type="number" pos:start="105:23" pos:end="105:24">22</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="109:9" pos:end="119:9"><if pos:start="109:9" pos:end="119:9">if <condition pos:start="109:12" pos:end="109:23">(<expr pos:start="109:13" pos:end="109:22"><name pos:start="109:13" pos:end="109:18">cbSize</name> <operator pos:start="109:20" pos:end="109:20">&gt;</operator> <literal type="number" pos:start="109:22" pos:end="109:22">0</literal></expr>)</condition> <block pos:start="109:25" pos:end="119:9">{<block_content pos:start="111:13" pos:end="117:27">

            <expr_stmt pos:start="111:13" pos:end="111:40"><expr pos:start="111:13" pos:end="111:39"><call pos:start="111:13" pos:end="111:39"><name pos:start="111:13" pos:end="111:20">av_freep</name><argument_list pos:start="111:21" pos:end="111:39">(<argument pos:start="111:22" pos:end="111:38"><expr pos:start="111:22" pos:end="111:38"><operator pos:start="111:22" pos:end="111:22">&amp;</operator><name pos:start="111:23" pos:end="111:38"><name pos:start="111:23" pos:end="111:27">codec</name><operator pos:start="111:28" pos:end="111:29">-&gt;</operator><name pos:start="111:30" pos:end="111:38">extradata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="113:13" pos:end="115:39"><if pos:start="113:13" pos:end="115:39">if <condition pos:start="113:16" pos:end="113:56">(<expr pos:start="113:17" pos:end="113:55"><call pos:start="113:17" pos:end="113:51"><name pos:start="113:17" pos:end="113:32">ff_get_extradata</name><argument_list pos:start="113:33" pos:end="113:51">(<argument pos:start="113:34" pos:end="113:38"><expr pos:start="113:34" pos:end="113:38"><name pos:start="113:34" pos:end="113:38">codec</name></expr></argument>, <argument pos:start="113:41" pos:end="113:42"><expr pos:start="113:41" pos:end="113:42"><name pos:start="113:41" pos:end="113:42">pb</name></expr></argument>, <argument pos:start="113:45" pos:end="113:50"><expr pos:start="113:45" pos:end="113:50"><name pos:start="113:45" pos:end="113:50">cbSize</name></expr></argument>)</argument_list></call> <operator pos:start="113:53" pos:end="113:53">&lt;</operator> <literal type="number" pos:start="113:55" pos:end="113:55">0</literal></expr>)</condition><block type="pseudo" pos:start="115:17" pos:end="115:39"><block_content pos:start="115:17" pos:end="115:39">

                <return pos:start="115:17" pos:end="115:39">return <expr pos:start="115:24" pos:end="115:38"><call pos:start="115:24" pos:end="115:38"><name pos:start="115:24" pos:end="115:30">AVERROR</name><argument_list pos:start="115:31" pos:end="115:38">(<argument pos:start="115:32" pos:end="115:37"><expr pos:start="115:32" pos:end="115:37"><name pos:start="115:32" pos:end="115:37">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="117:13" pos:end="117:27"><expr pos:start="117:13" pos:end="117:26"><name pos:start="117:13" pos:end="117:16">size</name> <operator pos:start="117:18" pos:end="117:19">-=</operator> <name pos:start="117:21" pos:end="117:26">cbSize</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="123:9" pos:end="123:72">/* It is possible for the chunk to contain garbage at the end */</comment>

        <if_stmt pos:start="125:9" pos:end="127:32"><if pos:start="125:9" pos:end="127:32">if <condition pos:start="125:12" pos:end="125:21">(<expr pos:start="125:13" pos:end="125:20"><name pos:start="125:13" pos:end="125:16">size</name> <operator pos:start="125:18" pos:end="125:18">&gt;</operator> <literal type="number" pos:start="125:20" pos:end="125:20">0</literal></expr>)</condition><block type="pseudo" pos:start="127:13" pos:end="127:32"><block_content pos:start="127:13" pos:end="127:32">

            <expr_stmt pos:start="127:13" pos:end="127:32"><expr pos:start="127:13" pos:end="127:31"><call pos:start="127:13" pos:end="127:31"><name pos:start="127:13" pos:end="127:21">avio_skip</name><argument_list pos:start="127:22" pos:end="127:31">(<argument pos:start="127:23" pos:end="127:24"><expr pos:start="127:23" pos:end="127:24"><name pos:start="127:23" pos:end="127:24">pb</name></expr></argument>, <argument pos:start="127:27" pos:end="127:30"><expr pos:start="127:27" pos:end="127:30"><name pos:start="127:27" pos:end="127:30">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="133:5" pos:end="161:5"><if pos:start="133:5" pos:end="157:5">if <condition pos:start="133:8" pos:end="133:26">(<expr pos:start="133:9" pos:end="133:25"><name pos:start="133:9" pos:end="133:15">bitrate</name> <operator pos:start="133:17" pos:end="133:17">&gt;</operator> <name pos:start="133:19" pos:end="133:25">INT_MAX</name></expr>)</condition> <block pos:start="133:28" pos:end="157:5">{<block_content pos:start="135:9" pos:end="155:9">

        <if_stmt pos:start="135:9" pos:end="155:9"><if pos:start="135:9" pos:end="145:9">if <condition pos:start="135:12" pos:end="135:49">(<expr pos:start="135:13" pos:end="135:48"><name pos:start="135:13" pos:end="135:32"><name pos:start="135:13" pos:end="135:13">s</name><operator pos:start="135:14" pos:end="135:15">-&gt;</operator><name pos:start="135:16" pos:end="135:32">error_recognition</name></name> <operator pos:start="135:34" pos:end="135:34">&amp;</operator> <name pos:start="135:36" pos:end="135:48">AV_EF_EXPLODE</name></expr>)</condition> <block pos:start="135:51" pos:end="145:9">{<block_content pos:start="137:13" pos:end="143:39">

            <expr_stmt pos:start="137:13" pos:end="141:29"><expr pos:start="137:13" pos:end="141:28"><call pos:start="137:13" pos:end="141:28"><name pos:start="137:13" pos:end="137:18">av_log</name><argument_list pos:start="137:19" pos:end="141:28">(<argument pos:start="137:20" pos:end="137:20"><expr pos:start="137:20" pos:end="137:20"><name pos:start="137:20" pos:end="137:20">s</name></expr></argument>, <argument pos:start="137:23" pos:end="137:34"><expr pos:start="137:23" pos:end="137:34"><name pos:start="137:23" pos:end="137:34">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="139:20" pos:end="139:58"><expr pos:start="139:20" pos:end="139:58"><literal type="string" pos:start="139:20" pos:end="139:34">"The bitrate %"</literal><name pos:start="139:35" pos:end="139:40">PRIu64</name><literal type="string" pos:start="139:41" pos:end="139:58">" is too large.\n"</literal></expr></argument>,

                    <argument pos:start="141:21" pos:end="141:27"><expr pos:start="141:21" pos:end="141:27"><name pos:start="141:21" pos:end="141:27">bitrate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="143:13" pos:end="143:39">return <expr pos:start="143:20" pos:end="143:38"><name pos:start="143:20" pos:end="143:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if> <else pos:start="145:11" pos:end="155:9">else <block pos:start="145:16" pos:end="155:9">{<block_content pos:start="147:13" pos:end="153:32">

            <expr_stmt pos:start="147:13" pos:end="151:28"><expr pos:start="147:13" pos:end="151:27"><call pos:start="147:13" pos:end="151:27"><name pos:start="147:13" pos:end="147:18">av_log</name><argument_list pos:start="147:19" pos:end="151:27">(<argument pos:start="147:20" pos:end="147:20"><expr pos:start="147:20" pos:end="147:20"><name pos:start="147:20" pos:end="147:20">s</name></expr></argument>, <argument pos:start="147:23" pos:end="147:36"><expr pos:start="147:23" pos:end="147:36"><name pos:start="147:23" pos:end="147:36">AV_LOG_WARNING</name></expr></argument>,

                   <argument pos:start="149:20" pos:end="149:72"><expr pos:start="149:20" pos:end="149:72"><literal type="string" pos:start="149:20" pos:end="149:34">"The bitrate %"</literal><name pos:start="149:35" pos:end="149:40">PRIu64</name><literal type="string" pos:start="149:41" pos:end="149:72">" is too large, resetting to 0."</literal></expr></argument>,

                   <argument pos:start="151:20" pos:end="151:26"><expr pos:start="151:20" pos:end="151:26"><name pos:start="151:20" pos:end="151:26">bitrate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="153:13" pos:end="153:32"><expr pos:start="153:13" pos:end="153:31"><name pos:start="153:13" pos:end="153:27"><name pos:start="153:13" pos:end="153:17">codec</name><operator pos:start="153:18" pos:end="153:19">-&gt;</operator><name pos:start="153:20" pos:end="153:27">bit_rate</name></name> <operator pos:start="153:29" pos:end="153:29">=</operator> <literal type="number" pos:start="153:31" pos:end="153:31">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="157:7" pos:end="161:5">else <block pos:start="157:12" pos:end="161:5">{<block_content pos:start="159:9" pos:end="159:34">

        <expr_stmt pos:start="159:9" pos:end="159:34"><expr pos:start="159:9" pos:end="159:33"><name pos:start="159:9" pos:end="159:23"><name pos:start="159:9" pos:end="159:13">codec</name><operator pos:start="159:14" pos:end="159:15">-&gt;</operator><name pos:start="159:16" pos:end="159:23">bit_rate</name></name> <operator pos:start="159:25" pos:end="159:25">=</operator> <name pos:start="159:27" pos:end="159:33">bitrate</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="165:5" pos:end="173:5"><if pos:start="165:5" pos:end="173:5">if <condition pos:start="165:8" pos:end="165:32">(<expr pos:start="165:9" pos:end="165:31"><name pos:start="165:9" pos:end="165:26"><name pos:start="165:9" pos:end="165:13">codec</name><operator pos:start="165:14" pos:end="165:15">-&gt;</operator><name pos:start="165:16" pos:end="165:26">sample_rate</name></name> <operator pos:start="165:28" pos:end="165:29">&lt;=</operator> <literal type="number" pos:start="165:31" pos:end="165:31">0</literal></expr>)</condition> <block pos:start="165:34" pos:end="173:5">{<block_content pos:start="167:9" pos:end="171:35">

        <expr_stmt pos:start="167:9" pos:end="169:64"><expr pos:start="167:9" pos:end="169:63"><call pos:start="167:9" pos:end="169:63"><name pos:start="167:9" pos:end="167:14">av_log</name><argument_list pos:start="167:15" pos:end="169:63">(<argument pos:start="167:16" pos:end="167:16"><expr pos:start="167:16" pos:end="167:16"><name pos:start="167:16" pos:end="167:16">s</name></expr></argument>, <argument pos:start="167:19" pos:end="167:30"><expr pos:start="167:19" pos:end="167:30"><name pos:start="167:19" pos:end="167:30">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="169:16" pos:end="169:42"><expr pos:start="169:16" pos:end="169:42"><literal type="string" pos:start="169:16" pos:end="169:42">"Invalid sample rate: %d\n"</literal></expr></argument>, <argument pos:start="169:45" pos:end="169:62"><expr pos:start="169:45" pos:end="169:62"><name pos:start="169:45" pos:end="169:62"><name pos:start="169:45" pos:end="169:49">codec</name><operator pos:start="169:50" pos:end="169:51">-&gt;</operator><name pos:start="169:52" pos:end="169:62">sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="171:9" pos:end="171:35">return <expr pos:start="171:16" pos:end="171:34"><name pos:start="171:16" pos:end="171:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="175:5" pos:end="185:5"><if pos:start="175:5" pos:end="185:5">if <condition pos:start="175:8" pos:end="175:48">(<expr pos:start="175:9" pos:end="175:47"><name pos:start="175:9" pos:end="175:23"><name pos:start="175:9" pos:end="175:13">codec</name><operator pos:start="175:14" pos:end="175:15">-&gt;</operator><name pos:start="175:16" pos:end="175:23">codec_id</name></name> <operator pos:start="175:25" pos:end="175:26">==</operator> <name pos:start="175:28" pos:end="175:47">AV_CODEC_ID_AAC_LATM</name></expr>)</condition> <block pos:start="175:50" pos:end="185:5">{<block_content pos:start="181:9" pos:end="183:31">

        <comment type="block" pos:start="177:9" pos:end="179:24">/* Channels and sample_rate values are those prior to applying SBR

         * and/or PS. */</comment>

        <expr_stmt pos:start="181:9" pos:end="181:31"><expr pos:start="181:9" pos:end="181:30"><name pos:start="181:9" pos:end="181:23"><name pos:start="181:9" pos:end="181:13">codec</name><operator pos:start="181:14" pos:end="181:15">-&gt;</operator><name pos:start="181:16" pos:end="181:23">channels</name></name>    <operator pos:start="181:28" pos:end="181:28">=</operator> <literal type="number" pos:start="181:30" pos:end="181:30">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="183:9" pos:end="183:31"><expr pos:start="183:9" pos:end="183:30"><name pos:start="183:9" pos:end="183:26"><name pos:start="183:9" pos:end="183:13">codec</name><operator pos:start="183:14" pos:end="183:15">-&gt;</operator><name pos:start="183:16" pos:end="183:26">sample_rate</name></name> <operator pos:start="183:28" pos:end="183:28">=</operator> <literal type="number" pos:start="183:30" pos:end="183:30">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="187:5" pos:end="187:50">/* override bits_per_coded_sample for G.726 */</comment>

    <if_stmt pos:start="189:5" pos:end="191:76"><if pos:start="189:5" pos:end="191:76">if <condition pos:start="189:8" pos:end="189:72">(<expr pos:start="189:9" pos:end="189:71"><name pos:start="189:9" pos:end="189:23"><name pos:start="189:9" pos:end="189:13">codec</name><operator pos:start="189:14" pos:end="189:15">-&gt;</operator><name pos:start="189:16" pos:end="189:23">codec_id</name></name> <operator pos:start="189:25" pos:end="189:26">==</operator> <name pos:start="189:28" pos:end="189:49">AV_CODEC_ID_ADPCM_G726</name> <operator pos:start="189:51" pos:end="189:52">&amp;&amp;</operator> <name pos:start="189:54" pos:end="189:71"><name pos:start="189:54" pos:end="189:58">codec</name><operator pos:start="189:59" pos:end="189:60">-&gt;</operator><name pos:start="189:61" pos:end="189:71">sample_rate</name></name></expr>)</condition><block type="pseudo" pos:start="191:9" pos:end="191:76"><block_content pos:start="191:9" pos:end="191:76">

        <expr_stmt pos:start="191:9" pos:end="191:76"><expr pos:start="191:9" pos:end="191:75"><name pos:start="191:9" pos:end="191:36"><name pos:start="191:9" pos:end="191:13">codec</name><operator pos:start="191:14" pos:end="191:15">-&gt;</operator><name pos:start="191:16" pos:end="191:36">bits_per_coded_sample</name></name> <operator pos:start="191:38" pos:end="191:38">=</operator> <name pos:start="191:40" pos:end="191:54"><name pos:start="191:40" pos:end="191:44">codec</name><operator pos:start="191:45" pos:end="191:46">-&gt;</operator><name pos:start="191:47" pos:end="191:54">bit_rate</name></name> <operator pos:start="191:56" pos:end="191:56">/</operator> <name pos:start="191:58" pos:end="191:75"><name pos:start="191:58" pos:end="191:62">codec</name><operator pos:start="191:63" pos:end="191:64">-&gt;</operator><name pos:start="191:65" pos:end="191:75">sample_rate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <return pos:start="195:5" pos:end="195:13">return <expr pos:start="195:12" pos:end="195:12"><literal type="number" pos:start="195:12" pos:end="195:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
