<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20111.c" pos:tabs="8"><function pos:start="1:1" pos:end="171:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">ape_decode_frame</name><parameter_list pos:start="1:28" pos:end="5:44">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:38"><decl pos:start="3:29" pos:end="3:38"><type pos:start="3:29" pos:end="3:38"><name pos:start="3:29" pos:end="3:32">void</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:38">data</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:54"><decl pos:start="3:41" pos:end="3:54"><type pos:start="3:41" pos:end="3:54"><name pos:start="3:41" pos:end="3:43">int</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier></type><name pos:start="3:46" pos:end="3:54">data_size</name></decl></parameter>,

                            <parameter pos:start="5:29" pos:end="5:43"><decl pos:start="5:29" pos:end="5:43"><type pos:start="5:29" pos:end="5:43"><name pos:start="5:29" pos:end="5:36">AVPacket</name> <modifier pos:start="5:38" pos:end="5:38">*</modifier></type><name pos:start="5:39" pos:end="5:43">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="171:1">{<block_content pos:start="9:5" pos:end="169:22">

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">buf</name> <init pos:start="9:24" pos:end="9:36">= <expr pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:30">avpkt</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">buf_size</name> <init pos:start="11:18" pos:end="11:30">= <expr pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:24">avpkt</name><operator pos:start="11:25" pos:end="11:26">-&gt;</operator><name pos:start="11:27" pos:end="11:30">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:37"><decl pos:start="13:5" pos:end="13:36"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:14">APEContext</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:17">s</name> <init pos:start="13:19" pos:end="13:36">= <expr pos:start="13:21" pos:end="13:36"><name pos:start="13:21" pos:end="13:36"><name pos:start="13:21" pos:end="13:25">avctx</name><operator pos:start="13:26" pos:end="13:27">-&gt;</operator><name pos:start="13:28" pos:end="13:36">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:11">int16_t</name> <modifier pos:start="15:13" pos:end="15:13">*</modifier></type><name pos:start="15:14" pos:end="15:20">samples</name> <init pos:start="15:22" pos:end="15:27">= <expr pos:start="15:24" pos:end="15:27"><name pos:start="15:24" pos:end="15:27">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:16"><decl pos:start="17:5" pos:end="17:15"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:15">nblocks</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:13"><decl pos:start="19:5" pos:end="19:9"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:9">i</name></decl>, <decl pos:start="19:12" pos:end="19:12"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:12" pos:end="19:12">n</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:23"><decl pos:start="21:5" pos:end="21:22"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:22">blockstodecode</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:19"><decl pos:start="23:5" pos:end="23:18"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:18">bytes_used</name></decl>;</decl_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:41">/* should not happen but who knows */</comment>

    <if_stmt pos:start="29:5" pos:end="35:5"><if pos:start="29:5" pos:end="35:5">if <condition pos:start="29:8" pos:end="29:59">(<expr pos:start="29:9" pos:end="29:58"><name pos:start="29:9" pos:end="29:23">BLOCKS_PER_LOOP</name> <operator pos:start="29:25" pos:end="29:25">*</operator> <literal type="number" pos:start="29:27" pos:end="29:27">2</literal> <operator pos:start="29:29" pos:end="29:29">*</operator> <name pos:start="29:31" pos:end="29:45"><name pos:start="29:31" pos:end="29:35">avctx</name><operator pos:start="29:36" pos:end="29:37">-&gt;</operator><name pos:start="29:38" pos:end="29:45">channels</name></name> <operator pos:start="29:47" pos:end="29:47">&gt;</operator> <operator pos:start="29:49" pos:end="29:49">*</operator><name pos:start="29:50" pos:end="29:58">data_size</name></expr>)</condition> <block pos:start="29:61" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:31">

        <expr_stmt pos:start="31:9" pos:end="31:70"><expr pos:start="31:9" pos:end="31:69"><call pos:start="31:9" pos:end="31:69"><name pos:start="31:9" pos:end="31:14">av_log</name> <argument_list pos:start="31:16" pos:end="31:69">(<argument pos:start="31:17" pos:end="31:21"><expr pos:start="31:17" pos:end="31:21"><name pos:start="31:17" pos:end="31:21">avctx</name></expr></argument>, <argument pos:start="31:24" pos:end="31:35"><expr pos:start="31:24" pos:end="31:35"><name pos:start="31:24" pos:end="31:35">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="31:38" pos:end="31:68"><expr pos:start="31:38" pos:end="31:68"><literal type="string" pos:start="31:38" pos:end="31:68">"Output buffer is too small.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:31">return <expr pos:start="33:16" pos:end="33:30"><call pos:start="33:16" pos:end="33:30"><name pos:start="33:16" pos:end="33:22">AVERROR</name><argument_list pos:start="33:23" pos:end="33:30">(<argument pos:start="33:24" pos:end="33:29"><expr pos:start="33:24" pos:end="33:29"><name pos:start="33:24" pos:end="33:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="39:5" pos:end="99:5"><if pos:start="39:5" pos:end="99:5">if<condition pos:start="39:7" pos:end="39:19">(<expr pos:start="39:8" pos:end="39:18"><operator pos:start="39:8" pos:end="39:8">!</operator><name pos:start="39:9" pos:end="39:18"><name pos:start="39:9" pos:end="39:9">s</name><operator pos:start="39:10" pos:end="39:11">-&gt;</operator><name pos:start="39:12" pos:end="39:18">samples</name></name></expr>)</condition><block pos:start="39:20" pos:end="99:5">{<block_content pos:start="41:9" pos:end="97:30">

        <decl_stmt pos:start="41:9" pos:end="41:66"><decl pos:start="41:9" pos:end="41:65"><type pos:start="41:9" pos:end="41:14"><name pos:start="41:9" pos:end="41:12">void</name> <modifier pos:start="41:14" pos:end="41:14">*</modifier></type><name pos:start="41:15" pos:end="41:22">tmp_data</name> <init pos:start="41:24" pos:end="41:65">= <expr pos:start="41:26" pos:end="41:65"><call pos:start="41:26" pos:end="41:65"><name pos:start="41:26" pos:end="41:35">av_realloc</name><argument_list pos:start="41:36" pos:end="41:65">(<argument pos:start="41:37" pos:end="41:43"><expr pos:start="41:37" pos:end="41:43"><name pos:start="41:37" pos:end="41:43"><name pos:start="41:37" pos:end="41:37">s</name><operator pos:start="41:38" pos:end="41:39">-&gt;</operator><name pos:start="41:40" pos:end="41:43">data</name></name></expr></argument>, <argument pos:start="41:46" pos:end="41:64"><expr pos:start="41:46" pos:end="41:64"><operator pos:start="41:46" pos:end="41:46">(</operator><name pos:start="41:47" pos:end="41:54">buf_size</name> <operator pos:start="41:56" pos:end="41:56">+</operator> <literal type="number" pos:start="41:58" pos:end="41:58">3</literal><operator pos:start="41:59" pos:end="41:59">)</operator> <operator pos:start="41:61" pos:end="41:61">&amp;</operator> <operator pos:start="41:63" pos:end="41:63">~</operator><literal type="number" pos:start="41:64" pos:end="41:64">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="43:9" pos:end="45:35"><if pos:start="43:9" pos:end="45:35">if <condition pos:start="43:12" pos:end="43:22">(<expr pos:start="43:13" pos:end="43:21"><operator pos:start="43:13" pos:end="43:13">!</operator><name pos:start="43:14" pos:end="43:21">tmp_data</name></expr>)</condition><block type="pseudo" pos:start="45:13" pos:end="45:35"><block_content pos:start="45:13" pos:end="45:35">

            <return pos:start="45:13" pos:end="45:35">return <expr pos:start="45:20" pos:end="45:34"><call pos:start="45:20" pos:end="45:34"><name pos:start="45:20" pos:end="45:26">AVERROR</name><argument_list pos:start="45:27" pos:end="45:34">(<argument pos:start="45:28" pos:end="45:33"><expr pos:start="45:28" pos:end="45:33"><name pos:start="45:28" pos:end="45:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:27"><expr pos:start="47:9" pos:end="47:26"><name pos:start="47:9" pos:end="47:15"><name pos:start="47:9" pos:end="47:9">s</name><operator pos:start="47:10" pos:end="47:11">-&gt;</operator><name pos:start="47:12" pos:end="47:15">data</name></name> <operator pos:start="47:17" pos:end="47:17">=</operator> <name pos:start="47:19" pos:end="47:26">tmp_data</name></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:82"><expr pos:start="49:9" pos:end="49:81"><call pos:start="49:9" pos:end="49:81"><name pos:start="49:9" pos:end="49:24"><name pos:start="49:9" pos:end="49:9">s</name><operator pos:start="49:10" pos:end="49:11">-&gt;</operator><name pos:start="49:12" pos:end="49:14">dsp</name><operator pos:start="49:15" pos:end="49:15">.</operator><name pos:start="49:16" pos:end="49:24">bswap_buf</name></name><argument_list pos:start="49:25" pos:end="49:81">(<argument pos:start="49:26" pos:end="49:43"><expr pos:start="49:26" pos:end="49:43"><operator pos:start="49:26" pos:end="49:26">(</operator><name pos:start="49:27" pos:end="49:34">uint32_t</name><operator pos:start="49:35" pos:end="49:35">*</operator><operator pos:start="49:36" pos:end="49:36">)</operator><name pos:start="49:37" pos:end="49:43"><name pos:start="49:37" pos:end="49:37">s</name><operator pos:start="49:38" pos:end="49:39">-&gt;</operator><name pos:start="49:40" pos:end="49:43">data</name></name></expr></argument>, <argument pos:start="49:46" pos:end="49:65"><expr pos:start="49:46" pos:end="49:65"><operator pos:start="49:46" pos:end="49:46">(</operator><specifier pos:start="49:47" pos:end="49:51">const</specifier> <name pos:start="49:53" pos:end="49:60">uint32_t</name><operator pos:start="49:61" pos:end="49:61">*</operator><operator pos:start="49:62" pos:end="49:62">)</operator><name pos:start="49:63" pos:end="49:65">buf</name></expr></argument>, <argument pos:start="49:68" pos:end="49:80"><expr pos:start="49:68" pos:end="49:80"><name pos:start="49:68" pos:end="49:75">buf_size</name> <operator pos:start="49:77" pos:end="49:78">&gt;&gt;</operator> <literal type="number" pos:start="49:80" pos:end="49:80">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:39"><expr pos:start="51:9" pos:end="51:38"><name pos:start="51:9" pos:end="51:14"><name pos:start="51:9" pos:end="51:9">s</name><operator pos:start="51:10" pos:end="51:11">-&gt;</operator><name pos:start="51:12" pos:end="51:14">ptr</name></name> <operator pos:start="51:16" pos:end="51:16">=</operator> <name pos:start="51:18" pos:end="51:28"><name pos:start="51:18" pos:end="51:18">s</name><operator pos:start="51:19" pos:end="51:20">-&gt;</operator><name pos:start="51:21" pos:end="51:28">last_ptr</name></name> <operator pos:start="51:30" pos:end="51:30">=</operator> <name pos:start="51:32" pos:end="51:38"><name pos:start="51:32" pos:end="51:32">s</name><operator pos:start="51:33" pos:end="51:34">-&gt;</operator><name pos:start="51:35" pos:end="51:38">data</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:41"><expr pos:start="53:9" pos:end="53:40"><name pos:start="53:9" pos:end="53:19"><name pos:start="53:9" pos:end="53:9">s</name><operator pos:start="53:10" pos:end="53:11">-&gt;</operator><name pos:start="53:12" pos:end="53:19">data_end</name></name> <operator pos:start="53:21" pos:end="53:21">=</operator> <name pos:start="53:23" pos:end="53:29"><name pos:start="53:23" pos:end="53:23">s</name><operator pos:start="53:24" pos:end="53:25">-&gt;</operator><name pos:start="53:26" pos:end="53:29">data</name></name> <operator pos:start="53:31" pos:end="53:31">+</operator> <name pos:start="53:33" pos:end="53:40">buf_size</name></expr>;</expr_stmt>



        <expr_stmt pos:start="57:9" pos:end="57:60"><expr pos:start="57:9" pos:end="57:59"><name pos:start="57:9" pos:end="57:15">nblocks</name> <operator pos:start="57:17" pos:end="57:17">=</operator> <name pos:start="57:19" pos:end="57:28"><name pos:start="57:19" pos:end="57:19">s</name><operator pos:start="57:20" pos:end="57:21">-&gt;</operator><name pos:start="57:22" pos:end="57:28">samples</name></name> <operator pos:start="57:30" pos:end="57:30">=</operator> <call pos:start="57:32" pos:end="57:59"><name pos:start="57:32" pos:end="57:50">bytestream_get_be32</name><argument_list pos:start="57:51" pos:end="57:59">(<argument pos:start="57:52" pos:end="57:58"><expr pos:start="57:52" pos:end="57:58"><operator pos:start="57:52" pos:end="57:52">&amp;</operator><name pos:start="57:53" pos:end="57:58"><name pos:start="57:53" pos:end="57:53">s</name><operator pos:start="57:54" pos:end="57:55">-&gt;</operator><name pos:start="57:56" pos:end="57:58">ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:42"><expr pos:start="59:9" pos:end="59:41"><name pos:start="59:9" pos:end="59:9">n</name> <operator pos:start="59:11" pos:end="59:11">=</operator>  <call pos:start="59:14" pos:end="59:41"><name pos:start="59:14" pos:end="59:32">bytestream_get_be32</name><argument_list pos:start="59:33" pos:end="59:41">(<argument pos:start="59:34" pos:end="59:40"><expr pos:start="59:34" pos:end="59:40"><operator pos:start="59:34" pos:end="59:34">&amp;</operator><name pos:start="59:35" pos:end="59:40"><name pos:start="59:35" pos:end="59:35">s</name><operator pos:start="59:36" pos:end="59:37">-&gt;</operator><name pos:start="59:38" pos:end="59:40">ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="61:9" pos:end="69:9"><if pos:start="61:9" pos:end="69:9">if<condition pos:start="61:11" pos:end="61:26">(<expr pos:start="61:12" pos:end="61:25"><name pos:start="61:12" pos:end="61:23"><name pos:start="61:12" pos:end="61:12">n</name> <argument_list type="generic" pos:start="61:14" pos:end="61:23">&lt; <argument pos:start="61:16" pos:end="61:21"><expr pos:start="61:16" pos:end="61:21"><literal type="number" pos:start="61:16" pos:end="61:16">0</literal> <operator pos:start="61:18" pos:end="61:19">||</operator> <name pos:start="61:21" pos:end="61:21">n</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="61:25" pos:end="61:25">3</literal></expr>)</condition><block pos:start="61:27" pos:end="69:9">{<block_content pos:start="63:13" pos:end="67:39">

            <expr_stmt pos:start="63:13" pos:end="63:69"><expr pos:start="63:13" pos:end="63:68"><call pos:start="63:13" pos:end="63:68"><name pos:start="63:13" pos:end="63:18">av_log</name><argument_list pos:start="63:19" pos:end="63:68">(<argument pos:start="63:20" pos:end="63:24"><expr pos:start="63:20" pos:end="63:24"><name pos:start="63:20" pos:end="63:24">avctx</name></expr></argument>, <argument pos:start="63:27" pos:end="63:38"><expr pos:start="63:27" pos:end="63:38"><name pos:start="63:27" pos:end="63:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="63:41" pos:end="63:67"><expr pos:start="63:41" pos:end="63:67"><literal type="string" pos:start="63:41" pos:end="63:67">"Incorrect offset passed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:27"><expr pos:start="65:13" pos:end="65:26"><name pos:start="65:13" pos:end="65:19"><name pos:start="65:13" pos:end="65:13">s</name><operator pos:start="65:14" pos:end="65:15">-&gt;</operator><name pos:start="65:16" pos:end="65:19">data</name></name> <operator pos:start="65:21" pos:end="65:21">=</operator> <name pos:start="65:23" pos:end="65:26">NULL</name></expr>;</expr_stmt>

            <return pos:start="67:13" pos:end="67:39">return <expr pos:start="67:20" pos:end="67:38"><name pos:start="67:20" pos:end="67:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:20"><expr pos:start="71:9" pos:end="71:19"><name pos:start="71:9" pos:end="71:14"><name pos:start="71:9" pos:end="71:9">s</name><operator pos:start="71:10" pos:end="71:11">-&gt;</operator><name pos:start="71:12" pos:end="71:14">ptr</name></name> <operator pos:start="71:16" pos:end="71:17">+=</operator> <name pos:start="71:19" pos:end="71:19">n</name></expr>;</expr_stmt>



        <expr_stmt pos:start="75:9" pos:end="75:40"><expr pos:start="75:9" pos:end="75:39"><name pos:start="75:9" pos:end="75:29"><name pos:start="75:9" pos:end="75:9">s</name><operator pos:start="75:10" pos:end="75:11">-&gt;</operator><name pos:start="75:12" pos:end="75:29">currentframeblocks</name></name> <operator pos:start="75:31" pos:end="75:31">=</operator> <name pos:start="75:33" pos:end="75:39">nblocks</name></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:17"><expr pos:start="77:9" pos:end="77:16"><name pos:start="77:9" pos:end="77:11">buf</name> <operator pos:start="77:13" pos:end="77:14">+=</operator> <literal type="number" pos:start="77:16" pos:end="77:16">4</literal></expr>;</expr_stmt>

        <if_stmt pos:start="79:9" pos:end="85:9"><if pos:start="79:9" pos:end="85:9">if <condition pos:start="79:12" pos:end="79:28">(<expr pos:start="79:13" pos:end="79:27"><name pos:start="79:13" pos:end="79:22"><name pos:start="79:13" pos:end="79:13">s</name><operator pos:start="79:14" pos:end="79:15">-&gt;</operator><name pos:start="79:16" pos:end="79:22">samples</name></name> <operator pos:start="79:24" pos:end="79:25">&lt;=</operator> <literal type="number" pos:start="79:27" pos:end="79:27">0</literal></expr>)</condition> <block pos:start="79:30" pos:end="85:9">{<block_content pos:start="81:13" pos:end="83:28">

            <expr_stmt pos:start="81:13" pos:end="81:27"><expr pos:start="81:13" pos:end="81:26"><operator pos:start="81:13" pos:end="81:13">*</operator><name pos:start="81:14" pos:end="81:22">data_size</name> <operator pos:start="81:24" pos:end="81:24">=</operator> <literal type="number" pos:start="81:26" pos:end="81:26">0</literal></expr>;</expr_stmt>

            <return pos:start="83:13" pos:end="83:28">return <expr pos:start="83:20" pos:end="83:27"><name pos:start="83:20" pos:end="83:27">buf_size</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="89:9" pos:end="89:53"><expr pos:start="89:9" pos:end="89:52"><call pos:start="89:9" pos:end="89:52"><name pos:start="89:9" pos:end="89:14">memset</name><argument_list pos:start="89:15" pos:end="89:52">(<argument pos:start="89:16" pos:end="89:26"><expr pos:start="89:16" pos:end="89:26"><name pos:start="89:16" pos:end="89:26"><name pos:start="89:16" pos:end="89:16">s</name><operator pos:start="89:17" pos:end="89:18">-&gt;</operator><name pos:start="89:19" pos:end="89:26">decoded0</name></name></expr></argument>,  <argument pos:start="89:30" pos:end="89:30"><expr pos:start="89:30" pos:end="89:30"><literal type="number" pos:start="89:30" pos:end="89:30">0</literal></expr></argument>, <argument pos:start="89:33" pos:end="89:51"><expr pos:start="89:33" pos:end="89:51"><sizeof pos:start="89:33" pos:end="89:51">sizeof<argument_list pos:start="89:39" pos:end="89:51">(<argument pos:start="89:40" pos:end="89:50"><expr pos:start="89:40" pos:end="89:50"><name pos:start="89:40" pos:end="89:50"><name pos:start="89:40" pos:end="89:40">s</name><operator pos:start="89:41" pos:end="89:42">-&gt;</operator><name pos:start="89:43" pos:end="89:50">decoded0</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:53"><expr pos:start="91:9" pos:end="91:52"><call pos:start="91:9" pos:end="91:52"><name pos:start="91:9" pos:end="91:14">memset</name><argument_list pos:start="91:15" pos:end="91:52">(<argument pos:start="91:16" pos:end="91:26"><expr pos:start="91:16" pos:end="91:26"><name pos:start="91:16" pos:end="91:26"><name pos:start="91:16" pos:end="91:16">s</name><operator pos:start="91:17" pos:end="91:18">-&gt;</operator><name pos:start="91:19" pos:end="91:26">decoded1</name></name></expr></argument>,  <argument pos:start="91:30" pos:end="91:30"><expr pos:start="91:30" pos:end="91:30"><literal type="number" pos:start="91:30" pos:end="91:30">0</literal></expr></argument>, <argument pos:start="91:33" pos:end="91:51"><expr pos:start="91:33" pos:end="91:51"><sizeof pos:start="91:33" pos:end="91:51">sizeof<argument_list pos:start="91:39" pos:end="91:51">(<argument pos:start="91:40" pos:end="91:50"><expr pos:start="91:40" pos:end="91:50"><name pos:start="91:40" pos:end="91:50"><name pos:start="91:40" pos:end="91:40">s</name><operator pos:start="91:41" pos:end="91:42">-&gt;</operator><name pos:start="91:43" pos:end="91:50">decoded1</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="95:9" pos:end="95:42">/* Initialize the frame decoder */</comment>

        <expr_stmt pos:start="97:9" pos:end="97:30"><expr pos:start="97:9" pos:end="97:29"><call pos:start="97:9" pos:end="97:29"><name pos:start="97:9" pos:end="97:26">init_frame_decoder</name><argument_list pos:start="97:27" pos:end="97:29">(<argument pos:start="97:28" pos:end="97:28"><expr pos:start="97:28" pos:end="97:28"><name pos:start="97:28" pos:end="97:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="103:5" pos:end="109:5"><if pos:start="103:5" pos:end="109:5">if <condition pos:start="103:8" pos:end="103:17">(<expr pos:start="103:9" pos:end="103:16"><operator pos:start="103:9" pos:end="103:9">!</operator><name pos:start="103:10" pos:end="103:16"><name pos:start="103:10" pos:end="103:10">s</name><operator pos:start="103:11" pos:end="103:12">-&gt;</operator><name pos:start="103:13" pos:end="103:16">data</name></name></expr>)</condition> <block pos:start="103:19" pos:end="109:5">{<block_content pos:start="105:9" pos:end="107:24">

        <expr_stmt pos:start="105:9" pos:end="105:23"><expr pos:start="105:9" pos:end="105:22"><operator pos:start="105:9" pos:end="105:9">*</operator><name pos:start="105:10" pos:end="105:18">data_size</name> <operator pos:start="105:20" pos:end="105:20">=</operator> <literal type="number" pos:start="105:22" pos:end="105:22">0</literal></expr>;</expr_stmt>

        <return pos:start="107:9" pos:end="107:24">return <expr pos:start="107:16" pos:end="107:23"><name pos:start="107:16" pos:end="107:23">buf_size</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="113:5" pos:end="113:25"><expr pos:start="113:5" pos:end="113:24"><name pos:start="113:5" pos:end="113:11">nblocks</name> <operator pos:start="113:13" pos:end="113:13">=</operator> <name pos:start="113:15" pos:end="113:24"><name pos:start="113:15" pos:end="113:15">s</name><operator pos:start="113:16" pos:end="113:17">-&gt;</operator><name pos:start="113:18" pos:end="113:24">samples</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:53"><expr pos:start="115:5" pos:end="115:52"><name pos:start="115:5" pos:end="115:18">blockstodecode</name> <operator pos:start="115:20" pos:end="115:20">=</operator> <call pos:start="115:22" pos:end="115:52"><name pos:start="115:22" pos:end="115:26">FFMIN</name><argument_list pos:start="115:27" pos:end="115:52">(<argument pos:start="115:28" pos:end="115:42"><expr pos:start="115:28" pos:end="115:42"><name pos:start="115:28" pos:end="115:42">BLOCKS_PER_LOOP</name></expr></argument>, <argument pos:start="115:45" pos:end="115:51"><expr pos:start="115:45" pos:end="115:51"><name pos:start="115:45" pos:end="115:51">nblocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="119:5" pos:end="119:15"><expr pos:start="119:5" pos:end="119:14"><name pos:start="119:5" pos:end="119:12"><name pos:start="119:5" pos:end="119:5">s</name><operator pos:start="119:6" pos:end="119:7">-&gt;</operator><name pos:start="119:8" pos:end="119:12">error</name></name><operator pos:start="119:13" pos:end="119:13">=</operator><literal type="number" pos:start="119:14" pos:end="119:14">0</literal></expr>;</expr_stmt>



    <if_stmt pos:start="123:5" pos:end="129:45"><if pos:start="123:5" pos:end="125:43">if <condition pos:start="123:8" pos:end="123:76">(<expr pos:start="123:9" pos:end="123:75"><operator pos:start="123:9" pos:end="123:9">(</operator><name pos:start="123:10" pos:end="123:20"><name pos:start="123:10" pos:end="123:10">s</name><operator pos:start="123:11" pos:end="123:12">-&gt;</operator><name pos:start="123:13" pos:end="123:20">channels</name></name> <operator pos:start="123:22" pos:end="123:23">==</operator> <literal type="number" pos:start="123:25" pos:end="123:25">1</literal><operator pos:start="123:26" pos:end="123:26">)</operator> <operator pos:start="123:28" pos:end="123:29">||</operator> <operator pos:start="123:31" pos:end="123:31">(</operator><name pos:start="123:32" pos:end="123:44"><name pos:start="123:32" pos:end="123:32">s</name><operator pos:start="123:33" pos:end="123:34">-&gt;</operator><name pos:start="123:35" pos:end="123:44">frameflags</name></name> <operator pos:start="123:46" pos:end="123:46">&amp;</operator> <name pos:start="123:48" pos:end="123:74">APE_FRAMECODE_PSEUDO_STEREO</name><operator pos:start="123:75" pos:end="123:75">)</operator></expr>)</condition><block type="pseudo" pos:start="125:9" pos:end="125:43"><block_content pos:start="125:9" pos:end="125:43">

        <expr_stmt pos:start="125:9" pos:end="125:43"><expr pos:start="125:9" pos:end="125:42"><call pos:start="125:9" pos:end="125:42"><name pos:start="125:9" pos:end="125:23">ape_unpack_mono</name><argument_list pos:start="125:24" pos:end="125:42">(<argument pos:start="125:25" pos:end="125:25"><expr pos:start="125:25" pos:end="125:25"><name pos:start="125:25" pos:end="125:25">s</name></expr></argument>, <argument pos:start="125:28" pos:end="125:41"><expr pos:start="125:28" pos:end="125:41"><name pos:start="125:28" pos:end="125:41">blockstodecode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="127:5" pos:end="129:45">else<block type="pseudo" pos:start="129:9" pos:end="129:45"><block_content pos:start="129:9" pos:end="129:45">

        <expr_stmt pos:start="129:9" pos:end="129:45"><expr pos:start="129:9" pos:end="129:44"><call pos:start="129:9" pos:end="129:44"><name pos:start="129:9" pos:end="129:25">ape_unpack_stereo</name><argument_list pos:start="129:26" pos:end="129:44">(<argument pos:start="129:27" pos:end="129:27"><expr pos:start="129:27" pos:end="129:27"><name pos:start="129:27" pos:end="129:27">s</name></expr></argument>, <argument pos:start="129:30" pos:end="129:43"><expr pos:start="129:30" pos:end="129:43"><name pos:start="129:30" pos:end="129:43">blockstodecode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:13"><expr pos:start="131:5" pos:end="131:12"><call pos:start="131:5" pos:end="131:12"><name pos:start="131:5" pos:end="131:10">emms_c</name><argument_list pos:start="131:11" pos:end="131:12">()</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="135:5" pos:end="143:5"><if pos:start="135:5" pos:end="143:5">if<condition pos:start="135:7" pos:end="135:40">(<expr pos:start="135:8" pos:end="135:39"><name pos:start="135:8" pos:end="135:15"><name pos:start="135:8" pos:end="135:8">s</name><operator pos:start="135:9" pos:end="135:10">-&gt;</operator><name pos:start="135:11" pos:end="135:15">error</name></name> <operator pos:start="135:17" pos:end="135:18">||</operator> <name pos:start="135:20" pos:end="135:25"><name pos:start="135:20" pos:end="135:20">s</name><operator pos:start="135:21" pos:end="135:22">-&gt;</operator><name pos:start="135:23" pos:end="135:25">ptr</name></name> <operator pos:start="135:27" pos:end="135:27">&gt;</operator> <name pos:start="135:29" pos:end="135:39"><name pos:start="135:29" pos:end="135:29">s</name><operator pos:start="135:30" pos:end="135:31">-&gt;</operator><name pos:start="135:32" pos:end="135:39">data_end</name></name></expr>)</condition><block pos:start="135:41" pos:end="143:5">{<block_content pos:start="137:9" pos:end="141:35">

        <expr_stmt pos:start="137:9" pos:end="137:21"><expr pos:start="137:9" pos:end="137:20"><name pos:start="137:9" pos:end="137:18"><name pos:start="137:9" pos:end="137:9">s</name><operator pos:start="137:10" pos:end="137:11">-&gt;</operator><name pos:start="137:12" pos:end="137:18">samples</name></name><operator pos:start="137:19" pos:end="137:19">=</operator><literal type="number" pos:start="137:20" pos:end="137:20">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:62"><expr pos:start="139:9" pos:end="139:61"><call pos:start="139:9" pos:end="139:61"><name pos:start="139:9" pos:end="139:14">av_log</name><argument_list pos:start="139:15" pos:end="139:61">(<argument pos:start="139:16" pos:end="139:20"><expr pos:start="139:16" pos:end="139:20"><name pos:start="139:16" pos:end="139:20">avctx</name></expr></argument>, <argument pos:start="139:23" pos:end="139:34"><expr pos:start="139:23" pos:end="139:34"><name pos:start="139:23" pos:end="139:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="139:37" pos:end="139:60"><expr pos:start="139:37" pos:end="139:60"><literal type="string" pos:start="139:37" pos:end="139:60">"Error decoding frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="141:9" pos:end="141:35">return <expr pos:start="141:16" pos:end="141:34"><name pos:start="141:16" pos:end="141:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="147:5" pos:end="155:5">for <control pos:start="147:9" pos:end="147:40">(<init pos:start="147:10" pos:end="147:15"><expr pos:start="147:10" pos:end="147:14"><name pos:start="147:10" pos:end="147:10">i</name> <operator pos:start="147:12" pos:end="147:12">=</operator> <literal type="number" pos:start="147:14" pos:end="147:14">0</literal></expr>;</init> <condition pos:start="147:17" pos:end="147:35"><expr pos:start="147:17" pos:end="147:34"><name pos:start="147:17" pos:end="147:17">i</name> <operator pos:start="147:19" pos:end="147:19">&lt;</operator> <name pos:start="147:21" pos:end="147:34">blockstodecode</name></expr>;</condition> <incr pos:start="147:37" pos:end="147:39"><expr pos:start="147:37" pos:end="147:39"><name pos:start="147:37" pos:end="147:37">i</name><operator pos:start="147:38" pos:end="147:39">++</operator></expr></incr>)</control> <block pos:start="147:42" pos:end="155:5">{<block_content pos:start="149:9" pos:end="153:40">

        <expr_stmt pos:start="149:9" pos:end="149:36"><expr pos:start="149:9" pos:end="149:35"><operator pos:start="149:9" pos:end="149:9">*</operator><name pos:start="149:10" pos:end="149:16">samples</name><operator pos:start="149:17" pos:end="149:18">++</operator> <operator pos:start="149:20" pos:end="149:20">=</operator> <name pos:start="149:22" pos:end="149:35"><name pos:start="149:22" pos:end="149:22">s</name><operator pos:start="149:23" pos:end="149:24">-&gt;</operator><name pos:start="149:25" pos:end="149:32">decoded0</name><index pos:start="149:33" pos:end="149:35">[<expr pos:start="149:34" pos:end="149:34"><name pos:start="149:34" pos:end="149:34">i</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="151:9" pos:end="153:40"><if pos:start="151:9" pos:end="153:40">if<condition pos:start="151:11" pos:end="151:28">(<expr pos:start="151:12" pos:end="151:27"><name pos:start="151:12" pos:end="151:22"><name pos:start="151:12" pos:end="151:12">s</name><operator pos:start="151:13" pos:end="151:14">-&gt;</operator><name pos:start="151:15" pos:end="151:22">channels</name></name> <operator pos:start="151:24" pos:end="151:25">==</operator> <literal type="number" pos:start="151:27" pos:end="151:27">2</literal></expr>)</condition><block type="pseudo" pos:start="153:13" pos:end="153:40"><block_content pos:start="153:13" pos:end="153:40">

            <expr_stmt pos:start="153:13" pos:end="153:40"><expr pos:start="153:13" pos:end="153:39"><operator pos:start="153:13" pos:end="153:13">*</operator><name pos:start="153:14" pos:end="153:20">samples</name><operator pos:start="153:21" pos:end="153:22">++</operator> <operator pos:start="153:24" pos:end="153:24">=</operator> <name pos:start="153:26" pos:end="153:39"><name pos:start="153:26" pos:end="153:26">s</name><operator pos:start="153:27" pos:end="153:28">-&gt;</operator><name pos:start="153:29" pos:end="153:36">decoded1</name><index pos:start="153:37" pos:end="153:39">[<expr pos:start="153:38" pos:end="153:38"><name pos:start="153:38" pos:end="153:38">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="159:5" pos:end="159:33"><expr pos:start="159:5" pos:end="159:32"><name pos:start="159:5" pos:end="159:14"><name pos:start="159:5" pos:end="159:5">s</name><operator pos:start="159:6" pos:end="159:7">-&gt;</operator><name pos:start="159:8" pos:end="159:14">samples</name></name> <operator pos:start="159:16" pos:end="159:17">-=</operator> <name pos:start="159:19" pos:end="159:32">blockstodecode</name></expr>;</expr_stmt>



    <expr_stmt pos:start="163:5" pos:end="163:50"><expr pos:start="163:5" pos:end="163:49"><operator pos:start="163:5" pos:end="163:5">*</operator><name pos:start="163:6" pos:end="163:14">data_size</name> <operator pos:start="163:16" pos:end="163:16">=</operator> <name pos:start="163:18" pos:end="163:31">blockstodecode</name> <operator pos:start="163:33" pos:end="163:33">*</operator> <literal type="number" pos:start="163:35" pos:end="163:35">2</literal> <operator pos:start="163:37" pos:end="163:37">*</operator> <name pos:start="163:39" pos:end="163:49"><name pos:start="163:39" pos:end="163:39">s</name><operator pos:start="163:40" pos:end="163:41">-&gt;</operator><name pos:start="163:42" pos:end="163:49">channels</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="165:5" pos:end="165:62"><expr pos:start="165:5" pos:end="165:61"><name pos:start="165:5" pos:end="165:14">bytes_used</name> <operator pos:start="165:16" pos:end="165:16">=</operator> <ternary pos:start="165:18" pos:end="165:61"><condition pos:start="165:18" pos:end="165:29"><expr pos:start="165:18" pos:end="165:27"><name pos:start="165:18" pos:end="165:27"><name pos:start="165:18" pos:end="165:18">s</name><operator pos:start="165:19" pos:end="165:20">-&gt;</operator><name pos:start="165:21" pos:end="165:27">samples</name></name></expr> ?</condition><then pos:start="165:31" pos:end="165:50"> <expr pos:start="165:31" pos:end="165:50"><name pos:start="165:31" pos:end="165:36"><name pos:start="165:31" pos:end="165:31">s</name><operator pos:start="165:32" pos:end="165:33">-&gt;</operator><name pos:start="165:34" pos:end="165:36">ptr</name></name> <operator pos:start="165:38" pos:end="165:38">-</operator> <name pos:start="165:40" pos:end="165:50"><name pos:start="165:40" pos:end="165:40">s</name><operator pos:start="165:41" pos:end="165:42">-&gt;</operator><name pos:start="165:43" pos:end="165:50">last_ptr</name></name></expr> </then><else pos:start="165:52" pos:end="165:61">: <expr pos:start="165:54" pos:end="165:61"><name pos:start="165:54" pos:end="165:61">buf_size</name></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt pos:start="167:5" pos:end="167:25"><expr pos:start="167:5" pos:end="167:24"><name pos:start="167:5" pos:end="167:15"><name pos:start="167:5" pos:end="167:5">s</name><operator pos:start="167:6" pos:end="167:7">-&gt;</operator><name pos:start="167:8" pos:end="167:15">last_ptr</name></name> <operator pos:start="167:17" pos:end="167:17">=</operator> <name pos:start="167:19" pos:end="167:24"><name pos:start="167:19" pos:end="167:19">s</name><operator pos:start="167:20" pos:end="167:21">-&gt;</operator><name pos:start="167:22" pos:end="167:24">ptr</name></name></expr>;</expr_stmt>

    <return pos:start="169:5" pos:end="169:22">return <expr pos:start="169:12" pos:end="169:21"><name pos:start="169:12" pos:end="169:21">bytes_used</name></expr>;</return>

</block_content>}</block></function>
</unit>
