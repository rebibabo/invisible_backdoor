<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/16720.c" pos:tabs="8"><function pos:start="1:1" pos:end="225:1"><type pos:start="1:1" pos:end="1:24"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <name pos:start="1:13" pos:end="1:24">coroutine_fn</name></type> <name pos:start="1:26" pos:end="1:35">stream_run</name><parameter_list pos:start="1:36" pos:end="1:49">(<parameter pos:start="1:37" pos:end="1:48"><decl pos:start="1:37" pos:end="1:48"><type pos:start="1:37" pos:end="1:42"><name pos:start="1:37" pos:end="1:40">void</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:48">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="225:1">{<block_content pos:start="5:5" pos:end="223:41">

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:30"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">StreamBlockJob</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:21">s</name> <init pos:start="5:23" pos:end="5:30">= <expr pos:start="5:25" pos:end="5:30"><name pos:start="5:25" pos:end="5:30">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:40"><decl pos:start="7:5" pos:end="7:39"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">BlockDriverState</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:24">bs</name> <init pos:start="7:26" pos:end="7:39">= <expr pos:start="7:28" pos:end="7:39"><name pos:start="7:28" pos:end="7:39"><name pos:start="7:28" pos:end="7:28">s</name><operator pos:start="7:29" pos:end="7:30">-&gt;</operator><name pos:start="7:31" pos:end="7:36">common</name><operator pos:start="7:37" pos:end="7:37">.</operator><name pos:start="7:38" pos:end="7:39">bs</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">BlockDriverState</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:26">base</name> <init pos:start="9:28" pos:end="9:36">= <expr pos:start="9:30" pos:end="9:36"><name pos:start="9:30" pos:end="9:36"><name pos:start="9:30" pos:end="9:30">s</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:36">base</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">int64_t</name></type> <name pos:start="11:13" pos:end="11:22">sector_num</name></decl>, <decl pos:start="11:25" pos:end="11:27"><type ref="prev" pos:start="11:5" pos:end="11:11"/><name pos:start="11:25" pos:end="11:27">end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:13">error</name> <init pos:start="13:15" pos:end="13:17">= <expr pos:start="13:17" pos:end="13:17"><literal type="number" pos:start="13:17" pos:end="13:17">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:16"><decl pos:start="15:5" pos:end="15:15"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">ret</name> <init pos:start="15:13" pos:end="15:15">= <expr pos:start="15:15" pos:end="15:15"><literal type="number" pos:start="15:15" pos:end="15:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:14"><decl pos:start="17:5" pos:end="17:13"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">n</name> <init pos:start="17:11" pos:end="17:13">= <expr pos:start="17:13" pos:end="17:13"><literal type="number" pos:start="17:13" pos:end="17:13">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:14"><decl pos:start="19:5" pos:end="19:13"><type pos:start="19:5" pos:end="19:10"><name pos:start="19:5" pos:end="19:8">void</name> <modifier pos:start="19:10" pos:end="19:10">*</modifier></type><name pos:start="19:11" pos:end="19:13">buf</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:39"><expr pos:start="23:5" pos:end="23:38"><name pos:start="23:5" pos:end="23:17"><name pos:start="23:5" pos:end="23:5">s</name><operator pos:start="23:6" pos:end="23:7">-&gt;</operator><name pos:start="23:8" pos:end="23:13">common</name><operator pos:start="23:14" pos:end="23:14">.</operator><name pos:start="23:15" pos:end="23:17">len</name></name> <operator pos:start="23:19" pos:end="23:19">=</operator> <call pos:start="23:21" pos:end="23:38"><name pos:start="23:21" pos:end="23:34">bdrv_getlength</name><argument_list pos:start="23:35" pos:end="23:38">(<argument pos:start="23:36" pos:end="23:37"><expr pos:start="23:36" pos:end="23:37"><name pos:start="23:36" pos:end="23:37">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:26">(<expr pos:start="25:9" pos:end="25:25"><name pos:start="25:9" pos:end="25:21"><name pos:start="25:9" pos:end="25:9">s</name><operator pos:start="25:10" pos:end="25:11">-&gt;</operator><name pos:start="25:12" pos:end="25:17">common</name><operator pos:start="25:18" pos:end="25:18">.</operator><name pos:start="25:19" pos:end="25:21">len</name></name> <operator pos:start="25:23" pos:end="25:23">&lt;</operator> <literal type="number" pos:start="25:25" pos:end="25:25">0</literal></expr>)</condition> <block pos:start="25:28" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:15">

        <expr_stmt pos:start="27:9" pos:end="27:55"><expr pos:start="27:9" pos:end="27:54"><call pos:start="27:9" pos:end="27:54"><name pos:start="27:9" pos:end="27:27">block_job_completed</name><argument_list pos:start="27:28" pos:end="27:54">(<argument pos:start="27:29" pos:end="27:38"><expr pos:start="27:29" pos:end="27:38"><operator pos:start="27:29" pos:end="27:29">&amp;</operator><name pos:start="27:30" pos:end="27:38"><name pos:start="27:30" pos:end="27:30">s</name><operator pos:start="27:31" pos:end="27:32">-&gt;</operator><name pos:start="27:33" pos:end="27:38">common</name></name></expr></argument>, <argument pos:start="27:41" pos:end="27:53"><expr pos:start="27:41" pos:end="27:53"><name pos:start="27:41" pos:end="27:53"><name pos:start="27:41" pos:end="27:41">s</name><operator pos:start="27:42" pos:end="27:43">-&gt;</operator><name pos:start="27:44" pos:end="27:49">common</name><operator pos:start="27:50" pos:end="27:50">.</operator><name pos:start="27:51" pos:end="27:53">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:44"><expr pos:start="35:5" pos:end="35:43"><name pos:start="35:5" pos:end="35:7">end</name> <operator pos:start="35:9" pos:end="35:9">=</operator> <name pos:start="35:11" pos:end="35:23"><name pos:start="35:11" pos:end="35:11">s</name><operator pos:start="35:12" pos:end="35:13">-&gt;</operator><name pos:start="35:14" pos:end="35:19">common</name><operator pos:start="35:20" pos:end="35:20">.</operator><name pos:start="35:21" pos:end="35:23">len</name></name> <operator pos:start="35:25" pos:end="35:26">&gt;&gt;</operator> <name pos:start="35:28" pos:end="35:43">BDRV_SECTOR_BITS</name></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:50"><expr pos:start="37:5" pos:end="37:49"><name pos:start="37:5" pos:end="37:7">buf</name> <operator pos:start="37:9" pos:end="37:9">=</operator> <call pos:start="37:11" pos:end="37:49"><name pos:start="37:11" pos:end="37:25">qemu_blockalign</name><argument_list pos:start="37:26" pos:end="37:49">(<argument pos:start="37:27" pos:end="37:28"><expr pos:start="37:27" pos:end="37:28"><name pos:start="37:27" pos:end="37:28">bs</name></expr></argument>, <argument pos:start="37:31" pos:end="37:48"><expr pos:start="37:31" pos:end="37:48"><name pos:start="37:31" pos:end="37:48">STREAM_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="41:5" pos:end="49:7">/* Turn on copy-on-read for the whole block device so that guest read

     * requests help us make progress.  Only do this when copying the entire

     * backing chain since the copy-on-read operation does not take base into

     * account.

     */</comment>

    <if_stmt pos:start="51:5" pos:end="55:5"><if pos:start="51:5" pos:end="55:5">if <condition pos:start="51:8" pos:end="51:14">(<expr pos:start="51:9" pos:end="51:13"><operator pos:start="51:9" pos:end="51:9">!</operator><name pos:start="51:10" pos:end="51:13">base</name></expr>)</condition> <block pos:start="51:16" pos:end="55:5">{<block_content pos:start="53:9" pos:end="53:37">

        <expr_stmt pos:start="53:9" pos:end="53:37"><expr pos:start="53:9" pos:end="53:36"><call pos:start="53:9" pos:end="53:36"><name pos:start="53:9" pos:end="53:32">bdrv_enable_copy_on_read</name><argument_list pos:start="53:33" pos:end="53:36">(<argument pos:start="53:34" pos:end="53:35"><expr pos:start="53:34" pos:end="53:35"><name pos:start="53:34" pos:end="53:35">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <for pos:start="59:5" pos:end="179:5">for <control pos:start="59:9" pos:end="59:59">(<init pos:start="59:10" pos:end="59:24"><expr pos:start="59:10" pos:end="59:23"><name pos:start="59:10" pos:end="59:19">sector_num</name> <operator pos:start="59:21" pos:end="59:21">=</operator> <literal type="number" pos:start="59:23" pos:end="59:23">0</literal></expr>;</init> <condition pos:start="59:26" pos:end="59:42"><expr pos:start="59:26" pos:end="59:41"><name pos:start="59:26" pos:end="59:35">sector_num</name> <operator pos:start="59:37" pos:end="59:37">&lt;</operator> <name pos:start="59:39" pos:end="59:41">end</name></expr>;</condition> <incr pos:start="59:44" pos:end="59:58"><expr pos:start="59:44" pos:end="59:58"><name pos:start="59:44" pos:end="59:53">sector_num</name> <operator pos:start="59:55" pos:end="59:56">+=</operator> <name pos:start="59:58" pos:end="59:58">n</name></expr></incr>)</control> <block pos:start="59:61" pos:end="179:5">{<block_content pos:start="61:9" pos:end="177:49">

        <decl_stmt pos:start="61:9" pos:end="61:30"><decl pos:start="61:9" pos:end="61:29"><type pos:start="61:9" pos:end="61:16"><name pos:start="61:9" pos:end="61:16">uint64_t</name></type> <name pos:start="61:18" pos:end="61:25">delay_ns</name> <init pos:start="61:27" pos:end="61:29">= <expr pos:start="61:29" pos:end="61:29"><literal type="number" pos:start="61:29" pos:end="61:29">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="63:9" pos:end="63:18"><decl pos:start="63:9" pos:end="63:17"><type pos:start="63:9" pos:end="63:12"><name pos:start="63:9" pos:end="63:12">bool</name></type> <name pos:start="63:14" pos:end="63:17">copy</name></decl>;</decl_stmt>



<label pos:start="67:1" pos:end="67:5"><name pos:start="67:1" pos:end="67:4">wait</name>:</label>

        <comment type="block" pos:start="69:9" pos:end="73:11">/* Note that even when no rate limit is applied we need to yield

         * with no pending I/O here so that bdrv_drain_all() returns.

         */</comment>

        <expr_stmt pos:start="75:9" pos:end="75:70"><expr pos:start="75:9" pos:end="75:69"><call pos:start="75:9" pos:end="75:69"><name pos:start="75:9" pos:end="75:26">block_job_sleep_ns</name><argument_list pos:start="75:27" pos:end="75:69">(<argument pos:start="75:28" pos:end="75:37"><expr pos:start="75:28" pos:end="75:37"><operator pos:start="75:28" pos:end="75:28">&amp;</operator><name pos:start="75:29" pos:end="75:37"><name pos:start="75:29" pos:end="75:29">s</name><operator pos:start="75:30" pos:end="75:31">-&gt;</operator><name pos:start="75:32" pos:end="75:37">common</name></name></expr></argument>, <argument pos:start="75:40" pos:end="75:58"><expr pos:start="75:40" pos:end="75:58"><name pos:start="75:40" pos:end="75:58">QEMU_CLOCK_REALTIME</name></expr></argument>, <argument pos:start="75:61" pos:end="75:68"><expr pos:start="75:61" pos:end="75:68"><name pos:start="75:61" pos:end="75:68">delay_ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="77:9" pos:end="81:9"><if pos:start="77:9" pos:end="81:9">if <condition pos:start="77:12" pos:end="77:47">(<expr pos:start="77:13" pos:end="77:46"><call pos:start="77:13" pos:end="77:46"><name pos:start="77:13" pos:end="77:34">block_job_is_cancelled</name><argument_list pos:start="77:35" pos:end="77:46">(<argument pos:start="77:36" pos:end="77:45"><expr pos:start="77:36" pos:end="77:45"><operator pos:start="77:36" pos:end="77:36">&amp;</operator><name pos:start="77:37" pos:end="77:45"><name pos:start="77:37" pos:end="77:37">s</name><operator pos:start="77:38" pos:end="77:39">-&gt;</operator><name pos:start="77:40" pos:end="77:45">common</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="77:49" pos:end="81:9">{<block_content pos:start="79:13" pos:end="79:18">

            <break pos:start="79:13" pos:end="79:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="85:9" pos:end="87:75"><expr pos:start="85:9" pos:end="87:74"><name pos:start="85:9" pos:end="85:11">ret</name> <operator pos:start="85:13" pos:end="85:13">=</operator> <call pos:start="85:15" pos:end="87:74"><name pos:start="85:15" pos:end="85:31">bdrv_is_allocated</name><argument_list pos:start="85:32" pos:end="87:74">(<argument pos:start="85:33" pos:end="85:34"><expr pos:start="85:33" pos:end="85:34"><name pos:start="85:33" pos:end="85:34">bs</name></expr></argument>, <argument pos:start="85:37" pos:end="85:46"><expr pos:start="85:37" pos:end="85:46"><name pos:start="85:37" pos:end="85:46">sector_num</name></expr></argument>,

                                <argument pos:start="87:33" pos:end="87:69"><expr pos:start="87:33" pos:end="87:69"><name pos:start="87:33" pos:end="87:50">STREAM_BUFFER_SIZE</name> <operator pos:start="87:52" pos:end="87:52">/</operator> <name pos:start="87:54" pos:end="87:69">BDRV_SECTOR_SIZE</name></expr></argument>, <argument pos:start="87:72" pos:end="87:73"><expr pos:start="87:72" pos:end="87:73"><operator pos:start="87:72" pos:end="87:72">&amp;</operator><name pos:start="87:73" pos:end="87:73">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="89:9" pos:end="119:9"><if pos:start="89:9" pos:end="95:9">if <condition pos:start="89:12" pos:end="89:21">(<expr pos:start="89:13" pos:end="89:20"><name pos:start="89:13" pos:end="89:15">ret</name> <operator pos:start="89:17" pos:end="89:18">==</operator> <literal type="number" pos:start="89:20" pos:end="89:20">1</literal></expr>)</condition> <block pos:start="89:23" pos:end="95:9">{<block_content pos:start="93:13" pos:end="93:25">

            <comment type="block" pos:start="91:13" pos:end="91:57">/* Allocated in the top, no need to copy.  */</comment>

            <expr_stmt pos:start="93:13" pos:end="93:25"><expr pos:start="93:13" pos:end="93:24"><name pos:start="93:13" pos:end="93:16">copy</name> <operator pos:start="93:18" pos:end="93:18">=</operator> <name pos:start="93:20" pos:end="93:24">false</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="95:11" pos:end="119:9">else if <condition pos:start="95:19" pos:end="95:28">(<expr pos:start="95:20" pos:end="95:27"><name pos:start="95:20" pos:end="95:22">ret</name> <operator pos:start="95:24" pos:end="95:25">&gt;=</operator> <literal type="number" pos:start="95:27" pos:end="95:27">0</literal></expr>)</condition> <block pos:start="95:30" pos:end="119:9">{<block_content pos:start="101:13" pos:end="117:30">

            <comment type="block" pos:start="97:13" pos:end="99:69">/* Copy if allocated in the intermediate images.  Limit to the

             * known-unallocated area [sector_num, sector_num+n).  */</comment>

            <expr_stmt pos:start="101:13" pos:end="103:61"><expr pos:start="101:13" pos:end="103:60"><name pos:start="101:13" pos:end="101:15">ret</name> <operator pos:start="101:17" pos:end="101:17">=</operator> <call pos:start="101:19" pos:end="103:60"><name pos:start="101:19" pos:end="101:41">bdrv_is_allocated_above</name><argument_list pos:start="101:42" pos:end="103:60">(<argument pos:start="101:43" pos:end="101:56"><expr pos:start="101:43" pos:end="101:56"><name pos:start="101:43" pos:end="101:56"><name pos:start="101:43" pos:end="101:44">bs</name><operator pos:start="101:45" pos:end="101:46">-&gt;</operator><name pos:start="101:47" pos:end="101:56">backing_hd</name></name></expr></argument>, <argument pos:start="101:59" pos:end="101:62"><expr pos:start="101:59" pos:end="101:62"><name pos:start="101:59" pos:end="101:62">base</name></expr></argument>,

                                          <argument pos:start="103:43" pos:end="103:52"><expr pos:start="103:43" pos:end="103:52"><name pos:start="103:43" pos:end="103:52">sector_num</name></expr></argument>, <argument pos:start="103:55" pos:end="103:55"><expr pos:start="103:55" pos:end="103:55"><name pos:start="103:55" pos:end="103:55">n</name></expr></argument>, <argument pos:start="103:58" pos:end="103:59"><expr pos:start="103:58" pos:end="103:59"><operator pos:start="103:58" pos:end="103:58">&amp;</operator><name pos:start="103:59" pos:end="103:59">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="107:13" pos:end="107:70">/* Finish early if end of backing file has been reached */</comment>

            <if_stmt pos:start="109:13" pos:end="113:13"><if pos:start="109:13" pos:end="113:13">if <condition pos:start="109:16" pos:end="109:35">(<expr pos:start="109:17" pos:end="109:34"><name pos:start="109:17" pos:end="109:19">ret</name> <operator pos:start="109:21" pos:end="109:22">==</operator> <literal type="number" pos:start="109:24" pos:end="109:24">0</literal> <operator pos:start="109:26" pos:end="109:27">&amp;&amp;</operator> <name pos:start="109:29" pos:end="109:29">n</name> <operator pos:start="109:31" pos:end="109:32">==</operator> <literal type="number" pos:start="109:34" pos:end="109:34">0</literal></expr>)</condition> <block pos:start="109:37" pos:end="113:13">{<block_content pos:start="111:17" pos:end="111:37">

                <expr_stmt pos:start="111:17" pos:end="111:37"><expr pos:start="111:17" pos:end="111:36"><name pos:start="111:17" pos:end="111:17">n</name> <operator pos:start="111:19" pos:end="111:19">=</operator> <name pos:start="111:21" pos:end="111:23">end</name> <operator pos:start="111:25" pos:end="111:25">-</operator> <name pos:start="111:27" pos:end="111:36">sector_num</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="117:13" pos:end="117:30"><expr pos:start="117:13" pos:end="117:29"><name pos:start="117:13" pos:end="117:16">copy</name> <operator pos:start="117:18" pos:end="117:18">=</operator> <operator pos:start="117:20" pos:end="117:20">(</operator><name pos:start="117:21" pos:end="117:23">ret</name> <operator pos:start="117:25" pos:end="117:26">==</operator> <literal type="number" pos:start="117:28" pos:end="117:28">1</literal><operator pos:start="117:29" pos:end="117:29">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:58"><expr pos:start="121:9" pos:end="121:57"><call pos:start="121:9" pos:end="121:57"><name pos:start="121:9" pos:end="121:34">trace_stream_one_iteration</name><argument_list pos:start="121:35" pos:end="121:57">(<argument pos:start="121:36" pos:end="121:36"><expr pos:start="121:36" pos:end="121:36"><name pos:start="121:36" pos:end="121:36">s</name></expr></argument>, <argument pos:start="121:39" pos:end="121:48"><expr pos:start="121:39" pos:end="121:48"><name pos:start="121:39" pos:end="121:48">sector_num</name></expr></argument>, <argument pos:start="121:51" pos:end="121:51"><expr pos:start="121:51" pos:end="121:51"><name pos:start="121:51" pos:end="121:51">n</name></expr></argument>, <argument pos:start="121:54" pos:end="121:56"><expr pos:start="121:54" pos:end="121:56"><name pos:start="121:54" pos:end="121:56">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="123:9" pos:end="139:9"><if pos:start="123:9" pos:end="139:9">if <condition pos:start="123:12" pos:end="123:29">(<expr pos:start="123:13" pos:end="123:28"><name pos:start="123:13" pos:end="123:15">ret</name> <operator pos:start="123:17" pos:end="123:18">&gt;=</operator> <literal type="number" pos:start="123:20" pos:end="123:20">0</literal> <operator pos:start="123:22" pos:end="123:23">&amp;&amp;</operator> <name pos:start="123:25" pos:end="123:28">copy</name></expr>)</condition> <block pos:start="123:31" pos:end="139:9">{<block_content pos:start="125:13" pos:end="137:58">

            <if_stmt pos:start="125:13" pos:end="135:13"><if pos:start="125:13" pos:end="135:13">if <condition pos:start="125:16" pos:end="125:32">(<expr pos:start="125:17" pos:end="125:31"><name pos:start="125:17" pos:end="125:31"><name pos:start="125:17" pos:end="125:17">s</name><operator pos:start="125:18" pos:end="125:19">-&gt;</operator><name pos:start="125:20" pos:end="125:25">common</name><operator pos:start="125:26" pos:end="125:26">.</operator><name pos:start="125:27" pos:end="125:31">speed</name></name></expr>)</condition> <block pos:start="125:34" pos:end="135:13">{<block_content pos:start="127:17" pos:end="133:17">

                <expr_stmt pos:start="127:17" pos:end="127:67"><expr pos:start="127:17" pos:end="127:66"><name pos:start="127:17" pos:end="127:24">delay_ns</name> <operator pos:start="127:26" pos:end="127:26">=</operator> <call pos:start="127:28" pos:end="127:66"><name pos:start="127:28" pos:end="127:52">ratelimit_calculate_delay</name><argument_list pos:start="127:53" pos:end="127:66">(<argument pos:start="127:54" pos:end="127:62"><expr pos:start="127:54" pos:end="127:62"><operator pos:start="127:54" pos:end="127:54">&amp;</operator><name pos:start="127:55" pos:end="127:62"><name pos:start="127:55" pos:end="127:55">s</name><operator pos:start="127:56" pos:end="127:57">-&gt;</operator><name pos:start="127:58" pos:end="127:62">limit</name></name></expr></argument>, <argument pos:start="127:65" pos:end="127:65"><expr pos:start="127:65" pos:end="127:65"><name pos:start="127:65" pos:end="127:65">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="129:17" pos:end="133:17"><if pos:start="129:17" pos:end="133:17">if <condition pos:start="129:20" pos:end="129:33">(<expr pos:start="129:21" pos:end="129:32"><name pos:start="129:21" pos:end="129:28">delay_ns</name> <operator pos:start="129:30" pos:end="129:30">&gt;</operator> <literal type="number" pos:start="129:32" pos:end="129:32">0</literal></expr>)</condition> <block pos:start="129:35" pos:end="133:17">{<block_content pos:start="131:21" pos:end="131:30">

                    <goto pos:start="131:21" pos:end="131:30">goto <name pos:start="131:26" pos:end="131:29">wait</name>;</goto>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="137:13" pos:end="137:58"><expr pos:start="137:13" pos:end="137:57"><name pos:start="137:13" pos:end="137:15">ret</name> <operator pos:start="137:17" pos:end="137:17">=</operator> <call pos:start="137:19" pos:end="137:57"><name pos:start="137:19" pos:end="137:33">stream_populate</name><argument_list pos:start="137:34" pos:end="137:57">(<argument pos:start="137:35" pos:end="137:36"><expr pos:start="137:35" pos:end="137:36"><name pos:start="137:35" pos:end="137:36">bs</name></expr></argument>, <argument pos:start="137:39" pos:end="137:48"><expr pos:start="137:39" pos:end="137:48"><name pos:start="137:39" pos:end="137:48">sector_num</name></expr></argument>, <argument pos:start="137:51" pos:end="137:51"><expr pos:start="137:51" pos:end="137:51"><name pos:start="137:51" pos:end="137:51">n</name></expr></argument>, <argument pos:start="137:54" pos:end="137:56"><expr pos:start="137:54" pos:end="137:56"><name pos:start="137:54" pos:end="137:56">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="141:9" pos:end="169:9"><if pos:start="141:9" pos:end="169:9">if <condition pos:start="141:12" pos:end="141:20">(<expr pos:start="141:13" pos:end="141:19"><name pos:start="141:13" pos:end="141:15">ret</name> <operator pos:start="141:17" pos:end="141:17">&lt;</operator> <literal type="number" pos:start="141:19" pos:end="141:19">0</literal></expr>)</condition> <block pos:start="141:22" pos:end="169:9">{<block_content pos:start="143:13" pos:end="167:13">

            <decl_stmt pos:start="143:13" pos:end="147:51"><decl pos:start="143:13" pos:end="147:50"><type pos:start="143:13" pos:end="143:28"><name pos:start="143:13" pos:end="143:28">BlockErrorAction</name></type> <name pos:start="143:30" pos:end="143:35">action</name> <init pos:start="143:37" pos:end="147:50">=

                <expr pos:start="145:17" pos:end="147:50"><call pos:start="145:17" pos:end="147:50"><name pos:start="145:17" pos:end="145:38">block_job_error_action</name><argument_list pos:start="145:39" pos:end="147:50">(<argument pos:start="145:40" pos:end="145:49"><expr pos:start="145:40" pos:end="145:49"><operator pos:start="145:40" pos:end="145:40">&amp;</operator><name pos:start="145:41" pos:end="145:49"><name pos:start="145:41" pos:end="145:41">s</name><operator pos:start="145:42" pos:end="145:43">-&gt;</operator><name pos:start="145:44" pos:end="145:49">common</name></name></expr></argument>, <argument pos:start="145:52" pos:end="145:63"><expr pos:start="145:52" pos:end="145:63"><name pos:start="145:52" pos:end="145:63"><name pos:start="145:52" pos:end="145:52">s</name><operator pos:start="145:53" pos:end="145:54">-&gt;</operator><name pos:start="145:55" pos:end="145:60">common</name><operator pos:start="145:61" pos:end="145:61">.</operator><name pos:start="145:62" pos:end="145:63">bs</name></name></expr></argument>, <argument pos:start="145:66" pos:end="145:76"><expr pos:start="145:66" pos:end="145:76"><name pos:start="145:66" pos:end="145:76"><name pos:start="145:66" pos:end="145:66">s</name><operator pos:start="145:67" pos:end="145:68">-&gt;</operator><name pos:start="145:69" pos:end="145:76">on_error</name></name></expr></argument>,

                                       <argument pos:start="147:40" pos:end="147:43"><expr pos:start="147:40" pos:end="147:43"><name pos:start="147:40" pos:end="147:43">true</name></expr></argument>, <argument pos:start="147:46" pos:end="147:49"><expr pos:start="147:46" pos:end="147:49"><operator pos:start="147:46" pos:end="147:46">-</operator><name pos:start="147:47" pos:end="147:49">ret</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="149:13" pos:end="155:13"><if pos:start="149:13" pos:end="155:13">if <condition pos:start="149:16" pos:end="149:43">(<expr pos:start="149:17" pos:end="149:42"><name pos:start="149:17" pos:end="149:22">action</name> <operator pos:start="149:24" pos:end="149:25">==</operator> <name pos:start="149:27" pos:end="149:42">BDRV_ACTION_STOP</name></expr>)</condition> <block pos:start="149:45" pos:end="155:13">{<block_content pos:start="151:17" pos:end="153:25">

                <expr_stmt pos:start="151:17" pos:end="151:22"><expr pos:start="151:17" pos:end="151:21"><name pos:start="151:17" pos:end="151:17">n</name> <operator pos:start="151:19" pos:end="151:19">=</operator> <literal type="number" pos:start="151:21" pos:end="151:21">0</literal></expr>;</expr_stmt>

                <continue pos:start="153:17" pos:end="153:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="157:13" pos:end="161:13"><if pos:start="157:13" pos:end="161:13">if <condition pos:start="157:16" pos:end="157:27">(<expr pos:start="157:17" pos:end="157:26"><name pos:start="157:17" pos:end="157:21">error</name> <operator pos:start="157:23" pos:end="157:24">==</operator> <literal type="number" pos:start="157:26" pos:end="157:26">0</literal></expr>)</condition> <block pos:start="157:29" pos:end="161:13">{<block_content pos:start="159:17" pos:end="159:28">

                <expr_stmt pos:start="159:17" pos:end="159:28"><expr pos:start="159:17" pos:end="159:27"><name pos:start="159:17" pos:end="159:21">error</name> <operator pos:start="159:23" pos:end="159:23">=</operator> <name pos:start="159:25" pos:end="159:27">ret</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="163:13" pos:end="167:13"><if pos:start="163:13" pos:end="167:13">if <condition pos:start="163:16" pos:end="163:45">(<expr pos:start="163:17" pos:end="163:44"><name pos:start="163:17" pos:end="163:22">action</name> <operator pos:start="163:24" pos:end="163:25">==</operator> <name pos:start="163:27" pos:end="163:44">BDRV_ACTION_REPORT</name></expr>)</condition> <block pos:start="163:47" pos:end="167:13">{<block_content pos:start="165:17" pos:end="165:22">

                <break pos:start="165:17" pos:end="165:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:16"><expr pos:start="171:9" pos:end="171:15"><name pos:start="171:9" pos:end="171:11">ret</name> <operator pos:start="171:13" pos:end="171:13">=</operator> <literal type="number" pos:start="171:15" pos:end="171:15">0</literal></expr>;</expr_stmt>



        <comment type="block" pos:start="175:9" pos:end="175:30">/* Publish progress */</comment>

        <expr_stmt pos:start="177:9" pos:end="177:49"><expr pos:start="177:9" pos:end="177:48"><name pos:start="177:9" pos:end="177:24"><name pos:start="177:9" pos:end="177:9">s</name><operator pos:start="177:10" pos:end="177:11">-&gt;</operator><name pos:start="177:12" pos:end="177:17">common</name><operator pos:start="177:18" pos:end="177:18">.</operator><name pos:start="177:19" pos:end="177:24">offset</name></name> <operator pos:start="177:26" pos:end="177:27">+=</operator> <name pos:start="177:29" pos:end="177:29">n</name> <operator pos:start="177:31" pos:end="177:31">*</operator> <name pos:start="177:33" pos:end="177:48">BDRV_SECTOR_SIZE</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="183:5" pos:end="187:5"><if pos:start="183:5" pos:end="187:5">if <condition pos:start="183:8" pos:end="183:14">(<expr pos:start="183:9" pos:end="183:13"><operator pos:start="183:9" pos:end="183:9">!</operator><name pos:start="183:10" pos:end="183:13">base</name></expr>)</condition> <block pos:start="183:16" pos:end="187:5">{<block_content pos:start="185:9" pos:end="185:38">

        <expr_stmt pos:start="185:9" pos:end="185:38"><expr pos:start="185:9" pos:end="185:37"><call pos:start="185:9" pos:end="185:37"><name pos:start="185:9" pos:end="185:33">bdrv_disable_copy_on_read</name><argument_list pos:start="185:34" pos:end="185:37">(<argument pos:start="185:35" pos:end="185:36"><expr pos:start="185:35" pos:end="185:36"><name pos:start="185:35" pos:end="185:36">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="191:5" pos:end="191:76">/* Do not remove the backing file if an error was there but ignored.  */</comment>

    <expr_stmt pos:start="193:5" pos:end="193:16"><expr pos:start="193:5" pos:end="193:15"><name pos:start="193:5" pos:end="193:7">ret</name> <operator pos:start="193:9" pos:end="193:9">=</operator> <name pos:start="193:11" pos:end="193:15">error</name></expr>;</expr_stmt>



    <if_stmt pos:start="197:5" pos:end="217:5"><if pos:start="197:5" pos:end="217:5">if <condition pos:start="197:8" pos:end="197:77">(<expr pos:start="197:9" pos:end="197:76"><operator pos:start="197:9" pos:end="197:9">!</operator><call pos:start="197:10" pos:end="197:43"><name pos:start="197:10" pos:end="197:31">block_job_is_cancelled</name><argument_list pos:start="197:32" pos:end="197:43">(<argument pos:start="197:33" pos:end="197:42"><expr pos:start="197:33" pos:end="197:42"><operator pos:start="197:33" pos:end="197:33">&amp;</operator><name pos:start="197:34" pos:end="197:42"><name pos:start="197:34" pos:end="197:34">s</name><operator pos:start="197:35" pos:end="197:36">-&gt;</operator><name pos:start="197:37" pos:end="197:42">common</name></name></expr></argument>)</argument_list></call> <operator pos:start="197:45" pos:end="197:46">&amp;&amp;</operator> <name pos:start="197:48" pos:end="197:57">sector_num</name> <operator pos:start="197:59" pos:end="197:60">==</operator> <name pos:start="197:62" pos:end="197:64">end</name> <operator pos:start="197:66" pos:end="197:67">&amp;&amp;</operator> <name pos:start="197:69" pos:end="197:71">ret</name> <operator pos:start="197:73" pos:end="197:74">==</operator> <literal type="number" pos:start="197:76" pos:end="197:76">0</literal></expr>)</condition> <block pos:start="197:79" pos:end="217:5">{<block_content pos:start="199:9" pos:end="215:47">

        <decl_stmt pos:start="199:9" pos:end="199:53"><decl pos:start="199:9" pos:end="199:34"><type pos:start="199:9" pos:end="199:20"><specifier pos:start="199:9" pos:end="199:13">const</specifier> <name pos:start="199:15" pos:end="199:18">char</name> <modifier pos:start="199:20" pos:end="199:20">*</modifier></type><name pos:start="199:21" pos:end="199:27">base_id</name> <init pos:start="199:29" pos:end="199:34">= <expr pos:start="199:31" pos:end="199:34"><name pos:start="199:31" pos:end="199:34">NULL</name></expr></init></decl>, <decl pos:start="199:37" pos:end="199:52"><type ref="prev" pos:start="199:9" pos:end="199:20"><modifier pos:start="199:37" pos:end="199:37">*</modifier></type><name pos:start="199:38" pos:end="199:45">base_fmt</name> <init pos:start="199:47" pos:end="199:52">= <expr pos:start="199:49" pos:end="199:52"><name pos:start="199:49" pos:end="199:52">NULL</name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="201:9" pos:end="211:9"><if pos:start="201:9" pos:end="211:9">if <condition pos:start="201:12" pos:end="201:17">(<expr pos:start="201:13" pos:end="201:16"><name pos:start="201:13" pos:end="201:16">base</name></expr>)</condition> <block pos:start="201:19" pos:end="211:9">{<block_content pos:start="203:13" pos:end="209:13">

            <expr_stmt pos:start="203:13" pos:end="203:41"><expr pos:start="203:13" pos:end="203:40"><name pos:start="203:13" pos:end="203:19">base_id</name> <operator pos:start="203:21" pos:end="203:21">=</operator> <name pos:start="203:23" pos:end="203:40"><name pos:start="203:23" pos:end="203:23">s</name><operator pos:start="203:24" pos:end="203:25">-&gt;</operator><name pos:start="203:26" pos:end="203:40">backing_file_id</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="205:13" pos:end="209:13"><if pos:start="205:13" pos:end="209:13">if <condition pos:start="205:16" pos:end="205:26">(<expr pos:start="205:17" pos:end="205:25"><name pos:start="205:17" pos:end="205:25"><name pos:start="205:17" pos:end="205:20">base</name><operator pos:start="205:21" pos:end="205:22">-&gt;</operator><name pos:start="205:23" pos:end="205:25">drv</name></name></expr>)</condition> <block pos:start="205:28" pos:end="209:13">{<block_content pos:start="207:17" pos:end="207:50">

                <expr_stmt pos:start="207:17" pos:end="207:50"><expr pos:start="207:17" pos:end="207:49"><name pos:start="207:17" pos:end="207:24">base_fmt</name> <operator pos:start="207:26" pos:end="207:26">=</operator> <name pos:start="207:28" pos:end="207:49"><name pos:start="207:28" pos:end="207:31">base</name><operator pos:start="207:32" pos:end="207:33">-&gt;</operator><name pos:start="207:34" pos:end="207:36">drv</name><operator pos:start="207:37" pos:end="207:38">-&gt;</operator><name pos:start="207:39" pos:end="207:49">format_name</name></name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="213:9" pos:end="213:62"><expr pos:start="213:9" pos:end="213:61"><name pos:start="213:9" pos:end="213:11">ret</name> <operator pos:start="213:13" pos:end="213:13">=</operator> <call pos:start="213:15" pos:end="213:61"><name pos:start="213:15" pos:end="213:38">bdrv_change_backing_file</name><argument_list pos:start="213:39" pos:end="213:61">(<argument pos:start="213:40" pos:end="213:41"><expr pos:start="213:40" pos:end="213:41"><name pos:start="213:40" pos:end="213:41">bs</name></expr></argument>, <argument pos:start="213:44" pos:end="213:50"><expr pos:start="213:44" pos:end="213:50"><name pos:start="213:44" pos:end="213:50">base_id</name></expr></argument>, <argument pos:start="213:53" pos:end="213:60"><expr pos:start="213:53" pos:end="213:60"><name pos:start="213:53" pos:end="213:60">base_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="215:9" pos:end="215:47"><expr pos:start="215:9" pos:end="215:46"><call pos:start="215:9" pos:end="215:46"><name pos:start="215:9" pos:end="215:27">close_unused_images</name><argument_list pos:start="215:28" pos:end="215:46">(<argument pos:start="215:29" pos:end="215:30"><expr pos:start="215:29" pos:end="215:30"><name pos:start="215:29" pos:end="215:30">bs</name></expr></argument>, <argument pos:start="215:33" pos:end="215:36"><expr pos:start="215:33" pos:end="215:36"><name pos:start="215:33" pos:end="215:36">base</name></expr></argument>, <argument pos:start="215:39" pos:end="215:45"><expr pos:start="215:39" pos:end="215:45"><name pos:start="215:39" pos:end="215:45">base_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="221:5" pos:end="221:20"><expr pos:start="221:5" pos:end="221:19"><call pos:start="221:5" pos:end="221:19"><name pos:start="221:5" pos:end="221:14">qemu_vfree</name><argument_list pos:start="221:15" pos:end="221:19">(<argument pos:start="221:16" pos:end="221:18"><expr pos:start="221:16" pos:end="221:18"><name pos:start="221:16" pos:end="221:18">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="223:5" pos:end="223:41"><expr pos:start="223:5" pos:end="223:40"><call pos:start="223:5" pos:end="223:40"><name pos:start="223:5" pos:end="223:23">block_job_completed</name><argument_list pos:start="223:24" pos:end="223:40">(<argument pos:start="223:25" pos:end="223:34"><expr pos:start="223:25" pos:end="223:34"><operator pos:start="223:25" pos:end="223:25">&amp;</operator><name pos:start="223:26" pos:end="223:34"><name pos:start="223:26" pos:end="223:26">s</name><operator pos:start="223:27" pos:end="223:28">-&gt;</operator><name pos:start="223:29" pos:end="223:34">common</name></name></expr></argument>, <argument pos:start="223:37" pos:end="223:39"><expr pos:start="223:37" pos:end="223:39"><name pos:start="223:37" pos:end="223:39">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
