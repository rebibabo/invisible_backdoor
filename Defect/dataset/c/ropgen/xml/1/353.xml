<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/353.c" pos:tabs="8"><function pos:start="1:1" pos:end="357:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:18">tcg_gen_callN</name><parameter_list pos:start="1:19" pos:end="1:71">(<parameter pos:start="1:20" pos:end="1:29"><decl pos:start="1:20" pos:end="1:29"><type pos:start="1:20" pos:end="1:29"><name pos:start="1:20" pos:end="1:23">void</name> <modifier pos:start="1:25" pos:end="1:25">*</modifier></type><name pos:start="1:26" pos:end="1:29">func</name></decl></parameter>, <parameter pos:start="1:32" pos:end="1:43"><decl pos:start="1:32" pos:end="1:43"><type pos:start="1:32" pos:end="1:43"><name pos:start="1:32" pos:end="1:38">TCGTemp</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:43">ret</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:54"><decl pos:start="1:46" pos:end="1:54"><type pos:start="1:46" pos:end="1:54"><name pos:start="1:46" pos:end="1:48">int</name></type> <name pos:start="1:50" pos:end="1:54">nargs</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:70"><decl pos:start="1:57" pos:end="1:70"><type pos:start="1:57" pos:end="1:70"><name pos:start="1:57" pos:end="1:63">TCGTemp</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier><modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:70">args</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="357:1">{<block_content pos:start="5:5" pos:end="356:0">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">TCGContext</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:17">s</name> <init pos:start="5:19" pos:end="5:27">= <expr pos:start="5:21" pos:end="5:27"><name pos:start="5:21" pos:end="5:27">tcg_ctx</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>, <decl pos:start="7:12" pos:end="7:20"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:20">real_args</name></decl>, <decl pos:start="7:23" pos:end="7:29"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:23" pos:end="7:29">nb_rets</name></decl>, <decl pos:start="7:32" pos:end="7:33"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:32" pos:end="7:33">pi</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">unsigned</name></type> <name pos:start="9:14" pos:end="9:21">sizemask</name></decl>, <decl pos:start="9:24" pos:end="9:28"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:24" pos:end="9:28">flags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:24"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:17">TCGHelperInfo</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:23">info</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:14"><decl pos:start="13:5" pos:end="13:13"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:9">TCGOp</name> <modifier pos:start="13:11" pos:end="13:11">*</modifier></type><name pos:start="13:12" pos:end="13:13">op</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:61"><expr pos:start="17:5" pos:end="17:60"><name pos:start="17:5" pos:end="17:8">info</name> <operator pos:start="17:10" pos:end="17:10">=</operator> <call pos:start="17:12" pos:end="17:60"><name pos:start="17:12" pos:end="17:30">g_hash_table_lookup</name><argument_list pos:start="17:31" pos:end="17:60">(<argument pos:start="17:32" pos:end="17:43"><expr pos:start="17:32" pos:end="17:43"><name pos:start="17:32" pos:end="17:43">helper_table</name></expr></argument>, <argument pos:start="17:46" pos:end="17:59"><expr pos:start="17:46" pos:end="17:59"><operator pos:start="17:46" pos:end="17:46">(</operator><name pos:start="17:47" pos:end="17:54">gpointer</name><operator pos:start="17:55" pos:end="17:55">)</operator><name pos:start="17:56" pos:end="17:59">func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:24"><expr pos:start="19:5" pos:end="19:23"><name pos:start="19:5" pos:end="19:9">flags</name> <operator pos:start="19:11" pos:end="19:11">=</operator> <name pos:start="19:13" pos:end="19:23"><name pos:start="19:13" pos:end="19:16">info</name><operator pos:start="19:17" pos:end="19:18">-&gt;</operator><name pos:start="19:19" pos:end="19:23">flags</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="28:0"><expr pos:start="21:5" pos:end="21:29"><name pos:start="21:5" pos:end="21:12">sizemask</name> <operator pos:start="21:14" pos:end="21:14">=</operator> <name pos:start="21:16" pos:end="21:29"><name pos:start="21:16" pos:end="21:19">info</name><operator pos:start="21:20" pos:end="21:21">-&gt;</operator><name pos:start="21:22" pos:end="21:29">sizemask</name></name></expr>;</expr_stmt>



<cpp:if pos:start="25:1" pos:end="27:39">#<cpp:directive pos:start="25:2" pos:end="25:3">if</cpp:directive> <expr pos:start="25:5" pos:end="27:39"><call pos:start="25:5" pos:end="25:22"><name pos:start="25:5" pos:end="25:11">defined</name><argument_list pos:start="25:12" pos:end="25:22">(<argument pos:start="25:13" pos:end="25:21"><expr pos:start="25:13" pos:end="25:21"><name pos:start="25:13" pos:end="25:21">__sparc__</name></expr></argument>)</argument_list></call> <operator pos:start="25:24" pos:end="25:25">&amp;&amp;</operator> <operator pos:start="25:27" pos:end="25:27">!</operator><call pos:start="25:28" pos:end="25:46"><name pos:start="25:28" pos:end="25:34">defined</name><argument_list pos:start="25:35" pos:end="25:46">(<argument pos:start="25:36" pos:end="25:45"><expr pos:start="25:36" pos:end="25:45"><name pos:start="25:36" pos:end="25:45">__arch64__</name></expr></argument>)</argument_list></call> \

    <operator pos:start="27:5" pos:end="27:6">&amp;&amp;</operator> <operator pos:start="27:8" pos:end="27:8">!</operator><call pos:start="27:9" pos:end="27:39"><name pos:start="27:9" pos:end="27:15">defined</name><argument_list pos:start="27:16" pos:end="27:39">(<argument pos:start="27:17" pos:end="27:38"><expr pos:start="27:17" pos:end="27:38"><name pos:start="27:17" pos:end="27:38">CONFIG_TCG_INTERPRETER</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <comment type="block" pos:start="29:5" pos:end="31:44">/* We have 64-bit values in one register, but need to pass as two

       separate parameters.  Split them.  */</comment>

    <decl_stmt pos:start="33:5" pos:end="33:33"><decl pos:start="33:5" pos:end="33:32"><type pos:start="33:5" pos:end="33:7"><name pos:start="33:5" pos:end="33:7">int</name></type> <name pos:start="33:9" pos:end="33:21">orig_sizemask</name> <init pos:start="33:23" pos:end="33:32">= <expr pos:start="33:25" pos:end="33:32"><name pos:start="33:25" pos:end="33:32">sizemask</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:27"><decl pos:start="35:5" pos:end="35:26"><type pos:start="35:5" pos:end="35:7"><name pos:start="35:5" pos:end="35:7">int</name></type> <name pos:start="35:9" pos:end="35:18">orig_nargs</name> <init pos:start="35:20" pos:end="35:26">= <expr pos:start="35:22" pos:end="35:26"><name pos:start="35:22" pos:end="35:26">nargs</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:24"><decl pos:start="37:5" pos:end="37:17"><type pos:start="37:5" pos:end="37:12"><name pos:start="37:5" pos:end="37:12">TCGv_i64</name></type> <name pos:start="37:14" pos:end="37:17">retl</name></decl>, <decl pos:start="37:20" pos:end="37:23"><type ref="prev" pos:start="37:5" pos:end="37:12"/><name pos:start="37:20" pos:end="37:23">reth</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:39"><decl pos:start="39:5" pos:end="39:38"><type pos:start="39:5" pos:end="39:13"><name pos:start="39:5" pos:end="39:11">TCGTemp</name> <modifier pos:start="39:13" pos:end="39:13">*</modifier></type><name pos:start="39:14" pos:end="39:38"><name pos:start="39:14" pos:end="39:23">split_args</name><index pos:start="39:24" pos:end="39:38">[<expr pos:start="39:25" pos:end="39:37"><name pos:start="39:25" pos:end="39:37">MAX_OPC_PARAM</name></expr>]</index></name></decl>;</decl_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:16"><expr pos:start="43:5" pos:end="43:15"><name pos:start="43:5" pos:end="43:8">retl</name> <operator pos:start="43:10" pos:end="43:10">=</operator> <name pos:start="43:12" pos:end="43:15">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:16"><expr pos:start="45:5" pos:end="45:15"><name pos:start="45:5" pos:end="45:8">reth</name> <operator pos:start="45:10" pos:end="45:10">=</operator> <name pos:start="45:12" pos:end="45:15">NULL</name></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="84:0"><if pos:start="47:5" pos:end="84:0">if <condition pos:start="47:8" pos:end="47:22">(<expr pos:start="47:9" pos:end="47:21"><name pos:start="47:9" pos:end="47:16">sizemask</name> <operator pos:start="47:18" pos:end="47:19">!=</operator> <literal type="number" pos:start="47:21" pos:end="47:21">0</literal></expr>)</condition> <block pos:start="47:24" pos:end="84:0">{<block_content pos:start="49:9" pos:end="79:21">

        <for pos:start="49:9" pos:end="73:9">for <control pos:start="49:13" pos:end="49:47">(<init pos:start="49:14" pos:end="49:31"><expr pos:start="49:14" pos:end="49:30"><name pos:start="49:14" pos:end="49:14">i</name> <operator pos:start="49:16" pos:end="49:16">=</operator> <name pos:start="49:18" pos:end="49:26">real_args</name> <operator pos:start="49:28" pos:end="49:28">=</operator> <literal type="number" pos:start="49:30" pos:end="49:30">0</literal></expr>;</init> <condition pos:start="49:33" pos:end="49:42"><expr pos:start="49:33" pos:end="49:41"><name pos:start="49:33" pos:end="49:33">i</name> <operator pos:start="49:35" pos:end="49:35">&lt;</operator> <name pos:start="49:37" pos:end="49:41">nargs</name></expr>;</condition> <incr pos:start="49:44" pos:end="49:46"><expr pos:start="49:44" pos:end="49:46"><operator pos:start="49:44" pos:end="49:45">++</operator><name pos:start="49:46" pos:end="49:46">i</name></expr></incr>)</control> <block pos:start="49:49" pos:end="73:9">{<block_content pos:start="51:13" pos:end="71:13">

            <decl_stmt pos:start="51:13" pos:end="51:53"><decl pos:start="51:13" pos:end="51:52"><type pos:start="51:13" pos:end="51:15"><name pos:start="51:13" pos:end="51:15">int</name></type> <name pos:start="51:17" pos:end="51:24">is_64bit</name> <init pos:start="51:26" pos:end="51:52">= <expr pos:start="51:28" pos:end="51:52"><name pos:start="51:28" pos:end="51:35">sizemask</name> <operator pos:start="51:37" pos:end="51:37">&amp;</operator> <operator pos:start="51:39" pos:end="51:39">(</operator><literal type="number" pos:start="51:40" pos:end="51:40">1</literal> <operator pos:start="51:42" pos:end="51:43">&lt;&lt;</operator> <operator pos:start="51:45" pos:end="51:45">(</operator><name pos:start="51:46" pos:end="51:46">i</name><operator pos:start="51:47" pos:end="51:47">+</operator><literal type="number" pos:start="51:48" pos:end="51:48">1</literal><operator pos:start="51:49" pos:end="51:49">)</operator><operator pos:start="51:50" pos:end="51:50">*</operator><literal type="number" pos:start="51:51" pos:end="51:51">2</literal><operator pos:start="51:52" pos:end="51:52">)</operator></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="53:13" pos:end="71:13"><if pos:start="53:13" pos:end="67:13">if <condition pos:start="53:16" pos:end="53:25">(<expr pos:start="53:17" pos:end="53:24"><name pos:start="53:17" pos:end="53:24">is_64bit</name></expr>)</condition> <block pos:start="53:27" pos:end="67:13">{<block_content pos:start="55:17" pos:end="65:59">

                <decl_stmt pos:start="55:17" pos:end="55:55"><decl pos:start="55:17" pos:end="55:54"><type pos:start="55:17" pos:end="55:24"><name pos:start="55:17" pos:end="55:24">TCGv_i64</name></type> <name pos:start="55:26" pos:end="55:29">orig</name> <init pos:start="55:31" pos:end="55:54">= <expr pos:start="55:33" pos:end="55:54"><call pos:start="55:33" pos:end="55:54"><name pos:start="55:33" pos:end="55:45">temp_tcgv_i64</name><argument_list pos:start="55:46" pos:end="55:54">(<argument pos:start="55:47" pos:end="55:53"><expr pos:start="55:47" pos:end="55:53"><name pos:start="55:47" pos:end="55:53"><name pos:start="55:47" pos:end="55:50">args</name><index pos:start="55:51" pos:end="55:53">[<expr pos:start="55:52" pos:end="55:52"><name pos:start="55:52" pos:end="55:52">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="57:17" pos:end="57:48"><decl pos:start="57:17" pos:end="57:47"><type pos:start="57:17" pos:end="57:24"><name pos:start="57:17" pos:end="57:24">TCGv_i32</name></type> <name pos:start="57:26" pos:end="57:26">h</name> <init pos:start="57:28" pos:end="57:47">= <expr pos:start="57:30" pos:end="57:47"><call pos:start="57:30" pos:end="57:47"><name pos:start="57:30" pos:end="57:45">tcg_temp_new_i32</name><argument_list pos:start="57:46" pos:end="57:47">()</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="59:17" pos:end="59:48"><decl pos:start="59:17" pos:end="59:47"><type pos:start="59:17" pos:end="59:24"><name pos:start="59:17" pos:end="59:24">TCGv_i32</name></type> <name pos:start="59:26" pos:end="59:26">l</name> <init pos:start="59:28" pos:end="59:47">= <expr pos:start="59:30" pos:end="59:47"><call pos:start="59:30" pos:end="59:47"><name pos:start="59:30" pos:end="59:45">tcg_temp_new_i32</name><argument_list pos:start="59:46" pos:end="59:47">()</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="61:17" pos:end="61:49"><expr pos:start="61:17" pos:end="61:48"><call pos:start="61:17" pos:end="61:48"><name pos:start="61:17" pos:end="61:36">tcg_gen_extr_i64_i32</name><argument_list pos:start="61:37" pos:end="61:48">(<argument pos:start="61:38" pos:end="61:38"><expr pos:start="61:38" pos:end="61:38"><name pos:start="61:38" pos:end="61:38">l</name></expr></argument>, <argument pos:start="61:41" pos:end="61:41"><expr pos:start="61:41" pos:end="61:41"><name pos:start="61:41" pos:end="61:41">h</name></expr></argument>, <argument pos:start="61:44" pos:end="61:47"><expr pos:start="61:44" pos:end="61:47"><name pos:start="61:44" pos:end="61:47">orig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="63:17" pos:end="63:59"><expr pos:start="63:17" pos:end="63:58"><name pos:start="63:17" pos:end="63:39"><name pos:start="63:17" pos:end="63:26">split_args</name><index pos:start="63:27" pos:end="63:39">[<expr pos:start="63:28" pos:end="63:38"><name pos:start="63:28" pos:end="63:36">real_args</name><operator pos:start="63:37" pos:end="63:38">++</operator></expr>]</index></name> <operator pos:start="63:41" pos:end="63:41">=</operator> <call pos:start="63:43" pos:end="63:58"><name pos:start="63:43" pos:end="63:55">tcgv_i32_temp</name><argument_list pos:start="63:56" pos:end="63:58">(<argument pos:start="63:57" pos:end="63:57"><expr pos:start="63:57" pos:end="63:57"><name pos:start="63:57" pos:end="63:57">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="65:17" pos:end="65:59"><expr pos:start="65:17" pos:end="65:58"><name pos:start="65:17" pos:end="65:39"><name pos:start="65:17" pos:end="65:26">split_args</name><index pos:start="65:27" pos:end="65:39">[<expr pos:start="65:28" pos:end="65:38"><name pos:start="65:28" pos:end="65:36">real_args</name><operator pos:start="65:37" pos:end="65:38">++</operator></expr>]</index></name> <operator pos:start="65:41" pos:end="65:41">=</operator> <call pos:start="65:43" pos:end="65:58"><name pos:start="65:43" pos:end="65:55">tcgv_i32_temp</name><argument_list pos:start="65:56" pos:end="65:58">(<argument pos:start="65:57" pos:end="65:57"><expr pos:start="65:57" pos:end="65:57"><name pos:start="65:57" pos:end="65:57">l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="67:15" pos:end="71:13">else <block pos:start="67:20" pos:end="71:13">{<block_content pos:start="69:17" pos:end="69:50">

                <expr_stmt pos:start="69:17" pos:end="69:50"><expr pos:start="69:17" pos:end="69:49"><name pos:start="69:17" pos:end="69:39"><name pos:start="69:17" pos:end="69:26">split_args</name><index pos:start="69:27" pos:end="69:39">[<expr pos:start="69:28" pos:end="69:38"><name pos:start="69:28" pos:end="69:36">real_args</name><operator pos:start="69:37" pos:end="69:38">++</operator></expr>]</index></name> <operator pos:start="69:41" pos:end="69:41">=</operator> <name pos:start="69:43" pos:end="69:49"><name pos:start="69:43" pos:end="69:46">args</name><index pos:start="69:47" pos:end="69:49">[<expr pos:start="69:48" pos:end="69:48"><name pos:start="69:48" pos:end="69:48">i</name></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="75:9" pos:end="75:26"><expr pos:start="75:9" pos:end="75:25"><name pos:start="75:9" pos:end="75:13">nargs</name> <operator pos:start="75:15" pos:end="75:15">=</operator> <name pos:start="75:17" pos:end="75:25">real_args</name></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:26"><expr pos:start="77:9" pos:end="77:25"><name pos:start="77:9" pos:end="77:12">args</name> <operator pos:start="77:14" pos:end="77:14">=</operator> <name pos:start="77:16" pos:end="77:25">split_args</name></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:21"><expr pos:start="79:9" pos:end="79:20"><name pos:start="79:9" pos:end="79:16">sizemask</name> <operator pos:start="79:18" pos:end="79:18">=</operator> <literal type="number" pos:start="79:20" pos:end="79:20">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:elif pos:start="83:1" pos:end="83:66">#<cpp:directive pos:start="83:2" pos:end="83:5">elif</cpp:directive> <expr pos:start="83:7" pos:end="83:66"><call pos:start="83:7" pos:end="83:37"><name pos:start="83:7" pos:end="83:13">defined</name><argument_list pos:start="83:14" pos:end="83:37">(<argument pos:start="83:15" pos:end="83:36"><expr pos:start="83:15" pos:end="83:36"><name pos:start="83:15" pos:end="83:36">TCG_TARGET_EXTEND_ARGS</name></expr></argument>)</argument_list></call> <operator pos:start="83:39" pos:end="83:40">&amp;&amp;</operator> <name pos:start="83:42" pos:end="83:60">TCG_TARGET_REG_BITS</name> <operator pos:start="83:62" pos:end="83:63">==</operator> <literal type="number" pos:start="83:65" pos:end="83:66">64</literal></expr></cpp:elif>

    <for pos:start="85:5" pos:end="114:0">for <control pos:start="85:9" pos:end="85:31">(<init pos:start="85:10" pos:end="85:15"><expr pos:start="85:10" pos:end="85:14"><name pos:start="85:10" pos:end="85:10">i</name> <operator pos:start="85:12" pos:end="85:12">=</operator> <literal type="number" pos:start="85:14" pos:end="85:14">0</literal></expr>;</init> <condition pos:start="85:17" pos:end="85:26"><expr pos:start="85:17" pos:end="85:25"><name pos:start="85:17" pos:end="85:17">i</name> <operator pos:start="85:19" pos:end="85:19">&lt;</operator> <name pos:start="85:21" pos:end="85:25">nargs</name></expr>;</condition> <incr pos:start="85:28" pos:end="85:30"><expr pos:start="85:28" pos:end="85:30"><operator pos:start="85:28" pos:end="85:29">++</operator><name pos:start="85:30" pos:end="85:30">i</name></expr></incr>)</control> <block pos:start="85:33" pos:end="114:0">{<block_content pos:start="87:9" pos:end="109:9">

        <decl_stmt pos:start="87:9" pos:end="87:49"><decl pos:start="87:9" pos:end="87:48"><type pos:start="87:9" pos:end="87:11"><name pos:start="87:9" pos:end="87:11">int</name></type> <name pos:start="87:13" pos:end="87:20">is_64bit</name> <init pos:start="87:22" pos:end="87:48">= <expr pos:start="87:24" pos:end="87:48"><name pos:start="87:24" pos:end="87:31">sizemask</name> <operator pos:start="87:33" pos:end="87:33">&amp;</operator> <operator pos:start="87:35" pos:end="87:35">(</operator><literal type="number" pos:start="87:36" pos:end="87:36">1</literal> <operator pos:start="87:38" pos:end="87:39">&lt;&lt;</operator> <operator pos:start="87:41" pos:end="87:41">(</operator><name pos:start="87:42" pos:end="87:42">i</name><operator pos:start="87:43" pos:end="87:43">+</operator><literal type="number" pos:start="87:44" pos:end="87:44">1</literal><operator pos:start="87:45" pos:end="87:45">)</operator><operator pos:start="87:46" pos:end="87:46">*</operator><literal type="number" pos:start="87:47" pos:end="87:47">2</literal><operator pos:start="87:48" pos:end="87:48">)</operator></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="89:9" pos:end="89:50"><decl pos:start="89:9" pos:end="89:49"><type pos:start="89:9" pos:end="89:11"><name pos:start="89:9" pos:end="89:11">int</name></type> <name pos:start="89:13" pos:end="89:21">is_signed</name> <init pos:start="89:23" pos:end="89:49">= <expr pos:start="89:25" pos:end="89:49"><name pos:start="89:25" pos:end="89:32">sizemask</name> <operator pos:start="89:34" pos:end="89:34">&amp;</operator> <operator pos:start="89:36" pos:end="89:36">(</operator><literal type="number" pos:start="89:37" pos:end="89:37">2</literal> <operator pos:start="89:39" pos:end="89:40">&lt;&lt;</operator> <operator pos:start="89:42" pos:end="89:42">(</operator><name pos:start="89:43" pos:end="89:43">i</name><operator pos:start="89:44" pos:end="89:44">+</operator><literal type="number" pos:start="89:45" pos:end="89:45">1</literal><operator pos:start="89:46" pos:end="89:46">)</operator><operator pos:start="89:47" pos:end="89:47">*</operator><literal type="number" pos:start="89:48" pos:end="89:48">2</literal><operator pos:start="89:49" pos:end="89:49">)</operator></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="91:9" pos:end="109:9"><if pos:start="91:9" pos:end="109:9">if <condition pos:start="91:12" pos:end="91:22">(<expr pos:start="91:13" pos:end="91:21"><operator pos:start="91:13" pos:end="91:13">!</operator><name pos:start="91:14" pos:end="91:21">is_64bit</name></expr>)</condition> <block pos:start="91:24" pos:end="109:9">{<block_content pos:start="93:13" pos:end="107:42">

            <decl_stmt pos:start="93:13" pos:end="93:47"><decl pos:start="93:13" pos:end="93:46"><type pos:start="93:13" pos:end="93:20"><name pos:start="93:13" pos:end="93:20">TCGv_i64</name></type> <name pos:start="93:22" pos:end="93:25">temp</name> <init pos:start="93:27" pos:end="93:46">= <expr pos:start="93:29" pos:end="93:46"><call pos:start="93:29" pos:end="93:46"><name pos:start="93:29" pos:end="93:44">tcg_temp_new_i64</name><argument_list pos:start="93:45" pos:end="93:46">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="95:13" pos:end="95:51"><decl pos:start="95:13" pos:end="95:50"><type pos:start="95:13" pos:end="95:20"><name pos:start="95:13" pos:end="95:20">TCGv_i64</name></type> <name pos:start="95:22" pos:end="95:25">orig</name> <init pos:start="95:27" pos:end="95:50">= <expr pos:start="95:29" pos:end="95:50"><call pos:start="95:29" pos:end="95:50"><name pos:start="95:29" pos:end="95:41">temp_tcgv_i64</name><argument_list pos:start="95:42" pos:end="95:50">(<argument pos:start="95:43" pos:end="95:49"><expr pos:start="95:43" pos:end="95:49"><name pos:start="95:43" pos:end="95:49"><name pos:start="95:43" pos:end="95:46">args</name><index pos:start="95:47" pos:end="95:49">[<expr pos:start="95:48" pos:end="95:48"><name pos:start="95:48" pos:end="95:48">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="97:13" pos:end="105:13"><if pos:start="97:13" pos:end="101:13">if <condition pos:start="97:16" pos:end="97:26">(<expr pos:start="97:17" pos:end="97:25"><name pos:start="97:17" pos:end="97:25">is_signed</name></expr>)</condition> <block pos:start="97:28" pos:end="101:13">{<block_content pos:start="99:17" pos:end="99:47">

                <expr_stmt pos:start="99:17" pos:end="99:47"><expr pos:start="99:17" pos:end="99:46"><call pos:start="99:17" pos:end="99:46"><name pos:start="99:17" pos:end="99:34">tcg_gen_ext32s_i64</name><argument_list pos:start="99:35" pos:end="99:46">(<argument pos:start="99:36" pos:end="99:39"><expr pos:start="99:36" pos:end="99:39"><name pos:start="99:36" pos:end="99:39">temp</name></expr></argument>, <argument pos:start="99:42" pos:end="99:45"><expr pos:start="99:42" pos:end="99:45"><name pos:start="99:42" pos:end="99:45">orig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="101:15" pos:end="105:13">else <block pos:start="101:20" pos:end="105:13">{<block_content pos:start="103:17" pos:end="103:47">

                <expr_stmt pos:start="103:17" pos:end="103:47"><expr pos:start="103:17" pos:end="103:46"><call pos:start="103:17" pos:end="103:46"><name pos:start="103:17" pos:end="103:34">tcg_gen_ext32u_i64</name><argument_list pos:start="103:35" pos:end="103:46">(<argument pos:start="103:36" pos:end="103:39"><expr pos:start="103:36" pos:end="103:39"><name pos:start="103:36" pos:end="103:39">temp</name></expr></argument>, <argument pos:start="103:42" pos:end="103:45"><expr pos:start="103:42" pos:end="103:45"><name pos:start="103:42" pos:end="103:45">orig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="107:13" pos:end="107:42"><expr pos:start="107:13" pos:end="107:41"><name pos:start="107:13" pos:end="107:19"><name pos:start="107:13" pos:end="107:16">args</name><index pos:start="107:17" pos:end="107:19">[<expr pos:start="107:18" pos:end="107:18"><name pos:start="107:18" pos:end="107:18">i</name></expr>]</index></name> <operator pos:start="107:21" pos:end="107:21">=</operator> <call pos:start="107:23" pos:end="107:41"><name pos:start="107:23" pos:end="107:35">tcgv_i64_temp</name><argument_list pos:start="107:36" pos:end="107:41">(<argument pos:start="107:37" pos:end="107:40"><expr pos:start="107:37" pos:end="107:40"><name pos:start="107:37" pos:end="107:40">temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

<cpp:endif pos:start="113:1" pos:end="113:6">#<cpp:directive pos:start="113:2" pos:end="113:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="113:8" pos:end="113:35">/* TCG_TARGET_EXTEND_ARGS */</comment>



    <expr_stmt pos:start="117:5" pos:end="117:27"><expr pos:start="117:5" pos:end="117:26"><name pos:start="117:5" pos:end="117:5">i</name> <operator pos:start="117:7" pos:end="117:7">=</operator> <name pos:start="117:9" pos:end="117:26"><name pos:start="117:9" pos:end="117:9">s</name><operator pos:start="117:10" pos:end="117:11">-&gt;</operator><name pos:start="117:12" pos:end="117:26">gen_next_op_idx</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:39"><expr pos:start="119:5" pos:end="119:38"><call pos:start="119:5" pos:end="119:38"><name pos:start="119:5" pos:end="119:20">tcg_debug_assert</name><argument_list pos:start="119:21" pos:end="119:38">(<argument pos:start="119:22" pos:end="119:37"><expr pos:start="119:22" pos:end="119:37"><name pos:start="119:22" pos:end="119:22">i</name> <operator pos:start="119:24" pos:end="119:24">&lt;</operator> <name pos:start="119:26" pos:end="119:37">OPC_BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:30"><expr pos:start="121:5" pos:end="121:29"><name pos:start="121:5" pos:end="121:20"><name pos:start="121:5" pos:end="121:5">s</name><operator pos:start="121:6" pos:end="121:7">-&gt;</operator><name pos:start="121:8" pos:end="121:17">gen_op_buf</name><index pos:start="121:18" pos:end="121:20">[<expr pos:start="121:19" pos:end="121:19"><literal type="number" pos:start="121:19" pos:end="121:19">0</literal></expr>]</index></name><operator pos:start="121:21" pos:end="121:21">.</operator><name pos:start="121:22" pos:end="121:25">prev</name> <operator pos:start="121:27" pos:end="121:27">=</operator> <name pos:start="121:29" pos:end="121:29">i</name></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:31"><expr pos:start="123:5" pos:end="123:30"><name pos:start="123:5" pos:end="123:22"><name pos:start="123:5" pos:end="123:5">s</name><operator pos:start="123:6" pos:end="123:7">-&gt;</operator><name pos:start="123:8" pos:end="123:22">gen_next_op_idx</name></name> <operator pos:start="123:24" pos:end="123:24">=</operator> <name pos:start="123:26" pos:end="123:26">i</name> <operator pos:start="123:28" pos:end="123:28">+</operator> <literal type="number" pos:start="123:30" pos:end="123:30">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:27"><expr pos:start="125:5" pos:end="125:26"><name pos:start="125:5" pos:end="125:6">op</name> <operator pos:start="125:8" pos:end="125:8">=</operator> <operator pos:start="125:10" pos:end="125:10">&amp;</operator><name pos:start="125:11" pos:end="125:26"><name pos:start="125:11" pos:end="125:11">s</name><operator pos:start="125:12" pos:end="125:13">-&gt;</operator><name pos:start="125:14" pos:end="125:23">gen_op_buf</name><index pos:start="125:24" pos:end="125:26">[<expr pos:start="125:25" pos:end="125:25"><name pos:start="125:25" pos:end="125:25">i</name></expr>]</index></name></expr>;</expr_stmt>



    <comment type="block" pos:start="129:5" pos:end="129:66">/* Set links for sequential allocation during translation.  */</comment>

    <expr_stmt pos:start="131:5" pos:end="131:41"><expr pos:start="131:5" pos:end="131:40"><call pos:start="131:5" pos:end="131:40"><name pos:start="131:5" pos:end="131:10">memset</name><argument_list pos:start="131:11" pos:end="131:40">(<argument pos:start="131:12" pos:end="131:13"><expr pos:start="131:12" pos:end="131:13"><name pos:start="131:12" pos:end="131:13">op</name></expr></argument>, <argument pos:start="131:16" pos:end="131:16"><expr pos:start="131:16" pos:end="131:16"><literal type="number" pos:start="131:16" pos:end="131:16">0</literal></expr></argument>, <argument pos:start="131:19" pos:end="131:39"><expr pos:start="131:19" pos:end="131:39"><call pos:start="131:19" pos:end="131:39"><name pos:start="131:19" pos:end="131:26">offsetof</name><argument_list pos:start="131:27" pos:end="131:39">(<argument pos:start="131:28" pos:end="131:32"><expr pos:start="131:28" pos:end="131:32"><name pos:start="131:28" pos:end="131:32">TCGOp</name></expr></argument>, <argument pos:start="131:35" pos:end="131:38"><expr pos:start="131:35" pos:end="131:38"><name pos:start="131:35" pos:end="131:38">args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:28"><expr pos:start="133:5" pos:end="133:27"><name pos:start="133:5" pos:end="133:11"><name pos:start="133:5" pos:end="133:6">op</name><operator pos:start="133:7" pos:end="133:8">-&gt;</operator><name pos:start="133:9" pos:end="133:11">opc</name></name> <operator pos:start="133:13" pos:end="133:13">=</operator> <name pos:start="133:15" pos:end="133:27">INDEX_op_call</name></expr>;</expr_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:21"><expr pos:start="135:5" pos:end="135:20"><name pos:start="135:5" pos:end="135:12"><name pos:start="135:5" pos:end="135:6">op</name><operator pos:start="135:7" pos:end="135:8">-&gt;</operator><name pos:start="135:9" pos:end="135:12">prev</name></name> <operator pos:start="135:14" pos:end="135:14">=</operator> <name pos:start="135:16" pos:end="135:16">i</name> <operator pos:start="135:18" pos:end="135:18">-</operator> <literal type="number" pos:start="135:20" pos:end="135:20">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="137:5" pos:end="137:21"><expr pos:start="137:5" pos:end="137:20"><name pos:start="137:5" pos:end="137:12"><name pos:start="137:5" pos:end="137:6">op</name><operator pos:start="137:7" pos:end="137:8">-&gt;</operator><name pos:start="137:9" pos:end="137:12">next</name></name> <operator pos:start="137:14" pos:end="137:14">=</operator> <name pos:start="137:16" pos:end="137:16">i</name> <operator pos:start="137:18" pos:end="137:18">+</operator> <literal type="number" pos:start="137:20" pos:end="137:20">1</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="141:5" pos:end="141:11"><expr pos:start="141:5" pos:end="141:10"><name pos:start="141:5" pos:end="141:6">pi</name> <operator pos:start="141:8" pos:end="141:8">=</operator> <literal type="number" pos:start="141:10" pos:end="141:10">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="143:5" pos:end="209:5"><if pos:start="143:5" pos:end="205:5">if <condition pos:start="143:8" pos:end="143:20">(<expr pos:start="143:9" pos:end="143:19"><name pos:start="143:9" pos:end="143:11">ret</name> <operator pos:start="143:13" pos:end="143:14">!=</operator> <name pos:start="143:16" pos:end="143:19">NULL</name></expr>)</condition> <block pos:start="143:22" pos:end="205:5">{<block_content pos:start="149:9" pos:end="204:0">

<cpp:if pos:start="145:1" pos:end="147:39">#<cpp:directive pos:start="145:2" pos:end="145:3">if</cpp:directive> <expr pos:start="145:5" pos:end="147:39"><call pos:start="145:5" pos:end="145:22"><name pos:start="145:5" pos:end="145:11">defined</name><argument_list pos:start="145:12" pos:end="145:22">(<argument pos:start="145:13" pos:end="145:21"><expr pos:start="145:13" pos:end="145:21"><name pos:start="145:13" pos:end="145:21">__sparc__</name></expr></argument>)</argument_list></call> <operator pos:start="145:24" pos:end="145:25">&amp;&amp;</operator> <operator pos:start="145:27" pos:end="145:27">!</operator><call pos:start="145:28" pos:end="145:46"><name pos:start="145:28" pos:end="145:34">defined</name><argument_list pos:start="145:35" pos:end="145:46">(<argument pos:start="145:36" pos:end="145:45"><expr pos:start="145:36" pos:end="145:45"><name pos:start="145:36" pos:end="145:45">__arch64__</name></expr></argument>)</argument_list></call> \

    <operator pos:start="147:5" pos:end="147:6">&amp;&amp;</operator> <operator pos:start="147:8" pos:end="147:8">!</operator><call pos:start="147:9" pos:end="147:39"><name pos:start="147:9" pos:end="147:15">defined</name><argument_list pos:start="147:16" pos:end="147:39">(<argument pos:start="147:17" pos:end="147:38"><expr pos:start="147:17" pos:end="147:38"><name pos:start="147:17" pos:end="147:38">CONFIG_TCG_INTERPRETER</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <if_stmt pos:start="149:9" pos:end="176:0"><if pos:start="149:9" pos:end="167:9">if <condition pos:start="149:12" pos:end="149:30">(<expr pos:start="149:13" pos:end="149:29"><name pos:start="149:13" pos:end="149:25">orig_sizemask</name> <operator pos:start="149:27" pos:end="149:27">&amp;</operator> <literal type="number" pos:start="149:29" pos:end="149:29">1</literal></expr>)</condition> <block pos:start="149:32" pos:end="167:9">{<block_content pos:start="157:13" pos:end="165:24">

            <comment type="block" pos:start="151:13" pos:end="155:64">/* The 32-bit ABI is going to return the 64-bit value in

               the %o0/%o1 register pair.  Prepare for this by using

               two return temporaries, and reassemble below.  */</comment>

            <expr_stmt pos:start="157:13" pos:end="157:38"><expr pos:start="157:13" pos:end="157:37"><name pos:start="157:13" pos:end="157:16">retl</name> <operator pos:start="157:18" pos:end="157:18">=</operator> <call pos:start="157:20" pos:end="157:37"><name pos:start="157:20" pos:end="157:35">tcg_temp_new_i64</name><argument_list pos:start="157:36" pos:end="157:37">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="159:13" pos:end="159:38"><expr pos:start="159:13" pos:end="159:37"><name pos:start="159:13" pos:end="159:16">reth</name> <operator pos:start="159:18" pos:end="159:18">=</operator> <call pos:start="159:20" pos:end="159:37"><name pos:start="159:20" pos:end="159:35">tcg_temp_new_i64</name><argument_list pos:start="159:36" pos:end="159:37">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="161:13" pos:end="161:48"><expr pos:start="161:13" pos:end="161:47"><name pos:start="161:13" pos:end="161:26"><name pos:start="161:13" pos:end="161:14">op</name><operator pos:start="161:15" pos:end="161:16">-&gt;</operator><name pos:start="161:17" pos:end="161:20">args</name><index pos:start="161:21" pos:end="161:26">[<expr pos:start="161:22" pos:end="161:25"><name pos:start="161:22" pos:end="161:23">pi</name><operator pos:start="161:24" pos:end="161:25">++</operator></expr>]</index></name> <operator pos:start="161:28" pos:end="161:28">=</operator> <call pos:start="161:30" pos:end="161:47"><name pos:start="161:30" pos:end="161:41">tcgv_i64_arg</name><argument_list pos:start="161:42" pos:end="161:47">(<argument pos:start="161:43" pos:end="161:46"><expr pos:start="161:43" pos:end="161:46"><name pos:start="161:43" pos:end="161:46">reth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="163:13" pos:end="163:48"><expr pos:start="163:13" pos:end="163:47"><name pos:start="163:13" pos:end="163:26"><name pos:start="163:13" pos:end="163:14">op</name><operator pos:start="163:15" pos:end="163:16">-&gt;</operator><name pos:start="163:17" pos:end="163:20">args</name><index pos:start="163:21" pos:end="163:26">[<expr pos:start="163:22" pos:end="163:25"><name pos:start="163:22" pos:end="163:23">pi</name><operator pos:start="163:24" pos:end="163:25">++</operator></expr>]</index></name> <operator pos:start="163:28" pos:end="163:28">=</operator> <call pos:start="163:30" pos:end="163:47"><name pos:start="163:30" pos:end="163:41">tcgv_i64_arg</name><argument_list pos:start="163:42" pos:end="163:47">(<argument pos:start="163:43" pos:end="163:46"><expr pos:start="163:43" pos:end="163:46"><name pos:start="163:43" pos:end="163:46">retl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="165:13" pos:end="165:24"><expr pos:start="165:13" pos:end="165:23"><name pos:start="165:13" pos:end="165:19">nb_rets</name> <operator pos:start="165:21" pos:end="165:21">=</operator> <literal type="number" pos:start="165:23" pos:end="165:23">2</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="167:11" pos:end="176:0">else <block pos:start="167:16" pos:end="176:0">{<block_content pos:start="169:13" pos:end="171:24">

            <expr_stmt pos:start="169:13" pos:end="169:43"><expr pos:start="169:13" pos:end="169:42"><name pos:start="169:13" pos:end="169:26"><name pos:start="169:13" pos:end="169:14">op</name><operator pos:start="169:15" pos:end="169:16">-&gt;</operator><name pos:start="169:17" pos:end="169:20">args</name><index pos:start="169:21" pos:end="169:26">[<expr pos:start="169:22" pos:end="169:25"><name pos:start="169:22" pos:end="169:23">pi</name><operator pos:start="169:24" pos:end="169:25">++</operator></expr>]</index></name> <operator pos:start="169:28" pos:end="169:28">=</operator> <call pos:start="169:30" pos:end="169:42"><name pos:start="169:30" pos:end="169:37">temp_arg</name><argument_list pos:start="169:38" pos:end="169:42">(<argument pos:start="169:39" pos:end="169:41"><expr pos:start="169:39" pos:end="169:41"><name pos:start="169:39" pos:end="169:41">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="171:13" pos:end="171:24"><expr pos:start="171:13" pos:end="171:23"><name pos:start="171:13" pos:end="171:19">nb_rets</name> <operator pos:start="171:21" pos:end="171:21">=</operator> <literal type="number" pos:start="171:23" pos:end="171:23">1</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

<cpp:else pos:start="175:1" pos:end="175:5">#<cpp:directive pos:start="175:2" pos:end="175:5">else</cpp:directive></cpp:else>

        <if_stmt pos:start="177:9" pos:end="204:0"><if pos:start="177:9" pos:end="195:9">if <condition pos:start="177:12" pos:end="177:55">(<expr pos:start="177:13" pos:end="177:54"><name pos:start="177:13" pos:end="177:31">TCG_TARGET_REG_BITS</name> <operator pos:start="177:33" pos:end="177:33">&lt;</operator> <literal type="number" pos:start="177:35" pos:end="177:36">64</literal> <operator pos:start="177:38" pos:end="177:39">&amp;&amp;</operator> <operator pos:start="177:41" pos:end="177:41">(</operator><name pos:start="177:42" pos:end="177:49">sizemask</name> <operator pos:start="177:51" pos:end="177:51">&amp;</operator> <literal type="number" pos:start="177:53" pos:end="177:53">1</literal><operator pos:start="177:54" pos:end="177:54">)</operator></expr>)</condition> <block pos:start="177:57" pos:end="195:9">{<block_content pos:start="181:13" pos:end="193:24">

<cpp:ifdef pos:start="179:1" pos:end="179:27">#<cpp:directive pos:start="179:2" pos:end="179:6">ifdef</cpp:directive> <name pos:start="179:8" pos:end="179:27">HOST_WORDS_BIGENDIAN</name></cpp:ifdef>

            <expr_stmt pos:start="181:13" pos:end="181:47"><expr pos:start="181:13" pos:end="181:46"><name pos:start="181:13" pos:end="181:26"><name pos:start="181:13" pos:end="181:14">op</name><operator pos:start="181:15" pos:end="181:16">-&gt;</operator><name pos:start="181:17" pos:end="181:20">args</name><index pos:start="181:21" pos:end="181:26">[<expr pos:start="181:22" pos:end="181:25"><name pos:start="181:22" pos:end="181:23">pi</name><operator pos:start="181:24" pos:end="181:25">++</operator></expr>]</index></name> <operator pos:start="181:28" pos:end="181:28">=</operator> <call pos:start="181:30" pos:end="181:46"><name pos:start="181:30" pos:end="181:37">temp_arg</name><argument_list pos:start="181:38" pos:end="181:46">(<argument pos:start="181:39" pos:end="181:45"><expr pos:start="181:39" pos:end="181:45"><name pos:start="181:39" pos:end="181:41">ret</name> <operator pos:start="181:43" pos:end="181:43">+</operator> <literal type="number" pos:start="181:45" pos:end="181:45">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="183:13" pos:end="186:0"><expr pos:start="183:13" pos:end="183:42"><name pos:start="183:13" pos:end="183:26"><name pos:start="183:13" pos:end="183:14">op</name><operator pos:start="183:15" pos:end="183:16">-&gt;</operator><name pos:start="183:17" pos:end="183:20">args</name><index pos:start="183:21" pos:end="183:26">[<expr pos:start="183:22" pos:end="183:25"><name pos:start="183:22" pos:end="183:23">pi</name><operator pos:start="183:24" pos:end="183:25">++</operator></expr>]</index></name> <operator pos:start="183:28" pos:end="183:28">=</operator> <call pos:start="183:30" pos:end="183:42"><name pos:start="183:30" pos:end="183:37">temp_arg</name><argument_list pos:start="183:38" pos:end="183:42">(<argument pos:start="183:39" pos:end="183:41"><expr pos:start="183:39" pos:end="183:41"><name pos:start="183:39" pos:end="183:41">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="185:1" pos:end="185:5">#<cpp:directive pos:start="185:2" pos:end="185:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="187:13" pos:end="187:43"><expr pos:start="187:13" pos:end="187:42"><name pos:start="187:13" pos:end="187:26"><name pos:start="187:13" pos:end="187:14">op</name><operator pos:start="187:15" pos:end="187:16">-&gt;</operator><name pos:start="187:17" pos:end="187:20">args</name><index pos:start="187:21" pos:end="187:26">[<expr pos:start="187:22" pos:end="187:25"><name pos:start="187:22" pos:end="187:23">pi</name><operator pos:start="187:24" pos:end="187:25">++</operator></expr>]</index></name> <operator pos:start="187:28" pos:end="187:28">=</operator> <call pos:start="187:30" pos:end="187:42"><name pos:start="187:30" pos:end="187:37">temp_arg</name><argument_list pos:start="187:38" pos:end="187:42">(<argument pos:start="187:39" pos:end="187:41"><expr pos:start="187:39" pos:end="187:41"><name pos:start="187:39" pos:end="187:41">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="189:13" pos:end="192:0"><expr pos:start="189:13" pos:end="189:46"><name pos:start="189:13" pos:end="189:26"><name pos:start="189:13" pos:end="189:14">op</name><operator pos:start="189:15" pos:end="189:16">-&gt;</operator><name pos:start="189:17" pos:end="189:20">args</name><index pos:start="189:21" pos:end="189:26">[<expr pos:start="189:22" pos:end="189:25"><name pos:start="189:22" pos:end="189:23">pi</name><operator pos:start="189:24" pos:end="189:25">++</operator></expr>]</index></name> <operator pos:start="189:28" pos:end="189:28">=</operator> <call pos:start="189:30" pos:end="189:46"><name pos:start="189:30" pos:end="189:37">temp_arg</name><argument_list pos:start="189:38" pos:end="189:46">(<argument pos:start="189:39" pos:end="189:45"><expr pos:start="189:39" pos:end="189:45"><name pos:start="189:39" pos:end="189:41">ret</name> <operator pos:start="189:43" pos:end="189:43">+</operator> <literal type="number" pos:start="189:45" pos:end="189:45">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="191:1" pos:end="191:6">#<cpp:directive pos:start="191:2" pos:end="191:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="193:13" pos:end="193:24"><expr pos:start="193:13" pos:end="193:23"><name pos:start="193:13" pos:end="193:19">nb_rets</name> <operator pos:start="193:21" pos:end="193:21">=</operator> <literal type="number" pos:start="193:23" pos:end="193:23">2</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="195:11" pos:end="204:0">else <block pos:start="195:16" pos:end="204:0">{<block_content pos:start="197:13" pos:end="199:24">

            <expr_stmt pos:start="197:13" pos:end="197:43"><expr pos:start="197:13" pos:end="197:42"><name pos:start="197:13" pos:end="197:26"><name pos:start="197:13" pos:end="197:14">op</name><operator pos:start="197:15" pos:end="197:16">-&gt;</operator><name pos:start="197:17" pos:end="197:20">args</name><index pos:start="197:21" pos:end="197:26">[<expr pos:start="197:22" pos:end="197:25"><name pos:start="197:22" pos:end="197:23">pi</name><operator pos:start="197:24" pos:end="197:25">++</operator></expr>]</index></name> <operator pos:start="197:28" pos:end="197:28">=</operator> <call pos:start="197:30" pos:end="197:42"><name pos:start="197:30" pos:end="197:37">temp_arg</name><argument_list pos:start="197:38" pos:end="197:42">(<argument pos:start="197:39" pos:end="197:41"><expr pos:start="197:39" pos:end="197:41"><name pos:start="197:39" pos:end="197:41">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="199:13" pos:end="199:24"><expr pos:start="199:13" pos:end="199:23"><name pos:start="199:13" pos:end="199:19">nb_rets</name> <operator pos:start="199:21" pos:end="199:21">=</operator> <literal type="number" pos:start="199:23" pos:end="199:23">1</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

<cpp:endif pos:start="203:1" pos:end="203:6">#<cpp:directive pos:start="203:2" pos:end="203:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if> <else pos:start="205:7" pos:end="209:5">else <block pos:start="205:12" pos:end="209:5">{<block_content pos:start="207:9" pos:end="207:20">

        <expr_stmt pos:start="207:9" pos:end="207:20"><expr pos:start="207:9" pos:end="207:19"><name pos:start="207:9" pos:end="207:15">nb_rets</name> <operator pos:start="207:17" pos:end="207:17">=</operator> <literal type="number" pos:start="207:19" pos:end="207:19">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="211:5" pos:end="211:24"><expr pos:start="211:5" pos:end="211:23"><name pos:start="211:5" pos:end="211:13"><name pos:start="211:5" pos:end="211:6">op</name><operator pos:start="211:7" pos:end="211:8">-&gt;</operator><name pos:start="211:9" pos:end="211:13">callo</name></name> <operator pos:start="211:15" pos:end="211:15">=</operator> <name pos:start="211:17" pos:end="211:23">nb_rets</name></expr>;</expr_stmt>



    <expr_stmt pos:start="215:5" pos:end="215:18"><expr pos:start="215:5" pos:end="215:17"><name pos:start="215:5" pos:end="215:13">real_args</name> <operator pos:start="215:15" pos:end="215:15">=</operator> <literal type="number" pos:start="215:17" pos:end="215:17">0</literal></expr>;</expr_stmt>

    <for pos:start="217:5" pos:end="283:5">for <control pos:start="217:9" pos:end="217:31">(<init pos:start="217:10" pos:end="217:15"><expr pos:start="217:10" pos:end="217:14"><name pos:start="217:10" pos:end="217:10">i</name> <operator pos:start="217:12" pos:end="217:12">=</operator> <literal type="number" pos:start="217:14" pos:end="217:14">0</literal></expr>;</init> <condition pos:start="217:17" pos:end="217:26"><expr pos:start="217:17" pos:end="217:25"><name pos:start="217:17" pos:end="217:17">i</name> <operator pos:start="217:19" pos:end="217:19">&lt;</operator> <name pos:start="217:21" pos:end="217:25">nargs</name></expr>;</condition> <incr pos:start="217:28" pos:end="217:30"><expr pos:start="217:28" pos:end="217:30"><name pos:start="217:28" pos:end="217:28">i</name><operator pos:start="217:29" pos:end="217:30">++</operator></expr></incr>)</control> <block pos:start="217:33" pos:end="283:5">{<block_content pos:start="219:9" pos:end="281:20">

        <decl_stmt pos:start="219:9" pos:end="219:49"><decl pos:start="219:9" pos:end="219:48"><type pos:start="219:9" pos:end="219:11"><name pos:start="219:9" pos:end="219:11">int</name></type> <name pos:start="219:13" pos:end="219:20">is_64bit</name> <init pos:start="219:22" pos:end="219:48">= <expr pos:start="219:24" pos:end="219:48"><name pos:start="219:24" pos:end="219:31">sizemask</name> <operator pos:start="219:33" pos:end="219:33">&amp;</operator> <operator pos:start="219:35" pos:end="219:35">(</operator><literal type="number" pos:start="219:36" pos:end="219:36">1</literal> <operator pos:start="219:38" pos:end="219:39">&lt;&lt;</operator> <operator pos:start="219:41" pos:end="219:41">(</operator><name pos:start="219:42" pos:end="219:42">i</name><operator pos:start="219:43" pos:end="219:43">+</operator><literal type="number" pos:start="219:44" pos:end="219:44">1</literal><operator pos:start="219:45" pos:end="219:45">)</operator><operator pos:start="219:46" pos:end="219:46">*</operator><literal type="number" pos:start="219:47" pos:end="219:47">2</literal><operator pos:start="219:48" pos:end="219:48">)</operator></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="221:9" pos:end="275:9"><if pos:start="221:9" pos:end="275:9">if <condition pos:start="221:12" pos:end="221:49">(<expr pos:start="221:13" pos:end="221:48"><name pos:start="221:13" pos:end="221:31">TCG_TARGET_REG_BITS</name> <operator pos:start="221:33" pos:end="221:33">&lt;</operator> <literal type="number" pos:start="221:35" pos:end="221:36">64</literal> <operator pos:start="221:38" pos:end="221:39">&amp;&amp;</operator> <name pos:start="221:41" pos:end="221:48">is_64bit</name></expr>)</condition> <block pos:start="221:51" pos:end="275:9">{<block_content pos:start="227:13" pos:end="273:21">

<cpp:ifdef pos:start="223:1" pos:end="223:33">#<cpp:directive pos:start="223:2" pos:end="223:6">ifdef</cpp:directive> <name pos:start="223:8" pos:end="223:33">TCG_TARGET_CALL_ALIGN_ARGS</name></cpp:ifdef>

            <comment type="block" pos:start="225:13" pos:end="225:55">/* some targets want aligned 64 bit args */</comment>

            <if_stmt pos:start="227:13" pos:end="258:0"><if pos:start="227:13" pos:end="258:0">if <condition pos:start="227:16" pos:end="227:30">(<expr pos:start="227:17" pos:end="227:29"><name pos:start="227:17" pos:end="227:25">real_args</name> <operator pos:start="227:27" pos:end="227:27">&amp;</operator> <literal type="number" pos:start="227:29" pos:end="227:29">1</literal></expr>)</condition> <block pos:start="227:32" pos:end="258:0">{<block_content pos:start="229:17" pos:end="231:28">

                <expr_stmt pos:start="229:17" pos:end="229:52"><expr pos:start="229:17" pos:end="229:51"><name pos:start="229:17" pos:end="229:30"><name pos:start="229:17" pos:end="229:18">op</name><operator pos:start="229:19" pos:end="229:20">-&gt;</operator><name pos:start="229:21" pos:end="229:24">args</name><index pos:start="229:25" pos:end="229:30">[<expr pos:start="229:26" pos:end="229:29"><name pos:start="229:26" pos:end="229:27">pi</name><operator pos:start="229:28" pos:end="229:29">++</operator></expr>]</index></name> <operator pos:start="229:32" pos:end="229:32">=</operator> <name pos:start="229:34" pos:end="229:51">TCG_CALL_DUMMY_ARG</name></expr>;</expr_stmt>

                <expr_stmt pos:start="231:17" pos:end="231:28"><expr pos:start="231:17" pos:end="231:27"><name pos:start="231:17" pos:end="231:25">real_args</name><operator pos:start="231:26" pos:end="231:27">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="235:1" pos:end="235:6">#<cpp:directive pos:start="235:2" pos:end="235:6">endif</cpp:directive></cpp:endif>

           <comment type="block" pos:start="237:12" pos:end="255:57">/* If stack grows up, then we will be placing successive

              arguments at lower addresses, which means we need to

              reverse the order compared to how we would normally

              treat either big or little-endian.  For those arguments

              that will wind up in registers, this still works for

              HPPA (the only current STACK_GROWSUP target) since the

              argument registers are *also* allocated in decreasing

              order.  If another such target is added, this logic may

              have to get more complicated to differentiate between

              stack arguments and register arguments.  */</comment>

<cpp:if pos:start="257:1" pos:end="257:70">#<cpp:directive pos:start="257:2" pos:end="257:3">if</cpp:directive> <expr pos:start="257:5" pos:end="257:70"><call pos:start="257:5" pos:end="257:33"><name pos:start="257:5" pos:end="257:11">defined</name><argument_list pos:start="257:12" pos:end="257:33">(<argument pos:start="257:13" pos:end="257:32"><expr pos:start="257:13" pos:end="257:32"><name pos:start="257:13" pos:end="257:32">HOST_WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call> <operator pos:start="257:35" pos:end="257:36">!=</operator> <call pos:start="257:38" pos:end="257:70"><name pos:start="257:38" pos:end="257:44">defined</name><argument_list pos:start="257:45" pos:end="257:70">(<argument pos:start="257:46" pos:end="257:69"><expr pos:start="257:46" pos:end="257:69"><name pos:start="257:46" pos:end="257:69">TCG_TARGET_STACK_GROWSUP</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <expr_stmt pos:start="259:13" pos:end="259:51"><expr pos:start="259:13" pos:end="259:50"><name pos:start="259:13" pos:end="259:26"><name pos:start="259:13" pos:end="259:14">op</name><operator pos:start="259:15" pos:end="259:16">-&gt;</operator><name pos:start="259:17" pos:end="259:20">args</name><index pos:start="259:21" pos:end="259:26">[<expr pos:start="259:22" pos:end="259:25"><name pos:start="259:22" pos:end="259:23">pi</name><operator pos:start="259:24" pos:end="259:25">++</operator></expr>]</index></name> <operator pos:start="259:28" pos:end="259:28">=</operator> <call pos:start="259:30" pos:end="259:50"><name pos:start="259:30" pos:end="259:37">temp_arg</name><argument_list pos:start="259:38" pos:end="259:50">(<argument pos:start="259:39" pos:end="259:49"><expr pos:start="259:39" pos:end="259:49"><name pos:start="259:39" pos:end="259:45"><name pos:start="259:39" pos:end="259:42">args</name><index pos:start="259:43" pos:end="259:45">[<expr pos:start="259:44" pos:end="259:44"><name pos:start="259:44" pos:end="259:44">i</name></expr>]</index></name> <operator pos:start="259:47" pos:end="259:47">+</operator> <literal type="number" pos:start="259:49" pos:end="259:49">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="261:13" pos:end="264:0"><expr pos:start="261:13" pos:end="261:46"><name pos:start="261:13" pos:end="261:26"><name pos:start="261:13" pos:end="261:14">op</name><operator pos:start="261:15" pos:end="261:16">-&gt;</operator><name pos:start="261:17" pos:end="261:20">args</name><index pos:start="261:21" pos:end="261:26">[<expr pos:start="261:22" pos:end="261:25"><name pos:start="261:22" pos:end="261:23">pi</name><operator pos:start="261:24" pos:end="261:25">++</operator></expr>]</index></name> <operator pos:start="261:28" pos:end="261:28">=</operator> <call pos:start="261:30" pos:end="261:46"><name pos:start="261:30" pos:end="261:37">temp_arg</name><argument_list pos:start="261:38" pos:end="261:46">(<argument pos:start="261:39" pos:end="261:45"><expr pos:start="261:39" pos:end="261:45"><name pos:start="261:39" pos:end="261:45"><name pos:start="261:39" pos:end="261:42">args</name><index pos:start="261:43" pos:end="261:45">[<expr pos:start="261:44" pos:end="261:44"><name pos:start="261:44" pos:end="261:44">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="263:1" pos:end="263:5">#<cpp:directive pos:start="263:2" pos:end="263:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="265:13" pos:end="265:47"><expr pos:start="265:13" pos:end="265:46"><name pos:start="265:13" pos:end="265:26"><name pos:start="265:13" pos:end="265:14">op</name><operator pos:start="265:15" pos:end="265:16">-&gt;</operator><name pos:start="265:17" pos:end="265:20">args</name><index pos:start="265:21" pos:end="265:26">[<expr pos:start="265:22" pos:end="265:25"><name pos:start="265:22" pos:end="265:23">pi</name><operator pos:start="265:24" pos:end="265:25">++</operator></expr>]</index></name> <operator pos:start="265:28" pos:end="265:28">=</operator> <call pos:start="265:30" pos:end="265:46"><name pos:start="265:30" pos:end="265:37">temp_arg</name><argument_list pos:start="265:38" pos:end="265:46">(<argument pos:start="265:39" pos:end="265:45"><expr pos:start="265:39" pos:end="265:45"><name pos:start="265:39" pos:end="265:45"><name pos:start="265:39" pos:end="265:42">args</name><index pos:start="265:43" pos:end="265:45">[<expr pos:start="265:44" pos:end="265:44"><name pos:start="265:44" pos:end="265:44">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="267:13" pos:end="270:0"><expr pos:start="267:13" pos:end="267:50"><name pos:start="267:13" pos:end="267:26"><name pos:start="267:13" pos:end="267:14">op</name><operator pos:start="267:15" pos:end="267:16">-&gt;</operator><name pos:start="267:17" pos:end="267:20">args</name><index pos:start="267:21" pos:end="267:26">[<expr pos:start="267:22" pos:end="267:25"><name pos:start="267:22" pos:end="267:23">pi</name><operator pos:start="267:24" pos:end="267:25">++</operator></expr>]</index></name> <operator pos:start="267:28" pos:end="267:28">=</operator> <call pos:start="267:30" pos:end="267:50"><name pos:start="267:30" pos:end="267:37">temp_arg</name><argument_list pos:start="267:38" pos:end="267:50">(<argument pos:start="267:39" pos:end="267:49"><expr pos:start="267:39" pos:end="267:49"><name pos:start="267:39" pos:end="267:45"><name pos:start="267:39" pos:end="267:42">args</name><index pos:start="267:43" pos:end="267:45">[<expr pos:start="267:44" pos:end="267:44"><name pos:start="267:44" pos:end="267:44">i</name></expr>]</index></name> <operator pos:start="267:47" pos:end="267:47">+</operator> <literal type="number" pos:start="267:49" pos:end="267:49">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="269:1" pos:end="269:6">#<cpp:directive pos:start="269:2" pos:end="269:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="271:13" pos:end="271:27"><expr pos:start="271:13" pos:end="271:26"><name pos:start="271:13" pos:end="271:21">real_args</name> <operator pos:start="271:23" pos:end="271:24">+=</operator> <literal type="number" pos:start="271:26" pos:end="271:26">2</literal></expr>;</expr_stmt>

            <continue pos:start="273:13" pos:end="273:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="279:9" pos:end="279:43"><expr pos:start="279:9" pos:end="279:42"><name pos:start="279:9" pos:end="279:22"><name pos:start="279:9" pos:end="279:10">op</name><operator pos:start="279:11" pos:end="279:12">-&gt;</operator><name pos:start="279:13" pos:end="279:16">args</name><index pos:start="279:17" pos:end="279:22">[<expr pos:start="279:18" pos:end="279:21"><name pos:start="279:18" pos:end="279:19">pi</name><operator pos:start="279:20" pos:end="279:21">++</operator></expr>]</index></name> <operator pos:start="279:24" pos:end="279:24">=</operator> <call pos:start="279:26" pos:end="279:42"><name pos:start="279:26" pos:end="279:33">temp_arg</name><argument_list pos:start="279:34" pos:end="279:42">(<argument pos:start="279:35" pos:end="279:41"><expr pos:start="279:35" pos:end="279:41"><name pos:start="279:35" pos:end="279:41"><name pos:start="279:35" pos:end="279:38">args</name><index pos:start="279:39" pos:end="279:41">[<expr pos:start="279:40" pos:end="279:40"><name pos:start="279:40" pos:end="279:40">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="281:9" pos:end="281:20"><expr pos:start="281:9" pos:end="281:19"><name pos:start="281:9" pos:end="281:17">real_args</name><operator pos:start="281:18" pos:end="281:19">++</operator></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="285:5" pos:end="285:37"><expr pos:start="285:5" pos:end="285:36"><name pos:start="285:5" pos:end="285:18"><name pos:start="285:5" pos:end="285:6">op</name><operator pos:start="285:7" pos:end="285:8">-&gt;</operator><name pos:start="285:9" pos:end="285:12">args</name><index pos:start="285:13" pos:end="285:18">[<expr pos:start="285:14" pos:end="285:17"><name pos:start="285:14" pos:end="285:15">pi</name><operator pos:start="285:16" pos:end="285:17">++</operator></expr>]</index></name> <operator pos:start="285:20" pos:end="285:20">=</operator> <operator pos:start="285:22" pos:end="285:22">(</operator><name pos:start="285:23" pos:end="285:31">uintptr_t</name><operator pos:start="285:32" pos:end="285:32">)</operator><name pos:start="285:33" pos:end="285:36">func</name></expr>;</expr_stmt>

    <expr_stmt pos:start="287:5" pos:end="287:27"><expr pos:start="287:5" pos:end="287:26"><name pos:start="287:5" pos:end="287:18"><name pos:start="287:5" pos:end="287:6">op</name><operator pos:start="287:7" pos:end="287:8">-&gt;</operator><name pos:start="287:9" pos:end="287:12">args</name><index pos:start="287:13" pos:end="287:18">[<expr pos:start="287:14" pos:end="287:17"><name pos:start="287:14" pos:end="287:15">pi</name><operator pos:start="287:16" pos:end="287:17">++</operator></expr>]</index></name> <operator pos:start="287:20" pos:end="287:20">=</operator> <name pos:start="287:22" pos:end="287:26">flags</name></expr>;</expr_stmt>

    <expr_stmt pos:start="289:5" pos:end="289:26"><expr pos:start="289:5" pos:end="289:25"><name pos:start="289:5" pos:end="289:13"><name pos:start="289:5" pos:end="289:6">op</name><operator pos:start="289:7" pos:end="289:8">-&gt;</operator><name pos:start="289:9" pos:end="289:13">calli</name></name> <operator pos:start="289:15" pos:end="289:15">=</operator> <name pos:start="289:17" pos:end="289:25">real_args</name></expr>;</expr_stmt>



    <comment type="block" pos:start="293:5" pos:end="293:48">/* Make sure the fields didn't overflow.  */</comment>

    <expr_stmt pos:start="295:5" pos:end="295:45"><expr pos:start="295:5" pos:end="295:44"><call pos:start="295:5" pos:end="295:44"><name pos:start="295:5" pos:end="295:20">tcg_debug_assert</name><argument_list pos:start="295:21" pos:end="295:44">(<argument pos:start="295:22" pos:end="295:43"><expr pos:start="295:22" pos:end="295:43"><name pos:start="295:22" pos:end="295:30"><name pos:start="295:22" pos:end="295:23">op</name><operator pos:start="295:24" pos:end="295:25">-&gt;</operator><name pos:start="295:26" pos:end="295:30">calli</name></name> <operator pos:start="295:32" pos:end="295:33">==</operator> <name pos:start="295:35" pos:end="295:43">real_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="297:5" pos:end="304:0"><expr pos:start="297:5" pos:end="297:48"><call pos:start="297:5" pos:end="297:48"><name pos:start="297:5" pos:end="297:20">tcg_debug_assert</name><argument_list pos:start="297:21" pos:end="297:48">(<argument pos:start="297:22" pos:end="297:47"><expr pos:start="297:22" pos:end="297:47"><name pos:start="297:22" pos:end="297:23">pi</name> <operator pos:start="297:25" pos:end="297:26">&lt;=</operator> <call pos:start="297:28" pos:end="297:47"><name pos:start="297:28" pos:end="297:37">ARRAY_SIZE</name><argument_list pos:start="297:38" pos:end="297:47">(<argument pos:start="297:39" pos:end="297:46"><expr pos:start="297:39" pos:end="297:46"><name pos:start="297:39" pos:end="297:46"><name pos:start="297:39" pos:end="297:40">op</name><operator pos:start="297:41" pos:end="297:42">-&gt;</operator><name pos:start="297:43" pos:end="297:46">args</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:if pos:start="301:1" pos:end="303:39">#<cpp:directive pos:start="301:2" pos:end="301:3">if</cpp:directive> <expr pos:start="301:5" pos:end="303:39"><call pos:start="301:5" pos:end="301:22"><name pos:start="301:5" pos:end="301:11">defined</name><argument_list pos:start="301:12" pos:end="301:22">(<argument pos:start="301:13" pos:end="301:21"><expr pos:start="301:13" pos:end="301:21"><name pos:start="301:13" pos:end="301:21">__sparc__</name></expr></argument>)</argument_list></call> <operator pos:start="301:24" pos:end="301:25">&amp;&amp;</operator> <operator pos:start="301:27" pos:end="301:27">!</operator><call pos:start="301:28" pos:end="301:46"><name pos:start="301:28" pos:end="301:34">defined</name><argument_list pos:start="301:35" pos:end="301:46">(<argument pos:start="301:36" pos:end="301:45"><expr pos:start="301:36" pos:end="301:45"><name pos:start="301:36" pos:end="301:45">__arch64__</name></expr></argument>)</argument_list></call> \

    <operator pos:start="303:5" pos:end="303:6">&amp;&amp;</operator> <operator pos:start="303:8" pos:end="303:8">!</operator><call pos:start="303:9" pos:end="303:39"><name pos:start="303:9" pos:end="303:15">defined</name><argument_list pos:start="303:16" pos:end="303:39">(<argument pos:start="303:17" pos:end="303:38"><expr pos:start="303:17" pos:end="303:38"><name pos:start="303:17" pos:end="303:38">CONFIG_TCG_INTERPRETER</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <comment type="block" pos:start="305:5" pos:end="305:52">/* Free all of the parts we allocated above.  */</comment>

    <for pos:start="307:5" pos:end="323:5">for <control pos:start="307:9" pos:end="307:48">(<init pos:start="307:10" pos:end="307:27"><expr pos:start="307:10" pos:end="307:26"><name pos:start="307:10" pos:end="307:10">i</name> <operator pos:start="307:12" pos:end="307:12">=</operator> <name pos:start="307:14" pos:end="307:22">real_args</name> <operator pos:start="307:24" pos:end="307:24">=</operator> <literal type="number" pos:start="307:26" pos:end="307:26">0</literal></expr>;</init> <condition pos:start="307:29" pos:end="307:43"><expr pos:start="307:29" pos:end="307:42"><name pos:start="307:29" pos:end="307:29">i</name> <operator pos:start="307:31" pos:end="307:31">&lt;</operator> <name pos:start="307:33" pos:end="307:42">orig_nargs</name></expr>;</condition> <incr pos:start="307:45" pos:end="307:47"><expr pos:start="307:45" pos:end="307:47"><operator pos:start="307:45" pos:end="307:46">++</operator><name pos:start="307:47" pos:end="307:47">i</name></expr></incr>)</control> <block pos:start="307:50" pos:end="323:5">{<block_content pos:start="309:9" pos:end="321:9">

        <decl_stmt pos:start="309:9" pos:end="309:54"><decl pos:start="309:9" pos:end="309:53"><type pos:start="309:9" pos:end="309:11"><name pos:start="309:9" pos:end="309:11">int</name></type> <name pos:start="309:13" pos:end="309:20">is_64bit</name> <init pos:start="309:22" pos:end="309:53">= <expr pos:start="309:24" pos:end="309:53"><name pos:start="309:24" pos:end="309:36">orig_sizemask</name> <operator pos:start="309:38" pos:end="309:38">&amp;</operator> <operator pos:start="309:40" pos:end="309:40">(</operator><literal type="number" pos:start="309:41" pos:end="309:41">1</literal> <operator pos:start="309:43" pos:end="309:44">&lt;&lt;</operator> <operator pos:start="309:46" pos:end="309:46">(</operator><name pos:start="309:47" pos:end="309:47">i</name><operator pos:start="309:48" pos:end="309:48">+</operator><literal type="number" pos:start="309:49" pos:end="309:49">1</literal><operator pos:start="309:50" pos:end="309:50">)</operator><operator pos:start="309:51" pos:end="309:51">*</operator><literal type="number" pos:start="309:52" pos:end="309:52">2</literal><operator pos:start="309:53" pos:end="309:53">)</operator></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="311:9" pos:end="321:9"><if pos:start="311:9" pos:end="317:9">if <condition pos:start="311:12" pos:end="311:21">(<expr pos:start="311:13" pos:end="311:20"><name pos:start="311:13" pos:end="311:20">is_64bit</name></expr>)</condition> <block pos:start="311:23" pos:end="317:9">{<block_content pos:start="313:13" pos:end="315:54">

            <expr_stmt pos:start="313:13" pos:end="313:54"><expr pos:start="313:13" pos:end="313:53"><call pos:start="313:13" pos:end="313:53"><name pos:start="313:13" pos:end="313:34">tcg_temp_free_internal</name><argument_list pos:start="313:35" pos:end="313:53">(<argument pos:start="313:36" pos:end="313:52"><expr pos:start="313:36" pos:end="313:52"><name pos:start="313:36" pos:end="313:52"><name pos:start="313:36" pos:end="313:39">args</name><index pos:start="313:40" pos:end="313:52">[<expr pos:start="313:41" pos:end="313:51"><name pos:start="313:41" pos:end="313:49">real_args</name><operator pos:start="313:50" pos:end="313:51">++</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="315:13" pos:end="315:54"><expr pos:start="315:13" pos:end="315:53"><call pos:start="315:13" pos:end="315:53"><name pos:start="315:13" pos:end="315:34">tcg_temp_free_internal</name><argument_list pos:start="315:35" pos:end="315:53">(<argument pos:start="315:36" pos:end="315:52"><expr pos:start="315:36" pos:end="315:52"><name pos:start="315:36" pos:end="315:52"><name pos:start="315:36" pos:end="315:39">args</name><index pos:start="315:40" pos:end="315:52">[<expr pos:start="315:41" pos:end="315:51"><name pos:start="315:41" pos:end="315:49">real_args</name><operator pos:start="315:50" pos:end="315:51">++</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="317:11" pos:end="321:9">else <block pos:start="317:16" pos:end="321:9">{<block_content pos:start="319:13" pos:end="319:24">

            <expr_stmt pos:start="319:13" pos:end="319:24"><expr pos:start="319:13" pos:end="319:23"><name pos:start="319:13" pos:end="319:21">real_args</name><operator pos:start="319:22" pos:end="319:23">++</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>

    <if_stmt pos:start="325:5" pos:end="342:0"><if pos:start="325:5" pos:end="342:0">if <condition pos:start="325:8" pos:end="325:26">(<expr pos:start="325:9" pos:end="325:25"><name pos:start="325:9" pos:end="325:21">orig_sizemask</name> <operator pos:start="325:23" pos:end="325:23">&amp;</operator> <literal type="number" pos:start="325:25" pos:end="325:25">1</literal></expr>)</condition> <block pos:start="325:28" pos:end="342:0">{<block_content pos:start="333:9" pos:end="337:32">

        <comment type="block" pos:start="327:9" pos:end="331:71">/* The 32-bit ABI returned two 32-bit pieces.  Re-assemble them.

           Note that describing these as TCGv_i64 eliminates an unnecessary

           zero-extension that tcg_gen_concat_i32_i64 would create.  */</comment>

        <expr_stmt pos:start="333:9" pos:end="333:61"><expr pos:start="333:9" pos:end="333:60"><call pos:start="333:9" pos:end="333:60"><name pos:start="333:9" pos:end="333:28">tcg_gen_concat32_i64</name><argument_list pos:start="333:29" pos:end="333:60">(<argument pos:start="333:30" pos:end="333:47"><expr pos:start="333:30" pos:end="333:47"><call pos:start="333:30" pos:end="333:47"><name pos:start="333:30" pos:end="333:42">temp_tcgv_i64</name><argument_list pos:start="333:43" pos:end="333:47">(<argument pos:start="333:44" pos:end="333:46"><expr pos:start="333:44" pos:end="333:46"><name pos:start="333:44" pos:end="333:46">ret</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="333:50" pos:end="333:53"><expr pos:start="333:50" pos:end="333:53"><name pos:start="333:50" pos:end="333:53">retl</name></expr></argument>, <argument pos:start="333:56" pos:end="333:59"><expr pos:start="333:56" pos:end="333:59"><name pos:start="333:56" pos:end="333:59">reth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="335:9" pos:end="335:32"><expr pos:start="335:9" pos:end="335:31"><call pos:start="335:9" pos:end="335:31"><name pos:start="335:9" pos:end="335:25">tcg_temp_free_i64</name><argument_list pos:start="335:26" pos:end="335:31">(<argument pos:start="335:27" pos:end="335:30"><expr pos:start="335:27" pos:end="335:30"><name pos:start="335:27" pos:end="335:30">retl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="337:9" pos:end="337:32"><expr pos:start="337:9" pos:end="337:31"><call pos:start="337:9" pos:end="337:31"><name pos:start="337:9" pos:end="337:25">tcg_temp_free_i64</name><argument_list pos:start="337:26" pos:end="337:31">(<argument pos:start="337:27" pos:end="337:30"><expr pos:start="337:27" pos:end="337:30"><name pos:start="337:27" pos:end="337:30">reth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:elif pos:start="341:1" pos:end="341:66">#<cpp:directive pos:start="341:2" pos:end="341:5">elif</cpp:directive> <expr pos:start="341:7" pos:end="341:66"><call pos:start="341:7" pos:end="341:37"><name pos:start="341:7" pos:end="341:13">defined</name><argument_list pos:start="341:14" pos:end="341:37">(<argument pos:start="341:15" pos:end="341:36"><expr pos:start="341:15" pos:end="341:36"><name pos:start="341:15" pos:end="341:36">TCG_TARGET_EXTEND_ARGS</name></expr></argument>)</argument_list></call> <operator pos:start="341:39" pos:end="341:40">&amp;&amp;</operator> <name pos:start="341:42" pos:end="341:60">TCG_TARGET_REG_BITS</name> <operator pos:start="341:62" pos:end="341:63">==</operator> <literal type="number" pos:start="341:65" pos:end="341:66">64</literal></expr></cpp:elif>

    <for pos:start="343:5" pos:end="356:0">for <control pos:start="343:9" pos:end="343:31">(<init pos:start="343:10" pos:end="343:15"><expr pos:start="343:10" pos:end="343:14"><name pos:start="343:10" pos:end="343:10">i</name> <operator pos:start="343:12" pos:end="343:12">=</operator> <literal type="number" pos:start="343:14" pos:end="343:14">0</literal></expr>;</init> <condition pos:start="343:17" pos:end="343:26"><expr pos:start="343:17" pos:end="343:25"><name pos:start="343:17" pos:end="343:17">i</name> <operator pos:start="343:19" pos:end="343:19">&lt;</operator> <name pos:start="343:21" pos:end="343:25">nargs</name></expr>;</condition> <incr pos:start="343:28" pos:end="343:30"><expr pos:start="343:28" pos:end="343:30"><operator pos:start="343:28" pos:end="343:29">++</operator><name pos:start="343:30" pos:end="343:30">i</name></expr></incr>)</control> <block pos:start="343:33" pos:end="356:0">{<block_content pos:start="345:9" pos:end="351:9">

        <decl_stmt pos:start="345:9" pos:end="345:49"><decl pos:start="345:9" pos:end="345:48"><type pos:start="345:9" pos:end="345:11"><name pos:start="345:9" pos:end="345:11">int</name></type> <name pos:start="345:13" pos:end="345:20">is_64bit</name> <init pos:start="345:22" pos:end="345:48">= <expr pos:start="345:24" pos:end="345:48"><name pos:start="345:24" pos:end="345:31">sizemask</name> <operator pos:start="345:33" pos:end="345:33">&amp;</operator> <operator pos:start="345:35" pos:end="345:35">(</operator><literal type="number" pos:start="345:36" pos:end="345:36">1</literal> <operator pos:start="345:38" pos:end="345:39">&lt;&lt;</operator> <operator pos:start="345:41" pos:end="345:41">(</operator><name pos:start="345:42" pos:end="345:42">i</name><operator pos:start="345:43" pos:end="345:43">+</operator><literal type="number" pos:start="345:44" pos:end="345:44">1</literal><operator pos:start="345:45" pos:end="345:45">)</operator><operator pos:start="345:46" pos:end="345:46">*</operator><literal type="number" pos:start="345:47" pos:end="345:47">2</literal><operator pos:start="345:48" pos:end="345:48">)</operator></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="347:9" pos:end="351:9"><if pos:start="347:9" pos:end="351:9">if <condition pos:start="347:12" pos:end="347:22">(<expr pos:start="347:13" pos:end="347:21"><operator pos:start="347:13" pos:end="347:13">!</operator><name pos:start="347:14" pos:end="347:21">is_64bit</name></expr>)</condition> <block pos:start="347:24" pos:end="351:9">{<block_content pos:start="349:13" pos:end="349:44">

            <expr_stmt pos:start="349:13" pos:end="349:44"><expr pos:start="349:13" pos:end="349:43"><call pos:start="349:13" pos:end="349:43"><name pos:start="349:13" pos:end="349:34">tcg_temp_free_internal</name><argument_list pos:start="349:35" pos:end="349:43">(<argument pos:start="349:36" pos:end="349:42"><expr pos:start="349:36" pos:end="349:42"><name pos:start="349:36" pos:end="349:42"><name pos:start="349:36" pos:end="349:39">args</name><index pos:start="349:40" pos:end="349:42">[<expr pos:start="349:41" pos:end="349:41"><name pos:start="349:41" pos:end="349:41">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

<cpp:endif pos:start="355:1" pos:end="355:6">#<cpp:directive pos:start="355:2" pos:end="355:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="355:8" pos:end="355:35">/* TCG_TARGET_EXTEND_ARGS */</comment>

</block_content>}</block></function>
</unit>
