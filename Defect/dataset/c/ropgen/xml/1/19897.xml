<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19897.c" pos:tabs="8"><function pos:start="1:1" pos:end="225:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">read_sm_data</name><parameter_list pos:start="1:24" pos:end="1:104">(<parameter pos:start="1:25" pos:end="1:42"><decl pos:start="1:25" pos:end="1:42"><type pos:start="1:25" pos:end="1:42"><name pos:start="1:25" pos:end="1:39">AVFormatContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:42">s</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:59"><decl pos:start="1:45" pos:end="1:59"><type pos:start="1:45" pos:end="1:59"><name pos:start="1:45" pos:end="1:55">AVIOContext</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:59">bc</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:74"><decl pos:start="1:62" pos:end="1:74"><type pos:start="1:62" pos:end="1:74"><name pos:start="1:62" pos:end="1:69">AVPacket</name> <modifier pos:start="1:71" pos:end="1:71">*</modifier></type><name pos:start="1:72" pos:end="1:74">pkt</name></decl></parameter>, <parameter pos:start="1:77" pos:end="1:87"><decl pos:start="1:77" pos:end="1:87"><type pos:start="1:77" pos:end="1:87"><name pos:start="1:77" pos:end="1:79">int</name></type> <name pos:start="1:81" pos:end="1:87">is_meta</name></decl></parameter>, <parameter pos:start="1:90" pos:end="1:103"><decl pos:start="1:90" pos:end="1:103"><type pos:start="1:90" pos:end="1:103"><name pos:start="1:90" pos:end="1:96">int64_t</name></type> <name pos:start="1:98" pos:end="1:103">maxpos</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="225:1">{<block_content pos:start="5:5" pos:end="223:13">

    <decl_stmt pos:start="5:5" pos:end="5:37"><decl pos:start="5:5" pos:end="5:36"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:13">count</name> <init pos:start="5:15" pos:end="5:36">= <expr pos:start="5:17" pos:end="5:36"><call pos:start="5:17" pos:end="5:36"><name pos:start="5:17" pos:end="5:32">ffio_read_varlen</name><argument_list pos:start="5:33" pos:end="5:36">(<argument pos:start="5:34" pos:end="5:35"><expr pos:start="5:34" pos:end="5:35"><name pos:start="5:34" pos:end="5:35">bc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:18">skip_start</name> <init pos:start="7:20" pos:end="7:22">= <expr pos:start="7:22" pos:end="7:22"><literal type="number" pos:start="7:22" pos:end="7:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:16">skip_end</name> <init pos:start="9:18" pos:end="9:20">= <expr pos:start="9:20" pos:end="9:20"><literal type="number" pos:start="9:20" pos:end="9:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">channels</name> <init pos:start="11:18" pos:end="11:20">= <expr pos:start="11:20" pos:end="11:20"><literal type="number" pos:start="11:20" pos:end="11:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:31"><decl pos:start="13:5" pos:end="13:30"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">int64_t</name></type> <name pos:start="13:13" pos:end="13:26">channel_layout</name> <init pos:start="13:28" pos:end="13:30">= <expr pos:start="13:30" pos:end="13:30"><literal type="number" pos:start="13:30" pos:end="13:30">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:24"><decl pos:start="15:5" pos:end="15:23"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:19">sample_rate</name> <init pos:start="15:21" pos:end="15:23">= <expr pos:start="15:23" pos:end="15:23"><literal type="number" pos:start="15:23" pos:end="15:23">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:18"><decl pos:start="17:5" pos:end="17:17"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:13">width</name> <init pos:start="17:15" pos:end="17:17">= <expr pos:start="17:17" pos:end="17:17"><literal type="number" pos:start="17:17" pos:end="17:17">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:19"><decl pos:start="19:5" pos:end="19:18"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:14">height</name> <init pos:start="19:16" pos:end="19:18">= <expr pos:start="19:18" pos:end="19:18"><literal type="number" pos:start="19:18" pos:end="19:18">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:15"><decl pos:start="21:5" pos:end="21:9"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:9">i</name></decl>, <decl pos:start="21:12" pos:end="21:14"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:12" pos:end="21:14">ret</name></decl>;</decl_stmt>



    <for pos:start="25:5" pos:end="159:5">for <control pos:start="25:9" pos:end="25:27">(<init pos:start="25:10" pos:end="25:13"><expr pos:start="25:10" pos:end="25:12"><name pos:start="25:10" pos:end="25:10">i</name><operator pos:start="25:11" pos:end="25:11">=</operator><literal type="number" pos:start="25:12" pos:end="25:12">0</literal></expr>;</init> <condition pos:start="25:15" pos:end="25:22"><expr pos:start="25:15" pos:end="25:21"><name pos:start="25:15" pos:end="25:15">i</name><operator pos:start="25:16" pos:end="25:16">&lt;</operator><name pos:start="25:17" pos:end="25:21">count</name></expr>;</condition> <incr pos:start="25:24" pos:end="25:26"><expr pos:start="25:24" pos:end="25:26"><name pos:start="25:24" pos:end="25:24">i</name><operator pos:start="25:25" pos:end="25:26">++</operator></expr></incr>)</control> <block pos:start="25:29" pos:end="159:5">{<block_content pos:start="27:9" pos:end="157:9">

        <decl_stmt pos:start="27:9" pos:end="27:57"><decl pos:start="27:9" pos:end="27:25"><type pos:start="27:9" pos:end="27:15"><name pos:start="27:9" pos:end="27:15">uint8_t</name></type> <name pos:start="27:17" pos:end="27:25"><name pos:start="27:17" pos:end="27:20">name</name><index pos:start="27:21" pos:end="27:25">[<expr pos:start="27:22" pos:end="27:24"><literal type="number" pos:start="27:22" pos:end="27:24">256</literal></expr>]</index></name></decl>, <decl pos:start="27:28" pos:end="27:41"><type ref="prev" pos:start="27:9" pos:end="27:15"/><name pos:start="27:28" pos:end="27:41"><name pos:start="27:28" pos:end="27:36">str_value</name><index pos:start="27:37" pos:end="27:41">[<expr pos:start="27:38" pos:end="27:40"><literal type="number" pos:start="27:38" pos:end="27:40">256</literal></expr>]</index></name></decl>, <decl pos:start="27:44" pos:end="27:56"><type ref="prev" pos:start="27:9" pos:end="27:15"/><name pos:start="27:44" pos:end="27:56"><name pos:start="27:44" pos:end="27:51">type_str</name><index pos:start="27:52" pos:end="27:56">[<expr pos:start="27:53" pos:end="27:55"><literal type="number" pos:start="27:53" pos:end="27:55">256</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="29:9" pos:end="29:18"><decl pos:start="29:9" pos:end="29:17"><type pos:start="29:9" pos:end="29:11"><name pos:start="29:9" pos:end="29:11">int</name></type> <name pos:start="29:13" pos:end="29:17">value</name></decl>;</decl_stmt>

        <if_stmt pos:start="31:9" pos:end="33:39"><if pos:start="31:9" pos:end="33:39">if <condition pos:start="31:12" pos:end="31:36">(<expr pos:start="31:13" pos:end="31:35"><call pos:start="31:13" pos:end="31:25"><name pos:start="31:13" pos:end="31:21">avio_tell</name><argument_list pos:start="31:22" pos:end="31:25">(<argument pos:start="31:23" pos:end="31:24"><expr pos:start="31:23" pos:end="31:24"><name pos:start="31:23" pos:end="31:24">bc</name></expr></argument>)</argument_list></call> <operator pos:start="31:27" pos:end="31:28">&gt;=</operator> <name pos:start="31:30" pos:end="31:35">maxpos</name></expr>)</condition><block type="pseudo" pos:start="33:13" pos:end="33:39"><block_content pos:start="33:13" pos:end="33:39">

            <return pos:start="33:13" pos:end="33:39">return <expr pos:start="33:20" pos:end="33:38"><name pos:start="33:20" pos:end="33:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:46"><expr pos:start="35:9" pos:end="35:45"><name pos:start="35:9" pos:end="35:11">ret</name> <operator pos:start="35:13" pos:end="35:13">=</operator> <call pos:start="35:15" pos:end="35:45"><name pos:start="35:15" pos:end="35:21">get_str</name><argument_list pos:start="35:22" pos:end="35:45">(<argument pos:start="35:23" pos:end="35:24"><expr pos:start="35:23" pos:end="35:24"><name pos:start="35:23" pos:end="35:24">bc</name></expr></argument>, <argument pos:start="35:27" pos:end="35:30"><expr pos:start="35:27" pos:end="35:30"><name pos:start="35:27" pos:end="35:30">name</name></expr></argument>, <argument pos:start="35:33" pos:end="35:44"><expr pos:start="35:33" pos:end="35:44"><sizeof pos:start="35:33" pos:end="35:44">sizeof<argument_list pos:start="35:39" pos:end="35:44">(<argument pos:start="35:40" pos:end="35:43"><expr pos:start="35:40" pos:end="35:43"><name pos:start="35:40" pos:end="35:43">name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="37:9" pos:end="43:9"><if pos:start="37:9" pos:end="43:9">if <condition pos:start="37:12" pos:end="37:20">(<expr pos:start="37:13" pos:end="37:19"><name pos:start="37:13" pos:end="37:15">ret</name> <operator pos:start="37:17" pos:end="37:17">&lt;</operator> <literal type="number" pos:start="37:19" pos:end="37:19">0</literal></expr>)</condition> <block pos:start="37:22" pos:end="43:9">{<block_content pos:start="39:13" pos:end="41:23">

            <expr_stmt pos:start="39:13" pos:end="39:78"><expr pos:start="39:13" pos:end="39:77"><call pos:start="39:13" pos:end="39:77"><name pos:start="39:13" pos:end="39:18">av_log</name><argument_list pos:start="39:19" pos:end="39:77">(<argument pos:start="39:20" pos:end="39:20"><expr pos:start="39:20" pos:end="39:20"><name pos:start="39:20" pos:end="39:20">s</name></expr></argument>, <argument pos:start="39:23" pos:end="39:34"><expr pos:start="39:23" pos:end="39:34"><name pos:start="39:23" pos:end="39:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="39:37" pos:end="39:76"><expr pos:start="39:37" pos:end="39:76"><literal type="string" pos:start="39:37" pos:end="39:76">"get_str failed while reading sm data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="41:13" pos:end="41:23">return <expr pos:start="41:20" pos:end="41:22"><name pos:start="41:20" pos:end="41:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:26"><expr pos:start="45:9" pos:end="45:25"><name pos:start="45:9" pos:end="45:13">value</name> <operator pos:start="45:15" pos:end="45:15">=</operator> <call pos:start="45:17" pos:end="45:25"><name pos:start="45:17" pos:end="45:21">get_s</name><argument_list pos:start="45:22" pos:end="45:25">(<argument pos:start="45:23" pos:end="45:24"><expr pos:start="45:23" pos:end="45:24"><name pos:start="45:23" pos:end="45:24">bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="49:9" pos:end="157:9"><if pos:start="49:9" pos:end="55:9">if <condition pos:start="49:12" pos:end="49:24">(<expr pos:start="49:13" pos:end="49:23"><name pos:start="49:13" pos:end="49:17">value</name> <operator pos:start="49:19" pos:end="49:20">==</operator> <operator pos:start="49:22" pos:end="49:22">-</operator><literal type="number" pos:start="49:23" pos:end="49:23">1</literal></expr>)</condition> <block pos:start="49:26" pos:end="55:9">{<block_content pos:start="51:13" pos:end="53:83">

            <expr_stmt pos:start="51:13" pos:end="51:54"><expr pos:start="51:13" pos:end="51:53"><call pos:start="51:13" pos:end="51:53"><name pos:start="51:13" pos:end="51:19">get_str</name><argument_list pos:start="51:20" pos:end="51:53">(<argument pos:start="51:21" pos:end="51:22"><expr pos:start="51:21" pos:end="51:22"><name pos:start="51:21" pos:end="51:22">bc</name></expr></argument>, <argument pos:start="51:25" pos:end="51:33"><expr pos:start="51:25" pos:end="51:33"><name pos:start="51:25" pos:end="51:33">str_value</name></expr></argument>, <argument pos:start="51:36" pos:end="51:52"><expr pos:start="51:36" pos:end="51:52"><sizeof pos:start="51:36" pos:end="51:52">sizeof<argument_list pos:start="51:42" pos:end="51:52">(<argument pos:start="51:43" pos:end="51:51"><expr pos:start="51:43" pos:end="51:51"><name pos:start="51:43" pos:end="51:51">str_value</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:83"><expr pos:start="53:13" pos:end="53:82"><call pos:start="53:13" pos:end="53:82"><name pos:start="53:13" pos:end="53:18">av_log</name><argument_list pos:start="53:19" pos:end="53:82">(<argument pos:start="53:20" pos:end="53:20"><expr pos:start="53:20" pos:end="53:20"><name pos:start="53:20" pos:end="53:20">s</name></expr></argument>, <argument pos:start="53:23" pos:end="53:36"><expr pos:start="53:23" pos:end="53:36"><name pos:start="53:23" pos:end="53:36">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="53:39" pos:end="53:64"><expr pos:start="53:39" pos:end="53:64"><literal type="string" pos:start="53:39" pos:end="53:64">"Unknown string %s / %s\n"</literal></expr></argument>, <argument pos:start="53:67" pos:end="53:70"><expr pos:start="53:67" pos:end="53:70"><name pos:start="53:67" pos:end="53:70">name</name></expr></argument>, <argument pos:start="53:73" pos:end="53:81"><expr pos:start="53:73" pos:end="53:81"><name pos:start="53:73" pos:end="53:81">str_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="55:11" pos:end="113:9">else if <condition pos:start="55:19" pos:end="55:31">(<expr pos:start="55:20" pos:end="55:30"><name pos:start="55:20" pos:end="55:24">value</name> <operator pos:start="55:26" pos:end="55:27">==</operator> <operator pos:start="55:29" pos:end="55:29">-</operator><literal type="number" pos:start="55:30" pos:end="55:30">2</literal></expr>)</condition> <block pos:start="55:33" pos:end="113:9">{<block_content pos:start="57:13" pos:end="111:42">

            <decl_stmt pos:start="57:13" pos:end="57:32"><decl pos:start="57:13" pos:end="57:31"><type pos:start="57:13" pos:end="57:21"><name pos:start="57:13" pos:end="57:19">uint8_t</name> <modifier pos:start="57:21" pos:end="57:21">*</modifier></type><name pos:start="57:22" pos:end="57:24">dst</name> <init pos:start="57:26" pos:end="57:31">= <expr pos:start="57:28" pos:end="57:31"><name pos:start="57:28" pos:end="57:31">NULL</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="59:13" pos:end="59:35"><decl pos:start="59:13" pos:end="59:23"><type pos:start="59:13" pos:end="59:19"><name pos:start="59:13" pos:end="59:19">int64_t</name></type> <name pos:start="59:21" pos:end="59:23">v64</name></decl>, <decl pos:start="59:26" pos:end="59:34"><type ref="prev" pos:start="59:13" pos:end="59:19"/><name pos:start="59:26" pos:end="59:34">value_len</name></decl>;</decl_stmt>



            <expr_stmt pos:start="63:13" pos:end="63:52"><expr pos:start="63:13" pos:end="63:51"><call pos:start="63:13" pos:end="63:51"><name pos:start="63:13" pos:end="63:19">get_str</name><argument_list pos:start="63:20" pos:end="63:51">(<argument pos:start="63:21" pos:end="63:22"><expr pos:start="63:21" pos:end="63:22"><name pos:start="63:21" pos:end="63:22">bc</name></expr></argument>, <argument pos:start="63:25" pos:end="63:32"><expr pos:start="63:25" pos:end="63:32"><name pos:start="63:25" pos:end="63:32">type_str</name></expr></argument>, <argument pos:start="63:35" pos:end="63:50"><expr pos:start="63:35" pos:end="63:50"><sizeof pos:start="63:35" pos:end="63:50">sizeof<argument_list pos:start="63:41" pos:end="63:50">(<argument pos:start="63:42" pos:end="63:49"><expr pos:start="63:42" pos:end="63:49"><name pos:start="63:42" pos:end="63:49">type_str</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:45"><expr pos:start="65:13" pos:end="65:44"><name pos:start="65:13" pos:end="65:21">value_len</name> <operator pos:start="65:23" pos:end="65:23">=</operator> <call pos:start="65:25" pos:end="65:44"><name pos:start="65:25" pos:end="65:40">ffio_read_varlen</name><argument_list pos:start="65:41" pos:end="65:44">(<argument pos:start="65:42" pos:end="65:43"><expr pos:start="65:42" pos:end="65:43"><name pos:start="65:42" pos:end="65:43">bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="67:13" pos:end="69:43"><if pos:start="67:13" pos:end="69:43">if <condition pos:start="67:16" pos:end="67:52">(<expr pos:start="67:17" pos:end="67:51"><call pos:start="67:17" pos:end="67:29"><name pos:start="67:17" pos:end="67:25">avio_tell</name><argument_list pos:start="67:26" pos:end="67:29">(<argument pos:start="67:27" pos:end="67:28"><expr pos:start="67:27" pos:end="67:28"><name pos:start="67:27" pos:end="67:28">bc</name></expr></argument>)</argument_list></call> <operator pos:start="67:31" pos:end="67:31">+</operator> <name pos:start="67:33" pos:end="67:41">value_len</name> <operator pos:start="67:43" pos:end="67:44">&gt;=</operator> <name pos:start="67:46" pos:end="67:51">maxpos</name></expr>)</condition><block type="pseudo" pos:start="69:17" pos:end="69:43"><block_content pos:start="69:17" pos:end="69:43">

                <return pos:start="69:17" pos:end="69:43">return <expr pos:start="69:24" pos:end="69:42"><name pos:start="69:24" pos:end="69:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt pos:start="71:13" pos:end="105:13"><if pos:start="71:13" pos:end="75:13">if <condition pos:start="71:16" pos:end="71:41">(<expr pos:start="71:17" pos:end="71:40"><operator pos:start="71:17" pos:end="71:17">!</operator><call pos:start="71:18" pos:end="71:40"><name pos:start="71:18" pos:end="71:23">strcmp</name><argument_list pos:start="71:24" pos:end="71:40">(<argument pos:start="71:25" pos:end="71:28"><expr pos:start="71:25" pos:end="71:28"><name pos:start="71:25" pos:end="71:28">name</name></expr></argument>, <argument pos:start="71:31" pos:end="71:39"><expr pos:start="71:31" pos:end="71:39"><literal type="string" pos:start="71:31" pos:end="71:39">"Palette"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="71:43" pos:end="75:13">{<block_content pos:start="73:17" pos:end="73:83">

                <expr_stmt pos:start="73:17" pos:end="73:83"><expr pos:start="73:17" pos:end="73:82"><name pos:start="73:17" pos:end="73:19">dst</name> <operator pos:start="73:21" pos:end="73:21">=</operator> <call pos:start="73:23" pos:end="73:82"><name pos:start="73:23" pos:end="73:45">av_packet_new_side_data</name><argument_list pos:start="73:46" pos:end="73:82">(<argument pos:start="73:47" pos:end="73:49"><expr pos:start="73:47" pos:end="73:49"><name pos:start="73:47" pos:end="73:49">pkt</name></expr></argument>, <argument pos:start="73:52" pos:end="73:70"><expr pos:start="73:52" pos:end="73:70"><name pos:start="73:52" pos:end="73:70">AV_PKT_DATA_PALETTE</name></expr></argument>, <argument pos:start="73:73" pos:end="73:81"><expr pos:start="73:73" pos:end="73:81"><name pos:start="73:73" pos:end="73:81">value_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="75:15" pos:end="79:13">else if <condition pos:start="75:23" pos:end="75:50">(<expr pos:start="75:24" pos:end="75:49"><operator pos:start="75:24" pos:end="75:24">!</operator><call pos:start="75:25" pos:end="75:49"><name pos:start="75:25" pos:end="75:30">strcmp</name><argument_list pos:start="75:31" pos:end="75:49">(<argument pos:start="75:32" pos:end="75:35"><expr pos:start="75:32" pos:end="75:35"><name pos:start="75:32" pos:end="75:35">name</name></expr></argument>, <argument pos:start="75:38" pos:end="75:48"><expr pos:start="75:38" pos:end="75:48"><literal type="string" pos:start="75:38" pos:end="75:48">"Extradata"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="75:52" pos:end="79:13">{<block_content pos:start="77:17" pos:end="77:89">

                <expr_stmt pos:start="77:17" pos:end="77:89"><expr pos:start="77:17" pos:end="77:88"><name pos:start="77:17" pos:end="77:19">dst</name> <operator pos:start="77:21" pos:end="77:21">=</operator> <call pos:start="77:23" pos:end="77:88"><name pos:start="77:23" pos:end="77:45">av_packet_new_side_data</name><argument_list pos:start="77:46" pos:end="77:88">(<argument pos:start="77:47" pos:end="77:49"><expr pos:start="77:47" pos:end="77:49"><name pos:start="77:47" pos:end="77:49">pkt</name></expr></argument>, <argument pos:start="77:52" pos:end="77:76"><expr pos:start="77:52" pos:end="77:76"><name pos:start="77:52" pos:end="77:76">AV_PKT_DATA_NEW_EXTRADATA</name></expr></argument>, <argument pos:start="77:79" pos:end="77:87"><expr pos:start="77:79" pos:end="77:87"><name pos:start="77:79" pos:end="77:87">value_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="79:15" pos:end="91:13">else if <condition pos:start="79:23" pos:end="79:77">(<expr pos:start="79:24" pos:end="79:76"><call pos:start="79:24" pos:end="79:71"><name pos:start="79:24" pos:end="79:29">sscanf</name><argument_list pos:start="79:30" pos:end="79:71">(<argument pos:start="79:31" pos:end="79:34"><expr pos:start="79:31" pos:end="79:34"><name pos:start="79:31" pos:end="79:34">name</name></expr></argument>, <argument pos:start="79:37" pos:end="79:64"><expr pos:start="79:37" pos:end="79:64"><literal type="string" pos:start="79:37" pos:end="79:56">"CodecSpecificSide%"</literal><name pos:start="79:57" pos:end="79:62">SCNd64</name><literal type="string" pos:start="79:63" pos:end="79:64">""</literal></expr></argument>, <argument pos:start="79:67" pos:end="79:70"><expr pos:start="79:67" pos:end="79:70"><operator pos:start="79:67" pos:end="79:67">&amp;</operator><name pos:start="79:68" pos:end="79:70">v64</name></expr></argument>)</argument_list></call> <operator pos:start="79:73" pos:end="79:74">==</operator> <literal type="number" pos:start="79:76" pos:end="79:76">1</literal></expr>)</condition> <block pos:start="79:79" pos:end="91:13">{<block_content pos:start="81:17" pos:end="89:25">

                <expr_stmt pos:start="81:17" pos:end="81:104"><expr pos:start="81:17" pos:end="81:103"><name pos:start="81:17" pos:end="81:19">dst</name> <operator pos:start="81:21" pos:end="81:21">=</operator> <call pos:start="81:23" pos:end="81:103"><name pos:start="81:23" pos:end="81:45">av_packet_new_side_data</name><argument_list pos:start="81:46" pos:end="81:103">(<argument pos:start="81:47" pos:end="81:49"><expr pos:start="81:47" pos:end="81:49"><name pos:start="81:47" pos:end="81:49">pkt</name></expr></argument>, <argument pos:start="81:52" pos:end="81:87"><expr pos:start="81:52" pos:end="81:87"><name pos:start="81:52" pos:end="81:87">AV_PKT_DATA_MATROSKA_BLOCKADDITIONAL</name></expr></argument>, <argument pos:start="81:90" pos:end="81:102"><expr pos:start="81:90" pos:end="81:102"><name pos:start="81:90" pos:end="81:98">value_len</name> <operator pos:start="81:100" pos:end="81:100">+</operator> <literal type="number" pos:start="81:102" pos:end="81:102">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="83:17" pos:end="85:43"><if pos:start="83:17" pos:end="85:43">if<condition pos:start="83:19" pos:end="83:24">(<expr pos:start="83:20" pos:end="83:23"><operator pos:start="83:20" pos:end="83:20">!</operator><name pos:start="83:21" pos:end="83:23">dst</name></expr>)</condition><block type="pseudo" pos:start="85:21" pos:end="85:43"><block_content pos:start="85:21" pos:end="85:43">

                    <return pos:start="85:21" pos:end="85:43">return <expr pos:start="85:28" pos:end="85:42"><call pos:start="85:28" pos:end="85:42"><name pos:start="85:28" pos:end="85:34">AVERROR</name><argument_list pos:start="85:35" pos:end="85:42">(<argument pos:start="85:36" pos:end="85:41"><expr pos:start="85:36" pos:end="85:41"><name pos:start="85:36" pos:end="85:41">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

                <expr_stmt pos:start="87:17" pos:end="87:34"><expr pos:start="87:17" pos:end="87:33"><call pos:start="87:17" pos:end="87:33"><name pos:start="87:17" pos:end="87:23">AV_WB64</name><argument_list pos:start="87:24" pos:end="87:33">(<argument pos:start="87:25" pos:end="87:27"><expr pos:start="87:25" pos:end="87:27"><name pos:start="87:25" pos:end="87:27">dst</name></expr></argument>, <argument pos:start="87:30" pos:end="87:32"><expr pos:start="87:30" pos:end="87:32"><name pos:start="87:30" pos:end="87:32">v64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="89:17" pos:end="89:25"><expr pos:start="89:17" pos:end="89:24"><name pos:start="89:17" pos:end="89:19">dst</name> <operator pos:start="89:21" pos:end="89:22">+=</operator> <literal type="number" pos:start="89:24" pos:end="89:24">8</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="91:15" pos:end="97:13">else if <condition pos:start="91:23" pos:end="91:72">(<expr pos:start="91:24" pos:end="91:71"><operator pos:start="91:24" pos:end="91:24">!</operator><call pos:start="91:25" pos:end="91:53"><name pos:start="91:25" pos:end="91:30">strcmp</name><argument_list pos:start="91:31" pos:end="91:53">(<argument pos:start="91:32" pos:end="91:35"><expr pos:start="91:32" pos:end="91:35"><name pos:start="91:32" pos:end="91:35">name</name></expr></argument>, <argument pos:start="91:38" pos:end="91:52"><expr pos:start="91:38" pos:end="91:52"><literal type="string" pos:start="91:38" pos:end="91:52">"ChannelLayout"</literal></expr></argument>)</argument_list></call> <operator pos:start="91:55" pos:end="91:56">&amp;&amp;</operator> <name pos:start="91:58" pos:end="91:66">value_len</name> <operator pos:start="91:68" pos:end="91:69">==</operator> <literal type="number" pos:start="91:71" pos:end="91:71">8</literal></expr>)</condition> <block pos:start="91:74" pos:end="97:13">{<block_content pos:start="93:17" pos:end="95:25">

                <expr_stmt pos:start="93:17" pos:end="93:47"><expr pos:start="93:17" pos:end="93:46"><name pos:start="93:17" pos:end="93:30">channel_layout</name> <operator pos:start="93:32" pos:end="93:32">=</operator> <call pos:start="93:34" pos:end="93:46"><name pos:start="93:34" pos:end="93:42">avio_rl64</name><argument_list pos:start="93:43" pos:end="93:46">(<argument pos:start="93:44" pos:end="93:45"><expr pos:start="93:44" pos:end="93:45"><name pos:start="93:44" pos:end="93:45">bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <continue pos:start="95:17" pos:end="95:25">continue;</continue>

            </block_content>}</block></if> <else pos:start="97:15" pos:end="105:13">else <block pos:start="97:20" pos:end="105:13">{<block_content pos:start="99:17" pos:end="103:25">

                <expr_stmt pos:start="99:17" pos:end="99:84"><expr pos:start="99:17" pos:end="99:83"><call pos:start="99:17" pos:end="99:83"><name pos:start="99:17" pos:end="99:22">av_log</name><argument_list pos:start="99:23" pos:end="99:83">(<argument pos:start="99:24" pos:end="99:24"><expr pos:start="99:24" pos:end="99:24"><name pos:start="99:24" pos:end="99:24">s</name></expr></argument>, <argument pos:start="99:27" pos:end="99:40"><expr pos:start="99:27" pos:end="99:40"><name pos:start="99:27" pos:end="99:40">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="99:43" pos:end="99:66"><expr pos:start="99:43" pos:end="99:66"><literal type="string" pos:start="99:43" pos:end="99:66">"Unknown data %s / %s\n"</literal></expr></argument>, <argument pos:start="99:69" pos:end="99:72"><expr pos:start="99:69" pos:end="99:72"><name pos:start="99:69" pos:end="99:72">name</name></expr></argument>, <argument pos:start="99:75" pos:end="99:82"><expr pos:start="99:75" pos:end="99:82"><name pos:start="99:75" pos:end="99:82">type_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="101:17" pos:end="101:41"><expr pos:start="101:17" pos:end="101:40"><call pos:start="101:17" pos:end="101:40"><name pos:start="101:17" pos:end="101:25">avio_skip</name><argument_list pos:start="101:26" pos:end="101:40">(<argument pos:start="101:27" pos:end="101:28"><expr pos:start="101:27" pos:end="101:28"><name pos:start="101:27" pos:end="101:28">bc</name></expr></argument>, <argument pos:start="101:31" pos:end="101:39"><expr pos:start="101:31" pos:end="101:39"><name pos:start="101:31" pos:end="101:39">value_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <continue pos:start="103:17" pos:end="103:25">continue;</continue>

            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="107:13" pos:end="109:39"><if pos:start="107:13" pos:end="109:39">if<condition pos:start="107:15" pos:end="107:20">(<expr pos:start="107:16" pos:end="107:19"><operator pos:start="107:16" pos:end="107:16">!</operator><name pos:start="107:17" pos:end="107:19">dst</name></expr>)</condition><block type="pseudo" pos:start="109:17" pos:end="109:39"><block_content pos:start="109:17" pos:end="109:39">

                <return pos:start="109:17" pos:end="109:39">return <expr pos:start="109:24" pos:end="109:38"><call pos:start="109:24" pos:end="109:38"><name pos:start="109:24" pos:end="109:30">AVERROR</name><argument_list pos:start="109:31" pos:end="109:38">(<argument pos:start="109:32" pos:end="109:37"><expr pos:start="109:32" pos:end="109:37"><name pos:start="109:32" pos:end="109:37">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:42"><expr pos:start="111:13" pos:end="111:41"><call pos:start="111:13" pos:end="111:41"><name pos:start="111:13" pos:end="111:21">avio_read</name><argument_list pos:start="111:22" pos:end="111:41">(<argument pos:start="111:23" pos:end="111:24"><expr pos:start="111:23" pos:end="111:24"><name pos:start="111:23" pos:end="111:24">bc</name></expr></argument>, <argument pos:start="111:27" pos:end="111:29"><expr pos:start="111:27" pos:end="111:29"><name pos:start="111:27" pos:end="111:29">dst</name></expr></argument>, <argument pos:start="111:32" pos:end="111:40"><expr pos:start="111:32" pos:end="111:40"><name pos:start="111:32" pos:end="111:40">value_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="113:11" pos:end="117:9">else if <condition pos:start="113:19" pos:end="113:31">(<expr pos:start="113:20" pos:end="113:30"><name pos:start="113:20" pos:end="113:24">value</name> <operator pos:start="113:26" pos:end="113:27">==</operator> <operator pos:start="113:29" pos:end="113:29">-</operator><literal type="number" pos:start="113:30" pos:end="113:30">3</literal></expr>)</condition> <block pos:start="113:33" pos:end="117:9">{<block_content pos:start="115:13" pos:end="115:30">

            <expr_stmt pos:start="115:13" pos:end="115:30"><expr pos:start="115:13" pos:end="115:29"><name pos:start="115:13" pos:end="115:17">value</name> <operator pos:start="115:19" pos:end="115:19">=</operator> <call pos:start="115:21" pos:end="115:29"><name pos:start="115:21" pos:end="115:25">get_s</name><argument_list pos:start="115:26" pos:end="115:29">(<argument pos:start="115:27" pos:end="115:28"><expr pos:start="115:27" pos:end="115:28"><name pos:start="115:27" pos:end="115:28">bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="117:11" pos:end="121:9">else if <condition pos:start="117:19" pos:end="117:31">(<expr pos:start="117:20" pos:end="117:30"><name pos:start="117:20" pos:end="117:24">value</name> <operator pos:start="117:26" pos:end="117:27">==</operator> <operator pos:start="117:29" pos:end="117:29">-</operator><literal type="number" pos:start="117:30" pos:end="117:30">4</literal></expr>)</condition> <block pos:start="117:33" pos:end="121:9">{<block_content pos:start="119:13" pos:end="119:41">

            <expr_stmt pos:start="119:13" pos:end="119:41"><expr pos:start="119:13" pos:end="119:40"><name pos:start="119:13" pos:end="119:17">value</name> <operator pos:start="119:19" pos:end="119:19">=</operator> <call pos:start="119:21" pos:end="119:40"><name pos:start="119:21" pos:end="119:36">ffio_read_varlen</name><argument_list pos:start="119:37" pos:end="119:40">(<argument pos:start="119:38" pos:end="119:39"><expr pos:start="119:38" pos:end="119:39"><name pos:start="119:38" pos:end="119:39">bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="121:11" pos:end="125:9">else if <condition pos:start="121:19" pos:end="121:30">(<expr pos:start="121:20" pos:end="121:29"><name pos:start="121:20" pos:end="121:24">value</name> <operator pos:start="121:26" pos:end="121:26">&lt;</operator> <operator pos:start="121:28" pos:end="121:28">-</operator><literal type="number" pos:start="121:29" pos:end="121:29">4</literal></expr>)</condition> <block pos:start="121:32" pos:end="125:9">{<block_content pos:start="123:13" pos:end="123:22">

            <expr_stmt pos:start="123:13" pos:end="123:22"><expr pos:start="123:13" pos:end="123:21"><call pos:start="123:13" pos:end="123:21"><name pos:start="123:13" pos:end="123:17">get_s</name><argument_list pos:start="123:18" pos:end="123:21">(<argument pos:start="123:19" pos:end="123:20"><expr pos:start="123:19" pos:end="123:20"><name pos:start="123:19" pos:end="123:20">bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="125:11" pos:end="157:9">else <block pos:start="125:16" pos:end="157:9">{<block_content pos:start="127:13" pos:end="155:13">

            <if_stmt pos:start="127:13" pos:end="155:13"><if pos:start="127:13" pos:end="131:13">if <condition pos:start="127:16" pos:end="127:43">(<expr pos:start="127:17" pos:end="127:42"><operator pos:start="127:17" pos:end="127:17">!</operator><call pos:start="127:18" pos:end="127:42"><name pos:start="127:18" pos:end="127:23">strcmp</name><argument_list pos:start="127:24" pos:end="127:42">(<argument pos:start="127:25" pos:end="127:28"><expr pos:start="127:25" pos:end="127:28"><name pos:start="127:25" pos:end="127:28">name</name></expr></argument>, <argument pos:start="127:31" pos:end="127:41"><expr pos:start="127:31" pos:end="127:41"><literal type="string" pos:start="127:31" pos:end="127:41">"SkipStart"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="127:45" pos:end="131:13">{<block_content pos:start="129:17" pos:end="129:35">

                <expr_stmt pos:start="129:17" pos:end="129:35"><expr pos:start="129:17" pos:end="129:34"><name pos:start="129:17" pos:end="129:26">skip_start</name> <operator pos:start="129:28" pos:end="129:28">=</operator> <name pos:start="129:30" pos:end="129:34">value</name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="131:15" pos:end="135:13">else if <condition pos:start="131:23" pos:end="131:48">(<expr pos:start="131:24" pos:end="131:47"><operator pos:start="131:24" pos:end="131:24">!</operator><call pos:start="131:25" pos:end="131:47"><name pos:start="131:25" pos:end="131:30">strcmp</name><argument_list pos:start="131:31" pos:end="131:47">(<argument pos:start="131:32" pos:end="131:35"><expr pos:start="131:32" pos:end="131:35"><name pos:start="131:32" pos:end="131:35">name</name></expr></argument>, <argument pos:start="131:38" pos:end="131:46"><expr pos:start="131:38" pos:end="131:46"><literal type="string" pos:start="131:38" pos:end="131:46">"SkipEnd"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="131:50" pos:end="135:13">{<block_content pos:start="133:17" pos:end="133:33">

                <expr_stmt pos:start="133:17" pos:end="133:33"><expr pos:start="133:17" pos:end="133:32"><name pos:start="133:17" pos:end="133:24">skip_end</name> <operator pos:start="133:26" pos:end="133:26">=</operator> <name pos:start="133:28" pos:end="133:32">value</name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="135:15" pos:end="139:13">else if <condition pos:start="135:23" pos:end="135:49">(<expr pos:start="135:24" pos:end="135:48"><operator pos:start="135:24" pos:end="135:24">!</operator><call pos:start="135:25" pos:end="135:48"><name pos:start="135:25" pos:end="135:30">strcmp</name><argument_list pos:start="135:31" pos:end="135:48">(<argument pos:start="135:32" pos:end="135:35"><expr pos:start="135:32" pos:end="135:35"><name pos:start="135:32" pos:end="135:35">name</name></expr></argument>, <argument pos:start="135:38" pos:end="135:47"><expr pos:start="135:38" pos:end="135:47"><literal type="string" pos:start="135:38" pos:end="135:47">"Channels"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="135:51" pos:end="139:13">{<block_content pos:start="137:17" pos:end="137:33">

                <expr_stmt pos:start="137:17" pos:end="137:33"><expr pos:start="137:17" pos:end="137:32"><name pos:start="137:17" pos:end="137:24">channels</name> <operator pos:start="137:26" pos:end="137:26">=</operator> <name pos:start="137:28" pos:end="137:32">value</name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="139:15" pos:end="143:13">else if <condition pos:start="139:23" pos:end="139:51">(<expr pos:start="139:24" pos:end="139:50"><operator pos:start="139:24" pos:end="139:24">!</operator><call pos:start="139:25" pos:end="139:50"><name pos:start="139:25" pos:end="139:30">strcmp</name><argument_list pos:start="139:31" pos:end="139:50">(<argument pos:start="139:32" pos:end="139:35"><expr pos:start="139:32" pos:end="139:35"><name pos:start="139:32" pos:end="139:35">name</name></expr></argument>, <argument pos:start="139:38" pos:end="139:49"><expr pos:start="139:38" pos:end="139:49"><literal type="string" pos:start="139:38" pos:end="139:49">"SampleRate"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="139:53" pos:end="143:13">{<block_content pos:start="141:17" pos:end="141:36">

                <expr_stmt pos:start="141:17" pos:end="141:36"><expr pos:start="141:17" pos:end="141:35"><name pos:start="141:17" pos:end="141:27">sample_rate</name> <operator pos:start="141:29" pos:end="141:29">=</operator> <name pos:start="141:31" pos:end="141:35">value</name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="143:15" pos:end="147:13">else if <condition pos:start="143:23" pos:end="143:46">(<expr pos:start="143:24" pos:end="143:45"><operator pos:start="143:24" pos:end="143:24">!</operator><call pos:start="143:25" pos:end="143:45"><name pos:start="143:25" pos:end="143:30">strcmp</name><argument_list pos:start="143:31" pos:end="143:45">(<argument pos:start="143:32" pos:end="143:35"><expr pos:start="143:32" pos:end="143:35"><name pos:start="143:32" pos:end="143:35">name</name></expr></argument>, <argument pos:start="143:38" pos:end="143:44"><expr pos:start="143:38" pos:end="143:44"><literal type="string" pos:start="143:38" pos:end="143:44">"Width"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="143:48" pos:end="147:13">{<block_content pos:start="145:17" pos:end="145:30">

                <expr_stmt pos:start="145:17" pos:end="145:30"><expr pos:start="145:17" pos:end="145:29"><name pos:start="145:17" pos:end="145:21">width</name> <operator pos:start="145:23" pos:end="145:23">=</operator> <name pos:start="145:25" pos:end="145:29">value</name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="147:15" pos:end="151:13">else if <condition pos:start="147:23" pos:end="147:47">(<expr pos:start="147:24" pos:end="147:46"><operator pos:start="147:24" pos:end="147:24">!</operator><call pos:start="147:25" pos:end="147:46"><name pos:start="147:25" pos:end="147:30">strcmp</name><argument_list pos:start="147:31" pos:end="147:46">(<argument pos:start="147:32" pos:end="147:35"><expr pos:start="147:32" pos:end="147:35"><name pos:start="147:32" pos:end="147:35">name</name></expr></argument>, <argument pos:start="147:38" pos:end="147:45"><expr pos:start="147:38" pos:end="147:45"><literal type="string" pos:start="147:38" pos:end="147:45">"Height"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="147:49" pos:end="151:13">{<block_content pos:start="149:17" pos:end="149:31">

                <expr_stmt pos:start="149:17" pos:end="149:31"><expr pos:start="149:17" pos:end="149:30"><name pos:start="149:17" pos:end="149:22">height</name> <operator pos:start="149:24" pos:end="149:24">=</operator> <name pos:start="149:26" pos:end="149:30">value</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="151:15" pos:end="155:13">else <block pos:start="151:20" pos:end="155:13">{<block_content pos:start="153:17" pos:end="153:72">

                <expr_stmt pos:start="153:17" pos:end="153:72"><expr pos:start="153:17" pos:end="153:71"><call pos:start="153:17" pos:end="153:71"><name pos:start="153:17" pos:end="153:22">av_log</name><argument_list pos:start="153:23" pos:end="153:71">(<argument pos:start="153:24" pos:end="153:24"><expr pos:start="153:24" pos:end="153:24"><name pos:start="153:24" pos:end="153:24">s</name></expr></argument>, <argument pos:start="153:27" pos:end="153:40"><expr pos:start="153:27" pos:end="153:40"><name pos:start="153:27" pos:end="153:40">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="153:43" pos:end="153:64"><expr pos:start="153:43" pos:end="153:64"><literal type="string" pos:start="153:43" pos:end="153:64">"Unknown integer %s\n"</literal></expr></argument>, <argument pos:start="153:67" pos:end="153:70"><expr pos:start="153:67" pos:end="153:70"><name pos:start="153:67" pos:end="153:70">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="163:5" pos:end="203:5"><if pos:start="163:5" pos:end="203:5">if <condition pos:start="163:8" pos:end="163:69">(<expr pos:start="163:9" pos:end="163:68"><name pos:start="163:9" pos:end="163:16">channels</name> <operator pos:start="163:18" pos:end="163:19">||</operator> <name pos:start="163:21" pos:end="163:34">channel_layout</name> <operator pos:start="163:36" pos:end="163:37">||</operator> <name pos:start="163:39" pos:end="163:49">sample_rate</name> <operator pos:start="163:51" pos:end="163:52">||</operator> <name pos:start="163:54" pos:end="163:58">width</name> <operator pos:start="163:60" pos:end="163:61">||</operator> <name pos:start="163:63" pos:end="163:68">height</name></expr>)</condition> <block pos:start="163:71" pos:end="203:5">{<block_content pos:start="165:9" pos:end="201:9">

        <decl_stmt pos:start="165:9" pos:end="165:82"><decl pos:start="165:9" pos:end="165:81"><type pos:start="165:9" pos:end="165:17"><name pos:start="165:9" pos:end="165:15">uint8_t</name> <modifier pos:start="165:17" pos:end="165:17">*</modifier></type><name pos:start="165:18" pos:end="165:20">dst</name> <init pos:start="165:22" pos:end="165:81">= <expr pos:start="165:24" pos:end="165:81"><call pos:start="165:24" pos:end="165:81"><name pos:start="165:24" pos:end="165:46">av_packet_new_side_data</name><argument_list pos:start="165:47" pos:end="165:81">(<argument pos:start="165:48" pos:end="165:50"><expr pos:start="165:48" pos:end="165:50"><name pos:start="165:48" pos:end="165:50">pkt</name></expr></argument>, <argument pos:start="165:53" pos:end="165:76"><expr pos:start="165:53" pos:end="165:76"><name pos:start="165:53" pos:end="165:76">AV_PKT_DATA_PARAM_CHANGE</name></expr></argument>, <argument pos:start="165:79" pos:end="165:80"><expr pos:start="165:79" pos:end="165:80"><literal type="number" pos:start="165:79" pos:end="165:80">28</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="167:9" pos:end="169:35"><if pos:start="167:9" pos:end="169:35">if <condition pos:start="167:12" pos:end="167:17">(<expr pos:start="167:13" pos:end="167:16"><operator pos:start="167:13" pos:end="167:13">!</operator><name pos:start="167:14" pos:end="167:16">dst</name></expr>)</condition><block type="pseudo" pos:start="169:13" pos:end="169:35"><block_content pos:start="169:13" pos:end="169:35">

            <return pos:start="169:13" pos:end="169:35">return <expr pos:start="169:20" pos:end="169:34"><call pos:start="169:20" pos:end="169:34"><name pos:start="169:20" pos:end="169:26">AVERROR</name><argument_list pos:start="169:27" pos:end="169:34">(<argument pos:start="169:28" pos:end="169:33"><expr pos:start="169:28" pos:end="169:33"><name pos:start="169:28" pos:end="169:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="171:9" pos:end="181:29"><expr pos:start="171:9" pos:end="181:28"><call pos:start="171:9" pos:end="181:28"><name pos:start="171:9" pos:end="171:27">bytestream_put_le32</name><argument_list pos:start="171:28" pos:end="181:28">(<argument pos:start="171:29" pos:end="171:32"><expr pos:start="171:29" pos:end="171:32"><operator pos:start="171:29" pos:end="171:29">&amp;</operator><name pos:start="171:30" pos:end="171:32">dst</name></expr></argument>,

                            <argument pos:start="173:29" pos:end="179:83"><expr pos:start="173:29" pos:end="179:83"><name pos:start="173:29" pos:end="173:67">AV_SIDE_DATA_PARAM_CHANGE_CHANNEL_COUNT</name><operator pos:start="173:68" pos:end="173:68">*</operator><operator pos:start="173:69" pos:end="173:69">(</operator><operator pos:start="173:70" pos:end="173:70">!</operator><operator pos:start="173:71" pos:end="173:71">!</operator><name pos:start="173:72" pos:end="173:79">channels</name><operator pos:start="173:80" pos:end="173:80">)</operator> <operator pos:start="173:82" pos:end="173:82">+</operator>

                            <name pos:start="175:29" pos:end="175:68">AV_SIDE_DATA_PARAM_CHANGE_CHANNEL_LAYOUT</name><operator pos:start="175:69" pos:end="175:69">*</operator><operator pos:start="175:70" pos:end="175:70">(</operator><operator pos:start="175:71" pos:end="175:71">!</operator><operator pos:start="175:72" pos:end="175:72">!</operator><name pos:start="175:73" pos:end="175:86">channel_layout</name><operator pos:start="175:87" pos:end="175:87">)</operator> <operator pos:start="175:89" pos:end="175:89">+</operator>

                            <name pos:start="177:29" pos:end="177:65">AV_SIDE_DATA_PARAM_CHANGE_SAMPLE_RATE</name><operator pos:start="177:66" pos:end="177:66">*</operator><operator pos:start="177:67" pos:end="177:67">(</operator><operator pos:start="177:68" pos:end="177:68">!</operator><operator pos:start="177:69" pos:end="177:69">!</operator><name pos:start="177:70" pos:end="177:80">sample_rate</name><operator pos:start="177:81" pos:end="177:81">)</operator> <operator pos:start="177:83" pos:end="177:83">+</operator>

                            <name pos:start="179:29" pos:end="179:64">AV_SIDE_DATA_PARAM_CHANGE_DIMENSIONS</name><operator pos:start="179:65" pos:end="179:65">*</operator><operator pos:start="179:66" pos:end="179:66">(</operator><operator pos:start="179:67" pos:end="179:67">!</operator><operator pos:start="179:68" pos:end="179:68">!</operator><operator pos:start="179:69" pos:end="179:69">(</operator><name pos:start="179:70" pos:end="179:74">width</name><operator pos:start="179:75" pos:end="179:75">|</operator><name pos:start="179:76" pos:end="179:81">height</name><operator pos:start="179:82" pos:end="179:82">)</operator><operator pos:start="179:83" pos:end="179:83">)</operator></expr></argument>

                           )</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="183:9" pos:end="185:48"><if pos:start="183:9" pos:end="185:48">if <condition pos:start="183:12" pos:end="183:21">(<expr pos:start="183:13" pos:end="183:20"><name pos:start="183:13" pos:end="183:20">channels</name></expr>)</condition><block type="pseudo" pos:start="185:13" pos:end="185:48"><block_content pos:start="185:13" pos:end="185:48">

            <expr_stmt pos:start="185:13" pos:end="185:48"><expr pos:start="185:13" pos:end="185:47"><call pos:start="185:13" pos:end="185:47"><name pos:start="185:13" pos:end="185:31">bytestream_put_le32</name><argument_list pos:start="185:32" pos:end="185:47">(<argument pos:start="185:33" pos:end="185:36"><expr pos:start="185:33" pos:end="185:36"><operator pos:start="185:33" pos:end="185:33">&amp;</operator><name pos:start="185:34" pos:end="185:36">dst</name></expr></argument>, <argument pos:start="185:39" pos:end="185:46"><expr pos:start="185:39" pos:end="185:46"><name pos:start="185:39" pos:end="185:46">channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="187:9" pos:end="189:54"><if pos:start="187:9" pos:end="189:54">if <condition pos:start="187:12" pos:end="187:27">(<expr pos:start="187:13" pos:end="187:26"><name pos:start="187:13" pos:end="187:26">channel_layout</name></expr>)</condition><block type="pseudo" pos:start="189:13" pos:end="189:54"><block_content pos:start="189:13" pos:end="189:54">

            <expr_stmt pos:start="189:13" pos:end="189:54"><expr pos:start="189:13" pos:end="189:53"><call pos:start="189:13" pos:end="189:53"><name pos:start="189:13" pos:end="189:31">bytestream_put_le64</name><argument_list pos:start="189:32" pos:end="189:53">(<argument pos:start="189:33" pos:end="189:36"><expr pos:start="189:33" pos:end="189:36"><operator pos:start="189:33" pos:end="189:33">&amp;</operator><name pos:start="189:34" pos:end="189:36">dst</name></expr></argument>, <argument pos:start="189:39" pos:end="189:52"><expr pos:start="189:39" pos:end="189:52"><name pos:start="189:39" pos:end="189:52">channel_layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="191:9" pos:end="193:51"><if pos:start="191:9" pos:end="193:51">if <condition pos:start="191:12" pos:end="191:24">(<expr pos:start="191:13" pos:end="191:23"><name pos:start="191:13" pos:end="191:23">sample_rate</name></expr>)</condition><block type="pseudo" pos:start="193:13" pos:end="193:51"><block_content pos:start="193:13" pos:end="193:51">

            <expr_stmt pos:start="193:13" pos:end="193:51"><expr pos:start="193:13" pos:end="193:50"><call pos:start="193:13" pos:end="193:50"><name pos:start="193:13" pos:end="193:31">bytestream_put_le32</name><argument_list pos:start="193:32" pos:end="193:50">(<argument pos:start="193:33" pos:end="193:36"><expr pos:start="193:33" pos:end="193:36"><operator pos:start="193:33" pos:end="193:33">&amp;</operator><name pos:start="193:34" pos:end="193:36">dst</name></expr></argument>, <argument pos:start="193:39" pos:end="193:49"><expr pos:start="193:39" pos:end="193:49"><name pos:start="193:39" pos:end="193:49">sample_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="195:9" pos:end="201:9"><if pos:start="195:9" pos:end="201:9">if <condition pos:start="195:12" pos:end="195:28">(<expr pos:start="195:13" pos:end="195:27"><name pos:start="195:13" pos:end="195:17">width</name> <operator pos:start="195:19" pos:end="195:20">||</operator> <name pos:start="195:22" pos:end="195:27">height</name></expr>)</condition><block pos:start="195:29" pos:end="201:9">{<block_content pos:start="197:13" pos:end="199:46">

            <expr_stmt pos:start="197:13" pos:end="197:45"><expr pos:start="197:13" pos:end="197:44"><call pos:start="197:13" pos:end="197:44"><name pos:start="197:13" pos:end="197:31">bytestream_put_le32</name><argument_list pos:start="197:32" pos:end="197:44">(<argument pos:start="197:33" pos:end="197:36"><expr pos:start="197:33" pos:end="197:36"><operator pos:start="197:33" pos:end="197:33">&amp;</operator><name pos:start="197:34" pos:end="197:36">dst</name></expr></argument>, <argument pos:start="197:39" pos:end="197:43"><expr pos:start="197:39" pos:end="197:43"><name pos:start="197:39" pos:end="197:43">width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="199:13" pos:end="199:46"><expr pos:start="199:13" pos:end="199:45"><call pos:start="199:13" pos:end="199:45"><name pos:start="199:13" pos:end="199:31">bytestream_put_le32</name><argument_list pos:start="199:32" pos:end="199:45">(<argument pos:start="199:33" pos:end="199:36"><expr pos:start="199:33" pos:end="199:36"><operator pos:start="199:33" pos:end="199:33">&amp;</operator><name pos:start="199:34" pos:end="199:36">dst</name></expr></argument>, <argument pos:start="199:39" pos:end="199:44"><expr pos:start="199:39" pos:end="199:44"><name pos:start="199:39" pos:end="199:44">height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="207:5" pos:end="219:5"><if pos:start="207:5" pos:end="219:5">if <condition pos:start="207:8" pos:end="207:31">(<expr pos:start="207:9" pos:end="207:30"><name pos:start="207:9" pos:end="207:18">skip_start</name> <operator pos:start="207:20" pos:end="207:21">||</operator> <name pos:start="207:23" pos:end="207:30">skip_end</name></expr>)</condition> <block pos:start="207:33" pos:end="219:5">{<block_content pos:start="209:9" pos:end="217:33">

        <decl_stmt pos:start="209:9" pos:end="209:82"><decl pos:start="209:9" pos:end="209:81"><type pos:start="209:9" pos:end="209:17"><name pos:start="209:9" pos:end="209:15">uint8_t</name> <modifier pos:start="209:17" pos:end="209:17">*</modifier></type><name pos:start="209:18" pos:end="209:20">dst</name> <init pos:start="209:22" pos:end="209:81">= <expr pos:start="209:24" pos:end="209:81"><call pos:start="209:24" pos:end="209:81"><name pos:start="209:24" pos:end="209:46">av_packet_new_side_data</name><argument_list pos:start="209:47" pos:end="209:81">(<argument pos:start="209:48" pos:end="209:50"><expr pos:start="209:48" pos:end="209:50"><name pos:start="209:48" pos:end="209:50">pkt</name></expr></argument>, <argument pos:start="209:53" pos:end="209:76"><expr pos:start="209:53" pos:end="209:76"><name pos:start="209:53" pos:end="209:76">AV_PKT_DATA_SKIP_SAMPLES</name></expr></argument>, <argument pos:start="209:79" pos:end="209:80"><expr pos:start="209:79" pos:end="209:80"><literal type="number" pos:start="209:79" pos:end="209:80">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="211:9" pos:end="213:35"><if pos:start="211:9" pos:end="213:35">if <condition pos:start="211:12" pos:end="211:17">(<expr pos:start="211:13" pos:end="211:16"><operator pos:start="211:13" pos:end="211:13">!</operator><name pos:start="211:14" pos:end="211:16">dst</name></expr>)</condition><block type="pseudo" pos:start="213:13" pos:end="213:35"><block_content pos:start="213:13" pos:end="213:35">

            <return pos:start="213:13" pos:end="213:35">return <expr pos:start="213:20" pos:end="213:34"><call pos:start="213:20" pos:end="213:34"><name pos:start="213:20" pos:end="213:26">AVERROR</name><argument_list pos:start="213:27" pos:end="213:34">(<argument pos:start="213:28" pos:end="213:33"><expr pos:start="213:28" pos:end="213:33"><name pos:start="213:28" pos:end="213:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="215:9" pos:end="215:33"><expr pos:start="215:9" pos:end="215:32"><call pos:start="215:9" pos:end="215:32"><name pos:start="215:9" pos:end="215:15">AV_WL32</name><argument_list pos:start="215:16" pos:end="215:32">(<argument pos:start="215:17" pos:end="215:19"><expr pos:start="215:17" pos:end="215:19"><name pos:start="215:17" pos:end="215:19">dst</name></expr></argument>, <argument pos:start="215:22" pos:end="215:31"><expr pos:start="215:22" pos:end="215:31"><name pos:start="215:22" pos:end="215:31">skip_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="217:9" pos:end="217:33"><expr pos:start="217:9" pos:end="217:32"><call pos:start="217:9" pos:end="217:32"><name pos:start="217:9" pos:end="217:15">AV_WL32</name><argument_list pos:start="217:16" pos:end="217:32">(<argument pos:start="217:17" pos:end="217:21"><expr pos:start="217:17" pos:end="217:21"><name pos:start="217:17" pos:end="217:19">dst</name><operator pos:start="217:20" pos:end="217:20">+</operator><literal type="number" pos:start="217:21" pos:end="217:21">4</literal></expr></argument>, <argument pos:start="217:24" pos:end="217:31"><expr pos:start="217:24" pos:end="217:31"><name pos:start="217:24" pos:end="217:31">skip_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="223:5" pos:end="223:13">return <expr pos:start="223:12" pos:end="223:12"><literal type="number" pos:start="223:12" pos:end="223:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
