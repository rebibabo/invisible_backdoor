<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19367.c" pos:tabs="8"><function pos:start="1:1" pos:end="127:1"><type pos:start="1:1" pos:end="1:21"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:21">int64_t</name></type> <name pos:start="1:23" pos:end="1:39">get_sector_offset</name><parameter_list pos:start="1:40" pos:end="3:34">(<parameter pos:start="1:41" pos:end="1:60"><decl pos:start="1:41" pos:end="1:60"><type pos:start="1:41" pos:end="1:60"><name pos:start="1:41" pos:end="1:56">BlockDriverState</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:60">bs</name></decl></parameter>,

    <parameter pos:start="3:5" pos:end="3:22"><decl pos:start="3:5" pos:end="3:22"><type pos:start="3:5" pos:end="3:22"><name pos:start="3:5" pos:end="3:11">int64_t</name></type> <name pos:start="3:13" pos:end="3:22">sector_num</name></decl></parameter>, <parameter pos:start="3:25" pos:end="3:33"><decl pos:start="3:25" pos:end="3:33"><type pos:start="3:25" pos:end="3:33"><name pos:start="3:25" pos:end="3:27">int</name></type> <name pos:start="3:29" pos:end="3:33">write</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="127:1">{<block_content pos:start="7:5" pos:end="125:24">

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">BDRVVPCState</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:19">s</name> <init pos:start="7:21" pos:end="7:32">= <expr pos:start="7:23" pos:end="7:32"><name pos:start="7:23" pos:end="7:32"><name pos:start="7:23" pos:end="7:24">bs</name><operator pos:start="7:25" pos:end="7:26">-&gt;</operator><name pos:start="7:27" pos:end="7:32">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:39"><decl pos:start="9:5" pos:end="9:38"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint64_t</name></type> <name pos:start="9:14" pos:end="9:19">offset</name> <init pos:start="9:21" pos:end="9:38">= <expr pos:start="9:23" pos:end="9:38"><name pos:start="9:23" pos:end="9:32">sector_num</name> <operator pos:start="9:34" pos:end="9:34">*</operator> <literal type="number" pos:start="9:36" pos:end="9:38">512</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:41"><decl pos:start="11:5" pos:end="11:26"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:26">bitmap_offset</name></decl>, <decl pos:start="11:29" pos:end="11:40"><type ref="prev" pos:start="11:5" pos:end="11:12"/><name pos:start="11:29" pos:end="11:40">block_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:46"><decl pos:start="13:5" pos:end="13:28"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:28">pagetable_index</name></decl>, <decl pos:start="13:31" pos:end="13:45"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:31" pos:end="13:45">pageentry_index</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:45"><expr pos:start="17:5" pos:end="17:44"><name pos:start="17:5" pos:end="17:19">pagetable_index</name> <operator pos:start="17:21" pos:end="17:21">=</operator> <name pos:start="17:23" pos:end="17:28">offset</name> <operator pos:start="17:30" pos:end="17:30">/</operator> <name pos:start="17:32" pos:end="17:44"><name pos:start="17:32" pos:end="17:32">s</name><operator pos:start="17:33" pos:end="17:34">-&gt;</operator><name pos:start="17:35" pos:end="17:44">block_size</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:53"><expr pos:start="19:5" pos:end="19:52"><name pos:start="19:5" pos:end="19:19">pageentry_index</name> <operator pos:start="19:21" pos:end="19:21">=</operator> <operator pos:start="19:23" pos:end="19:23">(</operator><name pos:start="19:24" pos:end="19:29">offset</name> <operator pos:start="19:31" pos:end="19:31">%</operator> <name pos:start="19:33" pos:end="19:45"><name pos:start="19:33" pos:end="19:33">s</name><operator pos:start="19:34" pos:end="19:35">-&gt;</operator><name pos:start="19:36" pos:end="19:45">block_size</name></name><operator pos:start="19:46" pos:end="19:46">)</operator> <operator pos:start="19:48" pos:end="19:48">/</operator> <literal type="number" pos:start="19:50" pos:end="19:52">512</literal></expr>;</expr_stmt>



    <if_stmt pos:start="23:5" pos:end="25:18"><if pos:start="23:5" pos:end="25:18">if <condition pos:start="23:8" pos:end="23:95">(<expr pos:start="23:9" pos:end="23:94"><name pos:start="23:9" pos:end="23:23">pagetable_index</name> <operator pos:start="23:25" pos:end="23:26">&gt;=</operator> <name pos:start="23:28" pos:end="23:47"><name pos:start="23:28" pos:end="23:28">s</name><operator pos:start="23:29" pos:end="23:30">-&gt;</operator><name pos:start="23:31" pos:end="23:47">max_table_entries</name></name> <operator pos:start="23:49" pos:end="23:50">||</operator> <name pos:start="23:52" pos:end="23:80"><name pos:start="23:52" pos:end="23:52">s</name><operator pos:start="23:53" pos:end="23:54">-&gt;</operator><name pos:start="23:55" pos:end="23:63">pagetable</name><index pos:start="23:64" pos:end="23:80">[<expr pos:start="23:65" pos:end="23:79"><name pos:start="23:65" pos:end="23:79">pagetable_index</name></expr>]</index></name> <operator pos:start="23:82" pos:end="23:83">==</operator> <literal type="number" pos:start="23:85" pos:end="23:94">0xffffffff</literal></expr>)</condition><block type="pseudo" pos:start="25:9" pos:end="25:18"><block_content pos:start="25:9" pos:end="25:18">

        <return pos:start="25:9" pos:end="25:18">return <expr pos:start="25:16" pos:end="25:17"><operator pos:start="25:16" pos:end="25:16">-</operator><literal type="number" pos:start="25:17" pos:end="25:17">1</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="line" pos:start="25:20" pos:end="25:35">// not allocated</comment>



    <expr_stmt pos:start="29:5" pos:end="29:67"><expr pos:start="29:5" pos:end="29:66"><name pos:start="29:5" pos:end="29:17">bitmap_offset</name> <operator pos:start="29:19" pos:end="29:19">=</operator> <literal type="number" pos:start="29:21" pos:end="29:23">512</literal> <operator pos:start="29:25" pos:end="29:25">*</operator> <operator pos:start="29:27" pos:end="29:27">(</operator><name pos:start="29:28" pos:end="29:35">uint64_t</name><operator pos:start="29:36" pos:end="29:36">)</operator> <name pos:start="29:38" pos:end="29:66"><name pos:start="29:38" pos:end="29:38">s</name><operator pos:start="29:39" pos:end="29:40">-&gt;</operator><name pos:start="29:41" pos:end="29:49">pagetable</name><index pos:start="29:50" pos:end="29:66">[<expr pos:start="29:51" pos:end="29:65"><name pos:start="29:51" pos:end="29:65">pagetable_index</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:76"><expr pos:start="31:5" pos:end="31:75"><name pos:start="31:5" pos:end="31:16">block_offset</name> <operator pos:start="31:18" pos:end="31:18">=</operator> <name pos:start="31:20" pos:end="31:32">bitmap_offset</name> <operator pos:start="31:34" pos:end="31:34">+</operator> <name pos:start="31:36" pos:end="31:49"><name pos:start="31:36" pos:end="31:36">s</name><operator pos:start="31:37" pos:end="31:38">-&gt;</operator><name pos:start="31:39" pos:end="31:49">bitmap_size</name></name> <operator pos:start="31:51" pos:end="31:51">+</operator> <operator pos:start="31:53" pos:end="31:53">(</operator><literal type="number" pos:start="31:54" pos:end="31:56">512</literal> <operator pos:start="31:58" pos:end="31:58">*</operator> <name pos:start="31:60" pos:end="31:74">pageentry_index</name><operator pos:start="31:75" pos:end="31:75">)</operator></expr>;</expr_stmt>



    <comment type="line" pos:start="35:5" pos:end="35:76">// We must ensure that we don't write to any sectors which are marked as</comment>

    <comment type="line" pos:start="37:5" pos:end="37:75">// unused in the bitmap. We get away with setting all bits in the block</comment>

    <comment type="line" pos:start="39:5" pos:end="39:79">// bitmap each time we write to a new block. This might cause Virtual PC to</comment>

    <comment type="line" pos:start="41:5" pos:end="41:72">// miss sparse read optimization, but it's not a problem in terms of</comment>

    <comment type="line" pos:start="43:5" pos:end="43:19">// correctness.</comment>

    <if_stmt pos:start="45:5" pos:end="122:0"><if pos:start="45:5" pos:end="122:0">if <condition pos:start="45:8" pos:end="45:58">(<expr pos:start="45:9" pos:end="45:57"><name pos:start="45:9" pos:end="45:13">write</name> <operator pos:start="45:15" pos:end="45:16">&amp;&amp;</operator> <operator pos:start="45:18" pos:end="45:18">(</operator><name pos:start="45:19" pos:end="45:39"><name pos:start="45:19" pos:end="45:19">s</name><operator pos:start="45:20" pos:end="45:21">-&gt;</operator><name pos:start="45:22" pos:end="45:39">last_bitmap_offset</name></name> <operator pos:start="45:41" pos:end="45:42">!=</operator> <name pos:start="45:44" pos:end="45:56">bitmap_offset</name><operator pos:start="45:57" pos:end="45:57">)</operator></expr>)</condition> <block pos:start="45:60" pos:end="122:0">{<block_content pos:start="47:9" pos:end="55:69">

        <decl_stmt pos:start="47:9" pos:end="47:39"><decl pos:start="47:9" pos:end="47:38"><type pos:start="47:9" pos:end="47:15"><name pos:start="47:9" pos:end="47:15">uint8_t</name></type> <name pos:start="47:17" pos:end="47:38"><name pos:start="47:17" pos:end="47:22">bitmap</name><index pos:start="47:23" pos:end="47:38">[<expr pos:start="47:24" pos:end="47:37"><name pos:start="47:24" pos:end="47:37"><name pos:start="47:24" pos:end="47:24">s</name><operator pos:start="47:25" pos:end="47:26">-&gt;</operator><name pos:start="47:27" pos:end="47:37">bitmap_size</name></name></expr>]</index></name></decl>;</decl_stmt>



        <expr_stmt pos:start="51:9" pos:end="51:46"><expr pos:start="51:9" pos:end="51:45"><name pos:start="51:9" pos:end="51:29"><name pos:start="51:9" pos:end="51:9">s</name><operator pos:start="51:10" pos:end="51:11">-&gt;</operator><name pos:start="51:12" pos:end="51:29">last_bitmap_offset</name></name> <operator pos:start="51:31" pos:end="51:31">=</operator> <name pos:start="51:33" pos:end="51:45">bitmap_offset</name></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:45"><expr pos:start="53:9" pos:end="53:44"><call pos:start="53:9" pos:end="53:44"><name pos:start="53:9" pos:end="53:14">memset</name><argument_list pos:start="53:15" pos:end="53:44">(<argument pos:start="53:16" pos:end="53:21"><expr pos:start="53:16" pos:end="53:21"><name pos:start="53:16" pos:end="53:21">bitmap</name></expr></argument>, <argument pos:start="53:24" pos:end="53:27"><expr pos:start="53:24" pos:end="53:27"><literal type="number" pos:start="53:24" pos:end="53:27">0xff</literal></expr></argument>, <argument pos:start="53:30" pos:end="53:43"><expr pos:start="53:30" pos:end="53:43"><name pos:start="53:30" pos:end="53:43"><name pos:start="53:30" pos:end="53:30">s</name><operator pos:start="53:31" pos:end="53:32">-&gt;</operator><name pos:start="53:33" pos:end="53:43">bitmap_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:69"><expr pos:start="55:9" pos:end="55:68"><call pos:start="55:9" pos:end="55:68"><name pos:start="55:9" pos:end="55:19">bdrv_pwrite</name><argument_list pos:start="55:20" pos:end="55:68">(<argument pos:start="55:21" pos:end="55:28"><expr pos:start="55:21" pos:end="55:28"><name pos:start="55:21" pos:end="55:28"><name pos:start="55:21" pos:end="55:22">bs</name><operator pos:start="55:23" pos:end="55:24">-&gt;</operator><name pos:start="55:25" pos:end="55:28">file</name></name></expr></argument>, <argument pos:start="55:31" pos:end="55:43"><expr pos:start="55:31" pos:end="55:43"><name pos:start="55:31" pos:end="55:43">bitmap_offset</name></expr></argument>, <argument pos:start="55:46" pos:end="55:51"><expr pos:start="55:46" pos:end="55:51"><name pos:start="55:46" pos:end="55:51">bitmap</name></expr></argument>, <argument pos:start="55:54" pos:end="55:67"><expr pos:start="55:54" pos:end="55:67"><name pos:start="55:54" pos:end="55:67"><name pos:start="55:54" pos:end="55:54">s</name><operator pos:start="55:55" pos:end="55:56">-&gt;</operator><name pos:start="55:57" pos:end="55:67">bitmap_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



<comment type="line" pos:start="61:1" pos:end="61:100">//    printf("sector: %" PRIx64 ", index: %x, offset: %x, bioff: %" PRIx64 ", bloff: %" PRIx64 "\n",</comment>

<comment type="line" pos:start="63:1" pos:end="63:53">//	sector_num, pagetable_index, pageentry_index,</comment>

<comment type="line" pos:start="65:1" pos:end="65:37">//	bitmap_offset, block_offset);</comment>



<comment type="line" pos:start="69:1" pos:end="69:21">// disabled by reason</comment>

<cpp:if pos:start="71:1" pos:end="71:5">#<cpp:directive pos:start="71:2" pos:end="71:3">if</cpp:directive> <expr pos:start="71:5" pos:end="71:5"><literal type="number" pos:start="71:5" pos:end="71:5">0</literal></expr></cpp:if>

<cpp:ifdef pos:start="73:1" pos:end="73:12">#<cpp:directive pos:start="73:2" pos:end="73:6">ifdef</cpp:directive> <name pos:start="73:8" pos:end="73:12">CACHE</name></cpp:ifdef>

    if (bitmap_offset != s-&gt;last_bitmap)

    {

	lseek(s-&gt;fd, bitmap_offset, SEEK_SET);



	s-&gt;last_bitmap = bitmap_offset;



	<comment type="line" pos:start="87:9" pos:end="87:63">// Scary! Bitmap is stored as big endian 32bit entries,</comment>

	<comment type="line" pos:start="89:9" pos:end="89:51">// while we used to look it up byte by byte</comment>

	read(s-&gt;fd, s-&gt;pageentry_u8, 512);

	for (i = 0; i &lt; 128; i++)

	    be32_to_cpus(&amp;s-&gt;pageentry_u32[i]);

    }



    if ((s-&gt;pageentry_u8[pageentry_index / 8] &gt;&gt; (pageentry_index % 8)) &amp; 1)

	return -1;

<cpp:else pos:start="105:1" pos:end="105:5">#<cpp:directive pos:start="105:2" pos:end="105:5">else</cpp:directive></cpp:else>

    lseek(s-&gt;fd, bitmap_offset + (pageentry_index / 8), SEEK_SET);



    read(s-&gt;fd, &amp;bitmap_entry, 1);



    if ((bitmap_entry &gt;&gt; (pageentry_index % 8)) &amp; 1)

	return -1; <comment type="line" pos:start="117:20" pos:end="117:35">// not allocated</comment>

<cpp:endif pos:start="119:1" pos:end="119:6">#<cpp:directive pos:start="119:2" pos:end="119:6">endif</cpp:directive></cpp:endif>

<cpp:endif pos:start="121:1" pos:end="121:6">#<cpp:directive pos:start="121:2" pos:end="121:6">endif</cpp:directive></cpp:endif>



    <return pos:start="125:5" pos:end="125:24">return <expr pos:start="125:12" pos:end="125:23"><name pos:start="125:12" pos:end="125:23">block_offset</name></expr>;</return>

</block_content>}</block></function>
</unit>
