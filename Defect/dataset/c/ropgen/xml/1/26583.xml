<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26583.c" pos:tabs="8"><function pos:start="1:1" pos:end="147:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">av_cold</name> <name pos:start="1:16" pos:end="1:18">int</name></type> <name pos:start="1:20" pos:end="1:34">vqa_decode_init</name><parameter_list pos:start="1:35" pos:end="1:57">(<parameter pos:start="1:36" pos:end="1:56"><decl pos:start="1:36" pos:end="1:56"><type pos:start="1:36" pos:end="1:51"><name pos:start="1:36" pos:end="1:49">AVCodecContext</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:56">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="147:1">{<block_content pos:start="5:5" pos:end="145:27">

    <decl_stmt pos:start="5:5" pos:end="5:37"><decl pos:start="5:5" pos:end="5:36"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">VqaContext</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:17">s</name> <init pos:start="5:19" pos:end="5:36">= <expr pos:start="5:21" pos:end="5:36"><name pos:start="5:21" pos:end="5:36"><name pos:start="5:21" pos:end="5:25">avctx</name><operator pos:start="5:26" pos:end="5:27">-&gt;</operator><name pos:start="5:28" pos:end="5:36">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:30"><decl pos:start="7:5" pos:end="7:29"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:12">unsigned</name> <name pos:start="7:14" pos:end="7:17">char</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:29">vqa_header</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>, <decl pos:start="9:12" pos:end="9:12"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:12">j</name></decl>, <decl pos:start="9:15" pos:end="9:28"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:15" pos:end="9:28">codebook_index</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:21"><expr pos:start="13:5" pos:end="13:20"><name pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:5">s</name><operator pos:start="13:6" pos:end="13:7">-&gt;</operator><name pos:start="13:8" pos:end="13:12">avctx</name></name> <operator pos:start="13:14" pos:end="13:14">=</operator> <name pos:start="13:16" pos:end="13:20">avctx</name></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:34"><expr pos:start="15:5" pos:end="15:33"><name pos:start="15:5" pos:end="15:18"><name pos:start="15:5" pos:end="15:9">avctx</name><operator pos:start="15:10" pos:end="15:11">-&gt;</operator><name pos:start="15:12" pos:end="15:18">pix_fmt</name></name> <operator pos:start="15:20" pos:end="15:20">=</operator> <name pos:start="15:22" pos:end="15:33">PIX_FMT_PAL8</name></expr>;</expr_stmt>



    <comment type="block" pos:start="19:5" pos:end="19:41">/* make sure the extradata made it */</comment>

    <if_stmt pos:start="21:5" pos:end="27:5"><if pos:start="21:5" pos:end="27:5">if <condition pos:start="21:8" pos:end="21:52">(<expr pos:start="21:9" pos:end="21:51"><name pos:start="21:9" pos:end="21:32"><name pos:start="21:9" pos:end="21:9">s</name><operator pos:start="21:10" pos:end="21:11">-&gt;</operator><name pos:start="21:12" pos:end="21:16">avctx</name><operator pos:start="21:17" pos:end="21:18">-&gt;</operator><name pos:start="21:19" pos:end="21:32">extradata_size</name></name> <operator pos:start="21:34" pos:end="21:35">!=</operator> <name pos:start="21:37" pos:end="21:51">VQA_HEADER_SIZE</name></expr>)</condition> <block pos:start="21:54" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:18">

        <expr_stmt pos:start="23:9" pos:end="23:104"><expr pos:start="23:9" pos:end="23:103"><call pos:start="23:9" pos:end="23:103"><name pos:start="23:9" pos:end="23:14">av_log</name><argument_list pos:start="23:15" pos:end="23:103">(<argument pos:start="23:16" pos:end="23:23"><expr pos:start="23:16" pos:end="23:23"><name pos:start="23:16" pos:end="23:23"><name pos:start="23:16" pos:end="23:16">s</name><operator pos:start="23:17" pos:end="23:18">-&gt;</operator><name pos:start="23:19" pos:end="23:23">avctx</name></name></expr></argument>, <argument pos:start="23:26" pos:end="23:37"><expr pos:start="23:26" pos:end="23:37"><name pos:start="23:26" pos:end="23:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="23:40" pos:end="23:85"><expr pos:start="23:40" pos:end="23:85"><literal type="string" pos:start="23:40" pos:end="23:85">"  VQA video: expected extradata size of %d\n"</literal></expr></argument>, <argument pos:start="23:88" pos:end="23:102"><expr pos:start="23:88" pos:end="23:102"><name pos:start="23:88" pos:end="23:102">VQA_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="25:9" pos:end="25:18">return <expr pos:start="25:16" pos:end="25:17"><operator pos:start="25:16" pos:end="25:16">-</operator><literal type="number" pos:start="25:17" pos:end="25:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:52">/* load up the VQA parameters from the header */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:54"><expr pos:start="33:5" pos:end="33:53"><name pos:start="33:5" pos:end="33:14">vqa_header</name> <operator pos:start="33:16" pos:end="33:16">=</operator> <operator pos:start="33:18" pos:end="33:18">(</operator><name pos:start="33:19" pos:end="33:26">unsigned</name> <name pos:start="33:28" pos:end="33:31">char</name> <operator pos:start="33:33" pos:end="33:33">*</operator><operator pos:start="33:34" pos:end="33:34">)</operator><name pos:start="33:35" pos:end="33:53"><name pos:start="33:35" pos:end="33:35">s</name><operator pos:start="33:36" pos:end="33:37">-&gt;</operator><name pos:start="33:38" pos:end="33:42">avctx</name><operator pos:start="33:43" pos:end="33:44">-&gt;</operator><name pos:start="33:45" pos:end="33:53">extradata</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:35"><expr pos:start="35:5" pos:end="35:34"><name pos:start="35:5" pos:end="35:18"><name pos:start="35:5" pos:end="35:5">s</name><operator pos:start="35:6" pos:end="35:7">-&gt;</operator><name pos:start="35:8" pos:end="35:18">vqa_version</name></name> <operator pos:start="35:20" pos:end="35:20">=</operator> <name pos:start="35:22" pos:end="35:34"><name pos:start="35:22" pos:end="35:31">vqa_header</name><index pos:start="35:32" pos:end="35:34">[<expr pos:start="35:33" pos:end="35:33"><literal type="number" pos:start="35:33" pos:end="35:33">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:39"><expr pos:start="37:5" pos:end="37:38"><name pos:start="37:5" pos:end="37:12"><name pos:start="37:5" pos:end="37:5">s</name><operator pos:start="37:6" pos:end="37:7">-&gt;</operator><name pos:start="37:8" pos:end="37:12">width</name></name> <operator pos:start="37:14" pos:end="37:14">=</operator> <call pos:start="37:16" pos:end="37:38"><name pos:start="37:16" pos:end="37:22">AV_RL16</name><argument_list pos:start="37:23" pos:end="37:38">(<argument pos:start="37:24" pos:end="37:37"><expr pos:start="37:24" pos:end="37:37"><operator pos:start="37:24" pos:end="37:24">&amp;</operator><name pos:start="37:25" pos:end="37:37"><name pos:start="37:25" pos:end="37:34">vqa_header</name><index pos:start="37:35" pos:end="37:37">[<expr pos:start="37:36" pos:end="37:36"><literal type="number" pos:start="37:36" pos:end="37:36">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:40"><expr pos:start="39:5" pos:end="39:39"><name pos:start="39:5" pos:end="39:13"><name pos:start="39:5" pos:end="39:5">s</name><operator pos:start="39:6" pos:end="39:7">-&gt;</operator><name pos:start="39:8" pos:end="39:13">height</name></name> <operator pos:start="39:15" pos:end="39:15">=</operator> <call pos:start="39:17" pos:end="39:39"><name pos:start="39:17" pos:end="39:23">AV_RL16</name><argument_list pos:start="39:24" pos:end="39:39">(<argument pos:start="39:25" pos:end="39:38"><expr pos:start="39:25" pos:end="39:38"><operator pos:start="39:25" pos:end="39:25">&amp;</operator><name pos:start="39:26" pos:end="39:38"><name pos:start="39:26" pos:end="39:35">vqa_header</name><index pos:start="39:36" pos:end="39:38">[<expr pos:start="39:37" pos:end="39:37"><literal type="number" pos:start="39:37" pos:end="39:37">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="47:5"><if pos:start="41:5" pos:end="47:5">if<condition pos:start="41:7" pos:end="41:58">(<expr pos:start="41:8" pos:end="41:57"><call pos:start="41:8" pos:end="41:57"><name pos:start="41:8" pos:end="41:26">av_image_check_size</name><argument_list pos:start="41:27" pos:end="41:57">(<argument pos:start="41:28" pos:end="41:35"><expr pos:start="41:28" pos:end="41:35"><name pos:start="41:28" pos:end="41:35"><name pos:start="41:28" pos:end="41:28">s</name><operator pos:start="41:29" pos:end="41:30">-&gt;</operator><name pos:start="41:31" pos:end="41:35">width</name></name></expr></argument>, <argument pos:start="41:38" pos:end="41:46"><expr pos:start="41:38" pos:end="41:46"><name pos:start="41:38" pos:end="41:46"><name pos:start="41:38" pos:end="41:38">s</name><operator pos:start="41:39" pos:end="41:40">-&gt;</operator><name pos:start="41:41" pos:end="41:46">height</name></name></expr></argument>, <argument pos:start="41:49" pos:end="41:49"><expr pos:start="41:49" pos:end="41:49"><literal type="number" pos:start="41:49" pos:end="41:49">0</literal></expr></argument>, <argument pos:start="41:52" pos:end="41:56"><expr pos:start="41:52" pos:end="41:56"><name pos:start="41:52" pos:end="41:56">avctx</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="41:59" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:18">

        <expr_stmt pos:start="43:9" pos:end="43:31"><expr pos:start="43:9" pos:end="43:30"><name pos:start="43:9" pos:end="43:16"><name pos:start="43:9" pos:end="43:9">s</name><operator pos:start="43:10" pos:end="43:11">-&gt;</operator><name pos:start="43:12" pos:end="43:16">width</name></name><operator pos:start="43:17" pos:end="43:17">=</operator> <name pos:start="43:19" pos:end="43:27"><name pos:start="43:19" pos:end="43:19">s</name><operator pos:start="43:20" pos:end="43:21">-&gt;</operator><name pos:start="43:22" pos:end="43:27">height</name></name><operator pos:start="43:28" pos:end="43:28">=</operator> <literal type="number" pos:start="43:30" pos:end="43:30">0</literal></expr>;</expr_stmt>

        <return pos:start="45:9" pos:end="45:18">return <expr pos:start="45:16" pos:end="45:17"><operator pos:start="45:16" pos:end="45:16">-</operator><literal type="number" pos:start="45:17" pos:end="45:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:37"><expr pos:start="49:5" pos:end="49:36"><name pos:start="49:5" pos:end="49:19"><name pos:start="49:5" pos:end="49:5">s</name><operator pos:start="49:6" pos:end="49:7">-&gt;</operator><name pos:start="49:8" pos:end="49:19">vector_width</name></name> <operator pos:start="49:21" pos:end="49:21">=</operator> <name pos:start="49:23" pos:end="49:36"><name pos:start="49:23" pos:end="49:32">vqa_header</name><index pos:start="49:33" pos:end="49:36">[<expr pos:start="49:34" pos:end="49:35"><literal type="number" pos:start="49:34" pos:end="49:35">10</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:38"><expr pos:start="51:5" pos:end="51:37"><name pos:start="51:5" pos:end="51:20"><name pos:start="51:5" pos:end="51:5">s</name><operator pos:start="51:6" pos:end="51:7">-&gt;</operator><name pos:start="51:8" pos:end="51:20">vector_height</name></name> <operator pos:start="51:22" pos:end="51:22">=</operator> <name pos:start="51:24" pos:end="51:37"><name pos:start="51:24" pos:end="51:33">vqa_header</name><index pos:start="51:34" pos:end="51:37">[<expr pos:start="51:35" pos:end="51:36"><literal type="number" pos:start="51:35" pos:end="51:36">11</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:61"><expr pos:start="53:5" pos:end="53:60"><name pos:start="53:5" pos:end="53:20"><name pos:start="53:5" pos:end="53:5">s</name><operator pos:start="53:6" pos:end="53:7">-&gt;</operator><name pos:start="53:8" pos:end="53:20">partial_count</name></name> <operator pos:start="53:22" pos:end="53:22">=</operator> <name pos:start="53:24" pos:end="53:43"><name pos:start="53:24" pos:end="53:24">s</name><operator pos:start="53:25" pos:end="53:26">-&gt;</operator><name pos:start="53:27" pos:end="53:43">partial_countdown</name></name> <operator pos:start="53:45" pos:end="53:45">=</operator> <name pos:start="53:47" pos:end="53:60"><name pos:start="53:47" pos:end="53:56">vqa_header</name><index pos:start="53:57" pos:end="53:60">[<expr pos:start="53:58" pos:end="53:59"><literal type="number" pos:start="53:58" pos:end="53:59">13</literal></expr>]</index></name></expr>;</expr_stmt>



    <comment type="block" pos:start="57:5" pos:end="57:72">/* the vector dimensions have to meet very stringent requirements */</comment>

    <if_stmt pos:start="59:5" pos:end="67:5"><if pos:start="59:5" pos:end="67:5">if <condition pos:start="59:8" pos:end="61:61">(<expr pos:start="59:9" pos:end="61:60"><operator pos:start="59:9" pos:end="59:9">(</operator><name pos:start="59:10" pos:end="59:24"><name pos:start="59:10" pos:end="59:10">s</name><operator pos:start="59:11" pos:end="59:12">-&gt;</operator><name pos:start="59:13" pos:end="59:24">vector_width</name></name> <operator pos:start="59:26" pos:end="59:27">!=</operator> <literal type="number" pos:start="59:29" pos:end="59:29">4</literal><operator pos:start="59:30" pos:end="59:30">)</operator> <operator pos:start="59:32" pos:end="59:33">||</operator>

        <operator pos:start="61:9" pos:end="61:9">(</operator><operator pos:start="61:10" pos:end="61:10">(</operator><name pos:start="61:11" pos:end="61:26"><name pos:start="61:11" pos:end="61:11">s</name><operator pos:start="61:12" pos:end="61:13">-&gt;</operator><name pos:start="61:14" pos:end="61:26">vector_height</name></name> <operator pos:start="61:28" pos:end="61:29">!=</operator> <literal type="number" pos:start="61:31" pos:end="61:31">2</literal><operator pos:start="61:32" pos:end="61:32">)</operator> <operator pos:start="61:34" pos:end="61:35">&amp;&amp;</operator> <operator pos:start="61:37" pos:end="61:37">(</operator><name pos:start="61:38" pos:end="61:53"><name pos:start="61:38" pos:end="61:38">s</name><operator pos:start="61:39" pos:end="61:40">-&gt;</operator><name pos:start="61:41" pos:end="61:53">vector_height</name></name> <operator pos:start="61:55" pos:end="61:56">!=</operator> <literal type="number" pos:start="61:58" pos:end="61:58">4</literal><operator pos:start="61:59" pos:end="61:59">)</operator><operator pos:start="61:60" pos:end="61:60">)</operator></expr>)</condition> <block pos:start="61:63" pos:end="67:5">{<block_content pos:start="65:9" pos:end="65:18">

        <comment type="block" pos:start="63:9" pos:end="63:51">/* return without further initialization */</comment>

        <return pos:start="65:9" pos:end="65:18">return <expr pos:start="65:16" pos:end="65:17"><operator pos:start="65:16" pos:end="65:16">-</operator><literal type="number" pos:start="65:17" pos:end="65:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="71:5" pos:end="71:28">/* allocate codebooks */</comment>

    <expr_stmt pos:start="73:5" pos:end="73:41"><expr pos:start="73:5" pos:end="73:40"><name pos:start="73:5" pos:end="73:20"><name pos:start="73:5" pos:end="73:5">s</name><operator pos:start="73:6" pos:end="73:7">-&gt;</operator><name pos:start="73:8" pos:end="73:20">codebook_size</name></name> <operator pos:start="73:22" pos:end="73:22">=</operator> <name pos:start="73:24" pos:end="73:40">MAX_CODEBOOK_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:46"><expr pos:start="75:5" pos:end="75:45"><name pos:start="75:5" pos:end="75:15"><name pos:start="75:5" pos:end="75:5">s</name><operator pos:start="75:6" pos:end="75:7">-&gt;</operator><name pos:start="75:8" pos:end="75:15">codebook</name></name> <operator pos:start="75:17" pos:end="75:17">=</operator> <call pos:start="75:19" pos:end="75:45"><name pos:start="75:19" pos:end="75:27">av_malloc</name><argument_list pos:start="75:28" pos:end="75:45">(<argument pos:start="75:29" pos:end="75:44"><expr pos:start="75:29" pos:end="75:44"><name pos:start="75:29" pos:end="75:44"><name pos:start="75:29" pos:end="75:29">s</name><operator pos:start="75:30" pos:end="75:31">-&gt;</operator><name pos:start="75:32" pos:end="75:44">codebook_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="77:5" pos:end="79:18"><if pos:start="77:5" pos:end="79:18">if <condition pos:start="77:8" pos:end="77:21">(<expr pos:start="77:9" pos:end="77:20"><operator pos:start="77:9" pos:end="77:9">!</operator><name pos:start="77:10" pos:end="77:20"><name pos:start="77:10" pos:end="77:10">s</name><operator pos:start="77:11" pos:end="77:12">-&gt;</operator><name pos:start="77:13" pos:end="77:20">codebook</name></name></expr>)</condition><block type="pseudo" pos:start="79:9" pos:end="79:18"><block_content pos:start="79:9" pos:end="79:18">

        <goto pos:start="79:9" pos:end="79:18">goto <name pos:start="79:14" pos:end="79:17">fail</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:58"><expr pos:start="81:5" pos:end="81:57"><name pos:start="81:5" pos:end="81:27"><name pos:start="81:5" pos:end="81:5">s</name><operator pos:start="81:6" pos:end="81:7">-&gt;</operator><name pos:start="81:8" pos:end="81:27">next_codebook_buffer</name></name> <operator pos:start="81:29" pos:end="81:29">=</operator> <call pos:start="81:31" pos:end="81:57"><name pos:start="81:31" pos:end="81:39">av_malloc</name><argument_list pos:start="81:40" pos:end="81:57">(<argument pos:start="81:41" pos:end="81:56"><expr pos:start="81:41" pos:end="81:56"><name pos:start="81:41" pos:end="81:56"><name pos:start="81:41" pos:end="81:41">s</name><operator pos:start="81:42" pos:end="81:43">-&gt;</operator><name pos:start="81:44" pos:end="81:56">codebook_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="83:5" pos:end="85:18"><if pos:start="83:5" pos:end="85:18">if <condition pos:start="83:8" pos:end="83:33">(<expr pos:start="83:9" pos:end="83:32"><operator pos:start="83:9" pos:end="83:9">!</operator><name pos:start="83:10" pos:end="83:32"><name pos:start="83:10" pos:end="83:10">s</name><operator pos:start="83:11" pos:end="83:12">-&gt;</operator><name pos:start="83:13" pos:end="83:32">next_codebook_buffer</name></name></expr>)</condition><block type="pseudo" pos:start="85:9" pos:end="85:18"><block_content pos:start="85:9" pos:end="85:18">

        <goto pos:start="85:9" pos:end="85:18">goto <name pos:start="85:14" pos:end="85:17">fail</name>;</goto></block_content></block></if></if_stmt>



    <comment type="block" pos:start="89:5" pos:end="89:32">/* allocate decode buffer */</comment>

    <expr_stmt pos:start="91:5" pos:end="93:43"><expr pos:start="91:5" pos:end="93:42"><name pos:start="91:5" pos:end="91:25"><name pos:start="91:5" pos:end="91:5">s</name><operator pos:start="91:6" pos:end="91:7">-&gt;</operator><name pos:start="91:8" pos:end="91:25">decode_buffer_size</name></name> <operator pos:start="91:27" pos:end="91:27">=</operator> <operator pos:start="91:29" pos:end="91:29">(</operator><name pos:start="91:30" pos:end="91:37"><name pos:start="91:30" pos:end="91:30">s</name><operator pos:start="91:31" pos:end="91:32">-&gt;</operator><name pos:start="91:33" pos:end="91:37">width</name></name> <operator pos:start="91:39" pos:end="91:39">/</operator> <name pos:start="91:41" pos:end="91:55"><name pos:start="91:41" pos:end="91:41">s</name><operator pos:start="91:42" pos:end="91:43">-&gt;</operator><name pos:start="91:44" pos:end="91:55">vector_width</name></name><operator pos:start="91:56" pos:end="91:56">)</operator> <operator pos:start="91:58" pos:end="91:58">*</operator>

        <operator pos:start="93:9" pos:end="93:9">(</operator><name pos:start="93:10" pos:end="93:18"><name pos:start="93:10" pos:end="93:10">s</name><operator pos:start="93:11" pos:end="93:12">-&gt;</operator><name pos:start="93:13" pos:end="93:18">height</name></name> <operator pos:start="93:20" pos:end="93:20">/</operator> <name pos:start="93:22" pos:end="93:37"><name pos:start="93:22" pos:end="93:22">s</name><operator pos:start="93:23" pos:end="93:24">-&gt;</operator><name pos:start="93:25" pos:end="93:37">vector_height</name></name><operator pos:start="93:38" pos:end="93:38">)</operator> <operator pos:start="93:40" pos:end="93:40">*</operator> <literal type="number" pos:start="93:42" pos:end="93:42">2</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:56"><expr pos:start="95:5" pos:end="95:55"><name pos:start="95:5" pos:end="95:20"><name pos:start="95:5" pos:end="95:5">s</name><operator pos:start="95:6" pos:end="95:7">-&gt;</operator><name pos:start="95:8" pos:end="95:20">decode_buffer</name></name> <operator pos:start="95:22" pos:end="95:22">=</operator> <call pos:start="95:24" pos:end="95:55"><name pos:start="95:24" pos:end="95:32">av_malloc</name><argument_list pos:start="95:33" pos:end="95:55">(<argument pos:start="95:34" pos:end="95:54"><expr pos:start="95:34" pos:end="95:54"><name pos:start="95:34" pos:end="95:54"><name pos:start="95:34" pos:end="95:34">s</name><operator pos:start="95:35" pos:end="95:36">-&gt;</operator><name pos:start="95:37" pos:end="95:54">decode_buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="97:5" pos:end="99:18"><if pos:start="97:5" pos:end="99:18">if <condition pos:start="97:8" pos:end="97:26">(<expr pos:start="97:9" pos:end="97:25"><operator pos:start="97:9" pos:end="97:9">!</operator><name pos:start="97:10" pos:end="97:25"><name pos:start="97:10" pos:end="97:10">s</name><operator pos:start="97:11" pos:end="97:12">-&gt;</operator><name pos:start="97:13" pos:end="97:25">decode_buffer</name></name></expr>)</condition><block type="pseudo" pos:start="99:9" pos:end="99:18"><block_content pos:start="99:9" pos:end="99:18">

        <goto pos:start="99:9" pos:end="99:18">goto <name pos:start="99:14" pos:end="99:17">fail</name>;</goto></block_content></block></if></if_stmt>



    <comment type="block" pos:start="103:5" pos:end="103:44">/* initialize the solid-color vectors */</comment>

    <if_stmt pos:start="105:5" pos:end="125:5"><if pos:start="105:5" pos:end="115:5">if <condition pos:start="105:8" pos:end="105:30">(<expr pos:start="105:9" pos:end="105:29"><name pos:start="105:9" pos:end="105:24"><name pos:start="105:9" pos:end="105:9">s</name><operator pos:start="105:10" pos:end="105:11">-&gt;</operator><name pos:start="105:12" pos:end="105:24">vector_height</name></name> <operator pos:start="105:26" pos:end="105:27">==</operator> <literal type="number" pos:start="105:29" pos:end="105:29">4</literal></expr>)</condition> <block pos:start="105:32" pos:end="115:5">{<block_content pos:start="107:9" pos:end="113:50">

        <expr_stmt pos:start="107:9" pos:end="107:37"><expr pos:start="107:9" pos:end="107:36"><name pos:start="107:9" pos:end="107:22">codebook_index</name> <operator pos:start="107:24" pos:end="107:24">=</operator> <literal type="number" pos:start="107:26" pos:end="107:31">0xFF00</literal> <operator pos:start="107:33" pos:end="107:33">*</operator> <literal type="number" pos:start="107:35" pos:end="107:36">16</literal></expr>;</expr_stmt>

        <for pos:start="109:9" pos:end="113:50">for <control pos:start="109:13" pos:end="109:33">(<init pos:start="109:14" pos:end="109:19"><expr pos:start="109:14" pos:end="109:18"><name pos:start="109:14" pos:end="109:14">i</name> <operator pos:start="109:16" pos:end="109:16">=</operator> <literal type="number" pos:start="109:18" pos:end="109:18">0</literal></expr>;</init> <condition pos:start="109:21" pos:end="109:28"><expr pos:start="109:21" pos:end="109:27"><name pos:start="109:21" pos:end="109:21">i</name> <operator pos:start="109:23" pos:end="109:23">&lt;</operator> <literal type="number" pos:start="109:25" pos:end="109:27">256</literal></expr>;</condition> <incr pos:start="109:30" pos:end="109:32"><expr pos:start="109:30" pos:end="109:32"><name pos:start="109:30" pos:end="109:30">i</name><operator pos:start="109:31" pos:end="109:32">++</operator></expr></incr>)</control><block type="pseudo" pos:start="111:13" pos:end="113:50"><block_content pos:start="111:13" pos:end="113:50">

            <for pos:start="111:13" pos:end="113:50">for <control pos:start="111:17" pos:end="111:36">(<init pos:start="111:18" pos:end="111:23"><expr pos:start="111:18" pos:end="111:22"><name pos:start="111:18" pos:end="111:18">j</name> <operator pos:start="111:20" pos:end="111:20">=</operator> <literal type="number" pos:start="111:22" pos:end="111:22">0</literal></expr>;</init> <condition pos:start="111:25" pos:end="111:31"><expr pos:start="111:25" pos:end="111:30"><name pos:start="111:25" pos:end="111:25">j</name> <operator pos:start="111:27" pos:end="111:27">&lt;</operator> <literal type="number" pos:start="111:29" pos:end="111:30">16</literal></expr>;</condition> <incr pos:start="111:33" pos:end="111:35"><expr pos:start="111:33" pos:end="111:35"><name pos:start="111:33" pos:end="111:33">j</name><operator pos:start="111:34" pos:end="111:35">++</operator></expr></incr>)</control><block type="pseudo" pos:start="113:17" pos:end="113:50"><block_content pos:start="113:17" pos:end="113:50">

                <expr_stmt pos:start="113:17" pos:end="113:50"><expr pos:start="113:17" pos:end="113:49"><name pos:start="113:17" pos:end="113:45"><name pos:start="113:17" pos:end="113:17">s</name><operator pos:start="113:18" pos:end="113:19">-&gt;</operator><name pos:start="113:20" pos:end="113:27">codebook</name><index pos:start="113:28" pos:end="113:45">[<expr pos:start="113:29" pos:end="113:44"><name pos:start="113:29" pos:end="113:42">codebook_index</name><operator pos:start="113:43" pos:end="113:44">++</operator></expr>]</index></name> <operator pos:start="113:47" pos:end="113:47">=</operator> <name pos:start="113:49" pos:end="113:49">i</name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

    </block_content>}</block></if> <else pos:start="115:7" pos:end="125:5">else <block pos:start="115:12" pos:end="125:5">{<block_content pos:start="117:9" pos:end="123:50">

        <expr_stmt pos:start="117:9" pos:end="117:35"><expr pos:start="117:9" pos:end="117:34"><name pos:start="117:9" pos:end="117:22">codebook_index</name> <operator pos:start="117:24" pos:end="117:24">=</operator> <literal type="number" pos:start="117:26" pos:end="117:30">0xF00</literal> <operator pos:start="117:32" pos:end="117:32">*</operator> <literal type="number" pos:start="117:34" pos:end="117:34">8</literal></expr>;</expr_stmt>

        <for pos:start="119:9" pos:end="123:50">for <control pos:start="119:13" pos:end="119:33">(<init pos:start="119:14" pos:end="119:19"><expr pos:start="119:14" pos:end="119:18"><name pos:start="119:14" pos:end="119:14">i</name> <operator pos:start="119:16" pos:end="119:16">=</operator> <literal type="number" pos:start="119:18" pos:end="119:18">0</literal></expr>;</init> <condition pos:start="119:21" pos:end="119:28"><expr pos:start="119:21" pos:end="119:27"><name pos:start="119:21" pos:end="119:21">i</name> <operator pos:start="119:23" pos:end="119:23">&lt;</operator> <literal type="number" pos:start="119:25" pos:end="119:27">256</literal></expr>;</condition> <incr pos:start="119:30" pos:end="119:32"><expr pos:start="119:30" pos:end="119:32"><name pos:start="119:30" pos:end="119:30">i</name><operator pos:start="119:31" pos:end="119:32">++</operator></expr></incr>)</control><block type="pseudo" pos:start="121:13" pos:end="123:50"><block_content pos:start="121:13" pos:end="123:50">

            <for pos:start="121:13" pos:end="123:50">for <control pos:start="121:17" pos:end="121:35">(<init pos:start="121:18" pos:end="121:23"><expr pos:start="121:18" pos:end="121:22"><name pos:start="121:18" pos:end="121:18">j</name> <operator pos:start="121:20" pos:end="121:20">=</operator> <literal type="number" pos:start="121:22" pos:end="121:22">0</literal></expr>;</init> <condition pos:start="121:25" pos:end="121:30"><expr pos:start="121:25" pos:end="121:29"><name pos:start="121:25" pos:end="121:25">j</name> <operator pos:start="121:27" pos:end="121:27">&lt;</operator> <literal type="number" pos:start="121:29" pos:end="121:29">8</literal></expr>;</condition> <incr pos:start="121:32" pos:end="121:34"><expr pos:start="121:32" pos:end="121:34"><name pos:start="121:32" pos:end="121:32">j</name><operator pos:start="121:33" pos:end="121:34">++</operator></expr></incr>)</control><block type="pseudo" pos:start="123:17" pos:end="123:50"><block_content pos:start="123:17" pos:end="123:50">

                <expr_stmt pos:start="123:17" pos:end="123:50"><expr pos:start="123:17" pos:end="123:49"><name pos:start="123:17" pos:end="123:45"><name pos:start="123:17" pos:end="123:17">s</name><operator pos:start="123:18" pos:end="123:19">-&gt;</operator><name pos:start="123:20" pos:end="123:27">codebook</name><index pos:start="123:28" pos:end="123:45">[<expr pos:start="123:29" pos:end="123:44"><name pos:start="123:29" pos:end="123:42">codebook_index</name><operator pos:start="123:43" pos:end="123:44">++</operator></expr>]</index></name> <operator pos:start="123:47" pos:end="123:47">=</operator> <name pos:start="123:49" pos:end="123:49">i</name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:38"><expr pos:start="127:5" pos:end="127:37"><name pos:start="127:5" pos:end="127:33"><name pos:start="127:5" pos:end="127:5">s</name><operator pos:start="127:6" pos:end="127:7">-&gt;</operator><name pos:start="127:8" pos:end="127:33">next_codebook_buffer_index</name></name> <operator pos:start="127:35" pos:end="127:35">=</operator> <literal type="number" pos:start="127:37" pos:end="127:37">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="131:5" pos:end="131:28"><expr pos:start="131:5" pos:end="131:27"><name pos:start="131:5" pos:end="131:20"><name pos:start="131:5" pos:end="131:5">s</name><operator pos:start="131:6" pos:end="131:7">-&gt;</operator><name pos:start="131:8" pos:end="131:12">frame</name><operator pos:start="131:13" pos:end="131:13">.</operator><name pos:start="131:14" pos:end="131:17">data</name><index pos:start="131:18" pos:end="131:20">[<expr pos:start="131:19" pos:end="131:19"><literal type="number" pos:start="131:19" pos:end="131:19">0</literal></expr>]</index></name> <operator pos:start="131:22" pos:end="131:22">=</operator> <name pos:start="131:24" pos:end="131:27">NULL</name></expr>;</expr_stmt>



    <return pos:start="135:5" pos:end="135:13">return <expr pos:start="135:12" pos:end="135:12"><literal type="number" pos:start="135:12" pos:end="135:12">0</literal></expr>;</return>

<label pos:start="137:1" pos:end="137:5"><name pos:start="137:1" pos:end="137:4">fail</name>:</label>

    <expr_stmt pos:start="139:5" pos:end="139:27"><expr pos:start="139:5" pos:end="139:26"><call pos:start="139:5" pos:end="139:26"><name pos:start="139:5" pos:end="139:12">av_freep</name><argument_list pos:start="139:13" pos:end="139:26">(<argument pos:start="139:14" pos:end="139:25"><expr pos:start="139:14" pos:end="139:25"><operator pos:start="139:14" pos:end="139:14">&amp;</operator><name pos:start="139:15" pos:end="139:25"><name pos:start="139:15" pos:end="139:15">s</name><operator pos:start="139:16" pos:end="139:17">-&gt;</operator><name pos:start="139:18" pos:end="139:25">codebook</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="141:5" pos:end="141:39"><expr pos:start="141:5" pos:end="141:38"><call pos:start="141:5" pos:end="141:38"><name pos:start="141:5" pos:end="141:12">av_freep</name><argument_list pos:start="141:13" pos:end="141:38">(<argument pos:start="141:14" pos:end="141:37"><expr pos:start="141:14" pos:end="141:37"><operator pos:start="141:14" pos:end="141:14">&amp;</operator><name pos:start="141:15" pos:end="141:37"><name pos:start="141:15" pos:end="141:15">s</name><operator pos:start="141:16" pos:end="141:17">-&gt;</operator><name pos:start="141:18" pos:end="141:37">next_codebook_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="143:5" pos:end="143:32"><expr pos:start="143:5" pos:end="143:31"><call pos:start="143:5" pos:end="143:31"><name pos:start="143:5" pos:end="143:12">av_freep</name><argument_list pos:start="143:13" pos:end="143:31">(<argument pos:start="143:14" pos:end="143:30"><expr pos:start="143:14" pos:end="143:30"><operator pos:start="143:14" pos:end="143:14">&amp;</operator><name pos:start="143:15" pos:end="143:30"><name pos:start="143:15" pos:end="143:15">s</name><operator pos:start="143:16" pos:end="143:17">-&gt;</operator><name pos:start="143:18" pos:end="143:30">decode_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="145:5" pos:end="145:27">return <expr pos:start="145:12" pos:end="145:26"><call pos:start="145:12" pos:end="145:26"><name pos:start="145:12" pos:end="145:18">AVERROR</name><argument_list pos:start="145:19" pos:end="145:26">(<argument pos:start="145:20" pos:end="145:25"><expr pos:start="145:20" pos:end="145:25"><name pos:start="145:20" pos:end="145:25">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
