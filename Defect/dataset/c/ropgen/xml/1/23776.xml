<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/23776.c" pos:tabs="8"><function pos:start="1:1" pos:end="136:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">adx_decode_frame</name><parameter_list pos:start="1:28" pos:end="3:64">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:61"><decl pos:start="1:52" pos:end="1:61"><type pos:start="1:52" pos:end="1:61"><name pos:start="1:52" pos:end="1:55">void</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:61">data</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:46"><decl pos:start="3:29" pos:end="3:46"><type pos:start="3:29" pos:end="3:46"><name pos:start="3:29" pos:end="3:31">int</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:46">got_frame_ptr</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:63"><decl pos:start="3:49" pos:end="3:63"><type pos:start="3:49" pos:end="3:63"><name pos:start="3:49" pos:end="3:56">AVPacket</name> <modifier pos:start="3:58" pos:end="3:58">*</modifier></type><name pos:start="3:59" pos:end="3:63">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="136:1">{<block_content pos:start="7:5" pos:end="134:29">

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:16">buf_size</name>        <init pos:start="7:25" pos:end="7:37">= <expr pos:start="7:27" pos:end="7:37"><name pos:start="7:27" pos:end="7:37"><name pos:start="7:27" pos:end="7:31">avpkt</name><operator pos:start="7:32" pos:end="7:33">-&gt;</operator><name pos:start="7:34" pos:end="7:37">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:43"><decl pos:start="9:5" pos:end="9:42"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:14">ADXContext</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:17">c</name>       <init pos:start="9:25" pos:end="9:42">= <expr pos:start="9:27" pos:end="9:42"><name pos:start="9:27" pos:end="9:42"><name pos:start="9:27" pos:end="9:31">avctx</name><operator pos:start="9:32" pos:end="9:33">-&gt;</operator><name pos:start="9:34" pos:end="9:42">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">int16_t</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:20">samples</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:38"><decl pos:start="13:5" pos:end="13:37"><type pos:start="13:5" pos:end="13:19"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:17">uint8_t</name> <modifier pos:start="13:19" pos:end="13:19">*</modifier></type><name pos:start="13:20" pos:end="13:22">buf</name>  <init pos:start="13:25" pos:end="13:37">= <expr pos:start="13:27" pos:end="13:37"><name pos:start="13:27" pos:end="13:37"><name pos:start="13:27" pos:end="13:31">avpkt</name><operator pos:start="13:32" pos:end="13:33">-&gt;</operator><name pos:start="13:34" pos:end="13:37">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:18">num_blocks</name></decl>, <decl pos:start="15:21" pos:end="15:22"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:21" pos:end="15:22">ch</name></decl>, <decl pos:start="15:25" pos:end="15:27"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:25" pos:end="15:27">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="25:5"><if pos:start="19:5" pos:end="25:5">if <condition pos:start="19:8" pos:end="19:15">(<expr pos:start="19:9" pos:end="19:14"><name pos:start="19:9" pos:end="19:14"><name pos:start="19:9" pos:end="19:9">c</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:14">eof</name></name></expr>)</condition> <block pos:start="19:17" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:24">

        <expr_stmt pos:start="21:9" pos:end="21:27"><expr pos:start="21:9" pos:end="21:26"><operator pos:start="21:9" pos:end="21:9">*</operator><name pos:start="21:10" pos:end="21:22">got_frame_ptr</name> <operator pos:start="21:24" pos:end="21:24">=</operator> <literal type="number" pos:start="21:26" pos:end="21:26">0</literal></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="23:24">return <expr pos:start="23:16" pos:end="23:23"><name pos:start="23:16" pos:end="23:23">buf_size</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="29:5" pos:end="53:5"><if pos:start="29:5" pos:end="53:5">if<condition pos:start="29:7" pos:end="29:30">(<expr pos:start="29:8" pos:end="29:29"><call pos:start="29:8" pos:end="29:19"><name pos:start="29:8" pos:end="29:14">AV_RB16</name><argument_list pos:start="29:15" pos:end="29:19">(<argument pos:start="29:16" pos:end="29:18"><expr pos:start="29:16" pos:end="29:18"><name pos:start="29:16" pos:end="29:18">buf</name></expr></argument>)</argument_list></call> <operator pos:start="29:21" pos:end="29:22">==</operator> <literal type="number" pos:start="29:24" pos:end="29:29">0x8000</literal></expr>)</condition><block pos:start="29:31" pos:end="53:5">{<block_content pos:start="31:9" pos:end="51:32">

        <decl_stmt pos:start="31:9" pos:end="31:24"><decl pos:start="31:9" pos:end="31:23"><type pos:start="31:9" pos:end="31:11"><name pos:start="31:9" pos:end="31:11">int</name></type> <name pos:start="31:13" pos:end="31:23">header_size</name></decl>;</decl_stmt>

        <if_stmt pos:start="33:9" pos:end="42:9"><if pos:start="33:9" pos:end="42:9">if <condition pos:start="33:12" pos:end="37:59">(<expr pos:start="33:13" pos:end="37:58"><operator pos:start="33:13" pos:end="33:13">(</operator><name pos:start="33:14" pos:end="33:16">ret</name> <operator pos:start="33:18" pos:end="33:18">=</operator> <call pos:start="33:20" pos:end="37:53"><name pos:start="33:20" pos:end="33:43">avpriv_adx_decode_header</name><argument_list pos:start="33:44" pos:end="37:53">(<argument pos:start="33:45" pos:end="33:49"><expr pos:start="33:45" pos:end="33:49"><name pos:start="33:45" pos:end="33:49">avctx</name></expr></argument>, <argument pos:start="33:52" pos:end="33:54"><expr pos:start="33:52" pos:end="33:54"><name pos:start="33:52" pos:end="33:54">buf</name></expr></argument>,

                                            <argument pos:start="35:45" pos:end="35:52"><expr pos:start="35:45" pos:end="35:52"><name pos:start="35:45" pos:end="35:52">buf_size</name></expr></argument>, <argument pos:start="35:55" pos:end="35:66"><expr pos:start="35:55" pos:end="35:66"><operator pos:start="35:55" pos:end="35:55">&amp;</operator><name pos:start="35:56" pos:end="35:66">header_size</name></expr></argument>,

                                            <argument pos:start="37:45" pos:end="37:52"><expr pos:start="37:45" pos:end="37:52"><name pos:start="37:45" pos:end="37:52"><name pos:start="37:45" pos:end="37:45">c</name><operator pos:start="37:46" pos:end="37:47">-&gt;</operator><name pos:start="37:48" pos:end="37:52">coeff</name></name></expr></argument>)</argument_list></call><operator pos:start="37:54" pos:end="37:54">)</operator> <operator pos:start="37:56" pos:end="37:56">&lt;</operator> <literal type="number" pos:start="37:58" pos:end="37:58">0</literal></expr>)</condition> <block pos:start="37:61" pos:end="42:9">{<block_content pos:start="39:13" pos:end="39:70">

            <expr_stmt pos:start="39:13" pos:end="39:70"><expr pos:start="39:13" pos:end="39:69"><call pos:start="39:13" pos:end="39:69"><name pos:start="39:13" pos:end="39:18">av_log</name><argument_list pos:start="39:19" pos:end="39:69">(<argument pos:start="39:20" pos:end="39:24"><expr pos:start="39:20" pos:end="39:24"><name pos:start="39:20" pos:end="39:24">avctx</name></expr></argument>, <argument pos:start="39:27" pos:end="39:38"><expr pos:start="39:27" pos:end="39:38"><name pos:start="39:27" pos:end="39:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="39:41" pos:end="39:68"><expr pos:start="39:41" pos:end="39:68"><literal type="string" pos:start="39:41" pos:end="39:68">"error parsing ADX header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="44:9" pos:end="44:38"><expr pos:start="44:9" pos:end="44:37"><name pos:start="44:9" pos:end="44:19"><name pos:start="44:9" pos:end="44:9">c</name><operator pos:start="44:10" pos:end="44:11">-&gt;</operator><name pos:start="44:12" pos:end="44:19">channels</name></name> <operator pos:start="44:21" pos:end="44:21">=</operator> <name pos:start="44:23" pos:end="44:37"><name pos:start="44:23" pos:end="44:27">avctx</name><operator pos:start="44:28" pos:end="44:29">-&gt;</operator><name pos:start="44:30" pos:end="44:37">channels</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="46:9" pos:end="49:27"><if pos:start="46:9" pos:end="49:27">if<condition pos:start="46:11" pos:end="46:34">(<expr pos:start="46:12" pos:end="46:33"><name pos:start="46:12" pos:end="46:19">buf_size</name> <operator pos:start="46:21" pos:end="46:21">&lt;</operator> <name pos:start="46:23" pos:end="46:33">header_size</name></expr>)</condition><block type="pseudo" pos:start="49:9" pos:end="49:27"><block_content pos:start="49:9" pos:end="49:27">


        <expr_stmt pos:start="49:9" pos:end="49:27"><expr pos:start="49:9" pos:end="49:26"><name pos:start="49:9" pos:end="49:11">buf</name> <operator pos:start="49:13" pos:end="49:14">+=</operator> <name pos:start="49:16" pos:end="49:26">header_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:32"><expr pos:start="51:9" pos:end="51:31"><name pos:start="51:9" pos:end="51:16">buf_size</name> <operator pos:start="51:18" pos:end="51:19">-=</operator> <name pos:start="51:21" pos:end="51:31">header_size</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>





    <comment type="block" pos:start="59:5" pos:end="59:50">/* calculate number of blocks in the packet */</comment>

    <expr_stmt pos:start="61:5" pos:end="61:55"><expr pos:start="61:5" pos:end="61:54"><name pos:start="61:5" pos:end="61:14">num_blocks</name> <operator pos:start="61:16" pos:end="61:16">=</operator> <name pos:start="61:18" pos:end="61:25">buf_size</name> <operator pos:start="61:27" pos:end="61:27">/</operator> <operator pos:start="61:29" pos:end="61:29">(</operator><name pos:start="61:30" pos:end="61:39">BLOCK_SIZE</name> <operator pos:start="61:41" pos:end="61:41">*</operator> <name pos:start="61:43" pos:end="61:53"><name pos:start="61:43" pos:end="61:43">c</name><operator pos:start="61:44" pos:end="61:45">-&gt;</operator><name pos:start="61:46" pos:end="61:53">channels</name></name><operator pos:start="61:54" pos:end="61:54">)</operator></expr>;</expr_stmt>



    <comment type="block" pos:start="65:5" pos:end="67:16">/* if the packet is not an even multiple of BLOCK_SIZE, check for an EOF

       packet */</comment>

    <if_stmt pos:start="69:5" pos:end="82:5"><if pos:start="69:5" pos:end="82:5">if <condition pos:start="69:8" pos:end="69:65">(<expr pos:start="69:9" pos:end="69:64"><operator pos:start="69:9" pos:end="69:9">!</operator><name pos:start="69:10" pos:end="69:19">num_blocks</name> <operator pos:start="69:21" pos:end="69:22">||</operator> <name pos:start="69:24" pos:end="69:31">buf_size</name> <operator pos:start="69:33" pos:end="69:33">%</operator> <operator pos:start="69:35" pos:end="69:35">(</operator><name pos:start="69:36" pos:end="69:45">BLOCK_SIZE</name> <operator pos:start="69:47" pos:end="69:47">*</operator> <name pos:start="69:49" pos:end="69:63"><name pos:start="69:49" pos:end="69:53">avctx</name><operator pos:start="69:54" pos:end="69:55">-&gt;</operator><name pos:start="69:56" pos:end="69:63">channels</name></name><operator pos:start="69:64" pos:end="69:64">)</operator></expr>)</condition> <block pos:start="69:67" pos:end="82:5">{<block_content pos:start="71:9" pos:end="79:9">

        <if_stmt pos:start="71:9" pos:end="79:9"><if pos:start="71:9" pos:end="79:9">if <condition pos:start="71:12" pos:end="71:53">(<expr pos:start="71:13" pos:end="71:52"><name pos:start="71:13" pos:end="71:20">buf_size</name> <operator pos:start="71:22" pos:end="71:23">&gt;=</operator> <literal type="number" pos:start="71:25" pos:end="71:25">4</literal> <operator pos:start="71:27" pos:end="71:28">&amp;&amp;</operator> <operator pos:start="71:30" pos:end="71:30">(</operator><call pos:start="71:31" pos:end="71:42"><name pos:start="71:31" pos:end="71:37">AV_RB16</name><argument_list pos:start="71:38" pos:end="71:42">(<argument pos:start="71:39" pos:end="71:41"><expr pos:start="71:39" pos:end="71:41"><name pos:start="71:39" pos:end="71:41">buf</name></expr></argument>)</argument_list></call> <operator pos:start="71:44" pos:end="71:44">&amp;</operator> <literal type="number" pos:start="71:46" pos:end="71:51">0x8000</literal><operator pos:start="71:52" pos:end="71:52">)</operator></expr>)</condition> <block pos:start="71:55" pos:end="79:9">{<block_content pos:start="73:13" pos:end="77:31">

            <expr_stmt pos:start="73:13" pos:end="73:23"><expr pos:start="73:13" pos:end="73:22"><name pos:start="73:13" pos:end="73:18"><name pos:start="73:13" pos:end="73:13">c</name><operator pos:start="73:14" pos:end="73:15">-&gt;</operator><name pos:start="73:16" pos:end="73:18">eof</name></name> <operator pos:start="73:20" pos:end="73:20">=</operator> <literal type="number" pos:start="73:22" pos:end="73:22">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:31"><expr pos:start="75:13" pos:end="75:30"><operator pos:start="75:13" pos:end="75:13">*</operator><name pos:start="75:14" pos:end="75:26">got_frame_ptr</name> <operator pos:start="75:28" pos:end="75:28">=</operator> <literal type="number" pos:start="75:30" pos:end="75:30">0</literal></expr>;</expr_stmt>

            <return pos:start="77:13" pos:end="77:31">return <expr pos:start="77:20" pos:end="77:30"><name pos:start="77:20" pos:end="77:30"><name pos:start="77:20" pos:end="77:24">avpkt</name><operator pos:start="77:25" pos:end="77:26">-&gt;</operator><name pos:start="77:27" pos:end="77:30">size</name></name></expr>;</return>

        </block_content>}</block></if></if_stmt>


    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="86:5" pos:end="86:27">/* get output buffer */</comment>

    <expr_stmt pos:start="88:5" pos:end="88:53"><expr pos:start="88:5" pos:end="88:52"><name pos:start="88:5" pos:end="88:23"><name pos:start="88:5" pos:end="88:5">c</name><operator pos:start="88:6" pos:end="88:7">-&gt;</operator><name pos:start="88:8" pos:end="88:12">frame</name><operator pos:start="88:13" pos:end="88:13">.</operator><name pos:start="88:14" pos:end="88:23">nb_samples</name></name> <operator pos:start="88:25" pos:end="88:25">=</operator> <name pos:start="88:27" pos:end="88:36">num_blocks</name> <operator pos:start="88:38" pos:end="88:38">*</operator> <name pos:start="88:40" pos:end="88:52">BLOCK_SAMPLES</name></expr>;</expr_stmt>

    <if_stmt pos:start="90:5" pos:end="96:5"><if pos:start="90:5" pos:end="96:5">if <condition pos:start="90:8" pos:end="90:56">(<expr pos:start="90:9" pos:end="90:55"><operator pos:start="90:9" pos:end="90:9">(</operator><name pos:start="90:10" pos:end="90:12">ret</name> <operator pos:start="90:14" pos:end="90:14">=</operator> <call pos:start="90:16" pos:end="90:50"><name pos:start="90:16" pos:end="90:32"><name pos:start="90:16" pos:end="90:20">avctx</name><operator pos:start="90:21" pos:end="90:22">-&gt;</operator><name pos:start="90:23" pos:end="90:32">get_buffer</name></name><argument_list pos:start="90:33" pos:end="90:50">(<argument pos:start="90:34" pos:end="90:38"><expr pos:start="90:34" pos:end="90:38"><name pos:start="90:34" pos:end="90:38">avctx</name></expr></argument>, <argument pos:start="90:41" pos:end="90:49"><expr pos:start="90:41" pos:end="90:49"><operator pos:start="90:41" pos:end="90:41">&amp;</operator><name pos:start="90:42" pos:end="90:49"><name pos:start="90:42" pos:end="90:42">c</name><operator pos:start="90:43" pos:end="90:44">-&gt;</operator><name pos:start="90:45" pos:end="90:49">frame</name></name></expr></argument>)</argument_list></call><operator pos:start="90:51" pos:end="90:51">)</operator> <operator pos:start="90:53" pos:end="90:53">&lt;</operator> <literal type="number" pos:start="90:55" pos:end="90:55">0</literal></expr>)</condition> <block pos:start="90:58" pos:end="96:5">{<block_content pos:start="92:9" pos:end="94:19">

        <expr_stmt pos:start="92:9" pos:end="92:61"><expr pos:start="92:9" pos:end="92:60"><call pos:start="92:9" pos:end="92:60"><name pos:start="92:9" pos:end="92:14">av_log</name><argument_list pos:start="92:15" pos:end="92:60">(<argument pos:start="92:16" pos:end="92:20"><expr pos:start="92:16" pos:end="92:20"><name pos:start="92:16" pos:end="92:20">avctx</name></expr></argument>, <argument pos:start="92:23" pos:end="92:34"><expr pos:start="92:23" pos:end="92:34"><name pos:start="92:23" pos:end="92:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="92:37" pos:end="92:59"><expr pos:start="92:37" pos:end="92:59"><literal type="string" pos:start="92:37" pos:end="92:59">"get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="94:9" pos:end="94:19">return <expr pos:start="94:16" pos:end="94:18"><name pos:start="94:16" pos:end="94:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="98:5" pos:end="98:42"><expr pos:start="98:5" pos:end="98:41"><name pos:start="98:5" pos:end="98:11">samples</name> <operator pos:start="98:13" pos:end="98:13">=</operator> <operator pos:start="98:15" pos:end="98:15">(</operator><name pos:start="98:16" pos:end="98:22">int16_t</name> <operator pos:start="98:24" pos:end="98:24">*</operator><operator pos:start="98:25" pos:end="98:25">)</operator><name pos:start="98:26" pos:end="98:41"><name pos:start="98:26" pos:end="98:26">c</name><operator pos:start="98:27" pos:end="98:28">-&gt;</operator><name pos:start="98:29" pos:end="98:33">frame</name><operator pos:start="98:34" pos:end="98:34">.</operator><name pos:start="98:35" pos:end="98:38">data</name><index pos:start="98:39" pos:end="98:41">[<expr pos:start="98:40" pos:end="98:40"><literal type="number" pos:start="98:40" pos:end="98:40">0</literal></expr>]</index></name></expr>;</expr_stmt>



    <while pos:start="102:5" pos:end="124:5">while <condition pos:start="102:11" pos:end="102:24">(<expr pos:start="102:12" pos:end="102:23"><name pos:start="102:12" pos:end="102:21">num_blocks</name><operator pos:start="102:22" pos:end="102:23">--</operator></expr>)</condition> <block pos:start="102:26" pos:end="124:5">{<block_content pos:start="104:9" pos:end="122:47">

        <for pos:start="104:9" pos:end="120:9">for <control pos:start="104:13" pos:end="104:44">(<init pos:start="104:14" pos:end="104:20"><expr pos:start="104:14" pos:end="104:19"><name pos:start="104:14" pos:end="104:15">ch</name> <operator pos:start="104:17" pos:end="104:17">=</operator> <literal type="number" pos:start="104:19" pos:end="104:19">0</literal></expr>;</init> <condition pos:start="104:22" pos:end="104:38"><expr pos:start="104:22" pos:end="104:37"><name pos:start="104:22" pos:end="104:23">ch</name> <operator pos:start="104:25" pos:end="104:25">&lt;</operator> <name pos:start="104:27" pos:end="104:37"><name pos:start="104:27" pos:end="104:27">c</name><operator pos:start="104:28" pos:end="104:29">-&gt;</operator><name pos:start="104:30" pos:end="104:37">channels</name></name></expr>;</condition> <incr pos:start="104:40" pos:end="104:43"><expr pos:start="104:40" pos:end="104:43"><name pos:start="104:40" pos:end="104:41">ch</name><operator pos:start="104:42" pos:end="104:43">++</operator></expr></incr>)</control> <block pos:start="104:46" pos:end="120:9">{<block_content pos:start="106:13" pos:end="118:35">

            <if_stmt pos:start="106:13" pos:end="114:13"><if pos:start="106:13" pos:end="114:13">if <condition pos:start="106:16" pos:end="106:53">(<expr pos:start="106:17" pos:end="106:52"><call pos:start="106:17" pos:end="106:52"><name pos:start="106:17" pos:end="106:26">adx_decode</name><argument_list pos:start="106:27" pos:end="106:52">(<argument pos:start="106:28" pos:end="106:28"><expr pos:start="106:28" pos:end="106:28"><name pos:start="106:28" pos:end="106:28">c</name></expr></argument>, <argument pos:start="106:31" pos:end="106:42"><expr pos:start="106:31" pos:end="106:42"><name pos:start="106:31" pos:end="106:37">samples</name> <operator pos:start="106:39" pos:end="106:39">+</operator> <name pos:start="106:41" pos:end="106:42">ch</name></expr></argument>, <argument pos:start="106:45" pos:end="106:47"><expr pos:start="106:45" pos:end="106:47"><name pos:start="106:45" pos:end="106:47">buf</name></expr></argument>, <argument pos:start="106:50" pos:end="106:51"><expr pos:start="106:50" pos:end="106:51"><name pos:start="106:50" pos:end="106:51">ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="106:55" pos:end="114:13">{<block_content pos:start="108:17" pos:end="112:22">

                <expr_stmt pos:start="108:17" pos:end="108:27"><expr pos:start="108:17" pos:end="108:26"><name pos:start="108:17" pos:end="108:22"><name pos:start="108:17" pos:end="108:17">c</name><operator pos:start="108:18" pos:end="108:19">-&gt;</operator><name pos:start="108:20" pos:end="108:22">eof</name></name> <operator pos:start="108:24" pos:end="108:24">=</operator> <literal type="number" pos:start="108:26" pos:end="108:26">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="110:17" pos:end="110:48"><expr pos:start="110:17" pos:end="110:47"><name pos:start="110:17" pos:end="110:19">buf</name> <operator pos:start="110:21" pos:end="110:21">=</operator> <name pos:start="110:23" pos:end="110:33"><name pos:start="110:23" pos:end="110:27">avpkt</name><operator pos:start="110:28" pos:end="110:29">-&gt;</operator><name pos:start="110:30" pos:end="110:33">data</name></name> <operator pos:start="110:35" pos:end="110:35">+</operator> <name pos:start="110:37" pos:end="110:47"><name pos:start="110:37" pos:end="110:41">avpkt</name><operator pos:start="110:42" pos:end="110:43">-&gt;</operator><name pos:start="110:44" pos:end="110:47">size</name></name></expr>;</expr_stmt>

                <break pos:start="112:17" pos:end="112:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="116:13" pos:end="116:35"><expr pos:start="116:13" pos:end="116:34"><name pos:start="116:13" pos:end="116:20">buf_size</name> <operator pos:start="116:22" pos:end="116:23">-=</operator> <name pos:start="116:25" pos:end="116:34">BLOCK_SIZE</name></expr>;</expr_stmt>

            <expr_stmt pos:start="118:13" pos:end="118:35"><expr pos:start="118:13" pos:end="118:34"><name pos:start="118:13" pos:end="118:15">buf</name>      <operator pos:start="118:22" pos:end="118:23">+=</operator> <name pos:start="118:25" pos:end="118:34">BLOCK_SIZE</name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="122:9" pos:end="122:47"><expr pos:start="122:9" pos:end="122:46"><name pos:start="122:9" pos:end="122:15">samples</name> <operator pos:start="122:17" pos:end="122:18">+=</operator> <name pos:start="122:20" pos:end="122:32">BLOCK_SAMPLES</name> <operator pos:start="122:34" pos:end="122:34">*</operator> <name pos:start="122:36" pos:end="122:46"><name pos:start="122:36" pos:end="122:36">c</name><operator pos:start="122:37" pos:end="122:38">-&gt;</operator><name pos:start="122:39" pos:end="122:46">channels</name></name></expr>;</expr_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="128:5" pos:end="128:25"><expr pos:start="128:5" pos:end="128:24"><operator pos:start="128:5" pos:end="128:5">*</operator><name pos:start="128:6" pos:end="128:18">got_frame_ptr</name>   <operator pos:start="128:22" pos:end="128:22">=</operator> <literal type="number" pos:start="128:24" pos:end="128:24">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="130:5" pos:end="130:32"><expr pos:start="130:5" pos:end="130:31"><operator pos:start="130:5" pos:end="130:5">*</operator><operator pos:start="130:6" pos:end="130:6">(</operator><name pos:start="130:7" pos:end="130:13">AVFrame</name> <operator pos:start="130:15" pos:end="130:15">*</operator><operator pos:start="130:16" pos:end="130:16">)</operator><name pos:start="130:17" pos:end="130:20">data</name> <operator pos:start="130:22" pos:end="130:22">=</operator> <name pos:start="130:24" pos:end="130:31"><name pos:start="130:24" pos:end="130:24">c</name><operator pos:start="130:25" pos:end="130:26">-&gt;</operator><name pos:start="130:27" pos:end="130:31">frame</name></name></expr>;</expr_stmt>



    <return pos:start="134:5" pos:end="134:29">return <expr pos:start="134:12" pos:end="134:28"><name pos:start="134:12" pos:end="134:14">buf</name> <operator pos:start="134:16" pos:end="134:16">-</operator> <name pos:start="134:18" pos:end="134:28"><name pos:start="134:18" pos:end="134:22">avpkt</name><operator pos:start="134:23" pos:end="134:24">-&gt;</operator><name pos:start="134:25" pos:end="134:28">data</name></name></expr>;</return>

</block_content>}</block></function></unit>
