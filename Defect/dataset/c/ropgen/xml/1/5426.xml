<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5426.c" pos:tabs="8"><function pos:start="1:1" pos:end="81:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:33">smacker_decode_bigtree</name><parameter_list pos:start="1:34" pos:end="1:81">(<parameter pos:start="1:35" pos:end="1:51"><decl pos:start="1:35" pos:end="1:51"><type pos:start="1:35" pos:end="1:51"><name pos:start="1:35" pos:end="1:47">GetBitContext</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:51">gb</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:68"><decl pos:start="1:54" pos:end="1:68"><type pos:start="1:54" pos:end="1:68"><name pos:start="1:54" pos:end="1:64">HuffContext</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:68">hc</name></decl></parameter>, <parameter pos:start="1:71" pos:end="1:80"><decl pos:start="1:71" pos:end="1:80"><type pos:start="1:71" pos:end="1:80"><name pos:start="1:71" pos:end="1:75">DBCtx</name> <modifier pos:start="1:77" pos:end="1:77">*</modifier></type><name pos:start="1:78" pos:end="1:80">ctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="81:1">{<block_content pos:start="5:5" pos:end="79:5">

    <if_stmt pos:start="5:5" pos:end="11:5"><if pos:start="5:5" pos:end="11:5">if <condition pos:start="5:8" pos:end="5:38">(<expr pos:start="5:9" pos:end="5:37"><name pos:start="5:9" pos:end="5:19"><name pos:start="5:9" pos:end="5:10">hc</name><operator pos:start="5:11" pos:end="5:12">-&gt;</operator><name pos:start="5:13" pos:end="5:19">current</name></name> <operator pos:start="5:21" pos:end="5:21">+</operator> <literal type="number" pos:start="5:23" pos:end="5:23">1</literal> <operator pos:start="5:25" pos:end="5:26">&gt;=</operator> <name pos:start="5:28" pos:end="5:37"><name pos:start="5:28" pos:end="5:29">hc</name><operator pos:start="5:30" pos:end="5:31">-&gt;</operator><name pos:start="5:32" pos:end="5:37">length</name></name></expr>)</condition> <block pos:start="5:40" pos:end="11:5">{<block_content pos:start="7:9" pos:end="9:35">

        <expr_stmt pos:start="7:9" pos:end="7:60"><expr pos:start="7:9" pos:end="7:59"><call pos:start="7:9" pos:end="7:59"><name pos:start="7:9" pos:end="7:14">av_log</name><argument_list pos:start="7:15" pos:end="7:59">(<argument pos:start="7:16" pos:end="7:19"><expr pos:start="7:16" pos:end="7:19"><name pos:start="7:16" pos:end="7:19">NULL</name></expr></argument>, <argument pos:start="7:22" pos:end="7:33"><expr pos:start="7:22" pos:end="7:33"><name pos:start="7:22" pos:end="7:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="7:36" pos:end="7:58"><expr pos:start="7:36" pos:end="7:58"><literal type="string" pos:start="7:36" pos:end="7:58">"Tree size exceeded!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="9:9" pos:end="9:35">return <expr pos:start="9:16" pos:end="9:34"><name pos:start="9:16" pos:end="9:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="13:5" pos:end="79:5"><if pos:start="13:5" pos:end="53:5">if<condition pos:start="13:7" pos:end="13:22">(<expr pos:start="13:8" pos:end="13:21"><operator pos:start="13:8" pos:end="13:8">!</operator><call pos:start="13:9" pos:end="13:21"><name pos:start="13:9" pos:end="13:17">get_bits1</name><argument_list pos:start="13:18" pos:end="13:21">(<argument pos:start="13:19" pos:end="13:20"><expr pos:start="13:19" pos:end="13:20"><name pos:start="13:19" pos:end="13:20">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="13:23" pos:end="53:5">{<block_content pos:start="15:9" pos:end="51:17"> <comment type="line" pos:start="13:25" pos:end="13:30">//Leaf</comment>

        <decl_stmt pos:start="15:9" pos:end="15:24"><decl pos:start="15:9" pos:end="15:15"><type pos:start="15:9" pos:end="15:11"><name pos:start="15:9" pos:end="15:11">int</name></type> <name pos:start="15:13" pos:end="15:15">val</name></decl>, <decl pos:start="15:18" pos:end="15:19"><type ref="prev" pos:start="15:9" pos:end="15:11"/><name pos:start="15:18" pos:end="15:19">i1</name></decl>, <decl pos:start="15:22" pos:end="15:23"><type ref="prev" pos:start="15:9" pos:end="15:11"/><name pos:start="15:22" pos:end="15:23">i2</name></decl>;</decl_stmt>

        <expr_stmt pos:start="17:9" pos:end="17:80"><expr pos:start="17:9" pos:end="17:79"><name pos:start="17:9" pos:end="17:10">i1</name> <operator pos:start="17:12" pos:end="17:12">=</operator> <ternary pos:start="17:14" pos:end="17:79"><condition pos:start="17:14" pos:end="17:29"><expr pos:start="17:14" pos:end="17:27"><name pos:start="17:14" pos:end="17:27"><name pos:start="17:14" pos:end="17:16">ctx</name><operator pos:start="17:17" pos:end="17:18">-&gt;</operator><name pos:start="17:19" pos:end="17:20">v1</name><operator pos:start="17:21" pos:end="17:22">-&gt;</operator><name pos:start="17:23" pos:end="17:27">table</name></name></expr> ?</condition><then pos:start="17:31" pos:end="17:75"> <expr pos:start="17:31" pos:end="17:75"><call pos:start="17:31" pos:end="17:75"><name pos:start="17:31" pos:end="17:38">get_vlc2</name><argument_list pos:start="17:39" pos:end="17:75">(<argument pos:start="17:40" pos:end="17:41"><expr pos:start="17:40" pos:end="17:41"><name pos:start="17:40" pos:end="17:41">gb</name></expr></argument>, <argument pos:start="17:44" pos:end="17:57"><expr pos:start="17:44" pos:end="17:57"><name pos:start="17:44" pos:end="17:57"><name pos:start="17:44" pos:end="17:46">ctx</name><operator pos:start="17:47" pos:end="17:48">-&gt;</operator><name pos:start="17:49" pos:end="17:50">v1</name><operator pos:start="17:51" pos:end="17:52">-&gt;</operator><name pos:start="17:53" pos:end="17:57">table</name></name></expr></argument>, <argument pos:start="17:60" pos:end="17:71"><expr pos:start="17:60" pos:end="17:71"><name pos:start="17:60" pos:end="17:71">SMKTREE_BITS</name></expr></argument>, <argument pos:start="17:74" pos:end="17:74"><expr pos:start="17:74" pos:end="17:74"><literal type="number" pos:start="17:74" pos:end="17:74">3</literal></expr></argument>)</argument_list></call></expr> </then><else pos:start="17:77" pos:end="17:79">: <expr pos:start="17:79" pos:end="17:79"><literal type="number" pos:start="17:79" pos:end="17:79">0</literal></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:80"><expr pos:start="19:9" pos:end="19:79"><name pos:start="19:9" pos:end="19:10">i2</name> <operator pos:start="19:12" pos:end="19:12">=</operator> <ternary pos:start="19:14" pos:end="19:79"><condition pos:start="19:14" pos:end="19:29"><expr pos:start="19:14" pos:end="19:27"><name pos:start="19:14" pos:end="19:27"><name pos:start="19:14" pos:end="19:16">ctx</name><operator pos:start="19:17" pos:end="19:18">-&gt;</operator><name pos:start="19:19" pos:end="19:20">v2</name><operator pos:start="19:21" pos:end="19:22">-&gt;</operator><name pos:start="19:23" pos:end="19:27">table</name></name></expr> ?</condition><then pos:start="19:31" pos:end="19:75"> <expr pos:start="19:31" pos:end="19:75"><call pos:start="19:31" pos:end="19:75"><name pos:start="19:31" pos:end="19:38">get_vlc2</name><argument_list pos:start="19:39" pos:end="19:75">(<argument pos:start="19:40" pos:end="19:41"><expr pos:start="19:40" pos:end="19:41"><name pos:start="19:40" pos:end="19:41">gb</name></expr></argument>, <argument pos:start="19:44" pos:end="19:57"><expr pos:start="19:44" pos:end="19:57"><name pos:start="19:44" pos:end="19:57"><name pos:start="19:44" pos:end="19:46">ctx</name><operator pos:start="19:47" pos:end="19:48">-&gt;</operator><name pos:start="19:49" pos:end="19:50">v2</name><operator pos:start="19:51" pos:end="19:52">-&gt;</operator><name pos:start="19:53" pos:end="19:57">table</name></name></expr></argument>, <argument pos:start="19:60" pos:end="19:71"><expr pos:start="19:60" pos:end="19:71"><name pos:start="19:60" pos:end="19:71">SMKTREE_BITS</name></expr></argument>, <argument pos:start="19:74" pos:end="19:74"><expr pos:start="19:74" pos:end="19:74"><literal type="number" pos:start="19:74" pos:end="19:74">3</literal></expr></argument>)</argument_list></call></expr> </then><else pos:start="19:77" pos:end="19:79">: <expr pos:start="19:79" pos:end="19:79"><literal type="number" pos:start="19:79" pos:end="19:79">0</literal></expr></else></ternary></expr>;</expr_stmt>

        <if_stmt pos:start="21:9" pos:end="23:39"><if pos:start="21:9" pos:end="23:39">if <condition pos:start="21:12" pos:end="21:29">(<expr pos:start="21:13" pos:end="21:28"><name pos:start="21:13" pos:end="21:14">i1</name> <operator pos:start="21:16" pos:end="21:16">&lt;</operator> <literal type="number" pos:start="21:18" pos:end="21:18">0</literal> <operator pos:start="21:20" pos:end="21:21">||</operator> <name pos:start="21:23" pos:end="21:24">i2</name> <operator pos:start="21:26" pos:end="21:26">&lt;</operator> <literal type="number" pos:start="21:28" pos:end="21:28">0</literal></expr>)</condition><block type="pseudo" pos:start="23:13" pos:end="23:39"><block_content pos:start="23:13" pos:end="23:39">

            <return pos:start="23:13" pos:end="23:39">return <expr pos:start="23:20" pos:end="23:38"><name pos:start="23:20" pos:end="23:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:57"><expr pos:start="25:9" pos:end="25:56"><name pos:start="25:9" pos:end="25:11">val</name> <operator pos:start="25:13" pos:end="25:13">=</operator> <name pos:start="25:15" pos:end="25:30"><name pos:start="25:15" pos:end="25:17">ctx</name><operator pos:start="25:18" pos:end="25:19">-&gt;</operator><name pos:start="25:20" pos:end="25:26">recode1</name><index pos:start="25:27" pos:end="25:30">[<expr pos:start="25:28" pos:end="25:29"><name pos:start="25:28" pos:end="25:29">i1</name></expr>]</index></name> <operator pos:start="25:32" pos:end="25:32">|</operator> <operator pos:start="25:34" pos:end="25:34">(</operator><name pos:start="25:35" pos:end="25:50"><name pos:start="25:35" pos:end="25:37">ctx</name><operator pos:start="25:38" pos:end="25:39">-&gt;</operator><name pos:start="25:40" pos:end="25:46">recode2</name><index pos:start="25:47" pos:end="25:50">[<expr pos:start="25:48" pos:end="25:49"><name pos:start="25:48" pos:end="25:49">i2</name></expr>]</index></name> <operator pos:start="25:52" pos:end="25:53">&lt;&lt;</operator> <literal type="number" pos:start="25:55" pos:end="25:55">8</literal><operator pos:start="25:56" pos:end="25:56">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="27:9" pos:end="45:9"><if pos:start="27:9" pos:end="33:9">if<condition pos:start="27:11" pos:end="27:34">(<expr pos:start="27:12" pos:end="27:33"><name pos:start="27:12" pos:end="27:14">val</name> <operator pos:start="27:16" pos:end="27:17">==</operator> <name pos:start="27:19" pos:end="27:33"><name pos:start="27:19" pos:end="27:21">ctx</name><operator pos:start="27:22" pos:end="27:23">-&gt;</operator><name pos:start="27:24" pos:end="27:30">escapes</name><index pos:start="27:31" pos:end="27:33">[<expr pos:start="27:32" pos:end="27:32"><literal type="number" pos:start="27:32" pos:end="27:32">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="27:36" pos:end="33:9">{<block_content pos:start="29:13" pos:end="31:20">

            <expr_stmt pos:start="29:13" pos:end="29:39"><expr pos:start="29:13" pos:end="29:38"><name pos:start="29:13" pos:end="29:24"><name pos:start="29:13" pos:end="29:15">ctx</name><operator pos:start="29:16" pos:end="29:17">-&gt;</operator><name pos:start="29:18" pos:end="29:21">last</name><index pos:start="29:22" pos:end="29:24">[<expr pos:start="29:23" pos:end="29:23"><literal type="number" pos:start="29:23" pos:end="29:23">0</literal></expr>]</index></name> <operator pos:start="29:26" pos:end="29:26">=</operator> <name pos:start="29:28" pos:end="29:38"><name pos:start="29:28" pos:end="29:29">hc</name><operator pos:start="29:30" pos:end="29:31">-&gt;</operator><name pos:start="29:32" pos:end="29:38">current</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="31:13" pos:end="31:20"><expr pos:start="31:13" pos:end="31:19"><name pos:start="31:13" pos:end="31:15">val</name> <operator pos:start="31:17" pos:end="31:17">=</operator> <literal type="number" pos:start="31:19" pos:end="31:19">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="33:11" pos:end="39:9">else if<condition pos:start="33:18" pos:end="33:41">(<expr pos:start="33:19" pos:end="33:40"><name pos:start="33:19" pos:end="33:21">val</name> <operator pos:start="33:23" pos:end="33:24">==</operator> <name pos:start="33:26" pos:end="33:40"><name pos:start="33:26" pos:end="33:28">ctx</name><operator pos:start="33:29" pos:end="33:30">-&gt;</operator><name pos:start="33:31" pos:end="33:37">escapes</name><index pos:start="33:38" pos:end="33:40">[<expr pos:start="33:39" pos:end="33:39"><literal type="number" pos:start="33:39" pos:end="33:39">1</literal></expr>]</index></name></expr>)</condition> <block pos:start="33:43" pos:end="39:9">{<block_content pos:start="35:13" pos:end="37:20">

            <expr_stmt pos:start="35:13" pos:end="35:39"><expr pos:start="35:13" pos:end="35:38"><name pos:start="35:13" pos:end="35:24"><name pos:start="35:13" pos:end="35:15">ctx</name><operator pos:start="35:16" pos:end="35:17">-&gt;</operator><name pos:start="35:18" pos:end="35:21">last</name><index pos:start="35:22" pos:end="35:24">[<expr pos:start="35:23" pos:end="35:23"><literal type="number" pos:start="35:23" pos:end="35:23">1</literal></expr>]</index></name> <operator pos:start="35:26" pos:end="35:26">=</operator> <name pos:start="35:28" pos:end="35:38"><name pos:start="35:28" pos:end="35:29">hc</name><operator pos:start="35:30" pos:end="35:31">-&gt;</operator><name pos:start="35:32" pos:end="35:38">current</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:20"><expr pos:start="37:13" pos:end="37:19"><name pos:start="37:13" pos:end="37:15">val</name> <operator pos:start="37:17" pos:end="37:17">=</operator> <literal type="number" pos:start="37:19" pos:end="37:19">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="39:11" pos:end="45:9">else if<condition pos:start="39:18" pos:end="39:41">(<expr pos:start="39:19" pos:end="39:40"><name pos:start="39:19" pos:end="39:21">val</name> <operator pos:start="39:23" pos:end="39:24">==</operator> <name pos:start="39:26" pos:end="39:40"><name pos:start="39:26" pos:end="39:28">ctx</name><operator pos:start="39:29" pos:end="39:30">-&gt;</operator><name pos:start="39:31" pos:end="39:37">escapes</name><index pos:start="39:38" pos:end="39:40">[<expr pos:start="39:39" pos:end="39:39"><literal type="number" pos:start="39:39" pos:end="39:39">2</literal></expr>]</index></name></expr>)</condition> <block pos:start="39:43" pos:end="45:9">{<block_content pos:start="41:13" pos:end="43:20">

            <expr_stmt pos:start="41:13" pos:end="41:39"><expr pos:start="41:13" pos:end="41:38"><name pos:start="41:13" pos:end="41:24"><name pos:start="41:13" pos:end="41:15">ctx</name><operator pos:start="41:16" pos:end="41:17">-&gt;</operator><name pos:start="41:18" pos:end="41:21">last</name><index pos:start="41:22" pos:end="41:24">[<expr pos:start="41:23" pos:end="41:23"><literal type="number" pos:start="41:23" pos:end="41:23">2</literal></expr>]</index></name> <operator pos:start="41:26" pos:end="41:26">=</operator> <name pos:start="41:28" pos:end="41:38"><name pos:start="41:28" pos:end="41:29">hc</name><operator pos:start="41:30" pos:end="41:31">-&gt;</operator><name pos:start="41:32" pos:end="41:38">current</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:20"><expr pos:start="43:13" pos:end="43:19"><name pos:start="43:13" pos:end="43:15">val</name> <operator pos:start="43:17" pos:end="43:17">=</operator> <literal type="number" pos:start="43:19" pos:end="43:19">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="49:9" pos:end="49:40"><expr pos:start="49:9" pos:end="49:39"><name pos:start="49:9" pos:end="49:33"><name pos:start="49:9" pos:end="49:10">hc</name><operator pos:start="49:11" pos:end="49:12">-&gt;</operator><name pos:start="49:13" pos:end="49:18">values</name><index pos:start="49:19" pos:end="49:33">[<expr pos:start="49:20" pos:end="49:32"><name pos:start="49:20" pos:end="49:30"><name pos:start="49:20" pos:end="49:21">hc</name><operator pos:start="49:22" pos:end="49:23">-&gt;</operator><name pos:start="49:24" pos:end="49:30">current</name></name><operator pos:start="49:31" pos:end="49:32">++</operator></expr>]</index></name> <operator pos:start="49:35" pos:end="49:35">=</operator> <name pos:start="49:37" pos:end="49:39">val</name></expr>;</expr_stmt>

        <return pos:start="51:9" pos:end="51:17">return <expr pos:start="51:16" pos:end="51:16"><literal type="number" pos:start="51:16" pos:end="51:16">1</literal></expr>;</return>

    </block_content>}</block></if> <else pos:start="53:7" pos:end="79:5">else <block pos:start="53:12" pos:end="79:5">{<block_content pos:start="55:9" pos:end="77:25"> <comment type="line" pos:start="53:14" pos:end="53:19">//Node</comment>

        <decl_stmt pos:start="55:9" pos:end="55:28"><decl pos:start="55:9" pos:end="55:17"><type pos:start="55:9" pos:end="55:11"><name pos:start="55:9" pos:end="55:11">int</name></type> <name pos:start="55:13" pos:end="55:13">r</name> <init pos:start="55:15" pos:end="55:17">= <expr pos:start="55:17" pos:end="55:17"><literal type="number" pos:start="55:17" pos:end="55:17">0</literal></expr></init></decl>, <decl pos:start="55:20" pos:end="55:24"><type ref="prev" pos:start="55:9" pos:end="55:11"/><name pos:start="55:20" pos:end="55:24">r_new</name></decl>, <decl pos:start="55:27" pos:end="55:27"><type ref="prev" pos:start="55:9" pos:end="55:11"/><name pos:start="55:27" pos:end="55:27">t</name></decl>;</decl_stmt>



        <expr_stmt pos:start="59:9" pos:end="59:26"><expr pos:start="59:9" pos:end="59:25"><name pos:start="59:9" pos:end="59:9">t</name> <operator pos:start="59:11" pos:end="59:11">=</operator> <name pos:start="59:13" pos:end="59:23"><name pos:start="59:13" pos:end="59:14">hc</name><operator pos:start="59:15" pos:end="59:16">-&gt;</operator><name pos:start="59:17" pos:end="59:23">current</name></name><operator pos:start="59:24" pos:end="59:25">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:48"><expr pos:start="61:9" pos:end="61:47"><name pos:start="61:9" pos:end="61:9">r</name> <operator pos:start="61:11" pos:end="61:11">=</operator> <call pos:start="61:13" pos:end="61:47"><name pos:start="61:13" pos:end="61:34">smacker_decode_bigtree</name><argument_list pos:start="61:35" pos:end="61:47">(<argument pos:start="61:36" pos:end="61:37"><expr pos:start="61:36" pos:end="61:37"><name pos:start="61:36" pos:end="61:37">gb</name></expr></argument>, <argument pos:start="61:40" pos:end="61:41"><expr pos:start="61:40" pos:end="61:41"><name pos:start="61:40" pos:end="61:41">hc</name></expr></argument>, <argument pos:start="61:44" pos:end="61:46"><expr pos:start="61:44" pos:end="61:46"><name pos:start="61:44" pos:end="61:46">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="63:9" pos:end="65:21"><if pos:start="63:9" pos:end="65:21">if<condition pos:start="63:11" pos:end="63:17">(<expr pos:start="63:12" pos:end="63:16"><name pos:start="63:12" pos:end="63:12">r</name> <operator pos:start="63:14" pos:end="63:14">&lt;</operator> <literal type="number" pos:start="63:16" pos:end="63:16">0</literal></expr>)</condition><block type="pseudo" pos:start="65:13" pos:end="65:21"><block_content pos:start="65:13" pos:end="65:21">

            <return pos:start="65:13" pos:end="65:21">return <expr pos:start="65:20" pos:end="65:20"><name pos:start="65:20" pos:end="65:20">r</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:37"><expr pos:start="67:9" pos:end="67:36"><name pos:start="67:9" pos:end="67:21"><name pos:start="67:9" pos:end="67:10">hc</name><operator pos:start="67:11" pos:end="67:12">-&gt;</operator><name pos:start="67:13" pos:end="67:18">values</name><index pos:start="67:19" pos:end="67:21">[<expr pos:start="67:20" pos:end="67:20"><name pos:start="67:20" pos:end="67:20">t</name></expr>]</index></name> <operator pos:start="67:23" pos:end="67:23">=</operator> <name pos:start="67:25" pos:end="67:32">SMK_NODE</name> <operator pos:start="67:34" pos:end="67:34">|</operator> <name pos:start="67:36" pos:end="67:36">r</name></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:12"><expr pos:start="69:9" pos:end="69:11"><name pos:start="69:9" pos:end="69:9">r</name><operator pos:start="69:10" pos:end="69:11">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:52"><expr pos:start="71:9" pos:end="71:51"><name pos:start="71:9" pos:end="71:13">r_new</name> <operator pos:start="71:15" pos:end="71:15">=</operator> <call pos:start="71:17" pos:end="71:51"><name pos:start="71:17" pos:end="71:38">smacker_decode_bigtree</name><argument_list pos:start="71:39" pos:end="71:51">(<argument pos:start="71:40" pos:end="71:41"><expr pos:start="71:40" pos:end="71:41"><name pos:start="71:40" pos:end="71:41">gb</name></expr></argument>, <argument pos:start="71:44" pos:end="71:45"><expr pos:start="71:44" pos:end="71:45"><name pos:start="71:44" pos:end="71:45">hc</name></expr></argument>, <argument pos:start="71:48" pos:end="71:50"><expr pos:start="71:48" pos:end="71:50"><name pos:start="71:48" pos:end="71:50">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="73:9" pos:end="75:25"><if pos:start="73:9" pos:end="75:25">if <condition pos:start="73:12" pos:end="73:22">(<expr pos:start="73:13" pos:end="73:21"><name pos:start="73:13" pos:end="73:17">r_new</name> <operator pos:start="73:19" pos:end="73:19">&lt;</operator> <literal type="number" pos:start="73:21" pos:end="73:21">0</literal></expr>)</condition><block type="pseudo" pos:start="75:13" pos:end="75:25"><block_content pos:start="75:13" pos:end="75:25">

            <return pos:start="75:13" pos:end="75:25">return <expr pos:start="75:20" pos:end="75:24"><name pos:start="75:20" pos:end="75:24">r_new</name></expr>;</return></block_content></block></if></if_stmt>

        <return pos:start="77:9" pos:end="77:25">return <expr pos:start="77:16" pos:end="77:24"><name pos:start="77:16" pos:end="77:16">r</name> <operator pos:start="77:18" pos:end="77:18">+</operator> <name pos:start="77:20" pos:end="77:24">r_new</name></expr>;</return>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
