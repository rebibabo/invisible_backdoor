<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21655.c" pos:tabs="8"><function pos:start="1:1" pos:end="299:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:39">libschroedinger_decode_frame</name><parameter_list pos:start="1:40" pos:end="5:56">(<parameter pos:start="1:41" pos:end="1:61"><decl pos:start="1:41" pos:end="1:61"><type pos:start="1:41" pos:end="1:61"><name pos:start="1:41" pos:end="1:54">AVCodecContext</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:61">avctx</name></decl></parameter>,

                                        <parameter pos:start="3:41" pos:end="3:50"><decl pos:start="3:41" pos:end="3:50"><type pos:start="3:41" pos:end="3:50"><name pos:start="3:41" pos:end="3:44">void</name> <modifier pos:start="3:46" pos:end="3:46">*</modifier></type><name pos:start="3:47" pos:end="3:50">data</name></decl></parameter>, <parameter pos:start="3:53" pos:end="3:66"><decl pos:start="3:53" pos:end="3:66"><type pos:start="3:53" pos:end="3:66"><name pos:start="3:53" pos:end="3:55">int</name> <modifier pos:start="3:57" pos:end="3:57">*</modifier></type><name pos:start="3:58" pos:end="3:66">got_frame</name></decl></parameter>,

                                        <parameter pos:start="5:41" pos:end="5:55"><decl pos:start="5:41" pos:end="5:55"><type pos:start="5:41" pos:end="5:55"><name pos:start="5:41" pos:end="5:48">AVPacket</name> <modifier pos:start="5:50" pos:end="5:50">*</modifier></type><name pos:start="5:51" pos:end="5:55">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="299:1">{<block_content pos:start="9:5" pos:end="297:15">

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">buf</name> <init pos:start="9:24" pos:end="9:36">= <expr pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:30">avpkt</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">buf_size</name> <init pos:start="11:18" pos:end="11:30">= <expr pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:24">avpkt</name><operator pos:start="11:25" pos:end="11:26">-&gt;</operator><name pos:start="11:27" pos:end="11:30">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:30"><decl pos:start="13:5" pos:end="13:29"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">int64_t</name></type> <name pos:start="13:13" pos:end="13:15">pts</name>  <init pos:start="13:18" pos:end="13:29">= <expr pos:start="13:20" pos:end="13:29"><name pos:start="13:20" pos:end="13:29"><name pos:start="13:20" pos:end="13:24">avpkt</name><operator pos:start="13:25" pos:end="13:26">-&gt;</operator><name pos:start="13:27" pos:end="13:29">pts</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:17"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:12">SchroTag</name> <modifier pos:start="15:14" pos:end="15:14">*</modifier></type><name pos:start="15:15" pos:end="15:17">tag</name></decl>;</decl_stmt>



    <decl_stmt pos:start="19:5" pos:end="19:58"><decl pos:start="19:5" pos:end="19:57"><type pos:start="19:5" pos:end="19:24"><name pos:start="19:5" pos:end="19:22">SchroDecoderParams</name> <modifier pos:start="19:24" pos:end="19:24">*</modifier></type><name pos:start="19:25" pos:end="19:38">p_schro_params</name> <init pos:start="19:40" pos:end="19:57">= <expr pos:start="19:42" pos:end="19:57"><name pos:start="19:42" pos:end="19:57"><name pos:start="19:42" pos:end="19:46">avctx</name><operator pos:start="19:47" pos:end="19:48">-&gt;</operator><name pos:start="19:49" pos:end="19:57">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:52"><decl pos:start="21:5" pos:end="21:51"><type pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:16">SchroDecoder</name> <modifier pos:start="21:18" pos:end="21:18">*</modifier></type><name pos:start="21:19" pos:end="21:25">decoder</name> <init pos:start="21:27" pos:end="21:51">= <expr pos:start="21:29" pos:end="21:51"><name pos:start="21:29" pos:end="21:51"><name pos:start="21:29" pos:end="21:42">p_schro_params</name><operator pos:start="21:43" pos:end="21:44">-&gt;</operator><name pos:start="21:45" pos:end="21:51">decoder</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:25"><decl pos:start="23:5" pos:end="23:24"><type pos:start="23:5" pos:end="23:17"><name pos:start="23:5" pos:end="23:15">SchroBuffer</name> <modifier pos:start="23:17" pos:end="23:17">*</modifier></type><name pos:start="23:18" pos:end="23:24">enc_buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:22"><decl pos:start="25:5" pos:end="25:21"><type pos:start="25:5" pos:end="25:15"><name pos:start="25:5" pos:end="25:14">SchroFrame</name><modifier pos:start="25:15" pos:end="25:15">*</modifier></type> <name pos:start="25:17" pos:end="25:21">frame</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:28"><decl pos:start="27:5" pos:end="27:27"><type pos:start="27:5" pos:end="27:13"><name pos:start="27:5" pos:end="27:11">AVFrame</name> <modifier pos:start="27:13" pos:end="27:13">*</modifier></type><name pos:start="27:14" pos:end="27:20">avframe</name> <init pos:start="27:22" pos:end="27:27">= <expr pos:start="27:24" pos:end="27:27"><name pos:start="27:24" pos:end="27:27">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:14"><decl pos:start="29:5" pos:end="29:13"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:13">state</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:15"><decl pos:start="31:5" pos:end="31:14"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:10">go</name> <init pos:start="31:12" pos:end="31:14">= <expr pos:start="31:14" pos:end="31:14"><literal type="number" pos:start="31:14" pos:end="31:14">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:18"><decl pos:start="33:5" pos:end="33:17"><type pos:start="33:5" pos:end="33:7"><name pos:start="33:5" pos:end="33:7">int</name></type> <name pos:start="33:9" pos:end="33:13">outer</name> <init pos:start="33:15" pos:end="33:17">= <expr pos:start="33:17" pos:end="33:17"><literal type="number" pos:start="33:17" pos:end="33:17">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:36"><decl pos:start="35:5" pos:end="35:35"><type pos:start="35:5" pos:end="35:25"><name pos:start="35:5" pos:end="35:25">SchroParseUnitContext</name></type> <name pos:start="35:27" pos:end="35:35">parse_ctx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:46"><decl pos:start="37:5" pos:end="37:45"><type pos:start="37:5" pos:end="37:26"><name pos:start="37:5" pos:end="37:24">LibSchroFrameContext</name> <modifier pos:start="37:26" pos:end="37:26">*</modifier></type><name pos:start="37:27" pos:end="37:38">framewithpts</name> <init pos:start="37:40" pos:end="37:45">= <expr pos:start="37:42" pos:end="37:45"><name pos:start="37:42" pos:end="37:45">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:12"><decl pos:start="39:5" pos:end="39:11"><type pos:start="39:5" pos:end="39:7"><name pos:start="39:5" pos:end="39:7">int</name></type> <name pos:start="39:9" pos:end="39:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:19"><expr pos:start="43:5" pos:end="43:18"><operator pos:start="43:5" pos:end="43:5">*</operator><name pos:start="43:6" pos:end="43:14">got_frame</name> <operator pos:start="43:16" pos:end="43:16">=</operator> <literal type="number" pos:start="43:18" pos:end="43:18">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:50"><expr pos:start="47:5" pos:end="47:49"><call pos:start="47:5" pos:end="47:49"><name pos:start="47:5" pos:end="47:22">parse_context_init</name><argument_list pos:start="47:23" pos:end="47:49">(<argument pos:start="47:24" pos:end="47:33"><expr pos:start="47:24" pos:end="47:33"><operator pos:start="47:24" pos:end="47:24">&amp;</operator><name pos:start="47:25" pos:end="47:33">parse_ctx</name></expr></argument>, <argument pos:start="47:36" pos:end="47:38"><expr pos:start="47:36" pos:end="47:38"><name pos:start="47:36" pos:end="47:38">buf</name></expr></argument>, <argument pos:start="47:41" pos:end="47:48"><expr pos:start="47:41" pos:end="47:48"><name pos:start="47:41" pos:end="47:48">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="59:5"><if pos:start="49:5" pos:end="59:5">if <condition pos:start="49:8" pos:end="49:18">(<expr pos:start="49:9" pos:end="49:17"><operator pos:start="49:9" pos:end="49:9">!</operator><name pos:start="49:10" pos:end="49:17">buf_size</name></expr>)</condition> <block pos:start="49:20" pos:end="59:5">{<block_content pos:start="51:9" pos:end="57:9">

        <if_stmt pos:start="51:9" pos:end="57:9"><if pos:start="51:9" pos:end="57:9">if <condition pos:start="51:12" pos:end="51:43">(<expr pos:start="51:13" pos:end="51:42"><operator pos:start="51:13" pos:end="51:13">!</operator><name pos:start="51:14" pos:end="51:42"><name pos:start="51:14" pos:end="51:27">p_schro_params</name><operator pos:start="51:28" pos:end="51:29">-&gt;</operator><name pos:start="51:30" pos:end="51:42">eos_signalled</name></name></expr>)</condition> <block pos:start="51:45" pos:end="57:9">{<block_content pos:start="53:13" pos:end="55:46">

            <expr_stmt pos:start="53:13" pos:end="53:62"><expr pos:start="53:13" pos:end="53:61"><name pos:start="53:13" pos:end="53:17">state</name> <operator pos:start="53:19" pos:end="53:19">=</operator> <call pos:start="53:21" pos:end="53:61"><name pos:start="53:21" pos:end="53:52">schro_decoder_push_end_of_stream</name><argument_list pos:start="53:53" pos:end="53:61">(<argument pos:start="53:54" pos:end="53:60"><expr pos:start="53:54" pos:end="53:60"><name pos:start="53:54" pos:end="53:60">decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:46"><expr pos:start="55:13" pos:end="55:45"><name pos:start="55:13" pos:end="55:41"><name pos:start="55:13" pos:end="55:26">p_schro_params</name><operator pos:start="55:27" pos:end="55:28">-&gt;</operator><name pos:start="55:29" pos:end="55:41">eos_signalled</name></name> <operator pos:start="55:43" pos:end="55:43">=</operator> <literal type="number" pos:start="55:45" pos:end="55:45">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="63:5" pos:end="63:73">/* Loop through all the individual parse units in the input buffer */</comment>

    <do pos:start="65:5" pos:end="209:20">do <block pos:start="65:8" pos:end="209:5">{<block_content pos:start="67:9" pos:end="207:9">

        <if_stmt pos:start="67:9" pos:end="101:22"><if pos:start="67:9" pos:end="99:9">if <condition pos:start="67:12" pos:end="67:57">(<expr pos:start="67:13" pos:end="67:56"><operator pos:start="67:13" pos:end="67:13">(</operator><name pos:start="67:14" pos:end="67:20">enc_buf</name> <operator pos:start="67:22" pos:end="67:22">=</operator> <call pos:start="67:24" pos:end="67:55"><name pos:start="67:24" pos:end="67:43">find_next_parse_unit</name><argument_list pos:start="67:44" pos:end="67:55">(<argument pos:start="67:45" pos:end="67:54"><expr pos:start="67:45" pos:end="67:54"><operator pos:start="67:45" pos:end="67:45">&amp;</operator><name pos:start="67:46" pos:end="67:54">parse_ctx</name></expr></argument>)</argument_list></call><operator pos:start="67:56" pos:end="67:56">)</operator></expr>)</condition> <block pos:start="67:59" pos:end="99:9">{<block_content pos:start="71:13" pos:end="97:19">

            <comment type="block" pos:start="69:13" pos:end="69:73">/* Set Schrotag with the pts to be recovered after decoding*/</comment>

            <expr_stmt pos:start="71:13" pos:end="71:78"><expr pos:start="71:13" pos:end="71:77"><name pos:start="71:13" pos:end="71:24"><name pos:start="71:13" pos:end="71:19">enc_buf</name><operator pos:start="71:20" pos:end="71:21">-&gt;</operator><name pos:start="71:22" pos:end="71:24">tag</name></name> <operator pos:start="71:26" pos:end="71:26">=</operator> <call pos:start="71:28" pos:end="71:77"><name pos:start="71:28" pos:end="71:40">schro_tag_new</name><argument_list pos:start="71:41" pos:end="71:77">(<argument pos:start="71:42" pos:end="71:67"><expr pos:start="71:42" pos:end="71:67"><call pos:start="71:42" pos:end="71:67"><name pos:start="71:42" pos:end="71:50">av_malloc</name><argument_list pos:start="71:51" pos:end="71:67">(<argument pos:start="71:52" pos:end="71:66"><expr pos:start="71:52" pos:end="71:66"><sizeof pos:start="71:52" pos:end="71:66">sizeof<argument_list pos:start="71:58" pos:end="71:66">(<argument pos:start="71:59" pos:end="71:65"><expr pos:start="71:59" pos:end="71:65"><name pos:start="71:59" pos:end="71:65">int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="71:70" pos:end="71:76"><expr pos:start="71:70" pos:end="71:76"><name pos:start="71:70" pos:end="71:76">av_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="73:13" pos:end="79:13"><if pos:start="73:13" pos:end="79:13">if <condition pos:start="73:16" pos:end="73:37">(<expr pos:start="73:17" pos:end="73:36"><operator pos:start="73:17" pos:end="73:17">!</operator><name pos:start="73:18" pos:end="73:36"><name pos:start="73:18" pos:end="73:24">enc_buf</name><operator pos:start="73:25" pos:end="73:26">-&gt;</operator><name pos:start="73:27" pos:end="73:29">tag</name><operator pos:start="73:30" pos:end="73:31">-&gt;</operator><name pos:start="73:32" pos:end="73:36">value</name></name></expr>)</condition> <block pos:start="73:39" pos:end="79:13">{<block_content pos:start="75:17" pos:end="77:39">

                <expr_stmt pos:start="75:17" pos:end="75:77"><expr pos:start="75:17" pos:end="75:76"><call pos:start="75:17" pos:end="75:76"><name pos:start="75:17" pos:end="75:22">av_log</name><argument_list pos:start="75:23" pos:end="75:76">(<argument pos:start="75:24" pos:end="75:28"><expr pos:start="75:24" pos:end="75:28"><name pos:start="75:24" pos:end="75:28">avctx</name></expr></argument>, <argument pos:start="75:31" pos:end="75:42"><expr pos:start="75:31" pos:end="75:42"><name pos:start="75:31" pos:end="75:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="75:45" pos:end="75:75"><expr pos:start="75:45" pos:end="75:75"><literal type="string" pos:start="75:45" pos:end="75:75">"Unable to allocate SchroTag\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="77:17" pos:end="77:39">return <expr pos:start="77:24" pos:end="77:38"><call pos:start="77:24" pos:end="77:38"><name pos:start="77:24" pos:end="77:30">AVERROR</name><argument_list pos:start="77:31" pos:end="77:38">(<argument pos:start="77:32" pos:end="77:37"><expr pos:start="77:32" pos:end="77:37"><name pos:start="77:32" pos:end="77:37">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:48"><expr pos:start="81:13" pos:end="81:47"><call pos:start="81:13" pos:end="81:47"><name pos:start="81:13" pos:end="81:17">AV_WN</name><argument_list pos:start="81:18" pos:end="81:47">(<argument pos:start="81:19" pos:end="81:20"><expr pos:start="81:19" pos:end="81:20"><literal type="number" pos:start="81:19" pos:end="81:20">64</literal></expr></argument>, <argument pos:start="81:23" pos:end="81:41"><expr pos:start="81:23" pos:end="81:41"><name pos:start="81:23" pos:end="81:41"><name pos:start="81:23" pos:end="81:29">enc_buf</name><operator pos:start="81:30" pos:end="81:31">-&gt;</operator><name pos:start="81:32" pos:end="81:34">tag</name><operator pos:start="81:35" pos:end="81:36">-&gt;</operator><name pos:start="81:37" pos:end="81:41">value</name></name></expr></argument>, <argument pos:start="81:44" pos:end="81:46"><expr pos:start="81:44" pos:end="81:46"><name pos:start="81:44" pos:end="81:46">pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="83:13" pos:end="83:43">/* Push buffer into decoder. */</comment>

            <if_stmt pos:start="85:13" pos:end="89:40"><if pos:start="85:13" pos:end="89:40">if <condition pos:start="85:16" pos:end="87:64">(<expr pos:start="85:17" pos:end="87:63"><call pos:start="85:17" pos:end="85:61"><name pos:start="85:17" pos:end="85:43">SCHRO_PARSE_CODE_IS_PICTURE</name><argument_list pos:start="85:44" pos:end="85:61">(<argument pos:start="85:45" pos:end="85:60"><expr pos:start="85:45" pos:end="85:60"><name pos:start="85:45" pos:end="85:60"><name pos:start="85:45" pos:end="85:51">enc_buf</name><operator pos:start="85:52" pos:end="85:53">-&gt;</operator><name pos:start="85:54" pos:end="85:57">data</name><index pos:start="85:58" pos:end="85:60">[<expr pos:start="85:59" pos:end="85:59"><literal type="number" pos:start="85:59" pos:end="85:59">4</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="85:63" pos:end="85:64">&amp;&amp;</operator>

                <call pos:start="87:17" pos:end="87:59"><name pos:start="87:17" pos:end="87:41">SCHRO_PARSE_CODE_NUM_REFS</name><argument_list pos:start="87:42" pos:end="87:59">(<argument pos:start="87:43" pos:end="87:58"><expr pos:start="87:43" pos:end="87:58"><name pos:start="87:43" pos:end="87:58"><name pos:start="87:43" pos:end="87:49">enc_buf</name><operator pos:start="87:50" pos:end="87:51">-&gt;</operator><name pos:start="87:52" pos:end="87:55">data</name><index pos:start="87:56" pos:end="87:58">[<expr pos:start="87:57" pos:end="87:57"><literal type="number" pos:start="87:57" pos:end="87:57">4</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="87:61" pos:end="87:61">&gt;</operator> <literal type="number" pos:start="87:63" pos:end="87:63">0</literal></expr>)</condition><block type="pseudo" pos:start="89:17" pos:end="89:40"><block_content pos:start="89:17" pos:end="89:40">

                <expr_stmt pos:start="89:17" pos:end="89:40"><expr pos:start="89:17" pos:end="89:39"><name pos:start="89:17" pos:end="89:35"><name pos:start="89:17" pos:end="89:21">avctx</name><operator pos:start="89:22" pos:end="89:23">-&gt;</operator><name pos:start="89:24" pos:end="89:35">has_b_frames</name></name> <operator pos:start="89:37" pos:end="89:37">=</operator> <literal type="number" pos:start="89:39" pos:end="89:39">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:57"><expr pos:start="91:13" pos:end="91:56"><name pos:start="91:13" pos:end="91:17">state</name> <operator pos:start="91:19" pos:end="91:19">=</operator> <call pos:start="91:21" pos:end="91:56"><name pos:start="91:21" pos:end="91:38">schro_decoder_push</name><argument_list pos:start="91:39" pos:end="91:56">(<argument pos:start="91:40" pos:end="91:46"><expr pos:start="91:40" pos:end="91:46"><name pos:start="91:40" pos:end="91:46">decoder</name></expr></argument>, <argument pos:start="91:49" pos:end="91:55"><expr pos:start="91:49" pos:end="91:55"><name pos:start="91:49" pos:end="91:55">enc_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="93:13" pos:end="95:64"><if pos:start="93:13" pos:end="95:64">if <condition pos:start="93:16" pos:end="93:57">(<expr pos:start="93:17" pos:end="93:56"><name pos:start="93:17" pos:end="93:21">state</name> <operator pos:start="93:23" pos:end="93:24">==</operator> <name pos:start="93:26" pos:end="93:56">SCHRO_DECODER_FIRST_ACCESS_UNIT</name></expr>)</condition><block type="pseudo" pos:start="95:17" pos:end="95:64"><block_content pos:start="95:17" pos:end="95:64">

                <expr_stmt pos:start="95:17" pos:end="95:64"><expr pos:start="95:17" pos:end="95:63"><call pos:start="95:17" pos:end="95:63"><name pos:start="95:17" pos:end="95:56">libschroedinger_handle_first_access_unit</name><argument_list pos:start="95:57" pos:end="95:63">(<argument pos:start="95:58" pos:end="95:62"><expr pos:start="95:58" pos:end="95:62"><name pos:start="95:58" pos:end="95:62">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:19"><expr pos:start="97:13" pos:end="97:18"><name pos:start="97:13" pos:end="97:14">go</name> <operator pos:start="97:16" pos:end="97:16">=</operator> <literal type="number" pos:start="97:18" pos:end="97:18">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="99:11" pos:end="101:22">else<block type="pseudo" pos:start="101:13" pos:end="101:22"><block_content pos:start="101:13" pos:end="101:22">

            <expr_stmt pos:start="101:13" pos:end="101:22"><expr pos:start="101:13" pos:end="101:21"><name pos:start="101:13" pos:end="101:17">outer</name> <operator pos:start="101:19" pos:end="101:19">=</operator> <literal type="number" pos:start="101:21" pos:end="101:21">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <while pos:start="105:9" pos:end="207:9">while <condition pos:start="105:15" pos:end="105:18">(<expr pos:start="105:16" pos:end="105:17"><name pos:start="105:16" pos:end="105:17">go</name></expr>)</condition> <block pos:start="105:20" pos:end="207:9">{<block_content pos:start="109:13" pos:end="205:13">

            <comment type="block" pos:start="107:13" pos:end="107:48">/* Parse data and process result. */</comment>

            <expr_stmt pos:start="109:13" pos:end="109:48"><expr pos:start="109:13" pos:end="109:47"><name pos:start="109:13" pos:end="109:17">state</name> <operator pos:start="109:19" pos:end="109:19">=</operator> <call pos:start="109:21" pos:end="109:47"><name pos:start="109:21" pos:end="109:38">schro_decoder_wait</name><argument_list pos:start="109:39" pos:end="109:47">(<argument pos:start="109:40" pos:end="109:46"><expr pos:start="109:40" pos:end="109:46"><name pos:start="109:40" pos:end="109:46">decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <switch pos:start="111:13" pos:end="205:13">switch <condition pos:start="111:20" pos:end="111:26">(<expr pos:start="111:21" pos:end="111:25"><name pos:start="111:21" pos:end="111:25">state</name></expr>)</condition> <block pos:start="111:28" pos:end="205:13">{<block_content pos:start="113:13" pos:end="203:22">

            <case pos:start="113:13" pos:end="113:49">case <expr pos:start="113:18" pos:end="113:48"><name pos:start="113:18" pos:end="113:48">SCHRO_DECODER_FIRST_ACCESS_UNIT</name></expr>:</case>

                <expr_stmt pos:start="115:17" pos:end="115:64"><expr pos:start="115:17" pos:end="115:63"><call pos:start="115:17" pos:end="115:63"><name pos:start="115:17" pos:end="115:56">libschroedinger_handle_first_access_unit</name><argument_list pos:start="115:57" pos:end="115:63">(<argument pos:start="115:58" pos:end="115:62"><expr pos:start="115:58" pos:end="115:62"><name pos:start="115:58" pos:end="115:62">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="117:17" pos:end="117:22">break;</break>



            <case pos:start="121:13" pos:end="121:41">case <expr pos:start="121:18" pos:end="121:40"><name pos:start="121:18" pos:end="121:40">SCHRO_DECODER_NEED_BITS</name></expr>:</case>

                <comment type="block" pos:start="123:17" pos:end="123:78">/* Need more input data - stop iterating over what we have. */</comment>

                <expr_stmt pos:start="125:17" pos:end="125:23"><expr pos:start="125:17" pos:end="125:22"><name pos:start="125:17" pos:end="125:18">go</name> <operator pos:start="125:20" pos:end="125:20">=</operator> <literal type="number" pos:start="125:22" pos:end="125:22">0</literal></expr>;</expr_stmt>

                <break pos:start="127:17" pos:end="127:22">break;</break>



            <case pos:start="131:13" pos:end="131:42">case <expr pos:start="131:18" pos:end="131:41"><name pos:start="131:18" pos:end="131:41">SCHRO_DECODER_NEED_FRAME</name></expr>:</case>

                <comment type="block" pos:start="133:17" pos:end="133:72">/* Decoder needs a frame - create one and push it in. */</comment>

                <expr_stmt pos:start="135:17" pos:end="137:76"><expr pos:start="135:17" pos:end="137:75"><name pos:start="135:17" pos:end="135:21">frame</name> <operator pos:start="135:23" pos:end="135:23">=</operator> <call pos:start="135:25" pos:end="137:75"><name pos:start="135:25" pos:end="135:45">ff_create_schro_frame</name><argument_list pos:start="135:46" pos:end="137:75">(<argument pos:start="135:47" pos:end="135:51"><expr pos:start="135:47" pos:end="135:51"><name pos:start="135:47" pos:end="135:51">avctx</name></expr></argument>,

                                              <argument pos:start="137:47" pos:end="137:74"><expr pos:start="137:47" pos:end="137:74"><name pos:start="137:47" pos:end="137:74"><name pos:start="137:47" pos:end="137:60">p_schro_params</name><operator pos:start="137:61" pos:end="137:62">-&gt;</operator><name pos:start="137:63" pos:end="137:74">frame_format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="139:17" pos:end="141:43"><if pos:start="139:17" pos:end="141:43">if <condition pos:start="139:20" pos:end="139:27">(<expr pos:start="139:21" pos:end="139:26"><operator pos:start="139:21" pos:end="139:21">!</operator><name pos:start="139:22" pos:end="139:26">frame</name></expr>)</condition><block type="pseudo" pos:start="141:21" pos:end="141:43"><block_content pos:start="141:21" pos:end="141:43">

                    <return pos:start="141:21" pos:end="141:43">return <expr pos:start="141:28" pos:end="141:42"><call pos:start="141:28" pos:end="141:42"><name pos:start="141:28" pos:end="141:34">AVERROR</name><argument_list pos:start="141:35" pos:end="141:42">(<argument pos:start="141:36" pos:end="141:41"><expr pos:start="141:36" pos:end="141:41"><name pos:start="141:36" pos:end="141:41">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

                <expr_stmt pos:start="143:17" pos:end="143:65"><expr pos:start="143:17" pos:end="143:64"><call pos:start="143:17" pos:end="143:64"><name pos:start="143:17" pos:end="143:48">schro_decoder_add_output_picture</name><argument_list pos:start="143:49" pos:end="143:64">(<argument pos:start="143:50" pos:end="143:56"><expr pos:start="143:50" pos:end="143:56"><name pos:start="143:50" pos:end="143:56">decoder</name></expr></argument>, <argument pos:start="143:59" pos:end="143:63"><expr pos:start="143:59" pos:end="143:63"><name pos:start="143:59" pos:end="143:63">frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="145:17" pos:end="145:22">break;</break>



            <case pos:start="149:13" pos:end="149:34">case <expr pos:start="149:18" pos:end="149:33"><name pos:start="149:18" pos:end="149:33">SCHRO_DECODER_OK</name></expr>:</case>

                <comment type="block" pos:start="151:17" pos:end="151:54">/* Pull a frame out of the decoder. */</comment>

                <expr_stmt pos:start="153:17" pos:end="153:63"><expr pos:start="153:17" pos:end="153:62"><name pos:start="153:17" pos:end="153:19">tag</name>   <operator pos:start="153:23" pos:end="153:23">=</operator> <call pos:start="153:25" pos:end="153:62"><name pos:start="153:25" pos:end="153:53">schro_decoder_get_picture_tag</name><argument_list pos:start="153:54" pos:end="153:62">(<argument pos:start="153:55" pos:end="153:61"><expr pos:start="153:55" pos:end="153:61"><name pos:start="153:55" pos:end="153:61">decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="155:17" pos:end="155:52"><expr pos:start="155:17" pos:end="155:51"><name pos:start="155:17" pos:end="155:21">frame</name> <operator pos:start="155:23" pos:end="155:23">=</operator> <call pos:start="155:25" pos:end="155:51"><name pos:start="155:25" pos:end="155:42">schro_decoder_pull</name><argument_list pos:start="155:43" pos:end="155:51">(<argument pos:start="155:44" pos:end="155:50"><expr pos:start="155:44" pos:end="155:50"><name pos:start="155:44" pos:end="155:50">decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <if_stmt pos:start="159:17" pos:end="181:17"><if pos:start="159:17" pos:end="181:17">if <condition pos:start="159:20" pos:end="159:26">(<expr pos:start="159:21" pos:end="159:25"><name pos:start="159:21" pos:end="159:25">frame</name></expr>)</condition> <block pos:start="159:28" pos:end="181:17">{<block_content pos:start="163:21" pos:end="179:59">

                    <comment type="block" pos:start="161:21" pos:end="161:66">/* Add relation between schroframe and pts. */</comment>

                    <expr_stmt pos:start="163:21" pos:end="163:75"><expr pos:start="163:21" pos:end="163:74"><name pos:start="163:21" pos:end="163:32">framewithpts</name> <operator pos:start="163:34" pos:end="163:34">=</operator> <call pos:start="163:36" pos:end="163:74"><name pos:start="163:36" pos:end="163:44">av_malloc</name><argument_list pos:start="163:45" pos:end="163:74">(<argument pos:start="163:46" pos:end="163:73"><expr pos:start="163:46" pos:end="163:73"><sizeof pos:start="163:46" pos:end="163:73">sizeof<argument_list pos:start="163:52" pos:end="163:73">(<argument pos:start="163:53" pos:end="163:72"><expr pos:start="163:53" pos:end="163:72"><name pos:start="163:53" pos:end="163:72">LibSchroFrameContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="165:21" pos:end="171:21"><if pos:start="165:21" pos:end="171:21">if <condition pos:start="165:24" pos:end="165:38">(<expr pos:start="165:25" pos:end="165:37"><operator pos:start="165:25" pos:end="165:25">!</operator><name pos:start="165:26" pos:end="165:37">framewithpts</name></expr>)</condition> <block pos:start="165:40" pos:end="171:21">{<block_content pos:start="167:25" pos:end="169:47">

                        <expr_stmt pos:start="167:25" pos:end="167:89"><expr pos:start="167:25" pos:end="167:88"><call pos:start="167:25" pos:end="167:88"><name pos:start="167:25" pos:end="167:30">av_log</name><argument_list pos:start="167:31" pos:end="167:88">(<argument pos:start="167:32" pos:end="167:36"><expr pos:start="167:32" pos:end="167:36"><name pos:start="167:32" pos:end="167:36">avctx</name></expr></argument>, <argument pos:start="167:39" pos:end="167:50"><expr pos:start="167:39" pos:end="167:50"><name pos:start="167:39" pos:end="167:50">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="167:53" pos:end="167:87"><expr pos:start="167:53" pos:end="167:87"><literal type="string" pos:start="167:53" pos:end="167:87">"Unable to allocate FrameWithPts\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <return pos:start="169:25" pos:end="169:47">return <expr pos:start="169:32" pos:end="169:46"><call pos:start="169:32" pos:end="169:46"><name pos:start="169:32" pos:end="169:38">AVERROR</name><argument_list pos:start="169:39" pos:end="169:46">(<argument pos:start="169:40" pos:end="169:45"><expr pos:start="169:40" pos:end="169:45"><name pos:start="169:40" pos:end="169:45">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="173:21" pos:end="173:48"><expr pos:start="173:21" pos:end="173:47"><name pos:start="173:21" pos:end="173:39"><name pos:start="173:21" pos:end="173:32">framewithpts</name><operator pos:start="173:33" pos:end="173:34">-&gt;</operator><name pos:start="173:35" pos:end="173:39">frame</name></name> <operator pos:start="173:41" pos:end="173:41">=</operator> <name pos:start="173:43" pos:end="173:47">frame</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="175:21" pos:end="175:62"><expr pos:start="175:21" pos:end="175:61"><name pos:start="175:21" pos:end="175:37"><name pos:start="175:21" pos:end="175:32">framewithpts</name><operator pos:start="175:33" pos:end="175:34">-&gt;</operator><name pos:start="175:35" pos:end="175:37">pts</name></name>   <operator pos:start="175:41" pos:end="175:41">=</operator> <call pos:start="175:43" pos:end="175:61"><name pos:start="175:43" pos:end="175:49">AV_RN64</name><argument_list pos:start="175:50" pos:end="175:61">(<argument pos:start="175:51" pos:end="175:60"><expr pos:start="175:51" pos:end="175:60"><name pos:start="175:51" pos:end="175:60"><name pos:start="175:51" pos:end="175:53">tag</name><operator pos:start="175:54" pos:end="175:55">-&gt;</operator><name pos:start="175:56" pos:end="175:60">value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="177:21" pos:end="179:59"><expr pos:start="177:21" pos:end="179:58"><call pos:start="177:21" pos:end="179:58"><name pos:start="177:21" pos:end="177:44">ff_schro_queue_push_back</name><argument_list pos:start="177:45" pos:end="179:58">(<argument pos:start="177:46" pos:end="177:77"><expr pos:start="177:46" pos:end="177:77"><operator pos:start="177:46" pos:end="177:46">&amp;</operator><name pos:start="177:47" pos:end="177:77"><name pos:start="177:47" pos:end="177:60">p_schro_params</name><operator pos:start="177:61" pos:end="177:62">-&gt;</operator><name pos:start="177:63" pos:end="177:77">dec_frame_queue</name></name></expr></argument>,

                                             <argument pos:start="179:46" pos:end="179:57"><expr pos:start="179:46" pos:end="179:57"><name pos:start="179:46" pos:end="179:57">framewithpts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <break pos:start="183:17" pos:end="183:22">break;</break>

            <case pos:start="185:13" pos:end="185:35">case <expr pos:start="185:18" pos:end="185:34"><name pos:start="185:18" pos:end="185:34">SCHRO_DECODER_EOS</name></expr>:</case>

                <expr_stmt pos:start="187:17" pos:end="187:23"><expr pos:start="187:17" pos:end="187:22"><name pos:start="187:17" pos:end="187:18">go</name> <operator pos:start="187:20" pos:end="187:20">=</operator> <literal type="number" pos:start="187:22" pos:end="187:22">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="189:17" pos:end="189:47"><expr pos:start="189:17" pos:end="189:46"><name pos:start="189:17" pos:end="189:42"><name pos:start="189:17" pos:end="189:30">p_schro_params</name><operator pos:start="189:31" pos:end="189:32">-&gt;</operator><name pos:start="189:33" pos:end="189:42">eos_pulled</name></name> <operator pos:start="189:44" pos:end="189:44">=</operator> <literal type="number" pos:start="189:46" pos:end="189:46">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="191:17" pos:end="191:45"><expr pos:start="191:17" pos:end="191:44"><call pos:start="191:17" pos:end="191:44"><name pos:start="191:17" pos:end="191:35">schro_decoder_reset</name><argument_list pos:start="191:36" pos:end="191:44">(<argument pos:start="191:37" pos:end="191:43"><expr pos:start="191:37" pos:end="191:43"><name pos:start="191:37" pos:end="191:43">decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="193:17" pos:end="193:26"><expr pos:start="193:17" pos:end="193:25"><name pos:start="193:17" pos:end="193:21">outer</name> <operator pos:start="193:23" pos:end="193:23">=</operator> <literal type="number" pos:start="193:25" pos:end="193:25">0</literal></expr>;</expr_stmt>

                <break pos:start="195:17" pos:end="195:22">break;</break>



            <case pos:start="199:13" pos:end="199:37">case <expr pos:start="199:18" pos:end="199:36"><name pos:start="199:18" pos:end="199:36">SCHRO_DECODER_ERROR</name></expr>:</case>

                <return pos:start="201:17" pos:end="201:26">return <expr pos:start="201:24" pos:end="201:25"><operator pos:start="201:24" pos:end="201:24">-</operator><literal type="number" pos:start="201:25" pos:end="201:25">1</literal></expr>;</return>

                <break pos:start="203:17" pos:end="203:22">break;</break>

            </block_content>}</block></switch>

        </block_content>}</block></while>

    </block_content>}</block> while <condition pos:start="209:13" pos:end="209:19">(<expr pos:start="209:14" pos:end="209:18"><name pos:start="209:14" pos:end="209:18">outer</name></expr>)</condition>;</do>



    <comment type="block" pos:start="213:5" pos:end="213:67">/* Grab next frame to be returned from the top of the queue. */</comment>

    <expr_stmt pos:start="215:5" pos:end="215:72"><expr pos:start="215:5" pos:end="215:71"><name pos:start="215:5" pos:end="215:16">framewithpts</name> <operator pos:start="215:18" pos:end="215:18">=</operator> <call pos:start="215:20" pos:end="215:71"><name pos:start="215:20" pos:end="215:37">ff_schro_queue_pop</name><argument_list pos:start="215:38" pos:end="215:71">(<argument pos:start="215:39" pos:end="215:70"><expr pos:start="215:39" pos:end="215:70"><operator pos:start="215:39" pos:end="215:39">&amp;</operator><name pos:start="215:40" pos:end="215:70"><name pos:start="215:40" pos:end="215:53">p_schro_params</name><operator pos:start="215:54" pos:end="215:55">-&gt;</operator><name pos:start="215:56" pos:end="215:70">dec_frame_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="219:5" pos:end="283:5"><if pos:start="219:5" pos:end="277:5">if <condition pos:start="219:8" pos:end="219:89">(<expr pos:start="219:9" pos:end="219:88"><name pos:start="219:9" pos:end="219:20">framewithpts</name> <operator pos:start="219:22" pos:end="219:23">&amp;&amp;</operator> <name pos:start="219:25" pos:end="219:43"><name pos:start="219:25" pos:end="219:36">framewithpts</name><operator pos:start="219:37" pos:end="219:38">-&gt;</operator><name pos:start="219:39" pos:end="219:43">frame</name></name> <operator pos:start="219:45" pos:end="219:46">&amp;&amp;</operator> <name pos:start="219:48" pos:end="219:81"><name pos:start="219:48" pos:end="219:59">framewithpts</name><operator pos:start="219:60" pos:end="219:61">-&gt;</operator><name pos:start="219:62" pos:end="219:66">frame</name><operator pos:start="219:67" pos:end="219:68">-&gt;</operator><name pos:start="219:69" pos:end="219:78">components</name><index pos:start="219:79" pos:end="219:81">[<expr pos:start="219:80" pos:end="219:80"><literal type="number" pos:start="219:80" pos:end="219:80">0</literal></expr>]</index></name><operator pos:start="219:82" pos:end="219:82">.</operator><name pos:start="219:83" pos:end="219:88">stride</name></expr>)</condition> <block pos:start="219:91" pos:end="277:5">{<block_content pos:start="221:9" pos:end="275:28">

        <if_stmt pos:start="221:9" pos:end="225:9"><if pos:start="221:9" pos:end="225:9">if <condition pos:start="221:12" pos:end="221:57">(<expr pos:start="221:13" pos:end="221:56"><operator pos:start="221:13" pos:end="221:13">(</operator><name pos:start="221:14" pos:end="221:16">ret</name> <operator pos:start="221:18" pos:end="221:18">=</operator> <call pos:start="221:20" pos:end="221:51"><name pos:start="221:20" pos:end="221:32">ff_get_buffer</name><argument_list pos:start="221:33" pos:end="221:51">(<argument pos:start="221:34" pos:end="221:38"><expr pos:start="221:34" pos:end="221:38"><name pos:start="221:34" pos:end="221:38">avctx</name></expr></argument>, <argument pos:start="221:41" pos:end="221:47"><expr pos:start="221:41" pos:end="221:47"><name pos:start="221:41" pos:end="221:47">avframe</name></expr></argument>, <argument pos:start="221:50" pos:end="221:50"><expr pos:start="221:50" pos:end="221:50"><literal type="number" pos:start="221:50" pos:end="221:50">0</literal></expr></argument>)</argument_list></call><operator pos:start="221:52" pos:end="221:52">)</operator> <operator pos:start="221:54" pos:end="221:54">&lt;</operator> <literal type="number" pos:start="221:56" pos:end="221:56">0</literal></expr>)</condition> <block pos:start="221:59" pos:end="225:9">{<block_content pos:start="223:13" pos:end="223:21">

            <goto pos:start="223:13" pos:end="223:21">goto <name pos:start="223:18" pos:end="223:20">end</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="229:9" pos:end="233:58"><expr pos:start="229:9" pos:end="233:57"><call pos:start="229:9" pos:end="233:57"><name pos:start="229:9" pos:end="229:14">memcpy</name><argument_list pos:start="229:15" pos:end="233:57">(<argument pos:start="229:16" pos:end="229:31"><expr pos:start="229:16" pos:end="229:31"><name pos:start="229:16" pos:end="229:31"><name pos:start="229:16" pos:end="229:22">avframe</name><operator pos:start="229:23" pos:end="229:24">-&gt;</operator><name pos:start="229:25" pos:end="229:28">data</name><index pos:start="229:29" pos:end="229:31">[<expr pos:start="229:30" pos:end="229:30"><literal type="number" pos:start="229:30" pos:end="229:30">0</literal></expr>]</index></name></expr></argument>,

               <argument pos:start="231:16" pos:end="231:54"><expr pos:start="231:16" pos:end="231:54"><name pos:start="231:16" pos:end="231:49"><name pos:start="231:16" pos:end="231:27">framewithpts</name><operator pos:start="231:28" pos:end="231:29">-&gt;</operator><name pos:start="231:30" pos:end="231:34">frame</name><operator pos:start="231:35" pos:end="231:36">-&gt;</operator><name pos:start="231:37" pos:end="231:46">components</name><index pos:start="231:47" pos:end="231:49">[<expr pos:start="231:48" pos:end="231:48"><literal type="number" pos:start="231:48" pos:end="231:48">0</literal></expr>]</index></name><operator pos:start="231:50" pos:end="231:50">.</operator><name pos:start="231:51" pos:end="231:54">data</name></expr></argument>,

               <argument pos:start="233:16" pos:end="233:56"><expr pos:start="233:16" pos:end="233:56"><name pos:start="233:16" pos:end="233:49"><name pos:start="233:16" pos:end="233:27">framewithpts</name><operator pos:start="233:28" pos:end="233:29">-&gt;</operator><name pos:start="233:30" pos:end="233:34">frame</name><operator pos:start="233:35" pos:end="233:36">-&gt;</operator><name pos:start="233:37" pos:end="233:46">components</name><index pos:start="233:47" pos:end="233:49">[<expr pos:start="233:48" pos:end="233:48"><literal type="number" pos:start="233:48" pos:end="233:48">0</literal></expr>]</index></name><operator pos:start="233:50" pos:end="233:50">.</operator><name pos:start="233:51" pos:end="233:56">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="237:9" pos:end="241:58"><expr pos:start="237:9" pos:end="241:57"><call pos:start="237:9" pos:end="241:57"><name pos:start="237:9" pos:end="237:14">memcpy</name><argument_list pos:start="237:15" pos:end="241:57">(<argument pos:start="237:16" pos:end="237:31"><expr pos:start="237:16" pos:end="237:31"><name pos:start="237:16" pos:end="237:31"><name pos:start="237:16" pos:end="237:22">avframe</name><operator pos:start="237:23" pos:end="237:24">-&gt;</operator><name pos:start="237:25" pos:end="237:28">data</name><index pos:start="237:29" pos:end="237:31">[<expr pos:start="237:30" pos:end="237:30"><literal type="number" pos:start="237:30" pos:end="237:30">1</literal></expr>]</index></name></expr></argument>,

               <argument pos:start="239:16" pos:end="239:54"><expr pos:start="239:16" pos:end="239:54"><name pos:start="239:16" pos:end="239:49"><name pos:start="239:16" pos:end="239:27">framewithpts</name><operator pos:start="239:28" pos:end="239:29">-&gt;</operator><name pos:start="239:30" pos:end="239:34">frame</name><operator pos:start="239:35" pos:end="239:36">-&gt;</operator><name pos:start="239:37" pos:end="239:46">components</name><index pos:start="239:47" pos:end="239:49">[<expr pos:start="239:48" pos:end="239:48"><literal type="number" pos:start="239:48" pos:end="239:48">1</literal></expr>]</index></name><operator pos:start="239:50" pos:end="239:50">.</operator><name pos:start="239:51" pos:end="239:54">data</name></expr></argument>,

               <argument pos:start="241:16" pos:end="241:56"><expr pos:start="241:16" pos:end="241:56"><name pos:start="241:16" pos:end="241:49"><name pos:start="241:16" pos:end="241:27">framewithpts</name><operator pos:start="241:28" pos:end="241:29">-&gt;</operator><name pos:start="241:30" pos:end="241:34">frame</name><operator pos:start="241:35" pos:end="241:36">-&gt;</operator><name pos:start="241:37" pos:end="241:46">components</name><index pos:start="241:47" pos:end="241:49">[<expr pos:start="241:48" pos:end="241:48"><literal type="number" pos:start="241:48" pos:end="241:48">1</literal></expr>]</index></name><operator pos:start="241:50" pos:end="241:50">.</operator><name pos:start="241:51" pos:end="241:56">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="245:9" pos:end="249:58"><expr pos:start="245:9" pos:end="249:57"><call pos:start="245:9" pos:end="249:57"><name pos:start="245:9" pos:end="245:14">memcpy</name><argument_list pos:start="245:15" pos:end="249:57">(<argument pos:start="245:16" pos:end="245:31"><expr pos:start="245:16" pos:end="245:31"><name pos:start="245:16" pos:end="245:31"><name pos:start="245:16" pos:end="245:22">avframe</name><operator pos:start="245:23" pos:end="245:24">-&gt;</operator><name pos:start="245:25" pos:end="245:28">data</name><index pos:start="245:29" pos:end="245:31">[<expr pos:start="245:30" pos:end="245:30"><literal type="number" pos:start="245:30" pos:end="245:30">2</literal></expr>]</index></name></expr></argument>,

               <argument pos:start="247:16" pos:end="247:54"><expr pos:start="247:16" pos:end="247:54"><name pos:start="247:16" pos:end="247:49"><name pos:start="247:16" pos:end="247:27">framewithpts</name><operator pos:start="247:28" pos:end="247:29">-&gt;</operator><name pos:start="247:30" pos:end="247:34">frame</name><operator pos:start="247:35" pos:end="247:36">-&gt;</operator><name pos:start="247:37" pos:end="247:46">components</name><index pos:start="247:47" pos:end="247:49">[<expr pos:start="247:48" pos:end="247:48"><literal type="number" pos:start="247:48" pos:end="247:48">2</literal></expr>]</index></name><operator pos:start="247:50" pos:end="247:50">.</operator><name pos:start="247:51" pos:end="247:54">data</name></expr></argument>,

               <argument pos:start="249:16" pos:end="249:56"><expr pos:start="249:16" pos:end="249:56"><name pos:start="249:16" pos:end="249:49"><name pos:start="249:16" pos:end="249:27">framewithpts</name><operator pos:start="249:28" pos:end="249:29">-&gt;</operator><name pos:start="249:30" pos:end="249:34">frame</name><operator pos:start="249:35" pos:end="249:36">-&gt;</operator><name pos:start="249:37" pos:end="249:46">components</name><index pos:start="249:47" pos:end="249:49">[<expr pos:start="249:48" pos:end="249:48"><literal type="number" pos:start="249:48" pos:end="249:48">2</literal></expr>]</index></name><operator pos:start="249:50" pos:end="249:50">.</operator><name pos:start="249:51" pos:end="249:56">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="253:9" pos:end="253:68">/* Fill frame with current buffer data from Schroedinger. */</comment>

        <expr_stmt pos:start="255:9" pos:end="258:0"><expr pos:start="255:9" pos:end="255:40"><name pos:start="255:9" pos:end="255:20"><name pos:start="255:9" pos:end="255:15">avframe</name><operator pos:start="255:16" pos:end="255:17">-&gt;</operator><name pos:start="255:18" pos:end="255:20">pts</name></name> <operator pos:start="255:22" pos:end="255:22">=</operator> <name pos:start="255:24" pos:end="255:40"><name pos:start="255:24" pos:end="255:35">framewithpts</name><operator pos:start="255:36" pos:end="255:37">-&gt;</operator><name pos:start="255:38" pos:end="255:40">pts</name></name></expr>;</expr_stmt>

<cpp:if pos:start="257:1" pos:end="257:18">#<cpp:directive pos:start="257:2" pos:end="257:3">if</cpp:directive> <expr pos:start="257:5" pos:end="257:18"><name pos:start="257:5" pos:end="257:18">FF_API_PKT_PTS</name></expr></cpp:if>

<decl_stmt pos:start="259:1" pos:end="261:40"><decl pos:start="259:1" pos:end="261:39"><type pos:start="259:1" pos:end="259:31"><name pos:start="259:1" pos:end="259:31">FF_DISABLE_DEPRECATION_WARNINGS</name></type>

        <name pos:start="261:9" pos:end="261:24"><name pos:start="261:9" pos:end="261:15">avframe</name><operator pos:start="261:16" pos:end="261:17">-&gt;</operator><name pos:start="261:18" pos:end="261:24">pkt_pts</name></name> <init pos:start="261:26" pos:end="261:39">= <expr pos:start="261:28" pos:end="261:39"><name pos:start="261:28" pos:end="261:39"><name pos:start="261:28" pos:end="261:34">avframe</name><operator pos:start="261:35" pos:end="261:36">-&gt;</operator><name pos:start="261:37" pos:end="261:39">pts</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt pos:start="263:1" pos:end="267:73"><decl pos:start="263:1" pos:end="267:72"><type pos:start="263:1" pos:end="266:0"><name pos:start="263:1" pos:end="266:0">FF_ENABLE_DEPRECATION_WARNINGS</name></type>

<cpp:endif pos:start="265:1" pos:end="265:6">#<cpp:directive pos:start="265:2" pos:end="265:6">endif</cpp:directive></cpp:endif>

        <name pos:start="267:9" pos:end="267:28"><name pos:start="267:9" pos:end="267:15">avframe</name><operator pos:start="267:16" pos:end="267:17">-&gt;</operator><name pos:start="267:18" pos:end="267:25">linesize</name><index pos:start="267:26" pos:end="267:28">[<expr pos:start="267:27" pos:end="267:27"><literal type="number" pos:start="267:27" pos:end="267:27">0</literal></expr>]</index></name> <init pos:start="267:30" pos:end="267:72">= <expr pos:start="267:32" pos:end="267:72"><name pos:start="267:32" pos:end="267:65"><name pos:start="267:32" pos:end="267:43">framewithpts</name><operator pos:start="267:44" pos:end="267:45">-&gt;</operator><name pos:start="267:46" pos:end="267:50">frame</name><operator pos:start="267:51" pos:end="267:52">-&gt;</operator><name pos:start="267:53" pos:end="267:62">components</name><index pos:start="267:63" pos:end="267:65">[<expr pos:start="267:64" pos:end="267:64"><literal type="number" pos:start="267:64" pos:end="267:64">0</literal></expr>]</index></name><operator pos:start="267:66" pos:end="267:66">.</operator><name pos:start="267:67" pos:end="267:72">stride</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="269:9" pos:end="269:73"><expr pos:start="269:9" pos:end="269:72"><name pos:start="269:9" pos:end="269:28"><name pos:start="269:9" pos:end="269:15">avframe</name><operator pos:start="269:16" pos:end="269:17">-&gt;</operator><name pos:start="269:18" pos:end="269:25">linesize</name><index pos:start="269:26" pos:end="269:28">[<expr pos:start="269:27" pos:end="269:27"><literal type="number" pos:start="269:27" pos:end="269:27">1</literal></expr>]</index></name> <operator pos:start="269:30" pos:end="269:30">=</operator> <name pos:start="269:32" pos:end="269:65"><name pos:start="269:32" pos:end="269:43">framewithpts</name><operator pos:start="269:44" pos:end="269:45">-&gt;</operator><name pos:start="269:46" pos:end="269:50">frame</name><operator pos:start="269:51" pos:end="269:52">-&gt;</operator><name pos:start="269:53" pos:end="269:62">components</name><index pos:start="269:63" pos:end="269:65">[<expr pos:start="269:64" pos:end="269:64"><literal type="number" pos:start="269:64" pos:end="269:64">1</literal></expr>]</index></name><operator pos:start="269:66" pos:end="269:66">.</operator><name pos:start="269:67" pos:end="269:72">stride</name></expr>;</expr_stmt>

        <expr_stmt pos:start="271:9" pos:end="271:73"><expr pos:start="271:9" pos:end="271:72"><name pos:start="271:9" pos:end="271:28"><name pos:start="271:9" pos:end="271:15">avframe</name><operator pos:start="271:16" pos:end="271:17">-&gt;</operator><name pos:start="271:18" pos:end="271:25">linesize</name><index pos:start="271:26" pos:end="271:28">[<expr pos:start="271:27" pos:end="271:27"><literal type="number" pos:start="271:27" pos:end="271:27">2</literal></expr>]</index></name> <operator pos:start="271:30" pos:end="271:30">=</operator> <name pos:start="271:32" pos:end="271:65"><name pos:start="271:32" pos:end="271:43">framewithpts</name><operator pos:start="271:44" pos:end="271:45">-&gt;</operator><name pos:start="271:46" pos:end="271:50">frame</name><operator pos:start="271:51" pos:end="271:52">-&gt;</operator><name pos:start="271:53" pos:end="271:62">components</name><index pos:start="271:63" pos:end="271:65">[<expr pos:start="271:64" pos:end="271:64"><literal type="number" pos:start="271:64" pos:end="271:64">2</literal></expr>]</index></name><operator pos:start="271:66" pos:end="271:66">.</operator><name pos:start="271:67" pos:end="271:72">stride</name></expr>;</expr_stmt>



        <expr_stmt pos:start="275:9" pos:end="275:28"><expr pos:start="275:9" pos:end="275:27"><operator pos:start="275:9" pos:end="275:9">*</operator><name pos:start="275:10" pos:end="275:18">got_frame</name>      <operator pos:start="275:25" pos:end="275:25">=</operator> <literal type="number" pos:start="275:27" pos:end="275:27">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="277:7" pos:end="283:5">else <block pos:start="277:12" pos:end="283:5">{<block_content pos:start="279:9" pos:end="281:23">

        <expr_stmt pos:start="279:9" pos:end="279:26"><expr pos:start="279:9" pos:end="279:25"><name pos:start="279:9" pos:end="279:12">data</name>       <operator pos:start="279:20" pos:end="279:20">=</operator> <name pos:start="279:22" pos:end="279:25">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="281:9" pos:end="281:23"><expr pos:start="281:9" pos:end="281:22"><operator pos:start="281:9" pos:end="281:9">*</operator><name pos:start="281:10" pos:end="281:18">got_frame</name> <operator pos:start="281:20" pos:end="281:20">=</operator> <literal type="number" pos:start="281:22" pos:end="281:22">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="285:5" pos:end="285:19"><expr pos:start="285:5" pos:end="285:18"><name pos:start="285:5" pos:end="285:7">ret</name> <operator pos:start="285:9" pos:end="285:9">=</operator> <name pos:start="285:11" pos:end="285:18">buf_size</name></expr>;</expr_stmt>

<label pos:start="287:1" pos:end="287:4"><name pos:start="287:1" pos:end="287:3">end</name>:</label>

    <comment type="block" pos:start="289:5" pos:end="289:39">/* Now free the frame resources. */</comment>

    <if_stmt pos:start="291:5" pos:end="293:63"><if pos:start="291:5" pos:end="293:63">if <condition pos:start="291:8" pos:end="291:44">(<expr pos:start="291:9" pos:end="291:43"><name pos:start="291:9" pos:end="291:20">framewithpts</name> <operator pos:start="291:22" pos:end="291:23">&amp;&amp;</operator> <name pos:start="291:25" pos:end="291:43"><name pos:start="291:25" pos:end="291:36">framewithpts</name><operator pos:start="291:37" pos:end="291:38">-&gt;</operator><name pos:start="291:39" pos:end="291:43">frame</name></name></expr>)</condition><block type="pseudo" pos:start="293:9" pos:end="293:63"><block_content pos:start="293:9" pos:end="293:63">

        <expr_stmt pos:start="293:9" pos:end="293:63"><expr pos:start="293:9" pos:end="293:62"><call pos:start="293:9" pos:end="293:62"><name pos:start="293:9" pos:end="293:41">libschroedinger_decode_frame_free</name><argument_list pos:start="293:42" pos:end="293:62">(<argument pos:start="293:43" pos:end="293:61"><expr pos:start="293:43" pos:end="293:61"><name pos:start="293:43" pos:end="293:61"><name pos:start="293:43" pos:end="293:54">framewithpts</name><operator pos:start="293:55" pos:end="293:56">-&gt;</operator><name pos:start="293:57" pos:end="293:61">frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="295:5" pos:end="295:28"><expr pos:start="295:5" pos:end="295:27"><call pos:start="295:5" pos:end="295:27"><name pos:start="295:5" pos:end="295:12">av_freep</name><argument_list pos:start="295:13" pos:end="295:27">(<argument pos:start="295:14" pos:end="295:26"><expr pos:start="295:14" pos:end="295:26"><operator pos:start="295:14" pos:end="295:14">&amp;</operator><name pos:start="295:15" pos:end="295:26">framewithpts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="297:5" pos:end="297:15">return <expr pos:start="297:12" pos:end="297:14"><name pos:start="297:12" pos:end="297:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
