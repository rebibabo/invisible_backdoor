<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/15005.c" pos:tabs="8"><function pos:start="1:1" pos:end="153:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">mov_read_stsz</name><parameter_list pos:start="1:25" pos:end="1:70">(<parameter pos:start="1:26" pos:end="1:38"><decl pos:start="1:26" pos:end="1:38"><type pos:start="1:26" pos:end="1:38"><name pos:start="1:26" pos:end="1:35">MOVContext</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:38">c</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:55"><decl pos:start="1:41" pos:end="1:55"><type pos:start="1:41" pos:end="1:55"><name pos:start="1:41" pos:end="1:51">AVIOContext</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:55">pb</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:69"><decl pos:start="1:58" pos:end="1:69"><type pos:start="1:58" pos:end="1:69"><name pos:start="1:58" pos:end="1:64">MOVAtom</name></type> <name pos:start="1:66" pos:end="1:69">atom</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="153:1">{<block_content pos:start="5:5" pos:end="151:13">

    <decl_stmt pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">AVStream</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:16">st</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">MOVStreamContext</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:24">sc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:64"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:16">int</name></type> <name pos:start="9:18" pos:end="9:18">i</name></decl>, <decl pos:start="9:21" pos:end="9:27"><type ref="prev" pos:start="9:5" pos:end="9:16"/><name pos:start="9:21" pos:end="9:27">entries</name></decl>, <decl pos:start="9:30" pos:end="9:40"><type ref="prev" pos:start="9:5" pos:end="9:16"/><name pos:start="9:30" pos:end="9:40">sample_size</name></decl>, <decl pos:start="9:43" pos:end="9:52"><type ref="prev" pos:start="9:5" pos:end="9:16"/><name pos:start="9:43" pos:end="9:52">field_size</name></decl>, <decl pos:start="9:55" pos:end="9:63"><type ref="prev" pos:start="9:5" pos:end="9:16"/><name pos:start="9:55" pos:end="9:63">num_bytes</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:17">GetBitContext</name></type> <name pos:start="11:19" pos:end="11:20">gb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:12">unsigned</name> <name pos:start="13:14" pos:end="13:17">char</name><modifier pos:start="13:18" pos:end="13:18">*</modifier></type> <name pos:start="13:20" pos:end="13:22">buf</name></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="19:17"><if pos:start="17:5" pos:end="19:17">if <condition pos:start="17:8" pos:end="17:30">(<expr pos:start="17:9" pos:end="17:29"><name pos:start="17:9" pos:end="17:25"><name pos:start="17:9" pos:end="17:9">c</name><operator pos:start="17:10" pos:end="17:11">-&gt;</operator><name pos:start="17:12" pos:end="17:13">fc</name><operator pos:start="17:14" pos:end="17:15">-&gt;</operator><name pos:start="17:16" pos:end="17:25">nb_streams</name></name> <operator pos:start="17:27" pos:end="17:27">&lt;</operator> <literal type="number" pos:start="17:29" pos:end="17:29">1</literal></expr>)</condition><block type="pseudo" pos:start="19:9" pos:end="19:17"><block_content pos:start="19:9" pos:end="19:17">

        <return pos:start="19:9" pos:end="19:17">return <expr pos:start="19:16" pos:end="19:16"><literal type="number" pos:start="19:16" pos:end="19:16">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:45"><expr pos:start="21:5" pos:end="21:44"><name pos:start="21:5" pos:end="21:6">st</name> <operator pos:start="21:8" pos:end="21:8">=</operator> <name pos:start="21:10" pos:end="21:44"><name pos:start="21:10" pos:end="21:10">c</name><operator pos:start="21:11" pos:end="21:12">-&gt;</operator><name pos:start="21:13" pos:end="21:14">fc</name><operator pos:start="21:15" pos:end="21:16">-&gt;</operator><name pos:start="21:17" pos:end="21:23">streams</name><index pos:start="21:24" pos:end="21:44">[<expr pos:start="21:25" pos:end="21:43"><name pos:start="21:25" pos:end="21:41"><name pos:start="21:25" pos:end="21:25">c</name><operator pos:start="21:26" pos:end="21:27">-&gt;</operator><name pos:start="21:28" pos:end="21:29">fc</name><operator pos:start="21:30" pos:end="21:31">-&gt;</operator><name pos:start="21:32" pos:end="21:41">nb_streams</name></name><operator pos:start="21:42" pos:end="21:42">-</operator><literal type="number" pos:start="21:43" pos:end="21:43">1</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:23"><expr pos:start="23:5" pos:end="23:22"><name pos:start="23:5" pos:end="23:6">sc</name> <operator pos:start="23:8" pos:end="23:8">=</operator> <name pos:start="23:10" pos:end="23:22"><name pos:start="23:10" pos:end="23:11">st</name><operator pos:start="23:12" pos:end="23:13">-&gt;</operator><name pos:start="23:14" pos:end="23:22">priv_data</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:16"><expr pos:start="27:5" pos:end="27:15"><call pos:start="27:5" pos:end="27:15"><name pos:start="27:5" pos:end="27:11">avio_r8</name><argument_list pos:start="27:12" pos:end="27:15">(<argument pos:start="27:13" pos:end="27:14"><expr pos:start="27:13" pos:end="27:14"><name pos:start="27:13" pos:end="27:14">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="27:18" pos:end="27:30">/* version */</comment>

    <expr_stmt pos:start="29:5" pos:end="29:18"><expr pos:start="29:5" pos:end="29:17"><call pos:start="29:5" pos:end="29:17"><name pos:start="29:5" pos:end="29:13">avio_rb24</name><argument_list pos:start="29:14" pos:end="29:17">(<argument pos:start="29:15" pos:end="29:16"><expr pos:start="29:15" pos:end="29:16"><name pos:start="29:15" pos:end="29:16">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="29:20" pos:end="29:30">/* flags */</comment>



    <if_stmt pos:start="33:5" pos:end="51:5"><if pos:start="33:5" pos:end="43:5">if <condition pos:start="33:8" pos:end="33:44">(<expr pos:start="33:9" pos:end="33:43"><name pos:start="33:9" pos:end="33:17"><name pos:start="33:9" pos:end="33:12">atom</name><operator pos:start="33:13" pos:end="33:13">.</operator><name pos:start="33:14" pos:end="33:17">type</name></name> <operator pos:start="33:19" pos:end="33:20">==</operator> <call pos:start="33:22" pos:end="33:43"><name pos:start="33:22" pos:end="33:26">MKTAG</name><argument_list pos:start="33:27" pos:end="33:43">(<argument pos:start="33:28" pos:end="33:30"><expr pos:start="33:28" pos:end="33:30"><literal type="char" pos:start="33:28" pos:end="33:30">'s'</literal></expr></argument>,<argument pos:start="33:32" pos:end="33:34"><expr pos:start="33:32" pos:end="33:34"><literal type="char" pos:start="33:32" pos:end="33:34">'t'</literal></expr></argument>,<argument pos:start="33:36" pos:end="33:38"><expr pos:start="33:36" pos:end="33:38"><literal type="char" pos:start="33:36" pos:end="33:38">'s'</literal></expr></argument>,<argument pos:start="33:40" pos:end="33:42"><expr pos:start="33:40" pos:end="33:42"><literal type="char" pos:start="33:40" pos:end="33:42">'z'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="33:46" pos:end="43:5">{<block_content pos:start="35:9" pos:end="41:24">

        <expr_stmt pos:start="35:9" pos:end="35:36"><expr pos:start="35:9" pos:end="35:35"><name pos:start="35:9" pos:end="35:19">sample_size</name> <operator pos:start="35:21" pos:end="35:21">=</operator> <call pos:start="35:23" pos:end="35:35"><name pos:start="35:23" pos:end="35:31">avio_rb32</name><argument_list pos:start="35:32" pos:end="35:35">(<argument pos:start="35:33" pos:end="35:34"><expr pos:start="35:33" pos:end="35:34"><name pos:start="35:33" pos:end="35:34">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="37:9" pos:end="39:42"><if pos:start="37:9" pos:end="39:42">if <condition pos:start="37:12" pos:end="37:29">(<expr pos:start="37:13" pos:end="37:28"><operator pos:start="37:13" pos:end="37:13">!</operator><name pos:start="37:14" pos:end="37:28"><name pos:start="37:14" pos:end="37:15">sc</name><operator pos:start="37:16" pos:end="37:17">-&gt;</operator><name pos:start="37:18" pos:end="37:28">sample_size</name></name></expr>)</condition><block type="pseudo" pos:start="39:13" pos:end="39:42"><block_content pos:start="39:13" pos:end="39:42"> <comment type="block" pos:start="37:31" pos:end="37:75">/* do not overwrite value computed in stsd */</comment>

            <expr_stmt pos:start="39:13" pos:end="39:42"><expr pos:start="39:13" pos:end="39:41"><name pos:start="39:13" pos:end="39:27"><name pos:start="39:13" pos:end="39:14">sc</name><operator pos:start="39:15" pos:end="39:16">-&gt;</operator><name pos:start="39:17" pos:end="39:27">sample_size</name></name> <operator pos:start="39:29" pos:end="39:29">=</operator> <name pos:start="39:31" pos:end="39:41">sample_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:24"><expr pos:start="41:9" pos:end="41:23"><name pos:start="41:9" pos:end="41:18">field_size</name> <operator pos:start="41:20" pos:end="41:20">=</operator> <literal type="number" pos:start="41:22" pos:end="41:23">32</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="43:7" pos:end="51:5">else <block pos:start="43:12" pos:end="51:5">{<block_content pos:start="45:9" pos:end="49:33">

        <expr_stmt pos:start="45:9" pos:end="45:24"><expr pos:start="45:9" pos:end="45:23"><name pos:start="45:9" pos:end="45:19">sample_size</name> <operator pos:start="45:21" pos:end="45:21">=</operator> <literal type="number" pos:start="45:23" pos:end="45:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:22"><expr pos:start="47:9" pos:end="47:21"><call pos:start="47:9" pos:end="47:21"><name pos:start="47:9" pos:end="47:17">avio_rb24</name><argument_list pos:start="47:18" pos:end="47:21">(<argument pos:start="47:19" pos:end="47:20"><expr pos:start="47:19" pos:end="47:20"><name pos:start="47:19" pos:end="47:20">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="47:24" pos:end="47:37">/* reserved */</comment>

        <expr_stmt pos:start="49:9" pos:end="49:33"><expr pos:start="49:9" pos:end="49:32"><name pos:start="49:9" pos:end="49:18">field_size</name> <operator pos:start="49:20" pos:end="49:20">=</operator> <call pos:start="49:22" pos:end="49:32"><name pos:start="49:22" pos:end="49:28">avio_r8</name><argument_list pos:start="49:29" pos:end="49:32">(<argument pos:start="49:30" pos:end="49:31"><expr pos:start="49:30" pos:end="49:31"><name pos:start="49:30" pos:end="49:31">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:28"><expr pos:start="53:5" pos:end="53:27"><name pos:start="53:5" pos:end="53:11">entries</name> <operator pos:start="53:13" pos:end="53:13">=</operator> <call pos:start="53:15" pos:end="53:27"><name pos:start="53:15" pos:end="53:23">avio_rb32</name><argument_list pos:start="53:24" pos:end="53:27">(<argument pos:start="53:25" pos:end="53:26"><expr pos:start="53:25" pos:end="53:26"><name pos:start="53:25" pos:end="53:26">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:98"><expr pos:start="57:5" pos:end="57:97"><call pos:start="57:5" pos:end="57:97"><name pos:start="57:5" pos:end="57:10">av_log</name><argument_list pos:start="57:11" pos:end="57:97">(<argument pos:start="57:12" pos:end="57:16"><expr pos:start="57:12" pos:end="57:16"><name pos:start="57:12" pos:end="57:16"><name pos:start="57:12" pos:end="57:12">c</name><operator pos:start="57:13" pos:end="57:14">-&gt;</operator><name pos:start="57:15" pos:end="57:16">fc</name></name></expr></argument>, <argument pos:start="57:19" pos:end="57:30"><expr pos:start="57:19" pos:end="57:30"><name pos:start="57:19" pos:end="57:30">AV_LOG_TRACE</name></expr></argument>, <argument pos:start="57:33" pos:end="57:70"><expr pos:start="57:33" pos:end="57:70"><literal type="string" pos:start="57:33" pos:end="57:70">"sample_size = %d sample_count = %d\n"</literal></expr></argument>, <argument pos:start="57:73" pos:end="57:87"><expr pos:start="57:73" pos:end="57:87"><name pos:start="57:73" pos:end="57:87"><name pos:start="57:73" pos:end="57:74">sc</name><operator pos:start="57:75" pos:end="57:76">-&gt;</operator><name pos:start="57:77" pos:end="57:87">sample_size</name></name></expr></argument>, <argument pos:start="57:90" pos:end="57:96"><expr pos:start="57:90" pos:end="57:96"><name pos:start="57:90" pos:end="57:96">entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:31"><expr pos:start="61:5" pos:end="61:30"><name pos:start="61:5" pos:end="61:20"><name pos:start="61:5" pos:end="61:6">sc</name><operator pos:start="61:7" pos:end="61:8">-&gt;</operator><name pos:start="61:9" pos:end="61:20">sample_count</name></name> <operator pos:start="61:22" pos:end="61:22">=</operator> <name pos:start="61:24" pos:end="61:30">entries</name></expr>;</expr_stmt>

    <if_stmt pos:start="63:5" pos:end="65:17"><if pos:start="63:5" pos:end="65:17">if <condition pos:start="63:8" pos:end="63:20">(<expr pos:start="63:9" pos:end="63:19"><name pos:start="63:9" pos:end="63:19">sample_size</name></expr>)</condition><block type="pseudo" pos:start="65:9" pos:end="65:17"><block_content pos:start="65:9" pos:end="65:17">

        <return pos:start="65:9" pos:end="65:17">return <expr pos:start="65:16" pos:end="65:16"><literal type="number" pos:start="65:16" pos:end="65:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="69:5" pos:end="75:5"><if pos:start="69:5" pos:end="75:5">if <condition pos:start="69:8" pos:end="69:83">(<expr pos:start="69:9" pos:end="69:82"><name pos:start="69:9" pos:end="69:18">field_size</name> <operator pos:start="69:20" pos:end="69:21">!=</operator> <literal type="number" pos:start="69:23" pos:end="69:23">4</literal> <operator pos:start="69:25" pos:end="69:26">&amp;&amp;</operator> <name pos:start="69:28" pos:end="69:37">field_size</name> <operator pos:start="69:39" pos:end="69:40">!=</operator> <literal type="number" pos:start="69:42" pos:end="69:42">8</literal> <operator pos:start="69:44" pos:end="69:45">&amp;&amp;</operator> <name pos:start="69:47" pos:end="69:56">field_size</name> <operator pos:start="69:58" pos:end="69:59">!=</operator> <literal type="number" pos:start="69:61" pos:end="69:62">16</literal> <operator pos:start="69:64" pos:end="69:65">&amp;&amp;</operator> <name pos:start="69:67" pos:end="69:76">field_size</name> <operator pos:start="69:78" pos:end="69:79">!=</operator> <literal type="number" pos:start="69:81" pos:end="69:82">32</literal></expr>)</condition> <block pos:start="69:85" pos:end="75:5">{<block_content pos:start="71:9" pos:end="73:35">

        <expr_stmt pos:start="71:9" pos:end="71:82"><expr pos:start="71:9" pos:end="71:81"><call pos:start="71:9" pos:end="71:81"><name pos:start="71:9" pos:end="71:14">av_log</name><argument_list pos:start="71:15" pos:end="71:81">(<argument pos:start="71:16" pos:end="71:20"><expr pos:start="71:16" pos:end="71:20"><name pos:start="71:16" pos:end="71:20"><name pos:start="71:16" pos:end="71:16">c</name><operator pos:start="71:17" pos:end="71:18">-&gt;</operator><name pos:start="71:19" pos:end="71:20">fc</name></name></expr></argument>, <argument pos:start="71:23" pos:end="71:34"><expr pos:start="71:23" pos:end="71:34"><name pos:start="71:23" pos:end="71:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="71:37" pos:end="71:68"><expr pos:start="71:37" pos:end="71:68"><literal type="string" pos:start="71:37" pos:end="71:68">"Invalid sample field size %d\n"</literal></expr></argument>, <argument pos:start="71:71" pos:end="71:80"><expr pos:start="71:71" pos:end="71:80"><name pos:start="71:71" pos:end="71:80">field_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="73:9" pos:end="73:35">return <expr pos:start="73:16" pos:end="73:34"><name pos:start="73:16" pos:end="73:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="79:5" pos:end="81:17"><if pos:start="79:5" pos:end="81:17">if <condition pos:start="79:8" pos:end="79:17">(<expr pos:start="79:9" pos:end="79:16"><operator pos:start="79:9" pos:end="79:9">!</operator><name pos:start="79:10" pos:end="79:16">entries</name></expr>)</condition><block type="pseudo" pos:start="81:9" pos:end="81:17"><block_content pos:start="81:9" pos:end="81:17">

        <return pos:start="81:9" pos:end="81:17">return <expr pos:start="81:16" pos:end="81:16"><literal type="number" pos:start="81:16" pos:end="81:16">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="83:5" pos:end="85:35"><if pos:start="83:5" pos:end="85:35">if <condition pos:start="83:8" pos:end="83:84">(<expr pos:start="83:9" pos:end="83:83"><name pos:start="83:9" pos:end="83:15">entries</name> <operator pos:start="83:17" pos:end="83:18">&gt;=</operator> <name pos:start="83:20" pos:end="83:27">UINT_MAX</name> <operator pos:start="83:29" pos:end="83:29">/</operator> <sizeof pos:start="83:31" pos:end="83:41">sizeof<argument_list pos:start="83:37" pos:end="83:41">(<argument pos:start="83:38" pos:end="83:40"><expr pos:start="83:38" pos:end="83:40"><name pos:start="83:38" pos:end="83:40">int</name></expr></argument>)</argument_list></sizeof> <operator pos:start="83:43" pos:end="83:44">||</operator> <name pos:start="83:46" pos:end="83:52">entries</name> <operator pos:start="83:54" pos:end="83:55">&gt;=</operator> <operator pos:start="83:57" pos:end="83:57">(</operator><name pos:start="83:58" pos:end="83:65">UINT_MAX</name> <operator pos:start="83:67" pos:end="83:67">-</operator> <literal type="number" pos:start="83:69" pos:end="83:69">4</literal><operator pos:start="83:70" pos:end="83:70">)</operator> <operator pos:start="83:72" pos:end="83:72">/</operator> <name pos:start="83:74" pos:end="83:83">field_size</name></expr>)</condition><block type="pseudo" pos:start="85:9" pos:end="85:35"><block_content pos:start="85:9" pos:end="85:35">

        <return pos:start="85:9" pos:end="85:35">return <expr pos:start="85:16" pos:end="85:34"><name pos:start="85:16" pos:end="85:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:56"><expr pos:start="87:5" pos:end="87:55"><name pos:start="87:5" pos:end="87:20"><name pos:start="87:5" pos:end="87:6">sc</name><operator pos:start="87:7" pos:end="87:8">-&gt;</operator><name pos:start="87:9" pos:end="87:20">sample_sizes</name></name> <operator pos:start="87:22" pos:end="87:22">=</operator> <call pos:start="87:24" pos:end="87:55"><name pos:start="87:24" pos:end="87:32">av_malloc</name><argument_list pos:start="87:33" pos:end="87:55">(<argument pos:start="87:34" pos:end="87:54"><expr pos:start="87:34" pos:end="87:54"><name pos:start="87:34" pos:end="87:40">entries</name> <operator pos:start="87:42" pos:end="87:42">*</operator> <sizeof pos:start="87:44" pos:end="87:54">sizeof<argument_list pos:start="87:50" pos:end="87:54">(<argument pos:start="87:51" pos:end="87:53"><expr pos:start="87:51" pos:end="87:53"><name pos:start="87:51" pos:end="87:53">int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="89:5" pos:end="91:31"><if pos:start="89:5" pos:end="91:31">if <condition pos:start="89:8" pos:end="89:26">(<expr pos:start="89:9" pos:end="89:25"><operator pos:start="89:9" pos:end="89:9">!</operator><name pos:start="89:10" pos:end="89:25"><name pos:start="89:10" pos:end="89:11">sc</name><operator pos:start="89:12" pos:end="89:13">-&gt;</operator><name pos:start="89:14" pos:end="89:25">sample_sizes</name></name></expr>)</condition><block type="pseudo" pos:start="91:9" pos:end="91:31"><block_content pos:start="91:9" pos:end="91:31">

        <return pos:start="91:9" pos:end="91:31">return <expr pos:start="91:16" pos:end="91:30"><call pos:start="91:16" pos:end="91:30"><name pos:start="91:16" pos:end="91:22">AVERROR</name><argument_list pos:start="91:23" pos:end="91:30">(<argument pos:start="91:24" pos:end="91:29"><expr pos:start="91:24" pos:end="91:29"><name pos:start="91:24" pos:end="91:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="95:5" pos:end="95:42"><expr pos:start="95:5" pos:end="95:41"><name pos:start="95:5" pos:end="95:13">num_bytes</name> <operator pos:start="95:15" pos:end="95:15">=</operator> <operator pos:start="95:17" pos:end="95:17">(</operator><name pos:start="95:18" pos:end="95:24">entries</name><operator pos:start="95:25" pos:end="95:25">*</operator><name pos:start="95:26" pos:end="95:35">field_size</name><operator pos:start="95:36" pos:end="95:36">+</operator><literal type="number" pos:start="95:37" pos:end="95:37">4</literal><operator pos:start="95:38" pos:end="95:38">)</operator><operator pos:start="95:39" pos:end="95:40">&gt;&gt;</operator><literal type="number" pos:start="95:41" pos:end="95:41">3</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="99:5" pos:end="99:60"><expr pos:start="99:5" pos:end="99:59"><name pos:start="99:5" pos:end="99:7">buf</name> <operator pos:start="99:9" pos:end="99:9">=</operator> <call pos:start="99:11" pos:end="99:59"><name pos:start="99:11" pos:end="99:19">av_malloc</name><argument_list pos:start="99:20" pos:end="99:59">(<argument pos:start="99:21" pos:end="99:58"><expr pos:start="99:21" pos:end="99:58"><name pos:start="99:21" pos:end="99:29">num_bytes</name><operator pos:start="99:30" pos:end="99:30">+</operator><name pos:start="99:31" pos:end="99:58">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="101:5" pos:end="107:5"><if pos:start="101:5" pos:end="107:5">if <condition pos:start="101:8" pos:end="101:13">(<expr pos:start="101:9" pos:end="101:12"><operator pos:start="101:9" pos:end="101:9">!</operator><name pos:start="101:10" pos:end="101:12">buf</name></expr>)</condition> <block pos:start="101:15" pos:end="107:5">{<block_content pos:start="103:9" pos:end="105:31">

        <expr_stmt pos:start="103:9" pos:end="103:36"><expr pos:start="103:9" pos:end="103:35"><call pos:start="103:9" pos:end="103:35"><name pos:start="103:9" pos:end="103:16">av_freep</name><argument_list pos:start="103:17" pos:end="103:35">(<argument pos:start="103:18" pos:end="103:34"><expr pos:start="103:18" pos:end="103:34"><operator pos:start="103:18" pos:end="103:18">&amp;</operator><name pos:start="103:19" pos:end="103:34"><name pos:start="103:19" pos:end="103:20">sc</name><operator pos:start="103:21" pos:end="103:22">-&gt;</operator><name pos:start="103:23" pos:end="103:34">sample_sizes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="105:9" pos:end="105:31">return <expr pos:start="105:16" pos:end="105:30"><call pos:start="105:16" pos:end="105:30"><name pos:start="105:16" pos:end="105:22">AVERROR</name><argument_list pos:start="105:23" pos:end="105:30">(<argument pos:start="105:24" pos:end="105:29"><expr pos:start="105:24" pos:end="105:29"><name pos:start="105:24" pos:end="105:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="111:5" pos:end="119:5"><if pos:start="111:5" pos:end="119:5">if <condition pos:start="111:8" pos:end="111:50">(<expr pos:start="111:9" pos:end="111:49"><call pos:start="111:9" pos:end="111:37"><name pos:start="111:9" pos:end="111:17">avio_read</name><argument_list pos:start="111:18" pos:end="111:37">(<argument pos:start="111:19" pos:end="111:20"><expr pos:start="111:19" pos:end="111:20"><name pos:start="111:19" pos:end="111:20">pb</name></expr></argument>, <argument pos:start="111:23" pos:end="111:25"><expr pos:start="111:23" pos:end="111:25"><name pos:start="111:23" pos:end="111:25">buf</name></expr></argument>, <argument pos:start="111:28" pos:end="111:36"><expr pos:start="111:28" pos:end="111:36"><name pos:start="111:28" pos:end="111:36">num_bytes</name></expr></argument>)</argument_list></call> <operator pos:start="111:39" pos:end="111:39">&lt;</operator> <name pos:start="111:41" pos:end="111:49">num_bytes</name></expr>)</condition> <block pos:start="111:52" pos:end="119:5">{<block_content pos:start="113:9" pos:end="117:35">

        <expr_stmt pos:start="113:9" pos:end="113:36"><expr pos:start="113:9" pos:end="113:35"><call pos:start="113:9" pos:end="113:35"><name pos:start="113:9" pos:end="113:16">av_freep</name><argument_list pos:start="113:17" pos:end="113:35">(<argument pos:start="113:18" pos:end="113:34"><expr pos:start="113:18" pos:end="113:34"><operator pos:start="113:18" pos:end="113:18">&amp;</operator><name pos:start="113:19" pos:end="113:34"><name pos:start="113:19" pos:end="113:20">sc</name><operator pos:start="113:21" pos:end="113:22">-&gt;</operator><name pos:start="113:23" pos:end="113:34">sample_sizes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:21"><expr pos:start="115:9" pos:end="115:20"><call pos:start="115:9" pos:end="115:20"><name pos:start="115:9" pos:end="115:15">av_free</name><argument_list pos:start="115:16" pos:end="115:20">(<argument pos:start="115:17" pos:end="115:19"><expr pos:start="115:17" pos:end="115:19"><name pos:start="115:17" pos:end="115:19">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="117:9" pos:end="117:35">return <expr pos:start="117:16" pos:end="117:34"><name pos:start="117:16" pos:end="117:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="123:5" pos:end="123:41"><expr pos:start="123:5" pos:end="123:40"><call pos:start="123:5" pos:end="123:40"><name pos:start="123:5" pos:end="123:17">init_get_bits</name><argument_list pos:start="123:18" pos:end="123:40">(<argument pos:start="123:19" pos:end="123:21"><expr pos:start="123:19" pos:end="123:21"><operator pos:start="123:19" pos:end="123:19">&amp;</operator><name pos:start="123:20" pos:end="123:21">gb</name></expr></argument>, <argument pos:start="123:24" pos:end="123:26"><expr pos:start="123:24" pos:end="123:26"><name pos:start="123:24" pos:end="123:26">buf</name></expr></argument>, <argument pos:start="123:29" pos:end="123:39"><expr pos:start="123:29" pos:end="123:39"><literal type="number" pos:start="123:29" pos:end="123:29">8</literal><operator pos:start="123:30" pos:end="123:30">*</operator><name pos:start="123:31" pos:end="123:39">num_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="127:5" pos:end="133:5">for <control pos:start="127:9" pos:end="127:53">(<init pos:start="127:10" pos:end="127:15"><expr pos:start="127:10" pos:end="127:14"><name pos:start="127:10" pos:end="127:10">i</name> <operator pos:start="127:12" pos:end="127:12">=</operator> <literal type="number" pos:start="127:14" pos:end="127:14">0</literal></expr>;</init> <condition pos:start="127:17" pos:end="127:48"><expr pos:start="127:17" pos:end="127:47"><name pos:start="127:17" pos:end="127:17">i</name> <operator pos:start="127:19" pos:end="127:19">&lt;</operator> <name pos:start="127:21" pos:end="127:27">entries</name> <operator pos:start="127:29" pos:end="127:30">&amp;&amp;</operator> <operator pos:start="127:32" pos:end="127:32">!</operator><name pos:start="127:33" pos:end="127:47"><name pos:start="127:33" pos:end="127:34">pb</name><operator pos:start="127:35" pos:end="127:36">-&gt;</operator><name pos:start="127:37" pos:end="127:47">eof_reached</name></name></expr>;</condition> <incr pos:start="127:50" pos:end="127:52"><expr pos:start="127:50" pos:end="127:52"><name pos:start="127:50" pos:end="127:50">i</name><operator pos:start="127:51" pos:end="127:52">++</operator></expr></incr>)</control> <block pos:start="127:55" pos:end="133:5">{<block_content pos:start="129:9" pos:end="131:45">

        <expr_stmt pos:start="129:9" pos:end="129:61"><expr pos:start="129:9" pos:end="129:60"><name pos:start="129:9" pos:end="129:27"><name pos:start="129:9" pos:end="129:10">sc</name><operator pos:start="129:11" pos:end="129:12">-&gt;</operator><name pos:start="129:13" pos:end="129:24">sample_sizes</name><index pos:start="129:25" pos:end="129:27">[<expr pos:start="129:26" pos:end="129:26"><name pos:start="129:26" pos:end="129:26">i</name></expr>]</index></name> <operator pos:start="129:29" pos:end="129:29">=</operator> <call pos:start="129:31" pos:end="129:60"><name pos:start="129:31" pos:end="129:43">get_bits_long</name><argument_list pos:start="129:44" pos:end="129:60">(<argument pos:start="129:45" pos:end="129:47"><expr pos:start="129:45" pos:end="129:47"><operator pos:start="129:45" pos:end="129:45">&amp;</operator><name pos:start="129:46" pos:end="129:47">gb</name></expr></argument>, <argument pos:start="129:50" pos:end="129:59"><expr pos:start="129:50" pos:end="129:59"><name pos:start="129:50" pos:end="129:59">field_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:45"><expr pos:start="131:9" pos:end="131:44"><name pos:start="131:9" pos:end="131:21"><name pos:start="131:9" pos:end="131:10">sc</name><operator pos:start="131:11" pos:end="131:12">-&gt;</operator><name pos:start="131:13" pos:end="131:21">data_size</name></name> <operator pos:start="131:23" pos:end="131:24">+=</operator> <name pos:start="131:26" pos:end="131:44"><name pos:start="131:26" pos:end="131:27">sc</name><operator pos:start="131:28" pos:end="131:29">-&gt;</operator><name pos:start="131:30" pos:end="131:41">sample_sizes</name><index pos:start="131:42" pos:end="131:44">[<expr pos:start="131:43" pos:end="131:43"><name pos:start="131:43" pos:end="131:43">i</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="137:5" pos:end="137:25"><expr pos:start="137:5" pos:end="137:24"><name pos:start="137:5" pos:end="137:20"><name pos:start="137:5" pos:end="137:6">sc</name><operator pos:start="137:7" pos:end="137:8">-&gt;</operator><name pos:start="137:9" pos:end="137:20">sample_count</name></name> <operator pos:start="137:22" pos:end="137:22">=</operator> <name pos:start="137:24" pos:end="137:24">i</name></expr>;</expr_stmt>



    <expr_stmt pos:start="141:5" pos:end="141:17"><expr pos:start="141:5" pos:end="141:16"><call pos:start="141:5" pos:end="141:16"><name pos:start="141:5" pos:end="141:11">av_free</name><argument_list pos:start="141:12" pos:end="141:16">(<argument pos:start="141:13" pos:end="141:15"><expr pos:start="141:13" pos:end="141:15"><name pos:start="141:13" pos:end="141:15">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="145:5" pos:end="147:27"><if pos:start="145:5" pos:end="147:27">if <condition pos:start="145:8" pos:end="145:24">(<expr pos:start="145:9" pos:end="145:23"><name pos:start="145:9" pos:end="145:23"><name pos:start="145:9" pos:end="145:10">pb</name><operator pos:start="145:11" pos:end="145:12">-&gt;</operator><name pos:start="145:13" pos:end="145:23">eof_reached</name></name></expr>)</condition><block type="pseudo" pos:start="147:9" pos:end="147:27"><block_content pos:start="147:9" pos:end="147:27">

        <return pos:start="147:9" pos:end="147:27">return <expr pos:start="147:16" pos:end="147:26"><name pos:start="147:16" pos:end="147:26">AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>



    <return pos:start="151:5" pos:end="151:13">return <expr pos:start="151:12" pos:end="151:12"><literal type="number" pos:start="151:12" pos:end="151:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
