<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2322.c" pos:tabs="8"><function pos:start="1:1" pos:end="115:1"><type pos:start="1:1" pos:end="1:19"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">av_cold</name> <name pos:start="1:16" pos:end="1:19">void</name></type> <name pos:start="1:21" pos:end="1:38">compute_alpha_vlcs</name><parameter_list pos:start="1:39" pos:end="1:44">(<parameter pos:start="1:40" pos:end="1:43"><decl pos:start="1:40" pos:end="1:43"><type pos:start="1:40" pos:end="1:43"><name pos:start="1:40" pos:end="1:43">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="115:1">{<block_content pos:start="5:5" pos:end="113:46">

    <decl_stmt pos:start="5:5" pos:end="5:44"><decl pos:start="5:5" pos:end="5:26"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint16_t</name></type> <name pos:start="5:14" pos:end="5:26"><name pos:start="5:14" pos:end="5:21">run_code</name><index pos:start="5:22" pos:end="5:26">[<expr pos:start="5:23" pos:end="5:25"><literal type="number" pos:start="5:23" pos:end="5:25">129</literal></expr>]</index></name></decl>, <decl pos:start="5:29" pos:end="5:43"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:29" pos:end="5:43"><name pos:start="5:29" pos:end="5:38">level_code</name><index pos:start="5:39" pos:end="5:43">[<expr pos:start="5:40" pos:end="5:42"><literal type="number" pos:start="5:40" pos:end="5:42">256</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:43"><decl pos:start="7:5" pos:end="7:25"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">uint8_t</name></type> <name pos:start="7:13" pos:end="7:25"><name pos:start="7:13" pos:end="7:20">run_bits</name><index pos:start="7:21" pos:end="7:25">[<expr pos:start="7:22" pos:end="7:24"><literal type="number" pos:start="7:22" pos:end="7:24">129</literal></expr>]</index></name></decl>, <decl pos:start="7:28" pos:end="7:42"><type ref="prev" pos:start="7:5" pos:end="7:11"/><name pos:start="7:28" pos:end="7:42"><name pos:start="7:28" pos:end="7:37">level_bits</name><index pos:start="7:38" pos:end="7:42">[<expr pos:start="7:39" pos:end="7:41"><literal type="number" pos:start="7:39" pos:end="7:41">256</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">run</name></decl>, <decl pos:start="9:14" pos:end="9:18"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:14" pos:end="9:18">level</name></decl>;</decl_stmt>



    <for pos:start="13:5" pos:end="41:5">for <control pos:start="13:9" pos:end="13:35">(<init pos:start="13:10" pos:end="13:17"><expr pos:start="13:10" pos:end="13:16"><name pos:start="13:10" pos:end="13:12">run</name> <operator pos:start="13:14" pos:end="13:14">=</operator> <literal type="number" pos:start="13:16" pos:end="13:16">0</literal></expr>;</init> <condition pos:start="13:19" pos:end="13:28"><expr pos:start="13:19" pos:end="13:27"><name pos:start="13:19" pos:end="13:21">run</name> <operator pos:start="13:23" pos:end="13:23">&lt;</operator> <literal type="number" pos:start="13:25" pos:end="13:27">128</literal></expr>;</condition> <incr pos:start="13:30" pos:end="13:34"><expr pos:start="13:30" pos:end="13:34"><name pos:start="13:30" pos:end="13:32">run</name><operator pos:start="13:33" pos:end="13:34">++</operator></expr></incr>)</control> <block pos:start="13:37" pos:end="41:5">{<block_content pos:start="15:9" pos:end="39:9">

        <if_stmt pos:start="15:9" pos:end="39:9"><if pos:start="15:9" pos:end="23:9">if <condition pos:start="15:12" pos:end="15:17">(<expr pos:start="15:13" pos:end="15:16"><operator pos:start="15:13" pos:end="15:13">!</operator><name pos:start="15:14" pos:end="15:16">run</name></expr>)</condition> <block pos:start="15:19" pos:end="23:9">{<block_content pos:start="19:13" pos:end="21:30">

            <comment type="block" pos:start="17:13" pos:end="17:25">/* 0 -&gt; 0. */</comment>

            <expr_stmt pos:start="19:13" pos:end="19:30"><expr pos:start="19:13" pos:end="19:29"><name pos:start="19:13" pos:end="19:25"><name pos:start="19:13" pos:end="19:20">run_code</name><index pos:start="19:21" pos:end="19:25">[<expr pos:start="19:22" pos:end="19:24"><name pos:start="19:22" pos:end="19:24">run</name></expr>]</index></name> <operator pos:start="19:27" pos:end="19:27">=</operator> <literal type="number" pos:start="19:29" pos:end="19:29">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="21:13" pos:end="21:30"><expr pos:start="21:13" pos:end="21:29"><name pos:start="21:13" pos:end="21:25"><name pos:start="21:13" pos:end="21:20">run_bits</name><index pos:start="21:21" pos:end="21:25">[<expr pos:start="21:22" pos:end="21:24"><name pos:start="21:22" pos:end="21:24">run</name></expr>]</index></name> <operator pos:start="21:27" pos:end="21:27">=</operator> <literal type="number" pos:start="21:29" pos:end="21:29">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="23:11" pos:end="31:9">else if <condition pos:start="23:19" pos:end="23:28">(<expr pos:start="23:20" pos:end="23:27"><name pos:start="23:20" pos:end="23:22">run</name> <operator pos:start="23:24" pos:end="23:25">&lt;=</operator> <literal type="number" pos:start="23:27" pos:end="23:27">4</literal></expr>)</condition> <block pos:start="23:30" pos:end="31:9">{<block_content pos:start="27:13" pos:end="29:30">

            <comment type="block" pos:start="25:13" pos:end="25:36">/* 10xx -&gt; xx plus 1. */</comment>

            <expr_stmt pos:start="27:13" pos:end="27:49"><expr pos:start="27:13" pos:end="27:48"><name pos:start="27:13" pos:end="27:25"><name pos:start="27:13" pos:end="27:20">run_code</name><index pos:start="27:21" pos:end="27:25">[<expr pos:start="27:22" pos:end="27:24"><name pos:start="27:22" pos:end="27:24">run</name></expr>]</index></name> <operator pos:start="27:27" pos:end="27:27">=</operator> <operator pos:start="27:29" pos:end="27:29">(</operator><operator pos:start="27:30" pos:end="27:30">(</operator><name pos:start="27:31" pos:end="27:33">run</name> <operator pos:start="27:35" pos:end="27:35">-</operator> <literal type="number" pos:start="27:37" pos:end="27:37">1</literal><operator pos:start="27:38" pos:end="27:38">)</operator> <operator pos:start="27:40" pos:end="27:41">&lt;&lt;</operator> <literal type="number" pos:start="27:43" pos:end="27:43">2</literal><operator pos:start="27:44" pos:end="27:44">)</operator> <operator pos:start="27:46" pos:end="27:46">|</operator> <literal type="number" pos:start="27:48" pos:end="27:48">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="29:13" pos:end="29:30"><expr pos:start="29:13" pos:end="29:29"><name pos:start="29:13" pos:end="29:25"><name pos:start="29:13" pos:end="29:20">run_bits</name><index pos:start="29:21" pos:end="29:25">[<expr pos:start="29:22" pos:end="29:24"><name pos:start="29:22" pos:end="29:24">run</name></expr>]</index></name> <operator pos:start="29:27" pos:end="29:27">=</operator> <literal type="number" pos:start="29:29" pos:end="29:29">4</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="31:11" pos:end="39:9">else <block pos:start="31:16" pos:end="39:9">{<block_content pos:start="35:13" pos:end="37:31">

            <comment type="block" pos:start="33:13" pos:end="33:41">/* 111xxxxxxx -&gt; xxxxxxxx. */</comment>

            <expr_stmt pos:start="35:13" pos:end="35:43"><expr pos:start="35:13" pos:end="35:42"><name pos:start="35:13" pos:end="35:25"><name pos:start="35:13" pos:end="35:20">run_code</name><index pos:start="35:21" pos:end="35:25">[<expr pos:start="35:22" pos:end="35:24"><name pos:start="35:22" pos:end="35:24">run</name></expr>]</index></name> <operator pos:start="35:27" pos:end="35:27">=</operator> <operator pos:start="35:29" pos:end="35:29">(</operator><name pos:start="35:30" pos:end="35:32">run</name> <operator pos:start="35:34" pos:end="35:35">&lt;&lt;</operator> <literal type="number" pos:start="35:37" pos:end="35:37">3</literal><operator pos:start="35:38" pos:end="35:38">)</operator> <operator pos:start="35:40" pos:end="35:40">|</operator> <literal type="number" pos:start="35:42" pos:end="35:42">7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:31"><expr pos:start="37:13" pos:end="37:30"><name pos:start="37:13" pos:end="37:25"><name pos:start="37:13" pos:end="37:20">run_bits</name><index pos:start="37:21" pos:end="37:25">[<expr pos:start="37:22" pos:end="37:24"><name pos:start="37:22" pos:end="37:24">run</name></expr>]</index></name> <operator pos:start="37:27" pos:end="37:27">=</operator> <literal type="number" pos:start="37:29" pos:end="37:30">10</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="45:5" pos:end="45:21">/* 110 -&gt; EOB. */</comment>

    <expr_stmt pos:start="47:5" pos:end="47:22"><expr pos:start="47:5" pos:end="47:21"><name pos:start="47:5" pos:end="47:17"><name pos:start="47:5" pos:end="47:12">run_code</name><index pos:start="47:13" pos:end="47:17">[<expr pos:start="47:14" pos:end="47:16"><literal type="number" pos:start="47:14" pos:end="47:16">128</literal></expr>]</index></name> <operator pos:start="47:19" pos:end="47:19">=</operator> <literal type="number" pos:start="47:21" pos:end="47:21">3</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:22"><expr pos:start="49:5" pos:end="49:21"><name pos:start="49:5" pos:end="49:17"><name pos:start="49:5" pos:end="49:12">run_bits</name><index pos:start="49:13" pos:end="49:17">[<expr pos:start="49:14" pos:end="49:16"><literal type="number" pos:start="49:14" pos:end="49:16">128</literal></expr>]</index></name> <operator pos:start="49:19" pos:end="49:19">=</operator> <literal type="number" pos:start="49:21" pos:end="49:21">3</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="53:5" pos:end="57:44"><expr pos:start="53:5" pos:end="57:43"><call pos:start="53:5" pos:end="57:43"><name pos:start="53:5" pos:end="53:22">INIT_LE_VLC_STATIC</name><argument_list pos:start="53:23" pos:end="57:43">(<argument pos:start="53:24" pos:end="53:46"><expr pos:start="53:24" pos:end="53:46"><operator pos:start="53:24" pos:end="53:24">&amp;</operator><name pos:start="53:25" pos:end="53:46">ff_dc_alpha_run_vlc_le</name></expr></argument>, <argument pos:start="53:49" pos:end="53:62"><expr pos:start="53:49" pos:end="53:62"><name pos:start="53:49" pos:end="53:62">ALPHA_VLC_BITS</name></expr></argument>, <argument pos:start="53:65" pos:end="53:67"><expr pos:start="53:65" pos:end="53:67"><literal type="number" pos:start="53:65" pos:end="53:67">129</literal></expr></argument>,

                       <argument pos:start="55:24" pos:end="55:31"><expr pos:start="55:24" pos:end="55:31"><name pos:start="55:24" pos:end="55:31">run_bits</name></expr></argument>, <argument pos:start="55:34" pos:end="55:34"><expr pos:start="55:34" pos:end="55:34"><literal type="number" pos:start="55:34" pos:end="55:34">1</literal></expr></argument>, <argument pos:start="55:37" pos:end="55:37"><expr pos:start="55:37" pos:end="55:37"><literal type="number" pos:start="55:37" pos:end="55:37">1</literal></expr></argument>,

                       <argument pos:start="57:24" pos:end="57:31"><expr pos:start="57:24" pos:end="57:31"><name pos:start="57:24" pos:end="57:31">run_code</name></expr></argument>, <argument pos:start="57:34" pos:end="57:34"><expr pos:start="57:34" pos:end="57:34"><literal type="number" pos:start="57:34" pos:end="57:34">2</literal></expr></argument>, <argument pos:start="57:37" pos:end="57:37"><expr pos:start="57:37" pos:end="57:37"><literal type="number" pos:start="57:37" pos:end="57:37">2</literal></expr></argument>, <argument pos:start="57:40" pos:end="57:42"><expr pos:start="57:40" pos:end="57:42"><literal type="number" pos:start="57:40" pos:end="57:42">160</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="61:5" pos:end="105:5">for <control pos:start="61:9" pos:end="61:41">(<init pos:start="61:10" pos:end="61:19"><expr pos:start="61:10" pos:end="61:18"><name pos:start="61:10" pos:end="61:14">level</name> <operator pos:start="61:16" pos:end="61:16">=</operator> <literal type="number" pos:start="61:18" pos:end="61:18">0</literal></expr>;</init> <condition pos:start="61:21" pos:end="61:32"><expr pos:start="61:21" pos:end="61:31"><name pos:start="61:21" pos:end="61:25">level</name> <operator pos:start="61:27" pos:end="61:27">&lt;</operator> <literal type="number" pos:start="61:29" pos:end="61:31">256</literal></expr>;</condition> <incr pos:start="61:34" pos:end="61:40"><expr pos:start="61:34" pos:end="61:40"><name pos:start="61:34" pos:end="61:38">level</name><operator pos:start="61:39" pos:end="61:40">++</operator></expr></incr>)</control> <block pos:start="61:43" pos:end="105:5">{<block_content pos:start="63:9" pos:end="103:9">

        <decl_stmt pos:start="63:9" pos:end="63:44"><decl pos:start="63:9" pos:end="63:43"><type pos:start="63:9" pos:end="63:14"><name pos:start="63:9" pos:end="63:14">int8_t</name></type> <name pos:start="63:16" pos:end="63:27">signed_level</name> <init pos:start="63:29" pos:end="63:43">= <expr pos:start="63:31" pos:end="63:43"><operator pos:start="63:31" pos:end="63:31">(</operator><name pos:start="63:32" pos:end="63:37">int8_t</name><operator pos:start="63:38" pos:end="63:38">)</operator><name pos:start="63:39" pos:end="63:43">level</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="65:9" pos:end="65:49"><decl pos:start="65:9" pos:end="65:48"><type pos:start="65:9" pos:end="65:11"><name pos:start="65:9" pos:end="65:11">int</name></type> <name pos:start="65:13" pos:end="65:28">abs_signed_level</name> <init pos:start="65:30" pos:end="65:48">= <expr pos:start="65:32" pos:end="65:48"><call pos:start="65:32" pos:end="65:48"><name pos:start="65:32" pos:end="65:34">abs</name><argument_list pos:start="65:35" pos:end="65:48">(<argument pos:start="65:36" pos:end="65:47"><expr pos:start="65:36" pos:end="65:47"><name pos:start="65:36" pos:end="65:47">signed_level</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="67:9" pos:end="67:46"><decl pos:start="67:9" pos:end="67:45"><type pos:start="67:9" pos:end="67:11"><name pos:start="67:9" pos:end="67:11">int</name></type> <name pos:start="67:13" pos:end="67:16">sign</name> <init pos:start="67:18" pos:end="67:45">= <expr pos:start="67:20" pos:end="67:45"><ternary pos:start="67:20" pos:end="67:45"><condition pos:start="67:20" pos:end="67:39"><expr pos:start="67:20" pos:end="67:37"><operator pos:start="67:20" pos:end="67:20">(</operator><name pos:start="67:21" pos:end="67:32">signed_level</name> <operator pos:start="67:34" pos:end="67:34">&lt;</operator> <literal type="number" pos:start="67:36" pos:end="67:36">0</literal><operator pos:start="67:37" pos:end="67:37">)</operator></expr> ?</condition><then pos:start="67:41" pos:end="67:41"> <expr pos:start="67:41" pos:end="67:41"><literal type="number" pos:start="67:41" pos:end="67:41">1</literal></expr> </then><else pos:start="67:43" pos:end="67:45">: <expr pos:start="67:45" pos:end="67:45"><literal type="number" pos:start="67:45" pos:end="67:45">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="71:9" pos:end="103:9"><if pos:start="71:9" pos:end="79:9">if <condition pos:start="71:12" pos:end="71:34">(<expr pos:start="71:13" pos:end="71:33"><name pos:start="71:13" pos:end="71:28">abs_signed_level</name> <operator pos:start="71:30" pos:end="71:31">==</operator> <literal type="number" pos:start="71:33" pos:end="71:33">1</literal></expr>)</condition> <block pos:start="71:36" pos:end="79:9">{<block_content pos:start="75:13" pos:end="77:34">

            <comment type="block" pos:start="73:13" pos:end="73:57">/* 1s -&gt; -1 or +1 (depending on sign bit). */</comment>

            <expr_stmt pos:start="75:13" pos:end="75:48"><expr pos:start="75:13" pos:end="75:47"><name pos:start="75:13" pos:end="75:29"><name pos:start="75:13" pos:end="75:22">level_code</name><index pos:start="75:23" pos:end="75:29">[<expr pos:start="75:24" pos:end="75:28"><name pos:start="75:24" pos:end="75:28">level</name></expr>]</index></name> <operator pos:start="75:31" pos:end="75:31">=</operator> <operator pos:start="75:33" pos:end="75:33">(</operator><name pos:start="75:34" pos:end="75:37">sign</name> <operator pos:start="75:39" pos:end="75:40">&lt;&lt;</operator> <literal type="number" pos:start="75:42" pos:end="75:42">1</literal><operator pos:start="75:43" pos:end="75:43">)</operator> <operator pos:start="75:45" pos:end="75:45">|</operator> <literal type="number" pos:start="75:47" pos:end="75:47">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:34"><expr pos:start="77:13" pos:end="77:33"><name pos:start="77:13" pos:end="77:29"><name pos:start="77:13" pos:end="77:22">level_bits</name><index pos:start="77:23" pos:end="77:29">[<expr pos:start="77:24" pos:end="77:28"><name pos:start="77:24" pos:end="77:28">level</name></expr>]</index></name> <operator pos:start="77:31" pos:end="77:31">=</operator> <literal type="number" pos:start="77:33" pos:end="77:33">2</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="79:11" pos:end="87:9">else if <condition pos:start="79:19" pos:end="79:66">(<expr pos:start="79:20" pos:end="79:65"><name pos:start="79:20" pos:end="79:35">abs_signed_level</name> <operator pos:start="79:37" pos:end="79:38">&gt;=</operator> <literal type="number" pos:start="79:40" pos:end="79:40">2</literal> <operator pos:start="79:42" pos:end="79:43">&amp;&amp;</operator> <name pos:start="79:45" pos:end="79:60">abs_signed_level</name> <operator pos:start="79:62" pos:end="79:63">&lt;=</operator> <literal type="number" pos:start="79:65" pos:end="79:65">5</literal></expr>)</condition> <block pos:start="79:68" pos:end="87:9">{<block_content pos:start="83:13" pos:end="85:34">

            <comment type="block" pos:start="81:13" pos:end="81:77">/* 01sxx -&gt; xx plus 2 (2..5 or -2..-5, depending on sign bit). */</comment>

            <expr_stmt pos:start="83:13" pos:end="83:80"><expr pos:start="83:13" pos:end="83:79"><name pos:start="83:13" pos:end="83:29"><name pos:start="83:13" pos:end="83:22">level_code</name><index pos:start="83:23" pos:end="83:29">[<expr pos:start="83:24" pos:end="83:28"><name pos:start="83:24" pos:end="83:28">level</name></expr>]</index></name> <operator pos:start="83:31" pos:end="83:31">=</operator> <operator pos:start="83:33" pos:end="83:33">(</operator><operator pos:start="83:34" pos:end="83:34">(</operator><name pos:start="83:35" pos:end="83:50">abs_signed_level</name> <operator pos:start="83:52" pos:end="83:52">-</operator> <literal type="number" pos:start="83:54" pos:end="83:54">2</literal><operator pos:start="83:55" pos:end="83:55">)</operator> <operator pos:start="83:57" pos:end="83:58">&lt;&lt;</operator> <literal type="number" pos:start="83:60" pos:end="83:60">3</literal><operator pos:start="83:61" pos:end="83:61">)</operator> <operator pos:start="83:63" pos:end="83:63">|</operator> <operator pos:start="83:65" pos:end="83:65">(</operator><name pos:start="83:66" pos:end="83:69">sign</name> <operator pos:start="83:71" pos:end="83:72">&lt;&lt;</operator> <literal type="number" pos:start="83:74" pos:end="83:74">2</literal><operator pos:start="83:75" pos:end="83:75">)</operator> <operator pos:start="83:77" pos:end="83:77">|</operator> <literal type="number" pos:start="83:79" pos:end="83:79">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:34"><expr pos:start="85:13" pos:end="85:33"><name pos:start="85:13" pos:end="85:29"><name pos:start="85:13" pos:end="85:22">level_bits</name><index pos:start="85:23" pos:end="85:29">[<expr pos:start="85:24" pos:end="85:28"><name pos:start="85:24" pos:end="85:28">level</name></expr>]</index></name> <operator pos:start="85:31" pos:end="85:31">=</operator> <literal type="number" pos:start="85:33" pos:end="85:33">5</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="87:11" pos:end="103:9">else <block pos:start="87:16" pos:end="103:9">{<block_content pos:start="99:13" pos:end="101:35">

            <comment type="block" pos:start="89:13" pos:end="97:15">/*

             * 00xxxxxxxx -&gt; xxxxxxxx, in two's complement. 0 is technically an

             * illegal code (that would be encoded by increasing run), but it

             * doesn't hurt and simplifies indexing.

             */</comment>

            <expr_stmt pos:start="99:13" pos:end="99:43"><expr pos:start="99:13" pos:end="99:42"><name pos:start="99:13" pos:end="99:29"><name pos:start="99:13" pos:end="99:22">level_code</name><index pos:start="99:23" pos:end="99:29">[<expr pos:start="99:24" pos:end="99:28"><name pos:start="99:24" pos:end="99:28">level</name></expr>]</index></name> <operator pos:start="99:31" pos:end="99:31">=</operator> <name pos:start="99:33" pos:end="99:37">level</name> <operator pos:start="99:39" pos:end="99:40">&lt;&lt;</operator> <literal type="number" pos:start="99:42" pos:end="99:42">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:35"><expr pos:start="101:13" pos:end="101:34"><name pos:start="101:13" pos:end="101:29"><name pos:start="101:13" pos:end="101:22">level_bits</name><index pos:start="101:23" pos:end="101:29">[<expr pos:start="101:24" pos:end="101:28"><name pos:start="101:24" pos:end="101:28">level</name></expr>]</index></name> <operator pos:start="101:31" pos:end="101:31">=</operator> <literal type="number" pos:start="101:33" pos:end="101:34">10</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="109:5" pos:end="113:46"><expr pos:start="109:5" pos:end="113:45"><call pos:start="109:5" pos:end="113:45"><name pos:start="109:5" pos:end="109:22">INIT_LE_VLC_STATIC</name><argument_list pos:start="109:23" pos:end="113:45">(<argument pos:start="109:24" pos:end="109:48"><expr pos:start="109:24" pos:end="109:48"><operator pos:start="109:24" pos:end="109:24">&amp;</operator><name pos:start="109:25" pos:end="109:48">ff_dc_alpha_level_vlc_le</name></expr></argument>, <argument pos:start="109:51" pos:end="109:64"><expr pos:start="109:51" pos:end="109:64"><name pos:start="109:51" pos:end="109:64">ALPHA_VLC_BITS</name></expr></argument>, <argument pos:start="109:67" pos:end="109:69"><expr pos:start="109:67" pos:end="109:69"><literal type="number" pos:start="109:67" pos:end="109:69">256</literal></expr></argument>,

                       <argument pos:start="111:24" pos:end="111:33"><expr pos:start="111:24" pos:end="111:33"><name pos:start="111:24" pos:end="111:33">level_bits</name></expr></argument>, <argument pos:start="111:36" pos:end="111:36"><expr pos:start="111:36" pos:end="111:36"><literal type="number" pos:start="111:36" pos:end="111:36">1</literal></expr></argument>, <argument pos:start="111:39" pos:end="111:39"><expr pos:start="111:39" pos:end="111:39"><literal type="number" pos:start="111:39" pos:end="111:39">1</literal></expr></argument>,

                       <argument pos:start="113:24" pos:end="113:33"><expr pos:start="113:24" pos:end="113:33"><name pos:start="113:24" pos:end="113:33">level_code</name></expr></argument>, <argument pos:start="113:36" pos:end="113:36"><expr pos:start="113:36" pos:end="113:36"><literal type="number" pos:start="113:36" pos:end="113:36">2</literal></expr></argument>, <argument pos:start="113:39" pos:end="113:39"><expr pos:start="113:39" pos:end="113:39"><literal type="number" pos:start="113:39" pos:end="113:39">2</literal></expr></argument>, <argument pos:start="113:42" pos:end="113:44"><expr pos:start="113:42" pos:end="113:44"><literal type="number" pos:start="113:42" pos:end="113:44">288</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
