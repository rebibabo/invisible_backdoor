<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9428.c" pos:tabs="8"><function pos:start="1:1" pos:end="143:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:34">qemu_chr_open_win_stdio</name><parameter_list pos:start="1:35" pos:end="1:74">(<parameter pos:start="1:36" pos:end="1:49"><decl pos:start="1:36" pos:end="1:49"><type pos:start="1:36" pos:end="1:49"><name pos:start="1:36" pos:end="1:43">QemuOpts</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:49">opts</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:73"><decl pos:start="1:52" pos:end="1:73"><type pos:start="1:52" pos:end="1:73"><name pos:start="1:52" pos:end="1:66">CharDriverState</name> <modifier pos:start="1:68" pos:end="1:68">*</modifier><modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:73">_chr</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="143:1">{<block_content pos:start="5:5" pos:end="141:13">

    <decl_stmt pos:start="5:5" pos:end="5:27"><decl pos:start="5:5" pos:end="5:26"><type pos:start="5:5" pos:end="5:23"><name pos:start="5:5" pos:end="5:19">CharDriverState</name>   <modifier pos:start="5:23" pos:end="5:23">*</modifier></type><name pos:start="5:24" pos:end="5:26">chr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:28"><type pos:start="7:5" pos:end="7:23"><name pos:start="7:5" pos:end="7:21">WinStdioCharState</name> <modifier pos:start="7:23" pos:end="7:23">*</modifier></type><name pos:start="7:24" pos:end="7:28">stdio</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:29"><type pos:start="9:5" pos:end="9:9"><name pos:start="9:5" pos:end="9:9">DWORD</name></type>              <name pos:start="9:24" pos:end="9:29">dwMode</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:38"><decl pos:start="11:5" pos:end="11:37"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type>                <name pos:start="11:24" pos:end="11:33">is_console</name> <init pos:start="11:35" pos:end="11:37">= <expr pos:start="11:37" pos:end="11:37"><literal type="number" pos:start="11:37" pos:end="11:37">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="21:5"><if pos:start="15:5" pos:end="21:5">if <condition pos:start="15:8" pos:end="17:71">(<expr pos:start="15:9" pos:end="17:70"><name pos:start="15:9" pos:end="15:24">stdio_nb_clients</name> <operator pos:start="15:26" pos:end="15:27">&gt;=</operator> <name pos:start="15:29" pos:end="15:45">STDIO_MAX_CLIENTS</name>

        <operator pos:start="17:9" pos:end="17:10">||</operator> <operator pos:start="17:12" pos:end="17:12">(</operator><operator pos:start="17:13" pos:end="17:13">(</operator><name pos:start="17:14" pos:end="17:25">display_type</name> <operator pos:start="17:27" pos:end="17:28">!=</operator> <name pos:start="17:30" pos:end="17:41">DT_NOGRAPHIC</name><operator pos:start="17:42" pos:end="17:42">)</operator> <operator pos:start="17:44" pos:end="17:45">&amp;&amp;</operator> <operator pos:start="17:47" pos:end="17:47">(</operator><name pos:start="17:48" pos:end="17:63">stdio_nb_clients</name> <operator pos:start="17:65" pos:end="17:66">!=</operator> <literal type="number" pos:start="17:68" pos:end="17:68">0</literal><operator pos:start="17:69" pos:end="17:69">)</operator><operator pos:start="17:70" pos:end="17:70">)</operator></expr>)</condition> <block pos:start="17:73" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:20">

        <return pos:start="19:9" pos:end="19:20">return <expr pos:start="19:16" pos:end="19:19"><operator pos:start="19:16" pos:end="19:16">-</operator><name pos:start="19:17" pos:end="19:19">EIO</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:47"><expr pos:start="25:5" pos:end="25:46"><name pos:start="25:5" pos:end="25:7">chr</name>   <operator pos:start="25:11" pos:end="25:11">=</operator> <call pos:start="25:13" pos:end="25:46"><name pos:start="25:13" pos:end="25:21">g_malloc0</name><argument_list pos:start="25:22" pos:end="25:46">(<argument pos:start="25:23" pos:end="25:45"><expr pos:start="25:23" pos:end="25:45"><sizeof pos:start="25:23" pos:end="25:45">sizeof<argument_list pos:start="25:29" pos:end="25:45">(<argument pos:start="25:30" pos:end="25:44"><expr pos:start="25:30" pos:end="25:44"><name pos:start="25:30" pos:end="25:44">CharDriverState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:49"><expr pos:start="27:5" pos:end="27:48"><name pos:start="27:5" pos:end="27:9">stdio</name> <operator pos:start="27:11" pos:end="27:11">=</operator> <call pos:start="27:13" pos:end="27:48"><name pos:start="27:13" pos:end="27:21">g_malloc0</name><argument_list pos:start="27:22" pos:end="27:48">(<argument pos:start="27:23" pos:end="27:47"><expr pos:start="27:23" pos:end="27:47"><sizeof pos:start="27:23" pos:end="27:47">sizeof<argument_list pos:start="27:29" pos:end="27:47">(<argument pos:start="27:30" pos:end="27:46"><expr pos:start="27:30" pos:end="27:46"><name pos:start="27:30" pos:end="27:46">WinStdioCharState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:51"><expr pos:start="31:5" pos:end="31:50"><name pos:start="31:5" pos:end="31:17"><name pos:start="31:5" pos:end="31:9">stdio</name><operator pos:start="31:10" pos:end="31:11">-&gt;</operator><name pos:start="31:12" pos:end="31:17">hStdIn</name></name> <operator pos:start="31:19" pos:end="31:19">=</operator> <call pos:start="31:21" pos:end="31:50"><name pos:start="31:21" pos:end="31:32">GetStdHandle</name><argument_list pos:start="31:33" pos:end="31:50">(<argument pos:start="31:34" pos:end="31:49"><expr pos:start="31:34" pos:end="31:49"><name pos:start="31:34" pos:end="31:49">STD_INPUT_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="39:5"><if pos:start="33:5" pos:end="39:5">if <condition pos:start="33:8" pos:end="33:46">(<expr pos:start="33:9" pos:end="33:45"><name pos:start="33:9" pos:end="33:21"><name pos:start="33:9" pos:end="33:13">stdio</name><operator pos:start="33:14" pos:end="33:15">-&gt;</operator><name pos:start="33:16" pos:end="33:21">hStdIn</name></name> <operator pos:start="33:23" pos:end="33:24">==</operator> <name pos:start="33:26" pos:end="33:45">INVALID_HANDLE_VALUE</name></expr>)</condition> <block pos:start="33:48" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:16">

        <expr_stmt pos:start="35:9" pos:end="35:63"><expr pos:start="35:9" pos:end="35:62"><call pos:start="35:9" pos:end="35:62"><name pos:start="35:9" pos:end="35:15">fprintf</name><argument_list pos:start="35:16" pos:end="35:62">(<argument pos:start="35:17" pos:end="35:22"><expr pos:start="35:17" pos:end="35:22"><name pos:start="35:17" pos:end="35:22">stderr</name></expr></argument>, <argument pos:start="35:25" pos:end="35:61"><expr pos:start="35:25" pos:end="35:61"><literal type="string" pos:start="35:25" pos:end="35:61">"cannot open stdio: invalid handle\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:16"><expr pos:start="37:9" pos:end="37:15"><call pos:start="37:9" pos:end="37:15"><name pos:start="37:9" pos:end="37:12">exit</name><argument_list pos:start="37:13" pos:end="37:15">(<argument pos:start="37:14" pos:end="37:14"><expr pos:start="37:14" pos:end="37:14"><literal type="number" pos:start="37:14" pos:end="37:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:61"><expr pos:start="43:5" pos:end="43:60"><name pos:start="43:5" pos:end="43:14">is_console</name> <operator pos:start="43:16" pos:end="43:16">=</operator> <call pos:start="43:18" pos:end="43:55"><name pos:start="43:18" pos:end="43:31">GetConsoleMode</name><argument_list pos:start="43:32" pos:end="43:55">(<argument pos:start="43:33" pos:end="43:45"><expr pos:start="43:33" pos:end="43:45"><name pos:start="43:33" pos:end="43:45"><name pos:start="43:33" pos:end="43:37">stdio</name><operator pos:start="43:38" pos:end="43:39">-&gt;</operator><name pos:start="43:40" pos:end="43:45">hStdIn</name></name></expr></argument>, <argument pos:start="43:48" pos:end="43:54"><expr pos:start="43:48" pos:end="43:54"><operator pos:start="43:48" pos:end="43:48">&amp;</operator><name pos:start="43:49" pos:end="43:54">dwMode</name></expr></argument>)</argument_list></call> <operator pos:start="43:57" pos:end="43:58">!=</operator> <literal type="number" pos:start="43:60" pos:end="43:60">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:27"><expr pos:start="47:5" pos:end="47:26"><name pos:start="47:5" pos:end="47:15"><name pos:start="47:5" pos:end="47:7">chr</name><operator pos:start="47:8" pos:end="47:9">-&gt;</operator><name pos:start="47:10" pos:end="47:15">opaque</name></name>    <operator pos:start="47:20" pos:end="47:20">=</operator> <name pos:start="47:22" pos:end="47:26">stdio</name></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:37"><expr pos:start="49:5" pos:end="49:36"><name pos:start="49:5" pos:end="49:18"><name pos:start="49:5" pos:end="49:7">chr</name><operator pos:start="49:8" pos:end="49:9">-&gt;</operator><name pos:start="49:10" pos:end="49:18">chr_write</name></name> <operator pos:start="49:20" pos:end="49:20">=</operator> <name pos:start="49:22" pos:end="49:36">win_stdio_write</name></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:37"><expr pos:start="51:5" pos:end="51:36"><name pos:start="51:5" pos:end="51:18"><name pos:start="51:5" pos:end="51:7">chr</name><operator pos:start="51:8" pos:end="51:9">-&gt;</operator><name pos:start="51:10" pos:end="51:18">chr_close</name></name> <operator pos:start="51:20" pos:end="51:20">=</operator> <name pos:start="51:22" pos:end="51:36">win_stdio_close</name></expr>;</expr_stmt>



    <if_stmt pos:start="55:5" pos:end="105:5"><if pos:start="55:5" pos:end="105:5">if <condition pos:start="55:8" pos:end="55:30">(<expr pos:start="55:9" pos:end="55:29"><name pos:start="55:9" pos:end="55:24">stdio_nb_clients</name> <operator pos:start="55:26" pos:end="55:27">==</operator> <literal type="number" pos:start="55:29" pos:end="55:29">0</literal></expr>)</condition> <block pos:start="55:32" pos:end="105:5">{<block_content pos:start="57:9" pos:end="103:9">

        <if_stmt pos:start="57:9" pos:end="103:9"><if pos:start="57:9" pos:end="67:9">if <condition pos:start="57:12" pos:end="57:23">(<expr pos:start="57:13" pos:end="57:22"><name pos:start="57:13" pos:end="57:22">is_console</name></expr>)</condition> <block pos:start="57:25" pos:end="67:9">{<block_content pos:start="59:13" pos:end="65:13">

            <if_stmt pos:start="59:13" pos:end="65:13"><if pos:start="59:13" pos:end="65:13">if <condition pos:start="59:16" pos:end="61:63">(<expr pos:start="59:17" pos:end="61:62"><call pos:start="59:17" pos:end="61:62"><name pos:start="59:17" pos:end="59:36">qemu_add_wait_object</name><argument_list pos:start="59:37" pos:end="61:62">(<argument pos:start="59:38" pos:end="59:50"><expr pos:start="59:38" pos:end="59:50"><name pos:start="59:38" pos:end="59:50"><name pos:start="59:38" pos:end="59:42">stdio</name><operator pos:start="59:43" pos:end="59:44">-&gt;</operator><name pos:start="59:45" pos:end="59:50">hStdIn</name></name></expr></argument>,

                                     <argument pos:start="61:38" pos:end="61:56"><expr pos:start="61:38" pos:end="61:56"><name pos:start="61:38" pos:end="61:56">win_stdio_wait_func</name></expr></argument>, <argument pos:start="61:59" pos:end="61:61"><expr pos:start="61:59" pos:end="61:61"><name pos:start="61:59" pos:end="61:61">chr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="61:65" pos:end="65:13">{<block_content pos:start="63:17" pos:end="63:66">

                <expr_stmt pos:start="63:17" pos:end="63:66"><expr pos:start="63:17" pos:end="63:65"><call pos:start="63:17" pos:end="63:65"><name pos:start="63:17" pos:end="63:23">fprintf</name><argument_list pos:start="63:24" pos:end="63:65">(<argument pos:start="63:25" pos:end="63:30"><expr pos:start="63:25" pos:end="63:30"><name pos:start="63:25" pos:end="63:30">stderr</name></expr></argument>, <argument pos:start="63:33" pos:end="63:64"><expr pos:start="63:33" pos:end="63:64"><literal type="string" pos:start="63:33" pos:end="63:64">"qemu_add_wait_object: failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="67:11" pos:end="103:9">else <block pos:start="67:16" pos:end="103:9">{<block_content pos:start="69:13" pos:end="101:13">

            <decl_stmt pos:start="69:13" pos:end="69:25"><decl pos:start="69:13" pos:end="69:24"><type pos:start="69:13" pos:end="69:17"><name pos:start="69:13" pos:end="69:17">DWORD</name></type>   <name pos:start="69:21" pos:end="69:24">dwId</name></decl>;</decl_stmt>



            <expr_stmt pos:start="73:13" pos:end="73:76"><expr pos:start="73:13" pos:end="73:75"><name pos:start="73:13" pos:end="73:35"><name pos:start="73:13" pos:end="73:17">stdio</name><operator pos:start="73:18" pos:end="73:19">-&gt;</operator><name pos:start="73:20" pos:end="73:35">hInputReadyEvent</name></name> <operator pos:start="73:37" pos:end="73:37">=</operator> <call pos:start="73:39" pos:end="73:75"><name pos:start="73:39" pos:end="73:49">CreateEvent</name><argument_list pos:start="73:50" pos:end="73:75">(<argument pos:start="73:51" pos:end="73:54"><expr pos:start="73:51" pos:end="73:54"><name pos:start="73:51" pos:end="73:54">NULL</name></expr></argument>, <argument pos:start="73:57" pos:end="73:61"><expr pos:start="73:57" pos:end="73:61"><name pos:start="73:57" pos:end="73:61">FALSE</name></expr></argument>, <argument pos:start="73:64" pos:end="73:68"><expr pos:start="73:64" pos:end="73:68"><name pos:start="73:64" pos:end="73:68">FALSE</name></expr></argument>, <argument pos:start="73:71" pos:end="73:74"><expr pos:start="73:71" pos:end="73:74"><name pos:start="73:71" pos:end="73:74">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:76"><expr pos:start="75:13" pos:end="75:75"><name pos:start="75:13" pos:end="75:34"><name pos:start="75:13" pos:end="75:17">stdio</name><operator pos:start="75:18" pos:end="75:19">-&gt;</operator><name pos:start="75:20" pos:end="75:34">hInputDoneEvent</name></name>  <operator pos:start="75:37" pos:end="75:37">=</operator> <call pos:start="75:39" pos:end="75:75"><name pos:start="75:39" pos:end="75:49">CreateEvent</name><argument_list pos:start="75:50" pos:end="75:75">(<argument pos:start="75:51" pos:end="75:54"><expr pos:start="75:51" pos:end="75:54"><name pos:start="75:51" pos:end="75:54">NULL</name></expr></argument>, <argument pos:start="75:57" pos:end="75:61"><expr pos:start="75:57" pos:end="75:61"><name pos:start="75:57" pos:end="75:61">FALSE</name></expr></argument>, <argument pos:start="75:64" pos:end="75:68"><expr pos:start="75:64" pos:end="75:68"><name pos:start="75:64" pos:end="75:68">FALSE</name></expr></argument>, <argument pos:start="75:71" pos:end="75:74"><expr pos:start="75:71" pos:end="75:74"><name pos:start="75:71" pos:end="75:74">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="79:59"><expr pos:start="77:13" pos:end="79:58"><name pos:start="77:13" pos:end="77:31"><name pos:start="77:13" pos:end="77:17">stdio</name><operator pos:start="77:18" pos:end="77:19">-&gt;</operator><name pos:start="77:20" pos:end="77:31">hInputThread</name></name>     <operator pos:start="77:37" pos:end="77:37">=</operator> <call pos:start="77:39" pos:end="79:58"><name pos:start="77:39" pos:end="77:50">CreateThread</name><argument_list pos:start="77:51" pos:end="79:58">(<argument pos:start="77:52" pos:end="77:55"><expr pos:start="77:52" pos:end="77:55"><name pos:start="77:52" pos:end="77:55">NULL</name></expr></argument>, <argument pos:start="77:58" pos:end="77:58"><expr pos:start="77:58" pos:end="77:58"><literal type="number" pos:start="77:58" pos:end="77:58">0</literal></expr></argument>, <argument pos:start="77:61" pos:end="77:76"><expr pos:start="77:61" pos:end="77:76"><name pos:start="77:61" pos:end="77:76">win_stdio_thread</name></expr></argument>,

                                            <argument pos:start="79:45" pos:end="79:47"><expr pos:start="79:45" pos:end="79:47"><name pos:start="79:45" pos:end="79:47">chr</name></expr></argument>, <argument pos:start="79:50" pos:end="79:50"><expr pos:start="79:50" pos:end="79:50"><literal type="number" pos:start="79:50" pos:end="79:50">0</literal></expr></argument>, <argument pos:start="79:53" pos:end="79:57"><expr pos:start="79:53" pos:end="79:57"><operator pos:start="79:53" pos:end="79:53">&amp;</operator><name pos:start="79:54" pos:end="79:57">dwId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="83:13" pos:end="93:13"><if pos:start="83:13" pos:end="93:13">if <condition pos:start="83:16" pos:end="87:66">(<expr pos:start="83:17" pos:end="87:65"><name pos:start="83:17" pos:end="83:35"><name pos:start="83:17" pos:end="83:21">stdio</name><operator pos:start="83:22" pos:end="83:23">-&gt;</operator><name pos:start="83:24" pos:end="83:35">hInputThread</name></name> <operator pos:start="83:37" pos:end="83:38">==</operator> <name pos:start="83:40" pos:end="83:59">INVALID_HANDLE_VALUE</name>

                <operator pos:start="85:17" pos:end="85:18">||</operator> <name pos:start="85:20" pos:end="85:42"><name pos:start="85:20" pos:end="85:24">stdio</name><operator pos:start="85:25" pos:end="85:26">-&gt;</operator><name pos:start="85:27" pos:end="85:42">hInputReadyEvent</name></name> <operator pos:start="85:44" pos:end="85:45">==</operator> <name pos:start="85:47" pos:end="85:66">INVALID_HANDLE_VALUE</name>

                <operator pos:start="87:17" pos:end="87:18">||</operator> <name pos:start="87:20" pos:end="87:41"><name pos:start="87:20" pos:end="87:24">stdio</name><operator pos:start="87:25" pos:end="87:26">-&gt;</operator><name pos:start="87:27" pos:end="87:41">hInputDoneEvent</name></name> <operator pos:start="87:43" pos:end="87:44">==</operator> <name pos:start="87:46" pos:end="87:65">INVALID_HANDLE_VALUE</name></expr>)</condition> <block pos:start="87:68" pos:end="93:13">{<block_content pos:start="89:17" pos:end="91:24">

                <expr_stmt pos:start="89:17" pos:end="89:73"><expr pos:start="89:17" pos:end="89:72"><call pos:start="89:17" pos:end="89:72"><name pos:start="89:17" pos:end="89:23">fprintf</name><argument_list pos:start="89:24" pos:end="89:72">(<argument pos:start="89:25" pos:end="89:30"><expr pos:start="89:25" pos:end="89:30"><name pos:start="89:25" pos:end="89:30">stderr</name></expr></argument>, <argument pos:start="89:33" pos:end="89:71"><expr pos:start="89:33" pos:end="89:71"><literal type="string" pos:start="89:33" pos:end="89:71">"cannot create stdio thread or event\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="91:17" pos:end="91:24"><expr pos:start="91:17" pos:end="91:23"><call pos:start="91:17" pos:end="91:23"><name pos:start="91:17" pos:end="91:20">exit</name><argument_list pos:start="91:21" pos:end="91:23">(<argument pos:start="91:22" pos:end="91:22"><expr pos:start="91:22" pos:end="91:22"><literal type="number" pos:start="91:22" pos:end="91:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="95:13" pos:end="101:13"><if pos:start="95:13" pos:end="101:13">if <condition pos:start="95:16" pos:end="97:70">(<expr pos:start="95:17" pos:end="97:69"><call pos:start="95:17" pos:end="97:69"><name pos:start="95:17" pos:end="95:36">qemu_add_wait_object</name><argument_list pos:start="95:37" pos:end="97:69">(<argument pos:start="95:38" pos:end="95:60"><expr pos:start="95:38" pos:end="95:60"><name pos:start="95:38" pos:end="95:60"><name pos:start="95:38" pos:end="95:42">stdio</name><operator pos:start="95:43" pos:end="95:44">-&gt;</operator><name pos:start="95:45" pos:end="95:60">hInputReadyEvent</name></name></expr></argument>,

                                     <argument pos:start="97:38" pos:end="97:63"><expr pos:start="97:38" pos:end="97:63"><name pos:start="97:38" pos:end="97:63">win_stdio_thread_wait_func</name></expr></argument>, <argument pos:start="97:66" pos:end="97:68"><expr pos:start="97:66" pos:end="97:68"><name pos:start="97:66" pos:end="97:68">chr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="97:72" pos:end="101:13">{<block_content pos:start="99:17" pos:end="99:66">

                <expr_stmt pos:start="99:17" pos:end="99:66"><expr pos:start="99:17" pos:end="99:65"><call pos:start="99:17" pos:end="99:65"><name pos:start="99:17" pos:end="99:23">fprintf</name><argument_list pos:start="99:24" pos:end="99:65">(<argument pos:start="99:25" pos:end="99:30"><expr pos:start="99:25" pos:end="99:30"><name pos:start="99:25" pos:end="99:30">stderr</name></expr></argument>, <argument pos:start="99:33" pos:end="99:64"><expr pos:start="99:33" pos:end="99:64"><literal type="string" pos:start="99:33" pos:end="99:64">"qemu_add_wait_object: failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="109:5" pos:end="109:32"><expr pos:start="109:5" pos:end="109:31"><name pos:start="109:5" pos:end="109:10">dwMode</name> <operator pos:start="109:12" pos:end="109:13">|=</operator> <name pos:start="109:15" pos:end="109:31">ENABLE_LINE_INPUT</name></expr>;</expr_stmt>



    <expr_stmt pos:start="113:5" pos:end="113:44"><expr pos:start="113:5" pos:end="113:43"><name pos:start="113:5" pos:end="113:37"><name pos:start="113:5" pos:end="113:17">stdio_clients</name><index pos:start="113:18" pos:end="113:37">[<expr pos:start="113:19" pos:end="113:36"><name pos:start="113:19" pos:end="113:34">stdio_nb_clients</name><operator pos:start="113:35" pos:end="113:36">++</operator></expr>]</index></name> <operator pos:start="113:39" pos:end="113:39">=</operator> <name pos:start="113:41" pos:end="113:43">chr</name></expr>;</expr_stmt>

    <if_stmt pos:start="115:5" pos:end="123:5"><if pos:start="115:5" pos:end="123:5">if <condition pos:start="115:8" pos:end="115:44">(<expr pos:start="115:9" pos:end="115:43"><name pos:start="115:9" pos:end="115:24">stdio_nb_clients</name> <operator pos:start="115:26" pos:end="115:27">==</operator> <literal type="number" pos:start="115:29" pos:end="115:29">1</literal> <operator pos:start="115:31" pos:end="115:32">&amp;&amp;</operator> <name pos:start="115:34" pos:end="115:43">is_console</name></expr>)</condition> <block pos:start="115:46" pos:end="123:5">{<block_content pos:start="121:9" pos:end="121:41">

        <comment type="block" pos:start="117:9" pos:end="117:42">/* set the terminal in raw mode */</comment>

        <comment type="block" pos:start="119:9" pos:end="119:60">/* ENABLE_QUICK_EDIT_MODE | ENABLE_EXTENDED_FLAGS */</comment>

        <expr_stmt pos:start="121:9" pos:end="121:41"><expr pos:start="121:9" pos:end="121:40"><name pos:start="121:9" pos:end="121:14">dwMode</name> <operator pos:start="121:16" pos:end="121:17">|=</operator> <name pos:start="121:19" pos:end="121:40">ENABLE_PROCESSED_INPUT</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="127:5" pos:end="127:42"><expr pos:start="127:5" pos:end="127:41"><call pos:start="127:5" pos:end="127:41"><name pos:start="127:5" pos:end="127:18">SetConsoleMode</name><argument_list pos:start="127:19" pos:end="127:41">(<argument pos:start="127:20" pos:end="127:32"><expr pos:start="127:20" pos:end="127:32"><name pos:start="127:20" pos:end="127:32"><name pos:start="127:20" pos:end="127:24">stdio</name><operator pos:start="127:25" pos:end="127:26">-&gt;</operator><name pos:start="127:27" pos:end="127:32">hStdIn</name></name></expr></argument>, <argument pos:start="127:35" pos:end="127:40"><expr pos:start="127:35" pos:end="127:40"><name pos:start="127:35" pos:end="127:40">dwMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="131:5" pos:end="131:52"><expr pos:start="131:5" pos:end="131:51"><name pos:start="131:5" pos:end="131:21"><name pos:start="131:5" pos:end="131:7">chr</name><operator pos:start="131:8" pos:end="131:9">-&gt;</operator><name pos:start="131:10" pos:end="131:21">chr_set_echo</name></name> <operator pos:start="131:23" pos:end="131:23">=</operator> <name pos:start="131:25" pos:end="131:51">qemu_chr_set_echo_win_stdio</name></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:37"><expr pos:start="133:5" pos:end="133:36"><call pos:start="133:5" pos:end="133:36"><name pos:start="133:5" pos:end="133:24">qemu_chr_fe_set_echo</name><argument_list pos:start="133:25" pos:end="133:36">(<argument pos:start="133:26" pos:end="133:28"><expr pos:start="133:26" pos:end="133:28"><name pos:start="133:26" pos:end="133:28">chr</name></expr></argument>, <argument pos:start="133:31" pos:end="133:35"><expr pos:start="133:31" pos:end="133:35"><name pos:start="133:31" pos:end="133:35">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="137:5" pos:end="137:16"><expr pos:start="137:5" pos:end="137:15"><operator pos:start="137:5" pos:end="137:5">*</operator><name pos:start="137:6" pos:end="137:9">_chr</name> <operator pos:start="137:11" pos:end="137:11">=</operator> <name pos:start="137:13" pos:end="137:15">chr</name></expr>;</expr_stmt>



    <return pos:start="141:5" pos:end="141:13">return <expr pos:start="141:12" pos:end="141:12"><literal type="number" pos:start="141:12" pos:end="141:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
