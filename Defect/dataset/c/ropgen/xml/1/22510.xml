<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22510.c" pos:tabs="8"><function pos:start="1:1" pos:end="31:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:22">gen_mfdcrx</name><parameter_list pos:start="1:23" pos:end="1:41">(<parameter pos:start="1:24" pos:end="1:40"><decl pos:start="1:24" pos:end="1:40"><type pos:start="1:24" pos:end="1:37"><name pos:start="1:24" pos:end="1:35">DisasContext</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:40">ctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="31:1">{<block_content pos:start="7:5" pos:end="30:0">

<cpp:if pos:start="5:1" pos:end="5:29">#<cpp:directive pos:start="5:2" pos:end="5:3">if</cpp:directive> <expr pos:start="5:5" pos:end="5:29"><call pos:start="5:5" pos:end="5:29"><name pos:start="5:5" pos:end="5:11">defined</name><argument_list pos:start="5:12" pos:end="5:29">(<argument pos:start="5:13" pos:end="5:28"><expr pos:start="5:13" pos:end="5:28"><name pos:start="5:13" pos:end="5:28">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="7:5" pos:end="10:0"><expr pos:start="7:5" pos:end="7:51"><call pos:start="7:5" pos:end="7:51"><name pos:start="7:5" pos:end="7:23">gen_inval_exception</name><argument_list pos:start="7:24" pos:end="7:51">(<argument pos:start="7:25" pos:end="7:27"><expr pos:start="7:25" pos:end="7:27"><name pos:start="7:25" pos:end="7:27">ctx</name></expr></argument>, <argument pos:start="7:30" pos:end="7:50"><expr pos:start="7:30" pos:end="7:50"><name pos:start="7:30" pos:end="7:50">POWERPC_EXCP_PRIV_REG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="9:1" pos:end="9:5">#<cpp:directive pos:start="9:2" pos:end="9:5">else</cpp:directive></cpp:else>

    <if_stmt pos:start="11:5" pos:end="17:5"><if pos:start="11:5" pos:end="17:5">if <condition pos:start="11:8" pos:end="11:26">(<expr pos:start="11:9" pos:end="11:25"><call pos:start="11:9" pos:end="11:25"><name pos:start="11:9" pos:end="11:16">unlikely</name><argument_list pos:start="11:17" pos:end="11:25">(<argument pos:start="11:18" pos:end="11:24"><expr pos:start="11:18" pos:end="11:24"><name pos:start="11:18" pos:end="11:24"><name pos:start="11:18" pos:end="11:20">ctx</name><operator pos:start="11:21" pos:end="11:22">-&gt;</operator><name pos:start="11:23" pos:end="11:24">pr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="11:28" pos:end="17:5">{<block_content pos:start="13:9" pos:end="15:15">

        <expr_stmt pos:start="13:9" pos:end="13:56"><expr pos:start="13:9" pos:end="13:55"><call pos:start="13:9" pos:end="13:55"><name pos:start="13:9" pos:end="13:27">gen_inval_exception</name><argument_list pos:start="13:28" pos:end="13:55">(<argument pos:start="13:29" pos:end="13:31"><expr pos:start="13:29" pos:end="13:31"><name pos:start="13:29" pos:end="13:31">ctx</name></expr></argument>, <argument pos:start="13:34" pos:end="13:54"><expr pos:start="13:34" pos:end="13:54"><name pos:start="13:34" pos:end="13:54">POWERPC_EXCP_PRIV_REG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="15:9" pos:end="15:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="19:5" pos:end="19:77">/* NIP cannot be restored if the memory exception comes from an helper */</comment>

    <expr_stmt pos:start="21:5" pos:end="21:38"><expr pos:start="21:5" pos:end="21:37"><call pos:start="21:5" pos:end="21:37"><name pos:start="21:5" pos:end="21:18">gen_update_nip</name><argument_list pos:start="21:19" pos:end="21:37">(<argument pos:start="21:20" pos:end="21:22"><expr pos:start="21:20" pos:end="21:22"><name pos:start="21:20" pos:end="21:22">ctx</name></expr></argument>, <argument pos:start="21:25" pos:end="21:36"><expr pos:start="21:25" pos:end="21:36"><name pos:start="21:25" pos:end="21:32"><name pos:start="21:25" pos:end="21:27">ctx</name><operator pos:start="21:28" pos:end="21:29">-&gt;</operator><name pos:start="21:30" pos:end="21:32">nip</name></name> <operator pos:start="21:34" pos:end="21:34">-</operator> <literal type="number" pos:start="21:36" pos:end="21:36">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="30:0"><expr pos:start="23:5" pos:end="25:49"><call pos:start="23:5" pos:end="25:49"><name pos:start="23:5" pos:end="23:23">gen_helper_load_dcr</name><argument_list pos:start="23:24" pos:end="25:49">(<argument pos:start="23:25" pos:end="23:48"><expr pos:start="23:25" pos:end="23:48"><name pos:start="23:25" pos:end="23:48"><name pos:start="23:25" pos:end="23:31">cpu_gpr</name><index pos:start="23:32" pos:end="23:48">[<expr pos:start="23:33" pos:end="23:47"><call pos:start="23:33" pos:end="23:47"><name pos:start="23:33" pos:end="23:34">rD</name><argument_list pos:start="23:35" pos:end="23:47">(<argument pos:start="23:36" pos:end="23:46"><expr pos:start="23:36" pos:end="23:46"><name pos:start="23:36" pos:end="23:46"><name pos:start="23:36" pos:end="23:38">ctx</name><operator pos:start="23:39" pos:end="23:40">-&gt;</operator><name pos:start="23:41" pos:end="23:46">opcode</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>, <argument pos:start="23:51" pos:end="23:57"><expr pos:start="23:51" pos:end="23:57"><name pos:start="23:51" pos:end="23:57">cpu_env</name></expr></argument>,

                        <argument pos:start="25:25" pos:end="25:48"><expr pos:start="25:25" pos:end="25:48"><name pos:start="25:25" pos:end="25:48"><name pos:start="25:25" pos:end="25:31">cpu_gpr</name><index pos:start="25:32" pos:end="25:48">[<expr pos:start="25:33" pos:end="25:47"><call pos:start="25:33" pos:end="25:47"><name pos:start="25:33" pos:end="25:34">rA</name><argument_list pos:start="25:35" pos:end="25:47">(<argument pos:start="25:36" pos:end="25:46"><expr pos:start="25:36" pos:end="25:46"><name pos:start="25:36" pos:end="25:46"><name pos:start="25:36" pos:end="25:38">ctx</name><operator pos:start="25:39" pos:end="25:40">-&gt;</operator><name pos:start="25:41" pos:end="25:46">opcode</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="27:5" pos:end="27:66">/* Note: Rc update flag set leads to undefined state of Rc0 */</comment>

<cpp:endif pos:start="29:1" pos:end="29:6">#<cpp:directive pos:start="29:2" pos:end="29:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
