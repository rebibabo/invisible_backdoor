<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13797.c" pos:tabs="8"><function pos:start="1:1" pos:end="3141:17"><type pos:start="1:1" pos:end="1:19"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:19">target_ulong</name></type> <name pos:start="1:21" pos:end="1:30">disas_insn</name><parameter_list pos:start="1:31" pos:end="2:53">(<parameter pos:start="1:32" pos:end="1:47"><decl pos:start="1:32" pos:end="1:47"><type pos:start="1:32" pos:end="1:47"><name pos:start="1:32" pos:end="1:42">CPUX86State</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:47">env</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:64"><decl pos:start="1:50" pos:end="1:64"><type pos:start="1:50" pos:end="1:64"><name pos:start="1:50" pos:end="1:61">DisasContext</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:64">s</name></decl></parameter>,
                               <parameter pos:start="2:32" pos:end="2:52"><decl pos:start="2:32" pos:end="2:52"><type pos:start="2:32" pos:end="2:52"><name pos:start="2:32" pos:end="2:43">target_ulong</name></type> <name pos:start="2:45" pos:end="2:52">pc_start</name></decl></parameter>)</parameter_list>
<block pos:start="3:1" pos:end="3141:17">{<block_content pos:start="4:5" pos:end="3141:17">
    <decl_stmt pos:start="4:5" pos:end="4:34"><decl pos:start="4:5" pos:end="4:9"><type pos:start="4:5" pos:end="4:7"><name pos:start="4:5" pos:end="4:7">int</name></type> <name pos:start="4:9" pos:end="4:9">b</name></decl>, <decl pos:start="4:12" pos:end="4:19"><type ref="prev" pos:start="4:5" pos:end="4:7"/><name pos:start="4:12" pos:end="4:19">prefixes</name></decl>, <decl pos:start="4:22" pos:end="4:26"><type ref="prev" pos:start="4:5" pos:end="4:7"/><name pos:start="4:22" pos:end="4:26">aflag</name></decl>, <decl pos:start="4:29" pos:end="4:33"><type ref="prev" pos:start="4:5" pos:end="4:7"/><name pos:start="4:29" pos:end="4:33">dflag</name></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:18"><decl pos:start="5:5" pos:end="5:13"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:13">shift</name></decl>, <decl pos:start="5:16" pos:end="5:17"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:16" pos:end="5:17">ot</name></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:67"><decl pos:start="6:5" pos:end="6:13"><type pos:start="6:5" pos:end="6:7"><name pos:start="6:5" pos:end="6:7">int</name></type> <name pos:start="6:9" pos:end="6:13">modrm</name></decl>, <decl pos:start="6:16" pos:end="6:18"><type ref="prev" pos:start="6:5" pos:end="6:7"/><name pos:start="6:16" pos:end="6:18">reg</name></decl>, <decl pos:start="6:21" pos:end="6:22"><type ref="prev" pos:start="6:5" pos:end="6:7"/><name pos:start="6:21" pos:end="6:22">rm</name></decl>, <decl pos:start="6:25" pos:end="6:27"><type ref="prev" pos:start="6:5" pos:end="6:7"/><name pos:start="6:25" pos:end="6:27">mod</name></decl>, <decl pos:start="6:30" pos:end="6:37"><type ref="prev" pos:start="6:5" pos:end="6:7"/><name pos:start="6:30" pos:end="6:37">reg_addr</name></decl>, <decl pos:start="6:40" pos:end="6:41"><type ref="prev" pos:start="6:5" pos:end="6:7"/><name pos:start="6:40" pos:end="6:41">op</name></decl>, <decl pos:start="6:44" pos:end="6:48"><type ref="prev" pos:start="6:5" pos:end="6:7"/><name pos:start="6:44" pos:end="6:48">opreg</name></decl>, <decl pos:start="6:51" pos:end="6:61"><type ref="prev" pos:start="6:5" pos:end="6:7"/><name pos:start="6:51" pos:end="6:61">offset_addr</name></decl>, <decl pos:start="6:64" pos:end="6:66"><type ref="prev" pos:start="6:5" pos:end="6:7"/><name pos:start="6:64" pos:end="6:66">val</name></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:32"><decl pos:start="7:5" pos:end="7:25"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:16">target_ulong</name></type> <name pos:start="7:18" pos:end="7:25">next_eip</name></decl>, <decl pos:start="7:28" pos:end="7:31"><type ref="prev" pos:start="7:5" pos:end="7:16"/><name pos:start="7:28" pos:end="7:31">tval</name></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:21"><decl pos:start="8:5" pos:end="8:13"><type pos:start="8:5" pos:end="8:7"><name pos:start="8:5" pos:end="8:7">int</name></type> <name pos:start="8:9" pos:end="8:13">rex_w</name></decl>, <decl pos:start="8:16" pos:end="8:20"><type ref="prev" pos:start="8:5" pos:end="8:7"/><name pos:start="8:16" pos:end="8:20">rex_r</name></decl>;</decl_stmt>
    <if_stmt pos:start="9:5" pos:end="3141:17"><if pos:start="9:5" pos:end="3141:17">if <condition pos:start="9:8" pos:end="9:72">(<expr pos:start="9:9" pos:end="9:71"><call pos:start="9:9" pos:end="9:71"><name pos:start="9:9" pos:end="9:16">unlikely</name><argument_list pos:start="9:17" pos:end="9:71">(<argument pos:start="9:18" pos:end="9:70"><expr pos:start="9:18" pos:end="9:70"><call pos:start="9:18" pos:end="9:70"><name pos:start="9:18" pos:end="9:35">qemu_loglevel_mask</name><argument_list pos:start="9:36" pos:end="9:70">(<argument pos:start="9:37" pos:end="9:69"><expr pos:start="9:37" pos:end="9:69"><name pos:start="9:37" pos:end="9:49">CPU_LOG_TB_OP</name> <operator pos:start="9:51" pos:end="9:51">|</operator> <name pos:start="9:53" pos:end="9:69">CPU_LOG_TB_OP_OPT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="9:74" pos:end="3141:17">{<block_content pos:start="10:9" pos:end="3141:17">
        <expr_stmt pos:start="10:9" pos:end="10:43"><expr pos:start="10:9" pos:end="10:42"><call pos:start="10:9" pos:end="10:42"><name pos:start="10:9" pos:end="10:32">tcg_gen_debug_insn_start</name><argument_list pos:start="10:33" pos:end="10:42">(<argument pos:start="10:34" pos:end="10:41"><expr pos:start="10:34" pos:end="10:41"><name pos:start="10:34" pos:end="10:41">pc_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="11:5" pos:end="11:21"><expr pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:9"><name pos:start="11:5" pos:end="11:5">s</name><operator pos:start="11:6" pos:end="11:7">-&gt;</operator><name pos:start="11:8" pos:end="11:9">pc</name></name> <operator pos:start="11:11" pos:end="11:11">=</operator> <name pos:start="11:13" pos:end="11:20">pc_start</name></expr>;</expr_stmt>
    <expr_stmt pos:start="12:5" pos:end="12:17"><expr pos:start="12:5" pos:end="12:16"><name pos:start="12:5" pos:end="12:12">prefixes</name> <operator pos:start="12:14" pos:end="12:14">=</operator> <literal type="number" pos:start="12:16" pos:end="12:16">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="13:5" pos:end="13:21"><expr pos:start="13:5" pos:end="13:20"><name pos:start="13:5" pos:end="13:15"><name pos:start="13:5" pos:end="13:5">s</name><operator pos:start="13:6" pos:end="13:7">-&gt;</operator><name pos:start="13:8" pos:end="13:15">override</name></name> <operator pos:start="13:17" pos:end="13:17">=</operator> <operator pos:start="13:19" pos:end="13:19">-</operator><literal type="number" pos:start="13:20" pos:end="13:20">1</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="14:5" pos:end="14:15"><expr pos:start="14:5" pos:end="14:14"><name pos:start="14:5" pos:end="14:9">rex_w</name> <operator pos:start="14:11" pos:end="14:11">=</operator> <operator pos:start="14:13" pos:end="14:13">-</operator><literal type="number" pos:start="14:14" pos:end="14:14">1</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="15:5" pos:end="17:0"><expr pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:9">rex_r</name> <operator pos:start="15:11" pos:end="15:11">=</operator> <literal type="number" pos:start="15:13" pos:end="15:13">0</literal></expr>;</expr_stmt>
<cpp:ifdef pos:start="16:1" pos:end="16:20">#<cpp:directive pos:start="16:2" pos:end="16:6">ifdef</cpp:directive> <name pos:start="16:8" pos:end="16:20">TARGET_X86_64</name></cpp:ifdef>
    <expr_stmt pos:start="17:5" pos:end="17:17"><expr pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:5">s</name><operator pos:start="17:6" pos:end="17:7">-&gt;</operator><name pos:start="17:8" pos:end="17:12">rex_x</name></name> <operator pos:start="17:14" pos:end="17:14">=</operator> <literal type="number" pos:start="17:16" pos:end="17:16">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="18:5" pos:end="18:17"><expr pos:start="18:5" pos:end="18:16"><name pos:start="18:5" pos:end="18:12"><name pos:start="18:5" pos:end="18:5">s</name><operator pos:start="18:6" pos:end="18:7">-&gt;</operator><name pos:start="18:8" pos:end="18:12">rex_b</name></name> <operator pos:start="18:14" pos:end="18:14">=</operator> <literal type="number" pos:start="18:16" pos:end="18:16">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="19:5" pos:end="21:0"><expr pos:start="19:5" pos:end="19:20"><name pos:start="19:5" pos:end="19:16">x86_64_hregs</name> <operator pos:start="19:18" pos:end="19:18">=</operator> <literal type="number" pos:start="19:20" pos:end="19:20">0</literal></expr>;</expr_stmt>
<cpp:endif pos:start="20:1" pos:end="20:6">#<cpp:directive pos:start="20:2" pos:end="20:6">endif</cpp:directive></cpp:endif>
    <expr_stmt pos:start="21:5" pos:end="21:22"><expr pos:start="21:5" pos:end="21:21"><name pos:start="21:5" pos:end="21:17"><name pos:start="21:5" pos:end="21:5">s</name><operator pos:start="21:6" pos:end="21:7">-&gt;</operator><name pos:start="21:8" pos:end="21:17">rip_offset</name></name> <operator pos:start="21:19" pos:end="21:19">=</operator> <literal type="number" pos:start="21:21" pos:end="21:21">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="21:24" pos:end="21:52">/* for relative ip address */</comment>
    <expr_stmt pos:start="22:5" pos:end="22:17"><expr pos:start="22:5" pos:end="22:16"><name pos:start="22:5" pos:end="22:12"><name pos:start="22:5" pos:end="22:5">s</name><operator pos:start="22:6" pos:end="22:7">-&gt;</operator><name pos:start="22:8" pos:end="22:12">vex_l</name></name> <operator pos:start="22:14" pos:end="22:14">=</operator> <literal type="number" pos:start="22:16" pos:end="22:16">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="23:5" pos:end="23:17"><expr pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:12"><name pos:start="23:5" pos:end="23:5">s</name><operator pos:start="23:6" pos:end="23:7">-&gt;</operator><name pos:start="23:8" pos:end="23:12">vex_v</name></name> <operator pos:start="23:14" pos:end="23:14">=</operator> <literal type="number" pos:start="23:16" pos:end="23:16">0</literal></expr>;</expr_stmt>
 <label pos:start="24:2" pos:end="24:11"><name pos:start="24:2" pos:end="24:10">next_byte</name>:</label>
    <expr_stmt pos:start="25:5" pos:end="25:34"><expr pos:start="25:5" pos:end="25:33"><name pos:start="25:5" pos:end="25:5">b</name> <operator pos:start="25:7" pos:end="25:7">=</operator> <call pos:start="25:9" pos:end="25:33"><name pos:start="25:9" pos:end="25:21">cpu_ldub_code</name><argument_list pos:start="25:22" pos:end="25:33">(<argument pos:start="25:23" pos:end="25:25"><expr pos:start="25:23" pos:end="25:25"><name pos:start="25:23" pos:end="25:25">env</name></expr></argument>, <argument pos:start="25:28" pos:end="25:32"><expr pos:start="25:28" pos:end="25:32"><name pos:start="25:28" pos:end="25:32"><name pos:start="25:28" pos:end="25:28">s</name><operator pos:start="25:29" pos:end="25:30">-&gt;</operator><name pos:start="25:31" pos:end="25:32">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="26:5" pos:end="26:12"><expr pos:start="26:5" pos:end="26:11"><name pos:start="26:5" pos:end="26:9"><name pos:start="26:5" pos:end="26:5">s</name><operator pos:start="26:6" pos:end="26:7">-&gt;</operator><name pos:start="26:8" pos:end="26:9">pc</name></name><operator pos:start="26:10" pos:end="26:11">++</operator></expr>;</expr_stmt>
    <comment type="block" pos:start="27:5" pos:end="27:28">/* Collect prefixes.  */</comment>
    <switch pos:start="28:5" pos:end="3141:17">switch <condition pos:start="28:12" pos:end="28:14">(<expr pos:start="28:13" pos:end="28:13"><name pos:start="28:13" pos:end="28:13">b</name></expr>)</condition> <block pos:start="28:16" pos:end="3141:17">{<block_content pos:start="29:5" pos:end="3141:17">
    <case pos:start="29:5" pos:end="29:14">case <expr pos:start="29:10" pos:end="29:13"><literal type="number" pos:start="29:10" pos:end="29:13">0xf3</literal></expr>:</case>
        <expr_stmt pos:start="30:9" pos:end="30:32"><expr pos:start="30:9" pos:end="30:31"><name pos:start="30:9" pos:end="30:16">prefixes</name> <operator pos:start="30:18" pos:end="30:19">|=</operator> <name pos:start="30:21" pos:end="30:31">PREFIX_REPZ</name></expr>;</expr_stmt>
        <goto pos:start="31:9" pos:end="31:23">goto <name pos:start="31:14" pos:end="31:22">next_byte</name>;</goto>
    <case pos:start="32:5" pos:end="32:14">case <expr pos:start="32:10" pos:end="32:13"><literal type="number" pos:start="32:10" pos:end="32:13">0xf2</literal></expr>:</case>
        <expr_stmt pos:start="33:9" pos:end="33:33"><expr pos:start="33:9" pos:end="33:32"><name pos:start="33:9" pos:end="33:16">prefixes</name> <operator pos:start="33:18" pos:end="33:19">|=</operator> <name pos:start="33:21" pos:end="33:32">PREFIX_REPNZ</name></expr>;</expr_stmt>
        <goto pos:start="34:9" pos:end="34:23">goto <name pos:start="34:14" pos:end="34:22">next_byte</name>;</goto>
    <case pos:start="35:5" pos:end="35:14">case <expr pos:start="35:10" pos:end="35:13"><literal type="number" pos:start="35:10" pos:end="35:13">0xf0</literal></expr>:</case>
        <expr_stmt pos:start="36:9" pos:end="36:32"><expr pos:start="36:9" pos:end="36:31"><name pos:start="36:9" pos:end="36:16">prefixes</name> <operator pos:start="36:18" pos:end="36:19">|=</operator> <name pos:start="36:21" pos:end="36:31">PREFIX_LOCK</name></expr>;</expr_stmt>
        <goto pos:start="37:9" pos:end="37:23">goto <name pos:start="37:14" pos:end="37:22">next_byte</name>;</goto>
    <case pos:start="38:5" pos:end="38:14">case <expr pos:start="38:10" pos:end="38:13"><literal type="number" pos:start="38:10" pos:end="38:13">0x2e</literal></expr>:</case>
        <expr_stmt pos:start="39:9" pos:end="39:27"><expr pos:start="39:9" pos:end="39:26"><name pos:start="39:9" pos:end="39:19"><name pos:start="39:9" pos:end="39:9">s</name><operator pos:start="39:10" pos:end="39:11">-&gt;</operator><name pos:start="39:12" pos:end="39:19">override</name></name> <operator pos:start="39:21" pos:end="39:21">=</operator> <name pos:start="39:23" pos:end="39:26">R_CS</name></expr>;</expr_stmt>
        <goto pos:start="40:9" pos:end="40:23">goto <name pos:start="40:14" pos:end="40:22">next_byte</name>;</goto>
    <case pos:start="41:5" pos:end="41:14">case <expr pos:start="41:10" pos:end="41:13"><literal type="number" pos:start="41:10" pos:end="41:13">0x36</literal></expr>:</case>
        <expr_stmt pos:start="42:9" pos:end="42:27"><expr pos:start="42:9" pos:end="42:26"><name pos:start="42:9" pos:end="42:19"><name pos:start="42:9" pos:end="42:9">s</name><operator pos:start="42:10" pos:end="42:11">-&gt;</operator><name pos:start="42:12" pos:end="42:19">override</name></name> <operator pos:start="42:21" pos:end="42:21">=</operator> <name pos:start="42:23" pos:end="42:26">R_SS</name></expr>;</expr_stmt>
        <goto pos:start="43:9" pos:end="43:23">goto <name pos:start="43:14" pos:end="43:22">next_byte</name>;</goto>
    <case pos:start="44:5" pos:end="44:14">case <expr pos:start="44:10" pos:end="44:13"><literal type="number" pos:start="44:10" pos:end="44:13">0x3e</literal></expr>:</case>
        <expr_stmt pos:start="45:9" pos:end="45:27"><expr pos:start="45:9" pos:end="45:26"><name pos:start="45:9" pos:end="45:19"><name pos:start="45:9" pos:end="45:9">s</name><operator pos:start="45:10" pos:end="45:11">-&gt;</operator><name pos:start="45:12" pos:end="45:19">override</name></name> <operator pos:start="45:21" pos:end="45:21">=</operator> <name pos:start="45:23" pos:end="45:26">R_DS</name></expr>;</expr_stmt>
        <goto pos:start="46:9" pos:end="46:23">goto <name pos:start="46:14" pos:end="46:22">next_byte</name>;</goto>
    <case pos:start="47:5" pos:end="47:14">case <expr pos:start="47:10" pos:end="47:13"><literal type="number" pos:start="47:10" pos:end="47:13">0x26</literal></expr>:</case>
        <expr_stmt pos:start="48:9" pos:end="48:27"><expr pos:start="48:9" pos:end="48:26"><name pos:start="48:9" pos:end="48:19"><name pos:start="48:9" pos:end="48:9">s</name><operator pos:start="48:10" pos:end="48:11">-&gt;</operator><name pos:start="48:12" pos:end="48:19">override</name></name> <operator pos:start="48:21" pos:end="48:21">=</operator> <name pos:start="48:23" pos:end="48:26">R_ES</name></expr>;</expr_stmt>
        <goto pos:start="49:9" pos:end="49:23">goto <name pos:start="49:14" pos:end="49:22">next_byte</name>;</goto>
    <case pos:start="50:5" pos:end="50:14">case <expr pos:start="50:10" pos:end="50:13"><literal type="number" pos:start="50:10" pos:end="50:13">0x64</literal></expr>:</case>
        <expr_stmt pos:start="51:9" pos:end="51:27"><expr pos:start="51:9" pos:end="51:26"><name pos:start="51:9" pos:end="51:19"><name pos:start="51:9" pos:end="51:9">s</name><operator pos:start="51:10" pos:end="51:11">-&gt;</operator><name pos:start="51:12" pos:end="51:19">override</name></name> <operator pos:start="51:21" pos:end="51:21">=</operator> <name pos:start="51:23" pos:end="51:26">R_FS</name></expr>;</expr_stmt>
        <goto pos:start="52:9" pos:end="52:23">goto <name pos:start="52:14" pos:end="52:22">next_byte</name>;</goto>
    <case pos:start="53:5" pos:end="53:14">case <expr pos:start="53:10" pos:end="53:13"><literal type="number" pos:start="53:10" pos:end="53:13">0x65</literal></expr>:</case>
        <expr_stmt pos:start="54:9" pos:end="54:27"><expr pos:start="54:9" pos:end="54:26"><name pos:start="54:9" pos:end="54:19"><name pos:start="54:9" pos:end="54:9">s</name><operator pos:start="54:10" pos:end="54:11">-&gt;</operator><name pos:start="54:12" pos:end="54:19">override</name></name> <operator pos:start="54:21" pos:end="54:21">=</operator> <name pos:start="54:23" pos:end="54:26">R_GS</name></expr>;</expr_stmt>
        <goto pos:start="55:9" pos:end="55:23">goto <name pos:start="55:14" pos:end="55:22">next_byte</name>;</goto>
    <case pos:start="56:5" pos:end="56:14">case <expr pos:start="56:10" pos:end="56:13"><literal type="number" pos:start="56:10" pos:end="56:13">0x66</literal></expr>:</case>
        <expr_stmt pos:start="57:9" pos:end="57:32"><expr pos:start="57:9" pos:end="57:31"><name pos:start="57:9" pos:end="57:16">prefixes</name> <operator pos:start="57:18" pos:end="57:19">|=</operator> <name pos:start="57:21" pos:end="57:31">PREFIX_DATA</name></expr>;</expr_stmt>
        <goto pos:start="58:9" pos:end="58:23">goto <name pos:start="58:14" pos:end="58:22">next_byte</name>;</goto>
    <case pos:start="59:5" pos:end="59:14">case <expr pos:start="59:10" pos:end="59:13"><literal type="number" pos:start="59:10" pos:end="59:13">0x67</literal></expr>:</case>
        <expr_stmt pos:start="60:9" pos:end="60:31"><expr pos:start="60:9" pos:end="60:30"><name pos:start="60:9" pos:end="60:16">prefixes</name> <operator pos:start="60:18" pos:end="60:19">|=</operator> <name pos:start="60:21" pos:end="60:30">PREFIX_ADR</name></expr>;</expr_stmt>
        <goto pos:start="61:9" pos:end="63:0">goto <name pos:start="61:14" pos:end="61:22">next_byte</name>;</goto>
<cpp:ifdef pos:start="62:1" pos:end="62:20">#<cpp:directive pos:start="62:2" pos:end="62:6">ifdef</cpp:directive> <name pos:start="62:8" pos:end="62:20">TARGET_X86_64</name></cpp:ifdef>
    <case pos:start="63:5" pos:end="63:23">case <expr pos:start="63:10" pos:end="63:22"><literal type="number" pos:start="63:10" pos:end="63:13">0x40</literal> <operator pos:start="63:15" pos:end="63:17">...</operator> <literal type="number" pos:start="63:19" pos:end="63:22">0x4f</literal></expr>:</case>
        <if_stmt pos:start="64:9" pos:end="3141:17"><if pos:start="64:9" pos:end="3141:17">if <condition pos:start="64:12" pos:end="64:22">(<expr pos:start="64:13" pos:end="64:21"><call pos:start="64:13" pos:end="64:21"><name pos:start="64:13" pos:end="64:18">CODE64</name><argument_list pos:start="64:19" pos:end="64:21">(<argument pos:start="64:20" pos:end="64:20"><expr pos:start="64:20" pos:end="64:20"><name pos:start="64:20" pos:end="64:20">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="64:24" pos:end="3141:17">{<block_content pos:start="66:13" pos:end="3141:17">
            <comment type="block" pos:start="65:13" pos:end="65:28">/* REX prefix */</comment>
            <expr_stmt pos:start="66:13" pos:end="66:33"><expr pos:start="66:13" pos:end="66:32"><name pos:start="66:13" pos:end="66:17">rex_w</name> <operator pos:start="66:19" pos:end="66:19">=</operator> <operator pos:start="66:21" pos:end="66:21">(</operator><name pos:start="66:22" pos:end="66:22">b</name> <operator pos:start="66:24" pos:end="66:25">&gt;&gt;</operator> <literal type="number" pos:start="66:27" pos:end="66:27">3</literal><operator pos:start="66:28" pos:end="66:28">)</operator> <operator pos:start="66:30" pos:end="66:30">&amp;</operator> <literal type="number" pos:start="66:32" pos:end="66:32">1</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="67:13" pos:end="67:35"><expr pos:start="67:13" pos:end="67:34"><name pos:start="67:13" pos:end="67:17">rex_r</name> <operator pos:start="67:19" pos:end="67:19">=</operator> <operator pos:start="67:21" pos:end="67:21">(</operator><name pos:start="67:22" pos:end="67:22">b</name> <operator pos:start="67:24" pos:end="67:24">&amp;</operator> <literal type="number" pos:start="67:26" pos:end="67:28">0x4</literal><operator pos:start="67:29" pos:end="67:29">)</operator> <operator pos:start="67:31" pos:end="67:32">&lt;&lt;</operator> <literal type="number" pos:start="67:34" pos:end="67:34">1</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="68:13" pos:end="68:38"><expr pos:start="68:13" pos:end="68:37"><name pos:start="68:13" pos:end="68:20"><name pos:start="68:13" pos:end="68:13">s</name><operator pos:start="68:14" pos:end="68:15">-&gt;</operator><name pos:start="68:16" pos:end="68:20">rex_x</name></name> <operator pos:start="68:22" pos:end="68:22">=</operator> <operator pos:start="68:24" pos:end="68:24">(</operator><name pos:start="68:25" pos:end="68:25">b</name> <operator pos:start="68:27" pos:end="68:27">&amp;</operator> <literal type="number" pos:start="68:29" pos:end="68:31">0x2</literal><operator pos:start="68:32" pos:end="68:32">)</operator> <operator pos:start="68:34" pos:end="68:35">&lt;&lt;</operator> <literal type="number" pos:start="68:37" pos:end="68:37">2</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="69:13" pos:end="69:38"><expr pos:start="69:13" pos:end="69:37"><call pos:start="69:13" pos:end="69:20"><name pos:start="69:13" pos:end="69:17">REX_B</name><argument_list pos:start="69:18" pos:end="69:20">(<argument pos:start="69:19" pos:end="69:19"><expr pos:start="69:19" pos:end="69:19"><name pos:start="69:19" pos:end="69:19">s</name></expr></argument>)</argument_list></call> <operator pos:start="69:22" pos:end="69:22">=</operator> <operator pos:start="69:24" pos:end="69:24">(</operator><name pos:start="69:25" pos:end="69:25">b</name> <operator pos:start="69:27" pos:end="69:27">&amp;</operator> <literal type="number" pos:start="69:29" pos:end="69:31">0x1</literal><operator pos:start="69:32" pos:end="69:32">)</operator> <operator pos:start="69:34" pos:end="69:35">&lt;&lt;</operator> <literal type="number" pos:start="69:37" pos:end="69:37">3</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="70:13" pos:end="70:29"><expr pos:start="70:13" pos:end="70:28"><name pos:start="70:13" pos:end="70:24">x86_64_hregs</name> <operator pos:start="70:26" pos:end="70:26">=</operator> <literal type="number" pos:start="70:28" pos:end="70:28">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="70:31" pos:end="70:75">/* select uniform byte register addressing */</comment>
            <goto pos:start="71:13" pos:end="71:27">goto <name pos:start="71:18" pos:end="71:26">next_byte</name>;</goto>
        <break pos:start="72:9" pos:end="74:0">break;</break>
<cpp:endif pos:start="73:1" pos:end="73:6">#<cpp:directive pos:start="73:2" pos:end="73:6">endif</cpp:directive></cpp:endif>
    <case pos:start="74:5" pos:end="74:14">case <expr pos:start="74:10" pos:end="74:13"><literal type="number" pos:start="74:10" pos:end="74:13">0xc5</literal></expr>:</case> <comment type="block" pos:start="74:16" pos:end="74:31">/* 2-byte VEX */</comment>
    <case pos:start="75:5" pos:end="75:14">case <expr pos:start="75:10" pos:end="75:13"><literal type="number" pos:start="75:10" pos:end="75:13">0xc4</literal></expr>:</case> <comment type="block" pos:start="75:16" pos:end="75:31">/* 3-byte VEX */</comment>
        <comment type="block" pos:start="76:9" pos:end="77:55">/* VEX prefixes cannot be used except in 32-bit mode.
           Otherwise the instruction is LES or LDS.  */</comment>
        <if_stmt pos:start="78:9" pos:end="3141:17"><if pos:start="78:9" pos:end="3141:17">if <condition pos:start="78:12" pos:end="78:34">(<expr pos:start="78:13" pos:end="78:33"><name pos:start="78:13" pos:end="78:21"><name pos:start="78:13" pos:end="78:13">s</name><operator pos:start="78:14" pos:end="78:15">-&gt;</operator><name pos:start="78:16" pos:end="78:21">code32</name></name> <operator pos:start="78:23" pos:end="78:24">&amp;&amp;</operator> <operator pos:start="78:26" pos:end="78:26">!</operator><name pos:start="78:27" pos:end="78:33"><name pos:start="78:27" pos:end="78:27">s</name><operator pos:start="78:28" pos:end="78:29">-&gt;</operator><name pos:start="78:30" pos:end="78:33">vm86</name></name></expr>)</condition> <block pos:start="78:36" pos:end="3141:17">{<block_content pos:start="79:13" pos:end="3141:17">
            <decl_stmt pos:start="79:13" pos:end="81:14"><decl pos:start="79:13" pos:end="81:13"><type pos:start="79:13" pos:end="79:28"><specifier pos:start="79:13" pos:end="79:18">static</specifier> <specifier pos:start="79:20" pos:end="79:24">const</specifier> <name pos:start="79:26" pos:end="79:28">int</name></type> <name pos:start="79:30" pos:end="79:41"><name pos:start="79:30" pos:end="79:38">pp_prefix</name><index pos:start="79:39" pos:end="79:41">[<expr pos:start="79:40" pos:end="79:40"><literal type="number" pos:start="79:40" pos:end="79:40">4</literal></expr>]</index></name> <init pos:start="79:43" pos:end="81:13">= <expr pos:start="79:45" pos:end="81:13"><block pos:start="79:45" pos:end="81:13">{
                <expr pos:start="80:17" pos:end="80:17"><literal type="number" pos:start="80:17" pos:end="80:17">0</literal></expr>, <expr pos:start="80:20" pos:end="80:30"><name pos:start="80:20" pos:end="80:30">PREFIX_DATA</name></expr>, <expr pos:start="80:33" pos:end="80:43"><name pos:start="80:33" pos:end="80:43">PREFIX_REPZ</name></expr>, <expr pos:start="80:46" pos:end="80:57"><name pos:start="80:46" pos:end="80:57">PREFIX_REPNZ</name></expr>
            }</block></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="82:13" pos:end="82:55"><decl pos:start="82:13" pos:end="82:20"><type pos:start="82:13" pos:end="82:15"><name pos:start="82:13" pos:end="82:15">int</name></type> <name pos:start="82:17" pos:end="82:20">vex3</name></decl>, <decl pos:start="82:23" pos:end="82:54"><type ref="prev" pos:start="82:13" pos:end="82:15"/><name pos:start="82:23" pos:end="82:26">vex2</name> <init pos:start="82:28" pos:end="82:54">= <expr pos:start="82:30" pos:end="82:54"><call pos:start="82:30" pos:end="82:54"><name pos:start="82:30" pos:end="82:42">cpu_ldub_code</name><argument_list pos:start="82:43" pos:end="82:54">(<argument pos:start="82:44" pos:end="82:46"><expr pos:start="82:44" pos:end="82:46"><name pos:start="82:44" pos:end="82:46">env</name></expr></argument>, <argument pos:start="82:49" pos:end="82:53"><expr pos:start="82:49" pos:end="82:53"><name pos:start="82:49" pos:end="82:53"><name pos:start="82:49" pos:end="82:49">s</name><operator pos:start="82:50" pos:end="82:51">-&gt;</operator><name pos:start="82:52" pos:end="82:53">pc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt pos:start="83:13" pos:end="3141:17"><if pos:start="83:13" pos:end="3141:17">if <condition pos:start="83:16" pos:end="83:52">(<expr pos:start="83:17" pos:end="83:51"><operator pos:start="83:17" pos:end="83:17">!</operator><call pos:start="83:18" pos:end="83:26"><name pos:start="83:18" pos:end="83:23">CODE64</name><argument_list pos:start="83:24" pos:end="83:26">(<argument pos:start="83:25" pos:end="83:25"><expr pos:start="83:25" pos:end="83:25"><name pos:start="83:25" pos:end="83:25">s</name></expr></argument>)</argument_list></call> <operator pos:start="83:28" pos:end="83:29">&amp;&amp;</operator> <operator pos:start="83:31" pos:end="83:31">(</operator><name pos:start="83:32" pos:end="83:35">vex2</name> <operator pos:start="83:37" pos:end="83:37">&amp;</operator> <literal type="number" pos:start="83:39" pos:end="83:42">0xc0</literal><operator pos:start="83:43" pos:end="83:43">)</operator> <operator pos:start="83:45" pos:end="83:46">!=</operator> <literal type="number" pos:start="83:48" pos:end="83:51">0xc0</literal></expr>)</condition> <block pos:start="83:54" pos:end="3141:17">{<block_content pos:start="86:17" pos:end="3141:17">
                <comment type="block" pos:start="84:17" pos:end="85:63">/* 4.1.4.6: In 32-bit mode, bits [7:6] must be 11b,
                   otherwise the instruction is LES or LDS.  */</comment>
                <break pos:start="86:17" pos:end="86:22">break;</break>
            <expr_stmt pos:start="87:13" pos:end="87:20"><expr pos:start="87:13" pos:end="87:19"><name pos:start="87:13" pos:end="87:17"><name pos:start="87:13" pos:end="87:13">s</name><operator pos:start="87:14" pos:end="87:15">-&gt;</operator><name pos:start="87:16" pos:end="87:17">pc</name></name><operator pos:start="87:18" pos:end="87:19">++</operator></expr>;</expr_stmt>
            <comment type="block" pos:start="88:13" pos:end="88:78">/* 4.1.1-4.1.3: No preceding lock, 66, f2, f3, or rex prefixes. */</comment>
            <if_stmt pos:start="89:13" pos:end="3141:17"><if pos:start="89:13" pos:end="3141:17">if <condition pos:start="89:16" pos:end="90:57">(<expr pos:start="89:17" pos:end="90:56"><name pos:start="89:17" pos:end="89:24">prefixes</name> <operator pos:start="89:26" pos:end="89:26">&amp;</operator> <operator pos:start="89:28" pos:end="89:28">(</operator><name pos:start="89:29" pos:end="89:39">PREFIX_REPZ</name> <operator pos:start="89:41" pos:end="89:41">|</operator> <name pos:start="89:43" pos:end="89:54">PREFIX_REPNZ</name>
                            <operator pos:start="90:29" pos:end="90:29">|</operator> <name pos:start="90:31" pos:end="90:41">PREFIX_LOCK</name> <operator pos:start="90:43" pos:end="90:43">|</operator> <name pos:start="90:45" pos:end="90:55">PREFIX_DATA</name><operator pos:start="90:56" pos:end="90:56">)</operator></expr>)</condition> <block pos:start="90:59" pos:end="3141:17">{<block_content pos:start="92:13" pos:end="3141:17">
<cpp:ifdef pos:start="91:1" pos:end="91:20">#<cpp:directive pos:start="91:2" pos:end="91:6">ifdef</cpp:directive> <name pos:start="91:8" pos:end="91:20">TARGET_X86_64</name></cpp:ifdef>
            <if_stmt pos:start="92:13" pos:end="3141:17"><if pos:start="92:13" pos:end="3141:17">if <condition pos:start="92:16" pos:end="92:29">(<expr pos:start="92:17" pos:end="92:28"><name pos:start="92:17" pos:end="92:28">x86_64_hregs</name></expr>)</condition> <block pos:start="92:31" pos:end="3141:17">{<block_content pos:start="94:13" pos:end="3141:17">
<cpp:endif pos:start="93:1" pos:end="93:6">#<cpp:directive pos:start="93:2" pos:end="93:6">endif</cpp:directive></cpp:endif>
            <expr_stmt pos:start="94:13" pos:end="94:37"><expr pos:start="94:13" pos:end="94:36"><name pos:start="94:13" pos:end="94:17">rex_r</name> <operator pos:start="94:19" pos:end="94:19">=</operator> <operator pos:start="94:21" pos:end="94:21">(</operator><operator pos:start="94:22" pos:end="94:22">~</operator><name pos:start="94:23" pos:end="94:26">vex2</name> <operator pos:start="94:28" pos:end="94:29">&gt;&gt;</operator> <literal type="number" pos:start="94:31" pos:end="94:31">4</literal><operator pos:start="94:32" pos:end="94:32">)</operator> <operator pos:start="94:34" pos:end="94:34">&amp;</operator> <literal type="number" pos:start="94:36" pos:end="94:36">8</literal></expr>;</expr_stmt>
            <if_stmt pos:start="95:13" pos:end="3141:17"><if pos:start="95:13" pos:end="98:13">if <condition pos:start="95:16" pos:end="95:26">(<expr pos:start="95:17" pos:end="95:25"><name pos:start="95:17" pos:end="95:17">b</name> <operator pos:start="95:19" pos:end="95:20">==</operator> <literal type="number" pos:start="95:22" pos:end="95:25">0xc5</literal></expr>)</condition> <block pos:start="95:28" pos:end="98:13">{<block_content pos:start="96:17" pos:end="97:48">
                <expr_stmt pos:start="96:17" pos:end="96:28"><expr pos:start="96:17" pos:end="96:27"><name pos:start="96:17" pos:end="96:20">vex3</name> <operator pos:start="96:22" pos:end="96:22">=</operator> <name pos:start="96:24" pos:end="96:27">vex2</name></expr>;</expr_stmt>
                <expr_stmt pos:start="97:17" pos:end="97:48"><expr pos:start="97:17" pos:end="97:47"><name pos:start="97:17" pos:end="97:17">b</name> <operator pos:start="97:19" pos:end="97:19">=</operator> <call pos:start="97:21" pos:end="97:47"><name pos:start="97:21" pos:end="97:33">cpu_ldub_code</name><argument_list pos:start="97:34" pos:end="97:47">(<argument pos:start="97:35" pos:end="97:37"><expr pos:start="97:35" pos:end="97:37"><name pos:start="97:35" pos:end="97:37">env</name></expr></argument>, <argument pos:start="97:40" pos:end="97:46"><expr pos:start="97:40" pos:end="97:46"><name pos:start="97:40" pos:end="97:44"><name pos:start="97:40" pos:end="97:40">s</name><operator pos:start="97:41" pos:end="97:42">-&gt;</operator><name pos:start="97:43" pos:end="97:44">pc</name></name><operator pos:start="97:45" pos:end="97:46">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="98:15" pos:end="3141:17">else <block pos:start="98:20" pos:end="3141:17">{<block_content pos:start="100:17" pos:end="3141:17">
<cpp:ifdef pos:start="99:1" pos:end="99:20">#<cpp:directive pos:start="99:2" pos:end="99:6">ifdef</cpp:directive> <name pos:start="99:8" pos:end="99:20">TARGET_X86_64</name></cpp:ifdef>
                <expr_stmt pos:start="100:17" pos:end="100:44"><expr pos:start="100:17" pos:end="100:43"><name pos:start="100:17" pos:end="100:24"><name pos:start="100:17" pos:end="100:17">s</name><operator pos:start="100:18" pos:end="100:19">-&gt;</operator><name pos:start="100:20" pos:end="100:24">rex_x</name></name> <operator pos:start="100:26" pos:end="100:26">=</operator> <operator pos:start="100:28" pos:end="100:28">(</operator><operator pos:start="100:29" pos:end="100:29">~</operator><name pos:start="100:30" pos:end="100:33">vex2</name> <operator pos:start="100:35" pos:end="100:36">&gt;&gt;</operator> <literal type="number" pos:start="100:38" pos:end="100:38">3</literal><operator pos:start="100:39" pos:end="100:39">)</operator> <operator pos:start="100:41" pos:end="100:41">&amp;</operator> <literal type="number" pos:start="100:43" pos:end="100:43">8</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="101:17" pos:end="103:0"><expr pos:start="101:17" pos:end="101:43"><name pos:start="101:17" pos:end="101:24"><name pos:start="101:17" pos:end="101:17">s</name><operator pos:start="101:18" pos:end="101:19">-&gt;</operator><name pos:start="101:20" pos:end="101:24">rex_b</name></name> <operator pos:start="101:26" pos:end="101:26">=</operator> <operator pos:start="101:28" pos:end="101:28">(</operator><operator pos:start="101:29" pos:end="101:29">~</operator><name pos:start="101:30" pos:end="101:33">vex2</name> <operator pos:start="101:35" pos:end="101:36">&gt;&gt;</operator> <literal type="number" pos:start="101:38" pos:end="101:38">2</literal><operator pos:start="101:39" pos:end="101:39">)</operator> <operator pos:start="101:41" pos:end="101:41">&amp;</operator> <literal type="number" pos:start="101:43" pos:end="101:43">8</literal></expr>;</expr_stmt>
<cpp:endif pos:start="102:1" pos:end="102:6">#<cpp:directive pos:start="102:2" pos:end="102:6">endif</cpp:directive></cpp:endif>
                <expr_stmt pos:start="103:17" pos:end="103:51"><expr pos:start="103:17" pos:end="103:50"><name pos:start="103:17" pos:end="103:20">vex3</name> <operator pos:start="103:22" pos:end="103:22">=</operator> <call pos:start="103:24" pos:end="103:50"><name pos:start="103:24" pos:end="103:36">cpu_ldub_code</name><argument_list pos:start="103:37" pos:end="103:50">(<argument pos:start="103:38" pos:end="103:40"><expr pos:start="103:38" pos:end="103:40"><name pos:start="103:38" pos:end="103:40">env</name></expr></argument>, <argument pos:start="103:43" pos:end="103:49"><expr pos:start="103:43" pos:end="103:49"><name pos:start="103:43" pos:end="103:47"><name pos:start="103:43" pos:end="103:43">s</name><operator pos:start="103:44" pos:end="103:45">-&gt;</operator><name pos:start="103:46" pos:end="103:47">pc</name></name><operator pos:start="103:48" pos:end="103:49">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="104:17" pos:end="104:40"><expr pos:start="104:17" pos:end="104:39"><name pos:start="104:17" pos:end="104:21">rex_w</name> <operator pos:start="104:23" pos:end="104:23">=</operator> <operator pos:start="104:25" pos:end="104:25">(</operator><name pos:start="104:26" pos:end="104:29">vex3</name> <operator pos:start="104:31" pos:end="104:32">&gt;&gt;</operator> <literal type="number" pos:start="104:34" pos:end="104:34">7</literal><operator pos:start="104:35" pos:end="104:35">)</operator> <operator pos:start="104:37" pos:end="104:37">&amp;</operator> <literal type="number" pos:start="104:39" pos:end="104:39">1</literal></expr>;</expr_stmt>
                <switch pos:start="105:17" pos:end="3141:17">switch <condition pos:start="105:24" pos:end="105:36">(<expr pos:start="105:25" pos:end="105:35"><name pos:start="105:25" pos:end="105:28">vex2</name> <operator pos:start="105:30" pos:end="105:30">&amp;</operator> <literal type="number" pos:start="105:32" pos:end="105:35">0x1f</literal></expr>)</condition> <block pos:start="105:38" pos:end="3141:17">{<block_content pos:start="106:17" pos:end="3141:17">
                <case pos:start="106:17" pos:end="106:26">case <expr pos:start="106:22" pos:end="106:25"><literal type="number" pos:start="106:22" pos:end="106:25">0x01</literal></expr>:</case> <comment type="block" pos:start="106:28" pos:end="106:66">/* Implied 0f leading opcode bytes.  */</comment>
                    <expr_stmt pos:start="107:21" pos:end="107:60"><expr pos:start="107:21" pos:end="107:59"><name pos:start="107:21" pos:end="107:21">b</name> <operator pos:start="107:23" pos:end="107:23">=</operator> <call pos:start="107:25" pos:end="107:51"><name pos:start="107:25" pos:end="107:37">cpu_ldub_code</name><argument_list pos:start="107:38" pos:end="107:51">(<argument pos:start="107:39" pos:end="107:41"><expr pos:start="107:39" pos:end="107:41"><name pos:start="107:39" pos:end="107:41">env</name></expr></argument>, <argument pos:start="107:44" pos:end="107:50"><expr pos:start="107:44" pos:end="107:50"><name pos:start="107:44" pos:end="107:48"><name pos:start="107:44" pos:end="107:44">s</name><operator pos:start="107:45" pos:end="107:46">-&gt;</operator><name pos:start="107:47" pos:end="107:48">pc</name></name><operator pos:start="107:49" pos:end="107:50">++</operator></expr></argument>)</argument_list></call> <operator pos:start="107:53" pos:end="107:53">|</operator> <literal type="number" pos:start="107:55" pos:end="107:59">0x100</literal></expr>;</expr_stmt>
                    <break pos:start="108:21" pos:end="108:26">break;</break>
                <case pos:start="109:17" pos:end="109:26">case <expr pos:start="109:22" pos:end="109:25"><literal type="number" pos:start="109:22" pos:end="109:25">0x02</literal></expr>:</case> <comment type="block" pos:start="109:28" pos:end="109:69">/* Implied 0f 38 leading opcode bytes.  */</comment>
                    <expr_stmt pos:start="110:21" pos:end="110:30"><expr pos:start="110:21" pos:end="110:29"><name pos:start="110:21" pos:end="110:21">b</name> <operator pos:start="110:23" pos:end="110:23">=</operator> <literal type="number" pos:start="110:25" pos:end="110:29">0x138</literal></expr>;</expr_stmt>
                    <break pos:start="111:21" pos:end="111:26">break;</break>
                <case pos:start="112:17" pos:end="112:26">case <expr pos:start="112:22" pos:end="112:25"><literal type="number" pos:start="112:22" pos:end="112:25">0x03</literal></expr>:</case> <comment type="block" pos:start="112:28" pos:end="112:69">/* Implied 0f 3a leading opcode bytes.  */</comment>
                    <expr_stmt pos:start="113:21" pos:end="113:30"><expr pos:start="113:21" pos:end="113:29"><name pos:start="113:21" pos:end="113:21">b</name> <operator pos:start="113:23" pos:end="113:23">=</operator> <literal type="number" pos:start="113:25" pos:end="113:29">0x13a</literal></expr>;</expr_stmt>
                    <break pos:start="114:21" pos:end="114:26">break;</break>
                <default pos:start="115:17" pos:end="115:24">default:</default>   <comment type="block" pos:start="115:28" pos:end="115:58">/* Reserved for future use.  */</comment>
            <expr_stmt pos:start="116:13" pos:end="116:42"><expr pos:start="116:13" pos:end="116:41"><name pos:start="116:13" pos:end="116:20"><name pos:start="116:13" pos:end="116:13">s</name><operator pos:start="116:14" pos:end="116:15">-&gt;</operator><name pos:start="116:16" pos:end="116:20">vex_v</name></name> <operator pos:start="116:22" pos:end="116:22">=</operator> <operator pos:start="116:24" pos:end="116:24">(</operator><operator pos:start="116:25" pos:end="116:25">~</operator><name pos:start="116:26" pos:end="116:29">vex3</name> <operator pos:start="116:31" pos:end="116:32">&gt;&gt;</operator> <literal type="number" pos:start="116:34" pos:end="116:34">3</literal><operator pos:start="116:35" pos:end="116:35">)</operator> <operator pos:start="116:37" pos:end="116:37">&amp;</operator> <literal type="number" pos:start="116:39" pos:end="116:41">0xf</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="117:13" pos:end="117:39"><expr pos:start="117:13" pos:end="117:38"><name pos:start="117:13" pos:end="117:20"><name pos:start="117:13" pos:end="117:13">s</name><operator pos:start="117:14" pos:end="117:15">-&gt;</operator><name pos:start="117:16" pos:end="117:20">vex_l</name></name> <operator pos:start="117:22" pos:end="117:22">=</operator> <operator pos:start="117:24" pos:end="117:24">(</operator><name pos:start="117:25" pos:end="117:28">vex3</name> <operator pos:start="117:30" pos:end="117:31">&gt;&gt;</operator> <literal type="number" pos:start="117:33" pos:end="117:33">2</literal><operator pos:start="117:34" pos:end="117:34">)</operator> <operator pos:start="117:36" pos:end="117:36">&amp;</operator> <literal type="number" pos:start="117:38" pos:end="117:38">1</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="118:13" pos:end="118:57"><expr pos:start="118:13" pos:end="118:56"><name pos:start="118:13" pos:end="118:20">prefixes</name> <operator pos:start="118:22" pos:end="118:23">|=</operator> <name pos:start="118:25" pos:end="118:43"><name pos:start="118:25" pos:end="118:33">pp_prefix</name><index pos:start="118:34" pos:end="118:43">[<expr pos:start="118:35" pos:end="118:42"><name pos:start="118:35" pos:end="118:38">vex3</name> <operator pos:start="118:40" pos:end="118:40">&amp;</operator> <literal type="number" pos:start="118:42" pos:end="118:42">3</literal></expr>]</index></name> <operator pos:start="118:45" pos:end="118:45">|</operator> <name pos:start="118:47" pos:end="118:56">PREFIX_VEX</name></expr>;</expr_stmt>
        <break pos:start="119:9" pos:end="119:14">break;</break>
    <comment type="block" pos:start="120:5" pos:end="120:33">/* Post-process prefixes.  */</comment>
    <if_stmt pos:start="121:5" pos:end="3141:17"><if pos:start="121:5" pos:end="128:5">if <condition pos:start="121:8" pos:end="121:18">(<expr pos:start="121:9" pos:end="121:17"><call pos:start="121:9" pos:end="121:17"><name pos:start="121:9" pos:end="121:14">CODE64</name><argument_list pos:start="121:15" pos:end="121:17">(<argument pos:start="121:16" pos:end="121:16"><expr pos:start="121:16" pos:end="121:16"><name pos:start="121:16" pos:end="121:16">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="121:20" pos:end="128:5">{<block_content pos:start="125:9" pos:end="127:48">
        <comment type="block" pos:start="122:9" pos:end="124:45">/* In 64-bit mode, the default data size is 32-bit.  Select 64-bit
           data with rex_w, and 16-bit data with 0x66; rex_w takes precedence
           over 0x66 if both are present.  */</comment>
        <expr_stmt pos:start="125:9" pos:end="125:65"><expr pos:start="125:9" pos:end="125:64"><name pos:start="125:9" pos:end="125:13">dflag</name> <operator pos:start="125:15" pos:end="125:15">=</operator> <operator pos:start="125:17" pos:end="125:17">(</operator><ternary pos:start="125:18" pos:end="125:63"><condition pos:start="125:18" pos:end="125:28"><expr pos:start="125:18" pos:end="125:26"><name pos:start="125:18" pos:end="125:22">rex_w</name> <operator pos:start="125:24" pos:end="125:24">&gt;</operator> <literal type="number" pos:start="125:26" pos:end="125:26">0</literal></expr> ?</condition><then pos:start="125:30" pos:end="125:30"> <expr pos:start="125:30" pos:end="125:30"><literal type="number" pos:start="125:30" pos:end="125:30">2</literal></expr> </then><else pos:start="125:32" pos:end="125:63">: <expr pos:start="125:34" pos:end="125:63"><ternary pos:start="125:34" pos:end="125:63"><condition pos:start="125:34" pos:end="125:57"><expr pos:start="125:34" pos:end="125:55"><name pos:start="125:34" pos:end="125:41">prefixes</name> <operator pos:start="125:43" pos:end="125:43">&amp;</operator> <name pos:start="125:45" pos:end="125:55">PREFIX_DATA</name></expr> ?</condition><then pos:start="125:59" pos:end="125:59"> <expr pos:start="125:59" pos:end="125:59"><literal type="number" pos:start="125:59" pos:end="125:59">0</literal></expr> </then><else pos:start="125:61" pos:end="125:63">: <expr pos:start="125:63" pos:end="125:63"><literal type="number" pos:start="125:63" pos:end="125:63">1</literal></expr></else></ternary></expr></else></ternary><operator pos:start="125:64" pos:end="125:64">)</operator></expr>;</expr_stmt>
        <comment type="block" pos:start="126:9" pos:end="126:62">/* In 64-bit mode, 0x67 selects 32-bit addressing.  */</comment>
        <expr_stmt pos:start="127:9" pos:end="127:48"><expr pos:start="127:9" pos:end="127:47"><name pos:start="127:9" pos:end="127:13">aflag</name> <operator pos:start="127:15" pos:end="127:15">=</operator> <operator pos:start="127:17" pos:end="127:17">(</operator><ternary pos:start="127:18" pos:end="127:46"><condition pos:start="127:18" pos:end="127:40"><expr pos:start="127:18" pos:end="127:38"><name pos:start="127:18" pos:end="127:25">prefixes</name> <operator pos:start="127:27" pos:end="127:27">&amp;</operator> <name pos:start="127:29" pos:end="127:38">PREFIX_ADR</name></expr> ?</condition><then pos:start="127:42" pos:end="127:42"> <expr pos:start="127:42" pos:end="127:42"><literal type="number" pos:start="127:42" pos:end="127:42">1</literal></expr> </then><else pos:start="127:44" pos:end="127:46">: <expr pos:start="127:46" pos:end="127:46"><literal type="number" pos:start="127:46" pos:end="127:46">2</literal></expr></else></ternary><operator pos:start="127:47" pos:end="127:47">)</operator></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="128:7" pos:end="3141:17">else <block pos:start="128:12" pos:end="3141:17">{<block_content pos:start="130:9" pos:end="3141:17">
        <comment type="block" pos:start="129:9" pos:end="129:70">/* In 16/32-bit mode, 0x66 selects the opposite data size.  */</comment>
        <expr_stmt pos:start="130:9" pos:end="130:26"><expr pos:start="130:9" pos:end="130:25"><name pos:start="130:9" pos:end="130:13">dflag</name> <operator pos:start="130:15" pos:end="130:15">=</operator> <name pos:start="130:17" pos:end="130:25"><name pos:start="130:17" pos:end="130:17">s</name><operator pos:start="130:18" pos:end="130:19">-&gt;</operator><name pos:start="130:20" pos:end="130:25">code32</name></name></expr>;</expr_stmt>
        <if_stmt pos:start="131:9" pos:end="3141:17"><if pos:start="131:9" pos:end="3141:17">if <condition pos:start="131:12" pos:end="131:35">(<expr pos:start="131:13" pos:end="131:34"><name pos:start="131:13" pos:end="131:20">prefixes</name> <operator pos:start="131:22" pos:end="131:22">&amp;</operator> <name pos:start="131:24" pos:end="131:34">PREFIX_DATA</name></expr>)</condition> <block pos:start="131:37" pos:end="3141:17">{<block_content pos:start="132:13" pos:end="3141:17">
            <expr_stmt pos:start="132:13" pos:end="132:23"><expr pos:start="132:13" pos:end="132:22"><name pos:start="132:13" pos:end="132:17">dflag</name> <operator pos:start="132:19" pos:end="132:20">^=</operator> <literal type="number" pos:start="132:22" pos:end="132:22">1</literal></expr>;</expr_stmt>
        <comment type="block" pos:start="133:9" pos:end="133:71">/* In 16/32-bit mode, 0x67 selects the opposite addressing.  */</comment>
        <expr_stmt pos:start="134:9" pos:end="134:26"><expr pos:start="134:9" pos:end="134:25"><name pos:start="134:9" pos:end="134:13">aflag</name> <operator pos:start="134:15" pos:end="134:15">=</operator> <name pos:start="134:17" pos:end="134:25"><name pos:start="134:17" pos:end="134:17">s</name><operator pos:start="134:18" pos:end="134:19">-&gt;</operator><name pos:start="134:20" pos:end="134:25">code32</name></name></expr>;</expr_stmt>
        <if_stmt pos:start="135:9" pos:end="3141:17"><if pos:start="135:9" pos:end="3141:17">if <condition pos:start="135:12" pos:end="135:34">(<expr pos:start="135:13" pos:end="135:33"><name pos:start="135:13" pos:end="135:20">prefixes</name> <operator pos:start="135:22" pos:end="135:22">&amp;</operator> <name pos:start="135:24" pos:end="135:33">PREFIX_ADR</name></expr>)</condition> <block pos:start="135:36" pos:end="3141:17">{<block_content pos:start="136:13" pos:end="3141:17">
            <expr_stmt pos:start="136:13" pos:end="136:23"><expr pos:start="136:13" pos:end="136:22"><name pos:start="136:13" pos:end="136:17">aflag</name> <operator pos:start="136:19" pos:end="136:20">^=</operator> <literal type="number" pos:start="136:22" pos:end="136:22">1</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="137:5" pos:end="137:25"><expr pos:start="137:5" pos:end="137:24"><name pos:start="137:5" pos:end="137:13"><name pos:start="137:5" pos:end="137:5">s</name><operator pos:start="137:6" pos:end="137:7">-&gt;</operator><name pos:start="137:8" pos:end="137:13">prefix</name></name> <operator pos:start="137:15" pos:end="137:15">=</operator> <name pos:start="137:17" pos:end="137:24">prefixes</name></expr>;</expr_stmt>
    <expr_stmt pos:start="138:5" pos:end="138:21"><expr pos:start="138:5" pos:end="138:20"><name pos:start="138:5" pos:end="138:12"><name pos:start="138:5" pos:end="138:5">s</name><operator pos:start="138:6" pos:end="138:7">-&gt;</operator><name pos:start="138:8" pos:end="138:12">aflag</name></name> <operator pos:start="138:14" pos:end="138:14">=</operator> <name pos:start="138:16" pos:end="138:20">aflag</name></expr>;</expr_stmt>
    <expr_stmt pos:start="139:5" pos:end="139:21"><expr pos:start="139:5" pos:end="139:20"><name pos:start="139:5" pos:end="139:12"><name pos:start="139:5" pos:end="139:5">s</name><operator pos:start="139:6" pos:end="139:7">-&gt;</operator><name pos:start="139:8" pos:end="139:12">dflag</name></name> <operator pos:start="139:14" pos:end="139:14">=</operator> <name pos:start="139:16" pos:end="139:20">dflag</name></expr>;</expr_stmt>
    <comment type="block" pos:start="140:5" pos:end="140:25">/* lock generation */</comment>
    <if_stmt pos:start="141:5" pos:end="142:26"><if pos:start="141:5" pos:end="142:26">if <condition pos:start="141:8" pos:end="141:31">(<expr pos:start="141:9" pos:end="141:30"><name pos:start="141:9" pos:end="141:16">prefixes</name> <operator pos:start="141:18" pos:end="141:18">&amp;</operator> <name pos:start="141:20" pos:end="141:30">PREFIX_LOCK</name></expr>)</condition><block type="pseudo" pos:start="142:9" pos:end="142:26"><block_content pos:start="142:9" pos:end="142:26">
        <expr_stmt pos:start="142:9" pos:end="142:26"><expr pos:start="142:9" pos:end="142:25"><call pos:start="142:9" pos:end="142:25"><name pos:start="142:9" pos:end="142:23">gen_helper_lock</name><argument_list pos:start="142:24" pos:end="142:25">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <comment type="block" pos:start="143:5" pos:end="143:27">/* now check op code */</comment>
 <label pos:start="144:2" pos:end="144:10"><name pos:start="144:2" pos:end="144:9">reswitch</name>:</label>
    <switch pos:start="145:5" pos:end="3141:17">switch<condition pos:start="145:11" pos:end="145:13">(<expr pos:start="145:12" pos:end="145:12"><name pos:start="145:12" pos:end="145:12">b</name></expr>)</condition> <block pos:start="145:15" pos:end="3141:17">{<block_content pos:start="146:5" pos:end="3141:17">
    <case pos:start="146:5" pos:end="146:14">case <expr pos:start="146:10" pos:end="146:13"><literal type="number" pos:start="146:10" pos:end="146:13">0x0f</literal></expr>:</case>
        <comment type="block" format="doxygen" pos:start="147:9" pos:end="147:36">/**************************/</comment>
        <comment type="block" pos:start="148:9" pos:end="148:30">/* extended op code */</comment>
        <expr_stmt pos:start="149:9" pos:end="149:48"><expr pos:start="149:9" pos:end="149:47"><name pos:start="149:9" pos:end="149:9">b</name> <operator pos:start="149:11" pos:end="149:11">=</operator> <call pos:start="149:13" pos:end="149:39"><name pos:start="149:13" pos:end="149:25">cpu_ldub_code</name><argument_list pos:start="149:26" pos:end="149:39">(<argument pos:start="149:27" pos:end="149:29"><expr pos:start="149:27" pos:end="149:29"><name pos:start="149:27" pos:end="149:29">env</name></expr></argument>, <argument pos:start="149:32" pos:end="149:38"><expr pos:start="149:32" pos:end="149:38"><name pos:start="149:32" pos:end="149:36"><name pos:start="149:32" pos:end="149:32">s</name><operator pos:start="149:33" pos:end="149:34">-&gt;</operator><name pos:start="149:35" pos:end="149:36">pc</name></name><operator pos:start="149:37" pos:end="149:38">++</operator></expr></argument>)</argument_list></call> <operator pos:start="149:41" pos:end="149:41">|</operator> <literal type="number" pos:start="149:43" pos:end="149:47">0x100</literal></expr>;</expr_stmt>
        <goto pos:start="150:9" pos:end="150:22">goto <name pos:start="150:14" pos:end="150:21">reswitch</name>;</goto>
        <comment type="block" format="doxygen" pos:start="151:9" pos:end="151:36">/**************************/</comment>
        <comment type="block" pos:start="152:9" pos:end="152:27">/* arith &amp; logic */</comment>
    <case pos:start="153:5" pos:end="153:23">case <expr pos:start="153:10" pos:end="153:22"><literal type="number" pos:start="153:10" pos:end="153:13">0x00</literal> <operator pos:start="153:15" pos:end="153:17">...</operator> <literal type="number" pos:start="153:19" pos:end="153:22">0x05</literal></expr>:</case>
    <case pos:start="154:5" pos:end="154:23">case <expr pos:start="154:10" pos:end="154:22"><literal type="number" pos:start="154:10" pos:end="154:13">0x08</literal> <operator pos:start="154:15" pos:end="154:17">...</operator> <literal type="number" pos:start="154:19" pos:end="154:22">0x0d</literal></expr>:</case>
    <case pos:start="155:5" pos:end="155:23">case <expr pos:start="155:10" pos:end="155:22"><literal type="number" pos:start="155:10" pos:end="155:13">0x10</literal> <operator pos:start="155:15" pos:end="155:17">...</operator> <literal type="number" pos:start="155:19" pos:end="155:22">0x15</literal></expr>:</case>
    <case pos:start="156:5" pos:end="156:23">case <expr pos:start="156:10" pos:end="156:22"><literal type="number" pos:start="156:10" pos:end="156:13">0x18</literal> <operator pos:start="156:15" pos:end="156:17">...</operator> <literal type="number" pos:start="156:19" pos:end="156:22">0x1d</literal></expr>:</case>
    <case pos:start="157:5" pos:end="157:23">case <expr pos:start="157:10" pos:end="157:22"><literal type="number" pos:start="157:10" pos:end="157:13">0x20</literal> <operator pos:start="157:15" pos:end="157:17">...</operator> <literal type="number" pos:start="157:19" pos:end="157:22">0x25</literal></expr>:</case>
    <case pos:start="158:5" pos:end="158:23">case <expr pos:start="158:10" pos:end="158:22"><literal type="number" pos:start="158:10" pos:end="158:13">0x28</literal> <operator pos:start="158:15" pos:end="158:17">...</operator> <literal type="number" pos:start="158:19" pos:end="158:22">0x2d</literal></expr>:</case>
    <case pos:start="159:5" pos:end="159:23">case <expr pos:start="159:10" pos:end="159:22"><literal type="number" pos:start="159:10" pos:end="159:13">0x30</literal> <operator pos:start="159:15" pos:end="159:17">...</operator> <literal type="number" pos:start="159:19" pos:end="159:22">0x35</literal></expr>:</case>
    <case pos:start="160:5" pos:end="160:23">case <expr pos:start="160:10" pos:end="160:22"><literal type="number" pos:start="160:10" pos:end="160:13">0x38</literal> <operator pos:start="160:15" pos:end="160:17">...</operator> <literal type="number" pos:start="160:19" pos:end="160:22">0x3d</literal></expr>:</case>
        <block pos:start="161:9" pos:end="3141:17">{<block_content pos:start="162:13" pos:end="3141:17">
            <decl_stmt pos:start="162:13" pos:end="162:27"><decl pos:start="162:13" pos:end="162:18"><type pos:start="162:13" pos:end="162:15"><name pos:start="162:13" pos:end="162:15">int</name></type> <name pos:start="162:17" pos:end="162:18">op</name></decl>, <decl pos:start="162:21" pos:end="162:21"><type ref="prev" pos:start="162:13" pos:end="162:15"/><name pos:start="162:21" pos:end="162:21">f</name></decl>, <decl pos:start="162:24" pos:end="162:26"><type ref="prev" pos:start="162:13" pos:end="162:15"/><name pos:start="162:24" pos:end="162:26">val</name></decl>;</decl_stmt>
            <expr_stmt pos:start="163:13" pos:end="163:30"><expr pos:start="163:13" pos:end="163:29"><name pos:start="163:13" pos:end="163:14">op</name> <operator pos:start="163:16" pos:end="163:16">=</operator> <operator pos:start="163:18" pos:end="163:18">(</operator><name pos:start="163:19" pos:end="163:19">b</name> <operator pos:start="163:21" pos:end="163:22">&gt;&gt;</operator> <literal type="number" pos:start="163:24" pos:end="163:24">3</literal><operator pos:start="163:25" pos:end="163:25">)</operator> <operator pos:start="163:27" pos:end="163:27">&amp;</operator> <literal type="number" pos:start="163:29" pos:end="163:29">7</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="164:13" pos:end="164:29"><expr pos:start="164:13" pos:end="164:28"><name pos:start="164:13" pos:end="164:13">f</name> <operator pos:start="164:15" pos:end="164:15">=</operator> <operator pos:start="164:17" pos:end="164:17">(</operator><name pos:start="164:18" pos:end="164:18">b</name> <operator pos:start="164:20" pos:end="164:21">&gt;&gt;</operator> <literal type="number" pos:start="164:23" pos:end="164:23">1</literal><operator pos:start="164:24" pos:end="164:24">)</operator> <operator pos:start="164:26" pos:end="164:26">&amp;</operator> <literal type="number" pos:start="164:28" pos:end="164:28">3</literal></expr>;</expr_stmt>
            <if_stmt pos:start="165:13" pos:end="168:37"><if pos:start="165:13" pos:end="166:29">if <condition pos:start="165:16" pos:end="165:29">(<expr pos:start="165:17" pos:end="165:28"><operator pos:start="165:17" pos:end="165:17">(</operator><name pos:start="165:18" pos:end="165:18">b</name> <operator pos:start="165:20" pos:end="165:20">&amp;</operator> <literal type="number" pos:start="165:22" pos:end="165:22">1</literal><operator pos:start="165:23" pos:end="165:23">)</operator> <operator pos:start="165:25" pos:end="165:26">==</operator> <literal type="number" pos:start="165:28" pos:end="165:28">0</literal></expr>)</condition><block type="pseudo" pos:start="166:17" pos:end="166:29"><block_content pos:start="166:17" pos:end="166:29">
                <expr_stmt pos:start="166:17" pos:end="166:29"><expr pos:start="166:17" pos:end="166:28"><name pos:start="166:17" pos:end="166:18">ot</name> <operator pos:start="166:20" pos:end="166:20">=</operator> <name pos:start="166:22" pos:end="166:28">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>
            <else pos:start="167:13" pos:end="168:37">else<block type="pseudo" pos:start="168:17" pos:end="168:37"><block_content pos:start="168:17" pos:end="168:37">
                <expr_stmt pos:start="168:17" pos:end="168:37"><expr pos:start="168:17" pos:end="168:36"><name pos:start="168:17" pos:end="168:18">ot</name> <operator pos:start="168:20" pos:end="168:20">=</operator> <name pos:start="168:22" pos:end="168:26">dflag</name> <operator pos:start="168:28" pos:end="168:28">+</operator> <name pos:start="168:30" pos:end="168:36">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <switch pos:start="169:13" pos:end="3141:17">switch<condition pos:start="169:19" pos:end="169:21">(<expr pos:start="169:20" pos:end="169:20"><name pos:start="169:20" pos:end="169:20">f</name></expr>)</condition> <block pos:start="169:23" pos:end="3141:17">{<block_content pos:start="170:13" pos:end="3141:17">
            <case pos:start="170:13" pos:end="170:19">case <expr pos:start="170:18" pos:end="170:18"><literal type="number" pos:start="170:18" pos:end="170:18">0</literal></expr>:</case> <comment type="block" pos:start="170:21" pos:end="170:35">/* OP Ev, Gv */</comment>
                <expr_stmt pos:start="171:17" pos:end="171:52"><expr pos:start="171:17" pos:end="171:51"><name pos:start="171:17" pos:end="171:21">modrm</name> <operator pos:start="171:23" pos:end="171:23">=</operator> <call pos:start="171:25" pos:end="171:51"><name pos:start="171:25" pos:end="171:37">cpu_ldub_code</name><argument_list pos:start="171:38" pos:end="171:51">(<argument pos:start="171:39" pos:end="171:41"><expr pos:start="171:39" pos:end="171:41"><name pos:start="171:39" pos:end="171:41">env</name></expr></argument>, <argument pos:start="171:44" pos:end="171:50"><expr pos:start="171:44" pos:end="171:50"><name pos:start="171:44" pos:end="171:48"><name pos:start="171:44" pos:end="171:44">s</name><operator pos:start="171:45" pos:end="171:46">-&gt;</operator><name pos:start="171:47" pos:end="171:48">pc</name></name><operator pos:start="171:49" pos:end="171:50">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="172:17" pos:end="172:49"><expr pos:start="172:17" pos:end="172:48"><name pos:start="172:17" pos:end="172:19">reg</name> <operator pos:start="172:21" pos:end="172:21">=</operator> <operator pos:start="172:23" pos:end="172:23">(</operator><operator pos:start="172:24" pos:end="172:24">(</operator><name pos:start="172:25" pos:end="172:29">modrm</name> <operator pos:start="172:31" pos:end="172:32">&gt;&gt;</operator> <literal type="number" pos:start="172:34" pos:end="172:34">3</literal><operator pos:start="172:35" pos:end="172:35">)</operator> <operator pos:start="172:37" pos:end="172:37">&amp;</operator> <literal type="number" pos:start="172:39" pos:end="172:39">7</literal><operator pos:start="172:40" pos:end="172:40">)</operator> <operator pos:start="172:42" pos:end="172:42">|</operator> <name pos:start="172:44" pos:end="172:48">rex_r</name></expr>;</expr_stmt>
                <expr_stmt pos:start="173:17" pos:end="173:39"><expr pos:start="173:17" pos:end="173:38"><name pos:start="173:17" pos:end="173:19">mod</name> <operator pos:start="173:21" pos:end="173:21">=</operator> <operator pos:start="173:23" pos:end="173:23">(</operator><name pos:start="173:24" pos:end="173:28">modrm</name> <operator pos:start="173:30" pos:end="173:31">&gt;&gt;</operator> <literal type="number" pos:start="173:33" pos:end="173:33">6</literal><operator pos:start="173:34" pos:end="173:34">)</operator> <operator pos:start="173:36" pos:end="173:36">&amp;</operator> <literal type="number" pos:start="173:38" pos:end="173:38">3</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="174:17" pos:end="174:44"><expr pos:start="174:17" pos:end="174:43"><name pos:start="174:17" pos:end="174:18">rm</name> <operator pos:start="174:20" pos:end="174:20">=</operator> <operator pos:start="174:22" pos:end="174:22">(</operator><name pos:start="174:23" pos:end="174:27">modrm</name> <operator pos:start="174:29" pos:end="174:29">&amp;</operator> <literal type="number" pos:start="174:31" pos:end="174:31">7</literal><operator pos:start="174:32" pos:end="174:32">)</operator> <operator pos:start="174:34" pos:end="174:34">|</operator> <call pos:start="174:36" pos:end="174:43"><name pos:start="174:36" pos:end="174:40">REX_B</name><argument_list pos:start="174:41" pos:end="174:43">(<argument pos:start="174:42" pos:end="174:42"><expr pos:start="174:42" pos:end="174:42"><name pos:start="174:42" pos:end="174:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="175:17" pos:end="3141:17"><if pos:start="175:17" pos:end="178:17">if <condition pos:start="175:20" pos:end="175:29">(<expr pos:start="175:21" pos:end="175:28"><name pos:start="175:21" pos:end="175:23">mod</name> <operator pos:start="175:25" pos:end="175:26">!=</operator> <literal type="number" pos:start="175:28" pos:end="175:28">3</literal></expr>)</condition> <block pos:start="175:31" pos:end="178:17">{<block_content pos:start="176:21" pos:end="177:36">
                    <expr_stmt pos:start="176:21" pos:end="176:74"><expr pos:start="176:21" pos:end="176:73"><call pos:start="176:21" pos:end="176:73"><name pos:start="176:21" pos:end="176:33">gen_lea_modrm</name><argument_list pos:start="176:34" pos:end="176:73">(<argument pos:start="176:35" pos:end="176:37"><expr pos:start="176:35" pos:end="176:37"><name pos:start="176:35" pos:end="176:37">env</name></expr></argument>, <argument pos:start="176:40" pos:end="176:40"><expr pos:start="176:40" pos:end="176:40"><name pos:start="176:40" pos:end="176:40">s</name></expr></argument>, <argument pos:start="176:43" pos:end="176:47"><expr pos:start="176:43" pos:end="176:47"><name pos:start="176:43" pos:end="176:47">modrm</name></expr></argument>, <argument pos:start="176:50" pos:end="176:58"><expr pos:start="176:50" pos:end="176:58"><operator pos:start="176:50" pos:end="176:50">&amp;</operator><name pos:start="176:51" pos:end="176:58">reg_addr</name></expr></argument>, <argument pos:start="176:61" pos:end="176:72"><expr pos:start="176:61" pos:end="176:72"><operator pos:start="176:61" pos:end="176:61">&amp;</operator><name pos:start="176:62" pos:end="176:72">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="177:21" pos:end="177:36"><expr pos:start="177:21" pos:end="177:35"><name pos:start="177:21" pos:end="177:25">opreg</name> <operator pos:start="177:27" pos:end="177:27">=</operator> <name pos:start="177:29" pos:end="177:35">OR_TMP0</name></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif" pos:start="178:19" pos:end="185:17">else if <condition pos:start="178:27" pos:end="178:54">(<expr pos:start="178:28" pos:end="178:53"><name pos:start="178:28" pos:end="178:29">op</name> <operator pos:start="178:31" pos:end="178:32">==</operator> <name pos:start="178:34" pos:end="178:40">OP_XORL</name> <operator pos:start="178:42" pos:end="178:43">&amp;&amp;</operator> <name pos:start="178:45" pos:end="178:46">rm</name> <operator pos:start="178:48" pos:end="178:49">==</operator> <name pos:start="178:51" pos:end="178:53">reg</name></expr>)</condition> <block pos:start="178:56" pos:end="185:17">{<block_content pos:start="179:17" pos:end="184:26">
                <label pos:start="179:17" pos:end="179:25"><name pos:start="179:17" pos:end="179:24">xor_zero</name>:</label>
                    <comment type="block" pos:start="180:21" pos:end="180:51">/* xor reg, reg optimisation */</comment>
                    <expr_stmt pos:start="181:21" pos:end="181:44"><expr pos:start="181:21" pos:end="181:43"><call pos:start="181:21" pos:end="181:43"><name pos:start="181:21" pos:end="181:29">set_cc_op</name><argument_list pos:start="181:30" pos:end="181:43">(<argument pos:start="181:31" pos:end="181:31"><expr pos:start="181:31" pos:end="181:31"><name pos:start="181:31" pos:end="181:31">s</name></expr></argument>, <argument pos:start="181:34" pos:end="181:42"><expr pos:start="181:34" pos:end="181:42"><name pos:start="181:34" pos:end="181:42">CC_OP_CLR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="182:21" pos:end="182:39"><expr pos:start="182:21" pos:end="182:38"><call pos:start="182:21" pos:end="182:38"><name pos:start="182:21" pos:end="182:36">gen_op_movl_T0_0</name><argument_list pos:start="182:37" pos:end="182:38">()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="183:21" pos:end="183:47"><expr pos:start="183:21" pos:end="183:46"><call pos:start="183:21" pos:end="183:46"><name pos:start="183:21" pos:end="183:37">gen_op_mov_reg_T0</name><argument_list pos:start="183:38" pos:end="183:46">(<argument pos:start="183:39" pos:end="183:40"><expr pos:start="183:39" pos:end="183:40"><name pos:start="183:39" pos:end="183:40">ot</name></expr></argument>, <argument pos:start="183:43" pos:end="183:45"><expr pos:start="183:43" pos:end="183:45"><name pos:start="183:43" pos:end="183:45">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:start="184:21" pos:end="184:26">break;</break>
                </block_content>}</block></if> <else pos:start="185:19" pos:end="3141:17">else <block pos:start="185:24" pos:end="3141:17">{<block_content pos:start="186:21" pos:end="3141:17">
                    <expr_stmt pos:start="186:21" pos:end="186:31"><expr pos:start="186:21" pos:end="186:30"><name pos:start="186:21" pos:end="186:25">opreg</name> <operator pos:start="186:27" pos:end="186:27">=</operator> <name pos:start="186:29" pos:end="186:30">rm</name></expr>;</expr_stmt>
                <expr_stmt pos:start="187:17" pos:end="187:46"><expr pos:start="187:17" pos:end="187:45"><call pos:start="187:17" pos:end="187:45"><name pos:start="187:17" pos:end="187:33">gen_op_mov_TN_reg</name><argument_list pos:start="187:34" pos:end="187:45">(<argument pos:start="187:35" pos:end="187:36"><expr pos:start="187:35" pos:end="187:36"><name pos:start="187:35" pos:end="187:36">ot</name></expr></argument>, <argument pos:start="187:39" pos:end="187:39"><expr pos:start="187:39" pos:end="187:39"><literal type="number" pos:start="187:39" pos:end="187:39">1</literal></expr></argument>, <argument pos:start="187:42" pos:end="187:44"><expr pos:start="187:42" pos:end="187:44"><name pos:start="187:42" pos:end="187:44">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="188:17" pos:end="188:41"><expr pos:start="188:17" pos:end="188:40"><call pos:start="188:17" pos:end="188:40"><name pos:start="188:17" pos:end="188:22">gen_op</name><argument_list pos:start="188:23" pos:end="188:40">(<argument pos:start="188:24" pos:end="188:24"><expr pos:start="188:24" pos:end="188:24"><name pos:start="188:24" pos:end="188:24">s</name></expr></argument>, <argument pos:start="188:27" pos:end="188:28"><expr pos:start="188:27" pos:end="188:28"><name pos:start="188:27" pos:end="188:28">op</name></expr></argument>, <argument pos:start="188:31" pos:end="188:32"><expr pos:start="188:31" pos:end="188:32"><name pos:start="188:31" pos:end="188:32">ot</name></expr></argument>, <argument pos:start="188:35" pos:end="188:39"><expr pos:start="188:35" pos:end="188:39"><name pos:start="188:35" pos:end="188:39">opreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="189:17" pos:end="189:22">break;</break>
            <case pos:start="190:13" pos:end="190:19">case <expr pos:start="190:18" pos:end="190:18"><literal type="number" pos:start="190:18" pos:end="190:18">1</literal></expr>:</case> <comment type="block" pos:start="190:21" pos:end="190:35">/* OP Gv, Ev */</comment>
                <expr_stmt pos:start="191:17" pos:end="191:52"><expr pos:start="191:17" pos:end="191:51"><name pos:start="191:17" pos:end="191:21">modrm</name> <operator pos:start="191:23" pos:end="191:23">=</operator> <call pos:start="191:25" pos:end="191:51"><name pos:start="191:25" pos:end="191:37">cpu_ldub_code</name><argument_list pos:start="191:38" pos:end="191:51">(<argument pos:start="191:39" pos:end="191:41"><expr pos:start="191:39" pos:end="191:41"><name pos:start="191:39" pos:end="191:41">env</name></expr></argument>, <argument pos:start="191:44" pos:end="191:50"><expr pos:start="191:44" pos:end="191:50"><name pos:start="191:44" pos:end="191:48"><name pos:start="191:44" pos:end="191:44">s</name><operator pos:start="191:45" pos:end="191:46">-&gt;</operator><name pos:start="191:47" pos:end="191:48">pc</name></name><operator pos:start="191:49" pos:end="191:50">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="192:17" pos:end="192:39"><expr pos:start="192:17" pos:end="192:38"><name pos:start="192:17" pos:end="192:19">mod</name> <operator pos:start="192:21" pos:end="192:21">=</operator> <operator pos:start="192:23" pos:end="192:23">(</operator><name pos:start="192:24" pos:end="192:28">modrm</name> <operator pos:start="192:30" pos:end="192:31">&gt;&gt;</operator> <literal type="number" pos:start="192:33" pos:end="192:33">6</literal><operator pos:start="192:34" pos:end="192:34">)</operator> <operator pos:start="192:36" pos:end="192:36">&amp;</operator> <literal type="number" pos:start="192:38" pos:end="192:38">3</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="193:17" pos:end="193:49"><expr pos:start="193:17" pos:end="193:48"><name pos:start="193:17" pos:end="193:19">reg</name> <operator pos:start="193:21" pos:end="193:21">=</operator> <operator pos:start="193:23" pos:end="193:23">(</operator><operator pos:start="193:24" pos:end="193:24">(</operator><name pos:start="193:25" pos:end="193:29">modrm</name> <operator pos:start="193:31" pos:end="193:32">&gt;&gt;</operator> <literal type="number" pos:start="193:34" pos:end="193:34">3</literal><operator pos:start="193:35" pos:end="193:35">)</operator> <operator pos:start="193:37" pos:end="193:37">&amp;</operator> <literal type="number" pos:start="193:39" pos:end="193:39">7</literal><operator pos:start="193:40" pos:end="193:40">)</operator> <operator pos:start="193:42" pos:end="193:42">|</operator> <name pos:start="193:44" pos:end="193:48">rex_r</name></expr>;</expr_stmt>
                <expr_stmt pos:start="194:17" pos:end="194:44"><expr pos:start="194:17" pos:end="194:43"><name pos:start="194:17" pos:end="194:18">rm</name> <operator pos:start="194:20" pos:end="194:20">=</operator> <operator pos:start="194:22" pos:end="194:22">(</operator><name pos:start="194:23" pos:end="194:27">modrm</name> <operator pos:start="194:29" pos:end="194:29">&amp;</operator> <literal type="number" pos:start="194:31" pos:end="194:31">7</literal><operator pos:start="194:32" pos:end="194:32">)</operator> <operator pos:start="194:34" pos:end="194:34">|</operator> <call pos:start="194:36" pos:end="194:43"><name pos:start="194:36" pos:end="194:40">REX_B</name><argument_list pos:start="194:41" pos:end="194:43">(<argument pos:start="194:42" pos:end="194:42"><expr pos:start="194:42" pos:end="194:42"><name pos:start="194:42" pos:end="194:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="195:17" pos:end="3141:17"><if pos:start="195:17" pos:end="198:17">if <condition pos:start="195:20" pos:end="195:29">(<expr pos:start="195:21" pos:end="195:28"><name pos:start="195:21" pos:end="195:23">mod</name> <operator pos:start="195:25" pos:end="195:26">!=</operator> <literal type="number" pos:start="195:28" pos:end="195:28">3</literal></expr>)</condition> <block pos:start="195:31" pos:end="198:17">{<block_content pos:start="196:21" pos:end="197:55">
                    <expr_stmt pos:start="196:21" pos:end="196:74"><expr pos:start="196:21" pos:end="196:73"><call pos:start="196:21" pos:end="196:73"><name pos:start="196:21" pos:end="196:33">gen_lea_modrm</name><argument_list pos:start="196:34" pos:end="196:73">(<argument pos:start="196:35" pos:end="196:37"><expr pos:start="196:35" pos:end="196:37"><name pos:start="196:35" pos:end="196:37">env</name></expr></argument>, <argument pos:start="196:40" pos:end="196:40"><expr pos:start="196:40" pos:end="196:40"><name pos:start="196:40" pos:end="196:40">s</name></expr></argument>, <argument pos:start="196:43" pos:end="196:47"><expr pos:start="196:43" pos:end="196:47"><name pos:start="196:43" pos:end="196:47">modrm</name></expr></argument>, <argument pos:start="196:50" pos:end="196:58"><expr pos:start="196:50" pos:end="196:58"><operator pos:start="196:50" pos:end="196:50">&amp;</operator><name pos:start="196:51" pos:end="196:58">reg_addr</name></expr></argument>, <argument pos:start="196:61" pos:end="196:72"><expr pos:start="196:61" pos:end="196:72"><operator pos:start="196:61" pos:end="196:61">&amp;</operator><name pos:start="196:62" pos:end="196:72">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="197:21" pos:end="197:55"><expr pos:start="197:21" pos:end="197:54"><call pos:start="197:21" pos:end="197:54"><name pos:start="197:21" pos:end="197:35">gen_op_ld_T1_A0</name><argument_list pos:start="197:36" pos:end="197:54">(<argument pos:start="197:37" pos:end="197:53"><expr pos:start="197:37" pos:end="197:53"><name pos:start="197:37" pos:end="197:38">ot</name> <operator pos:start="197:40" pos:end="197:40">+</operator> <name pos:start="197:42" pos:end="197:53"><name pos:start="197:42" pos:end="197:42">s</name><operator pos:start="197:43" pos:end="197:44">-&gt;</operator><name pos:start="197:45" pos:end="197:53">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif" pos:start="198:19" pos:end="200:17">else if <condition pos:start="198:27" pos:end="198:54">(<expr pos:start="198:28" pos:end="198:53"><name pos:start="198:28" pos:end="198:29">op</name> <operator pos:start="198:31" pos:end="198:32">==</operator> <name pos:start="198:34" pos:end="198:40">OP_XORL</name> <operator pos:start="198:42" pos:end="198:43">&amp;&amp;</operator> <name pos:start="198:45" pos:end="198:46">rm</name> <operator pos:start="198:48" pos:end="198:49">==</operator> <name pos:start="198:51" pos:end="198:53">reg</name></expr>)</condition> <block pos:start="198:56" pos:end="200:17">{<block_content pos:start="199:21" pos:end="199:34">
                    <goto pos:start="199:21" pos:end="199:34">goto <name pos:start="199:26" pos:end="199:33">xor_zero</name>;</goto>
                </block_content>}</block></if> <else pos:start="200:19" pos:end="3141:17">else <block pos:start="200:24" pos:end="3141:17">{<block_content pos:start="201:21" pos:end="3141:17">
                    <expr_stmt pos:start="201:21" pos:end="201:49"><expr pos:start="201:21" pos:end="201:48"><call pos:start="201:21" pos:end="201:48"><name pos:start="201:21" pos:end="201:37">gen_op_mov_TN_reg</name><argument_list pos:start="201:38" pos:end="201:48">(<argument pos:start="201:39" pos:end="201:40"><expr pos:start="201:39" pos:end="201:40"><name pos:start="201:39" pos:end="201:40">ot</name></expr></argument>, <argument pos:start="201:43" pos:end="201:43"><expr pos:start="201:43" pos:end="201:43"><literal type="number" pos:start="201:43" pos:end="201:43">1</literal></expr></argument>, <argument pos:start="201:46" pos:end="201:47"><expr pos:start="201:46" pos:end="201:47"><name pos:start="201:46" pos:end="201:47">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="202:17" pos:end="202:39"><expr pos:start="202:17" pos:end="202:38"><call pos:start="202:17" pos:end="202:38"><name pos:start="202:17" pos:end="202:22">gen_op</name><argument_list pos:start="202:23" pos:end="202:38">(<argument pos:start="202:24" pos:end="202:24"><expr pos:start="202:24" pos:end="202:24"><name pos:start="202:24" pos:end="202:24">s</name></expr></argument>, <argument pos:start="202:27" pos:end="202:28"><expr pos:start="202:27" pos:end="202:28"><name pos:start="202:27" pos:end="202:28">op</name></expr></argument>, <argument pos:start="202:31" pos:end="202:32"><expr pos:start="202:31" pos:end="202:32"><name pos:start="202:31" pos:end="202:32">ot</name></expr></argument>, <argument pos:start="202:35" pos:end="202:37"><expr pos:start="202:35" pos:end="202:37"><name pos:start="202:35" pos:end="202:37">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="203:17" pos:end="203:22">break;</break>
            <case pos:start="204:13" pos:end="204:19">case <expr pos:start="204:18" pos:end="204:18"><literal type="number" pos:start="204:18" pos:end="204:18">2</literal></expr>:</case> <comment type="block" pos:start="204:21" pos:end="204:34">/* OP A, Iv */</comment>
                <expr_stmt pos:start="205:17" pos:end="205:43"><expr pos:start="205:17" pos:end="205:42"><name pos:start="205:17" pos:end="205:19">val</name> <operator pos:start="205:21" pos:end="205:21">=</operator> <call pos:start="205:23" pos:end="205:42"><name pos:start="205:23" pos:end="205:30">insn_get</name><argument_list pos:start="205:31" pos:end="205:42">(<argument pos:start="205:32" pos:end="205:34"><expr pos:start="205:32" pos:end="205:34"><name pos:start="205:32" pos:end="205:34">env</name></expr></argument>, <argument pos:start="205:37" pos:end="205:37"><expr pos:start="205:37" pos:end="205:37"><name pos:start="205:37" pos:end="205:37">s</name></expr></argument>, <argument pos:start="205:40" pos:end="205:41"><expr pos:start="205:40" pos:end="205:41"><name pos:start="205:40" pos:end="205:41">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="206:17" pos:end="206:39"><expr pos:start="206:17" pos:end="206:38"><call pos:start="206:17" pos:end="206:38"><name pos:start="206:17" pos:end="206:33">gen_op_movl_T1_im</name><argument_list pos:start="206:34" pos:end="206:38">(<argument pos:start="206:35" pos:end="206:37"><expr pos:start="206:35" pos:end="206:37"><name pos:start="206:35" pos:end="206:37">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="207:17" pos:end="207:42"><expr pos:start="207:17" pos:end="207:41"><call pos:start="207:17" pos:end="207:41"><name pos:start="207:17" pos:end="207:22">gen_op</name><argument_list pos:start="207:23" pos:end="207:41">(<argument pos:start="207:24" pos:end="207:24"><expr pos:start="207:24" pos:end="207:24"><name pos:start="207:24" pos:end="207:24">s</name></expr></argument>, <argument pos:start="207:27" pos:end="207:28"><expr pos:start="207:27" pos:end="207:28"><name pos:start="207:27" pos:end="207:28">op</name></expr></argument>, <argument pos:start="207:31" pos:end="207:32"><expr pos:start="207:31" pos:end="207:32"><name pos:start="207:31" pos:end="207:32">ot</name></expr></argument>, <argument pos:start="207:35" pos:end="207:40"><expr pos:start="207:35" pos:end="207:40"><name pos:start="207:35" pos:end="207:40">OR_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="208:17" pos:end="208:22">break;</break>
        <break pos:start="209:9" pos:end="209:14">break;</break>
    <case pos:start="210:5" pos:end="210:14">case <expr pos:start="210:10" pos:end="210:13"><literal type="number" pos:start="210:10" pos:end="210:13">0x82</literal></expr>:</case>
        <if_stmt pos:start="211:9" pos:end="3141:17"><if pos:start="211:9" pos:end="3141:17">if <condition pos:start="211:12" pos:end="211:22">(<expr pos:start="211:13" pos:end="211:21"><call pos:start="211:13" pos:end="211:21"><name pos:start="211:13" pos:end="211:18">CODE64</name><argument_list pos:start="211:19" pos:end="211:21">(<argument pos:start="211:20" pos:end="211:20"><expr pos:start="211:20" pos:end="211:20"><name pos:start="211:20" pos:end="211:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="212:5" pos:end="3141:17"><block_content pos:start="212:5" pos:end="3141:17">
    <case pos:start="212:5" pos:end="212:14">case <expr pos:start="212:10" pos:end="212:13"><literal type="number" pos:start="212:10" pos:end="212:13">0x80</literal></expr>:</case> <comment type="block" pos:start="212:16" pos:end="212:25">/* GRP1 */</comment>
    <case pos:start="213:5" pos:end="213:14">case <expr pos:start="213:10" pos:end="213:13"><literal type="number" pos:start="213:10" pos:end="213:13">0x81</literal></expr>:</case>
    <case pos:start="214:5" pos:end="214:14">case <expr pos:start="214:10" pos:end="214:13"><literal type="number" pos:start="214:10" pos:end="214:13">0x83</literal></expr>:</case>
        <block pos:start="215:9" pos:end="3141:17">{<block_content pos:start="216:13" pos:end="3141:17">
            <decl_stmt pos:start="216:13" pos:end="216:20"><decl pos:start="216:13" pos:end="216:19"><type pos:start="216:13" pos:end="216:15"><name pos:start="216:13" pos:end="216:15">int</name></type> <name pos:start="216:17" pos:end="216:19">val</name></decl>;</decl_stmt>
            <if_stmt pos:start="217:13" pos:end="220:37"><if pos:start="217:13" pos:end="218:29">if <condition pos:start="217:16" pos:end="217:29">(<expr pos:start="217:17" pos:end="217:28"><operator pos:start="217:17" pos:end="217:17">(</operator><name pos:start="217:18" pos:end="217:18">b</name> <operator pos:start="217:20" pos:end="217:20">&amp;</operator> <literal type="number" pos:start="217:22" pos:end="217:22">1</literal><operator pos:start="217:23" pos:end="217:23">)</operator> <operator pos:start="217:25" pos:end="217:26">==</operator> <literal type="number" pos:start="217:28" pos:end="217:28">0</literal></expr>)</condition><block type="pseudo" pos:start="218:17" pos:end="218:29"><block_content pos:start="218:17" pos:end="218:29">
                <expr_stmt pos:start="218:17" pos:end="218:29"><expr pos:start="218:17" pos:end="218:28"><name pos:start="218:17" pos:end="218:18">ot</name> <operator pos:start="218:20" pos:end="218:20">=</operator> <name pos:start="218:22" pos:end="218:28">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>
            <else pos:start="219:13" pos:end="220:37">else<block type="pseudo" pos:start="220:17" pos:end="220:37"><block_content pos:start="220:17" pos:end="220:37">
                <expr_stmt pos:start="220:17" pos:end="220:37"><expr pos:start="220:17" pos:end="220:36"><name pos:start="220:17" pos:end="220:18">ot</name> <operator pos:start="220:20" pos:end="220:20">=</operator> <name pos:start="220:22" pos:end="220:26">dflag</name> <operator pos:start="220:28" pos:end="220:28">+</operator> <name pos:start="220:30" pos:end="220:36">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <expr_stmt pos:start="221:13" pos:end="221:48"><expr pos:start="221:13" pos:end="221:47"><name pos:start="221:13" pos:end="221:17">modrm</name> <operator pos:start="221:19" pos:end="221:19">=</operator> <call pos:start="221:21" pos:end="221:47"><name pos:start="221:21" pos:end="221:33">cpu_ldub_code</name><argument_list pos:start="221:34" pos:end="221:47">(<argument pos:start="221:35" pos:end="221:37"><expr pos:start="221:35" pos:end="221:37"><name pos:start="221:35" pos:end="221:37">env</name></expr></argument>, <argument pos:start="221:40" pos:end="221:46"><expr pos:start="221:40" pos:end="221:46"><name pos:start="221:40" pos:end="221:44"><name pos:start="221:40" pos:end="221:40">s</name><operator pos:start="221:41" pos:end="221:42">-&gt;</operator><name pos:start="221:43" pos:end="221:44">pc</name></name><operator pos:start="221:45" pos:end="221:46">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="222:13" pos:end="222:35"><expr pos:start="222:13" pos:end="222:34"><name pos:start="222:13" pos:end="222:15">mod</name> <operator pos:start="222:17" pos:end="222:17">=</operator> <operator pos:start="222:19" pos:end="222:19">(</operator><name pos:start="222:20" pos:end="222:24">modrm</name> <operator pos:start="222:26" pos:end="222:27">&gt;&gt;</operator> <literal type="number" pos:start="222:29" pos:end="222:29">6</literal><operator pos:start="222:30" pos:end="222:30">)</operator> <operator pos:start="222:32" pos:end="222:32">&amp;</operator> <literal type="number" pos:start="222:34" pos:end="222:34">3</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="223:13" pos:end="223:40"><expr pos:start="223:13" pos:end="223:39"><name pos:start="223:13" pos:end="223:14">rm</name> <operator pos:start="223:16" pos:end="223:16">=</operator> <operator pos:start="223:18" pos:end="223:18">(</operator><name pos:start="223:19" pos:end="223:23">modrm</name> <operator pos:start="223:25" pos:end="223:25">&amp;</operator> <literal type="number" pos:start="223:27" pos:end="223:27">7</literal><operator pos:start="223:28" pos:end="223:28">)</operator> <operator pos:start="223:30" pos:end="223:30">|</operator> <call pos:start="223:32" pos:end="223:39"><name pos:start="223:32" pos:end="223:36">REX_B</name><argument_list pos:start="223:37" pos:end="223:39">(<argument pos:start="223:38" pos:end="223:38"><expr pos:start="223:38" pos:end="223:38"><name pos:start="223:38" pos:end="223:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="224:13" pos:end="224:34"><expr pos:start="224:13" pos:end="224:33"><name pos:start="224:13" pos:end="224:14">op</name> <operator pos:start="224:16" pos:end="224:16">=</operator> <operator pos:start="224:18" pos:end="224:18">(</operator><name pos:start="224:19" pos:end="224:23">modrm</name> <operator pos:start="224:25" pos:end="224:26">&gt;&gt;</operator> <literal type="number" pos:start="224:28" pos:end="224:28">3</literal><operator pos:start="224:29" pos:end="224:29">)</operator> <operator pos:start="224:31" pos:end="224:31">&amp;</operator> <literal type="number" pos:start="224:33" pos:end="224:33">7</literal></expr>;</expr_stmt>
            <if_stmt pos:start="225:13" pos:end="3141:17"><if pos:start="225:13" pos:end="232:13">if <condition pos:start="225:16" pos:end="225:25">(<expr pos:start="225:17" pos:end="225:24"><name pos:start="225:17" pos:end="225:19">mod</name> <operator pos:start="225:21" pos:end="225:22">!=</operator> <literal type="number" pos:start="225:24" pos:end="225:24">3</literal></expr>)</condition> <block pos:start="225:27" pos:end="232:13">{<block_content pos:start="226:17" pos:end="231:32">
                <if_stmt pos:start="226:17" pos:end="229:56"><if pos:start="226:17" pos:end="227:38">if <condition pos:start="226:20" pos:end="226:30">(<expr pos:start="226:21" pos:end="226:29"><name pos:start="226:21" pos:end="226:21">b</name> <operator pos:start="226:23" pos:end="226:24">==</operator> <literal type="number" pos:start="226:26" pos:end="226:29">0x83</literal></expr>)</condition><block type="pseudo" pos:start="227:21" pos:end="227:38"><block_content pos:start="227:21" pos:end="227:38">
                    <expr_stmt pos:start="227:21" pos:end="227:38"><expr pos:start="227:21" pos:end="227:37"><name pos:start="227:21" pos:end="227:33"><name pos:start="227:21" pos:end="227:21">s</name><operator pos:start="227:22" pos:end="227:23">-&gt;</operator><name pos:start="227:24" pos:end="227:33">rip_offset</name></name> <operator pos:start="227:35" pos:end="227:35">=</operator> <literal type="number" pos:start="227:37" pos:end="227:37">1</literal></expr>;</expr_stmt></block_content></block></if>
                <else pos:start="228:17" pos:end="229:56">else<block type="pseudo" pos:start="229:21" pos:end="229:56"><block_content pos:start="229:21" pos:end="229:56">
                    <expr_stmt pos:start="229:21" pos:end="229:56"><expr pos:start="229:21" pos:end="229:55"><name pos:start="229:21" pos:end="229:33"><name pos:start="229:21" pos:end="229:21">s</name><operator pos:start="229:22" pos:end="229:23">-&gt;</operator><name pos:start="229:24" pos:end="229:33">rip_offset</name></name> <operator pos:start="229:35" pos:end="229:35">=</operator> <call pos:start="229:37" pos:end="229:55"><name pos:start="229:37" pos:end="229:51">insn_const_size</name><argument_list pos:start="229:52" pos:end="229:55">(<argument pos:start="229:53" pos:end="229:54"><expr pos:start="229:53" pos:end="229:54"><name pos:start="229:53" pos:end="229:54">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
                <expr_stmt pos:start="230:17" pos:end="230:70"><expr pos:start="230:17" pos:end="230:69"><call pos:start="230:17" pos:end="230:69"><name pos:start="230:17" pos:end="230:29">gen_lea_modrm</name><argument_list pos:start="230:30" pos:end="230:69">(<argument pos:start="230:31" pos:end="230:33"><expr pos:start="230:31" pos:end="230:33"><name pos:start="230:31" pos:end="230:33">env</name></expr></argument>, <argument pos:start="230:36" pos:end="230:36"><expr pos:start="230:36" pos:end="230:36"><name pos:start="230:36" pos:end="230:36">s</name></expr></argument>, <argument pos:start="230:39" pos:end="230:43"><expr pos:start="230:39" pos:end="230:43"><name pos:start="230:39" pos:end="230:43">modrm</name></expr></argument>, <argument pos:start="230:46" pos:end="230:54"><expr pos:start="230:46" pos:end="230:54"><operator pos:start="230:46" pos:end="230:46">&amp;</operator><name pos:start="230:47" pos:end="230:54">reg_addr</name></expr></argument>, <argument pos:start="230:57" pos:end="230:68"><expr pos:start="230:57" pos:end="230:68"><operator pos:start="230:57" pos:end="230:57">&amp;</operator><name pos:start="230:58" pos:end="230:68">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="231:17" pos:end="231:32"><expr pos:start="231:17" pos:end="231:31"><name pos:start="231:17" pos:end="231:21">opreg</name> <operator pos:start="231:23" pos:end="231:23">=</operator> <name pos:start="231:25" pos:end="231:31">OR_TMP0</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="232:15" pos:end="3141:17">else <block pos:start="232:20" pos:end="3141:17">{<block_content pos:start="233:17" pos:end="3141:17">
                <expr_stmt pos:start="233:17" pos:end="233:27"><expr pos:start="233:17" pos:end="233:26"><name pos:start="233:17" pos:end="233:21">opreg</name> <operator pos:start="233:23" pos:end="233:23">=</operator> <name pos:start="233:25" pos:end="233:26">rm</name></expr>;</expr_stmt>
            <switch pos:start="234:13" pos:end="3141:17">switch<condition pos:start="234:19" pos:end="234:21">(<expr pos:start="234:20" pos:end="234:20"><name pos:start="234:20" pos:end="234:20">b</name></expr>)</condition> <block pos:start="234:23" pos:end="3141:17">{<block_content pos:start="235:13" pos:end="3141:17">
            <default pos:start="235:13" pos:end="235:20">default:</default>
            <case pos:start="236:13" pos:end="236:22">case <expr pos:start="236:18" pos:end="236:21"><literal type="number" pos:start="236:18" pos:end="236:21">0x80</literal></expr>:</case>
            <case pos:start="237:13" pos:end="237:22">case <expr pos:start="237:18" pos:end="237:21"><literal type="number" pos:start="237:18" pos:end="237:21">0x81</literal></expr>:</case>
            <case pos:start="238:13" pos:end="238:22">case <expr pos:start="238:18" pos:end="238:21"><literal type="number" pos:start="238:18" pos:end="238:21">0x82</literal></expr>:</case>
                <expr_stmt pos:start="239:17" pos:end="239:43"><expr pos:start="239:17" pos:end="239:42"><name pos:start="239:17" pos:end="239:19">val</name> <operator pos:start="239:21" pos:end="239:21">=</operator> <call pos:start="239:23" pos:end="239:42"><name pos:start="239:23" pos:end="239:30">insn_get</name><argument_list pos:start="239:31" pos:end="239:42">(<argument pos:start="239:32" pos:end="239:34"><expr pos:start="239:32" pos:end="239:34"><name pos:start="239:32" pos:end="239:34">env</name></expr></argument>, <argument pos:start="239:37" pos:end="239:37"><expr pos:start="239:37" pos:end="239:37"><name pos:start="239:37" pos:end="239:37">s</name></expr></argument>, <argument pos:start="239:40" pos:end="239:41"><expr pos:start="239:40" pos:end="239:41"><name pos:start="239:40" pos:end="239:41">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="240:17" pos:end="240:22">break;</break>
            <case pos:start="241:13" pos:end="241:22">case <expr pos:start="241:18" pos:end="241:21"><literal type="number" pos:start="241:18" pos:end="241:21">0x83</literal></expr>:</case>
                <expr_stmt pos:start="242:17" pos:end="242:56"><expr pos:start="242:17" pos:end="242:55"><name pos:start="242:17" pos:end="242:19">val</name> <operator pos:start="242:21" pos:end="242:21">=</operator> <operator pos:start="242:23" pos:end="242:23">(</operator><name pos:start="242:24" pos:end="242:29">int8_t</name><operator pos:start="242:30" pos:end="242:30">)</operator><call pos:start="242:31" pos:end="242:55"><name pos:start="242:31" pos:end="242:38">insn_get</name><argument_list pos:start="242:39" pos:end="242:55">(<argument pos:start="242:40" pos:end="242:42"><expr pos:start="242:40" pos:end="242:42"><name pos:start="242:40" pos:end="242:42">env</name></expr></argument>, <argument pos:start="242:45" pos:end="242:45"><expr pos:start="242:45" pos:end="242:45"><name pos:start="242:45" pos:end="242:45">s</name></expr></argument>, <argument pos:start="242:48" pos:end="242:54"><expr pos:start="242:48" pos:end="242:54"><name pos:start="242:48" pos:end="242:54">OT_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="243:17" pos:end="243:22">break;</break>
            <expr_stmt pos:start="244:13" pos:end="244:35"><expr pos:start="244:13" pos:end="244:34"><call pos:start="244:13" pos:end="244:34"><name pos:start="244:13" pos:end="244:29">gen_op_movl_T1_im</name><argument_list pos:start="244:30" pos:end="244:34">(<argument pos:start="244:31" pos:end="244:33"><expr pos:start="244:31" pos:end="244:33"><name pos:start="244:31" pos:end="244:33">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="245:13" pos:end="245:37"><expr pos:start="245:13" pos:end="245:36"><call pos:start="245:13" pos:end="245:36"><name pos:start="245:13" pos:end="245:18">gen_op</name><argument_list pos:start="245:19" pos:end="245:36">(<argument pos:start="245:20" pos:end="245:20"><expr pos:start="245:20" pos:end="245:20"><name pos:start="245:20" pos:end="245:20">s</name></expr></argument>, <argument pos:start="245:23" pos:end="245:24"><expr pos:start="245:23" pos:end="245:24"><name pos:start="245:23" pos:end="245:24">op</name></expr></argument>, <argument pos:start="245:27" pos:end="245:28"><expr pos:start="245:27" pos:end="245:28"><name pos:start="245:27" pos:end="245:28">ot</name></expr></argument>, <argument pos:start="245:31" pos:end="245:35"><expr pos:start="245:31" pos:end="245:35"><name pos:start="245:31" pos:end="245:35">opreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="246:9" pos:end="246:14">break;</break>
        <comment type="block" format="doxygen" pos:start="247:9" pos:end="247:36">/**************************/</comment>
        <comment type="block" pos:start="248:9" pos:end="248:44">/* inc, dec, and other misc arith */</comment>
    <case pos:start="249:5" pos:end="249:23">case <expr pos:start="249:10" pos:end="249:22"><literal type="number" pos:start="249:10" pos:end="249:13">0x40</literal> <operator pos:start="249:15" pos:end="249:17">...</operator> <literal type="number" pos:start="249:19" pos:end="249:22">0x47</literal></expr>:</case> <comment type="block" pos:start="249:25" pos:end="249:36">/* inc Gv */</comment>
        <expr_stmt pos:start="250:9" pos:end="250:39"><expr pos:start="250:9" pos:end="250:38"><name pos:start="250:9" pos:end="250:10">ot</name> <operator pos:start="250:12" pos:end="250:12">=</operator> <ternary pos:start="250:14" pos:end="250:38"><condition pos:start="250:14" pos:end="250:20"><expr pos:start="250:14" pos:end="250:18"><name pos:start="250:14" pos:end="250:18">dflag</name></expr> ?</condition><then pos:start="250:22" pos:end="250:28"> <expr pos:start="250:22" pos:end="250:28"><name pos:start="250:22" pos:end="250:28">OT_LONG</name></expr> </then><else pos:start="250:30" pos:end="250:38">: <expr pos:start="250:32" pos:end="250:38"><name pos:start="250:32" pos:end="250:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt pos:start="251:9" pos:end="251:44"><expr pos:start="251:9" pos:end="251:43"><call pos:start="251:9" pos:end="251:43"><name pos:start="251:9" pos:end="251:15">gen_inc</name><argument_list pos:start="251:16" pos:end="251:43">(<argument pos:start="251:17" pos:end="251:17"><expr pos:start="251:17" pos:end="251:17"><name pos:start="251:17" pos:end="251:17">s</name></expr></argument>, <argument pos:start="251:20" pos:end="251:21"><expr pos:start="251:20" pos:end="251:21"><name pos:start="251:20" pos:end="251:21">ot</name></expr></argument>, <argument pos:start="251:24" pos:end="251:39"><expr pos:start="251:24" pos:end="251:39"><name pos:start="251:24" pos:end="251:29">OR_EAX</name> <operator pos:start="251:31" pos:end="251:31">+</operator> <operator pos:start="251:33" pos:end="251:33">(</operator><name pos:start="251:34" pos:end="251:34">b</name> <operator pos:start="251:36" pos:end="251:36">&amp;</operator> <literal type="number" pos:start="251:38" pos:end="251:38">7</literal><operator pos:start="251:39" pos:end="251:39">)</operator></expr></argument>, <argument pos:start="251:42" pos:end="251:42"><expr pos:start="251:42" pos:end="251:42"><literal type="number" pos:start="251:42" pos:end="251:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="252:9" pos:end="252:14">break;</break>
    <case pos:start="253:5" pos:end="253:23">case <expr pos:start="253:10" pos:end="253:22"><literal type="number" pos:start="253:10" pos:end="253:13">0x48</literal> <operator pos:start="253:15" pos:end="253:17">...</operator> <literal type="number" pos:start="253:19" pos:end="253:22">0x4f</literal></expr>:</case> <comment type="block" pos:start="253:25" pos:end="253:36">/* dec Gv */</comment>
        <expr_stmt pos:start="254:9" pos:end="254:39"><expr pos:start="254:9" pos:end="254:38"><name pos:start="254:9" pos:end="254:10">ot</name> <operator pos:start="254:12" pos:end="254:12">=</operator> <ternary pos:start="254:14" pos:end="254:38"><condition pos:start="254:14" pos:end="254:20"><expr pos:start="254:14" pos:end="254:18"><name pos:start="254:14" pos:end="254:18">dflag</name></expr> ?</condition><then pos:start="254:22" pos:end="254:28"> <expr pos:start="254:22" pos:end="254:28"><name pos:start="254:22" pos:end="254:28">OT_LONG</name></expr> </then><else pos:start="254:30" pos:end="254:38">: <expr pos:start="254:32" pos:end="254:38"><name pos:start="254:32" pos:end="254:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt pos:start="255:9" pos:end="255:45"><expr pos:start="255:9" pos:end="255:44"><call pos:start="255:9" pos:end="255:44"><name pos:start="255:9" pos:end="255:15">gen_inc</name><argument_list pos:start="255:16" pos:end="255:44">(<argument pos:start="255:17" pos:end="255:17"><expr pos:start="255:17" pos:end="255:17"><name pos:start="255:17" pos:end="255:17">s</name></expr></argument>, <argument pos:start="255:20" pos:end="255:21"><expr pos:start="255:20" pos:end="255:21"><name pos:start="255:20" pos:end="255:21">ot</name></expr></argument>, <argument pos:start="255:24" pos:end="255:39"><expr pos:start="255:24" pos:end="255:39"><name pos:start="255:24" pos:end="255:29">OR_EAX</name> <operator pos:start="255:31" pos:end="255:31">+</operator> <operator pos:start="255:33" pos:end="255:33">(</operator><name pos:start="255:34" pos:end="255:34">b</name> <operator pos:start="255:36" pos:end="255:36">&amp;</operator> <literal type="number" pos:start="255:38" pos:end="255:38">7</literal><operator pos:start="255:39" pos:end="255:39">)</operator></expr></argument>, <argument pos:start="255:42" pos:end="255:43"><expr pos:start="255:42" pos:end="255:43"><operator pos:start="255:42" pos:end="255:42">-</operator><literal type="number" pos:start="255:43" pos:end="255:43">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="256:9" pos:end="256:14">break;</break>
    <case pos:start="257:5" pos:end="257:14">case <expr pos:start="257:10" pos:end="257:13"><literal type="number" pos:start="257:10" pos:end="257:13">0xf6</literal></expr>:</case> <comment type="block" pos:start="257:16" pos:end="257:25">/* GRP3 */</comment>
    <case pos:start="258:5" pos:end="258:14">case <expr pos:start="258:10" pos:end="258:13"><literal type="number" pos:start="258:10" pos:end="258:13">0xf7</literal></expr>:</case>
        <if_stmt pos:start="259:9" pos:end="262:33"><if pos:start="259:9" pos:end="260:25">if <condition pos:start="259:12" pos:end="259:25">(<expr pos:start="259:13" pos:end="259:24"><operator pos:start="259:13" pos:end="259:13">(</operator><name pos:start="259:14" pos:end="259:14">b</name> <operator pos:start="259:16" pos:end="259:16">&amp;</operator> <literal type="number" pos:start="259:18" pos:end="259:18">1</literal><operator pos:start="259:19" pos:end="259:19">)</operator> <operator pos:start="259:21" pos:end="259:22">==</operator> <literal type="number" pos:start="259:24" pos:end="259:24">0</literal></expr>)</condition><block type="pseudo" pos:start="260:13" pos:end="260:25"><block_content pos:start="260:13" pos:end="260:25">
            <expr_stmt pos:start="260:13" pos:end="260:25"><expr pos:start="260:13" pos:end="260:24"><name pos:start="260:13" pos:end="260:14">ot</name> <operator pos:start="260:16" pos:end="260:16">=</operator> <name pos:start="260:18" pos:end="260:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>
        <else pos:start="261:9" pos:end="262:33">else<block type="pseudo" pos:start="262:13" pos:end="262:33"><block_content pos:start="262:13" pos:end="262:33">
            <expr_stmt pos:start="262:13" pos:end="262:33"><expr pos:start="262:13" pos:end="262:32"><name pos:start="262:13" pos:end="262:14">ot</name> <operator pos:start="262:16" pos:end="262:16">=</operator> <name pos:start="262:18" pos:end="262:22">dflag</name> <operator pos:start="262:24" pos:end="262:24">+</operator> <name pos:start="262:26" pos:end="262:32">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt pos:start="263:9" pos:end="263:44"><expr pos:start="263:9" pos:end="263:43"><name pos:start="263:9" pos:end="263:13">modrm</name> <operator pos:start="263:15" pos:end="263:15">=</operator> <call pos:start="263:17" pos:end="263:43"><name pos:start="263:17" pos:end="263:29">cpu_ldub_code</name><argument_list pos:start="263:30" pos:end="263:43">(<argument pos:start="263:31" pos:end="263:33"><expr pos:start="263:31" pos:end="263:33"><name pos:start="263:31" pos:end="263:33">env</name></expr></argument>, <argument pos:start="263:36" pos:end="263:42"><expr pos:start="263:36" pos:end="263:42"><name pos:start="263:36" pos:end="263:40"><name pos:start="263:36" pos:end="263:36">s</name><operator pos:start="263:37" pos:end="263:38">-&gt;</operator><name pos:start="263:39" pos:end="263:40">pc</name></name><operator pos:start="263:41" pos:end="263:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="264:9" pos:end="264:31"><expr pos:start="264:9" pos:end="264:30"><name pos:start="264:9" pos:end="264:11">mod</name> <operator pos:start="264:13" pos:end="264:13">=</operator> <operator pos:start="264:15" pos:end="264:15">(</operator><name pos:start="264:16" pos:end="264:20">modrm</name> <operator pos:start="264:22" pos:end="264:23">&gt;&gt;</operator> <literal type="number" pos:start="264:25" pos:end="264:25">6</literal><operator pos:start="264:26" pos:end="264:26">)</operator> <operator pos:start="264:28" pos:end="264:28">&amp;</operator> <literal type="number" pos:start="264:30" pos:end="264:30">3</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="265:9" pos:end="265:36"><expr pos:start="265:9" pos:end="265:35"><name pos:start="265:9" pos:end="265:10">rm</name> <operator pos:start="265:12" pos:end="265:12">=</operator> <operator pos:start="265:14" pos:end="265:14">(</operator><name pos:start="265:15" pos:end="265:19">modrm</name> <operator pos:start="265:21" pos:end="265:21">&amp;</operator> <literal type="number" pos:start="265:23" pos:end="265:23">7</literal><operator pos:start="265:24" pos:end="265:24">)</operator> <operator pos:start="265:26" pos:end="265:26">|</operator> <call pos:start="265:28" pos:end="265:35"><name pos:start="265:28" pos:end="265:32">REX_B</name><argument_list pos:start="265:33" pos:end="265:35">(<argument pos:start="265:34" pos:end="265:34"><expr pos:start="265:34" pos:end="265:34"><name pos:start="265:34" pos:end="265:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="266:9" pos:end="266:30"><expr pos:start="266:9" pos:end="266:29"><name pos:start="266:9" pos:end="266:10">op</name> <operator pos:start="266:12" pos:end="266:12">=</operator> <operator pos:start="266:14" pos:end="266:14">(</operator><name pos:start="266:15" pos:end="266:19">modrm</name> <operator pos:start="266:21" pos:end="266:22">&gt;&gt;</operator> <literal type="number" pos:start="266:24" pos:end="266:24">3</literal><operator pos:start="266:25" pos:end="266:25">)</operator> <operator pos:start="266:27" pos:end="266:27">&amp;</operator> <literal type="number" pos:start="266:29" pos:end="266:29">7</literal></expr>;</expr_stmt>
        <if_stmt pos:start="267:9" pos:end="3141:17"><if pos:start="267:9" pos:end="272:9">if <condition pos:start="267:12" pos:end="267:21">(<expr pos:start="267:13" pos:end="267:20"><name pos:start="267:13" pos:end="267:15">mod</name> <operator pos:start="267:17" pos:end="267:18">!=</operator> <literal type="number" pos:start="267:20" pos:end="267:20">3</literal></expr>)</condition> <block pos:start="267:23" pos:end="272:9">{<block_content pos:start="268:13" pos:end="271:47">
            <if_stmt pos:start="268:13" pos:end="269:52"><if pos:start="268:13" pos:end="269:52">if <condition pos:start="268:16" pos:end="268:24">(<expr pos:start="268:17" pos:end="268:23"><name pos:start="268:17" pos:end="268:18">op</name> <operator pos:start="268:20" pos:end="268:21">==</operator> <literal type="number" pos:start="268:23" pos:end="268:23">0</literal></expr>)</condition><block type="pseudo" pos:start="269:17" pos:end="269:52"><block_content pos:start="269:17" pos:end="269:52">
                <expr_stmt pos:start="269:17" pos:end="269:52"><expr pos:start="269:17" pos:end="269:51"><name pos:start="269:17" pos:end="269:29"><name pos:start="269:17" pos:end="269:17">s</name><operator pos:start="269:18" pos:end="269:19">-&gt;</operator><name pos:start="269:20" pos:end="269:29">rip_offset</name></name> <operator pos:start="269:31" pos:end="269:31">=</operator> <call pos:start="269:33" pos:end="269:51"><name pos:start="269:33" pos:end="269:47">insn_const_size</name><argument_list pos:start="269:48" pos:end="269:51">(<argument pos:start="269:49" pos:end="269:50"><expr pos:start="269:49" pos:end="269:50"><name pos:start="269:49" pos:end="269:50">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt pos:start="270:13" pos:end="270:66"><expr pos:start="270:13" pos:end="270:65"><call pos:start="270:13" pos:end="270:65"><name pos:start="270:13" pos:end="270:25">gen_lea_modrm</name><argument_list pos:start="270:26" pos:end="270:65">(<argument pos:start="270:27" pos:end="270:29"><expr pos:start="270:27" pos:end="270:29"><name pos:start="270:27" pos:end="270:29">env</name></expr></argument>, <argument pos:start="270:32" pos:end="270:32"><expr pos:start="270:32" pos:end="270:32"><name pos:start="270:32" pos:end="270:32">s</name></expr></argument>, <argument pos:start="270:35" pos:end="270:39"><expr pos:start="270:35" pos:end="270:39"><name pos:start="270:35" pos:end="270:39">modrm</name></expr></argument>, <argument pos:start="270:42" pos:end="270:50"><expr pos:start="270:42" pos:end="270:50"><operator pos:start="270:42" pos:end="270:42">&amp;</operator><name pos:start="270:43" pos:end="270:50">reg_addr</name></expr></argument>, <argument pos:start="270:53" pos:end="270:64"><expr pos:start="270:53" pos:end="270:64"><operator pos:start="270:53" pos:end="270:53">&amp;</operator><name pos:start="270:54" pos:end="270:64">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="271:13" pos:end="271:47"><expr pos:start="271:13" pos:end="271:46"><call pos:start="271:13" pos:end="271:46"><name pos:start="271:13" pos:end="271:27">gen_op_ld_T0_A0</name><argument_list pos:start="271:28" pos:end="271:46">(<argument pos:start="271:29" pos:end="271:45"><expr pos:start="271:29" pos:end="271:45"><name pos:start="271:29" pos:end="271:30">ot</name> <operator pos:start="271:32" pos:end="271:32">+</operator> <name pos:start="271:34" pos:end="271:45"><name pos:start="271:34" pos:end="271:34">s</name><operator pos:start="271:35" pos:end="271:36">-&gt;</operator><name pos:start="271:37" pos:end="271:45">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="272:11" pos:end="3141:17">else <block pos:start="272:16" pos:end="3141:17">{<block_content pos:start="273:13" pos:end="3141:17">
            <expr_stmt pos:start="273:13" pos:end="273:41"><expr pos:start="273:13" pos:end="273:40"><call pos:start="273:13" pos:end="273:40"><name pos:start="273:13" pos:end="273:29">gen_op_mov_TN_reg</name><argument_list pos:start="273:30" pos:end="273:40">(<argument pos:start="273:31" pos:end="273:32"><expr pos:start="273:31" pos:end="273:32"><name pos:start="273:31" pos:end="273:32">ot</name></expr></argument>, <argument pos:start="273:35" pos:end="273:35"><expr pos:start="273:35" pos:end="273:35"><literal type="number" pos:start="273:35" pos:end="273:35">0</literal></expr></argument>, <argument pos:start="273:38" pos:end="273:39"><expr pos:start="273:38" pos:end="273:39"><name pos:start="273:38" pos:end="273:39">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <switch pos:start="274:9" pos:end="3141:17">switch<condition pos:start="274:15" pos:end="274:18">(<expr pos:start="274:16" pos:end="274:17"><name pos:start="274:16" pos:end="274:17">op</name></expr>)</condition> <block pos:start="274:20" pos:end="3141:17">{<block_content pos:start="275:9" pos:end="3141:17">
        <case pos:start="275:9" pos:end="275:15">case <expr pos:start="275:14" pos:end="275:14"><literal type="number" pos:start="275:14" pos:end="275:14">0</literal></expr>:</case> <comment type="block" pos:start="275:17" pos:end="275:26">/* test */</comment>
            <expr_stmt pos:start="276:13" pos:end="276:39"><expr pos:start="276:13" pos:end="276:38"><name pos:start="276:13" pos:end="276:15">val</name> <operator pos:start="276:17" pos:end="276:17">=</operator> <call pos:start="276:19" pos:end="276:38"><name pos:start="276:19" pos:end="276:26">insn_get</name><argument_list pos:start="276:27" pos:end="276:38">(<argument pos:start="276:28" pos:end="276:30"><expr pos:start="276:28" pos:end="276:30"><name pos:start="276:28" pos:end="276:30">env</name></expr></argument>, <argument pos:start="276:33" pos:end="276:33"><expr pos:start="276:33" pos:end="276:33"><name pos:start="276:33" pos:end="276:33">s</name></expr></argument>, <argument pos:start="276:36" pos:end="276:37"><expr pos:start="276:36" pos:end="276:37"><name pos:start="276:36" pos:end="276:37">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="277:13" pos:end="277:35"><expr pos:start="277:13" pos:end="277:34"><call pos:start="277:13" pos:end="277:34"><name pos:start="277:13" pos:end="277:29">gen_op_movl_T1_im</name><argument_list pos:start="277:30" pos:end="277:34">(<argument pos:start="277:31" pos:end="277:33"><expr pos:start="277:31" pos:end="277:33"><name pos:start="277:31" pos:end="277:33">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="278:13" pos:end="278:36"><expr pos:start="278:13" pos:end="278:35"><call pos:start="278:13" pos:end="278:35"><name pos:start="278:13" pos:end="278:33">gen_op_testl_T0_T1_cc</name><argument_list pos:start="278:34" pos:end="278:35">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="279:13" pos:end="279:44"><expr pos:start="279:13" pos:end="279:43"><call pos:start="279:13" pos:end="279:43"><name pos:start="279:13" pos:end="279:21">set_cc_op</name><argument_list pos:start="279:22" pos:end="279:43">(<argument pos:start="279:23" pos:end="279:23"><expr pos:start="279:23" pos:end="279:23"><name pos:start="279:23" pos:end="279:23">s</name></expr></argument>, <argument pos:start="279:26" pos:end="279:42"><expr pos:start="279:26" pos:end="279:42"><name pos:start="279:26" pos:end="279:37">CC_OP_LOGICB</name> <operator pos:start="279:39" pos:end="279:39">+</operator> <name pos:start="279:41" pos:end="279:42">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="280:13" pos:end="280:18">break;</break>
        <case pos:start="281:9" pos:end="281:15">case <expr pos:start="281:14" pos:end="281:14"><literal type="number" pos:start="281:14" pos:end="281:14">2</literal></expr>:</case> <comment type="block" pos:start="281:17" pos:end="281:25">/* not */</comment>
            <expr_stmt pos:start="282:13" pos:end="282:47"><expr pos:start="282:13" pos:end="282:46"><call pos:start="282:13" pos:end="282:46"><name pos:start="282:13" pos:end="282:26">tcg_gen_not_tl</name><argument_list pos:start="282:27" pos:end="282:46">(<argument pos:start="282:28" pos:end="282:35"><expr pos:start="282:28" pos:end="282:35"><name pos:start="282:28" pos:end="282:35"><name pos:start="282:28" pos:end="282:32">cpu_T</name><index pos:start="282:33" pos:end="282:35">[<expr pos:start="282:34" pos:end="282:34"><literal type="number" pos:start="282:34" pos:end="282:34">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="282:38" pos:end="282:45"><expr pos:start="282:38" pos:end="282:45"><name pos:start="282:38" pos:end="282:45"><name pos:start="282:38" pos:end="282:42">cpu_T</name><index pos:start="282:43" pos:end="282:45">[<expr pos:start="282:44" pos:end="282:44"><literal type="number" pos:start="282:44" pos:end="282:44">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="283:13" pos:end="3141:17"><if pos:start="283:13" pos:end="285:13">if <condition pos:start="283:16" pos:end="283:25">(<expr pos:start="283:17" pos:end="283:24"><name pos:start="283:17" pos:end="283:19">mod</name> <operator pos:start="283:21" pos:end="283:22">!=</operator> <literal type="number" pos:start="283:24" pos:end="283:24">3</literal></expr>)</condition> <block pos:start="283:27" pos:end="285:13">{<block_content pos:start="284:17" pos:end="284:51">
                <expr_stmt pos:start="284:17" pos:end="284:51"><expr pos:start="284:17" pos:end="284:50"><call pos:start="284:17" pos:end="284:50"><name pos:start="284:17" pos:end="284:31">gen_op_st_T0_A0</name><argument_list pos:start="284:32" pos:end="284:50">(<argument pos:start="284:33" pos:end="284:49"><expr pos:start="284:33" pos:end="284:49"><name pos:start="284:33" pos:end="284:34">ot</name> <operator pos:start="284:36" pos:end="284:36">+</operator> <name pos:start="284:38" pos:end="284:49"><name pos:start="284:38" pos:end="284:38">s</name><operator pos:start="284:39" pos:end="284:40">-&gt;</operator><name pos:start="284:41" pos:end="284:49">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="285:15" pos:end="3141:17">else <block pos:start="285:20" pos:end="3141:17">{<block_content pos:start="286:17" pos:end="3141:17">
                <expr_stmt pos:start="286:17" pos:end="286:42"><expr pos:start="286:17" pos:end="286:41"><call pos:start="286:17" pos:end="286:41"><name pos:start="286:17" pos:end="286:33">gen_op_mov_reg_T0</name><argument_list pos:start="286:34" pos:end="286:41">(<argument pos:start="286:35" pos:end="286:36"><expr pos:start="286:35" pos:end="286:36"><name pos:start="286:35" pos:end="286:36">ot</name></expr></argument>, <argument pos:start="286:39" pos:end="286:40"><expr pos:start="286:39" pos:end="286:40"><name pos:start="286:39" pos:end="286:40">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="287:13" pos:end="287:18">break;</break>
        <case pos:start="288:9" pos:end="288:15">case <expr pos:start="288:14" pos:end="288:14"><literal type="number" pos:start="288:14" pos:end="288:14">3</literal></expr>:</case> <comment type="block" pos:start="288:17" pos:end="288:25">/* neg */</comment>
            <expr_stmt pos:start="289:13" pos:end="289:47"><expr pos:start="289:13" pos:end="289:46"><call pos:start="289:13" pos:end="289:46"><name pos:start="289:13" pos:end="289:26">tcg_gen_neg_tl</name><argument_list pos:start="289:27" pos:end="289:46">(<argument pos:start="289:28" pos:end="289:35"><expr pos:start="289:28" pos:end="289:35"><name pos:start="289:28" pos:end="289:35"><name pos:start="289:28" pos:end="289:32">cpu_T</name><index pos:start="289:33" pos:end="289:35">[<expr pos:start="289:34" pos:end="289:34"><literal type="number" pos:start="289:34" pos:end="289:34">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="289:38" pos:end="289:45"><expr pos:start="289:38" pos:end="289:45"><name pos:start="289:38" pos:end="289:45"><name pos:start="289:38" pos:end="289:42">cpu_T</name><index pos:start="289:43" pos:end="289:45">[<expr pos:start="289:44" pos:end="289:44"><literal type="number" pos:start="289:44" pos:end="289:44">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="290:13" pos:end="3141:17"><if pos:start="290:13" pos:end="292:13">if <condition pos:start="290:16" pos:end="290:25">(<expr pos:start="290:17" pos:end="290:24"><name pos:start="290:17" pos:end="290:19">mod</name> <operator pos:start="290:21" pos:end="290:22">!=</operator> <literal type="number" pos:start="290:24" pos:end="290:24">3</literal></expr>)</condition> <block pos:start="290:27" pos:end="292:13">{<block_content pos:start="291:17" pos:end="291:51">
                <expr_stmt pos:start="291:17" pos:end="291:51"><expr pos:start="291:17" pos:end="291:50"><call pos:start="291:17" pos:end="291:50"><name pos:start="291:17" pos:end="291:31">gen_op_st_T0_A0</name><argument_list pos:start="291:32" pos:end="291:50">(<argument pos:start="291:33" pos:end="291:49"><expr pos:start="291:33" pos:end="291:49"><name pos:start="291:33" pos:end="291:34">ot</name> <operator pos:start="291:36" pos:end="291:36">+</operator> <name pos:start="291:38" pos:end="291:49"><name pos:start="291:38" pos:end="291:38">s</name><operator pos:start="291:39" pos:end="291:40">-&gt;</operator><name pos:start="291:41" pos:end="291:49">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="292:15" pos:end="3141:17">else <block pos:start="292:20" pos:end="3141:17">{<block_content pos:start="293:17" pos:end="3141:17">
                <expr_stmt pos:start="293:17" pos:end="293:42"><expr pos:start="293:17" pos:end="293:41"><call pos:start="293:17" pos:end="293:41"><name pos:start="293:17" pos:end="293:33">gen_op_mov_reg_T0</name><argument_list pos:start="293:34" pos:end="293:41">(<argument pos:start="293:35" pos:end="293:36"><expr pos:start="293:35" pos:end="293:36"><name pos:start="293:35" pos:end="293:36">ot</name></expr></argument>, <argument pos:start="293:39" pos:end="293:40"><expr pos:start="293:39" pos:end="293:40"><name pos:start="293:39" pos:end="293:40">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="294:13" pos:end="294:35"><expr pos:start="294:13" pos:end="294:34"><call pos:start="294:13" pos:end="294:34"><name pos:start="294:13" pos:end="294:32">gen_op_update_neg_cc</name><argument_list pos:start="294:33" pos:end="294:34">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="295:13" pos:end="295:42"><expr pos:start="295:13" pos:end="295:41"><call pos:start="295:13" pos:end="295:41"><name pos:start="295:13" pos:end="295:21">set_cc_op</name><argument_list pos:start="295:22" pos:end="295:41">(<argument pos:start="295:23" pos:end="295:23"><expr pos:start="295:23" pos:end="295:23"><name pos:start="295:23" pos:end="295:23">s</name></expr></argument>, <argument pos:start="295:26" pos:end="295:40"><expr pos:start="295:26" pos:end="295:40"><name pos:start="295:26" pos:end="295:35">CC_OP_SUBB</name> <operator pos:start="295:37" pos:end="295:37">+</operator> <name pos:start="295:39" pos:end="295:40">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="296:13" pos:end="296:18">break;</break>
        <case pos:start="297:9" pos:end="297:15">case <expr pos:start="297:14" pos:end="297:14"><literal type="number" pos:start="297:14" pos:end="297:14">4</literal></expr>:</case> <comment type="block" pos:start="297:17" pos:end="297:25">/* mul */</comment>
            <switch pos:start="298:13" pos:end="3141:17">switch<condition pos:start="298:19" pos:end="298:22">(<expr pos:start="298:20" pos:end="298:21"><name pos:start="298:20" pos:end="298:21">ot</name></expr>)</condition> <block pos:start="298:24" pos:end="3141:17">{<block_content pos:start="299:13" pos:end="3141:17">
            <case pos:start="299:13" pos:end="299:25">case <expr pos:start="299:18" pos:end="299:24"><name pos:start="299:18" pos:end="299:24">OT_BYTE</name></expr>:</case>
                <expr_stmt pos:start="300:17" pos:end="300:53"><expr pos:start="300:17" pos:end="300:52"><call pos:start="300:17" pos:end="300:52"><name pos:start="300:17" pos:end="300:33">gen_op_mov_TN_reg</name><argument_list pos:start="300:34" pos:end="300:52">(<argument pos:start="300:35" pos:end="300:41"><expr pos:start="300:35" pos:end="300:41"><name pos:start="300:35" pos:end="300:41">OT_BYTE</name></expr></argument>, <argument pos:start="300:44" pos:end="300:44"><expr pos:start="300:44" pos:end="300:44"><literal type="number" pos:start="300:44" pos:end="300:44">1</literal></expr></argument>, <argument pos:start="300:47" pos:end="300:51"><expr pos:start="300:47" pos:end="300:51"><name pos:start="300:47" pos:end="300:51">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="301:17" pos:end="301:53"><expr pos:start="301:17" pos:end="301:52"><call pos:start="301:17" pos:end="301:52"><name pos:start="301:17" pos:end="301:32">tcg_gen_ext8u_tl</name><argument_list pos:start="301:33" pos:end="301:52">(<argument pos:start="301:34" pos:end="301:41"><expr pos:start="301:34" pos:end="301:41"><name pos:start="301:34" pos:end="301:41"><name pos:start="301:34" pos:end="301:38">cpu_T</name><index pos:start="301:39" pos:end="301:41">[<expr pos:start="301:40" pos:end="301:40"><literal type="number" pos:start="301:40" pos:end="301:40">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="301:44" pos:end="301:51"><expr pos:start="301:44" pos:end="301:51"><name pos:start="301:44" pos:end="301:51"><name pos:start="301:44" pos:end="301:48">cpu_T</name><index pos:start="301:49" pos:end="301:51">[<expr pos:start="301:50" pos:end="301:50"><literal type="number" pos:start="301:50" pos:end="301:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="302:17" pos:end="302:53"><expr pos:start="302:17" pos:end="302:52"><call pos:start="302:17" pos:end="302:52"><name pos:start="302:17" pos:end="302:32">tcg_gen_ext8u_tl</name><argument_list pos:start="302:33" pos:end="302:52">(<argument pos:start="302:34" pos:end="302:41"><expr pos:start="302:34" pos:end="302:41"><name pos:start="302:34" pos:end="302:41"><name pos:start="302:34" pos:end="302:38">cpu_T</name><index pos:start="302:39" pos:end="302:41">[<expr pos:start="302:40" pos:end="302:40"><literal type="number" pos:start="302:40" pos:end="302:40">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="302:44" pos:end="302:51"><expr pos:start="302:44" pos:end="302:51"><name pos:start="302:44" pos:end="302:51"><name pos:start="302:44" pos:end="302:48">cpu_T</name><index pos:start="302:49" pos:end="302:51">[<expr pos:start="302:50" pos:end="302:50"><literal type="number" pos:start="302:50" pos:end="302:50">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="block" pos:start="303:17" pos:end="303:63">/* XXX: use 32 bit mul which could be faster */</comment>
                <expr_stmt pos:start="304:17" pos:end="304:61"><expr pos:start="304:17" pos:end="304:60"><call pos:start="304:17" pos:end="304:60"><name pos:start="304:17" pos:end="304:30">tcg_gen_mul_tl</name><argument_list pos:start="304:31" pos:end="304:60">(<argument pos:start="304:32" pos:end="304:39"><expr pos:start="304:32" pos:end="304:39"><name pos:start="304:32" pos:end="304:39"><name pos:start="304:32" pos:end="304:36">cpu_T</name><index pos:start="304:37" pos:end="304:39">[<expr pos:start="304:38" pos:end="304:38"><literal type="number" pos:start="304:38" pos:end="304:38">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="304:42" pos:end="304:49"><expr pos:start="304:42" pos:end="304:49"><name pos:start="304:42" pos:end="304:49"><name pos:start="304:42" pos:end="304:46">cpu_T</name><index pos:start="304:47" pos:end="304:49">[<expr pos:start="304:48" pos:end="304:48"><literal type="number" pos:start="304:48" pos:end="304:48">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="304:52" pos:end="304:59"><expr pos:start="304:52" pos:end="304:59"><name pos:start="304:52" pos:end="304:59"><name pos:start="304:52" pos:end="304:56">cpu_T</name><index pos:start="304:57" pos:end="304:59">[<expr pos:start="304:58" pos:end="304:58"><literal type="number" pos:start="304:58" pos:end="304:58">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="305:17" pos:end="305:50"><expr pos:start="305:17" pos:end="305:49"><call pos:start="305:17" pos:end="305:49"><name pos:start="305:17" pos:end="305:33">gen_op_mov_reg_T0</name><argument_list pos:start="305:34" pos:end="305:49">(<argument pos:start="305:35" pos:end="305:41"><expr pos:start="305:35" pos:end="305:41"><name pos:start="305:35" pos:end="305:41">OT_WORD</name></expr></argument>, <argument pos:start="305:44" pos:end="305:48"><expr pos:start="305:44" pos:end="305:48"><name pos:start="305:44" pos:end="305:48">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="306:17" pos:end="306:53"><expr pos:start="306:17" pos:end="306:52"><call pos:start="306:17" pos:end="306:52"><name pos:start="306:17" pos:end="306:30">tcg_gen_mov_tl</name><argument_list pos:start="306:31" pos:end="306:52">(<argument pos:start="306:32" pos:end="306:41"><expr pos:start="306:32" pos:end="306:41"><name pos:start="306:32" pos:end="306:41">cpu_cc_dst</name></expr></argument>, <argument pos:start="306:44" pos:end="306:51"><expr pos:start="306:44" pos:end="306:51"><name pos:start="306:44" pos:end="306:51"><name pos:start="306:44" pos:end="306:48">cpu_T</name><index pos:start="306:49" pos:end="306:51">[<expr pos:start="306:50" pos:end="306:50"><literal type="number" pos:start="306:50" pos:end="306:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="307:17" pos:end="307:62"><expr pos:start="307:17" pos:end="307:61"><call pos:start="307:17" pos:end="307:61"><name pos:start="307:17" pos:end="307:31">tcg_gen_andi_tl</name><argument_list pos:start="307:32" pos:end="307:61">(<argument pos:start="307:33" pos:end="307:42"><expr pos:start="307:33" pos:end="307:42"><name pos:start="307:33" pos:end="307:42">cpu_cc_src</name></expr></argument>, <argument pos:start="307:45" pos:end="307:52"><expr pos:start="307:45" pos:end="307:52"><name pos:start="307:45" pos:end="307:52"><name pos:start="307:45" pos:end="307:49">cpu_T</name><index pos:start="307:50" pos:end="307:52">[<expr pos:start="307:51" pos:end="307:51"><literal type="number" pos:start="307:51" pos:end="307:51">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="307:55" pos:end="307:60"><expr pos:start="307:55" pos:end="307:60"><literal type="number" pos:start="307:55" pos:end="307:60">0xff00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="308:17" pos:end="308:41"><expr pos:start="308:17" pos:end="308:40"><call pos:start="308:17" pos:end="308:40"><name pos:start="308:17" pos:end="308:25">set_cc_op</name><argument_list pos:start="308:26" pos:end="308:40">(<argument pos:start="308:27" pos:end="308:27"><expr pos:start="308:27" pos:end="308:27"><name pos:start="308:27" pos:end="308:27">s</name></expr></argument>, <argument pos:start="308:30" pos:end="308:39"><expr pos:start="308:30" pos:end="308:39"><name pos:start="308:30" pos:end="308:39">CC_OP_MULB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="309:17" pos:end="309:22">break;</break>
            <case pos:start="310:13" pos:end="310:25">case <expr pos:start="310:18" pos:end="310:24"><name pos:start="310:18" pos:end="310:24">OT_WORD</name></expr>:</case>
                <expr_stmt pos:start="311:17" pos:end="311:53"><expr pos:start="311:17" pos:end="311:52"><call pos:start="311:17" pos:end="311:52"><name pos:start="311:17" pos:end="311:33">gen_op_mov_TN_reg</name><argument_list pos:start="311:34" pos:end="311:52">(<argument pos:start="311:35" pos:end="311:41"><expr pos:start="311:35" pos:end="311:41"><name pos:start="311:35" pos:end="311:41">OT_WORD</name></expr></argument>, <argument pos:start="311:44" pos:end="311:44"><expr pos:start="311:44" pos:end="311:44"><literal type="number" pos:start="311:44" pos:end="311:44">1</literal></expr></argument>, <argument pos:start="311:47" pos:end="311:51"><expr pos:start="311:47" pos:end="311:51"><name pos:start="311:47" pos:end="311:51">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="312:17" pos:end="312:54"><expr pos:start="312:17" pos:end="312:53"><call pos:start="312:17" pos:end="312:53"><name pos:start="312:17" pos:end="312:33">tcg_gen_ext16u_tl</name><argument_list pos:start="312:34" pos:end="312:53">(<argument pos:start="312:35" pos:end="312:42"><expr pos:start="312:35" pos:end="312:42"><name pos:start="312:35" pos:end="312:42"><name pos:start="312:35" pos:end="312:39">cpu_T</name><index pos:start="312:40" pos:end="312:42">[<expr pos:start="312:41" pos:end="312:41"><literal type="number" pos:start="312:41" pos:end="312:41">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="312:45" pos:end="312:52"><expr pos:start="312:45" pos:end="312:52"><name pos:start="312:45" pos:end="312:52"><name pos:start="312:45" pos:end="312:49">cpu_T</name><index pos:start="312:50" pos:end="312:52">[<expr pos:start="312:51" pos:end="312:51"><literal type="number" pos:start="312:51" pos:end="312:51">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="313:17" pos:end="313:54"><expr pos:start="313:17" pos:end="313:53"><call pos:start="313:17" pos:end="313:53"><name pos:start="313:17" pos:end="313:33">tcg_gen_ext16u_tl</name><argument_list pos:start="313:34" pos:end="313:53">(<argument pos:start="313:35" pos:end="313:42"><expr pos:start="313:35" pos:end="313:42"><name pos:start="313:35" pos:end="313:42"><name pos:start="313:35" pos:end="313:39">cpu_T</name><index pos:start="313:40" pos:end="313:42">[<expr pos:start="313:41" pos:end="313:41"><literal type="number" pos:start="313:41" pos:end="313:41">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="313:45" pos:end="313:52"><expr pos:start="313:45" pos:end="313:52"><name pos:start="313:45" pos:end="313:52"><name pos:start="313:45" pos:end="313:49">cpu_T</name><index pos:start="313:50" pos:end="313:52">[<expr pos:start="313:51" pos:end="313:51"><literal type="number" pos:start="313:51" pos:end="313:51">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="block" pos:start="314:17" pos:end="314:63">/* XXX: use 32 bit mul which could be faster */</comment>
                <expr_stmt pos:start="315:17" pos:end="315:61"><expr pos:start="315:17" pos:end="315:60"><call pos:start="315:17" pos:end="315:60"><name pos:start="315:17" pos:end="315:30">tcg_gen_mul_tl</name><argument_list pos:start="315:31" pos:end="315:60">(<argument pos:start="315:32" pos:end="315:39"><expr pos:start="315:32" pos:end="315:39"><name pos:start="315:32" pos:end="315:39"><name pos:start="315:32" pos:end="315:36">cpu_T</name><index pos:start="315:37" pos:end="315:39">[<expr pos:start="315:38" pos:end="315:38"><literal type="number" pos:start="315:38" pos:end="315:38">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="315:42" pos:end="315:49"><expr pos:start="315:42" pos:end="315:49"><name pos:start="315:42" pos:end="315:49"><name pos:start="315:42" pos:end="315:46">cpu_T</name><index pos:start="315:47" pos:end="315:49">[<expr pos:start="315:48" pos:end="315:48"><literal type="number" pos:start="315:48" pos:end="315:48">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="315:52" pos:end="315:59"><expr pos:start="315:52" pos:end="315:59"><name pos:start="315:52" pos:end="315:59"><name pos:start="315:52" pos:end="315:56">cpu_T</name><index pos:start="315:57" pos:end="315:59">[<expr pos:start="315:58" pos:end="315:58"><literal type="number" pos:start="315:58" pos:end="315:58">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="316:17" pos:end="316:50"><expr pos:start="316:17" pos:end="316:49"><call pos:start="316:17" pos:end="316:49"><name pos:start="316:17" pos:end="316:33">gen_op_mov_reg_T0</name><argument_list pos:start="316:34" pos:end="316:49">(<argument pos:start="316:35" pos:end="316:41"><expr pos:start="316:35" pos:end="316:41"><name pos:start="316:35" pos:end="316:41">OT_WORD</name></expr></argument>, <argument pos:start="316:44" pos:end="316:48"><expr pos:start="316:44" pos:end="316:48"><name pos:start="316:44" pos:end="316:48">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="317:17" pos:end="317:53"><expr pos:start="317:17" pos:end="317:52"><call pos:start="317:17" pos:end="317:52"><name pos:start="317:17" pos:end="317:30">tcg_gen_mov_tl</name><argument_list pos:start="317:31" pos:end="317:52">(<argument pos:start="317:32" pos:end="317:41"><expr pos:start="317:32" pos:end="317:41"><name pos:start="317:32" pos:end="317:41">cpu_cc_dst</name></expr></argument>, <argument pos:start="317:44" pos:end="317:51"><expr pos:start="317:44" pos:end="317:51"><name pos:start="317:44" pos:end="317:51"><name pos:start="317:44" pos:end="317:48">cpu_T</name><index pos:start="317:49" pos:end="317:51">[<expr pos:start="317:50" pos:end="317:50"><literal type="number" pos:start="317:50" pos:end="317:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="318:17" pos:end="318:56"><expr pos:start="318:17" pos:end="318:55"><call pos:start="318:17" pos:end="318:55"><name pos:start="318:17" pos:end="318:31">tcg_gen_shri_tl</name><argument_list pos:start="318:32" pos:end="318:55">(<argument pos:start="318:33" pos:end="318:40"><expr pos:start="318:33" pos:end="318:40"><name pos:start="318:33" pos:end="318:40"><name pos:start="318:33" pos:end="318:37">cpu_T</name><index pos:start="318:38" pos:end="318:40">[<expr pos:start="318:39" pos:end="318:39"><literal type="number" pos:start="318:39" pos:end="318:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="318:43" pos:end="318:50"><expr pos:start="318:43" pos:end="318:50"><name pos:start="318:43" pos:end="318:50"><name pos:start="318:43" pos:end="318:47">cpu_T</name><index pos:start="318:48" pos:end="318:50">[<expr pos:start="318:49" pos:end="318:49"><literal type="number" pos:start="318:49" pos:end="318:49">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="318:53" pos:end="318:54"><expr pos:start="318:53" pos:end="318:54"><literal type="number" pos:start="318:53" pos:end="318:54">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="319:17" pos:end="319:50"><expr pos:start="319:17" pos:end="319:49"><call pos:start="319:17" pos:end="319:49"><name pos:start="319:17" pos:end="319:33">gen_op_mov_reg_T0</name><argument_list pos:start="319:34" pos:end="319:49">(<argument pos:start="319:35" pos:end="319:41"><expr pos:start="319:35" pos:end="319:41"><name pos:start="319:35" pos:end="319:41">OT_WORD</name></expr></argument>, <argument pos:start="319:44" pos:end="319:48"><expr pos:start="319:44" pos:end="319:48"><name pos:start="319:44" pos:end="319:48">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="320:17" pos:end="320:53"><expr pos:start="320:17" pos:end="320:52"><call pos:start="320:17" pos:end="320:52"><name pos:start="320:17" pos:end="320:30">tcg_gen_mov_tl</name><argument_list pos:start="320:31" pos:end="320:52">(<argument pos:start="320:32" pos:end="320:41"><expr pos:start="320:32" pos:end="320:41"><name pos:start="320:32" pos:end="320:41">cpu_cc_src</name></expr></argument>, <argument pos:start="320:44" pos:end="320:51"><expr pos:start="320:44" pos:end="320:51"><name pos:start="320:44" pos:end="320:51"><name pos:start="320:44" pos:end="320:48">cpu_T</name><index pos:start="320:49" pos:end="320:51">[<expr pos:start="320:50" pos:end="320:50"><literal type="number" pos:start="320:50" pos:end="320:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="321:17" pos:end="321:41"><expr pos:start="321:17" pos:end="321:40"><call pos:start="321:17" pos:end="321:40"><name pos:start="321:17" pos:end="321:25">set_cc_op</name><argument_list pos:start="321:26" pos:end="321:40">(<argument pos:start="321:27" pos:end="321:27"><expr pos:start="321:27" pos:end="321:27"><name pos:start="321:27" pos:end="321:27">s</name></expr></argument>, <argument pos:start="321:30" pos:end="321:39"><expr pos:start="321:30" pos:end="321:39"><name pos:start="321:30" pos:end="321:39">CC_OP_MULW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="322:17" pos:end="322:22">break;</break>
            <default pos:start="323:13" pos:end="323:20">default:</default>
            <case pos:start="324:13" pos:end="324:25">case <expr pos:start="324:18" pos:end="324:24"><name pos:start="324:18" pos:end="324:24">OT_LONG</name></expr>:</case>
                <expr_stmt pos:start="325:17" pos:end="325:61"><expr pos:start="325:17" pos:end="325:60"><call pos:start="325:17" pos:end="325:60"><name pos:start="325:17" pos:end="325:36">tcg_gen_trunc_tl_i32</name><argument_list pos:start="325:37" pos:end="325:60">(<argument pos:start="325:38" pos:end="325:49"><expr pos:start="325:38" pos:end="325:49"><name pos:start="325:38" pos:end="325:49">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="325:52" pos:end="325:59"><expr pos:start="325:52" pos:end="325:59"><name pos:start="325:52" pos:end="325:59"><name pos:start="325:52" pos:end="325:56">cpu_T</name><index pos:start="325:57" pos:end="325:59">[<expr pos:start="325:58" pos:end="325:58"><literal type="number" pos:start="325:58" pos:end="325:58">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="326:17" pos:end="326:68"><expr pos:start="326:17" pos:end="326:67"><call pos:start="326:17" pos:end="326:67"><name pos:start="326:17" pos:end="326:36">tcg_gen_trunc_tl_i32</name><argument_list pos:start="326:37" pos:end="326:67">(<argument pos:start="326:38" pos:end="326:49"><expr pos:start="326:38" pos:end="326:49"><name pos:start="326:38" pos:end="326:49">cpu_tmp3_i32</name></expr></argument>, <argument pos:start="326:52" pos:end="326:66"><expr pos:start="326:52" pos:end="326:66"><name pos:start="326:52" pos:end="326:66"><name pos:start="326:52" pos:end="326:59">cpu_regs</name><index pos:start="326:60" pos:end="326:66">[<expr pos:start="326:61" pos:end="326:65"><name pos:start="326:61" pos:end="326:65">R_EAX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="327:17" pos:end="328:62"><expr pos:start="327:17" pos:end="328:61"><call pos:start="327:17" pos:end="328:61"><name pos:start="327:17" pos:end="327:33">tcg_gen_mulu2_i32</name><argument_list pos:start="327:34" pos:end="328:61">(<argument pos:start="327:35" pos:end="327:46"><expr pos:start="327:35" pos:end="327:46"><name pos:start="327:35" pos:end="327:46">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="327:49" pos:end="327:60"><expr pos:start="327:49" pos:end="327:60"><name pos:start="327:49" pos:end="327:60">cpu_tmp3_i32</name></expr></argument>,
                                  <argument pos:start="328:35" pos:end="328:46"><expr pos:start="328:35" pos:end="328:46"><name pos:start="328:35" pos:end="328:46">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="328:49" pos:end="328:60"><expr pos:start="328:49" pos:end="328:60"><name pos:start="328:49" pos:end="328:60">cpu_tmp3_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="329:17" pos:end="329:67"><expr pos:start="329:17" pos:end="329:66"><call pos:start="329:17" pos:end="329:66"><name pos:start="329:17" pos:end="329:35">tcg_gen_extu_i32_tl</name><argument_list pos:start="329:36" pos:end="329:66">(<argument pos:start="329:37" pos:end="329:51"><expr pos:start="329:37" pos:end="329:51"><name pos:start="329:37" pos:end="329:51"><name pos:start="329:37" pos:end="329:44">cpu_regs</name><index pos:start="329:45" pos:end="329:51">[<expr pos:start="329:46" pos:end="329:50"><name pos:start="329:46" pos:end="329:50">R_EAX</name></expr>]</index></name></expr></argument>, <argument pos:start="329:54" pos:end="329:65"><expr pos:start="329:54" pos:end="329:65"><name pos:start="329:54" pos:end="329:65">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="330:17" pos:end="330:67"><expr pos:start="330:17" pos:end="330:66"><call pos:start="330:17" pos:end="330:66"><name pos:start="330:17" pos:end="330:35">tcg_gen_extu_i32_tl</name><argument_list pos:start="330:36" pos:end="330:66">(<argument pos:start="330:37" pos:end="330:51"><expr pos:start="330:37" pos:end="330:51"><name pos:start="330:37" pos:end="330:51"><name pos:start="330:37" pos:end="330:44">cpu_regs</name><index pos:start="330:45" pos:end="330:51">[<expr pos:start="330:46" pos:end="330:50"><name pos:start="330:46" pos:end="330:50">R_EDX</name></expr>]</index></name></expr></argument>, <argument pos:start="330:54" pos:end="330:65"><expr pos:start="330:54" pos:end="330:65"><name pos:start="330:54" pos:end="330:65">cpu_tmp3_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="331:17" pos:end="331:60"><expr pos:start="331:17" pos:end="331:59"><call pos:start="331:17" pos:end="331:59"><name pos:start="331:17" pos:end="331:30">tcg_gen_mov_tl</name><argument_list pos:start="331:31" pos:end="331:59">(<argument pos:start="331:32" pos:end="331:41"><expr pos:start="331:32" pos:end="331:41"><name pos:start="331:32" pos:end="331:41">cpu_cc_dst</name></expr></argument>, <argument pos:start="331:44" pos:end="331:58"><expr pos:start="331:44" pos:end="331:58"><name pos:start="331:44" pos:end="331:58"><name pos:start="331:44" pos:end="331:51">cpu_regs</name><index pos:start="331:52" pos:end="331:58">[<expr pos:start="331:53" pos:end="331:57"><name pos:start="331:53" pos:end="331:57">R_EAX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="332:17" pos:end="332:60"><expr pos:start="332:17" pos:end="332:59"><call pos:start="332:17" pos:end="332:59"><name pos:start="332:17" pos:end="332:30">tcg_gen_mov_tl</name><argument_list pos:start="332:31" pos:end="332:59">(<argument pos:start="332:32" pos:end="332:41"><expr pos:start="332:32" pos:end="332:41"><name pos:start="332:32" pos:end="332:41">cpu_cc_src</name></expr></argument>, <argument pos:start="332:44" pos:end="332:58"><expr pos:start="332:44" pos:end="332:58"><name pos:start="332:44" pos:end="332:58"><name pos:start="332:44" pos:end="332:51">cpu_regs</name><index pos:start="332:52" pos:end="332:58">[<expr pos:start="332:53" pos:end="332:57"><name pos:start="332:53" pos:end="332:57">R_EDX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="333:17" pos:end="333:41"><expr pos:start="333:17" pos:end="333:40"><call pos:start="333:17" pos:end="333:40"><name pos:start="333:17" pos:end="333:25">set_cc_op</name><argument_list pos:start="333:26" pos:end="333:40">(<argument pos:start="333:27" pos:end="333:27"><expr pos:start="333:27" pos:end="333:27"><name pos:start="333:27" pos:end="333:27">s</name></expr></argument>, <argument pos:start="333:30" pos:end="333:39"><expr pos:start="333:30" pos:end="333:39"><name pos:start="333:30" pos:end="333:39">CC_OP_MULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="334:17" pos:end="336:0">break;</break>
<cpp:ifdef pos:start="335:1" pos:end="335:20">#<cpp:directive pos:start="335:2" pos:end="335:6">ifdef</cpp:directive> <name pos:start="335:8" pos:end="335:20">TARGET_X86_64</name></cpp:ifdef>
            <case pos:start="336:13" pos:end="336:25">case <expr pos:start="336:18" pos:end="336:24"><name pos:start="336:18" pos:end="336:24">OT_QUAD</name></expr>:</case>
                <expr_stmt pos:start="337:17" pos:end="338:61"><expr pos:start="337:17" pos:end="338:60"><call pos:start="337:17" pos:end="338:60"><name pos:start="337:17" pos:end="337:33">tcg_gen_mulu2_i64</name><argument_list pos:start="337:34" pos:end="338:60">(<argument pos:start="337:35" pos:end="337:49"><expr pos:start="337:35" pos:end="337:49"><name pos:start="337:35" pos:end="337:49"><name pos:start="337:35" pos:end="337:42">cpu_regs</name><index pos:start="337:43" pos:end="337:49">[<expr pos:start="337:44" pos:end="337:48"><name pos:start="337:44" pos:end="337:48">R_EAX</name></expr>]</index></name></expr></argument>, <argument pos:start="337:52" pos:end="337:66"><expr pos:start="337:52" pos:end="337:66"><name pos:start="337:52" pos:end="337:66"><name pos:start="337:52" pos:end="337:59">cpu_regs</name><index pos:start="337:60" pos:end="337:66">[<expr pos:start="337:61" pos:end="337:65"><name pos:start="337:61" pos:end="337:65">R_EDX</name></expr>]</index></name></expr></argument>,
                                  <argument pos:start="338:35" pos:end="338:42"><expr pos:start="338:35" pos:end="338:42"><name pos:start="338:35" pos:end="338:42"><name pos:start="338:35" pos:end="338:39">cpu_T</name><index pos:start="338:40" pos:end="338:42">[<expr pos:start="338:41" pos:end="338:41"><literal type="number" pos:start="338:41" pos:end="338:41">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="338:45" pos:end="338:59"><expr pos:start="338:45" pos:end="338:59"><name pos:start="338:45" pos:end="338:59"><name pos:start="338:45" pos:end="338:52">cpu_regs</name><index pos:start="338:53" pos:end="338:59">[<expr pos:start="338:54" pos:end="338:58"><name pos:start="338:54" pos:end="338:58">R_EAX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="339:17" pos:end="339:60"><expr pos:start="339:17" pos:end="339:59"><call pos:start="339:17" pos:end="339:59"><name pos:start="339:17" pos:end="339:30">tcg_gen_mov_tl</name><argument_list pos:start="339:31" pos:end="339:59">(<argument pos:start="339:32" pos:end="339:41"><expr pos:start="339:32" pos:end="339:41"><name pos:start="339:32" pos:end="339:41">cpu_cc_dst</name></expr></argument>, <argument pos:start="339:44" pos:end="339:58"><expr pos:start="339:44" pos:end="339:58"><name pos:start="339:44" pos:end="339:58"><name pos:start="339:44" pos:end="339:51">cpu_regs</name><index pos:start="339:52" pos:end="339:58">[<expr pos:start="339:53" pos:end="339:57"><name pos:start="339:53" pos:end="339:57">R_EAX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="340:17" pos:end="340:60"><expr pos:start="340:17" pos:end="340:59"><call pos:start="340:17" pos:end="340:59"><name pos:start="340:17" pos:end="340:30">tcg_gen_mov_tl</name><argument_list pos:start="340:31" pos:end="340:59">(<argument pos:start="340:32" pos:end="340:41"><expr pos:start="340:32" pos:end="340:41"><name pos:start="340:32" pos:end="340:41">cpu_cc_src</name></expr></argument>, <argument pos:start="340:44" pos:end="340:58"><expr pos:start="340:44" pos:end="340:58"><name pos:start="340:44" pos:end="340:58"><name pos:start="340:44" pos:end="340:51">cpu_regs</name><index pos:start="340:52" pos:end="340:58">[<expr pos:start="340:53" pos:end="340:57"><name pos:start="340:53" pos:end="340:57">R_EDX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="341:17" pos:end="341:41"><expr pos:start="341:17" pos:end="341:40"><call pos:start="341:17" pos:end="341:40"><name pos:start="341:17" pos:end="341:25">set_cc_op</name><argument_list pos:start="341:26" pos:end="341:40">(<argument pos:start="341:27" pos:end="341:27"><expr pos:start="341:27" pos:end="341:27"><name pos:start="341:27" pos:end="341:27">s</name></expr></argument>, <argument pos:start="341:30" pos:end="341:39"><expr pos:start="341:30" pos:end="341:39"><name pos:start="341:30" pos:end="341:39">CC_OP_MULQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="342:17" pos:end="344:0">break;</break>
<cpp:endif pos:start="343:1" pos:end="343:6">#<cpp:directive pos:start="343:2" pos:end="343:6">endif</cpp:directive></cpp:endif>
            <break pos:start="344:13" pos:end="344:18">break;</break>
        <case pos:start="345:9" pos:end="345:15">case <expr pos:start="345:14" pos:end="345:14"><literal type="number" pos:start="345:14" pos:end="345:14">5</literal></expr>:</case> <comment type="block" pos:start="345:17" pos:end="345:26">/* imul */</comment>
            <switch pos:start="346:13" pos:end="3141:17">switch<condition pos:start="346:19" pos:end="346:22">(<expr pos:start="346:20" pos:end="346:21"><name pos:start="346:20" pos:end="346:21">ot</name></expr>)</condition> <block pos:start="346:24" pos:end="3141:17">{<block_content pos:start="347:13" pos:end="3141:17">
            <case pos:start="347:13" pos:end="347:25">case <expr pos:start="347:18" pos:end="347:24"><name pos:start="347:18" pos:end="347:24">OT_BYTE</name></expr>:</case>
                <expr_stmt pos:start="348:17" pos:end="348:53"><expr pos:start="348:17" pos:end="348:52"><call pos:start="348:17" pos:end="348:52"><name pos:start="348:17" pos:end="348:33">gen_op_mov_TN_reg</name><argument_list pos:start="348:34" pos:end="348:52">(<argument pos:start="348:35" pos:end="348:41"><expr pos:start="348:35" pos:end="348:41"><name pos:start="348:35" pos:end="348:41">OT_BYTE</name></expr></argument>, <argument pos:start="348:44" pos:end="348:44"><expr pos:start="348:44" pos:end="348:44"><literal type="number" pos:start="348:44" pos:end="348:44">1</literal></expr></argument>, <argument pos:start="348:47" pos:end="348:51"><expr pos:start="348:47" pos:end="348:51"><name pos:start="348:47" pos:end="348:51">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="349:17" pos:end="349:53"><expr pos:start="349:17" pos:end="349:52"><call pos:start="349:17" pos:end="349:52"><name pos:start="349:17" pos:end="349:32">tcg_gen_ext8s_tl</name><argument_list pos:start="349:33" pos:end="349:52">(<argument pos:start="349:34" pos:end="349:41"><expr pos:start="349:34" pos:end="349:41"><name pos:start="349:34" pos:end="349:41"><name pos:start="349:34" pos:end="349:38">cpu_T</name><index pos:start="349:39" pos:end="349:41">[<expr pos:start="349:40" pos:end="349:40"><literal type="number" pos:start="349:40" pos:end="349:40">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="349:44" pos:end="349:51"><expr pos:start="349:44" pos:end="349:51"><name pos:start="349:44" pos:end="349:51"><name pos:start="349:44" pos:end="349:48">cpu_T</name><index pos:start="349:49" pos:end="349:51">[<expr pos:start="349:50" pos:end="349:50"><literal type="number" pos:start="349:50" pos:end="349:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="350:17" pos:end="350:53"><expr pos:start="350:17" pos:end="350:52"><call pos:start="350:17" pos:end="350:52"><name pos:start="350:17" pos:end="350:32">tcg_gen_ext8s_tl</name><argument_list pos:start="350:33" pos:end="350:52">(<argument pos:start="350:34" pos:end="350:41"><expr pos:start="350:34" pos:end="350:41"><name pos:start="350:34" pos:end="350:41"><name pos:start="350:34" pos:end="350:38">cpu_T</name><index pos:start="350:39" pos:end="350:41">[<expr pos:start="350:40" pos:end="350:40"><literal type="number" pos:start="350:40" pos:end="350:40">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="350:44" pos:end="350:51"><expr pos:start="350:44" pos:end="350:51"><name pos:start="350:44" pos:end="350:51"><name pos:start="350:44" pos:end="350:48">cpu_T</name><index pos:start="350:49" pos:end="350:51">[<expr pos:start="350:50" pos:end="350:50"><literal type="number" pos:start="350:50" pos:end="350:50">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="block" pos:start="351:17" pos:end="351:63">/* XXX: use 32 bit mul which could be faster */</comment>
                <expr_stmt pos:start="352:17" pos:end="352:61"><expr pos:start="352:17" pos:end="352:60"><call pos:start="352:17" pos:end="352:60"><name pos:start="352:17" pos:end="352:30">tcg_gen_mul_tl</name><argument_list pos:start="352:31" pos:end="352:60">(<argument pos:start="352:32" pos:end="352:39"><expr pos:start="352:32" pos:end="352:39"><name pos:start="352:32" pos:end="352:39"><name pos:start="352:32" pos:end="352:36">cpu_T</name><index pos:start="352:37" pos:end="352:39">[<expr pos:start="352:38" pos:end="352:38"><literal type="number" pos:start="352:38" pos:end="352:38">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="352:42" pos:end="352:49"><expr pos:start="352:42" pos:end="352:49"><name pos:start="352:42" pos:end="352:49"><name pos:start="352:42" pos:end="352:46">cpu_T</name><index pos:start="352:47" pos:end="352:49">[<expr pos:start="352:48" pos:end="352:48"><literal type="number" pos:start="352:48" pos:end="352:48">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="352:52" pos:end="352:59"><expr pos:start="352:52" pos:end="352:59"><name pos:start="352:52" pos:end="352:59"><name pos:start="352:52" pos:end="352:56">cpu_T</name><index pos:start="352:57" pos:end="352:59">[<expr pos:start="352:58" pos:end="352:58"><literal type="number" pos:start="352:58" pos:end="352:58">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="353:17" pos:end="353:50"><expr pos:start="353:17" pos:end="353:49"><call pos:start="353:17" pos:end="353:49"><name pos:start="353:17" pos:end="353:33">gen_op_mov_reg_T0</name><argument_list pos:start="353:34" pos:end="353:49">(<argument pos:start="353:35" pos:end="353:41"><expr pos:start="353:35" pos:end="353:41"><name pos:start="353:35" pos:end="353:41">OT_WORD</name></expr></argument>, <argument pos:start="353:44" pos:end="353:48"><expr pos:start="353:44" pos:end="353:48"><name pos:start="353:44" pos:end="353:48">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="354:17" pos:end="354:53"><expr pos:start="354:17" pos:end="354:52"><call pos:start="354:17" pos:end="354:52"><name pos:start="354:17" pos:end="354:30">tcg_gen_mov_tl</name><argument_list pos:start="354:31" pos:end="354:52">(<argument pos:start="354:32" pos:end="354:41"><expr pos:start="354:32" pos:end="354:41"><name pos:start="354:32" pos:end="354:41">cpu_cc_dst</name></expr></argument>, <argument pos:start="354:44" pos:end="354:51"><expr pos:start="354:44" pos:end="354:51"><name pos:start="354:44" pos:end="354:51"><name pos:start="354:44" pos:end="354:48">cpu_T</name><index pos:start="354:49" pos:end="354:51">[<expr pos:start="354:50" pos:end="354:50"><literal type="number" pos:start="354:50" pos:end="354:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="355:17" pos:end="355:53"><expr pos:start="355:17" pos:end="355:52"><call pos:start="355:17" pos:end="355:52"><name pos:start="355:17" pos:end="355:32">tcg_gen_ext8s_tl</name><argument_list pos:start="355:33" pos:end="355:52">(<argument pos:start="355:34" pos:end="355:41"><expr pos:start="355:34" pos:end="355:41"><name pos:start="355:34" pos:end="355:41">cpu_tmp0</name></expr></argument>, <argument pos:start="355:44" pos:end="355:51"><expr pos:start="355:44" pos:end="355:51"><name pos:start="355:44" pos:end="355:51"><name pos:start="355:44" pos:end="355:48">cpu_T</name><index pos:start="355:49" pos:end="355:51">[<expr pos:start="355:50" pos:end="355:50"><literal type="number" pos:start="355:50" pos:end="355:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="356:17" pos:end="356:63"><expr pos:start="356:17" pos:end="356:62"><call pos:start="356:17" pos:end="356:62"><name pos:start="356:17" pos:end="356:30">tcg_gen_sub_tl</name><argument_list pos:start="356:31" pos:end="356:62">(<argument pos:start="356:32" pos:end="356:41"><expr pos:start="356:32" pos:end="356:41"><name pos:start="356:32" pos:end="356:41">cpu_cc_src</name></expr></argument>, <argument pos:start="356:44" pos:end="356:51"><expr pos:start="356:44" pos:end="356:51"><name pos:start="356:44" pos:end="356:51"><name pos:start="356:44" pos:end="356:48">cpu_T</name><index pos:start="356:49" pos:end="356:51">[<expr pos:start="356:50" pos:end="356:50"><literal type="number" pos:start="356:50" pos:end="356:50">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="356:54" pos:end="356:61"><expr pos:start="356:54" pos:end="356:61"><name pos:start="356:54" pos:end="356:61">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="357:17" pos:end="357:41"><expr pos:start="357:17" pos:end="357:40"><call pos:start="357:17" pos:end="357:40"><name pos:start="357:17" pos:end="357:25">set_cc_op</name><argument_list pos:start="357:26" pos:end="357:40">(<argument pos:start="357:27" pos:end="357:27"><expr pos:start="357:27" pos:end="357:27"><name pos:start="357:27" pos:end="357:27">s</name></expr></argument>, <argument pos:start="357:30" pos:end="357:39"><expr pos:start="357:30" pos:end="357:39"><name pos:start="357:30" pos:end="357:39">CC_OP_MULB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="358:17" pos:end="358:22">break;</break>
            <case pos:start="359:13" pos:end="359:25">case <expr pos:start="359:18" pos:end="359:24"><name pos:start="359:18" pos:end="359:24">OT_WORD</name></expr>:</case>
                <expr_stmt pos:start="360:17" pos:end="360:53"><expr pos:start="360:17" pos:end="360:52"><call pos:start="360:17" pos:end="360:52"><name pos:start="360:17" pos:end="360:33">gen_op_mov_TN_reg</name><argument_list pos:start="360:34" pos:end="360:52">(<argument pos:start="360:35" pos:end="360:41"><expr pos:start="360:35" pos:end="360:41"><name pos:start="360:35" pos:end="360:41">OT_WORD</name></expr></argument>, <argument pos:start="360:44" pos:end="360:44"><expr pos:start="360:44" pos:end="360:44"><literal type="number" pos:start="360:44" pos:end="360:44">1</literal></expr></argument>, <argument pos:start="360:47" pos:end="360:51"><expr pos:start="360:47" pos:end="360:51"><name pos:start="360:47" pos:end="360:51">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="361:17" pos:end="361:54"><expr pos:start="361:17" pos:end="361:53"><call pos:start="361:17" pos:end="361:53"><name pos:start="361:17" pos:end="361:33">tcg_gen_ext16s_tl</name><argument_list pos:start="361:34" pos:end="361:53">(<argument pos:start="361:35" pos:end="361:42"><expr pos:start="361:35" pos:end="361:42"><name pos:start="361:35" pos:end="361:42"><name pos:start="361:35" pos:end="361:39">cpu_T</name><index pos:start="361:40" pos:end="361:42">[<expr pos:start="361:41" pos:end="361:41"><literal type="number" pos:start="361:41" pos:end="361:41">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="361:45" pos:end="361:52"><expr pos:start="361:45" pos:end="361:52"><name pos:start="361:45" pos:end="361:52"><name pos:start="361:45" pos:end="361:49">cpu_T</name><index pos:start="361:50" pos:end="361:52">[<expr pos:start="361:51" pos:end="361:51"><literal type="number" pos:start="361:51" pos:end="361:51">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="362:17" pos:end="362:54"><expr pos:start="362:17" pos:end="362:53"><call pos:start="362:17" pos:end="362:53"><name pos:start="362:17" pos:end="362:33">tcg_gen_ext16s_tl</name><argument_list pos:start="362:34" pos:end="362:53">(<argument pos:start="362:35" pos:end="362:42"><expr pos:start="362:35" pos:end="362:42"><name pos:start="362:35" pos:end="362:42"><name pos:start="362:35" pos:end="362:39">cpu_T</name><index pos:start="362:40" pos:end="362:42">[<expr pos:start="362:41" pos:end="362:41"><literal type="number" pos:start="362:41" pos:end="362:41">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="362:45" pos:end="362:52"><expr pos:start="362:45" pos:end="362:52"><name pos:start="362:45" pos:end="362:52"><name pos:start="362:45" pos:end="362:49">cpu_T</name><index pos:start="362:50" pos:end="362:52">[<expr pos:start="362:51" pos:end="362:51"><literal type="number" pos:start="362:51" pos:end="362:51">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="block" pos:start="363:17" pos:end="363:63">/* XXX: use 32 bit mul which could be faster */</comment>
                <expr_stmt pos:start="364:17" pos:end="364:61"><expr pos:start="364:17" pos:end="364:60"><call pos:start="364:17" pos:end="364:60"><name pos:start="364:17" pos:end="364:30">tcg_gen_mul_tl</name><argument_list pos:start="364:31" pos:end="364:60">(<argument pos:start="364:32" pos:end="364:39"><expr pos:start="364:32" pos:end="364:39"><name pos:start="364:32" pos:end="364:39"><name pos:start="364:32" pos:end="364:36">cpu_T</name><index pos:start="364:37" pos:end="364:39">[<expr pos:start="364:38" pos:end="364:38"><literal type="number" pos:start="364:38" pos:end="364:38">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="364:42" pos:end="364:49"><expr pos:start="364:42" pos:end="364:49"><name pos:start="364:42" pos:end="364:49"><name pos:start="364:42" pos:end="364:46">cpu_T</name><index pos:start="364:47" pos:end="364:49">[<expr pos:start="364:48" pos:end="364:48"><literal type="number" pos:start="364:48" pos:end="364:48">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="364:52" pos:end="364:59"><expr pos:start="364:52" pos:end="364:59"><name pos:start="364:52" pos:end="364:59"><name pos:start="364:52" pos:end="364:56">cpu_T</name><index pos:start="364:57" pos:end="364:59">[<expr pos:start="364:58" pos:end="364:58"><literal type="number" pos:start="364:58" pos:end="364:58">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="365:17" pos:end="365:50"><expr pos:start="365:17" pos:end="365:49"><call pos:start="365:17" pos:end="365:49"><name pos:start="365:17" pos:end="365:33">gen_op_mov_reg_T0</name><argument_list pos:start="365:34" pos:end="365:49">(<argument pos:start="365:35" pos:end="365:41"><expr pos:start="365:35" pos:end="365:41"><name pos:start="365:35" pos:end="365:41">OT_WORD</name></expr></argument>, <argument pos:start="365:44" pos:end="365:48"><expr pos:start="365:44" pos:end="365:48"><name pos:start="365:44" pos:end="365:48">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="366:17" pos:end="366:53"><expr pos:start="366:17" pos:end="366:52"><call pos:start="366:17" pos:end="366:52"><name pos:start="366:17" pos:end="366:30">tcg_gen_mov_tl</name><argument_list pos:start="366:31" pos:end="366:52">(<argument pos:start="366:32" pos:end="366:41"><expr pos:start="366:32" pos:end="366:41"><name pos:start="366:32" pos:end="366:41">cpu_cc_dst</name></expr></argument>, <argument pos:start="366:44" pos:end="366:51"><expr pos:start="366:44" pos:end="366:51"><name pos:start="366:44" pos:end="366:51"><name pos:start="366:44" pos:end="366:48">cpu_T</name><index pos:start="366:49" pos:end="366:51">[<expr pos:start="366:50" pos:end="366:50"><literal type="number" pos:start="366:50" pos:end="366:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="367:17" pos:end="367:54"><expr pos:start="367:17" pos:end="367:53"><call pos:start="367:17" pos:end="367:53"><name pos:start="367:17" pos:end="367:33">tcg_gen_ext16s_tl</name><argument_list pos:start="367:34" pos:end="367:53">(<argument pos:start="367:35" pos:end="367:42"><expr pos:start="367:35" pos:end="367:42"><name pos:start="367:35" pos:end="367:42">cpu_tmp0</name></expr></argument>, <argument pos:start="367:45" pos:end="367:52"><expr pos:start="367:45" pos:end="367:52"><name pos:start="367:45" pos:end="367:52"><name pos:start="367:45" pos:end="367:49">cpu_T</name><index pos:start="367:50" pos:end="367:52">[<expr pos:start="367:51" pos:end="367:51"><literal type="number" pos:start="367:51" pos:end="367:51">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="368:17" pos:end="368:63"><expr pos:start="368:17" pos:end="368:62"><call pos:start="368:17" pos:end="368:62"><name pos:start="368:17" pos:end="368:30">tcg_gen_sub_tl</name><argument_list pos:start="368:31" pos:end="368:62">(<argument pos:start="368:32" pos:end="368:41"><expr pos:start="368:32" pos:end="368:41"><name pos:start="368:32" pos:end="368:41">cpu_cc_src</name></expr></argument>, <argument pos:start="368:44" pos:end="368:51"><expr pos:start="368:44" pos:end="368:51"><name pos:start="368:44" pos:end="368:51"><name pos:start="368:44" pos:end="368:48">cpu_T</name><index pos:start="368:49" pos:end="368:51">[<expr pos:start="368:50" pos:end="368:50"><literal type="number" pos:start="368:50" pos:end="368:50">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="368:54" pos:end="368:61"><expr pos:start="368:54" pos:end="368:61"><name pos:start="368:54" pos:end="368:61">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="369:17" pos:end="369:56"><expr pos:start="369:17" pos:end="369:55"><call pos:start="369:17" pos:end="369:55"><name pos:start="369:17" pos:end="369:31">tcg_gen_shri_tl</name><argument_list pos:start="369:32" pos:end="369:55">(<argument pos:start="369:33" pos:end="369:40"><expr pos:start="369:33" pos:end="369:40"><name pos:start="369:33" pos:end="369:40"><name pos:start="369:33" pos:end="369:37">cpu_T</name><index pos:start="369:38" pos:end="369:40">[<expr pos:start="369:39" pos:end="369:39"><literal type="number" pos:start="369:39" pos:end="369:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="369:43" pos:end="369:50"><expr pos:start="369:43" pos:end="369:50"><name pos:start="369:43" pos:end="369:50"><name pos:start="369:43" pos:end="369:47">cpu_T</name><index pos:start="369:48" pos:end="369:50">[<expr pos:start="369:49" pos:end="369:49"><literal type="number" pos:start="369:49" pos:end="369:49">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="369:53" pos:end="369:54"><expr pos:start="369:53" pos:end="369:54"><literal type="number" pos:start="369:53" pos:end="369:54">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="370:17" pos:end="370:50"><expr pos:start="370:17" pos:end="370:49"><call pos:start="370:17" pos:end="370:49"><name pos:start="370:17" pos:end="370:33">gen_op_mov_reg_T0</name><argument_list pos:start="370:34" pos:end="370:49">(<argument pos:start="370:35" pos:end="370:41"><expr pos:start="370:35" pos:end="370:41"><name pos:start="370:35" pos:end="370:41">OT_WORD</name></expr></argument>, <argument pos:start="370:44" pos:end="370:48"><expr pos:start="370:44" pos:end="370:48"><name pos:start="370:44" pos:end="370:48">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="371:17" pos:end="371:41"><expr pos:start="371:17" pos:end="371:40"><call pos:start="371:17" pos:end="371:40"><name pos:start="371:17" pos:end="371:25">set_cc_op</name><argument_list pos:start="371:26" pos:end="371:40">(<argument pos:start="371:27" pos:end="371:27"><expr pos:start="371:27" pos:end="371:27"><name pos:start="371:27" pos:end="371:27">s</name></expr></argument>, <argument pos:start="371:30" pos:end="371:39"><expr pos:start="371:30" pos:end="371:39"><name pos:start="371:30" pos:end="371:39">CC_OP_MULW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="372:17" pos:end="372:22">break;</break>
            <default pos:start="373:13" pos:end="373:20">default:</default>
            <case pos:start="374:13" pos:end="374:25">case <expr pos:start="374:18" pos:end="374:24"><name pos:start="374:18" pos:end="374:24">OT_LONG</name></expr>:</case>
                <expr_stmt pos:start="375:17" pos:end="375:61"><expr pos:start="375:17" pos:end="375:60"><call pos:start="375:17" pos:end="375:60"><name pos:start="375:17" pos:end="375:36">tcg_gen_trunc_tl_i32</name><argument_list pos:start="375:37" pos:end="375:60">(<argument pos:start="375:38" pos:end="375:49"><expr pos:start="375:38" pos:end="375:49"><name pos:start="375:38" pos:end="375:49">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="375:52" pos:end="375:59"><expr pos:start="375:52" pos:end="375:59"><name pos:start="375:52" pos:end="375:59"><name pos:start="375:52" pos:end="375:56">cpu_T</name><index pos:start="375:57" pos:end="375:59">[<expr pos:start="375:58" pos:end="375:58"><literal type="number" pos:start="375:58" pos:end="375:58">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="376:17" pos:end="376:68"><expr pos:start="376:17" pos:end="376:67"><call pos:start="376:17" pos:end="376:67"><name pos:start="376:17" pos:end="376:36">tcg_gen_trunc_tl_i32</name><argument_list pos:start="376:37" pos:end="376:67">(<argument pos:start="376:38" pos:end="376:49"><expr pos:start="376:38" pos:end="376:49"><name pos:start="376:38" pos:end="376:49">cpu_tmp3_i32</name></expr></argument>, <argument pos:start="376:52" pos:end="376:66"><expr pos:start="376:52" pos:end="376:66"><name pos:start="376:52" pos:end="376:66"><name pos:start="376:52" pos:end="376:59">cpu_regs</name><index pos:start="376:60" pos:end="376:66">[<expr pos:start="376:61" pos:end="376:65"><name pos:start="376:61" pos:end="376:65">R_EAX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="377:17" pos:end="378:62"><expr pos:start="377:17" pos:end="378:61"><call pos:start="377:17" pos:end="378:61"><name pos:start="377:17" pos:end="377:33">tcg_gen_muls2_i32</name><argument_list pos:start="377:34" pos:end="378:61">(<argument pos:start="377:35" pos:end="377:46"><expr pos:start="377:35" pos:end="377:46"><name pos:start="377:35" pos:end="377:46">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="377:49" pos:end="377:60"><expr pos:start="377:49" pos:end="377:60"><name pos:start="377:49" pos:end="377:60">cpu_tmp3_i32</name></expr></argument>,
                                  <argument pos:start="378:35" pos:end="378:46"><expr pos:start="378:35" pos:end="378:46"><name pos:start="378:35" pos:end="378:46">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="378:49" pos:end="378:60"><expr pos:start="378:49" pos:end="378:60"><name pos:start="378:49" pos:end="378:60">cpu_tmp3_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="379:17" pos:end="379:67"><expr pos:start="379:17" pos:end="379:66"><call pos:start="379:17" pos:end="379:66"><name pos:start="379:17" pos:end="379:35">tcg_gen_extu_i32_tl</name><argument_list pos:start="379:36" pos:end="379:66">(<argument pos:start="379:37" pos:end="379:51"><expr pos:start="379:37" pos:end="379:51"><name pos:start="379:37" pos:end="379:51"><name pos:start="379:37" pos:end="379:44">cpu_regs</name><index pos:start="379:45" pos:end="379:51">[<expr pos:start="379:46" pos:end="379:50"><name pos:start="379:46" pos:end="379:50">R_EAX</name></expr>]</index></name></expr></argument>, <argument pos:start="379:54" pos:end="379:65"><expr pos:start="379:54" pos:end="379:65"><name pos:start="379:54" pos:end="379:65">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="380:17" pos:end="380:67"><expr pos:start="380:17" pos:end="380:66"><call pos:start="380:17" pos:end="380:66"><name pos:start="380:17" pos:end="380:35">tcg_gen_extu_i32_tl</name><argument_list pos:start="380:36" pos:end="380:66">(<argument pos:start="380:37" pos:end="380:51"><expr pos:start="380:37" pos:end="380:51"><name pos:start="380:37" pos:end="380:51"><name pos:start="380:37" pos:end="380:44">cpu_regs</name><index pos:start="380:45" pos:end="380:51">[<expr pos:start="380:46" pos:end="380:50"><name pos:start="380:46" pos:end="380:50">R_EDX</name></expr>]</index></name></expr></argument>, <argument pos:start="380:54" pos:end="380:65"><expr pos:start="380:54" pos:end="380:65"><name pos:start="380:54" pos:end="380:65">cpu_tmp3_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="381:17" pos:end="381:65"><expr pos:start="381:17" pos:end="381:64"><call pos:start="381:17" pos:end="381:64"><name pos:start="381:17" pos:end="381:32">tcg_gen_sari_i32</name><argument_list pos:start="381:33" pos:end="381:64">(<argument pos:start="381:34" pos:end="381:45"><expr pos:start="381:34" pos:end="381:45"><name pos:start="381:34" pos:end="381:45">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="381:48" pos:end="381:59"><expr pos:start="381:48" pos:end="381:59"><name pos:start="381:48" pos:end="381:59">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="381:62" pos:end="381:63"><expr pos:start="381:62" pos:end="381:63"><literal type="number" pos:start="381:62" pos:end="381:63">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="382:17" pos:end="382:60"><expr pos:start="382:17" pos:end="382:59"><call pos:start="382:17" pos:end="382:59"><name pos:start="382:17" pos:end="382:30">tcg_gen_mov_tl</name><argument_list pos:start="382:31" pos:end="382:59">(<argument pos:start="382:32" pos:end="382:41"><expr pos:start="382:32" pos:end="382:41"><name pos:start="382:32" pos:end="382:41">cpu_cc_dst</name></expr></argument>, <argument pos:start="382:44" pos:end="382:58"><expr pos:start="382:44" pos:end="382:58"><name pos:start="382:44" pos:end="382:58"><name pos:start="382:44" pos:end="382:51">cpu_regs</name><index pos:start="382:52" pos:end="382:58">[<expr pos:start="382:53" pos:end="382:57"><name pos:start="382:53" pos:end="382:57">R_EAX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="383:17" pos:end="383:74"><expr pos:start="383:17" pos:end="383:73"><call pos:start="383:17" pos:end="383:73"><name pos:start="383:17" pos:end="383:31">tcg_gen_sub_i32</name><argument_list pos:start="383:32" pos:end="383:73">(<argument pos:start="383:33" pos:end="383:44"><expr pos:start="383:33" pos:end="383:44"><name pos:start="383:33" pos:end="383:44">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="383:47" pos:end="383:58"><expr pos:start="383:47" pos:end="383:58"><name pos:start="383:47" pos:end="383:58">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="383:61" pos:end="383:72"><expr pos:start="383:61" pos:end="383:72"><name pos:start="383:61" pos:end="383:72">cpu_tmp3_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="384:17" pos:end="384:62"><expr pos:start="384:17" pos:end="384:61"><call pos:start="384:17" pos:end="384:61"><name pos:start="384:17" pos:end="384:35">tcg_gen_extu_i32_tl</name><argument_list pos:start="384:36" pos:end="384:61">(<argument pos:start="384:37" pos:end="384:46"><expr pos:start="384:37" pos:end="384:46"><name pos:start="384:37" pos:end="384:46">cpu_cc_src</name></expr></argument>, <argument pos:start="384:49" pos:end="384:60"><expr pos:start="384:49" pos:end="384:60"><name pos:start="384:49" pos:end="384:60">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="385:17" pos:end="385:41"><expr pos:start="385:17" pos:end="385:40"><call pos:start="385:17" pos:end="385:40"><name pos:start="385:17" pos:end="385:25">set_cc_op</name><argument_list pos:start="385:26" pos:end="385:40">(<argument pos:start="385:27" pos:end="385:27"><expr pos:start="385:27" pos:end="385:27"><name pos:start="385:27" pos:end="385:27">s</name></expr></argument>, <argument pos:start="385:30" pos:end="385:39"><expr pos:start="385:30" pos:end="385:39"><name pos:start="385:30" pos:end="385:39">CC_OP_MULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="386:17" pos:end="388:0">break;</break>
<cpp:ifdef pos:start="387:1" pos:end="387:20">#<cpp:directive pos:start="387:2" pos:end="387:6">ifdef</cpp:directive> <name pos:start="387:8" pos:end="387:20">TARGET_X86_64</name></cpp:ifdef>
            <case pos:start="388:13" pos:end="388:25">case <expr pos:start="388:18" pos:end="388:24"><name pos:start="388:18" pos:end="388:24">OT_QUAD</name></expr>:</case>
                <expr_stmt pos:start="389:17" pos:end="390:61"><expr pos:start="389:17" pos:end="390:60"><call pos:start="389:17" pos:end="390:60"><name pos:start="389:17" pos:end="389:33">tcg_gen_muls2_i64</name><argument_list pos:start="389:34" pos:end="390:60">(<argument pos:start="389:35" pos:end="389:49"><expr pos:start="389:35" pos:end="389:49"><name pos:start="389:35" pos:end="389:49"><name pos:start="389:35" pos:end="389:42">cpu_regs</name><index pos:start="389:43" pos:end="389:49">[<expr pos:start="389:44" pos:end="389:48"><name pos:start="389:44" pos:end="389:48">R_EAX</name></expr>]</index></name></expr></argument>, <argument pos:start="389:52" pos:end="389:66"><expr pos:start="389:52" pos:end="389:66"><name pos:start="389:52" pos:end="389:66"><name pos:start="389:52" pos:end="389:59">cpu_regs</name><index pos:start="389:60" pos:end="389:66">[<expr pos:start="389:61" pos:end="389:65"><name pos:start="389:61" pos:end="389:65">R_EDX</name></expr>]</index></name></expr></argument>,
                                  <argument pos:start="390:35" pos:end="390:42"><expr pos:start="390:35" pos:end="390:42"><name pos:start="390:35" pos:end="390:42"><name pos:start="390:35" pos:end="390:39">cpu_T</name><index pos:start="390:40" pos:end="390:42">[<expr pos:start="390:41" pos:end="390:41"><literal type="number" pos:start="390:41" pos:end="390:41">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="390:45" pos:end="390:59"><expr pos:start="390:45" pos:end="390:59"><name pos:start="390:45" pos:end="390:59"><name pos:start="390:45" pos:end="390:52">cpu_regs</name><index pos:start="390:53" pos:end="390:59">[<expr pos:start="390:54" pos:end="390:58"><name pos:start="390:54" pos:end="390:58">R_EAX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="391:17" pos:end="391:60"><expr pos:start="391:17" pos:end="391:59"><call pos:start="391:17" pos:end="391:59"><name pos:start="391:17" pos:end="391:30">tcg_gen_mov_tl</name><argument_list pos:start="391:31" pos:end="391:59">(<argument pos:start="391:32" pos:end="391:41"><expr pos:start="391:32" pos:end="391:41"><name pos:start="391:32" pos:end="391:41">cpu_cc_dst</name></expr></argument>, <argument pos:start="391:44" pos:end="391:58"><expr pos:start="391:44" pos:end="391:58"><name pos:start="391:44" pos:end="391:58"><name pos:start="391:44" pos:end="391:51">cpu_regs</name><index pos:start="391:52" pos:end="391:58">[<expr pos:start="391:53" pos:end="391:57"><name pos:start="391:53" pos:end="391:57">R_EAX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="392:17" pos:end="392:65"><expr pos:start="392:17" pos:end="392:64"><call pos:start="392:17" pos:end="392:64"><name pos:start="392:17" pos:end="392:31">tcg_gen_sari_tl</name><argument_list pos:start="392:32" pos:end="392:64">(<argument pos:start="392:33" pos:end="392:42"><expr pos:start="392:33" pos:end="392:42"><name pos:start="392:33" pos:end="392:42">cpu_cc_src</name></expr></argument>, <argument pos:start="392:45" pos:end="392:59"><expr pos:start="392:45" pos:end="392:59"><name pos:start="392:45" pos:end="392:59"><name pos:start="392:45" pos:end="392:52">cpu_regs</name><index pos:start="392:53" pos:end="392:59">[<expr pos:start="392:54" pos:end="392:58"><name pos:start="392:54" pos:end="392:58">R_EAX</name></expr>]</index></name></expr></argument>, <argument pos:start="392:62" pos:end="392:63"><expr pos:start="392:62" pos:end="392:63"><literal type="number" pos:start="392:62" pos:end="392:63">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="393:17" pos:end="393:72"><expr pos:start="393:17" pos:end="393:71"><call pos:start="393:17" pos:end="393:71"><name pos:start="393:17" pos:end="393:30">tcg_gen_sub_tl</name><argument_list pos:start="393:31" pos:end="393:71">(<argument pos:start="393:32" pos:end="393:41"><expr pos:start="393:32" pos:end="393:41"><name pos:start="393:32" pos:end="393:41">cpu_cc_src</name></expr></argument>, <argument pos:start="393:44" pos:end="393:53"><expr pos:start="393:44" pos:end="393:53"><name pos:start="393:44" pos:end="393:53">cpu_cc_src</name></expr></argument>, <argument pos:start="393:56" pos:end="393:70"><expr pos:start="393:56" pos:end="393:70"><name pos:start="393:56" pos:end="393:70"><name pos:start="393:56" pos:end="393:63">cpu_regs</name><index pos:start="393:64" pos:end="393:70">[<expr pos:start="393:65" pos:end="393:69"><name pos:start="393:65" pos:end="393:69">R_EDX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="394:17" pos:end="394:41"><expr pos:start="394:17" pos:end="394:40"><call pos:start="394:17" pos:end="394:40"><name pos:start="394:17" pos:end="394:25">set_cc_op</name><argument_list pos:start="394:26" pos:end="394:40">(<argument pos:start="394:27" pos:end="394:27"><expr pos:start="394:27" pos:end="394:27"><name pos:start="394:27" pos:end="394:27">s</name></expr></argument>, <argument pos:start="394:30" pos:end="394:39"><expr pos:start="394:30" pos:end="394:39"><name pos:start="394:30" pos:end="394:39">CC_OP_MULQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="395:17" pos:end="397:0">break;</break>
<cpp:endif pos:start="396:1" pos:end="396:6">#<cpp:directive pos:start="396:2" pos:end="396:6">endif</cpp:directive></cpp:endif>
            <break pos:start="397:13" pos:end="397:18">break;</break>
        <case pos:start="398:9" pos:end="398:15">case <expr pos:start="398:14" pos:end="398:14"><literal type="number" pos:start="398:14" pos:end="398:14">6</literal></expr>:</case> <comment type="block" pos:start="398:17" pos:end="398:25">/* div */</comment>
            <switch pos:start="399:13" pos:end="3141:17">switch<condition pos:start="399:19" pos:end="399:22">(<expr pos:start="399:20" pos:end="399:21"><name pos:start="399:20" pos:end="399:21">ot</name></expr>)</condition> <block pos:start="399:24" pos:end="3141:17">{<block_content pos:start="400:13" pos:end="3141:17">
            <case pos:start="400:13" pos:end="400:25">case <expr pos:start="400:18" pos:end="400:24"><name pos:start="400:18" pos:end="400:24">OT_BYTE</name></expr>:</case>
                <expr_stmt pos:start="401:17" pos:end="401:50"><expr pos:start="401:17" pos:end="401:49"><call pos:start="401:17" pos:end="401:49"><name pos:start="401:17" pos:end="401:26">gen_jmp_im</name><argument_list pos:start="401:27" pos:end="401:49">(<argument pos:start="401:28" pos:end="401:48"><expr pos:start="401:28" pos:end="401:48"><name pos:start="401:28" pos:end="401:35">pc_start</name> <operator pos:start="401:37" pos:end="401:37">-</operator> <name pos:start="401:39" pos:end="401:48"><name pos:start="401:39" pos:end="401:39">s</name><operator pos:start="401:40" pos:end="401:41">-&gt;</operator><name pos:start="401:42" pos:end="401:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="402:17" pos:end="402:54"><expr pos:start="402:17" pos:end="402:53"><call pos:start="402:17" pos:end="402:53"><name pos:start="402:17" pos:end="402:34">gen_helper_divb_AL</name><argument_list pos:start="402:35" pos:end="402:53">(<argument pos:start="402:36" pos:end="402:42"><expr pos:start="402:36" pos:end="402:42"><name pos:start="402:36" pos:end="402:42">cpu_env</name></expr></argument>, <argument pos:start="402:45" pos:end="402:52"><expr pos:start="402:45" pos:end="402:52"><name pos:start="402:45" pos:end="402:52"><name pos:start="402:45" pos:end="402:49">cpu_T</name><index pos:start="402:50" pos:end="402:52">[<expr pos:start="402:51" pos:end="402:51"><literal type="number" pos:start="402:51" pos:end="402:51">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="403:17" pos:end="403:22">break;</break>
            <case pos:start="404:13" pos:end="404:25">case <expr pos:start="404:18" pos:end="404:24"><name pos:start="404:18" pos:end="404:24">OT_WORD</name></expr>:</case>
                <expr_stmt pos:start="405:17" pos:end="405:50"><expr pos:start="405:17" pos:end="405:49"><call pos:start="405:17" pos:end="405:49"><name pos:start="405:17" pos:end="405:26">gen_jmp_im</name><argument_list pos:start="405:27" pos:end="405:49">(<argument pos:start="405:28" pos:end="405:48"><expr pos:start="405:28" pos:end="405:48"><name pos:start="405:28" pos:end="405:35">pc_start</name> <operator pos:start="405:37" pos:end="405:37">-</operator> <name pos:start="405:39" pos:end="405:48"><name pos:start="405:39" pos:end="405:39">s</name><operator pos:start="405:40" pos:end="405:41">-&gt;</operator><name pos:start="405:42" pos:end="405:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="406:17" pos:end="406:54"><expr pos:start="406:17" pos:end="406:53"><call pos:start="406:17" pos:end="406:53"><name pos:start="406:17" pos:end="406:34">gen_helper_divw_AX</name><argument_list pos:start="406:35" pos:end="406:53">(<argument pos:start="406:36" pos:end="406:42"><expr pos:start="406:36" pos:end="406:42"><name pos:start="406:36" pos:end="406:42">cpu_env</name></expr></argument>, <argument pos:start="406:45" pos:end="406:52"><expr pos:start="406:45" pos:end="406:52"><name pos:start="406:45" pos:end="406:52"><name pos:start="406:45" pos:end="406:49">cpu_T</name><index pos:start="406:50" pos:end="406:52">[<expr pos:start="406:51" pos:end="406:51"><literal type="number" pos:start="406:51" pos:end="406:51">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="407:17" pos:end="407:22">break;</break>
            <default pos:start="408:13" pos:end="408:20">default:</default>
            <case pos:start="409:13" pos:end="409:25">case <expr pos:start="409:18" pos:end="409:24"><name pos:start="409:18" pos:end="409:24">OT_LONG</name></expr>:</case>
                <expr_stmt pos:start="410:17" pos:end="410:50"><expr pos:start="410:17" pos:end="410:49"><call pos:start="410:17" pos:end="410:49"><name pos:start="410:17" pos:end="410:26">gen_jmp_im</name><argument_list pos:start="410:27" pos:end="410:49">(<argument pos:start="410:28" pos:end="410:48"><expr pos:start="410:28" pos:end="410:48"><name pos:start="410:28" pos:end="410:35">pc_start</name> <operator pos:start="410:37" pos:end="410:37">-</operator> <name pos:start="410:39" pos:end="410:48"><name pos:start="410:39" pos:end="410:39">s</name><operator pos:start="410:40" pos:end="410:41">-&gt;</operator><name pos:start="410:42" pos:end="410:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="411:17" pos:end="411:55"><expr pos:start="411:17" pos:end="411:54"><call pos:start="411:17" pos:end="411:54"><name pos:start="411:17" pos:end="411:35">gen_helper_divl_EAX</name><argument_list pos:start="411:36" pos:end="411:54">(<argument pos:start="411:37" pos:end="411:43"><expr pos:start="411:37" pos:end="411:43"><name pos:start="411:37" pos:end="411:43">cpu_env</name></expr></argument>, <argument pos:start="411:46" pos:end="411:53"><expr pos:start="411:46" pos:end="411:53"><name pos:start="411:46" pos:end="411:53"><name pos:start="411:46" pos:end="411:50">cpu_T</name><index pos:start="411:51" pos:end="411:53">[<expr pos:start="411:52" pos:end="411:52"><literal type="number" pos:start="411:52" pos:end="411:52">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="412:17" pos:end="414:0">break;</break>
<cpp:ifdef pos:start="413:1" pos:end="413:20">#<cpp:directive pos:start="413:2" pos:end="413:6">ifdef</cpp:directive> <name pos:start="413:8" pos:end="413:20">TARGET_X86_64</name></cpp:ifdef>
            <case pos:start="414:13" pos:end="414:25">case <expr pos:start="414:18" pos:end="414:24"><name pos:start="414:18" pos:end="414:24">OT_QUAD</name></expr>:</case>
                <expr_stmt pos:start="415:17" pos:end="415:50"><expr pos:start="415:17" pos:end="415:49"><call pos:start="415:17" pos:end="415:49"><name pos:start="415:17" pos:end="415:26">gen_jmp_im</name><argument_list pos:start="415:27" pos:end="415:49">(<argument pos:start="415:28" pos:end="415:48"><expr pos:start="415:28" pos:end="415:48"><name pos:start="415:28" pos:end="415:35">pc_start</name> <operator pos:start="415:37" pos:end="415:37">-</operator> <name pos:start="415:39" pos:end="415:48"><name pos:start="415:39" pos:end="415:39">s</name><operator pos:start="415:40" pos:end="415:41">-&gt;</operator><name pos:start="415:42" pos:end="415:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="416:17" pos:end="416:55"><expr pos:start="416:17" pos:end="416:54"><call pos:start="416:17" pos:end="416:54"><name pos:start="416:17" pos:end="416:35">gen_helper_divq_EAX</name><argument_list pos:start="416:36" pos:end="416:54">(<argument pos:start="416:37" pos:end="416:43"><expr pos:start="416:37" pos:end="416:43"><name pos:start="416:37" pos:end="416:43">cpu_env</name></expr></argument>, <argument pos:start="416:46" pos:end="416:53"><expr pos:start="416:46" pos:end="416:53"><name pos:start="416:46" pos:end="416:53"><name pos:start="416:46" pos:end="416:50">cpu_T</name><index pos:start="416:51" pos:end="416:53">[<expr pos:start="416:52" pos:end="416:52"><literal type="number" pos:start="416:52" pos:end="416:52">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="417:17" pos:end="419:0">break;</break>
<cpp:endif pos:start="418:1" pos:end="418:6">#<cpp:directive pos:start="418:2" pos:end="418:6">endif</cpp:directive></cpp:endif>
            <break pos:start="419:13" pos:end="419:18">break;</break>
        <case pos:start="420:9" pos:end="420:15">case <expr pos:start="420:14" pos:end="420:14"><literal type="number" pos:start="420:14" pos:end="420:14">7</literal></expr>:</case> <comment type="block" pos:start="420:17" pos:end="420:26">/* idiv */</comment>
            <switch pos:start="421:13" pos:end="3141:17">switch<condition pos:start="421:19" pos:end="421:22">(<expr pos:start="421:20" pos:end="421:21"><name pos:start="421:20" pos:end="421:21">ot</name></expr>)</condition> <block pos:start="421:24" pos:end="3141:17">{<block_content pos:start="422:13" pos:end="3141:17">
            <case pos:start="422:13" pos:end="422:25">case <expr pos:start="422:18" pos:end="422:24"><name pos:start="422:18" pos:end="422:24">OT_BYTE</name></expr>:</case>
                <expr_stmt pos:start="423:17" pos:end="423:50"><expr pos:start="423:17" pos:end="423:49"><call pos:start="423:17" pos:end="423:49"><name pos:start="423:17" pos:end="423:26">gen_jmp_im</name><argument_list pos:start="423:27" pos:end="423:49">(<argument pos:start="423:28" pos:end="423:48"><expr pos:start="423:28" pos:end="423:48"><name pos:start="423:28" pos:end="423:35">pc_start</name> <operator pos:start="423:37" pos:end="423:37">-</operator> <name pos:start="423:39" pos:end="423:48"><name pos:start="423:39" pos:end="423:39">s</name><operator pos:start="423:40" pos:end="423:41">-&gt;</operator><name pos:start="423:42" pos:end="423:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="424:17" pos:end="424:55"><expr pos:start="424:17" pos:end="424:54"><call pos:start="424:17" pos:end="424:54"><name pos:start="424:17" pos:end="424:35">gen_helper_idivb_AL</name><argument_list pos:start="424:36" pos:end="424:54">(<argument pos:start="424:37" pos:end="424:43"><expr pos:start="424:37" pos:end="424:43"><name pos:start="424:37" pos:end="424:43">cpu_env</name></expr></argument>, <argument pos:start="424:46" pos:end="424:53"><expr pos:start="424:46" pos:end="424:53"><name pos:start="424:46" pos:end="424:53"><name pos:start="424:46" pos:end="424:50">cpu_T</name><index pos:start="424:51" pos:end="424:53">[<expr pos:start="424:52" pos:end="424:52"><literal type="number" pos:start="424:52" pos:end="424:52">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="425:17" pos:end="425:22">break;</break>
            <case pos:start="426:13" pos:end="426:25">case <expr pos:start="426:18" pos:end="426:24"><name pos:start="426:18" pos:end="426:24">OT_WORD</name></expr>:</case>
                <expr_stmt pos:start="427:17" pos:end="427:50"><expr pos:start="427:17" pos:end="427:49"><call pos:start="427:17" pos:end="427:49"><name pos:start="427:17" pos:end="427:26">gen_jmp_im</name><argument_list pos:start="427:27" pos:end="427:49">(<argument pos:start="427:28" pos:end="427:48"><expr pos:start="427:28" pos:end="427:48"><name pos:start="427:28" pos:end="427:35">pc_start</name> <operator pos:start="427:37" pos:end="427:37">-</operator> <name pos:start="427:39" pos:end="427:48"><name pos:start="427:39" pos:end="427:39">s</name><operator pos:start="427:40" pos:end="427:41">-&gt;</operator><name pos:start="427:42" pos:end="427:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="428:17" pos:end="428:55"><expr pos:start="428:17" pos:end="428:54"><call pos:start="428:17" pos:end="428:54"><name pos:start="428:17" pos:end="428:35">gen_helper_idivw_AX</name><argument_list pos:start="428:36" pos:end="428:54">(<argument pos:start="428:37" pos:end="428:43"><expr pos:start="428:37" pos:end="428:43"><name pos:start="428:37" pos:end="428:43">cpu_env</name></expr></argument>, <argument pos:start="428:46" pos:end="428:53"><expr pos:start="428:46" pos:end="428:53"><name pos:start="428:46" pos:end="428:53"><name pos:start="428:46" pos:end="428:50">cpu_T</name><index pos:start="428:51" pos:end="428:53">[<expr pos:start="428:52" pos:end="428:52"><literal type="number" pos:start="428:52" pos:end="428:52">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="429:17" pos:end="429:22">break;</break>
            <default pos:start="430:13" pos:end="430:20">default:</default>
            <case pos:start="431:13" pos:end="431:25">case <expr pos:start="431:18" pos:end="431:24"><name pos:start="431:18" pos:end="431:24">OT_LONG</name></expr>:</case>
                <expr_stmt pos:start="432:17" pos:end="432:50"><expr pos:start="432:17" pos:end="432:49"><call pos:start="432:17" pos:end="432:49"><name pos:start="432:17" pos:end="432:26">gen_jmp_im</name><argument_list pos:start="432:27" pos:end="432:49">(<argument pos:start="432:28" pos:end="432:48"><expr pos:start="432:28" pos:end="432:48"><name pos:start="432:28" pos:end="432:35">pc_start</name> <operator pos:start="432:37" pos:end="432:37">-</operator> <name pos:start="432:39" pos:end="432:48"><name pos:start="432:39" pos:end="432:39">s</name><operator pos:start="432:40" pos:end="432:41">-&gt;</operator><name pos:start="432:42" pos:end="432:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="433:17" pos:end="433:56"><expr pos:start="433:17" pos:end="433:55"><call pos:start="433:17" pos:end="433:55"><name pos:start="433:17" pos:end="433:36">gen_helper_idivl_EAX</name><argument_list pos:start="433:37" pos:end="433:55">(<argument pos:start="433:38" pos:end="433:44"><expr pos:start="433:38" pos:end="433:44"><name pos:start="433:38" pos:end="433:44">cpu_env</name></expr></argument>, <argument pos:start="433:47" pos:end="433:54"><expr pos:start="433:47" pos:end="433:54"><name pos:start="433:47" pos:end="433:54"><name pos:start="433:47" pos:end="433:51">cpu_T</name><index pos:start="433:52" pos:end="433:54">[<expr pos:start="433:53" pos:end="433:53"><literal type="number" pos:start="433:53" pos:end="433:53">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="434:17" pos:end="436:0">break;</break>
<cpp:ifdef pos:start="435:1" pos:end="435:20">#<cpp:directive pos:start="435:2" pos:end="435:6">ifdef</cpp:directive> <name pos:start="435:8" pos:end="435:20">TARGET_X86_64</name></cpp:ifdef>
            <case pos:start="436:13" pos:end="436:25">case <expr pos:start="436:18" pos:end="436:24"><name pos:start="436:18" pos:end="436:24">OT_QUAD</name></expr>:</case>
                <expr_stmt pos:start="437:17" pos:end="437:50"><expr pos:start="437:17" pos:end="437:49"><call pos:start="437:17" pos:end="437:49"><name pos:start="437:17" pos:end="437:26">gen_jmp_im</name><argument_list pos:start="437:27" pos:end="437:49">(<argument pos:start="437:28" pos:end="437:48"><expr pos:start="437:28" pos:end="437:48"><name pos:start="437:28" pos:end="437:35">pc_start</name> <operator pos:start="437:37" pos:end="437:37">-</operator> <name pos:start="437:39" pos:end="437:48"><name pos:start="437:39" pos:end="437:39">s</name><operator pos:start="437:40" pos:end="437:41">-&gt;</operator><name pos:start="437:42" pos:end="437:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="438:17" pos:end="438:56"><expr pos:start="438:17" pos:end="438:55"><call pos:start="438:17" pos:end="438:55"><name pos:start="438:17" pos:end="438:36">gen_helper_idivq_EAX</name><argument_list pos:start="438:37" pos:end="438:55">(<argument pos:start="438:38" pos:end="438:44"><expr pos:start="438:38" pos:end="438:44"><name pos:start="438:38" pos:end="438:44">cpu_env</name></expr></argument>, <argument pos:start="438:47" pos:end="438:54"><expr pos:start="438:47" pos:end="438:54"><name pos:start="438:47" pos:end="438:54"><name pos:start="438:47" pos:end="438:51">cpu_T</name><index pos:start="438:52" pos:end="438:54">[<expr pos:start="438:53" pos:end="438:53"><literal type="number" pos:start="438:53" pos:end="438:53">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="439:17" pos:end="441:0">break;</break>
<cpp:endif pos:start="440:1" pos:end="440:6">#<cpp:directive pos:start="440:2" pos:end="440:6">endif</cpp:directive></cpp:endif>
            <break pos:start="441:13" pos:end="441:18">break;</break>
        <default pos:start="442:9" pos:end="442:16">default:</default>
        <break pos:start="443:9" pos:end="443:14">break;</break>
    <case pos:start="444:5" pos:end="444:14">case <expr pos:start="444:10" pos:end="444:13"><literal type="number" pos:start="444:10" pos:end="444:13">0xfe</literal></expr>:</case> <comment type="block" pos:start="444:16" pos:end="444:25">/* GRP4 */</comment>
    <case pos:start="445:5" pos:end="445:14">case <expr pos:start="445:10" pos:end="445:13"><literal type="number" pos:start="445:10" pos:end="445:13">0xff</literal></expr>:</case> <comment type="block" pos:start="445:16" pos:end="445:25">/* GRP5 */</comment>
        <if_stmt pos:start="446:9" pos:end="449:33"><if pos:start="446:9" pos:end="447:25">if <condition pos:start="446:12" pos:end="446:25">(<expr pos:start="446:13" pos:end="446:24"><operator pos:start="446:13" pos:end="446:13">(</operator><name pos:start="446:14" pos:end="446:14">b</name> <operator pos:start="446:16" pos:end="446:16">&amp;</operator> <literal type="number" pos:start="446:18" pos:end="446:18">1</literal><operator pos:start="446:19" pos:end="446:19">)</operator> <operator pos:start="446:21" pos:end="446:22">==</operator> <literal type="number" pos:start="446:24" pos:end="446:24">0</literal></expr>)</condition><block type="pseudo" pos:start="447:13" pos:end="447:25"><block_content pos:start="447:13" pos:end="447:25">
            <expr_stmt pos:start="447:13" pos:end="447:25"><expr pos:start="447:13" pos:end="447:24"><name pos:start="447:13" pos:end="447:14">ot</name> <operator pos:start="447:16" pos:end="447:16">=</operator> <name pos:start="447:18" pos:end="447:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>
        <else pos:start="448:9" pos:end="449:33">else<block type="pseudo" pos:start="449:13" pos:end="449:33"><block_content pos:start="449:13" pos:end="449:33">
            <expr_stmt pos:start="449:13" pos:end="449:33"><expr pos:start="449:13" pos:end="449:32"><name pos:start="449:13" pos:end="449:14">ot</name> <operator pos:start="449:16" pos:end="449:16">=</operator> <name pos:start="449:18" pos:end="449:22">dflag</name> <operator pos:start="449:24" pos:end="449:24">+</operator> <name pos:start="449:26" pos:end="449:32">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt pos:start="450:9" pos:end="450:44"><expr pos:start="450:9" pos:end="450:43"><name pos:start="450:9" pos:end="450:13">modrm</name> <operator pos:start="450:15" pos:end="450:15">=</operator> <call pos:start="450:17" pos:end="450:43"><name pos:start="450:17" pos:end="450:29">cpu_ldub_code</name><argument_list pos:start="450:30" pos:end="450:43">(<argument pos:start="450:31" pos:end="450:33"><expr pos:start="450:31" pos:end="450:33"><name pos:start="450:31" pos:end="450:33">env</name></expr></argument>, <argument pos:start="450:36" pos:end="450:42"><expr pos:start="450:36" pos:end="450:42"><name pos:start="450:36" pos:end="450:40"><name pos:start="450:36" pos:end="450:36">s</name><operator pos:start="450:37" pos:end="450:38">-&gt;</operator><name pos:start="450:39" pos:end="450:40">pc</name></name><operator pos:start="450:41" pos:end="450:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="451:9" pos:end="451:31"><expr pos:start="451:9" pos:end="451:30"><name pos:start="451:9" pos:end="451:11">mod</name> <operator pos:start="451:13" pos:end="451:13">=</operator> <operator pos:start="451:15" pos:end="451:15">(</operator><name pos:start="451:16" pos:end="451:20">modrm</name> <operator pos:start="451:22" pos:end="451:23">&gt;&gt;</operator> <literal type="number" pos:start="451:25" pos:end="451:25">6</literal><operator pos:start="451:26" pos:end="451:26">)</operator> <operator pos:start="451:28" pos:end="451:28">&amp;</operator> <literal type="number" pos:start="451:30" pos:end="451:30">3</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="452:9" pos:end="452:36"><expr pos:start="452:9" pos:end="452:35"><name pos:start="452:9" pos:end="452:10">rm</name> <operator pos:start="452:12" pos:end="452:12">=</operator> <operator pos:start="452:14" pos:end="452:14">(</operator><name pos:start="452:15" pos:end="452:19">modrm</name> <operator pos:start="452:21" pos:end="452:21">&amp;</operator> <literal type="number" pos:start="452:23" pos:end="452:23">7</literal><operator pos:start="452:24" pos:end="452:24">)</operator> <operator pos:start="452:26" pos:end="452:26">|</operator> <call pos:start="452:28" pos:end="452:35"><name pos:start="452:28" pos:end="452:32">REX_B</name><argument_list pos:start="452:33" pos:end="452:35">(<argument pos:start="452:34" pos:end="452:34"><expr pos:start="452:34" pos:end="452:34"><name pos:start="452:34" pos:end="452:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="453:9" pos:end="453:30"><expr pos:start="453:9" pos:end="453:29"><name pos:start="453:9" pos:end="453:10">op</name> <operator pos:start="453:12" pos:end="453:12">=</operator> <operator pos:start="453:14" pos:end="453:14">(</operator><name pos:start="453:15" pos:end="453:19">modrm</name> <operator pos:start="453:21" pos:end="453:22">&gt;&gt;</operator> <literal type="number" pos:start="453:24" pos:end="453:24">3</literal><operator pos:start="453:25" pos:end="453:25">)</operator> <operator pos:start="453:27" pos:end="453:27">&amp;</operator> <literal type="number" pos:start="453:29" pos:end="453:29">7</literal></expr>;</expr_stmt>
        <if_stmt pos:start="454:9" pos:end="3141:17"><if pos:start="454:9" pos:end="3141:17">if <condition pos:start="454:12" pos:end="454:33">(<expr pos:start="454:13" pos:end="454:32"><name pos:start="454:13" pos:end="454:14">op</name> <operator pos:start="454:16" pos:end="454:17">&gt;=</operator> <literal type="number" pos:start="454:19" pos:end="454:19">2</literal> <operator pos:start="454:21" pos:end="454:22">&amp;&amp;</operator> <name pos:start="454:24" pos:end="454:24">b</name> <operator pos:start="454:26" pos:end="454:27">==</operator> <literal type="number" pos:start="454:29" pos:end="454:32">0xfe</literal></expr>)</condition> <block pos:start="454:35" pos:end="3141:17">{<block_content pos:start="455:9" pos:end="3141:17">
        <if_stmt pos:start="455:9" pos:end="3141:17"><if pos:start="455:9" pos:end="3141:17">if <condition pos:start="455:12" pos:end="455:22">(<expr pos:start="455:13" pos:end="455:21"><call pos:start="455:13" pos:end="455:21"><name pos:start="455:13" pos:end="455:18">CODE64</name><argument_list pos:start="455:19" pos:end="455:21">(<argument pos:start="455:20" pos:end="455:20"><expr pos:start="455:20" pos:end="455:20"><name pos:start="455:20" pos:end="455:20">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="455:24" pos:end="3141:17">{<block_content pos:start="456:13" pos:end="3141:17">
            <if_stmt pos:start="456:13" pos:end="3141:17"><if pos:start="456:13" pos:end="459:13">if <condition pos:start="456:16" pos:end="456:35">(<expr pos:start="456:17" pos:end="456:34"><name pos:start="456:17" pos:end="456:18">op</name> <operator pos:start="456:20" pos:end="456:21">==</operator> <literal type="number" pos:start="456:23" pos:end="456:23">2</literal> <operator pos:start="456:25" pos:end="456:26">||</operator> <name pos:start="456:28" pos:end="456:29">op</name> <operator pos:start="456:31" pos:end="456:32">==</operator> <literal type="number" pos:start="456:34" pos:end="456:34">4</literal></expr>)</condition> <block pos:start="456:37" pos:end="459:13">{<block_content pos:start="458:17" pos:end="458:29">
                <comment type="block" pos:start="457:17" pos:end="457:54">/* operand size for jumps is 64 bit */</comment>
                <expr_stmt pos:start="458:17" pos:end="458:29"><expr pos:start="458:17" pos:end="458:28"><name pos:start="458:17" pos:end="458:18">ot</name> <operator pos:start="458:20" pos:end="458:20">=</operator> <name pos:start="458:22" pos:end="458:28">OT_QUAD</name></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif" pos:start="459:15" pos:end="461:13">else if <condition pos:start="459:23" pos:end="459:42">(<expr pos:start="459:24" pos:end="459:41"><name pos:start="459:24" pos:end="459:25">op</name> <operator pos:start="459:27" pos:end="459:28">==</operator> <literal type="number" pos:start="459:30" pos:end="459:30">3</literal> <operator pos:start="459:32" pos:end="459:33">||</operator> <name pos:start="459:35" pos:end="459:36">op</name> <operator pos:start="459:38" pos:end="459:39">==</operator> <literal type="number" pos:start="459:41" pos:end="459:41">5</literal></expr>)</condition> <block pos:start="459:44" pos:end="461:13">{<block_content pos:start="460:17" pos:end="460:62">
                <expr_stmt pos:start="460:17" pos:end="460:62"><expr pos:start="460:17" pos:end="460:61"><name pos:start="460:17" pos:end="460:18">ot</name> <operator pos:start="460:20" pos:end="460:20">=</operator> <ternary pos:start="460:22" pos:end="460:61"><condition pos:start="460:22" pos:end="460:28"><expr pos:start="460:22" pos:end="460:26"><name pos:start="460:22" pos:end="460:26">dflag</name></expr> ?</condition><then pos:start="460:30" pos:end="460:51"> <expr pos:start="460:30" pos:end="460:51"><name pos:start="460:30" pos:end="460:36">OT_LONG</name> <operator pos:start="460:38" pos:end="460:38">+</operator> <operator pos:start="460:40" pos:end="460:40">(</operator><name pos:start="460:41" pos:end="460:45">rex_w</name> <operator pos:start="460:47" pos:end="460:48">==</operator> <literal type="number" pos:start="460:50" pos:end="460:50">1</literal><operator pos:start="460:51" pos:end="460:51">)</operator></expr> </then><else pos:start="460:53" pos:end="460:61">: <expr pos:start="460:55" pos:end="460:61"><name pos:start="460:55" pos:end="460:61">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif" pos:start="461:15" pos:end="3141:17">else if <condition pos:start="461:23" pos:end="461:31">(<expr pos:start="461:24" pos:end="461:30"><name pos:start="461:24" pos:end="461:25">op</name> <operator pos:start="461:27" pos:end="461:28">==</operator> <literal type="number" pos:start="461:30" pos:end="461:30">6</literal></expr>)</condition> <block pos:start="461:33" pos:end="3141:17">{<block_content pos:start="463:17" pos:end="3141:17">
                <comment type="block" pos:start="462:17" pos:end="462:49">/* default push size is 64 bit */</comment>
                <expr_stmt pos:start="463:17" pos:end="463:47"><expr pos:start="463:17" pos:end="463:46"><name pos:start="463:17" pos:end="463:18">ot</name> <operator pos:start="463:20" pos:end="463:20">=</operator> <ternary pos:start="463:22" pos:end="463:46"><condition pos:start="463:22" pos:end="463:28"><expr pos:start="463:22" pos:end="463:26"><name pos:start="463:22" pos:end="463:26">dflag</name></expr> ?</condition><then pos:start="463:30" pos:end="463:36"> <expr pos:start="463:30" pos:end="463:36"><name pos:start="463:30" pos:end="463:36">OT_QUAD</name></expr> </then><else pos:start="463:38" pos:end="463:46">: <expr pos:start="463:40" pos:end="463:46"><name pos:start="463:40" pos:end="463:46">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>
        <if_stmt pos:start="464:9" pos:end="3141:17"><if pos:start="464:9" pos:end="468:9">if <condition pos:start="464:12" pos:end="464:21">(<expr pos:start="464:13" pos:end="464:20"><name pos:start="464:13" pos:end="464:15">mod</name> <operator pos:start="464:17" pos:end="464:18">!=</operator> <literal type="number" pos:start="464:20" pos:end="464:20">3</literal></expr>)</condition> <block pos:start="464:23" pos:end="468:9">{<block_content pos:start="465:13" pos:end="467:51">
            <expr_stmt pos:start="465:13" pos:end="465:66"><expr pos:start="465:13" pos:end="465:65"><call pos:start="465:13" pos:end="465:65"><name pos:start="465:13" pos:end="465:25">gen_lea_modrm</name><argument_list pos:start="465:26" pos:end="465:65">(<argument pos:start="465:27" pos:end="465:29"><expr pos:start="465:27" pos:end="465:29"><name pos:start="465:27" pos:end="465:29">env</name></expr></argument>, <argument pos:start="465:32" pos:end="465:32"><expr pos:start="465:32" pos:end="465:32"><name pos:start="465:32" pos:end="465:32">s</name></expr></argument>, <argument pos:start="465:35" pos:end="465:39"><expr pos:start="465:35" pos:end="465:39"><name pos:start="465:35" pos:end="465:39">modrm</name></expr></argument>, <argument pos:start="465:42" pos:end="465:50"><expr pos:start="465:42" pos:end="465:50"><operator pos:start="465:42" pos:end="465:42">&amp;</operator><name pos:start="465:43" pos:end="465:50">reg_addr</name></expr></argument>, <argument pos:start="465:53" pos:end="465:64"><expr pos:start="465:53" pos:end="465:64"><operator pos:start="465:53" pos:end="465:53">&amp;</operator><name pos:start="465:54" pos:end="465:64">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="466:13" pos:end="467:51"><if pos:start="466:13" pos:end="467:51">if <condition pos:start="466:16" pos:end="466:46">(<expr pos:start="466:17" pos:end="466:45"><name pos:start="466:17" pos:end="466:18">op</name> <operator pos:start="466:20" pos:end="466:21">&gt;=</operator> <literal type="number" pos:start="466:23" pos:end="466:23">2</literal> <operator pos:start="466:25" pos:end="466:26">&amp;&amp;</operator> <name pos:start="466:28" pos:end="466:29">op</name> <operator pos:start="466:31" pos:end="466:32">!=</operator> <literal type="number" pos:start="466:34" pos:end="466:34">3</literal> <operator pos:start="466:36" pos:end="466:37">&amp;&amp;</operator> <name pos:start="466:39" pos:end="466:40">op</name> <operator pos:start="466:42" pos:end="466:43">!=</operator> <literal type="number" pos:start="466:45" pos:end="466:45">5</literal></expr>)</condition><block type="pseudo" pos:start="467:17" pos:end="467:51"><block_content pos:start="467:17" pos:end="467:51">
                <expr_stmt pos:start="467:17" pos:end="467:51"><expr pos:start="467:17" pos:end="467:50"><call pos:start="467:17" pos:end="467:50"><name pos:start="467:17" pos:end="467:31">gen_op_ld_T0_A0</name><argument_list pos:start="467:32" pos:end="467:50">(<argument pos:start="467:33" pos:end="467:49"><expr pos:start="467:33" pos:end="467:49"><name pos:start="467:33" pos:end="467:34">ot</name> <operator pos:start="467:36" pos:end="467:36">+</operator> <name pos:start="467:38" pos:end="467:49"><name pos:start="467:38" pos:end="467:38">s</name><operator pos:start="467:39" pos:end="467:40">-&gt;</operator><name pos:start="467:41" pos:end="467:49">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if> <else pos:start="468:11" pos:end="3141:17">else <block pos:start="468:16" pos:end="3141:17">{<block_content pos:start="469:13" pos:end="3141:17">
            <expr_stmt pos:start="469:13" pos:end="469:41"><expr pos:start="469:13" pos:end="469:40"><call pos:start="469:13" pos:end="469:40"><name pos:start="469:13" pos:end="469:29">gen_op_mov_TN_reg</name><argument_list pos:start="469:30" pos:end="469:40">(<argument pos:start="469:31" pos:end="469:32"><expr pos:start="469:31" pos:end="469:32"><name pos:start="469:31" pos:end="469:32">ot</name></expr></argument>, <argument pos:start="469:35" pos:end="469:35"><expr pos:start="469:35" pos:end="469:35"><literal type="number" pos:start="469:35" pos:end="469:35">0</literal></expr></argument>, <argument pos:start="469:38" pos:end="469:39"><expr pos:start="469:38" pos:end="469:39"><name pos:start="469:38" pos:end="469:39">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <switch pos:start="470:9" pos:end="3141:17">switch<condition pos:start="470:15" pos:end="470:18">(<expr pos:start="470:16" pos:end="470:17"><name pos:start="470:16" pos:end="470:17">op</name></expr>)</condition> <block pos:start="470:20" pos:end="3141:17">{<block_content pos:start="471:9" pos:end="3141:17">
        <case pos:start="471:9" pos:end="471:15">case <expr pos:start="471:14" pos:end="471:14"><literal type="number" pos:start="471:14" pos:end="471:14">0</literal></expr>:</case> <comment type="block" pos:start="471:17" pos:end="471:28">/* inc Ev */</comment>
            <if_stmt pos:start="472:13" pos:end="475:27"><if pos:start="472:13" pos:end="473:32">if <condition pos:start="472:16" pos:end="472:25">(<expr pos:start="472:17" pos:end="472:24"><name pos:start="472:17" pos:end="472:19">mod</name> <operator pos:start="472:21" pos:end="472:22">!=</operator> <literal type="number" pos:start="472:24" pos:end="472:24">3</literal></expr>)</condition><block type="pseudo" pos:start="473:17" pos:end="473:32"><block_content pos:start="473:17" pos:end="473:32">
                <expr_stmt pos:start="473:17" pos:end="473:32"><expr pos:start="473:17" pos:end="473:31"><name pos:start="473:17" pos:end="473:21">opreg</name> <operator pos:start="473:23" pos:end="473:23">=</operator> <name pos:start="473:25" pos:end="473:31">OR_TMP0</name></expr>;</expr_stmt></block_content></block></if>
            <else pos:start="474:13" pos:end="475:27">else<block type="pseudo" pos:start="475:17" pos:end="475:27"><block_content pos:start="475:17" pos:end="475:27">
                <expr_stmt pos:start="475:17" pos:end="475:27"><expr pos:start="475:17" pos:end="475:26"><name pos:start="475:17" pos:end="475:21">opreg</name> <operator pos:start="475:23" pos:end="475:23">=</operator> <name pos:start="475:25" pos:end="475:26">rm</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <expr_stmt pos:start="476:13" pos:end="476:37"><expr pos:start="476:13" pos:end="476:36"><call pos:start="476:13" pos:end="476:36"><name pos:start="476:13" pos:end="476:19">gen_inc</name><argument_list pos:start="476:20" pos:end="476:36">(<argument pos:start="476:21" pos:end="476:21"><expr pos:start="476:21" pos:end="476:21"><name pos:start="476:21" pos:end="476:21">s</name></expr></argument>, <argument pos:start="476:24" pos:end="476:25"><expr pos:start="476:24" pos:end="476:25"><name pos:start="476:24" pos:end="476:25">ot</name></expr></argument>, <argument pos:start="476:28" pos:end="476:32"><expr pos:start="476:28" pos:end="476:32"><name pos:start="476:28" pos:end="476:32">opreg</name></expr></argument>, <argument pos:start="476:35" pos:end="476:35"><expr pos:start="476:35" pos:end="476:35"><literal type="number" pos:start="476:35" pos:end="476:35">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="477:13" pos:end="477:18">break;</break>
        <case pos:start="478:9" pos:end="478:15">case <expr pos:start="478:14" pos:end="478:14"><literal type="number" pos:start="478:14" pos:end="478:14">1</literal></expr>:</case> <comment type="block" pos:start="478:17" pos:end="478:28">/* dec Ev */</comment>
            <if_stmt pos:start="479:13" pos:end="482:27"><if pos:start="479:13" pos:end="480:32">if <condition pos:start="479:16" pos:end="479:25">(<expr pos:start="479:17" pos:end="479:24"><name pos:start="479:17" pos:end="479:19">mod</name> <operator pos:start="479:21" pos:end="479:22">!=</operator> <literal type="number" pos:start="479:24" pos:end="479:24">3</literal></expr>)</condition><block type="pseudo" pos:start="480:17" pos:end="480:32"><block_content pos:start="480:17" pos:end="480:32">
                <expr_stmt pos:start="480:17" pos:end="480:32"><expr pos:start="480:17" pos:end="480:31"><name pos:start="480:17" pos:end="480:21">opreg</name> <operator pos:start="480:23" pos:end="480:23">=</operator> <name pos:start="480:25" pos:end="480:31">OR_TMP0</name></expr>;</expr_stmt></block_content></block></if>
            <else pos:start="481:13" pos:end="482:27">else<block type="pseudo" pos:start="482:17" pos:end="482:27"><block_content pos:start="482:17" pos:end="482:27">
                <expr_stmt pos:start="482:17" pos:end="482:27"><expr pos:start="482:17" pos:end="482:26"><name pos:start="482:17" pos:end="482:21">opreg</name> <operator pos:start="482:23" pos:end="482:23">=</operator> <name pos:start="482:25" pos:end="482:26">rm</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <expr_stmt pos:start="483:13" pos:end="483:38"><expr pos:start="483:13" pos:end="483:37"><call pos:start="483:13" pos:end="483:37"><name pos:start="483:13" pos:end="483:19">gen_inc</name><argument_list pos:start="483:20" pos:end="483:37">(<argument pos:start="483:21" pos:end="483:21"><expr pos:start="483:21" pos:end="483:21"><name pos:start="483:21" pos:end="483:21">s</name></expr></argument>, <argument pos:start="483:24" pos:end="483:25"><expr pos:start="483:24" pos:end="483:25"><name pos:start="483:24" pos:end="483:25">ot</name></expr></argument>, <argument pos:start="483:28" pos:end="483:32"><expr pos:start="483:28" pos:end="483:32"><name pos:start="483:28" pos:end="483:32">opreg</name></expr></argument>, <argument pos:start="483:35" pos:end="483:36"><expr pos:start="483:35" pos:end="483:36"><operator pos:start="483:35" pos:end="483:35">-</operator><literal type="number" pos:start="483:36" pos:end="483:36">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="484:13" pos:end="484:18">break;</break>
        <case pos:start="485:9" pos:end="485:15">case <expr pos:start="485:14" pos:end="485:14"><literal type="number" pos:start="485:14" pos:end="485:14">2</literal></expr>:</case> <comment type="block" pos:start="485:17" pos:end="485:29">/* call Ev */</comment>
            <comment type="block" pos:start="486:13" pos:end="486:65">/* XXX: optimize if memory (no 'and' is necessary) */</comment>
            <if_stmt pos:start="487:13" pos:end="488:38"><if pos:start="487:13" pos:end="488:38">if <condition pos:start="487:16" pos:end="487:30">(<expr pos:start="487:17" pos:end="487:29"><name pos:start="487:17" pos:end="487:24"><name pos:start="487:17" pos:end="487:17">s</name><operator pos:start="487:18" pos:end="487:19">-&gt;</operator><name pos:start="487:20" pos:end="487:24">dflag</name></name> <operator pos:start="487:26" pos:end="487:27">==</operator> <literal type="number" pos:start="487:29" pos:end="487:29">0</literal></expr>)</condition><block type="pseudo" pos:start="488:17" pos:end="488:38"><block_content pos:start="488:17" pos:end="488:38">
                <expr_stmt pos:start="488:17" pos:end="488:38"><expr pos:start="488:17" pos:end="488:37"><call pos:start="488:17" pos:end="488:37"><name pos:start="488:17" pos:end="488:35">gen_op_andl_T0_ffff</name><argument_list pos:start="488:36" pos:end="488:37">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt pos:start="489:13" pos:end="489:42"><expr pos:start="489:13" pos:end="489:41"><name pos:start="489:13" pos:end="489:20">next_eip</name> <operator pos:start="489:22" pos:end="489:22">=</operator> <name pos:start="489:24" pos:end="489:28"><name pos:start="489:24" pos:end="489:24">s</name><operator pos:start="489:25" pos:end="489:26">-&gt;</operator><name pos:start="489:27" pos:end="489:28">pc</name></name> <operator pos:start="489:30" pos:end="489:30">-</operator> <name pos:start="489:32" pos:end="489:41"><name pos:start="489:32" pos:end="489:32">s</name><operator pos:start="489:33" pos:end="489:34">-&gt;</operator><name pos:start="489:35" pos:end="489:41">cs_base</name></name></expr>;</expr_stmt>
            <expr_stmt pos:start="490:13" pos:end="490:38"><expr pos:start="490:13" pos:end="490:37"><call pos:start="490:13" pos:end="490:37"><name pos:start="490:13" pos:end="490:27">gen_movtl_T1_im</name><argument_list pos:start="490:28" pos:end="490:37">(<argument pos:start="490:29" pos:end="490:36"><expr pos:start="490:29" pos:end="490:36"><name pos:start="490:29" pos:end="490:36">next_eip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="491:13" pos:end="491:27"><expr pos:start="491:13" pos:end="491:26"><call pos:start="491:13" pos:end="491:26"><name pos:start="491:13" pos:end="491:23">gen_push_T1</name><argument_list pos:start="491:24" pos:end="491:26">(<argument pos:start="491:25" pos:end="491:25"><expr pos:start="491:25" pos:end="491:25"><name pos:start="491:25" pos:end="491:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="492:13" pos:end="492:28"><expr pos:start="492:13" pos:end="492:27"><call pos:start="492:13" pos:end="492:27"><name pos:start="492:13" pos:end="492:25">gen_op_jmp_T0</name><argument_list pos:start="492:26" pos:end="492:27">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="493:13" pos:end="493:23"><expr pos:start="493:13" pos:end="493:22"><call pos:start="493:13" pos:end="493:22"><name pos:start="493:13" pos:end="493:19">gen_eob</name><argument_list pos:start="493:20" pos:end="493:22">(<argument pos:start="493:21" pos:end="493:21"><expr pos:start="493:21" pos:end="493:21"><name pos:start="493:21" pos:end="493:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="494:13" pos:end="494:18">break;</break>
        <case pos:start="495:9" pos:end="495:15">case <expr pos:start="495:14" pos:end="495:14"><literal type="number" pos:start="495:14" pos:end="495:14">3</literal></expr>:</case> <comment type="block" pos:start="495:17" pos:end="495:30">/* lcall Ev */</comment>
            <expr_stmt pos:start="496:13" pos:end="496:47"><expr pos:start="496:13" pos:end="496:46"><call pos:start="496:13" pos:end="496:46"><name pos:start="496:13" pos:end="496:27">gen_op_ld_T1_A0</name><argument_list pos:start="496:28" pos:end="496:46">(<argument pos:start="496:29" pos:end="496:45"><expr pos:start="496:29" pos:end="496:45"><name pos:start="496:29" pos:end="496:30">ot</name> <operator pos:start="496:32" pos:end="496:32">+</operator> <name pos:start="496:34" pos:end="496:45"><name pos:start="496:34" pos:end="496:34">s</name><operator pos:start="496:35" pos:end="496:36">-&gt;</operator><name pos:start="496:37" pos:end="496:45">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="497:13" pos:end="497:54"><expr pos:start="497:13" pos:end="497:53"><call pos:start="497:13" pos:end="497:53"><name pos:start="497:13" pos:end="497:25">gen_add_A0_im</name><argument_list pos:start="497:26" pos:end="497:53">(<argument pos:start="497:27" pos:end="497:27"><expr pos:start="497:27" pos:end="497:27"><name pos:start="497:27" pos:end="497:27">s</name></expr></argument>, <argument pos:start="497:30" pos:end="497:52"><expr pos:start="497:30" pos:end="497:52"><literal type="number" pos:start="497:30" pos:end="497:30">1</literal> <operator pos:start="497:32" pos:end="497:33">&lt;&lt;</operator> <operator pos:start="497:35" pos:end="497:35">(</operator><name pos:start="497:36" pos:end="497:37">ot</name> <operator pos:start="497:39" pos:end="497:39">-</operator> <name pos:start="497:41" pos:end="497:47">OT_WORD</name> <operator pos:start="497:49" pos:end="497:49">+</operator> <literal type="number" pos:start="497:51" pos:end="497:51">1</literal><operator pos:start="497:52" pos:end="497:52">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="498:13" pos:end="498:53"><expr pos:start="498:13" pos:end="498:52"><call pos:start="498:13" pos:end="498:52"><name pos:start="498:13" pos:end="498:28">gen_op_ldu_T0_A0</name><argument_list pos:start="498:29" pos:end="498:52">(<argument pos:start="498:30" pos:end="498:51"><expr pos:start="498:30" pos:end="498:51"><name pos:start="498:30" pos:end="498:36">OT_WORD</name> <operator pos:start="498:38" pos:end="498:38">+</operator> <name pos:start="498:40" pos:end="498:51"><name pos:start="498:40" pos:end="498:40">s</name><operator pos:start="498:41" pos:end="498:42">-&gt;</operator><name pos:start="498:43" pos:end="498:51">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <label pos:start="499:9" pos:end="499:17"><name pos:start="499:9" pos:end="499:16">do_lcall</name>:</label>
            <if_stmt pos:start="500:13" pos:end="3141:17"><if pos:start="500:13" pos:end="507:13">if <condition pos:start="500:16" pos:end="500:34">(<expr pos:start="500:17" pos:end="500:33"><name pos:start="500:17" pos:end="500:21"><name pos:start="500:17" pos:end="500:17">s</name><operator pos:start="500:18" pos:end="500:19">-&gt;</operator><name pos:start="500:20" pos:end="500:21">pe</name></name> <operator pos:start="500:23" pos:end="500:24">&amp;&amp;</operator> <operator pos:start="500:26" pos:end="500:26">!</operator><name pos:start="500:27" pos:end="500:33"><name pos:start="500:27" pos:end="500:27">s</name><operator pos:start="500:28" pos:end="500:29">-&gt;</operator><name pos:start="500:30" pos:end="500:33">vm86</name></name></expr>)</condition> <block pos:start="500:36" pos:end="507:13">{<block_content pos:start="501:17" pos:end="506:76">
                <expr_stmt pos:start="501:17" pos:end="501:36"><expr pos:start="501:17" pos:end="501:35"><call pos:start="501:17" pos:end="501:35"><name pos:start="501:17" pos:end="501:32">gen_update_cc_op</name><argument_list pos:start="501:33" pos:end="501:35">(<argument pos:start="501:34" pos:end="501:34"><expr pos:start="501:34" pos:end="501:34"><name pos:start="501:34" pos:end="501:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="502:17" pos:end="502:50"><expr pos:start="502:17" pos:end="502:49"><call pos:start="502:17" pos:end="502:49"><name pos:start="502:17" pos:end="502:26">gen_jmp_im</name><argument_list pos:start="502:27" pos:end="502:49">(<argument pos:start="502:28" pos:end="502:48"><expr pos:start="502:28" pos:end="502:48"><name pos:start="502:28" pos:end="502:35">pc_start</name> <operator pos:start="502:37" pos:end="502:37">-</operator> <name pos:start="502:39" pos:end="502:48"><name pos:start="502:39" pos:end="502:39">s</name><operator pos:start="502:40" pos:end="502:41">-&gt;</operator><name pos:start="502:42" pos:end="502:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="503:17" pos:end="503:61"><expr pos:start="503:17" pos:end="503:60"><call pos:start="503:17" pos:end="503:60"><name pos:start="503:17" pos:end="503:36">tcg_gen_trunc_tl_i32</name><argument_list pos:start="503:37" pos:end="503:60">(<argument pos:start="503:38" pos:end="503:49"><expr pos:start="503:38" pos:end="503:49"><name pos:start="503:38" pos:end="503:49">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="503:52" pos:end="503:59"><expr pos:start="503:52" pos:end="503:59"><name pos:start="503:52" pos:end="503:59"><name pos:start="503:52" pos:end="503:56">cpu_T</name><index pos:start="503:57" pos:end="503:59">[<expr pos:start="503:58" pos:end="503:58"><literal type="number" pos:start="503:58" pos:end="503:58">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="504:17" pos:end="506:76"><expr pos:start="504:17" pos:end="506:75"><call pos:start="504:17" pos:end="506:75"><name pos:start="504:17" pos:end="504:42">gen_helper_lcall_protected</name><argument_list pos:start="504:43" pos:end="506:75">(<argument pos:start="504:44" pos:end="504:50"><expr pos:start="504:44" pos:end="504:50"><name pos:start="504:44" pos:end="504:50">cpu_env</name></expr></argument>, <argument pos:start="504:53" pos:end="504:64"><expr pos:start="504:53" pos:end="504:64"><name pos:start="504:53" pos:end="504:64">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="504:67" pos:end="504:74"><expr pos:start="504:67" pos:end="504:74"><name pos:start="504:67" pos:end="504:74"><name pos:start="504:67" pos:end="504:71">cpu_T</name><index pos:start="504:72" pos:end="504:74">[<expr pos:start="504:73" pos:end="504:73"><literal type="number" pos:start="504:73" pos:end="504:73">1</literal></expr>]</index></name></expr></argument>,
                                           <argument pos:start="505:44" pos:end="505:63"><expr pos:start="505:44" pos:end="505:63"><call pos:start="505:44" pos:end="505:63"><name pos:start="505:44" pos:end="505:56">tcg_const_i32</name><argument_list pos:start="505:57" pos:end="505:63">(<argument pos:start="505:58" pos:end="505:62"><expr pos:start="505:58" pos:end="505:62"><name pos:start="505:58" pos:end="505:62">dflag</name></expr></argument>)</argument_list></call></expr></argument>,
                                           <argument pos:start="506:44" pos:end="506:74"><expr pos:start="506:44" pos:end="506:74"><call pos:start="506:44" pos:end="506:74"><name pos:start="506:44" pos:end="506:56">tcg_const_i32</name><argument_list pos:start="506:57" pos:end="506:74">(<argument pos:start="506:58" pos:end="506:73"><expr pos:start="506:58" pos:end="506:73"><name pos:start="506:58" pos:end="506:62"><name pos:start="506:58" pos:end="506:58">s</name><operator pos:start="506:59" pos:end="506:60">-&gt;</operator><name pos:start="506:61" pos:end="506:62">pc</name></name> <operator pos:start="506:64" pos:end="506:64">-</operator> <name pos:start="506:66" pos:end="506:73">pc_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="507:15" pos:end="3141:17">else <block pos:start="507:20" pos:end="3141:17">{<block_content pos:start="508:17" pos:end="3141:17">
                <expr_stmt pos:start="508:17" pos:end="508:61"><expr pos:start="508:17" pos:end="508:60"><call pos:start="508:17" pos:end="508:60"><name pos:start="508:17" pos:end="508:36">tcg_gen_trunc_tl_i32</name><argument_list pos:start="508:37" pos:end="508:60">(<argument pos:start="508:38" pos:end="508:49"><expr pos:start="508:38" pos:end="508:49"><name pos:start="508:38" pos:end="508:49">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="508:52" pos:end="508:59"><expr pos:start="508:52" pos:end="508:59"><name pos:start="508:52" pos:end="508:59"><name pos:start="508:52" pos:end="508:56">cpu_T</name><index pos:start="508:57" pos:end="508:59">[<expr pos:start="508:58" pos:end="508:58"><literal type="number" pos:start="508:58" pos:end="508:58">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="509:17" pos:end="511:73"><expr pos:start="509:17" pos:end="511:72"><call pos:start="509:17" pos:end="511:72"><name pos:start="509:17" pos:end="509:37">gen_helper_lcall_real</name><argument_list pos:start="509:38" pos:end="511:72">(<argument pos:start="509:39" pos:end="509:45"><expr pos:start="509:39" pos:end="509:45"><name pos:start="509:39" pos:end="509:45">cpu_env</name></expr></argument>, <argument pos:start="509:48" pos:end="509:59"><expr pos:start="509:48" pos:end="509:59"><name pos:start="509:48" pos:end="509:59">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="509:62" pos:end="509:69"><expr pos:start="509:62" pos:end="509:69"><name pos:start="509:62" pos:end="509:69"><name pos:start="509:62" pos:end="509:66">cpu_T</name><index pos:start="509:67" pos:end="509:69">[<expr pos:start="509:68" pos:end="509:68"><literal type="number" pos:start="509:68" pos:end="509:68">1</literal></expr>]</index></name></expr></argument>,
                                      <argument pos:start="510:39" pos:end="510:58"><expr pos:start="510:39" pos:end="510:58"><call pos:start="510:39" pos:end="510:58"><name pos:start="510:39" pos:end="510:51">tcg_const_i32</name><argument_list pos:start="510:52" pos:end="510:58">(<argument pos:start="510:53" pos:end="510:57"><expr pos:start="510:53" pos:end="510:57"><name pos:start="510:53" pos:end="510:57">dflag</name></expr></argument>)</argument_list></call></expr></argument>,
                                      <argument pos:start="511:39" pos:end="511:71"><expr pos:start="511:39" pos:end="511:71"><call pos:start="511:39" pos:end="511:71"><name pos:start="511:39" pos:end="511:51">tcg_const_i32</name><argument_list pos:start="511:52" pos:end="511:71">(<argument pos:start="511:53" pos:end="511:70"><expr pos:start="511:53" pos:end="511:70"><name pos:start="511:53" pos:end="511:57"><name pos:start="511:53" pos:end="511:53">s</name><operator pos:start="511:54" pos:end="511:55">-&gt;</operator><name pos:start="511:56" pos:end="511:57">pc</name></name> <operator pos:start="511:59" pos:end="511:59">-</operator> <name pos:start="511:61" pos:end="511:70"><name pos:start="511:61" pos:end="511:61">s</name><operator pos:start="511:62" pos:end="511:63">-&gt;</operator><name pos:start="511:64" pos:end="511:70">cs_base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="512:13" pos:end="512:23"><expr pos:start="512:13" pos:end="512:22"><call pos:start="512:13" pos:end="512:22"><name pos:start="512:13" pos:end="512:19">gen_eob</name><argument_list pos:start="512:20" pos:end="512:22">(<argument pos:start="512:21" pos:end="512:21"><expr pos:start="512:21" pos:end="512:21"><name pos:start="512:21" pos:end="512:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="513:13" pos:end="513:18">break;</break>
        <case pos:start="514:9" pos:end="514:15">case <expr pos:start="514:14" pos:end="514:14"><literal type="number" pos:start="514:14" pos:end="514:14">4</literal></expr>:</case> <comment type="block" pos:start="514:17" pos:end="514:28">/* jmp Ev */</comment>
            <if_stmt pos:start="515:13" pos:end="516:38"><if pos:start="515:13" pos:end="516:38">if <condition pos:start="515:16" pos:end="515:30">(<expr pos:start="515:17" pos:end="515:29"><name pos:start="515:17" pos:end="515:24"><name pos:start="515:17" pos:end="515:17">s</name><operator pos:start="515:18" pos:end="515:19">-&gt;</operator><name pos:start="515:20" pos:end="515:24">dflag</name></name> <operator pos:start="515:26" pos:end="515:27">==</operator> <literal type="number" pos:start="515:29" pos:end="515:29">0</literal></expr>)</condition><block type="pseudo" pos:start="516:17" pos:end="516:38"><block_content pos:start="516:17" pos:end="516:38">
                <expr_stmt pos:start="516:17" pos:end="516:38"><expr pos:start="516:17" pos:end="516:37"><call pos:start="516:17" pos:end="516:37"><name pos:start="516:17" pos:end="516:35">gen_op_andl_T0_ffff</name><argument_list pos:start="516:36" pos:end="516:37">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt pos:start="517:13" pos:end="517:28"><expr pos:start="517:13" pos:end="517:27"><call pos:start="517:13" pos:end="517:27"><name pos:start="517:13" pos:end="517:25">gen_op_jmp_T0</name><argument_list pos:start="517:26" pos:end="517:27">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="518:13" pos:end="518:23"><expr pos:start="518:13" pos:end="518:22"><call pos:start="518:13" pos:end="518:22"><name pos:start="518:13" pos:end="518:19">gen_eob</name><argument_list pos:start="518:20" pos:end="518:22">(<argument pos:start="518:21" pos:end="518:21"><expr pos:start="518:21" pos:end="518:21"><name pos:start="518:21" pos:end="518:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="519:13" pos:end="519:18">break;</break>
        <case pos:start="520:9" pos:end="520:15">case <expr pos:start="520:14" pos:end="520:14"><literal type="number" pos:start="520:14" pos:end="520:14">5</literal></expr>:</case> <comment type="block" pos:start="520:17" pos:end="520:29">/* ljmp Ev */</comment>
            <expr_stmt pos:start="521:13" pos:end="521:47"><expr pos:start="521:13" pos:end="521:46"><call pos:start="521:13" pos:end="521:46"><name pos:start="521:13" pos:end="521:27">gen_op_ld_T1_A0</name><argument_list pos:start="521:28" pos:end="521:46">(<argument pos:start="521:29" pos:end="521:45"><expr pos:start="521:29" pos:end="521:45"><name pos:start="521:29" pos:end="521:30">ot</name> <operator pos:start="521:32" pos:end="521:32">+</operator> <name pos:start="521:34" pos:end="521:45"><name pos:start="521:34" pos:end="521:34">s</name><operator pos:start="521:35" pos:end="521:36">-&gt;</operator><name pos:start="521:37" pos:end="521:45">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="522:13" pos:end="522:54"><expr pos:start="522:13" pos:end="522:53"><call pos:start="522:13" pos:end="522:53"><name pos:start="522:13" pos:end="522:25">gen_add_A0_im</name><argument_list pos:start="522:26" pos:end="522:53">(<argument pos:start="522:27" pos:end="522:27"><expr pos:start="522:27" pos:end="522:27"><name pos:start="522:27" pos:end="522:27">s</name></expr></argument>, <argument pos:start="522:30" pos:end="522:52"><expr pos:start="522:30" pos:end="522:52"><literal type="number" pos:start="522:30" pos:end="522:30">1</literal> <operator pos:start="522:32" pos:end="522:33">&lt;&lt;</operator> <operator pos:start="522:35" pos:end="522:35">(</operator><name pos:start="522:36" pos:end="522:37">ot</name> <operator pos:start="522:39" pos:end="522:39">-</operator> <name pos:start="522:41" pos:end="522:47">OT_WORD</name> <operator pos:start="522:49" pos:end="522:49">+</operator> <literal type="number" pos:start="522:51" pos:end="522:51">1</literal><operator pos:start="522:52" pos:end="522:52">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="523:13" pos:end="523:53"><expr pos:start="523:13" pos:end="523:52"><call pos:start="523:13" pos:end="523:52"><name pos:start="523:13" pos:end="523:28">gen_op_ldu_T0_A0</name><argument_list pos:start="523:29" pos:end="523:52">(<argument pos:start="523:30" pos:end="523:51"><expr pos:start="523:30" pos:end="523:51"><name pos:start="523:30" pos:end="523:36">OT_WORD</name> <operator pos:start="523:38" pos:end="523:38">+</operator> <name pos:start="523:40" pos:end="523:51"><name pos:start="523:40" pos:end="523:40">s</name><operator pos:start="523:41" pos:end="523:42">-&gt;</operator><name pos:start="523:43" pos:end="523:51">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <label pos:start="524:9" pos:end="524:16"><name pos:start="524:9" pos:end="524:15">do_ljmp</name>:</label>
            <if_stmt pos:start="525:13" pos:end="3141:17"><if pos:start="525:13" pos:end="531:13">if <condition pos:start="525:16" pos:end="525:34">(<expr pos:start="525:17" pos:end="525:33"><name pos:start="525:17" pos:end="525:21"><name pos:start="525:17" pos:end="525:17">s</name><operator pos:start="525:18" pos:end="525:19">-&gt;</operator><name pos:start="525:20" pos:end="525:21">pe</name></name> <operator pos:start="525:23" pos:end="525:24">&amp;&amp;</operator> <operator pos:start="525:26" pos:end="525:26">!</operator><name pos:start="525:27" pos:end="525:33"><name pos:start="525:27" pos:end="525:27">s</name><operator pos:start="525:28" pos:end="525:29">-&gt;</operator><name pos:start="525:30" pos:end="525:33">vm86</name></name></expr>)</condition> <block pos:start="525:36" pos:end="531:13">{<block_content pos:start="526:17" pos:end="530:75">
                <expr_stmt pos:start="526:17" pos:end="526:36"><expr pos:start="526:17" pos:end="526:35"><call pos:start="526:17" pos:end="526:35"><name pos:start="526:17" pos:end="526:32">gen_update_cc_op</name><argument_list pos:start="526:33" pos:end="526:35">(<argument pos:start="526:34" pos:end="526:34"><expr pos:start="526:34" pos:end="526:34"><name pos:start="526:34" pos:end="526:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="527:17" pos:end="527:50"><expr pos:start="527:17" pos:end="527:49"><call pos:start="527:17" pos:end="527:49"><name pos:start="527:17" pos:end="527:26">gen_jmp_im</name><argument_list pos:start="527:27" pos:end="527:49">(<argument pos:start="527:28" pos:end="527:48"><expr pos:start="527:28" pos:end="527:48"><name pos:start="527:28" pos:end="527:35">pc_start</name> <operator pos:start="527:37" pos:end="527:37">-</operator> <name pos:start="527:39" pos:end="527:48"><name pos:start="527:39" pos:end="527:39">s</name><operator pos:start="527:40" pos:end="527:41">-&gt;</operator><name pos:start="527:42" pos:end="527:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="528:17" pos:end="528:61"><expr pos:start="528:17" pos:end="528:60"><call pos:start="528:17" pos:end="528:60"><name pos:start="528:17" pos:end="528:36">tcg_gen_trunc_tl_i32</name><argument_list pos:start="528:37" pos:end="528:60">(<argument pos:start="528:38" pos:end="528:49"><expr pos:start="528:38" pos:end="528:49"><name pos:start="528:38" pos:end="528:49">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="528:52" pos:end="528:59"><expr pos:start="528:52" pos:end="528:59"><name pos:start="528:52" pos:end="528:59"><name pos:start="528:52" pos:end="528:56">cpu_T</name><index pos:start="528:57" pos:end="528:59">[<expr pos:start="528:58" pos:end="528:58"><literal type="number" pos:start="528:58" pos:end="528:58">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="529:17" pos:end="530:75"><expr pos:start="529:17" pos:end="530:74"><call pos:start="529:17" pos:end="530:74"><name pos:start="529:17" pos:end="529:41">gen_helper_ljmp_protected</name><argument_list pos:start="529:42" pos:end="530:74">(<argument pos:start="529:43" pos:end="529:49"><expr pos:start="529:43" pos:end="529:49"><name pos:start="529:43" pos:end="529:49">cpu_env</name></expr></argument>, <argument pos:start="529:52" pos:end="529:63"><expr pos:start="529:52" pos:end="529:63"><name pos:start="529:52" pos:end="529:63">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="529:66" pos:end="529:73"><expr pos:start="529:66" pos:end="529:73"><name pos:start="529:66" pos:end="529:73"><name pos:start="529:66" pos:end="529:70">cpu_T</name><index pos:start="529:71" pos:end="529:73">[<expr pos:start="529:72" pos:end="529:72"><literal type="number" pos:start="529:72" pos:end="529:72">1</literal></expr>]</index></name></expr></argument>,
                                          <argument pos:start="530:43" pos:end="530:73"><expr pos:start="530:43" pos:end="530:73"><call pos:start="530:43" pos:end="530:73"><name pos:start="530:43" pos:end="530:55">tcg_const_i32</name><argument_list pos:start="530:56" pos:end="530:73">(<argument pos:start="530:57" pos:end="530:72"><expr pos:start="530:57" pos:end="530:72"><name pos:start="530:57" pos:end="530:61"><name pos:start="530:57" pos:end="530:57">s</name><operator pos:start="530:58" pos:end="530:59">-&gt;</operator><name pos:start="530:60" pos:end="530:61">pc</name></name> <operator pos:start="530:63" pos:end="530:63">-</operator> <name pos:start="530:65" pos:end="530:72">pc_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="531:15" pos:end="3141:17">else <block pos:start="531:20" pos:end="3141:17">{<block_content pos:start="532:17" pos:end="3141:17">
                <expr_stmt pos:start="532:17" pos:end="532:44"><expr pos:start="532:17" pos:end="532:43"><call pos:start="532:17" pos:end="532:43"><name pos:start="532:17" pos:end="532:37">gen_op_movl_seg_T0_vm</name><argument_list pos:start="532:38" pos:end="532:43">(<argument pos:start="532:39" pos:end="532:42"><expr pos:start="532:39" pos:end="532:42"><name pos:start="532:39" pos:end="532:42">R_CS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="533:17" pos:end="533:36"><expr pos:start="533:17" pos:end="533:35"><call pos:start="533:17" pos:end="533:35"><name pos:start="533:17" pos:end="533:33">gen_op_movl_T0_T1</name><argument_list pos:start="533:34" pos:end="533:35">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="534:17" pos:end="534:32"><expr pos:start="534:17" pos:end="534:31"><call pos:start="534:17" pos:end="534:31"><name pos:start="534:17" pos:end="534:29">gen_op_jmp_T0</name><argument_list pos:start="534:30" pos:end="534:31">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="535:13" pos:end="535:23"><expr pos:start="535:13" pos:end="535:22"><call pos:start="535:13" pos:end="535:22"><name pos:start="535:13" pos:end="535:19">gen_eob</name><argument_list pos:start="535:20" pos:end="535:22">(<argument pos:start="535:21" pos:end="535:21"><expr pos:start="535:21" pos:end="535:21"><name pos:start="535:21" pos:end="535:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="536:13" pos:end="536:18">break;</break>
        <case pos:start="537:9" pos:end="537:15">case <expr pos:start="537:14" pos:end="537:14"><literal type="number" pos:start="537:14" pos:end="537:14">6</literal></expr>:</case> <comment type="block" pos:start="537:17" pos:end="537:29">/* push Ev */</comment>
            <expr_stmt pos:start="538:13" pos:end="538:27"><expr pos:start="538:13" pos:end="538:26"><call pos:start="538:13" pos:end="538:26"><name pos:start="538:13" pos:end="538:23">gen_push_T0</name><argument_list pos:start="538:24" pos:end="538:26">(<argument pos:start="538:25" pos:end="538:25"><expr pos:start="538:25" pos:end="538:25"><name pos:start="538:25" pos:end="538:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="539:13" pos:end="539:18">break;</break>
        <default pos:start="540:9" pos:end="540:16">default:</default>
        <break pos:start="541:9" pos:end="541:14">break;</break>
    <case pos:start="542:5" pos:end="542:14">case <expr pos:start="542:10" pos:end="542:13"><literal type="number" pos:start="542:10" pos:end="542:13">0x84</literal></expr>:</case> <comment type="block" pos:start="542:16" pos:end="542:32">/* test Ev, Gv */</comment>
    <case pos:start="543:5" pos:end="543:14">case <expr pos:start="543:10" pos:end="543:13"><literal type="number" pos:start="543:10" pos:end="543:13">0x85</literal></expr>:</case>
        <if_stmt pos:start="544:9" pos:end="547:33"><if pos:start="544:9" pos:end="545:25">if <condition pos:start="544:12" pos:end="544:25">(<expr pos:start="544:13" pos:end="544:24"><operator pos:start="544:13" pos:end="544:13">(</operator><name pos:start="544:14" pos:end="544:14">b</name> <operator pos:start="544:16" pos:end="544:16">&amp;</operator> <literal type="number" pos:start="544:18" pos:end="544:18">1</literal><operator pos:start="544:19" pos:end="544:19">)</operator> <operator pos:start="544:21" pos:end="544:22">==</operator> <literal type="number" pos:start="544:24" pos:end="544:24">0</literal></expr>)</condition><block type="pseudo" pos:start="545:13" pos:end="545:25"><block_content pos:start="545:13" pos:end="545:25">
            <expr_stmt pos:start="545:13" pos:end="545:25"><expr pos:start="545:13" pos:end="545:24"><name pos:start="545:13" pos:end="545:14">ot</name> <operator pos:start="545:16" pos:end="545:16">=</operator> <name pos:start="545:18" pos:end="545:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>
        <else pos:start="546:9" pos:end="547:33">else<block type="pseudo" pos:start="547:13" pos:end="547:33"><block_content pos:start="547:13" pos:end="547:33">
            <expr_stmt pos:start="547:13" pos:end="547:33"><expr pos:start="547:13" pos:end="547:32"><name pos:start="547:13" pos:end="547:14">ot</name> <operator pos:start="547:16" pos:end="547:16">=</operator> <name pos:start="547:18" pos:end="547:22">dflag</name> <operator pos:start="547:24" pos:end="547:24">+</operator> <name pos:start="547:26" pos:end="547:32">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt pos:start="548:9" pos:end="548:44"><expr pos:start="548:9" pos:end="548:43"><name pos:start="548:9" pos:end="548:13">modrm</name> <operator pos:start="548:15" pos:end="548:15">=</operator> <call pos:start="548:17" pos:end="548:43"><name pos:start="548:17" pos:end="548:29">cpu_ldub_code</name><argument_list pos:start="548:30" pos:end="548:43">(<argument pos:start="548:31" pos:end="548:33"><expr pos:start="548:31" pos:end="548:33"><name pos:start="548:31" pos:end="548:33">env</name></expr></argument>, <argument pos:start="548:36" pos:end="548:42"><expr pos:start="548:36" pos:end="548:42"><name pos:start="548:36" pos:end="548:40"><name pos:start="548:36" pos:end="548:36">s</name><operator pos:start="548:37" pos:end="548:38">-&gt;</operator><name pos:start="548:39" pos:end="548:40">pc</name></name><operator pos:start="548:41" pos:end="548:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="549:9" pos:end="549:41"><expr pos:start="549:9" pos:end="549:40"><name pos:start="549:9" pos:end="549:11">reg</name> <operator pos:start="549:13" pos:end="549:13">=</operator> <operator pos:start="549:15" pos:end="549:15">(</operator><operator pos:start="549:16" pos:end="549:16">(</operator><name pos:start="549:17" pos:end="549:21">modrm</name> <operator pos:start="549:23" pos:end="549:24">&gt;&gt;</operator> <literal type="number" pos:start="549:26" pos:end="549:26">3</literal><operator pos:start="549:27" pos:end="549:27">)</operator> <operator pos:start="549:29" pos:end="549:29">&amp;</operator> <literal type="number" pos:start="549:31" pos:end="549:31">7</literal><operator pos:start="549:32" pos:end="549:32">)</operator> <operator pos:start="549:34" pos:end="549:34">|</operator> <name pos:start="549:36" pos:end="549:40">rex_r</name></expr>;</expr_stmt>
        <expr_stmt pos:start="550:9" pos:end="550:54"><expr pos:start="550:9" pos:end="550:53"><call pos:start="550:9" pos:end="550:53"><name pos:start="550:9" pos:end="550:22">gen_ldst_modrm</name><argument_list pos:start="550:23" pos:end="550:53">(<argument pos:start="550:24" pos:end="550:26"><expr pos:start="550:24" pos:end="550:26"><name pos:start="550:24" pos:end="550:26">env</name></expr></argument>, <argument pos:start="550:29" pos:end="550:29"><expr pos:start="550:29" pos:end="550:29"><name pos:start="550:29" pos:end="550:29">s</name></expr></argument>, <argument pos:start="550:32" pos:end="550:36"><expr pos:start="550:32" pos:end="550:36"><name pos:start="550:32" pos:end="550:36">modrm</name></expr></argument>, <argument pos:start="550:39" pos:end="550:40"><expr pos:start="550:39" pos:end="550:40"><name pos:start="550:39" pos:end="550:40">ot</name></expr></argument>, <argument pos:start="550:43" pos:end="550:49"><expr pos:start="550:43" pos:end="550:49"><name pos:start="550:43" pos:end="550:49">OR_TMP0</name></expr></argument>, <argument pos:start="550:52" pos:end="550:52"><expr pos:start="550:52" pos:end="550:52"><literal type="number" pos:start="550:52" pos:end="550:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="551:9" pos:end="551:38"><expr pos:start="551:9" pos:end="551:37"><call pos:start="551:9" pos:end="551:37"><name pos:start="551:9" pos:end="551:25">gen_op_mov_TN_reg</name><argument_list pos:start="551:26" pos:end="551:37">(<argument pos:start="551:27" pos:end="551:28"><expr pos:start="551:27" pos:end="551:28"><name pos:start="551:27" pos:end="551:28">ot</name></expr></argument>, <argument pos:start="551:31" pos:end="551:31"><expr pos:start="551:31" pos:end="551:31"><literal type="number" pos:start="551:31" pos:end="551:31">1</literal></expr></argument>, <argument pos:start="551:34" pos:end="551:36"><expr pos:start="551:34" pos:end="551:36"><name pos:start="551:34" pos:end="551:36">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="552:9" pos:end="552:32"><expr pos:start="552:9" pos:end="552:31"><call pos:start="552:9" pos:end="552:31"><name pos:start="552:9" pos:end="552:29">gen_op_testl_T0_T1_cc</name><argument_list pos:start="552:30" pos:end="552:31">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="553:9" pos:end="553:40"><expr pos:start="553:9" pos:end="553:39"><call pos:start="553:9" pos:end="553:39"><name pos:start="553:9" pos:end="553:17">set_cc_op</name><argument_list pos:start="553:18" pos:end="553:39">(<argument pos:start="553:19" pos:end="553:19"><expr pos:start="553:19" pos:end="553:19"><name pos:start="553:19" pos:end="553:19">s</name></expr></argument>, <argument pos:start="553:22" pos:end="553:38"><expr pos:start="553:22" pos:end="553:38"><name pos:start="553:22" pos:end="553:33">CC_OP_LOGICB</name> <operator pos:start="553:35" pos:end="553:35">+</operator> <name pos:start="553:37" pos:end="553:38">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="554:9" pos:end="554:14">break;</break>
    <case pos:start="555:5" pos:end="555:14">case <expr pos:start="555:10" pos:end="555:13"><literal type="number" pos:start="555:10" pos:end="555:13">0xa8</literal></expr>:</case> <comment type="block" pos:start="555:16" pos:end="555:33">/* test eAX, Iv */</comment>
    <case pos:start="556:5" pos:end="556:14">case <expr pos:start="556:10" pos:end="556:13"><literal type="number" pos:start="556:10" pos:end="556:13">0xa9</literal></expr>:</case>
        <if_stmt pos:start="557:9" pos:end="560:33"><if pos:start="557:9" pos:end="558:25">if <condition pos:start="557:12" pos:end="557:25">(<expr pos:start="557:13" pos:end="557:24"><operator pos:start="557:13" pos:end="557:13">(</operator><name pos:start="557:14" pos:end="557:14">b</name> <operator pos:start="557:16" pos:end="557:16">&amp;</operator> <literal type="number" pos:start="557:18" pos:end="557:18">1</literal><operator pos:start="557:19" pos:end="557:19">)</operator> <operator pos:start="557:21" pos:end="557:22">==</operator> <literal type="number" pos:start="557:24" pos:end="557:24">0</literal></expr>)</condition><block type="pseudo" pos:start="558:13" pos:end="558:25"><block_content pos:start="558:13" pos:end="558:25">
            <expr_stmt pos:start="558:13" pos:end="558:25"><expr pos:start="558:13" pos:end="558:24"><name pos:start="558:13" pos:end="558:14">ot</name> <operator pos:start="558:16" pos:end="558:16">=</operator> <name pos:start="558:18" pos:end="558:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>
        <else pos:start="559:9" pos:end="560:33">else<block type="pseudo" pos:start="560:13" pos:end="560:33"><block_content pos:start="560:13" pos:end="560:33">
            <expr_stmt pos:start="560:13" pos:end="560:33"><expr pos:start="560:13" pos:end="560:32"><name pos:start="560:13" pos:end="560:14">ot</name> <operator pos:start="560:16" pos:end="560:16">=</operator> <name pos:start="560:18" pos:end="560:22">dflag</name> <operator pos:start="560:24" pos:end="560:24">+</operator> <name pos:start="560:26" pos:end="560:32">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt pos:start="561:9" pos:end="561:35"><expr pos:start="561:9" pos:end="561:34"><name pos:start="561:9" pos:end="561:11">val</name> <operator pos:start="561:13" pos:end="561:13">=</operator> <call pos:start="561:15" pos:end="561:34"><name pos:start="561:15" pos:end="561:22">insn_get</name><argument_list pos:start="561:23" pos:end="561:34">(<argument pos:start="561:24" pos:end="561:26"><expr pos:start="561:24" pos:end="561:26"><name pos:start="561:24" pos:end="561:26">env</name></expr></argument>, <argument pos:start="561:29" pos:end="561:29"><expr pos:start="561:29" pos:end="561:29"><name pos:start="561:29" pos:end="561:29">s</name></expr></argument>, <argument pos:start="561:32" pos:end="561:33"><expr pos:start="561:32" pos:end="561:33"><name pos:start="561:32" pos:end="561:33">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="562:9" pos:end="562:41"><expr pos:start="562:9" pos:end="562:40"><call pos:start="562:9" pos:end="562:40"><name pos:start="562:9" pos:end="562:25">gen_op_mov_TN_reg</name><argument_list pos:start="562:26" pos:end="562:40">(<argument pos:start="562:27" pos:end="562:28"><expr pos:start="562:27" pos:end="562:28"><name pos:start="562:27" pos:end="562:28">ot</name></expr></argument>, <argument pos:start="562:31" pos:end="562:31"><expr pos:start="562:31" pos:end="562:31"><literal type="number" pos:start="562:31" pos:end="562:31">0</literal></expr></argument>, <argument pos:start="562:34" pos:end="562:39"><expr pos:start="562:34" pos:end="562:39"><name pos:start="562:34" pos:end="562:39">OR_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="563:9" pos:end="563:31"><expr pos:start="563:9" pos:end="563:30"><call pos:start="563:9" pos:end="563:30"><name pos:start="563:9" pos:end="563:25">gen_op_movl_T1_im</name><argument_list pos:start="563:26" pos:end="563:30">(<argument pos:start="563:27" pos:end="563:29"><expr pos:start="563:27" pos:end="563:29"><name pos:start="563:27" pos:end="563:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="564:9" pos:end="564:32"><expr pos:start="564:9" pos:end="564:31"><call pos:start="564:9" pos:end="564:31"><name pos:start="564:9" pos:end="564:29">gen_op_testl_T0_T1_cc</name><argument_list pos:start="564:30" pos:end="564:31">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="565:9" pos:end="565:40"><expr pos:start="565:9" pos:end="565:39"><call pos:start="565:9" pos:end="565:39"><name pos:start="565:9" pos:end="565:17">set_cc_op</name><argument_list pos:start="565:18" pos:end="565:39">(<argument pos:start="565:19" pos:end="565:19"><expr pos:start="565:19" pos:end="565:19"><name pos:start="565:19" pos:end="565:19">s</name></expr></argument>, <argument pos:start="565:22" pos:end="565:38"><expr pos:start="565:22" pos:end="565:38"><name pos:start="565:22" pos:end="565:33">CC_OP_LOGICB</name> <operator pos:start="565:35" pos:end="565:35">+</operator> <name pos:start="565:37" pos:end="565:38">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="566:9" pos:end="566:14">break;</break>
    <case pos:start="567:5" pos:end="569:0">case <expr pos:start="567:10" pos:end="567:13"><literal type="number" pos:start="567:10" pos:end="567:13">0x98</literal></expr>:</case> <comment type="block" pos:start="567:16" pos:end="567:29">/* CWDE/CBW */</comment>
<cpp:ifdef pos:start="568:1" pos:end="568:20">#<cpp:directive pos:start="568:2" pos:end="568:6">ifdef</cpp:directive> <name pos:start="568:8" pos:end="568:20">TARGET_X86_64</name></cpp:ifdef>
        <if_stmt pos:start="569:9" pos:end="3141:17"><if pos:start="569:9" pos:end="573:9">if <condition pos:start="569:12" pos:end="569:23">(<expr pos:start="569:13" pos:end="569:22"><name pos:start="569:13" pos:end="569:17">dflag</name> <operator pos:start="569:19" pos:end="569:20">==</operator> <literal type="number" pos:start="569:22" pos:end="569:22">2</literal></expr>)</condition> <block pos:start="569:25" pos:end="573:9">{<block_content pos:start="570:13" pos:end="572:46">
            <expr_stmt pos:start="570:13" pos:end="570:49"><expr pos:start="570:13" pos:end="570:48"><call pos:start="570:13" pos:end="570:48"><name pos:start="570:13" pos:end="570:29">gen_op_mov_TN_reg</name><argument_list pos:start="570:30" pos:end="570:48">(<argument pos:start="570:31" pos:end="570:37"><expr pos:start="570:31" pos:end="570:37"><name pos:start="570:31" pos:end="570:37">OT_LONG</name></expr></argument>, <argument pos:start="570:40" pos:end="570:40"><expr pos:start="570:40" pos:end="570:40"><literal type="number" pos:start="570:40" pos:end="570:40">0</literal></expr></argument>, <argument pos:start="570:43" pos:end="570:47"><expr pos:start="570:43" pos:end="570:47"><name pos:start="570:43" pos:end="570:47">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="571:13" pos:end="571:50"><expr pos:start="571:13" pos:end="571:49"><call pos:start="571:13" pos:end="571:49"><name pos:start="571:13" pos:end="571:29">tcg_gen_ext32s_tl</name><argument_list pos:start="571:30" pos:end="571:49">(<argument pos:start="571:31" pos:end="571:38"><expr pos:start="571:31" pos:end="571:38"><name pos:start="571:31" pos:end="571:38"><name pos:start="571:31" pos:end="571:35">cpu_T</name><index pos:start="571:36" pos:end="571:38">[<expr pos:start="571:37" pos:end="571:37"><literal type="number" pos:start="571:37" pos:end="571:37">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="571:41" pos:end="571:48"><expr pos:start="571:41" pos:end="571:48"><name pos:start="571:41" pos:end="571:48"><name pos:start="571:41" pos:end="571:45">cpu_T</name><index pos:start="571:46" pos:end="571:48">[<expr pos:start="571:47" pos:end="571:47"><literal type="number" pos:start="571:47" pos:end="571:47">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="572:13" pos:end="572:46"><expr pos:start="572:13" pos:end="572:45"><call pos:start="572:13" pos:end="572:45"><name pos:start="572:13" pos:end="572:29">gen_op_mov_reg_T0</name><argument_list pos:start="572:30" pos:end="572:45">(<argument pos:start="572:31" pos:end="572:37"><expr pos:start="572:31" pos:end="572:37"><name pos:start="572:31" pos:end="572:37">OT_QUAD</name></expr></argument>, <argument pos:start="572:40" pos:end="572:44"><expr pos:start="572:40" pos:end="572:44"><name pos:start="572:40" pos:end="572:44">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="573:11" pos:end="579:9">else
<cpp:endif pos:start="574:1" pos:end="574:6">#<cpp:directive pos:start="574:2" pos:end="574:6">endif</cpp:directive></cpp:endif>
        if <condition pos:start="575:12" pos:end="575:23">(<expr pos:start="575:13" pos:end="575:22"><name pos:start="575:13" pos:end="575:17">dflag</name> <operator pos:start="575:19" pos:end="575:20">==</operator> <literal type="number" pos:start="575:22" pos:end="575:22">1</literal></expr>)</condition> <block pos:start="575:25" pos:end="579:9">{<block_content pos:start="576:13" pos:end="578:46">
            <expr_stmt pos:start="576:13" pos:end="576:49"><expr pos:start="576:13" pos:end="576:48"><call pos:start="576:13" pos:end="576:48"><name pos:start="576:13" pos:end="576:29">gen_op_mov_TN_reg</name><argument_list pos:start="576:30" pos:end="576:48">(<argument pos:start="576:31" pos:end="576:37"><expr pos:start="576:31" pos:end="576:37"><name pos:start="576:31" pos:end="576:37">OT_WORD</name></expr></argument>, <argument pos:start="576:40" pos:end="576:40"><expr pos:start="576:40" pos:end="576:40"><literal type="number" pos:start="576:40" pos:end="576:40">0</literal></expr></argument>, <argument pos:start="576:43" pos:end="576:47"><expr pos:start="576:43" pos:end="576:47"><name pos:start="576:43" pos:end="576:47">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="577:13" pos:end="577:50"><expr pos:start="577:13" pos:end="577:49"><call pos:start="577:13" pos:end="577:49"><name pos:start="577:13" pos:end="577:29">tcg_gen_ext16s_tl</name><argument_list pos:start="577:30" pos:end="577:49">(<argument pos:start="577:31" pos:end="577:38"><expr pos:start="577:31" pos:end="577:38"><name pos:start="577:31" pos:end="577:38"><name pos:start="577:31" pos:end="577:35">cpu_T</name><index pos:start="577:36" pos:end="577:38">[<expr pos:start="577:37" pos:end="577:37"><literal type="number" pos:start="577:37" pos:end="577:37">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="577:41" pos:end="577:48"><expr pos:start="577:41" pos:end="577:48"><name pos:start="577:41" pos:end="577:48"><name pos:start="577:41" pos:end="577:45">cpu_T</name><index pos:start="577:46" pos:end="577:48">[<expr pos:start="577:47" pos:end="577:47"><literal type="number" pos:start="577:47" pos:end="577:47">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="578:13" pos:end="578:46"><expr pos:start="578:13" pos:end="578:45"><call pos:start="578:13" pos:end="578:45"><name pos:start="578:13" pos:end="578:29">gen_op_mov_reg_T0</name><argument_list pos:start="578:30" pos:end="578:45">(<argument pos:start="578:31" pos:end="578:37"><expr pos:start="578:31" pos:end="578:37"><name pos:start="578:31" pos:end="578:37">OT_LONG</name></expr></argument>, <argument pos:start="578:40" pos:end="578:44"><expr pos:start="578:40" pos:end="578:44"><name pos:start="578:40" pos:end="578:44">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="579:11" pos:end="3141:17">else <block pos:start="579:16" pos:end="3141:17">{<block_content pos:start="580:13" pos:end="3141:17">
            <expr_stmt pos:start="580:13" pos:end="580:49"><expr pos:start="580:13" pos:end="580:48"><call pos:start="580:13" pos:end="580:48"><name pos:start="580:13" pos:end="580:29">gen_op_mov_TN_reg</name><argument_list pos:start="580:30" pos:end="580:48">(<argument pos:start="580:31" pos:end="580:37"><expr pos:start="580:31" pos:end="580:37"><name pos:start="580:31" pos:end="580:37">OT_BYTE</name></expr></argument>, <argument pos:start="580:40" pos:end="580:40"><expr pos:start="580:40" pos:end="580:40"><literal type="number" pos:start="580:40" pos:end="580:40">0</literal></expr></argument>, <argument pos:start="580:43" pos:end="580:47"><expr pos:start="580:43" pos:end="580:47"><name pos:start="580:43" pos:end="580:47">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="581:13" pos:end="581:49"><expr pos:start="581:13" pos:end="581:48"><call pos:start="581:13" pos:end="581:48"><name pos:start="581:13" pos:end="581:28">tcg_gen_ext8s_tl</name><argument_list pos:start="581:29" pos:end="581:48">(<argument pos:start="581:30" pos:end="581:37"><expr pos:start="581:30" pos:end="581:37"><name pos:start="581:30" pos:end="581:37"><name pos:start="581:30" pos:end="581:34">cpu_T</name><index pos:start="581:35" pos:end="581:37">[<expr pos:start="581:36" pos:end="581:36"><literal type="number" pos:start="581:36" pos:end="581:36">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="581:40" pos:end="581:47"><expr pos:start="581:40" pos:end="581:47"><name pos:start="581:40" pos:end="581:47"><name pos:start="581:40" pos:end="581:44">cpu_T</name><index pos:start="581:45" pos:end="581:47">[<expr pos:start="581:46" pos:end="581:46"><literal type="number" pos:start="581:46" pos:end="581:46">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="582:13" pos:end="582:46"><expr pos:start="582:13" pos:end="582:45"><call pos:start="582:13" pos:end="582:45"><name pos:start="582:13" pos:end="582:29">gen_op_mov_reg_T0</name><argument_list pos:start="582:30" pos:end="582:45">(<argument pos:start="582:31" pos:end="582:37"><expr pos:start="582:31" pos:end="582:37"><name pos:start="582:31" pos:end="582:37">OT_WORD</name></expr></argument>, <argument pos:start="582:40" pos:end="582:44"><expr pos:start="582:40" pos:end="582:44"><name pos:start="582:40" pos:end="582:44">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="583:9" pos:end="583:14">break;</break>
    <case pos:start="584:5" pos:end="586:0">case <expr pos:start="584:10" pos:end="584:13"><literal type="number" pos:start="584:10" pos:end="584:13">0x99</literal></expr>:</case> <comment type="block" pos:start="584:16" pos:end="584:28">/* CDQ/CWD */</comment>
<cpp:ifdef pos:start="585:1" pos:end="585:20">#<cpp:directive pos:start="585:2" pos:end="585:6">ifdef</cpp:directive> <name pos:start="585:8" pos:end="585:20">TARGET_X86_64</name></cpp:ifdef>
        <if_stmt pos:start="586:9" pos:end="3141:17"><if pos:start="586:9" pos:end="590:9">if <condition pos:start="586:12" pos:end="586:23">(<expr pos:start="586:13" pos:end="586:22"><name pos:start="586:13" pos:end="586:17">dflag</name> <operator pos:start="586:19" pos:end="586:20">==</operator> <literal type="number" pos:start="586:22" pos:end="586:22">2</literal></expr>)</condition> <block pos:start="586:25" pos:end="590:9">{<block_content pos:start="587:13" pos:end="589:46">
            <expr_stmt pos:start="587:13" pos:end="587:49"><expr pos:start="587:13" pos:end="587:48"><call pos:start="587:13" pos:end="587:48"><name pos:start="587:13" pos:end="587:29">gen_op_mov_TN_reg</name><argument_list pos:start="587:30" pos:end="587:48">(<argument pos:start="587:31" pos:end="587:37"><expr pos:start="587:31" pos:end="587:37"><name pos:start="587:31" pos:end="587:37">OT_QUAD</name></expr></argument>, <argument pos:start="587:40" pos:end="587:40"><expr pos:start="587:40" pos:end="587:40"><literal type="number" pos:start="587:40" pos:end="587:40">0</literal></expr></argument>, <argument pos:start="587:43" pos:end="587:47"><expr pos:start="587:43" pos:end="587:47"><name pos:start="587:43" pos:end="587:47">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="588:13" pos:end="588:52"><expr pos:start="588:13" pos:end="588:51"><call pos:start="588:13" pos:end="588:51"><name pos:start="588:13" pos:end="588:27">tcg_gen_sari_tl</name><argument_list pos:start="588:28" pos:end="588:51">(<argument pos:start="588:29" pos:end="588:36"><expr pos:start="588:29" pos:end="588:36"><name pos:start="588:29" pos:end="588:36"><name pos:start="588:29" pos:end="588:33">cpu_T</name><index pos:start="588:34" pos:end="588:36">[<expr pos:start="588:35" pos:end="588:35"><literal type="number" pos:start="588:35" pos:end="588:35">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="588:39" pos:end="588:46"><expr pos:start="588:39" pos:end="588:46"><name pos:start="588:39" pos:end="588:46"><name pos:start="588:39" pos:end="588:43">cpu_T</name><index pos:start="588:44" pos:end="588:46">[<expr pos:start="588:45" pos:end="588:45"><literal type="number" pos:start="588:45" pos:end="588:45">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="588:49" pos:end="588:50"><expr pos:start="588:49" pos:end="588:50"><literal type="number" pos:start="588:49" pos:end="588:50">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="589:13" pos:end="589:46"><expr pos:start="589:13" pos:end="589:45"><call pos:start="589:13" pos:end="589:45"><name pos:start="589:13" pos:end="589:29">gen_op_mov_reg_T0</name><argument_list pos:start="589:30" pos:end="589:45">(<argument pos:start="589:31" pos:end="589:37"><expr pos:start="589:31" pos:end="589:37"><name pos:start="589:31" pos:end="589:37">OT_QUAD</name></expr></argument>, <argument pos:start="589:40" pos:end="589:44"><expr pos:start="589:40" pos:end="589:44"><name pos:start="589:40" pos:end="589:44">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="590:11" pos:end="597:9">else
<cpp:endif pos:start="591:1" pos:end="591:6">#<cpp:directive pos:start="591:2" pos:end="591:6">endif</cpp:directive></cpp:endif>
        if <condition pos:start="592:12" pos:end="592:23">(<expr pos:start="592:13" pos:end="592:22"><name pos:start="592:13" pos:end="592:17">dflag</name> <operator pos:start="592:19" pos:end="592:20">==</operator> <literal type="number" pos:start="592:22" pos:end="592:22">1</literal></expr>)</condition> <block pos:start="592:25" pos:end="597:9">{<block_content pos:start="593:13" pos:end="596:46">
            <expr_stmt pos:start="593:13" pos:end="593:49"><expr pos:start="593:13" pos:end="593:48"><call pos:start="593:13" pos:end="593:48"><name pos:start="593:13" pos:end="593:29">gen_op_mov_TN_reg</name><argument_list pos:start="593:30" pos:end="593:48">(<argument pos:start="593:31" pos:end="593:37"><expr pos:start="593:31" pos:end="593:37"><name pos:start="593:31" pos:end="593:37">OT_LONG</name></expr></argument>, <argument pos:start="593:40" pos:end="593:40"><expr pos:start="593:40" pos:end="593:40"><literal type="number" pos:start="593:40" pos:end="593:40">0</literal></expr></argument>, <argument pos:start="593:43" pos:end="593:47"><expr pos:start="593:43" pos:end="593:47"><name pos:start="593:43" pos:end="593:47">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="594:13" pos:end="594:50"><expr pos:start="594:13" pos:end="594:49"><call pos:start="594:13" pos:end="594:49"><name pos:start="594:13" pos:end="594:29">tcg_gen_ext32s_tl</name><argument_list pos:start="594:30" pos:end="594:49">(<argument pos:start="594:31" pos:end="594:38"><expr pos:start="594:31" pos:end="594:38"><name pos:start="594:31" pos:end="594:38"><name pos:start="594:31" pos:end="594:35">cpu_T</name><index pos:start="594:36" pos:end="594:38">[<expr pos:start="594:37" pos:end="594:37"><literal type="number" pos:start="594:37" pos:end="594:37">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="594:41" pos:end="594:48"><expr pos:start="594:41" pos:end="594:48"><name pos:start="594:41" pos:end="594:48"><name pos:start="594:41" pos:end="594:45">cpu_T</name><index pos:start="594:46" pos:end="594:48">[<expr pos:start="594:47" pos:end="594:47"><literal type="number" pos:start="594:47" pos:end="594:47">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="595:13" pos:end="595:52"><expr pos:start="595:13" pos:end="595:51"><call pos:start="595:13" pos:end="595:51"><name pos:start="595:13" pos:end="595:27">tcg_gen_sari_tl</name><argument_list pos:start="595:28" pos:end="595:51">(<argument pos:start="595:29" pos:end="595:36"><expr pos:start="595:29" pos:end="595:36"><name pos:start="595:29" pos:end="595:36"><name pos:start="595:29" pos:end="595:33">cpu_T</name><index pos:start="595:34" pos:end="595:36">[<expr pos:start="595:35" pos:end="595:35"><literal type="number" pos:start="595:35" pos:end="595:35">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="595:39" pos:end="595:46"><expr pos:start="595:39" pos:end="595:46"><name pos:start="595:39" pos:end="595:46"><name pos:start="595:39" pos:end="595:43">cpu_T</name><index pos:start="595:44" pos:end="595:46">[<expr pos:start="595:45" pos:end="595:45"><literal type="number" pos:start="595:45" pos:end="595:45">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="595:49" pos:end="595:50"><expr pos:start="595:49" pos:end="595:50"><literal type="number" pos:start="595:49" pos:end="595:50">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="596:13" pos:end="596:46"><expr pos:start="596:13" pos:end="596:45"><call pos:start="596:13" pos:end="596:45"><name pos:start="596:13" pos:end="596:29">gen_op_mov_reg_T0</name><argument_list pos:start="596:30" pos:end="596:45">(<argument pos:start="596:31" pos:end="596:37"><expr pos:start="596:31" pos:end="596:37"><name pos:start="596:31" pos:end="596:37">OT_LONG</name></expr></argument>, <argument pos:start="596:40" pos:end="596:44"><expr pos:start="596:40" pos:end="596:44"><name pos:start="596:40" pos:end="596:44">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="597:11" pos:end="3141:17">else <block pos:start="597:16" pos:end="3141:17">{<block_content pos:start="598:13" pos:end="3141:17">
            <expr_stmt pos:start="598:13" pos:end="598:49"><expr pos:start="598:13" pos:end="598:48"><call pos:start="598:13" pos:end="598:48"><name pos:start="598:13" pos:end="598:29">gen_op_mov_TN_reg</name><argument_list pos:start="598:30" pos:end="598:48">(<argument pos:start="598:31" pos:end="598:37"><expr pos:start="598:31" pos:end="598:37"><name pos:start="598:31" pos:end="598:37">OT_WORD</name></expr></argument>, <argument pos:start="598:40" pos:end="598:40"><expr pos:start="598:40" pos:end="598:40"><literal type="number" pos:start="598:40" pos:end="598:40">0</literal></expr></argument>, <argument pos:start="598:43" pos:end="598:47"><expr pos:start="598:43" pos:end="598:47"><name pos:start="598:43" pos:end="598:47">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="599:13" pos:end="599:50"><expr pos:start="599:13" pos:end="599:49"><call pos:start="599:13" pos:end="599:49"><name pos:start="599:13" pos:end="599:29">tcg_gen_ext16s_tl</name><argument_list pos:start="599:30" pos:end="599:49">(<argument pos:start="599:31" pos:end="599:38"><expr pos:start="599:31" pos:end="599:38"><name pos:start="599:31" pos:end="599:38"><name pos:start="599:31" pos:end="599:35">cpu_T</name><index pos:start="599:36" pos:end="599:38">[<expr pos:start="599:37" pos:end="599:37"><literal type="number" pos:start="599:37" pos:end="599:37">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="599:41" pos:end="599:48"><expr pos:start="599:41" pos:end="599:48"><name pos:start="599:41" pos:end="599:48"><name pos:start="599:41" pos:end="599:45">cpu_T</name><index pos:start="599:46" pos:end="599:48">[<expr pos:start="599:47" pos:end="599:47"><literal type="number" pos:start="599:47" pos:end="599:47">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="600:13" pos:end="600:52"><expr pos:start="600:13" pos:end="600:51"><call pos:start="600:13" pos:end="600:51"><name pos:start="600:13" pos:end="600:27">tcg_gen_sari_tl</name><argument_list pos:start="600:28" pos:end="600:51">(<argument pos:start="600:29" pos:end="600:36"><expr pos:start="600:29" pos:end="600:36"><name pos:start="600:29" pos:end="600:36"><name pos:start="600:29" pos:end="600:33">cpu_T</name><index pos:start="600:34" pos:end="600:36">[<expr pos:start="600:35" pos:end="600:35"><literal type="number" pos:start="600:35" pos:end="600:35">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="600:39" pos:end="600:46"><expr pos:start="600:39" pos:end="600:46"><name pos:start="600:39" pos:end="600:46"><name pos:start="600:39" pos:end="600:43">cpu_T</name><index pos:start="600:44" pos:end="600:46">[<expr pos:start="600:45" pos:end="600:45"><literal type="number" pos:start="600:45" pos:end="600:45">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="600:49" pos:end="600:50"><expr pos:start="600:49" pos:end="600:50"><literal type="number" pos:start="600:49" pos:end="600:50">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="601:13" pos:end="601:46"><expr pos:start="601:13" pos:end="601:45"><call pos:start="601:13" pos:end="601:45"><name pos:start="601:13" pos:end="601:29">gen_op_mov_reg_T0</name><argument_list pos:start="601:30" pos:end="601:45">(<argument pos:start="601:31" pos:end="601:37"><expr pos:start="601:31" pos:end="601:37"><name pos:start="601:31" pos:end="601:37">OT_WORD</name></expr></argument>, <argument pos:start="601:40" pos:end="601:44"><expr pos:start="601:40" pos:end="601:44"><name pos:start="601:40" pos:end="601:44">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="602:9" pos:end="602:14">break;</break>
    <case pos:start="603:5" pos:end="603:15">case <expr pos:start="603:10" pos:end="603:14"><literal type="number" pos:start="603:10" pos:end="603:14">0x1af</literal></expr>:</case> <comment type="block" pos:start="603:17" pos:end="603:33">/* imul Gv, Ev */</comment>
    <case pos:start="604:5" pos:end="604:14">case <expr pos:start="604:10" pos:end="604:13"><literal type="number" pos:start="604:10" pos:end="604:13">0x69</literal></expr>:</case> <comment type="block" pos:start="604:16" pos:end="604:35">/* imul Gv, Ev, I */</comment>
    <case pos:start="605:5" pos:end="605:14">case <expr pos:start="605:10" pos:end="605:13"><literal type="number" pos:start="605:10" pos:end="605:13">0x6b</literal></expr>:</case>
        <expr_stmt pos:start="606:9" pos:end="606:29"><expr pos:start="606:9" pos:end="606:28"><name pos:start="606:9" pos:end="606:10">ot</name> <operator pos:start="606:12" pos:end="606:12">=</operator> <name pos:start="606:14" pos:end="606:18">dflag</name> <operator pos:start="606:20" pos:end="606:20">+</operator> <name pos:start="606:22" pos:end="606:28">OT_WORD</name></expr>;</expr_stmt>
        <expr_stmt pos:start="607:9" pos:end="607:44"><expr pos:start="607:9" pos:end="607:43"><name pos:start="607:9" pos:end="607:13">modrm</name> <operator pos:start="607:15" pos:end="607:15">=</operator> <call pos:start="607:17" pos:end="607:43"><name pos:start="607:17" pos:end="607:29">cpu_ldub_code</name><argument_list pos:start="607:30" pos:end="607:43">(<argument pos:start="607:31" pos:end="607:33"><expr pos:start="607:31" pos:end="607:33"><name pos:start="607:31" pos:end="607:33">env</name></expr></argument>, <argument pos:start="607:36" pos:end="607:42"><expr pos:start="607:36" pos:end="607:42"><name pos:start="607:36" pos:end="607:40"><name pos:start="607:36" pos:end="607:36">s</name><operator pos:start="607:37" pos:end="607:38">-&gt;</operator><name pos:start="607:39" pos:end="607:40">pc</name></name><operator pos:start="607:41" pos:end="607:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="608:9" pos:end="608:41"><expr pos:start="608:9" pos:end="608:40"><name pos:start="608:9" pos:end="608:11">reg</name> <operator pos:start="608:13" pos:end="608:13">=</operator> <operator pos:start="608:15" pos:end="608:15">(</operator><operator pos:start="608:16" pos:end="608:16">(</operator><name pos:start="608:17" pos:end="608:21">modrm</name> <operator pos:start="608:23" pos:end="608:24">&gt;&gt;</operator> <literal type="number" pos:start="608:26" pos:end="608:26">3</literal><operator pos:start="608:27" pos:end="608:27">)</operator> <operator pos:start="608:29" pos:end="608:29">&amp;</operator> <literal type="number" pos:start="608:31" pos:end="608:31">7</literal><operator pos:start="608:32" pos:end="608:32">)</operator> <operator pos:start="608:34" pos:end="608:34">|</operator> <name pos:start="608:36" pos:end="608:40">rex_r</name></expr>;</expr_stmt>
        <if_stmt pos:start="609:9" pos:end="612:30"><if pos:start="609:9" pos:end="610:48">if <condition pos:start="609:12" pos:end="609:22">(<expr pos:start="609:13" pos:end="609:21"><name pos:start="609:13" pos:end="609:13">b</name> <operator pos:start="609:15" pos:end="609:16">==</operator> <literal type="number" pos:start="609:18" pos:end="609:21">0x69</literal></expr>)</condition><block type="pseudo" pos:start="610:13" pos:end="610:48"><block_content pos:start="610:13" pos:end="610:48">
            <expr_stmt pos:start="610:13" pos:end="610:48"><expr pos:start="610:13" pos:end="610:47"><name pos:start="610:13" pos:end="610:25"><name pos:start="610:13" pos:end="610:13">s</name><operator pos:start="610:14" pos:end="610:15">-&gt;</operator><name pos:start="610:16" pos:end="610:25">rip_offset</name></name> <operator pos:start="610:27" pos:end="610:27">=</operator> <call pos:start="610:29" pos:end="610:47"><name pos:start="610:29" pos:end="610:43">insn_const_size</name><argument_list pos:start="610:44" pos:end="610:47">(<argument pos:start="610:45" pos:end="610:46"><expr pos:start="610:45" pos:end="610:46"><name pos:start="610:45" pos:end="610:46">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif" pos:start="611:9" pos:end="612:30">else if <condition pos:start="611:17" pos:end="611:27">(<expr pos:start="611:18" pos:end="611:26"><name pos:start="611:18" pos:end="611:18">b</name> <operator pos:start="611:20" pos:end="611:21">==</operator> <literal type="number" pos:start="611:23" pos:end="611:26">0x6b</literal></expr>)</condition><block type="pseudo" pos:start="612:13" pos:end="612:30"><block_content pos:start="612:13" pos:end="612:30">
            <expr_stmt pos:start="612:13" pos:end="612:30"><expr pos:start="612:13" pos:end="612:29"><name pos:start="612:13" pos:end="612:25"><name pos:start="612:13" pos:end="612:13">s</name><operator pos:start="612:14" pos:end="612:15">-&gt;</operator><name pos:start="612:16" pos:end="612:25">rip_offset</name></name> <operator pos:start="612:27" pos:end="612:27">=</operator> <literal type="number" pos:start="612:29" pos:end="612:29">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="613:9" pos:end="613:54"><expr pos:start="613:9" pos:end="613:53"><call pos:start="613:9" pos:end="613:53"><name pos:start="613:9" pos:end="613:22">gen_ldst_modrm</name><argument_list pos:start="613:23" pos:end="613:53">(<argument pos:start="613:24" pos:end="613:26"><expr pos:start="613:24" pos:end="613:26"><name pos:start="613:24" pos:end="613:26">env</name></expr></argument>, <argument pos:start="613:29" pos:end="613:29"><expr pos:start="613:29" pos:end="613:29"><name pos:start="613:29" pos:end="613:29">s</name></expr></argument>, <argument pos:start="613:32" pos:end="613:36"><expr pos:start="613:32" pos:end="613:36"><name pos:start="613:32" pos:end="613:36">modrm</name></expr></argument>, <argument pos:start="613:39" pos:end="613:40"><expr pos:start="613:39" pos:end="613:40"><name pos:start="613:39" pos:end="613:40">ot</name></expr></argument>, <argument pos:start="613:43" pos:end="613:49"><expr pos:start="613:43" pos:end="613:49"><name pos:start="613:43" pos:end="613:49">OR_TMP0</name></expr></argument>, <argument pos:start="613:52" pos:end="613:52"><expr pos:start="613:52" pos:end="613:52"><literal type="number" pos:start="613:52" pos:end="613:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="614:9" pos:end="3141:17"><if pos:start="614:9" pos:end="617:9">if <condition pos:start="614:12" pos:end="614:22">(<expr pos:start="614:13" pos:end="614:21"><name pos:start="614:13" pos:end="614:13">b</name> <operator pos:start="614:15" pos:end="614:16">==</operator> <literal type="number" pos:start="614:18" pos:end="614:21">0x69</literal></expr>)</condition> <block pos:start="614:24" pos:end="617:9">{<block_content pos:start="615:13" pos:end="616:35">
            <expr_stmt pos:start="615:13" pos:end="615:39"><expr pos:start="615:13" pos:end="615:38"><name pos:start="615:13" pos:end="615:15">val</name> <operator pos:start="615:17" pos:end="615:17">=</operator> <call pos:start="615:19" pos:end="615:38"><name pos:start="615:19" pos:end="615:26">insn_get</name><argument_list pos:start="615:27" pos:end="615:38">(<argument pos:start="615:28" pos:end="615:30"><expr pos:start="615:28" pos:end="615:30"><name pos:start="615:28" pos:end="615:30">env</name></expr></argument>, <argument pos:start="615:33" pos:end="615:33"><expr pos:start="615:33" pos:end="615:33"><name pos:start="615:33" pos:end="615:33">s</name></expr></argument>, <argument pos:start="615:36" pos:end="615:37"><expr pos:start="615:36" pos:end="615:37"><name pos:start="615:36" pos:end="615:37">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="616:13" pos:end="616:35"><expr pos:start="616:13" pos:end="616:34"><call pos:start="616:13" pos:end="616:34"><name pos:start="616:13" pos:end="616:29">gen_op_movl_T1_im</name><argument_list pos:start="616:30" pos:end="616:34">(<argument pos:start="616:31" pos:end="616:33"><expr pos:start="616:31" pos:end="616:33"><name pos:start="616:31" pos:end="616:33">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="617:11" pos:end="620:9">else if <condition pos:start="617:19" pos:end="617:29">(<expr pos:start="617:20" pos:end="617:28"><name pos:start="617:20" pos:end="617:20">b</name> <operator pos:start="617:22" pos:end="617:23">==</operator> <literal type="number" pos:start="617:25" pos:end="617:28">0x6b</literal></expr>)</condition> <block pos:start="617:31" pos:end="620:9">{<block_content pos:start="618:13" pos:end="619:35">
            <expr_stmt pos:start="618:13" pos:end="618:52"><expr pos:start="618:13" pos:end="618:51"><name pos:start="618:13" pos:end="618:15">val</name> <operator pos:start="618:17" pos:end="618:17">=</operator> <operator pos:start="618:19" pos:end="618:19">(</operator><name pos:start="618:20" pos:end="618:25">int8_t</name><operator pos:start="618:26" pos:end="618:26">)</operator><call pos:start="618:27" pos:end="618:51"><name pos:start="618:27" pos:end="618:34">insn_get</name><argument_list pos:start="618:35" pos:end="618:51">(<argument pos:start="618:36" pos:end="618:38"><expr pos:start="618:36" pos:end="618:38"><name pos:start="618:36" pos:end="618:38">env</name></expr></argument>, <argument pos:start="618:41" pos:end="618:41"><expr pos:start="618:41" pos:end="618:41"><name pos:start="618:41" pos:end="618:41">s</name></expr></argument>, <argument pos:start="618:44" pos:end="618:50"><expr pos:start="618:44" pos:end="618:50"><name pos:start="618:44" pos:end="618:50">OT_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="619:13" pos:end="619:35"><expr pos:start="619:13" pos:end="619:34"><call pos:start="619:13" pos:end="619:34"><name pos:start="619:13" pos:end="619:29">gen_op_movl_T1_im</name><argument_list pos:start="619:30" pos:end="619:34">(<argument pos:start="619:31" pos:end="619:33"><expr pos:start="619:31" pos:end="619:33"><name pos:start="619:31" pos:end="619:33">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="620:11" pos:end="3141:17">else <block pos:start="620:16" pos:end="3141:17">{<block_content pos:start="621:13" pos:end="3141:17">
            <expr_stmt pos:start="621:13" pos:end="621:42"><expr pos:start="621:13" pos:end="621:41"><call pos:start="621:13" pos:end="621:41"><name pos:start="621:13" pos:end="621:29">gen_op_mov_TN_reg</name><argument_list pos:start="621:30" pos:end="621:41">(<argument pos:start="621:31" pos:end="621:32"><expr pos:start="621:31" pos:end="621:32"><name pos:start="621:31" pos:end="621:32">ot</name></expr></argument>, <argument pos:start="621:35" pos:end="621:35"><expr pos:start="621:35" pos:end="621:35"><literal type="number" pos:start="621:35" pos:end="621:35">1</literal></expr></argument>, <argument pos:start="621:38" pos:end="621:40"><expr pos:start="621:38" pos:end="621:40"><name pos:start="621:38" pos:end="621:40">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <switch pos:start="622:9" pos:end="3141:17">switch <condition pos:start="622:16" pos:end="622:19">(<expr pos:start="622:17" pos:end="622:18"><name pos:start="622:17" pos:end="622:18">ot</name></expr>)</condition> <block pos:start="622:21" pos:end="3141:17">{<block_content pos:start="624:9" pos:end="3141:17">
<cpp:ifdef pos:start="623:1" pos:end="623:20">#<cpp:directive pos:start="623:2" pos:end="623:6">ifdef</cpp:directive> <name pos:start="623:8" pos:end="623:20">TARGET_X86_64</name></cpp:ifdef>
        <case pos:start="624:9" pos:end="624:21">case <expr pos:start="624:14" pos:end="624:20"><name pos:start="624:14" pos:end="624:20">OT_QUAD</name></expr>:</case>
            <expr_stmt pos:start="625:13" pos:end="625:75"><expr pos:start="625:13" pos:end="625:74"><call pos:start="625:13" pos:end="625:74"><name pos:start="625:13" pos:end="625:29">tcg_gen_muls2_i64</name><argument_list pos:start="625:30" pos:end="625:74">(<argument pos:start="625:31" pos:end="625:43"><expr pos:start="625:31" pos:end="625:43"><name pos:start="625:31" pos:end="625:43"><name pos:start="625:31" pos:end="625:38">cpu_regs</name><index pos:start="625:39" pos:end="625:43">[<expr pos:start="625:40" pos:end="625:42"><name pos:start="625:40" pos:end="625:42">reg</name></expr>]</index></name></expr></argument>, <argument pos:start="625:46" pos:end="625:53"><expr pos:start="625:46" pos:end="625:53"><name pos:start="625:46" pos:end="625:53"><name pos:start="625:46" pos:end="625:50">cpu_T</name><index pos:start="625:51" pos:end="625:53">[<expr pos:start="625:52" pos:end="625:52"><literal type="number" pos:start="625:52" pos:end="625:52">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="625:56" pos:end="625:63"><expr pos:start="625:56" pos:end="625:63"><name pos:start="625:56" pos:end="625:63"><name pos:start="625:56" pos:end="625:60">cpu_T</name><index pos:start="625:61" pos:end="625:63">[<expr pos:start="625:62" pos:end="625:62"><literal type="number" pos:start="625:62" pos:end="625:62">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="625:66" pos:end="625:73"><expr pos:start="625:66" pos:end="625:73"><name pos:start="625:66" pos:end="625:73"><name pos:start="625:66" pos:end="625:70">cpu_T</name><index pos:start="625:71" pos:end="625:73">[<expr pos:start="625:72" pos:end="625:72"><literal type="number" pos:start="625:72" pos:end="625:72">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="626:13" pos:end="626:54"><expr pos:start="626:13" pos:end="626:53"><call pos:start="626:13" pos:end="626:53"><name pos:start="626:13" pos:end="626:26">tcg_gen_mov_tl</name><argument_list pos:start="626:27" pos:end="626:53">(<argument pos:start="626:28" pos:end="626:37"><expr pos:start="626:28" pos:end="626:37"><name pos:start="626:28" pos:end="626:37">cpu_cc_dst</name></expr></argument>, <argument pos:start="626:40" pos:end="626:52"><expr pos:start="626:40" pos:end="626:52"><name pos:start="626:40" pos:end="626:52"><name pos:start="626:40" pos:end="626:47">cpu_regs</name><index pos:start="626:48" pos:end="626:52">[<expr pos:start="626:49" pos:end="626:51"><name pos:start="626:49" pos:end="626:51">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="627:13" pos:end="627:56"><expr pos:start="627:13" pos:end="627:55"><call pos:start="627:13" pos:end="627:55"><name pos:start="627:13" pos:end="627:27">tcg_gen_sari_tl</name><argument_list pos:start="627:28" pos:end="627:55">(<argument pos:start="627:29" pos:end="627:38"><expr pos:start="627:29" pos:end="627:38"><name pos:start="627:29" pos:end="627:38">cpu_cc_src</name></expr></argument>, <argument pos:start="627:41" pos:end="627:50"><expr pos:start="627:41" pos:end="627:50"><name pos:start="627:41" pos:end="627:50">cpu_cc_dst</name></expr></argument>, <argument pos:start="627:53" pos:end="627:54"><expr pos:start="627:53" pos:end="627:54"><literal type="number" pos:start="627:53" pos:end="627:54">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="628:13" pos:end="628:61"><expr pos:start="628:13" pos:end="628:60"><call pos:start="628:13" pos:end="628:60"><name pos:start="628:13" pos:end="628:26">tcg_gen_sub_tl</name><argument_list pos:start="628:27" pos:end="628:60">(<argument pos:start="628:28" pos:end="628:37"><expr pos:start="628:28" pos:end="628:37"><name pos:start="628:28" pos:end="628:37">cpu_cc_src</name></expr></argument>, <argument pos:start="628:40" pos:end="628:49"><expr pos:start="628:40" pos:end="628:49"><name pos:start="628:40" pos:end="628:49">cpu_cc_src</name></expr></argument>, <argument pos:start="628:52" pos:end="628:59"><expr pos:start="628:52" pos:end="628:59"><name pos:start="628:52" pos:end="628:59"><name pos:start="628:52" pos:end="628:56">cpu_T</name><index pos:start="628:57" pos:end="628:59">[<expr pos:start="628:58" pos:end="628:58"><literal type="number" pos:start="628:58" pos:end="628:58">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="629:13" pos:end="631:0">break;</break>
<cpp:endif pos:start="630:1" pos:end="630:6">#<cpp:directive pos:start="630:2" pos:end="630:6">endif</cpp:directive></cpp:endif>
        <case pos:start="631:9" pos:end="631:21">case <expr pos:start="631:14" pos:end="631:20"><name pos:start="631:14" pos:end="631:20">OT_LONG</name></expr>:</case>
            <expr_stmt pos:start="632:13" pos:end="632:57"><expr pos:start="632:13" pos:end="632:56"><call pos:start="632:13" pos:end="632:56"><name pos:start="632:13" pos:end="632:32">tcg_gen_trunc_tl_i32</name><argument_list pos:start="632:33" pos:end="632:56">(<argument pos:start="632:34" pos:end="632:45"><expr pos:start="632:34" pos:end="632:45"><name pos:start="632:34" pos:end="632:45">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="632:48" pos:end="632:55"><expr pos:start="632:48" pos:end="632:55"><name pos:start="632:48" pos:end="632:55"><name pos:start="632:48" pos:end="632:52">cpu_T</name><index pos:start="632:53" pos:end="632:55">[<expr pos:start="632:54" pos:end="632:54"><literal type="number" pos:start="632:54" pos:end="632:54">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="633:13" pos:end="633:57"><expr pos:start="633:13" pos:end="633:56"><call pos:start="633:13" pos:end="633:56"><name pos:start="633:13" pos:end="633:32">tcg_gen_trunc_tl_i32</name><argument_list pos:start="633:33" pos:end="633:56">(<argument pos:start="633:34" pos:end="633:45"><expr pos:start="633:34" pos:end="633:45"><name pos:start="633:34" pos:end="633:45">cpu_tmp3_i32</name></expr></argument>, <argument pos:start="633:48" pos:end="633:55"><expr pos:start="633:48" pos:end="633:55"><name pos:start="633:48" pos:end="633:55"><name pos:start="633:48" pos:end="633:52">cpu_T</name><index pos:start="633:53" pos:end="633:55">[<expr pos:start="633:54" pos:end="633:54"><literal type="number" pos:start="633:54" pos:end="633:54">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="634:13" pos:end="635:58"><expr pos:start="634:13" pos:end="635:57"><call pos:start="634:13" pos:end="635:57"><name pos:start="634:13" pos:end="634:29">tcg_gen_muls2_i32</name><argument_list pos:start="634:30" pos:end="635:57">(<argument pos:start="634:31" pos:end="634:42"><expr pos:start="634:31" pos:end="634:42"><name pos:start="634:31" pos:end="634:42">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="634:45" pos:end="634:56"><expr pos:start="634:45" pos:end="634:56"><name pos:start="634:45" pos:end="634:56">cpu_tmp3_i32</name></expr></argument>,
                              <argument pos:start="635:31" pos:end="635:42"><expr pos:start="635:31" pos:end="635:42"><name pos:start="635:31" pos:end="635:42">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="635:45" pos:end="635:56"><expr pos:start="635:45" pos:end="635:56"><name pos:start="635:45" pos:end="635:56">cpu_tmp3_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="636:13" pos:end="636:61"><expr pos:start="636:13" pos:end="636:60"><call pos:start="636:13" pos:end="636:60"><name pos:start="636:13" pos:end="636:31">tcg_gen_extu_i32_tl</name><argument_list pos:start="636:32" pos:end="636:60">(<argument pos:start="636:33" pos:end="636:45"><expr pos:start="636:33" pos:end="636:45"><name pos:start="636:33" pos:end="636:45"><name pos:start="636:33" pos:end="636:40">cpu_regs</name><index pos:start="636:41" pos:end="636:45">[<expr pos:start="636:42" pos:end="636:44"><name pos:start="636:42" pos:end="636:44">reg</name></expr>]</index></name></expr></argument>, <argument pos:start="636:48" pos:end="636:59"><expr pos:start="636:48" pos:end="636:59"><name pos:start="636:48" pos:end="636:59">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="637:13" pos:end="637:61"><expr pos:start="637:13" pos:end="637:60"><call pos:start="637:13" pos:end="637:60"><name pos:start="637:13" pos:end="637:28">tcg_gen_sari_i32</name><argument_list pos:start="637:29" pos:end="637:60">(<argument pos:start="637:30" pos:end="637:41"><expr pos:start="637:30" pos:end="637:41"><name pos:start="637:30" pos:end="637:41">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="637:44" pos:end="637:55"><expr pos:start="637:44" pos:end="637:55"><name pos:start="637:44" pos:end="637:55">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="637:58" pos:end="637:59"><expr pos:start="637:58" pos:end="637:59"><literal type="number" pos:start="637:58" pos:end="637:59">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="638:13" pos:end="638:54"><expr pos:start="638:13" pos:end="638:53"><call pos:start="638:13" pos:end="638:53"><name pos:start="638:13" pos:end="638:26">tcg_gen_mov_tl</name><argument_list pos:start="638:27" pos:end="638:53">(<argument pos:start="638:28" pos:end="638:37"><expr pos:start="638:28" pos:end="638:37"><name pos:start="638:28" pos:end="638:37">cpu_cc_dst</name></expr></argument>, <argument pos:start="638:40" pos:end="638:52"><expr pos:start="638:40" pos:end="638:52"><name pos:start="638:40" pos:end="638:52"><name pos:start="638:40" pos:end="638:47">cpu_regs</name><index pos:start="638:48" pos:end="638:52">[<expr pos:start="638:49" pos:end="638:51"><name pos:start="638:49" pos:end="638:51">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="639:13" pos:end="639:70"><expr pos:start="639:13" pos:end="639:69"><call pos:start="639:13" pos:end="639:69"><name pos:start="639:13" pos:end="639:27">tcg_gen_sub_i32</name><argument_list pos:start="639:28" pos:end="639:69">(<argument pos:start="639:29" pos:end="639:40"><expr pos:start="639:29" pos:end="639:40"><name pos:start="639:29" pos:end="639:40">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="639:43" pos:end="639:54"><expr pos:start="639:43" pos:end="639:54"><name pos:start="639:43" pos:end="639:54">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="639:57" pos:end="639:68"><expr pos:start="639:57" pos:end="639:68"><name pos:start="639:57" pos:end="639:68">cpu_tmp3_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="640:13" pos:end="640:58"><expr pos:start="640:13" pos:end="640:57"><call pos:start="640:13" pos:end="640:57"><name pos:start="640:13" pos:end="640:31">tcg_gen_extu_i32_tl</name><argument_list pos:start="640:32" pos:end="640:57">(<argument pos:start="640:33" pos:end="640:42"><expr pos:start="640:33" pos:end="640:42"><name pos:start="640:33" pos:end="640:42">cpu_cc_src</name></expr></argument>, <argument pos:start="640:45" pos:end="640:56"><expr pos:start="640:45" pos:end="640:56"><name pos:start="640:45" pos:end="640:56">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="641:13" pos:end="641:18">break;</break>
        <default pos:start="642:9" pos:end="642:16">default:</default>
            <expr_stmt pos:start="643:13" pos:end="643:50"><expr pos:start="643:13" pos:end="643:49"><call pos:start="643:13" pos:end="643:49"><name pos:start="643:13" pos:end="643:29">tcg_gen_ext16s_tl</name><argument_list pos:start="643:30" pos:end="643:49">(<argument pos:start="643:31" pos:end="643:38"><expr pos:start="643:31" pos:end="643:38"><name pos:start="643:31" pos:end="643:38"><name pos:start="643:31" pos:end="643:35">cpu_T</name><index pos:start="643:36" pos:end="643:38">[<expr pos:start="643:37" pos:end="643:37"><literal type="number" pos:start="643:37" pos:end="643:37">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="643:41" pos:end="643:48"><expr pos:start="643:41" pos:end="643:48"><name pos:start="643:41" pos:end="643:48"><name pos:start="643:41" pos:end="643:45">cpu_T</name><index pos:start="643:46" pos:end="643:48">[<expr pos:start="643:47" pos:end="643:47"><literal type="number" pos:start="643:47" pos:end="643:47">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="644:13" pos:end="644:50"><expr pos:start="644:13" pos:end="644:49"><call pos:start="644:13" pos:end="644:49"><name pos:start="644:13" pos:end="644:29">tcg_gen_ext16s_tl</name><argument_list pos:start="644:30" pos:end="644:49">(<argument pos:start="644:31" pos:end="644:38"><expr pos:start="644:31" pos:end="644:38"><name pos:start="644:31" pos:end="644:38"><name pos:start="644:31" pos:end="644:35">cpu_T</name><index pos:start="644:36" pos:end="644:38">[<expr pos:start="644:37" pos:end="644:37"><literal type="number" pos:start="644:37" pos:end="644:37">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="644:41" pos:end="644:48"><expr pos:start="644:41" pos:end="644:48"><name pos:start="644:41" pos:end="644:48"><name pos:start="644:41" pos:end="644:45">cpu_T</name><index pos:start="644:46" pos:end="644:48">[<expr pos:start="644:47" pos:end="644:47"><literal type="number" pos:start="644:47" pos:end="644:47">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block" pos:start="645:13" pos:end="645:59">/* XXX: use 32 bit mul which could be faster */</comment>
            <expr_stmt pos:start="646:13" pos:end="646:57"><expr pos:start="646:13" pos:end="646:56"><call pos:start="646:13" pos:end="646:56"><name pos:start="646:13" pos:end="646:26">tcg_gen_mul_tl</name><argument_list pos:start="646:27" pos:end="646:56">(<argument pos:start="646:28" pos:end="646:35"><expr pos:start="646:28" pos:end="646:35"><name pos:start="646:28" pos:end="646:35"><name pos:start="646:28" pos:end="646:32">cpu_T</name><index pos:start="646:33" pos:end="646:35">[<expr pos:start="646:34" pos:end="646:34"><literal type="number" pos:start="646:34" pos:end="646:34">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="646:38" pos:end="646:45"><expr pos:start="646:38" pos:end="646:45"><name pos:start="646:38" pos:end="646:45"><name pos:start="646:38" pos:end="646:42">cpu_T</name><index pos:start="646:43" pos:end="646:45">[<expr pos:start="646:44" pos:end="646:44"><literal type="number" pos:start="646:44" pos:end="646:44">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="646:48" pos:end="646:55"><expr pos:start="646:48" pos:end="646:55"><name pos:start="646:48" pos:end="646:55"><name pos:start="646:48" pos:end="646:52">cpu_T</name><index pos:start="646:53" pos:end="646:55">[<expr pos:start="646:54" pos:end="646:54"><literal type="number" pos:start="646:54" pos:end="646:54">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="647:13" pos:end="647:49"><expr pos:start="647:13" pos:end="647:48"><call pos:start="647:13" pos:end="647:48"><name pos:start="647:13" pos:end="647:26">tcg_gen_mov_tl</name><argument_list pos:start="647:27" pos:end="647:48">(<argument pos:start="647:28" pos:end="647:37"><expr pos:start="647:28" pos:end="647:37"><name pos:start="647:28" pos:end="647:37">cpu_cc_dst</name></expr></argument>, <argument pos:start="647:40" pos:end="647:47"><expr pos:start="647:40" pos:end="647:47"><name pos:start="647:40" pos:end="647:47"><name pos:start="647:40" pos:end="647:44">cpu_T</name><index pos:start="647:45" pos:end="647:47">[<expr pos:start="647:46" pos:end="647:46"><literal type="number" pos:start="647:46" pos:end="647:46">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="648:13" pos:end="648:50"><expr pos:start="648:13" pos:end="648:49"><call pos:start="648:13" pos:end="648:49"><name pos:start="648:13" pos:end="648:29">tcg_gen_ext16s_tl</name><argument_list pos:start="648:30" pos:end="648:49">(<argument pos:start="648:31" pos:end="648:38"><expr pos:start="648:31" pos:end="648:38"><name pos:start="648:31" pos:end="648:38">cpu_tmp0</name></expr></argument>, <argument pos:start="648:41" pos:end="648:48"><expr pos:start="648:41" pos:end="648:48"><name pos:start="648:41" pos:end="648:48"><name pos:start="648:41" pos:end="648:45">cpu_T</name><index pos:start="648:46" pos:end="648:48">[<expr pos:start="648:47" pos:end="648:47"><literal type="number" pos:start="648:47" pos:end="648:47">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="649:13" pos:end="649:59"><expr pos:start="649:13" pos:end="649:58"><call pos:start="649:13" pos:end="649:58"><name pos:start="649:13" pos:end="649:26">tcg_gen_sub_tl</name><argument_list pos:start="649:27" pos:end="649:58">(<argument pos:start="649:28" pos:end="649:37"><expr pos:start="649:28" pos:end="649:37"><name pos:start="649:28" pos:end="649:37">cpu_cc_src</name></expr></argument>, <argument pos:start="649:40" pos:end="649:47"><expr pos:start="649:40" pos:end="649:47"><name pos:start="649:40" pos:end="649:47"><name pos:start="649:40" pos:end="649:44">cpu_T</name><index pos:start="649:45" pos:end="649:47">[<expr pos:start="649:46" pos:end="649:46"><literal type="number" pos:start="649:46" pos:end="649:46">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="649:50" pos:end="649:57"><expr pos:start="649:50" pos:end="649:57"><name pos:start="649:50" pos:end="649:57">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="650:13" pos:end="650:39"><expr pos:start="650:13" pos:end="650:38"><call pos:start="650:13" pos:end="650:38"><name pos:start="650:13" pos:end="650:29">gen_op_mov_reg_T0</name><argument_list pos:start="650:30" pos:end="650:38">(<argument pos:start="650:31" pos:end="650:32"><expr pos:start="650:31" pos:end="650:32"><name pos:start="650:31" pos:end="650:32">ot</name></expr></argument>, <argument pos:start="650:35" pos:end="650:37"><expr pos:start="650:35" pos:end="650:37"><name pos:start="650:35" pos:end="650:37">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="651:13" pos:end="651:18">break;</break>
        <expr_stmt pos:start="652:9" pos:end="652:38"><expr pos:start="652:9" pos:end="652:37"><call pos:start="652:9" pos:end="652:37"><name pos:start="652:9" pos:end="652:17">set_cc_op</name><argument_list pos:start="652:18" pos:end="652:37">(<argument pos:start="652:19" pos:end="652:19"><expr pos:start="652:19" pos:end="652:19"><name pos:start="652:19" pos:end="652:19">s</name></expr></argument>, <argument pos:start="652:22" pos:end="652:36"><expr pos:start="652:22" pos:end="652:36"><name pos:start="652:22" pos:end="652:31">CC_OP_MULB</name> <operator pos:start="652:33" pos:end="652:33">+</operator> <name pos:start="652:35" pos:end="652:36">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="653:9" pos:end="653:14">break;</break>
    <case pos:start="654:5" pos:end="654:15">case <expr pos:start="654:10" pos:end="654:14"><literal type="number" pos:start="654:10" pos:end="654:14">0x1c0</literal></expr>:</case>
    <case pos:start="655:5" pos:end="655:15">case <expr pos:start="655:10" pos:end="655:14"><literal type="number" pos:start="655:10" pos:end="655:14">0x1c1</literal></expr>:</case> <comment type="block" pos:start="655:17" pos:end="655:33">/* xadd Ev, Gv */</comment>
        <if_stmt pos:start="656:9" pos:end="659:33"><if pos:start="656:9" pos:end="657:25">if <condition pos:start="656:12" pos:end="656:25">(<expr pos:start="656:13" pos:end="656:24"><operator pos:start="656:13" pos:end="656:13">(</operator><name pos:start="656:14" pos:end="656:14">b</name> <operator pos:start="656:16" pos:end="656:16">&amp;</operator> <literal type="number" pos:start="656:18" pos:end="656:18">1</literal><operator pos:start="656:19" pos:end="656:19">)</operator> <operator pos:start="656:21" pos:end="656:22">==</operator> <literal type="number" pos:start="656:24" pos:end="656:24">0</literal></expr>)</condition><block type="pseudo" pos:start="657:13" pos:end="657:25"><block_content pos:start="657:13" pos:end="657:25">
            <expr_stmt pos:start="657:13" pos:end="657:25"><expr pos:start="657:13" pos:end="657:24"><name pos:start="657:13" pos:end="657:14">ot</name> <operator pos:start="657:16" pos:end="657:16">=</operator> <name pos:start="657:18" pos:end="657:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>
        <else pos:start="658:9" pos:end="659:33">else<block type="pseudo" pos:start="659:13" pos:end="659:33"><block_content pos:start="659:13" pos:end="659:33">
            <expr_stmt pos:start="659:13" pos:end="659:33"><expr pos:start="659:13" pos:end="659:32"><name pos:start="659:13" pos:end="659:14">ot</name> <operator pos:start="659:16" pos:end="659:16">=</operator> <name pos:start="659:18" pos:end="659:22">dflag</name> <operator pos:start="659:24" pos:end="659:24">+</operator> <name pos:start="659:26" pos:end="659:32">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt pos:start="660:9" pos:end="660:44"><expr pos:start="660:9" pos:end="660:43"><name pos:start="660:9" pos:end="660:13">modrm</name> <operator pos:start="660:15" pos:end="660:15">=</operator> <call pos:start="660:17" pos:end="660:43"><name pos:start="660:17" pos:end="660:29">cpu_ldub_code</name><argument_list pos:start="660:30" pos:end="660:43">(<argument pos:start="660:31" pos:end="660:33"><expr pos:start="660:31" pos:end="660:33"><name pos:start="660:31" pos:end="660:33">env</name></expr></argument>, <argument pos:start="660:36" pos:end="660:42"><expr pos:start="660:36" pos:end="660:42"><name pos:start="660:36" pos:end="660:40"><name pos:start="660:36" pos:end="660:36">s</name><operator pos:start="660:37" pos:end="660:38">-&gt;</operator><name pos:start="660:39" pos:end="660:40">pc</name></name><operator pos:start="660:41" pos:end="660:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="661:9" pos:end="661:41"><expr pos:start="661:9" pos:end="661:40"><name pos:start="661:9" pos:end="661:11">reg</name> <operator pos:start="661:13" pos:end="661:13">=</operator> <operator pos:start="661:15" pos:end="661:15">(</operator><operator pos:start="661:16" pos:end="661:16">(</operator><name pos:start="661:17" pos:end="661:21">modrm</name> <operator pos:start="661:23" pos:end="661:24">&gt;&gt;</operator> <literal type="number" pos:start="661:26" pos:end="661:26">3</literal><operator pos:start="661:27" pos:end="661:27">)</operator> <operator pos:start="661:29" pos:end="661:29">&amp;</operator> <literal type="number" pos:start="661:31" pos:end="661:31">7</literal><operator pos:start="661:32" pos:end="661:32">)</operator> <operator pos:start="661:34" pos:end="661:34">|</operator> <name pos:start="661:36" pos:end="661:40">rex_r</name></expr>;</expr_stmt>
        <expr_stmt pos:start="662:9" pos:end="662:31"><expr pos:start="662:9" pos:end="662:30"><name pos:start="662:9" pos:end="662:11">mod</name> <operator pos:start="662:13" pos:end="662:13">=</operator> <operator pos:start="662:15" pos:end="662:15">(</operator><name pos:start="662:16" pos:end="662:20">modrm</name> <operator pos:start="662:22" pos:end="662:23">&gt;&gt;</operator> <literal type="number" pos:start="662:25" pos:end="662:25">6</literal><operator pos:start="662:26" pos:end="662:26">)</operator> <operator pos:start="662:28" pos:end="662:28">&amp;</operator> <literal type="number" pos:start="662:30" pos:end="662:30">3</literal></expr>;</expr_stmt>
        <if_stmt pos:start="663:9" pos:end="3141:17"><if pos:start="663:9" pos:end="670:9">if <condition pos:start="663:12" pos:end="663:21">(<expr pos:start="663:13" pos:end="663:20"><name pos:start="663:13" pos:end="663:15">mod</name> <operator pos:start="663:17" pos:end="663:18">==</operator> <literal type="number" pos:start="663:20" pos:end="663:20">3</literal></expr>)</condition> <block pos:start="663:23" pos:end="670:9">{<block_content pos:start="664:13" pos:end="669:38">
            <expr_stmt pos:start="664:13" pos:end="664:40"><expr pos:start="664:13" pos:end="664:39"><name pos:start="664:13" pos:end="664:14">rm</name> <operator pos:start="664:16" pos:end="664:16">=</operator> <operator pos:start="664:18" pos:end="664:18">(</operator><name pos:start="664:19" pos:end="664:23">modrm</name> <operator pos:start="664:25" pos:end="664:25">&amp;</operator> <literal type="number" pos:start="664:27" pos:end="664:27">7</literal><operator pos:start="664:28" pos:end="664:28">)</operator> <operator pos:start="664:30" pos:end="664:30">|</operator> <call pos:start="664:32" pos:end="664:39"><name pos:start="664:32" pos:end="664:36">REX_B</name><argument_list pos:start="664:37" pos:end="664:39">(<argument pos:start="664:38" pos:end="664:38"><expr pos:start="664:38" pos:end="664:38"><name pos:start="664:38" pos:end="664:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="665:13" pos:end="665:42"><expr pos:start="665:13" pos:end="665:41"><call pos:start="665:13" pos:end="665:41"><name pos:start="665:13" pos:end="665:29">gen_op_mov_TN_reg</name><argument_list pos:start="665:30" pos:end="665:41">(<argument pos:start="665:31" pos:end="665:32"><expr pos:start="665:31" pos:end="665:32"><name pos:start="665:31" pos:end="665:32">ot</name></expr></argument>, <argument pos:start="665:35" pos:end="665:35"><expr pos:start="665:35" pos:end="665:35"><literal type="number" pos:start="665:35" pos:end="665:35">0</literal></expr></argument>, <argument pos:start="665:38" pos:end="665:40"><expr pos:start="665:38" pos:end="665:40"><name pos:start="665:38" pos:end="665:40">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="666:13" pos:end="666:41"><expr pos:start="666:13" pos:end="666:40"><call pos:start="666:13" pos:end="666:40"><name pos:start="666:13" pos:end="666:29">gen_op_mov_TN_reg</name><argument_list pos:start="666:30" pos:end="666:40">(<argument pos:start="666:31" pos:end="666:32"><expr pos:start="666:31" pos:end="666:32"><name pos:start="666:31" pos:end="666:32">ot</name></expr></argument>, <argument pos:start="666:35" pos:end="666:35"><expr pos:start="666:35" pos:end="666:35"><literal type="number" pos:start="666:35" pos:end="666:35">1</literal></expr></argument>, <argument pos:start="666:38" pos:end="666:39"><expr pos:start="666:38" pos:end="666:39"><name pos:start="666:38" pos:end="666:39">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="667:13" pos:end="667:32"><expr pos:start="667:13" pos:end="667:31"><call pos:start="667:13" pos:end="667:31"><name pos:start="667:13" pos:end="667:29">gen_op_addl_T0_T1</name><argument_list pos:start="667:30" pos:end="667:31">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="668:13" pos:end="668:39"><expr pos:start="668:13" pos:end="668:38"><call pos:start="668:13" pos:end="668:38"><name pos:start="668:13" pos:end="668:29">gen_op_mov_reg_T1</name><argument_list pos:start="668:30" pos:end="668:38">(<argument pos:start="668:31" pos:end="668:32"><expr pos:start="668:31" pos:end="668:32"><name pos:start="668:31" pos:end="668:32">ot</name></expr></argument>, <argument pos:start="668:35" pos:end="668:37"><expr pos:start="668:35" pos:end="668:37"><name pos:start="668:35" pos:end="668:37">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="669:13" pos:end="669:38"><expr pos:start="669:13" pos:end="669:37"><call pos:start="669:13" pos:end="669:37"><name pos:start="669:13" pos:end="669:29">gen_op_mov_reg_T0</name><argument_list pos:start="669:30" pos:end="669:37">(<argument pos:start="669:31" pos:end="669:32"><expr pos:start="669:31" pos:end="669:32"><name pos:start="669:31" pos:end="669:32">ot</name></expr></argument>, <argument pos:start="669:35" pos:end="669:36"><expr pos:start="669:35" pos:end="669:36"><name pos:start="669:35" pos:end="669:36">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="670:11" pos:end="3141:17">else <block pos:start="670:16" pos:end="3141:17">{<block_content pos:start="671:13" pos:end="3141:17">
            <expr_stmt pos:start="671:13" pos:end="671:66"><expr pos:start="671:13" pos:end="671:65"><call pos:start="671:13" pos:end="671:65"><name pos:start="671:13" pos:end="671:25">gen_lea_modrm</name><argument_list pos:start="671:26" pos:end="671:65">(<argument pos:start="671:27" pos:end="671:29"><expr pos:start="671:27" pos:end="671:29"><name pos:start="671:27" pos:end="671:29">env</name></expr></argument>, <argument pos:start="671:32" pos:end="671:32"><expr pos:start="671:32" pos:end="671:32"><name pos:start="671:32" pos:end="671:32">s</name></expr></argument>, <argument pos:start="671:35" pos:end="671:39"><expr pos:start="671:35" pos:end="671:39"><name pos:start="671:35" pos:end="671:39">modrm</name></expr></argument>, <argument pos:start="671:42" pos:end="671:50"><expr pos:start="671:42" pos:end="671:50"><operator pos:start="671:42" pos:end="671:42">&amp;</operator><name pos:start="671:43" pos:end="671:50">reg_addr</name></expr></argument>, <argument pos:start="671:53" pos:end="671:64"><expr pos:start="671:53" pos:end="671:64"><operator pos:start="671:53" pos:end="671:53">&amp;</operator><name pos:start="671:54" pos:end="671:64">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="672:13" pos:end="672:42"><expr pos:start="672:13" pos:end="672:41"><call pos:start="672:13" pos:end="672:41"><name pos:start="672:13" pos:end="672:29">gen_op_mov_TN_reg</name><argument_list pos:start="672:30" pos:end="672:41">(<argument pos:start="672:31" pos:end="672:32"><expr pos:start="672:31" pos:end="672:32"><name pos:start="672:31" pos:end="672:32">ot</name></expr></argument>, <argument pos:start="672:35" pos:end="672:35"><expr pos:start="672:35" pos:end="672:35"><literal type="number" pos:start="672:35" pos:end="672:35">0</literal></expr></argument>, <argument pos:start="672:38" pos:end="672:40"><expr pos:start="672:38" pos:end="672:40"><name pos:start="672:38" pos:end="672:40">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="673:13" pos:end="673:47"><expr pos:start="673:13" pos:end="673:46"><call pos:start="673:13" pos:end="673:46"><name pos:start="673:13" pos:end="673:27">gen_op_ld_T1_A0</name><argument_list pos:start="673:28" pos:end="673:46">(<argument pos:start="673:29" pos:end="673:45"><expr pos:start="673:29" pos:end="673:45"><name pos:start="673:29" pos:end="673:30">ot</name> <operator pos:start="673:32" pos:end="673:32">+</operator> <name pos:start="673:34" pos:end="673:45"><name pos:start="673:34" pos:end="673:34">s</name><operator pos:start="673:35" pos:end="673:36">-&gt;</operator><name pos:start="673:37" pos:end="673:45">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="674:13" pos:end="674:32"><expr pos:start="674:13" pos:end="674:31"><call pos:start="674:13" pos:end="674:31"><name pos:start="674:13" pos:end="674:29">gen_op_addl_T0_T1</name><argument_list pos:start="674:30" pos:end="674:31">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="675:13" pos:end="675:47"><expr pos:start="675:13" pos:end="675:46"><call pos:start="675:13" pos:end="675:46"><name pos:start="675:13" pos:end="675:27">gen_op_st_T0_A0</name><argument_list pos:start="675:28" pos:end="675:46">(<argument pos:start="675:29" pos:end="675:45"><expr pos:start="675:29" pos:end="675:45"><name pos:start="675:29" pos:end="675:30">ot</name> <operator pos:start="675:32" pos:end="675:32">+</operator> <name pos:start="675:34" pos:end="675:45"><name pos:start="675:34" pos:end="675:34">s</name><operator pos:start="675:35" pos:end="675:36">-&gt;</operator><name pos:start="675:37" pos:end="675:45">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="676:13" pos:end="676:39"><expr pos:start="676:13" pos:end="676:38"><call pos:start="676:13" pos:end="676:38"><name pos:start="676:13" pos:end="676:29">gen_op_mov_reg_T1</name><argument_list pos:start="676:30" pos:end="676:38">(<argument pos:start="676:31" pos:end="676:32"><expr pos:start="676:31" pos:end="676:32"><name pos:start="676:31" pos:end="676:32">ot</name></expr></argument>, <argument pos:start="676:35" pos:end="676:37"><expr pos:start="676:35" pos:end="676:37"><name pos:start="676:35" pos:end="676:37">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="677:9" pos:end="677:28"><expr pos:start="677:9" pos:end="677:27"><call pos:start="677:9" pos:end="677:27"><name pos:start="677:9" pos:end="677:25">gen_op_update2_cc</name><argument_list pos:start="677:26" pos:end="677:27">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="678:9" pos:end="678:38"><expr pos:start="678:9" pos:end="678:37"><call pos:start="678:9" pos:end="678:37"><name pos:start="678:9" pos:end="678:17">set_cc_op</name><argument_list pos:start="678:18" pos:end="678:37">(<argument pos:start="678:19" pos:end="678:19"><expr pos:start="678:19" pos:end="678:19"><name pos:start="678:19" pos:end="678:19">s</name></expr></argument>, <argument pos:start="678:22" pos:end="678:36"><expr pos:start="678:22" pos:end="678:36"><name pos:start="678:22" pos:end="678:31">CC_OP_ADDB</name> <operator pos:start="678:33" pos:end="678:33">+</operator> <name pos:start="678:35" pos:end="678:36">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="679:9" pos:end="679:14">break;</break>
    <case pos:start="680:5" pos:end="680:15">case <expr pos:start="680:10" pos:end="680:14"><literal type="number" pos:start="680:10" pos:end="680:14">0x1b0</literal></expr>:</case>
    <case pos:start="681:5" pos:end="681:15">case <expr pos:start="681:10" pos:end="681:14"><literal type="number" pos:start="681:10" pos:end="681:14">0x1b1</literal></expr>:</case> <comment type="block" pos:start="681:17" pos:end="681:36">/* cmpxchg Ev, Gv */</comment>
        <block pos:start="682:9" pos:end="3141:17">{<block_content pos:start="683:13" pos:end="3141:17">
            <decl_stmt pos:start="683:13" pos:end="683:31"><decl pos:start="683:13" pos:end="683:22"><type pos:start="683:13" pos:end="683:15"><name pos:start="683:13" pos:end="683:15">int</name></type> <name pos:start="683:17" pos:end="683:22">label1</name></decl>, <decl pos:start="683:25" pos:end="683:30"><type ref="prev" pos:start="683:13" pos:end="683:15"/><name pos:start="683:25" pos:end="683:30">label2</name></decl>;</decl_stmt>
            <decl_stmt pos:start="684:13" pos:end="684:32"><decl pos:start="684:13" pos:end="684:19"><type pos:start="684:13" pos:end="684:16"><name pos:start="684:13" pos:end="684:16">TCGv</name></type> <name pos:start="684:18" pos:end="684:19">t0</name></decl>, <decl pos:start="684:22" pos:end="684:23"><type ref="prev" pos:start="684:13" pos:end="684:16"/><name pos:start="684:22" pos:end="684:23">t1</name></decl>, <decl pos:start="684:26" pos:end="684:27"><type ref="prev" pos:start="684:13" pos:end="684:16"/><name pos:start="684:26" pos:end="684:27">t2</name></decl>, <decl pos:start="684:30" pos:end="684:31"><type ref="prev" pos:start="684:13" pos:end="684:16"/><name pos:start="684:30" pos:end="684:31">a0</name></decl>;</decl_stmt>
            <if_stmt pos:start="685:13" pos:end="688:37"><if pos:start="685:13" pos:end="686:29">if <condition pos:start="685:16" pos:end="685:29">(<expr pos:start="685:17" pos:end="685:28"><operator pos:start="685:17" pos:end="685:17">(</operator><name pos:start="685:18" pos:end="685:18">b</name> <operator pos:start="685:20" pos:end="685:20">&amp;</operator> <literal type="number" pos:start="685:22" pos:end="685:22">1</literal><operator pos:start="685:23" pos:end="685:23">)</operator> <operator pos:start="685:25" pos:end="685:26">==</operator> <literal type="number" pos:start="685:28" pos:end="685:28">0</literal></expr>)</condition><block type="pseudo" pos:start="686:17" pos:end="686:29"><block_content pos:start="686:17" pos:end="686:29">
                <expr_stmt pos:start="686:17" pos:end="686:29"><expr pos:start="686:17" pos:end="686:28"><name pos:start="686:17" pos:end="686:18">ot</name> <operator pos:start="686:20" pos:end="686:20">=</operator> <name pos:start="686:22" pos:end="686:28">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>
            <else pos:start="687:13" pos:end="688:37">else<block type="pseudo" pos:start="688:17" pos:end="688:37"><block_content pos:start="688:17" pos:end="688:37">
                <expr_stmt pos:start="688:17" pos:end="688:37"><expr pos:start="688:17" pos:end="688:36"><name pos:start="688:17" pos:end="688:18">ot</name> <operator pos:start="688:20" pos:end="688:20">=</operator> <name pos:start="688:22" pos:end="688:26">dflag</name> <operator pos:start="688:28" pos:end="688:28">+</operator> <name pos:start="688:30" pos:end="688:36">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <expr_stmt pos:start="689:13" pos:end="689:48"><expr pos:start="689:13" pos:end="689:47"><name pos:start="689:13" pos:end="689:17">modrm</name> <operator pos:start="689:19" pos:end="689:19">=</operator> <call pos:start="689:21" pos:end="689:47"><name pos:start="689:21" pos:end="689:33">cpu_ldub_code</name><argument_list pos:start="689:34" pos:end="689:47">(<argument pos:start="689:35" pos:end="689:37"><expr pos:start="689:35" pos:end="689:37"><name pos:start="689:35" pos:end="689:37">env</name></expr></argument>, <argument pos:start="689:40" pos:end="689:46"><expr pos:start="689:40" pos:end="689:46"><name pos:start="689:40" pos:end="689:44"><name pos:start="689:40" pos:end="689:40">s</name><operator pos:start="689:41" pos:end="689:42">-&gt;</operator><name pos:start="689:43" pos:end="689:44">pc</name></name><operator pos:start="689:45" pos:end="689:46">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="690:13" pos:end="690:45"><expr pos:start="690:13" pos:end="690:44"><name pos:start="690:13" pos:end="690:15">reg</name> <operator pos:start="690:17" pos:end="690:17">=</operator> <operator pos:start="690:19" pos:end="690:19">(</operator><operator pos:start="690:20" pos:end="690:20">(</operator><name pos:start="690:21" pos:end="690:25">modrm</name> <operator pos:start="690:27" pos:end="690:28">&gt;&gt;</operator> <literal type="number" pos:start="690:30" pos:end="690:30">3</literal><operator pos:start="690:31" pos:end="690:31">)</operator> <operator pos:start="690:33" pos:end="690:33">&amp;</operator> <literal type="number" pos:start="690:35" pos:end="690:35">7</literal><operator pos:start="690:36" pos:end="690:36">)</operator> <operator pos:start="690:38" pos:end="690:38">|</operator> <name pos:start="690:40" pos:end="690:44">rex_r</name></expr>;</expr_stmt>
            <expr_stmt pos:start="691:13" pos:end="691:35"><expr pos:start="691:13" pos:end="691:34"><name pos:start="691:13" pos:end="691:15">mod</name> <operator pos:start="691:17" pos:end="691:17">=</operator> <operator pos:start="691:19" pos:end="691:19">(</operator><name pos:start="691:20" pos:end="691:24">modrm</name> <operator pos:start="691:26" pos:end="691:27">&gt;&gt;</operator> <literal type="number" pos:start="691:29" pos:end="691:29">6</literal><operator pos:start="691:30" pos:end="691:30">)</operator> <operator pos:start="691:32" pos:end="691:32">&amp;</operator> <literal type="number" pos:start="691:34" pos:end="691:34">3</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="692:13" pos:end="692:38"><expr pos:start="692:13" pos:end="692:37"><name pos:start="692:13" pos:end="692:14">t0</name> <operator pos:start="692:16" pos:end="692:16">=</operator> <call pos:start="692:18" pos:end="692:37"><name pos:start="692:18" pos:end="692:35">tcg_temp_local_new</name><argument_list pos:start="692:36" pos:end="692:37">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="693:13" pos:end="693:38"><expr pos:start="693:13" pos:end="693:37"><name pos:start="693:13" pos:end="693:14">t1</name> <operator pos:start="693:16" pos:end="693:16">=</operator> <call pos:start="693:18" pos:end="693:37"><name pos:start="693:18" pos:end="693:35">tcg_temp_local_new</name><argument_list pos:start="693:36" pos:end="693:37">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="694:13" pos:end="694:38"><expr pos:start="694:13" pos:end="694:37"><name pos:start="694:13" pos:end="694:14">t2</name> <operator pos:start="694:16" pos:end="694:16">=</operator> <call pos:start="694:18" pos:end="694:37"><name pos:start="694:18" pos:end="694:35">tcg_temp_local_new</name><argument_list pos:start="694:36" pos:end="694:37">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="695:13" pos:end="695:38"><expr pos:start="695:13" pos:end="695:37"><name pos:start="695:13" pos:end="695:14">a0</name> <operator pos:start="695:16" pos:end="695:16">=</operator> <call pos:start="695:18" pos:end="695:37"><name pos:start="695:18" pos:end="695:35">tcg_temp_local_new</name><argument_list pos:start="695:36" pos:end="695:37">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="696:13" pos:end="696:42"><expr pos:start="696:13" pos:end="696:41"><call pos:start="696:13" pos:end="696:41"><name pos:start="696:13" pos:end="696:28">gen_op_mov_v_reg</name><argument_list pos:start="696:29" pos:end="696:41">(<argument pos:start="696:30" pos:end="696:31"><expr pos:start="696:30" pos:end="696:31"><name pos:start="696:30" pos:end="696:31">ot</name></expr></argument>, <argument pos:start="696:34" pos:end="696:35"><expr pos:start="696:34" pos:end="696:35"><name pos:start="696:34" pos:end="696:35">t1</name></expr></argument>, <argument pos:start="696:38" pos:end="696:40"><expr pos:start="696:38" pos:end="696:40"><name pos:start="696:38" pos:end="696:40">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="697:13" pos:end="3141:17"><if pos:start="697:13" pos:end="700:13">if <condition pos:start="697:16" pos:end="697:25">(<expr pos:start="697:17" pos:end="697:24"><name pos:start="697:17" pos:end="697:19">mod</name> <operator pos:start="697:21" pos:end="697:22">==</operator> <literal type="number" pos:start="697:24" pos:end="697:24">3</literal></expr>)</condition> <block pos:start="697:27" pos:end="700:13">{<block_content pos:start="698:17" pos:end="699:45">
                <expr_stmt pos:start="698:17" pos:end="698:44"><expr pos:start="698:17" pos:end="698:43"><name pos:start="698:17" pos:end="698:18">rm</name> <operator pos:start="698:20" pos:end="698:20">=</operator> <operator pos:start="698:22" pos:end="698:22">(</operator><name pos:start="698:23" pos:end="698:27">modrm</name> <operator pos:start="698:29" pos:end="698:29">&amp;</operator> <literal type="number" pos:start="698:31" pos:end="698:31">7</literal><operator pos:start="698:32" pos:end="698:32">)</operator> <operator pos:start="698:34" pos:end="698:34">|</operator> <call pos:start="698:36" pos:end="698:43"><name pos:start="698:36" pos:end="698:40">REX_B</name><argument_list pos:start="698:41" pos:end="698:43">(<argument pos:start="698:42" pos:end="698:42"><expr pos:start="698:42" pos:end="698:42"><name pos:start="698:42" pos:end="698:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="699:17" pos:end="699:45"><expr pos:start="699:17" pos:end="699:44"><call pos:start="699:17" pos:end="699:44"><name pos:start="699:17" pos:end="699:32">gen_op_mov_v_reg</name><argument_list pos:start="699:33" pos:end="699:44">(<argument pos:start="699:34" pos:end="699:35"><expr pos:start="699:34" pos:end="699:35"><name pos:start="699:34" pos:end="699:35">ot</name></expr></argument>, <argument pos:start="699:38" pos:end="699:39"><expr pos:start="699:38" pos:end="699:39"><name pos:start="699:38" pos:end="699:39">t0</name></expr></argument>, <argument pos:start="699:42" pos:end="699:43"><expr pos:start="699:42" pos:end="699:43"><name pos:start="699:42" pos:end="699:43">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="700:15" pos:end="3141:17">else <block pos:start="700:20" pos:end="3141:17">{<block_content pos:start="701:17" pos:end="3141:17">
                <expr_stmt pos:start="701:17" pos:end="701:70"><expr pos:start="701:17" pos:end="701:69"><call pos:start="701:17" pos:end="701:69"><name pos:start="701:17" pos:end="701:29">gen_lea_modrm</name><argument_list pos:start="701:30" pos:end="701:69">(<argument pos:start="701:31" pos:end="701:33"><expr pos:start="701:31" pos:end="701:33"><name pos:start="701:31" pos:end="701:33">env</name></expr></argument>, <argument pos:start="701:36" pos:end="701:36"><expr pos:start="701:36" pos:end="701:36"><name pos:start="701:36" pos:end="701:36">s</name></expr></argument>, <argument pos:start="701:39" pos:end="701:43"><expr pos:start="701:39" pos:end="701:43"><name pos:start="701:39" pos:end="701:43">modrm</name></expr></argument>, <argument pos:start="701:46" pos:end="701:54"><expr pos:start="701:46" pos:end="701:54"><operator pos:start="701:46" pos:end="701:46">&amp;</operator><name pos:start="701:47" pos:end="701:54">reg_addr</name></expr></argument>, <argument pos:start="701:57" pos:end="701:68"><expr pos:start="701:57" pos:end="701:68"><operator pos:start="701:57" pos:end="701:57">&amp;</operator><name pos:start="701:58" pos:end="701:68">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="702:17" pos:end="702:43"><expr pos:start="702:17" pos:end="702:42"><call pos:start="702:17" pos:end="702:42"><name pos:start="702:17" pos:end="702:30">tcg_gen_mov_tl</name><argument_list pos:start="702:31" pos:end="702:42">(<argument pos:start="702:32" pos:end="702:33"><expr pos:start="702:32" pos:end="702:33"><name pos:start="702:32" pos:end="702:33">a0</name></expr></argument>, <argument pos:start="702:36" pos:end="702:41"><expr pos:start="702:36" pos:end="702:41"><name pos:start="702:36" pos:end="702:41">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="703:17" pos:end="703:55"><expr pos:start="703:17" pos:end="703:54"><call pos:start="703:17" pos:end="703:54"><name pos:start="703:17" pos:end="703:27">gen_op_ld_v</name><argument_list pos:start="703:28" pos:end="703:54">(<argument pos:start="703:29" pos:end="703:45"><expr pos:start="703:29" pos:end="703:45"><name pos:start="703:29" pos:end="703:30">ot</name> <operator pos:start="703:32" pos:end="703:32">+</operator> <name pos:start="703:34" pos:end="703:45"><name pos:start="703:34" pos:end="703:34">s</name><operator pos:start="703:35" pos:end="703:36">-&gt;</operator><name pos:start="703:37" pos:end="703:45">mem_index</name></name></expr></argument>, <argument pos:start="703:48" pos:end="703:49"><expr pos:start="703:48" pos:end="703:49"><name pos:start="703:48" pos:end="703:49">t0</name></expr></argument>, <argument pos:start="703:52" pos:end="703:53"><expr pos:start="703:52" pos:end="703:53"><name pos:start="703:52" pos:end="703:53">a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="704:17" pos:end="704:23"><expr pos:start="704:17" pos:end="704:22"><name pos:start="704:17" pos:end="704:18">rm</name> <operator pos:start="704:20" pos:end="704:20">=</operator> <literal type="number" pos:start="704:22" pos:end="704:22">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="704:25" pos:end="704:43">/* avoid warning */</comment>
            <expr_stmt pos:start="705:13" pos:end="705:37"><expr pos:start="705:13" pos:end="705:36"><name pos:start="705:13" pos:end="705:18">label1</name> <operator pos:start="705:20" pos:end="705:20">=</operator> <call pos:start="705:22" pos:end="705:36"><name pos:start="705:22" pos:end="705:34">gen_new_label</name><argument_list pos:start="705:35" pos:end="705:36">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="706:13" pos:end="706:48"><expr pos:start="706:13" pos:end="706:47"><call pos:start="706:13" pos:end="706:47"><name pos:start="706:13" pos:end="706:26">tcg_gen_mov_tl</name><argument_list pos:start="706:27" pos:end="706:47">(<argument pos:start="706:28" pos:end="706:29"><expr pos:start="706:28" pos:end="706:29"><name pos:start="706:28" pos:end="706:29">t2</name></expr></argument>, <argument pos:start="706:32" pos:end="706:46"><expr pos:start="706:32" pos:end="706:46"><name pos:start="706:32" pos:end="706:46"><name pos:start="706:32" pos:end="706:39">cpu_regs</name><index pos:start="706:40" pos:end="706:46">[<expr pos:start="706:41" pos:end="706:45"><name pos:start="706:41" pos:end="706:45">R_EAX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="707:13" pos:end="707:29"><expr pos:start="707:13" pos:end="707:28"><call pos:start="707:13" pos:end="707:28"><name pos:start="707:13" pos:end="707:20">gen_extu</name><argument_list pos:start="707:21" pos:end="707:28">(<argument pos:start="707:22" pos:end="707:23"><expr pos:start="707:22" pos:end="707:23"><name pos:start="707:22" pos:end="707:23">ot</name></expr></argument>, <argument pos:start="707:26" pos:end="707:27"><expr pos:start="707:26" pos:end="707:27"><name pos:start="707:26" pos:end="707:27">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="708:13" pos:end="708:29"><expr pos:start="708:13" pos:end="708:28"><call pos:start="708:13" pos:end="708:28"><name pos:start="708:13" pos:end="708:20">gen_extu</name><argument_list pos:start="708:21" pos:end="708:28">(<argument pos:start="708:22" pos:end="708:23"><expr pos:start="708:22" pos:end="708:23"><name pos:start="708:22" pos:end="708:23">ot</name></expr></argument>, <argument pos:start="708:26" pos:end="708:27"><expr pos:start="708:26" pos:end="708:27"><name pos:start="708:26" pos:end="708:27">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="709:13" pos:end="709:59"><expr pos:start="709:13" pos:end="709:58"><call pos:start="709:13" pos:end="709:58"><name pos:start="709:13" pos:end="709:29">tcg_gen_brcond_tl</name><argument_list pos:start="709:30" pos:end="709:58">(<argument pos:start="709:31" pos:end="709:41"><expr pos:start="709:31" pos:end="709:41"><name pos:start="709:31" pos:end="709:41">TCG_COND_EQ</name></expr></argument>, <argument pos:start="709:44" pos:end="709:45"><expr pos:start="709:44" pos:end="709:45"><name pos:start="709:44" pos:end="709:45">t2</name></expr></argument>, <argument pos:start="709:48" pos:end="709:49"><expr pos:start="709:48" pos:end="709:49"><name pos:start="709:48" pos:end="709:49">t0</name></expr></argument>, <argument pos:start="709:52" pos:end="709:57"><expr pos:start="709:52" pos:end="709:57"><name pos:start="709:52" pos:end="709:57">label1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="710:13" pos:end="710:37"><expr pos:start="710:13" pos:end="710:36"><name pos:start="710:13" pos:end="710:18">label2</name> <operator pos:start="710:20" pos:end="710:20">=</operator> <call pos:start="710:22" pos:end="710:36"><name pos:start="710:22" pos:end="710:34">gen_new_label</name><argument_list pos:start="710:35" pos:end="710:36">()</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="711:13" pos:end="3141:17"><if pos:start="711:13" pos:end="716:13">if <condition pos:start="711:16" pos:end="711:25">(<expr pos:start="711:17" pos:end="711:24"><name pos:start="711:17" pos:end="711:19">mod</name> <operator pos:start="711:21" pos:end="711:22">==</operator> <literal type="number" pos:start="711:24" pos:end="711:24">3</literal></expr>)</condition> <block pos:start="711:27" pos:end="716:13">{<block_content pos:start="712:17" pos:end="715:45">
                <expr_stmt pos:start="712:17" pos:end="712:48"><expr pos:start="712:17" pos:end="712:47"><call pos:start="712:17" pos:end="712:47"><name pos:start="712:17" pos:end="712:32">gen_op_mov_reg_v</name><argument_list pos:start="712:33" pos:end="712:47">(<argument pos:start="712:34" pos:end="712:35"><expr pos:start="712:34" pos:end="712:35"><name pos:start="712:34" pos:end="712:35">ot</name></expr></argument>, <argument pos:start="712:38" pos:end="712:42"><expr pos:start="712:38" pos:end="712:42"><name pos:start="712:38" pos:end="712:42">R_EAX</name></expr></argument>, <argument pos:start="712:45" pos:end="712:46"><expr pos:start="712:45" pos:end="712:46"><name pos:start="712:45" pos:end="712:46">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="713:17" pos:end="713:35"><expr pos:start="713:17" pos:end="713:34"><call pos:start="713:17" pos:end="713:34"><name pos:start="713:17" pos:end="713:26">tcg_gen_br</name><argument_list pos:start="713:27" pos:end="713:34">(<argument pos:start="713:28" pos:end="713:33"><expr pos:start="713:28" pos:end="713:33"><name pos:start="713:28" pos:end="713:33">label2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="714:17" pos:end="714:38"><expr pos:start="714:17" pos:end="714:37"><call pos:start="714:17" pos:end="714:37"><name pos:start="714:17" pos:end="714:29">gen_set_label</name><argument_list pos:start="714:30" pos:end="714:37">(<argument pos:start="714:31" pos:end="714:36"><expr pos:start="714:31" pos:end="714:36"><name pos:start="714:31" pos:end="714:36">label1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="715:17" pos:end="715:45"><expr pos:start="715:17" pos:end="715:44"><call pos:start="715:17" pos:end="715:44"><name pos:start="715:17" pos:end="715:32">gen_op_mov_reg_v</name><argument_list pos:start="715:33" pos:end="715:44">(<argument pos:start="715:34" pos:end="715:35"><expr pos:start="715:34" pos:end="715:35"><name pos:start="715:34" pos:end="715:35">ot</name></expr></argument>, <argument pos:start="715:38" pos:end="715:39"><expr pos:start="715:38" pos:end="715:39"><name pos:start="715:38" pos:end="715:39">rm</name></expr></argument>, <argument pos:start="715:42" pos:end="715:43"><expr pos:start="715:42" pos:end="715:43"><name pos:start="715:42" pos:end="715:43">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="716:15" pos:end="3141:17">else <block pos:start="716:20" pos:end="3141:17">{<block_content pos:start="720:17" pos:end="3141:17">
                <comment type="block" pos:start="717:17" pos:end="719:71">/* perform no-op store cycle like physical cpu; must be
                   before changing accumulator to ensure idempotency if
                   the store faults and the instruction is restarted */</comment>
                <expr_stmt pos:start="720:17" pos:end="720:55"><expr pos:start="720:17" pos:end="720:54"><call pos:start="720:17" pos:end="720:54"><name pos:start="720:17" pos:end="720:27">gen_op_st_v</name><argument_list pos:start="720:28" pos:end="720:54">(<argument pos:start="720:29" pos:end="720:45"><expr pos:start="720:29" pos:end="720:45"><name pos:start="720:29" pos:end="720:30">ot</name> <operator pos:start="720:32" pos:end="720:32">+</operator> <name pos:start="720:34" pos:end="720:45"><name pos:start="720:34" pos:end="720:34">s</name><operator pos:start="720:35" pos:end="720:36">-&gt;</operator><name pos:start="720:37" pos:end="720:45">mem_index</name></name></expr></argument>, <argument pos:start="720:48" pos:end="720:49"><expr pos:start="720:48" pos:end="720:49"><name pos:start="720:48" pos:end="720:49">t0</name></expr></argument>, <argument pos:start="720:52" pos:end="720:53"><expr pos:start="720:52" pos:end="720:53"><name pos:start="720:52" pos:end="720:53">a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="721:17" pos:end="721:48"><expr pos:start="721:17" pos:end="721:47"><call pos:start="721:17" pos:end="721:47"><name pos:start="721:17" pos:end="721:32">gen_op_mov_reg_v</name><argument_list pos:start="721:33" pos:end="721:47">(<argument pos:start="721:34" pos:end="721:35"><expr pos:start="721:34" pos:end="721:35"><name pos:start="721:34" pos:end="721:35">ot</name></expr></argument>, <argument pos:start="721:38" pos:end="721:42"><expr pos:start="721:38" pos:end="721:42"><name pos:start="721:38" pos:end="721:42">R_EAX</name></expr></argument>, <argument pos:start="721:45" pos:end="721:46"><expr pos:start="721:45" pos:end="721:46"><name pos:start="721:45" pos:end="721:46">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="722:17" pos:end="722:35"><expr pos:start="722:17" pos:end="722:34"><call pos:start="722:17" pos:end="722:34"><name pos:start="722:17" pos:end="722:26">tcg_gen_br</name><argument_list pos:start="722:27" pos:end="722:34">(<argument pos:start="722:28" pos:end="722:33"><expr pos:start="722:28" pos:end="722:33"><name pos:start="722:28" pos:end="722:33">label2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="723:17" pos:end="723:38"><expr pos:start="723:17" pos:end="723:37"><call pos:start="723:17" pos:end="723:37"><name pos:start="723:17" pos:end="723:29">gen_set_label</name><argument_list pos:start="723:30" pos:end="723:37">(<argument pos:start="723:31" pos:end="723:36"><expr pos:start="723:31" pos:end="723:36"><name pos:start="723:31" pos:end="723:36">label1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="724:17" pos:end="724:55"><expr pos:start="724:17" pos:end="724:54"><call pos:start="724:17" pos:end="724:54"><name pos:start="724:17" pos:end="724:27">gen_op_st_v</name><argument_list pos:start="724:28" pos:end="724:54">(<argument pos:start="724:29" pos:end="724:45"><expr pos:start="724:29" pos:end="724:45"><name pos:start="724:29" pos:end="724:30">ot</name> <operator pos:start="724:32" pos:end="724:32">+</operator> <name pos:start="724:34" pos:end="724:45"><name pos:start="724:34" pos:end="724:34">s</name><operator pos:start="724:35" pos:end="724:36">-&gt;</operator><name pos:start="724:37" pos:end="724:45">mem_index</name></name></expr></argument>, <argument pos:start="724:48" pos:end="724:49"><expr pos:start="724:48" pos:end="724:49"><name pos:start="724:48" pos:end="724:49">t1</name></expr></argument>, <argument pos:start="724:52" pos:end="724:53"><expr pos:start="724:52" pos:end="724:53"><name pos:start="724:52" pos:end="724:53">a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="725:13" pos:end="725:34"><expr pos:start="725:13" pos:end="725:33"><call pos:start="725:13" pos:end="725:33"><name pos:start="725:13" pos:end="725:25">gen_set_label</name><argument_list pos:start="725:26" pos:end="725:33">(<argument pos:start="725:27" pos:end="725:32"><expr pos:start="725:27" pos:end="725:32"><name pos:start="725:27" pos:end="725:32">label2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="726:13" pos:end="726:43"><expr pos:start="726:13" pos:end="726:42"><call pos:start="726:13" pos:end="726:42"><name pos:start="726:13" pos:end="726:26">tcg_gen_mov_tl</name><argument_list pos:start="726:27" pos:end="726:42">(<argument pos:start="726:28" pos:end="726:37"><expr pos:start="726:28" pos:end="726:37"><name pos:start="726:28" pos:end="726:37">cpu_cc_src</name></expr></argument>, <argument pos:start="726:40" pos:end="726:41"><expr pos:start="726:40" pos:end="726:41"><name pos:start="726:40" pos:end="726:41">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="727:13" pos:end="727:44"><expr pos:start="727:13" pos:end="727:43"><call pos:start="727:13" pos:end="727:43"><name pos:start="727:13" pos:end="727:26">tcg_gen_mov_tl</name><argument_list pos:start="727:27" pos:end="727:43">(<argument pos:start="727:28" pos:end="727:38"><expr pos:start="727:28" pos:end="727:38"><name pos:start="727:28" pos:end="727:38">cpu_cc_srcT</name></expr></argument>, <argument pos:start="727:41" pos:end="727:42"><expr pos:start="727:41" pos:end="727:42"><name pos:start="727:41" pos:end="727:42">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="728:13" pos:end="728:47"><expr pos:start="728:13" pos:end="728:46"><call pos:start="728:13" pos:end="728:46"><name pos:start="728:13" pos:end="728:26">tcg_gen_sub_tl</name><argument_list pos:start="728:27" pos:end="728:46">(<argument pos:start="728:28" pos:end="728:37"><expr pos:start="728:28" pos:end="728:37"><name pos:start="728:28" pos:end="728:37">cpu_cc_dst</name></expr></argument>, <argument pos:start="728:40" pos:end="728:41"><expr pos:start="728:40" pos:end="728:41"><name pos:start="728:40" pos:end="728:41">t2</name></expr></argument>, <argument pos:start="728:44" pos:end="728:45"><expr pos:start="728:44" pos:end="728:45"><name pos:start="728:44" pos:end="728:45">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="729:13" pos:end="729:42"><expr pos:start="729:13" pos:end="729:41"><call pos:start="729:13" pos:end="729:41"><name pos:start="729:13" pos:end="729:21">set_cc_op</name><argument_list pos:start="729:22" pos:end="729:41">(<argument pos:start="729:23" pos:end="729:23"><expr pos:start="729:23" pos:end="729:23"><name pos:start="729:23" pos:end="729:23">s</name></expr></argument>, <argument pos:start="729:26" pos:end="729:40"><expr pos:start="729:26" pos:end="729:40"><name pos:start="729:26" pos:end="729:35">CC_OP_SUBB</name> <operator pos:start="729:37" pos:end="729:37">+</operator> <name pos:start="729:39" pos:end="729:40">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="730:13" pos:end="730:30"><expr pos:start="730:13" pos:end="730:29"><call pos:start="730:13" pos:end="730:29"><name pos:start="730:13" pos:end="730:25">tcg_temp_free</name><argument_list pos:start="730:26" pos:end="730:29">(<argument pos:start="730:27" pos:end="730:28"><expr pos:start="730:27" pos:end="730:28"><name pos:start="730:27" pos:end="730:28">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="731:13" pos:end="731:30"><expr pos:start="731:13" pos:end="731:29"><call pos:start="731:13" pos:end="731:29"><name pos:start="731:13" pos:end="731:25">tcg_temp_free</name><argument_list pos:start="731:26" pos:end="731:29">(<argument pos:start="731:27" pos:end="731:28"><expr pos:start="731:27" pos:end="731:28"><name pos:start="731:27" pos:end="731:28">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="732:13" pos:end="732:30"><expr pos:start="732:13" pos:end="732:29"><call pos:start="732:13" pos:end="732:29"><name pos:start="732:13" pos:end="732:25">tcg_temp_free</name><argument_list pos:start="732:26" pos:end="732:29">(<argument pos:start="732:27" pos:end="732:28"><expr pos:start="732:27" pos:end="732:28"><name pos:start="732:27" pos:end="732:28">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="733:13" pos:end="733:30"><expr pos:start="733:13" pos:end="733:29"><call pos:start="733:13" pos:end="733:29"><name pos:start="733:13" pos:end="733:25">tcg_temp_free</name><argument_list pos:start="733:26" pos:end="733:29">(<argument pos:start="733:27" pos:end="733:28"><expr pos:start="733:27" pos:end="733:28"><name pos:start="733:27" pos:end="733:28">a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="734:9" pos:end="734:14">break;</break>
    <case pos:start="735:5" pos:end="735:15">case <expr pos:start="735:10" pos:end="735:14"><literal type="number" pos:start="735:10" pos:end="735:14">0x1c7</literal></expr>:</case> <comment type="block" pos:start="735:17" pos:end="735:31">/* cmpxchg8b */</comment>
        <expr_stmt pos:start="736:9" pos:end="736:44"><expr pos:start="736:9" pos:end="736:43"><name pos:start="736:9" pos:end="736:13">modrm</name> <operator pos:start="736:15" pos:end="736:15">=</operator> <call pos:start="736:17" pos:end="736:43"><name pos:start="736:17" pos:end="736:29">cpu_ldub_code</name><argument_list pos:start="736:30" pos:end="736:43">(<argument pos:start="736:31" pos:end="736:33"><expr pos:start="736:31" pos:end="736:33"><name pos:start="736:31" pos:end="736:33">env</name></expr></argument>, <argument pos:start="736:36" pos:end="736:42"><expr pos:start="736:36" pos:end="736:42"><name pos:start="736:36" pos:end="736:40"><name pos:start="736:36" pos:end="736:36">s</name><operator pos:start="736:37" pos:end="736:38">-&gt;</operator><name pos:start="736:39" pos:end="736:40">pc</name></name><operator pos:start="736:41" pos:end="736:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="737:9" pos:end="737:31"><expr pos:start="737:9" pos:end="737:30"><name pos:start="737:9" pos:end="737:11">mod</name> <operator pos:start="737:13" pos:end="737:13">=</operator> <operator pos:start="737:15" pos:end="737:15">(</operator><name pos:start="737:16" pos:end="737:20">modrm</name> <operator pos:start="737:22" pos:end="737:23">&gt;&gt;</operator> <literal type="number" pos:start="737:25" pos:end="737:25">6</literal><operator pos:start="737:26" pos:end="737:26">)</operator> <operator pos:start="737:28" pos:end="737:28">&amp;</operator> <literal type="number" pos:start="737:30" pos:end="737:30">3</literal></expr>;</expr_stmt>
        <if_stmt pos:start="738:9" pos:end="3141:17"><if pos:start="738:9" pos:end="3141:17">if <condition pos:start="738:12" pos:end="740:0">(<expr pos:start="738:13" pos:end="738:49"><operator pos:start="738:13" pos:end="738:13">(</operator><name pos:start="738:14" pos:end="738:16">mod</name> <operator pos:start="738:18" pos:end="738:19">==</operator> <literal type="number" pos:start="738:21" pos:end="738:21">3</literal><operator pos:start="738:22" pos:end="738:22">)</operator> <operator pos:start="738:24" pos:end="738:25">||</operator> <operator pos:start="738:27" pos:end="738:27">(</operator><operator pos:start="738:28" pos:end="738:28">(</operator><name pos:start="738:29" pos:end="738:33">modrm</name> <operator pos:start="738:35" pos:end="738:35">&amp;</operator> <literal type="number" pos:start="738:37" pos:end="738:40">0x38</literal><operator pos:start="738:41" pos:end="738:41">)</operator> <operator pos:start="738:43" pos:end="738:44">!=</operator> <literal type="number" pos:start="738:46" pos:end="738:48">0x8</literal><operator pos:start="738:49" pos:end="738:49">)</operator></expr>)</condition><block type="pseudo" pos:start="740:9" pos:end="3141:17"><block_content pos:start="740:9" pos:end="3141:17">
<cpp:ifdef pos:start="739:1" pos:end="739:20">#<cpp:directive pos:start="739:2" pos:end="739:6">ifdef</cpp:directive> <name pos:start="739:8" pos:end="739:20">TARGET_X86_64</name></cpp:ifdef>
        <if_stmt pos:start="740:9" pos:end="3141:17"><if pos:start="740:9" pos:end="746:9">if <condition pos:start="740:12" pos:end="740:23">(<expr pos:start="740:13" pos:end="740:22"><name pos:start="740:13" pos:end="740:17">dflag</name> <operator pos:start="740:19" pos:end="740:20">==</operator> <literal type="number" pos:start="740:22" pos:end="740:22">2</literal></expr>)</condition> <block pos:start="740:25" pos:end="746:9">{<block_content pos:start="741:13" pos:end="745:51">
            <if_stmt pos:start="741:13" pos:end="742:46"><if pos:start="741:13" pos:end="742:46">if <condition pos:start="741:16" pos:end="741:58">(<expr pos:start="741:17" pos:end="741:57"><operator pos:start="741:17" pos:end="741:17">!</operator><operator pos:start="741:18" pos:end="741:18">(</operator><name pos:start="741:19" pos:end="741:39"><name pos:start="741:19" pos:end="741:19">s</name><operator pos:start="741:20" pos:end="741:21">-&gt;</operator><name pos:start="741:22" pos:end="741:39">cpuid_ext_features</name></name> <operator pos:start="741:41" pos:end="741:41">&amp;</operator> <name pos:start="741:43" pos:end="741:56">CPUID_EXT_CX16</name><operator pos:start="741:57" pos:end="741:57">)</operator></expr>)</condition><block type="pseudo" pos:start="742:13" pos:end="742:46"><block_content pos:start="742:13" pos:end="742:46">
            <expr_stmt pos:start="742:13" pos:end="742:46"><expr pos:start="742:13" pos:end="742:45"><call pos:start="742:13" pos:end="742:45"><name pos:start="742:13" pos:end="742:22">gen_jmp_im</name><argument_list pos:start="742:23" pos:end="742:45">(<argument pos:start="742:24" pos:end="742:44"><expr pos:start="742:24" pos:end="742:44"><name pos:start="742:24" pos:end="742:31">pc_start</name> <operator pos:start="742:33" pos:end="742:33">-</operator> <name pos:start="742:35" pos:end="742:44"><name pos:start="742:35" pos:end="742:35">s</name><operator pos:start="742:36" pos:end="742:37">-&gt;</operator><name pos:start="742:38" pos:end="742:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt pos:start="743:13" pos:end="743:32"><expr pos:start="743:13" pos:end="743:31"><call pos:start="743:13" pos:end="743:31"><name pos:start="743:13" pos:end="743:28">gen_update_cc_op</name><argument_list pos:start="743:29" pos:end="743:31">(<argument pos:start="743:30" pos:end="743:30"><expr pos:start="743:30" pos:end="743:30"><name pos:start="743:30" pos:end="743:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="744:13" pos:end="744:66"><expr pos:start="744:13" pos:end="744:65"><call pos:start="744:13" pos:end="744:65"><name pos:start="744:13" pos:end="744:25">gen_lea_modrm</name><argument_list pos:start="744:26" pos:end="744:65">(<argument pos:start="744:27" pos:end="744:29"><expr pos:start="744:27" pos:end="744:29"><name pos:start="744:27" pos:end="744:29">env</name></expr></argument>, <argument pos:start="744:32" pos:end="744:32"><expr pos:start="744:32" pos:end="744:32"><name pos:start="744:32" pos:end="744:32">s</name></expr></argument>, <argument pos:start="744:35" pos:end="744:39"><expr pos:start="744:35" pos:end="744:39"><name pos:start="744:35" pos:end="744:39">modrm</name></expr></argument>, <argument pos:start="744:42" pos:end="744:50"><expr pos:start="744:42" pos:end="744:50"><operator pos:start="744:42" pos:end="744:42">&amp;</operator><name pos:start="744:43" pos:end="744:50">reg_addr</name></expr></argument>, <argument pos:start="744:53" pos:end="744:64"><expr pos:start="744:53" pos:end="744:64"><operator pos:start="744:53" pos:end="744:53">&amp;</operator><name pos:start="744:54" pos:end="744:64">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="745:13" pos:end="745:51"><expr pos:start="745:13" pos:end="745:50"><call pos:start="745:13" pos:end="745:50"><name pos:start="745:13" pos:end="745:33">gen_helper_cmpxchg16b</name><argument_list pos:start="745:34" pos:end="745:50">(<argument pos:start="745:35" pos:end="745:41"><expr pos:start="745:35" pos:end="745:41"><name pos:start="745:35" pos:end="745:41">cpu_env</name></expr></argument>, <argument pos:start="745:44" pos:end="745:49"><expr pos:start="745:44" pos:end="745:49"><name pos:start="745:44" pos:end="745:49">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="746:11" pos:end="3141:17">else
<cpp:endif pos:start="747:1" pos:end="747:6">#<cpp:directive pos:start="747:2" pos:end="747:6">endif</cpp:directive></cpp:endif>        
        <block pos:start="748:9" pos:end="3141:17">{<block_content pos:start="749:13" pos:end="3141:17">
            <if_stmt pos:start="749:13" pos:end="750:46"><if pos:start="749:13" pos:end="750:46">if <condition pos:start="749:16" pos:end="749:49">(<expr pos:start="749:17" pos:end="749:48"><operator pos:start="749:17" pos:end="749:17">!</operator><operator pos:start="749:18" pos:end="749:18">(</operator><name pos:start="749:19" pos:end="749:35"><name pos:start="749:19" pos:end="749:19">s</name><operator pos:start="749:20" pos:end="749:21">-&gt;</operator><name pos:start="749:22" pos:end="749:35">cpuid_features</name></name> <operator pos:start="749:37" pos:end="749:37">&amp;</operator> <name pos:start="749:39" pos:end="749:47">CPUID_CX8</name><operator pos:start="749:48" pos:end="749:48">)</operator></expr>)</condition><block type="pseudo" pos:start="750:13" pos:end="750:46"><block_content pos:start="750:13" pos:end="750:46">
            <expr_stmt pos:start="750:13" pos:end="750:46"><expr pos:start="750:13" pos:end="750:45"><call pos:start="750:13" pos:end="750:45"><name pos:start="750:13" pos:end="750:22">gen_jmp_im</name><argument_list pos:start="750:23" pos:end="750:45">(<argument pos:start="750:24" pos:end="750:44"><expr pos:start="750:24" pos:end="750:44"><name pos:start="750:24" pos:end="750:31">pc_start</name> <operator pos:start="750:33" pos:end="750:33">-</operator> <name pos:start="750:35" pos:end="750:44"><name pos:start="750:35" pos:end="750:35">s</name><operator pos:start="750:36" pos:end="750:37">-&gt;</operator><name pos:start="750:38" pos:end="750:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt pos:start="751:13" pos:end="751:32"><expr pos:start="751:13" pos:end="751:31"><call pos:start="751:13" pos:end="751:31"><name pos:start="751:13" pos:end="751:28">gen_update_cc_op</name><argument_list pos:start="751:29" pos:end="751:31">(<argument pos:start="751:30" pos:end="751:30"><expr pos:start="751:30" pos:end="751:30"><name pos:start="751:30" pos:end="751:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="752:13" pos:end="752:66"><expr pos:start="752:13" pos:end="752:65"><call pos:start="752:13" pos:end="752:65"><name pos:start="752:13" pos:end="752:25">gen_lea_modrm</name><argument_list pos:start="752:26" pos:end="752:65">(<argument pos:start="752:27" pos:end="752:29"><expr pos:start="752:27" pos:end="752:29"><name pos:start="752:27" pos:end="752:29">env</name></expr></argument>, <argument pos:start="752:32" pos:end="752:32"><expr pos:start="752:32" pos:end="752:32"><name pos:start="752:32" pos:end="752:32">s</name></expr></argument>, <argument pos:start="752:35" pos:end="752:39"><expr pos:start="752:35" pos:end="752:39"><name pos:start="752:35" pos:end="752:39">modrm</name></expr></argument>, <argument pos:start="752:42" pos:end="752:50"><expr pos:start="752:42" pos:end="752:50"><operator pos:start="752:42" pos:end="752:42">&amp;</operator><name pos:start="752:43" pos:end="752:50">reg_addr</name></expr></argument>, <argument pos:start="752:53" pos:end="752:64"><expr pos:start="752:53" pos:end="752:64"><operator pos:start="752:53" pos:end="752:53">&amp;</operator><name pos:start="752:54" pos:end="752:64">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="753:13" pos:end="753:50"><expr pos:start="753:13" pos:end="753:49"><call pos:start="753:13" pos:end="753:49"><name pos:start="753:13" pos:end="753:32">gen_helper_cmpxchg8b</name><argument_list pos:start="753:33" pos:end="753:49">(<argument pos:start="753:34" pos:end="753:40"><expr pos:start="753:34" pos:end="753:40"><name pos:start="753:34" pos:end="753:40">cpu_env</name></expr></argument>, <argument pos:start="753:43" pos:end="753:48"><expr pos:start="753:43" pos:end="753:48"><name pos:start="753:43" pos:end="753:48">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="754:9" pos:end="754:35"><expr pos:start="754:9" pos:end="754:34"><call pos:start="754:9" pos:end="754:34"><name pos:start="754:9" pos:end="754:17">set_cc_op</name><argument_list pos:start="754:18" pos:end="754:34">(<argument pos:start="754:19" pos:end="754:19"><expr pos:start="754:19" pos:end="754:19"><name pos:start="754:19" pos:end="754:19">s</name></expr></argument>, <argument pos:start="754:22" pos:end="754:33"><expr pos:start="754:22" pos:end="754:33"><name pos:start="754:22" pos:end="754:33">CC_OP_EFLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="755:9" pos:end="755:14">break;</break>
        <comment type="block" format="doxygen" pos:start="756:9" pos:end="756:36">/**************************/</comment>
        <comment type="block" pos:start="757:9" pos:end="757:22">/* push/pop */</comment>
    <case pos:start="758:5" pos:end="758:23">case <expr pos:start="758:10" pos:end="758:22"><literal type="number" pos:start="758:10" pos:end="758:13">0x50</literal> <operator pos:start="758:15" pos:end="758:17">...</operator> <literal type="number" pos:start="758:19" pos:end="758:22">0x57</literal></expr>:</case> <comment type="block" pos:start="758:25" pos:end="758:34">/* push */</comment>
        <expr_stmt pos:start="759:9" pos:end="759:58"><expr pos:start="759:9" pos:end="759:57"><call pos:start="759:9" pos:end="759:57"><name pos:start="759:9" pos:end="759:25">gen_op_mov_TN_reg</name><argument_list pos:start="759:26" pos:end="759:57">(<argument pos:start="759:27" pos:end="759:33"><expr pos:start="759:27" pos:end="759:33"><name pos:start="759:27" pos:end="759:33">OT_LONG</name></expr></argument>, <argument pos:start="759:36" pos:end="759:36"><expr pos:start="759:36" pos:end="759:36"><literal type="number" pos:start="759:36" pos:end="759:36">0</literal></expr></argument>, <argument pos:start="759:39" pos:end="759:56"><expr pos:start="759:39" pos:end="759:56"><operator pos:start="759:39" pos:end="759:39">(</operator><name pos:start="759:40" pos:end="759:40">b</name> <operator pos:start="759:42" pos:end="759:42">&amp;</operator> <literal type="number" pos:start="759:44" pos:end="759:44">7</literal><operator pos:start="759:45" pos:end="759:45">)</operator> <operator pos:start="759:47" pos:end="759:47">|</operator> <call pos:start="759:49" pos:end="759:56"><name pos:start="759:49" pos:end="759:53">REX_B</name><argument_list pos:start="759:54" pos:end="759:56">(<argument pos:start="759:55" pos:end="759:55"><expr pos:start="759:55" pos:end="759:55"><name pos:start="759:55" pos:end="759:55">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="760:9" pos:end="760:23"><expr pos:start="760:9" pos:end="760:22"><call pos:start="760:9" pos:end="760:22"><name pos:start="760:9" pos:end="760:19">gen_push_T0</name><argument_list pos:start="760:20" pos:end="760:22">(<argument pos:start="760:21" pos:end="760:21"><expr pos:start="760:21" pos:end="760:21"><name pos:start="760:21" pos:end="760:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="761:9" pos:end="761:14">break;</break>
    <case pos:start="762:5" pos:end="762:23">case <expr pos:start="762:10" pos:end="762:22"><literal type="number" pos:start="762:10" pos:end="762:13">0x58</literal> <operator pos:start="762:15" pos:end="762:17">...</operator> <literal type="number" pos:start="762:19" pos:end="762:22">0x5f</literal></expr>:</case> <comment type="block" pos:start="762:25" pos:end="762:33">/* pop */</comment>
        <if_stmt pos:start="763:9" pos:end="3141:17"><if pos:start="763:9" pos:end="765:9">if <condition pos:start="763:12" pos:end="763:22">(<expr pos:start="763:13" pos:end="763:21"><call pos:start="763:13" pos:end="763:21"><name pos:start="763:13" pos:end="763:18">CODE64</name><argument_list pos:start="763:19" pos:end="763:21">(<argument pos:start="763:20" pos:end="763:20"><expr pos:start="763:20" pos:end="763:20"><name pos:start="763:20" pos:end="763:20">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="763:24" pos:end="765:9">{<block_content pos:start="764:13" pos:end="764:43">
            <expr_stmt pos:start="764:13" pos:end="764:43"><expr pos:start="764:13" pos:end="764:42"><name pos:start="764:13" pos:end="764:14">ot</name> <operator pos:start="764:16" pos:end="764:16">=</operator> <ternary pos:start="764:18" pos:end="764:42"><condition pos:start="764:18" pos:end="764:24"><expr pos:start="764:18" pos:end="764:22"><name pos:start="764:18" pos:end="764:22">dflag</name></expr> ?</condition><then pos:start="764:26" pos:end="764:32"> <expr pos:start="764:26" pos:end="764:32"><name pos:start="764:26" pos:end="764:32">OT_QUAD</name></expr> </then><else pos:start="764:34" pos:end="764:42">: <expr pos:start="764:36" pos:end="764:42"><name pos:start="764:36" pos:end="764:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="765:11" pos:end="3141:17">else <block pos:start="765:16" pos:end="3141:17">{<block_content pos:start="766:13" pos:end="3141:17">
            <expr_stmt pos:start="766:13" pos:end="766:33"><expr pos:start="766:13" pos:end="766:32"><name pos:start="766:13" pos:end="766:14">ot</name> <operator pos:start="766:16" pos:end="766:16">=</operator> <name pos:start="766:18" pos:end="766:22">dflag</name> <operator pos:start="766:24" pos:end="766:24">+</operator> <name pos:start="766:26" pos:end="766:32">OT_WORD</name></expr>;</expr_stmt>
        <expr_stmt pos:start="767:9" pos:end="767:22"><expr pos:start="767:9" pos:end="767:21"><call pos:start="767:9" pos:end="767:21"><name pos:start="767:9" pos:end="767:18">gen_pop_T0</name><argument_list pos:start="767:19" pos:end="767:21">(<argument pos:start="767:20" pos:end="767:20"><expr pos:start="767:20" pos:end="767:20"><name pos:start="767:20" pos:end="767:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="768:9" pos:end="768:50">/* NOTE: order is important for pop %sp */</comment>
        <expr_stmt pos:start="769:9" pos:end="769:26"><expr pos:start="769:9" pos:end="769:25"><call pos:start="769:9" pos:end="769:25"><name pos:start="769:9" pos:end="769:22">gen_pop_update</name><argument_list pos:start="769:23" pos:end="769:25">(<argument pos:start="769:24" pos:end="769:24"><expr pos:start="769:24" pos:end="769:24"><name pos:start="769:24" pos:end="769:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="770:9" pos:end="770:50"><expr pos:start="770:9" pos:end="770:49"><call pos:start="770:9" pos:end="770:49"><name pos:start="770:9" pos:end="770:25">gen_op_mov_reg_T0</name><argument_list pos:start="770:26" pos:end="770:49">(<argument pos:start="770:27" pos:end="770:28"><expr pos:start="770:27" pos:end="770:28"><name pos:start="770:27" pos:end="770:28">ot</name></expr></argument>, <argument pos:start="770:31" pos:end="770:48"><expr pos:start="770:31" pos:end="770:48"><operator pos:start="770:31" pos:end="770:31">(</operator><name pos:start="770:32" pos:end="770:32">b</name> <operator pos:start="770:34" pos:end="770:34">&amp;</operator> <literal type="number" pos:start="770:36" pos:end="770:36">7</literal><operator pos:start="770:37" pos:end="770:37">)</operator> <operator pos:start="770:39" pos:end="770:39">|</operator> <call pos:start="770:41" pos:end="770:48"><name pos:start="770:41" pos:end="770:45">REX_B</name><argument_list pos:start="770:46" pos:end="770:48">(<argument pos:start="770:47" pos:end="770:47"><expr pos:start="770:47" pos:end="770:47"><name pos:start="770:47" pos:end="770:47">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="771:9" pos:end="771:14">break;</break>
    <case pos:start="772:5" pos:end="772:14">case <expr pos:start="772:10" pos:end="772:13"><literal type="number" pos:start="772:10" pos:end="772:13">0x60</literal></expr>:</case> <comment type="block" pos:start="772:16" pos:end="772:26">/* pusha */</comment>
        <if_stmt pos:start="773:9" pos:end="774:21"><if pos:start="773:9" pos:end="774:21">if <condition pos:start="773:12" pos:end="773:22">(<expr pos:start="773:13" pos:end="773:21"><call pos:start="773:13" pos:end="773:21"><name pos:start="773:13" pos:end="773:18">CODE64</name><argument_list pos:start="773:19" pos:end="773:21">(<argument pos:start="773:20" pos:end="773:20"><expr pos:start="773:20" pos:end="773:20"><name pos:start="773:20" pos:end="773:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="774:9" pos:end="774:21"><block_content pos:start="774:9" pos:end="774:21">
        <expr_stmt pos:start="774:9" pos:end="774:21"><expr pos:start="774:9" pos:end="774:20"><call pos:start="774:9" pos:end="774:20"><name pos:start="774:9" pos:end="774:17">gen_pusha</name><argument_list pos:start="774:18" pos:end="774:20">(<argument pos:start="774:19" pos:end="774:19"><expr pos:start="774:19" pos:end="774:19"><name pos:start="774:19" pos:end="774:19">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <break pos:start="775:9" pos:end="775:14">break;</break>
    <case pos:start="776:5" pos:end="776:14">case <expr pos:start="776:10" pos:end="776:13"><literal type="number" pos:start="776:10" pos:end="776:13">0x61</literal></expr>:</case> <comment type="block" pos:start="776:16" pos:end="776:25">/* popa */</comment>
        <if_stmt pos:start="777:9" pos:end="778:20"><if pos:start="777:9" pos:end="778:20">if <condition pos:start="777:12" pos:end="777:22">(<expr pos:start="777:13" pos:end="777:21"><call pos:start="777:13" pos:end="777:21"><name pos:start="777:13" pos:end="777:18">CODE64</name><argument_list pos:start="777:19" pos:end="777:21">(<argument pos:start="777:20" pos:end="777:20"><expr pos:start="777:20" pos:end="777:20"><name pos:start="777:20" pos:end="777:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="778:9" pos:end="778:20"><block_content pos:start="778:9" pos:end="778:20">
        <expr_stmt pos:start="778:9" pos:end="778:20"><expr pos:start="778:9" pos:end="778:19"><call pos:start="778:9" pos:end="778:19"><name pos:start="778:9" pos:end="778:16">gen_popa</name><argument_list pos:start="778:17" pos:end="778:19">(<argument pos:start="778:18" pos:end="778:18"><expr pos:start="778:18" pos:end="778:18"><name pos:start="778:18" pos:end="778:18">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <break pos:start="779:9" pos:end="779:14">break;</break>
    <case pos:start="780:5" pos:end="780:14">case <expr pos:start="780:10" pos:end="780:13"><literal type="number" pos:start="780:10" pos:end="780:13">0x68</literal></expr>:</case> <comment type="block" pos:start="780:16" pos:end="780:28">/* push Iv */</comment>
    <case pos:start="781:5" pos:end="781:14">case <expr pos:start="781:10" pos:end="781:13"><literal type="number" pos:start="781:10" pos:end="781:13">0x6a</literal></expr>:</case>
        <if_stmt pos:start="782:9" pos:end="3141:17"><if pos:start="782:9" pos:end="784:9">if <condition pos:start="782:12" pos:end="782:22">(<expr pos:start="782:13" pos:end="782:21"><call pos:start="782:13" pos:end="782:21"><name pos:start="782:13" pos:end="782:18">CODE64</name><argument_list pos:start="782:19" pos:end="782:21">(<argument pos:start="782:20" pos:end="782:20"><expr pos:start="782:20" pos:end="782:20"><name pos:start="782:20" pos:end="782:20">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="782:24" pos:end="784:9">{<block_content pos:start="783:13" pos:end="783:43">
            <expr_stmt pos:start="783:13" pos:end="783:43"><expr pos:start="783:13" pos:end="783:42"><name pos:start="783:13" pos:end="783:14">ot</name> <operator pos:start="783:16" pos:end="783:16">=</operator> <ternary pos:start="783:18" pos:end="783:42"><condition pos:start="783:18" pos:end="783:24"><expr pos:start="783:18" pos:end="783:22"><name pos:start="783:18" pos:end="783:22">dflag</name></expr> ?</condition><then pos:start="783:26" pos:end="783:32"> <expr pos:start="783:26" pos:end="783:32"><name pos:start="783:26" pos:end="783:32">OT_QUAD</name></expr> </then><else pos:start="783:34" pos:end="783:42">: <expr pos:start="783:36" pos:end="783:42"><name pos:start="783:36" pos:end="783:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="784:11" pos:end="3141:17">else <block pos:start="784:16" pos:end="3141:17">{<block_content pos:start="785:13" pos:end="3141:17">
            <expr_stmt pos:start="785:13" pos:end="785:33"><expr pos:start="785:13" pos:end="785:32"><name pos:start="785:13" pos:end="785:14">ot</name> <operator pos:start="785:16" pos:end="785:16">=</operator> <name pos:start="785:18" pos:end="785:22">dflag</name> <operator pos:start="785:24" pos:end="785:24">+</operator> <name pos:start="785:26" pos:end="785:32">OT_WORD</name></expr>;</expr_stmt>
        <if_stmt pos:start="786:9" pos:end="789:52"><if pos:start="786:9" pos:end="787:39">if <condition pos:start="786:12" pos:end="786:22">(<expr pos:start="786:13" pos:end="786:21"><name pos:start="786:13" pos:end="786:13">b</name> <operator pos:start="786:15" pos:end="786:16">==</operator> <literal type="number" pos:start="786:18" pos:end="786:21">0x68</literal></expr>)</condition><block type="pseudo" pos:start="787:13" pos:end="787:39"><block_content pos:start="787:13" pos:end="787:39">
            <expr_stmt pos:start="787:13" pos:end="787:39"><expr pos:start="787:13" pos:end="787:38"><name pos:start="787:13" pos:end="787:15">val</name> <operator pos:start="787:17" pos:end="787:17">=</operator> <call pos:start="787:19" pos:end="787:38"><name pos:start="787:19" pos:end="787:26">insn_get</name><argument_list pos:start="787:27" pos:end="787:38">(<argument pos:start="787:28" pos:end="787:30"><expr pos:start="787:28" pos:end="787:30"><name pos:start="787:28" pos:end="787:30">env</name></expr></argument>, <argument pos:start="787:33" pos:end="787:33"><expr pos:start="787:33" pos:end="787:33"><name pos:start="787:33" pos:end="787:33">s</name></expr></argument>, <argument pos:start="787:36" pos:end="787:37"><expr pos:start="787:36" pos:end="787:37"><name pos:start="787:36" pos:end="787:37">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else pos:start="788:9" pos:end="789:52">else<block type="pseudo" pos:start="789:13" pos:end="789:52"><block_content pos:start="789:13" pos:end="789:52">
            <expr_stmt pos:start="789:13" pos:end="789:52"><expr pos:start="789:13" pos:end="789:51"><name pos:start="789:13" pos:end="789:15">val</name> <operator pos:start="789:17" pos:end="789:17">=</operator> <operator pos:start="789:19" pos:end="789:19">(</operator><name pos:start="789:20" pos:end="789:25">int8_t</name><operator pos:start="789:26" pos:end="789:26">)</operator><call pos:start="789:27" pos:end="789:51"><name pos:start="789:27" pos:end="789:34">insn_get</name><argument_list pos:start="789:35" pos:end="789:51">(<argument pos:start="789:36" pos:end="789:38"><expr pos:start="789:36" pos:end="789:38"><name pos:start="789:36" pos:end="789:38">env</name></expr></argument>, <argument pos:start="789:41" pos:end="789:41"><expr pos:start="789:41" pos:end="789:41"><name pos:start="789:41" pos:end="789:41">s</name></expr></argument>, <argument pos:start="789:44" pos:end="789:50"><expr pos:start="789:44" pos:end="789:50"><name pos:start="789:44" pos:end="789:50">OT_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt pos:start="790:9" pos:end="790:31"><expr pos:start="790:9" pos:end="790:30"><call pos:start="790:9" pos:end="790:30"><name pos:start="790:9" pos:end="790:25">gen_op_movl_T0_im</name><argument_list pos:start="790:26" pos:end="790:30">(<argument pos:start="790:27" pos:end="790:29"><expr pos:start="790:27" pos:end="790:29"><name pos:start="790:27" pos:end="790:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="791:9" pos:end="791:23"><expr pos:start="791:9" pos:end="791:22"><call pos:start="791:9" pos:end="791:22"><name pos:start="791:9" pos:end="791:19">gen_push_T0</name><argument_list pos:start="791:20" pos:end="791:22">(<argument pos:start="791:21" pos:end="791:21"><expr pos:start="791:21" pos:end="791:21"><name pos:start="791:21" pos:end="791:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="792:9" pos:end="792:14">break;</break>
    <case pos:start="793:5" pos:end="793:14">case <expr pos:start="793:10" pos:end="793:13"><literal type="number" pos:start="793:10" pos:end="793:13">0x8f</literal></expr>:</case> <comment type="block" pos:start="793:16" pos:end="793:27">/* pop Ev */</comment>
        <if_stmt pos:start="794:9" pos:end="3141:17"><if pos:start="794:9" pos:end="796:9">if <condition pos:start="794:12" pos:end="794:22">(<expr pos:start="794:13" pos:end="794:21"><call pos:start="794:13" pos:end="794:21"><name pos:start="794:13" pos:end="794:18">CODE64</name><argument_list pos:start="794:19" pos:end="794:21">(<argument pos:start="794:20" pos:end="794:20"><expr pos:start="794:20" pos:end="794:20"><name pos:start="794:20" pos:end="794:20">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="794:24" pos:end="796:9">{<block_content pos:start="795:13" pos:end="795:43">
            <expr_stmt pos:start="795:13" pos:end="795:43"><expr pos:start="795:13" pos:end="795:42"><name pos:start="795:13" pos:end="795:14">ot</name> <operator pos:start="795:16" pos:end="795:16">=</operator> <ternary pos:start="795:18" pos:end="795:42"><condition pos:start="795:18" pos:end="795:24"><expr pos:start="795:18" pos:end="795:22"><name pos:start="795:18" pos:end="795:22">dflag</name></expr> ?</condition><then pos:start="795:26" pos:end="795:32"> <expr pos:start="795:26" pos:end="795:32"><name pos:start="795:26" pos:end="795:32">OT_QUAD</name></expr> </then><else pos:start="795:34" pos:end="795:42">: <expr pos:start="795:36" pos:end="795:42"><name pos:start="795:36" pos:end="795:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="796:11" pos:end="3141:17">else <block pos:start="796:16" pos:end="3141:17">{<block_content pos:start="797:13" pos:end="3141:17">
            <expr_stmt pos:start="797:13" pos:end="797:33"><expr pos:start="797:13" pos:end="797:32"><name pos:start="797:13" pos:end="797:14">ot</name> <operator pos:start="797:16" pos:end="797:16">=</operator> <name pos:start="797:18" pos:end="797:22">dflag</name> <operator pos:start="797:24" pos:end="797:24">+</operator> <name pos:start="797:26" pos:end="797:32">OT_WORD</name></expr>;</expr_stmt>
        <expr_stmt pos:start="798:9" pos:end="798:44"><expr pos:start="798:9" pos:end="798:43"><name pos:start="798:9" pos:end="798:13">modrm</name> <operator pos:start="798:15" pos:end="798:15">=</operator> <call pos:start="798:17" pos:end="798:43"><name pos:start="798:17" pos:end="798:29">cpu_ldub_code</name><argument_list pos:start="798:30" pos:end="798:43">(<argument pos:start="798:31" pos:end="798:33"><expr pos:start="798:31" pos:end="798:33"><name pos:start="798:31" pos:end="798:33">env</name></expr></argument>, <argument pos:start="798:36" pos:end="798:42"><expr pos:start="798:36" pos:end="798:42"><name pos:start="798:36" pos:end="798:40"><name pos:start="798:36" pos:end="798:36">s</name><operator pos:start="798:37" pos:end="798:38">-&gt;</operator><name pos:start="798:39" pos:end="798:40">pc</name></name><operator pos:start="798:41" pos:end="798:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="799:9" pos:end="799:31"><expr pos:start="799:9" pos:end="799:30"><name pos:start="799:9" pos:end="799:11">mod</name> <operator pos:start="799:13" pos:end="799:13">=</operator> <operator pos:start="799:15" pos:end="799:15">(</operator><name pos:start="799:16" pos:end="799:20">modrm</name> <operator pos:start="799:22" pos:end="799:23">&gt;&gt;</operator> <literal type="number" pos:start="799:25" pos:end="799:25">6</literal><operator pos:start="799:26" pos:end="799:26">)</operator> <operator pos:start="799:28" pos:end="799:28">&amp;</operator> <literal type="number" pos:start="799:30" pos:end="799:30">3</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="800:9" pos:end="800:22"><expr pos:start="800:9" pos:end="800:21"><call pos:start="800:9" pos:end="800:21"><name pos:start="800:9" pos:end="800:18">gen_pop_T0</name><argument_list pos:start="800:19" pos:end="800:21">(<argument pos:start="800:20" pos:end="800:20"><expr pos:start="800:20" pos:end="800:20"><name pos:start="800:20" pos:end="800:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="801:9" pos:end="3141:17"><if pos:start="801:9" pos:end="806:9">if <condition pos:start="801:12" pos:end="801:21">(<expr pos:start="801:13" pos:end="801:20"><name pos:start="801:13" pos:end="801:15">mod</name> <operator pos:start="801:17" pos:end="801:18">==</operator> <literal type="number" pos:start="801:20" pos:end="801:20">3</literal></expr>)</condition> <block pos:start="801:23" pos:end="806:9">{<block_content pos:start="803:13" pos:end="805:38">
            <comment type="block" pos:start="802:13" pos:end="802:54">/* NOTE: order is important for pop %sp */</comment>
            <expr_stmt pos:start="803:13" pos:end="803:30"><expr pos:start="803:13" pos:end="803:29"><call pos:start="803:13" pos:end="803:29"><name pos:start="803:13" pos:end="803:26">gen_pop_update</name><argument_list pos:start="803:27" pos:end="803:29">(<argument pos:start="803:28" pos:end="803:28"><expr pos:start="803:28" pos:end="803:28"><name pos:start="803:28" pos:end="803:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="804:13" pos:end="804:40"><expr pos:start="804:13" pos:end="804:39"><name pos:start="804:13" pos:end="804:14">rm</name> <operator pos:start="804:16" pos:end="804:16">=</operator> <operator pos:start="804:18" pos:end="804:18">(</operator><name pos:start="804:19" pos:end="804:23">modrm</name> <operator pos:start="804:25" pos:end="804:25">&amp;</operator> <literal type="number" pos:start="804:27" pos:end="804:27">7</literal><operator pos:start="804:28" pos:end="804:28">)</operator> <operator pos:start="804:30" pos:end="804:30">|</operator> <call pos:start="804:32" pos:end="804:39"><name pos:start="804:32" pos:end="804:36">REX_B</name><argument_list pos:start="804:37" pos:end="804:39">(<argument pos:start="804:38" pos:end="804:38"><expr pos:start="804:38" pos:end="804:38"><name pos:start="804:38" pos:end="804:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="805:13" pos:end="805:38"><expr pos:start="805:13" pos:end="805:37"><call pos:start="805:13" pos:end="805:37"><name pos:start="805:13" pos:end="805:29">gen_op_mov_reg_T0</name><argument_list pos:start="805:30" pos:end="805:37">(<argument pos:start="805:31" pos:end="805:32"><expr pos:start="805:31" pos:end="805:32"><name pos:start="805:31" pos:end="805:32">ot</name></expr></argument>, <argument pos:start="805:35" pos:end="805:36"><expr pos:start="805:35" pos:end="805:36"><name pos:start="805:35" pos:end="805:36">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="806:11" pos:end="3141:17">else <block pos:start="806:16" pos:end="3141:17">{<block_content pos:start="808:13" pos:end="3141:17">
            <comment type="block" pos:start="807:13" pos:end="807:65">/* NOTE: order is important too for MMU exceptions */</comment>
            <expr_stmt pos:start="808:13" pos:end="808:39"><expr pos:start="808:13" pos:end="808:38"><name pos:start="808:13" pos:end="808:28"><name pos:start="808:13" pos:end="808:13">s</name><operator pos:start="808:14" pos:end="808:15">-&gt;</operator><name pos:start="808:16" pos:end="808:28">popl_esp_hack</name></name> <operator pos:start="808:30" pos:end="808:30">=</operator> <literal type="number" pos:start="808:32" pos:end="808:32">1</literal> <operator pos:start="808:34" pos:end="808:35">&lt;&lt;</operator> <name pos:start="808:37" pos:end="808:38">ot</name></expr>;</expr_stmt>
            <expr_stmt pos:start="809:13" pos:end="809:58"><expr pos:start="809:13" pos:end="809:57"><call pos:start="809:13" pos:end="809:57"><name pos:start="809:13" pos:end="809:26">gen_ldst_modrm</name><argument_list pos:start="809:27" pos:end="809:57">(<argument pos:start="809:28" pos:end="809:30"><expr pos:start="809:28" pos:end="809:30"><name pos:start="809:28" pos:end="809:30">env</name></expr></argument>, <argument pos:start="809:33" pos:end="809:33"><expr pos:start="809:33" pos:end="809:33"><name pos:start="809:33" pos:end="809:33">s</name></expr></argument>, <argument pos:start="809:36" pos:end="809:40"><expr pos:start="809:36" pos:end="809:40"><name pos:start="809:36" pos:end="809:40">modrm</name></expr></argument>, <argument pos:start="809:43" pos:end="809:44"><expr pos:start="809:43" pos:end="809:44"><name pos:start="809:43" pos:end="809:44">ot</name></expr></argument>, <argument pos:start="809:47" pos:end="809:53"><expr pos:start="809:47" pos:end="809:53"><name pos:start="809:47" pos:end="809:53">OR_TMP0</name></expr></argument>, <argument pos:start="809:56" pos:end="809:56"><expr pos:start="809:56" pos:end="809:56"><literal type="number" pos:start="809:56" pos:end="809:56">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="810:13" pos:end="810:33"><expr pos:start="810:13" pos:end="810:32"><name pos:start="810:13" pos:end="810:28"><name pos:start="810:13" pos:end="810:13">s</name><operator pos:start="810:14" pos:end="810:15">-&gt;</operator><name pos:start="810:16" pos:end="810:28">popl_esp_hack</name></name> <operator pos:start="810:30" pos:end="810:30">=</operator> <literal type="number" pos:start="810:32" pos:end="810:32">0</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="811:13" pos:end="811:30"><expr pos:start="811:13" pos:end="811:29"><call pos:start="811:13" pos:end="811:29"><name pos:start="811:13" pos:end="811:26">gen_pop_update</name><argument_list pos:start="811:27" pos:end="811:29">(<argument pos:start="811:28" pos:end="811:28"><expr pos:start="811:28" pos:end="811:28"><name pos:start="811:28" pos:end="811:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="812:9" pos:end="812:14">break;</break>
    <case pos:start="813:5" pos:end="813:14">case <expr pos:start="813:10" pos:end="813:13"><literal type="number" pos:start="813:10" pos:end="813:13">0xc8</literal></expr>:</case> <comment type="block" pos:start="813:16" pos:end="813:26">/* enter */</comment>
        <block pos:start="814:9" pos:end="3141:17">{<block_content pos:start="815:13" pos:end="3141:17">
            <decl_stmt pos:start="815:13" pos:end="815:22"><decl pos:start="815:13" pos:end="815:21"><type pos:start="815:13" pos:end="815:15"><name pos:start="815:13" pos:end="815:15">int</name></type> <name pos:start="815:17" pos:end="815:21">level</name></decl>;</decl_stmt>
            <expr_stmt pos:start="816:13" pos:end="816:44"><expr pos:start="816:13" pos:end="816:43"><name pos:start="816:13" pos:end="816:15">val</name> <operator pos:start="816:17" pos:end="816:17">=</operator> <call pos:start="816:19" pos:end="816:43"><name pos:start="816:19" pos:end="816:31">cpu_lduw_code</name><argument_list pos:start="816:32" pos:end="816:43">(<argument pos:start="816:33" pos:end="816:35"><expr pos:start="816:33" pos:end="816:35"><name pos:start="816:33" pos:end="816:35">env</name></expr></argument>, <argument pos:start="816:38" pos:end="816:42"><expr pos:start="816:38" pos:end="816:42"><name pos:start="816:38" pos:end="816:42"><name pos:start="816:38" pos:end="816:38">s</name><operator pos:start="816:39" pos:end="816:40">-&gt;</operator><name pos:start="816:41" pos:end="816:42">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="817:13" pos:end="817:23"><expr pos:start="817:13" pos:end="817:22"><name pos:start="817:13" pos:end="817:17"><name pos:start="817:13" pos:end="817:13">s</name><operator pos:start="817:14" pos:end="817:15">-&gt;</operator><name pos:start="817:16" pos:end="817:17">pc</name></name> <operator pos:start="817:19" pos:end="817:20">+=</operator> <literal type="number" pos:start="817:22" pos:end="817:22">2</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="818:13" pos:end="818:48"><expr pos:start="818:13" pos:end="818:47"><name pos:start="818:13" pos:end="818:17">level</name> <operator pos:start="818:19" pos:end="818:19">=</operator> <call pos:start="818:21" pos:end="818:47"><name pos:start="818:21" pos:end="818:33">cpu_ldub_code</name><argument_list pos:start="818:34" pos:end="818:47">(<argument pos:start="818:35" pos:end="818:37"><expr pos:start="818:35" pos:end="818:37"><name pos:start="818:35" pos:end="818:37">env</name></expr></argument>, <argument pos:start="818:40" pos:end="818:46"><expr pos:start="818:40" pos:end="818:46"><name pos:start="818:40" pos:end="818:44"><name pos:start="818:40" pos:end="818:40">s</name><operator pos:start="818:41" pos:end="818:42">-&gt;</operator><name pos:start="818:43" pos:end="818:44">pc</name></name><operator pos:start="818:45" pos:end="818:46">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="819:13" pos:end="819:37"><expr pos:start="819:13" pos:end="819:36"><call pos:start="819:13" pos:end="819:36"><name pos:start="819:13" pos:end="819:21">gen_enter</name><argument_list pos:start="819:22" pos:end="819:36">(<argument pos:start="819:23" pos:end="819:23"><expr pos:start="819:23" pos:end="819:23"><name pos:start="819:23" pos:end="819:23">s</name></expr></argument>, <argument pos:start="819:26" pos:end="819:28"><expr pos:start="819:26" pos:end="819:28"><name pos:start="819:26" pos:end="819:28">val</name></expr></argument>, <argument pos:start="819:31" pos:end="819:35"><expr pos:start="819:31" pos:end="819:35"><name pos:start="819:31" pos:end="819:35">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="820:9" pos:end="820:14">break;</break>
    <case pos:start="821:5" pos:end="821:14">case <expr pos:start="821:10" pos:end="821:13"><literal type="number" pos:start="821:10" pos:end="821:13">0xc9</literal></expr>:</case> <comment type="block" pos:start="821:16" pos:end="821:26">/* leave */</comment>
        <comment type="block" pos:start="822:9" pos:end="822:84">/* XXX: exception not precise (ESP is updated before potential exception) */</comment>
        <if_stmt pos:start="823:9" pos:end="3141:17"><if pos:start="823:9" pos:end="826:9">if <condition pos:start="823:12" pos:end="823:22">(<expr pos:start="823:13" pos:end="823:21"><call pos:start="823:13" pos:end="823:21"><name pos:start="823:13" pos:end="823:18">CODE64</name><argument_list pos:start="823:19" pos:end="823:21">(<argument pos:start="823:20" pos:end="823:20"><expr pos:start="823:20" pos:end="823:20"><name pos:start="823:20" pos:end="823:20">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="823:24" pos:end="826:9">{<block_content pos:start="824:13" pos:end="825:46">
            <expr_stmt pos:start="824:13" pos:end="824:49"><expr pos:start="824:13" pos:end="824:48"><call pos:start="824:13" pos:end="824:48"><name pos:start="824:13" pos:end="824:29">gen_op_mov_TN_reg</name><argument_list pos:start="824:30" pos:end="824:48">(<argument pos:start="824:31" pos:end="824:37"><expr pos:start="824:31" pos:end="824:37"><name pos:start="824:31" pos:end="824:37">OT_QUAD</name></expr></argument>, <argument pos:start="824:40" pos:end="824:40"><expr pos:start="824:40" pos:end="824:40"><literal type="number" pos:start="824:40" pos:end="824:40">0</literal></expr></argument>, <argument pos:start="824:43" pos:end="824:47"><expr pos:start="824:43" pos:end="824:47"><name pos:start="824:43" pos:end="824:47">R_EBP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="825:13" pos:end="825:46"><expr pos:start="825:13" pos:end="825:45"><call pos:start="825:13" pos:end="825:45"><name pos:start="825:13" pos:end="825:29">gen_op_mov_reg_T0</name><argument_list pos:start="825:30" pos:end="825:45">(<argument pos:start="825:31" pos:end="825:37"><expr pos:start="825:31" pos:end="825:37"><name pos:start="825:31" pos:end="825:37">OT_QUAD</name></expr></argument>, <argument pos:start="825:40" pos:end="825:44"><expr pos:start="825:40" pos:end="825:44"><name pos:start="825:40" pos:end="825:44">R_ESP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="826:11" pos:end="829:9">else if <condition pos:start="826:19" pos:end="826:27">(<expr pos:start="826:20" pos:end="826:26"><name pos:start="826:20" pos:end="826:26"><name pos:start="826:20" pos:end="826:20">s</name><operator pos:start="826:21" pos:end="826:22">-&gt;</operator><name pos:start="826:23" pos:end="826:26">ss32</name></name></expr>)</condition> <block pos:start="826:29" pos:end="829:9">{<block_content pos:start="827:13" pos:end="828:46">
            <expr_stmt pos:start="827:13" pos:end="827:49"><expr pos:start="827:13" pos:end="827:48"><call pos:start="827:13" pos:end="827:48"><name pos:start="827:13" pos:end="827:29">gen_op_mov_TN_reg</name><argument_list pos:start="827:30" pos:end="827:48">(<argument pos:start="827:31" pos:end="827:37"><expr pos:start="827:31" pos:end="827:37"><name pos:start="827:31" pos:end="827:37">OT_LONG</name></expr></argument>, <argument pos:start="827:40" pos:end="827:40"><expr pos:start="827:40" pos:end="827:40"><literal type="number" pos:start="827:40" pos:end="827:40">0</literal></expr></argument>, <argument pos:start="827:43" pos:end="827:47"><expr pos:start="827:43" pos:end="827:47"><name pos:start="827:43" pos:end="827:47">R_EBP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="828:13" pos:end="828:46"><expr pos:start="828:13" pos:end="828:45"><call pos:start="828:13" pos:end="828:45"><name pos:start="828:13" pos:end="828:29">gen_op_mov_reg_T0</name><argument_list pos:start="828:30" pos:end="828:45">(<argument pos:start="828:31" pos:end="828:37"><expr pos:start="828:31" pos:end="828:37"><name pos:start="828:31" pos:end="828:37">OT_LONG</name></expr></argument>, <argument pos:start="828:40" pos:end="828:44"><expr pos:start="828:40" pos:end="828:44"><name pos:start="828:40" pos:end="828:44">R_ESP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="829:11" pos:end="3141:17">else <block pos:start="829:16" pos:end="3141:17">{<block_content pos:start="830:13" pos:end="3141:17">
            <expr_stmt pos:start="830:13" pos:end="830:49"><expr pos:start="830:13" pos:end="830:48"><call pos:start="830:13" pos:end="830:48"><name pos:start="830:13" pos:end="830:29">gen_op_mov_TN_reg</name><argument_list pos:start="830:30" pos:end="830:48">(<argument pos:start="830:31" pos:end="830:37"><expr pos:start="830:31" pos:end="830:37"><name pos:start="830:31" pos:end="830:37">OT_WORD</name></expr></argument>, <argument pos:start="830:40" pos:end="830:40"><expr pos:start="830:40" pos:end="830:40"><literal type="number" pos:start="830:40" pos:end="830:40">0</literal></expr></argument>, <argument pos:start="830:43" pos:end="830:47"><expr pos:start="830:43" pos:end="830:47"><name pos:start="830:43" pos:end="830:47">R_EBP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="831:13" pos:end="831:46"><expr pos:start="831:13" pos:end="831:45"><call pos:start="831:13" pos:end="831:45"><name pos:start="831:13" pos:end="831:29">gen_op_mov_reg_T0</name><argument_list pos:start="831:30" pos:end="831:45">(<argument pos:start="831:31" pos:end="831:37"><expr pos:start="831:31" pos:end="831:37"><name pos:start="831:31" pos:end="831:37">OT_WORD</name></expr></argument>, <argument pos:start="831:40" pos:end="831:44"><expr pos:start="831:40" pos:end="831:44"><name pos:start="831:40" pos:end="831:44">R_ESP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="832:9" pos:end="832:22"><expr pos:start="832:9" pos:end="832:21"><call pos:start="832:9" pos:end="832:21"><name pos:start="832:9" pos:end="832:18">gen_pop_T0</name><argument_list pos:start="832:19" pos:end="832:21">(<argument pos:start="832:20" pos:end="832:20"><expr pos:start="832:20" pos:end="832:20"><name pos:start="832:20" pos:end="832:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="833:9" pos:end="3141:17"><if pos:start="833:9" pos:end="835:9">if <condition pos:start="833:12" pos:end="833:22">(<expr pos:start="833:13" pos:end="833:21"><call pos:start="833:13" pos:end="833:21"><name pos:start="833:13" pos:end="833:18">CODE64</name><argument_list pos:start="833:19" pos:end="833:21">(<argument pos:start="833:20" pos:end="833:20"><expr pos:start="833:20" pos:end="833:20"><name pos:start="833:20" pos:end="833:20">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="833:24" pos:end="835:9">{<block_content pos:start="834:13" pos:end="834:43">
            <expr_stmt pos:start="834:13" pos:end="834:43"><expr pos:start="834:13" pos:end="834:42"><name pos:start="834:13" pos:end="834:14">ot</name> <operator pos:start="834:16" pos:end="834:16">=</operator> <ternary pos:start="834:18" pos:end="834:42"><condition pos:start="834:18" pos:end="834:24"><expr pos:start="834:18" pos:end="834:22"><name pos:start="834:18" pos:end="834:22">dflag</name></expr> ?</condition><then pos:start="834:26" pos:end="834:32"> <expr pos:start="834:26" pos:end="834:32"><name pos:start="834:26" pos:end="834:32">OT_QUAD</name></expr> </then><else pos:start="834:34" pos:end="834:42">: <expr pos:start="834:36" pos:end="834:42"><name pos:start="834:36" pos:end="834:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="835:11" pos:end="3141:17">else <block pos:start="835:16" pos:end="3141:17">{<block_content pos:start="836:13" pos:end="3141:17">
            <expr_stmt pos:start="836:13" pos:end="836:33"><expr pos:start="836:13" pos:end="836:32"><name pos:start="836:13" pos:end="836:14">ot</name> <operator pos:start="836:16" pos:end="836:16">=</operator> <name pos:start="836:18" pos:end="836:22">dflag</name> <operator pos:start="836:24" pos:end="836:24">+</operator> <name pos:start="836:26" pos:end="836:32">OT_WORD</name></expr>;</expr_stmt>
        <expr_stmt pos:start="837:9" pos:end="837:37"><expr pos:start="837:9" pos:end="837:36"><call pos:start="837:9" pos:end="837:36"><name pos:start="837:9" pos:end="837:25">gen_op_mov_reg_T0</name><argument_list pos:start="837:26" pos:end="837:36">(<argument pos:start="837:27" pos:end="837:28"><expr pos:start="837:27" pos:end="837:28"><name pos:start="837:27" pos:end="837:28">ot</name></expr></argument>, <argument pos:start="837:31" pos:end="837:35"><expr pos:start="837:31" pos:end="837:35"><name pos:start="837:31" pos:end="837:35">R_EBP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="838:9" pos:end="838:26"><expr pos:start="838:9" pos:end="838:25"><call pos:start="838:9" pos:end="838:25"><name pos:start="838:9" pos:end="838:22">gen_pop_update</name><argument_list pos:start="838:23" pos:end="838:25">(<argument pos:start="838:24" pos:end="838:24"><expr pos:start="838:24" pos:end="838:24"><name pos:start="838:24" pos:end="838:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="839:9" pos:end="839:14">break;</break>
    <case pos:start="840:5" pos:end="840:14">case <expr pos:start="840:10" pos:end="840:13"><literal type="number" pos:start="840:10" pos:end="840:13">0x06</literal></expr>:</case> <comment type="block" pos:start="840:16" pos:end="840:28">/* push es */</comment>
    <case pos:start="841:5" pos:end="841:14">case <expr pos:start="841:10" pos:end="841:13"><literal type="number" pos:start="841:10" pos:end="841:13">0x0e</literal></expr>:</case> <comment type="block" pos:start="841:16" pos:end="841:28">/* push cs */</comment>
    <case pos:start="842:5" pos:end="842:14">case <expr pos:start="842:10" pos:end="842:13"><literal type="number" pos:start="842:10" pos:end="842:13">0x16</literal></expr>:</case> <comment type="block" pos:start="842:16" pos:end="842:28">/* push ss */</comment>
    <case pos:start="843:5" pos:end="843:14">case <expr pos:start="843:10" pos:end="843:13"><literal type="number" pos:start="843:10" pos:end="843:13">0x1e</literal></expr>:</case> <comment type="block" pos:start="843:16" pos:end="843:28">/* push ds */</comment>
        <if_stmt pos:start="844:9" pos:end="845:35"><if pos:start="844:9" pos:end="845:35">if <condition pos:start="844:12" pos:end="844:22">(<expr pos:start="844:13" pos:end="844:21"><call pos:start="844:13" pos:end="844:21"><name pos:start="844:13" pos:end="844:18">CODE64</name><argument_list pos:start="844:19" pos:end="844:21">(<argument pos:start="844:20" pos:end="844:20"><expr pos:start="844:20" pos:end="844:20"><name pos:start="844:20" pos:end="844:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="845:9" pos:end="845:35"><block_content pos:start="845:9" pos:end="845:35">
        <expr_stmt pos:start="845:9" pos:end="845:35"><expr pos:start="845:9" pos:end="845:34"><call pos:start="845:9" pos:end="845:34"><name pos:start="845:9" pos:end="845:26">gen_op_movl_T0_seg</name><argument_list pos:start="845:27" pos:end="845:34">(<argument pos:start="845:28" pos:end="845:33"><expr pos:start="845:28" pos:end="845:33"><name pos:start="845:28" pos:end="845:28">b</name> <operator pos:start="845:30" pos:end="845:31">&gt;&gt;</operator> <literal type="number" pos:start="845:33" pos:end="845:33">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="846:9" pos:end="846:23"><expr pos:start="846:9" pos:end="846:22"><call pos:start="846:9" pos:end="846:22"><name pos:start="846:9" pos:end="846:19">gen_push_T0</name><argument_list pos:start="846:20" pos:end="846:22">(<argument pos:start="846:21" pos:end="846:21"><expr pos:start="846:21" pos:end="846:21"><name pos:start="846:21" pos:end="846:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="847:9" pos:end="847:14">break;</break>
    <case pos:start="848:5" pos:end="848:15">case <expr pos:start="848:10" pos:end="848:14"><literal type="number" pos:start="848:10" pos:end="848:14">0x1a0</literal></expr>:</case> <comment type="block" pos:start="848:17" pos:end="848:29">/* push fs */</comment>
    <case pos:start="849:5" pos:end="849:15">case <expr pos:start="849:10" pos:end="849:14"><literal type="number" pos:start="849:10" pos:end="849:14">0x1a8</literal></expr>:</case> <comment type="block" pos:start="849:17" pos:end="849:29">/* push gs */</comment>
        <expr_stmt pos:start="850:9" pos:end="850:41"><expr pos:start="850:9" pos:end="850:40"><call pos:start="850:9" pos:end="850:40"><name pos:start="850:9" pos:end="850:26">gen_op_movl_T0_seg</name><argument_list pos:start="850:27" pos:end="850:40">(<argument pos:start="850:28" pos:end="850:39"><expr pos:start="850:28" pos:end="850:39"><operator pos:start="850:28" pos:end="850:28">(</operator><name pos:start="850:29" pos:end="850:29">b</name> <operator pos:start="850:31" pos:end="850:32">&gt;&gt;</operator> <literal type="number" pos:start="850:34" pos:end="850:34">3</literal><operator pos:start="850:35" pos:end="850:35">)</operator> <operator pos:start="850:37" pos:end="850:37">&amp;</operator> <literal type="number" pos:start="850:39" pos:end="850:39">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="851:9" pos:end="851:23"><expr pos:start="851:9" pos:end="851:22"><call pos:start="851:9" pos:end="851:22"><name pos:start="851:9" pos:end="851:19">gen_push_T0</name><argument_list pos:start="851:20" pos:end="851:22">(<argument pos:start="851:21" pos:end="851:21"><expr pos:start="851:21" pos:end="851:21"><name pos:start="851:21" pos:end="851:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="852:9" pos:end="852:14">break;</break>
    <case pos:start="853:5" pos:end="853:14">case <expr pos:start="853:10" pos:end="853:13"><literal type="number" pos:start="853:10" pos:end="853:13">0x07</literal></expr>:</case> <comment type="block" pos:start="853:16" pos:end="853:27">/* pop es */</comment>
    <case pos:start="854:5" pos:end="854:14">case <expr pos:start="854:10" pos:end="854:13"><literal type="number" pos:start="854:10" pos:end="854:13">0x17</literal></expr>:</case> <comment type="block" pos:start="854:16" pos:end="854:27">/* pop ss */</comment>
    <case pos:start="855:5" pos:end="855:14">case <expr pos:start="855:10" pos:end="855:13"><literal type="number" pos:start="855:10" pos:end="855:13">0x1f</literal></expr>:</case> <comment type="block" pos:start="855:16" pos:end="855:27">/* pop ds */</comment>
        <if_stmt pos:start="856:9" pos:end="857:21"><if pos:start="856:9" pos:end="857:21">if <condition pos:start="856:12" pos:end="856:22">(<expr pos:start="856:13" pos:end="856:21"><call pos:start="856:13" pos:end="856:21"><name pos:start="856:13" pos:end="856:18">CODE64</name><argument_list pos:start="856:19" pos:end="856:21">(<argument pos:start="856:20" pos:end="856:20"><expr pos:start="856:20" pos:end="856:20"><name pos:start="856:20" pos:end="856:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="857:9" pos:end="857:21"><block_content pos:start="857:9" pos:end="857:21">
        <expr_stmt pos:start="857:9" pos:end="857:21"><expr pos:start="857:9" pos:end="857:20"><name pos:start="857:9" pos:end="857:11">reg</name> <operator pos:start="857:13" pos:end="857:13">=</operator> <name pos:start="857:15" pos:end="857:15">b</name> <operator pos:start="857:17" pos:end="857:18">&gt;&gt;</operator> <literal type="number" pos:start="857:20" pos:end="857:20">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="858:9" pos:end="858:22"><expr pos:start="858:9" pos:end="858:21"><call pos:start="858:9" pos:end="858:21"><name pos:start="858:9" pos:end="858:18">gen_pop_T0</name><argument_list pos:start="858:19" pos:end="858:21">(<argument pos:start="858:20" pos:end="858:20"><expr pos:start="858:20" pos:end="858:20"><name pos:start="858:20" pos:end="858:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="859:9" pos:end="859:55"><expr pos:start="859:9" pos:end="859:54"><call pos:start="859:9" pos:end="859:54"><name pos:start="859:9" pos:end="859:23">gen_movl_seg_T0</name><argument_list pos:start="859:24" pos:end="859:54">(<argument pos:start="859:25" pos:end="859:25"><expr pos:start="859:25" pos:end="859:25"><name pos:start="859:25" pos:end="859:25">s</name></expr></argument>, <argument pos:start="859:28" pos:end="859:30"><expr pos:start="859:28" pos:end="859:30"><name pos:start="859:28" pos:end="859:30">reg</name></expr></argument>, <argument pos:start="859:33" pos:end="859:53"><expr pos:start="859:33" pos:end="859:53"><name pos:start="859:33" pos:end="859:40">pc_start</name> <operator pos:start="859:42" pos:end="859:42">-</operator> <name pos:start="859:44" pos:end="859:53"><name pos:start="859:44" pos:end="859:44">s</name><operator pos:start="859:45" pos:end="859:46">-&gt;</operator><name pos:start="859:47" pos:end="859:53">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="860:9" pos:end="860:26"><expr pos:start="860:9" pos:end="860:25"><call pos:start="860:9" pos:end="860:25"><name pos:start="860:9" pos:end="860:22">gen_pop_update</name><argument_list pos:start="860:23" pos:end="860:25">(<argument pos:start="860:24" pos:end="860:24"><expr pos:start="860:24" pos:end="860:24"><name pos:start="860:24" pos:end="860:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="861:9" pos:end="3141:17"><if pos:start="861:9" pos:end="3141:17">if <condition pos:start="861:12" pos:end="861:24">(<expr pos:start="861:13" pos:end="861:23"><name pos:start="861:13" pos:end="861:15">reg</name> <operator pos:start="861:17" pos:end="861:18">==</operator> <name pos:start="861:20" pos:end="861:23">R_SS</name></expr>)</condition> <block pos:start="861:26" pos:end="3141:17">{<block_content pos:start="865:13" pos:end="3141:17">
            <comment type="block" pos:start="862:13" pos:end="862:57">/* if reg == SS, inhibit interrupts/trace. */</comment>
            <comment type="block" pos:start="863:13" pos:end="864:33">/* If several instructions disable interrupts, only the
               _first_ does it */</comment>
            <if_stmt pos:start="865:13" pos:end="866:52"><if pos:start="865:13" pos:end="866:52">if <condition pos:start="865:16" pos:end="865:54">(<expr pos:start="865:17" pos:end="865:53"><operator pos:start="865:17" pos:end="865:17">!</operator><operator pos:start="865:18" pos:end="865:18">(</operator><name pos:start="865:19" pos:end="865:30"><name pos:start="865:19" pos:end="865:19">s</name><operator pos:start="865:20" pos:end="865:21">-&gt;</operator><name pos:start="865:22" pos:end="865:23">tb</name><operator pos:start="865:24" pos:end="865:25">-&gt;</operator><name pos:start="865:26" pos:end="865:30">flags</name></name> <operator pos:start="865:32" pos:end="865:32">&amp;</operator> <name pos:start="865:34" pos:end="865:52">HF_INHIBIT_IRQ_MASK</name><operator pos:start="865:53" pos:end="865:53">)</operator></expr>)</condition><block type="pseudo" pos:start="866:17" pos:end="866:52"><block_content pos:start="866:17" pos:end="866:52">
                <expr_stmt pos:start="866:17" pos:end="866:52"><expr pos:start="866:17" pos:end="866:51"><call pos:start="866:17" pos:end="866:51"><name pos:start="866:17" pos:end="866:42">gen_helper_set_inhibit_irq</name><argument_list pos:start="866:43" pos:end="866:51">(<argument pos:start="866:44" pos:end="866:50"><expr pos:start="866:44" pos:end="866:50"><name pos:start="866:44" pos:end="866:50">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt pos:start="867:13" pos:end="867:22"><expr pos:start="867:13" pos:end="867:21"><name pos:start="867:13" pos:end="867:17"><name pos:start="867:13" pos:end="867:13">s</name><operator pos:start="867:14" pos:end="867:15">-&gt;</operator><name pos:start="867:16" pos:end="867:17">tf</name></name> <operator pos:start="867:19" pos:end="867:19">=</operator> <literal type="number" pos:start="867:21" pos:end="867:21">0</literal></expr>;</expr_stmt>
        <if_stmt pos:start="868:9" pos:end="3141:17"><if pos:start="868:9" pos:end="3141:17">if <condition pos:start="868:12" pos:end="868:22">(<expr pos:start="868:13" pos:end="868:21"><name pos:start="868:13" pos:end="868:21"><name pos:start="868:13" pos:end="868:13">s</name><operator pos:start="868:14" pos:end="868:15">-&gt;</operator><name pos:start="868:16" pos:end="868:21">is_jmp</name></name></expr>)</condition> <block pos:start="868:24" pos:end="3141:17">{<block_content pos:start="869:13" pos:end="3141:17">
            <expr_stmt pos:start="869:13" pos:end="869:43"><expr pos:start="869:13" pos:end="869:42"><call pos:start="869:13" pos:end="869:42"><name pos:start="869:13" pos:end="869:22">gen_jmp_im</name><argument_list pos:start="869:23" pos:end="869:42">(<argument pos:start="869:24" pos:end="869:41"><expr pos:start="869:24" pos:end="869:41"><name pos:start="869:24" pos:end="869:28"><name pos:start="869:24" pos:end="869:24">s</name><operator pos:start="869:25" pos:end="869:26">-&gt;</operator><name pos:start="869:27" pos:end="869:28">pc</name></name> <operator pos:start="869:30" pos:end="869:30">-</operator> <name pos:start="869:32" pos:end="869:41"><name pos:start="869:32" pos:end="869:32">s</name><operator pos:start="869:33" pos:end="869:34">-&gt;</operator><name pos:start="869:35" pos:end="869:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="870:13" pos:end="870:23"><expr pos:start="870:13" pos:end="870:22"><call pos:start="870:13" pos:end="870:22"><name pos:start="870:13" pos:end="870:19">gen_eob</name><argument_list pos:start="870:20" pos:end="870:22">(<argument pos:start="870:21" pos:end="870:21"><expr pos:start="870:21" pos:end="870:21"><name pos:start="870:21" pos:end="870:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="871:9" pos:end="871:14">break;</break>
    <case pos:start="872:5" pos:end="872:15">case <expr pos:start="872:10" pos:end="872:14"><literal type="number" pos:start="872:10" pos:end="872:14">0x1a1</literal></expr>:</case> <comment type="block" pos:start="872:17" pos:end="872:28">/* pop fs */</comment>
    <case pos:start="873:5" pos:end="873:15">case <expr pos:start="873:10" pos:end="873:14"><literal type="number" pos:start="873:10" pos:end="873:14">0x1a9</literal></expr>:</case> <comment type="block" pos:start="873:17" pos:end="873:28">/* pop gs */</comment>
        <expr_stmt pos:start="874:9" pos:end="874:22"><expr pos:start="874:9" pos:end="874:21"><call pos:start="874:9" pos:end="874:21"><name pos:start="874:9" pos:end="874:18">gen_pop_T0</name><argument_list pos:start="874:19" pos:end="874:21">(<argument pos:start="874:20" pos:end="874:20"><expr pos:start="874:20" pos:end="874:20"><name pos:start="874:20" pos:end="874:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="875:9" pos:end="875:64"><expr pos:start="875:9" pos:end="875:63"><call pos:start="875:9" pos:end="875:63"><name pos:start="875:9" pos:end="875:23">gen_movl_seg_T0</name><argument_list pos:start="875:24" pos:end="875:63">(<argument pos:start="875:25" pos:end="875:25"><expr pos:start="875:25" pos:end="875:25"><name pos:start="875:25" pos:end="875:25">s</name></expr></argument>, <argument pos:start="875:28" pos:end="875:39"><expr pos:start="875:28" pos:end="875:39"><operator pos:start="875:28" pos:end="875:28">(</operator><name pos:start="875:29" pos:end="875:29">b</name> <operator pos:start="875:31" pos:end="875:32">&gt;&gt;</operator> <literal type="number" pos:start="875:34" pos:end="875:34">3</literal><operator pos:start="875:35" pos:end="875:35">)</operator> <operator pos:start="875:37" pos:end="875:37">&amp;</operator> <literal type="number" pos:start="875:39" pos:end="875:39">7</literal></expr></argument>, <argument pos:start="875:42" pos:end="875:62"><expr pos:start="875:42" pos:end="875:62"><name pos:start="875:42" pos:end="875:49">pc_start</name> <operator pos:start="875:51" pos:end="875:51">-</operator> <name pos:start="875:53" pos:end="875:62"><name pos:start="875:53" pos:end="875:53">s</name><operator pos:start="875:54" pos:end="875:55">-&gt;</operator><name pos:start="875:56" pos:end="875:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="876:9" pos:end="876:26"><expr pos:start="876:9" pos:end="876:25"><call pos:start="876:9" pos:end="876:25"><name pos:start="876:9" pos:end="876:22">gen_pop_update</name><argument_list pos:start="876:23" pos:end="876:25">(<argument pos:start="876:24" pos:end="876:24"><expr pos:start="876:24" pos:end="876:24"><name pos:start="876:24" pos:end="876:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="877:9" pos:end="3141:17"><if pos:start="877:9" pos:end="3141:17">if <condition pos:start="877:12" pos:end="877:22">(<expr pos:start="877:13" pos:end="877:21"><name pos:start="877:13" pos:end="877:21"><name pos:start="877:13" pos:end="877:13">s</name><operator pos:start="877:14" pos:end="877:15">-&gt;</operator><name pos:start="877:16" pos:end="877:21">is_jmp</name></name></expr>)</condition> <block pos:start="877:24" pos:end="3141:17">{<block_content pos:start="878:13" pos:end="3141:17">
            <expr_stmt pos:start="878:13" pos:end="878:43"><expr pos:start="878:13" pos:end="878:42"><call pos:start="878:13" pos:end="878:42"><name pos:start="878:13" pos:end="878:22">gen_jmp_im</name><argument_list pos:start="878:23" pos:end="878:42">(<argument pos:start="878:24" pos:end="878:41"><expr pos:start="878:24" pos:end="878:41"><name pos:start="878:24" pos:end="878:28"><name pos:start="878:24" pos:end="878:24">s</name><operator pos:start="878:25" pos:end="878:26">-&gt;</operator><name pos:start="878:27" pos:end="878:28">pc</name></name> <operator pos:start="878:30" pos:end="878:30">-</operator> <name pos:start="878:32" pos:end="878:41"><name pos:start="878:32" pos:end="878:32">s</name><operator pos:start="878:33" pos:end="878:34">-&gt;</operator><name pos:start="878:35" pos:end="878:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="879:13" pos:end="879:23"><expr pos:start="879:13" pos:end="879:22"><call pos:start="879:13" pos:end="879:22"><name pos:start="879:13" pos:end="879:19">gen_eob</name><argument_list pos:start="879:20" pos:end="879:22">(<argument pos:start="879:21" pos:end="879:21"><expr pos:start="879:21" pos:end="879:21"><name pos:start="879:21" pos:end="879:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="880:9" pos:end="880:14">break;</break>
        <comment type="block" format="doxygen" pos:start="881:9" pos:end="881:36">/**************************/</comment>
        <comment type="block" pos:start="882:9" pos:end="882:17">/* mov */</comment>
    <case pos:start="883:5" pos:end="883:14">case <expr pos:start="883:10" pos:end="883:13"><literal type="number" pos:start="883:10" pos:end="883:13">0x88</literal></expr>:</case>
    <case pos:start="884:5" pos:end="884:14">case <expr pos:start="884:10" pos:end="884:13"><literal type="number" pos:start="884:10" pos:end="884:13">0x89</literal></expr>:</case> <comment type="block" pos:start="884:16" pos:end="884:31">/* mov Gv, Ev */</comment>
        <if_stmt pos:start="885:9" pos:end="888:33"><if pos:start="885:9" pos:end="886:25">if <condition pos:start="885:12" pos:end="885:25">(<expr pos:start="885:13" pos:end="885:24"><operator pos:start="885:13" pos:end="885:13">(</operator><name pos:start="885:14" pos:end="885:14">b</name> <operator pos:start="885:16" pos:end="885:16">&amp;</operator> <literal type="number" pos:start="885:18" pos:end="885:18">1</literal><operator pos:start="885:19" pos:end="885:19">)</operator> <operator pos:start="885:21" pos:end="885:22">==</operator> <literal type="number" pos:start="885:24" pos:end="885:24">0</literal></expr>)</condition><block type="pseudo" pos:start="886:13" pos:end="886:25"><block_content pos:start="886:13" pos:end="886:25">
            <expr_stmt pos:start="886:13" pos:end="886:25"><expr pos:start="886:13" pos:end="886:24"><name pos:start="886:13" pos:end="886:14">ot</name> <operator pos:start="886:16" pos:end="886:16">=</operator> <name pos:start="886:18" pos:end="886:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>
        <else pos:start="887:9" pos:end="888:33">else<block type="pseudo" pos:start="888:13" pos:end="888:33"><block_content pos:start="888:13" pos:end="888:33">
            <expr_stmt pos:start="888:13" pos:end="888:33"><expr pos:start="888:13" pos:end="888:32"><name pos:start="888:13" pos:end="888:14">ot</name> <operator pos:start="888:16" pos:end="888:16">=</operator> <name pos:start="888:18" pos:end="888:22">dflag</name> <operator pos:start="888:24" pos:end="888:24">+</operator> <name pos:start="888:26" pos:end="888:32">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt pos:start="889:9" pos:end="889:44"><expr pos:start="889:9" pos:end="889:43"><name pos:start="889:9" pos:end="889:13">modrm</name> <operator pos:start="889:15" pos:end="889:15">=</operator> <call pos:start="889:17" pos:end="889:43"><name pos:start="889:17" pos:end="889:29">cpu_ldub_code</name><argument_list pos:start="889:30" pos:end="889:43">(<argument pos:start="889:31" pos:end="889:33"><expr pos:start="889:31" pos:end="889:33"><name pos:start="889:31" pos:end="889:33">env</name></expr></argument>, <argument pos:start="889:36" pos:end="889:42"><expr pos:start="889:36" pos:end="889:42"><name pos:start="889:36" pos:end="889:40"><name pos:start="889:36" pos:end="889:36">s</name><operator pos:start="889:37" pos:end="889:38">-&gt;</operator><name pos:start="889:39" pos:end="889:40">pc</name></name><operator pos:start="889:41" pos:end="889:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="890:9" pos:end="890:41"><expr pos:start="890:9" pos:end="890:40"><name pos:start="890:9" pos:end="890:11">reg</name> <operator pos:start="890:13" pos:end="890:13">=</operator> <operator pos:start="890:15" pos:end="890:15">(</operator><operator pos:start="890:16" pos:end="890:16">(</operator><name pos:start="890:17" pos:end="890:21">modrm</name> <operator pos:start="890:23" pos:end="890:24">&gt;&gt;</operator> <literal type="number" pos:start="890:26" pos:end="890:26">3</literal><operator pos:start="890:27" pos:end="890:27">)</operator> <operator pos:start="890:29" pos:end="890:29">&amp;</operator> <literal type="number" pos:start="890:31" pos:end="890:31">7</literal><operator pos:start="890:32" pos:end="890:32">)</operator> <operator pos:start="890:34" pos:end="890:34">|</operator> <name pos:start="890:36" pos:end="890:40">rex_r</name></expr>;</expr_stmt>
        <comment type="block" pos:start="891:9" pos:end="891:38">/* generate a generic store */</comment>
        <expr_stmt pos:start="892:9" pos:end="892:50"><expr pos:start="892:9" pos:end="892:49"><call pos:start="892:9" pos:end="892:49"><name pos:start="892:9" pos:end="892:22">gen_ldst_modrm</name><argument_list pos:start="892:23" pos:end="892:49">(<argument pos:start="892:24" pos:end="892:26"><expr pos:start="892:24" pos:end="892:26"><name pos:start="892:24" pos:end="892:26">env</name></expr></argument>, <argument pos:start="892:29" pos:end="892:29"><expr pos:start="892:29" pos:end="892:29"><name pos:start="892:29" pos:end="892:29">s</name></expr></argument>, <argument pos:start="892:32" pos:end="892:36"><expr pos:start="892:32" pos:end="892:36"><name pos:start="892:32" pos:end="892:36">modrm</name></expr></argument>, <argument pos:start="892:39" pos:end="892:40"><expr pos:start="892:39" pos:end="892:40"><name pos:start="892:39" pos:end="892:40">ot</name></expr></argument>, <argument pos:start="892:43" pos:end="892:45"><expr pos:start="892:43" pos:end="892:45"><name pos:start="892:43" pos:end="892:45">reg</name></expr></argument>, <argument pos:start="892:48" pos:end="892:48"><expr pos:start="892:48" pos:end="892:48"><literal type="number" pos:start="892:48" pos:end="892:48">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="893:9" pos:end="893:14">break;</break>
    <case pos:start="894:5" pos:end="894:14">case <expr pos:start="894:10" pos:end="894:13"><literal type="number" pos:start="894:10" pos:end="894:13">0xc6</literal></expr>:</case>
    <case pos:start="895:5" pos:end="895:14">case <expr pos:start="895:10" pos:end="895:13"><literal type="number" pos:start="895:10" pos:end="895:13">0xc7</literal></expr>:</case> <comment type="block" pos:start="895:16" pos:end="895:31">/* mov Ev, Iv */</comment>
        <if_stmt pos:start="896:9" pos:end="899:33"><if pos:start="896:9" pos:end="897:25">if <condition pos:start="896:12" pos:end="896:25">(<expr pos:start="896:13" pos:end="896:24"><operator pos:start="896:13" pos:end="896:13">(</operator><name pos:start="896:14" pos:end="896:14">b</name> <operator pos:start="896:16" pos:end="896:16">&amp;</operator> <literal type="number" pos:start="896:18" pos:end="896:18">1</literal><operator pos:start="896:19" pos:end="896:19">)</operator> <operator pos:start="896:21" pos:end="896:22">==</operator> <literal type="number" pos:start="896:24" pos:end="896:24">0</literal></expr>)</condition><block type="pseudo" pos:start="897:13" pos:end="897:25"><block_content pos:start="897:13" pos:end="897:25">
            <expr_stmt pos:start="897:13" pos:end="897:25"><expr pos:start="897:13" pos:end="897:24"><name pos:start="897:13" pos:end="897:14">ot</name> <operator pos:start="897:16" pos:end="897:16">=</operator> <name pos:start="897:18" pos:end="897:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>
        <else pos:start="898:9" pos:end="899:33">else<block type="pseudo" pos:start="899:13" pos:end="899:33"><block_content pos:start="899:13" pos:end="899:33">
            <expr_stmt pos:start="899:13" pos:end="899:33"><expr pos:start="899:13" pos:end="899:32"><name pos:start="899:13" pos:end="899:14">ot</name> <operator pos:start="899:16" pos:end="899:16">=</operator> <name pos:start="899:18" pos:end="899:22">dflag</name> <operator pos:start="899:24" pos:end="899:24">+</operator> <name pos:start="899:26" pos:end="899:32">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt pos:start="900:9" pos:end="900:44"><expr pos:start="900:9" pos:end="900:43"><name pos:start="900:9" pos:end="900:13">modrm</name> <operator pos:start="900:15" pos:end="900:15">=</operator> <call pos:start="900:17" pos:end="900:43"><name pos:start="900:17" pos:end="900:29">cpu_ldub_code</name><argument_list pos:start="900:30" pos:end="900:43">(<argument pos:start="900:31" pos:end="900:33"><expr pos:start="900:31" pos:end="900:33"><name pos:start="900:31" pos:end="900:33">env</name></expr></argument>, <argument pos:start="900:36" pos:end="900:42"><expr pos:start="900:36" pos:end="900:42"><name pos:start="900:36" pos:end="900:40"><name pos:start="900:36" pos:end="900:36">s</name><operator pos:start="900:37" pos:end="900:38">-&gt;</operator><name pos:start="900:39" pos:end="900:40">pc</name></name><operator pos:start="900:41" pos:end="900:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="901:9" pos:end="901:31"><expr pos:start="901:9" pos:end="901:30"><name pos:start="901:9" pos:end="901:11">mod</name> <operator pos:start="901:13" pos:end="901:13">=</operator> <operator pos:start="901:15" pos:end="901:15">(</operator><name pos:start="901:16" pos:end="901:20">modrm</name> <operator pos:start="901:22" pos:end="901:23">&gt;&gt;</operator> <literal type="number" pos:start="901:25" pos:end="901:25">6</literal><operator pos:start="901:26" pos:end="901:26">)</operator> <operator pos:start="901:28" pos:end="901:28">&amp;</operator> <literal type="number" pos:start="901:30" pos:end="901:30">3</literal></expr>;</expr_stmt>
        <if_stmt pos:start="902:9" pos:end="3141:17"><if pos:start="902:9" pos:end="3141:17">if <condition pos:start="902:12" pos:end="902:21">(<expr pos:start="902:13" pos:end="902:20"><name pos:start="902:13" pos:end="902:15">mod</name> <operator pos:start="902:17" pos:end="902:18">!=</operator> <literal type="number" pos:start="902:20" pos:end="902:20">3</literal></expr>)</condition> <block pos:start="902:23" pos:end="3141:17">{<block_content pos:start="903:13" pos:end="3141:17">
            <expr_stmt pos:start="903:13" pos:end="903:48"><expr pos:start="903:13" pos:end="903:47"><name pos:start="903:13" pos:end="903:25"><name pos:start="903:13" pos:end="903:13">s</name><operator pos:start="903:14" pos:end="903:15">-&gt;</operator><name pos:start="903:16" pos:end="903:25">rip_offset</name></name> <operator pos:start="903:27" pos:end="903:27">=</operator> <call pos:start="903:29" pos:end="903:47"><name pos:start="903:29" pos:end="903:43">insn_const_size</name><argument_list pos:start="903:44" pos:end="903:47">(<argument pos:start="903:45" pos:end="903:46"><expr pos:start="903:45" pos:end="903:46"><name pos:start="903:45" pos:end="903:46">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="904:13" pos:end="904:66"><expr pos:start="904:13" pos:end="904:65"><call pos:start="904:13" pos:end="904:65"><name pos:start="904:13" pos:end="904:25">gen_lea_modrm</name><argument_list pos:start="904:26" pos:end="904:65">(<argument pos:start="904:27" pos:end="904:29"><expr pos:start="904:27" pos:end="904:29"><name pos:start="904:27" pos:end="904:29">env</name></expr></argument>, <argument pos:start="904:32" pos:end="904:32"><expr pos:start="904:32" pos:end="904:32"><name pos:start="904:32" pos:end="904:32">s</name></expr></argument>, <argument pos:start="904:35" pos:end="904:39"><expr pos:start="904:35" pos:end="904:39"><name pos:start="904:35" pos:end="904:39">modrm</name></expr></argument>, <argument pos:start="904:42" pos:end="904:50"><expr pos:start="904:42" pos:end="904:50"><operator pos:start="904:42" pos:end="904:42">&amp;</operator><name pos:start="904:43" pos:end="904:50">reg_addr</name></expr></argument>, <argument pos:start="904:53" pos:end="904:64"><expr pos:start="904:53" pos:end="904:64"><operator pos:start="904:53" pos:end="904:53">&amp;</operator><name pos:start="904:54" pos:end="904:64">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="905:9" pos:end="905:35"><expr pos:start="905:9" pos:end="905:34"><name pos:start="905:9" pos:end="905:11">val</name> <operator pos:start="905:13" pos:end="905:13">=</operator> <call pos:start="905:15" pos:end="905:34"><name pos:start="905:15" pos:end="905:22">insn_get</name><argument_list pos:start="905:23" pos:end="905:34">(<argument pos:start="905:24" pos:end="905:26"><expr pos:start="905:24" pos:end="905:26"><name pos:start="905:24" pos:end="905:26">env</name></expr></argument>, <argument pos:start="905:29" pos:end="905:29"><expr pos:start="905:29" pos:end="905:29"><name pos:start="905:29" pos:end="905:29">s</name></expr></argument>, <argument pos:start="905:32" pos:end="905:33"><expr pos:start="905:32" pos:end="905:33"><name pos:start="905:32" pos:end="905:33">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="906:9" pos:end="906:31"><expr pos:start="906:9" pos:end="906:30"><call pos:start="906:9" pos:end="906:30"><name pos:start="906:9" pos:end="906:25">gen_op_movl_T0_im</name><argument_list pos:start="906:26" pos:end="906:30">(<argument pos:start="906:27" pos:end="906:29"><expr pos:start="906:27" pos:end="906:29"><name pos:start="906:27" pos:end="906:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="907:9" pos:end="910:58"><if pos:start="907:9" pos:end="908:47">if <condition pos:start="907:12" pos:end="907:21">(<expr pos:start="907:13" pos:end="907:20"><name pos:start="907:13" pos:end="907:15">mod</name> <operator pos:start="907:17" pos:end="907:18">!=</operator> <literal type="number" pos:start="907:20" pos:end="907:20">3</literal></expr>)</condition><block type="pseudo" pos:start="908:13" pos:end="908:47"><block_content pos:start="908:13" pos:end="908:47">
            <expr_stmt pos:start="908:13" pos:end="908:47"><expr pos:start="908:13" pos:end="908:46"><call pos:start="908:13" pos:end="908:46"><name pos:start="908:13" pos:end="908:27">gen_op_st_T0_A0</name><argument_list pos:start="908:28" pos:end="908:46">(<argument pos:start="908:29" pos:end="908:45"><expr pos:start="908:29" pos:end="908:45"><name pos:start="908:29" pos:end="908:30">ot</name> <operator pos:start="908:32" pos:end="908:32">+</operator> <name pos:start="908:34" pos:end="908:45"><name pos:start="908:34" pos:end="908:34">s</name><operator pos:start="908:35" pos:end="908:36">-&gt;</operator><name pos:start="908:37" pos:end="908:45">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else pos:start="909:9" pos:end="910:58">else<block type="pseudo" pos:start="910:13" pos:end="910:58"><block_content pos:start="910:13" pos:end="910:58">
            <expr_stmt pos:start="910:13" pos:end="910:58"><expr pos:start="910:13" pos:end="910:57"><call pos:start="910:13" pos:end="910:57"><name pos:start="910:13" pos:end="910:29">gen_op_mov_reg_T0</name><argument_list pos:start="910:30" pos:end="910:57">(<argument pos:start="910:31" pos:end="910:32"><expr pos:start="910:31" pos:end="910:32"><name pos:start="910:31" pos:end="910:32">ot</name></expr></argument>, <argument pos:start="910:35" pos:end="910:56"><expr pos:start="910:35" pos:end="910:56"><operator pos:start="910:35" pos:end="910:35">(</operator><name pos:start="910:36" pos:end="910:40">modrm</name> <operator pos:start="910:42" pos:end="910:42">&amp;</operator> <literal type="number" pos:start="910:44" pos:end="910:44">7</literal><operator pos:start="910:45" pos:end="910:45">)</operator> <operator pos:start="910:47" pos:end="910:47">|</operator> <call pos:start="910:49" pos:end="910:56"><name pos:start="910:49" pos:end="910:53">REX_B</name><argument_list pos:start="910:54" pos:end="910:56">(<argument pos:start="910:55" pos:end="910:55"><expr pos:start="910:55" pos:end="910:55"><name pos:start="910:55" pos:end="910:55">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <break pos:start="911:9" pos:end="911:14">break;</break>
    <case pos:start="912:5" pos:end="912:14">case <expr pos:start="912:10" pos:end="912:13"><literal type="number" pos:start="912:10" pos:end="912:13">0x8a</literal></expr>:</case>
    <case pos:start="913:5" pos:end="913:14">case <expr pos:start="913:10" pos:end="913:13"><literal type="number" pos:start="913:10" pos:end="913:13">0x8b</literal></expr>:</case> <comment type="block" pos:start="913:16" pos:end="913:31">/* mov Ev, Gv */</comment>
        <if_stmt pos:start="914:9" pos:end="917:33"><if pos:start="914:9" pos:end="915:25">if <condition pos:start="914:12" pos:end="914:25">(<expr pos:start="914:13" pos:end="914:24"><operator pos:start="914:13" pos:end="914:13">(</operator><name pos:start="914:14" pos:end="914:14">b</name> <operator pos:start="914:16" pos:end="914:16">&amp;</operator> <literal type="number" pos:start="914:18" pos:end="914:18">1</literal><operator pos:start="914:19" pos:end="914:19">)</operator> <operator pos:start="914:21" pos:end="914:22">==</operator> <literal type="number" pos:start="914:24" pos:end="914:24">0</literal></expr>)</condition><block type="pseudo" pos:start="915:13" pos:end="915:25"><block_content pos:start="915:13" pos:end="915:25">
            <expr_stmt pos:start="915:13" pos:end="915:25"><expr pos:start="915:13" pos:end="915:24"><name pos:start="915:13" pos:end="915:14">ot</name> <operator pos:start="915:16" pos:end="915:16">=</operator> <name pos:start="915:18" pos:end="915:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>
        <else pos:start="916:9" pos:end="917:33">else<block type="pseudo" pos:start="917:13" pos:end="917:33"><block_content pos:start="917:13" pos:end="917:33">
            <expr_stmt pos:start="917:13" pos:end="917:33"><expr pos:start="917:13" pos:end="917:32"><name pos:start="917:13" pos:end="917:14">ot</name> <operator pos:start="917:16" pos:end="917:16">=</operator> <name pos:start="917:18" pos:end="917:24">OT_WORD</name> <operator pos:start="917:26" pos:end="917:26">+</operator> <name pos:start="917:28" pos:end="917:32">dflag</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt pos:start="918:9" pos:end="918:44"><expr pos:start="918:9" pos:end="918:43"><name pos:start="918:9" pos:end="918:13">modrm</name> <operator pos:start="918:15" pos:end="918:15">=</operator> <call pos:start="918:17" pos:end="918:43"><name pos:start="918:17" pos:end="918:29">cpu_ldub_code</name><argument_list pos:start="918:30" pos:end="918:43">(<argument pos:start="918:31" pos:end="918:33"><expr pos:start="918:31" pos:end="918:33"><name pos:start="918:31" pos:end="918:33">env</name></expr></argument>, <argument pos:start="918:36" pos:end="918:42"><expr pos:start="918:36" pos:end="918:42"><name pos:start="918:36" pos:end="918:40"><name pos:start="918:36" pos:end="918:36">s</name><operator pos:start="918:37" pos:end="918:38">-&gt;</operator><name pos:start="918:39" pos:end="918:40">pc</name></name><operator pos:start="918:41" pos:end="918:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="919:9" pos:end="919:41"><expr pos:start="919:9" pos:end="919:40"><name pos:start="919:9" pos:end="919:11">reg</name> <operator pos:start="919:13" pos:end="919:13">=</operator> <operator pos:start="919:15" pos:end="919:15">(</operator><operator pos:start="919:16" pos:end="919:16">(</operator><name pos:start="919:17" pos:end="919:21">modrm</name> <operator pos:start="919:23" pos:end="919:24">&gt;&gt;</operator> <literal type="number" pos:start="919:26" pos:end="919:26">3</literal><operator pos:start="919:27" pos:end="919:27">)</operator> <operator pos:start="919:29" pos:end="919:29">&amp;</operator> <literal type="number" pos:start="919:31" pos:end="919:31">7</literal><operator pos:start="919:32" pos:end="919:32">)</operator> <operator pos:start="919:34" pos:end="919:34">|</operator> <name pos:start="919:36" pos:end="919:40">rex_r</name></expr>;</expr_stmt>
        <expr_stmt pos:start="920:9" pos:end="920:54"><expr pos:start="920:9" pos:end="920:53"><call pos:start="920:9" pos:end="920:53"><name pos:start="920:9" pos:end="920:22">gen_ldst_modrm</name><argument_list pos:start="920:23" pos:end="920:53">(<argument pos:start="920:24" pos:end="920:26"><expr pos:start="920:24" pos:end="920:26"><name pos:start="920:24" pos:end="920:26">env</name></expr></argument>, <argument pos:start="920:29" pos:end="920:29"><expr pos:start="920:29" pos:end="920:29"><name pos:start="920:29" pos:end="920:29">s</name></expr></argument>, <argument pos:start="920:32" pos:end="920:36"><expr pos:start="920:32" pos:end="920:36"><name pos:start="920:32" pos:end="920:36">modrm</name></expr></argument>, <argument pos:start="920:39" pos:end="920:40"><expr pos:start="920:39" pos:end="920:40"><name pos:start="920:39" pos:end="920:40">ot</name></expr></argument>, <argument pos:start="920:43" pos:end="920:49"><expr pos:start="920:43" pos:end="920:49"><name pos:start="920:43" pos:end="920:49">OR_TMP0</name></expr></argument>, <argument pos:start="920:52" pos:end="920:52"><expr pos:start="920:52" pos:end="920:52"><literal type="number" pos:start="920:52" pos:end="920:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="921:9" pos:end="921:35"><expr pos:start="921:9" pos:end="921:34"><call pos:start="921:9" pos:end="921:34"><name pos:start="921:9" pos:end="921:25">gen_op_mov_reg_T0</name><argument_list pos:start="921:26" pos:end="921:34">(<argument pos:start="921:27" pos:end="921:28"><expr pos:start="921:27" pos:end="921:28"><name pos:start="921:27" pos:end="921:28">ot</name></expr></argument>, <argument pos:start="921:31" pos:end="921:33"><expr pos:start="921:31" pos:end="921:33"><name pos:start="921:31" pos:end="921:33">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="922:9" pos:end="922:14">break;</break>
    <case pos:start="923:5" pos:end="923:14">case <expr pos:start="923:10" pos:end="923:13"><literal type="number" pos:start="923:10" pos:end="923:13">0x8e</literal></expr>:</case> <comment type="block" pos:start="923:16" pos:end="923:32">/* mov seg, Gv */</comment>
        <expr_stmt pos:start="924:9" pos:end="924:44"><expr pos:start="924:9" pos:end="924:43"><name pos:start="924:9" pos:end="924:13">modrm</name> <operator pos:start="924:15" pos:end="924:15">=</operator> <call pos:start="924:17" pos:end="924:43"><name pos:start="924:17" pos:end="924:29">cpu_ldub_code</name><argument_list pos:start="924:30" pos:end="924:43">(<argument pos:start="924:31" pos:end="924:33"><expr pos:start="924:31" pos:end="924:33"><name pos:start="924:31" pos:end="924:33">env</name></expr></argument>, <argument pos:start="924:36" pos:end="924:42"><expr pos:start="924:36" pos:end="924:42"><name pos:start="924:36" pos:end="924:40"><name pos:start="924:36" pos:end="924:36">s</name><operator pos:start="924:37" pos:end="924:38">-&gt;</operator><name pos:start="924:39" pos:end="924:40">pc</name></name><operator pos:start="924:41" pos:end="924:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="925:9" pos:end="925:31"><expr pos:start="925:9" pos:end="925:30"><name pos:start="925:9" pos:end="925:11">reg</name> <operator pos:start="925:13" pos:end="925:13">=</operator> <operator pos:start="925:15" pos:end="925:15">(</operator><name pos:start="925:16" pos:end="925:20">modrm</name> <operator pos:start="925:22" pos:end="925:23">&gt;&gt;</operator> <literal type="number" pos:start="925:25" pos:end="925:25">3</literal><operator pos:start="925:26" pos:end="925:26">)</operator> <operator pos:start="925:28" pos:end="925:28">&amp;</operator> <literal type="number" pos:start="925:30" pos:end="925:30">7</literal></expr>;</expr_stmt>
        <if_stmt pos:start="926:9" pos:end="927:59"><if pos:start="926:9" pos:end="927:59">if <condition pos:start="926:12" pos:end="926:36">(<expr pos:start="926:13" pos:end="926:35"><name pos:start="926:13" pos:end="926:15">reg</name> <operator pos:start="926:17" pos:end="926:18">&gt;=</operator> <literal type="number" pos:start="926:20" pos:end="926:20">6</literal> <operator pos:start="926:22" pos:end="926:23">||</operator> <name pos:start="926:25" pos:end="926:27">reg</name> <operator pos:start="926:29" pos:end="926:30">==</operator> <name pos:start="926:32" pos:end="926:35">R_CS</name></expr>)</condition><block type="pseudo" pos:start="927:9" pos:end="927:59"><block_content pos:start="927:9" pos:end="927:59">
        <expr_stmt pos:start="927:9" pos:end="927:59"><expr pos:start="927:9" pos:end="927:58"><call pos:start="927:9" pos:end="927:58"><name pos:start="927:9" pos:end="927:22">gen_ldst_modrm</name><argument_list pos:start="927:23" pos:end="927:58">(<argument pos:start="927:24" pos:end="927:26"><expr pos:start="927:24" pos:end="927:26"><name pos:start="927:24" pos:end="927:26">env</name></expr></argument>, <argument pos:start="927:29" pos:end="927:29"><expr pos:start="927:29" pos:end="927:29"><name pos:start="927:29" pos:end="927:29">s</name></expr></argument>, <argument pos:start="927:32" pos:end="927:36"><expr pos:start="927:32" pos:end="927:36"><name pos:start="927:32" pos:end="927:36">modrm</name></expr></argument>, <argument pos:start="927:39" pos:end="927:45"><expr pos:start="927:39" pos:end="927:45"><name pos:start="927:39" pos:end="927:45">OT_WORD</name></expr></argument>, <argument pos:start="927:48" pos:end="927:54"><expr pos:start="927:48" pos:end="927:54"><name pos:start="927:48" pos:end="927:54">OR_TMP0</name></expr></argument>, <argument pos:start="927:57" pos:end="927:57"><expr pos:start="927:57" pos:end="927:57"><literal type="number" pos:start="927:57" pos:end="927:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="928:9" pos:end="928:55"><expr pos:start="928:9" pos:end="928:54"><call pos:start="928:9" pos:end="928:54"><name pos:start="928:9" pos:end="928:23">gen_movl_seg_T0</name><argument_list pos:start="928:24" pos:end="928:54">(<argument pos:start="928:25" pos:end="928:25"><expr pos:start="928:25" pos:end="928:25"><name pos:start="928:25" pos:end="928:25">s</name></expr></argument>, <argument pos:start="928:28" pos:end="928:30"><expr pos:start="928:28" pos:end="928:30"><name pos:start="928:28" pos:end="928:30">reg</name></expr></argument>, <argument pos:start="928:33" pos:end="928:53"><expr pos:start="928:33" pos:end="928:53"><name pos:start="928:33" pos:end="928:40">pc_start</name> <operator pos:start="928:42" pos:end="928:42">-</operator> <name pos:start="928:44" pos:end="928:53"><name pos:start="928:44" pos:end="928:44">s</name><operator pos:start="928:45" pos:end="928:46">-&gt;</operator><name pos:start="928:47" pos:end="928:53">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="929:9" pos:end="3141:17"><if pos:start="929:9" pos:end="3141:17">if <condition pos:start="929:12" pos:end="929:24">(<expr pos:start="929:13" pos:end="929:23"><name pos:start="929:13" pos:end="929:15">reg</name> <operator pos:start="929:17" pos:end="929:18">==</operator> <name pos:start="929:20" pos:end="929:23">R_SS</name></expr>)</condition> <block pos:start="929:26" pos:end="3141:17">{<block_content pos:start="933:13" pos:end="3141:17">
            <comment type="block" pos:start="930:13" pos:end="930:56">/* if reg == SS, inhibit interrupts/trace */</comment>
            <comment type="block" pos:start="931:13" pos:end="932:33">/* If several instructions disable interrupts, only the
               _first_ does it */</comment>
            <if_stmt pos:start="933:13" pos:end="934:52"><if pos:start="933:13" pos:end="934:52">if <condition pos:start="933:16" pos:end="933:54">(<expr pos:start="933:17" pos:end="933:53"><operator pos:start="933:17" pos:end="933:17">!</operator><operator pos:start="933:18" pos:end="933:18">(</operator><name pos:start="933:19" pos:end="933:30"><name pos:start="933:19" pos:end="933:19">s</name><operator pos:start="933:20" pos:end="933:21">-&gt;</operator><name pos:start="933:22" pos:end="933:23">tb</name><operator pos:start="933:24" pos:end="933:25">-&gt;</operator><name pos:start="933:26" pos:end="933:30">flags</name></name> <operator pos:start="933:32" pos:end="933:32">&amp;</operator> <name pos:start="933:34" pos:end="933:52">HF_INHIBIT_IRQ_MASK</name><operator pos:start="933:53" pos:end="933:53">)</operator></expr>)</condition><block type="pseudo" pos:start="934:17" pos:end="934:52"><block_content pos:start="934:17" pos:end="934:52">
                <expr_stmt pos:start="934:17" pos:end="934:52"><expr pos:start="934:17" pos:end="934:51"><call pos:start="934:17" pos:end="934:51"><name pos:start="934:17" pos:end="934:42">gen_helper_set_inhibit_irq</name><argument_list pos:start="934:43" pos:end="934:51">(<argument pos:start="934:44" pos:end="934:50"><expr pos:start="934:44" pos:end="934:50"><name pos:start="934:44" pos:end="934:50">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt pos:start="935:13" pos:end="935:22"><expr pos:start="935:13" pos:end="935:21"><name pos:start="935:13" pos:end="935:17"><name pos:start="935:13" pos:end="935:13">s</name><operator pos:start="935:14" pos:end="935:15">-&gt;</operator><name pos:start="935:16" pos:end="935:17">tf</name></name> <operator pos:start="935:19" pos:end="935:19">=</operator> <literal type="number" pos:start="935:21" pos:end="935:21">0</literal></expr>;</expr_stmt>
        <if_stmt pos:start="936:9" pos:end="3141:17"><if pos:start="936:9" pos:end="3141:17">if <condition pos:start="936:12" pos:end="936:22">(<expr pos:start="936:13" pos:end="936:21"><name pos:start="936:13" pos:end="936:21"><name pos:start="936:13" pos:end="936:13">s</name><operator pos:start="936:14" pos:end="936:15">-&gt;</operator><name pos:start="936:16" pos:end="936:21">is_jmp</name></name></expr>)</condition> <block pos:start="936:24" pos:end="3141:17">{<block_content pos:start="937:13" pos:end="3141:17">
            <expr_stmt pos:start="937:13" pos:end="937:43"><expr pos:start="937:13" pos:end="937:42"><call pos:start="937:13" pos:end="937:42"><name pos:start="937:13" pos:end="937:22">gen_jmp_im</name><argument_list pos:start="937:23" pos:end="937:42">(<argument pos:start="937:24" pos:end="937:41"><expr pos:start="937:24" pos:end="937:41"><name pos:start="937:24" pos:end="937:28"><name pos:start="937:24" pos:end="937:24">s</name><operator pos:start="937:25" pos:end="937:26">-&gt;</operator><name pos:start="937:27" pos:end="937:28">pc</name></name> <operator pos:start="937:30" pos:end="937:30">-</operator> <name pos:start="937:32" pos:end="937:41"><name pos:start="937:32" pos:end="937:32">s</name><operator pos:start="937:33" pos:end="937:34">-&gt;</operator><name pos:start="937:35" pos:end="937:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="938:13" pos:end="938:23"><expr pos:start="938:13" pos:end="938:22"><call pos:start="938:13" pos:end="938:22"><name pos:start="938:13" pos:end="938:19">gen_eob</name><argument_list pos:start="938:20" pos:end="938:22">(<argument pos:start="938:21" pos:end="938:21"><expr pos:start="938:21" pos:end="938:21"><name pos:start="938:21" pos:end="938:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="939:9" pos:end="939:14">break;</break>
    <case pos:start="940:5" pos:end="940:14">case <expr pos:start="940:10" pos:end="940:13"><literal type="number" pos:start="940:10" pos:end="940:13">0x8c</literal></expr>:</case> <comment type="block" pos:start="940:16" pos:end="940:32">/* mov Gv, seg */</comment>
        <expr_stmt pos:start="941:9" pos:end="941:44"><expr pos:start="941:9" pos:end="941:43"><name pos:start="941:9" pos:end="941:13">modrm</name> <operator pos:start="941:15" pos:end="941:15">=</operator> <call pos:start="941:17" pos:end="941:43"><name pos:start="941:17" pos:end="941:29">cpu_ldub_code</name><argument_list pos:start="941:30" pos:end="941:43">(<argument pos:start="941:31" pos:end="941:33"><expr pos:start="941:31" pos:end="941:33"><name pos:start="941:31" pos:end="941:33">env</name></expr></argument>, <argument pos:start="941:36" pos:end="941:42"><expr pos:start="941:36" pos:end="941:42"><name pos:start="941:36" pos:end="941:40"><name pos:start="941:36" pos:end="941:36">s</name><operator pos:start="941:37" pos:end="941:38">-&gt;</operator><name pos:start="941:39" pos:end="941:40">pc</name></name><operator pos:start="941:41" pos:end="941:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="942:9" pos:end="942:31"><expr pos:start="942:9" pos:end="942:30"><name pos:start="942:9" pos:end="942:11">reg</name> <operator pos:start="942:13" pos:end="942:13">=</operator> <operator pos:start="942:15" pos:end="942:15">(</operator><name pos:start="942:16" pos:end="942:20">modrm</name> <operator pos:start="942:22" pos:end="942:23">&gt;&gt;</operator> <literal type="number" pos:start="942:25" pos:end="942:25">3</literal><operator pos:start="942:26" pos:end="942:26">)</operator> <operator pos:start="942:28" pos:end="942:28">&amp;</operator> <literal type="number" pos:start="942:30" pos:end="942:30">7</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="943:9" pos:end="943:31"><expr pos:start="943:9" pos:end="943:30"><name pos:start="943:9" pos:end="943:11">mod</name> <operator pos:start="943:13" pos:end="943:13">=</operator> <operator pos:start="943:15" pos:end="943:15">(</operator><name pos:start="943:16" pos:end="943:20">modrm</name> <operator pos:start="943:22" pos:end="943:23">&gt;&gt;</operator> <literal type="number" pos:start="943:25" pos:end="943:25">6</literal><operator pos:start="943:26" pos:end="943:26">)</operator> <operator pos:start="943:28" pos:end="943:28">&amp;</operator> <literal type="number" pos:start="943:30" pos:end="943:30">3</literal></expr>;</expr_stmt>
        <if_stmt pos:start="944:9" pos:end="945:32"><if pos:start="944:9" pos:end="945:32">if <condition pos:start="944:12" pos:end="944:21">(<expr pos:start="944:13" pos:end="944:20"><name pos:start="944:13" pos:end="944:15">reg</name> <operator pos:start="944:17" pos:end="944:18">&gt;=</operator> <literal type="number" pos:start="944:20" pos:end="944:20">6</literal></expr>)</condition><block type="pseudo" pos:start="945:9" pos:end="945:32"><block_content pos:start="945:9" pos:end="945:32">
        <expr_stmt pos:start="945:9" pos:end="945:32"><expr pos:start="945:9" pos:end="945:31"><call pos:start="945:9" pos:end="945:31"><name pos:start="945:9" pos:end="945:26">gen_op_movl_T0_seg</name><argument_list pos:start="945:27" pos:end="945:31">(<argument pos:start="945:28" pos:end="945:30"><expr pos:start="945:28" pos:end="945:30"><name pos:start="945:28" pos:end="945:30">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt pos:start="946:9" pos:end="949:25"><if pos:start="946:9" pos:end="947:33">if <condition pos:start="946:12" pos:end="946:21">(<expr pos:start="946:13" pos:end="946:20"><name pos:start="946:13" pos:end="946:15">mod</name> <operator pos:start="946:17" pos:end="946:18">==</operator> <literal type="number" pos:start="946:20" pos:end="946:20">3</literal></expr>)</condition><block type="pseudo" pos:start="947:13" pos:end="947:33"><block_content pos:start="947:13" pos:end="947:33">
            <expr_stmt pos:start="947:13" pos:end="947:33"><expr pos:start="947:13" pos:end="947:32"><name pos:start="947:13" pos:end="947:14">ot</name> <operator pos:start="947:16" pos:end="947:16">=</operator> <name pos:start="947:18" pos:end="947:24">OT_WORD</name> <operator pos:start="947:26" pos:end="947:26">+</operator> <name pos:start="947:28" pos:end="947:32">dflag</name></expr>;</expr_stmt></block_content></block></if>
        <else pos:start="948:9" pos:end="949:25">else<block type="pseudo" pos:start="949:13" pos:end="949:25"><block_content pos:start="949:13" pos:end="949:25">
            <expr_stmt pos:start="949:13" pos:end="949:25"><expr pos:start="949:13" pos:end="949:24"><name pos:start="949:13" pos:end="949:14">ot</name> <operator pos:start="949:16" pos:end="949:16">=</operator> <name pos:start="949:18" pos:end="949:24">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt pos:start="950:9" pos:end="950:54"><expr pos:start="950:9" pos:end="950:53"><call pos:start="950:9" pos:end="950:53"><name pos:start="950:9" pos:end="950:22">gen_ldst_modrm</name><argument_list pos:start="950:23" pos:end="950:53">(<argument pos:start="950:24" pos:end="950:26"><expr pos:start="950:24" pos:end="950:26"><name pos:start="950:24" pos:end="950:26">env</name></expr></argument>, <argument pos:start="950:29" pos:end="950:29"><expr pos:start="950:29" pos:end="950:29"><name pos:start="950:29" pos:end="950:29">s</name></expr></argument>, <argument pos:start="950:32" pos:end="950:36"><expr pos:start="950:32" pos:end="950:36"><name pos:start="950:32" pos:end="950:36">modrm</name></expr></argument>, <argument pos:start="950:39" pos:end="950:40"><expr pos:start="950:39" pos:end="950:40"><name pos:start="950:39" pos:end="950:40">ot</name></expr></argument>, <argument pos:start="950:43" pos:end="950:49"><expr pos:start="950:43" pos:end="950:49"><name pos:start="950:43" pos:end="950:49">OR_TMP0</name></expr></argument>, <argument pos:start="950:52" pos:end="950:52"><expr pos:start="950:52" pos:end="950:52"><literal type="number" pos:start="950:52" pos:end="950:52">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="951:9" pos:end="951:14">break;</break>
    <case pos:start="952:5" pos:end="952:15">case <expr pos:start="952:10" pos:end="952:14"><literal type="number" pos:start="952:10" pos:end="952:14">0x1b6</literal></expr>:</case> <comment type="block" pos:start="952:17" pos:end="952:35">/* movzbS Gv, Eb */</comment>
    <case pos:start="953:5" pos:end="953:15">case <expr pos:start="953:10" pos:end="953:14"><literal type="number" pos:start="953:10" pos:end="953:14">0x1b7</literal></expr>:</case> <comment type="block" pos:start="953:17" pos:end="953:35">/* movzwS Gv, Eb */</comment>
    <case pos:start="954:5" pos:end="954:15">case <expr pos:start="954:10" pos:end="954:14"><literal type="number" pos:start="954:10" pos:end="954:14">0x1be</literal></expr>:</case> <comment type="block" pos:start="954:17" pos:end="954:35">/* movsbS Gv, Eb */</comment>
    <case pos:start="955:5" pos:end="955:15">case <expr pos:start="955:10" pos:end="955:14"><literal type="number" pos:start="955:10" pos:end="955:14">0x1bf</literal></expr>:</case> <comment type="block" pos:start="955:17" pos:end="955:35">/* movswS Gv, Eb */</comment>
        <block pos:start="956:9" pos:end="3141:17">{<block_content pos:start="957:13" pos:end="3141:17">
            <decl_stmt pos:start="957:13" pos:end="957:21"><decl pos:start="957:13" pos:end="957:20"><type pos:start="957:13" pos:end="957:15"><name pos:start="957:13" pos:end="957:15">int</name></type> <name pos:start="957:17" pos:end="957:20">d_ot</name></decl>;</decl_stmt>
            <comment type="block" pos:start="958:13" pos:end="958:49">/* d_ot is the size of destination */</comment>
            <expr_stmt pos:start="959:13" pos:end="959:35"><expr pos:start="959:13" pos:end="959:34"><name pos:start="959:13" pos:end="959:16">d_ot</name> <operator pos:start="959:18" pos:end="959:18">=</operator> <name pos:start="959:20" pos:end="959:24">dflag</name> <operator pos:start="959:26" pos:end="959:26">+</operator> <name pos:start="959:28" pos:end="959:34">OT_WORD</name></expr>;</expr_stmt>
            <comment type="block" pos:start="960:13" pos:end="960:42">/* ot is the size of source */</comment>
            <expr_stmt pos:start="961:13" pos:end="961:35"><expr pos:start="961:13" pos:end="961:34"><name pos:start="961:13" pos:end="961:14">ot</name> <operator pos:start="961:16" pos:end="961:16">=</operator> <operator pos:start="961:18" pos:end="961:18">(</operator><name pos:start="961:19" pos:end="961:19">b</name> <operator pos:start="961:21" pos:end="961:21">&amp;</operator> <literal type="number" pos:start="961:23" pos:end="961:23">1</literal><operator pos:start="961:24" pos:end="961:24">)</operator> <operator pos:start="961:26" pos:end="961:26">+</operator> <name pos:start="961:28" pos:end="961:34">OT_BYTE</name></expr>;</expr_stmt>
            <expr_stmt pos:start="962:13" pos:end="962:48"><expr pos:start="962:13" pos:end="962:47"><name pos:start="962:13" pos:end="962:17">modrm</name> <operator pos:start="962:19" pos:end="962:19">=</operator> <call pos:start="962:21" pos:end="962:47"><name pos:start="962:21" pos:end="962:33">cpu_ldub_code</name><argument_list pos:start="962:34" pos:end="962:47">(<argument pos:start="962:35" pos:end="962:37"><expr pos:start="962:35" pos:end="962:37"><name pos:start="962:35" pos:end="962:37">env</name></expr></argument>, <argument pos:start="962:40" pos:end="962:46"><expr pos:start="962:40" pos:end="962:46"><name pos:start="962:40" pos:end="962:44"><name pos:start="962:40" pos:end="962:40">s</name><operator pos:start="962:41" pos:end="962:42">-&gt;</operator><name pos:start="962:43" pos:end="962:44">pc</name></name><operator pos:start="962:45" pos:end="962:46">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="963:13" pos:end="963:45"><expr pos:start="963:13" pos:end="963:44"><name pos:start="963:13" pos:end="963:15">reg</name> <operator pos:start="963:17" pos:end="963:17">=</operator> <operator pos:start="963:19" pos:end="963:19">(</operator><operator pos:start="963:20" pos:end="963:20">(</operator><name pos:start="963:21" pos:end="963:25">modrm</name> <operator pos:start="963:27" pos:end="963:28">&gt;&gt;</operator> <literal type="number" pos:start="963:30" pos:end="963:30">3</literal><operator pos:start="963:31" pos:end="963:31">)</operator> <operator pos:start="963:33" pos:end="963:33">&amp;</operator> <literal type="number" pos:start="963:35" pos:end="963:35">7</literal><operator pos:start="963:36" pos:end="963:36">)</operator> <operator pos:start="963:38" pos:end="963:38">|</operator> <name pos:start="963:40" pos:end="963:44">rex_r</name></expr>;</expr_stmt>
            <expr_stmt pos:start="964:13" pos:end="964:35"><expr pos:start="964:13" pos:end="964:34"><name pos:start="964:13" pos:end="964:15">mod</name> <operator pos:start="964:17" pos:end="964:17">=</operator> <operator pos:start="964:19" pos:end="964:19">(</operator><name pos:start="964:20" pos:end="964:24">modrm</name> <operator pos:start="964:26" pos:end="964:27">&gt;&gt;</operator> <literal type="number" pos:start="964:29" pos:end="964:29">6</literal><operator pos:start="964:30" pos:end="964:30">)</operator> <operator pos:start="964:32" pos:end="964:32">&amp;</operator> <literal type="number" pos:start="964:34" pos:end="964:34">3</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="965:13" pos:end="965:40"><expr pos:start="965:13" pos:end="965:39"><name pos:start="965:13" pos:end="965:14">rm</name> <operator pos:start="965:16" pos:end="965:16">=</operator> <operator pos:start="965:18" pos:end="965:18">(</operator><name pos:start="965:19" pos:end="965:23">modrm</name> <operator pos:start="965:25" pos:end="965:25">&amp;</operator> <literal type="number" pos:start="965:27" pos:end="965:27">7</literal><operator pos:start="965:28" pos:end="965:28">)</operator> <operator pos:start="965:30" pos:end="965:30">|</operator> <call pos:start="965:32" pos:end="965:39"><name pos:start="965:32" pos:end="965:36">REX_B</name><argument_list pos:start="965:37" pos:end="965:39">(<argument pos:start="965:38" pos:end="965:38"><expr pos:start="965:38" pos:end="965:38"><name pos:start="965:38" pos:end="965:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="966:13" pos:end="3141:17"><if pos:start="966:13" pos:end="3141:17">if <condition pos:start="966:16" pos:end="966:25">(<expr pos:start="966:17" pos:end="966:24"><name pos:start="966:17" pos:end="966:19">mod</name> <operator pos:start="966:21" pos:end="966:22">==</operator> <literal type="number" pos:start="966:24" pos:end="966:24">3</literal></expr>)</condition> <block pos:start="966:27" pos:end="3141:17">{<block_content pos:start="967:17" pos:end="3141:17">
                <expr_stmt pos:start="967:17" pos:end="967:45"><expr pos:start="967:17" pos:end="967:44"><call pos:start="967:17" pos:end="967:44"><name pos:start="967:17" pos:end="967:33">gen_op_mov_TN_reg</name><argument_list pos:start="967:34" pos:end="967:44">(<argument pos:start="967:35" pos:end="967:36"><expr pos:start="967:35" pos:end="967:36"><name pos:start="967:35" pos:end="967:36">ot</name></expr></argument>, <argument pos:start="967:39" pos:end="967:39"><expr pos:start="967:39" pos:end="967:39"><literal type="number" pos:start="967:39" pos:end="967:39">0</literal></expr></argument>, <argument pos:start="967:42" pos:end="967:43"><expr pos:start="967:42" pos:end="967:43"><name pos:start="967:42" pos:end="967:43">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <switch pos:start="968:17" pos:end="983:13">switch<condition pos:start="968:23" pos:end="968:36">(<expr pos:start="968:24" pos:end="968:35"><name pos:start="968:24" pos:end="968:25">ot</name> <operator pos:start="968:27" pos:end="968:27">|</operator> <operator pos:start="968:29" pos:end="968:29">(</operator><name pos:start="968:30" pos:end="968:30">b</name> <operator pos:start="968:32" pos:end="968:32">&amp;</operator> <literal type="number" pos:start="968:34" pos:end="968:34">8</literal><operator pos:start="968:35" pos:end="968:35">)</operator></expr>)</condition> <block pos:start="968:38" pos:end="983:13">{<block_content pos:start="969:17" pos:end="982:45">
                <case pos:start="969:17" pos:end="969:29">case <expr pos:start="969:22" pos:end="969:28"><name pos:start="969:22" pos:end="969:28">OT_BYTE</name></expr>:</case>
                    <expr_stmt pos:start="970:21" pos:end="970:57"><expr pos:start="970:21" pos:end="970:56"><call pos:start="970:21" pos:end="970:56"><name pos:start="970:21" pos:end="970:36">tcg_gen_ext8u_tl</name><argument_list pos:start="970:37" pos:end="970:56">(<argument pos:start="970:38" pos:end="970:45"><expr pos:start="970:38" pos:end="970:45"><name pos:start="970:38" pos:end="970:45"><name pos:start="970:38" pos:end="970:42">cpu_T</name><index pos:start="970:43" pos:end="970:45">[<expr pos:start="970:44" pos:end="970:44"><literal type="number" pos:start="970:44" pos:end="970:44">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="970:48" pos:end="970:55"><expr pos:start="970:48" pos:end="970:55"><name pos:start="970:48" pos:end="970:55"><name pos:start="970:48" pos:end="970:52">cpu_T</name><index pos:start="970:53" pos:end="970:55">[<expr pos:start="970:54" pos:end="970:54"><literal type="number" pos:start="970:54" pos:end="970:54">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:start="971:21" pos:end="971:26">break;</break>
                <case pos:start="972:17" pos:end="972:33">case <expr pos:start="972:22" pos:end="972:32"><name pos:start="972:22" pos:end="972:28">OT_BYTE</name> <operator pos:start="972:30" pos:end="972:30">|</operator> <literal type="number" pos:start="972:32" pos:end="972:32">8</literal></expr>:</case>
                    <expr_stmt pos:start="973:21" pos:end="973:57"><expr pos:start="973:21" pos:end="973:56"><call pos:start="973:21" pos:end="973:56"><name pos:start="973:21" pos:end="973:36">tcg_gen_ext8s_tl</name><argument_list pos:start="973:37" pos:end="973:56">(<argument pos:start="973:38" pos:end="973:45"><expr pos:start="973:38" pos:end="973:45"><name pos:start="973:38" pos:end="973:45"><name pos:start="973:38" pos:end="973:42">cpu_T</name><index pos:start="973:43" pos:end="973:45">[<expr pos:start="973:44" pos:end="973:44"><literal type="number" pos:start="973:44" pos:end="973:44">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="973:48" pos:end="973:55"><expr pos:start="973:48" pos:end="973:55"><name pos:start="973:48" pos:end="973:55"><name pos:start="973:48" pos:end="973:52">cpu_T</name><index pos:start="973:53" pos:end="973:55">[<expr pos:start="973:54" pos:end="973:54"><literal type="number" pos:start="973:54" pos:end="973:54">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:start="974:21" pos:end="974:26">break;</break>
                <case pos:start="975:17" pos:end="975:29">case <expr pos:start="975:22" pos:end="975:28"><name pos:start="975:22" pos:end="975:28">OT_WORD</name></expr>:</case>
                    <expr_stmt pos:start="976:21" pos:end="976:58"><expr pos:start="976:21" pos:end="976:57"><call pos:start="976:21" pos:end="976:57"><name pos:start="976:21" pos:end="976:37">tcg_gen_ext16u_tl</name><argument_list pos:start="976:38" pos:end="976:57">(<argument pos:start="976:39" pos:end="976:46"><expr pos:start="976:39" pos:end="976:46"><name pos:start="976:39" pos:end="976:46"><name pos:start="976:39" pos:end="976:43">cpu_T</name><index pos:start="976:44" pos:end="976:46">[<expr pos:start="976:45" pos:end="976:45"><literal type="number" pos:start="976:45" pos:end="976:45">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="976:49" pos:end="976:56"><expr pos:start="976:49" pos:end="976:56"><name pos:start="976:49" pos:end="976:56"><name pos:start="976:49" pos:end="976:53">cpu_T</name><index pos:start="976:54" pos:end="976:56">[<expr pos:start="976:55" pos:end="976:55"><literal type="number" pos:start="976:55" pos:end="976:55">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:start="977:21" pos:end="977:26">break;</break>
                <default pos:start="978:17" pos:end="978:24">default:</default>
                <case pos:start="979:17" pos:end="979:33">case <expr pos:start="979:22" pos:end="979:32"><name pos:start="979:22" pos:end="979:28">OT_WORD</name> <operator pos:start="979:30" pos:end="979:30">|</operator> <literal type="number" pos:start="979:32" pos:end="979:32">8</literal></expr>:</case>
                    <expr_stmt pos:start="980:21" pos:end="980:58"><expr pos:start="980:21" pos:end="980:57"><call pos:start="980:21" pos:end="980:57"><name pos:start="980:21" pos:end="980:37">tcg_gen_ext16s_tl</name><argument_list pos:start="980:38" pos:end="980:57">(<argument pos:start="980:39" pos:end="980:46"><expr pos:start="980:39" pos:end="980:46"><name pos:start="980:39" pos:end="980:46"><name pos:start="980:39" pos:end="980:43">cpu_T</name><index pos:start="980:44" pos:end="980:46">[<expr pos:start="980:45" pos:end="980:45"><literal type="number" pos:start="980:45" pos:end="980:45">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="980:49" pos:end="980:56"><expr pos:start="980:49" pos:end="980:56"><name pos:start="980:49" pos:end="980:56"><name pos:start="980:49" pos:end="980:53">cpu_T</name><index pos:start="980:54" pos:end="980:56">[<expr pos:start="980:55" pos:end="980:55"><literal type="number" pos:start="980:55" pos:end="980:55">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:start="981:21" pos:end="981:26">break;</break>
                <expr_stmt pos:start="982:17" pos:end="982:45"><expr pos:start="982:17" pos:end="982:44"><call pos:start="982:17" pos:end="982:44"><name pos:start="982:17" pos:end="982:33">gen_op_mov_reg_T0</name><argument_list pos:start="982:34" pos:end="982:44">(<argument pos:start="982:35" pos:end="982:38"><expr pos:start="982:35" pos:end="982:38"><name pos:start="982:35" pos:end="982:38">d_ot</name></expr></argument>, <argument pos:start="982:41" pos:end="982:43"><expr pos:start="982:41" pos:end="982:43"><name pos:start="982:41" pos:end="982:43">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></switch> <if_stmt pos:start="983:15" pos:end="3141:17"><else pos:start="983:15" pos:end="3141:17">else <block pos:start="983:20" pos:end="3141:17">{<block_content pos:start="984:17" pos:end="3141:17">
                <expr_stmt pos:start="984:17" pos:end="984:70"><expr pos:start="984:17" pos:end="984:69"><call pos:start="984:17" pos:end="984:69"><name pos:start="984:17" pos:end="984:29">gen_lea_modrm</name><argument_list pos:start="984:30" pos:end="984:69">(<argument pos:start="984:31" pos:end="984:33"><expr pos:start="984:31" pos:end="984:33"><name pos:start="984:31" pos:end="984:33">env</name></expr></argument>, <argument pos:start="984:36" pos:end="984:36"><expr pos:start="984:36" pos:end="984:36"><name pos:start="984:36" pos:end="984:36">s</name></expr></argument>, <argument pos:start="984:39" pos:end="984:43"><expr pos:start="984:39" pos:end="984:43"><name pos:start="984:39" pos:end="984:43">modrm</name></expr></argument>, <argument pos:start="984:46" pos:end="984:54"><expr pos:start="984:46" pos:end="984:54"><operator pos:start="984:46" pos:end="984:46">&amp;</operator><name pos:start="984:47" pos:end="984:54">reg_addr</name></expr></argument>, <argument pos:start="984:57" pos:end="984:68"><expr pos:start="984:57" pos:end="984:68"><operator pos:start="984:57" pos:end="984:57">&amp;</operator><name pos:start="984:58" pos:end="984:68">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="985:17" pos:end="3141:17"><if pos:start="985:17" pos:end="987:17">if <condition pos:start="985:20" pos:end="985:26">(<expr pos:start="985:21" pos:end="985:25"><name pos:start="985:21" pos:end="985:21">b</name> <operator pos:start="985:23" pos:end="985:23">&amp;</operator> <literal type="number" pos:start="985:25" pos:end="985:25">8</literal></expr>)</condition> <block pos:start="985:28" pos:end="987:17">{<block_content pos:start="986:21" pos:end="986:56">
                    <expr_stmt pos:start="986:21" pos:end="986:56"><expr pos:start="986:21" pos:end="986:55"><call pos:start="986:21" pos:end="986:55"><name pos:start="986:21" pos:end="986:36">gen_op_lds_T0_A0</name><argument_list pos:start="986:37" pos:end="986:55">(<argument pos:start="986:38" pos:end="986:54"><expr pos:start="986:38" pos:end="986:54"><name pos:start="986:38" pos:end="986:39">ot</name> <operator pos:start="986:41" pos:end="986:41">+</operator> <name pos:start="986:43" pos:end="986:54"><name pos:start="986:43" pos:end="986:43">s</name><operator pos:start="986:44" pos:end="986:45">-&gt;</operator><name pos:start="986:46" pos:end="986:54">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else pos:start="987:19" pos:end="3141:17">else <block pos:start="987:24" pos:end="3141:17">{<block_content pos:start="988:21" pos:end="3141:17">
                    <expr_stmt pos:start="988:21" pos:end="988:56"><expr pos:start="988:21" pos:end="988:55"><call pos:start="988:21" pos:end="988:55"><name pos:start="988:21" pos:end="988:36">gen_op_ldu_T0_A0</name><argument_list pos:start="988:37" pos:end="988:55">(<argument pos:start="988:38" pos:end="988:54"><expr pos:start="988:38" pos:end="988:54"><name pos:start="988:38" pos:end="988:39">ot</name> <operator pos:start="988:41" pos:end="988:41">+</operator> <name pos:start="988:43" pos:end="988:54"><name pos:start="988:43" pos:end="988:43">s</name><operator pos:start="988:44" pos:end="988:45">-&gt;</operator><name pos:start="988:46" pos:end="988:54">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="989:17" pos:end="989:45"><expr pos:start="989:17" pos:end="989:44"><call pos:start="989:17" pos:end="989:44"><name pos:start="989:17" pos:end="989:33">gen_op_mov_reg_T0</name><argument_list pos:start="989:34" pos:end="989:44">(<argument pos:start="989:35" pos:end="989:38"><expr pos:start="989:35" pos:end="989:38"><name pos:start="989:35" pos:end="989:38">d_ot</name></expr></argument>, <argument pos:start="989:41" pos:end="989:43"><expr pos:start="989:41" pos:end="989:43"><name pos:start="989:41" pos:end="989:43">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="990:9" pos:end="990:14">break;</break>
    <case pos:start="991:5" pos:end="991:14">case <expr pos:start="991:10" pos:end="991:13"><literal type="number" pos:start="991:10" pos:end="991:13">0x8d</literal></expr>:</case> <comment type="block" pos:start="991:16" pos:end="991:24">/* lea */</comment>
        <expr_stmt pos:start="992:9" pos:end="992:29"><expr pos:start="992:9" pos:end="992:28"><name pos:start="992:9" pos:end="992:10">ot</name> <operator pos:start="992:12" pos:end="992:12">=</operator> <name pos:start="992:14" pos:end="992:18">dflag</name> <operator pos:start="992:20" pos:end="992:20">+</operator> <name pos:start="992:22" pos:end="992:28">OT_WORD</name></expr>;</expr_stmt>
        <expr_stmt pos:start="993:9" pos:end="993:44"><expr pos:start="993:9" pos:end="993:43"><name pos:start="993:9" pos:end="993:13">modrm</name> <operator pos:start="993:15" pos:end="993:15">=</operator> <call pos:start="993:17" pos:end="993:43"><name pos:start="993:17" pos:end="993:29">cpu_ldub_code</name><argument_list pos:start="993:30" pos:end="993:43">(<argument pos:start="993:31" pos:end="993:33"><expr pos:start="993:31" pos:end="993:33"><name pos:start="993:31" pos:end="993:33">env</name></expr></argument>, <argument pos:start="993:36" pos:end="993:42"><expr pos:start="993:36" pos:end="993:42"><name pos:start="993:36" pos:end="993:40"><name pos:start="993:36" pos:end="993:36">s</name><operator pos:start="993:37" pos:end="993:38">-&gt;</operator><name pos:start="993:39" pos:end="993:40">pc</name></name><operator pos:start="993:41" pos:end="993:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="994:9" pos:end="994:31"><expr pos:start="994:9" pos:end="994:30"><name pos:start="994:9" pos:end="994:11">mod</name> <operator pos:start="994:13" pos:end="994:13">=</operator> <operator pos:start="994:15" pos:end="994:15">(</operator><name pos:start="994:16" pos:end="994:20">modrm</name> <operator pos:start="994:22" pos:end="994:23">&gt;&gt;</operator> <literal type="number" pos:start="994:25" pos:end="994:25">6</literal><operator pos:start="994:26" pos:end="994:26">)</operator> <operator pos:start="994:28" pos:end="994:28">&amp;</operator> <literal type="number" pos:start="994:30" pos:end="994:30">3</literal></expr>;</expr_stmt>
        <if_stmt pos:start="995:9" pos:end="996:41"><if pos:start="995:9" pos:end="996:41">if <condition pos:start="995:12" pos:end="995:21">(<expr pos:start="995:13" pos:end="995:20"><name pos:start="995:13" pos:end="995:15">mod</name> <operator pos:start="995:17" pos:end="995:18">==</operator> <literal type="number" pos:start="995:20" pos:end="995:20">3</literal></expr>)</condition><block type="pseudo" pos:start="996:9" pos:end="996:41"><block_content pos:start="996:9" pos:end="996:41">
        <expr_stmt pos:start="996:9" pos:end="996:41"><expr pos:start="996:9" pos:end="996:40"><name pos:start="996:9" pos:end="996:11">reg</name> <operator pos:start="996:13" pos:end="996:13">=</operator> <operator pos:start="996:15" pos:end="996:15">(</operator><operator pos:start="996:16" pos:end="996:16">(</operator><name pos:start="996:17" pos:end="996:21">modrm</name> <operator pos:start="996:23" pos:end="996:24">&gt;&gt;</operator> <literal type="number" pos:start="996:26" pos:end="996:26">3</literal><operator pos:start="996:27" pos:end="996:27">)</operator> <operator pos:start="996:29" pos:end="996:29">&amp;</operator> <literal type="number" pos:start="996:31" pos:end="996:31">7</literal><operator pos:start="996:32" pos:end="996:32">)</operator> <operator pos:start="996:34" pos:end="996:34">|</operator> <name pos:start="996:36" pos:end="996:40">rex_r</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <comment type="block" pos:start="997:9" pos:end="997:53">/* we must ensure that no segment is added */</comment>
        <expr_stmt pos:start="998:9" pos:end="998:25"><expr pos:start="998:9" pos:end="998:24"><name pos:start="998:9" pos:end="998:19"><name pos:start="998:9" pos:end="998:9">s</name><operator pos:start="998:10" pos:end="998:11">-&gt;</operator><name pos:start="998:12" pos:end="998:19">override</name></name> <operator pos:start="998:21" pos:end="998:21">=</operator> <operator pos:start="998:23" pos:end="998:23">-</operator><literal type="number" pos:start="998:24" pos:end="998:24">1</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="999:9" pos:end="999:24"><expr pos:start="999:9" pos:end="999:23"><name pos:start="999:9" pos:end="999:11">val</name> <operator pos:start="999:13" pos:end="999:13">=</operator> <name pos:start="999:15" pos:end="999:23"><name pos:start="999:15" pos:end="999:15">s</name><operator pos:start="999:16" pos:end="999:17">-&gt;</operator><name pos:start="999:18" pos:end="999:23">addseg</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="1000:9" pos:end="1000:22"><expr pos:start="1000:9" pos:end="1000:21"><name pos:start="1000:9" pos:end="1000:17"><name pos:start="1000:9" pos:end="1000:9">s</name><operator pos:start="1000:10" pos:end="1000:11">-&gt;</operator><name pos:start="1000:12" pos:end="1000:17">addseg</name></name> <operator pos:start="1000:19" pos:end="1000:19">=</operator> <literal type="number" pos:start="1000:21" pos:end="1000:21">0</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="1001:9" pos:end="1001:62"><expr pos:start="1001:9" pos:end="1001:61"><call pos:start="1001:9" pos:end="1001:61"><name pos:start="1001:9" pos:end="1001:21">gen_lea_modrm</name><argument_list pos:start="1001:22" pos:end="1001:61">(<argument pos:start="1001:23" pos:end="1001:25"><expr pos:start="1001:23" pos:end="1001:25"><name pos:start="1001:23" pos:end="1001:25">env</name></expr></argument>, <argument pos:start="1001:28" pos:end="1001:28"><expr pos:start="1001:28" pos:end="1001:28"><name pos:start="1001:28" pos:end="1001:28">s</name></expr></argument>, <argument pos:start="1001:31" pos:end="1001:35"><expr pos:start="1001:31" pos:end="1001:35"><name pos:start="1001:31" pos:end="1001:35">modrm</name></expr></argument>, <argument pos:start="1001:38" pos:end="1001:46"><expr pos:start="1001:38" pos:end="1001:46"><operator pos:start="1001:38" pos:end="1001:38">&amp;</operator><name pos:start="1001:39" pos:end="1001:46">reg_addr</name></expr></argument>, <argument pos:start="1001:49" pos:end="1001:60"><expr pos:start="1001:49" pos:end="1001:60"><operator pos:start="1001:49" pos:end="1001:49">&amp;</operator><name pos:start="1001:50" pos:end="1001:60">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1002:9" pos:end="1002:24"><expr pos:start="1002:9" pos:end="1002:23"><name pos:start="1002:9" pos:end="1002:17"><name pos:start="1002:9" pos:end="1002:9">s</name><operator pos:start="1002:10" pos:end="1002:11">-&gt;</operator><name pos:start="1002:12" pos:end="1002:17">addseg</name></name> <operator pos:start="1002:19" pos:end="1002:19">=</operator> <name pos:start="1002:21" pos:end="1002:23">val</name></expr>;</expr_stmt>
        <expr_stmt pos:start="1003:9" pos:end="1003:45"><expr pos:start="1003:9" pos:end="1003:44"><call pos:start="1003:9" pos:end="1003:44"><name pos:start="1003:9" pos:end="1003:25">gen_op_mov_reg_A0</name><argument_list pos:start="1003:26" pos:end="1003:44">(<argument pos:start="1003:27" pos:end="1003:38"><expr pos:start="1003:27" pos:end="1003:38"><name pos:start="1003:27" pos:end="1003:28">ot</name> <operator pos:start="1003:30" pos:end="1003:30">-</operator> <name pos:start="1003:32" pos:end="1003:38">OT_WORD</name></expr></argument>, <argument pos:start="1003:41" pos:end="1003:43"><expr pos:start="1003:41" pos:end="1003:43"><name pos:start="1003:41" pos:end="1003:43">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="1004:9" pos:end="1004:14">break;</break>
    <case pos:start="1005:5" pos:end="1005:14">case <expr pos:start="1005:10" pos:end="1005:13"><literal type="number" pos:start="1005:10" pos:end="1005:13">0xa0</literal></expr>:</case> <comment type="block" pos:start="1005:16" pos:end="1005:32">/* mov EAX, Ov */</comment>
    <case pos:start="1006:5" pos:end="1006:14">case <expr pos:start="1006:10" pos:end="1006:13"><literal type="number" pos:start="1006:10" pos:end="1006:13">0xa1</literal></expr>:</case>
    <case pos:start="1007:5" pos:end="1007:14">case <expr pos:start="1007:10" pos:end="1007:13"><literal type="number" pos:start="1007:10" pos:end="1007:13">0xa2</literal></expr>:</case> <comment type="block" pos:start="1007:16" pos:end="1007:32">/* mov Ov, EAX */</comment>
    <case pos:start="1008:5" pos:end="1008:14">case <expr pos:start="1008:10" pos:end="1008:13"><literal type="number" pos:start="1008:10" pos:end="1008:13">0xa3</literal></expr>:</case>
        <block pos:start="1009:9" pos:end="3141:17">{<block_content pos:start="1010:13" pos:end="3141:17">
            <decl_stmt pos:start="1010:13" pos:end="1010:37"><decl pos:start="1010:13" pos:end="1010:36"><type pos:start="1010:13" pos:end="1010:24"><name pos:start="1010:13" pos:end="1010:24">target_ulong</name></type> <name pos:start="1010:26" pos:end="1010:36">offset_addr</name></decl>;</decl_stmt>
            <if_stmt pos:start="1011:13" pos:end="1016:0"><if pos:start="1011:13" pos:end="1012:29">if <condition pos:start="1011:16" pos:end="1011:29">(<expr pos:start="1011:17" pos:end="1011:28"><operator pos:start="1011:17" pos:end="1011:17">(</operator><name pos:start="1011:18" pos:end="1011:18">b</name> <operator pos:start="1011:20" pos:end="1011:20">&amp;</operator> <literal type="number" pos:start="1011:22" pos:end="1011:22">1</literal><operator pos:start="1011:23" pos:end="1011:23">)</operator> <operator pos:start="1011:25" pos:end="1011:26">==</operator> <literal type="number" pos:start="1011:28" pos:end="1011:28">0</literal></expr>)</condition><block type="pseudo" pos:start="1012:17" pos:end="1012:29"><block_content pos:start="1012:17" pos:end="1012:29">
                <expr_stmt pos:start="1012:17" pos:end="1012:29"><expr pos:start="1012:17" pos:end="1012:28"><name pos:start="1012:17" pos:end="1012:18">ot</name> <operator pos:start="1012:20" pos:end="1012:20">=</operator> <name pos:start="1012:22" pos:end="1012:28">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>
            <else pos:start="1013:13" pos:end="1016:0">else<block type="pseudo" pos:start="1014:17" pos:end="1016:0"><block_content pos:start="1014:17" pos:end="1016:0">
                <expr_stmt pos:start="1014:17" pos:end="1016:0"><expr pos:start="1014:17" pos:end="1014:36"><name pos:start="1014:17" pos:end="1014:18">ot</name> <operator pos:start="1014:20" pos:end="1014:20">=</operator> <name pos:start="1014:22" pos:end="1014:26">dflag</name> <operator pos:start="1014:28" pos:end="1014:28">+</operator> <name pos:start="1014:30" pos:end="1014:36">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:ifdef pos:start="1015:1" pos:end="1015:20">#<cpp:directive pos:start="1015:2" pos:end="1015:6">ifdef</cpp:directive> <name pos:start="1015:8" pos:end="1015:20">TARGET_X86_64</name></cpp:ifdef>
            <if_stmt pos:start="1016:13" pos:end="3141:17"><if pos:start="1016:13" pos:end="1020:13">if <condition pos:start="1016:16" pos:end="1016:30">(<expr pos:start="1016:17" pos:end="1016:29"><name pos:start="1016:17" pos:end="1016:24"><name pos:start="1016:17" pos:end="1016:17">s</name><operator pos:start="1016:18" pos:end="1016:19">-&gt;</operator><name pos:start="1016:20" pos:end="1016:24">aflag</name></name> <operator pos:start="1016:26" pos:end="1016:27">==</operator> <literal type="number" pos:start="1016:29" pos:end="1016:29">2</literal></expr>)</condition> <block pos:start="1016:32" pos:end="1020:13">{<block_content pos:start="1017:17" pos:end="1019:47">
                <expr_stmt pos:start="1017:17" pos:end="1017:55"><expr pos:start="1017:17" pos:end="1017:54"><name pos:start="1017:17" pos:end="1017:27">offset_addr</name> <operator pos:start="1017:29" pos:end="1017:29">=</operator> <call pos:start="1017:31" pos:end="1017:54"><name pos:start="1017:31" pos:end="1017:42">cpu_ldq_code</name><argument_list pos:start="1017:43" pos:end="1017:54">(<argument pos:start="1017:44" pos:end="1017:46"><expr pos:start="1017:44" pos:end="1017:46"><name pos:start="1017:44" pos:end="1017:46">env</name></expr></argument>, <argument pos:start="1017:49" pos:end="1017:53"><expr pos:start="1017:49" pos:end="1017:53"><name pos:start="1017:49" pos:end="1017:53"><name pos:start="1017:49" pos:end="1017:49">s</name><operator pos:start="1017:50" pos:end="1017:51">-&gt;</operator><name pos:start="1017:52" pos:end="1017:53">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1018:17" pos:end="1018:27"><expr pos:start="1018:17" pos:end="1018:26"><name pos:start="1018:17" pos:end="1018:21"><name pos:start="1018:17" pos:end="1018:17">s</name><operator pos:start="1018:18" pos:end="1018:19">-&gt;</operator><name pos:start="1018:20" pos:end="1018:21">pc</name></name> <operator pos:start="1018:23" pos:end="1018:24">+=</operator> <literal type="number" pos:start="1018:26" pos:end="1018:26">8</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="1019:17" pos:end="1019:47"><expr pos:start="1019:17" pos:end="1019:46"><call pos:start="1019:17" pos:end="1019:46"><name pos:start="1019:17" pos:end="1019:33">gen_op_movq_A0_im</name><argument_list pos:start="1019:34" pos:end="1019:46">(<argument pos:start="1019:35" pos:end="1019:45"><expr pos:start="1019:35" pos:end="1019:45"><name pos:start="1019:35" pos:end="1019:45">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="1020:15" pos:end="3141:17">else
<cpp:endif pos:start="1021:1" pos:end="1021:6">#<cpp:directive pos:start="1021:2" pos:end="1021:6">endif</cpp:directive></cpp:endif>
            <block pos:start="1022:13" pos:end="3141:17">{<block_content pos:start="1023:17" pos:end="3141:17">
                <if_stmt pos:start="1023:17" pos:end="3141:17"><if pos:start="1023:17" pos:end="1025:17">if <condition pos:start="1023:20" pos:end="1023:29">(<expr pos:start="1023:21" pos:end="1023:28"><name pos:start="1023:21" pos:end="1023:28"><name pos:start="1023:21" pos:end="1023:21">s</name><operator pos:start="1023:22" pos:end="1023:23">-&gt;</operator><name pos:start="1023:24" pos:end="1023:28">aflag</name></name></expr>)</condition> <block pos:start="1023:31" pos:end="1025:17">{<block_content pos:start="1024:21" pos:end="1024:60">
                    <expr_stmt pos:start="1024:21" pos:end="1024:60"><expr pos:start="1024:21" pos:end="1024:59"><name pos:start="1024:21" pos:end="1024:31">offset_addr</name> <operator pos:start="1024:33" pos:end="1024:33">=</operator> <call pos:start="1024:35" pos:end="1024:59"><name pos:start="1024:35" pos:end="1024:42">insn_get</name><argument_list pos:start="1024:43" pos:end="1024:59">(<argument pos:start="1024:44" pos:end="1024:46"><expr pos:start="1024:44" pos:end="1024:46"><name pos:start="1024:44" pos:end="1024:46">env</name></expr></argument>, <argument pos:start="1024:49" pos:end="1024:49"><expr pos:start="1024:49" pos:end="1024:49"><name pos:start="1024:49" pos:end="1024:49">s</name></expr></argument>, <argument pos:start="1024:52" pos:end="1024:58"><expr pos:start="1024:52" pos:end="1024:58"><name pos:start="1024:52" pos:end="1024:58">OT_LONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else pos:start="1025:19" pos:end="3141:17">else <block pos:start="1025:24" pos:end="3141:17">{<block_content pos:start="1026:21" pos:end="3141:17">
                    <expr_stmt pos:start="1026:21" pos:end="1026:60"><expr pos:start="1026:21" pos:end="1026:59"><name pos:start="1026:21" pos:end="1026:31">offset_addr</name> <operator pos:start="1026:33" pos:end="1026:33">=</operator> <call pos:start="1026:35" pos:end="1026:59"><name pos:start="1026:35" pos:end="1026:42">insn_get</name><argument_list pos:start="1026:43" pos:end="1026:59">(<argument pos:start="1026:44" pos:end="1026:46"><expr pos:start="1026:44" pos:end="1026:46"><name pos:start="1026:44" pos:end="1026:46">env</name></expr></argument>, <argument pos:start="1026:49" pos:end="1026:49"><expr pos:start="1026:49" pos:end="1026:49"><name pos:start="1026:49" pos:end="1026:49">s</name></expr></argument>, <argument pos:start="1026:52" pos:end="1026:58"><expr pos:start="1026:52" pos:end="1026:58"><name pos:start="1026:52" pos:end="1026:58">OT_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1027:17" pos:end="1027:47"><expr pos:start="1027:17" pos:end="1027:46"><call pos:start="1027:17" pos:end="1027:46"><name pos:start="1027:17" pos:end="1027:33">gen_op_movl_A0_im</name><argument_list pos:start="1027:34" pos:end="1027:46">(<argument pos:start="1027:35" pos:end="1027:45"><expr pos:start="1027:35" pos:end="1027:45"><name pos:start="1027:35" pos:end="1027:45">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1028:13" pos:end="1028:33"><expr pos:start="1028:13" pos:end="1028:32"><call pos:start="1028:13" pos:end="1028:32"><name pos:start="1028:13" pos:end="1028:29">gen_add_A0_ds_seg</name><argument_list pos:start="1028:30" pos:end="1028:32">(<argument pos:start="1028:31" pos:end="1028:31"><expr pos:start="1028:31" pos:end="1028:31"><name pos:start="1028:31" pos:end="1028:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="1029:13" pos:end="3141:17"><if pos:start="1029:13" pos:end="1032:13">if <condition pos:start="1029:16" pos:end="1029:29">(<expr pos:start="1029:17" pos:end="1029:28"><operator pos:start="1029:17" pos:end="1029:17">(</operator><name pos:start="1029:18" pos:end="1029:18">b</name> <operator pos:start="1029:20" pos:end="1029:20">&amp;</operator> <literal type="number" pos:start="1029:22" pos:end="1029:22">2</literal><operator pos:start="1029:23" pos:end="1029:23">)</operator> <operator pos:start="1029:25" pos:end="1029:26">==</operator> <literal type="number" pos:start="1029:28" pos:end="1029:28">0</literal></expr>)</condition> <block pos:start="1029:31" pos:end="1032:13">{<block_content pos:start="1030:17" pos:end="1031:45">
                <expr_stmt pos:start="1030:17" pos:end="1030:51"><expr pos:start="1030:17" pos:end="1030:50"><call pos:start="1030:17" pos:end="1030:50"><name pos:start="1030:17" pos:end="1030:31">gen_op_ld_T0_A0</name><argument_list pos:start="1030:32" pos:end="1030:50">(<argument pos:start="1030:33" pos:end="1030:49"><expr pos:start="1030:33" pos:end="1030:49"><name pos:start="1030:33" pos:end="1030:34">ot</name> <operator pos:start="1030:36" pos:end="1030:36">+</operator> <name pos:start="1030:38" pos:end="1030:49"><name pos:start="1030:38" pos:end="1030:38">s</name><operator pos:start="1030:39" pos:end="1030:40">-&gt;</operator><name pos:start="1030:41" pos:end="1030:49">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1031:17" pos:end="1031:45"><expr pos:start="1031:17" pos:end="1031:44"><call pos:start="1031:17" pos:end="1031:44"><name pos:start="1031:17" pos:end="1031:33">gen_op_mov_reg_T0</name><argument_list pos:start="1031:34" pos:end="1031:44">(<argument pos:start="1031:35" pos:end="1031:36"><expr pos:start="1031:35" pos:end="1031:36"><name pos:start="1031:35" pos:end="1031:36">ot</name></expr></argument>, <argument pos:start="1031:39" pos:end="1031:43"><expr pos:start="1031:39" pos:end="1031:43"><name pos:start="1031:39" pos:end="1031:43">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="1032:15" pos:end="3141:17">else <block pos:start="1032:20" pos:end="3141:17">{<block_content pos:start="1033:17" pos:end="3141:17">
                <expr_stmt pos:start="1033:17" pos:end="1033:48"><expr pos:start="1033:17" pos:end="1033:47"><call pos:start="1033:17" pos:end="1033:47"><name pos:start="1033:17" pos:end="1033:33">gen_op_mov_TN_reg</name><argument_list pos:start="1033:34" pos:end="1033:47">(<argument pos:start="1033:35" pos:end="1033:36"><expr pos:start="1033:35" pos:end="1033:36"><name pos:start="1033:35" pos:end="1033:36">ot</name></expr></argument>, <argument pos:start="1033:39" pos:end="1033:39"><expr pos:start="1033:39" pos:end="1033:39"><literal type="number" pos:start="1033:39" pos:end="1033:39">0</literal></expr></argument>, <argument pos:start="1033:42" pos:end="1033:46"><expr pos:start="1033:42" pos:end="1033:46"><name pos:start="1033:42" pos:end="1033:46">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1034:17" pos:end="1034:51"><expr pos:start="1034:17" pos:end="1034:50"><call pos:start="1034:17" pos:end="1034:50"><name pos:start="1034:17" pos:end="1034:31">gen_op_st_T0_A0</name><argument_list pos:start="1034:32" pos:end="1034:50">(<argument pos:start="1034:33" pos:end="1034:49"><expr pos:start="1034:33" pos:end="1034:49"><name pos:start="1034:33" pos:end="1034:34">ot</name> <operator pos:start="1034:36" pos:end="1034:36">+</operator> <name pos:start="1034:38" pos:end="1034:49"><name pos:start="1034:38" pos:end="1034:38">s</name><operator pos:start="1034:39" pos:end="1034:40">-&gt;</operator><name pos:start="1034:41" pos:end="1034:49">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="1035:9" pos:end="1035:14">break;</break>
    <case pos:start="1036:5" pos:end="1038:0">case <expr pos:start="1036:10" pos:end="1036:13"><literal type="number" pos:start="1036:10" pos:end="1036:13">0xd7</literal></expr>:</case> <comment type="block" pos:start="1036:16" pos:end="1036:25">/* xlat */</comment>
<cpp:ifdef pos:start="1037:1" pos:end="1037:20">#<cpp:directive pos:start="1037:2" pos:end="1037:6">ifdef</cpp:directive> <name pos:start="1037:8" pos:end="1037:20">TARGET_X86_64</name></cpp:ifdef>
        <if_stmt pos:start="1038:9" pos:end="3141:17"><if pos:start="1038:9" pos:end="1043:9">if <condition pos:start="1038:12" pos:end="1038:26">(<expr pos:start="1038:13" pos:end="1038:25"><name pos:start="1038:13" pos:end="1038:20"><name pos:start="1038:13" pos:end="1038:13">s</name><operator pos:start="1038:14" pos:end="1038:15">-&gt;</operator><name pos:start="1038:16" pos:end="1038:20">aflag</name></name> <operator pos:start="1038:22" pos:end="1038:23">==</operator> <literal type="number" pos:start="1038:25" pos:end="1038:25">2</literal></expr>)</condition> <block pos:start="1038:28" pos:end="1043:9">{<block_content pos:start="1039:13" pos:end="1042:53">
            <expr_stmt pos:start="1039:13" pos:end="1039:38"><expr pos:start="1039:13" pos:end="1039:37"><call pos:start="1039:13" pos:end="1039:37"><name pos:start="1039:13" pos:end="1039:30">gen_op_movq_A0_reg</name><argument_list pos:start="1039:31" pos:end="1039:37">(<argument pos:start="1039:32" pos:end="1039:36"><expr pos:start="1039:32" pos:end="1039:36"><name pos:start="1039:32" pos:end="1039:36">R_EBX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1040:13" pos:end="1040:49"><expr pos:start="1040:13" pos:end="1040:48"><call pos:start="1040:13" pos:end="1040:48"><name pos:start="1040:13" pos:end="1040:29">gen_op_mov_TN_reg</name><argument_list pos:start="1040:30" pos:end="1040:48">(<argument pos:start="1040:31" pos:end="1040:37"><expr pos:start="1040:31" pos:end="1040:37"><name pos:start="1040:31" pos:end="1040:37">OT_QUAD</name></expr></argument>, <argument pos:start="1040:40" pos:end="1040:40"><expr pos:start="1040:40" pos:end="1040:40"><literal type="number" pos:start="1040:40" pos:end="1040:40">0</literal></expr></argument>, <argument pos:start="1040:43" pos:end="1040:47"><expr pos:start="1040:43" pos:end="1040:47"><name pos:start="1040:43" pos:end="1040:47">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1041:13" pos:end="1041:54"><expr pos:start="1041:13" pos:end="1041:53"><call pos:start="1041:13" pos:end="1041:53"><name pos:start="1041:13" pos:end="1041:27">tcg_gen_andi_tl</name><argument_list pos:start="1041:28" pos:end="1041:53">(<argument pos:start="1041:29" pos:end="1041:36"><expr pos:start="1041:29" pos:end="1041:36"><name pos:start="1041:29" pos:end="1041:36"><name pos:start="1041:29" pos:end="1041:33">cpu_T</name><index pos:start="1041:34" pos:end="1041:36">[<expr pos:start="1041:35" pos:end="1041:35"><literal type="number" pos:start="1041:35" pos:end="1041:35">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1041:39" pos:end="1041:46"><expr pos:start="1041:39" pos:end="1041:46"><name pos:start="1041:39" pos:end="1041:46"><name pos:start="1041:39" pos:end="1041:43">cpu_T</name><index pos:start="1041:44" pos:end="1041:46">[<expr pos:start="1041:45" pos:end="1041:45"><literal type="number" pos:start="1041:45" pos:end="1041:45">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1041:49" pos:end="1041:52"><expr pos:start="1041:49" pos:end="1041:52"><literal type="number" pos:start="1041:49" pos:end="1041:52">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1042:13" pos:end="1042:53"><expr pos:start="1042:13" pos:end="1042:52"><call pos:start="1042:13" pos:end="1042:52"><name pos:start="1042:13" pos:end="1042:26">tcg_gen_add_tl</name><argument_list pos:start="1042:27" pos:end="1042:52">(<argument pos:start="1042:28" pos:end="1042:33"><expr pos:start="1042:28" pos:end="1042:33"><name pos:start="1042:28" pos:end="1042:33">cpu_A0</name></expr></argument>, <argument pos:start="1042:36" pos:end="1042:41"><expr pos:start="1042:36" pos:end="1042:41"><name pos:start="1042:36" pos:end="1042:41">cpu_A0</name></expr></argument>, <argument pos:start="1042:44" pos:end="1042:51"><expr pos:start="1042:44" pos:end="1042:51"><name pos:start="1042:44" pos:end="1042:51"><name pos:start="1042:44" pos:end="1042:48">cpu_T</name><index pos:start="1042:49" pos:end="1042:51">[<expr pos:start="1042:50" pos:end="1042:50"><literal type="number" pos:start="1042:50" pos:end="1042:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="1043:11" pos:end="3141:17">else
<cpp:endif pos:start="1044:1" pos:end="1044:6">#<cpp:directive pos:start="1044:2" pos:end="1044:6">endif</cpp:directive></cpp:endif>
        <block pos:start="1045:9" pos:end="3141:17">{<block_content pos:start="1046:13" pos:end="3141:17">
            <expr_stmt pos:start="1046:13" pos:end="1046:38"><expr pos:start="1046:13" pos:end="1046:37"><call pos:start="1046:13" pos:end="1046:37"><name pos:start="1046:13" pos:end="1046:30">gen_op_movl_A0_reg</name><argument_list pos:start="1046:31" pos:end="1046:37">(<argument pos:start="1046:32" pos:end="1046:36"><expr pos:start="1046:32" pos:end="1046:36"><name pos:start="1046:32" pos:end="1046:36">R_EBX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1047:13" pos:end="1047:49"><expr pos:start="1047:13" pos:end="1047:48"><call pos:start="1047:13" pos:end="1047:48"><name pos:start="1047:13" pos:end="1047:29">gen_op_mov_TN_reg</name><argument_list pos:start="1047:30" pos:end="1047:48">(<argument pos:start="1047:31" pos:end="1047:37"><expr pos:start="1047:31" pos:end="1047:37"><name pos:start="1047:31" pos:end="1047:37">OT_LONG</name></expr></argument>, <argument pos:start="1047:40" pos:end="1047:40"><expr pos:start="1047:40" pos:end="1047:40"><literal type="number" pos:start="1047:40" pos:end="1047:40">0</literal></expr></argument>, <argument pos:start="1047:43" pos:end="1047:47"><expr pos:start="1047:43" pos:end="1047:47"><name pos:start="1047:43" pos:end="1047:47">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1048:13" pos:end="1048:54"><expr pos:start="1048:13" pos:end="1048:53"><call pos:start="1048:13" pos:end="1048:53"><name pos:start="1048:13" pos:end="1048:27">tcg_gen_andi_tl</name><argument_list pos:start="1048:28" pos:end="1048:53">(<argument pos:start="1048:29" pos:end="1048:36"><expr pos:start="1048:29" pos:end="1048:36"><name pos:start="1048:29" pos:end="1048:36"><name pos:start="1048:29" pos:end="1048:33">cpu_T</name><index pos:start="1048:34" pos:end="1048:36">[<expr pos:start="1048:35" pos:end="1048:35"><literal type="number" pos:start="1048:35" pos:end="1048:35">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1048:39" pos:end="1048:46"><expr pos:start="1048:39" pos:end="1048:46"><name pos:start="1048:39" pos:end="1048:46"><name pos:start="1048:39" pos:end="1048:43">cpu_T</name><index pos:start="1048:44" pos:end="1048:46">[<expr pos:start="1048:45" pos:end="1048:45"><literal type="number" pos:start="1048:45" pos:end="1048:45">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1048:49" pos:end="1048:52"><expr pos:start="1048:49" pos:end="1048:52"><literal type="number" pos:start="1048:49" pos:end="1048:52">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1049:13" pos:end="1049:53"><expr pos:start="1049:13" pos:end="1049:52"><call pos:start="1049:13" pos:end="1049:52"><name pos:start="1049:13" pos:end="1049:26">tcg_gen_add_tl</name><argument_list pos:start="1049:27" pos:end="1049:52">(<argument pos:start="1049:28" pos:end="1049:33"><expr pos:start="1049:28" pos:end="1049:33"><name pos:start="1049:28" pos:end="1049:33">cpu_A0</name></expr></argument>, <argument pos:start="1049:36" pos:end="1049:41"><expr pos:start="1049:36" pos:end="1049:41"><name pos:start="1049:36" pos:end="1049:41">cpu_A0</name></expr></argument>, <argument pos:start="1049:44" pos:end="1049:51"><expr pos:start="1049:44" pos:end="1049:51"><name pos:start="1049:44" pos:end="1049:51"><name pos:start="1049:44" pos:end="1049:48">cpu_T</name><index pos:start="1049:49" pos:end="1049:51">[<expr pos:start="1049:50" pos:end="1049:50"><literal type="number" pos:start="1049:50" pos:end="1049:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="1050:13" pos:end="1053:60"><if pos:start="1050:13" pos:end="1051:38">if <condition pos:start="1050:16" pos:end="1050:30">(<expr pos:start="1050:17" pos:end="1050:29"><name pos:start="1050:17" pos:end="1050:24"><name pos:start="1050:17" pos:end="1050:17">s</name><operator pos:start="1050:18" pos:end="1050:19">-&gt;</operator><name pos:start="1050:20" pos:end="1050:24">aflag</name></name> <operator pos:start="1050:26" pos:end="1050:27">==</operator> <literal type="number" pos:start="1050:29" pos:end="1050:29">0</literal></expr>)</condition><block type="pseudo" pos:start="1051:17" pos:end="1051:38"><block_content pos:start="1051:17" pos:end="1051:38">
                <expr_stmt pos:start="1051:17" pos:end="1051:38"><expr pos:start="1051:17" pos:end="1051:37"><call pos:start="1051:17" pos:end="1051:37"><name pos:start="1051:17" pos:end="1051:35">gen_op_andl_A0_ffff</name><argument_list pos:start="1051:36" pos:end="1051:37">()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else pos:start="1052:13" pos:end="1053:60">else<block type="pseudo" pos:start="1053:17" pos:end="1053:60"><block_content pos:start="1053:17" pos:end="1053:60">
                <expr_stmt pos:start="1053:17" pos:end="1053:60"><expr pos:start="1053:17" pos:end="1053:59"><call pos:start="1053:17" pos:end="1053:59"><name pos:start="1053:17" pos:end="1053:31">tcg_gen_andi_tl</name><argument_list pos:start="1053:32" pos:end="1053:59">(<argument pos:start="1053:33" pos:end="1053:38"><expr pos:start="1053:33" pos:end="1053:38"><name pos:start="1053:33" pos:end="1053:38">cpu_A0</name></expr></argument>, <argument pos:start="1053:41" pos:end="1053:46"><expr pos:start="1053:41" pos:end="1053:46"><name pos:start="1053:41" pos:end="1053:46">cpu_A0</name></expr></argument>, <argument pos:start="1053:49" pos:end="1053:58"><expr pos:start="1053:49" pos:end="1053:58"><literal type="number" pos:start="1053:49" pos:end="1053:58">0xffffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt pos:start="1054:9" pos:end="1054:29"><expr pos:start="1054:9" pos:end="1054:28"><call pos:start="1054:9" pos:end="1054:28"><name pos:start="1054:9" pos:end="1054:25">gen_add_A0_ds_seg</name><argument_list pos:start="1054:26" pos:end="1054:28">(<argument pos:start="1054:27" pos:end="1054:27"><expr pos:start="1054:27" pos:end="1054:27"><name pos:start="1054:27" pos:end="1054:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1055:9" pos:end="1055:49"><expr pos:start="1055:9" pos:end="1055:48"><call pos:start="1055:9" pos:end="1055:48"><name pos:start="1055:9" pos:end="1055:24">gen_op_ldu_T0_A0</name><argument_list pos:start="1055:25" pos:end="1055:48">(<argument pos:start="1055:26" pos:end="1055:47"><expr pos:start="1055:26" pos:end="1055:47"><name pos:start="1055:26" pos:end="1055:32">OT_BYTE</name> <operator pos:start="1055:34" pos:end="1055:34">+</operator> <name pos:start="1055:36" pos:end="1055:47"><name pos:start="1055:36" pos:end="1055:36">s</name><operator pos:start="1055:37" pos:end="1055:38">-&gt;</operator><name pos:start="1055:39" pos:end="1055:47">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1056:9" pos:end="1056:42"><expr pos:start="1056:9" pos:end="1056:41"><call pos:start="1056:9" pos:end="1056:41"><name pos:start="1056:9" pos:end="1056:25">gen_op_mov_reg_T0</name><argument_list pos:start="1056:26" pos:end="1056:41">(<argument pos:start="1056:27" pos:end="1056:33"><expr pos:start="1056:27" pos:end="1056:33"><name pos:start="1056:27" pos:end="1056:33">OT_BYTE</name></expr></argument>, <argument pos:start="1056:36" pos:end="1056:40"><expr pos:start="1056:36" pos:end="1056:40"><name pos:start="1056:36" pos:end="1056:40">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="1057:9" pos:end="1057:14">break;</break>
    <case pos:start="1058:5" pos:end="1058:23">case <expr pos:start="1058:10" pos:end="1058:22"><literal type="number" pos:start="1058:10" pos:end="1058:13">0xb0</literal> <operator pos:start="1058:15" pos:end="1058:17">...</operator> <literal type="number" pos:start="1058:19" pos:end="1058:22">0xb7</literal></expr>:</case> <comment type="block" pos:start="1058:25" pos:end="1058:39">/* mov R, Ib */</comment>
        <expr_stmt pos:start="1059:9" pos:end="1059:40"><expr pos:start="1059:9" pos:end="1059:39"><name pos:start="1059:9" pos:end="1059:11">val</name> <operator pos:start="1059:13" pos:end="1059:13">=</operator> <call pos:start="1059:15" pos:end="1059:39"><name pos:start="1059:15" pos:end="1059:22">insn_get</name><argument_list pos:start="1059:23" pos:end="1059:39">(<argument pos:start="1059:24" pos:end="1059:26"><expr pos:start="1059:24" pos:end="1059:26"><name pos:start="1059:24" pos:end="1059:26">env</name></expr></argument>, <argument pos:start="1059:29" pos:end="1059:29"><expr pos:start="1059:29" pos:end="1059:29"><name pos:start="1059:29" pos:end="1059:29">s</name></expr></argument>, <argument pos:start="1059:32" pos:end="1059:38"><expr pos:start="1059:32" pos:end="1059:38"><name pos:start="1059:32" pos:end="1059:38">OT_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1060:9" pos:end="1060:31"><expr pos:start="1060:9" pos:end="1060:30"><call pos:start="1060:9" pos:end="1060:30"><name pos:start="1060:9" pos:end="1060:25">gen_op_movl_T0_im</name><argument_list pos:start="1060:26" pos:end="1060:30">(<argument pos:start="1060:27" pos:end="1060:29"><expr pos:start="1060:27" pos:end="1060:29"><name pos:start="1060:27" pos:end="1060:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1061:9" pos:end="1061:55"><expr pos:start="1061:9" pos:end="1061:54"><call pos:start="1061:9" pos:end="1061:54"><name pos:start="1061:9" pos:end="1061:25">gen_op_mov_reg_T0</name><argument_list pos:start="1061:26" pos:end="1061:54">(<argument pos:start="1061:27" pos:end="1061:33"><expr pos:start="1061:27" pos:end="1061:33"><name pos:start="1061:27" pos:end="1061:33">OT_BYTE</name></expr></argument>, <argument pos:start="1061:36" pos:end="1061:53"><expr pos:start="1061:36" pos:end="1061:53"><operator pos:start="1061:36" pos:end="1061:36">(</operator><name pos:start="1061:37" pos:end="1061:37">b</name> <operator pos:start="1061:39" pos:end="1061:39">&amp;</operator> <literal type="number" pos:start="1061:41" pos:end="1061:41">7</literal><operator pos:start="1061:42" pos:end="1061:42">)</operator> <operator pos:start="1061:44" pos:end="1061:44">|</operator> <call pos:start="1061:46" pos:end="1061:53"><name pos:start="1061:46" pos:end="1061:50">REX_B</name><argument_list pos:start="1061:51" pos:end="1061:53">(<argument pos:start="1061:52" pos:end="1061:52"><expr pos:start="1061:52" pos:end="1061:52"><name pos:start="1061:52" pos:end="1061:52">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="1062:9" pos:end="1062:14">break;</break>
    <case pos:start="1063:5" pos:end="1065:0">case <expr pos:start="1063:10" pos:end="1063:22"><literal type="number" pos:start="1063:10" pos:end="1063:13">0xb8</literal> <operator pos:start="1063:15" pos:end="1063:17">...</operator> <literal type="number" pos:start="1063:19" pos:end="1063:22">0xbf</literal></expr>:</case> <comment type="block" pos:start="1063:25" pos:end="1063:39">/* mov R, Iv */</comment>
<cpp:ifdef pos:start="1064:1" pos:end="1064:20">#<cpp:directive pos:start="1064:2" pos:end="1064:6">ifdef</cpp:directive> <name pos:start="1064:8" pos:end="1064:20">TARGET_X86_64</name></cpp:ifdef>
        <if_stmt pos:start="1065:9" pos:end="3141:17"><if pos:start="1065:9" pos:end="1073:9">if <condition pos:start="1065:12" pos:end="1065:23">(<expr pos:start="1065:13" pos:end="1065:22"><name pos:start="1065:13" pos:end="1065:17">dflag</name> <operator pos:start="1065:19" pos:end="1065:20">==</operator> <literal type="number" pos:start="1065:22" pos:end="1065:22">2</literal></expr>)</condition> <block pos:start="1065:25" pos:end="1073:9">{<block_content pos:start="1066:13" pos:end="1072:44">
            <decl_stmt pos:start="1066:13" pos:end="1066:25"><decl pos:start="1066:13" pos:end="1066:24"><type pos:start="1066:13" pos:end="1066:20"><name pos:start="1066:13" pos:end="1066:20">uint64_t</name></type> <name pos:start="1066:22" pos:end="1066:24">tmp</name></decl>;</decl_stmt>
            <comment type="block" pos:start="1067:13" pos:end="1067:29">/* 64 bit case */</comment>
            <expr_stmt pos:start="1068:13" pos:end="1068:43"><expr pos:start="1068:13" pos:end="1068:42"><name pos:start="1068:13" pos:end="1068:15">tmp</name> <operator pos:start="1068:17" pos:end="1068:17">=</operator> <call pos:start="1068:19" pos:end="1068:42"><name pos:start="1068:19" pos:end="1068:30">cpu_ldq_code</name><argument_list pos:start="1068:31" pos:end="1068:42">(<argument pos:start="1068:32" pos:end="1068:34"><expr pos:start="1068:32" pos:end="1068:34"><name pos:start="1068:32" pos:end="1068:34">env</name></expr></argument>, <argument pos:start="1068:37" pos:end="1068:41"><expr pos:start="1068:37" pos:end="1068:41"><name pos:start="1068:37" pos:end="1068:41"><name pos:start="1068:37" pos:end="1068:37">s</name><operator pos:start="1068:38" pos:end="1068:39">-&gt;</operator><name pos:start="1068:40" pos:end="1068:41">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1069:13" pos:end="1069:23"><expr pos:start="1069:13" pos:end="1069:22"><name pos:start="1069:13" pos:end="1069:17"><name pos:start="1069:13" pos:end="1069:13">s</name><operator pos:start="1069:14" pos:end="1069:15">-&gt;</operator><name pos:start="1069:16" pos:end="1069:17">pc</name></name> <operator pos:start="1069:19" pos:end="1069:20">+=</operator> <literal type="number" pos:start="1069:22" pos:end="1069:22">8</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="1070:13" pos:end="1070:37"><expr pos:start="1070:13" pos:end="1070:36"><name pos:start="1070:13" pos:end="1070:15">reg</name> <operator pos:start="1070:17" pos:end="1070:17">=</operator> <operator pos:start="1070:19" pos:end="1070:19">(</operator><name pos:start="1070:20" pos:end="1070:20">b</name> <operator pos:start="1070:22" pos:end="1070:22">&amp;</operator> <literal type="number" pos:start="1070:24" pos:end="1070:24">7</literal><operator pos:start="1070:25" pos:end="1070:25">)</operator> <operator pos:start="1070:27" pos:end="1070:27">|</operator> <call pos:start="1070:29" pos:end="1070:36"><name pos:start="1070:29" pos:end="1070:33">REX_B</name><argument_list pos:start="1070:34" pos:end="1070:36">(<argument pos:start="1070:35" pos:end="1070:35"><expr pos:start="1070:35" pos:end="1070:35"><name pos:start="1070:35" pos:end="1070:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1071:13" pos:end="1071:33"><expr pos:start="1071:13" pos:end="1071:32"><call pos:start="1071:13" pos:end="1071:32"><name pos:start="1071:13" pos:end="1071:27">gen_movtl_T0_im</name><argument_list pos:start="1071:28" pos:end="1071:32">(<argument pos:start="1071:29" pos:end="1071:31"><expr pos:start="1071:29" pos:end="1071:31"><name pos:start="1071:29" pos:end="1071:31">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1072:13" pos:end="1072:44"><expr pos:start="1072:13" pos:end="1072:43"><call pos:start="1072:13" pos:end="1072:43"><name pos:start="1072:13" pos:end="1072:29">gen_op_mov_reg_T0</name><argument_list pos:start="1072:30" pos:end="1072:43">(<argument pos:start="1072:31" pos:end="1072:37"><expr pos:start="1072:31" pos:end="1072:37"><name pos:start="1072:31" pos:end="1072:37">OT_QUAD</name></expr></argument>, <argument pos:start="1072:40" pos:end="1072:42"><expr pos:start="1072:40" pos:end="1072:42"><name pos:start="1072:40" pos:end="1072:42">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="1073:11" pos:end="3141:17">else
<cpp:endif pos:start="1074:1" pos:end="1074:6">#<cpp:directive pos:start="1074:2" pos:end="1074:6">endif</cpp:directive></cpp:endif>
        <block pos:start="1075:9" pos:end="3141:17">{<block_content pos:start="1076:13" pos:end="3141:17">
            <expr_stmt pos:start="1076:13" pos:end="1076:43"><expr pos:start="1076:13" pos:end="1076:42"><name pos:start="1076:13" pos:end="1076:14">ot</name> <operator pos:start="1076:16" pos:end="1076:16">=</operator> <ternary pos:start="1076:18" pos:end="1076:42"><condition pos:start="1076:18" pos:end="1076:24"><expr pos:start="1076:18" pos:end="1076:22"><name pos:start="1076:18" pos:end="1076:22">dflag</name></expr> ?</condition><then pos:start="1076:26" pos:end="1076:32"> <expr pos:start="1076:26" pos:end="1076:32"><name pos:start="1076:26" pos:end="1076:32">OT_LONG</name></expr> </then><else pos:start="1076:34" pos:end="1076:42">: <expr pos:start="1076:36" pos:end="1076:42"><name pos:start="1076:36" pos:end="1076:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>
            <expr_stmt pos:start="1077:13" pos:end="1077:39"><expr pos:start="1077:13" pos:end="1077:38"><name pos:start="1077:13" pos:end="1077:15">val</name> <operator pos:start="1077:17" pos:end="1077:17">=</operator> <call pos:start="1077:19" pos:end="1077:38"><name pos:start="1077:19" pos:end="1077:26">insn_get</name><argument_list pos:start="1077:27" pos:end="1077:38">(<argument pos:start="1077:28" pos:end="1077:30"><expr pos:start="1077:28" pos:end="1077:30"><name pos:start="1077:28" pos:end="1077:30">env</name></expr></argument>, <argument pos:start="1077:33" pos:end="1077:33"><expr pos:start="1077:33" pos:end="1077:33"><name pos:start="1077:33" pos:end="1077:33">s</name></expr></argument>, <argument pos:start="1077:36" pos:end="1077:37"><expr pos:start="1077:36" pos:end="1077:37"><name pos:start="1077:36" pos:end="1077:37">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1078:13" pos:end="1078:37"><expr pos:start="1078:13" pos:end="1078:36"><name pos:start="1078:13" pos:end="1078:15">reg</name> <operator pos:start="1078:17" pos:end="1078:17">=</operator> <operator pos:start="1078:19" pos:end="1078:19">(</operator><name pos:start="1078:20" pos:end="1078:20">b</name> <operator pos:start="1078:22" pos:end="1078:22">&amp;</operator> <literal type="number" pos:start="1078:24" pos:end="1078:24">7</literal><operator pos:start="1078:25" pos:end="1078:25">)</operator> <operator pos:start="1078:27" pos:end="1078:27">|</operator> <call pos:start="1078:29" pos:end="1078:36"><name pos:start="1078:29" pos:end="1078:33">REX_B</name><argument_list pos:start="1078:34" pos:end="1078:36">(<argument pos:start="1078:35" pos:end="1078:35"><expr pos:start="1078:35" pos:end="1078:35"><name pos:start="1078:35" pos:end="1078:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1079:13" pos:end="1079:35"><expr pos:start="1079:13" pos:end="1079:34"><call pos:start="1079:13" pos:end="1079:34"><name pos:start="1079:13" pos:end="1079:29">gen_op_movl_T0_im</name><argument_list pos:start="1079:30" pos:end="1079:34">(<argument pos:start="1079:31" pos:end="1079:33"><expr pos:start="1079:31" pos:end="1079:33"><name pos:start="1079:31" pos:end="1079:33">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1080:13" pos:end="1080:39"><expr pos:start="1080:13" pos:end="1080:38"><call pos:start="1080:13" pos:end="1080:38"><name pos:start="1080:13" pos:end="1080:29">gen_op_mov_reg_T0</name><argument_list pos:start="1080:30" pos:end="1080:38">(<argument pos:start="1080:31" pos:end="1080:32"><expr pos:start="1080:31" pos:end="1080:32"><name pos:start="1080:31" pos:end="1080:32">ot</name></expr></argument>, <argument pos:start="1080:35" pos:end="1080:37"><expr pos:start="1080:35" pos:end="1080:37"><name pos:start="1080:35" pos:end="1080:37">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="1081:9" pos:end="1081:14">break;</break>
    <case pos:start="1082:5" pos:end="1082:23">case <expr pos:start="1082:10" pos:end="1082:22"><literal type="number" pos:start="1082:10" pos:end="1082:13">0x91</literal> <operator pos:start="1082:15" pos:end="1082:17">...</operator> <literal type="number" pos:start="1082:19" pos:end="1082:22">0x97</literal></expr>:</case> <comment type="block" pos:start="1082:25" pos:end="1082:41">/* xchg R, EAX */</comment>
    <label pos:start="1083:5" pos:end="1083:20"><name pos:start="1083:5" pos:end="1083:19">do_xchg_reg_eax</name>:</label>
        <expr_stmt pos:start="1084:9" pos:end="1084:29"><expr pos:start="1084:9" pos:end="1084:28"><name pos:start="1084:9" pos:end="1084:10">ot</name> <operator pos:start="1084:12" pos:end="1084:12">=</operator> <name pos:start="1084:14" pos:end="1084:18">dflag</name> <operator pos:start="1084:20" pos:end="1084:20">+</operator> <name pos:start="1084:22" pos:end="1084:28">OT_WORD</name></expr>;</expr_stmt>
        <expr_stmt pos:start="1085:9" pos:end="1085:33"><expr pos:start="1085:9" pos:end="1085:32"><name pos:start="1085:9" pos:end="1085:11">reg</name> <operator pos:start="1085:13" pos:end="1085:13">=</operator> <operator pos:start="1085:15" pos:end="1085:15">(</operator><name pos:start="1085:16" pos:end="1085:16">b</name> <operator pos:start="1085:18" pos:end="1085:18">&amp;</operator> <literal type="number" pos:start="1085:20" pos:end="1085:20">7</literal><operator pos:start="1085:21" pos:end="1085:21">)</operator> <operator pos:start="1085:23" pos:end="1085:23">|</operator> <call pos:start="1085:25" pos:end="1085:32"><name pos:start="1085:25" pos:end="1085:29">REX_B</name><argument_list pos:start="1085:30" pos:end="1085:32">(<argument pos:start="1085:31" pos:end="1085:31"><expr pos:start="1085:31" pos:end="1085:31"><name pos:start="1085:31" pos:end="1085:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1086:9" pos:end="1086:19"><expr pos:start="1086:9" pos:end="1086:18"><name pos:start="1086:9" pos:end="1086:10">rm</name> <operator pos:start="1086:12" pos:end="1086:12">=</operator> <name pos:start="1086:14" pos:end="1086:18">R_EAX</name></expr>;</expr_stmt>
        <goto pos:start="1087:9" pos:end="1087:25">goto <name pos:start="1087:14" pos:end="1087:24">do_xchg_reg</name>;</goto>
    <case pos:start="1088:5" pos:end="1088:14">case <expr pos:start="1088:10" pos:end="1088:13"><literal type="number" pos:start="1088:10" pos:end="1088:13">0x86</literal></expr>:</case>
    <case pos:start="1089:5" pos:end="1089:14">case <expr pos:start="1089:10" pos:end="1089:13"><literal type="number" pos:start="1089:10" pos:end="1089:13">0x87</literal></expr>:</case> <comment type="block" pos:start="1089:16" pos:end="1089:32">/* xchg Ev, Gv */</comment>
        <if_stmt pos:start="1090:9" pos:end="1093:33"><if pos:start="1090:9" pos:end="1091:25">if <condition pos:start="1090:12" pos:end="1090:25">(<expr pos:start="1090:13" pos:end="1090:24"><operator pos:start="1090:13" pos:end="1090:13">(</operator><name pos:start="1090:14" pos:end="1090:14">b</name> <operator pos:start="1090:16" pos:end="1090:16">&amp;</operator> <literal type="number" pos:start="1090:18" pos:end="1090:18">1</literal><operator pos:start="1090:19" pos:end="1090:19">)</operator> <operator pos:start="1090:21" pos:end="1090:22">==</operator> <literal type="number" pos:start="1090:24" pos:end="1090:24">0</literal></expr>)</condition><block type="pseudo" pos:start="1091:13" pos:end="1091:25"><block_content pos:start="1091:13" pos:end="1091:25">
            <expr_stmt pos:start="1091:13" pos:end="1091:25"><expr pos:start="1091:13" pos:end="1091:24"><name pos:start="1091:13" pos:end="1091:14">ot</name> <operator pos:start="1091:16" pos:end="1091:16">=</operator> <name pos:start="1091:18" pos:end="1091:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>
        <else pos:start="1092:9" pos:end="1093:33">else<block type="pseudo" pos:start="1093:13" pos:end="1093:33"><block_content pos:start="1093:13" pos:end="1093:33">
            <expr_stmt pos:start="1093:13" pos:end="1093:33"><expr pos:start="1093:13" pos:end="1093:32"><name pos:start="1093:13" pos:end="1093:14">ot</name> <operator pos:start="1093:16" pos:end="1093:16">=</operator> <name pos:start="1093:18" pos:end="1093:22">dflag</name> <operator pos:start="1093:24" pos:end="1093:24">+</operator> <name pos:start="1093:26" pos:end="1093:32">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt pos:start="1094:9" pos:end="1094:44"><expr pos:start="1094:9" pos:end="1094:43"><name pos:start="1094:9" pos:end="1094:13">modrm</name> <operator pos:start="1094:15" pos:end="1094:15">=</operator> <call pos:start="1094:17" pos:end="1094:43"><name pos:start="1094:17" pos:end="1094:29">cpu_ldub_code</name><argument_list pos:start="1094:30" pos:end="1094:43">(<argument pos:start="1094:31" pos:end="1094:33"><expr pos:start="1094:31" pos:end="1094:33"><name pos:start="1094:31" pos:end="1094:33">env</name></expr></argument>, <argument pos:start="1094:36" pos:end="1094:42"><expr pos:start="1094:36" pos:end="1094:42"><name pos:start="1094:36" pos:end="1094:40"><name pos:start="1094:36" pos:end="1094:36">s</name><operator pos:start="1094:37" pos:end="1094:38">-&gt;</operator><name pos:start="1094:39" pos:end="1094:40">pc</name></name><operator pos:start="1094:41" pos:end="1094:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1095:9" pos:end="1095:41"><expr pos:start="1095:9" pos:end="1095:40"><name pos:start="1095:9" pos:end="1095:11">reg</name> <operator pos:start="1095:13" pos:end="1095:13">=</operator> <operator pos:start="1095:15" pos:end="1095:15">(</operator><operator pos:start="1095:16" pos:end="1095:16">(</operator><name pos:start="1095:17" pos:end="1095:21">modrm</name> <operator pos:start="1095:23" pos:end="1095:24">&gt;&gt;</operator> <literal type="number" pos:start="1095:26" pos:end="1095:26">3</literal><operator pos:start="1095:27" pos:end="1095:27">)</operator> <operator pos:start="1095:29" pos:end="1095:29">&amp;</operator> <literal type="number" pos:start="1095:31" pos:end="1095:31">7</literal><operator pos:start="1095:32" pos:end="1095:32">)</operator> <operator pos:start="1095:34" pos:end="1095:34">|</operator> <name pos:start="1095:36" pos:end="1095:40">rex_r</name></expr>;</expr_stmt>
        <expr_stmt pos:start="1096:9" pos:end="1096:31"><expr pos:start="1096:9" pos:end="1096:30"><name pos:start="1096:9" pos:end="1096:11">mod</name> <operator pos:start="1096:13" pos:end="1096:13">=</operator> <operator pos:start="1096:15" pos:end="1096:15">(</operator><name pos:start="1096:16" pos:end="1096:20">modrm</name> <operator pos:start="1096:22" pos:end="1096:23">&gt;&gt;</operator> <literal type="number" pos:start="1096:25" pos:end="1096:25">6</literal><operator pos:start="1096:26" pos:end="1096:26">)</operator> <operator pos:start="1096:28" pos:end="1096:28">&amp;</operator> <literal type="number" pos:start="1096:30" pos:end="1096:30">3</literal></expr>;</expr_stmt>
        <if_stmt pos:start="1097:9" pos:end="3141:17"><if pos:start="1097:9" pos:end="1104:9">if <condition pos:start="1097:12" pos:end="1097:21">(<expr pos:start="1097:13" pos:end="1097:20"><name pos:start="1097:13" pos:end="1097:15">mod</name> <operator pos:start="1097:17" pos:end="1097:18">==</operator> <literal type="number" pos:start="1097:20" pos:end="1097:20">3</literal></expr>)</condition> <block pos:start="1097:23" pos:end="1104:9">{<block_content pos:start="1098:13" pos:end="1103:39">
            <expr_stmt pos:start="1098:13" pos:end="1098:40"><expr pos:start="1098:13" pos:end="1098:39"><name pos:start="1098:13" pos:end="1098:14">rm</name> <operator pos:start="1098:16" pos:end="1098:16">=</operator> <operator pos:start="1098:18" pos:end="1098:18">(</operator><name pos:start="1098:19" pos:end="1098:23">modrm</name> <operator pos:start="1098:25" pos:end="1098:25">&amp;</operator> <literal type="number" pos:start="1098:27" pos:end="1098:27">7</literal><operator pos:start="1098:28" pos:end="1098:28">)</operator> <operator pos:start="1098:30" pos:end="1098:30">|</operator> <call pos:start="1098:32" pos:end="1098:39"><name pos:start="1098:32" pos:end="1098:36">REX_B</name><argument_list pos:start="1098:37" pos:end="1098:39">(<argument pos:start="1098:38" pos:end="1098:38"><expr pos:start="1098:38" pos:end="1098:38"><name pos:start="1098:38" pos:end="1098:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <label pos:start="1099:9" pos:end="1099:20"><name pos:start="1099:9" pos:end="1099:19">do_xchg_reg</name>:</label>
            <expr_stmt pos:start="1100:13" pos:end="1100:42"><expr pos:start="1100:13" pos:end="1100:41"><call pos:start="1100:13" pos:end="1100:41"><name pos:start="1100:13" pos:end="1100:29">gen_op_mov_TN_reg</name><argument_list pos:start="1100:30" pos:end="1100:41">(<argument pos:start="1100:31" pos:end="1100:32"><expr pos:start="1100:31" pos:end="1100:32"><name pos:start="1100:31" pos:end="1100:32">ot</name></expr></argument>, <argument pos:start="1100:35" pos:end="1100:35"><expr pos:start="1100:35" pos:end="1100:35"><literal type="number" pos:start="1100:35" pos:end="1100:35">0</literal></expr></argument>, <argument pos:start="1100:38" pos:end="1100:40"><expr pos:start="1100:38" pos:end="1100:40"><name pos:start="1100:38" pos:end="1100:40">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1101:13" pos:end="1101:41"><expr pos:start="1101:13" pos:end="1101:40"><call pos:start="1101:13" pos:end="1101:40"><name pos:start="1101:13" pos:end="1101:29">gen_op_mov_TN_reg</name><argument_list pos:start="1101:30" pos:end="1101:40">(<argument pos:start="1101:31" pos:end="1101:32"><expr pos:start="1101:31" pos:end="1101:32"><name pos:start="1101:31" pos:end="1101:32">ot</name></expr></argument>, <argument pos:start="1101:35" pos:end="1101:35"><expr pos:start="1101:35" pos:end="1101:35"><literal type="number" pos:start="1101:35" pos:end="1101:35">1</literal></expr></argument>, <argument pos:start="1101:38" pos:end="1101:39"><expr pos:start="1101:38" pos:end="1101:39"><name pos:start="1101:38" pos:end="1101:39">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1102:13" pos:end="1102:38"><expr pos:start="1102:13" pos:end="1102:37"><call pos:start="1102:13" pos:end="1102:37"><name pos:start="1102:13" pos:end="1102:29">gen_op_mov_reg_T0</name><argument_list pos:start="1102:30" pos:end="1102:37">(<argument pos:start="1102:31" pos:end="1102:32"><expr pos:start="1102:31" pos:end="1102:32"><name pos:start="1102:31" pos:end="1102:32">ot</name></expr></argument>, <argument pos:start="1102:35" pos:end="1102:36"><expr pos:start="1102:35" pos:end="1102:36"><name pos:start="1102:35" pos:end="1102:36">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1103:13" pos:end="1103:39"><expr pos:start="1103:13" pos:end="1103:38"><call pos:start="1103:13" pos:end="1103:38"><name pos:start="1103:13" pos:end="1103:29">gen_op_mov_reg_T1</name><argument_list pos:start="1103:30" pos:end="1103:38">(<argument pos:start="1103:31" pos:end="1103:32"><expr pos:start="1103:31" pos:end="1103:32"><name pos:start="1103:31" pos:end="1103:32">ot</name></expr></argument>, <argument pos:start="1103:35" pos:end="1103:37"><expr pos:start="1103:35" pos:end="1103:37"><name pos:start="1103:35" pos:end="1103:37">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="1104:11" pos:end="3141:17">else <block pos:start="1104:16" pos:end="3141:17">{<block_content pos:start="1105:13" pos:end="3141:17">
            <expr_stmt pos:start="1105:13" pos:end="1105:66"><expr pos:start="1105:13" pos:end="1105:65"><call pos:start="1105:13" pos:end="1105:65"><name pos:start="1105:13" pos:end="1105:25">gen_lea_modrm</name><argument_list pos:start="1105:26" pos:end="1105:65">(<argument pos:start="1105:27" pos:end="1105:29"><expr pos:start="1105:27" pos:end="1105:29"><name pos:start="1105:27" pos:end="1105:29">env</name></expr></argument>, <argument pos:start="1105:32" pos:end="1105:32"><expr pos:start="1105:32" pos:end="1105:32"><name pos:start="1105:32" pos:end="1105:32">s</name></expr></argument>, <argument pos:start="1105:35" pos:end="1105:39"><expr pos:start="1105:35" pos:end="1105:39"><name pos:start="1105:35" pos:end="1105:39">modrm</name></expr></argument>, <argument pos:start="1105:42" pos:end="1105:50"><expr pos:start="1105:42" pos:end="1105:50"><operator pos:start="1105:42" pos:end="1105:42">&amp;</operator><name pos:start="1105:43" pos:end="1105:50">reg_addr</name></expr></argument>, <argument pos:start="1105:53" pos:end="1105:64"><expr pos:start="1105:53" pos:end="1105:64"><operator pos:start="1105:53" pos:end="1105:53">&amp;</operator><name pos:start="1105:54" pos:end="1105:64">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1106:13" pos:end="1106:42"><expr pos:start="1106:13" pos:end="1106:41"><call pos:start="1106:13" pos:end="1106:41"><name pos:start="1106:13" pos:end="1106:29">gen_op_mov_TN_reg</name><argument_list pos:start="1106:30" pos:end="1106:41">(<argument pos:start="1106:31" pos:end="1106:32"><expr pos:start="1106:31" pos:end="1106:32"><name pos:start="1106:31" pos:end="1106:32">ot</name></expr></argument>, <argument pos:start="1106:35" pos:end="1106:35"><expr pos:start="1106:35" pos:end="1106:35"><literal type="number" pos:start="1106:35" pos:end="1106:35">0</literal></expr></argument>, <argument pos:start="1106:38" pos:end="1106:40"><expr pos:start="1106:38" pos:end="1106:40"><name pos:start="1106:38" pos:end="1106:40">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block" pos:start="1107:13" pos:end="1107:44">/* for xchg, lock is implicit */</comment>
            <if_stmt pos:start="1108:13" pos:end="1109:34"><if pos:start="1108:13" pos:end="1109:34">if <condition pos:start="1108:16" pos:end="1108:42">(<expr pos:start="1108:17" pos:end="1108:41"><operator pos:start="1108:17" pos:end="1108:17">!</operator><operator pos:start="1108:18" pos:end="1108:18">(</operator><name pos:start="1108:19" pos:end="1108:26">prefixes</name> <operator pos:start="1108:28" pos:end="1108:28">&amp;</operator> <name pos:start="1108:30" pos:end="1108:40">PREFIX_LOCK</name><operator pos:start="1108:41" pos:end="1108:41">)</operator></expr>)</condition><block type="pseudo" pos:start="1109:17" pos:end="1109:34"><block_content pos:start="1109:17" pos:end="1109:34">
                <expr_stmt pos:start="1109:17" pos:end="1109:34"><expr pos:start="1109:17" pos:end="1109:33"><call pos:start="1109:17" pos:end="1109:33"><name pos:start="1109:17" pos:end="1109:31">gen_helper_lock</name><argument_list pos:start="1109:32" pos:end="1109:33">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt pos:start="1110:13" pos:end="1110:47"><expr pos:start="1110:13" pos:end="1110:46"><call pos:start="1110:13" pos:end="1110:46"><name pos:start="1110:13" pos:end="1110:27">gen_op_ld_T1_A0</name><argument_list pos:start="1110:28" pos:end="1110:46">(<argument pos:start="1110:29" pos:end="1110:45"><expr pos:start="1110:29" pos:end="1110:45"><name pos:start="1110:29" pos:end="1110:30">ot</name> <operator pos:start="1110:32" pos:end="1110:32">+</operator> <name pos:start="1110:34" pos:end="1110:45"><name pos:start="1110:34" pos:end="1110:34">s</name><operator pos:start="1110:35" pos:end="1110:36">-&gt;</operator><name pos:start="1110:37" pos:end="1110:45">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1111:13" pos:end="1111:47"><expr pos:start="1111:13" pos:end="1111:46"><call pos:start="1111:13" pos:end="1111:46"><name pos:start="1111:13" pos:end="1111:27">gen_op_st_T0_A0</name><argument_list pos:start="1111:28" pos:end="1111:46">(<argument pos:start="1111:29" pos:end="1111:45"><expr pos:start="1111:29" pos:end="1111:45"><name pos:start="1111:29" pos:end="1111:30">ot</name> <operator pos:start="1111:32" pos:end="1111:32">+</operator> <name pos:start="1111:34" pos:end="1111:45"><name pos:start="1111:34" pos:end="1111:34">s</name><operator pos:start="1111:35" pos:end="1111:36">-&gt;</operator><name pos:start="1111:37" pos:end="1111:45">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="1112:13" pos:end="1113:36"><if pos:start="1112:13" pos:end="1113:36">if <condition pos:start="1112:16" pos:end="1112:42">(<expr pos:start="1112:17" pos:end="1112:41"><operator pos:start="1112:17" pos:end="1112:17">!</operator><operator pos:start="1112:18" pos:end="1112:18">(</operator><name pos:start="1112:19" pos:end="1112:26">prefixes</name> <operator pos:start="1112:28" pos:end="1112:28">&amp;</operator> <name pos:start="1112:30" pos:end="1112:40">PREFIX_LOCK</name><operator pos:start="1112:41" pos:end="1112:41">)</operator></expr>)</condition><block type="pseudo" pos:start="1113:17" pos:end="1113:36"><block_content pos:start="1113:17" pos:end="1113:36">
                <expr_stmt pos:start="1113:17" pos:end="1113:36"><expr pos:start="1113:17" pos:end="1113:35"><call pos:start="1113:17" pos:end="1113:35"><name pos:start="1113:17" pos:end="1113:33">gen_helper_unlock</name><argument_list pos:start="1113:34" pos:end="1113:35">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt pos:start="1114:13" pos:end="1114:39"><expr pos:start="1114:13" pos:end="1114:38"><call pos:start="1114:13" pos:end="1114:38"><name pos:start="1114:13" pos:end="1114:29">gen_op_mov_reg_T1</name><argument_list pos:start="1114:30" pos:end="1114:38">(<argument pos:start="1114:31" pos:end="1114:32"><expr pos:start="1114:31" pos:end="1114:32"><name pos:start="1114:31" pos:end="1114:32">ot</name></expr></argument>, <argument pos:start="1114:35" pos:end="1114:37"><expr pos:start="1114:35" pos:end="1114:37"><name pos:start="1114:35" pos:end="1114:37">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="1115:9" pos:end="1115:14">break;</break>
    <case pos:start="1116:5" pos:end="1116:14">case <expr pos:start="1116:10" pos:end="1116:13"><literal type="number" pos:start="1116:10" pos:end="1116:13">0xc4</literal></expr>:</case> <comment type="block" pos:start="1116:16" pos:end="1116:27">/* les Gv */</comment>
        <comment type="block" pos:start="1117:9" pos:end="1117:49">/* In CODE64 this is VEX3; see above.  */</comment>
        <expr_stmt pos:start="1118:9" pos:end="1118:18"><expr pos:start="1118:9" pos:end="1118:17"><name pos:start="1118:9" pos:end="1118:10">op</name> <operator pos:start="1118:12" pos:end="1118:12">=</operator> <name pos:start="1118:14" pos:end="1118:17">R_ES</name></expr>;</expr_stmt>
        <goto pos:start="1119:9" pos:end="1119:20">goto <name pos:start="1119:14" pos:end="1119:19">do_lxx</name>;</goto>
    <case pos:start="1120:5" pos:end="1120:14">case <expr pos:start="1120:10" pos:end="1120:13"><literal type="number" pos:start="1120:10" pos:end="1120:13">0xc5</literal></expr>:</case> <comment type="block" pos:start="1120:16" pos:end="1120:27">/* lds Gv */</comment>
        <comment type="block" pos:start="1121:9" pos:end="1121:49">/* In CODE64 this is VEX2; see above.  */</comment>
        <expr_stmt pos:start="1122:9" pos:end="1122:18"><expr pos:start="1122:9" pos:end="1122:17"><name pos:start="1122:9" pos:end="1122:10">op</name> <operator pos:start="1122:12" pos:end="1122:12">=</operator> <name pos:start="1122:14" pos:end="1122:17">R_DS</name></expr>;</expr_stmt>
        <goto pos:start="1123:9" pos:end="1123:20">goto <name pos:start="1123:14" pos:end="1123:19">do_lxx</name>;</goto>
    <case pos:start="1124:5" pos:end="1124:15">case <expr pos:start="1124:10" pos:end="1124:14"><literal type="number" pos:start="1124:10" pos:end="1124:14">0x1b2</literal></expr>:</case> <comment type="block" pos:start="1124:17" pos:end="1124:28">/* lss Gv */</comment>
        <expr_stmt pos:start="1125:9" pos:end="1125:18"><expr pos:start="1125:9" pos:end="1125:17"><name pos:start="1125:9" pos:end="1125:10">op</name> <operator pos:start="1125:12" pos:end="1125:12">=</operator> <name pos:start="1125:14" pos:end="1125:17">R_SS</name></expr>;</expr_stmt>
        <goto pos:start="1126:9" pos:end="1126:20">goto <name pos:start="1126:14" pos:end="1126:19">do_lxx</name>;</goto>
    <case pos:start="1127:5" pos:end="1127:15">case <expr pos:start="1127:10" pos:end="1127:14"><literal type="number" pos:start="1127:10" pos:end="1127:14">0x1b4</literal></expr>:</case> <comment type="block" pos:start="1127:17" pos:end="1127:28">/* lfs Gv */</comment>
        <expr_stmt pos:start="1128:9" pos:end="1128:18"><expr pos:start="1128:9" pos:end="1128:17"><name pos:start="1128:9" pos:end="1128:10">op</name> <operator pos:start="1128:12" pos:end="1128:12">=</operator> <name pos:start="1128:14" pos:end="1128:17">R_FS</name></expr>;</expr_stmt>
        <goto pos:start="1129:9" pos:end="1129:20">goto <name pos:start="1129:14" pos:end="1129:19">do_lxx</name>;</goto>
    <case pos:start="1130:5" pos:end="1130:15">case <expr pos:start="1130:10" pos:end="1130:14"><literal type="number" pos:start="1130:10" pos:end="1130:14">0x1b5</literal></expr>:</case> <comment type="block" pos:start="1130:17" pos:end="1130:28">/* lgs Gv */</comment>
        <expr_stmt pos:start="1131:9" pos:end="1131:18"><expr pos:start="1131:9" pos:end="1131:17"><name pos:start="1131:9" pos:end="1131:10">op</name> <operator pos:start="1131:12" pos:end="1131:12">=</operator> <name pos:start="1131:14" pos:end="1131:17">R_GS</name></expr>;</expr_stmt>
    <label pos:start="1132:5" pos:end="1132:11"><name pos:start="1132:5" pos:end="1132:10">do_lxx</name>:</label>
        <expr_stmt pos:start="1133:9" pos:end="1133:39"><expr pos:start="1133:9" pos:end="1133:38"><name pos:start="1133:9" pos:end="1133:10">ot</name> <operator pos:start="1133:12" pos:end="1133:12">=</operator> <ternary pos:start="1133:14" pos:end="1133:38"><condition pos:start="1133:14" pos:end="1133:20"><expr pos:start="1133:14" pos:end="1133:18"><name pos:start="1133:14" pos:end="1133:18">dflag</name></expr> ?</condition><then pos:start="1133:22" pos:end="1133:28"> <expr pos:start="1133:22" pos:end="1133:28"><name pos:start="1133:22" pos:end="1133:28">OT_LONG</name></expr> </then><else pos:start="1133:30" pos:end="1133:38">: <expr pos:start="1133:32" pos:end="1133:38"><name pos:start="1133:32" pos:end="1133:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt pos:start="1134:9" pos:end="1134:44"><expr pos:start="1134:9" pos:end="1134:43"><name pos:start="1134:9" pos:end="1134:13">modrm</name> <operator pos:start="1134:15" pos:end="1134:15">=</operator> <call pos:start="1134:17" pos:end="1134:43"><name pos:start="1134:17" pos:end="1134:29">cpu_ldub_code</name><argument_list pos:start="1134:30" pos:end="1134:43">(<argument pos:start="1134:31" pos:end="1134:33"><expr pos:start="1134:31" pos:end="1134:33"><name pos:start="1134:31" pos:end="1134:33">env</name></expr></argument>, <argument pos:start="1134:36" pos:end="1134:42"><expr pos:start="1134:36" pos:end="1134:42"><name pos:start="1134:36" pos:end="1134:40"><name pos:start="1134:36" pos:end="1134:36">s</name><operator pos:start="1134:37" pos:end="1134:38">-&gt;</operator><name pos:start="1134:39" pos:end="1134:40">pc</name></name><operator pos:start="1134:41" pos:end="1134:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1135:9" pos:end="1135:41"><expr pos:start="1135:9" pos:end="1135:40"><name pos:start="1135:9" pos:end="1135:11">reg</name> <operator pos:start="1135:13" pos:end="1135:13">=</operator> <operator pos:start="1135:15" pos:end="1135:15">(</operator><operator pos:start="1135:16" pos:end="1135:16">(</operator><name pos:start="1135:17" pos:end="1135:21">modrm</name> <operator pos:start="1135:23" pos:end="1135:24">&gt;&gt;</operator> <literal type="number" pos:start="1135:26" pos:end="1135:26">3</literal><operator pos:start="1135:27" pos:end="1135:27">)</operator> <operator pos:start="1135:29" pos:end="1135:29">&amp;</operator> <literal type="number" pos:start="1135:31" pos:end="1135:31">7</literal><operator pos:start="1135:32" pos:end="1135:32">)</operator> <operator pos:start="1135:34" pos:end="1135:34">|</operator> <name pos:start="1135:36" pos:end="1135:40">rex_r</name></expr>;</expr_stmt>
        <expr_stmt pos:start="1136:9" pos:end="1136:31"><expr pos:start="1136:9" pos:end="1136:30"><name pos:start="1136:9" pos:end="1136:11">mod</name> <operator pos:start="1136:13" pos:end="1136:13">=</operator> <operator pos:start="1136:15" pos:end="1136:15">(</operator><name pos:start="1136:16" pos:end="1136:20">modrm</name> <operator pos:start="1136:22" pos:end="1136:23">&gt;&gt;</operator> <literal type="number" pos:start="1136:25" pos:end="1136:25">6</literal><operator pos:start="1136:26" pos:end="1136:26">)</operator> <operator pos:start="1136:28" pos:end="1136:28">&amp;</operator> <literal type="number" pos:start="1136:30" pos:end="1136:30">3</literal></expr>;</expr_stmt>
        <if_stmt pos:start="1137:9" pos:end="1138:62"><if pos:start="1137:9" pos:end="1138:62">if <condition pos:start="1137:12" pos:end="1137:21">(<expr pos:start="1137:13" pos:end="1137:20"><name pos:start="1137:13" pos:end="1137:15">mod</name> <operator pos:start="1137:17" pos:end="1137:18">==</operator> <literal type="number" pos:start="1137:20" pos:end="1137:20">3</literal></expr>)</condition><block type="pseudo" pos:start="1138:9" pos:end="1138:62"><block_content pos:start="1138:9" pos:end="1138:62">
        <expr_stmt pos:start="1138:9" pos:end="1138:62"><expr pos:start="1138:9" pos:end="1138:61"><call pos:start="1138:9" pos:end="1138:61"><name pos:start="1138:9" pos:end="1138:21">gen_lea_modrm</name><argument_list pos:start="1138:22" pos:end="1138:61">(<argument pos:start="1138:23" pos:end="1138:25"><expr pos:start="1138:23" pos:end="1138:25"><name pos:start="1138:23" pos:end="1138:25">env</name></expr></argument>, <argument pos:start="1138:28" pos:end="1138:28"><expr pos:start="1138:28" pos:end="1138:28"><name pos:start="1138:28" pos:end="1138:28">s</name></expr></argument>, <argument pos:start="1138:31" pos:end="1138:35"><expr pos:start="1138:31" pos:end="1138:35"><name pos:start="1138:31" pos:end="1138:35">modrm</name></expr></argument>, <argument pos:start="1138:38" pos:end="1138:46"><expr pos:start="1138:38" pos:end="1138:46"><operator pos:start="1138:38" pos:end="1138:38">&amp;</operator><name pos:start="1138:39" pos:end="1138:46">reg_addr</name></expr></argument>, <argument pos:start="1138:49" pos:end="1138:60"><expr pos:start="1138:49" pos:end="1138:60"><operator pos:start="1138:49" pos:end="1138:49">&amp;</operator><name pos:start="1138:50" pos:end="1138:60">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="1139:9" pos:end="1139:43"><expr pos:start="1139:9" pos:end="1139:42"><call pos:start="1139:9" pos:end="1139:42"><name pos:start="1139:9" pos:end="1139:23">gen_op_ld_T1_A0</name><argument_list pos:start="1139:24" pos:end="1139:42">(<argument pos:start="1139:25" pos:end="1139:41"><expr pos:start="1139:25" pos:end="1139:41"><name pos:start="1139:25" pos:end="1139:26">ot</name> <operator pos:start="1139:28" pos:end="1139:28">+</operator> <name pos:start="1139:30" pos:end="1139:41"><name pos:start="1139:30" pos:end="1139:30">s</name><operator pos:start="1139:31" pos:end="1139:32">-&gt;</operator><name pos:start="1139:33" pos:end="1139:41">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1140:9" pos:end="1140:50"><expr pos:start="1140:9" pos:end="1140:49"><call pos:start="1140:9" pos:end="1140:49"><name pos:start="1140:9" pos:end="1140:21">gen_add_A0_im</name><argument_list pos:start="1140:22" pos:end="1140:49">(<argument pos:start="1140:23" pos:end="1140:23"><expr pos:start="1140:23" pos:end="1140:23"><name pos:start="1140:23" pos:end="1140:23">s</name></expr></argument>, <argument pos:start="1140:26" pos:end="1140:48"><expr pos:start="1140:26" pos:end="1140:48"><literal type="number" pos:start="1140:26" pos:end="1140:26">1</literal> <operator pos:start="1140:28" pos:end="1140:29">&lt;&lt;</operator> <operator pos:start="1140:31" pos:end="1140:31">(</operator><name pos:start="1140:32" pos:end="1140:33">ot</name> <operator pos:start="1140:35" pos:end="1140:35">-</operator> <name pos:start="1140:37" pos:end="1140:43">OT_WORD</name> <operator pos:start="1140:45" pos:end="1140:45">+</operator> <literal type="number" pos:start="1140:47" pos:end="1140:47">1</literal><operator pos:start="1140:48" pos:end="1140:48">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="1141:9" pos:end="1141:66">/* load the segment first to handle exceptions properly */</comment>
        <expr_stmt pos:start="1142:9" pos:end="1142:49"><expr pos:start="1142:9" pos:end="1142:48"><call pos:start="1142:9" pos:end="1142:48"><name pos:start="1142:9" pos:end="1142:24">gen_op_ldu_T0_A0</name><argument_list pos:start="1142:25" pos:end="1142:48">(<argument pos:start="1142:26" pos:end="1142:47"><expr pos:start="1142:26" pos:end="1142:47"><name pos:start="1142:26" pos:end="1142:32">OT_WORD</name> <operator pos:start="1142:34" pos:end="1142:34">+</operator> <name pos:start="1142:36" pos:end="1142:47"><name pos:start="1142:36" pos:end="1142:36">s</name><operator pos:start="1142:37" pos:end="1142:38">-&gt;</operator><name pos:start="1142:39" pos:end="1142:47">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1143:9" pos:end="1143:54"><expr pos:start="1143:9" pos:end="1143:53"><call pos:start="1143:9" pos:end="1143:53"><name pos:start="1143:9" pos:end="1143:23">gen_movl_seg_T0</name><argument_list pos:start="1143:24" pos:end="1143:53">(<argument pos:start="1143:25" pos:end="1143:25"><expr pos:start="1143:25" pos:end="1143:25"><name pos:start="1143:25" pos:end="1143:25">s</name></expr></argument>, <argument pos:start="1143:28" pos:end="1143:29"><expr pos:start="1143:28" pos:end="1143:29"><name pos:start="1143:28" pos:end="1143:29">op</name></expr></argument>, <argument pos:start="1143:32" pos:end="1143:52"><expr pos:start="1143:32" pos:end="1143:52"><name pos:start="1143:32" pos:end="1143:39">pc_start</name> <operator pos:start="1143:41" pos:end="1143:41">-</operator> <name pos:start="1143:43" pos:end="1143:52"><name pos:start="1143:43" pos:end="1143:43">s</name><operator pos:start="1143:44" pos:end="1143:45">-&gt;</operator><name pos:start="1143:46" pos:end="1143:52">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="1144:9" pos:end="1144:31">/* then put the data */</comment>
        <expr_stmt pos:start="1145:9" pos:end="1145:35"><expr pos:start="1145:9" pos:end="1145:34"><call pos:start="1145:9" pos:end="1145:34"><name pos:start="1145:9" pos:end="1145:25">gen_op_mov_reg_T1</name><argument_list pos:start="1145:26" pos:end="1145:34">(<argument pos:start="1145:27" pos:end="1145:28"><expr pos:start="1145:27" pos:end="1145:28"><name pos:start="1145:27" pos:end="1145:28">ot</name></expr></argument>, <argument pos:start="1145:31" pos:end="1145:33"><expr pos:start="1145:31" pos:end="1145:33"><name pos:start="1145:31" pos:end="1145:33">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1146:9" pos:end="3141:17"><if pos:start="1146:9" pos:end="3141:17">if <condition pos:start="1146:12" pos:end="1146:22">(<expr pos:start="1146:13" pos:end="1146:21"><name pos:start="1146:13" pos:end="1146:21"><name pos:start="1146:13" pos:end="1146:13">s</name><operator pos:start="1146:14" pos:end="1146:15">-&gt;</operator><name pos:start="1146:16" pos:end="1146:21">is_jmp</name></name></expr>)</condition> <block pos:start="1146:24" pos:end="3141:17">{<block_content pos:start="1147:13" pos:end="3141:17">
            <expr_stmt pos:start="1147:13" pos:end="1147:43"><expr pos:start="1147:13" pos:end="1147:42"><call pos:start="1147:13" pos:end="1147:42"><name pos:start="1147:13" pos:end="1147:22">gen_jmp_im</name><argument_list pos:start="1147:23" pos:end="1147:42">(<argument pos:start="1147:24" pos:end="1147:41"><expr pos:start="1147:24" pos:end="1147:41"><name pos:start="1147:24" pos:end="1147:28"><name pos:start="1147:24" pos:end="1147:24">s</name><operator pos:start="1147:25" pos:end="1147:26">-&gt;</operator><name pos:start="1147:27" pos:end="1147:28">pc</name></name> <operator pos:start="1147:30" pos:end="1147:30">-</operator> <name pos:start="1147:32" pos:end="1147:41"><name pos:start="1147:32" pos:end="1147:32">s</name><operator pos:start="1147:33" pos:end="1147:34">-&gt;</operator><name pos:start="1147:35" pos:end="1147:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1148:13" pos:end="1148:23"><expr pos:start="1148:13" pos:end="1148:22"><call pos:start="1148:13" pos:end="1148:22"><name pos:start="1148:13" pos:end="1148:19">gen_eob</name><argument_list pos:start="1148:20" pos:end="1148:22">(<argument pos:start="1148:21" pos:end="1148:21"><expr pos:start="1148:21" pos:end="1148:21"><name pos:start="1148:21" pos:end="1148:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="1149:9" pos:end="1149:14">break;</break>
        <comment type="block" format="doxygen" pos:start="1150:9" pos:end="1150:34">/************************/</comment>
        <comment type="block" pos:start="1151:9" pos:end="1151:20">/* shifts */</comment>
    <case pos:start="1152:5" pos:end="1152:14">case <expr pos:start="1152:10" pos:end="1152:13"><literal type="number" pos:start="1152:10" pos:end="1152:13">0xc0</literal></expr>:</case>
    <case pos:start="1153:5" pos:end="1153:14">case <expr pos:start="1153:10" pos:end="1153:13"><literal type="number" pos:start="1153:10" pos:end="1153:13">0xc1</literal></expr>:</case>
        <comment type="block" pos:start="1154:9" pos:end="1154:25">/* shift Ev,Ib */</comment>
        <expr_stmt pos:start="1155:9" pos:end="1155:18"><expr pos:start="1155:9" pos:end="1155:17"><name pos:start="1155:9" pos:end="1155:13">shift</name> <operator pos:start="1155:15" pos:end="1155:15">=</operator> <literal type="number" pos:start="1155:17" pos:end="1155:17">2</literal></expr>;</expr_stmt>
    <label pos:start="1156:5" pos:end="1156:9"><name pos:start="1156:5" pos:end="1156:8">grp2</name>:</label>
        <block pos:start="1157:9" pos:end="3141:17">{<block_content pos:start="1158:13" pos:end="3141:17">
            <if_stmt pos:start="1158:13" pos:end="1161:37"><if pos:start="1158:13" pos:end="1159:29">if <condition pos:start="1158:16" pos:end="1158:29">(<expr pos:start="1158:17" pos:end="1158:28"><operator pos:start="1158:17" pos:end="1158:17">(</operator><name pos:start="1158:18" pos:end="1158:18">b</name> <operator pos:start="1158:20" pos:end="1158:20">&amp;</operator> <literal type="number" pos:start="1158:22" pos:end="1158:22">1</literal><operator pos:start="1158:23" pos:end="1158:23">)</operator> <operator pos:start="1158:25" pos:end="1158:26">==</operator> <literal type="number" pos:start="1158:28" pos:end="1158:28">0</literal></expr>)</condition><block type="pseudo" pos:start="1159:17" pos:end="1159:29"><block_content pos:start="1159:17" pos:end="1159:29">
                <expr_stmt pos:start="1159:17" pos:end="1159:29"><expr pos:start="1159:17" pos:end="1159:28"><name pos:start="1159:17" pos:end="1159:18">ot</name> <operator pos:start="1159:20" pos:end="1159:20">=</operator> <name pos:start="1159:22" pos:end="1159:28">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>
            <else pos:start="1160:13" pos:end="1161:37">else<block type="pseudo" pos:start="1161:17" pos:end="1161:37"><block_content pos:start="1161:17" pos:end="1161:37">
                <expr_stmt pos:start="1161:17" pos:end="1161:37"><expr pos:start="1161:17" pos:end="1161:36"><name pos:start="1161:17" pos:end="1161:18">ot</name> <operator pos:start="1161:20" pos:end="1161:20">=</operator> <name pos:start="1161:22" pos:end="1161:26">dflag</name> <operator pos:start="1161:28" pos:end="1161:28">+</operator> <name pos:start="1161:30" pos:end="1161:36">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <expr_stmt pos:start="1162:13" pos:end="1162:48"><expr pos:start="1162:13" pos:end="1162:47"><name pos:start="1162:13" pos:end="1162:17">modrm</name> <operator pos:start="1162:19" pos:end="1162:19">=</operator> <call pos:start="1162:21" pos:end="1162:47"><name pos:start="1162:21" pos:end="1162:33">cpu_ldub_code</name><argument_list pos:start="1162:34" pos:end="1162:47">(<argument pos:start="1162:35" pos:end="1162:37"><expr pos:start="1162:35" pos:end="1162:37"><name pos:start="1162:35" pos:end="1162:37">env</name></expr></argument>, <argument pos:start="1162:40" pos:end="1162:46"><expr pos:start="1162:40" pos:end="1162:46"><name pos:start="1162:40" pos:end="1162:44"><name pos:start="1162:40" pos:end="1162:40">s</name><operator pos:start="1162:41" pos:end="1162:42">-&gt;</operator><name pos:start="1162:43" pos:end="1162:44">pc</name></name><operator pos:start="1162:45" pos:end="1162:46">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1163:13" pos:end="1163:35"><expr pos:start="1163:13" pos:end="1163:34"><name pos:start="1163:13" pos:end="1163:15">mod</name> <operator pos:start="1163:17" pos:end="1163:17">=</operator> <operator pos:start="1163:19" pos:end="1163:19">(</operator><name pos:start="1163:20" pos:end="1163:24">modrm</name> <operator pos:start="1163:26" pos:end="1163:27">&gt;&gt;</operator> <literal type="number" pos:start="1163:29" pos:end="1163:29">6</literal><operator pos:start="1163:30" pos:end="1163:30">)</operator> <operator pos:start="1163:32" pos:end="1163:32">&amp;</operator> <literal type="number" pos:start="1163:34" pos:end="1163:34">3</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="1164:13" pos:end="1164:34"><expr pos:start="1164:13" pos:end="1164:33"><name pos:start="1164:13" pos:end="1164:14">op</name> <operator pos:start="1164:16" pos:end="1164:16">=</operator> <operator pos:start="1164:18" pos:end="1164:18">(</operator><name pos:start="1164:19" pos:end="1164:23">modrm</name> <operator pos:start="1164:25" pos:end="1164:26">&gt;&gt;</operator> <literal type="number" pos:start="1164:28" pos:end="1164:28">3</literal><operator pos:start="1164:29" pos:end="1164:29">)</operator> <operator pos:start="1164:31" pos:end="1164:31">&amp;</operator> <literal type="number" pos:start="1164:33" pos:end="1164:33">7</literal></expr>;</expr_stmt>
            <if_stmt pos:start="1165:13" pos:end="3141:17"><if pos:start="1165:13" pos:end="3141:17">if <condition pos:start="1165:16" pos:end="1165:25">(<expr pos:start="1165:17" pos:end="1165:24"><name pos:start="1165:17" pos:end="1165:19">mod</name> <operator pos:start="1165:21" pos:end="1165:22">!=</operator> <literal type="number" pos:start="1165:24" pos:end="1165:24">3</literal></expr>)</condition> <block pos:start="1165:27" pos:end="3141:17">{<block_content pos:start="1166:17" pos:end="3141:17">
                <if_stmt pos:start="1166:17" pos:end="3141:17"><if pos:start="1166:17" pos:end="1170:13">if <condition pos:start="1166:20" pos:end="1166:31">(<expr pos:start="1166:21" pos:end="1166:30"><name pos:start="1166:21" pos:end="1166:25">shift</name> <operator pos:start="1166:27" pos:end="1166:28">==</operator> <literal type="number" pos:start="1166:30" pos:end="1166:30">2</literal></expr>)</condition> <block pos:start="1166:33" pos:end="1170:13">{<block_content pos:start="1167:21" pos:end="1169:32">
                    <expr_stmt pos:start="1167:21" pos:end="1167:38"><expr pos:start="1167:21" pos:end="1167:37"><name pos:start="1167:21" pos:end="1167:33"><name pos:start="1167:21" pos:end="1167:21">s</name><operator pos:start="1167:22" pos:end="1167:23">-&gt;</operator><name pos:start="1167:24" pos:end="1167:33">rip_offset</name></name> <operator pos:start="1167:35" pos:end="1167:35">=</operator> <literal type="number" pos:start="1167:37" pos:end="1167:37">1</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="1168:17" pos:end="1168:70"><expr pos:start="1168:17" pos:end="1168:69"><call pos:start="1168:17" pos:end="1168:69"><name pos:start="1168:17" pos:end="1168:29">gen_lea_modrm</name><argument_list pos:start="1168:30" pos:end="1168:69">(<argument pos:start="1168:31" pos:end="1168:33"><expr pos:start="1168:31" pos:end="1168:33"><name pos:start="1168:31" pos:end="1168:33">env</name></expr></argument>, <argument pos:start="1168:36" pos:end="1168:36"><expr pos:start="1168:36" pos:end="1168:36"><name pos:start="1168:36" pos:end="1168:36">s</name></expr></argument>, <argument pos:start="1168:39" pos:end="1168:43"><expr pos:start="1168:39" pos:end="1168:43"><name pos:start="1168:39" pos:end="1168:43">modrm</name></expr></argument>, <argument pos:start="1168:46" pos:end="1168:54"><expr pos:start="1168:46" pos:end="1168:54"><operator pos:start="1168:46" pos:end="1168:46">&amp;</operator><name pos:start="1168:47" pos:end="1168:54">reg_addr</name></expr></argument>, <argument pos:start="1168:57" pos:end="1168:68"><expr pos:start="1168:57" pos:end="1168:68"><operator pos:start="1168:57" pos:end="1168:57">&amp;</operator><name pos:start="1168:58" pos:end="1168:68">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1169:17" pos:end="1169:32"><expr pos:start="1169:17" pos:end="1169:31"><name pos:start="1169:17" pos:end="1169:21">opreg</name> <operator pos:start="1169:23" pos:end="1169:23">=</operator> <name pos:start="1169:25" pos:end="1169:31">OR_TMP0</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="1170:15" pos:end="3141:17">else <block pos:start="1170:20" pos:end="3141:17">{<block_content pos:start="1171:17" pos:end="3141:17">
                <expr_stmt pos:start="1171:17" pos:end="1171:47"><expr pos:start="1171:17" pos:end="1171:46"><name pos:start="1171:17" pos:end="1171:21">opreg</name> <operator pos:start="1171:23" pos:end="1171:23">=</operator> <operator pos:start="1171:25" pos:end="1171:25">(</operator><name pos:start="1171:26" pos:end="1171:30">modrm</name> <operator pos:start="1171:32" pos:end="1171:32">&amp;</operator> <literal type="number" pos:start="1171:34" pos:end="1171:34">7</literal><operator pos:start="1171:35" pos:end="1171:35">)</operator> <operator pos:start="1171:37" pos:end="1171:37">|</operator> <call pos:start="1171:39" pos:end="1171:46"><name pos:start="1171:39" pos:end="1171:43">REX_B</name><argument_list pos:start="1171:44" pos:end="1171:46">(<argument pos:start="1171:45" pos:end="1171:45"><expr pos:start="1171:45" pos:end="1171:45"><name pos:start="1171:45" pos:end="1171:45">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block" pos:start="1172:13" pos:end="1172:28">/* simpler op */</comment>
            <if_stmt pos:start="1173:13" pos:end="3141:17"><if pos:start="1173:13" pos:end="1175:13">if <condition pos:start="1173:16" pos:end="1173:27">(<expr pos:start="1173:17" pos:end="1173:26"><name pos:start="1173:17" pos:end="1173:21">shift</name> <operator pos:start="1173:23" pos:end="1173:24">==</operator> <literal type="number" pos:start="1173:26" pos:end="1173:26">0</literal></expr>)</condition> <block pos:start="1173:29" pos:end="1175:13">{<block_content pos:start="1174:17" pos:end="1174:52">
                <expr_stmt pos:start="1174:17" pos:end="1174:52"><expr pos:start="1174:17" pos:end="1174:51"><call pos:start="1174:17" pos:end="1174:51"><name pos:start="1174:17" pos:end="1174:25">gen_shift</name><argument_list pos:start="1174:26" pos:end="1174:51">(<argument pos:start="1174:27" pos:end="1174:27"><expr pos:start="1174:27" pos:end="1174:27"><name pos:start="1174:27" pos:end="1174:27">s</name></expr></argument>, <argument pos:start="1174:30" pos:end="1174:31"><expr pos:start="1174:30" pos:end="1174:31"><name pos:start="1174:30" pos:end="1174:31">op</name></expr></argument>, <argument pos:start="1174:34" pos:end="1174:35"><expr pos:start="1174:34" pos:end="1174:35"><name pos:start="1174:34" pos:end="1174:35">ot</name></expr></argument>, <argument pos:start="1174:38" pos:end="1174:42"><expr pos:start="1174:38" pos:end="1174:42"><name pos:start="1174:38" pos:end="1174:42">opreg</name></expr></argument>, <argument pos:start="1174:45" pos:end="1174:50"><expr pos:start="1174:45" pos:end="1174:50"><name pos:start="1174:45" pos:end="1174:50">OR_ECX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="1175:15" pos:end="3141:17">else <block pos:start="1175:20" pos:end="3141:17">{<block_content pos:start="1176:17" pos:end="3141:17">
                <if_stmt pos:start="1176:17" pos:end="3141:17"><if pos:start="1176:17" pos:end="3141:17">if <condition pos:start="1176:20" pos:end="1176:31">(<expr pos:start="1176:21" pos:end="1176:30"><name pos:start="1176:21" pos:end="1176:25">shift</name> <operator pos:start="1176:27" pos:end="1176:28">==</operator> <literal type="number" pos:start="1176:30" pos:end="1176:30">2</literal></expr>)</condition> <block pos:start="1176:33" pos:end="3141:17">{<block_content pos:start="1177:21" pos:end="3141:17">
                    <expr_stmt pos:start="1177:21" pos:end="1177:56"><expr pos:start="1177:21" pos:end="1177:55"><name pos:start="1177:21" pos:end="1177:25">shift</name> <operator pos:start="1177:27" pos:end="1177:27">=</operator> <call pos:start="1177:29" pos:end="1177:55"><name pos:start="1177:29" pos:end="1177:41">cpu_ldub_code</name><argument_list pos:start="1177:42" pos:end="1177:55">(<argument pos:start="1177:43" pos:end="1177:45"><expr pos:start="1177:43" pos:end="1177:45"><name pos:start="1177:43" pos:end="1177:45">env</name></expr></argument>, <argument pos:start="1177:48" pos:end="1177:54"><expr pos:start="1177:48" pos:end="1177:54"><name pos:start="1177:48" pos:end="1177:52"><name pos:start="1177:48" pos:end="1177:48">s</name><operator pos:start="1177:49" pos:end="1177:50">-&gt;</operator><name pos:start="1177:51" pos:end="1177:52">pc</name></name><operator pos:start="1177:53" pos:end="1177:54">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1178:17" pos:end="1178:52"><expr pos:start="1178:17" pos:end="1178:51"><call pos:start="1178:17" pos:end="1178:51"><name pos:start="1178:17" pos:end="1178:26">gen_shifti</name><argument_list pos:start="1178:27" pos:end="1178:51">(<argument pos:start="1178:28" pos:end="1178:28"><expr pos:start="1178:28" pos:end="1178:28"><name pos:start="1178:28" pos:end="1178:28">s</name></expr></argument>, <argument pos:start="1178:31" pos:end="1178:32"><expr pos:start="1178:31" pos:end="1178:32"><name pos:start="1178:31" pos:end="1178:32">op</name></expr></argument>, <argument pos:start="1178:35" pos:end="1178:36"><expr pos:start="1178:35" pos:end="1178:36"><name pos:start="1178:35" pos:end="1178:36">ot</name></expr></argument>, <argument pos:start="1178:39" pos:end="1178:43"><expr pos:start="1178:39" pos:end="1178:43"><name pos:start="1178:39" pos:end="1178:43">opreg</name></expr></argument>, <argument pos:start="1178:46" pos:end="1178:50"><expr pos:start="1178:46" pos:end="1178:50"><name pos:start="1178:46" pos:end="1178:50">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="1179:9" pos:end="1179:14">break;</break>
    <case pos:start="1180:5" pos:end="1180:14">case <expr pos:start="1180:10" pos:end="1180:13"><literal type="number" pos:start="1180:10" pos:end="1180:13">0xd0</literal></expr>:</case>
    <case pos:start="1181:5" pos:end="1181:14">case <expr pos:start="1181:10" pos:end="1181:13"><literal type="number" pos:start="1181:10" pos:end="1181:13">0xd1</literal></expr>:</case>
        <comment type="block" pos:start="1182:9" pos:end="1182:24">/* shift Ev,1 */</comment>
        <expr_stmt pos:start="1183:9" pos:end="1183:18"><expr pos:start="1183:9" pos:end="1183:17"><name pos:start="1183:9" pos:end="1183:13">shift</name> <operator pos:start="1183:15" pos:end="1183:15">=</operator> <literal type="number" pos:start="1183:17" pos:end="1183:17">1</literal></expr>;</expr_stmt>
        <goto pos:start="1184:9" pos:end="1184:18">goto <name pos:start="1184:14" pos:end="1184:17">grp2</name>;</goto>
    <case pos:start="1185:5" pos:end="1185:14">case <expr pos:start="1185:10" pos:end="1185:13"><literal type="number" pos:start="1185:10" pos:end="1185:13">0xd2</literal></expr>:</case>
    <case pos:start="1186:5" pos:end="1186:14">case <expr pos:start="1186:10" pos:end="1186:13"><literal type="number" pos:start="1186:10" pos:end="1186:13">0xd3</literal></expr>:</case>
        <comment type="block" pos:start="1187:9" pos:end="1187:25">/* shift Ev,cl */</comment>
        <expr_stmt pos:start="1188:9" pos:end="1188:18"><expr pos:start="1188:9" pos:end="1188:17"><name pos:start="1188:9" pos:end="1188:13">shift</name> <operator pos:start="1188:15" pos:end="1188:15">=</operator> <literal type="number" pos:start="1188:17" pos:end="1188:17">0</literal></expr>;</expr_stmt>
        <goto pos:start="1189:9" pos:end="1189:18">goto <name pos:start="1189:14" pos:end="1189:17">grp2</name>;</goto>
    <case pos:start="1190:5" pos:end="1190:15">case <expr pos:start="1190:10" pos:end="1190:14"><literal type="number" pos:start="1190:10" pos:end="1190:14">0x1a4</literal></expr>:</case> <comment type="block" pos:start="1190:17" pos:end="1190:30">/* shld imm */</comment>
        <expr_stmt pos:start="1191:9" pos:end="1191:15"><expr pos:start="1191:9" pos:end="1191:14"><name pos:start="1191:9" pos:end="1191:10">op</name> <operator pos:start="1191:12" pos:end="1191:12">=</operator> <literal type="number" pos:start="1191:14" pos:end="1191:14">0</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="1192:9" pos:end="1192:18"><expr pos:start="1192:9" pos:end="1192:17"><name pos:start="1192:9" pos:end="1192:13">shift</name> <operator pos:start="1192:15" pos:end="1192:15">=</operator> <literal type="number" pos:start="1192:17" pos:end="1192:17">1</literal></expr>;</expr_stmt>
        <goto pos:start="1193:9" pos:end="1193:23">goto <name pos:start="1193:14" pos:end="1193:22">do_shiftd</name>;</goto>
    <case pos:start="1194:5" pos:end="1194:15">case <expr pos:start="1194:10" pos:end="1194:14"><literal type="number" pos:start="1194:10" pos:end="1194:14">0x1a5</literal></expr>:</case> <comment type="block" pos:start="1194:17" pos:end="1194:29">/* shld cl */</comment>
        <expr_stmt pos:start="1195:9" pos:end="1195:15"><expr pos:start="1195:9" pos:end="1195:14"><name pos:start="1195:9" pos:end="1195:10">op</name> <operator pos:start="1195:12" pos:end="1195:12">=</operator> <literal type="number" pos:start="1195:14" pos:end="1195:14">0</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="1196:9" pos:end="1196:18"><expr pos:start="1196:9" pos:end="1196:17"><name pos:start="1196:9" pos:end="1196:13">shift</name> <operator pos:start="1196:15" pos:end="1196:15">=</operator> <literal type="number" pos:start="1196:17" pos:end="1196:17">0</literal></expr>;</expr_stmt>
        <goto pos:start="1197:9" pos:end="1197:23">goto <name pos:start="1197:14" pos:end="1197:22">do_shiftd</name>;</goto>
    <case pos:start="1198:5" pos:end="1198:15">case <expr pos:start="1198:10" pos:end="1198:14"><literal type="number" pos:start="1198:10" pos:end="1198:14">0x1ac</literal></expr>:</case> <comment type="block" pos:start="1198:17" pos:end="1198:30">/* shrd imm */</comment>
        <expr_stmt pos:start="1199:9" pos:end="1199:15"><expr pos:start="1199:9" pos:end="1199:14"><name pos:start="1199:9" pos:end="1199:10">op</name> <operator pos:start="1199:12" pos:end="1199:12">=</operator> <literal type="number" pos:start="1199:14" pos:end="1199:14">1</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="1200:9" pos:end="1200:18"><expr pos:start="1200:9" pos:end="1200:17"><name pos:start="1200:9" pos:end="1200:13">shift</name> <operator pos:start="1200:15" pos:end="1200:15">=</operator> <literal type="number" pos:start="1200:17" pos:end="1200:17">1</literal></expr>;</expr_stmt>
        <goto pos:start="1201:9" pos:end="1201:23">goto <name pos:start="1201:14" pos:end="1201:22">do_shiftd</name>;</goto>
    <case pos:start="1202:5" pos:end="1202:15">case <expr pos:start="1202:10" pos:end="1202:14"><literal type="number" pos:start="1202:10" pos:end="1202:14">0x1ad</literal></expr>:</case> <comment type="block" pos:start="1202:17" pos:end="1202:29">/* shrd cl */</comment>
        <expr_stmt pos:start="1203:9" pos:end="1203:15"><expr pos:start="1203:9" pos:end="1203:14"><name pos:start="1203:9" pos:end="1203:10">op</name> <operator pos:start="1203:12" pos:end="1203:12">=</operator> <literal type="number" pos:start="1203:14" pos:end="1203:14">1</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="1204:9" pos:end="1204:18"><expr pos:start="1204:9" pos:end="1204:17"><name pos:start="1204:9" pos:end="1204:13">shift</name> <operator pos:start="1204:15" pos:end="1204:15">=</operator> <literal type="number" pos:start="1204:17" pos:end="1204:17">0</literal></expr>;</expr_stmt>
    <label pos:start="1205:5" pos:end="1205:14"><name pos:start="1205:5" pos:end="1205:13">do_shiftd</name>:</label>
        <expr_stmt pos:start="1206:9" pos:end="1206:29"><expr pos:start="1206:9" pos:end="1206:28"><name pos:start="1206:9" pos:end="1206:10">ot</name> <operator pos:start="1206:12" pos:end="1206:12">=</operator> <name pos:start="1206:14" pos:end="1206:18">dflag</name> <operator pos:start="1206:20" pos:end="1206:20">+</operator> <name pos:start="1206:22" pos:end="1206:28">OT_WORD</name></expr>;</expr_stmt>
        <expr_stmt pos:start="1207:9" pos:end="1207:44"><expr pos:start="1207:9" pos:end="1207:43"><name pos:start="1207:9" pos:end="1207:13">modrm</name> <operator pos:start="1207:15" pos:end="1207:15">=</operator> <call pos:start="1207:17" pos:end="1207:43"><name pos:start="1207:17" pos:end="1207:29">cpu_ldub_code</name><argument_list pos:start="1207:30" pos:end="1207:43">(<argument pos:start="1207:31" pos:end="1207:33"><expr pos:start="1207:31" pos:end="1207:33"><name pos:start="1207:31" pos:end="1207:33">env</name></expr></argument>, <argument pos:start="1207:36" pos:end="1207:42"><expr pos:start="1207:36" pos:end="1207:42"><name pos:start="1207:36" pos:end="1207:40"><name pos:start="1207:36" pos:end="1207:36">s</name><operator pos:start="1207:37" pos:end="1207:38">-&gt;</operator><name pos:start="1207:39" pos:end="1207:40">pc</name></name><operator pos:start="1207:41" pos:end="1207:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1208:9" pos:end="1208:31"><expr pos:start="1208:9" pos:end="1208:30"><name pos:start="1208:9" pos:end="1208:11">mod</name> <operator pos:start="1208:13" pos:end="1208:13">=</operator> <operator pos:start="1208:15" pos:end="1208:15">(</operator><name pos:start="1208:16" pos:end="1208:20">modrm</name> <operator pos:start="1208:22" pos:end="1208:23">&gt;&gt;</operator> <literal type="number" pos:start="1208:25" pos:end="1208:25">6</literal><operator pos:start="1208:26" pos:end="1208:26">)</operator> <operator pos:start="1208:28" pos:end="1208:28">&amp;</operator> <literal type="number" pos:start="1208:30" pos:end="1208:30">3</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="1209:9" pos:end="1209:36"><expr pos:start="1209:9" pos:end="1209:35"><name pos:start="1209:9" pos:end="1209:10">rm</name> <operator pos:start="1209:12" pos:end="1209:12">=</operator> <operator pos:start="1209:14" pos:end="1209:14">(</operator><name pos:start="1209:15" pos:end="1209:19">modrm</name> <operator pos:start="1209:21" pos:end="1209:21">&amp;</operator> <literal type="number" pos:start="1209:23" pos:end="1209:23">7</literal><operator pos:start="1209:24" pos:end="1209:24">)</operator> <operator pos:start="1209:26" pos:end="1209:26">|</operator> <call pos:start="1209:28" pos:end="1209:35"><name pos:start="1209:28" pos:end="1209:32">REX_B</name><argument_list pos:start="1209:33" pos:end="1209:35">(<argument pos:start="1209:34" pos:end="1209:34"><expr pos:start="1209:34" pos:end="1209:34"><name pos:start="1209:34" pos:end="1209:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1210:9" pos:end="1210:41"><expr pos:start="1210:9" pos:end="1210:40"><name pos:start="1210:9" pos:end="1210:11">reg</name> <operator pos:start="1210:13" pos:end="1210:13">=</operator> <operator pos:start="1210:15" pos:end="1210:15">(</operator><operator pos:start="1210:16" pos:end="1210:16">(</operator><name pos:start="1210:17" pos:end="1210:21">modrm</name> <operator pos:start="1210:23" pos:end="1210:24">&gt;&gt;</operator> <literal type="number" pos:start="1210:26" pos:end="1210:26">3</literal><operator pos:start="1210:27" pos:end="1210:27">)</operator> <operator pos:start="1210:29" pos:end="1210:29">&amp;</operator> <literal type="number" pos:start="1210:31" pos:end="1210:31">7</literal><operator pos:start="1210:32" pos:end="1210:32">)</operator> <operator pos:start="1210:34" pos:end="1210:34">|</operator> <name pos:start="1210:36" pos:end="1210:40">rex_r</name></expr>;</expr_stmt>
        <if_stmt pos:start="1211:9" pos:end="3141:17"><if pos:start="1211:9" pos:end="1214:9">if <condition pos:start="1211:12" pos:end="1211:21">(<expr pos:start="1211:13" pos:end="1211:20"><name pos:start="1211:13" pos:end="1211:15">mod</name> <operator pos:start="1211:17" pos:end="1211:18">!=</operator> <literal type="number" pos:start="1211:20" pos:end="1211:20">3</literal></expr>)</condition> <block pos:start="1211:23" pos:end="1214:9">{<block_content pos:start="1212:13" pos:end="1213:28">
            <expr_stmt pos:start="1212:13" pos:end="1212:66"><expr pos:start="1212:13" pos:end="1212:65"><call pos:start="1212:13" pos:end="1212:65"><name pos:start="1212:13" pos:end="1212:25">gen_lea_modrm</name><argument_list pos:start="1212:26" pos:end="1212:65">(<argument pos:start="1212:27" pos:end="1212:29"><expr pos:start="1212:27" pos:end="1212:29"><name pos:start="1212:27" pos:end="1212:29">env</name></expr></argument>, <argument pos:start="1212:32" pos:end="1212:32"><expr pos:start="1212:32" pos:end="1212:32"><name pos:start="1212:32" pos:end="1212:32">s</name></expr></argument>, <argument pos:start="1212:35" pos:end="1212:39"><expr pos:start="1212:35" pos:end="1212:39"><name pos:start="1212:35" pos:end="1212:39">modrm</name></expr></argument>, <argument pos:start="1212:42" pos:end="1212:50"><expr pos:start="1212:42" pos:end="1212:50"><operator pos:start="1212:42" pos:end="1212:42">&amp;</operator><name pos:start="1212:43" pos:end="1212:50">reg_addr</name></expr></argument>, <argument pos:start="1212:53" pos:end="1212:64"><expr pos:start="1212:53" pos:end="1212:64"><operator pos:start="1212:53" pos:end="1212:53">&amp;</operator><name pos:start="1212:54" pos:end="1212:64">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1213:13" pos:end="1213:28"><expr pos:start="1213:13" pos:end="1213:27"><name pos:start="1213:13" pos:end="1213:17">opreg</name> <operator pos:start="1213:19" pos:end="1213:19">=</operator> <name pos:start="1213:21" pos:end="1213:27">OR_TMP0</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="1214:11" pos:end="3141:17">else <block pos:start="1214:16" pos:end="3141:17">{<block_content pos:start="1215:13" pos:end="3141:17">
            <expr_stmt pos:start="1215:13" pos:end="1215:23"><expr pos:start="1215:13" pos:end="1215:22"><name pos:start="1215:13" pos:end="1215:17">opreg</name> <operator pos:start="1215:19" pos:end="1215:19">=</operator> <name pos:start="1215:21" pos:end="1215:22">rm</name></expr>;</expr_stmt>
        <expr_stmt pos:start="1216:9" pos:end="1216:38"><expr pos:start="1216:9" pos:end="1216:37"><call pos:start="1216:9" pos:end="1216:37"><name pos:start="1216:9" pos:end="1216:25">gen_op_mov_TN_reg</name><argument_list pos:start="1216:26" pos:end="1216:37">(<argument pos:start="1216:27" pos:end="1216:28"><expr pos:start="1216:27" pos:end="1216:28"><name pos:start="1216:27" pos:end="1216:28">ot</name></expr></argument>, <argument pos:start="1216:31" pos:end="1216:31"><expr pos:start="1216:31" pos:end="1216:31"><literal type="number" pos:start="1216:31" pos:end="1216:31">1</literal></expr></argument>, <argument pos:start="1216:34" pos:end="1216:36"><expr pos:start="1216:34" pos:end="1216:36"><name pos:start="1216:34" pos:end="1216:36">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1217:9" pos:end="3141:17"><if pos:start="1217:9" pos:end="1221:9">if <condition pos:start="1217:12" pos:end="1217:18">(<expr pos:start="1217:13" pos:end="1217:17"><name pos:start="1217:13" pos:end="1217:17">shift</name></expr>)</condition> <block pos:start="1217:20" pos:end="1221:9">{<block_content pos:start="1218:13" pos:end="1220:31">
            <decl_stmt pos:start="1218:13" pos:end="1218:65"><decl pos:start="1218:13" pos:end="1218:64"><type pos:start="1218:13" pos:end="1218:16"><name pos:start="1218:13" pos:end="1218:16">TCGv</name></type> <name pos:start="1218:18" pos:end="1218:20">imm</name> <init pos:start="1218:22" pos:end="1218:64">= <expr pos:start="1218:24" pos:end="1218:64"><call pos:start="1218:24" pos:end="1218:64"><name pos:start="1218:24" pos:end="1218:35">tcg_const_tl</name><argument_list pos:start="1218:36" pos:end="1218:64">(<argument pos:start="1218:37" pos:end="1218:63"><expr pos:start="1218:37" pos:end="1218:63"><call pos:start="1218:37" pos:end="1218:63"><name pos:start="1218:37" pos:end="1218:49">cpu_ldub_code</name><argument_list pos:start="1218:50" pos:end="1218:63">(<argument pos:start="1218:51" pos:end="1218:53"><expr pos:start="1218:51" pos:end="1218:53"><name pos:start="1218:51" pos:end="1218:53">env</name></expr></argument>, <argument pos:start="1218:56" pos:end="1218:62"><expr pos:start="1218:56" pos:end="1218:62"><name pos:start="1218:56" pos:end="1218:60"><name pos:start="1218:56" pos:end="1218:56">s</name><operator pos:start="1218:57" pos:end="1218:58">-&gt;</operator><name pos:start="1218:59" pos:end="1218:60">pc</name></name><operator pos:start="1218:61" pos:end="1218:62">++</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt pos:start="1219:13" pos:end="1219:52"><expr pos:start="1219:13" pos:end="1219:51"><call pos:start="1219:13" pos:end="1219:51"><name pos:start="1219:13" pos:end="1219:28">gen_shiftd_rm_T1</name><argument_list pos:start="1219:29" pos:end="1219:51">(<argument pos:start="1219:30" pos:end="1219:30"><expr pos:start="1219:30" pos:end="1219:30"><name pos:start="1219:30" pos:end="1219:30">s</name></expr></argument>, <argument pos:start="1219:33" pos:end="1219:34"><expr pos:start="1219:33" pos:end="1219:34"><name pos:start="1219:33" pos:end="1219:34">ot</name></expr></argument>, <argument pos:start="1219:37" pos:end="1219:41"><expr pos:start="1219:37" pos:end="1219:41"><name pos:start="1219:37" pos:end="1219:41">opreg</name></expr></argument>, <argument pos:start="1219:44" pos:end="1219:45"><expr pos:start="1219:44" pos:end="1219:45"><name pos:start="1219:44" pos:end="1219:45">op</name></expr></argument>, <argument pos:start="1219:48" pos:end="1219:50"><expr pos:start="1219:48" pos:end="1219:50"><name pos:start="1219:48" pos:end="1219:50">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1220:13" pos:end="1220:31"><expr pos:start="1220:13" pos:end="1220:30"><call pos:start="1220:13" pos:end="1220:30"><name pos:start="1220:13" pos:end="1220:25">tcg_temp_free</name><argument_list pos:start="1220:26" pos:end="1220:30">(<argument pos:start="1220:27" pos:end="1220:29"><expr pos:start="1220:27" pos:end="1220:29"><name pos:start="1220:27" pos:end="1220:29">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="1221:11" pos:end="3141:17">else <block pos:start="1221:16" pos:end="3141:17">{<block_content pos:start="1222:13" pos:end="3141:17">
            <expr_stmt pos:start="1222:13" pos:end="1222:64"><expr pos:start="1222:13" pos:end="1222:63"><call pos:start="1222:13" pos:end="1222:63"><name pos:start="1222:13" pos:end="1222:28">gen_shiftd_rm_T1</name><argument_list pos:start="1222:29" pos:end="1222:63">(<argument pos:start="1222:30" pos:end="1222:30"><expr pos:start="1222:30" pos:end="1222:30"><name pos:start="1222:30" pos:end="1222:30">s</name></expr></argument>, <argument pos:start="1222:33" pos:end="1222:34"><expr pos:start="1222:33" pos:end="1222:34"><name pos:start="1222:33" pos:end="1222:34">ot</name></expr></argument>, <argument pos:start="1222:37" pos:end="1222:41"><expr pos:start="1222:37" pos:end="1222:41"><name pos:start="1222:37" pos:end="1222:41">opreg</name></expr></argument>, <argument pos:start="1222:44" pos:end="1222:45"><expr pos:start="1222:44" pos:end="1222:45"><name pos:start="1222:44" pos:end="1222:45">op</name></expr></argument>, <argument pos:start="1222:48" pos:end="1222:62"><expr pos:start="1222:48" pos:end="1222:62"><name pos:start="1222:48" pos:end="1222:62"><name pos:start="1222:48" pos:end="1222:55">cpu_regs</name><index pos:start="1222:56" pos:end="1222:62">[<expr pos:start="1222:57" pos:end="1222:61"><name pos:start="1222:57" pos:end="1222:61">R_ECX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="1223:9" pos:end="1223:14">break;</break>
        <comment type="block" format="doxygen" pos:start="1224:9" pos:end="1224:34">/************************/</comment>
        <comment type="block" pos:start="1225:9" pos:end="1225:20">/* floats */</comment>
    <case pos:start="1226:5" pos:end="1226:23">case <expr pos:start="1226:10" pos:end="1226:22"><literal type="number" pos:start="1226:10" pos:end="1226:13">0xd8</literal> <operator pos:start="1226:15" pos:end="1226:17">...</operator> <literal type="number" pos:start="1226:19" pos:end="1226:22">0xdf</literal></expr>:</case>
        <if_stmt pos:start="1227:9" pos:end="3141:17"><if pos:start="1227:9" pos:end="3141:17">if <condition pos:start="1227:12" pos:end="1227:49">(<expr pos:start="1227:13" pos:end="1227:48"><name pos:start="1227:13" pos:end="1227:20"><name pos:start="1227:13" pos:end="1227:13">s</name><operator pos:start="1227:14" pos:end="1227:15">-&gt;</operator><name pos:start="1227:16" pos:end="1227:20">flags</name></name> <operator pos:start="1227:22" pos:end="1227:22">&amp;</operator> <operator pos:start="1227:24" pos:end="1227:24">(</operator><name pos:start="1227:25" pos:end="1227:34">HF_EM_MASK</name> <operator pos:start="1227:36" pos:end="1227:36">|</operator> <name pos:start="1227:38" pos:end="1227:47">HF_TS_MASK</name><operator pos:start="1227:48" pos:end="1227:48">)</operator></expr>)</condition> <block pos:start="1227:51" pos:end="3141:17">{<block_content pos:start="1230:13" pos:end="3141:17">
            <comment type="block" pos:start="1228:13" pos:end="1228:72">/* if CR0.EM or CR0.TS are set, generate an FPU exception */</comment>
            <comment type="block" pos:start="1229:13" pos:end="1229:49">/* XXX: what to do if illegal op ? */</comment>
            <expr_stmt pos:start="1230:13" pos:end="1230:65"><expr pos:start="1230:13" pos:end="1230:64"><call pos:start="1230:13" pos:end="1230:64"><name pos:start="1230:13" pos:end="1230:25">gen_exception</name><argument_list pos:start="1230:26" pos:end="1230:64">(<argument pos:start="1230:27" pos:end="1230:27"><expr pos:start="1230:27" pos:end="1230:27"><name pos:start="1230:27" pos:end="1230:27">s</name></expr></argument>, <argument pos:start="1230:30" pos:end="1230:40"><expr pos:start="1230:30" pos:end="1230:40"><name pos:start="1230:30" pos:end="1230:40">EXCP07_PREX</name></expr></argument>, <argument pos:start="1230:43" pos:end="1230:63"><expr pos:start="1230:43" pos:end="1230:63"><name pos:start="1230:43" pos:end="1230:50">pc_start</name> <operator pos:start="1230:52" pos:end="1230:52">-</operator> <name pos:start="1230:54" pos:end="1230:63"><name pos:start="1230:54" pos:end="1230:54">s</name><operator pos:start="1230:55" pos:end="1230:56">-&gt;</operator><name pos:start="1230:57" pos:end="1230:63">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="1231:13" pos:end="1231:18">break;</break>
        <expr_stmt pos:start="1232:9" pos:end="1232:44"><expr pos:start="1232:9" pos:end="1232:43"><name pos:start="1232:9" pos:end="1232:13">modrm</name> <operator pos:start="1232:15" pos:end="1232:15">=</operator> <call pos:start="1232:17" pos:end="1232:43"><name pos:start="1232:17" pos:end="1232:29">cpu_ldub_code</name><argument_list pos:start="1232:30" pos:end="1232:43">(<argument pos:start="1232:31" pos:end="1232:33"><expr pos:start="1232:31" pos:end="1232:33"><name pos:start="1232:31" pos:end="1232:33">env</name></expr></argument>, <argument pos:start="1232:36" pos:end="1232:42"><expr pos:start="1232:36" pos:end="1232:42"><name pos:start="1232:36" pos:end="1232:40"><name pos:start="1232:36" pos:end="1232:36">s</name><operator pos:start="1232:37" pos:end="1232:38">-&gt;</operator><name pos:start="1232:39" pos:end="1232:40">pc</name></name><operator pos:start="1232:41" pos:end="1232:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1233:9" pos:end="1233:31"><expr pos:start="1233:9" pos:end="1233:30"><name pos:start="1233:9" pos:end="1233:11">mod</name> <operator pos:start="1233:13" pos:end="1233:13">=</operator> <operator pos:start="1233:15" pos:end="1233:15">(</operator><name pos:start="1233:16" pos:end="1233:20">modrm</name> <operator pos:start="1233:22" pos:end="1233:23">&gt;&gt;</operator> <literal type="number" pos:start="1233:25" pos:end="1233:25">6</literal><operator pos:start="1233:26" pos:end="1233:26">)</operator> <operator pos:start="1233:28" pos:end="1233:28">&amp;</operator> <literal type="number" pos:start="1233:30" pos:end="1233:30">3</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="1234:9" pos:end="1234:23"><expr pos:start="1234:9" pos:end="1234:22"><name pos:start="1234:9" pos:end="1234:10">rm</name> <operator pos:start="1234:12" pos:end="1234:12">=</operator> <name pos:start="1234:14" pos:end="1234:18">modrm</name> <operator pos:start="1234:20" pos:end="1234:20">&amp;</operator> <literal type="number" pos:start="1234:22" pos:end="1234:22">7</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="1235:9" pos:end="1235:49"><expr pos:start="1235:9" pos:end="1235:48"><name pos:start="1235:9" pos:end="1235:10">op</name> <operator pos:start="1235:12" pos:end="1235:12">=</operator> <operator pos:start="1235:14" pos:end="1235:14">(</operator><operator pos:start="1235:15" pos:end="1235:15">(</operator><name pos:start="1235:16" pos:end="1235:16">b</name> <operator pos:start="1235:18" pos:end="1235:18">&amp;</operator> <literal type="number" pos:start="1235:20" pos:end="1235:20">7</literal><operator pos:start="1235:21" pos:end="1235:21">)</operator> <operator pos:start="1235:23" pos:end="1235:24">&lt;&lt;</operator> <literal type="number" pos:start="1235:26" pos:end="1235:26">3</literal><operator pos:start="1235:27" pos:end="1235:27">)</operator> <operator pos:start="1235:29" pos:end="1235:29">|</operator> <operator pos:start="1235:31" pos:end="1235:31">(</operator><operator pos:start="1235:32" pos:end="1235:32">(</operator><name pos:start="1235:33" pos:end="1235:37">modrm</name> <operator pos:start="1235:39" pos:end="1235:40">&gt;&gt;</operator> <literal type="number" pos:start="1235:42" pos:end="1235:42">3</literal><operator pos:start="1235:43" pos:end="1235:43">)</operator> <operator pos:start="1235:45" pos:end="1235:45">&amp;</operator> <literal type="number" pos:start="1235:47" pos:end="1235:47">7</literal><operator pos:start="1235:48" pos:end="1235:48">)</operator></expr>;</expr_stmt>
        <if_stmt pos:start="1236:9" pos:end="3141:17"><if pos:start="1236:9" pos:end="3141:17">if <condition pos:start="1236:12" pos:end="1236:21">(<expr pos:start="1236:13" pos:end="1236:20"><name pos:start="1236:13" pos:end="1236:15">mod</name> <operator pos:start="1236:17" pos:end="1236:18">!=</operator> <literal type="number" pos:start="1236:20" pos:end="1236:20">3</literal></expr>)</condition> <block pos:start="1236:23" pos:end="3141:17">{<block_content pos:start="1238:13" pos:end="3141:17">
            <comment type="block" pos:start="1237:13" pos:end="1237:27">/* memory op */</comment>
            <expr_stmt pos:start="1238:13" pos:end="1238:66"><expr pos:start="1238:13" pos:end="1238:65"><call pos:start="1238:13" pos:end="1238:65"><name pos:start="1238:13" pos:end="1238:25">gen_lea_modrm</name><argument_list pos:start="1238:26" pos:end="1238:65">(<argument pos:start="1238:27" pos:end="1238:29"><expr pos:start="1238:27" pos:end="1238:29"><name pos:start="1238:27" pos:end="1238:29">env</name></expr></argument>, <argument pos:start="1238:32" pos:end="1238:32"><expr pos:start="1238:32" pos:end="1238:32"><name pos:start="1238:32" pos:end="1238:32">s</name></expr></argument>, <argument pos:start="1238:35" pos:end="1238:39"><expr pos:start="1238:35" pos:end="1238:39"><name pos:start="1238:35" pos:end="1238:39">modrm</name></expr></argument>, <argument pos:start="1238:42" pos:end="1238:50"><expr pos:start="1238:42" pos:end="1238:50"><operator pos:start="1238:42" pos:end="1238:42">&amp;</operator><name pos:start="1238:43" pos:end="1238:50">reg_addr</name></expr></argument>, <argument pos:start="1238:53" pos:end="1238:64"><expr pos:start="1238:53" pos:end="1238:64"><operator pos:start="1238:53" pos:end="1238:53">&amp;</operator><name pos:start="1238:54" pos:end="1238:64">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <switch pos:start="1239:13" pos:end="3141:17">switch<condition pos:start="1239:19" pos:end="1239:22">(<expr pos:start="1239:20" pos:end="1239:21"><name pos:start="1239:20" pos:end="1239:21">op</name></expr>)</condition> <block pos:start="1239:24" pos:end="3141:17">{<block_content pos:start="1240:13" pos:end="3141:17">
            <case pos:start="1240:13" pos:end="1240:31">case <expr pos:start="1240:18" pos:end="1240:30"><literal type="number" pos:start="1240:18" pos:end="1240:21">0x00</literal> <operator pos:start="1240:23" pos:end="1240:25">...</operator> <literal type="number" pos:start="1240:27" pos:end="1240:30">0x07</literal></expr>:</case> <comment type="block" pos:start="1240:33" pos:end="1240:43">/* fxxxs */</comment>
            <case pos:start="1241:13" pos:end="1241:31">case <expr pos:start="1241:18" pos:end="1241:30"><literal type="number" pos:start="1241:18" pos:end="1241:21">0x10</literal> <operator pos:start="1241:23" pos:end="1241:25">...</operator> <literal type="number" pos:start="1241:27" pos:end="1241:30">0x17</literal></expr>:</case> <comment type="block" pos:start="1241:33" pos:end="1241:44">/* fixxxl */</comment>
            <case pos:start="1242:13" pos:end="1242:31">case <expr pos:start="1242:18" pos:end="1242:30"><literal type="number" pos:start="1242:18" pos:end="1242:21">0x20</literal> <operator pos:start="1242:23" pos:end="1242:25">...</operator> <literal type="number" pos:start="1242:27" pos:end="1242:30">0x27</literal></expr>:</case> <comment type="block" pos:start="1242:33" pos:end="1242:43">/* fxxxl */</comment>
            <case pos:start="1243:13" pos:end="1243:31">case <expr pos:start="1243:18" pos:end="1243:30"><literal type="number" pos:start="1243:18" pos:end="1243:21">0x30</literal> <operator pos:start="1243:23" pos:end="1243:25">...</operator> <literal type="number" pos:start="1243:27" pos:end="1243:30">0x37</literal></expr>:</case> <comment type="block" pos:start="1243:33" pos:end="1243:43">/* fixxx */</comment>
                <block pos:start="1244:17" pos:end="3141:17">{<block_content pos:start="1245:21" pos:end="3141:17">
                    <decl_stmt pos:start="1245:21" pos:end="1245:28"><decl pos:start="1245:21" pos:end="1245:27"><type pos:start="1245:21" pos:end="1245:23"><name pos:start="1245:21" pos:end="1245:23">int</name></type> <name pos:start="1245:25" pos:end="1245:27">op1</name></decl>;</decl_stmt>
                    <expr_stmt pos:start="1246:21" pos:end="1246:33"><expr pos:start="1246:21" pos:end="1246:32"><name pos:start="1246:21" pos:end="1246:23">op1</name> <operator pos:start="1246:25" pos:end="1246:25">=</operator> <name pos:start="1246:27" pos:end="1246:28">op</name> <operator pos:start="1246:30" pos:end="1246:30">&amp;</operator> <literal type="number" pos:start="1246:32" pos:end="1246:32">7</literal></expr>;</expr_stmt>
                    <switch pos:start="1247:21" pos:end="3141:17">switch<condition pos:start="1247:27" pos:end="1247:35">(<expr pos:start="1247:28" pos:end="1247:34"><name pos:start="1247:28" pos:end="1247:29">op</name> <operator pos:start="1247:31" pos:end="1247:32">&gt;&gt;</operator> <literal type="number" pos:start="1247:34" pos:end="1247:34">4</literal></expr>)</condition> <block pos:start="1247:37" pos:end="3141:17">{<block_content pos:start="1248:21" pos:end="3141:17">
                    <case pos:start="1248:21" pos:end="1248:27">case <expr pos:start="1248:26" pos:end="1248:26"><literal type="number" pos:start="1248:26" pos:end="1248:26">0</literal></expr>:</case>
                        <expr_stmt pos:start="1249:25" pos:end="1249:64"><expr pos:start="1249:25" pos:end="1249:63"><call pos:start="1249:25" pos:end="1249:63"><name pos:start="1249:25" pos:end="1249:39">gen_op_ld_T0_A0</name><argument_list pos:start="1249:40" pos:end="1249:63">(<argument pos:start="1249:41" pos:end="1249:62"><expr pos:start="1249:41" pos:end="1249:62"><name pos:start="1249:41" pos:end="1249:47">OT_LONG</name> <operator pos:start="1249:49" pos:end="1249:49">+</operator> <name pos:start="1249:51" pos:end="1249:62"><name pos:start="1249:51" pos:end="1249:51">s</name><operator pos:start="1249:52" pos:end="1249:53">-&gt;</operator><name pos:start="1249:54" pos:end="1249:62">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="1250:25" pos:end="1250:69"><expr pos:start="1250:25" pos:end="1250:68"><call pos:start="1250:25" pos:end="1250:68"><name pos:start="1250:25" pos:end="1250:44">tcg_gen_trunc_tl_i32</name><argument_list pos:start="1250:45" pos:end="1250:68">(<argument pos:start="1250:46" pos:end="1250:57"><expr pos:start="1250:46" pos:end="1250:57"><name pos:start="1250:46" pos:end="1250:57">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1250:60" pos:end="1250:67"><expr pos:start="1250:60" pos:end="1250:67"><name pos:start="1250:60" pos:end="1250:67"><name pos:start="1250:60" pos:end="1250:64">cpu_T</name><index pos:start="1250:65" pos:end="1250:67">[<expr pos:start="1250:66" pos:end="1250:66"><literal type="number" pos:start="1250:66" pos:end="1250:66">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="1251:25" pos:end="1251:67"><expr pos:start="1251:25" pos:end="1251:66"><call pos:start="1251:25" pos:end="1251:66"><name pos:start="1251:25" pos:end="1251:43">gen_helper_flds_FT0</name><argument_list pos:start="1251:44" pos:end="1251:66">(<argument pos:start="1251:45" pos:end="1251:51"><expr pos:start="1251:45" pos:end="1251:51"><name pos:start="1251:45" pos:end="1251:51">cpu_env</name></expr></argument>, <argument pos:start="1251:54" pos:end="1251:65"><expr pos:start="1251:54" pos:end="1251:65"><name pos:start="1251:54" pos:end="1251:65">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break pos:start="1252:25" pos:end="1252:30">break;</break>
                    <case pos:start="1253:21" pos:end="1253:27">case <expr pos:start="1253:26" pos:end="1253:26"><literal type="number" pos:start="1253:26" pos:end="1253:26">1</literal></expr>:</case>
                        <expr_stmt pos:start="1254:25" pos:end="1254:64"><expr pos:start="1254:25" pos:end="1254:63"><call pos:start="1254:25" pos:end="1254:63"><name pos:start="1254:25" pos:end="1254:39">gen_op_ld_T0_A0</name><argument_list pos:start="1254:40" pos:end="1254:63">(<argument pos:start="1254:41" pos:end="1254:62"><expr pos:start="1254:41" pos:end="1254:62"><name pos:start="1254:41" pos:end="1254:47">OT_LONG</name> <operator pos:start="1254:49" pos:end="1254:49">+</operator> <name pos:start="1254:51" pos:end="1254:62"><name pos:start="1254:51" pos:end="1254:51">s</name><operator pos:start="1254:52" pos:end="1254:53">-&gt;</operator><name pos:start="1254:54" pos:end="1254:62">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="1255:25" pos:end="1255:69"><expr pos:start="1255:25" pos:end="1255:68"><call pos:start="1255:25" pos:end="1255:68"><name pos:start="1255:25" pos:end="1255:44">tcg_gen_trunc_tl_i32</name><argument_list pos:start="1255:45" pos:end="1255:68">(<argument pos:start="1255:46" pos:end="1255:57"><expr pos:start="1255:46" pos:end="1255:57"><name pos:start="1255:46" pos:end="1255:57">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1255:60" pos:end="1255:67"><expr pos:start="1255:60" pos:end="1255:67"><name pos:start="1255:60" pos:end="1255:67"><name pos:start="1255:60" pos:end="1255:64">cpu_T</name><index pos:start="1255:65" pos:end="1255:67">[<expr pos:start="1255:66" pos:end="1255:66"><literal type="number" pos:start="1255:66" pos:end="1255:66">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="1256:25" pos:end="1256:68"><expr pos:start="1256:25" pos:end="1256:67"><call pos:start="1256:25" pos:end="1256:67"><name pos:start="1256:25" pos:end="1256:44">gen_helper_fildl_FT0</name><argument_list pos:start="1256:45" pos:end="1256:67">(<argument pos:start="1256:46" pos:end="1256:52"><expr pos:start="1256:46" pos:end="1256:52"><name pos:start="1256:46" pos:end="1256:52">cpu_env</name></expr></argument>, <argument pos:start="1256:55" pos:end="1256:66"><expr pos:start="1256:55" pos:end="1256:66"><name pos:start="1256:55" pos:end="1256:66">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break pos:start="1257:25" pos:end="1257:30">break;</break>
                    <case pos:start="1258:21" pos:end="1258:27">case <expr pos:start="1258:26" pos:end="1258:26"><literal type="number" pos:start="1258:26" pos:end="1258:26">2</literal></expr>:</case>
                        <expr_stmt pos:start="1259:25" pos:end="1260:67"><expr pos:start="1259:25" pos:end="1260:66"><call pos:start="1259:25" pos:end="1260:66"><name pos:start="1259:25" pos:end="1259:41">tcg_gen_qemu_ld64</name><argument_list pos:start="1259:42" pos:end="1260:66">(<argument pos:start="1259:43" pos:end="1259:54"><expr pos:start="1259:43" pos:end="1259:54"><name pos:start="1259:43" pos:end="1259:54">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="1259:57" pos:end="1259:62"><expr pos:start="1259:57" pos:end="1259:62"><name pos:start="1259:57" pos:end="1259:62">cpu_A0</name></expr></argument>, 
                                          <argument pos:start="1260:43" pos:end="1260:65"><expr pos:start="1260:43" pos:end="1260:65"><operator pos:start="1260:43" pos:end="1260:43">(</operator><name pos:start="1260:44" pos:end="1260:55"><name pos:start="1260:44" pos:end="1260:44">s</name><operator pos:start="1260:45" pos:end="1260:46">-&gt;</operator><name pos:start="1260:47" pos:end="1260:55">mem_index</name></name> <operator pos:start="1260:57" pos:end="1260:58">&gt;&gt;</operator> <literal type="number" pos:start="1260:60" pos:end="1260:60">2</literal><operator pos:start="1260:61" pos:end="1260:61">)</operator> <operator pos:start="1260:63" pos:end="1260:63">-</operator> <literal type="number" pos:start="1260:65" pos:end="1260:65">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="1261:25" pos:end="1261:67"><expr pos:start="1261:25" pos:end="1261:66"><call pos:start="1261:25" pos:end="1261:66"><name pos:start="1261:25" pos:end="1261:43">gen_helper_fldl_FT0</name><argument_list pos:start="1261:44" pos:end="1261:66">(<argument pos:start="1261:45" pos:end="1261:51"><expr pos:start="1261:45" pos:end="1261:51"><name pos:start="1261:45" pos:end="1261:51">cpu_env</name></expr></argument>, <argument pos:start="1261:54" pos:end="1261:65"><expr pos:start="1261:54" pos:end="1261:65"><name pos:start="1261:54" pos:end="1261:65">cpu_tmp1_i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break pos:start="1262:25" pos:end="1262:30">break;</break>
                    <case pos:start="1263:21" pos:end="1263:27">case <expr pos:start="1263:26" pos:end="1263:26"><literal type="number" pos:start="1263:26" pos:end="1263:26">3</literal></expr>:</case>
                    <default pos:start="1264:21" pos:end="1264:28">default:</default>
                        <expr_stmt pos:start="1265:25" pos:end="1265:65"><expr pos:start="1265:25" pos:end="1265:64"><call pos:start="1265:25" pos:end="1265:64"><name pos:start="1265:25" pos:end="1265:40">gen_op_lds_T0_A0</name><argument_list pos:start="1265:41" pos:end="1265:64">(<argument pos:start="1265:42" pos:end="1265:63"><expr pos:start="1265:42" pos:end="1265:63"><name pos:start="1265:42" pos:end="1265:48">OT_WORD</name> <operator pos:start="1265:50" pos:end="1265:50">+</operator> <name pos:start="1265:52" pos:end="1265:63"><name pos:start="1265:52" pos:end="1265:52">s</name><operator pos:start="1265:53" pos:end="1265:54">-&gt;</operator><name pos:start="1265:55" pos:end="1265:63">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="1266:25" pos:end="1266:69"><expr pos:start="1266:25" pos:end="1266:68"><call pos:start="1266:25" pos:end="1266:68"><name pos:start="1266:25" pos:end="1266:44">tcg_gen_trunc_tl_i32</name><argument_list pos:start="1266:45" pos:end="1266:68">(<argument pos:start="1266:46" pos:end="1266:57"><expr pos:start="1266:46" pos:end="1266:57"><name pos:start="1266:46" pos:end="1266:57">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1266:60" pos:end="1266:67"><expr pos:start="1266:60" pos:end="1266:67"><name pos:start="1266:60" pos:end="1266:67"><name pos:start="1266:60" pos:end="1266:64">cpu_T</name><index pos:start="1266:65" pos:end="1266:67">[<expr pos:start="1266:66" pos:end="1266:66"><literal type="number" pos:start="1266:66" pos:end="1266:66">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="1267:25" pos:end="1267:68"><expr pos:start="1267:25" pos:end="1267:67"><call pos:start="1267:25" pos:end="1267:67"><name pos:start="1267:25" pos:end="1267:44">gen_helper_fildl_FT0</name><argument_list pos:start="1267:45" pos:end="1267:67">(<argument pos:start="1267:46" pos:end="1267:52"><expr pos:start="1267:46" pos:end="1267:52"><name pos:start="1267:46" pos:end="1267:52">cpu_env</name></expr></argument>, <argument pos:start="1267:55" pos:end="1267:66"><expr pos:start="1267:55" pos:end="1267:66"><name pos:start="1267:55" pos:end="1267:66">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break pos:start="1268:25" pos:end="1268:30">break;</break>
                    <expr_stmt pos:start="1269:21" pos:end="1269:53"><expr pos:start="1269:21" pos:end="1269:52"><call pos:start="1269:21" pos:end="1269:52"><name pos:start="1269:21" pos:end="1269:47">gen_helper_fp_arith_ST0_FT0</name><argument_list pos:start="1269:48" pos:end="1269:52">(<argument pos:start="1269:49" pos:end="1269:51"><expr pos:start="1269:49" pos:end="1269:51"><name pos:start="1269:49" pos:end="1269:51">op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt pos:start="1270:21" pos:end="3141:17"><if pos:start="1270:21" pos:end="3141:17">if <condition pos:start="1270:24" pos:end="1270:33">(<expr pos:start="1270:25" pos:end="1270:32"><name pos:start="1270:25" pos:end="1270:27">op1</name> <operator pos:start="1270:29" pos:end="1270:30">==</operator> <literal type="number" pos:start="1270:32" pos:end="1270:32">3</literal></expr>)</condition> <block pos:start="1270:35" pos:end="3141:17">{<block_content pos:start="1272:25" pos:end="3141:17">
                        <comment type="block" pos:start="1271:25" pos:end="1271:45">/* fcomp needs pop */</comment>
                        <expr_stmt pos:start="1272:25" pos:end="1272:49"><expr pos:start="1272:25" pos:end="1272:48"><call pos:start="1272:25" pos:end="1272:48"><name pos:start="1272:25" pos:end="1272:39">gen_helper_fpop</name><argument_list pos:start="1272:40" pos:end="1272:48">(<argument pos:start="1272:41" pos:end="1272:47"><expr pos:start="1272:41" pos:end="1272:47"><name pos:start="1272:41" pos:end="1272:47">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="1273:17" pos:end="1273:22">break;</break>
            <case pos:start="1274:13" pos:end="1274:22">case <expr pos:start="1274:18" pos:end="1274:21"><literal type="number" pos:start="1274:18" pos:end="1274:21">0x08</literal></expr>:</case> <comment type="block" pos:start="1274:24" pos:end="1274:33">/* flds */</comment>
            <case pos:start="1275:13" pos:end="1275:22">case <expr pos:start="1275:18" pos:end="1275:21"><literal type="number" pos:start="1275:18" pos:end="1275:21">0x0a</literal></expr>:</case> <comment type="block" pos:start="1275:24" pos:end="1275:33">/* fsts */</comment>
            <case pos:start="1276:13" pos:end="1276:22">case <expr pos:start="1276:18" pos:end="1276:21"><literal type="number" pos:start="1276:18" pos:end="1276:21">0x0b</literal></expr>:</case> <comment type="block" pos:start="1276:24" pos:end="1276:34">/* fstps */</comment>
            <case pos:start="1277:13" pos:end="1277:31">case <expr pos:start="1277:18" pos:end="1277:30"><literal type="number" pos:start="1277:18" pos:end="1277:21">0x18</literal> <operator pos:start="1277:23" pos:end="1277:25">...</operator> <literal type="number" pos:start="1277:27" pos:end="1277:30">0x1b</literal></expr>:</case> <comment type="block" pos:start="1277:33" pos:end="1277:67">/* fildl, fisttpl, fistl, fistpl */</comment>
            <case pos:start="1278:13" pos:end="1278:31">case <expr pos:start="1278:18" pos:end="1278:30"><literal type="number" pos:start="1278:18" pos:end="1278:21">0x28</literal> <operator pos:start="1278:23" pos:end="1278:25">...</operator> <literal type="number" pos:start="1278:27" pos:end="1278:30">0x2b</literal></expr>:</case> <comment type="block" pos:start="1278:33" pos:end="1278:65">/* fldl, fisttpll, fstl, fstpl */</comment>
            <case pos:start="1279:13" pos:end="1279:31">case <expr pos:start="1279:18" pos:end="1279:30"><literal type="number" pos:start="1279:18" pos:end="1279:21">0x38</literal> <operator pos:start="1279:23" pos:end="1279:25">...</operator> <literal type="number" pos:start="1279:27" pos:end="1279:30">0x3b</literal></expr>:</case> <comment type="block" pos:start="1279:33" pos:end="1279:67">/* filds, fisttps, fists, fistps */</comment>
                <switch pos:start="1280:17" pos:end="3141:17">switch<condition pos:start="1280:23" pos:end="1280:30">(<expr pos:start="1280:24" pos:end="1280:29"><name pos:start="1280:24" pos:end="1280:25">op</name> <operator pos:start="1280:27" pos:end="1280:27">&amp;</operator> <literal type="number" pos:start="1280:29" pos:end="1280:29">7</literal></expr>)</condition> <block pos:start="1280:32" pos:end="3141:17">{<block_content pos:start="1281:17" pos:end="3141:17">
                <case pos:start="1281:17" pos:end="1281:23">case <expr pos:start="1281:22" pos:end="1281:22"><literal type="number" pos:start="1281:22" pos:end="1281:22">0</literal></expr>:</case>
                    <switch pos:start="1282:21" pos:end="3141:17">switch<condition pos:start="1282:27" pos:end="1282:35">(<expr pos:start="1282:28" pos:end="1282:34"><name pos:start="1282:28" pos:end="1282:29">op</name> <operator pos:start="1282:31" pos:end="1282:32">&gt;&gt;</operator> <literal type="number" pos:start="1282:34" pos:end="1282:34">4</literal></expr>)</condition> <block pos:start="1282:37" pos:end="3141:17">{<block_content pos:start="1283:21" pos:end="3141:17">
                    <case pos:start="1283:21" pos:end="1283:27">case <expr pos:start="1283:26" pos:end="1283:26"><literal type="number" pos:start="1283:26" pos:end="1283:26">0</literal></expr>:</case>
                        <expr_stmt pos:start="1284:25" pos:end="1284:64"><expr pos:start="1284:25" pos:end="1284:63"><call pos:start="1284:25" pos:end="1284:63"><name pos:start="1284:25" pos:end="1284:39">gen_op_ld_T0_A0</name><argument_list pos:start="1284:40" pos:end="1284:63">(<argument pos:start="1284:41" pos:end="1284:62"><expr pos:start="1284:41" pos:end="1284:62"><name pos:start="1284:41" pos:end="1284:47">OT_LONG</name> <operator pos:start="1284:49" pos:end="1284:49">+</operator> <name pos:start="1284:51" pos:end="1284:62"><name pos:start="1284:51" pos:end="1284:51">s</name><operator pos:start="1284:52" pos:end="1284:53">-&gt;</operator><name pos:start="1284:54" pos:end="1284:62">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="1285:25" pos:end="1285:69"><expr pos:start="1285:25" pos:end="1285:68"><call pos:start="1285:25" pos:end="1285:68"><name pos:start="1285:25" pos:end="1285:44">tcg_gen_trunc_tl_i32</name><argument_list pos:start="1285:45" pos:end="1285:68">(<argument pos:start="1285:46" pos:end="1285:57"><expr pos:start="1285:46" pos:end="1285:57"><name pos:start="1285:46" pos:end="1285:57">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1285:60" pos:end="1285:67"><expr pos:start="1285:60" pos:end="1285:67"><name pos:start="1285:60" pos:end="1285:67"><name pos:start="1285:60" pos:end="1285:64">cpu_T</name><index pos:start="1285:65" pos:end="1285:67">[<expr pos:start="1285:66" pos:end="1285:66"><literal type="number" pos:start="1285:66" pos:end="1285:66">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="1286:25" pos:end="1286:67"><expr pos:start="1286:25" pos:end="1286:66"><call pos:start="1286:25" pos:end="1286:66"><name pos:start="1286:25" pos:end="1286:43">gen_helper_flds_ST0</name><argument_list pos:start="1286:44" pos:end="1286:66">(<argument pos:start="1286:45" pos:end="1286:51"><expr pos:start="1286:45" pos:end="1286:51"><name pos:start="1286:45" pos:end="1286:51">cpu_env</name></expr></argument>, <argument pos:start="1286:54" pos:end="1286:65"><expr pos:start="1286:54" pos:end="1286:65"><name pos:start="1286:54" pos:end="1286:65">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break pos:start="1287:25" pos:end="1287:30">break;</break>
                    <case pos:start="1288:21" pos:end="1288:27">case <expr pos:start="1288:26" pos:end="1288:26"><literal type="number" pos:start="1288:26" pos:end="1288:26">1</literal></expr>:</case>
                        <expr_stmt pos:start="1289:25" pos:end="1289:64"><expr pos:start="1289:25" pos:end="1289:63"><call pos:start="1289:25" pos:end="1289:63"><name pos:start="1289:25" pos:end="1289:39">gen_op_ld_T0_A0</name><argument_list pos:start="1289:40" pos:end="1289:63">(<argument pos:start="1289:41" pos:end="1289:62"><expr pos:start="1289:41" pos:end="1289:62"><name pos:start="1289:41" pos:end="1289:47">OT_LONG</name> <operator pos:start="1289:49" pos:end="1289:49">+</operator> <name pos:start="1289:51" pos:end="1289:62"><name pos:start="1289:51" pos:end="1289:51">s</name><operator pos:start="1289:52" pos:end="1289:53">-&gt;</operator><name pos:start="1289:54" pos:end="1289:62">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="1290:25" pos:end="1290:69"><expr pos:start="1290:25" pos:end="1290:68"><call pos:start="1290:25" pos:end="1290:68"><name pos:start="1290:25" pos:end="1290:44">tcg_gen_trunc_tl_i32</name><argument_list pos:start="1290:45" pos:end="1290:68">(<argument pos:start="1290:46" pos:end="1290:57"><expr pos:start="1290:46" pos:end="1290:57"><name pos:start="1290:46" pos:end="1290:57">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1290:60" pos:end="1290:67"><expr pos:start="1290:60" pos:end="1290:67"><name pos:start="1290:60" pos:end="1290:67"><name pos:start="1290:60" pos:end="1290:64">cpu_T</name><index pos:start="1290:65" pos:end="1290:67">[<expr pos:start="1290:66" pos:end="1290:66"><literal type="number" pos:start="1290:66" pos:end="1290:66">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="1291:25" pos:end="1291:68"><expr pos:start="1291:25" pos:end="1291:67"><call pos:start="1291:25" pos:end="1291:67"><name pos:start="1291:25" pos:end="1291:44">gen_helper_fildl_ST0</name><argument_list pos:start="1291:45" pos:end="1291:67">(<argument pos:start="1291:46" pos:end="1291:52"><expr pos:start="1291:46" pos:end="1291:52"><name pos:start="1291:46" pos:end="1291:52">cpu_env</name></expr></argument>, <argument pos:start="1291:55" pos:end="1291:66"><expr pos:start="1291:55" pos:end="1291:66"><name pos:start="1291:55" pos:end="1291:66">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break pos:start="1292:25" pos:end="1292:30">break;</break>
                    <case pos:start="1293:21" pos:end="1293:27">case <expr pos:start="1293:26" pos:end="1293:26"><literal type="number" pos:start="1293:26" pos:end="1293:26">2</literal></expr>:</case>
                        <expr_stmt pos:start="1294:25" pos:end="1295:67"><expr pos:start="1294:25" pos:end="1295:66"><call pos:start="1294:25" pos:end="1295:66"><name pos:start="1294:25" pos:end="1294:41">tcg_gen_qemu_ld64</name><argument_list pos:start="1294:42" pos:end="1295:66">(<argument pos:start="1294:43" pos:end="1294:54"><expr pos:start="1294:43" pos:end="1294:54"><name pos:start="1294:43" pos:end="1294:54">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="1294:57" pos:end="1294:62"><expr pos:start="1294:57" pos:end="1294:62"><name pos:start="1294:57" pos:end="1294:62">cpu_A0</name></expr></argument>, 
                                          <argument pos:start="1295:43" pos:end="1295:65"><expr pos:start="1295:43" pos:end="1295:65"><operator pos:start="1295:43" pos:end="1295:43">(</operator><name pos:start="1295:44" pos:end="1295:55"><name pos:start="1295:44" pos:end="1295:44">s</name><operator pos:start="1295:45" pos:end="1295:46">-&gt;</operator><name pos:start="1295:47" pos:end="1295:55">mem_index</name></name> <operator pos:start="1295:57" pos:end="1295:58">&gt;&gt;</operator> <literal type="number" pos:start="1295:60" pos:end="1295:60">2</literal><operator pos:start="1295:61" pos:end="1295:61">)</operator> <operator pos:start="1295:63" pos:end="1295:63">-</operator> <literal type="number" pos:start="1295:65" pos:end="1295:65">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="1296:25" pos:end="1296:67"><expr pos:start="1296:25" pos:end="1296:66"><call pos:start="1296:25" pos:end="1296:66"><name pos:start="1296:25" pos:end="1296:43">gen_helper_fldl_ST0</name><argument_list pos:start="1296:44" pos:end="1296:66">(<argument pos:start="1296:45" pos:end="1296:51"><expr pos:start="1296:45" pos:end="1296:51"><name pos:start="1296:45" pos:end="1296:51">cpu_env</name></expr></argument>, <argument pos:start="1296:54" pos:end="1296:65"><expr pos:start="1296:54" pos:end="1296:65"><name pos:start="1296:54" pos:end="1296:65">cpu_tmp1_i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break pos:start="1297:25" pos:end="1297:30">break;</break>
                    <case pos:start="1298:21" pos:end="1298:27">case <expr pos:start="1298:26" pos:end="1298:26"><literal type="number" pos:start="1298:26" pos:end="1298:26">3</literal></expr>:</case>
                    <default pos:start="1299:21" pos:end="1299:28">default:</default>
                        <expr_stmt pos:start="1300:25" pos:end="1300:65"><expr pos:start="1300:25" pos:end="1300:64"><call pos:start="1300:25" pos:end="1300:64"><name pos:start="1300:25" pos:end="1300:40">gen_op_lds_T0_A0</name><argument_list pos:start="1300:41" pos:end="1300:64">(<argument pos:start="1300:42" pos:end="1300:63"><expr pos:start="1300:42" pos:end="1300:63"><name pos:start="1300:42" pos:end="1300:48">OT_WORD</name> <operator pos:start="1300:50" pos:end="1300:50">+</operator> <name pos:start="1300:52" pos:end="1300:63"><name pos:start="1300:52" pos:end="1300:52">s</name><operator pos:start="1300:53" pos:end="1300:54">-&gt;</operator><name pos:start="1300:55" pos:end="1300:63">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="1301:25" pos:end="1301:69"><expr pos:start="1301:25" pos:end="1301:68"><call pos:start="1301:25" pos:end="1301:68"><name pos:start="1301:25" pos:end="1301:44">tcg_gen_trunc_tl_i32</name><argument_list pos:start="1301:45" pos:end="1301:68">(<argument pos:start="1301:46" pos:end="1301:57"><expr pos:start="1301:46" pos:end="1301:57"><name pos:start="1301:46" pos:end="1301:57">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1301:60" pos:end="1301:67"><expr pos:start="1301:60" pos:end="1301:67"><name pos:start="1301:60" pos:end="1301:67"><name pos:start="1301:60" pos:end="1301:64">cpu_T</name><index pos:start="1301:65" pos:end="1301:67">[<expr pos:start="1301:66" pos:end="1301:66"><literal type="number" pos:start="1301:66" pos:end="1301:66">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="1302:25" pos:end="1302:68"><expr pos:start="1302:25" pos:end="1302:67"><call pos:start="1302:25" pos:end="1302:67"><name pos:start="1302:25" pos:end="1302:44">gen_helper_fildl_ST0</name><argument_list pos:start="1302:45" pos:end="1302:67">(<argument pos:start="1302:46" pos:end="1302:52"><expr pos:start="1302:46" pos:end="1302:52"><name pos:start="1302:46" pos:end="1302:52">cpu_env</name></expr></argument>, <argument pos:start="1302:55" pos:end="1302:66"><expr pos:start="1302:55" pos:end="1302:66"><name pos:start="1302:55" pos:end="1302:66">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break pos:start="1303:25" pos:end="1303:30">break;</break>
                    <break pos:start="1304:21" pos:end="1304:26">break;</break>
                <case pos:start="1305:17" pos:end="1305:23">case <expr pos:start="1305:22" pos:end="1305:22"><literal type="number" pos:start="1305:22" pos:end="1305:22">1</literal></expr>:</case>
                    <comment type="block" pos:start="1306:21" pos:end="1306:75">/* XXX: the corresponding CPUID bit must be tested ! */</comment>
                    <switch pos:start="1307:21" pos:end="3141:17">switch<condition pos:start="1307:27" pos:end="1307:35">(<expr pos:start="1307:28" pos:end="1307:34"><name pos:start="1307:28" pos:end="1307:29">op</name> <operator pos:start="1307:31" pos:end="1307:32">&gt;&gt;</operator> <literal type="number" pos:start="1307:34" pos:end="1307:34">4</literal></expr>)</condition> <block pos:start="1307:37" pos:end="3141:17">{<block_content pos:start="1308:21" pos:end="3141:17">
                    <case pos:start="1308:21" pos:end="1308:27">case <expr pos:start="1308:26" pos:end="1308:26"><literal type="number" pos:start="1308:26" pos:end="1308:26">1</literal></expr>:</case>
                        <expr_stmt pos:start="1309:25" pos:end="1309:69"><expr pos:start="1309:25" pos:end="1309:68"><call pos:start="1309:25" pos:end="1309:68"><name pos:start="1309:25" pos:end="1309:45">gen_helper_fisttl_ST0</name><argument_list pos:start="1309:46" pos:end="1309:68">(<argument pos:start="1309:47" pos:end="1309:58"><expr pos:start="1309:47" pos:end="1309:58"><name pos:start="1309:47" pos:end="1309:58">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1309:61" pos:end="1309:67"><expr pos:start="1309:61" pos:end="1309:67"><name pos:start="1309:61" pos:end="1309:67">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="1310:25" pos:end="1310:68"><expr pos:start="1310:25" pos:end="1310:67"><call pos:start="1310:25" pos:end="1310:67"><name pos:start="1310:25" pos:end="1310:43">tcg_gen_extu_i32_tl</name><argument_list pos:start="1310:44" pos:end="1310:67">(<argument pos:start="1310:45" pos:end="1310:52"><expr pos:start="1310:45" pos:end="1310:52"><name pos:start="1310:45" pos:end="1310:52"><name pos:start="1310:45" pos:end="1310:49">cpu_T</name><index pos:start="1310:50" pos:end="1310:52">[<expr pos:start="1310:51" pos:end="1310:51"><literal type="number" pos:start="1310:51" pos:end="1310:51">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1310:55" pos:end="1310:66"><expr pos:start="1310:55" pos:end="1310:66"><name pos:start="1310:55" pos:end="1310:66">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="1311:25" pos:end="1311:64"><expr pos:start="1311:25" pos:end="1311:63"><call pos:start="1311:25" pos:end="1311:63"><name pos:start="1311:25" pos:end="1311:39">gen_op_st_T0_A0</name><argument_list pos:start="1311:40" pos:end="1311:63">(<argument pos:start="1311:41" pos:end="1311:62"><expr pos:start="1311:41" pos:end="1311:62"><name pos:start="1311:41" pos:end="1311:47">OT_LONG</name> <operator pos:start="1311:49" pos:end="1311:49">+</operator> <name pos:start="1311:51" pos:end="1311:62"><name pos:start="1311:51" pos:end="1311:51">s</name><operator pos:start="1311:52" pos:end="1311:53">-&gt;</operator><name pos:start="1311:54" pos:end="1311:62">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break pos:start="1312:25" pos:end="1312:30">break;</break>
                    <case pos:start="1313:21" pos:end="1313:27">case <expr pos:start="1313:26" pos:end="1313:26"><literal type="number" pos:start="1313:26" pos:end="1313:26">2</literal></expr>:</case>
                        <expr_stmt pos:start="1314:25" pos:end="1314:70"><expr pos:start="1314:25" pos:end="1314:69"><call pos:start="1314:25" pos:end="1314:69"><name pos:start="1314:25" pos:end="1314:46">gen_helper_fisttll_ST0</name><argument_list pos:start="1314:47" pos:end="1314:69">(<argument pos:start="1314:48" pos:end="1314:59"><expr pos:start="1314:48" pos:end="1314:59"><name pos:start="1314:48" pos:end="1314:59">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="1314:62" pos:end="1314:68"><expr pos:start="1314:62" pos:end="1314:68"><name pos:start="1314:62" pos:end="1314:68">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="1315:25" pos:end="1316:67"><expr pos:start="1315:25" pos:end="1316:66"><call pos:start="1315:25" pos:end="1316:66"><name pos:start="1315:25" pos:end="1315:41">tcg_gen_qemu_st64</name><argument_list pos:start="1315:42" pos:end="1316:66">(<argument pos:start="1315:43" pos:end="1315:54"><expr pos:start="1315:43" pos:end="1315:54"><name pos:start="1315:43" pos:end="1315:54">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="1315:57" pos:end="1315:62"><expr pos:start="1315:57" pos:end="1315:62"><name pos:start="1315:57" pos:end="1315:62">cpu_A0</name></expr></argument>, 
                                          <argument pos:start="1316:43" pos:end="1316:65"><expr pos:start="1316:43" pos:end="1316:65"><operator pos:start="1316:43" pos:end="1316:43">(</operator><name pos:start="1316:44" pos:end="1316:55"><name pos:start="1316:44" pos:end="1316:44">s</name><operator pos:start="1316:45" pos:end="1316:46">-&gt;</operator><name pos:start="1316:47" pos:end="1316:55">mem_index</name></name> <operator pos:start="1316:57" pos:end="1316:58">&gt;&gt;</operator> <literal type="number" pos:start="1316:60" pos:end="1316:60">2</literal><operator pos:start="1316:61" pos:end="1316:61">)</operator> <operator pos:start="1316:63" pos:end="1316:63">-</operator> <literal type="number" pos:start="1316:65" pos:end="1316:65">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break pos:start="1317:25" pos:end="1317:30">break;</break>
                    <case pos:start="1318:21" pos:end="1318:27">case <expr pos:start="1318:26" pos:end="1318:26"><literal type="number" pos:start="1318:26" pos:end="1318:26">3</literal></expr>:</case>
                    <default pos:start="1319:21" pos:end="1319:28">default:</default>
                        <expr_stmt pos:start="1320:25" pos:end="1320:68"><expr pos:start="1320:25" pos:end="1320:67"><call pos:start="1320:25" pos:end="1320:67"><name pos:start="1320:25" pos:end="1320:44">gen_helper_fistt_ST0</name><argument_list pos:start="1320:45" pos:end="1320:67">(<argument pos:start="1320:46" pos:end="1320:57"><expr pos:start="1320:46" pos:end="1320:57"><name pos:start="1320:46" pos:end="1320:57">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1320:60" pos:end="1320:66"><expr pos:start="1320:60" pos:end="1320:66"><name pos:start="1320:60" pos:end="1320:66">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="1321:25" pos:end="1321:68"><expr pos:start="1321:25" pos:end="1321:67"><call pos:start="1321:25" pos:end="1321:67"><name pos:start="1321:25" pos:end="1321:43">tcg_gen_extu_i32_tl</name><argument_list pos:start="1321:44" pos:end="1321:67">(<argument pos:start="1321:45" pos:end="1321:52"><expr pos:start="1321:45" pos:end="1321:52"><name pos:start="1321:45" pos:end="1321:52"><name pos:start="1321:45" pos:end="1321:49">cpu_T</name><index pos:start="1321:50" pos:end="1321:52">[<expr pos:start="1321:51" pos:end="1321:51"><literal type="number" pos:start="1321:51" pos:end="1321:51">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1321:55" pos:end="1321:66"><expr pos:start="1321:55" pos:end="1321:66"><name pos:start="1321:55" pos:end="1321:66">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="1322:25" pos:end="1322:64"><expr pos:start="1322:25" pos:end="1322:63"><call pos:start="1322:25" pos:end="1322:63"><name pos:start="1322:25" pos:end="1322:39">gen_op_st_T0_A0</name><argument_list pos:start="1322:40" pos:end="1322:63">(<argument pos:start="1322:41" pos:end="1322:62"><expr pos:start="1322:41" pos:end="1322:62"><name pos:start="1322:41" pos:end="1322:47">OT_WORD</name> <operator pos:start="1322:49" pos:end="1322:49">+</operator> <name pos:start="1322:51" pos:end="1322:62"><name pos:start="1322:51" pos:end="1322:51">s</name><operator pos:start="1322:52" pos:end="1322:53">-&gt;</operator><name pos:start="1322:54" pos:end="1322:62">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break pos:start="1323:25" pos:end="1323:30">break;</break>
                    <expr_stmt pos:start="1324:21" pos:end="1324:45"><expr pos:start="1324:21" pos:end="1324:44"><call pos:start="1324:21" pos:end="1324:44"><name pos:start="1324:21" pos:end="1324:35">gen_helper_fpop</name><argument_list pos:start="1324:36" pos:end="1324:44">(<argument pos:start="1324:37" pos:end="1324:43"><expr pos:start="1324:37" pos:end="1324:43"><name pos:start="1324:37" pos:end="1324:43">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:start="1325:21" pos:end="1325:26">break;</break>
                <default pos:start="1326:17" pos:end="1326:24">default:</default>
                    <switch pos:start="1327:21" pos:end="1422:9">switch<condition pos:start="1327:27" pos:end="1327:35">(<expr pos:start="1327:28" pos:end="1327:34"><name pos:start="1327:28" pos:end="1327:29">op</name> <operator pos:start="1327:31" pos:end="1327:32">&gt;&gt;</operator> <literal type="number" pos:start="1327:34" pos:end="1327:34">4</literal></expr>)</condition> <block pos:start="1327:37" pos:end="1422:9">{<block_content pos:start="1328:21" pos:end="1421:20">
                    <case pos:start="1328:21" pos:end="1328:27">case <expr pos:start="1328:26" pos:end="1328:26"><literal type="number" pos:start="1328:26" pos:end="1328:26">0</literal></expr>:</case>
                        <expr_stmt pos:start="1329:25" pos:end="1329:67"><expr pos:start="1329:25" pos:end="1329:66"><call pos:start="1329:25" pos:end="1329:66"><name pos:start="1329:25" pos:end="1329:43">gen_helper_fsts_ST0</name><argument_list pos:start="1329:44" pos:end="1329:66">(<argument pos:start="1329:45" pos:end="1329:56"><expr pos:start="1329:45" pos:end="1329:56"><name pos:start="1329:45" pos:end="1329:56">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1329:59" pos:end="1329:65"><expr pos:start="1329:59" pos:end="1329:65"><name pos:start="1329:59" pos:end="1329:65">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="1330:25" pos:end="1330:68"><expr pos:start="1330:25" pos:end="1330:67"><call pos:start="1330:25" pos:end="1330:67"><name pos:start="1330:25" pos:end="1330:43">tcg_gen_extu_i32_tl</name><argument_list pos:start="1330:44" pos:end="1330:67">(<argument pos:start="1330:45" pos:end="1330:52"><expr pos:start="1330:45" pos:end="1330:52"><name pos:start="1330:45" pos:end="1330:52"><name pos:start="1330:45" pos:end="1330:49">cpu_T</name><index pos:start="1330:50" pos:end="1330:52">[<expr pos:start="1330:51" pos:end="1330:51"><literal type="number" pos:start="1330:51" pos:end="1330:51">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1330:55" pos:end="1330:66"><expr pos:start="1330:55" pos:end="1330:66"><name pos:start="1330:55" pos:end="1330:66">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="1331:25" pos:end="1331:64"><expr pos:start="1331:25" pos:end="1331:63"><call pos:start="1331:25" pos:end="1331:63"><name pos:start="1331:25" pos:end="1331:39">gen_op_st_T0_A0</name><argument_list pos:start="1331:40" pos:end="1331:63">(<argument pos:start="1331:41" pos:end="1331:62"><expr pos:start="1331:41" pos:end="1331:62"><name pos:start="1331:41" pos:end="1331:47">OT_LONG</name> <operator pos:start="1331:49" pos:end="1331:49">+</operator> <name pos:start="1331:51" pos:end="1331:62"><name pos:start="1331:51" pos:end="1331:51">s</name><operator pos:start="1331:52" pos:end="1331:53">-&gt;</operator><name pos:start="1331:54" pos:end="1331:62">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break pos:start="1332:25" pos:end="1332:30">break;</break>
                    <case pos:start="1333:21" pos:end="1333:27">case <expr pos:start="1333:26" pos:end="1333:26"><literal type="number" pos:start="1333:26" pos:end="1333:26">1</literal></expr>:</case>
                        <expr_stmt pos:start="1334:25" pos:end="1334:68"><expr pos:start="1334:25" pos:end="1334:67"><call pos:start="1334:25" pos:end="1334:67"><name pos:start="1334:25" pos:end="1334:44">gen_helper_fistl_ST0</name><argument_list pos:start="1334:45" pos:end="1334:67">(<argument pos:start="1334:46" pos:end="1334:57"><expr pos:start="1334:46" pos:end="1334:57"><name pos:start="1334:46" pos:end="1334:57">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1334:60" pos:end="1334:66"><expr pos:start="1334:60" pos:end="1334:66"><name pos:start="1334:60" pos:end="1334:66">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="1335:25" pos:end="1335:68"><expr pos:start="1335:25" pos:end="1335:67"><call pos:start="1335:25" pos:end="1335:67"><name pos:start="1335:25" pos:end="1335:43">tcg_gen_extu_i32_tl</name><argument_list pos:start="1335:44" pos:end="1335:67">(<argument pos:start="1335:45" pos:end="1335:52"><expr pos:start="1335:45" pos:end="1335:52"><name pos:start="1335:45" pos:end="1335:52"><name pos:start="1335:45" pos:end="1335:49">cpu_T</name><index pos:start="1335:50" pos:end="1335:52">[<expr pos:start="1335:51" pos:end="1335:51"><literal type="number" pos:start="1335:51" pos:end="1335:51">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1335:55" pos:end="1335:66"><expr pos:start="1335:55" pos:end="1335:66"><name pos:start="1335:55" pos:end="1335:66">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="1336:25" pos:end="1336:64"><expr pos:start="1336:25" pos:end="1336:63"><call pos:start="1336:25" pos:end="1336:63"><name pos:start="1336:25" pos:end="1336:39">gen_op_st_T0_A0</name><argument_list pos:start="1336:40" pos:end="1336:63">(<argument pos:start="1336:41" pos:end="1336:62"><expr pos:start="1336:41" pos:end="1336:62"><name pos:start="1336:41" pos:end="1336:47">OT_LONG</name> <operator pos:start="1336:49" pos:end="1336:49">+</operator> <name pos:start="1336:51" pos:end="1336:62"><name pos:start="1336:51" pos:end="1336:51">s</name><operator pos:start="1336:52" pos:end="1336:53">-&gt;</operator><name pos:start="1336:54" pos:end="1336:62">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break pos:start="1337:25" pos:end="1337:30">break;</break>
                    <case pos:start="1338:21" pos:end="1338:27">case <expr pos:start="1338:26" pos:end="1338:26"><literal type="number" pos:start="1338:26" pos:end="1338:26">2</literal></expr>:</case>
                        <expr_stmt pos:start="1339:25" pos:end="1339:67"><expr pos:start="1339:25" pos:end="1339:66"><call pos:start="1339:25" pos:end="1339:66"><name pos:start="1339:25" pos:end="1339:43">gen_helper_fstl_ST0</name><argument_list pos:start="1339:44" pos:end="1339:66">(<argument pos:start="1339:45" pos:end="1339:56"><expr pos:start="1339:45" pos:end="1339:56"><name pos:start="1339:45" pos:end="1339:56">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="1339:59" pos:end="1339:65"><expr pos:start="1339:59" pos:end="1339:65"><name pos:start="1339:59" pos:end="1339:65">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="1340:25" pos:end="1341:67"><expr pos:start="1340:25" pos:end="1341:66"><call pos:start="1340:25" pos:end="1341:66"><name pos:start="1340:25" pos:end="1340:41">tcg_gen_qemu_st64</name><argument_list pos:start="1340:42" pos:end="1341:66">(<argument pos:start="1340:43" pos:end="1340:54"><expr pos:start="1340:43" pos:end="1340:54"><name pos:start="1340:43" pos:end="1340:54">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="1340:57" pos:end="1340:62"><expr pos:start="1340:57" pos:end="1340:62"><name pos:start="1340:57" pos:end="1340:62">cpu_A0</name></expr></argument>, 
                                          <argument pos:start="1341:43" pos:end="1341:65"><expr pos:start="1341:43" pos:end="1341:65"><operator pos:start="1341:43" pos:end="1341:43">(</operator><name pos:start="1341:44" pos:end="1341:55"><name pos:start="1341:44" pos:end="1341:44">s</name><operator pos:start="1341:45" pos:end="1341:46">-&gt;</operator><name pos:start="1341:47" pos:end="1341:55">mem_index</name></name> <operator pos:start="1341:57" pos:end="1341:58">&gt;&gt;</operator> <literal type="number" pos:start="1341:60" pos:end="1341:60">2</literal><operator pos:start="1341:61" pos:end="1341:61">)</operator> <operator pos:start="1341:63" pos:end="1341:63">-</operator> <literal type="number" pos:start="1341:65" pos:end="1341:65">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break pos:start="1342:25" pos:end="1342:30">break;</break>
                    <case pos:start="1343:21" pos:end="1343:27">case <expr pos:start="1343:26" pos:end="1343:26"><literal type="number" pos:start="1343:26" pos:end="1343:26">3</literal></expr>:</case>
                    <default pos:start="1344:21" pos:end="1344:28">default:</default>
                        <expr_stmt pos:start="1345:25" pos:end="1345:67"><expr pos:start="1345:25" pos:end="1345:66"><call pos:start="1345:25" pos:end="1345:66"><name pos:start="1345:25" pos:end="1345:43">gen_helper_fist_ST0</name><argument_list pos:start="1345:44" pos:end="1345:66">(<argument pos:start="1345:45" pos:end="1345:56"><expr pos:start="1345:45" pos:end="1345:56"><name pos:start="1345:45" pos:end="1345:56">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1345:59" pos:end="1345:65"><expr pos:start="1345:59" pos:end="1345:65"><name pos:start="1345:59" pos:end="1345:65">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="1346:25" pos:end="1346:68"><expr pos:start="1346:25" pos:end="1346:67"><call pos:start="1346:25" pos:end="1346:67"><name pos:start="1346:25" pos:end="1346:43">tcg_gen_extu_i32_tl</name><argument_list pos:start="1346:44" pos:end="1346:67">(<argument pos:start="1346:45" pos:end="1346:52"><expr pos:start="1346:45" pos:end="1346:52"><name pos:start="1346:45" pos:end="1346:52"><name pos:start="1346:45" pos:end="1346:49">cpu_T</name><index pos:start="1346:50" pos:end="1346:52">[<expr pos:start="1346:51" pos:end="1346:51"><literal type="number" pos:start="1346:51" pos:end="1346:51">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1346:55" pos:end="1346:66"><expr pos:start="1346:55" pos:end="1346:66"><name pos:start="1346:55" pos:end="1346:66">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="1347:25" pos:end="1347:64"><expr pos:start="1347:25" pos:end="1347:63"><call pos:start="1347:25" pos:end="1347:63"><name pos:start="1347:25" pos:end="1347:39">gen_op_st_T0_A0</name><argument_list pos:start="1347:40" pos:end="1347:63">(<argument pos:start="1347:41" pos:end="1347:62"><expr pos:start="1347:41" pos:end="1347:62"><name pos:start="1347:41" pos:end="1347:47">OT_WORD</name> <operator pos:start="1347:49" pos:end="1347:49">+</operator> <name pos:start="1347:51" pos:end="1347:62"><name pos:start="1347:51" pos:end="1347:51">s</name><operator pos:start="1347:52" pos:end="1347:53">-&gt;</operator><name pos:start="1347:54" pos:end="1347:62">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break pos:start="1348:25" pos:end="1348:30">break;</break>
                    <if_stmt pos:start="1349:21" pos:end="1350:49"><if pos:start="1349:21" pos:end="1350:49">if <condition pos:start="1349:24" pos:end="1349:38">(<expr pos:start="1349:25" pos:end="1349:37"><operator pos:start="1349:25" pos:end="1349:25">(</operator><name pos:start="1349:26" pos:end="1349:27">op</name> <operator pos:start="1349:29" pos:end="1349:29">&amp;</operator> <literal type="number" pos:start="1349:31" pos:end="1349:31">7</literal><operator pos:start="1349:32" pos:end="1349:32">)</operator> <operator pos:start="1349:34" pos:end="1349:35">==</operator> <literal type="number" pos:start="1349:37" pos:end="1349:37">3</literal></expr>)</condition><block type="pseudo" pos:start="1350:25" pos:end="1350:49"><block_content pos:start="1350:25" pos:end="1350:49">
                        <expr_stmt pos:start="1350:25" pos:end="1350:49"><expr pos:start="1350:25" pos:end="1350:48"><call pos:start="1350:25" pos:end="1350:48"><name pos:start="1350:25" pos:end="1350:39">gen_helper_fpop</name><argument_list pos:start="1350:40" pos:end="1350:48">(<argument pos:start="1350:41" pos:end="1350:47"><expr pos:start="1350:41" pos:end="1350:47"><name pos:start="1350:41" pos:end="1350:47">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <break pos:start="1351:21" pos:end="1351:26">break;</break>
                <break pos:start="1352:17" pos:end="1352:22">break;</break>
            <case pos:start="1353:13" pos:end="1353:22">case <expr pos:start="1353:18" pos:end="1353:21"><literal type="number" pos:start="1353:18" pos:end="1353:21">0x0c</literal></expr>:</case> <comment type="block" pos:start="1353:24" pos:end="1353:39">/* fldenv mem */</comment>
                <expr_stmt pos:start="1354:17" pos:end="1354:36"><expr pos:start="1354:17" pos:end="1354:35"><call pos:start="1354:17" pos:end="1354:35"><name pos:start="1354:17" pos:end="1354:32">gen_update_cc_op</name><argument_list pos:start="1354:33" pos:end="1354:35">(<argument pos:start="1354:34" pos:end="1354:34"><expr pos:start="1354:34" pos:end="1354:34"><name pos:start="1354:34" pos:end="1354:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1355:17" pos:end="1355:50"><expr pos:start="1355:17" pos:end="1355:49"><call pos:start="1355:17" pos:end="1355:49"><name pos:start="1355:17" pos:end="1355:26">gen_jmp_im</name><argument_list pos:start="1355:27" pos:end="1355:49">(<argument pos:start="1355:28" pos:end="1355:48"><expr pos:start="1355:28" pos:end="1355:48"><name pos:start="1355:28" pos:end="1355:35">pc_start</name> <operator pos:start="1355:37" pos:end="1355:37">-</operator> <name pos:start="1355:39" pos:end="1355:48"><name pos:start="1355:39" pos:end="1355:39">s</name><operator pos:start="1355:40" pos:end="1355:41">-&gt;</operator><name pos:start="1355:42" pos:end="1355:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1356:17" pos:end="1356:76"><expr pos:start="1356:17" pos:end="1356:75"><call pos:start="1356:17" pos:end="1356:75"><name pos:start="1356:17" pos:end="1356:33">gen_helper_fldenv</name><argument_list pos:start="1356:34" pos:end="1356:75">(<argument pos:start="1356:35" pos:end="1356:41"><expr pos:start="1356:35" pos:end="1356:41"><name pos:start="1356:35" pos:end="1356:41">cpu_env</name></expr></argument>, <argument pos:start="1356:44" pos:end="1356:49"><expr pos:start="1356:44" pos:end="1356:49"><name pos:start="1356:44" pos:end="1356:49">cpu_A0</name></expr></argument>, <argument pos:start="1356:52" pos:end="1356:74"><expr pos:start="1356:52" pos:end="1356:74"><call pos:start="1356:52" pos:end="1356:74"><name pos:start="1356:52" pos:end="1356:64">tcg_const_i32</name><argument_list pos:start="1356:65" pos:end="1356:74">(<argument pos:start="1356:66" pos:end="1356:73"><expr pos:start="1356:66" pos:end="1356:73"><name pos:start="1356:66" pos:end="1356:73"><name pos:start="1356:66" pos:end="1356:66">s</name><operator pos:start="1356:67" pos:end="1356:68">-&gt;</operator><name pos:start="1356:69" pos:end="1356:73">dflag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="1357:17" pos:end="1357:22">break;</break>
            <case pos:start="1358:13" pos:end="1358:22">case <expr pos:start="1358:18" pos:end="1358:21"><literal type="number" pos:start="1358:18" pos:end="1358:21">0x0d</literal></expr>:</case> <comment type="block" pos:start="1358:24" pos:end="1358:38">/* fldcw mem */</comment>
                <expr_stmt pos:start="1359:17" pos:end="1359:56"><expr pos:start="1359:17" pos:end="1359:55"><call pos:start="1359:17" pos:end="1359:55"><name pos:start="1359:17" pos:end="1359:31">gen_op_ld_T0_A0</name><argument_list pos:start="1359:32" pos:end="1359:55">(<argument pos:start="1359:33" pos:end="1359:54"><expr pos:start="1359:33" pos:end="1359:54"><name pos:start="1359:33" pos:end="1359:39">OT_WORD</name> <operator pos:start="1359:41" pos:end="1359:41">+</operator> <name pos:start="1359:43" pos:end="1359:54"><name pos:start="1359:43" pos:end="1359:43">s</name><operator pos:start="1359:44" pos:end="1359:45">-&gt;</operator><name pos:start="1359:46" pos:end="1359:54">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1360:17" pos:end="1360:61"><expr pos:start="1360:17" pos:end="1360:60"><call pos:start="1360:17" pos:end="1360:60"><name pos:start="1360:17" pos:end="1360:36">tcg_gen_trunc_tl_i32</name><argument_list pos:start="1360:37" pos:end="1360:60">(<argument pos:start="1360:38" pos:end="1360:49"><expr pos:start="1360:38" pos:end="1360:49"><name pos:start="1360:38" pos:end="1360:49">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1360:52" pos:end="1360:59"><expr pos:start="1360:52" pos:end="1360:59"><name pos:start="1360:52" pos:end="1360:59"><name pos:start="1360:52" pos:end="1360:56">cpu_T</name><index pos:start="1360:57" pos:end="1360:59">[<expr pos:start="1360:58" pos:end="1360:58"><literal type="number" pos:start="1360:58" pos:end="1360:58">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1361:17" pos:end="1361:56"><expr pos:start="1361:17" pos:end="1361:55"><call pos:start="1361:17" pos:end="1361:55"><name pos:start="1361:17" pos:end="1361:32">gen_helper_fldcw</name><argument_list pos:start="1361:33" pos:end="1361:55">(<argument pos:start="1361:34" pos:end="1361:40"><expr pos:start="1361:34" pos:end="1361:40"><name pos:start="1361:34" pos:end="1361:40">cpu_env</name></expr></argument>, <argument pos:start="1361:43" pos:end="1361:54"><expr pos:start="1361:43" pos:end="1361:54"><name pos:start="1361:43" pos:end="1361:54">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="1362:17" pos:end="1362:22">break;</break>
            <case pos:start="1363:13" pos:end="1363:22">case <expr pos:start="1363:18" pos:end="1363:21"><literal type="number" pos:start="1363:18" pos:end="1363:21">0x0e</literal></expr>:</case> <comment type="block" pos:start="1363:24" pos:end="1363:40">/* fnstenv mem */</comment>
                <expr_stmt pos:start="1364:17" pos:end="1364:36"><expr pos:start="1364:17" pos:end="1364:35"><call pos:start="1364:17" pos:end="1364:35"><name pos:start="1364:17" pos:end="1364:32">gen_update_cc_op</name><argument_list pos:start="1364:33" pos:end="1364:35">(<argument pos:start="1364:34" pos:end="1364:34"><expr pos:start="1364:34" pos:end="1364:34"><name pos:start="1364:34" pos:end="1364:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1365:17" pos:end="1365:50"><expr pos:start="1365:17" pos:end="1365:49"><call pos:start="1365:17" pos:end="1365:49"><name pos:start="1365:17" pos:end="1365:26">gen_jmp_im</name><argument_list pos:start="1365:27" pos:end="1365:49">(<argument pos:start="1365:28" pos:end="1365:48"><expr pos:start="1365:28" pos:end="1365:48"><name pos:start="1365:28" pos:end="1365:35">pc_start</name> <operator pos:start="1365:37" pos:end="1365:37">-</operator> <name pos:start="1365:39" pos:end="1365:48"><name pos:start="1365:39" pos:end="1365:39">s</name><operator pos:start="1365:40" pos:end="1365:41">-&gt;</operator><name pos:start="1365:42" pos:end="1365:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1366:17" pos:end="1366:76"><expr pos:start="1366:17" pos:end="1366:75"><call pos:start="1366:17" pos:end="1366:75"><name pos:start="1366:17" pos:end="1366:33">gen_helper_fstenv</name><argument_list pos:start="1366:34" pos:end="1366:75">(<argument pos:start="1366:35" pos:end="1366:41"><expr pos:start="1366:35" pos:end="1366:41"><name pos:start="1366:35" pos:end="1366:41">cpu_env</name></expr></argument>, <argument pos:start="1366:44" pos:end="1366:49"><expr pos:start="1366:44" pos:end="1366:49"><name pos:start="1366:44" pos:end="1366:49">cpu_A0</name></expr></argument>, <argument pos:start="1366:52" pos:end="1366:74"><expr pos:start="1366:52" pos:end="1366:74"><call pos:start="1366:52" pos:end="1366:74"><name pos:start="1366:52" pos:end="1366:64">tcg_const_i32</name><argument_list pos:start="1366:65" pos:end="1366:74">(<argument pos:start="1366:66" pos:end="1366:73"><expr pos:start="1366:66" pos:end="1366:73"><name pos:start="1366:66" pos:end="1366:73"><name pos:start="1366:66" pos:end="1366:66">s</name><operator pos:start="1366:67" pos:end="1366:68">-&gt;</operator><name pos:start="1366:69" pos:end="1366:73">dflag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="1367:17" pos:end="1367:22">break;</break>
            <case pos:start="1368:13" pos:end="1368:22">case <expr pos:start="1368:18" pos:end="1368:21"><literal type="number" pos:start="1368:18" pos:end="1368:21">0x0f</literal></expr>:</case> <comment type="block" pos:start="1368:24" pos:end="1368:39">/* fnstcw mem */</comment>
                <expr_stmt pos:start="1369:17" pos:end="1369:57"><expr pos:start="1369:17" pos:end="1369:56"><call pos:start="1369:17" pos:end="1369:56"><name pos:start="1369:17" pos:end="1369:33">gen_helper_fnstcw</name><argument_list pos:start="1369:34" pos:end="1369:56">(<argument pos:start="1369:35" pos:end="1369:46"><expr pos:start="1369:35" pos:end="1369:46"><name pos:start="1369:35" pos:end="1369:46">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1369:49" pos:end="1369:55"><expr pos:start="1369:49" pos:end="1369:55"><name pos:start="1369:49" pos:end="1369:55">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1370:17" pos:end="1370:60"><expr pos:start="1370:17" pos:end="1370:59"><call pos:start="1370:17" pos:end="1370:59"><name pos:start="1370:17" pos:end="1370:35">tcg_gen_extu_i32_tl</name><argument_list pos:start="1370:36" pos:end="1370:59">(<argument pos:start="1370:37" pos:end="1370:44"><expr pos:start="1370:37" pos:end="1370:44"><name pos:start="1370:37" pos:end="1370:44"><name pos:start="1370:37" pos:end="1370:41">cpu_T</name><index pos:start="1370:42" pos:end="1370:44">[<expr pos:start="1370:43" pos:end="1370:43"><literal type="number" pos:start="1370:43" pos:end="1370:43">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1370:47" pos:end="1370:58"><expr pos:start="1370:47" pos:end="1370:58"><name pos:start="1370:47" pos:end="1370:58">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1371:17" pos:end="1371:56"><expr pos:start="1371:17" pos:end="1371:55"><call pos:start="1371:17" pos:end="1371:55"><name pos:start="1371:17" pos:end="1371:31">gen_op_st_T0_A0</name><argument_list pos:start="1371:32" pos:end="1371:55">(<argument pos:start="1371:33" pos:end="1371:54"><expr pos:start="1371:33" pos:end="1371:54"><name pos:start="1371:33" pos:end="1371:39">OT_WORD</name> <operator pos:start="1371:41" pos:end="1371:41">+</operator> <name pos:start="1371:43" pos:end="1371:54"><name pos:start="1371:43" pos:end="1371:43">s</name><operator pos:start="1371:44" pos:end="1371:45">-&gt;</operator><name pos:start="1371:46" pos:end="1371:54">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="1372:17" pos:end="1372:22">break;</break>
            <case pos:start="1373:13" pos:end="1373:22">case <expr pos:start="1373:18" pos:end="1373:21"><literal type="number" pos:start="1373:18" pos:end="1373:21">0x1d</literal></expr>:</case> <comment type="block" pos:start="1373:24" pos:end="1373:37">/* fldt mem */</comment>
                <expr_stmt pos:start="1374:17" pos:end="1374:36"><expr pos:start="1374:17" pos:end="1374:35"><call pos:start="1374:17" pos:end="1374:35"><name pos:start="1374:17" pos:end="1374:32">gen_update_cc_op</name><argument_list pos:start="1374:33" pos:end="1374:35">(<argument pos:start="1374:34" pos:end="1374:34"><expr pos:start="1374:34" pos:end="1374:34"><name pos:start="1374:34" pos:end="1374:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1375:17" pos:end="1375:50"><expr pos:start="1375:17" pos:end="1375:49"><call pos:start="1375:17" pos:end="1375:49"><name pos:start="1375:17" pos:end="1375:26">gen_jmp_im</name><argument_list pos:start="1375:27" pos:end="1375:49">(<argument pos:start="1375:28" pos:end="1375:48"><expr pos:start="1375:28" pos:end="1375:48"><name pos:start="1375:28" pos:end="1375:35">pc_start</name> <operator pos:start="1375:37" pos:end="1375:37">-</operator> <name pos:start="1375:39" pos:end="1375:48"><name pos:start="1375:39" pos:end="1375:39">s</name><operator pos:start="1375:40" pos:end="1375:41">-&gt;</operator><name pos:start="1375:42" pos:end="1375:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1376:17" pos:end="1376:53"><expr pos:start="1376:17" pos:end="1376:52"><call pos:start="1376:17" pos:end="1376:52"><name pos:start="1376:17" pos:end="1376:35">gen_helper_fldt_ST0</name><argument_list pos:start="1376:36" pos:end="1376:52">(<argument pos:start="1376:37" pos:end="1376:43"><expr pos:start="1376:37" pos:end="1376:43"><name pos:start="1376:37" pos:end="1376:43">cpu_env</name></expr></argument>, <argument pos:start="1376:46" pos:end="1376:51"><expr pos:start="1376:46" pos:end="1376:51"><name pos:start="1376:46" pos:end="1376:51">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="1377:17" pos:end="1377:22">break;</break>
            <case pos:start="1378:13" pos:end="1378:22">case <expr pos:start="1378:18" pos:end="1378:21"><literal type="number" pos:start="1378:18" pos:end="1378:21">0x1f</literal></expr>:</case> <comment type="block" pos:start="1378:24" pos:end="1378:38">/* fstpt mem */</comment>
                <expr_stmt pos:start="1379:17" pos:end="1379:36"><expr pos:start="1379:17" pos:end="1379:35"><call pos:start="1379:17" pos:end="1379:35"><name pos:start="1379:17" pos:end="1379:32">gen_update_cc_op</name><argument_list pos:start="1379:33" pos:end="1379:35">(<argument pos:start="1379:34" pos:end="1379:34"><expr pos:start="1379:34" pos:end="1379:34"><name pos:start="1379:34" pos:end="1379:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1380:17" pos:end="1380:50"><expr pos:start="1380:17" pos:end="1380:49"><call pos:start="1380:17" pos:end="1380:49"><name pos:start="1380:17" pos:end="1380:26">gen_jmp_im</name><argument_list pos:start="1380:27" pos:end="1380:49">(<argument pos:start="1380:28" pos:end="1380:48"><expr pos:start="1380:28" pos:end="1380:48"><name pos:start="1380:28" pos:end="1380:35">pc_start</name> <operator pos:start="1380:37" pos:end="1380:37">-</operator> <name pos:start="1380:39" pos:end="1380:48"><name pos:start="1380:39" pos:end="1380:39">s</name><operator pos:start="1380:40" pos:end="1380:41">-&gt;</operator><name pos:start="1380:42" pos:end="1380:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1381:17" pos:end="1381:53"><expr pos:start="1381:17" pos:end="1381:52"><call pos:start="1381:17" pos:end="1381:52"><name pos:start="1381:17" pos:end="1381:35">gen_helper_fstt_ST0</name><argument_list pos:start="1381:36" pos:end="1381:52">(<argument pos:start="1381:37" pos:end="1381:43"><expr pos:start="1381:37" pos:end="1381:43"><name pos:start="1381:37" pos:end="1381:43">cpu_env</name></expr></argument>, <argument pos:start="1381:46" pos:end="1381:51"><expr pos:start="1381:46" pos:end="1381:51"><name pos:start="1381:46" pos:end="1381:51">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1382:17" pos:end="1382:41"><expr pos:start="1382:17" pos:end="1382:40"><call pos:start="1382:17" pos:end="1382:40"><name pos:start="1382:17" pos:end="1382:31">gen_helper_fpop</name><argument_list pos:start="1382:32" pos:end="1382:40">(<argument pos:start="1382:33" pos:end="1382:39"><expr pos:start="1382:33" pos:end="1382:39"><name pos:start="1382:33" pos:end="1382:39">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="1383:17" pos:end="1383:22">break;</break>
            <case pos:start="1384:13" pos:end="1384:22">case <expr pos:start="1384:18" pos:end="1384:21"><literal type="number" pos:start="1384:18" pos:end="1384:21">0x2c</literal></expr>:</case> <comment type="block" pos:start="1384:24" pos:end="1384:39">/* frstor mem */</comment>
                <expr_stmt pos:start="1385:17" pos:end="1385:36"><expr pos:start="1385:17" pos:end="1385:35"><call pos:start="1385:17" pos:end="1385:35"><name pos:start="1385:17" pos:end="1385:32">gen_update_cc_op</name><argument_list pos:start="1385:33" pos:end="1385:35">(<argument pos:start="1385:34" pos:end="1385:34"><expr pos:start="1385:34" pos:end="1385:34"><name pos:start="1385:34" pos:end="1385:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1386:17" pos:end="1386:50"><expr pos:start="1386:17" pos:end="1386:49"><call pos:start="1386:17" pos:end="1386:49"><name pos:start="1386:17" pos:end="1386:26">gen_jmp_im</name><argument_list pos:start="1386:27" pos:end="1386:49">(<argument pos:start="1386:28" pos:end="1386:48"><expr pos:start="1386:28" pos:end="1386:48"><name pos:start="1386:28" pos:end="1386:35">pc_start</name> <operator pos:start="1386:37" pos:end="1386:37">-</operator> <name pos:start="1386:39" pos:end="1386:48"><name pos:start="1386:39" pos:end="1386:39">s</name><operator pos:start="1386:40" pos:end="1386:41">-&gt;</operator><name pos:start="1386:42" pos:end="1386:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1387:17" pos:end="1387:76"><expr pos:start="1387:17" pos:end="1387:75"><call pos:start="1387:17" pos:end="1387:75"><name pos:start="1387:17" pos:end="1387:33">gen_helper_frstor</name><argument_list pos:start="1387:34" pos:end="1387:75">(<argument pos:start="1387:35" pos:end="1387:41"><expr pos:start="1387:35" pos:end="1387:41"><name pos:start="1387:35" pos:end="1387:41">cpu_env</name></expr></argument>, <argument pos:start="1387:44" pos:end="1387:49"><expr pos:start="1387:44" pos:end="1387:49"><name pos:start="1387:44" pos:end="1387:49">cpu_A0</name></expr></argument>, <argument pos:start="1387:52" pos:end="1387:74"><expr pos:start="1387:52" pos:end="1387:74"><call pos:start="1387:52" pos:end="1387:74"><name pos:start="1387:52" pos:end="1387:64">tcg_const_i32</name><argument_list pos:start="1387:65" pos:end="1387:74">(<argument pos:start="1387:66" pos:end="1387:73"><expr pos:start="1387:66" pos:end="1387:73"><name pos:start="1387:66" pos:end="1387:73"><name pos:start="1387:66" pos:end="1387:66">s</name><operator pos:start="1387:67" pos:end="1387:68">-&gt;</operator><name pos:start="1387:69" pos:end="1387:73">dflag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="1388:17" pos:end="1388:22">break;</break>
            <case pos:start="1389:13" pos:end="1389:22">case <expr pos:start="1389:18" pos:end="1389:21"><literal type="number" pos:start="1389:18" pos:end="1389:21">0x2e</literal></expr>:</case> <comment type="block" pos:start="1389:24" pos:end="1389:39">/* fnsave mem */</comment>
                <expr_stmt pos:start="1390:17" pos:end="1390:36"><expr pos:start="1390:17" pos:end="1390:35"><call pos:start="1390:17" pos:end="1390:35"><name pos:start="1390:17" pos:end="1390:32">gen_update_cc_op</name><argument_list pos:start="1390:33" pos:end="1390:35">(<argument pos:start="1390:34" pos:end="1390:34"><expr pos:start="1390:34" pos:end="1390:34"><name pos:start="1390:34" pos:end="1390:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1391:17" pos:end="1391:50"><expr pos:start="1391:17" pos:end="1391:49"><call pos:start="1391:17" pos:end="1391:49"><name pos:start="1391:17" pos:end="1391:26">gen_jmp_im</name><argument_list pos:start="1391:27" pos:end="1391:49">(<argument pos:start="1391:28" pos:end="1391:48"><expr pos:start="1391:28" pos:end="1391:48"><name pos:start="1391:28" pos:end="1391:35">pc_start</name> <operator pos:start="1391:37" pos:end="1391:37">-</operator> <name pos:start="1391:39" pos:end="1391:48"><name pos:start="1391:39" pos:end="1391:39">s</name><operator pos:start="1391:40" pos:end="1391:41">-&gt;</operator><name pos:start="1391:42" pos:end="1391:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1392:17" pos:end="1392:75"><expr pos:start="1392:17" pos:end="1392:74"><call pos:start="1392:17" pos:end="1392:74"><name pos:start="1392:17" pos:end="1392:32">gen_helper_fsave</name><argument_list pos:start="1392:33" pos:end="1392:74">(<argument pos:start="1392:34" pos:end="1392:40"><expr pos:start="1392:34" pos:end="1392:40"><name pos:start="1392:34" pos:end="1392:40">cpu_env</name></expr></argument>, <argument pos:start="1392:43" pos:end="1392:48"><expr pos:start="1392:43" pos:end="1392:48"><name pos:start="1392:43" pos:end="1392:48">cpu_A0</name></expr></argument>, <argument pos:start="1392:51" pos:end="1392:73"><expr pos:start="1392:51" pos:end="1392:73"><call pos:start="1392:51" pos:end="1392:73"><name pos:start="1392:51" pos:end="1392:63">tcg_const_i32</name><argument_list pos:start="1392:64" pos:end="1392:73">(<argument pos:start="1392:65" pos:end="1392:72"><expr pos:start="1392:65" pos:end="1392:72"><name pos:start="1392:65" pos:end="1392:72"><name pos:start="1392:65" pos:end="1392:65">s</name><operator pos:start="1392:66" pos:end="1392:67">-&gt;</operator><name pos:start="1392:68" pos:end="1392:72">dflag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="1393:17" pos:end="1393:22">break;</break>
            <case pos:start="1394:13" pos:end="1394:22">case <expr pos:start="1394:18" pos:end="1394:21"><literal type="number" pos:start="1394:18" pos:end="1394:21">0x2f</literal></expr>:</case> <comment type="block" pos:start="1394:24" pos:end="1394:39">/* fnstsw mem */</comment>
                <expr_stmt pos:start="1395:17" pos:end="1395:57"><expr pos:start="1395:17" pos:end="1395:56"><call pos:start="1395:17" pos:end="1395:56"><name pos:start="1395:17" pos:end="1395:33">gen_helper_fnstsw</name><argument_list pos:start="1395:34" pos:end="1395:56">(<argument pos:start="1395:35" pos:end="1395:46"><expr pos:start="1395:35" pos:end="1395:46"><name pos:start="1395:35" pos:end="1395:46">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1395:49" pos:end="1395:55"><expr pos:start="1395:49" pos:end="1395:55"><name pos:start="1395:49" pos:end="1395:55">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1396:17" pos:end="1396:60"><expr pos:start="1396:17" pos:end="1396:59"><call pos:start="1396:17" pos:end="1396:59"><name pos:start="1396:17" pos:end="1396:35">tcg_gen_extu_i32_tl</name><argument_list pos:start="1396:36" pos:end="1396:59">(<argument pos:start="1396:37" pos:end="1396:44"><expr pos:start="1396:37" pos:end="1396:44"><name pos:start="1396:37" pos:end="1396:44"><name pos:start="1396:37" pos:end="1396:41">cpu_T</name><index pos:start="1396:42" pos:end="1396:44">[<expr pos:start="1396:43" pos:end="1396:43"><literal type="number" pos:start="1396:43" pos:end="1396:43">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1396:47" pos:end="1396:58"><expr pos:start="1396:47" pos:end="1396:58"><name pos:start="1396:47" pos:end="1396:58">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1397:17" pos:end="1397:56"><expr pos:start="1397:17" pos:end="1397:55"><call pos:start="1397:17" pos:end="1397:55"><name pos:start="1397:17" pos:end="1397:31">gen_op_st_T0_A0</name><argument_list pos:start="1397:32" pos:end="1397:55">(<argument pos:start="1397:33" pos:end="1397:54"><expr pos:start="1397:33" pos:end="1397:54"><name pos:start="1397:33" pos:end="1397:39">OT_WORD</name> <operator pos:start="1397:41" pos:end="1397:41">+</operator> <name pos:start="1397:43" pos:end="1397:54"><name pos:start="1397:43" pos:end="1397:43">s</name><operator pos:start="1397:44" pos:end="1397:45">-&gt;</operator><name pos:start="1397:46" pos:end="1397:54">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="1398:17" pos:end="1398:22">break;</break>
            <case pos:start="1399:13" pos:end="1399:22">case <expr pos:start="1399:18" pos:end="1399:21"><literal type="number" pos:start="1399:18" pos:end="1399:21">0x3c</literal></expr>:</case> <comment type="block" pos:start="1399:24" pos:end="1399:33">/* fbld */</comment>
                <expr_stmt pos:start="1400:17" pos:end="1400:36"><expr pos:start="1400:17" pos:end="1400:35"><call pos:start="1400:17" pos:end="1400:35"><name pos:start="1400:17" pos:end="1400:32">gen_update_cc_op</name><argument_list pos:start="1400:33" pos:end="1400:35">(<argument pos:start="1400:34" pos:end="1400:34"><expr pos:start="1400:34" pos:end="1400:34"><name pos:start="1400:34" pos:end="1400:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1401:17" pos:end="1401:50"><expr pos:start="1401:17" pos:end="1401:49"><call pos:start="1401:17" pos:end="1401:49"><name pos:start="1401:17" pos:end="1401:26">gen_jmp_im</name><argument_list pos:start="1401:27" pos:end="1401:49">(<argument pos:start="1401:28" pos:end="1401:48"><expr pos:start="1401:28" pos:end="1401:48"><name pos:start="1401:28" pos:end="1401:35">pc_start</name> <operator pos:start="1401:37" pos:end="1401:37">-</operator> <name pos:start="1401:39" pos:end="1401:48"><name pos:start="1401:39" pos:end="1401:39">s</name><operator pos:start="1401:40" pos:end="1401:41">-&gt;</operator><name pos:start="1401:42" pos:end="1401:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1402:17" pos:end="1402:53"><expr pos:start="1402:17" pos:end="1402:52"><call pos:start="1402:17" pos:end="1402:52"><name pos:start="1402:17" pos:end="1402:35">gen_helper_fbld_ST0</name><argument_list pos:start="1402:36" pos:end="1402:52">(<argument pos:start="1402:37" pos:end="1402:43"><expr pos:start="1402:37" pos:end="1402:43"><name pos:start="1402:37" pos:end="1402:43">cpu_env</name></expr></argument>, <argument pos:start="1402:46" pos:end="1402:51"><expr pos:start="1402:46" pos:end="1402:51"><name pos:start="1402:46" pos:end="1402:51">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="1403:17" pos:end="1403:22">break;</break>
            <case pos:start="1404:13" pos:end="1404:22">case <expr pos:start="1404:18" pos:end="1404:21"><literal type="number" pos:start="1404:18" pos:end="1404:21">0x3e</literal></expr>:</case> <comment type="block" pos:start="1404:24" pos:end="1404:34">/* fbstp */</comment>
                <expr_stmt pos:start="1405:17" pos:end="1405:36"><expr pos:start="1405:17" pos:end="1405:35"><call pos:start="1405:17" pos:end="1405:35"><name pos:start="1405:17" pos:end="1405:32">gen_update_cc_op</name><argument_list pos:start="1405:33" pos:end="1405:35">(<argument pos:start="1405:34" pos:end="1405:34"><expr pos:start="1405:34" pos:end="1405:34"><name pos:start="1405:34" pos:end="1405:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1406:17" pos:end="1406:50"><expr pos:start="1406:17" pos:end="1406:49"><call pos:start="1406:17" pos:end="1406:49"><name pos:start="1406:17" pos:end="1406:26">gen_jmp_im</name><argument_list pos:start="1406:27" pos:end="1406:49">(<argument pos:start="1406:28" pos:end="1406:48"><expr pos:start="1406:28" pos:end="1406:48"><name pos:start="1406:28" pos:end="1406:35">pc_start</name> <operator pos:start="1406:37" pos:end="1406:37">-</operator> <name pos:start="1406:39" pos:end="1406:48"><name pos:start="1406:39" pos:end="1406:39">s</name><operator pos:start="1406:40" pos:end="1406:41">-&gt;</operator><name pos:start="1406:42" pos:end="1406:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1407:17" pos:end="1407:53"><expr pos:start="1407:17" pos:end="1407:52"><call pos:start="1407:17" pos:end="1407:52"><name pos:start="1407:17" pos:end="1407:35">gen_helper_fbst_ST0</name><argument_list pos:start="1407:36" pos:end="1407:52">(<argument pos:start="1407:37" pos:end="1407:43"><expr pos:start="1407:37" pos:end="1407:43"><name pos:start="1407:37" pos:end="1407:43">cpu_env</name></expr></argument>, <argument pos:start="1407:46" pos:end="1407:51"><expr pos:start="1407:46" pos:end="1407:51"><name pos:start="1407:46" pos:end="1407:51">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1408:17" pos:end="1408:41"><expr pos:start="1408:17" pos:end="1408:40"><call pos:start="1408:17" pos:end="1408:40"><name pos:start="1408:17" pos:end="1408:31">gen_helper_fpop</name><argument_list pos:start="1408:32" pos:end="1408:40">(<argument pos:start="1408:33" pos:end="1408:39"><expr pos:start="1408:33" pos:end="1408:39"><name pos:start="1408:33" pos:end="1408:39">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="1409:17" pos:end="1409:22">break;</break>
            <case pos:start="1410:13" pos:end="1410:22">case <expr pos:start="1410:18" pos:end="1410:21"><literal type="number" pos:start="1410:18" pos:end="1410:21">0x3d</literal></expr>:</case> <comment type="block" pos:start="1410:24" pos:end="1410:35">/* fildll */</comment>
                <expr_stmt pos:start="1411:17" pos:end="1412:59"><expr pos:start="1411:17" pos:end="1412:58"><call pos:start="1411:17" pos:end="1412:58"><name pos:start="1411:17" pos:end="1411:33">tcg_gen_qemu_ld64</name><argument_list pos:start="1411:34" pos:end="1412:58">(<argument pos:start="1411:35" pos:end="1411:46"><expr pos:start="1411:35" pos:end="1411:46"><name pos:start="1411:35" pos:end="1411:46">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="1411:49" pos:end="1411:54"><expr pos:start="1411:49" pos:end="1411:54"><name pos:start="1411:49" pos:end="1411:54">cpu_A0</name></expr></argument>, 
                                  <argument pos:start="1412:35" pos:end="1412:57"><expr pos:start="1412:35" pos:end="1412:57"><operator pos:start="1412:35" pos:end="1412:35">(</operator><name pos:start="1412:36" pos:end="1412:47"><name pos:start="1412:36" pos:end="1412:36">s</name><operator pos:start="1412:37" pos:end="1412:38">-&gt;</operator><name pos:start="1412:39" pos:end="1412:47">mem_index</name></name> <operator pos:start="1412:49" pos:end="1412:50">&gt;&gt;</operator> <literal type="number" pos:start="1412:52" pos:end="1412:52">2</literal><operator pos:start="1412:53" pos:end="1412:53">)</operator> <operator pos:start="1412:55" pos:end="1412:55">-</operator> <literal type="number" pos:start="1412:57" pos:end="1412:57">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1413:17" pos:end="1413:61"><expr pos:start="1413:17" pos:end="1413:60"><call pos:start="1413:17" pos:end="1413:60"><name pos:start="1413:17" pos:end="1413:37">gen_helper_fildll_ST0</name><argument_list pos:start="1413:38" pos:end="1413:60">(<argument pos:start="1413:39" pos:end="1413:45"><expr pos:start="1413:39" pos:end="1413:45"><name pos:start="1413:39" pos:end="1413:45">cpu_env</name></expr></argument>, <argument pos:start="1413:48" pos:end="1413:59"><expr pos:start="1413:48" pos:end="1413:59"><name pos:start="1413:48" pos:end="1413:59">cpu_tmp1_i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="1414:17" pos:end="1414:22">break;</break>
            <case pos:start="1415:13" pos:end="1415:22">case <expr pos:start="1415:18" pos:end="1415:21"><literal type="number" pos:start="1415:18" pos:end="1415:21">0x3f</literal></expr>:</case> <comment type="block" pos:start="1415:24" pos:end="1415:36">/* fistpll */</comment>
                <expr_stmt pos:start="1416:17" pos:end="1416:61"><expr pos:start="1416:17" pos:end="1416:60"><call pos:start="1416:17" pos:end="1416:60"><name pos:start="1416:17" pos:end="1416:37">gen_helper_fistll_ST0</name><argument_list pos:start="1416:38" pos:end="1416:60">(<argument pos:start="1416:39" pos:end="1416:50"><expr pos:start="1416:39" pos:end="1416:50"><name pos:start="1416:39" pos:end="1416:50">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="1416:53" pos:end="1416:59"><expr pos:start="1416:53" pos:end="1416:59"><name pos:start="1416:53" pos:end="1416:59">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1417:17" pos:end="1418:59"><expr pos:start="1417:17" pos:end="1418:58"><call pos:start="1417:17" pos:end="1418:58"><name pos:start="1417:17" pos:end="1417:33">tcg_gen_qemu_st64</name><argument_list pos:start="1417:34" pos:end="1418:58">(<argument pos:start="1417:35" pos:end="1417:46"><expr pos:start="1417:35" pos:end="1417:46"><name pos:start="1417:35" pos:end="1417:46">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="1417:49" pos:end="1417:54"><expr pos:start="1417:49" pos:end="1417:54"><name pos:start="1417:49" pos:end="1417:54">cpu_A0</name></expr></argument>, 
                                  <argument pos:start="1418:35" pos:end="1418:57"><expr pos:start="1418:35" pos:end="1418:57"><operator pos:start="1418:35" pos:end="1418:35">(</operator><name pos:start="1418:36" pos:end="1418:47"><name pos:start="1418:36" pos:end="1418:36">s</name><operator pos:start="1418:37" pos:end="1418:38">-&gt;</operator><name pos:start="1418:39" pos:end="1418:47">mem_index</name></name> <operator pos:start="1418:49" pos:end="1418:50">&gt;&gt;</operator> <literal type="number" pos:start="1418:52" pos:end="1418:52">2</literal><operator pos:start="1418:53" pos:end="1418:53">)</operator> <operator pos:start="1418:55" pos:end="1418:55">-</operator> <literal type="number" pos:start="1418:57" pos:end="1418:57">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1419:17" pos:end="1419:41"><expr pos:start="1419:17" pos:end="1419:40"><call pos:start="1419:17" pos:end="1419:40"><name pos:start="1419:17" pos:end="1419:31">gen_helper_fpop</name><argument_list pos:start="1419:32" pos:end="1419:40">(<argument pos:start="1419:33" pos:end="1419:39"><expr pos:start="1419:33" pos:end="1419:39"><name pos:start="1419:33" pos:end="1419:39">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="1420:17" pos:end="1420:22">break;</break>
            <default pos:start="1421:13" pos:end="1421:20">default:</default>
        </block_content>}</block></switch> <if_stmt pos:start="1422:11" pos:end="3141:17"><else pos:start="1422:11" pos:end="3141:17">else <block pos:start="1422:16" pos:end="3141:17">{<block_content pos:start="1424:13" pos:end="3141:17">
            <comment type="block" pos:start="1423:13" pos:end="1423:36">/* register float ops */</comment>
            <expr_stmt pos:start="1424:13" pos:end="1424:23"><expr pos:start="1424:13" pos:end="1424:22"><name pos:start="1424:13" pos:end="1424:17">opreg</name> <operator pos:start="1424:19" pos:end="1424:19">=</operator> <name pos:start="1424:21" pos:end="1424:22">rm</name></expr>;</expr_stmt>
            <switch pos:start="1425:13" pos:end="3141:17">switch<condition pos:start="1425:19" pos:end="1425:22">(<expr pos:start="1425:20" pos:end="1425:21"><name pos:start="1425:20" pos:end="1425:21">op</name></expr>)</condition> <block pos:start="1425:24" pos:end="3141:17">{<block_content pos:start="1426:13" pos:end="3141:17">
            <case pos:start="1426:13" pos:end="1426:22">case <expr pos:start="1426:18" pos:end="1426:21"><literal type="number" pos:start="1426:18" pos:end="1426:21">0x08</literal></expr>:</case> <comment type="block" pos:start="1426:24" pos:end="1426:36">/* fld sti */</comment>
                <expr_stmt pos:start="1427:17" pos:end="1427:42"><expr pos:start="1427:17" pos:end="1427:41"><call pos:start="1427:17" pos:end="1427:41"><name pos:start="1427:17" pos:end="1427:32">gen_helper_fpush</name><argument_list pos:start="1427:33" pos:end="1427:41">(<argument pos:start="1427:34" pos:end="1427:40"><expr pos:start="1427:34" pos:end="1427:40"><name pos:start="1427:34" pos:end="1427:40">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1428:17" pos:end="1429:72"><expr pos:start="1428:17" pos:end="1429:71"><call pos:start="1428:17" pos:end="1429:71"><name pos:start="1428:17" pos:end="1428:39">gen_helper_fmov_ST0_STN</name><argument_list pos:start="1428:40" pos:end="1429:71">(<argument pos:start="1428:41" pos:end="1428:47"><expr pos:start="1428:41" pos:end="1428:47"><name pos:start="1428:41" pos:end="1428:47">cpu_env</name></expr></argument>,
                                        <argument pos:start="1429:41" pos:end="1429:70"><expr pos:start="1429:41" pos:end="1429:70"><call pos:start="1429:41" pos:end="1429:70"><name pos:start="1429:41" pos:end="1429:53">tcg_const_i32</name><argument_list pos:start="1429:54" pos:end="1429:70">(<argument pos:start="1429:55" pos:end="1429:69"><expr pos:start="1429:55" pos:end="1429:69"><operator pos:start="1429:55" pos:end="1429:55">(</operator><name pos:start="1429:56" pos:end="1429:60">opreg</name> <operator pos:start="1429:62" pos:end="1429:62">+</operator> <literal type="number" pos:start="1429:64" pos:end="1429:64">1</literal><operator pos:start="1429:65" pos:end="1429:65">)</operator> <operator pos:start="1429:67" pos:end="1429:67">&amp;</operator> <literal type="number" pos:start="1429:69" pos:end="1429:69">7</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="1430:17" pos:end="1430:22">break;</break>
            <case pos:start="1431:13" pos:end="1431:22">case <expr pos:start="1431:18" pos:end="1431:21"><literal type="number" pos:start="1431:18" pos:end="1431:21">0x09</literal></expr>:</case> <comment type="block" pos:start="1431:24" pos:end="1431:38">/* fxchg sti */</comment>
            <case pos:start="1432:13" pos:end="1432:22">case <expr pos:start="1432:18" pos:end="1432:21"><literal type="number" pos:start="1432:18" pos:end="1432:21">0x29</literal></expr>:</case> <comment type="block" pos:start="1432:24" pos:end="1432:56">/* fxchg4 sti, undocumented op */</comment>
            <case pos:start="1433:13" pos:end="1433:22">case <expr pos:start="1433:18" pos:end="1433:21"><literal type="number" pos:start="1433:18" pos:end="1433:21">0x39</literal></expr>:</case> <comment type="block" pos:start="1433:24" pos:end="1433:56">/* fxchg7 sti, undocumented op */</comment>
                <expr_stmt pos:start="1434:17" pos:end="1434:72"><expr pos:start="1434:17" pos:end="1434:71"><call pos:start="1434:17" pos:end="1434:71"><name pos:start="1434:17" pos:end="1434:40">gen_helper_fxchg_ST0_STN</name><argument_list pos:start="1434:41" pos:end="1434:71">(<argument pos:start="1434:42" pos:end="1434:48"><expr pos:start="1434:42" pos:end="1434:48"><name pos:start="1434:42" pos:end="1434:48">cpu_env</name></expr></argument>, <argument pos:start="1434:51" pos:end="1434:70"><expr pos:start="1434:51" pos:end="1434:70"><call pos:start="1434:51" pos:end="1434:70"><name pos:start="1434:51" pos:end="1434:63">tcg_const_i32</name><argument_list pos:start="1434:64" pos:end="1434:70">(<argument pos:start="1434:65" pos:end="1434:69"><expr pos:start="1434:65" pos:end="1434:69"><name pos:start="1434:65" pos:end="1434:69">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="1435:17" pos:end="1435:22">break;</break>
            <case pos:start="1436:13" pos:end="1436:22">case <expr pos:start="1436:18" pos:end="1436:21"><literal type="number" pos:start="1436:18" pos:end="1436:21">0x0a</literal></expr>:</case> <comment type="block" pos:start="1436:24" pos:end="1436:37">/* grp d9/2 */</comment>
                <switch pos:start="1437:17" pos:end="3141:17">switch<condition pos:start="1437:23" pos:end="1437:26">(<expr pos:start="1437:24" pos:end="1437:25"><name pos:start="1437:24" pos:end="1437:25">rm</name></expr>)</condition> <block pos:start="1437:28" pos:end="3141:17">{<block_content pos:start="1438:17" pos:end="3141:17">
                <case pos:start="1438:17" pos:end="1438:23">case <expr pos:start="1438:22" pos:end="1438:22"><literal type="number" pos:start="1438:22" pos:end="1438:22">0</literal></expr>:</case> <comment type="block" pos:start="1438:25" pos:end="1438:34">/* fnop */</comment>
                    <comment type="block" pos:start="1439:21" pos:end="1439:62">/* check exceptions (FreeBSD FPU probe) */</comment>
                    <expr_stmt pos:start="1440:21" pos:end="1440:40"><expr pos:start="1440:21" pos:end="1440:39"><call pos:start="1440:21" pos:end="1440:39"><name pos:start="1440:21" pos:end="1440:36">gen_update_cc_op</name><argument_list pos:start="1440:37" pos:end="1440:39">(<argument pos:start="1440:38" pos:end="1440:38"><expr pos:start="1440:38" pos:end="1440:38"><name pos:start="1440:38" pos:end="1440:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="1441:21" pos:end="1441:54"><expr pos:start="1441:21" pos:end="1441:53"><call pos:start="1441:21" pos:end="1441:53"><name pos:start="1441:21" pos:end="1441:30">gen_jmp_im</name><argument_list pos:start="1441:31" pos:end="1441:53">(<argument pos:start="1441:32" pos:end="1441:52"><expr pos:start="1441:32" pos:end="1441:52"><name pos:start="1441:32" pos:end="1441:39">pc_start</name> <operator pos:start="1441:41" pos:end="1441:41">-</operator> <name pos:start="1441:43" pos:end="1441:52"><name pos:start="1441:43" pos:end="1441:43">s</name><operator pos:start="1441:44" pos:end="1441:45">-&gt;</operator><name pos:start="1441:46" pos:end="1441:52">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="1442:21" pos:end="1442:46"><expr pos:start="1442:21" pos:end="1442:45"><call pos:start="1442:21" pos:end="1442:45"><name pos:start="1442:21" pos:end="1442:36">gen_helper_fwait</name><argument_list pos:start="1442:37" pos:end="1442:45">(<argument pos:start="1442:38" pos:end="1442:44"><expr pos:start="1442:38" pos:end="1442:44"><name pos:start="1442:38" pos:end="1442:44">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:start="1443:21" pos:end="1443:26">break;</break>
                <default pos:start="1444:17" pos:end="1444:24">default:</default>
                <break pos:start="1445:17" pos:end="1445:22">break;</break>
            <case pos:start="1446:13" pos:end="1446:22">case <expr pos:start="1446:18" pos:end="1446:21"><literal type="number" pos:start="1446:18" pos:end="1446:21">0x0c</literal></expr>:</case> <comment type="block" pos:start="1446:24" pos:end="1446:37">/* grp d9/4 */</comment>
                <switch pos:start="1447:17" pos:end="3141:17">switch<condition pos:start="1447:23" pos:end="1447:26">(<expr pos:start="1447:24" pos:end="1447:25"><name pos:start="1447:24" pos:end="1447:25">rm</name></expr>)</condition> <block pos:start="1447:28" pos:end="3141:17">{<block_content pos:start="1448:17" pos:end="3141:17">
                <case pos:start="1448:17" pos:end="1448:23">case <expr pos:start="1448:22" pos:end="1448:22"><literal type="number" pos:start="1448:22" pos:end="1448:22">0</literal></expr>:</case> <comment type="block" pos:start="1448:25" pos:end="1448:34">/* fchs */</comment>
                    <expr_stmt pos:start="1449:21" pos:end="1449:49"><expr pos:start="1449:21" pos:end="1449:48"><call pos:start="1449:21" pos:end="1449:48"><name pos:start="1449:21" pos:end="1449:39">gen_helper_fchs_ST0</name><argument_list pos:start="1449:40" pos:end="1449:48">(<argument pos:start="1449:41" pos:end="1449:47"><expr pos:start="1449:41" pos:end="1449:47"><name pos:start="1449:41" pos:end="1449:47">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:start="1450:21" pos:end="1450:26">break;</break>
                <case pos:start="1451:17" pos:end="1451:23">case <expr pos:start="1451:22" pos:end="1451:22"><literal type="number" pos:start="1451:22" pos:end="1451:22">1</literal></expr>:</case> <comment type="block" pos:start="1451:25" pos:end="1451:34">/* fabs */</comment>
                    <expr_stmt pos:start="1452:21" pos:end="1452:49"><expr pos:start="1452:21" pos:end="1452:48"><call pos:start="1452:21" pos:end="1452:48"><name pos:start="1452:21" pos:end="1452:39">gen_helper_fabs_ST0</name><argument_list pos:start="1452:40" pos:end="1452:48">(<argument pos:start="1452:41" pos:end="1452:47"><expr pos:start="1452:41" pos:end="1452:47"><name pos:start="1452:41" pos:end="1452:47">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:start="1453:21" pos:end="1453:26">break;</break>
                <case pos:start="1454:17" pos:end="1454:23">case <expr pos:start="1454:22" pos:end="1454:22"><literal type="number" pos:start="1454:22" pos:end="1454:22">4</literal></expr>:</case> <comment type="block" pos:start="1454:25" pos:end="1454:34">/* ftst */</comment>
                    <expr_stmt pos:start="1455:21" pos:end="1455:49"><expr pos:start="1455:21" pos:end="1455:48"><call pos:start="1455:21" pos:end="1455:48"><name pos:start="1455:21" pos:end="1455:39">gen_helper_fldz_FT0</name><argument_list pos:start="1455:40" pos:end="1455:48">(<argument pos:start="1455:41" pos:end="1455:47"><expr pos:start="1455:41" pos:end="1455:47"><name pos:start="1455:41" pos:end="1455:47">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="1456:21" pos:end="1456:53"><expr pos:start="1456:21" pos:end="1456:52"><call pos:start="1456:21" pos:end="1456:52"><name pos:start="1456:21" pos:end="1456:43">gen_helper_fcom_ST0_FT0</name><argument_list pos:start="1456:44" pos:end="1456:52">(<argument pos:start="1456:45" pos:end="1456:51"><expr pos:start="1456:45" pos:end="1456:51"><name pos:start="1456:45" pos:end="1456:51">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:start="1457:21" pos:end="1457:26">break;</break>
                <case pos:start="1458:17" pos:end="1458:23">case <expr pos:start="1458:22" pos:end="1458:22"><literal type="number" pos:start="1458:22" pos:end="1458:22">5</literal></expr>:</case> <comment type="block" pos:start="1458:25" pos:end="1458:34">/* fxam */</comment>
                    <expr_stmt pos:start="1459:21" pos:end="1459:49"><expr pos:start="1459:21" pos:end="1459:48"><call pos:start="1459:21" pos:end="1459:48"><name pos:start="1459:21" pos:end="1459:39">gen_helper_fxam_ST0</name><argument_list pos:start="1459:40" pos:end="1459:48">(<argument pos:start="1459:41" pos:end="1459:47"><expr pos:start="1459:41" pos:end="1459:47"><name pos:start="1459:41" pos:end="1459:47">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:start="1460:21" pos:end="1460:26">break;</break>
                <default pos:start="1461:17" pos:end="1461:24">default:</default>
                <break pos:start="1462:17" pos:end="1462:22">break;</break>
            <case pos:start="1463:13" pos:end="1463:22">case <expr pos:start="1463:18" pos:end="1463:21"><literal type="number" pos:start="1463:18" pos:end="1463:21">0x0d</literal></expr>:</case> <comment type="block" pos:start="1463:24" pos:end="1463:37">/* grp d9/5 */</comment>
                <block pos:start="1464:17" pos:end="3141:17">{<block_content pos:start="1465:21" pos:end="3141:17">
                    <switch pos:start="1465:21" pos:end="3141:17">switch<condition pos:start="1465:27" pos:end="1465:30">(<expr pos:start="1465:28" pos:end="1465:29"><name pos:start="1465:28" pos:end="1465:29">rm</name></expr>)</condition> <block pos:start="1465:32" pos:end="3141:17">{<block_content pos:start="1466:21" pos:end="3141:17">
                    <case pos:start="1466:21" pos:end="1466:27">case <expr pos:start="1466:26" pos:end="1466:26"><literal type="number" pos:start="1466:26" pos:end="1466:26">0</literal></expr>:</case>
                        <expr_stmt pos:start="1467:25" pos:end="1467:50"><expr pos:start="1467:25" pos:end="1467:49"><call pos:start="1467:25" pos:end="1467:49"><name pos:start="1467:25" pos:end="1467:40">gen_helper_fpush</name><argument_list pos:start="1467:41" pos:end="1467:49">(<argument pos:start="1467:42" pos:end="1467:48"><expr pos:start="1467:42" pos:end="1467:48"><name pos:start="1467:42" pos:end="1467:48">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="1468:25" pos:end="1468:53"><expr pos:start="1468:25" pos:end="1468:52"><call pos:start="1468:25" pos:end="1468:52"><name pos:start="1468:25" pos:end="1468:43">gen_helper_fld1_ST0</name><argument_list pos:start="1468:44" pos:end="1468:52">(<argument pos:start="1468:45" pos:end="1468:51"><expr pos:start="1468:45" pos:end="1468:51"><name pos:start="1468:45" pos:end="1468:51">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break pos:start="1469:25" pos:end="1469:30">break;</break>
                    <case pos:start="1470:21" pos:end="1470:27">case <expr pos:start="1470:26" pos:end="1470:26"><literal type="number" pos:start="1470:26" pos:end="1470:26">1</literal></expr>:</case>
                        <expr_stmt pos:start="1471:25" pos:end="1471:50"><expr pos:start="1471:25" pos:end="1471:49"><call pos:start="1471:25" pos:end="1471:49"><name pos:start="1471:25" pos:end="1471:40">gen_helper_fpush</name><argument_list pos:start="1471:41" pos:end="1471:49">(<argument pos:start="1471:42" pos:end="1471:48"><expr pos:start="1471:42" pos:end="1471:48"><name pos:start="1471:42" pos:end="1471:48">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="1472:25" pos:end="1472:55"><expr pos:start="1472:25" pos:end="1472:54"><call pos:start="1472:25" pos:end="1472:54"><name pos:start="1472:25" pos:end="1472:45">gen_helper_fldl2t_ST0</name><argument_list pos:start="1472:46" pos:end="1472:54">(<argument pos:start="1472:47" pos:end="1472:53"><expr pos:start="1472:47" pos:end="1472:53"><name pos:start="1472:47" pos:end="1472:53">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break pos:start="1473:25" pos:end="1473:30">break;</break>
                    <case pos:start="1474:21" pos:end="1474:27">case <expr pos:start="1474:26" pos:end="1474:26"><literal type="number" pos:start="1474:26" pos:end="1474:26">2</literal></expr>:</case>
                        <expr_stmt pos:start="1475:25" pos:end="1475:50"><expr pos:start="1475:25" pos:end="1475:49"><call pos:start="1475:25" pos:end="1475:49"><name pos:start="1475:25" pos:end="1475:40">gen_helper_fpush</name><argument_list pos:start="1475:41" pos:end="1475:49">(<argument pos:start="1475:42" pos:end="1475:48"><expr pos:start="1475:42" pos:end="1475:48"><name pos:start="1475:42" pos:end="1475:48">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="1476:25" pos:end="1476:55"><expr pos:start="1476:25" pos:end="1476:54"><call pos:start="1476:25" pos:end="1476:54"><name pos:start="1476:25" pos:end="1476:45">gen_helper_fldl2e_ST0</name><argument_list pos:start="1476:46" pos:end="1476:54">(<argument pos:start="1476:47" pos:end="1476:53"><expr pos:start="1476:47" pos:end="1476:53"><name pos:start="1476:47" pos:end="1476:53">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break pos:start="1477:25" pos:end="1477:30">break;</break>
                    <case pos:start="1478:21" pos:end="1478:27">case <expr pos:start="1478:26" pos:end="1478:26"><literal type="number" pos:start="1478:26" pos:end="1478:26">3</literal></expr>:</case>
                        <expr_stmt pos:start="1479:25" pos:end="1479:50"><expr pos:start="1479:25" pos:end="1479:49"><call pos:start="1479:25" pos:end="1479:49"><name pos:start="1479:25" pos:end="1479:40">gen_helper_fpush</name><argument_list pos:start="1479:41" pos:end="1479:49">(<argument pos:start="1479:42" pos:end="1479:48"><expr pos:start="1479:42" pos:end="1479:48"><name pos:start="1479:42" pos:end="1479:48">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="1480:25" pos:end="1480:54"><expr pos:start="1480:25" pos:end="1480:53"><call pos:start="1480:25" pos:end="1480:53"><name pos:start="1480:25" pos:end="1480:44">gen_helper_fldpi_ST0</name><argument_list pos:start="1480:45" pos:end="1480:53">(<argument pos:start="1480:46" pos:end="1480:52"><expr pos:start="1480:46" pos:end="1480:52"><name pos:start="1480:46" pos:end="1480:52">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break pos:start="1481:25" pos:end="1481:30">break;</break>
                    <case pos:start="1482:21" pos:end="1482:27">case <expr pos:start="1482:26" pos:end="1482:26"><literal type="number" pos:start="1482:26" pos:end="1482:26">4</literal></expr>:</case>
                        <expr_stmt pos:start="1483:25" pos:end="1483:50"><expr pos:start="1483:25" pos:end="1483:49"><call pos:start="1483:25" pos:end="1483:49"><name pos:start="1483:25" pos:end="1483:40">gen_helper_fpush</name><argument_list pos:start="1483:41" pos:end="1483:49">(<argument pos:start="1483:42" pos:end="1483:48"><expr pos:start="1483:42" pos:end="1483:48"><name pos:start="1483:42" pos:end="1483:48">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="1484:25" pos:end="1484:55"><expr pos:start="1484:25" pos:end="1484:54"><call pos:start="1484:25" pos:end="1484:54"><name pos:start="1484:25" pos:end="1484:45">gen_helper_fldlg2_ST0</name><argument_list pos:start="1484:46" pos:end="1484:54">(<argument pos:start="1484:47" pos:end="1484:53"><expr pos:start="1484:47" pos:end="1484:53"><name pos:start="1484:47" pos:end="1484:53">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break pos:start="1485:25" pos:end="1485:30">break;</break>
                    <case pos:start="1486:21" pos:end="1486:27">case <expr pos:start="1486:26" pos:end="1486:26"><literal type="number" pos:start="1486:26" pos:end="1486:26">5</literal></expr>:</case>
                        <expr_stmt pos:start="1487:25" pos:end="1487:50"><expr pos:start="1487:25" pos:end="1487:49"><call pos:start="1487:25" pos:end="1487:49"><name pos:start="1487:25" pos:end="1487:40">gen_helper_fpush</name><argument_list pos:start="1487:41" pos:end="1487:49">(<argument pos:start="1487:42" pos:end="1487:48"><expr pos:start="1487:42" pos:end="1487:48"><name pos:start="1487:42" pos:end="1487:48">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="1488:25" pos:end="1488:55"><expr pos:start="1488:25" pos:end="1488:54"><call pos:start="1488:25" pos:end="1488:54"><name pos:start="1488:25" pos:end="1488:45">gen_helper_fldln2_ST0</name><argument_list pos:start="1488:46" pos:end="1488:54">(<argument pos:start="1488:47" pos:end="1488:53"><expr pos:start="1488:47" pos:end="1488:53"><name pos:start="1488:47" pos:end="1488:53">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break pos:start="1489:25" pos:end="1489:30">break;</break>
                    <case pos:start="1490:21" pos:end="1490:27">case <expr pos:start="1490:26" pos:end="1490:26"><literal type="number" pos:start="1490:26" pos:end="1490:26">6</literal></expr>:</case>
                        <expr_stmt pos:start="1491:25" pos:end="1491:50"><expr pos:start="1491:25" pos:end="1491:49"><call pos:start="1491:25" pos:end="1491:49"><name pos:start="1491:25" pos:end="1491:40">gen_helper_fpush</name><argument_list pos:start="1491:41" pos:end="1491:49">(<argument pos:start="1491:42" pos:end="1491:48"><expr pos:start="1491:42" pos:end="1491:48"><name pos:start="1491:42" pos:end="1491:48">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="1492:25" pos:end="1492:53"><expr pos:start="1492:25" pos:end="1492:52"><call pos:start="1492:25" pos:end="1492:52"><name pos:start="1492:25" pos:end="1492:43">gen_helper_fldz_ST0</name><argument_list pos:start="1492:44" pos:end="1492:52">(<argument pos:start="1492:45" pos:end="1492:51"><expr pos:start="1492:45" pos:end="1492:51"><name pos:start="1492:45" pos:end="1492:51">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break pos:start="1493:25" pos:end="1493:30">break;</break>
                    <default pos:start="1494:21" pos:end="1494:28">default:</default>
                <break pos:start="1495:17" pos:end="1495:22">break;</break>
            <case pos:start="1496:13" pos:end="1496:22">case <expr pos:start="1496:18" pos:end="1496:21"><literal type="number" pos:start="1496:18" pos:end="1496:21">0x0e</literal></expr>:</case> <comment type="block" pos:start="1496:24" pos:end="1496:37">/* grp d9/6 */</comment>
                <switch pos:start="1497:17" pos:end="3141:17">switch<condition pos:start="1497:23" pos:end="1497:26">(<expr pos:start="1497:24" pos:end="1497:25"><name pos:start="1497:24" pos:end="1497:25">rm</name></expr>)</condition> <block pos:start="1497:28" pos:end="3141:17">{<block_content pos:start="1498:17" pos:end="3141:17">
                <case pos:start="1498:17" pos:end="1498:23">case <expr pos:start="1498:22" pos:end="1498:22"><literal type="number" pos:start="1498:22" pos:end="1498:22">0</literal></expr>:</case> <comment type="block" pos:start="1498:25" pos:end="1498:35">/* f2xm1 */</comment>
                    <expr_stmt pos:start="1499:21" pos:end="1499:46"><expr pos:start="1499:21" pos:end="1499:45"><call pos:start="1499:21" pos:end="1499:45"><name pos:start="1499:21" pos:end="1499:36">gen_helper_f2xm1</name><argument_list pos:start="1499:37" pos:end="1499:45">(<argument pos:start="1499:38" pos:end="1499:44"><expr pos:start="1499:38" pos:end="1499:44"><name pos:start="1499:38" pos:end="1499:44">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:start="1500:21" pos:end="1500:26">break;</break>
                <case pos:start="1501:17" pos:end="1501:23">case <expr pos:start="1501:22" pos:end="1501:22"><literal type="number" pos:start="1501:22" pos:end="1501:22">1</literal></expr>:</case> <comment type="block" pos:start="1501:25" pos:end="1501:35">/* fyl2x */</comment>
                    <expr_stmt pos:start="1502:21" pos:end="1502:46"><expr pos:start="1502:21" pos:end="1502:45"><call pos:start="1502:21" pos:end="1502:45"><name pos:start="1502:21" pos:end="1502:36">gen_helper_fyl2x</name><argument_list pos:start="1502:37" pos:end="1502:45">(<argument pos:start="1502:38" pos:end="1502:44"><expr pos:start="1502:38" pos:end="1502:44"><name pos:start="1502:38" pos:end="1502:44">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:start="1503:21" pos:end="1503:26">break;</break>
                <case pos:start="1504:17" pos:end="1504:23">case <expr pos:start="1504:22" pos:end="1504:22"><literal type="number" pos:start="1504:22" pos:end="1504:22">2</literal></expr>:</case> <comment type="block" pos:start="1504:25" pos:end="1504:35">/* fptan */</comment>
                    <expr_stmt pos:start="1505:21" pos:end="1505:46"><expr pos:start="1505:21" pos:end="1505:45"><call pos:start="1505:21" pos:end="1505:45"><name pos:start="1505:21" pos:end="1505:36">gen_helper_fptan</name><argument_list pos:start="1505:37" pos:end="1505:45">(<argument pos:start="1505:38" pos:end="1505:44"><expr pos:start="1505:38" pos:end="1505:44"><name pos:start="1505:38" pos:end="1505:44">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:start="1506:21" pos:end="1506:26">break;</break>
                <case pos:start="1507:17" pos:end="1507:23">case <expr pos:start="1507:22" pos:end="1507:22"><literal type="number" pos:start="1507:22" pos:end="1507:22">3</literal></expr>:</case> <comment type="block" pos:start="1507:25" pos:end="1507:36">/* fpatan */</comment>
                    <expr_stmt pos:start="1508:21" pos:end="1508:47"><expr pos:start="1508:21" pos:end="1508:46"><call pos:start="1508:21" pos:end="1508:46"><name pos:start="1508:21" pos:end="1508:37">gen_helper_fpatan</name><argument_list pos:start="1508:38" pos:end="1508:46">(<argument pos:start="1508:39" pos:end="1508:45"><expr pos:start="1508:39" pos:end="1508:45"><name pos:start="1508:39" pos:end="1508:45">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:start="1509:21" pos:end="1509:26">break;</break>
                <case pos:start="1510:17" pos:end="1510:23">case <expr pos:start="1510:22" pos:end="1510:22"><literal type="number" pos:start="1510:22" pos:end="1510:22">4</literal></expr>:</case> <comment type="block" pos:start="1510:25" pos:end="1510:37">/* fxtract */</comment>
                    <expr_stmt pos:start="1511:21" pos:end="1511:48"><expr pos:start="1511:21" pos:end="1511:47"><call pos:start="1511:21" pos:end="1511:47"><name pos:start="1511:21" pos:end="1511:38">gen_helper_fxtract</name><argument_list pos:start="1511:39" pos:end="1511:47">(<argument pos:start="1511:40" pos:end="1511:46"><expr pos:start="1511:40" pos:end="1511:46"><name pos:start="1511:40" pos:end="1511:46">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:start="1512:21" pos:end="1512:26">break;</break>
                <case pos:start="1513:17" pos:end="1513:23">case <expr pos:start="1513:22" pos:end="1513:22"><literal type="number" pos:start="1513:22" pos:end="1513:22">5</literal></expr>:</case> <comment type="block" pos:start="1513:25" pos:end="1513:36">/* fprem1 */</comment>
                    <expr_stmt pos:start="1514:21" pos:end="1514:47"><expr pos:start="1514:21" pos:end="1514:46"><call pos:start="1514:21" pos:end="1514:46"><name pos:start="1514:21" pos:end="1514:37">gen_helper_fprem1</name><argument_list pos:start="1514:38" pos:end="1514:46">(<argument pos:start="1514:39" pos:end="1514:45"><expr pos:start="1514:39" pos:end="1514:45"><name pos:start="1514:39" pos:end="1514:45">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:start="1515:21" pos:end="1515:26">break;</break>
                <case pos:start="1516:17" pos:end="1516:23">case <expr pos:start="1516:22" pos:end="1516:22"><literal type="number" pos:start="1516:22" pos:end="1516:22">6</literal></expr>:</case> <comment type="block" pos:start="1516:25" pos:end="1516:37">/* fdecstp */</comment>
                    <expr_stmt pos:start="1517:21" pos:end="1517:48"><expr pos:start="1517:21" pos:end="1517:47"><call pos:start="1517:21" pos:end="1517:47"><name pos:start="1517:21" pos:end="1517:38">gen_helper_fdecstp</name><argument_list pos:start="1517:39" pos:end="1517:47">(<argument pos:start="1517:40" pos:end="1517:46"><expr pos:start="1517:40" pos:end="1517:46"><name pos:start="1517:40" pos:end="1517:46">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:start="1518:21" pos:end="1518:26">break;</break>
                <default pos:start="1519:17" pos:end="1519:24">default:</default>
                <case pos:start="1520:17" pos:end="1520:23">case <expr pos:start="1520:22" pos:end="1520:22"><literal type="number" pos:start="1520:22" pos:end="1520:22">7</literal></expr>:</case> <comment type="block" pos:start="1520:25" pos:end="1520:37">/* fincstp */</comment>
                    <expr_stmt pos:start="1521:21" pos:end="1521:48"><expr pos:start="1521:21" pos:end="1521:47"><call pos:start="1521:21" pos:end="1521:47"><name pos:start="1521:21" pos:end="1521:38">gen_helper_fincstp</name><argument_list pos:start="1521:39" pos:end="1521:47">(<argument pos:start="1521:40" pos:end="1521:46"><expr pos:start="1521:40" pos:end="1521:46"><name pos:start="1521:40" pos:end="1521:46">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:start="1522:21" pos:end="1522:26">break;</break>
                <break pos:start="1523:17" pos:end="1523:22">break;</break>
            <case pos:start="1524:13" pos:end="1524:22">case <expr pos:start="1524:18" pos:end="1524:21"><literal type="number" pos:start="1524:18" pos:end="1524:21">0x0f</literal></expr>:</case> <comment type="block" pos:start="1524:24" pos:end="1524:37">/* grp d9/7 */</comment>
                <switch pos:start="1525:17" pos:end="3141:17">switch<condition pos:start="1525:23" pos:end="1525:26">(<expr pos:start="1525:24" pos:end="1525:25"><name pos:start="1525:24" pos:end="1525:25">rm</name></expr>)</condition> <block pos:start="1525:28" pos:end="3141:17">{<block_content pos:start="1526:17" pos:end="3141:17">
                <case pos:start="1526:17" pos:end="1526:23">case <expr pos:start="1526:22" pos:end="1526:22"><literal type="number" pos:start="1526:22" pos:end="1526:22">0</literal></expr>:</case> <comment type="block" pos:start="1526:25" pos:end="1526:35">/* fprem */</comment>
                    <expr_stmt pos:start="1527:21" pos:end="1527:46"><expr pos:start="1527:21" pos:end="1527:45"><call pos:start="1527:21" pos:end="1527:45"><name pos:start="1527:21" pos:end="1527:36">gen_helper_fprem</name><argument_list pos:start="1527:37" pos:end="1527:45">(<argument pos:start="1527:38" pos:end="1527:44"><expr pos:start="1527:38" pos:end="1527:44"><name pos:start="1527:38" pos:end="1527:44">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:start="1528:21" pos:end="1528:26">break;</break>
                <case pos:start="1529:17" pos:end="1529:23">case <expr pos:start="1529:22" pos:end="1529:22"><literal type="number" pos:start="1529:22" pos:end="1529:22">1</literal></expr>:</case> <comment type="block" pos:start="1529:25" pos:end="1529:37">/* fyl2xp1 */</comment>
                    <expr_stmt pos:start="1530:21" pos:end="1530:48"><expr pos:start="1530:21" pos:end="1530:47"><call pos:start="1530:21" pos:end="1530:47"><name pos:start="1530:21" pos:end="1530:38">gen_helper_fyl2xp1</name><argument_list pos:start="1530:39" pos:end="1530:47">(<argument pos:start="1530:40" pos:end="1530:46"><expr pos:start="1530:40" pos:end="1530:46"><name pos:start="1530:40" pos:end="1530:46">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:start="1531:21" pos:end="1531:26">break;</break>
                <case pos:start="1532:17" pos:end="1532:23">case <expr pos:start="1532:22" pos:end="1532:22"><literal type="number" pos:start="1532:22" pos:end="1532:22">2</literal></expr>:</case> <comment type="block" pos:start="1532:25" pos:end="1532:35">/* fsqrt */</comment>
                    <expr_stmt pos:start="1533:21" pos:end="1533:46"><expr pos:start="1533:21" pos:end="1533:45"><call pos:start="1533:21" pos:end="1533:45"><name pos:start="1533:21" pos:end="1533:36">gen_helper_fsqrt</name><argument_list pos:start="1533:37" pos:end="1533:45">(<argument pos:start="1533:38" pos:end="1533:44"><expr pos:start="1533:38" pos:end="1533:44"><name pos:start="1533:38" pos:end="1533:44">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:start="1534:21" pos:end="1534:26">break;</break>
                <case pos:start="1535:17" pos:end="1535:23">case <expr pos:start="1535:22" pos:end="1535:22"><literal type="number" pos:start="1535:22" pos:end="1535:22">3</literal></expr>:</case> <comment type="block" pos:start="1535:25" pos:end="1535:37">/* fsincos */</comment>
                    <expr_stmt pos:start="1536:21" pos:end="1536:48"><expr pos:start="1536:21" pos:end="1536:47"><call pos:start="1536:21" pos:end="1536:47"><name pos:start="1536:21" pos:end="1536:38">gen_helper_fsincos</name><argument_list pos:start="1536:39" pos:end="1536:47">(<argument pos:start="1536:40" pos:end="1536:46"><expr pos:start="1536:40" pos:end="1536:46"><name pos:start="1536:40" pos:end="1536:46">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:start="1537:21" pos:end="1537:26">break;</break>
                <case pos:start="1538:17" pos:end="1538:23">case <expr pos:start="1538:22" pos:end="1538:22"><literal type="number" pos:start="1538:22" pos:end="1538:22">5</literal></expr>:</case> <comment type="block" pos:start="1538:25" pos:end="1538:36">/* fscale */</comment>
                    <expr_stmt pos:start="1539:21" pos:end="1539:47"><expr pos:start="1539:21" pos:end="1539:46"><call pos:start="1539:21" pos:end="1539:46"><name pos:start="1539:21" pos:end="1539:37">gen_helper_fscale</name><argument_list pos:start="1539:38" pos:end="1539:46">(<argument pos:start="1539:39" pos:end="1539:45"><expr pos:start="1539:39" pos:end="1539:45"><name pos:start="1539:39" pos:end="1539:45">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:start="1540:21" pos:end="1540:26">break;</break>
                <case pos:start="1541:17" pos:end="1541:23">case <expr pos:start="1541:22" pos:end="1541:22"><literal type="number" pos:start="1541:22" pos:end="1541:22">4</literal></expr>:</case> <comment type="block" pos:start="1541:25" pos:end="1541:37">/* frndint */</comment>
                    <expr_stmt pos:start="1542:21" pos:end="1542:48"><expr pos:start="1542:21" pos:end="1542:47"><call pos:start="1542:21" pos:end="1542:47"><name pos:start="1542:21" pos:end="1542:38">gen_helper_frndint</name><argument_list pos:start="1542:39" pos:end="1542:47">(<argument pos:start="1542:40" pos:end="1542:46"><expr pos:start="1542:40" pos:end="1542:46"><name pos:start="1542:40" pos:end="1542:46">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:start="1543:21" pos:end="1543:26">break;</break>
                <case pos:start="1544:17" pos:end="1544:23">case <expr pos:start="1544:22" pos:end="1544:22"><literal type="number" pos:start="1544:22" pos:end="1544:22">6</literal></expr>:</case> <comment type="block" pos:start="1544:25" pos:end="1544:34">/* fsin */</comment>
                    <expr_stmt pos:start="1545:21" pos:end="1545:45"><expr pos:start="1545:21" pos:end="1545:44"><call pos:start="1545:21" pos:end="1545:44"><name pos:start="1545:21" pos:end="1545:35">gen_helper_fsin</name><argument_list pos:start="1545:36" pos:end="1545:44">(<argument pos:start="1545:37" pos:end="1545:43"><expr pos:start="1545:37" pos:end="1545:43"><name pos:start="1545:37" pos:end="1545:43">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:start="1546:21" pos:end="1546:26">break;</break>
                <default pos:start="1547:17" pos:end="1547:24">default:</default>
                <case pos:start="1548:17" pos:end="1548:23">case <expr pos:start="1548:22" pos:end="1548:22"><literal type="number" pos:start="1548:22" pos:end="1548:22">7</literal></expr>:</case> <comment type="block" pos:start="1548:25" pos:end="1548:34">/* fcos */</comment>
                    <expr_stmt pos:start="1549:21" pos:end="1549:45"><expr pos:start="1549:21" pos:end="1549:44"><call pos:start="1549:21" pos:end="1549:44"><name pos:start="1549:21" pos:end="1549:35">gen_helper_fcos</name><argument_list pos:start="1549:36" pos:end="1549:44">(<argument pos:start="1549:37" pos:end="1549:43"><expr pos:start="1549:37" pos:end="1549:43"><name pos:start="1549:37" pos:end="1549:43">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:start="1550:21" pos:end="1550:26">break;</break>
                <break pos:start="1551:17" pos:end="1551:22">break;</break>
            <case pos:start="1552:13" pos:end="1552:22">case <expr pos:start="1552:18" pos:end="1552:21"><literal type="number" pos:start="1552:18" pos:end="1552:21">0x00</literal></expr>:</case> <case pos:start="1552:24" pos:end="1552:33">case <expr pos:start="1552:29" pos:end="1552:32"><literal type="number" pos:start="1552:29" pos:end="1552:32">0x01</literal></expr>:</case> <case pos:start="1552:35" pos:end="1552:53">case <expr pos:start="1552:40" pos:end="1552:52"><literal type="number" pos:start="1552:40" pos:end="1552:43">0x04</literal> <operator pos:start="1552:45" pos:end="1552:47">...</operator> <literal type="number" pos:start="1552:49" pos:end="1552:52">0x07</literal></expr>:</case> <comment type="block" pos:start="1552:55" pos:end="1552:72">/* fxxx st, sti */</comment>
            <case pos:start="1553:13" pos:end="1553:22">case <expr pos:start="1553:18" pos:end="1553:21"><literal type="number" pos:start="1553:18" pos:end="1553:21">0x20</literal></expr>:</case> <case pos:start="1553:24" pos:end="1553:33">case <expr pos:start="1553:29" pos:end="1553:32"><literal type="number" pos:start="1553:29" pos:end="1553:32">0x21</literal></expr>:</case> <case pos:start="1553:35" pos:end="1553:53">case <expr pos:start="1553:40" pos:end="1553:52"><literal type="number" pos:start="1553:40" pos:end="1553:43">0x24</literal> <operator pos:start="1553:45" pos:end="1553:47">...</operator> <literal type="number" pos:start="1553:49" pos:end="1553:52">0x27</literal></expr>:</case> <comment type="block" pos:start="1553:55" pos:end="1553:72">/* fxxx sti, st */</comment>
            <case pos:start="1554:13" pos:end="1554:22">case <expr pos:start="1554:18" pos:end="1554:21"><literal type="number" pos:start="1554:18" pos:end="1554:21">0x30</literal></expr>:</case> <case pos:start="1554:24" pos:end="1554:33">case <expr pos:start="1554:29" pos:end="1554:32"><literal type="number" pos:start="1554:29" pos:end="1554:32">0x31</literal></expr>:</case> <case pos:start="1554:35" pos:end="1554:53">case <expr pos:start="1554:40" pos:end="1554:52"><literal type="number" pos:start="1554:40" pos:end="1554:43">0x34</literal> <operator pos:start="1554:45" pos:end="1554:47">...</operator> <literal type="number" pos:start="1554:49" pos:end="1554:52">0x37</literal></expr>:</case> <comment type="block" pos:start="1554:55" pos:end="1554:73">/* fxxxp sti, st */</comment>
                <block pos:start="1555:17" pos:end="3141:17">{<block_content pos:start="1556:21" pos:end="3141:17">
                    <decl_stmt pos:start="1556:21" pos:end="1556:28"><decl pos:start="1556:21" pos:end="1556:27"><type pos:start="1556:21" pos:end="1556:23"><name pos:start="1556:21" pos:end="1556:23">int</name></type> <name pos:start="1556:25" pos:end="1556:27">op1</name></decl>;</decl_stmt>
                    <expr_stmt pos:start="1557:21" pos:end="1557:33"><expr pos:start="1557:21" pos:end="1557:32"><name pos:start="1557:21" pos:end="1557:23">op1</name> <operator pos:start="1557:25" pos:end="1557:25">=</operator> <name pos:start="1557:27" pos:end="1557:28">op</name> <operator pos:start="1557:30" pos:end="1557:30">&amp;</operator> <literal type="number" pos:start="1557:32" pos:end="1557:32">7</literal></expr>;</expr_stmt>
                    <if_stmt pos:start="1558:21" pos:end="3141:17"><if pos:start="1558:21" pos:end="1562:21">if <condition pos:start="1558:24" pos:end="1558:35">(<expr pos:start="1558:25" pos:end="1558:34"><name pos:start="1558:25" pos:end="1558:26">op</name> <operator pos:start="1558:28" pos:end="1558:29">&gt;=</operator> <literal type="number" pos:start="1558:31" pos:end="1558:34">0x20</literal></expr>)</condition> <block pos:start="1558:37" pos:end="1562:21">{<block_content pos:start="1559:25" pos:end="1561:53">
                        <expr_stmt pos:start="1559:25" pos:end="1559:64"><expr pos:start="1559:25" pos:end="1559:63"><call pos:start="1559:25" pos:end="1559:63"><name pos:start="1559:25" pos:end="1559:51">gen_helper_fp_arith_STN_ST0</name><argument_list pos:start="1559:52" pos:end="1559:63">(<argument pos:start="1559:53" pos:end="1559:55"><expr pos:start="1559:53" pos:end="1559:55"><name pos:start="1559:53" pos:end="1559:55">op1</name></expr></argument>, <argument pos:start="1559:58" pos:end="1559:62"><expr pos:start="1559:58" pos:end="1559:62"><name pos:start="1559:58" pos:end="1559:62">opreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if_stmt pos:start="1560:25" pos:end="1561:53"><if pos:start="1560:25" pos:end="1561:53">if <condition pos:start="1560:28" pos:end="1560:39">(<expr pos:start="1560:29" pos:end="1560:38"><name pos:start="1560:29" pos:end="1560:30">op</name> <operator pos:start="1560:32" pos:end="1560:33">&gt;=</operator> <literal type="number" pos:start="1560:35" pos:end="1560:38">0x30</literal></expr>)</condition><block type="pseudo" pos:start="1561:29" pos:end="1561:53"><block_content pos:start="1561:29" pos:end="1561:53">
                            <expr_stmt pos:start="1561:29" pos:end="1561:53"><expr pos:start="1561:29" pos:end="1561:52"><call pos:start="1561:29" pos:end="1561:52"><name pos:start="1561:29" pos:end="1561:43">gen_helper_fpop</name><argument_list pos:start="1561:44" pos:end="1561:52">(<argument pos:start="1561:45" pos:end="1561:51"><expr pos:start="1561:45" pos:end="1561:51"><name pos:start="1561:45" pos:end="1561:51">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    </block_content>}</block></if> <else pos:start="1562:23" pos:end="3141:17">else <block pos:start="1562:28" pos:end="3141:17">{<block_content pos:start="1563:25" pos:end="3141:17">
                        <expr_stmt pos:start="1563:25" pos:end="1563:79"><expr pos:start="1563:25" pos:end="1563:78"><call pos:start="1563:25" pos:end="1563:78"><name pos:start="1563:25" pos:end="1563:47">gen_helper_fmov_FT0_STN</name><argument_list pos:start="1563:48" pos:end="1563:78">(<argument pos:start="1563:49" pos:end="1563:55"><expr pos:start="1563:49" pos:end="1563:55"><name pos:start="1563:49" pos:end="1563:55">cpu_env</name></expr></argument>, <argument pos:start="1563:58" pos:end="1563:77"><expr pos:start="1563:58" pos:end="1563:77"><call pos:start="1563:58" pos:end="1563:77"><name pos:start="1563:58" pos:end="1563:70">tcg_const_i32</name><argument_list pos:start="1563:71" pos:end="1563:77">(<argument pos:start="1563:72" pos:end="1563:76"><expr pos:start="1563:72" pos:end="1563:76"><name pos:start="1563:72" pos:end="1563:76">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="1564:25" pos:end="1564:57"><expr pos:start="1564:25" pos:end="1564:56"><call pos:start="1564:25" pos:end="1564:56"><name pos:start="1564:25" pos:end="1564:51">gen_helper_fp_arith_ST0_FT0</name><argument_list pos:start="1564:52" pos:end="1564:56">(<argument pos:start="1564:53" pos:end="1564:55"><expr pos:start="1564:53" pos:end="1564:55"><name pos:start="1564:53" pos:end="1564:55">op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="1565:17" pos:end="1565:22">break;</break>
            <case pos:start="1566:13" pos:end="1566:22">case <expr pos:start="1566:18" pos:end="1566:21"><literal type="number" pos:start="1566:18" pos:end="1566:21">0x02</literal></expr>:</case> <comment type="block" pos:start="1566:24" pos:end="1566:33">/* fcom */</comment>
            <case pos:start="1567:13" pos:end="1567:22">case <expr pos:start="1567:18" pos:end="1567:21"><literal type="number" pos:start="1567:18" pos:end="1567:21">0x22</literal></expr>:</case> <comment type="block" pos:start="1567:24" pos:end="1567:51">/* fcom2, undocumented op */</comment>
                <expr_stmt pos:start="1568:17" pos:end="1568:71"><expr pos:start="1568:17" pos:end="1568:70"><call pos:start="1568:17" pos:end="1568:70"><name pos:start="1568:17" pos:end="1568:39">gen_helper_fmov_FT0_STN</name><argument_list pos:start="1568:40" pos:end="1568:70">(<argument pos:start="1568:41" pos:end="1568:47"><expr pos:start="1568:41" pos:end="1568:47"><name pos:start="1568:41" pos:end="1568:47">cpu_env</name></expr></argument>, <argument pos:start="1568:50" pos:end="1568:69"><expr pos:start="1568:50" pos:end="1568:69"><call pos:start="1568:50" pos:end="1568:69"><name pos:start="1568:50" pos:end="1568:62">tcg_const_i32</name><argument_list pos:start="1568:63" pos:end="1568:69">(<argument pos:start="1568:64" pos:end="1568:68"><expr pos:start="1568:64" pos:end="1568:68"><name pos:start="1568:64" pos:end="1568:68">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1569:17" pos:end="1569:49"><expr pos:start="1569:17" pos:end="1569:48"><call pos:start="1569:17" pos:end="1569:48"><name pos:start="1569:17" pos:end="1569:39">gen_helper_fcom_ST0_FT0</name><argument_list pos:start="1569:40" pos:end="1569:48">(<argument pos:start="1569:41" pos:end="1569:47"><expr pos:start="1569:41" pos:end="1569:47"><name pos:start="1569:41" pos:end="1569:47">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="1570:17" pos:end="1570:22">break;</break>
            <case pos:start="1571:13" pos:end="1571:22">case <expr pos:start="1571:18" pos:end="1571:21"><literal type="number" pos:start="1571:18" pos:end="1571:21">0x03</literal></expr>:</case> <comment type="block" pos:start="1571:24" pos:end="1571:34">/* fcomp */</comment>
            <case pos:start="1572:13" pos:end="1572:22">case <expr pos:start="1572:18" pos:end="1572:21"><literal type="number" pos:start="1572:18" pos:end="1572:21">0x23</literal></expr>:</case> <comment type="block" pos:start="1572:24" pos:end="1572:52">/* fcomp3, undocumented op */</comment>
            <case pos:start="1573:13" pos:end="1573:22">case <expr pos:start="1573:18" pos:end="1573:21"><literal type="number" pos:start="1573:18" pos:end="1573:21">0x32</literal></expr>:</case> <comment type="block" pos:start="1573:24" pos:end="1573:52">/* fcomp5, undocumented op */</comment>
                <expr_stmt pos:start="1574:17" pos:end="1574:71"><expr pos:start="1574:17" pos:end="1574:70"><call pos:start="1574:17" pos:end="1574:70"><name pos:start="1574:17" pos:end="1574:39">gen_helper_fmov_FT0_STN</name><argument_list pos:start="1574:40" pos:end="1574:70">(<argument pos:start="1574:41" pos:end="1574:47"><expr pos:start="1574:41" pos:end="1574:47"><name pos:start="1574:41" pos:end="1574:47">cpu_env</name></expr></argument>, <argument pos:start="1574:50" pos:end="1574:69"><expr pos:start="1574:50" pos:end="1574:69"><call pos:start="1574:50" pos:end="1574:69"><name pos:start="1574:50" pos:end="1574:62">tcg_const_i32</name><argument_list pos:start="1574:63" pos:end="1574:69">(<argument pos:start="1574:64" pos:end="1574:68"><expr pos:start="1574:64" pos:end="1574:68"><name pos:start="1574:64" pos:end="1574:68">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1575:17" pos:end="1575:49"><expr pos:start="1575:17" pos:end="1575:48"><call pos:start="1575:17" pos:end="1575:48"><name pos:start="1575:17" pos:end="1575:39">gen_helper_fcom_ST0_FT0</name><argument_list pos:start="1575:40" pos:end="1575:48">(<argument pos:start="1575:41" pos:end="1575:47"><expr pos:start="1575:41" pos:end="1575:47"><name pos:start="1575:41" pos:end="1575:47">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1576:17" pos:end="1576:41"><expr pos:start="1576:17" pos:end="1576:40"><call pos:start="1576:17" pos:end="1576:40"><name pos:start="1576:17" pos:end="1576:31">gen_helper_fpop</name><argument_list pos:start="1576:32" pos:end="1576:40">(<argument pos:start="1576:33" pos:end="1576:39"><expr pos:start="1576:33" pos:end="1576:39"><name pos:start="1576:33" pos:end="1576:39">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="1577:17" pos:end="1577:22">break;</break>
            <case pos:start="1578:13" pos:end="1578:22">case <expr pos:start="1578:18" pos:end="1578:21"><literal type="number" pos:start="1578:18" pos:end="1578:21">0x15</literal></expr>:</case> <comment type="block" pos:start="1578:24" pos:end="1578:33">/* da/5 */</comment>
                <switch pos:start="1579:17" pos:end="3141:17">switch<condition pos:start="1579:23" pos:end="1579:26">(<expr pos:start="1579:24" pos:end="1579:25"><name pos:start="1579:24" pos:end="1579:25">rm</name></expr>)</condition> <block pos:start="1579:28" pos:end="3141:17">{<block_content pos:start="1580:17" pos:end="3141:17">
                <case pos:start="1580:17" pos:end="1580:23">case <expr pos:start="1580:22" pos:end="1580:22"><literal type="number" pos:start="1580:22" pos:end="1580:22">1</literal></expr>:</case> <comment type="block" pos:start="1580:25" pos:end="1580:37">/* fucompp */</comment>
                    <expr_stmt pos:start="1581:21" pos:end="1581:71"><expr pos:start="1581:21" pos:end="1581:70"><call pos:start="1581:21" pos:end="1581:70"><name pos:start="1581:21" pos:end="1581:43">gen_helper_fmov_FT0_STN</name><argument_list pos:start="1581:44" pos:end="1581:70">(<argument pos:start="1581:45" pos:end="1581:51"><expr pos:start="1581:45" pos:end="1581:51"><name pos:start="1581:45" pos:end="1581:51">cpu_env</name></expr></argument>, <argument pos:start="1581:54" pos:end="1581:69"><expr pos:start="1581:54" pos:end="1581:69"><call pos:start="1581:54" pos:end="1581:69"><name pos:start="1581:54" pos:end="1581:66">tcg_const_i32</name><argument_list pos:start="1581:67" pos:end="1581:69">(<argument pos:start="1581:68" pos:end="1581:68"><expr pos:start="1581:68" pos:end="1581:68"><literal type="number" pos:start="1581:68" pos:end="1581:68">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="1582:21" pos:end="1582:54"><expr pos:start="1582:21" pos:end="1582:53"><call pos:start="1582:21" pos:end="1582:53"><name pos:start="1582:21" pos:end="1582:44">gen_helper_fucom_ST0_FT0</name><argument_list pos:start="1582:45" pos:end="1582:53">(<argument pos:start="1582:46" pos:end="1582:52"><expr pos:start="1582:46" pos:end="1582:52"><name pos:start="1582:46" pos:end="1582:52">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="1583:21" pos:end="1583:45"><expr pos:start="1583:21" pos:end="1583:44"><call pos:start="1583:21" pos:end="1583:44"><name pos:start="1583:21" pos:end="1583:35">gen_helper_fpop</name><argument_list pos:start="1583:36" pos:end="1583:44">(<argument pos:start="1583:37" pos:end="1583:43"><expr pos:start="1583:37" pos:end="1583:43"><name pos:start="1583:37" pos:end="1583:43">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="1584:21" pos:end="1584:45"><expr pos:start="1584:21" pos:end="1584:44"><call pos:start="1584:21" pos:end="1584:44"><name pos:start="1584:21" pos:end="1584:35">gen_helper_fpop</name><argument_list pos:start="1584:36" pos:end="1584:44">(<argument pos:start="1584:37" pos:end="1584:43"><expr pos:start="1584:37" pos:end="1584:43"><name pos:start="1584:37" pos:end="1584:43">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:start="1585:21" pos:end="1585:26">break;</break>
                <default pos:start="1586:17" pos:end="1586:24">default:</default>
                <break pos:start="1587:17" pos:end="1587:22">break;</break>
            <case pos:start="1588:13" pos:end="1588:22">case <expr pos:start="1588:18" pos:end="1588:21"><literal type="number" pos:start="1588:18" pos:end="1588:21">0x1c</literal></expr>:</case>
                <switch pos:start="1589:17" pos:end="3141:17">switch<condition pos:start="1589:23" pos:end="1589:26">(<expr pos:start="1589:24" pos:end="1589:25"><name pos:start="1589:24" pos:end="1589:25">rm</name></expr>)</condition> <block pos:start="1589:28" pos:end="3141:17">{<block_content pos:start="1590:17" pos:end="3141:17">
                <case pos:start="1590:17" pos:end="1590:23">case <expr pos:start="1590:22" pos:end="1590:22"><literal type="number" pos:start="1590:22" pos:end="1590:22">0</literal></expr>:</case> <comment type="block" pos:start="1590:25" pos:end="1590:63">/* feni (287 only, just do nop here) */</comment>
                    <break pos:start="1591:21" pos:end="1591:26">break;</break>
                <case pos:start="1592:17" pos:end="1592:23">case <expr pos:start="1592:22" pos:end="1592:22"><literal type="number" pos:start="1592:22" pos:end="1592:22">1</literal></expr>:</case> <comment type="block" pos:start="1592:25" pos:end="1592:64">/* fdisi (287 only, just do nop here) */</comment>
                    <break pos:start="1593:21" pos:end="1593:26">break;</break>
                <case pos:start="1594:17" pos:end="1594:23">case <expr pos:start="1594:22" pos:end="1594:22"><literal type="number" pos:start="1594:22" pos:end="1594:22">2</literal></expr>:</case> <comment type="block" pos:start="1594:25" pos:end="1594:35">/* fclex */</comment>
                    <expr_stmt pos:start="1595:21" pos:end="1595:46"><expr pos:start="1595:21" pos:end="1595:45"><call pos:start="1595:21" pos:end="1595:45"><name pos:start="1595:21" pos:end="1595:36">gen_helper_fclex</name><argument_list pos:start="1595:37" pos:end="1595:45">(<argument pos:start="1595:38" pos:end="1595:44"><expr pos:start="1595:38" pos:end="1595:44"><name pos:start="1595:38" pos:end="1595:44">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:start="1596:21" pos:end="1596:26">break;</break>
                <case pos:start="1597:17" pos:end="1597:23">case <expr pos:start="1597:22" pos:end="1597:22"><literal type="number" pos:start="1597:22" pos:end="1597:22">3</literal></expr>:</case> <comment type="block" pos:start="1597:25" pos:end="1597:36">/* fninit */</comment>
                    <expr_stmt pos:start="1598:21" pos:end="1598:47"><expr pos:start="1598:21" pos:end="1598:46"><call pos:start="1598:21" pos:end="1598:46"><name pos:start="1598:21" pos:end="1598:37">gen_helper_fninit</name><argument_list pos:start="1598:38" pos:end="1598:46">(<argument pos:start="1598:39" pos:end="1598:45"><expr pos:start="1598:39" pos:end="1598:45"><name pos:start="1598:39" pos:end="1598:45">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:start="1599:21" pos:end="1599:26">break;</break>
                <case pos:start="1600:17" pos:end="1600:23">case <expr pos:start="1600:22" pos:end="1600:22"><literal type="number" pos:start="1600:22" pos:end="1600:22">4</literal></expr>:</case> <comment type="block" pos:start="1600:25" pos:end="1600:65">/* fsetpm (287 only, just do nop here) */</comment>
                    <break pos:start="1601:21" pos:end="1601:26">break;</break>
                <default pos:start="1602:17" pos:end="1602:24">default:</default>
                <break pos:start="1603:17" pos:end="1603:22">break;</break>
            <case pos:start="1604:13" pos:end="1604:22">case <expr pos:start="1604:18" pos:end="1604:21"><literal type="number" pos:start="1604:18" pos:end="1604:21">0x1d</literal></expr>:</case> <comment type="block" pos:start="1604:24" pos:end="1604:35">/* fucomi */</comment>
                <expr_stmt pos:start="1605:17" pos:end="1605:36"><expr pos:start="1605:17" pos:end="1605:35"><call pos:start="1605:17" pos:end="1605:35"><name pos:start="1605:17" pos:end="1605:32">gen_update_cc_op</name><argument_list pos:start="1605:33" pos:end="1605:35">(<argument pos:start="1605:34" pos:end="1605:34"><expr pos:start="1605:34" pos:end="1605:34"><name pos:start="1605:34" pos:end="1605:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1606:17" pos:end="1606:71"><expr pos:start="1606:17" pos:end="1606:70"><call pos:start="1606:17" pos:end="1606:70"><name pos:start="1606:17" pos:end="1606:39">gen_helper_fmov_FT0_STN</name><argument_list pos:start="1606:40" pos:end="1606:70">(<argument pos:start="1606:41" pos:end="1606:47"><expr pos:start="1606:41" pos:end="1606:47"><name pos:start="1606:41" pos:end="1606:47">cpu_env</name></expr></argument>, <argument pos:start="1606:50" pos:end="1606:69"><expr pos:start="1606:50" pos:end="1606:69"><call pos:start="1606:50" pos:end="1606:69"><name pos:start="1606:50" pos:end="1606:62">tcg_const_i32</name><argument_list pos:start="1606:63" pos:end="1606:69">(<argument pos:start="1606:64" pos:end="1606:68"><expr pos:start="1606:64" pos:end="1606:68"><name pos:start="1606:64" pos:end="1606:68">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1607:17" pos:end="1607:51"><expr pos:start="1607:17" pos:end="1607:50"><call pos:start="1607:17" pos:end="1607:50"><name pos:start="1607:17" pos:end="1607:41">gen_helper_fucomi_ST0_FT0</name><argument_list pos:start="1607:42" pos:end="1607:50">(<argument pos:start="1607:43" pos:end="1607:49"><expr pos:start="1607:43" pos:end="1607:49"><name pos:start="1607:43" pos:end="1607:49">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1608:17" pos:end="1608:43"><expr pos:start="1608:17" pos:end="1608:42"><call pos:start="1608:17" pos:end="1608:42"><name pos:start="1608:17" pos:end="1608:25">set_cc_op</name><argument_list pos:start="1608:26" pos:end="1608:42">(<argument pos:start="1608:27" pos:end="1608:27"><expr pos:start="1608:27" pos:end="1608:27"><name pos:start="1608:27" pos:end="1608:27">s</name></expr></argument>, <argument pos:start="1608:30" pos:end="1608:41"><expr pos:start="1608:30" pos:end="1608:41"><name pos:start="1608:30" pos:end="1608:41">CC_OP_EFLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="1609:17" pos:end="1609:22">break;</break>
            <case pos:start="1610:13" pos:end="1610:22">case <expr pos:start="1610:18" pos:end="1610:21"><literal type="number" pos:start="1610:18" pos:end="1610:21">0x1e</literal></expr>:</case> <comment type="block" pos:start="1610:24" pos:end="1610:34">/* fcomi */</comment>
                <expr_stmt pos:start="1611:17" pos:end="1611:36"><expr pos:start="1611:17" pos:end="1611:35"><call pos:start="1611:17" pos:end="1611:35"><name pos:start="1611:17" pos:end="1611:32">gen_update_cc_op</name><argument_list pos:start="1611:33" pos:end="1611:35">(<argument pos:start="1611:34" pos:end="1611:34"><expr pos:start="1611:34" pos:end="1611:34"><name pos:start="1611:34" pos:end="1611:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1612:17" pos:end="1612:71"><expr pos:start="1612:17" pos:end="1612:70"><call pos:start="1612:17" pos:end="1612:70"><name pos:start="1612:17" pos:end="1612:39">gen_helper_fmov_FT0_STN</name><argument_list pos:start="1612:40" pos:end="1612:70">(<argument pos:start="1612:41" pos:end="1612:47"><expr pos:start="1612:41" pos:end="1612:47"><name pos:start="1612:41" pos:end="1612:47">cpu_env</name></expr></argument>, <argument pos:start="1612:50" pos:end="1612:69"><expr pos:start="1612:50" pos:end="1612:69"><call pos:start="1612:50" pos:end="1612:69"><name pos:start="1612:50" pos:end="1612:62">tcg_const_i32</name><argument_list pos:start="1612:63" pos:end="1612:69">(<argument pos:start="1612:64" pos:end="1612:68"><expr pos:start="1612:64" pos:end="1612:68"><name pos:start="1612:64" pos:end="1612:68">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1613:17" pos:end="1613:50"><expr pos:start="1613:17" pos:end="1613:49"><call pos:start="1613:17" pos:end="1613:49"><name pos:start="1613:17" pos:end="1613:40">gen_helper_fcomi_ST0_FT0</name><argument_list pos:start="1613:41" pos:end="1613:49">(<argument pos:start="1613:42" pos:end="1613:48"><expr pos:start="1613:42" pos:end="1613:48"><name pos:start="1613:42" pos:end="1613:48">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1614:17" pos:end="1614:43"><expr pos:start="1614:17" pos:end="1614:42"><call pos:start="1614:17" pos:end="1614:42"><name pos:start="1614:17" pos:end="1614:25">set_cc_op</name><argument_list pos:start="1614:26" pos:end="1614:42">(<argument pos:start="1614:27" pos:end="1614:27"><expr pos:start="1614:27" pos:end="1614:27"><name pos:start="1614:27" pos:end="1614:27">s</name></expr></argument>, <argument pos:start="1614:30" pos:end="1614:41"><expr pos:start="1614:30" pos:end="1614:41"><name pos:start="1614:30" pos:end="1614:41">CC_OP_EFLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="1615:17" pos:end="1615:22">break;</break>
            <case pos:start="1616:13" pos:end="1616:22">case <expr pos:start="1616:18" pos:end="1616:21"><literal type="number" pos:start="1616:18" pos:end="1616:21">0x28</literal></expr>:</case> <comment type="block" pos:start="1616:24" pos:end="1616:38">/* ffree sti */</comment>
                <expr_stmt pos:start="1617:17" pos:end="1617:68"><expr pos:start="1617:17" pos:end="1617:67"><call pos:start="1617:17" pos:end="1617:67"><name pos:start="1617:17" pos:end="1617:36">gen_helper_ffree_STN</name><argument_list pos:start="1617:37" pos:end="1617:67">(<argument pos:start="1617:38" pos:end="1617:44"><expr pos:start="1617:38" pos:end="1617:44"><name pos:start="1617:38" pos:end="1617:44">cpu_env</name></expr></argument>, <argument pos:start="1617:47" pos:end="1617:66"><expr pos:start="1617:47" pos:end="1617:66"><call pos:start="1617:47" pos:end="1617:66"><name pos:start="1617:47" pos:end="1617:59">tcg_const_i32</name><argument_list pos:start="1617:60" pos:end="1617:66">(<argument pos:start="1617:61" pos:end="1617:65"><expr pos:start="1617:61" pos:end="1617:65"><name pos:start="1617:61" pos:end="1617:65">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="1618:17" pos:end="1618:22">break;</break>
            <case pos:start="1619:13" pos:end="1619:22">case <expr pos:start="1619:18" pos:end="1619:21"><literal type="number" pos:start="1619:18" pos:end="1619:21">0x2a</literal></expr>:</case> <comment type="block" pos:start="1619:24" pos:end="1619:36">/* fst sti */</comment>
                <expr_stmt pos:start="1620:17" pos:end="1620:71"><expr pos:start="1620:17" pos:end="1620:70"><call pos:start="1620:17" pos:end="1620:70"><name pos:start="1620:17" pos:end="1620:39">gen_helper_fmov_STN_ST0</name><argument_list pos:start="1620:40" pos:end="1620:70">(<argument pos:start="1620:41" pos:end="1620:47"><expr pos:start="1620:41" pos:end="1620:47"><name pos:start="1620:41" pos:end="1620:47">cpu_env</name></expr></argument>, <argument pos:start="1620:50" pos:end="1620:69"><expr pos:start="1620:50" pos:end="1620:69"><call pos:start="1620:50" pos:end="1620:69"><name pos:start="1620:50" pos:end="1620:62">tcg_const_i32</name><argument_list pos:start="1620:63" pos:end="1620:69">(<argument pos:start="1620:64" pos:end="1620:68"><expr pos:start="1620:64" pos:end="1620:68"><name pos:start="1620:64" pos:end="1620:68">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="1621:17" pos:end="1621:22">break;</break>
            <case pos:start="1622:13" pos:end="1622:22">case <expr pos:start="1622:18" pos:end="1622:21"><literal type="number" pos:start="1622:18" pos:end="1622:21">0x2b</literal></expr>:</case> <comment type="block" pos:start="1622:24" pos:end="1622:37">/* fstp sti */</comment>
            <case pos:start="1623:13" pos:end="1623:22">case <expr pos:start="1623:18" pos:end="1623:21"><literal type="number" pos:start="1623:18" pos:end="1623:21">0x0b</literal></expr>:</case> <comment type="block" pos:start="1623:24" pos:end="1623:55">/* fstp1 sti, undocumented op */</comment>
            <case pos:start="1624:13" pos:end="1624:22">case <expr pos:start="1624:18" pos:end="1624:21"><literal type="number" pos:start="1624:18" pos:end="1624:21">0x3a</literal></expr>:</case> <comment type="block" pos:start="1624:24" pos:end="1624:55">/* fstp8 sti, undocumented op */</comment>
            <case pos:start="1625:13" pos:end="1625:22">case <expr pos:start="1625:18" pos:end="1625:21"><literal type="number" pos:start="1625:18" pos:end="1625:21">0x3b</literal></expr>:</case> <comment type="block" pos:start="1625:24" pos:end="1625:55">/* fstp9 sti, undocumented op */</comment>
                <expr_stmt pos:start="1626:17" pos:end="1626:71"><expr pos:start="1626:17" pos:end="1626:70"><call pos:start="1626:17" pos:end="1626:70"><name pos:start="1626:17" pos:end="1626:39">gen_helper_fmov_STN_ST0</name><argument_list pos:start="1626:40" pos:end="1626:70">(<argument pos:start="1626:41" pos:end="1626:47"><expr pos:start="1626:41" pos:end="1626:47"><name pos:start="1626:41" pos:end="1626:47">cpu_env</name></expr></argument>, <argument pos:start="1626:50" pos:end="1626:69"><expr pos:start="1626:50" pos:end="1626:69"><call pos:start="1626:50" pos:end="1626:69"><name pos:start="1626:50" pos:end="1626:62">tcg_const_i32</name><argument_list pos:start="1626:63" pos:end="1626:69">(<argument pos:start="1626:64" pos:end="1626:68"><expr pos:start="1626:64" pos:end="1626:68"><name pos:start="1626:64" pos:end="1626:68">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1627:17" pos:end="1627:41"><expr pos:start="1627:17" pos:end="1627:40"><call pos:start="1627:17" pos:end="1627:40"><name pos:start="1627:17" pos:end="1627:31">gen_helper_fpop</name><argument_list pos:start="1627:32" pos:end="1627:40">(<argument pos:start="1627:33" pos:end="1627:39"><expr pos:start="1627:33" pos:end="1627:39"><name pos:start="1627:33" pos:end="1627:39">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="1628:17" pos:end="1628:22">break;</break>
            <case pos:start="1629:13" pos:end="1629:22">case <expr pos:start="1629:18" pos:end="1629:21"><literal type="number" pos:start="1629:18" pos:end="1629:21">0x2c</literal></expr>:</case> <comment type="block" pos:start="1629:24" pos:end="1629:40">/* fucom st(i) */</comment>
                <expr_stmt pos:start="1630:17" pos:end="1630:71"><expr pos:start="1630:17" pos:end="1630:70"><call pos:start="1630:17" pos:end="1630:70"><name pos:start="1630:17" pos:end="1630:39">gen_helper_fmov_FT0_STN</name><argument_list pos:start="1630:40" pos:end="1630:70">(<argument pos:start="1630:41" pos:end="1630:47"><expr pos:start="1630:41" pos:end="1630:47"><name pos:start="1630:41" pos:end="1630:47">cpu_env</name></expr></argument>, <argument pos:start="1630:50" pos:end="1630:69"><expr pos:start="1630:50" pos:end="1630:69"><call pos:start="1630:50" pos:end="1630:69"><name pos:start="1630:50" pos:end="1630:62">tcg_const_i32</name><argument_list pos:start="1630:63" pos:end="1630:69">(<argument pos:start="1630:64" pos:end="1630:68"><expr pos:start="1630:64" pos:end="1630:68"><name pos:start="1630:64" pos:end="1630:68">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1631:17" pos:end="1631:50"><expr pos:start="1631:17" pos:end="1631:49"><call pos:start="1631:17" pos:end="1631:49"><name pos:start="1631:17" pos:end="1631:40">gen_helper_fucom_ST0_FT0</name><argument_list pos:start="1631:41" pos:end="1631:49">(<argument pos:start="1631:42" pos:end="1631:48"><expr pos:start="1631:42" pos:end="1631:48"><name pos:start="1631:42" pos:end="1631:48">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="1632:17" pos:end="1632:22">break;</break>
            <case pos:start="1633:13" pos:end="1633:22">case <expr pos:start="1633:18" pos:end="1633:21"><literal type="number" pos:start="1633:18" pos:end="1633:21">0x2d</literal></expr>:</case> <comment type="block" pos:start="1633:24" pos:end="1633:41">/* fucomp st(i) */</comment>
                <expr_stmt pos:start="1634:17" pos:end="1634:71"><expr pos:start="1634:17" pos:end="1634:70"><call pos:start="1634:17" pos:end="1634:70"><name pos:start="1634:17" pos:end="1634:39">gen_helper_fmov_FT0_STN</name><argument_list pos:start="1634:40" pos:end="1634:70">(<argument pos:start="1634:41" pos:end="1634:47"><expr pos:start="1634:41" pos:end="1634:47"><name pos:start="1634:41" pos:end="1634:47">cpu_env</name></expr></argument>, <argument pos:start="1634:50" pos:end="1634:69"><expr pos:start="1634:50" pos:end="1634:69"><call pos:start="1634:50" pos:end="1634:69"><name pos:start="1634:50" pos:end="1634:62">tcg_const_i32</name><argument_list pos:start="1634:63" pos:end="1634:69">(<argument pos:start="1634:64" pos:end="1634:68"><expr pos:start="1634:64" pos:end="1634:68"><name pos:start="1634:64" pos:end="1634:68">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1635:17" pos:end="1635:50"><expr pos:start="1635:17" pos:end="1635:49"><call pos:start="1635:17" pos:end="1635:49"><name pos:start="1635:17" pos:end="1635:40">gen_helper_fucom_ST0_FT0</name><argument_list pos:start="1635:41" pos:end="1635:49">(<argument pos:start="1635:42" pos:end="1635:48"><expr pos:start="1635:42" pos:end="1635:48"><name pos:start="1635:42" pos:end="1635:48">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1636:17" pos:end="1636:41"><expr pos:start="1636:17" pos:end="1636:40"><call pos:start="1636:17" pos:end="1636:40"><name pos:start="1636:17" pos:end="1636:31">gen_helper_fpop</name><argument_list pos:start="1636:32" pos:end="1636:40">(<argument pos:start="1636:33" pos:end="1636:39"><expr pos:start="1636:33" pos:end="1636:39"><name pos:start="1636:33" pos:end="1636:39">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="1637:17" pos:end="1637:22">break;</break>
            <case pos:start="1638:13" pos:end="1638:22">case <expr pos:start="1638:18" pos:end="1638:21"><literal type="number" pos:start="1638:18" pos:end="1638:21">0x33</literal></expr>:</case> <comment type="block" pos:start="1638:24" pos:end="1638:33">/* de/3 */</comment>
                <switch pos:start="1639:17" pos:end="3141:17">switch<condition pos:start="1639:23" pos:end="1639:26">(<expr pos:start="1639:24" pos:end="1639:25"><name pos:start="1639:24" pos:end="1639:25">rm</name></expr>)</condition> <block pos:start="1639:28" pos:end="3141:17">{<block_content pos:start="1640:17" pos:end="3141:17">
                <case pos:start="1640:17" pos:end="1640:23">case <expr pos:start="1640:22" pos:end="1640:22"><literal type="number" pos:start="1640:22" pos:end="1640:22">1</literal></expr>:</case> <comment type="block" pos:start="1640:25" pos:end="1640:36">/* fcompp */</comment>
                    <expr_stmt pos:start="1641:21" pos:end="1641:71"><expr pos:start="1641:21" pos:end="1641:70"><call pos:start="1641:21" pos:end="1641:70"><name pos:start="1641:21" pos:end="1641:43">gen_helper_fmov_FT0_STN</name><argument_list pos:start="1641:44" pos:end="1641:70">(<argument pos:start="1641:45" pos:end="1641:51"><expr pos:start="1641:45" pos:end="1641:51"><name pos:start="1641:45" pos:end="1641:51">cpu_env</name></expr></argument>, <argument pos:start="1641:54" pos:end="1641:69"><expr pos:start="1641:54" pos:end="1641:69"><call pos:start="1641:54" pos:end="1641:69"><name pos:start="1641:54" pos:end="1641:66">tcg_const_i32</name><argument_list pos:start="1641:67" pos:end="1641:69">(<argument pos:start="1641:68" pos:end="1641:68"><expr pos:start="1641:68" pos:end="1641:68"><literal type="number" pos:start="1641:68" pos:end="1641:68">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="1642:21" pos:end="1642:53"><expr pos:start="1642:21" pos:end="1642:52"><call pos:start="1642:21" pos:end="1642:52"><name pos:start="1642:21" pos:end="1642:43">gen_helper_fcom_ST0_FT0</name><argument_list pos:start="1642:44" pos:end="1642:52">(<argument pos:start="1642:45" pos:end="1642:51"><expr pos:start="1642:45" pos:end="1642:51"><name pos:start="1642:45" pos:end="1642:51">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="1643:21" pos:end="1643:45"><expr pos:start="1643:21" pos:end="1643:44"><call pos:start="1643:21" pos:end="1643:44"><name pos:start="1643:21" pos:end="1643:35">gen_helper_fpop</name><argument_list pos:start="1643:36" pos:end="1643:44">(<argument pos:start="1643:37" pos:end="1643:43"><expr pos:start="1643:37" pos:end="1643:43"><name pos:start="1643:37" pos:end="1643:43">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="1644:21" pos:end="1644:45"><expr pos:start="1644:21" pos:end="1644:44"><call pos:start="1644:21" pos:end="1644:44"><name pos:start="1644:21" pos:end="1644:35">gen_helper_fpop</name><argument_list pos:start="1644:36" pos:end="1644:44">(<argument pos:start="1644:37" pos:end="1644:43"><expr pos:start="1644:37" pos:end="1644:43"><name pos:start="1644:37" pos:end="1644:43">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:start="1645:21" pos:end="1645:26">break;</break>
                <default pos:start="1646:17" pos:end="1646:24">default:</default>
                <break pos:start="1647:17" pos:end="1647:22">break;</break>
            <case pos:start="1648:13" pos:end="1648:22">case <expr pos:start="1648:18" pos:end="1648:21"><literal type="number" pos:start="1648:18" pos:end="1648:21">0x38</literal></expr>:</case> <comment type="block" pos:start="1648:24" pos:end="1648:56">/* ffreep sti, undocumented op */</comment>
                <expr_stmt pos:start="1649:17" pos:end="1649:68"><expr pos:start="1649:17" pos:end="1649:67"><call pos:start="1649:17" pos:end="1649:67"><name pos:start="1649:17" pos:end="1649:36">gen_helper_ffree_STN</name><argument_list pos:start="1649:37" pos:end="1649:67">(<argument pos:start="1649:38" pos:end="1649:44"><expr pos:start="1649:38" pos:end="1649:44"><name pos:start="1649:38" pos:end="1649:44">cpu_env</name></expr></argument>, <argument pos:start="1649:47" pos:end="1649:66"><expr pos:start="1649:47" pos:end="1649:66"><call pos:start="1649:47" pos:end="1649:66"><name pos:start="1649:47" pos:end="1649:59">tcg_const_i32</name><argument_list pos:start="1649:60" pos:end="1649:66">(<argument pos:start="1649:61" pos:end="1649:65"><expr pos:start="1649:61" pos:end="1649:65"><name pos:start="1649:61" pos:end="1649:65">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1650:17" pos:end="1650:41"><expr pos:start="1650:17" pos:end="1650:40"><call pos:start="1650:17" pos:end="1650:40"><name pos:start="1650:17" pos:end="1650:31">gen_helper_fpop</name><argument_list pos:start="1650:32" pos:end="1650:40">(<argument pos:start="1650:33" pos:end="1650:39"><expr pos:start="1650:33" pos:end="1650:39"><name pos:start="1650:33" pos:end="1650:39">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="1651:17" pos:end="1651:22">break;</break>
            <case pos:start="1652:13" pos:end="1652:22">case <expr pos:start="1652:18" pos:end="1652:21"><literal type="number" pos:start="1652:18" pos:end="1652:21">0x3c</literal></expr>:</case> <comment type="block" pos:start="1652:24" pos:end="1652:33">/* df/4 */</comment>
                <switch pos:start="1653:17" pos:end="3141:17">switch<condition pos:start="1653:23" pos:end="1653:26">(<expr pos:start="1653:24" pos:end="1653:25"><name pos:start="1653:24" pos:end="1653:25">rm</name></expr>)</condition> <block pos:start="1653:28" pos:end="3141:17">{<block_content pos:start="1654:17" pos:end="3141:17">
                <case pos:start="1654:17" pos:end="1654:23">case <expr pos:start="1654:22" pos:end="1654:22"><literal type="number" pos:start="1654:22" pos:end="1654:22">0</literal></expr>:</case>
                    <expr_stmt pos:start="1655:21" pos:end="1655:61"><expr pos:start="1655:21" pos:end="1655:60"><call pos:start="1655:21" pos:end="1655:60"><name pos:start="1655:21" pos:end="1655:37">gen_helper_fnstsw</name><argument_list pos:start="1655:38" pos:end="1655:60">(<argument pos:start="1655:39" pos:end="1655:50"><expr pos:start="1655:39" pos:end="1655:50"><name pos:start="1655:39" pos:end="1655:50">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1655:53" pos:end="1655:59"><expr pos:start="1655:53" pos:end="1655:59"><name pos:start="1655:53" pos:end="1655:59">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="1656:21" pos:end="1656:64"><expr pos:start="1656:21" pos:end="1656:63"><call pos:start="1656:21" pos:end="1656:63"><name pos:start="1656:21" pos:end="1656:39">tcg_gen_extu_i32_tl</name><argument_list pos:start="1656:40" pos:end="1656:63">(<argument pos:start="1656:41" pos:end="1656:48"><expr pos:start="1656:41" pos:end="1656:48"><name pos:start="1656:41" pos:end="1656:48"><name pos:start="1656:41" pos:end="1656:45">cpu_T</name><index pos:start="1656:46" pos:end="1656:48">[<expr pos:start="1656:47" pos:end="1656:47"><literal type="number" pos:start="1656:47" pos:end="1656:47">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1656:51" pos:end="1656:62"><expr pos:start="1656:51" pos:end="1656:62"><name pos:start="1656:51" pos:end="1656:62">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="1657:21" pos:end="1657:54"><expr pos:start="1657:21" pos:end="1657:53"><call pos:start="1657:21" pos:end="1657:53"><name pos:start="1657:21" pos:end="1657:37">gen_op_mov_reg_T0</name><argument_list pos:start="1657:38" pos:end="1657:53">(<argument pos:start="1657:39" pos:end="1657:45"><expr pos:start="1657:39" pos:end="1657:45"><name pos:start="1657:39" pos:end="1657:45">OT_WORD</name></expr></argument>, <argument pos:start="1657:48" pos:end="1657:52"><expr pos:start="1657:48" pos:end="1657:52"><name pos:start="1657:48" pos:end="1657:52">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:start="1658:21" pos:end="1658:26">break;</break>
                <default pos:start="1659:17" pos:end="1659:24">default:</default>
                <break pos:start="1660:17" pos:end="1660:22">break;</break>
            <case pos:start="1661:13" pos:end="1661:22">case <expr pos:start="1661:18" pos:end="1661:21"><literal type="number" pos:start="1661:18" pos:end="1661:21">0x3d</literal></expr>:</case> <comment type="block" pos:start="1661:24" pos:end="1661:36">/* fucomip */</comment>
                <expr_stmt pos:start="1662:17" pos:end="1662:36"><expr pos:start="1662:17" pos:end="1662:35"><call pos:start="1662:17" pos:end="1662:35"><name pos:start="1662:17" pos:end="1662:32">gen_update_cc_op</name><argument_list pos:start="1662:33" pos:end="1662:35">(<argument pos:start="1662:34" pos:end="1662:34"><expr pos:start="1662:34" pos:end="1662:34"><name pos:start="1662:34" pos:end="1662:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1663:17" pos:end="1663:71"><expr pos:start="1663:17" pos:end="1663:70"><call pos:start="1663:17" pos:end="1663:70"><name pos:start="1663:17" pos:end="1663:39">gen_helper_fmov_FT0_STN</name><argument_list pos:start="1663:40" pos:end="1663:70">(<argument pos:start="1663:41" pos:end="1663:47"><expr pos:start="1663:41" pos:end="1663:47"><name pos:start="1663:41" pos:end="1663:47">cpu_env</name></expr></argument>, <argument pos:start="1663:50" pos:end="1663:69"><expr pos:start="1663:50" pos:end="1663:69"><call pos:start="1663:50" pos:end="1663:69"><name pos:start="1663:50" pos:end="1663:62">tcg_const_i32</name><argument_list pos:start="1663:63" pos:end="1663:69">(<argument pos:start="1663:64" pos:end="1663:68"><expr pos:start="1663:64" pos:end="1663:68"><name pos:start="1663:64" pos:end="1663:68">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1664:17" pos:end="1664:51"><expr pos:start="1664:17" pos:end="1664:50"><call pos:start="1664:17" pos:end="1664:50"><name pos:start="1664:17" pos:end="1664:41">gen_helper_fucomi_ST0_FT0</name><argument_list pos:start="1664:42" pos:end="1664:50">(<argument pos:start="1664:43" pos:end="1664:49"><expr pos:start="1664:43" pos:end="1664:49"><name pos:start="1664:43" pos:end="1664:49">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1665:17" pos:end="1665:41"><expr pos:start="1665:17" pos:end="1665:40"><call pos:start="1665:17" pos:end="1665:40"><name pos:start="1665:17" pos:end="1665:31">gen_helper_fpop</name><argument_list pos:start="1665:32" pos:end="1665:40">(<argument pos:start="1665:33" pos:end="1665:39"><expr pos:start="1665:33" pos:end="1665:39"><name pos:start="1665:33" pos:end="1665:39">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1666:17" pos:end="1666:43"><expr pos:start="1666:17" pos:end="1666:42"><call pos:start="1666:17" pos:end="1666:42"><name pos:start="1666:17" pos:end="1666:25">set_cc_op</name><argument_list pos:start="1666:26" pos:end="1666:42">(<argument pos:start="1666:27" pos:end="1666:27"><expr pos:start="1666:27" pos:end="1666:27"><name pos:start="1666:27" pos:end="1666:27">s</name></expr></argument>, <argument pos:start="1666:30" pos:end="1666:41"><expr pos:start="1666:30" pos:end="1666:41"><name pos:start="1666:30" pos:end="1666:41">CC_OP_EFLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="1667:17" pos:end="1667:22">break;</break>
            <case pos:start="1668:13" pos:end="1668:22">case <expr pos:start="1668:18" pos:end="1668:21"><literal type="number" pos:start="1668:18" pos:end="1668:21">0x3e</literal></expr>:</case> <comment type="block" pos:start="1668:24" pos:end="1668:35">/* fcomip */</comment>
                <expr_stmt pos:start="1669:17" pos:end="1669:36"><expr pos:start="1669:17" pos:end="1669:35"><call pos:start="1669:17" pos:end="1669:35"><name pos:start="1669:17" pos:end="1669:32">gen_update_cc_op</name><argument_list pos:start="1669:33" pos:end="1669:35">(<argument pos:start="1669:34" pos:end="1669:34"><expr pos:start="1669:34" pos:end="1669:34"><name pos:start="1669:34" pos:end="1669:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1670:17" pos:end="1670:71"><expr pos:start="1670:17" pos:end="1670:70"><call pos:start="1670:17" pos:end="1670:70"><name pos:start="1670:17" pos:end="1670:39">gen_helper_fmov_FT0_STN</name><argument_list pos:start="1670:40" pos:end="1670:70">(<argument pos:start="1670:41" pos:end="1670:47"><expr pos:start="1670:41" pos:end="1670:47"><name pos:start="1670:41" pos:end="1670:47">cpu_env</name></expr></argument>, <argument pos:start="1670:50" pos:end="1670:69"><expr pos:start="1670:50" pos:end="1670:69"><call pos:start="1670:50" pos:end="1670:69"><name pos:start="1670:50" pos:end="1670:62">tcg_const_i32</name><argument_list pos:start="1670:63" pos:end="1670:69">(<argument pos:start="1670:64" pos:end="1670:68"><expr pos:start="1670:64" pos:end="1670:68"><name pos:start="1670:64" pos:end="1670:68">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1671:17" pos:end="1671:50"><expr pos:start="1671:17" pos:end="1671:49"><call pos:start="1671:17" pos:end="1671:49"><name pos:start="1671:17" pos:end="1671:40">gen_helper_fcomi_ST0_FT0</name><argument_list pos:start="1671:41" pos:end="1671:49">(<argument pos:start="1671:42" pos:end="1671:48"><expr pos:start="1671:42" pos:end="1671:48"><name pos:start="1671:42" pos:end="1671:48">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1672:17" pos:end="1672:41"><expr pos:start="1672:17" pos:end="1672:40"><call pos:start="1672:17" pos:end="1672:40"><name pos:start="1672:17" pos:end="1672:31">gen_helper_fpop</name><argument_list pos:start="1672:32" pos:end="1672:40">(<argument pos:start="1672:33" pos:end="1672:39"><expr pos:start="1672:33" pos:end="1672:39"><name pos:start="1672:33" pos:end="1672:39">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1673:17" pos:end="1673:43"><expr pos:start="1673:17" pos:end="1673:42"><call pos:start="1673:17" pos:end="1673:42"><name pos:start="1673:17" pos:end="1673:25">set_cc_op</name><argument_list pos:start="1673:26" pos:end="1673:42">(<argument pos:start="1673:27" pos:end="1673:27"><expr pos:start="1673:27" pos:end="1673:27"><name pos:start="1673:27" pos:end="1673:27">s</name></expr></argument>, <argument pos:start="1673:30" pos:end="1673:41"><expr pos:start="1673:30" pos:end="1673:41"><name pos:start="1673:30" pos:end="1673:41">CC_OP_EFLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="1674:17" pos:end="1674:22">break;</break>
            <case pos:start="1675:13" pos:end="1675:31">case <expr pos:start="1675:18" pos:end="1675:30"><literal type="number" pos:start="1675:18" pos:end="1675:21">0x10</literal> <operator pos:start="1675:23" pos:end="1675:25">...</operator> <literal type="number" pos:start="1675:27" pos:end="1675:30">0x13</literal></expr>:</case> <comment type="block" pos:start="1675:33" pos:end="1675:45">/* fcmovxx */</comment>
            <case pos:start="1676:13" pos:end="1676:31">case <expr pos:start="1676:18" pos:end="1676:30"><literal type="number" pos:start="1676:18" pos:end="1676:21">0x18</literal> <operator pos:start="1676:23" pos:end="1676:25">...</operator> <literal type="number" pos:start="1676:27" pos:end="1676:30">0x1b</literal></expr>:</case>
                <block pos:start="1677:17" pos:end="3141:17">{<block_content pos:start="1678:21" pos:end="3141:17">
                    <decl_stmt pos:start="1678:21" pos:end="1678:32"><decl pos:start="1678:21" pos:end="1678:27"><type pos:start="1678:21" pos:end="1678:23"><name pos:start="1678:21" pos:end="1678:23">int</name></type> <name pos:start="1678:25" pos:end="1678:27">op1</name></decl>, <decl pos:start="1678:30" pos:end="1678:31"><type ref="prev" pos:start="1678:21" pos:end="1678:23"/><name pos:start="1678:30" pos:end="1678:31">l1</name></decl>;</decl_stmt>
                    <decl_stmt pos:start="1679:21" pos:end="1684:22"><decl pos:start="1679:21" pos:end="1684:21"><type pos:start="1679:21" pos:end="1679:40"><specifier pos:start="1679:21" pos:end="1679:26">static</specifier> <specifier pos:start="1679:28" pos:end="1679:32">const</specifier> <name pos:start="1679:34" pos:end="1679:40">uint8_t</name></type> <name pos:start="1679:42" pos:end="1679:52"><name pos:start="1679:42" pos:end="1679:49">fcmov_cc</name><index pos:start="1679:50" pos:end="1679:52">[<expr pos:start="1679:51" pos:end="1679:51"><literal type="number" pos:start="1679:51" pos:end="1679:51">8</literal></expr>]</index></name> <init pos:start="1679:54" pos:end="1684:21">= <expr pos:start="1679:56" pos:end="1684:21"><block pos:start="1679:56" pos:end="1684:21">{
                        <expr pos:start="1680:25" pos:end="1680:36"><operator pos:start="1680:25" pos:end="1680:25">(</operator><name pos:start="1680:26" pos:end="1680:30">JCC_B</name> <operator pos:start="1680:32" pos:end="1680:33">&lt;&lt;</operator> <literal type="number" pos:start="1680:35" pos:end="1680:35">1</literal><operator pos:start="1680:36" pos:end="1680:36">)</operator></expr>,
                        <expr pos:start="1681:25" pos:end="1681:36"><operator pos:start="1681:25" pos:end="1681:25">(</operator><name pos:start="1681:26" pos:end="1681:30">JCC_Z</name> <operator pos:start="1681:32" pos:end="1681:33">&lt;&lt;</operator> <literal type="number" pos:start="1681:35" pos:end="1681:35">1</literal><operator pos:start="1681:36" pos:end="1681:36">)</operator></expr>,
                        <expr pos:start="1682:25" pos:end="1682:37"><operator pos:start="1682:25" pos:end="1682:25">(</operator><name pos:start="1682:26" pos:end="1682:31">JCC_BE</name> <operator pos:start="1682:33" pos:end="1682:34">&lt;&lt;</operator> <literal type="number" pos:start="1682:36" pos:end="1682:36">1</literal><operator pos:start="1682:37" pos:end="1682:37">)</operator></expr>,
                        <expr pos:start="1683:25" pos:end="1683:36"><operator pos:start="1683:25" pos:end="1683:25">(</operator><name pos:start="1683:26" pos:end="1683:30">JCC_P</name> <operator pos:start="1683:32" pos:end="1683:33">&lt;&lt;</operator> <literal type="number" pos:start="1683:35" pos:end="1683:35">1</literal><operator pos:start="1683:36" pos:end="1683:36">)</operator></expr>,
                    }</block></expr></init></decl>;</decl_stmt>
                    <expr_stmt pos:start="1685:21" pos:end="1685:67"><expr pos:start="1685:21" pos:end="1685:66"><name pos:start="1685:21" pos:end="1685:23">op1</name> <operator pos:start="1685:25" pos:end="1685:25">=</operator> <name pos:start="1685:27" pos:end="1685:42"><name pos:start="1685:27" pos:end="1685:34">fcmov_cc</name><index pos:start="1685:35" pos:end="1685:42">[<expr pos:start="1685:36" pos:end="1685:41"><name pos:start="1685:36" pos:end="1685:37">op</name> <operator pos:start="1685:39" pos:end="1685:39">&amp;</operator> <literal type="number" pos:start="1685:41" pos:end="1685:41">3</literal></expr>]</index></name> <operator pos:start="1685:44" pos:end="1685:44">|</operator> <operator pos:start="1685:46" pos:end="1685:46">(</operator><operator pos:start="1685:47" pos:end="1685:47">(</operator><operator pos:start="1685:48" pos:end="1685:48">(</operator><name pos:start="1685:49" pos:end="1685:50">op</name> <operator pos:start="1685:52" pos:end="1685:53">&gt;&gt;</operator> <literal type="number" pos:start="1685:55" pos:end="1685:55">3</literal><operator pos:start="1685:56" pos:end="1685:56">)</operator> <operator pos:start="1685:58" pos:end="1685:58">&amp;</operator> <literal type="number" pos:start="1685:60" pos:end="1685:60">1</literal><operator pos:start="1685:61" pos:end="1685:61">)</operator> <operator pos:start="1685:63" pos:end="1685:63">^</operator> <literal type="number" pos:start="1685:65" pos:end="1685:65">1</literal><operator pos:start="1685:66" pos:end="1685:66">)</operator></expr>;</expr_stmt>
                    <expr_stmt pos:start="1686:21" pos:end="1686:41"><expr pos:start="1686:21" pos:end="1686:40"><name pos:start="1686:21" pos:end="1686:22">l1</name> <operator pos:start="1686:24" pos:end="1686:24">=</operator> <call pos:start="1686:26" pos:end="1686:40"><name pos:start="1686:26" pos:end="1686:38">gen_new_label</name><argument_list pos:start="1686:39" pos:end="1686:40">()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="1687:21" pos:end="1687:47"><expr pos:start="1687:21" pos:end="1687:46"><call pos:start="1687:21" pos:end="1687:46"><name pos:start="1687:21" pos:end="1687:34">gen_jcc1_noeob</name><argument_list pos:start="1687:35" pos:end="1687:46">(<argument pos:start="1687:36" pos:end="1687:36"><expr pos:start="1687:36" pos:end="1687:36"><name pos:start="1687:36" pos:end="1687:36">s</name></expr></argument>, <argument pos:start="1687:39" pos:end="1687:41"><expr pos:start="1687:39" pos:end="1687:41"><name pos:start="1687:39" pos:end="1687:41">op1</name></expr></argument>, <argument pos:start="1687:44" pos:end="1687:45"><expr pos:start="1687:44" pos:end="1687:45"><name pos:start="1687:44" pos:end="1687:45">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="1688:21" pos:end="1688:75"><expr pos:start="1688:21" pos:end="1688:74"><call pos:start="1688:21" pos:end="1688:74"><name pos:start="1688:21" pos:end="1688:43">gen_helper_fmov_ST0_STN</name><argument_list pos:start="1688:44" pos:end="1688:74">(<argument pos:start="1688:45" pos:end="1688:51"><expr pos:start="1688:45" pos:end="1688:51"><name pos:start="1688:45" pos:end="1688:51">cpu_env</name></expr></argument>, <argument pos:start="1688:54" pos:end="1688:73"><expr pos:start="1688:54" pos:end="1688:73"><call pos:start="1688:54" pos:end="1688:73"><name pos:start="1688:54" pos:end="1688:66">tcg_const_i32</name><argument_list pos:start="1688:67" pos:end="1688:73">(<argument pos:start="1688:68" pos:end="1688:72"><expr pos:start="1688:68" pos:end="1688:72"><name pos:start="1688:68" pos:end="1688:72">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="1689:21" pos:end="1689:38"><expr pos:start="1689:21" pos:end="1689:37"><call pos:start="1689:21" pos:end="1689:37"><name pos:start="1689:21" pos:end="1689:33">gen_set_label</name><argument_list pos:start="1689:34" pos:end="1689:37">(<argument pos:start="1689:35" pos:end="1689:36"><expr pos:start="1689:35" pos:end="1689:36"><name pos:start="1689:35" pos:end="1689:36">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="1690:17" pos:end="1690:22">break;</break>
            <default pos:start="1691:13" pos:end="1691:20">default:</default>
        <break pos:start="1692:9" pos:end="1692:14">break;</break>
        <comment type="block" format="doxygen" pos:start="1693:9" pos:end="1693:34">/************************/</comment>
        <comment type="block" pos:start="1694:9" pos:end="1694:24">/* string ops */</comment>
    <case pos:start="1695:5" pos:end="1695:14">case <expr pos:start="1695:10" pos:end="1695:13"><literal type="number" pos:start="1695:10" pos:end="1695:13">0xa4</literal></expr>:</case> <comment type="block" pos:start="1695:16" pos:end="1695:26">/* movsS */</comment>
    <case pos:start="1696:5" pos:end="1696:14">case <expr pos:start="1696:10" pos:end="1696:13"><literal type="number" pos:start="1696:10" pos:end="1696:13">0xa5</literal></expr>:</case>
        <if_stmt pos:start="1697:9" pos:end="1700:33"><if pos:start="1697:9" pos:end="1698:25">if <condition pos:start="1697:12" pos:end="1697:25">(<expr pos:start="1697:13" pos:end="1697:24"><operator pos:start="1697:13" pos:end="1697:13">(</operator><name pos:start="1697:14" pos:end="1697:14">b</name> <operator pos:start="1697:16" pos:end="1697:16">&amp;</operator> <literal type="number" pos:start="1697:18" pos:end="1697:18">1</literal><operator pos:start="1697:19" pos:end="1697:19">)</operator> <operator pos:start="1697:21" pos:end="1697:22">==</operator> <literal type="number" pos:start="1697:24" pos:end="1697:24">0</literal></expr>)</condition><block type="pseudo" pos:start="1698:13" pos:end="1698:25"><block_content pos:start="1698:13" pos:end="1698:25">
            <expr_stmt pos:start="1698:13" pos:end="1698:25"><expr pos:start="1698:13" pos:end="1698:24"><name pos:start="1698:13" pos:end="1698:14">ot</name> <operator pos:start="1698:16" pos:end="1698:16">=</operator> <name pos:start="1698:18" pos:end="1698:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>
        <else pos:start="1699:9" pos:end="1700:33">else<block type="pseudo" pos:start="1700:13" pos:end="1700:33"><block_content pos:start="1700:13" pos:end="1700:33">
            <expr_stmt pos:start="1700:13" pos:end="1700:33"><expr pos:start="1700:13" pos:end="1700:32"><name pos:start="1700:13" pos:end="1700:14">ot</name> <operator pos:start="1700:16" pos:end="1700:16">=</operator> <name pos:start="1700:18" pos:end="1700:22">dflag</name> <operator pos:start="1700:24" pos:end="1700:24">+</operator> <name pos:start="1700:26" pos:end="1700:32">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <if_stmt pos:start="1701:9" pos:end="3141:17"><if pos:start="1701:9" pos:end="1703:9">if <condition pos:start="1701:12" pos:end="1701:52">(<expr pos:start="1701:13" pos:end="1701:51"><name pos:start="1701:13" pos:end="1701:20">prefixes</name> <operator pos:start="1701:22" pos:end="1701:22">&amp;</operator> <operator pos:start="1701:24" pos:end="1701:24">(</operator><name pos:start="1701:25" pos:end="1701:35">PREFIX_REPZ</name> <operator pos:start="1701:37" pos:end="1701:37">|</operator> <name pos:start="1701:39" pos:end="1701:50">PREFIX_REPNZ</name><operator pos:start="1701:51" pos:end="1701:51">)</operator></expr>)</condition> <block pos:start="1701:54" pos:end="1703:9">{<block_content pos:start="1702:13" pos:end="1702:76">
            <expr_stmt pos:start="1702:13" pos:end="1702:76"><expr pos:start="1702:13" pos:end="1702:75"><call pos:start="1702:13" pos:end="1702:75"><name pos:start="1702:13" pos:end="1702:25">gen_repz_movs</name><argument_list pos:start="1702:26" pos:end="1702:75">(<argument pos:start="1702:27" pos:end="1702:27"><expr pos:start="1702:27" pos:end="1702:27"><name pos:start="1702:27" pos:end="1702:27">s</name></expr></argument>, <argument pos:start="1702:30" pos:end="1702:31"><expr pos:start="1702:30" pos:end="1702:31"><name pos:start="1702:30" pos:end="1702:31">ot</name></expr></argument>, <argument pos:start="1702:34" pos:end="1702:54"><expr pos:start="1702:34" pos:end="1702:54"><name pos:start="1702:34" pos:end="1702:41">pc_start</name> <operator pos:start="1702:43" pos:end="1702:43">-</operator> <name pos:start="1702:45" pos:end="1702:54"><name pos:start="1702:45" pos:end="1702:45">s</name><operator pos:start="1702:46" pos:end="1702:47">-&gt;</operator><name pos:start="1702:48" pos:end="1702:54">cs_base</name></name></expr></argument>, <argument pos:start="1702:57" pos:end="1702:74"><expr pos:start="1702:57" pos:end="1702:74"><name pos:start="1702:57" pos:end="1702:61"><name pos:start="1702:57" pos:end="1702:57">s</name><operator pos:start="1702:58" pos:end="1702:59">-&gt;</operator><name pos:start="1702:60" pos:end="1702:61">pc</name></name> <operator pos:start="1702:63" pos:end="1702:63">-</operator> <name pos:start="1702:65" pos:end="1702:74"><name pos:start="1702:65" pos:end="1702:65">s</name><operator pos:start="1702:66" pos:end="1702:67">-&gt;</operator><name pos:start="1702:68" pos:end="1702:74">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="1703:11" pos:end="3141:17">else <block pos:start="1703:16" pos:end="3141:17">{<block_content pos:start="1704:13" pos:end="3141:17">
            <expr_stmt pos:start="1704:13" pos:end="1704:28"><expr pos:start="1704:13" pos:end="1704:27"><call pos:start="1704:13" pos:end="1704:27"><name pos:start="1704:13" pos:end="1704:20">gen_movs</name><argument_list pos:start="1704:21" pos:end="1704:27">(<argument pos:start="1704:22" pos:end="1704:22"><expr pos:start="1704:22" pos:end="1704:22"><name pos:start="1704:22" pos:end="1704:22">s</name></expr></argument>, <argument pos:start="1704:25" pos:end="1704:26"><expr pos:start="1704:25" pos:end="1704:26"><name pos:start="1704:25" pos:end="1704:26">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="1705:9" pos:end="1705:14">break;</break>
    <case pos:start="1706:5" pos:end="1706:14">case <expr pos:start="1706:10" pos:end="1706:13"><literal type="number" pos:start="1706:10" pos:end="1706:13">0xaa</literal></expr>:</case> <comment type="block" pos:start="1706:16" pos:end="1706:26">/* stosS */</comment>
    <case pos:start="1707:5" pos:end="1707:14">case <expr pos:start="1707:10" pos:end="1707:13"><literal type="number" pos:start="1707:10" pos:end="1707:13">0xab</literal></expr>:</case>
        <if_stmt pos:start="1708:9" pos:end="1711:33"><if pos:start="1708:9" pos:end="1709:25">if <condition pos:start="1708:12" pos:end="1708:25">(<expr pos:start="1708:13" pos:end="1708:24"><operator pos:start="1708:13" pos:end="1708:13">(</operator><name pos:start="1708:14" pos:end="1708:14">b</name> <operator pos:start="1708:16" pos:end="1708:16">&amp;</operator> <literal type="number" pos:start="1708:18" pos:end="1708:18">1</literal><operator pos:start="1708:19" pos:end="1708:19">)</operator> <operator pos:start="1708:21" pos:end="1708:22">==</operator> <literal type="number" pos:start="1708:24" pos:end="1708:24">0</literal></expr>)</condition><block type="pseudo" pos:start="1709:13" pos:end="1709:25"><block_content pos:start="1709:13" pos:end="1709:25">
            <expr_stmt pos:start="1709:13" pos:end="1709:25"><expr pos:start="1709:13" pos:end="1709:24"><name pos:start="1709:13" pos:end="1709:14">ot</name> <operator pos:start="1709:16" pos:end="1709:16">=</operator> <name pos:start="1709:18" pos:end="1709:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>
        <else pos:start="1710:9" pos:end="1711:33">else<block type="pseudo" pos:start="1711:13" pos:end="1711:33"><block_content pos:start="1711:13" pos:end="1711:33">
            <expr_stmt pos:start="1711:13" pos:end="1711:33"><expr pos:start="1711:13" pos:end="1711:32"><name pos:start="1711:13" pos:end="1711:14">ot</name> <operator pos:start="1711:16" pos:end="1711:16">=</operator> <name pos:start="1711:18" pos:end="1711:22">dflag</name> <operator pos:start="1711:24" pos:end="1711:24">+</operator> <name pos:start="1711:26" pos:end="1711:32">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <if_stmt pos:start="1712:9" pos:end="3141:17"><if pos:start="1712:9" pos:end="1714:9">if <condition pos:start="1712:12" pos:end="1712:52">(<expr pos:start="1712:13" pos:end="1712:51"><name pos:start="1712:13" pos:end="1712:20">prefixes</name> <operator pos:start="1712:22" pos:end="1712:22">&amp;</operator> <operator pos:start="1712:24" pos:end="1712:24">(</operator><name pos:start="1712:25" pos:end="1712:35">PREFIX_REPZ</name> <operator pos:start="1712:37" pos:end="1712:37">|</operator> <name pos:start="1712:39" pos:end="1712:50">PREFIX_REPNZ</name><operator pos:start="1712:51" pos:end="1712:51">)</operator></expr>)</condition> <block pos:start="1712:54" pos:end="1714:9">{<block_content pos:start="1713:13" pos:end="1713:76">
            <expr_stmt pos:start="1713:13" pos:end="1713:76"><expr pos:start="1713:13" pos:end="1713:75"><call pos:start="1713:13" pos:end="1713:75"><name pos:start="1713:13" pos:end="1713:25">gen_repz_stos</name><argument_list pos:start="1713:26" pos:end="1713:75">(<argument pos:start="1713:27" pos:end="1713:27"><expr pos:start="1713:27" pos:end="1713:27"><name pos:start="1713:27" pos:end="1713:27">s</name></expr></argument>, <argument pos:start="1713:30" pos:end="1713:31"><expr pos:start="1713:30" pos:end="1713:31"><name pos:start="1713:30" pos:end="1713:31">ot</name></expr></argument>, <argument pos:start="1713:34" pos:end="1713:54"><expr pos:start="1713:34" pos:end="1713:54"><name pos:start="1713:34" pos:end="1713:41">pc_start</name> <operator pos:start="1713:43" pos:end="1713:43">-</operator> <name pos:start="1713:45" pos:end="1713:54"><name pos:start="1713:45" pos:end="1713:45">s</name><operator pos:start="1713:46" pos:end="1713:47">-&gt;</operator><name pos:start="1713:48" pos:end="1713:54">cs_base</name></name></expr></argument>, <argument pos:start="1713:57" pos:end="1713:74"><expr pos:start="1713:57" pos:end="1713:74"><name pos:start="1713:57" pos:end="1713:61"><name pos:start="1713:57" pos:end="1713:57">s</name><operator pos:start="1713:58" pos:end="1713:59">-&gt;</operator><name pos:start="1713:60" pos:end="1713:61">pc</name></name> <operator pos:start="1713:63" pos:end="1713:63">-</operator> <name pos:start="1713:65" pos:end="1713:74"><name pos:start="1713:65" pos:end="1713:65">s</name><operator pos:start="1713:66" pos:end="1713:67">-&gt;</operator><name pos:start="1713:68" pos:end="1713:74">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="1714:11" pos:end="3141:17">else <block pos:start="1714:16" pos:end="3141:17">{<block_content pos:start="1715:13" pos:end="3141:17">
            <expr_stmt pos:start="1715:13" pos:end="1715:28"><expr pos:start="1715:13" pos:end="1715:27"><call pos:start="1715:13" pos:end="1715:27"><name pos:start="1715:13" pos:end="1715:20">gen_stos</name><argument_list pos:start="1715:21" pos:end="1715:27">(<argument pos:start="1715:22" pos:end="1715:22"><expr pos:start="1715:22" pos:end="1715:22"><name pos:start="1715:22" pos:end="1715:22">s</name></expr></argument>, <argument pos:start="1715:25" pos:end="1715:26"><expr pos:start="1715:25" pos:end="1715:26"><name pos:start="1715:25" pos:end="1715:26">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="1716:9" pos:end="1716:14">break;</break>
    <case pos:start="1717:5" pos:end="1717:14">case <expr pos:start="1717:10" pos:end="1717:13"><literal type="number" pos:start="1717:10" pos:end="1717:13">0xac</literal></expr>:</case> <comment type="block" pos:start="1717:16" pos:end="1717:26">/* lodsS */</comment>
    <case pos:start="1718:5" pos:end="1718:14">case <expr pos:start="1718:10" pos:end="1718:13"><literal type="number" pos:start="1718:10" pos:end="1718:13">0xad</literal></expr>:</case>
        <if_stmt pos:start="1719:9" pos:end="1722:33"><if pos:start="1719:9" pos:end="1720:25">if <condition pos:start="1719:12" pos:end="1719:25">(<expr pos:start="1719:13" pos:end="1719:24"><operator pos:start="1719:13" pos:end="1719:13">(</operator><name pos:start="1719:14" pos:end="1719:14">b</name> <operator pos:start="1719:16" pos:end="1719:16">&amp;</operator> <literal type="number" pos:start="1719:18" pos:end="1719:18">1</literal><operator pos:start="1719:19" pos:end="1719:19">)</operator> <operator pos:start="1719:21" pos:end="1719:22">==</operator> <literal type="number" pos:start="1719:24" pos:end="1719:24">0</literal></expr>)</condition><block type="pseudo" pos:start="1720:13" pos:end="1720:25"><block_content pos:start="1720:13" pos:end="1720:25">
            <expr_stmt pos:start="1720:13" pos:end="1720:25"><expr pos:start="1720:13" pos:end="1720:24"><name pos:start="1720:13" pos:end="1720:14">ot</name> <operator pos:start="1720:16" pos:end="1720:16">=</operator> <name pos:start="1720:18" pos:end="1720:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>
        <else pos:start="1721:9" pos:end="1722:33">else<block type="pseudo" pos:start="1722:13" pos:end="1722:33"><block_content pos:start="1722:13" pos:end="1722:33">
            <expr_stmt pos:start="1722:13" pos:end="1722:33"><expr pos:start="1722:13" pos:end="1722:32"><name pos:start="1722:13" pos:end="1722:14">ot</name> <operator pos:start="1722:16" pos:end="1722:16">=</operator> <name pos:start="1722:18" pos:end="1722:22">dflag</name> <operator pos:start="1722:24" pos:end="1722:24">+</operator> <name pos:start="1722:26" pos:end="1722:32">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <if_stmt pos:start="1723:9" pos:end="3141:17"><if pos:start="1723:9" pos:end="1725:9">if <condition pos:start="1723:12" pos:end="1723:52">(<expr pos:start="1723:13" pos:end="1723:51"><name pos:start="1723:13" pos:end="1723:20">prefixes</name> <operator pos:start="1723:22" pos:end="1723:22">&amp;</operator> <operator pos:start="1723:24" pos:end="1723:24">(</operator><name pos:start="1723:25" pos:end="1723:35">PREFIX_REPZ</name> <operator pos:start="1723:37" pos:end="1723:37">|</operator> <name pos:start="1723:39" pos:end="1723:50">PREFIX_REPNZ</name><operator pos:start="1723:51" pos:end="1723:51">)</operator></expr>)</condition> <block pos:start="1723:54" pos:end="1725:9">{<block_content pos:start="1724:13" pos:end="1724:76">
            <expr_stmt pos:start="1724:13" pos:end="1724:76"><expr pos:start="1724:13" pos:end="1724:75"><call pos:start="1724:13" pos:end="1724:75"><name pos:start="1724:13" pos:end="1724:25">gen_repz_lods</name><argument_list pos:start="1724:26" pos:end="1724:75">(<argument pos:start="1724:27" pos:end="1724:27"><expr pos:start="1724:27" pos:end="1724:27"><name pos:start="1724:27" pos:end="1724:27">s</name></expr></argument>, <argument pos:start="1724:30" pos:end="1724:31"><expr pos:start="1724:30" pos:end="1724:31"><name pos:start="1724:30" pos:end="1724:31">ot</name></expr></argument>, <argument pos:start="1724:34" pos:end="1724:54"><expr pos:start="1724:34" pos:end="1724:54"><name pos:start="1724:34" pos:end="1724:41">pc_start</name> <operator pos:start="1724:43" pos:end="1724:43">-</operator> <name pos:start="1724:45" pos:end="1724:54"><name pos:start="1724:45" pos:end="1724:45">s</name><operator pos:start="1724:46" pos:end="1724:47">-&gt;</operator><name pos:start="1724:48" pos:end="1724:54">cs_base</name></name></expr></argument>, <argument pos:start="1724:57" pos:end="1724:74"><expr pos:start="1724:57" pos:end="1724:74"><name pos:start="1724:57" pos:end="1724:61"><name pos:start="1724:57" pos:end="1724:57">s</name><operator pos:start="1724:58" pos:end="1724:59">-&gt;</operator><name pos:start="1724:60" pos:end="1724:61">pc</name></name> <operator pos:start="1724:63" pos:end="1724:63">-</operator> <name pos:start="1724:65" pos:end="1724:74"><name pos:start="1724:65" pos:end="1724:65">s</name><operator pos:start="1724:66" pos:end="1724:67">-&gt;</operator><name pos:start="1724:68" pos:end="1724:74">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="1725:11" pos:end="3141:17">else <block pos:start="1725:16" pos:end="3141:17">{<block_content pos:start="1726:13" pos:end="3141:17">
            <expr_stmt pos:start="1726:13" pos:end="1726:28"><expr pos:start="1726:13" pos:end="1726:27"><call pos:start="1726:13" pos:end="1726:27"><name pos:start="1726:13" pos:end="1726:20">gen_lods</name><argument_list pos:start="1726:21" pos:end="1726:27">(<argument pos:start="1726:22" pos:end="1726:22"><expr pos:start="1726:22" pos:end="1726:22"><name pos:start="1726:22" pos:end="1726:22">s</name></expr></argument>, <argument pos:start="1726:25" pos:end="1726:26"><expr pos:start="1726:25" pos:end="1726:26"><name pos:start="1726:25" pos:end="1726:26">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="1727:9" pos:end="1727:14">break;</break>
    <case pos:start="1728:5" pos:end="1728:14">case <expr pos:start="1728:10" pos:end="1728:13"><literal type="number" pos:start="1728:10" pos:end="1728:13">0xae</literal></expr>:</case> <comment type="block" pos:start="1728:16" pos:end="1728:26">/* scasS */</comment>
    <case pos:start="1729:5" pos:end="1729:14">case <expr pos:start="1729:10" pos:end="1729:13"><literal type="number" pos:start="1729:10" pos:end="1729:13">0xaf</literal></expr>:</case>
        <if_stmt pos:start="1730:9" pos:end="1733:33"><if pos:start="1730:9" pos:end="1731:25">if <condition pos:start="1730:12" pos:end="1730:25">(<expr pos:start="1730:13" pos:end="1730:24"><operator pos:start="1730:13" pos:end="1730:13">(</operator><name pos:start="1730:14" pos:end="1730:14">b</name> <operator pos:start="1730:16" pos:end="1730:16">&amp;</operator> <literal type="number" pos:start="1730:18" pos:end="1730:18">1</literal><operator pos:start="1730:19" pos:end="1730:19">)</operator> <operator pos:start="1730:21" pos:end="1730:22">==</operator> <literal type="number" pos:start="1730:24" pos:end="1730:24">0</literal></expr>)</condition><block type="pseudo" pos:start="1731:13" pos:end="1731:25"><block_content pos:start="1731:13" pos:end="1731:25">
            <expr_stmt pos:start="1731:13" pos:end="1731:25"><expr pos:start="1731:13" pos:end="1731:24"><name pos:start="1731:13" pos:end="1731:14">ot</name> <operator pos:start="1731:16" pos:end="1731:16">=</operator> <name pos:start="1731:18" pos:end="1731:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>
        <else pos:start="1732:9" pos:end="1733:33">else<block type="pseudo" pos:start="1733:13" pos:end="1733:33"><block_content pos:start="1733:13" pos:end="1733:33">
            <expr_stmt pos:start="1733:13" pos:end="1733:33"><expr pos:start="1733:13" pos:end="1733:32"><name pos:start="1733:13" pos:end="1733:14">ot</name> <operator pos:start="1733:16" pos:end="1733:16">=</operator> <name pos:start="1733:18" pos:end="1733:22">dflag</name> <operator pos:start="1733:24" pos:end="1733:24">+</operator> <name pos:start="1733:26" pos:end="1733:32">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <if_stmt pos:start="1734:9" pos:end="3141:17"><if pos:start="1734:9" pos:end="1736:9">if <condition pos:start="1734:12" pos:end="1734:36">(<expr pos:start="1734:13" pos:end="1734:35"><name pos:start="1734:13" pos:end="1734:20">prefixes</name> <operator pos:start="1734:22" pos:end="1734:22">&amp;</operator> <name pos:start="1734:24" pos:end="1734:35">PREFIX_REPNZ</name></expr>)</condition> <block pos:start="1734:38" pos:end="1736:9">{<block_content pos:start="1735:13" pos:end="1735:79">
            <expr_stmt pos:start="1735:13" pos:end="1735:79"><expr pos:start="1735:13" pos:end="1735:78"><call pos:start="1735:13" pos:end="1735:78"><name pos:start="1735:13" pos:end="1735:25">gen_repz_scas</name><argument_list pos:start="1735:26" pos:end="1735:78">(<argument pos:start="1735:27" pos:end="1735:27"><expr pos:start="1735:27" pos:end="1735:27"><name pos:start="1735:27" pos:end="1735:27">s</name></expr></argument>, <argument pos:start="1735:30" pos:end="1735:31"><expr pos:start="1735:30" pos:end="1735:31"><name pos:start="1735:30" pos:end="1735:31">ot</name></expr></argument>, <argument pos:start="1735:34" pos:end="1735:54"><expr pos:start="1735:34" pos:end="1735:54"><name pos:start="1735:34" pos:end="1735:41">pc_start</name> <operator pos:start="1735:43" pos:end="1735:43">-</operator> <name pos:start="1735:45" pos:end="1735:54"><name pos:start="1735:45" pos:end="1735:45">s</name><operator pos:start="1735:46" pos:end="1735:47">-&gt;</operator><name pos:start="1735:48" pos:end="1735:54">cs_base</name></name></expr></argument>, <argument pos:start="1735:57" pos:end="1735:74"><expr pos:start="1735:57" pos:end="1735:74"><name pos:start="1735:57" pos:end="1735:61"><name pos:start="1735:57" pos:end="1735:57">s</name><operator pos:start="1735:58" pos:end="1735:59">-&gt;</operator><name pos:start="1735:60" pos:end="1735:61">pc</name></name> <operator pos:start="1735:63" pos:end="1735:63">-</operator> <name pos:start="1735:65" pos:end="1735:74"><name pos:start="1735:65" pos:end="1735:65">s</name><operator pos:start="1735:66" pos:end="1735:67">-&gt;</operator><name pos:start="1735:68" pos:end="1735:74">cs_base</name></name></expr></argument>, <argument pos:start="1735:77" pos:end="1735:77"><expr pos:start="1735:77" pos:end="1735:77"><literal type="number" pos:start="1735:77" pos:end="1735:77">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="1736:11" pos:end="1738:9">else if <condition pos:start="1736:19" pos:end="1736:42">(<expr pos:start="1736:20" pos:end="1736:41"><name pos:start="1736:20" pos:end="1736:27">prefixes</name> <operator pos:start="1736:29" pos:end="1736:29">&amp;</operator> <name pos:start="1736:31" pos:end="1736:41">PREFIX_REPZ</name></expr>)</condition> <block pos:start="1736:44" pos:end="1738:9">{<block_content pos:start="1737:13" pos:end="1737:79">
            <expr_stmt pos:start="1737:13" pos:end="1737:79"><expr pos:start="1737:13" pos:end="1737:78"><call pos:start="1737:13" pos:end="1737:78"><name pos:start="1737:13" pos:end="1737:25">gen_repz_scas</name><argument_list pos:start="1737:26" pos:end="1737:78">(<argument pos:start="1737:27" pos:end="1737:27"><expr pos:start="1737:27" pos:end="1737:27"><name pos:start="1737:27" pos:end="1737:27">s</name></expr></argument>, <argument pos:start="1737:30" pos:end="1737:31"><expr pos:start="1737:30" pos:end="1737:31"><name pos:start="1737:30" pos:end="1737:31">ot</name></expr></argument>, <argument pos:start="1737:34" pos:end="1737:54"><expr pos:start="1737:34" pos:end="1737:54"><name pos:start="1737:34" pos:end="1737:41">pc_start</name> <operator pos:start="1737:43" pos:end="1737:43">-</operator> <name pos:start="1737:45" pos:end="1737:54"><name pos:start="1737:45" pos:end="1737:45">s</name><operator pos:start="1737:46" pos:end="1737:47">-&gt;</operator><name pos:start="1737:48" pos:end="1737:54">cs_base</name></name></expr></argument>, <argument pos:start="1737:57" pos:end="1737:74"><expr pos:start="1737:57" pos:end="1737:74"><name pos:start="1737:57" pos:end="1737:61"><name pos:start="1737:57" pos:end="1737:57">s</name><operator pos:start="1737:58" pos:end="1737:59">-&gt;</operator><name pos:start="1737:60" pos:end="1737:61">pc</name></name> <operator pos:start="1737:63" pos:end="1737:63">-</operator> <name pos:start="1737:65" pos:end="1737:74"><name pos:start="1737:65" pos:end="1737:65">s</name><operator pos:start="1737:66" pos:end="1737:67">-&gt;</operator><name pos:start="1737:68" pos:end="1737:74">cs_base</name></name></expr></argument>, <argument pos:start="1737:77" pos:end="1737:77"><expr pos:start="1737:77" pos:end="1737:77"><literal type="number" pos:start="1737:77" pos:end="1737:77">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="1738:11" pos:end="3141:17">else <block pos:start="1738:16" pos:end="3141:17">{<block_content pos:start="1739:13" pos:end="3141:17">
            <expr_stmt pos:start="1739:13" pos:end="1739:28"><expr pos:start="1739:13" pos:end="1739:27"><call pos:start="1739:13" pos:end="1739:27"><name pos:start="1739:13" pos:end="1739:20">gen_scas</name><argument_list pos:start="1739:21" pos:end="1739:27">(<argument pos:start="1739:22" pos:end="1739:22"><expr pos:start="1739:22" pos:end="1739:22"><name pos:start="1739:22" pos:end="1739:22">s</name></expr></argument>, <argument pos:start="1739:25" pos:end="1739:26"><expr pos:start="1739:25" pos:end="1739:26"><name pos:start="1739:25" pos:end="1739:26">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="1740:9" pos:end="1740:14">break;</break>
    <case pos:start="1741:5" pos:end="1741:14">case <expr pos:start="1741:10" pos:end="1741:13"><literal type="number" pos:start="1741:10" pos:end="1741:13">0xa6</literal></expr>:</case> <comment type="block" pos:start="1741:16" pos:end="1741:26">/* cmpsS */</comment>
    <case pos:start="1742:5" pos:end="1742:14">case <expr pos:start="1742:10" pos:end="1742:13"><literal type="number" pos:start="1742:10" pos:end="1742:13">0xa7</literal></expr>:</case>
        <if_stmt pos:start="1743:9" pos:end="1746:33"><if pos:start="1743:9" pos:end="1744:25">if <condition pos:start="1743:12" pos:end="1743:25">(<expr pos:start="1743:13" pos:end="1743:24"><operator pos:start="1743:13" pos:end="1743:13">(</operator><name pos:start="1743:14" pos:end="1743:14">b</name> <operator pos:start="1743:16" pos:end="1743:16">&amp;</operator> <literal type="number" pos:start="1743:18" pos:end="1743:18">1</literal><operator pos:start="1743:19" pos:end="1743:19">)</operator> <operator pos:start="1743:21" pos:end="1743:22">==</operator> <literal type="number" pos:start="1743:24" pos:end="1743:24">0</literal></expr>)</condition><block type="pseudo" pos:start="1744:13" pos:end="1744:25"><block_content pos:start="1744:13" pos:end="1744:25">
            <expr_stmt pos:start="1744:13" pos:end="1744:25"><expr pos:start="1744:13" pos:end="1744:24"><name pos:start="1744:13" pos:end="1744:14">ot</name> <operator pos:start="1744:16" pos:end="1744:16">=</operator> <name pos:start="1744:18" pos:end="1744:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>
        <else pos:start="1745:9" pos:end="1746:33">else<block type="pseudo" pos:start="1746:13" pos:end="1746:33"><block_content pos:start="1746:13" pos:end="1746:33">
            <expr_stmt pos:start="1746:13" pos:end="1746:33"><expr pos:start="1746:13" pos:end="1746:32"><name pos:start="1746:13" pos:end="1746:14">ot</name> <operator pos:start="1746:16" pos:end="1746:16">=</operator> <name pos:start="1746:18" pos:end="1746:22">dflag</name> <operator pos:start="1746:24" pos:end="1746:24">+</operator> <name pos:start="1746:26" pos:end="1746:32">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <if_stmt pos:start="1747:9" pos:end="3141:17"><if pos:start="1747:9" pos:end="1749:9">if <condition pos:start="1747:12" pos:end="1747:36">(<expr pos:start="1747:13" pos:end="1747:35"><name pos:start="1747:13" pos:end="1747:20">prefixes</name> <operator pos:start="1747:22" pos:end="1747:22">&amp;</operator> <name pos:start="1747:24" pos:end="1747:35">PREFIX_REPNZ</name></expr>)</condition> <block pos:start="1747:38" pos:end="1749:9">{<block_content pos:start="1748:13" pos:end="1748:79">
            <expr_stmt pos:start="1748:13" pos:end="1748:79"><expr pos:start="1748:13" pos:end="1748:78"><call pos:start="1748:13" pos:end="1748:78"><name pos:start="1748:13" pos:end="1748:25">gen_repz_cmps</name><argument_list pos:start="1748:26" pos:end="1748:78">(<argument pos:start="1748:27" pos:end="1748:27"><expr pos:start="1748:27" pos:end="1748:27"><name pos:start="1748:27" pos:end="1748:27">s</name></expr></argument>, <argument pos:start="1748:30" pos:end="1748:31"><expr pos:start="1748:30" pos:end="1748:31"><name pos:start="1748:30" pos:end="1748:31">ot</name></expr></argument>, <argument pos:start="1748:34" pos:end="1748:54"><expr pos:start="1748:34" pos:end="1748:54"><name pos:start="1748:34" pos:end="1748:41">pc_start</name> <operator pos:start="1748:43" pos:end="1748:43">-</operator> <name pos:start="1748:45" pos:end="1748:54"><name pos:start="1748:45" pos:end="1748:45">s</name><operator pos:start="1748:46" pos:end="1748:47">-&gt;</operator><name pos:start="1748:48" pos:end="1748:54">cs_base</name></name></expr></argument>, <argument pos:start="1748:57" pos:end="1748:74"><expr pos:start="1748:57" pos:end="1748:74"><name pos:start="1748:57" pos:end="1748:61"><name pos:start="1748:57" pos:end="1748:57">s</name><operator pos:start="1748:58" pos:end="1748:59">-&gt;</operator><name pos:start="1748:60" pos:end="1748:61">pc</name></name> <operator pos:start="1748:63" pos:end="1748:63">-</operator> <name pos:start="1748:65" pos:end="1748:74"><name pos:start="1748:65" pos:end="1748:65">s</name><operator pos:start="1748:66" pos:end="1748:67">-&gt;</operator><name pos:start="1748:68" pos:end="1748:74">cs_base</name></name></expr></argument>, <argument pos:start="1748:77" pos:end="1748:77"><expr pos:start="1748:77" pos:end="1748:77"><literal type="number" pos:start="1748:77" pos:end="1748:77">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="1749:11" pos:end="1751:9">else if <condition pos:start="1749:19" pos:end="1749:42">(<expr pos:start="1749:20" pos:end="1749:41"><name pos:start="1749:20" pos:end="1749:27">prefixes</name> <operator pos:start="1749:29" pos:end="1749:29">&amp;</operator> <name pos:start="1749:31" pos:end="1749:41">PREFIX_REPZ</name></expr>)</condition> <block pos:start="1749:44" pos:end="1751:9">{<block_content pos:start="1750:13" pos:end="1750:79">
            <expr_stmt pos:start="1750:13" pos:end="1750:79"><expr pos:start="1750:13" pos:end="1750:78"><call pos:start="1750:13" pos:end="1750:78"><name pos:start="1750:13" pos:end="1750:25">gen_repz_cmps</name><argument_list pos:start="1750:26" pos:end="1750:78">(<argument pos:start="1750:27" pos:end="1750:27"><expr pos:start="1750:27" pos:end="1750:27"><name pos:start="1750:27" pos:end="1750:27">s</name></expr></argument>, <argument pos:start="1750:30" pos:end="1750:31"><expr pos:start="1750:30" pos:end="1750:31"><name pos:start="1750:30" pos:end="1750:31">ot</name></expr></argument>, <argument pos:start="1750:34" pos:end="1750:54"><expr pos:start="1750:34" pos:end="1750:54"><name pos:start="1750:34" pos:end="1750:41">pc_start</name> <operator pos:start="1750:43" pos:end="1750:43">-</operator> <name pos:start="1750:45" pos:end="1750:54"><name pos:start="1750:45" pos:end="1750:45">s</name><operator pos:start="1750:46" pos:end="1750:47">-&gt;</operator><name pos:start="1750:48" pos:end="1750:54">cs_base</name></name></expr></argument>, <argument pos:start="1750:57" pos:end="1750:74"><expr pos:start="1750:57" pos:end="1750:74"><name pos:start="1750:57" pos:end="1750:61"><name pos:start="1750:57" pos:end="1750:57">s</name><operator pos:start="1750:58" pos:end="1750:59">-&gt;</operator><name pos:start="1750:60" pos:end="1750:61">pc</name></name> <operator pos:start="1750:63" pos:end="1750:63">-</operator> <name pos:start="1750:65" pos:end="1750:74"><name pos:start="1750:65" pos:end="1750:65">s</name><operator pos:start="1750:66" pos:end="1750:67">-&gt;</operator><name pos:start="1750:68" pos:end="1750:74">cs_base</name></name></expr></argument>, <argument pos:start="1750:77" pos:end="1750:77"><expr pos:start="1750:77" pos:end="1750:77"><literal type="number" pos:start="1750:77" pos:end="1750:77">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="1751:11" pos:end="3141:17">else <block pos:start="1751:16" pos:end="3141:17">{<block_content pos:start="1752:13" pos:end="3141:17">
            <expr_stmt pos:start="1752:13" pos:end="1752:28"><expr pos:start="1752:13" pos:end="1752:27"><call pos:start="1752:13" pos:end="1752:27"><name pos:start="1752:13" pos:end="1752:20">gen_cmps</name><argument_list pos:start="1752:21" pos:end="1752:27">(<argument pos:start="1752:22" pos:end="1752:22"><expr pos:start="1752:22" pos:end="1752:22"><name pos:start="1752:22" pos:end="1752:22">s</name></expr></argument>, <argument pos:start="1752:25" pos:end="1752:26"><expr pos:start="1752:25" pos:end="1752:26"><name pos:start="1752:25" pos:end="1752:26">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="1753:9" pos:end="1753:14">break;</break>
    <case pos:start="1754:5" pos:end="1754:14">case <expr pos:start="1754:10" pos:end="1754:13"><literal type="number" pos:start="1754:10" pos:end="1754:13">0x6c</literal></expr>:</case> <comment type="block" pos:start="1754:16" pos:end="1754:25">/* insS */</comment>
    <case pos:start="1755:5" pos:end="1755:14">case <expr pos:start="1755:10" pos:end="1755:13"><literal type="number" pos:start="1755:10" pos:end="1755:13">0x6d</literal></expr>:</case>
        <if_stmt pos:start="1756:9" pos:end="1759:43"><if pos:start="1756:9" pos:end="1757:25">if <condition pos:start="1756:12" pos:end="1756:25">(<expr pos:start="1756:13" pos:end="1756:24"><operator pos:start="1756:13" pos:end="1756:13">(</operator><name pos:start="1756:14" pos:end="1756:14">b</name> <operator pos:start="1756:16" pos:end="1756:16">&amp;</operator> <literal type="number" pos:start="1756:18" pos:end="1756:18">1</literal><operator pos:start="1756:19" pos:end="1756:19">)</operator> <operator pos:start="1756:21" pos:end="1756:22">==</operator> <literal type="number" pos:start="1756:24" pos:end="1756:24">0</literal></expr>)</condition><block type="pseudo" pos:start="1757:13" pos:end="1757:25"><block_content pos:start="1757:13" pos:end="1757:25">
            <expr_stmt pos:start="1757:13" pos:end="1757:25"><expr pos:start="1757:13" pos:end="1757:24"><name pos:start="1757:13" pos:end="1757:14">ot</name> <operator pos:start="1757:16" pos:end="1757:16">=</operator> <name pos:start="1757:18" pos:end="1757:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>
        <else pos:start="1758:9" pos:end="1759:43">else<block type="pseudo" pos:start="1759:13" pos:end="1759:43"><block_content pos:start="1759:13" pos:end="1759:43">
            <expr_stmt pos:start="1759:13" pos:end="1759:43"><expr pos:start="1759:13" pos:end="1759:42"><name pos:start="1759:13" pos:end="1759:14">ot</name> <operator pos:start="1759:16" pos:end="1759:16">=</operator> <ternary pos:start="1759:18" pos:end="1759:42"><condition pos:start="1759:18" pos:end="1759:24"><expr pos:start="1759:18" pos:end="1759:22"><name pos:start="1759:18" pos:end="1759:22">dflag</name></expr> ?</condition><then pos:start="1759:26" pos:end="1759:32"> <expr pos:start="1759:26" pos:end="1759:32"><name pos:start="1759:26" pos:end="1759:32">OT_LONG</name></expr> </then><else pos:start="1759:34" pos:end="1759:42">: <expr pos:start="1759:36" pos:end="1759:42"><name pos:start="1759:36" pos:end="1759:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt pos:start="1760:9" pos:end="1760:45"><expr pos:start="1760:9" pos:end="1760:44"><call pos:start="1760:9" pos:end="1760:44"><name pos:start="1760:9" pos:end="1760:25">gen_op_mov_TN_reg</name><argument_list pos:start="1760:26" pos:end="1760:44">(<argument pos:start="1760:27" pos:end="1760:33"><expr pos:start="1760:27" pos:end="1760:33"><name pos:start="1760:27" pos:end="1760:33">OT_WORD</name></expr></argument>, <argument pos:start="1760:36" pos:end="1760:36"><expr pos:start="1760:36" pos:end="1760:36"><literal type="number" pos:start="1760:36" pos:end="1760:36">0</literal></expr></argument>, <argument pos:start="1760:39" pos:end="1760:43"><expr pos:start="1760:39" pos:end="1760:43"><name pos:start="1760:39" pos:end="1760:43">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1761:9" pos:end="1761:30"><expr pos:start="1761:9" pos:end="1761:29"><call pos:start="1761:9" pos:end="1761:29"><name pos:start="1761:9" pos:end="1761:27">gen_op_andl_T0_ffff</name><argument_list pos:start="1761:28" pos:end="1761:29">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1762:9" pos:end="1763:68"><expr pos:start="1762:9" pos:end="1763:67"><call pos:start="1762:9" pos:end="1763:67"><name pos:start="1762:9" pos:end="1762:20">gen_check_io</name><argument_list pos:start="1762:21" pos:end="1763:67">(<argument pos:start="1762:22" pos:end="1762:22"><expr pos:start="1762:22" pos:end="1762:22"><name pos:start="1762:22" pos:end="1762:22">s</name></expr></argument>, <argument pos:start="1762:25" pos:end="1762:26"><expr pos:start="1762:25" pos:end="1762:26"><name pos:start="1762:25" pos:end="1762:26">ot</name></expr></argument>, <argument pos:start="1762:29" pos:end="1762:49"><expr pos:start="1762:29" pos:end="1762:49"><name pos:start="1762:29" pos:end="1762:36">pc_start</name> <operator pos:start="1762:38" pos:end="1762:38">-</operator> <name pos:start="1762:40" pos:end="1762:49"><name pos:start="1762:40" pos:end="1762:40">s</name><operator pos:start="1762:41" pos:end="1762:42">-&gt;</operator><name pos:start="1762:43" pos:end="1762:49">cs_base</name></name></expr></argument>, 
                     <argument pos:start="1763:22" pos:end="1763:66"><expr pos:start="1763:22" pos:end="1763:66"><name pos:start="1763:22" pos:end="1763:39">SVM_IOIO_TYPE_MASK</name> <operator pos:start="1763:41" pos:end="1763:41">|</operator> <call pos:start="1763:43" pos:end="1763:62"><name pos:start="1763:43" pos:end="1763:52">svm_is_rep</name><argument_list pos:start="1763:53" pos:end="1763:62">(<argument pos:start="1763:54" pos:end="1763:61"><expr pos:start="1763:54" pos:end="1763:61"><name pos:start="1763:54" pos:end="1763:61">prefixes</name></expr></argument>)</argument_list></call> <operator pos:start="1763:64" pos:end="1763:64">|</operator> <literal type="number" pos:start="1763:66" pos:end="1763:66">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1764:9" pos:end="3141:17"><if pos:start="1764:9" pos:end="1766:9">if <condition pos:start="1764:12" pos:end="1764:52">(<expr pos:start="1764:13" pos:end="1764:51"><name pos:start="1764:13" pos:end="1764:20">prefixes</name> <operator pos:start="1764:22" pos:end="1764:22">&amp;</operator> <operator pos:start="1764:24" pos:end="1764:24">(</operator><name pos:start="1764:25" pos:end="1764:35">PREFIX_REPZ</name> <operator pos:start="1764:37" pos:end="1764:37">|</operator> <name pos:start="1764:39" pos:end="1764:50">PREFIX_REPNZ</name><operator pos:start="1764:51" pos:end="1764:51">)</operator></expr>)</condition> <block pos:start="1764:54" pos:end="1766:9">{<block_content pos:start="1765:13" pos:end="1765:75">
            <expr_stmt pos:start="1765:13" pos:end="1765:75"><expr pos:start="1765:13" pos:end="1765:74"><call pos:start="1765:13" pos:end="1765:74"><name pos:start="1765:13" pos:end="1765:24">gen_repz_ins</name><argument_list pos:start="1765:25" pos:end="1765:74">(<argument pos:start="1765:26" pos:end="1765:26"><expr pos:start="1765:26" pos:end="1765:26"><name pos:start="1765:26" pos:end="1765:26">s</name></expr></argument>, <argument pos:start="1765:29" pos:end="1765:30"><expr pos:start="1765:29" pos:end="1765:30"><name pos:start="1765:29" pos:end="1765:30">ot</name></expr></argument>, <argument pos:start="1765:33" pos:end="1765:53"><expr pos:start="1765:33" pos:end="1765:53"><name pos:start="1765:33" pos:end="1765:40">pc_start</name> <operator pos:start="1765:42" pos:end="1765:42">-</operator> <name pos:start="1765:44" pos:end="1765:53"><name pos:start="1765:44" pos:end="1765:44">s</name><operator pos:start="1765:45" pos:end="1765:46">-&gt;</operator><name pos:start="1765:47" pos:end="1765:53">cs_base</name></name></expr></argument>, <argument pos:start="1765:56" pos:end="1765:73"><expr pos:start="1765:56" pos:end="1765:73"><name pos:start="1765:56" pos:end="1765:60"><name pos:start="1765:56" pos:end="1765:56">s</name><operator pos:start="1765:57" pos:end="1765:58">-&gt;</operator><name pos:start="1765:59" pos:end="1765:60">pc</name></name> <operator pos:start="1765:62" pos:end="1765:62">-</operator> <name pos:start="1765:64" pos:end="1765:73"><name pos:start="1765:64" pos:end="1765:64">s</name><operator pos:start="1765:65" pos:end="1765:66">-&gt;</operator><name pos:start="1765:67" pos:end="1765:73">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="1766:11" pos:end="3141:17">else <block pos:start="1766:16" pos:end="3141:17">{<block_content pos:start="1767:13" pos:end="3141:17">
            <expr_stmt pos:start="1767:13" pos:end="1767:27"><expr pos:start="1767:13" pos:end="1767:26"><call pos:start="1767:13" pos:end="1767:26"><name pos:start="1767:13" pos:end="1767:19">gen_ins</name><argument_list pos:start="1767:20" pos:end="1767:26">(<argument pos:start="1767:21" pos:end="1767:21"><expr pos:start="1767:21" pos:end="1767:21"><name pos:start="1767:21" pos:end="1767:21">s</name></expr></argument>, <argument pos:start="1767:24" pos:end="1767:25"><expr pos:start="1767:24" pos:end="1767:25"><name pos:start="1767:24" pos:end="1767:25">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="1768:13" pos:end="3141:17"><if pos:start="1768:13" pos:end="3141:17">if <condition pos:start="1768:16" pos:end="1768:27">(<expr pos:start="1768:17" pos:end="1768:26"><name pos:start="1768:17" pos:end="1768:26">use_icount</name></expr>)</condition> <block pos:start="1768:29" pos:end="3141:17">{<block_content pos:start="1769:17" pos:end="3141:17">
                <expr_stmt pos:start="1769:17" pos:end="1769:47"><expr pos:start="1769:17" pos:end="1769:46"><call pos:start="1769:17" pos:end="1769:46"><name pos:start="1769:17" pos:end="1769:23">gen_jmp</name><argument_list pos:start="1769:24" pos:end="1769:46">(<argument pos:start="1769:25" pos:end="1769:25"><expr pos:start="1769:25" pos:end="1769:25"><name pos:start="1769:25" pos:end="1769:25">s</name></expr></argument>, <argument pos:start="1769:28" pos:end="1769:45"><expr pos:start="1769:28" pos:end="1769:45"><name pos:start="1769:28" pos:end="1769:32"><name pos:start="1769:28" pos:end="1769:28">s</name><operator pos:start="1769:29" pos:end="1769:30">-&gt;</operator><name pos:start="1769:31" pos:end="1769:32">pc</name></name> <operator pos:start="1769:34" pos:end="1769:34">-</operator> <name pos:start="1769:36" pos:end="1769:45"><name pos:start="1769:36" pos:end="1769:36">s</name><operator pos:start="1769:37" pos:end="1769:38">-&gt;</operator><name pos:start="1769:39" pos:end="1769:45">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="1770:9" pos:end="1770:14">break;</break>
    <case pos:start="1771:5" pos:end="1771:14">case <expr pos:start="1771:10" pos:end="1771:13"><literal type="number" pos:start="1771:10" pos:end="1771:13">0x6e</literal></expr>:</case> <comment type="block" pos:start="1771:16" pos:end="1771:26">/* outsS */</comment>
    <case pos:start="1772:5" pos:end="1772:14">case <expr pos:start="1772:10" pos:end="1772:13"><literal type="number" pos:start="1772:10" pos:end="1772:13">0x6f</literal></expr>:</case>
        <if_stmt pos:start="1773:9" pos:end="1776:43"><if pos:start="1773:9" pos:end="1774:25">if <condition pos:start="1773:12" pos:end="1773:25">(<expr pos:start="1773:13" pos:end="1773:24"><operator pos:start="1773:13" pos:end="1773:13">(</operator><name pos:start="1773:14" pos:end="1773:14">b</name> <operator pos:start="1773:16" pos:end="1773:16">&amp;</operator> <literal type="number" pos:start="1773:18" pos:end="1773:18">1</literal><operator pos:start="1773:19" pos:end="1773:19">)</operator> <operator pos:start="1773:21" pos:end="1773:22">==</operator> <literal type="number" pos:start="1773:24" pos:end="1773:24">0</literal></expr>)</condition><block type="pseudo" pos:start="1774:13" pos:end="1774:25"><block_content pos:start="1774:13" pos:end="1774:25">
            <expr_stmt pos:start="1774:13" pos:end="1774:25"><expr pos:start="1774:13" pos:end="1774:24"><name pos:start="1774:13" pos:end="1774:14">ot</name> <operator pos:start="1774:16" pos:end="1774:16">=</operator> <name pos:start="1774:18" pos:end="1774:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>
        <else pos:start="1775:9" pos:end="1776:43">else<block type="pseudo" pos:start="1776:13" pos:end="1776:43"><block_content pos:start="1776:13" pos:end="1776:43">
            <expr_stmt pos:start="1776:13" pos:end="1776:43"><expr pos:start="1776:13" pos:end="1776:42"><name pos:start="1776:13" pos:end="1776:14">ot</name> <operator pos:start="1776:16" pos:end="1776:16">=</operator> <ternary pos:start="1776:18" pos:end="1776:42"><condition pos:start="1776:18" pos:end="1776:24"><expr pos:start="1776:18" pos:end="1776:22"><name pos:start="1776:18" pos:end="1776:22">dflag</name></expr> ?</condition><then pos:start="1776:26" pos:end="1776:32"> <expr pos:start="1776:26" pos:end="1776:32"><name pos:start="1776:26" pos:end="1776:32">OT_LONG</name></expr> </then><else pos:start="1776:34" pos:end="1776:42">: <expr pos:start="1776:36" pos:end="1776:42"><name pos:start="1776:36" pos:end="1776:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt pos:start="1777:9" pos:end="1777:45"><expr pos:start="1777:9" pos:end="1777:44"><call pos:start="1777:9" pos:end="1777:44"><name pos:start="1777:9" pos:end="1777:25">gen_op_mov_TN_reg</name><argument_list pos:start="1777:26" pos:end="1777:44">(<argument pos:start="1777:27" pos:end="1777:33"><expr pos:start="1777:27" pos:end="1777:33"><name pos:start="1777:27" pos:end="1777:33">OT_WORD</name></expr></argument>, <argument pos:start="1777:36" pos:end="1777:36"><expr pos:start="1777:36" pos:end="1777:36"><literal type="number" pos:start="1777:36" pos:end="1777:36">0</literal></expr></argument>, <argument pos:start="1777:39" pos:end="1777:43"><expr pos:start="1777:39" pos:end="1777:43"><name pos:start="1777:39" pos:end="1777:43">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1778:9" pos:end="1778:30"><expr pos:start="1778:9" pos:end="1778:29"><call pos:start="1778:9" pos:end="1778:29"><name pos:start="1778:9" pos:end="1778:27">gen_op_andl_T0_ffff</name><argument_list pos:start="1778:28" pos:end="1778:29">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1779:9" pos:end="1780:47"><expr pos:start="1779:9" pos:end="1780:46"><call pos:start="1779:9" pos:end="1780:46"><name pos:start="1779:9" pos:end="1779:20">gen_check_io</name><argument_list pos:start="1779:21" pos:end="1780:46">(<argument pos:start="1779:22" pos:end="1779:22"><expr pos:start="1779:22" pos:end="1779:22"><name pos:start="1779:22" pos:end="1779:22">s</name></expr></argument>, <argument pos:start="1779:25" pos:end="1779:26"><expr pos:start="1779:25" pos:end="1779:26"><name pos:start="1779:25" pos:end="1779:26">ot</name></expr></argument>, <argument pos:start="1779:29" pos:end="1779:49"><expr pos:start="1779:29" pos:end="1779:49"><name pos:start="1779:29" pos:end="1779:36">pc_start</name> <operator pos:start="1779:38" pos:end="1779:38">-</operator> <name pos:start="1779:40" pos:end="1779:49"><name pos:start="1779:40" pos:end="1779:40">s</name><operator pos:start="1779:41" pos:end="1779:42">-&gt;</operator><name pos:start="1779:43" pos:end="1779:49">cs_base</name></name></expr></argument>,
                     <argument pos:start="1780:22" pos:end="1780:45"><expr pos:start="1780:22" pos:end="1780:45"><call pos:start="1780:22" pos:end="1780:41"><name pos:start="1780:22" pos:end="1780:31">svm_is_rep</name><argument_list pos:start="1780:32" pos:end="1780:41">(<argument pos:start="1780:33" pos:end="1780:40"><expr pos:start="1780:33" pos:end="1780:40"><name pos:start="1780:33" pos:end="1780:40">prefixes</name></expr></argument>)</argument_list></call> <operator pos:start="1780:43" pos:end="1780:43">|</operator> <literal type="number" pos:start="1780:45" pos:end="1780:45">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1781:9" pos:end="3141:17"><if pos:start="1781:9" pos:end="1783:9">if <condition pos:start="1781:12" pos:end="1781:52">(<expr pos:start="1781:13" pos:end="1781:51"><name pos:start="1781:13" pos:end="1781:20">prefixes</name> <operator pos:start="1781:22" pos:end="1781:22">&amp;</operator> <operator pos:start="1781:24" pos:end="1781:24">(</operator><name pos:start="1781:25" pos:end="1781:35">PREFIX_REPZ</name> <operator pos:start="1781:37" pos:end="1781:37">|</operator> <name pos:start="1781:39" pos:end="1781:50">PREFIX_REPNZ</name><operator pos:start="1781:51" pos:end="1781:51">)</operator></expr>)</condition> <block pos:start="1781:54" pos:end="1783:9">{<block_content pos:start="1782:13" pos:end="1782:76">
            <expr_stmt pos:start="1782:13" pos:end="1782:76"><expr pos:start="1782:13" pos:end="1782:75"><call pos:start="1782:13" pos:end="1782:75"><name pos:start="1782:13" pos:end="1782:25">gen_repz_outs</name><argument_list pos:start="1782:26" pos:end="1782:75">(<argument pos:start="1782:27" pos:end="1782:27"><expr pos:start="1782:27" pos:end="1782:27"><name pos:start="1782:27" pos:end="1782:27">s</name></expr></argument>, <argument pos:start="1782:30" pos:end="1782:31"><expr pos:start="1782:30" pos:end="1782:31"><name pos:start="1782:30" pos:end="1782:31">ot</name></expr></argument>, <argument pos:start="1782:34" pos:end="1782:54"><expr pos:start="1782:34" pos:end="1782:54"><name pos:start="1782:34" pos:end="1782:41">pc_start</name> <operator pos:start="1782:43" pos:end="1782:43">-</operator> <name pos:start="1782:45" pos:end="1782:54"><name pos:start="1782:45" pos:end="1782:45">s</name><operator pos:start="1782:46" pos:end="1782:47">-&gt;</operator><name pos:start="1782:48" pos:end="1782:54">cs_base</name></name></expr></argument>, <argument pos:start="1782:57" pos:end="1782:74"><expr pos:start="1782:57" pos:end="1782:74"><name pos:start="1782:57" pos:end="1782:61"><name pos:start="1782:57" pos:end="1782:57">s</name><operator pos:start="1782:58" pos:end="1782:59">-&gt;</operator><name pos:start="1782:60" pos:end="1782:61">pc</name></name> <operator pos:start="1782:63" pos:end="1782:63">-</operator> <name pos:start="1782:65" pos:end="1782:74"><name pos:start="1782:65" pos:end="1782:65">s</name><operator pos:start="1782:66" pos:end="1782:67">-&gt;</operator><name pos:start="1782:68" pos:end="1782:74">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="1783:11" pos:end="3141:17">else <block pos:start="1783:16" pos:end="3141:17">{<block_content pos:start="1784:13" pos:end="3141:17">
            <expr_stmt pos:start="1784:13" pos:end="1784:28"><expr pos:start="1784:13" pos:end="1784:27"><call pos:start="1784:13" pos:end="1784:27"><name pos:start="1784:13" pos:end="1784:20">gen_outs</name><argument_list pos:start="1784:21" pos:end="1784:27">(<argument pos:start="1784:22" pos:end="1784:22"><expr pos:start="1784:22" pos:end="1784:22"><name pos:start="1784:22" pos:end="1784:22">s</name></expr></argument>, <argument pos:start="1784:25" pos:end="1784:26"><expr pos:start="1784:25" pos:end="1784:26"><name pos:start="1784:25" pos:end="1784:26">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="1785:13" pos:end="3141:17"><if pos:start="1785:13" pos:end="3141:17">if <condition pos:start="1785:16" pos:end="1785:27">(<expr pos:start="1785:17" pos:end="1785:26"><name pos:start="1785:17" pos:end="1785:26">use_icount</name></expr>)</condition> <block pos:start="1785:29" pos:end="3141:17">{<block_content pos:start="1786:17" pos:end="3141:17">
                <expr_stmt pos:start="1786:17" pos:end="1786:47"><expr pos:start="1786:17" pos:end="1786:46"><call pos:start="1786:17" pos:end="1786:46"><name pos:start="1786:17" pos:end="1786:23">gen_jmp</name><argument_list pos:start="1786:24" pos:end="1786:46">(<argument pos:start="1786:25" pos:end="1786:25"><expr pos:start="1786:25" pos:end="1786:25"><name pos:start="1786:25" pos:end="1786:25">s</name></expr></argument>, <argument pos:start="1786:28" pos:end="1786:45"><expr pos:start="1786:28" pos:end="1786:45"><name pos:start="1786:28" pos:end="1786:32"><name pos:start="1786:28" pos:end="1786:28">s</name><operator pos:start="1786:29" pos:end="1786:30">-&gt;</operator><name pos:start="1786:31" pos:end="1786:32">pc</name></name> <operator pos:start="1786:34" pos:end="1786:34">-</operator> <name pos:start="1786:36" pos:end="1786:45"><name pos:start="1786:36" pos:end="1786:36">s</name><operator pos:start="1786:37" pos:end="1786:38">-&gt;</operator><name pos:start="1786:39" pos:end="1786:45">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="1787:9" pos:end="1787:14">break;</break>
        <comment type="block" format="doxygen" pos:start="1788:9" pos:end="1788:34">/************************/</comment>
        <comment type="block" pos:start="1789:9" pos:end="1789:22">/* port I/O */</comment>
    <case pos:start="1790:5" pos:end="1790:14">case <expr pos:start="1790:10" pos:end="1790:13"><literal type="number" pos:start="1790:10" pos:end="1790:13">0xe4</literal></expr>:</case>
    <case pos:start="1791:5" pos:end="1791:14">case <expr pos:start="1791:10" pos:end="1791:13"><literal type="number" pos:start="1791:10" pos:end="1791:13">0xe5</literal></expr>:</case>
        <if_stmt pos:start="1792:9" pos:end="1795:43"><if pos:start="1792:9" pos:end="1793:25">if <condition pos:start="1792:12" pos:end="1792:25">(<expr pos:start="1792:13" pos:end="1792:24"><operator pos:start="1792:13" pos:end="1792:13">(</operator><name pos:start="1792:14" pos:end="1792:14">b</name> <operator pos:start="1792:16" pos:end="1792:16">&amp;</operator> <literal type="number" pos:start="1792:18" pos:end="1792:18">1</literal><operator pos:start="1792:19" pos:end="1792:19">)</operator> <operator pos:start="1792:21" pos:end="1792:22">==</operator> <literal type="number" pos:start="1792:24" pos:end="1792:24">0</literal></expr>)</condition><block type="pseudo" pos:start="1793:13" pos:end="1793:25"><block_content pos:start="1793:13" pos:end="1793:25">
            <expr_stmt pos:start="1793:13" pos:end="1793:25"><expr pos:start="1793:13" pos:end="1793:24"><name pos:start="1793:13" pos:end="1793:14">ot</name> <operator pos:start="1793:16" pos:end="1793:16">=</operator> <name pos:start="1793:18" pos:end="1793:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>
        <else pos:start="1794:9" pos:end="1795:43">else<block type="pseudo" pos:start="1795:13" pos:end="1795:43"><block_content pos:start="1795:13" pos:end="1795:43">
            <expr_stmt pos:start="1795:13" pos:end="1795:43"><expr pos:start="1795:13" pos:end="1795:42"><name pos:start="1795:13" pos:end="1795:14">ot</name> <operator pos:start="1795:16" pos:end="1795:16">=</operator> <ternary pos:start="1795:18" pos:end="1795:42"><condition pos:start="1795:18" pos:end="1795:24"><expr pos:start="1795:18" pos:end="1795:22"><name pos:start="1795:18" pos:end="1795:22">dflag</name></expr> ?</condition><then pos:start="1795:26" pos:end="1795:32"> <expr pos:start="1795:26" pos:end="1795:32"><name pos:start="1795:26" pos:end="1795:32">OT_LONG</name></expr> </then><else pos:start="1795:34" pos:end="1795:42">: <expr pos:start="1795:36" pos:end="1795:42"><name pos:start="1795:36" pos:end="1795:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt pos:start="1796:9" pos:end="1796:42"><expr pos:start="1796:9" pos:end="1796:41"><name pos:start="1796:9" pos:end="1796:11">val</name> <operator pos:start="1796:13" pos:end="1796:13">=</operator> <call pos:start="1796:15" pos:end="1796:41"><name pos:start="1796:15" pos:end="1796:27">cpu_ldub_code</name><argument_list pos:start="1796:28" pos:end="1796:41">(<argument pos:start="1796:29" pos:end="1796:31"><expr pos:start="1796:29" pos:end="1796:31"><name pos:start="1796:29" pos:end="1796:31">env</name></expr></argument>, <argument pos:start="1796:34" pos:end="1796:40"><expr pos:start="1796:34" pos:end="1796:40"><name pos:start="1796:34" pos:end="1796:38"><name pos:start="1796:34" pos:end="1796:34">s</name><operator pos:start="1796:35" pos:end="1796:36">-&gt;</operator><name pos:start="1796:37" pos:end="1796:38">pc</name></name><operator pos:start="1796:39" pos:end="1796:40">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1797:9" pos:end="1797:31"><expr pos:start="1797:9" pos:end="1797:30"><call pos:start="1797:9" pos:end="1797:30"><name pos:start="1797:9" pos:end="1797:25">gen_op_movl_T0_im</name><argument_list pos:start="1797:26" pos:end="1797:30">(<argument pos:start="1797:27" pos:end="1797:29"><expr pos:start="1797:27" pos:end="1797:29"><name pos:start="1797:27" pos:end="1797:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1798:9" pos:end="1799:64"><expr pos:start="1798:9" pos:end="1799:63"><call pos:start="1798:9" pos:end="1799:63"><name pos:start="1798:9" pos:end="1798:20">gen_check_io</name><argument_list pos:start="1798:21" pos:end="1799:63">(<argument pos:start="1798:22" pos:end="1798:22"><expr pos:start="1798:22" pos:end="1798:22"><name pos:start="1798:22" pos:end="1798:22">s</name></expr></argument>, <argument pos:start="1798:25" pos:end="1798:26"><expr pos:start="1798:25" pos:end="1798:26"><name pos:start="1798:25" pos:end="1798:26">ot</name></expr></argument>, <argument pos:start="1798:29" pos:end="1798:49"><expr pos:start="1798:29" pos:end="1798:49"><name pos:start="1798:29" pos:end="1798:36">pc_start</name> <operator pos:start="1798:38" pos:end="1798:38">-</operator> <name pos:start="1798:40" pos:end="1798:49"><name pos:start="1798:40" pos:end="1798:40">s</name><operator pos:start="1798:41" pos:end="1798:42">-&gt;</operator><name pos:start="1798:43" pos:end="1798:49">cs_base</name></name></expr></argument>,
                     <argument pos:start="1799:22" pos:end="1799:62"><expr pos:start="1799:22" pos:end="1799:62"><name pos:start="1799:22" pos:end="1799:39">SVM_IOIO_TYPE_MASK</name> <operator pos:start="1799:41" pos:end="1799:41">|</operator> <call pos:start="1799:43" pos:end="1799:62"><name pos:start="1799:43" pos:end="1799:52">svm_is_rep</name><argument_list pos:start="1799:53" pos:end="1799:62">(<argument pos:start="1799:54" pos:end="1799:61"><expr pos:start="1799:54" pos:end="1799:61"><name pos:start="1799:54" pos:end="1799:61">prefixes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1800:9" pos:end="1801:27"><if pos:start="1800:9" pos:end="1801:27">if <condition pos:start="1800:12" pos:end="1800:23">(<expr pos:start="1800:13" pos:end="1800:22"><name pos:start="1800:13" pos:end="1800:22">use_icount</name></expr>)</condition><block type="pseudo" pos:start="1801:13" pos:end="1801:27"><block_content pos:start="1801:13" pos:end="1801:27">
            <expr_stmt pos:start="1801:13" pos:end="1801:27"><expr pos:start="1801:13" pos:end="1801:26"><call pos:start="1801:13" pos:end="1801:26"><name pos:start="1801:13" pos:end="1801:24">gen_io_start</name><argument_list pos:start="1801:25" pos:end="1801:26">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="1802:9" pos:end="1802:53"><expr pos:start="1802:9" pos:end="1802:52"><call pos:start="1802:9" pos:end="1802:52"><name pos:start="1802:9" pos:end="1802:28">tcg_gen_trunc_tl_i32</name><argument_list pos:start="1802:29" pos:end="1802:52">(<argument pos:start="1802:30" pos:end="1802:41"><expr pos:start="1802:30" pos:end="1802:41"><name pos:start="1802:30" pos:end="1802:41">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1802:44" pos:end="1802:51"><expr pos:start="1802:44" pos:end="1802:51"><name pos:start="1802:44" pos:end="1802:51"><name pos:start="1802:44" pos:end="1802:48">cpu_T</name><index pos:start="1802:49" pos:end="1802:51">[<expr pos:start="1802:50" pos:end="1802:50"><literal type="number" pos:start="1802:50" pos:end="1802:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1803:9" pos:end="1803:55"><expr pos:start="1803:9" pos:end="1803:54"><call pos:start="1803:9" pos:end="1803:54"><name pos:start="1803:9" pos:end="1803:26">gen_helper_in_func</name><argument_list pos:start="1803:27" pos:end="1803:54">(<argument pos:start="1803:28" pos:end="1803:29"><expr pos:start="1803:28" pos:end="1803:29"><name pos:start="1803:28" pos:end="1803:29">ot</name></expr></argument>, <argument pos:start="1803:32" pos:end="1803:39"><expr pos:start="1803:32" pos:end="1803:39"><name pos:start="1803:32" pos:end="1803:39"><name pos:start="1803:32" pos:end="1803:36">cpu_T</name><index pos:start="1803:37" pos:end="1803:39">[<expr pos:start="1803:38" pos:end="1803:38"><literal type="number" pos:start="1803:38" pos:end="1803:38">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="1803:42" pos:end="1803:53"><expr pos:start="1803:42" pos:end="1803:53"><name pos:start="1803:42" pos:end="1803:53">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1804:9" pos:end="1804:37"><expr pos:start="1804:9" pos:end="1804:36"><call pos:start="1804:9" pos:end="1804:36"><name pos:start="1804:9" pos:end="1804:25">gen_op_mov_reg_T1</name><argument_list pos:start="1804:26" pos:end="1804:36">(<argument pos:start="1804:27" pos:end="1804:28"><expr pos:start="1804:27" pos:end="1804:28"><name pos:start="1804:27" pos:end="1804:28">ot</name></expr></argument>, <argument pos:start="1804:31" pos:end="1804:35"><expr pos:start="1804:31" pos:end="1804:35"><name pos:start="1804:31" pos:end="1804:35">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1805:9" pos:end="3141:17"><if pos:start="1805:9" pos:end="3141:17">if <condition pos:start="1805:12" pos:end="1805:23">(<expr pos:start="1805:13" pos:end="1805:22"><name pos:start="1805:13" pos:end="1805:22">use_icount</name></expr>)</condition> <block pos:start="1805:25" pos:end="3141:17">{<block_content pos:start="1806:13" pos:end="3141:17">
            <expr_stmt pos:start="1806:13" pos:end="1806:25"><expr pos:start="1806:13" pos:end="1806:24"><call pos:start="1806:13" pos:end="1806:24"><name pos:start="1806:13" pos:end="1806:22">gen_io_end</name><argument_list pos:start="1806:23" pos:end="1806:24">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1807:13" pos:end="1807:43"><expr pos:start="1807:13" pos:end="1807:42"><call pos:start="1807:13" pos:end="1807:42"><name pos:start="1807:13" pos:end="1807:19">gen_jmp</name><argument_list pos:start="1807:20" pos:end="1807:42">(<argument pos:start="1807:21" pos:end="1807:21"><expr pos:start="1807:21" pos:end="1807:21"><name pos:start="1807:21" pos:end="1807:21">s</name></expr></argument>, <argument pos:start="1807:24" pos:end="1807:41"><expr pos:start="1807:24" pos:end="1807:41"><name pos:start="1807:24" pos:end="1807:28"><name pos:start="1807:24" pos:end="1807:24">s</name><operator pos:start="1807:25" pos:end="1807:26">-&gt;</operator><name pos:start="1807:27" pos:end="1807:28">pc</name></name> <operator pos:start="1807:30" pos:end="1807:30">-</operator> <name pos:start="1807:32" pos:end="1807:41"><name pos:start="1807:32" pos:end="1807:32">s</name><operator pos:start="1807:33" pos:end="1807:34">-&gt;</operator><name pos:start="1807:35" pos:end="1807:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="1808:9" pos:end="1808:14">break;</break>
    <case pos:start="1809:5" pos:end="1809:14">case <expr pos:start="1809:10" pos:end="1809:13"><literal type="number" pos:start="1809:10" pos:end="1809:13">0xe6</literal></expr>:</case>
    <case pos:start="1810:5" pos:end="1810:14">case <expr pos:start="1810:10" pos:end="1810:13"><literal type="number" pos:start="1810:10" pos:end="1810:13">0xe7</literal></expr>:</case>
        <if_stmt pos:start="1811:9" pos:end="1814:43"><if pos:start="1811:9" pos:end="1812:25">if <condition pos:start="1811:12" pos:end="1811:25">(<expr pos:start="1811:13" pos:end="1811:24"><operator pos:start="1811:13" pos:end="1811:13">(</operator><name pos:start="1811:14" pos:end="1811:14">b</name> <operator pos:start="1811:16" pos:end="1811:16">&amp;</operator> <literal type="number" pos:start="1811:18" pos:end="1811:18">1</literal><operator pos:start="1811:19" pos:end="1811:19">)</operator> <operator pos:start="1811:21" pos:end="1811:22">==</operator> <literal type="number" pos:start="1811:24" pos:end="1811:24">0</literal></expr>)</condition><block type="pseudo" pos:start="1812:13" pos:end="1812:25"><block_content pos:start="1812:13" pos:end="1812:25">
            <expr_stmt pos:start="1812:13" pos:end="1812:25"><expr pos:start="1812:13" pos:end="1812:24"><name pos:start="1812:13" pos:end="1812:14">ot</name> <operator pos:start="1812:16" pos:end="1812:16">=</operator> <name pos:start="1812:18" pos:end="1812:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>
        <else pos:start="1813:9" pos:end="1814:43">else<block type="pseudo" pos:start="1814:13" pos:end="1814:43"><block_content pos:start="1814:13" pos:end="1814:43">
            <expr_stmt pos:start="1814:13" pos:end="1814:43"><expr pos:start="1814:13" pos:end="1814:42"><name pos:start="1814:13" pos:end="1814:14">ot</name> <operator pos:start="1814:16" pos:end="1814:16">=</operator> <ternary pos:start="1814:18" pos:end="1814:42"><condition pos:start="1814:18" pos:end="1814:24"><expr pos:start="1814:18" pos:end="1814:22"><name pos:start="1814:18" pos:end="1814:22">dflag</name></expr> ?</condition><then pos:start="1814:26" pos:end="1814:32"> <expr pos:start="1814:26" pos:end="1814:32"><name pos:start="1814:26" pos:end="1814:32">OT_LONG</name></expr> </then><else pos:start="1814:34" pos:end="1814:42">: <expr pos:start="1814:36" pos:end="1814:42"><name pos:start="1814:36" pos:end="1814:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt pos:start="1815:9" pos:end="1815:42"><expr pos:start="1815:9" pos:end="1815:41"><name pos:start="1815:9" pos:end="1815:11">val</name> <operator pos:start="1815:13" pos:end="1815:13">=</operator> <call pos:start="1815:15" pos:end="1815:41"><name pos:start="1815:15" pos:end="1815:27">cpu_ldub_code</name><argument_list pos:start="1815:28" pos:end="1815:41">(<argument pos:start="1815:29" pos:end="1815:31"><expr pos:start="1815:29" pos:end="1815:31"><name pos:start="1815:29" pos:end="1815:31">env</name></expr></argument>, <argument pos:start="1815:34" pos:end="1815:40"><expr pos:start="1815:34" pos:end="1815:40"><name pos:start="1815:34" pos:end="1815:38"><name pos:start="1815:34" pos:end="1815:34">s</name><operator pos:start="1815:35" pos:end="1815:36">-&gt;</operator><name pos:start="1815:37" pos:end="1815:38">pc</name></name><operator pos:start="1815:39" pos:end="1815:40">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1816:9" pos:end="1816:31"><expr pos:start="1816:9" pos:end="1816:30"><call pos:start="1816:9" pos:end="1816:30"><name pos:start="1816:9" pos:end="1816:25">gen_op_movl_T0_im</name><argument_list pos:start="1816:26" pos:end="1816:30">(<argument pos:start="1816:27" pos:end="1816:29"><expr pos:start="1816:27" pos:end="1816:29"><name pos:start="1816:27" pos:end="1816:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1817:9" pos:end="1818:43"><expr pos:start="1817:9" pos:end="1818:42"><call pos:start="1817:9" pos:end="1818:42"><name pos:start="1817:9" pos:end="1817:20">gen_check_io</name><argument_list pos:start="1817:21" pos:end="1818:42">(<argument pos:start="1817:22" pos:end="1817:22"><expr pos:start="1817:22" pos:end="1817:22"><name pos:start="1817:22" pos:end="1817:22">s</name></expr></argument>, <argument pos:start="1817:25" pos:end="1817:26"><expr pos:start="1817:25" pos:end="1817:26"><name pos:start="1817:25" pos:end="1817:26">ot</name></expr></argument>, <argument pos:start="1817:29" pos:end="1817:49"><expr pos:start="1817:29" pos:end="1817:49"><name pos:start="1817:29" pos:end="1817:36">pc_start</name> <operator pos:start="1817:38" pos:end="1817:38">-</operator> <name pos:start="1817:40" pos:end="1817:49"><name pos:start="1817:40" pos:end="1817:40">s</name><operator pos:start="1817:41" pos:end="1817:42">-&gt;</operator><name pos:start="1817:43" pos:end="1817:49">cs_base</name></name></expr></argument>,
                     <argument pos:start="1818:22" pos:end="1818:41"><expr pos:start="1818:22" pos:end="1818:41"><call pos:start="1818:22" pos:end="1818:41"><name pos:start="1818:22" pos:end="1818:31">svm_is_rep</name><argument_list pos:start="1818:32" pos:end="1818:41">(<argument pos:start="1818:33" pos:end="1818:40"><expr pos:start="1818:33" pos:end="1818:40"><name pos:start="1818:33" pos:end="1818:40">prefixes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1819:9" pos:end="1819:40"><expr pos:start="1819:9" pos:end="1819:39"><call pos:start="1819:9" pos:end="1819:39"><name pos:start="1819:9" pos:end="1819:25">gen_op_mov_TN_reg</name><argument_list pos:start="1819:26" pos:end="1819:39">(<argument pos:start="1819:27" pos:end="1819:28"><expr pos:start="1819:27" pos:end="1819:28"><name pos:start="1819:27" pos:end="1819:28">ot</name></expr></argument>, <argument pos:start="1819:31" pos:end="1819:31"><expr pos:start="1819:31" pos:end="1819:31"><literal type="number" pos:start="1819:31" pos:end="1819:31">1</literal></expr></argument>, <argument pos:start="1819:34" pos:end="1819:38"><expr pos:start="1819:34" pos:end="1819:38"><name pos:start="1819:34" pos:end="1819:38">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1820:9" pos:end="1821:27"><if pos:start="1820:9" pos:end="1821:27">if <condition pos:start="1820:12" pos:end="1820:23">(<expr pos:start="1820:13" pos:end="1820:22"><name pos:start="1820:13" pos:end="1820:22">use_icount</name></expr>)</condition><block type="pseudo" pos:start="1821:13" pos:end="1821:27"><block_content pos:start="1821:13" pos:end="1821:27">
            <expr_stmt pos:start="1821:13" pos:end="1821:27"><expr pos:start="1821:13" pos:end="1821:26"><call pos:start="1821:13" pos:end="1821:26"><name pos:start="1821:13" pos:end="1821:24">gen_io_start</name><argument_list pos:start="1821:25" pos:end="1821:26">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="1822:9" pos:end="1822:53"><expr pos:start="1822:9" pos:end="1822:52"><call pos:start="1822:9" pos:end="1822:52"><name pos:start="1822:9" pos:end="1822:28">tcg_gen_trunc_tl_i32</name><argument_list pos:start="1822:29" pos:end="1822:52">(<argument pos:start="1822:30" pos:end="1822:41"><expr pos:start="1822:30" pos:end="1822:41"><name pos:start="1822:30" pos:end="1822:41">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1822:44" pos:end="1822:51"><expr pos:start="1822:44" pos:end="1822:51"><name pos:start="1822:44" pos:end="1822:51"><name pos:start="1822:44" pos:end="1822:48">cpu_T</name><index pos:start="1822:49" pos:end="1822:51">[<expr pos:start="1822:50" pos:end="1822:50"><literal type="number" pos:start="1822:50" pos:end="1822:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1823:9" pos:end="1823:53"><expr pos:start="1823:9" pos:end="1823:52"><call pos:start="1823:9" pos:end="1823:52"><name pos:start="1823:9" pos:end="1823:28">tcg_gen_trunc_tl_i32</name><argument_list pos:start="1823:29" pos:end="1823:52">(<argument pos:start="1823:30" pos:end="1823:41"><expr pos:start="1823:30" pos:end="1823:41"><name pos:start="1823:30" pos:end="1823:41">cpu_tmp3_i32</name></expr></argument>, <argument pos:start="1823:44" pos:end="1823:51"><expr pos:start="1823:44" pos:end="1823:51"><name pos:start="1823:44" pos:end="1823:51"><name pos:start="1823:44" pos:end="1823:48">cpu_T</name><index pos:start="1823:49" pos:end="1823:51">[<expr pos:start="1823:50" pos:end="1823:50"><literal type="number" pos:start="1823:50" pos:end="1823:50">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1824:9" pos:end="1824:60"><expr pos:start="1824:9" pos:end="1824:59"><call pos:start="1824:9" pos:end="1824:59"><name pos:start="1824:9" pos:end="1824:27">gen_helper_out_func</name><argument_list pos:start="1824:28" pos:end="1824:59">(<argument pos:start="1824:29" pos:end="1824:30"><expr pos:start="1824:29" pos:end="1824:30"><name pos:start="1824:29" pos:end="1824:30">ot</name></expr></argument>, <argument pos:start="1824:33" pos:end="1824:44"><expr pos:start="1824:33" pos:end="1824:44"><name pos:start="1824:33" pos:end="1824:44">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1824:47" pos:end="1824:58"><expr pos:start="1824:47" pos:end="1824:58"><name pos:start="1824:47" pos:end="1824:58">cpu_tmp3_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1825:9" pos:end="3141:17"><if pos:start="1825:9" pos:end="3141:17">if <condition pos:start="1825:12" pos:end="1825:23">(<expr pos:start="1825:13" pos:end="1825:22"><name pos:start="1825:13" pos:end="1825:22">use_icount</name></expr>)</condition> <block pos:start="1825:25" pos:end="3141:17">{<block_content pos:start="1826:13" pos:end="3141:17">
            <expr_stmt pos:start="1826:13" pos:end="1826:25"><expr pos:start="1826:13" pos:end="1826:24"><call pos:start="1826:13" pos:end="1826:24"><name pos:start="1826:13" pos:end="1826:22">gen_io_end</name><argument_list pos:start="1826:23" pos:end="1826:24">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1827:13" pos:end="1827:43"><expr pos:start="1827:13" pos:end="1827:42"><call pos:start="1827:13" pos:end="1827:42"><name pos:start="1827:13" pos:end="1827:19">gen_jmp</name><argument_list pos:start="1827:20" pos:end="1827:42">(<argument pos:start="1827:21" pos:end="1827:21"><expr pos:start="1827:21" pos:end="1827:21"><name pos:start="1827:21" pos:end="1827:21">s</name></expr></argument>, <argument pos:start="1827:24" pos:end="1827:41"><expr pos:start="1827:24" pos:end="1827:41"><name pos:start="1827:24" pos:end="1827:28"><name pos:start="1827:24" pos:end="1827:24">s</name><operator pos:start="1827:25" pos:end="1827:26">-&gt;</operator><name pos:start="1827:27" pos:end="1827:28">pc</name></name> <operator pos:start="1827:30" pos:end="1827:30">-</operator> <name pos:start="1827:32" pos:end="1827:41"><name pos:start="1827:32" pos:end="1827:32">s</name><operator pos:start="1827:33" pos:end="1827:34">-&gt;</operator><name pos:start="1827:35" pos:end="1827:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="1828:9" pos:end="1828:14">break;</break>
    <case pos:start="1829:5" pos:end="1829:14">case <expr pos:start="1829:10" pos:end="1829:13"><literal type="number" pos:start="1829:10" pos:end="1829:13">0xec</literal></expr>:</case>
    <case pos:start="1830:5" pos:end="1830:14">case <expr pos:start="1830:10" pos:end="1830:13"><literal type="number" pos:start="1830:10" pos:end="1830:13">0xed</literal></expr>:</case>
        <if_stmt pos:start="1831:9" pos:end="1834:43"><if pos:start="1831:9" pos:end="1832:25">if <condition pos:start="1831:12" pos:end="1831:25">(<expr pos:start="1831:13" pos:end="1831:24"><operator pos:start="1831:13" pos:end="1831:13">(</operator><name pos:start="1831:14" pos:end="1831:14">b</name> <operator pos:start="1831:16" pos:end="1831:16">&amp;</operator> <literal type="number" pos:start="1831:18" pos:end="1831:18">1</literal><operator pos:start="1831:19" pos:end="1831:19">)</operator> <operator pos:start="1831:21" pos:end="1831:22">==</operator> <literal type="number" pos:start="1831:24" pos:end="1831:24">0</literal></expr>)</condition><block type="pseudo" pos:start="1832:13" pos:end="1832:25"><block_content pos:start="1832:13" pos:end="1832:25">
            <expr_stmt pos:start="1832:13" pos:end="1832:25"><expr pos:start="1832:13" pos:end="1832:24"><name pos:start="1832:13" pos:end="1832:14">ot</name> <operator pos:start="1832:16" pos:end="1832:16">=</operator> <name pos:start="1832:18" pos:end="1832:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>
        <else pos:start="1833:9" pos:end="1834:43">else<block type="pseudo" pos:start="1834:13" pos:end="1834:43"><block_content pos:start="1834:13" pos:end="1834:43">
            <expr_stmt pos:start="1834:13" pos:end="1834:43"><expr pos:start="1834:13" pos:end="1834:42"><name pos:start="1834:13" pos:end="1834:14">ot</name> <operator pos:start="1834:16" pos:end="1834:16">=</operator> <ternary pos:start="1834:18" pos:end="1834:42"><condition pos:start="1834:18" pos:end="1834:24"><expr pos:start="1834:18" pos:end="1834:22"><name pos:start="1834:18" pos:end="1834:22">dflag</name></expr> ?</condition><then pos:start="1834:26" pos:end="1834:32"> <expr pos:start="1834:26" pos:end="1834:32"><name pos:start="1834:26" pos:end="1834:32">OT_LONG</name></expr> </then><else pos:start="1834:34" pos:end="1834:42">: <expr pos:start="1834:36" pos:end="1834:42"><name pos:start="1834:36" pos:end="1834:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt pos:start="1835:9" pos:end="1835:45"><expr pos:start="1835:9" pos:end="1835:44"><call pos:start="1835:9" pos:end="1835:44"><name pos:start="1835:9" pos:end="1835:25">gen_op_mov_TN_reg</name><argument_list pos:start="1835:26" pos:end="1835:44">(<argument pos:start="1835:27" pos:end="1835:33"><expr pos:start="1835:27" pos:end="1835:33"><name pos:start="1835:27" pos:end="1835:33">OT_WORD</name></expr></argument>, <argument pos:start="1835:36" pos:end="1835:36"><expr pos:start="1835:36" pos:end="1835:36"><literal type="number" pos:start="1835:36" pos:end="1835:36">0</literal></expr></argument>, <argument pos:start="1835:39" pos:end="1835:43"><expr pos:start="1835:39" pos:end="1835:43"><name pos:start="1835:39" pos:end="1835:43">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1836:9" pos:end="1836:30"><expr pos:start="1836:9" pos:end="1836:29"><call pos:start="1836:9" pos:end="1836:29"><name pos:start="1836:9" pos:end="1836:27">gen_op_andl_T0_ffff</name><argument_list pos:start="1836:28" pos:end="1836:29">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1837:9" pos:end="1838:64"><expr pos:start="1837:9" pos:end="1838:63"><call pos:start="1837:9" pos:end="1838:63"><name pos:start="1837:9" pos:end="1837:20">gen_check_io</name><argument_list pos:start="1837:21" pos:end="1838:63">(<argument pos:start="1837:22" pos:end="1837:22"><expr pos:start="1837:22" pos:end="1837:22"><name pos:start="1837:22" pos:end="1837:22">s</name></expr></argument>, <argument pos:start="1837:25" pos:end="1837:26"><expr pos:start="1837:25" pos:end="1837:26"><name pos:start="1837:25" pos:end="1837:26">ot</name></expr></argument>, <argument pos:start="1837:29" pos:end="1837:49"><expr pos:start="1837:29" pos:end="1837:49"><name pos:start="1837:29" pos:end="1837:36">pc_start</name> <operator pos:start="1837:38" pos:end="1837:38">-</operator> <name pos:start="1837:40" pos:end="1837:49"><name pos:start="1837:40" pos:end="1837:40">s</name><operator pos:start="1837:41" pos:end="1837:42">-&gt;</operator><name pos:start="1837:43" pos:end="1837:49">cs_base</name></name></expr></argument>,
                     <argument pos:start="1838:22" pos:end="1838:62"><expr pos:start="1838:22" pos:end="1838:62"><name pos:start="1838:22" pos:end="1838:39">SVM_IOIO_TYPE_MASK</name> <operator pos:start="1838:41" pos:end="1838:41">|</operator> <call pos:start="1838:43" pos:end="1838:62"><name pos:start="1838:43" pos:end="1838:52">svm_is_rep</name><argument_list pos:start="1838:53" pos:end="1838:62">(<argument pos:start="1838:54" pos:end="1838:61"><expr pos:start="1838:54" pos:end="1838:61"><name pos:start="1838:54" pos:end="1838:61">prefixes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1839:9" pos:end="1840:27"><if pos:start="1839:9" pos:end="1840:27">if <condition pos:start="1839:12" pos:end="1839:23">(<expr pos:start="1839:13" pos:end="1839:22"><name pos:start="1839:13" pos:end="1839:22">use_icount</name></expr>)</condition><block type="pseudo" pos:start="1840:13" pos:end="1840:27"><block_content pos:start="1840:13" pos:end="1840:27">
            <expr_stmt pos:start="1840:13" pos:end="1840:27"><expr pos:start="1840:13" pos:end="1840:26"><call pos:start="1840:13" pos:end="1840:26"><name pos:start="1840:13" pos:end="1840:24">gen_io_start</name><argument_list pos:start="1840:25" pos:end="1840:26">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="1841:9" pos:end="1841:53"><expr pos:start="1841:9" pos:end="1841:52"><call pos:start="1841:9" pos:end="1841:52"><name pos:start="1841:9" pos:end="1841:28">tcg_gen_trunc_tl_i32</name><argument_list pos:start="1841:29" pos:end="1841:52">(<argument pos:start="1841:30" pos:end="1841:41"><expr pos:start="1841:30" pos:end="1841:41"><name pos:start="1841:30" pos:end="1841:41">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1841:44" pos:end="1841:51"><expr pos:start="1841:44" pos:end="1841:51"><name pos:start="1841:44" pos:end="1841:51"><name pos:start="1841:44" pos:end="1841:48">cpu_T</name><index pos:start="1841:49" pos:end="1841:51">[<expr pos:start="1841:50" pos:end="1841:50"><literal type="number" pos:start="1841:50" pos:end="1841:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1842:9" pos:end="1842:55"><expr pos:start="1842:9" pos:end="1842:54"><call pos:start="1842:9" pos:end="1842:54"><name pos:start="1842:9" pos:end="1842:26">gen_helper_in_func</name><argument_list pos:start="1842:27" pos:end="1842:54">(<argument pos:start="1842:28" pos:end="1842:29"><expr pos:start="1842:28" pos:end="1842:29"><name pos:start="1842:28" pos:end="1842:29">ot</name></expr></argument>, <argument pos:start="1842:32" pos:end="1842:39"><expr pos:start="1842:32" pos:end="1842:39"><name pos:start="1842:32" pos:end="1842:39"><name pos:start="1842:32" pos:end="1842:36">cpu_T</name><index pos:start="1842:37" pos:end="1842:39">[<expr pos:start="1842:38" pos:end="1842:38"><literal type="number" pos:start="1842:38" pos:end="1842:38">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="1842:42" pos:end="1842:53"><expr pos:start="1842:42" pos:end="1842:53"><name pos:start="1842:42" pos:end="1842:53">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1843:9" pos:end="1843:37"><expr pos:start="1843:9" pos:end="1843:36"><call pos:start="1843:9" pos:end="1843:36"><name pos:start="1843:9" pos:end="1843:25">gen_op_mov_reg_T1</name><argument_list pos:start="1843:26" pos:end="1843:36">(<argument pos:start="1843:27" pos:end="1843:28"><expr pos:start="1843:27" pos:end="1843:28"><name pos:start="1843:27" pos:end="1843:28">ot</name></expr></argument>, <argument pos:start="1843:31" pos:end="1843:35"><expr pos:start="1843:31" pos:end="1843:35"><name pos:start="1843:31" pos:end="1843:35">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1844:9" pos:end="3141:17"><if pos:start="1844:9" pos:end="3141:17">if <condition pos:start="1844:12" pos:end="1844:23">(<expr pos:start="1844:13" pos:end="1844:22"><name pos:start="1844:13" pos:end="1844:22">use_icount</name></expr>)</condition> <block pos:start="1844:25" pos:end="3141:17">{<block_content pos:start="1845:13" pos:end="3141:17">
            <expr_stmt pos:start="1845:13" pos:end="1845:25"><expr pos:start="1845:13" pos:end="1845:24"><call pos:start="1845:13" pos:end="1845:24"><name pos:start="1845:13" pos:end="1845:22">gen_io_end</name><argument_list pos:start="1845:23" pos:end="1845:24">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1846:13" pos:end="1846:43"><expr pos:start="1846:13" pos:end="1846:42"><call pos:start="1846:13" pos:end="1846:42"><name pos:start="1846:13" pos:end="1846:19">gen_jmp</name><argument_list pos:start="1846:20" pos:end="1846:42">(<argument pos:start="1846:21" pos:end="1846:21"><expr pos:start="1846:21" pos:end="1846:21"><name pos:start="1846:21" pos:end="1846:21">s</name></expr></argument>, <argument pos:start="1846:24" pos:end="1846:41"><expr pos:start="1846:24" pos:end="1846:41"><name pos:start="1846:24" pos:end="1846:28"><name pos:start="1846:24" pos:end="1846:24">s</name><operator pos:start="1846:25" pos:end="1846:26">-&gt;</operator><name pos:start="1846:27" pos:end="1846:28">pc</name></name> <operator pos:start="1846:30" pos:end="1846:30">-</operator> <name pos:start="1846:32" pos:end="1846:41"><name pos:start="1846:32" pos:end="1846:32">s</name><operator pos:start="1846:33" pos:end="1846:34">-&gt;</operator><name pos:start="1846:35" pos:end="1846:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="1847:9" pos:end="1847:14">break;</break>
    <case pos:start="1848:5" pos:end="1848:14">case <expr pos:start="1848:10" pos:end="1848:13"><literal type="number" pos:start="1848:10" pos:end="1848:13">0xee</literal></expr>:</case>
    <case pos:start="1849:5" pos:end="1849:14">case <expr pos:start="1849:10" pos:end="1849:13"><literal type="number" pos:start="1849:10" pos:end="1849:13">0xef</literal></expr>:</case>
        <if_stmt pos:start="1850:9" pos:end="1853:43"><if pos:start="1850:9" pos:end="1851:25">if <condition pos:start="1850:12" pos:end="1850:25">(<expr pos:start="1850:13" pos:end="1850:24"><operator pos:start="1850:13" pos:end="1850:13">(</operator><name pos:start="1850:14" pos:end="1850:14">b</name> <operator pos:start="1850:16" pos:end="1850:16">&amp;</operator> <literal type="number" pos:start="1850:18" pos:end="1850:18">1</literal><operator pos:start="1850:19" pos:end="1850:19">)</operator> <operator pos:start="1850:21" pos:end="1850:22">==</operator> <literal type="number" pos:start="1850:24" pos:end="1850:24">0</literal></expr>)</condition><block type="pseudo" pos:start="1851:13" pos:end="1851:25"><block_content pos:start="1851:13" pos:end="1851:25">
            <expr_stmt pos:start="1851:13" pos:end="1851:25"><expr pos:start="1851:13" pos:end="1851:24"><name pos:start="1851:13" pos:end="1851:14">ot</name> <operator pos:start="1851:16" pos:end="1851:16">=</operator> <name pos:start="1851:18" pos:end="1851:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>
        <else pos:start="1852:9" pos:end="1853:43">else<block type="pseudo" pos:start="1853:13" pos:end="1853:43"><block_content pos:start="1853:13" pos:end="1853:43">
            <expr_stmt pos:start="1853:13" pos:end="1853:43"><expr pos:start="1853:13" pos:end="1853:42"><name pos:start="1853:13" pos:end="1853:14">ot</name> <operator pos:start="1853:16" pos:end="1853:16">=</operator> <ternary pos:start="1853:18" pos:end="1853:42"><condition pos:start="1853:18" pos:end="1853:24"><expr pos:start="1853:18" pos:end="1853:22"><name pos:start="1853:18" pos:end="1853:22">dflag</name></expr> ?</condition><then pos:start="1853:26" pos:end="1853:32"> <expr pos:start="1853:26" pos:end="1853:32"><name pos:start="1853:26" pos:end="1853:32">OT_LONG</name></expr> </then><else pos:start="1853:34" pos:end="1853:42">: <expr pos:start="1853:36" pos:end="1853:42"><name pos:start="1853:36" pos:end="1853:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt pos:start="1854:9" pos:end="1854:45"><expr pos:start="1854:9" pos:end="1854:44"><call pos:start="1854:9" pos:end="1854:44"><name pos:start="1854:9" pos:end="1854:25">gen_op_mov_TN_reg</name><argument_list pos:start="1854:26" pos:end="1854:44">(<argument pos:start="1854:27" pos:end="1854:33"><expr pos:start="1854:27" pos:end="1854:33"><name pos:start="1854:27" pos:end="1854:33">OT_WORD</name></expr></argument>, <argument pos:start="1854:36" pos:end="1854:36"><expr pos:start="1854:36" pos:end="1854:36"><literal type="number" pos:start="1854:36" pos:end="1854:36">0</literal></expr></argument>, <argument pos:start="1854:39" pos:end="1854:43"><expr pos:start="1854:39" pos:end="1854:43"><name pos:start="1854:39" pos:end="1854:43">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1855:9" pos:end="1855:30"><expr pos:start="1855:9" pos:end="1855:29"><call pos:start="1855:9" pos:end="1855:29"><name pos:start="1855:9" pos:end="1855:27">gen_op_andl_T0_ffff</name><argument_list pos:start="1855:28" pos:end="1855:29">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1856:9" pos:end="1857:43"><expr pos:start="1856:9" pos:end="1857:42"><call pos:start="1856:9" pos:end="1857:42"><name pos:start="1856:9" pos:end="1856:20">gen_check_io</name><argument_list pos:start="1856:21" pos:end="1857:42">(<argument pos:start="1856:22" pos:end="1856:22"><expr pos:start="1856:22" pos:end="1856:22"><name pos:start="1856:22" pos:end="1856:22">s</name></expr></argument>, <argument pos:start="1856:25" pos:end="1856:26"><expr pos:start="1856:25" pos:end="1856:26"><name pos:start="1856:25" pos:end="1856:26">ot</name></expr></argument>, <argument pos:start="1856:29" pos:end="1856:49"><expr pos:start="1856:29" pos:end="1856:49"><name pos:start="1856:29" pos:end="1856:36">pc_start</name> <operator pos:start="1856:38" pos:end="1856:38">-</operator> <name pos:start="1856:40" pos:end="1856:49"><name pos:start="1856:40" pos:end="1856:40">s</name><operator pos:start="1856:41" pos:end="1856:42">-&gt;</operator><name pos:start="1856:43" pos:end="1856:49">cs_base</name></name></expr></argument>,
                     <argument pos:start="1857:22" pos:end="1857:41"><expr pos:start="1857:22" pos:end="1857:41"><call pos:start="1857:22" pos:end="1857:41"><name pos:start="1857:22" pos:end="1857:31">svm_is_rep</name><argument_list pos:start="1857:32" pos:end="1857:41">(<argument pos:start="1857:33" pos:end="1857:40"><expr pos:start="1857:33" pos:end="1857:40"><name pos:start="1857:33" pos:end="1857:40">prefixes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1858:9" pos:end="1858:40"><expr pos:start="1858:9" pos:end="1858:39"><call pos:start="1858:9" pos:end="1858:39"><name pos:start="1858:9" pos:end="1858:25">gen_op_mov_TN_reg</name><argument_list pos:start="1858:26" pos:end="1858:39">(<argument pos:start="1858:27" pos:end="1858:28"><expr pos:start="1858:27" pos:end="1858:28"><name pos:start="1858:27" pos:end="1858:28">ot</name></expr></argument>, <argument pos:start="1858:31" pos:end="1858:31"><expr pos:start="1858:31" pos:end="1858:31"><literal type="number" pos:start="1858:31" pos:end="1858:31">1</literal></expr></argument>, <argument pos:start="1858:34" pos:end="1858:38"><expr pos:start="1858:34" pos:end="1858:38"><name pos:start="1858:34" pos:end="1858:38">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1859:9" pos:end="1860:27"><if pos:start="1859:9" pos:end="1860:27">if <condition pos:start="1859:12" pos:end="1859:23">(<expr pos:start="1859:13" pos:end="1859:22"><name pos:start="1859:13" pos:end="1859:22">use_icount</name></expr>)</condition><block type="pseudo" pos:start="1860:13" pos:end="1860:27"><block_content pos:start="1860:13" pos:end="1860:27">
            <expr_stmt pos:start="1860:13" pos:end="1860:27"><expr pos:start="1860:13" pos:end="1860:26"><call pos:start="1860:13" pos:end="1860:26"><name pos:start="1860:13" pos:end="1860:24">gen_io_start</name><argument_list pos:start="1860:25" pos:end="1860:26">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="1861:9" pos:end="1861:53"><expr pos:start="1861:9" pos:end="1861:52"><call pos:start="1861:9" pos:end="1861:52"><name pos:start="1861:9" pos:end="1861:28">tcg_gen_trunc_tl_i32</name><argument_list pos:start="1861:29" pos:end="1861:52">(<argument pos:start="1861:30" pos:end="1861:41"><expr pos:start="1861:30" pos:end="1861:41"><name pos:start="1861:30" pos:end="1861:41">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1861:44" pos:end="1861:51"><expr pos:start="1861:44" pos:end="1861:51"><name pos:start="1861:44" pos:end="1861:51"><name pos:start="1861:44" pos:end="1861:48">cpu_T</name><index pos:start="1861:49" pos:end="1861:51">[<expr pos:start="1861:50" pos:end="1861:50"><literal type="number" pos:start="1861:50" pos:end="1861:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1862:9" pos:end="1862:53"><expr pos:start="1862:9" pos:end="1862:52"><call pos:start="1862:9" pos:end="1862:52"><name pos:start="1862:9" pos:end="1862:28">tcg_gen_trunc_tl_i32</name><argument_list pos:start="1862:29" pos:end="1862:52">(<argument pos:start="1862:30" pos:end="1862:41"><expr pos:start="1862:30" pos:end="1862:41"><name pos:start="1862:30" pos:end="1862:41">cpu_tmp3_i32</name></expr></argument>, <argument pos:start="1862:44" pos:end="1862:51"><expr pos:start="1862:44" pos:end="1862:51"><name pos:start="1862:44" pos:end="1862:51"><name pos:start="1862:44" pos:end="1862:48">cpu_T</name><index pos:start="1862:49" pos:end="1862:51">[<expr pos:start="1862:50" pos:end="1862:50"><literal type="number" pos:start="1862:50" pos:end="1862:50">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1863:9" pos:end="1863:60"><expr pos:start="1863:9" pos:end="1863:59"><call pos:start="1863:9" pos:end="1863:59"><name pos:start="1863:9" pos:end="1863:27">gen_helper_out_func</name><argument_list pos:start="1863:28" pos:end="1863:59">(<argument pos:start="1863:29" pos:end="1863:30"><expr pos:start="1863:29" pos:end="1863:30"><name pos:start="1863:29" pos:end="1863:30">ot</name></expr></argument>, <argument pos:start="1863:33" pos:end="1863:44"><expr pos:start="1863:33" pos:end="1863:44"><name pos:start="1863:33" pos:end="1863:44">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1863:47" pos:end="1863:58"><expr pos:start="1863:47" pos:end="1863:58"><name pos:start="1863:47" pos:end="1863:58">cpu_tmp3_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1864:9" pos:end="3141:17"><if pos:start="1864:9" pos:end="3141:17">if <condition pos:start="1864:12" pos:end="1864:23">(<expr pos:start="1864:13" pos:end="1864:22"><name pos:start="1864:13" pos:end="1864:22">use_icount</name></expr>)</condition> <block pos:start="1864:25" pos:end="3141:17">{<block_content pos:start="1865:13" pos:end="3141:17">
            <expr_stmt pos:start="1865:13" pos:end="1865:25"><expr pos:start="1865:13" pos:end="1865:24"><call pos:start="1865:13" pos:end="1865:24"><name pos:start="1865:13" pos:end="1865:22">gen_io_end</name><argument_list pos:start="1865:23" pos:end="1865:24">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1866:13" pos:end="1866:43"><expr pos:start="1866:13" pos:end="1866:42"><call pos:start="1866:13" pos:end="1866:42"><name pos:start="1866:13" pos:end="1866:19">gen_jmp</name><argument_list pos:start="1866:20" pos:end="1866:42">(<argument pos:start="1866:21" pos:end="1866:21"><expr pos:start="1866:21" pos:end="1866:21"><name pos:start="1866:21" pos:end="1866:21">s</name></expr></argument>, <argument pos:start="1866:24" pos:end="1866:41"><expr pos:start="1866:24" pos:end="1866:41"><name pos:start="1866:24" pos:end="1866:28"><name pos:start="1866:24" pos:end="1866:24">s</name><operator pos:start="1866:25" pos:end="1866:26">-&gt;</operator><name pos:start="1866:27" pos:end="1866:28">pc</name></name> <operator pos:start="1866:30" pos:end="1866:30">-</operator> <name pos:start="1866:32" pos:end="1866:41"><name pos:start="1866:32" pos:end="1866:32">s</name><operator pos:start="1866:33" pos:end="1866:34">-&gt;</operator><name pos:start="1866:35" pos:end="1866:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="1867:9" pos:end="1867:14">break;</break>
        <comment type="block" format="doxygen" pos:start="1868:9" pos:end="1868:34">/************************/</comment>
        <comment type="block" pos:start="1869:9" pos:end="1869:21">/* control */</comment>
    <case pos:start="1870:5" pos:end="1870:14">case <expr pos:start="1870:10" pos:end="1870:13"><literal type="number" pos:start="1870:10" pos:end="1870:13">0xc2</literal></expr>:</case> <comment type="block" pos:start="1870:16" pos:end="1870:27">/* ret im */</comment>
        <expr_stmt pos:start="1871:9" pos:end="1871:40"><expr pos:start="1871:9" pos:end="1871:39"><name pos:start="1871:9" pos:end="1871:11">val</name> <operator pos:start="1871:13" pos:end="1871:13">=</operator> <call pos:start="1871:15" pos:end="1871:39"><name pos:start="1871:15" pos:end="1871:27">cpu_ldsw_code</name><argument_list pos:start="1871:28" pos:end="1871:39">(<argument pos:start="1871:29" pos:end="1871:31"><expr pos:start="1871:29" pos:end="1871:31"><name pos:start="1871:29" pos:end="1871:31">env</name></expr></argument>, <argument pos:start="1871:34" pos:end="1871:38"><expr pos:start="1871:34" pos:end="1871:38"><name pos:start="1871:34" pos:end="1871:38"><name pos:start="1871:34" pos:end="1871:34">s</name><operator pos:start="1871:35" pos:end="1871:36">-&gt;</operator><name pos:start="1871:37" pos:end="1871:38">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1872:9" pos:end="1872:19"><expr pos:start="1872:9" pos:end="1872:18"><name pos:start="1872:9" pos:end="1872:13"><name pos:start="1872:9" pos:end="1872:9">s</name><operator pos:start="1872:10" pos:end="1872:11">-&gt;</operator><name pos:start="1872:12" pos:end="1872:13">pc</name></name> <operator pos:start="1872:15" pos:end="1872:16">+=</operator> <literal type="number" pos:start="1872:18" pos:end="1872:18">2</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="1873:9" pos:end="1873:22"><expr pos:start="1873:9" pos:end="1873:21"><call pos:start="1873:9" pos:end="1873:21"><name pos:start="1873:9" pos:end="1873:18">gen_pop_T0</name><argument_list pos:start="1873:19" pos:end="1873:21">(<argument pos:start="1873:20" pos:end="1873:20"><expr pos:start="1873:20" pos:end="1873:20"><name pos:start="1873:20" pos:end="1873:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1874:9" pos:end="1875:25"><if pos:start="1874:9" pos:end="1875:25">if <condition pos:start="1874:12" pos:end="1874:34">(<expr pos:start="1874:13" pos:end="1874:33"><call pos:start="1874:13" pos:end="1874:21"><name pos:start="1874:13" pos:end="1874:18">CODE64</name><argument_list pos:start="1874:19" pos:end="1874:21">(<argument pos:start="1874:20" pos:end="1874:20"><expr pos:start="1874:20" pos:end="1874:20"><name pos:start="1874:20" pos:end="1874:20">s</name></expr></argument>)</argument_list></call> <operator pos:start="1874:23" pos:end="1874:24">&amp;&amp;</operator> <name pos:start="1874:26" pos:end="1874:33"><name pos:start="1874:26" pos:end="1874:26">s</name><operator pos:start="1874:27" pos:end="1874:28">-&gt;</operator><name pos:start="1874:29" pos:end="1874:33">dflag</name></name></expr>)</condition><block type="pseudo" pos:start="1875:13" pos:end="1875:25"><block_content pos:start="1875:13" pos:end="1875:25">
            <expr_stmt pos:start="1875:13" pos:end="1875:25"><expr pos:start="1875:13" pos:end="1875:24"><name pos:start="1875:13" pos:end="1875:20"><name pos:start="1875:13" pos:end="1875:13">s</name><operator pos:start="1875:14" pos:end="1875:15">-&gt;</operator><name pos:start="1875:16" pos:end="1875:20">dflag</name></name> <operator pos:start="1875:22" pos:end="1875:22">=</operator> <literal type="number" pos:start="1875:24" pos:end="1875:24">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="1876:9" pos:end="1876:51"><expr pos:start="1876:9" pos:end="1876:50"><call pos:start="1876:9" pos:end="1876:50"><name pos:start="1876:9" pos:end="1876:24">gen_stack_update</name><argument_list pos:start="1876:25" pos:end="1876:50">(<argument pos:start="1876:26" pos:end="1876:26"><expr pos:start="1876:26" pos:end="1876:26"><name pos:start="1876:26" pos:end="1876:26">s</name></expr></argument>, <argument pos:start="1876:29" pos:end="1876:49"><expr pos:start="1876:29" pos:end="1876:49"><name pos:start="1876:29" pos:end="1876:31">val</name> <operator pos:start="1876:33" pos:end="1876:33">+</operator> <operator pos:start="1876:35" pos:end="1876:35">(</operator><literal type="number" pos:start="1876:36" pos:end="1876:36">2</literal> <operator pos:start="1876:38" pos:end="1876:39">&lt;&lt;</operator> <name pos:start="1876:41" pos:end="1876:48"><name pos:start="1876:41" pos:end="1876:41">s</name><operator pos:start="1876:42" pos:end="1876:43">-&gt;</operator><name pos:start="1876:44" pos:end="1876:48">dflag</name></name><operator pos:start="1876:49" pos:end="1876:49">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1877:9" pos:end="1878:34"><if pos:start="1877:9" pos:end="1878:34">if <condition pos:start="1877:12" pos:end="1877:26">(<expr pos:start="1877:13" pos:end="1877:25"><name pos:start="1877:13" pos:end="1877:20"><name pos:start="1877:13" pos:end="1877:13">s</name><operator pos:start="1877:14" pos:end="1877:15">-&gt;</operator><name pos:start="1877:16" pos:end="1877:20">dflag</name></name> <operator pos:start="1877:22" pos:end="1877:23">==</operator> <literal type="number" pos:start="1877:25" pos:end="1877:25">0</literal></expr>)</condition><block type="pseudo" pos:start="1878:13" pos:end="1878:34"><block_content pos:start="1878:13" pos:end="1878:34">
            <expr_stmt pos:start="1878:13" pos:end="1878:34"><expr pos:start="1878:13" pos:end="1878:33"><call pos:start="1878:13" pos:end="1878:33"><name pos:start="1878:13" pos:end="1878:31">gen_op_andl_T0_ffff</name><argument_list pos:start="1878:32" pos:end="1878:33">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="1879:9" pos:end="1879:24"><expr pos:start="1879:9" pos:end="1879:23"><call pos:start="1879:9" pos:end="1879:23"><name pos:start="1879:9" pos:end="1879:21">gen_op_jmp_T0</name><argument_list pos:start="1879:22" pos:end="1879:23">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1880:9" pos:end="1880:19"><expr pos:start="1880:9" pos:end="1880:18"><call pos:start="1880:9" pos:end="1880:18"><name pos:start="1880:9" pos:end="1880:15">gen_eob</name><argument_list pos:start="1880:16" pos:end="1880:18">(<argument pos:start="1880:17" pos:end="1880:17"><expr pos:start="1880:17" pos:end="1880:17"><name pos:start="1880:17" pos:end="1880:17">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="1881:9" pos:end="1881:14">break;</break>
    <case pos:start="1882:5" pos:end="1882:14">case <expr pos:start="1882:10" pos:end="1882:13"><literal type="number" pos:start="1882:10" pos:end="1882:13">0xc3</literal></expr>:</case> <comment type="block" pos:start="1882:16" pos:end="1882:24">/* ret */</comment>
        <expr_stmt pos:start="1883:9" pos:end="1883:22"><expr pos:start="1883:9" pos:end="1883:21"><call pos:start="1883:9" pos:end="1883:21"><name pos:start="1883:9" pos:end="1883:18">gen_pop_T0</name><argument_list pos:start="1883:19" pos:end="1883:21">(<argument pos:start="1883:20" pos:end="1883:20"><expr pos:start="1883:20" pos:end="1883:20"><name pos:start="1883:20" pos:end="1883:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1884:9" pos:end="1884:26"><expr pos:start="1884:9" pos:end="1884:25"><call pos:start="1884:9" pos:end="1884:25"><name pos:start="1884:9" pos:end="1884:22">gen_pop_update</name><argument_list pos:start="1884:23" pos:end="1884:25">(<argument pos:start="1884:24" pos:end="1884:24"><expr pos:start="1884:24" pos:end="1884:24"><name pos:start="1884:24" pos:end="1884:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1885:9" pos:end="1886:34"><if pos:start="1885:9" pos:end="1886:34">if <condition pos:start="1885:12" pos:end="1885:26">(<expr pos:start="1885:13" pos:end="1885:25"><name pos:start="1885:13" pos:end="1885:20"><name pos:start="1885:13" pos:end="1885:13">s</name><operator pos:start="1885:14" pos:end="1885:15">-&gt;</operator><name pos:start="1885:16" pos:end="1885:20">dflag</name></name> <operator pos:start="1885:22" pos:end="1885:23">==</operator> <literal type="number" pos:start="1885:25" pos:end="1885:25">0</literal></expr>)</condition><block type="pseudo" pos:start="1886:13" pos:end="1886:34"><block_content pos:start="1886:13" pos:end="1886:34">
            <expr_stmt pos:start="1886:13" pos:end="1886:34"><expr pos:start="1886:13" pos:end="1886:33"><call pos:start="1886:13" pos:end="1886:33"><name pos:start="1886:13" pos:end="1886:31">gen_op_andl_T0_ffff</name><argument_list pos:start="1886:32" pos:end="1886:33">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="1887:9" pos:end="1887:24"><expr pos:start="1887:9" pos:end="1887:23"><call pos:start="1887:9" pos:end="1887:23"><name pos:start="1887:9" pos:end="1887:21">gen_op_jmp_T0</name><argument_list pos:start="1887:22" pos:end="1887:23">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1888:9" pos:end="1888:19"><expr pos:start="1888:9" pos:end="1888:18"><call pos:start="1888:9" pos:end="1888:18"><name pos:start="1888:9" pos:end="1888:15">gen_eob</name><argument_list pos:start="1888:16" pos:end="1888:18">(<argument pos:start="1888:17" pos:end="1888:17"><expr pos:start="1888:17" pos:end="1888:17"><name pos:start="1888:17" pos:end="1888:17">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="1889:9" pos:end="1889:14">break;</break>
    <case pos:start="1890:5" pos:end="1890:14">case <expr pos:start="1890:10" pos:end="1890:13"><literal type="number" pos:start="1890:10" pos:end="1890:13">0xca</literal></expr>:</case> <comment type="block" pos:start="1890:16" pos:end="1890:28">/* lret im */</comment>
        <expr_stmt pos:start="1891:9" pos:end="1891:40"><expr pos:start="1891:9" pos:end="1891:39"><name pos:start="1891:9" pos:end="1891:11">val</name> <operator pos:start="1891:13" pos:end="1891:13">=</operator> <call pos:start="1891:15" pos:end="1891:39"><name pos:start="1891:15" pos:end="1891:27">cpu_ldsw_code</name><argument_list pos:start="1891:28" pos:end="1891:39">(<argument pos:start="1891:29" pos:end="1891:31"><expr pos:start="1891:29" pos:end="1891:31"><name pos:start="1891:29" pos:end="1891:31">env</name></expr></argument>, <argument pos:start="1891:34" pos:end="1891:38"><expr pos:start="1891:34" pos:end="1891:38"><name pos:start="1891:34" pos:end="1891:38"><name pos:start="1891:34" pos:end="1891:34">s</name><operator pos:start="1891:35" pos:end="1891:36">-&gt;</operator><name pos:start="1891:37" pos:end="1891:38">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1892:9" pos:end="1892:19"><expr pos:start="1892:9" pos:end="1892:18"><name pos:start="1892:9" pos:end="1892:13"><name pos:start="1892:9" pos:end="1892:9">s</name><operator pos:start="1892:10" pos:end="1892:11">-&gt;</operator><name pos:start="1892:12" pos:end="1892:13">pc</name></name> <operator pos:start="1892:15" pos:end="1892:16">+=</operator> <literal type="number" pos:start="1892:18" pos:end="1892:18">2</literal></expr>;</expr_stmt>
    <label pos:start="1893:5" pos:end="1893:12"><name pos:start="1893:5" pos:end="1893:11">do_lret</name>:</label>
        <if_stmt pos:start="1894:9" pos:end="3141:17"><if pos:start="1894:9" pos:end="1899:9">if <condition pos:start="1894:12" pos:end="1894:30">(<expr pos:start="1894:13" pos:end="1894:29"><name pos:start="1894:13" pos:end="1894:17"><name pos:start="1894:13" pos:end="1894:13">s</name><operator pos:start="1894:14" pos:end="1894:15">-&gt;</operator><name pos:start="1894:16" pos:end="1894:17">pe</name></name> <operator pos:start="1894:19" pos:end="1894:20">&amp;&amp;</operator> <operator pos:start="1894:22" pos:end="1894:22">!</operator><name pos:start="1894:23" pos:end="1894:29"><name pos:start="1894:23" pos:end="1894:23">s</name><operator pos:start="1894:24" pos:end="1894:25">-&gt;</operator><name pos:start="1894:26" pos:end="1894:29">vm86</name></name></expr>)</condition> <block pos:start="1894:32" pos:end="1899:9">{<block_content pos:start="1895:13" pos:end="1898:58">
            <expr_stmt pos:start="1895:13" pos:end="1895:32"><expr pos:start="1895:13" pos:end="1895:31"><call pos:start="1895:13" pos:end="1895:31"><name pos:start="1895:13" pos:end="1895:28">gen_update_cc_op</name><argument_list pos:start="1895:29" pos:end="1895:31">(<argument pos:start="1895:30" pos:end="1895:30"><expr pos:start="1895:30" pos:end="1895:30"><name pos:start="1895:30" pos:end="1895:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1896:13" pos:end="1896:46"><expr pos:start="1896:13" pos:end="1896:45"><call pos:start="1896:13" pos:end="1896:45"><name pos:start="1896:13" pos:end="1896:22">gen_jmp_im</name><argument_list pos:start="1896:23" pos:end="1896:45">(<argument pos:start="1896:24" pos:end="1896:44"><expr pos:start="1896:24" pos:end="1896:44"><name pos:start="1896:24" pos:end="1896:31">pc_start</name> <operator pos:start="1896:33" pos:end="1896:33">-</operator> <name pos:start="1896:35" pos:end="1896:44"><name pos:start="1896:35" pos:end="1896:35">s</name><operator pos:start="1896:36" pos:end="1896:37">-&gt;</operator><name pos:start="1896:38" pos:end="1896:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1897:13" pos:end="1898:58"><expr pos:start="1897:13" pos:end="1898:57"><call pos:start="1897:13" pos:end="1898:57"><name pos:start="1897:13" pos:end="1897:37">gen_helper_lret_protected</name><argument_list pos:start="1897:38" pos:end="1898:57">(<argument pos:start="1897:39" pos:end="1897:45"><expr pos:start="1897:39" pos:end="1897:45"><name pos:start="1897:39" pos:end="1897:45">cpu_env</name></expr></argument>, <argument pos:start="1897:48" pos:end="1897:70"><expr pos:start="1897:48" pos:end="1897:70"><call pos:start="1897:48" pos:end="1897:70"><name pos:start="1897:48" pos:end="1897:60">tcg_const_i32</name><argument_list pos:start="1897:61" pos:end="1897:70">(<argument pos:start="1897:62" pos:end="1897:69"><expr pos:start="1897:62" pos:end="1897:69"><name pos:start="1897:62" pos:end="1897:69"><name pos:start="1897:62" pos:end="1897:62">s</name><operator pos:start="1897:63" pos:end="1897:64">-&gt;</operator><name pos:start="1897:65" pos:end="1897:69">dflag</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                      <argument pos:start="1898:39" pos:end="1898:56"><expr pos:start="1898:39" pos:end="1898:56"><call pos:start="1898:39" pos:end="1898:56"><name pos:start="1898:39" pos:end="1898:51">tcg_const_i32</name><argument_list pos:start="1898:52" pos:end="1898:56">(<argument pos:start="1898:53" pos:end="1898:55"><expr pos:start="1898:53" pos:end="1898:55"><name pos:start="1898:53" pos:end="1898:55">val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="1899:11" pos:end="3141:17">else <block pos:start="1899:16" pos:end="3141:17">{<block_content pos:start="1900:13" pos:end="3141:17">
            <expr_stmt pos:start="1900:13" pos:end="1900:28"><expr pos:start="1900:13" pos:end="1900:27"><call pos:start="1900:13" pos:end="1900:27"><name pos:start="1900:13" pos:end="1900:24">gen_stack_A0</name><argument_list pos:start="1900:25" pos:end="1900:27">(<argument pos:start="1900:26" pos:end="1900:26"><expr pos:start="1900:26" pos:end="1900:26"><name pos:start="1900:26" pos:end="1900:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block" pos:start="1901:13" pos:end="1901:28">/* pop offset */</comment>
            <expr_stmt pos:start="1902:13" pos:end="1902:57"><expr pos:start="1902:13" pos:end="1902:56"><call pos:start="1902:13" pos:end="1902:56"><name pos:start="1902:13" pos:end="1902:27">gen_op_ld_T0_A0</name><argument_list pos:start="1902:28" pos:end="1902:56">(<argument pos:start="1902:29" pos:end="1902:55"><expr pos:start="1902:29" pos:end="1902:55"><literal type="number" pos:start="1902:29" pos:end="1902:31">1</literal> <operator pos:start="1902:31" pos:end="1902:31">+</operator> <name pos:start="1902:33" pos:end="1902:40"><name pos:start="1902:33" pos:end="1902:33">s</name><operator pos:start="1902:34" pos:end="1902:35">-&gt;</operator><name pos:start="1902:36" pos:end="1902:40">dflag</name></name> <operator pos:start="1902:42" pos:end="1902:42">+</operator> <name pos:start="1902:44" pos:end="1902:55"><name pos:start="1902:44" pos:end="1902:44">s</name><operator pos:start="1902:45" pos:end="1902:46">-&gt;</operator><name pos:start="1902:47" pos:end="1902:55">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="1903:13" pos:end="1904:38"><if pos:start="1903:13" pos:end="1904:38">if <condition pos:start="1903:16" pos:end="1903:30">(<expr pos:start="1903:17" pos:end="1903:29"><name pos:start="1903:17" pos:end="1903:24"><name pos:start="1903:17" pos:end="1903:17">s</name><operator pos:start="1903:18" pos:end="1903:19">-&gt;</operator><name pos:start="1903:20" pos:end="1903:24">dflag</name></name> <operator pos:start="1903:26" pos:end="1903:27">==</operator> <literal type="number" pos:start="1903:29" pos:end="1903:29">0</literal></expr>)</condition><block type="pseudo" pos:start="1904:17" pos:end="1904:38"><block_content pos:start="1904:17" pos:end="1904:38">
                <expr_stmt pos:start="1904:17" pos:end="1904:38"><expr pos:start="1904:17" pos:end="1904:37"><call pos:start="1904:17" pos:end="1904:37"><name pos:start="1904:17" pos:end="1904:35">gen_op_andl_T0_ffff</name><argument_list pos:start="1904:36" pos:end="1904:37">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <comment type="block" pos:start="1905:13" pos:end="1906:27">/* NOTE: keeping EIP updated is not a problem in case of
               exception */</comment>
            <expr_stmt pos:start="1907:13" pos:end="1907:28"><expr pos:start="1907:13" pos:end="1907:27"><call pos:start="1907:13" pos:end="1907:27"><name pos:start="1907:13" pos:end="1907:25">gen_op_jmp_T0</name><argument_list pos:start="1907:26" pos:end="1907:27">()</argument_list></call></expr>;</expr_stmt>
            <comment type="block" pos:start="1908:13" pos:end="1908:30">/* pop selector */</comment>
            <expr_stmt pos:start="1909:13" pos:end="1909:45"><expr pos:start="1909:13" pos:end="1909:44"><call pos:start="1909:13" pos:end="1909:44"><name pos:start="1909:13" pos:end="1909:29">gen_op_addl_A0_im</name><argument_list pos:start="1909:30" pos:end="1909:44">(<argument pos:start="1909:31" pos:end="1909:43"><expr pos:start="1909:31" pos:end="1909:43"><literal type="number" pos:start="1909:31" pos:end="1909:31">2</literal> <operator pos:start="1909:33" pos:end="1909:34">&lt;&lt;</operator> <name pos:start="1909:36" pos:end="1909:43"><name pos:start="1909:36" pos:end="1909:36">s</name><operator pos:start="1909:37" pos:end="1909:38">-&gt;</operator><name pos:start="1909:39" pos:end="1909:43">dflag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1910:13" pos:end="1910:57"><expr pos:start="1910:13" pos:end="1910:56"><call pos:start="1910:13" pos:end="1910:56"><name pos:start="1910:13" pos:end="1910:27">gen_op_ld_T0_A0</name><argument_list pos:start="1910:28" pos:end="1910:56">(<argument pos:start="1910:29" pos:end="1910:55"><expr pos:start="1910:29" pos:end="1910:55"><literal type="number" pos:start="1910:29" pos:end="1910:31">1</literal> <operator pos:start="1910:31" pos:end="1910:31">+</operator> <name pos:start="1910:33" pos:end="1910:40"><name pos:start="1910:33" pos:end="1910:33">s</name><operator pos:start="1910:34" pos:end="1910:35">-&gt;</operator><name pos:start="1910:36" pos:end="1910:40">dflag</name></name> <operator pos:start="1910:42" pos:end="1910:42">+</operator> <name pos:start="1910:44" pos:end="1910:55"><name pos:start="1910:44" pos:end="1910:44">s</name><operator pos:start="1910:45" pos:end="1910:46">-&gt;</operator><name pos:start="1910:47" pos:end="1910:55">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1911:13" pos:end="1911:40"><expr pos:start="1911:13" pos:end="1911:39"><call pos:start="1911:13" pos:end="1911:39"><name pos:start="1911:13" pos:end="1911:33">gen_op_movl_seg_T0_vm</name><argument_list pos:start="1911:34" pos:end="1911:39">(<argument pos:start="1911:35" pos:end="1911:38"><expr pos:start="1911:35" pos:end="1911:38"><name pos:start="1911:35" pos:end="1911:38">R_CS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block" pos:start="1912:13" pos:end="1912:34">/* add stack offset */</comment>
            <expr_stmt pos:start="1913:13" pos:end="1913:55"><expr pos:start="1913:13" pos:end="1913:54"><call pos:start="1913:13" pos:end="1913:54"><name pos:start="1913:13" pos:end="1913:28">gen_stack_update</name><argument_list pos:start="1913:29" pos:end="1913:54">(<argument pos:start="1913:30" pos:end="1913:30"><expr pos:start="1913:30" pos:end="1913:30"><name pos:start="1913:30" pos:end="1913:30">s</name></expr></argument>, <argument pos:start="1913:33" pos:end="1913:53"><expr pos:start="1913:33" pos:end="1913:53"><name pos:start="1913:33" pos:end="1913:35">val</name> <operator pos:start="1913:37" pos:end="1913:37">+</operator> <operator pos:start="1913:39" pos:end="1913:39">(</operator><literal type="number" pos:start="1913:40" pos:end="1913:40">4</literal> <operator pos:start="1913:42" pos:end="1913:43">&lt;&lt;</operator> <name pos:start="1913:45" pos:end="1913:52"><name pos:start="1913:45" pos:end="1913:45">s</name><operator pos:start="1913:46" pos:end="1913:47">-&gt;</operator><name pos:start="1913:48" pos:end="1913:52">dflag</name></name><operator pos:start="1913:53" pos:end="1913:53">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1914:9" pos:end="1914:19"><expr pos:start="1914:9" pos:end="1914:18"><call pos:start="1914:9" pos:end="1914:18"><name pos:start="1914:9" pos:end="1914:15">gen_eob</name><argument_list pos:start="1914:16" pos:end="1914:18">(<argument pos:start="1914:17" pos:end="1914:17"><expr pos:start="1914:17" pos:end="1914:17"><name pos:start="1914:17" pos:end="1914:17">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="1915:9" pos:end="1915:14">break;</break>
    <case pos:start="1916:5" pos:end="1916:14">case <expr pos:start="1916:10" pos:end="1916:13"><literal type="number" pos:start="1916:10" pos:end="1916:13">0xcb</literal></expr>:</case> <comment type="block" pos:start="1916:16" pos:end="1916:25">/* lret */</comment>
        <expr_stmt pos:start="1917:9" pos:end="1917:16"><expr pos:start="1917:9" pos:end="1917:15"><name pos:start="1917:9" pos:end="1917:11">val</name> <operator pos:start="1917:13" pos:end="1917:13">=</operator> <literal type="number" pos:start="1917:15" pos:end="1917:15">0</literal></expr>;</expr_stmt>
        <goto pos:start="1918:9" pos:end="1918:21">goto <name pos:start="1918:14" pos:end="1918:20">do_lret</name>;</goto>
    <case pos:start="1919:5" pos:end="1919:14">case <expr pos:start="1919:10" pos:end="1919:13"><literal type="number" pos:start="1919:10" pos:end="1919:13">0xcf</literal></expr>:</case> <comment type="block" pos:start="1919:16" pos:end="1919:25">/* iret */</comment>
        <expr_stmt pos:start="1920:9" pos:end="1920:60"><expr pos:start="1920:9" pos:end="1920:59"><call pos:start="1920:9" pos:end="1920:59"><name pos:start="1920:9" pos:end="1920:31">gen_svm_check_intercept</name><argument_list pos:start="1920:32" pos:end="1920:59">(<argument pos:start="1920:33" pos:end="1920:33"><expr pos:start="1920:33" pos:end="1920:33"><name pos:start="1920:33" pos:end="1920:33">s</name></expr></argument>, <argument pos:start="1920:36" pos:end="1920:43"><expr pos:start="1920:36" pos:end="1920:43"><name pos:start="1920:36" pos:end="1920:43">pc_start</name></expr></argument>, <argument pos:start="1920:46" pos:end="1920:58"><expr pos:start="1920:46" pos:end="1920:58"><name pos:start="1920:46" pos:end="1920:58">SVM_EXIT_IRET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1921:9" pos:end="3141:17"><if pos:start="1921:9" pos:end="1925:9">if <condition pos:start="1921:12" pos:end="1921:19">(<expr pos:start="1921:13" pos:end="1921:18"><operator pos:start="1921:13" pos:end="1921:13">!</operator><name pos:start="1921:14" pos:end="1921:18"><name pos:start="1921:14" pos:end="1921:14">s</name><operator pos:start="1921:15" pos:end="1921:16">-&gt;</operator><name pos:start="1921:17" pos:end="1921:18">pe</name></name></expr>)</condition> <block pos:start="1921:21" pos:end="1925:9">{<block_content pos:start="1923:13" pos:end="1924:39">
            <comment type="block" pos:start="1922:13" pos:end="1922:27">/* real mode */</comment>
            <expr_stmt pos:start="1923:13" pos:end="1923:67"><expr pos:start="1923:13" pos:end="1923:66"><call pos:start="1923:13" pos:end="1923:66"><name pos:start="1923:13" pos:end="1923:32">gen_helper_iret_real</name><argument_list pos:start="1923:33" pos:end="1923:66">(<argument pos:start="1923:34" pos:end="1923:40"><expr pos:start="1923:34" pos:end="1923:40"><name pos:start="1923:34" pos:end="1923:40">cpu_env</name></expr></argument>, <argument pos:start="1923:43" pos:end="1923:65"><expr pos:start="1923:43" pos:end="1923:65"><call pos:start="1923:43" pos:end="1923:65"><name pos:start="1923:43" pos:end="1923:55">tcg_const_i32</name><argument_list pos:start="1923:56" pos:end="1923:65">(<argument pos:start="1923:57" pos:end="1923:64"><expr pos:start="1923:57" pos:end="1923:64"><name pos:start="1923:57" pos:end="1923:64"><name pos:start="1923:57" pos:end="1923:57">s</name><operator pos:start="1923:58" pos:end="1923:59">-&gt;</operator><name pos:start="1923:60" pos:end="1923:64">dflag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1924:13" pos:end="1924:39"><expr pos:start="1924:13" pos:end="1924:38"><call pos:start="1924:13" pos:end="1924:38"><name pos:start="1924:13" pos:end="1924:21">set_cc_op</name><argument_list pos:start="1924:22" pos:end="1924:38">(<argument pos:start="1924:23" pos:end="1924:23"><expr pos:start="1924:23" pos:end="1924:23"><name pos:start="1924:23" pos:end="1924:23">s</name></expr></argument>, <argument pos:start="1924:26" pos:end="1924:37"><expr pos:start="1924:26" pos:end="1924:37"><name pos:start="1924:26" pos:end="1924:37">CC_OP_EFLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="1925:11" pos:end="3141:17">else if <condition pos:start="1925:19" pos:end="1925:27">(<expr pos:start="1925:20" pos:end="1925:26"><name pos:start="1925:20" pos:end="1925:26"><name pos:start="1925:20" pos:end="1925:20">s</name><operator pos:start="1925:21" pos:end="1925:22">-&gt;</operator><name pos:start="1925:23" pos:end="1925:26">vm86</name></name></expr>)</condition> <block pos:start="1925:29" pos:end="3141:17">{<block_content pos:start="1926:13" pos:end="3141:17">
            <if_stmt pos:start="1926:13" pos:end="1931:9"><if pos:start="1926:13" pos:end="1928:13">if <condition pos:start="1926:16" pos:end="1926:29">(<expr pos:start="1926:17" pos:end="1926:28"><name pos:start="1926:17" pos:end="1926:23"><name pos:start="1926:17" pos:end="1926:17">s</name><operator pos:start="1926:18" pos:end="1926:19">-&gt;</operator><name pos:start="1926:20" pos:end="1926:23">iopl</name></name> <operator pos:start="1926:25" pos:end="1926:26">!=</operator> <literal type="number" pos:start="1926:28" pos:end="1926:28">3</literal></expr>)</condition> <block pos:start="1926:31" pos:end="1928:13">{<block_content pos:start="1927:17" pos:end="1927:68">
                <expr_stmt pos:start="1927:17" pos:end="1927:68"><expr pos:start="1927:17" pos:end="1927:67"><call pos:start="1927:17" pos:end="1927:67"><name pos:start="1927:17" pos:end="1927:29">gen_exception</name><argument_list pos:start="1927:30" pos:end="1927:67">(<argument pos:start="1927:31" pos:end="1927:31"><expr pos:start="1927:31" pos:end="1927:31"><name pos:start="1927:31" pos:end="1927:31">s</name></expr></argument>, <argument pos:start="1927:34" pos:end="1927:43"><expr pos:start="1927:34" pos:end="1927:43"><name pos:start="1927:34" pos:end="1927:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="1927:46" pos:end="1927:66"><expr pos:start="1927:46" pos:end="1927:66"><name pos:start="1927:46" pos:end="1927:53">pc_start</name> <operator pos:start="1927:55" pos:end="1927:55">-</operator> <name pos:start="1927:57" pos:end="1927:66"><name pos:start="1927:57" pos:end="1927:57">s</name><operator pos:start="1927:58" pos:end="1927:59">-&gt;</operator><name pos:start="1927:60" pos:end="1927:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="1928:15" pos:end="1931:9">else <block pos:start="1928:20" pos:end="1931:9">{<block_content pos:start="1929:17" pos:end="1930:43">
                <expr_stmt pos:start="1929:17" pos:end="1929:71"><expr pos:start="1929:17" pos:end="1929:70"><call pos:start="1929:17" pos:end="1929:70"><name pos:start="1929:17" pos:end="1929:36">gen_helper_iret_real</name><argument_list pos:start="1929:37" pos:end="1929:70">(<argument pos:start="1929:38" pos:end="1929:44"><expr pos:start="1929:38" pos:end="1929:44"><name pos:start="1929:38" pos:end="1929:44">cpu_env</name></expr></argument>, <argument pos:start="1929:47" pos:end="1929:69"><expr pos:start="1929:47" pos:end="1929:69"><call pos:start="1929:47" pos:end="1929:69"><name pos:start="1929:47" pos:end="1929:59">tcg_const_i32</name><argument_list pos:start="1929:60" pos:end="1929:69">(<argument pos:start="1929:61" pos:end="1929:68"><expr pos:start="1929:61" pos:end="1929:68"><name pos:start="1929:61" pos:end="1929:68"><name pos:start="1929:61" pos:end="1929:61">s</name><operator pos:start="1929:62" pos:end="1929:63">-&gt;</operator><name pos:start="1929:64" pos:end="1929:68">dflag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1930:17" pos:end="1930:43"><expr pos:start="1930:17" pos:end="1930:42"><call pos:start="1930:17" pos:end="1930:42"><name pos:start="1930:17" pos:end="1930:25">set_cc_op</name><argument_list pos:start="1930:26" pos:end="1930:42">(<argument pos:start="1930:27" pos:end="1930:27"><expr pos:start="1930:27" pos:end="1930:27"><name pos:start="1930:27" pos:end="1930:27">s</name></expr></argument>, <argument pos:start="1930:30" pos:end="1930:41"><expr pos:start="1930:30" pos:end="1930:41"><name pos:start="1930:30" pos:end="1930:41">CC_OP_EFLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt> <if_stmt pos:start="1931:11" pos:end="3141:17"><else pos:start="1931:11" pos:end="3141:17">else <block pos:start="1931:16" pos:end="3141:17">{<block_content pos:start="1932:13" pos:end="3141:17">
            <expr_stmt pos:start="1932:13" pos:end="1932:32"><expr pos:start="1932:13" pos:end="1932:31"><call pos:start="1932:13" pos:end="1932:31"><name pos:start="1932:13" pos:end="1932:28">gen_update_cc_op</name><argument_list pos:start="1932:29" pos:end="1932:31">(<argument pos:start="1932:30" pos:end="1932:30"><expr pos:start="1932:30" pos:end="1932:30"><name pos:start="1932:30" pos:end="1932:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1933:13" pos:end="1933:46"><expr pos:start="1933:13" pos:end="1933:45"><call pos:start="1933:13" pos:end="1933:45"><name pos:start="1933:13" pos:end="1933:22">gen_jmp_im</name><argument_list pos:start="1933:23" pos:end="1933:45">(<argument pos:start="1933:24" pos:end="1933:44"><expr pos:start="1933:24" pos:end="1933:44"><name pos:start="1933:24" pos:end="1933:31">pc_start</name> <operator pos:start="1933:33" pos:end="1933:33">-</operator> <name pos:start="1933:35" pos:end="1933:44"><name pos:start="1933:35" pos:end="1933:35">s</name><operator pos:start="1933:36" pos:end="1933:37">-&gt;</operator><name pos:start="1933:38" pos:end="1933:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1934:13" pos:end="1935:73"><expr pos:start="1934:13" pos:end="1935:72"><call pos:start="1934:13" pos:end="1935:72"><name pos:start="1934:13" pos:end="1934:37">gen_helper_iret_protected</name><argument_list pos:start="1934:38" pos:end="1935:72">(<argument pos:start="1934:39" pos:end="1934:45"><expr pos:start="1934:39" pos:end="1934:45"><name pos:start="1934:39" pos:end="1934:45">cpu_env</name></expr></argument>, <argument pos:start="1934:48" pos:end="1934:70"><expr pos:start="1934:48" pos:end="1934:70"><call pos:start="1934:48" pos:end="1934:70"><name pos:start="1934:48" pos:end="1934:60">tcg_const_i32</name><argument_list pos:start="1934:61" pos:end="1934:70">(<argument pos:start="1934:62" pos:end="1934:69"><expr pos:start="1934:62" pos:end="1934:69"><name pos:start="1934:62" pos:end="1934:69"><name pos:start="1934:62" pos:end="1934:62">s</name><operator pos:start="1934:63" pos:end="1934:64">-&gt;</operator><name pos:start="1934:65" pos:end="1934:69">dflag</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                      <argument pos:start="1935:39" pos:end="1935:71"><expr pos:start="1935:39" pos:end="1935:71"><call pos:start="1935:39" pos:end="1935:71"><name pos:start="1935:39" pos:end="1935:51">tcg_const_i32</name><argument_list pos:start="1935:52" pos:end="1935:71">(<argument pos:start="1935:53" pos:end="1935:70"><expr pos:start="1935:53" pos:end="1935:70"><name pos:start="1935:53" pos:end="1935:57"><name pos:start="1935:53" pos:end="1935:53">s</name><operator pos:start="1935:54" pos:end="1935:55">-&gt;</operator><name pos:start="1935:56" pos:end="1935:57">pc</name></name> <operator pos:start="1935:59" pos:end="1935:59">-</operator> <name pos:start="1935:61" pos:end="1935:70"><name pos:start="1935:61" pos:end="1935:61">s</name><operator pos:start="1935:62" pos:end="1935:63">-&gt;</operator><name pos:start="1935:64" pos:end="1935:70">cs_base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1936:13" pos:end="1936:39"><expr pos:start="1936:13" pos:end="1936:38"><call pos:start="1936:13" pos:end="1936:38"><name pos:start="1936:13" pos:end="1936:21">set_cc_op</name><argument_list pos:start="1936:22" pos:end="1936:38">(<argument pos:start="1936:23" pos:end="1936:23"><expr pos:start="1936:23" pos:end="1936:23"><name pos:start="1936:23" pos:end="1936:23">s</name></expr></argument>, <argument pos:start="1936:26" pos:end="1936:37"><expr pos:start="1936:26" pos:end="1936:37"><name pos:start="1936:26" pos:end="1936:37">CC_OP_EFLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1937:9" pos:end="1937:19"><expr pos:start="1937:9" pos:end="1937:18"><call pos:start="1937:9" pos:end="1937:18"><name pos:start="1937:9" pos:end="1937:15">gen_eob</name><argument_list pos:start="1937:16" pos:end="1937:18">(<argument pos:start="1937:17" pos:end="1937:17"><expr pos:start="1937:17" pos:end="1937:17"><name pos:start="1937:17" pos:end="1937:17">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="1938:9" pos:end="1938:14">break;</break>
    <case pos:start="1939:5" pos:end="1939:14">case <expr pos:start="1939:10" pos:end="1939:13"><literal type="number" pos:start="1939:10" pos:end="1939:13">0xe8</literal></expr>:</case> <comment type="block" pos:start="1939:16" pos:end="1939:28">/* call im */</comment>
        <block pos:start="1940:9" pos:end="3141:17">{<block_content pos:start="1941:13" pos:end="3141:17">
            <if_stmt pos:start="1941:13" pos:end="1944:58"><if pos:start="1941:13" pos:end="1942:58">if <condition pos:start="1941:16" pos:end="1941:22">(<expr pos:start="1941:17" pos:end="1941:21"><name pos:start="1941:17" pos:end="1941:21">dflag</name></expr>)</condition><block type="pseudo" pos:start="1942:17" pos:end="1942:58"><block_content pos:start="1942:17" pos:end="1942:58">
                <expr_stmt pos:start="1942:17" pos:end="1942:58"><expr pos:start="1942:17" pos:end="1942:57"><name pos:start="1942:17" pos:end="1942:20">tval</name> <operator pos:start="1942:22" pos:end="1942:22">=</operator> <operator pos:start="1942:24" pos:end="1942:24">(</operator><name pos:start="1942:25" pos:end="1942:31">int32_t</name><operator pos:start="1942:32" pos:end="1942:32">)</operator><call pos:start="1942:33" pos:end="1942:57"><name pos:start="1942:33" pos:end="1942:40">insn_get</name><argument_list pos:start="1942:41" pos:end="1942:57">(<argument pos:start="1942:42" pos:end="1942:44"><expr pos:start="1942:42" pos:end="1942:44"><name pos:start="1942:42" pos:end="1942:44">env</name></expr></argument>, <argument pos:start="1942:47" pos:end="1942:47"><expr pos:start="1942:47" pos:end="1942:47"><name pos:start="1942:47" pos:end="1942:47">s</name></expr></argument>, <argument pos:start="1942:50" pos:end="1942:56"><expr pos:start="1942:50" pos:end="1942:56"><name pos:start="1942:50" pos:end="1942:56">OT_LONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else pos:start="1943:13" pos:end="1944:58">else<block type="pseudo" pos:start="1944:17" pos:end="1944:58"><block_content pos:start="1944:17" pos:end="1944:58">
                <expr_stmt pos:start="1944:17" pos:end="1944:58"><expr pos:start="1944:17" pos:end="1944:57"><name pos:start="1944:17" pos:end="1944:20">tval</name> <operator pos:start="1944:22" pos:end="1944:22">=</operator> <operator pos:start="1944:24" pos:end="1944:24">(</operator><name pos:start="1944:25" pos:end="1944:31">int16_t</name><operator pos:start="1944:32" pos:end="1944:32">)</operator><call pos:start="1944:33" pos:end="1944:57"><name pos:start="1944:33" pos:end="1944:40">insn_get</name><argument_list pos:start="1944:41" pos:end="1944:57">(<argument pos:start="1944:42" pos:end="1944:44"><expr pos:start="1944:42" pos:end="1944:44"><name pos:start="1944:42" pos:end="1944:44">env</name></expr></argument>, <argument pos:start="1944:47" pos:end="1944:47"><expr pos:start="1944:47" pos:end="1944:47"><name pos:start="1944:47" pos:end="1944:47">s</name></expr></argument>, <argument pos:start="1944:50" pos:end="1944:56"><expr pos:start="1944:50" pos:end="1944:56"><name pos:start="1944:50" pos:end="1944:56">OT_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <expr_stmt pos:start="1945:13" pos:end="1945:42"><expr pos:start="1945:13" pos:end="1945:41"><name pos:start="1945:13" pos:end="1945:20">next_eip</name> <operator pos:start="1945:22" pos:end="1945:22">=</operator> <name pos:start="1945:24" pos:end="1945:28"><name pos:start="1945:24" pos:end="1945:24">s</name><operator pos:start="1945:25" pos:end="1945:26">-&gt;</operator><name pos:start="1945:27" pos:end="1945:28">pc</name></name> <operator pos:start="1945:30" pos:end="1945:30">-</operator> <name pos:start="1945:32" pos:end="1945:41"><name pos:start="1945:32" pos:end="1945:32">s</name><operator pos:start="1945:33" pos:end="1945:34">-&gt;</operator><name pos:start="1945:35" pos:end="1945:41">cs_base</name></name></expr>;</expr_stmt>
            <expr_stmt pos:start="1946:13" pos:end="1946:29"><expr pos:start="1946:13" pos:end="1946:28"><name pos:start="1946:13" pos:end="1946:16">tval</name> <operator pos:start="1946:18" pos:end="1946:19">+=</operator> <name pos:start="1946:21" pos:end="1946:28">next_eip</name></expr>;</expr_stmt>
            <if_stmt pos:start="1947:13" pos:end="1950:35"><if pos:start="1947:13" pos:end="1948:31">if <condition pos:start="1947:16" pos:end="1947:30">(<expr pos:start="1947:17" pos:end="1947:29"><name pos:start="1947:17" pos:end="1947:24"><name pos:start="1947:17" pos:end="1947:17">s</name><operator pos:start="1947:18" pos:end="1947:19">-&gt;</operator><name pos:start="1947:20" pos:end="1947:24">dflag</name></name> <operator pos:start="1947:26" pos:end="1947:27">==</operator> <literal type="number" pos:start="1947:29" pos:end="1947:29">0</literal></expr>)</condition><block type="pseudo" pos:start="1948:17" pos:end="1948:31"><block_content pos:start="1948:17" pos:end="1948:31">
                <expr_stmt pos:start="1948:17" pos:end="1948:31"><expr pos:start="1948:17" pos:end="1948:30"><name pos:start="1948:17" pos:end="1948:20">tval</name> <operator pos:start="1948:22" pos:end="1948:23">&amp;=</operator> <literal type="number" pos:start="1948:25" pos:end="1948:30">0xffff</literal></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif" pos:start="1949:13" pos:end="1950:35">else if<condition pos:start="1949:20" pos:end="1949:31">(<expr pos:start="1949:21" pos:end="1949:30"><operator pos:start="1949:21" pos:end="1949:21">!</operator><call pos:start="1949:22" pos:end="1949:30"><name pos:start="1949:22" pos:end="1949:27">CODE64</name><argument_list pos:start="1949:28" pos:end="1949:30">(<argument pos:start="1949:29" pos:end="1949:29"><expr pos:start="1949:29" pos:end="1949:29"><name pos:start="1949:29" pos:end="1949:29">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1950:17" pos:end="1950:35"><block_content pos:start="1950:17" pos:end="1950:35">
                <expr_stmt pos:start="1950:17" pos:end="1950:35"><expr pos:start="1950:17" pos:end="1950:34"><name pos:start="1950:17" pos:end="1950:20">tval</name> <operator pos:start="1950:22" pos:end="1950:23">&amp;=</operator> <literal type="number" pos:start="1950:25" pos:end="1950:34">0xffffffff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt pos:start="1951:13" pos:end="1951:38"><expr pos:start="1951:13" pos:end="1951:37"><call pos:start="1951:13" pos:end="1951:37"><name pos:start="1951:13" pos:end="1951:27">gen_movtl_T0_im</name><argument_list pos:start="1951:28" pos:end="1951:37">(<argument pos:start="1951:29" pos:end="1951:36"><expr pos:start="1951:29" pos:end="1951:36"><name pos:start="1951:29" pos:end="1951:36">next_eip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1952:13" pos:end="1952:27"><expr pos:start="1952:13" pos:end="1952:26"><call pos:start="1952:13" pos:end="1952:26"><name pos:start="1952:13" pos:end="1952:23">gen_push_T0</name><argument_list pos:start="1952:24" pos:end="1952:26">(<argument pos:start="1952:25" pos:end="1952:25"><expr pos:start="1952:25" pos:end="1952:25"><name pos:start="1952:25" pos:end="1952:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1953:13" pos:end="1953:29"><expr pos:start="1953:13" pos:end="1953:28"><call pos:start="1953:13" pos:end="1953:28"><name pos:start="1953:13" pos:end="1953:19">gen_jmp</name><argument_list pos:start="1953:20" pos:end="1953:28">(<argument pos:start="1953:21" pos:end="1953:21"><expr pos:start="1953:21" pos:end="1953:21"><name pos:start="1953:21" pos:end="1953:21">s</name></expr></argument>, <argument pos:start="1953:24" pos:end="1953:27"><expr pos:start="1953:24" pos:end="1953:27"><name pos:start="1953:24" pos:end="1953:27">tval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="1954:9" pos:end="1954:14">break;</break>
    <case pos:start="1955:5" pos:end="1955:14">case <expr pos:start="1955:10" pos:end="1955:13"><literal type="number" pos:start="1955:10" pos:end="1955:13">0x9a</literal></expr>:</case> <comment type="block" pos:start="1955:16" pos:end="1955:29">/* lcall im */</comment>
        <block pos:start="1956:9" pos:end="3141:17">{<block_content pos:start="1957:13" pos:end="3141:17">
            <decl_stmt pos:start="1957:13" pos:end="1957:42"><decl pos:start="1957:13" pos:end="1957:33"><type pos:start="1957:13" pos:end="1957:24"><name pos:start="1957:13" pos:end="1957:20">unsigned</name> <name pos:start="1957:22" pos:end="1957:24">int</name></type> <name pos:start="1957:26" pos:end="1957:33">selector</name></decl>, <decl pos:start="1957:36" pos:end="1957:41"><type ref="prev" pos:start="1957:13" pos:end="1957:24"/><name pos:start="1957:36" pos:end="1957:41">offset</name></decl>;</decl_stmt>
            <if_stmt pos:start="1958:13" pos:end="1959:43"><if pos:start="1958:13" pos:end="1959:43">if <condition pos:start="1958:16" pos:end="1958:26">(<expr pos:start="1958:17" pos:end="1958:25"><call pos:start="1958:17" pos:end="1958:25"><name pos:start="1958:17" pos:end="1958:22">CODE64</name><argument_list pos:start="1958:23" pos:end="1958:25">(<argument pos:start="1958:24" pos:end="1958:24"><expr pos:start="1958:24" pos:end="1958:24"><name pos:start="1958:24" pos:end="1958:24">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1959:13" pos:end="1959:43"><block_content pos:start="1959:13" pos:end="1959:43">
            <expr_stmt pos:start="1959:13" pos:end="1959:43"><expr pos:start="1959:13" pos:end="1959:42"><name pos:start="1959:13" pos:end="1959:14">ot</name> <operator pos:start="1959:16" pos:end="1959:16">=</operator> <ternary pos:start="1959:18" pos:end="1959:42"><condition pos:start="1959:18" pos:end="1959:24"><expr pos:start="1959:18" pos:end="1959:22"><name pos:start="1959:18" pos:end="1959:22">dflag</name></expr> ?</condition><then pos:start="1959:26" pos:end="1959:32"> <expr pos:start="1959:26" pos:end="1959:32"><name pos:start="1959:26" pos:end="1959:32">OT_LONG</name></expr> </then><else pos:start="1959:34" pos:end="1959:42">: <expr pos:start="1959:36" pos:end="1959:42"><name pos:start="1959:36" pos:end="1959:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt pos:start="1960:13" pos:end="1960:42"><expr pos:start="1960:13" pos:end="1960:41"><name pos:start="1960:13" pos:end="1960:18">offset</name> <operator pos:start="1960:20" pos:end="1960:20">=</operator> <call pos:start="1960:22" pos:end="1960:41"><name pos:start="1960:22" pos:end="1960:29">insn_get</name><argument_list pos:start="1960:30" pos:end="1960:41">(<argument pos:start="1960:31" pos:end="1960:33"><expr pos:start="1960:31" pos:end="1960:33"><name pos:start="1960:31" pos:end="1960:33">env</name></expr></argument>, <argument pos:start="1960:36" pos:end="1960:36"><expr pos:start="1960:36" pos:end="1960:36"><name pos:start="1960:36" pos:end="1960:36">s</name></expr></argument>, <argument pos:start="1960:39" pos:end="1960:40"><expr pos:start="1960:39" pos:end="1960:40"><name pos:start="1960:39" pos:end="1960:40">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1961:13" pos:end="1961:49"><expr pos:start="1961:13" pos:end="1961:48"><name pos:start="1961:13" pos:end="1961:20">selector</name> <operator pos:start="1961:22" pos:end="1961:22">=</operator> <call pos:start="1961:24" pos:end="1961:48"><name pos:start="1961:24" pos:end="1961:31">insn_get</name><argument_list pos:start="1961:32" pos:end="1961:48">(<argument pos:start="1961:33" pos:end="1961:35"><expr pos:start="1961:33" pos:end="1961:35"><name pos:start="1961:33" pos:end="1961:35">env</name></expr></argument>, <argument pos:start="1961:38" pos:end="1961:38"><expr pos:start="1961:38" pos:end="1961:38"><name pos:start="1961:38" pos:end="1961:38">s</name></expr></argument>, <argument pos:start="1961:41" pos:end="1961:47"><expr pos:start="1961:41" pos:end="1961:47"><name pos:start="1961:41" pos:end="1961:47">OT_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1962:13" pos:end="1962:40"><expr pos:start="1962:13" pos:end="1962:39"><call pos:start="1962:13" pos:end="1962:39"><name pos:start="1962:13" pos:end="1962:29">gen_op_movl_T0_im</name><argument_list pos:start="1962:30" pos:end="1962:39">(<argument pos:start="1962:31" pos:end="1962:38"><expr pos:start="1962:31" pos:end="1962:38"><name pos:start="1962:31" pos:end="1962:38">selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1963:13" pos:end="1963:39"><expr pos:start="1963:13" pos:end="1963:38"><call pos:start="1963:13" pos:end="1963:38"><name pos:start="1963:13" pos:end="1963:30">gen_op_movl_T1_imu</name><argument_list pos:start="1963:31" pos:end="1963:38">(<argument pos:start="1963:32" pos:end="1963:37"><expr pos:start="1963:32" pos:end="1963:37"><name pos:start="1963:32" pos:end="1963:37">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto pos:start="1964:9" pos:end="1964:22">goto <name pos:start="1964:14" pos:end="1964:21">do_lcall</name>;</goto>
    <case pos:start="1965:5" pos:end="1965:14">case <expr pos:start="1965:10" pos:end="1965:13"><literal type="number" pos:start="1965:10" pos:end="1965:13">0xe9</literal></expr>:</case> <comment type="block" pos:start="1965:16" pos:end="1965:27">/* jmp im */</comment>
        <if_stmt pos:start="1966:9" pos:end="1969:54"><if pos:start="1966:9" pos:end="1967:54">if <condition pos:start="1966:12" pos:end="1966:18">(<expr pos:start="1966:13" pos:end="1966:17"><name pos:start="1966:13" pos:end="1966:17">dflag</name></expr>)</condition><block type="pseudo" pos:start="1967:13" pos:end="1967:54"><block_content pos:start="1967:13" pos:end="1967:54">
            <expr_stmt pos:start="1967:13" pos:end="1967:54"><expr pos:start="1967:13" pos:end="1967:53"><name pos:start="1967:13" pos:end="1967:16">tval</name> <operator pos:start="1967:18" pos:end="1967:18">=</operator> <operator pos:start="1967:20" pos:end="1967:20">(</operator><name pos:start="1967:21" pos:end="1967:27">int32_t</name><operator pos:start="1967:28" pos:end="1967:28">)</operator><call pos:start="1967:29" pos:end="1967:53"><name pos:start="1967:29" pos:end="1967:36">insn_get</name><argument_list pos:start="1967:37" pos:end="1967:53">(<argument pos:start="1967:38" pos:end="1967:40"><expr pos:start="1967:38" pos:end="1967:40"><name pos:start="1967:38" pos:end="1967:40">env</name></expr></argument>, <argument pos:start="1967:43" pos:end="1967:43"><expr pos:start="1967:43" pos:end="1967:43"><name pos:start="1967:43" pos:end="1967:43">s</name></expr></argument>, <argument pos:start="1967:46" pos:end="1967:52"><expr pos:start="1967:46" pos:end="1967:52"><name pos:start="1967:46" pos:end="1967:52">OT_LONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else pos:start="1968:9" pos:end="1969:54">else<block type="pseudo" pos:start="1969:13" pos:end="1969:54"><block_content pos:start="1969:13" pos:end="1969:54">
            <expr_stmt pos:start="1969:13" pos:end="1969:54"><expr pos:start="1969:13" pos:end="1969:53"><name pos:start="1969:13" pos:end="1969:16">tval</name> <operator pos:start="1969:18" pos:end="1969:18">=</operator> <operator pos:start="1969:20" pos:end="1969:20">(</operator><name pos:start="1969:21" pos:end="1969:27">int16_t</name><operator pos:start="1969:28" pos:end="1969:28">)</operator><call pos:start="1969:29" pos:end="1969:53"><name pos:start="1969:29" pos:end="1969:36">insn_get</name><argument_list pos:start="1969:37" pos:end="1969:53">(<argument pos:start="1969:38" pos:end="1969:40"><expr pos:start="1969:38" pos:end="1969:40"><name pos:start="1969:38" pos:end="1969:40">env</name></expr></argument>, <argument pos:start="1969:43" pos:end="1969:43"><expr pos:start="1969:43" pos:end="1969:43"><name pos:start="1969:43" pos:end="1969:43">s</name></expr></argument>, <argument pos:start="1969:46" pos:end="1969:52"><expr pos:start="1969:46" pos:end="1969:52"><name pos:start="1969:46" pos:end="1969:52">OT_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt pos:start="1970:9" pos:end="1970:35"><expr pos:start="1970:9" pos:end="1970:34"><name pos:start="1970:9" pos:end="1970:12">tval</name> <operator pos:start="1970:14" pos:end="1970:15">+=</operator> <name pos:start="1970:17" pos:end="1970:21"><name pos:start="1970:17" pos:end="1970:17">s</name><operator pos:start="1970:18" pos:end="1970:19">-&gt;</operator><name pos:start="1970:20" pos:end="1970:21">pc</name></name> <operator pos:start="1970:23" pos:end="1970:23">-</operator> <name pos:start="1970:25" pos:end="1970:34"><name pos:start="1970:25" pos:end="1970:25">s</name><operator pos:start="1970:26" pos:end="1970:27">-&gt;</operator><name pos:start="1970:28" pos:end="1970:34">cs_base</name></name></expr>;</expr_stmt>
        <if_stmt pos:start="1971:9" pos:end="1974:31"><if pos:start="1971:9" pos:end="1972:27">if <condition pos:start="1971:12" pos:end="1971:26">(<expr pos:start="1971:13" pos:end="1971:25"><name pos:start="1971:13" pos:end="1971:20"><name pos:start="1971:13" pos:end="1971:13">s</name><operator pos:start="1971:14" pos:end="1971:15">-&gt;</operator><name pos:start="1971:16" pos:end="1971:20">dflag</name></name> <operator pos:start="1971:22" pos:end="1971:23">==</operator> <literal type="number" pos:start="1971:25" pos:end="1971:25">0</literal></expr>)</condition><block type="pseudo" pos:start="1972:13" pos:end="1972:27"><block_content pos:start="1972:13" pos:end="1972:27">
            <expr_stmt pos:start="1972:13" pos:end="1972:27"><expr pos:start="1972:13" pos:end="1972:26"><name pos:start="1972:13" pos:end="1972:16">tval</name> <operator pos:start="1972:18" pos:end="1972:19">&amp;=</operator> <literal type="number" pos:start="1972:21" pos:end="1972:26">0xffff</literal></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif" pos:start="1973:9" pos:end="1974:31">else if<condition pos:start="1973:16" pos:end="1973:27">(<expr pos:start="1973:17" pos:end="1973:26"><operator pos:start="1973:17" pos:end="1973:17">!</operator><call pos:start="1973:18" pos:end="1973:26"><name pos:start="1973:18" pos:end="1973:23">CODE64</name><argument_list pos:start="1973:24" pos:end="1973:26">(<argument pos:start="1973:25" pos:end="1973:25"><expr pos:start="1973:25" pos:end="1973:25"><name pos:start="1973:25" pos:end="1973:25">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1974:13" pos:end="1974:31"><block_content pos:start="1974:13" pos:end="1974:31">
            <expr_stmt pos:start="1974:13" pos:end="1974:31"><expr pos:start="1974:13" pos:end="1974:30"><name pos:start="1974:13" pos:end="1974:16">tval</name> <operator pos:start="1974:18" pos:end="1974:19">&amp;=</operator> <literal type="number" pos:start="1974:21" pos:end="1974:30">0xffffffff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="1975:9" pos:end="1975:25"><expr pos:start="1975:9" pos:end="1975:24"><call pos:start="1975:9" pos:end="1975:24"><name pos:start="1975:9" pos:end="1975:15">gen_jmp</name><argument_list pos:start="1975:16" pos:end="1975:24">(<argument pos:start="1975:17" pos:end="1975:17"><expr pos:start="1975:17" pos:end="1975:17"><name pos:start="1975:17" pos:end="1975:17">s</name></expr></argument>, <argument pos:start="1975:20" pos:end="1975:23"><expr pos:start="1975:20" pos:end="1975:23"><name pos:start="1975:20" pos:end="1975:23">tval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="1976:9" pos:end="1976:14">break;</break>
    <case pos:start="1977:5" pos:end="1977:14">case <expr pos:start="1977:10" pos:end="1977:13"><literal type="number" pos:start="1977:10" pos:end="1977:13">0xea</literal></expr>:</case> <comment type="block" pos:start="1977:16" pos:end="1977:28">/* ljmp im */</comment>
        <block pos:start="1978:9" pos:end="3141:17">{<block_content pos:start="1979:13" pos:end="3141:17">
            <decl_stmt pos:start="1979:13" pos:end="1979:42"><decl pos:start="1979:13" pos:end="1979:33"><type pos:start="1979:13" pos:end="1979:24"><name pos:start="1979:13" pos:end="1979:20">unsigned</name> <name pos:start="1979:22" pos:end="1979:24">int</name></type> <name pos:start="1979:26" pos:end="1979:33">selector</name></decl>, <decl pos:start="1979:36" pos:end="1979:41"><type ref="prev" pos:start="1979:13" pos:end="1979:24"/><name pos:start="1979:36" pos:end="1979:41">offset</name></decl>;</decl_stmt>
            <if_stmt pos:start="1980:13" pos:end="1981:43"><if pos:start="1980:13" pos:end="1981:43">if <condition pos:start="1980:16" pos:end="1980:26">(<expr pos:start="1980:17" pos:end="1980:25"><call pos:start="1980:17" pos:end="1980:25"><name pos:start="1980:17" pos:end="1980:22">CODE64</name><argument_list pos:start="1980:23" pos:end="1980:25">(<argument pos:start="1980:24" pos:end="1980:24"><expr pos:start="1980:24" pos:end="1980:24"><name pos:start="1980:24" pos:end="1980:24">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1981:13" pos:end="1981:43"><block_content pos:start="1981:13" pos:end="1981:43">
            <expr_stmt pos:start="1981:13" pos:end="1981:43"><expr pos:start="1981:13" pos:end="1981:42"><name pos:start="1981:13" pos:end="1981:14">ot</name> <operator pos:start="1981:16" pos:end="1981:16">=</operator> <ternary pos:start="1981:18" pos:end="1981:42"><condition pos:start="1981:18" pos:end="1981:24"><expr pos:start="1981:18" pos:end="1981:22"><name pos:start="1981:18" pos:end="1981:22">dflag</name></expr> ?</condition><then pos:start="1981:26" pos:end="1981:32"> <expr pos:start="1981:26" pos:end="1981:32"><name pos:start="1981:26" pos:end="1981:32">OT_LONG</name></expr> </then><else pos:start="1981:34" pos:end="1981:42">: <expr pos:start="1981:36" pos:end="1981:42"><name pos:start="1981:36" pos:end="1981:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt pos:start="1982:13" pos:end="1982:42"><expr pos:start="1982:13" pos:end="1982:41"><name pos:start="1982:13" pos:end="1982:18">offset</name> <operator pos:start="1982:20" pos:end="1982:20">=</operator> <call pos:start="1982:22" pos:end="1982:41"><name pos:start="1982:22" pos:end="1982:29">insn_get</name><argument_list pos:start="1982:30" pos:end="1982:41">(<argument pos:start="1982:31" pos:end="1982:33"><expr pos:start="1982:31" pos:end="1982:33"><name pos:start="1982:31" pos:end="1982:33">env</name></expr></argument>, <argument pos:start="1982:36" pos:end="1982:36"><expr pos:start="1982:36" pos:end="1982:36"><name pos:start="1982:36" pos:end="1982:36">s</name></expr></argument>, <argument pos:start="1982:39" pos:end="1982:40"><expr pos:start="1982:39" pos:end="1982:40"><name pos:start="1982:39" pos:end="1982:40">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1983:13" pos:end="1983:49"><expr pos:start="1983:13" pos:end="1983:48"><name pos:start="1983:13" pos:end="1983:20">selector</name> <operator pos:start="1983:22" pos:end="1983:22">=</operator> <call pos:start="1983:24" pos:end="1983:48"><name pos:start="1983:24" pos:end="1983:31">insn_get</name><argument_list pos:start="1983:32" pos:end="1983:48">(<argument pos:start="1983:33" pos:end="1983:35"><expr pos:start="1983:33" pos:end="1983:35"><name pos:start="1983:33" pos:end="1983:35">env</name></expr></argument>, <argument pos:start="1983:38" pos:end="1983:38"><expr pos:start="1983:38" pos:end="1983:38"><name pos:start="1983:38" pos:end="1983:38">s</name></expr></argument>, <argument pos:start="1983:41" pos:end="1983:47"><expr pos:start="1983:41" pos:end="1983:47"><name pos:start="1983:41" pos:end="1983:47">OT_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1984:13" pos:end="1984:40"><expr pos:start="1984:13" pos:end="1984:39"><call pos:start="1984:13" pos:end="1984:39"><name pos:start="1984:13" pos:end="1984:29">gen_op_movl_T0_im</name><argument_list pos:start="1984:30" pos:end="1984:39">(<argument pos:start="1984:31" pos:end="1984:38"><expr pos:start="1984:31" pos:end="1984:38"><name pos:start="1984:31" pos:end="1984:38">selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1985:13" pos:end="1985:39"><expr pos:start="1985:13" pos:end="1985:38"><call pos:start="1985:13" pos:end="1985:38"><name pos:start="1985:13" pos:end="1985:30">gen_op_movl_T1_imu</name><argument_list pos:start="1985:31" pos:end="1985:38">(<argument pos:start="1985:32" pos:end="1985:37"><expr pos:start="1985:32" pos:end="1985:37"><name pos:start="1985:32" pos:end="1985:37">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto pos:start="1986:9" pos:end="1986:21">goto <name pos:start="1986:14" pos:end="1986:20">do_ljmp</name>;</goto>
    <case pos:start="1987:5" pos:end="1987:14">case <expr pos:start="1987:10" pos:end="1987:13"><literal type="number" pos:start="1987:10" pos:end="1987:13">0xeb</literal></expr>:</case> <comment type="block" pos:start="1987:16" pos:end="1987:27">/* jmp Jb */</comment>
        <expr_stmt pos:start="1988:9" pos:end="1988:49"><expr pos:start="1988:9" pos:end="1988:48"><name pos:start="1988:9" pos:end="1988:12">tval</name> <operator pos:start="1988:14" pos:end="1988:14">=</operator> <operator pos:start="1988:16" pos:end="1988:16">(</operator><name pos:start="1988:17" pos:end="1988:22">int8_t</name><operator pos:start="1988:23" pos:end="1988:23">)</operator><call pos:start="1988:24" pos:end="1988:48"><name pos:start="1988:24" pos:end="1988:31">insn_get</name><argument_list pos:start="1988:32" pos:end="1988:48">(<argument pos:start="1988:33" pos:end="1988:35"><expr pos:start="1988:33" pos:end="1988:35"><name pos:start="1988:33" pos:end="1988:35">env</name></expr></argument>, <argument pos:start="1988:38" pos:end="1988:38"><expr pos:start="1988:38" pos:end="1988:38"><name pos:start="1988:38" pos:end="1988:38">s</name></expr></argument>, <argument pos:start="1988:41" pos:end="1988:47"><expr pos:start="1988:41" pos:end="1988:47"><name pos:start="1988:41" pos:end="1988:47">OT_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1989:9" pos:end="1989:35"><expr pos:start="1989:9" pos:end="1989:34"><name pos:start="1989:9" pos:end="1989:12">tval</name> <operator pos:start="1989:14" pos:end="1989:15">+=</operator> <name pos:start="1989:17" pos:end="1989:21"><name pos:start="1989:17" pos:end="1989:17">s</name><operator pos:start="1989:18" pos:end="1989:19">-&gt;</operator><name pos:start="1989:20" pos:end="1989:21">pc</name></name> <operator pos:start="1989:23" pos:end="1989:23">-</operator> <name pos:start="1989:25" pos:end="1989:34"><name pos:start="1989:25" pos:end="1989:25">s</name><operator pos:start="1989:26" pos:end="1989:27">-&gt;</operator><name pos:start="1989:28" pos:end="1989:34">cs_base</name></name></expr>;</expr_stmt>
        <if_stmt pos:start="1990:9" pos:end="1991:27"><if pos:start="1990:9" pos:end="1991:27">if <condition pos:start="1990:12" pos:end="1990:26">(<expr pos:start="1990:13" pos:end="1990:25"><name pos:start="1990:13" pos:end="1990:20"><name pos:start="1990:13" pos:end="1990:13">s</name><operator pos:start="1990:14" pos:end="1990:15">-&gt;</operator><name pos:start="1990:16" pos:end="1990:20">dflag</name></name> <operator pos:start="1990:22" pos:end="1990:23">==</operator> <literal type="number" pos:start="1990:25" pos:end="1990:25">0</literal></expr>)</condition><block type="pseudo" pos:start="1991:13" pos:end="1991:27"><block_content pos:start="1991:13" pos:end="1991:27">
            <expr_stmt pos:start="1991:13" pos:end="1991:27"><expr pos:start="1991:13" pos:end="1991:26"><name pos:start="1991:13" pos:end="1991:16">tval</name> <operator pos:start="1991:18" pos:end="1991:19">&amp;=</operator> <literal type="number" pos:start="1991:21" pos:end="1991:26">0xffff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="1992:9" pos:end="1992:25"><expr pos:start="1992:9" pos:end="1992:24"><call pos:start="1992:9" pos:end="1992:24"><name pos:start="1992:9" pos:end="1992:15">gen_jmp</name><argument_list pos:start="1992:16" pos:end="1992:24">(<argument pos:start="1992:17" pos:end="1992:17"><expr pos:start="1992:17" pos:end="1992:17"><name pos:start="1992:17" pos:end="1992:17">s</name></expr></argument>, <argument pos:start="1992:20" pos:end="1992:23"><expr pos:start="1992:20" pos:end="1992:23"><name pos:start="1992:20" pos:end="1992:23">tval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="1993:9" pos:end="1993:14">break;</break>
    <case pos:start="1994:5" pos:end="1994:23">case <expr pos:start="1994:10" pos:end="1994:22"><literal type="number" pos:start="1994:10" pos:end="1994:13">0x70</literal> <operator pos:start="1994:15" pos:end="1994:17">...</operator> <literal type="number" pos:start="1994:19" pos:end="1994:22">0x7f</literal></expr>:</case> <comment type="block" pos:start="1994:25" pos:end="1994:36">/* jcc Jb */</comment>
        <expr_stmt pos:start="1995:9" pos:end="1995:49"><expr pos:start="1995:9" pos:end="1995:48"><name pos:start="1995:9" pos:end="1995:12">tval</name> <operator pos:start="1995:14" pos:end="1995:14">=</operator> <operator pos:start="1995:16" pos:end="1995:16">(</operator><name pos:start="1995:17" pos:end="1995:22">int8_t</name><operator pos:start="1995:23" pos:end="1995:23">)</operator><call pos:start="1995:24" pos:end="1995:48"><name pos:start="1995:24" pos:end="1995:31">insn_get</name><argument_list pos:start="1995:32" pos:end="1995:48">(<argument pos:start="1995:33" pos:end="1995:35"><expr pos:start="1995:33" pos:end="1995:35"><name pos:start="1995:33" pos:end="1995:35">env</name></expr></argument>, <argument pos:start="1995:38" pos:end="1995:38"><expr pos:start="1995:38" pos:end="1995:38"><name pos:start="1995:38" pos:end="1995:38">s</name></expr></argument>, <argument pos:start="1995:41" pos:end="1995:47"><expr pos:start="1995:41" pos:end="1995:47"><name pos:start="1995:41" pos:end="1995:47">OT_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto pos:start="1996:9" pos:end="1996:20">goto <name pos:start="1996:14" pos:end="1996:19">do_jcc</name>;</goto>
    <case pos:start="1997:5" pos:end="1997:25">case <expr pos:start="1997:10" pos:end="1997:24"><literal type="number" pos:start="1997:10" pos:end="1997:14">0x180</literal> <operator pos:start="1997:16" pos:end="1997:18">...</operator> <literal type="number" pos:start="1997:20" pos:end="1997:24">0x18f</literal></expr>:</case> <comment type="block" pos:start="1997:27" pos:end="1997:38">/* jcc Jv */</comment>
        <if_stmt pos:start="1998:9" pos:end="3141:17"><if pos:start="1998:9" pos:end="2000:9">if <condition pos:start="1998:12" pos:end="1998:18">(<expr pos:start="1998:13" pos:end="1998:17"><name pos:start="1998:13" pos:end="1998:17">dflag</name></expr>)</condition> <block pos:start="1998:20" pos:end="2000:9">{<block_content pos:start="1999:13" pos:end="1999:54">
            <expr_stmt pos:start="1999:13" pos:end="1999:54"><expr pos:start="1999:13" pos:end="1999:53"><name pos:start="1999:13" pos:end="1999:16">tval</name> <operator pos:start="1999:18" pos:end="1999:18">=</operator> <operator pos:start="1999:20" pos:end="1999:20">(</operator><name pos:start="1999:21" pos:end="1999:27">int32_t</name><operator pos:start="1999:28" pos:end="1999:28">)</operator><call pos:start="1999:29" pos:end="1999:53"><name pos:start="1999:29" pos:end="1999:36">insn_get</name><argument_list pos:start="1999:37" pos:end="1999:53">(<argument pos:start="1999:38" pos:end="1999:40"><expr pos:start="1999:38" pos:end="1999:40"><name pos:start="1999:38" pos:end="1999:40">env</name></expr></argument>, <argument pos:start="1999:43" pos:end="1999:43"><expr pos:start="1999:43" pos:end="1999:43"><name pos:start="1999:43" pos:end="1999:43">s</name></expr></argument>, <argument pos:start="1999:46" pos:end="1999:52"><expr pos:start="1999:46" pos:end="1999:52"><name pos:start="1999:46" pos:end="1999:52">OT_LONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="2000:11" pos:end="3141:17">else <block pos:start="2000:16" pos:end="3141:17">{<block_content pos:start="2001:13" pos:end="3141:17">
            <expr_stmt pos:start="2001:13" pos:end="2001:54"><expr pos:start="2001:13" pos:end="2001:53"><name pos:start="2001:13" pos:end="2001:16">tval</name> <operator pos:start="2001:18" pos:end="2001:18">=</operator> <operator pos:start="2001:20" pos:end="2001:20">(</operator><name pos:start="2001:21" pos:end="2001:27">int16_t</name><operator pos:start="2001:28" pos:end="2001:28">)</operator><call pos:start="2001:29" pos:end="2001:53"><name pos:start="2001:29" pos:end="2001:36">insn_get</name><argument_list pos:start="2001:37" pos:end="2001:53">(<argument pos:start="2001:38" pos:end="2001:40"><expr pos:start="2001:38" pos:end="2001:40"><name pos:start="2001:38" pos:end="2001:40">env</name></expr></argument>, <argument pos:start="2001:43" pos:end="2001:43"><expr pos:start="2001:43" pos:end="2001:43"><name pos:start="2001:43" pos:end="2001:43">s</name></expr></argument>, <argument pos:start="2001:46" pos:end="2001:52"><expr pos:start="2001:46" pos:end="2001:52"><name pos:start="2001:46" pos:end="2001:52">OT_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <label pos:start="2002:5" pos:end="2002:11"><name pos:start="2002:5" pos:end="2002:10">do_jcc</name>:</label>
        <expr_stmt pos:start="2003:9" pos:end="2003:38"><expr pos:start="2003:9" pos:end="2003:37"><name pos:start="2003:9" pos:end="2003:16">next_eip</name> <operator pos:start="2003:18" pos:end="2003:18">=</operator> <name pos:start="2003:20" pos:end="2003:24"><name pos:start="2003:20" pos:end="2003:20">s</name><operator pos:start="2003:21" pos:end="2003:22">-&gt;</operator><name pos:start="2003:23" pos:end="2003:24">pc</name></name> <operator pos:start="2003:26" pos:end="2003:26">-</operator> <name pos:start="2003:28" pos:end="2003:37"><name pos:start="2003:28" pos:end="2003:28">s</name><operator pos:start="2003:29" pos:end="2003:30">-&gt;</operator><name pos:start="2003:31" pos:end="2003:37">cs_base</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="2004:9" pos:end="2004:25"><expr pos:start="2004:9" pos:end="2004:24"><name pos:start="2004:9" pos:end="2004:12">tval</name> <operator pos:start="2004:14" pos:end="2004:15">+=</operator> <name pos:start="2004:17" pos:end="2004:24">next_eip</name></expr>;</expr_stmt>
        <if_stmt pos:start="2005:9" pos:end="2006:27"><if pos:start="2005:9" pos:end="2006:27">if <condition pos:start="2005:12" pos:end="2005:26">(<expr pos:start="2005:13" pos:end="2005:25"><name pos:start="2005:13" pos:end="2005:20"><name pos:start="2005:13" pos:end="2005:13">s</name><operator pos:start="2005:14" pos:end="2005:15">-&gt;</operator><name pos:start="2005:16" pos:end="2005:20">dflag</name></name> <operator pos:start="2005:22" pos:end="2005:23">==</operator> <literal type="number" pos:start="2005:25" pos:end="2005:25">0</literal></expr>)</condition><block type="pseudo" pos:start="2006:13" pos:end="2006:27"><block_content pos:start="2006:13" pos:end="2006:27">
            <expr_stmt pos:start="2006:13" pos:end="2006:27"><expr pos:start="2006:13" pos:end="2006:26"><name pos:start="2006:13" pos:end="2006:16">tval</name> <operator pos:start="2006:18" pos:end="2006:19">&amp;=</operator> <literal type="number" pos:start="2006:21" pos:end="2006:26">0xffff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="2007:9" pos:end="2007:38"><expr pos:start="2007:9" pos:end="2007:37"><call pos:start="2007:9" pos:end="2007:37"><name pos:start="2007:9" pos:end="2007:15">gen_jcc</name><argument_list pos:start="2007:16" pos:end="2007:37">(<argument pos:start="2007:17" pos:end="2007:17"><expr pos:start="2007:17" pos:end="2007:17"><name pos:start="2007:17" pos:end="2007:17">s</name></expr></argument>, <argument pos:start="2007:20" pos:end="2007:20"><expr pos:start="2007:20" pos:end="2007:20"><name pos:start="2007:20" pos:end="2007:20">b</name></expr></argument>, <argument pos:start="2007:23" pos:end="2007:26"><expr pos:start="2007:23" pos:end="2007:26"><name pos:start="2007:23" pos:end="2007:26">tval</name></expr></argument>, <argument pos:start="2007:29" pos:end="2007:36"><expr pos:start="2007:29" pos:end="2007:36"><name pos:start="2007:29" pos:end="2007:36">next_eip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="2008:9" pos:end="2008:14">break;</break>
    <case pos:start="2009:5" pos:end="2009:25">case <expr pos:start="2009:10" pos:end="2009:24"><literal type="number" pos:start="2009:10" pos:end="2009:14">0x190</literal> <operator pos:start="2009:16" pos:end="2009:18">...</operator> <literal type="number" pos:start="2009:20" pos:end="2009:24">0x19f</literal></expr>:</case> <comment type="block" pos:start="2009:27" pos:end="2009:40">/* setcc Gv */</comment>
        <expr_stmt pos:start="2010:9" pos:end="2010:44"><expr pos:start="2010:9" pos:end="2010:43"><name pos:start="2010:9" pos:end="2010:13">modrm</name> <operator pos:start="2010:15" pos:end="2010:15">=</operator> <call pos:start="2010:17" pos:end="2010:43"><name pos:start="2010:17" pos:end="2010:29">cpu_ldub_code</name><argument_list pos:start="2010:30" pos:end="2010:43">(<argument pos:start="2010:31" pos:end="2010:33"><expr pos:start="2010:31" pos:end="2010:33"><name pos:start="2010:31" pos:end="2010:33">env</name></expr></argument>, <argument pos:start="2010:36" pos:end="2010:42"><expr pos:start="2010:36" pos:end="2010:42"><name pos:start="2010:36" pos:end="2010:40"><name pos:start="2010:36" pos:end="2010:36">s</name><operator pos:start="2010:37" pos:end="2010:38">-&gt;</operator><name pos:start="2010:39" pos:end="2010:40">pc</name></name><operator pos:start="2010:41" pos:end="2010:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2011:9" pos:end="2011:35"><expr pos:start="2011:9" pos:end="2011:34"><call pos:start="2011:9" pos:end="2011:34"><name pos:start="2011:9" pos:end="2011:18">gen_setcc1</name><argument_list pos:start="2011:19" pos:end="2011:34">(<argument pos:start="2011:20" pos:end="2011:20"><expr pos:start="2011:20" pos:end="2011:20"><name pos:start="2011:20" pos:end="2011:20">s</name></expr></argument>, <argument pos:start="2011:23" pos:end="2011:23"><expr pos:start="2011:23" pos:end="2011:23"><name pos:start="2011:23" pos:end="2011:23">b</name></expr></argument>, <argument pos:start="2011:26" pos:end="2011:33"><expr pos:start="2011:26" pos:end="2011:33"><name pos:start="2011:26" pos:end="2011:33"><name pos:start="2011:26" pos:end="2011:30">cpu_T</name><index pos:start="2011:31" pos:end="2011:33">[<expr pos:start="2011:32" pos:end="2011:32"><literal type="number" pos:start="2011:32" pos:end="2011:32">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2012:9" pos:end="2012:59"><expr pos:start="2012:9" pos:end="2012:58"><call pos:start="2012:9" pos:end="2012:58"><name pos:start="2012:9" pos:end="2012:22">gen_ldst_modrm</name><argument_list pos:start="2012:23" pos:end="2012:58">(<argument pos:start="2012:24" pos:end="2012:26"><expr pos:start="2012:24" pos:end="2012:26"><name pos:start="2012:24" pos:end="2012:26">env</name></expr></argument>, <argument pos:start="2012:29" pos:end="2012:29"><expr pos:start="2012:29" pos:end="2012:29"><name pos:start="2012:29" pos:end="2012:29">s</name></expr></argument>, <argument pos:start="2012:32" pos:end="2012:36"><expr pos:start="2012:32" pos:end="2012:36"><name pos:start="2012:32" pos:end="2012:36">modrm</name></expr></argument>, <argument pos:start="2012:39" pos:end="2012:45"><expr pos:start="2012:39" pos:end="2012:45"><name pos:start="2012:39" pos:end="2012:45">OT_BYTE</name></expr></argument>, <argument pos:start="2012:48" pos:end="2012:54"><expr pos:start="2012:48" pos:end="2012:54"><name pos:start="2012:48" pos:end="2012:54">OR_TMP0</name></expr></argument>, <argument pos:start="2012:57" pos:end="2012:57"><expr pos:start="2012:57" pos:end="2012:57"><literal type="number" pos:start="2012:57" pos:end="2012:57">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="2013:9" pos:end="2013:14">break;</break>
    <case pos:start="2014:5" pos:end="2014:25">case <expr pos:start="2014:10" pos:end="2014:24"><literal type="number" pos:start="2014:10" pos:end="2014:14">0x140</literal> <operator pos:start="2014:16" pos:end="2014:18">...</operator> <literal type="number" pos:start="2014:20" pos:end="2014:24">0x14f</literal></expr>:</case> <comment type="block" pos:start="2014:27" pos:end="2014:43">/* cmov Gv, Ev */</comment>
        <expr_stmt pos:start="2015:9" pos:end="2015:29"><expr pos:start="2015:9" pos:end="2015:28"><name pos:start="2015:9" pos:end="2015:10">ot</name> <operator pos:start="2015:12" pos:end="2015:12">=</operator> <name pos:start="2015:14" pos:end="2015:18">dflag</name> <operator pos:start="2015:20" pos:end="2015:20">+</operator> <name pos:start="2015:22" pos:end="2015:28">OT_WORD</name></expr>;</expr_stmt>
        <expr_stmt pos:start="2016:9" pos:end="2016:44"><expr pos:start="2016:9" pos:end="2016:43"><name pos:start="2016:9" pos:end="2016:13">modrm</name> <operator pos:start="2016:15" pos:end="2016:15">=</operator> <call pos:start="2016:17" pos:end="2016:43"><name pos:start="2016:17" pos:end="2016:29">cpu_ldub_code</name><argument_list pos:start="2016:30" pos:end="2016:43">(<argument pos:start="2016:31" pos:end="2016:33"><expr pos:start="2016:31" pos:end="2016:33"><name pos:start="2016:31" pos:end="2016:33">env</name></expr></argument>, <argument pos:start="2016:36" pos:end="2016:42"><expr pos:start="2016:36" pos:end="2016:42"><name pos:start="2016:36" pos:end="2016:40"><name pos:start="2016:36" pos:end="2016:36">s</name><operator pos:start="2016:37" pos:end="2016:38">-&gt;</operator><name pos:start="2016:39" pos:end="2016:40">pc</name></name><operator pos:start="2016:41" pos:end="2016:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2017:9" pos:end="2017:41"><expr pos:start="2017:9" pos:end="2017:40"><name pos:start="2017:9" pos:end="2017:11">reg</name> <operator pos:start="2017:13" pos:end="2017:13">=</operator> <operator pos:start="2017:15" pos:end="2017:15">(</operator><operator pos:start="2017:16" pos:end="2017:16">(</operator><name pos:start="2017:17" pos:end="2017:21">modrm</name> <operator pos:start="2017:23" pos:end="2017:24">&gt;&gt;</operator> <literal type="number" pos:start="2017:26" pos:end="2017:26">3</literal><operator pos:start="2017:27" pos:end="2017:27">)</operator> <operator pos:start="2017:29" pos:end="2017:29">&amp;</operator> <literal type="number" pos:start="2017:31" pos:end="2017:31">7</literal><operator pos:start="2017:32" pos:end="2017:32">)</operator> <operator pos:start="2017:34" pos:end="2017:34">|</operator> <name pos:start="2017:36" pos:end="2017:40">rex_r</name></expr>;</expr_stmt>
        <expr_stmt pos:start="2018:9" pos:end="2018:47"><expr pos:start="2018:9" pos:end="2018:46"><call pos:start="2018:9" pos:end="2018:46"><name pos:start="2018:9" pos:end="2018:19">gen_cmovcc1</name><argument_list pos:start="2018:20" pos:end="2018:46">(<argument pos:start="2018:21" pos:end="2018:23"><expr pos:start="2018:21" pos:end="2018:23"><name pos:start="2018:21" pos:end="2018:23">env</name></expr></argument>, <argument pos:start="2018:26" pos:end="2018:26"><expr pos:start="2018:26" pos:end="2018:26"><name pos:start="2018:26" pos:end="2018:26">s</name></expr></argument>, <argument pos:start="2018:29" pos:end="2018:30"><expr pos:start="2018:29" pos:end="2018:30"><name pos:start="2018:29" pos:end="2018:30">ot</name></expr></argument>, <argument pos:start="2018:33" pos:end="2018:33"><expr pos:start="2018:33" pos:end="2018:33"><name pos:start="2018:33" pos:end="2018:33">b</name></expr></argument>, <argument pos:start="2018:36" pos:end="2018:40"><expr pos:start="2018:36" pos:end="2018:40"><name pos:start="2018:36" pos:end="2018:40">modrm</name></expr></argument>, <argument pos:start="2018:43" pos:end="2018:45"><expr pos:start="2018:43" pos:end="2018:45"><name pos:start="2018:43" pos:end="2018:45">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="2019:9" pos:end="2019:14">break;</break>
        <comment type="block" format="doxygen" pos:start="2020:9" pos:end="2020:34">/************************/</comment>
        <comment type="block" pos:start="2021:9" pos:end="2021:19">/* flags */</comment>
    <case pos:start="2022:5" pos:end="2022:14">case <expr pos:start="2022:10" pos:end="2022:13"><literal type="number" pos:start="2022:10" pos:end="2022:13">0x9c</literal></expr>:</case> <comment type="block" pos:start="2022:16" pos:end="2022:26">/* pushf */</comment>
        <expr_stmt pos:start="2023:9" pos:end="2023:61"><expr pos:start="2023:9" pos:end="2023:60"><call pos:start="2023:9" pos:end="2023:60"><name pos:start="2023:9" pos:end="2023:31">gen_svm_check_intercept</name><argument_list pos:start="2023:32" pos:end="2023:60">(<argument pos:start="2023:33" pos:end="2023:33"><expr pos:start="2023:33" pos:end="2023:33"><name pos:start="2023:33" pos:end="2023:33">s</name></expr></argument>, <argument pos:start="2023:36" pos:end="2023:43"><expr pos:start="2023:36" pos:end="2023:43"><name pos:start="2023:36" pos:end="2023:43">pc_start</name></expr></argument>, <argument pos:start="2023:46" pos:end="2023:59"><expr pos:start="2023:46" pos:end="2023:59"><name pos:start="2023:46" pos:end="2023:59">SVM_EXIT_PUSHF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="2024:9" pos:end="3141:17"><if pos:start="2024:9" pos:end="2026:9">if <condition pos:start="2024:12" pos:end="2024:36">(<expr pos:start="2024:13" pos:end="2024:35"><name pos:start="2024:13" pos:end="2024:19"><name pos:start="2024:13" pos:end="2024:13">s</name><operator pos:start="2024:14" pos:end="2024:15">-&gt;</operator><name pos:start="2024:16" pos:end="2024:19">vm86</name></name> <operator pos:start="2024:21" pos:end="2024:22">&amp;&amp;</operator> <name pos:start="2024:24" pos:end="2024:30"><name pos:start="2024:24" pos:end="2024:24">s</name><operator pos:start="2024:25" pos:end="2024:26">-&gt;</operator><name pos:start="2024:27" pos:end="2024:30">iopl</name></name> <operator pos:start="2024:32" pos:end="2024:33">!=</operator> <literal type="number" pos:start="2024:35" pos:end="2024:35">3</literal></expr>)</condition> <block pos:start="2024:38" pos:end="2026:9">{<block_content pos:start="2025:13" pos:end="2025:64">
            <expr_stmt pos:start="2025:13" pos:end="2025:64"><expr pos:start="2025:13" pos:end="2025:63"><call pos:start="2025:13" pos:end="2025:63"><name pos:start="2025:13" pos:end="2025:25">gen_exception</name><argument_list pos:start="2025:26" pos:end="2025:63">(<argument pos:start="2025:27" pos:end="2025:27"><expr pos:start="2025:27" pos:end="2025:27"><name pos:start="2025:27" pos:end="2025:27">s</name></expr></argument>, <argument pos:start="2025:30" pos:end="2025:39"><expr pos:start="2025:30" pos:end="2025:39"><name pos:start="2025:30" pos:end="2025:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="2025:42" pos:end="2025:62"><expr pos:start="2025:42" pos:end="2025:62"><name pos:start="2025:42" pos:end="2025:49">pc_start</name> <operator pos:start="2025:51" pos:end="2025:51">-</operator> <name pos:start="2025:53" pos:end="2025:62"><name pos:start="2025:53" pos:end="2025:53">s</name><operator pos:start="2025:54" pos:end="2025:55">-&gt;</operator><name pos:start="2025:56" pos:end="2025:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="2026:11" pos:end="3141:17">else <block pos:start="2026:16" pos:end="3141:17">{<block_content pos:start="2027:13" pos:end="3141:17">
            <expr_stmt pos:start="2027:13" pos:end="2027:32"><expr pos:start="2027:13" pos:end="2027:31"><call pos:start="2027:13" pos:end="2027:31"><name pos:start="2027:13" pos:end="2027:28">gen_update_cc_op</name><argument_list pos:start="2027:29" pos:end="2027:31">(<argument pos:start="2027:30" pos:end="2027:30"><expr pos:start="2027:30" pos:end="2027:30"><name pos:start="2027:30" pos:end="2027:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2028:13" pos:end="2028:54"><expr pos:start="2028:13" pos:end="2028:53"><call pos:start="2028:13" pos:end="2028:53"><name pos:start="2028:13" pos:end="2028:34">gen_helper_read_eflags</name><argument_list pos:start="2028:35" pos:end="2028:53">(<argument pos:start="2028:36" pos:end="2028:43"><expr pos:start="2028:36" pos:end="2028:43"><name pos:start="2028:36" pos:end="2028:43"><name pos:start="2028:36" pos:end="2028:40">cpu_T</name><index pos:start="2028:41" pos:end="2028:43">[<expr pos:start="2028:42" pos:end="2028:42"><literal type="number" pos:start="2028:42" pos:end="2028:42">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2028:46" pos:end="2028:52"><expr pos:start="2028:46" pos:end="2028:52"><name pos:start="2028:46" pos:end="2028:52">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2029:13" pos:end="2029:27"><expr pos:start="2029:13" pos:end="2029:26"><call pos:start="2029:13" pos:end="2029:26"><name pos:start="2029:13" pos:end="2029:23">gen_push_T0</name><argument_list pos:start="2029:24" pos:end="2029:26">(<argument pos:start="2029:25" pos:end="2029:25"><expr pos:start="2029:25" pos:end="2029:25"><name pos:start="2029:25" pos:end="2029:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="2030:9" pos:end="2030:14">break;</break>
    <case pos:start="2031:5" pos:end="2031:14">case <expr pos:start="2031:10" pos:end="2031:13"><literal type="number" pos:start="2031:10" pos:end="2031:13">0x9d</literal></expr>:</case> <comment type="block" pos:start="2031:16" pos:end="2031:25">/* popf */</comment>
        <expr_stmt pos:start="2032:9" pos:end="2032:60"><expr pos:start="2032:9" pos:end="2032:59"><call pos:start="2032:9" pos:end="2032:59"><name pos:start="2032:9" pos:end="2032:31">gen_svm_check_intercept</name><argument_list pos:start="2032:32" pos:end="2032:59">(<argument pos:start="2032:33" pos:end="2032:33"><expr pos:start="2032:33" pos:end="2032:33"><name pos:start="2032:33" pos:end="2032:33">s</name></expr></argument>, <argument pos:start="2032:36" pos:end="2032:43"><expr pos:start="2032:36" pos:end="2032:43"><name pos:start="2032:36" pos:end="2032:43">pc_start</name></expr></argument>, <argument pos:start="2032:46" pos:end="2032:58"><expr pos:start="2032:46" pos:end="2032:58"><name pos:start="2032:46" pos:end="2032:58">SVM_EXIT_POPF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="2033:9" pos:end="3141:17"><if pos:start="2033:9" pos:end="2035:9">if <condition pos:start="2033:12" pos:end="2033:36">(<expr pos:start="2033:13" pos:end="2033:35"><name pos:start="2033:13" pos:end="2033:19"><name pos:start="2033:13" pos:end="2033:13">s</name><operator pos:start="2033:14" pos:end="2033:15">-&gt;</operator><name pos:start="2033:16" pos:end="2033:19">vm86</name></name> <operator pos:start="2033:21" pos:end="2033:22">&amp;&amp;</operator> <name pos:start="2033:24" pos:end="2033:30"><name pos:start="2033:24" pos:end="2033:24">s</name><operator pos:start="2033:25" pos:end="2033:26">-&gt;</operator><name pos:start="2033:27" pos:end="2033:30">iopl</name></name> <operator pos:start="2033:32" pos:end="2033:33">!=</operator> <literal type="number" pos:start="2033:35" pos:end="2033:35">3</literal></expr>)</condition> <block pos:start="2033:38" pos:end="2035:9">{<block_content pos:start="2034:13" pos:end="2034:64">
            <expr_stmt pos:start="2034:13" pos:end="2034:64"><expr pos:start="2034:13" pos:end="2034:63"><call pos:start="2034:13" pos:end="2034:63"><name pos:start="2034:13" pos:end="2034:25">gen_exception</name><argument_list pos:start="2034:26" pos:end="2034:63">(<argument pos:start="2034:27" pos:end="2034:27"><expr pos:start="2034:27" pos:end="2034:27"><name pos:start="2034:27" pos:end="2034:27">s</name></expr></argument>, <argument pos:start="2034:30" pos:end="2034:39"><expr pos:start="2034:30" pos:end="2034:39"><name pos:start="2034:30" pos:end="2034:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="2034:42" pos:end="2034:62"><expr pos:start="2034:42" pos:end="2034:62"><name pos:start="2034:42" pos:end="2034:49">pc_start</name> <operator pos:start="2034:51" pos:end="2034:51">-</operator> <name pos:start="2034:53" pos:end="2034:62"><name pos:start="2034:53" pos:end="2034:53">s</name><operator pos:start="2034:54" pos:end="2034:55">-&gt;</operator><name pos:start="2034:56" pos:end="2034:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="2035:11" pos:end="3141:17">else <block pos:start="2035:16" pos:end="3141:17">{<block_content pos:start="2036:13" pos:end="3141:17">
            <expr_stmt pos:start="2036:13" pos:end="2036:26"><expr pos:start="2036:13" pos:end="2036:25"><call pos:start="2036:13" pos:end="2036:25"><name pos:start="2036:13" pos:end="2036:22">gen_pop_T0</name><argument_list pos:start="2036:23" pos:end="2036:25">(<argument pos:start="2036:24" pos:end="2036:24"><expr pos:start="2036:24" pos:end="2036:24"><name pos:start="2036:24" pos:end="2036:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="2037:13" pos:end="3141:17"><if pos:start="2037:13" pos:end="3141:17">if <condition pos:start="2037:16" pos:end="2037:28">(<expr pos:start="2037:17" pos:end="2037:27"><name pos:start="2037:17" pos:end="2037:22"><name pos:start="2037:17" pos:end="2037:17">s</name><operator pos:start="2037:18" pos:end="2037:19">-&gt;</operator><name pos:start="2037:20" pos:end="2037:22">cpl</name></name> <operator pos:start="2037:24" pos:end="2037:25">==</operator> <literal type="number" pos:start="2037:27" pos:end="2037:27">0</literal></expr>)</condition> <block pos:start="2037:30" pos:end="3141:17">{<block_content pos:start="2038:17" pos:end="3141:17">
                <if_stmt pos:start="2038:17" pos:end="2050:13"><if pos:start="2038:17" pos:end="2044:17">if <condition pos:start="2038:20" pos:end="2038:29">(<expr pos:start="2038:21" pos:end="2038:28"><name pos:start="2038:21" pos:end="2038:28"><name pos:start="2038:21" pos:end="2038:21">s</name><operator pos:start="2038:22" pos:end="2038:23">-&gt;</operator><name pos:start="2038:24" pos:end="2038:28">dflag</name></name></expr>)</condition> <block pos:start="2038:31" pos:end="2044:17">{<block_content pos:start="2039:21" pos:end="2043:72">
                    <expr_stmt pos:start="2039:21" pos:end="2043:72"><expr pos:start="2039:21" pos:end="2043:71"><call pos:start="2039:21" pos:end="2043:71"><name pos:start="2039:21" pos:end="2039:43">gen_helper_write_eflags</name><argument_list pos:start="2039:44" pos:end="2043:71">(<argument pos:start="2039:45" pos:end="2039:51"><expr pos:start="2039:45" pos:end="2039:51"><name pos:start="2039:45" pos:end="2039:51">cpu_env</name></expr></argument>, <argument pos:start="2039:54" pos:end="2039:61"><expr pos:start="2039:54" pos:end="2039:61"><name pos:start="2039:54" pos:end="2039:61"><name pos:start="2039:54" pos:end="2039:58">cpu_T</name><index pos:start="2039:59" pos:end="2039:61">[<expr pos:start="2039:60" pos:end="2039:60"><literal type="number" pos:start="2039:60" pos:end="2039:60">0</literal></expr>]</index></name></expr></argument>,
                                            <argument pos:start="2040:45" pos:end="2043:70"><expr pos:start="2040:45" pos:end="2043:70"><call pos:start="2040:45" pos:end="2043:70"><name pos:start="2040:45" pos:end="2040:57">tcg_const_i32</name><argument_list pos:start="2040:58" pos:end="2043:70">(<argument pos:start="2040:59" pos:end="2043:69"><expr pos:start="2040:59" pos:end="2043:69"><operator pos:start="2040:59" pos:end="2040:59">(</operator><name pos:start="2040:60" pos:end="2040:66">TF_MASK</name> <operator pos:start="2040:68" pos:end="2040:68">|</operator> <name pos:start="2040:70" pos:end="2040:76">AC_MASK</name> <operator pos:start="2040:78" pos:end="2040:78">|</operator>
                                                           <name pos:start="2041:60" pos:end="2041:66">ID_MASK</name> <operator pos:start="2041:68" pos:end="2041:68">|</operator> <name pos:start="2041:70" pos:end="2041:76">NT_MASK</name> <operator pos:start="2041:78" pos:end="2041:78">|</operator>
                                                           <name pos:start="2042:60" pos:end="2042:66">IF_MASK</name> <operator pos:start="2042:68" pos:end="2042:68">|</operator>
                                                           <name pos:start="2043:60" pos:end="2043:68">IOPL_MASK</name><operator pos:start="2043:69" pos:end="2043:69">)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else pos:start="2044:19" pos:end="2050:13">else <block pos:start="2044:24" pos:end="2050:13">{<block_content pos:start="2045:21" pos:end="2049:69">
                    <expr_stmt pos:start="2045:21" pos:end="2049:69"><expr pos:start="2045:21" pos:end="2049:68"><call pos:start="2045:21" pos:end="2049:68"><name pos:start="2045:21" pos:end="2045:43">gen_helper_write_eflags</name><argument_list pos:start="2045:44" pos:end="2049:68">(<argument pos:start="2045:45" pos:end="2045:51"><expr pos:start="2045:45" pos:end="2045:51"><name pos:start="2045:45" pos:end="2045:51">cpu_env</name></expr></argument>, <argument pos:start="2045:54" pos:end="2045:61"><expr pos:start="2045:54" pos:end="2045:61"><name pos:start="2045:54" pos:end="2045:61"><name pos:start="2045:54" pos:end="2045:58">cpu_T</name><index pos:start="2045:59" pos:end="2045:61">[<expr pos:start="2045:60" pos:end="2045:60"><literal type="number" pos:start="2045:60" pos:end="2045:60">0</literal></expr>]</index></name></expr></argument>,
                                            <argument pos:start="2046:45" pos:end="2049:67"><expr pos:start="2046:45" pos:end="2049:67"><call pos:start="2046:45" pos:end="2049:67"><name pos:start="2046:45" pos:end="2046:57">tcg_const_i32</name><argument_list pos:start="2046:58" pos:end="2049:67">(<argument pos:start="2046:59" pos:end="2049:66"><expr pos:start="2046:59" pos:end="2049:66"><operator pos:start="2046:59" pos:end="2046:59">(</operator><name pos:start="2046:60" pos:end="2046:66">TF_MASK</name> <operator pos:start="2046:68" pos:end="2046:68">|</operator> <name pos:start="2046:70" pos:end="2046:76">AC_MASK</name> <operator pos:start="2046:78" pos:end="2046:78">|</operator>
                                                           <name pos:start="2047:60" pos:end="2047:66">ID_MASK</name> <operator pos:start="2047:68" pos:end="2047:68">|</operator> <name pos:start="2047:70" pos:end="2047:76">NT_MASK</name> <operator pos:start="2047:78" pos:end="2047:78">|</operator>
                                                           <name pos:start="2048:60" pos:end="2048:66">IF_MASK</name> <operator pos:start="2048:68" pos:end="2048:68">|</operator> <name pos:start="2048:70" pos:end="2048:78">IOPL_MASK</name><operator pos:start="2048:79" pos:end="2048:79">)</operator>
                                                          <operator pos:start="2049:59" pos:end="2049:59">&amp;</operator> <literal type="number" pos:start="2049:61" pos:end="2049:66">0xffff</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt> <if_stmt pos:start="2050:15" pos:end="3141:17"><else pos:start="2050:15" pos:end="3141:17">else <block pos:start="2050:20" pos:end="3141:17">{<block_content pos:start="2051:17" pos:end="3141:17">
                <if_stmt pos:start="2051:17" pos:end="3141:17"><if pos:start="2051:17" pos:end="3141:17">if <condition pos:start="2051:20" pos:end="2051:38">(<expr pos:start="2051:21" pos:end="2051:37"><name pos:start="2051:21" pos:end="2051:26"><name pos:start="2051:21" pos:end="2051:21">s</name><operator pos:start="2051:22" pos:end="2051:23">-&gt;</operator><name pos:start="2051:24" pos:end="2051:26">cpl</name></name> <operator pos:start="2051:28" pos:end="2051:29">&lt;=</operator> <name pos:start="2051:31" pos:end="2051:37"><name pos:start="2051:31" pos:end="2051:31">s</name><operator pos:start="2051:32" pos:end="2051:33">-&gt;</operator><name pos:start="2051:34" pos:end="2051:37">iopl</name></name></expr>)</condition> <block pos:start="2051:40" pos:end="3141:17">{<block_content pos:start="2052:21" pos:end="3141:17">
                    <if_stmt pos:start="2052:21" pos:end="2067:17"><if pos:start="2052:21" pos:end="2059:21">if <condition pos:start="2052:24" pos:end="2052:33">(<expr pos:start="2052:25" pos:end="2052:32"><name pos:start="2052:25" pos:end="2052:32"><name pos:start="2052:25" pos:end="2052:25">s</name><operator pos:start="2052:26" pos:end="2052:27">-&gt;</operator><name pos:start="2052:28" pos:end="2052:32">dflag</name></name></expr>)</condition> <block pos:start="2052:35" pos:end="2059:21">{<block_content pos:start="2053:25" pos:end="2058:74">
                        <expr_stmt pos:start="2053:25" pos:end="2058:74"><expr pos:start="2053:25" pos:end="2058:73"><call pos:start="2053:25" pos:end="2058:73"><name pos:start="2053:25" pos:end="2053:47">gen_helper_write_eflags</name><argument_list pos:start="2053:48" pos:end="2058:73">(<argument pos:start="2053:49" pos:end="2053:55"><expr pos:start="2053:49" pos:end="2053:55"><name pos:start="2053:49" pos:end="2053:55">cpu_env</name></expr></argument>, <argument pos:start="2053:58" pos:end="2053:65"><expr pos:start="2053:58" pos:end="2053:65"><name pos:start="2053:58" pos:end="2053:65"><name pos:start="2053:58" pos:end="2053:62">cpu_T</name><index pos:start="2053:63" pos:end="2053:65">[<expr pos:start="2053:64" pos:end="2053:64"><literal type="number" pos:start="2053:64" pos:end="2053:64">0</literal></expr>]</index></name></expr></argument>,
                                                <argument pos:start="2054:49" pos:end="2058:72"><expr pos:start="2054:49" pos:end="2058:72"><call pos:start="2054:49" pos:end="2058:72"><name pos:start="2054:49" pos:end="2054:61">tcg_const_i32</name><argument_list pos:start="2054:62" pos:end="2058:72">(<argument pos:start="2054:63" pos:end="2058:71"><expr pos:start="2054:63" pos:end="2058:71"><operator pos:start="2054:63" pos:end="2054:63">(</operator><name pos:start="2054:64" pos:end="2054:70">TF_MASK</name> <operator pos:start="2054:72" pos:end="2054:72">|</operator>
                                                               <name pos:start="2055:64" pos:end="2055:70">AC_MASK</name> <operator pos:start="2055:72" pos:end="2055:72">|</operator>
                                                               <name pos:start="2056:64" pos:end="2056:70">ID_MASK</name> <operator pos:start="2056:72" pos:end="2056:72">|</operator>
                                                               <name pos:start="2057:64" pos:end="2057:70">NT_MASK</name> <operator pos:start="2057:72" pos:end="2057:72">|</operator>
                                                               <name pos:start="2058:64" pos:end="2058:70">IF_MASK</name><operator pos:start="2058:71" pos:end="2058:71">)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else pos:start="2059:23" pos:end="2067:17">else <block pos:start="2059:28" pos:end="2067:17">{<block_content pos:start="2060:25" pos:end="2066:73">
                        <expr_stmt pos:start="2060:25" pos:end="2066:73"><expr pos:start="2060:25" pos:end="2066:72"><call pos:start="2060:25" pos:end="2066:72"><name pos:start="2060:25" pos:end="2060:47">gen_helper_write_eflags</name><argument_list pos:start="2060:48" pos:end="2066:72">(<argument pos:start="2060:49" pos:end="2060:55"><expr pos:start="2060:49" pos:end="2060:55"><name pos:start="2060:49" pos:end="2060:55">cpu_env</name></expr></argument>, <argument pos:start="2060:58" pos:end="2060:65"><expr pos:start="2060:58" pos:end="2060:65"><name pos:start="2060:58" pos:end="2060:65"><name pos:start="2060:58" pos:end="2060:62">cpu_T</name><index pos:start="2060:63" pos:end="2060:65">[<expr pos:start="2060:64" pos:end="2060:64"><literal type="number" pos:start="2060:64" pos:end="2060:64">0</literal></expr>]</index></name></expr></argument>,
                                                <argument pos:start="2061:49" pos:end="2066:71"><expr pos:start="2061:49" pos:end="2066:71"><call pos:start="2061:49" pos:end="2066:71"><name pos:start="2061:49" pos:end="2061:61">tcg_const_i32</name><argument_list pos:start="2061:62" pos:end="2066:71">(<argument pos:start="2061:63" pos:end="2066:70"><expr pos:start="2061:63" pos:end="2066:70"><operator pos:start="2061:63" pos:end="2061:63">(</operator><name pos:start="2061:64" pos:end="2061:70">TF_MASK</name> <operator pos:start="2061:72" pos:end="2061:72">|</operator>
                                                               <name pos:start="2062:64" pos:end="2062:70">AC_MASK</name> <operator pos:start="2062:72" pos:end="2062:72">|</operator>
                                                               <name pos:start="2063:64" pos:end="2063:70">ID_MASK</name> <operator pos:start="2063:72" pos:end="2063:72">|</operator>
                                                               <name pos:start="2064:64" pos:end="2064:70">NT_MASK</name> <operator pos:start="2064:72" pos:end="2064:72">|</operator>
                                                               <name pos:start="2065:64" pos:end="2065:70">IF_MASK</name><operator pos:start="2065:71" pos:end="2065:71">)</operator>
                                                              <operator pos:start="2066:63" pos:end="2066:63">&amp;</operator> <literal type="number" pos:start="2066:65" pos:end="2066:70">0xffff</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt> <if_stmt pos:start="2067:19" pos:end="3141:17"><else pos:start="2067:19" pos:end="3141:17">else <block pos:start="2067:24" pos:end="3141:17">{<block_content pos:start="2068:21" pos:end="3141:17">
                    <if_stmt pos:start="2068:21" pos:end="3141:17"><if pos:start="2068:21" pos:end="2072:21">if <condition pos:start="2068:24" pos:end="2068:33">(<expr pos:start="2068:25" pos:end="2068:32"><name pos:start="2068:25" pos:end="2068:32"><name pos:start="2068:25" pos:end="2068:25">s</name><operator pos:start="2068:26" pos:end="2068:27">-&gt;</operator><name pos:start="2068:28" pos:end="2068:32">dflag</name></name></expr>)</condition> <block pos:start="2068:35" pos:end="2072:21">{<block_content pos:start="2069:25" pos:end="2071:79">
                        <expr_stmt pos:start="2069:25" pos:end="2071:79"><expr pos:start="2069:25" pos:end="2071:78"><call pos:start="2069:25" pos:end="2071:78"><name pos:start="2069:25" pos:end="2069:47">gen_helper_write_eflags</name><argument_list pos:start="2069:48" pos:end="2071:78">(<argument pos:start="2069:49" pos:end="2069:55"><expr pos:start="2069:49" pos:end="2069:55"><name pos:start="2069:49" pos:end="2069:55">cpu_env</name></expr></argument>, <argument pos:start="2069:58" pos:end="2069:65"><expr pos:start="2069:58" pos:end="2069:65"><name pos:start="2069:58" pos:end="2069:65"><name pos:start="2069:58" pos:end="2069:62">cpu_T</name><index pos:start="2069:63" pos:end="2069:65">[<expr pos:start="2069:64" pos:end="2069:64"><literal type="number" pos:start="2069:64" pos:end="2069:64">0</literal></expr>]</index></name></expr></argument>,
                                           <argument pos:start="2070:44" pos:end="2071:77"><expr pos:start="2070:44" pos:end="2071:77"><call pos:start="2070:44" pos:end="2071:77"><name pos:start="2070:44" pos:end="2070:56">tcg_const_i32</name><argument_list pos:start="2070:57" pos:end="2071:77">(<argument pos:start="2070:58" pos:end="2071:76"><expr pos:start="2070:58" pos:end="2071:76"><operator pos:start="2070:58" pos:end="2070:58">(</operator><name pos:start="2070:59" pos:end="2070:65">TF_MASK</name> <operator pos:start="2070:67" pos:end="2070:67">|</operator> <name pos:start="2070:69" pos:end="2070:75">AC_MASK</name> <operator pos:start="2070:77" pos:end="2070:77">|</operator>
                                                          <name pos:start="2071:59" pos:end="2071:65">ID_MASK</name> <operator pos:start="2071:67" pos:end="2071:67">|</operator> <name pos:start="2071:69" pos:end="2071:75">NT_MASK</name><operator pos:start="2071:76" pos:end="2071:76">)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else pos:start="2072:23" pos:end="3141:17">else <block pos:start="2072:28" pos:end="3141:17">{<block_content pos:start="2073:25" pos:end="3141:17">
                        <expr_stmt pos:start="2073:25" pos:end="2076:68"><expr pos:start="2073:25" pos:end="2076:67"><call pos:start="2073:25" pos:end="2076:67"><name pos:start="2073:25" pos:end="2073:47">gen_helper_write_eflags</name><argument_list pos:start="2073:48" pos:end="2076:67">(<argument pos:start="2073:49" pos:end="2073:55"><expr pos:start="2073:49" pos:end="2073:55"><name pos:start="2073:49" pos:end="2073:55">cpu_env</name></expr></argument>, <argument pos:start="2073:58" pos:end="2073:65"><expr pos:start="2073:58" pos:end="2073:65"><name pos:start="2073:58" pos:end="2073:65"><name pos:start="2073:58" pos:end="2073:62">cpu_T</name><index pos:start="2073:63" pos:end="2073:65">[<expr pos:start="2073:64" pos:end="2073:64"><literal type="number" pos:start="2073:64" pos:end="2073:64">0</literal></expr>]</index></name></expr></argument>,
                                           <argument pos:start="2074:44" pos:end="2076:66"><expr pos:start="2074:44" pos:end="2076:66"><call pos:start="2074:44" pos:end="2076:66"><name pos:start="2074:44" pos:end="2074:56">tcg_const_i32</name><argument_list pos:start="2074:57" pos:end="2076:66">(<argument pos:start="2074:58" pos:end="2076:65"><expr pos:start="2074:58" pos:end="2076:65"><operator pos:start="2074:58" pos:end="2074:58">(</operator><name pos:start="2074:59" pos:end="2074:65">TF_MASK</name> <operator pos:start="2074:67" pos:end="2074:67">|</operator> <name pos:start="2074:69" pos:end="2074:75">AC_MASK</name> <operator pos:start="2074:77" pos:end="2074:77">|</operator>
                                                          <name pos:start="2075:59" pos:end="2075:65">ID_MASK</name> <operator pos:start="2075:67" pos:end="2075:67">|</operator> <name pos:start="2075:69" pos:end="2075:75">NT_MASK</name><operator pos:start="2075:76" pos:end="2075:76">)</operator>
                                                         <operator pos:start="2076:58" pos:end="2076:58">&amp;</operator> <literal type="number" pos:start="2076:60" pos:end="2076:65">0xffff</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2077:13" pos:end="2077:30"><expr pos:start="2077:13" pos:end="2077:29"><call pos:start="2077:13" pos:end="2077:29"><name pos:start="2077:13" pos:end="2077:26">gen_pop_update</name><argument_list pos:start="2077:27" pos:end="2077:29">(<argument pos:start="2077:28" pos:end="2077:28"><expr pos:start="2077:28" pos:end="2077:28"><name pos:start="2077:28" pos:end="2077:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2078:13" pos:end="2078:39"><expr pos:start="2078:13" pos:end="2078:38"><call pos:start="2078:13" pos:end="2078:38"><name pos:start="2078:13" pos:end="2078:21">set_cc_op</name><argument_list pos:start="2078:22" pos:end="2078:38">(<argument pos:start="2078:23" pos:end="2078:23"><expr pos:start="2078:23" pos:end="2078:23"><name pos:start="2078:23" pos:end="2078:23">s</name></expr></argument>, <argument pos:start="2078:26" pos:end="2078:37"><expr pos:start="2078:26" pos:end="2078:37"><name pos:start="2078:26" pos:end="2078:37">CC_OP_EFLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block" pos:start="2079:13" pos:end="2079:65">/* abort translation because TF/AC flag may change */</comment>
            <expr_stmt pos:start="2080:13" pos:end="2080:43"><expr pos:start="2080:13" pos:end="2080:42"><call pos:start="2080:13" pos:end="2080:42"><name pos:start="2080:13" pos:end="2080:22">gen_jmp_im</name><argument_list pos:start="2080:23" pos:end="2080:42">(<argument pos:start="2080:24" pos:end="2080:41"><expr pos:start="2080:24" pos:end="2080:41"><name pos:start="2080:24" pos:end="2080:28"><name pos:start="2080:24" pos:end="2080:24">s</name><operator pos:start="2080:25" pos:end="2080:26">-&gt;</operator><name pos:start="2080:27" pos:end="2080:28">pc</name></name> <operator pos:start="2080:30" pos:end="2080:30">-</operator> <name pos:start="2080:32" pos:end="2080:41"><name pos:start="2080:32" pos:end="2080:32">s</name><operator pos:start="2080:33" pos:end="2080:34">-&gt;</operator><name pos:start="2080:35" pos:end="2080:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2081:13" pos:end="2081:23"><expr pos:start="2081:13" pos:end="2081:22"><call pos:start="2081:13" pos:end="2081:22"><name pos:start="2081:13" pos:end="2081:19">gen_eob</name><argument_list pos:start="2081:20" pos:end="2081:22">(<argument pos:start="2081:21" pos:end="2081:21"><expr pos:start="2081:21" pos:end="2081:21"><name pos:start="2081:21" pos:end="2081:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="2082:9" pos:end="2082:14">break;</break>
    <case pos:start="2083:5" pos:end="2083:14">case <expr pos:start="2083:10" pos:end="2083:13"><literal type="number" pos:start="2083:10" pos:end="2083:13">0x9e</literal></expr>:</case> <comment type="block" pos:start="2083:16" pos:end="2083:25">/* sahf */</comment>
        <if_stmt pos:start="2084:9" pos:end="2085:44"><if pos:start="2084:9" pos:end="2085:44">if <condition pos:start="2084:12" pos:end="2084:72">(<expr pos:start="2084:13" pos:end="2084:71"><call pos:start="2084:13" pos:end="2084:21"><name pos:start="2084:13" pos:end="2084:18">CODE64</name><argument_list pos:start="2084:19" pos:end="2084:21">(<argument pos:start="2084:20" pos:end="2084:20"><expr pos:start="2084:20" pos:end="2084:20"><name pos:start="2084:20" pos:end="2084:20">s</name></expr></argument>)</argument_list></call> <operator pos:start="2084:23" pos:end="2084:24">&amp;&amp;</operator> <operator pos:start="2084:26" pos:end="2084:26">!</operator><operator pos:start="2084:27" pos:end="2084:27">(</operator><name pos:start="2084:28" pos:end="2084:49"><name pos:start="2084:28" pos:end="2084:28">s</name><operator pos:start="2084:29" pos:end="2084:30">-&gt;</operator><name pos:start="2084:31" pos:end="2084:49">cpuid_ext3_features</name></name> <operator pos:start="2084:51" pos:end="2084:51">&amp;</operator> <name pos:start="2084:53" pos:end="2084:70">CPUID_EXT3_LAHF_LM</name><operator pos:start="2084:71" pos:end="2084:71">)</operator></expr>)</condition><block type="pseudo" pos:start="2085:9" pos:end="2085:44"><block_content pos:start="2085:9" pos:end="2085:44">
        <expr_stmt pos:start="2085:9" pos:end="2085:44"><expr pos:start="2085:9" pos:end="2085:43"><call pos:start="2085:9" pos:end="2085:43"><name pos:start="2085:9" pos:end="2085:25">gen_op_mov_TN_reg</name><argument_list pos:start="2085:26" pos:end="2085:43">(<argument pos:start="2085:27" pos:end="2085:33"><expr pos:start="2085:27" pos:end="2085:33"><name pos:start="2085:27" pos:end="2085:33">OT_BYTE</name></expr></argument>, <argument pos:start="2085:36" pos:end="2085:36"><expr pos:start="2085:36" pos:end="2085:36"><literal type="number" pos:start="2085:36" pos:end="2085:36">0</literal></expr></argument>, <argument pos:start="2085:39" pos:end="2085:42"><expr pos:start="2085:39" pos:end="2085:42"><name pos:start="2085:39" pos:end="2085:42">R_AH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="2086:9" pos:end="2086:30"><expr pos:start="2086:9" pos:end="2086:29"><call pos:start="2086:9" pos:end="2086:29"><name pos:start="2086:9" pos:end="2086:26">gen_compute_eflags</name><argument_list pos:start="2086:27" pos:end="2086:29">(<argument pos:start="2086:28" pos:end="2086:28"><expr pos:start="2086:28" pos:end="2086:28"><name pos:start="2086:28" pos:end="2086:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2087:9" pos:end="2087:54"><expr pos:start="2087:9" pos:end="2087:53"><call pos:start="2087:9" pos:end="2087:53"><name pos:start="2087:9" pos:end="2087:23">tcg_gen_andi_tl</name><argument_list pos:start="2087:24" pos:end="2087:53">(<argument pos:start="2087:25" pos:end="2087:34"><expr pos:start="2087:25" pos:end="2087:34"><name pos:start="2087:25" pos:end="2087:34">cpu_cc_src</name></expr></argument>, <argument pos:start="2087:37" pos:end="2087:46"><expr pos:start="2087:37" pos:end="2087:46"><name pos:start="2087:37" pos:end="2087:46">cpu_cc_src</name></expr></argument>, <argument pos:start="2087:49" pos:end="2087:52"><expr pos:start="2087:49" pos:end="2087:52"><name pos:start="2087:49" pos:end="2087:52">CC_O</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2088:9" pos:end="2088:78"><expr pos:start="2088:9" pos:end="2088:77"><call pos:start="2088:9" pos:end="2088:77"><name pos:start="2088:9" pos:end="2088:23">tcg_gen_andi_tl</name><argument_list pos:start="2088:24" pos:end="2088:77">(<argument pos:start="2088:25" pos:end="2088:32"><expr pos:start="2088:25" pos:end="2088:32"><name pos:start="2088:25" pos:end="2088:32"><name pos:start="2088:25" pos:end="2088:29">cpu_T</name><index pos:start="2088:30" pos:end="2088:32">[<expr pos:start="2088:31" pos:end="2088:31"><literal type="number" pos:start="2088:31" pos:end="2088:31">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2088:35" pos:end="2088:42"><expr pos:start="2088:35" pos:end="2088:42"><name pos:start="2088:35" pos:end="2088:42"><name pos:start="2088:35" pos:end="2088:39">cpu_T</name><index pos:start="2088:40" pos:end="2088:42">[<expr pos:start="2088:41" pos:end="2088:41"><literal type="number" pos:start="2088:41" pos:end="2088:41">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2088:45" pos:end="2088:76"><expr pos:start="2088:45" pos:end="2088:76"><name pos:start="2088:45" pos:end="2088:48">CC_S</name> <operator pos:start="2088:50" pos:end="2088:50">|</operator> <name pos:start="2088:52" pos:end="2088:55">CC_Z</name> <operator pos:start="2088:57" pos:end="2088:57">|</operator> <name pos:start="2088:59" pos:end="2088:62">CC_A</name> <operator pos:start="2088:64" pos:end="2088:64">|</operator> <name pos:start="2088:66" pos:end="2088:69">CC_P</name> <operator pos:start="2088:71" pos:end="2088:71">|</operator> <name pos:start="2088:73" pos:end="2088:76">CC_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2089:9" pos:end="2089:56"><expr pos:start="2089:9" pos:end="2089:55"><call pos:start="2089:9" pos:end="2089:55"><name pos:start="2089:9" pos:end="2089:21">tcg_gen_or_tl</name><argument_list pos:start="2089:22" pos:end="2089:55">(<argument pos:start="2089:23" pos:end="2089:32"><expr pos:start="2089:23" pos:end="2089:32"><name pos:start="2089:23" pos:end="2089:32">cpu_cc_src</name></expr></argument>, <argument pos:start="2089:35" pos:end="2089:44"><expr pos:start="2089:35" pos:end="2089:44"><name pos:start="2089:35" pos:end="2089:44">cpu_cc_src</name></expr></argument>, <argument pos:start="2089:47" pos:end="2089:54"><expr pos:start="2089:47" pos:end="2089:54"><name pos:start="2089:47" pos:end="2089:54"><name pos:start="2089:47" pos:end="2089:51">cpu_T</name><index pos:start="2089:52" pos:end="2089:54">[<expr pos:start="2089:53" pos:end="2089:53"><literal type="number" pos:start="2089:53" pos:end="2089:53">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="2090:9" pos:end="2090:14">break;</break>
    <case pos:start="2091:5" pos:end="2091:14">case <expr pos:start="2091:10" pos:end="2091:13"><literal type="number" pos:start="2091:10" pos:end="2091:13">0x9f</literal></expr>:</case> <comment type="block" pos:start="2091:16" pos:end="2091:25">/* lahf */</comment>
        <if_stmt pos:start="2092:9" pos:end="2093:30"><if pos:start="2092:9" pos:end="2093:30">if <condition pos:start="2092:12" pos:end="2092:72">(<expr pos:start="2092:13" pos:end="2092:71"><call pos:start="2092:13" pos:end="2092:21"><name pos:start="2092:13" pos:end="2092:18">CODE64</name><argument_list pos:start="2092:19" pos:end="2092:21">(<argument pos:start="2092:20" pos:end="2092:20"><expr pos:start="2092:20" pos:end="2092:20"><name pos:start="2092:20" pos:end="2092:20">s</name></expr></argument>)</argument_list></call> <operator pos:start="2092:23" pos:end="2092:24">&amp;&amp;</operator> <operator pos:start="2092:26" pos:end="2092:26">!</operator><operator pos:start="2092:27" pos:end="2092:27">(</operator><name pos:start="2092:28" pos:end="2092:49"><name pos:start="2092:28" pos:end="2092:28">s</name><operator pos:start="2092:29" pos:end="2092:30">-&gt;</operator><name pos:start="2092:31" pos:end="2092:49">cpuid_ext3_features</name></name> <operator pos:start="2092:51" pos:end="2092:51">&amp;</operator> <name pos:start="2092:53" pos:end="2092:70">CPUID_EXT3_LAHF_LM</name><operator pos:start="2092:71" pos:end="2092:71">)</operator></expr>)</condition><block type="pseudo" pos:start="2093:9" pos:end="2093:30"><block_content pos:start="2093:9" pos:end="2093:30">
        <expr_stmt pos:start="2093:9" pos:end="2093:30"><expr pos:start="2093:9" pos:end="2093:29"><call pos:start="2093:9" pos:end="2093:29"><name pos:start="2093:9" pos:end="2093:26">gen_compute_eflags</name><argument_list pos:start="2093:27" pos:end="2093:29">(<argument pos:start="2093:28" pos:end="2093:28"><expr pos:start="2093:28" pos:end="2093:28"><name pos:start="2093:28" pos:end="2093:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <comment type="block" pos:start="2094:9" pos:end="2094:71">/* Note: gen_compute_eflags() only gives the condition codes */</comment>
        <expr_stmt pos:start="2095:9" pos:end="2095:51"><expr pos:start="2095:9" pos:end="2095:50"><call pos:start="2095:9" pos:end="2095:50"><name pos:start="2095:9" pos:end="2095:22">tcg_gen_ori_tl</name><argument_list pos:start="2095:23" pos:end="2095:50">(<argument pos:start="2095:24" pos:end="2095:31"><expr pos:start="2095:24" pos:end="2095:31"><name pos:start="2095:24" pos:end="2095:31"><name pos:start="2095:24" pos:end="2095:28">cpu_T</name><index pos:start="2095:29" pos:end="2095:31">[<expr pos:start="2095:30" pos:end="2095:30"><literal type="number" pos:start="2095:30" pos:end="2095:30">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2095:34" pos:end="2095:43"><expr pos:start="2095:34" pos:end="2095:43"><name pos:start="2095:34" pos:end="2095:43">cpu_cc_src</name></expr></argument>, <argument pos:start="2095:46" pos:end="2095:49"><expr pos:start="2095:46" pos:end="2095:49"><literal type="number" pos:start="2095:46" pos:end="2095:49">0x02</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2096:9" pos:end="2096:41"><expr pos:start="2096:9" pos:end="2096:40"><call pos:start="2096:9" pos:end="2096:40"><name pos:start="2096:9" pos:end="2096:25">gen_op_mov_reg_T0</name><argument_list pos:start="2096:26" pos:end="2096:40">(<argument pos:start="2096:27" pos:end="2096:33"><expr pos:start="2096:27" pos:end="2096:33"><name pos:start="2096:27" pos:end="2096:33">OT_BYTE</name></expr></argument>, <argument pos:start="2096:36" pos:end="2096:39"><expr pos:start="2096:36" pos:end="2096:39"><name pos:start="2096:36" pos:end="2096:39">R_AH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="2097:9" pos:end="2097:14">break;</break>
    <case pos:start="2098:5" pos:end="2098:14">case <expr pos:start="2098:10" pos:end="2098:13"><literal type="number" pos:start="2098:10" pos:end="2098:13">0xf5</literal></expr>:</case> <comment type="block" pos:start="2098:16" pos:end="2098:24">/* cmc */</comment>
        <expr_stmt pos:start="2099:9" pos:end="2099:30"><expr pos:start="2099:9" pos:end="2099:29"><call pos:start="2099:9" pos:end="2099:29"><name pos:start="2099:9" pos:end="2099:26">gen_compute_eflags</name><argument_list pos:start="2099:27" pos:end="2099:29">(<argument pos:start="2099:28" pos:end="2099:28"><expr pos:start="2099:28" pos:end="2099:28"><name pos:start="2099:28" pos:end="2099:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2100:9" pos:end="2100:54"><expr pos:start="2100:9" pos:end="2100:53"><call pos:start="2100:9" pos:end="2100:53"><name pos:start="2100:9" pos:end="2100:23">tcg_gen_xori_tl</name><argument_list pos:start="2100:24" pos:end="2100:53">(<argument pos:start="2100:25" pos:end="2100:34"><expr pos:start="2100:25" pos:end="2100:34"><name pos:start="2100:25" pos:end="2100:34">cpu_cc_src</name></expr></argument>, <argument pos:start="2100:37" pos:end="2100:46"><expr pos:start="2100:37" pos:end="2100:46"><name pos:start="2100:37" pos:end="2100:46">cpu_cc_src</name></expr></argument>, <argument pos:start="2100:49" pos:end="2100:52"><expr pos:start="2100:49" pos:end="2100:52"><name pos:start="2100:49" pos:end="2100:52">CC_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="2101:9" pos:end="2101:14">break;</break>
    <case pos:start="2102:5" pos:end="2102:14">case <expr pos:start="2102:10" pos:end="2102:13"><literal type="number" pos:start="2102:10" pos:end="2102:13">0xf8</literal></expr>:</case> <comment type="block" pos:start="2102:16" pos:end="2102:24">/* clc */</comment>
        <expr_stmt pos:start="2103:9" pos:end="2103:30"><expr pos:start="2103:9" pos:end="2103:29"><call pos:start="2103:9" pos:end="2103:29"><name pos:start="2103:9" pos:end="2103:26">gen_compute_eflags</name><argument_list pos:start="2103:27" pos:end="2103:29">(<argument pos:start="2103:28" pos:end="2103:28"><expr pos:start="2103:28" pos:end="2103:28"><name pos:start="2103:28" pos:end="2103:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2104:9" pos:end="2104:55"><expr pos:start="2104:9" pos:end="2104:54"><call pos:start="2104:9" pos:end="2104:54"><name pos:start="2104:9" pos:end="2104:23">tcg_gen_andi_tl</name><argument_list pos:start="2104:24" pos:end="2104:54">(<argument pos:start="2104:25" pos:end="2104:34"><expr pos:start="2104:25" pos:end="2104:34"><name pos:start="2104:25" pos:end="2104:34">cpu_cc_src</name></expr></argument>, <argument pos:start="2104:37" pos:end="2104:46"><expr pos:start="2104:37" pos:end="2104:46"><name pos:start="2104:37" pos:end="2104:46">cpu_cc_src</name></expr></argument>, <argument pos:start="2104:49" pos:end="2104:53"><expr pos:start="2104:49" pos:end="2104:53"><operator pos:start="2104:49" pos:end="2104:49">~</operator><name pos:start="2104:50" pos:end="2104:53">CC_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="2105:9" pos:end="2105:14">break;</break>
    <case pos:start="2106:5" pos:end="2106:14">case <expr pos:start="2106:10" pos:end="2106:13"><literal type="number" pos:start="2106:10" pos:end="2106:13">0xf9</literal></expr>:</case> <comment type="block" pos:start="2106:16" pos:end="2106:24">/* stc */</comment>
        <expr_stmt pos:start="2107:9" pos:end="2107:30"><expr pos:start="2107:9" pos:end="2107:29"><call pos:start="2107:9" pos:end="2107:29"><name pos:start="2107:9" pos:end="2107:26">gen_compute_eflags</name><argument_list pos:start="2107:27" pos:end="2107:29">(<argument pos:start="2107:28" pos:end="2107:28"><expr pos:start="2107:28" pos:end="2107:28"><name pos:start="2107:28" pos:end="2107:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2108:9" pos:end="2108:53"><expr pos:start="2108:9" pos:end="2108:52"><call pos:start="2108:9" pos:end="2108:52"><name pos:start="2108:9" pos:end="2108:22">tcg_gen_ori_tl</name><argument_list pos:start="2108:23" pos:end="2108:52">(<argument pos:start="2108:24" pos:end="2108:33"><expr pos:start="2108:24" pos:end="2108:33"><name pos:start="2108:24" pos:end="2108:33">cpu_cc_src</name></expr></argument>, <argument pos:start="2108:36" pos:end="2108:45"><expr pos:start="2108:36" pos:end="2108:45"><name pos:start="2108:36" pos:end="2108:45">cpu_cc_src</name></expr></argument>, <argument pos:start="2108:48" pos:end="2108:51"><expr pos:start="2108:48" pos:end="2108:51"><name pos:start="2108:48" pos:end="2108:51">CC_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="2109:9" pos:end="2109:14">break;</break>
    <case pos:start="2110:5" pos:end="2110:14">case <expr pos:start="2110:10" pos:end="2110:13"><literal type="number" pos:start="2110:10" pos:end="2110:13">0xfc</literal></expr>:</case> <comment type="block" pos:start="2110:16" pos:end="2110:24">/* cld */</comment>
        <expr_stmt pos:start="2111:9" pos:end="2111:42"><expr pos:start="2111:9" pos:end="2111:41"><call pos:start="2111:9" pos:end="2111:41"><name pos:start="2111:9" pos:end="2111:24">tcg_gen_movi_i32</name><argument_list pos:start="2111:25" pos:end="2111:41">(<argument pos:start="2111:26" pos:end="2111:37"><expr pos:start="2111:26" pos:end="2111:37"><name pos:start="2111:26" pos:end="2111:37">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2111:40" pos:end="2111:40"><expr pos:start="2111:40" pos:end="2111:40"><literal type="number" pos:start="2111:40" pos:end="2111:40">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2112:9" pos:end="2112:73"><expr pos:start="2112:9" pos:end="2112:72"><call pos:start="2112:9" pos:end="2112:72"><name pos:start="2112:9" pos:end="2112:22">tcg_gen_st_i32</name><argument_list pos:start="2112:23" pos:end="2112:72">(<argument pos:start="2112:24" pos:end="2112:35"><expr pos:start="2112:24" pos:end="2112:35"><name pos:start="2112:24" pos:end="2112:35">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2112:38" pos:end="2112:44"><expr pos:start="2112:38" pos:end="2112:44"><name pos:start="2112:38" pos:end="2112:44">cpu_env</name></expr></argument>, <argument pos:start="2112:47" pos:end="2112:71"><expr pos:start="2112:47" pos:end="2112:71"><call pos:start="2112:47" pos:end="2112:71"><name pos:start="2112:47" pos:end="2112:54">offsetof</name><argument_list pos:start="2112:55" pos:end="2112:71">(<argument pos:start="2112:56" pos:end="2112:66"><expr pos:start="2112:56" pos:end="2112:66"><name pos:start="2112:56" pos:end="2112:66">CPUX86State</name></expr></argument>, <argument pos:start="2112:69" pos:end="2112:70"><expr pos:start="2112:69" pos:end="2112:70"><name pos:start="2112:69" pos:end="2112:70">df</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="2113:9" pos:end="2113:14">break;</break>
    <case pos:start="2114:5" pos:end="2114:14">case <expr pos:start="2114:10" pos:end="2114:13"><literal type="number" pos:start="2114:10" pos:end="2114:13">0xfd</literal></expr>:</case> <comment type="block" pos:start="2114:16" pos:end="2114:24">/* std */</comment>
        <expr_stmt pos:start="2115:9" pos:end="2115:43"><expr pos:start="2115:9" pos:end="2115:42"><call pos:start="2115:9" pos:end="2115:42"><name pos:start="2115:9" pos:end="2115:24">tcg_gen_movi_i32</name><argument_list pos:start="2115:25" pos:end="2115:42">(<argument pos:start="2115:26" pos:end="2115:37"><expr pos:start="2115:26" pos:end="2115:37"><name pos:start="2115:26" pos:end="2115:37">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2115:40" pos:end="2115:41"><expr pos:start="2115:40" pos:end="2115:41"><operator pos:start="2115:40" pos:end="2115:40">-</operator><literal type="number" pos:start="2115:41" pos:end="2115:41">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2116:9" pos:end="2116:73"><expr pos:start="2116:9" pos:end="2116:72"><call pos:start="2116:9" pos:end="2116:72"><name pos:start="2116:9" pos:end="2116:22">tcg_gen_st_i32</name><argument_list pos:start="2116:23" pos:end="2116:72">(<argument pos:start="2116:24" pos:end="2116:35"><expr pos:start="2116:24" pos:end="2116:35"><name pos:start="2116:24" pos:end="2116:35">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2116:38" pos:end="2116:44"><expr pos:start="2116:38" pos:end="2116:44"><name pos:start="2116:38" pos:end="2116:44">cpu_env</name></expr></argument>, <argument pos:start="2116:47" pos:end="2116:71"><expr pos:start="2116:47" pos:end="2116:71"><call pos:start="2116:47" pos:end="2116:71"><name pos:start="2116:47" pos:end="2116:54">offsetof</name><argument_list pos:start="2116:55" pos:end="2116:71">(<argument pos:start="2116:56" pos:end="2116:66"><expr pos:start="2116:56" pos:end="2116:66"><name pos:start="2116:56" pos:end="2116:66">CPUX86State</name></expr></argument>, <argument pos:start="2116:69" pos:end="2116:70"><expr pos:start="2116:69" pos:end="2116:70"><name pos:start="2116:69" pos:end="2116:70">df</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="2117:9" pos:end="2117:14">break;</break>
        <comment type="block" format="doxygen" pos:start="2118:9" pos:end="2118:34">/************************/</comment>
        <comment type="block" pos:start="2119:9" pos:end="2119:28">/* bit operations */</comment>
    <case pos:start="2120:5" pos:end="2120:15">case <expr pos:start="2120:10" pos:end="2120:14"><literal type="number" pos:start="2120:10" pos:end="2120:14">0x1ba</literal></expr>:</case> <comment type="block" pos:start="2120:17" pos:end="2120:43">/* bt/bts/btr/btc Gv, im */</comment>
        <expr_stmt pos:start="2121:9" pos:end="2121:29"><expr pos:start="2121:9" pos:end="2121:28"><name pos:start="2121:9" pos:end="2121:10">ot</name> <operator pos:start="2121:12" pos:end="2121:12">=</operator> <name pos:start="2121:14" pos:end="2121:18">dflag</name> <operator pos:start="2121:20" pos:end="2121:20">+</operator> <name pos:start="2121:22" pos:end="2121:28">OT_WORD</name></expr>;</expr_stmt>
        <expr_stmt pos:start="2122:9" pos:end="2122:44"><expr pos:start="2122:9" pos:end="2122:43"><name pos:start="2122:9" pos:end="2122:13">modrm</name> <operator pos:start="2122:15" pos:end="2122:15">=</operator> <call pos:start="2122:17" pos:end="2122:43"><name pos:start="2122:17" pos:end="2122:29">cpu_ldub_code</name><argument_list pos:start="2122:30" pos:end="2122:43">(<argument pos:start="2122:31" pos:end="2122:33"><expr pos:start="2122:31" pos:end="2122:33"><name pos:start="2122:31" pos:end="2122:33">env</name></expr></argument>, <argument pos:start="2122:36" pos:end="2122:42"><expr pos:start="2122:36" pos:end="2122:42"><name pos:start="2122:36" pos:end="2122:40"><name pos:start="2122:36" pos:end="2122:36">s</name><operator pos:start="2122:37" pos:end="2122:38">-&gt;</operator><name pos:start="2122:39" pos:end="2122:40">pc</name></name><operator pos:start="2122:41" pos:end="2122:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2123:9" pos:end="2123:30"><expr pos:start="2123:9" pos:end="2123:29"><name pos:start="2123:9" pos:end="2123:10">op</name> <operator pos:start="2123:12" pos:end="2123:12">=</operator> <operator pos:start="2123:14" pos:end="2123:14">(</operator><name pos:start="2123:15" pos:end="2123:19">modrm</name> <operator pos:start="2123:21" pos:end="2123:22">&gt;&gt;</operator> <literal type="number" pos:start="2123:24" pos:end="2123:24">3</literal><operator pos:start="2123:25" pos:end="2123:25">)</operator> <operator pos:start="2123:27" pos:end="2123:27">&amp;</operator> <literal type="number" pos:start="2123:29" pos:end="2123:29">7</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="2124:9" pos:end="2124:31"><expr pos:start="2124:9" pos:end="2124:30"><name pos:start="2124:9" pos:end="2124:11">mod</name> <operator pos:start="2124:13" pos:end="2124:13">=</operator> <operator pos:start="2124:15" pos:end="2124:15">(</operator><name pos:start="2124:16" pos:end="2124:20">modrm</name> <operator pos:start="2124:22" pos:end="2124:23">&gt;&gt;</operator> <literal type="number" pos:start="2124:25" pos:end="2124:25">6</literal><operator pos:start="2124:26" pos:end="2124:26">)</operator> <operator pos:start="2124:28" pos:end="2124:28">&amp;</operator> <literal type="number" pos:start="2124:30" pos:end="2124:30">3</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="2125:9" pos:end="2125:36"><expr pos:start="2125:9" pos:end="2125:35"><name pos:start="2125:9" pos:end="2125:10">rm</name> <operator pos:start="2125:12" pos:end="2125:12">=</operator> <operator pos:start="2125:14" pos:end="2125:14">(</operator><name pos:start="2125:15" pos:end="2125:19">modrm</name> <operator pos:start="2125:21" pos:end="2125:21">&amp;</operator> <literal type="number" pos:start="2125:23" pos:end="2125:23">7</literal><operator pos:start="2125:24" pos:end="2125:24">)</operator> <operator pos:start="2125:26" pos:end="2125:26">|</operator> <call pos:start="2125:28" pos:end="2125:35"><name pos:start="2125:28" pos:end="2125:32">REX_B</name><argument_list pos:start="2125:33" pos:end="2125:35">(<argument pos:start="2125:34" pos:end="2125:34"><expr pos:start="2125:34" pos:end="2125:34"><name pos:start="2125:34" pos:end="2125:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="2126:9" pos:end="3141:17"><if pos:start="2126:9" pos:end="2130:9">if <condition pos:start="2126:12" pos:end="2126:21">(<expr pos:start="2126:13" pos:end="2126:20"><name pos:start="2126:13" pos:end="2126:15">mod</name> <operator pos:start="2126:17" pos:end="2126:18">!=</operator> <literal type="number" pos:start="2126:20" pos:end="2126:20">3</literal></expr>)</condition> <block pos:start="2126:23" pos:end="2130:9">{<block_content pos:start="2127:13" pos:end="2129:47">
            <expr_stmt pos:start="2127:13" pos:end="2127:30"><expr pos:start="2127:13" pos:end="2127:29"><name pos:start="2127:13" pos:end="2127:25"><name pos:start="2127:13" pos:end="2127:13">s</name><operator pos:start="2127:14" pos:end="2127:15">-&gt;</operator><name pos:start="2127:16" pos:end="2127:25">rip_offset</name></name> <operator pos:start="2127:27" pos:end="2127:27">=</operator> <literal type="number" pos:start="2127:29" pos:end="2127:29">1</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="2128:13" pos:end="2128:66"><expr pos:start="2128:13" pos:end="2128:65"><call pos:start="2128:13" pos:end="2128:65"><name pos:start="2128:13" pos:end="2128:25">gen_lea_modrm</name><argument_list pos:start="2128:26" pos:end="2128:65">(<argument pos:start="2128:27" pos:end="2128:29"><expr pos:start="2128:27" pos:end="2128:29"><name pos:start="2128:27" pos:end="2128:29">env</name></expr></argument>, <argument pos:start="2128:32" pos:end="2128:32"><expr pos:start="2128:32" pos:end="2128:32"><name pos:start="2128:32" pos:end="2128:32">s</name></expr></argument>, <argument pos:start="2128:35" pos:end="2128:39"><expr pos:start="2128:35" pos:end="2128:39"><name pos:start="2128:35" pos:end="2128:39">modrm</name></expr></argument>, <argument pos:start="2128:42" pos:end="2128:50"><expr pos:start="2128:42" pos:end="2128:50"><operator pos:start="2128:42" pos:end="2128:42">&amp;</operator><name pos:start="2128:43" pos:end="2128:50">reg_addr</name></expr></argument>, <argument pos:start="2128:53" pos:end="2128:64"><expr pos:start="2128:53" pos:end="2128:64"><operator pos:start="2128:53" pos:end="2128:53">&amp;</operator><name pos:start="2128:54" pos:end="2128:64">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2129:13" pos:end="2129:47"><expr pos:start="2129:13" pos:end="2129:46"><call pos:start="2129:13" pos:end="2129:46"><name pos:start="2129:13" pos:end="2129:27">gen_op_ld_T0_A0</name><argument_list pos:start="2129:28" pos:end="2129:46">(<argument pos:start="2129:29" pos:end="2129:45"><expr pos:start="2129:29" pos:end="2129:45"><name pos:start="2129:29" pos:end="2129:30">ot</name> <operator pos:start="2129:32" pos:end="2129:32">+</operator> <name pos:start="2129:34" pos:end="2129:45"><name pos:start="2129:34" pos:end="2129:34">s</name><operator pos:start="2129:35" pos:end="2129:36">-&gt;</operator><name pos:start="2129:37" pos:end="2129:45">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="2130:11" pos:end="3141:17">else <block pos:start="2130:16" pos:end="3141:17">{<block_content pos:start="2131:13" pos:end="3141:17">
            <expr_stmt pos:start="2131:13" pos:end="2131:41"><expr pos:start="2131:13" pos:end="2131:40"><call pos:start="2131:13" pos:end="2131:40"><name pos:start="2131:13" pos:end="2131:29">gen_op_mov_TN_reg</name><argument_list pos:start="2131:30" pos:end="2131:40">(<argument pos:start="2131:31" pos:end="2131:32"><expr pos:start="2131:31" pos:end="2131:32"><name pos:start="2131:31" pos:end="2131:32">ot</name></expr></argument>, <argument pos:start="2131:35" pos:end="2131:35"><expr pos:start="2131:35" pos:end="2131:35"><literal type="number" pos:start="2131:35" pos:end="2131:35">0</literal></expr></argument>, <argument pos:start="2131:38" pos:end="2131:39"><expr pos:start="2131:38" pos:end="2131:39"><name pos:start="2131:38" pos:end="2131:39">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="2132:9" pos:end="2132:24">/* load shift */</comment>
        <expr_stmt pos:start="2133:9" pos:end="2133:42"><expr pos:start="2133:9" pos:end="2133:41"><name pos:start="2133:9" pos:end="2133:11">val</name> <operator pos:start="2133:13" pos:end="2133:13">=</operator> <call pos:start="2133:15" pos:end="2133:41"><name pos:start="2133:15" pos:end="2133:27">cpu_ldub_code</name><argument_list pos:start="2133:28" pos:end="2133:41">(<argument pos:start="2133:29" pos:end="2133:31"><expr pos:start="2133:29" pos:end="2133:31"><name pos:start="2133:29" pos:end="2133:31">env</name></expr></argument>, <argument pos:start="2133:34" pos:end="2133:40"><expr pos:start="2133:34" pos:end="2133:40"><name pos:start="2133:34" pos:end="2133:38"><name pos:start="2133:34" pos:end="2133:34">s</name><operator pos:start="2133:35" pos:end="2133:36">-&gt;</operator><name pos:start="2133:37" pos:end="2133:38">pc</name></name><operator pos:start="2133:39" pos:end="2133:40">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2134:9" pos:end="2134:31"><expr pos:start="2134:9" pos:end="2134:30"><call pos:start="2134:9" pos:end="2134:30"><name pos:start="2134:9" pos:end="2134:25">gen_op_movl_T1_im</name><argument_list pos:start="2134:26" pos:end="2134:30">(<argument pos:start="2134:27" pos:end="2134:29"><expr pos:start="2134:27" pos:end="2134:29"><name pos:start="2134:27" pos:end="2134:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="2135:9" pos:end="2136:16"><if pos:start="2135:9" pos:end="2136:16">if <condition pos:start="2135:12" pos:end="2135:19">(<expr pos:start="2135:13" pos:end="2135:18"><name pos:start="2135:13" pos:end="2135:14">op</name> <operator pos:start="2135:16" pos:end="2135:16">&lt;</operator> <literal type="number" pos:start="2135:18" pos:end="2135:18">4</literal></expr>)</condition><block type="pseudo" pos:start="2136:9" pos:end="2136:16"><block_content pos:start="2136:9" pos:end="2136:16">
        <expr_stmt pos:start="2136:9" pos:end="2136:16"><expr pos:start="2136:9" pos:end="2136:15"><name pos:start="2136:9" pos:end="2136:10">op</name> <operator pos:start="2136:12" pos:end="2136:13">-=</operator> <literal type="number" pos:start="2136:15" pos:end="2136:15">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <goto pos:start="2137:9" pos:end="2137:19">goto <name pos:start="2137:14" pos:end="2137:18">bt_op</name>;</goto>
    <case pos:start="2138:5" pos:end="2138:15">case <expr pos:start="2138:10" pos:end="2138:14"><literal type="number" pos:start="2138:10" pos:end="2138:14">0x1a3</literal></expr>:</case> <comment type="block" pos:start="2138:17" pos:end="2138:31">/* bt Gv, Ev */</comment>
        <expr_stmt pos:start="2139:9" pos:end="2139:15"><expr pos:start="2139:9" pos:end="2139:14"><name pos:start="2139:9" pos:end="2139:10">op</name> <operator pos:start="2139:12" pos:end="2139:12">=</operator> <literal type="number" pos:start="2139:14" pos:end="2139:14">0</literal></expr>;</expr_stmt>
        <goto pos:start="2140:9" pos:end="2140:20">goto <name pos:start="2140:14" pos:end="2140:19">do_btx</name>;</goto>
    <case pos:start="2141:5" pos:end="2141:15">case <expr pos:start="2141:10" pos:end="2141:14"><literal type="number" pos:start="2141:10" pos:end="2141:14">0x1ab</literal></expr>:</case> <comment type="block" pos:start="2141:17" pos:end="2141:25">/* bts */</comment>
        <expr_stmt pos:start="2142:9" pos:end="2142:15"><expr pos:start="2142:9" pos:end="2142:14"><name pos:start="2142:9" pos:end="2142:10">op</name> <operator pos:start="2142:12" pos:end="2142:12">=</operator> <literal type="number" pos:start="2142:14" pos:end="2142:14">1</literal></expr>;</expr_stmt>
        <goto pos:start="2143:9" pos:end="2143:20">goto <name pos:start="2143:14" pos:end="2143:19">do_btx</name>;</goto>
    <case pos:start="2144:5" pos:end="2144:15">case <expr pos:start="2144:10" pos:end="2144:14"><literal type="number" pos:start="2144:10" pos:end="2144:14">0x1b3</literal></expr>:</case> <comment type="block" pos:start="2144:17" pos:end="2144:25">/* btr */</comment>
        <expr_stmt pos:start="2145:9" pos:end="2145:15"><expr pos:start="2145:9" pos:end="2145:14"><name pos:start="2145:9" pos:end="2145:10">op</name> <operator pos:start="2145:12" pos:end="2145:12">=</operator> <literal type="number" pos:start="2145:14" pos:end="2145:14">2</literal></expr>;</expr_stmt>
        <goto pos:start="2146:9" pos:end="2146:20">goto <name pos:start="2146:14" pos:end="2146:19">do_btx</name>;</goto>
    <case pos:start="2147:5" pos:end="2147:15">case <expr pos:start="2147:10" pos:end="2147:14"><literal type="number" pos:start="2147:10" pos:end="2147:14">0x1bb</literal></expr>:</case> <comment type="block" pos:start="2147:17" pos:end="2147:25">/* btc */</comment>
        <expr_stmt pos:start="2148:9" pos:end="2148:15"><expr pos:start="2148:9" pos:end="2148:14"><name pos:start="2148:9" pos:end="2148:10">op</name> <operator pos:start="2148:12" pos:end="2148:12">=</operator> <literal type="number" pos:start="2148:14" pos:end="2148:14">3</literal></expr>;</expr_stmt>
    <label pos:start="2149:5" pos:end="2149:11"><name pos:start="2149:5" pos:end="2149:10">do_btx</name>:</label>
        <expr_stmt pos:start="2150:9" pos:end="2150:29"><expr pos:start="2150:9" pos:end="2150:28"><name pos:start="2150:9" pos:end="2150:10">ot</name> <operator pos:start="2150:12" pos:end="2150:12">=</operator> <name pos:start="2150:14" pos:end="2150:18">dflag</name> <operator pos:start="2150:20" pos:end="2150:20">+</operator> <name pos:start="2150:22" pos:end="2150:28">OT_WORD</name></expr>;</expr_stmt>
        <expr_stmt pos:start="2151:9" pos:end="2151:44"><expr pos:start="2151:9" pos:end="2151:43"><name pos:start="2151:9" pos:end="2151:13">modrm</name> <operator pos:start="2151:15" pos:end="2151:15">=</operator> <call pos:start="2151:17" pos:end="2151:43"><name pos:start="2151:17" pos:end="2151:29">cpu_ldub_code</name><argument_list pos:start="2151:30" pos:end="2151:43">(<argument pos:start="2151:31" pos:end="2151:33"><expr pos:start="2151:31" pos:end="2151:33"><name pos:start="2151:31" pos:end="2151:33">env</name></expr></argument>, <argument pos:start="2151:36" pos:end="2151:42"><expr pos:start="2151:36" pos:end="2151:42"><name pos:start="2151:36" pos:end="2151:40"><name pos:start="2151:36" pos:end="2151:36">s</name><operator pos:start="2151:37" pos:end="2151:38">-&gt;</operator><name pos:start="2151:39" pos:end="2151:40">pc</name></name><operator pos:start="2151:41" pos:end="2151:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2152:9" pos:end="2152:41"><expr pos:start="2152:9" pos:end="2152:40"><name pos:start="2152:9" pos:end="2152:11">reg</name> <operator pos:start="2152:13" pos:end="2152:13">=</operator> <operator pos:start="2152:15" pos:end="2152:15">(</operator><operator pos:start="2152:16" pos:end="2152:16">(</operator><name pos:start="2152:17" pos:end="2152:21">modrm</name> <operator pos:start="2152:23" pos:end="2152:24">&gt;&gt;</operator> <literal type="number" pos:start="2152:26" pos:end="2152:26">3</literal><operator pos:start="2152:27" pos:end="2152:27">)</operator> <operator pos:start="2152:29" pos:end="2152:29">&amp;</operator> <literal type="number" pos:start="2152:31" pos:end="2152:31">7</literal><operator pos:start="2152:32" pos:end="2152:32">)</operator> <operator pos:start="2152:34" pos:end="2152:34">|</operator> <name pos:start="2152:36" pos:end="2152:40">rex_r</name></expr>;</expr_stmt>
        <expr_stmt pos:start="2153:9" pos:end="2153:31"><expr pos:start="2153:9" pos:end="2153:30"><name pos:start="2153:9" pos:end="2153:11">mod</name> <operator pos:start="2153:13" pos:end="2153:13">=</operator> <operator pos:start="2153:15" pos:end="2153:15">(</operator><name pos:start="2153:16" pos:end="2153:20">modrm</name> <operator pos:start="2153:22" pos:end="2153:23">&gt;&gt;</operator> <literal type="number" pos:start="2153:25" pos:end="2153:25">6</literal><operator pos:start="2153:26" pos:end="2153:26">)</operator> <operator pos:start="2153:28" pos:end="2153:28">&amp;</operator> <literal type="number" pos:start="2153:30" pos:end="2153:30">3</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="2154:9" pos:end="2154:36"><expr pos:start="2154:9" pos:end="2154:35"><name pos:start="2154:9" pos:end="2154:10">rm</name> <operator pos:start="2154:12" pos:end="2154:12">=</operator> <operator pos:start="2154:14" pos:end="2154:14">(</operator><name pos:start="2154:15" pos:end="2154:19">modrm</name> <operator pos:start="2154:21" pos:end="2154:21">&amp;</operator> <literal type="number" pos:start="2154:23" pos:end="2154:23">7</literal><operator pos:start="2154:24" pos:end="2154:24">)</operator> <operator pos:start="2154:26" pos:end="2154:26">|</operator> <call pos:start="2154:28" pos:end="2154:35"><name pos:start="2154:28" pos:end="2154:32">REX_B</name><argument_list pos:start="2154:33" pos:end="2154:35">(<argument pos:start="2154:34" pos:end="2154:34"><expr pos:start="2154:34" pos:end="2154:34"><name pos:start="2154:34" pos:end="2154:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2155:9" pos:end="2155:43"><expr pos:start="2155:9" pos:end="2155:42"><call pos:start="2155:9" pos:end="2155:42"><name pos:start="2155:9" pos:end="2155:25">gen_op_mov_TN_reg</name><argument_list pos:start="2155:26" pos:end="2155:42">(<argument pos:start="2155:27" pos:end="2155:33"><expr pos:start="2155:27" pos:end="2155:33"><name pos:start="2155:27" pos:end="2155:33">OT_LONG</name></expr></argument>, <argument pos:start="2155:36" pos:end="2155:36"><expr pos:start="2155:36" pos:end="2155:36"><literal type="number" pos:start="2155:36" pos:end="2155:36">1</literal></expr></argument>, <argument pos:start="2155:39" pos:end="2155:41"><expr pos:start="2155:39" pos:end="2155:41"><name pos:start="2155:39" pos:end="2155:41">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="2156:9" pos:end="3141:17"><if pos:start="2156:9" pos:end="2164:9">if <condition pos:start="2156:12" pos:end="2156:21">(<expr pos:start="2156:13" pos:end="2156:20"><name pos:start="2156:13" pos:end="2156:15">mod</name> <operator pos:start="2156:17" pos:end="2156:18">!=</operator> <literal type="number" pos:start="2156:20" pos:end="2156:20">3</literal></expr>)</condition> <block pos:start="2156:23" pos:end="2164:9">{<block_content pos:start="2157:13" pos:end="2163:47">
            <expr_stmt pos:start="2157:13" pos:end="2157:66"><expr pos:start="2157:13" pos:end="2157:65"><call pos:start="2157:13" pos:end="2157:65"><name pos:start="2157:13" pos:end="2157:25">gen_lea_modrm</name><argument_list pos:start="2157:26" pos:end="2157:65">(<argument pos:start="2157:27" pos:end="2157:29"><expr pos:start="2157:27" pos:end="2157:29"><name pos:start="2157:27" pos:end="2157:29">env</name></expr></argument>, <argument pos:start="2157:32" pos:end="2157:32"><expr pos:start="2157:32" pos:end="2157:32"><name pos:start="2157:32" pos:end="2157:32">s</name></expr></argument>, <argument pos:start="2157:35" pos:end="2157:39"><expr pos:start="2157:35" pos:end="2157:39"><name pos:start="2157:35" pos:end="2157:39">modrm</name></expr></argument>, <argument pos:start="2157:42" pos:end="2157:50"><expr pos:start="2157:42" pos:end="2157:50"><operator pos:start="2157:42" pos:end="2157:42">&amp;</operator><name pos:start="2157:43" pos:end="2157:50">reg_addr</name></expr></argument>, <argument pos:start="2157:53" pos:end="2157:64"><expr pos:start="2157:53" pos:end="2157:64"><operator pos:start="2157:53" pos:end="2157:53">&amp;</operator><name pos:start="2157:54" pos:end="2157:64">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block" pos:start="2158:13" pos:end="2158:62">/* specific case: we need to add a displacement */</comment>
            <expr_stmt pos:start="2159:13" pos:end="2159:35"><expr pos:start="2159:13" pos:end="2159:34"><call pos:start="2159:13" pos:end="2159:34"><name pos:start="2159:13" pos:end="2159:20">gen_exts</name><argument_list pos:start="2159:21" pos:end="2159:34">(<argument pos:start="2159:22" pos:end="2159:23"><expr pos:start="2159:22" pos:end="2159:23"><name pos:start="2159:22" pos:end="2159:23">ot</name></expr></argument>, <argument pos:start="2159:26" pos:end="2159:33"><expr pos:start="2159:26" pos:end="2159:33"><name pos:start="2159:26" pos:end="2159:33"><name pos:start="2159:26" pos:end="2159:30">cpu_T</name><index pos:start="2159:31" pos:end="2159:33">[<expr pos:start="2159:32" pos:end="2159:32"><literal type="number" pos:start="2159:32" pos:end="2159:32">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2160:13" pos:end="2160:56"><expr pos:start="2160:13" pos:end="2160:55"><call pos:start="2160:13" pos:end="2160:55"><name pos:start="2160:13" pos:end="2160:27">tcg_gen_sari_tl</name><argument_list pos:start="2160:28" pos:end="2160:55">(<argument pos:start="2160:29" pos:end="2160:36"><expr pos:start="2160:29" pos:end="2160:36"><name pos:start="2160:29" pos:end="2160:36">cpu_tmp0</name></expr></argument>, <argument pos:start="2160:39" pos:end="2160:46"><expr pos:start="2160:39" pos:end="2160:46"><name pos:start="2160:39" pos:end="2160:46"><name pos:start="2160:39" pos:end="2160:43">cpu_T</name><index pos:start="2160:44" pos:end="2160:46">[<expr pos:start="2160:45" pos:end="2160:45"><literal type="number" pos:start="2160:45" pos:end="2160:45">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="2160:49" pos:end="2160:54"><expr pos:start="2160:49" pos:end="2160:54"><literal type="number" pos:start="2160:49" pos:end="2160:51">3</literal> <operator pos:start="2160:51" pos:end="2160:51">+</operator> <name pos:start="2160:53" pos:end="2160:54">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2161:13" pos:end="2161:52"><expr pos:start="2161:13" pos:end="2161:51"><call pos:start="2161:13" pos:end="2161:51"><name pos:start="2161:13" pos:end="2161:27">tcg_gen_shli_tl</name><argument_list pos:start="2161:28" pos:end="2161:51">(<argument pos:start="2161:29" pos:end="2161:36"><expr pos:start="2161:29" pos:end="2161:36"><name pos:start="2161:29" pos:end="2161:36">cpu_tmp0</name></expr></argument>, <argument pos:start="2161:39" pos:end="2161:46"><expr pos:start="2161:39" pos:end="2161:46"><name pos:start="2161:39" pos:end="2161:46">cpu_tmp0</name></expr></argument>, <argument pos:start="2161:49" pos:end="2161:50"><expr pos:start="2161:49" pos:end="2161:50"><name pos:start="2161:49" pos:end="2161:50">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2162:13" pos:end="2162:53"><expr pos:start="2162:13" pos:end="2162:52"><call pos:start="2162:13" pos:end="2162:52"><name pos:start="2162:13" pos:end="2162:26">tcg_gen_add_tl</name><argument_list pos:start="2162:27" pos:end="2162:52">(<argument pos:start="2162:28" pos:end="2162:33"><expr pos:start="2162:28" pos:end="2162:33"><name pos:start="2162:28" pos:end="2162:33">cpu_A0</name></expr></argument>, <argument pos:start="2162:36" pos:end="2162:41"><expr pos:start="2162:36" pos:end="2162:41"><name pos:start="2162:36" pos:end="2162:41">cpu_A0</name></expr></argument>, <argument pos:start="2162:44" pos:end="2162:51"><expr pos:start="2162:44" pos:end="2162:51"><name pos:start="2162:44" pos:end="2162:51">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2163:13" pos:end="2163:47"><expr pos:start="2163:13" pos:end="2163:46"><call pos:start="2163:13" pos:end="2163:46"><name pos:start="2163:13" pos:end="2163:27">gen_op_ld_T0_A0</name><argument_list pos:start="2163:28" pos:end="2163:46">(<argument pos:start="2163:29" pos:end="2163:45"><expr pos:start="2163:29" pos:end="2163:45"><name pos:start="2163:29" pos:end="2163:30">ot</name> <operator pos:start="2163:32" pos:end="2163:32">+</operator> <name pos:start="2163:34" pos:end="2163:45"><name pos:start="2163:34" pos:end="2163:34">s</name><operator pos:start="2163:35" pos:end="2163:36">-&gt;</operator><name pos:start="2163:37" pos:end="2163:45">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="2164:11" pos:end="3141:17">else <block pos:start="2164:16" pos:end="3141:17">{<block_content pos:start="2165:13" pos:end="3141:17">
            <expr_stmt pos:start="2165:13" pos:end="2165:41"><expr pos:start="2165:13" pos:end="2165:40"><call pos:start="2165:13" pos:end="2165:40"><name pos:start="2165:13" pos:end="2165:29">gen_op_mov_TN_reg</name><argument_list pos:start="2165:30" pos:end="2165:40">(<argument pos:start="2165:31" pos:end="2165:32"><expr pos:start="2165:31" pos:end="2165:32"><name pos:start="2165:31" pos:end="2165:32">ot</name></expr></argument>, <argument pos:start="2165:35" pos:end="2165:35"><expr pos:start="2165:35" pos:end="2165:35"><literal type="number" pos:start="2165:35" pos:end="2165:35">0</literal></expr></argument>, <argument pos:start="2165:38" pos:end="2165:39"><expr pos:start="2165:38" pos:end="2165:39"><name pos:start="2165:38" pos:end="2165:39">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <label pos:start="2166:5" pos:end="2166:10"><name pos:start="2166:5" pos:end="2166:9">bt_op</name>:</label>
        <expr_stmt pos:start="2167:9" pos:end="2167:65"><expr pos:start="2167:9" pos:end="2167:64"><call pos:start="2167:9" pos:end="2167:64"><name pos:start="2167:9" pos:end="2167:23">tcg_gen_andi_tl</name><argument_list pos:start="2167:24" pos:end="2167:64">(<argument pos:start="2167:25" pos:end="2167:32"><expr pos:start="2167:25" pos:end="2167:32"><name pos:start="2167:25" pos:end="2167:32"><name pos:start="2167:25" pos:end="2167:29">cpu_T</name><index pos:start="2167:30" pos:end="2167:32">[<expr pos:start="2167:31" pos:end="2167:31"><literal type="number" pos:start="2167:31" pos:end="2167:31">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="2167:35" pos:end="2167:42"><expr pos:start="2167:35" pos:end="2167:42"><name pos:start="2167:35" pos:end="2167:42"><name pos:start="2167:35" pos:end="2167:39">cpu_T</name><index pos:start="2167:40" pos:end="2167:42">[<expr pos:start="2167:41" pos:end="2167:41"><literal type="number" pos:start="2167:41" pos:end="2167:41">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="2167:45" pos:end="2167:63"><expr pos:start="2167:45" pos:end="2167:63"><operator pos:start="2167:45" pos:end="2167:45">(</operator><literal type="number" pos:start="2167:46" pos:end="2167:46">1</literal> <operator pos:start="2167:48" pos:end="2167:49">&lt;&lt;</operator> <operator pos:start="2167:51" pos:end="2167:51">(</operator><literal type="number" pos:start="2167:52" pos:end="2167:54">3</literal> <operator pos:start="2167:54" pos:end="2167:54">+</operator> <name pos:start="2167:56" pos:end="2167:57">ot</name><operator pos:start="2167:58" pos:end="2167:58">)</operator><operator pos:start="2167:59" pos:end="2167:59">)</operator> <operator pos:start="2167:61" pos:end="2167:61">-</operator> <literal type="number" pos:start="2167:63" pos:end="2167:63">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <switch pos:start="2168:9" pos:end="3141:17">switch<condition pos:start="2168:15" pos:end="2168:18">(<expr pos:start="2168:16" pos:end="2168:17"><name pos:start="2168:16" pos:end="2168:17">op</name></expr>)</condition> <block pos:start="2168:20" pos:end="3141:17">{<block_content pos:start="2169:9" pos:end="3141:17">
        <case pos:start="2169:9" pos:end="2169:15">case <expr pos:start="2169:14" pos:end="2169:14"><literal type="number" pos:start="2169:14" pos:end="2169:14">0</literal></expr>:</case>
            <expr_stmt pos:start="2170:13" pos:end="2170:59"><expr pos:start="2170:13" pos:end="2170:58"><call pos:start="2170:13" pos:end="2170:58"><name pos:start="2170:13" pos:end="2170:26">tcg_gen_shr_tl</name><argument_list pos:start="2170:27" pos:end="2170:58">(<argument pos:start="2170:28" pos:end="2170:37"><expr pos:start="2170:28" pos:end="2170:37"><name pos:start="2170:28" pos:end="2170:37">cpu_cc_src</name></expr></argument>, <argument pos:start="2170:40" pos:end="2170:47"><expr pos:start="2170:40" pos:end="2170:47"><name pos:start="2170:40" pos:end="2170:47"><name pos:start="2170:40" pos:end="2170:44">cpu_T</name><index pos:start="2170:45" pos:end="2170:47">[<expr pos:start="2170:46" pos:end="2170:46"><literal type="number" pos:start="2170:46" pos:end="2170:46">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2170:50" pos:end="2170:57"><expr pos:start="2170:50" pos:end="2170:57"><name pos:start="2170:50" pos:end="2170:57"><name pos:start="2170:50" pos:end="2170:54">cpu_T</name><index pos:start="2170:55" pos:end="2170:57">[<expr pos:start="2170:56" pos:end="2170:56"><literal type="number" pos:start="2170:56" pos:end="2170:56">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2171:13" pos:end="2171:43"><expr pos:start="2171:13" pos:end="2171:42"><call pos:start="2171:13" pos:end="2171:42"><name pos:start="2171:13" pos:end="2171:27">tcg_gen_movi_tl</name><argument_list pos:start="2171:28" pos:end="2171:42">(<argument pos:start="2171:29" pos:end="2171:38"><expr pos:start="2171:29" pos:end="2171:38"><name pos:start="2171:29" pos:end="2171:38">cpu_cc_dst</name></expr></argument>, <argument pos:start="2171:41" pos:end="2171:41"><expr pos:start="2171:41" pos:end="2171:41"><literal type="number" pos:start="2171:41" pos:end="2171:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="2172:13" pos:end="2172:18">break;</break>
        <case pos:start="2173:9" pos:end="2173:15">case <expr pos:start="2173:14" pos:end="2173:14"><literal type="number" pos:start="2173:14" pos:end="2173:14">1</literal></expr>:</case>
            <expr_stmt pos:start="2174:13" pos:end="2174:57"><expr pos:start="2174:13" pos:end="2174:56"><call pos:start="2174:13" pos:end="2174:56"><name pos:start="2174:13" pos:end="2174:26">tcg_gen_shr_tl</name><argument_list pos:start="2174:27" pos:end="2174:56">(<argument pos:start="2174:28" pos:end="2174:35"><expr pos:start="2174:28" pos:end="2174:35"><name pos:start="2174:28" pos:end="2174:35">cpu_tmp4</name></expr></argument>, <argument pos:start="2174:38" pos:end="2174:45"><expr pos:start="2174:38" pos:end="2174:45"><name pos:start="2174:38" pos:end="2174:45"><name pos:start="2174:38" pos:end="2174:42">cpu_T</name><index pos:start="2174:43" pos:end="2174:45">[<expr pos:start="2174:44" pos:end="2174:44"><literal type="number" pos:start="2174:44" pos:end="2174:44">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2174:48" pos:end="2174:55"><expr pos:start="2174:48" pos:end="2174:55"><name pos:start="2174:48" pos:end="2174:55"><name pos:start="2174:48" pos:end="2174:52">cpu_T</name><index pos:start="2174:53" pos:end="2174:55">[<expr pos:start="2174:54" pos:end="2174:54"><literal type="number" pos:start="2174:54" pos:end="2174:54">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2175:13" pos:end="2175:41"><expr pos:start="2175:13" pos:end="2175:40"><call pos:start="2175:13" pos:end="2175:40"><name pos:start="2175:13" pos:end="2175:27">tcg_gen_movi_tl</name><argument_list pos:start="2175:28" pos:end="2175:40">(<argument pos:start="2175:29" pos:end="2175:36"><expr pos:start="2175:29" pos:end="2175:36"><name pos:start="2175:29" pos:end="2175:36">cpu_tmp0</name></expr></argument>, <argument pos:start="2175:39" pos:end="2175:39"><expr pos:start="2175:39" pos:end="2175:39"><literal type="number" pos:start="2175:39" pos:end="2175:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2176:13" pos:end="2176:57"><expr pos:start="2176:13" pos:end="2176:56"><call pos:start="2176:13" pos:end="2176:56"><name pos:start="2176:13" pos:end="2176:26">tcg_gen_shl_tl</name><argument_list pos:start="2176:27" pos:end="2176:56">(<argument pos:start="2176:28" pos:end="2176:35"><expr pos:start="2176:28" pos:end="2176:35"><name pos:start="2176:28" pos:end="2176:35">cpu_tmp0</name></expr></argument>, <argument pos:start="2176:38" pos:end="2176:45"><expr pos:start="2176:38" pos:end="2176:45"><name pos:start="2176:38" pos:end="2176:45">cpu_tmp0</name></expr></argument>, <argument pos:start="2176:48" pos:end="2176:55"><expr pos:start="2176:48" pos:end="2176:55"><name pos:start="2176:48" pos:end="2176:55"><name pos:start="2176:48" pos:end="2176:52">cpu_T</name><index pos:start="2176:53" pos:end="2176:55">[<expr pos:start="2176:54" pos:end="2176:54"><literal type="number" pos:start="2176:54" pos:end="2176:54">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2177:13" pos:end="2177:56"><expr pos:start="2177:13" pos:end="2177:55"><call pos:start="2177:13" pos:end="2177:55"><name pos:start="2177:13" pos:end="2177:25">tcg_gen_or_tl</name><argument_list pos:start="2177:26" pos:end="2177:55">(<argument pos:start="2177:27" pos:end="2177:34"><expr pos:start="2177:27" pos:end="2177:34"><name pos:start="2177:27" pos:end="2177:34"><name pos:start="2177:27" pos:end="2177:31">cpu_T</name><index pos:start="2177:32" pos:end="2177:34">[<expr pos:start="2177:33" pos:end="2177:33"><literal type="number" pos:start="2177:33" pos:end="2177:33">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2177:37" pos:end="2177:44"><expr pos:start="2177:37" pos:end="2177:44"><name pos:start="2177:37" pos:end="2177:44"><name pos:start="2177:37" pos:end="2177:41">cpu_T</name><index pos:start="2177:42" pos:end="2177:44">[<expr pos:start="2177:43" pos:end="2177:43"><literal type="number" pos:start="2177:43" pos:end="2177:43">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2177:47" pos:end="2177:54"><expr pos:start="2177:47" pos:end="2177:54"><name pos:start="2177:47" pos:end="2177:54">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="2178:13" pos:end="2178:18">break;</break>
        <case pos:start="2179:9" pos:end="2179:15">case <expr pos:start="2179:14" pos:end="2179:14"><literal type="number" pos:start="2179:14" pos:end="2179:14">2</literal></expr>:</case>
            <expr_stmt pos:start="2180:13" pos:end="2180:57"><expr pos:start="2180:13" pos:end="2180:56"><call pos:start="2180:13" pos:end="2180:56"><name pos:start="2180:13" pos:end="2180:26">tcg_gen_shr_tl</name><argument_list pos:start="2180:27" pos:end="2180:56">(<argument pos:start="2180:28" pos:end="2180:35"><expr pos:start="2180:28" pos:end="2180:35"><name pos:start="2180:28" pos:end="2180:35">cpu_tmp4</name></expr></argument>, <argument pos:start="2180:38" pos:end="2180:45"><expr pos:start="2180:38" pos:end="2180:45"><name pos:start="2180:38" pos:end="2180:45"><name pos:start="2180:38" pos:end="2180:42">cpu_T</name><index pos:start="2180:43" pos:end="2180:45">[<expr pos:start="2180:44" pos:end="2180:44"><literal type="number" pos:start="2180:44" pos:end="2180:44">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2180:48" pos:end="2180:55"><expr pos:start="2180:48" pos:end="2180:55"><name pos:start="2180:48" pos:end="2180:55"><name pos:start="2180:48" pos:end="2180:52">cpu_T</name><index pos:start="2180:53" pos:end="2180:55">[<expr pos:start="2180:54" pos:end="2180:54"><literal type="number" pos:start="2180:54" pos:end="2180:54">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2181:13" pos:end="2181:41"><expr pos:start="2181:13" pos:end="2181:40"><call pos:start="2181:13" pos:end="2181:40"><name pos:start="2181:13" pos:end="2181:27">tcg_gen_movi_tl</name><argument_list pos:start="2181:28" pos:end="2181:40">(<argument pos:start="2181:29" pos:end="2181:36"><expr pos:start="2181:29" pos:end="2181:36"><name pos:start="2181:29" pos:end="2181:36">cpu_tmp0</name></expr></argument>, <argument pos:start="2181:39" pos:end="2181:39"><expr pos:start="2181:39" pos:end="2181:39"><literal type="number" pos:start="2181:39" pos:end="2181:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2182:13" pos:end="2182:57"><expr pos:start="2182:13" pos:end="2182:56"><call pos:start="2182:13" pos:end="2182:56"><name pos:start="2182:13" pos:end="2182:26">tcg_gen_shl_tl</name><argument_list pos:start="2182:27" pos:end="2182:56">(<argument pos:start="2182:28" pos:end="2182:35"><expr pos:start="2182:28" pos:end="2182:35"><name pos:start="2182:28" pos:end="2182:35">cpu_tmp0</name></expr></argument>, <argument pos:start="2182:38" pos:end="2182:45"><expr pos:start="2182:38" pos:end="2182:45"><name pos:start="2182:38" pos:end="2182:45">cpu_tmp0</name></expr></argument>, <argument pos:start="2182:48" pos:end="2182:55"><expr pos:start="2182:48" pos:end="2182:55"><name pos:start="2182:48" pos:end="2182:55"><name pos:start="2182:48" pos:end="2182:52">cpu_T</name><index pos:start="2182:53" pos:end="2182:55">[<expr pos:start="2182:54" pos:end="2182:54"><literal type="number" pos:start="2182:54" pos:end="2182:54">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2183:13" pos:end="2183:47"><expr pos:start="2183:13" pos:end="2183:46"><call pos:start="2183:13" pos:end="2183:46"><name pos:start="2183:13" pos:end="2183:26">tcg_gen_not_tl</name><argument_list pos:start="2183:27" pos:end="2183:46">(<argument pos:start="2183:28" pos:end="2183:35"><expr pos:start="2183:28" pos:end="2183:35"><name pos:start="2183:28" pos:end="2183:35">cpu_tmp0</name></expr></argument>, <argument pos:start="2183:38" pos:end="2183:45"><expr pos:start="2183:38" pos:end="2183:45"><name pos:start="2183:38" pos:end="2183:45">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2184:13" pos:end="2184:57"><expr pos:start="2184:13" pos:end="2184:56"><call pos:start="2184:13" pos:end="2184:56"><name pos:start="2184:13" pos:end="2184:26">tcg_gen_and_tl</name><argument_list pos:start="2184:27" pos:end="2184:56">(<argument pos:start="2184:28" pos:end="2184:35"><expr pos:start="2184:28" pos:end="2184:35"><name pos:start="2184:28" pos:end="2184:35"><name pos:start="2184:28" pos:end="2184:32">cpu_T</name><index pos:start="2184:33" pos:end="2184:35">[<expr pos:start="2184:34" pos:end="2184:34"><literal type="number" pos:start="2184:34" pos:end="2184:34">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2184:38" pos:end="2184:45"><expr pos:start="2184:38" pos:end="2184:45"><name pos:start="2184:38" pos:end="2184:45"><name pos:start="2184:38" pos:end="2184:42">cpu_T</name><index pos:start="2184:43" pos:end="2184:45">[<expr pos:start="2184:44" pos:end="2184:44"><literal type="number" pos:start="2184:44" pos:end="2184:44">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2184:48" pos:end="2184:55"><expr pos:start="2184:48" pos:end="2184:55"><name pos:start="2184:48" pos:end="2184:55">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="2185:13" pos:end="2185:18">break;</break>
        <default pos:start="2186:9" pos:end="2186:16">default:</default>
        <case pos:start="2187:9" pos:end="2187:15">case <expr pos:start="2187:14" pos:end="2187:14"><literal type="number" pos:start="2187:14" pos:end="2187:14">3</literal></expr>:</case>
            <expr_stmt pos:start="2188:13" pos:end="2188:57"><expr pos:start="2188:13" pos:end="2188:56"><call pos:start="2188:13" pos:end="2188:56"><name pos:start="2188:13" pos:end="2188:26">tcg_gen_shr_tl</name><argument_list pos:start="2188:27" pos:end="2188:56">(<argument pos:start="2188:28" pos:end="2188:35"><expr pos:start="2188:28" pos:end="2188:35"><name pos:start="2188:28" pos:end="2188:35">cpu_tmp4</name></expr></argument>, <argument pos:start="2188:38" pos:end="2188:45"><expr pos:start="2188:38" pos:end="2188:45"><name pos:start="2188:38" pos:end="2188:45"><name pos:start="2188:38" pos:end="2188:42">cpu_T</name><index pos:start="2188:43" pos:end="2188:45">[<expr pos:start="2188:44" pos:end="2188:44"><literal type="number" pos:start="2188:44" pos:end="2188:44">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2188:48" pos:end="2188:55"><expr pos:start="2188:48" pos:end="2188:55"><name pos:start="2188:48" pos:end="2188:55"><name pos:start="2188:48" pos:end="2188:52">cpu_T</name><index pos:start="2188:53" pos:end="2188:55">[<expr pos:start="2188:54" pos:end="2188:54"><literal type="number" pos:start="2188:54" pos:end="2188:54">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2189:13" pos:end="2189:41"><expr pos:start="2189:13" pos:end="2189:40"><call pos:start="2189:13" pos:end="2189:40"><name pos:start="2189:13" pos:end="2189:27">tcg_gen_movi_tl</name><argument_list pos:start="2189:28" pos:end="2189:40">(<argument pos:start="2189:29" pos:end="2189:36"><expr pos:start="2189:29" pos:end="2189:36"><name pos:start="2189:29" pos:end="2189:36">cpu_tmp0</name></expr></argument>, <argument pos:start="2189:39" pos:end="2189:39"><expr pos:start="2189:39" pos:end="2189:39"><literal type="number" pos:start="2189:39" pos:end="2189:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2190:13" pos:end="2190:57"><expr pos:start="2190:13" pos:end="2190:56"><call pos:start="2190:13" pos:end="2190:56"><name pos:start="2190:13" pos:end="2190:26">tcg_gen_shl_tl</name><argument_list pos:start="2190:27" pos:end="2190:56">(<argument pos:start="2190:28" pos:end="2190:35"><expr pos:start="2190:28" pos:end="2190:35"><name pos:start="2190:28" pos:end="2190:35">cpu_tmp0</name></expr></argument>, <argument pos:start="2190:38" pos:end="2190:45"><expr pos:start="2190:38" pos:end="2190:45"><name pos:start="2190:38" pos:end="2190:45">cpu_tmp0</name></expr></argument>, <argument pos:start="2190:48" pos:end="2190:55"><expr pos:start="2190:48" pos:end="2190:55"><name pos:start="2190:48" pos:end="2190:55"><name pos:start="2190:48" pos:end="2190:52">cpu_T</name><index pos:start="2190:53" pos:end="2190:55">[<expr pos:start="2190:54" pos:end="2190:54"><literal type="number" pos:start="2190:54" pos:end="2190:54">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2191:13" pos:end="2191:57"><expr pos:start="2191:13" pos:end="2191:56"><call pos:start="2191:13" pos:end="2191:56"><name pos:start="2191:13" pos:end="2191:26">tcg_gen_xor_tl</name><argument_list pos:start="2191:27" pos:end="2191:56">(<argument pos:start="2191:28" pos:end="2191:35"><expr pos:start="2191:28" pos:end="2191:35"><name pos:start="2191:28" pos:end="2191:35"><name pos:start="2191:28" pos:end="2191:32">cpu_T</name><index pos:start="2191:33" pos:end="2191:35">[<expr pos:start="2191:34" pos:end="2191:34"><literal type="number" pos:start="2191:34" pos:end="2191:34">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2191:38" pos:end="2191:45"><expr pos:start="2191:38" pos:end="2191:45"><name pos:start="2191:38" pos:end="2191:45"><name pos:start="2191:38" pos:end="2191:42">cpu_T</name><index pos:start="2191:43" pos:end="2191:45">[<expr pos:start="2191:44" pos:end="2191:44"><literal type="number" pos:start="2191:44" pos:end="2191:44">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2191:48" pos:end="2191:55"><expr pos:start="2191:48" pos:end="2191:55"><name pos:start="2191:48" pos:end="2191:55">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="2192:13" pos:end="2192:18">break;</break>
        <expr_stmt pos:start="2193:9" pos:end="2193:38"><expr pos:start="2193:9" pos:end="2193:37"><call pos:start="2193:9" pos:end="2193:37"><name pos:start="2193:9" pos:end="2193:17">set_cc_op</name><argument_list pos:start="2193:18" pos:end="2193:37">(<argument pos:start="2193:19" pos:end="2193:19"><expr pos:start="2193:19" pos:end="2193:19"><name pos:start="2193:19" pos:end="2193:19">s</name></expr></argument>, <argument pos:start="2193:22" pos:end="2193:36"><expr pos:start="2193:22" pos:end="2193:36"><name pos:start="2193:22" pos:end="2193:31">CC_OP_SARB</name> <operator pos:start="2193:33" pos:end="2193:33">+</operator> <name pos:start="2193:35" pos:end="2193:36">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="2194:9" pos:end="3141:17"><if pos:start="2194:9" pos:end="3141:17">if <condition pos:start="2194:12" pos:end="2194:20">(<expr pos:start="2194:13" pos:end="2194:19"><name pos:start="2194:13" pos:end="2194:14">op</name> <operator pos:start="2194:16" pos:end="2194:17">!=</operator> <literal type="number" pos:start="2194:19" pos:end="2194:19">0</literal></expr>)</condition> <block pos:start="2194:22" pos:end="3141:17">{<block_content pos:start="2195:13" pos:end="3141:17">
            <if_stmt pos:start="2195:13" pos:end="2198:42"><if pos:start="2195:13" pos:end="2196:51">if <condition pos:start="2195:16" pos:end="2195:25">(<expr pos:start="2195:17" pos:end="2195:24"><name pos:start="2195:17" pos:end="2195:19">mod</name> <operator pos:start="2195:21" pos:end="2195:22">!=</operator> <literal type="number" pos:start="2195:24" pos:end="2195:24">3</literal></expr>)</condition><block type="pseudo" pos:start="2196:17" pos:end="2196:51"><block_content pos:start="2196:17" pos:end="2196:51">
                <expr_stmt pos:start="2196:17" pos:end="2196:51"><expr pos:start="2196:17" pos:end="2196:50"><call pos:start="2196:17" pos:end="2196:50"><name pos:start="2196:17" pos:end="2196:31">gen_op_st_T0_A0</name><argument_list pos:start="2196:32" pos:end="2196:50">(<argument pos:start="2196:33" pos:end="2196:49"><expr pos:start="2196:33" pos:end="2196:49"><name pos:start="2196:33" pos:end="2196:34">ot</name> <operator pos:start="2196:36" pos:end="2196:36">+</operator> <name pos:start="2196:38" pos:end="2196:49"><name pos:start="2196:38" pos:end="2196:38">s</name><operator pos:start="2196:39" pos:end="2196:40">-&gt;</operator><name pos:start="2196:41" pos:end="2196:49">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else pos:start="2197:13" pos:end="2198:42">else<block type="pseudo" pos:start="2198:17" pos:end="2198:42"><block_content pos:start="2198:17" pos:end="2198:42">
                <expr_stmt pos:start="2198:17" pos:end="2198:42"><expr pos:start="2198:17" pos:end="2198:41"><call pos:start="2198:17" pos:end="2198:41"><name pos:start="2198:17" pos:end="2198:33">gen_op_mov_reg_T0</name><argument_list pos:start="2198:34" pos:end="2198:41">(<argument pos:start="2198:35" pos:end="2198:36"><expr pos:start="2198:35" pos:end="2198:36"><name pos:start="2198:35" pos:end="2198:36">ot</name></expr></argument>, <argument pos:start="2198:39" pos:end="2198:40"><expr pos:start="2198:39" pos:end="2198:40"><name pos:start="2198:39" pos:end="2198:40">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <expr_stmt pos:start="2199:13" pos:end="2199:49"><expr pos:start="2199:13" pos:end="2199:48"><call pos:start="2199:13" pos:end="2199:48"><name pos:start="2199:13" pos:end="2199:26">tcg_gen_mov_tl</name><argument_list pos:start="2199:27" pos:end="2199:48">(<argument pos:start="2199:28" pos:end="2199:37"><expr pos:start="2199:28" pos:end="2199:37"><name pos:start="2199:28" pos:end="2199:37">cpu_cc_src</name></expr></argument>, <argument pos:start="2199:40" pos:end="2199:47"><expr pos:start="2199:40" pos:end="2199:47"><name pos:start="2199:40" pos:end="2199:47">cpu_tmp4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2200:13" pos:end="2200:43"><expr pos:start="2200:13" pos:end="2200:42"><call pos:start="2200:13" pos:end="2200:42"><name pos:start="2200:13" pos:end="2200:27">tcg_gen_movi_tl</name><argument_list pos:start="2200:28" pos:end="2200:42">(<argument pos:start="2200:29" pos:end="2200:38"><expr pos:start="2200:29" pos:end="2200:38"><name pos:start="2200:29" pos:end="2200:38">cpu_cc_dst</name></expr></argument>, <argument pos:start="2200:41" pos:end="2200:41"><expr pos:start="2200:41" pos:end="2200:41"><literal type="number" pos:start="2200:41" pos:end="2200:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="2201:9" pos:end="2201:14">break;</break>
    <case pos:start="2202:5" pos:end="2202:15">case <expr pos:start="2202:10" pos:end="2202:14"><literal type="number" pos:start="2202:10" pos:end="2202:14">0x1bc</literal></expr>:</case> <comment type="block" pos:start="2202:17" pos:end="2202:33">/* bsf / tzcnt */</comment>
    <case pos:start="2203:5" pos:end="2203:15">case <expr pos:start="2203:10" pos:end="2203:14"><literal type="number" pos:start="2203:10" pos:end="2203:14">0x1bd</literal></expr>:</case> <comment type="block" pos:start="2203:17" pos:end="2203:33">/* bsr / lzcnt */</comment>
        <expr_stmt pos:start="2204:9" pos:end="2204:29"><expr pos:start="2204:9" pos:end="2204:28"><name pos:start="2204:9" pos:end="2204:10">ot</name> <operator pos:start="2204:12" pos:end="2204:12">=</operator> <name pos:start="2204:14" pos:end="2204:18">dflag</name> <operator pos:start="2204:20" pos:end="2204:20">+</operator> <name pos:start="2204:22" pos:end="2204:28">OT_WORD</name></expr>;</expr_stmt>
        <expr_stmt pos:start="2205:9" pos:end="2205:44"><expr pos:start="2205:9" pos:end="2205:43"><name pos:start="2205:9" pos:end="2205:13">modrm</name> <operator pos:start="2205:15" pos:end="2205:15">=</operator> <call pos:start="2205:17" pos:end="2205:43"><name pos:start="2205:17" pos:end="2205:29">cpu_ldub_code</name><argument_list pos:start="2205:30" pos:end="2205:43">(<argument pos:start="2205:31" pos:end="2205:33"><expr pos:start="2205:31" pos:end="2205:33"><name pos:start="2205:31" pos:end="2205:33">env</name></expr></argument>, <argument pos:start="2205:36" pos:end="2205:42"><expr pos:start="2205:36" pos:end="2205:42"><name pos:start="2205:36" pos:end="2205:40"><name pos:start="2205:36" pos:end="2205:36">s</name><operator pos:start="2205:37" pos:end="2205:38">-&gt;</operator><name pos:start="2205:39" pos:end="2205:40">pc</name></name><operator pos:start="2205:41" pos:end="2205:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2206:9" pos:end="2206:41"><expr pos:start="2206:9" pos:end="2206:40"><name pos:start="2206:9" pos:end="2206:11">reg</name> <operator pos:start="2206:13" pos:end="2206:13">=</operator> <operator pos:start="2206:15" pos:end="2206:15">(</operator><operator pos:start="2206:16" pos:end="2206:16">(</operator><name pos:start="2206:17" pos:end="2206:21">modrm</name> <operator pos:start="2206:23" pos:end="2206:24">&gt;&gt;</operator> <literal type="number" pos:start="2206:26" pos:end="2206:26">3</literal><operator pos:start="2206:27" pos:end="2206:27">)</operator> <operator pos:start="2206:29" pos:end="2206:29">&amp;</operator> <literal type="number" pos:start="2206:31" pos:end="2206:31">7</literal><operator pos:start="2206:32" pos:end="2206:32">)</operator> <operator pos:start="2206:34" pos:end="2206:34">|</operator> <name pos:start="2206:36" pos:end="2206:40">rex_r</name></expr>;</expr_stmt>
        <expr_stmt pos:start="2207:9" pos:end="2207:54"><expr pos:start="2207:9" pos:end="2207:53"><call pos:start="2207:9" pos:end="2207:53"><name pos:start="2207:9" pos:end="2207:22">gen_ldst_modrm</name><argument_list pos:start="2207:23" pos:end="2207:53">(<argument pos:start="2207:24" pos:end="2207:26"><expr pos:start="2207:24" pos:end="2207:26"><name pos:start="2207:24" pos:end="2207:26">env</name></expr></argument>, <argument pos:start="2207:29" pos:end="2207:29"><expr pos:start="2207:29" pos:end="2207:29"><name pos:start="2207:29" pos:end="2207:29">s</name></expr></argument>, <argument pos:start="2207:32" pos:end="2207:36"><expr pos:start="2207:32" pos:end="2207:36"><name pos:start="2207:32" pos:end="2207:36">modrm</name></expr></argument>, <argument pos:start="2207:39" pos:end="2207:40"><expr pos:start="2207:39" pos:end="2207:40"><name pos:start="2207:39" pos:end="2207:40">ot</name></expr></argument>, <argument pos:start="2207:43" pos:end="2207:49"><expr pos:start="2207:43" pos:end="2207:49"><name pos:start="2207:43" pos:end="2207:49">OR_TMP0</name></expr></argument>, <argument pos:start="2207:52" pos:end="2207:52"><expr pos:start="2207:52" pos:end="2207:52"><literal type="number" pos:start="2207:52" pos:end="2207:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2208:9" pos:end="2208:31"><expr pos:start="2208:9" pos:end="2208:30"><call pos:start="2208:9" pos:end="2208:30"><name pos:start="2208:9" pos:end="2208:16">gen_extu</name><argument_list pos:start="2208:17" pos:end="2208:30">(<argument pos:start="2208:18" pos:end="2208:19"><expr pos:start="2208:18" pos:end="2208:19"><name pos:start="2208:18" pos:end="2208:19">ot</name></expr></argument>, <argument pos:start="2208:22" pos:end="2208:29"><expr pos:start="2208:22" pos:end="2208:29"><name pos:start="2208:22" pos:end="2208:29"><name pos:start="2208:22" pos:end="2208:26">cpu_T</name><index pos:start="2208:27" pos:end="2208:29">[<expr pos:start="2208:28" pos:end="2208:28"><literal type="number" pos:start="2208:28" pos:end="2208:28">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="2209:9" pos:end="2209:69">/* Note that lzcnt and tzcnt are in different extensions.  */</comment>
        <if_stmt pos:start="2210:9" pos:end="3141:17"><if pos:start="2210:9" pos:end="3141:17">if <condition pos:start="2210:12" pos:end="2213:66">(<expr pos:start="2210:13" pos:end="2213:65"><operator pos:start="2210:13" pos:end="2210:13">(</operator><name pos:start="2210:14" pos:end="2210:21">prefixes</name> <operator pos:start="2210:23" pos:end="2210:23">&amp;</operator> <name pos:start="2210:25" pos:end="2210:35">PREFIX_REPZ</name><operator pos:start="2210:36" pos:end="2210:36">)</operator>
            <operator pos:start="2211:13" pos:end="2211:14">&amp;&amp;</operator> <operator pos:start="2211:16" pos:end="2211:16">(</operator><ternary pos:start="2211:17" pos:end="2213:64"><condition pos:start="2211:17" pos:end="2212:17"><expr pos:start="2211:17" pos:end="2211:21"><name pos:start="2211:17" pos:end="2211:17">b</name> <operator pos:start="2211:19" pos:end="2211:19">&amp;</operator> <literal type="number" pos:start="2211:21" pos:end="2211:21">1</literal></expr>
                ?</condition><then pos:start="2212:19" pos:end="2212:57"> <expr pos:start="2212:19" pos:end="2212:57"><name pos:start="2212:19" pos:end="2212:40"><name pos:start="2212:19" pos:end="2212:19">s</name><operator pos:start="2212:20" pos:end="2212:21">-&gt;</operator><name pos:start="2212:22" pos:end="2212:40">cpuid_ext3_features</name></name> <operator pos:start="2212:42" pos:end="2212:42">&amp;</operator> <name pos:start="2212:44" pos:end="2212:57">CPUID_EXT3_ABM</name></expr>
                </then><else pos:start="2213:17" pos:end="2213:64">: <expr pos:start="2213:19" pos:end="2213:64"><name pos:start="2213:19" pos:end="2213:43"><name pos:start="2213:19" pos:end="2213:19">s</name><operator pos:start="2213:20" pos:end="2213:21">-&gt;</operator><name pos:start="2213:22" pos:end="2213:43">cpuid_7_0_ebx_features</name></name> <operator pos:start="2213:45" pos:end="2213:45">&amp;</operator> <name pos:start="2213:47" pos:end="2213:64">CPUID_7_0_EBX_BMI1</name></expr></else></ternary><operator pos:start="2213:65" pos:end="2213:65">)</operator></expr>)</condition> <block pos:start="2213:68" pos:end="3141:17">{<block_content pos:start="2214:13" pos:end="3141:17">
            <decl_stmt pos:start="2214:13" pos:end="2214:31"><decl pos:start="2214:13" pos:end="2214:30"><type pos:start="2214:13" pos:end="2214:15"><name pos:start="2214:13" pos:end="2214:15">int</name></type> <name pos:start="2214:17" pos:end="2214:20">size</name> <init pos:start="2214:22" pos:end="2214:30">= <expr pos:start="2214:24" pos:end="2214:30"><literal type="number" pos:start="2214:24" pos:end="2214:24">8</literal> <operator pos:start="2214:26" pos:end="2214:27">&lt;&lt;</operator> <name pos:start="2214:29" pos:end="2214:30">ot</name></expr></init></decl>;</decl_stmt>
            <expr_stmt pos:start="2215:13" pos:end="2215:49"><expr pos:start="2215:13" pos:end="2215:48"><call pos:start="2215:13" pos:end="2215:48"><name pos:start="2215:13" pos:end="2215:26">tcg_gen_mov_tl</name><argument_list pos:start="2215:27" pos:end="2215:48">(<argument pos:start="2215:28" pos:end="2215:37"><expr pos:start="2215:28" pos:end="2215:37"><name pos:start="2215:28" pos:end="2215:37">cpu_cc_src</name></expr></argument>, <argument pos:start="2215:40" pos:end="2215:47"><expr pos:start="2215:40" pos:end="2215:47"><name pos:start="2215:40" pos:end="2215:47"><name pos:start="2215:40" pos:end="2215:44">cpu_T</name><index pos:start="2215:45" pos:end="2215:47">[<expr pos:start="2215:46" pos:end="2215:46"><literal type="number" pos:start="2215:46" pos:end="2215:46">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="2216:13" pos:end="2231:9"><if pos:start="2216:13" pos:end="2221:13">if <condition pos:start="2216:16" pos:end="2216:22">(<expr pos:start="2216:17" pos:end="2216:21"><name pos:start="2216:17" pos:end="2216:17">b</name> <operator pos:start="2216:19" pos:end="2216:19">&amp;</operator> <literal type="number" pos:start="2216:21" pos:end="2216:21">1</literal></expr>)</condition> <block pos:start="2216:24" pos:end="2221:13">{<block_content pos:start="2219:17" pos:end="2220:77">
                <comment type="block" pos:start="2217:17" pos:end="2218:73">/* For lzcnt, reduce the target_ulong result by the
                   number of zeros that we expect to find at the top.  */</comment>
                <expr_stmt pos:start="2219:17" pos:end="2219:51"><expr pos:start="2219:17" pos:end="2219:50"><call pos:start="2219:17" pos:end="2219:50"><name pos:start="2219:17" pos:end="2219:30">gen_helper_clz</name><argument_list pos:start="2219:31" pos:end="2219:50">(<argument pos:start="2219:32" pos:end="2219:39"><expr pos:start="2219:32" pos:end="2219:39"><name pos:start="2219:32" pos:end="2219:39"><name pos:start="2219:32" pos:end="2219:36">cpu_T</name><index pos:start="2219:37" pos:end="2219:39">[<expr pos:start="2219:38" pos:end="2219:38"><literal type="number" pos:start="2219:38" pos:end="2219:38">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2219:42" pos:end="2219:49"><expr pos:start="2219:42" pos:end="2219:49"><name pos:start="2219:42" pos:end="2219:49"><name pos:start="2219:42" pos:end="2219:46">cpu_T</name><index pos:start="2219:47" pos:end="2219:49">[<expr pos:start="2219:48" pos:end="2219:48"><literal type="number" pos:start="2219:48" pos:end="2219:48">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2220:17" pos:end="2220:77"><expr pos:start="2220:17" pos:end="2220:76"><call pos:start="2220:17" pos:end="2220:76"><name pos:start="2220:17" pos:end="2220:31">tcg_gen_subi_tl</name><argument_list pos:start="2220:32" pos:end="2220:76">(<argument pos:start="2220:33" pos:end="2220:40"><expr pos:start="2220:33" pos:end="2220:40"><name pos:start="2220:33" pos:end="2220:40"><name pos:start="2220:33" pos:end="2220:37">cpu_T</name><index pos:start="2220:38" pos:end="2220:40">[<expr pos:start="2220:39" pos:end="2220:39"><literal type="number" pos:start="2220:39" pos:end="2220:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2220:43" pos:end="2220:50"><expr pos:start="2220:43" pos:end="2220:50"><name pos:start="2220:43" pos:end="2220:50"><name pos:start="2220:43" pos:end="2220:47">cpu_T</name><index pos:start="2220:48" pos:end="2220:50">[<expr pos:start="2220:49" pos:end="2220:49"><literal type="number" pos:start="2220:49" pos:end="2220:49">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2220:53" pos:end="2220:75"><expr pos:start="2220:53" pos:end="2220:75"><name pos:start="2220:53" pos:end="2220:68">TARGET_LONG_BITS</name> <operator pos:start="2220:70" pos:end="2220:70">-</operator> <name pos:start="2220:72" pos:end="2220:75">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="2221:15" pos:end="2231:9">else <block pos:start="2221:20" pos:end="2231:9">{<block_content pos:start="2224:17" pos:end="2230:44">
                <comment type="block" pos:start="2222:17" pos:end="2223:68">/* For tzcnt, a zero input must return the operand size:
                   force all bits outside the operand size to 1.  */</comment>
                <decl_stmt pos:start="2224:17" pos:end="2224:67"><decl pos:start="2224:17" pos:end="2224:66"><type pos:start="2224:17" pos:end="2224:28"><name pos:start="2224:17" pos:end="2224:28">target_ulong</name></type> <name pos:start="2224:30" pos:end="2224:33">mask</name> <init pos:start="2224:35" pos:end="2224:66">= <expr pos:start="2224:37" pos:end="2224:66"><operator pos:start="2224:37" pos:end="2224:37">(</operator><name pos:start="2224:38" pos:end="2224:49">target_ulong</name><operator pos:start="2224:50" pos:end="2224:50">)</operator><operator pos:start="2224:51" pos:end="2224:51">-</operator><literal type="number" pos:start="2224:52" pos:end="2224:52">2</literal> <operator pos:start="2224:54" pos:end="2224:55">&lt;&lt;</operator> <operator pos:start="2224:57" pos:end="2224:57">(</operator><name pos:start="2224:58" pos:end="2224:61">size</name> <operator pos:start="2224:63" pos:end="2224:63">-</operator> <literal type="number" pos:start="2224:65" pos:end="2224:65">1</literal><operator pos:start="2224:66" pos:end="2224:66">)</operator></expr></init></decl>;</decl_stmt>
                <expr_stmt pos:start="2225:17" pos:end="2225:57"><expr pos:start="2225:17" pos:end="2225:56"><call pos:start="2225:17" pos:end="2225:56"><name pos:start="2225:17" pos:end="2225:30">tcg_gen_ori_tl</name><argument_list pos:start="2225:31" pos:end="2225:56">(<argument pos:start="2225:32" pos:end="2225:39"><expr pos:start="2225:32" pos:end="2225:39"><name pos:start="2225:32" pos:end="2225:39"><name pos:start="2225:32" pos:end="2225:36">cpu_T</name><index pos:start="2225:37" pos:end="2225:39">[<expr pos:start="2225:38" pos:end="2225:38"><literal type="number" pos:start="2225:38" pos:end="2225:38">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2225:42" pos:end="2225:49"><expr pos:start="2225:42" pos:end="2225:49"><name pos:start="2225:42" pos:end="2225:49"><name pos:start="2225:42" pos:end="2225:46">cpu_T</name><index pos:start="2225:47" pos:end="2225:49">[<expr pos:start="2225:48" pos:end="2225:48"><literal type="number" pos:start="2225:48" pos:end="2225:48">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2225:52" pos:end="2225:55"><expr pos:start="2225:52" pos:end="2225:55"><name pos:start="2225:52" pos:end="2225:55">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2226:17" pos:end="2226:51"><expr pos:start="2226:17" pos:end="2226:50"><call pos:start="2226:17" pos:end="2226:50"><name pos:start="2226:17" pos:end="2226:30">gen_helper_ctz</name><argument_list pos:start="2226:31" pos:end="2226:50">(<argument pos:start="2226:32" pos:end="2226:39"><expr pos:start="2226:32" pos:end="2226:39"><name pos:start="2226:32" pos:end="2226:39"><name pos:start="2226:32" pos:end="2226:36">cpu_T</name><index pos:start="2226:37" pos:end="2226:39">[<expr pos:start="2226:38" pos:end="2226:38"><literal type="number" pos:start="2226:38" pos:end="2226:38">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2226:42" pos:end="2226:49"><expr pos:start="2226:42" pos:end="2226:49"><name pos:start="2226:42" pos:end="2226:49"><name pos:start="2226:42" pos:end="2226:46">cpu_T</name><index pos:start="2226:47" pos:end="2226:49">[<expr pos:start="2226:48" pos:end="2226:48"><literal type="number" pos:start="2226:48" pos:end="2226:48">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block" pos:start="2227:13" pos:end="2228:41">/* For lzcnt/tzcnt, C and Z bits are defined and are
               related to the result.  */</comment>
            <expr_stmt pos:start="2229:13" pos:end="2229:32"><expr pos:start="2229:13" pos:end="2229:31"><call pos:start="2229:13" pos:end="2229:31"><name pos:start="2229:13" pos:end="2229:29">gen_op_update1_cc</name><argument_list pos:start="2229:30" pos:end="2229:31">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2230:13" pos:end="2230:44"><expr pos:start="2230:13" pos:end="2230:43"><call pos:start="2230:13" pos:end="2230:43"><name pos:start="2230:13" pos:end="2230:21">set_cc_op</name><argument_list pos:start="2230:22" pos:end="2230:43">(<argument pos:start="2230:23" pos:end="2230:23"><expr pos:start="2230:23" pos:end="2230:23"><name pos:start="2230:23" pos:end="2230:23">s</name></expr></argument>, <argument pos:start="2230:26" pos:end="2230:42"><expr pos:start="2230:26" pos:end="2230:42"><name pos:start="2230:26" pos:end="2230:37">CC_OP_BMILGB</name> <operator pos:start="2230:39" pos:end="2230:39">+</operator> <name pos:start="2230:41" pos:end="2230:42">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt> <if_stmt pos:start="2231:11" pos:end="3141:17"><else pos:start="2231:11" pos:end="3141:17">else <block pos:start="2231:16" pos:end="3141:17">{<block_content pos:start="2234:13" pos:end="3141:17">
            <comment type="block" pos:start="2232:13" pos:end="2233:51">/* For bsr/bsf, only the Z bit is defined and it is related
               to the input and not the result.  */</comment>
            <expr_stmt pos:start="2234:13" pos:end="2234:49"><expr pos:start="2234:13" pos:end="2234:48"><call pos:start="2234:13" pos:end="2234:48"><name pos:start="2234:13" pos:end="2234:26">tcg_gen_mov_tl</name><argument_list pos:start="2234:27" pos:end="2234:48">(<argument pos:start="2234:28" pos:end="2234:37"><expr pos:start="2234:28" pos:end="2234:37"><name pos:start="2234:28" pos:end="2234:37">cpu_cc_dst</name></expr></argument>, <argument pos:start="2234:40" pos:end="2234:47"><expr pos:start="2234:40" pos:end="2234:47"><name pos:start="2234:40" pos:end="2234:47"><name pos:start="2234:40" pos:end="2234:44">cpu_T</name><index pos:start="2234:45" pos:end="2234:47">[<expr pos:start="2234:46" pos:end="2234:46"><literal type="number" pos:start="2234:46" pos:end="2234:46">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2235:13" pos:end="2235:44"><expr pos:start="2235:13" pos:end="2235:43"><call pos:start="2235:13" pos:end="2235:43"><name pos:start="2235:13" pos:end="2235:21">set_cc_op</name><argument_list pos:start="2235:22" pos:end="2235:43">(<argument pos:start="2235:23" pos:end="2235:23"><expr pos:start="2235:23" pos:end="2235:23"><name pos:start="2235:23" pos:end="2235:23">s</name></expr></argument>, <argument pos:start="2235:26" pos:end="2235:42"><expr pos:start="2235:26" pos:end="2235:42"><name pos:start="2235:26" pos:end="2235:37">CC_OP_LOGICB</name> <operator pos:start="2235:39" pos:end="2235:39">+</operator> <name pos:start="2235:41" pos:end="2235:42">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="2236:13" pos:end="3141:17"><if pos:start="2236:13" pos:end="2241:13">if <condition pos:start="2236:16" pos:end="2236:22">(<expr pos:start="2236:17" pos:end="2236:21"><name pos:start="2236:17" pos:end="2236:17">b</name> <operator pos:start="2236:19" pos:end="2236:19">&amp;</operator> <literal type="number" pos:start="2236:21" pos:end="2236:21">1</literal></expr>)</condition> <block pos:start="2236:24" pos:end="2241:13">{<block_content pos:start="2239:17" pos:end="2240:74">
                <comment type="block" pos:start="2237:17" pos:end="2238:54">/* For bsr, return the bit index of the first 1 bit,
                   not the count of leading zeros.  */</comment>
                <expr_stmt pos:start="2239:17" pos:end="2239:51"><expr pos:start="2239:17" pos:end="2239:50"><call pos:start="2239:17" pos:end="2239:50"><name pos:start="2239:17" pos:end="2239:30">gen_helper_clz</name><argument_list pos:start="2239:31" pos:end="2239:50">(<argument pos:start="2239:32" pos:end="2239:39"><expr pos:start="2239:32" pos:end="2239:39"><name pos:start="2239:32" pos:end="2239:39"><name pos:start="2239:32" pos:end="2239:36">cpu_T</name><index pos:start="2239:37" pos:end="2239:39">[<expr pos:start="2239:38" pos:end="2239:38"><literal type="number" pos:start="2239:38" pos:end="2239:38">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2239:42" pos:end="2239:49"><expr pos:start="2239:42" pos:end="2239:49"><name pos:start="2239:42" pos:end="2239:49"><name pos:start="2239:42" pos:end="2239:46">cpu_T</name><index pos:start="2239:47" pos:end="2239:49">[<expr pos:start="2239:48" pos:end="2239:48"><literal type="number" pos:start="2239:48" pos:end="2239:48">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2240:17" pos:end="2240:74"><expr pos:start="2240:17" pos:end="2240:73"><call pos:start="2240:17" pos:end="2240:73"><name pos:start="2240:17" pos:end="2240:31">tcg_gen_xori_tl</name><argument_list pos:start="2240:32" pos:end="2240:73">(<argument pos:start="2240:33" pos:end="2240:40"><expr pos:start="2240:33" pos:end="2240:40"><name pos:start="2240:33" pos:end="2240:40"><name pos:start="2240:33" pos:end="2240:37">cpu_T</name><index pos:start="2240:38" pos:end="2240:40">[<expr pos:start="2240:39" pos:end="2240:39"><literal type="number" pos:start="2240:39" pos:end="2240:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2240:43" pos:end="2240:50"><expr pos:start="2240:43" pos:end="2240:50"><name pos:start="2240:43" pos:end="2240:50"><name pos:start="2240:43" pos:end="2240:47">cpu_T</name><index pos:start="2240:48" pos:end="2240:50">[<expr pos:start="2240:49" pos:end="2240:49"><literal type="number" pos:start="2240:49" pos:end="2240:49">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2240:53" pos:end="2240:72"><expr pos:start="2240:53" pos:end="2240:72"><name pos:start="2240:53" pos:end="2240:68">TARGET_LONG_BITS</name> <operator pos:start="2240:70" pos:end="2240:70">-</operator> <literal type="number" pos:start="2240:72" pos:end="2240:72">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="2241:15" pos:end="3141:17">else <block pos:start="2241:20" pos:end="3141:17">{<block_content pos:start="2242:17" pos:end="3141:17">
                <expr_stmt pos:start="2242:17" pos:end="2242:51"><expr pos:start="2242:17" pos:end="2242:50"><call pos:start="2242:17" pos:end="2242:50"><name pos:start="2242:17" pos:end="2242:30">gen_helper_ctz</name><argument_list pos:start="2242:31" pos:end="2242:50">(<argument pos:start="2242:32" pos:end="2242:39"><expr pos:start="2242:32" pos:end="2242:39"><name pos:start="2242:32" pos:end="2242:39"><name pos:start="2242:32" pos:end="2242:36">cpu_T</name><index pos:start="2242:37" pos:end="2242:39">[<expr pos:start="2242:38" pos:end="2242:38"><literal type="number" pos:start="2242:38" pos:end="2242:38">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2242:42" pos:end="2242:49"><expr pos:start="2242:42" pos:end="2242:49"><name pos:start="2242:42" pos:end="2242:49"><name pos:start="2242:42" pos:end="2242:46">cpu_T</name><index pos:start="2242:47" pos:end="2242:49">[<expr pos:start="2242:48" pos:end="2242:48"><literal type="number" pos:start="2242:48" pos:end="2242:48">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block" pos:start="2243:13" pos:end="2245:58">/* ??? The manual says that the output is undefined when the
               input is zero, but real hardware leaves it unchanged, and
               real programs appear to depend on that.  */</comment>
            <expr_stmt pos:start="2246:13" pos:end="2246:41"><expr pos:start="2246:13" pos:end="2246:40"><call pos:start="2246:13" pos:end="2246:40"><name pos:start="2246:13" pos:end="2246:27">tcg_gen_movi_tl</name><argument_list pos:start="2246:28" pos:end="2246:40">(<argument pos:start="2246:29" pos:end="2246:36"><expr pos:start="2246:29" pos:end="2246:36"><name pos:start="2246:29" pos:end="2246:36">cpu_tmp0</name></expr></argument>, <argument pos:start="2246:39" pos:end="2246:39"><expr pos:start="2246:39" pos:end="2246:39"><literal type="number" pos:start="2246:39" pos:end="2246:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2247:13" pos:end="2248:56"><expr pos:start="2247:13" pos:end="2248:55"><call pos:start="2247:13" pos:end="2248:55"><name pos:start="2247:13" pos:end="2247:30">tcg_gen_movcond_tl</name><argument_list pos:start="2247:31" pos:end="2248:55">(<argument pos:start="2247:32" pos:end="2247:42"><expr pos:start="2247:32" pos:end="2247:42"><name pos:start="2247:32" pos:end="2247:42">TCG_COND_EQ</name></expr></argument>, <argument pos:start="2247:45" pos:end="2247:52"><expr pos:start="2247:45" pos:end="2247:52"><name pos:start="2247:45" pos:end="2247:52"><name pos:start="2247:45" pos:end="2247:49">cpu_T</name><index pos:start="2247:50" pos:end="2247:52">[<expr pos:start="2247:51" pos:end="2247:51"><literal type="number" pos:start="2247:51" pos:end="2247:51">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2247:55" pos:end="2247:64"><expr pos:start="2247:55" pos:end="2247:64"><name pos:start="2247:55" pos:end="2247:64">cpu_cc_dst</name></expr></argument>, <argument pos:start="2247:67" pos:end="2247:74"><expr pos:start="2247:67" pos:end="2247:74"><name pos:start="2247:67" pos:end="2247:74">cpu_tmp0</name></expr></argument>,
                               <argument pos:start="2248:32" pos:end="2248:44"><expr pos:start="2248:32" pos:end="2248:44"><name pos:start="2248:32" pos:end="2248:44"><name pos:start="2248:32" pos:end="2248:39">cpu_regs</name><index pos:start="2248:40" pos:end="2248:44">[<expr pos:start="2248:41" pos:end="2248:43"><name pos:start="2248:41" pos:end="2248:43">reg</name></expr>]</index></name></expr></argument>, <argument pos:start="2248:47" pos:end="2248:54"><expr pos:start="2248:47" pos:end="2248:54"><name pos:start="2248:47" pos:end="2248:54"><name pos:start="2248:47" pos:end="2248:51">cpu_T</name><index pos:start="2248:52" pos:end="2248:54">[<expr pos:start="2248:53" pos:end="2248:53"><literal type="number" pos:start="2248:53" pos:end="2248:53">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2249:9" pos:end="2249:35"><expr pos:start="2249:9" pos:end="2249:34"><call pos:start="2249:9" pos:end="2249:34"><name pos:start="2249:9" pos:end="2249:25">gen_op_mov_reg_T0</name><argument_list pos:start="2249:26" pos:end="2249:34">(<argument pos:start="2249:27" pos:end="2249:28"><expr pos:start="2249:27" pos:end="2249:28"><name pos:start="2249:27" pos:end="2249:28">ot</name></expr></argument>, <argument pos:start="2249:31" pos:end="2249:33"><expr pos:start="2249:31" pos:end="2249:33"><name pos:start="2249:31" pos:end="2249:33">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="2250:9" pos:end="2250:14">break;</break>
        <comment type="block" format="doxygen" pos:start="2251:9" pos:end="2251:34">/************************/</comment>
        <comment type="block" pos:start="2252:9" pos:end="2252:17">/* bcd */</comment>
    <case pos:start="2253:5" pos:end="2253:14">case <expr pos:start="2253:10" pos:end="2253:13"><literal type="number" pos:start="2253:10" pos:end="2253:13">0x27</literal></expr>:</case> <comment type="block" pos:start="2253:16" pos:end="2253:24">/* daa */</comment>
        <if_stmt pos:start="2254:9" pos:end="2255:28"><if pos:start="2254:9" pos:end="2255:28">if <condition pos:start="2254:12" pos:end="2254:22">(<expr pos:start="2254:13" pos:end="2254:21"><call pos:start="2254:13" pos:end="2254:21"><name pos:start="2254:13" pos:end="2254:18">CODE64</name><argument_list pos:start="2254:19" pos:end="2254:21">(<argument pos:start="2254:20" pos:end="2254:20"><expr pos:start="2254:20" pos:end="2254:20"><name pos:start="2254:20" pos:end="2254:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2255:9" pos:end="2255:28"><block_content pos:start="2255:9" pos:end="2255:28">
        <expr_stmt pos:start="2255:9" pos:end="2255:28"><expr pos:start="2255:9" pos:end="2255:27"><call pos:start="2255:9" pos:end="2255:27"><name pos:start="2255:9" pos:end="2255:24">gen_update_cc_op</name><argument_list pos:start="2255:25" pos:end="2255:27">(<argument pos:start="2255:26" pos:end="2255:26"><expr pos:start="2255:26" pos:end="2255:26"><name pos:start="2255:26" pos:end="2255:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="2256:9" pos:end="2256:32"><expr pos:start="2256:9" pos:end="2256:31"><call pos:start="2256:9" pos:end="2256:31"><name pos:start="2256:9" pos:end="2256:22">gen_helper_daa</name><argument_list pos:start="2256:23" pos:end="2256:31">(<argument pos:start="2256:24" pos:end="2256:30"><expr pos:start="2256:24" pos:end="2256:30"><name pos:start="2256:24" pos:end="2256:30">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2257:9" pos:end="2257:35"><expr pos:start="2257:9" pos:end="2257:34"><call pos:start="2257:9" pos:end="2257:34"><name pos:start="2257:9" pos:end="2257:17">set_cc_op</name><argument_list pos:start="2257:18" pos:end="2257:34">(<argument pos:start="2257:19" pos:end="2257:19"><expr pos:start="2257:19" pos:end="2257:19"><name pos:start="2257:19" pos:end="2257:19">s</name></expr></argument>, <argument pos:start="2257:22" pos:end="2257:33"><expr pos:start="2257:22" pos:end="2257:33"><name pos:start="2257:22" pos:end="2257:33">CC_OP_EFLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="2258:9" pos:end="2258:14">break;</break>
    <case pos:start="2259:5" pos:end="2259:14">case <expr pos:start="2259:10" pos:end="2259:13"><literal type="number" pos:start="2259:10" pos:end="2259:13">0x2f</literal></expr>:</case> <comment type="block" pos:start="2259:16" pos:end="2259:24">/* das */</comment>
        <if_stmt pos:start="2260:9" pos:end="2261:28"><if pos:start="2260:9" pos:end="2261:28">if <condition pos:start="2260:12" pos:end="2260:22">(<expr pos:start="2260:13" pos:end="2260:21"><call pos:start="2260:13" pos:end="2260:21"><name pos:start="2260:13" pos:end="2260:18">CODE64</name><argument_list pos:start="2260:19" pos:end="2260:21">(<argument pos:start="2260:20" pos:end="2260:20"><expr pos:start="2260:20" pos:end="2260:20"><name pos:start="2260:20" pos:end="2260:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2261:9" pos:end="2261:28"><block_content pos:start="2261:9" pos:end="2261:28">
        <expr_stmt pos:start="2261:9" pos:end="2261:28"><expr pos:start="2261:9" pos:end="2261:27"><call pos:start="2261:9" pos:end="2261:27"><name pos:start="2261:9" pos:end="2261:24">gen_update_cc_op</name><argument_list pos:start="2261:25" pos:end="2261:27">(<argument pos:start="2261:26" pos:end="2261:26"><expr pos:start="2261:26" pos:end="2261:26"><name pos:start="2261:26" pos:end="2261:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="2262:9" pos:end="2262:32"><expr pos:start="2262:9" pos:end="2262:31"><call pos:start="2262:9" pos:end="2262:31"><name pos:start="2262:9" pos:end="2262:22">gen_helper_das</name><argument_list pos:start="2262:23" pos:end="2262:31">(<argument pos:start="2262:24" pos:end="2262:30"><expr pos:start="2262:24" pos:end="2262:30"><name pos:start="2262:24" pos:end="2262:30">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2263:9" pos:end="2263:35"><expr pos:start="2263:9" pos:end="2263:34"><call pos:start="2263:9" pos:end="2263:34"><name pos:start="2263:9" pos:end="2263:17">set_cc_op</name><argument_list pos:start="2263:18" pos:end="2263:34">(<argument pos:start="2263:19" pos:end="2263:19"><expr pos:start="2263:19" pos:end="2263:19"><name pos:start="2263:19" pos:end="2263:19">s</name></expr></argument>, <argument pos:start="2263:22" pos:end="2263:33"><expr pos:start="2263:22" pos:end="2263:33"><name pos:start="2263:22" pos:end="2263:33">CC_OP_EFLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="2264:9" pos:end="2264:14">break;</break>
    <case pos:start="2265:5" pos:end="2265:14">case <expr pos:start="2265:10" pos:end="2265:13"><literal type="number" pos:start="2265:10" pos:end="2265:13">0x37</literal></expr>:</case> <comment type="block" pos:start="2265:16" pos:end="2265:24">/* aaa */</comment>
        <if_stmt pos:start="2266:9" pos:end="2267:28"><if pos:start="2266:9" pos:end="2267:28">if <condition pos:start="2266:12" pos:end="2266:22">(<expr pos:start="2266:13" pos:end="2266:21"><call pos:start="2266:13" pos:end="2266:21"><name pos:start="2266:13" pos:end="2266:18">CODE64</name><argument_list pos:start="2266:19" pos:end="2266:21">(<argument pos:start="2266:20" pos:end="2266:20"><expr pos:start="2266:20" pos:end="2266:20"><name pos:start="2266:20" pos:end="2266:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2267:9" pos:end="2267:28"><block_content pos:start="2267:9" pos:end="2267:28">
        <expr_stmt pos:start="2267:9" pos:end="2267:28"><expr pos:start="2267:9" pos:end="2267:27"><call pos:start="2267:9" pos:end="2267:27"><name pos:start="2267:9" pos:end="2267:24">gen_update_cc_op</name><argument_list pos:start="2267:25" pos:end="2267:27">(<argument pos:start="2267:26" pos:end="2267:26"><expr pos:start="2267:26" pos:end="2267:26"><name pos:start="2267:26" pos:end="2267:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="2268:9" pos:end="2268:32"><expr pos:start="2268:9" pos:end="2268:31"><call pos:start="2268:9" pos:end="2268:31"><name pos:start="2268:9" pos:end="2268:22">gen_helper_aaa</name><argument_list pos:start="2268:23" pos:end="2268:31">(<argument pos:start="2268:24" pos:end="2268:30"><expr pos:start="2268:24" pos:end="2268:30"><name pos:start="2268:24" pos:end="2268:30">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2269:9" pos:end="2269:35"><expr pos:start="2269:9" pos:end="2269:34"><call pos:start="2269:9" pos:end="2269:34"><name pos:start="2269:9" pos:end="2269:17">set_cc_op</name><argument_list pos:start="2269:18" pos:end="2269:34">(<argument pos:start="2269:19" pos:end="2269:19"><expr pos:start="2269:19" pos:end="2269:19"><name pos:start="2269:19" pos:end="2269:19">s</name></expr></argument>, <argument pos:start="2269:22" pos:end="2269:33"><expr pos:start="2269:22" pos:end="2269:33"><name pos:start="2269:22" pos:end="2269:33">CC_OP_EFLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="2270:9" pos:end="2270:14">break;</break>
    <case pos:start="2271:5" pos:end="2271:14">case <expr pos:start="2271:10" pos:end="2271:13"><literal type="number" pos:start="2271:10" pos:end="2271:13">0x3f</literal></expr>:</case> <comment type="block" pos:start="2271:16" pos:end="2271:24">/* aas */</comment>
        <if_stmt pos:start="2272:9" pos:end="2273:28"><if pos:start="2272:9" pos:end="2273:28">if <condition pos:start="2272:12" pos:end="2272:22">(<expr pos:start="2272:13" pos:end="2272:21"><call pos:start="2272:13" pos:end="2272:21"><name pos:start="2272:13" pos:end="2272:18">CODE64</name><argument_list pos:start="2272:19" pos:end="2272:21">(<argument pos:start="2272:20" pos:end="2272:20"><expr pos:start="2272:20" pos:end="2272:20"><name pos:start="2272:20" pos:end="2272:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2273:9" pos:end="2273:28"><block_content pos:start="2273:9" pos:end="2273:28">
        <expr_stmt pos:start="2273:9" pos:end="2273:28"><expr pos:start="2273:9" pos:end="2273:27"><call pos:start="2273:9" pos:end="2273:27"><name pos:start="2273:9" pos:end="2273:24">gen_update_cc_op</name><argument_list pos:start="2273:25" pos:end="2273:27">(<argument pos:start="2273:26" pos:end="2273:26"><expr pos:start="2273:26" pos:end="2273:26"><name pos:start="2273:26" pos:end="2273:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="2274:9" pos:end="2274:32"><expr pos:start="2274:9" pos:end="2274:31"><call pos:start="2274:9" pos:end="2274:31"><name pos:start="2274:9" pos:end="2274:22">gen_helper_aas</name><argument_list pos:start="2274:23" pos:end="2274:31">(<argument pos:start="2274:24" pos:end="2274:30"><expr pos:start="2274:24" pos:end="2274:30"><name pos:start="2274:24" pos:end="2274:30">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2275:9" pos:end="2275:35"><expr pos:start="2275:9" pos:end="2275:34"><call pos:start="2275:9" pos:end="2275:34"><name pos:start="2275:9" pos:end="2275:17">set_cc_op</name><argument_list pos:start="2275:18" pos:end="2275:34">(<argument pos:start="2275:19" pos:end="2275:19"><expr pos:start="2275:19" pos:end="2275:19"><name pos:start="2275:19" pos:end="2275:19">s</name></expr></argument>, <argument pos:start="2275:22" pos:end="2275:33"><expr pos:start="2275:22" pos:end="2275:33"><name pos:start="2275:22" pos:end="2275:33">CC_OP_EFLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="2276:9" pos:end="2276:14">break;</break>
    <case pos:start="2277:5" pos:end="2277:14">case <expr pos:start="2277:10" pos:end="2277:13"><literal type="number" pos:start="2277:10" pos:end="2277:13">0xd4</literal></expr>:</case> <comment type="block" pos:start="2277:16" pos:end="2277:24">/* aam */</comment>
        <if_stmt pos:start="2278:9" pos:end="2279:42"><if pos:start="2278:9" pos:end="2279:42">if <condition pos:start="2278:12" pos:end="2278:22">(<expr pos:start="2278:13" pos:end="2278:21"><call pos:start="2278:13" pos:end="2278:21"><name pos:start="2278:13" pos:end="2278:18">CODE64</name><argument_list pos:start="2278:19" pos:end="2278:21">(<argument pos:start="2278:20" pos:end="2278:20"><expr pos:start="2278:20" pos:end="2278:20"><name pos:start="2278:20" pos:end="2278:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2279:9" pos:end="2279:42"><block_content pos:start="2279:9" pos:end="2279:42">
        <expr_stmt pos:start="2279:9" pos:end="2279:42"><expr pos:start="2279:9" pos:end="2279:41"><name pos:start="2279:9" pos:end="2279:11">val</name> <operator pos:start="2279:13" pos:end="2279:13">=</operator> <call pos:start="2279:15" pos:end="2279:41"><name pos:start="2279:15" pos:end="2279:27">cpu_ldub_code</name><argument_list pos:start="2279:28" pos:end="2279:41">(<argument pos:start="2279:29" pos:end="2279:31"><expr pos:start="2279:29" pos:end="2279:31"><name pos:start="2279:29" pos:end="2279:31">env</name></expr></argument>, <argument pos:start="2279:34" pos:end="2279:40"><expr pos:start="2279:34" pos:end="2279:40"><name pos:start="2279:34" pos:end="2279:38"><name pos:start="2279:34" pos:end="2279:34">s</name><operator pos:start="2279:35" pos:end="2279:36">-&gt;</operator><name pos:start="2279:37" pos:end="2279:38">pc</name></name><operator pos:start="2279:39" pos:end="2279:40">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt pos:start="2280:9" pos:end="3141:17"><if pos:start="2280:9" pos:end="2282:9">if <condition pos:start="2280:12" pos:end="2280:21">(<expr pos:start="2280:13" pos:end="2280:20"><name pos:start="2280:13" pos:end="2280:15">val</name> <operator pos:start="2280:17" pos:end="2280:18">==</operator> <literal type="number" pos:start="2280:20" pos:end="2280:20">0</literal></expr>)</condition> <block pos:start="2280:23" pos:end="2282:9">{<block_content pos:start="2281:13" pos:end="2281:65">
            <expr_stmt pos:start="2281:13" pos:end="2281:65"><expr pos:start="2281:13" pos:end="2281:64"><call pos:start="2281:13" pos:end="2281:64"><name pos:start="2281:13" pos:end="2281:25">gen_exception</name><argument_list pos:start="2281:26" pos:end="2281:64">(<argument pos:start="2281:27" pos:end="2281:27"><expr pos:start="2281:27" pos:end="2281:27"><name pos:start="2281:27" pos:end="2281:27">s</name></expr></argument>, <argument pos:start="2281:30" pos:end="2281:40"><expr pos:start="2281:30" pos:end="2281:40"><name pos:start="2281:30" pos:end="2281:40">EXCP00_DIVZ</name></expr></argument>, <argument pos:start="2281:43" pos:end="2281:63"><expr pos:start="2281:43" pos:end="2281:63"><name pos:start="2281:43" pos:end="2281:50">pc_start</name> <operator pos:start="2281:52" pos:end="2281:52">-</operator> <name pos:start="2281:54" pos:end="2281:63"><name pos:start="2281:54" pos:end="2281:54">s</name><operator pos:start="2281:55" pos:end="2281:56">-&gt;</operator><name pos:start="2281:57" pos:end="2281:63">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="2282:11" pos:end="3141:17">else <block pos:start="2282:16" pos:end="3141:17">{<block_content pos:start="2283:13" pos:end="3141:17">
            <expr_stmt pos:start="2283:13" pos:end="2283:56"><expr pos:start="2283:13" pos:end="2283:55"><call pos:start="2283:13" pos:end="2283:55"><name pos:start="2283:13" pos:end="2283:26">gen_helper_aam</name><argument_list pos:start="2283:27" pos:end="2283:55">(<argument pos:start="2283:28" pos:end="2283:34"><expr pos:start="2283:28" pos:end="2283:34"><name pos:start="2283:28" pos:end="2283:34">cpu_env</name></expr></argument>, <argument pos:start="2283:37" pos:end="2283:54"><expr pos:start="2283:37" pos:end="2283:54"><call pos:start="2283:37" pos:end="2283:54"><name pos:start="2283:37" pos:end="2283:49">tcg_const_i32</name><argument_list pos:start="2283:50" pos:end="2283:54">(<argument pos:start="2283:51" pos:end="2283:53"><expr pos:start="2283:51" pos:end="2283:53"><name pos:start="2283:51" pos:end="2283:53">val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2284:13" pos:end="2284:39"><expr pos:start="2284:13" pos:end="2284:38"><call pos:start="2284:13" pos:end="2284:38"><name pos:start="2284:13" pos:end="2284:21">set_cc_op</name><argument_list pos:start="2284:22" pos:end="2284:38">(<argument pos:start="2284:23" pos:end="2284:23"><expr pos:start="2284:23" pos:end="2284:23"><name pos:start="2284:23" pos:end="2284:23">s</name></expr></argument>, <argument pos:start="2284:26" pos:end="2284:37"><expr pos:start="2284:26" pos:end="2284:37"><name pos:start="2284:26" pos:end="2284:37">CC_OP_LOGICB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="2285:9" pos:end="2285:14">break;</break>
    <case pos:start="2286:5" pos:end="2286:14">case <expr pos:start="2286:10" pos:end="2286:13"><literal type="number" pos:start="2286:10" pos:end="2286:13">0xd5</literal></expr>:</case> <comment type="block" pos:start="2286:16" pos:end="2286:24">/* aad */</comment>
        <if_stmt pos:start="2287:9" pos:end="2288:42"><if pos:start="2287:9" pos:end="2288:42">if <condition pos:start="2287:12" pos:end="2287:22">(<expr pos:start="2287:13" pos:end="2287:21"><call pos:start="2287:13" pos:end="2287:21"><name pos:start="2287:13" pos:end="2287:18">CODE64</name><argument_list pos:start="2287:19" pos:end="2287:21">(<argument pos:start="2287:20" pos:end="2287:20"><expr pos:start="2287:20" pos:end="2287:20"><name pos:start="2287:20" pos:end="2287:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2288:9" pos:end="2288:42"><block_content pos:start="2288:9" pos:end="2288:42">
        <expr_stmt pos:start="2288:9" pos:end="2288:42"><expr pos:start="2288:9" pos:end="2288:41"><name pos:start="2288:9" pos:end="2288:11">val</name> <operator pos:start="2288:13" pos:end="2288:13">=</operator> <call pos:start="2288:15" pos:end="2288:41"><name pos:start="2288:15" pos:end="2288:27">cpu_ldub_code</name><argument_list pos:start="2288:28" pos:end="2288:41">(<argument pos:start="2288:29" pos:end="2288:31"><expr pos:start="2288:29" pos:end="2288:31"><name pos:start="2288:29" pos:end="2288:31">env</name></expr></argument>, <argument pos:start="2288:34" pos:end="2288:40"><expr pos:start="2288:34" pos:end="2288:40"><name pos:start="2288:34" pos:end="2288:38"><name pos:start="2288:34" pos:end="2288:34">s</name><operator pos:start="2288:35" pos:end="2288:36">-&gt;</operator><name pos:start="2288:37" pos:end="2288:38">pc</name></name><operator pos:start="2288:39" pos:end="2288:40">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="2289:9" pos:end="2289:52"><expr pos:start="2289:9" pos:end="2289:51"><call pos:start="2289:9" pos:end="2289:51"><name pos:start="2289:9" pos:end="2289:22">gen_helper_aad</name><argument_list pos:start="2289:23" pos:end="2289:51">(<argument pos:start="2289:24" pos:end="2289:30"><expr pos:start="2289:24" pos:end="2289:30"><name pos:start="2289:24" pos:end="2289:30">cpu_env</name></expr></argument>, <argument pos:start="2289:33" pos:end="2289:50"><expr pos:start="2289:33" pos:end="2289:50"><call pos:start="2289:33" pos:end="2289:50"><name pos:start="2289:33" pos:end="2289:45">tcg_const_i32</name><argument_list pos:start="2289:46" pos:end="2289:50">(<argument pos:start="2289:47" pos:end="2289:49"><expr pos:start="2289:47" pos:end="2289:49"><name pos:start="2289:47" pos:end="2289:49">val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2290:9" pos:end="2290:35"><expr pos:start="2290:9" pos:end="2290:34"><call pos:start="2290:9" pos:end="2290:34"><name pos:start="2290:9" pos:end="2290:17">set_cc_op</name><argument_list pos:start="2290:18" pos:end="2290:34">(<argument pos:start="2290:19" pos:end="2290:19"><expr pos:start="2290:19" pos:end="2290:19"><name pos:start="2290:19" pos:end="2290:19">s</name></expr></argument>, <argument pos:start="2290:22" pos:end="2290:33"><expr pos:start="2290:22" pos:end="2290:33"><name pos:start="2290:22" pos:end="2290:33">CC_OP_LOGICB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="2291:9" pos:end="2291:14">break;</break>
        <comment type="block" format="doxygen" pos:start="2292:9" pos:end="2292:34">/************************/</comment>
        <comment type="block" pos:start="2293:9" pos:end="2293:18">/* misc */</comment>
    <case pos:start="2294:5" pos:end="2294:14">case <expr pos:start="2294:10" pos:end="2294:13"><literal type="number" pos:start="2294:10" pos:end="2294:13">0x90</literal></expr>:</case> <comment type="block" pos:start="2294:16" pos:end="2294:24">/* nop */</comment>
        <comment type="block" pos:start="2295:9" pos:end="2295:49">/* XXX: correct lock test for all insn */</comment>
        <if_stmt pos:start="2296:9" pos:end="3141:17"><if pos:start="2296:9" pos:end="3141:17">if <condition pos:start="2296:12" pos:end="2296:35">(<expr pos:start="2296:13" pos:end="2296:34"><name pos:start="2296:13" pos:end="2296:20">prefixes</name> <operator pos:start="2296:22" pos:end="2296:22">&amp;</operator> <name pos:start="2296:24" pos:end="2296:34">PREFIX_LOCK</name></expr>)</condition> <block pos:start="2296:37" pos:end="3141:17">{<block_content pos:start="2298:9" pos:end="3141:17">
        <comment type="block" pos:start="2297:9" pos:end="2297:70">/* If REX_B is set, then this is xchg eax, r8d, not a nop.  */</comment>
        <if_stmt pos:start="2298:9" pos:end="3141:17"><if pos:start="2298:9" pos:end="3141:17">if <condition pos:start="2298:12" pos:end="2298:21">(<expr pos:start="2298:13" pos:end="2298:20"><call pos:start="2298:13" pos:end="2298:20"><name pos:start="2298:13" pos:end="2298:17">REX_B</name><argument_list pos:start="2298:18" pos:end="2298:20">(<argument pos:start="2298:19" pos:end="2298:19"><expr pos:start="2298:19" pos:end="2298:19"><name pos:start="2298:19" pos:end="2298:19">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2298:23" pos:end="3141:17">{<block_content pos:start="2299:13" pos:end="3141:17">
            <goto pos:start="2299:13" pos:end="2299:33">goto <name pos:start="2299:18" pos:end="2299:32">do_xchg_reg_eax</name>;</goto>
        <if_stmt pos:start="2300:9" pos:end="3141:17"><if pos:start="2300:9" pos:end="3141:17">if <condition pos:start="2300:12" pos:end="2300:35">(<expr pos:start="2300:13" pos:end="2300:34"><name pos:start="2300:13" pos:end="2300:20">prefixes</name> <operator pos:start="2300:22" pos:end="2300:22">&amp;</operator> <name pos:start="2300:24" pos:end="2300:34">PREFIX_REPZ</name></expr>)</condition> <block pos:start="2300:37" pos:end="3141:17">{<block_content pos:start="2301:13" pos:end="3141:17">
            <expr_stmt pos:start="2301:13" pos:end="2301:65"><expr pos:start="2301:13" pos:end="2301:64"><call pos:start="2301:13" pos:end="2301:64"><name pos:start="2301:13" pos:end="2301:35">gen_svm_check_intercept</name><argument_list pos:start="2301:36" pos:end="2301:64">(<argument pos:start="2301:37" pos:end="2301:37"><expr pos:start="2301:37" pos:end="2301:37"><name pos:start="2301:37" pos:end="2301:37">s</name></expr></argument>, <argument pos:start="2301:40" pos:end="2301:47"><expr pos:start="2301:40" pos:end="2301:47"><name pos:start="2301:40" pos:end="2301:47">pc_start</name></expr></argument>, <argument pos:start="2301:50" pos:end="2301:63"><expr pos:start="2301:50" pos:end="2301:63"><name pos:start="2301:50" pos:end="2301:63">SVM_EXIT_PAUSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="2302:9" pos:end="2302:14">break;</break>
    <case pos:start="2303:5" pos:end="2303:14">case <expr pos:start="2303:10" pos:end="2303:13"><literal type="number" pos:start="2303:10" pos:end="2303:13">0x9b</literal></expr>:</case> <comment type="block" pos:start="2303:16" pos:end="2303:26">/* fwait */</comment>
        <if_stmt pos:start="2304:9" pos:end="3141:17"><if pos:start="2304:9" pos:end="2307:9">if <condition pos:start="2304:12" pos:end="2305:38">(<expr pos:start="2304:13" pos:end="2305:37"><operator pos:start="2304:13" pos:end="2304:13">(</operator><name pos:start="2304:14" pos:end="2304:21"><name pos:start="2304:14" pos:end="2304:14">s</name><operator pos:start="2304:15" pos:end="2304:16">-&gt;</operator><name pos:start="2304:17" pos:end="2304:21">flags</name></name> <operator pos:start="2304:23" pos:end="2304:23">&amp;</operator> <operator pos:start="2304:25" pos:end="2304:25">(</operator><name pos:start="2304:26" pos:end="2304:35">HF_MP_MASK</name> <operator pos:start="2304:37" pos:end="2304:37">|</operator> <name pos:start="2304:39" pos:end="2304:48">HF_TS_MASK</name><operator pos:start="2304:49" pos:end="2304:49">)</operator><operator pos:start="2304:50" pos:end="2304:50">)</operator> <operator pos:start="2304:52" pos:end="2304:53">==</operator>
            <operator pos:start="2305:13" pos:end="2305:13">(</operator><name pos:start="2305:14" pos:end="2305:23">HF_MP_MASK</name> <operator pos:start="2305:25" pos:end="2305:25">|</operator> <name pos:start="2305:27" pos:end="2305:36">HF_TS_MASK</name><operator pos:start="2305:37" pos:end="2305:37">)</operator></expr>)</condition> <block pos:start="2305:40" pos:end="2307:9">{<block_content pos:start="2306:13" pos:end="2306:65">
            <expr_stmt pos:start="2306:13" pos:end="2306:65"><expr pos:start="2306:13" pos:end="2306:64"><call pos:start="2306:13" pos:end="2306:64"><name pos:start="2306:13" pos:end="2306:25">gen_exception</name><argument_list pos:start="2306:26" pos:end="2306:64">(<argument pos:start="2306:27" pos:end="2306:27"><expr pos:start="2306:27" pos:end="2306:27"><name pos:start="2306:27" pos:end="2306:27">s</name></expr></argument>, <argument pos:start="2306:30" pos:end="2306:40"><expr pos:start="2306:30" pos:end="2306:40"><name pos:start="2306:30" pos:end="2306:40">EXCP07_PREX</name></expr></argument>, <argument pos:start="2306:43" pos:end="2306:63"><expr pos:start="2306:43" pos:end="2306:63"><name pos:start="2306:43" pos:end="2306:50">pc_start</name> <operator pos:start="2306:52" pos:end="2306:52">-</operator> <name pos:start="2306:54" pos:end="2306:63"><name pos:start="2306:54" pos:end="2306:54">s</name><operator pos:start="2306:55" pos:end="2306:56">-&gt;</operator><name pos:start="2306:57" pos:end="2306:63">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="2307:11" pos:end="3141:17">else <block pos:start="2307:16" pos:end="3141:17">{<block_content pos:start="2308:13" pos:end="3141:17">
            <expr_stmt pos:start="2308:13" pos:end="2308:32"><expr pos:start="2308:13" pos:end="2308:31"><call pos:start="2308:13" pos:end="2308:31"><name pos:start="2308:13" pos:end="2308:28">gen_update_cc_op</name><argument_list pos:start="2308:29" pos:end="2308:31">(<argument pos:start="2308:30" pos:end="2308:30"><expr pos:start="2308:30" pos:end="2308:30"><name pos:start="2308:30" pos:end="2308:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2309:13" pos:end="2309:46"><expr pos:start="2309:13" pos:end="2309:45"><call pos:start="2309:13" pos:end="2309:45"><name pos:start="2309:13" pos:end="2309:22">gen_jmp_im</name><argument_list pos:start="2309:23" pos:end="2309:45">(<argument pos:start="2309:24" pos:end="2309:44"><expr pos:start="2309:24" pos:end="2309:44"><name pos:start="2309:24" pos:end="2309:31">pc_start</name> <operator pos:start="2309:33" pos:end="2309:33">-</operator> <name pos:start="2309:35" pos:end="2309:44"><name pos:start="2309:35" pos:end="2309:35">s</name><operator pos:start="2309:36" pos:end="2309:37">-&gt;</operator><name pos:start="2309:38" pos:end="2309:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2310:13" pos:end="2310:38"><expr pos:start="2310:13" pos:end="2310:37"><call pos:start="2310:13" pos:end="2310:37"><name pos:start="2310:13" pos:end="2310:28">gen_helper_fwait</name><argument_list pos:start="2310:29" pos:end="2310:37">(<argument pos:start="2310:30" pos:end="2310:36"><expr pos:start="2310:30" pos:end="2310:36"><name pos:start="2310:30" pos:end="2310:36">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="2311:9" pos:end="2311:14">break;</break>
    <case pos:start="2312:5" pos:end="2312:14">case <expr pos:start="2312:10" pos:end="2312:13"><literal type="number" pos:start="2312:10" pos:end="2312:13">0xcc</literal></expr>:</case> <comment type="block" pos:start="2312:16" pos:end="2312:25">/* int3 */</comment>
        <expr_stmt pos:start="2313:9" pos:end="2313:81"><expr pos:start="2313:9" pos:end="2313:80"><call pos:start="2313:9" pos:end="2313:80"><name pos:start="2313:9" pos:end="2313:21">gen_interrupt</name><argument_list pos:start="2313:22" pos:end="2313:80">(<argument pos:start="2313:23" pos:end="2313:23"><expr pos:start="2313:23" pos:end="2313:23"><name pos:start="2313:23" pos:end="2313:23">s</name></expr></argument>, <argument pos:start="2313:26" pos:end="2313:36"><expr pos:start="2313:26" pos:end="2313:36"><name pos:start="2313:26" pos:end="2313:36">EXCP03_INT3</name></expr></argument>, <argument pos:start="2313:39" pos:end="2313:59"><expr pos:start="2313:39" pos:end="2313:59"><name pos:start="2313:39" pos:end="2313:46">pc_start</name> <operator pos:start="2313:48" pos:end="2313:48">-</operator> <name pos:start="2313:50" pos:end="2313:59"><name pos:start="2313:50" pos:end="2313:50">s</name><operator pos:start="2313:51" pos:end="2313:52">-&gt;</operator><name pos:start="2313:53" pos:end="2313:59">cs_base</name></name></expr></argument>, <argument pos:start="2313:62" pos:end="2313:79"><expr pos:start="2313:62" pos:end="2313:79"><name pos:start="2313:62" pos:end="2313:66"><name pos:start="2313:62" pos:end="2313:62">s</name><operator pos:start="2313:63" pos:end="2313:64">-&gt;</operator><name pos:start="2313:65" pos:end="2313:66">pc</name></name> <operator pos:start="2313:68" pos:end="2313:68">-</operator> <name pos:start="2313:70" pos:end="2313:79"><name pos:start="2313:70" pos:end="2313:70">s</name><operator pos:start="2313:71" pos:end="2313:72">-&gt;</operator><name pos:start="2313:73" pos:end="2313:79">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="2314:9" pos:end="2314:14">break;</break>
    <case pos:start="2315:5" pos:end="2315:14">case <expr pos:start="2315:10" pos:end="2315:13"><literal type="number" pos:start="2315:10" pos:end="2315:13">0xcd</literal></expr>:</case> <comment type="block" pos:start="2315:16" pos:end="2315:26">/* int N */</comment>
        <expr_stmt pos:start="2316:9" pos:end="2316:42"><expr pos:start="2316:9" pos:end="2316:41"><name pos:start="2316:9" pos:end="2316:11">val</name> <operator pos:start="2316:13" pos:end="2316:13">=</operator> <call pos:start="2316:15" pos:end="2316:41"><name pos:start="2316:15" pos:end="2316:27">cpu_ldub_code</name><argument_list pos:start="2316:28" pos:end="2316:41">(<argument pos:start="2316:29" pos:end="2316:31"><expr pos:start="2316:29" pos:end="2316:31"><name pos:start="2316:29" pos:end="2316:31">env</name></expr></argument>, <argument pos:start="2316:34" pos:end="2316:40"><expr pos:start="2316:34" pos:end="2316:40"><name pos:start="2316:34" pos:end="2316:38"><name pos:start="2316:34" pos:end="2316:34">s</name><operator pos:start="2316:35" pos:end="2316:36">-&gt;</operator><name pos:start="2316:37" pos:end="2316:38">pc</name></name><operator pos:start="2316:39" pos:end="2316:40">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="2317:9" pos:end="3141:17"><if pos:start="2317:9" pos:end="2319:9">if <condition pos:start="2317:12" pos:end="2317:36">(<expr pos:start="2317:13" pos:end="2317:35"><name pos:start="2317:13" pos:end="2317:19"><name pos:start="2317:13" pos:end="2317:13">s</name><operator pos:start="2317:14" pos:end="2317:15">-&gt;</operator><name pos:start="2317:16" pos:end="2317:19">vm86</name></name> <operator pos:start="2317:21" pos:end="2317:22">&amp;&amp;</operator> <name pos:start="2317:24" pos:end="2317:30"><name pos:start="2317:24" pos:end="2317:24">s</name><operator pos:start="2317:25" pos:end="2317:26">-&gt;</operator><name pos:start="2317:27" pos:end="2317:30">iopl</name></name> <operator pos:start="2317:32" pos:end="2317:33">!=</operator> <literal type="number" pos:start="2317:35" pos:end="2317:35">3</literal></expr>)</condition> <block pos:start="2317:38" pos:end="2319:9">{<block_content pos:start="2318:13" pos:end="2318:64">
            <expr_stmt pos:start="2318:13" pos:end="2318:64"><expr pos:start="2318:13" pos:end="2318:63"><call pos:start="2318:13" pos:end="2318:63"><name pos:start="2318:13" pos:end="2318:25">gen_exception</name><argument_list pos:start="2318:26" pos:end="2318:63">(<argument pos:start="2318:27" pos:end="2318:27"><expr pos:start="2318:27" pos:end="2318:27"><name pos:start="2318:27" pos:end="2318:27">s</name></expr></argument>, <argument pos:start="2318:30" pos:end="2318:39"><expr pos:start="2318:30" pos:end="2318:39"><name pos:start="2318:30" pos:end="2318:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="2318:42" pos:end="2318:62"><expr pos:start="2318:42" pos:end="2318:62"><name pos:start="2318:42" pos:end="2318:49">pc_start</name> <operator pos:start="2318:51" pos:end="2318:51">-</operator> <name pos:start="2318:53" pos:end="2318:62"><name pos:start="2318:53" pos:end="2318:53">s</name><operator pos:start="2318:54" pos:end="2318:55">-&gt;</operator><name pos:start="2318:56" pos:end="2318:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="2319:11" pos:end="3141:17">else <block pos:start="2319:16" pos:end="3141:17">{<block_content pos:start="2320:13" pos:end="3141:17">
            <expr_stmt pos:start="2320:13" pos:end="2320:77"><expr pos:start="2320:13" pos:end="2320:76"><call pos:start="2320:13" pos:end="2320:76"><name pos:start="2320:13" pos:end="2320:25">gen_interrupt</name><argument_list pos:start="2320:26" pos:end="2320:76">(<argument pos:start="2320:27" pos:end="2320:27"><expr pos:start="2320:27" pos:end="2320:27"><name pos:start="2320:27" pos:end="2320:27">s</name></expr></argument>, <argument pos:start="2320:30" pos:end="2320:32"><expr pos:start="2320:30" pos:end="2320:32"><name pos:start="2320:30" pos:end="2320:32">val</name></expr></argument>, <argument pos:start="2320:35" pos:end="2320:55"><expr pos:start="2320:35" pos:end="2320:55"><name pos:start="2320:35" pos:end="2320:42">pc_start</name> <operator pos:start="2320:44" pos:end="2320:44">-</operator> <name pos:start="2320:46" pos:end="2320:55"><name pos:start="2320:46" pos:end="2320:46">s</name><operator pos:start="2320:47" pos:end="2320:48">-&gt;</operator><name pos:start="2320:49" pos:end="2320:55">cs_base</name></name></expr></argument>, <argument pos:start="2320:58" pos:end="2320:75"><expr pos:start="2320:58" pos:end="2320:75"><name pos:start="2320:58" pos:end="2320:62"><name pos:start="2320:58" pos:end="2320:58">s</name><operator pos:start="2320:59" pos:end="2320:60">-&gt;</operator><name pos:start="2320:61" pos:end="2320:62">pc</name></name> <operator pos:start="2320:64" pos:end="2320:64">-</operator> <name pos:start="2320:66" pos:end="2320:75"><name pos:start="2320:66" pos:end="2320:66">s</name><operator pos:start="2320:67" pos:end="2320:68">-&gt;</operator><name pos:start="2320:69" pos:end="2320:75">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="2321:9" pos:end="2321:14">break;</break>
    <case pos:start="2322:5" pos:end="2322:14">case <expr pos:start="2322:10" pos:end="2322:13"><literal type="number" pos:start="2322:10" pos:end="2322:13">0xce</literal></expr>:</case> <comment type="block" pos:start="2322:16" pos:end="2322:25">/* into */</comment>
        <if_stmt pos:start="2323:9" pos:end="2324:28"><if pos:start="2323:9" pos:end="2324:28">if <condition pos:start="2323:12" pos:end="2323:22">(<expr pos:start="2323:13" pos:end="2323:21"><call pos:start="2323:13" pos:end="2323:21"><name pos:start="2323:13" pos:end="2323:18">CODE64</name><argument_list pos:start="2323:19" pos:end="2323:21">(<argument pos:start="2323:20" pos:end="2323:20"><expr pos:start="2323:20" pos:end="2323:20"><name pos:start="2323:20" pos:end="2323:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2324:9" pos:end="2324:28"><block_content pos:start="2324:9" pos:end="2324:28">
        <expr_stmt pos:start="2324:9" pos:end="2324:28"><expr pos:start="2324:9" pos:end="2324:27"><call pos:start="2324:9" pos:end="2324:27"><name pos:start="2324:9" pos:end="2324:24">gen_update_cc_op</name><argument_list pos:start="2324:25" pos:end="2324:27">(<argument pos:start="2324:26" pos:end="2324:26"><expr pos:start="2324:26" pos:end="2324:26"><name pos:start="2324:26" pos:end="2324:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="2325:9" pos:end="2325:42"><expr pos:start="2325:9" pos:end="2325:41"><call pos:start="2325:9" pos:end="2325:41"><name pos:start="2325:9" pos:end="2325:18">gen_jmp_im</name><argument_list pos:start="2325:19" pos:end="2325:41">(<argument pos:start="2325:20" pos:end="2325:40"><expr pos:start="2325:20" pos:end="2325:40"><name pos:start="2325:20" pos:end="2325:27">pc_start</name> <operator pos:start="2325:29" pos:end="2325:29">-</operator> <name pos:start="2325:31" pos:end="2325:40"><name pos:start="2325:31" pos:end="2325:31">s</name><operator pos:start="2325:32" pos:end="2325:33">-&gt;</operator><name pos:start="2325:34" pos:end="2325:40">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2326:9" pos:end="2326:66"><expr pos:start="2326:9" pos:end="2326:65"><call pos:start="2326:9" pos:end="2326:65"><name pos:start="2326:9" pos:end="2326:23">gen_helper_into</name><argument_list pos:start="2326:24" pos:end="2326:65">(<argument pos:start="2326:25" pos:end="2326:31"><expr pos:start="2326:25" pos:end="2326:31"><name pos:start="2326:25" pos:end="2326:31">cpu_env</name></expr></argument>, <argument pos:start="2326:34" pos:end="2326:64"><expr pos:start="2326:34" pos:end="2326:64"><call pos:start="2326:34" pos:end="2326:64"><name pos:start="2326:34" pos:end="2326:46">tcg_const_i32</name><argument_list pos:start="2326:47" pos:end="2326:64">(<argument pos:start="2326:48" pos:end="2326:63"><expr pos:start="2326:48" pos:end="2326:63"><name pos:start="2326:48" pos:end="2326:52"><name pos:start="2326:48" pos:end="2326:48">s</name><operator pos:start="2326:49" pos:end="2326:50">-&gt;</operator><name pos:start="2326:51" pos:end="2326:52">pc</name></name> <operator pos:start="2326:54" pos:end="2326:54">-</operator> <name pos:start="2326:56" pos:end="2326:63">pc_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="2327:9" pos:end="2329:0">break;</break>
<cpp:ifdef pos:start="2328:1" pos:end="2328:17">#<cpp:directive pos:start="2328:2" pos:end="2328:6">ifdef</cpp:directive> <name pos:start="2328:8" pos:end="2328:17">WANT_ICEBP</name></cpp:ifdef>
    <case pos:start="2329:5" pos:end="2329:14">case <expr pos:start="2329:10" pos:end="2329:13"><literal type="number" pos:start="2329:10" pos:end="2329:13">0xf1</literal></expr>:</case> <comment type="block" pos:start="2329:16" pos:end="2329:69">/* icebp (undocumented, exits to external debugger) */</comment>
        <expr_stmt pos:start="2330:9" pos:end="2332:0"><expr pos:start="2330:9" pos:end="2330:60"><call pos:start="2330:9" pos:end="2330:60"><name pos:start="2330:9" pos:end="2330:31">gen_svm_check_intercept</name><argument_list pos:start="2330:32" pos:end="2330:60">(<argument pos:start="2330:33" pos:end="2330:33"><expr pos:start="2330:33" pos:end="2330:33"><name pos:start="2330:33" pos:end="2330:33">s</name></expr></argument>, <argument pos:start="2330:36" pos:end="2330:43"><expr pos:start="2330:36" pos:end="2330:43"><name pos:start="2330:36" pos:end="2330:43">pc_start</name></expr></argument>, <argument pos:start="2330:46" pos:end="2330:59"><expr pos:start="2330:46" pos:end="2330:59"><name pos:start="2330:46" pos:end="2330:59">SVM_EXIT_ICEBP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if pos:start="2331:1" pos:end="2331:5">#<cpp:directive pos:start="2331:2" pos:end="2331:3">if</cpp:directive> <expr pos:start="2331:5" pos:end="2331:5"><literal type="number" pos:start="2331:5" pos:end="2331:5">1</literal></expr></cpp:if>
        <expr_stmt pos:start="2332:9" pos:end="2334:0"><expr pos:start="2332:9" pos:end="2332:43"><call pos:start="2332:9" pos:end="2332:43"><name pos:start="2332:9" pos:end="2332:17">gen_debug</name><argument_list pos:start="2332:18" pos:end="2332:43">(<argument pos:start="2332:19" pos:end="2332:19"><expr pos:start="2332:19" pos:end="2332:19"><name pos:start="2332:19" pos:end="2332:19">s</name></expr></argument>, <argument pos:start="2332:22" pos:end="2332:42"><expr pos:start="2332:22" pos:end="2332:42"><name pos:start="2332:22" pos:end="2332:29">pc_start</name> <operator pos:start="2332:31" pos:end="2332:31">-</operator> <name pos:start="2332:33" pos:end="2332:42"><name pos:start="2332:33" pos:end="2332:33">s</name><operator pos:start="2332:34" pos:end="2332:35">-&gt;</operator><name pos:start="2332:36" pos:end="2332:42">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:start="2333:1" pos:end="2333:5">#<cpp:directive pos:start="2333:2" pos:end="2333:5">else</cpp:directive></cpp:else>
        <comment type="block" pos:start="2334:9" pos:end="2334:25">/* start debug */</comment>
        <expr_stmt pos:start="2335:9" pos:end="2335:22"><expr pos:start="2335:9" pos:end="2335:21"><call pos:start="2335:9" pos:end="2335:21"><name pos:start="2335:9" pos:end="2335:16">tb_flush</name><argument_list pos:start="2335:17" pos:end="2335:21">(<argument pos:start="2335:18" pos:end="2335:20"><expr pos:start="2335:18" pos:end="2335:20"><name pos:start="2335:18" pos:end="2335:20">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2336:9" pos:end="2338:0"><expr pos:start="2336:9" pos:end="2336:53"><call pos:start="2336:9" pos:end="2336:53"><name pos:start="2336:9" pos:end="2336:20">qemu_set_log</name><argument_list pos:start="2336:21" pos:end="2336:53">(<argument pos:start="2336:22" pos:end="2336:52"><expr pos:start="2336:22" pos:end="2336:52"><name pos:start="2336:22" pos:end="2336:32">CPU_LOG_INT</name> <operator pos:start="2336:34" pos:end="2336:34">|</operator> <name pos:start="2336:36" pos:end="2336:52">CPU_LOG_TB_IN_ASM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="2337:1" pos:end="2337:6">#<cpp:directive pos:start="2337:2" pos:end="2337:6">endif</cpp:directive></cpp:endif>
        <break pos:start="2338:9" pos:end="2340:0">break;</break>
<cpp:endif pos:start="2339:1" pos:end="2339:6">#<cpp:directive pos:start="2339:2" pos:end="2339:6">endif</cpp:directive></cpp:endif>
    <case pos:start="2340:5" pos:end="2340:14">case <expr pos:start="2340:10" pos:end="2340:13"><literal type="number" pos:start="2340:10" pos:end="2340:13">0xfa</literal></expr>:</case> <comment type="block" pos:start="2340:16" pos:end="2340:24">/* cli */</comment>
        <if_stmt pos:start="2341:9" pos:end="3141:17"><if pos:start="2341:9" pos:end="3141:17">if <condition pos:start="2341:12" pos:end="2341:21">(<expr pos:start="2341:13" pos:end="2341:20"><operator pos:start="2341:13" pos:end="2341:13">!</operator><name pos:start="2341:14" pos:end="2341:20"><name pos:start="2341:14" pos:end="2341:14">s</name><operator pos:start="2341:15" pos:end="2341:16">-&gt;</operator><name pos:start="2341:17" pos:end="2341:20">vm86</name></name></expr>)</condition> <block pos:start="2341:23" pos:end="3141:17">{<block_content pos:start="2342:13" pos:end="3141:17">
            <if_stmt pos:start="2342:13" pos:end="2346:9"><if pos:start="2342:13" pos:end="2344:13">if <condition pos:start="2342:16" pos:end="2342:34">(<expr pos:start="2342:17" pos:end="2342:33"><name pos:start="2342:17" pos:end="2342:22"><name pos:start="2342:17" pos:end="2342:17">s</name><operator pos:start="2342:18" pos:end="2342:19">-&gt;</operator><name pos:start="2342:20" pos:end="2342:22">cpl</name></name> <operator pos:start="2342:24" pos:end="2342:25">&lt;=</operator> <name pos:start="2342:27" pos:end="2342:33"><name pos:start="2342:27" pos:end="2342:27">s</name><operator pos:start="2342:28" pos:end="2342:29">-&gt;</operator><name pos:start="2342:30" pos:end="2342:33">iopl</name></name></expr>)</condition> <block pos:start="2342:36" pos:end="2344:13">{<block_content pos:start="2343:17" pos:end="2343:40">
                <expr_stmt pos:start="2343:17" pos:end="2343:40"><expr pos:start="2343:17" pos:end="2343:39"><call pos:start="2343:17" pos:end="2343:39"><name pos:start="2343:17" pos:end="2343:30">gen_helper_cli</name><argument_list pos:start="2343:31" pos:end="2343:39">(<argument pos:start="2343:32" pos:end="2343:38"><expr pos:start="2343:32" pos:end="2343:38"><name pos:start="2343:32" pos:end="2343:38">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="2344:15" pos:end="2346:9">else <block pos:start="2344:20" pos:end="2346:9">{<block_content pos:start="2345:17" pos:end="2345:68">
                <expr_stmt pos:start="2345:17" pos:end="2345:68"><expr pos:start="2345:17" pos:end="2345:67"><call pos:start="2345:17" pos:end="2345:67"><name pos:start="2345:17" pos:end="2345:29">gen_exception</name><argument_list pos:start="2345:30" pos:end="2345:67">(<argument pos:start="2345:31" pos:end="2345:31"><expr pos:start="2345:31" pos:end="2345:31"><name pos:start="2345:31" pos:end="2345:31">s</name></expr></argument>, <argument pos:start="2345:34" pos:end="2345:43"><expr pos:start="2345:34" pos:end="2345:43"><name pos:start="2345:34" pos:end="2345:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="2345:46" pos:end="2345:66"><expr pos:start="2345:46" pos:end="2345:66"><name pos:start="2345:46" pos:end="2345:53">pc_start</name> <operator pos:start="2345:55" pos:end="2345:55">-</operator> <name pos:start="2345:57" pos:end="2345:66"><name pos:start="2345:57" pos:end="2345:57">s</name><operator pos:start="2345:58" pos:end="2345:59">-&gt;</operator><name pos:start="2345:60" pos:end="2345:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt> <if_stmt pos:start="2346:11" pos:end="3141:17"><else pos:start="2346:11" pos:end="3141:17">else <block pos:start="2346:16" pos:end="3141:17">{<block_content pos:start="2347:13" pos:end="3141:17">
            <if_stmt pos:start="2347:13" pos:end="3141:17"><if pos:start="2347:13" pos:end="2349:13">if <condition pos:start="2347:16" pos:end="2347:29">(<expr pos:start="2347:17" pos:end="2347:28"><name pos:start="2347:17" pos:end="2347:23"><name pos:start="2347:17" pos:end="2347:17">s</name><operator pos:start="2347:18" pos:end="2347:19">-&gt;</operator><name pos:start="2347:20" pos:end="2347:23">iopl</name></name> <operator pos:start="2347:25" pos:end="2347:26">==</operator> <literal type="number" pos:start="2347:28" pos:end="2347:28">3</literal></expr>)</condition> <block pos:start="2347:31" pos:end="2349:13">{<block_content pos:start="2348:17" pos:end="2348:40">
                <expr_stmt pos:start="2348:17" pos:end="2348:40"><expr pos:start="2348:17" pos:end="2348:39"><call pos:start="2348:17" pos:end="2348:39"><name pos:start="2348:17" pos:end="2348:30">gen_helper_cli</name><argument_list pos:start="2348:31" pos:end="2348:39">(<argument pos:start="2348:32" pos:end="2348:38"><expr pos:start="2348:32" pos:end="2348:38"><name pos:start="2348:32" pos:end="2348:38">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="2349:15" pos:end="3141:17">else <block pos:start="2349:20" pos:end="3141:17">{<block_content pos:start="2350:17" pos:end="3141:17">
                <expr_stmt pos:start="2350:17" pos:end="2350:68"><expr pos:start="2350:17" pos:end="2350:67"><call pos:start="2350:17" pos:end="2350:67"><name pos:start="2350:17" pos:end="2350:29">gen_exception</name><argument_list pos:start="2350:30" pos:end="2350:67">(<argument pos:start="2350:31" pos:end="2350:31"><expr pos:start="2350:31" pos:end="2350:31"><name pos:start="2350:31" pos:end="2350:31">s</name></expr></argument>, <argument pos:start="2350:34" pos:end="2350:43"><expr pos:start="2350:34" pos:end="2350:43"><name pos:start="2350:34" pos:end="2350:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="2350:46" pos:end="2350:66"><expr pos:start="2350:46" pos:end="2350:66"><name pos:start="2350:46" pos:end="2350:53">pc_start</name> <operator pos:start="2350:55" pos:end="2350:55">-</operator> <name pos:start="2350:57" pos:end="2350:66"><name pos:start="2350:57" pos:end="2350:57">s</name><operator pos:start="2350:58" pos:end="2350:59">-&gt;</operator><name pos:start="2350:60" pos:end="2350:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="2351:9" pos:end="2351:14">break;</break>
    <case pos:start="2352:5" pos:end="2352:14">case <expr pos:start="2352:10" pos:end="2352:13"><literal type="number" pos:start="2352:10" pos:end="2352:13">0xfb</literal></expr>:</case> <comment type="block" pos:start="2352:16" pos:end="2352:24">/* sti */</comment>
        <if_stmt pos:start="2353:9" pos:end="3141:17"><if pos:start="2353:9" pos:end="3141:17">if <condition pos:start="2353:12" pos:end="2353:21">(<expr pos:start="2353:13" pos:end="2353:20"><operator pos:start="2353:13" pos:end="2353:13">!</operator><name pos:start="2353:14" pos:end="2353:20"><name pos:start="2353:14" pos:end="2353:14">s</name><operator pos:start="2353:15" pos:end="2353:16">-&gt;</operator><name pos:start="2353:17" pos:end="2353:20">vm86</name></name></expr>)</condition> <block pos:start="2353:23" pos:end="3141:17">{<block_content pos:start="2354:13" pos:end="3141:17">
            <if_stmt pos:start="2354:13" pos:end="2367:9"><if pos:start="2354:13" pos:end="2365:13">if <condition pos:start="2354:16" pos:end="2354:34">(<expr pos:start="2354:17" pos:end="2354:33"><name pos:start="2354:17" pos:end="2354:22"><name pos:start="2354:17" pos:end="2354:17">s</name><operator pos:start="2354:18" pos:end="2354:19">-&gt;</operator><name pos:start="2354:20" pos:end="2354:22">cpl</name></name> <operator pos:start="2354:24" pos:end="2354:25">&lt;=</operator> <name pos:start="2354:27" pos:end="2354:33"><name pos:start="2354:27" pos:end="2354:27">s</name><operator pos:start="2354:28" pos:end="2354:29">-&gt;</operator><name pos:start="2354:30" pos:end="2354:33">iopl</name></name></expr>)</condition> <block pos:start="2354:36" pos:end="2365:13">{<block_content pos:start="2355:13" pos:end="2364:27">
            <label pos:start="2355:13" pos:end="2355:20"><name pos:start="2355:13" pos:end="2355:19">gen_sti</name>:</label>
                <expr_stmt pos:start="2356:17" pos:end="2356:40"><expr pos:start="2356:17" pos:end="2356:39"><call pos:start="2356:17" pos:end="2356:39"><name pos:start="2356:17" pos:end="2356:30">gen_helper_sti</name><argument_list pos:start="2356:31" pos:end="2356:39">(<argument pos:start="2356:32" pos:end="2356:38"><expr pos:start="2356:32" pos:end="2356:38"><name pos:start="2356:32" pos:end="2356:38">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="block" pos:start="2357:17" pos:end="2357:77">/* interruptions are enabled only the first insn after sti */</comment>
                <comment type="block" pos:start="2358:17" pos:end="2359:37">/* If several instructions disable interrupts, only the
                   _first_ does it */</comment>
                <if_stmt pos:start="2360:17" pos:end="2361:56"><if pos:start="2360:17" pos:end="2361:56">if <condition pos:start="2360:20" pos:end="2360:58">(<expr pos:start="2360:21" pos:end="2360:57"><operator pos:start="2360:21" pos:end="2360:21">!</operator><operator pos:start="2360:22" pos:end="2360:22">(</operator><name pos:start="2360:23" pos:end="2360:34"><name pos:start="2360:23" pos:end="2360:23">s</name><operator pos:start="2360:24" pos:end="2360:25">-&gt;</operator><name pos:start="2360:26" pos:end="2360:27">tb</name><operator pos:start="2360:28" pos:end="2360:29">-&gt;</operator><name pos:start="2360:30" pos:end="2360:34">flags</name></name> <operator pos:start="2360:36" pos:end="2360:36">&amp;</operator> <name pos:start="2360:38" pos:end="2360:56">HF_INHIBIT_IRQ_MASK</name><operator pos:start="2360:57" pos:end="2360:57">)</operator></expr>)</condition><block type="pseudo" pos:start="2361:21" pos:end="2361:56"><block_content pos:start="2361:21" pos:end="2361:56">
                    <expr_stmt pos:start="2361:21" pos:end="2361:56"><expr pos:start="2361:21" pos:end="2361:55"><call pos:start="2361:21" pos:end="2361:55"><name pos:start="2361:21" pos:end="2361:46">gen_helper_set_inhibit_irq</name><argument_list pos:start="2361:47" pos:end="2361:55">(<argument pos:start="2361:48" pos:end="2361:54"><expr pos:start="2361:48" pos:end="2361:54"><name pos:start="2361:48" pos:end="2361:54">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <comment type="block" pos:start="2362:17" pos:end="2362:58">/* give a chance to handle pending irqs */</comment>
                <expr_stmt pos:start="2363:17" pos:end="2363:47"><expr pos:start="2363:17" pos:end="2363:46"><call pos:start="2363:17" pos:end="2363:46"><name pos:start="2363:17" pos:end="2363:26">gen_jmp_im</name><argument_list pos:start="2363:27" pos:end="2363:46">(<argument pos:start="2363:28" pos:end="2363:45"><expr pos:start="2363:28" pos:end="2363:45"><name pos:start="2363:28" pos:end="2363:32"><name pos:start="2363:28" pos:end="2363:28">s</name><operator pos:start="2363:29" pos:end="2363:30">-&gt;</operator><name pos:start="2363:31" pos:end="2363:32">pc</name></name> <operator pos:start="2363:34" pos:end="2363:34">-</operator> <name pos:start="2363:36" pos:end="2363:45"><name pos:start="2363:36" pos:end="2363:36">s</name><operator pos:start="2363:37" pos:end="2363:38">-&gt;</operator><name pos:start="2363:39" pos:end="2363:45">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2364:17" pos:end="2364:27"><expr pos:start="2364:17" pos:end="2364:26"><call pos:start="2364:17" pos:end="2364:26"><name pos:start="2364:17" pos:end="2364:23">gen_eob</name><argument_list pos:start="2364:24" pos:end="2364:26">(<argument pos:start="2364:25" pos:end="2364:25"><expr pos:start="2364:25" pos:end="2364:25"><name pos:start="2364:25" pos:end="2364:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="2365:15" pos:end="2367:9">else <block pos:start="2365:20" pos:end="2367:9">{<block_content pos:start="2366:17" pos:end="2366:68">
                <expr_stmt pos:start="2366:17" pos:end="2366:68"><expr pos:start="2366:17" pos:end="2366:67"><call pos:start="2366:17" pos:end="2366:67"><name pos:start="2366:17" pos:end="2366:29">gen_exception</name><argument_list pos:start="2366:30" pos:end="2366:67">(<argument pos:start="2366:31" pos:end="2366:31"><expr pos:start="2366:31" pos:end="2366:31"><name pos:start="2366:31" pos:end="2366:31">s</name></expr></argument>, <argument pos:start="2366:34" pos:end="2366:43"><expr pos:start="2366:34" pos:end="2366:43"><name pos:start="2366:34" pos:end="2366:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="2366:46" pos:end="2366:66"><expr pos:start="2366:46" pos:end="2366:66"><name pos:start="2366:46" pos:end="2366:53">pc_start</name> <operator pos:start="2366:55" pos:end="2366:55">-</operator> <name pos:start="2366:57" pos:end="2366:66"><name pos:start="2366:57" pos:end="2366:57">s</name><operator pos:start="2366:58" pos:end="2366:59">-&gt;</operator><name pos:start="2366:60" pos:end="2366:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt> <if_stmt pos:start="2367:11" pos:end="3141:17"><else pos:start="2367:11" pos:end="3141:17">else <block pos:start="2367:16" pos:end="3141:17">{<block_content pos:start="2368:13" pos:end="3141:17">
            <if_stmt pos:start="2368:13" pos:end="3141:17"><if pos:start="2368:13" pos:end="2370:13">if <condition pos:start="2368:16" pos:end="2368:29">(<expr pos:start="2368:17" pos:end="2368:28"><name pos:start="2368:17" pos:end="2368:23"><name pos:start="2368:17" pos:end="2368:17">s</name><operator pos:start="2368:18" pos:end="2368:19">-&gt;</operator><name pos:start="2368:20" pos:end="2368:23">iopl</name></name> <operator pos:start="2368:25" pos:end="2368:26">==</operator> <literal type="number" pos:start="2368:28" pos:end="2368:28">3</literal></expr>)</condition> <block pos:start="2368:31" pos:end="2370:13">{<block_content pos:start="2369:17" pos:end="2369:29">
                <goto pos:start="2369:17" pos:end="2369:29">goto <name pos:start="2369:22" pos:end="2369:28">gen_sti</name>;</goto>
            </block_content>}</block></if> <else pos:start="2370:15" pos:end="3141:17">else <block pos:start="2370:20" pos:end="3141:17">{<block_content pos:start="2371:17" pos:end="3141:17">
                <expr_stmt pos:start="2371:17" pos:end="2371:68"><expr pos:start="2371:17" pos:end="2371:67"><call pos:start="2371:17" pos:end="2371:67"><name pos:start="2371:17" pos:end="2371:29">gen_exception</name><argument_list pos:start="2371:30" pos:end="2371:67">(<argument pos:start="2371:31" pos:end="2371:31"><expr pos:start="2371:31" pos:end="2371:31"><name pos:start="2371:31" pos:end="2371:31">s</name></expr></argument>, <argument pos:start="2371:34" pos:end="2371:43"><expr pos:start="2371:34" pos:end="2371:43"><name pos:start="2371:34" pos:end="2371:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="2371:46" pos:end="2371:66"><expr pos:start="2371:46" pos:end="2371:66"><name pos:start="2371:46" pos:end="2371:53">pc_start</name> <operator pos:start="2371:55" pos:end="2371:55">-</operator> <name pos:start="2371:57" pos:end="2371:66"><name pos:start="2371:57" pos:end="2371:57">s</name><operator pos:start="2371:58" pos:end="2371:59">-&gt;</operator><name pos:start="2371:60" pos:end="2371:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="2372:9" pos:end="2372:14">break;</break>
    <case pos:start="2373:5" pos:end="2373:14">case <expr pos:start="2373:10" pos:end="2373:13"><literal type="number" pos:start="2373:10" pos:end="2373:13">0x62</literal></expr>:</case> <comment type="block" pos:start="2373:16" pos:end="2373:26">/* bound */</comment>
        <if_stmt pos:start="2374:9" pos:end="2375:39"><if pos:start="2374:9" pos:end="2375:39">if <condition pos:start="2374:12" pos:end="2374:22">(<expr pos:start="2374:13" pos:end="2374:21"><call pos:start="2374:13" pos:end="2374:21"><name pos:start="2374:13" pos:end="2374:18">CODE64</name><argument_list pos:start="2374:19" pos:end="2374:21">(<argument pos:start="2374:20" pos:end="2374:20"><expr pos:start="2374:20" pos:end="2374:20"><name pos:start="2374:20" pos:end="2374:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2375:9" pos:end="2375:39"><block_content pos:start="2375:9" pos:end="2375:39">
        <expr_stmt pos:start="2375:9" pos:end="2375:39"><expr pos:start="2375:9" pos:end="2375:38"><name pos:start="2375:9" pos:end="2375:10">ot</name> <operator pos:start="2375:12" pos:end="2375:12">=</operator> <ternary pos:start="2375:14" pos:end="2375:38"><condition pos:start="2375:14" pos:end="2375:20"><expr pos:start="2375:14" pos:end="2375:18"><name pos:start="2375:14" pos:end="2375:18">dflag</name></expr> ?</condition><then pos:start="2375:22" pos:end="2375:28"> <expr pos:start="2375:22" pos:end="2375:28"><name pos:start="2375:22" pos:end="2375:28">OT_LONG</name></expr> </then><else pos:start="2375:30" pos:end="2375:38">: <expr pos:start="2375:32" pos:end="2375:38"><name pos:start="2375:32" pos:end="2375:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="2376:9" pos:end="2376:44"><expr pos:start="2376:9" pos:end="2376:43"><name pos:start="2376:9" pos:end="2376:13">modrm</name> <operator pos:start="2376:15" pos:end="2376:15">=</operator> <call pos:start="2376:17" pos:end="2376:43"><name pos:start="2376:17" pos:end="2376:29">cpu_ldub_code</name><argument_list pos:start="2376:30" pos:end="2376:43">(<argument pos:start="2376:31" pos:end="2376:33"><expr pos:start="2376:31" pos:end="2376:33"><name pos:start="2376:31" pos:end="2376:33">env</name></expr></argument>, <argument pos:start="2376:36" pos:end="2376:42"><expr pos:start="2376:36" pos:end="2376:42"><name pos:start="2376:36" pos:end="2376:40"><name pos:start="2376:36" pos:end="2376:36">s</name><operator pos:start="2376:37" pos:end="2376:38">-&gt;</operator><name pos:start="2376:39" pos:end="2376:40">pc</name></name><operator pos:start="2376:41" pos:end="2376:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2377:9" pos:end="2377:31"><expr pos:start="2377:9" pos:end="2377:30"><name pos:start="2377:9" pos:end="2377:11">reg</name> <operator pos:start="2377:13" pos:end="2377:13">=</operator> <operator pos:start="2377:15" pos:end="2377:15">(</operator><name pos:start="2377:16" pos:end="2377:20">modrm</name> <operator pos:start="2377:22" pos:end="2377:23">&gt;&gt;</operator> <literal type="number" pos:start="2377:25" pos:end="2377:25">3</literal><operator pos:start="2377:26" pos:end="2377:26">)</operator> <operator pos:start="2377:28" pos:end="2377:28">&amp;</operator> <literal type="number" pos:start="2377:30" pos:end="2377:30">7</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="2378:9" pos:end="2378:31"><expr pos:start="2378:9" pos:end="2378:30"><name pos:start="2378:9" pos:end="2378:11">mod</name> <operator pos:start="2378:13" pos:end="2378:13">=</operator> <operator pos:start="2378:15" pos:end="2378:15">(</operator><name pos:start="2378:16" pos:end="2378:20">modrm</name> <operator pos:start="2378:22" pos:end="2378:23">&gt;&gt;</operator> <literal type="number" pos:start="2378:25" pos:end="2378:25">6</literal><operator pos:start="2378:26" pos:end="2378:26">)</operator> <operator pos:start="2378:28" pos:end="2378:28">&amp;</operator> <literal type="number" pos:start="2378:30" pos:end="2378:30">3</literal></expr>;</expr_stmt>
        <if_stmt pos:start="2379:9" pos:end="2380:38"><if pos:start="2379:9" pos:end="2380:38">if <condition pos:start="2379:12" pos:end="2379:21">(<expr pos:start="2379:13" pos:end="2379:20"><name pos:start="2379:13" pos:end="2379:15">mod</name> <operator pos:start="2379:17" pos:end="2379:18">==</operator> <literal type="number" pos:start="2379:20" pos:end="2379:20">3</literal></expr>)</condition><block type="pseudo" pos:start="2380:9" pos:end="2380:38"><block_content pos:start="2380:9" pos:end="2380:38">
        <expr_stmt pos:start="2380:9" pos:end="2380:38"><expr pos:start="2380:9" pos:end="2380:37"><call pos:start="2380:9" pos:end="2380:37"><name pos:start="2380:9" pos:end="2380:25">gen_op_mov_TN_reg</name><argument_list pos:start="2380:26" pos:end="2380:37">(<argument pos:start="2380:27" pos:end="2380:28"><expr pos:start="2380:27" pos:end="2380:28"><name pos:start="2380:27" pos:end="2380:28">ot</name></expr></argument>, <argument pos:start="2380:31" pos:end="2380:31"><expr pos:start="2380:31" pos:end="2380:31"><literal type="number" pos:start="2380:31" pos:end="2380:31">0</literal></expr></argument>, <argument pos:start="2380:34" pos:end="2380:36"><expr pos:start="2380:34" pos:end="2380:36"><name pos:start="2380:34" pos:end="2380:36">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="2381:9" pos:end="2381:62"><expr pos:start="2381:9" pos:end="2381:61"><call pos:start="2381:9" pos:end="2381:61"><name pos:start="2381:9" pos:end="2381:21">gen_lea_modrm</name><argument_list pos:start="2381:22" pos:end="2381:61">(<argument pos:start="2381:23" pos:end="2381:25"><expr pos:start="2381:23" pos:end="2381:25"><name pos:start="2381:23" pos:end="2381:25">env</name></expr></argument>, <argument pos:start="2381:28" pos:end="2381:28"><expr pos:start="2381:28" pos:end="2381:28"><name pos:start="2381:28" pos:end="2381:28">s</name></expr></argument>, <argument pos:start="2381:31" pos:end="2381:35"><expr pos:start="2381:31" pos:end="2381:35"><name pos:start="2381:31" pos:end="2381:35">modrm</name></expr></argument>, <argument pos:start="2381:38" pos:end="2381:46"><expr pos:start="2381:38" pos:end="2381:46"><operator pos:start="2381:38" pos:end="2381:38">&amp;</operator><name pos:start="2381:39" pos:end="2381:46">reg_addr</name></expr></argument>, <argument pos:start="2381:49" pos:end="2381:60"><expr pos:start="2381:49" pos:end="2381:60"><operator pos:start="2381:49" pos:end="2381:49">&amp;</operator><name pos:start="2381:50" pos:end="2381:60">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2382:9" pos:end="2382:42"><expr pos:start="2382:9" pos:end="2382:41"><call pos:start="2382:9" pos:end="2382:41"><name pos:start="2382:9" pos:end="2382:18">gen_jmp_im</name><argument_list pos:start="2382:19" pos:end="2382:41">(<argument pos:start="2382:20" pos:end="2382:40"><expr pos:start="2382:20" pos:end="2382:40"><name pos:start="2382:20" pos:end="2382:27">pc_start</name> <operator pos:start="2382:29" pos:end="2382:29">-</operator> <name pos:start="2382:31" pos:end="2382:40"><name pos:start="2382:31" pos:end="2382:31">s</name><operator pos:start="2382:32" pos:end="2382:33">-&gt;</operator><name pos:start="2382:34" pos:end="2382:40">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2383:9" pos:end="2383:53"><expr pos:start="2383:9" pos:end="2383:52"><call pos:start="2383:9" pos:end="2383:52"><name pos:start="2383:9" pos:end="2383:28">tcg_gen_trunc_tl_i32</name><argument_list pos:start="2383:29" pos:end="2383:52">(<argument pos:start="2383:30" pos:end="2383:41"><expr pos:start="2383:30" pos:end="2383:41"><name pos:start="2383:30" pos:end="2383:41">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2383:44" pos:end="2383:51"><expr pos:start="2383:44" pos:end="2383:51"><name pos:start="2383:44" pos:end="2383:51"><name pos:start="2383:44" pos:end="2383:48">cpu_T</name><index pos:start="2383:49" pos:end="2383:51">[<expr pos:start="2383:50" pos:end="2383:50"><literal type="number" pos:start="2383:50" pos:end="2383:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="2384:9" pos:end="3141:17"><if pos:start="2384:9" pos:end="2386:9">if <condition pos:start="2384:12" pos:end="2384:26">(<expr pos:start="2384:13" pos:end="2384:25"><name pos:start="2384:13" pos:end="2384:14">ot</name> <operator pos:start="2384:16" pos:end="2384:17">==</operator> <name pos:start="2384:19" pos:end="2384:25">OT_WORD</name></expr>)</condition> <block pos:start="2384:28" pos:end="2386:9">{<block_content pos:start="2385:13" pos:end="2385:61">
            <expr_stmt pos:start="2385:13" pos:end="2385:61"><expr pos:start="2385:13" pos:end="2385:60"><call pos:start="2385:13" pos:end="2385:60"><name pos:start="2385:13" pos:end="2385:29">gen_helper_boundw</name><argument_list pos:start="2385:30" pos:end="2385:60">(<argument pos:start="2385:31" pos:end="2385:37"><expr pos:start="2385:31" pos:end="2385:37"><name pos:start="2385:31" pos:end="2385:37">cpu_env</name></expr></argument>, <argument pos:start="2385:40" pos:end="2385:45"><expr pos:start="2385:40" pos:end="2385:45"><name pos:start="2385:40" pos:end="2385:45">cpu_A0</name></expr></argument>, <argument pos:start="2385:48" pos:end="2385:59"><expr pos:start="2385:48" pos:end="2385:59"><name pos:start="2385:48" pos:end="2385:59">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="2386:11" pos:end="3141:17">else <block pos:start="2386:16" pos:end="3141:17">{<block_content pos:start="2387:13" pos:end="3141:17">
            <expr_stmt pos:start="2387:13" pos:end="2387:61"><expr pos:start="2387:13" pos:end="2387:60"><call pos:start="2387:13" pos:end="2387:60"><name pos:start="2387:13" pos:end="2387:29">gen_helper_boundl</name><argument_list pos:start="2387:30" pos:end="2387:60">(<argument pos:start="2387:31" pos:end="2387:37"><expr pos:start="2387:31" pos:end="2387:37"><name pos:start="2387:31" pos:end="2387:37">cpu_env</name></expr></argument>, <argument pos:start="2387:40" pos:end="2387:45"><expr pos:start="2387:40" pos:end="2387:45"><name pos:start="2387:40" pos:end="2387:45">cpu_A0</name></expr></argument>, <argument pos:start="2387:48" pos:end="2387:59"><expr pos:start="2387:48" pos:end="2387:59"><name pos:start="2387:48" pos:end="2387:59">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="2388:9" pos:end="2388:14">break;</break>
    <case pos:start="2389:5" pos:end="2389:25">case <expr pos:start="2389:10" pos:end="2389:24"><literal type="number" pos:start="2389:10" pos:end="2389:14">0x1c8</literal> <operator pos:start="2389:16" pos:end="2389:18">...</operator> <literal type="number" pos:start="2389:20" pos:end="2389:24">0x1cf</literal></expr>:</case> <comment type="block" pos:start="2389:27" pos:end="2389:41">/* bswap reg */</comment>
        <expr_stmt pos:start="2390:9" pos:end="2392:0"><expr pos:start="2390:9" pos:end="2390:32"><name pos:start="2390:9" pos:end="2390:11">reg</name> <operator pos:start="2390:13" pos:end="2390:13">=</operator> <operator pos:start="2390:15" pos:end="2390:15">(</operator><name pos:start="2390:16" pos:end="2390:16">b</name> <operator pos:start="2390:18" pos:end="2390:18">&amp;</operator> <literal type="number" pos:start="2390:20" pos:end="2390:20">7</literal><operator pos:start="2390:21" pos:end="2390:21">)</operator> <operator pos:start="2390:23" pos:end="2390:23">|</operator> <call pos:start="2390:25" pos:end="2390:32"><name pos:start="2390:25" pos:end="2390:29">REX_B</name><argument_list pos:start="2390:30" pos:end="2390:32">(<argument pos:start="2390:31" pos:end="2390:31"><expr pos:start="2390:31" pos:end="2390:31"><name pos:start="2390:31" pos:end="2390:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:start="2391:1" pos:end="2391:20">#<cpp:directive pos:start="2391:2" pos:end="2391:6">ifdef</cpp:directive> <name pos:start="2391:8" pos:end="2391:20">TARGET_X86_64</name></cpp:ifdef>
        <if_stmt pos:start="2392:9" pos:end="3141:17"><if pos:start="2392:9" pos:end="2396:9">if <condition pos:start="2392:12" pos:end="2392:23">(<expr pos:start="2392:13" pos:end="2392:22"><name pos:start="2392:13" pos:end="2392:17">dflag</name> <operator pos:start="2392:19" pos:end="2392:20">==</operator> <literal type="number" pos:start="2392:22" pos:end="2392:22">2</literal></expr>)</condition> <block pos:start="2392:25" pos:end="2396:9">{<block_content pos:start="2393:13" pos:end="2395:44">
            <expr_stmt pos:start="2393:13" pos:end="2393:47"><expr pos:start="2393:13" pos:end="2393:46"><call pos:start="2393:13" pos:end="2393:46"><name pos:start="2393:13" pos:end="2393:29">gen_op_mov_TN_reg</name><argument_list pos:start="2393:30" pos:end="2393:46">(<argument pos:start="2393:31" pos:end="2393:37"><expr pos:start="2393:31" pos:end="2393:37"><name pos:start="2393:31" pos:end="2393:37">OT_QUAD</name></expr></argument>, <argument pos:start="2393:40" pos:end="2393:40"><expr pos:start="2393:40" pos:end="2393:40"><literal type="number" pos:start="2393:40" pos:end="2393:40">0</literal></expr></argument>, <argument pos:start="2393:43" pos:end="2393:45"><expr pos:start="2393:43" pos:end="2393:45"><name pos:start="2393:43" pos:end="2393:45">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2394:13" pos:end="2394:52"><expr pos:start="2394:13" pos:end="2394:51"><call pos:start="2394:13" pos:end="2394:51"><name pos:start="2394:13" pos:end="2394:31">tcg_gen_bswap64_i64</name><argument_list pos:start="2394:32" pos:end="2394:51">(<argument pos:start="2394:33" pos:end="2394:40"><expr pos:start="2394:33" pos:end="2394:40"><name pos:start="2394:33" pos:end="2394:40"><name pos:start="2394:33" pos:end="2394:37">cpu_T</name><index pos:start="2394:38" pos:end="2394:40">[<expr pos:start="2394:39" pos:end="2394:39"><literal type="number" pos:start="2394:39" pos:end="2394:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2394:43" pos:end="2394:50"><expr pos:start="2394:43" pos:end="2394:50"><name pos:start="2394:43" pos:end="2394:50"><name pos:start="2394:43" pos:end="2394:47">cpu_T</name><index pos:start="2394:48" pos:end="2394:50">[<expr pos:start="2394:49" pos:end="2394:49"><literal type="number" pos:start="2394:49" pos:end="2394:49">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2395:13" pos:end="2395:44"><expr pos:start="2395:13" pos:end="2395:43"><call pos:start="2395:13" pos:end="2395:43"><name pos:start="2395:13" pos:end="2395:29">gen_op_mov_reg_T0</name><argument_list pos:start="2395:30" pos:end="2395:43">(<argument pos:start="2395:31" pos:end="2395:37"><expr pos:start="2395:31" pos:end="2395:37"><name pos:start="2395:31" pos:end="2395:37">OT_QUAD</name></expr></argument>, <argument pos:start="2395:40" pos:end="2395:42"><expr pos:start="2395:40" pos:end="2395:42"><name pos:start="2395:40" pos:end="2395:42">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="2396:11" pos:end="3141:17">else
<cpp:endif pos:start="2397:1" pos:end="2397:6">#<cpp:directive pos:start="2397:2" pos:end="2397:6">endif</cpp:directive></cpp:endif>
        <block pos:start="2398:9" pos:end="3141:17">{<block_content pos:start="2399:13" pos:end="3141:17">
            <expr_stmt pos:start="2399:13" pos:end="2399:47"><expr pos:start="2399:13" pos:end="2399:46"><call pos:start="2399:13" pos:end="2399:46"><name pos:start="2399:13" pos:end="2399:29">gen_op_mov_TN_reg</name><argument_list pos:start="2399:30" pos:end="2399:46">(<argument pos:start="2399:31" pos:end="2399:37"><expr pos:start="2399:31" pos:end="2399:37"><name pos:start="2399:31" pos:end="2399:37">OT_LONG</name></expr></argument>, <argument pos:start="2399:40" pos:end="2399:40"><expr pos:start="2399:40" pos:end="2399:40"><literal type="number" pos:start="2399:40" pos:end="2399:40">0</literal></expr></argument>, <argument pos:start="2399:43" pos:end="2399:45"><expr pos:start="2399:43" pos:end="2399:45"><name pos:start="2399:43" pos:end="2399:45">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2400:13" pos:end="2400:50"><expr pos:start="2400:13" pos:end="2400:49"><call pos:start="2400:13" pos:end="2400:49"><name pos:start="2400:13" pos:end="2400:29">tcg_gen_ext32u_tl</name><argument_list pos:start="2400:30" pos:end="2400:49">(<argument pos:start="2400:31" pos:end="2400:38"><expr pos:start="2400:31" pos:end="2400:38"><name pos:start="2400:31" pos:end="2400:38"><name pos:start="2400:31" pos:end="2400:35">cpu_T</name><index pos:start="2400:36" pos:end="2400:38">[<expr pos:start="2400:37" pos:end="2400:37"><literal type="number" pos:start="2400:37" pos:end="2400:37">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2400:41" pos:end="2400:48"><expr pos:start="2400:41" pos:end="2400:48"><name pos:start="2400:41" pos:end="2400:48"><name pos:start="2400:41" pos:end="2400:45">cpu_T</name><index pos:start="2400:46" pos:end="2400:48">[<expr pos:start="2400:47" pos:end="2400:47"><literal type="number" pos:start="2400:47" pos:end="2400:47">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2401:13" pos:end="2401:51"><expr pos:start="2401:13" pos:end="2401:50"><call pos:start="2401:13" pos:end="2401:50"><name pos:start="2401:13" pos:end="2401:30">tcg_gen_bswap32_tl</name><argument_list pos:start="2401:31" pos:end="2401:50">(<argument pos:start="2401:32" pos:end="2401:39"><expr pos:start="2401:32" pos:end="2401:39"><name pos:start="2401:32" pos:end="2401:39"><name pos:start="2401:32" pos:end="2401:36">cpu_T</name><index pos:start="2401:37" pos:end="2401:39">[<expr pos:start="2401:38" pos:end="2401:38"><literal type="number" pos:start="2401:38" pos:end="2401:38">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2401:42" pos:end="2401:49"><expr pos:start="2401:42" pos:end="2401:49"><name pos:start="2401:42" pos:end="2401:49"><name pos:start="2401:42" pos:end="2401:46">cpu_T</name><index pos:start="2401:47" pos:end="2401:49">[<expr pos:start="2401:48" pos:end="2401:48"><literal type="number" pos:start="2401:48" pos:end="2401:48">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2402:13" pos:end="2402:44"><expr pos:start="2402:13" pos:end="2402:43"><call pos:start="2402:13" pos:end="2402:43"><name pos:start="2402:13" pos:end="2402:29">gen_op_mov_reg_T0</name><argument_list pos:start="2402:30" pos:end="2402:43">(<argument pos:start="2402:31" pos:end="2402:37"><expr pos:start="2402:31" pos:end="2402:37"><name pos:start="2402:31" pos:end="2402:37">OT_LONG</name></expr></argument>, <argument pos:start="2402:40" pos:end="2402:42"><expr pos:start="2402:40" pos:end="2402:42"><name pos:start="2402:40" pos:end="2402:42">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="2403:9" pos:end="2403:14">break;</break>
    <case pos:start="2404:5" pos:end="2404:14">case <expr pos:start="2404:10" pos:end="2404:13"><literal type="number" pos:start="2404:10" pos:end="2404:13">0xd6</literal></expr>:</case> <comment type="block" pos:start="2404:16" pos:end="2404:25">/* salc */</comment>
        <if_stmt pos:start="2405:9" pos:end="2406:42"><if pos:start="2405:9" pos:end="2406:42">if <condition pos:start="2405:12" pos:end="2405:22">(<expr pos:start="2405:13" pos:end="2405:21"><call pos:start="2405:13" pos:end="2405:21"><name pos:start="2405:13" pos:end="2405:18">CODE64</name><argument_list pos:start="2405:19" pos:end="2405:21">(<argument pos:start="2405:20" pos:end="2405:20"><expr pos:start="2405:20" pos:end="2405:20"><name pos:start="2405:20" pos:end="2405:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2406:9" pos:end="2406:42"><block_content pos:start="2406:9" pos:end="2406:42">
        <expr_stmt pos:start="2406:9" pos:end="2406:42"><expr pos:start="2406:9" pos:end="2406:41"><call pos:start="2406:9" pos:end="2406:41"><name pos:start="2406:9" pos:end="2406:28">gen_compute_eflags_c</name><argument_list pos:start="2406:29" pos:end="2406:41">(<argument pos:start="2406:30" pos:end="2406:30"><expr pos:start="2406:30" pos:end="2406:30"><name pos:start="2406:30" pos:end="2406:30">s</name></expr></argument>, <argument pos:start="2406:33" pos:end="2406:40"><expr pos:start="2406:33" pos:end="2406:40"><name pos:start="2406:33" pos:end="2406:40"><name pos:start="2406:33" pos:end="2406:37">cpu_T</name><index pos:start="2406:38" pos:end="2406:40">[<expr pos:start="2406:39" pos:end="2406:39"><literal type="number" pos:start="2406:39" pos:end="2406:39">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="2407:9" pos:end="2407:43"><expr pos:start="2407:9" pos:end="2407:42"><call pos:start="2407:9" pos:end="2407:42"><name pos:start="2407:9" pos:end="2407:22">tcg_gen_neg_tl</name><argument_list pos:start="2407:23" pos:end="2407:42">(<argument pos:start="2407:24" pos:end="2407:31"><expr pos:start="2407:24" pos:end="2407:31"><name pos:start="2407:24" pos:end="2407:31"><name pos:start="2407:24" pos:end="2407:28">cpu_T</name><index pos:start="2407:29" pos:end="2407:31">[<expr pos:start="2407:30" pos:end="2407:30"><literal type="number" pos:start="2407:30" pos:end="2407:30">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2407:34" pos:end="2407:41"><expr pos:start="2407:34" pos:end="2407:41"><name pos:start="2407:34" pos:end="2407:41"><name pos:start="2407:34" pos:end="2407:38">cpu_T</name><index pos:start="2407:39" pos:end="2407:41">[<expr pos:start="2407:40" pos:end="2407:40"><literal type="number" pos:start="2407:40" pos:end="2407:40">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2408:9" pos:end="2408:42"><expr pos:start="2408:9" pos:end="2408:41"><call pos:start="2408:9" pos:end="2408:41"><name pos:start="2408:9" pos:end="2408:25">gen_op_mov_reg_T0</name><argument_list pos:start="2408:26" pos:end="2408:41">(<argument pos:start="2408:27" pos:end="2408:33"><expr pos:start="2408:27" pos:end="2408:33"><name pos:start="2408:27" pos:end="2408:33">OT_BYTE</name></expr></argument>, <argument pos:start="2408:36" pos:end="2408:40"><expr pos:start="2408:36" pos:end="2408:40"><name pos:start="2408:36" pos:end="2408:40">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="2409:9" pos:end="2409:14">break;</break>
    <case pos:start="2410:5" pos:end="2410:14">case <expr pos:start="2410:10" pos:end="2410:13"><literal type="number" pos:start="2410:10" pos:end="2410:13">0xe0</literal></expr>:</case> <comment type="block" pos:start="2410:16" pos:end="2410:27">/* loopnz */</comment>
    <case pos:start="2411:5" pos:end="2411:14">case <expr pos:start="2411:10" pos:end="2411:13"><literal type="number" pos:start="2411:10" pos:end="2411:13">0xe1</literal></expr>:</case> <comment type="block" pos:start="2411:16" pos:end="2411:26">/* loopz */</comment>
    <case pos:start="2412:5" pos:end="2412:14">case <expr pos:start="2412:10" pos:end="2412:13"><literal type="number" pos:start="2412:10" pos:end="2412:13">0xe2</literal></expr>:</case> <comment type="block" pos:start="2412:16" pos:end="2412:25">/* loop */</comment>
    <case pos:start="2413:5" pos:end="2413:14">case <expr pos:start="2413:10" pos:end="2413:13"><literal type="number" pos:start="2413:10" pos:end="2413:13">0xe3</literal></expr>:</case> <comment type="block" pos:start="2413:16" pos:end="2413:26">/* jecxz */</comment>
        <block pos:start="2414:9" pos:end="3141:17">{<block_content pos:start="2415:13" pos:end="3141:17">
            <decl_stmt pos:start="2415:13" pos:end="2415:27"><decl pos:start="2415:13" pos:end="2415:18"><type pos:start="2415:13" pos:end="2415:15"><name pos:start="2415:13" pos:end="2415:15">int</name></type> <name pos:start="2415:17" pos:end="2415:18">l1</name></decl>, <decl pos:start="2415:21" pos:end="2415:22"><type ref="prev" pos:start="2415:13" pos:end="2415:15"/><name pos:start="2415:21" pos:end="2415:22">l2</name></decl>, <decl pos:start="2415:25" pos:end="2415:26"><type ref="prev" pos:start="2415:13" pos:end="2415:15"/><name pos:start="2415:25" pos:end="2415:26">l3</name></decl>;</decl_stmt>
            <expr_stmt pos:start="2416:13" pos:end="2416:53"><expr pos:start="2416:13" pos:end="2416:52"><name pos:start="2416:13" pos:end="2416:16">tval</name> <operator pos:start="2416:18" pos:end="2416:18">=</operator> <operator pos:start="2416:20" pos:end="2416:20">(</operator><name pos:start="2416:21" pos:end="2416:26">int8_t</name><operator pos:start="2416:27" pos:end="2416:27">)</operator><call pos:start="2416:28" pos:end="2416:52"><name pos:start="2416:28" pos:end="2416:35">insn_get</name><argument_list pos:start="2416:36" pos:end="2416:52">(<argument pos:start="2416:37" pos:end="2416:39"><expr pos:start="2416:37" pos:end="2416:39"><name pos:start="2416:37" pos:end="2416:39">env</name></expr></argument>, <argument pos:start="2416:42" pos:end="2416:42"><expr pos:start="2416:42" pos:end="2416:42"><name pos:start="2416:42" pos:end="2416:42">s</name></expr></argument>, <argument pos:start="2416:45" pos:end="2416:51"><expr pos:start="2416:45" pos:end="2416:51"><name pos:start="2416:45" pos:end="2416:51">OT_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2417:13" pos:end="2417:42"><expr pos:start="2417:13" pos:end="2417:41"><name pos:start="2417:13" pos:end="2417:20">next_eip</name> <operator pos:start="2417:22" pos:end="2417:22">=</operator> <name pos:start="2417:24" pos:end="2417:28"><name pos:start="2417:24" pos:end="2417:24">s</name><operator pos:start="2417:25" pos:end="2417:26">-&gt;</operator><name pos:start="2417:27" pos:end="2417:28">pc</name></name> <operator pos:start="2417:30" pos:end="2417:30">-</operator> <name pos:start="2417:32" pos:end="2417:41"><name pos:start="2417:32" pos:end="2417:32">s</name><operator pos:start="2417:33" pos:end="2417:34">-&gt;</operator><name pos:start="2417:35" pos:end="2417:41">cs_base</name></name></expr>;</expr_stmt>
            <expr_stmt pos:start="2418:13" pos:end="2418:29"><expr pos:start="2418:13" pos:end="2418:28"><name pos:start="2418:13" pos:end="2418:16">tval</name> <operator pos:start="2418:18" pos:end="2418:19">+=</operator> <name pos:start="2418:21" pos:end="2418:28">next_eip</name></expr>;</expr_stmt>
            <if_stmt pos:start="2419:13" pos:end="2420:31"><if pos:start="2419:13" pos:end="2420:31">if <condition pos:start="2419:16" pos:end="2419:30">(<expr pos:start="2419:17" pos:end="2419:29"><name pos:start="2419:17" pos:end="2419:24"><name pos:start="2419:17" pos:end="2419:17">s</name><operator pos:start="2419:18" pos:end="2419:19">-&gt;</operator><name pos:start="2419:20" pos:end="2419:24">dflag</name></name> <operator pos:start="2419:26" pos:end="2419:27">==</operator> <literal type="number" pos:start="2419:29" pos:end="2419:29">0</literal></expr>)</condition><block type="pseudo" pos:start="2420:17" pos:end="2420:31"><block_content pos:start="2420:17" pos:end="2420:31">
                <expr_stmt pos:start="2420:17" pos:end="2420:31"><expr pos:start="2420:17" pos:end="2420:30"><name pos:start="2420:17" pos:end="2420:20">tval</name> <operator pos:start="2420:22" pos:end="2420:23">&amp;=</operator> <literal type="number" pos:start="2420:25" pos:end="2420:30">0xffff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt pos:start="2421:13" pos:end="2421:33"><expr pos:start="2421:13" pos:end="2421:32"><name pos:start="2421:13" pos:end="2421:14">l1</name> <operator pos:start="2421:16" pos:end="2421:16">=</operator> <call pos:start="2421:18" pos:end="2421:32"><name pos:start="2421:18" pos:end="2421:30">gen_new_label</name><argument_list pos:start="2421:31" pos:end="2421:32">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2422:13" pos:end="2422:33"><expr pos:start="2422:13" pos:end="2422:32"><name pos:start="2422:13" pos:end="2422:14">l2</name> <operator pos:start="2422:16" pos:end="2422:16">=</operator> <call pos:start="2422:18" pos:end="2422:32"><name pos:start="2422:18" pos:end="2422:30">gen_new_label</name><argument_list pos:start="2422:31" pos:end="2422:32">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2423:13" pos:end="2423:33"><expr pos:start="2423:13" pos:end="2423:32"><name pos:start="2423:13" pos:end="2423:14">l3</name> <operator pos:start="2423:16" pos:end="2423:16">=</operator> <call pos:start="2423:18" pos:end="2423:32"><name pos:start="2423:18" pos:end="2423:30">gen_new_label</name><argument_list pos:start="2423:31" pos:end="2423:32">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2424:13" pos:end="2424:19"><expr pos:start="2424:13" pos:end="2424:18"><name pos:start="2424:13" pos:end="2424:13">b</name> <operator pos:start="2424:15" pos:end="2424:16">&amp;=</operator> <literal type="number" pos:start="2424:18" pos:end="2424:18">3</literal></expr>;</expr_stmt>
            <switch pos:start="2425:13" pos:end="3141:17">switch<condition pos:start="2425:19" pos:end="2425:21">(<expr pos:start="2425:20" pos:end="2425:20"><name pos:start="2425:20" pos:end="2425:20">b</name></expr>)</condition> <block pos:start="2425:23" pos:end="3141:17">{<block_content pos:start="2426:13" pos:end="3141:17">
            <case pos:start="2426:13" pos:end="2426:19">case <expr pos:start="2426:18" pos:end="2426:18"><literal type="number" pos:start="2426:18" pos:end="2426:18">0</literal></expr>:</case> <comment type="block" pos:start="2426:21" pos:end="2426:32">/* loopnz */</comment>
            <case pos:start="2427:13" pos:end="2427:19">case <expr pos:start="2427:18" pos:end="2427:18"><literal type="number" pos:start="2427:18" pos:end="2427:18">1</literal></expr>:</case> <comment type="block" pos:start="2427:21" pos:end="2427:31">/* loopz */</comment>
                <expr_stmt pos:start="2428:17" pos:end="2428:55"><expr pos:start="2428:17" pos:end="2428:54"><call pos:start="2428:17" pos:end="2428:54"><name pos:start="2428:17" pos:end="2428:33">gen_op_add_reg_im</name><argument_list pos:start="2428:34" pos:end="2428:54">(<argument pos:start="2428:35" pos:end="2428:42"><expr pos:start="2428:35" pos:end="2428:42"><name pos:start="2428:35" pos:end="2428:42"><name pos:start="2428:35" pos:end="2428:35">s</name><operator pos:start="2428:36" pos:end="2428:37">-&gt;</operator><name pos:start="2428:38" pos:end="2428:42">aflag</name></name></expr></argument>, <argument pos:start="2428:45" pos:end="2428:49"><expr pos:start="2428:45" pos:end="2428:49"><name pos:start="2428:45" pos:end="2428:49">R_ECX</name></expr></argument>, <argument pos:start="2428:52" pos:end="2428:53"><expr pos:start="2428:52" pos:end="2428:53"><operator pos:start="2428:52" pos:end="2428:52">-</operator><literal type="number" pos:start="2428:53" pos:end="2428:53">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2429:17" pos:end="2429:44"><expr pos:start="2429:17" pos:end="2429:43"><call pos:start="2429:17" pos:end="2429:43"><name pos:start="2429:17" pos:end="2429:29">gen_op_jz_ecx</name><argument_list pos:start="2429:30" pos:end="2429:43">(<argument pos:start="2429:31" pos:end="2429:38"><expr pos:start="2429:31" pos:end="2429:38"><name pos:start="2429:31" pos:end="2429:38"><name pos:start="2429:31" pos:end="2429:31">s</name><operator pos:start="2429:32" pos:end="2429:33">-&gt;</operator><name pos:start="2429:34" pos:end="2429:38">aflag</name></name></expr></argument>, <argument pos:start="2429:41" pos:end="2429:42"><expr pos:start="2429:41" pos:end="2429:42"><name pos:start="2429:41" pos:end="2429:42">l3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2430:17" pos:end="2430:56"><expr pos:start="2430:17" pos:end="2430:55"><call pos:start="2430:17" pos:end="2430:55"><name pos:start="2430:17" pos:end="2430:24">gen_jcc1</name><argument_list pos:start="2430:25" pos:end="2430:55">(<argument pos:start="2430:26" pos:end="2430:26"><expr pos:start="2430:26" pos:end="2430:26"><name pos:start="2430:26" pos:end="2430:26">s</name></expr></argument>, <argument pos:start="2430:29" pos:end="2430:50"><expr pos:start="2430:29" pos:end="2430:50"><operator pos:start="2430:29" pos:end="2430:29">(</operator><name pos:start="2430:30" pos:end="2430:34">JCC_Z</name> <operator pos:start="2430:36" pos:end="2430:37">&lt;&lt;</operator> <literal type="number" pos:start="2430:39" pos:end="2430:39">1</literal><operator pos:start="2430:40" pos:end="2430:40">)</operator> <operator pos:start="2430:42" pos:end="2430:42">|</operator> <operator pos:start="2430:44" pos:end="2430:44">(</operator><name pos:start="2430:45" pos:end="2430:45">b</name> <operator pos:start="2430:47" pos:end="2430:47">^</operator> <literal type="number" pos:start="2430:49" pos:end="2430:49">1</literal><operator pos:start="2430:50" pos:end="2430:50">)</operator></expr></argument>, <argument pos:start="2430:53" pos:end="2430:54"><expr pos:start="2430:53" pos:end="2430:54"><name pos:start="2430:53" pos:end="2430:54">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="2431:17" pos:end="2431:22">break;</break>
            <case pos:start="2432:13" pos:end="2432:19">case <expr pos:start="2432:18" pos:end="2432:18"><literal type="number" pos:start="2432:18" pos:end="2432:18">2</literal></expr>:</case> <comment type="block" pos:start="2432:21" pos:end="2432:30">/* loop */</comment>
                <expr_stmt pos:start="2433:17" pos:end="2433:55"><expr pos:start="2433:17" pos:end="2433:54"><call pos:start="2433:17" pos:end="2433:54"><name pos:start="2433:17" pos:end="2433:33">gen_op_add_reg_im</name><argument_list pos:start="2433:34" pos:end="2433:54">(<argument pos:start="2433:35" pos:end="2433:42"><expr pos:start="2433:35" pos:end="2433:42"><name pos:start="2433:35" pos:end="2433:42"><name pos:start="2433:35" pos:end="2433:35">s</name><operator pos:start="2433:36" pos:end="2433:37">-&gt;</operator><name pos:start="2433:38" pos:end="2433:42">aflag</name></name></expr></argument>, <argument pos:start="2433:45" pos:end="2433:49"><expr pos:start="2433:45" pos:end="2433:49"><name pos:start="2433:45" pos:end="2433:49">R_ECX</name></expr></argument>, <argument pos:start="2433:52" pos:end="2433:53"><expr pos:start="2433:52" pos:end="2433:53"><operator pos:start="2433:52" pos:end="2433:52">-</operator><literal type="number" pos:start="2433:53" pos:end="2433:53">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2434:17" pos:end="2434:45"><expr pos:start="2434:17" pos:end="2434:44"><call pos:start="2434:17" pos:end="2434:44"><name pos:start="2434:17" pos:end="2434:30">gen_op_jnz_ecx</name><argument_list pos:start="2434:31" pos:end="2434:44">(<argument pos:start="2434:32" pos:end="2434:39"><expr pos:start="2434:32" pos:end="2434:39"><name pos:start="2434:32" pos:end="2434:39"><name pos:start="2434:32" pos:end="2434:32">s</name><operator pos:start="2434:33" pos:end="2434:34">-&gt;</operator><name pos:start="2434:35" pos:end="2434:39">aflag</name></name></expr></argument>, <argument pos:start="2434:42" pos:end="2434:43"><expr pos:start="2434:42" pos:end="2434:43"><name pos:start="2434:42" pos:end="2434:43">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="2435:17" pos:end="2435:22">break;</break>
            <default pos:start="2436:13" pos:end="2436:20">default:</default>
            <case pos:start="2437:13" pos:end="2437:19">case <expr pos:start="2437:18" pos:end="2437:18"><literal type="number" pos:start="2437:18" pos:end="2437:18">3</literal></expr>:</case> <comment type="block" pos:start="2437:21" pos:end="2437:30">/* jcxz */</comment>
                <expr_stmt pos:start="2438:17" pos:end="2438:44"><expr pos:start="2438:17" pos:end="2438:43"><call pos:start="2438:17" pos:end="2438:43"><name pos:start="2438:17" pos:end="2438:29">gen_op_jz_ecx</name><argument_list pos:start="2438:30" pos:end="2438:43">(<argument pos:start="2438:31" pos:end="2438:38"><expr pos:start="2438:31" pos:end="2438:38"><name pos:start="2438:31" pos:end="2438:38"><name pos:start="2438:31" pos:end="2438:31">s</name><operator pos:start="2438:32" pos:end="2438:33">-&gt;</operator><name pos:start="2438:34" pos:end="2438:38">aflag</name></name></expr></argument>, <argument pos:start="2438:41" pos:end="2438:42"><expr pos:start="2438:41" pos:end="2438:42"><name pos:start="2438:41" pos:end="2438:42">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="2439:17" pos:end="2439:22">break;</break>
            <expr_stmt pos:start="2440:13" pos:end="2440:30"><expr pos:start="2440:13" pos:end="2440:29"><call pos:start="2440:13" pos:end="2440:29"><name pos:start="2440:13" pos:end="2440:25">gen_set_label</name><argument_list pos:start="2440:26" pos:end="2440:29">(<argument pos:start="2440:27" pos:end="2440:28"><expr pos:start="2440:27" pos:end="2440:28"><name pos:start="2440:27" pos:end="2440:28">l3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2441:13" pos:end="2441:33"><expr pos:start="2441:13" pos:end="2441:32"><call pos:start="2441:13" pos:end="2441:32"><name pos:start="2441:13" pos:end="2441:22">gen_jmp_im</name><argument_list pos:start="2441:23" pos:end="2441:32">(<argument pos:start="2441:24" pos:end="2441:31"><expr pos:start="2441:24" pos:end="2441:31"><name pos:start="2441:24" pos:end="2441:31">next_eip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2442:13" pos:end="2442:27"><expr pos:start="2442:13" pos:end="2442:26"><call pos:start="2442:13" pos:end="2442:26"><name pos:start="2442:13" pos:end="2442:22">tcg_gen_br</name><argument_list pos:start="2442:23" pos:end="2442:26">(<argument pos:start="2442:24" pos:end="2442:25"><expr pos:start="2442:24" pos:end="2442:25"><name pos:start="2442:24" pos:end="2442:25">l2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2443:13" pos:end="2443:30"><expr pos:start="2443:13" pos:end="2443:29"><call pos:start="2443:13" pos:end="2443:29"><name pos:start="2443:13" pos:end="2443:25">gen_set_label</name><argument_list pos:start="2443:26" pos:end="2443:29">(<argument pos:start="2443:27" pos:end="2443:28"><expr pos:start="2443:27" pos:end="2443:28"><name pos:start="2443:27" pos:end="2443:28">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2444:13" pos:end="2444:29"><expr pos:start="2444:13" pos:end="2444:28"><call pos:start="2444:13" pos:end="2444:28"><name pos:start="2444:13" pos:end="2444:22">gen_jmp_im</name><argument_list pos:start="2444:23" pos:end="2444:28">(<argument pos:start="2444:24" pos:end="2444:27"><expr pos:start="2444:24" pos:end="2444:27"><name pos:start="2444:24" pos:end="2444:27">tval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2445:13" pos:end="2445:30"><expr pos:start="2445:13" pos:end="2445:29"><call pos:start="2445:13" pos:end="2445:29"><name pos:start="2445:13" pos:end="2445:25">gen_set_label</name><argument_list pos:start="2445:26" pos:end="2445:29">(<argument pos:start="2445:27" pos:end="2445:28"><expr pos:start="2445:27" pos:end="2445:28"><name pos:start="2445:27" pos:end="2445:28">l2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2446:13" pos:end="2446:23"><expr pos:start="2446:13" pos:end="2446:22"><call pos:start="2446:13" pos:end="2446:22"><name pos:start="2446:13" pos:end="2446:19">gen_eob</name><argument_list pos:start="2446:20" pos:end="2446:22">(<argument pos:start="2446:21" pos:end="2446:21"><expr pos:start="2446:21" pos:end="2446:21"><name pos:start="2446:21" pos:end="2446:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="2447:9" pos:end="2447:14">break;</break>
    <case pos:start="2448:5" pos:end="2448:15">case <expr pos:start="2448:10" pos:end="2448:14"><literal type="number" pos:start="2448:10" pos:end="2448:14">0x130</literal></expr>:</case> <comment type="block" pos:start="2448:17" pos:end="2448:27">/* wrmsr */</comment>
    <case pos:start="2449:5" pos:end="2449:15">case <expr pos:start="2449:10" pos:end="2449:14"><literal type="number" pos:start="2449:10" pos:end="2449:14">0x132</literal></expr>:</case> <comment type="block" pos:start="2449:17" pos:end="2449:27">/* rdmsr */</comment>
        <if_stmt pos:start="2450:9" pos:end="3141:17"><if pos:start="2450:9" pos:end="2452:9">if <condition pos:start="2450:12" pos:end="2450:24">(<expr pos:start="2450:13" pos:end="2450:23"><name pos:start="2450:13" pos:end="2450:18"><name pos:start="2450:13" pos:end="2450:13">s</name><operator pos:start="2450:14" pos:end="2450:15">-&gt;</operator><name pos:start="2450:16" pos:end="2450:18">cpl</name></name> <operator pos:start="2450:20" pos:end="2450:21">!=</operator> <literal type="number" pos:start="2450:23" pos:end="2450:23">0</literal></expr>)</condition> <block pos:start="2450:26" pos:end="2452:9">{<block_content pos:start="2451:13" pos:end="2451:64">
            <expr_stmt pos:start="2451:13" pos:end="2451:64"><expr pos:start="2451:13" pos:end="2451:63"><call pos:start="2451:13" pos:end="2451:63"><name pos:start="2451:13" pos:end="2451:25">gen_exception</name><argument_list pos:start="2451:26" pos:end="2451:63">(<argument pos:start="2451:27" pos:end="2451:27"><expr pos:start="2451:27" pos:end="2451:27"><name pos:start="2451:27" pos:end="2451:27">s</name></expr></argument>, <argument pos:start="2451:30" pos:end="2451:39"><expr pos:start="2451:30" pos:end="2451:39"><name pos:start="2451:30" pos:end="2451:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="2451:42" pos:end="2451:62"><expr pos:start="2451:42" pos:end="2451:62"><name pos:start="2451:42" pos:end="2451:49">pc_start</name> <operator pos:start="2451:51" pos:end="2451:51">-</operator> <name pos:start="2451:53" pos:end="2451:62"><name pos:start="2451:53" pos:end="2451:53">s</name><operator pos:start="2451:54" pos:end="2451:55">-&gt;</operator><name pos:start="2451:56" pos:end="2451:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="2452:11" pos:end="3141:17">else <block pos:start="2452:16" pos:end="3141:17">{<block_content pos:start="2453:13" pos:end="3141:17">
            <expr_stmt pos:start="2453:13" pos:end="2453:32"><expr pos:start="2453:13" pos:end="2453:31"><call pos:start="2453:13" pos:end="2453:31"><name pos:start="2453:13" pos:end="2453:28">gen_update_cc_op</name><argument_list pos:start="2453:29" pos:end="2453:31">(<argument pos:start="2453:30" pos:end="2453:30"><expr pos:start="2453:30" pos:end="2453:30"><name pos:start="2453:30" pos:end="2453:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2454:13" pos:end="2454:46"><expr pos:start="2454:13" pos:end="2454:45"><call pos:start="2454:13" pos:end="2454:45"><name pos:start="2454:13" pos:end="2454:22">gen_jmp_im</name><argument_list pos:start="2454:23" pos:end="2454:45">(<argument pos:start="2454:24" pos:end="2454:44"><expr pos:start="2454:24" pos:end="2454:44"><name pos:start="2454:24" pos:end="2454:31">pc_start</name> <operator pos:start="2454:33" pos:end="2454:33">-</operator> <name pos:start="2454:35" pos:end="2454:44"><name pos:start="2454:35" pos:end="2454:35">s</name><operator pos:start="2454:36" pos:end="2454:37">-&gt;</operator><name pos:start="2454:38" pos:end="2454:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="2455:13" pos:end="3141:17"><if pos:start="2455:13" pos:end="2457:13">if <condition pos:start="2455:16" pos:end="2455:22">(<expr pos:start="2455:17" pos:end="2455:21"><name pos:start="2455:17" pos:end="2455:17">b</name> <operator pos:start="2455:19" pos:end="2455:19">&amp;</operator> <literal type="number" pos:start="2455:21" pos:end="2455:21">2</literal></expr>)</condition> <block pos:start="2455:24" pos:end="2457:13">{<block_content pos:start="2456:17" pos:end="2456:42">
                <expr_stmt pos:start="2456:17" pos:end="2456:42"><expr pos:start="2456:17" pos:end="2456:41"><call pos:start="2456:17" pos:end="2456:41"><name pos:start="2456:17" pos:end="2456:32">gen_helper_rdmsr</name><argument_list pos:start="2456:33" pos:end="2456:41">(<argument pos:start="2456:34" pos:end="2456:40"><expr pos:start="2456:34" pos:end="2456:40"><name pos:start="2456:34" pos:end="2456:40">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="2457:15" pos:end="3141:17">else <block pos:start="2457:20" pos:end="3141:17">{<block_content pos:start="2458:17" pos:end="3141:17">
                <expr_stmt pos:start="2458:17" pos:end="2458:42"><expr pos:start="2458:17" pos:end="2458:41"><call pos:start="2458:17" pos:end="2458:41"><name pos:start="2458:17" pos:end="2458:32">gen_helper_wrmsr</name><argument_list pos:start="2458:33" pos:end="2458:41">(<argument pos:start="2458:34" pos:end="2458:40"><expr pos:start="2458:34" pos:end="2458:40"><name pos:start="2458:34" pos:end="2458:40">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="2459:9" pos:end="2459:14">break;</break>
    <case pos:start="2460:5" pos:end="2460:15">case <expr pos:start="2460:10" pos:end="2460:14"><literal type="number" pos:start="2460:10" pos:end="2460:14">0x131</literal></expr>:</case> <comment type="block" pos:start="2460:17" pos:end="2460:27">/* rdtsc */</comment>
        <expr_stmt pos:start="2461:9" pos:end="2461:28"><expr pos:start="2461:9" pos:end="2461:27"><call pos:start="2461:9" pos:end="2461:27"><name pos:start="2461:9" pos:end="2461:24">gen_update_cc_op</name><argument_list pos:start="2461:25" pos:end="2461:27">(<argument pos:start="2461:26" pos:end="2461:26"><expr pos:start="2461:26" pos:end="2461:26"><name pos:start="2461:26" pos:end="2461:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2462:9" pos:end="2462:42"><expr pos:start="2462:9" pos:end="2462:41"><call pos:start="2462:9" pos:end="2462:41"><name pos:start="2462:9" pos:end="2462:18">gen_jmp_im</name><argument_list pos:start="2462:19" pos:end="2462:41">(<argument pos:start="2462:20" pos:end="2462:40"><expr pos:start="2462:20" pos:end="2462:40"><name pos:start="2462:20" pos:end="2462:27">pc_start</name> <operator pos:start="2462:29" pos:end="2462:29">-</operator> <name pos:start="2462:31" pos:end="2462:40"><name pos:start="2462:31" pos:end="2462:31">s</name><operator pos:start="2462:32" pos:end="2462:33">-&gt;</operator><name pos:start="2462:34" pos:end="2462:40">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="2463:9" pos:end="2464:27"><if pos:start="2463:9" pos:end="2464:27">if <condition pos:start="2463:12" pos:end="2463:23">(<expr pos:start="2463:13" pos:end="2463:22"><name pos:start="2463:13" pos:end="2463:22">use_icount</name></expr>)</condition><block type="pseudo" pos:start="2464:13" pos:end="2464:27"><block_content pos:start="2464:13" pos:end="2464:27">
            <expr_stmt pos:start="2464:13" pos:end="2464:27"><expr pos:start="2464:13" pos:end="2464:26"><call pos:start="2464:13" pos:end="2464:26"><name pos:start="2464:13" pos:end="2464:24">gen_io_start</name><argument_list pos:start="2464:25" pos:end="2464:26">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="2465:9" pos:end="2465:34"><expr pos:start="2465:9" pos:end="2465:33"><call pos:start="2465:9" pos:end="2465:33"><name pos:start="2465:9" pos:end="2465:24">gen_helper_rdtsc</name><argument_list pos:start="2465:25" pos:end="2465:33">(<argument pos:start="2465:26" pos:end="2465:32"><expr pos:start="2465:26" pos:end="2465:32"><name pos:start="2465:26" pos:end="2465:32">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="2466:9" pos:end="3141:17"><if pos:start="2466:9" pos:end="3141:17">if <condition pos:start="2466:12" pos:end="2466:23">(<expr pos:start="2466:13" pos:end="2466:22"><name pos:start="2466:13" pos:end="2466:22">use_icount</name></expr>)</condition> <block pos:start="2466:25" pos:end="3141:17">{<block_content pos:start="2467:13" pos:end="3141:17">
            <expr_stmt pos:start="2467:13" pos:end="2467:25"><expr pos:start="2467:13" pos:end="2467:24"><call pos:start="2467:13" pos:end="2467:24"><name pos:start="2467:13" pos:end="2467:22">gen_io_end</name><argument_list pos:start="2467:23" pos:end="2467:24">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2468:13" pos:end="2468:43"><expr pos:start="2468:13" pos:end="2468:42"><call pos:start="2468:13" pos:end="2468:42"><name pos:start="2468:13" pos:end="2468:19">gen_jmp</name><argument_list pos:start="2468:20" pos:end="2468:42">(<argument pos:start="2468:21" pos:end="2468:21"><expr pos:start="2468:21" pos:end="2468:21"><name pos:start="2468:21" pos:end="2468:21">s</name></expr></argument>, <argument pos:start="2468:24" pos:end="2468:41"><expr pos:start="2468:24" pos:end="2468:41"><name pos:start="2468:24" pos:end="2468:28"><name pos:start="2468:24" pos:end="2468:24">s</name><operator pos:start="2468:25" pos:end="2468:26">-&gt;</operator><name pos:start="2468:27" pos:end="2468:28">pc</name></name> <operator pos:start="2468:30" pos:end="2468:30">-</operator> <name pos:start="2468:32" pos:end="2468:41"><name pos:start="2468:32" pos:end="2468:32">s</name><operator pos:start="2468:33" pos:end="2468:34">-&gt;</operator><name pos:start="2468:35" pos:end="2468:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="2469:9" pos:end="2469:14">break;</break>
    <case pos:start="2470:5" pos:end="2470:15">case <expr pos:start="2470:10" pos:end="2470:14"><literal type="number" pos:start="2470:10" pos:end="2470:14">0x133</literal></expr>:</case> <comment type="block" pos:start="2470:17" pos:end="2470:27">/* rdpmc */</comment>
        <expr_stmt pos:start="2471:9" pos:end="2471:28"><expr pos:start="2471:9" pos:end="2471:27"><call pos:start="2471:9" pos:end="2471:27"><name pos:start="2471:9" pos:end="2471:24">gen_update_cc_op</name><argument_list pos:start="2471:25" pos:end="2471:27">(<argument pos:start="2471:26" pos:end="2471:26"><expr pos:start="2471:26" pos:end="2471:26"><name pos:start="2471:26" pos:end="2471:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2472:9" pos:end="2472:42"><expr pos:start="2472:9" pos:end="2472:41"><call pos:start="2472:9" pos:end="2472:41"><name pos:start="2472:9" pos:end="2472:18">gen_jmp_im</name><argument_list pos:start="2472:19" pos:end="2472:41">(<argument pos:start="2472:20" pos:end="2472:40"><expr pos:start="2472:20" pos:end="2472:40"><name pos:start="2472:20" pos:end="2472:27">pc_start</name> <operator pos:start="2472:29" pos:end="2472:29">-</operator> <name pos:start="2472:31" pos:end="2472:40"><name pos:start="2472:31" pos:end="2472:31">s</name><operator pos:start="2472:32" pos:end="2472:33">-&gt;</operator><name pos:start="2472:34" pos:end="2472:40">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2473:9" pos:end="2473:34"><expr pos:start="2473:9" pos:end="2473:33"><call pos:start="2473:9" pos:end="2473:33"><name pos:start="2473:9" pos:end="2473:24">gen_helper_rdpmc</name><argument_list pos:start="2473:25" pos:end="2473:33">(<argument pos:start="2473:26" pos:end="2473:32"><expr pos:start="2473:26" pos:end="2473:32"><name pos:start="2473:26" pos:end="2473:32">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="2474:9" pos:end="2474:14">break;</break>
    <case pos:start="2475:5" pos:end="2475:15">case <expr pos:start="2475:10" pos:end="2475:14"><literal type="number" pos:start="2475:10" pos:end="2475:14">0x134</literal></expr>:</case> <comment type="block" pos:start="2475:17" pos:end="2475:30">/* sysenter */</comment>
        <comment type="block" pos:start="2476:9" pos:end="2476:51">/* For Intel SYSENTER is valid on 64-bit */</comment>
        <if_stmt pos:start="2477:9" pos:end="3141:17"><if pos:start="2477:9" pos:end="3141:17">if <condition pos:start="2477:12" pos:end="2477:68">(<expr pos:start="2477:13" pos:end="2477:67"><call pos:start="2477:13" pos:end="2477:21"><name pos:start="2477:13" pos:end="2477:18">CODE64</name><argument_list pos:start="2477:19" pos:end="2477:21">(<argument pos:start="2477:20" pos:end="2477:20"><expr pos:start="2477:20" pos:end="2477:20"><name pos:start="2477:20" pos:end="2477:20">s</name></expr></argument>)</argument_list></call> <operator pos:start="2477:23" pos:end="2477:24">&amp;&amp;</operator> <name pos:start="2477:26" pos:end="2477:43"><name pos:start="2477:26" pos:end="2477:28">env</name><operator pos:start="2477:29" pos:end="2477:30">-&gt;</operator><name pos:start="2477:31" pos:end="2477:43">cpuid_vendor1</name></name> <operator pos:start="2477:45" pos:end="2477:46">!=</operator> <name pos:start="2477:48" pos:end="2477:67">CPUID_VENDOR_INTEL_1</name></expr>)</condition><block type="pseudo" pos:start="2478:9" pos:end="3141:17"><block_content pos:start="2478:9" pos:end="3141:17">
        <if_stmt pos:start="2478:9" pos:end="3141:17"><if pos:start="2478:9" pos:end="2480:9">if <condition pos:start="2478:12" pos:end="2478:19">(<expr pos:start="2478:13" pos:end="2478:18"><operator pos:start="2478:13" pos:end="2478:13">!</operator><name pos:start="2478:14" pos:end="2478:18"><name pos:start="2478:14" pos:end="2478:14">s</name><operator pos:start="2478:15" pos:end="2478:16">-&gt;</operator><name pos:start="2478:17" pos:end="2478:18">pe</name></name></expr>)</condition> <block pos:start="2478:21" pos:end="2480:9">{<block_content pos:start="2479:13" pos:end="2479:64">
            <expr_stmt pos:start="2479:13" pos:end="2479:64"><expr pos:start="2479:13" pos:end="2479:63"><call pos:start="2479:13" pos:end="2479:63"><name pos:start="2479:13" pos:end="2479:25">gen_exception</name><argument_list pos:start="2479:26" pos:end="2479:63">(<argument pos:start="2479:27" pos:end="2479:27"><expr pos:start="2479:27" pos:end="2479:27"><name pos:start="2479:27" pos:end="2479:27">s</name></expr></argument>, <argument pos:start="2479:30" pos:end="2479:39"><expr pos:start="2479:30" pos:end="2479:39"><name pos:start="2479:30" pos:end="2479:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="2479:42" pos:end="2479:62"><expr pos:start="2479:42" pos:end="2479:62"><name pos:start="2479:42" pos:end="2479:49">pc_start</name> <operator pos:start="2479:51" pos:end="2479:51">-</operator> <name pos:start="2479:53" pos:end="2479:62"><name pos:start="2479:53" pos:end="2479:53">s</name><operator pos:start="2479:54" pos:end="2479:55">-&gt;</operator><name pos:start="2479:56" pos:end="2479:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="2480:11" pos:end="3141:17">else <block pos:start="2480:16" pos:end="3141:17">{<block_content pos:start="2481:13" pos:end="3141:17">
            <expr_stmt pos:start="2481:13" pos:end="2481:32"><expr pos:start="2481:13" pos:end="2481:31"><call pos:start="2481:13" pos:end="2481:31"><name pos:start="2481:13" pos:end="2481:28">gen_update_cc_op</name><argument_list pos:start="2481:29" pos:end="2481:31">(<argument pos:start="2481:30" pos:end="2481:30"><expr pos:start="2481:30" pos:end="2481:30"><name pos:start="2481:30" pos:end="2481:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2482:13" pos:end="2482:46"><expr pos:start="2482:13" pos:end="2482:45"><call pos:start="2482:13" pos:end="2482:45"><name pos:start="2482:13" pos:end="2482:22">gen_jmp_im</name><argument_list pos:start="2482:23" pos:end="2482:45">(<argument pos:start="2482:24" pos:end="2482:44"><expr pos:start="2482:24" pos:end="2482:44"><name pos:start="2482:24" pos:end="2482:31">pc_start</name> <operator pos:start="2482:33" pos:end="2482:33">-</operator> <name pos:start="2482:35" pos:end="2482:44"><name pos:start="2482:35" pos:end="2482:35">s</name><operator pos:start="2482:36" pos:end="2482:37">-&gt;</operator><name pos:start="2482:38" pos:end="2482:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2483:13" pos:end="2483:41"><expr pos:start="2483:13" pos:end="2483:40"><call pos:start="2483:13" pos:end="2483:40"><name pos:start="2483:13" pos:end="2483:31">gen_helper_sysenter</name><argument_list pos:start="2483:32" pos:end="2483:40">(<argument pos:start="2483:33" pos:end="2483:39"><expr pos:start="2483:33" pos:end="2483:39"><name pos:start="2483:33" pos:end="2483:39">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2484:13" pos:end="2484:23"><expr pos:start="2484:13" pos:end="2484:22"><call pos:start="2484:13" pos:end="2484:22"><name pos:start="2484:13" pos:end="2484:19">gen_eob</name><argument_list pos:start="2484:20" pos:end="2484:22">(<argument pos:start="2484:21" pos:end="2484:21"><expr pos:start="2484:21" pos:end="2484:21"><name pos:start="2484:21" pos:end="2484:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="2485:9" pos:end="2485:14">break;</break>
    <case pos:start="2486:5" pos:end="2486:15">case <expr pos:start="2486:10" pos:end="2486:14"><literal type="number" pos:start="2486:10" pos:end="2486:14">0x135</literal></expr>:</case> <comment type="block" pos:start="2486:17" pos:end="2486:29">/* sysexit */</comment>
        <comment type="block" pos:start="2487:9" pos:end="2487:50">/* For Intel SYSEXIT is valid on 64-bit */</comment>
        <if_stmt pos:start="2488:9" pos:end="3141:17"><if pos:start="2488:9" pos:end="3141:17">if <condition pos:start="2488:12" pos:end="2488:68">(<expr pos:start="2488:13" pos:end="2488:67"><call pos:start="2488:13" pos:end="2488:21"><name pos:start="2488:13" pos:end="2488:18">CODE64</name><argument_list pos:start="2488:19" pos:end="2488:21">(<argument pos:start="2488:20" pos:end="2488:20"><expr pos:start="2488:20" pos:end="2488:20"><name pos:start="2488:20" pos:end="2488:20">s</name></expr></argument>)</argument_list></call> <operator pos:start="2488:23" pos:end="2488:24">&amp;&amp;</operator> <name pos:start="2488:26" pos:end="2488:43"><name pos:start="2488:26" pos:end="2488:28">env</name><operator pos:start="2488:29" pos:end="2488:30">-&gt;</operator><name pos:start="2488:31" pos:end="2488:43">cpuid_vendor1</name></name> <operator pos:start="2488:45" pos:end="2488:46">!=</operator> <name pos:start="2488:48" pos:end="2488:67">CPUID_VENDOR_INTEL_1</name></expr>)</condition><block type="pseudo" pos:start="2489:9" pos:end="3141:17"><block_content pos:start="2489:9" pos:end="3141:17">
        <if_stmt pos:start="2489:9" pos:end="3141:17"><if pos:start="2489:9" pos:end="2491:9">if <condition pos:start="2489:12" pos:end="2489:19">(<expr pos:start="2489:13" pos:end="2489:18"><operator pos:start="2489:13" pos:end="2489:13">!</operator><name pos:start="2489:14" pos:end="2489:18"><name pos:start="2489:14" pos:end="2489:14">s</name><operator pos:start="2489:15" pos:end="2489:16">-&gt;</operator><name pos:start="2489:17" pos:end="2489:18">pe</name></name></expr>)</condition> <block pos:start="2489:21" pos:end="2491:9">{<block_content pos:start="2490:13" pos:end="2490:64">
            <expr_stmt pos:start="2490:13" pos:end="2490:64"><expr pos:start="2490:13" pos:end="2490:63"><call pos:start="2490:13" pos:end="2490:63"><name pos:start="2490:13" pos:end="2490:25">gen_exception</name><argument_list pos:start="2490:26" pos:end="2490:63">(<argument pos:start="2490:27" pos:end="2490:27"><expr pos:start="2490:27" pos:end="2490:27"><name pos:start="2490:27" pos:end="2490:27">s</name></expr></argument>, <argument pos:start="2490:30" pos:end="2490:39"><expr pos:start="2490:30" pos:end="2490:39"><name pos:start="2490:30" pos:end="2490:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="2490:42" pos:end="2490:62"><expr pos:start="2490:42" pos:end="2490:62"><name pos:start="2490:42" pos:end="2490:49">pc_start</name> <operator pos:start="2490:51" pos:end="2490:51">-</operator> <name pos:start="2490:53" pos:end="2490:62"><name pos:start="2490:53" pos:end="2490:53">s</name><operator pos:start="2490:54" pos:end="2490:55">-&gt;</operator><name pos:start="2490:56" pos:end="2490:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="2491:11" pos:end="3141:17">else <block pos:start="2491:16" pos:end="3141:17">{<block_content pos:start="2492:13" pos:end="3141:17">
            <expr_stmt pos:start="2492:13" pos:end="2492:32"><expr pos:start="2492:13" pos:end="2492:31"><call pos:start="2492:13" pos:end="2492:31"><name pos:start="2492:13" pos:end="2492:28">gen_update_cc_op</name><argument_list pos:start="2492:29" pos:end="2492:31">(<argument pos:start="2492:30" pos:end="2492:30"><expr pos:start="2492:30" pos:end="2492:30"><name pos:start="2492:30" pos:end="2492:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2493:13" pos:end="2493:46"><expr pos:start="2493:13" pos:end="2493:45"><call pos:start="2493:13" pos:end="2493:45"><name pos:start="2493:13" pos:end="2493:22">gen_jmp_im</name><argument_list pos:start="2493:23" pos:end="2493:45">(<argument pos:start="2493:24" pos:end="2493:44"><expr pos:start="2493:24" pos:end="2493:44"><name pos:start="2493:24" pos:end="2493:31">pc_start</name> <operator pos:start="2493:33" pos:end="2493:33">-</operator> <name pos:start="2493:35" pos:end="2493:44"><name pos:start="2493:35" pos:end="2493:35">s</name><operator pos:start="2493:36" pos:end="2493:37">-&gt;</operator><name pos:start="2493:38" pos:end="2493:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2494:13" pos:end="2494:62"><expr pos:start="2494:13" pos:end="2494:61"><call pos:start="2494:13" pos:end="2494:61"><name pos:start="2494:13" pos:end="2494:30">gen_helper_sysexit</name><argument_list pos:start="2494:31" pos:end="2494:61">(<argument pos:start="2494:32" pos:end="2494:38"><expr pos:start="2494:32" pos:end="2494:38"><name pos:start="2494:32" pos:end="2494:38">cpu_env</name></expr></argument>, <argument pos:start="2494:41" pos:end="2494:60"><expr pos:start="2494:41" pos:end="2494:60"><call pos:start="2494:41" pos:end="2494:60"><name pos:start="2494:41" pos:end="2494:53">tcg_const_i32</name><argument_list pos:start="2494:54" pos:end="2494:60">(<argument pos:start="2494:55" pos:end="2494:59"><expr pos:start="2494:55" pos:end="2494:59"><name pos:start="2494:55" pos:end="2494:59">dflag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2495:13" pos:end="2495:23"><expr pos:start="2495:13" pos:end="2495:22"><call pos:start="2495:13" pos:end="2495:22"><name pos:start="2495:13" pos:end="2495:19">gen_eob</name><argument_list pos:start="2495:20" pos:end="2495:22">(<argument pos:start="2495:21" pos:end="2495:21"><expr pos:start="2495:21" pos:end="2495:21"><name pos:start="2495:21" pos:end="2495:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="2496:9" pos:end="2498:0">break;</break>
<cpp:ifdef pos:start="2497:1" pos:end="2497:20">#<cpp:directive pos:start="2497:2" pos:end="2497:6">ifdef</cpp:directive> <name pos:start="2497:8" pos:end="2497:20">TARGET_X86_64</name></cpp:ifdef>
    <case pos:start="2498:5" pos:end="2498:15">case <expr pos:start="2498:10" pos:end="2498:14"><literal type="number" pos:start="2498:10" pos:end="2498:14">0x105</literal></expr>:</case> <comment type="block" pos:start="2498:17" pos:end="2498:29">/* syscall */</comment>
        <comment type="block" pos:start="2499:9" pos:end="2499:46">/* XXX: is it usable in real mode ? */</comment>
        <expr_stmt pos:start="2500:9" pos:end="2500:28"><expr pos:start="2500:9" pos:end="2500:27"><call pos:start="2500:9" pos:end="2500:27"><name pos:start="2500:9" pos:end="2500:24">gen_update_cc_op</name><argument_list pos:start="2500:25" pos:end="2500:27">(<argument pos:start="2500:26" pos:end="2500:26"><expr pos:start="2500:26" pos:end="2500:26"><name pos:start="2500:26" pos:end="2500:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2501:9" pos:end="2501:42"><expr pos:start="2501:9" pos:end="2501:41"><call pos:start="2501:9" pos:end="2501:41"><name pos:start="2501:9" pos:end="2501:18">gen_jmp_im</name><argument_list pos:start="2501:19" pos:end="2501:41">(<argument pos:start="2501:20" pos:end="2501:40"><expr pos:start="2501:20" pos:end="2501:40"><name pos:start="2501:20" pos:end="2501:27">pc_start</name> <operator pos:start="2501:29" pos:end="2501:29">-</operator> <name pos:start="2501:31" pos:end="2501:40"><name pos:start="2501:31" pos:end="2501:31">s</name><operator pos:start="2501:32" pos:end="2501:33">-&gt;</operator><name pos:start="2501:34" pos:end="2501:40">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2502:9" pos:end="2502:69"><expr pos:start="2502:9" pos:end="2502:68"><call pos:start="2502:9" pos:end="2502:68"><name pos:start="2502:9" pos:end="2502:26">gen_helper_syscall</name><argument_list pos:start="2502:27" pos:end="2502:68">(<argument pos:start="2502:28" pos:end="2502:34"><expr pos:start="2502:28" pos:end="2502:34"><name pos:start="2502:28" pos:end="2502:34">cpu_env</name></expr></argument>, <argument pos:start="2502:37" pos:end="2502:67"><expr pos:start="2502:37" pos:end="2502:67"><call pos:start="2502:37" pos:end="2502:67"><name pos:start="2502:37" pos:end="2502:49">tcg_const_i32</name><argument_list pos:start="2502:50" pos:end="2502:67">(<argument pos:start="2502:51" pos:end="2502:66"><expr pos:start="2502:51" pos:end="2502:66"><name pos:start="2502:51" pos:end="2502:55"><name pos:start="2502:51" pos:end="2502:51">s</name><operator pos:start="2502:52" pos:end="2502:53">-&gt;</operator><name pos:start="2502:54" pos:end="2502:55">pc</name></name> <operator pos:start="2502:57" pos:end="2502:57">-</operator> <name pos:start="2502:59" pos:end="2502:66">pc_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2503:9" pos:end="2503:19"><expr pos:start="2503:9" pos:end="2503:18"><call pos:start="2503:9" pos:end="2503:18"><name pos:start="2503:9" pos:end="2503:15">gen_eob</name><argument_list pos:start="2503:16" pos:end="2503:18">(<argument pos:start="2503:17" pos:end="2503:17"><expr pos:start="2503:17" pos:end="2503:17"><name pos:start="2503:17" pos:end="2503:17">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="2504:9" pos:end="2504:14">break;</break>
    <case pos:start="2505:5" pos:end="2505:15">case <expr pos:start="2505:10" pos:end="2505:14"><literal type="number" pos:start="2505:10" pos:end="2505:14">0x107</literal></expr>:</case> <comment type="block" pos:start="2505:17" pos:end="2505:28">/* sysret */</comment>
        <if_stmt pos:start="2506:9" pos:end="3141:17"><if pos:start="2506:9" pos:end="2508:9">if <condition pos:start="2506:12" pos:end="2506:19">(<expr pos:start="2506:13" pos:end="2506:18"><operator pos:start="2506:13" pos:end="2506:13">!</operator><name pos:start="2506:14" pos:end="2506:18"><name pos:start="2506:14" pos:end="2506:14">s</name><operator pos:start="2506:15" pos:end="2506:16">-&gt;</operator><name pos:start="2506:17" pos:end="2506:18">pe</name></name></expr>)</condition> <block pos:start="2506:21" pos:end="2508:9">{<block_content pos:start="2507:13" pos:end="2507:64">
            <expr_stmt pos:start="2507:13" pos:end="2507:64"><expr pos:start="2507:13" pos:end="2507:63"><call pos:start="2507:13" pos:end="2507:63"><name pos:start="2507:13" pos:end="2507:25">gen_exception</name><argument_list pos:start="2507:26" pos:end="2507:63">(<argument pos:start="2507:27" pos:end="2507:27"><expr pos:start="2507:27" pos:end="2507:27"><name pos:start="2507:27" pos:end="2507:27">s</name></expr></argument>, <argument pos:start="2507:30" pos:end="2507:39"><expr pos:start="2507:30" pos:end="2507:39"><name pos:start="2507:30" pos:end="2507:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="2507:42" pos:end="2507:62"><expr pos:start="2507:42" pos:end="2507:62"><name pos:start="2507:42" pos:end="2507:49">pc_start</name> <operator pos:start="2507:51" pos:end="2507:51">-</operator> <name pos:start="2507:53" pos:end="2507:62"><name pos:start="2507:53" pos:end="2507:53">s</name><operator pos:start="2507:54" pos:end="2507:55">-&gt;</operator><name pos:start="2507:56" pos:end="2507:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="2508:11" pos:end="3141:17">else <block pos:start="2508:16" pos:end="3141:17">{<block_content pos:start="2509:13" pos:end="3141:17">
            <expr_stmt pos:start="2509:13" pos:end="2509:32"><expr pos:start="2509:13" pos:end="2509:31"><call pos:start="2509:13" pos:end="2509:31"><name pos:start="2509:13" pos:end="2509:28">gen_update_cc_op</name><argument_list pos:start="2509:29" pos:end="2509:31">(<argument pos:start="2509:30" pos:end="2509:30"><expr pos:start="2509:30" pos:end="2509:30"><name pos:start="2509:30" pos:end="2509:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2510:13" pos:end="2510:46"><expr pos:start="2510:13" pos:end="2510:45"><call pos:start="2510:13" pos:end="2510:45"><name pos:start="2510:13" pos:end="2510:22">gen_jmp_im</name><argument_list pos:start="2510:23" pos:end="2510:45">(<argument pos:start="2510:24" pos:end="2510:44"><expr pos:start="2510:24" pos:end="2510:44"><name pos:start="2510:24" pos:end="2510:31">pc_start</name> <operator pos:start="2510:33" pos:end="2510:33">-</operator> <name pos:start="2510:35" pos:end="2510:44"><name pos:start="2510:35" pos:end="2510:35">s</name><operator pos:start="2510:36" pos:end="2510:37">-&gt;</operator><name pos:start="2510:38" pos:end="2510:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2511:13" pos:end="2511:64"><expr pos:start="2511:13" pos:end="2511:63"><call pos:start="2511:13" pos:end="2511:63"><name pos:start="2511:13" pos:end="2511:29">gen_helper_sysret</name><argument_list pos:start="2511:30" pos:end="2511:63">(<argument pos:start="2511:31" pos:end="2511:37"><expr pos:start="2511:31" pos:end="2511:37"><name pos:start="2511:31" pos:end="2511:37">cpu_env</name></expr></argument>, <argument pos:start="2511:40" pos:end="2511:62"><expr pos:start="2511:40" pos:end="2511:62"><call pos:start="2511:40" pos:end="2511:62"><name pos:start="2511:40" pos:end="2511:52">tcg_const_i32</name><argument_list pos:start="2511:53" pos:end="2511:62">(<argument pos:start="2511:54" pos:end="2511:61"><expr pos:start="2511:54" pos:end="2511:61"><name pos:start="2511:54" pos:end="2511:61"><name pos:start="2511:54" pos:end="2511:54">s</name><operator pos:start="2511:55" pos:end="2511:56">-&gt;</operator><name pos:start="2511:57" pos:end="2511:61">dflag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block" pos:start="2512:13" pos:end="2512:64">/* condition codes are modified only in long mode */</comment>
            <if_stmt pos:start="2513:13" pos:end="3141:17"><if pos:start="2513:13" pos:end="3141:17">if <condition pos:start="2513:16" pos:end="2513:23">(<expr pos:start="2513:17" pos:end="2513:22"><name pos:start="2513:17" pos:end="2513:22"><name pos:start="2513:17" pos:end="2513:17">s</name><operator pos:start="2513:18" pos:end="2513:19">-&gt;</operator><name pos:start="2513:20" pos:end="2513:22">lma</name></name></expr>)</condition> <block pos:start="2513:25" pos:end="3141:17">{<block_content pos:start="2514:17" pos:end="3141:17">
                <expr_stmt pos:start="2514:17" pos:end="2514:43"><expr pos:start="2514:17" pos:end="2514:42"><call pos:start="2514:17" pos:end="2514:42"><name pos:start="2514:17" pos:end="2514:25">set_cc_op</name><argument_list pos:start="2514:26" pos:end="2514:42">(<argument pos:start="2514:27" pos:end="2514:27"><expr pos:start="2514:27" pos:end="2514:27"><name pos:start="2514:27" pos:end="2514:27">s</name></expr></argument>, <argument pos:start="2514:30" pos:end="2514:41"><expr pos:start="2514:30" pos:end="2514:41"><name pos:start="2514:30" pos:end="2514:41">CC_OP_EFLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2515:13" pos:end="2515:23"><expr pos:start="2515:13" pos:end="2515:22"><call pos:start="2515:13" pos:end="2515:22"><name pos:start="2515:13" pos:end="2515:19">gen_eob</name><argument_list pos:start="2515:20" pos:end="2515:22">(<argument pos:start="2515:21" pos:end="2515:21"><expr pos:start="2515:21" pos:end="2515:21"><name pos:start="2515:21" pos:end="2515:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="2516:9" pos:end="2518:0">break;</break>
<cpp:endif pos:start="2517:1" pos:end="2517:6">#<cpp:directive pos:start="2517:2" pos:end="2517:6">endif</cpp:directive></cpp:endif>
    <case pos:start="2518:5" pos:end="2518:15">case <expr pos:start="2518:10" pos:end="2518:14"><literal type="number" pos:start="2518:10" pos:end="2518:14">0x1a2</literal></expr>:</case> <comment type="block" pos:start="2518:17" pos:end="2518:27">/* cpuid */</comment>
        <expr_stmt pos:start="2519:9" pos:end="2519:28"><expr pos:start="2519:9" pos:end="2519:27"><call pos:start="2519:9" pos:end="2519:27"><name pos:start="2519:9" pos:end="2519:24">gen_update_cc_op</name><argument_list pos:start="2519:25" pos:end="2519:27">(<argument pos:start="2519:26" pos:end="2519:26"><expr pos:start="2519:26" pos:end="2519:26"><name pos:start="2519:26" pos:end="2519:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2520:9" pos:end="2520:42"><expr pos:start="2520:9" pos:end="2520:41"><call pos:start="2520:9" pos:end="2520:41"><name pos:start="2520:9" pos:end="2520:18">gen_jmp_im</name><argument_list pos:start="2520:19" pos:end="2520:41">(<argument pos:start="2520:20" pos:end="2520:40"><expr pos:start="2520:20" pos:end="2520:40"><name pos:start="2520:20" pos:end="2520:27">pc_start</name> <operator pos:start="2520:29" pos:end="2520:29">-</operator> <name pos:start="2520:31" pos:end="2520:40"><name pos:start="2520:31" pos:end="2520:31">s</name><operator pos:start="2520:32" pos:end="2520:33">-&gt;</operator><name pos:start="2520:34" pos:end="2520:40">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2521:9" pos:end="2521:34"><expr pos:start="2521:9" pos:end="2521:33"><call pos:start="2521:9" pos:end="2521:33"><name pos:start="2521:9" pos:end="2521:24">gen_helper_cpuid</name><argument_list pos:start="2521:25" pos:end="2521:33">(<argument pos:start="2521:26" pos:end="2521:32"><expr pos:start="2521:26" pos:end="2521:32"><name pos:start="2521:26" pos:end="2521:32">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="2522:9" pos:end="2522:14">break;</break>
    <case pos:start="2523:5" pos:end="2523:14">case <expr pos:start="2523:10" pos:end="2523:13"><literal type="number" pos:start="2523:10" pos:end="2523:13">0xf4</literal></expr>:</case> <comment type="block" pos:start="2523:16" pos:end="2523:24">/* hlt */</comment>
        <if_stmt pos:start="2524:9" pos:end="3141:17"><if pos:start="2524:9" pos:end="2526:9">if <condition pos:start="2524:12" pos:end="2524:24">(<expr pos:start="2524:13" pos:end="2524:23"><name pos:start="2524:13" pos:end="2524:18"><name pos:start="2524:13" pos:end="2524:13">s</name><operator pos:start="2524:14" pos:end="2524:15">-&gt;</operator><name pos:start="2524:16" pos:end="2524:18">cpl</name></name> <operator pos:start="2524:20" pos:end="2524:21">!=</operator> <literal type="number" pos:start="2524:23" pos:end="2524:23">0</literal></expr>)</condition> <block pos:start="2524:26" pos:end="2526:9">{<block_content pos:start="2525:13" pos:end="2525:64">
            <expr_stmt pos:start="2525:13" pos:end="2525:64"><expr pos:start="2525:13" pos:end="2525:63"><call pos:start="2525:13" pos:end="2525:63"><name pos:start="2525:13" pos:end="2525:25">gen_exception</name><argument_list pos:start="2525:26" pos:end="2525:63">(<argument pos:start="2525:27" pos:end="2525:27"><expr pos:start="2525:27" pos:end="2525:27"><name pos:start="2525:27" pos:end="2525:27">s</name></expr></argument>, <argument pos:start="2525:30" pos:end="2525:39"><expr pos:start="2525:30" pos:end="2525:39"><name pos:start="2525:30" pos:end="2525:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="2525:42" pos:end="2525:62"><expr pos:start="2525:42" pos:end="2525:62"><name pos:start="2525:42" pos:end="2525:49">pc_start</name> <operator pos:start="2525:51" pos:end="2525:51">-</operator> <name pos:start="2525:53" pos:end="2525:62"><name pos:start="2525:53" pos:end="2525:53">s</name><operator pos:start="2525:54" pos:end="2525:55">-&gt;</operator><name pos:start="2525:56" pos:end="2525:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="2526:11" pos:end="3141:17">else <block pos:start="2526:16" pos:end="3141:17">{<block_content pos:start="2527:13" pos:end="3141:17">
            <expr_stmt pos:start="2527:13" pos:end="2527:32"><expr pos:start="2527:13" pos:end="2527:31"><call pos:start="2527:13" pos:end="2527:31"><name pos:start="2527:13" pos:end="2527:28">gen_update_cc_op</name><argument_list pos:start="2527:29" pos:end="2527:31">(<argument pos:start="2527:30" pos:end="2527:30"><expr pos:start="2527:30" pos:end="2527:30"><name pos:start="2527:30" pos:end="2527:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2528:13" pos:end="2528:46"><expr pos:start="2528:13" pos:end="2528:45"><call pos:start="2528:13" pos:end="2528:45"><name pos:start="2528:13" pos:end="2528:22">gen_jmp_im</name><argument_list pos:start="2528:23" pos:end="2528:45">(<argument pos:start="2528:24" pos:end="2528:44"><expr pos:start="2528:24" pos:end="2528:44"><name pos:start="2528:24" pos:end="2528:31">pc_start</name> <operator pos:start="2528:33" pos:end="2528:33">-</operator> <name pos:start="2528:35" pos:end="2528:44"><name pos:start="2528:35" pos:end="2528:35">s</name><operator pos:start="2528:36" pos:end="2528:37">-&gt;</operator><name pos:start="2528:38" pos:end="2528:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2529:13" pos:end="2529:69"><expr pos:start="2529:13" pos:end="2529:68"><call pos:start="2529:13" pos:end="2529:68"><name pos:start="2529:13" pos:end="2529:26">gen_helper_hlt</name><argument_list pos:start="2529:27" pos:end="2529:68">(<argument pos:start="2529:28" pos:end="2529:34"><expr pos:start="2529:28" pos:end="2529:34"><name pos:start="2529:28" pos:end="2529:34">cpu_env</name></expr></argument>, <argument pos:start="2529:37" pos:end="2529:67"><expr pos:start="2529:37" pos:end="2529:67"><call pos:start="2529:37" pos:end="2529:67"><name pos:start="2529:37" pos:end="2529:49">tcg_const_i32</name><argument_list pos:start="2529:50" pos:end="2529:67">(<argument pos:start="2529:51" pos:end="2529:66"><expr pos:start="2529:51" pos:end="2529:66"><name pos:start="2529:51" pos:end="2529:55"><name pos:start="2529:51" pos:end="2529:51">s</name><operator pos:start="2529:52" pos:end="2529:53">-&gt;</operator><name pos:start="2529:54" pos:end="2529:55">pc</name></name> <operator pos:start="2529:57" pos:end="2529:57">-</operator> <name pos:start="2529:59" pos:end="2529:66">pc_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2530:13" pos:end="2530:38"><expr pos:start="2530:13" pos:end="2530:37"><name pos:start="2530:13" pos:end="2530:21"><name pos:start="2530:13" pos:end="2530:13">s</name><operator pos:start="2530:14" pos:end="2530:15">-&gt;</operator><name pos:start="2530:16" pos:end="2530:21">is_jmp</name></name> <operator pos:start="2530:23" pos:end="2530:23">=</operator> <name pos:start="2530:25" pos:end="2530:37">DISAS_TB_JUMP</name></expr>;</expr_stmt>
        <break pos:start="2531:9" pos:end="2531:14">break;</break>
    <case pos:start="2532:5" pos:end="2532:15">case <expr pos:start="2532:10" pos:end="2532:14"><literal type="number" pos:start="2532:10" pos:end="2532:14">0x100</literal></expr>:</case>
        <expr_stmt pos:start="2533:9" pos:end="2533:44"><expr pos:start="2533:9" pos:end="2533:43"><name pos:start="2533:9" pos:end="2533:13">modrm</name> <operator pos:start="2533:15" pos:end="2533:15">=</operator> <call pos:start="2533:17" pos:end="2533:43"><name pos:start="2533:17" pos:end="2533:29">cpu_ldub_code</name><argument_list pos:start="2533:30" pos:end="2533:43">(<argument pos:start="2533:31" pos:end="2533:33"><expr pos:start="2533:31" pos:end="2533:33"><name pos:start="2533:31" pos:end="2533:33">env</name></expr></argument>, <argument pos:start="2533:36" pos:end="2533:42"><expr pos:start="2533:36" pos:end="2533:42"><name pos:start="2533:36" pos:end="2533:40"><name pos:start="2533:36" pos:end="2533:36">s</name><operator pos:start="2533:37" pos:end="2533:38">-&gt;</operator><name pos:start="2533:39" pos:end="2533:40">pc</name></name><operator pos:start="2533:41" pos:end="2533:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2534:9" pos:end="2534:31"><expr pos:start="2534:9" pos:end="2534:30"><name pos:start="2534:9" pos:end="2534:11">mod</name> <operator pos:start="2534:13" pos:end="2534:13">=</operator> <operator pos:start="2534:15" pos:end="2534:15">(</operator><name pos:start="2534:16" pos:end="2534:20">modrm</name> <operator pos:start="2534:22" pos:end="2534:23">&gt;&gt;</operator> <literal type="number" pos:start="2534:25" pos:end="2534:25">6</literal><operator pos:start="2534:26" pos:end="2534:26">)</operator> <operator pos:start="2534:28" pos:end="2534:28">&amp;</operator> <literal type="number" pos:start="2534:30" pos:end="2534:30">3</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="2535:9" pos:end="2535:30"><expr pos:start="2535:9" pos:end="2535:29"><name pos:start="2535:9" pos:end="2535:10">op</name> <operator pos:start="2535:12" pos:end="2535:12">=</operator> <operator pos:start="2535:14" pos:end="2535:14">(</operator><name pos:start="2535:15" pos:end="2535:19">modrm</name> <operator pos:start="2535:21" pos:end="2535:22">&gt;&gt;</operator> <literal type="number" pos:start="2535:24" pos:end="2535:24">3</literal><operator pos:start="2535:25" pos:end="2535:25">)</operator> <operator pos:start="2535:27" pos:end="2535:27">&amp;</operator> <literal type="number" pos:start="2535:29" pos:end="2535:29">7</literal></expr>;</expr_stmt>
        <switch pos:start="2536:9" pos:end="3141:17">switch<condition pos:start="2536:15" pos:end="2536:18">(<expr pos:start="2536:16" pos:end="2536:17"><name pos:start="2536:16" pos:end="2536:17">op</name></expr>)</condition> <block pos:start="2536:20" pos:end="3141:17">{<block_content pos:start="2537:9" pos:end="3141:17">
        <case pos:start="2537:9" pos:end="2537:15">case <expr pos:start="2537:14" pos:end="2537:14"><literal type="number" pos:start="2537:14" pos:end="2537:14">0</literal></expr>:</case> <comment type="block" pos:start="2537:17" pos:end="2537:26">/* sldt */</comment>
            <if_stmt pos:start="2538:13" pos:end="2539:69"><if pos:start="2538:13" pos:end="2539:69">if <condition pos:start="2538:16" pos:end="2538:34">(<expr pos:start="2538:17" pos:end="2538:33"><operator pos:start="2538:17" pos:end="2538:17">!</operator><name pos:start="2538:18" pos:end="2538:22"><name pos:start="2538:18" pos:end="2538:18">s</name><operator pos:start="2538:19" pos:end="2538:20">-&gt;</operator><name pos:start="2538:21" pos:end="2538:22">pe</name></name> <operator pos:start="2538:24" pos:end="2538:25">||</operator> <name pos:start="2538:27" pos:end="2538:33"><name pos:start="2538:27" pos:end="2538:27">s</name><operator pos:start="2538:28" pos:end="2538:29">-&gt;</operator><name pos:start="2538:30" pos:end="2538:33">vm86</name></name></expr>)</condition><block type="pseudo" pos:start="2539:13" pos:end="2539:69"><block_content pos:start="2539:13" pos:end="2539:69">
            <expr_stmt pos:start="2539:13" pos:end="2539:69"><expr pos:start="2539:13" pos:end="2539:68"><call pos:start="2539:13" pos:end="2539:68"><name pos:start="2539:13" pos:end="2539:35">gen_svm_check_intercept</name><argument_list pos:start="2539:36" pos:end="2539:68">(<argument pos:start="2539:37" pos:end="2539:37"><expr pos:start="2539:37" pos:end="2539:37"><name pos:start="2539:37" pos:end="2539:37">s</name></expr></argument>, <argument pos:start="2539:40" pos:end="2539:47"><expr pos:start="2539:40" pos:end="2539:47"><name pos:start="2539:40" pos:end="2539:47">pc_start</name></expr></argument>, <argument pos:start="2539:50" pos:end="2539:67"><expr pos:start="2539:50" pos:end="2539:67"><name pos:start="2539:50" pos:end="2539:67">SVM_EXIT_LDTR_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt pos:start="2540:13" pos:end="2540:84"><expr pos:start="2540:13" pos:end="2540:83"><call pos:start="2540:13" pos:end="2540:83"><name pos:start="2540:13" pos:end="2540:28">tcg_gen_ld32u_tl</name><argument_list pos:start="2540:29" pos:end="2540:83">(<argument pos:start="2540:30" pos:end="2540:37"><expr pos:start="2540:30" pos:end="2540:37"><name pos:start="2540:30" pos:end="2540:37"><name pos:start="2540:30" pos:end="2540:34">cpu_T</name><index pos:start="2540:35" pos:end="2540:37">[<expr pos:start="2540:36" pos:end="2540:36"><literal type="number" pos:start="2540:36" pos:end="2540:36">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2540:40" pos:end="2540:46"><expr pos:start="2540:40" pos:end="2540:46"><name pos:start="2540:40" pos:end="2540:46">cpu_env</name></expr></argument>, <argument pos:start="2540:49" pos:end="2540:82"><expr pos:start="2540:49" pos:end="2540:82"><call pos:start="2540:49" pos:end="2540:82"><name pos:start="2540:49" pos:end="2540:56">offsetof</name><argument_list pos:start="2540:57" pos:end="2540:82">(<argument pos:start="2540:58" pos:end="2540:68"><expr pos:start="2540:58" pos:end="2540:68"><name pos:start="2540:58" pos:end="2540:68">CPUX86State</name></expr></argument>,<argument pos:start="2540:70" pos:end="2540:81"><expr pos:start="2540:70" pos:end="2540:81"><name pos:start="2540:70" pos:end="2540:81"><name pos:start="2540:70" pos:end="2540:72">ldt</name><operator pos:start="2540:73" pos:end="2540:73">.</operator><name pos:start="2540:74" pos:end="2540:81">selector</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2541:13" pos:end="2541:25"><expr pos:start="2541:13" pos:end="2541:24"><name pos:start="2541:13" pos:end="2541:14">ot</name> <operator pos:start="2541:16" pos:end="2541:16">=</operator> <name pos:start="2541:18" pos:end="2541:24">OT_WORD</name></expr>;</expr_stmt>
            <if_stmt pos:start="2542:13" pos:end="2543:31"><if pos:start="2542:13" pos:end="2543:31">if <condition pos:start="2542:16" pos:end="2542:25">(<expr pos:start="2542:17" pos:end="2542:24"><name pos:start="2542:17" pos:end="2542:19">mod</name> <operator pos:start="2542:21" pos:end="2542:22">==</operator> <literal type="number" pos:start="2542:24" pos:end="2542:24">3</literal></expr>)</condition><block type="pseudo" pos:start="2543:17" pos:end="2543:31"><block_content pos:start="2543:17" pos:end="2543:31">
                <expr_stmt pos:start="2543:17" pos:end="2543:31"><expr pos:start="2543:17" pos:end="2543:30"><name pos:start="2543:17" pos:end="2543:18">ot</name> <operator pos:start="2543:20" pos:end="2543:21">+=</operator> <name pos:start="2543:23" pos:end="2543:30"><name pos:start="2543:23" pos:end="2543:23">s</name><operator pos:start="2543:24" pos:end="2543:25">-&gt;</operator><name pos:start="2543:26" pos:end="2543:30">dflag</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt pos:start="2544:13" pos:end="2544:58"><expr pos:start="2544:13" pos:end="2544:57"><call pos:start="2544:13" pos:end="2544:57"><name pos:start="2544:13" pos:end="2544:26">gen_ldst_modrm</name><argument_list pos:start="2544:27" pos:end="2544:57">(<argument pos:start="2544:28" pos:end="2544:30"><expr pos:start="2544:28" pos:end="2544:30"><name pos:start="2544:28" pos:end="2544:30">env</name></expr></argument>, <argument pos:start="2544:33" pos:end="2544:33"><expr pos:start="2544:33" pos:end="2544:33"><name pos:start="2544:33" pos:end="2544:33">s</name></expr></argument>, <argument pos:start="2544:36" pos:end="2544:40"><expr pos:start="2544:36" pos:end="2544:40"><name pos:start="2544:36" pos:end="2544:40">modrm</name></expr></argument>, <argument pos:start="2544:43" pos:end="2544:44"><expr pos:start="2544:43" pos:end="2544:44"><name pos:start="2544:43" pos:end="2544:44">ot</name></expr></argument>, <argument pos:start="2544:47" pos:end="2544:53"><expr pos:start="2544:47" pos:end="2544:53"><name pos:start="2544:47" pos:end="2544:53">OR_TMP0</name></expr></argument>, <argument pos:start="2544:56" pos:end="2544:56"><expr pos:start="2544:56" pos:end="2544:56"><literal type="number" pos:start="2544:56" pos:end="2544:56">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="2545:13" pos:end="2545:18">break;</break>
        <case pos:start="2546:9" pos:end="2546:15">case <expr pos:start="2546:14" pos:end="2546:14"><literal type="number" pos:start="2546:14" pos:end="2546:14">2</literal></expr>:</case> <comment type="block" pos:start="2546:17" pos:end="2546:26">/* lldt */</comment>
            <if_stmt pos:start="2547:13" pos:end="3141:17"><if pos:start="2547:13" pos:end="3141:17">if <condition pos:start="2547:16" pos:end="2547:34">(<expr pos:start="2547:17" pos:end="2547:33"><operator pos:start="2547:17" pos:end="2547:17">!</operator><name pos:start="2547:18" pos:end="2547:22"><name pos:start="2547:18" pos:end="2547:18">s</name><operator pos:start="2547:19" pos:end="2547:20">-&gt;</operator><name pos:start="2547:21" pos:end="2547:22">pe</name></name> <operator pos:start="2547:24" pos:end="2547:25">||</operator> <name pos:start="2547:27" pos:end="2547:33"><name pos:start="2547:27" pos:end="2547:27">s</name><operator pos:start="2547:28" pos:end="2547:29">-&gt;</operator><name pos:start="2547:30" pos:end="2547:33">vm86</name></name></expr>)</condition><block type="pseudo" pos:start="2548:13" pos:end="3141:17"><block_content pos:start="2548:13" pos:end="3141:17">
            <if_stmt pos:start="2548:13" pos:end="3141:17"><if pos:start="2548:13" pos:end="2550:13">if <condition pos:start="2548:16" pos:end="2548:28">(<expr pos:start="2548:17" pos:end="2548:27"><name pos:start="2548:17" pos:end="2548:22"><name pos:start="2548:17" pos:end="2548:17">s</name><operator pos:start="2548:18" pos:end="2548:19">-&gt;</operator><name pos:start="2548:20" pos:end="2548:22">cpl</name></name> <operator pos:start="2548:24" pos:end="2548:25">!=</operator> <literal type="number" pos:start="2548:27" pos:end="2548:27">0</literal></expr>)</condition> <block pos:start="2548:30" pos:end="2550:13">{<block_content pos:start="2549:17" pos:end="2549:68">
                <expr_stmt pos:start="2549:17" pos:end="2549:68"><expr pos:start="2549:17" pos:end="2549:67"><call pos:start="2549:17" pos:end="2549:67"><name pos:start="2549:17" pos:end="2549:29">gen_exception</name><argument_list pos:start="2549:30" pos:end="2549:67">(<argument pos:start="2549:31" pos:end="2549:31"><expr pos:start="2549:31" pos:end="2549:31"><name pos:start="2549:31" pos:end="2549:31">s</name></expr></argument>, <argument pos:start="2549:34" pos:end="2549:43"><expr pos:start="2549:34" pos:end="2549:43"><name pos:start="2549:34" pos:end="2549:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="2549:46" pos:end="2549:66"><expr pos:start="2549:46" pos:end="2549:66"><name pos:start="2549:46" pos:end="2549:53">pc_start</name> <operator pos:start="2549:55" pos:end="2549:55">-</operator> <name pos:start="2549:57" pos:end="2549:66"><name pos:start="2549:57" pos:end="2549:57">s</name><operator pos:start="2549:58" pos:end="2549:59">-&gt;</operator><name pos:start="2549:60" pos:end="2549:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="2550:15" pos:end="3141:17">else <block pos:start="2550:20" pos:end="3141:17">{<block_content pos:start="2551:17" pos:end="3141:17">
                <expr_stmt pos:start="2551:17" pos:end="2551:74"><expr pos:start="2551:17" pos:end="2551:73"><call pos:start="2551:17" pos:end="2551:73"><name pos:start="2551:17" pos:end="2551:39">gen_svm_check_intercept</name><argument_list pos:start="2551:40" pos:end="2551:73">(<argument pos:start="2551:41" pos:end="2551:41"><expr pos:start="2551:41" pos:end="2551:41"><name pos:start="2551:41" pos:end="2551:41">s</name></expr></argument>, <argument pos:start="2551:44" pos:end="2551:51"><expr pos:start="2551:44" pos:end="2551:51"><name pos:start="2551:44" pos:end="2551:51">pc_start</name></expr></argument>, <argument pos:start="2551:54" pos:end="2551:72"><expr pos:start="2551:54" pos:end="2551:72"><name pos:start="2551:54" pos:end="2551:72">SVM_EXIT_LDTR_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2552:17" pos:end="2552:67"><expr pos:start="2552:17" pos:end="2552:66"><call pos:start="2552:17" pos:end="2552:66"><name pos:start="2552:17" pos:end="2552:30">gen_ldst_modrm</name><argument_list pos:start="2552:31" pos:end="2552:66">(<argument pos:start="2552:32" pos:end="2552:34"><expr pos:start="2552:32" pos:end="2552:34"><name pos:start="2552:32" pos:end="2552:34">env</name></expr></argument>, <argument pos:start="2552:37" pos:end="2552:37"><expr pos:start="2552:37" pos:end="2552:37"><name pos:start="2552:37" pos:end="2552:37">s</name></expr></argument>, <argument pos:start="2552:40" pos:end="2552:44"><expr pos:start="2552:40" pos:end="2552:44"><name pos:start="2552:40" pos:end="2552:44">modrm</name></expr></argument>, <argument pos:start="2552:47" pos:end="2552:53"><expr pos:start="2552:47" pos:end="2552:53"><name pos:start="2552:47" pos:end="2552:53">OT_WORD</name></expr></argument>, <argument pos:start="2552:56" pos:end="2552:62"><expr pos:start="2552:56" pos:end="2552:62"><name pos:start="2552:56" pos:end="2552:62">OR_TMP0</name></expr></argument>, <argument pos:start="2552:65" pos:end="2552:65"><expr pos:start="2552:65" pos:end="2552:65"><literal type="number" pos:start="2552:65" pos:end="2552:65">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2553:17" pos:end="2553:50"><expr pos:start="2553:17" pos:end="2553:49"><call pos:start="2553:17" pos:end="2553:49"><name pos:start="2553:17" pos:end="2553:26">gen_jmp_im</name><argument_list pos:start="2553:27" pos:end="2553:49">(<argument pos:start="2553:28" pos:end="2553:48"><expr pos:start="2553:28" pos:end="2553:48"><name pos:start="2553:28" pos:end="2553:35">pc_start</name> <operator pos:start="2553:37" pos:end="2553:37">-</operator> <name pos:start="2553:39" pos:end="2553:48"><name pos:start="2553:39" pos:end="2553:39">s</name><operator pos:start="2553:40" pos:end="2553:41">-&gt;</operator><name pos:start="2553:42" pos:end="2553:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2554:17" pos:end="2554:61"><expr pos:start="2554:17" pos:end="2554:60"><call pos:start="2554:17" pos:end="2554:60"><name pos:start="2554:17" pos:end="2554:36">tcg_gen_trunc_tl_i32</name><argument_list pos:start="2554:37" pos:end="2554:60">(<argument pos:start="2554:38" pos:end="2554:49"><expr pos:start="2554:38" pos:end="2554:49"><name pos:start="2554:38" pos:end="2554:49">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2554:52" pos:end="2554:59"><expr pos:start="2554:52" pos:end="2554:59"><name pos:start="2554:52" pos:end="2554:59"><name pos:start="2554:52" pos:end="2554:56">cpu_T</name><index pos:start="2554:57" pos:end="2554:59">[<expr pos:start="2554:58" pos:end="2554:58"><literal type="number" pos:start="2554:58" pos:end="2554:58">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2555:17" pos:end="2555:55"><expr pos:start="2555:17" pos:end="2555:54"><call pos:start="2555:17" pos:end="2555:54"><name pos:start="2555:17" pos:end="2555:31">gen_helper_lldt</name><argument_list pos:start="2555:32" pos:end="2555:54">(<argument pos:start="2555:33" pos:end="2555:39"><expr pos:start="2555:33" pos:end="2555:39"><name pos:start="2555:33" pos:end="2555:39">cpu_env</name></expr></argument>, <argument pos:start="2555:42" pos:end="2555:53"><expr pos:start="2555:42" pos:end="2555:53"><name pos:start="2555:42" pos:end="2555:53">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="2556:13" pos:end="2556:18">break;</break>
        <case pos:start="2557:9" pos:end="2557:15">case <expr pos:start="2557:14" pos:end="2557:14"><literal type="number" pos:start="2557:14" pos:end="2557:14">1</literal></expr>:</case> <comment type="block" pos:start="2557:17" pos:end="2557:25">/* str */</comment>
            <if_stmt pos:start="2558:13" pos:end="2559:67"><if pos:start="2558:13" pos:end="2559:67">if <condition pos:start="2558:16" pos:end="2558:34">(<expr pos:start="2558:17" pos:end="2558:33"><operator pos:start="2558:17" pos:end="2558:17">!</operator><name pos:start="2558:18" pos:end="2558:22"><name pos:start="2558:18" pos:end="2558:18">s</name><operator pos:start="2558:19" pos:end="2558:20">-&gt;</operator><name pos:start="2558:21" pos:end="2558:22">pe</name></name> <operator pos:start="2558:24" pos:end="2558:25">||</operator> <name pos:start="2558:27" pos:end="2558:33"><name pos:start="2558:27" pos:end="2558:27">s</name><operator pos:start="2558:28" pos:end="2558:29">-&gt;</operator><name pos:start="2558:30" pos:end="2558:33">vm86</name></name></expr>)</condition><block type="pseudo" pos:start="2559:13" pos:end="2559:67"><block_content pos:start="2559:13" pos:end="2559:67">
            <expr_stmt pos:start="2559:13" pos:end="2559:67"><expr pos:start="2559:13" pos:end="2559:66"><call pos:start="2559:13" pos:end="2559:66"><name pos:start="2559:13" pos:end="2559:35">gen_svm_check_intercept</name><argument_list pos:start="2559:36" pos:end="2559:66">(<argument pos:start="2559:37" pos:end="2559:37"><expr pos:start="2559:37" pos:end="2559:37"><name pos:start="2559:37" pos:end="2559:37">s</name></expr></argument>, <argument pos:start="2559:40" pos:end="2559:47"><expr pos:start="2559:40" pos:end="2559:47"><name pos:start="2559:40" pos:end="2559:47">pc_start</name></expr></argument>, <argument pos:start="2559:50" pos:end="2559:65"><expr pos:start="2559:50" pos:end="2559:65"><name pos:start="2559:50" pos:end="2559:65">SVM_EXIT_TR_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt pos:start="2560:13" pos:end="2560:83"><expr pos:start="2560:13" pos:end="2560:82"><call pos:start="2560:13" pos:end="2560:82"><name pos:start="2560:13" pos:end="2560:28">tcg_gen_ld32u_tl</name><argument_list pos:start="2560:29" pos:end="2560:82">(<argument pos:start="2560:30" pos:end="2560:37"><expr pos:start="2560:30" pos:end="2560:37"><name pos:start="2560:30" pos:end="2560:37"><name pos:start="2560:30" pos:end="2560:34">cpu_T</name><index pos:start="2560:35" pos:end="2560:37">[<expr pos:start="2560:36" pos:end="2560:36"><literal type="number" pos:start="2560:36" pos:end="2560:36">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2560:40" pos:end="2560:46"><expr pos:start="2560:40" pos:end="2560:46"><name pos:start="2560:40" pos:end="2560:46">cpu_env</name></expr></argument>, <argument pos:start="2560:49" pos:end="2560:81"><expr pos:start="2560:49" pos:end="2560:81"><call pos:start="2560:49" pos:end="2560:81"><name pos:start="2560:49" pos:end="2560:56">offsetof</name><argument_list pos:start="2560:57" pos:end="2560:81">(<argument pos:start="2560:58" pos:end="2560:68"><expr pos:start="2560:58" pos:end="2560:68"><name pos:start="2560:58" pos:end="2560:68">CPUX86State</name></expr></argument>,<argument pos:start="2560:70" pos:end="2560:80"><expr pos:start="2560:70" pos:end="2560:80"><name pos:start="2560:70" pos:end="2560:80"><name pos:start="2560:70" pos:end="2560:71">tr</name><operator pos:start="2560:72" pos:end="2560:72">.</operator><name pos:start="2560:73" pos:end="2560:80">selector</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2561:13" pos:end="2561:25"><expr pos:start="2561:13" pos:end="2561:24"><name pos:start="2561:13" pos:end="2561:14">ot</name> <operator pos:start="2561:16" pos:end="2561:16">=</operator> <name pos:start="2561:18" pos:end="2561:24">OT_WORD</name></expr>;</expr_stmt>
            <if_stmt pos:start="2562:13" pos:end="2563:31"><if pos:start="2562:13" pos:end="2563:31">if <condition pos:start="2562:16" pos:end="2562:25">(<expr pos:start="2562:17" pos:end="2562:24"><name pos:start="2562:17" pos:end="2562:19">mod</name> <operator pos:start="2562:21" pos:end="2562:22">==</operator> <literal type="number" pos:start="2562:24" pos:end="2562:24">3</literal></expr>)</condition><block type="pseudo" pos:start="2563:17" pos:end="2563:31"><block_content pos:start="2563:17" pos:end="2563:31">
                <expr_stmt pos:start="2563:17" pos:end="2563:31"><expr pos:start="2563:17" pos:end="2563:30"><name pos:start="2563:17" pos:end="2563:18">ot</name> <operator pos:start="2563:20" pos:end="2563:21">+=</operator> <name pos:start="2563:23" pos:end="2563:30"><name pos:start="2563:23" pos:end="2563:23">s</name><operator pos:start="2563:24" pos:end="2563:25">-&gt;</operator><name pos:start="2563:26" pos:end="2563:30">dflag</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt pos:start="2564:13" pos:end="2564:58"><expr pos:start="2564:13" pos:end="2564:57"><call pos:start="2564:13" pos:end="2564:57"><name pos:start="2564:13" pos:end="2564:26">gen_ldst_modrm</name><argument_list pos:start="2564:27" pos:end="2564:57">(<argument pos:start="2564:28" pos:end="2564:30"><expr pos:start="2564:28" pos:end="2564:30"><name pos:start="2564:28" pos:end="2564:30">env</name></expr></argument>, <argument pos:start="2564:33" pos:end="2564:33"><expr pos:start="2564:33" pos:end="2564:33"><name pos:start="2564:33" pos:end="2564:33">s</name></expr></argument>, <argument pos:start="2564:36" pos:end="2564:40"><expr pos:start="2564:36" pos:end="2564:40"><name pos:start="2564:36" pos:end="2564:40">modrm</name></expr></argument>, <argument pos:start="2564:43" pos:end="2564:44"><expr pos:start="2564:43" pos:end="2564:44"><name pos:start="2564:43" pos:end="2564:44">ot</name></expr></argument>, <argument pos:start="2564:47" pos:end="2564:53"><expr pos:start="2564:47" pos:end="2564:53"><name pos:start="2564:47" pos:end="2564:53">OR_TMP0</name></expr></argument>, <argument pos:start="2564:56" pos:end="2564:56"><expr pos:start="2564:56" pos:end="2564:56"><literal type="number" pos:start="2564:56" pos:end="2564:56">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="2565:13" pos:end="2565:18">break;</break>
        <case pos:start="2566:9" pos:end="2566:15">case <expr pos:start="2566:14" pos:end="2566:14"><literal type="number" pos:start="2566:14" pos:end="2566:14">3</literal></expr>:</case> <comment type="block" pos:start="2566:17" pos:end="2566:25">/* ltr */</comment>
            <if_stmt pos:start="2567:13" pos:end="3141:17"><if pos:start="2567:13" pos:end="3141:17">if <condition pos:start="2567:16" pos:end="2567:34">(<expr pos:start="2567:17" pos:end="2567:33"><operator pos:start="2567:17" pos:end="2567:17">!</operator><name pos:start="2567:18" pos:end="2567:22"><name pos:start="2567:18" pos:end="2567:18">s</name><operator pos:start="2567:19" pos:end="2567:20">-&gt;</operator><name pos:start="2567:21" pos:end="2567:22">pe</name></name> <operator pos:start="2567:24" pos:end="2567:25">||</operator> <name pos:start="2567:27" pos:end="2567:33"><name pos:start="2567:27" pos:end="2567:27">s</name><operator pos:start="2567:28" pos:end="2567:29">-&gt;</operator><name pos:start="2567:30" pos:end="2567:33">vm86</name></name></expr>)</condition><block type="pseudo" pos:start="2568:13" pos:end="3141:17"><block_content pos:start="2568:13" pos:end="3141:17">
            <if_stmt pos:start="2568:13" pos:end="3141:17"><if pos:start="2568:13" pos:end="2570:13">if <condition pos:start="2568:16" pos:end="2568:28">(<expr pos:start="2568:17" pos:end="2568:27"><name pos:start="2568:17" pos:end="2568:22"><name pos:start="2568:17" pos:end="2568:17">s</name><operator pos:start="2568:18" pos:end="2568:19">-&gt;</operator><name pos:start="2568:20" pos:end="2568:22">cpl</name></name> <operator pos:start="2568:24" pos:end="2568:25">!=</operator> <literal type="number" pos:start="2568:27" pos:end="2568:27">0</literal></expr>)</condition> <block pos:start="2568:30" pos:end="2570:13">{<block_content pos:start="2569:17" pos:end="2569:68">
                <expr_stmt pos:start="2569:17" pos:end="2569:68"><expr pos:start="2569:17" pos:end="2569:67"><call pos:start="2569:17" pos:end="2569:67"><name pos:start="2569:17" pos:end="2569:29">gen_exception</name><argument_list pos:start="2569:30" pos:end="2569:67">(<argument pos:start="2569:31" pos:end="2569:31"><expr pos:start="2569:31" pos:end="2569:31"><name pos:start="2569:31" pos:end="2569:31">s</name></expr></argument>, <argument pos:start="2569:34" pos:end="2569:43"><expr pos:start="2569:34" pos:end="2569:43"><name pos:start="2569:34" pos:end="2569:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="2569:46" pos:end="2569:66"><expr pos:start="2569:46" pos:end="2569:66"><name pos:start="2569:46" pos:end="2569:53">pc_start</name> <operator pos:start="2569:55" pos:end="2569:55">-</operator> <name pos:start="2569:57" pos:end="2569:66"><name pos:start="2569:57" pos:end="2569:57">s</name><operator pos:start="2569:58" pos:end="2569:59">-&gt;</operator><name pos:start="2569:60" pos:end="2569:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="2570:15" pos:end="3141:17">else <block pos:start="2570:20" pos:end="3141:17">{<block_content pos:start="2571:17" pos:end="3141:17">
                <expr_stmt pos:start="2571:17" pos:end="2571:72"><expr pos:start="2571:17" pos:end="2571:71"><call pos:start="2571:17" pos:end="2571:71"><name pos:start="2571:17" pos:end="2571:39">gen_svm_check_intercept</name><argument_list pos:start="2571:40" pos:end="2571:71">(<argument pos:start="2571:41" pos:end="2571:41"><expr pos:start="2571:41" pos:end="2571:41"><name pos:start="2571:41" pos:end="2571:41">s</name></expr></argument>, <argument pos:start="2571:44" pos:end="2571:51"><expr pos:start="2571:44" pos:end="2571:51"><name pos:start="2571:44" pos:end="2571:51">pc_start</name></expr></argument>, <argument pos:start="2571:54" pos:end="2571:70"><expr pos:start="2571:54" pos:end="2571:70"><name pos:start="2571:54" pos:end="2571:70">SVM_EXIT_TR_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2572:17" pos:end="2572:67"><expr pos:start="2572:17" pos:end="2572:66"><call pos:start="2572:17" pos:end="2572:66"><name pos:start="2572:17" pos:end="2572:30">gen_ldst_modrm</name><argument_list pos:start="2572:31" pos:end="2572:66">(<argument pos:start="2572:32" pos:end="2572:34"><expr pos:start="2572:32" pos:end="2572:34"><name pos:start="2572:32" pos:end="2572:34">env</name></expr></argument>, <argument pos:start="2572:37" pos:end="2572:37"><expr pos:start="2572:37" pos:end="2572:37"><name pos:start="2572:37" pos:end="2572:37">s</name></expr></argument>, <argument pos:start="2572:40" pos:end="2572:44"><expr pos:start="2572:40" pos:end="2572:44"><name pos:start="2572:40" pos:end="2572:44">modrm</name></expr></argument>, <argument pos:start="2572:47" pos:end="2572:53"><expr pos:start="2572:47" pos:end="2572:53"><name pos:start="2572:47" pos:end="2572:53">OT_WORD</name></expr></argument>, <argument pos:start="2572:56" pos:end="2572:62"><expr pos:start="2572:56" pos:end="2572:62"><name pos:start="2572:56" pos:end="2572:62">OR_TMP0</name></expr></argument>, <argument pos:start="2572:65" pos:end="2572:65"><expr pos:start="2572:65" pos:end="2572:65"><literal type="number" pos:start="2572:65" pos:end="2572:65">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2573:17" pos:end="2573:50"><expr pos:start="2573:17" pos:end="2573:49"><call pos:start="2573:17" pos:end="2573:49"><name pos:start="2573:17" pos:end="2573:26">gen_jmp_im</name><argument_list pos:start="2573:27" pos:end="2573:49">(<argument pos:start="2573:28" pos:end="2573:48"><expr pos:start="2573:28" pos:end="2573:48"><name pos:start="2573:28" pos:end="2573:35">pc_start</name> <operator pos:start="2573:37" pos:end="2573:37">-</operator> <name pos:start="2573:39" pos:end="2573:48"><name pos:start="2573:39" pos:end="2573:39">s</name><operator pos:start="2573:40" pos:end="2573:41">-&gt;</operator><name pos:start="2573:42" pos:end="2573:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2574:17" pos:end="2574:61"><expr pos:start="2574:17" pos:end="2574:60"><call pos:start="2574:17" pos:end="2574:60"><name pos:start="2574:17" pos:end="2574:36">tcg_gen_trunc_tl_i32</name><argument_list pos:start="2574:37" pos:end="2574:60">(<argument pos:start="2574:38" pos:end="2574:49"><expr pos:start="2574:38" pos:end="2574:49"><name pos:start="2574:38" pos:end="2574:49">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2574:52" pos:end="2574:59"><expr pos:start="2574:52" pos:end="2574:59"><name pos:start="2574:52" pos:end="2574:59"><name pos:start="2574:52" pos:end="2574:56">cpu_T</name><index pos:start="2574:57" pos:end="2574:59">[<expr pos:start="2574:58" pos:end="2574:58"><literal type="number" pos:start="2574:58" pos:end="2574:58">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2575:17" pos:end="2575:54"><expr pos:start="2575:17" pos:end="2575:53"><call pos:start="2575:17" pos:end="2575:53"><name pos:start="2575:17" pos:end="2575:30">gen_helper_ltr</name><argument_list pos:start="2575:31" pos:end="2575:53">(<argument pos:start="2575:32" pos:end="2575:38"><expr pos:start="2575:32" pos:end="2575:38"><name pos:start="2575:32" pos:end="2575:38">cpu_env</name></expr></argument>, <argument pos:start="2575:41" pos:end="2575:52"><expr pos:start="2575:41" pos:end="2575:52"><name pos:start="2575:41" pos:end="2575:52">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="2576:13" pos:end="2576:18">break;</break>
        <case pos:start="2577:9" pos:end="2577:15">case <expr pos:start="2577:14" pos:end="2577:14"><literal type="number" pos:start="2577:14" pos:end="2577:14">4</literal></expr>:</case> <comment type="block" pos:start="2577:17" pos:end="2577:26">/* verr */</comment>
        <case pos:start="2578:9" pos:end="2578:15">case <expr pos:start="2578:14" pos:end="2578:14"><literal type="number" pos:start="2578:14" pos:end="2578:14">5</literal></expr>:</case> <comment type="block" pos:start="2578:17" pos:end="2578:26">/* verw */</comment>
            <if_stmt pos:start="2579:13" pos:end="2580:63"><if pos:start="2579:13" pos:end="2580:63">if <condition pos:start="2579:16" pos:end="2579:34">(<expr pos:start="2579:17" pos:end="2579:33"><operator pos:start="2579:17" pos:end="2579:17">!</operator><name pos:start="2579:18" pos:end="2579:22"><name pos:start="2579:18" pos:end="2579:18">s</name><operator pos:start="2579:19" pos:end="2579:20">-&gt;</operator><name pos:start="2579:21" pos:end="2579:22">pe</name></name> <operator pos:start="2579:24" pos:end="2579:25">||</operator> <name pos:start="2579:27" pos:end="2579:33"><name pos:start="2579:27" pos:end="2579:27">s</name><operator pos:start="2579:28" pos:end="2579:29">-&gt;</operator><name pos:start="2579:30" pos:end="2579:33">vm86</name></name></expr>)</condition><block type="pseudo" pos:start="2580:13" pos:end="2580:63"><block_content pos:start="2580:13" pos:end="2580:63">
            <expr_stmt pos:start="2580:13" pos:end="2580:63"><expr pos:start="2580:13" pos:end="2580:62"><call pos:start="2580:13" pos:end="2580:62"><name pos:start="2580:13" pos:end="2580:26">gen_ldst_modrm</name><argument_list pos:start="2580:27" pos:end="2580:62">(<argument pos:start="2580:28" pos:end="2580:30"><expr pos:start="2580:28" pos:end="2580:30"><name pos:start="2580:28" pos:end="2580:30">env</name></expr></argument>, <argument pos:start="2580:33" pos:end="2580:33"><expr pos:start="2580:33" pos:end="2580:33"><name pos:start="2580:33" pos:end="2580:33">s</name></expr></argument>, <argument pos:start="2580:36" pos:end="2580:40"><expr pos:start="2580:36" pos:end="2580:40"><name pos:start="2580:36" pos:end="2580:40">modrm</name></expr></argument>, <argument pos:start="2580:43" pos:end="2580:49"><expr pos:start="2580:43" pos:end="2580:49"><name pos:start="2580:43" pos:end="2580:49">OT_WORD</name></expr></argument>, <argument pos:start="2580:52" pos:end="2580:58"><expr pos:start="2580:52" pos:end="2580:58"><name pos:start="2580:52" pos:end="2580:58">OR_TMP0</name></expr></argument>, <argument pos:start="2580:61" pos:end="2580:61"><expr pos:start="2580:61" pos:end="2580:61"><literal type="number" pos:start="2580:61" pos:end="2580:61">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt pos:start="2581:13" pos:end="2581:32"><expr pos:start="2581:13" pos:end="2581:31"><call pos:start="2581:13" pos:end="2581:31"><name pos:start="2581:13" pos:end="2581:28">gen_update_cc_op</name><argument_list pos:start="2581:29" pos:end="2581:31">(<argument pos:start="2581:30" pos:end="2581:30"><expr pos:start="2581:30" pos:end="2581:30"><name pos:start="2581:30" pos:end="2581:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="2582:13" pos:end="3141:17"><if pos:start="2582:13" pos:end="2584:13">if <condition pos:start="2582:16" pos:end="2582:24">(<expr pos:start="2582:17" pos:end="2582:23"><name pos:start="2582:17" pos:end="2582:18">op</name> <operator pos:start="2582:20" pos:end="2582:21">==</operator> <literal type="number" pos:start="2582:23" pos:end="2582:23">4</literal></expr>)</condition> <block pos:start="2582:26" pos:end="2584:13">{<block_content pos:start="2583:17" pos:end="2583:51">
                <expr_stmt pos:start="2583:17" pos:end="2583:51"><expr pos:start="2583:17" pos:end="2583:50"><call pos:start="2583:17" pos:end="2583:50"><name pos:start="2583:17" pos:end="2583:31">gen_helper_verr</name><argument_list pos:start="2583:32" pos:end="2583:50">(<argument pos:start="2583:33" pos:end="2583:39"><expr pos:start="2583:33" pos:end="2583:39"><name pos:start="2583:33" pos:end="2583:39">cpu_env</name></expr></argument>, <argument pos:start="2583:42" pos:end="2583:49"><expr pos:start="2583:42" pos:end="2583:49"><name pos:start="2583:42" pos:end="2583:49"><name pos:start="2583:42" pos:end="2583:46">cpu_T</name><index pos:start="2583:47" pos:end="2583:49">[<expr pos:start="2583:48" pos:end="2583:48"><literal type="number" pos:start="2583:48" pos:end="2583:48">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="2584:15" pos:end="3141:17">else <block pos:start="2584:20" pos:end="3141:17">{<block_content pos:start="2585:17" pos:end="3141:17">
                <expr_stmt pos:start="2585:17" pos:end="2585:51"><expr pos:start="2585:17" pos:end="2585:50"><call pos:start="2585:17" pos:end="2585:50"><name pos:start="2585:17" pos:end="2585:31">gen_helper_verw</name><argument_list pos:start="2585:32" pos:end="2585:50">(<argument pos:start="2585:33" pos:end="2585:39"><expr pos:start="2585:33" pos:end="2585:39"><name pos:start="2585:33" pos:end="2585:39">cpu_env</name></expr></argument>, <argument pos:start="2585:42" pos:end="2585:49"><expr pos:start="2585:42" pos:end="2585:49"><name pos:start="2585:42" pos:end="2585:49"><name pos:start="2585:42" pos:end="2585:46">cpu_T</name><index pos:start="2585:47" pos:end="2585:49">[<expr pos:start="2585:48" pos:end="2585:48"><literal type="number" pos:start="2585:48" pos:end="2585:48">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2586:13" pos:end="2586:39"><expr pos:start="2586:13" pos:end="2586:38"><call pos:start="2586:13" pos:end="2586:38"><name pos:start="2586:13" pos:end="2586:21">set_cc_op</name><argument_list pos:start="2586:22" pos:end="2586:38">(<argument pos:start="2586:23" pos:end="2586:23"><expr pos:start="2586:23" pos:end="2586:23"><name pos:start="2586:23" pos:end="2586:23">s</name></expr></argument>, <argument pos:start="2586:26" pos:end="2586:37"><expr pos:start="2586:26" pos:end="2586:37"><name pos:start="2586:26" pos:end="2586:37">CC_OP_EFLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="2587:13" pos:end="2587:18">break;</break>
        <default pos:start="2588:9" pos:end="2588:16">default:</default>
        <break pos:start="2589:9" pos:end="2589:14">break;</break>
    <case pos:start="2590:5" pos:end="2590:15">case <expr pos:start="2590:10" pos:end="2590:14"><literal type="number" pos:start="2590:10" pos:end="2590:14">0x101</literal></expr>:</case>
        <expr_stmt pos:start="2591:9" pos:end="2591:44"><expr pos:start="2591:9" pos:end="2591:43"><name pos:start="2591:9" pos:end="2591:13">modrm</name> <operator pos:start="2591:15" pos:end="2591:15">=</operator> <call pos:start="2591:17" pos:end="2591:43"><name pos:start="2591:17" pos:end="2591:29">cpu_ldub_code</name><argument_list pos:start="2591:30" pos:end="2591:43">(<argument pos:start="2591:31" pos:end="2591:33"><expr pos:start="2591:31" pos:end="2591:33"><name pos:start="2591:31" pos:end="2591:33">env</name></expr></argument>, <argument pos:start="2591:36" pos:end="2591:42"><expr pos:start="2591:36" pos:end="2591:42"><name pos:start="2591:36" pos:end="2591:40"><name pos:start="2591:36" pos:end="2591:36">s</name><operator pos:start="2591:37" pos:end="2591:38">-&gt;</operator><name pos:start="2591:39" pos:end="2591:40">pc</name></name><operator pos:start="2591:41" pos:end="2591:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2592:9" pos:end="2592:31"><expr pos:start="2592:9" pos:end="2592:30"><name pos:start="2592:9" pos:end="2592:11">mod</name> <operator pos:start="2592:13" pos:end="2592:13">=</operator> <operator pos:start="2592:15" pos:end="2592:15">(</operator><name pos:start="2592:16" pos:end="2592:20">modrm</name> <operator pos:start="2592:22" pos:end="2592:23">&gt;&gt;</operator> <literal type="number" pos:start="2592:25" pos:end="2592:25">6</literal><operator pos:start="2592:26" pos:end="2592:26">)</operator> <operator pos:start="2592:28" pos:end="2592:28">&amp;</operator> <literal type="number" pos:start="2592:30" pos:end="2592:30">3</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="2593:9" pos:end="2593:30"><expr pos:start="2593:9" pos:end="2593:29"><name pos:start="2593:9" pos:end="2593:10">op</name> <operator pos:start="2593:12" pos:end="2593:12">=</operator> <operator pos:start="2593:14" pos:end="2593:14">(</operator><name pos:start="2593:15" pos:end="2593:19">modrm</name> <operator pos:start="2593:21" pos:end="2593:22">&gt;&gt;</operator> <literal type="number" pos:start="2593:24" pos:end="2593:24">3</literal><operator pos:start="2593:25" pos:end="2593:25">)</operator> <operator pos:start="2593:27" pos:end="2593:27">&amp;</operator> <literal type="number" pos:start="2593:29" pos:end="2593:29">7</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="2594:9" pos:end="2594:23"><expr pos:start="2594:9" pos:end="2594:22"><name pos:start="2594:9" pos:end="2594:10">rm</name> <operator pos:start="2594:12" pos:end="2594:12">=</operator> <name pos:start="2594:14" pos:end="2594:18">modrm</name> <operator pos:start="2594:20" pos:end="2594:20">&amp;</operator> <literal type="number" pos:start="2594:22" pos:end="2594:22">7</literal></expr>;</expr_stmt>
        <switch pos:start="2595:9" pos:end="3141:17">switch<condition pos:start="2595:15" pos:end="2595:18">(<expr pos:start="2595:16" pos:end="2595:17"><name pos:start="2595:16" pos:end="2595:17">op</name></expr>)</condition> <block pos:start="2595:20" pos:end="3141:17">{<block_content pos:start="2596:9" pos:end="3141:17">
        <case pos:start="2596:9" pos:end="2596:15">case <expr pos:start="2596:14" pos:end="2596:14"><literal type="number" pos:start="2596:14" pos:end="2596:14">0</literal></expr>:</case> <comment type="block" pos:start="2596:17" pos:end="2596:26">/* sgdt */</comment>
            <if_stmt pos:start="2597:13" pos:end="2598:69"><if pos:start="2597:13" pos:end="2598:69">if <condition pos:start="2597:16" pos:end="2597:25">(<expr pos:start="2597:17" pos:end="2597:24"><name pos:start="2597:17" pos:end="2597:19">mod</name> <operator pos:start="2597:21" pos:end="2597:22">==</operator> <literal type="number" pos:start="2597:24" pos:end="2597:24">3</literal></expr>)</condition><block type="pseudo" pos:start="2598:13" pos:end="2598:69"><block_content pos:start="2598:13" pos:end="2598:69">
            <expr_stmt pos:start="2598:13" pos:end="2598:69"><expr pos:start="2598:13" pos:end="2598:68"><call pos:start="2598:13" pos:end="2598:68"><name pos:start="2598:13" pos:end="2598:35">gen_svm_check_intercept</name><argument_list pos:start="2598:36" pos:end="2598:68">(<argument pos:start="2598:37" pos:end="2598:37"><expr pos:start="2598:37" pos:end="2598:37"><name pos:start="2598:37" pos:end="2598:37">s</name></expr></argument>, <argument pos:start="2598:40" pos:end="2598:47"><expr pos:start="2598:40" pos:end="2598:47"><name pos:start="2598:40" pos:end="2598:47">pc_start</name></expr></argument>, <argument pos:start="2598:50" pos:end="2598:67"><expr pos:start="2598:50" pos:end="2598:67"><name pos:start="2598:50" pos:end="2598:67">SVM_EXIT_GDTR_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt pos:start="2599:13" pos:end="2599:66"><expr pos:start="2599:13" pos:end="2599:65"><call pos:start="2599:13" pos:end="2599:65"><name pos:start="2599:13" pos:end="2599:25">gen_lea_modrm</name><argument_list pos:start="2599:26" pos:end="2599:65">(<argument pos:start="2599:27" pos:end="2599:29"><expr pos:start="2599:27" pos:end="2599:29"><name pos:start="2599:27" pos:end="2599:29">env</name></expr></argument>, <argument pos:start="2599:32" pos:end="2599:32"><expr pos:start="2599:32" pos:end="2599:32"><name pos:start="2599:32" pos:end="2599:32">s</name></expr></argument>, <argument pos:start="2599:35" pos:end="2599:39"><expr pos:start="2599:35" pos:end="2599:39"><name pos:start="2599:35" pos:end="2599:39">modrm</name></expr></argument>, <argument pos:start="2599:42" pos:end="2599:50"><expr pos:start="2599:42" pos:end="2599:50"><operator pos:start="2599:42" pos:end="2599:42">&amp;</operator><name pos:start="2599:43" pos:end="2599:50">reg_addr</name></expr></argument>, <argument pos:start="2599:53" pos:end="2599:64"><expr pos:start="2599:53" pos:end="2599:64"><operator pos:start="2599:53" pos:end="2599:53">&amp;</operator><name pos:start="2599:54" pos:end="2599:64">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2600:13" pos:end="2600:82"><expr pos:start="2600:13" pos:end="2600:81"><call pos:start="2600:13" pos:end="2600:81"><name pos:start="2600:13" pos:end="2600:28">tcg_gen_ld32u_tl</name><argument_list pos:start="2600:29" pos:end="2600:81">(<argument pos:start="2600:30" pos:end="2600:37"><expr pos:start="2600:30" pos:end="2600:37"><name pos:start="2600:30" pos:end="2600:37"><name pos:start="2600:30" pos:end="2600:34">cpu_T</name><index pos:start="2600:35" pos:end="2600:37">[<expr pos:start="2600:36" pos:end="2600:36"><literal type="number" pos:start="2600:36" pos:end="2600:36">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2600:40" pos:end="2600:46"><expr pos:start="2600:40" pos:end="2600:46"><name pos:start="2600:40" pos:end="2600:46">cpu_env</name></expr></argument>, <argument pos:start="2600:49" pos:end="2600:80"><expr pos:start="2600:49" pos:end="2600:80"><call pos:start="2600:49" pos:end="2600:80"><name pos:start="2600:49" pos:end="2600:56">offsetof</name><argument_list pos:start="2600:57" pos:end="2600:80">(<argument pos:start="2600:58" pos:end="2600:68"><expr pos:start="2600:58" pos:end="2600:68"><name pos:start="2600:58" pos:end="2600:68">CPUX86State</name></expr></argument>, <argument pos:start="2600:71" pos:end="2600:79"><expr pos:start="2600:71" pos:end="2600:79"><name pos:start="2600:71" pos:end="2600:79"><name pos:start="2600:71" pos:end="2600:73">gdt</name><operator pos:start="2600:74" pos:end="2600:74">.</operator><name pos:start="2600:75" pos:end="2600:79">limit</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2601:13" pos:end="2601:52"><expr pos:start="2601:13" pos:end="2601:51"><call pos:start="2601:13" pos:end="2601:51"><name pos:start="2601:13" pos:end="2601:27">gen_op_st_T0_A0</name><argument_list pos:start="2601:28" pos:end="2601:51">(<argument pos:start="2601:29" pos:end="2601:50"><expr pos:start="2601:29" pos:end="2601:50"><name pos:start="2601:29" pos:end="2601:35">OT_WORD</name> <operator pos:start="2601:37" pos:end="2601:37">+</operator> <name pos:start="2601:39" pos:end="2601:50"><name pos:start="2601:39" pos:end="2601:39">s</name><operator pos:start="2601:40" pos:end="2601:41">-&gt;</operator><name pos:start="2601:42" pos:end="2601:50">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2602:13" pos:end="2602:32"><expr pos:start="2602:13" pos:end="2602:31"><call pos:start="2602:13" pos:end="2602:31"><name pos:start="2602:13" pos:end="2602:25">gen_add_A0_im</name><argument_list pos:start="2602:26" pos:end="2602:31">(<argument pos:start="2602:27" pos:end="2602:27"><expr pos:start="2602:27" pos:end="2602:27"><name pos:start="2602:27" pos:end="2602:27">s</name></expr></argument>, <argument pos:start="2602:30" pos:end="2602:30"><expr pos:start="2602:30" pos:end="2602:30"><literal type="number" pos:start="2602:30" pos:end="2602:30">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2603:13" pos:end="2603:78"><expr pos:start="2603:13" pos:end="2603:77"><call pos:start="2603:13" pos:end="2603:77"><name pos:start="2603:13" pos:end="2603:25">tcg_gen_ld_tl</name><argument_list pos:start="2603:26" pos:end="2603:77">(<argument pos:start="2603:27" pos:end="2603:34"><expr pos:start="2603:27" pos:end="2603:34"><name pos:start="2603:27" pos:end="2603:34"><name pos:start="2603:27" pos:end="2603:31">cpu_T</name><index pos:start="2603:32" pos:end="2603:34">[<expr pos:start="2603:33" pos:end="2603:33"><literal type="number" pos:start="2603:33" pos:end="2603:33">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2603:37" pos:end="2603:43"><expr pos:start="2603:37" pos:end="2603:43"><name pos:start="2603:37" pos:end="2603:43">cpu_env</name></expr></argument>, <argument pos:start="2603:46" pos:end="2603:76"><expr pos:start="2603:46" pos:end="2603:76"><call pos:start="2603:46" pos:end="2603:76"><name pos:start="2603:46" pos:end="2603:53">offsetof</name><argument_list pos:start="2603:54" pos:end="2603:76">(<argument pos:start="2603:55" pos:end="2603:65"><expr pos:start="2603:55" pos:end="2603:65"><name pos:start="2603:55" pos:end="2603:65">CPUX86State</name></expr></argument>, <argument pos:start="2603:68" pos:end="2603:75"><expr pos:start="2603:68" pos:end="2603:75"><name pos:start="2603:68" pos:end="2603:75"><name pos:start="2603:68" pos:end="2603:70">gdt</name><operator pos:start="2603:71" pos:end="2603:71">.</operator><name pos:start="2603:72" pos:end="2603:75">base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="2604:13" pos:end="2605:44"><if pos:start="2604:13" pos:end="2605:44">if <condition pos:start="2604:16" pos:end="2604:26">(<expr pos:start="2604:17" pos:end="2604:25"><operator pos:start="2604:17" pos:end="2604:17">!</operator><name pos:start="2604:18" pos:end="2604:25"><name pos:start="2604:18" pos:end="2604:18">s</name><operator pos:start="2604:19" pos:end="2604:20">-&gt;</operator><name pos:start="2604:21" pos:end="2604:25">dflag</name></name></expr>)</condition><block type="pseudo" pos:start="2605:17" pos:end="2605:44"><block_content pos:start="2605:17" pos:end="2605:44">
                <expr_stmt pos:start="2605:17" pos:end="2605:44"><expr pos:start="2605:17" pos:end="2605:43"><call pos:start="2605:17" pos:end="2605:43"><name pos:start="2605:17" pos:end="2605:33">gen_op_andl_T0_im</name><argument_list pos:start="2605:34" pos:end="2605:43">(<argument pos:start="2605:35" pos:end="2605:42"><expr pos:start="2605:35" pos:end="2605:42"><literal type="number" pos:start="2605:35" pos:end="2605:42">0xffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt pos:start="2606:13" pos:end="2606:64"><expr pos:start="2606:13" pos:end="2606:63"><call pos:start="2606:13" pos:end="2606:63"><name pos:start="2606:13" pos:end="2606:27">gen_op_st_T0_A0</name><argument_list pos:start="2606:28" pos:end="2606:63">(<argument pos:start="2606:29" pos:end="2606:62"><expr pos:start="2606:29" pos:end="2606:62"><call pos:start="2606:29" pos:end="2606:37"><name pos:start="2606:29" pos:end="2606:34">CODE64</name><argument_list pos:start="2606:35" pos:end="2606:37">(<argument pos:start="2606:36" pos:end="2606:36"><expr pos:start="2606:36" pos:end="2606:36"><name pos:start="2606:36" pos:end="2606:36">s</name></expr></argument>)</argument_list></call> <operator pos:start="2606:39" pos:end="2606:39">+</operator> <name pos:start="2606:41" pos:end="2606:47">OT_LONG</name> <operator pos:start="2606:49" pos:end="2606:49">+</operator> <name pos:start="2606:51" pos:end="2606:62"><name pos:start="2606:51" pos:end="2606:51">s</name><operator pos:start="2606:52" pos:end="2606:53">-&gt;</operator><name pos:start="2606:54" pos:end="2606:62">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="2607:13" pos:end="2607:18">break;</break>
        <case pos:start="2608:9" pos:end="2608:15">case <expr pos:start="2608:14" pos:end="2608:14"><literal type="number" pos:start="2608:14" pos:end="2608:14">1</literal></expr>:</case>
            <if_stmt pos:start="2609:13" pos:end="3141:17"><if pos:start="2609:13" pos:end="3141:17">if <condition pos:start="2609:16" pos:end="2609:25">(<expr pos:start="2609:17" pos:end="2609:24"><name pos:start="2609:17" pos:end="2609:19">mod</name> <operator pos:start="2609:21" pos:end="2609:22">==</operator> <literal type="number" pos:start="2609:24" pos:end="2609:24">3</literal></expr>)</condition> <block pos:start="2609:27" pos:end="3141:17">{<block_content pos:start="2610:17" pos:end="3141:17">
                <switch pos:start="2610:17" pos:end="3141:17">switch <condition pos:start="2610:24" pos:end="2610:27">(<expr pos:start="2610:25" pos:end="2610:26"><name pos:start="2610:25" pos:end="2610:26">rm</name></expr>)</condition> <block pos:start="2610:29" pos:end="3141:17">{<block_content pos:start="2611:17" pos:end="3141:17">
                <case pos:start="2611:17" pos:end="2611:23">case <expr pos:start="2611:22" pos:end="2611:22"><literal type="number" pos:start="2611:22" pos:end="2611:22">0</literal></expr>:</case> <comment type="block" pos:start="2611:25" pos:end="2611:37">/* monitor */</comment>
                    <if_stmt pos:start="2612:21" pos:end="2614:40"><if pos:start="2612:21" pos:end="2614:40">if <condition pos:start="2612:24" pos:end="2613:36">(<expr pos:start="2612:25" pos:end="2613:35"><operator pos:start="2612:25" pos:end="2612:25">!</operator><operator pos:start="2612:26" pos:end="2612:26">(</operator><name pos:start="2612:27" pos:end="2612:47"><name pos:start="2612:27" pos:end="2612:27">s</name><operator pos:start="2612:28" pos:end="2612:29">-&gt;</operator><name pos:start="2612:30" pos:end="2612:47">cpuid_ext_features</name></name> <operator pos:start="2612:49" pos:end="2612:49">&amp;</operator> <name pos:start="2612:51" pos:end="2612:67">CPUID_EXT_MONITOR</name><operator pos:start="2612:68" pos:end="2612:68">)</operator> <operator pos:start="2612:70" pos:end="2612:71">||</operator>
                        <name pos:start="2613:25" pos:end="2613:30"><name pos:start="2613:25" pos:end="2613:25">s</name><operator pos:start="2613:26" pos:end="2613:27">-&gt;</operator><name pos:start="2613:28" pos:end="2613:30">cpl</name></name> <operator pos:start="2613:32" pos:end="2613:33">!=</operator> <literal type="number" pos:start="2613:35" pos:end="2613:35">0</literal></expr>)</condition><block type="pseudo" pos:start="2614:21" pos:end="2614:40"><block_content pos:start="2614:21" pos:end="2614:40">
                    <expr_stmt pos:start="2614:21" pos:end="2614:40"><expr pos:start="2614:21" pos:end="2614:39"><call pos:start="2614:21" pos:end="2614:39"><name pos:start="2614:21" pos:end="2614:36">gen_update_cc_op</name><argument_list pos:start="2614:37" pos:end="2614:39">(<argument pos:start="2614:38" pos:end="2614:38"><expr pos:start="2614:38" pos:end="2614:38"><name pos:start="2614:38" pos:end="2614:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <expr_stmt pos:start="2615:21" pos:end="2617:0"><expr pos:start="2615:21" pos:end="2615:53"><call pos:start="2615:21" pos:end="2615:53"><name pos:start="2615:21" pos:end="2615:30">gen_jmp_im</name><argument_list pos:start="2615:31" pos:end="2615:53">(<argument pos:start="2615:32" pos:end="2615:52"><expr pos:start="2615:32" pos:end="2615:52"><name pos:start="2615:32" pos:end="2615:39">pc_start</name> <operator pos:start="2615:41" pos:end="2615:41">-</operator> <name pos:start="2615:43" pos:end="2615:52"><name pos:start="2615:43" pos:end="2615:43">s</name><operator pos:start="2615:44" pos:end="2615:45">-&gt;</operator><name pos:start="2615:46" pos:end="2615:52">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:start="2616:1" pos:end="2616:20">#<cpp:directive pos:start="2616:2" pos:end="2616:6">ifdef</cpp:directive> <name pos:start="2616:8" pos:end="2616:20">TARGET_X86_64</name></cpp:ifdef>
                    <if_stmt pos:start="2617:21" pos:end="3141:17"><if pos:start="2617:21" pos:end="2619:21">if <condition pos:start="2617:24" pos:end="2617:38">(<expr pos:start="2617:25" pos:end="2617:37"><name pos:start="2617:25" pos:end="2617:32"><name pos:start="2617:25" pos:end="2617:25">s</name><operator pos:start="2617:26" pos:end="2617:27">-&gt;</operator><name pos:start="2617:28" pos:end="2617:32">aflag</name></name> <operator pos:start="2617:34" pos:end="2617:35">==</operator> <literal type="number" pos:start="2617:37" pos:end="2617:37">2</literal></expr>)</condition> <block pos:start="2617:40" pos:end="2619:21">{<block_content pos:start="2618:25" pos:end="2618:50">
                        <expr_stmt pos:start="2618:25" pos:end="2618:50"><expr pos:start="2618:25" pos:end="2618:49"><call pos:start="2618:25" pos:end="2618:49"><name pos:start="2618:25" pos:end="2618:42">gen_op_movq_A0_reg</name><argument_list pos:start="2618:43" pos:end="2618:49">(<argument pos:start="2618:44" pos:end="2618:48"><expr pos:start="2618:44" pos:end="2618:48"><name pos:start="2618:44" pos:end="2618:48">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else pos:start="2619:23" pos:end="3141:17">else
<cpp:endif pos:start="2620:1" pos:end="2620:6">#<cpp:directive pos:start="2620:2" pos:end="2620:6">endif</cpp:directive></cpp:endif>
                    <block pos:start="2621:21" pos:end="3141:17">{<block_content pos:start="2622:25" pos:end="3141:17">
                        <expr_stmt pos:start="2622:25" pos:end="2622:50"><expr pos:start="2622:25" pos:end="2622:49"><call pos:start="2622:25" pos:end="2622:49"><name pos:start="2622:25" pos:end="2622:42">gen_op_movl_A0_reg</name><argument_list pos:start="2622:43" pos:end="2622:49">(<argument pos:start="2622:44" pos:end="2622:48"><expr pos:start="2622:44" pos:end="2622:48"><name pos:start="2622:44" pos:end="2622:48">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if_stmt pos:start="2623:25" pos:end="2624:50"><if pos:start="2623:25" pos:end="2624:50">if <condition pos:start="2623:28" pos:end="2623:42">(<expr pos:start="2623:29" pos:end="2623:41"><name pos:start="2623:29" pos:end="2623:36"><name pos:start="2623:29" pos:end="2623:29">s</name><operator pos:start="2623:30" pos:end="2623:31">-&gt;</operator><name pos:start="2623:32" pos:end="2623:36">aflag</name></name> <operator pos:start="2623:38" pos:end="2623:39">==</operator> <literal type="number" pos:start="2623:41" pos:end="2623:41">0</literal></expr>)</condition><block type="pseudo" pos:start="2624:29" pos:end="2624:50"><block_content pos:start="2624:29" pos:end="2624:50">
                            <expr_stmt pos:start="2624:29" pos:end="2624:50"><expr pos:start="2624:29" pos:end="2624:49"><call pos:start="2624:29" pos:end="2624:49"><name pos:start="2624:29" pos:end="2624:47">gen_op_andl_A0_ffff</name><argument_list pos:start="2624:48" pos:end="2624:49">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <expr_stmt pos:start="2625:21" pos:end="2625:41"><expr pos:start="2625:21" pos:end="2625:40"><call pos:start="2625:21" pos:end="2625:40"><name pos:start="2625:21" pos:end="2625:37">gen_add_A0_ds_seg</name><argument_list pos:start="2625:38" pos:end="2625:40">(<argument pos:start="2625:39" pos:end="2625:39"><expr pos:start="2625:39" pos:end="2625:39"><name pos:start="2625:39" pos:end="2625:39">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="2626:21" pos:end="2626:56"><expr pos:start="2626:21" pos:end="2626:55"><call pos:start="2626:21" pos:end="2626:55"><name pos:start="2626:21" pos:end="2626:38">gen_helper_monitor</name><argument_list pos:start="2626:39" pos:end="2626:55">(<argument pos:start="2626:40" pos:end="2626:46"><expr pos:start="2626:40" pos:end="2626:46"><name pos:start="2626:40" pos:end="2626:46">cpu_env</name></expr></argument>, <argument pos:start="2626:49" pos:end="2626:54"><expr pos:start="2626:49" pos:end="2626:54"><name pos:start="2626:49" pos:end="2626:54">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:start="2627:21" pos:end="2627:26">break;</break>
                <case pos:start="2628:17" pos:end="2628:23">case <expr pos:start="2628:22" pos:end="2628:22"><literal type="number" pos:start="2628:22" pos:end="2628:22">1</literal></expr>:</case> <comment type="block" pos:start="2628:25" pos:end="2628:35">/* mwait */</comment>
                    <if_stmt pos:start="2629:21" pos:end="2631:40"><if pos:start="2629:21" pos:end="2631:40">if <condition pos:start="2629:24" pos:end="2630:36">(<expr pos:start="2629:25" pos:end="2630:35"><operator pos:start="2629:25" pos:end="2629:25">!</operator><operator pos:start="2629:26" pos:end="2629:26">(</operator><name pos:start="2629:27" pos:end="2629:47"><name pos:start="2629:27" pos:end="2629:27">s</name><operator pos:start="2629:28" pos:end="2629:29">-&gt;</operator><name pos:start="2629:30" pos:end="2629:47">cpuid_ext_features</name></name> <operator pos:start="2629:49" pos:end="2629:49">&amp;</operator> <name pos:start="2629:51" pos:end="2629:67">CPUID_EXT_MONITOR</name><operator pos:start="2629:68" pos:end="2629:68">)</operator> <operator pos:start="2629:70" pos:end="2629:71">||</operator>
                        <name pos:start="2630:25" pos:end="2630:30"><name pos:start="2630:25" pos:end="2630:25">s</name><operator pos:start="2630:26" pos:end="2630:27">-&gt;</operator><name pos:start="2630:28" pos:end="2630:30">cpl</name></name> <operator pos:start="2630:32" pos:end="2630:33">!=</operator> <literal type="number" pos:start="2630:35" pos:end="2630:35">0</literal></expr>)</condition><block type="pseudo" pos:start="2631:21" pos:end="2631:40"><block_content pos:start="2631:21" pos:end="2631:40">
                    <expr_stmt pos:start="2631:21" pos:end="2631:40"><expr pos:start="2631:21" pos:end="2631:39"><call pos:start="2631:21" pos:end="2631:39"><name pos:start="2631:21" pos:end="2631:36">gen_update_cc_op</name><argument_list pos:start="2631:37" pos:end="2631:39">(<argument pos:start="2631:38" pos:end="2631:38"><expr pos:start="2631:38" pos:end="2631:38"><name pos:start="2631:38" pos:end="2631:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <expr_stmt pos:start="2632:21" pos:end="2632:54"><expr pos:start="2632:21" pos:end="2632:53"><call pos:start="2632:21" pos:end="2632:53"><name pos:start="2632:21" pos:end="2632:30">gen_jmp_im</name><argument_list pos:start="2632:31" pos:end="2632:53">(<argument pos:start="2632:32" pos:end="2632:52"><expr pos:start="2632:32" pos:end="2632:52"><name pos:start="2632:32" pos:end="2632:39">pc_start</name> <operator pos:start="2632:41" pos:end="2632:41">-</operator> <name pos:start="2632:43" pos:end="2632:52"><name pos:start="2632:43" pos:end="2632:43">s</name><operator pos:start="2632:44" pos:end="2632:45">-&gt;</operator><name pos:start="2632:46" pos:end="2632:52">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="2633:21" pos:end="2633:79"><expr pos:start="2633:21" pos:end="2633:78"><call pos:start="2633:21" pos:end="2633:78"><name pos:start="2633:21" pos:end="2633:36">gen_helper_mwait</name><argument_list pos:start="2633:37" pos:end="2633:78">(<argument pos:start="2633:38" pos:end="2633:44"><expr pos:start="2633:38" pos:end="2633:44"><name pos:start="2633:38" pos:end="2633:44">cpu_env</name></expr></argument>, <argument pos:start="2633:47" pos:end="2633:77"><expr pos:start="2633:47" pos:end="2633:77"><call pos:start="2633:47" pos:end="2633:77"><name pos:start="2633:47" pos:end="2633:59">tcg_const_i32</name><argument_list pos:start="2633:60" pos:end="2633:77">(<argument pos:start="2633:61" pos:end="2633:76"><expr pos:start="2633:61" pos:end="2633:76"><name pos:start="2633:61" pos:end="2633:65"><name pos:start="2633:61" pos:end="2633:61">s</name><operator pos:start="2633:62" pos:end="2633:63">-&gt;</operator><name pos:start="2633:64" pos:end="2633:65">pc</name></name> <operator pos:start="2633:67" pos:end="2633:67">-</operator> <name pos:start="2633:69" pos:end="2633:76">pc_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="2634:21" pos:end="2634:31"><expr pos:start="2634:21" pos:end="2634:30"><call pos:start="2634:21" pos:end="2634:30"><name pos:start="2634:21" pos:end="2634:27">gen_eob</name><argument_list pos:start="2634:28" pos:end="2634:30">(<argument pos:start="2634:29" pos:end="2634:29"><expr pos:start="2634:29" pos:end="2634:29"><name pos:start="2634:29" pos:end="2634:29">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:start="2635:21" pos:end="2635:26">break;</break>
                <case pos:start="2636:17" pos:end="2636:23">case <expr pos:start="2636:22" pos:end="2636:22"><literal type="number" pos:start="2636:22" pos:end="2636:22">2</literal></expr>:</case> <comment type="block" pos:start="2636:25" pos:end="2636:34">/* clac */</comment>
                    <if_stmt pos:start="2637:21" pos:end="3141:17"><if pos:start="2637:21" pos:end="3141:17">if <condition pos:start="2637:24" pos:end="2638:36">(<expr pos:start="2637:25" pos:end="2638:35"><operator pos:start="2637:25" pos:end="2637:25">!</operator><operator pos:start="2637:26" pos:end="2637:26">(</operator><name pos:start="2637:27" pos:end="2637:51"><name pos:start="2637:27" pos:end="2637:27">s</name><operator pos:start="2637:28" pos:end="2637:29">-&gt;</operator><name pos:start="2637:30" pos:end="2637:51">cpuid_7_0_ebx_features</name></name> <operator pos:start="2637:53" pos:end="2637:53">&amp;</operator> <name pos:start="2637:55" pos:end="2637:72">CPUID_7_0_EBX_SMAP</name><operator pos:start="2637:73" pos:end="2637:73">)</operator> <operator pos:start="2637:75" pos:end="2637:76">||</operator>
                        <name pos:start="2638:25" pos:end="2638:30"><name pos:start="2638:25" pos:end="2638:25">s</name><operator pos:start="2638:26" pos:end="2638:27">-&gt;</operator><name pos:start="2638:28" pos:end="2638:30">cpl</name></name> <operator pos:start="2638:32" pos:end="2638:33">!=</operator> <literal type="number" pos:start="2638:35" pos:end="2638:35">0</literal></expr>)</condition> <block pos:start="2638:38" pos:end="3141:17">{<block_content pos:start="2639:21" pos:end="3141:17">
                    <expr_stmt pos:start="2639:21" pos:end="2639:45"><expr pos:start="2639:21" pos:end="2639:44"><call pos:start="2639:21" pos:end="2639:44"><name pos:start="2639:21" pos:end="2639:35">gen_helper_clac</name><argument_list pos:start="2639:36" pos:end="2639:44">(<argument pos:start="2639:37" pos:end="2639:43"><expr pos:start="2639:37" pos:end="2639:43"><name pos:start="2639:37" pos:end="2639:43">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="2640:21" pos:end="2640:51"><expr pos:start="2640:21" pos:end="2640:50"><call pos:start="2640:21" pos:end="2640:50"><name pos:start="2640:21" pos:end="2640:30">gen_jmp_im</name><argument_list pos:start="2640:31" pos:end="2640:50">(<argument pos:start="2640:32" pos:end="2640:49"><expr pos:start="2640:32" pos:end="2640:49"><name pos:start="2640:32" pos:end="2640:36"><name pos:start="2640:32" pos:end="2640:32">s</name><operator pos:start="2640:33" pos:end="2640:34">-&gt;</operator><name pos:start="2640:35" pos:end="2640:36">pc</name></name> <operator pos:start="2640:38" pos:end="2640:38">-</operator> <name pos:start="2640:40" pos:end="2640:49"><name pos:start="2640:40" pos:end="2640:40">s</name><operator pos:start="2640:41" pos:end="2640:42">-&gt;</operator><name pos:start="2640:43" pos:end="2640:49">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="2641:21" pos:end="2641:31"><expr pos:start="2641:21" pos:end="2641:30"><call pos:start="2641:21" pos:end="2641:30"><name pos:start="2641:21" pos:end="2641:27">gen_eob</name><argument_list pos:start="2641:28" pos:end="2641:30">(<argument pos:start="2641:29" pos:end="2641:29"><expr pos:start="2641:29" pos:end="2641:29"><name pos:start="2641:29" pos:end="2641:29">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:start="2642:21" pos:end="2642:26">break;</break>
                <case pos:start="2643:17" pos:end="2643:23">case <expr pos:start="2643:22" pos:end="2643:22"><literal type="number" pos:start="2643:22" pos:end="2643:22">3</literal></expr>:</case> <comment type="block" pos:start="2643:25" pos:end="2643:34">/* stac */</comment>
                    <if_stmt pos:start="2644:21" pos:end="3141:17"><if pos:start="2644:21" pos:end="2651:13">if <condition pos:start="2644:24" pos:end="2645:36">(<expr pos:start="2644:25" pos:end="2645:35"><operator pos:start="2644:25" pos:end="2644:25">!</operator><operator pos:start="2644:26" pos:end="2644:26">(</operator><name pos:start="2644:27" pos:end="2644:51"><name pos:start="2644:27" pos:end="2644:27">s</name><operator pos:start="2644:28" pos:end="2644:29">-&gt;</operator><name pos:start="2644:30" pos:end="2644:51">cpuid_7_0_ebx_features</name></name> <operator pos:start="2644:53" pos:end="2644:53">&amp;</operator> <name pos:start="2644:55" pos:end="2644:72">CPUID_7_0_EBX_SMAP</name><operator pos:start="2644:73" pos:end="2644:73">)</operator> <operator pos:start="2644:75" pos:end="2644:76">||</operator>
                        <name pos:start="2645:25" pos:end="2645:30"><name pos:start="2645:25" pos:end="2645:25">s</name><operator pos:start="2645:26" pos:end="2645:27">-&gt;</operator><name pos:start="2645:28" pos:end="2645:30">cpl</name></name> <operator pos:start="2645:32" pos:end="2645:33">!=</operator> <literal type="number" pos:start="2645:35" pos:end="2645:35">0</literal></expr>)</condition> <block pos:start="2645:38" pos:end="2651:13">{<block_content pos:start="2646:21" pos:end="2650:24">
                    <expr_stmt pos:start="2646:21" pos:end="2646:45"><expr pos:start="2646:21" pos:end="2646:44"><call pos:start="2646:21" pos:end="2646:44"><name pos:start="2646:21" pos:end="2646:35">gen_helper_stac</name><argument_list pos:start="2646:36" pos:end="2646:44">(<argument pos:start="2646:37" pos:end="2646:43"><expr pos:start="2646:37" pos:end="2646:43"><name pos:start="2646:37" pos:end="2646:43">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="2647:21" pos:end="2647:51"><expr pos:start="2647:21" pos:end="2647:50"><call pos:start="2647:21" pos:end="2647:50"><name pos:start="2647:21" pos:end="2647:30">gen_jmp_im</name><argument_list pos:start="2647:31" pos:end="2647:50">(<argument pos:start="2647:32" pos:end="2647:49"><expr pos:start="2647:32" pos:end="2647:49"><name pos:start="2647:32" pos:end="2647:36"><name pos:start="2647:32" pos:end="2647:32">s</name><operator pos:start="2647:33" pos:end="2647:34">-&gt;</operator><name pos:start="2647:35" pos:end="2647:36">pc</name></name> <operator pos:start="2647:38" pos:end="2647:38">-</operator> <name pos:start="2647:40" pos:end="2647:49"><name pos:start="2647:40" pos:end="2647:40">s</name><operator pos:start="2647:41" pos:end="2647:42">-&gt;</operator><name pos:start="2647:43" pos:end="2647:49">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="2648:21" pos:end="2648:31"><expr pos:start="2648:21" pos:end="2648:30"><call pos:start="2648:21" pos:end="2648:30"><name pos:start="2648:21" pos:end="2648:27">gen_eob</name><argument_list pos:start="2648:28" pos:end="2648:30">(<argument pos:start="2648:29" pos:end="2648:29"><expr pos:start="2648:29" pos:end="2648:29"><name pos:start="2648:29" pos:end="2648:29">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:start="2649:21" pos:end="2649:26">break;</break>
                <default pos:start="2650:17" pos:end="2650:24">default:</default>
            </block_content>}</block></if> <else pos:start="2651:15" pos:end="3141:17">else <block pos:start="2651:20" pos:end="3141:17">{<block_content pos:start="2652:17" pos:end="3141:17"> <comment type="block" pos:start="2651:22" pos:end="2651:31">/* sidt */</comment>
                <expr_stmt pos:start="2652:17" pos:end="2652:73"><expr pos:start="2652:17" pos:end="2652:72"><call pos:start="2652:17" pos:end="2652:72"><name pos:start="2652:17" pos:end="2652:39">gen_svm_check_intercept</name><argument_list pos:start="2652:40" pos:end="2652:72">(<argument pos:start="2652:41" pos:end="2652:41"><expr pos:start="2652:41" pos:end="2652:41"><name pos:start="2652:41" pos:end="2652:41">s</name></expr></argument>, <argument pos:start="2652:44" pos:end="2652:51"><expr pos:start="2652:44" pos:end="2652:51"><name pos:start="2652:44" pos:end="2652:51">pc_start</name></expr></argument>, <argument pos:start="2652:54" pos:end="2652:71"><expr pos:start="2652:54" pos:end="2652:71"><name pos:start="2652:54" pos:end="2652:71">SVM_EXIT_IDTR_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2653:17" pos:end="2653:70"><expr pos:start="2653:17" pos:end="2653:69"><call pos:start="2653:17" pos:end="2653:69"><name pos:start="2653:17" pos:end="2653:29">gen_lea_modrm</name><argument_list pos:start="2653:30" pos:end="2653:69">(<argument pos:start="2653:31" pos:end="2653:33"><expr pos:start="2653:31" pos:end="2653:33"><name pos:start="2653:31" pos:end="2653:33">env</name></expr></argument>, <argument pos:start="2653:36" pos:end="2653:36"><expr pos:start="2653:36" pos:end="2653:36"><name pos:start="2653:36" pos:end="2653:36">s</name></expr></argument>, <argument pos:start="2653:39" pos:end="2653:43"><expr pos:start="2653:39" pos:end="2653:43"><name pos:start="2653:39" pos:end="2653:43">modrm</name></expr></argument>, <argument pos:start="2653:46" pos:end="2653:54"><expr pos:start="2653:46" pos:end="2653:54"><operator pos:start="2653:46" pos:end="2653:46">&amp;</operator><name pos:start="2653:47" pos:end="2653:54">reg_addr</name></expr></argument>, <argument pos:start="2653:57" pos:end="2653:68"><expr pos:start="2653:57" pos:end="2653:68"><operator pos:start="2653:57" pos:end="2653:57">&amp;</operator><name pos:start="2653:58" pos:end="2653:68">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2654:17" pos:end="2654:86"><expr pos:start="2654:17" pos:end="2654:85"><call pos:start="2654:17" pos:end="2654:85"><name pos:start="2654:17" pos:end="2654:32">tcg_gen_ld32u_tl</name><argument_list pos:start="2654:33" pos:end="2654:85">(<argument pos:start="2654:34" pos:end="2654:41"><expr pos:start="2654:34" pos:end="2654:41"><name pos:start="2654:34" pos:end="2654:41"><name pos:start="2654:34" pos:end="2654:38">cpu_T</name><index pos:start="2654:39" pos:end="2654:41">[<expr pos:start="2654:40" pos:end="2654:40"><literal type="number" pos:start="2654:40" pos:end="2654:40">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2654:44" pos:end="2654:50"><expr pos:start="2654:44" pos:end="2654:50"><name pos:start="2654:44" pos:end="2654:50">cpu_env</name></expr></argument>, <argument pos:start="2654:53" pos:end="2654:84"><expr pos:start="2654:53" pos:end="2654:84"><call pos:start="2654:53" pos:end="2654:84"><name pos:start="2654:53" pos:end="2654:60">offsetof</name><argument_list pos:start="2654:61" pos:end="2654:84">(<argument pos:start="2654:62" pos:end="2654:72"><expr pos:start="2654:62" pos:end="2654:72"><name pos:start="2654:62" pos:end="2654:72">CPUX86State</name></expr></argument>, <argument pos:start="2654:75" pos:end="2654:83"><expr pos:start="2654:75" pos:end="2654:83"><name pos:start="2654:75" pos:end="2654:83"><name pos:start="2654:75" pos:end="2654:77">idt</name><operator pos:start="2654:78" pos:end="2654:78">.</operator><name pos:start="2654:79" pos:end="2654:83">limit</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2655:17" pos:end="2655:56"><expr pos:start="2655:17" pos:end="2655:55"><call pos:start="2655:17" pos:end="2655:55"><name pos:start="2655:17" pos:end="2655:31">gen_op_st_T0_A0</name><argument_list pos:start="2655:32" pos:end="2655:55">(<argument pos:start="2655:33" pos:end="2655:54"><expr pos:start="2655:33" pos:end="2655:54"><name pos:start="2655:33" pos:end="2655:39">OT_WORD</name> <operator pos:start="2655:41" pos:end="2655:41">+</operator> <name pos:start="2655:43" pos:end="2655:54"><name pos:start="2655:43" pos:end="2655:43">s</name><operator pos:start="2655:44" pos:end="2655:45">-&gt;</operator><name pos:start="2655:46" pos:end="2655:54">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2656:17" pos:end="2656:36"><expr pos:start="2656:17" pos:end="2656:35"><call pos:start="2656:17" pos:end="2656:35"><name pos:start="2656:17" pos:end="2656:29">gen_add_A0_im</name><argument_list pos:start="2656:30" pos:end="2656:35">(<argument pos:start="2656:31" pos:end="2656:31"><expr pos:start="2656:31" pos:end="2656:31"><name pos:start="2656:31" pos:end="2656:31">s</name></expr></argument>, <argument pos:start="2656:34" pos:end="2656:34"><expr pos:start="2656:34" pos:end="2656:34"><literal type="number" pos:start="2656:34" pos:end="2656:34">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2657:17" pos:end="2657:82"><expr pos:start="2657:17" pos:end="2657:81"><call pos:start="2657:17" pos:end="2657:81"><name pos:start="2657:17" pos:end="2657:29">tcg_gen_ld_tl</name><argument_list pos:start="2657:30" pos:end="2657:81">(<argument pos:start="2657:31" pos:end="2657:38"><expr pos:start="2657:31" pos:end="2657:38"><name pos:start="2657:31" pos:end="2657:38"><name pos:start="2657:31" pos:end="2657:35">cpu_T</name><index pos:start="2657:36" pos:end="2657:38">[<expr pos:start="2657:37" pos:end="2657:37"><literal type="number" pos:start="2657:37" pos:end="2657:37">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2657:41" pos:end="2657:47"><expr pos:start="2657:41" pos:end="2657:47"><name pos:start="2657:41" pos:end="2657:47">cpu_env</name></expr></argument>, <argument pos:start="2657:50" pos:end="2657:80"><expr pos:start="2657:50" pos:end="2657:80"><call pos:start="2657:50" pos:end="2657:80"><name pos:start="2657:50" pos:end="2657:57">offsetof</name><argument_list pos:start="2657:58" pos:end="2657:80">(<argument pos:start="2657:59" pos:end="2657:69"><expr pos:start="2657:59" pos:end="2657:69"><name pos:start="2657:59" pos:end="2657:69">CPUX86State</name></expr></argument>, <argument pos:start="2657:72" pos:end="2657:79"><expr pos:start="2657:72" pos:end="2657:79"><name pos:start="2657:72" pos:end="2657:79"><name pos:start="2657:72" pos:end="2657:74">idt</name><operator pos:start="2657:75" pos:end="2657:75">.</operator><name pos:start="2657:76" pos:end="2657:79">base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="2658:17" pos:end="2659:48"><if pos:start="2658:17" pos:end="2659:48">if <condition pos:start="2658:20" pos:end="2658:30">(<expr pos:start="2658:21" pos:end="2658:29"><operator pos:start="2658:21" pos:end="2658:21">!</operator><name pos:start="2658:22" pos:end="2658:29"><name pos:start="2658:22" pos:end="2658:22">s</name><operator pos:start="2658:23" pos:end="2658:24">-&gt;</operator><name pos:start="2658:25" pos:end="2658:29">dflag</name></name></expr>)</condition><block type="pseudo" pos:start="2659:21" pos:end="2659:48"><block_content pos:start="2659:21" pos:end="2659:48">
                    <expr_stmt pos:start="2659:21" pos:end="2659:48"><expr pos:start="2659:21" pos:end="2659:47"><call pos:start="2659:21" pos:end="2659:47"><name pos:start="2659:21" pos:end="2659:37">gen_op_andl_T0_im</name><argument_list pos:start="2659:38" pos:end="2659:47">(<argument pos:start="2659:39" pos:end="2659:46"><expr pos:start="2659:39" pos:end="2659:46"><literal type="number" pos:start="2659:39" pos:end="2659:46">0xffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt pos:start="2660:17" pos:end="2660:68"><expr pos:start="2660:17" pos:end="2660:67"><call pos:start="2660:17" pos:end="2660:67"><name pos:start="2660:17" pos:end="2660:31">gen_op_st_T0_A0</name><argument_list pos:start="2660:32" pos:end="2660:67">(<argument pos:start="2660:33" pos:end="2660:66"><expr pos:start="2660:33" pos:end="2660:66"><call pos:start="2660:33" pos:end="2660:41"><name pos:start="2660:33" pos:end="2660:38">CODE64</name><argument_list pos:start="2660:39" pos:end="2660:41">(<argument pos:start="2660:40" pos:end="2660:40"><expr pos:start="2660:40" pos:end="2660:40"><name pos:start="2660:40" pos:end="2660:40">s</name></expr></argument>)</argument_list></call> <operator pos:start="2660:43" pos:end="2660:43">+</operator> <name pos:start="2660:45" pos:end="2660:51">OT_LONG</name> <operator pos:start="2660:53" pos:end="2660:53">+</operator> <name pos:start="2660:55" pos:end="2660:66"><name pos:start="2660:55" pos:end="2660:55">s</name><operator pos:start="2660:56" pos:end="2660:57">-&gt;</operator><name pos:start="2660:58" pos:end="2660:66">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="2661:13" pos:end="2661:18">break;</break>
        <case pos:start="2662:9" pos:end="2662:15">case <expr pos:start="2662:14" pos:end="2662:14"><literal type="number" pos:start="2662:14" pos:end="2662:14">2</literal></expr>:</case> <comment type="block" pos:start="2662:17" pos:end="2662:26">/* lgdt */</comment>
        <case pos:start="2663:9" pos:end="2663:15">case <expr pos:start="2663:14" pos:end="2663:14"><literal type="number" pos:start="2663:14" pos:end="2663:14">3</literal></expr>:</case> <comment type="block" pos:start="2663:17" pos:end="2663:26">/* lidt */</comment>
            <if_stmt pos:start="2664:13" pos:end="3141:17"><if pos:start="2664:13" pos:end="3141:17">if <condition pos:start="2664:16" pos:end="2664:25">(<expr pos:start="2664:17" pos:end="2664:24"><name pos:start="2664:17" pos:end="2664:19">mod</name> <operator pos:start="2664:21" pos:end="2664:22">==</operator> <literal type="number" pos:start="2664:24" pos:end="2664:24">3</literal></expr>)</condition> <block pos:start="2664:27" pos:end="3141:17">{<block_content pos:start="2665:17" pos:end="3141:17">
                <expr_stmt pos:start="2665:17" pos:end="2665:36"><expr pos:start="2665:17" pos:end="2665:35"><call pos:start="2665:17" pos:end="2665:35"><name pos:start="2665:17" pos:end="2665:32">gen_update_cc_op</name><argument_list pos:start="2665:33" pos:end="2665:35">(<argument pos:start="2665:34" pos:end="2665:34"><expr pos:start="2665:34" pos:end="2665:34"><name pos:start="2665:34" pos:end="2665:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2666:17" pos:end="2666:50"><expr pos:start="2666:17" pos:end="2666:49"><call pos:start="2666:17" pos:end="2666:49"><name pos:start="2666:17" pos:end="2666:26">gen_jmp_im</name><argument_list pos:start="2666:27" pos:end="2666:49">(<argument pos:start="2666:28" pos:end="2666:48"><expr pos:start="2666:28" pos:end="2666:48"><name pos:start="2666:28" pos:end="2666:35">pc_start</name> <operator pos:start="2666:37" pos:end="2666:37">-</operator> <name pos:start="2666:39" pos:end="2666:48"><name pos:start="2666:39" pos:end="2666:39">s</name><operator pos:start="2666:40" pos:end="2666:41">-&gt;</operator><name pos:start="2666:42" pos:end="2666:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <switch pos:start="2667:17" pos:end="3141:17">switch<condition pos:start="2667:23" pos:end="2667:26">(<expr pos:start="2667:24" pos:end="2667:25"><name pos:start="2667:24" pos:end="2667:25">rm</name></expr>)</condition> <block pos:start="2667:28" pos:end="3141:17">{<block_content pos:start="2668:17" pos:end="3141:17">
                <case pos:start="2668:17" pos:end="2668:23">case <expr pos:start="2668:22" pos:end="2668:22"><literal type="number" pos:start="2668:22" pos:end="2668:22">0</literal></expr>:</case> <comment type="block" pos:start="2668:25" pos:end="2668:35">/* VMRUN */</comment>
                    <if_stmt pos:start="2669:21" pos:end="3141:17"><if pos:start="2669:21" pos:end="3141:17">if <condition pos:start="2669:24" pos:end="2669:61">(<expr pos:start="2669:25" pos:end="2669:60"><operator pos:start="2669:25" pos:end="2669:25">!</operator><operator pos:start="2669:26" pos:end="2669:26">(</operator><name pos:start="2669:27" pos:end="2669:34"><name pos:start="2669:27" pos:end="2669:27">s</name><operator pos:start="2669:28" pos:end="2669:29">-&gt;</operator><name pos:start="2669:30" pos:end="2669:34">flags</name></name> <operator pos:start="2669:36" pos:end="2669:36">&amp;</operator> <name pos:start="2669:38" pos:end="2669:49">HF_SVME_MASK</name><operator pos:start="2669:50" pos:end="2669:50">)</operator> <operator pos:start="2669:52" pos:end="2669:53">||</operator> <operator pos:start="2669:55" pos:end="2669:55">!</operator><name pos:start="2669:56" pos:end="2669:60"><name pos:start="2669:56" pos:end="2669:56">s</name><operator pos:start="2669:57" pos:end="2669:58">-&gt;</operator><name pos:start="2669:59" pos:end="2669:60">pe</name></name></expr>)</condition><block type="pseudo" pos:start="2670:21" pos:end="3141:17"><block_content pos:start="2670:21" pos:end="3141:17">
                    <if_stmt pos:start="2670:21" pos:end="3141:17"><if pos:start="2670:21" pos:end="2673:21">if <condition pos:start="2670:24" pos:end="2670:36">(<expr pos:start="2670:25" pos:end="2670:35"><name pos:start="2670:25" pos:end="2670:30"><name pos:start="2670:25" pos:end="2670:25">s</name><operator pos:start="2670:26" pos:end="2670:27">-&gt;</operator><name pos:start="2670:28" pos:end="2670:30">cpl</name></name> <operator pos:start="2670:32" pos:end="2670:33">!=</operator> <literal type="number" pos:start="2670:35" pos:end="2670:35">0</literal></expr>)</condition> <block pos:start="2670:38" pos:end="2673:21">{<block_content pos:start="2671:25" pos:end="2672:30">
                        <expr_stmt pos:start="2671:25" pos:end="2671:76"><expr pos:start="2671:25" pos:end="2671:75"><call pos:start="2671:25" pos:end="2671:75"><name pos:start="2671:25" pos:end="2671:37">gen_exception</name><argument_list pos:start="2671:38" pos:end="2671:75">(<argument pos:start="2671:39" pos:end="2671:39"><expr pos:start="2671:39" pos:end="2671:39"><name pos:start="2671:39" pos:end="2671:39">s</name></expr></argument>, <argument pos:start="2671:42" pos:end="2671:51"><expr pos:start="2671:42" pos:end="2671:51"><name pos:start="2671:42" pos:end="2671:51">EXCP0D_GPF</name></expr></argument>, <argument pos:start="2671:54" pos:end="2671:74"><expr pos:start="2671:54" pos:end="2671:74"><name pos:start="2671:54" pos:end="2671:61">pc_start</name> <operator pos:start="2671:63" pos:end="2671:63">-</operator> <name pos:start="2671:65" pos:end="2671:74"><name pos:start="2671:65" pos:end="2671:65">s</name><operator pos:start="2671:66" pos:end="2671:67">-&gt;</operator><name pos:start="2671:68" pos:end="2671:74">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break pos:start="2672:25" pos:end="2672:30">break;</break>
                    </block_content>}</block></if> <else pos:start="2673:23" pos:end="3141:17">else <block pos:start="2673:28" pos:end="3141:17">{<block_content pos:start="2674:25" pos:end="3141:17">
                        <expr_stmt pos:start="2674:25" pos:end="2675:74"><expr pos:start="2674:25" pos:end="2675:73"><call pos:start="2674:25" pos:end="2675:73"><name pos:start="2674:25" pos:end="2674:40">gen_helper_vmrun</name><argument_list pos:start="2674:41" pos:end="2675:73">(<argument pos:start="2674:42" pos:end="2674:48"><expr pos:start="2674:42" pos:end="2674:48"><name pos:start="2674:42" pos:end="2674:48">cpu_env</name></expr></argument>, <argument pos:start="2674:51" pos:end="2674:73"><expr pos:start="2674:51" pos:end="2674:73"><call pos:start="2674:51" pos:end="2674:73"><name pos:start="2674:51" pos:end="2674:63">tcg_const_i32</name><argument_list pos:start="2674:64" pos:end="2674:73">(<argument pos:start="2674:65" pos:end="2674:72"><expr pos:start="2674:65" pos:end="2674:72"><name pos:start="2674:65" pos:end="2674:72"><name pos:start="2674:65" pos:end="2674:65">s</name><operator pos:start="2674:66" pos:end="2674:67">-&gt;</operator><name pos:start="2674:68" pos:end="2674:72">aflag</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                         <argument pos:start="2675:42" pos:end="2675:72"><expr pos:start="2675:42" pos:end="2675:72"><call pos:start="2675:42" pos:end="2675:72"><name pos:start="2675:42" pos:end="2675:54">tcg_const_i32</name><argument_list pos:start="2675:55" pos:end="2675:72">(<argument pos:start="2675:56" pos:end="2675:71"><expr pos:start="2675:56" pos:end="2675:71"><name pos:start="2675:56" pos:end="2675:60"><name pos:start="2675:56" pos:end="2675:56">s</name><operator pos:start="2675:57" pos:end="2675:58">-&gt;</operator><name pos:start="2675:59" pos:end="2675:60">pc</name></name> <operator pos:start="2675:62" pos:end="2675:62">-</operator> <name pos:start="2675:64" pos:end="2675:71">pc_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="2676:25" pos:end="2676:43"><expr pos:start="2676:25" pos:end="2676:42"><call pos:start="2676:25" pos:end="2676:42"><name pos:start="2676:25" pos:end="2676:39">tcg_gen_exit_tb</name><argument_list pos:start="2676:40" pos:end="2676:42">(<argument pos:start="2676:41" pos:end="2676:41"><expr pos:start="2676:41" pos:end="2676:41"><literal type="number" pos:start="2676:41" pos:end="2676:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="2677:25" pos:end="2677:50"><expr pos:start="2677:25" pos:end="2677:49"><name pos:start="2677:25" pos:end="2677:33"><name pos:start="2677:25" pos:end="2677:25">s</name><operator pos:start="2677:26" pos:end="2677:27">-&gt;</operator><name pos:start="2677:28" pos:end="2677:33">is_jmp</name></name> <operator pos:start="2677:35" pos:end="2677:35">=</operator> <name pos:start="2677:37" pos:end="2677:49">DISAS_TB_JUMP</name></expr>;</expr_stmt>
                    <break pos:start="2678:21" pos:end="2678:26">break;</break>
                <case pos:start="2679:17" pos:end="2679:23">case <expr pos:start="2679:22" pos:end="2679:22"><literal type="number" pos:start="2679:22" pos:end="2679:22">1</literal></expr>:</case> <comment type="block" pos:start="2679:25" pos:end="2679:37">/* VMMCALL */</comment>
                    <if_stmt pos:start="2680:21" pos:end="2681:48"><if pos:start="2680:21" pos:end="2681:48">if <condition pos:start="2680:24" pos:end="2680:51">(<expr pos:start="2680:25" pos:end="2680:50"><operator pos:start="2680:25" pos:end="2680:25">!</operator><operator pos:start="2680:26" pos:end="2680:26">(</operator><name pos:start="2680:27" pos:end="2680:34"><name pos:start="2680:27" pos:end="2680:27">s</name><operator pos:start="2680:28" pos:end="2680:29">-&gt;</operator><name pos:start="2680:30" pos:end="2680:34">flags</name></name> <operator pos:start="2680:36" pos:end="2680:36">&amp;</operator> <name pos:start="2680:38" pos:end="2680:49">HF_SVME_MASK</name><operator pos:start="2680:50" pos:end="2680:50">)</operator></expr>)</condition><block type="pseudo" pos:start="2681:21" pos:end="2681:48"><block_content pos:start="2681:21" pos:end="2681:48">
                    <expr_stmt pos:start="2681:21" pos:end="2681:48"><expr pos:start="2681:21" pos:end="2681:47"><call pos:start="2681:21" pos:end="2681:47"><name pos:start="2681:21" pos:end="2681:38">gen_helper_vmmcall</name><argument_list pos:start="2681:39" pos:end="2681:47">(<argument pos:start="2681:40" pos:end="2681:46"><expr pos:start="2681:40" pos:end="2681:46"><name pos:start="2681:40" pos:end="2681:46">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <break pos:start="2682:21" pos:end="2682:26">break;</break>
                <case pos:start="2683:17" pos:end="2683:23">case <expr pos:start="2683:22" pos:end="2683:22"><literal type="number" pos:start="2683:22" pos:end="2683:22">2</literal></expr>:</case> <comment type="block" pos:start="2683:25" pos:end="2683:36">/* VMLOAD */</comment>
                    <if_stmt pos:start="2684:21" pos:end="3141:17"><if pos:start="2684:21" pos:end="3141:17">if <condition pos:start="2684:24" pos:end="2684:61">(<expr pos:start="2684:25" pos:end="2684:60"><operator pos:start="2684:25" pos:end="2684:25">!</operator><operator pos:start="2684:26" pos:end="2684:26">(</operator><name pos:start="2684:27" pos:end="2684:34"><name pos:start="2684:27" pos:end="2684:27">s</name><operator pos:start="2684:28" pos:end="2684:29">-&gt;</operator><name pos:start="2684:30" pos:end="2684:34">flags</name></name> <operator pos:start="2684:36" pos:end="2684:36">&amp;</operator> <name pos:start="2684:38" pos:end="2684:49">HF_SVME_MASK</name><operator pos:start="2684:50" pos:end="2684:50">)</operator> <operator pos:start="2684:52" pos:end="2684:53">||</operator> <operator pos:start="2684:55" pos:end="2684:55">!</operator><name pos:start="2684:56" pos:end="2684:60"><name pos:start="2684:56" pos:end="2684:56">s</name><operator pos:start="2684:57" pos:end="2684:58">-&gt;</operator><name pos:start="2684:59" pos:end="2684:60">pe</name></name></expr>)</condition><block type="pseudo" pos:start="2685:21" pos:end="3141:17"><block_content pos:start="2685:21" pos:end="3141:17">
                    <if_stmt pos:start="2685:21" pos:end="3141:17"><if pos:start="2685:21" pos:end="2688:21">if <condition pos:start="2685:24" pos:end="2685:36">(<expr pos:start="2685:25" pos:end="2685:35"><name pos:start="2685:25" pos:end="2685:30"><name pos:start="2685:25" pos:end="2685:25">s</name><operator pos:start="2685:26" pos:end="2685:27">-&gt;</operator><name pos:start="2685:28" pos:end="2685:30">cpl</name></name> <operator pos:start="2685:32" pos:end="2685:33">!=</operator> <literal type="number" pos:start="2685:35" pos:end="2685:35">0</literal></expr>)</condition> <block pos:start="2685:38" pos:end="2688:21">{<block_content pos:start="2686:25" pos:end="2687:30">
                        <expr_stmt pos:start="2686:25" pos:end="2686:76"><expr pos:start="2686:25" pos:end="2686:75"><call pos:start="2686:25" pos:end="2686:75"><name pos:start="2686:25" pos:end="2686:37">gen_exception</name><argument_list pos:start="2686:38" pos:end="2686:75">(<argument pos:start="2686:39" pos:end="2686:39"><expr pos:start="2686:39" pos:end="2686:39"><name pos:start="2686:39" pos:end="2686:39">s</name></expr></argument>, <argument pos:start="2686:42" pos:end="2686:51"><expr pos:start="2686:42" pos:end="2686:51"><name pos:start="2686:42" pos:end="2686:51">EXCP0D_GPF</name></expr></argument>, <argument pos:start="2686:54" pos:end="2686:74"><expr pos:start="2686:54" pos:end="2686:74"><name pos:start="2686:54" pos:end="2686:61">pc_start</name> <operator pos:start="2686:63" pos:end="2686:63">-</operator> <name pos:start="2686:65" pos:end="2686:74"><name pos:start="2686:65" pos:end="2686:65">s</name><operator pos:start="2686:66" pos:end="2686:67">-&gt;</operator><name pos:start="2686:68" pos:end="2686:74">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break pos:start="2687:25" pos:end="2687:30">break;</break>
                    </block_content>}</block></if> <else pos:start="2688:23" pos:end="3141:17">else <block pos:start="2688:28" pos:end="3141:17">{<block_content pos:start="2689:25" pos:end="3141:17">
                        <expr_stmt pos:start="2689:25" pos:end="2689:76"><expr pos:start="2689:25" pos:end="2689:75"><call pos:start="2689:25" pos:end="2689:75"><name pos:start="2689:25" pos:end="2689:41">gen_helper_vmload</name><argument_list pos:start="2689:42" pos:end="2689:75">(<argument pos:start="2689:43" pos:end="2689:49"><expr pos:start="2689:43" pos:end="2689:49"><name pos:start="2689:43" pos:end="2689:49">cpu_env</name></expr></argument>, <argument pos:start="2689:52" pos:end="2689:74"><expr pos:start="2689:52" pos:end="2689:74"><call pos:start="2689:52" pos:end="2689:74"><name pos:start="2689:52" pos:end="2689:64">tcg_const_i32</name><argument_list pos:start="2689:65" pos:end="2689:74">(<argument pos:start="2689:66" pos:end="2689:73"><expr pos:start="2689:66" pos:end="2689:73"><name pos:start="2689:66" pos:end="2689:73"><name pos:start="2689:66" pos:end="2689:66">s</name><operator pos:start="2689:67" pos:end="2689:68">-&gt;</operator><name pos:start="2689:69" pos:end="2689:73">aflag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:start="2690:21" pos:end="2690:26">break;</break>
                <case pos:start="2691:17" pos:end="2691:23">case <expr pos:start="2691:22" pos:end="2691:22"><literal type="number" pos:start="2691:22" pos:end="2691:22">3</literal></expr>:</case> <comment type="block" pos:start="2691:25" pos:end="2691:36">/* VMSAVE */</comment>
                    <if_stmt pos:start="2692:21" pos:end="3141:17"><if pos:start="2692:21" pos:end="3141:17">if <condition pos:start="2692:24" pos:end="2692:61">(<expr pos:start="2692:25" pos:end="2692:60"><operator pos:start="2692:25" pos:end="2692:25">!</operator><operator pos:start="2692:26" pos:end="2692:26">(</operator><name pos:start="2692:27" pos:end="2692:34"><name pos:start="2692:27" pos:end="2692:27">s</name><operator pos:start="2692:28" pos:end="2692:29">-&gt;</operator><name pos:start="2692:30" pos:end="2692:34">flags</name></name> <operator pos:start="2692:36" pos:end="2692:36">&amp;</operator> <name pos:start="2692:38" pos:end="2692:49">HF_SVME_MASK</name><operator pos:start="2692:50" pos:end="2692:50">)</operator> <operator pos:start="2692:52" pos:end="2692:53">||</operator> <operator pos:start="2692:55" pos:end="2692:55">!</operator><name pos:start="2692:56" pos:end="2692:60"><name pos:start="2692:56" pos:end="2692:56">s</name><operator pos:start="2692:57" pos:end="2692:58">-&gt;</operator><name pos:start="2692:59" pos:end="2692:60">pe</name></name></expr>)</condition><block type="pseudo" pos:start="2693:21" pos:end="3141:17"><block_content pos:start="2693:21" pos:end="3141:17">
                    <if_stmt pos:start="2693:21" pos:end="3141:17"><if pos:start="2693:21" pos:end="2696:21">if <condition pos:start="2693:24" pos:end="2693:36">(<expr pos:start="2693:25" pos:end="2693:35"><name pos:start="2693:25" pos:end="2693:30"><name pos:start="2693:25" pos:end="2693:25">s</name><operator pos:start="2693:26" pos:end="2693:27">-&gt;</operator><name pos:start="2693:28" pos:end="2693:30">cpl</name></name> <operator pos:start="2693:32" pos:end="2693:33">!=</operator> <literal type="number" pos:start="2693:35" pos:end="2693:35">0</literal></expr>)</condition> <block pos:start="2693:38" pos:end="2696:21">{<block_content pos:start="2694:25" pos:end="2695:30">
                        <expr_stmt pos:start="2694:25" pos:end="2694:76"><expr pos:start="2694:25" pos:end="2694:75"><call pos:start="2694:25" pos:end="2694:75"><name pos:start="2694:25" pos:end="2694:37">gen_exception</name><argument_list pos:start="2694:38" pos:end="2694:75">(<argument pos:start="2694:39" pos:end="2694:39"><expr pos:start="2694:39" pos:end="2694:39"><name pos:start="2694:39" pos:end="2694:39">s</name></expr></argument>, <argument pos:start="2694:42" pos:end="2694:51"><expr pos:start="2694:42" pos:end="2694:51"><name pos:start="2694:42" pos:end="2694:51">EXCP0D_GPF</name></expr></argument>, <argument pos:start="2694:54" pos:end="2694:74"><expr pos:start="2694:54" pos:end="2694:74"><name pos:start="2694:54" pos:end="2694:61">pc_start</name> <operator pos:start="2694:63" pos:end="2694:63">-</operator> <name pos:start="2694:65" pos:end="2694:74"><name pos:start="2694:65" pos:end="2694:65">s</name><operator pos:start="2694:66" pos:end="2694:67">-&gt;</operator><name pos:start="2694:68" pos:end="2694:74">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break pos:start="2695:25" pos:end="2695:30">break;</break>
                    </block_content>}</block></if> <else pos:start="2696:23" pos:end="3141:17">else <block pos:start="2696:28" pos:end="3141:17">{<block_content pos:start="2697:25" pos:end="3141:17">
                        <expr_stmt pos:start="2697:25" pos:end="2697:76"><expr pos:start="2697:25" pos:end="2697:75"><call pos:start="2697:25" pos:end="2697:75"><name pos:start="2697:25" pos:end="2697:41">gen_helper_vmsave</name><argument_list pos:start="2697:42" pos:end="2697:75">(<argument pos:start="2697:43" pos:end="2697:49"><expr pos:start="2697:43" pos:end="2697:49"><name pos:start="2697:43" pos:end="2697:49">cpu_env</name></expr></argument>, <argument pos:start="2697:52" pos:end="2697:74"><expr pos:start="2697:52" pos:end="2697:74"><call pos:start="2697:52" pos:end="2697:74"><name pos:start="2697:52" pos:end="2697:64">tcg_const_i32</name><argument_list pos:start="2697:65" pos:end="2697:74">(<argument pos:start="2697:66" pos:end="2697:73"><expr pos:start="2697:66" pos:end="2697:73"><name pos:start="2697:66" pos:end="2697:73"><name pos:start="2697:66" pos:end="2697:66">s</name><operator pos:start="2697:67" pos:end="2697:68">-&gt;</operator><name pos:start="2697:69" pos:end="2697:73">aflag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:start="2698:21" pos:end="2698:26">break;</break>
                <case pos:start="2699:17" pos:end="2699:23">case <expr pos:start="2699:22" pos:end="2699:22"><literal type="number" pos:start="2699:22" pos:end="2699:22">4</literal></expr>:</case> <comment type="block" pos:start="2699:25" pos:end="2699:34">/* STGI */</comment>
                    <if_stmt pos:start="2700:21" pos:end="3141:17"><if pos:start="2700:21" pos:end="3141:17">if <condition pos:start="2700:24" pos:end="2702:31">(<expr pos:start="2700:25" pos:end="2702:30"><operator pos:start="2700:25" pos:end="2700:25">(</operator><operator pos:start="2700:26" pos:end="2700:26">!</operator><operator pos:start="2700:27" pos:end="2700:27">(</operator><name pos:start="2700:28" pos:end="2700:35"><name pos:start="2700:28" pos:end="2700:28">s</name><operator pos:start="2700:29" pos:end="2700:30">-&gt;</operator><name pos:start="2700:31" pos:end="2700:35">flags</name></name> <operator pos:start="2700:37" pos:end="2700:37">&amp;</operator> <name pos:start="2700:39" pos:end="2700:50">HF_SVME_MASK</name><operator pos:start="2700:51" pos:end="2700:51">)</operator> <operator pos:start="2700:53" pos:end="2700:54">&amp;&amp;</operator>
                         <operator pos:start="2701:26" pos:end="2701:26">!</operator><operator pos:start="2701:27" pos:end="2701:27">(</operator><name pos:start="2701:28" pos:end="2701:49"><name pos:start="2701:28" pos:end="2701:28">s</name><operator pos:start="2701:29" pos:end="2701:30">-&gt;</operator><name pos:start="2701:31" pos:end="2701:49">cpuid_ext3_features</name></name> <operator pos:start="2701:51" pos:end="2701:51">&amp;</operator> <name pos:start="2701:53" pos:end="2701:69">CPUID_EXT3_SKINIT</name><operator pos:start="2701:70" pos:end="2701:70">)</operator><operator pos:start="2701:71" pos:end="2701:71">)</operator> <operator pos:start="2701:73" pos:end="2701:74">||</operator> 
                        <operator pos:start="2702:25" pos:end="2702:25">!</operator><name pos:start="2702:26" pos:end="2702:30"><name pos:start="2702:26" pos:end="2702:26">s</name><operator pos:start="2702:27" pos:end="2702:28">-&gt;</operator><name pos:start="2702:29" pos:end="2702:30">pe</name></name></expr>)</condition><block type="pseudo" pos:start="2703:21" pos:end="3141:17"><block_content pos:start="2703:21" pos:end="3141:17">
                    <if_stmt pos:start="2703:21" pos:end="3141:17"><if pos:start="2703:21" pos:end="2706:21">if <condition pos:start="2703:24" pos:end="2703:36">(<expr pos:start="2703:25" pos:end="2703:35"><name pos:start="2703:25" pos:end="2703:30"><name pos:start="2703:25" pos:end="2703:25">s</name><operator pos:start="2703:26" pos:end="2703:27">-&gt;</operator><name pos:start="2703:28" pos:end="2703:30">cpl</name></name> <operator pos:start="2703:32" pos:end="2703:33">!=</operator> <literal type="number" pos:start="2703:35" pos:end="2703:35">0</literal></expr>)</condition> <block pos:start="2703:38" pos:end="2706:21">{<block_content pos:start="2704:25" pos:end="2705:30">
                        <expr_stmt pos:start="2704:25" pos:end="2704:76"><expr pos:start="2704:25" pos:end="2704:75"><call pos:start="2704:25" pos:end="2704:75"><name pos:start="2704:25" pos:end="2704:37">gen_exception</name><argument_list pos:start="2704:38" pos:end="2704:75">(<argument pos:start="2704:39" pos:end="2704:39"><expr pos:start="2704:39" pos:end="2704:39"><name pos:start="2704:39" pos:end="2704:39">s</name></expr></argument>, <argument pos:start="2704:42" pos:end="2704:51"><expr pos:start="2704:42" pos:end="2704:51"><name pos:start="2704:42" pos:end="2704:51">EXCP0D_GPF</name></expr></argument>, <argument pos:start="2704:54" pos:end="2704:74"><expr pos:start="2704:54" pos:end="2704:74"><name pos:start="2704:54" pos:end="2704:61">pc_start</name> <operator pos:start="2704:63" pos:end="2704:63">-</operator> <name pos:start="2704:65" pos:end="2704:74"><name pos:start="2704:65" pos:end="2704:65">s</name><operator pos:start="2704:66" pos:end="2704:67">-&gt;</operator><name pos:start="2704:68" pos:end="2704:74">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break pos:start="2705:25" pos:end="2705:30">break;</break>
                    </block_content>}</block></if> <else pos:start="2706:23" pos:end="3141:17">else <block pos:start="2706:28" pos:end="3141:17">{<block_content pos:start="2707:25" pos:end="3141:17">
                        <expr_stmt pos:start="2707:25" pos:end="2707:49"><expr pos:start="2707:25" pos:end="2707:48"><call pos:start="2707:25" pos:end="2707:48"><name pos:start="2707:25" pos:end="2707:39">gen_helper_stgi</name><argument_list pos:start="2707:40" pos:end="2707:48">(<argument pos:start="2707:41" pos:end="2707:47"><expr pos:start="2707:41" pos:end="2707:47"><name pos:start="2707:41" pos:end="2707:47">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:start="2708:21" pos:end="2708:26">break;</break>
                <case pos:start="2709:17" pos:end="2709:23">case <expr pos:start="2709:22" pos:end="2709:22"><literal type="number" pos:start="2709:22" pos:end="2709:22">5</literal></expr>:</case> <comment type="block" pos:start="2709:25" pos:end="2709:34">/* CLGI */</comment>
                    <if_stmt pos:start="2710:21" pos:end="3141:17"><if pos:start="2710:21" pos:end="3141:17">if <condition pos:start="2710:24" pos:end="2710:61">(<expr pos:start="2710:25" pos:end="2710:60"><operator pos:start="2710:25" pos:end="2710:25">!</operator><operator pos:start="2710:26" pos:end="2710:26">(</operator><name pos:start="2710:27" pos:end="2710:34"><name pos:start="2710:27" pos:end="2710:27">s</name><operator pos:start="2710:28" pos:end="2710:29">-&gt;</operator><name pos:start="2710:30" pos:end="2710:34">flags</name></name> <operator pos:start="2710:36" pos:end="2710:36">&amp;</operator> <name pos:start="2710:38" pos:end="2710:49">HF_SVME_MASK</name><operator pos:start="2710:50" pos:end="2710:50">)</operator> <operator pos:start="2710:52" pos:end="2710:53">||</operator> <operator pos:start="2710:55" pos:end="2710:55">!</operator><name pos:start="2710:56" pos:end="2710:60"><name pos:start="2710:56" pos:end="2710:56">s</name><operator pos:start="2710:57" pos:end="2710:58">-&gt;</operator><name pos:start="2710:59" pos:end="2710:60">pe</name></name></expr>)</condition><block type="pseudo" pos:start="2711:21" pos:end="3141:17"><block_content pos:start="2711:21" pos:end="3141:17">
                    <if_stmt pos:start="2711:21" pos:end="3141:17"><if pos:start="2711:21" pos:end="2714:21">if <condition pos:start="2711:24" pos:end="2711:36">(<expr pos:start="2711:25" pos:end="2711:35"><name pos:start="2711:25" pos:end="2711:30"><name pos:start="2711:25" pos:end="2711:25">s</name><operator pos:start="2711:26" pos:end="2711:27">-&gt;</operator><name pos:start="2711:28" pos:end="2711:30">cpl</name></name> <operator pos:start="2711:32" pos:end="2711:33">!=</operator> <literal type="number" pos:start="2711:35" pos:end="2711:35">0</literal></expr>)</condition> <block pos:start="2711:38" pos:end="2714:21">{<block_content pos:start="2712:25" pos:end="2713:30">
                        <expr_stmt pos:start="2712:25" pos:end="2712:76"><expr pos:start="2712:25" pos:end="2712:75"><call pos:start="2712:25" pos:end="2712:75"><name pos:start="2712:25" pos:end="2712:37">gen_exception</name><argument_list pos:start="2712:38" pos:end="2712:75">(<argument pos:start="2712:39" pos:end="2712:39"><expr pos:start="2712:39" pos:end="2712:39"><name pos:start="2712:39" pos:end="2712:39">s</name></expr></argument>, <argument pos:start="2712:42" pos:end="2712:51"><expr pos:start="2712:42" pos:end="2712:51"><name pos:start="2712:42" pos:end="2712:51">EXCP0D_GPF</name></expr></argument>, <argument pos:start="2712:54" pos:end="2712:74"><expr pos:start="2712:54" pos:end="2712:74"><name pos:start="2712:54" pos:end="2712:61">pc_start</name> <operator pos:start="2712:63" pos:end="2712:63">-</operator> <name pos:start="2712:65" pos:end="2712:74"><name pos:start="2712:65" pos:end="2712:65">s</name><operator pos:start="2712:66" pos:end="2712:67">-&gt;</operator><name pos:start="2712:68" pos:end="2712:74">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break pos:start="2713:25" pos:end="2713:30">break;</break>
                    </block_content>}</block></if> <else pos:start="2714:23" pos:end="3141:17">else <block pos:start="2714:28" pos:end="3141:17">{<block_content pos:start="2715:25" pos:end="3141:17">
                        <expr_stmt pos:start="2715:25" pos:end="2715:49"><expr pos:start="2715:25" pos:end="2715:48"><call pos:start="2715:25" pos:end="2715:48"><name pos:start="2715:25" pos:end="2715:39">gen_helper_clgi</name><argument_list pos:start="2715:40" pos:end="2715:48">(<argument pos:start="2715:41" pos:end="2715:47"><expr pos:start="2715:41" pos:end="2715:47"><name pos:start="2715:41" pos:end="2715:47">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:start="2716:21" pos:end="2716:26">break;</break>
                <case pos:start="2717:17" pos:end="2717:23">case <expr pos:start="2717:22" pos:end="2717:22"><literal type="number" pos:start="2717:22" pos:end="2717:22">6</literal></expr>:</case> <comment type="block" pos:start="2717:25" pos:end="2717:36">/* SKINIT */</comment>
                    <if_stmt pos:start="2718:21" pos:end="2721:47"><if pos:start="2718:21" pos:end="2721:47">if <condition pos:start="2718:24" pos:end="2720:31">(<expr pos:start="2718:25" pos:end="2720:30"><operator pos:start="2718:25" pos:end="2718:25">(</operator><operator pos:start="2718:26" pos:end="2718:26">!</operator><operator pos:start="2718:27" pos:end="2718:27">(</operator><name pos:start="2718:28" pos:end="2718:35"><name pos:start="2718:28" pos:end="2718:28">s</name><operator pos:start="2718:29" pos:end="2718:30">-&gt;</operator><name pos:start="2718:31" pos:end="2718:35">flags</name></name> <operator pos:start="2718:37" pos:end="2718:37">&amp;</operator> <name pos:start="2718:39" pos:end="2718:50">HF_SVME_MASK</name><operator pos:start="2718:51" pos:end="2718:51">)</operator> <operator pos:start="2718:53" pos:end="2718:54">&amp;&amp;</operator> 
                         <operator pos:start="2719:26" pos:end="2719:26">!</operator><operator pos:start="2719:27" pos:end="2719:27">(</operator><name pos:start="2719:28" pos:end="2719:49"><name pos:start="2719:28" pos:end="2719:28">s</name><operator pos:start="2719:29" pos:end="2719:30">-&gt;</operator><name pos:start="2719:31" pos:end="2719:49">cpuid_ext3_features</name></name> <operator pos:start="2719:51" pos:end="2719:51">&amp;</operator> <name pos:start="2719:53" pos:end="2719:69">CPUID_EXT3_SKINIT</name><operator pos:start="2719:70" pos:end="2719:70">)</operator><operator pos:start="2719:71" pos:end="2719:71">)</operator> <operator pos:start="2719:73" pos:end="2719:74">||</operator> 
                        <operator pos:start="2720:25" pos:end="2720:25">!</operator><name pos:start="2720:26" pos:end="2720:30"><name pos:start="2720:26" pos:end="2720:26">s</name><operator pos:start="2720:27" pos:end="2720:28">-&gt;</operator><name pos:start="2720:29" pos:end="2720:30">pe</name></name></expr>)</condition><block type="pseudo" pos:start="2721:21" pos:end="2721:47"><block_content pos:start="2721:21" pos:end="2721:47">
                    <expr_stmt pos:start="2721:21" pos:end="2721:47"><expr pos:start="2721:21" pos:end="2721:46"><call pos:start="2721:21" pos:end="2721:46"><name pos:start="2721:21" pos:end="2721:37">gen_helper_skinit</name><argument_list pos:start="2721:38" pos:end="2721:46">(<argument pos:start="2721:39" pos:end="2721:45"><expr pos:start="2721:39" pos:end="2721:45"><name pos:start="2721:39" pos:end="2721:45">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <break pos:start="2722:21" pos:end="2722:26">break;</break>
                <case pos:start="2723:17" pos:end="2723:23">case <expr pos:start="2723:22" pos:end="2723:22"><literal type="number" pos:start="2723:22" pos:end="2723:22">7</literal></expr>:</case> <comment type="block" pos:start="2723:25" pos:end="2723:37">/* INVLPGA */</comment>
                    <if_stmt pos:start="2724:21" pos:end="3141:17"><if pos:start="2724:21" pos:end="2732:13">if <condition pos:start="2724:24" pos:end="2724:61">(<expr pos:start="2724:25" pos:end="2724:60"><operator pos:start="2724:25" pos:end="2724:25">!</operator><operator pos:start="2724:26" pos:end="2724:26">(</operator><name pos:start="2724:27" pos:end="2724:34"><name pos:start="2724:27" pos:end="2724:27">s</name><operator pos:start="2724:28" pos:end="2724:29">-&gt;</operator><name pos:start="2724:30" pos:end="2724:34">flags</name></name> <operator pos:start="2724:36" pos:end="2724:36">&amp;</operator> <name pos:start="2724:38" pos:end="2724:49">HF_SVME_MASK</name><operator pos:start="2724:50" pos:end="2724:50">)</operator> <operator pos:start="2724:52" pos:end="2724:53">||</operator> <operator pos:start="2724:55" pos:end="2724:55">!</operator><name pos:start="2724:56" pos:end="2724:60"><name pos:start="2724:56" pos:end="2724:56">s</name><operator pos:start="2724:57" pos:end="2724:58">-&gt;</operator><name pos:start="2724:59" pos:end="2724:60">pe</name></name></expr>)</condition><block type="pseudo" pos:start="2725:21" pos:end="2732:13"><block_content pos:start="2725:21" pos:end="2732:13">
                    <if_stmt pos:start="2725:21" pos:end="2732:13"><if pos:start="2725:21" pos:end="2728:21">if <condition pos:start="2725:24" pos:end="2725:36">(<expr pos:start="2725:25" pos:end="2725:35"><name pos:start="2725:25" pos:end="2725:30"><name pos:start="2725:25" pos:end="2725:25">s</name><operator pos:start="2725:26" pos:end="2725:27">-&gt;</operator><name pos:start="2725:28" pos:end="2725:30">cpl</name></name> <operator pos:start="2725:32" pos:end="2725:33">!=</operator> <literal type="number" pos:start="2725:35" pos:end="2725:35">0</literal></expr>)</condition> <block pos:start="2725:38" pos:end="2728:21">{<block_content pos:start="2726:25" pos:end="2727:30">
                        <expr_stmt pos:start="2726:25" pos:end="2726:76"><expr pos:start="2726:25" pos:end="2726:75"><call pos:start="2726:25" pos:end="2726:75"><name pos:start="2726:25" pos:end="2726:37">gen_exception</name><argument_list pos:start="2726:38" pos:end="2726:75">(<argument pos:start="2726:39" pos:end="2726:39"><expr pos:start="2726:39" pos:end="2726:39"><name pos:start="2726:39" pos:end="2726:39">s</name></expr></argument>, <argument pos:start="2726:42" pos:end="2726:51"><expr pos:start="2726:42" pos:end="2726:51"><name pos:start="2726:42" pos:end="2726:51">EXCP0D_GPF</name></expr></argument>, <argument pos:start="2726:54" pos:end="2726:74"><expr pos:start="2726:54" pos:end="2726:74"><name pos:start="2726:54" pos:end="2726:61">pc_start</name> <operator pos:start="2726:63" pos:end="2726:63">-</operator> <name pos:start="2726:65" pos:end="2726:74"><name pos:start="2726:65" pos:end="2726:65">s</name><operator pos:start="2726:66" pos:end="2726:67">-&gt;</operator><name pos:start="2726:68" pos:end="2726:74">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break pos:start="2727:25" pos:end="2727:30">break;</break>
                    </block_content>}</block></if> <else pos:start="2728:23" pos:end="2732:13">else <block pos:start="2728:28" pos:end="2732:13">{<block_content pos:start="2729:25" pos:end="2731:24">
                        <expr_stmt pos:start="2729:25" pos:end="2729:77"><expr pos:start="2729:25" pos:end="2729:76"><call pos:start="2729:25" pos:end="2729:76"><name pos:start="2729:25" pos:end="2729:42">gen_helper_invlpga</name><argument_list pos:start="2729:43" pos:end="2729:76">(<argument pos:start="2729:44" pos:end="2729:50"><expr pos:start="2729:44" pos:end="2729:50"><name pos:start="2729:44" pos:end="2729:50">cpu_env</name></expr></argument>, <argument pos:start="2729:53" pos:end="2729:75"><expr pos:start="2729:53" pos:end="2729:75"><call pos:start="2729:53" pos:end="2729:75"><name pos:start="2729:53" pos:end="2729:65">tcg_const_i32</name><argument_list pos:start="2729:66" pos:end="2729:75">(<argument pos:start="2729:67" pos:end="2729:74"><expr pos:start="2729:67" pos:end="2729:74"><name pos:start="2729:67" pos:end="2729:74"><name pos:start="2729:67" pos:end="2729:67">s</name><operator pos:start="2729:68" pos:end="2729:69">-&gt;</operator><name pos:start="2729:70" pos:end="2729:74">aflag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:start="2730:21" pos:end="2730:26">break;</break>
                <default pos:start="2731:17" pos:end="2731:24">default:</default>
            </block_content>}</block></else></if_stmt></block_content></block></if> <if type="elseif" pos:start="2732:15" pos:end="2734:13">else if <condition pos:start="2732:23" pos:end="2732:35">(<expr pos:start="2732:24" pos:end="2732:34"><name pos:start="2732:24" pos:end="2732:29"><name pos:start="2732:24" pos:end="2732:24">s</name><operator pos:start="2732:25" pos:end="2732:26">-&gt;</operator><name pos:start="2732:27" pos:end="2732:29">cpl</name></name> <operator pos:start="2732:31" pos:end="2732:32">!=</operator> <literal type="number" pos:start="2732:34" pos:end="2732:34">0</literal></expr>)</condition> <block pos:start="2732:37" pos:end="2734:13">{<block_content pos:start="2733:17" pos:end="2733:68">
                <expr_stmt pos:start="2733:17" pos:end="2733:68"><expr pos:start="2733:17" pos:end="2733:67"><call pos:start="2733:17" pos:end="2733:67"><name pos:start="2733:17" pos:end="2733:29">gen_exception</name><argument_list pos:start="2733:30" pos:end="2733:67">(<argument pos:start="2733:31" pos:end="2733:31"><expr pos:start="2733:31" pos:end="2733:31"><name pos:start="2733:31" pos:end="2733:31">s</name></expr></argument>, <argument pos:start="2733:34" pos:end="2733:43"><expr pos:start="2733:34" pos:end="2733:43"><name pos:start="2733:34" pos:end="2733:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="2733:46" pos:end="2733:66"><expr pos:start="2733:46" pos:end="2733:66"><name pos:start="2733:46" pos:end="2733:53">pc_start</name> <operator pos:start="2733:55" pos:end="2733:55">-</operator> <name pos:start="2733:57" pos:end="2733:66"><name pos:start="2733:57" pos:end="2733:57">s</name><operator pos:start="2733:58" pos:end="2733:59">-&gt;</operator><name pos:start="2733:60" pos:end="2733:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="2734:15" pos:end="3141:17">else <block pos:start="2734:20" pos:end="3141:17">{<block_content pos:start="2735:17" pos:end="3141:17">
                <expr_stmt pos:start="2735:17" pos:end="2736:91"><expr pos:start="2735:17" pos:end="2736:90"><call pos:start="2735:17" pos:end="2736:90"><name pos:start="2735:17" pos:end="2735:39">gen_svm_check_intercept</name><argument_list pos:start="2735:40" pos:end="2736:90">(<argument pos:start="2735:41" pos:end="2735:41"><expr pos:start="2735:41" pos:end="2735:41"><name pos:start="2735:41" pos:end="2735:41">s</name></expr></argument>, <argument pos:start="2735:44" pos:end="2735:51"><expr pos:start="2735:44" pos:end="2735:51"><name pos:start="2735:44" pos:end="2735:51">pc_start</name></expr></argument>,
                                        <argument pos:start="2736:41" pos:end="2736:89"><expr pos:start="2736:41" pos:end="2736:89"><ternary pos:start="2736:41" pos:end="2736:89"><condition pos:start="2736:41" pos:end="2736:47"><expr pos:start="2736:41" pos:end="2736:45"><name pos:start="2736:41" pos:end="2736:42">op</name><operator pos:start="2736:43" pos:end="2736:44">==</operator><literal type="number" pos:start="2736:45" pos:end="2736:45">2</literal></expr> ?</condition><then pos:start="2736:49" pos:end="2736:67"> <expr pos:start="2736:49" pos:end="2736:67"><name pos:start="2736:49" pos:end="2736:67">SVM_EXIT_GDTR_WRITE</name></expr> </then><else pos:start="2736:69" pos:end="2736:89">: <expr pos:start="2736:71" pos:end="2736:89"><name pos:start="2736:71" pos:end="2736:89">SVM_EXIT_IDTR_WRITE</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2737:17" pos:end="2737:70"><expr pos:start="2737:17" pos:end="2737:69"><call pos:start="2737:17" pos:end="2737:69"><name pos:start="2737:17" pos:end="2737:29">gen_lea_modrm</name><argument_list pos:start="2737:30" pos:end="2737:69">(<argument pos:start="2737:31" pos:end="2737:33"><expr pos:start="2737:31" pos:end="2737:33"><name pos:start="2737:31" pos:end="2737:33">env</name></expr></argument>, <argument pos:start="2737:36" pos:end="2737:36"><expr pos:start="2737:36" pos:end="2737:36"><name pos:start="2737:36" pos:end="2737:36">s</name></expr></argument>, <argument pos:start="2737:39" pos:end="2737:43"><expr pos:start="2737:39" pos:end="2737:43"><name pos:start="2737:39" pos:end="2737:43">modrm</name></expr></argument>, <argument pos:start="2737:46" pos:end="2737:54"><expr pos:start="2737:46" pos:end="2737:54"><operator pos:start="2737:46" pos:end="2737:46">&amp;</operator><name pos:start="2737:47" pos:end="2737:54">reg_addr</name></expr></argument>, <argument pos:start="2737:57" pos:end="2737:68"><expr pos:start="2737:57" pos:end="2737:68"><operator pos:start="2737:57" pos:end="2737:57">&amp;</operator><name pos:start="2737:58" pos:end="2737:68">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2738:17" pos:end="2738:56"><expr pos:start="2738:17" pos:end="2738:55"><call pos:start="2738:17" pos:end="2738:55"><name pos:start="2738:17" pos:end="2738:31">gen_op_ld_T1_A0</name><argument_list pos:start="2738:32" pos:end="2738:55">(<argument pos:start="2738:33" pos:end="2738:54"><expr pos:start="2738:33" pos:end="2738:54"><name pos:start="2738:33" pos:end="2738:39">OT_WORD</name> <operator pos:start="2738:41" pos:end="2738:41">+</operator> <name pos:start="2738:43" pos:end="2738:54"><name pos:start="2738:43" pos:end="2738:43">s</name><operator pos:start="2738:44" pos:end="2738:45">-&gt;</operator><name pos:start="2738:46" pos:end="2738:54">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2739:17" pos:end="2739:36"><expr pos:start="2739:17" pos:end="2739:35"><call pos:start="2739:17" pos:end="2739:35"><name pos:start="2739:17" pos:end="2739:29">gen_add_A0_im</name><argument_list pos:start="2739:30" pos:end="2739:35">(<argument pos:start="2739:31" pos:end="2739:31"><expr pos:start="2739:31" pos:end="2739:31"><name pos:start="2739:31" pos:end="2739:31">s</name></expr></argument>, <argument pos:start="2739:34" pos:end="2739:34"><expr pos:start="2739:34" pos:end="2739:34"><literal type="number" pos:start="2739:34" pos:end="2739:34">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2740:17" pos:end="2740:68"><expr pos:start="2740:17" pos:end="2740:67"><call pos:start="2740:17" pos:end="2740:67"><name pos:start="2740:17" pos:end="2740:31">gen_op_ld_T0_A0</name><argument_list pos:start="2740:32" pos:end="2740:67">(<argument pos:start="2740:33" pos:end="2740:66"><expr pos:start="2740:33" pos:end="2740:66"><call pos:start="2740:33" pos:end="2740:41"><name pos:start="2740:33" pos:end="2740:38">CODE64</name><argument_list pos:start="2740:39" pos:end="2740:41">(<argument pos:start="2740:40" pos:end="2740:40"><expr pos:start="2740:40" pos:end="2740:40"><name pos:start="2740:40" pos:end="2740:40">s</name></expr></argument>)</argument_list></call> <operator pos:start="2740:43" pos:end="2740:43">+</operator> <name pos:start="2740:45" pos:end="2740:51">OT_LONG</name> <operator pos:start="2740:53" pos:end="2740:53">+</operator> <name pos:start="2740:55" pos:end="2740:66"><name pos:start="2740:55" pos:end="2740:55">s</name><operator pos:start="2740:56" pos:end="2740:57">-&gt;</operator><name pos:start="2740:58" pos:end="2740:66">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="2741:17" pos:end="2742:48"><if pos:start="2741:17" pos:end="2742:48">if <condition pos:start="2741:20" pos:end="2741:30">(<expr pos:start="2741:21" pos:end="2741:29"><operator pos:start="2741:21" pos:end="2741:21">!</operator><name pos:start="2741:22" pos:end="2741:29"><name pos:start="2741:22" pos:end="2741:22">s</name><operator pos:start="2741:23" pos:end="2741:24">-&gt;</operator><name pos:start="2741:25" pos:end="2741:29">dflag</name></name></expr>)</condition><block type="pseudo" pos:start="2742:21" pos:end="2742:48"><block_content pos:start="2742:21" pos:end="2742:48">
                    <expr_stmt pos:start="2742:21" pos:end="2742:48"><expr pos:start="2742:21" pos:end="2742:47"><call pos:start="2742:21" pos:end="2742:47"><name pos:start="2742:21" pos:end="2742:37">gen_op_andl_T0_im</name><argument_list pos:start="2742:38" pos:end="2742:47">(<argument pos:start="2742:39" pos:end="2742:46"><expr pos:start="2742:39" pos:end="2742:46"><literal type="number" pos:start="2742:39" pos:end="2742:46">0xffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <if_stmt pos:start="2743:17" pos:end="3141:17"><if pos:start="2743:17" pos:end="2746:17">if <condition pos:start="2743:20" pos:end="2743:28">(<expr pos:start="2743:21" pos:end="2743:27"><name pos:start="2743:21" pos:end="2743:22">op</name> <operator pos:start="2743:24" pos:end="2743:25">==</operator> <literal type="number" pos:start="2743:27" pos:end="2743:27">2</literal></expr>)</condition> <block pos:start="2743:30" pos:end="2746:17">{<block_content pos:start="2744:21" pos:end="2745:88">
                    <expr_stmt pos:start="2744:21" pos:end="2744:85"><expr pos:start="2744:21" pos:end="2744:84"><call pos:start="2744:21" pos:end="2744:84"><name pos:start="2744:21" pos:end="2744:33">tcg_gen_st_tl</name><argument_list pos:start="2744:34" pos:end="2744:84">(<argument pos:start="2744:35" pos:end="2744:42"><expr pos:start="2744:35" pos:end="2744:42"><name pos:start="2744:35" pos:end="2744:42"><name pos:start="2744:35" pos:end="2744:39">cpu_T</name><index pos:start="2744:40" pos:end="2744:42">[<expr pos:start="2744:41" pos:end="2744:41"><literal type="number" pos:start="2744:41" pos:end="2744:41">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2744:45" pos:end="2744:51"><expr pos:start="2744:45" pos:end="2744:51"><name pos:start="2744:45" pos:end="2744:51">cpu_env</name></expr></argument>, <argument pos:start="2744:54" pos:end="2744:83"><expr pos:start="2744:54" pos:end="2744:83"><call pos:start="2744:54" pos:end="2744:83"><name pos:start="2744:54" pos:end="2744:61">offsetof</name><argument_list pos:start="2744:62" pos:end="2744:83">(<argument pos:start="2744:63" pos:end="2744:73"><expr pos:start="2744:63" pos:end="2744:73"><name pos:start="2744:63" pos:end="2744:73">CPUX86State</name></expr></argument>,<argument pos:start="2744:75" pos:end="2744:82"><expr pos:start="2744:75" pos:end="2744:82"><name pos:start="2744:75" pos:end="2744:82"><name pos:start="2744:75" pos:end="2744:77">gdt</name><operator pos:start="2744:78" pos:end="2744:78">.</operator><name pos:start="2744:79" pos:end="2744:82">base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="2745:21" pos:end="2745:88"><expr pos:start="2745:21" pos:end="2745:87"><call pos:start="2745:21" pos:end="2745:87"><name pos:start="2745:21" pos:end="2745:35">tcg_gen_st32_tl</name><argument_list pos:start="2745:36" pos:end="2745:87">(<argument pos:start="2745:37" pos:end="2745:44"><expr pos:start="2745:37" pos:end="2745:44"><name pos:start="2745:37" pos:end="2745:44"><name pos:start="2745:37" pos:end="2745:41">cpu_T</name><index pos:start="2745:42" pos:end="2745:44">[<expr pos:start="2745:43" pos:end="2745:43"><literal type="number" pos:start="2745:43" pos:end="2745:43">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="2745:47" pos:end="2745:53"><expr pos:start="2745:47" pos:end="2745:53"><name pos:start="2745:47" pos:end="2745:53">cpu_env</name></expr></argument>, <argument pos:start="2745:56" pos:end="2745:86"><expr pos:start="2745:56" pos:end="2745:86"><call pos:start="2745:56" pos:end="2745:86"><name pos:start="2745:56" pos:end="2745:63">offsetof</name><argument_list pos:start="2745:64" pos:end="2745:86">(<argument pos:start="2745:65" pos:end="2745:75"><expr pos:start="2745:65" pos:end="2745:75"><name pos:start="2745:65" pos:end="2745:75">CPUX86State</name></expr></argument>,<argument pos:start="2745:77" pos:end="2745:85"><expr pos:start="2745:77" pos:end="2745:85"><name pos:start="2745:77" pos:end="2745:85"><name pos:start="2745:77" pos:end="2745:79">gdt</name><operator pos:start="2745:80" pos:end="2745:80">.</operator><name pos:start="2745:81" pos:end="2745:85">limit</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else pos:start="2746:19" pos:end="3141:17">else <block pos:start="2746:24" pos:end="3141:17">{<block_content pos:start="2747:21" pos:end="3141:17">
                    <expr_stmt pos:start="2747:21" pos:end="2747:85"><expr pos:start="2747:21" pos:end="2747:84"><call pos:start="2747:21" pos:end="2747:84"><name pos:start="2747:21" pos:end="2747:33">tcg_gen_st_tl</name><argument_list pos:start="2747:34" pos:end="2747:84">(<argument pos:start="2747:35" pos:end="2747:42"><expr pos:start="2747:35" pos:end="2747:42"><name pos:start="2747:35" pos:end="2747:42"><name pos:start="2747:35" pos:end="2747:39">cpu_T</name><index pos:start="2747:40" pos:end="2747:42">[<expr pos:start="2747:41" pos:end="2747:41"><literal type="number" pos:start="2747:41" pos:end="2747:41">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2747:45" pos:end="2747:51"><expr pos:start="2747:45" pos:end="2747:51"><name pos:start="2747:45" pos:end="2747:51">cpu_env</name></expr></argument>, <argument pos:start="2747:54" pos:end="2747:83"><expr pos:start="2747:54" pos:end="2747:83"><call pos:start="2747:54" pos:end="2747:83"><name pos:start="2747:54" pos:end="2747:61">offsetof</name><argument_list pos:start="2747:62" pos:end="2747:83">(<argument pos:start="2747:63" pos:end="2747:73"><expr pos:start="2747:63" pos:end="2747:73"><name pos:start="2747:63" pos:end="2747:73">CPUX86State</name></expr></argument>,<argument pos:start="2747:75" pos:end="2747:82"><expr pos:start="2747:75" pos:end="2747:82"><name pos:start="2747:75" pos:end="2747:82"><name pos:start="2747:75" pos:end="2747:77">idt</name><operator pos:start="2747:78" pos:end="2747:78">.</operator><name pos:start="2747:79" pos:end="2747:82">base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="2748:21" pos:end="2748:88"><expr pos:start="2748:21" pos:end="2748:87"><call pos:start="2748:21" pos:end="2748:87"><name pos:start="2748:21" pos:end="2748:35">tcg_gen_st32_tl</name><argument_list pos:start="2748:36" pos:end="2748:87">(<argument pos:start="2748:37" pos:end="2748:44"><expr pos:start="2748:37" pos:end="2748:44"><name pos:start="2748:37" pos:end="2748:44"><name pos:start="2748:37" pos:end="2748:41">cpu_T</name><index pos:start="2748:42" pos:end="2748:44">[<expr pos:start="2748:43" pos:end="2748:43"><literal type="number" pos:start="2748:43" pos:end="2748:43">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="2748:47" pos:end="2748:53"><expr pos:start="2748:47" pos:end="2748:53"><name pos:start="2748:47" pos:end="2748:53">cpu_env</name></expr></argument>, <argument pos:start="2748:56" pos:end="2748:86"><expr pos:start="2748:56" pos:end="2748:86"><call pos:start="2748:56" pos:end="2748:86"><name pos:start="2748:56" pos:end="2748:63">offsetof</name><argument_list pos:start="2748:64" pos:end="2748:86">(<argument pos:start="2748:65" pos:end="2748:75"><expr pos:start="2748:65" pos:end="2748:75"><name pos:start="2748:65" pos:end="2748:75">CPUX86State</name></expr></argument>,<argument pos:start="2748:77" pos:end="2748:85"><expr pos:start="2748:77" pos:end="2748:85"><name pos:start="2748:77" pos:end="2748:85"><name pos:start="2748:77" pos:end="2748:79">idt</name><operator pos:start="2748:80" pos:end="2748:80">.</operator><name pos:start="2748:81" pos:end="2748:85">limit</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="2749:13" pos:end="2749:18">break;</break>
        <case pos:start="2750:9" pos:end="2750:15">case <expr pos:start="2750:14" pos:end="2750:14"><literal type="number" pos:start="2750:14" pos:end="2750:14">4</literal></expr>:</case> <comment type="block" pos:start="2750:17" pos:end="2750:26">/* smsw */</comment>
            <expr_stmt pos:start="2751:13" pos:end="2753:0"><expr pos:start="2751:13" pos:end="2751:67"><call pos:start="2751:13" pos:end="2751:67"><name pos:start="2751:13" pos:end="2751:35">gen_svm_check_intercept</name><argument_list pos:start="2751:36" pos:end="2751:67">(<argument pos:start="2751:37" pos:end="2751:37"><expr pos:start="2751:37" pos:end="2751:37"><name pos:start="2751:37" pos:end="2751:37">s</name></expr></argument>, <argument pos:start="2751:40" pos:end="2751:47"><expr pos:start="2751:40" pos:end="2751:47"><name pos:start="2751:40" pos:end="2751:47">pc_start</name></expr></argument>, <argument pos:start="2751:50" pos:end="2751:66"><expr pos:start="2751:50" pos:end="2751:66"><name pos:start="2751:50" pos:end="2751:66">SVM_EXIT_READ_CR0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if pos:start="2752:1" pos:end="2752:57">#<cpp:directive pos:start="2752:2" pos:end="2752:3">if</cpp:directive> <expr pos:start="2752:5" pos:end="2752:57"><name pos:start="2752:5" pos:end="2752:11">defined</name> <name pos:start="2752:13" pos:end="2752:25">TARGET_X86_64</name> <operator pos:start="2752:27" pos:end="2752:28">&amp;&amp;</operator> <name pos:start="2752:30" pos:end="2752:36">defined</name> <name pos:start="2752:38" pos:end="2752:57">HOST_WORDS_BIGENDIAN</name></expr></cpp:if>
            <expr_stmt pos:start="2753:13" pos:end="2755:0"><expr pos:start="2753:13" pos:end="2753:80"><call pos:start="2753:13" pos:end="2753:80"><name pos:start="2753:13" pos:end="2753:28">tcg_gen_ld32u_tl</name><argument_list pos:start="2753:29" pos:end="2753:80">(<argument pos:start="2753:30" pos:end="2753:37"><expr pos:start="2753:30" pos:end="2753:37"><name pos:start="2753:30" pos:end="2753:37"><name pos:start="2753:30" pos:end="2753:34">cpu_T</name><index pos:start="2753:35" pos:end="2753:37">[<expr pos:start="2753:36" pos:end="2753:36"><literal type="number" pos:start="2753:36" pos:end="2753:36">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2753:40" pos:end="2753:46"><expr pos:start="2753:40" pos:end="2753:46"><name pos:start="2753:40" pos:end="2753:46">cpu_env</name></expr></argument>, <argument pos:start="2753:49" pos:end="2753:79"><expr pos:start="2753:49" pos:end="2753:79"><call pos:start="2753:49" pos:end="2753:75"><name pos:start="2753:49" pos:end="2753:56">offsetof</name><argument_list pos:start="2753:57" pos:end="2753:75">(<argument pos:start="2753:58" pos:end="2753:68"><expr pos:start="2753:58" pos:end="2753:68"><name pos:start="2753:58" pos:end="2753:68">CPUX86State</name></expr></argument>,<argument pos:start="2753:70" pos:end="2753:74"><expr pos:start="2753:70" pos:end="2753:74"><name pos:start="2753:70" pos:end="2753:74"><name pos:start="2753:70" pos:end="2753:71">cr</name><index pos:start="2753:72" pos:end="2753:74">[<expr pos:start="2753:73" pos:end="2753:73"><literal type="number" pos:start="2753:73" pos:end="2753:73">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="2753:77" pos:end="2753:77">+</operator> <literal type="number" pos:start="2753:79" pos:end="2753:79">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:start="2754:1" pos:end="2754:5">#<cpp:directive pos:start="2754:2" pos:end="2754:5">else</cpp:directive></cpp:else>
            <expr_stmt pos:start="2755:13" pos:end="2757:0"><expr pos:start="2755:13" pos:end="2755:76"><call pos:start="2755:13" pos:end="2755:76"><name pos:start="2755:13" pos:end="2755:28">tcg_gen_ld32u_tl</name><argument_list pos:start="2755:29" pos:end="2755:76">(<argument pos:start="2755:30" pos:end="2755:37"><expr pos:start="2755:30" pos:end="2755:37"><name pos:start="2755:30" pos:end="2755:37"><name pos:start="2755:30" pos:end="2755:34">cpu_T</name><index pos:start="2755:35" pos:end="2755:37">[<expr pos:start="2755:36" pos:end="2755:36"><literal type="number" pos:start="2755:36" pos:end="2755:36">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2755:40" pos:end="2755:46"><expr pos:start="2755:40" pos:end="2755:46"><name pos:start="2755:40" pos:end="2755:46">cpu_env</name></expr></argument>, <argument pos:start="2755:49" pos:end="2755:75"><expr pos:start="2755:49" pos:end="2755:75"><call pos:start="2755:49" pos:end="2755:75"><name pos:start="2755:49" pos:end="2755:56">offsetof</name><argument_list pos:start="2755:57" pos:end="2755:75">(<argument pos:start="2755:58" pos:end="2755:68"><expr pos:start="2755:58" pos:end="2755:68"><name pos:start="2755:58" pos:end="2755:68">CPUX86State</name></expr></argument>,<argument pos:start="2755:70" pos:end="2755:74"><expr pos:start="2755:70" pos:end="2755:74"><name pos:start="2755:70" pos:end="2755:74"><name pos:start="2755:70" pos:end="2755:71">cr</name><index pos:start="2755:72" pos:end="2755:74">[<expr pos:start="2755:73" pos:end="2755:73"><literal type="number" pos:start="2755:73" pos:end="2755:73">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="2756:1" pos:end="2756:6">#<cpp:directive pos:start="2756:2" pos:end="2756:6">endif</cpp:directive></cpp:endif>
            <expr_stmt pos:start="2757:13" pos:end="2757:63"><expr pos:start="2757:13" pos:end="2757:62"><call pos:start="2757:13" pos:end="2757:62"><name pos:start="2757:13" pos:end="2757:26">gen_ldst_modrm</name><argument_list pos:start="2757:27" pos:end="2757:62">(<argument pos:start="2757:28" pos:end="2757:30"><expr pos:start="2757:28" pos:end="2757:30"><name pos:start="2757:28" pos:end="2757:30">env</name></expr></argument>, <argument pos:start="2757:33" pos:end="2757:33"><expr pos:start="2757:33" pos:end="2757:33"><name pos:start="2757:33" pos:end="2757:33">s</name></expr></argument>, <argument pos:start="2757:36" pos:end="2757:40"><expr pos:start="2757:36" pos:end="2757:40"><name pos:start="2757:36" pos:end="2757:40">modrm</name></expr></argument>, <argument pos:start="2757:43" pos:end="2757:49"><expr pos:start="2757:43" pos:end="2757:49"><name pos:start="2757:43" pos:end="2757:49">OT_WORD</name></expr></argument>, <argument pos:start="2757:52" pos:end="2757:58"><expr pos:start="2757:52" pos:end="2757:58"><name pos:start="2757:52" pos:end="2757:58">OR_TMP0</name></expr></argument>, <argument pos:start="2757:61" pos:end="2757:61"><expr pos:start="2757:61" pos:end="2757:61"><literal type="number" pos:start="2757:61" pos:end="2757:61">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="2758:13" pos:end="2758:18">break;</break>
        <case pos:start="2759:9" pos:end="2759:15">case <expr pos:start="2759:14" pos:end="2759:14"><literal type="number" pos:start="2759:14" pos:end="2759:14">6</literal></expr>:</case> <comment type="block" pos:start="2759:17" pos:end="2759:26">/* lmsw */</comment>
            <if_stmt pos:start="2760:13" pos:end="3141:17"><if pos:start="2760:13" pos:end="2762:13">if <condition pos:start="2760:16" pos:end="2760:28">(<expr pos:start="2760:17" pos:end="2760:27"><name pos:start="2760:17" pos:end="2760:22"><name pos:start="2760:17" pos:end="2760:17">s</name><operator pos:start="2760:18" pos:end="2760:19">-&gt;</operator><name pos:start="2760:20" pos:end="2760:22">cpl</name></name> <operator pos:start="2760:24" pos:end="2760:25">!=</operator> <literal type="number" pos:start="2760:27" pos:end="2760:27">0</literal></expr>)</condition> <block pos:start="2760:30" pos:end="2762:13">{<block_content pos:start="2761:17" pos:end="2761:68">
                <expr_stmt pos:start="2761:17" pos:end="2761:68"><expr pos:start="2761:17" pos:end="2761:67"><call pos:start="2761:17" pos:end="2761:67"><name pos:start="2761:17" pos:end="2761:29">gen_exception</name><argument_list pos:start="2761:30" pos:end="2761:67">(<argument pos:start="2761:31" pos:end="2761:31"><expr pos:start="2761:31" pos:end="2761:31"><name pos:start="2761:31" pos:end="2761:31">s</name></expr></argument>, <argument pos:start="2761:34" pos:end="2761:43"><expr pos:start="2761:34" pos:end="2761:43"><name pos:start="2761:34" pos:end="2761:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="2761:46" pos:end="2761:66"><expr pos:start="2761:46" pos:end="2761:66"><name pos:start="2761:46" pos:end="2761:53">pc_start</name> <operator pos:start="2761:55" pos:end="2761:55">-</operator> <name pos:start="2761:57" pos:end="2761:66"><name pos:start="2761:57" pos:end="2761:57">s</name><operator pos:start="2761:58" pos:end="2761:59">-&gt;</operator><name pos:start="2761:60" pos:end="2761:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="2762:15" pos:end="3141:17">else <block pos:start="2762:20" pos:end="3141:17">{<block_content pos:start="2763:17" pos:end="3141:17">
                <expr_stmt pos:start="2763:17" pos:end="2763:73"><expr pos:start="2763:17" pos:end="2763:72"><call pos:start="2763:17" pos:end="2763:72"><name pos:start="2763:17" pos:end="2763:39">gen_svm_check_intercept</name><argument_list pos:start="2763:40" pos:end="2763:72">(<argument pos:start="2763:41" pos:end="2763:41"><expr pos:start="2763:41" pos:end="2763:41"><name pos:start="2763:41" pos:end="2763:41">s</name></expr></argument>, <argument pos:start="2763:44" pos:end="2763:51"><expr pos:start="2763:44" pos:end="2763:51"><name pos:start="2763:44" pos:end="2763:51">pc_start</name></expr></argument>, <argument pos:start="2763:54" pos:end="2763:71"><expr pos:start="2763:54" pos:end="2763:71"><name pos:start="2763:54" pos:end="2763:71">SVM_EXIT_WRITE_CR0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2764:17" pos:end="2764:67"><expr pos:start="2764:17" pos:end="2764:66"><call pos:start="2764:17" pos:end="2764:66"><name pos:start="2764:17" pos:end="2764:30">gen_ldst_modrm</name><argument_list pos:start="2764:31" pos:end="2764:66">(<argument pos:start="2764:32" pos:end="2764:34"><expr pos:start="2764:32" pos:end="2764:34"><name pos:start="2764:32" pos:end="2764:34">env</name></expr></argument>, <argument pos:start="2764:37" pos:end="2764:37"><expr pos:start="2764:37" pos:end="2764:37"><name pos:start="2764:37" pos:end="2764:37">s</name></expr></argument>, <argument pos:start="2764:40" pos:end="2764:44"><expr pos:start="2764:40" pos:end="2764:44"><name pos:start="2764:40" pos:end="2764:44">modrm</name></expr></argument>, <argument pos:start="2764:47" pos:end="2764:53"><expr pos:start="2764:47" pos:end="2764:53"><name pos:start="2764:47" pos:end="2764:53">OT_WORD</name></expr></argument>, <argument pos:start="2764:56" pos:end="2764:62"><expr pos:start="2764:56" pos:end="2764:62"><name pos:start="2764:56" pos:end="2764:62">OR_TMP0</name></expr></argument>, <argument pos:start="2764:65" pos:end="2764:65"><expr pos:start="2764:65" pos:end="2764:65"><literal type="number" pos:start="2764:65" pos:end="2764:65">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2765:17" pos:end="2765:51"><expr pos:start="2765:17" pos:end="2765:50"><call pos:start="2765:17" pos:end="2765:50"><name pos:start="2765:17" pos:end="2765:31">gen_helper_lmsw</name><argument_list pos:start="2765:32" pos:end="2765:50">(<argument pos:start="2765:33" pos:end="2765:39"><expr pos:start="2765:33" pos:end="2765:39"><name pos:start="2765:33" pos:end="2765:39">cpu_env</name></expr></argument>, <argument pos:start="2765:42" pos:end="2765:49"><expr pos:start="2765:42" pos:end="2765:49"><name pos:start="2765:42" pos:end="2765:49"><name pos:start="2765:42" pos:end="2765:46">cpu_T</name><index pos:start="2765:47" pos:end="2765:49">[<expr pos:start="2765:48" pos:end="2765:48"><literal type="number" pos:start="2765:48" pos:end="2765:48">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2766:17" pos:end="2766:47"><expr pos:start="2766:17" pos:end="2766:46"><call pos:start="2766:17" pos:end="2766:46"><name pos:start="2766:17" pos:end="2766:26">gen_jmp_im</name><argument_list pos:start="2766:27" pos:end="2766:46">(<argument pos:start="2766:28" pos:end="2766:45"><expr pos:start="2766:28" pos:end="2766:45"><name pos:start="2766:28" pos:end="2766:32"><name pos:start="2766:28" pos:end="2766:28">s</name><operator pos:start="2766:29" pos:end="2766:30">-&gt;</operator><name pos:start="2766:31" pos:end="2766:32">pc</name></name> <operator pos:start="2766:34" pos:end="2766:34">-</operator> <name pos:start="2766:36" pos:end="2766:45"><name pos:start="2766:36" pos:end="2766:36">s</name><operator pos:start="2766:37" pos:end="2766:38">-&gt;</operator><name pos:start="2766:39" pos:end="2766:45">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2767:17" pos:end="2767:27"><expr pos:start="2767:17" pos:end="2767:26"><call pos:start="2767:17" pos:end="2767:26"><name pos:start="2767:17" pos:end="2767:23">gen_eob</name><argument_list pos:start="2767:24" pos:end="2767:26">(<argument pos:start="2767:25" pos:end="2767:25"><expr pos:start="2767:25" pos:end="2767:25"><name pos:start="2767:25" pos:end="2767:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="2768:13" pos:end="2768:18">break;</break>
        <case pos:start="2769:9" pos:end="2769:15">case <expr pos:start="2769:14" pos:end="2769:14"><literal type="number" pos:start="2769:14" pos:end="2769:14">7</literal></expr>:</case>
            <if_stmt pos:start="2770:13" pos:end="3141:17"><if pos:start="2770:13" pos:end="3141:17">if <condition pos:start="2770:16" pos:end="2770:25">(<expr pos:start="2770:17" pos:end="2770:24"><name pos:start="2770:17" pos:end="2770:19">mod</name> <operator pos:start="2770:21" pos:end="2770:22">!=</operator> <literal type="number" pos:start="2770:24" pos:end="2770:24">3</literal></expr>)</condition> <block pos:start="2770:27" pos:end="3141:17">{<block_content pos:start="2771:17" pos:end="3141:17"> <comment type="block" pos:start="2770:29" pos:end="2770:40">/* invlpg */</comment>
                <if_stmt pos:start="2771:17" pos:end="2780:13"><if pos:start="2771:17" pos:end="2773:17">if <condition pos:start="2771:20" pos:end="2771:32">(<expr pos:start="2771:21" pos:end="2771:31"><name pos:start="2771:21" pos:end="2771:26"><name pos:start="2771:21" pos:end="2771:21">s</name><operator pos:start="2771:22" pos:end="2771:23">-&gt;</operator><name pos:start="2771:24" pos:end="2771:26">cpl</name></name> <operator pos:start="2771:28" pos:end="2771:29">!=</operator> <literal type="number" pos:start="2771:31" pos:end="2771:31">0</literal></expr>)</condition> <block pos:start="2771:34" pos:end="2773:17">{<block_content pos:start="2772:21" pos:end="2772:72">
                    <expr_stmt pos:start="2772:21" pos:end="2772:72"><expr pos:start="2772:21" pos:end="2772:71"><call pos:start="2772:21" pos:end="2772:71"><name pos:start="2772:21" pos:end="2772:33">gen_exception</name><argument_list pos:start="2772:34" pos:end="2772:71">(<argument pos:start="2772:35" pos:end="2772:35"><expr pos:start="2772:35" pos:end="2772:35"><name pos:start="2772:35" pos:end="2772:35">s</name></expr></argument>, <argument pos:start="2772:38" pos:end="2772:47"><expr pos:start="2772:38" pos:end="2772:47"><name pos:start="2772:38" pos:end="2772:47">EXCP0D_GPF</name></expr></argument>, <argument pos:start="2772:50" pos:end="2772:70"><expr pos:start="2772:50" pos:end="2772:70"><name pos:start="2772:50" pos:end="2772:57">pc_start</name> <operator pos:start="2772:59" pos:end="2772:59">-</operator> <name pos:start="2772:61" pos:end="2772:70"><name pos:start="2772:61" pos:end="2772:61">s</name><operator pos:start="2772:62" pos:end="2772:63">-&gt;</operator><name pos:start="2772:64" pos:end="2772:70">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else pos:start="2773:19" pos:end="2780:13">else <block pos:start="2773:24" pos:end="2780:13">{<block_content pos:start="2774:21" pos:end="2779:31">
                    <expr_stmt pos:start="2774:21" pos:end="2774:40"><expr pos:start="2774:21" pos:end="2774:39"><call pos:start="2774:21" pos:end="2774:39"><name pos:start="2774:21" pos:end="2774:36">gen_update_cc_op</name><argument_list pos:start="2774:37" pos:end="2774:39">(<argument pos:start="2774:38" pos:end="2774:38"><expr pos:start="2774:38" pos:end="2774:38"><name pos:start="2774:38" pos:end="2774:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="2775:21" pos:end="2775:54"><expr pos:start="2775:21" pos:end="2775:53"><call pos:start="2775:21" pos:end="2775:53"><name pos:start="2775:21" pos:end="2775:30">gen_jmp_im</name><argument_list pos:start="2775:31" pos:end="2775:53">(<argument pos:start="2775:32" pos:end="2775:52"><expr pos:start="2775:32" pos:end="2775:52"><name pos:start="2775:32" pos:end="2775:39">pc_start</name> <operator pos:start="2775:41" pos:end="2775:41">-</operator> <name pos:start="2775:43" pos:end="2775:52"><name pos:start="2775:43" pos:end="2775:43">s</name><operator pos:start="2775:44" pos:end="2775:45">-&gt;</operator><name pos:start="2775:46" pos:end="2775:52">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="2776:21" pos:end="2776:74"><expr pos:start="2776:21" pos:end="2776:73"><call pos:start="2776:21" pos:end="2776:73"><name pos:start="2776:21" pos:end="2776:33">gen_lea_modrm</name><argument_list pos:start="2776:34" pos:end="2776:73">(<argument pos:start="2776:35" pos:end="2776:37"><expr pos:start="2776:35" pos:end="2776:37"><name pos:start="2776:35" pos:end="2776:37">env</name></expr></argument>, <argument pos:start="2776:40" pos:end="2776:40"><expr pos:start="2776:40" pos:end="2776:40"><name pos:start="2776:40" pos:end="2776:40">s</name></expr></argument>, <argument pos:start="2776:43" pos:end="2776:47"><expr pos:start="2776:43" pos:end="2776:47"><name pos:start="2776:43" pos:end="2776:47">modrm</name></expr></argument>, <argument pos:start="2776:50" pos:end="2776:58"><expr pos:start="2776:50" pos:end="2776:58"><operator pos:start="2776:50" pos:end="2776:50">&amp;</operator><name pos:start="2776:51" pos:end="2776:58">reg_addr</name></expr></argument>, <argument pos:start="2776:61" pos:end="2776:72"><expr pos:start="2776:61" pos:end="2776:72"><operator pos:start="2776:61" pos:end="2776:61">&amp;</operator><name pos:start="2776:62" pos:end="2776:72">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="2777:21" pos:end="2777:55"><expr pos:start="2777:21" pos:end="2777:54"><call pos:start="2777:21" pos:end="2777:54"><name pos:start="2777:21" pos:end="2777:37">gen_helper_invlpg</name><argument_list pos:start="2777:38" pos:end="2777:54">(<argument pos:start="2777:39" pos:end="2777:45"><expr pos:start="2777:39" pos:end="2777:45"><name pos:start="2777:39" pos:end="2777:45">cpu_env</name></expr></argument>, <argument pos:start="2777:48" pos:end="2777:53"><expr pos:start="2777:48" pos:end="2777:53"><name pos:start="2777:48" pos:end="2777:53">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="2778:21" pos:end="2778:51"><expr pos:start="2778:21" pos:end="2778:50"><call pos:start="2778:21" pos:end="2778:50"><name pos:start="2778:21" pos:end="2778:30">gen_jmp_im</name><argument_list pos:start="2778:31" pos:end="2778:50">(<argument pos:start="2778:32" pos:end="2778:49"><expr pos:start="2778:32" pos:end="2778:49"><name pos:start="2778:32" pos:end="2778:36"><name pos:start="2778:32" pos:end="2778:32">s</name><operator pos:start="2778:33" pos:end="2778:34">-&gt;</operator><name pos:start="2778:35" pos:end="2778:36">pc</name></name> <operator pos:start="2778:38" pos:end="2778:38">-</operator> <name pos:start="2778:40" pos:end="2778:49"><name pos:start="2778:40" pos:end="2778:40">s</name><operator pos:start="2778:41" pos:end="2778:42">-&gt;</operator><name pos:start="2778:43" pos:end="2778:49">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="2779:21" pos:end="2779:31"><expr pos:start="2779:21" pos:end="2779:30"><call pos:start="2779:21" pos:end="2779:30"><name pos:start="2779:21" pos:end="2779:27">gen_eob</name><argument_list pos:start="2779:28" pos:end="2779:30">(<argument pos:start="2779:29" pos:end="2779:29"><expr pos:start="2779:29" pos:end="2779:29"><name pos:start="2779:29" pos:end="2779:29">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt> <if_stmt pos:start="2780:15" pos:end="3141:17"><else pos:start="2780:15" pos:end="3141:17">else <block pos:start="2780:20" pos:end="3141:17">{<block_content pos:start="2781:17" pos:end="3141:17">
                <switch pos:start="2781:17" pos:end="3141:17">switch <condition pos:start="2781:24" pos:end="2781:27">(<expr pos:start="2781:25" pos:end="2781:26"><name pos:start="2781:25" pos:end="2781:26">rm</name></expr>)</condition> <block pos:start="2781:29" pos:end="3141:17">{<block_content pos:start="2782:17" pos:end="3141:17">
                <case pos:start="2782:17" pos:end="2784:0">case <expr pos:start="2782:22" pos:end="2782:22"><literal type="number" pos:start="2782:22" pos:end="2782:22">0</literal></expr>:</case> <comment type="block" pos:start="2782:25" pos:end="2782:36">/* swapgs */</comment>
<cpp:ifdef pos:start="2783:1" pos:end="2783:20">#<cpp:directive pos:start="2783:2" pos:end="2783:6">ifdef</cpp:directive> <name pos:start="2783:8" pos:end="2783:20">TARGET_X86_64</name></cpp:ifdef>
                    <if_stmt pos:start="2784:21" pos:end="3141:17"><if pos:start="2784:21" pos:end="3141:17">if <condition pos:start="2784:24" pos:end="2784:34">(<expr pos:start="2784:25" pos:end="2784:33"><call pos:start="2784:25" pos:end="2784:33"><name pos:start="2784:25" pos:end="2784:30">CODE64</name><argument_list pos:start="2784:31" pos:end="2784:33">(<argument pos:start="2784:32" pos:end="2784:32"><expr pos:start="2784:32" pos:end="2784:32"><name pos:start="2784:32" pos:end="2784:32">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2784:36" pos:end="3141:17">{<block_content pos:start="2785:25" pos:end="3141:17">
                        <if_stmt pos:start="2785:25" pos:end="2796:21"><if pos:start="2785:25" pos:end="2787:25">if <condition pos:start="2785:28" pos:end="2785:40">(<expr pos:start="2785:29" pos:end="2785:39"><name pos:start="2785:29" pos:end="2785:34"><name pos:start="2785:29" pos:end="2785:29">s</name><operator pos:start="2785:30" pos:end="2785:31">-&gt;</operator><name pos:start="2785:32" pos:end="2785:34">cpl</name></name> <operator pos:start="2785:36" pos:end="2785:37">!=</operator> <literal type="number" pos:start="2785:39" pos:end="2785:39">0</literal></expr>)</condition> <block pos:start="2785:42" pos:end="2787:25">{<block_content pos:start="2786:29" pos:end="2786:80">
                            <expr_stmt pos:start="2786:29" pos:end="2786:80"><expr pos:start="2786:29" pos:end="2786:79"><call pos:start="2786:29" pos:end="2786:79"><name pos:start="2786:29" pos:end="2786:41">gen_exception</name><argument_list pos:start="2786:42" pos:end="2786:79">(<argument pos:start="2786:43" pos:end="2786:43"><expr pos:start="2786:43" pos:end="2786:43"><name pos:start="2786:43" pos:end="2786:43">s</name></expr></argument>, <argument pos:start="2786:46" pos:end="2786:55"><expr pos:start="2786:46" pos:end="2786:55"><name pos:start="2786:46" pos:end="2786:55">EXCP0D_GPF</name></expr></argument>, <argument pos:start="2786:58" pos:end="2786:78"><expr pos:start="2786:58" pos:end="2786:78"><name pos:start="2786:58" pos:end="2786:65">pc_start</name> <operator pos:start="2786:67" pos:end="2786:67">-</operator> <name pos:start="2786:69" pos:end="2786:78"><name pos:start="2786:69" pos:end="2786:69">s</name><operator pos:start="2786:70" pos:end="2786:71">-&gt;</operator><name pos:start="2786:72" pos:end="2786:78">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if> <else pos:start="2787:27" pos:end="2796:21">else <block pos:start="2787:32" pos:end="2796:21">{<block_content pos:start="2788:29" pos:end="2795:68">
                            <expr_stmt pos:start="2788:29" pos:end="2789:71"><expr pos:start="2788:29" pos:end="2789:70"><call pos:start="2788:29" pos:end="2789:70"><name pos:start="2788:29" pos:end="2788:41">tcg_gen_ld_tl</name><argument_list pos:start="2788:42" pos:end="2789:70">(<argument pos:start="2788:43" pos:end="2788:50"><expr pos:start="2788:43" pos:end="2788:50"><name pos:start="2788:43" pos:end="2788:50"><name pos:start="2788:43" pos:end="2788:47">cpu_T</name><index pos:start="2788:48" pos:end="2788:50">[<expr pos:start="2788:49" pos:end="2788:49"><literal type="number" pos:start="2788:49" pos:end="2788:49">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2788:53" pos:end="2788:59"><expr pos:start="2788:53" pos:end="2788:59"><name pos:start="2788:53" pos:end="2788:59">cpu_env</name></expr></argument>,
                                <argument pos:start="2789:33" pos:end="2789:69"><expr pos:start="2789:33" pos:end="2789:69"><call pos:start="2789:33" pos:end="2789:69"><name pos:start="2789:33" pos:end="2789:40">offsetof</name><argument_list pos:start="2789:41" pos:end="2789:69">(<argument pos:start="2789:42" pos:end="2789:52"><expr pos:start="2789:42" pos:end="2789:52"><name pos:start="2789:42" pos:end="2789:52">CPUX86State</name></expr></argument>,<argument pos:start="2789:54" pos:end="2789:68"><expr pos:start="2789:54" pos:end="2789:68"><name pos:start="2789:54" pos:end="2789:63"><name pos:start="2789:54" pos:end="2789:57">segs</name><index pos:start="2789:58" pos:end="2789:63">[<expr pos:start="2789:59" pos:end="2789:62"><name pos:start="2789:59" pos:end="2789:62">R_GS</name></expr>]</index></name><operator pos:start="2789:64" pos:end="2789:64">.</operator><name pos:start="2789:65" pos:end="2789:68">base</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt pos:start="2790:29" pos:end="2791:68"><expr pos:start="2790:29" pos:end="2791:67"><call pos:start="2790:29" pos:end="2791:67"><name pos:start="2790:29" pos:end="2790:41">tcg_gen_ld_tl</name><argument_list pos:start="2790:42" pos:end="2791:67">(<argument pos:start="2790:43" pos:end="2790:50"><expr pos:start="2790:43" pos:end="2790:50"><name pos:start="2790:43" pos:end="2790:50"><name pos:start="2790:43" pos:end="2790:47">cpu_T</name><index pos:start="2790:48" pos:end="2790:50">[<expr pos:start="2790:49" pos:end="2790:49"><literal type="number" pos:start="2790:49" pos:end="2790:49">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="2790:53" pos:end="2790:59"><expr pos:start="2790:53" pos:end="2790:59"><name pos:start="2790:53" pos:end="2790:59">cpu_env</name></expr></argument>,
                                <argument pos:start="2791:33" pos:end="2791:66"><expr pos:start="2791:33" pos:end="2791:66"><call pos:start="2791:33" pos:end="2791:66"><name pos:start="2791:33" pos:end="2791:40">offsetof</name><argument_list pos:start="2791:41" pos:end="2791:66">(<argument pos:start="2791:42" pos:end="2791:52"><expr pos:start="2791:42" pos:end="2791:52"><name pos:start="2791:42" pos:end="2791:52">CPUX86State</name></expr></argument>,<argument pos:start="2791:54" pos:end="2791:65"><expr pos:start="2791:54" pos:end="2791:65"><name pos:start="2791:54" pos:end="2791:65">kernelgsbase</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt pos:start="2792:29" pos:end="2793:71"><expr pos:start="2792:29" pos:end="2793:70"><call pos:start="2792:29" pos:end="2793:70"><name pos:start="2792:29" pos:end="2792:41">tcg_gen_st_tl</name><argument_list pos:start="2792:42" pos:end="2793:70">(<argument pos:start="2792:43" pos:end="2792:50"><expr pos:start="2792:43" pos:end="2792:50"><name pos:start="2792:43" pos:end="2792:50"><name pos:start="2792:43" pos:end="2792:47">cpu_T</name><index pos:start="2792:48" pos:end="2792:50">[<expr pos:start="2792:49" pos:end="2792:49"><literal type="number" pos:start="2792:49" pos:end="2792:49">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="2792:53" pos:end="2792:59"><expr pos:start="2792:53" pos:end="2792:59"><name pos:start="2792:53" pos:end="2792:59">cpu_env</name></expr></argument>,
                                <argument pos:start="2793:33" pos:end="2793:69"><expr pos:start="2793:33" pos:end="2793:69"><call pos:start="2793:33" pos:end="2793:69"><name pos:start="2793:33" pos:end="2793:40">offsetof</name><argument_list pos:start="2793:41" pos:end="2793:69">(<argument pos:start="2793:42" pos:end="2793:52"><expr pos:start="2793:42" pos:end="2793:52"><name pos:start="2793:42" pos:end="2793:52">CPUX86State</name></expr></argument>,<argument pos:start="2793:54" pos:end="2793:68"><expr pos:start="2793:54" pos:end="2793:68"><name pos:start="2793:54" pos:end="2793:63"><name pos:start="2793:54" pos:end="2793:57">segs</name><index pos:start="2793:58" pos:end="2793:63">[<expr pos:start="2793:59" pos:end="2793:62"><name pos:start="2793:59" pos:end="2793:62">R_GS</name></expr>]</index></name><operator pos:start="2793:64" pos:end="2793:64">.</operator><name pos:start="2793:65" pos:end="2793:68">base</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt pos:start="2794:29" pos:end="2795:68"><expr pos:start="2794:29" pos:end="2795:67"><call pos:start="2794:29" pos:end="2795:67"><name pos:start="2794:29" pos:end="2794:41">tcg_gen_st_tl</name><argument_list pos:start="2794:42" pos:end="2795:67">(<argument pos:start="2794:43" pos:end="2794:50"><expr pos:start="2794:43" pos:end="2794:50"><name pos:start="2794:43" pos:end="2794:50"><name pos:start="2794:43" pos:end="2794:47">cpu_T</name><index pos:start="2794:48" pos:end="2794:50">[<expr pos:start="2794:49" pos:end="2794:49"><literal type="number" pos:start="2794:49" pos:end="2794:49">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2794:53" pos:end="2794:59"><expr pos:start="2794:53" pos:end="2794:59"><name pos:start="2794:53" pos:end="2794:59">cpu_env</name></expr></argument>,
                                <argument pos:start="2795:33" pos:end="2795:66"><expr pos:start="2795:33" pos:end="2795:66"><call pos:start="2795:33" pos:end="2795:66"><name pos:start="2795:33" pos:end="2795:40">offsetof</name><argument_list pos:start="2795:41" pos:end="2795:66">(<argument pos:start="2795:42" pos:end="2795:52"><expr pos:start="2795:42" pos:end="2795:52"><name pos:start="2795:42" pos:end="2795:52">CPUX86State</name></expr></argument>,<argument pos:start="2795:54" pos:end="2795:65"><expr pos:start="2795:54" pos:end="2795:65"><name pos:start="2795:54" pos:end="2795:65">kernelgsbase</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt> <if_stmt pos:start="2796:23" pos:end="3141:17"><else pos:start="2796:23" pos:end="3141:17">else
<cpp:endif pos:start="2797:1" pos:end="2797:6">#<cpp:directive pos:start="2797:2" pos:end="2797:6">endif</cpp:directive></cpp:endif>
                    <block pos:start="2798:21" pos:end="3141:17">{<block_content pos:start="2799:21" pos:end="3141:17">
                    <break pos:start="2799:21" pos:end="2799:26">break;</break>
                <case pos:start="2800:17" pos:end="2800:23">case <expr pos:start="2800:22" pos:end="2800:22"><literal type="number" pos:start="2800:22" pos:end="2800:22">1</literal></expr>:</case> <comment type="block" pos:start="2800:25" pos:end="2800:36">/* rdtscp */</comment>
                    <if_stmt pos:start="2801:21" pos:end="2802:40"><if pos:start="2801:21" pos:end="2802:40">if <condition pos:start="2801:24" pos:end="2801:70">(<expr pos:start="2801:25" pos:end="2801:69"><operator pos:start="2801:25" pos:end="2801:25">!</operator><operator pos:start="2801:26" pos:end="2801:26">(</operator><name pos:start="2801:27" pos:end="2801:48"><name pos:start="2801:27" pos:end="2801:27">s</name><operator pos:start="2801:28" pos:end="2801:29">-&gt;</operator><name pos:start="2801:30" pos:end="2801:48">cpuid_ext2_features</name></name> <operator pos:start="2801:50" pos:end="2801:50">&amp;</operator> <name pos:start="2801:52" pos:end="2801:68">CPUID_EXT2_RDTSCP</name><operator pos:start="2801:69" pos:end="2801:69">)</operator></expr>)</condition><block type="pseudo" pos:start="2802:21" pos:end="2802:40"><block_content pos:start="2802:21" pos:end="2802:40">
                    <expr_stmt pos:start="2802:21" pos:end="2802:40"><expr pos:start="2802:21" pos:end="2802:39"><call pos:start="2802:21" pos:end="2802:39"><name pos:start="2802:21" pos:end="2802:36">gen_update_cc_op</name><argument_list pos:start="2802:37" pos:end="2802:39">(<argument pos:start="2802:38" pos:end="2802:38"><expr pos:start="2802:38" pos:end="2802:38"><name pos:start="2802:38" pos:end="2802:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <expr_stmt pos:start="2803:21" pos:end="2803:54"><expr pos:start="2803:21" pos:end="2803:53"><call pos:start="2803:21" pos:end="2803:53"><name pos:start="2803:21" pos:end="2803:30">gen_jmp_im</name><argument_list pos:start="2803:31" pos:end="2803:53">(<argument pos:start="2803:32" pos:end="2803:52"><expr pos:start="2803:32" pos:end="2803:52"><name pos:start="2803:32" pos:end="2803:39">pc_start</name> <operator pos:start="2803:41" pos:end="2803:41">-</operator> <name pos:start="2803:43" pos:end="2803:52"><name pos:start="2803:43" pos:end="2803:43">s</name><operator pos:start="2803:44" pos:end="2803:45">-&gt;</operator><name pos:start="2803:46" pos:end="2803:52">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt pos:start="2804:21" pos:end="2805:39"><if pos:start="2804:21" pos:end="2805:39">if <condition pos:start="2804:24" pos:end="2804:35">(<expr pos:start="2804:25" pos:end="2804:34"><name pos:start="2804:25" pos:end="2804:34">use_icount</name></expr>)</condition><block type="pseudo" pos:start="2805:25" pos:end="2805:39"><block_content pos:start="2805:25" pos:end="2805:39">
                        <expr_stmt pos:start="2805:25" pos:end="2805:39"><expr pos:start="2805:25" pos:end="2805:38"><call pos:start="2805:25" pos:end="2805:38"><name pos:start="2805:25" pos:end="2805:36">gen_io_start</name><argument_list pos:start="2805:37" pos:end="2805:38">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <expr_stmt pos:start="2806:21" pos:end="2806:47"><expr pos:start="2806:21" pos:end="2806:46"><call pos:start="2806:21" pos:end="2806:46"><name pos:start="2806:21" pos:end="2806:37">gen_helper_rdtscp</name><argument_list pos:start="2806:38" pos:end="2806:46">(<argument pos:start="2806:39" pos:end="2806:45"><expr pos:start="2806:39" pos:end="2806:45"><name pos:start="2806:39" pos:end="2806:45">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt pos:start="2807:21" pos:end="3141:17"><if pos:start="2807:21" pos:end="3141:17">if <condition pos:start="2807:24" pos:end="2807:35">(<expr pos:start="2807:25" pos:end="2807:34"><name pos:start="2807:25" pos:end="2807:34">use_icount</name></expr>)</condition> <block pos:start="2807:37" pos:end="3141:17">{<block_content pos:start="2808:25" pos:end="3141:17">
                        <expr_stmt pos:start="2808:25" pos:end="2808:37"><expr pos:start="2808:25" pos:end="2808:36"><call pos:start="2808:25" pos:end="2808:36"><name pos:start="2808:25" pos:end="2808:34">gen_io_end</name><argument_list pos:start="2808:35" pos:end="2808:36">()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="2809:25" pos:end="2809:55"><expr pos:start="2809:25" pos:end="2809:54"><call pos:start="2809:25" pos:end="2809:54"><name pos:start="2809:25" pos:end="2809:31">gen_jmp</name><argument_list pos:start="2809:32" pos:end="2809:54">(<argument pos:start="2809:33" pos:end="2809:33"><expr pos:start="2809:33" pos:end="2809:33"><name pos:start="2809:33" pos:end="2809:33">s</name></expr></argument>, <argument pos:start="2809:36" pos:end="2809:53"><expr pos:start="2809:36" pos:end="2809:53"><name pos:start="2809:36" pos:end="2809:40"><name pos:start="2809:36" pos:end="2809:36">s</name><operator pos:start="2809:37" pos:end="2809:38">-&gt;</operator><name pos:start="2809:39" pos:end="2809:40">pc</name></name> <operator pos:start="2809:42" pos:end="2809:42">-</operator> <name pos:start="2809:44" pos:end="2809:53"><name pos:start="2809:44" pos:end="2809:44">s</name><operator pos:start="2809:45" pos:end="2809:46">-&gt;</operator><name pos:start="2809:47" pos:end="2809:53">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:start="2810:21" pos:end="2810:26">break;</break>
                <default pos:start="2811:17" pos:end="2811:24">default:</default>
            <break pos:start="2812:13" pos:end="2812:18">break;</break>
        <default pos:start="2813:9" pos:end="2813:16">default:</default>
        <break pos:start="2814:9" pos:end="2814:14">break;</break>
    <case pos:start="2815:5" pos:end="2815:15">case <expr pos:start="2815:10" pos:end="2815:14"><literal type="number" pos:start="2815:10" pos:end="2815:14">0x108</literal></expr>:</case> <comment type="block" pos:start="2815:17" pos:end="2815:26">/* invd */</comment>
    <case pos:start="2816:5" pos:end="2816:15">case <expr pos:start="2816:10" pos:end="2816:14"><literal type="number" pos:start="2816:10" pos:end="2816:14">0x109</literal></expr>:</case> <comment type="block" pos:start="2816:17" pos:end="2816:28">/* wbinvd */</comment>
        <if_stmt pos:start="2817:9" pos:end="3141:17"><if pos:start="2817:9" pos:end="2819:9">if <condition pos:start="2817:12" pos:end="2817:24">(<expr pos:start="2817:13" pos:end="2817:23"><name pos:start="2817:13" pos:end="2817:18"><name pos:start="2817:13" pos:end="2817:13">s</name><operator pos:start="2817:14" pos:end="2817:15">-&gt;</operator><name pos:start="2817:16" pos:end="2817:18">cpl</name></name> <operator pos:start="2817:20" pos:end="2817:21">!=</operator> <literal type="number" pos:start="2817:23" pos:end="2817:23">0</literal></expr>)</condition> <block pos:start="2817:26" pos:end="2819:9">{<block_content pos:start="2818:13" pos:end="2818:64">
            <expr_stmt pos:start="2818:13" pos:end="2818:64"><expr pos:start="2818:13" pos:end="2818:63"><call pos:start="2818:13" pos:end="2818:63"><name pos:start="2818:13" pos:end="2818:25">gen_exception</name><argument_list pos:start="2818:26" pos:end="2818:63">(<argument pos:start="2818:27" pos:end="2818:27"><expr pos:start="2818:27" pos:end="2818:27"><name pos:start="2818:27" pos:end="2818:27">s</name></expr></argument>, <argument pos:start="2818:30" pos:end="2818:39"><expr pos:start="2818:30" pos:end="2818:39"><name pos:start="2818:30" pos:end="2818:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="2818:42" pos:end="2818:62"><expr pos:start="2818:42" pos:end="2818:62"><name pos:start="2818:42" pos:end="2818:49">pc_start</name> <operator pos:start="2818:51" pos:end="2818:51">-</operator> <name pos:start="2818:53" pos:end="2818:62"><name pos:start="2818:53" pos:end="2818:53">s</name><operator pos:start="2818:54" pos:end="2818:55">-&gt;</operator><name pos:start="2818:56" pos:end="2818:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="2819:11" pos:end="3141:17">else <block pos:start="2819:16" pos:end="3141:17">{<block_content pos:start="2820:13" pos:end="3141:17">
            <expr_stmt pos:start="2820:13" pos:end="2820:92"><expr pos:start="2820:13" pos:end="2820:91"><call pos:start="2820:13" pos:end="2820:91"><name pos:start="2820:13" pos:end="2820:35">gen_svm_check_intercept</name><argument_list pos:start="2820:36" pos:end="2820:91">(<argument pos:start="2820:37" pos:end="2820:37"><expr pos:start="2820:37" pos:end="2820:37"><name pos:start="2820:37" pos:end="2820:37">s</name></expr></argument>, <argument pos:start="2820:40" pos:end="2820:47"><expr pos:start="2820:40" pos:end="2820:47"><name pos:start="2820:40" pos:end="2820:47">pc_start</name></expr></argument>, <argument pos:start="2820:50" pos:end="2820:90"><expr pos:start="2820:50" pos:end="2820:90"><ternary pos:start="2820:50" pos:end="2820:90"><condition pos:start="2820:50" pos:end="2820:58"><expr pos:start="2820:50" pos:end="2820:56"><operator pos:start="2820:50" pos:end="2820:50">(</operator><name pos:start="2820:51" pos:end="2820:51">b</name> <operator pos:start="2820:53" pos:end="2820:53">&amp;</operator> <literal type="number" pos:start="2820:55" pos:end="2820:55">2</literal><operator pos:start="2820:56" pos:end="2820:56">)</operator></expr> ?</condition><then pos:start="2820:60" pos:end="2820:72"> <expr pos:start="2820:60" pos:end="2820:72"><name pos:start="2820:60" pos:end="2820:72">SVM_EXIT_INVD</name></expr> </then><else pos:start="2820:74" pos:end="2820:90">: <expr pos:start="2820:76" pos:end="2820:90"><name pos:start="2820:76" pos:end="2820:90">SVM_EXIT_WBINVD</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block" pos:start="2821:13" pos:end="2821:31">/* nothing to do */</comment>
        <break pos:start="2822:9" pos:end="2822:14">break;</break>
    <case pos:start="2823:5" pos:end="2825:0">case <expr pos:start="2823:10" pos:end="2823:13"><literal type="number" pos:start="2823:10" pos:end="2823:13">0x63</literal></expr>:</case> <comment type="block" pos:start="2823:16" pos:end="2823:44">/* arpl or movslS (x86_64) */</comment>
<cpp:ifdef pos:start="2824:1" pos:end="2824:20">#<cpp:directive pos:start="2824:2" pos:end="2824:6">ifdef</cpp:directive> <name pos:start="2824:8" pos:end="2824:20">TARGET_X86_64</name></cpp:ifdef>
        <if_stmt pos:start="2825:9" pos:end="3141:17"><if pos:start="2825:9" pos:end="3141:17">if <condition pos:start="2825:12" pos:end="2825:22">(<expr pos:start="2825:13" pos:end="2825:21"><call pos:start="2825:13" pos:end="2825:21"><name pos:start="2825:13" pos:end="2825:18">CODE64</name><argument_list pos:start="2825:19" pos:end="2825:21">(<argument pos:start="2825:20" pos:end="2825:20"><expr pos:start="2825:20" pos:end="2825:20"><name pos:start="2825:20" pos:end="2825:20">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2825:24" pos:end="3141:17">{<block_content pos:start="2826:13" pos:end="3141:17">
            <decl_stmt pos:start="2826:13" pos:end="2826:21"><decl pos:start="2826:13" pos:end="2826:20"><type pos:start="2826:13" pos:end="2826:15"><name pos:start="2826:13" pos:end="2826:15">int</name></type> <name pos:start="2826:17" pos:end="2826:20">d_ot</name></decl>;</decl_stmt>
            <comment type="block" pos:start="2827:13" pos:end="2827:49">/* d_ot is the size of destination */</comment>
            <expr_stmt pos:start="2828:13" pos:end="2828:35"><expr pos:start="2828:13" pos:end="2828:34"><name pos:start="2828:13" pos:end="2828:16">d_ot</name> <operator pos:start="2828:18" pos:end="2828:18">=</operator> <name pos:start="2828:20" pos:end="2828:24">dflag</name> <operator pos:start="2828:26" pos:end="2828:26">+</operator> <name pos:start="2828:28" pos:end="2828:34">OT_WORD</name></expr>;</expr_stmt>
            <expr_stmt pos:start="2829:13" pos:end="2829:48"><expr pos:start="2829:13" pos:end="2829:47"><name pos:start="2829:13" pos:end="2829:17">modrm</name> <operator pos:start="2829:19" pos:end="2829:19">=</operator> <call pos:start="2829:21" pos:end="2829:47"><name pos:start="2829:21" pos:end="2829:33">cpu_ldub_code</name><argument_list pos:start="2829:34" pos:end="2829:47">(<argument pos:start="2829:35" pos:end="2829:37"><expr pos:start="2829:35" pos:end="2829:37"><name pos:start="2829:35" pos:end="2829:37">env</name></expr></argument>, <argument pos:start="2829:40" pos:end="2829:46"><expr pos:start="2829:40" pos:end="2829:46"><name pos:start="2829:40" pos:end="2829:44"><name pos:start="2829:40" pos:end="2829:40">s</name><operator pos:start="2829:41" pos:end="2829:42">-&gt;</operator><name pos:start="2829:43" pos:end="2829:44">pc</name></name><operator pos:start="2829:45" pos:end="2829:46">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2830:13" pos:end="2830:45"><expr pos:start="2830:13" pos:end="2830:44"><name pos:start="2830:13" pos:end="2830:15">reg</name> <operator pos:start="2830:17" pos:end="2830:17">=</operator> <operator pos:start="2830:19" pos:end="2830:19">(</operator><operator pos:start="2830:20" pos:end="2830:20">(</operator><name pos:start="2830:21" pos:end="2830:25">modrm</name> <operator pos:start="2830:27" pos:end="2830:28">&gt;&gt;</operator> <literal type="number" pos:start="2830:30" pos:end="2830:30">3</literal><operator pos:start="2830:31" pos:end="2830:31">)</operator> <operator pos:start="2830:33" pos:end="2830:33">&amp;</operator> <literal type="number" pos:start="2830:35" pos:end="2830:35">7</literal><operator pos:start="2830:36" pos:end="2830:36">)</operator> <operator pos:start="2830:38" pos:end="2830:38">|</operator> <name pos:start="2830:40" pos:end="2830:44">rex_r</name></expr>;</expr_stmt>
            <expr_stmt pos:start="2831:13" pos:end="2831:35"><expr pos:start="2831:13" pos:end="2831:34"><name pos:start="2831:13" pos:end="2831:15">mod</name> <operator pos:start="2831:17" pos:end="2831:17">=</operator> <operator pos:start="2831:19" pos:end="2831:19">(</operator><name pos:start="2831:20" pos:end="2831:24">modrm</name> <operator pos:start="2831:26" pos:end="2831:27">&gt;&gt;</operator> <literal type="number" pos:start="2831:29" pos:end="2831:29">6</literal><operator pos:start="2831:30" pos:end="2831:30">)</operator> <operator pos:start="2831:32" pos:end="2831:32">&amp;</operator> <literal type="number" pos:start="2831:34" pos:end="2831:34">3</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="2832:13" pos:end="2832:40"><expr pos:start="2832:13" pos:end="2832:39"><name pos:start="2832:13" pos:end="2832:14">rm</name> <operator pos:start="2832:16" pos:end="2832:16">=</operator> <operator pos:start="2832:18" pos:end="2832:18">(</operator><name pos:start="2832:19" pos:end="2832:23">modrm</name> <operator pos:start="2832:25" pos:end="2832:25">&amp;</operator> <literal type="number" pos:start="2832:27" pos:end="2832:27">7</literal><operator pos:start="2832:28" pos:end="2832:28">)</operator> <operator pos:start="2832:30" pos:end="2832:30">|</operator> <call pos:start="2832:32" pos:end="2832:39"><name pos:start="2832:32" pos:end="2832:36">REX_B</name><argument_list pos:start="2832:37" pos:end="2832:39">(<argument pos:start="2832:38" pos:end="2832:38"><expr pos:start="2832:38" pos:end="2832:38"><name pos:start="2832:38" pos:end="2832:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="2833:13" pos:end="3141:17"><if pos:start="2833:13" pos:end="2839:13">if <condition pos:start="2833:16" pos:end="2833:25">(<expr pos:start="2833:17" pos:end="2833:24"><name pos:start="2833:17" pos:end="2833:19">mod</name> <operator pos:start="2833:21" pos:end="2833:22">==</operator> <literal type="number" pos:start="2833:24" pos:end="2833:24">3</literal></expr>)</condition> <block pos:start="2833:27" pos:end="2839:13">{<block_content pos:start="2834:17" pos:end="2838:45">
                <expr_stmt pos:start="2834:17" pos:end="2834:50"><expr pos:start="2834:17" pos:end="2834:49"><call pos:start="2834:17" pos:end="2834:49"><name pos:start="2834:17" pos:end="2834:33">gen_op_mov_TN_reg</name><argument_list pos:start="2834:34" pos:end="2834:49">(<argument pos:start="2834:35" pos:end="2834:41"><expr pos:start="2834:35" pos:end="2834:41"><name pos:start="2834:35" pos:end="2834:41">OT_LONG</name></expr></argument>, <argument pos:start="2834:44" pos:end="2834:44"><expr pos:start="2834:44" pos:end="2834:44"><literal type="number" pos:start="2834:44" pos:end="2834:44">0</literal></expr></argument>, <argument pos:start="2834:47" pos:end="2834:48"><expr pos:start="2834:47" pos:end="2834:48"><name pos:start="2834:47" pos:end="2834:48">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="block" pos:start="2835:17" pos:end="2835:33">/* sign extend */</comment>
                <if_stmt pos:start="2836:17" pos:end="2837:58"><if pos:start="2836:17" pos:end="2837:58">if <condition pos:start="2836:20" pos:end="2836:36">(<expr pos:start="2836:21" pos:end="2836:35"><name pos:start="2836:21" pos:end="2836:24">d_ot</name> <operator pos:start="2836:26" pos:end="2836:27">==</operator> <name pos:start="2836:29" pos:end="2836:35">OT_QUAD</name></expr>)</condition><block type="pseudo" pos:start="2837:21" pos:end="2837:58"><block_content pos:start="2837:21" pos:end="2837:58">
                    <expr_stmt pos:start="2837:21" pos:end="2837:58"><expr pos:start="2837:21" pos:end="2837:57"><call pos:start="2837:21" pos:end="2837:57"><name pos:start="2837:21" pos:end="2837:37">tcg_gen_ext32s_tl</name><argument_list pos:start="2837:38" pos:end="2837:57">(<argument pos:start="2837:39" pos:end="2837:46"><expr pos:start="2837:39" pos:end="2837:46"><name pos:start="2837:39" pos:end="2837:46"><name pos:start="2837:39" pos:end="2837:43">cpu_T</name><index pos:start="2837:44" pos:end="2837:46">[<expr pos:start="2837:45" pos:end="2837:45"><literal type="number" pos:start="2837:45" pos:end="2837:45">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2837:49" pos:end="2837:56"><expr pos:start="2837:49" pos:end="2837:56"><name pos:start="2837:49" pos:end="2837:56"><name pos:start="2837:49" pos:end="2837:53">cpu_T</name><index pos:start="2837:54" pos:end="2837:56">[<expr pos:start="2837:55" pos:end="2837:55"><literal type="number" pos:start="2837:55" pos:end="2837:55">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt pos:start="2838:17" pos:end="2838:45"><expr pos:start="2838:17" pos:end="2838:44"><call pos:start="2838:17" pos:end="2838:44"><name pos:start="2838:17" pos:end="2838:33">gen_op_mov_reg_T0</name><argument_list pos:start="2838:34" pos:end="2838:44">(<argument pos:start="2838:35" pos:end="2838:38"><expr pos:start="2838:35" pos:end="2838:38"><name pos:start="2838:35" pos:end="2838:38">d_ot</name></expr></argument>, <argument pos:start="2838:41" pos:end="2838:43"><expr pos:start="2838:41" pos:end="2838:43"><name pos:start="2838:41" pos:end="2838:43">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="2839:15" pos:end="3141:17">else <block pos:start="2839:20" pos:end="3141:17">{<block_content pos:start="2840:17" pos:end="3141:17">
                <expr_stmt pos:start="2840:17" pos:end="2840:70"><expr pos:start="2840:17" pos:end="2840:69"><call pos:start="2840:17" pos:end="2840:69"><name pos:start="2840:17" pos:end="2840:29">gen_lea_modrm</name><argument_list pos:start="2840:30" pos:end="2840:69">(<argument pos:start="2840:31" pos:end="2840:33"><expr pos:start="2840:31" pos:end="2840:33"><name pos:start="2840:31" pos:end="2840:33">env</name></expr></argument>, <argument pos:start="2840:36" pos:end="2840:36"><expr pos:start="2840:36" pos:end="2840:36"><name pos:start="2840:36" pos:end="2840:36">s</name></expr></argument>, <argument pos:start="2840:39" pos:end="2840:43"><expr pos:start="2840:39" pos:end="2840:43"><name pos:start="2840:39" pos:end="2840:43">modrm</name></expr></argument>, <argument pos:start="2840:46" pos:end="2840:54"><expr pos:start="2840:46" pos:end="2840:54"><operator pos:start="2840:46" pos:end="2840:46">&amp;</operator><name pos:start="2840:47" pos:end="2840:54">reg_addr</name></expr></argument>, <argument pos:start="2840:57" pos:end="2840:68"><expr pos:start="2840:57" pos:end="2840:68"><operator pos:start="2840:57" pos:end="2840:57">&amp;</operator><name pos:start="2840:58" pos:end="2840:68">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="2841:17" pos:end="2846:9"><if pos:start="2841:17" pos:end="2843:17">if <condition pos:start="2841:20" pos:end="2841:36">(<expr pos:start="2841:21" pos:end="2841:35"><name pos:start="2841:21" pos:end="2841:24">d_ot</name> <operator pos:start="2841:26" pos:end="2841:27">==</operator> <name pos:start="2841:29" pos:end="2841:35">OT_QUAD</name></expr>)</condition> <block pos:start="2841:38" pos:end="2843:17">{<block_content pos:start="2842:21" pos:end="2842:61">
                    <expr_stmt pos:start="2842:21" pos:end="2842:61"><expr pos:start="2842:21" pos:end="2842:60"><call pos:start="2842:21" pos:end="2842:60"><name pos:start="2842:21" pos:end="2842:36">gen_op_lds_T0_A0</name><argument_list pos:start="2842:37" pos:end="2842:60">(<argument pos:start="2842:38" pos:end="2842:59"><expr pos:start="2842:38" pos:end="2842:59"><name pos:start="2842:38" pos:end="2842:44">OT_LONG</name> <operator pos:start="2842:46" pos:end="2842:46">+</operator> <name pos:start="2842:48" pos:end="2842:59"><name pos:start="2842:48" pos:end="2842:48">s</name><operator pos:start="2842:49" pos:end="2842:50">-&gt;</operator><name pos:start="2842:51" pos:end="2842:59">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else pos:start="2843:19" pos:end="2846:9">else <block pos:start="2843:24" pos:end="2846:9">{<block_content pos:start="2844:21" pos:end="2845:45">
                    <expr_stmt pos:start="2844:21" pos:end="2844:60"><expr pos:start="2844:21" pos:end="2844:59"><call pos:start="2844:21" pos:end="2844:59"><name pos:start="2844:21" pos:end="2844:35">gen_op_ld_T0_A0</name><argument_list pos:start="2844:36" pos:end="2844:59">(<argument pos:start="2844:37" pos:end="2844:58"><expr pos:start="2844:37" pos:end="2844:58"><name pos:start="2844:37" pos:end="2844:43">OT_LONG</name> <operator pos:start="2844:45" pos:end="2844:45">+</operator> <name pos:start="2844:47" pos:end="2844:58"><name pos:start="2844:47" pos:end="2844:47">s</name><operator pos:start="2844:48" pos:end="2844:49">-&gt;</operator><name pos:start="2844:50" pos:end="2844:58">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2845:17" pos:end="2845:45"><expr pos:start="2845:17" pos:end="2845:44"><call pos:start="2845:17" pos:end="2845:44"><name pos:start="2845:17" pos:end="2845:33">gen_op_mov_reg_T0</name><argument_list pos:start="2845:34" pos:end="2845:44">(<argument pos:start="2845:35" pos:end="2845:38"><expr pos:start="2845:35" pos:end="2845:38"><name pos:start="2845:35" pos:end="2845:38">d_ot</name></expr></argument>, <argument pos:start="2845:41" pos:end="2845:43"><expr pos:start="2845:41" pos:end="2845:43"><name pos:start="2845:41" pos:end="2845:43">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt> <if_stmt pos:start="2846:11" pos:end="3141:17"><else pos:start="2846:11" pos:end="3141:17">else
<cpp:endif pos:start="2847:1" pos:end="2847:6">#<cpp:directive pos:start="2847:2" pos:end="2847:6">endif</cpp:directive></cpp:endif>
        <block pos:start="2848:9" pos:end="3141:17">{<block_content pos:start="2849:13" pos:end="3141:17">
            <decl_stmt pos:start="2849:13" pos:end="2849:23"><decl pos:start="2849:13" pos:end="2849:22"><type pos:start="2849:13" pos:end="2849:15"><name pos:start="2849:13" pos:end="2849:15">int</name></type> <name pos:start="2849:17" pos:end="2849:22">label1</name></decl>;</decl_stmt>
            <decl_stmt pos:start="2850:13" pos:end="2850:32"><decl pos:start="2850:13" pos:end="2850:19"><type pos:start="2850:13" pos:end="2850:16"><name pos:start="2850:13" pos:end="2850:16">TCGv</name></type> <name pos:start="2850:18" pos:end="2850:19">t0</name></decl>, <decl pos:start="2850:22" pos:end="2850:23"><type ref="prev" pos:start="2850:13" pos:end="2850:16"/><name pos:start="2850:22" pos:end="2850:23">t1</name></decl>, <decl pos:start="2850:26" pos:end="2850:27"><type ref="prev" pos:start="2850:13" pos:end="2850:16"/><name pos:start="2850:26" pos:end="2850:27">t2</name></decl>, <decl pos:start="2850:30" pos:end="2850:31"><type ref="prev" pos:start="2850:13" pos:end="2850:16"/><name pos:start="2850:30" pos:end="2850:31">a0</name></decl>;</decl_stmt>
            <if_stmt pos:start="2851:13" pos:end="2852:38"><if pos:start="2851:13" pos:end="2852:38">if <condition pos:start="2851:16" pos:end="2851:34">(<expr pos:start="2851:17" pos:end="2851:33"><operator pos:start="2851:17" pos:end="2851:17">!</operator><name pos:start="2851:18" pos:end="2851:22"><name pos:start="2851:18" pos:end="2851:18">s</name><operator pos:start="2851:19" pos:end="2851:20">-&gt;</operator><name pos:start="2851:21" pos:end="2851:22">pe</name></name> <operator pos:start="2851:24" pos:end="2851:25">||</operator> <name pos:start="2851:27" pos:end="2851:33"><name pos:start="2851:27" pos:end="2851:27">s</name><operator pos:start="2851:28" pos:end="2851:29">-&gt;</operator><name pos:start="2851:30" pos:end="2851:33">vm86</name></name></expr>)</condition><block type="pseudo" pos:start="2852:13" pos:end="2852:38"><block_content pos:start="2852:13" pos:end="2852:38">
            <expr_stmt pos:start="2852:13" pos:end="2852:38"><expr pos:start="2852:13" pos:end="2852:37"><name pos:start="2852:13" pos:end="2852:14">t0</name> <operator pos:start="2852:16" pos:end="2852:16">=</operator> <call pos:start="2852:18" pos:end="2852:37"><name pos:start="2852:18" pos:end="2852:35">tcg_temp_local_new</name><argument_list pos:start="2852:36" pos:end="2852:37">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt pos:start="2853:13" pos:end="2853:38"><expr pos:start="2853:13" pos:end="2853:37"><name pos:start="2853:13" pos:end="2853:14">t1</name> <operator pos:start="2853:16" pos:end="2853:16">=</operator> <call pos:start="2853:18" pos:end="2853:37"><name pos:start="2853:18" pos:end="2853:35">tcg_temp_local_new</name><argument_list pos:start="2853:36" pos:end="2853:37">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2854:13" pos:end="2854:38"><expr pos:start="2854:13" pos:end="2854:37"><name pos:start="2854:13" pos:end="2854:14">t2</name> <operator pos:start="2854:16" pos:end="2854:16">=</operator> <call pos:start="2854:18" pos:end="2854:37"><name pos:start="2854:18" pos:end="2854:35">tcg_temp_local_new</name><argument_list pos:start="2854:36" pos:end="2854:37">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2855:13" pos:end="2855:25"><expr pos:start="2855:13" pos:end="2855:24"><name pos:start="2855:13" pos:end="2855:14">ot</name> <operator pos:start="2855:16" pos:end="2855:16">=</operator> <name pos:start="2855:18" pos:end="2855:24">OT_WORD</name></expr>;</expr_stmt>
            <expr_stmt pos:start="2856:13" pos:end="2856:48"><expr pos:start="2856:13" pos:end="2856:47"><name pos:start="2856:13" pos:end="2856:17">modrm</name> <operator pos:start="2856:19" pos:end="2856:19">=</operator> <call pos:start="2856:21" pos:end="2856:47"><name pos:start="2856:21" pos:end="2856:33">cpu_ldub_code</name><argument_list pos:start="2856:34" pos:end="2856:47">(<argument pos:start="2856:35" pos:end="2856:37"><expr pos:start="2856:35" pos:end="2856:37"><name pos:start="2856:35" pos:end="2856:37">env</name></expr></argument>, <argument pos:start="2856:40" pos:end="2856:46"><expr pos:start="2856:40" pos:end="2856:46"><name pos:start="2856:40" pos:end="2856:44"><name pos:start="2856:40" pos:end="2856:40">s</name><operator pos:start="2856:41" pos:end="2856:42">-&gt;</operator><name pos:start="2856:43" pos:end="2856:44">pc</name></name><operator pos:start="2856:45" pos:end="2856:46">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2857:13" pos:end="2857:35"><expr pos:start="2857:13" pos:end="2857:34"><name pos:start="2857:13" pos:end="2857:15">reg</name> <operator pos:start="2857:17" pos:end="2857:17">=</operator> <operator pos:start="2857:19" pos:end="2857:19">(</operator><name pos:start="2857:20" pos:end="2857:24">modrm</name> <operator pos:start="2857:26" pos:end="2857:27">&gt;&gt;</operator> <literal type="number" pos:start="2857:29" pos:end="2857:29">3</literal><operator pos:start="2857:30" pos:end="2857:30">)</operator> <operator pos:start="2857:32" pos:end="2857:32">&amp;</operator> <literal type="number" pos:start="2857:34" pos:end="2857:34">7</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="2858:13" pos:end="2858:35"><expr pos:start="2858:13" pos:end="2858:34"><name pos:start="2858:13" pos:end="2858:15">mod</name> <operator pos:start="2858:17" pos:end="2858:17">=</operator> <operator pos:start="2858:19" pos:end="2858:19">(</operator><name pos:start="2858:20" pos:end="2858:24">modrm</name> <operator pos:start="2858:26" pos:end="2858:27">&gt;&gt;</operator> <literal type="number" pos:start="2858:29" pos:end="2858:29">6</literal><operator pos:start="2858:30" pos:end="2858:30">)</operator> <operator pos:start="2858:32" pos:end="2858:32">&amp;</operator> <literal type="number" pos:start="2858:34" pos:end="2858:34">3</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="2859:13" pos:end="2859:27"><expr pos:start="2859:13" pos:end="2859:26"><name pos:start="2859:13" pos:end="2859:14">rm</name> <operator pos:start="2859:16" pos:end="2859:16">=</operator> <name pos:start="2859:18" pos:end="2859:22">modrm</name> <operator pos:start="2859:24" pos:end="2859:24">&amp;</operator> <literal type="number" pos:start="2859:26" pos:end="2859:26">7</literal></expr>;</expr_stmt>
            <if_stmt pos:start="2860:13" pos:end="3141:17"><if pos:start="2860:13" pos:end="2865:13">if <condition pos:start="2860:16" pos:end="2860:25">(<expr pos:start="2860:17" pos:end="2860:24"><name pos:start="2860:17" pos:end="2860:19">mod</name> <operator pos:start="2860:21" pos:end="2860:22">!=</operator> <literal type="number" pos:start="2860:24" pos:end="2860:24">3</literal></expr>)</condition> <block pos:start="2860:27" pos:end="2865:13">{<block_content pos:start="2861:17" pos:end="2864:43">
                <expr_stmt pos:start="2861:17" pos:end="2861:70"><expr pos:start="2861:17" pos:end="2861:69"><call pos:start="2861:17" pos:end="2861:69"><name pos:start="2861:17" pos:end="2861:29">gen_lea_modrm</name><argument_list pos:start="2861:30" pos:end="2861:69">(<argument pos:start="2861:31" pos:end="2861:33"><expr pos:start="2861:31" pos:end="2861:33"><name pos:start="2861:31" pos:end="2861:33">env</name></expr></argument>, <argument pos:start="2861:36" pos:end="2861:36"><expr pos:start="2861:36" pos:end="2861:36"><name pos:start="2861:36" pos:end="2861:36">s</name></expr></argument>, <argument pos:start="2861:39" pos:end="2861:43"><expr pos:start="2861:39" pos:end="2861:43"><name pos:start="2861:39" pos:end="2861:43">modrm</name></expr></argument>, <argument pos:start="2861:46" pos:end="2861:54"><expr pos:start="2861:46" pos:end="2861:54"><operator pos:start="2861:46" pos:end="2861:46">&amp;</operator><name pos:start="2861:47" pos:end="2861:54">reg_addr</name></expr></argument>, <argument pos:start="2861:57" pos:end="2861:68"><expr pos:start="2861:57" pos:end="2861:68"><operator pos:start="2861:57" pos:end="2861:57">&amp;</operator><name pos:start="2861:58" pos:end="2861:68">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2862:17" pos:end="2862:59"><expr pos:start="2862:17" pos:end="2862:58"><call pos:start="2862:17" pos:end="2862:58"><name pos:start="2862:17" pos:end="2862:27">gen_op_ld_v</name><argument_list pos:start="2862:28" pos:end="2862:58">(<argument pos:start="2862:29" pos:end="2862:45"><expr pos:start="2862:29" pos:end="2862:45"><name pos:start="2862:29" pos:end="2862:30">ot</name> <operator pos:start="2862:32" pos:end="2862:32">+</operator> <name pos:start="2862:34" pos:end="2862:45"><name pos:start="2862:34" pos:end="2862:34">s</name><operator pos:start="2862:35" pos:end="2862:36">-&gt;</operator><name pos:start="2862:37" pos:end="2862:45">mem_index</name></name></expr></argument>, <argument pos:start="2862:48" pos:end="2862:49"><expr pos:start="2862:48" pos:end="2862:49"><name pos:start="2862:48" pos:end="2862:49">t0</name></expr></argument>, <argument pos:start="2862:52" pos:end="2862:57"><expr pos:start="2862:52" pos:end="2862:57"><name pos:start="2862:52" pos:end="2862:57">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2863:17" pos:end="2863:42"><expr pos:start="2863:17" pos:end="2863:41"><name pos:start="2863:17" pos:end="2863:18">a0</name> <operator pos:start="2863:20" pos:end="2863:20">=</operator> <call pos:start="2863:22" pos:end="2863:41"><name pos:start="2863:22" pos:end="2863:39">tcg_temp_local_new</name><argument_list pos:start="2863:40" pos:end="2863:41">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2864:17" pos:end="2864:43"><expr pos:start="2864:17" pos:end="2864:42"><call pos:start="2864:17" pos:end="2864:42"><name pos:start="2864:17" pos:end="2864:30">tcg_gen_mov_tl</name><argument_list pos:start="2864:31" pos:end="2864:42">(<argument pos:start="2864:32" pos:end="2864:33"><expr pos:start="2864:32" pos:end="2864:33"><name pos:start="2864:32" pos:end="2864:33">a0</name></expr></argument>, <argument pos:start="2864:36" pos:end="2864:41"><expr pos:start="2864:36" pos:end="2864:41"><name pos:start="2864:36" pos:end="2864:41">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="2865:15" pos:end="3141:17">else <block pos:start="2865:20" pos:end="3141:17">{<block_content pos:start="2866:17" pos:end="3141:17">
                <expr_stmt pos:start="2866:17" pos:end="2866:45"><expr pos:start="2866:17" pos:end="2866:44"><call pos:start="2866:17" pos:end="2866:44"><name pos:start="2866:17" pos:end="2866:32">gen_op_mov_v_reg</name><argument_list pos:start="2866:33" pos:end="2866:44">(<argument pos:start="2866:34" pos:end="2866:35"><expr pos:start="2866:34" pos:end="2866:35"><name pos:start="2866:34" pos:end="2866:35">ot</name></expr></argument>, <argument pos:start="2866:38" pos:end="2866:39"><expr pos:start="2866:38" pos:end="2866:39"><name pos:start="2866:38" pos:end="2866:39">t0</name></expr></argument>, <argument pos:start="2866:42" pos:end="2866:43"><expr pos:start="2866:42" pos:end="2866:43"><name pos:start="2866:42" pos:end="2866:43">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2867:17" pos:end="2867:32"><expr pos:start="2867:17" pos:end="2867:31"><call pos:start="2867:17" pos:end="2867:31"><name pos:start="2867:17" pos:end="2867:27">TCGV_UNUSED</name><argument_list pos:start="2867:28" pos:end="2867:31">(<argument pos:start="2867:29" pos:end="2867:30"><expr pos:start="2867:29" pos:end="2867:30"><name pos:start="2867:29" pos:end="2867:30">a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2868:13" pos:end="2868:42"><expr pos:start="2868:13" pos:end="2868:41"><call pos:start="2868:13" pos:end="2868:41"><name pos:start="2868:13" pos:end="2868:28">gen_op_mov_v_reg</name><argument_list pos:start="2868:29" pos:end="2868:41">(<argument pos:start="2868:30" pos:end="2868:31"><expr pos:start="2868:30" pos:end="2868:31"><name pos:start="2868:30" pos:end="2868:31">ot</name></expr></argument>, <argument pos:start="2868:34" pos:end="2868:35"><expr pos:start="2868:34" pos:end="2868:35"><name pos:start="2868:34" pos:end="2868:35">t1</name></expr></argument>, <argument pos:start="2868:38" pos:end="2868:40"><expr pos:start="2868:38" pos:end="2868:40"><name pos:start="2868:38" pos:end="2868:40">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2869:13" pos:end="2869:45"><expr pos:start="2869:13" pos:end="2869:44"><call pos:start="2869:13" pos:end="2869:44"><name pos:start="2869:13" pos:end="2869:27">tcg_gen_andi_tl</name><argument_list pos:start="2869:28" pos:end="2869:44">(<argument pos:start="2869:29" pos:end="2869:36"><expr pos:start="2869:29" pos:end="2869:36"><name pos:start="2869:29" pos:end="2869:36">cpu_tmp0</name></expr></argument>, <argument pos:start="2869:39" pos:end="2869:40"><expr pos:start="2869:39" pos:end="2869:40"><name pos:start="2869:39" pos:end="2869:40">t0</name></expr></argument>, <argument pos:start="2869:43" pos:end="2869:43"><expr pos:start="2869:43" pos:end="2869:43"><literal type="number" pos:start="2869:43" pos:end="2869:43">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2870:13" pos:end="2870:39"><expr pos:start="2870:13" pos:end="2870:38"><call pos:start="2870:13" pos:end="2870:38"><name pos:start="2870:13" pos:end="2870:27">tcg_gen_andi_tl</name><argument_list pos:start="2870:28" pos:end="2870:38">(<argument pos:start="2870:29" pos:end="2870:30"><expr pos:start="2870:29" pos:end="2870:30"><name pos:start="2870:29" pos:end="2870:30">t1</name></expr></argument>, <argument pos:start="2870:33" pos:end="2870:34"><expr pos:start="2870:33" pos:end="2870:34"><name pos:start="2870:33" pos:end="2870:34">t1</name></expr></argument>, <argument pos:start="2870:37" pos:end="2870:37"><expr pos:start="2870:37" pos:end="2870:37"><literal type="number" pos:start="2870:37" pos:end="2870:37">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2871:13" pos:end="2871:35"><expr pos:start="2871:13" pos:end="2871:34"><call pos:start="2871:13" pos:end="2871:34"><name pos:start="2871:13" pos:end="2871:27">tcg_gen_movi_tl</name><argument_list pos:start="2871:28" pos:end="2871:34">(<argument pos:start="2871:29" pos:end="2871:30"><expr pos:start="2871:29" pos:end="2871:30"><name pos:start="2871:29" pos:end="2871:30">t2</name></expr></argument>, <argument pos:start="2871:33" pos:end="2871:33"><expr pos:start="2871:33" pos:end="2871:33"><literal type="number" pos:start="2871:33" pos:end="2871:33">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2872:13" pos:end="2872:37"><expr pos:start="2872:13" pos:end="2872:36"><name pos:start="2872:13" pos:end="2872:18">label1</name> <operator pos:start="2872:20" pos:end="2872:20">=</operator> <call pos:start="2872:22" pos:end="2872:36"><name pos:start="2872:22" pos:end="2872:34">gen_new_label</name><argument_list pos:start="2872:35" pos:end="2872:36">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2873:13" pos:end="2873:65"><expr pos:start="2873:13" pos:end="2873:64"><call pos:start="2873:13" pos:end="2873:64"><name pos:start="2873:13" pos:end="2873:29">tcg_gen_brcond_tl</name><argument_list pos:start="2873:30" pos:end="2873:64">(<argument pos:start="2873:31" pos:end="2873:41"><expr pos:start="2873:31" pos:end="2873:41"><name pos:start="2873:31" pos:end="2873:41">TCG_COND_GE</name></expr></argument>, <argument pos:start="2873:44" pos:end="2873:51"><expr pos:start="2873:44" pos:end="2873:51"><name pos:start="2873:44" pos:end="2873:51">cpu_tmp0</name></expr></argument>, <argument pos:start="2873:54" pos:end="2873:55"><expr pos:start="2873:54" pos:end="2873:55"><name pos:start="2873:54" pos:end="2873:55">t1</name></expr></argument>, <argument pos:start="2873:58" pos:end="2873:63"><expr pos:start="2873:58" pos:end="2873:63"><name pos:start="2873:58" pos:end="2873:63">label1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2874:13" pos:end="2874:40"><expr pos:start="2874:13" pos:end="2874:39"><call pos:start="2874:13" pos:end="2874:39"><name pos:start="2874:13" pos:end="2874:27">tcg_gen_andi_tl</name><argument_list pos:start="2874:28" pos:end="2874:39">(<argument pos:start="2874:29" pos:end="2874:30"><expr pos:start="2874:29" pos:end="2874:30"><name pos:start="2874:29" pos:end="2874:30">t0</name></expr></argument>, <argument pos:start="2874:33" pos:end="2874:34"><expr pos:start="2874:33" pos:end="2874:34"><name pos:start="2874:33" pos:end="2874:34">t0</name></expr></argument>, <argument pos:start="2874:37" pos:end="2874:38"><expr pos:start="2874:37" pos:end="2874:38"><operator pos:start="2874:37" pos:end="2874:37">~</operator><literal type="number" pos:start="2874:38" pos:end="2874:38">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2875:13" pos:end="2875:38"><expr pos:start="2875:13" pos:end="2875:37"><call pos:start="2875:13" pos:end="2875:37"><name pos:start="2875:13" pos:end="2875:25">tcg_gen_or_tl</name><argument_list pos:start="2875:26" pos:end="2875:37">(<argument pos:start="2875:27" pos:end="2875:28"><expr pos:start="2875:27" pos:end="2875:28"><name pos:start="2875:27" pos:end="2875:28">t0</name></expr></argument>, <argument pos:start="2875:31" pos:end="2875:32"><expr pos:start="2875:31" pos:end="2875:32"><name pos:start="2875:31" pos:end="2875:32">t0</name></expr></argument>, <argument pos:start="2875:35" pos:end="2875:36"><expr pos:start="2875:35" pos:end="2875:36"><name pos:start="2875:35" pos:end="2875:36">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2876:13" pos:end="2876:38"><expr pos:start="2876:13" pos:end="2876:37"><call pos:start="2876:13" pos:end="2876:37"><name pos:start="2876:13" pos:end="2876:27">tcg_gen_movi_tl</name><argument_list pos:start="2876:28" pos:end="2876:37">(<argument pos:start="2876:29" pos:end="2876:30"><expr pos:start="2876:29" pos:end="2876:30"><name pos:start="2876:29" pos:end="2876:30">t2</name></expr></argument>, <argument pos:start="2876:33" pos:end="2876:36"><expr pos:start="2876:33" pos:end="2876:36"><name pos:start="2876:33" pos:end="2876:36">CC_Z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2877:13" pos:end="2877:34"><expr pos:start="2877:13" pos:end="2877:33"><call pos:start="2877:13" pos:end="2877:33"><name pos:start="2877:13" pos:end="2877:25">gen_set_label</name><argument_list pos:start="2877:26" pos:end="2877:33">(<argument pos:start="2877:27" pos:end="2877:32"><expr pos:start="2877:27" pos:end="2877:32"><name pos:start="2877:27" pos:end="2877:32">label1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="2878:13" pos:end="3141:17"><if pos:start="2878:13" pos:end="2881:12">if <condition pos:start="2878:16" pos:end="2878:25">(<expr pos:start="2878:17" pos:end="2878:24"><name pos:start="2878:17" pos:end="2878:19">mod</name> <operator pos:start="2878:21" pos:end="2878:22">!=</operator> <literal type="number" pos:start="2878:24" pos:end="2878:24">3</literal></expr>)</condition> <block pos:start="2878:27" pos:end="2881:12">{<block_content pos:start="2879:17" pos:end="2880:34">
                <expr_stmt pos:start="2879:17" pos:end="2879:55"><expr pos:start="2879:17" pos:end="2879:54"><call pos:start="2879:17" pos:end="2879:54"><name pos:start="2879:17" pos:end="2879:27">gen_op_st_v</name><argument_list pos:start="2879:28" pos:end="2879:54">(<argument pos:start="2879:29" pos:end="2879:45"><expr pos:start="2879:29" pos:end="2879:45"><name pos:start="2879:29" pos:end="2879:30">ot</name> <operator pos:start="2879:32" pos:end="2879:32">+</operator> <name pos:start="2879:34" pos:end="2879:45"><name pos:start="2879:34" pos:end="2879:34">s</name><operator pos:start="2879:35" pos:end="2879:36">-&gt;</operator><name pos:start="2879:37" pos:end="2879:45">mem_index</name></name></expr></argument>, <argument pos:start="2879:48" pos:end="2879:49"><expr pos:start="2879:48" pos:end="2879:49"><name pos:start="2879:48" pos:end="2879:49">t0</name></expr></argument>, <argument pos:start="2879:52" pos:end="2879:53"><expr pos:start="2879:52" pos:end="2879:53"><name pos:start="2879:52" pos:end="2879:53">a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2880:17" pos:end="2880:34"><expr pos:start="2880:17" pos:end="2880:33"><call pos:start="2880:17" pos:end="2880:33"><name pos:start="2880:17" pos:end="2880:29">tcg_temp_free</name><argument_list pos:start="2880:30" pos:end="2880:33">(<argument pos:start="2880:31" pos:end="2880:32"><expr pos:start="2880:31" pos:end="2880:32"><name pos:start="2880:31" pos:end="2880:32">a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block></if> <else pos:start="2881:14" pos:end="3141:17">else <block pos:start="2881:19" pos:end="3141:17">{<block_content pos:start="2882:17" pos:end="3141:17">
                <expr_stmt pos:start="2882:17" pos:end="2882:45"><expr pos:start="2882:17" pos:end="2882:44"><call pos:start="2882:17" pos:end="2882:44"><name pos:start="2882:17" pos:end="2882:32">gen_op_mov_reg_v</name><argument_list pos:start="2882:33" pos:end="2882:44">(<argument pos:start="2882:34" pos:end="2882:35"><expr pos:start="2882:34" pos:end="2882:35"><name pos:start="2882:34" pos:end="2882:35">ot</name></expr></argument>, <argument pos:start="2882:38" pos:end="2882:39"><expr pos:start="2882:38" pos:end="2882:39"><name pos:start="2882:38" pos:end="2882:39">rm</name></expr></argument>, <argument pos:start="2882:42" pos:end="2882:43"><expr pos:start="2882:42" pos:end="2882:43"><name pos:start="2882:42" pos:end="2882:43">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2883:13" pos:end="2883:34"><expr pos:start="2883:13" pos:end="2883:33"><call pos:start="2883:13" pos:end="2883:33"><name pos:start="2883:13" pos:end="2883:30">gen_compute_eflags</name><argument_list pos:start="2883:31" pos:end="2883:33">(<argument pos:start="2883:32" pos:end="2883:32"><expr pos:start="2883:32" pos:end="2883:32"><name pos:start="2883:32" pos:end="2883:32">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2884:13" pos:end="2884:59"><expr pos:start="2884:13" pos:end="2884:58"><call pos:start="2884:13" pos:end="2884:58"><name pos:start="2884:13" pos:end="2884:27">tcg_gen_andi_tl</name><argument_list pos:start="2884:28" pos:end="2884:58">(<argument pos:start="2884:29" pos:end="2884:38"><expr pos:start="2884:29" pos:end="2884:38"><name pos:start="2884:29" pos:end="2884:38">cpu_cc_src</name></expr></argument>, <argument pos:start="2884:41" pos:end="2884:50"><expr pos:start="2884:41" pos:end="2884:50"><name pos:start="2884:41" pos:end="2884:50">cpu_cc_src</name></expr></argument>, <argument pos:start="2884:53" pos:end="2884:57"><expr pos:start="2884:53" pos:end="2884:57"><operator pos:start="2884:53" pos:end="2884:53">~</operator><name pos:start="2884:54" pos:end="2884:57">CC_Z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2885:13" pos:end="2885:54"><expr pos:start="2885:13" pos:end="2885:53"><call pos:start="2885:13" pos:end="2885:53"><name pos:start="2885:13" pos:end="2885:25">tcg_gen_or_tl</name><argument_list pos:start="2885:26" pos:end="2885:53">(<argument pos:start="2885:27" pos:end="2885:36"><expr pos:start="2885:27" pos:end="2885:36"><name pos:start="2885:27" pos:end="2885:36">cpu_cc_src</name></expr></argument>, <argument pos:start="2885:39" pos:end="2885:48"><expr pos:start="2885:39" pos:end="2885:48"><name pos:start="2885:39" pos:end="2885:48">cpu_cc_src</name></expr></argument>, <argument pos:start="2885:51" pos:end="2885:52"><expr pos:start="2885:51" pos:end="2885:52"><name pos:start="2885:51" pos:end="2885:52">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2886:13" pos:end="2886:30"><expr pos:start="2886:13" pos:end="2886:29"><call pos:start="2886:13" pos:end="2886:29"><name pos:start="2886:13" pos:end="2886:25">tcg_temp_free</name><argument_list pos:start="2886:26" pos:end="2886:29">(<argument pos:start="2886:27" pos:end="2886:28"><expr pos:start="2886:27" pos:end="2886:28"><name pos:start="2886:27" pos:end="2886:28">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2887:13" pos:end="2887:30"><expr pos:start="2887:13" pos:end="2887:29"><call pos:start="2887:13" pos:end="2887:29"><name pos:start="2887:13" pos:end="2887:25">tcg_temp_free</name><argument_list pos:start="2887:26" pos:end="2887:29">(<argument pos:start="2887:27" pos:end="2887:28"><expr pos:start="2887:27" pos:end="2887:28"><name pos:start="2887:27" pos:end="2887:28">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2888:13" pos:end="2888:30"><expr pos:start="2888:13" pos:end="2888:29"><call pos:start="2888:13" pos:end="2888:29"><name pos:start="2888:13" pos:end="2888:25">tcg_temp_free</name><argument_list pos:start="2888:26" pos:end="2888:29">(<argument pos:start="2888:27" pos:end="2888:28"><expr pos:start="2888:27" pos:end="2888:28"><name pos:start="2888:27" pos:end="2888:28">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="2889:9" pos:end="2889:14">break;</break>
    <case pos:start="2890:5" pos:end="2890:15">case <expr pos:start="2890:10" pos:end="2890:14"><literal type="number" pos:start="2890:10" pos:end="2890:14">0x102</literal></expr>:</case> <comment type="block" pos:start="2890:17" pos:end="2890:25">/* lar */</comment>
    <case pos:start="2891:5" pos:end="2891:15">case <expr pos:start="2891:10" pos:end="2891:14"><literal type="number" pos:start="2891:10" pos:end="2891:14">0x103</literal></expr>:</case> <comment type="block" pos:start="2891:17" pos:end="2891:25">/* lsl */</comment>
        <block pos:start="2892:9" pos:end="3141:17">{<block_content pos:start="2893:13" pos:end="3141:17">
            <decl_stmt pos:start="2893:13" pos:end="2893:23"><decl pos:start="2893:13" pos:end="2893:22"><type pos:start="2893:13" pos:end="2893:15"><name pos:start="2893:13" pos:end="2893:15">int</name></type> <name pos:start="2893:17" pos:end="2893:22">label1</name></decl>;</decl_stmt>
            <decl_stmt pos:start="2894:13" pos:end="2894:20"><decl pos:start="2894:13" pos:end="2894:19"><type pos:start="2894:13" pos:end="2894:16"><name pos:start="2894:13" pos:end="2894:16">TCGv</name></type> <name pos:start="2894:18" pos:end="2894:19">t0</name></decl>;</decl_stmt>
            <if_stmt pos:start="2895:13" pos:end="2896:43"><if pos:start="2895:13" pos:end="2896:43">if <condition pos:start="2895:16" pos:end="2895:34">(<expr pos:start="2895:17" pos:end="2895:33"><operator pos:start="2895:17" pos:end="2895:17">!</operator><name pos:start="2895:18" pos:end="2895:22"><name pos:start="2895:18" pos:end="2895:18">s</name><operator pos:start="2895:19" pos:end="2895:20">-&gt;</operator><name pos:start="2895:21" pos:end="2895:22">pe</name></name> <operator pos:start="2895:24" pos:end="2895:25">||</operator> <name pos:start="2895:27" pos:end="2895:33"><name pos:start="2895:27" pos:end="2895:27">s</name><operator pos:start="2895:28" pos:end="2895:29">-&gt;</operator><name pos:start="2895:30" pos:end="2895:33">vm86</name></name></expr>)</condition><block type="pseudo" pos:start="2896:13" pos:end="2896:43"><block_content pos:start="2896:13" pos:end="2896:43">
            <expr_stmt pos:start="2896:13" pos:end="2896:43"><expr pos:start="2896:13" pos:end="2896:42"><name pos:start="2896:13" pos:end="2896:14">ot</name> <operator pos:start="2896:16" pos:end="2896:16">=</operator> <ternary pos:start="2896:18" pos:end="2896:42"><condition pos:start="2896:18" pos:end="2896:24"><expr pos:start="2896:18" pos:end="2896:22"><name pos:start="2896:18" pos:end="2896:22">dflag</name></expr> ?</condition><then pos:start="2896:26" pos:end="2896:32"> <expr pos:start="2896:26" pos:end="2896:32"><name pos:start="2896:26" pos:end="2896:32">OT_LONG</name></expr> </then><else pos:start="2896:34" pos:end="2896:42">: <expr pos:start="2896:36" pos:end="2896:42"><name pos:start="2896:36" pos:end="2896:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt pos:start="2897:13" pos:end="2897:48"><expr pos:start="2897:13" pos:end="2897:47"><name pos:start="2897:13" pos:end="2897:17">modrm</name> <operator pos:start="2897:19" pos:end="2897:19">=</operator> <call pos:start="2897:21" pos:end="2897:47"><name pos:start="2897:21" pos:end="2897:33">cpu_ldub_code</name><argument_list pos:start="2897:34" pos:end="2897:47">(<argument pos:start="2897:35" pos:end="2897:37"><expr pos:start="2897:35" pos:end="2897:37"><name pos:start="2897:35" pos:end="2897:37">env</name></expr></argument>, <argument pos:start="2897:40" pos:end="2897:46"><expr pos:start="2897:40" pos:end="2897:46"><name pos:start="2897:40" pos:end="2897:44"><name pos:start="2897:40" pos:end="2897:40">s</name><operator pos:start="2897:41" pos:end="2897:42">-&gt;</operator><name pos:start="2897:43" pos:end="2897:44">pc</name></name><operator pos:start="2897:45" pos:end="2897:46">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2898:13" pos:end="2898:45"><expr pos:start="2898:13" pos:end="2898:44"><name pos:start="2898:13" pos:end="2898:15">reg</name> <operator pos:start="2898:17" pos:end="2898:17">=</operator> <operator pos:start="2898:19" pos:end="2898:19">(</operator><operator pos:start="2898:20" pos:end="2898:20">(</operator><name pos:start="2898:21" pos:end="2898:25">modrm</name> <operator pos:start="2898:27" pos:end="2898:28">&gt;&gt;</operator> <literal type="number" pos:start="2898:30" pos:end="2898:30">3</literal><operator pos:start="2898:31" pos:end="2898:31">)</operator> <operator pos:start="2898:33" pos:end="2898:33">&amp;</operator> <literal type="number" pos:start="2898:35" pos:end="2898:35">7</literal><operator pos:start="2898:36" pos:end="2898:36">)</operator> <operator pos:start="2898:38" pos:end="2898:38">|</operator> <name pos:start="2898:40" pos:end="2898:44">rex_r</name></expr>;</expr_stmt>
            <expr_stmt pos:start="2899:13" pos:end="2899:63"><expr pos:start="2899:13" pos:end="2899:62"><call pos:start="2899:13" pos:end="2899:62"><name pos:start="2899:13" pos:end="2899:26">gen_ldst_modrm</name><argument_list pos:start="2899:27" pos:end="2899:62">(<argument pos:start="2899:28" pos:end="2899:30"><expr pos:start="2899:28" pos:end="2899:30"><name pos:start="2899:28" pos:end="2899:30">env</name></expr></argument>, <argument pos:start="2899:33" pos:end="2899:33"><expr pos:start="2899:33" pos:end="2899:33"><name pos:start="2899:33" pos:end="2899:33">s</name></expr></argument>, <argument pos:start="2899:36" pos:end="2899:40"><expr pos:start="2899:36" pos:end="2899:40"><name pos:start="2899:36" pos:end="2899:40">modrm</name></expr></argument>, <argument pos:start="2899:43" pos:end="2899:49"><expr pos:start="2899:43" pos:end="2899:49"><name pos:start="2899:43" pos:end="2899:49">OT_WORD</name></expr></argument>, <argument pos:start="2899:52" pos:end="2899:58"><expr pos:start="2899:52" pos:end="2899:58"><name pos:start="2899:52" pos:end="2899:58">OR_TMP0</name></expr></argument>, <argument pos:start="2899:61" pos:end="2899:61"><expr pos:start="2899:61" pos:end="2899:61"><literal type="number" pos:start="2899:61" pos:end="2899:61">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2900:13" pos:end="2900:38"><expr pos:start="2900:13" pos:end="2900:37"><name pos:start="2900:13" pos:end="2900:14">t0</name> <operator pos:start="2900:16" pos:end="2900:16">=</operator> <call pos:start="2900:18" pos:end="2900:37"><name pos:start="2900:18" pos:end="2900:35">tcg_temp_local_new</name><argument_list pos:start="2900:36" pos:end="2900:37">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2901:13" pos:end="2901:32"><expr pos:start="2901:13" pos:end="2901:31"><call pos:start="2901:13" pos:end="2901:31"><name pos:start="2901:13" pos:end="2901:28">gen_update_cc_op</name><argument_list pos:start="2901:29" pos:end="2901:31">(<argument pos:start="2901:30" pos:end="2901:30"><expr pos:start="2901:30" pos:end="2901:30"><name pos:start="2901:30" pos:end="2901:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="2902:13" pos:end="3141:17"><if pos:start="2902:13" pos:end="2904:13">if <condition pos:start="2902:16" pos:end="2902:27">(<expr pos:start="2902:17" pos:end="2902:26"><name pos:start="2902:17" pos:end="2902:17">b</name> <operator pos:start="2902:19" pos:end="2902:20">==</operator> <literal type="number" pos:start="2902:22" pos:end="2902:26">0x102</literal></expr>)</condition> <block pos:start="2902:29" pos:end="2904:13">{<block_content pos:start="2903:17" pos:end="2903:54">
                <expr_stmt pos:start="2903:17" pos:end="2903:54"><expr pos:start="2903:17" pos:end="2903:53"><call pos:start="2903:17" pos:end="2903:53"><name pos:start="2903:17" pos:end="2903:30">gen_helper_lar</name><argument_list pos:start="2903:31" pos:end="2903:53">(<argument pos:start="2903:32" pos:end="2903:33"><expr pos:start="2903:32" pos:end="2903:33"><name pos:start="2903:32" pos:end="2903:33">t0</name></expr></argument>, <argument pos:start="2903:36" pos:end="2903:42"><expr pos:start="2903:36" pos:end="2903:42"><name pos:start="2903:36" pos:end="2903:42">cpu_env</name></expr></argument>, <argument pos:start="2903:45" pos:end="2903:52"><expr pos:start="2903:45" pos:end="2903:52"><name pos:start="2903:45" pos:end="2903:52"><name pos:start="2903:45" pos:end="2903:49">cpu_T</name><index pos:start="2903:50" pos:end="2903:52">[<expr pos:start="2903:51" pos:end="2903:51"><literal type="number" pos:start="2903:51" pos:end="2903:51">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="2904:15" pos:end="3141:17">else <block pos:start="2904:20" pos:end="3141:17">{<block_content pos:start="2905:17" pos:end="3141:17">
                <expr_stmt pos:start="2905:17" pos:end="2905:54"><expr pos:start="2905:17" pos:end="2905:53"><call pos:start="2905:17" pos:end="2905:53"><name pos:start="2905:17" pos:end="2905:30">gen_helper_lsl</name><argument_list pos:start="2905:31" pos:end="2905:53">(<argument pos:start="2905:32" pos:end="2905:33"><expr pos:start="2905:32" pos:end="2905:33"><name pos:start="2905:32" pos:end="2905:33">t0</name></expr></argument>, <argument pos:start="2905:36" pos:end="2905:42"><expr pos:start="2905:36" pos:end="2905:42"><name pos:start="2905:36" pos:end="2905:42">cpu_env</name></expr></argument>, <argument pos:start="2905:45" pos:end="2905:52"><expr pos:start="2905:45" pos:end="2905:52"><name pos:start="2905:45" pos:end="2905:52"><name pos:start="2905:45" pos:end="2905:49">cpu_T</name><index pos:start="2905:50" pos:end="2905:52">[<expr pos:start="2905:51" pos:end="2905:51"><literal type="number" pos:start="2905:51" pos:end="2905:51">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2906:13" pos:end="2906:56"><expr pos:start="2906:13" pos:end="2906:55"><call pos:start="2906:13" pos:end="2906:55"><name pos:start="2906:13" pos:end="2906:27">tcg_gen_andi_tl</name><argument_list pos:start="2906:28" pos:end="2906:55">(<argument pos:start="2906:29" pos:end="2906:36"><expr pos:start="2906:29" pos:end="2906:36"><name pos:start="2906:29" pos:end="2906:36">cpu_tmp0</name></expr></argument>, <argument pos:start="2906:39" pos:end="2906:48"><expr pos:start="2906:39" pos:end="2906:48"><name pos:start="2906:39" pos:end="2906:48">cpu_cc_src</name></expr></argument>, <argument pos:start="2906:51" pos:end="2906:54"><expr pos:start="2906:51" pos:end="2906:54"><name pos:start="2906:51" pos:end="2906:54">CC_Z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2907:13" pos:end="2907:37"><expr pos:start="2907:13" pos:end="2907:36"><name pos:start="2907:13" pos:end="2907:18">label1</name> <operator pos:start="2907:20" pos:end="2907:20">=</operator> <call pos:start="2907:22" pos:end="2907:36"><name pos:start="2907:22" pos:end="2907:34">gen_new_label</name><argument_list pos:start="2907:35" pos:end="2907:36">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2908:13" pos:end="2908:65"><expr pos:start="2908:13" pos:end="2908:64"><call pos:start="2908:13" pos:end="2908:64"><name pos:start="2908:13" pos:end="2908:30">tcg_gen_brcondi_tl</name><argument_list pos:start="2908:31" pos:end="2908:64">(<argument pos:start="2908:32" pos:end="2908:42"><expr pos:start="2908:32" pos:end="2908:42"><name pos:start="2908:32" pos:end="2908:42">TCG_COND_EQ</name></expr></argument>, <argument pos:start="2908:45" pos:end="2908:52"><expr pos:start="2908:45" pos:end="2908:52"><name pos:start="2908:45" pos:end="2908:52">cpu_tmp0</name></expr></argument>, <argument pos:start="2908:55" pos:end="2908:55"><expr pos:start="2908:55" pos:end="2908:55"><literal type="number" pos:start="2908:55" pos:end="2908:55">0</literal></expr></argument>, <argument pos:start="2908:58" pos:end="2908:63"><expr pos:start="2908:58" pos:end="2908:63"><name pos:start="2908:58" pos:end="2908:63">label1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2909:13" pos:end="2909:42"><expr pos:start="2909:13" pos:end="2909:41"><call pos:start="2909:13" pos:end="2909:41"><name pos:start="2909:13" pos:end="2909:28">gen_op_mov_reg_v</name><argument_list pos:start="2909:29" pos:end="2909:41">(<argument pos:start="2909:30" pos:end="2909:31"><expr pos:start="2909:30" pos:end="2909:31"><name pos:start="2909:30" pos:end="2909:31">ot</name></expr></argument>, <argument pos:start="2909:34" pos:end="2909:36"><expr pos:start="2909:34" pos:end="2909:36"><name pos:start="2909:34" pos:end="2909:36">reg</name></expr></argument>, <argument pos:start="2909:39" pos:end="2909:40"><expr pos:start="2909:39" pos:end="2909:40"><name pos:start="2909:39" pos:end="2909:40">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2910:13" pos:end="2910:34"><expr pos:start="2910:13" pos:end="2910:33"><call pos:start="2910:13" pos:end="2910:33"><name pos:start="2910:13" pos:end="2910:25">gen_set_label</name><argument_list pos:start="2910:26" pos:end="2910:33">(<argument pos:start="2910:27" pos:end="2910:32"><expr pos:start="2910:27" pos:end="2910:32"><name pos:start="2910:27" pos:end="2910:32">label1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2911:13" pos:end="2911:39"><expr pos:start="2911:13" pos:end="2911:38"><call pos:start="2911:13" pos:end="2911:38"><name pos:start="2911:13" pos:end="2911:21">set_cc_op</name><argument_list pos:start="2911:22" pos:end="2911:38">(<argument pos:start="2911:23" pos:end="2911:23"><expr pos:start="2911:23" pos:end="2911:23"><name pos:start="2911:23" pos:end="2911:23">s</name></expr></argument>, <argument pos:start="2911:26" pos:end="2911:37"><expr pos:start="2911:26" pos:end="2911:37"><name pos:start="2911:26" pos:end="2911:37">CC_OP_EFLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2912:13" pos:end="2912:30"><expr pos:start="2912:13" pos:end="2912:29"><call pos:start="2912:13" pos:end="2912:29"><name pos:start="2912:13" pos:end="2912:25">tcg_temp_free</name><argument_list pos:start="2912:26" pos:end="2912:29">(<argument pos:start="2912:27" pos:end="2912:28"><expr pos:start="2912:27" pos:end="2912:28"><name pos:start="2912:27" pos:end="2912:28">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="2913:9" pos:end="2913:14">break;</break>
    <case pos:start="2914:5" pos:end="2914:15">case <expr pos:start="2914:10" pos:end="2914:14"><literal type="number" pos:start="2914:10" pos:end="2914:14">0x118</literal></expr>:</case>
        <expr_stmt pos:start="2915:9" pos:end="2915:44"><expr pos:start="2915:9" pos:end="2915:43"><name pos:start="2915:9" pos:end="2915:13">modrm</name> <operator pos:start="2915:15" pos:end="2915:15">=</operator> <call pos:start="2915:17" pos:end="2915:43"><name pos:start="2915:17" pos:end="2915:29">cpu_ldub_code</name><argument_list pos:start="2915:30" pos:end="2915:43">(<argument pos:start="2915:31" pos:end="2915:33"><expr pos:start="2915:31" pos:end="2915:33"><name pos:start="2915:31" pos:end="2915:33">env</name></expr></argument>, <argument pos:start="2915:36" pos:end="2915:42"><expr pos:start="2915:36" pos:end="2915:42"><name pos:start="2915:36" pos:end="2915:40"><name pos:start="2915:36" pos:end="2915:36">s</name><operator pos:start="2915:37" pos:end="2915:38">-&gt;</operator><name pos:start="2915:39" pos:end="2915:40">pc</name></name><operator pos:start="2915:41" pos:end="2915:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2916:9" pos:end="2916:31"><expr pos:start="2916:9" pos:end="2916:30"><name pos:start="2916:9" pos:end="2916:11">mod</name> <operator pos:start="2916:13" pos:end="2916:13">=</operator> <operator pos:start="2916:15" pos:end="2916:15">(</operator><name pos:start="2916:16" pos:end="2916:20">modrm</name> <operator pos:start="2916:22" pos:end="2916:23">&gt;&gt;</operator> <literal type="number" pos:start="2916:25" pos:end="2916:25">6</literal><operator pos:start="2916:26" pos:end="2916:26">)</operator> <operator pos:start="2916:28" pos:end="2916:28">&amp;</operator> <literal type="number" pos:start="2916:30" pos:end="2916:30">3</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="2917:9" pos:end="2917:30"><expr pos:start="2917:9" pos:end="2917:29"><name pos:start="2917:9" pos:end="2917:10">op</name> <operator pos:start="2917:12" pos:end="2917:12">=</operator> <operator pos:start="2917:14" pos:end="2917:14">(</operator><name pos:start="2917:15" pos:end="2917:19">modrm</name> <operator pos:start="2917:21" pos:end="2917:22">&gt;&gt;</operator> <literal type="number" pos:start="2917:24" pos:end="2917:24">3</literal><operator pos:start="2917:25" pos:end="2917:25">)</operator> <operator pos:start="2917:27" pos:end="2917:27">&amp;</operator> <literal type="number" pos:start="2917:29" pos:end="2917:29">7</literal></expr>;</expr_stmt>
        <switch pos:start="2918:9" pos:end="3141:17">switch<condition pos:start="2918:15" pos:end="2918:18">(<expr pos:start="2918:16" pos:end="2918:17"><name pos:start="2918:16" pos:end="2918:17">op</name></expr>)</condition> <block pos:start="2918:20" pos:end="3141:17">{<block_content pos:start="2919:9" pos:end="3141:17">
        <case pos:start="2919:9" pos:end="2919:15">case <expr pos:start="2919:14" pos:end="2919:14"><literal type="number" pos:start="2919:14" pos:end="2919:14">0</literal></expr>:</case> <comment type="block" pos:start="2919:17" pos:end="2919:33">/* prefetchnta */</comment>
        <case pos:start="2920:9" pos:end="2920:15">case <expr pos:start="2920:14" pos:end="2920:14"><literal type="number" pos:start="2920:14" pos:end="2920:14">1</literal></expr>:</case> <comment type="block" pos:start="2920:17" pos:end="2920:33">/* prefetchnt0 */</comment>
        <case pos:start="2921:9" pos:end="2921:15">case <expr pos:start="2921:14" pos:end="2921:14"><literal type="number" pos:start="2921:14" pos:end="2921:14">2</literal></expr>:</case> <comment type="block" pos:start="2921:17" pos:end="2921:33">/* prefetchnt0 */</comment>
        <case pos:start="2922:9" pos:end="2922:15">case <expr pos:start="2922:14" pos:end="2922:14"><literal type="number" pos:start="2922:14" pos:end="2922:14">3</literal></expr>:</case> <comment type="block" pos:start="2922:17" pos:end="2922:33">/* prefetchnt0 */</comment>
            <if_stmt pos:start="2923:13" pos:end="2924:66"><if pos:start="2923:13" pos:end="2924:66">if <condition pos:start="2923:16" pos:end="2923:25">(<expr pos:start="2923:17" pos:end="2923:24"><name pos:start="2923:17" pos:end="2923:19">mod</name> <operator pos:start="2923:21" pos:end="2923:22">==</operator> <literal type="number" pos:start="2923:24" pos:end="2923:24">3</literal></expr>)</condition><block type="pseudo" pos:start="2924:13" pos:end="2924:66"><block_content pos:start="2924:13" pos:end="2924:66">
            <expr_stmt pos:start="2924:13" pos:end="2924:66"><expr pos:start="2924:13" pos:end="2924:65"><call pos:start="2924:13" pos:end="2924:65"><name pos:start="2924:13" pos:end="2924:25">gen_lea_modrm</name><argument_list pos:start="2924:26" pos:end="2924:65">(<argument pos:start="2924:27" pos:end="2924:29"><expr pos:start="2924:27" pos:end="2924:29"><name pos:start="2924:27" pos:end="2924:29">env</name></expr></argument>, <argument pos:start="2924:32" pos:end="2924:32"><expr pos:start="2924:32" pos:end="2924:32"><name pos:start="2924:32" pos:end="2924:32">s</name></expr></argument>, <argument pos:start="2924:35" pos:end="2924:39"><expr pos:start="2924:35" pos:end="2924:39"><name pos:start="2924:35" pos:end="2924:39">modrm</name></expr></argument>, <argument pos:start="2924:42" pos:end="2924:50"><expr pos:start="2924:42" pos:end="2924:50"><operator pos:start="2924:42" pos:end="2924:42">&amp;</operator><name pos:start="2924:43" pos:end="2924:50">reg_addr</name></expr></argument>, <argument pos:start="2924:53" pos:end="2924:64"><expr pos:start="2924:53" pos:end="2924:64"><operator pos:start="2924:53" pos:end="2924:53">&amp;</operator><name pos:start="2924:54" pos:end="2924:64">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <comment type="block" pos:start="2925:13" pos:end="2925:36">/* nothing more to do */</comment>
            <break pos:start="2926:13" pos:end="2926:18">break;</break>
        <default pos:start="2927:9" pos:end="2927:16">default:</default> <comment type="block" pos:start="2927:18" pos:end="2927:39">/* nop (multi byte) */</comment>
            <expr_stmt pos:start="2928:13" pos:end="2928:41"><expr pos:start="2928:13" pos:end="2928:40"><call pos:start="2928:13" pos:end="2928:40"><name pos:start="2928:13" pos:end="2928:25">gen_nop_modrm</name><argument_list pos:start="2928:26" pos:end="2928:40">(<argument pos:start="2928:27" pos:end="2928:29"><expr pos:start="2928:27" pos:end="2928:29"><name pos:start="2928:27" pos:end="2928:29">env</name></expr></argument>, <argument pos:start="2928:32" pos:end="2928:32"><expr pos:start="2928:32" pos:end="2928:32"><name pos:start="2928:32" pos:end="2928:32">s</name></expr></argument>, <argument pos:start="2928:35" pos:end="2928:39"><expr pos:start="2928:35" pos:end="2928:39"><name pos:start="2928:35" pos:end="2928:39">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="2929:13" pos:end="2929:18">break;</break>
        <break pos:start="2930:9" pos:end="2930:14">break;</break>
    <case pos:start="2931:5" pos:end="2931:25">case <expr pos:start="2931:10" pos:end="2931:24"><literal type="number" pos:start="2931:10" pos:end="2931:14">0x119</literal> <operator pos:start="2931:16" pos:end="2931:18">...</operator> <literal type="number" pos:start="2931:20" pos:end="2931:24">0x11f</literal></expr>:</case> <comment type="block" pos:start="2931:27" pos:end="2931:48">/* nop (multi byte) */</comment>
        <expr_stmt pos:start="2932:9" pos:end="2932:44"><expr pos:start="2932:9" pos:end="2932:43"><name pos:start="2932:9" pos:end="2932:13">modrm</name> <operator pos:start="2932:15" pos:end="2932:15">=</operator> <call pos:start="2932:17" pos:end="2932:43"><name pos:start="2932:17" pos:end="2932:29">cpu_ldub_code</name><argument_list pos:start="2932:30" pos:end="2932:43">(<argument pos:start="2932:31" pos:end="2932:33"><expr pos:start="2932:31" pos:end="2932:33"><name pos:start="2932:31" pos:end="2932:33">env</name></expr></argument>, <argument pos:start="2932:36" pos:end="2932:42"><expr pos:start="2932:36" pos:end="2932:42"><name pos:start="2932:36" pos:end="2932:40"><name pos:start="2932:36" pos:end="2932:36">s</name><operator pos:start="2932:37" pos:end="2932:38">-&gt;</operator><name pos:start="2932:39" pos:end="2932:40">pc</name></name><operator pos:start="2932:41" pos:end="2932:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2933:9" pos:end="2933:37"><expr pos:start="2933:9" pos:end="2933:36"><call pos:start="2933:9" pos:end="2933:36"><name pos:start="2933:9" pos:end="2933:21">gen_nop_modrm</name><argument_list pos:start="2933:22" pos:end="2933:36">(<argument pos:start="2933:23" pos:end="2933:25"><expr pos:start="2933:23" pos:end="2933:25"><name pos:start="2933:23" pos:end="2933:25">env</name></expr></argument>, <argument pos:start="2933:28" pos:end="2933:28"><expr pos:start="2933:28" pos:end="2933:28"><name pos:start="2933:28" pos:end="2933:28">s</name></expr></argument>, <argument pos:start="2933:31" pos:end="2933:35"><expr pos:start="2933:31" pos:end="2933:35"><name pos:start="2933:31" pos:end="2933:35">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="2934:9" pos:end="2934:14">break;</break>
    <case pos:start="2935:5" pos:end="2935:15">case <expr pos:start="2935:10" pos:end="2935:14"><literal type="number" pos:start="2935:10" pos:end="2935:14">0x120</literal></expr>:</case> <comment type="block" pos:start="2935:17" pos:end="2935:34">/* mov reg, crN */</comment>
    <case pos:start="2936:5" pos:end="2936:15">case <expr pos:start="2936:10" pos:end="2936:14"><literal type="number" pos:start="2936:10" pos:end="2936:14">0x122</literal></expr>:</case> <comment type="block" pos:start="2936:17" pos:end="2936:34">/* mov crN, reg */</comment>
        <if_stmt pos:start="2937:9" pos:end="3141:17"><if pos:start="2937:9" pos:end="2939:9">if <condition pos:start="2937:12" pos:end="2937:24">(<expr pos:start="2937:13" pos:end="2937:23"><name pos:start="2937:13" pos:end="2937:18"><name pos:start="2937:13" pos:end="2937:13">s</name><operator pos:start="2937:14" pos:end="2937:15">-&gt;</operator><name pos:start="2937:16" pos:end="2937:18">cpl</name></name> <operator pos:start="2937:20" pos:end="2937:21">!=</operator> <literal type="number" pos:start="2937:23" pos:end="2937:23">0</literal></expr>)</condition> <block pos:start="2937:26" pos:end="2939:9">{<block_content pos:start="2938:13" pos:end="2938:64">
            <expr_stmt pos:start="2938:13" pos:end="2938:64"><expr pos:start="2938:13" pos:end="2938:63"><call pos:start="2938:13" pos:end="2938:63"><name pos:start="2938:13" pos:end="2938:25">gen_exception</name><argument_list pos:start="2938:26" pos:end="2938:63">(<argument pos:start="2938:27" pos:end="2938:27"><expr pos:start="2938:27" pos:end="2938:27"><name pos:start="2938:27" pos:end="2938:27">s</name></expr></argument>, <argument pos:start="2938:30" pos:end="2938:39"><expr pos:start="2938:30" pos:end="2938:39"><name pos:start="2938:30" pos:end="2938:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="2938:42" pos:end="2938:62"><expr pos:start="2938:42" pos:end="2938:62"><name pos:start="2938:42" pos:end="2938:49">pc_start</name> <operator pos:start="2938:51" pos:end="2938:51">-</operator> <name pos:start="2938:53" pos:end="2938:62"><name pos:start="2938:53" pos:end="2938:53">s</name><operator pos:start="2938:54" pos:end="2938:55">-&gt;</operator><name pos:start="2938:56" pos:end="2938:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="2939:11" pos:end="3141:17">else <block pos:start="2939:16" pos:end="3141:17">{<block_content pos:start="2940:13" pos:end="3141:17">
            <expr_stmt pos:start="2940:13" pos:end="2940:48"><expr pos:start="2940:13" pos:end="2940:47"><name pos:start="2940:13" pos:end="2940:17">modrm</name> <operator pos:start="2940:19" pos:end="2940:19">=</operator> <call pos:start="2940:21" pos:end="2940:47"><name pos:start="2940:21" pos:end="2940:33">cpu_ldub_code</name><argument_list pos:start="2940:34" pos:end="2940:47">(<argument pos:start="2940:35" pos:end="2940:37"><expr pos:start="2940:35" pos:end="2940:37"><name pos:start="2940:35" pos:end="2940:37">env</name></expr></argument>, <argument pos:start="2940:40" pos:end="2940:46"><expr pos:start="2940:40" pos:end="2940:46"><name pos:start="2940:40" pos:end="2940:44"><name pos:start="2940:40" pos:end="2940:40">s</name><operator pos:start="2940:41" pos:end="2940:42">-&gt;</operator><name pos:start="2940:43" pos:end="2940:44">pc</name></name><operator pos:start="2940:45" pos:end="2940:46">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block" pos:start="2941:13" pos:end="2945:15">/* Ignore the mod bits (assume (modrm&amp;0xc0)==0xc0).
             * AMD documentation (24594.pdf) and testing of
             * intel 386 and 486 processors all show that the mod bits
             * are assumed to be 1's, regardless of actual values.
             */</comment>
            <expr_stmt pos:start="2946:13" pos:end="2946:40"><expr pos:start="2946:13" pos:end="2946:39"><name pos:start="2946:13" pos:end="2946:14">rm</name> <operator pos:start="2946:16" pos:end="2946:16">=</operator> <operator pos:start="2946:18" pos:end="2946:18">(</operator><name pos:start="2946:19" pos:end="2946:23">modrm</name> <operator pos:start="2946:25" pos:end="2946:25">&amp;</operator> <literal type="number" pos:start="2946:27" pos:end="2946:27">7</literal><operator pos:start="2946:28" pos:end="2946:28">)</operator> <operator pos:start="2946:30" pos:end="2946:30">|</operator> <call pos:start="2946:32" pos:end="2946:39"><name pos:start="2946:32" pos:end="2946:36">REX_B</name><argument_list pos:start="2946:37" pos:end="2946:39">(<argument pos:start="2946:38" pos:end="2946:38"><expr pos:start="2946:38" pos:end="2946:38"><name pos:start="2946:38" pos:end="2946:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2947:13" pos:end="2947:45"><expr pos:start="2947:13" pos:end="2947:44"><name pos:start="2947:13" pos:end="2947:15">reg</name> <operator pos:start="2947:17" pos:end="2947:17">=</operator> <operator pos:start="2947:19" pos:end="2947:19">(</operator><operator pos:start="2947:20" pos:end="2947:20">(</operator><name pos:start="2947:21" pos:end="2947:25">modrm</name> <operator pos:start="2947:27" pos:end="2947:28">&gt;&gt;</operator> <literal type="number" pos:start="2947:30" pos:end="2947:30">3</literal><operator pos:start="2947:31" pos:end="2947:31">)</operator> <operator pos:start="2947:33" pos:end="2947:33">&amp;</operator> <literal type="number" pos:start="2947:35" pos:end="2947:35">7</literal><operator pos:start="2947:36" pos:end="2947:36">)</operator> <operator pos:start="2947:38" pos:end="2947:38">|</operator> <name pos:start="2947:40" pos:end="2947:44">rex_r</name></expr>;</expr_stmt>
            <if_stmt pos:start="2948:13" pos:end="2951:29"><if pos:start="2948:13" pos:end="2949:29">if <condition pos:start="2948:16" pos:end="2948:26">(<expr pos:start="2948:17" pos:end="2948:25"><call pos:start="2948:17" pos:end="2948:25"><name pos:start="2948:17" pos:end="2948:22">CODE64</name><argument_list pos:start="2948:23" pos:end="2948:25">(<argument pos:start="2948:24" pos:end="2948:24"><expr pos:start="2948:24" pos:end="2948:24"><name pos:start="2948:24" pos:end="2948:24">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2949:17" pos:end="2949:29"><block_content pos:start="2949:17" pos:end="2949:29">
                <expr_stmt pos:start="2949:17" pos:end="2949:29"><expr pos:start="2949:17" pos:end="2949:28"><name pos:start="2949:17" pos:end="2949:18">ot</name> <operator pos:start="2949:20" pos:end="2949:20">=</operator> <name pos:start="2949:22" pos:end="2949:28">OT_QUAD</name></expr>;</expr_stmt></block_content></block></if>
            <else pos:start="2950:13" pos:end="2951:29">else<block type="pseudo" pos:start="2951:17" pos:end="2951:29"><block_content pos:start="2951:17" pos:end="2951:29">
                <expr_stmt pos:start="2951:17" pos:end="2951:29"><expr pos:start="2951:17" pos:end="2951:28"><name pos:start="2951:17" pos:end="2951:18">ot</name> <operator pos:start="2951:20" pos:end="2951:20">=</operator> <name pos:start="2951:22" pos:end="2951:28">OT_LONG</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <if_stmt pos:start="2952:13" pos:end="3141:17"><if pos:start="2952:13" pos:end="3141:17">if <condition pos:start="2952:16" pos:end="2953:61">(<expr pos:start="2952:17" pos:end="2953:60"><operator pos:start="2952:17" pos:end="2952:17">(</operator><name pos:start="2952:18" pos:end="2952:25">prefixes</name> <operator pos:start="2952:27" pos:end="2952:27">&amp;</operator> <name pos:start="2952:29" pos:end="2952:39">PREFIX_LOCK</name><operator pos:start="2952:40" pos:end="2952:40">)</operator> <operator pos:start="2952:42" pos:end="2952:43">&amp;&amp;</operator> <operator pos:start="2952:45" pos:end="2952:45">(</operator><name pos:start="2952:46" pos:end="2952:48">reg</name> <operator pos:start="2952:50" pos:end="2952:51">==</operator> <literal type="number" pos:start="2952:53" pos:end="2952:53">0</literal><operator pos:start="2952:54" pos:end="2952:54">)</operator> <operator pos:start="2952:56" pos:end="2952:57">&amp;&amp;</operator>
                <operator pos:start="2953:17" pos:end="2953:17">(</operator><name pos:start="2953:18" pos:end="2953:39"><name pos:start="2953:18" pos:end="2953:18">s</name><operator pos:start="2953:19" pos:end="2953:20">-&gt;</operator><name pos:start="2953:21" pos:end="2953:39">cpuid_ext3_features</name></name> <operator pos:start="2953:41" pos:end="2953:41">&amp;</operator> <name pos:start="2953:43" pos:end="2953:59">CPUID_EXT3_CR8LEG</name><operator pos:start="2953:60" pos:end="2953:60">)</operator></expr>)</condition> <block pos:start="2953:63" pos:end="3141:17">{<block_content pos:start="2954:17" pos:end="3141:17">
                <expr_stmt pos:start="2954:17" pos:end="2954:24"><expr pos:start="2954:17" pos:end="2954:23"><name pos:start="2954:17" pos:end="2954:19">reg</name> <operator pos:start="2954:21" pos:end="2954:21">=</operator> <literal type="number" pos:start="2954:23" pos:end="2954:23">8</literal></expr>;</expr_stmt>
            <switch pos:start="2955:13" pos:end="3141:17">switch<condition pos:start="2955:19" pos:end="2955:23">(<expr pos:start="2955:20" pos:end="2955:22"><name pos:start="2955:20" pos:end="2955:22">reg</name></expr>)</condition> <block pos:start="2955:25" pos:end="3141:17">{<block_content pos:start="2956:13" pos:end="3141:17">
            <case pos:start="2956:13" pos:end="2956:19">case <expr pos:start="2956:18" pos:end="2956:18"><literal type="number" pos:start="2956:18" pos:end="2956:18">0</literal></expr>:</case>
            <case pos:start="2957:13" pos:end="2957:19">case <expr pos:start="2957:18" pos:end="2957:18"><literal type="number" pos:start="2957:18" pos:end="2957:18">2</literal></expr>:</case>
            <case pos:start="2958:13" pos:end="2958:19">case <expr pos:start="2958:18" pos:end="2958:18"><literal type="number" pos:start="2958:18" pos:end="2958:18">3</literal></expr>:</case>
            <case pos:start="2959:13" pos:end="2959:19">case <expr pos:start="2959:18" pos:end="2959:18"><literal type="number" pos:start="2959:18" pos:end="2959:18">4</literal></expr>:</case>
            <case pos:start="2960:13" pos:end="2960:19">case <expr pos:start="2960:18" pos:end="2960:18"><literal type="number" pos:start="2960:18" pos:end="2960:18">8</literal></expr>:</case>
                <expr_stmt pos:start="2961:17" pos:end="2961:36"><expr pos:start="2961:17" pos:end="2961:35"><call pos:start="2961:17" pos:end="2961:35"><name pos:start="2961:17" pos:end="2961:32">gen_update_cc_op</name><argument_list pos:start="2961:33" pos:end="2961:35">(<argument pos:start="2961:34" pos:end="2961:34"><expr pos:start="2961:34" pos:end="2961:34"><name pos:start="2961:34" pos:end="2961:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2962:17" pos:end="2962:50"><expr pos:start="2962:17" pos:end="2962:49"><call pos:start="2962:17" pos:end="2962:49"><name pos:start="2962:17" pos:end="2962:26">gen_jmp_im</name><argument_list pos:start="2962:27" pos:end="2962:49">(<argument pos:start="2962:28" pos:end="2962:48"><expr pos:start="2962:28" pos:end="2962:48"><name pos:start="2962:28" pos:end="2962:35">pc_start</name> <operator pos:start="2962:37" pos:end="2962:37">-</operator> <name pos:start="2962:39" pos:end="2962:48"><name pos:start="2962:39" pos:end="2962:39">s</name><operator pos:start="2962:40" pos:end="2962:41">-&gt;</operator><name pos:start="2962:42" pos:end="2962:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="2963:17" pos:end="3141:17"><if pos:start="2963:17" pos:end="2969:17">if <condition pos:start="2963:20" pos:end="2963:26">(<expr pos:start="2963:21" pos:end="2963:25"><name pos:start="2963:21" pos:end="2963:21">b</name> <operator pos:start="2963:23" pos:end="2963:23">&amp;</operator> <literal type="number" pos:start="2963:25" pos:end="2963:25">2</literal></expr>)</condition> <block pos:start="2963:28" pos:end="2969:17">{<block_content pos:start="2964:21" pos:end="2968:31">
                    <expr_stmt pos:start="2964:21" pos:end="2964:49"><expr pos:start="2964:21" pos:end="2964:48"><call pos:start="2964:21" pos:end="2964:48"><name pos:start="2964:21" pos:end="2964:37">gen_op_mov_TN_reg</name><argument_list pos:start="2964:38" pos:end="2964:48">(<argument pos:start="2964:39" pos:end="2964:40"><expr pos:start="2964:39" pos:end="2964:40"><name pos:start="2964:39" pos:end="2964:40">ot</name></expr></argument>, <argument pos:start="2964:43" pos:end="2964:43"><expr pos:start="2964:43" pos:end="2964:43"><literal type="number" pos:start="2964:43" pos:end="2964:43">0</literal></expr></argument>, <argument pos:start="2964:46" pos:end="2964:47"><expr pos:start="2964:46" pos:end="2964:47"><name pos:start="2964:46" pos:end="2964:47">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="2965:21" pos:end="2966:51"><expr pos:start="2965:21" pos:end="2966:50"><call pos:start="2965:21" pos:end="2966:50"><name pos:start="2965:21" pos:end="2965:40">gen_helper_write_crN</name><argument_list pos:start="2965:41" pos:end="2966:50">(<argument pos:start="2965:42" pos:end="2965:48"><expr pos:start="2965:42" pos:end="2965:48"><name pos:start="2965:42" pos:end="2965:48">cpu_env</name></expr></argument>, <argument pos:start="2965:51" pos:end="2965:68"><expr pos:start="2965:51" pos:end="2965:68"><call pos:start="2965:51" pos:end="2965:68"><name pos:start="2965:51" pos:end="2965:63">tcg_const_i32</name><argument_list pos:start="2965:64" pos:end="2965:68">(<argument pos:start="2965:65" pos:end="2965:67"><expr pos:start="2965:65" pos:end="2965:67"><name pos:start="2965:65" pos:end="2965:67">reg</name></expr></argument>)</argument_list></call></expr></argument>,
                                         <argument pos:start="2966:42" pos:end="2966:49"><expr pos:start="2966:42" pos:end="2966:49"><name pos:start="2966:42" pos:end="2966:49"><name pos:start="2966:42" pos:end="2966:46">cpu_T</name><index pos:start="2966:47" pos:end="2966:49">[<expr pos:start="2966:48" pos:end="2966:48"><literal type="number" pos:start="2966:48" pos:end="2966:48">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="2967:21" pos:end="2967:51"><expr pos:start="2967:21" pos:end="2967:50"><call pos:start="2967:21" pos:end="2967:50"><name pos:start="2967:21" pos:end="2967:30">gen_jmp_im</name><argument_list pos:start="2967:31" pos:end="2967:50">(<argument pos:start="2967:32" pos:end="2967:49"><expr pos:start="2967:32" pos:end="2967:49"><name pos:start="2967:32" pos:end="2967:36"><name pos:start="2967:32" pos:end="2967:32">s</name><operator pos:start="2967:33" pos:end="2967:34">-&gt;</operator><name pos:start="2967:35" pos:end="2967:36">pc</name></name> <operator pos:start="2967:38" pos:end="2967:38">-</operator> <name pos:start="2967:40" pos:end="2967:49"><name pos:start="2967:40" pos:end="2967:40">s</name><operator pos:start="2967:41" pos:end="2967:42">-&gt;</operator><name pos:start="2967:43" pos:end="2967:49">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="2968:21" pos:end="2968:31"><expr pos:start="2968:21" pos:end="2968:30"><call pos:start="2968:21" pos:end="2968:30"><name pos:start="2968:21" pos:end="2968:27">gen_eob</name><argument_list pos:start="2968:28" pos:end="2968:30">(<argument pos:start="2968:29" pos:end="2968:29"><expr pos:start="2968:29" pos:end="2968:29"><name pos:start="2968:29" pos:end="2968:29">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else pos:start="2969:19" pos:end="3141:17">else <block pos:start="2969:24" pos:end="3141:17">{<block_content pos:start="2970:21" pos:end="3141:17">
                    <expr_stmt pos:start="2970:21" pos:end="2970:79"><expr pos:start="2970:21" pos:end="2970:78"><call pos:start="2970:21" pos:end="2970:78"><name pos:start="2970:21" pos:end="2970:39">gen_helper_read_crN</name><argument_list pos:start="2970:40" pos:end="2970:78">(<argument pos:start="2970:41" pos:end="2970:48"><expr pos:start="2970:41" pos:end="2970:48"><name pos:start="2970:41" pos:end="2970:48"><name pos:start="2970:41" pos:end="2970:45">cpu_T</name><index pos:start="2970:46" pos:end="2970:48">[<expr pos:start="2970:47" pos:end="2970:47"><literal type="number" pos:start="2970:47" pos:end="2970:47">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2970:51" pos:end="2970:57"><expr pos:start="2970:51" pos:end="2970:57"><name pos:start="2970:51" pos:end="2970:57">cpu_env</name></expr></argument>, <argument pos:start="2970:60" pos:end="2970:77"><expr pos:start="2970:60" pos:end="2970:77"><call pos:start="2970:60" pos:end="2970:77"><name pos:start="2970:60" pos:end="2970:72">tcg_const_i32</name><argument_list pos:start="2970:73" pos:end="2970:77">(<argument pos:start="2970:74" pos:end="2970:76"><expr pos:start="2970:74" pos:end="2970:76"><name pos:start="2970:74" pos:end="2970:76">reg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="2971:21" pos:end="2971:46"><expr pos:start="2971:21" pos:end="2971:45"><call pos:start="2971:21" pos:end="2971:45"><name pos:start="2971:21" pos:end="2971:37">gen_op_mov_reg_T0</name><argument_list pos:start="2971:38" pos:end="2971:45">(<argument pos:start="2971:39" pos:end="2971:40"><expr pos:start="2971:39" pos:end="2971:40"><name pos:start="2971:39" pos:end="2971:40">ot</name></expr></argument>, <argument pos:start="2971:43" pos:end="2971:44"><expr pos:start="2971:43" pos:end="2971:44"><name pos:start="2971:43" pos:end="2971:44">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="2972:17" pos:end="2972:22">break;</break>
            <default pos:start="2973:13" pos:end="2973:20">default:</default>
        <break pos:start="2974:9" pos:end="2974:14">break;</break>
    <case pos:start="2975:5" pos:end="2975:15">case <expr pos:start="2975:10" pos:end="2975:14"><literal type="number" pos:start="2975:10" pos:end="2975:14">0x121</literal></expr>:</case> <comment type="block" pos:start="2975:17" pos:end="2975:34">/* mov reg, drN */</comment>
    <case pos:start="2976:5" pos:end="2976:15">case <expr pos:start="2976:10" pos:end="2976:14"><literal type="number" pos:start="2976:10" pos:end="2976:14">0x123</literal></expr>:</case> <comment type="block" pos:start="2976:17" pos:end="2976:34">/* mov drN, reg */</comment>
        <if_stmt pos:start="2977:9" pos:end="3141:17"><if pos:start="2977:9" pos:end="2979:9">if <condition pos:start="2977:12" pos:end="2977:24">(<expr pos:start="2977:13" pos:end="2977:23"><name pos:start="2977:13" pos:end="2977:18"><name pos:start="2977:13" pos:end="2977:13">s</name><operator pos:start="2977:14" pos:end="2977:15">-&gt;</operator><name pos:start="2977:16" pos:end="2977:18">cpl</name></name> <operator pos:start="2977:20" pos:end="2977:21">!=</operator> <literal type="number" pos:start="2977:23" pos:end="2977:23">0</literal></expr>)</condition> <block pos:start="2977:26" pos:end="2979:9">{<block_content pos:start="2978:13" pos:end="2978:64">
            <expr_stmt pos:start="2978:13" pos:end="2978:64"><expr pos:start="2978:13" pos:end="2978:63"><call pos:start="2978:13" pos:end="2978:63"><name pos:start="2978:13" pos:end="2978:25">gen_exception</name><argument_list pos:start="2978:26" pos:end="2978:63">(<argument pos:start="2978:27" pos:end="2978:27"><expr pos:start="2978:27" pos:end="2978:27"><name pos:start="2978:27" pos:end="2978:27">s</name></expr></argument>, <argument pos:start="2978:30" pos:end="2978:39"><expr pos:start="2978:30" pos:end="2978:39"><name pos:start="2978:30" pos:end="2978:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="2978:42" pos:end="2978:62"><expr pos:start="2978:42" pos:end="2978:62"><name pos:start="2978:42" pos:end="2978:49">pc_start</name> <operator pos:start="2978:51" pos:end="2978:51">-</operator> <name pos:start="2978:53" pos:end="2978:62"><name pos:start="2978:53" pos:end="2978:53">s</name><operator pos:start="2978:54" pos:end="2978:55">-&gt;</operator><name pos:start="2978:56" pos:end="2978:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="2979:11" pos:end="3141:17">else <block pos:start="2979:16" pos:end="3141:17">{<block_content pos:start="2980:13" pos:end="3141:17">
            <expr_stmt pos:start="2980:13" pos:end="2980:48"><expr pos:start="2980:13" pos:end="2980:47"><name pos:start="2980:13" pos:end="2980:17">modrm</name> <operator pos:start="2980:19" pos:end="2980:19">=</operator> <call pos:start="2980:21" pos:end="2980:47"><name pos:start="2980:21" pos:end="2980:33">cpu_ldub_code</name><argument_list pos:start="2980:34" pos:end="2980:47">(<argument pos:start="2980:35" pos:end="2980:37"><expr pos:start="2980:35" pos:end="2980:37"><name pos:start="2980:35" pos:end="2980:37">env</name></expr></argument>, <argument pos:start="2980:40" pos:end="2980:46"><expr pos:start="2980:40" pos:end="2980:46"><name pos:start="2980:40" pos:end="2980:44"><name pos:start="2980:40" pos:end="2980:40">s</name><operator pos:start="2980:41" pos:end="2980:42">-&gt;</operator><name pos:start="2980:43" pos:end="2980:44">pc</name></name><operator pos:start="2980:45" pos:end="2980:46">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block" pos:start="2981:13" pos:end="2985:15">/* Ignore the mod bits (assume (modrm&amp;0xc0)==0xc0).
             * AMD documentation (24594.pdf) and testing of
             * intel 386 and 486 processors all show that the mod bits
             * are assumed to be 1's, regardless of actual values.
             */</comment>
            <expr_stmt pos:start="2986:13" pos:end="2986:40"><expr pos:start="2986:13" pos:end="2986:39"><name pos:start="2986:13" pos:end="2986:14">rm</name> <operator pos:start="2986:16" pos:end="2986:16">=</operator> <operator pos:start="2986:18" pos:end="2986:18">(</operator><name pos:start="2986:19" pos:end="2986:23">modrm</name> <operator pos:start="2986:25" pos:end="2986:25">&amp;</operator> <literal type="number" pos:start="2986:27" pos:end="2986:27">7</literal><operator pos:start="2986:28" pos:end="2986:28">)</operator> <operator pos:start="2986:30" pos:end="2986:30">|</operator> <call pos:start="2986:32" pos:end="2986:39"><name pos:start="2986:32" pos:end="2986:36">REX_B</name><argument_list pos:start="2986:37" pos:end="2986:39">(<argument pos:start="2986:38" pos:end="2986:38"><expr pos:start="2986:38" pos:end="2986:38"><name pos:start="2986:38" pos:end="2986:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2987:13" pos:end="2987:45"><expr pos:start="2987:13" pos:end="2987:44"><name pos:start="2987:13" pos:end="2987:15">reg</name> <operator pos:start="2987:17" pos:end="2987:17">=</operator> <operator pos:start="2987:19" pos:end="2987:19">(</operator><operator pos:start="2987:20" pos:end="2987:20">(</operator><name pos:start="2987:21" pos:end="2987:25">modrm</name> <operator pos:start="2987:27" pos:end="2987:28">&gt;&gt;</operator> <literal type="number" pos:start="2987:30" pos:end="2987:30">3</literal><operator pos:start="2987:31" pos:end="2987:31">)</operator> <operator pos:start="2987:33" pos:end="2987:33">&amp;</operator> <literal type="number" pos:start="2987:35" pos:end="2987:35">7</literal><operator pos:start="2987:36" pos:end="2987:36">)</operator> <operator pos:start="2987:38" pos:end="2987:38">|</operator> <name pos:start="2987:40" pos:end="2987:44">rex_r</name></expr>;</expr_stmt>
            <if_stmt pos:start="2988:13" pos:end="2991:29"><if pos:start="2988:13" pos:end="2989:29">if <condition pos:start="2988:16" pos:end="2988:26">(<expr pos:start="2988:17" pos:end="2988:25"><call pos:start="2988:17" pos:end="2988:25"><name pos:start="2988:17" pos:end="2988:22">CODE64</name><argument_list pos:start="2988:23" pos:end="2988:25">(<argument pos:start="2988:24" pos:end="2988:24"><expr pos:start="2988:24" pos:end="2988:24"><name pos:start="2988:24" pos:end="2988:24">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2989:17" pos:end="2989:29"><block_content pos:start="2989:17" pos:end="2989:29">
                <expr_stmt pos:start="2989:17" pos:end="2989:29"><expr pos:start="2989:17" pos:end="2989:28"><name pos:start="2989:17" pos:end="2989:18">ot</name> <operator pos:start="2989:20" pos:end="2989:20">=</operator> <name pos:start="2989:22" pos:end="2989:28">OT_QUAD</name></expr>;</expr_stmt></block_content></block></if>
            <else pos:start="2990:13" pos:end="2991:29">else<block type="pseudo" pos:start="2991:17" pos:end="2991:29"><block_content pos:start="2991:17" pos:end="2991:29">
                <expr_stmt pos:start="2991:17" pos:end="2991:29"><expr pos:start="2991:17" pos:end="2991:28"><name pos:start="2991:17" pos:end="2991:18">ot</name> <operator pos:start="2991:20" pos:end="2991:20">=</operator> <name pos:start="2991:22" pos:end="2991:28">OT_LONG</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <comment type="block" pos:start="2992:13" pos:end="2992:56">/* XXX: do it dynamically with CR4.DE bit */</comment>
            <if_stmt pos:start="2993:13" pos:end="3141:17"><if pos:start="2993:13" pos:end="3141:17">if <condition pos:start="2993:16" pos:end="2993:49">(<expr pos:start="2993:17" pos:end="2993:48"><name pos:start="2993:17" pos:end="2993:19">reg</name> <operator pos:start="2993:21" pos:end="2993:22">==</operator> <literal type="number" pos:start="2993:24" pos:end="2993:24">4</literal> <operator pos:start="2993:26" pos:end="2993:27">||</operator> <name pos:start="2993:29" pos:end="2993:31">reg</name> <operator pos:start="2993:33" pos:end="2993:34">==</operator> <literal type="number" pos:start="2993:36" pos:end="2993:36">5</literal> <operator pos:start="2993:38" pos:end="2993:39">||</operator> <name pos:start="2993:41" pos:end="2993:43">reg</name> <operator pos:start="2993:45" pos:end="2993:46">&gt;=</operator> <literal type="number" pos:start="2993:48" pos:end="2993:48">8</literal></expr>)</condition><block type="pseudo" pos:start="2994:13" pos:end="3141:17"><block_content pos:start="2994:13" pos:end="3141:17">
            <if_stmt pos:start="2994:13" pos:end="3141:17"><if pos:start="2994:13" pos:end="3000:13">if <condition pos:start="2994:16" pos:end="2994:22">(<expr pos:start="2994:17" pos:end="2994:21"><name pos:start="2994:17" pos:end="2994:17">b</name> <operator pos:start="2994:19" pos:end="2994:19">&amp;</operator> <literal type="number" pos:start="2994:21" pos:end="2994:21">2</literal></expr>)</condition> <block pos:start="2994:24" pos:end="3000:13">{<block_content pos:start="2995:17" pos:end="2999:27">
                <expr_stmt pos:start="2995:17" pos:end="2995:79"><expr pos:start="2995:17" pos:end="2995:78"><call pos:start="2995:17" pos:end="2995:78"><name pos:start="2995:17" pos:end="2995:39">gen_svm_check_intercept</name><argument_list pos:start="2995:40" pos:end="2995:78">(<argument pos:start="2995:41" pos:end="2995:41"><expr pos:start="2995:41" pos:end="2995:41"><name pos:start="2995:41" pos:end="2995:41">s</name></expr></argument>, <argument pos:start="2995:44" pos:end="2995:51"><expr pos:start="2995:44" pos:end="2995:51"><name pos:start="2995:44" pos:end="2995:51">pc_start</name></expr></argument>, <argument pos:start="2995:54" pos:end="2995:77"><expr pos:start="2995:54" pos:end="2995:77"><name pos:start="2995:54" pos:end="2995:71">SVM_EXIT_WRITE_DR0</name> <operator pos:start="2995:73" pos:end="2995:73">+</operator> <name pos:start="2995:75" pos:end="2995:77">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2996:17" pos:end="2996:45"><expr pos:start="2996:17" pos:end="2996:44"><call pos:start="2996:17" pos:end="2996:44"><name pos:start="2996:17" pos:end="2996:33">gen_op_mov_TN_reg</name><argument_list pos:start="2996:34" pos:end="2996:44">(<argument pos:start="2996:35" pos:end="2996:36"><expr pos:start="2996:35" pos:end="2996:36"><name pos:start="2996:35" pos:end="2996:36">ot</name></expr></argument>, <argument pos:start="2996:39" pos:end="2996:39"><expr pos:start="2996:39" pos:end="2996:39"><literal type="number" pos:start="2996:39" pos:end="2996:39">0</literal></expr></argument>, <argument pos:start="2996:42" pos:end="2996:43"><expr pos:start="2996:42" pos:end="2996:43"><name pos:start="2996:42" pos:end="2996:43">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2997:17" pos:end="2997:78"><expr pos:start="2997:17" pos:end="2997:77"><call pos:start="2997:17" pos:end="2997:77"><name pos:start="2997:17" pos:end="2997:38">gen_helper_movl_drN_T0</name><argument_list pos:start="2997:39" pos:end="2997:77">(<argument pos:start="2997:40" pos:end="2997:46"><expr pos:start="2997:40" pos:end="2997:46"><name pos:start="2997:40" pos:end="2997:46">cpu_env</name></expr></argument>, <argument pos:start="2997:49" pos:end="2997:66"><expr pos:start="2997:49" pos:end="2997:66"><call pos:start="2997:49" pos:end="2997:66"><name pos:start="2997:49" pos:end="2997:61">tcg_const_i32</name><argument_list pos:start="2997:62" pos:end="2997:66">(<argument pos:start="2997:63" pos:end="2997:65"><expr pos:start="2997:63" pos:end="2997:65"><name pos:start="2997:63" pos:end="2997:65">reg</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="2997:69" pos:end="2997:76"><expr pos:start="2997:69" pos:end="2997:76"><name pos:start="2997:69" pos:end="2997:76"><name pos:start="2997:69" pos:end="2997:73">cpu_T</name><index pos:start="2997:74" pos:end="2997:76">[<expr pos:start="2997:75" pos:end="2997:75"><literal type="number" pos:start="2997:75" pos:end="2997:75">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2998:17" pos:end="2998:47"><expr pos:start="2998:17" pos:end="2998:46"><call pos:start="2998:17" pos:end="2998:46"><name pos:start="2998:17" pos:end="2998:26">gen_jmp_im</name><argument_list pos:start="2998:27" pos:end="2998:46">(<argument pos:start="2998:28" pos:end="2998:45"><expr pos:start="2998:28" pos:end="2998:45"><name pos:start="2998:28" pos:end="2998:32"><name pos:start="2998:28" pos:end="2998:28">s</name><operator pos:start="2998:29" pos:end="2998:30">-&gt;</operator><name pos:start="2998:31" pos:end="2998:32">pc</name></name> <operator pos:start="2998:34" pos:end="2998:34">-</operator> <name pos:start="2998:36" pos:end="2998:45"><name pos:start="2998:36" pos:end="2998:36">s</name><operator pos:start="2998:37" pos:end="2998:38">-&gt;</operator><name pos:start="2998:39" pos:end="2998:45">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2999:17" pos:end="2999:27"><expr pos:start="2999:17" pos:end="2999:26"><call pos:start="2999:17" pos:end="2999:26"><name pos:start="2999:17" pos:end="2999:23">gen_eob</name><argument_list pos:start="2999:24" pos:end="2999:26">(<argument pos:start="2999:25" pos:end="2999:25"><expr pos:start="2999:25" pos:end="2999:25"><name pos:start="2999:25" pos:end="2999:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="3000:15" pos:end="3141:17">else <block pos:start="3000:20" pos:end="3141:17">{<block_content pos:start="3001:17" pos:end="3141:17">
                <expr_stmt pos:start="3001:17" pos:end="3001:78"><expr pos:start="3001:17" pos:end="3001:77"><call pos:start="3001:17" pos:end="3001:77"><name pos:start="3001:17" pos:end="3001:39">gen_svm_check_intercept</name><argument_list pos:start="3001:40" pos:end="3001:77">(<argument pos:start="3001:41" pos:end="3001:41"><expr pos:start="3001:41" pos:end="3001:41"><name pos:start="3001:41" pos:end="3001:41">s</name></expr></argument>, <argument pos:start="3001:44" pos:end="3001:51"><expr pos:start="3001:44" pos:end="3001:51"><name pos:start="3001:44" pos:end="3001:51">pc_start</name></expr></argument>, <argument pos:start="3001:54" pos:end="3001:76"><expr pos:start="3001:54" pos:end="3001:76"><name pos:start="3001:54" pos:end="3001:70">SVM_EXIT_READ_DR0</name> <operator pos:start="3001:72" pos:end="3001:72">+</operator> <name pos:start="3001:74" pos:end="3001:76">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="3002:17" pos:end="3002:80"><expr pos:start="3002:17" pos:end="3002:79"><call pos:start="3002:17" pos:end="3002:79"><name pos:start="3002:17" pos:end="3002:29">tcg_gen_ld_tl</name><argument_list pos:start="3002:30" pos:end="3002:79">(<argument pos:start="3002:31" pos:end="3002:38"><expr pos:start="3002:31" pos:end="3002:38"><name pos:start="3002:31" pos:end="3002:38"><name pos:start="3002:31" pos:end="3002:35">cpu_T</name><index pos:start="3002:36" pos:end="3002:38">[<expr pos:start="3002:37" pos:end="3002:37"><literal type="number" pos:start="3002:37" pos:end="3002:37">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="3002:41" pos:end="3002:47"><expr pos:start="3002:41" pos:end="3002:47"><name pos:start="3002:41" pos:end="3002:47">cpu_env</name></expr></argument>, <argument pos:start="3002:50" pos:end="3002:78"><expr pos:start="3002:50" pos:end="3002:78"><call pos:start="3002:50" pos:end="3002:78"><name pos:start="3002:50" pos:end="3002:57">offsetof</name><argument_list pos:start="3002:58" pos:end="3002:78">(<argument pos:start="3002:59" pos:end="3002:69"><expr pos:start="3002:59" pos:end="3002:69"><name pos:start="3002:59" pos:end="3002:69">CPUX86State</name></expr></argument>,<argument pos:start="3002:71" pos:end="3002:77"><expr pos:start="3002:71" pos:end="3002:77"><name pos:start="3002:71" pos:end="3002:77"><name pos:start="3002:71" pos:end="3002:72">dr</name><index pos:start="3002:73" pos:end="3002:77">[<expr pos:start="3002:74" pos:end="3002:76"><name pos:start="3002:74" pos:end="3002:76">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="3003:17" pos:end="3003:42"><expr pos:start="3003:17" pos:end="3003:41"><call pos:start="3003:17" pos:end="3003:41"><name pos:start="3003:17" pos:end="3003:33">gen_op_mov_reg_T0</name><argument_list pos:start="3003:34" pos:end="3003:41">(<argument pos:start="3003:35" pos:end="3003:36"><expr pos:start="3003:35" pos:end="3003:36"><name pos:start="3003:35" pos:end="3003:36">ot</name></expr></argument>, <argument pos:start="3003:39" pos:end="3003:40"><expr pos:start="3003:39" pos:end="3003:40"><name pos:start="3003:39" pos:end="3003:40">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="3004:9" pos:end="3004:14">break;</break>
    <case pos:start="3005:5" pos:end="3005:15">case <expr pos:start="3005:10" pos:end="3005:14"><literal type="number" pos:start="3005:10" pos:end="3005:14">0x106</literal></expr>:</case> <comment type="block" pos:start="3005:17" pos:end="3005:26">/* clts */</comment>
        <if_stmt pos:start="3006:9" pos:end="3141:17"><if pos:start="3006:9" pos:end="3008:9">if <condition pos:start="3006:12" pos:end="3006:24">(<expr pos:start="3006:13" pos:end="3006:23"><name pos:start="3006:13" pos:end="3006:18"><name pos:start="3006:13" pos:end="3006:13">s</name><operator pos:start="3006:14" pos:end="3006:15">-&gt;</operator><name pos:start="3006:16" pos:end="3006:18">cpl</name></name> <operator pos:start="3006:20" pos:end="3006:21">!=</operator> <literal type="number" pos:start="3006:23" pos:end="3006:23">0</literal></expr>)</condition> <block pos:start="3006:26" pos:end="3008:9">{<block_content pos:start="3007:13" pos:end="3007:64">
            <expr_stmt pos:start="3007:13" pos:end="3007:64"><expr pos:start="3007:13" pos:end="3007:63"><call pos:start="3007:13" pos:end="3007:63"><name pos:start="3007:13" pos:end="3007:25">gen_exception</name><argument_list pos:start="3007:26" pos:end="3007:63">(<argument pos:start="3007:27" pos:end="3007:27"><expr pos:start="3007:27" pos:end="3007:27"><name pos:start="3007:27" pos:end="3007:27">s</name></expr></argument>, <argument pos:start="3007:30" pos:end="3007:39"><expr pos:start="3007:30" pos:end="3007:39"><name pos:start="3007:30" pos:end="3007:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="3007:42" pos:end="3007:62"><expr pos:start="3007:42" pos:end="3007:62"><name pos:start="3007:42" pos:end="3007:49">pc_start</name> <operator pos:start="3007:51" pos:end="3007:51">-</operator> <name pos:start="3007:53" pos:end="3007:62"><name pos:start="3007:53" pos:end="3007:53">s</name><operator pos:start="3007:54" pos:end="3007:55">-&gt;</operator><name pos:start="3007:56" pos:end="3007:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="3008:11" pos:end="3141:17">else <block pos:start="3008:16" pos:end="3141:17">{<block_content pos:start="3009:13" pos:end="3141:17">
            <expr_stmt pos:start="3009:13" pos:end="3009:69"><expr pos:start="3009:13" pos:end="3009:68"><call pos:start="3009:13" pos:end="3009:68"><name pos:start="3009:13" pos:end="3009:35">gen_svm_check_intercept</name><argument_list pos:start="3009:36" pos:end="3009:68">(<argument pos:start="3009:37" pos:end="3009:37"><expr pos:start="3009:37" pos:end="3009:37"><name pos:start="3009:37" pos:end="3009:37">s</name></expr></argument>, <argument pos:start="3009:40" pos:end="3009:47"><expr pos:start="3009:40" pos:end="3009:47"><name pos:start="3009:40" pos:end="3009:47">pc_start</name></expr></argument>, <argument pos:start="3009:50" pos:end="3009:67"><expr pos:start="3009:50" pos:end="3009:67"><name pos:start="3009:50" pos:end="3009:67">SVM_EXIT_WRITE_CR0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="3010:13" pos:end="3010:37"><expr pos:start="3010:13" pos:end="3010:36"><call pos:start="3010:13" pos:end="3010:36"><name pos:start="3010:13" pos:end="3010:27">gen_helper_clts</name><argument_list pos:start="3010:28" pos:end="3010:36">(<argument pos:start="3010:29" pos:end="3010:35"><expr pos:start="3010:29" pos:end="3010:35"><name pos:start="3010:29" pos:end="3010:35">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block" pos:start="3011:13" pos:end="3011:62">/* abort block because static cpu state changed */</comment>
            <expr_stmt pos:start="3012:13" pos:end="3012:43"><expr pos:start="3012:13" pos:end="3012:42"><call pos:start="3012:13" pos:end="3012:42"><name pos:start="3012:13" pos:end="3012:22">gen_jmp_im</name><argument_list pos:start="3012:23" pos:end="3012:42">(<argument pos:start="3012:24" pos:end="3012:41"><expr pos:start="3012:24" pos:end="3012:41"><name pos:start="3012:24" pos:end="3012:28"><name pos:start="3012:24" pos:end="3012:24">s</name><operator pos:start="3012:25" pos:end="3012:26">-&gt;</operator><name pos:start="3012:27" pos:end="3012:28">pc</name></name> <operator pos:start="3012:30" pos:end="3012:30">-</operator> <name pos:start="3012:32" pos:end="3012:41"><name pos:start="3012:32" pos:end="3012:32">s</name><operator pos:start="3012:33" pos:end="3012:34">-&gt;</operator><name pos:start="3012:35" pos:end="3012:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="3013:13" pos:end="3013:23"><expr pos:start="3013:13" pos:end="3013:22"><call pos:start="3013:13" pos:end="3013:22"><name pos:start="3013:13" pos:end="3013:19">gen_eob</name><argument_list pos:start="3013:20" pos:end="3013:22">(<argument pos:start="3013:21" pos:end="3013:21"><expr pos:start="3013:21" pos:end="3013:21"><name pos:start="3013:21" pos:end="3013:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="3014:9" pos:end="3014:14">break;</break>
    <comment type="block" pos:start="3015:5" pos:end="3015:53">/* MMX/3DNow!/SSE/SSE2/SSE3/SSSE3/SSE4 support */</comment>
    <case pos:start="3016:5" pos:end="3016:15">case <expr pos:start="3016:10" pos:end="3016:14"><literal type="number" pos:start="3016:10" pos:end="3016:14">0x1c3</literal></expr>:</case> <comment type="block" pos:start="3016:17" pos:end="3016:37">/* MOVNTI reg, mem */</comment>
        <if_stmt pos:start="3017:9" pos:end="3018:47"><if pos:start="3017:9" pos:end="3018:47">if <condition pos:start="3017:12" pos:end="3017:46">(<expr pos:start="3017:13" pos:end="3017:45"><operator pos:start="3017:13" pos:end="3017:13">!</operator><operator pos:start="3017:14" pos:end="3017:14">(</operator><name pos:start="3017:15" pos:end="3017:31"><name pos:start="3017:15" pos:end="3017:15">s</name><operator pos:start="3017:16" pos:end="3017:17">-&gt;</operator><name pos:start="3017:18" pos:end="3017:31">cpuid_features</name></name> <operator pos:start="3017:33" pos:end="3017:33">&amp;</operator> <name pos:start="3017:35" pos:end="3017:44">CPUID_SSE2</name><operator pos:start="3017:45" pos:end="3017:45">)</operator></expr>)</condition><block type="pseudo" pos:start="3018:9" pos:end="3018:47"><block_content pos:start="3018:9" pos:end="3018:47">
        <expr_stmt pos:start="3018:9" pos:end="3018:47"><expr pos:start="3018:9" pos:end="3018:46"><name pos:start="3018:9" pos:end="3018:10">ot</name> <operator pos:start="3018:12" pos:end="3018:12">=</operator> <ternary pos:start="3018:14" pos:end="3018:46"><condition pos:start="3018:14" pos:end="3018:28"><expr pos:start="3018:14" pos:end="3018:26"><name pos:start="3018:14" pos:end="3018:21"><name pos:start="3018:14" pos:end="3018:14">s</name><operator pos:start="3018:15" pos:end="3018:16">-&gt;</operator><name pos:start="3018:17" pos:end="3018:21">dflag</name></name> <operator pos:start="3018:23" pos:end="3018:24">==</operator> <literal type="number" pos:start="3018:26" pos:end="3018:26">2</literal></expr> ?</condition><then pos:start="3018:30" pos:end="3018:36"> <expr pos:start="3018:30" pos:end="3018:36"><name pos:start="3018:30" pos:end="3018:36">OT_QUAD</name></expr> </then><else pos:start="3018:38" pos:end="3018:46">: <expr pos:start="3018:40" pos:end="3018:46"><name pos:start="3018:40" pos:end="3018:46">OT_LONG</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="3019:9" pos:end="3019:44"><expr pos:start="3019:9" pos:end="3019:43"><name pos:start="3019:9" pos:end="3019:13">modrm</name> <operator pos:start="3019:15" pos:end="3019:15">=</operator> <call pos:start="3019:17" pos:end="3019:43"><name pos:start="3019:17" pos:end="3019:29">cpu_ldub_code</name><argument_list pos:start="3019:30" pos:end="3019:43">(<argument pos:start="3019:31" pos:end="3019:33"><expr pos:start="3019:31" pos:end="3019:33"><name pos:start="3019:31" pos:end="3019:33">env</name></expr></argument>, <argument pos:start="3019:36" pos:end="3019:42"><expr pos:start="3019:36" pos:end="3019:42"><name pos:start="3019:36" pos:end="3019:40"><name pos:start="3019:36" pos:end="3019:36">s</name><operator pos:start="3019:37" pos:end="3019:38">-&gt;</operator><name pos:start="3019:39" pos:end="3019:40">pc</name></name><operator pos:start="3019:41" pos:end="3019:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="3020:9" pos:end="3020:31"><expr pos:start="3020:9" pos:end="3020:30"><name pos:start="3020:9" pos:end="3020:11">mod</name> <operator pos:start="3020:13" pos:end="3020:13">=</operator> <operator pos:start="3020:15" pos:end="3020:15">(</operator><name pos:start="3020:16" pos:end="3020:20">modrm</name> <operator pos:start="3020:22" pos:end="3020:23">&gt;&gt;</operator> <literal type="number" pos:start="3020:25" pos:end="3020:25">6</literal><operator pos:start="3020:26" pos:end="3020:26">)</operator> <operator pos:start="3020:28" pos:end="3020:28">&amp;</operator> <literal type="number" pos:start="3020:30" pos:end="3020:30">3</literal></expr>;</expr_stmt>
        <if_stmt pos:start="3021:9" pos:end="3022:41"><if pos:start="3021:9" pos:end="3022:41">if <condition pos:start="3021:12" pos:end="3021:21">(<expr pos:start="3021:13" pos:end="3021:20"><name pos:start="3021:13" pos:end="3021:15">mod</name> <operator pos:start="3021:17" pos:end="3021:18">==</operator> <literal type="number" pos:start="3021:20" pos:end="3021:20">3</literal></expr>)</condition><block type="pseudo" pos:start="3022:9" pos:end="3022:41"><block_content pos:start="3022:9" pos:end="3022:41">
        <expr_stmt pos:start="3022:9" pos:end="3022:41"><expr pos:start="3022:9" pos:end="3022:40"><name pos:start="3022:9" pos:end="3022:11">reg</name> <operator pos:start="3022:13" pos:end="3022:13">=</operator> <operator pos:start="3022:15" pos:end="3022:15">(</operator><operator pos:start="3022:16" pos:end="3022:16">(</operator><name pos:start="3022:17" pos:end="3022:21">modrm</name> <operator pos:start="3022:23" pos:end="3022:24">&gt;&gt;</operator> <literal type="number" pos:start="3022:26" pos:end="3022:26">3</literal><operator pos:start="3022:27" pos:end="3022:27">)</operator> <operator pos:start="3022:29" pos:end="3022:29">&amp;</operator> <literal type="number" pos:start="3022:31" pos:end="3022:31">7</literal><operator pos:start="3022:32" pos:end="3022:32">)</operator> <operator pos:start="3022:34" pos:end="3022:34">|</operator> <name pos:start="3022:36" pos:end="3022:40">rex_r</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <comment type="block" pos:start="3023:9" pos:end="3023:38">/* generate a generic store */</comment>
        <expr_stmt pos:start="3024:9" pos:end="3024:50"><expr pos:start="3024:9" pos:end="3024:49"><call pos:start="3024:9" pos:end="3024:49"><name pos:start="3024:9" pos:end="3024:22">gen_ldst_modrm</name><argument_list pos:start="3024:23" pos:end="3024:49">(<argument pos:start="3024:24" pos:end="3024:26"><expr pos:start="3024:24" pos:end="3024:26"><name pos:start="3024:24" pos:end="3024:26">env</name></expr></argument>, <argument pos:start="3024:29" pos:end="3024:29"><expr pos:start="3024:29" pos:end="3024:29"><name pos:start="3024:29" pos:end="3024:29">s</name></expr></argument>, <argument pos:start="3024:32" pos:end="3024:36"><expr pos:start="3024:32" pos:end="3024:36"><name pos:start="3024:32" pos:end="3024:36">modrm</name></expr></argument>, <argument pos:start="3024:39" pos:end="3024:40"><expr pos:start="3024:39" pos:end="3024:40"><name pos:start="3024:39" pos:end="3024:40">ot</name></expr></argument>, <argument pos:start="3024:43" pos:end="3024:45"><expr pos:start="3024:43" pos:end="3024:45"><name pos:start="3024:43" pos:end="3024:45">reg</name></expr></argument>, <argument pos:start="3024:48" pos:end="3024:48"><expr pos:start="3024:48" pos:end="3024:48"><literal type="number" pos:start="3024:48" pos:end="3024:48">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="3025:9" pos:end="3025:14">break;</break>
    <case pos:start="3026:5" pos:end="3026:15">case <expr pos:start="3026:10" pos:end="3026:14"><literal type="number" pos:start="3026:10" pos:end="3026:14">0x1ae</literal></expr>:</case>
        <expr_stmt pos:start="3027:9" pos:end="3027:44"><expr pos:start="3027:9" pos:end="3027:43"><name pos:start="3027:9" pos:end="3027:13">modrm</name> <operator pos:start="3027:15" pos:end="3027:15">=</operator> <call pos:start="3027:17" pos:end="3027:43"><name pos:start="3027:17" pos:end="3027:29">cpu_ldub_code</name><argument_list pos:start="3027:30" pos:end="3027:43">(<argument pos:start="3027:31" pos:end="3027:33"><expr pos:start="3027:31" pos:end="3027:33"><name pos:start="3027:31" pos:end="3027:33">env</name></expr></argument>, <argument pos:start="3027:36" pos:end="3027:42"><expr pos:start="3027:36" pos:end="3027:42"><name pos:start="3027:36" pos:end="3027:40"><name pos:start="3027:36" pos:end="3027:36">s</name><operator pos:start="3027:37" pos:end="3027:38">-&gt;</operator><name pos:start="3027:39" pos:end="3027:40">pc</name></name><operator pos:start="3027:41" pos:end="3027:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="3028:9" pos:end="3028:31"><expr pos:start="3028:9" pos:end="3028:30"><name pos:start="3028:9" pos:end="3028:11">mod</name> <operator pos:start="3028:13" pos:end="3028:13">=</operator> <operator pos:start="3028:15" pos:end="3028:15">(</operator><name pos:start="3028:16" pos:end="3028:20">modrm</name> <operator pos:start="3028:22" pos:end="3028:23">&gt;&gt;</operator> <literal type="number" pos:start="3028:25" pos:end="3028:25">6</literal><operator pos:start="3028:26" pos:end="3028:26">)</operator> <operator pos:start="3028:28" pos:end="3028:28">&amp;</operator> <literal type="number" pos:start="3028:30" pos:end="3028:30">3</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="3029:9" pos:end="3029:30"><expr pos:start="3029:9" pos:end="3029:29"><name pos:start="3029:9" pos:end="3029:10">op</name> <operator pos:start="3029:12" pos:end="3029:12">=</operator> <operator pos:start="3029:14" pos:end="3029:14">(</operator><name pos:start="3029:15" pos:end="3029:19">modrm</name> <operator pos:start="3029:21" pos:end="3029:22">&gt;&gt;</operator> <literal type="number" pos:start="3029:24" pos:end="3029:24">3</literal><operator pos:start="3029:25" pos:end="3029:25">)</operator> <operator pos:start="3029:27" pos:end="3029:27">&amp;</operator> <literal type="number" pos:start="3029:29" pos:end="3029:29">7</literal></expr>;</expr_stmt>
        <switch pos:start="3030:9" pos:end="3141:17">switch<condition pos:start="3030:15" pos:end="3030:18">(<expr pos:start="3030:16" pos:end="3030:17"><name pos:start="3030:16" pos:end="3030:17">op</name></expr>)</condition> <block pos:start="3030:20" pos:end="3141:17">{<block_content pos:start="3031:9" pos:end="3141:17">
        <case pos:start="3031:9" pos:end="3031:15">case <expr pos:start="3031:14" pos:end="3031:14"><literal type="number" pos:start="3031:14" pos:end="3031:14">0</literal></expr>:</case> <comment type="block" pos:start="3031:17" pos:end="3031:28">/* fxsave */</comment>
            <if_stmt pos:start="3032:13" pos:end="3141:17"><if pos:start="3032:13" pos:end="3141:17">if <condition pos:start="3032:16" pos:end="3033:42">(<expr pos:start="3032:17" pos:end="3033:41"><name pos:start="3032:17" pos:end="3032:19">mod</name> <operator pos:start="3032:21" pos:end="3032:22">==</operator> <literal type="number" pos:start="3032:24" pos:end="3032:24">3</literal> <operator pos:start="3032:26" pos:end="3032:27">||</operator> <operator pos:start="3032:29" pos:end="3032:29">!</operator><operator pos:start="3032:30" pos:end="3032:30">(</operator><name pos:start="3032:31" pos:end="3032:47"><name pos:start="3032:31" pos:end="3032:31">s</name><operator pos:start="3032:32" pos:end="3032:33">-&gt;</operator><name pos:start="3032:34" pos:end="3032:47">cpuid_features</name></name> <operator pos:start="3032:49" pos:end="3032:49">&amp;</operator> <name pos:start="3032:51" pos:end="3032:60">CPUID_FXSR</name><operator pos:start="3032:61" pos:end="3032:61">)</operator> <operator pos:start="3032:63" pos:end="3032:64">||</operator>
                <operator pos:start="3033:17" pos:end="3033:17">(</operator><name pos:start="3033:18" pos:end="3033:26"><name pos:start="3033:18" pos:end="3033:18">s</name><operator pos:start="3033:19" pos:end="3033:20">-&gt;</operator><name pos:start="3033:21" pos:end="3033:26">prefix</name></name> <operator pos:start="3033:28" pos:end="3033:28">&amp;</operator> <name pos:start="3033:30" pos:end="3033:40">PREFIX_LOCK</name><operator pos:start="3033:41" pos:end="3033:41">)</operator></expr>)</condition><block type="pseudo" pos:start="3034:13" pos:end="3141:17"><block_content pos:start="3034:13" pos:end="3141:17">
            <if_stmt pos:start="3034:13" pos:end="3141:17"><if pos:start="3034:13" pos:end="3141:17">if <condition pos:start="3034:16" pos:end="3034:67">(<expr pos:start="3034:17" pos:end="3034:66"><operator pos:start="3034:17" pos:end="3034:17">(</operator><name pos:start="3034:18" pos:end="3034:25"><name pos:start="3034:18" pos:end="3034:18">s</name><operator pos:start="3034:19" pos:end="3034:20">-&gt;</operator><name pos:start="3034:21" pos:end="3034:25">flags</name></name> <operator pos:start="3034:27" pos:end="3034:27">&amp;</operator> <name pos:start="3034:29" pos:end="3034:38">HF_EM_MASK</name><operator pos:start="3034:39" pos:end="3034:39">)</operator> <operator pos:start="3034:41" pos:end="3034:42">||</operator> <operator pos:start="3034:44" pos:end="3034:44">(</operator><name pos:start="3034:45" pos:end="3034:52"><name pos:start="3034:45" pos:end="3034:45">s</name><operator pos:start="3034:46" pos:end="3034:47">-&gt;</operator><name pos:start="3034:48" pos:end="3034:52">flags</name></name> <operator pos:start="3034:54" pos:end="3034:54">&amp;</operator> <name pos:start="3034:56" pos:end="3034:65">HF_TS_MASK</name><operator pos:start="3034:66" pos:end="3034:66">)</operator></expr>)</condition> <block pos:start="3034:69" pos:end="3141:17">{<block_content pos:start="3035:17" pos:end="3141:17">
                <expr_stmt pos:start="3035:17" pos:end="3035:69"><expr pos:start="3035:17" pos:end="3035:68"><call pos:start="3035:17" pos:end="3035:68"><name pos:start="3035:17" pos:end="3035:29">gen_exception</name><argument_list pos:start="3035:30" pos:end="3035:68">(<argument pos:start="3035:31" pos:end="3035:31"><expr pos:start="3035:31" pos:end="3035:31"><name pos:start="3035:31" pos:end="3035:31">s</name></expr></argument>, <argument pos:start="3035:34" pos:end="3035:44"><expr pos:start="3035:34" pos:end="3035:44"><name pos:start="3035:34" pos:end="3035:44">EXCP07_PREX</name></expr></argument>, <argument pos:start="3035:47" pos:end="3035:67"><expr pos:start="3035:47" pos:end="3035:67"><name pos:start="3035:47" pos:end="3035:54">pc_start</name> <operator pos:start="3035:56" pos:end="3035:56">-</operator> <name pos:start="3035:58" pos:end="3035:67"><name pos:start="3035:58" pos:end="3035:58">s</name><operator pos:start="3035:59" pos:end="3035:60">-&gt;</operator><name pos:start="3035:61" pos:end="3035:67">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="3036:17" pos:end="3036:22">break;</break>
            <expr_stmt pos:start="3037:13" pos:end="3037:66"><expr pos:start="3037:13" pos:end="3037:65"><call pos:start="3037:13" pos:end="3037:65"><name pos:start="3037:13" pos:end="3037:25">gen_lea_modrm</name><argument_list pos:start="3037:26" pos:end="3037:65">(<argument pos:start="3037:27" pos:end="3037:29"><expr pos:start="3037:27" pos:end="3037:29"><name pos:start="3037:27" pos:end="3037:29">env</name></expr></argument>, <argument pos:start="3037:32" pos:end="3037:32"><expr pos:start="3037:32" pos:end="3037:32"><name pos:start="3037:32" pos:end="3037:32">s</name></expr></argument>, <argument pos:start="3037:35" pos:end="3037:39"><expr pos:start="3037:35" pos:end="3037:39"><name pos:start="3037:35" pos:end="3037:39">modrm</name></expr></argument>, <argument pos:start="3037:42" pos:end="3037:50"><expr pos:start="3037:42" pos:end="3037:50"><operator pos:start="3037:42" pos:end="3037:42">&amp;</operator><name pos:start="3037:43" pos:end="3037:50">reg_addr</name></expr></argument>, <argument pos:start="3037:53" pos:end="3037:64"><expr pos:start="3037:53" pos:end="3037:64"><operator pos:start="3037:53" pos:end="3037:53">&amp;</operator><name pos:start="3037:54" pos:end="3037:64">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="3038:13" pos:end="3038:32"><expr pos:start="3038:13" pos:end="3038:31"><call pos:start="3038:13" pos:end="3038:31"><name pos:start="3038:13" pos:end="3038:28">gen_update_cc_op</name><argument_list pos:start="3038:29" pos:end="3038:31">(<argument pos:start="3038:30" pos:end="3038:30"><expr pos:start="3038:30" pos:end="3038:30"><name pos:start="3038:30" pos:end="3038:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="3039:13" pos:end="3039:46"><expr pos:start="3039:13" pos:end="3039:45"><call pos:start="3039:13" pos:end="3039:45"><name pos:start="3039:13" pos:end="3039:22">gen_jmp_im</name><argument_list pos:start="3039:23" pos:end="3039:45">(<argument pos:start="3039:24" pos:end="3039:44"><expr pos:start="3039:24" pos:end="3039:44"><name pos:start="3039:24" pos:end="3039:31">pc_start</name> <operator pos:start="3039:33" pos:end="3039:33">-</operator> <name pos:start="3039:35" pos:end="3039:44"><name pos:start="3039:35" pos:end="3039:35">s</name><operator pos:start="3039:36" pos:end="3039:37">-&gt;</operator><name pos:start="3039:38" pos:end="3039:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="3040:13" pos:end="3040:79"><expr pos:start="3040:13" pos:end="3040:78"><call pos:start="3040:13" pos:end="3040:78"><name pos:start="3040:13" pos:end="3040:29">gen_helper_fxsave</name><argument_list pos:start="3040:30" pos:end="3040:78">(<argument pos:start="3040:31" pos:end="3040:37"><expr pos:start="3040:31" pos:end="3040:37"><name pos:start="3040:31" pos:end="3040:37">cpu_env</name></expr></argument>, <argument pos:start="3040:40" pos:end="3040:45"><expr pos:start="3040:40" pos:end="3040:45"><name pos:start="3040:40" pos:end="3040:45">cpu_A0</name></expr></argument>, <argument pos:start="3040:48" pos:end="3040:77"><expr pos:start="3040:48" pos:end="3040:77"><call pos:start="3040:48" pos:end="3040:77"><name pos:start="3040:48" pos:end="3040:60">tcg_const_i32</name><argument_list pos:start="3040:61" pos:end="3040:77">(<argument pos:start="3040:62" pos:end="3040:76"><expr pos:start="3040:62" pos:end="3040:76"><operator pos:start="3040:62" pos:end="3040:62">(</operator><name pos:start="3040:63" pos:end="3040:70"><name pos:start="3040:63" pos:end="3040:63">s</name><operator pos:start="3040:64" pos:end="3040:65">-&gt;</operator><name pos:start="3040:66" pos:end="3040:70">dflag</name></name> <operator pos:start="3040:72" pos:end="3040:73">==</operator> <literal type="number" pos:start="3040:75" pos:end="3040:75">2</literal><operator pos:start="3040:76" pos:end="3040:76">)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="3041:13" pos:end="3041:18">break;</break>
        <case pos:start="3042:9" pos:end="3042:15">case <expr pos:start="3042:14" pos:end="3042:14"><literal type="number" pos:start="3042:14" pos:end="3042:14">1</literal></expr>:</case> <comment type="block" pos:start="3042:17" pos:end="3042:29">/* fxrstor */</comment>
            <if_stmt pos:start="3043:13" pos:end="3141:17"><if pos:start="3043:13" pos:end="3141:17">if <condition pos:start="3043:16" pos:end="3044:42">(<expr pos:start="3043:17" pos:end="3044:41"><name pos:start="3043:17" pos:end="3043:19">mod</name> <operator pos:start="3043:21" pos:end="3043:22">==</operator> <literal type="number" pos:start="3043:24" pos:end="3043:24">3</literal> <operator pos:start="3043:26" pos:end="3043:27">||</operator> <operator pos:start="3043:29" pos:end="3043:29">!</operator><operator pos:start="3043:30" pos:end="3043:30">(</operator><name pos:start="3043:31" pos:end="3043:47"><name pos:start="3043:31" pos:end="3043:31">s</name><operator pos:start="3043:32" pos:end="3043:33">-&gt;</operator><name pos:start="3043:34" pos:end="3043:47">cpuid_features</name></name> <operator pos:start="3043:49" pos:end="3043:49">&amp;</operator> <name pos:start="3043:51" pos:end="3043:60">CPUID_FXSR</name><operator pos:start="3043:61" pos:end="3043:61">)</operator> <operator pos:start="3043:63" pos:end="3043:64">||</operator>
                <operator pos:start="3044:17" pos:end="3044:17">(</operator><name pos:start="3044:18" pos:end="3044:26"><name pos:start="3044:18" pos:end="3044:18">s</name><operator pos:start="3044:19" pos:end="3044:20">-&gt;</operator><name pos:start="3044:21" pos:end="3044:26">prefix</name></name> <operator pos:start="3044:28" pos:end="3044:28">&amp;</operator> <name pos:start="3044:30" pos:end="3044:40">PREFIX_LOCK</name><operator pos:start="3044:41" pos:end="3044:41">)</operator></expr>)</condition><block type="pseudo" pos:start="3045:13" pos:end="3141:17"><block_content pos:start="3045:13" pos:end="3141:17">
            <if_stmt pos:start="3045:13" pos:end="3141:17"><if pos:start="3045:13" pos:end="3141:17">if <condition pos:start="3045:16" pos:end="3045:67">(<expr pos:start="3045:17" pos:end="3045:66"><operator pos:start="3045:17" pos:end="3045:17">(</operator><name pos:start="3045:18" pos:end="3045:25"><name pos:start="3045:18" pos:end="3045:18">s</name><operator pos:start="3045:19" pos:end="3045:20">-&gt;</operator><name pos:start="3045:21" pos:end="3045:25">flags</name></name> <operator pos:start="3045:27" pos:end="3045:27">&amp;</operator> <name pos:start="3045:29" pos:end="3045:38">HF_EM_MASK</name><operator pos:start="3045:39" pos:end="3045:39">)</operator> <operator pos:start="3045:41" pos:end="3045:42">||</operator> <operator pos:start="3045:44" pos:end="3045:44">(</operator><name pos:start="3045:45" pos:end="3045:52"><name pos:start="3045:45" pos:end="3045:45">s</name><operator pos:start="3045:46" pos:end="3045:47">-&gt;</operator><name pos:start="3045:48" pos:end="3045:52">flags</name></name> <operator pos:start="3045:54" pos:end="3045:54">&amp;</operator> <name pos:start="3045:56" pos:end="3045:65">HF_TS_MASK</name><operator pos:start="3045:66" pos:end="3045:66">)</operator></expr>)</condition> <block pos:start="3045:69" pos:end="3141:17">{<block_content pos:start="3046:17" pos:end="3141:17">
                <expr_stmt pos:start="3046:17" pos:end="3046:69"><expr pos:start="3046:17" pos:end="3046:68"><call pos:start="3046:17" pos:end="3046:68"><name pos:start="3046:17" pos:end="3046:29">gen_exception</name><argument_list pos:start="3046:30" pos:end="3046:68">(<argument pos:start="3046:31" pos:end="3046:31"><expr pos:start="3046:31" pos:end="3046:31"><name pos:start="3046:31" pos:end="3046:31">s</name></expr></argument>, <argument pos:start="3046:34" pos:end="3046:44"><expr pos:start="3046:34" pos:end="3046:44"><name pos:start="3046:34" pos:end="3046:44">EXCP07_PREX</name></expr></argument>, <argument pos:start="3046:47" pos:end="3046:67"><expr pos:start="3046:47" pos:end="3046:67"><name pos:start="3046:47" pos:end="3046:54">pc_start</name> <operator pos:start="3046:56" pos:end="3046:56">-</operator> <name pos:start="3046:58" pos:end="3046:67"><name pos:start="3046:58" pos:end="3046:58">s</name><operator pos:start="3046:59" pos:end="3046:60">-&gt;</operator><name pos:start="3046:61" pos:end="3046:67">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="3047:17" pos:end="3047:22">break;</break>
            <expr_stmt pos:start="3048:13" pos:end="3048:66"><expr pos:start="3048:13" pos:end="3048:65"><call pos:start="3048:13" pos:end="3048:65"><name pos:start="3048:13" pos:end="3048:25">gen_lea_modrm</name><argument_list pos:start="3048:26" pos:end="3048:65">(<argument pos:start="3048:27" pos:end="3048:29"><expr pos:start="3048:27" pos:end="3048:29"><name pos:start="3048:27" pos:end="3048:29">env</name></expr></argument>, <argument pos:start="3048:32" pos:end="3048:32"><expr pos:start="3048:32" pos:end="3048:32"><name pos:start="3048:32" pos:end="3048:32">s</name></expr></argument>, <argument pos:start="3048:35" pos:end="3048:39"><expr pos:start="3048:35" pos:end="3048:39"><name pos:start="3048:35" pos:end="3048:39">modrm</name></expr></argument>, <argument pos:start="3048:42" pos:end="3048:50"><expr pos:start="3048:42" pos:end="3048:50"><operator pos:start="3048:42" pos:end="3048:42">&amp;</operator><name pos:start="3048:43" pos:end="3048:50">reg_addr</name></expr></argument>, <argument pos:start="3048:53" pos:end="3048:64"><expr pos:start="3048:53" pos:end="3048:64"><operator pos:start="3048:53" pos:end="3048:53">&amp;</operator><name pos:start="3048:54" pos:end="3048:64">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="3049:13" pos:end="3049:32"><expr pos:start="3049:13" pos:end="3049:31"><call pos:start="3049:13" pos:end="3049:31"><name pos:start="3049:13" pos:end="3049:28">gen_update_cc_op</name><argument_list pos:start="3049:29" pos:end="3049:31">(<argument pos:start="3049:30" pos:end="3049:30"><expr pos:start="3049:30" pos:end="3049:30"><name pos:start="3049:30" pos:end="3049:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="3050:13" pos:end="3050:46"><expr pos:start="3050:13" pos:end="3050:45"><call pos:start="3050:13" pos:end="3050:45"><name pos:start="3050:13" pos:end="3050:22">gen_jmp_im</name><argument_list pos:start="3050:23" pos:end="3050:45">(<argument pos:start="3050:24" pos:end="3050:44"><expr pos:start="3050:24" pos:end="3050:44"><name pos:start="3050:24" pos:end="3050:31">pc_start</name> <operator pos:start="3050:33" pos:end="3050:33">-</operator> <name pos:start="3050:35" pos:end="3050:44"><name pos:start="3050:35" pos:end="3050:35">s</name><operator pos:start="3050:36" pos:end="3050:37">-&gt;</operator><name pos:start="3050:38" pos:end="3050:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="3051:13" pos:end="3052:63"><expr pos:start="3051:13" pos:end="3052:62"><call pos:start="3051:13" pos:end="3052:62"><name pos:start="3051:13" pos:end="3051:30">gen_helper_fxrstor</name><argument_list pos:start="3051:31" pos:end="3052:62">(<argument pos:start="3051:32" pos:end="3051:38"><expr pos:start="3051:32" pos:end="3051:38"><name pos:start="3051:32" pos:end="3051:38">cpu_env</name></expr></argument>, <argument pos:start="3051:41" pos:end="3051:46"><expr pos:start="3051:41" pos:end="3051:46"><name pos:start="3051:41" pos:end="3051:46">cpu_A0</name></expr></argument>,
                               <argument pos:start="3052:32" pos:end="3052:61"><expr pos:start="3052:32" pos:end="3052:61"><call pos:start="3052:32" pos:end="3052:61"><name pos:start="3052:32" pos:end="3052:44">tcg_const_i32</name><argument_list pos:start="3052:45" pos:end="3052:61">(<argument pos:start="3052:46" pos:end="3052:60"><expr pos:start="3052:46" pos:end="3052:60"><operator pos:start="3052:46" pos:end="3052:46">(</operator><name pos:start="3052:47" pos:end="3052:54"><name pos:start="3052:47" pos:end="3052:47">s</name><operator pos:start="3052:48" pos:end="3052:49">-&gt;</operator><name pos:start="3052:50" pos:end="3052:54">dflag</name></name> <operator pos:start="3052:56" pos:end="3052:57">==</operator> <literal type="number" pos:start="3052:59" pos:end="3052:59">2</literal><operator pos:start="3052:60" pos:end="3052:60">)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="3053:13" pos:end="3053:18">break;</break>
        <case pos:start="3054:9" pos:end="3054:15">case <expr pos:start="3054:14" pos:end="3054:14"><literal type="number" pos:start="3054:14" pos:end="3054:14">2</literal></expr>:</case> <comment type="block" pos:start="3054:17" pos:end="3054:29">/* ldmxcsr */</comment>
        <case pos:start="3055:9" pos:end="3055:15">case <expr pos:start="3055:14" pos:end="3055:14"><literal type="number" pos:start="3055:14" pos:end="3055:14">3</literal></expr>:</case> <comment type="block" pos:start="3055:17" pos:end="3055:29">/* stmxcsr */</comment>
            <if_stmt pos:start="3056:13" pos:end="3141:17"><if pos:start="3056:13" pos:end="3141:17">if <condition pos:start="3056:16" pos:end="3056:38">(<expr pos:start="3056:17" pos:end="3056:37"><name pos:start="3056:17" pos:end="3056:24"><name pos:start="3056:17" pos:end="3056:17">s</name><operator pos:start="3056:18" pos:end="3056:19">-&gt;</operator><name pos:start="3056:20" pos:end="3056:24">flags</name></name> <operator pos:start="3056:26" pos:end="3056:26">&amp;</operator> <name pos:start="3056:28" pos:end="3056:37">HF_TS_MASK</name></expr>)</condition> <block pos:start="3056:40" pos:end="3141:17">{<block_content pos:start="3057:17" pos:end="3141:17">
                <expr_stmt pos:start="3057:17" pos:end="3057:69"><expr pos:start="3057:17" pos:end="3057:68"><call pos:start="3057:17" pos:end="3057:68"><name pos:start="3057:17" pos:end="3057:29">gen_exception</name><argument_list pos:start="3057:30" pos:end="3057:68">(<argument pos:start="3057:31" pos:end="3057:31"><expr pos:start="3057:31" pos:end="3057:31"><name pos:start="3057:31" pos:end="3057:31">s</name></expr></argument>, <argument pos:start="3057:34" pos:end="3057:44"><expr pos:start="3057:34" pos:end="3057:44"><name pos:start="3057:34" pos:end="3057:44">EXCP07_PREX</name></expr></argument>, <argument pos:start="3057:47" pos:end="3057:67"><expr pos:start="3057:47" pos:end="3057:67"><name pos:start="3057:47" pos:end="3057:54">pc_start</name> <operator pos:start="3057:56" pos:end="3057:56">-</operator> <name pos:start="3057:58" pos:end="3057:67"><name pos:start="3057:58" pos:end="3057:58">s</name><operator pos:start="3057:59" pos:end="3057:60">-&gt;</operator><name pos:start="3057:61" pos:end="3057:67">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="3058:17" pos:end="3058:22">break;</break>
            <if_stmt pos:start="3059:13" pos:end="3061:66"><if pos:start="3059:13" pos:end="3061:66">if <condition pos:start="3059:16" pos:end="3060:25">(<expr pos:start="3059:17" pos:end="3060:24"><operator pos:start="3059:17" pos:end="3059:17">(</operator><name pos:start="3059:18" pos:end="3059:25"><name pos:start="3059:18" pos:end="3059:18">s</name><operator pos:start="3059:19" pos:end="3059:20">-&gt;</operator><name pos:start="3059:21" pos:end="3059:25">flags</name></name> <operator pos:start="3059:27" pos:end="3059:27">&amp;</operator> <name pos:start="3059:29" pos:end="3059:38">HF_EM_MASK</name><operator pos:start="3059:39" pos:end="3059:39">)</operator> <operator pos:start="3059:41" pos:end="3059:42">||</operator> <operator pos:start="3059:44" pos:end="3059:44">!</operator><operator pos:start="3059:45" pos:end="3059:45">(</operator><name pos:start="3059:46" pos:end="3059:53"><name pos:start="3059:46" pos:end="3059:46">s</name><operator pos:start="3059:47" pos:end="3059:48">-&gt;</operator><name pos:start="3059:49" pos:end="3059:53">flags</name></name> <operator pos:start="3059:55" pos:end="3059:55">&amp;</operator> <name pos:start="3059:57" pos:end="3059:70">HF_OSFXSR_MASK</name><operator pos:start="3059:71" pos:end="3059:71">)</operator> <operator pos:start="3059:73" pos:end="3059:74">||</operator>
                <name pos:start="3060:17" pos:end="3060:19">mod</name> <operator pos:start="3060:21" pos:end="3060:22">==</operator> <literal type="number" pos:start="3060:24" pos:end="3060:24">3</literal></expr>)</condition><block type="pseudo" pos:start="3061:13" pos:end="3061:66"><block_content pos:start="3061:13" pos:end="3061:66">
            <expr_stmt pos:start="3061:13" pos:end="3061:66"><expr pos:start="3061:13" pos:end="3061:65"><call pos:start="3061:13" pos:end="3061:65"><name pos:start="3061:13" pos:end="3061:25">gen_lea_modrm</name><argument_list pos:start="3061:26" pos:end="3061:65">(<argument pos:start="3061:27" pos:end="3061:29"><expr pos:start="3061:27" pos:end="3061:29"><name pos:start="3061:27" pos:end="3061:29">env</name></expr></argument>, <argument pos:start="3061:32" pos:end="3061:32"><expr pos:start="3061:32" pos:end="3061:32"><name pos:start="3061:32" pos:end="3061:32">s</name></expr></argument>, <argument pos:start="3061:35" pos:end="3061:39"><expr pos:start="3061:35" pos:end="3061:39"><name pos:start="3061:35" pos:end="3061:39">modrm</name></expr></argument>, <argument pos:start="3061:42" pos:end="3061:50"><expr pos:start="3061:42" pos:end="3061:50"><operator pos:start="3061:42" pos:end="3061:42">&amp;</operator><name pos:start="3061:43" pos:end="3061:50">reg_addr</name></expr></argument>, <argument pos:start="3061:53" pos:end="3061:64"><expr pos:start="3061:53" pos:end="3061:64"><operator pos:start="3061:53" pos:end="3061:53">&amp;</operator><name pos:start="3061:54" pos:end="3061:64">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt pos:start="3062:13" pos:end="3141:17"><if pos:start="3062:13" pos:end="3066:13">if <condition pos:start="3062:16" pos:end="3062:24">(<expr pos:start="3062:17" pos:end="3062:23"><name pos:start="3062:17" pos:end="3062:18">op</name> <operator pos:start="3062:20" pos:end="3062:21">==</operator> <literal type="number" pos:start="3062:23" pos:end="3062:23">2</literal></expr>)</condition> <block pos:start="3062:26" pos:end="3066:13">{<block_content pos:start="3063:17" pos:end="3065:58">
                <expr_stmt pos:start="3063:17" pos:end="3063:56"><expr pos:start="3063:17" pos:end="3063:55"><call pos:start="3063:17" pos:end="3063:55"><name pos:start="3063:17" pos:end="3063:31">gen_op_ld_T0_A0</name><argument_list pos:start="3063:32" pos:end="3063:55">(<argument pos:start="3063:33" pos:end="3063:54"><expr pos:start="3063:33" pos:end="3063:54"><name pos:start="3063:33" pos:end="3063:39">OT_LONG</name> <operator pos:start="3063:41" pos:end="3063:41">+</operator> <name pos:start="3063:43" pos:end="3063:54"><name pos:start="3063:43" pos:end="3063:43">s</name><operator pos:start="3063:44" pos:end="3063:45">-&gt;</operator><name pos:start="3063:46" pos:end="3063:54">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="3064:17" pos:end="3064:61"><expr pos:start="3064:17" pos:end="3064:60"><call pos:start="3064:17" pos:end="3064:60"><name pos:start="3064:17" pos:end="3064:36">tcg_gen_trunc_tl_i32</name><argument_list pos:start="3064:37" pos:end="3064:60">(<argument pos:start="3064:38" pos:end="3064:49"><expr pos:start="3064:38" pos:end="3064:49"><name pos:start="3064:38" pos:end="3064:49">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="3064:52" pos:end="3064:59"><expr pos:start="3064:52" pos:end="3064:59"><name pos:start="3064:52" pos:end="3064:59"><name pos:start="3064:52" pos:end="3064:56">cpu_T</name><index pos:start="3064:57" pos:end="3064:59">[<expr pos:start="3064:58" pos:end="3064:58"><literal type="number" pos:start="3064:58" pos:end="3064:58">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="3065:17" pos:end="3065:58"><expr pos:start="3065:17" pos:end="3065:57"><call pos:start="3065:17" pos:end="3065:57"><name pos:start="3065:17" pos:end="3065:34">gen_helper_ldmxcsr</name><argument_list pos:start="3065:35" pos:end="3065:57">(<argument pos:start="3065:36" pos:end="3065:42"><expr pos:start="3065:36" pos:end="3065:42"><name pos:start="3065:36" pos:end="3065:42">cpu_env</name></expr></argument>, <argument pos:start="3065:45" pos:end="3065:56"><expr pos:start="3065:45" pos:end="3065:56"><name pos:start="3065:45" pos:end="3065:56">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="3066:15" pos:end="3141:17">else <block pos:start="3066:20" pos:end="3141:17">{<block_content pos:start="3067:17" pos:end="3141:17">
                <expr_stmt pos:start="3067:17" pos:end="3067:82"><expr pos:start="3067:17" pos:end="3067:81"><call pos:start="3067:17" pos:end="3067:81"><name pos:start="3067:17" pos:end="3067:32">tcg_gen_ld32u_tl</name><argument_list pos:start="3067:33" pos:end="3067:81">(<argument pos:start="3067:34" pos:end="3067:41"><expr pos:start="3067:34" pos:end="3067:41"><name pos:start="3067:34" pos:end="3067:41"><name pos:start="3067:34" pos:end="3067:38">cpu_T</name><index pos:start="3067:39" pos:end="3067:41">[<expr pos:start="3067:40" pos:end="3067:40"><literal type="number" pos:start="3067:40" pos:end="3067:40">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="3067:44" pos:end="3067:50"><expr pos:start="3067:44" pos:end="3067:50"><name pos:start="3067:44" pos:end="3067:50">cpu_env</name></expr></argument>, <argument pos:start="3067:53" pos:end="3067:80"><expr pos:start="3067:53" pos:end="3067:80"><call pos:start="3067:53" pos:end="3067:80"><name pos:start="3067:53" pos:end="3067:60">offsetof</name><argument_list pos:start="3067:61" pos:end="3067:80">(<argument pos:start="3067:62" pos:end="3067:72"><expr pos:start="3067:62" pos:end="3067:72"><name pos:start="3067:62" pos:end="3067:72">CPUX86State</name></expr></argument>, <argument pos:start="3067:75" pos:end="3067:79"><expr pos:start="3067:75" pos:end="3067:79"><name pos:start="3067:75" pos:end="3067:79">mxcsr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="3068:17" pos:end="3068:56"><expr pos:start="3068:17" pos:end="3068:55"><call pos:start="3068:17" pos:end="3068:55"><name pos:start="3068:17" pos:end="3068:31">gen_op_st_T0_A0</name><argument_list pos:start="3068:32" pos:end="3068:55">(<argument pos:start="3068:33" pos:end="3068:54"><expr pos:start="3068:33" pos:end="3068:54"><name pos:start="3068:33" pos:end="3068:39">OT_LONG</name> <operator pos:start="3068:41" pos:end="3068:41">+</operator> <name pos:start="3068:43" pos:end="3068:54"><name pos:start="3068:43" pos:end="3068:43">s</name><operator pos:start="3068:44" pos:end="3068:45">-&gt;</operator><name pos:start="3068:46" pos:end="3068:54">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="3069:13" pos:end="3069:18">break;</break>
        <case pos:start="3070:9" pos:end="3070:15">case <expr pos:start="3070:14" pos:end="3070:14"><literal type="number" pos:start="3070:14" pos:end="3070:14">5</literal></expr>:</case> <comment type="block" pos:start="3070:17" pos:end="3070:28">/* lfence */</comment>
        <case pos:start="3071:9" pos:end="3071:15">case <expr pos:start="3071:14" pos:end="3071:14"><literal type="number" pos:start="3071:14" pos:end="3071:14">6</literal></expr>:</case> <comment type="block" pos:start="3071:17" pos:end="3071:28">/* mfence */</comment>
            <if_stmt pos:start="3072:13" pos:end="3073:18"><if pos:start="3072:13" pos:end="3073:18">if <condition pos:start="3072:16" pos:end="3072:76">(<expr pos:start="3072:17" pos:end="3072:75"><operator pos:start="3072:17" pos:end="3072:17">(</operator><name pos:start="3072:18" pos:end="3072:22">modrm</name> <operator pos:start="3072:24" pos:end="3072:24">&amp;</operator> <literal type="number" pos:start="3072:26" pos:end="3072:29">0xc7</literal><operator pos:start="3072:30" pos:end="3072:30">)</operator> <operator pos:start="3072:32" pos:end="3072:33">!=</operator> <literal type="number" pos:start="3072:35" pos:end="3072:38">0xc0</literal> <operator pos:start="3072:40" pos:end="3072:41">||</operator> <operator pos:start="3072:43" pos:end="3072:43">!</operator><operator pos:start="3072:44" pos:end="3072:44">(</operator><name pos:start="3072:45" pos:end="3072:61"><name pos:start="3072:45" pos:end="3072:45">s</name><operator pos:start="3072:46" pos:end="3072:47">-&gt;</operator><name pos:start="3072:48" pos:end="3072:61">cpuid_features</name></name> <operator pos:start="3072:63" pos:end="3072:63">&amp;</operator> <name pos:start="3072:65" pos:end="3072:74">CPUID_SSE2</name><operator pos:start="3072:75" pos:end="3072:75">)</operator></expr>)</condition><block type="pseudo" pos:start="3073:13" pos:end="3073:18"><block_content pos:start="3073:13" pos:end="3073:18">
            <break pos:start="3073:13" pos:end="3073:18">break;</break></block_content></block></if></if_stmt>
        <case pos:start="3074:9" pos:end="3074:15">case <expr pos:start="3074:14" pos:end="3074:14"><literal type="number" pos:start="3074:14" pos:end="3074:14">7</literal></expr>:</case> <comment type="block" pos:start="3074:17" pos:end="3074:38">/* sfence / clflush */</comment>
            <if_stmt pos:start="3075:13" pos:end="3141:17"><if pos:start="3075:13" pos:end="3079:13">if <condition pos:start="3075:16" pos:end="3075:39">(<expr pos:start="3075:17" pos:end="3075:38"><operator pos:start="3075:17" pos:end="3075:17">(</operator><name pos:start="3075:18" pos:end="3075:22">modrm</name> <operator pos:start="3075:24" pos:end="3075:24">&amp;</operator> <literal type="number" pos:start="3075:26" pos:end="3075:29">0xc7</literal><operator pos:start="3075:30" pos:end="3075:30">)</operator> <operator pos:start="3075:32" pos:end="3075:33">==</operator> <literal type="number" pos:start="3075:35" pos:end="3075:38">0xc0</literal></expr>)</condition> <block pos:start="3075:41" pos:end="3079:13">{<block_content pos:start="3078:17" pos:end="3078:53">
                <comment type="block" pos:start="3076:17" pos:end="3076:28">/* sfence */</comment>
                <comment type="block" pos:start="3077:17" pos:end="3077:79">/* XXX: also check for cpuid_ext2_features &amp; CPUID_EXT2_EMMX */</comment>
                <if_stmt pos:start="3078:17" pos:end="3078:53"><if pos:start="3078:17" pos:end="3078:53">if <condition pos:start="3078:20" pos:end="3078:53">(<expr pos:start="3078:21" pos:end="3078:52"><operator pos:start="3078:21" pos:end="3078:21">!</operator><operator pos:start="3078:22" pos:end="3078:22">(</operator><name pos:start="3078:23" pos:end="3078:39"><name pos:start="3078:23" pos:end="3078:23">s</name><operator pos:start="3078:24" pos:end="3078:25">-&gt;</operator><name pos:start="3078:26" pos:end="3078:39">cpuid_features</name></name> <operator pos:start="3078:41" pos:end="3078:41">&amp;</operator> <name pos:start="3078:43" pos:end="3078:51">CPUID_SSE</name><operator pos:start="3078:52" pos:end="3078:52">)</operator></expr>)</condition><block type="pseudo"><block_content/></block></if></if_stmt>
            </block_content>}</block></if> <else pos:start="3079:15" pos:end="3141:17">else <block pos:start="3079:20" pos:end="3141:17">{<block_content pos:start="3081:17" pos:end="3141:17">
                <comment type="block" pos:start="3080:17" pos:end="3080:29">/* clflush */</comment>
                <if_stmt pos:start="3081:17" pos:end="3082:70"><if pos:start="3081:17" pos:end="3082:70">if <condition pos:start="3081:20" pos:end="3081:57">(<expr pos:start="3081:21" pos:end="3081:56"><operator pos:start="3081:21" pos:end="3081:21">!</operator><operator pos:start="3081:22" pos:end="3081:22">(</operator><name pos:start="3081:23" pos:end="3081:39"><name pos:start="3081:23" pos:end="3081:23">s</name><operator pos:start="3081:24" pos:end="3081:25">-&gt;</operator><name pos:start="3081:26" pos:end="3081:39">cpuid_features</name></name> <operator pos:start="3081:41" pos:end="3081:41">&amp;</operator> <name pos:start="3081:43" pos:end="3081:55">CPUID_CLFLUSH</name><operator pos:start="3081:56" pos:end="3081:56">)</operator></expr>)</condition><block type="pseudo" pos:start="3082:17" pos:end="3082:70"><block_content pos:start="3082:17" pos:end="3082:70">
                <expr_stmt pos:start="3082:17" pos:end="3082:70"><expr pos:start="3082:17" pos:end="3082:69"><call pos:start="3082:17" pos:end="3082:69"><name pos:start="3082:17" pos:end="3082:29">gen_lea_modrm</name><argument_list pos:start="3082:30" pos:end="3082:69">(<argument pos:start="3082:31" pos:end="3082:33"><expr pos:start="3082:31" pos:end="3082:33"><name pos:start="3082:31" pos:end="3082:33">env</name></expr></argument>, <argument pos:start="3082:36" pos:end="3082:36"><expr pos:start="3082:36" pos:end="3082:36"><name pos:start="3082:36" pos:end="3082:36">s</name></expr></argument>, <argument pos:start="3082:39" pos:end="3082:43"><expr pos:start="3082:39" pos:end="3082:43"><name pos:start="3082:39" pos:end="3082:43">modrm</name></expr></argument>, <argument pos:start="3082:46" pos:end="3082:54"><expr pos:start="3082:46" pos:end="3082:54"><operator pos:start="3082:46" pos:end="3082:46">&amp;</operator><name pos:start="3082:47" pos:end="3082:54">reg_addr</name></expr></argument>, <argument pos:start="3082:57" pos:end="3082:68"><expr pos:start="3082:57" pos:end="3082:68"><operator pos:start="3082:57" pos:end="3082:57">&amp;</operator><name pos:start="3082:58" pos:end="3082:68">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <break pos:start="3083:13" pos:end="3083:18">break;</break>
        <default pos:start="3084:9" pos:end="3084:16">default:</default>
        <break pos:start="3085:9" pos:end="3085:14">break;</break>
    <case pos:start="3086:5" pos:end="3086:15">case <expr pos:start="3086:10" pos:end="3086:14"><literal type="number" pos:start="3086:10" pos:end="3086:14">0x10d</literal></expr>:</case> <comment type="block" pos:start="3086:17" pos:end="3086:40">/* 3DNow! prefetch(w) */</comment>
        <expr_stmt pos:start="3087:9" pos:end="3087:44"><expr pos:start="3087:9" pos:end="3087:43"><name pos:start="3087:9" pos:end="3087:13">modrm</name> <operator pos:start="3087:15" pos:end="3087:15">=</operator> <call pos:start="3087:17" pos:end="3087:43"><name pos:start="3087:17" pos:end="3087:29">cpu_ldub_code</name><argument_list pos:start="3087:30" pos:end="3087:43">(<argument pos:start="3087:31" pos:end="3087:33"><expr pos:start="3087:31" pos:end="3087:33"><name pos:start="3087:31" pos:end="3087:33">env</name></expr></argument>, <argument pos:start="3087:36" pos:end="3087:42"><expr pos:start="3087:36" pos:end="3087:42"><name pos:start="3087:36" pos:end="3087:40"><name pos:start="3087:36" pos:end="3087:36">s</name><operator pos:start="3087:37" pos:end="3087:38">-&gt;</operator><name pos:start="3087:39" pos:end="3087:40">pc</name></name><operator pos:start="3087:41" pos:end="3087:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="3088:9" pos:end="3088:31"><expr pos:start="3088:9" pos:end="3088:30"><name pos:start="3088:9" pos:end="3088:11">mod</name> <operator pos:start="3088:13" pos:end="3088:13">=</operator> <operator pos:start="3088:15" pos:end="3088:15">(</operator><name pos:start="3088:16" pos:end="3088:20">modrm</name> <operator pos:start="3088:22" pos:end="3088:23">&gt;&gt;</operator> <literal type="number" pos:start="3088:25" pos:end="3088:25">6</literal><operator pos:start="3088:26" pos:end="3088:26">)</operator> <operator pos:start="3088:28" pos:end="3088:28">&amp;</operator> <literal type="number" pos:start="3088:30" pos:end="3088:30">3</literal></expr>;</expr_stmt>
        <if_stmt pos:start="3089:9" pos:end="3090:62"><if pos:start="3089:9" pos:end="3090:62">if <condition pos:start="3089:12" pos:end="3089:21">(<expr pos:start="3089:13" pos:end="3089:20"><name pos:start="3089:13" pos:end="3089:15">mod</name> <operator pos:start="3089:17" pos:end="3089:18">==</operator> <literal type="number" pos:start="3089:20" pos:end="3089:20">3</literal></expr>)</condition><block type="pseudo" pos:start="3090:9" pos:end="3090:62"><block_content pos:start="3090:9" pos:end="3090:62">
        <expr_stmt pos:start="3090:9" pos:end="3090:62"><expr pos:start="3090:9" pos:end="3090:61"><call pos:start="3090:9" pos:end="3090:61"><name pos:start="3090:9" pos:end="3090:21">gen_lea_modrm</name><argument_list pos:start="3090:22" pos:end="3090:61">(<argument pos:start="3090:23" pos:end="3090:25"><expr pos:start="3090:23" pos:end="3090:25"><name pos:start="3090:23" pos:end="3090:25">env</name></expr></argument>, <argument pos:start="3090:28" pos:end="3090:28"><expr pos:start="3090:28" pos:end="3090:28"><name pos:start="3090:28" pos:end="3090:28">s</name></expr></argument>, <argument pos:start="3090:31" pos:end="3090:35"><expr pos:start="3090:31" pos:end="3090:35"><name pos:start="3090:31" pos:end="3090:35">modrm</name></expr></argument>, <argument pos:start="3090:38" pos:end="3090:46"><expr pos:start="3090:38" pos:end="3090:46"><operator pos:start="3090:38" pos:end="3090:38">&amp;</operator><name pos:start="3090:39" pos:end="3090:46">reg_addr</name></expr></argument>, <argument pos:start="3090:49" pos:end="3090:60"><expr pos:start="3090:49" pos:end="3090:60"><operator pos:start="3090:49" pos:end="3090:49">&amp;</operator><name pos:start="3090:50" pos:end="3090:60">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <comment type="block" pos:start="3091:9" pos:end="3091:28">/* ignore for now */</comment>
        <break pos:start="3092:9" pos:end="3092:14">break;</break>
    <case pos:start="3093:5" pos:end="3093:15">case <expr pos:start="3093:10" pos:end="3093:14"><literal type="number" pos:start="3093:10" pos:end="3093:14">0x1aa</literal></expr>:</case> <comment type="block" pos:start="3093:17" pos:end="3093:25">/* rsm */</comment>
        <expr_stmt pos:start="3094:9" pos:end="3094:59"><expr pos:start="3094:9" pos:end="3094:58"><call pos:start="3094:9" pos:end="3094:58"><name pos:start="3094:9" pos:end="3094:31">gen_svm_check_intercept</name><argument_list pos:start="3094:32" pos:end="3094:58">(<argument pos:start="3094:33" pos:end="3094:33"><expr pos:start="3094:33" pos:end="3094:33"><name pos:start="3094:33" pos:end="3094:33">s</name></expr></argument>, <argument pos:start="3094:36" pos:end="3094:43"><expr pos:start="3094:36" pos:end="3094:43"><name pos:start="3094:36" pos:end="3094:43">pc_start</name></expr></argument>, <argument pos:start="3094:46" pos:end="3094:57"><expr pos:start="3094:46" pos:end="3094:57"><name pos:start="3094:46" pos:end="3094:57">SVM_EXIT_RSM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="3095:9" pos:end="3096:28"><if pos:start="3095:9" pos:end="3096:28">if <condition pos:start="3095:12" pos:end="3095:38">(<expr pos:start="3095:13" pos:end="3095:37"><operator pos:start="3095:13" pos:end="3095:13">!</operator><operator pos:start="3095:14" pos:end="3095:14">(</operator><name pos:start="3095:15" pos:end="3095:22"><name pos:start="3095:15" pos:end="3095:15">s</name><operator pos:start="3095:16" pos:end="3095:17">-&gt;</operator><name pos:start="3095:18" pos:end="3095:22">flags</name></name> <operator pos:start="3095:24" pos:end="3095:24">&amp;</operator> <name pos:start="3095:26" pos:end="3095:36">HF_SMM_MASK</name><operator pos:start="3095:37" pos:end="3095:37">)</operator></expr>)</condition><block type="pseudo" pos:start="3096:9" pos:end="3096:28"><block_content pos:start="3096:9" pos:end="3096:28">
        <expr_stmt pos:start="3096:9" pos:end="3096:28"><expr pos:start="3096:9" pos:end="3096:27"><call pos:start="3096:9" pos:end="3096:27"><name pos:start="3096:9" pos:end="3096:24">gen_update_cc_op</name><argument_list pos:start="3096:25" pos:end="3096:27">(<argument pos:start="3096:26" pos:end="3096:26"><expr pos:start="3096:26" pos:end="3096:26"><name pos:start="3096:26" pos:end="3096:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="3097:9" pos:end="3097:39"><expr pos:start="3097:9" pos:end="3097:38"><call pos:start="3097:9" pos:end="3097:38"><name pos:start="3097:9" pos:end="3097:18">gen_jmp_im</name><argument_list pos:start="3097:19" pos:end="3097:38">(<argument pos:start="3097:20" pos:end="3097:37"><expr pos:start="3097:20" pos:end="3097:37"><name pos:start="3097:20" pos:end="3097:24"><name pos:start="3097:20" pos:end="3097:20">s</name><operator pos:start="3097:21" pos:end="3097:22">-&gt;</operator><name pos:start="3097:23" pos:end="3097:24">pc</name></name> <operator pos:start="3097:26" pos:end="3097:26">-</operator> <name pos:start="3097:28" pos:end="3097:37"><name pos:start="3097:28" pos:end="3097:28">s</name><operator pos:start="3097:29" pos:end="3097:30">-&gt;</operator><name pos:start="3097:31" pos:end="3097:37">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="3098:9" pos:end="3098:32"><expr pos:start="3098:9" pos:end="3098:31"><call pos:start="3098:9" pos:end="3098:31"><name pos:start="3098:9" pos:end="3098:22">gen_helper_rsm</name><argument_list pos:start="3098:23" pos:end="3098:31">(<argument pos:start="3098:24" pos:end="3098:30"><expr pos:start="3098:24" pos:end="3098:30"><name pos:start="3098:24" pos:end="3098:30">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="3099:9" pos:end="3099:19"><expr pos:start="3099:9" pos:end="3099:18"><call pos:start="3099:9" pos:end="3099:18"><name pos:start="3099:9" pos:end="3099:15">gen_eob</name><argument_list pos:start="3099:16" pos:end="3099:18">(<argument pos:start="3099:17" pos:end="3099:17"><expr pos:start="3099:17" pos:end="3099:17"><name pos:start="3099:17" pos:end="3099:17">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="3100:9" pos:end="3100:14">break;</break>
    <case pos:start="3101:5" pos:end="3101:15">case <expr pos:start="3101:10" pos:end="3101:14"><literal type="number" pos:start="3101:10" pos:end="3101:14">0x1b8</literal></expr>:</case> <comment type="block" pos:start="3101:17" pos:end="3101:35">/* SSE4.2 popcnt */</comment>
        <if_stmt pos:start="3102:9" pos:end="3105:44"><if pos:start="3102:9" pos:end="3105:44">if <condition pos:start="3102:12" pos:end="3103:25">(<expr pos:start="3102:13" pos:end="3103:24"><operator pos:start="3102:13" pos:end="3102:13">(</operator><name pos:start="3102:14" pos:end="3102:21">prefixes</name> <operator pos:start="3102:23" pos:end="3102:23">&amp;</operator> <operator pos:start="3102:25" pos:end="3102:25">(</operator><name pos:start="3102:26" pos:end="3102:36">PREFIX_REPZ</name> <operator pos:start="3102:38" pos:end="3102:38">|</operator> <name pos:start="3102:40" pos:end="3102:50">PREFIX_LOCK</name> <operator pos:start="3102:52" pos:end="3102:52">|</operator> <name pos:start="3102:54" pos:end="3102:65">PREFIX_REPNZ</name><operator pos:start="3102:66" pos:end="3102:66">)</operator><operator pos:start="3102:67" pos:end="3102:67">)</operator> <operator pos:start="3102:69" pos:end="3102:70">!=</operator>
             <name pos:start="3103:14" pos:end="3103:24">PREFIX_REPZ</name></expr>)</condition><block type="pseudo" pos:start="3104:9" pos:end="3105:44"><block_content pos:start="3104:9" pos:end="3105:44">
        <if_stmt pos:start="3104:9" pos:end="3105:44"><if pos:start="3104:9" pos:end="3105:44">if <condition pos:start="3104:12" pos:end="3104:56">(<expr pos:start="3104:13" pos:end="3104:55"><operator pos:start="3104:13" pos:end="3104:13">!</operator><operator pos:start="3104:14" pos:end="3104:14">(</operator><name pos:start="3104:15" pos:end="3104:35"><name pos:start="3104:15" pos:end="3104:15">s</name><operator pos:start="3104:16" pos:end="3104:17">-&gt;</operator><name pos:start="3104:18" pos:end="3104:35">cpuid_ext_features</name></name> <operator pos:start="3104:37" pos:end="3104:37">&amp;</operator> <name pos:start="3104:39" pos:end="3104:54">CPUID_EXT_POPCNT</name><operator pos:start="3104:55" pos:end="3104:55">)</operator></expr>)</condition><block type="pseudo" pos:start="3105:9" pos:end="3105:44"><block_content pos:start="3105:9" pos:end="3105:44">
        <expr_stmt pos:start="3105:9" pos:end="3105:44"><expr pos:start="3105:9" pos:end="3105:43"><name pos:start="3105:9" pos:end="3105:13">modrm</name> <operator pos:start="3105:15" pos:end="3105:15">=</operator> <call pos:start="3105:17" pos:end="3105:43"><name pos:start="3105:17" pos:end="3105:29">cpu_ldub_code</name><argument_list pos:start="3105:30" pos:end="3105:43">(<argument pos:start="3105:31" pos:end="3105:33"><expr pos:start="3105:31" pos:end="3105:33"><name pos:start="3105:31" pos:end="3105:33">env</name></expr></argument>, <argument pos:start="3105:36" pos:end="3105:42"><expr pos:start="3105:36" pos:end="3105:42"><name pos:start="3105:36" pos:end="3105:40"><name pos:start="3105:36" pos:end="3105:36">s</name><operator pos:start="3105:37" pos:end="3105:38">-&gt;</operator><name pos:start="3105:39" pos:end="3105:40">pc</name></name><operator pos:start="3105:41" pos:end="3105:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="3106:9" pos:end="3106:41"><expr pos:start="3106:9" pos:end="3106:40"><name pos:start="3106:9" pos:end="3106:11">reg</name> <operator pos:start="3106:13" pos:end="3106:13">=</operator> <operator pos:start="3106:15" pos:end="3106:15">(</operator><operator pos:start="3106:16" pos:end="3106:16">(</operator><name pos:start="3106:17" pos:end="3106:21">modrm</name> <operator pos:start="3106:23" pos:end="3106:24">&gt;&gt;</operator> <literal type="number" pos:start="3106:26" pos:end="3106:26">3</literal><operator pos:start="3106:27" pos:end="3106:27">)</operator> <operator pos:start="3106:29" pos:end="3106:29">&amp;</operator> <literal type="number" pos:start="3106:31" pos:end="3106:31">7</literal><operator pos:start="3106:32" pos:end="3106:32">)</operator> <operator pos:start="3106:34" pos:end="3106:34">|</operator> <name pos:start="3106:36" pos:end="3106:40">rex_r</name></expr>;</expr_stmt>
        <if_stmt pos:start="3107:9" pos:end="3112:25"><if pos:start="3107:9" pos:end="3108:25">if <condition pos:start="3107:12" pos:end="3107:36">(<expr pos:start="3107:13" pos:end="3107:35"><name pos:start="3107:13" pos:end="3107:21"><name pos:start="3107:13" pos:end="3107:13">s</name><operator pos:start="3107:14" pos:end="3107:15">-&gt;</operator><name pos:start="3107:16" pos:end="3107:21">prefix</name></name> <operator pos:start="3107:23" pos:end="3107:23">&amp;</operator> <name pos:start="3107:25" pos:end="3107:35">PREFIX_DATA</name></expr>)</condition><block type="pseudo" pos:start="3108:13" pos:end="3108:25"><block_content pos:start="3108:13" pos:end="3108:25">
            <expr_stmt pos:start="3108:13" pos:end="3108:25"><expr pos:start="3108:13" pos:end="3108:24"><name pos:start="3108:13" pos:end="3108:14">ot</name> <operator pos:start="3108:16" pos:end="3108:16">=</operator> <name pos:start="3108:18" pos:end="3108:24">OT_WORD</name></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif" pos:start="3109:9" pos:end="3110:25">else if <condition pos:start="3109:17" pos:end="3109:31">(<expr pos:start="3109:18" pos:end="3109:30"><name pos:start="3109:18" pos:end="3109:25"><name pos:start="3109:18" pos:end="3109:18">s</name><operator pos:start="3109:19" pos:end="3109:20">-&gt;</operator><name pos:start="3109:21" pos:end="3109:25">dflag</name></name> <operator pos:start="3109:27" pos:end="3109:28">!=</operator> <literal type="number" pos:start="3109:30" pos:end="3109:30">2</literal></expr>)</condition><block type="pseudo" pos:start="3110:13" pos:end="3110:25"><block_content pos:start="3110:13" pos:end="3110:25">
            <expr_stmt pos:start="3110:13" pos:end="3110:25"><expr pos:start="3110:13" pos:end="3110:24"><name pos:start="3110:13" pos:end="3110:14">ot</name> <operator pos:start="3110:16" pos:end="3110:16">=</operator> <name pos:start="3110:18" pos:end="3110:24">OT_LONG</name></expr>;</expr_stmt></block_content></block></if>
        <else pos:start="3111:9" pos:end="3112:25">else<block type="pseudo" pos:start="3112:13" pos:end="3112:25"><block_content pos:start="3112:13" pos:end="3112:25">
            <expr_stmt pos:start="3112:13" pos:end="3112:25"><expr pos:start="3112:13" pos:end="3112:24"><name pos:start="3112:13" pos:end="3112:14">ot</name> <operator pos:start="3112:16" pos:end="3112:16">=</operator> <name pos:start="3112:18" pos:end="3112:24">OT_QUAD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt pos:start="3113:9" pos:end="3113:54"><expr pos:start="3113:9" pos:end="3113:53"><call pos:start="3113:9" pos:end="3113:53"><name pos:start="3113:9" pos:end="3113:22">gen_ldst_modrm</name><argument_list pos:start="3113:23" pos:end="3113:53">(<argument pos:start="3113:24" pos:end="3113:26"><expr pos:start="3113:24" pos:end="3113:26"><name pos:start="3113:24" pos:end="3113:26">env</name></expr></argument>, <argument pos:start="3113:29" pos:end="3113:29"><expr pos:start="3113:29" pos:end="3113:29"><name pos:start="3113:29" pos:end="3113:29">s</name></expr></argument>, <argument pos:start="3113:32" pos:end="3113:36"><expr pos:start="3113:32" pos:end="3113:36"><name pos:start="3113:32" pos:end="3113:36">modrm</name></expr></argument>, <argument pos:start="3113:39" pos:end="3113:40"><expr pos:start="3113:39" pos:end="3113:40"><name pos:start="3113:39" pos:end="3113:40">ot</name></expr></argument>, <argument pos:start="3113:43" pos:end="3113:49"><expr pos:start="3113:43" pos:end="3113:49"><name pos:start="3113:43" pos:end="3113:49">OR_TMP0</name></expr></argument>, <argument pos:start="3113:52" pos:end="3113:52"><expr pos:start="3113:52" pos:end="3113:52"><literal type="number" pos:start="3113:52" pos:end="3113:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="3114:9" pos:end="3114:74"><expr pos:start="3114:9" pos:end="3114:73"><call pos:start="3114:9" pos:end="3114:73"><name pos:start="3114:9" pos:end="3114:25">gen_helper_popcnt</name><argument_list pos:start="3114:26" pos:end="3114:73">(<argument pos:start="3114:27" pos:end="3114:34"><expr pos:start="3114:27" pos:end="3114:34"><name pos:start="3114:27" pos:end="3114:34"><name pos:start="3114:27" pos:end="3114:31">cpu_T</name><index pos:start="3114:32" pos:end="3114:34">[<expr pos:start="3114:33" pos:end="3114:33"><literal type="number" pos:start="3114:33" pos:end="3114:33">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="3114:37" pos:end="3114:43"><expr pos:start="3114:37" pos:end="3114:43"><name pos:start="3114:37" pos:end="3114:43">cpu_env</name></expr></argument>, <argument pos:start="3114:46" pos:end="3114:53"><expr pos:start="3114:46" pos:end="3114:53"><name pos:start="3114:46" pos:end="3114:53"><name pos:start="3114:46" pos:end="3114:50">cpu_T</name><index pos:start="3114:51" pos:end="3114:53">[<expr pos:start="3114:52" pos:end="3114:52"><literal type="number" pos:start="3114:52" pos:end="3114:52">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="3114:56" pos:end="3114:72"><expr pos:start="3114:56" pos:end="3114:72"><call pos:start="3114:56" pos:end="3114:72"><name pos:start="3114:56" pos:end="3114:68">tcg_const_i32</name><argument_list pos:start="3114:69" pos:end="3114:72">(<argument pos:start="3114:70" pos:end="3114:71"><expr pos:start="3114:70" pos:end="3114:71"><name pos:start="3114:70" pos:end="3114:71">ot</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="3115:9" pos:end="3115:35"><expr pos:start="3115:9" pos:end="3115:34"><call pos:start="3115:9" pos:end="3115:34"><name pos:start="3115:9" pos:end="3115:25">gen_op_mov_reg_T0</name><argument_list pos:start="3115:26" pos:end="3115:34">(<argument pos:start="3115:27" pos:end="3115:28"><expr pos:start="3115:27" pos:end="3115:28"><name pos:start="3115:27" pos:end="3115:28">ot</name></expr></argument>, <argument pos:start="3115:31" pos:end="3115:33"><expr pos:start="3115:31" pos:end="3115:33"><name pos:start="3115:31" pos:end="3115:33">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="3116:9" pos:end="3116:35"><expr pos:start="3116:9" pos:end="3116:34"><call pos:start="3116:9" pos:end="3116:34"><name pos:start="3116:9" pos:end="3116:17">set_cc_op</name><argument_list pos:start="3116:18" pos:end="3116:34">(<argument pos:start="3116:19" pos:end="3116:19"><expr pos:start="3116:19" pos:end="3116:19"><name pos:start="3116:19" pos:end="3116:19">s</name></expr></argument>, <argument pos:start="3116:22" pos:end="3116:33"><expr pos:start="3116:22" pos:end="3116:33"><name pos:start="3116:22" pos:end="3116:33">CC_OP_EFLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="3117:9" pos:end="3117:14">break;</break>
    <case pos:start="3118:5" pos:end="3118:25">case <expr pos:start="3118:10" pos:end="3118:24"><literal type="number" pos:start="3118:10" pos:end="3118:14">0x10e</literal> <operator pos:start="3118:16" pos:end="3118:18">...</operator> <literal type="number" pos:start="3118:20" pos:end="3118:24">0x10f</literal></expr>:</case>
        <comment type="block" pos:start="3119:9" pos:end="3119:50">/* 3DNow! instructions, ignore prefixes */</comment>
        <expr_stmt pos:start="3120:9" pos:end="3120:65"><expr pos:start="3120:9" pos:end="3120:64"><name pos:start="3120:9" pos:end="3120:17"><name pos:start="3120:9" pos:end="3120:9">s</name><operator pos:start="3120:10" pos:end="3120:11">-&gt;</operator><name pos:start="3120:12" pos:end="3120:17">prefix</name></name> <operator pos:start="3120:19" pos:end="3120:20">&amp;=</operator> <operator pos:start="3120:22" pos:end="3120:22">~</operator><operator pos:start="3120:23" pos:end="3120:23">(</operator><name pos:start="3120:24" pos:end="3120:34">PREFIX_REPZ</name> <operator pos:start="3120:36" pos:end="3120:36">|</operator> <name pos:start="3120:38" pos:end="3120:49">PREFIX_REPNZ</name> <operator pos:start="3120:51" pos:end="3120:51">|</operator> <name pos:start="3120:53" pos:end="3120:63">PREFIX_DATA</name><operator pos:start="3120:64" pos:end="3120:64">)</operator></expr>;</expr_stmt>
    <case pos:start="3121:5" pos:end="3121:25">case <expr pos:start="3121:10" pos:end="3121:24"><literal type="number" pos:start="3121:10" pos:end="3121:14">0x110</literal> <operator pos:start="3121:16" pos:end="3121:18">...</operator> <literal type="number" pos:start="3121:20" pos:end="3121:24">0x117</literal></expr>:</case>
    <case pos:start="3122:5" pos:end="3122:25">case <expr pos:start="3122:10" pos:end="3122:24"><literal type="number" pos:start="3122:10" pos:end="3122:14">0x128</literal> <operator pos:start="3122:16" pos:end="3122:18">...</operator> <literal type="number" pos:start="3122:20" pos:end="3122:24">0x12f</literal></expr>:</case>
    <case pos:start="3123:5" pos:end="3123:25">case <expr pos:start="3123:10" pos:end="3123:24"><literal type="number" pos:start="3123:10" pos:end="3123:14">0x138</literal> <operator pos:start="3123:16" pos:end="3123:18">...</operator> <literal type="number" pos:start="3123:20" pos:end="3123:24">0x13a</literal></expr>:</case>
    <case pos:start="3124:5" pos:end="3124:25">case <expr pos:start="3124:10" pos:end="3124:24"><literal type="number" pos:start="3124:10" pos:end="3124:14">0x150</literal> <operator pos:start="3124:16" pos:end="3124:18">...</operator> <literal type="number" pos:start="3124:20" pos:end="3124:24">0x179</literal></expr>:</case>
    <case pos:start="3125:5" pos:end="3125:25">case <expr pos:start="3125:10" pos:end="3125:24"><literal type="number" pos:start="3125:10" pos:end="3125:14">0x17c</literal> <operator pos:start="3125:16" pos:end="3125:18">...</operator> <literal type="number" pos:start="3125:20" pos:end="3125:24">0x17f</literal></expr>:</case>
    <case pos:start="3126:5" pos:end="3126:15">case <expr pos:start="3126:10" pos:end="3126:14"><literal type="number" pos:start="3126:10" pos:end="3126:14">0x1c2</literal></expr>:</case>
    <case pos:start="3127:5" pos:end="3127:25">case <expr pos:start="3127:10" pos:end="3127:24"><literal type="number" pos:start="3127:10" pos:end="3127:14">0x1c4</literal> <operator pos:start="3127:16" pos:end="3127:18">...</operator> <literal type="number" pos:start="3127:20" pos:end="3127:24">0x1c6</literal></expr>:</case>
    <case pos:start="3128:5" pos:end="3128:25">case <expr pos:start="3128:10" pos:end="3128:24"><literal type="number" pos:start="3128:10" pos:end="3128:14">0x1d0</literal> <operator pos:start="3128:16" pos:end="3128:18">...</operator> <literal type="number" pos:start="3128:20" pos:end="3128:24">0x1fe</literal></expr>:</case>
        <expr_stmt pos:start="3129:9" pos:end="3129:44"><expr pos:start="3129:9" pos:end="3129:43"><call pos:start="3129:9" pos:end="3129:43"><name pos:start="3129:9" pos:end="3129:15">gen_sse</name><argument_list pos:start="3129:16" pos:end="3129:43">(<argument pos:start="3129:17" pos:end="3129:19"><expr pos:start="3129:17" pos:end="3129:19"><name pos:start="3129:17" pos:end="3129:19">env</name></expr></argument>, <argument pos:start="3129:22" pos:end="3129:22"><expr pos:start="3129:22" pos:end="3129:22"><name pos:start="3129:22" pos:end="3129:22">s</name></expr></argument>, <argument pos:start="3129:25" pos:end="3129:25"><expr pos:start="3129:25" pos:end="3129:25"><name pos:start="3129:25" pos:end="3129:25">b</name></expr></argument>, <argument pos:start="3129:28" pos:end="3129:35"><expr pos:start="3129:28" pos:end="3129:35"><name pos:start="3129:28" pos:end="3129:35">pc_start</name></expr></argument>, <argument pos:start="3129:38" pos:end="3129:42"><expr pos:start="3129:38" pos:end="3129:42"><name pos:start="3129:38" pos:end="3129:42">rex_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="3130:9" pos:end="3130:14">break;</break>
    <default pos:start="3131:5" pos:end="3131:12">default:</default>
    <comment type="block" pos:start="3132:5" pos:end="3132:25">/* lock generation */</comment>
    <if_stmt pos:start="3133:5" pos:end="3134:28"><if pos:start="3133:5" pos:end="3134:28">if <condition pos:start="3133:8" pos:end="3133:32">(<expr pos:start="3133:9" pos:end="3133:31"><name pos:start="3133:9" pos:end="3133:17"><name pos:start="3133:9" pos:end="3133:9">s</name><operator pos:start="3133:10" pos:end="3133:11">-&gt;</operator><name pos:start="3133:12" pos:end="3133:17">prefix</name></name> <operator pos:start="3133:19" pos:end="3133:19">&amp;</operator> <name pos:start="3133:21" pos:end="3133:31">PREFIX_LOCK</name></expr>)</condition><block type="pseudo" pos:start="3134:9" pos:end="3134:28"><block_content pos:start="3134:9" pos:end="3134:28">
        <expr_stmt pos:start="3134:9" pos:end="3134:28"><expr pos:start="3134:9" pos:end="3134:27"><call pos:start="3134:9" pos:end="3134:27"><name pos:start="3134:9" pos:end="3134:25">gen_helper_unlock</name><argument_list pos:start="3134:26" pos:end="3134:27">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return pos:start="3135:5" pos:end="3135:17">return <expr pos:start="3135:12" pos:end="3135:16"><name pos:start="3135:12" pos:end="3135:16"><name pos:start="3135:12" pos:end="3135:12">s</name><operator pos:start="3135:13" pos:end="3135:14">-&gt;</operator><name pos:start="3135:15" pos:end="3135:16">pc</name></name></expr>;</return>
 <label pos:start="3136:2" pos:end="3136:12"><name pos:start="3136:2" pos:end="3136:11">illegal_op</name>:</label>
    <if_stmt pos:start="3137:5" pos:end="3138:28"><if pos:start="3137:5" pos:end="3138:28">if <condition pos:start="3137:8" pos:end="3137:32">(<expr pos:start="3137:9" pos:end="3137:31"><name pos:start="3137:9" pos:end="3137:17"><name pos:start="3137:9" pos:end="3137:9">s</name><operator pos:start="3137:10" pos:end="3137:11">-&gt;</operator><name pos:start="3137:12" pos:end="3137:17">prefix</name></name> <operator pos:start="3137:19" pos:end="3137:19">&amp;</operator> <name pos:start="3137:21" pos:end="3137:31">PREFIX_LOCK</name></expr>)</condition><block type="pseudo" pos:start="3138:9" pos:end="3138:28"><block_content pos:start="3138:9" pos:end="3138:28">
        <expr_stmt pos:start="3138:9" pos:end="3138:28"><expr pos:start="3138:9" pos:end="3138:27"><call pos:start="3138:9" pos:end="3138:27"><name pos:start="3138:9" pos:end="3138:25">gen_helper_unlock</name><argument_list pos:start="3138:26" pos:end="3138:27">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <comment type="block" pos:start="3139:5" pos:end="3139:48">/* XXX: ensure that no lock was generated */</comment>
    <expr_stmt pos:start="3140:5" pos:end="3140:58"><expr pos:start="3140:5" pos:end="3140:57"><call pos:start="3140:5" pos:end="3140:57"><name pos:start="3140:5" pos:end="3140:17">gen_exception</name><argument_list pos:start="3140:18" pos:end="3140:57">(<argument pos:start="3140:19" pos:end="3140:19"><expr pos:start="3140:19" pos:end="3140:19"><name pos:start="3140:19" pos:end="3140:19">s</name></expr></argument>, <argument pos:start="3140:22" pos:end="3140:33"><expr pos:start="3140:22" pos:end="3140:33"><name pos:start="3140:22" pos:end="3140:33">EXCP06_ILLOP</name></expr></argument>, <argument pos:start="3140:36" pos:end="3140:56"><expr pos:start="3140:36" pos:end="3140:56"><name pos:start="3140:36" pos:end="3140:43">pc_start</name> <operator pos:start="3140:45" pos:end="3140:45">-</operator> <name pos:start="3140:47" pos:end="3140:56"><name pos:start="3140:47" pos:end="3140:47">s</name><operator pos:start="3140:48" pos:end="3140:49">-&gt;</operator><name pos:start="3140:50" pos:end="3140:56">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="3141:5" pos:end="3141:17">return <expr pos:start="3141:12" pos:end="3141:16"><name pos:start="3141:12" pos:end="3141:16"><name pos:start="3141:12" pos:end="3141:12">s</name><operator pos:start="3141:13" pos:end="3141:14">-&gt;</operator><name pos:start="3141:15" pos:end="3141:16">pc</name></name></expr>;</return></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></switch></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></switch></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></switch></block_content></block></else></if_stmt></block_content></block></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></switch></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></switch></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></switch></block_content></block></if></if_stmt></block_content></block></switch></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></switch></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></switch></block_content></block></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></switch></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></block_content></block></block_content></block></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></block_content></block></switch></block_content></block></switch></block_content></block></switch></block_content></block></switch></block_content></block></else></if_stmt></block_content></block></block_content></block></switch></block_content></block></switch></block_content></block></switch></block_content></block></block_content></block></switch></block_content></block></switch></block_content></block></switch></block_content></block></else></if_stmt></block_content></block></switch></block_content></block></switch></block_content></block></switch></block_content></block></if></if_stmt></block_content></block></switch></block_content></block></block_content></block></switch></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></block_content></block></else></if_stmt></block_content></block></switch></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></switch></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></switch></block_content></block></switch></block_content></block></switch></block_content></block></switch></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></switch></block_content></block></else></if_stmt></block_content></block></switch></block_content></block></else></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></switch></block_content></block></block_content></block></switch></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></switch></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></switch></block_content></block></if></if_stmt></block_content></block></function></unit>
