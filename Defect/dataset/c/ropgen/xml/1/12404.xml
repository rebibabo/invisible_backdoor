<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12404.c" pos:tabs="8"><function pos:start="1:1" pos:end="37:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">mpidr_read</name><parameter_list pos:start="1:22" pos:end="3:38">(<parameter pos:start="1:23" pos:end="1:38"><decl pos:start="1:23" pos:end="1:38"><type pos:start="1:23" pos:end="1:38"><name pos:start="1:23" pos:end="1:33">CPUARMState</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:38">env</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:62"><decl pos:start="1:41" pos:end="1:62"><type pos:start="1:41" pos:end="1:62"><specifier pos:start="1:41" pos:end="1:45">const</specifier> <name pos:start="1:47" pos:end="1:58">ARMCPRegInfo</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:62">ri</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:37"><decl pos:start="3:23" pos:end="3:37"><type pos:start="3:23" pos:end="3:37"><name pos:start="3:23" pos:end="3:30">uint64_t</name> <modifier pos:start="3:32" pos:end="3:32">*</modifier></type><name pos:start="3:33" pos:end="3:37">value</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="37:1">{<block_content pos:start="7:5" pos:end="35:13">

    <decl_stmt pos:start="7:5" pos:end="7:45"><decl pos:start="7:5" pos:end="7:44"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">CPUState</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:16">cs</name> <init pos:start="7:18" pos:end="7:44">= <expr pos:start="7:20" pos:end="7:44"><call pos:start="7:20" pos:end="7:44"><name pos:start="7:20" pos:end="7:22">CPU</name><argument_list pos:start="7:23" pos:end="7:44">(<argument pos:start="7:24" pos:end="7:43"><expr pos:start="7:24" pos:end="7:43"><call pos:start="7:24" pos:end="7:43"><name pos:start="7:24" pos:end="7:38">arm_env_get_cpu</name><argument_list pos:start="7:39" pos:end="7:43">(<argument pos:start="7:40" pos:end="7:42"><expr pos:start="7:40" pos:end="7:42"><name pos:start="7:40" pos:end="7:42">env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:35"><decl pos:start="9:5" pos:end="9:34"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:18">mpidr</name> <init pos:start="9:20" pos:end="9:34">= <expr pos:start="9:22" pos:end="9:34"><name pos:start="9:22" pos:end="9:34"><name pos:start="9:22" pos:end="9:23">cs</name><operator pos:start="9:24" pos:end="9:25">-&gt;</operator><name pos:start="9:26" pos:end="9:34">cpu_index</name></name></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="11:5" pos:end="15:7">/* We don't support setting cluster ID ([8..11])

     * so these bits always RAZ.

     */</comment>

    <if_stmt pos:start="17:5" pos:end="31:5"><if pos:start="17:5" pos:end="31:5">if <condition pos:start="17:8" pos:end="17:43">(<expr pos:start="17:9" pos:end="17:42"><call pos:start="17:9" pos:end="17:42"><name pos:start="17:9" pos:end="17:19">arm_feature</name><argument_list pos:start="17:20" pos:end="17:42">(<argument pos:start="17:21" pos:end="17:23"><expr pos:start="17:21" pos:end="17:23"><name pos:start="17:21" pos:end="17:23">env</name></expr></argument>, <argument pos:start="17:26" pos:end="17:41"><expr pos:start="17:26" pos:end="17:41"><name pos:start="17:26" pos:end="17:41">ARM_FEATURE_V7MP</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="17:45" pos:end="31:5">{<block_content pos:start="19:9" pos:end="19:27">

        <expr_stmt pos:start="19:9" pos:end="19:27"><expr pos:start="19:9" pos:end="19:26"><name pos:start="19:9" pos:end="19:13">mpidr</name> <operator pos:start="19:15" pos:end="19:16">|=</operator> <operator pos:start="19:18" pos:end="19:18">(</operator><literal type="number" pos:start="19:19" pos:end="19:19">1</literal> <operator pos:start="19:21" pos:end="19:22">&lt;&lt;</operator> <literal type="number" pos:start="19:24" pos:end="19:25">31</literal><operator pos:start="19:26" pos:end="19:26">)</operator></expr>;</expr_stmt>

        <comment type="block" pos:start="21:9" pos:end="29:11">/* Cores which are uniprocessor (non-coherent)

         * but still implement the MP extensions set

         * bit 30. (For instance, A9UP.) However we do

         * not currently model any of those cores.

         */</comment>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:19"><expr pos:start="33:5" pos:end="33:18"><operator pos:start="33:5" pos:end="33:5">*</operator><name pos:start="33:6" pos:end="33:10">value</name> <operator pos:start="33:12" pos:end="33:12">=</operator> <name pos:start="33:14" pos:end="33:18">mpidr</name></expr>;</expr_stmt>

    <return pos:start="35:5" pos:end="35:13">return <expr pos:start="35:12" pos:end="35:12"><literal type="number" pos:start="35:12" pos:end="35:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
