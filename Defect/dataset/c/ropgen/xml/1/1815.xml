<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/1815.c" pos:tabs="8"><function pos:start="1:1" pos:end="609:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">vaapi_encode_issue</name><parameter_list pos:start="1:30" pos:end="3:54">(<parameter pos:start="1:31" pos:end="1:51"><decl pos:start="1:31" pos:end="1:51"><type pos:start="1:31" pos:end="1:51"><name pos:start="1:31" pos:end="1:44">AVCodecContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:51">avctx</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:53"><decl pos:start="3:31" pos:end="3:53"><type pos:start="3:31" pos:end="3:53"><name pos:start="3:31" pos:end="3:48">VAAPIEncodePicture</name> <modifier pos:start="3:50" pos:end="3:50">*</modifier></type><name pos:start="3:51" pos:end="3:53">pic</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="609:1">{<block_content pos:start="7:5" pos:end="607:15">

    <decl_stmt pos:start="7:5" pos:end="7:47"><decl pos:start="7:5" pos:end="7:46"><type pos:start="7:5" pos:end="7:24"><name pos:start="7:5" pos:end="7:22">VAAPIEncodeContext</name> <modifier pos:start="7:24" pos:end="7:24">*</modifier></type><name pos:start="7:25" pos:end="7:27">ctx</name> <init pos:start="7:29" pos:end="7:46">= <expr pos:start="7:31" pos:end="7:46"><name pos:start="7:31" pos:end="7:46"><name pos:start="7:31" pos:end="7:35">avctx</name><operator pos:start="7:36" pos:end="7:37">-&gt;</operator><name pos:start="7:38" pos:end="7:46">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">VAAPIEncodeSlice</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:27">slice</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">VAStatus</name></type> <name pos:start="11:14" pos:end="11:16">vas</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:15"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">err</name></decl>, <decl pos:start="13:14" pos:end="13:14"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:14" pos:end="13:14">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:37"><decl pos:start="15:5" pos:end="15:36"><type pos:start="15:5" pos:end="15:8"><name pos:start="15:5" pos:end="15:8">char</name></type> <name pos:start="15:10" pos:end="15:36"><name pos:start="15:10" pos:end="15:13">data</name><index pos:start="15:14" pos:end="15:36">[<expr pos:start="15:15" pos:end="15:35"><name pos:start="15:15" pos:end="15:35">MAX_PARAM_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:10">size_t</name></type> <name pos:start="17:12" pos:end="17:18">bit_len</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="25:41"><expr pos:start="21:5" pos:end="25:40"><call pos:start="21:5" pos:end="25:40"><name pos:start="21:5" pos:end="21:10">av_log</name><argument_list pos:start="21:11" pos:end="25:40">(<argument pos:start="21:12" pos:end="21:16"><expr pos:start="21:12" pos:end="21:16"><name pos:start="21:12" pos:end="21:16">avctx</name></expr></argument>, <argument pos:start="21:19" pos:end="21:30"><expr pos:start="21:19" pos:end="21:30"><name pos:start="21:19" pos:end="21:30">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="21:33" pos:end="23:26"><expr pos:start="21:33" pos:end="23:26"><literal type="string" pos:start="21:33" pos:end="21:58">"Issuing encode for pic %"</literal><name pos:start="21:59" pos:end="21:64">PRId64</name><literal type="string" pos:start="21:65" pos:end="21:68">"/%"</literal><name pos:start="21:69" pos:end="21:74">PRId64</name><literal type="string" pos:start="21:75" pos:end="21:77">" "</literal>

           <literal type="string" pos:start="23:12" pos:end="23:26">"as type %s.\n"</literal></expr></argument>, <argument pos:start="23:29" pos:end="23:46"><expr pos:start="23:29" pos:end="23:46"><name pos:start="23:29" pos:end="23:46"><name pos:start="23:29" pos:end="23:31">pic</name><operator pos:start="23:32" pos:end="23:33">-&gt;</operator><name pos:start="23:34" pos:end="23:46">display_order</name></name></expr></argument>, <argument pos:start="23:49" pos:end="23:65"><expr pos:start="23:49" pos:end="23:65"><name pos:start="23:49" pos:end="23:65"><name pos:start="23:49" pos:end="23:51">pic</name><operator pos:start="23:52" pos:end="23:53">-&gt;</operator><name pos:start="23:54" pos:end="23:65">encode_order</name></name></expr></argument>,

           <argument pos:start="25:12" pos:end="25:39"><expr pos:start="25:12" pos:end="25:39"><name pos:start="25:12" pos:end="25:39"><name pos:start="25:12" pos:end="25:28">picture_type_name</name><index pos:start="25:29" pos:end="25:39">[<expr pos:start="25:30" pos:end="25:38"><name pos:start="25:30" pos:end="25:38"><name pos:start="25:30" pos:end="25:32">pic</name><operator pos:start="25:33" pos:end="25:34">-&gt;</operator><name pos:start="25:35" pos:end="25:38">type</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="45:5"><if pos:start="27:5" pos:end="31:5">if <condition pos:start="27:8" pos:end="27:26">(<expr pos:start="27:9" pos:end="27:25"><name pos:start="27:9" pos:end="27:20"><name pos:start="27:9" pos:end="27:11">pic</name><operator pos:start="27:12" pos:end="27:13">-&gt;</operator><name pos:start="27:14" pos:end="27:20">nb_refs</name></name> <operator pos:start="27:22" pos:end="27:23">==</operator> <literal type="number" pos:start="27:25" pos:end="27:25">0</literal></expr>)</condition> <block pos:start="27:28" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:64">

        <expr_stmt pos:start="29:9" pos:end="29:64"><expr pos:start="29:9" pos:end="29:63"><call pos:start="29:9" pos:end="29:63"><name pos:start="29:9" pos:end="29:14">av_log</name><argument_list pos:start="29:15" pos:end="29:63">(<argument pos:start="29:16" pos:end="29:20"><expr pos:start="29:16" pos:end="29:20"><name pos:start="29:16" pos:end="29:20">avctx</name></expr></argument>, <argument pos:start="29:23" pos:end="29:34"><expr pos:start="29:23" pos:end="29:34"><name pos:start="29:23" pos:end="29:34">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="29:37" pos:end="29:62"><expr pos:start="29:37" pos:end="29:62"><literal type="string" pos:start="29:37" pos:end="29:62">"No reference pictures.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="31:7" pos:end="45:5">else <block pos:start="31:12" pos:end="45:5">{<block_content pos:start="33:9" pos:end="43:43">

        <expr_stmt pos:start="33:9" pos:end="33:50"><expr pos:start="33:9" pos:end="33:49"><call pos:start="33:9" pos:end="33:49"><name pos:start="33:9" pos:end="33:14">av_log</name><argument_list pos:start="33:15" pos:end="33:49">(<argument pos:start="33:16" pos:end="33:20"><expr pos:start="33:16" pos:end="33:20"><name pos:start="33:16" pos:end="33:20">avctx</name></expr></argument>, <argument pos:start="33:23" pos:end="33:34"><expr pos:start="33:23" pos:end="33:34"><name pos:start="33:23" pos:end="33:34">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="33:37" pos:end="33:48"><expr pos:start="33:37" pos:end="33:48"><literal type="string" pos:start="33:37" pos:end="33:48">"Refers to:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="35:9" pos:end="41:9">for <control pos:start="35:13" pos:end="35:42">(<init pos:start="35:14" pos:end="35:19"><expr pos:start="35:14" pos:end="35:18"><name pos:start="35:14" pos:end="35:14">i</name> <operator pos:start="35:16" pos:end="35:16">=</operator> <literal type="number" pos:start="35:18" pos:end="35:18">0</literal></expr>;</init> <condition pos:start="35:21" pos:end="35:37"><expr pos:start="35:21" pos:end="35:36"><name pos:start="35:21" pos:end="35:21">i</name> <operator pos:start="35:23" pos:end="35:23">&lt;</operator> <name pos:start="35:25" pos:end="35:36"><name pos:start="35:25" pos:end="35:27">pic</name><operator pos:start="35:28" pos:end="35:29">-&gt;</operator><name pos:start="35:30" pos:end="35:36">nb_refs</name></name></expr>;</condition> <incr pos:start="35:39" pos:end="35:41"><expr pos:start="35:39" pos:end="35:41"><name pos:start="35:39" pos:end="35:39">i</name><operator pos:start="35:40" pos:end="35:41">++</operator></expr></incr>)</control> <block pos:start="35:44" pos:end="41:9">{<block_content pos:start="37:13" pos:end="39:76">

            <expr_stmt pos:start="37:13" pos:end="39:76"><expr pos:start="37:13" pos:end="39:75"><call pos:start="37:13" pos:end="39:75"><name pos:start="37:13" pos:end="37:18">av_log</name><argument_list pos:start="37:19" pos:end="39:75">(<argument pos:start="37:20" pos:end="37:24"><expr pos:start="37:20" pos:end="37:24"><name pos:start="37:20" pos:end="37:24">avctx</name></expr></argument>, <argument pos:start="37:27" pos:end="37:38"><expr pos:start="37:27" pos:end="37:38"><name pos:start="37:27" pos:end="37:38">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="37:41" pos:end="37:60"><expr pos:start="37:41" pos:end="37:60"><literal type="string" pos:start="37:41" pos:end="37:44">" %"</literal><name pos:start="37:45" pos:end="37:50">PRId64</name><literal type="string" pos:start="37:51" pos:end="37:54">"/%"</literal><name pos:start="37:55" pos:end="37:60">PRId64</name></expr></argument>,

                   <argument pos:start="39:20" pos:end="39:46"><expr pos:start="39:20" pos:end="39:46"><name pos:start="39:20" pos:end="39:31"><name pos:start="39:20" pos:end="39:22">pic</name><operator pos:start="39:23" pos:end="39:24">-&gt;</operator><name pos:start="39:25" pos:end="39:28">refs</name><index pos:start="39:29" pos:end="39:31">[<expr pos:start="39:30" pos:end="39:30"><name pos:start="39:30" pos:end="39:30">i</name></expr>]</index></name><operator pos:start="39:32" pos:end="39:33">-&gt;</operator><name pos:start="39:34" pos:end="39:46">display_order</name></expr></argument>, <argument pos:start="39:49" pos:end="39:74"><expr pos:start="39:49" pos:end="39:74"><name pos:start="39:49" pos:end="39:60"><name pos:start="39:49" pos:end="39:51">pic</name><operator pos:start="39:52" pos:end="39:53">-&gt;</operator><name pos:start="39:54" pos:end="39:57">refs</name><index pos:start="39:58" pos:end="39:60">[<expr pos:start="39:59" pos:end="39:59"><name pos:start="39:59" pos:end="39:59">i</name></expr>]</index></name><operator pos:start="39:61" pos:end="39:62">-&gt;</operator><name pos:start="39:63" pos:end="39:74">encode_order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="43:9" pos:end="43:43"><expr pos:start="43:9" pos:end="43:42"><call pos:start="43:9" pos:end="43:42"><name pos:start="43:9" pos:end="43:14">av_log</name><argument_list pos:start="43:15" pos:end="43:42">(<argument pos:start="43:16" pos:end="43:20"><expr pos:start="43:16" pos:end="43:20"><name pos:start="43:16" pos:end="43:20">avctx</name></expr></argument>, <argument pos:start="43:23" pos:end="43:34"><expr pos:start="43:23" pos:end="43:34"><name pos:start="43:23" pos:end="43:34">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="43:37" pos:end="43:41"><expr pos:start="43:37" pos:end="43:41"><literal type="string" pos:start="43:37" pos:end="43:41">".\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:60"><expr pos:start="49:5" pos:end="49:59"><call pos:start="49:5" pos:end="49:59"><name pos:start="49:5" pos:end="49:14">av_assert0</name><argument_list pos:start="49:15" pos:end="49:59">(<argument pos:start="49:16" pos:end="49:58"><expr pos:start="49:16" pos:end="49:58"><name pos:start="49:16" pos:end="49:35"><name pos:start="49:16" pos:end="49:18">pic</name><operator pos:start="49:19" pos:end="49:20">-&gt;</operator><name pos:start="49:21" pos:end="49:35">input_available</name></name> <operator pos:start="49:37" pos:end="49:38">&amp;&amp;</operator> <operator pos:start="49:40" pos:end="49:40">!</operator><name pos:start="49:41" pos:end="49:58"><name pos:start="49:41" pos:end="49:43">pic</name><operator pos:start="49:44" pos:end="49:45">-&gt;</operator><name pos:start="49:46" pos:end="49:58">encode_issued</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="51:5" pos:end="69:5">for <control pos:start="51:9" pos:end="51:38">(<init pos:start="51:10" pos:end="51:15"><expr pos:start="51:10" pos:end="51:14"><name pos:start="51:10" pos:end="51:10">i</name> <operator pos:start="51:12" pos:end="51:12">=</operator> <literal type="number" pos:start="51:14" pos:end="51:14">0</literal></expr>;</init> <condition pos:start="51:17" pos:end="51:33"><expr pos:start="51:17" pos:end="51:32"><name pos:start="51:17" pos:end="51:17">i</name> <operator pos:start="51:19" pos:end="51:19">&lt;</operator> <name pos:start="51:21" pos:end="51:32"><name pos:start="51:21" pos:end="51:23">pic</name><operator pos:start="51:24" pos:end="51:25">-&gt;</operator><name pos:start="51:26" pos:end="51:32">nb_refs</name></name></expr>;</condition> <incr pos:start="51:35" pos:end="51:37"><expr pos:start="51:35" pos:end="51:37"><name pos:start="51:35" pos:end="51:35">i</name><operator pos:start="51:36" pos:end="51:37">++</operator></expr></incr>)</control> <block pos:start="51:40" pos:end="69:5">{<block_content pos:start="53:9" pos:end="67:52">

        <expr_stmt pos:start="53:9" pos:end="53:33"><expr pos:start="53:9" pos:end="53:32"><call pos:start="53:9" pos:end="53:32"><name pos:start="53:9" pos:end="53:18">av_assert0</name><argument_list pos:start="53:19" pos:end="53:32">(<argument pos:start="53:20" pos:end="53:31"><expr pos:start="53:20" pos:end="53:31"><name pos:start="53:20" pos:end="53:31"><name pos:start="53:20" pos:end="53:22">pic</name><operator pos:start="53:23" pos:end="53:24">-&gt;</operator><name pos:start="53:25" pos:end="53:28">refs</name><index pos:start="53:29" pos:end="53:31">[<expr pos:start="53:30" pos:end="53:30"><name pos:start="53:30" pos:end="53:30">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line" pos:start="55:9" pos:end="55:69">// If we are serialised then the references must have already</comment>

        <comment type="line" pos:start="57:9" pos:end="57:70">// completed.  If not, they must have been issued but need not</comment>

        <comment type="line" pos:start="59:9" pos:end="59:30">// have completed yet.</comment>

        <if_stmt pos:start="61:9" pos:end="67:52"><if pos:start="61:9" pos:end="63:54">if <condition pos:start="61:12" pos:end="61:63">(<expr pos:start="61:13" pos:end="61:62"><name pos:start="61:13" pos:end="61:27"><name pos:start="61:13" pos:end="61:15">ctx</name><operator pos:start="61:16" pos:end="61:17">-&gt;</operator><name pos:start="61:18" pos:end="61:27">issue_mode</name></name> <operator pos:start="61:29" pos:end="61:30">==</operator> <name pos:start="61:32" pos:end="61:62">ISSUE_MODE_SERIALISE_EVERYTHING</name></expr>)</condition><block type="pseudo" pos:start="63:13" pos:end="63:54"><block_content pos:start="63:13" pos:end="63:54">

            <expr_stmt pos:start="63:13" pos:end="63:54"><expr pos:start="63:13" pos:end="63:53"><call pos:start="63:13" pos:end="63:53"><name pos:start="63:13" pos:end="63:22">av_assert0</name><argument_list pos:start="63:23" pos:end="63:53">(<argument pos:start="63:24" pos:end="63:52"><expr pos:start="63:24" pos:end="63:52"><name pos:start="63:24" pos:end="63:35"><name pos:start="63:24" pos:end="63:26">pic</name><operator pos:start="63:27" pos:end="63:28">-&gt;</operator><name pos:start="63:29" pos:end="63:32">refs</name><index pos:start="63:33" pos:end="63:35">[<expr pos:start="63:34" pos:end="63:34"><name pos:start="63:34" pos:end="63:34">i</name></expr>]</index></name><operator pos:start="63:36" pos:end="63:37">-&gt;</operator><name pos:start="63:38" pos:end="63:52">encode_complete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="65:9" pos:end="67:52">else<block type="pseudo" pos:start="67:13" pos:end="67:52"><block_content pos:start="67:13" pos:end="67:52">

            <expr_stmt pos:start="67:13" pos:end="67:52"><expr pos:start="67:13" pos:end="67:51"><call pos:start="67:13" pos:end="67:51"><name pos:start="67:13" pos:end="67:22">av_assert0</name><argument_list pos:start="67:23" pos:end="67:51">(<argument pos:start="67:24" pos:end="67:50"><expr pos:start="67:24" pos:end="67:50"><name pos:start="67:24" pos:end="67:35"><name pos:start="67:24" pos:end="67:26">pic</name><operator pos:start="67:27" pos:end="67:28">-&gt;</operator><name pos:start="67:29" pos:end="67:32">refs</name><index pos:start="67:33" pos:end="67:35">[<expr pos:start="67:34" pos:end="67:34"><name pos:start="67:34" pos:end="67:34">i</name></expr>]</index></name><operator pos:start="67:36" pos:end="67:37">-&gt;</operator><name pos:start="67:38" pos:end="67:50">encode_issued</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="73:5" pos:end="73:79"><expr pos:start="73:5" pos:end="73:78"><call pos:start="73:5" pos:end="73:78"><name pos:start="73:5" pos:end="73:10">av_log</name><argument_list pos:start="73:11" pos:end="73:78">(<argument pos:start="73:12" pos:end="73:16"><expr pos:start="73:12" pos:end="73:16"><name pos:start="73:12" pos:end="73:16">avctx</name></expr></argument>, <argument pos:start="73:19" pos:end="73:30"><expr pos:start="73:19" pos:end="73:30"><name pos:start="73:19" pos:end="73:30">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="73:33" pos:end="73:57"><expr pos:start="73:33" pos:end="73:57"><literal type="string" pos:start="73:33" pos:end="73:57">"Input surface is %#x.\n"</literal></expr></argument>, <argument pos:start="73:60" pos:end="73:77"><expr pos:start="73:60" pos:end="73:77"><name pos:start="73:60" pos:end="73:77"><name pos:start="73:60" pos:end="73:62">pic</name><operator pos:start="73:63" pos:end="73:64">-&gt;</operator><name pos:start="73:65" pos:end="73:77">input_surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:40"><expr pos:start="77:5" pos:end="77:39"><name pos:start="77:5" pos:end="77:20"><name pos:start="77:5" pos:end="77:7">pic</name><operator pos:start="77:8" pos:end="77:9">-&gt;</operator><name pos:start="77:10" pos:end="77:20">recon_image</name></name> <operator pos:start="77:22" pos:end="77:22">=</operator> <call pos:start="77:24" pos:end="77:39"><name pos:start="77:24" pos:end="77:37">av_frame_alloc</name><argument_list pos:start="77:38" pos:end="77:39">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="79:5" pos:end="85:5"><if pos:start="79:5" pos:end="85:5">if <condition pos:start="79:8" pos:end="79:26">(<expr pos:start="79:9" pos:end="79:25"><operator pos:start="79:9" pos:end="79:9">!</operator><name pos:start="79:10" pos:end="79:25"><name pos:start="79:10" pos:end="79:12">pic</name><operator pos:start="79:13" pos:end="79:14">-&gt;</operator><name pos:start="79:15" pos:end="79:25">recon_image</name></name></expr>)</condition> <block pos:start="79:28" pos:end="85:5">{<block_content pos:start="81:9" pos:end="83:18">

        <expr_stmt pos:start="81:9" pos:end="81:30"><expr pos:start="81:9" pos:end="81:29"><name pos:start="81:9" pos:end="81:11">err</name> <operator pos:start="81:13" pos:end="81:13">=</operator> <call pos:start="81:15" pos:end="81:29"><name pos:start="81:15" pos:end="81:21">AVERROR</name><argument_list pos:start="81:22" pos:end="81:29">(<argument pos:start="81:23" pos:end="81:28"><expr pos:start="81:23" pos:end="81:28"><name pos:start="81:23" pos:end="81:28">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="83:9" pos:end="83:18">goto <name pos:start="83:14" pos:end="83:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="89:5" pos:end="89:76"><expr pos:start="89:5" pos:end="89:75"><name pos:start="89:5" pos:end="89:7">err</name> <operator pos:start="89:9" pos:end="89:9">=</operator> <call pos:start="89:11" pos:end="89:75"><name pos:start="89:11" pos:end="89:31">av_hwframe_get_buffer</name><argument_list pos:start="89:32" pos:end="89:75">(<argument pos:start="89:33" pos:end="89:53"><expr pos:start="89:33" pos:end="89:53"><name pos:start="89:33" pos:end="89:53"><name pos:start="89:33" pos:end="89:35">ctx</name><operator pos:start="89:36" pos:end="89:37">-&gt;</operator><name pos:start="89:38" pos:end="89:53">recon_frames_ref</name></name></expr></argument>, <argument pos:start="89:56" pos:end="89:71"><expr pos:start="89:56" pos:end="89:71"><name pos:start="89:56" pos:end="89:71"><name pos:start="89:56" pos:end="89:58">pic</name><operator pos:start="89:59" pos:end="89:60">-&gt;</operator><name pos:start="89:61" pos:end="89:71">recon_image</name></name></expr></argument>, <argument pos:start="89:74" pos:end="89:74"><expr pos:start="89:74" pos:end="89:74"><literal type="number" pos:start="89:74" pos:end="89:74">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="91:5" pos:end="97:5"><if pos:start="91:5" pos:end="97:5">if <condition pos:start="91:8" pos:end="91:16">(<expr pos:start="91:9" pos:end="91:15"><name pos:start="91:9" pos:end="91:11">err</name> <operator pos:start="91:13" pos:end="91:13">&lt;</operator> <literal type="number" pos:start="91:15" pos:end="91:15">0</literal></expr>)</condition> <block pos:start="91:18" pos:end="97:5">{<block_content pos:start="93:9" pos:end="95:18">

        <expr_stmt pos:start="93:9" pos:end="93:30"><expr pos:start="93:9" pos:end="93:29"><name pos:start="93:9" pos:end="93:11">err</name> <operator pos:start="93:13" pos:end="93:13">=</operator> <call pos:start="93:15" pos:end="93:29"><name pos:start="93:15" pos:end="93:21">AVERROR</name><argument_list pos:start="93:22" pos:end="93:29">(<argument pos:start="93:23" pos:end="93:28"><expr pos:start="93:23" pos:end="93:28"><name pos:start="93:23" pos:end="93:28">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="95:9" pos:end="95:18">goto <name pos:start="95:14" pos:end="95:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:75"><expr pos:start="99:5" pos:end="99:74"><name pos:start="99:5" pos:end="99:22"><name pos:start="99:5" pos:end="99:7">pic</name><operator pos:start="99:8" pos:end="99:9">-&gt;</operator><name pos:start="99:10" pos:end="99:22">recon_surface</name></name> <operator pos:start="99:24" pos:end="99:24">=</operator> <operator pos:start="99:26" pos:end="99:26">(</operator><name pos:start="99:27" pos:end="99:37">VASurfaceID</name><operator pos:start="99:38" pos:end="99:38">)</operator><operator pos:start="99:39" pos:end="99:39">(</operator><name pos:start="99:40" pos:end="99:48">uintptr_t</name><operator pos:start="99:49" pos:end="99:49">)</operator><name pos:start="99:50" pos:end="99:74"><name pos:start="99:50" pos:end="99:52">pic</name><operator pos:start="99:53" pos:end="99:54">-&gt;</operator><name pos:start="99:55" pos:end="99:65">recon_image</name><operator pos:start="99:66" pos:end="99:67">-&gt;</operator><name pos:start="99:68" pos:end="99:71">data</name><index pos:start="99:72" pos:end="99:74">[<expr pos:start="99:73" pos:end="99:73"><literal type="number" pos:start="99:73" pos:end="99:73">3</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:79"><expr pos:start="101:5" pos:end="101:78"><call pos:start="101:5" pos:end="101:78"><name pos:start="101:5" pos:end="101:10">av_log</name><argument_list pos:start="101:11" pos:end="101:78">(<argument pos:start="101:12" pos:end="101:16"><expr pos:start="101:12" pos:end="101:16"><name pos:start="101:12" pos:end="101:16">avctx</name></expr></argument>, <argument pos:start="101:19" pos:end="101:30"><expr pos:start="101:19" pos:end="101:30"><name pos:start="101:19" pos:end="101:30">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="101:33" pos:end="101:57"><expr pos:start="101:33" pos:end="101:57"><literal type="string" pos:start="101:33" pos:end="101:57">"Recon surface is %#x.\n"</literal></expr></argument>, <argument pos:start="101:60" pos:end="101:77"><expr pos:start="101:60" pos:end="101:77"><name pos:start="101:60" pos:end="101:77"><name pos:start="101:60" pos:end="101:62">pic</name><operator pos:start="101:63" pos:end="101:64">-&gt;</operator><name pos:start="101:65" pos:end="101:77">recon_surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="105:5" pos:end="105:73"><expr pos:start="105:5" pos:end="105:72"><name pos:start="105:5" pos:end="105:26"><name pos:start="105:5" pos:end="105:7">pic</name><operator pos:start="105:8" pos:end="105:9">-&gt;</operator><name pos:start="105:10" pos:end="105:26">output_buffer_ref</name></name> <operator pos:start="105:28" pos:end="105:28">=</operator> <call pos:start="105:30" pos:end="105:72"><name pos:start="105:30" pos:end="105:47">av_buffer_pool_get</name><argument_list pos:start="105:48" pos:end="105:72">(<argument pos:start="105:49" pos:end="105:71"><expr pos:start="105:49" pos:end="105:71"><name pos:start="105:49" pos:end="105:71"><name pos:start="105:49" pos:end="105:51">ctx</name><operator pos:start="105:52" pos:end="105:53">-&gt;</operator><name pos:start="105:54" pos:end="105:71">output_buffer_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="107:5" pos:end="113:5"><if pos:start="107:5" pos:end="113:5">if <condition pos:start="107:8" pos:end="107:32">(<expr pos:start="107:9" pos:end="107:31"><operator pos:start="107:9" pos:end="107:9">!</operator><name pos:start="107:10" pos:end="107:31"><name pos:start="107:10" pos:end="107:12">pic</name><operator pos:start="107:13" pos:end="107:14">-&gt;</operator><name pos:start="107:15" pos:end="107:31">output_buffer_ref</name></name></expr>)</condition> <block pos:start="107:34" pos:end="113:5">{<block_content pos:start="109:9" pos:end="111:18">

        <expr_stmt pos:start="109:9" pos:end="109:30"><expr pos:start="109:9" pos:end="109:29"><name pos:start="109:9" pos:end="109:11">err</name> <operator pos:start="109:13" pos:end="109:13">=</operator> <call pos:start="109:15" pos:end="109:29"><name pos:start="109:15" pos:end="109:21">AVERROR</name><argument_list pos:start="109:22" pos:end="109:29">(<argument pos:start="109:23" pos:end="109:28"><expr pos:start="109:23" pos:end="109:28"><name pos:start="109:23" pos:end="109:28">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="111:9" pos:end="111:18">goto <name pos:start="111:14" pos:end="111:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:77"><expr pos:start="115:5" pos:end="115:76"><name pos:start="115:5" pos:end="115:22"><name pos:start="115:5" pos:end="115:7">pic</name><operator pos:start="115:8" pos:end="115:9">-&gt;</operator><name pos:start="115:10" pos:end="115:22">output_buffer</name></name> <operator pos:start="115:24" pos:end="115:24">=</operator> <operator pos:start="115:26" pos:end="115:26">(</operator><name pos:start="115:27" pos:end="115:36">VABufferID</name><operator pos:start="115:37" pos:end="115:37">)</operator><operator pos:start="115:38" pos:end="115:38">(</operator><name pos:start="115:39" pos:end="115:47">uintptr_t</name><operator pos:start="115:48" pos:end="115:48">)</operator><name pos:start="115:49" pos:end="115:76"><name pos:start="115:49" pos:end="115:51">pic</name><operator pos:start="115:52" pos:end="115:53">-&gt;</operator><name pos:start="115:54" pos:end="115:70">output_buffer_ref</name><operator pos:start="115:71" pos:end="115:72">-&gt;</operator><name pos:start="115:73" pos:end="115:76">data</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="119:31"><expr pos:start="117:5" pos:end="119:30"><call pos:start="117:5" pos:end="119:30"><name pos:start="117:5" pos:end="117:10">av_log</name><argument_list pos:start="117:11" pos:end="119:30">(<argument pos:start="117:12" pos:end="117:16"><expr pos:start="117:12" pos:end="117:16"><name pos:start="117:12" pos:end="117:16">avctx</name></expr></argument>, <argument pos:start="117:19" pos:end="117:30"><expr pos:start="117:19" pos:end="117:30"><name pos:start="117:19" pos:end="117:30">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="117:33" pos:end="117:57"><expr pos:start="117:33" pos:end="117:57"><literal type="string" pos:start="117:33" pos:end="117:57">"Output buffer is %#x.\n"</literal></expr></argument>,

           <argument pos:start="119:12" pos:end="119:29"><expr pos:start="119:12" pos:end="119:29"><name pos:start="119:12" pos:end="119:29"><name pos:start="119:12" pos:end="119:14">pic</name><operator pos:start="119:15" pos:end="119:16">-&gt;</operator><name pos:start="119:17" pos:end="119:29">output_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="123:5" pos:end="139:5"><if pos:start="123:5" pos:end="135:5">if <condition pos:start="123:8" pos:end="123:44">(<expr pos:start="123:9" pos:end="123:43"><name pos:start="123:9" pos:end="123:39"><name pos:start="123:9" pos:end="123:11">ctx</name><operator pos:start="123:12" pos:end="123:13">-&gt;</operator><name pos:start="123:14" pos:end="123:18">codec</name><operator pos:start="123:19" pos:end="123:20">-&gt;</operator><name pos:start="123:21" pos:end="123:39">picture_params_size</name></name> <operator pos:start="123:41" pos:end="123:41">&gt;</operator> <literal type="number" pos:start="123:43" pos:end="123:43">0</literal></expr>)</condition> <block pos:start="123:46" pos:end="135:5">{<block_content pos:start="125:9" pos:end="133:48">

        <expr_stmt pos:start="125:9" pos:end="125:79"><expr pos:start="125:9" pos:end="125:78"><name pos:start="125:9" pos:end="125:33"><name pos:start="125:9" pos:end="125:11">pic</name><operator pos:start="125:12" pos:end="125:13">-&gt;</operator><name pos:start="125:14" pos:end="125:33">codec_picture_params</name></name> <operator pos:start="125:35" pos:end="125:35">=</operator> <call pos:start="125:37" pos:end="125:78"><name pos:start="125:37" pos:end="125:45">av_malloc</name><argument_list pos:start="125:46" pos:end="125:78">(<argument pos:start="125:47" pos:end="125:77"><expr pos:start="125:47" pos:end="125:77"><name pos:start="125:47" pos:end="125:77"><name pos:start="125:47" pos:end="125:49">ctx</name><operator pos:start="125:50" pos:end="125:51">-&gt;</operator><name pos:start="125:52" pos:end="125:56">codec</name><operator pos:start="125:57" pos:end="125:58">-&gt;</operator><name pos:start="125:59" pos:end="125:77">picture_params_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="127:9" pos:end="129:22"><if pos:start="127:9" pos:end="129:22">if <condition pos:start="127:12" pos:end="127:39">(<expr pos:start="127:13" pos:end="127:38"><operator pos:start="127:13" pos:end="127:13">!</operator><name pos:start="127:14" pos:end="127:38"><name pos:start="127:14" pos:end="127:16">pic</name><operator pos:start="127:17" pos:end="127:18">-&gt;</operator><name pos:start="127:19" pos:end="127:38">codec_picture_params</name></name></expr>)</condition><block type="pseudo" pos:start="129:13" pos:end="129:22"><block_content pos:start="129:13" pos:end="129:22">

            <goto pos:start="129:13" pos:end="129:22">goto <name pos:start="129:18" pos:end="129:21">fail</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="131:9" pos:end="133:48"><expr pos:start="131:9" pos:end="133:47"><call pos:start="131:9" pos:end="133:47"><name pos:start="131:9" pos:end="131:14">memcpy</name><argument_list pos:start="131:15" pos:end="133:47">(<argument pos:start="131:16" pos:end="131:40"><expr pos:start="131:16" pos:end="131:40"><name pos:start="131:16" pos:end="131:40"><name pos:start="131:16" pos:end="131:18">pic</name><operator pos:start="131:19" pos:end="131:20">-&gt;</operator><name pos:start="131:21" pos:end="131:40">codec_picture_params</name></name></expr></argument>, <argument pos:start="131:43" pos:end="131:67"><expr pos:start="131:43" pos:end="131:67"><name pos:start="131:43" pos:end="131:67"><name pos:start="131:43" pos:end="131:45">ctx</name><operator pos:start="131:46" pos:end="131:47">-&gt;</operator><name pos:start="131:48" pos:end="131:67">codec_picture_params</name></name></expr></argument>,

               <argument pos:start="133:16" pos:end="133:46"><expr pos:start="133:16" pos:end="133:46"><name pos:start="133:16" pos:end="133:46"><name pos:start="133:16" pos:end="133:18">ctx</name><operator pos:start="133:19" pos:end="133:20">-&gt;</operator><name pos:start="133:21" pos:end="133:25">codec</name><operator pos:start="133:26" pos:end="133:27">-&gt;</operator><name pos:start="133:28" pos:end="133:46">picture_params_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="135:7" pos:end="139:5">else <block pos:start="135:12" pos:end="139:5">{<block_content pos:start="137:9" pos:end="137:47">

        <expr_stmt pos:start="137:9" pos:end="137:47"><expr pos:start="137:9" pos:end="137:46"><call pos:start="137:9" pos:end="137:46"><name pos:start="137:9" pos:end="137:18">av_assert0</name><argument_list pos:start="137:19" pos:end="137:46">(<argument pos:start="137:20" pos:end="137:45"><expr pos:start="137:20" pos:end="137:45"><operator pos:start="137:20" pos:end="137:20">!</operator><name pos:start="137:21" pos:end="137:45"><name pos:start="137:21" pos:end="137:23">ctx</name><operator pos:start="137:24" pos:end="137:25">-&gt;</operator><name pos:start="137:26" pos:end="137:45">codec_picture_params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="143:5" pos:end="143:30"><expr pos:start="143:5" pos:end="143:29"><name pos:start="143:5" pos:end="143:25"><name pos:start="143:5" pos:end="143:7">pic</name><operator pos:start="143:8" pos:end="143:9">-&gt;</operator><name pos:start="143:10" pos:end="143:25">nb_param_buffers</name></name> <operator pos:start="143:27" pos:end="143:27">=</operator> <literal type="number" pos:start="143:29" pos:end="143:29">0</literal></expr>;</expr_stmt>



    <if_stmt pos:start="147:5" pos:end="169:5"><if pos:start="147:5" pos:end="169:5">if <condition pos:start="147:8" pos:end="147:31">(<expr pos:start="147:9" pos:end="147:30"><name pos:start="147:9" pos:end="147:25"><name pos:start="147:9" pos:end="147:11">pic</name><operator pos:start="147:12" pos:end="147:13">-&gt;</operator><name pos:start="147:14" pos:end="147:25">encode_order</name></name> <operator pos:start="147:27" pos:end="147:28">==</operator> <literal type="number" pos:start="147:30" pos:end="147:30">0</literal></expr>)</condition> <block pos:start="147:33" pos:end="169:5">{<block_content pos:start="153:9" pos:end="167:9">

        <comment type="line" pos:start="149:9" pos:end="149:70">// Global parameter buffers are set on the first picture only.</comment>



        <for pos:start="153:9" pos:end="167:9">for <control pos:start="153:13" pos:end="153:51">(<init pos:start="153:14" pos:end="153:19"><expr pos:start="153:14" pos:end="153:18"><name pos:start="153:14" pos:end="153:14">i</name> <operator pos:start="153:16" pos:end="153:16">=</operator> <literal type="number" pos:start="153:18" pos:end="153:18">0</literal></expr>;</init> <condition pos:start="153:21" pos:end="153:46"><expr pos:start="153:21" pos:end="153:45"><name pos:start="153:21" pos:end="153:21">i</name> <operator pos:start="153:23" pos:end="153:23">&lt;</operator> <name pos:start="153:25" pos:end="153:45"><name pos:start="153:25" pos:end="153:27">ctx</name><operator pos:start="153:28" pos:end="153:29">-&gt;</operator><name pos:start="153:30" pos:end="153:45">nb_global_params</name></name></expr>;</condition> <incr pos:start="153:48" pos:end="153:50"><expr pos:start="153:48" pos:end="153:50"><name pos:start="153:48" pos:end="153:48">i</name><operator pos:start="153:49" pos:end="153:50">++</operator></expr></incr>)</control> <block pos:start="153:53" pos:end="167:9">{<block_content pos:start="155:13" pos:end="165:26">

            <expr_stmt pos:start="155:13" pos:end="161:77"><expr pos:start="155:13" pos:end="161:76"><name pos:start="155:13" pos:end="155:15">err</name> <operator pos:start="155:17" pos:end="155:17">=</operator> <call pos:start="155:19" pos:end="161:76"><name pos:start="155:19" pos:end="155:48">vaapi_encode_make_param_buffer</name><argument_list pos:start="155:49" pos:end="161:76">(<argument pos:start="155:50" pos:end="155:54"><expr pos:start="155:50" pos:end="155:54"><name pos:start="155:50" pos:end="155:54">avctx</name></expr></argument>, <argument pos:start="155:57" pos:end="155:59"><expr pos:start="155:57" pos:end="155:59"><name pos:start="155:57" pos:end="155:59">pic</name></expr></argument>,

                                                 <argument pos:start="157:50" pos:end="157:77"><expr pos:start="157:50" pos:end="157:77"><name pos:start="157:50" pos:end="157:77">VAEncMiscParameterBufferType</name></expr></argument>,

                                                 <argument pos:start="159:50" pos:end="159:77"><expr pos:start="159:50" pos:end="159:77"><operator pos:start="159:50" pos:end="159:50">(</operator><name pos:start="159:51" pos:end="159:54">char</name><operator pos:start="159:55" pos:end="159:55">*</operator><operator pos:start="159:56" pos:end="159:56">)</operator><name pos:start="159:57" pos:end="159:77"><name pos:start="159:57" pos:end="159:59">ctx</name><operator pos:start="159:60" pos:end="159:61">-&gt;</operator><name pos:start="159:62" pos:end="159:74">global_params</name><index pos:start="159:75" pos:end="159:77">[<expr pos:start="159:76" pos:end="159:76"><name pos:start="159:76" pos:end="159:76">i</name></expr>]</index></name></expr></argument>,

                                                 <argument pos:start="161:50" pos:end="161:75"><expr pos:start="161:50" pos:end="161:75"><name pos:start="161:50" pos:end="161:75"><name pos:start="161:50" pos:end="161:52">ctx</name><operator pos:start="161:53" pos:end="161:54">-&gt;</operator><name pos:start="161:55" pos:end="161:72">global_params_size</name><index pos:start="161:73" pos:end="161:75">[<expr pos:start="161:74" pos:end="161:74"><name pos:start="161:74" pos:end="161:74">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="163:13" pos:end="165:26"><if pos:start="163:13" pos:end="165:26">if <condition pos:start="163:16" pos:end="163:24">(<expr pos:start="163:17" pos:end="163:23"><name pos:start="163:17" pos:end="163:19">err</name> <operator pos:start="163:21" pos:end="163:21">&lt;</operator> <literal type="number" pos:start="163:23" pos:end="163:23">0</literal></expr>)</condition><block type="pseudo" pos:start="165:17" pos:end="165:26"><block_content pos:start="165:17" pos:end="165:26">

                <goto pos:start="165:17" pos:end="165:26">goto <name pos:start="165:22" pos:end="165:25">fail</name>;</goto></block_content></block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="173:5" pos:end="187:5"><if pos:start="173:5" pos:end="187:5">if <condition pos:start="173:8" pos:end="173:74">(<expr pos:start="173:9" pos:end="173:73"><name pos:start="173:9" pos:end="173:17"><name pos:start="173:9" pos:end="173:11">pic</name><operator pos:start="173:12" pos:end="173:13">-&gt;</operator><name pos:start="173:14" pos:end="173:17">type</name></name> <operator pos:start="173:19" pos:end="173:20">==</operator> <name pos:start="173:22" pos:end="173:37">PICTURE_TYPE_IDR</name> <operator pos:start="173:39" pos:end="173:40">&amp;&amp;</operator> <name pos:start="173:42" pos:end="173:73"><name pos:start="173:42" pos:end="173:44">ctx</name><operator pos:start="173:45" pos:end="173:46">-&gt;</operator><name pos:start="173:47" pos:end="173:51">codec</name><operator pos:start="173:52" pos:end="173:53">-&gt;</operator><name pos:start="173:54" pos:end="173:73">init_sequence_params</name></name></expr>)</condition> <block pos:start="173:76" pos:end="187:5">{<block_content pos:start="175:9" pos:end="185:22">

        <expr_stmt pos:start="175:9" pos:end="181:79"><expr pos:start="175:9" pos:end="181:78"><name pos:start="175:9" pos:end="175:11">err</name> <operator pos:start="175:13" pos:end="175:13">=</operator> <call pos:start="175:15" pos:end="181:78"><name pos:start="175:15" pos:end="175:44">vaapi_encode_make_param_buffer</name><argument_list pos:start="175:45" pos:end="181:78">(<argument pos:start="175:46" pos:end="175:50"><expr pos:start="175:46" pos:end="175:50"><name pos:start="175:46" pos:end="175:50">avctx</name></expr></argument>, <argument pos:start="175:53" pos:end="175:55"><expr pos:start="175:53" pos:end="175:55"><name pos:start="175:53" pos:end="175:55">pic</name></expr></argument>,

                                             <argument pos:start="177:46" pos:end="177:77"><expr pos:start="177:46" pos:end="177:77"><name pos:start="177:46" pos:end="177:77">VAEncSequenceParameterBufferType</name></expr></argument>,

                                             <argument pos:start="179:46" pos:end="179:71"><expr pos:start="179:46" pos:end="179:71"><name pos:start="179:46" pos:end="179:71"><name pos:start="179:46" pos:end="179:48">ctx</name><operator pos:start="179:49" pos:end="179:50">-&gt;</operator><name pos:start="179:51" pos:end="179:71">codec_sequence_params</name></name></expr></argument>,

                                             <argument pos:start="181:46" pos:end="181:77"><expr pos:start="181:46" pos:end="181:77"><name pos:start="181:46" pos:end="181:77"><name pos:start="181:46" pos:end="181:48">ctx</name><operator pos:start="181:49" pos:end="181:50">-&gt;</operator><name pos:start="181:51" pos:end="181:55">codec</name><operator pos:start="181:56" pos:end="181:57">-&gt;</operator><name pos:start="181:58" pos:end="181:77">sequence_params_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="183:9" pos:end="185:22"><if pos:start="183:9" pos:end="185:22">if <condition pos:start="183:12" pos:end="183:20">(<expr pos:start="183:13" pos:end="183:19"><name pos:start="183:13" pos:end="183:15">err</name> <operator pos:start="183:17" pos:end="183:17">&lt;</operator> <literal type="number" pos:start="183:19" pos:end="183:19">0</literal></expr>)</condition><block type="pseudo" pos:start="185:13" pos:end="185:22"><block_content pos:start="185:13" pos:end="185:22">

            <goto pos:start="185:13" pos:end="185:22">goto <name pos:start="185:18" pos:end="185:21">fail</name>;</goto></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="191:5" pos:end="217:5"><if pos:start="191:5" pos:end="217:5">if <condition pos:start="191:8" pos:end="191:40">(<expr pos:start="191:9" pos:end="191:39"><name pos:start="191:9" pos:end="191:39"><name pos:start="191:9" pos:end="191:11">ctx</name><operator pos:start="191:12" pos:end="191:13">-&gt;</operator><name pos:start="191:14" pos:end="191:18">codec</name><operator pos:start="191:19" pos:end="191:20">-&gt;</operator><name pos:start="191:21" pos:end="191:39">init_picture_params</name></name></expr>)</condition> <block pos:start="191:42" pos:end="217:5">{<block_content pos:start="193:9" pos:end="215:22">

        <expr_stmt pos:start="193:9" pos:end="193:58"><expr pos:start="193:9" pos:end="193:57"><name pos:start="193:9" pos:end="193:11">err</name> <operator pos:start="193:13" pos:end="193:13">=</operator> <call pos:start="193:15" pos:end="193:57"><name pos:start="193:15" pos:end="193:45"><name pos:start="193:15" pos:end="193:17">ctx</name><operator pos:start="193:18" pos:end="193:19">-&gt;</operator><name pos:start="193:20" pos:end="193:24">codec</name><operator pos:start="193:25" pos:end="193:26">-&gt;</operator><name pos:start="193:27" pos:end="193:45">init_picture_params</name></name><argument_list pos:start="193:46" pos:end="193:57">(<argument pos:start="193:47" pos:end="193:51"><expr pos:start="193:47" pos:end="193:51"><name pos:start="193:47" pos:end="193:51">avctx</name></expr></argument>, <argument pos:start="193:54" pos:end="193:56"><expr pos:start="193:54" pos:end="193:56"><name pos:start="193:54" pos:end="193:56">pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="195:9" pos:end="203:9"><if pos:start="195:9" pos:end="203:9">if <condition pos:start="195:12" pos:end="195:20">(<expr pos:start="195:13" pos:end="195:19"><name pos:start="195:13" pos:end="195:15">err</name> <operator pos:start="195:17" pos:end="195:17">&lt;</operator> <literal type="number" pos:start="195:19" pos:end="195:19">0</literal></expr>)</condition> <block pos:start="195:22" pos:end="203:9">{<block_content pos:start="197:13" pos:end="201:22">

            <expr_stmt pos:start="197:13" pos:end="199:45"><expr pos:start="197:13" pos:end="199:44"><call pos:start="197:13" pos:end="199:44"><name pos:start="197:13" pos:end="197:18">av_log</name><argument_list pos:start="197:19" pos:end="199:44">(<argument pos:start="197:20" pos:end="197:24"><expr pos:start="197:20" pos:end="197:24"><name pos:start="197:20" pos:end="197:24">avctx</name></expr></argument>, <argument pos:start="197:27" pos:end="197:38"><expr pos:start="197:27" pos:end="197:38"><name pos:start="197:27" pos:end="197:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="197:41" pos:end="199:38"><expr pos:start="197:41" pos:end="199:38"><literal type="string" pos:start="197:41" pos:end="197:71">"Failed to initialise picture "</literal>

                   <literal type="string" pos:start="199:20" pos:end="199:38">"parameters: %d.\n"</literal></expr></argument>, <argument pos:start="199:41" pos:end="199:43"><expr pos:start="199:41" pos:end="199:43"><name pos:start="199:41" pos:end="199:43">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="201:13" pos:end="201:22">goto <name pos:start="201:18" pos:end="201:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="205:9" pos:end="211:78"><expr pos:start="205:9" pos:end="211:77"><name pos:start="205:9" pos:end="205:11">err</name> <operator pos:start="205:13" pos:end="205:13">=</operator> <call pos:start="205:15" pos:end="211:77"><name pos:start="205:15" pos:end="205:44">vaapi_encode_make_param_buffer</name><argument_list pos:start="205:45" pos:end="211:77">(<argument pos:start="205:46" pos:end="205:50"><expr pos:start="205:46" pos:end="205:50"><name pos:start="205:46" pos:end="205:50">avctx</name></expr></argument>, <argument pos:start="205:53" pos:end="205:55"><expr pos:start="205:53" pos:end="205:55"><name pos:start="205:53" pos:end="205:55">pic</name></expr></argument>,

                                             <argument pos:start="207:46" pos:end="207:76"><expr pos:start="207:46" pos:end="207:76"><name pos:start="207:46" pos:end="207:76">VAEncPictureParameterBufferType</name></expr></argument>,

                                             <argument pos:start="209:46" pos:end="209:70"><expr pos:start="209:46" pos:end="209:70"><name pos:start="209:46" pos:end="209:70"><name pos:start="209:46" pos:end="209:48">pic</name><operator pos:start="209:49" pos:end="209:50">-&gt;</operator><name pos:start="209:51" pos:end="209:70">codec_picture_params</name></name></expr></argument>,

                                             <argument pos:start="211:46" pos:end="211:76"><expr pos:start="211:46" pos:end="211:76"><name pos:start="211:46" pos:end="211:76"><name pos:start="211:46" pos:end="211:48">ctx</name><operator pos:start="211:49" pos:end="211:50">-&gt;</operator><name pos:start="211:51" pos:end="211:55">codec</name><operator pos:start="211:56" pos:end="211:57">-&gt;</operator><name pos:start="211:58" pos:end="211:76">picture_params_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="213:9" pos:end="215:22"><if pos:start="213:9" pos:end="215:22">if <condition pos:start="213:12" pos:end="213:20">(<expr pos:start="213:13" pos:end="213:19"><name pos:start="213:13" pos:end="213:15">err</name> <operator pos:start="213:17" pos:end="213:17">&lt;</operator> <literal type="number" pos:start="213:19" pos:end="213:19">0</literal></expr>)</condition><block type="pseudo" pos:start="215:13" pos:end="215:22"><block_content pos:start="215:13" pos:end="215:22">

            <goto pos:start="215:13" pos:end="215:22">goto <name pos:start="215:18" pos:end="215:21">fail</name>;</goto></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="221:5" pos:end="253:5"><if pos:start="221:5" pos:end="253:5">if <condition pos:start="221:8" pos:end="221:38">(<expr pos:start="221:9" pos:end="221:37"><name pos:start="221:9" pos:end="221:17"><name pos:start="221:9" pos:end="221:11">pic</name><operator pos:start="221:12" pos:end="221:13">-&gt;</operator><name pos:start="221:14" pos:end="221:17">type</name></name> <operator pos:start="221:19" pos:end="221:20">==</operator> <name pos:start="221:22" pos:end="221:37">PICTURE_TYPE_IDR</name></expr>)</condition> <block pos:start="221:40" pos:end="253:5">{<block_content pos:start="223:9" pos:end="251:9">

        <if_stmt pos:start="223:9" pos:end="251:9"><if pos:start="223:9" pos:end="251:9">if <condition pos:start="223:12" pos:end="225:46">(<expr pos:start="223:13" pos:end="225:45"><name pos:start="223:13" pos:end="223:34"><name pos:start="223:13" pos:end="223:15">ctx</name><operator pos:start="223:16" pos:end="223:17">-&gt;</operator><name pos:start="223:18" pos:end="223:34">va_packed_headers</name></name> <operator pos:start="223:36" pos:end="223:36">&amp;</operator> <name pos:start="223:38" pos:end="223:66">VA_ENC_PACKED_HEADER_SEQUENCE</name> <operator pos:start="223:68" pos:end="223:69">&amp;&amp;</operator>

            <name pos:start="225:13" pos:end="225:45"><name pos:start="225:13" pos:end="225:15">ctx</name><operator pos:start="225:16" pos:end="225:17">-&gt;</operator><name pos:start="225:18" pos:end="225:22">codec</name><operator pos:start="225:23" pos:end="225:24">-&gt;</operator><name pos:start="225:25" pos:end="225:45">write_sequence_header</name></name></expr>)</condition> <block pos:start="225:48" pos:end="251:9">{<block_content pos:start="227:13" pos:end="249:26">

            <expr_stmt pos:start="227:13" pos:end="227:39"><expr pos:start="227:13" pos:end="227:38"><name pos:start="227:13" pos:end="227:19">bit_len</name> <operator pos:start="227:21" pos:end="227:21">=</operator> <literal type="number" pos:start="227:23" pos:end="227:23">8</literal> <operator pos:start="227:25" pos:end="227:25">*</operator> <sizeof pos:start="227:27" pos:end="227:38">sizeof<argument_list pos:start="227:33" pos:end="227:38">(<argument pos:start="227:34" pos:end="227:37"><expr pos:start="227:34" pos:end="227:37"><name pos:start="227:34" pos:end="227:37">data</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

            <expr_stmt pos:start="229:13" pos:end="229:75"><expr pos:start="229:13" pos:end="229:74"><name pos:start="229:13" pos:end="229:15">err</name> <operator pos:start="229:17" pos:end="229:17">=</operator> <call pos:start="229:19" pos:end="229:74"><name pos:start="229:19" pos:end="229:51"><name pos:start="229:19" pos:end="229:21">ctx</name><operator pos:start="229:22" pos:end="229:23">-&gt;</operator><name pos:start="229:24" pos:end="229:28">codec</name><operator pos:start="229:29" pos:end="229:30">-&gt;</operator><name pos:start="229:31" pos:end="229:51">write_sequence_header</name></name><argument_list pos:start="229:52" pos:end="229:74">(<argument pos:start="229:53" pos:end="229:57"><expr pos:start="229:53" pos:end="229:57"><name pos:start="229:53" pos:end="229:57">avctx</name></expr></argument>, <argument pos:start="229:60" pos:end="229:63"><expr pos:start="229:60" pos:end="229:63"><name pos:start="229:60" pos:end="229:63">data</name></expr></argument>, <argument pos:start="229:66" pos:end="229:73"><expr pos:start="229:66" pos:end="229:73"><operator pos:start="229:66" pos:end="229:66">&amp;</operator><name pos:start="229:67" pos:end="229:73">bit_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="231:13" pos:end="239:13"><if pos:start="231:13" pos:end="239:13">if <condition pos:start="231:16" pos:end="231:24">(<expr pos:start="231:17" pos:end="231:23"><name pos:start="231:17" pos:end="231:19">err</name> <operator pos:start="231:21" pos:end="231:21">&lt;</operator> <literal type="number" pos:start="231:23" pos:end="231:23">0</literal></expr>)</condition> <block pos:start="231:26" pos:end="239:13">{<block_content pos:start="233:17" pos:end="237:26">

                <expr_stmt pos:start="233:17" pos:end="235:45"><expr pos:start="233:17" pos:end="235:44"><call pos:start="233:17" pos:end="235:44"><name pos:start="233:17" pos:end="233:22">av_log</name><argument_list pos:start="233:23" pos:end="235:44">(<argument pos:start="233:24" pos:end="233:28"><expr pos:start="233:24" pos:end="233:28"><name pos:start="233:24" pos:end="233:28">avctx</name></expr></argument>, <argument pos:start="233:31" pos:end="233:42"><expr pos:start="233:31" pos:end="233:42"><name pos:start="233:31" pos:end="233:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="233:45" pos:end="235:38"><expr pos:start="233:45" pos:end="235:38"><literal type="string" pos:start="233:45" pos:end="233:75">"Failed to write per-sequence "</literal>

                       <literal type="string" pos:start="235:24" pos:end="235:38">"header: %d.\n"</literal></expr></argument>, <argument pos:start="235:41" pos:end="235:43"><expr pos:start="235:41" pos:end="235:43"><name pos:start="235:41" pos:end="235:43">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="237:17" pos:end="237:26">goto <name pos:start="237:22" pos:end="237:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="241:13" pos:end="245:65"><expr pos:start="241:13" pos:end="245:64"><name pos:start="241:13" pos:end="241:15">err</name> <operator pos:start="241:17" pos:end="241:17">=</operator> <call pos:start="241:19" pos:end="245:64"><name pos:start="241:19" pos:end="241:49">vaapi_encode_make_packed_header</name><argument_list pos:start="241:50" pos:end="245:64">(<argument pos:start="241:51" pos:end="241:55"><expr pos:start="241:51" pos:end="241:55"><name pos:start="241:51" pos:end="241:55">avctx</name></expr></argument>, <argument pos:start="241:58" pos:end="241:60"><expr pos:start="241:58" pos:end="241:60"><name pos:start="241:58" pos:end="241:60">pic</name></expr></argument>,

                                                  <argument pos:start="243:51" pos:end="243:82"><expr pos:start="243:51" pos:end="243:82"><name pos:start="243:51" pos:end="243:82"><name pos:start="243:51" pos:end="243:53">ctx</name><operator pos:start="243:54" pos:end="243:55">-&gt;</operator><name pos:start="243:56" pos:end="243:60">codec</name><operator pos:start="243:61" pos:end="243:62">-&gt;</operator><name pos:start="243:63" pos:end="243:82">sequence_header_type</name></name></expr></argument>,

                                                  <argument pos:start="245:51" pos:end="245:54"><expr pos:start="245:51" pos:end="245:54"><name pos:start="245:51" pos:end="245:54">data</name></expr></argument>, <argument pos:start="245:57" pos:end="245:63"><expr pos:start="245:57" pos:end="245:63"><name pos:start="245:57" pos:end="245:63">bit_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="247:13" pos:end="249:26"><if pos:start="247:13" pos:end="249:26">if <condition pos:start="247:16" pos:end="247:24">(<expr pos:start="247:17" pos:end="247:23"><name pos:start="247:17" pos:end="247:19">err</name> <operator pos:start="247:21" pos:end="247:21">&lt;</operator> <literal type="number" pos:start="247:23" pos:end="247:23">0</literal></expr>)</condition><block type="pseudo" pos:start="249:17" pos:end="249:26"><block_content pos:start="249:17" pos:end="249:26">

                <goto pos:start="249:17" pos:end="249:26">goto <name pos:start="249:22" pos:end="249:25">fail</name>;</goto></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="257:5" pos:end="285:5"><if pos:start="257:5" pos:end="285:5">if <condition pos:start="257:8" pos:end="259:41">(<expr pos:start="257:9" pos:end="259:40"><name pos:start="257:9" pos:end="257:30"><name pos:start="257:9" pos:end="257:11">ctx</name><operator pos:start="257:12" pos:end="257:13">-&gt;</operator><name pos:start="257:14" pos:end="257:30">va_packed_headers</name></name> <operator pos:start="257:32" pos:end="257:32">&amp;</operator> <name pos:start="257:34" pos:end="257:61">VA_ENC_PACKED_HEADER_PICTURE</name> <operator pos:start="257:63" pos:end="257:64">&amp;&amp;</operator>

        <name pos:start="259:9" pos:end="259:40"><name pos:start="259:9" pos:end="259:11">ctx</name><operator pos:start="259:12" pos:end="259:13">-&gt;</operator><name pos:start="259:14" pos:end="259:18">codec</name><operator pos:start="259:19" pos:end="259:20">-&gt;</operator><name pos:start="259:21" pos:end="259:40">write_picture_header</name></name></expr>)</condition> <block pos:start="259:43" pos:end="285:5">{<block_content pos:start="261:9" pos:end="283:22">

        <expr_stmt pos:start="261:9" pos:end="261:35"><expr pos:start="261:9" pos:end="261:34"><name pos:start="261:9" pos:end="261:15">bit_len</name> <operator pos:start="261:17" pos:end="261:17">=</operator> <literal type="number" pos:start="261:19" pos:end="261:19">8</literal> <operator pos:start="261:21" pos:end="261:21">*</operator> <sizeof pos:start="261:23" pos:end="261:34">sizeof<argument_list pos:start="261:29" pos:end="261:34">(<argument pos:start="261:30" pos:end="261:33"><expr pos:start="261:30" pos:end="261:33"><name pos:start="261:30" pos:end="261:33">data</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        <expr_stmt pos:start="263:9" pos:end="263:75"><expr pos:start="263:9" pos:end="263:74"><name pos:start="263:9" pos:end="263:11">err</name> <operator pos:start="263:13" pos:end="263:13">=</operator> <call pos:start="263:15" pos:end="263:74"><name pos:start="263:15" pos:end="263:46"><name pos:start="263:15" pos:end="263:17">ctx</name><operator pos:start="263:18" pos:end="263:19">-&gt;</operator><name pos:start="263:20" pos:end="263:24">codec</name><operator pos:start="263:25" pos:end="263:26">-&gt;</operator><name pos:start="263:27" pos:end="263:46">write_picture_header</name></name><argument_list pos:start="263:47" pos:end="263:74">(<argument pos:start="263:48" pos:end="263:52"><expr pos:start="263:48" pos:end="263:52"><name pos:start="263:48" pos:end="263:52">avctx</name></expr></argument>, <argument pos:start="263:55" pos:end="263:57"><expr pos:start="263:55" pos:end="263:57"><name pos:start="263:55" pos:end="263:57">pic</name></expr></argument>, <argument pos:start="263:60" pos:end="263:63"><expr pos:start="263:60" pos:end="263:63"><name pos:start="263:60" pos:end="263:63">data</name></expr></argument>, <argument pos:start="263:66" pos:end="263:73"><expr pos:start="263:66" pos:end="263:73"><operator pos:start="263:66" pos:end="263:66">&amp;</operator><name pos:start="263:67" pos:end="263:73">bit_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="265:9" pos:end="273:9"><if pos:start="265:9" pos:end="273:9">if <condition pos:start="265:12" pos:end="265:20">(<expr pos:start="265:13" pos:end="265:19"><name pos:start="265:13" pos:end="265:15">err</name> <operator pos:start="265:17" pos:end="265:17">&lt;</operator> <literal type="number" pos:start="265:19" pos:end="265:19">0</literal></expr>)</condition> <block pos:start="265:22" pos:end="273:9">{<block_content pos:start="267:13" pos:end="271:22">

            <expr_stmt pos:start="267:13" pos:end="269:41"><expr pos:start="267:13" pos:end="269:40"><call pos:start="267:13" pos:end="269:40"><name pos:start="267:13" pos:end="267:18">av_log</name><argument_list pos:start="267:19" pos:end="269:40">(<argument pos:start="267:20" pos:end="267:24"><expr pos:start="267:20" pos:end="267:24"><name pos:start="267:20" pos:end="267:24">avctx</name></expr></argument>, <argument pos:start="267:27" pos:end="267:38"><expr pos:start="267:27" pos:end="267:38"><name pos:start="267:27" pos:end="267:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="267:41" pos:end="269:34"><expr pos:start="267:41" pos:end="269:34"><literal type="string" pos:start="267:41" pos:end="267:70">"Failed to write per-picture "</literal>

                   <literal type="string" pos:start="269:20" pos:end="269:34">"header: %d.\n"</literal></expr></argument>, <argument pos:start="269:37" pos:end="269:39"><expr pos:start="269:37" pos:end="269:39"><name pos:start="269:37" pos:end="269:39">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="271:13" pos:end="271:22">goto <name pos:start="271:18" pos:end="271:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="275:9" pos:end="279:61"><expr pos:start="275:9" pos:end="279:60"><name pos:start="275:9" pos:end="275:11">err</name> <operator pos:start="275:13" pos:end="275:13">=</operator> <call pos:start="275:15" pos:end="279:60"><name pos:start="275:15" pos:end="275:45">vaapi_encode_make_packed_header</name><argument_list pos:start="275:46" pos:end="279:60">(<argument pos:start="275:47" pos:end="275:51"><expr pos:start="275:47" pos:end="275:51"><name pos:start="275:47" pos:end="275:51">avctx</name></expr></argument>, <argument pos:start="275:54" pos:end="275:56"><expr pos:start="275:54" pos:end="275:56"><name pos:start="275:54" pos:end="275:56">pic</name></expr></argument>,

                                              <argument pos:start="277:47" pos:end="277:77"><expr pos:start="277:47" pos:end="277:77"><name pos:start="277:47" pos:end="277:77"><name pos:start="277:47" pos:end="277:49">ctx</name><operator pos:start="277:50" pos:end="277:51">-&gt;</operator><name pos:start="277:52" pos:end="277:56">codec</name><operator pos:start="277:57" pos:end="277:58">-&gt;</operator><name pos:start="277:59" pos:end="277:77">picture_header_type</name></name></expr></argument>,

                                              <argument pos:start="279:47" pos:end="279:50"><expr pos:start="279:47" pos:end="279:50"><name pos:start="279:47" pos:end="279:50">data</name></expr></argument>, <argument pos:start="279:53" pos:end="279:59"><expr pos:start="279:53" pos:end="279:59"><name pos:start="279:53" pos:end="279:59">bit_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="281:9" pos:end="283:22"><if pos:start="281:9" pos:end="283:22">if <condition pos:start="281:12" pos:end="281:20">(<expr pos:start="281:13" pos:end="281:19"><name pos:start="281:13" pos:end="281:15">err</name> <operator pos:start="281:17" pos:end="281:17">&lt;</operator> <literal type="number" pos:start="281:19" pos:end="281:19">0</literal></expr>)</condition><block type="pseudo" pos:start="283:13" pos:end="283:22"><block_content pos:start="283:13" pos:end="283:22">

            <goto pos:start="283:13" pos:end="283:22">goto <name pos:start="283:18" pos:end="283:21">fail</name>;</goto></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="289:5" pos:end="327:5"><if pos:start="289:5" pos:end="327:5">if <condition pos:start="289:8" pos:end="289:39">(<expr pos:start="289:9" pos:end="289:38"><name pos:start="289:9" pos:end="289:38"><name pos:start="289:9" pos:end="289:11">ctx</name><operator pos:start="289:12" pos:end="289:13">-&gt;</operator><name pos:start="289:14" pos:end="289:18">codec</name><operator pos:start="289:19" pos:end="289:20">-&gt;</operator><name pos:start="289:21" pos:end="289:38">write_extra_buffer</name></name></expr>)</condition> <block pos:start="289:41" pos:end="327:5">{<block_content pos:start="291:9" pos:end="325:9">

        <for pos:start="291:9" pos:end="325:9">for <control pos:start="291:13" pos:end="291:25">(<init pos:start="291:14" pos:end="291:19"><expr pos:start="291:14" pos:end="291:18"><name pos:start="291:14" pos:end="291:14">i</name> <operator pos:start="291:16" pos:end="291:16">=</operator> <literal type="number" pos:start="291:18" pos:end="291:18">0</literal></expr>;</init><condition pos:start="291:20" pos:end="291:20">;</condition> <incr pos:start="291:22" pos:end="291:24"><expr pos:start="291:22" pos:end="291:24"><name pos:start="291:22" pos:end="291:22">i</name><operator pos:start="291:23" pos:end="291:24">++</operator></expr></incr>)</control> <block pos:start="291:27" pos:end="325:9">{<block_content pos:start="293:13" pos:end="323:26">

            <decl_stmt pos:start="293:13" pos:end="293:38"><decl pos:start="293:13" pos:end="293:37"><type pos:start="293:13" pos:end="293:18"><name pos:start="293:13" pos:end="293:18">size_t</name></type> <name pos:start="293:20" pos:end="293:22">len</name> <init pos:start="293:24" pos:end="293:37">= <expr pos:start="293:26" pos:end="293:37"><sizeof pos:start="293:26" pos:end="293:37">sizeof<argument_list pos:start="293:32" pos:end="293:37">(<argument pos:start="293:33" pos:end="293:36"><expr pos:start="293:33" pos:end="293:36"><name pos:start="293:33" pos:end="293:36">data</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="295:13" pos:end="295:21"><decl pos:start="295:13" pos:end="295:20"><type pos:start="295:13" pos:end="295:15"><name pos:start="295:13" pos:end="295:15">int</name></type> <name pos:start="295:17" pos:end="295:20">type</name></decl>;</decl_stmt>

            <expr_stmt pos:start="297:13" pos:end="299:61"><expr pos:start="297:13" pos:end="299:60"><name pos:start="297:13" pos:end="297:15">err</name> <operator pos:start="297:17" pos:end="297:17">=</operator> <call pos:start="297:19" pos:end="299:60"><name pos:start="297:19" pos:end="297:48"><name pos:start="297:19" pos:end="297:21">ctx</name><operator pos:start="297:22" pos:end="297:23">-&gt;</operator><name pos:start="297:24" pos:end="297:28">codec</name><operator pos:start="297:29" pos:end="297:30">-&gt;</operator><name pos:start="297:31" pos:end="297:48">write_extra_buffer</name></name><argument_list pos:start="297:49" pos:end="299:60">(<argument pos:start="297:50" pos:end="297:54"><expr pos:start="297:50" pos:end="297:54"><name pos:start="297:50" pos:end="297:54">avctx</name></expr></argument>, <argument pos:start="297:57" pos:end="297:59"><expr pos:start="297:57" pos:end="297:59"><name pos:start="297:57" pos:end="297:59">pic</name></expr></argument>, <argument pos:start="297:62" pos:end="297:62"><expr pos:start="297:62" pos:end="297:62"><name pos:start="297:62" pos:end="297:62">i</name></expr></argument>, <argument pos:start="297:65" pos:end="297:69"><expr pos:start="297:65" pos:end="297:69"><operator pos:start="297:65" pos:end="297:65">&amp;</operator><name pos:start="297:66" pos:end="297:69">type</name></expr></argument>,

                                                 <argument pos:start="299:50" pos:end="299:53"><expr pos:start="299:50" pos:end="299:53"><name pos:start="299:50" pos:end="299:53">data</name></expr></argument>, <argument pos:start="299:56" pos:end="299:59"><expr pos:start="299:56" pos:end="299:59"><operator pos:start="299:56" pos:end="299:56">&amp;</operator><name pos:start="299:57" pos:end="299:59">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="301:13" pos:end="303:22"><if pos:start="301:13" pos:end="303:22">if <condition pos:start="301:16" pos:end="301:35">(<expr pos:start="301:17" pos:end="301:34"><name pos:start="301:17" pos:end="301:19">err</name> <operator pos:start="301:21" pos:end="301:22">==</operator> <name pos:start="301:24" pos:end="301:34">AVERROR_EOF</name></expr>)</condition><block type="pseudo" pos:start="303:17" pos:end="303:22"><block_content pos:start="303:17" pos:end="303:22">

                <break pos:start="303:17" pos:end="303:22">break;</break></block_content></block></if></if_stmt>

            <if_stmt pos:start="305:13" pos:end="313:13"><if pos:start="305:13" pos:end="313:13">if <condition pos:start="305:16" pos:end="305:24">(<expr pos:start="305:17" pos:end="305:23"><name pos:start="305:17" pos:end="305:19">err</name> <operator pos:start="305:21" pos:end="305:21">&lt;</operator> <literal type="number" pos:start="305:23" pos:end="305:23">0</literal></expr>)</condition> <block pos:start="305:26" pos:end="313:13">{<block_content pos:start="307:17" pos:end="311:26">

                <expr_stmt pos:start="307:17" pos:end="309:51"><expr pos:start="307:17" pos:end="309:50"><call pos:start="307:17" pos:end="309:50"><name pos:start="307:17" pos:end="307:22">av_log</name><argument_list pos:start="307:23" pos:end="309:50">(<argument pos:start="307:24" pos:end="307:28"><expr pos:start="307:24" pos:end="307:28"><name pos:start="307:24" pos:end="307:28">avctx</name></expr></argument>, <argument pos:start="307:31" pos:end="307:42"><expr pos:start="307:31" pos:end="307:42"><name pos:start="307:31" pos:end="307:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="307:45" pos:end="309:41"><expr pos:start="307:45" pos:end="309:41"><literal type="string" pos:start="307:45" pos:end="307:68">"Failed to write extra "</literal>

                       <literal type="string" pos:start="309:24" pos:end="309:41">"buffer %d: %d.\n"</literal></expr></argument>, <argument pos:start="309:44" pos:end="309:44"><expr pos:start="309:44" pos:end="309:44"><name pos:start="309:44" pos:end="309:44">i</name></expr></argument>, <argument pos:start="309:47" pos:end="309:49"><expr pos:start="309:47" pos:end="309:49"><name pos:start="309:47" pos:end="309:49">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="311:17" pos:end="311:26">goto <name pos:start="311:22" pos:end="311:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="317:13" pos:end="319:60"><expr pos:start="317:13" pos:end="319:59"><name pos:start="317:13" pos:end="317:15">err</name> <operator pos:start="317:17" pos:end="317:17">=</operator> <call pos:start="317:19" pos:end="319:59"><name pos:start="317:19" pos:end="317:48">vaapi_encode_make_param_buffer</name><argument_list pos:start="317:49" pos:end="319:59">(<argument pos:start="317:50" pos:end="317:54"><expr pos:start="317:50" pos:end="317:54"><name pos:start="317:50" pos:end="317:54">avctx</name></expr></argument>, <argument pos:start="317:57" pos:end="317:59"><expr pos:start="317:57" pos:end="317:59"><name pos:start="317:57" pos:end="317:59">pic</name></expr></argument>, <argument pos:start="317:62" pos:end="317:65"><expr pos:start="317:62" pos:end="317:65"><name pos:start="317:62" pos:end="317:65">type</name></expr></argument>,

                                                 <argument pos:start="319:50" pos:end="319:53"><expr pos:start="319:50" pos:end="319:53"><name pos:start="319:50" pos:end="319:53">data</name></expr></argument>, <argument pos:start="319:56" pos:end="319:58"><expr pos:start="319:56" pos:end="319:58"><name pos:start="319:56" pos:end="319:58">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="321:13" pos:end="323:26"><if pos:start="321:13" pos:end="323:26">if <condition pos:start="321:16" pos:end="321:24">(<expr pos:start="321:17" pos:end="321:23"><name pos:start="321:17" pos:end="321:19">err</name> <operator pos:start="321:21" pos:end="321:21">&lt;</operator> <literal type="number" pos:start="321:23" pos:end="321:23">0</literal></expr>)</condition><block type="pseudo" pos:start="323:17" pos:end="323:26"><block_content pos:start="323:17" pos:end="323:26">

                <goto pos:start="323:17" pos:end="323:26">goto <name pos:start="323:22" pos:end="323:25">fail</name>;</goto></block_content></block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="331:5" pos:end="371:5"><if pos:start="331:5" pos:end="371:5">if <condition pos:start="331:8" pos:end="333:39">(<expr pos:start="331:9" pos:end="333:38"><name pos:start="331:9" pos:end="331:30"><name pos:start="331:9" pos:end="331:11">ctx</name><operator pos:start="331:12" pos:end="331:13">-&gt;</operator><name pos:start="331:14" pos:end="331:30">va_packed_headers</name></name> <operator pos:start="331:32" pos:end="331:32">&amp;</operator> <name pos:start="331:34" pos:end="331:58">VA_ENC_PACKED_HEADER_MISC</name> <operator pos:start="331:60" pos:end="331:61">&amp;&amp;</operator>

        <name pos:start="333:9" pos:end="333:38"><name pos:start="333:9" pos:end="333:11">ctx</name><operator pos:start="333:12" pos:end="333:13">-&gt;</operator><name pos:start="333:14" pos:end="333:18">codec</name><operator pos:start="333:19" pos:end="333:20">-&gt;</operator><name pos:start="333:21" pos:end="333:38">write_extra_header</name></name></expr>)</condition> <block pos:start="333:41" pos:end="371:5">{<block_content pos:start="335:9" pos:end="369:9">

        <for pos:start="335:9" pos:end="369:9">for <control pos:start="335:13" pos:end="335:25">(<init pos:start="335:14" pos:end="335:19"><expr pos:start="335:14" pos:end="335:18"><name pos:start="335:14" pos:end="335:14">i</name> <operator pos:start="335:16" pos:end="335:16">=</operator> <literal type="number" pos:start="335:18" pos:end="335:18">0</literal></expr>;</init><condition pos:start="335:20" pos:end="335:20">;</condition> <incr pos:start="335:22" pos:end="335:24"><expr pos:start="335:22" pos:end="335:24"><name pos:start="335:22" pos:end="335:22">i</name><operator pos:start="335:23" pos:end="335:24">++</operator></expr></incr>)</control> <block pos:start="335:27" pos:end="369:9">{<block_content pos:start="337:13" pos:end="367:26">

            <decl_stmt pos:start="337:13" pos:end="337:21"><decl pos:start="337:13" pos:end="337:20"><type pos:start="337:13" pos:end="337:15"><name pos:start="337:13" pos:end="337:15">int</name></type> <name pos:start="337:17" pos:end="337:20">type</name></decl>;</decl_stmt>

            <expr_stmt pos:start="339:13" pos:end="339:39"><expr pos:start="339:13" pos:end="339:38"><name pos:start="339:13" pos:end="339:19">bit_len</name> <operator pos:start="339:21" pos:end="339:21">=</operator> <literal type="number" pos:start="339:23" pos:end="339:23">8</literal> <operator pos:start="339:25" pos:end="339:25">*</operator> <sizeof pos:start="339:27" pos:end="339:38">sizeof<argument_list pos:start="339:33" pos:end="339:38">(<argument pos:start="339:34" pos:end="339:37"><expr pos:start="339:34" pos:end="339:37"><name pos:start="339:34" pos:end="339:37">data</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

            <expr_stmt pos:start="341:13" pos:end="343:65"><expr pos:start="341:13" pos:end="343:64"><name pos:start="341:13" pos:end="341:15">err</name> <operator pos:start="341:17" pos:end="341:17">=</operator> <call pos:start="341:19" pos:end="343:64"><name pos:start="341:19" pos:end="341:48"><name pos:start="341:19" pos:end="341:21">ctx</name><operator pos:start="341:22" pos:end="341:23">-&gt;</operator><name pos:start="341:24" pos:end="341:28">codec</name><operator pos:start="341:29" pos:end="341:30">-&gt;</operator><name pos:start="341:31" pos:end="341:48">write_extra_header</name></name><argument_list pos:start="341:49" pos:end="343:64">(<argument pos:start="341:50" pos:end="341:54"><expr pos:start="341:50" pos:end="341:54"><name pos:start="341:50" pos:end="341:54">avctx</name></expr></argument>, <argument pos:start="341:57" pos:end="341:59"><expr pos:start="341:57" pos:end="341:59"><name pos:start="341:57" pos:end="341:59">pic</name></expr></argument>, <argument pos:start="341:62" pos:end="341:62"><expr pos:start="341:62" pos:end="341:62"><name pos:start="341:62" pos:end="341:62">i</name></expr></argument>, <argument pos:start="341:65" pos:end="341:69"><expr pos:start="341:65" pos:end="341:69"><operator pos:start="341:65" pos:end="341:65">&amp;</operator><name pos:start="341:66" pos:end="341:69">type</name></expr></argument>,

                                                 <argument pos:start="343:50" pos:end="343:53"><expr pos:start="343:50" pos:end="343:53"><name pos:start="343:50" pos:end="343:53">data</name></expr></argument>, <argument pos:start="343:56" pos:end="343:63"><expr pos:start="343:56" pos:end="343:63"><operator pos:start="343:56" pos:end="343:56">&amp;</operator><name pos:start="343:57" pos:end="343:63">bit_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="345:13" pos:end="347:22"><if pos:start="345:13" pos:end="347:22">if <condition pos:start="345:16" pos:end="345:35">(<expr pos:start="345:17" pos:end="345:34"><name pos:start="345:17" pos:end="345:19">err</name> <operator pos:start="345:21" pos:end="345:22">==</operator> <name pos:start="345:24" pos:end="345:34">AVERROR_EOF</name></expr>)</condition><block type="pseudo" pos:start="347:17" pos:end="347:22"><block_content pos:start="347:17" pos:end="347:22">

                <break pos:start="347:17" pos:end="347:22">break;</break></block_content></block></if></if_stmt>

            <if_stmt pos:start="349:13" pos:end="357:13"><if pos:start="349:13" pos:end="357:13">if <condition pos:start="349:16" pos:end="349:24">(<expr pos:start="349:17" pos:end="349:23"><name pos:start="349:17" pos:end="349:19">err</name> <operator pos:start="349:21" pos:end="349:21">&lt;</operator> <literal type="number" pos:start="349:23" pos:end="349:23">0</literal></expr>)</condition> <block pos:start="349:26" pos:end="357:13">{<block_content pos:start="351:17" pos:end="355:26">

                <expr_stmt pos:start="351:17" pos:end="353:51"><expr pos:start="351:17" pos:end="353:50"><call pos:start="351:17" pos:end="353:50"><name pos:start="351:17" pos:end="351:22">av_log</name><argument_list pos:start="351:23" pos:end="353:50">(<argument pos:start="351:24" pos:end="351:28"><expr pos:start="351:24" pos:end="351:28"><name pos:start="351:24" pos:end="351:28">avctx</name></expr></argument>, <argument pos:start="351:31" pos:end="351:42"><expr pos:start="351:31" pos:end="351:42"><name pos:start="351:31" pos:end="351:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="351:45" pos:end="353:41"><expr pos:start="351:45" pos:end="353:41"><literal type="string" pos:start="351:45" pos:end="351:68">"Failed to write extra "</literal>

                       <literal type="string" pos:start="353:24" pos:end="353:41">"header %d: %d.\n"</literal></expr></argument>, <argument pos:start="353:44" pos:end="353:44"><expr pos:start="353:44" pos:end="353:44"><name pos:start="353:44" pos:end="353:44">i</name></expr></argument>, <argument pos:start="353:47" pos:end="353:49"><expr pos:start="353:47" pos:end="353:49"><name pos:start="353:47" pos:end="353:49">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="355:17" pos:end="355:26">goto <name pos:start="355:22" pos:end="355:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="361:13" pos:end="363:65"><expr pos:start="361:13" pos:end="363:64"><name pos:start="361:13" pos:end="361:15">err</name> <operator pos:start="361:17" pos:end="361:17">=</operator> <call pos:start="361:19" pos:end="363:64"><name pos:start="361:19" pos:end="361:49">vaapi_encode_make_packed_header</name><argument_list pos:start="361:50" pos:end="363:64">(<argument pos:start="361:51" pos:end="361:55"><expr pos:start="361:51" pos:end="361:55"><name pos:start="361:51" pos:end="361:55">avctx</name></expr></argument>, <argument pos:start="361:58" pos:end="361:60"><expr pos:start="361:58" pos:end="361:60"><name pos:start="361:58" pos:end="361:60">pic</name></expr></argument>, <argument pos:start="361:63" pos:end="361:66"><expr pos:start="361:63" pos:end="361:66"><name pos:start="361:63" pos:end="361:66">type</name></expr></argument>,

                                                  <argument pos:start="363:51" pos:end="363:54"><expr pos:start="363:51" pos:end="363:54"><name pos:start="363:51" pos:end="363:54">data</name></expr></argument>, <argument pos:start="363:57" pos:end="363:63"><expr pos:start="363:57" pos:end="363:63"><name pos:start="363:57" pos:end="363:63">bit_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="365:13" pos:end="367:26"><if pos:start="365:13" pos:end="367:26">if <condition pos:start="365:16" pos:end="365:24">(<expr pos:start="365:17" pos:end="365:23"><name pos:start="365:17" pos:end="365:19">err</name> <operator pos:start="365:21" pos:end="365:21">&lt;</operator> <literal type="number" pos:start="365:23" pos:end="365:23">0</literal></expr>)</condition><block type="pseudo" pos:start="367:17" pos:end="367:26"><block_content pos:start="367:17" pos:end="367:26">

                <goto pos:start="367:17" pos:end="367:26">goto <name pos:start="367:22" pos:end="367:25">fail</name>;</goto></block_content></block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="375:5" pos:end="375:53"><expr pos:start="375:5" pos:end="375:52"><call pos:start="375:5" pos:end="375:52"><name pos:start="375:5" pos:end="375:14">av_assert0</name><argument_list pos:start="375:15" pos:end="375:52">(<argument pos:start="375:16" pos:end="375:51"><expr pos:start="375:16" pos:end="375:51"><name pos:start="375:16" pos:end="375:29"><name pos:start="375:16" pos:end="375:18">pic</name><operator pos:start="375:19" pos:end="375:20">-&gt;</operator><name pos:start="375:21" pos:end="375:29">nb_slices</name></name> <operator pos:start="375:31" pos:end="375:32">&lt;=</operator> <name pos:start="375:34" pos:end="375:51">MAX_PICTURE_SLICES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="377:5" pos:end="479:5">for <control pos:start="377:9" pos:end="377:40">(<init pos:start="377:10" pos:end="377:15"><expr pos:start="377:10" pos:end="377:14"><name pos:start="377:10" pos:end="377:10">i</name> <operator pos:start="377:12" pos:end="377:12">=</operator> <literal type="number" pos:start="377:14" pos:end="377:14">0</literal></expr>;</init> <condition pos:start="377:17" pos:end="377:35"><expr pos:start="377:17" pos:end="377:34"><name pos:start="377:17" pos:end="377:17">i</name> <operator pos:start="377:19" pos:end="377:19">&lt;</operator> <name pos:start="377:21" pos:end="377:34"><name pos:start="377:21" pos:end="377:23">pic</name><operator pos:start="377:24" pos:end="377:25">-&gt;</operator><name pos:start="377:26" pos:end="377:34">nb_slices</name></name></expr>;</condition> <incr pos:start="377:37" pos:end="377:39"><expr pos:start="377:37" pos:end="377:39"><name pos:start="377:37" pos:end="377:37">i</name><operator pos:start="377:38" pos:end="377:39">++</operator></expr></incr>)</control> <block pos:start="377:42" pos:end="479:5">{<block_content pos:start="379:9" pos:end="477:9">

        <expr_stmt pos:start="379:9" pos:end="379:43"><expr pos:start="379:9" pos:end="379:42"><name pos:start="379:9" pos:end="379:13">slice</name> <operator pos:start="379:15" pos:end="379:15">=</operator> <call pos:start="379:17" pos:end="379:42"><name pos:start="379:17" pos:end="379:26">av_mallocz</name><argument_list pos:start="379:27" pos:end="379:42">(<argument pos:start="379:28" pos:end="379:41"><expr pos:start="379:28" pos:end="379:41"><sizeof pos:start="379:28" pos:end="379:41">sizeof<argument_list pos:start="379:34" pos:end="379:41">(<argument pos:start="379:35" pos:end="379:40"><expr pos:start="379:35" pos:end="379:40"><operator pos:start="379:35" pos:end="379:35">*</operator><name pos:start="379:36" pos:end="379:40">slice</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="381:9" pos:end="387:9"><if pos:start="381:9" pos:end="387:9">if <condition pos:start="381:12" pos:end="381:19">(<expr pos:start="381:13" pos:end="381:18"><operator pos:start="381:13" pos:end="381:13">!</operator><name pos:start="381:14" pos:end="381:18">slice</name></expr>)</condition> <block pos:start="381:21" pos:end="387:9">{<block_content pos:start="383:13" pos:end="385:22">

            <expr_stmt pos:start="383:13" pos:end="383:34"><expr pos:start="383:13" pos:end="383:33"><name pos:start="383:13" pos:end="383:15">err</name> <operator pos:start="383:17" pos:end="383:17">=</operator> <call pos:start="383:19" pos:end="383:33"><name pos:start="383:19" pos:end="383:25">AVERROR</name><argument_list pos:start="383:26" pos:end="383:33">(<argument pos:start="383:27" pos:end="383:32"><expr pos:start="383:27" pos:end="383:32"><name pos:start="383:27" pos:end="383:32">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="385:13" pos:end="385:22">goto <name pos:start="385:18" pos:end="385:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="389:9" pos:end="389:25"><expr pos:start="389:9" pos:end="389:24"><name pos:start="389:9" pos:end="389:20"><name pos:start="389:9" pos:end="389:13">slice</name><operator pos:start="389:14" pos:end="389:15">-&gt;</operator><name pos:start="389:16" pos:end="389:20">index</name></name> <operator pos:start="389:22" pos:end="389:22">=</operator> <name pos:start="389:24" pos:end="389:24">i</name></expr>;</expr_stmt>

        <expr_stmt pos:start="391:9" pos:end="391:31"><expr pos:start="391:9" pos:end="391:30"><name pos:start="391:9" pos:end="391:22"><name pos:start="391:9" pos:end="391:11">pic</name><operator pos:start="391:12" pos:end="391:13">-&gt;</operator><name pos:start="391:14" pos:end="391:19">slices</name><index pos:start="391:20" pos:end="391:22">[<expr pos:start="391:21" pos:end="391:21"><name pos:start="391:21" pos:end="391:21">i</name></expr>]</index></name> <operator pos:start="391:24" pos:end="391:24">=</operator> <name pos:start="391:26" pos:end="391:30">slice</name></expr>;</expr_stmt>



        <if_stmt pos:start="395:9" pos:end="407:9"><if pos:start="395:9" pos:end="407:9">if <condition pos:start="395:12" pos:end="395:46">(<expr pos:start="395:13" pos:end="395:45"><name pos:start="395:13" pos:end="395:41"><name pos:start="395:13" pos:end="395:15">ctx</name><operator pos:start="395:16" pos:end="395:17">-&gt;</operator><name pos:start="395:18" pos:end="395:22">codec</name><operator pos:start="395:23" pos:end="395:24">-&gt;</operator><name pos:start="395:25" pos:end="395:41">slice_params_size</name></name> <operator pos:start="395:43" pos:end="395:43">&gt;</operator> <literal type="number" pos:start="395:45" pos:end="395:45">0</literal></expr>)</condition> <block pos:start="395:48" pos:end="407:9">{<block_content pos:start="397:13" pos:end="405:13">

            <expr_stmt pos:start="397:13" pos:end="397:82"><expr pos:start="397:13" pos:end="397:81"><name pos:start="397:13" pos:end="397:37"><name pos:start="397:13" pos:end="397:17">slice</name><operator pos:start="397:18" pos:end="397:19">-&gt;</operator><name pos:start="397:20" pos:end="397:37">codec_slice_params</name></name> <operator pos:start="397:39" pos:end="397:39">=</operator> <call pos:start="397:41" pos:end="397:81"><name pos:start="397:41" pos:end="397:50">av_mallocz</name><argument_list pos:start="397:51" pos:end="397:81">(<argument pos:start="397:52" pos:end="397:80"><expr pos:start="397:52" pos:end="397:80"><name pos:start="397:52" pos:end="397:80"><name pos:start="397:52" pos:end="397:54">ctx</name><operator pos:start="397:55" pos:end="397:56">-&gt;</operator><name pos:start="397:57" pos:end="397:61">codec</name><operator pos:start="397:62" pos:end="397:63">-&gt;</operator><name pos:start="397:64" pos:end="397:80">slice_params_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="399:13" pos:end="405:13"><if pos:start="399:13" pos:end="405:13">if <condition pos:start="399:16" pos:end="399:43">(<expr pos:start="399:17" pos:end="399:42"><operator pos:start="399:17" pos:end="399:17">!</operator><name pos:start="399:18" pos:end="399:42"><name pos:start="399:18" pos:end="399:22">slice</name><operator pos:start="399:23" pos:end="399:24">-&gt;</operator><name pos:start="399:25" pos:end="399:42">codec_slice_params</name></name></expr>)</condition> <block pos:start="399:45" pos:end="405:13">{<block_content pos:start="401:17" pos:end="403:26">

                <expr_stmt pos:start="401:17" pos:end="401:38"><expr pos:start="401:17" pos:end="401:37"><name pos:start="401:17" pos:end="401:19">err</name> <operator pos:start="401:21" pos:end="401:21">=</operator> <call pos:start="401:23" pos:end="401:37"><name pos:start="401:23" pos:end="401:29">AVERROR</name><argument_list pos:start="401:30" pos:end="401:37">(<argument pos:start="401:31" pos:end="401:36"><expr pos:start="401:31" pos:end="401:36"><name pos:start="401:31" pos:end="401:36">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="403:17" pos:end="403:26">goto <name pos:start="403:22" pos:end="403:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="411:9" pos:end="425:9"><if pos:start="411:9" pos:end="425:9">if <condition pos:start="411:12" pos:end="411:42">(<expr pos:start="411:13" pos:end="411:41"><name pos:start="411:13" pos:end="411:41"><name pos:start="411:13" pos:end="411:15">ctx</name><operator pos:start="411:16" pos:end="411:17">-&gt;</operator><name pos:start="411:18" pos:end="411:22">codec</name><operator pos:start="411:23" pos:end="411:24">-&gt;</operator><name pos:start="411:25" pos:end="411:41">init_slice_params</name></name></expr>)</condition> <block pos:start="411:44" pos:end="425:9">{<block_content pos:start="413:13" pos:end="423:13">

            <expr_stmt pos:start="413:13" pos:end="413:67"><expr pos:start="413:13" pos:end="413:66"><name pos:start="413:13" pos:end="413:15">err</name> <operator pos:start="413:17" pos:end="413:17">=</operator> <call pos:start="413:19" pos:end="413:66"><name pos:start="413:19" pos:end="413:47"><name pos:start="413:19" pos:end="413:21">ctx</name><operator pos:start="413:22" pos:end="413:23">-&gt;</operator><name pos:start="413:24" pos:end="413:28">codec</name><operator pos:start="413:29" pos:end="413:30">-&gt;</operator><name pos:start="413:31" pos:end="413:47">init_slice_params</name></name><argument_list pos:start="413:48" pos:end="413:66">(<argument pos:start="413:49" pos:end="413:53"><expr pos:start="413:49" pos:end="413:53"><name pos:start="413:49" pos:end="413:53">avctx</name></expr></argument>, <argument pos:start="413:56" pos:end="413:58"><expr pos:start="413:56" pos:end="413:58"><name pos:start="413:56" pos:end="413:58">pic</name></expr></argument>, <argument pos:start="413:61" pos:end="413:65"><expr pos:start="413:61" pos:end="413:65"><name pos:start="413:61" pos:end="413:65">slice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="415:13" pos:end="423:13"><if pos:start="415:13" pos:end="423:13">if <condition pos:start="415:16" pos:end="415:24">(<expr pos:start="415:17" pos:end="415:23"><name pos:start="415:17" pos:end="415:19">err</name> <operator pos:start="415:21" pos:end="415:21">&lt;</operator> <literal type="number" pos:start="415:23" pos:end="415:23">0</literal></expr>)</condition> <block pos:start="415:26" pos:end="423:13">{<block_content pos:start="417:17" pos:end="421:26">

                <expr_stmt pos:start="417:17" pos:end="419:49"><expr pos:start="417:17" pos:end="419:48"><call pos:start="417:17" pos:end="419:48"><name pos:start="417:17" pos:end="417:22">av_log</name><argument_list pos:start="417:23" pos:end="419:48">(<argument pos:start="417:24" pos:end="417:28"><expr pos:start="417:24" pos:end="417:28"><name pos:start="417:24" pos:end="417:28">avctx</name></expr></argument>, <argument pos:start="417:31" pos:end="417:42"><expr pos:start="417:31" pos:end="417:42"><name pos:start="417:31" pos:end="417:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="417:45" pos:end="419:42"><expr pos:start="417:45" pos:end="419:42"><literal type="string" pos:start="417:45" pos:end="417:72">"Failed to initalise slice "</literal>

                       <literal type="string" pos:start="419:24" pos:end="419:42">"parameters: %d.\n"</literal></expr></argument>, <argument pos:start="419:45" pos:end="419:47"><expr pos:start="419:45" pos:end="419:47"><name pos:start="419:45" pos:end="419:47">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="421:17" pos:end="421:26">goto <name pos:start="421:22" pos:end="421:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="429:9" pos:end="459:9"><if pos:start="429:9" pos:end="459:9">if <condition pos:start="429:12" pos:end="431:43">(<expr pos:start="429:13" pos:end="431:42"><name pos:start="429:13" pos:end="429:34"><name pos:start="429:13" pos:end="429:15">ctx</name><operator pos:start="429:16" pos:end="429:17">-&gt;</operator><name pos:start="429:18" pos:end="429:34">va_packed_headers</name></name> <operator pos:start="429:36" pos:end="429:36">&amp;</operator> <name pos:start="429:38" pos:end="429:63">VA_ENC_PACKED_HEADER_SLICE</name> <operator pos:start="429:65" pos:end="429:66">&amp;&amp;</operator>

            <name pos:start="431:13" pos:end="431:42"><name pos:start="431:13" pos:end="431:15">ctx</name><operator pos:start="431:16" pos:end="431:17">-&gt;</operator><name pos:start="431:18" pos:end="431:22">codec</name><operator pos:start="431:23" pos:end="431:24">-&gt;</operator><name pos:start="431:25" pos:end="431:42">write_slice_header</name></name></expr>)</condition> <block pos:start="431:45" pos:end="459:9">{<block_content pos:start="433:13" pos:end="457:26">

            <expr_stmt pos:start="433:13" pos:end="433:39"><expr pos:start="433:13" pos:end="433:38"><name pos:start="433:13" pos:end="433:19">bit_len</name> <operator pos:start="433:21" pos:end="433:21">=</operator> <literal type="number" pos:start="433:23" pos:end="433:23">8</literal> <operator pos:start="433:25" pos:end="433:25">*</operator> <sizeof pos:start="433:27" pos:end="433:38">sizeof<argument_list pos:start="433:33" pos:end="433:38">(<argument pos:start="433:34" pos:end="433:37"><expr pos:start="433:34" pos:end="433:37"><name pos:start="433:34" pos:end="433:37">data</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

            <expr_stmt pos:start="435:13" pos:end="437:65"><expr pos:start="435:13" pos:end="437:64"><name pos:start="435:13" pos:end="435:15">err</name> <operator pos:start="435:17" pos:end="435:17">=</operator> <call pos:start="435:19" pos:end="437:64"><name pos:start="435:19" pos:end="435:48"><name pos:start="435:19" pos:end="435:21">ctx</name><operator pos:start="435:22" pos:end="435:23">-&gt;</operator><name pos:start="435:24" pos:end="435:28">codec</name><operator pos:start="435:29" pos:end="435:30">-&gt;</operator><name pos:start="435:31" pos:end="435:48">write_slice_header</name></name><argument_list pos:start="435:49" pos:end="437:64">(<argument pos:start="435:50" pos:end="435:54"><expr pos:start="435:50" pos:end="435:54"><name pos:start="435:50" pos:end="435:54">avctx</name></expr></argument>, <argument pos:start="435:57" pos:end="435:59"><expr pos:start="435:57" pos:end="435:59"><name pos:start="435:57" pos:end="435:59">pic</name></expr></argument>, <argument pos:start="435:62" pos:end="435:66"><expr pos:start="435:62" pos:end="435:66"><name pos:start="435:62" pos:end="435:66">slice</name></expr></argument>,

                                                 <argument pos:start="437:50" pos:end="437:53"><expr pos:start="437:50" pos:end="437:53"><name pos:start="437:50" pos:end="437:53">data</name></expr></argument>, <argument pos:start="437:56" pos:end="437:63"><expr pos:start="437:56" pos:end="437:63"><operator pos:start="437:56" pos:end="437:56">&amp;</operator><name pos:start="437:57" pos:end="437:63">bit_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="439:13" pos:end="447:13"><if pos:start="439:13" pos:end="447:13">if <condition pos:start="439:16" pos:end="439:24">(<expr pos:start="439:17" pos:end="439:23"><name pos:start="439:17" pos:end="439:19">err</name> <operator pos:start="439:21" pos:end="439:21">&lt;</operator> <literal type="number" pos:start="439:23" pos:end="439:23">0</literal></expr>)</condition> <block pos:start="439:26" pos:end="447:13">{<block_content pos:start="441:17" pos:end="445:26">

                <expr_stmt pos:start="441:17" pos:end="443:45"><expr pos:start="441:17" pos:end="443:44"><call pos:start="441:17" pos:end="443:44"><name pos:start="441:17" pos:end="441:22">av_log</name><argument_list pos:start="441:23" pos:end="443:44">(<argument pos:start="441:24" pos:end="441:28"><expr pos:start="441:24" pos:end="441:28"><name pos:start="441:24" pos:end="441:28">avctx</name></expr></argument>, <argument pos:start="441:31" pos:end="441:42"><expr pos:start="441:31" pos:end="441:42"><name pos:start="441:31" pos:end="441:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="441:45" pos:end="443:38"><expr pos:start="441:45" pos:end="443:38"><literal type="string" pos:start="441:45" pos:end="441:72">"Failed to write per-slice "</literal>

                       <literal type="string" pos:start="443:24" pos:end="443:38">"header: %d.\n"</literal></expr></argument>, <argument pos:start="443:41" pos:end="443:43"><expr pos:start="443:41" pos:end="443:43"><name pos:start="443:41" pos:end="443:43">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="445:17" pos:end="445:26">goto <name pos:start="445:22" pos:end="445:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="449:13" pos:end="453:65"><expr pos:start="449:13" pos:end="453:64"><name pos:start="449:13" pos:end="449:15">err</name> <operator pos:start="449:17" pos:end="449:17">=</operator> <call pos:start="449:19" pos:end="453:64"><name pos:start="449:19" pos:end="449:49">vaapi_encode_make_packed_header</name><argument_list pos:start="449:50" pos:end="453:64">(<argument pos:start="449:51" pos:end="449:55"><expr pos:start="449:51" pos:end="449:55"><name pos:start="449:51" pos:end="449:55">avctx</name></expr></argument>, <argument pos:start="449:58" pos:end="449:60"><expr pos:start="449:58" pos:end="449:60"><name pos:start="449:58" pos:end="449:60">pic</name></expr></argument>,

                                                  <argument pos:start="451:51" pos:end="451:79"><expr pos:start="451:51" pos:end="451:79"><name pos:start="451:51" pos:end="451:79"><name pos:start="451:51" pos:end="451:53">ctx</name><operator pos:start="451:54" pos:end="451:55">-&gt;</operator><name pos:start="451:56" pos:end="451:60">codec</name><operator pos:start="451:61" pos:end="451:62">-&gt;</operator><name pos:start="451:63" pos:end="451:79">slice_header_type</name></name></expr></argument>,

                                                  <argument pos:start="453:51" pos:end="453:54"><expr pos:start="453:51" pos:end="453:54"><name pos:start="453:51" pos:end="453:54">data</name></expr></argument>, <argument pos:start="453:57" pos:end="453:63"><expr pos:start="453:57" pos:end="453:63"><name pos:start="453:57" pos:end="453:63">bit_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="455:13" pos:end="457:26"><if pos:start="455:13" pos:end="457:26">if <condition pos:start="455:16" pos:end="455:24">(<expr pos:start="455:17" pos:end="455:23"><name pos:start="455:17" pos:end="455:19">err</name> <operator pos:start="455:21" pos:end="455:21">&lt;</operator> <literal type="number" pos:start="455:23" pos:end="455:23">0</literal></expr>)</condition><block type="pseudo" pos:start="457:17" pos:end="457:26"><block_content pos:start="457:17" pos:end="457:26">

                <goto pos:start="457:17" pos:end="457:26">goto <name pos:start="457:22" pos:end="457:25">fail</name>;</goto></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="463:9" pos:end="477:9"><if pos:start="463:9" pos:end="477:9">if <condition pos:start="463:12" pos:end="463:42">(<expr pos:start="463:13" pos:end="463:41"><name pos:start="463:13" pos:end="463:41"><name pos:start="463:13" pos:end="463:15">ctx</name><operator pos:start="463:16" pos:end="463:17">-&gt;</operator><name pos:start="463:18" pos:end="463:22">codec</name><operator pos:start="463:23" pos:end="463:24">-&gt;</operator><name pos:start="463:25" pos:end="463:41">init_slice_params</name></name></expr>)</condition> <block pos:start="463:44" pos:end="477:9">{<block_content pos:start="465:13" pos:end="475:26">

            <expr_stmt pos:start="465:13" pos:end="471:80"><expr pos:start="465:13" pos:end="471:79"><name pos:start="465:13" pos:end="465:15">err</name> <operator pos:start="465:17" pos:end="465:17">=</operator> <call pos:start="465:19" pos:end="471:79"><name pos:start="465:19" pos:end="465:48">vaapi_encode_make_param_buffer</name><argument_list pos:start="465:49" pos:end="471:79">(<argument pos:start="465:50" pos:end="465:54"><expr pos:start="465:50" pos:end="465:54"><name pos:start="465:50" pos:end="465:54">avctx</name></expr></argument>, <argument pos:start="465:57" pos:end="465:59"><expr pos:start="465:57" pos:end="465:59"><name pos:start="465:57" pos:end="465:59">pic</name></expr></argument>,

                                                 <argument pos:start="467:50" pos:end="467:78"><expr pos:start="467:50" pos:end="467:78"><name pos:start="467:50" pos:end="467:78">VAEncSliceParameterBufferType</name></expr></argument>,

                                                 <argument pos:start="469:50" pos:end="469:74"><expr pos:start="469:50" pos:end="469:74"><name pos:start="469:50" pos:end="469:74"><name pos:start="469:50" pos:end="469:54">slice</name><operator pos:start="469:55" pos:end="469:56">-&gt;</operator><name pos:start="469:57" pos:end="469:74">codec_slice_params</name></name></expr></argument>,

                                                 <argument pos:start="471:50" pos:end="471:78"><expr pos:start="471:50" pos:end="471:78"><name pos:start="471:50" pos:end="471:78"><name pos:start="471:50" pos:end="471:52">ctx</name><operator pos:start="471:53" pos:end="471:54">-&gt;</operator><name pos:start="471:55" pos:end="471:59">codec</name><operator pos:start="471:60" pos:end="471:61">-&gt;</operator><name pos:start="471:62" pos:end="471:78">slice_params_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="473:13" pos:end="475:26"><if pos:start="473:13" pos:end="475:26">if <condition pos:start="473:16" pos:end="473:24">(<expr pos:start="473:17" pos:end="473:23"><name pos:start="473:17" pos:end="473:19">err</name> <operator pos:start="473:21" pos:end="473:21">&lt;</operator> <literal type="number" pos:start="473:23" pos:end="473:23">0</literal></expr>)</condition><block type="pseudo" pos:start="475:17" pos:end="475:26"><block_content pos:start="475:17" pos:end="475:26">

                <goto pos:start="475:17" pos:end="475:26">goto <name pos:start="475:22" pos:end="475:25">fail</name>;</goto></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="483:5" pos:end="485:45"><expr pos:start="483:5" pos:end="485:44"><name pos:start="483:5" pos:end="483:7">vas</name> <operator pos:start="483:9" pos:end="483:9">=</operator> <call pos:start="483:11" pos:end="485:44"><name pos:start="483:11" pos:end="483:24">vaBeginPicture</name><argument_list pos:start="483:25" pos:end="485:44">(<argument pos:start="483:26" pos:end="483:44"><expr pos:start="483:26" pos:end="483:44"><name pos:start="483:26" pos:end="483:44"><name pos:start="483:26" pos:end="483:28">ctx</name><operator pos:start="483:29" pos:end="483:30">-&gt;</operator><name pos:start="483:31" pos:end="483:35">hwctx</name><operator pos:start="483:36" pos:end="483:37">-&gt;</operator><name pos:start="483:38" pos:end="483:44">display</name></name></expr></argument>, <argument pos:start="483:47" pos:end="483:61"><expr pos:start="483:47" pos:end="483:61"><name pos:start="483:47" pos:end="483:61"><name pos:start="483:47" pos:end="483:49">ctx</name><operator pos:start="483:50" pos:end="483:51">-&gt;</operator><name pos:start="483:52" pos:end="483:61">va_context</name></name></expr></argument>,

                         <argument pos:start="485:26" pos:end="485:43"><expr pos:start="485:26" pos:end="485:43"><name pos:start="485:26" pos:end="485:43"><name pos:start="485:26" pos:end="485:28">pic</name><operator pos:start="485:29" pos:end="485:30">-&gt;</operator><name pos:start="485:31" pos:end="485:43">input_surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="487:5" pos:end="497:5"><if pos:start="487:5" pos:end="497:5">if <condition pos:start="487:8" pos:end="487:33">(<expr pos:start="487:9" pos:end="487:32"><name pos:start="487:9" pos:end="487:11">vas</name> <operator pos:start="487:13" pos:end="487:14">!=</operator> <name pos:start="487:16" pos:end="487:32">VA_STATUS_SUCCESS</name></expr>)</condition> <block pos:start="487:35" pos:end="497:5">{<block_content pos:start="489:9" pos:end="495:31">

        <expr_stmt pos:start="489:9" pos:end="491:51"><expr pos:start="489:9" pos:end="491:50"><call pos:start="489:9" pos:end="491:50"><name pos:start="489:9" pos:end="489:14">av_log</name><argument_list pos:start="489:15" pos:end="491:50">(<argument pos:start="489:16" pos:end="489:20"><expr pos:start="489:16" pos:end="489:20"><name pos:start="489:16" pos:end="489:20">avctx</name></expr></argument>, <argument pos:start="489:23" pos:end="489:34"><expr pos:start="489:23" pos:end="489:34"><name pos:start="489:23" pos:end="489:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="489:37" pos:end="491:27"><expr pos:start="489:37" pos:end="491:27"><literal type="string" pos:start="489:37" pos:end="489:76">"Failed to begin picture encode issue: "</literal>

               <literal type="string" pos:start="491:16" pos:end="491:27">"%d (%s).\n"</literal></expr></argument>, <argument pos:start="491:30" pos:end="491:32"><expr pos:start="491:30" pos:end="491:32"><name pos:start="491:30" pos:end="491:32">vas</name></expr></argument>, <argument pos:start="491:35" pos:end="491:49"><expr pos:start="491:35" pos:end="491:49"><call pos:start="491:35" pos:end="491:49"><name pos:start="491:35" pos:end="491:44">vaErrorStr</name><argument_list pos:start="491:45" pos:end="491:49">(<argument pos:start="491:46" pos:end="491:48"><expr pos:start="491:46" pos:end="491:48"><name pos:start="491:46" pos:end="491:48">vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="493:9" pos:end="493:27"><expr pos:start="493:9" pos:end="493:26"><name pos:start="493:9" pos:end="493:11">err</name> <operator pos:start="493:13" pos:end="493:13">=</operator> <call pos:start="493:15" pos:end="493:26"><name pos:start="493:15" pos:end="493:21">AVERROR</name><argument_list pos:start="493:22" pos:end="493:26">(<argument pos:start="493:23" pos:end="493:25"><expr pos:start="493:23" pos:end="493:25"><name pos:start="493:23" pos:end="493:25">EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="495:9" pos:end="495:31">goto <name pos:start="495:14" pos:end="495:30">fail_with_picture</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="501:5" pos:end="503:69"><expr pos:start="501:5" pos:end="503:68"><name pos:start="501:5" pos:end="501:7">vas</name> <operator pos:start="501:9" pos:end="501:9">=</operator> <call pos:start="501:11" pos:end="503:68"><name pos:start="501:11" pos:end="501:25">vaRenderPicture</name><argument_list pos:start="501:26" pos:end="503:68">(<argument pos:start="501:27" pos:end="501:45"><expr pos:start="501:27" pos:end="501:45"><name pos:start="501:27" pos:end="501:45"><name pos:start="501:27" pos:end="501:29">ctx</name><operator pos:start="501:30" pos:end="501:31">-&gt;</operator><name pos:start="501:32" pos:end="501:36">hwctx</name><operator pos:start="501:37" pos:end="501:38">-&gt;</operator><name pos:start="501:39" pos:end="501:45">display</name></name></expr></argument>, <argument pos:start="501:48" pos:end="501:62"><expr pos:start="501:48" pos:end="501:62"><name pos:start="501:48" pos:end="501:62"><name pos:start="501:48" pos:end="501:50">ctx</name><operator pos:start="501:51" pos:end="501:52">-&gt;</operator><name pos:start="501:53" pos:end="501:62">va_context</name></name></expr></argument>,

                          <argument pos:start="503:27" pos:end="503:44"><expr pos:start="503:27" pos:end="503:44"><name pos:start="503:27" pos:end="503:44"><name pos:start="503:27" pos:end="503:29">pic</name><operator pos:start="503:30" pos:end="503:31">-&gt;</operator><name pos:start="503:32" pos:end="503:44">param_buffers</name></name></expr></argument>, <argument pos:start="503:47" pos:end="503:67"><expr pos:start="503:47" pos:end="503:67"><name pos:start="503:47" pos:end="503:67"><name pos:start="503:47" pos:end="503:49">pic</name><operator pos:start="503:50" pos:end="503:51">-&gt;</operator><name pos:start="503:52" pos:end="503:67">nb_param_buffers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="505:5" pos:end="515:5"><if pos:start="505:5" pos:end="515:5">if <condition pos:start="505:8" pos:end="505:33">(<expr pos:start="505:9" pos:end="505:32"><name pos:start="505:9" pos:end="505:11">vas</name> <operator pos:start="505:13" pos:end="505:14">!=</operator> <name pos:start="505:16" pos:end="505:32">VA_STATUS_SUCCESS</name></expr>)</condition> <block pos:start="505:35" pos:end="515:5">{<block_content pos:start="507:9" pos:end="513:31">

        <expr_stmt pos:start="507:9" pos:end="509:51"><expr pos:start="507:9" pos:end="509:50"><call pos:start="507:9" pos:end="509:50"><name pos:start="507:9" pos:end="507:14">av_log</name><argument_list pos:start="507:15" pos:end="509:50">(<argument pos:start="507:16" pos:end="507:20"><expr pos:start="507:16" pos:end="507:20"><name pos:start="507:16" pos:end="507:20">avctx</name></expr></argument>, <argument pos:start="507:23" pos:end="507:34"><expr pos:start="507:23" pos:end="507:34"><name pos:start="507:23" pos:end="507:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="507:37" pos:end="509:27"><expr pos:start="507:37" pos:end="509:27"><literal type="string" pos:start="507:37" pos:end="507:74">"Failed to upload encode parameters: "</literal>

               <literal type="string" pos:start="509:16" pos:end="509:27">"%d (%s).\n"</literal></expr></argument>, <argument pos:start="509:30" pos:end="509:32"><expr pos:start="509:30" pos:end="509:32"><name pos:start="509:30" pos:end="509:32">vas</name></expr></argument>, <argument pos:start="509:35" pos:end="509:49"><expr pos:start="509:35" pos:end="509:49"><call pos:start="509:35" pos:end="509:49"><name pos:start="509:35" pos:end="509:44">vaErrorStr</name><argument_list pos:start="509:45" pos:end="509:49">(<argument pos:start="509:46" pos:end="509:48"><expr pos:start="509:46" pos:end="509:48"><name pos:start="509:46" pos:end="509:48">vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="511:9" pos:end="511:27"><expr pos:start="511:9" pos:end="511:26"><name pos:start="511:9" pos:end="511:11">err</name> <operator pos:start="511:13" pos:end="511:13">=</operator> <call pos:start="511:15" pos:end="511:26"><name pos:start="511:15" pos:end="511:21">AVERROR</name><argument_list pos:start="511:22" pos:end="511:26">(<argument pos:start="511:23" pos:end="511:25"><expr pos:start="511:23" pos:end="511:25"><name pos:start="511:23" pos:end="511:25">EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="513:9" pos:end="513:31">goto <name pos:start="513:14" pos:end="513:30">fail_with_picture</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="519:5" pos:end="519:61"><expr pos:start="519:5" pos:end="519:60"><name pos:start="519:5" pos:end="519:7">vas</name> <operator pos:start="519:9" pos:end="519:9">=</operator> <call pos:start="519:11" pos:end="519:60"><name pos:start="519:11" pos:end="519:22">vaEndPicture</name><argument_list pos:start="519:23" pos:end="519:60">(<argument pos:start="519:24" pos:end="519:42"><expr pos:start="519:24" pos:end="519:42"><name pos:start="519:24" pos:end="519:42"><name pos:start="519:24" pos:end="519:26">ctx</name><operator pos:start="519:27" pos:end="519:28">-&gt;</operator><name pos:start="519:29" pos:end="519:33">hwctx</name><operator pos:start="519:34" pos:end="519:35">-&gt;</operator><name pos:start="519:36" pos:end="519:42">display</name></name></expr></argument>, <argument pos:start="519:45" pos:end="519:59"><expr pos:start="519:45" pos:end="519:59"><name pos:start="519:45" pos:end="519:59"><name pos:start="519:45" pos:end="519:47">ctx</name><operator pos:start="519:48" pos:end="519:49">-&gt;</operator><name pos:start="519:50" pos:end="519:59">va_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="521:5" pos:end="543:5"><if pos:start="521:5" pos:end="543:5">if <condition pos:start="521:8" pos:end="521:33">(<expr pos:start="521:9" pos:end="521:32"><name pos:start="521:9" pos:end="521:11">vas</name> <operator pos:start="521:13" pos:end="521:14">!=</operator> <name pos:start="521:16" pos:end="521:32">VA_STATUS_SUCCESS</name></expr>)</condition> <block pos:start="521:35" pos:end="543:5">{<block_content pos:start="523:9" pos:end="541:29">

        <expr_stmt pos:start="523:9" pos:end="525:51"><expr pos:start="523:9" pos:end="525:50"><call pos:start="523:9" pos:end="525:50"><name pos:start="523:9" pos:end="523:14">av_log</name><argument_list pos:start="523:15" pos:end="525:50">(<argument pos:start="523:16" pos:end="523:20"><expr pos:start="523:16" pos:end="523:20"><name pos:start="523:16" pos:end="523:20">avctx</name></expr></argument>, <argument pos:start="523:23" pos:end="523:34"><expr pos:start="523:23" pos:end="523:34"><name pos:start="523:23" pos:end="523:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="523:37" pos:end="525:27"><expr pos:start="523:37" pos:end="525:27"><literal type="string" pos:start="523:37" pos:end="523:74">"Failed to end picture encode issue: "</literal>

               <literal type="string" pos:start="525:16" pos:end="525:27">"%d (%s).\n"</literal></expr></argument>, <argument pos:start="525:30" pos:end="525:32"><expr pos:start="525:30" pos:end="525:32"><name pos:start="525:30" pos:end="525:32">vas</name></expr></argument>, <argument pos:start="525:35" pos:end="525:49"><expr pos:start="525:35" pos:end="525:49"><call pos:start="525:35" pos:end="525:49"><name pos:start="525:35" pos:end="525:44">vaErrorStr</name><argument_list pos:start="525:45" pos:end="525:49">(<argument pos:start="525:46" pos:end="525:48"><expr pos:start="525:46" pos:end="525:48"><name pos:start="525:46" pos:end="525:48">vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="527:9" pos:end="527:27"><expr pos:start="527:9" pos:end="527:26"><name pos:start="527:9" pos:end="527:11">err</name> <operator pos:start="527:13" pos:end="527:13">=</operator> <call pos:start="527:15" pos:end="527:26"><name pos:start="527:15" pos:end="527:21">AVERROR</name><argument_list pos:start="527:22" pos:end="527:26">(<argument pos:start="527:23" pos:end="527:25"><expr pos:start="527:23" pos:end="527:25"><name pos:start="527:23" pos:end="527:25">EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line" pos:start="529:9" pos:end="529:75">// vaRenderPicture() has been called here, so we should not destroy</comment>

        <comment type="line" pos:start="531:9" pos:end="531:73">// the parameter buffers unless separate destruction is required.</comment>

        <if_stmt pos:start="533:9" pos:end="541:29"><if pos:start="533:9" pos:end="537:22">if <condition pos:start="533:12" pos:end="535:55">(<expr pos:start="533:13" pos:end="535:54"><name pos:start="533:13" pos:end="533:37"><name pos:start="533:13" pos:end="533:15">ctx</name><operator pos:start="533:16" pos:end="533:17">-&gt;</operator><name pos:start="533:18" pos:end="533:22">hwctx</name><operator pos:start="533:23" pos:end="533:24">-&gt;</operator><name pos:start="533:25" pos:end="533:37">driver_quirks</name></name> <operator pos:start="533:39" pos:end="533:39">&amp;</operator>

            <name pos:start="535:13" pos:end="535:54">AV_VAAPI_DRIVER_QUIRK_RENDER_PARAM_BUFFERS</name></expr>)</condition><block type="pseudo" pos:start="537:13" pos:end="537:22"><block_content pos:start="537:13" pos:end="537:22">

            <goto pos:start="537:13" pos:end="537:22">goto <name pos:start="537:18" pos:end="537:21">fail</name>;</goto></block_content></block></if>

        <else pos:start="539:9" pos:end="541:29">else<block type="pseudo" pos:start="541:13" pos:end="541:29"><block_content pos:start="541:13" pos:end="541:29">

            <goto pos:start="541:13" pos:end="541:29">goto <name pos:start="541:18" pos:end="541:28">fail_at_end</name>;</goto></block_content></block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="547:5" pos:end="571:5"><if pos:start="547:5" pos:end="571:5">if <condition pos:start="547:8" pos:end="549:51">(<expr pos:start="547:9" pos:end="549:50"><name pos:start="547:9" pos:end="547:33"><name pos:start="547:9" pos:end="547:11">ctx</name><operator pos:start="547:12" pos:end="547:13">-&gt;</operator><name pos:start="547:14" pos:end="547:18">hwctx</name><operator pos:start="547:19" pos:end="547:20">-&gt;</operator><name pos:start="547:21" pos:end="547:33">driver_quirks</name></name> <operator pos:start="547:35" pos:end="547:35">&amp;</operator>

        <name pos:start="549:9" pos:end="549:50">AV_VAAPI_DRIVER_QUIRK_RENDER_PARAM_BUFFERS</name></expr>)</condition> <block pos:start="549:53" pos:end="571:5">{<block_content pos:start="551:9" pos:end="569:9">

        <for pos:start="551:9" pos:end="569:9">for <control pos:start="551:13" pos:end="551:51">(<init pos:start="551:14" pos:end="551:19"><expr pos:start="551:14" pos:end="551:18"><name pos:start="551:14" pos:end="551:14">i</name> <operator pos:start="551:16" pos:end="551:16">=</operator> <literal type="number" pos:start="551:18" pos:end="551:18">0</literal></expr>;</init> <condition pos:start="551:21" pos:end="551:46"><expr pos:start="551:21" pos:end="551:45"><name pos:start="551:21" pos:end="551:21">i</name> <operator pos:start="551:23" pos:end="551:23">&lt;</operator> <name pos:start="551:25" pos:end="551:45"><name pos:start="551:25" pos:end="551:27">pic</name><operator pos:start="551:28" pos:end="551:29">-&gt;</operator><name pos:start="551:30" pos:end="551:45">nb_param_buffers</name></name></expr>;</condition> <incr pos:start="551:48" pos:end="551:50"><expr pos:start="551:48" pos:end="551:50"><name pos:start="551:48" pos:end="551:48">i</name><operator pos:start="551:49" pos:end="551:50">++</operator></expr></incr>)</control> <block pos:start="551:53" pos:end="569:9">{<block_content pos:start="553:13" pos:end="567:13">

            <expr_stmt pos:start="553:13" pos:end="555:57"><expr pos:start="553:13" pos:end="555:56"><name pos:start="553:13" pos:end="553:15">vas</name> <operator pos:start="553:17" pos:end="553:17">=</operator> <call pos:start="553:19" pos:end="555:56"><name pos:start="553:19" pos:end="553:33">vaDestroyBuffer</name><argument_list pos:start="553:34" pos:end="555:56">(<argument pos:start="553:35" pos:end="553:53"><expr pos:start="553:35" pos:end="553:53"><name pos:start="553:35" pos:end="553:53"><name pos:start="553:35" pos:end="553:37">ctx</name><operator pos:start="553:38" pos:end="553:39">-&gt;</operator><name pos:start="553:40" pos:end="553:44">hwctx</name><operator pos:start="553:45" pos:end="553:46">-&gt;</operator><name pos:start="553:47" pos:end="553:53">display</name></name></expr></argument>,

                                  <argument pos:start="555:35" pos:end="555:55"><expr pos:start="555:35" pos:end="555:55"><name pos:start="555:35" pos:end="555:55"><name pos:start="555:35" pos:end="555:37">pic</name><operator pos:start="555:38" pos:end="555:39">-&gt;</operator><name pos:start="555:40" pos:end="555:52">param_buffers</name><index pos:start="555:53" pos:end="555:55">[<expr pos:start="555:54" pos:end="555:54"><name pos:start="555:54" pos:end="555:54">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="557:13" pos:end="567:13"><if pos:start="557:13" pos:end="567:13">if <condition pos:start="557:16" pos:end="557:41">(<expr pos:start="557:17" pos:end="557:40"><name pos:start="557:17" pos:end="557:19">vas</name> <operator pos:start="557:21" pos:end="557:22">!=</operator> <name pos:start="557:24" pos:end="557:40">VA_STATUS_SUCCESS</name></expr>)</condition> <block pos:start="557:43" pos:end="567:13">{<block_content pos:start="559:17" pos:end="563:68">

                <expr_stmt pos:start="559:17" pos:end="563:68"><expr pos:start="559:17" pos:end="563:67"><call pos:start="559:17" pos:end="563:67"><name pos:start="559:17" pos:end="559:22">av_log</name><argument_list pos:start="559:23" pos:end="563:67">(<argument pos:start="559:24" pos:end="559:28"><expr pos:start="559:24" pos:end="559:28"><name pos:start="559:24" pos:end="559:28">avctx</name></expr></argument>, <argument pos:start="559:31" pos:end="559:42"><expr pos:start="559:31" pos:end="559:42"><name pos:start="559:31" pos:end="559:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="559:45" pos:end="561:53"><expr pos:start="559:45" pos:end="561:53"><literal type="string" pos:start="559:45" pos:end="559:64">"Failed to destroy "</literal>

                       <literal type="string" pos:start="561:24" pos:end="561:53">"param buffer %#x: %d (%s).\n"</literal></expr></argument>,

                       <argument pos:start="563:24" pos:end="563:44"><expr pos:start="563:24" pos:end="563:44"><name pos:start="563:24" pos:end="563:44"><name pos:start="563:24" pos:end="563:26">pic</name><operator pos:start="563:27" pos:end="563:28">-&gt;</operator><name pos:start="563:29" pos:end="563:41">param_buffers</name><index pos:start="563:42" pos:end="563:44">[<expr pos:start="563:43" pos:end="563:43"><name pos:start="563:43" pos:end="563:43">i</name></expr>]</index></name></expr></argument>, <argument pos:start="563:47" pos:end="563:49"><expr pos:start="563:47" pos:end="563:49"><name pos:start="563:47" pos:end="563:49">vas</name></expr></argument>, <argument pos:start="563:52" pos:end="563:66"><expr pos:start="563:52" pos:end="563:66"><call pos:start="563:52" pos:end="563:66"><name pos:start="563:52" pos:end="563:61">vaErrorStr</name><argument_list pos:start="563:62" pos:end="563:66">(<argument pos:start="563:63" pos:end="563:65"><expr pos:start="563:63" pos:end="563:65"><name pos:start="563:63" pos:end="563:65">vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line" pos:start="565:17" pos:end="565:30">// And ignore.</comment>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="575:5" pos:end="575:27"><expr pos:start="575:5" pos:end="575:26"><name pos:start="575:5" pos:end="575:22"><name pos:start="575:5" pos:end="575:7">pic</name><operator pos:start="575:8" pos:end="575:9">-&gt;</operator><name pos:start="575:10" pos:end="575:22">encode_issued</name></name> <operator pos:start="575:24" pos:end="575:24">=</operator> <literal type="number" pos:start="575:26" pos:end="575:26">1</literal></expr>;</expr_stmt>



    <if_stmt pos:start="579:5" pos:end="585:17"><if pos:start="579:5" pos:end="581:45">if <condition pos:start="579:8" pos:end="579:59">(<expr pos:start="579:9" pos:end="579:58"><name pos:start="579:9" pos:end="579:23"><name pos:start="579:9" pos:end="579:11">ctx</name><operator pos:start="579:12" pos:end="579:13">-&gt;</operator><name pos:start="579:14" pos:end="579:23">issue_mode</name></name> <operator pos:start="579:25" pos:end="579:26">==</operator> <name pos:start="579:28" pos:end="579:58">ISSUE_MODE_SERIALISE_EVERYTHING</name></expr>)</condition><block type="pseudo" pos:start="581:9" pos:end="581:45"><block_content pos:start="581:9" pos:end="581:45">

        <return pos:start="581:9" pos:end="581:45">return <expr pos:start="581:16" pos:end="581:44"><call pos:start="581:16" pos:end="581:44"><name pos:start="581:16" pos:end="581:32">vaapi_encode_wait</name><argument_list pos:start="581:33" pos:end="581:44">(<argument pos:start="581:34" pos:end="581:38"><expr pos:start="581:34" pos:end="581:38"><name pos:start="581:34" pos:end="581:38">avctx</name></expr></argument>, <argument pos:start="581:41" pos:end="581:43"><expr pos:start="581:41" pos:end="581:43"><name pos:start="581:41" pos:end="581:43">pic</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

    <else pos:start="583:5" pos:end="585:17">else<block type="pseudo" pos:start="585:9" pos:end="585:17"><block_content pos:start="585:9" pos:end="585:17">

        <return pos:start="585:9" pos:end="585:17">return <expr pos:start="585:16" pos:end="585:16"><literal type="number" pos:start="585:16" pos:end="585:16">0</literal></expr>;</return></block_content></block></else></if_stmt>



<label pos:start="589:1" pos:end="589:18"><name pos:start="589:1" pos:end="589:17">fail_with_picture</name>:</label>

    <expr_stmt pos:start="591:5" pos:end="591:55"><expr pos:start="591:5" pos:end="591:54"><call pos:start="591:5" pos:end="591:54"><name pos:start="591:5" pos:end="591:16">vaEndPicture</name><argument_list pos:start="591:17" pos:end="591:54">(<argument pos:start="591:18" pos:end="591:36"><expr pos:start="591:18" pos:end="591:36"><name pos:start="591:18" pos:end="591:36"><name pos:start="591:18" pos:end="591:20">ctx</name><operator pos:start="591:21" pos:end="591:22">-&gt;</operator><name pos:start="591:23" pos:end="591:27">hwctx</name><operator pos:start="591:28" pos:end="591:29">-&gt;</operator><name pos:start="591:30" pos:end="591:36">display</name></name></expr></argument>, <argument pos:start="591:39" pos:end="591:53"><expr pos:start="591:39" pos:end="591:53"><name pos:start="591:39" pos:end="591:53"><name pos:start="591:39" pos:end="591:41">ctx</name><operator pos:start="591:42" pos:end="591:43">-&gt;</operator><name pos:start="591:44" pos:end="591:53">va_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="593:1" pos:end="593:5"><name pos:start="593:1" pos:end="593:4">fail</name>:</label>

    <for pos:start="595:5" pos:end="597:68">for<control pos:start="595:8" pos:end="595:46">(<init pos:start="595:9" pos:end="595:14"><expr pos:start="595:9" pos:end="595:13"><name pos:start="595:9" pos:end="595:9">i</name> <operator pos:start="595:11" pos:end="595:11">=</operator> <literal type="number" pos:start="595:13" pos:end="595:13">0</literal></expr>;</init> <condition pos:start="595:16" pos:end="595:41"><expr pos:start="595:16" pos:end="595:40"><name pos:start="595:16" pos:end="595:16">i</name> <operator pos:start="595:18" pos:end="595:18">&lt;</operator> <name pos:start="595:20" pos:end="595:40"><name pos:start="595:20" pos:end="595:22">pic</name><operator pos:start="595:23" pos:end="595:24">-&gt;</operator><name pos:start="595:25" pos:end="595:40">nb_param_buffers</name></name></expr>;</condition> <incr pos:start="595:43" pos:end="595:45"><expr pos:start="595:43" pos:end="595:45"><name pos:start="595:43" pos:end="595:43">i</name><operator pos:start="595:44" pos:end="595:45">++</operator></expr></incr>)</control><block type="pseudo" pos:start="597:9" pos:end="597:68"><block_content pos:start="597:9" pos:end="597:68">

        <expr_stmt pos:start="597:9" pos:end="597:68"><expr pos:start="597:9" pos:end="597:67"><call pos:start="597:9" pos:end="597:67"><name pos:start="597:9" pos:end="597:23">vaDestroyBuffer</name><argument_list pos:start="597:24" pos:end="597:67">(<argument pos:start="597:25" pos:end="597:43"><expr pos:start="597:25" pos:end="597:43"><name pos:start="597:25" pos:end="597:43"><name pos:start="597:25" pos:end="597:27">ctx</name><operator pos:start="597:28" pos:end="597:29">-&gt;</operator><name pos:start="597:30" pos:end="597:34">hwctx</name><operator pos:start="597:35" pos:end="597:36">-&gt;</operator><name pos:start="597:37" pos:end="597:43">display</name></name></expr></argument>, <argument pos:start="597:46" pos:end="597:66"><expr pos:start="597:46" pos:end="597:66"><name pos:start="597:46" pos:end="597:66"><name pos:start="597:46" pos:end="597:48">pic</name><operator pos:start="597:49" pos:end="597:50">-&gt;</operator><name pos:start="597:51" pos:end="597:63">param_buffers</name><index pos:start="597:64" pos:end="597:66">[<expr pos:start="597:65" pos:end="597:65"><name pos:start="597:65" pos:end="597:65">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<label pos:start="599:1" pos:end="599:12"><name pos:start="599:1" pos:end="599:11">fail_at_end</name>:</label>

    <expr_stmt pos:start="601:5" pos:end="601:41"><expr pos:start="601:5" pos:end="601:40"><call pos:start="601:5" pos:end="601:40"><name pos:start="601:5" pos:end="601:12">av_freep</name><argument_list pos:start="601:13" pos:end="601:40">(<argument pos:start="601:14" pos:end="601:39"><expr pos:start="601:14" pos:end="601:39"><operator pos:start="601:14" pos:end="601:14">&amp;</operator><name pos:start="601:15" pos:end="601:39"><name pos:start="601:15" pos:end="601:17">pic</name><operator pos:start="601:18" pos:end="601:19">-&gt;</operator><name pos:start="601:20" pos:end="601:39">codec_picture_params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="603:5" pos:end="603:37"><expr pos:start="603:5" pos:end="603:36"><call pos:start="603:5" pos:end="603:36"><name pos:start="603:5" pos:end="603:17">av_frame_free</name><argument_list pos:start="603:18" pos:end="603:36">(<argument pos:start="603:19" pos:end="603:35"><expr pos:start="603:19" pos:end="603:35"><operator pos:start="603:19" pos:end="603:19">&amp;</operator><name pos:start="603:20" pos:end="603:35"><name pos:start="603:20" pos:end="603:22">pic</name><operator pos:start="603:23" pos:end="603:24">-&gt;</operator><name pos:start="603:25" pos:end="603:35">recon_image</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="607:5" pos:end="607:15">return <expr pos:start="607:12" pos:end="607:14"><name pos:start="607:12" pos:end="607:14">err</name></expr>;</return>

</block_content>}</block></function></unit>
