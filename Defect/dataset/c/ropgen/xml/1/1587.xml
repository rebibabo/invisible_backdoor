<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/1587.c" pos:tabs="8"><function pos:start="1:1" pos:end="95:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:36">vfio_listener_region_add</name><parameter_list pos:start="1:37" pos:end="3:66">(<parameter pos:start="1:38" pos:end="1:61"><decl pos:start="1:38" pos:end="1:61"><type pos:start="1:38" pos:end="1:61"><name pos:start="1:38" pos:end="1:51">MemoryListener</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:61">listener</name></decl></parameter>,

                                     <parameter pos:start="3:38" pos:end="3:65"><decl pos:start="3:38" pos:end="3:65"><type pos:start="3:38" pos:end="3:65"><name pos:start="3:38" pos:end="3:56">MemoryRegionSection</name> <modifier pos:start="3:58" pos:end="3:58">*</modifier></type><name pos:start="3:59" pos:end="3:65">section</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="95:1">{<block_content pos:start="7:5" pos:end="93:5">

    <decl_stmt pos:start="7:5" pos:end="9:65"><decl pos:start="7:5" pos:end="9:64"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">VFIOContainer</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:28">container</name> <init pos:start="7:30" pos:end="9:64">= <expr pos:start="7:32" pos:end="9:64"><call pos:start="7:32" pos:end="9:64"><name pos:start="7:32" pos:end="7:43">container_of</name><argument_list pos:start="7:44" pos:end="9:64">(<argument pos:start="7:45" pos:end="7:52"><expr pos:start="7:45" pos:end="7:52"><name pos:start="7:45" pos:end="7:52">listener</name></expr></argument>, <argument pos:start="7:55" pos:end="7:67"><expr pos:start="7:55" pos:end="7:67"><name pos:start="7:55" pos:end="7:67">VFIOContainer</name></expr></argument>,

                                            <argument pos:start="9:45" pos:end="9:63"><expr pos:start="9:45" pos:end="9:63"><name pos:start="9:45" pos:end="9:63"><name pos:start="9:45" pos:end="9:54">iommu_data</name><operator pos:start="9:55" pos:end="9:55">.</operator><name pos:start="9:56" pos:end="9:63">listener</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:10">hwaddr</name></type> <name pos:start="11:12" pos:end="11:15">iova</name></decl>, <decl pos:start="11:18" pos:end="11:20"><type ref="prev" pos:start="11:5" pos:end="11:10"/><name pos:start="11:18" pos:end="11:20">end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:16"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:8">void</name> <modifier pos:start="13:10" pos:end="13:10">*</modifier></type><name pos:start="13:11" pos:end="13:15">vaddr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:12"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:49"><expr pos:start="19:5" pos:end="19:48"><call pos:start="19:5" pos:end="19:48"><name pos:start="19:5" pos:end="19:10">assert</name><argument_list pos:start="19:11" pos:end="19:48">(<argument pos:start="19:12" pos:end="19:47"><expr pos:start="19:12" pos:end="19:47"><operator pos:start="19:12" pos:end="19:12">!</operator><call pos:start="19:13" pos:end="19:47"><name pos:start="19:13" pos:end="19:34">memory_region_is_iommu</name><argument_list pos:start="19:35" pos:end="19:47">(<argument pos:start="19:36" pos:end="19:46"><expr pos:start="19:36" pos:end="19:46"><name pos:start="19:36" pos:end="19:46"><name pos:start="19:36" pos:end="19:42">section</name><operator pos:start="19:43" pos:end="19:44">-&gt;</operator><name pos:start="19:45" pos:end="19:46">mr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="23:5" pos:end="35:5"><if pos:start="23:5" pos:end="35:5">if <condition pos:start="23:8" pos:end="23:47">(<expr pos:start="23:9" pos:end="23:46"><call pos:start="23:9" pos:end="23:46"><name pos:start="23:9" pos:end="23:37">vfio_listener_skipped_section</name><argument_list pos:start="23:38" pos:end="23:46">(<argument pos:start="23:39" pos:end="23:45"><expr pos:start="23:39" pos:end="23:45"><name pos:start="23:39" pos:end="23:45">section</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="23:49" pos:end="35:5">{<block_content pos:start="25:9" pos:end="33:15">

        <expr_stmt pos:start="25:9" pos:end="31:71"><expr pos:start="25:9" pos:end="31:70"><call pos:start="25:9" pos:end="31:70"><name pos:start="25:9" pos:end="25:15">DPRINTF</name><argument_list pos:start="25:16" pos:end="31:70">(<argument pos:start="25:17" pos:end="25:66"><expr pos:start="25:17" pos:end="25:66"><literal type="string" pos:start="25:17" pos:end="25:39">"SKIPPING region_add %"</literal><name pos:start="25:40" pos:end="25:50">HWADDR_PRIx</name><literal type="string" pos:start="25:51" pos:end="25:56">" - %"</literal><name pos:start="25:57" pos:end="25:62">PRIx64</name><literal type="string" pos:start="25:63" pos:end="25:66">"\n"</literal></expr></argument>,

                <argument pos:start="27:17" pos:end="27:52"><expr pos:start="27:17" pos:end="27:52"><name pos:start="27:17" pos:end="27:52"><name pos:start="27:17" pos:end="27:23">section</name><operator pos:start="27:24" pos:end="27:25">-&gt;</operator><name pos:start="27:26" pos:end="27:52">offset_within_address_space</name></name></expr></argument>,

                <argument pos:start="29:17" pos:end="31:69"><expr pos:start="29:17" pos:end="31:69"><name pos:start="29:17" pos:end="29:52"><name pos:start="29:17" pos:end="29:23">section</name><operator pos:start="29:24" pos:end="29:25">-&gt;</operator><name pos:start="29:26" pos:end="29:52">offset_within_address_space</name></name> <operator pos:start="29:54" pos:end="29:54">+</operator>

                <call pos:start="31:17" pos:end="31:69"><name pos:start="31:17" pos:end="31:28">int128_get64</name><argument_list pos:start="31:29" pos:end="31:69">(<argument pos:start="31:30" pos:end="31:68"><expr pos:start="31:30" pos:end="31:68"><call pos:start="31:30" pos:end="31:68"><name pos:start="31:30" pos:end="31:39">int128_sub</name><argument_list pos:start="31:40" pos:end="31:68">(<argument pos:start="31:41" pos:end="31:53"><expr pos:start="31:41" pos:end="31:53"><name pos:start="31:41" pos:end="31:53"><name pos:start="31:41" pos:end="31:47">section</name><operator pos:start="31:48" pos:end="31:49">-&gt;</operator><name pos:start="31:50" pos:end="31:53">size</name></name></expr></argument>, <argument pos:start="31:56" pos:end="31:67"><expr pos:start="31:56" pos:end="31:67"><call pos:start="31:56" pos:end="31:67"><name pos:start="31:56" pos:end="31:65">int128_one</name><argument_list pos:start="31:66" pos:end="31:67">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="39:5" pos:end="47:5"><if pos:start="39:5" pos:end="47:5">if <condition pos:start="39:8" pos:end="41:70">(<expr pos:start="39:9" pos:end="41:69"><call pos:start="39:9" pos:end="41:69"><name pos:start="39:9" pos:end="39:16">unlikely</name><argument_list pos:start="39:17" pos:end="41:69">(<argument pos:start="39:18" pos:end="41:68"><expr pos:start="39:18" pos:end="41:68"><operator pos:start="39:18" pos:end="39:18">(</operator><name pos:start="39:19" pos:end="39:54"><name pos:start="39:19" pos:end="39:25">section</name><operator pos:start="39:26" pos:end="39:27">-&gt;</operator><name pos:start="39:28" pos:end="39:54">offset_within_address_space</name></name> <operator pos:start="39:56" pos:end="39:56">&amp;</operator> <operator pos:start="39:58" pos:end="39:58">~</operator><name pos:start="39:59" pos:end="39:74">TARGET_PAGE_MASK</name><operator pos:start="39:75" pos:end="39:75">)</operator> <operator pos:start="39:77" pos:end="39:78">!=</operator>

                 <operator pos:start="41:18" pos:end="41:18">(</operator><name pos:start="41:19" pos:end="41:47"><name pos:start="41:19" pos:end="41:25">section</name><operator pos:start="41:26" pos:end="41:27">-&gt;</operator><name pos:start="41:28" pos:end="41:47">offset_within_region</name></name> <operator pos:start="41:49" pos:end="41:49">&amp;</operator> <operator pos:start="41:51" pos:end="41:51">~</operator><name pos:start="41:52" pos:end="41:67">TARGET_PAGE_MASK</name><operator pos:start="41:68" pos:end="41:68">)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="41:72" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:15">

        <expr_stmt pos:start="43:9" pos:end="43:63"><expr pos:start="43:9" pos:end="43:62"><call pos:start="43:9" pos:end="43:62"><name pos:start="43:9" pos:end="43:20">error_report</name><argument_list pos:start="43:21" pos:end="43:62">(<argument pos:start="43:22" pos:end="43:51"><expr pos:start="43:22" pos:end="43:51"><literal type="string" pos:start="43:22" pos:end="43:51">"%s received unaligned region"</literal></expr></argument>, <argument pos:start="43:54" pos:end="43:61"><expr pos:start="43:54" pos:end="43:61"><name pos:start="43:54" pos:end="43:61">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="45:9" pos:end="45:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:67"><expr pos:start="51:5" pos:end="51:66"><name pos:start="51:5" pos:end="51:8">iova</name> <operator pos:start="51:10" pos:end="51:10">=</operator> <call pos:start="51:12" pos:end="51:66"><name pos:start="51:12" pos:end="51:28">TARGET_PAGE_ALIGN</name><argument_list pos:start="51:29" pos:end="51:66">(<argument pos:start="51:30" pos:end="51:65"><expr pos:start="51:30" pos:end="51:65"><name pos:start="51:30" pos:end="51:65"><name pos:start="51:30" pos:end="51:36">section</name><operator pos:start="51:37" pos:end="51:38">-&gt;</operator><name pos:start="51:39" pos:end="51:65">offset_within_address_space</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="55:27"><expr pos:start="53:5" pos:end="55:26"><name pos:start="53:5" pos:end="53:7">end</name> <operator pos:start="53:9" pos:end="53:9">=</operator> <operator pos:start="53:11" pos:end="53:11">(</operator><name pos:start="53:12" pos:end="53:47"><name pos:start="53:12" pos:end="53:18">section</name><operator pos:start="53:19" pos:end="53:20">-&gt;</operator><name pos:start="53:21" pos:end="53:47">offset_within_address_space</name></name> <operator pos:start="53:49" pos:end="53:49">+</operator> <call pos:start="53:51" pos:end="53:77"><name pos:start="53:51" pos:end="53:62">int128_get64</name><argument_list pos:start="53:63" pos:end="53:77">(<argument pos:start="53:64" pos:end="53:76"><expr pos:start="53:64" pos:end="53:76"><name pos:start="53:64" pos:end="53:76"><name pos:start="53:64" pos:end="53:70">section</name><operator pos:start="53:71" pos:end="53:72">-&gt;</operator><name pos:start="53:73" pos:end="53:76">size</name></name></expr></argument>)</argument_list></call><operator pos:start="53:78" pos:end="53:78">)</operator> <operator pos:start="53:80" pos:end="53:80">&amp;</operator>

          <name pos:start="55:11" pos:end="55:26">TARGET_PAGE_MASK</name></expr>;</expr_stmt>



    <if_stmt pos:start="59:5" pos:end="63:5"><if pos:start="59:5" pos:end="63:5">if <condition pos:start="59:8" pos:end="59:20">(<expr pos:start="59:9" pos:end="59:19"><name pos:start="59:9" pos:end="59:12">iova</name> <operator pos:start="59:14" pos:end="59:15">&gt;=</operator> <name pos:start="59:17" pos:end="59:19">end</name></expr>)</condition> <block pos:start="59:22" pos:end="63:5">{<block_content pos:start="61:9" pos:end="61:15">

        <return pos:start="61:9" pos:end="61:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="67:5" pos:end="71:58"><expr pos:start="67:5" pos:end="71:57"><name pos:start="67:5" pos:end="67:9">vaddr</name> <operator pos:start="67:11" pos:end="67:11">=</operator> <call pos:start="67:13" pos:end="67:50"><name pos:start="67:13" pos:end="67:37">memory_region_get_ram_ptr</name><argument_list pos:start="67:38" pos:end="67:50">(<argument pos:start="67:39" pos:end="67:49"><expr pos:start="67:39" pos:end="67:49"><name pos:start="67:39" pos:end="67:49"><name pos:start="67:39" pos:end="67:45">section</name><operator pos:start="67:46" pos:end="67:47">-&gt;</operator><name pos:start="67:48" pos:end="67:49">mr</name></name></expr></argument>)</argument_list></call> <operator pos:start="67:52" pos:end="67:52">+</operator>

            <name pos:start="69:13" pos:end="69:41"><name pos:start="69:13" pos:end="69:19">section</name><operator pos:start="69:20" pos:end="69:21">-&gt;</operator><name pos:start="69:22" pos:end="69:41">offset_within_region</name></name> <operator pos:start="69:43" pos:end="69:43">+</operator>

            <operator pos:start="71:13" pos:end="71:13">(</operator><name pos:start="71:14" pos:end="71:17">iova</name> <operator pos:start="71:19" pos:end="71:19">-</operator> <name pos:start="71:21" pos:end="71:56"><name pos:start="71:21" pos:end="71:27">section</name><operator pos:start="71:28" pos:end="71:29">-&gt;</operator><name pos:start="71:30" pos:end="71:56">offset_within_address_space</name></name><operator pos:start="71:57" pos:end="71:57">)</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="75:5" pos:end="77:34"><expr pos:start="75:5" pos:end="77:33"><call pos:start="75:5" pos:end="77:33"><name pos:start="75:5" pos:end="75:11">DPRINTF</name><argument_list pos:start="75:12" pos:end="77:33">(<argument pos:start="75:13" pos:end="75:63"><expr pos:start="75:13" pos:end="75:63"><literal type="string" pos:start="75:13" pos:end="75:26">"region_add %"</literal><name pos:start="75:27" pos:end="75:37">HWADDR_PRIx</name><literal type="string" pos:start="75:38" pos:end="75:43">" - %"</literal><name pos:start="75:44" pos:end="75:54">HWADDR_PRIx</name><literal type="string" pos:start="75:55" pos:end="75:63">" [%p]\n"</literal></expr></argument>,

            <argument pos:start="77:13" pos:end="77:16"><expr pos:start="77:13" pos:end="77:16"><name pos:start="77:13" pos:end="77:16">iova</name></expr></argument>, <argument pos:start="77:19" pos:end="77:25"><expr pos:start="77:19" pos:end="77:25"><name pos:start="77:19" pos:end="77:21">end</name> <operator pos:start="77:23" pos:end="77:23">-</operator> <literal type="number" pos:start="77:25" pos:end="77:25">1</literal></expr></argument>, <argument pos:start="77:28" pos:end="77:32"><expr pos:start="77:28" pos:end="77:32"><name pos:start="77:28" pos:end="77:32">vaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="81:5" pos:end="81:35"><expr pos:start="81:5" pos:end="81:34"><call pos:start="81:5" pos:end="81:34"><name pos:start="81:5" pos:end="81:21">memory_region_ref</name><argument_list pos:start="81:22" pos:end="81:34">(<argument pos:start="81:23" pos:end="81:33"><expr pos:start="81:23" pos:end="81:33"><name pos:start="81:23" pos:end="81:33"><name pos:start="81:23" pos:end="81:29">section</name><operator pos:start="81:30" pos:end="81:31">-&gt;</operator><name pos:start="81:32" pos:end="81:33">mr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:78"><expr pos:start="83:5" pos:end="83:77"><name pos:start="83:5" pos:end="83:7">ret</name> <operator pos:start="83:9" pos:end="83:9">=</operator> <call pos:start="83:11" pos:end="83:77"><name pos:start="83:11" pos:end="83:22">vfio_dma_map</name><argument_list pos:start="83:23" pos:end="83:77">(<argument pos:start="83:24" pos:end="83:32"><expr pos:start="83:24" pos:end="83:32"><name pos:start="83:24" pos:end="83:32">container</name></expr></argument>, <argument pos:start="83:35" pos:end="83:38"><expr pos:start="83:35" pos:end="83:38"><name pos:start="83:35" pos:end="83:38">iova</name></expr></argument>, <argument pos:start="83:41" pos:end="83:50"><expr pos:start="83:41" pos:end="83:50"><name pos:start="83:41" pos:end="83:43">end</name> <operator pos:start="83:45" pos:end="83:45">-</operator> <name pos:start="83:47" pos:end="83:50">iova</name></expr></argument>, <argument pos:start="83:53" pos:end="83:57"><expr pos:start="83:53" pos:end="83:57"><name pos:start="83:53" pos:end="83:57">vaddr</name></expr></argument>, <argument pos:start="83:60" pos:end="83:76"><expr pos:start="83:60" pos:end="83:76"><name pos:start="83:60" pos:end="83:76"><name pos:start="83:60" pos:end="83:66">section</name><operator pos:start="83:67" pos:end="83:68">-&gt;</operator><name pos:start="83:69" pos:end="83:76">readonly</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="85:5" pos:end="93:5"><if pos:start="85:5" pos:end="93:5">if <condition pos:start="85:8" pos:end="85:12">(<expr pos:start="85:9" pos:end="85:11"><name pos:start="85:9" pos:end="85:11">ret</name></expr>)</condition> <block pos:start="85:14" pos:end="93:5">{<block_content pos:start="87:9" pos:end="91:62">

        <expr_stmt pos:start="87:9" pos:end="91:62"><expr pos:start="87:9" pos:end="91:61"><call pos:start="87:9" pos:end="91:61"><name pos:start="87:9" pos:end="87:20">error_report</name><argument_list pos:start="87:21" pos:end="91:61">(<argument pos:start="87:22" pos:end="89:54"><expr pos:start="87:22" pos:end="89:54"><literal type="string" pos:start="87:22" pos:end="87:43">"vfio_dma_map(%p, 0x%"</literal><name pos:start="87:44" pos:end="87:54">HWADDR_PRIx</name><literal type="string" pos:start="87:55" pos:end="87:58">", "</literal>

                     <literal type="string" pos:start="89:22" pos:end="89:26">"0x%"</literal><name pos:start="89:27" pos:end="89:37">HWADDR_PRIx</name><literal type="string" pos:start="89:38" pos:end="89:54">", %p) = %d (%m)"</literal></expr></argument>,

                     <argument pos:start="91:22" pos:end="91:30"><expr pos:start="91:22" pos:end="91:30"><name pos:start="91:22" pos:end="91:30">container</name></expr></argument>, <argument pos:start="91:33" pos:end="91:36"><expr pos:start="91:33" pos:end="91:36"><name pos:start="91:33" pos:end="91:36">iova</name></expr></argument>, <argument pos:start="91:39" pos:end="91:48"><expr pos:start="91:39" pos:end="91:48"><name pos:start="91:39" pos:end="91:41">end</name> <operator pos:start="91:43" pos:end="91:43">-</operator> <name pos:start="91:45" pos:end="91:48">iova</name></expr></argument>, <argument pos:start="91:51" pos:end="91:55"><expr pos:start="91:51" pos:end="91:55"><name pos:start="91:51" pos:end="91:55">vaddr</name></expr></argument>, <argument pos:start="91:58" pos:end="91:60"><expr pos:start="91:58" pos:end="91:60"><name pos:start="91:58" pos:end="91:60">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
