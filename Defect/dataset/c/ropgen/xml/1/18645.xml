<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/18645.c" pos:tabs="8"><function pos:start="1:1" pos:end="81:1"><type pos:start="1:1" pos:end="1:14"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">ssize_t</name></type> <name pos:start="1:16" pos:end="1:33">unix_writev_buffer</name><parameter_list pos:start="1:34" pos:end="3:46">(<parameter pos:start="1:35" pos:end="1:46"><decl pos:start="1:35" pos:end="1:46"><type pos:start="1:35" pos:end="1:46"><name pos:start="1:35" pos:end="1:38">void</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:46">opaque</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:65"><decl pos:start="1:49" pos:end="1:65"><type pos:start="1:49" pos:end="1:65"><name pos:start="1:49" pos:end="1:60"><name pos:start="1:49" pos:end="1:54">struct</name> <name pos:start="1:56" pos:end="1:60">iovec</name></name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:65">iov</name></decl></parameter>, <parameter pos:start="1:68" pos:end="1:77"><decl pos:start="1:68" pos:end="1:77"><type pos:start="1:68" pos:end="1:77"><name pos:start="1:68" pos:end="1:70">int</name></type> <name pos:start="1:72" pos:end="1:77">iovcnt</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:45"><decl pos:start="3:35" pos:end="3:45"><type pos:start="3:35" pos:end="3:45"><name pos:start="3:35" pos:end="3:41">int64_t</name></type> <name pos:start="3:43" pos:end="3:45">pos</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="81:1">{<block_content pos:start="7:5" pos:end="79:17">

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:30"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">QEMUFileSocket</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:21">s</name> <init pos:start="7:23" pos:end="7:30">= <expr pos:start="7:25" pos:end="7:30"><name pos:start="7:25" pos:end="7:30">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">ssize_t</name></type> <name pos:start="9:13" pos:end="9:15">len</name></decl>, <decl pos:start="9:18" pos:end="9:23"><type ref="prev" pos:start="9:5" pos:end="9:11"/><name pos:start="9:18" pos:end="9:23">offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:41"><decl pos:start="11:5" pos:end="11:40"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">ssize_t</name></type> <name pos:start="11:13" pos:end="11:16">size</name> <init pos:start="11:18" pos:end="11:40">= <expr pos:start="11:20" pos:end="11:40"><call pos:start="11:20" pos:end="11:40"><name pos:start="11:20" pos:end="11:27">iov_size</name><argument_list pos:start="11:28" pos:end="11:40">(<argument pos:start="11:29" pos:end="11:31"><expr pos:start="11:29" pos:end="11:31"><name pos:start="11:29" pos:end="11:31">iov</name></expr></argument>, <argument pos:start="11:34" pos:end="11:39"><expr pos:start="11:34" pos:end="11:39"><name pos:start="11:34" pos:end="11:39">iovcnt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">ssize_t</name></type> <name pos:start="13:13" pos:end="13:17">total</name> <init pos:start="13:19" pos:end="13:21">= <expr pos:start="13:21" pos:end="13:21"><literal type="number" pos:start="13:21" pos:end="13:21">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:23"><expr pos:start="17:5" pos:end="17:22"><call pos:start="17:5" pos:end="17:22"><name pos:start="17:5" pos:end="17:10">assert</name><argument_list pos:start="17:11" pos:end="17:22">(<argument pos:start="17:12" pos:end="17:21"><expr pos:start="17:12" pos:end="17:21"><name pos:start="17:12" pos:end="17:17">iovcnt</name> <operator pos:start="17:19" pos:end="17:19">&gt;</operator> <literal type="number" pos:start="17:21" pos:end="17:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:15"><expr pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:10">offset</name> <operator pos:start="19:12" pos:end="19:12">=</operator> <literal type="number" pos:start="19:14" pos:end="19:14">0</literal></expr>;</expr_stmt>

    <while pos:start="21:5" pos:end="75:5">while <condition pos:start="21:11" pos:end="21:20">(<expr pos:start="21:12" pos:end="21:19"><name pos:start="21:12" pos:end="21:15">size</name> <operator pos:start="21:17" pos:end="21:17">&gt;</operator> <literal type="number" pos:start="21:19" pos:end="21:19">0</literal></expr>)</condition> <block pos:start="21:22" pos:end="75:5">{<block_content pos:start="25:9" pos:end="73:20">

        <comment type="block" pos:start="23:9" pos:end="23:80">/* Find the next start position; skip all full-sized vector elements  */</comment>

        <while pos:start="25:9" pos:end="31:9">while <condition pos:start="25:15" pos:end="25:40">(<expr pos:start="25:16" pos:end="25:39"><name pos:start="25:16" pos:end="25:21">offset</name> <operator pos:start="25:23" pos:end="25:24">&gt;=</operator> <name pos:start="25:26" pos:end="25:31"><name pos:start="25:26" pos:end="25:28">iov</name><index pos:start="25:29" pos:end="25:31">[<expr pos:start="25:30" pos:end="25:30"><literal type="number" pos:start="25:30" pos:end="25:30">0</literal></expr>]</index></name><operator pos:start="25:32" pos:end="25:32">.</operator><name pos:start="25:33" pos:end="25:39">iov_len</name></expr>)</condition> <block pos:start="25:42" pos:end="31:9">{<block_content pos:start="27:13" pos:end="29:28">

            <expr_stmt pos:start="27:13" pos:end="27:37"><expr pos:start="27:13" pos:end="27:36"><name pos:start="27:13" pos:end="27:18">offset</name> <operator pos:start="27:20" pos:end="27:21">-=</operator> <name pos:start="27:23" pos:end="27:28"><name pos:start="27:23" pos:end="27:25">iov</name><index pos:start="27:26" pos:end="27:28">[<expr pos:start="27:27" pos:end="27:27"><literal type="number" pos:start="27:27" pos:end="27:27">0</literal></expr>]</index></name><operator pos:start="27:29" pos:end="27:29">.</operator><name pos:start="27:30" pos:end="27:36">iov_len</name></expr>;</expr_stmt>

            <expr_stmt pos:start="29:13" pos:end="29:28"><expr pos:start="29:13" pos:end="29:17"><name pos:start="29:13" pos:end="29:15">iov</name><operator pos:start="29:16" pos:end="29:17">++</operator></expr><operator pos:start="29:18" pos:end="29:18">,</operator> <expr pos:start="29:20" pos:end="29:27"><name pos:start="29:20" pos:end="29:25">iovcnt</name><operator pos:start="29:26" pos:end="29:27">--</operator></expr>;</expr_stmt>

        </block_content>}</block></while>



        <comment type="block" pos:start="35:9" pos:end="35:79">/* skip `offset' bytes from the (now) first element, undo it on exit */</comment>

        <expr_stmt pos:start="37:9" pos:end="37:27"><expr pos:start="37:9" pos:end="37:26"><call pos:start="37:9" pos:end="37:26"><name pos:start="37:9" pos:end="37:14">assert</name><argument_list pos:start="37:15" pos:end="37:26">(<argument pos:start="37:16" pos:end="37:25"><expr pos:start="37:16" pos:end="37:25"><name pos:start="37:16" pos:end="37:21">iovcnt</name> <operator pos:start="37:23" pos:end="37:23">&gt;</operator> <literal type="number" pos:start="37:25" pos:end="37:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:34"><expr pos:start="39:9" pos:end="39:33"><name pos:start="39:9" pos:end="39:14"><name pos:start="39:9" pos:end="39:11">iov</name><index pos:start="39:12" pos:end="39:14">[<expr pos:start="39:13" pos:end="39:13"><literal type="number" pos:start="39:13" pos:end="39:13">0</literal></expr>]</index></name><operator pos:start="39:15" pos:end="39:15">.</operator><name pos:start="39:16" pos:end="39:23">iov_base</name> <operator pos:start="39:25" pos:end="39:26">+=</operator> <name pos:start="39:28" pos:end="39:33">offset</name></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:33"><expr pos:start="41:9" pos:end="41:32"><name pos:start="41:9" pos:end="41:14"><name pos:start="41:9" pos:end="41:11">iov</name><index pos:start="41:12" pos:end="41:14">[<expr pos:start="41:13" pos:end="41:13"><literal type="number" pos:start="41:13" pos:end="41:13">0</literal></expr>]</index></name><operator pos:start="41:15" pos:end="41:15">.</operator><name pos:start="41:16" pos:end="41:22">iov_len</name> <operator pos:start="41:24" pos:end="41:25">-=</operator> <name pos:start="41:27" pos:end="41:32">offset</name></expr>;</expr_stmt>



        <do pos:start="45:9" pos:end="49:46">do <block pos:start="45:12" pos:end="49:9">{<block_content pos:start="47:13" pos:end="47:45">

            <expr_stmt pos:start="47:13" pos:end="47:45"><expr pos:start="47:13" pos:end="47:44"><name pos:start="47:13" pos:end="47:15">len</name> <operator pos:start="47:17" pos:end="47:17">=</operator> <call pos:start="47:19" pos:end="47:44"><name pos:start="47:19" pos:end="47:24">writev</name><argument_list pos:start="47:25" pos:end="47:44">(<argument pos:start="47:26" pos:end="47:30"><expr pos:start="47:26" pos:end="47:30"><name pos:start="47:26" pos:end="47:30"><name pos:start="47:26" pos:end="47:26">s</name><operator pos:start="47:27" pos:end="47:28">-&gt;</operator><name pos:start="47:29" pos:end="47:30">fd</name></name></expr></argument>, <argument pos:start="47:33" pos:end="47:35"><expr pos:start="47:33" pos:end="47:35"><name pos:start="47:33" pos:end="47:35">iov</name></expr></argument>, <argument pos:start="47:38" pos:end="47:43"><expr pos:start="47:38" pos:end="47:43"><name pos:start="47:38" pos:end="47:43">iovcnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block> while <condition pos:start="49:17" pos:end="49:45">(<expr pos:start="49:18" pos:end="49:44"><name pos:start="49:18" pos:end="49:20">len</name> <operator pos:start="49:22" pos:end="49:23">==</operator> <operator pos:start="49:25" pos:end="49:25">-</operator><literal type="number" pos:start="49:26" pos:end="49:26">1</literal> <operator pos:start="49:28" pos:end="49:29">&amp;&amp;</operator> <name pos:start="49:31" pos:end="49:35">errno</name> <operator pos:start="49:37" pos:end="49:38">==</operator> <name pos:start="49:40" pos:end="49:44">EINTR</name></expr>)</condition>;</do>

        <if_stmt pos:start="51:9" pos:end="55:9"><if pos:start="51:9" pos:end="55:9">if <condition pos:start="51:12" pos:end="51:22">(<expr pos:start="51:13" pos:end="51:21"><name pos:start="51:13" pos:end="51:15">len</name> <operator pos:start="51:17" pos:end="51:18">==</operator> <operator pos:start="51:20" pos:end="51:20">-</operator><literal type="number" pos:start="51:21" pos:end="51:21">1</literal></expr>)</condition> <block pos:start="51:24" pos:end="55:9">{<block_content pos:start="53:13" pos:end="53:26">

            <return pos:start="53:13" pos:end="53:26">return <expr pos:start="53:20" pos:end="53:25"><operator pos:start="53:20" pos:end="53:20">-</operator><name pos:start="53:21" pos:end="53:25">errno</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="59:9" pos:end="59:36">/* Undo the changes above */</comment>

        <expr_stmt pos:start="61:9" pos:end="61:34"><expr pos:start="61:9" pos:end="61:33"><name pos:start="61:9" pos:end="61:14"><name pos:start="61:9" pos:end="61:11">iov</name><index pos:start="61:12" pos:end="61:14">[<expr pos:start="61:13" pos:end="61:13"><literal type="number" pos:start="61:13" pos:end="61:13">0</literal></expr>]</index></name><operator pos:start="61:15" pos:end="61:15">.</operator><name pos:start="61:16" pos:end="61:23">iov_base</name> <operator pos:start="61:25" pos:end="61:26">-=</operator> <name pos:start="61:28" pos:end="61:33">offset</name></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:33"><expr pos:start="63:9" pos:end="63:32"><name pos:start="63:9" pos:end="63:14"><name pos:start="63:9" pos:end="63:11">iov</name><index pos:start="63:12" pos:end="63:14">[<expr pos:start="63:13" pos:end="63:13"><literal type="number" pos:start="63:13" pos:end="63:13">0</literal></expr>]</index></name><operator pos:start="63:15" pos:end="63:15">.</operator><name pos:start="63:16" pos:end="63:22">iov_len</name> <operator pos:start="63:24" pos:end="63:25">+=</operator> <name pos:start="63:27" pos:end="63:32">offset</name></expr>;</expr_stmt>



        <comment type="block" pos:start="67:9" pos:end="67:44">/* Prepare for the next iteration */</comment>

        <expr_stmt pos:start="69:9" pos:end="69:22"><expr pos:start="69:9" pos:end="69:21"><name pos:start="69:9" pos:end="69:14">offset</name> <operator pos:start="69:16" pos:end="69:17">+=</operator> <name pos:start="69:19" pos:end="69:21">len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:21"><expr pos:start="71:9" pos:end="71:20"><name pos:start="71:9" pos:end="71:13">total</name> <operator pos:start="71:15" pos:end="71:16">+=</operator> <name pos:start="71:18" pos:end="71:20">len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:20"><expr pos:start="73:9" pos:end="73:19"><name pos:start="73:9" pos:end="73:12">size</name> <operator pos:start="73:14" pos:end="73:15">-=</operator> <name pos:start="73:17" pos:end="73:19">len</name></expr>;</expr_stmt>

    </block_content>}</block></while>



    <return pos:start="79:5" pos:end="79:17">return <expr pos:start="79:12" pos:end="79:16"><name pos:start="79:12" pos:end="79:16">total</name></expr>;</return>

</block_content>}</block></function>
</unit>
