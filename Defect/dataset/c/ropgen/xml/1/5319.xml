<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5319.c" pos:tabs="8"><function pos:start="1:1" pos:end="65:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:32">pci_device_hot_remove</name><parameter_list pos:start="1:33" pos:end="1:68">(<parameter pos:start="1:34" pos:end="1:45"><decl pos:start="1:34" pos:end="1:45"><type pos:start="1:34" pos:end="1:45"><name pos:start="1:34" pos:end="1:40">Monitor</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:45">mon</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:67"><decl pos:start="1:48" pos:end="1:67"><type pos:start="1:48" pos:end="1:67"><specifier pos:start="1:48" pos:end="1:52">const</specifier> <name pos:start="1:54" pos:end="1:57">char</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:67">pci_addr</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="65:1">{<block_content pos:start="5:5" pos:end="63:13">

    <decl_stmt pos:start="5:5" pos:end="5:42"><decl pos:start="5:5" pos:end="5:41"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:10">PCIBus</name> <modifier pos:start="5:12" pos:end="5:12">*</modifier></type><name pos:start="5:13" pos:end="5:16">root</name> <init pos:start="5:18" pos:end="5:41">= <expr pos:start="5:20" pos:end="5:41"><call pos:start="5:20" pos:end="5:41"><name pos:start="5:20" pos:end="5:39">pci_find_primary_bus</name><argument_list pos:start="5:40" pos:end="5:41">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">PCIDevice</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:16">d</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">unsigned</name></type> <name pos:start="11:14" pos:end="11:17">slot</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:9">Error</name> <modifier pos:start="13:11" pos:end="13:11">*</modifier></type><name pos:start="13:12" pos:end="13:20">local_err</name> <init pos:start="13:22" pos:end="13:27">= <expr pos:start="13:24" pos:end="13:27"><name pos:start="13:24" pos:end="13:27">NULL</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="25:5"><if pos:start="17:5" pos:end="25:5">if <condition pos:start="17:8" pos:end="17:14">(<expr pos:start="17:9" pos:end="17:13"><operator pos:start="17:9" pos:end="17:9">!</operator><name pos:start="17:10" pos:end="17:13">root</name></expr>)</condition> <block pos:start="17:16" pos:end="25:5">{<block_content pos:start="19:9" pos:end="23:18">

        <expr_stmt pos:start="19:9" pos:end="21:71"><expr pos:start="19:9" pos:end="21:70"><call pos:start="19:9" pos:end="21:70"><name pos:start="19:9" pos:end="19:22">monitor_printf</name><argument_list pos:start="19:23" pos:end="21:70">(<argument pos:start="19:24" pos:end="19:26"><expr pos:start="19:24" pos:end="19:26"><name pos:start="19:24" pos:end="19:26">mon</name></expr></argument>, <argument pos:start="19:29" pos:end="21:69"><expr pos:start="19:29" pos:end="21:69"><literal type="string" pos:start="19:29" pos:end="19:71">"no primary PCI bus (if there are multiple"</literal>

                       <literal type="string" pos:start="21:24" pos:end="21:69">" PCI roots, you must use device_del instead)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="23:18">return <expr pos:start="23:16" pos:end="23:17"><operator pos:start="23:16" pos:end="23:16">-</operator><literal type="number" pos:start="23:17" pos:end="23:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="29:5" pos:end="33:5"><if pos:start="29:5" pos:end="33:5">if <condition pos:start="29:8" pos:end="29:53">(<expr pos:start="29:9" pos:end="29:52"><call pos:start="29:9" pos:end="29:52"><name pos:start="29:9" pos:end="29:24">pci_read_devaddr</name><argument_list pos:start="29:25" pos:end="29:52">(<argument pos:start="29:26" pos:end="29:28"><expr pos:start="29:26" pos:end="29:28"><name pos:start="29:26" pos:end="29:28">mon</name></expr></argument>, <argument pos:start="29:31" pos:end="29:38"><expr pos:start="29:31" pos:end="29:38"><name pos:start="29:31" pos:end="29:38">pci_addr</name></expr></argument>, <argument pos:start="29:41" pos:end="29:44"><expr pos:start="29:41" pos:end="29:44"><operator pos:start="29:41" pos:end="29:41">&amp;</operator><name pos:start="29:42" pos:end="29:44">bus</name></expr></argument>, <argument pos:start="29:47" pos:end="29:51"><expr pos:start="29:47" pos:end="29:51"><operator pos:start="29:47" pos:end="29:47">&amp;</operator><name pos:start="29:48" pos:end="29:51">slot</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="29:55" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:18">

        <return pos:start="31:9" pos:end="31:18">return <expr pos:start="31:16" pos:end="31:17"><operator pos:start="31:16" pos:end="31:16">-</operator><literal type="number" pos:start="31:17" pos:end="31:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:55"><expr pos:start="37:5" pos:end="37:54"><name pos:start="37:5" pos:end="37:5">d</name> <operator pos:start="37:7" pos:end="37:7">=</operator> <call pos:start="37:9" pos:end="37:54"><name pos:start="37:9" pos:end="37:23">pci_find_device</name><argument_list pos:start="37:24" pos:end="37:54">(<argument pos:start="37:25" pos:end="37:28"><expr pos:start="37:25" pos:end="37:28"><name pos:start="37:25" pos:end="37:28">root</name></expr></argument>, <argument pos:start="37:31" pos:end="37:33"><expr pos:start="37:31" pos:end="37:33"><name pos:start="37:31" pos:end="37:33">bus</name></expr></argument>, <argument pos:start="37:36" pos:end="37:53"><expr pos:start="37:36" pos:end="37:53"><call pos:start="37:36" pos:end="37:53"><name pos:start="37:36" pos:end="37:44">PCI_DEVFN</name><argument_list pos:start="37:45" pos:end="37:53">(<argument pos:start="37:46" pos:end="37:49"><expr pos:start="37:46" pos:end="37:49"><name pos:start="37:46" pos:end="37:49">slot</name></expr></argument>, <argument pos:start="37:52" pos:end="37:52"><expr pos:start="37:52" pos:end="37:52"><literal type="number" pos:start="37:52" pos:end="37:52">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="45:5"><if pos:start="39:5" pos:end="45:5">if <condition pos:start="39:8" pos:end="39:11">(<expr pos:start="39:9" pos:end="39:10"><operator pos:start="39:9" pos:end="39:9">!</operator><name pos:start="39:10" pos:end="39:10">d</name></expr>)</condition> <block pos:start="39:13" pos:end="45:5">{<block_content pos:start="41:9" pos:end="43:18">

        <expr_stmt pos:start="41:9" pos:end="41:53"><expr pos:start="41:9" pos:end="41:52"><call pos:start="41:9" pos:end="41:52"><name pos:start="41:9" pos:end="41:22">monitor_printf</name><argument_list pos:start="41:23" pos:end="41:52">(<argument pos:start="41:24" pos:end="41:26"><expr pos:start="41:24" pos:end="41:26"><name pos:start="41:24" pos:end="41:26">mon</name></expr></argument>, <argument pos:start="41:29" pos:end="41:45"><expr pos:start="41:29" pos:end="41:45"><literal type="string" pos:start="41:29" pos:end="41:45">"slot %d empty\n"</literal></expr></argument>, <argument pos:start="41:48" pos:end="41:51"><expr pos:start="41:48" pos:end="41:51"><name pos:start="41:48" pos:end="41:51">slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="43:9" pos:end="43:18">return <expr pos:start="43:16" pos:end="43:17"><operator pos:start="43:16" pos:end="43:16">-</operator><literal type="number" pos:start="43:17" pos:end="43:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:38"><expr pos:start="49:5" pos:end="49:37"><call pos:start="49:5" pos:end="49:37"><name pos:start="49:5" pos:end="49:15">qdev_unplug</name><argument_list pos:start="49:16" pos:end="49:37">(<argument pos:start="49:17" pos:end="49:24"><expr pos:start="49:17" pos:end="49:24"><operator pos:start="49:17" pos:end="49:17">&amp;</operator><name pos:start="49:18" pos:end="49:24"><name pos:start="49:18" pos:end="49:18">d</name><operator pos:start="49:19" pos:end="49:20">-&gt;</operator><name pos:start="49:21" pos:end="49:24">qdev</name></name></expr></argument>, <argument pos:start="49:27" pos:end="49:36"><expr pos:start="49:27" pos:end="49:36"><operator pos:start="49:27" pos:end="49:27">&amp;</operator><name pos:start="49:28" pos:end="49:36">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="51:5" pos:end="59:5"><if pos:start="51:5" pos:end="59:5">if <condition pos:start="51:8" pos:end="51:18">(<expr pos:start="51:9" pos:end="51:17"><name pos:start="51:9" pos:end="51:17">local_err</name></expr>)</condition> <block pos:start="51:20" pos:end="59:5">{<block_content pos:start="53:9" pos:end="57:18">

        <expr_stmt pos:start="53:9" pos:end="53:65"><expr pos:start="53:9" pos:end="53:64"><call pos:start="53:9" pos:end="53:64"><name pos:start="53:9" pos:end="53:22">monitor_printf</name><argument_list pos:start="53:23" pos:end="53:64">(<argument pos:start="53:24" pos:end="53:26"><expr pos:start="53:24" pos:end="53:26"><name pos:start="53:24" pos:end="53:26">mon</name></expr></argument>, <argument pos:start="53:29" pos:end="53:34"><expr pos:start="53:29" pos:end="53:34"><literal type="string" pos:start="53:29" pos:end="53:34">"%s\n"</literal></expr></argument>, <argument pos:start="53:37" pos:end="53:63"><expr pos:start="53:37" pos:end="53:63"><call pos:start="53:37" pos:end="53:63"><name pos:start="53:37" pos:end="53:52">error_get_pretty</name><argument_list pos:start="53:53" pos:end="53:63">(<argument pos:start="53:54" pos:end="53:62"><expr pos:start="53:54" pos:end="53:62"><name pos:start="53:54" pos:end="53:62">local_err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:30"><expr pos:start="55:9" pos:end="55:29"><call pos:start="55:9" pos:end="55:29"><name pos:start="55:9" pos:end="55:18">error_free</name><argument_list pos:start="55:19" pos:end="55:29">(<argument pos:start="55:20" pos:end="55:28"><expr pos:start="55:20" pos:end="55:28"><name pos:start="55:20" pos:end="55:28">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="57:9" pos:end="57:18">return <expr pos:start="57:16" pos:end="57:17"><operator pos:start="57:16" pos:end="57:16">-</operator><literal type="number" pos:start="57:17" pos:end="57:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <return pos:start="63:5" pos:end="63:13">return <expr pos:start="63:12" pos:end="63:12"><literal type="number" pos:start="63:12" pos:end="63:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
