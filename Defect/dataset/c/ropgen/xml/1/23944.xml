<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/23944.c" pos:tabs="8"><function pos:start="1:1" pos:end="181:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:31">qmp_blockdev_change_medium</name><parameter_list pos:start="1:32" pos:end="9:45">(<parameter pos:start="1:33" pos:end="1:50"><decl pos:start="1:33" pos:end="1:50"><type pos:start="1:33" pos:end="1:50"><specifier pos:start="1:33" pos:end="1:37">const</specifier> <name pos:start="1:39" pos:end="1:42">char</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:50">device</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:72"><decl pos:start="1:53" pos:end="1:72"><type pos:start="1:53" pos:end="1:72"><specifier pos:start="1:53" pos:end="1:57">const</specifier> <name pos:start="1:59" pos:end="1:62">char</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:72">filename</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:47"><decl pos:start="3:33" pos:end="3:47"><type pos:start="3:33" pos:end="3:47"><name pos:start="3:33" pos:end="3:36">bool</name></type> <name pos:start="3:38" pos:end="3:47">has_format</name></decl></parameter>, <parameter pos:start="3:50" pos:end="3:67"><decl pos:start="3:50" pos:end="3:67"><type pos:start="3:50" pos:end="3:67"><specifier pos:start="3:50" pos:end="3:54">const</specifier> <name pos:start="3:56" pos:end="3:59">char</name> <modifier pos:start="3:61" pos:end="3:61">*</modifier></type><name pos:start="3:62" pos:end="3:67">format</name></decl></parameter>,

                                <parameter pos:start="5:33" pos:end="5:50"><decl pos:start="5:33" pos:end="5:50"><type pos:start="5:33" pos:end="5:50"><name pos:start="5:33" pos:end="5:36">bool</name></type> <name pos:start="5:38" pos:end="5:50">has_read_only</name></decl></parameter>,

                                <parameter pos:start="7:33" pos:end="7:68"><decl pos:start="7:33" pos:end="7:68"><type pos:start="7:33" pos:end="7:68"><name pos:start="7:33" pos:end="7:58">BlockdevChangeReadOnlyMode</name></type> <name pos:start="7:60" pos:end="7:68">read_only</name></decl></parameter>,

                                <parameter pos:start="9:33" pos:end="9:44"><decl pos:start="9:33" pos:end="9:44"><type pos:start="9:33" pos:end="9:44"><name pos:start="9:33" pos:end="9:37">Error</name> <modifier pos:start="9:39" pos:end="9:39">*</modifier><modifier pos:start="9:40" pos:end="9:40">*</modifier></type><name pos:start="9:41" pos:end="9:44">errp</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="181:1">{<block_content pos:start="13:5" pos:end="179:26">

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:16">BlockBackend</name> <modifier pos:start="13:18" pos:end="13:18">*</modifier></type><name pos:start="13:19" pos:end="13:21">blk</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:39"><decl pos:start="15:5" pos:end="15:38"><type pos:start="15:5" pos:end="15:22"><name pos:start="15:5" pos:end="15:20">BlockDriverState</name> <modifier pos:start="15:22" pos:end="15:22">*</modifier></type><name pos:start="15:23" pos:end="15:31">medium_bs</name> <init pos:start="15:33" pos:end="15:38">= <expr pos:start="15:35" pos:end="15:38"><name pos:start="15:35" pos:end="15:38">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:24"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:18">bdrv_flags</name></decl>, <decl pos:start="17:21" pos:end="17:23"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:21" pos:end="17:23">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:26"><decl pos:start="19:5" pos:end="19:25"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:9">QDict</name> <modifier pos:start="19:11" pos:end="19:11">*</modifier></type><name pos:start="19:12" pos:end="19:18">options</name> <init pos:start="19:20" pos:end="19:25">= <expr pos:start="19:22" pos:end="19:25"><name pos:start="19:22" pos:end="19:25">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:22"><decl pos:start="21:5" pos:end="21:21"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:9">Error</name> <modifier pos:start="21:11" pos:end="21:11">*</modifier></type><name pos:start="21:12" pos:end="21:14">err</name> <init pos:start="21:16" pos:end="21:21">= <expr pos:start="21:18" pos:end="21:21"><name pos:start="21:18" pos:end="21:21">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:30"><expr pos:start="25:5" pos:end="25:29"><name pos:start="25:5" pos:end="25:7">blk</name> <operator pos:start="25:9" pos:end="25:9">=</operator> <call pos:start="25:11" pos:end="25:29"><name pos:start="25:11" pos:end="25:21">blk_by_name</name><argument_list pos:start="25:22" pos:end="25:29">(<argument pos:start="25:23" pos:end="25:28"><expr pos:start="25:23" pos:end="25:28"><name pos:start="25:23" pos:end="25:28">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="35:5"><if pos:start="27:5" pos:end="35:5">if <condition pos:start="27:8" pos:end="27:13">(<expr pos:start="27:9" pos:end="27:12"><operator pos:start="27:9" pos:end="27:9">!</operator><name pos:start="27:10" pos:end="27:12">blk</name></expr>)</condition> <block pos:start="27:15" pos:end="35:5">{<block_content pos:start="29:9" pos:end="33:18">

        <expr_stmt pos:start="29:9" pos:end="31:51"><expr pos:start="29:9" pos:end="31:50"><call pos:start="29:9" pos:end="31:50"><name pos:start="29:9" pos:end="29:17">error_set</name><argument_list pos:start="29:18" pos:end="31:50">(<argument pos:start="29:19" pos:end="29:22"><expr pos:start="29:19" pos:end="29:22"><name pos:start="29:19" pos:end="29:22">errp</name></expr></argument>, <argument pos:start="29:25" pos:end="29:52"><expr pos:start="29:25" pos:end="29:52"><name pos:start="29:25" pos:end="29:52">ERROR_CLASS_DEVICE_NOT_FOUND</name></expr></argument>,

                  <argument pos:start="31:19" pos:end="31:41"><expr pos:start="31:19" pos:end="31:41"><literal type="string" pos:start="31:19" pos:end="31:41">"Device '%s' not found"</literal></expr></argument>, <argument pos:start="31:44" pos:end="31:49"><expr pos:start="31:44" pos:end="31:49"><name pos:start="31:44" pos:end="31:49">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="33:9" pos:end="33:18">goto <name pos:start="33:14" pos:end="33:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="39:5" pos:end="43:5"><if pos:start="39:5" pos:end="43:5">if <condition pos:start="39:8" pos:end="39:20">(<expr pos:start="39:9" pos:end="39:19"><call pos:start="39:9" pos:end="39:19"><name pos:start="39:9" pos:end="39:14">blk_bs</name><argument_list pos:start="39:15" pos:end="39:19">(<argument pos:start="39:16" pos:end="39:18"><expr pos:start="39:16" pos:end="39:18"><name pos:start="39:16" pos:end="39:18">blk</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="39:22" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:35">

        <expr_stmt pos:start="41:9" pos:end="41:35"><expr pos:start="41:9" pos:end="41:34"><call pos:start="41:9" pos:end="41:34"><name pos:start="41:9" pos:end="41:29">blk_update_root_state</name><argument_list pos:start="41:30" pos:end="41:34">(<argument pos:start="41:31" pos:end="41:33"><expr pos:start="41:31" pos:end="41:33"><name pos:start="41:31" pos:end="41:33">blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:57"><expr pos:start="47:5" pos:end="47:56"><name pos:start="47:5" pos:end="47:14">bdrv_flags</name> <operator pos:start="47:16" pos:end="47:16">=</operator> <call pos:start="47:18" pos:end="47:56"><name pos:start="47:18" pos:end="47:51">blk_get_open_flags_from_root_state</name><argument_list pos:start="47:52" pos:end="47:56">(<argument pos:start="47:53" pos:end="47:55"><expr pos:start="47:53" pos:end="47:55"><name pos:start="47:53" pos:end="47:55">blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    <if_stmt pos:start="53:5" pos:end="57:5"><if pos:start="53:5" pos:end="57:5">if <condition pos:start="53:8" pos:end="53:23">(<expr pos:start="53:9" pos:end="53:22"><operator pos:start="53:9" pos:end="53:9">!</operator><name pos:start="53:10" pos:end="53:22">has_read_only</name></expr>)</condition> <block pos:start="53:25" pos:end="57:5">{<block_content pos:start="55:9" pos:end="55:58">

        <expr_stmt pos:start="55:9" pos:end="55:58"><expr pos:start="55:9" pos:end="55:57"><name pos:start="55:9" pos:end="55:17">read_only</name> <operator pos:start="55:19" pos:end="55:19">=</operator> <name pos:start="55:21" pos:end="55:57">BLOCKDEV_CHANGE_READ_ONLY_MODE_RETAIN</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="61:5" pos:end="89:5">switch <condition pos:start="61:12" pos:end="61:22">(<expr pos:start="61:13" pos:end="61:21"><name pos:start="61:13" pos:end="61:21">read_only</name></expr>)</condition> <block pos:start="61:24" pos:end="89:5">{<block_content pos:start="63:5" pos:end="87:16">

    <case pos:start="63:5" pos:end="63:47">case <expr pos:start="63:10" pos:end="63:46"><name pos:start="63:10" pos:end="63:46">BLOCKDEV_CHANGE_READ_ONLY_MODE_RETAIN</name></expr>:</case>

        <break pos:start="65:9" pos:end="65:14">break;</break>



    <case pos:start="69:5" pos:end="69:50">case <expr pos:start="69:10" pos:end="69:49"><name pos:start="69:10" pos:end="69:49">BLOCKDEV_CHANGE_READ_ONLY_MODE_READ_ONLY</name></expr>:</case>

        <expr_stmt pos:start="71:9" pos:end="71:35"><expr pos:start="71:9" pos:end="71:34"><name pos:start="71:9" pos:end="71:18">bdrv_flags</name> <operator pos:start="71:20" pos:end="71:21">&amp;=</operator> <operator pos:start="71:23" pos:end="71:23">~</operator><name pos:start="71:24" pos:end="71:34">BDRV_O_RDWR</name></expr>;</expr_stmt>

        <break pos:start="73:9" pos:end="73:14">break;</break>



    <case pos:start="77:5" pos:end="77:51">case <expr pos:start="77:10" pos:end="77:50"><name pos:start="77:10" pos:end="77:50">BLOCKDEV_CHANGE_READ_ONLY_MODE_READ_WRITE</name></expr>:</case>

        <expr_stmt pos:start="79:9" pos:end="79:34"><expr pos:start="79:9" pos:end="79:33"><name pos:start="79:9" pos:end="79:18">bdrv_flags</name> <operator pos:start="79:20" pos:end="79:21">|=</operator> <name pos:start="79:23" pos:end="79:33">BDRV_O_RDWR</name></expr>;</expr_stmt>

        <break pos:start="81:9" pos:end="81:14">break;</break>



    <default pos:start="85:5" pos:end="85:12">default:</default>

        <expr_stmt pos:start="87:9" pos:end="87:16"><expr pos:start="87:9" pos:end="87:15"><call pos:start="87:9" pos:end="87:15"><name pos:start="87:9" pos:end="87:13">abort</name><argument_list pos:start="87:14" pos:end="87:15">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>



    <if_stmt pos:start="93:5" pos:end="99:5"><if pos:start="93:5" pos:end="99:5">if <condition pos:start="93:8" pos:end="93:19">(<expr pos:start="93:9" pos:end="93:18"><name pos:start="93:9" pos:end="93:18">has_format</name></expr>)</condition> <block pos:start="93:21" pos:end="99:5">{<block_content pos:start="95:9" pos:end="97:63">

        <expr_stmt pos:start="95:9" pos:end="95:30"><expr pos:start="95:9" pos:end="95:29"><name pos:start="95:9" pos:end="95:15">options</name> <operator pos:start="95:17" pos:end="95:17">=</operator> <call pos:start="95:19" pos:end="95:29"><name pos:start="95:19" pos:end="95:27">qdict_new</name><argument_list pos:start="95:28" pos:end="95:29">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:63"><expr pos:start="97:9" pos:end="97:62"><call pos:start="97:9" pos:end="97:62"><name pos:start="97:9" pos:end="97:17">qdict_put</name><argument_list pos:start="97:18" pos:end="97:62">(<argument pos:start="97:19" pos:end="97:25"><expr pos:start="97:19" pos:end="97:25"><name pos:start="97:19" pos:end="97:25">options</name></expr></argument>, <argument pos:start="97:28" pos:end="97:35"><expr pos:start="97:28" pos:end="97:35"><literal type="string" pos:start="97:28" pos:end="97:35">"driver"</literal></expr></argument>, <argument pos:start="97:38" pos:end="97:61"><expr pos:start="97:38" pos:end="97:61"><call pos:start="97:38" pos:end="97:61"><name pos:start="97:38" pos:end="97:53">qstring_from_str</name><argument_list pos:start="97:54" pos:end="97:61">(<argument pos:start="97:55" pos:end="97:60"><expr pos:start="97:55" pos:end="97:60"><name pos:start="97:55" pos:end="97:60">format</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="103:5" pos:end="103:23"><expr pos:start="103:5" pos:end="103:22"><call pos:start="103:5" pos:end="103:22"><name pos:start="103:5" pos:end="103:10">assert</name><argument_list pos:start="103:11" pos:end="103:22">(<argument pos:start="103:12" pos:end="103:21"><expr pos:start="103:12" pos:end="103:21"><operator pos:start="103:12" pos:end="103:12">!</operator><name pos:start="103:13" pos:end="103:21">medium_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:75"><expr pos:start="105:5" pos:end="105:74"><name pos:start="105:5" pos:end="105:7">ret</name> <operator pos:start="105:9" pos:end="105:9">=</operator> <call pos:start="105:11" pos:end="105:74"><name pos:start="105:11" pos:end="105:19">bdrv_open</name><argument_list pos:start="105:20" pos:end="105:74">(<argument pos:start="105:21" pos:end="105:30"><expr pos:start="105:21" pos:end="105:30"><operator pos:start="105:21" pos:end="105:21">&amp;</operator><name pos:start="105:22" pos:end="105:30">medium_bs</name></expr></argument>, <argument pos:start="105:33" pos:end="105:40"><expr pos:start="105:33" pos:end="105:40"><name pos:start="105:33" pos:end="105:40">filename</name></expr></argument>, <argument pos:start="105:43" pos:end="105:46"><expr pos:start="105:43" pos:end="105:46"><name pos:start="105:43" pos:end="105:46">NULL</name></expr></argument>, <argument pos:start="105:49" pos:end="105:55"><expr pos:start="105:49" pos:end="105:55"><name pos:start="105:49" pos:end="105:55">options</name></expr></argument>, <argument pos:start="105:58" pos:end="105:67"><expr pos:start="105:58" pos:end="105:67"><name pos:start="105:58" pos:end="105:67">bdrv_flags</name></expr></argument>, <argument pos:start="105:70" pos:end="105:73"><expr pos:start="105:70" pos:end="105:73"><name pos:start="105:70" pos:end="105:73">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="107:5" pos:end="111:5"><if pos:start="107:5" pos:end="111:5">if <condition pos:start="107:8" pos:end="107:16">(<expr pos:start="107:9" pos:end="107:15"><name pos:start="107:9" pos:end="107:11">ret</name> <operator pos:start="107:13" pos:end="107:13">&lt;</operator> <literal type="number" pos:start="107:15" pos:end="107:15">0</literal></expr>)</condition> <block pos:start="107:18" pos:end="111:5">{<block_content pos:start="109:9" pos:end="109:18">

        <goto pos:start="109:9" pos:end="109:18">goto <name pos:start="109:14" pos:end="109:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="115:5" pos:end="115:41"><expr pos:start="115:5" pos:end="115:40"><call pos:start="115:5" pos:end="115:40"><name pos:start="115:5" pos:end="115:24">blk_apply_root_state</name><argument_list pos:start="115:25" pos:end="115:40">(<argument pos:start="115:26" pos:end="115:28"><expr pos:start="115:26" pos:end="115:28"><name pos:start="115:26" pos:end="115:28">blk</name></expr></argument>, <argument pos:start="115:31" pos:end="115:39"><expr pos:start="115:31" pos:end="115:39"><name pos:start="115:31" pos:end="115:39">medium_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="119:5" pos:end="119:40"><expr pos:start="119:5" pos:end="119:39"><call pos:start="119:5" pos:end="119:39"><name pos:start="119:5" pos:end="119:16">bdrv_add_key</name><argument_list pos:start="119:17" pos:end="119:39">(<argument pos:start="119:18" pos:end="119:26"><expr pos:start="119:18" pos:end="119:26"><name pos:start="119:18" pos:end="119:26">medium_bs</name></expr></argument>, <argument pos:start="119:29" pos:end="119:32"><expr pos:start="119:29" pos:end="119:32"><name pos:start="119:29" pos:end="119:32">NULL</name></expr></argument>, <argument pos:start="119:35" pos:end="119:38"><expr pos:start="119:35" pos:end="119:38"><operator pos:start="119:35" pos:end="119:35">&amp;</operator><name pos:start="119:36" pos:end="119:38">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="121:5" pos:end="127:5"><if pos:start="121:5" pos:end="127:5">if <condition pos:start="121:8" pos:end="121:12">(<expr pos:start="121:9" pos:end="121:11"><name pos:start="121:9" pos:end="121:11">err</name></expr>)</condition> <block pos:start="121:14" pos:end="127:5">{<block_content pos:start="123:9" pos:end="125:18">

        <expr_stmt pos:start="123:9" pos:end="123:35"><expr pos:start="123:9" pos:end="123:34"><call pos:start="123:9" pos:end="123:34"><name pos:start="123:9" pos:end="123:23">error_propagate</name><argument_list pos:start="123:24" pos:end="123:34">(<argument pos:start="123:25" pos:end="123:28"><expr pos:start="123:25" pos:end="123:28"><name pos:start="123:25" pos:end="123:28">errp</name></expr></argument>, <argument pos:start="123:31" pos:end="123:33"><expr pos:start="123:31" pos:end="123:33"><name pos:start="123:31" pos:end="123:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="125:9" pos:end="125:18">goto <name pos:start="125:14" pos:end="125:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="131:5" pos:end="131:55"><expr pos:start="131:5" pos:end="131:54"><call pos:start="131:5" pos:end="131:54"><name pos:start="131:5" pos:end="131:26">qmp_blockdev_open_tray</name><argument_list pos:start="131:27" pos:end="131:54">(<argument pos:start="131:28" pos:end="131:33"><expr pos:start="131:28" pos:end="131:33"><name pos:start="131:28" pos:end="131:33">device</name></expr></argument>, <argument pos:start="131:36" pos:end="131:40"><expr pos:start="131:36" pos:end="131:40"><name pos:start="131:36" pos:end="131:40">false</name></expr></argument>, <argument pos:start="131:43" pos:end="131:47"><expr pos:start="131:43" pos:end="131:47"><name pos:start="131:43" pos:end="131:47">false</name></expr></argument>, <argument pos:start="131:50" pos:end="131:53"><expr pos:start="131:50" pos:end="131:53"><operator pos:start="131:50" pos:end="131:50">&amp;</operator><name pos:start="131:51" pos:end="131:53">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="133:5" pos:end="139:5"><if pos:start="133:5" pos:end="139:5">if <condition pos:start="133:8" pos:end="133:12">(<expr pos:start="133:9" pos:end="133:11"><name pos:start="133:9" pos:end="133:11">err</name></expr>)</condition> <block pos:start="133:14" pos:end="139:5">{<block_content pos:start="135:9" pos:end="137:18">

        <expr_stmt pos:start="135:9" pos:end="135:35"><expr pos:start="135:9" pos:end="135:34"><call pos:start="135:9" pos:end="135:34"><name pos:start="135:9" pos:end="135:23">error_propagate</name><argument_list pos:start="135:24" pos:end="135:34">(<argument pos:start="135:25" pos:end="135:28"><expr pos:start="135:25" pos:end="135:28"><name pos:start="135:25" pos:end="135:28">errp</name></expr></argument>, <argument pos:start="135:31" pos:end="135:33"><expr pos:start="135:31" pos:end="135:33"><name pos:start="135:31" pos:end="135:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="137:9" pos:end="137:18">goto <name pos:start="137:14" pos:end="137:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="143:5" pos:end="143:47"><expr pos:start="143:5" pos:end="143:46"><call pos:start="143:5" pos:end="143:46"><name pos:start="143:5" pos:end="143:32">qmp_x_blockdev_remove_medium</name><argument_list pos:start="143:33" pos:end="143:46">(<argument pos:start="143:34" pos:end="143:39"><expr pos:start="143:34" pos:end="143:39"><name pos:start="143:34" pos:end="143:39">device</name></expr></argument>, <argument pos:start="143:42" pos:end="143:45"><expr pos:start="143:42" pos:end="143:45"><operator pos:start="143:42" pos:end="143:42">&amp;</operator><name pos:start="143:43" pos:end="143:45">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="145:5" pos:end="151:5"><if pos:start="145:5" pos:end="151:5">if <condition pos:start="145:8" pos:end="145:12">(<expr pos:start="145:9" pos:end="145:11"><name pos:start="145:9" pos:end="145:11">err</name></expr>)</condition> <block pos:start="145:14" pos:end="151:5">{<block_content pos:start="147:9" pos:end="149:18">

        <expr_stmt pos:start="147:9" pos:end="147:35"><expr pos:start="147:9" pos:end="147:34"><call pos:start="147:9" pos:end="147:34"><name pos:start="147:9" pos:end="147:23">error_propagate</name><argument_list pos:start="147:24" pos:end="147:34">(<argument pos:start="147:25" pos:end="147:28"><expr pos:start="147:25" pos:end="147:28"><name pos:start="147:25" pos:end="147:28">errp</name></expr></argument>, <argument pos:start="147:31" pos:end="147:33"><expr pos:start="147:31" pos:end="147:33"><name pos:start="147:31" pos:end="147:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="149:9" pos:end="149:18">goto <name pos:start="149:14" pos:end="149:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="155:5" pos:end="155:61"><expr pos:start="155:5" pos:end="155:60"><call pos:start="155:5" pos:end="155:60"><name pos:start="155:5" pos:end="155:35">qmp_blockdev_insert_anon_medium</name><argument_list pos:start="155:36" pos:end="155:60">(<argument pos:start="155:37" pos:end="155:42"><expr pos:start="155:37" pos:end="155:42"><name pos:start="155:37" pos:end="155:42">device</name></expr></argument>, <argument pos:start="155:45" pos:end="155:53"><expr pos:start="155:45" pos:end="155:53"><name pos:start="155:45" pos:end="155:53">medium_bs</name></expr></argument>, <argument pos:start="155:56" pos:end="155:59"><expr pos:start="155:56" pos:end="155:59"><operator pos:start="155:56" pos:end="155:56">&amp;</operator><name pos:start="155:57" pos:end="155:59">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="157:5" pos:end="163:5"><if pos:start="157:5" pos:end="163:5">if <condition pos:start="157:8" pos:end="157:12">(<expr pos:start="157:9" pos:end="157:11"><name pos:start="157:9" pos:end="157:11">err</name></expr>)</condition> <block pos:start="157:14" pos:end="163:5">{<block_content pos:start="159:9" pos:end="161:18">

        <expr_stmt pos:start="159:9" pos:end="159:35"><expr pos:start="159:9" pos:end="159:34"><call pos:start="159:9" pos:end="159:34"><name pos:start="159:9" pos:end="159:23">error_propagate</name><argument_list pos:start="159:24" pos:end="159:34">(<argument pos:start="159:25" pos:end="159:28"><expr pos:start="159:25" pos:end="159:28"><name pos:start="159:25" pos:end="159:28">errp</name></expr></argument>, <argument pos:start="159:31" pos:end="159:33"><expr pos:start="159:31" pos:end="159:33"><name pos:start="159:31" pos:end="159:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="161:9" pos:end="161:18">goto <name pos:start="161:14" pos:end="161:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="167:5" pos:end="167:42"><expr pos:start="167:5" pos:end="167:41"><call pos:start="167:5" pos:end="167:41"><name pos:start="167:5" pos:end="167:27">qmp_blockdev_close_tray</name><argument_list pos:start="167:28" pos:end="167:41">(<argument pos:start="167:29" pos:end="167:34"><expr pos:start="167:29" pos:end="167:34"><name pos:start="167:29" pos:end="167:34">device</name></expr></argument>, <argument pos:start="167:37" pos:end="167:40"><expr pos:start="167:37" pos:end="167:40"><name pos:start="167:37" pos:end="167:40">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="171:1" pos:end="171:5"><name pos:start="171:1" pos:end="171:4">fail</name>:</label>

    <comment type="block" pos:start="173:5" pos:end="177:51">/* If the medium has been inserted, the device has its own reference, so

     * ours must be relinquished; and if it has not been inserted successfully,

     * the reference must be relinquished anyway */</comment>

    <expr_stmt pos:start="179:5" pos:end="179:26"><expr pos:start="179:5" pos:end="179:25"><call pos:start="179:5" pos:end="179:25"><name pos:start="179:5" pos:end="179:14">bdrv_unref</name><argument_list pos:start="179:15" pos:end="179:25">(<argument pos:start="179:16" pos:end="179:24"><expr pos:start="179:16" pos:end="179:24"><name pos:start="179:16" pos:end="179:24">medium_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function></unit>
