<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17828.c" pos:tabs="8"><function pos:start="1:1" pos:end="116:6"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:26">gen_intermediate_code</name><parameter_list pos:start="1:27" pos:end="1:75">(<parameter pos:start="1:28" pos:end="1:45"><decl pos:start="1:28" pos:end="1:45"><type pos:start="1:28" pos:end="1:45"><name pos:start="1:28" pos:end="1:40">CPUAlphaState</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:45">env</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:74"><decl pos:start="1:48" pos:end="1:74"><type pos:start="1:48" pos:end="1:74"><name pos:start="1:48" pos:end="1:70"><name pos:start="1:48" pos:end="1:53">struct</name> <name pos:start="1:55" pos:end="1:70">TranslationBlock</name></name> <modifier pos:start="1:72" pos:end="1:72">*</modifier></type><name pos:start="1:73" pos:end="1:74">tb</name></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="116:6">{<block_content pos:start="3:5" pos:end="116:6">
    <decl_stmt pos:start="3:5" pos:end="3:43"><decl pos:start="3:5" pos:end="3:42"><type pos:start="3:5" pos:end="3:14"><name pos:start="3:5" pos:end="3:12">AlphaCPU</name> <modifier pos:start="3:14" pos:end="3:14">*</modifier></type><name pos:start="3:15" pos:end="3:17">cpu</name> <init pos:start="3:19" pos:end="3:42">= <expr pos:start="3:21" pos:end="3:42"><call pos:start="3:21" pos:end="3:42"><name pos:start="3:21" pos:end="3:37">alpha_env_get_cpu</name><argument_list pos:start="3:38" pos:end="3:42">(<argument pos:start="3:39" pos:end="3:41"><expr pos:start="3:39" pos:end="3:41"><name pos:start="3:39" pos:end="3:41">env</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="4:28"><decl pos:start="4:5" pos:end="4:27"><type pos:start="4:5" pos:end="4:14"><name pos:start="4:5" pos:end="4:12">CPUState</name> <modifier pos:start="4:14" pos:end="4:14">*</modifier></type><name pos:start="4:15" pos:end="4:16">cs</name> <init pos:start="4:18" pos:end="4:27">= <expr pos:start="4:20" pos:end="4:27"><call pos:start="4:20" pos:end="4:27"><name pos:start="4:20" pos:end="4:22">CPU</name><argument_list pos:start="4:23" pos:end="4:27">(<argument pos:start="4:24" pos:end="4:26"><expr pos:start="4:24" pos:end="4:26"><name pos:start="4:24" pos:end="4:26">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:35"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:16">DisasContext</name></type> <name pos:start="5:18" pos:end="5:20">ctx</name></decl>, <decl pos:start="5:23" pos:end="5:34"><type ref="prev" pos:start="5:5" pos:end="5:16"><modifier pos:start="5:23" pos:end="5:23">*</modifier></type><name pos:start="5:24" pos:end="5:27">ctxp</name> <init pos:start="5:29" pos:end="5:34">= <expr pos:start="5:31" pos:end="5:34"><operator pos:start="5:31" pos:end="5:31">&amp;</operator><name pos:start="5:32" pos:end="5:34">ctx</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:26"><decl pos:start="6:5" pos:end="6:25"><type pos:start="6:5" pos:end="6:16"><name pos:start="6:5" pos:end="6:16">target_ulong</name></type> <name pos:start="6:18" pos:end="6:25">pc_start</name></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:16">target_ulong</name></type> <name pos:start="7:18" pos:end="7:24">pc_mask</name></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:18"><decl pos:start="8:5" pos:end="8:17"><type pos:start="8:5" pos:end="8:12"><name pos:start="8:5" pos:end="8:12">uint32_t</name></type> <name pos:start="8:14" pos:end="8:17">insn</name></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:14">ExitStatus</name></type> <name pos:start="9:16" pos:end="9:18">ret</name></decl>;</decl_stmt>
    <decl_stmt pos:start="10:5" pos:end="10:18"><decl pos:start="10:5" pos:end="10:17"><type pos:start="10:5" pos:end="10:7"><name pos:start="10:5" pos:end="10:7">int</name></type> <name pos:start="10:9" pos:end="10:17">num_insns</name></decl>;</decl_stmt>
    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:17">max_insns</name></decl>;</decl_stmt>
    <expr_stmt pos:start="12:5" pos:end="12:22"><expr pos:start="12:5" pos:end="12:21"><name pos:start="12:5" pos:end="12:12">pc_start</name> <operator pos:start="12:14" pos:end="12:14">=</operator> <name pos:start="12:16" pos:end="12:21"><name pos:start="12:16" pos:end="12:17">tb</name><operator pos:start="12:18" pos:end="12:19">-&gt;</operator><name pos:start="12:20" pos:end="12:21">pc</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="13:5" pos:end="13:16"><expr pos:start="13:5" pos:end="13:15"><name pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:7">ctx</name><operator pos:start="13:8" pos:end="13:8">.</operator><name pos:start="13:9" pos:end="13:10">tb</name></name> <operator pos:start="13:12" pos:end="13:12">=</operator> <name pos:start="13:14" pos:end="13:15">tb</name></expr>;</expr_stmt>
    <expr_stmt pos:start="14:5" pos:end="14:22"><expr pos:start="14:5" pos:end="14:21"><name pos:start="14:5" pos:end="14:10"><name pos:start="14:5" pos:end="14:7">ctx</name><operator pos:start="14:8" pos:end="14:8">.</operator><name pos:start="14:9" pos:end="14:10">pc</name></name> <operator pos:start="14:12" pos:end="14:12">=</operator> <name pos:start="14:14" pos:end="14:21">pc_start</name></expr>;</expr_stmt>
    <expr_stmt pos:start="15:5" pos:end="15:28"><expr pos:start="15:5" pos:end="15:27"><name pos:start="15:5" pos:end="15:15"><name pos:start="15:5" pos:end="15:7">ctx</name><operator pos:start="15:8" pos:end="15:8">.</operator><name pos:start="15:9" pos:end="15:15">tbflags</name></name> <operator pos:start="15:17" pos:end="15:17">=</operator> <name pos:start="15:19" pos:end="15:27"><name pos:start="15:19" pos:end="15:20">tb</name><operator pos:start="15:21" pos:end="15:22">-&gt;</operator><name pos:start="15:23" pos:end="15:27">flags</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="16:5" pos:end="16:44"><expr pos:start="16:5" pos:end="16:43"><name pos:start="16:5" pos:end="16:15"><name pos:start="16:5" pos:end="16:7">ctx</name><operator pos:start="16:8" pos:end="16:8">.</operator><name pos:start="16:9" pos:end="16:15">mem_idx</name></name> <operator pos:start="16:17" pos:end="16:17">=</operator> <call pos:start="16:19" pos:end="16:43"><name pos:start="16:19" pos:end="16:31">cpu_mmu_index</name><argument_list pos:start="16:32" pos:end="16:43">(<argument pos:start="16:33" pos:end="16:35"><expr pos:start="16:33" pos:end="16:35"><name pos:start="16:33" pos:end="16:35">env</name></expr></argument>, <argument pos:start="16:38" pos:end="16:42"><expr pos:start="16:38" pos:end="16:42"><name pos:start="16:38" pos:end="16:42">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="17:5" pos:end="17:31"><expr pos:start="17:5" pos:end="17:30"><name pos:start="17:5" pos:end="17:15"><name pos:start="17:5" pos:end="17:7">ctx</name><operator pos:start="17:8" pos:end="17:8">.</operator><name pos:start="17:9" pos:end="17:15">implver</name></name> <operator pos:start="17:17" pos:end="17:17">=</operator> <name pos:start="17:19" pos:end="17:30"><name pos:start="17:19" pos:end="17:21">env</name><operator pos:start="17:22" pos:end="17:23">-&gt;</operator><name pos:start="17:24" pos:end="17:30">implver</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="18:5" pos:end="18:27"><expr pos:start="18:5" pos:end="18:26"><name pos:start="18:5" pos:end="18:13"><name pos:start="18:5" pos:end="18:7">ctx</name><operator pos:start="18:8" pos:end="18:8">.</operator><name pos:start="18:9" pos:end="18:13">amask</name></name> <operator pos:start="18:15" pos:end="18:15">=</operator> <name pos:start="18:17" pos:end="18:26"><name pos:start="18:17" pos:end="18:19">env</name><operator pos:start="18:20" pos:end="18:21">-&gt;</operator><name pos:start="18:22" pos:end="18:26">amask</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="19:5" pos:end="21:0"><expr pos:start="19:5" pos:end="19:51"><name pos:start="19:5" pos:end="19:26"><name pos:start="19:5" pos:end="19:7">ctx</name><operator pos:start="19:8" pos:end="19:8">.</operator><name pos:start="19:9" pos:end="19:26">singlestep_enabled</name></name> <operator pos:start="19:28" pos:end="19:28">=</operator> <name pos:start="19:30" pos:end="19:51"><name pos:start="19:30" pos:end="19:31">cs</name><operator pos:start="19:32" pos:end="19:33">-&gt;</operator><name pos:start="19:34" pos:end="19:51">singlestep_enabled</name></name></expr>;</expr_stmt>
<cpp:ifdef pos:start="20:1" pos:end="20:23">#<cpp:directive pos:start="20:2" pos:end="20:6">ifdef</cpp:directive> <name pos:start="20:8" pos:end="20:23">CONFIG_USER_ONLY</name></cpp:ifdef>
    <expr_stmt pos:start="21:5" pos:end="23:0"><expr pos:start="21:5" pos:end="21:23"><name pos:start="21:5" pos:end="21:10"><name pos:start="21:5" pos:end="21:7">ctx</name><operator pos:start="21:8" pos:end="21:8">.</operator><name pos:start="21:9" pos:end="21:10">ir</name></name> <operator pos:start="21:12" pos:end="21:12">=</operator> <name pos:start="21:14" pos:end="21:23">cpu_std_ir</name></expr>;</expr_stmt>
<cpp:else pos:start="22:1" pos:end="22:5">#<cpp:directive pos:start="22:2" pos:end="22:5">else</cpp:directive></cpp:else>
    <expr_stmt pos:start="23:5" pos:end="23:27"><expr pos:start="23:5" pos:end="23:26"><name pos:start="23:5" pos:end="23:13"><name pos:start="23:5" pos:end="23:7">ctx</name><operator pos:start="23:8" pos:end="23:8">.</operator><name pos:start="23:9" pos:end="23:13">palbr</name></name> <operator pos:start="23:15" pos:end="23:15">=</operator> <name pos:start="23:17" pos:end="23:26"><name pos:start="23:17" pos:end="23:19">env</name><operator pos:start="23:20" pos:end="23:21">-&gt;</operator><name pos:start="23:22" pos:end="23:26">palbr</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="24:5" pos:end="26:0"><expr pos:start="24:5" pos:end="24:72"><name pos:start="24:5" pos:end="24:10"><name pos:start="24:5" pos:end="24:7">ctx</name><operator pos:start="24:8" pos:end="24:8">.</operator><name pos:start="24:9" pos:end="24:10">ir</name></name> <operator pos:start="24:12" pos:end="24:12">=</operator> <operator pos:start="24:14" pos:end="24:14">(</operator><ternary pos:start="24:15" pos:end="24:71"><condition pos:start="24:15" pos:end="24:47"><expr pos:start="24:15" pos:end="24:45"><name pos:start="24:15" pos:end="24:25"><name pos:start="24:15" pos:end="24:17">ctx</name><operator pos:start="24:18" pos:end="24:18">.</operator><name pos:start="24:19" pos:end="24:25">tbflags</name></name> <operator pos:start="24:27" pos:end="24:27">&amp;</operator> <name pos:start="24:29" pos:end="24:45">ENV_FLAG_PAL_MODE</name></expr> ?</condition><then pos:start="24:49" pos:end="24:58"> <expr pos:start="24:49" pos:end="24:58"><name pos:start="24:49" pos:end="24:58">cpu_pal_ir</name></expr> </then><else pos:start="24:60" pos:end="24:71">: <expr pos:start="24:62" pos:end="24:71"><name pos:start="24:62" pos:end="24:71">cpu_std_ir</name></expr></else></ternary><operator pos:start="24:72" pos:end="24:72">)</operator></expr>;</expr_stmt>
<cpp:endif pos:start="25:1" pos:end="25:6">#<cpp:directive pos:start="25:2" pos:end="25:6">endif</cpp:directive></cpp:endif>
    <comment type="block" pos:start="26:5" pos:end="31:74">/* ??? Every TB begins with unset rounding mode, to be initialized on
       the first fp insn of the TB.  Alternately we could define a proper
       default for every TB (e.g. QUAL_RM_N or QUAL_RM_D) and make sure
       to reset the FP_STATUS to that default at the end of any TB that
       changes the default.  We could even (gasp) dynamiclly figure out
       what default would be most efficient given the running program.  */</comment>
    <expr_stmt pos:start="32:5" pos:end="32:19"><expr pos:start="32:5" pos:end="32:18"><name pos:start="32:5" pos:end="32:13"><name pos:start="32:5" pos:end="32:7">ctx</name><operator pos:start="32:8" pos:end="32:8">.</operator><name pos:start="32:9" pos:end="32:13">tb_rm</name></name> <operator pos:start="32:15" pos:end="32:15">=</operator> <operator pos:start="32:17" pos:end="32:17">-</operator><literal type="number" pos:start="32:18" pos:end="32:18">1</literal></expr>;</expr_stmt>
    <comment type="block" pos:start="33:5" pos:end="33:39">/* Similarly for flush-to-zero.  */</comment>
    <expr_stmt pos:start="34:5" pos:end="34:20"><expr pos:start="34:5" pos:end="34:19"><name pos:start="34:5" pos:end="34:14"><name pos:start="34:5" pos:end="34:7">ctx</name><operator pos:start="34:8" pos:end="34:8">.</operator><name pos:start="34:9" pos:end="34:14">tb_ftz</name></name> <operator pos:start="34:16" pos:end="34:16">=</operator> <operator pos:start="34:18" pos:end="34:18">-</operator><literal type="number" pos:start="34:19" pos:end="34:19">1</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="35:5" pos:end="35:30"><expr pos:start="35:5" pos:end="35:29"><call pos:start="35:5" pos:end="35:29"><name pos:start="35:5" pos:end="35:19">TCGV_UNUSED_I64</name><argument_list pos:start="35:20" pos:end="35:29">(<argument pos:start="35:21" pos:end="35:28"><expr pos:start="35:21" pos:end="35:28"><name pos:start="35:21" pos:end="35:28"><name pos:start="35:21" pos:end="35:23">ctx</name><operator pos:start="35:24" pos:end="35:24">.</operator><name pos:start="35:25" pos:end="35:28">zero</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="36:5" pos:end="36:30"><expr pos:start="36:5" pos:end="36:29"><call pos:start="36:5" pos:end="36:29"><name pos:start="36:5" pos:end="36:19">TCGV_UNUSED_I64</name><argument_list pos:start="36:20" pos:end="36:29">(<argument pos:start="36:21" pos:end="36:28"><expr pos:start="36:21" pos:end="36:28"><name pos:start="36:21" pos:end="36:28"><name pos:start="36:21" pos:end="36:23">ctx</name><operator pos:start="36:24" pos:end="36:24">.</operator><name pos:start="36:25" pos:end="36:28">sink</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="37:5" pos:end="37:29"><expr pos:start="37:5" pos:end="37:28"><call pos:start="37:5" pos:end="37:28"><name pos:start="37:5" pos:end="37:19">TCGV_UNUSED_I64</name><argument_list pos:start="37:20" pos:end="37:28">(<argument pos:start="37:21" pos:end="37:27"><expr pos:start="37:21" pos:end="37:27"><name pos:start="37:21" pos:end="37:27"><name pos:start="37:21" pos:end="37:23">ctx</name><operator pos:start="37:24" pos:end="37:24">.</operator><name pos:start="37:25" pos:end="37:27">lit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="38:5" pos:end="38:18"><expr pos:start="38:5" pos:end="38:17"><name pos:start="38:5" pos:end="38:13">num_insns</name> <operator pos:start="38:15" pos:end="38:15">=</operator> <literal type="number" pos:start="38:17" pos:end="38:17">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="39:5" pos:end="39:43"><expr pos:start="39:5" pos:end="39:42"><name pos:start="39:5" pos:end="39:13">max_insns</name> <operator pos:start="39:15" pos:end="39:15">=</operator> <name pos:start="39:17" pos:end="39:26"><name pos:start="39:17" pos:end="39:18">tb</name><operator pos:start="39:19" pos:end="39:20">-&gt;</operator><name pos:start="39:21" pos:end="39:26">cflags</name></name> <operator pos:start="39:28" pos:end="39:28">&amp;</operator> <name pos:start="39:30" pos:end="39:42">CF_COUNT_MASK</name></expr>;</expr_stmt>
    <if_stmt pos:start="40:5" pos:end="116:6"><if pos:start="40:5" pos:end="116:6">if <condition pos:start="40:8" pos:end="40:23">(<expr pos:start="40:9" pos:end="40:22"><name pos:start="40:9" pos:end="40:17">max_insns</name> <operator pos:start="40:19" pos:end="40:20">==</operator> <literal type="number" pos:start="40:22" pos:end="40:22">0</literal></expr>)</condition> <block pos:start="40:25" pos:end="116:6">{<block_content pos:start="41:9" pos:end="116:6">
        <expr_stmt pos:start="41:9" pos:end="41:34"><expr pos:start="41:9" pos:end="41:33"><name pos:start="41:9" pos:end="41:17">max_insns</name> <operator pos:start="41:19" pos:end="41:19">=</operator> <name pos:start="41:21" pos:end="41:33">CF_COUNT_MASK</name></expr>;</expr_stmt>
    <if_stmt pos:start="42:5" pos:end="116:6"><if pos:start="42:5" pos:end="116:6">if <condition pos:start="42:8" pos:end="42:34">(<expr pos:start="42:9" pos:end="42:33"><name pos:start="42:9" pos:end="42:17">max_insns</name> <operator pos:start="42:19" pos:end="42:19">&gt;</operator> <name pos:start="42:21" pos:end="42:33">TCG_MAX_INSNS</name></expr>)</condition> <block pos:start="42:36" pos:end="116:6">{<block_content pos:start="43:9" pos:end="116:6">
        <expr_stmt pos:start="43:9" pos:end="43:34"><expr pos:start="43:9" pos:end="43:33"><name pos:start="43:9" pos:end="43:17">max_insns</name> <operator pos:start="43:19" pos:end="43:19">=</operator> <name pos:start="43:21" pos:end="43:33">TCG_MAX_INSNS</name></expr>;</expr_stmt>
    <if_stmt pos:start="44:5" pos:end="116:6"><if pos:start="44:5" pos:end="46:5">if <condition pos:start="44:8" pos:end="44:37">(<expr pos:start="44:9" pos:end="44:36"><call pos:start="44:9" pos:end="44:36"><name pos:start="44:9" pos:end="44:20">in_superpage</name><argument_list pos:start="44:21" pos:end="44:36">(<argument pos:start="44:22" pos:end="44:25"><expr pos:start="44:22" pos:end="44:25"><operator pos:start="44:22" pos:end="44:22">&amp;</operator><name pos:start="44:23" pos:end="44:25">ctx</name></expr></argument>, <argument pos:start="44:28" pos:end="44:35"><expr pos:start="44:28" pos:end="44:35"><name pos:start="44:28" pos:end="44:35">pc_start</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="44:39" pos:end="46:5">{<block_content pos:start="45:9" pos:end="45:35">
        <expr_stmt pos:start="45:9" pos:end="45:35"><expr pos:start="45:9" pos:end="45:34"><name pos:start="45:9" pos:end="45:15">pc_mask</name> <operator pos:start="45:17" pos:end="45:17">=</operator> <operator pos:start="45:19" pos:end="45:19">(</operator><literal type="number" pos:start="45:20" pos:end="45:23">1ULL</literal> <operator pos:start="45:25" pos:end="45:26">&lt;&lt;</operator> <literal type="number" pos:start="45:28" pos:end="45:29">41</literal><operator pos:start="45:30" pos:end="45:30">)</operator> <operator pos:start="45:32" pos:end="45:32">-</operator> <literal type="number" pos:start="45:34" pos:end="45:34">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="46:7" pos:end="116:6">else <block pos:start="46:12" pos:end="116:6">{<block_content pos:start="47:9" pos:end="116:6">
        <expr_stmt pos:start="47:9" pos:end="47:36"><expr pos:start="47:9" pos:end="47:35"><name pos:start="47:9" pos:end="47:15">pc_mask</name> <operator pos:start="47:17" pos:end="47:17">=</operator> <operator pos:start="47:19" pos:end="47:19">~</operator><name pos:start="47:20" pos:end="47:35">TARGET_PAGE_MASK</name></expr>;</expr_stmt>
    <expr_stmt pos:start="48:5" pos:end="48:21"><expr pos:start="48:5" pos:end="48:20"><call pos:start="48:5" pos:end="48:20"><name pos:start="48:5" pos:end="48:16">gen_tb_start</name><argument_list pos:start="48:17" pos:end="48:20">(<argument pos:start="48:18" pos:end="48:19"><expr pos:start="48:18" pos:end="48:19"><name pos:start="48:18" pos:end="48:19">tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="49:5" pos:end="49:27"><expr pos:start="49:5" pos:end="49:26"><call pos:start="49:5" pos:end="49:26"><name pos:start="49:5" pos:end="49:24">tcg_clear_temp_count</name><argument_list pos:start="49:25" pos:end="49:26">()</argument_list></call></expr>;</expr_stmt>
    <do pos:start="50:5" pos:end="116:6">do <block pos:start="50:8" pos:end="116:6">{<block_content pos:start="51:9" pos:end="116:6">
        <expr_stmt pos:start="51:9" pos:end="51:35"><expr pos:start="51:9" pos:end="51:34"><call pos:start="51:9" pos:end="51:34"><name pos:start="51:9" pos:end="51:26">tcg_gen_insn_start</name><argument_list pos:start="51:27" pos:end="51:34">(<argument pos:start="51:28" pos:end="51:33"><expr pos:start="51:28" pos:end="51:33"><name pos:start="51:28" pos:end="51:33"><name pos:start="51:28" pos:end="51:30">ctx</name><operator pos:start="51:31" pos:end="51:31">.</operator><name pos:start="51:32" pos:end="51:33">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="52:9" pos:end="52:20"><expr pos:start="52:9" pos:end="52:19"><name pos:start="52:9" pos:end="52:17">num_insns</name><operator pos:start="52:18" pos:end="52:19">++</operator></expr>;</expr_stmt>
        <if_stmt pos:start="53:9" pos:end="116:6"><if pos:start="53:9" pos:end="116:6">if <condition pos:start="53:12" pos:end="53:62">(<expr pos:start="53:13" pos:end="53:61"><call pos:start="53:13" pos:end="53:61"><name pos:start="53:13" pos:end="53:20">unlikely</name><argument_list pos:start="53:21" pos:end="53:61">(<argument pos:start="53:22" pos:end="53:60"><expr pos:start="53:22" pos:end="53:60"><call pos:start="53:22" pos:end="53:60"><name pos:start="53:22" pos:end="53:40">cpu_breakpoint_test</name><argument_list pos:start="53:41" pos:end="53:60">(<argument pos:start="53:42" pos:end="53:43"><expr pos:start="53:42" pos:end="53:43"><name pos:start="53:42" pos:end="53:43">cs</name></expr></argument>, <argument pos:start="53:46" pos:end="53:51"><expr pos:start="53:46" pos:end="53:51"><name pos:start="53:46" pos:end="53:51"><name pos:start="53:46" pos:end="53:48">ctx</name><operator pos:start="53:49" pos:end="53:49">.</operator><name pos:start="53:50" pos:end="53:51">pc</name></name></expr></argument>, <argument pos:start="53:54" pos:end="53:59"><expr pos:start="53:54" pos:end="53:59"><name pos:start="53:54" pos:end="53:59">BP_ANY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="53:64" pos:end="116:6">{<block_content pos:start="54:13" pos:end="116:6">
            <expr_stmt pos:start="54:13" pos:end="54:48"><expr pos:start="54:13" pos:end="54:47"><name pos:start="54:13" pos:end="54:15">ret</name> <operator pos:start="54:17" pos:end="54:17">=</operator> <call pos:start="54:19" pos:end="54:47"><name pos:start="54:19" pos:end="54:26">gen_excp</name><argument_list pos:start="54:27" pos:end="54:47">(<argument pos:start="54:28" pos:end="54:31"><expr pos:start="54:28" pos:end="54:31"><operator pos:start="54:28" pos:end="54:28">&amp;</operator><name pos:start="54:29" pos:end="54:31">ctx</name></expr></argument>, <argument pos:start="54:34" pos:end="54:43"><expr pos:start="54:34" pos:end="54:43"><name pos:start="54:34" pos:end="54:43">EXCP_DEBUG</name></expr></argument>, <argument pos:start="54:46" pos:end="54:46"><expr pos:start="54:46" pos:end="54:46"><literal type="number" pos:start="54:46" pos:end="54:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block" pos:start="55:13" pos:end="58:73">/* The address covered by the breakpoint must be included in
               [tb-&gt;pc, tb-&gt;pc + tb-&gt;size) in order to for it to be
               properly cleared -- thus we increment the PC here so that
               the logic setting tb-&gt;size below does the right thing.  */</comment>
            <expr_stmt pos:start="59:13" pos:end="59:24"><expr pos:start="59:13" pos:end="59:23"><name pos:start="59:13" pos:end="59:18"><name pos:start="59:13" pos:end="59:15">ctx</name><operator pos:start="59:16" pos:end="59:16">.</operator><name pos:start="59:17" pos:end="59:18">pc</name></name> <operator pos:start="59:20" pos:end="59:21">+=</operator> <literal type="number" pos:start="59:23" pos:end="59:23">4</literal></expr>;</expr_stmt>
            <break pos:start="60:13" pos:end="60:18">break;</break>
        <if_stmt pos:start="61:9" pos:end="116:6"><if pos:start="61:9" pos:end="116:6">if <condition pos:start="61:12" pos:end="61:64">(<expr pos:start="61:13" pos:end="61:63"><name pos:start="61:13" pos:end="61:21">num_insns</name> <operator pos:start="61:23" pos:end="61:24">==</operator> <name pos:start="61:26" pos:end="61:34">max_insns</name> <operator pos:start="61:36" pos:end="61:37">&amp;&amp;</operator> <operator pos:start="61:39" pos:end="61:39">(</operator><name pos:start="61:40" pos:end="61:49"><name pos:start="61:40" pos:end="61:41">tb</name><operator pos:start="61:42" pos:end="61:43">-&gt;</operator><name pos:start="61:44" pos:end="61:49">cflags</name></name> <operator pos:start="61:51" pos:end="61:51">&amp;</operator> <name pos:start="61:53" pos:end="61:62">CF_LAST_IO</name><operator pos:start="61:63" pos:end="61:63">)</operator></expr>)</condition> <block pos:start="61:66" pos:end="116:6">{<block_content pos:start="62:13" pos:end="116:6">
            <expr_stmt pos:start="62:13" pos:end="62:27"><expr pos:start="62:13" pos:end="62:26"><call pos:start="62:13" pos:end="62:26"><name pos:start="62:13" pos:end="62:24">gen_io_start</name><argument_list pos:start="62:25" pos:end="62:26">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="63:9" pos:end="63:41"><expr pos:start="63:9" pos:end="63:40"><name pos:start="63:9" pos:end="63:12">insn</name> <operator pos:start="63:14" pos:end="63:14">=</operator> <call pos:start="63:16" pos:end="63:40"><name pos:start="63:16" pos:end="63:27">cpu_ldl_code</name><argument_list pos:start="63:28" pos:end="63:40">(<argument pos:start="63:29" pos:end="63:31"><expr pos:start="63:29" pos:end="63:31"><name pos:start="63:29" pos:end="63:31">env</name></expr></argument>, <argument pos:start="63:34" pos:end="63:39"><expr pos:start="63:34" pos:end="63:39"><name pos:start="63:34" pos:end="63:39"><name pos:start="63:34" pos:end="63:36">ctx</name><operator pos:start="63:37" pos:end="63:37">.</operator><name pos:start="63:38" pos:end="63:39">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="64:9" pos:end="64:20"><expr pos:start="64:9" pos:end="64:19"><name pos:start="64:9" pos:end="64:14"><name pos:start="64:9" pos:end="64:11">ctx</name><operator pos:start="64:12" pos:end="64:12">.</operator><name pos:start="64:13" pos:end="64:14">pc</name></name> <operator pos:start="64:16" pos:end="64:17">+=</operator> <literal type="number" pos:start="64:19" pos:end="64:19">4</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="65:9" pos:end="65:40"><expr pos:start="65:9" pos:end="65:39"><name pos:start="65:9" pos:end="65:11">ret</name> <operator pos:start="65:13" pos:end="65:13">=</operator> <call pos:start="65:15" pos:end="65:39"><name pos:start="65:15" pos:end="65:27">translate_one</name><argument_list pos:start="65:28" pos:end="65:39">(<argument pos:start="65:29" pos:end="65:32"><expr pos:start="65:29" pos:end="65:32"><name pos:start="65:29" pos:end="65:32">ctxp</name></expr></argument>, <argument pos:start="65:35" pos:end="65:38"><expr pos:start="65:35" pos:end="65:38"><name pos:start="65:35" pos:end="65:38">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="66:9" pos:end="66:33"><expr pos:start="66:9" pos:end="66:32"><call pos:start="66:9" pos:end="66:32"><name pos:start="66:9" pos:end="66:26">free_context_temps</name><argument_list pos:start="66:27" pos:end="66:32">(<argument pos:start="66:28" pos:end="66:31"><expr pos:start="66:28" pos:end="66:31"><name pos:start="66:28" pos:end="66:31">ctxp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="67:9" pos:end="68:61">/* If we reach a page boundary, are single stepping,
           or exhaust instruction count, stop generation.  */</comment>
        <if_stmt pos:start="69:9" pos:end="76:5"><if pos:start="69:9" pos:end="76:5">if <condition pos:start="69:12" pos:end="74:43">(<expr pos:start="69:13" pos:end="74:42"><name pos:start="69:13" pos:end="69:15">ret</name> <operator pos:start="69:17" pos:end="69:18">==</operator> <name pos:start="69:20" pos:end="69:26">NO_EXIT</name>
            <operator pos:start="70:13" pos:end="70:14">&amp;&amp;</operator> <operator pos:start="70:16" pos:end="70:16">(</operator><operator pos:start="70:17" pos:end="70:17">(</operator><name pos:start="70:18" pos:end="70:23"><name pos:start="70:18" pos:end="70:20">ctx</name><operator pos:start="70:21" pos:end="70:21">.</operator><name pos:start="70:22" pos:end="70:23">pc</name></name> <operator pos:start="70:25" pos:end="70:25">&amp;</operator> <name pos:start="70:27" pos:end="70:33">pc_mask</name><operator pos:start="70:34" pos:end="70:34">)</operator> <operator pos:start="70:36" pos:end="70:37">==</operator> <literal type="number" pos:start="70:39" pos:end="70:39">0</literal>
                <operator pos:start="71:17" pos:end="71:18">||</operator> <call pos:start="71:20" pos:end="71:36"><name pos:start="71:20" pos:end="71:34">tcg_op_buf_full</name><argument_list pos:start="71:35" pos:end="71:36">()</argument_list></call>
                <operator pos:start="72:17" pos:end="72:18">||</operator> <name pos:start="72:20" pos:end="72:28">num_insns</name> <operator pos:start="72:30" pos:end="72:31">&gt;=</operator> <name pos:start="72:33" pos:end="72:41">max_insns</name>
                <operator pos:start="73:17" pos:end="73:18">||</operator> <name pos:start="73:20" pos:end="73:29">singlestep</name>
                <operator pos:start="74:17" pos:end="74:18">||</operator> <name pos:start="74:20" pos:end="74:41"><name pos:start="74:20" pos:end="74:22">ctx</name><operator pos:start="74:23" pos:end="74:23">.</operator><name pos:start="74:24" pos:end="74:41">singlestep_enabled</name></name><operator pos:start="74:42" pos:end="74:42">)</operator></expr>)</condition> <block pos:start="74:45" pos:end="76:5">{<block_content pos:start="75:13" pos:end="75:32">
            <expr_stmt pos:start="75:13" pos:end="75:32"><expr pos:start="75:13" pos:end="75:31"><name pos:start="75:13" pos:end="75:15">ret</name> <operator pos:start="75:17" pos:end="75:17">=</operator> <name pos:start="75:19" pos:end="75:31">EXIT_FALLTHRU</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt> <while pos:start="76:7" pos:end="76:29">while <condition pos:start="76:13" pos:end="76:28">(<expr pos:start="76:14" pos:end="76:27"><name pos:start="76:14" pos:end="76:16">ret</name> <operator pos:start="76:18" pos:end="76:19">==</operator> <name pos:start="76:21" pos:end="76:27">NO_EXIT</name></expr>)</condition><block type="pseudo" pos:start="76:29" pos:end="76:29"><block_content pos:start="76:29" pos:end="76:29"><empty_stmt pos:start="76:29" pos:end="76:29">;</empty_stmt></block_content></block></while>
    <if_stmt pos:start="77:5" pos:end="116:6"><if pos:start="77:5" pos:end="116:6">if <condition pos:start="77:8" pos:end="77:32">(<expr pos:start="77:9" pos:end="77:31"><name pos:start="77:9" pos:end="77:18"><name pos:start="77:9" pos:end="77:10">tb</name><operator pos:start="77:11" pos:end="77:12">-&gt;</operator><name pos:start="77:13" pos:end="77:18">cflags</name></name> <operator pos:start="77:20" pos:end="77:20">&amp;</operator> <name pos:start="77:22" pos:end="77:31">CF_LAST_IO</name></expr>)</condition> <block pos:start="77:34" pos:end="116:6">{<block_content pos:start="78:9" pos:end="116:6">
        <expr_stmt pos:start="78:9" pos:end="78:21"><expr pos:start="78:9" pos:end="78:20"><call pos:start="78:9" pos:end="78:20"><name pos:start="78:9" pos:end="78:18">gen_io_end</name><argument_list pos:start="78:19" pos:end="78:20">()</argument_list></call></expr>;</expr_stmt>
    <switch pos:start="79:5" pos:end="116:6">switch <condition pos:start="79:12" pos:end="79:16">(<expr pos:start="79:13" pos:end="79:15"><name pos:start="79:13" pos:end="79:15">ret</name></expr>)</condition> <block pos:start="79:18" pos:end="116:6">{<block_content pos:start="80:5" pos:end="116:6">
    <case pos:start="80:5" pos:end="80:22">case <expr pos:start="80:10" pos:end="80:21"><name pos:start="80:10" pos:end="80:21">EXIT_GOTO_TB</name></expr>:</case>
    <case pos:start="81:5" pos:end="81:23">case <expr pos:start="81:10" pos:end="81:22"><name pos:start="81:10" pos:end="81:22">EXIT_NORETURN</name></expr>:</case>
        <break pos:start="82:9" pos:end="82:14">break;</break>
    <case pos:start="83:5" pos:end="83:23">case <expr pos:start="83:10" pos:end="83:22"><name pos:start="83:10" pos:end="83:22">EXIT_FALLTHRU</name></expr>:</case>
        <if_stmt pos:start="84:9" pos:end="116:6"><if pos:start="84:9" pos:end="116:6">if <condition pos:start="84:12" pos:end="84:38">(<expr pos:start="84:13" pos:end="84:37"><call pos:start="84:13" pos:end="84:37"><name pos:start="84:13" pos:end="84:23">use_goto_tb</name><argument_list pos:start="84:24" pos:end="84:37">(<argument pos:start="84:25" pos:end="84:28"><expr pos:start="84:25" pos:end="84:28"><operator pos:start="84:25" pos:end="84:25">&amp;</operator><name pos:start="84:26" pos:end="84:28">ctx</name></expr></argument>, <argument pos:start="84:31" pos:end="84:36"><expr pos:start="84:31" pos:end="84:36"><name pos:start="84:31" pos:end="84:36"><name pos:start="84:31" pos:end="84:33">ctx</name><operator pos:start="84:34" pos:end="84:34">.</operator><name pos:start="84:35" pos:end="84:36">pc</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="84:40" pos:end="116:6">{<block_content pos:start="85:13" pos:end="116:6">
            <expr_stmt pos:start="85:13" pos:end="85:31"><expr pos:start="85:13" pos:end="85:30"><call pos:start="85:13" pos:end="85:30"><name pos:start="85:13" pos:end="85:27">tcg_gen_goto_tb</name><argument_list pos:start="85:28" pos:end="85:30">(<argument pos:start="85:29" pos:end="85:29"><expr pos:start="85:29" pos:end="85:29"><literal type="number" pos:start="85:29" pos:end="85:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="86:13" pos:end="86:45"><expr pos:start="86:13" pos:end="86:44"><call pos:start="86:13" pos:end="86:44"><name pos:start="86:13" pos:end="86:28">tcg_gen_movi_i64</name><argument_list pos:start="86:29" pos:end="86:44">(<argument pos:start="86:30" pos:end="86:35"><expr pos:start="86:30" pos:end="86:35"><name pos:start="86:30" pos:end="86:35">cpu_pc</name></expr></argument>, <argument pos:start="86:38" pos:end="86:43"><expr pos:start="86:38" pos:end="86:43"><name pos:start="86:38" pos:end="86:43"><name pos:start="86:38" pos:end="86:40">ctx</name><operator pos:start="86:41" pos:end="86:41">.</operator><name pos:start="86:42" pos:end="86:43">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="87:13" pos:end="87:47"><expr pos:start="87:13" pos:end="87:46"><call pos:start="87:13" pos:end="87:46"><name pos:start="87:13" pos:end="87:27">tcg_gen_exit_tb</name><argument_list pos:start="87:28" pos:end="87:46">(<argument pos:start="87:29" pos:end="87:45"><expr pos:start="87:29" pos:end="87:45"><operator pos:start="87:29" pos:end="87:29">(</operator><name pos:start="87:30" pos:end="87:38">uintptr_t</name><operator pos:start="87:39" pos:end="87:39">)</operator><name pos:start="87:40" pos:end="87:45"><name pos:start="87:40" pos:end="87:42">ctx</name><operator pos:start="87:43" pos:end="87:43">.</operator><name pos:start="87:44" pos:end="87:45">tb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="88:9" pos:end="88:22">/* FALLTHRU */</comment>
    <case pos:start="89:5" pos:end="89:23">case <expr pos:start="89:10" pos:end="89:22"><name pos:start="89:10" pos:end="89:22">EXIT_PC_STALE</name></expr>:</case>
        <expr_stmt pos:start="90:9" pos:end="90:41"><expr pos:start="90:9" pos:end="90:40"><call pos:start="90:9" pos:end="90:40"><name pos:start="90:9" pos:end="90:24">tcg_gen_movi_i64</name><argument_list pos:start="90:25" pos:end="90:40">(<argument pos:start="90:26" pos:end="90:31"><expr pos:start="90:26" pos:end="90:31"><name pos:start="90:26" pos:end="90:31">cpu_pc</name></expr></argument>, <argument pos:start="90:34" pos:end="90:39"><expr pos:start="90:34" pos:end="90:39"><name pos:start="90:34" pos:end="90:39"><name pos:start="90:34" pos:end="90:36">ctx</name><operator pos:start="90:37" pos:end="90:37">.</operator><name pos:start="90:38" pos:end="90:39">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="91:9" pos:end="91:22">/* FALLTHRU */</comment>
    <case pos:start="92:5" pos:end="92:25">case <expr pos:start="92:10" pos:end="92:24"><name pos:start="92:10" pos:end="92:24">EXIT_PC_UPDATED</name></expr>:</case>
        <if_stmt pos:start="93:9" pos:end="116:6"><if pos:start="93:9" pos:end="116:6">if <condition pos:start="93:12" pos:end="93:31">(<expr pos:start="93:13" pos:end="93:30"><operator pos:start="93:13" pos:end="93:13">!</operator><call pos:start="93:14" pos:end="93:30"><name pos:start="93:14" pos:end="93:24">use_exit_tb</name><argument_list pos:start="93:25" pos:end="93:30">(<argument pos:start="93:26" pos:end="93:29"><expr pos:start="93:26" pos:end="93:29"><operator pos:start="93:26" pos:end="93:26">&amp;</operator><name pos:start="93:27" pos:end="93:29">ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="93:33" pos:end="116:6">{<block_content pos:start="94:13" pos:end="116:6">
            <expr_stmt pos:start="94:13" pos:end="94:48"><expr pos:start="94:13" pos:end="94:47"><call pos:start="94:13" pos:end="94:47"><name pos:start="94:13" pos:end="94:39">tcg_gen_lookup_and_goto_ptr</name><argument_list pos:start="94:40" pos:end="94:47">(<argument pos:start="94:41" pos:end="94:46"><expr pos:start="94:41" pos:end="94:46"><name pos:start="94:41" pos:end="94:46">cpu_pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="95:13" pos:end="95:18">break;</break>
        <comment type="block" pos:start="96:9" pos:end="96:22">/* FALLTHRU */</comment>
    <case pos:start="97:5" pos:end="97:33">case <expr pos:start="97:10" pos:end="97:32"><name pos:start="97:10" pos:end="97:32">EXIT_PC_UPDATED_NOCHAIN</name></expr>:</case>
        <if_stmt pos:start="98:9" pos:end="116:6"><if pos:start="98:9" pos:end="100:9">if <condition pos:start="98:12" pos:end="98:35">(<expr pos:start="98:13" pos:end="98:34"><name pos:start="98:13" pos:end="98:34"><name pos:start="98:13" pos:end="98:15">ctx</name><operator pos:start="98:16" pos:end="98:16">.</operator><name pos:start="98:17" pos:end="98:34">singlestep_enabled</name></name></expr>)</condition> <block pos:start="98:37" pos:end="100:9">{<block_content pos:start="99:13" pos:end="99:38">
            <expr_stmt pos:start="99:13" pos:end="99:38"><expr pos:start="99:13" pos:end="99:37"><call pos:start="99:13" pos:end="99:37"><name pos:start="99:13" pos:end="99:22">gen_excp_1</name><argument_list pos:start="99:23" pos:end="99:37">(<argument pos:start="99:24" pos:end="99:33"><expr pos:start="99:24" pos:end="99:33"><name pos:start="99:24" pos:end="99:33">EXCP_DEBUG</name></expr></argument>, <argument pos:start="99:36" pos:end="99:36"><expr pos:start="99:36" pos:end="99:36"><literal type="number" pos:start="99:36" pos:end="99:36">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="100:11" pos:end="116:6">else <block pos:start="100:16" pos:end="116:6">{<block_content pos:start="101:13" pos:end="116:6">
            <expr_stmt pos:start="101:13" pos:end="101:31"><expr pos:start="101:13" pos:end="101:30"><call pos:start="101:13" pos:end="101:30"><name pos:start="101:13" pos:end="101:27">tcg_gen_exit_tb</name><argument_list pos:start="101:28" pos:end="101:30">(<argument pos:start="101:29" pos:end="101:29"><expr pos:start="101:29" pos:end="101:29"><literal type="number" pos:start="101:29" pos:end="101:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="102:9" pos:end="102:14">break;</break>
    <default pos:start="103:5" pos:end="103:12">default:</default>
        <expr_stmt pos:start="104:9" pos:end="104:31"><expr pos:start="104:9" pos:end="104:30"><call pos:start="104:9" pos:end="104:30"><name pos:start="104:9" pos:end="104:28">g_assert_not_reached</name><argument_list pos:start="104:29" pos:end="104:30">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="105:5" pos:end="105:30"><expr pos:start="105:5" pos:end="105:29"><call pos:start="105:5" pos:end="105:29"><name pos:start="105:5" pos:end="105:14">gen_tb_end</name><argument_list pos:start="105:15" pos:end="105:29">(<argument pos:start="105:16" pos:end="105:17"><expr pos:start="105:16" pos:end="105:17"><name pos:start="105:16" pos:end="105:17">tb</name></expr></argument>, <argument pos:start="105:20" pos:end="105:28"><expr pos:start="105:20" pos:end="105:28"><name pos:start="105:20" pos:end="105:28">num_insns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="106:5" pos:end="106:33"><expr pos:start="106:5" pos:end="106:32"><name pos:start="106:5" pos:end="106:12"><name pos:start="106:5" pos:end="106:6">tb</name><operator pos:start="106:7" pos:end="106:8">-&gt;</operator><name pos:start="106:9" pos:end="106:12">size</name></name> <operator pos:start="106:14" pos:end="106:14">=</operator> <name pos:start="106:16" pos:end="106:21"><name pos:start="106:16" pos:end="106:18">ctx</name><operator pos:start="106:19" pos:end="106:19">.</operator><name pos:start="106:20" pos:end="106:21">pc</name></name> <operator pos:start="106:23" pos:end="106:23">-</operator> <name pos:start="106:25" pos:end="106:32">pc_start</name></expr>;</expr_stmt>
    <expr_stmt pos:start="107:5" pos:end="109:0"><expr pos:start="107:5" pos:end="107:26"><name pos:start="107:5" pos:end="107:14"><name pos:start="107:5" pos:end="107:6">tb</name><operator pos:start="107:7" pos:end="107:8">-&gt;</operator><name pos:start="107:9" pos:end="107:14">icount</name></name> <operator pos:start="107:16" pos:end="107:16">=</operator> <name pos:start="107:18" pos:end="107:26">num_insns</name></expr>;</expr_stmt>
<cpp:ifdef pos:start="108:1" pos:end="108:18">#<cpp:directive pos:start="108:2" pos:end="108:6">ifdef</cpp:directive> <name pos:start="108:8" pos:end="108:18">DEBUG_DISAS</name></cpp:ifdef>
    <if_stmt pos:start="109:5" pos:end="116:6"><if pos:start="109:5" pos:end="116:6">if <condition pos:start="109:8" pos:end="110:44">(<expr pos:start="109:9" pos:end="110:43"><call pos:start="109:9" pos:end="109:45"><name pos:start="109:9" pos:end="109:26">qemu_loglevel_mask</name><argument_list pos:start="109:27" pos:end="109:45">(<argument pos:start="109:28" pos:end="109:44"><expr pos:start="109:28" pos:end="109:44"><name pos:start="109:28" pos:end="109:44">CPU_LOG_TB_IN_ASM</name></expr></argument>)</argument_list></call>
        <operator pos:start="110:9" pos:end="110:10">&amp;&amp;</operator> <call pos:start="110:12" pos:end="110:43"><name pos:start="110:12" pos:end="110:33">qemu_log_in_addr_range</name><argument_list pos:start="110:34" pos:end="110:43">(<argument pos:start="110:35" pos:end="110:42"><expr pos:start="110:35" pos:end="110:42"><name pos:start="110:35" pos:end="110:42">pc_start</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="110:46" pos:end="116:6">{<block_content pos:start="111:9" pos:end="116:6">
        <expr_stmt pos:start="111:9" pos:end="111:24"><expr pos:start="111:9" pos:end="111:23"><call pos:start="111:9" pos:end="111:23"><name pos:start="111:9" pos:end="111:21">qemu_log_lock</name><argument_list pos:start="111:22" pos:end="111:23">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="112:9" pos:end="112:54"><expr pos:start="112:9" pos:end="112:53"><call pos:start="112:9" pos:end="112:53"><name pos:start="112:9" pos:end="112:16">qemu_log</name><argument_list pos:start="112:17" pos:end="112:53">(<argument pos:start="112:18" pos:end="112:27"><expr pos:start="112:18" pos:end="112:27"><literal type="string" pos:start="112:18" pos:end="112:27">"IN: %s\n"</literal></expr></argument>, <argument pos:start="112:30" pos:end="112:52"><expr pos:start="112:30" pos:end="112:52"><call pos:start="112:30" pos:end="112:52"><name pos:start="112:30" pos:end="112:42">lookup_symbol</name><argument_list pos:start="112:43" pos:end="112:52">(<argument pos:start="112:44" pos:end="112:51"><expr pos:start="112:44" pos:end="112:51"><name pos:start="112:44" pos:end="112:51">pc_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="113:9" pos:end="113:61"><expr pos:start="113:9" pos:end="113:60"><call pos:start="113:9" pos:end="113:60"><name pos:start="113:9" pos:end="113:24">log_target_disas</name><argument_list pos:start="113:25" pos:end="113:60">(<argument pos:start="113:26" pos:end="113:27"><expr pos:start="113:26" pos:end="113:27"><name pos:start="113:26" pos:end="113:27">cs</name></expr></argument>, <argument pos:start="113:30" pos:end="113:37"><expr pos:start="113:30" pos:end="113:37"><name pos:start="113:30" pos:end="113:37">pc_start</name></expr></argument>, <argument pos:start="113:40" pos:end="113:56"><expr pos:start="113:40" pos:end="113:56"><name pos:start="113:40" pos:end="113:45"><name pos:start="113:40" pos:end="113:42">ctx</name><operator pos:start="113:43" pos:end="113:43">.</operator><name pos:start="113:44" pos:end="113:45">pc</name></name> <operator pos:start="113:47" pos:end="113:47">-</operator> <name pos:start="113:49" pos:end="113:56">pc_start</name></expr></argument>, <argument pos:start="113:59" pos:end="113:59"><expr pos:start="113:59" pos:end="113:59"><literal type="number" pos:start="113:59" pos:end="113:59">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="114:9" pos:end="114:23"><expr pos:start="114:9" pos:end="114:22"><call pos:start="114:9" pos:end="114:22"><name pos:start="114:9" pos:end="114:16">qemu_log</name><argument_list pos:start="114:17" pos:end="114:22">(<argument pos:start="114:18" pos:end="114:21"><expr pos:start="114:18" pos:end="114:21"><literal type="string" pos:start="114:18" pos:end="114:21">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="115:9" pos:end="116:6"><expr pos:start="115:9" pos:end="115:25"><call pos:start="115:9" pos:end="115:25"><name pos:start="115:9" pos:end="115:23">qemu_log_unlock</name><argument_list pos:start="115:24" pos:end="115:25">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></switch></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></do></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function>
<cpp:endif pos:start="116:1" pos:end="116:6">#<cpp:directive pos:start="116:2" pos:end="116:6">endif</cpp:directive></cpp:endif></unit>
