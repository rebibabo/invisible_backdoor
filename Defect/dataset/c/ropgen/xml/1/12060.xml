<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12060.c" pos:tabs="8"><function pos:start="1:1" pos:end="53:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:21">inet_connect_opts</name><parameter_list pos:start="1:22" pos:end="3:35">(<parameter pos:start="1:23" pos:end="1:36"><decl pos:start="1:23" pos:end="1:36"><type pos:start="1:23" pos:end="1:36"><name pos:start="1:23" pos:end="1:30">QemuOpts</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:36">opts</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:48"><decl pos:start="1:39" pos:end="1:48"><type pos:start="1:39" pos:end="1:48"><name pos:start="1:39" pos:end="1:42">bool</name></type> <name pos:start="1:44" pos:end="1:48">block</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:67"><decl pos:start="1:51" pos:end="1:67"><type pos:start="1:51" pos:end="1:67"><name pos:start="1:51" pos:end="1:54">bool</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:67">in_progress</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:34"><decl pos:start="3:23" pos:end="3:34"><type pos:start="3:23" pos:end="3:34"><name pos:start="3:23" pos:end="3:27">Error</name> <modifier pos:start="3:29" pos:end="3:29">*</modifier><modifier pos:start="3:30" pos:end="3:30">*</modifier></type><name pos:start="3:31" pos:end="3:34">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="53:1">{<block_content pos:start="7:5" pos:end="51:16">

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:21"><name pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:19">addrinfo</name></name> <modifier pos:start="7:21" pos:end="7:21">*</modifier></type><name pos:start="7:22" pos:end="7:24">res</name></decl>, <decl pos:start="7:27" pos:end="7:28"><type ref="prev" pos:start="7:5" pos:end="7:21"><modifier pos:start="7:27" pos:end="7:27">*</modifier></type><name pos:start="7:28" pos:end="7:28">e</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:12">sock</name> <init pos:start="9:14" pos:end="9:17">= <expr pos:start="9:16" pos:end="9:17"><operator pos:start="9:16" pos:end="9:16">-</operator><literal type="number" pos:start="9:17" pos:end="9:17">1</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:46"><expr pos:start="13:5" pos:end="13:45"><name pos:start="13:5" pos:end="13:7">res</name> <operator pos:start="13:9" pos:end="13:9">=</operator> <call pos:start="13:11" pos:end="13:45"><name pos:start="13:11" pos:end="13:33">inet_parse_connect_opts</name><argument_list pos:start="13:34" pos:end="13:45">(<argument pos:start="13:35" pos:end="13:38"><expr pos:start="13:35" pos:end="13:38"><name pos:start="13:35" pos:end="13:38">opts</name></expr></argument>, <argument pos:start="13:41" pos:end="13:44"><expr pos:start="13:41" pos:end="13:44"><name pos:start="13:41" pos:end="13:44">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="19:5"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:13">(<expr pos:start="15:9" pos:end="15:12"><operator pos:start="15:9" pos:end="15:9">!</operator><name pos:start="15:10" pos:end="15:12">res</name></expr>)</condition> <block pos:start="15:15" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:18">

        <return pos:start="17:9" pos:end="17:18">return <expr pos:start="17:16" pos:end="17:17"><operator pos:start="17:16" pos:end="17:16">-</operator><literal type="number" pos:start="17:17" pos:end="17:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="23:5" pos:end="27:5"><if pos:start="23:5" pos:end="27:5">if <condition pos:start="23:8" pos:end="23:20">(<expr pos:start="23:9" pos:end="23:19"><name pos:start="23:9" pos:end="23:19">in_progress</name></expr>)</condition> <block pos:start="23:22" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:29">

        <expr_stmt pos:start="25:9" pos:end="25:29"><expr pos:start="25:9" pos:end="25:28"><operator pos:start="25:9" pos:end="25:9">*</operator><name pos:start="25:10" pos:end="25:20">in_progress</name> <operator pos:start="25:22" pos:end="25:22">=</operator> <name pos:start="25:24" pos:end="25:28">false</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <for pos:start="31:5" pos:end="41:5">for <control pos:start="31:9" pos:end="31:44">(<init pos:start="31:10" pos:end="31:17"><expr pos:start="31:10" pos:end="31:16"><name pos:start="31:10" pos:end="31:10">e</name> <operator pos:start="31:12" pos:end="31:12">=</operator> <name pos:start="31:14" pos:end="31:16">res</name></expr>;</init> <condition pos:start="31:19" pos:end="31:28"><expr pos:start="31:19" pos:end="31:27"><name pos:start="31:19" pos:end="31:19">e</name> <operator pos:start="31:21" pos:end="31:22">!=</operator> <name pos:start="31:24" pos:end="31:27">NULL</name></expr>;</condition> <incr pos:start="31:30" pos:end="31:43"><expr pos:start="31:30" pos:end="31:43"><name pos:start="31:30" pos:end="31:30">e</name> <operator pos:start="31:32" pos:end="31:32">=</operator> <name pos:start="31:34" pos:end="31:43"><name pos:start="31:34" pos:end="31:34">e</name><operator pos:start="31:35" pos:end="31:36">-&gt;</operator><name pos:start="31:37" pos:end="31:43">ai_next</name></name></expr></incr>)</control> <block pos:start="31:46" pos:end="41:5">{<block_content pos:start="33:9" pos:end="39:9">

        <expr_stmt pos:start="33:9" pos:end="33:56"><expr pos:start="33:9" pos:end="33:55"><name pos:start="33:9" pos:end="33:12">sock</name> <operator pos:start="33:14" pos:end="33:14">=</operator> <call pos:start="33:16" pos:end="33:55"><name pos:start="33:16" pos:end="33:32">inet_connect_addr</name><argument_list pos:start="33:33" pos:end="33:55">(<argument pos:start="33:34" pos:end="33:34"><expr pos:start="33:34" pos:end="33:34"><name pos:start="33:34" pos:end="33:34">e</name></expr></argument>, <argument pos:start="33:37" pos:end="33:41"><expr pos:start="33:37" pos:end="33:41"><name pos:start="33:37" pos:end="33:41">block</name></expr></argument>, <argument pos:start="33:44" pos:end="33:54"><expr pos:start="33:44" pos:end="33:54"><name pos:start="33:44" pos:end="33:54">in_progress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="35:9" pos:end="39:9"><if pos:start="35:9" pos:end="39:9">if <condition pos:start="35:12" pos:end="35:22">(<expr pos:start="35:13" pos:end="35:21"><name pos:start="35:13" pos:end="35:16">sock</name> <operator pos:start="35:18" pos:end="35:19">&gt;=</operator> <literal type="number" pos:start="35:21" pos:end="35:21">0</literal></expr>)</condition> <block pos:start="35:24" pos:end="39:9">{<block_content pos:start="37:13" pos:end="37:18">

            <break pos:start="37:13" pos:end="37:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <if_stmt pos:start="43:5" pos:end="47:5"><if pos:start="43:5" pos:end="47:5">if <condition pos:start="43:8" pos:end="43:17">(<expr pos:start="43:9" pos:end="43:16"><name pos:start="43:9" pos:end="43:12">sock</name> <operator pos:start="43:14" pos:end="43:14">&lt;</operator> <literal type="number" pos:start="43:16" pos:end="43:16">0</literal></expr>)</condition> <block pos:start="43:19" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:52">

        <expr_stmt pos:start="45:9" pos:end="45:52"><expr pos:start="45:9" pos:end="45:51"><call pos:start="45:9" pos:end="45:51"><name pos:start="45:9" pos:end="45:17">error_set</name><argument_list pos:start="45:18" pos:end="45:51">(<argument pos:start="45:19" pos:end="45:22"><expr pos:start="45:19" pos:end="45:22"><name pos:start="45:19" pos:end="45:22">errp</name></expr></argument>, <argument pos:start="45:25" pos:end="45:50"><expr pos:start="45:25" pos:end="45:50"><name pos:start="45:25" pos:end="45:50">QERR_SOCKET_CONNECT_FAILED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:22"><expr pos:start="49:5" pos:end="49:21"><call pos:start="49:5" pos:end="49:21"><name pos:start="49:5" pos:end="49:16">freeaddrinfo</name><argument_list pos:start="49:17" pos:end="49:21">(<argument pos:start="49:18" pos:end="49:20"><expr pos:start="49:18" pos:end="49:20"><name pos:start="49:18" pos:end="49:20">res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="51:5" pos:end="51:16">return <expr pos:start="51:12" pos:end="51:15"><name pos:start="51:12" pos:end="51:15">sock</name></expr>;</return>

</block_content>}</block></function>
</unit>
