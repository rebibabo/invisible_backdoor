<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/27035.c" pos:tabs="8"><function pos:start="1:1" pos:end="63:1"><type pos:start="1:1" pos:end="1:24"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <name pos:start="1:13" pos:end="1:24">coroutine_fn</name></type> <name pos:start="1:26" pos:end="1:50">wait_serialising_requests</name><parameter_list pos:start="1:51" pos:end="1:76">(<parameter pos:start="1:52" pos:end="1:75"><decl pos:start="1:52" pos:end="1:75"><type pos:start="1:52" pos:end="1:71"><name pos:start="1:52" pos:end="1:69">BdrvTrackedRequest</name> <modifier pos:start="1:71" pos:end="1:71">*</modifier></type><name pos:start="1:72" pos:end="1:75">self</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="63:1">{<block_content pos:start="5:5" pos:end="61:20">

    <decl_stmt pos:start="5:5" pos:end="5:36"><decl pos:start="5:5" pos:end="5:35"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:20">BlockDriverState</name> <modifier pos:start="5:22" pos:end="5:22">*</modifier></type><name pos:start="5:23" pos:end="5:24">bs</name> <init pos:start="5:26" pos:end="5:35">= <expr pos:start="5:28" pos:end="5:35"><name pos:start="5:28" pos:end="5:35"><name pos:start="5:28" pos:end="5:31">self</name><operator pos:start="5:32" pos:end="5:33">-&gt;</operator><name pos:start="5:34" pos:end="5:35">bs</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:24"><name pos:start="7:5" pos:end="7:22">BdrvTrackedRequest</name> <modifier pos:start="7:24" pos:end="7:24">*</modifier></type><name pos:start="7:25" pos:end="7:27">req</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:15"><decl pos:start="9:5" pos:end="9:14"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">bool</name></type> <name pos:start="9:10" pos:end="9:14">retry</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="17:5"><if pos:start="13:5" pos:end="17:5">if <condition pos:start="13:8" pos:end="13:35">(<expr pos:start="13:9" pos:end="13:34"><operator pos:start="13:9" pos:end="13:9">!</operator><name pos:start="13:10" pos:end="13:34"><name pos:start="13:10" pos:end="13:11">bs</name><operator pos:start="13:12" pos:end="13:13">-&gt;</operator><name pos:start="13:14" pos:end="13:34">serialising_in_flight</name></name></expr>)</condition> <block pos:start="13:37" pos:end="17:5">{<block_content pos:start="15:9" pos:end="15:15">

        <return pos:start="15:9" pos:end="15:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <do pos:start="21:5" pos:end="61:20">do <block pos:start="21:8" pos:end="61:5">{<block_content pos:start="23:9" pos:end="59:9">

        <expr_stmt pos:start="23:9" pos:end="23:22"><expr pos:start="23:9" pos:end="23:21"><name pos:start="23:9" pos:end="23:13">retry</name> <operator pos:start="23:15" pos:end="23:15">=</operator> <name pos:start="23:17" pos:end="23:21">false</name></expr>;</expr_stmt>

        <macro pos:start="25:9" pos:end="25:55"><name pos:start="25:9" pos:end="25:21">QLIST_FOREACH</name><argument_list pos:start="25:22" pos:end="25:55">(<argument pos:start="25:23" pos:end="25:25">req</argument>, <argument pos:start="25:28" pos:end="25:48">&amp;bs-&gt;tracked_requests</argument>, <argument pos:start="25:51" pos:end="25:54">list</argument>)</argument_list></macro> <block pos:start="25:57" pos:end="59:9">{<block_content pos:start="27:13" pos:end="57:13">

            <if_stmt pos:start="27:13" pos:end="31:13"><if pos:start="27:13" pos:end="31:13">if <condition pos:start="27:16" pos:end="27:73">(<expr pos:start="27:17" pos:end="27:72"><name pos:start="27:17" pos:end="27:19">req</name> <operator pos:start="27:21" pos:end="27:22">==</operator> <name pos:start="27:24" pos:end="27:27">self</name> <operator pos:start="27:29" pos:end="27:30">||</operator> <operator pos:start="27:32" pos:end="27:32">(</operator><operator pos:start="27:33" pos:end="27:33">!</operator><name pos:start="27:34" pos:end="27:49"><name pos:start="27:34" pos:end="27:36">req</name><operator pos:start="27:37" pos:end="27:38">-&gt;</operator><name pos:start="27:39" pos:end="27:49">serialising</name></name> <operator pos:start="27:51" pos:end="27:52">&amp;&amp;</operator> <operator pos:start="27:54" pos:end="27:54">!</operator><name pos:start="27:55" pos:end="27:71"><name pos:start="27:55" pos:end="27:58">self</name><operator pos:start="27:59" pos:end="27:60">-&gt;</operator><name pos:start="27:61" pos:end="27:71">serialising</name></name><operator pos:start="27:72" pos:end="27:72">)</operator></expr>)</condition> <block pos:start="27:75" pos:end="31:13">{<block_content pos:start="29:17" pos:end="29:25">

                <continue pos:start="29:17" pos:end="29:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="33:13" pos:end="57:13"><if pos:start="33:13" pos:end="57:13">if <condition pos:start="33:16" pos:end="35:62">(<expr pos:start="33:17" pos:end="35:61"><call pos:start="33:17" pos:end="35:61"><name pos:start="33:17" pos:end="33:40">tracked_request_overlaps</name><argument_list pos:start="33:41" pos:end="35:61">(<argument pos:start="33:42" pos:end="33:44"><expr pos:start="33:42" pos:end="33:44"><name pos:start="33:42" pos:end="33:44">req</name></expr></argument>, <argument pos:start="33:47" pos:end="33:66"><expr pos:start="33:47" pos:end="33:66"><name pos:start="33:47" pos:end="33:66"><name pos:start="33:47" pos:end="33:50">self</name><operator pos:start="33:51" pos:end="33:52">-&gt;</operator><name pos:start="33:53" pos:end="33:66">overlap_offset</name></name></expr></argument>,

                                         <argument pos:start="35:42" pos:end="35:60"><expr pos:start="35:42" pos:end="35:60"><name pos:start="35:42" pos:end="35:60"><name pos:start="35:42" pos:end="35:45">self</name><operator pos:start="35:46" pos:end="35:47">-&gt;</operator><name pos:start="35:48" pos:end="35:60">overlap_bytes</name></name></expr></argument>)</argument_list></call></expr>)</condition>

            <block pos:start="37:13" pos:end="57:13">{<block_content pos:start="47:17" pos:end="55:22">

                <comment type="block" pos:start="39:17" pos:end="45:19">/* Hitting this means there was a reentrant request, for

                 * example, a block driver issuing nested requests.  This must

                 * never happen since it means deadlock.

                 */</comment>

                <expr_stmt pos:start="47:17" pos:end="47:57"><expr pos:start="47:17" pos:end="47:56"><call pos:start="47:17" pos:end="47:56"><name pos:start="47:17" pos:end="47:22">assert</name><argument_list pos:start="47:23" pos:end="47:56">(<argument pos:start="47:24" pos:end="47:55"><expr pos:start="47:24" pos:end="47:55"><call pos:start="47:24" pos:end="47:44"><name pos:start="47:24" pos:end="47:42">qemu_coroutine_self</name><argument_list pos:start="47:43" pos:end="47:44">()</argument_list></call> <operator pos:start="47:46" pos:end="47:47">!=</operator> <name pos:start="47:49" pos:end="47:55"><name pos:start="47:49" pos:end="47:51">req</name><operator pos:start="47:52" pos:end="47:53">-&gt;</operator><name pos:start="47:54" pos:end="47:55">co</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="51:17" pos:end="51:53"><expr pos:start="51:17" pos:end="51:52"><call pos:start="51:17" pos:end="51:52"><name pos:start="51:17" pos:end="51:34">qemu_co_queue_wait</name><argument_list pos:start="51:35" pos:end="51:52">(<argument pos:start="51:36" pos:end="51:51"><expr pos:start="51:36" pos:end="51:51"><operator pos:start="51:36" pos:end="51:36">&amp;</operator><name pos:start="51:37" pos:end="51:51"><name pos:start="51:37" pos:end="51:39">req</name><operator pos:start="51:40" pos:end="51:41">-&gt;</operator><name pos:start="51:42" pos:end="51:51">wait_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="53:17" pos:end="53:29"><expr pos:start="53:17" pos:end="53:28"><name pos:start="53:17" pos:end="53:21">retry</name> <operator pos:start="53:23" pos:end="53:23">=</operator> <name pos:start="53:25" pos:end="53:28">true</name></expr>;</expr_stmt>

                <break pos:start="55:17" pos:end="55:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

    </block_content>}</block> while <condition pos:start="61:13" pos:end="61:19">(<expr pos:start="61:14" pos:end="61:18"><name pos:start="61:14" pos:end="61:18">retry</name></expr>)</condition>;</do>

</block_content>}</block></function>
</unit>
