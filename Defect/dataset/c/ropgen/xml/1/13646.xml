<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13646.c" pos:tabs="8"><function pos:start="1:1" pos:end="257:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">decode_frame</name><parameter_list pos:start="1:24" pos:end="3:58">(<parameter pos:start="1:25" pos:end="1:45"><decl pos:start="1:25" pos:end="1:45"><type pos:start="1:25" pos:end="1:45"><name pos:start="1:25" pos:end="1:38">AVCodecContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:45">avctx</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:57"><decl pos:start="1:48" pos:end="1:57"><type pos:start="1:48" pos:end="1:57"><name pos:start="1:48" pos:end="1:51">void</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:57">data</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:42"><decl pos:start="3:25" pos:end="3:42"><type pos:start="3:25" pos:end="3:42"><name pos:start="3:25" pos:end="3:27">int</name> <modifier pos:start="3:29" pos:end="3:29">*</modifier></type><name pos:start="3:30" pos:end="3:42">got_frame_ptr</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:57"><decl pos:start="3:45" pos:end="3:57"><type pos:start="3:45" pos:end="3:57"><name pos:start="3:45" pos:end="3:52">AVPacket</name> <modifier pos:start="3:54" pos:end="3:54">*</modifier></type><name pos:start="3:55" pos:end="3:57">pkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="257:1">{<block_content pos:start="7:5" pos:end="255:21">

    <decl_stmt pos:start="7:5" pos:end="7:45"><decl pos:start="7:5" pos:end="7:44"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">SANMVideoContext</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:25">ctx</name> <init pos:start="7:27" pos:end="7:44">= <expr pos:start="7:29" pos:end="7:44"><name pos:start="7:29" pos:end="7:44"><name pos:start="7:29" pos:end="7:33">avctx</name><operator pos:start="7:34" pos:end="7:35">-&gt;</operator><name pos:start="7:36" pos:end="7:44">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:15"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>, <decl pos:start="9:12" pos:end="9:14"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:14">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:53"><expr pos:start="13:5" pos:end="13:52"><call pos:start="13:5" pos:end="13:52"><name pos:start="13:5" pos:end="13:20">bytestream2_init</name><argument_list pos:start="13:21" pos:end="13:52">(<argument pos:start="13:22" pos:end="13:29"><expr pos:start="13:22" pos:end="13:29"><operator pos:start="13:22" pos:end="13:22">&amp;</operator><name pos:start="13:23" pos:end="13:29"><name pos:start="13:23" pos:end="13:25">ctx</name><operator pos:start="13:26" pos:end="13:27">-&gt;</operator><name pos:start="13:28" pos:end="13:29">gb</name></name></expr></argument>, <argument pos:start="13:32" pos:end="13:40"><expr pos:start="13:32" pos:end="13:40"><name pos:start="13:32" pos:end="13:40"><name pos:start="13:32" pos:end="13:34">pkt</name><operator pos:start="13:35" pos:end="13:36">-&gt;</operator><name pos:start="13:37" pos:end="13:40">data</name></name></expr></argument>, <argument pos:start="13:43" pos:end="13:51"><expr pos:start="13:43" pos:end="13:51"><name pos:start="13:43" pos:end="13:51"><name pos:start="13:43" pos:end="13:45">pkt</name><operator pos:start="13:46" pos:end="13:47">-&gt;</operator><name pos:start="13:48" pos:end="13:51">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="17:50"><if pos:start="15:5" pos:end="17:50">if <condition pos:start="15:8" pos:end="15:29">(<expr pos:start="15:9" pos:end="15:28"><name pos:start="15:9" pos:end="15:28"><name pos:start="15:9" pos:end="15:11">ctx</name><operator pos:start="15:12" pos:end="15:13">-&gt;</operator><name pos:start="15:14" pos:end="15:19">output</name><operator pos:start="15:20" pos:end="15:21">-&gt;</operator><name pos:start="15:22" pos:end="15:25">data</name><index pos:start="15:26" pos:end="15:28">[<expr pos:start="15:27" pos:end="15:27"><literal type="number" pos:start="15:27" pos:end="15:27">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:50"><block_content pos:start="17:9" pos:end="17:50">

        <expr_stmt pos:start="17:9" pos:end="17:50"><expr pos:start="17:9" pos:end="17:49"><call pos:start="17:9" pos:end="17:49"><name pos:start="17:9" pos:end="17:29"><name pos:start="17:9" pos:end="17:13">avctx</name><operator pos:start="17:14" pos:end="17:15">-&gt;</operator><name pos:start="17:16" pos:end="17:29">release_buffer</name></name><argument_list pos:start="17:30" pos:end="17:49">(<argument pos:start="17:31" pos:end="17:35"><expr pos:start="17:31" pos:end="17:35"><name pos:start="17:31" pos:end="17:35">avctx</name></expr></argument>, <argument pos:start="17:38" pos:end="17:48"><expr pos:start="17:38" pos:end="17:48"><name pos:start="17:38" pos:end="17:48"><name pos:start="17:38" pos:end="17:40">ctx</name><operator pos:start="17:41" pos:end="17:42">-&gt;</operator><name pos:start="17:43" pos:end="17:48">output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="21:5" pos:end="241:5"><if pos:start="21:5" pos:end="183:5">if <condition pos:start="21:8" pos:end="21:22">(<expr pos:start="21:9" pos:end="21:21"><operator pos:start="21:9" pos:end="21:9">!</operator><name pos:start="21:10" pos:end="21:21"><name pos:start="21:10" pos:end="21:12">ctx</name><operator pos:start="21:13" pos:end="21:14">-&gt;</operator><name pos:start="21:15" pos:end="21:21">version</name></name></expr>)</condition> <block pos:start="21:24" pos:end="183:5">{<block_content pos:start="23:9" pos:end="181:53">

        <decl_stmt pos:start="23:9" pos:end="23:25"><decl pos:start="23:9" pos:end="23:24"><type pos:start="23:9" pos:end="23:11"><name pos:start="23:9" pos:end="23:11">int</name></type> <name pos:start="23:13" pos:end="23:20">to_store</name> <init pos:start="23:22" pos:end="23:24">= <expr pos:start="23:24" pos:end="23:24"><literal type="number" pos:start="23:24" pos:end="23:24">0</literal></expr></init></decl>;</decl_stmt>



        <while pos:start="27:9" pos:end="171:9">while <condition pos:start="27:15" pos:end="27:57">(<expr pos:start="27:16" pos:end="27:56"><call pos:start="27:16" pos:end="27:51"><name pos:start="27:16" pos:end="27:41">bytestream2_get_bytes_left</name><argument_list pos:start="27:42" pos:end="27:51">(<argument pos:start="27:43" pos:end="27:50"><expr pos:start="27:43" pos:end="27:50"><operator pos:start="27:43" pos:end="27:43">&amp;</operator><name pos:start="27:44" pos:end="27:50"><name pos:start="27:44" pos:end="27:46">ctx</name><operator pos:start="27:47" pos:end="27:48">-&gt;</operator><name pos:start="27:49" pos:end="27:50">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="27:53" pos:end="27:54">&gt;=</operator> <literal type="number" pos:start="27:56" pos:end="27:56">8</literal></expr>)</condition> <block pos:start="27:59" pos:end="171:9">{<block_content pos:start="29:13" pos:end="169:46">

            <decl_stmt pos:start="29:13" pos:end="29:31"><decl pos:start="29:13" pos:end="29:24"><type pos:start="29:13" pos:end="29:20"><name pos:start="29:13" pos:end="29:20">uint32_t</name></type> <name pos:start="29:22" pos:end="29:24">sig</name></decl>, <decl pos:start="29:27" pos:end="29:30"><type ref="prev" pos:start="29:13" pos:end="29:20"/><name pos:start="29:27" pos:end="29:30">size</name></decl>;</decl_stmt>

            <decl_stmt pos:start="31:13" pos:end="31:20"><decl pos:start="31:13" pos:end="31:19"><type pos:start="31:13" pos:end="31:15"><name pos:start="31:13" pos:end="31:15">int</name></type> <name pos:start="31:17" pos:end="31:19">pos</name></decl>;</decl_stmt>



            <expr_stmt pos:start="35:13" pos:end="35:51"><expr pos:start="35:13" pos:end="35:50"><name pos:start="35:13" pos:end="35:15">sig</name>  <operator pos:start="35:18" pos:end="35:18">=</operator> <call pos:start="35:20" pos:end="35:50"><name pos:start="35:20" pos:end="35:40">bytestream2_get_be32u</name><argument_list pos:start="35:41" pos:end="35:50">(<argument pos:start="35:42" pos:end="35:49"><expr pos:start="35:42" pos:end="35:49"><operator pos:start="35:42" pos:end="35:42">&amp;</operator><name pos:start="35:43" pos:end="35:49"><name pos:start="35:43" pos:end="35:45">ctx</name><operator pos:start="35:46" pos:end="35:47">-&gt;</operator><name pos:start="35:48" pos:end="35:49">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:51"><expr pos:start="37:13" pos:end="37:50"><name pos:start="37:13" pos:end="37:16">size</name> <operator pos:start="37:18" pos:end="37:18">=</operator> <call pos:start="37:20" pos:end="37:50"><name pos:start="37:20" pos:end="37:40">bytestream2_get_be32u</name><argument_list pos:start="37:41" pos:end="37:50">(<argument pos:start="37:42" pos:end="37:49"><expr pos:start="37:42" pos:end="37:49"><operator pos:start="37:42" pos:end="37:42">&amp;</operator><name pos:start="37:43" pos:end="37:49"><name pos:start="37:43" pos:end="37:45">ctx</name><operator pos:start="37:46" pos:end="37:47">-&gt;</operator><name pos:start="37:48" pos:end="37:49">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:46"><expr pos:start="39:13" pos:end="39:45"><name pos:start="39:13" pos:end="39:15">pos</name>  <operator pos:start="39:18" pos:end="39:18">=</operator> <call pos:start="39:20" pos:end="39:45"><name pos:start="39:20" pos:end="39:35">bytestream2_tell</name><argument_list pos:start="39:36" pos:end="39:45">(<argument pos:start="39:37" pos:end="39:44"><expr pos:start="39:37" pos:end="39:44"><operator pos:start="39:37" pos:end="39:37">&amp;</operator><name pos:start="39:38" pos:end="39:44"><name pos:start="39:38" pos:end="39:40">ctx</name><operator pos:start="39:41" pos:end="39:42">-&gt;</operator><name pos:start="39:43" pos:end="39:44">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="43:13" pos:end="49:13"><if pos:start="43:13" pos:end="49:13">if <condition pos:start="43:16" pos:end="43:60">(<expr pos:start="43:17" pos:end="43:59"><call pos:start="43:17" pos:end="43:52"><name pos:start="43:17" pos:end="43:42">bytestream2_get_bytes_left</name><argument_list pos:start="43:43" pos:end="43:52">(<argument pos:start="43:44" pos:end="43:51"><expr pos:start="43:44" pos:end="43:51"><operator pos:start="43:44" pos:end="43:44">&amp;</operator><name pos:start="43:45" pos:end="43:51"><name pos:start="43:45" pos:end="43:47">ctx</name><operator pos:start="43:48" pos:end="43:49">-&gt;</operator><name pos:start="43:50" pos:end="43:51">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="43:54" pos:end="43:54">&lt;</operator> <name pos:start="43:56" pos:end="43:59">size</name></expr>)</condition> <block pos:start="43:62" pos:end="49:13">{<block_content pos:start="45:17" pos:end="47:22">

                <expr_stmt pos:start="45:17" pos:end="45:79"><expr pos:start="45:17" pos:end="45:78"><call pos:start="45:17" pos:end="45:78"><name pos:start="45:17" pos:end="45:22">av_log</name><argument_list pos:start="45:23" pos:end="45:78">(<argument pos:start="45:24" pos:end="45:28"><expr pos:start="45:24" pos:end="45:28"><name pos:start="45:24" pos:end="45:28">avctx</name></expr></argument>, <argument pos:start="45:31" pos:end="45:42"><expr pos:start="45:31" pos:end="45:42"><name pos:start="45:31" pos:end="45:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="45:45" pos:end="45:71"><expr pos:start="45:45" pos:end="45:71"><literal type="string" pos:start="45:45" pos:end="45:71">"incorrect chunk size %d\n"</literal></expr></argument>, <argument pos:start="45:74" pos:end="45:77"><expr pos:start="45:74" pos:end="45:77"><name pos:start="45:74" pos:end="45:77">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="47:17" pos:end="47:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <switch pos:start="51:13" pos:end="161:13">switch <condition pos:start="51:20" pos:end="51:24">(<expr pos:start="51:21" pos:end="51:23"><name pos:start="51:21" pos:end="51:23">sig</name></expr>)</condition> <block pos:start="51:26" pos:end="161:13">{<block_content pos:start="53:13" pos:end="159:22">

            <case pos:start="53:13" pos:end="53:45">case <expr pos:start="53:18" pos:end="53:44"><call pos:start="53:18" pos:end="53:44"><name pos:start="53:18" pos:end="53:24">MKBETAG</name><argument_list pos:start="53:25" pos:end="53:44">(<argument pos:start="53:26" pos:end="53:28"><expr pos:start="53:26" pos:end="53:28"><literal type="char" pos:start="53:26" pos:end="53:28">'N'</literal></expr></argument>, <argument pos:start="53:31" pos:end="53:33"><expr pos:start="53:31" pos:end="53:33"><literal type="char" pos:start="53:31" pos:end="53:33">'P'</literal></expr></argument>, <argument pos:start="53:36" pos:end="53:38"><expr pos:start="53:36" pos:end="53:38"><literal type="char" pos:start="53:36" pos:end="53:38">'A'</literal></expr></argument>, <argument pos:start="53:41" pos:end="53:43"><expr pos:start="53:41" pos:end="53:43"><literal type="char" pos:start="53:41" pos:end="53:43">'L'</literal></expr></argument>)</argument_list></call></expr>:</case>

                <if_stmt pos:start="55:17" pos:end="63:17"><if pos:start="55:17" pos:end="63:17">if <condition pos:start="55:20" pos:end="55:36">(<expr pos:start="55:21" pos:end="55:35"><name pos:start="55:21" pos:end="55:24">size</name> <operator pos:start="55:26" pos:end="55:27">!=</operator> <literal type="number" pos:start="55:29" pos:end="55:31">256</literal> <operator pos:start="55:33" pos:end="55:33">*</operator> <literal type="number" pos:start="55:35" pos:end="55:35">3</literal></expr>)</condition> <block pos:start="55:38" pos:end="63:17">{<block_content pos:start="57:21" pos:end="61:47">

                    <expr_stmt pos:start="57:21" pos:end="59:33"><expr pos:start="57:21" pos:end="59:32"><call pos:start="57:21" pos:end="59:32"><name pos:start="57:21" pos:end="57:26">av_log</name><argument_list pos:start="57:27" pos:end="59:32">(<argument pos:start="57:28" pos:end="57:32"><expr pos:start="57:28" pos:end="57:32"><name pos:start="57:28" pos:end="57:32">avctx</name></expr></argument>, <argument pos:start="57:35" pos:end="57:46"><expr pos:start="57:35" pos:end="57:46"><name pos:start="57:35" pos:end="57:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="57:49" pos:end="57:83"><expr pos:start="57:49" pos:end="57:83"><literal type="string" pos:start="57:49" pos:end="57:83">"incorrect palette block size %d\n"</literal></expr></argument>,

                           <argument pos:start="59:28" pos:end="59:31"><expr pos:start="59:28" pos:end="59:31"><name pos:start="59:28" pos:end="59:31">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="61:21" pos:end="61:47">return <expr pos:start="61:28" pos:end="61:46"><name pos:start="61:28" pos:end="61:46">AVERROR_INVALIDDATA</name></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <for pos:start="65:17" pos:end="67:79">for <control pos:start="65:21" pos:end="65:41">(<init pos:start="65:22" pos:end="65:27"><expr pos:start="65:22" pos:end="65:26"><name pos:start="65:22" pos:end="65:22">i</name> <operator pos:start="65:24" pos:end="65:24">=</operator> <literal type="number" pos:start="65:26" pos:end="65:26">0</literal></expr>;</init> <condition pos:start="65:29" pos:end="65:36"><expr pos:start="65:29" pos:end="65:35"><name pos:start="65:29" pos:end="65:29">i</name> <operator pos:start="65:31" pos:end="65:31">&lt;</operator> <literal type="number" pos:start="65:33" pos:end="65:35">256</literal></expr>;</condition> <incr pos:start="65:38" pos:end="65:40"><expr pos:start="65:38" pos:end="65:40"><name pos:start="65:38" pos:end="65:38">i</name><operator pos:start="65:39" pos:end="65:40">++</operator></expr></incr>)</control><block type="pseudo" pos:start="67:21" pos:end="67:79"><block_content pos:start="67:21" pos:end="67:79">

                    <expr_stmt pos:start="67:21" pos:end="67:79"><expr pos:start="67:21" pos:end="67:78"><name pos:start="67:21" pos:end="67:31"><name pos:start="67:21" pos:end="67:23">ctx</name><operator pos:start="67:24" pos:end="67:25">-&gt;</operator><name pos:start="67:26" pos:end="67:28">pal</name><index pos:start="67:29" pos:end="67:31">[<expr pos:start="67:30" pos:end="67:30"><name pos:start="67:30" pos:end="67:30">i</name></expr>]</index></name> <operator pos:start="67:33" pos:end="67:33">=</operator> <literal type="number" pos:start="67:35" pos:end="67:38">0xFF</literal> <operator pos:start="67:40" pos:end="67:41">&lt;&lt;</operator> <literal type="number" pos:start="67:43" pos:end="67:44">24</literal> <operator pos:start="67:46" pos:end="67:46">|</operator> <call pos:start="67:48" pos:end="67:78"><name pos:start="67:48" pos:end="67:68">bytestream2_get_be24u</name><argument_list pos:start="67:69" pos:end="67:78">(<argument pos:start="67:70" pos:end="67:77"><expr pos:start="67:70" pos:end="67:77"><operator pos:start="67:70" pos:end="67:70">&amp;</operator><name pos:start="67:71" pos:end="67:77"><name pos:start="67:71" pos:end="67:73">ctx</name><operator pos:start="67:74" pos:end="67:75">-&gt;</operator><name pos:start="67:76" pos:end="67:77">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                <break pos:start="69:17" pos:end="69:22">break;</break>

            <case pos:start="71:13" pos:end="71:45">case <expr pos:start="71:18" pos:end="71:44"><call pos:start="71:18" pos:end="71:44"><name pos:start="71:18" pos:end="71:24">MKBETAG</name><argument_list pos:start="71:25" pos:end="71:44">(<argument pos:start="71:26" pos:end="71:28"><expr pos:start="71:26" pos:end="71:28"><literal type="char" pos:start="71:26" pos:end="71:28">'F'</literal></expr></argument>, <argument pos:start="71:31" pos:end="71:33"><expr pos:start="71:31" pos:end="71:33"><literal type="char" pos:start="71:31" pos:end="71:33">'O'</literal></expr></argument>, <argument pos:start="71:36" pos:end="71:38"><expr pos:start="71:36" pos:end="71:38"><literal type="char" pos:start="71:36" pos:end="71:38">'B'</literal></expr></argument>, <argument pos:start="71:41" pos:end="71:43"><expr pos:start="71:41" pos:end="71:43"><literal type="char" pos:start="71:41" pos:end="71:43">'J'</literal></expr></argument>)</argument_list></call></expr>:</case>

                <if_stmt pos:start="73:17" pos:end="75:47"><if pos:start="73:17" pos:end="75:47">if <condition pos:start="73:20" pos:end="73:30">(<expr pos:start="73:21" pos:end="73:29"><name pos:start="73:21" pos:end="73:24">size</name> <operator pos:start="73:26" pos:end="73:26">&lt;</operator> <literal type="number" pos:start="73:28" pos:end="73:29">16</literal></expr>)</condition><block type="pseudo" pos:start="75:21" pos:end="75:47"><block_content pos:start="75:21" pos:end="75:47">

                    <return pos:start="75:21" pos:end="75:47">return <expr pos:start="75:28" pos:end="75:46"><name pos:start="75:28" pos:end="75:46">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

                <if_stmt pos:start="77:17" pos:end="79:31"><if pos:start="77:17" pos:end="79:31">if <condition pos:start="77:20" pos:end="77:49">(<expr pos:start="77:21" pos:end="77:48"><name pos:start="77:21" pos:end="77:23">ret</name> <operator pos:start="77:25" pos:end="77:25">=</operator> <call pos:start="77:27" pos:end="77:48"><name pos:start="77:27" pos:end="77:43">process_frame_obj</name><argument_list pos:start="77:44" pos:end="77:48">(<argument pos:start="77:45" pos:end="77:47"><expr pos:start="77:45" pos:end="77:47"><name pos:start="77:45" pos:end="77:47">ctx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="79:21" pos:end="79:31"><block_content pos:start="79:21" pos:end="79:31">

                    <return pos:start="79:21" pos:end="79:31">return <expr pos:start="79:28" pos:end="79:30"><name pos:start="79:28" pos:end="79:30">ret</name></expr>;</return></block_content></block></if></if_stmt>

                <break pos:start="81:17" pos:end="81:22">break;</break>

            <case pos:start="83:13" pos:end="83:45">case <expr pos:start="83:18" pos:end="83:44"><call pos:start="83:18" pos:end="83:44"><name pos:start="83:18" pos:end="83:24">MKBETAG</name><argument_list pos:start="83:25" pos:end="83:44">(<argument pos:start="83:26" pos:end="83:28"><expr pos:start="83:26" pos:end="83:28"><literal type="char" pos:start="83:26" pos:end="83:28">'X'</literal></expr></argument>, <argument pos:start="83:31" pos:end="83:33"><expr pos:start="83:31" pos:end="83:33"><literal type="char" pos:start="83:31" pos:end="83:33">'P'</literal></expr></argument>, <argument pos:start="83:36" pos:end="83:38"><expr pos:start="83:36" pos:end="83:38"><literal type="char" pos:start="83:36" pos:end="83:38">'A'</literal></expr></argument>, <argument pos:start="83:41" pos:end="83:43"><expr pos:start="83:41" pos:end="83:43"><literal type="char" pos:start="83:41" pos:end="83:43">'L'</literal></expr></argument>)</argument_list></call></expr>:</case>

                <if_stmt pos:start="85:17" pos:end="137:17"><if pos:start="85:17" pos:end="107:17">if <condition pos:start="85:20" pos:end="85:43">(<expr pos:start="85:21" pos:end="85:42"><name pos:start="85:21" pos:end="85:24">size</name> <operator pos:start="85:26" pos:end="85:27">==</operator> <literal type="number" pos:start="85:29" pos:end="85:29">6</literal> <operator pos:start="85:31" pos:end="85:32">||</operator> <name pos:start="85:34" pos:end="85:37">size</name> <operator pos:start="85:39" pos:end="85:40">==</operator> <literal type="number" pos:start="85:42" pos:end="85:42">4</literal></expr>)</condition> <block pos:start="85:45" pos:end="107:17">{<block_content pos:start="87:21" pos:end="105:21">

                    <decl_stmt pos:start="87:21" pos:end="87:35"><decl pos:start="87:21" pos:end="87:34"><type pos:start="87:21" pos:end="87:27"><name pos:start="87:21" pos:end="87:27">uint8_t</name></type> <name pos:start="87:29" pos:end="87:34"><name pos:start="87:29" pos:end="87:31">tmp</name><index pos:start="87:32" pos:end="87:34">[<expr pos:start="87:33" pos:end="87:33"><literal type="number" pos:start="87:33" pos:end="87:33">3</literal></expr>]</index></name></decl>;</decl_stmt>

                    <decl_stmt pos:start="89:21" pos:end="89:26"><decl pos:start="89:21" pos:end="89:25"><type pos:start="89:21" pos:end="89:23"><name pos:start="89:21" pos:end="89:23">int</name></type> <name pos:start="89:25" pos:end="89:25">j</name></decl>;</decl_stmt>



                    <for pos:start="93:21" pos:end="105:21">for <control pos:start="93:25" pos:end="93:45">(<init pos:start="93:26" pos:end="93:31"><expr pos:start="93:26" pos:end="93:30"><name pos:start="93:26" pos:end="93:26">i</name> <operator pos:start="93:28" pos:end="93:28">=</operator> <literal type="number" pos:start="93:30" pos:end="93:30">0</literal></expr>;</init> <condition pos:start="93:33" pos:end="93:40"><expr pos:start="93:33" pos:end="93:39"><name pos:start="93:33" pos:end="93:33">i</name> <operator pos:start="93:35" pos:end="93:35">&lt;</operator> <literal type="number" pos:start="93:37" pos:end="93:39">256</literal></expr>;</condition> <incr pos:start="93:42" pos:end="93:44"><expr pos:start="93:42" pos:end="93:44"><name pos:start="93:42" pos:end="93:42">i</name><operator pos:start="93:43" pos:end="93:44">++</operator></expr></incr>)</control> <block pos:start="93:47" pos:end="105:21">{<block_content pos:start="95:25" pos:end="103:64">

                        <for pos:start="95:25" pos:end="101:25">for <control pos:start="95:29" pos:end="95:47">(<init pos:start="95:30" pos:end="95:35"><expr pos:start="95:30" pos:end="95:34"><name pos:start="95:30" pos:end="95:30">j</name> <operator pos:start="95:32" pos:end="95:32">=</operator> <literal type="number" pos:start="95:34" pos:end="95:34">0</literal></expr>;</init> <condition pos:start="95:37" pos:end="95:42"><expr pos:start="95:37" pos:end="95:41"><name pos:start="95:37" pos:end="95:37">j</name> <operator pos:start="95:39" pos:end="95:39">&lt;</operator> <literal type="number" pos:start="95:41" pos:end="95:41">3</literal></expr>;</condition> <incr pos:start="95:44" pos:end="95:46"><expr pos:start="95:44" pos:end="95:46"><name pos:start="95:44" pos:end="95:44">j</name><operator pos:start="95:45" pos:end="95:46">++</operator></expr></incr>)</control> <block pos:start="95:49" pos:end="101:25">{<block_content pos:start="97:29" pos:end="99:95">

                            <decl_stmt pos:start="97:29" pos:end="97:73"><decl pos:start="97:29" pos:end="97:72"><type pos:start="97:29" pos:end="97:31"><name pos:start="97:29" pos:end="97:31">int</name></type> <name pos:start="97:33" pos:end="97:33">t</name> <init pos:start="97:35" pos:end="97:72">= <expr pos:start="97:37" pos:end="97:72"><operator pos:start="97:37" pos:end="97:37">(</operator><name pos:start="97:38" pos:end="97:48"><name pos:start="97:38" pos:end="97:40">ctx</name><operator pos:start="97:41" pos:end="97:42">-&gt;</operator><name pos:start="97:43" pos:end="97:45">pal</name><index pos:start="97:46" pos:end="97:48">[<expr pos:start="97:47" pos:end="97:47"><name pos:start="97:47" pos:end="97:47">i</name></expr>]</index></name> <operator pos:start="97:50" pos:end="97:51">&gt;&gt;</operator> <operator pos:start="97:53" pos:end="97:53">(</operator><literal type="number" pos:start="97:54" pos:end="97:57">16</literal> <operator pos:start="97:57" pos:end="97:57">-</operator> <name pos:start="97:59" pos:end="97:59">j</name> <operator pos:start="97:61" pos:end="97:61">*</operator> <literal type="number" pos:start="97:63" pos:end="97:63">8</literal><operator pos:start="97:64" pos:end="97:64">)</operator><operator pos:start="97:65" pos:end="97:65">)</operator> <operator pos:start="97:67" pos:end="97:67">&amp;</operator> <literal type="number" pos:start="97:69" pos:end="97:72">0xFF</literal></expr></init></decl>;</decl_stmt>

                            <expr_stmt pos:start="99:29" pos:end="99:95"><expr pos:start="99:29" pos:end="99:94"><name pos:start="99:29" pos:end="99:34"><name pos:start="99:29" pos:end="99:31">tmp</name><index pos:start="99:32" pos:end="99:34">[<expr pos:start="99:33" pos:end="99:33"><name pos:start="99:33" pos:end="99:33">j</name></expr>]</index></name> <operator pos:start="99:36" pos:end="99:36">=</operator> <call pos:start="99:38" pos:end="99:94"><name pos:start="99:38" pos:end="99:50">av_clip_uint8</name><argument_list pos:start="99:51" pos:end="99:94">(<argument pos:start="99:52" pos:end="99:93"><expr pos:start="99:52" pos:end="99:93"><operator pos:start="99:52" pos:end="99:52">(</operator><name pos:start="99:53" pos:end="99:53">t</name> <operator pos:start="99:55" pos:end="99:55">*</operator> <literal type="number" pos:start="99:57" pos:end="99:61">129</literal> <operator pos:start="99:61" pos:end="99:61">+</operator> <name pos:start="99:63" pos:end="99:87"><name pos:start="99:63" pos:end="99:65">ctx</name><operator pos:start="99:66" pos:end="99:67">-&gt;</operator><name pos:start="99:68" pos:end="99:76">delta_pal</name><index pos:start="99:77" pos:end="99:87">[<expr pos:start="99:78" pos:end="99:86"><name pos:start="99:78" pos:end="99:78">i</name> <operator pos:start="99:80" pos:end="99:80">*</operator> <literal type="number" pos:start="99:82" pos:end="99:84">3</literal> <operator pos:start="99:84" pos:end="99:84">+</operator> <name pos:start="99:86" pos:end="99:86">j</name></expr>]</index></name><operator pos:start="99:88" pos:end="99:88">)</operator> <operator pos:start="99:90" pos:end="99:91">&gt;&gt;</operator> <literal type="number" pos:start="99:93" pos:end="99:93">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></for>

                        <expr_stmt pos:start="103:25" pos:end="103:64"><expr pos:start="103:25" pos:end="103:63"><name pos:start="103:25" pos:end="103:35"><name pos:start="103:25" pos:end="103:27">ctx</name><operator pos:start="103:28" pos:end="103:29">-&gt;</operator><name pos:start="103:30" pos:end="103:32">pal</name><index pos:start="103:33" pos:end="103:35">[<expr pos:start="103:34" pos:end="103:34"><name pos:start="103:34" pos:end="103:34">i</name></expr>]</index></name> <operator pos:start="103:37" pos:end="103:37">=</operator> <literal type="number" pos:start="103:39" pos:end="103:42">0xFF</literal> <operator pos:start="103:44" pos:end="103:45">&lt;&lt;</operator> <literal type="number" pos:start="103:47" pos:end="103:48">24</literal> <operator pos:start="103:50" pos:end="103:50">|</operator> <call pos:start="103:52" pos:end="103:63"><name pos:start="103:52" pos:end="103:58">AV_RB24</name><argument_list pos:start="103:59" pos:end="103:63">(<argument pos:start="103:60" pos:end="103:62"><expr pos:start="103:60" pos:end="103:62"><name pos:start="103:60" pos:end="103:62">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></for>

                </block_content>}</block></if> <else pos:start="107:19" pos:end="137:17">else <block pos:start="107:24" pos:end="137:17">{<block_content pos:start="109:21" pos:end="135:21">

                    <if_stmt pos:start="109:21" pos:end="117:21"><if pos:start="109:21" pos:end="117:21">if <condition pos:start="109:24" pos:end="109:43">(<expr pos:start="109:25" pos:end="109:42"><name pos:start="109:25" pos:end="109:28">size</name> <operator pos:start="109:30" pos:end="109:30">&lt;</operator> <literal type="number" pos:start="109:32" pos:end="109:34">768</literal> <operator pos:start="109:36" pos:end="109:36">*</operator> <literal type="number" pos:start="109:38" pos:end="109:40">2</literal> <operator pos:start="109:40" pos:end="109:40">+</operator> <literal type="number" pos:start="109:42" pos:end="109:42">4</literal></expr>)</condition> <block pos:start="109:45" pos:end="117:21">{<block_content pos:start="111:25" pos:end="115:51">

                        <expr_stmt pos:start="111:25" pos:end="113:37"><expr pos:start="111:25" pos:end="113:36"><call pos:start="111:25" pos:end="113:36"><name pos:start="111:25" pos:end="111:30">av_log</name><argument_list pos:start="111:31" pos:end="113:36">(<argument pos:start="111:32" pos:end="111:36"><expr pos:start="111:32" pos:end="111:36"><name pos:start="111:32" pos:end="111:36">avctx</name></expr></argument>, <argument pos:start="111:39" pos:end="111:50"><expr pos:start="111:39" pos:end="111:50"><name pos:start="111:39" pos:end="111:50">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="111:53" pos:end="111:94"><expr pos:start="111:53" pos:end="111:94"><literal type="string" pos:start="111:53" pos:end="111:94">"incorrect palette change block size %d\n"</literal></expr></argument>,

                               <argument pos:start="113:32" pos:end="113:35"><expr pos:start="113:32" pos:end="113:35"><name pos:start="113:32" pos:end="113:35">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <return pos:start="115:25" pos:end="115:51">return <expr pos:start="115:32" pos:end="115:50"><name pos:start="115:32" pos:end="115:50">AVERROR_INVALIDDATA</name></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="119:21" pos:end="119:51"><expr pos:start="119:21" pos:end="119:50"><call pos:start="119:21" pos:end="119:50"><name pos:start="119:21" pos:end="119:37">bytestream2_skipu</name><argument_list pos:start="119:38" pos:end="119:50">(<argument pos:start="119:39" pos:end="119:46"><expr pos:start="119:39" pos:end="119:46"><operator pos:start="119:39" pos:end="119:39">&amp;</operator><name pos:start="119:40" pos:end="119:46"><name pos:start="119:40" pos:end="119:42">ctx</name><operator pos:start="119:43" pos:end="119:44">-&gt;</operator><name pos:start="119:45" pos:end="119:46">gb</name></name></expr></argument>, <argument pos:start="119:49" pos:end="119:49"><expr pos:start="119:49" pos:end="119:49"><literal type="number" pos:start="119:49" pos:end="119:49">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <for pos:start="121:21" pos:end="123:76">for <control pos:start="121:25" pos:end="121:45">(<init pos:start="121:26" pos:end="121:31"><expr pos:start="121:26" pos:end="121:30"><name pos:start="121:26" pos:end="121:26">i</name> <operator pos:start="121:28" pos:end="121:28">=</operator> <literal type="number" pos:start="121:30" pos:end="121:30">0</literal></expr>;</init> <condition pos:start="121:33" pos:end="121:40"><expr pos:start="121:33" pos:end="121:39"><name pos:start="121:33" pos:end="121:33">i</name> <operator pos:start="121:35" pos:end="121:35">&lt;</operator> <literal type="number" pos:start="121:37" pos:end="121:39">768</literal></expr>;</condition> <incr pos:start="121:42" pos:end="121:44"><expr pos:start="121:42" pos:end="121:44"><name pos:start="121:42" pos:end="121:42">i</name><operator pos:start="121:43" pos:end="121:44">++</operator></expr></incr>)</control><block type="pseudo" pos:start="123:25" pos:end="123:76"><block_content pos:start="123:25" pos:end="123:76">

                        <expr_stmt pos:start="123:25" pos:end="123:76"><expr pos:start="123:25" pos:end="123:75"><name pos:start="123:25" pos:end="123:41"><name pos:start="123:25" pos:end="123:27">ctx</name><operator pos:start="123:28" pos:end="123:29">-&gt;</operator><name pos:start="123:30" pos:end="123:38">delta_pal</name><index pos:start="123:39" pos:end="123:41">[<expr pos:start="123:40" pos:end="123:40"><name pos:start="123:40" pos:end="123:40">i</name></expr>]</index></name> <operator pos:start="123:43" pos:end="123:43">=</operator> <call pos:start="123:45" pos:end="123:75"><name pos:start="123:45" pos:end="123:65">bytestream2_get_le16u</name><argument_list pos:start="123:66" pos:end="123:75">(<argument pos:start="123:67" pos:end="123:74"><expr pos:start="123:67" pos:end="123:74"><operator pos:start="123:67" pos:end="123:67">&amp;</operator><name pos:start="123:68" pos:end="123:74"><name pos:start="123:68" pos:end="123:70">ctx</name><operator pos:start="123:71" pos:end="123:72">-&gt;</operator><name pos:start="123:73" pos:end="123:74">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                    <if_stmt pos:start="125:21" pos:end="135:21"><if pos:start="125:21" pos:end="131:21">if <condition pos:start="125:24" pos:end="125:44">(<expr pos:start="125:25" pos:end="125:43"><name pos:start="125:25" pos:end="125:28">size</name> <operator pos:start="125:30" pos:end="125:31">&gt;=</operator> <literal type="number" pos:start="125:33" pos:end="125:35">768</literal> <operator pos:start="125:37" pos:end="125:37">*</operator> <literal type="number" pos:start="125:39" pos:end="125:41">5</literal> <operator pos:start="125:41" pos:end="125:41">+</operator> <literal type="number" pos:start="125:43" pos:end="125:43">4</literal></expr>)</condition> <block pos:start="125:46" pos:end="131:21">{<block_content pos:start="127:25" pos:end="129:87">

                        <for pos:start="127:25" pos:end="129:87">for <control pos:start="127:29" pos:end="127:49">(<init pos:start="127:30" pos:end="127:35"><expr pos:start="127:30" pos:end="127:34"><name pos:start="127:30" pos:end="127:30">i</name> <operator pos:start="127:32" pos:end="127:32">=</operator> <literal type="number" pos:start="127:34" pos:end="127:34">0</literal></expr>;</init> <condition pos:start="127:37" pos:end="127:44"><expr pos:start="127:37" pos:end="127:43"><name pos:start="127:37" pos:end="127:37">i</name> <operator pos:start="127:39" pos:end="127:39">&lt;</operator> <literal type="number" pos:start="127:41" pos:end="127:43">256</literal></expr>;</condition> <incr pos:start="127:46" pos:end="127:48"><expr pos:start="127:46" pos:end="127:48"><name pos:start="127:46" pos:end="127:46">i</name><operator pos:start="127:47" pos:end="127:48">++</operator></expr></incr>)</control><block type="pseudo" pos:start="129:29" pos:end="129:87"><block_content pos:start="129:29" pos:end="129:87">

                            <expr_stmt pos:start="129:29" pos:end="129:87"><expr pos:start="129:29" pos:end="129:86"><name pos:start="129:29" pos:end="129:39"><name pos:start="129:29" pos:end="129:31">ctx</name><operator pos:start="129:32" pos:end="129:33">-&gt;</operator><name pos:start="129:34" pos:end="129:36">pal</name><index pos:start="129:37" pos:end="129:39">[<expr pos:start="129:38" pos:end="129:38"><name pos:start="129:38" pos:end="129:38">i</name></expr>]</index></name> <operator pos:start="129:41" pos:end="129:41">=</operator> <literal type="number" pos:start="129:43" pos:end="129:46">0xFF</literal> <operator pos:start="129:48" pos:end="129:49">&lt;&lt;</operator> <literal type="number" pos:start="129:51" pos:end="129:52">24</literal> <operator pos:start="129:54" pos:end="129:54">|</operator> <call pos:start="129:56" pos:end="129:86"><name pos:start="129:56" pos:end="129:76">bytestream2_get_be24u</name><argument_list pos:start="129:77" pos:end="129:86">(<argument pos:start="129:78" pos:end="129:85"><expr pos:start="129:78" pos:end="129:85"><operator pos:start="129:78" pos:end="129:78">&amp;</operator><name pos:start="129:79" pos:end="129:85"><name pos:start="129:79" pos:end="129:81">ctx</name><operator pos:start="129:82" pos:end="129:83">-&gt;</operator><name pos:start="129:84" pos:end="129:85">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                    </block_content>}</block></if> <else pos:start="131:23" pos:end="135:21">else <block pos:start="131:28" pos:end="135:21">{<block_content pos:start="133:25" pos:end="133:62">

                        <expr_stmt pos:start="133:25" pos:end="133:62"><expr pos:start="133:25" pos:end="133:61"><call pos:start="133:25" pos:end="133:61"><name pos:start="133:25" pos:end="133:30">memset</name><argument_list pos:start="133:31" pos:end="133:61">(<argument pos:start="133:32" pos:end="133:39"><expr pos:start="133:32" pos:end="133:39"><name pos:start="133:32" pos:end="133:39"><name pos:start="133:32" pos:end="133:34">ctx</name><operator pos:start="133:35" pos:end="133:36">-&gt;</operator><name pos:start="133:37" pos:end="133:39">pal</name></name></expr></argument>, <argument pos:start="133:42" pos:end="133:42"><expr pos:start="133:42" pos:end="133:42"><literal type="number" pos:start="133:42" pos:end="133:42">0</literal></expr></argument>, <argument pos:start="133:45" pos:end="133:60"><expr pos:start="133:45" pos:end="133:60"><sizeof pos:start="133:45" pos:end="133:60">sizeof<argument_list pos:start="133:51" pos:end="133:60">(<argument pos:start="133:52" pos:end="133:59"><expr pos:start="133:52" pos:end="133:59"><name pos:start="133:52" pos:end="133:59"><name pos:start="133:52" pos:end="133:54">ctx</name><operator pos:start="133:55" pos:end="133:56">-&gt;</operator><name pos:start="133:57" pos:end="133:59">pal</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></else></if_stmt>

                <break pos:start="139:17" pos:end="139:22">break;</break>

            <case pos:start="141:13" pos:end="141:45">case <expr pos:start="141:18" pos:end="141:44"><call pos:start="141:18" pos:end="141:44"><name pos:start="141:18" pos:end="141:24">MKBETAG</name><argument_list pos:start="141:25" pos:end="141:44">(<argument pos:start="141:26" pos:end="141:28"><expr pos:start="141:26" pos:end="141:28"><literal type="char" pos:start="141:26" pos:end="141:28">'S'</literal></expr></argument>, <argument pos:start="141:31" pos:end="141:33"><expr pos:start="141:31" pos:end="141:33"><literal type="char" pos:start="141:31" pos:end="141:33">'T'</literal></expr></argument>, <argument pos:start="141:36" pos:end="141:38"><expr pos:start="141:36" pos:end="141:38"><literal type="char" pos:start="141:36" pos:end="141:38">'O'</literal></expr></argument>, <argument pos:start="141:41" pos:end="141:43"><expr pos:start="141:41" pos:end="141:43"><literal type="char" pos:start="141:41" pos:end="141:43">'R'</literal></expr></argument>)</argument_list></call></expr>:</case>

                <expr_stmt pos:start="143:17" pos:end="143:29"><expr pos:start="143:17" pos:end="143:28"><name pos:start="143:17" pos:end="143:24">to_store</name> <operator pos:start="143:26" pos:end="143:26">=</operator> <literal type="number" pos:start="143:28" pos:end="143:28">1</literal></expr>;</expr_stmt>

                <break pos:start="145:17" pos:end="145:22">break;</break>

            <case pos:start="147:13" pos:end="147:45">case <expr pos:start="147:18" pos:end="147:44"><call pos:start="147:18" pos:end="147:44"><name pos:start="147:18" pos:end="147:24">MKBETAG</name><argument_list pos:start="147:25" pos:end="147:44">(<argument pos:start="147:26" pos:end="147:28"><expr pos:start="147:26" pos:end="147:28"><literal type="char" pos:start="147:26" pos:end="147:28">'F'</literal></expr></argument>, <argument pos:start="147:31" pos:end="147:33"><expr pos:start="147:31" pos:end="147:33"><literal type="char" pos:start="147:31" pos:end="147:33">'T'</literal></expr></argument>, <argument pos:start="147:36" pos:end="147:38"><expr pos:start="147:36" pos:end="147:38"><literal type="char" pos:start="147:36" pos:end="147:38">'C'</literal></expr></argument>, <argument pos:start="147:41" pos:end="147:43"><expr pos:start="147:41" pos:end="147:43"><literal type="char" pos:start="147:41" pos:end="147:43">'H'</literal></expr></argument>)</argument_list></call></expr>:</case>

                <expr_stmt pos:start="149:17" pos:end="149:68"><expr pos:start="149:17" pos:end="149:67"><call pos:start="149:17" pos:end="149:67"><name pos:start="149:17" pos:end="149:22">memcpy</name><argument_list pos:start="149:23" pos:end="149:67">(<argument pos:start="149:24" pos:end="149:32"><expr pos:start="149:24" pos:end="149:32"><name pos:start="149:24" pos:end="149:32"><name pos:start="149:24" pos:end="149:26">ctx</name><operator pos:start="149:27" pos:end="149:28">-&gt;</operator><name pos:start="149:29" pos:end="149:32">frm0</name></name></expr></argument>, <argument pos:start="149:35" pos:end="149:51"><expr pos:start="149:35" pos:end="149:51"><name pos:start="149:35" pos:end="149:51"><name pos:start="149:35" pos:end="149:37">ctx</name><operator pos:start="149:38" pos:end="149:39">-&gt;</operator><name pos:start="149:40" pos:end="149:51">stored_frame</name></name></expr></argument>, <argument pos:start="149:54" pos:end="149:66"><expr pos:start="149:54" pos:end="149:66"><name pos:start="149:54" pos:end="149:66"><name pos:start="149:54" pos:end="149:56">ctx</name><operator pos:start="149:57" pos:end="149:58">-&gt;</operator><name pos:start="149:59" pos:end="149:66">buf_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="151:17" pos:end="151:22">break;</break>

            <default pos:start="153:13" pos:end="153:20">default:</default>

                <expr_stmt pos:start="155:17" pos:end="155:49"><expr pos:start="155:17" pos:end="155:48"><call pos:start="155:17" pos:end="155:48"><name pos:start="155:17" pos:end="155:32">bytestream2_skip</name><argument_list pos:start="155:33" pos:end="155:48">(<argument pos:start="155:34" pos:end="155:41"><expr pos:start="155:34" pos:end="155:41"><operator pos:start="155:34" pos:end="155:34">&amp;</operator><name pos:start="155:35" pos:end="155:41"><name pos:start="155:35" pos:end="155:37">ctx</name><operator pos:start="155:38" pos:end="155:39">-&gt;</operator><name pos:start="155:40" pos:end="155:41">gb</name></name></expr></argument>, <argument pos:start="155:44" pos:end="155:47"><expr pos:start="155:44" pos:end="155:47"><name pos:start="155:44" pos:end="155:47">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="157:17" pos:end="157:83"><expr pos:start="157:17" pos:end="157:82"><call pos:start="157:17" pos:end="157:82"><name pos:start="157:17" pos:end="157:22">av_log</name><argument_list pos:start="157:23" pos:end="157:82">(<argument pos:start="157:24" pos:end="157:28"><expr pos:start="157:24" pos:end="157:28"><name pos:start="157:24" pos:end="157:28">avctx</name></expr></argument>, <argument pos:start="157:31" pos:end="157:42"><expr pos:start="157:31" pos:end="157:42"><name pos:start="157:31" pos:end="157:42">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="157:45" pos:end="157:76"><expr pos:start="157:45" pos:end="157:76"><literal type="string" pos:start="157:45" pos:end="157:76">"unknown/unsupported chunk %x\n"</literal></expr></argument>, <argument pos:start="157:79" pos:end="157:81"><expr pos:start="157:79" pos:end="157:81"><name pos:start="157:79" pos:end="157:81">sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="159:17" pos:end="159:22">break;</break>

            </block_content>}</block></switch>



            <expr_stmt pos:start="165:13" pos:end="165:61"><expr pos:start="165:13" pos:end="165:60"><call pos:start="165:13" pos:end="165:60"><name pos:start="165:13" pos:end="165:28">bytestream2_seek</name><argument_list pos:start="165:29" pos:end="165:60">(<argument pos:start="165:30" pos:end="165:37"><expr pos:start="165:30" pos:end="165:37"><operator pos:start="165:30" pos:end="165:30">&amp;</operator><name pos:start="165:31" pos:end="165:37"><name pos:start="165:31" pos:end="165:33">ctx</name><operator pos:start="165:34" pos:end="165:35">-&gt;</operator><name pos:start="165:36" pos:end="165:37">gb</name></name></expr></argument>, <argument pos:start="165:40" pos:end="165:49"><expr pos:start="165:40" pos:end="165:49"><name pos:start="165:40" pos:end="165:42">pos</name> <operator pos:start="165:44" pos:end="165:44">+</operator> <name pos:start="165:46" pos:end="165:49">size</name></expr></argument>, <argument pos:start="165:52" pos:end="165:59"><expr pos:start="165:52" pos:end="165:59"><name pos:start="165:52" pos:end="165:59">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="167:13" pos:end="169:46"><if pos:start="167:13" pos:end="169:46">if <condition pos:start="167:16" pos:end="167:25">(<expr pos:start="167:17" pos:end="167:24"><name pos:start="167:17" pos:end="167:20">size</name> <operator pos:start="167:22" pos:end="167:22">&amp;</operator> <literal type="number" pos:start="167:24" pos:end="167:24">1</literal></expr>)</condition><block type="pseudo" pos:start="169:17" pos:end="169:46"><block_content pos:start="169:17" pos:end="169:46">

                <expr_stmt pos:start="169:17" pos:end="169:46"><expr pos:start="169:17" pos:end="169:45"><call pos:start="169:17" pos:end="169:45"><name pos:start="169:17" pos:end="169:32">bytestream2_skip</name><argument_list pos:start="169:33" pos:end="169:45">(<argument pos:start="169:34" pos:end="169:41"><expr pos:start="169:34" pos:end="169:41"><operator pos:start="169:34" pos:end="169:34">&amp;</operator><name pos:start="169:35" pos:end="169:41"><name pos:start="169:35" pos:end="169:37">ctx</name><operator pos:start="169:38" pos:end="169:39">-&gt;</operator><name pos:start="169:40" pos:end="169:41">gb</name></name></expr></argument>, <argument pos:start="169:44" pos:end="169:44"><expr pos:start="169:44" pos:end="169:44"><literal type="number" pos:start="169:44" pos:end="169:44">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></while>

        <if_stmt pos:start="173:9" pos:end="175:64"><if pos:start="173:9" pos:end="175:64">if <condition pos:start="173:12" pos:end="173:21">(<expr pos:start="173:13" pos:end="173:20"><name pos:start="173:13" pos:end="173:20">to_store</name></expr>)</condition><block type="pseudo" pos:start="175:13" pos:end="175:64"><block_content pos:start="175:13" pos:end="175:64">

            <expr_stmt pos:start="175:13" pos:end="175:64"><expr pos:start="175:13" pos:end="175:63"><call pos:start="175:13" pos:end="175:63"><name pos:start="175:13" pos:end="175:18">memcpy</name><argument_list pos:start="175:19" pos:end="175:63">(<argument pos:start="175:20" pos:end="175:36"><expr pos:start="175:20" pos:end="175:36"><name pos:start="175:20" pos:end="175:36"><name pos:start="175:20" pos:end="175:22">ctx</name><operator pos:start="175:23" pos:end="175:24">-&gt;</operator><name pos:start="175:25" pos:end="175:36">stored_frame</name></name></expr></argument>, <argument pos:start="175:39" pos:end="175:47"><expr pos:start="175:39" pos:end="175:47"><name pos:start="175:39" pos:end="175:47"><name pos:start="175:39" pos:end="175:41">ctx</name><operator pos:start="175:42" pos:end="175:43">-&gt;</operator><name pos:start="175:44" pos:end="175:47">frm0</name></name></expr></argument>, <argument pos:start="175:50" pos:end="175:62"><expr pos:start="175:50" pos:end="175:62"><name pos:start="175:50" pos:end="175:62"><name pos:start="175:50" pos:end="175:52">ctx</name><operator pos:start="175:53" pos:end="175:54">-&gt;</operator><name pos:start="175:55" pos:end="175:62">buf_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="177:9" pos:end="179:23"><if pos:start="177:9" pos:end="179:23">if <condition pos:start="177:12" pos:end="177:43">(<expr pos:start="177:13" pos:end="177:42"><operator pos:start="177:13" pos:end="177:13">(</operator><name pos:start="177:14" pos:end="177:16">ret</name> <operator pos:start="177:18" pos:end="177:18">=</operator> <call pos:start="177:20" pos:end="177:41"><name pos:start="177:20" pos:end="177:30">copy_output</name><argument_list pos:start="177:31" pos:end="177:41">(<argument pos:start="177:32" pos:end="177:34"><expr pos:start="177:32" pos:end="177:34"><name pos:start="177:32" pos:end="177:34">ctx</name></expr></argument>, <argument pos:start="177:37" pos:end="177:40"><expr pos:start="177:37" pos:end="177:40"><name pos:start="177:37" pos:end="177:40">NULL</name></expr></argument>)</argument_list></call><operator pos:start="177:42" pos:end="177:42">)</operator></expr>)</condition><block type="pseudo" pos:start="179:13" pos:end="179:23"><block_content pos:start="179:13" pos:end="179:23">

            <return pos:start="179:13" pos:end="179:23">return <expr pos:start="179:20" pos:end="179:22"><name pos:start="179:20" pos:end="179:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="181:9" pos:end="181:53"><expr pos:start="181:9" pos:end="181:52"><call pos:start="181:9" pos:end="181:52"><name pos:start="181:9" pos:end="181:14">memcpy</name><argument_list pos:start="181:15" pos:end="181:52">(<argument pos:start="181:16" pos:end="181:35"><expr pos:start="181:16" pos:end="181:35"><name pos:start="181:16" pos:end="181:35"><name pos:start="181:16" pos:end="181:18">ctx</name><operator pos:start="181:19" pos:end="181:20">-&gt;</operator><name pos:start="181:21" pos:end="181:26">output</name><operator pos:start="181:27" pos:end="181:28">-&gt;</operator><name pos:start="181:29" pos:end="181:32">data</name><index pos:start="181:33" pos:end="181:35">[<expr pos:start="181:34" pos:end="181:34"><literal type="number" pos:start="181:34" pos:end="181:34">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="181:38" pos:end="181:45"><expr pos:start="181:38" pos:end="181:45"><name pos:start="181:38" pos:end="181:45"><name pos:start="181:38" pos:end="181:40">ctx</name><operator pos:start="181:41" pos:end="181:42">-&gt;</operator><name pos:start="181:43" pos:end="181:45">pal</name></name></expr></argument>, <argument pos:start="181:48" pos:end="181:51"><expr pos:start="181:48" pos:end="181:51"><literal type="number" pos:start="181:48" pos:end="181:51">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="183:7" pos:end="241:5">else <block pos:start="183:12" pos:end="241:5">{<block_content pos:start="185:9" pos:end="239:23">

        <decl_stmt pos:start="185:9" pos:end="185:31"><decl pos:start="185:9" pos:end="185:30"><type pos:start="185:9" pos:end="185:23"><name pos:start="185:9" pos:end="185:23">SANMFrameHeader</name></type> <name pos:start="185:25" pos:end="185:30">header</name></decl>;</decl_stmt>



        <if_stmt pos:start="189:9" pos:end="191:23"><if pos:start="189:9" pos:end="191:23">if <condition pos:start="189:12" pos:end="189:52">(<expr pos:start="189:13" pos:end="189:51"><operator pos:start="189:13" pos:end="189:13">(</operator><name pos:start="189:14" pos:end="189:16">ret</name> <operator pos:start="189:18" pos:end="189:18">=</operator> <call pos:start="189:20" pos:end="189:50"><name pos:start="189:20" pos:end="189:36">read_frame_header</name><argument_list pos:start="189:37" pos:end="189:50">(<argument pos:start="189:38" pos:end="189:40"><expr pos:start="189:38" pos:end="189:40"><name pos:start="189:38" pos:end="189:40">ctx</name></expr></argument>, <argument pos:start="189:43" pos:end="189:49"><expr pos:start="189:43" pos:end="189:49"><operator pos:start="189:43" pos:end="189:43">&amp;</operator><name pos:start="189:44" pos:end="189:49">header</name></expr></argument>)</argument_list></call><operator pos:start="189:51" pos:end="189:51">)</operator></expr>)</condition><block type="pseudo" pos:start="191:13" pos:end="191:23"><block_content pos:start="191:13" pos:end="191:23">

            <return pos:start="191:13" pos:end="191:23">return <expr pos:start="191:20" pos:end="191:22"><name pos:start="191:20" pos:end="191:22">ret</name></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="195:9" pos:end="195:46"><expr pos:start="195:9" pos:end="195:45"><name pos:start="195:9" pos:end="195:24"><name pos:start="195:9" pos:end="195:11">ctx</name><operator pos:start="195:12" pos:end="195:13">-&gt;</operator><name pos:start="195:14" pos:end="195:24">rotate_code</name></name> <operator pos:start="195:26" pos:end="195:26">=</operator> <name pos:start="195:28" pos:end="195:45"><name pos:start="195:28" pos:end="195:33">header</name><operator pos:start="195:34" pos:end="195:34">.</operator><name pos:start="195:35" pos:end="195:45">rotate_code</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="197:9" pos:end="209:9"><if pos:start="197:9" pos:end="205:9">if <condition pos:start="197:12" pos:end="197:55">(<expr pos:start="197:13" pos:end="197:54"><operator pos:start="197:13" pos:end="197:13">(</operator><name pos:start="197:14" pos:end="197:35"><name pos:start="197:14" pos:end="197:16">ctx</name><operator pos:start="197:17" pos:end="197:18">-&gt;</operator><name pos:start="197:19" pos:end="197:24">output</name><operator pos:start="197:25" pos:end="197:26">-&gt;</operator><name pos:start="197:27" pos:end="197:35">key_frame</name></name> <operator pos:start="197:37" pos:end="197:37">=</operator> <operator pos:start="197:39" pos:end="197:39">!</operator><name pos:start="197:40" pos:end="197:53"><name pos:start="197:40" pos:end="197:45">header</name><operator pos:start="197:46" pos:end="197:46">.</operator><name pos:start="197:47" pos:end="197:53">seq_num</name></name><operator pos:start="197:54" pos:end="197:54">)</operator></expr>)</condition> <block pos:start="197:57" pos:end="205:9">{<block_content pos:start="199:13" pos:end="203:65">

            <expr_stmt pos:start="199:13" pos:end="199:55"><expr pos:start="199:13" pos:end="199:54"><name pos:start="199:13" pos:end="199:34"><name pos:start="199:13" pos:end="199:15">ctx</name><operator pos:start="199:16" pos:end="199:17">-&gt;</operator><name pos:start="199:18" pos:end="199:23">output</name><operator pos:start="199:24" pos:end="199:25">-&gt;</operator><name pos:start="199:26" pos:end="199:34">pict_type</name></name> <operator pos:start="199:36" pos:end="199:36">=</operator> <name pos:start="199:38" pos:end="199:54">AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>

            <expr_stmt pos:start="201:13" pos:end="201:65"><expr pos:start="201:13" pos:end="201:64"><call pos:start="201:13" pos:end="201:64"><name pos:start="201:13" pos:end="201:22">fill_frame</name><argument_list pos:start="201:23" pos:end="201:64">(<argument pos:start="201:24" pos:end="201:32"><expr pos:start="201:24" pos:end="201:32"><name pos:start="201:24" pos:end="201:32"><name pos:start="201:24" pos:end="201:26">ctx</name><operator pos:start="201:27" pos:end="201:28">-&gt;</operator><name pos:start="201:29" pos:end="201:32">frm1</name></name></expr></argument>, <argument pos:start="201:35" pos:end="201:46"><expr pos:start="201:35" pos:end="201:46"><name pos:start="201:35" pos:end="201:46"><name pos:start="201:35" pos:end="201:37">ctx</name><operator pos:start="201:38" pos:end="201:39">-&gt;</operator><name pos:start="201:40" pos:end="201:46">npixels</name></name></expr></argument>, <argument pos:start="201:49" pos:end="201:63"><expr pos:start="201:49" pos:end="201:63"><name pos:start="201:49" pos:end="201:63"><name pos:start="201:49" pos:end="201:54">header</name><operator pos:start="201:55" pos:end="201:55">.</operator><name pos:start="201:56" pos:end="201:63">bg_color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="203:13" pos:end="203:65"><expr pos:start="203:13" pos:end="203:64"><call pos:start="203:13" pos:end="203:64"><name pos:start="203:13" pos:end="203:22">fill_frame</name><argument_list pos:start="203:23" pos:end="203:64">(<argument pos:start="203:24" pos:end="203:32"><expr pos:start="203:24" pos:end="203:32"><name pos:start="203:24" pos:end="203:32"><name pos:start="203:24" pos:end="203:26">ctx</name><operator pos:start="203:27" pos:end="203:28">-&gt;</operator><name pos:start="203:29" pos:end="203:32">frm2</name></name></expr></argument>, <argument pos:start="203:35" pos:end="203:46"><expr pos:start="203:35" pos:end="203:46"><name pos:start="203:35" pos:end="203:46"><name pos:start="203:35" pos:end="203:37">ctx</name><operator pos:start="203:38" pos:end="203:39">-&gt;</operator><name pos:start="203:40" pos:end="203:46">npixels</name></name></expr></argument>, <argument pos:start="203:49" pos:end="203:63"><expr pos:start="203:49" pos:end="203:63"><name pos:start="203:49" pos:end="203:63"><name pos:start="203:49" pos:end="203:54">header</name><operator pos:start="203:55" pos:end="203:55">.</operator><name pos:start="203:56" pos:end="203:63">bg_color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="205:11" pos:end="209:9">else <block pos:start="205:16" pos:end="209:9">{<block_content pos:start="207:13" pos:end="207:55">

            <expr_stmt pos:start="207:13" pos:end="207:55"><expr pos:start="207:13" pos:end="207:54"><name pos:start="207:13" pos:end="207:34"><name pos:start="207:13" pos:end="207:15">ctx</name><operator pos:start="207:16" pos:end="207:17">-&gt;</operator><name pos:start="207:18" pos:end="207:23">output</name><operator pos:start="207:24" pos:end="207:25">-&gt;</operator><name pos:start="207:26" pos:end="207:34">pict_type</name></name> <operator pos:start="207:36" pos:end="207:36">=</operator> <name pos:start="207:38" pos:end="207:54">AV_PICTURE_TYPE_P</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="213:9" pos:end="233:9"><if pos:start="213:9" pos:end="225:9">if <condition pos:start="213:12" pos:end="213:55">(<expr pos:start="213:13" pos:end="213:54"><name pos:start="213:13" pos:end="213:24"><name pos:start="213:13" pos:end="213:18">header</name><operator pos:start="213:19" pos:end="213:19">.</operator><name pos:start="213:20" pos:end="213:24">codec</name></name> <operator pos:start="213:26" pos:end="213:26">&lt;</operator> <call pos:start="213:28" pos:end="213:54"><name pos:start="213:28" pos:end="213:41">FF_ARRAY_ELEMS</name><argument_list pos:start="213:42" pos:end="213:54">(<argument pos:start="213:43" pos:end="213:53"><expr pos:start="213:43" pos:end="213:53"><name pos:start="213:43" pos:end="213:53">v1_decoders</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="213:57" pos:end="225:9">{<block_content pos:start="215:13" pos:end="223:13">

            <if_stmt pos:start="215:13" pos:end="223:13"><if pos:start="215:13" pos:end="223:13">if <condition pos:start="215:16" pos:end="215:55">(<expr pos:start="215:17" pos:end="215:54"><operator pos:start="215:17" pos:end="215:17">(</operator><name pos:start="215:18" pos:end="215:20">ret</name> <operator pos:start="215:22" pos:end="215:22">=</operator> <name pos:start="215:24" pos:end="215:48"><name pos:start="215:24" pos:end="215:34">v1_decoders</name><index pos:start="215:35" pos:end="215:48">[<expr pos:start="215:36" pos:end="215:47"><name pos:start="215:36" pos:end="215:47"><name pos:start="215:36" pos:end="215:41">header</name><operator pos:start="215:42" pos:end="215:42">.</operator><name pos:start="215:43" pos:end="215:47">codec</name></name></expr>]</index></name><operator pos:start="215:49" pos:end="215:49">(</operator><name pos:start="215:50" pos:end="215:52">ctx</name><operator pos:start="215:53" pos:end="215:53">)</operator><operator pos:start="215:54" pos:end="215:54">)</operator></expr>)</condition> <block pos:start="215:57" pos:end="223:13">{<block_content pos:start="217:17" pos:end="221:27">

                <expr_stmt pos:start="217:17" pos:end="219:76"><expr pos:start="217:17" pos:end="219:75"><call pos:start="217:17" pos:end="219:75"><name pos:start="217:17" pos:end="217:22">av_log</name><argument_list pos:start="217:23" pos:end="219:75">(<argument pos:start="217:24" pos:end="217:28"><expr pos:start="217:24" pos:end="217:28"><name pos:start="217:24" pos:end="217:28">avctx</name></expr></argument>, <argument pos:start="217:31" pos:end="217:42"><expr pos:start="217:31" pos:end="217:42"><name pos:start="217:31" pos:end="217:42">AV_LOG_ERROR</name></expr></argument>,

                       <argument pos:start="219:24" pos:end="219:60"><expr pos:start="219:24" pos:end="219:60"><literal type="string" pos:start="219:24" pos:end="219:60">"subcodec %d: error decoding frame\n"</literal></expr></argument>, <argument pos:start="219:63" pos:end="219:74"><expr pos:start="219:63" pos:end="219:74"><name pos:start="219:63" pos:end="219:74"><name pos:start="219:63" pos:end="219:68">header</name><operator pos:start="219:69" pos:end="219:69">.</operator><name pos:start="219:70" pos:end="219:74">codec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="221:17" pos:end="221:27">return <expr pos:start="221:24" pos:end="221:26"><name pos:start="221:24" pos:end="221:26">ret</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="225:11" pos:end="233:9">else <block pos:start="225:16" pos:end="233:9">{<block_content pos:start="227:13" pos:end="231:40">

            <expr_stmt pos:start="227:13" pos:end="229:33"><expr pos:start="227:13" pos:end="229:32"><call pos:start="227:13" pos:end="229:32"><name pos:start="227:13" pos:end="227:33">av_log_ask_for_sample</name><argument_list pos:start="227:34" pos:end="229:32">(<argument pos:start="227:35" pos:end="227:39"><expr pos:start="227:35" pos:end="227:39"><name pos:start="227:35" pos:end="227:39">avctx</name></expr></argument>, <argument pos:start="227:42" pos:end="227:75"><expr pos:start="227:42" pos:end="227:75"><literal type="string" pos:start="227:42" pos:end="227:75">"subcodec %d is not implemented\n"</literal></expr></argument>,

                   <argument pos:start="229:20" pos:end="229:31"><expr pos:start="229:20" pos:end="229:31"><name pos:start="229:20" pos:end="229:31"><name pos:start="229:20" pos:end="229:25">header</name><operator pos:start="229:26" pos:end="229:26">.</operator><name pos:start="229:27" pos:end="229:31">codec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="231:13" pos:end="231:40">return <expr pos:start="231:20" pos:end="231:39"><name pos:start="231:20" pos:end="231:39">AVERROR_PATCHWELCOME</name></expr>;</return>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="237:9" pos:end="239:23"><if pos:start="237:9" pos:end="239:23">if <condition pos:start="237:12" pos:end="237:46">(<expr pos:start="237:13" pos:end="237:45"><operator pos:start="237:13" pos:end="237:13">(</operator><name pos:start="237:14" pos:end="237:16">ret</name> <operator pos:start="237:18" pos:end="237:18">=</operator> <call pos:start="237:20" pos:end="237:44"><name pos:start="237:20" pos:end="237:30">copy_output</name><argument_list pos:start="237:31" pos:end="237:44">(<argument pos:start="237:32" pos:end="237:34"><expr pos:start="237:32" pos:end="237:34"><name pos:start="237:32" pos:end="237:34">ctx</name></expr></argument>, <argument pos:start="237:37" pos:end="237:43"><expr pos:start="237:37" pos:end="237:43"><operator pos:start="237:37" pos:end="237:37">&amp;</operator><name pos:start="237:38" pos:end="237:43">header</name></expr></argument>)</argument_list></call><operator pos:start="237:45" pos:end="237:45">)</operator></expr>)</condition><block type="pseudo" pos:start="239:13" pos:end="239:23"><block_content pos:start="239:13" pos:end="239:23">

            <return pos:start="239:13" pos:end="239:23">return <expr pos:start="239:20" pos:end="239:22"><name pos:start="239:20" pos:end="239:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="243:5" pos:end="245:43"><if pos:start="243:5" pos:end="245:43">if <condition pos:start="243:8" pos:end="243:25">(<expr pos:start="243:9" pos:end="243:24"><name pos:start="243:9" pos:end="243:24"><name pos:start="243:9" pos:end="243:11">ctx</name><operator pos:start="243:12" pos:end="243:13">-&gt;</operator><name pos:start="243:14" pos:end="243:24">rotate_code</name></name></expr>)</condition><block type="pseudo" pos:start="245:9" pos:end="245:43"><block_content pos:start="245:9" pos:end="245:43">

        <expr_stmt pos:start="245:9" pos:end="245:43"><expr pos:start="245:9" pos:end="245:42"><call pos:start="245:9" pos:end="245:42"><name pos:start="245:9" pos:end="245:19">rotate_bufs</name><argument_list pos:start="245:20" pos:end="245:42">(<argument pos:start="245:21" pos:end="245:23"><expr pos:start="245:21" pos:end="245:23"><name pos:start="245:21" pos:end="245:23">ctx</name></expr></argument>, <argument pos:start="245:26" pos:end="245:41"><expr pos:start="245:26" pos:end="245:41"><name pos:start="245:26" pos:end="245:41"><name pos:start="245:26" pos:end="245:28">ctx</name><operator pos:start="245:29" pos:end="245:30">-&gt;</operator><name pos:start="245:31" pos:end="245:41">rotate_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="249:5" pos:end="249:24"><expr pos:start="249:5" pos:end="249:23"><operator pos:start="249:5" pos:end="249:5">*</operator><name pos:start="249:6" pos:end="249:18">got_frame_ptr</name>  <operator pos:start="249:21" pos:end="249:21">=</operator> <literal type="number" pos:start="249:23" pos:end="249:23">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="251:5" pos:end="251:35"><expr pos:start="251:5" pos:end="251:34"><operator pos:start="251:5" pos:end="251:5">*</operator><operator pos:start="251:6" pos:end="251:6">(</operator><name pos:start="251:7" pos:end="251:13">AVFrame</name><operator pos:start="251:14" pos:end="251:14">*</operator><operator pos:start="251:15" pos:end="251:15">)</operator><name pos:start="251:16" pos:end="251:19">data</name> <operator pos:start="251:21" pos:end="251:21">=</operator> <operator pos:start="251:23" pos:end="251:23">*</operator><name pos:start="251:24" pos:end="251:34"><name pos:start="251:24" pos:end="251:26">ctx</name><operator pos:start="251:27" pos:end="251:28">-&gt;</operator><name pos:start="251:29" pos:end="251:34">output</name></name></expr>;</expr_stmt>



    <return pos:start="255:5" pos:end="255:21">return <expr pos:start="255:12" pos:end="255:20"><name pos:start="255:12" pos:end="255:20"><name pos:start="255:12" pos:end="255:14">pkt</name><operator pos:start="255:15" pos:end="255:16">-&gt;</operator><name pos:start="255:17" pos:end="255:20">size</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
