<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21845.c" pos:tabs="8"><function pos:start="1:1" pos:end="188:20"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">pcm_decode_frame</name><parameter_list pos:start="1:28" pos:end="2:64">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:61"><decl pos:start="1:52" pos:end="1:61"><type pos:start="1:52" pos:end="1:61"><name pos:start="1:52" pos:end="1:55">void</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:61">data</name></decl></parameter>,
                            <parameter pos:start="2:29" pos:end="2:46"><decl pos:start="2:29" pos:end="2:46"><type pos:start="2:29" pos:end="2:46"><name pos:start="2:29" pos:end="2:31">int</name> <modifier pos:start="2:33" pos:end="2:33">*</modifier></type><name pos:start="2:34" pos:end="2:46">got_frame_ptr</name></decl></parameter>, <parameter pos:start="2:49" pos:end="2:63"><decl pos:start="2:49" pos:end="2:63"><type pos:start="2:49" pos:end="2:63"><name pos:start="2:49" pos:end="2:56">AVPacket</name> <modifier pos:start="2:58" pos:end="2:58">*</modifier></type><name pos:start="2:59" pos:end="2:63">avpkt</name></decl></parameter>)</parameter_list>
<block pos:start="3:1" pos:end="188:20">{<block_content pos:start="4:5" pos:end="188:20">
    <decl_stmt pos:start="4:5" pos:end="4:37"><decl pos:start="4:5" pos:end="4:36"><type pos:start="4:5" pos:end="4:19"><specifier pos:start="4:5" pos:end="4:9">const</specifier> <name pos:start="4:11" pos:end="4:17">uint8_t</name> <modifier pos:start="4:19" pos:end="4:19">*</modifier></type><name pos:start="4:20" pos:end="4:22">src</name> <init pos:start="4:24" pos:end="4:36">= <expr pos:start="4:26" pos:end="4:36"><name pos:start="4:26" pos:end="4:36"><name pos:start="4:26" pos:end="4:30">avpkt</name><operator pos:start="4:31" pos:end="4:32">-&gt;</operator><name pos:start="4:33" pos:end="4:36">data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:37"><decl pos:start="5:5" pos:end="5:36"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:16">buf_size</name>       <init pos:start="5:24" pos:end="5:36">= <expr pos:start="5:26" pos:end="5:36"><name pos:start="5:26" pos:end="5:36"><name pos:start="5:26" pos:end="5:30">avpkt</name><operator pos:start="5:31" pos:end="5:32">-&gt;</operator><name pos:start="5:33" pos:end="5:36">size</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:42"><decl pos:start="6:5" pos:end="6:41"><type pos:start="6:5" pos:end="6:15"><name pos:start="6:5" pos:end="6:13">PCMDecode</name> <modifier pos:start="6:15" pos:end="6:15">*</modifier></type><name pos:start="6:16" pos:end="6:16">s</name>       <init pos:start="6:24" pos:end="6:41">= <expr pos:start="6:26" pos:end="6:41"><name pos:start="6:26" pos:end="6:41"><name pos:start="6:26" pos:end="6:30">avctx</name><operator pos:start="6:31" pos:end="6:32">-&gt;</operator><name pos:start="6:33" pos:end="6:41">priv_data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:50"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:19">sample_size</name></decl>, <decl pos:start="7:22" pos:end="7:22"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:22" pos:end="7:22">c</name></decl>, <decl pos:start="7:25" pos:end="7:25"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:25" pos:end="7:25">n</name></decl>, <decl pos:start="7:28" pos:end="7:30"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:28" pos:end="7:30">ret</name></decl>, <decl pos:start="7:33" pos:end="7:49"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:33" pos:end="7:49">samples_per_block</name></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:21"><decl pos:start="8:5" pos:end="8:20"><type pos:start="8:5" pos:end="8:13"><name pos:start="8:5" pos:end="8:11">uint8_t</name> <modifier pos:start="8:13" pos:end="8:13">*</modifier></type><name pos:start="8:14" pos:end="8:20">samples</name></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">int32_t</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:24">dst_int32_t</name></decl>;</decl_stmt>
    <expr_stmt pos:start="10:5" pos:end="10:62"><expr pos:start="10:5" pos:end="10:61"><name pos:start="10:5" pos:end="10:15">sample_size</name> <operator pos:start="10:17" pos:end="10:17">=</operator> <call pos:start="10:19" pos:end="10:57"><name pos:start="10:19" pos:end="10:40">av_get_bits_per_sample</name><argument_list pos:start="10:41" pos:end="10:57">(<argument pos:start="10:42" pos:end="10:56"><expr pos:start="10:42" pos:end="10:56"><name pos:start="10:42" pos:end="10:56"><name pos:start="10:42" pos:end="10:46">avctx</name><operator pos:start="10:47" pos:end="10:48">-&gt;</operator><name pos:start="10:49" pos:end="10:56">codec_id</name></name></expr></argument>)</argument_list></call> <operator pos:start="10:59" pos:end="10:59">/</operator> <literal type="number" pos:start="10:61" pos:end="10:61">8</literal></expr>;</expr_stmt>
    <comment type="block" pos:start="11:5" pos:end="11:66">/* av_get_bits_per_sample returns 0 for AV_CODEC_ID_PCM_DVD */</comment>
    <expr_stmt pos:start="12:5" pos:end="12:26"><expr pos:start="12:5" pos:end="12:25"><name pos:start="12:5" pos:end="12:21">samples_per_block</name> <operator pos:start="12:23" pos:end="12:23">=</operator> <literal type="number" pos:start="12:25" pos:end="12:25">1</literal></expr>;</expr_stmt>
    <if_stmt pos:start="13:5" pos:end="188:20"><if pos:start="13:5" pos:end="188:20">if <condition pos:start="13:8" pos:end="13:47">(<expr pos:start="13:9" pos:end="13:46"><name pos:start="13:9" pos:end="13:27">AV_CODEC_ID_PCM_DVD</name> <operator pos:start="13:29" pos:end="13:30">==</operator> <name pos:start="13:32" pos:end="13:46"><name pos:start="13:32" pos:end="13:36">avctx</name><operator pos:start="13:37" pos:end="13:38">-&gt;</operator><name pos:start="13:39" pos:end="13:46">codec_id</name></name></expr>)</condition> <block pos:start="13:49" pos:end="188:20">{<block_content pos:start="14:9" pos:end="188:20">
        <if_stmt pos:start="14:9" pos:end="188:20"><if pos:start="14:9" pos:end="22:5">if <condition pos:start="14:12" pos:end="15:47">(<expr pos:start="14:13" pos:end="15:46"><name pos:start="14:13" pos:end="14:40"><name pos:start="14:13" pos:end="14:17">avctx</name><operator pos:start="14:18" pos:end="14:19">-&gt;</operator><name pos:start="14:20" pos:end="14:40">bits_per_coded_sample</name></name> <operator pos:start="14:42" pos:end="14:43">!=</operator> <literal type="number" pos:start="14:45" pos:end="14:46">20</literal> <operator pos:start="14:48" pos:end="14:49">&amp;&amp;</operator>
            <name pos:start="15:13" pos:end="15:40"><name pos:start="15:13" pos:end="15:17">avctx</name><operator pos:start="15:18" pos:end="15:19">-&gt;</operator><name pos:start="15:20" pos:end="15:40">bits_per_coded_sample</name></name> <operator pos:start="15:42" pos:end="15:43">!=</operator> <literal type="number" pos:start="15:45" pos:end="15:46">24</literal></expr>)</condition> <block pos:start="15:49" pos:end="22:5">{<block_content pos:start="16:13" pos:end="21:65">
            <expr_stmt pos:start="16:13" pos:end="18:49"><expr pos:start="16:13" pos:end="18:48"><call pos:start="16:13" pos:end="18:48"><name pos:start="16:13" pos:end="16:18">av_log</name><argument_list pos:start="16:19" pos:end="18:48">(<argument pos:start="16:20" pos:end="16:24"><expr pos:start="16:20" pos:end="16:24"><name pos:start="16:20" pos:end="16:24">avctx</name></expr></argument>, <argument pos:start="16:27" pos:end="16:38"><expr pos:start="16:27" pos:end="16:38"><name pos:start="16:27" pos:end="16:38">AV_LOG_ERROR</name></expr></argument>,
                   <argument pos:start="17:20" pos:end="17:58"><expr pos:start="17:20" pos:end="17:58"><literal type="string" pos:start="17:20" pos:end="17:58">"PCM DVD unsupported sample depth %i\n"</literal></expr></argument>,
                   <argument pos:start="18:20" pos:end="18:47"><expr pos:start="18:20" pos:end="18:47"><name pos:start="18:20" pos:end="18:47"><name pos:start="18:20" pos:end="18:24">avctx</name><operator pos:start="18:25" pos:end="18:26">-&gt;</operator><name pos:start="18:27" pos:end="18:47">bits_per_coded_sample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="19:9" pos:end="19:60">/* 2 samples are interleaved per block in PCM_DVD */</comment>
        <expr_stmt pos:start="20:9" pos:end="20:30"><expr pos:start="20:9" pos:end="20:29"><name pos:start="20:9" pos:end="20:25">samples_per_block</name> <operator pos:start="20:27" pos:end="20:27">=</operator> <literal type="number" pos:start="20:29" pos:end="20:29">2</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="21:9" pos:end="21:65"><expr pos:start="21:9" pos:end="21:64"><name pos:start="21:9" pos:end="21:19">sample_size</name>       <operator pos:start="21:27" pos:end="21:27">=</operator> <name pos:start="21:29" pos:end="21:56"><name pos:start="21:29" pos:end="21:33">avctx</name><operator pos:start="21:34" pos:end="21:35">-&gt;</operator><name pos:start="21:36" pos:end="21:56">bits_per_coded_sample</name></name> <operator pos:start="21:58" pos:end="21:58">*</operator> <literal type="number" pos:start="21:60" pos:end="21:60">2</literal> <operator pos:start="21:62" pos:end="21:62">/</operator> <literal type="number" pos:start="21:64" pos:end="21:64">8</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="22:7" pos:end="188:20">else if <condition pos:start="22:15" pos:end="22:54">(<expr pos:start="22:16" pos:end="22:53"><name pos:start="22:16" pos:end="22:30"><name pos:start="22:16" pos:end="22:20">avctx</name><operator pos:start="22:21" pos:end="22:22">-&gt;</operator><name pos:start="22:23" pos:end="22:30">codec_id</name></name> <operator pos:start="22:32" pos:end="22:33">==</operator> <name pos:start="22:35" pos:end="22:53">AV_CODEC_ID_PCM_LXF</name></expr>)</condition> <block pos:start="22:56" pos:end="188:20">{<block_content pos:start="24:9" pos:end="188:20">
        <comment type="block" pos:start="23:9" pos:end="23:58">/* we process 40-bit blocks per channel for LXF */</comment>
        <expr_stmt pos:start="24:9" pos:end="24:30"><expr pos:start="24:9" pos:end="24:29"><name pos:start="24:9" pos:end="24:25">samples_per_block</name> <operator pos:start="24:27" pos:end="24:27">=</operator> <literal type="number" pos:start="24:29" pos:end="24:29">2</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="25:9" pos:end="25:30"><expr pos:start="25:9" pos:end="25:29"><name pos:start="25:9" pos:end="25:19">sample_size</name>       <operator pos:start="25:27" pos:end="25:27">=</operator> <literal type="number" pos:start="25:29" pos:end="25:29">5</literal></expr>;</expr_stmt>
    <if_stmt pos:start="26:5" pos:end="188:20"><if pos:start="26:5" pos:end="188:20">if <condition pos:start="26:8" pos:end="26:25">(<expr pos:start="26:9" pos:end="26:24"><name pos:start="26:9" pos:end="26:19">sample_size</name> <operator pos:start="26:21" pos:end="26:22">==</operator> <literal type="number" pos:start="26:24" pos:end="26:24">0</literal></expr>)</condition> <block pos:start="26:27" pos:end="188:20">{<block_content pos:start="27:9" pos:end="188:20">
        <expr_stmt pos:start="27:9" pos:end="27:61"><expr pos:start="27:9" pos:end="27:60"><call pos:start="27:9" pos:end="27:60"><name pos:start="27:9" pos:end="27:14">av_log</name><argument_list pos:start="27:15" pos:end="27:60">(<argument pos:start="27:16" pos:end="27:20"><expr pos:start="27:16" pos:end="27:20"><name pos:start="27:16" pos:end="27:20">avctx</name></expr></argument>, <argument pos:start="27:23" pos:end="27:34"><expr pos:start="27:23" pos:end="27:34"><name pos:start="27:23" pos:end="27:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="27:37" pos:end="27:59"><expr pos:start="27:37" pos:end="27:59"><literal type="string" pos:start="27:37" pos:end="27:59">"Invalid sample_size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="28:5" pos:end="28:38"><expr pos:start="28:5" pos:end="28:37"><name pos:start="28:5" pos:end="28:5">n</name> <operator pos:start="28:7" pos:end="28:7">=</operator> <name pos:start="28:9" pos:end="28:23"><name pos:start="28:9" pos:end="28:13">avctx</name><operator pos:start="28:14" pos:end="28:15">-&gt;</operator><name pos:start="28:16" pos:end="28:23">channels</name></name> <operator pos:start="28:25" pos:end="28:25">*</operator> <name pos:start="28:27" pos:end="28:37">sample_size</name></expr>;</expr_stmt>
    <if_stmt pos:start="29:5" pos:end="188:20"><if pos:start="29:5" pos:end="188:20">if <condition pos:start="29:8" pos:end="29:26">(<expr pos:start="29:9" pos:end="29:25"><name pos:start="29:9" pos:end="29:9">n</name> <operator pos:start="29:11" pos:end="29:12">&amp;&amp;</operator> <name pos:start="29:14" pos:end="29:21">buf_size</name> <operator pos:start="29:23" pos:end="29:23">%</operator> <name pos:start="29:25" pos:end="29:25">n</name></expr>)</condition> <block pos:start="29:28" pos:end="188:20">{<block_content pos:start="30:9" pos:end="188:20">
        <if_stmt pos:start="30:9" pos:end="36:37"><if pos:start="30:9" pos:end="35:9">if <condition pos:start="30:12" pos:end="30:25">(<expr pos:start="30:13" pos:end="30:24"><name pos:start="30:13" pos:end="30:20">buf_size</name> <operator pos:start="30:22" pos:end="30:22">&lt;</operator> <name pos:start="30:24" pos:end="30:24">n</name></expr>)</condition> <block pos:start="30:27" pos:end="35:9">{<block_content pos:start="31:13" pos:end="34:39">
            <expr_stmt pos:start="31:13" pos:end="33:32"><expr pos:start="31:13" pos:end="33:31"><call pos:start="31:13" pos:end="33:31"><name pos:start="31:13" pos:end="31:18">av_log</name><argument_list pos:start="31:19" pos:end="33:31">(<argument pos:start="31:20" pos:end="31:24"><expr pos:start="31:20" pos:end="31:24"><name pos:start="31:20" pos:end="31:24">avctx</name></expr></argument>, <argument pos:start="31:27" pos:end="31:38"><expr pos:start="31:27" pos:end="31:38"><name pos:start="31:27" pos:end="31:38">AV_LOG_ERROR</name></expr></argument>,
                   <argument pos:start="32:20" pos:end="32:98"><expr pos:start="32:20" pos:end="32:98"><literal type="string" pos:start="32:20" pos:end="32:98">"Invalid PCM packet, data has size %d but at least a size of %d was expected\n"</literal></expr></argument>,
                   <argument pos:start="33:20" pos:end="33:27"><expr pos:start="33:20" pos:end="33:27"><name pos:start="33:20" pos:end="33:27">buf_size</name></expr></argument>, <argument pos:start="33:30" pos:end="33:30"><expr pos:start="33:30" pos:end="33:30"><name pos:start="33:30" pos:end="33:30">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="34:13" pos:end="34:39">return <expr pos:start="34:20" pos:end="34:38"><name pos:start="34:20" pos:end="34:38">AVERROR_INVALIDDATA</name></expr>;</return>
        </block_content>}</block></if> <else pos:start="35:11" pos:end="36:37">else<block type="pseudo" pos:start="36:13" pos:end="36:37"><block_content pos:start="36:13" pos:end="36:37">
            <expr_stmt pos:start="36:13" pos:end="36:37"><expr pos:start="36:13" pos:end="36:36"><name pos:start="36:13" pos:end="36:20">buf_size</name> <operator pos:start="36:22" pos:end="36:23">-=</operator> <name pos:start="36:25" pos:end="36:32">buf_size</name> <operator pos:start="36:34" pos:end="36:34">%</operator> <name pos:start="36:36" pos:end="36:36">n</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt pos:start="37:5" pos:end="37:31"><expr pos:start="37:5" pos:end="37:30"><name pos:start="37:5" pos:end="37:5">n</name> <operator pos:start="37:7" pos:end="37:7">=</operator> <name pos:start="37:9" pos:end="37:16">buf_size</name> <operator pos:start="37:18" pos:end="37:18">/</operator> <name pos:start="37:20" pos:end="37:30">sample_size</name></expr>;</expr_stmt>
    <comment type="block" pos:start="38:5" pos:end="38:27">/* get output buffer */</comment>
    <expr_stmt pos:start="39:5" pos:end="39:66"><expr pos:start="39:5" pos:end="39:65"><name pos:start="39:5" pos:end="39:23"><name pos:start="39:5" pos:end="39:5">s</name><operator pos:start="39:6" pos:end="39:7">-&gt;</operator><name pos:start="39:8" pos:end="39:12">frame</name><operator pos:start="39:13" pos:end="39:13">.</operator><name pos:start="39:14" pos:end="39:23">nb_samples</name></name> <operator pos:start="39:25" pos:end="39:25">=</operator> <name pos:start="39:27" pos:end="39:27">n</name> <operator pos:start="39:29" pos:end="39:29">*</operator> <name pos:start="39:31" pos:end="39:47">samples_per_block</name> <operator pos:start="39:49" pos:end="39:49">/</operator> <name pos:start="39:51" pos:end="39:65"><name pos:start="39:51" pos:end="39:55">avctx</name><operator pos:start="39:56" pos:end="39:57">-&gt;</operator><name pos:start="39:58" pos:end="39:65">channels</name></name></expr>;</expr_stmt>
    <if_stmt pos:start="40:5" pos:end="188:20"><if pos:start="40:5" pos:end="188:20">if <condition pos:start="40:8" pos:end="40:56">(<expr pos:start="40:9" pos:end="40:55"><operator pos:start="40:9" pos:end="40:9">(</operator><name pos:start="40:10" pos:end="40:12">ret</name> <operator pos:start="40:14" pos:end="40:14">=</operator> <call pos:start="40:16" pos:end="40:50"><name pos:start="40:16" pos:end="40:32"><name pos:start="40:16" pos:end="40:20">avctx</name><operator pos:start="40:21" pos:end="40:22">-&gt;</operator><name pos:start="40:23" pos:end="40:32">get_buffer</name></name><argument_list pos:start="40:33" pos:end="40:50">(<argument pos:start="40:34" pos:end="40:38"><expr pos:start="40:34" pos:end="40:38"><name pos:start="40:34" pos:end="40:38">avctx</name></expr></argument>, <argument pos:start="40:41" pos:end="40:49"><expr pos:start="40:41" pos:end="40:49"><operator pos:start="40:41" pos:end="40:41">&amp;</operator><name pos:start="40:42" pos:end="40:49"><name pos:start="40:42" pos:end="40:42">s</name><operator pos:start="40:43" pos:end="40:44">-&gt;</operator><name pos:start="40:45" pos:end="40:49">frame</name></name></expr></argument>)</argument_list></call><operator pos:start="40:51" pos:end="40:51">)</operator> <operator pos:start="40:53" pos:end="40:53">&lt;</operator> <literal type="number" pos:start="40:55" pos:end="40:55">0</literal></expr>)</condition> <block pos:start="40:58" pos:end="188:20">{<block_content pos:start="41:9" pos:end="188:20">
        <expr_stmt pos:start="41:9" pos:end="41:61"><expr pos:start="41:9" pos:end="41:60"><call pos:start="41:9" pos:end="41:60"><name pos:start="41:9" pos:end="41:14">av_log</name><argument_list pos:start="41:15" pos:end="41:60">(<argument pos:start="41:16" pos:end="41:20"><expr pos:start="41:16" pos:end="41:20"><name pos:start="41:16" pos:end="41:20">avctx</name></expr></argument>, <argument pos:start="41:23" pos:end="41:34"><expr pos:start="41:23" pos:end="41:34"><name pos:start="41:23" pos:end="41:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="41:37" pos:end="41:59"><expr pos:start="41:37" pos:end="41:59"><literal type="string" pos:start="41:37" pos:end="41:59">"get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="42:9" pos:end="42:19">return <expr pos:start="42:16" pos:end="42:18"><name pos:start="42:16" pos:end="42:18">ret</name></expr>;</return>
    <expr_stmt pos:start="43:5" pos:end="43:31"><expr pos:start="43:5" pos:end="43:30"><name pos:start="43:5" pos:end="43:11">samples</name> <operator pos:start="43:13" pos:end="43:13">=</operator> <name pos:start="43:15" pos:end="43:30"><name pos:start="43:15" pos:end="43:15">s</name><operator pos:start="43:16" pos:end="43:17">-&gt;</operator><name pos:start="43:18" pos:end="43:22">frame</name><operator pos:start="43:23" pos:end="43:23">.</operator><name pos:start="43:24" pos:end="43:27">data</name><index pos:start="43:28" pos:end="43:30">[<expr pos:start="43:29" pos:end="43:29"><literal type="number" pos:start="43:29" pos:end="43:29">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <switch pos:start="44:5" pos:end="188:20">switch <condition pos:start="44:12" pos:end="44:29">(<expr pos:start="44:13" pos:end="44:28"><name pos:start="44:13" pos:end="44:28"><name pos:start="44:13" pos:end="44:17">avctx</name><operator pos:start="44:18" pos:end="44:19">-&gt;</operator><name pos:start="44:20" pos:end="44:24">codec</name><operator pos:start="44:25" pos:end="44:26">-&gt;</operator><name pos:start="44:27" pos:end="44:28">id</name></name></expr>)</condition> <block pos:start="44:31" pos:end="188:20">{<block_content pos:start="45:5" pos:end="188:20">
    <case pos:start="45:5" pos:end="45:31">case <expr pos:start="45:10" pos:end="45:30"><name pos:start="45:10" pos:end="45:30">AV_CODEC_ID_PCM_U32LE</name></expr>:</case>
        <macro pos:start="46:9" pos:end="46:56"><name pos:start="46:9" pos:end="46:14">DECODE</name><argument_list pos:start="46:15" pos:end="46:56">(<argument pos:start="46:16" pos:end="46:17"><literal type="number" pos:start="46:16" pos:end="46:17">32</literal></argument>, <argument pos:start="46:20" pos:end="46:23">le32</argument>, <argument pos:start="46:26" pos:end="46:28">src</argument>, <argument pos:start="46:31" pos:end="46:37">samples</argument>, <argument pos:start="46:40" pos:end="46:40">n</argument>, <argument pos:start="46:43" pos:end="46:43"><literal type="number" pos:start="46:43" pos:end="46:43">0</literal></argument>, <argument pos:start="46:46" pos:end="46:55"><literal type="number" pos:start="46:46" pos:end="46:55">0x80000000</literal></argument>)</argument_list></macro>
        <break pos:start="47:9" pos:end="47:14">break;</break>
    <case pos:start="48:5" pos:end="48:31">case <expr pos:start="48:10" pos:end="48:30"><name pos:start="48:10" pos:end="48:30">AV_CODEC_ID_PCM_U32BE</name></expr>:</case>
        <macro pos:start="49:9" pos:end="49:56"><name pos:start="49:9" pos:end="49:14">DECODE</name><argument_list pos:start="49:15" pos:end="49:56">(<argument pos:start="49:16" pos:end="49:17"><literal type="number" pos:start="49:16" pos:end="49:17">32</literal></argument>, <argument pos:start="49:20" pos:end="49:23">be32</argument>, <argument pos:start="49:26" pos:end="49:28">src</argument>, <argument pos:start="49:31" pos:end="49:37">samples</argument>, <argument pos:start="49:40" pos:end="49:40">n</argument>, <argument pos:start="49:43" pos:end="49:43"><literal type="number" pos:start="49:43" pos:end="49:43">0</literal></argument>, <argument pos:start="49:46" pos:end="49:55"><literal type="number" pos:start="49:46" pos:end="49:55">0x80000000</literal></argument>)</argument_list></macro>
        <break pos:start="50:9" pos:end="50:14">break;</break>
    <case pos:start="51:5" pos:end="51:31">case <expr pos:start="51:10" pos:end="51:30"><name pos:start="51:10" pos:end="51:30">AV_CODEC_ID_PCM_S24LE</name></expr>:</case>
        <macro pos:start="52:9" pos:end="52:47"><name pos:start="52:9" pos:end="52:14">DECODE</name><argument_list pos:start="52:15" pos:end="52:47">(<argument pos:start="52:16" pos:end="52:17"><literal type="number" pos:start="52:16" pos:end="52:17">32</literal></argument>, <argument pos:start="52:20" pos:end="52:23">le24</argument>, <argument pos:start="52:26" pos:end="52:28">src</argument>, <argument pos:start="52:31" pos:end="52:37">samples</argument>, <argument pos:start="52:40" pos:end="52:40">n</argument>, <argument pos:start="52:43" pos:end="52:43"><literal type="number" pos:start="52:43" pos:end="52:43">8</literal></argument>, <argument pos:start="52:46" pos:end="52:46"><literal type="number" pos:start="52:46" pos:end="52:46">0</literal></argument>)</argument_list></macro>
        <break pos:start="53:9" pos:end="53:14">break;</break>
    <case pos:start="54:5" pos:end="54:31">case <expr pos:start="54:10" pos:end="54:30"><name pos:start="54:10" pos:end="54:30">AV_CODEC_ID_PCM_S24BE</name></expr>:</case>
        <macro pos:start="55:9" pos:end="55:47"><name pos:start="55:9" pos:end="55:14">DECODE</name><argument_list pos:start="55:15" pos:end="55:47">(<argument pos:start="55:16" pos:end="55:17"><literal type="number" pos:start="55:16" pos:end="55:17">32</literal></argument>, <argument pos:start="55:20" pos:end="55:23">be24</argument>, <argument pos:start="55:26" pos:end="55:28">src</argument>, <argument pos:start="55:31" pos:end="55:37">samples</argument>, <argument pos:start="55:40" pos:end="55:40">n</argument>, <argument pos:start="55:43" pos:end="55:43"><literal type="number" pos:start="55:43" pos:end="55:43">8</literal></argument>, <argument pos:start="55:46" pos:end="55:46"><literal type="number" pos:start="55:46" pos:end="55:46">0</literal></argument>)</argument_list></macro>
        <break pos:start="56:9" pos:end="56:14">break;</break>
    <case pos:start="57:5" pos:end="57:31">case <expr pos:start="57:10" pos:end="57:30"><name pos:start="57:10" pos:end="57:30">AV_CODEC_ID_PCM_U24LE</name></expr>:</case>
        <macro pos:start="58:9" pos:end="58:54"><name pos:start="58:9" pos:end="58:14">DECODE</name><argument_list pos:start="58:15" pos:end="58:54">(<argument pos:start="58:16" pos:end="58:17"><literal type="number" pos:start="58:16" pos:end="58:17">32</literal></argument>, <argument pos:start="58:20" pos:end="58:23">le24</argument>, <argument pos:start="58:26" pos:end="58:28">src</argument>, <argument pos:start="58:31" pos:end="58:37">samples</argument>, <argument pos:start="58:40" pos:end="58:40">n</argument>, <argument pos:start="58:43" pos:end="58:43"><literal type="number" pos:start="58:43" pos:end="58:43">8</literal></argument>, <argument pos:start="58:46" pos:end="58:53"><literal type="number" pos:start="58:46" pos:end="58:53">0x800000</literal></argument>)</argument_list></macro>
        <break pos:start="59:9" pos:end="59:14">break;</break>
    <case pos:start="60:5" pos:end="60:31">case <expr pos:start="60:10" pos:end="60:30"><name pos:start="60:10" pos:end="60:30">AV_CODEC_ID_PCM_U24BE</name></expr>:</case>
        <macro pos:start="61:9" pos:end="61:54"><name pos:start="61:9" pos:end="61:14">DECODE</name><argument_list pos:start="61:15" pos:end="61:54">(<argument pos:start="61:16" pos:end="61:17"><literal type="number" pos:start="61:16" pos:end="61:17">32</literal></argument>, <argument pos:start="61:20" pos:end="61:23">be24</argument>, <argument pos:start="61:26" pos:end="61:28">src</argument>, <argument pos:start="61:31" pos:end="61:37">samples</argument>, <argument pos:start="61:40" pos:end="61:40">n</argument>, <argument pos:start="61:43" pos:end="61:43"><literal type="number" pos:start="61:43" pos:end="61:43">8</literal></argument>, <argument pos:start="61:46" pos:end="61:53"><literal type="number" pos:start="61:46" pos:end="61:53">0x800000</literal></argument>)</argument_list></macro>
        <break pos:start="62:9" pos:end="62:14">break;</break>
    <case pos:start="63:5" pos:end="63:33">case <expr pos:start="63:10" pos:end="63:32"><name pos:start="63:10" pos:end="63:32">AV_CODEC_ID_PCM_S24DAUD</name></expr>:</case>
        <for pos:start="64:9" pos:end="188:20">for <control pos:start="64:13" pos:end="64:26">(<init pos:start="64:14" pos:end="64:14">;</init> <condition pos:start="64:16" pos:end="64:21"><expr pos:start="64:16" pos:end="64:20"><name pos:start="64:16" pos:end="64:16">n</name> <operator pos:start="64:18" pos:end="64:18">&gt;</operator> <literal type="number" pos:start="64:20" pos:end="64:20">0</literal></expr>;</condition> <incr pos:start="64:23" pos:end="64:25"><expr pos:start="64:23" pos:end="64:25"><name pos:start="64:23" pos:end="64:23">n</name><operator pos:start="64:24" pos:end="64:25">--</operator></expr></incr>)</control> <block pos:start="64:28" pos:end="188:20">{<block_content pos:start="65:13" pos:end="188:20">
            <decl_stmt pos:start="65:13" pos:end="65:51"><decl pos:start="65:13" pos:end="65:50"><type pos:start="65:13" pos:end="65:20"><name pos:start="65:13" pos:end="65:20">uint32_t</name></type> <name pos:start="65:22" pos:end="65:22">v</name> <init pos:start="65:24" pos:end="65:50">= <expr pos:start="65:26" pos:end="65:50"><call pos:start="65:26" pos:end="65:50"><name pos:start="65:26" pos:end="65:44">bytestream_get_be24</name><argument_list pos:start="65:45" pos:end="65:50">(<argument pos:start="65:46" pos:end="65:49"><expr pos:start="65:46" pos:end="65:49"><operator pos:start="65:46" pos:end="65:46">&amp;</operator><name pos:start="65:47" pos:end="65:49">src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt pos:start="66:13" pos:end="66:20"><expr pos:start="66:13" pos:end="66:19"><name pos:start="66:13" pos:end="66:13">v</name> <operator pos:start="66:15" pos:end="66:17">&gt;&gt;=</operator> <literal type="number" pos:start="66:19" pos:end="66:19">4</literal></expr>;</expr_stmt> <comment type="line" pos:start="66:22" pos:end="66:43">// sync flags are here</comment>
            <expr_stmt pos:start="67:13" pos:end="68:65"><expr pos:start="67:13" pos:end="68:64"><call pos:start="67:13" pos:end="68:64"><name pos:start="67:13" pos:end="67:20">AV_WN16A</name><argument_list pos:start="67:21" pos:end="68:64">(<argument pos:start="67:22" pos:end="67:28"><expr pos:start="67:22" pos:end="67:28"><name pos:start="67:22" pos:end="67:28">samples</name></expr></argument>, <argument pos:start="67:31" pos:end="68:63"><expr pos:start="67:31" pos:end="68:63"><name pos:start="67:31" pos:end="67:57"><name pos:start="67:31" pos:end="67:40">ff_reverse</name><index pos:start="67:41" pos:end="67:57">[<expr pos:start="67:42" pos:end="67:56"><operator pos:start="67:42" pos:end="67:42">(</operator><name pos:start="67:43" pos:end="67:43">v</name> <operator pos:start="67:45" pos:end="67:46">&gt;&gt;</operator> <literal type="number" pos:start="67:48" pos:end="67:48">8</literal><operator pos:start="67:49" pos:end="67:49">)</operator> <operator pos:start="67:51" pos:end="67:51">&amp;</operator> <literal type="number" pos:start="67:53" pos:end="67:56">0xff</literal></expr>]</index></name> <operator pos:start="67:59" pos:end="67:59">+</operator>
                             <operator pos:start="68:30" pos:end="68:30">(</operator><name pos:start="68:31" pos:end="68:57"><name pos:start="68:31" pos:end="68:40">ff_reverse</name><index pos:start="68:41" pos:end="68:57">[<expr pos:start="68:42" pos:end="68:56"><name pos:start="68:42" pos:end="68:42">v</name>        <operator pos:start="68:51" pos:end="68:51">&amp;</operator> <literal type="number" pos:start="68:53" pos:end="68:56">0xff</literal></expr>]</index></name> <operator pos:start="68:59" pos:end="68:60">&lt;&lt;</operator> <literal type="number" pos:start="68:62" pos:end="68:62">8</literal><operator pos:start="68:63" pos:end="68:63">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="69:13" pos:end="69:25"><expr pos:start="69:13" pos:end="69:24"><name pos:start="69:13" pos:end="69:19">samples</name> <operator pos:start="69:21" pos:end="69:22">+=</operator> <literal type="number" pos:start="69:24" pos:end="69:24">2</literal></expr>;</expr_stmt>
        <break pos:start="70:9" pos:end="70:14">break;</break>
    <case pos:start="71:5" pos:end="71:38">case <expr pos:start="71:10" pos:end="71:37"><name pos:start="71:10" pos:end="71:37">AV_CODEC_ID_PCM_S16LE_PLANAR</name></expr>:</case>
    <block pos:start="72:5" pos:end="188:20">{<block_content pos:start="73:9" pos:end="188:20">
        <decl_stmt pos:start="73:9" pos:end="73:14"><decl pos:start="73:9" pos:end="73:13"><type pos:start="73:9" pos:end="73:11"><name pos:start="73:9" pos:end="73:11">int</name></type> <name pos:start="73:13" pos:end="73:13">i</name></decl>;</decl_stmt>
        <expr_stmt pos:start="74:9" pos:end="74:29"><expr pos:start="74:9" pos:end="74:28"><name pos:start="74:9" pos:end="74:9">n</name> <operator pos:start="74:11" pos:end="74:12">/=</operator> <name pos:start="74:14" pos:end="74:28"><name pos:start="74:14" pos:end="74:18">avctx</name><operator pos:start="74:19" pos:end="74:20">-&gt;</operator><name pos:start="74:21" pos:end="74:28">channels</name></name></expr>;</expr_stmt>
        <for pos:start="75:9" pos:end="188:20">for <control pos:start="75:13" pos:end="75:45">(<init pos:start="75:14" pos:end="75:19"><expr pos:start="75:14" pos:end="75:18"><name pos:start="75:14" pos:end="75:14">c</name> <operator pos:start="75:16" pos:end="75:16">=</operator> <literal type="number" pos:start="75:18" pos:end="75:18">0</literal></expr>;</init> <condition pos:start="75:21" pos:end="75:40"><expr pos:start="75:21" pos:end="75:39"><name pos:start="75:21" pos:end="75:21">c</name> <operator pos:start="75:23" pos:end="75:23">&lt;</operator> <name pos:start="75:25" pos:end="75:39"><name pos:start="75:25" pos:end="75:29">avctx</name><operator pos:start="75:30" pos:end="75:31">-&gt;</operator><name pos:start="75:32" pos:end="75:39">channels</name></name></expr>;</condition> <incr pos:start="75:42" pos:end="75:44"><expr pos:start="75:42" pos:end="75:44"><name pos:start="75:42" pos:end="75:42">c</name><operator pos:start="75:43" pos:end="75:44">++</operator></expr></incr>)</control> <block pos:start="75:47" pos:end="188:20">{<block_content pos:start="76:13" pos:end="188:20">
            <expr_stmt pos:start="76:13" pos:end="76:48"><expr pos:start="76:13" pos:end="76:47"><name pos:start="76:13" pos:end="76:19">samples</name> <operator pos:start="76:21" pos:end="76:21">=</operator> <name pos:start="76:23" pos:end="76:47"><name pos:start="76:23" pos:end="76:23">s</name><operator pos:start="76:24" pos:end="76:25">-&gt;</operator><name pos:start="76:26" pos:end="76:30">frame</name><operator pos:start="76:31" pos:end="76:31">.</operator><name pos:start="76:32" pos:end="76:44">extended_data</name><index pos:start="76:45" pos:end="76:47">[<expr pos:start="76:46" pos:end="76:46"><name pos:start="76:46" pos:end="76:46">c</name></expr>]</index></name></expr>;</expr_stmt>
            <for pos:start="77:13" pos:end="188:20">for <control pos:start="77:17" pos:end="77:35">(<init pos:start="77:18" pos:end="77:23"><expr pos:start="77:18" pos:end="77:22"><name pos:start="77:18" pos:end="77:18">i</name> <operator pos:start="77:20" pos:end="77:20">=</operator> <name pos:start="77:22" pos:end="77:22">n</name></expr>;</init> <condition pos:start="77:25" pos:end="77:30"><expr pos:start="77:25" pos:end="77:29"><name pos:start="77:25" pos:end="77:25">i</name> <operator pos:start="77:27" pos:end="77:27">&gt;</operator> <literal type="number" pos:start="77:29" pos:end="77:29">0</literal></expr>;</condition> <incr pos:start="77:32" pos:end="77:34"><expr pos:start="77:32" pos:end="77:34"><name pos:start="77:32" pos:end="77:32">i</name><operator pos:start="77:33" pos:end="77:34">--</operator></expr></incr>)</control> <block pos:start="77:37" pos:end="188:20">{<block_content pos:start="78:17" pos:end="188:20">
                <expr_stmt pos:start="78:17" pos:end="78:61"><expr pos:start="78:17" pos:end="78:60"><call pos:start="78:17" pos:end="78:60"><name pos:start="78:17" pos:end="78:24">AV_WN16A</name><argument_list pos:start="78:25" pos:end="78:60">(<argument pos:start="78:26" pos:end="78:32"><expr pos:start="78:26" pos:end="78:32"><name pos:start="78:26" pos:end="78:32">samples</name></expr></argument>, <argument pos:start="78:35" pos:end="78:59"><expr pos:start="78:35" pos:end="78:59"><call pos:start="78:35" pos:end="78:59"><name pos:start="78:35" pos:end="78:53">bytestream_get_le16</name><argument_list pos:start="78:54" pos:end="78:59">(<argument pos:start="78:55" pos:end="78:58"><expr pos:start="78:55" pos:end="78:58"><operator pos:start="78:55" pos:end="78:55">&amp;</operator><name pos:start="78:56" pos:end="78:58">src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="79:17" pos:end="79:29"><expr pos:start="79:17" pos:end="79:28"><name pos:start="79:17" pos:end="79:23">samples</name> <operator pos:start="79:25" pos:end="79:26">+=</operator> <literal type="number" pos:start="79:28" pos:end="79:28">2</literal></expr>;</expr_stmt>
        <break pos:start="80:9" pos:end="80:14">break;</break>
    <case pos:start="81:5" pos:end="81:31">case <expr pos:start="81:10" pos:end="81:30"><name pos:start="81:10" pos:end="81:30">AV_CODEC_ID_PCM_U16LE</name></expr>:</case>
        <macro pos:start="82:9" pos:end="82:52"><name pos:start="82:9" pos:end="82:14">DECODE</name><argument_list pos:start="82:15" pos:end="82:52">(<argument pos:start="82:16" pos:end="82:17"><literal type="number" pos:start="82:16" pos:end="82:17">16</literal></argument>, <argument pos:start="82:20" pos:end="82:23">le16</argument>, <argument pos:start="82:26" pos:end="82:28">src</argument>, <argument pos:start="82:31" pos:end="82:37">samples</argument>, <argument pos:start="82:40" pos:end="82:40">n</argument>, <argument pos:start="82:43" pos:end="82:43"><literal type="number" pos:start="82:43" pos:end="82:43">0</literal></argument>, <argument pos:start="82:46" pos:end="82:51"><literal type="number" pos:start="82:46" pos:end="82:51">0x8000</literal></argument>)</argument_list></macro>
        <break pos:start="83:9" pos:end="83:14">break;</break>
    <case pos:start="84:5" pos:end="84:31">case <expr pos:start="84:10" pos:end="84:30"><name pos:start="84:10" pos:end="84:30">AV_CODEC_ID_PCM_U16BE</name></expr>:</case>
        <macro pos:start="85:9" pos:end="85:52"><name pos:start="85:9" pos:end="85:14">DECODE</name><argument_list pos:start="85:15" pos:end="85:52">(<argument pos:start="85:16" pos:end="85:17"><literal type="number" pos:start="85:16" pos:end="85:17">16</literal></argument>, <argument pos:start="85:20" pos:end="85:23">be16</argument>, <argument pos:start="85:26" pos:end="85:28">src</argument>, <argument pos:start="85:31" pos:end="85:37">samples</argument>, <argument pos:start="85:40" pos:end="85:40">n</argument>, <argument pos:start="85:43" pos:end="85:43"><literal type="number" pos:start="85:43" pos:end="85:43">0</literal></argument>, <argument pos:start="85:46" pos:end="85:51"><literal type="number" pos:start="85:46" pos:end="85:51">0x8000</literal></argument>)</argument_list></macro>
        <break pos:start="86:9" pos:end="86:14">break;</break>
    <case pos:start="87:5" pos:end="87:28">case <expr pos:start="87:10" pos:end="87:27"><name pos:start="87:10" pos:end="87:27">AV_CODEC_ID_PCM_S8</name></expr>:</case>
        <for pos:start="88:9" pos:end="89:38">for <control pos:start="88:13" pos:end="88:26">(<init pos:start="88:14" pos:end="88:14">;</init> <condition pos:start="88:16" pos:end="88:21"><expr pos:start="88:16" pos:end="88:20"><name pos:start="88:16" pos:end="88:16">n</name> <operator pos:start="88:18" pos:end="88:18">&gt;</operator> <literal type="number" pos:start="88:20" pos:end="88:20">0</literal></expr>;</condition> <incr pos:start="88:23" pos:end="88:25"><expr pos:start="88:23" pos:end="88:25"><name pos:start="88:23" pos:end="88:23">n</name><operator pos:start="88:24" pos:end="88:25">--</operator></expr></incr>)</control><block type="pseudo" pos:start="89:13" pos:end="89:38"><block_content pos:start="89:13" pos:end="89:38">
            <expr_stmt pos:start="89:13" pos:end="89:38"><expr pos:start="89:13" pos:end="89:37"><operator pos:start="89:13" pos:end="89:13">*</operator><name pos:start="89:14" pos:end="89:20">samples</name><operator pos:start="89:21" pos:end="89:22">++</operator> <operator pos:start="89:24" pos:end="89:24">=</operator> <operator pos:start="89:26" pos:end="89:26">*</operator><name pos:start="89:27" pos:end="89:29">src</name><operator pos:start="89:30" pos:end="89:31">++</operator> <operator pos:start="89:33" pos:end="89:33">+</operator> <literal type="number" pos:start="89:35" pos:end="89:37">128</literal></expr>;</expr_stmt></block_content></block></for>
        <break pos:start="90:9" pos:end="92:0">break;</break>
<cpp:if pos:start="91:1" pos:end="91:18">#<cpp:directive pos:start="91:2" pos:end="91:3">if</cpp:directive> <expr pos:start="91:5" pos:end="91:18"><name pos:start="91:5" pos:end="91:18">HAVE_BIGENDIAN</name></expr></cpp:if>
    <case pos:start="92:5" pos:end="92:31">case <expr pos:start="92:10" pos:end="92:30"><name pos:start="92:10" pos:end="92:30">AV_CODEC_ID_PCM_F64LE</name></expr>:</case>
        <macro pos:start="93:9" pos:end="93:47"><name pos:start="93:9" pos:end="93:14">DECODE</name><argument_list pos:start="93:15" pos:end="93:47">(<argument pos:start="93:16" pos:end="93:17"><literal type="number" pos:start="93:16" pos:end="93:17">64</literal></argument>, <argument pos:start="93:20" pos:end="93:23">le64</argument>, <argument pos:start="93:26" pos:end="93:28">src</argument>, <argument pos:start="93:31" pos:end="93:37">samples</argument>, <argument pos:start="93:40" pos:end="93:40">n</argument>, <argument pos:start="93:43" pos:end="93:43"><literal type="number" pos:start="93:43" pos:end="93:43">0</literal></argument>, <argument pos:start="93:46" pos:end="93:46"><literal type="number" pos:start="93:46" pos:end="93:46">0</literal></argument>)</argument_list></macro>
        <break pos:start="94:9" pos:end="94:14">break;</break>
    <case pos:start="95:5" pos:end="95:31">case <expr pos:start="95:10" pos:end="95:30"><name pos:start="95:10" pos:end="95:30">AV_CODEC_ID_PCM_S32LE</name></expr>:</case>
    <case pos:start="96:5" pos:end="96:31">case <expr pos:start="96:10" pos:end="96:30"><name pos:start="96:10" pos:end="96:30">AV_CODEC_ID_PCM_F32LE</name></expr>:</case>
        <macro pos:start="97:9" pos:end="97:47"><name pos:start="97:9" pos:end="97:14">DECODE</name><argument_list pos:start="97:15" pos:end="97:47">(<argument pos:start="97:16" pos:end="97:17"><literal type="number" pos:start="97:16" pos:end="97:17">32</literal></argument>, <argument pos:start="97:20" pos:end="97:23">le32</argument>, <argument pos:start="97:26" pos:end="97:28">src</argument>, <argument pos:start="97:31" pos:end="97:37">samples</argument>, <argument pos:start="97:40" pos:end="97:40">n</argument>, <argument pos:start="97:43" pos:end="97:43"><literal type="number" pos:start="97:43" pos:end="97:43">0</literal></argument>, <argument pos:start="97:46" pos:end="97:46"><literal type="number" pos:start="97:46" pos:end="97:46">0</literal></argument>)</argument_list></macro>
        <break pos:start="98:9" pos:end="98:14">break;</break>
    <case pos:start="99:5" pos:end="99:31">case <expr pos:start="99:10" pos:end="99:30"><name pos:start="99:10" pos:end="99:30">AV_CODEC_ID_PCM_S16LE</name></expr>:</case>
        <macro pos:start="100:9" pos:end="100:47"><name pos:start="100:9" pos:end="100:14">DECODE</name><argument_list pos:start="100:15" pos:end="100:47">(<argument pos:start="100:16" pos:end="100:17"><literal type="number" pos:start="100:16" pos:end="100:17">16</literal></argument>, <argument pos:start="100:20" pos:end="100:23">le16</argument>, <argument pos:start="100:26" pos:end="100:28">src</argument>, <argument pos:start="100:31" pos:end="100:37">samples</argument>, <argument pos:start="100:40" pos:end="100:40">n</argument>, <argument pos:start="100:43" pos:end="100:43"><literal type="number" pos:start="100:43" pos:end="100:43">0</literal></argument>, <argument pos:start="100:46" pos:end="100:46"><literal type="number" pos:start="100:46" pos:end="100:46">0</literal></argument>)</argument_list></macro>
        <break pos:start="101:9" pos:end="101:14">break;</break>
    <case pos:start="102:5" pos:end="102:31">case <expr pos:start="102:10" pos:end="102:30"><name pos:start="102:10" pos:end="102:30">AV_CODEC_ID_PCM_F64BE</name></expr>:</case>
    <case pos:start="103:5" pos:end="103:31">case <expr pos:start="103:10" pos:end="103:30"><name pos:start="103:10" pos:end="103:30">AV_CODEC_ID_PCM_F32BE</name></expr>:</case>
    <case pos:start="104:5" pos:end="104:31">case <expr pos:start="104:10" pos:end="104:30"><name pos:start="104:10" pos:end="104:30">AV_CODEC_ID_PCM_S32BE</name></expr>:</case>
    <case pos:start="105:5" pos:end="107:0">case <expr pos:start="105:10" pos:end="105:30"><name pos:start="105:10" pos:end="105:30">AV_CODEC_ID_PCM_S16BE</name></expr>:</case>
<cpp:else pos:start="106:1" pos:end="106:5">#<cpp:directive pos:start="106:2" pos:end="106:5">else</cpp:directive></cpp:else>
    <case pos:start="107:5" pos:end="107:31">case <expr pos:start="107:10" pos:end="107:30"><name pos:start="107:10" pos:end="107:30">AV_CODEC_ID_PCM_F64BE</name></expr>:</case>
        <macro pos:start="108:9" pos:end="108:47"><name pos:start="108:9" pos:end="108:14">DECODE</name><argument_list pos:start="108:15" pos:end="108:47">(<argument pos:start="108:16" pos:end="108:17"><literal type="number" pos:start="108:16" pos:end="108:17">64</literal></argument>, <argument pos:start="108:20" pos:end="108:23">be64</argument>, <argument pos:start="108:26" pos:end="108:28">src</argument>, <argument pos:start="108:31" pos:end="108:37">samples</argument>, <argument pos:start="108:40" pos:end="108:40">n</argument>, <argument pos:start="108:43" pos:end="108:43"><literal type="number" pos:start="108:43" pos:end="108:43">0</literal></argument>, <argument pos:start="108:46" pos:end="108:46"><literal type="number" pos:start="108:46" pos:end="108:46">0</literal></argument>)</argument_list></macro>
        <break pos:start="109:9" pos:end="109:14">break;</break>
    <case pos:start="110:5" pos:end="110:31">case <expr pos:start="110:10" pos:end="110:30"><name pos:start="110:10" pos:end="110:30">AV_CODEC_ID_PCM_F32BE</name></expr>:</case>
    <case pos:start="111:5" pos:end="111:31">case <expr pos:start="111:10" pos:end="111:30"><name pos:start="111:10" pos:end="111:30">AV_CODEC_ID_PCM_S32BE</name></expr>:</case>
        <macro pos:start="112:9" pos:end="112:47"><name pos:start="112:9" pos:end="112:14">DECODE</name><argument_list pos:start="112:15" pos:end="112:47">(<argument pos:start="112:16" pos:end="112:17"><literal type="number" pos:start="112:16" pos:end="112:17">32</literal></argument>, <argument pos:start="112:20" pos:end="112:23">be32</argument>, <argument pos:start="112:26" pos:end="112:28">src</argument>, <argument pos:start="112:31" pos:end="112:37">samples</argument>, <argument pos:start="112:40" pos:end="112:40">n</argument>, <argument pos:start="112:43" pos:end="112:43"><literal type="number" pos:start="112:43" pos:end="112:43">0</literal></argument>, <argument pos:start="112:46" pos:end="112:46"><literal type="number" pos:start="112:46" pos:end="112:46">0</literal></argument>)</argument_list></macro>
        <break pos:start="113:9" pos:end="113:14">break;</break>
    <case pos:start="114:5" pos:end="114:31">case <expr pos:start="114:10" pos:end="114:30"><name pos:start="114:10" pos:end="114:30">AV_CODEC_ID_PCM_S16BE</name></expr>:</case>
        <macro pos:start="115:9" pos:end="115:47"><name pos:start="115:9" pos:end="115:14">DECODE</name><argument_list pos:start="115:15" pos:end="115:47">(<argument pos:start="115:16" pos:end="115:17"><literal type="number" pos:start="115:16" pos:end="115:17">16</literal></argument>, <argument pos:start="115:20" pos:end="115:23">be16</argument>, <argument pos:start="115:26" pos:end="115:28">src</argument>, <argument pos:start="115:31" pos:end="115:37">samples</argument>, <argument pos:start="115:40" pos:end="115:40">n</argument>, <argument pos:start="115:43" pos:end="115:43"><literal type="number" pos:start="115:43" pos:end="115:43">0</literal></argument>, <argument pos:start="115:46" pos:end="115:46"><literal type="number" pos:start="115:46" pos:end="115:46">0</literal></argument>)</argument_list></macro>
        <break pos:start="116:9" pos:end="116:14">break;</break>
    <case pos:start="117:5" pos:end="117:31">case <expr pos:start="117:10" pos:end="117:30"><name pos:start="117:10" pos:end="117:30">AV_CODEC_ID_PCM_F64LE</name></expr>:</case>
    <case pos:start="118:5" pos:end="118:31">case <expr pos:start="118:10" pos:end="118:30"><name pos:start="118:10" pos:end="118:30">AV_CODEC_ID_PCM_F32LE</name></expr>:</case>
    <case pos:start="119:5" pos:end="119:31">case <expr pos:start="119:10" pos:end="119:30"><name pos:start="119:10" pos:end="119:30">AV_CODEC_ID_PCM_S32LE</name></expr>:</case>
    <case pos:start="120:5" pos:end="122:0">case <expr pos:start="120:10" pos:end="120:30"><name pos:start="120:10" pos:end="120:30">AV_CODEC_ID_PCM_S16LE</name></expr>:</case>
<cpp:endif pos:start="121:1" pos:end="121:6">#<cpp:directive pos:start="121:2" pos:end="121:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="121:8" pos:end="121:27">/* HAVE_BIGENDIAN */</comment>
    <case pos:start="122:5" pos:end="122:28">case <expr pos:start="122:10" pos:end="122:27"><name pos:start="122:10" pos:end="122:27">AV_CODEC_ID_PCM_U8</name></expr>:</case>
        <expr_stmt pos:start="123:9" pos:end="123:46"><expr pos:start="123:9" pos:end="123:45"><call pos:start="123:9" pos:end="123:45"><name pos:start="123:9" pos:end="123:14">memcpy</name><argument_list pos:start="123:15" pos:end="123:45">(<argument pos:start="123:16" pos:end="123:22"><expr pos:start="123:16" pos:end="123:22"><name pos:start="123:16" pos:end="123:22">samples</name></expr></argument>, <argument pos:start="123:25" pos:end="123:27"><expr pos:start="123:25" pos:end="123:27"><name pos:start="123:25" pos:end="123:27">src</name></expr></argument>, <argument pos:start="123:30" pos:end="123:44"><expr pos:start="123:30" pos:end="123:44"><name pos:start="123:30" pos:end="123:30">n</name> <operator pos:start="123:32" pos:end="123:32">*</operator> <name pos:start="123:34" pos:end="123:44">sample_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="124:9" pos:end="124:14">break;</break>
    <case pos:start="125:5" pos:end="125:30">case <expr pos:start="125:10" pos:end="125:29"><name pos:start="125:10" pos:end="125:29">AV_CODEC_ID_PCM_ZORK</name></expr>:</case>
        <for pos:start="126:9" pos:end="188:20">for <control pos:start="126:13" pos:end="126:26">(<init pos:start="126:14" pos:end="126:14">;</init> <condition pos:start="126:16" pos:end="126:21"><expr pos:start="126:16" pos:end="126:20"><name pos:start="126:16" pos:end="126:16">n</name> <operator pos:start="126:18" pos:end="126:18">&gt;</operator> <literal type="number" pos:start="126:20" pos:end="126:20">0</literal></expr>;</condition> <incr pos:start="126:23" pos:end="126:25"><expr pos:start="126:23" pos:end="126:25"><name pos:start="126:23" pos:end="126:23">n</name><operator pos:start="126:24" pos:end="126:25">--</operator></expr></incr>)</control> <block pos:start="126:28" pos:end="188:20">{<block_content pos:start="127:13" pos:end="188:20">
            <decl_stmt pos:start="127:13" pos:end="127:27"><decl pos:start="127:13" pos:end="127:26"><type pos:start="127:13" pos:end="127:15"><name pos:start="127:13" pos:end="127:15">int</name></type> <name pos:start="127:17" pos:end="127:17">v</name> <init pos:start="127:19" pos:end="127:26">= <expr pos:start="127:21" pos:end="127:26"><operator pos:start="127:21" pos:end="127:21">*</operator><name pos:start="127:22" pos:end="127:24">src</name><operator pos:start="127:25" pos:end="127:26">++</operator></expr></init></decl>;</decl_stmt>
            <if_stmt pos:start="128:13" pos:end="129:28"><if pos:start="128:13" pos:end="129:28">if <condition pos:start="128:16" pos:end="128:24">(<expr pos:start="128:17" pos:end="128:23"><name pos:start="128:17" pos:end="128:17">v</name> <operator pos:start="128:19" pos:end="128:19">&lt;</operator> <literal type="number" pos:start="128:21" pos:end="128:23">128</literal></expr>)</condition><block type="pseudo" pos:start="129:17" pos:end="129:28"><block_content pos:start="129:17" pos:end="129:28">
                <expr_stmt pos:start="129:17" pos:end="129:28"><expr pos:start="129:17" pos:end="129:27"><name pos:start="129:17" pos:end="129:17">v</name> <operator pos:start="129:19" pos:end="129:19">=</operator> <literal type="number" pos:start="129:21" pos:end="129:25">128</literal> <operator pos:start="129:25" pos:end="129:25">-</operator> <name pos:start="129:27" pos:end="129:27">v</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt pos:start="130:13" pos:end="130:27"><expr pos:start="130:13" pos:end="130:26"><operator pos:start="130:13" pos:end="130:13">*</operator><name pos:start="130:14" pos:end="130:20">samples</name><operator pos:start="130:21" pos:end="130:22">++</operator> <operator pos:start="130:24" pos:end="130:24">=</operator> <name pos:start="130:26" pos:end="130:26">v</name></expr>;</expr_stmt>
        <break pos:start="131:9" pos:end="131:14">break;</break>
    <case pos:start="132:5" pos:end="132:30">case <expr pos:start="132:10" pos:end="132:29"><name pos:start="132:10" pos:end="132:29">AV_CODEC_ID_PCM_ALAW</name></expr>:</case>
    <case pos:start="133:5" pos:end="133:31">case <expr pos:start="133:10" pos:end="133:30"><name pos:start="133:10" pos:end="133:30">AV_CODEC_ID_PCM_MULAW</name></expr>:</case>
        <for pos:start="134:9" pos:end="188:20">for <control pos:start="134:13" pos:end="134:26">(<init pos:start="134:14" pos:end="134:14">;</init> <condition pos:start="134:16" pos:end="134:21"><expr pos:start="134:16" pos:end="134:20"><name pos:start="134:16" pos:end="134:16">n</name> <operator pos:start="134:18" pos:end="134:18">&gt;</operator> <literal type="number" pos:start="134:20" pos:end="134:20">0</literal></expr>;</condition> <incr pos:start="134:23" pos:end="134:25"><expr pos:start="134:23" pos:end="134:25"><name pos:start="134:23" pos:end="134:23">n</name><operator pos:start="134:24" pos:end="134:25">--</operator></expr></incr>)</control> <block pos:start="134:28" pos:end="188:20">{<block_content pos:start="135:13" pos:end="188:20">
            <expr_stmt pos:start="135:13" pos:end="135:48"><expr pos:start="135:13" pos:end="135:47"><call pos:start="135:13" pos:end="135:47"><name pos:start="135:13" pos:end="135:20">AV_WN16A</name><argument_list pos:start="135:21" pos:end="135:47">(<argument pos:start="135:22" pos:end="135:28"><expr pos:start="135:22" pos:end="135:28"><name pos:start="135:22" pos:end="135:28">samples</name></expr></argument>, <argument pos:start="135:31" pos:end="135:46"><expr pos:start="135:31" pos:end="135:46"><name pos:start="135:31" pos:end="135:46"><name pos:start="135:31" pos:end="135:31">s</name><operator pos:start="135:32" pos:end="135:33">-&gt;</operator><name pos:start="135:34" pos:end="135:38">table</name><index pos:start="135:39" pos:end="135:46">[<expr pos:start="135:40" pos:end="135:45"><operator pos:start="135:40" pos:end="135:40">*</operator><name pos:start="135:41" pos:end="135:43">src</name><operator pos:start="135:44" pos:end="135:45">++</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="136:13" pos:end="136:25"><expr pos:start="136:13" pos:end="136:24"><name pos:start="136:13" pos:end="136:19">samples</name> <operator pos:start="136:21" pos:end="136:22">+=</operator> <literal type="number" pos:start="136:24" pos:end="136:24">2</literal></expr>;</expr_stmt>
        <break pos:start="137:9" pos:end="137:14">break;</break>
    <case pos:start="138:5" pos:end="138:29">case <expr pos:start="138:10" pos:end="138:28"><name pos:start="138:10" pos:end="138:28">AV_CODEC_ID_PCM_DVD</name></expr>:</case>
    <block pos:start="139:5" pos:end="188:20">{<block_content pos:start="140:9" pos:end="188:20">
        <decl_stmt pos:start="140:9" pos:end="140:28"><decl pos:start="140:9" pos:end="140:27"><type pos:start="140:9" pos:end="140:23"><specifier pos:start="140:9" pos:end="140:13">const</specifier> <name pos:start="140:15" pos:end="140:21">uint8_t</name> <modifier pos:start="140:23" pos:end="140:23">*</modifier></type><name pos:start="140:24" pos:end="140:27">src8</name></decl>;</decl_stmt>
        <expr_stmt pos:start="141:9" pos:end="141:50"><expr pos:start="141:9" pos:end="141:49"><name pos:start="141:9" pos:end="141:19">dst_int32_t</name> <operator pos:start="141:21" pos:end="141:21">=</operator> <operator pos:start="141:23" pos:end="141:23">(</operator><name pos:start="141:24" pos:end="141:30">int32_t</name> <operator pos:start="141:32" pos:end="141:32">*</operator><operator pos:start="141:33" pos:end="141:33">)</operator><name pos:start="141:34" pos:end="141:49"><name pos:start="141:34" pos:end="141:34">s</name><operator pos:start="141:35" pos:end="141:36">-&gt;</operator><name pos:start="141:37" pos:end="141:41">frame</name><operator pos:start="141:42" pos:end="141:42">.</operator><name pos:start="141:43" pos:end="141:46">data</name><index pos:start="141:47" pos:end="141:49">[<expr pos:start="141:48" pos:end="141:48"><literal type="number" pos:start="141:48" pos:end="141:48">0</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt pos:start="142:9" pos:end="142:29"><expr pos:start="142:9" pos:end="142:28"><name pos:start="142:9" pos:end="142:9">n</name> <operator pos:start="142:11" pos:end="142:12">/=</operator> <name pos:start="142:14" pos:end="142:28"><name pos:start="142:14" pos:end="142:18">avctx</name><operator pos:start="142:19" pos:end="142:20">-&gt;</operator><name pos:start="142:21" pos:end="142:28">channels</name></name></expr>;</expr_stmt>
        <switch pos:start="143:9" pos:end="188:20">switch <condition pos:start="143:16" pos:end="143:45">(<expr pos:start="143:17" pos:end="143:44"><name pos:start="143:17" pos:end="143:44"><name pos:start="143:17" pos:end="143:21">avctx</name><operator pos:start="143:22" pos:end="143:23">-&gt;</operator><name pos:start="143:24" pos:end="143:44">bits_per_coded_sample</name></name></expr>)</condition> <block pos:start="143:47" pos:end="188:20">{<block_content pos:start="144:9" pos:end="188:20">
        <case pos:start="144:9" pos:end="144:16">case <expr pos:start="144:14" pos:end="144:15"><literal type="number" pos:start="144:14" pos:end="144:15">20</literal></expr>:</case>
            <while pos:start="145:13" pos:end="188:20">while <condition pos:start="145:19" pos:end="145:23">(<expr pos:start="145:20" pos:end="145:22"><name pos:start="145:20" pos:end="145:20">n</name><operator pos:start="145:21" pos:end="145:22">--</operator></expr>)</condition> <block pos:start="145:25" pos:end="188:20">{<block_content pos:start="146:17" pos:end="188:20">
                <expr_stmt pos:start="146:17" pos:end="146:39"><expr pos:start="146:17" pos:end="146:38"><name pos:start="146:17" pos:end="146:17">c</name>    <operator pos:start="146:22" pos:end="146:22">=</operator> <name pos:start="146:24" pos:end="146:38"><name pos:start="146:24" pos:end="146:28">avctx</name><operator pos:start="146:29" pos:end="146:30">-&gt;</operator><name pos:start="146:31" pos:end="146:38">channels</name></name></expr>;</expr_stmt>
                <expr_stmt pos:start="147:17" pos:end="147:35"><expr pos:start="147:17" pos:end="147:34"><name pos:start="147:17" pos:end="147:20">src8</name> <operator pos:start="147:22" pos:end="147:22">=</operator> <name pos:start="147:24" pos:end="147:26">src</name> <operator pos:start="147:28" pos:end="147:28">+</operator> <literal type="number" pos:start="147:30" pos:end="147:30">4</literal> <operator pos:start="147:32" pos:end="147:32">*</operator> <name pos:start="147:34" pos:end="147:34">c</name></expr>;</expr_stmt>
                <while pos:start="148:17" pos:end="188:20">while <condition pos:start="148:23" pos:end="148:27">(<expr pos:start="148:24" pos:end="148:26"><name pos:start="148:24" pos:end="148:24">c</name><operator pos:start="148:25" pos:end="148:26">--</operator></expr>)</condition> <block pos:start="148:29" pos:end="188:20">{<block_content pos:start="149:21" pos:end="188:20">
                    <expr_stmt pos:start="149:21" pos:end="149:98"><expr pos:start="149:21" pos:end="149:97"><operator pos:start="149:21" pos:end="149:21">*</operator><name pos:start="149:22" pos:end="149:32">dst_int32_t</name><operator pos:start="149:33" pos:end="149:34">++</operator> <operator pos:start="149:36" pos:end="149:36">=</operator> <operator pos:start="149:38" pos:end="149:38">(</operator><call pos:start="149:39" pos:end="149:63"><name pos:start="149:39" pos:end="149:57">bytestream_get_be16</name><argument_list pos:start="149:58" pos:end="149:63">(<argument pos:start="149:59" pos:end="149:62"><expr pos:start="149:59" pos:end="149:62"><operator pos:start="149:59" pos:end="149:59">&amp;</operator><name pos:start="149:60" pos:end="149:62">src</name></expr></argument>)</argument_list></call> <operator pos:start="149:65" pos:end="149:66">&lt;&lt;</operator> <literal type="number" pos:start="149:68" pos:end="149:69">16</literal><operator pos:start="149:70" pos:end="149:70">)</operator> <operator pos:start="149:72" pos:end="149:72">+</operator> <operator pos:start="149:74" pos:end="149:74">(</operator><operator pos:start="149:75" pos:end="149:75">(</operator><operator pos:start="149:76" pos:end="149:76">*</operator><name pos:start="149:77" pos:end="149:80">src8</name>   <operator pos:start="149:84" pos:end="149:84">&amp;</operator> <literal type="number" pos:start="149:86" pos:end="149:89">0xf0</literal><operator pos:start="149:90" pos:end="149:90">)</operator> <operator pos:start="149:92" pos:end="149:93">&lt;&lt;</operator>  <literal type="number" pos:start="149:96" pos:end="149:96">8</literal><operator pos:start="149:97" pos:end="149:97">)</operator></expr>;</expr_stmt>
                    <expr_stmt pos:start="150:21" pos:end="150:98"><expr pos:start="150:21" pos:end="150:97"><operator pos:start="150:21" pos:end="150:21">*</operator><name pos:start="150:22" pos:end="150:32">dst_int32_t</name><operator pos:start="150:33" pos:end="150:34">++</operator> <operator pos:start="150:36" pos:end="150:36">=</operator> <operator pos:start="150:38" pos:end="150:38">(</operator><call pos:start="150:39" pos:end="150:63"><name pos:start="150:39" pos:end="150:57">bytestream_get_be16</name><argument_list pos:start="150:58" pos:end="150:63">(<argument pos:start="150:59" pos:end="150:62"><expr pos:start="150:59" pos:end="150:62"><operator pos:start="150:59" pos:end="150:59">&amp;</operator><name pos:start="150:60" pos:end="150:62">src</name></expr></argument>)</argument_list></call> <operator pos:start="150:65" pos:end="150:66">&lt;&lt;</operator> <literal type="number" pos:start="150:68" pos:end="150:69">16</literal><operator pos:start="150:70" pos:end="150:70">)</operator> <operator pos:start="150:72" pos:end="150:72">+</operator> <operator pos:start="150:74" pos:end="150:74">(</operator><operator pos:start="150:75" pos:end="150:75">(</operator><operator pos:start="150:76" pos:end="150:76">*</operator><name pos:start="150:77" pos:end="150:80">src8</name><operator pos:start="150:81" pos:end="150:82">++</operator> <operator pos:start="150:84" pos:end="150:84">&amp;</operator> <literal type="number" pos:start="150:86" pos:end="150:89">0x0f</literal><operator pos:start="150:90" pos:end="150:90">)</operator> <operator pos:start="150:92" pos:end="150:93">&lt;&lt;</operator> <literal type="number" pos:start="150:95" pos:end="150:96">12</literal><operator pos:start="150:97" pos:end="150:97">)</operator></expr>;</expr_stmt>
                <expr_stmt pos:start="151:17" pos:end="151:27"><expr pos:start="151:17" pos:end="151:26"><name pos:start="151:17" pos:end="151:19">src</name> <operator pos:start="151:21" pos:end="151:21">=</operator> <name pos:start="151:23" pos:end="151:26">src8</name></expr>;</expr_stmt>
            <break pos:start="152:13" pos:end="152:18">break;</break>
        <case pos:start="153:9" pos:end="153:16">case <expr pos:start="153:14" pos:end="153:15"><literal type="number" pos:start="153:14" pos:end="153:15">24</literal></expr>:</case>
            <while pos:start="154:13" pos:end="188:20">while <condition pos:start="154:19" pos:end="154:23">(<expr pos:start="154:20" pos:end="154:22"><name pos:start="154:20" pos:end="154:20">n</name><operator pos:start="154:21" pos:end="154:22">--</operator></expr>)</condition> <block pos:start="154:25" pos:end="188:20">{<block_content pos:start="155:17" pos:end="188:20">
                <expr_stmt pos:start="155:17" pos:end="155:39"><expr pos:start="155:17" pos:end="155:38"><name pos:start="155:17" pos:end="155:17">c</name>    <operator pos:start="155:22" pos:end="155:22">=</operator> <name pos:start="155:24" pos:end="155:38"><name pos:start="155:24" pos:end="155:28">avctx</name><operator pos:start="155:29" pos:end="155:30">-&gt;</operator><name pos:start="155:31" pos:end="155:38">channels</name></name></expr>;</expr_stmt>
                <expr_stmt pos:start="156:17" pos:end="156:35"><expr pos:start="156:17" pos:end="156:34"><name pos:start="156:17" pos:end="156:20">src8</name> <operator pos:start="156:22" pos:end="156:22">=</operator> <name pos:start="156:24" pos:end="156:26">src</name> <operator pos:start="156:28" pos:end="156:28">+</operator> <literal type="number" pos:start="156:30" pos:end="156:30">4</literal> <operator pos:start="156:32" pos:end="156:32">*</operator> <name pos:start="156:34" pos:end="156:34">c</name></expr>;</expr_stmt>
                <while pos:start="157:17" pos:end="188:20">while <condition pos:start="157:23" pos:end="157:27">(<expr pos:start="157:24" pos:end="157:26"><name pos:start="157:24" pos:end="157:24">c</name><operator pos:start="157:25" pos:end="157:26">--</operator></expr>)</condition> <block pos:start="157:29" pos:end="188:20">{<block_content pos:start="158:21" pos:end="188:20">
                    <expr_stmt pos:start="158:21" pos:end="158:90"><expr pos:start="158:21" pos:end="158:89"><operator pos:start="158:21" pos:end="158:21">*</operator><name pos:start="158:22" pos:end="158:32">dst_int32_t</name><operator pos:start="158:33" pos:end="158:34">++</operator> <operator pos:start="158:36" pos:end="158:36">=</operator> <operator pos:start="158:38" pos:end="158:38">(</operator><call pos:start="158:39" pos:end="158:63"><name pos:start="158:39" pos:end="158:57">bytestream_get_be16</name><argument_list pos:start="158:58" pos:end="158:63">(<argument pos:start="158:59" pos:end="158:62"><expr pos:start="158:59" pos:end="158:62"><operator pos:start="158:59" pos:end="158:59">&amp;</operator><name pos:start="158:60" pos:end="158:62">src</name></expr></argument>)</argument_list></call> <operator pos:start="158:65" pos:end="158:66">&lt;&lt;</operator> <literal type="number" pos:start="158:68" pos:end="158:69">16</literal><operator pos:start="158:70" pos:end="158:70">)</operator> <operator pos:start="158:72" pos:end="158:72">+</operator> <operator pos:start="158:74" pos:end="158:74">(</operator><operator pos:start="158:75" pos:end="158:75">(</operator><operator pos:start="158:76" pos:end="158:76">*</operator><name pos:start="158:77" pos:end="158:80">src8</name><operator pos:start="158:81" pos:end="158:82">++</operator><operator pos:start="158:83" pos:end="158:83">)</operator> <operator pos:start="158:85" pos:end="158:86">&lt;&lt;</operator> <literal type="number" pos:start="158:88" pos:end="158:88">8</literal><operator pos:start="158:89" pos:end="158:89">)</operator></expr>;</expr_stmt>
                    <expr_stmt pos:start="159:21" pos:end="159:90"><expr pos:start="159:21" pos:end="159:89"><operator pos:start="159:21" pos:end="159:21">*</operator><name pos:start="159:22" pos:end="159:32">dst_int32_t</name><operator pos:start="159:33" pos:end="159:34">++</operator> <operator pos:start="159:36" pos:end="159:36">=</operator> <operator pos:start="159:38" pos:end="159:38">(</operator><call pos:start="159:39" pos:end="159:63"><name pos:start="159:39" pos:end="159:57">bytestream_get_be16</name><argument_list pos:start="159:58" pos:end="159:63">(<argument pos:start="159:59" pos:end="159:62"><expr pos:start="159:59" pos:end="159:62"><operator pos:start="159:59" pos:end="159:59">&amp;</operator><name pos:start="159:60" pos:end="159:62">src</name></expr></argument>)</argument_list></call> <operator pos:start="159:65" pos:end="159:66">&lt;&lt;</operator> <literal type="number" pos:start="159:68" pos:end="159:69">16</literal><operator pos:start="159:70" pos:end="159:70">)</operator> <operator pos:start="159:72" pos:end="159:72">+</operator> <operator pos:start="159:74" pos:end="159:74">(</operator><operator pos:start="159:75" pos:end="159:75">(</operator><operator pos:start="159:76" pos:end="159:76">*</operator><name pos:start="159:77" pos:end="159:80">src8</name><operator pos:start="159:81" pos:end="159:82">++</operator><operator pos:start="159:83" pos:end="159:83">)</operator> <operator pos:start="159:85" pos:end="159:86">&lt;&lt;</operator> <literal type="number" pos:start="159:88" pos:end="159:88">8</literal><operator pos:start="159:89" pos:end="159:89">)</operator></expr>;</expr_stmt>
                <expr_stmt pos:start="160:17" pos:end="160:27"><expr pos:start="160:17" pos:end="160:26"><name pos:start="160:17" pos:end="160:19">src</name> <operator pos:start="160:21" pos:end="160:21">=</operator> <name pos:start="160:23" pos:end="160:26">src8</name></expr>;</expr_stmt>
            <break pos:start="161:13" pos:end="161:18">break;</break>
        <break pos:start="162:9" pos:end="162:14">break;</break>
    <case pos:start="163:5" pos:end="163:29">case <expr pos:start="163:10" pos:end="163:28"><name pos:start="163:10" pos:end="163:28">AV_CODEC_ID_PCM_LXF</name></expr>:</case>
    <block pos:start="164:5" pos:end="188:20">{<block_content pos:start="165:9" pos:end="188:20">
        <decl_stmt pos:start="165:9" pos:end="165:14"><decl pos:start="165:9" pos:end="165:13"><type pos:start="165:9" pos:end="165:11"><name pos:start="165:9" pos:end="165:11">int</name></type> <name pos:start="165:13" pos:end="165:13">i</name></decl>;</decl_stmt>
        <expr_stmt pos:start="166:9" pos:end="166:29"><expr pos:start="166:9" pos:end="166:28"><name pos:start="166:9" pos:end="166:9">n</name> <operator pos:start="166:11" pos:end="166:12">/=</operator> <name pos:start="166:14" pos:end="166:28"><name pos:start="166:14" pos:end="166:18">avctx</name><operator pos:start="166:19" pos:end="166:20">-&gt;</operator><name pos:start="166:21" pos:end="166:28">channels</name></name></expr>;</expr_stmt>
        <for pos:start="167:9" pos:end="188:20">for <control pos:start="167:13" pos:end="167:45">(<init pos:start="167:14" pos:end="167:19"><expr pos:start="167:14" pos:end="167:18"><name pos:start="167:14" pos:end="167:14">c</name> <operator pos:start="167:16" pos:end="167:16">=</operator> <literal type="number" pos:start="167:18" pos:end="167:18">0</literal></expr>;</init> <condition pos:start="167:21" pos:end="167:40"><expr pos:start="167:21" pos:end="167:39"><name pos:start="167:21" pos:end="167:21">c</name> <operator pos:start="167:23" pos:end="167:23">&lt;</operator> <name pos:start="167:25" pos:end="167:39"><name pos:start="167:25" pos:end="167:29">avctx</name><operator pos:start="167:30" pos:end="167:31">-&gt;</operator><name pos:start="167:32" pos:end="167:39">channels</name></name></expr>;</condition> <incr pos:start="167:42" pos:end="167:44"><expr pos:start="167:42" pos:end="167:44"><name pos:start="167:42" pos:end="167:42">c</name><operator pos:start="167:43" pos:end="167:44">++</operator></expr></incr>)</control> <block pos:start="167:47" pos:end="188:20">{<block_content pos:start="168:13" pos:end="188:20">
            <expr_stmt pos:start="168:13" pos:end="168:63"><expr pos:start="168:13" pos:end="168:62"><name pos:start="168:13" pos:end="168:23">dst_int32_t</name> <operator pos:start="168:25" pos:end="168:25">=</operator> <operator pos:start="168:27" pos:end="168:27">(</operator><name pos:start="168:28" pos:end="168:34">int32_t</name> <operator pos:start="168:36" pos:end="168:36">*</operator><operator pos:start="168:37" pos:end="168:37">)</operator><name pos:start="168:38" pos:end="168:62"><name pos:start="168:38" pos:end="168:38">s</name><operator pos:start="168:39" pos:end="168:40">-&gt;</operator><name pos:start="168:41" pos:end="168:45">frame</name><operator pos:start="168:46" pos:end="168:46">.</operator><name pos:start="168:47" pos:end="168:59">extended_data</name><index pos:start="168:60" pos:end="168:62">[<expr pos:start="168:61" pos:end="168:61"><name pos:start="168:61" pos:end="168:61">c</name></expr>]</index></name></expr>;</expr_stmt>
            <for pos:start="169:13" pos:end="188:20">for <control pos:start="169:17" pos:end="169:35">(<init pos:start="169:18" pos:end="169:23"><expr pos:start="169:18" pos:end="169:22"><name pos:start="169:18" pos:end="169:18">i</name> <operator pos:start="169:20" pos:end="169:20">=</operator> <literal type="number" pos:start="169:22" pos:end="169:22">0</literal></expr>;</init> <condition pos:start="169:25" pos:end="169:30"><expr pos:start="169:25" pos:end="169:29"><name pos:start="169:25" pos:end="169:25">i</name> <operator pos:start="169:27" pos:end="169:27">&lt;</operator> <name pos:start="169:29" pos:end="169:29">n</name></expr>;</condition> <incr pos:start="169:32" pos:end="169:34"><expr pos:start="169:32" pos:end="169:34"><name pos:start="169:32" pos:end="169:32">i</name><operator pos:start="169:33" pos:end="169:34">++</operator></expr></incr>)</control> <block pos:start="169:37" pos:end="188:20">{<block_content pos:start="171:17" pos:end="188:20">
                <comment type="line" pos:start="170:17" pos:end="170:60">// extract low 20 bits and expand to 32 bits</comment>
                <expr_stmt pos:start="171:17" pos:end="175:42"><expr pos:start="171:17" pos:end="175:41"><operator pos:start="171:17" pos:end="171:17">*</operator><name pos:start="171:18" pos:end="171:28">dst_int32_t</name><operator pos:start="171:29" pos:end="171:30">++</operator> <operator pos:start="171:32" pos:end="171:32">=</operator>  <operator pos:start="171:35" pos:end="171:35">(</operator><name pos:start="171:36" pos:end="171:41"><name pos:start="171:36" pos:end="171:38">src</name><index pos:start="171:39" pos:end="171:41">[<expr pos:start="171:40" pos:end="171:40"><literal type="number" pos:start="171:40" pos:end="171:40">2</literal></expr>]</index></name>         <operator pos:start="171:51" pos:end="171:52">&lt;&lt;</operator> <literal type="number" pos:start="171:54" pos:end="171:55">28</literal><operator pos:start="171:56" pos:end="171:56">)</operator> <operator pos:start="171:58" pos:end="171:58">|</operator>
                                  <operator pos:start="172:35" pos:end="172:35">(</operator><name pos:start="172:36" pos:end="172:41"><name pos:start="172:36" pos:end="172:38">src</name><index pos:start="172:39" pos:end="172:41">[<expr pos:start="172:40" pos:end="172:40"><literal type="number" pos:start="172:40" pos:end="172:40">1</literal></expr>]</index></name>         <operator pos:start="172:51" pos:end="172:52">&lt;&lt;</operator> <literal type="number" pos:start="172:54" pos:end="172:55">20</literal><operator pos:start="172:56" pos:end="172:56">)</operator> <operator pos:start="172:58" pos:end="172:58">|</operator>
                                  <operator pos:start="173:35" pos:end="173:35">(</operator><name pos:start="173:36" pos:end="173:41"><name pos:start="173:36" pos:end="173:38">src</name><index pos:start="173:39" pos:end="173:41">[<expr pos:start="173:40" pos:end="173:40"><literal type="number" pos:start="173:40" pos:end="173:40">0</literal></expr>]</index></name>         <operator pos:start="173:51" pos:end="173:52">&lt;&lt;</operator> <literal type="number" pos:start="173:54" pos:end="173:55">12</literal><operator pos:start="173:56" pos:end="173:56">)</operator> <operator pos:start="173:58" pos:end="173:58">|</operator>
                                 <operator pos:start="174:34" pos:end="174:34">(</operator><operator pos:start="174:35" pos:end="174:35">(</operator><name pos:start="174:36" pos:end="174:41"><name pos:start="174:36" pos:end="174:38">src</name><index pos:start="174:39" pos:end="174:41">[<expr pos:start="174:40" pos:end="174:40"><literal type="number" pos:start="174:40" pos:end="174:40">2</literal></expr>]</index></name> <operator pos:start="174:43" pos:end="174:43">&amp;</operator> <literal type="number" pos:start="174:45" pos:end="174:48">0x0F</literal><operator pos:start="174:49" pos:end="174:49">)</operator> <operator pos:start="174:51" pos:end="174:52">&lt;&lt;</operator>  <literal type="number" pos:start="174:55" pos:end="174:55">8</literal><operator pos:start="174:56" pos:end="174:56">)</operator> <operator pos:start="174:58" pos:end="174:58">|</operator>
                                   <name pos:start="175:36" pos:end="175:41"><name pos:start="175:36" pos:end="175:38">src</name><index pos:start="175:39" pos:end="175:41">[<expr pos:start="175:40" pos:end="175:40"><literal type="number" pos:start="175:40" pos:end="175:40">1</literal></expr>]</index></name></expr>;</expr_stmt>
                <comment type="line" pos:start="176:17" pos:end="176:61">// extract high 20 bits and expand to 32 bits</comment>
                <expr_stmt pos:start="177:17" pos:end="181:57"><expr pos:start="177:17" pos:end="181:56"><operator pos:start="177:17" pos:end="177:17">*</operator><name pos:start="177:18" pos:end="177:28">dst_int32_t</name><operator pos:start="177:29" pos:end="177:30">++</operator> <operator pos:start="177:32" pos:end="177:32">=</operator>  <operator pos:start="177:35" pos:end="177:35">(</operator><name pos:start="177:36" pos:end="177:41"><name pos:start="177:36" pos:end="177:38">src</name><index pos:start="177:39" pos:end="177:41">[<expr pos:start="177:40" pos:end="177:40"><literal type="number" pos:start="177:40" pos:end="177:40">4</literal></expr>]</index></name>         <operator pos:start="177:51" pos:end="177:52">&lt;&lt;</operator> <literal type="number" pos:start="177:54" pos:end="177:55">24</literal><operator pos:start="177:56" pos:end="177:56">)</operator> <operator pos:start="177:58" pos:end="177:58">|</operator>
                                  <operator pos:start="178:35" pos:end="178:35">(</operator><name pos:start="178:36" pos:end="178:41"><name pos:start="178:36" pos:end="178:38">src</name><index pos:start="178:39" pos:end="178:41">[<expr pos:start="178:40" pos:end="178:40"><literal type="number" pos:start="178:40" pos:end="178:40">3</literal></expr>]</index></name>         <operator pos:start="178:51" pos:end="178:52">&lt;&lt;</operator> <literal type="number" pos:start="178:54" pos:end="178:55">16</literal><operator pos:start="178:56" pos:end="178:56">)</operator> <operator pos:start="178:58" pos:end="178:58">|</operator>
                                 <operator pos:start="179:34" pos:end="179:34">(</operator><operator pos:start="179:35" pos:end="179:35">(</operator><name pos:start="179:36" pos:end="179:41"><name pos:start="179:36" pos:end="179:38">src</name><index pos:start="179:39" pos:end="179:41">[<expr pos:start="179:40" pos:end="179:40"><literal type="number" pos:start="179:40" pos:end="179:40">2</literal></expr>]</index></name> <operator pos:start="179:43" pos:end="179:43">&amp;</operator> <literal type="number" pos:start="179:45" pos:end="179:48">0xF0</literal><operator pos:start="179:49" pos:end="179:49">)</operator> <operator pos:start="179:51" pos:end="179:52">&lt;&lt;</operator>  <literal type="number" pos:start="179:55" pos:end="179:55">8</literal><operator pos:start="179:56" pos:end="179:56">)</operator> <operator pos:start="179:58" pos:end="179:58">|</operator>
                                  <operator pos:start="180:35" pos:end="180:35">(</operator><name pos:start="180:36" pos:end="180:41"><name pos:start="180:36" pos:end="180:38">src</name><index pos:start="180:39" pos:end="180:41">[<expr pos:start="180:40" pos:end="180:40"><literal type="number" pos:start="180:40" pos:end="180:40">4</literal></expr>]</index></name>         <operator pos:start="180:51" pos:end="180:52">&lt;&lt;</operator>  <literal type="number" pos:start="180:55" pos:end="180:55">4</literal><operator pos:start="180:56" pos:end="180:56">)</operator> <operator pos:start="180:58" pos:end="180:58">|</operator>
                                  <operator pos:start="181:35" pos:end="181:35">(</operator><name pos:start="181:36" pos:end="181:41"><name pos:start="181:36" pos:end="181:38">src</name><index pos:start="181:39" pos:end="181:41">[<expr pos:start="181:40" pos:end="181:40"><literal type="number" pos:start="181:40" pos:end="181:40">3</literal></expr>]</index></name>         <operator pos:start="181:51" pos:end="181:52">&gt;&gt;</operator>  <literal type="number" pos:start="181:55" pos:end="181:55">4</literal><operator pos:start="181:56" pos:end="181:56">)</operator></expr>;</expr_stmt>
                <expr_stmt pos:start="182:17" pos:end="182:25"><expr pos:start="182:17" pos:end="182:24"><name pos:start="182:17" pos:end="182:19">src</name> <operator pos:start="182:21" pos:end="182:22">+=</operator> <literal type="number" pos:start="182:24" pos:end="182:24">5</literal></expr>;</expr_stmt>
        <break pos:start="183:9" pos:end="183:14">break;</break>
    <default pos:start="184:5" pos:end="184:12">default:</default>
        <return pos:start="185:9" pos:end="185:18">return <expr pos:start="185:16" pos:end="185:17"><operator pos:start="185:16" pos:end="185:16">-</operator><literal type="number" pos:start="185:17" pos:end="185:17">1</literal></expr>;</return>
    <expr_stmt pos:start="186:5" pos:end="186:25"><expr pos:start="186:5" pos:end="186:24"><operator pos:start="186:5" pos:end="186:5">*</operator><name pos:start="186:6" pos:end="186:18">got_frame_ptr</name>   <operator pos:start="186:22" pos:end="186:22">=</operator> <literal type="number" pos:start="186:24" pos:end="186:24">1</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="187:5" pos:end="187:32"><expr pos:start="187:5" pos:end="187:31"><operator pos:start="187:5" pos:end="187:5">*</operator><operator pos:start="187:6" pos:end="187:6">(</operator><name pos:start="187:7" pos:end="187:13">AVFrame</name> <operator pos:start="187:15" pos:end="187:15">*</operator><operator pos:start="187:16" pos:end="187:16">)</operator><name pos:start="187:17" pos:end="187:20">data</name> <operator pos:start="187:22" pos:end="187:22">=</operator> <name pos:start="187:24" pos:end="187:31"><name pos:start="187:24" pos:end="187:24">s</name><operator pos:start="187:25" pos:end="187:26">-&gt;</operator><name pos:start="187:27" pos:end="187:31">frame</name></name></expr>;</expr_stmt>
    <return pos:start="188:5" pos:end="188:20">return <expr pos:start="188:12" pos:end="188:19"><name pos:start="188:12" pos:end="188:19">buf_size</name></expr>;</return></block_content></block></for></block_content></block></for></block_content></block></block_content></block></while></block_content></block></while></block_content></block></while></block_content></block></while></block_content></block></switch></block_content></block></block_content></block></for></block_content></block></for></block_content></block></for></block_content></block></for></block_content></block></block_content></block></for></block_content></block></switch></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function></unit>
