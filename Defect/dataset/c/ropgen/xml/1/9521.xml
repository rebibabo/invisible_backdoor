<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9521.c" pos:tabs="8"><function pos:start="1:1" pos:end="67:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:22">gain_scale</name><parameter_list pos:start="1:23" pos:end="1:68">(<parameter pos:start="1:24" pos:end="1:40"><decl pos:start="1:24" pos:end="1:40"><type pos:start="1:24" pos:end="1:40"><name pos:start="1:24" pos:end="1:37">G723_1_Context</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:40">p</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:55"><decl pos:start="1:43" pos:end="1:55"><type pos:start="1:43" pos:end="1:55"><name pos:start="1:43" pos:end="1:49">int16_t</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type> <name pos:start="1:53" pos:end="1:55">buf</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:67"><decl pos:start="1:58" pos:end="1:67"><type pos:start="1:58" pos:end="1:67"><name pos:start="1:58" pos:end="1:60">int</name></type> <name pos:start="1:62" pos:end="1:67">energy</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="67:1">{<block_content pos:start="5:5" pos:end="65:5">

    <decl_stmt pos:start="5:5" pos:end="5:39"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">num</name></decl>, <decl pos:start="5:14" pos:end="5:18"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:14" pos:end="5:18">denom</name></decl>, <decl pos:start="5:21" pos:end="5:24"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:21" pos:end="5:24">gain</name></decl>, <decl pos:start="5:27" pos:end="5:31"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:27" pos:end="5:31">bits1</name></decl>, <decl pos:start="5:34" pos:end="5:38"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:34" pos:end="5:38">bits2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:10"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:19"><expr pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:7">num</name>   <operator pos:start="11:11" pos:end="11:11">=</operator> <name pos:start="11:13" pos:end="11:18">energy</name></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:14"><expr pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:9">denom</name> <operator pos:start="13:11" pos:end="13:11">=</operator> <literal type="number" pos:start="13:13" pos:end="13:13">0</literal></expr>;</expr_stmt>

    <for pos:start="15:5" pos:end="23:5">for <control pos:start="15:9" pos:end="15:38">(<init pos:start="15:10" pos:end="15:15"><expr pos:start="15:10" pos:end="15:14"><name pos:start="15:10" pos:end="15:10">i</name> <operator pos:start="15:12" pos:end="15:12">=</operator> <literal type="number" pos:start="15:14" pos:end="15:14">0</literal></expr>;</init> <condition pos:start="15:17" pos:end="15:33"><expr pos:start="15:17" pos:end="15:32"><name pos:start="15:17" pos:end="15:17">i</name> <operator pos:start="15:19" pos:end="15:19">&lt;</operator> <name pos:start="15:21" pos:end="15:32">SUBFRAME_LEN</name></expr>;</condition> <incr pos:start="15:35" pos:end="15:37"><expr pos:start="15:35" pos:end="15:37"><name pos:start="15:35" pos:end="15:35">i</name><operator pos:start="15:36" pos:end="15:37">++</operator></expr></incr>)</control> <block pos:start="15:40" pos:end="23:5">{<block_content pos:start="17:9" pos:end="21:45">

        <decl_stmt pos:start="17:9" pos:end="17:35"><decl pos:start="17:9" pos:end="17:34"><type pos:start="17:9" pos:end="17:15"><name pos:start="17:9" pos:end="17:15">int64_t</name></type> <name pos:start="17:17" pos:end="17:20">temp</name> <init pos:start="17:22" pos:end="17:34">= <expr pos:start="17:24" pos:end="17:34"><name pos:start="17:24" pos:end="17:29"><name pos:start="17:24" pos:end="17:26">buf</name><index pos:start="17:27" pos:end="17:29">[<expr pos:start="17:28" pos:end="17:28"><name pos:start="17:28" pos:end="17:28">i</name></expr>]</index></name> <operator pos:start="17:31" pos:end="17:32">&gt;&gt;</operator> <literal type="number" pos:start="17:34" pos:end="17:34">2</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:55"><expr pos:start="19:9" pos:end="19:54"><name pos:start="19:9" pos:end="19:12">temp</name>  <operator pos:start="19:15" pos:end="19:15">=</operator> <call pos:start="19:17" pos:end="19:54"><name pos:start="19:17" pos:end="19:30">av_clipl_int32</name><argument_list pos:start="19:31" pos:end="19:54">(<argument pos:start="19:32" pos:end="19:53"><expr pos:start="19:32" pos:end="19:53"><call pos:start="19:32" pos:end="19:48"><name pos:start="19:32" pos:end="19:36">MUL64</name><argument_list pos:start="19:37" pos:end="19:48">(<argument pos:start="19:38" pos:end="19:41"><expr pos:start="19:38" pos:end="19:41"><name pos:start="19:38" pos:end="19:41">temp</name></expr></argument>, <argument pos:start="19:44" pos:end="19:47"><expr pos:start="19:44" pos:end="19:47"><name pos:start="19:44" pos:end="19:47">temp</name></expr></argument>)</argument_list></call> <operator pos:start="19:50" pos:end="19:51">&lt;&lt;</operator> <literal type="number" pos:start="19:53" pos:end="19:53">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:45"><expr pos:start="21:9" pos:end="21:44"><name pos:start="21:9" pos:end="21:13">denom</name> <operator pos:start="21:15" pos:end="21:15">=</operator> <call pos:start="21:17" pos:end="21:44"><name pos:start="21:17" pos:end="21:30">av_clipl_int32</name><argument_list pos:start="21:31" pos:end="21:44">(<argument pos:start="21:32" pos:end="21:43"><expr pos:start="21:32" pos:end="21:43"><name pos:start="21:32" pos:end="21:36">denom</name> <operator pos:start="21:38" pos:end="21:38">+</operator> <name pos:start="21:40" pos:end="21:43">temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="27:5" pos:end="53:5"><if pos:start="27:5" pos:end="49:5">if <condition pos:start="27:8" pos:end="27:21">(<expr pos:start="27:9" pos:end="27:20"><name pos:start="27:9" pos:end="27:11">num</name> <operator pos:start="27:13" pos:end="27:14">&amp;&amp;</operator> <name pos:start="27:16" pos:end="27:20">denom</name></expr>)</condition> <block pos:start="27:23" pos:end="49:5">{<block_content pos:start="29:9" pos:end="47:48">

        <expr_stmt pos:start="29:9" pos:end="29:44"><expr pos:start="29:9" pos:end="29:43"><name pos:start="29:9" pos:end="29:13">bits1</name>   <operator pos:start="29:17" pos:end="29:17">=</operator> <call pos:start="29:19" pos:end="29:43"><name pos:start="29:19" pos:end="29:32">normalize_bits</name><argument_list pos:start="29:33" pos:end="29:43">(<argument pos:start="29:34" pos:end="29:36"><expr pos:start="29:34" pos:end="29:36"><name pos:start="29:34" pos:end="29:36">num</name></expr></argument>,   <argument pos:start="29:41" pos:end="29:42"><expr pos:start="29:41" pos:end="29:42"><literal type="number" pos:start="29:41" pos:end="29:42">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:44"><expr pos:start="31:9" pos:end="31:43"><name pos:start="31:9" pos:end="31:13">bits2</name>   <operator pos:start="31:17" pos:end="31:17">=</operator> <call pos:start="31:19" pos:end="31:43"><name pos:start="31:19" pos:end="31:32">normalize_bits</name><argument_list pos:start="31:33" pos:end="31:43">(<argument pos:start="31:34" pos:end="31:38"><expr pos:start="31:34" pos:end="31:38"><name pos:start="31:34" pos:end="31:38">denom</name></expr></argument>, <argument pos:start="31:41" pos:end="31:42"><expr pos:start="31:41" pos:end="31:42"><literal type="number" pos:start="31:41" pos:end="31:42">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:36"><expr pos:start="33:9" pos:end="33:35"><name pos:start="33:9" pos:end="33:11">num</name>     <operator pos:start="33:17" pos:end="33:17">=</operator> <name pos:start="33:19" pos:end="33:21">num</name> <operator pos:start="33:23" pos:end="33:24">&lt;&lt;</operator> <name pos:start="33:26" pos:end="33:30">bits1</name> <operator pos:start="33:32" pos:end="33:33">&gt;&gt;</operator> <literal type="number" pos:start="33:35" pos:end="33:35">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:24"><expr pos:start="35:9" pos:end="35:23"><name pos:start="35:9" pos:end="35:13">denom</name> <operator pos:start="35:15" pos:end="35:17">&lt;&lt;=</operator> <name pos:start="35:19" pos:end="35:23">bits2</name></expr>;</expr_stmt>



        <expr_stmt pos:start="39:9" pos:end="39:34"><expr pos:start="39:9" pos:end="39:33"><name pos:start="39:9" pos:end="39:13">bits2</name> <operator pos:start="39:15" pos:end="39:15">=</operator> <literal type="number" pos:start="39:17" pos:end="39:19">5</literal> <operator pos:start="39:19" pos:end="39:19">+</operator> <name pos:start="39:21" pos:end="39:25">bits1</name> <operator pos:start="39:27" pos:end="39:27">-</operator> <name pos:start="39:29" pos:end="39:33">bits2</name></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:32"><expr pos:start="41:9" pos:end="41:31"><name pos:start="41:9" pos:end="41:13">bits2</name> <operator pos:start="41:15" pos:end="41:15">=</operator> <call pos:start="41:17" pos:end="41:31"><name pos:start="41:17" pos:end="41:21">FFMAX</name><argument_list pos:start="41:22" pos:end="41:31">(<argument pos:start="41:23" pos:end="41:23"><expr pos:start="41:23" pos:end="41:23"><literal type="number" pos:start="41:23" pos:end="41:23">0</literal></expr></argument>, <argument pos:start="41:26" pos:end="41:30"><expr pos:start="41:26" pos:end="41:30"><name pos:start="41:26" pos:end="41:30">bits2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="45:9" pos:end="45:42"><expr pos:start="45:9" pos:end="45:41"><name pos:start="45:9" pos:end="45:12">gain</name> <operator pos:start="45:14" pos:end="45:14">=</operator> <operator pos:start="45:16" pos:end="45:16">(</operator><name pos:start="45:17" pos:end="45:19">num</name> <operator pos:start="45:21" pos:end="45:22">&gt;&gt;</operator> <literal type="number" pos:start="45:24" pos:end="45:24">1</literal><operator pos:start="45:25" pos:end="45:25">)</operator> <operator pos:start="45:27" pos:end="45:27">/</operator> <operator pos:start="45:29" pos:end="45:29">(</operator><name pos:start="45:30" pos:end="45:34">denom</name> <operator pos:start="45:36" pos:end="45:37">&gt;&gt;</operator> <literal type="number" pos:start="45:39" pos:end="45:40">16</literal><operator pos:start="45:41" pos:end="45:41">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:48"><expr pos:start="47:9" pos:end="47:47"><name pos:start="47:9" pos:end="47:12">gain</name> <operator pos:start="47:14" pos:end="47:14">=</operator> <call pos:start="47:16" pos:end="47:47"><name pos:start="47:16" pos:end="47:26">square_root</name><argument_list pos:start="47:27" pos:end="47:47">(<argument pos:start="47:28" pos:end="47:46"><expr pos:start="47:28" pos:end="47:46"><name pos:start="47:28" pos:end="47:31">gain</name> <operator pos:start="47:33" pos:end="47:34">&lt;&lt;</operator> <literal type="number" pos:start="47:36" pos:end="47:37">16</literal> <operator pos:start="47:39" pos:end="47:40">&gt;&gt;</operator> <name pos:start="47:42" pos:end="47:46">bits2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="49:7" pos:end="53:5">else <block pos:start="49:12" pos:end="53:5">{<block_content pos:start="51:9" pos:end="51:23">

        <expr_stmt pos:start="51:9" pos:end="51:23"><expr pos:start="51:9" pos:end="51:22"><name pos:start="51:9" pos:end="51:12">gain</name> <operator pos:start="51:14" pos:end="51:14">=</operator> <literal type="number" pos:start="51:16" pos:end="51:16">1</literal> <operator pos:start="51:18" pos:end="51:19">&lt;&lt;</operator> <literal type="number" pos:start="51:21" pos:end="51:22">12</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <for pos:start="57:5" pos:end="65:5">for <control pos:start="57:9" pos:end="57:38">(<init pos:start="57:10" pos:end="57:15"><expr pos:start="57:10" pos:end="57:14"><name pos:start="57:10" pos:end="57:10">i</name> <operator pos:start="57:12" pos:end="57:12">=</operator> <literal type="number" pos:start="57:14" pos:end="57:14">0</literal></expr>;</init> <condition pos:start="57:17" pos:end="57:33"><expr pos:start="57:17" pos:end="57:32"><name pos:start="57:17" pos:end="57:17">i</name> <operator pos:start="57:19" pos:end="57:19">&lt;</operator> <name pos:start="57:21" pos:end="57:32">SUBFRAME_LEN</name></expr>;</condition> <incr pos:start="57:35" pos:end="57:37"><expr pos:start="57:35" pos:end="57:37"><name pos:start="57:35" pos:end="57:35">i</name><operator pos:start="57:36" pos:end="57:37">++</operator></expr></incr>)</control> <block pos:start="57:40" pos:end="65:5">{<block_content pos:start="59:9" pos:end="63:53">

        <expr_stmt pos:start="59:9" pos:end="59:62"><expr pos:start="59:9" pos:end="59:61"><name pos:start="59:9" pos:end="59:18"><name pos:start="59:9" pos:end="59:9">p</name><operator pos:start="59:10" pos:end="59:11">-&gt;</operator><name pos:start="59:12" pos:end="59:18">pf_gain</name></name> <operator pos:start="59:20" pos:end="59:20">=</operator> <operator pos:start="59:22" pos:end="59:22">(</operator><literal type="number" pos:start="59:23" pos:end="59:24">15</literal> <operator pos:start="59:26" pos:end="59:26">*</operator> <name pos:start="59:28" pos:end="59:37"><name pos:start="59:28" pos:end="59:28">p</name><operator pos:start="59:29" pos:end="59:30">-&gt;</operator><name pos:start="59:31" pos:end="59:37">pf_gain</name></name> <operator pos:start="59:39" pos:end="59:39">+</operator> <name pos:start="59:41" pos:end="59:44">gain</name> <operator pos:start="59:46" pos:end="59:46">+</operator> <operator pos:start="59:48" pos:end="59:48">(</operator><literal type="number" pos:start="59:49" pos:end="59:49">1</literal> <operator pos:start="59:51" pos:end="59:52">&lt;&lt;</operator> <literal type="number" pos:start="59:54" pos:end="59:54">3</literal><operator pos:start="59:55" pos:end="59:55">)</operator><operator pos:start="59:56" pos:end="59:56">)</operator> <operator pos:start="59:58" pos:end="59:59">&gt;&gt;</operator> <literal type="number" pos:start="59:61" pos:end="59:61">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="63:53"><expr pos:start="61:9" pos:end="63:52"><name pos:start="61:9" pos:end="61:14"><name pos:start="61:9" pos:end="61:11">buf</name><index pos:start="61:12" pos:end="61:14">[<expr pos:start="61:13" pos:end="61:13"><name pos:start="61:13" pos:end="61:13">i</name></expr>]</index></name>     <operator pos:start="61:20" pos:end="61:20">=</operator> <call pos:start="61:22" pos:end="63:52"><name pos:start="61:22" pos:end="61:34">av_clip_int16</name><argument_list pos:start="61:35" pos:end="63:52">(<argument pos:start="61:36" pos:end="63:51"><expr pos:start="61:36" pos:end="63:51"><operator pos:start="61:36" pos:end="61:36">(</operator><name pos:start="61:37" pos:end="61:42"><name pos:start="61:37" pos:end="61:39">buf</name><index pos:start="61:40" pos:end="61:42">[<expr pos:start="61:41" pos:end="61:41"><name pos:start="61:41" pos:end="61:41">i</name></expr>]</index></name> <operator pos:start="61:44" pos:end="61:44">*</operator> <operator pos:start="61:46" pos:end="61:46">(</operator><name pos:start="61:47" pos:end="61:56"><name pos:start="61:47" pos:end="61:47">p</name><operator pos:start="61:48" pos:end="61:49">-&gt;</operator><name pos:start="61:50" pos:end="61:56">pf_gain</name></name> <operator pos:start="61:58" pos:end="61:58">+</operator> <operator pos:start="61:60" pos:end="61:60">(</operator><name pos:start="61:61" pos:end="61:70"><name pos:start="61:61" pos:end="61:61">p</name><operator pos:start="61:62" pos:end="61:63">-&gt;</operator><name pos:start="61:64" pos:end="61:70">pf_gain</name></name> <operator pos:start="61:72" pos:end="61:73">&gt;&gt;</operator> <literal type="number" pos:start="61:75" pos:end="61:75">4</literal><operator pos:start="61:76" pos:end="61:76">)</operator><operator pos:start="61:77" pos:end="61:77">)</operator> <operator pos:start="61:79" pos:end="61:79">+</operator>

                                   <operator pos:start="63:36" pos:end="63:36">(</operator><literal type="number" pos:start="63:37" pos:end="63:37">1</literal> <operator pos:start="63:39" pos:end="63:40">&lt;&lt;</operator> <literal type="number" pos:start="63:42" pos:end="63:43">10</literal><operator pos:start="63:44" pos:end="63:44">)</operator><operator pos:start="63:45" pos:end="63:45">)</operator> <operator pos:start="63:47" pos:end="63:48">&gt;&gt;</operator> <literal type="number" pos:start="63:50" pos:end="63:51">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
