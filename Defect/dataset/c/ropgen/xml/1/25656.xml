<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25656.c" pos:tabs="8"><function pos:start="1:1" pos:end="143:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">read_filter_params</name><parameter_list pos:start="1:30" pos:end="5:50">(<parameter pos:start="1:31" pos:end="1:49"><decl pos:start="1:31" pos:end="1:49"><type pos:start="1:31" pos:end="1:49"><name pos:start="1:31" pos:end="1:46">MLPDecodeContext</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:49">m</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:69"><decl pos:start="1:52" pos:end="1:69"><type pos:start="1:52" pos:end="1:69"><name pos:start="1:52" pos:end="1:64">GetBitContext</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:69">gbp</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:49"><decl pos:start="3:31" pos:end="3:49"><type pos:start="3:31" pos:end="3:49"><name pos:start="3:31" pos:end="3:38">unsigned</name> <name pos:start="3:40" pos:end="3:42">int</name></type> <name pos:start="3:44" pos:end="3:49">substr</name></decl></parameter>, <parameter pos:start="3:52" pos:end="3:71"><decl pos:start="3:52" pos:end="3:71"><type pos:start="3:52" pos:end="3:71"><name pos:start="3:52" pos:end="3:59">unsigned</name> <name pos:start="3:61" pos:end="3:63">int</name></type> <name pos:start="3:65" pos:end="3:71">channel</name></decl></parameter>,

                              <parameter pos:start="5:31" pos:end="5:49"><decl pos:start="5:31" pos:end="5:49"><type pos:start="5:31" pos:end="5:49"><name pos:start="5:31" pos:end="5:38">unsigned</name> <name pos:start="5:40" pos:end="5:42">int</name></type> <name pos:start="5:44" pos:end="5:49">filter</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="143:1">{<block_content pos:start="9:5" pos:end="141:13">

    <decl_stmt pos:start="9:5" pos:end="9:41"><decl pos:start="9:5" pos:end="9:40"><type pos:start="9:5" pos:end="9:15"><name pos:start="9:5" pos:end="9:13">SubStream</name> <modifier pos:start="9:15" pos:end="9:15">*</modifier></type><name pos:start="9:16" pos:end="9:16">s</name> <init pos:start="9:18" pos:end="9:40">= <expr pos:start="9:20" pos:end="9:40"><operator pos:start="9:20" pos:end="9:20">&amp;</operator><name pos:start="9:21" pos:end="9:40"><name pos:start="9:21" pos:end="9:21">m</name><operator pos:start="9:22" pos:end="9:23">-&gt;</operator><name pos:start="9:24" pos:end="9:32">substream</name><index pos:start="9:33" pos:end="9:40">[<expr pos:start="9:34" pos:end="9:39"><name pos:start="9:34" pos:end="9:39">substr</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:73"><decl pos:start="11:5" pos:end="11:72"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">FilterParams</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:20">fp</name> <init pos:start="11:22" pos:end="11:72">= <expr pos:start="11:24" pos:end="11:72"><operator pos:start="11:24" pos:end="11:24">&amp;</operator><name pos:start="11:25" pos:end="11:50"><name pos:start="11:25" pos:end="11:25">s</name><operator pos:start="11:26" pos:end="11:27">-&gt;</operator><name pos:start="11:28" pos:end="11:41">channel_params</name><index pos:start="11:42" pos:end="11:50">[<expr pos:start="11:43" pos:end="11:49"><name pos:start="11:43" pos:end="11:49">channel</name></expr>]</index></name><operator pos:start="11:51" pos:end="11:51">.</operator><name pos:start="11:52" pos:end="11:72"><name pos:start="11:52" pos:end="11:64">filter_params</name><index pos:start="11:65" pos:end="11:72">[<expr pos:start="11:66" pos:end="11:71"><name pos:start="11:66" pos:end="11:71">filter</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:65"><decl pos:start="13:5" pos:end="13:64"><type pos:start="13:5" pos:end="13:13"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:13">int</name></type> <name pos:start="13:15" pos:end="13:23">max_order</name> <init pos:start="13:25" pos:end="13:64">= <expr pos:start="13:27" pos:end="13:64"><ternary pos:start="13:27" pos:end="13:64"><condition pos:start="13:27" pos:end="13:34"><expr pos:start="13:27" pos:end="13:32"><name pos:start="13:27" pos:end="13:32">filter</name></expr> ?</condition><then pos:start="13:36" pos:end="13:48"> <expr pos:start="13:36" pos:end="13:48"><name pos:start="13:36" pos:end="13:48">MAX_IIR_ORDER</name></expr> </then><else pos:start="13:50" pos:end="13:64">: <expr pos:start="13:52" pos:end="13:64"><name pos:start="13:52" pos:end="13:64">MAX_FIR_ORDER</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:42"><decl pos:start="15:5" pos:end="15:41"><type pos:start="15:5" pos:end="15:14"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:14">char</name></type> <name pos:start="15:16" pos:end="15:20">fchar</name> <init pos:start="15:22" pos:end="15:41">= <expr pos:start="15:24" pos:end="15:41"><ternary pos:start="15:24" pos:end="15:41"><condition pos:start="15:24" pos:end="15:31"><expr pos:start="15:24" pos:end="15:29"><name pos:start="15:24" pos:end="15:29">filter</name></expr> ?</condition><then pos:start="15:33" pos:end="15:35"> <expr pos:start="15:33" pos:end="15:35"><literal type="char" pos:start="15:33" pos:end="15:35">'I'</literal></expr> </then><else pos:start="15:37" pos:end="15:41">: <expr pos:start="15:39" pos:end="15:41"><literal type="char" pos:start="15:39" pos:end="15:41">'F'</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:17"><decl pos:start="17:5" pos:end="17:9"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">i</name></decl>, <decl pos:start="17:12" pos:end="17:16"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:12" pos:end="17:16">order</name></decl>;</decl_stmt>



    <comment type="line" pos:start="21:5" pos:end="21:38">// Filter is 0 for FIR, 1 for IIR.</comment>

    <expr_stmt pos:start="23:5" pos:end="23:27"><expr pos:start="23:5" pos:end="23:26"><call pos:start="23:5" pos:end="23:26"><name pos:start="23:5" pos:end="23:14">av_assert0</name><argument_list pos:start="23:15" pos:end="23:26">(<argument pos:start="23:16" pos:end="23:25"><expr pos:start="23:16" pos:end="23:25"><name pos:start="23:16" pos:end="23:21">filter</name> <operator pos:start="23:23" pos:end="23:23">&lt;</operator> <literal type="number" pos:start="23:25" pos:end="23:25">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:49">(<expr pos:start="27:9" pos:end="27:48"><name pos:start="27:9" pos:end="27:42"><name pos:start="27:9" pos:end="27:9">m</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:25">filter_changed</name><index pos:start="27:26" pos:end="27:34">[<expr pos:start="27:27" pos:end="27:33"><name pos:start="27:27" pos:end="27:33">channel</name></expr>]</index><index pos:start="27:35" pos:end="27:42">[<expr pos:start="27:36" pos:end="27:41"><name pos:start="27:36" pos:end="27:41">filter</name></expr>]</index></name><operator pos:start="27:43" pos:end="27:44">++</operator> <operator pos:start="27:46" pos:end="27:46">&gt;</operator> <literal type="number" pos:start="27:48" pos:end="27:48">1</literal></expr>)</condition> <block pos:start="27:51" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:35">

        <expr_stmt pos:start="29:9" pos:end="29:90"><expr pos:start="29:9" pos:end="29:89"><call pos:start="29:9" pos:end="29:89"><name pos:start="29:9" pos:end="29:14">av_log</name><argument_list pos:start="29:15" pos:end="29:89">(<argument pos:start="29:16" pos:end="29:23"><expr pos:start="29:16" pos:end="29:23"><name pos:start="29:16" pos:end="29:23"><name pos:start="29:16" pos:end="29:16">m</name><operator pos:start="29:17" pos:end="29:18">-&gt;</operator><name pos:start="29:19" pos:end="29:23">avctx</name></name></expr></argument>, <argument pos:start="29:26" pos:end="29:37"><expr pos:start="29:26" pos:end="29:37"><name pos:start="29:26" pos:end="29:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="29:40" pos:end="29:88"><expr pos:start="29:40" pos:end="29:88"><literal type="string" pos:start="29:40" pos:end="29:88">"Filters may change only once per access unit.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:35">return <expr pos:start="31:16" pos:end="31:34"><name pos:start="31:16" pos:end="31:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:29"><expr pos:start="37:5" pos:end="37:28"><name pos:start="37:5" pos:end="37:9">order</name> <operator pos:start="37:11" pos:end="37:11">=</operator> <call pos:start="37:13" pos:end="37:28"><name pos:start="37:13" pos:end="37:20">get_bits</name><argument_list pos:start="37:21" pos:end="37:28">(<argument pos:start="37:22" pos:end="37:24"><expr pos:start="37:22" pos:end="37:24"><name pos:start="37:22" pos:end="37:24">gbp</name></expr></argument>, <argument pos:start="37:27" pos:end="37:27"><expr pos:start="37:27" pos:end="37:27"><literal type="number" pos:start="37:27" pos:end="37:27">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="49:5"><if pos:start="39:5" pos:end="49:5">if <condition pos:start="39:8" pos:end="39:26">(<expr pos:start="39:9" pos:end="39:25"><name pos:start="39:9" pos:end="39:13">order</name> <operator pos:start="39:15" pos:end="39:15">&gt;</operator> <name pos:start="39:17" pos:end="39:25">max_order</name></expr>)</condition> <block pos:start="39:28" pos:end="49:5">{<block_content pos:start="41:9" pos:end="47:35">

        <expr_stmt pos:start="41:9" pos:end="45:40"><expr pos:start="41:9" pos:end="45:39"><call pos:start="41:9" pos:end="45:39"><name pos:start="41:9" pos:end="41:14">av_log</name><argument_list pos:start="41:15" pos:end="45:39">(<argument pos:start="41:16" pos:end="41:23"><expr pos:start="41:16" pos:end="41:23"><name pos:start="41:16" pos:end="41:23"><name pos:start="41:16" pos:end="41:16">m</name><operator pos:start="41:17" pos:end="41:18">-&gt;</operator><name pos:start="41:19" pos:end="41:23">avctx</name></name></expr></argument>, <argument pos:start="41:26" pos:end="41:37"><expr pos:start="41:26" pos:end="41:37"><name pos:start="41:26" pos:end="41:37">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="43:16" pos:end="43:67"><expr pos:start="43:16" pos:end="43:67"><literal type="string" pos:start="43:16" pos:end="43:67">"%cIR filter order %d is greater than maximum %d.\n"</literal></expr></argument>,

               <argument pos:start="45:16" pos:end="45:20"><expr pos:start="45:16" pos:end="45:20"><name pos:start="45:16" pos:end="45:20">fchar</name></expr></argument>, <argument pos:start="45:23" pos:end="45:27"><expr pos:start="45:23" pos:end="45:27"><name pos:start="45:23" pos:end="45:27">order</name></expr></argument>, <argument pos:start="45:30" pos:end="45:38"><expr pos:start="45:30" pos:end="45:38"><name pos:start="45:30" pos:end="45:38">max_order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="47:9" pos:end="47:35">return <expr pos:start="47:16" pos:end="47:34"><name pos:start="47:16" pos:end="47:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:22"><expr pos:start="51:5" pos:end="51:21"><name pos:start="51:5" pos:end="51:13"><name pos:start="51:5" pos:end="51:6">fp</name><operator pos:start="51:7" pos:end="51:8">-&gt;</operator><name pos:start="51:9" pos:end="51:13">order</name></name> <operator pos:start="51:15" pos:end="51:15">=</operator> <name pos:start="51:17" pos:end="51:21">order</name></expr>;</expr_stmt>



    <if_stmt pos:start="55:5" pos:end="137:5"><if pos:start="55:5" pos:end="137:5">if <condition pos:start="55:8" pos:end="55:18">(<expr pos:start="55:9" pos:end="55:17"><name pos:start="55:9" pos:end="55:13">order</name> <operator pos:start="55:15" pos:end="55:15">&gt;</operator> <literal type="number" pos:start="55:17" pos:end="55:17">0</literal></expr>)</condition> <block pos:start="55:20" pos:end="137:5">{<block_content pos:start="57:9" pos:end="135:9">

        <decl_stmt pos:start="57:9" pos:end="57:67"><decl pos:start="57:9" pos:end="57:66"><type pos:start="57:9" pos:end="57:17"><name pos:start="57:9" pos:end="57:15">int32_t</name> <modifier pos:start="57:17" pos:end="57:17">*</modifier></type><name pos:start="57:18" pos:end="57:23">fcoeff</name> <init pos:start="57:25" pos:end="57:66">= <expr pos:start="57:27" pos:end="57:66"><name pos:start="57:27" pos:end="57:52"><name pos:start="57:27" pos:end="57:27">s</name><operator pos:start="57:28" pos:end="57:29">-&gt;</operator><name pos:start="57:30" pos:end="57:43">channel_params</name><index pos:start="57:44" pos:end="57:52">[<expr pos:start="57:45" pos:end="57:51"><name pos:start="57:45" pos:end="57:51">channel</name></expr>]</index></name><operator pos:start="57:53" pos:end="57:53">.</operator><name pos:start="57:54" pos:end="57:66"><name pos:start="57:54" pos:end="57:58">coeff</name><index pos:start="57:59" pos:end="57:66">[<expr pos:start="57:60" pos:end="57:65"><name pos:start="57:60" pos:end="57:65">filter</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="59:9" pos:end="59:36"><decl pos:start="59:9" pos:end="59:22"><type pos:start="59:9" pos:end="59:11"><name pos:start="59:9" pos:end="59:11">int</name></type> <name pos:start="59:13" pos:end="59:22">coeff_bits</name></decl>, <decl pos:start="59:25" pos:end="59:35"><type ref="prev" pos:start="59:9" pos:end="59:11"/><name pos:start="59:25" pos:end="59:35">coeff_shift</name></decl>;</decl_stmt>



        <expr_stmt pos:start="63:9" pos:end="63:37"><expr pos:start="63:9" pos:end="63:36"><name pos:start="63:9" pos:end="63:17"><name pos:start="63:9" pos:end="63:10">fp</name><operator pos:start="63:11" pos:end="63:12">-&gt;</operator><name pos:start="63:13" pos:end="63:17">shift</name></name> <operator pos:start="63:19" pos:end="63:19">=</operator> <call pos:start="63:21" pos:end="63:36"><name pos:start="63:21" pos:end="63:28">get_bits</name><argument_list pos:start="63:29" pos:end="63:36">(<argument pos:start="63:30" pos:end="63:32"><expr pos:start="63:30" pos:end="63:32"><name pos:start="63:30" pos:end="63:32">gbp</name></expr></argument>, <argument pos:start="63:35" pos:end="63:35"><expr pos:start="63:35" pos:end="63:35"><literal type="number" pos:start="63:35" pos:end="63:35">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="67:9" pos:end="67:39"><expr pos:start="67:9" pos:end="67:38"><name pos:start="67:9" pos:end="67:18">coeff_bits</name>  <operator pos:start="67:21" pos:end="67:21">=</operator> <call pos:start="67:23" pos:end="67:38"><name pos:start="67:23" pos:end="67:30">get_bits</name><argument_list pos:start="67:31" pos:end="67:38">(<argument pos:start="67:32" pos:end="67:34"><expr pos:start="67:32" pos:end="67:34"><name pos:start="67:32" pos:end="67:34">gbp</name></expr></argument>, <argument pos:start="67:37" pos:end="67:37"><expr pos:start="67:37" pos:end="67:37"><literal type="number" pos:start="67:37" pos:end="67:37">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:39"><expr pos:start="69:9" pos:end="69:38"><name pos:start="69:9" pos:end="69:19">coeff_shift</name> <operator pos:start="69:21" pos:end="69:21">=</operator> <call pos:start="69:23" pos:end="69:38"><name pos:start="69:23" pos:end="69:30">get_bits</name><argument_list pos:start="69:31" pos:end="69:38">(<argument pos:start="69:32" pos:end="69:34"><expr pos:start="69:32" pos:end="69:34"><name pos:start="69:32" pos:end="69:34">gbp</name></expr></argument>, <argument pos:start="69:37" pos:end="69:37"><expr pos:start="69:37" pos:end="69:37"><literal type="number" pos:start="69:37" pos:end="69:37">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="71:9" pos:end="81:9"><if pos:start="71:9" pos:end="81:9">if <condition pos:start="71:12" pos:end="71:46">(<expr pos:start="71:13" pos:end="71:45"><name pos:start="71:13" pos:end="71:42"><name pos:start="71:13" pos:end="71:22">coeff_bits</name> <argument_list type="generic" pos:start="71:24" pos:end="71:42">&lt; <argument pos:start="71:26" pos:end="71:40"><expr pos:start="71:26" pos:end="71:40"><literal type="number" pos:start="71:26" pos:end="71:26">1</literal> <operator pos:start="71:28" pos:end="71:29">||</operator> <name pos:start="71:31" pos:end="71:40">coeff_bits</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="71:44" pos:end="71:45">16</literal></expr>)</condition> <block pos:start="71:48" pos:end="81:9">{<block_content pos:start="73:13" pos:end="79:39">

            <expr_stmt pos:start="73:13" pos:end="77:26"><expr pos:start="73:13" pos:end="77:25"><call pos:start="73:13" pos:end="77:25"><name pos:start="73:13" pos:end="73:18">av_log</name><argument_list pos:start="73:19" pos:end="77:25">(<argument pos:start="73:20" pos:end="73:27"><expr pos:start="73:20" pos:end="73:27"><name pos:start="73:20" pos:end="73:27"><name pos:start="73:20" pos:end="73:20">m</name><operator pos:start="73:21" pos:end="73:22">-&gt;</operator><name pos:start="73:23" pos:end="73:27">avctx</name></name></expr></argument>, <argument pos:start="73:30" pos:end="73:41"><expr pos:start="73:30" pos:end="73:41"><name pos:start="73:30" pos:end="73:41">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="75:20" pos:end="75:71"><expr pos:start="75:20" pos:end="75:71"><literal type="string" pos:start="75:20" pos:end="75:71">"%cIR filter coeff_bits must be between 1 and 16.\n"</literal></expr></argument>,

                   <argument pos:start="77:20" pos:end="77:24"><expr pos:start="77:20" pos:end="77:24"><name pos:start="77:20" pos:end="77:24">fchar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="79:13" pos:end="79:39">return <expr pos:start="79:20" pos:end="79:38"><name pos:start="79:20" pos:end="79:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="83:9" pos:end="93:9"><if pos:start="83:9" pos:end="93:9">if <condition pos:start="83:12" pos:end="83:42">(<expr pos:start="83:13" pos:end="83:41"><name pos:start="83:13" pos:end="83:22">coeff_bits</name> <operator pos:start="83:24" pos:end="83:24">+</operator> <name pos:start="83:26" pos:end="83:36">coeff_shift</name> <operator pos:start="83:38" pos:end="83:38">&gt;</operator> <literal type="number" pos:start="83:40" pos:end="83:41">16</literal></expr>)</condition> <block pos:start="83:44" pos:end="93:9">{<block_content pos:start="85:13" pos:end="91:39">

            <expr_stmt pos:start="85:13" pos:end="89:26"><expr pos:start="85:13" pos:end="89:25"><call pos:start="85:13" pos:end="89:25"><name pos:start="85:13" pos:end="85:18">av_log</name><argument_list pos:start="85:19" pos:end="89:25">(<argument pos:start="85:20" pos:end="85:27"><expr pos:start="85:20" pos:end="85:27"><name pos:start="85:20" pos:end="85:27"><name pos:start="85:20" pos:end="85:20">m</name><operator pos:start="85:21" pos:end="85:22">-&gt;</operator><name pos:start="85:23" pos:end="85:27">avctx</name></name></expr></argument>, <argument pos:start="85:30" pos:end="85:41"><expr pos:start="85:30" pos:end="85:41"><name pos:start="85:30" pos:end="85:41">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="87:20" pos:end="87:92"><expr pos:start="87:20" pos:end="87:92"><literal type="string" pos:start="87:20" pos:end="87:92">"Sum of coeff_bits and coeff_shift for %cIR filter must be 16 or less.\n"</literal></expr></argument>,

                   <argument pos:start="89:20" pos:end="89:24"><expr pos:start="89:20" pos:end="89:24"><name pos:start="89:20" pos:end="89:24">fchar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="91:13" pos:end="91:39">return <expr pos:start="91:20" pos:end="91:38"><name pos:start="91:20" pos:end="91:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <for pos:start="97:9" pos:end="99:72">for <control pos:start="97:13" pos:end="97:35">(<init pos:start="97:14" pos:end="97:19"><expr pos:start="97:14" pos:end="97:18"><name pos:start="97:14" pos:end="97:14">i</name> <operator pos:start="97:16" pos:end="97:16">=</operator> <literal type="number" pos:start="97:18" pos:end="97:18">0</literal></expr>;</init> <condition pos:start="97:21" pos:end="97:30"><expr pos:start="97:21" pos:end="97:29"><name pos:start="97:21" pos:end="97:21">i</name> <operator pos:start="97:23" pos:end="97:23">&lt;</operator> <name pos:start="97:25" pos:end="97:29">order</name></expr>;</condition> <incr pos:start="97:32" pos:end="97:34"><expr pos:start="97:32" pos:end="97:34"><name pos:start="97:32" pos:end="97:32">i</name><operator pos:start="97:33" pos:end="97:34">++</operator></expr></incr>)</control><block type="pseudo" pos:start="99:13" pos:end="99:72"><block_content pos:start="99:13" pos:end="99:72">

            <expr_stmt pos:start="99:13" pos:end="99:72"><expr pos:start="99:13" pos:end="99:71"><name pos:start="99:13" pos:end="99:21"><name pos:start="99:13" pos:end="99:18">fcoeff</name><index pos:start="99:19" pos:end="99:21">[<expr pos:start="99:20" pos:end="99:20"><name pos:start="99:20" pos:end="99:20">i</name></expr>]</index></name> <operator pos:start="99:23" pos:end="99:23">=</operator> <call pos:start="99:25" pos:end="99:50"><name pos:start="99:25" pos:end="99:33">get_sbits</name><argument_list pos:start="99:34" pos:end="99:50">(<argument pos:start="99:35" pos:end="99:37"><expr pos:start="99:35" pos:end="99:37"><name pos:start="99:35" pos:end="99:37">gbp</name></expr></argument>, <argument pos:start="99:40" pos:end="99:49"><expr pos:start="99:40" pos:end="99:49"><name pos:start="99:40" pos:end="99:49">coeff_bits</name></expr></argument>)</argument_list></call> <operator pos:start="99:52" pos:end="99:52">*</operator> <operator pos:start="99:54" pos:end="99:54">(</operator><literal type="number" pos:start="99:55" pos:end="99:55">1</literal> <operator pos:start="99:57" pos:end="99:58">&lt;&lt;</operator> <name pos:start="99:60" pos:end="99:70">coeff_shift</name><operator pos:start="99:71" pos:end="99:71">)</operator></expr>;</expr_stmt></block_content></block></for>



        <if_stmt pos:start="103:9" pos:end="135:9"><if pos:start="103:9" pos:end="135:9">if <condition pos:start="103:12" pos:end="103:27">(<expr pos:start="103:13" pos:end="103:26"><call pos:start="103:13" pos:end="103:26"><name pos:start="103:13" pos:end="103:21">get_bits1</name><argument_list pos:start="103:22" pos:end="103:26">(<argument pos:start="103:23" pos:end="103:25"><expr pos:start="103:23" pos:end="103:25"><name pos:start="103:23" pos:end="103:25">gbp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="103:29" pos:end="135:9">{<block_content pos:start="105:13" pos:end="133:90">

            <decl_stmt pos:start="105:13" pos:end="105:40"><decl pos:start="105:13" pos:end="105:26"><type pos:start="105:13" pos:end="105:15"><name pos:start="105:13" pos:end="105:15">int</name></type> <name pos:start="105:17" pos:end="105:26">state_bits</name></decl>, <decl pos:start="105:29" pos:end="105:39"><type ref="prev" pos:start="105:13" pos:end="105:15"/><name pos:start="105:29" pos:end="105:39">state_shift</name></decl>;</decl_stmt>



            <if_stmt pos:start="109:13" pos:end="117:13"><if pos:start="109:13" pos:end="117:13">if <condition pos:start="109:16" pos:end="109:30">(<expr pos:start="109:17" pos:end="109:29"><name pos:start="109:17" pos:end="109:22">filter</name> <operator pos:start="109:24" pos:end="109:25">==</operator> <name pos:start="109:27" pos:end="109:29">FIR</name></expr>)</condition> <block pos:start="109:32" pos:end="117:13">{<block_content pos:start="111:17" pos:end="115:43">

                <expr_stmt pos:start="111:17" pos:end="113:65"><expr pos:start="111:17" pos:end="113:64"><call pos:start="111:17" pos:end="113:64"><name pos:start="111:17" pos:end="111:22">av_log</name><argument_list pos:start="111:23" pos:end="113:64">(<argument pos:start="111:24" pos:end="111:31"><expr pos:start="111:24" pos:end="111:31"><name pos:start="111:24" pos:end="111:31"><name pos:start="111:24" pos:end="111:24">m</name><operator pos:start="111:25" pos:end="111:26">-&gt;</operator><name pos:start="111:27" pos:end="111:31">avctx</name></name></expr></argument>, <argument pos:start="111:34" pos:end="111:45"><expr pos:start="111:34" pos:end="111:45"><name pos:start="111:34" pos:end="111:45">AV_LOG_ERROR</name></expr></argument>,

                       <argument pos:start="113:24" pos:end="113:63"><expr pos:start="113:24" pos:end="113:63"><literal type="string" pos:start="113:24" pos:end="113:63">"FIR filter has state data specified.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="115:17" pos:end="115:43">return <expr pos:start="115:24" pos:end="115:42"><name pos:start="115:24" pos:end="115:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="121:13" pos:end="121:43"><expr pos:start="121:13" pos:end="121:42"><name pos:start="121:13" pos:end="121:22">state_bits</name>  <operator pos:start="121:25" pos:end="121:25">=</operator> <call pos:start="121:27" pos:end="121:42"><name pos:start="121:27" pos:end="121:34">get_bits</name><argument_list pos:start="121:35" pos:end="121:42">(<argument pos:start="121:36" pos:end="121:38"><expr pos:start="121:36" pos:end="121:38"><name pos:start="121:36" pos:end="121:38">gbp</name></expr></argument>, <argument pos:start="121:41" pos:end="121:41"><expr pos:start="121:41" pos:end="121:41"><literal type="number" pos:start="121:41" pos:end="121:41">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="123:13" pos:end="123:43"><expr pos:start="123:13" pos:end="123:42"><name pos:start="123:13" pos:end="123:23">state_shift</name> <operator pos:start="123:25" pos:end="123:25">=</operator> <call pos:start="123:27" pos:end="123:42"><name pos:start="123:27" pos:end="123:34">get_bits</name><argument_list pos:start="123:35" pos:end="123:42">(<argument pos:start="123:36" pos:end="123:38"><expr pos:start="123:36" pos:end="123:38"><name pos:start="123:36" pos:end="123:38">gbp</name></expr></argument>, <argument pos:start="123:41" pos:end="123:41"><expr pos:start="123:41" pos:end="123:41"><literal type="number" pos:start="123:41" pos:end="123:41">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="127:13" pos:end="127:53">/* TODO: Check validity of state data. */</comment>



            <for pos:start="131:13" pos:end="133:90">for <control pos:start="131:17" pos:end="131:39">(<init pos:start="131:18" pos:end="131:23"><expr pos:start="131:18" pos:end="131:22"><name pos:start="131:18" pos:end="131:18">i</name> <operator pos:start="131:20" pos:end="131:20">=</operator> <literal type="number" pos:start="131:22" pos:end="131:22">0</literal></expr>;</init> <condition pos:start="131:25" pos:end="131:34"><expr pos:start="131:25" pos:end="131:33"><name pos:start="131:25" pos:end="131:25">i</name> <operator pos:start="131:27" pos:end="131:27">&lt;</operator> <name pos:start="131:29" pos:end="131:33">order</name></expr>;</condition> <incr pos:start="131:36" pos:end="131:38"><expr pos:start="131:36" pos:end="131:38"><name pos:start="131:36" pos:end="131:36">i</name><operator pos:start="131:37" pos:end="131:38">++</operator></expr></incr>)</control><block type="pseudo" pos:start="133:17" pos:end="133:90"><block_content pos:start="133:17" pos:end="133:90">

                <expr_stmt pos:start="133:17" pos:end="133:90"><expr pos:start="133:17" pos:end="133:89"><name pos:start="133:17" pos:end="133:28"><name pos:start="133:17" pos:end="133:18">fp</name><operator pos:start="133:19" pos:end="133:20">-&gt;</operator><name pos:start="133:21" pos:end="133:25">state</name><index pos:start="133:26" pos:end="133:28">[<expr pos:start="133:27" pos:end="133:27"><name pos:start="133:27" pos:end="133:27">i</name></expr>]</index></name> <operator pos:start="133:30" pos:end="133:30">=</operator> <ternary pos:start="133:32" pos:end="133:89"><condition pos:start="133:32" pos:end="133:43"><expr pos:start="133:32" pos:end="133:41"><name pos:start="133:32" pos:end="133:41">state_bits</name></expr> ?</condition><then pos:start="133:45" pos:end="133:85"> <expr pos:start="133:45" pos:end="133:85"><call pos:start="133:45" pos:end="133:70"><name pos:start="133:45" pos:end="133:53">get_sbits</name><argument_list pos:start="133:54" pos:end="133:70">(<argument pos:start="133:55" pos:end="133:57"><expr pos:start="133:55" pos:end="133:57"><name pos:start="133:55" pos:end="133:57">gbp</name></expr></argument>, <argument pos:start="133:60" pos:end="133:69"><expr pos:start="133:60" pos:end="133:69"><name pos:start="133:60" pos:end="133:69">state_bits</name></expr></argument>)</argument_list></call> <operator pos:start="133:72" pos:end="133:73">&lt;&lt;</operator> <name pos:start="133:75" pos:end="133:85">state_shift</name></expr> </then><else pos:start="133:87" pos:end="133:89">: <expr pos:start="133:89" pos:end="133:89"><literal type="number" pos:start="133:89" pos:end="133:89">0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="141:5" pos:end="141:13">return <expr pos:start="141:12" pos:end="141:12"><literal type="number" pos:start="141:12" pos:end="141:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
