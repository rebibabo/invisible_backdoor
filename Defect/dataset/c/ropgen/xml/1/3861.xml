<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3861.c" pos:tabs="8"><function pos:start="1:1" pos:end="74:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:30">disas_uncond_b_reg</name><parameter_list pos:start="1:31" pos:end="1:62">(<parameter pos:start="1:32" pos:end="1:46"><decl pos:start="1:32" pos:end="1:46"><type pos:start="1:32" pos:end="1:46"><name pos:start="1:32" pos:end="1:43">DisasContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:46">s</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:61"><decl pos:start="1:49" pos:end="1:61"><type pos:start="1:49" pos:end="1:61"><name pos:start="1:49" pos:end="1:56">uint32_t</name></type> <name pos:start="1:58" pos:end="1:61">insn</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="74:1">{<block_content pos:start="5:5" pos:end="71:44">

    <decl_stmt pos:start="5:5" pos:end="5:40"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:12">unsigned</name> <name pos:start="5:14" pos:end="5:16">int</name></type> <name pos:start="5:18" pos:end="5:20">opc</name></decl>, <decl pos:start="5:23" pos:end="5:25"><type ref="prev" pos:start="5:5" pos:end="5:16"/><name pos:start="5:23" pos:end="5:25">op2</name></decl>, <decl pos:start="5:28" pos:end="5:30"><type ref="prev" pos:start="5:5" pos:end="5:16"/><name pos:start="5:28" pos:end="5:30">op3</name></decl>, <decl pos:start="5:33" pos:end="5:34"><type ref="prev" pos:start="5:5" pos:end="5:16"/><name pos:start="5:33" pos:end="5:34">rn</name></decl>, <decl pos:start="5:37" pos:end="5:39"><type ref="prev" pos:start="5:5" pos:end="5:16"/><name pos:start="5:37" pos:end="5:39">op4</name></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:33"><expr pos:start="9:5" pos:end="9:32"><name pos:start="9:5" pos:end="9:7">opc</name> <operator pos:start="9:9" pos:end="9:9">=</operator> <call pos:start="9:11" pos:end="9:32"><name pos:start="9:11" pos:end="9:19">extract32</name><argument_list pos:start="9:20" pos:end="9:32">(<argument pos:start="9:21" pos:end="9:24"><expr pos:start="9:21" pos:end="9:24"><name pos:start="9:21" pos:end="9:24">insn</name></expr></argument>, <argument pos:start="9:27" pos:end="9:28"><expr pos:start="9:27" pos:end="9:28"><literal type="number" pos:start="9:27" pos:end="9:28">21</literal></expr></argument>, <argument pos:start="9:31" pos:end="9:31"><expr pos:start="9:31" pos:end="9:31"><literal type="number" pos:start="9:31" pos:end="9:31">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="11:5" pos:end="11:33"><expr pos:start="11:5" pos:end="11:32"><name pos:start="11:5" pos:end="11:7">op2</name> <operator pos:start="11:9" pos:end="11:9">=</operator> <call pos:start="11:11" pos:end="11:32"><name pos:start="11:11" pos:end="11:19">extract32</name><argument_list pos:start="11:20" pos:end="11:32">(<argument pos:start="11:21" pos:end="11:24"><expr pos:start="11:21" pos:end="11:24"><name pos:start="11:21" pos:end="11:24">insn</name></expr></argument>, <argument pos:start="11:27" pos:end="11:28"><expr pos:start="11:27" pos:end="11:28"><literal type="number" pos:start="11:27" pos:end="11:28">16</literal></expr></argument>, <argument pos:start="11:31" pos:end="11:31"><expr pos:start="11:31" pos:end="11:31"><literal type="number" pos:start="11:31" pos:end="11:31">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:33"><expr pos:start="13:5" pos:end="13:32"><name pos:start="13:5" pos:end="13:7">op3</name> <operator pos:start="13:9" pos:end="13:9">=</operator> <call pos:start="13:11" pos:end="13:32"><name pos:start="13:11" pos:end="13:19">extract32</name><argument_list pos:start="13:20" pos:end="13:32">(<argument pos:start="13:21" pos:end="13:24"><expr pos:start="13:21" pos:end="13:24"><name pos:start="13:21" pos:end="13:24">insn</name></expr></argument>, <argument pos:start="13:27" pos:end="13:28"><expr pos:start="13:27" pos:end="13:28"><literal type="number" pos:start="13:27" pos:end="13:28">10</literal></expr></argument>, <argument pos:start="13:31" pos:end="13:31"><expr pos:start="13:31" pos:end="13:31"><literal type="number" pos:start="13:31" pos:end="13:31">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:31"><expr pos:start="15:5" pos:end="15:30"><name pos:start="15:5" pos:end="15:6">rn</name> <operator pos:start="15:8" pos:end="15:8">=</operator> <call pos:start="15:10" pos:end="15:30"><name pos:start="15:10" pos:end="15:18">extract32</name><argument_list pos:start="15:19" pos:end="15:30">(<argument pos:start="15:20" pos:end="15:23"><expr pos:start="15:20" pos:end="15:23"><name pos:start="15:20" pos:end="15:23">insn</name></expr></argument>, <argument pos:start="15:26" pos:end="15:26"><expr pos:start="15:26" pos:end="15:26"><literal type="number" pos:start="15:26" pos:end="15:26">5</literal></expr></argument>, <argument pos:start="15:29" pos:end="15:29"><expr pos:start="15:29" pos:end="15:29"><literal type="number" pos:start="15:29" pos:end="15:29">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:32"><expr pos:start="17:5" pos:end="17:31"><name pos:start="17:5" pos:end="17:7">op4</name> <operator pos:start="17:9" pos:end="17:9">=</operator> <call pos:start="17:11" pos:end="17:31"><name pos:start="17:11" pos:end="17:19">extract32</name><argument_list pos:start="17:20" pos:end="17:31">(<argument pos:start="17:21" pos:end="17:24"><expr pos:start="17:21" pos:end="17:24"><name pos:start="17:21" pos:end="17:24">insn</name></expr></argument>, <argument pos:start="17:27" pos:end="17:27"><expr pos:start="17:27" pos:end="17:27"><literal type="number" pos:start="17:27" pos:end="17:27">0</literal></expr></argument>, <argument pos:start="17:30" pos:end="17:30"><expr pos:start="17:30" pos:end="17:30"><literal type="number" pos:start="17:30" pos:end="17:30">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="21:5" pos:end="26:5"><if pos:start="21:5" pos:end="26:5">if <condition pos:start="21:8" pos:end="21:48">(<expr pos:start="21:9" pos:end="21:47"><name pos:start="21:9" pos:end="21:11">op4</name> <operator pos:start="21:13" pos:end="21:14">!=</operator> <literal type="number" pos:start="21:16" pos:end="21:18">0x0</literal> <operator pos:start="21:20" pos:end="21:21">||</operator> <name pos:start="21:23" pos:end="21:25">op3</name> <operator pos:start="21:27" pos:end="21:28">!=</operator> <literal type="number" pos:start="21:30" pos:end="21:32">0x0</literal> <operator pos:start="21:34" pos:end="21:35">||</operator> <name pos:start="21:37" pos:end="21:39">op2</name> <operator pos:start="21:41" pos:end="21:42">!=</operator> <literal type="number" pos:start="21:44" pos:end="21:47">0x1f</literal></expr>)</condition> <block pos:start="21:50" pos:end="26:5">{<block_content pos:start="23:9" pos:end="23:32">

        <expr_stmt pos:start="23:9" pos:end="23:32"><expr pos:start="23:9" pos:end="23:31"><call pos:start="23:9" pos:end="23:31"><name pos:start="23:9" pos:end="23:28">unallocated_encoding</name><argument_list pos:start="23:29" pos:end="23:31">(<argument pos:start="23:30" pos:end="23:30"><expr pos:start="23:30" pos:end="23:30"><name pos:start="23:30" pos:end="23:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    </block_content>}</block></if></if_stmt>



    <switch pos:start="30:5" pos:end="67:5">switch <condition pos:start="30:12" pos:end="30:16">(<expr pos:start="30:13" pos:end="30:15"><name pos:start="30:13" pos:end="30:15">opc</name></expr>)</condition> <block pos:start="30:18" pos:end="67:5">{<block_content pos:start="32:5" pos:end="64:32">

    <case pos:start="32:5" pos:end="32:11">case <expr pos:start="32:10" pos:end="32:10"><literal type="number" pos:start="32:10" pos:end="32:10">0</literal></expr>:</case> <comment type="block" pos:start="32:13" pos:end="32:20">/* BR */</comment>

    <case pos:start="34:5" pos:end="34:11">case <expr pos:start="34:10" pos:end="34:10"><literal type="number" pos:start="34:10" pos:end="34:10">2</literal></expr>:</case> <comment type="block" pos:start="34:13" pos:end="34:21">/* RET */</comment>

        <break pos:start="36:9" pos:end="36:14">break;</break>

    <case pos:start="38:5" pos:end="38:11">case <expr pos:start="38:10" pos:end="38:10"><literal type="number" pos:start="38:10" pos:end="38:10">1</literal></expr>:</case> <comment type="block" pos:start="38:13" pos:end="38:21">/* BLR */</comment>

        <expr_stmt pos:start="40:9" pos:end="40:48"><expr pos:start="40:9" pos:end="40:47"><call pos:start="40:9" pos:end="40:47"><name pos:start="40:9" pos:end="40:24">tcg_gen_movi_i64</name><argument_list pos:start="40:25" pos:end="40:47">(<argument pos:start="40:26" pos:end="40:39"><expr pos:start="40:26" pos:end="40:39"><call pos:start="40:26" pos:end="40:39"><name pos:start="40:26" pos:end="40:32">cpu_reg</name><argument_list pos:start="40:33" pos:end="40:39">(<argument pos:start="40:34" pos:end="40:34"><expr pos:start="40:34" pos:end="40:34"><name pos:start="40:34" pos:end="40:34">s</name></expr></argument>, <argument pos:start="40:37" pos:end="40:38"><expr pos:start="40:37" pos:end="40:38"><literal type="number" pos:start="40:37" pos:end="40:38">30</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="40:42" pos:end="40:46"><expr pos:start="40:42" pos:end="40:46"><name pos:start="40:42" pos:end="40:46"><name pos:start="40:42" pos:end="40:42">s</name><operator pos:start="40:43" pos:end="40:44">-&gt;</operator><name pos:start="40:45" pos:end="40:46">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="42:9" pos:end="42:14">break;</break>

    <case pos:start="44:5" pos:end="44:11">case <expr pos:start="44:10" pos:end="44:10"><literal type="number" pos:start="44:10" pos:end="44:10">4</literal></expr>:</case> <comment type="block" pos:start="44:13" pos:end="44:22">/* ERET */</comment>




    <case pos:start="49:5" pos:end="49:11">case <expr pos:start="49:10" pos:end="49:10"><literal type="number" pos:start="49:10" pos:end="49:10">5</literal></expr>:</case> <comment type="block" pos:start="49:13" pos:end="49:22">/* DRPS */</comment>

        <if_stmt pos:start="51:9" pos:end="59:9"><if pos:start="51:9" pos:end="55:9">if <condition pos:start="51:12" pos:end="51:23">(<expr pos:start="51:13" pos:end="51:22"><name pos:start="51:13" pos:end="51:14">rn</name> <operator pos:start="51:16" pos:end="51:17">!=</operator> <literal type="number" pos:start="51:19" pos:end="51:22">0x1f</literal></expr>)</condition> <block pos:start="51:25" pos:end="55:9">{<block_content pos:start="53:13" pos:end="53:36">

            <expr_stmt pos:start="53:13" pos:end="53:36"><expr pos:start="53:13" pos:end="53:35"><call pos:start="53:13" pos:end="53:35"><name pos:start="53:13" pos:end="53:32">unallocated_encoding</name><argument_list pos:start="53:33" pos:end="53:35">(<argument pos:start="53:34" pos:end="53:34"><expr pos:start="53:34" pos:end="53:34"><name pos:start="53:34" pos:end="53:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="55:11" pos:end="59:9">else <block pos:start="55:16" pos:end="59:9">{<block_content pos:start="57:13" pos:end="57:42">

            <expr_stmt pos:start="57:13" pos:end="57:42"><expr pos:start="57:13" pos:end="57:41"><call pos:start="57:13" pos:end="57:41"><name pos:start="57:13" pos:end="57:32">unsupported_encoding</name><argument_list pos:start="57:33" pos:end="57:41">(<argument pos:start="57:34" pos:end="57:34"><expr pos:start="57:34" pos:end="57:34"><name pos:start="57:34" pos:end="57:34">s</name></expr></argument>, <argument pos:start="57:37" pos:end="57:40"><expr pos:start="57:37" pos:end="57:40"><name pos:start="57:37" pos:end="57:40">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>


    <default pos:start="62:5" pos:end="62:12">default:</default>

        <expr_stmt pos:start="64:9" pos:end="64:32"><expr pos:start="64:9" pos:end="64:31"><call pos:start="64:9" pos:end="64:31"><name pos:start="64:9" pos:end="64:28">unallocated_encoding</name><argument_list pos:start="64:29" pos:end="64:31">(<argument pos:start="64:30" pos:end="64:30"><expr pos:start="64:30" pos:end="64:30"><name pos:start="64:30" pos:end="64:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    </block_content>}</block></switch>



    <expr_stmt pos:start="71:5" pos:end="71:44"><expr pos:start="71:5" pos:end="71:43"><call pos:start="71:5" pos:end="71:43"><name pos:start="71:5" pos:end="71:19">tcg_gen_mov_i64</name><argument_list pos:start="71:20" pos:end="71:43">(<argument pos:start="71:21" pos:end="71:26"><expr pos:start="71:21" pos:end="71:26"><name pos:start="71:21" pos:end="71:26">cpu_pc</name></expr></argument>, <argument pos:start="71:29" pos:end="71:42"><expr pos:start="71:29" pos:end="71:42"><call pos:start="71:29" pos:end="71:42"><name pos:start="71:29" pos:end="71:35">cpu_reg</name><argument_list pos:start="71:36" pos:end="71:42">(<argument pos:start="71:37" pos:end="71:37"><expr pos:start="71:37" pos:end="71:37"><name pos:start="71:37" pos:end="71:37">s</name></expr></argument>, <argument pos:start="71:40" pos:end="71:41"><expr pos:start="71:40" pos:end="71:41"><name pos:start="71:40" pos:end="71:41">rn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


</block_content>}</block></function></unit>
