<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/1654.c" pos:tabs="8"><function pos:start="1:1" pos:end="29:1"><type pos:start="1:1" pos:end="1:12"><name pos:start="1:1" pos:end="1:7">av_cold</name> <name pos:start="1:9" pos:end="1:12">void</name></type> <name pos:start="1:14" pos:end="1:36">ff_fmt_convert_init_arm</name><parameter_list pos:start="1:37" pos:end="1:81">(<parameter pos:start="1:38" pos:end="1:57"><decl pos:start="1:38" pos:end="1:57"><type pos:start="1:38" pos:end="1:57"><name pos:start="1:38" pos:end="1:54">FmtConvertContext</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:57">c</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:80"><decl pos:start="1:60" pos:end="1:80"><type pos:start="1:60" pos:end="1:80"><name pos:start="1:60" pos:end="1:73">AVCodecContext</name> <modifier pos:start="1:75" pos:end="1:75">*</modifier></type><name pos:start="1:76" pos:end="1:80">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="29:1">{<block_content pos:start="5:5" pos:end="27:5">

    <decl_stmt pos:start="5:5" pos:end="5:39"><decl pos:start="5:5" pos:end="5:38"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:17">cpu_flags</name> <init pos:start="5:19" pos:end="5:38">= <expr pos:start="5:21" pos:end="5:38"><call pos:start="5:21" pos:end="5:38"><name pos:start="5:21" pos:end="5:36">av_get_cpu_flags</name><argument_list pos:start="5:37" pos:end="5:38">()</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="19:5"><if pos:start="9:5" pos:end="19:5">if <condition pos:start="9:8" pos:end="9:28">(<expr pos:start="9:9" pos:end="9:27"><call pos:start="9:9" pos:end="9:27"><name pos:start="9:9" pos:end="9:16">have_vfp</name><argument_list pos:start="9:17" pos:end="9:27">(<argument pos:start="9:18" pos:end="9:26"><expr pos:start="9:18" pos:end="9:26"><name pos:start="9:18" pos:end="9:26">cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="9:30" pos:end="19:5">{<block_content pos:start="11:9" pos:end="17:9">

        <if_stmt pos:start="11:9" pos:end="17:9"><if pos:start="11:9" pos:end="17:9">if <condition pos:start="11:12" pos:end="11:35">(<expr pos:start="11:13" pos:end="11:34"><operator pos:start="11:13" pos:end="11:13">!</operator><call pos:start="11:14" pos:end="11:34"><name pos:start="11:14" pos:end="11:23">have_vfpv3</name><argument_list pos:start="11:24" pos:end="11:34">(<argument pos:start="11:25" pos:end="11:33"><expr pos:start="11:25" pos:end="11:33"><name pos:start="11:25" pos:end="11:33">cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="11:37" pos:end="17:9">{<block_content pos:start="13:13" pos:end="15:78">

            <expr_stmt pos:start="13:13" pos:end="13:78"><expr pos:start="13:13" pos:end="13:77"><name pos:start="13:13" pos:end="13:41"><name pos:start="13:13" pos:end="13:13">c</name><operator pos:start="13:14" pos:end="13:15">-&gt;</operator><name pos:start="13:16" pos:end="13:41">int32_to_float_fmul_scalar</name></name> <operator pos:start="13:43" pos:end="13:43">=</operator> <name pos:start="13:45" pos:end="13:77">ff_int32_to_float_fmul_scalar_vfp</name></expr>;</expr_stmt>

            <expr_stmt pos:start="15:13" pos:end="15:78"><expr pos:start="15:13" pos:end="15:77"><name pos:start="15:13" pos:end="15:41"><name pos:start="15:13" pos:end="15:13">c</name><operator pos:start="15:14" pos:end="15:15">-&gt;</operator><name pos:start="15:16" pos:end="15:41">int32_to_float_fmul_array8</name></name> <operator pos:start="15:43" pos:end="15:43">=</operator> <name pos:start="15:45" pos:end="15:77">ff_int32_to_float_fmul_array8_vfp</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="23:5" pos:end="27:5"><if pos:start="23:5" pos:end="27:5">if <condition pos:start="23:8" pos:end="23:29">(<expr pos:start="23:9" pos:end="23:28"><call pos:start="23:9" pos:end="23:28"><name pos:start="23:9" pos:end="23:17">have_neon</name><argument_list pos:start="23:18" pos:end="23:28">(<argument pos:start="23:19" pos:end="23:27"><expr pos:start="23:19" pos:end="23:27"><name pos:start="23:19" pos:end="23:27">cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="23:31" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:75">

        <expr_stmt pos:start="25:9" pos:end="25:75"><expr pos:start="25:9" pos:end="25:74"><name pos:start="25:9" pos:end="25:37"><name pos:start="25:9" pos:end="25:9">c</name><operator pos:start="25:10" pos:end="25:11">-&gt;</operator><name pos:start="25:12" pos:end="25:37">int32_to_float_fmul_scalar</name></name> <operator pos:start="25:39" pos:end="25:39">=</operator> <name pos:start="25:41" pos:end="25:74">ff_int32_to_float_fmul_scalar_neon</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
