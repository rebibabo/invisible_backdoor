<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/16374.c" pos:tabs="8"><function pos:start="1:1" pos:end="51:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:42">qdev_prop_set_globals_for_type</name><parameter_list pos:start="1:43" pos:end="3:64">(<parameter pos:start="1:44" pos:end="1:59"><decl pos:start="1:44" pos:end="1:59"><type pos:start="1:44" pos:end="1:59"><name pos:start="1:44" pos:end="1:54">DeviceState</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:59">dev</name></decl></parameter>,

                                           <parameter pos:start="3:44" pos:end="3:63"><decl pos:start="3:44" pos:end="3:63"><type pos:start="3:44" pos:end="3:63"><specifier pos:start="3:44" pos:end="3:48">const</specifier> <name pos:start="3:50" pos:end="3:53">char</name> <modifier pos:start="3:55" pos:end="3:55">*</modifier></type><name pos:start="3:56" pos:end="3:63">typename</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="51:1">{<block_content pos:start="7:5" pos:end="49:5">

    <decl_stmt pos:start="7:5" pos:end="7:13"><decl pos:start="7:5" pos:end="7:12"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:9">GList</name> <modifier pos:start="7:11" pos:end="7:11">*</modifier></type><name pos:start="7:12" pos:end="7:12">l</name></decl>;</decl_stmt>



    <for pos:start="11:5" pos:end="49:5">for <control pos:start="11:9" pos:end="11:42">(<init pos:start="11:10" pos:end="11:26"><expr pos:start="11:10" pos:end="11:25"><name pos:start="11:10" pos:end="11:10">l</name> <operator pos:start="11:12" pos:end="11:12">=</operator> <name pos:start="11:14" pos:end="11:25">global_props</name></expr>;</init> <condition pos:start="11:28" pos:end="11:29"><expr pos:start="11:28" pos:end="11:28"><name pos:start="11:28" pos:end="11:28">l</name></expr>;</condition> <incr pos:start="11:31" pos:end="11:41"><expr pos:start="11:31" pos:end="11:41"><name pos:start="11:31" pos:end="11:31">l</name> <operator pos:start="11:33" pos:end="11:33">=</operator> <name pos:start="11:35" pos:end="11:41"><name pos:start="11:35" pos:end="11:35">l</name><operator pos:start="11:36" pos:end="11:37">-&gt;</operator><name pos:start="11:38" pos:end="11:41">next</name></name></expr></incr>)</control> <block pos:start="11:44" pos:end="49:5">{<block_content pos:start="13:9" pos:end="47:9">

        <decl_stmt pos:start="13:9" pos:end="13:39"><decl pos:start="13:9" pos:end="13:38"><type pos:start="13:9" pos:end="13:24"><name pos:start="13:9" pos:end="13:22">GlobalProperty</name> <modifier pos:start="13:24" pos:end="13:24">*</modifier></type><name pos:start="13:25" pos:end="13:28">prop</name> <init pos:start="13:30" pos:end="13:38">= <expr pos:start="13:32" pos:end="13:38"><name pos:start="13:32" pos:end="13:38"><name pos:start="13:32" pos:end="13:32">l</name><operator pos:start="13:33" pos:end="13:34">-&gt;</operator><name pos:start="13:35" pos:end="13:38">data</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="15:9" pos:end="15:26"><decl pos:start="15:9" pos:end="15:25"><type pos:start="15:9" pos:end="15:15"><name pos:start="15:9" pos:end="15:13">Error</name> <modifier pos:start="15:15" pos:end="15:15">*</modifier></type><name pos:start="15:16" pos:end="15:18">err</name> <init pos:start="15:20" pos:end="15:25">= <expr pos:start="15:22" pos:end="15:25"><name pos:start="15:22" pos:end="15:25">NULL</name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="19:9" pos:end="23:9"><if pos:start="19:9" pos:end="23:9">if <condition pos:start="19:12" pos:end="19:48">(<expr pos:start="19:13" pos:end="19:47"><call pos:start="19:13" pos:end="19:42"><name pos:start="19:13" pos:end="19:18">strcmp</name><argument_list pos:start="19:19" pos:end="19:42">(<argument pos:start="19:20" pos:end="19:27"><expr pos:start="19:20" pos:end="19:27"><name pos:start="19:20" pos:end="19:27">typename</name></expr></argument>, <argument pos:start="19:30" pos:end="19:41"><expr pos:start="19:30" pos:end="19:41"><name pos:start="19:30" pos:end="19:41"><name pos:start="19:30" pos:end="19:33">prop</name><operator pos:start="19:34" pos:end="19:35">-&gt;</operator><name pos:start="19:36" pos:end="19:41">driver</name></name></expr></argument>)</argument_list></call> <operator pos:start="19:44" pos:end="19:45">!=</operator> <literal type="number" pos:start="19:47" pos:end="19:47">0</literal></expr>)</condition> <block pos:start="19:50" pos:end="23:9">{<block_content pos:start="21:13" pos:end="21:21">

            <continue pos:start="21:13" pos:end="21:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:26"><expr pos:start="25:9" pos:end="25:25"><name pos:start="25:9" pos:end="25:18"><name pos:start="25:9" pos:end="25:12">prop</name><operator pos:start="25:13" pos:end="25:14">-&gt;</operator><name pos:start="25:15" pos:end="25:18">used</name></name> <operator pos:start="25:20" pos:end="25:20">=</operator> <name pos:start="25:22" pos:end="25:25">true</name></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:78"><expr pos:start="27:9" pos:end="27:77"><call pos:start="27:9" pos:end="27:77"><name pos:start="27:9" pos:end="27:29">object_property_parse</name><argument_list pos:start="27:30" pos:end="27:77">(<argument pos:start="27:31" pos:end="27:41"><expr pos:start="27:31" pos:end="27:41"><call pos:start="27:31" pos:end="27:41"><name pos:start="27:31" pos:end="27:36">OBJECT</name><argument_list pos:start="27:37" pos:end="27:41">(<argument pos:start="27:38" pos:end="27:40"><expr pos:start="27:38" pos:end="27:40"><name pos:start="27:38" pos:end="27:40">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="27:44" pos:end="27:54"><expr pos:start="27:44" pos:end="27:54"><name pos:start="27:44" pos:end="27:54"><name pos:start="27:44" pos:end="27:47">prop</name><operator pos:start="27:48" pos:end="27:49">-&gt;</operator><name pos:start="27:50" pos:end="27:54">value</name></name></expr></argument>, <argument pos:start="27:57" pos:end="27:70"><expr pos:start="27:57" pos:end="27:70"><name pos:start="27:57" pos:end="27:70"><name pos:start="27:57" pos:end="27:60">prop</name><operator pos:start="27:61" pos:end="27:62">-&gt;</operator><name pos:start="27:63" pos:end="27:70">property</name></name></expr></argument>, <argument pos:start="27:73" pos:end="27:76"><expr pos:start="27:73" pos:end="27:76"><operator pos:start="27:73" pos:end="27:73">&amp;</operator><name pos:start="27:74" pos:end="27:76">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="29:9" pos:end="47:9"><if pos:start="29:9" pos:end="47:9">if <condition pos:start="29:12" pos:end="29:24">(<expr pos:start="29:13" pos:end="29:23"><name pos:start="29:13" pos:end="29:15">err</name> <operator pos:start="29:17" pos:end="29:18">!=</operator> <name pos:start="29:20" pos:end="29:23">NULL</name></expr>)</condition> <block pos:start="29:26" pos:end="47:9">{<block_content pos:start="31:13" pos:end="45:13">

            <expr_stmt pos:start="31:13" pos:end="33:69"><expr pos:start="31:13" pos:end="33:68"><call pos:start="31:13" pos:end="33:68"><name pos:start="31:13" pos:end="31:25">error_prepend</name><argument_list pos:start="31:26" pos:end="33:68">(<argument pos:start="31:27" pos:end="31:30"><expr pos:start="31:27" pos:end="31:30"><operator pos:start="31:27" pos:end="31:27">&amp;</operator><name pos:start="31:28" pos:end="31:30">err</name></expr></argument>, <argument pos:start="31:33" pos:end="31:63"><expr pos:start="31:33" pos:end="31:63"><literal type="string" pos:start="31:33" pos:end="31:63">"can't apply global %s.%s=%s: "</literal></expr></argument>,

                          <argument pos:start="33:27" pos:end="33:38"><expr pos:start="33:27" pos:end="33:38"><name pos:start="33:27" pos:end="33:38"><name pos:start="33:27" pos:end="33:30">prop</name><operator pos:start="33:31" pos:end="33:32">-&gt;</operator><name pos:start="33:33" pos:end="33:38">driver</name></name></expr></argument>, <argument pos:start="33:41" pos:end="33:54"><expr pos:start="33:41" pos:end="33:54"><name pos:start="33:41" pos:end="33:54"><name pos:start="33:41" pos:end="33:44">prop</name><operator pos:start="33:45" pos:end="33:46">-&gt;</operator><name pos:start="33:47" pos:end="33:54">property</name></name></expr></argument>, <argument pos:start="33:57" pos:end="33:67"><expr pos:start="33:57" pos:end="33:67"><name pos:start="33:57" pos:end="33:67"><name pos:start="33:57" pos:end="33:60">prop</name><operator pos:start="33:61" pos:end="33:62">-&gt;</operator><name pos:start="33:63" pos:end="33:67">value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="35:13" pos:end="45:13"><if pos:start="35:13" pos:end="39:13">if <condition pos:start="35:16" pos:end="35:47">(<expr pos:start="35:17" pos:end="35:46"><operator pos:start="35:17" pos:end="35:17">!</operator><name pos:start="35:18" pos:end="35:32"><name pos:start="35:18" pos:end="35:20">dev</name><operator pos:start="35:21" pos:end="35:22">-&gt;</operator><name pos:start="35:23" pos:end="35:32">hotplugged</name></name> <operator pos:start="35:34" pos:end="35:35">&amp;&amp;</operator> <name pos:start="35:37" pos:end="35:46"><name pos:start="35:37" pos:end="35:40">prop</name><operator pos:start="35:41" pos:end="35:42">-&gt;</operator><name pos:start="35:43" pos:end="35:46">errp</name></name></expr>)</condition> <block pos:start="35:49" pos:end="39:13">{<block_content pos:start="37:17" pos:end="37:49">

                <expr_stmt pos:start="37:17" pos:end="37:49"><expr pos:start="37:17" pos:end="37:48"><call pos:start="37:17" pos:end="37:48"><name pos:start="37:17" pos:end="37:31">error_propagate</name><argument_list pos:start="37:32" pos:end="37:48">(<argument pos:start="37:33" pos:end="37:42"><expr pos:start="37:33" pos:end="37:42"><name pos:start="37:33" pos:end="37:42"><name pos:start="37:33" pos:end="37:36">prop</name><operator pos:start="37:37" pos:end="37:38">-&gt;</operator><name pos:start="37:39" pos:end="37:42">errp</name></name></expr></argument>, <argument pos:start="37:45" pos:end="37:47"><expr pos:start="37:45" pos:end="37:47"><name pos:start="37:45" pos:end="37:47">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="39:15" pos:end="45:13">else <block pos:start="39:20" pos:end="45:13">{<block_content pos:start="41:17" pos:end="43:37">

                <expr_stmt pos:start="41:17" pos:end="41:44"><expr pos:start="41:17" pos:end="41:43"><call pos:start="41:17" pos:end="41:43"><name pos:start="41:17" pos:end="41:22">assert</name><argument_list pos:start="41:23" pos:end="41:43">(<argument pos:start="41:24" pos:end="41:42"><expr pos:start="41:24" pos:end="41:42"><name pos:start="41:24" pos:end="41:42"><name pos:start="41:24" pos:end="41:27">prop</name><operator pos:start="41:28" pos:end="41:29">-&gt;</operator><name pos:start="41:30" pos:end="41:42">user_provided</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="43:17" pos:end="43:37"><expr pos:start="43:17" pos:end="43:36"><call pos:start="43:17" pos:end="43:36"><name pos:start="43:17" pos:end="43:31">warn_report_err</name><argument_list pos:start="43:32" pos:end="43:36">(<argument pos:start="43:33" pos:end="43:35"><expr pos:start="43:33" pos:end="43:35"><name pos:start="43:33" pos:end="43:35">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
