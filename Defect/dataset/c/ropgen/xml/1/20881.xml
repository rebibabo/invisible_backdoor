<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20881.c" pos:tabs="8"><function pos:start="1:1" pos:end="159:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">spapr_phb_init</name><parameter_list pos:start="1:26" pos:end="1:42">(<parameter pos:start="1:27" pos:end="1:41"><decl pos:start="1:27" pos:end="1:41"><type pos:start="1:27" pos:end="1:40"><name pos:start="1:27" pos:end="1:38">SysBusDevice</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:41">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="159:1">{<block_content pos:start="5:5" pos:end="157:13">

    <decl_stmt pos:start="5:5" pos:end="5:51"><decl pos:start="5:5" pos:end="5:50"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">sPAPRPHBState</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:23">sphb</name> <init pos:start="5:25" pos:end="5:50">= <expr pos:start="5:27" pos:end="5:50"><call pos:start="5:27" pos:end="5:50"><name pos:start="5:27" pos:end="5:47">SPAPR_PCI_HOST_BRIDGE</name><argument_list pos:start="5:48" pos:end="5:50">(<argument pos:start="5:49" pos:end="5:49"><expr pos:start="5:49" pos:end="5:49"><name pos:start="5:49" pos:end="5:49">s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:43"><decl pos:start="7:5" pos:end="7:42"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">PCIHostState</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:21">phb</name> <init pos:start="7:23" pos:end="7:42">= <expr pos:start="7:25" pos:end="7:42"><call pos:start="7:25" pos:end="7:42"><name pos:start="7:25" pos:end="7:39">PCI_HOST_BRIDGE</name><argument_list pos:start="7:40" pos:end="7:42">(<argument pos:start="7:41" pos:end="7:41"><expr pos:start="7:41" pos:end="7:41"><name pos:start="7:41" pos:end="7:41">s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">char</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:17">namebuf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:10"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:16"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:10">PCIBus</name> <modifier pos:start="13:12" pos:end="13:12">*</modifier></type><name pos:start="13:13" pos:end="13:15">bus</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:66"><expr pos:start="17:5" pos:end="17:65"><name pos:start="17:5" pos:end="17:19"><name pos:start="17:5" pos:end="17:8">sphb</name><operator pos:start="17:9" pos:end="17:10">-&gt;</operator><name pos:start="17:11" pos:end="17:19">dtbusname</name></name> <operator pos:start="17:21" pos:end="17:21">=</operator> <call pos:start="17:23" pos:end="17:65"><name pos:start="17:23" pos:end="17:37">g_strdup_printf</name><argument_list pos:start="17:38" pos:end="17:65">(<argument pos:start="17:39" pos:end="17:52"><expr pos:start="17:39" pos:end="17:52"><literal type="string" pos:start="17:39" pos:end="17:45">"pci@%"</literal> <name pos:start="17:47" pos:end="17:52">PRIx64</name></expr></argument>, <argument pos:start="17:55" pos:end="17:64"><expr pos:start="17:55" pos:end="17:64"><name pos:start="17:55" pos:end="17:64"><name pos:start="17:55" pos:end="17:58">sphb</name><operator pos:start="17:59" pos:end="17:60">-&gt;</operator><name pos:start="17:61" pos:end="17:64">buid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:51"><expr pos:start="19:5" pos:end="19:50"><name pos:start="19:5" pos:end="19:11">namebuf</name> <operator pos:start="19:13" pos:end="19:13">=</operator> <call pos:start="19:15" pos:end="19:50"><name pos:start="19:15" pos:end="19:20">alloca</name><argument_list pos:start="19:21" pos:end="19:50">(<argument pos:start="19:22" pos:end="19:49"><expr pos:start="19:22" pos:end="19:49"><call pos:start="19:22" pos:end="19:44"><name pos:start="19:22" pos:end="19:27">strlen</name><argument_list pos:start="19:28" pos:end="19:44">(<argument pos:start="19:29" pos:end="19:43"><expr pos:start="19:29" pos:end="19:43"><name pos:start="19:29" pos:end="19:43"><name pos:start="19:29" pos:end="19:32">sphb</name><operator pos:start="19:33" pos:end="19:34">-&gt;</operator><name pos:start="19:35" pos:end="19:43">dtbusname</name></name></expr></argument>)</argument_list></call> <operator pos:start="19:46" pos:end="19:46">+</operator> <literal type="number" pos:start="19:48" pos:end="19:49">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="23:5" pos:end="23:35">/* Initialize memory regions */</comment>

    <expr_stmt pos:start="25:5" pos:end="25:49"><expr pos:start="25:5" pos:end="25:48"><call pos:start="25:5" pos:end="25:48"><name pos:start="25:5" pos:end="25:11">sprintf</name><argument_list pos:start="25:12" pos:end="25:48">(<argument pos:start="25:13" pos:end="25:19"><expr pos:start="25:13" pos:end="25:19"><name pos:start="25:13" pos:end="25:19">namebuf</name></expr></argument>, <argument pos:start="25:22" pos:end="25:30"><expr pos:start="25:22" pos:end="25:30"><literal type="string" pos:start="25:22" pos:end="25:30">"%s.mmio"</literal></expr></argument>, <argument pos:start="25:33" pos:end="25:47"><expr pos:start="25:33" pos:end="25:47"><name pos:start="25:33" pos:end="25:47"><name pos:start="25:33" pos:end="25:36">sphb</name><operator pos:start="25:37" pos:end="25:38">-&gt;</operator><name pos:start="25:39" pos:end="25:47">dtbusname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:60"><expr pos:start="27:5" pos:end="27:59"><call pos:start="27:5" pos:end="27:59"><name pos:start="27:5" pos:end="27:22">memory_region_init</name><argument_list pos:start="27:23" pos:end="27:59">(<argument pos:start="27:24" pos:end="27:38"><expr pos:start="27:24" pos:end="27:38"><operator pos:start="27:24" pos:end="27:24">&amp;</operator><name pos:start="27:25" pos:end="27:38"><name pos:start="27:25" pos:end="27:28">sphb</name><operator pos:start="27:29" pos:end="27:30">-&gt;</operator><name pos:start="27:31" pos:end="27:38">memspace</name></name></expr></argument>, <argument pos:start="27:41" pos:end="27:47"><expr pos:start="27:41" pos:end="27:47"><name pos:start="27:41" pos:end="27:47">namebuf</name></expr></argument>, <argument pos:start="27:50" pos:end="27:58"><expr pos:start="27:50" pos:end="27:58"><name pos:start="27:50" pos:end="27:58">INT64_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:55"><expr pos:start="31:5" pos:end="31:54"><call pos:start="31:5" pos:end="31:54"><name pos:start="31:5" pos:end="31:11">sprintf</name><argument_list pos:start="31:12" pos:end="31:54">(<argument pos:start="31:13" pos:end="31:19"><expr pos:start="31:13" pos:end="31:19"><name pos:start="31:13" pos:end="31:19">namebuf</name></expr></argument>, <argument pos:start="31:22" pos:end="31:36"><expr pos:start="31:22" pos:end="31:36"><literal type="string" pos:start="31:22" pos:end="31:36">"%s.mmio-alias"</literal></expr></argument>, <argument pos:start="31:39" pos:end="31:53"><expr pos:start="31:39" pos:end="31:53"><name pos:start="31:39" pos:end="31:53"><name pos:start="31:39" pos:end="31:42">sphb</name><operator pos:start="31:43" pos:end="31:44">-&gt;</operator><name pos:start="31:45" pos:end="31:53">dtbusname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="35:79"><expr pos:start="33:5" pos:end="35:78"><call pos:start="33:5" pos:end="35:78"><name pos:start="33:5" pos:end="33:28">memory_region_init_alias</name><argument_list pos:start="33:29" pos:end="35:78">(<argument pos:start="33:30" pos:end="33:45"><expr pos:start="33:30" pos:end="33:45"><operator pos:start="33:30" pos:end="33:30">&amp;</operator><name pos:start="33:31" pos:end="33:45"><name pos:start="33:31" pos:end="33:34">sphb</name><operator pos:start="33:35" pos:end="33:36">-&gt;</operator><name pos:start="33:37" pos:end="33:45">memwindow</name></name></expr></argument>, <argument pos:start="33:48" pos:end="33:54"><expr pos:start="33:48" pos:end="33:54"><name pos:start="33:48" pos:end="33:54">namebuf</name></expr></argument>, <argument pos:start="33:57" pos:end="33:71"><expr pos:start="33:57" pos:end="33:71"><operator pos:start="33:57" pos:end="33:57">&amp;</operator><name pos:start="33:58" pos:end="33:71"><name pos:start="33:58" pos:end="33:61">sphb</name><operator pos:start="33:62" pos:end="33:63">-&gt;</operator><name pos:start="33:64" pos:end="33:71">memspace</name></name></expr></argument>,

                             <argument pos:start="35:30" pos:end="35:57"><expr pos:start="35:30" pos:end="35:57"><name pos:start="35:30" pos:end="35:57">SPAPR_PCI_MEM_WIN_BUS_OFFSET</name></expr></argument>, <argument pos:start="35:60" pos:end="35:77"><expr pos:start="35:60" pos:end="35:77"><name pos:start="35:60" pos:end="35:77"><name pos:start="35:60" pos:end="35:63">sphb</name><operator pos:start="35:64" pos:end="35:65">-&gt;</operator><name pos:start="35:66" pos:end="35:77">mem_win_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="39:50"><expr pos:start="37:5" pos:end="39:49"><call pos:start="37:5" pos:end="39:49"><name pos:start="37:5" pos:end="37:31">memory_region_add_subregion</name><argument_list pos:start="37:32" pos:end="39:49">(<argument pos:start="37:33" pos:end="37:51"><expr pos:start="37:33" pos:end="37:51"><call pos:start="37:33" pos:end="37:51"><name pos:start="37:33" pos:end="37:49">get_system_memory</name><argument_list pos:start="37:50" pos:end="37:51">()</argument_list></call></expr></argument>, <argument pos:start="37:54" pos:end="37:71"><expr pos:start="37:54" pos:end="37:71"><name pos:start="37:54" pos:end="37:71"><name pos:start="37:54" pos:end="37:57">sphb</name><operator pos:start="37:58" pos:end="37:59">-&gt;</operator><name pos:start="37:60" pos:end="37:71">mem_win_addr</name></name></expr></argument>,

                                <argument pos:start="39:33" pos:end="39:48"><expr pos:start="39:33" pos:end="39:48"><operator pos:start="39:33" pos:end="39:33">&amp;</operator><name pos:start="39:34" pos:end="39:48"><name pos:start="39:34" pos:end="39:37">sphb</name><operator pos:start="39:38" pos:end="39:39">-&gt;</operator><name pos:start="39:40" pos:end="39:48">memwindow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="43:5" pos:end="57:33">/* On ppc, we only have MMIO no specific IO space from the CPU

     * perspective.  In theory we ought to be able to embed the PCI IO

     * memory region direction in the system memory space.  However,

     * if any of the IO BAR subregions use the old_portio mechanism,

     * that won't be processed properly unless accessed from the

     * system io address space.  This hack to bounce things via

     * system_io works around the problem until all the users of

     * old_portion are updated */</comment>

    <expr_stmt pos:start="59:5" pos:end="59:47"><expr pos:start="59:5" pos:end="59:46"><call pos:start="59:5" pos:end="59:46"><name pos:start="59:5" pos:end="59:11">sprintf</name><argument_list pos:start="59:12" pos:end="59:46">(<argument pos:start="59:13" pos:end="59:19"><expr pos:start="59:13" pos:end="59:19"><name pos:start="59:13" pos:end="59:19">namebuf</name></expr></argument>, <argument pos:start="59:22" pos:end="59:28"><expr pos:start="59:22" pos:end="59:28"><literal type="string" pos:start="59:22" pos:end="59:28">"%s.io"</literal></expr></argument>, <argument pos:start="59:31" pos:end="59:45"><expr pos:start="59:31" pos:end="59:45"><name pos:start="59:31" pos:end="59:45"><name pos:start="59:31" pos:end="59:34">sphb</name><operator pos:start="59:35" pos:end="59:36">-&gt;</operator><name pos:start="59:37" pos:end="59:45">dtbusname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:71"><expr pos:start="61:5" pos:end="61:70"><call pos:start="61:5" pos:end="61:70"><name pos:start="61:5" pos:end="61:22">memory_region_init</name><argument_list pos:start="61:23" pos:end="61:70">(<argument pos:start="61:24" pos:end="61:37"><expr pos:start="61:24" pos:end="61:37"><operator pos:start="61:24" pos:end="61:24">&amp;</operator><name pos:start="61:25" pos:end="61:37"><name pos:start="61:25" pos:end="61:28">sphb</name><operator pos:start="61:29" pos:end="61:30">-&gt;</operator><name pos:start="61:31" pos:end="61:37">iospace</name></name></expr></argument>, <argument pos:start="61:40" pos:end="61:46"><expr pos:start="61:40" pos:end="61:46"><name pos:start="61:40" pos:end="61:46">namebuf</name></expr></argument>, <argument pos:start="61:49" pos:end="61:69"><expr pos:start="61:49" pos:end="61:69"><name pos:start="61:49" pos:end="61:69">SPAPR_PCI_IO_WIN_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="63:5" pos:end="63:45">/* FIXME: fix to support multiple PHBs */</comment>

    <expr_stmt pos:start="65:5" pos:end="65:68"><expr pos:start="65:5" pos:end="65:67"><call pos:start="65:5" pos:end="65:67"><name pos:start="65:5" pos:end="65:31">memory_region_add_subregion</name><argument_list pos:start="65:32" pos:end="65:67">(<argument pos:start="65:33" pos:end="65:47"><expr pos:start="65:33" pos:end="65:47"><call pos:start="65:33" pos:end="65:47"><name pos:start="65:33" pos:end="65:45">get_system_io</name><argument_list pos:start="65:46" pos:end="65:47">()</argument_list></call></expr></argument>, <argument pos:start="65:50" pos:end="65:50"><expr pos:start="65:50" pos:end="65:50"><literal type="number" pos:start="65:50" pos:end="65:50">0</literal></expr></argument>, <argument pos:start="65:53" pos:end="65:66"><expr pos:start="65:53" pos:end="65:66"><operator pos:start="65:53" pos:end="65:53">&amp;</operator><name pos:start="65:54" pos:end="65:66"><name pos:start="65:54" pos:end="65:57">sphb</name><operator pos:start="65:58" pos:end="65:59">-&gt;</operator><name pos:start="65:60" pos:end="65:66">iospace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:53"><expr pos:start="69:5" pos:end="69:52"><call pos:start="69:5" pos:end="69:52"><name pos:start="69:5" pos:end="69:11">sprintf</name><argument_list pos:start="69:12" pos:end="69:52">(<argument pos:start="69:13" pos:end="69:19"><expr pos:start="69:13" pos:end="69:19"><name pos:start="69:13" pos:end="69:19">namebuf</name></expr></argument>, <argument pos:start="69:22" pos:end="69:34"><expr pos:start="69:22" pos:end="69:34"><literal type="string" pos:start="69:22" pos:end="69:34">"%s.io-alias"</literal></expr></argument>, <argument pos:start="69:37" pos:end="69:51"><expr pos:start="69:37" pos:end="69:51"><name pos:start="69:37" pos:end="69:51"><name pos:start="69:37" pos:end="69:40">sphb</name><operator pos:start="69:41" pos:end="69:42">-&gt;</operator><name pos:start="69:43" pos:end="69:51">dtbusname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="73:58"><expr pos:start="71:5" pos:end="73:57"><call pos:start="71:5" pos:end="73:57"><name pos:start="71:5" pos:end="71:25">memory_region_init_io</name><argument_list pos:start="71:26" pos:end="73:57">(<argument pos:start="71:27" pos:end="71:41"><expr pos:start="71:27" pos:end="71:41"><operator pos:start="71:27" pos:end="71:27">&amp;</operator><name pos:start="71:28" pos:end="71:41"><name pos:start="71:28" pos:end="71:31">sphb</name><operator pos:start="71:32" pos:end="71:33">-&gt;</operator><name pos:start="71:34" pos:end="71:41">iowindow</name></name></expr></argument>, <argument pos:start="71:44" pos:end="71:56"><expr pos:start="71:44" pos:end="71:56"><operator pos:start="71:44" pos:end="71:44">&amp;</operator><name pos:start="71:45" pos:end="71:56">spapr_io_ops</name></expr></argument>, <argument pos:start="71:59" pos:end="71:62"><expr pos:start="71:59" pos:end="71:62"><name pos:start="71:59" pos:end="71:62">sphb</name></expr></argument>,

                          <argument pos:start="73:27" pos:end="73:33"><expr pos:start="73:27" pos:end="73:33"><name pos:start="73:27" pos:end="73:33">namebuf</name></expr></argument>, <argument pos:start="73:36" pos:end="73:56"><expr pos:start="73:36" pos:end="73:56"><name pos:start="73:36" pos:end="73:56">SPAPR_PCI_IO_WIN_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="77:49"><expr pos:start="75:5" pos:end="77:48"><call pos:start="75:5" pos:end="77:48"><name pos:start="75:5" pos:end="75:31">memory_region_add_subregion</name><argument_list pos:start="75:32" pos:end="77:48">(<argument pos:start="75:33" pos:end="75:51"><expr pos:start="75:33" pos:end="75:51"><call pos:start="75:33" pos:end="75:51"><name pos:start="75:33" pos:end="75:49">get_system_memory</name><argument_list pos:start="75:50" pos:end="75:51">()</argument_list></call></expr></argument>, <argument pos:start="75:54" pos:end="75:70"><expr pos:start="75:54" pos:end="75:70"><name pos:start="75:54" pos:end="75:70"><name pos:start="75:54" pos:end="75:57">sphb</name><operator pos:start="75:58" pos:end="75:59">-&gt;</operator><name pos:start="75:60" pos:end="75:70">io_win_addr</name></name></expr></argument>,

                                <argument pos:start="77:33" pos:end="77:47"><expr pos:start="77:33" pos:end="77:47"><operator pos:start="77:33" pos:end="77:33">&amp;</operator><name pos:start="77:34" pos:end="77:47"><name pos:start="77:34" pos:end="77:37">sphb</name><operator pos:start="77:38" pos:end="77:39">-&gt;</operator><name pos:start="77:40" pos:end="77:47">iowindow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="81:5" pos:end="85:41">/* As MSI/MSIX interrupts trigger by writing at MSI/MSIX vectors,

     * we need to allocate some memory to catch those writes coming

     * from msi_notify()/msix_notify() */</comment>

    <if_stmt pos:start="87:5" pos:end="99:5"><if pos:start="87:5" pos:end="99:5">if <condition pos:start="87:8" pos:end="87:22">(<expr pos:start="87:9" pos:end="87:21"><name pos:start="87:9" pos:end="87:21">msi_supported</name></expr>)</condition> <block pos:start="87:24" pos:end="99:5">{<block_content pos:start="89:9" pos:end="97:54">

        <expr_stmt pos:start="89:9" pos:end="89:52"><expr pos:start="89:9" pos:end="89:51"><call pos:start="89:9" pos:end="89:51"><name pos:start="89:9" pos:end="89:15">sprintf</name><argument_list pos:start="89:16" pos:end="89:51">(<argument pos:start="89:17" pos:end="89:23"><expr pos:start="89:17" pos:end="89:23"><name pos:start="89:17" pos:end="89:23">namebuf</name></expr></argument>, <argument pos:start="89:26" pos:end="89:33"><expr pos:start="89:26" pos:end="89:33"><literal type="string" pos:start="89:26" pos:end="89:33">"%s.msi"</literal></expr></argument>, <argument pos:start="89:36" pos:end="89:50"><expr pos:start="89:36" pos:end="89:50"><name pos:start="89:36" pos:end="89:50"><name pos:start="89:36" pos:end="89:39">sphb</name><operator pos:start="89:40" pos:end="89:41">-&gt;</operator><name pos:start="89:42" pos:end="89:50">dtbusname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="93:70"><expr pos:start="91:9" pos:end="93:69"><call pos:start="91:9" pos:end="93:69"><name pos:start="91:9" pos:end="91:29">memory_region_init_io</name><argument_list pos:start="91:30" pos:end="93:69">(<argument pos:start="91:31" pos:end="91:46"><expr pos:start="91:31" pos:end="91:46"><operator pos:start="91:31" pos:end="91:31">&amp;</operator><name pos:start="91:32" pos:end="91:46"><name pos:start="91:32" pos:end="91:35">sphb</name><operator pos:start="91:36" pos:end="91:37">-&gt;</operator><name pos:start="91:38" pos:end="91:46">msiwindow</name></name></expr></argument>, <argument pos:start="91:49" pos:end="91:62"><expr pos:start="91:49" pos:end="91:62"><operator pos:start="91:49" pos:end="91:49">&amp;</operator><name pos:start="91:50" pos:end="91:62">spapr_msi_ops</name></expr></argument>, <argument pos:start="91:65" pos:end="91:68"><expr pos:start="91:65" pos:end="91:68"><name pos:start="91:65" pos:end="91:68">sphb</name></expr></argument>,

                              <argument pos:start="93:31" pos:end="93:37"><expr pos:start="93:31" pos:end="93:37"><name pos:start="93:31" pos:end="93:37">namebuf</name></expr></argument>, <argument pos:start="93:40" pos:end="93:68"><expr pos:start="93:40" pos:end="93:68"><name pos:start="93:40" pos:end="93:58">SPAPR_MSIX_MAX_DEVS</name> <operator pos:start="93:60" pos:end="93:60">*</operator> <literal type="number" pos:start="93:62" pos:end="93:68">0x10000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="97:54"><expr pos:start="95:9" pos:end="97:53"><call pos:start="95:9" pos:end="97:53"><name pos:start="95:9" pos:end="95:35">memory_region_add_subregion</name><argument_list pos:start="95:36" pos:end="97:53">(<argument pos:start="95:37" pos:end="95:55"><expr pos:start="95:37" pos:end="95:55"><call pos:start="95:37" pos:end="95:55"><name pos:start="95:37" pos:end="95:53">get_system_memory</name><argument_list pos:start="95:54" pos:end="95:55">()</argument_list></call></expr></argument>, <argument pos:start="95:58" pos:end="95:75"><expr pos:start="95:58" pos:end="95:75"><name pos:start="95:58" pos:end="95:75"><name pos:start="95:58" pos:end="95:61">sphb</name><operator pos:start="95:62" pos:end="95:63">-&gt;</operator><name pos:start="95:64" pos:end="95:75">msi_win_addr</name></name></expr></argument>,

                                    <argument pos:start="97:37" pos:end="97:52"><expr pos:start="97:37" pos:end="97:52"><operator pos:start="97:37" pos:end="97:37">&amp;</operator><name pos:start="97:38" pos:end="97:52"><name pos:start="97:38" pos:end="97:41">sphb</name><operator pos:start="97:42" pos:end="97:43">-&gt;</operator><name pos:start="97:44" pos:end="97:52">msiwindow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="103:5" pos:end="111:58"><expr pos:start="103:5" pos:end="111:57"><name pos:start="103:5" pos:end="103:7">bus</name> <operator pos:start="103:9" pos:end="103:9">=</operator> <call pos:start="103:11" pos:end="111:57"><name pos:start="103:11" pos:end="103:26">pci_register_bus</name><argument_list pos:start="103:27" pos:end="111:57">(<argument pos:start="103:28" pos:end="103:36"><expr pos:start="103:28" pos:end="103:36"><call pos:start="103:28" pos:end="103:36"><name pos:start="103:28" pos:end="103:33">DEVICE</name><argument_list pos:start="103:34" pos:end="103:36">(<argument pos:start="103:35" pos:end="103:35"><expr pos:start="103:35" pos:end="103:35"><name pos:start="103:35" pos:end="103:35">s</name></expr></argument>)</argument_list></call></expr></argument>,

                           <argument pos:start="105:28" pos:end="105:74"><expr pos:start="105:28" pos:end="105:74"><ternary pos:start="105:28" pos:end="105:74"><condition pos:start="105:28" pos:end="105:42"><expr pos:start="105:28" pos:end="105:40"><name pos:start="105:28" pos:end="105:40"><name pos:start="105:28" pos:end="105:31">sphb</name><operator pos:start="105:32" pos:end="105:33">-&gt;</operator><name pos:start="105:34" pos:end="105:40">busname</name></name></expr> ?</condition><then pos:start="105:44" pos:end="105:56"> <expr pos:start="105:44" pos:end="105:56"><name pos:start="105:44" pos:end="105:56"><name pos:start="105:44" pos:end="105:47">sphb</name><operator pos:start="105:48" pos:end="105:49">-&gt;</operator><name pos:start="105:50" pos:end="105:56">busname</name></name></expr> </then><else pos:start="105:58" pos:end="105:74">: <expr pos:start="105:60" pos:end="105:74"><name pos:start="105:60" pos:end="105:74"><name pos:start="105:60" pos:end="105:63">sphb</name><operator pos:start="105:64" pos:end="105:65">-&gt;</operator><name pos:start="105:66" pos:end="105:74">dtbusname</name></name></expr></else></ternary></expr></argument>,

                           <argument pos:start="107:28" pos:end="107:44"><expr pos:start="107:28" pos:end="107:44"><name pos:start="107:28" pos:end="107:44">pci_spapr_set_irq</name></expr></argument>, <argument pos:start="107:47" pos:end="107:63"><expr pos:start="107:47" pos:end="107:63"><name pos:start="107:47" pos:end="107:63">pci_spapr_map_irq</name></expr></argument>, <argument pos:start="107:66" pos:end="107:69"><expr pos:start="107:66" pos:end="107:69"><name pos:start="107:66" pos:end="107:69">sphb</name></expr></argument>,

                           <argument pos:start="109:28" pos:end="109:42"><expr pos:start="109:28" pos:end="109:42"><operator pos:start="109:28" pos:end="109:28">&amp;</operator><name pos:start="109:29" pos:end="109:42"><name pos:start="109:29" pos:end="109:32">sphb</name><operator pos:start="109:33" pos:end="109:34">-&gt;</operator><name pos:start="109:35" pos:end="109:42">memspace</name></name></expr></argument>, <argument pos:start="109:45" pos:end="109:58"><expr pos:start="109:45" pos:end="109:58"><operator pos:start="109:45" pos:end="109:45">&amp;</operator><name pos:start="109:46" pos:end="109:58"><name pos:start="109:46" pos:end="109:49">sphb</name><operator pos:start="109:50" pos:end="109:51">-&gt;</operator><name pos:start="109:52" pos:end="109:58">iospace</name></name></expr></argument>,

                           <argument pos:start="111:28" pos:end="111:42"><expr pos:start="111:28" pos:end="111:42"><call pos:start="111:28" pos:end="111:42"><name pos:start="111:28" pos:end="111:36">PCI_DEVFN</name><argument_list pos:start="111:37" pos:end="111:42">(<argument pos:start="111:38" pos:end="111:38"><expr pos:start="111:38" pos:end="111:38"><literal type="number" pos:start="111:38" pos:end="111:38">0</literal></expr></argument>, <argument pos:start="111:41" pos:end="111:41"><expr pos:start="111:41" pos:end="111:41"><literal type="number" pos:start="111:41" pos:end="111:41">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="111:45" pos:end="111:56"><expr pos:start="111:45" pos:end="111:56"><name pos:start="111:45" pos:end="111:56">PCI_NUM_PINS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:19"><expr pos:start="113:5" pos:end="113:18"><name pos:start="113:5" pos:end="113:12"><name pos:start="113:5" pos:end="113:7">phb</name><operator pos:start="113:8" pos:end="113:9">-&gt;</operator><name pos:start="113:10" pos:end="113:12">bus</name></name> <operator pos:start="113:14" pos:end="113:14">=</operator> <name pos:start="113:16" pos:end="113:18">bus</name></expr>;</expr_stmt>



    <expr_stmt pos:start="117:5" pos:end="117:74"><expr pos:start="117:5" pos:end="117:73"><name pos:start="117:5" pos:end="117:19"><name pos:start="117:5" pos:end="117:8">sphb</name><operator pos:start="117:9" pos:end="117:10">-&gt;</operator><name pos:start="117:11" pos:end="117:19">dma_liobn</name></name> <operator pos:start="117:21" pos:end="117:21">=</operator> <name pos:start="117:23" pos:end="117:42">SPAPR_PCI_BASE_LIOBN</name> <operator pos:start="117:44" pos:end="117:44">|</operator> <operator pos:start="117:46" pos:end="117:46">(</operator><call pos:start="117:47" pos:end="117:66"><name pos:start="117:47" pos:end="117:61">pci_find_domain</name><argument_list pos:start="117:62" pos:end="117:66">(<argument pos:start="117:63" pos:end="117:65"><expr pos:start="117:63" pos:end="117:65"><name pos:start="117:63" pos:end="117:65">bus</name></expr></argument>)</argument_list></call> <operator pos:start="117:68" pos:end="117:69">&lt;&lt;</operator> <literal type="number" pos:start="117:71" pos:end="117:72">16</literal><operator pos:start="117:73" pos:end="117:73">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:31"><expr pos:start="119:5" pos:end="119:30"><name pos:start="119:5" pos:end="119:26"><name pos:start="119:5" pos:end="119:8">sphb</name><operator pos:start="119:9" pos:end="119:10">-&gt;</operator><name pos:start="119:11" pos:end="119:26">dma_window_start</name></name> <operator pos:start="119:28" pos:end="119:28">=</operator> <literal type="number" pos:start="119:30" pos:end="119:30">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:39"><expr pos:start="121:5" pos:end="121:38"><name pos:start="121:5" pos:end="121:25"><name pos:start="121:5" pos:end="121:8">sphb</name><operator pos:start="121:9" pos:end="121:10">-&gt;</operator><name pos:start="121:11" pos:end="121:25">dma_window_size</name></name> <operator pos:start="121:27" pos:end="121:27">=</operator> <literal type="number" pos:start="121:29" pos:end="121:38">0x40000000</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:82"><expr pos:start="123:5" pos:end="123:81"><name pos:start="123:5" pos:end="123:13"><name pos:start="123:5" pos:end="123:8">sphb</name><operator pos:start="123:9" pos:end="123:10">-&gt;</operator><name pos:start="123:11" pos:end="123:13">dma</name></name> <operator pos:start="123:15" pos:end="123:15">=</operator> <call pos:start="123:17" pos:end="123:81"><name pos:start="123:17" pos:end="123:41">spapr_tce_new_dma_context</name><argument_list pos:start="123:42" pos:end="123:81">(<argument pos:start="123:43" pos:end="123:57"><expr pos:start="123:43" pos:end="123:57"><name pos:start="123:43" pos:end="123:57"><name pos:start="123:43" pos:end="123:46">sphb</name><operator pos:start="123:47" pos:end="123:48">-&gt;</operator><name pos:start="123:49" pos:end="123:57">dma_liobn</name></name></expr></argument>, <argument pos:start="123:60" pos:end="123:80"><expr pos:start="123:60" pos:end="123:80"><name pos:start="123:60" pos:end="123:80"><name pos:start="123:60" pos:end="123:63">sphb</name><operator pos:start="123:64" pos:end="123:65">-&gt;</operator><name pos:start="123:66" pos:end="123:80">dma_window_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:57"><expr pos:start="125:5" pos:end="125:56"><call pos:start="125:5" pos:end="125:56"><name pos:start="125:5" pos:end="125:19">pci_setup_iommu</name><argument_list pos:start="125:20" pos:end="125:56">(<argument pos:start="125:21" pos:end="125:23"><expr pos:start="125:21" pos:end="125:23"><name pos:start="125:21" pos:end="125:23">bus</name></expr></argument>, <argument pos:start="125:26" pos:end="125:49"><expr pos:start="125:26" pos:end="125:49"><name pos:start="125:26" pos:end="125:49">spapr_pci_dma_context_fn</name></expr></argument>, <argument pos:start="125:52" pos:end="125:55"><expr pos:start="125:52" pos:end="125:55"><name pos:start="125:52" pos:end="125:55">sphb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="129:5" pos:end="129:48"><expr pos:start="129:5" pos:end="129:47"><call pos:start="129:5" pos:end="129:47"><name pos:start="129:5" pos:end="129:21">QLIST_INSERT_HEAD</name><argument_list pos:start="129:22" pos:end="129:47">(<argument pos:start="129:23" pos:end="129:34"><expr pos:start="129:23" pos:end="129:34"><operator pos:start="129:23" pos:end="129:23">&amp;</operator><name pos:start="129:24" pos:end="129:34"><name pos:start="129:24" pos:end="129:28">spapr</name><operator pos:start="129:29" pos:end="129:30">-&gt;</operator><name pos:start="129:31" pos:end="129:34">phbs</name></name></expr></argument>, <argument pos:start="129:37" pos:end="129:40"><expr pos:start="129:37" pos:end="129:40"><name pos:start="129:37" pos:end="129:40">sphb</name></expr></argument>, <argument pos:start="129:43" pos:end="129:46"><expr pos:start="129:43" pos:end="129:46"><name pos:start="129:43" pos:end="129:46">list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="133:5" pos:end="133:34">/* Initialize the LSI table */</comment>

    <for pos:start="135:5" pos:end="153:5">for <control pos:start="135:9" pos:end="135:38">(<init pos:start="135:10" pos:end="135:15"><expr pos:start="135:10" pos:end="135:14"><name pos:start="135:10" pos:end="135:10">i</name> <operator pos:start="135:12" pos:end="135:12">=</operator> <literal type="number" pos:start="135:14" pos:end="135:14">0</literal></expr>;</init> <condition pos:start="135:17" pos:end="135:33"><expr pos:start="135:17" pos:end="135:32"><name pos:start="135:17" pos:end="135:17">i</name> <operator pos:start="135:19" pos:end="135:19">&lt;</operator> <name pos:start="135:21" pos:end="135:32">PCI_NUM_PINS</name></expr>;</condition> <incr pos:start="135:35" pos:end="135:37"><expr pos:start="135:35" pos:end="135:37"><name pos:start="135:35" pos:end="135:35">i</name><operator pos:start="135:36" pos:end="135:37">++</operator></expr></incr>)</control> <block pos:start="135:40" pos:end="153:5">{<block_content pos:start="137:9" pos:end="151:37">

        <decl_stmt pos:start="137:9" pos:end="137:21"><decl pos:start="137:9" pos:end="137:20"><type pos:start="137:9" pos:end="137:16"><name pos:start="137:9" pos:end="137:16">uint32_t</name></type> <name pos:start="137:18" pos:end="137:20">irq</name></decl>;</decl_stmt>



        <expr_stmt pos:start="141:9" pos:end="141:36"><expr pos:start="141:9" pos:end="141:35"><name pos:start="141:9" pos:end="141:11">irq</name> <operator pos:start="141:13" pos:end="141:13">=</operator> <call pos:start="141:15" pos:end="141:35"><name pos:start="141:15" pos:end="141:32">spapr_allocate_lsi</name><argument_list pos:start="141:33" pos:end="141:35">(<argument pos:start="141:34" pos:end="141:34"><expr pos:start="141:34" pos:end="141:34"><literal type="number" pos:start="141:34" pos:end="141:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="143:9" pos:end="147:9"><if pos:start="143:9" pos:end="147:9">if <condition pos:start="143:12" pos:end="143:17">(<expr pos:start="143:13" pos:end="143:16"><operator pos:start="143:13" pos:end="143:13">!</operator><name pos:start="143:14" pos:end="143:16">irq</name></expr>)</condition> <block pos:start="143:19" pos:end="147:9">{<block_content pos:start="145:13" pos:end="145:22">

            <return pos:start="145:13" pos:end="145:22">return <expr pos:start="145:20" pos:end="145:21"><operator pos:start="145:20" pos:end="145:20">-</operator><literal type="number" pos:start="145:21" pos:end="145:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="151:9" pos:end="151:37"><expr pos:start="151:9" pos:end="151:36"><name pos:start="151:9" pos:end="151:26"><name pos:start="151:9" pos:end="151:12">sphb</name><operator pos:start="151:13" pos:end="151:14">-&gt;</operator><name pos:start="151:15" pos:end="151:23">lsi_table</name><index pos:start="151:24" pos:end="151:26">[<expr pos:start="151:25" pos:end="151:25"><name pos:start="151:25" pos:end="151:25">i</name></expr>]</index></name><operator pos:start="151:27" pos:end="151:27">.</operator><name pos:start="151:28" pos:end="151:30">irq</name> <operator pos:start="151:32" pos:end="151:32">=</operator> <name pos:start="151:34" pos:end="151:36">irq</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <return pos:start="157:5" pos:end="157:13">return <expr pos:start="157:12" pos:end="157:12"><literal type="number" pos:start="157:12" pos:end="157:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
