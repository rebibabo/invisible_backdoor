<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14689.c" pos:tabs="8"><function pos:start="1:1" pos:end="359:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">xwma_read_header</name><parameter_list pos:start="1:28" pos:end="1:71">(<parameter pos:start="1:29" pos:end="1:46"><decl pos:start="1:29" pos:end="1:46"><type pos:start="1:29" pos:end="1:46"><name pos:start="1:29" pos:end="1:43">AVFormatContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:46">s</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:70"><decl pos:start="1:49" pos:end="1:70"><type pos:start="1:49" pos:end="1:70"><name pos:start="1:49" pos:end="1:66">AVFormatParameters</name> <modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:70">ap</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="359:1">{<block_content pos:start="5:5" pos:end="357:13">

    <decl_stmt pos:start="5:5" pos:end="5:39"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">int64_t</name></type> <name pos:start="5:13" pos:end="5:16">size</name></decl>, <decl pos:start="5:19" pos:end="5:38"><type ref="prev" pos:start="5:5" pos:end="5:11"/><name pos:start="5:19" pos:end="5:27">av_uninit</name><argument_list pos:start="5:28" pos:end="5:38">(<argument pos:start="5:29" pos:end="5:37"><expr pos:start="5:29" pos:end="5:37"><name pos:start="5:29" pos:end="5:37">data_size</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:28">dpds_table_size</name> <init pos:start="7:30" pos:end="7:32">= <expr pos:start="7:32" pos:end="7:32"><literal type="number" pos:start="7:32" pos:end="7:32">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:28"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">uint32_t</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:24">dpds_table</name> <init pos:start="9:26" pos:end="9:28">= <expr pos:start="9:28" pos:end="9:28"><literal type="number" pos:start="9:28" pos:end="9:28">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:16">int</name></type> <name pos:start="11:18" pos:end="11:20">tag</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:15">AVIOContext</name> <modifier pos:start="13:17" pos:end="13:17">*</modifier></type><name pos:start="13:18" pos:end="13:19">pb</name> <init pos:start="13:21" pos:end="13:27">= <expr pos:start="13:23" pos:end="13:27"><name pos:start="13:23" pos:end="13:27"><name pos:start="13:23" pos:end="13:23">s</name><operator pos:start="13:24" pos:end="13:25">-&gt;</operator><name pos:start="13:26" pos:end="13:27">pb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:17"><decl pos:start="15:5" pos:end="15:16"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:12">AVStream</name> <modifier pos:start="15:14" pos:end="15:14">*</modifier></type><name pos:start="15:15" pos:end="15:16">st</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:37"><decl pos:start="17:5" pos:end="17:36"><type pos:start="17:5" pos:end="17:17"><name pos:start="17:5" pos:end="17:15">XWMAContext</name> <modifier pos:start="17:17" pos:end="17:17">*</modifier></type><name pos:start="17:18" pos:end="17:21">xwma</name> <init pos:start="17:23" pos:end="17:36">= <expr pos:start="17:25" pos:end="17:36"><name pos:start="17:25" pos:end="17:36"><name pos:start="17:25" pos:end="17:25">s</name><operator pos:start="17:26" pos:end="17:27">-&gt;</operator><name pos:start="17:28" pos:end="17:36">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:10"><decl pos:start="19:5" pos:end="19:9"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:9">i</name></decl>;</decl_stmt>



    <comment type="block" pos:start="23:5" pos:end="27:7">/* The following code is mostly copied from wav.c, with some

     * minor alterations.

     */</comment>



    <comment type="block" pos:start="31:5" pos:end="31:27">/* check RIFF header */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:24"><expr pos:start="33:5" pos:end="33:23"><name pos:start="33:5" pos:end="33:7">tag</name> <operator pos:start="33:9" pos:end="33:9">=</operator> <call pos:start="33:11" pos:end="33:23"><name pos:start="33:11" pos:end="33:19">avio_rl32</name><argument_list pos:start="33:20" pos:end="33:23">(<argument pos:start="33:21" pos:end="33:22"><expr pos:start="33:21" pos:end="33:22"><name pos:start="33:21" pos:end="33:22">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="37:18"><if pos:start="35:5" pos:end="37:18">if <condition pos:start="35:8" pos:end="35:41">(<expr pos:start="35:9" pos:end="35:40"><name pos:start="35:9" pos:end="35:11">tag</name> <operator pos:start="35:13" pos:end="35:14">!=</operator> <call pos:start="35:16" pos:end="35:40"><name pos:start="35:16" pos:end="35:20">MKTAG</name><argument_list pos:start="35:21" pos:end="35:40">(<argument pos:start="35:22" pos:end="35:24"><expr pos:start="35:22" pos:end="35:24"><literal type="char" pos:start="35:22" pos:end="35:24">'R'</literal></expr></argument>, <argument pos:start="35:27" pos:end="35:29"><expr pos:start="35:27" pos:end="35:29"><literal type="char" pos:start="35:27" pos:end="35:29">'I'</literal></expr></argument>, <argument pos:start="35:32" pos:end="35:34"><expr pos:start="35:32" pos:end="35:34"><literal type="char" pos:start="35:32" pos:end="35:34">'F'</literal></expr></argument>, <argument pos:start="35:37" pos:end="35:39"><expr pos:start="35:37" pos:end="35:39"><literal type="char" pos:start="35:37" pos:end="35:39">'F'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="37:9" pos:end="37:18"><block_content pos:start="37:9" pos:end="37:18">

        <return pos:start="37:9" pos:end="37:18">return <expr pos:start="37:16" pos:end="37:17"><operator pos:start="37:16" pos:end="37:16">-</operator><literal type="number" pos:start="37:17" pos:end="37:17">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:18"><expr pos:start="39:5" pos:end="39:17"><call pos:start="39:5" pos:end="39:17"><name pos:start="39:5" pos:end="39:13">avio_rl32</name><argument_list pos:start="39:14" pos:end="39:17">(<argument pos:start="39:15" pos:end="39:16"><expr pos:start="39:15" pos:end="39:16"><name pos:start="39:15" pos:end="39:16">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="39:20" pos:end="39:34">/* file size */</comment>

    <expr_stmt pos:start="41:5" pos:end="41:24"><expr pos:start="41:5" pos:end="41:23"><name pos:start="41:5" pos:end="41:7">tag</name> <operator pos:start="41:9" pos:end="41:9">=</operator> <call pos:start="41:11" pos:end="41:23"><name pos:start="41:11" pos:end="41:19">avio_rl32</name><argument_list pos:start="41:20" pos:end="41:23">(<argument pos:start="41:21" pos:end="41:22"><expr pos:start="41:21" pos:end="41:22"><name pos:start="41:21" pos:end="41:22">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="43:5" pos:end="45:18"><if pos:start="43:5" pos:end="45:18">if <condition pos:start="43:8" pos:end="43:41">(<expr pos:start="43:9" pos:end="43:40"><name pos:start="43:9" pos:end="43:11">tag</name> <operator pos:start="43:13" pos:end="43:14">!=</operator> <call pos:start="43:16" pos:end="43:40"><name pos:start="43:16" pos:end="43:20">MKTAG</name><argument_list pos:start="43:21" pos:end="43:40">(<argument pos:start="43:22" pos:end="43:24"><expr pos:start="43:22" pos:end="43:24"><literal type="char" pos:start="43:22" pos:end="43:24">'X'</literal></expr></argument>, <argument pos:start="43:27" pos:end="43:29"><expr pos:start="43:27" pos:end="43:29"><literal type="char" pos:start="43:27" pos:end="43:29">'W'</literal></expr></argument>, <argument pos:start="43:32" pos:end="43:34"><expr pos:start="43:32" pos:end="43:34"><literal type="char" pos:start="43:32" pos:end="43:34">'M'</literal></expr></argument>, <argument pos:start="43:37" pos:end="43:39"><expr pos:start="43:37" pos:end="43:39"><literal type="char" pos:start="43:37" pos:end="43:39">'A'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="45:9" pos:end="45:18"><block_content pos:start="45:9" pos:end="45:18">

        <return pos:start="45:9" pos:end="45:18">return <expr pos:start="45:16" pos:end="45:17"><operator pos:start="45:16" pos:end="45:16">-</operator><literal type="number" pos:start="45:17" pos:end="45:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="49:5" pos:end="49:26">/* parse fmt header */</comment>

    <expr_stmt pos:start="51:5" pos:end="51:24"><expr pos:start="51:5" pos:end="51:23"><name pos:start="51:5" pos:end="51:7">tag</name> <operator pos:start="51:9" pos:end="51:9">=</operator> <call pos:start="51:11" pos:end="51:23"><name pos:start="51:11" pos:end="51:19">avio_rl32</name><argument_list pos:start="51:20" pos:end="51:23">(<argument pos:start="51:21" pos:end="51:22"><expr pos:start="51:21" pos:end="51:22"><name pos:start="51:21" pos:end="51:22">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="55:18"><if pos:start="53:5" pos:end="55:18">if <condition pos:start="53:8" pos:end="53:41">(<expr pos:start="53:9" pos:end="53:40"><name pos:start="53:9" pos:end="53:11">tag</name> <operator pos:start="53:13" pos:end="53:14">!=</operator> <call pos:start="53:16" pos:end="53:40"><name pos:start="53:16" pos:end="53:20">MKTAG</name><argument_list pos:start="53:21" pos:end="53:40">(<argument pos:start="53:22" pos:end="53:24"><expr pos:start="53:22" pos:end="53:24"><literal type="char" pos:start="53:22" pos:end="53:24">'f'</literal></expr></argument>, <argument pos:start="53:27" pos:end="53:29"><expr pos:start="53:27" pos:end="53:29"><literal type="char" pos:start="53:27" pos:end="53:29">'m'</literal></expr></argument>, <argument pos:start="53:32" pos:end="53:34"><expr pos:start="53:32" pos:end="53:34"><literal type="char" pos:start="53:32" pos:end="53:34">'t'</literal></expr></argument>, <argument pos:start="53:37" pos:end="53:39"><expr pos:start="53:37" pos:end="53:39"><literal type="char" pos:start="53:37" pos:end="53:39">' '</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="55:9" pos:end="55:18"><block_content pos:start="55:9" pos:end="55:18">

        <return pos:start="55:9" pos:end="55:18">return <expr pos:start="55:16" pos:end="55:17"><operator pos:start="55:16" pos:end="55:16">-</operator><literal type="number" pos:start="55:17" pos:end="55:17">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:25"><expr pos:start="57:5" pos:end="57:24"><name pos:start="57:5" pos:end="57:8">size</name> <operator pos:start="57:10" pos:end="57:10">=</operator> <call pos:start="57:12" pos:end="57:24"><name pos:start="57:12" pos:end="57:20">avio_rl32</name><argument_list pos:start="57:21" pos:end="57:24">(<argument pos:start="57:22" pos:end="57:23"><expr pos:start="57:22" pos:end="57:23"><name pos:start="57:22" pos:end="57:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:29"><expr pos:start="59:5" pos:end="59:28"><name pos:start="59:5" pos:end="59:6">st</name> <operator pos:start="59:8" pos:end="59:8">=</operator> <call pos:start="59:10" pos:end="59:28"><name pos:start="59:10" pos:end="59:22">av_new_stream</name><argument_list pos:start="59:23" pos:end="59:28">(<argument pos:start="59:24" pos:end="59:24"><expr pos:start="59:24" pos:end="59:24"><name pos:start="59:24" pos:end="59:24">s</name></expr></argument>, <argument pos:start="59:27" pos:end="59:27"><expr pos:start="59:27" pos:end="59:27"><literal type="number" pos:start="59:27" pos:end="59:27">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="61:5" pos:end="63:31"><if pos:start="61:5" pos:end="63:31">if <condition pos:start="61:8" pos:end="61:12">(<expr pos:start="61:9" pos:end="61:11"><operator pos:start="61:9" pos:end="61:9">!</operator><name pos:start="61:10" pos:end="61:11">st</name></expr>)</condition><block type="pseudo" pos:start="63:9" pos:end="63:31"><block_content pos:start="63:9" pos:end="63:31">

        <return pos:start="63:9" pos:end="63:31">return <expr pos:start="63:16" pos:end="63:30"><call pos:start="63:16" pos:end="63:30"><name pos:start="63:16" pos:end="63:22">AVERROR</name><argument_list pos:start="63:23" pos:end="63:30">(<argument pos:start="63:24" pos:end="63:29"><expr pos:start="63:24" pos:end="63:29"><name pos:start="63:24" pos:end="63:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:43"><expr pos:start="67:5" pos:end="67:42"><call pos:start="67:5" pos:end="67:42"><name pos:start="67:5" pos:end="67:21">ff_get_wav_header</name><argument_list pos:start="67:22" pos:end="67:42">(<argument pos:start="67:23" pos:end="67:24"><expr pos:start="67:23" pos:end="67:24"><name pos:start="67:23" pos:end="67:24">pb</name></expr></argument>, <argument pos:start="67:27" pos:end="67:35"><expr pos:start="67:27" pos:end="67:35"><name pos:start="67:27" pos:end="67:35"><name pos:start="67:27" pos:end="67:28">st</name><operator pos:start="67:29" pos:end="67:30">-&gt;</operator><name pos:start="67:31" pos:end="67:35">codec</name></name></expr></argument>, <argument pos:start="67:38" pos:end="67:41"><expr pos:start="67:38" pos:end="67:41"><name pos:start="67:38" pos:end="67:41">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:43"><expr pos:start="69:5" pos:end="69:42"><name pos:start="69:5" pos:end="69:20"><name pos:start="69:5" pos:end="69:6">st</name><operator pos:start="69:7" pos:end="69:8">-&gt;</operator><name pos:start="69:9" pos:end="69:20">need_parsing</name></name> <operator pos:start="69:22" pos:end="69:22">=</operator> <name pos:start="69:24" pos:end="69:42">AVSTREAM_PARSE_NONE</name></expr>;</expr_stmt>



    <comment type="block" pos:start="73:5" pos:end="81:7">/* All xWMA files I have seen contained WMAv2 data. If there are files

     * using WMA Pro or some other codec, then we need to figure out the right

     * extradata for that. Thus, ask the user for feedback, but try to go on

     * anyway.

     */</comment>

    <if_stmt pos:start="83:5" pos:end="141:5"><if pos:start="83:5" pos:end="91:5">if <condition pos:start="83:8" pos:end="83:46">(<expr pos:start="83:9" pos:end="83:45"><name pos:start="83:9" pos:end="83:27"><name pos:start="83:9" pos:end="83:10">st</name><operator pos:start="83:11" pos:end="83:12">-&gt;</operator><name pos:start="83:13" pos:end="83:17">codec</name><operator pos:start="83:18" pos:end="83:19">-&gt;</operator><name pos:start="83:20" pos:end="83:27">codec_id</name></name> <operator pos:start="83:29" pos:end="83:30">!=</operator> <name pos:start="83:32" pos:end="83:45">CODEC_ID_WMAV2</name></expr>)</condition> <block pos:start="83:48" pos:end="91:5">{<block_content pos:start="85:9" pos:end="89:39">

        <expr_stmt pos:start="85:9" pos:end="87:73"><expr pos:start="85:9" pos:end="87:72"><call pos:start="85:9" pos:end="87:72"><name pos:start="85:9" pos:end="85:14">av_log</name><argument_list pos:start="85:15" pos:end="87:72">(<argument pos:start="85:16" pos:end="85:16"><expr pos:start="85:16" pos:end="85:16"><name pos:start="85:16" pos:end="85:16">s</name></expr></argument>, <argument pos:start="85:19" pos:end="85:32"><expr pos:start="85:19" pos:end="85:32"><name pos:start="85:19" pos:end="85:32">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="85:35" pos:end="85:74"><expr pos:start="85:35" pos:end="85:74"><literal type="string" pos:start="85:35" pos:end="85:74">"unexpected codec (tag 0x04%x; id %d)\n"</literal></expr></argument>,

                              <argument pos:start="87:31" pos:end="87:50"><expr pos:start="87:31" pos:end="87:50"><name pos:start="87:31" pos:end="87:50"><name pos:start="87:31" pos:end="87:32">st</name><operator pos:start="87:33" pos:end="87:34">-&gt;</operator><name pos:start="87:35" pos:end="87:39">codec</name><operator pos:start="87:40" pos:end="87:41">-&gt;</operator><name pos:start="87:42" pos:end="87:50">codec_tag</name></name></expr></argument>, <argument pos:start="87:53" pos:end="87:71"><expr pos:start="87:53" pos:end="87:71"><name pos:start="87:53" pos:end="87:71"><name pos:start="87:53" pos:end="87:54">st</name><operator pos:start="87:55" pos:end="87:56">-&gt;</operator><name pos:start="87:57" pos:end="87:61">codec</name><operator pos:start="87:62" pos:end="87:63">-&gt;</operator><name pos:start="87:64" pos:end="87:71">codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:39"><expr pos:start="89:9" pos:end="89:38"><call pos:start="89:9" pos:end="89:38"><name pos:start="89:9" pos:end="89:29">av_log_ask_for_sample</name><argument_list pos:start="89:30" pos:end="89:38">(<argument pos:start="89:31" pos:end="89:31"><expr pos:start="89:31" pos:end="89:31"><name pos:start="89:31" pos:end="89:31">s</name></expr></argument>, <argument pos:start="89:34" pos:end="89:37"><expr pos:start="89:34" pos:end="89:37"><name pos:start="89:34" pos:end="89:37">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="91:7" pos:end="141:5">else <block pos:start="91:12" pos:end="141:5">{<block_content pos:start="107:9" pos:end="139:9">

        <comment type="block" pos:start="93:9" pos:end="105:11">/* In all xWMA files I have seen, there is no extradata. But the WMA

         * codecs require extradata, so we provide our own fake extradata.

         *

         * First, check that there really was no extradata in the header. If

         * there was, then try to use, after asking the the user to provide a

         * sample of this unusual file.

         */</comment>

        <if_stmt pos:start="107:9" pos:end="139:9"><if pos:start="107:9" pos:end="123:9">if <condition pos:start="107:12" pos:end="107:43">(<expr pos:start="107:13" pos:end="107:42"><name pos:start="107:13" pos:end="107:37"><name pos:start="107:13" pos:end="107:14">st</name><operator pos:start="107:15" pos:end="107:16">-&gt;</operator><name pos:start="107:17" pos:end="107:21">codec</name><operator pos:start="107:22" pos:end="107:23">-&gt;</operator><name pos:start="107:24" pos:end="107:37">extradata_size</name></name> <operator pos:start="107:39" pos:end="107:40">!=</operator> <literal type="number" pos:start="107:42" pos:end="107:42">0</literal></expr>)</condition> <block pos:start="107:45" pos:end="123:9">{<block_content pos:start="117:13" pos:end="121:43">

            <comment type="block" pos:start="109:13" pos:end="115:15">/* Surprise, surprise: We *did* get some extradata. No idea

             * if it will work, but just go on and try it, after asking

             * the user for a sample.

             */</comment>

            <expr_stmt pos:start="117:13" pos:end="119:61"><expr pos:start="117:13" pos:end="119:60"><call pos:start="117:13" pos:end="119:60"><name pos:start="117:13" pos:end="117:18">av_log</name><argument_list pos:start="117:19" pos:end="119:60">(<argument pos:start="117:20" pos:end="117:20"><expr pos:start="117:20" pos:end="117:20"><name pos:start="117:20" pos:end="117:20">s</name></expr></argument>, <argument pos:start="117:23" pos:end="117:36"><expr pos:start="117:23" pos:end="117:36"><name pos:start="117:23" pos:end="117:36">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="117:39" pos:end="117:73"><expr pos:start="117:39" pos:end="117:73"><literal type="string" pos:start="117:39" pos:end="117:73">"unexpected extradata (%d bytes)\n"</literal></expr></argument>,

                                  <argument pos:start="119:35" pos:end="119:59"><expr pos:start="119:35" pos:end="119:59"><name pos:start="119:35" pos:end="119:59"><name pos:start="119:35" pos:end="119:36">st</name><operator pos:start="119:37" pos:end="119:38">-&gt;</operator><name pos:start="119:39" pos:end="119:43">codec</name><operator pos:start="119:44" pos:end="119:45">-&gt;</operator><name pos:start="119:46" pos:end="119:59">extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="121:13" pos:end="121:43"><expr pos:start="121:13" pos:end="121:42"><call pos:start="121:13" pos:end="121:42"><name pos:start="121:13" pos:end="121:33">av_log_ask_for_sample</name><argument_list pos:start="121:34" pos:end="121:42">(<argument pos:start="121:35" pos:end="121:35"><expr pos:start="121:35" pos:end="121:35"><name pos:start="121:35" pos:end="121:35">s</name></expr></argument>, <argument pos:start="121:38" pos:end="121:41"><expr pos:start="121:38" pos:end="121:41"><name pos:start="121:38" pos:end="121:41">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="123:11" pos:end="139:9">else <block pos:start="123:16" pos:end="139:9">{<block_content pos:start="125:13" pos:end="137:41">

            <expr_stmt pos:start="125:13" pos:end="125:42"><expr pos:start="125:13" pos:end="125:41"><name pos:start="125:13" pos:end="125:37"><name pos:start="125:13" pos:end="125:14">st</name><operator pos:start="125:15" pos:end="125:16">-&gt;</operator><name pos:start="125:17" pos:end="125:21">codec</name><operator pos:start="125:22" pos:end="125:23">-&gt;</operator><name pos:start="125:24" pos:end="125:37">extradata_size</name></name> <operator pos:start="125:39" pos:end="125:39">=</operator> <literal type="number" pos:start="125:41" pos:end="125:41">6</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="127:13" pos:end="127:85"><expr pos:start="127:13" pos:end="127:84"><name pos:start="127:13" pos:end="127:32"><name pos:start="127:13" pos:end="127:14">st</name><operator pos:start="127:15" pos:end="127:16">-&gt;</operator><name pos:start="127:17" pos:end="127:21">codec</name><operator pos:start="127:22" pos:end="127:23">-&gt;</operator><name pos:start="127:24" pos:end="127:32">extradata</name></name>      <operator pos:start="127:39" pos:end="127:39">=</operator> <call pos:start="127:41" pos:end="127:84"><name pos:start="127:41" pos:end="127:50">av_mallocz</name><argument_list pos:start="127:51" pos:end="127:84">(<argument pos:start="127:52" pos:end="127:83"><expr pos:start="127:52" pos:end="127:83"><literal type="number" pos:start="127:52" pos:end="127:54">6</literal> <operator pos:start="127:54" pos:end="127:54">+</operator> <name pos:start="127:56" pos:end="127:83">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="129:13" pos:end="131:39"><if pos:start="129:13" pos:end="131:39">if <condition pos:start="129:16" pos:end="129:38">(<expr pos:start="129:17" pos:end="129:37"><operator pos:start="129:17" pos:end="129:17">!</operator><name pos:start="129:18" pos:end="129:37"><name pos:start="129:18" pos:end="129:19">st</name><operator pos:start="129:20" pos:end="129:21">-&gt;</operator><name pos:start="129:22" pos:end="129:26">codec</name><operator pos:start="129:27" pos:end="129:28">-&gt;</operator><name pos:start="129:29" pos:end="129:37">extradata</name></name></expr>)</condition><block type="pseudo" pos:start="131:17" pos:end="131:39"><block_content pos:start="131:17" pos:end="131:39">

                <return pos:start="131:17" pos:end="131:39">return <expr pos:start="131:24" pos:end="131:38"><call pos:start="131:24" pos:end="131:38"><name pos:start="131:24" pos:end="131:30">AVERROR</name><argument_list pos:start="131:31" pos:end="131:38">(<argument pos:start="131:32" pos:end="131:37"><expr pos:start="131:32" pos:end="131:37"><name pos:start="131:32" pos:end="131:37">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



            <comment type="block" pos:start="135:13" pos:end="135:72">/* setup extradata with our experimentally obtained value */</comment>

            <expr_stmt pos:start="137:13" pos:end="137:41"><expr pos:start="137:13" pos:end="137:40"><name pos:start="137:13" pos:end="137:35"><name pos:start="137:13" pos:end="137:14">st</name><operator pos:start="137:15" pos:end="137:16">-&gt;</operator><name pos:start="137:17" pos:end="137:21">codec</name><operator pos:start="137:22" pos:end="137:23">-&gt;</operator><name pos:start="137:24" pos:end="137:32">extradata</name><index pos:start="137:33" pos:end="137:35">[<expr pos:start="137:34" pos:end="137:34"><literal type="number" pos:start="137:34" pos:end="137:34">4</literal></expr>]</index></name> <operator pos:start="137:37" pos:end="137:37">=</operator> <literal type="number" pos:start="137:39" pos:end="137:40">31</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="145:5" pos:end="145:29">/* set the sample rate */</comment>

    <expr_stmt pos:start="147:5" pos:end="147:55"><expr pos:start="147:5" pos:end="147:54"><call pos:start="147:5" pos:end="147:54"><name pos:start="147:5" pos:end="147:19">av_set_pts_info</name><argument_list pos:start="147:20" pos:end="147:54">(<argument pos:start="147:21" pos:end="147:22"><expr pos:start="147:21" pos:end="147:22"><name pos:start="147:21" pos:end="147:22">st</name></expr></argument>, <argument pos:start="147:25" pos:end="147:26"><expr pos:start="147:25" pos:end="147:26"><literal type="number" pos:start="147:25" pos:end="147:26">64</literal></expr></argument>, <argument pos:start="147:29" pos:end="147:29"><expr pos:start="147:29" pos:end="147:29"><literal type="number" pos:start="147:29" pos:end="147:29">1</literal></expr></argument>, <argument pos:start="147:32" pos:end="147:53"><expr pos:start="147:32" pos:end="147:53"><name pos:start="147:32" pos:end="147:53"><name pos:start="147:32" pos:end="147:33">st</name><operator pos:start="147:34" pos:end="147:35">-&gt;</operator><name pos:start="147:36" pos:end="147:40">codec</name><operator pos:start="147:41" pos:end="147:42">-&gt;</operator><name pos:start="147:43" pos:end="147:53">sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="151:5" pos:end="151:41">/* parse the remaining RIFF chunks */</comment>

    <for pos:start="153:5" pos:end="253:5">for <control pos:start="153:9" pos:end="153:12">(<init pos:start="153:10" pos:end="153:10">;</init><condition pos:start="153:11" pos:end="153:11">;</condition><incr/>)</control> <block pos:start="153:14" pos:end="253:5">{<block_content pos:start="155:9" pos:end="251:28">

        <if_stmt pos:start="155:9" pos:end="157:22"><if pos:start="155:9" pos:end="157:22">if <condition pos:start="155:12" pos:end="155:28">(<expr pos:start="155:13" pos:end="155:27"><name pos:start="155:13" pos:end="155:27"><name pos:start="155:13" pos:end="155:14">pb</name><operator pos:start="155:15" pos:end="155:16">-&gt;</operator><name pos:start="155:17" pos:end="155:27">eof_reached</name></name></expr>)</condition><block type="pseudo" pos:start="157:13" pos:end="157:22"><block_content pos:start="157:13" pos:end="157:22">

            <return pos:start="157:13" pos:end="157:22">return <expr pos:start="157:20" pos:end="157:21"><operator pos:start="157:20" pos:end="157:20">-</operator><literal type="number" pos:start="157:21" pos:end="157:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <comment type="block" pos:start="159:9" pos:end="159:33">/* read next chunk tag */</comment>

        <expr_stmt pos:start="161:9" pos:end="161:28"><expr pos:start="161:9" pos:end="161:27"><name pos:start="161:9" pos:end="161:11">tag</name> <operator pos:start="161:13" pos:end="161:13">=</operator> <call pos:start="161:15" pos:end="161:27"><name pos:start="161:15" pos:end="161:23">avio_rl32</name><argument_list pos:start="161:24" pos:end="161:27">(<argument pos:start="161:25" pos:end="161:26"><expr pos:start="161:25" pos:end="161:26"><name pos:start="161:25" pos:end="161:26">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:29"><expr pos:start="163:9" pos:end="163:28"><name pos:start="163:9" pos:end="163:12">size</name> <operator pos:start="163:14" pos:end="163:14">=</operator> <call pos:start="163:16" pos:end="163:28"><name pos:start="163:16" pos:end="163:24">avio_rl32</name><argument_list pos:start="163:25" pos:end="163:28">(<argument pos:start="163:26" pos:end="163:27"><expr pos:start="163:26" pos:end="163:27"><name pos:start="163:26" pos:end="163:27">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="165:9" pos:end="249:9"><if pos:start="165:9" pos:end="171:9">if <condition pos:start="165:12" pos:end="165:45">(<expr pos:start="165:13" pos:end="165:44"><name pos:start="165:13" pos:end="165:15">tag</name> <operator pos:start="165:17" pos:end="165:18">==</operator> <call pos:start="165:20" pos:end="165:44"><name pos:start="165:20" pos:end="165:24">MKTAG</name><argument_list pos:start="165:25" pos:end="165:44">(<argument pos:start="165:26" pos:end="165:28"><expr pos:start="165:26" pos:end="165:28"><literal type="char" pos:start="165:26" pos:end="165:28">'d'</literal></expr></argument>, <argument pos:start="165:31" pos:end="165:33"><expr pos:start="165:31" pos:end="165:33"><literal type="char" pos:start="165:31" pos:end="165:33">'a'</literal></expr></argument>, <argument pos:start="165:36" pos:end="165:38"><expr pos:start="165:36" pos:end="165:38"><literal type="char" pos:start="165:36" pos:end="165:38">'t'</literal></expr></argument>, <argument pos:start="165:41" pos:end="165:43"><expr pos:start="165:41" pos:end="165:43"><literal type="char" pos:start="165:41" pos:end="165:43">'a'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="165:47" pos:end="171:9">{<block_content pos:start="169:13" pos:end="169:18">

            <comment type="block" pos:start="167:13" pos:end="167:59">/* We assume that the data chunk comes last. */</comment>

            <break pos:start="169:13" pos:end="169:18">break;</break>

        </block_content>}</block></if> <if type="elseif" pos:start="171:11" pos:end="249:9">else if <condition pos:start="171:19" pos:end="171:49">(<expr pos:start="171:20" pos:end="171:48"><name pos:start="171:20" pos:end="171:22">tag</name> <operator pos:start="171:24" pos:end="171:25">==</operator> <call pos:start="171:27" pos:end="171:48"><name pos:start="171:27" pos:end="171:31">MKTAG</name><argument_list pos:start="171:32" pos:end="171:48">(<argument pos:start="171:33" pos:end="171:35"><expr pos:start="171:33" pos:end="171:35"><literal type="char" pos:start="171:33" pos:end="171:35">'d'</literal></expr></argument>,<argument pos:start="171:37" pos:end="171:39"><expr pos:start="171:37" pos:end="171:39"><literal type="char" pos:start="171:37" pos:end="171:39">'p'</literal></expr></argument>,<argument pos:start="171:41" pos:end="171:43"><expr pos:start="171:41" pos:end="171:43"><literal type="char" pos:start="171:41" pos:end="171:43">'d'</literal></expr></argument>,<argument pos:start="171:45" pos:end="171:47"><expr pos:start="171:45" pos:end="171:47"><literal type="char" pos:start="171:45" pos:end="171:47">'s'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="171:51" pos:end="249:9">{<block_content pos:start="195:13" pos:end="247:13">

            <comment type="block" pos:start="173:13" pos:end="189:15">/* Quoting the MSDN xWMA docs on the dpds chunk: "Contains the

             * decoded packet cumulative data size array, each element is the

             * number of bytes accumulated after the corresponding xWMA packet

             * is decoded in order"

             *

             * Each packet has size equal to st-&gt;codec-&gt;block_align, which in

             * all cases I saw so far was always 2230. Thus, we can use the

             * dpds data to compute a seeking index.

             */</comment>



            <comment type="block" pos:start="193:13" pos:end="193:65">/* Error out if there is more than one dpds chunk. */</comment>

            <if_stmt pos:start="195:13" pos:end="201:13"><if pos:start="195:13" pos:end="201:13">if <condition pos:start="195:16" pos:end="195:27">(<expr pos:start="195:17" pos:end="195:26"><name pos:start="195:17" pos:end="195:26">dpds_table</name></expr>)</condition> <block pos:start="195:29" pos:end="201:13">{<block_content pos:start="197:17" pos:end="199:26">

                <expr_stmt pos:start="197:17" pos:end="197:69"><expr pos:start="197:17" pos:end="197:68"><call pos:start="197:17" pos:end="197:68"><name pos:start="197:17" pos:end="197:22">av_log</name><argument_list pos:start="197:23" pos:end="197:68">(<argument pos:start="197:24" pos:end="197:24"><expr pos:start="197:24" pos:end="197:24"><name pos:start="197:24" pos:end="197:24">s</name></expr></argument>, <argument pos:start="197:27" pos:end="197:38"><expr pos:start="197:27" pos:end="197:38"><name pos:start="197:27" pos:end="197:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="197:41" pos:end="197:67"><expr pos:start="197:41" pos:end="197:67"><literal type="string" pos:start="197:41" pos:end="197:67">"two dpds chunks present\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="199:17" pos:end="199:26">return <expr pos:start="199:24" pos:end="199:25"><operator pos:start="199:24" pos:end="199:24">-</operator><literal type="number" pos:start="199:25" pos:end="199:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="205:13" pos:end="205:66">/* Compute the number of entries in the dpds chunk. */</comment>

            <if_stmt pos:start="207:13" pos:end="211:13"><if pos:start="207:13" pos:end="211:13">if <condition pos:start="207:16" pos:end="207:25">(<expr pos:start="207:17" pos:end="207:24"><name pos:start="207:17" pos:end="207:20">size</name> <operator pos:start="207:22" pos:end="207:22">&amp;</operator> <literal type="number" pos:start="207:24" pos:end="207:24">3</literal></expr>)</condition> <block pos:start="207:27" pos:end="211:13">{<block_content pos:start="209:17" pos:end="209:97">  <comment type="block" pos:start="207:30" pos:end="207:67">/* Size should be divisible by four */</comment>

                <expr_stmt pos:start="209:17" pos:end="209:97"><expr pos:start="209:17" pos:end="209:96"><call pos:start="209:17" pos:end="209:96"><name pos:start="209:17" pos:end="209:22">av_log</name><argument_list pos:start="209:23" pos:end="209:96">(<argument pos:start="209:24" pos:end="209:24"><expr pos:start="209:24" pos:end="209:24"><name pos:start="209:24" pos:end="209:24">s</name></expr></argument>, <argument pos:start="209:27" pos:end="209:40"><expr pos:start="209:27" pos:end="209:40"><name pos:start="209:27" pos:end="209:40">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="209:43" pos:end="209:89"><expr pos:start="209:43" pos:end="209:89"><literal type="string" pos:start="209:43" pos:end="209:60">"dpds chunk size "</literal><name pos:start="209:61" pos:end="209:66">PRId64</name><literal type="string" pos:start="209:67" pos:end="209:89">" not divisible by 4\n"</literal></expr></argument>, <argument pos:start="209:92" pos:end="209:95"><expr pos:start="209:92" pos:end="209:95"><name pos:start="209:92" pos:end="209:95">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="213:13" pos:end="213:39"><expr pos:start="213:13" pos:end="213:38"><name pos:start="213:13" pos:end="213:27">dpds_table_size</name> <operator pos:start="213:29" pos:end="213:29">=</operator> <name pos:start="213:31" pos:end="213:34">size</name> <operator pos:start="213:36" pos:end="213:36">/</operator> <literal type="number" pos:start="213:38" pos:end="213:38">4</literal></expr>;</expr_stmt>

            <if_stmt pos:start="215:13" pos:end="221:13"><if pos:start="215:13" pos:end="221:13">if <condition pos:start="215:16" pos:end="215:71">(<expr pos:start="215:17" pos:end="215:70"><name pos:start="215:17" pos:end="215:31">dpds_table_size</name> <operator pos:start="215:33" pos:end="215:34">==</operator> <literal type="number" pos:start="215:36" pos:end="215:36">0</literal> <operator pos:start="215:38" pos:end="215:39">||</operator> <name pos:start="215:41" pos:end="215:55">dpds_table_size</name> <operator pos:start="215:57" pos:end="215:58">&gt;=</operator> <name pos:start="215:60" pos:end="215:66">INT_MAX</name> <operator pos:start="215:68" pos:end="215:68">/</operator> <literal type="number" pos:start="215:70" pos:end="215:70">4</literal></expr>)</condition> <block pos:start="215:73" pos:end="221:13">{<block_content pos:start="217:17" pos:end="219:26">

                <expr_stmt pos:start="217:17" pos:end="217:84"><expr pos:start="217:17" pos:end="217:83"><call pos:start="217:17" pos:end="217:83"><name pos:start="217:17" pos:end="217:22">av_log</name><argument_list pos:start="217:23" pos:end="217:83">(<argument pos:start="217:24" pos:end="217:24"><expr pos:start="217:24" pos:end="217:24"><name pos:start="217:24" pos:end="217:24">s</name></expr></argument>, <argument pos:start="217:27" pos:end="217:38"><expr pos:start="217:27" pos:end="217:38"><name pos:start="217:27" pos:end="217:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="217:41" pos:end="217:76"><expr pos:start="217:41" pos:end="217:76"><literal type="string" pos:start="217:41" pos:end="217:58">"dpds chunk size "</literal><name pos:start="217:59" pos:end="217:64">PRId64</name><literal type="string" pos:start="217:65" pos:end="217:76">" invalid\n"</literal></expr></argument>, <argument pos:start="217:79" pos:end="217:82"><expr pos:start="217:79" pos:end="217:82"><name pos:start="217:79" pos:end="217:82">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="219:17" pos:end="219:26">return <expr pos:start="219:24" pos:end="219:25"><operator pos:start="219:24" pos:end="219:24">-</operator><literal type="number" pos:start="219:25" pos:end="219:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="225:13" pos:end="229:15">/* Allocate some temporary storage to keep the dpds data around.

             * for processing later on.

             */</comment>

            <expr_stmt pos:start="231:13" pos:end="231:71"><expr pos:start="231:13" pos:end="231:70"><name pos:start="231:13" pos:end="231:22">dpds_table</name> <operator pos:start="231:24" pos:end="231:24">=</operator> <call pos:start="231:26" pos:end="231:70"><name pos:start="231:26" pos:end="231:34">av_malloc</name><argument_list pos:start="231:35" pos:end="231:70">(<argument pos:start="231:36" pos:end="231:69"><expr pos:start="231:36" pos:end="231:69"><name pos:start="231:36" pos:end="231:50">dpds_table_size</name> <operator pos:start="231:52" pos:end="231:52">*</operator> <sizeof pos:start="231:54" pos:end="231:69">sizeof<argument_list pos:start="231:60" pos:end="231:69">(<argument pos:start="231:61" pos:end="231:68"><expr pos:start="231:61" pos:end="231:68"><name pos:start="231:61" pos:end="231:68">uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="233:13" pos:end="237:13"><if pos:start="233:13" pos:end="237:13">if <condition pos:start="233:16" pos:end="233:28">(<expr pos:start="233:17" pos:end="233:27"><operator pos:start="233:17" pos:end="233:17">!</operator><name pos:start="233:18" pos:end="233:27">dpds_table</name></expr>)</condition> <block pos:start="233:30" pos:end="237:13">{<block_content pos:start="235:17" pos:end="235:39">

                <return pos:start="235:17" pos:end="235:39">return <expr pos:start="235:24" pos:end="235:38"><call pos:start="235:24" pos:end="235:38"><name pos:start="235:24" pos:end="235:30">AVERROR</name><argument_list pos:start="235:31" pos:end="235:38">(<argument pos:start="235:32" pos:end="235:37"><expr pos:start="235:32" pos:end="235:37"><name pos:start="235:32" pos:end="235:37">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <for pos:start="241:13" pos:end="247:13">for <control pos:start="241:17" pos:end="241:49">(<init pos:start="241:18" pos:end="241:23"><expr pos:start="241:18" pos:end="241:22"><name pos:start="241:18" pos:end="241:18">i</name> <operator pos:start="241:20" pos:end="241:20">=</operator> <literal type="number" pos:start="241:22" pos:end="241:22">0</literal></expr>;</init> <condition pos:start="241:25" pos:end="241:44"><expr pos:start="241:25" pos:end="241:43"><name pos:start="241:25" pos:end="241:25">i</name> <operator pos:start="241:27" pos:end="241:27">&lt;</operator> <name pos:start="241:29" pos:end="241:43">dpds_table_size</name></expr>;</condition> <incr pos:start="241:46" pos:end="241:48"><expr pos:start="241:46" pos:end="241:48"><operator pos:start="241:46" pos:end="241:47">++</operator><name pos:start="241:48" pos:end="241:48">i</name></expr></incr>)</control> <block pos:start="241:51" pos:end="247:13">{<block_content pos:start="243:17" pos:end="245:26">

                <expr_stmt pos:start="243:17" pos:end="243:46"><expr pos:start="243:17" pos:end="243:45"><name pos:start="243:17" pos:end="243:29"><name pos:start="243:17" pos:end="243:26">dpds_table</name><index pos:start="243:27" pos:end="243:29">[<expr pos:start="243:28" pos:end="243:28"><name pos:start="243:28" pos:end="243:28">i</name></expr>]</index></name> <operator pos:start="243:31" pos:end="243:31">=</operator> <call pos:start="243:33" pos:end="243:45"><name pos:start="243:33" pos:end="243:41">avio_rl32</name><argument_list pos:start="243:42" pos:end="243:45">(<argument pos:start="243:43" pos:end="243:44"><expr pos:start="243:43" pos:end="243:44"><name pos:start="243:43" pos:end="243:44">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="245:17" pos:end="245:26"><expr pos:start="245:17" pos:end="245:25"><name pos:start="245:17" pos:end="245:20">size</name> <operator pos:start="245:22" pos:end="245:23">-=</operator> <literal type="number" pos:start="245:25" pos:end="245:25">4</literal></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="251:9" pos:end="251:28"><expr pos:start="251:9" pos:end="251:27"><call pos:start="251:9" pos:end="251:27"><name pos:start="251:9" pos:end="251:17">avio_skip</name><argument_list pos:start="251:18" pos:end="251:27">(<argument pos:start="251:19" pos:end="251:20"><expr pos:start="251:19" pos:end="251:20"><name pos:start="251:19" pos:end="251:20">pb</name></expr></argument>, <argument pos:start="251:23" pos:end="251:26"><expr pos:start="251:23" pos:end="251:26"><name pos:start="251:23" pos:end="251:26">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="257:5" pos:end="257:39">/* Determine overall data length */</comment>

    <if_stmt pos:start="259:5" pos:end="261:18"><if pos:start="259:5" pos:end="261:18">if <condition pos:start="259:8" pos:end="259:17">(<expr pos:start="259:9" pos:end="259:16"><name pos:start="259:9" pos:end="259:12">size</name> <operator pos:start="259:14" pos:end="259:14">&lt;</operator> <literal type="number" pos:start="259:16" pos:end="259:16">0</literal></expr>)</condition><block type="pseudo" pos:start="261:9" pos:end="261:18"><block_content pos:start="261:9" pos:end="261:18">

        <return pos:start="261:9" pos:end="261:18">return <expr pos:start="261:16" pos:end="261:17"><operator pos:start="261:16" pos:end="261:16">-</operator><literal type="number" pos:start="261:17" pos:end="261:17">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="263:5" pos:end="269:46"><if pos:start="263:5" pos:end="267:5">if <condition pos:start="263:8" pos:end="263:14">(<expr pos:start="263:9" pos:end="263:13"><operator pos:start="263:9" pos:end="263:9">!</operator><name pos:start="263:10" pos:end="263:13">size</name></expr>)</condition> <block pos:start="263:16" pos:end="267:5">{<block_content pos:start="265:9" pos:end="265:35">

        <expr_stmt pos:start="265:9" pos:end="265:35"><expr pos:start="265:9" pos:end="265:34"><name pos:start="265:9" pos:end="265:22"><name pos:start="265:9" pos:end="265:12">xwma</name><operator pos:start="265:13" pos:end="265:14">-&gt;</operator><name pos:start="265:15" pos:end="265:22">data_end</name></name> <operator pos:start="265:24" pos:end="265:24">=</operator> <name pos:start="265:26" pos:end="265:34">INT64_MAX</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="267:7" pos:end="269:46">else<block type="pseudo" pos:start="269:9" pos:end="269:46"><block_content pos:start="269:9" pos:end="269:46">

        <expr_stmt pos:start="269:9" pos:end="269:46"><expr pos:start="269:9" pos:end="269:45"><name pos:start="269:9" pos:end="269:22"><name pos:start="269:9" pos:end="269:12">xwma</name><operator pos:start="269:13" pos:end="269:14">-&gt;</operator><name pos:start="269:15" pos:end="269:22">data_end</name></name> <operator pos:start="269:24" pos:end="269:24">=</operator> <call pos:start="269:26" pos:end="269:38"><name pos:start="269:26" pos:end="269:34">avio_tell</name><argument_list pos:start="269:35" pos:end="269:38">(<argument pos:start="269:36" pos:end="269:37"><expr pos:start="269:36" pos:end="269:37"><name pos:start="269:36" pos:end="269:37">pb</name></expr></argument>)</argument_list></call> <operator pos:start="269:40" pos:end="269:40">+</operator> <name pos:start="269:42" pos:end="269:45">size</name></expr>;</expr_stmt></block_content></block></else></if_stmt>





    <if_stmt pos:start="275:5" pos:end="349:5"><if pos:start="275:5" pos:end="337:5">if <condition pos:start="275:8" pos:end="275:38">(<expr pos:start="275:9" pos:end="275:37"><name pos:start="275:9" pos:end="275:18">dpds_table</name> <operator pos:start="275:20" pos:end="275:21">&amp;&amp;</operator> <name pos:start="275:23" pos:end="275:37">dpds_table_size</name></expr>)</condition> <block pos:start="275:40" pos:end="337:5">{<block_content pos:start="277:9" pos:end="335:9">

        <decl_stmt pos:start="277:9" pos:end="277:24"><decl pos:start="277:9" pos:end="277:23"><type pos:start="277:9" pos:end="277:15"><name pos:start="277:9" pos:end="277:15">int64_t</name></type> <name pos:start="277:17" pos:end="277:23">cur_pos</name></decl>;</decl_stmt>

        <decl_stmt pos:start="279:9" pos:end="281:80"><decl pos:start="279:9" pos:end="281:79"><type pos:start="279:9" pos:end="279:22"><specifier pos:start="279:9" pos:end="279:13">const</specifier> <name pos:start="279:15" pos:end="279:22">uint32_t</name></type> <name pos:start="279:24" pos:end="279:39">bytes_per_sample</name>

                <init pos:start="281:17" pos:end="281:79">= <expr pos:start="281:19" pos:end="281:79"><operator pos:start="281:19" pos:end="281:19">(</operator><name pos:start="281:20" pos:end="281:38"><name pos:start="281:20" pos:end="281:21">st</name><operator pos:start="281:22" pos:end="281:23">-&gt;</operator><name pos:start="281:24" pos:end="281:28">codec</name><operator pos:start="281:29" pos:end="281:30">-&gt;</operator><name pos:start="281:31" pos:end="281:38">channels</name></name> <operator pos:start="281:40" pos:end="281:40">*</operator> <name pos:start="281:42" pos:end="281:73"><name pos:start="281:42" pos:end="281:43">st</name><operator pos:start="281:44" pos:end="281:45">-&gt;</operator><name pos:start="281:46" pos:end="281:50">codec</name><operator pos:start="281:51" pos:end="281:52">-&gt;</operator><name pos:start="281:53" pos:end="281:73">bits_per_coded_sample</name></name><operator pos:start="281:74" pos:end="281:74">)</operator> <operator pos:start="281:76" pos:end="281:77">&gt;&gt;</operator> <literal type="number" pos:start="281:79" pos:end="281:79">3</literal></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="285:9" pos:end="285:74">/* Estimate the duration from the total number of output bytes. */</comment>

        <decl_stmt pos:start="287:9" pos:end="287:77"><decl pos:start="287:9" pos:end="287:76"><type pos:start="287:9" pos:end="287:22"><specifier pos:start="287:9" pos:end="287:13">const</specifier> <name pos:start="287:15" pos:end="287:22">uint64_t</name></type> <name pos:start="287:24" pos:end="287:42">total_decoded_bytes</name> <init pos:start="287:44" pos:end="287:76">= <expr pos:start="287:46" pos:end="287:76"><name pos:start="287:46" pos:end="287:76"><name pos:start="287:46" pos:end="287:55">dpds_table</name><index pos:start="287:56" pos:end="287:76">[<expr pos:start="287:57" pos:end="287:75"><name pos:start="287:57" pos:end="287:71">dpds_table_size</name> <operator pos:start="287:73" pos:end="287:73">-</operator> <literal type="number" pos:start="287:75" pos:end="287:75">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="289:9" pos:end="289:62"><expr pos:start="289:9" pos:end="289:61"><name pos:start="289:9" pos:end="289:20"><name pos:start="289:9" pos:end="289:10">st</name><operator pos:start="289:11" pos:end="289:12">-&gt;</operator><name pos:start="289:13" pos:end="289:20">duration</name></name> <operator pos:start="289:22" pos:end="289:22">=</operator> <name pos:start="289:24" pos:end="289:42">total_decoded_bytes</name> <operator pos:start="289:44" pos:end="289:44">/</operator> <name pos:start="289:46" pos:end="289:61">bytes_per_sample</name></expr>;</expr_stmt>



        <comment type="block" pos:start="293:9" pos:end="309:11">/* Use the dpds data to build a seek table.  We can only do this after

         * we know the offset to the data chunk, as we need that to determine

         * the actual offset to each input block.

         * Note: If we allowed ourselves to assume that the data chunk always

         * follows immediately after the dpds block, we could of course guess

         * the data block's start offset already while reading the dpds chunk.

         * I decided against that, just in case other chunks ever are

         * discovered.

         */</comment>

        <expr_stmt pos:start="311:9" pos:end="311:32"><expr pos:start="311:9" pos:end="311:31"><name pos:start="311:9" pos:end="311:15">cur_pos</name> <operator pos:start="311:17" pos:end="311:17">=</operator> <call pos:start="311:19" pos:end="311:31"><name pos:start="311:19" pos:end="311:27">avio_tell</name><argument_list pos:start="311:28" pos:end="311:31">(<argument pos:start="311:29" pos:end="311:30"><expr pos:start="311:29" pos:end="311:30"><name pos:start="311:29" pos:end="311:30">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="313:9" pos:end="335:9">for <control pos:start="313:13" pos:end="313:45">(<init pos:start="313:14" pos:end="313:19"><expr pos:start="313:14" pos:end="313:18"><name pos:start="313:14" pos:end="313:14">i</name> <operator pos:start="313:16" pos:end="313:16">=</operator> <literal type="number" pos:start="313:18" pos:end="313:18">0</literal></expr>;</init> <condition pos:start="313:21" pos:end="313:40"><expr pos:start="313:21" pos:end="313:39"><name pos:start="313:21" pos:end="313:21">i</name> <operator pos:start="313:23" pos:end="313:23">&lt;</operator> <name pos:start="313:25" pos:end="313:39">dpds_table_size</name></expr>;</condition> <incr pos:start="313:42" pos:end="313:44"><expr pos:start="313:42" pos:end="313:44"><operator pos:start="313:42" pos:end="313:43">++</operator><name pos:start="313:44" pos:end="313:44">i</name></expr></incr>)</control> <block pos:start="313:47" pos:end="335:9">{<block_content pos:start="323:13" pos:end="333:49">

            <comment type="block" pos:start="315:13" pos:end="321:15">/* From the number of output bytes that would accumulate in the

             * output buffer after decoding the first (i+1) packets, we compute

             * an offset / timestamp pair.

             */</comment>

            <expr_stmt pos:start="323:13" pos:end="333:49"><expr pos:start="323:13" pos:end="333:48"><call pos:start="323:13" pos:end="333:48"><name pos:start="323:13" pos:end="323:30">av_add_index_entry</name><argument_list pos:start="323:31" pos:end="333:48">(<argument pos:start="323:32" pos:end="323:33"><expr pos:start="323:32" pos:end="323:33"><name pos:start="323:32" pos:end="323:33">st</name></expr></argument>,

                               <argument pos:start="325:32" pos:end="325:71"><expr pos:start="325:32" pos:end="325:71"><name pos:start="325:32" pos:end="325:38">cur_pos</name> <operator pos:start="325:40" pos:end="325:40">+</operator> <operator pos:start="325:42" pos:end="325:42">(</operator><name pos:start="325:43" pos:end="325:43">i</name><operator pos:start="325:44" pos:end="325:44">+</operator><literal type="number" pos:start="325:45" pos:end="325:45">1</literal><operator pos:start="325:46" pos:end="325:46">)</operator> <operator pos:start="325:48" pos:end="325:48">*</operator> <name pos:start="325:50" pos:end="325:71"><name pos:start="325:50" pos:end="325:51">st</name><operator pos:start="325:52" pos:end="325:53">-&gt;</operator><name pos:start="325:54" pos:end="325:58">codec</name><operator pos:start="325:59" pos:end="325:60">-&gt;</operator><name pos:start="325:61" pos:end="325:71">block_align</name></name></expr></argument>, <comment type="block" pos:start="325:74" pos:end="325:82">/* pos */</comment>

                               <argument pos:start="327:32" pos:end="327:63"><expr pos:start="327:32" pos:end="327:63"><name pos:start="327:32" pos:end="327:44"><name pos:start="327:32" pos:end="327:41">dpds_table</name><index pos:start="327:42" pos:end="327:44">[<expr pos:start="327:43" pos:end="327:43"><name pos:start="327:43" pos:end="327:43">i</name></expr>]</index></name> <operator pos:start="327:46" pos:end="327:46">/</operator> <name pos:start="327:48" pos:end="327:63">bytes_per_sample</name></expr></argument>,         <comment type="block" pos:start="327:74" pos:end="327:88">/* timestamp */</comment>

                               <argument pos:start="329:32" pos:end="329:53"><expr pos:start="329:32" pos:end="329:53"><name pos:start="329:32" pos:end="329:53"><name pos:start="329:32" pos:end="329:33">st</name><operator pos:start="329:34" pos:end="329:35">-&gt;</operator><name pos:start="329:36" pos:end="329:40">codec</name><operator pos:start="329:41" pos:end="329:42">-&gt;</operator><name pos:start="329:43" pos:end="329:53">block_align</name></name></expr></argument>,                   <comment type="block" pos:start="329:74" pos:end="329:83">/* size */</comment>

                               <argument pos:start="331:32" pos:end="331:32"><expr pos:start="331:32" pos:end="331:32"><literal type="number" pos:start="331:32" pos:end="331:32">0</literal></expr></argument>,                                        <comment type="block" pos:start="331:74" pos:end="331:87">/* duration */</comment>

                               <argument pos:start="333:32" pos:end="333:47"><expr pos:start="333:32" pos:end="333:47"><name pos:start="333:32" pos:end="333:47">AVINDEX_KEYFRAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <if type="elseif" pos:start="337:7" pos:end="349:5">else if <condition pos:start="337:15" pos:end="337:35">(<expr pos:start="337:16" pos:end="337:34"><name pos:start="337:16" pos:end="337:34"><name pos:start="337:16" pos:end="337:17">st</name><operator pos:start="337:18" pos:end="337:19">-&gt;</operator><name pos:start="337:20" pos:end="337:24">codec</name><operator pos:start="337:25" pos:end="337:26">-&gt;</operator><name pos:start="337:27" pos:end="337:34">bit_rate</name></name></expr>)</condition> <block pos:start="337:37" pos:end="349:5">{<block_content pos:start="347:9" pos:end="347:80">

        <comment type="block" pos:start="339:9" pos:end="345:11">/* No dpds chunk was present (or only an empty one), so estimate

         * the total duration using the average bits per sample and the

         * total data length.

         */</comment>

        <expr_stmt pos:start="347:9" pos:end="347:80"><expr pos:start="347:9" pos:end="347:79"><name pos:start="347:9" pos:end="347:20"><name pos:start="347:9" pos:end="347:10">st</name><operator pos:start="347:11" pos:end="347:12">-&gt;</operator><name pos:start="347:13" pos:end="347:20">duration</name></name> <operator pos:start="347:22" pos:end="347:22">=</operator> <operator pos:start="347:24" pos:end="347:24">(</operator><name pos:start="347:25" pos:end="347:28">size</name><operator pos:start="347:29" pos:end="347:30">&lt;&lt;</operator><literal type="number" pos:start="347:31" pos:end="347:31">3</literal><operator pos:start="347:32" pos:end="347:32">)</operator> <operator pos:start="347:34" pos:end="347:34">*</operator> <name pos:start="347:36" pos:end="347:57"><name pos:start="347:36" pos:end="347:37">st</name><operator pos:start="347:38" pos:end="347:39">-&gt;</operator><name pos:start="347:40" pos:end="347:44">codec</name><operator pos:start="347:45" pos:end="347:46">-&gt;</operator><name pos:start="347:47" pos:end="347:57">sample_rate</name></name> <operator pos:start="347:59" pos:end="347:59">/</operator> <name pos:start="347:61" pos:end="347:79"><name pos:start="347:61" pos:end="347:62">st</name><operator pos:start="347:63" pos:end="347:64">-&gt;</operator><name pos:start="347:65" pos:end="347:69">codec</name><operator pos:start="347:70" pos:end="347:71">-&gt;</operator><name pos:start="347:72" pos:end="347:79">bit_rate</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="353:5" pos:end="353:24"><expr pos:start="353:5" pos:end="353:23"><call pos:start="353:5" pos:end="353:23"><name pos:start="353:5" pos:end="353:11">av_free</name><argument_list pos:start="353:12" pos:end="353:23">(<argument pos:start="353:13" pos:end="353:22"><expr pos:start="353:13" pos:end="353:22"><name pos:start="353:13" pos:end="353:22">dpds_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="357:5" pos:end="357:13">return <expr pos:start="357:12" pos:end="357:12"><literal type="number" pos:start="357:12" pos:end="357:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
