<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6434.c" pos:tabs="8"><function pos:start="1:1" pos:end="104:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:26">check_stream_specifier</name><parameter_list pos:start="1:27" pos:end="1:78">(<parameter pos:start="1:28" pos:end="1:45"><decl pos:start="1:28" pos:end="1:45"><type pos:start="1:28" pos:end="1:45"><name pos:start="1:28" pos:end="1:42">AVFormatContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">s</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:59"><decl pos:start="1:48" pos:end="1:59"><type pos:start="1:48" pos:end="1:59"><name pos:start="1:48" pos:end="1:55">AVStream</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:59">st</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:77"><decl pos:start="1:62" pos:end="1:77"><type pos:start="1:62" pos:end="1:77"><specifier pos:start="1:62" pos:end="1:66">const</specifier> <name pos:start="1:68" pos:end="1:71">char</name> <modifier pos:start="1:73" pos:end="1:73">*</modifier></type><name pos:start="1:74" pos:end="1:77">spec</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="104:1">{<block_content pos:start="5:5" pos:end="102:27">

    <if_stmt pos:start="5:5" pos:end="96:17"><if pos:start="5:5" pos:end="7:50">if <condition pos:start="5:8" pos:end="5:37">(<expr pos:start="5:9" pos:end="5:36"><operator pos:start="5:9" pos:end="5:9">*</operator><name pos:start="5:10" pos:end="5:13">spec</name> <operator pos:start="5:15" pos:end="5:16">&lt;=</operator> <literal type="char" pos:start="5:18" pos:end="5:20">'9'</literal> <operator pos:start="5:22" pos:end="5:23">&amp;&amp;</operator> <operator pos:start="5:25" pos:end="5:25">*</operator><name pos:start="5:26" pos:end="5:29">spec</name> <operator pos:start="5:31" pos:end="5:32">&gt;=</operator> <literal type="char" pos:start="5:34" pos:end="5:36">'0'</literal></expr>)</condition><block type="pseudo" pos:start="7:9" pos:end="7:50"><block_content pos:start="7:9" pos:end="7:50"> <comment type="block" pos:start="5:39" pos:end="5:53">/* opt:index */</comment>

        <return pos:start="7:9" pos:end="7:50">return <expr pos:start="7:16" pos:end="7:49"><call pos:start="7:16" pos:end="7:36"><name pos:start="7:16" pos:end="7:21">strtol</name><argument_list pos:start="7:22" pos:end="7:36">(<argument pos:start="7:23" pos:end="7:26"><expr pos:start="7:23" pos:end="7:26"><name pos:start="7:23" pos:end="7:26">spec</name></expr></argument>, <argument pos:start="7:29" pos:end="7:32"><expr pos:start="7:29" pos:end="7:32"><name pos:start="7:29" pos:end="7:32">NULL</name></expr></argument>, <argument pos:start="7:35" pos:end="7:35"><expr pos:start="7:35" pos:end="7:35"><literal type="number" pos:start="7:35" pos:end="7:35">0</literal></expr></argument>)</argument_list></call> <operator pos:start="7:38" pos:end="7:39">==</operator> <name pos:start="7:41" pos:end="7:49"><name pos:start="7:41" pos:end="7:42">st</name><operator pos:start="7:43" pos:end="7:44">-&gt;</operator><name pos:start="7:45" pos:end="7:49">index</name></name></expr>;</return></block_content></block></if>

    <if type="elseif" pos:start="9:5" pos:end="52:5">else if <condition pos:start="9:13" pos:end="11:26">(<expr pos:start="9:14" pos:end="11:25"><operator pos:start="9:14" pos:end="9:14">*</operator><name pos:start="9:15" pos:end="9:18">spec</name> <operator pos:start="9:20" pos:end="9:21">==</operator> <literal type="char" pos:start="9:23" pos:end="9:25">'v'</literal> <operator pos:start="9:27" pos:end="9:28">||</operator> <operator pos:start="9:30" pos:end="9:30">*</operator><name pos:start="9:31" pos:end="9:34">spec</name> <operator pos:start="9:36" pos:end="9:37">==</operator> <literal type="char" pos:start="9:39" pos:end="9:41">'a'</literal> <operator pos:start="9:43" pos:end="9:44">||</operator> <operator pos:start="9:46" pos:end="9:46">*</operator><name pos:start="9:47" pos:end="9:50">spec</name> <operator pos:start="9:52" pos:end="9:53">==</operator> <literal type="char" pos:start="9:55" pos:end="9:57">'s'</literal> <operator pos:start="9:59" pos:end="9:60">||</operator> <operator pos:start="9:62" pos:end="9:62">*</operator><name pos:start="9:63" pos:end="9:66">spec</name> <operator pos:start="9:68" pos:end="9:69">==</operator> <literal type="char" pos:start="9:71" pos:end="9:73">'d'</literal> <operator pos:start="9:75" pos:end="9:76">||</operator>

             <operator pos:start="11:14" pos:end="11:14">*</operator><name pos:start="11:15" pos:end="11:18">spec</name> <operator pos:start="11:20" pos:end="11:21">==</operator> <literal type="char" pos:start="11:23" pos:end="11:25">'t'</literal></expr>)</condition> <block pos:start="11:28" pos:end="52:5">{<block_content pos:start="13:9" pos:end="50:17"> <comment type="block" pos:start="11:30" pos:end="11:46">/* opt:[vasdt] */</comment>

        <decl_stmt pos:start="13:9" pos:end="13:30"><decl pos:start="13:9" pos:end="13:29"><type pos:start="13:9" pos:end="13:24"><name pos:start="13:9" pos:end="13:24"><name pos:start="13:9" pos:end="13:12">enum</name> <name pos:start="13:14" pos:end="13:24">AVMediaType</name></name></type> <name pos:start="13:26" pos:end="13:29">type</name></decl>;</decl_stmt>



        <switch pos:start="17:9" pos:end="30:9">switch <condition pos:start="17:16" pos:end="17:24">(<expr pos:start="17:17" pos:end="17:23"><operator pos:start="17:17" pos:end="17:17">*</operator><name pos:start="17:18" pos:end="17:21">spec</name><operator pos:start="17:22" pos:end="17:23">++</operator></expr>)</condition> <block pos:start="17:26" pos:end="30:9">{<block_content pos:start="19:9" pos:end="27:56">

        <case pos:start="19:9" pos:end="19:17">case <expr pos:start="19:14" pos:end="19:16"><literal type="char" pos:start="19:14" pos:end="19:16">'v'</literal></expr>:</case> <expr_stmt pos:start="19:19" pos:end="19:44"><expr pos:start="19:19" pos:end="19:43"><name pos:start="19:19" pos:end="19:22">type</name> <operator pos:start="19:24" pos:end="19:24">=</operator> <name pos:start="19:26" pos:end="19:43">AVMEDIA_TYPE_VIDEO</name></expr>;</expr_stmt>      <break pos:start="19:51" pos:end="19:56">break;</break>

        <case pos:start="21:9" pos:end="21:17">case <expr pos:start="21:14" pos:end="21:16"><literal type="char" pos:start="21:14" pos:end="21:16">'a'</literal></expr>:</case> <expr_stmt pos:start="21:19" pos:end="21:44"><expr pos:start="21:19" pos:end="21:43"><name pos:start="21:19" pos:end="21:22">type</name> <operator pos:start="21:24" pos:end="21:24">=</operator> <name pos:start="21:26" pos:end="21:43">AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>      <break pos:start="21:51" pos:end="21:56">break;</break>

        <case pos:start="23:9" pos:end="23:17">case <expr pos:start="23:14" pos:end="23:16"><literal type="char" pos:start="23:14" pos:end="23:16">'s'</literal></expr>:</case> <expr_stmt pos:start="23:19" pos:end="23:47"><expr pos:start="23:19" pos:end="23:46"><name pos:start="23:19" pos:end="23:22">type</name> <operator pos:start="23:24" pos:end="23:24">=</operator> <name pos:start="23:26" pos:end="23:46">AVMEDIA_TYPE_SUBTITLE</name></expr>;</expr_stmt>   <break pos:start="23:51" pos:end="23:56">break;</break>

        <case pos:start="25:9" pos:end="25:17">case <expr pos:start="25:14" pos:end="25:16"><literal type="char" pos:start="25:14" pos:end="25:16">'d'</literal></expr>:</case> <expr_stmt pos:start="25:19" pos:end="25:43"><expr pos:start="25:19" pos:end="25:42"><name pos:start="25:19" pos:end="25:22">type</name> <operator pos:start="25:24" pos:end="25:24">=</operator> <name pos:start="25:26" pos:end="25:42">AVMEDIA_TYPE_DATA</name></expr>;</expr_stmt>       <break pos:start="25:51" pos:end="25:56">break;</break>

        <case pos:start="27:9" pos:end="27:17">case <expr pos:start="27:14" pos:end="27:16"><literal type="char" pos:start="27:14" pos:end="27:16">'t'</literal></expr>:</case> <expr_stmt pos:start="27:19" pos:end="27:49"><expr pos:start="27:19" pos:end="27:48"><name pos:start="27:19" pos:end="27:22">type</name> <operator pos:start="27:24" pos:end="27:24">=</operator> <name pos:start="27:26" pos:end="27:48">AVMEDIA_TYPE_ATTACHMENT</name></expr>;</expr_stmt> <break pos:start="27:51" pos:end="27:56">break;</break>


        </block_content>}</block></switch>

        <if_stmt pos:start="32:9" pos:end="34:21"><if pos:start="32:9" pos:end="34:21">if <condition pos:start="32:12" pos:end="32:42">(<expr pos:start="32:13" pos:end="32:41"><name pos:start="32:13" pos:end="32:16">type</name> <operator pos:start="32:18" pos:end="32:19">!=</operator> <name pos:start="32:21" pos:end="32:41"><name pos:start="32:21" pos:end="32:22">st</name><operator pos:start="32:23" pos:end="32:24">-&gt;</operator><name pos:start="32:25" pos:end="32:29">codec</name><operator pos:start="32:30" pos:end="32:31">-&gt;</operator><name pos:start="32:32" pos:end="32:41">codec_type</name></name></expr>)</condition><block type="pseudo" pos:start="34:13" pos:end="34:21"><block_content pos:start="34:13" pos:end="34:21">

            <return pos:start="34:13" pos:end="34:21">return <expr pos:start="34:20" pos:end="34:20"><literal type="number" pos:start="34:20" pos:end="34:20">0</literal></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="36:9" pos:end="48:9"><if pos:start="36:9" pos:end="48:9">if <condition pos:start="36:12" pos:end="36:27">(<expr pos:start="36:13" pos:end="36:26"><operator pos:start="36:13" pos:end="36:13">*</operator><name pos:start="36:14" pos:end="36:17">spec</name><operator pos:start="36:18" pos:end="36:19">++</operator> <operator pos:start="36:21" pos:end="36:22">==</operator> <literal type="char" pos:start="36:24" pos:end="36:26">':'</literal></expr>)</condition> <block pos:start="36:29" pos:end="48:9">{<block_content pos:start="38:13" pos:end="46:21"> <comment type="block" pos:start="36:31" pos:end="36:63">/* possibly followed by :index */</comment>

            <decl_stmt pos:start="38:13" pos:end="38:49"><decl pos:start="38:13" pos:end="38:17"><type pos:start="38:13" pos:end="38:15"><name pos:start="38:13" pos:end="38:15">int</name></type> <name pos:start="38:17" pos:end="38:17">i</name></decl>, <decl pos:start="38:20" pos:end="38:48"><type ref="prev" pos:start="38:13" pos:end="38:15"/><name pos:start="38:20" pos:end="38:24">index</name> <init pos:start="38:26" pos:end="38:48">= <expr pos:start="38:28" pos:end="38:48"><call pos:start="38:28" pos:end="38:48"><name pos:start="38:28" pos:end="38:33">strtol</name><argument_list pos:start="38:34" pos:end="38:48">(<argument pos:start="38:35" pos:end="38:38"><expr pos:start="38:35" pos:end="38:38"><name pos:start="38:35" pos:end="38:38">spec</name></expr></argument>, <argument pos:start="38:41" pos:end="38:44"><expr pos:start="38:41" pos:end="38:44"><name pos:start="38:41" pos:end="38:44">NULL</name></expr></argument>, <argument pos:start="38:47" pos:end="38:47"><expr pos:start="38:47" pos:end="38:47"><literal type="number" pos:start="38:47" pos:end="38:47">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <for pos:start="40:13" pos:end="44:41">for <control pos:start="40:17" pos:end="40:47">(<init pos:start="40:18" pos:end="40:23"><expr pos:start="40:18" pos:end="40:22"><name pos:start="40:18" pos:end="40:18">i</name> <operator pos:start="40:20" pos:end="40:20">=</operator> <literal type="number" pos:start="40:22" pos:end="40:22">0</literal></expr>;</init> <condition pos:start="40:25" pos:end="40:42"><expr pos:start="40:25" pos:end="40:41"><name pos:start="40:25" pos:end="40:25">i</name> <operator pos:start="40:27" pos:end="40:27">&lt;</operator> <name pos:start="40:29" pos:end="40:41"><name pos:start="40:29" pos:end="40:29">s</name><operator pos:start="40:30" pos:end="40:31">-&gt;</operator><name pos:start="40:32" pos:end="40:41">nb_streams</name></name></expr>;</condition> <incr pos:start="40:44" pos:end="40:46"><expr pos:start="40:44" pos:end="40:46"><name pos:start="40:44" pos:end="40:44">i</name><operator pos:start="40:45" pos:end="40:46">++</operator></expr></incr>)</control><block type="pseudo" pos:start="42:17" pos:end="44:41"><block_content pos:start="42:17" pos:end="44:41">

                <if_stmt pos:start="42:17" pos:end="44:41"><if pos:start="42:17" pos:end="44:41">if <condition pos:start="42:20" pos:end="42:77">(<expr pos:start="42:21" pos:end="42:76"><name pos:start="42:21" pos:end="42:33"><name pos:start="42:21" pos:end="42:21">s</name><operator pos:start="42:22" pos:end="42:23">-&gt;</operator><name pos:start="42:24" pos:end="42:30">streams</name><index pos:start="42:31" pos:end="42:33">[<expr pos:start="42:32" pos:end="42:32"><name pos:start="42:32" pos:end="42:32">i</name></expr>]</index></name><operator pos:start="42:34" pos:end="42:35">-&gt;</operator><name pos:start="42:36" pos:end="42:52"><name pos:start="42:36" pos:end="42:40">codec</name><operator pos:start="42:41" pos:end="42:42">-&gt;</operator><name pos:start="42:43" pos:end="42:52">codec_type</name></name> <operator pos:start="42:54" pos:end="42:55">==</operator> <name pos:start="42:57" pos:end="42:60">type</name> <operator pos:start="42:62" pos:end="42:63">&amp;&amp;</operator> <name pos:start="42:65" pos:end="42:69">index</name><operator pos:start="42:70" pos:end="42:71">--</operator> <operator pos:start="42:73" pos:end="42:74">==</operator> <literal type="number" pos:start="42:76" pos:end="42:76">0</literal></expr>)</condition><block type="pseudo" pos:start="44:20" pos:end="44:41"><block_content pos:start="44:20" pos:end="44:41">

                   <return pos:start="44:20" pos:end="44:41">return <expr pos:start="44:27" pos:end="44:40"><name pos:start="44:27" pos:end="44:27">i</name> <operator pos:start="44:29" pos:end="44:30">==</operator> <name pos:start="44:32" pos:end="44:40"><name pos:start="44:32" pos:end="44:33">st</name><operator pos:start="44:34" pos:end="44:35">-&gt;</operator><name pos:start="44:36" pos:end="44:40">index</name></name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

            <return pos:start="46:13" pos:end="46:21">return <expr pos:start="46:20" pos:end="46:20"><literal type="number" pos:start="46:20" pos:end="46:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <return pos:start="50:9" pos:end="50:17">return <expr pos:start="50:16" pos:end="50:16"><literal type="number" pos:start="50:16" pos:end="50:16">1</literal></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="52:7" pos:end="94:5">else if <condition pos:start="52:15" pos:end="52:50">(<expr pos:start="52:16" pos:end="52:49"><operator pos:start="52:16" pos:end="52:16">*</operator><name pos:start="52:17" pos:end="52:20">spec</name> <operator pos:start="52:22" pos:end="52:23">==</operator> <literal type="char" pos:start="52:25" pos:end="52:27">'p'</literal> <operator pos:start="52:29" pos:end="52:30">&amp;&amp;</operator> <operator pos:start="52:32" pos:end="52:32">*</operator><operator pos:start="52:33" pos:end="52:33">(</operator><name pos:start="52:34" pos:end="52:37">spec</name> <operator pos:start="52:39" pos:end="52:39">+</operator> <literal type="number" pos:start="52:41" pos:end="52:41">1</literal><operator pos:start="52:42" pos:end="52:42">)</operator> <operator pos:start="52:44" pos:end="52:45">==</operator> <literal type="char" pos:start="52:47" pos:end="52:49">':'</literal></expr>)</condition> <block pos:start="52:52" pos:end="94:5">{<block_content pos:start="54:9" pos:end="92:17">

        <decl_stmt pos:start="54:9" pos:end="54:26"><decl pos:start="54:9" pos:end="54:19"><type pos:start="54:9" pos:end="54:11"><name pos:start="54:9" pos:end="54:11">int</name></type> <name pos:start="54:13" pos:end="54:19">prog_id</name></decl>, <decl pos:start="54:22" pos:end="54:22"><type ref="prev" pos:start="54:9" pos:end="54:11"/><name pos:start="54:22" pos:end="54:22">i</name></decl>, <decl pos:start="54:25" pos:end="54:25"><type ref="prev" pos:start="54:9" pos:end="54:11"/><name pos:start="54:25" pos:end="54:25">j</name></decl>;</decl_stmt>

        <decl_stmt pos:start="56:9" pos:end="56:21"><decl pos:start="56:9" pos:end="56:20"><type pos:start="56:9" pos:end="56:14"><name pos:start="56:9" pos:end="56:12">char</name> <modifier pos:start="56:14" pos:end="56:14">*</modifier></type><name pos:start="56:15" pos:end="56:20">endptr</name></decl>;</decl_stmt>

        <expr_stmt pos:start="58:9" pos:end="58:18"><expr pos:start="58:9" pos:end="58:17"><name pos:start="58:9" pos:end="58:12">spec</name> <operator pos:start="58:14" pos:end="58:15">+=</operator> <literal type="number" pos:start="58:17" pos:end="58:17">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="60:9" pos:end="60:43"><expr pos:start="60:9" pos:end="60:42"><name pos:start="60:9" pos:end="60:15">prog_id</name> <operator pos:start="60:17" pos:end="60:17">=</operator> <call pos:start="60:19" pos:end="60:42"><name pos:start="60:19" pos:end="60:24">strtol</name><argument_list pos:start="60:25" pos:end="60:42">(<argument pos:start="60:26" pos:end="60:29"><expr pos:start="60:26" pos:end="60:29"><name pos:start="60:26" pos:end="60:29">spec</name></expr></argument>, <argument pos:start="60:32" pos:end="60:38"><expr pos:start="60:32" pos:end="60:38"><operator pos:start="60:32" pos:end="60:32">&amp;</operator><name pos:start="60:33" pos:end="60:38">endptr</name></expr></argument>, <argument pos:start="60:41" pos:end="60:41"><expr pos:start="60:41" pos:end="60:41"><literal type="number" pos:start="60:41" pos:end="60:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="62:9" pos:end="90:9">for <control pos:start="62:13" pos:end="62:44">(<init pos:start="62:14" pos:end="62:19"><expr pos:start="62:14" pos:end="62:18"><name pos:start="62:14" pos:end="62:14">i</name> <operator pos:start="62:16" pos:end="62:16">=</operator> <literal type="number" pos:start="62:18" pos:end="62:18">0</literal></expr>;</init> <condition pos:start="62:21" pos:end="62:39"><expr pos:start="62:21" pos:end="62:38"><name pos:start="62:21" pos:end="62:21">i</name> <operator pos:start="62:23" pos:end="62:23">&lt;</operator> <name pos:start="62:25" pos:end="62:38"><name pos:start="62:25" pos:end="62:25">s</name><operator pos:start="62:26" pos:end="62:27">-&gt;</operator><name pos:start="62:28" pos:end="62:38">nb_programs</name></name></expr>;</condition> <incr pos:start="62:41" pos:end="62:43"><expr pos:start="62:41" pos:end="62:43"><name pos:start="62:41" pos:end="62:41">i</name><operator pos:start="62:42" pos:end="62:43">++</operator></expr></incr>)</control> <block pos:start="62:46" pos:end="90:9">{<block_content pos:start="64:13" pos:end="88:29">

            <if_stmt pos:start="64:13" pos:end="66:25"><if pos:start="64:13" pos:end="66:25">if <condition pos:start="64:16" pos:end="64:46">(<expr pos:start="64:17" pos:end="64:45"><name pos:start="64:17" pos:end="64:30"><name pos:start="64:17" pos:end="64:17">s</name><operator pos:start="64:18" pos:end="64:19">-&gt;</operator><name pos:start="64:20" pos:end="64:27">programs</name><index pos:start="64:28" pos:end="64:30">[<expr pos:start="64:29" pos:end="64:29"><name pos:start="64:29" pos:end="64:29">i</name></expr>]</index></name><operator pos:start="64:31" pos:end="64:32">-&gt;</operator><name pos:start="64:33" pos:end="64:34">id</name> <operator pos:start="64:36" pos:end="64:37">!=</operator> <name pos:start="64:39" pos:end="64:45">prog_id</name></expr>)</condition><block type="pseudo" pos:start="66:17" pos:end="66:25"><block_content pos:start="66:17" pos:end="66:25">

                <continue pos:start="66:17" pos:end="66:25">continue;</continue></block_content></block></if></if_stmt>



            <if_stmt pos:start="70:13" pos:end="80:13"><if pos:start="70:13" pos:end="80:13">if <condition pos:start="70:16" pos:end="70:33">(<expr pos:start="70:17" pos:end="70:32"><operator pos:start="70:17" pos:end="70:17">*</operator><name pos:start="70:18" pos:end="70:23">endptr</name><operator pos:start="70:24" pos:end="70:25">++</operator> <operator pos:start="70:27" pos:end="70:28">==</operator> <literal type="char" pos:start="70:30" pos:end="70:32">':'</literal></expr>)</condition> <block pos:start="70:35" pos:end="80:13">{<block_content pos:start="72:17" pos:end="78:74">

                <decl_stmt pos:start="72:17" pos:end="72:57"><decl pos:start="72:17" pos:end="72:56"><type pos:start="72:17" pos:end="72:19"><name pos:start="72:17" pos:end="72:19">int</name></type> <name pos:start="72:21" pos:end="72:30">stream_idx</name> <init pos:start="72:32" pos:end="72:56">= <expr pos:start="72:34" pos:end="72:56"><call pos:start="72:34" pos:end="72:56"><name pos:start="72:34" pos:end="72:39">strtol</name><argument_list pos:start="72:40" pos:end="72:56">(<argument pos:start="72:41" pos:end="72:46"><expr pos:start="72:41" pos:end="72:46"><name pos:start="72:41" pos:end="72:46">endptr</name></expr></argument>, <argument pos:start="72:49" pos:end="72:52"><expr pos:start="72:49" pos:end="72:52"><name pos:start="72:49" pos:end="72:52">NULL</name></expr></argument>, <argument pos:start="72:55" pos:end="72:55"><expr pos:start="72:55" pos:end="72:55"><literal type="number" pos:start="72:55" pos:end="72:55">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <return pos:start="74:17" pos:end="78:74">return <expr pos:start="74:24" pos:end="78:73"><name pos:start="74:24" pos:end="74:33">stream_idx</name> <operator pos:start="74:35" pos:end="74:36">&gt;=</operator> <literal type="number" pos:start="74:38" pos:end="74:38">0</literal> <operator pos:start="74:40" pos:end="74:41">&amp;&amp;</operator>

                    <name pos:start="76:21" pos:end="76:30">stream_idx</name> <operator pos:start="76:32" pos:end="76:32">&lt;</operator> <name pos:start="76:34" pos:end="76:47"><name pos:start="76:34" pos:end="76:34">s</name><operator pos:start="76:35" pos:end="76:36">-&gt;</operator><name pos:start="76:37" pos:end="76:44">programs</name><index pos:start="76:45" pos:end="76:47">[<expr pos:start="76:46" pos:end="76:46"><name pos:start="76:46" pos:end="76:46">i</name></expr>]</index></name><operator pos:start="76:48" pos:end="76:49">-&gt;</operator><name pos:start="76:50" pos:end="76:66">nb_stream_indexes</name> <operator pos:start="76:68" pos:end="76:69">&amp;&amp;</operator>

                    <name pos:start="78:21" pos:end="78:29"><name pos:start="78:21" pos:end="78:22">st</name><operator pos:start="78:23" pos:end="78:24">-&gt;</operator><name pos:start="78:25" pos:end="78:29">index</name></name> <operator pos:start="78:31" pos:end="78:32">==</operator> <name pos:start="78:34" pos:end="78:47"><name pos:start="78:34" pos:end="78:34">s</name><operator pos:start="78:35" pos:end="78:36">-&gt;</operator><name pos:start="78:37" pos:end="78:44">programs</name><index pos:start="78:45" pos:end="78:47">[<expr pos:start="78:46" pos:end="78:46"><name pos:start="78:46" pos:end="78:46">i</name></expr>]</index></name><operator pos:start="78:48" pos:end="78:49">-&gt;</operator><name pos:start="78:50" pos:end="78:73"><name pos:start="78:50" pos:end="78:61">stream_index</name><index pos:start="78:62" pos:end="78:73">[<expr pos:start="78:63" pos:end="78:72"><name pos:start="78:63" pos:end="78:72">stream_idx</name></expr>]</index></name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <for pos:start="84:13" pos:end="88:29">for <control pos:start="84:17" pos:end="84:67">(<init pos:start="84:18" pos:end="84:23"><expr pos:start="84:18" pos:end="84:22"><name pos:start="84:18" pos:end="84:18">j</name> <operator pos:start="84:20" pos:end="84:20">=</operator> <literal type="number" pos:start="84:22" pos:end="84:22">0</literal></expr>;</init> <condition pos:start="84:25" pos:end="84:62"><expr pos:start="84:25" pos:end="84:61"><name pos:start="84:25" pos:end="84:25">j</name> <operator pos:start="84:27" pos:end="84:27">&lt;</operator> <name pos:start="84:29" pos:end="84:42"><name pos:start="84:29" pos:end="84:29">s</name><operator pos:start="84:30" pos:end="84:31">-&gt;</operator><name pos:start="84:32" pos:end="84:39">programs</name><index pos:start="84:40" pos:end="84:42">[<expr pos:start="84:41" pos:end="84:41"><name pos:start="84:41" pos:end="84:41">i</name></expr>]</index></name><operator pos:start="84:43" pos:end="84:44">-&gt;</operator><name pos:start="84:45" pos:end="84:61">nb_stream_indexes</name></expr>;</condition> <incr pos:start="84:64" pos:end="84:66"><expr pos:start="84:64" pos:end="84:66"><name pos:start="84:64" pos:end="84:64">j</name><operator pos:start="84:65" pos:end="84:66">++</operator></expr></incr>)</control><block type="pseudo" pos:start="86:17" pos:end="88:29"><block_content pos:start="86:17" pos:end="88:29">

                <if_stmt pos:start="86:17" pos:end="88:29"><if pos:start="86:17" pos:end="88:29">if <condition pos:start="86:20" pos:end="86:65">(<expr pos:start="86:21" pos:end="86:64"><name pos:start="86:21" pos:end="86:29"><name pos:start="86:21" pos:end="86:22">st</name><operator pos:start="86:23" pos:end="86:24">-&gt;</operator><name pos:start="86:25" pos:end="86:29">index</name></name> <operator pos:start="86:31" pos:end="86:32">==</operator> <name pos:start="86:34" pos:end="86:47"><name pos:start="86:34" pos:end="86:34">s</name><operator pos:start="86:35" pos:end="86:36">-&gt;</operator><name pos:start="86:37" pos:end="86:44">programs</name><index pos:start="86:45" pos:end="86:47">[<expr pos:start="86:46" pos:end="86:46"><name pos:start="86:46" pos:end="86:46">i</name></expr>]</index></name><operator pos:start="86:48" pos:end="86:49">-&gt;</operator><name pos:start="86:50" pos:end="86:64"><name pos:start="86:50" pos:end="86:61">stream_index</name><index pos:start="86:62" pos:end="86:64">[<expr pos:start="86:63" pos:end="86:63"><name pos:start="86:63" pos:end="86:63">j</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="88:21" pos:end="88:29"><block_content pos:start="88:21" pos:end="88:29">

                    <return pos:start="88:21" pos:end="88:29">return <expr pos:start="88:28" pos:end="88:28"><literal type="number" pos:start="88:28" pos:end="88:28">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

        </block_content>}</block></for>

        <return pos:start="92:9" pos:end="92:17">return <expr pos:start="92:16" pos:end="92:16"><literal type="number" pos:start="92:16" pos:end="92:16">0</literal></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="94:7" pos:end="96:17">else if <condition pos:start="94:15" pos:end="94:22">(<expr pos:start="94:16" pos:end="94:21"><operator pos:start="94:16" pos:end="94:16">!</operator><operator pos:start="94:17" pos:end="94:17">*</operator><name pos:start="94:18" pos:end="94:21">spec</name></expr>)</condition><block type="pseudo" pos:start="96:9" pos:end="96:17"><block_content pos:start="96:9" pos:end="96:17"> <comment type="block" pos:start="94:24" pos:end="94:64">/* empty specifier, matches everything */</comment>

        <return pos:start="96:9" pos:end="96:17">return <expr pos:start="96:16" pos:end="96:16"><literal type="number" pos:start="96:16" pos:end="96:16">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="100:5" pos:end="100:69"><expr pos:start="100:5" pos:end="100:68"><call pos:start="100:5" pos:end="100:68"><name pos:start="100:5" pos:end="100:10">av_log</name><argument_list pos:start="100:11" pos:end="100:68">(<argument pos:start="100:12" pos:end="100:12"><expr pos:start="100:12" pos:end="100:12"><name pos:start="100:12" pos:end="100:12">s</name></expr></argument>, <argument pos:start="100:15" pos:end="100:26"><expr pos:start="100:15" pos:end="100:26"><name pos:start="100:15" pos:end="100:26">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="100:29" pos:end="100:61"><expr pos:start="100:29" pos:end="100:61"><literal type="string" pos:start="100:29" pos:end="100:61">"Invalid stream specifier: %s.\n"</literal></expr></argument>, <argument pos:start="100:64" pos:end="100:67"><expr pos:start="100:64" pos:end="100:67"><name pos:start="100:64" pos:end="100:67">spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="102:5" pos:end="102:27">return <expr pos:start="102:12" pos:end="102:26"><call pos:start="102:12" pos:end="102:26"><name pos:start="102:12" pos:end="102:18">AVERROR</name><argument_list pos:start="102:19" pos:end="102:26">(<argument pos:start="102:20" pos:end="102:25"><expr pos:start="102:20" pos:end="102:25"><name pos:start="102:20" pos:end="102:25">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function></unit>
