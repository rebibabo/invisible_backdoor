<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/18088.c" pos:tabs="8"><function pos:start="1:1" pos:end="235:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">ppc_hw_interrupt</name><parameter_list pos:start="1:29" pos:end="1:46">(<parameter pos:start="1:30" pos:end="1:45"><decl pos:start="1:30" pos:end="1:45"><type pos:start="1:30" pos:end="1:42"><name pos:start="1:30" pos:end="1:40">CPUPPCState</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:45">env</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="235:1">{<block_content pos:start="5:5" pos:end="233:5">

    <decl_stmt pos:start="5:5" pos:end="5:43"><decl pos:start="5:5" pos:end="5:42"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">PowerPCCPU</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:19">cpu</name> <init pos:start="5:21" pos:end="5:42">= <expr pos:start="5:23" pos:end="5:42"><call pos:start="5:23" pos:end="5:42"><name pos:start="5:23" pos:end="5:37">ppc_env_get_cpu</name><argument_list pos:start="5:38" pos:end="5:42">(<argument pos:start="5:39" pos:end="5:41"><expr pos:start="5:39" pos:end="5:41"><name pos:start="5:39" pos:end="5:41">env</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="22:0"><decl pos:start="7:5" pos:end="7:13"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:13">hdice</name></decl>;</decl_stmt>

<cpp:if pos:start="9:1" pos:end="9:5">#<cpp:directive pos:start="9:2" pos:end="9:3">if</cpp:directive> <expr pos:start="9:5" pos:end="9:5"><literal type="number" pos:start="9:5" pos:end="9:5">0</literal></expr></cpp:if>

    CPUState *cs = CPU(cpu);



    qemu_log_mask(CPU_LOG_INT, "%s: %p pending %08x req %08x me %d ee %d\n",

                  __func__, env, env-&gt;pending_interrupts,

                  cs-&gt;interrupt_request, (int)msr_me, (int)msr_ee);

<cpp:endif pos:start="21:1" pos:end="21:6">#<cpp:directive pos:start="21:2" pos:end="21:6">endif</cpp:directive></cpp:endif>

    <comment type="block" pos:start="23:5" pos:end="23:24">/* External reset */</comment>

    <if_stmt pos:start="25:5" pos:end="33:5"><if pos:start="25:5" pos:end="33:5">if <condition pos:start="25:8" pos:end="25:61">(<expr pos:start="25:9" pos:end="25:60"><name pos:start="25:9" pos:end="25:31"><name pos:start="25:9" pos:end="25:11">env</name><operator pos:start="25:12" pos:end="25:13">-&gt;</operator><name pos:start="25:14" pos:end="25:31">pending_interrupts</name></name> <operator pos:start="25:33" pos:end="25:33">&amp;</operator> <operator pos:start="25:35" pos:end="25:35">(</operator><literal type="number" pos:start="25:36" pos:end="25:36">1</literal> <operator pos:start="25:38" pos:end="25:39">&lt;&lt;</operator> <name pos:start="25:41" pos:end="25:59">PPC_INTERRUPT_RESET</name><operator pos:start="25:60" pos:end="25:60">)</operator></expr>)</condition> <block pos:start="25:63" pos:end="33:5">{<block_content pos:start="27:9" pos:end="31:15">

        <expr_stmt pos:start="27:9" pos:end="27:63"><expr pos:start="27:9" pos:end="27:62"><name pos:start="27:9" pos:end="27:31"><name pos:start="27:9" pos:end="27:11">env</name><operator pos:start="27:12" pos:end="27:13">-&gt;</operator><name pos:start="27:14" pos:end="27:31">pending_interrupts</name></name> <operator pos:start="27:33" pos:end="27:34">&amp;=</operator> <operator pos:start="27:36" pos:end="27:36">~</operator><operator pos:start="27:37" pos:end="27:37">(</operator><literal type="number" pos:start="27:38" pos:end="27:38">1</literal> <operator pos:start="27:40" pos:end="27:41">&lt;&lt;</operator> <name pos:start="27:43" pos:end="27:61">PPC_INTERRUPT_RESET</name><operator pos:start="27:62" pos:end="27:62">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:63"><expr pos:start="29:9" pos:end="29:62"><call pos:start="29:9" pos:end="29:62"><name pos:start="29:9" pos:end="29:20">powerpc_excp</name><argument_list pos:start="29:21" pos:end="29:62">(<argument pos:start="29:22" pos:end="29:24"><expr pos:start="29:22" pos:end="29:24"><name pos:start="29:22" pos:end="29:24">cpu</name></expr></argument>, <argument pos:start="29:27" pos:end="29:41"><expr pos:start="29:27" pos:end="29:41"><name pos:start="29:27" pos:end="29:41"><name pos:start="29:27" pos:end="29:29">env</name><operator pos:start="29:30" pos:end="29:31">-&gt;</operator><name pos:start="29:32" pos:end="29:41">excp_model</name></name></expr></argument>, <argument pos:start="29:44" pos:end="29:61"><expr pos:start="29:44" pos:end="29:61"><name pos:start="29:44" pos:end="29:61">POWERPC_EXCP_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="35:5" pos:end="35:33">/* Machine check exception */</comment>

    <if_stmt pos:start="37:5" pos:end="62:0"><if pos:start="37:5" pos:end="62:0">if <condition pos:start="37:8" pos:end="37:59">(<expr pos:start="37:9" pos:end="37:58"><name pos:start="37:9" pos:end="37:31"><name pos:start="37:9" pos:end="37:11">env</name><operator pos:start="37:12" pos:end="37:13">-&gt;</operator><name pos:start="37:14" pos:end="37:31">pending_interrupts</name></name> <operator pos:start="37:33" pos:end="37:33">&amp;</operator> <operator pos:start="37:35" pos:end="37:35">(</operator><literal type="number" pos:start="37:36" pos:end="37:36">1</literal> <operator pos:start="37:38" pos:end="37:39">&lt;&lt;</operator> <name pos:start="37:41" pos:end="37:57">PPC_INTERRUPT_MCK</name><operator pos:start="37:58" pos:end="37:58">)</operator></expr>)</condition> <block pos:start="37:61" pos:end="62:0">{<block_content pos:start="39:9" pos:end="43:15">

        <expr_stmt pos:start="39:9" pos:end="39:61"><expr pos:start="39:9" pos:end="39:60"><name pos:start="39:9" pos:end="39:31"><name pos:start="39:9" pos:end="39:11">env</name><operator pos:start="39:12" pos:end="39:13">-&gt;</operator><name pos:start="39:14" pos:end="39:31">pending_interrupts</name></name> <operator pos:start="39:33" pos:end="39:34">&amp;=</operator> <operator pos:start="39:36" pos:end="39:36">~</operator><operator pos:start="39:37" pos:end="39:37">(</operator><literal type="number" pos:start="39:38" pos:end="39:38">1</literal> <operator pos:start="39:40" pos:end="39:41">&lt;&lt;</operator> <name pos:start="39:43" pos:end="39:59">PPC_INTERRUPT_MCK</name><operator pos:start="39:60" pos:end="39:60">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:64"><expr pos:start="41:9" pos:end="41:63"><call pos:start="41:9" pos:end="41:63"><name pos:start="41:9" pos:end="41:20">powerpc_excp</name><argument_list pos:start="41:21" pos:end="41:63">(<argument pos:start="41:22" pos:end="41:24"><expr pos:start="41:22" pos:end="41:24"><name pos:start="41:22" pos:end="41:24">cpu</name></expr></argument>, <argument pos:start="41:27" pos:end="41:41"><expr pos:start="41:27" pos:end="41:41"><name pos:start="41:27" pos:end="41:41"><name pos:start="41:27" pos:end="41:29">env</name><operator pos:start="41:30" pos:end="41:31">-&gt;</operator><name pos:start="41:32" pos:end="41:41">excp_model</name></name></expr></argument>, <argument pos:start="41:44" pos:end="41:62"><expr pos:start="41:44" pos:end="41:62"><name pos:start="41:44" pos:end="41:62">POWERPC_EXCP_MCHECK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="43:9" pos:end="43:15">return;</return>

    </block_content>}</block></if></if_stmt>

<cpp:if pos:start="47:1" pos:end="47:5">#<cpp:directive pos:start="47:2" pos:end="47:3">if</cpp:directive> <expr pos:start="47:5" pos:end="47:5"><literal type="number" pos:start="47:5" pos:end="47:5">0</literal></expr></cpp:if> <comment type="block" pos:start="47:7" pos:end="47:16">/* TODO */</comment>

    <comment type="block" pos:start="49:5" pos:end="49:34">/* External debug exception */</comment>

    if (env-&gt;pending_interrupts &amp; (1 &lt;&lt; PPC_INTERRUPT_DEBUG)) {

        env-&gt;pending_interrupts &amp;= ~(1 &lt;&lt; PPC_INTERRUPT_DEBUG);

        powerpc_excp(cpu, env-&gt;excp_model, POWERPC_EXCP_DEBUG);

        return;

    }

<cpp:endif pos:start="61:1" pos:end="61:6">#<cpp:directive pos:start="61:2" pos:end="61:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="63:5" pos:end="73:5"><if pos:start="63:5" pos:end="69:5">if <condition pos:start="63:8" pos:end="63:10">(<expr pos:start="63:9" pos:end="63:9"><literal type="number" pos:start="63:9" pos:end="63:9">0</literal></expr>)</condition> <block pos:start="63:12" pos:end="69:5">{<block_content pos:start="67:9" pos:end="67:39">

        <comment type="block" pos:start="65:9" pos:end="65:74">/* XXX: find a suitable condition to enable the hypervisor mode */</comment>

        <expr_stmt pos:start="67:9" pos:end="67:39"><expr pos:start="67:9" pos:end="67:38"><name pos:start="67:9" pos:end="67:13">hdice</name> <operator pos:start="67:15" pos:end="67:15">=</operator> <name pos:start="67:17" pos:end="67:34"><name pos:start="67:17" pos:end="67:19">env</name><operator pos:start="67:20" pos:end="67:21">-&gt;</operator><name pos:start="67:22" pos:end="67:24">spr</name><index pos:start="67:25" pos:end="67:34">[<expr pos:start="67:26" pos:end="67:33"><name pos:start="67:26" pos:end="67:33">SPR_LPCR</name></expr>]</index></name> <operator pos:start="67:36" pos:end="67:36">&amp;</operator> <literal type="number" pos:start="67:38" pos:end="67:38">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="69:7" pos:end="73:5">else <block pos:start="69:12" pos:end="73:5">{<block_content pos:start="71:9" pos:end="71:18">

        <expr_stmt pos:start="71:9" pos:end="71:18"><expr pos:start="71:9" pos:end="71:17"><name pos:start="71:9" pos:end="71:13">hdice</name> <operator pos:start="71:15" pos:end="71:15">=</operator> <literal type="number" pos:start="71:17" pos:end="71:17">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="75:5" pos:end="87:5"><if pos:start="75:5" pos:end="87:5">if <condition pos:start="75:8" pos:end="75:66">(<expr pos:start="75:9" pos:end="75:65"><operator pos:start="75:9" pos:end="75:9">(</operator><name pos:start="75:10" pos:end="75:15">msr_ee</name> <operator pos:start="75:17" pos:end="75:18">!=</operator> <literal type="number" pos:start="75:20" pos:end="75:20">0</literal> <operator pos:start="75:22" pos:end="75:23">||</operator> <name pos:start="75:25" pos:end="75:30">msr_hv</name> <operator pos:start="75:32" pos:end="75:33">==</operator> <literal type="number" pos:start="75:35" pos:end="75:35">0</literal> <operator pos:start="75:37" pos:end="75:38">||</operator> <name pos:start="75:40" pos:end="75:45">msr_pr</name> <operator pos:start="75:47" pos:end="75:48">!=</operator> <literal type="number" pos:start="75:50" pos:end="75:50">0</literal><operator pos:start="75:51" pos:end="75:51">)</operator> <operator pos:start="75:53" pos:end="75:54">&amp;&amp;</operator> <name pos:start="75:56" pos:end="75:60">hdice</name> <operator pos:start="75:62" pos:end="75:63">!=</operator> <literal type="number" pos:start="75:65" pos:end="75:65">0</literal></expr>)</condition> <block pos:start="75:68" pos:end="87:5">{<block_content pos:start="79:9" pos:end="85:9">

        <comment type="block" pos:start="77:9" pos:end="77:46">/* Hypervisor decrementer exception */</comment>

        <if_stmt pos:start="79:9" pos:end="85:9"><if pos:start="79:9" pos:end="85:9">if <condition pos:start="79:12" pos:end="79:65">(<expr pos:start="79:13" pos:end="79:64"><name pos:start="79:13" pos:end="79:35"><name pos:start="79:13" pos:end="79:15">env</name><operator pos:start="79:16" pos:end="79:17">-&gt;</operator><name pos:start="79:18" pos:end="79:35">pending_interrupts</name></name> <operator pos:start="79:37" pos:end="79:37">&amp;</operator> <operator pos:start="79:39" pos:end="79:39">(</operator><literal type="number" pos:start="79:40" pos:end="79:40">1</literal> <operator pos:start="79:42" pos:end="79:43">&lt;&lt;</operator> <name pos:start="79:45" pos:end="79:63">PPC_INTERRUPT_HDECR</name><operator pos:start="79:64" pos:end="79:64">)</operator></expr>)</condition> <block pos:start="79:67" pos:end="85:9">{<block_content pos:start="81:13" pos:end="83:19">

            <expr_stmt pos:start="81:13" pos:end="81:67"><expr pos:start="81:13" pos:end="81:66"><call pos:start="81:13" pos:end="81:66"><name pos:start="81:13" pos:end="81:24">powerpc_excp</name><argument_list pos:start="81:25" pos:end="81:66">(<argument pos:start="81:26" pos:end="81:28"><expr pos:start="81:26" pos:end="81:28"><name pos:start="81:26" pos:end="81:28">cpu</name></expr></argument>, <argument pos:start="81:31" pos:end="81:45"><expr pos:start="81:31" pos:end="81:45"><name pos:start="81:31" pos:end="81:45"><name pos:start="81:31" pos:end="81:33">env</name><operator pos:start="81:34" pos:end="81:35">-&gt;</operator><name pos:start="81:36" pos:end="81:45">excp_model</name></name></expr></argument>, <argument pos:start="81:48" pos:end="81:65"><expr pos:start="81:48" pos:end="81:65"><name pos:start="81:48" pos:end="81:65">POWERPC_EXCP_HDECR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="83:13" pos:end="83:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="89:5" pos:end="113:5"><if pos:start="89:5" pos:end="113:5">if <condition pos:start="89:8" pos:end="89:20">(<expr pos:start="89:9" pos:end="89:19"><name pos:start="89:9" pos:end="89:14">msr_ce</name> <operator pos:start="89:16" pos:end="89:17">!=</operator> <literal type="number" pos:start="89:19" pos:end="89:19">0</literal></expr>)</condition> <block pos:start="89:22" pos:end="113:5">{<block_content pos:start="93:9" pos:end="111:9">

        <comment type="block" pos:start="91:9" pos:end="91:41">/* External critical interrupt */</comment>

        <if_stmt pos:start="93:9" pos:end="111:9"><if pos:start="93:9" pos:end="111:9">if <condition pos:start="93:12" pos:end="93:64">(<expr pos:start="93:13" pos:end="93:63"><name pos:start="93:13" pos:end="93:35"><name pos:start="93:13" pos:end="93:15">env</name><operator pos:start="93:16" pos:end="93:17">-&gt;</operator><name pos:start="93:18" pos:end="93:35">pending_interrupts</name></name> <operator pos:start="93:37" pos:end="93:37">&amp;</operator> <operator pos:start="93:39" pos:end="93:39">(</operator><literal type="number" pos:start="93:40" pos:end="93:40">1</literal> <operator pos:start="93:42" pos:end="93:43">&lt;&lt;</operator> <name pos:start="93:45" pos:end="93:62">PPC_INTERRUPT_CEXT</name><operator pos:start="93:63" pos:end="93:63">)</operator></expr>)</condition> <block pos:start="93:66" pos:end="111:9">{<block_content pos:start="107:13" pos:end="109:19">

            <comment type="block" pos:start="95:13" pos:end="99:15">/* Taking a critical external interrupt does not clear the external

             * critical interrupt status

             */</comment>

<cpp:if pos:start="101:1" pos:end="101:5">#<cpp:directive pos:start="101:2" pos:end="101:3">if</cpp:directive> <expr pos:start="101:5" pos:end="101:5"><literal type="number" pos:start="101:5" pos:end="101:5">0</literal></expr></cpp:if>

            env-&gt;pending_interrupts &amp;= ~(1 &lt;&lt; PPC_INTERRUPT_CEXT);

<cpp:endif pos:start="105:1" pos:end="105:6">#<cpp:directive pos:start="105:2" pos:end="105:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="107:13" pos:end="107:70"><expr pos:start="107:13" pos:end="107:69"><call pos:start="107:13" pos:end="107:69"><name pos:start="107:13" pos:end="107:24">powerpc_excp</name><argument_list pos:start="107:25" pos:end="107:69">(<argument pos:start="107:26" pos:end="107:28"><expr pos:start="107:26" pos:end="107:28"><name pos:start="107:26" pos:end="107:28">cpu</name></expr></argument>, <argument pos:start="107:31" pos:end="107:45"><expr pos:start="107:31" pos:end="107:45"><name pos:start="107:31" pos:end="107:45"><name pos:start="107:31" pos:end="107:33">env</name><operator pos:start="107:34" pos:end="107:35">-&gt;</operator><name pos:start="107:36" pos:end="107:45">excp_model</name></name></expr></argument>, <argument pos:start="107:48" pos:end="107:68"><expr pos:start="107:48" pos:end="107:68"><name pos:start="107:48" pos:end="107:68">POWERPC_EXCP_CRITICAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="109:13" pos:end="109:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="115:5" pos:end="233:5"><if pos:start="115:5" pos:end="233:5">if <condition pos:start="115:8" pos:end="115:20">(<expr pos:start="115:9" pos:end="115:19"><name pos:start="115:9" pos:end="115:14">msr_ee</name> <operator pos:start="115:16" pos:end="115:17">!=</operator> <literal type="number" pos:start="115:19" pos:end="115:19">0</literal></expr>)</condition> <block pos:start="115:22" pos:end="233:5">{<block_content pos:start="119:9" pos:end="231:9">

        <comment type="block" pos:start="117:9" pos:end="117:48">/* Watchdog timer on embedded PowerPC */</comment>

        <if_stmt pos:start="119:9" pos:end="127:9"><if pos:start="119:9" pos:end="127:9">if <condition pos:start="119:12" pos:end="119:63">(<expr pos:start="119:13" pos:end="119:62"><name pos:start="119:13" pos:end="119:35"><name pos:start="119:13" pos:end="119:15">env</name><operator pos:start="119:16" pos:end="119:17">-&gt;</operator><name pos:start="119:18" pos:end="119:35">pending_interrupts</name></name> <operator pos:start="119:37" pos:end="119:37">&amp;</operator> <operator pos:start="119:39" pos:end="119:39">(</operator><literal type="number" pos:start="119:40" pos:end="119:40">1</literal> <operator pos:start="119:42" pos:end="119:43">&lt;&lt;</operator> <name pos:start="119:45" pos:end="119:61">PPC_INTERRUPT_WDT</name><operator pos:start="119:62" pos:end="119:62">)</operator></expr>)</condition> <block pos:start="119:65" pos:end="127:9">{<block_content pos:start="121:13" pos:end="125:19">

            <expr_stmt pos:start="121:13" pos:end="121:65"><expr pos:start="121:13" pos:end="121:64"><name pos:start="121:13" pos:end="121:35"><name pos:start="121:13" pos:end="121:15">env</name><operator pos:start="121:16" pos:end="121:17">-&gt;</operator><name pos:start="121:18" pos:end="121:35">pending_interrupts</name></name> <operator pos:start="121:37" pos:end="121:38">&amp;=</operator> <operator pos:start="121:40" pos:end="121:40">~</operator><operator pos:start="121:41" pos:end="121:41">(</operator><literal type="number" pos:start="121:42" pos:end="121:42">1</literal> <operator pos:start="121:44" pos:end="121:45">&lt;&lt;</operator> <name pos:start="121:47" pos:end="121:63">PPC_INTERRUPT_WDT</name><operator pos:start="121:64" pos:end="121:64">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="123:13" pos:end="123:65"><expr pos:start="123:13" pos:end="123:64"><call pos:start="123:13" pos:end="123:64"><name pos:start="123:13" pos:end="123:24">powerpc_excp</name><argument_list pos:start="123:25" pos:end="123:64">(<argument pos:start="123:26" pos:end="123:28"><expr pos:start="123:26" pos:end="123:28"><name pos:start="123:26" pos:end="123:28">cpu</name></expr></argument>, <argument pos:start="123:31" pos:end="123:45"><expr pos:start="123:31" pos:end="123:45"><name pos:start="123:31" pos:end="123:45"><name pos:start="123:31" pos:end="123:33">env</name><operator pos:start="123:34" pos:end="123:35">-&gt;</operator><name pos:start="123:36" pos:end="123:45">excp_model</name></name></expr></argument>, <argument pos:start="123:48" pos:end="123:63"><expr pos:start="123:48" pos:end="123:63"><name pos:start="123:48" pos:end="123:63">POWERPC_EXCP_WDT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="125:13" pos:end="125:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="129:9" pos:end="137:9"><if pos:start="129:9" pos:end="137:9">if <condition pos:start="129:12" pos:end="129:69">(<expr pos:start="129:13" pos:end="129:68"><name pos:start="129:13" pos:end="129:35"><name pos:start="129:13" pos:end="129:15">env</name><operator pos:start="129:16" pos:end="129:17">-&gt;</operator><name pos:start="129:18" pos:end="129:35">pending_interrupts</name></name> <operator pos:start="129:37" pos:end="129:37">&amp;</operator> <operator pos:start="129:39" pos:end="129:39">(</operator><literal type="number" pos:start="129:40" pos:end="129:40">1</literal> <operator pos:start="129:42" pos:end="129:43">&lt;&lt;</operator> <name pos:start="129:45" pos:end="129:67">PPC_INTERRUPT_CDOORBELL</name><operator pos:start="129:68" pos:end="129:68">)</operator></expr>)</condition> <block pos:start="129:71" pos:end="137:9">{<block_content pos:start="131:13" pos:end="135:19">

            <expr_stmt pos:start="131:13" pos:end="131:71"><expr pos:start="131:13" pos:end="131:70"><name pos:start="131:13" pos:end="131:35"><name pos:start="131:13" pos:end="131:15">env</name><operator pos:start="131:16" pos:end="131:17">-&gt;</operator><name pos:start="131:18" pos:end="131:35">pending_interrupts</name></name> <operator pos:start="131:37" pos:end="131:38">&amp;=</operator> <operator pos:start="131:40" pos:end="131:40">~</operator><operator pos:start="131:41" pos:end="131:41">(</operator><literal type="number" pos:start="131:42" pos:end="131:42">1</literal> <operator pos:start="131:44" pos:end="131:45">&lt;&lt;</operator> <name pos:start="131:47" pos:end="131:69">PPC_INTERRUPT_CDOORBELL</name><operator pos:start="131:70" pos:end="131:70">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="133:13" pos:end="133:68"><expr pos:start="133:13" pos:end="133:67"><call pos:start="133:13" pos:end="133:67"><name pos:start="133:13" pos:end="133:24">powerpc_excp</name><argument_list pos:start="133:25" pos:end="133:67">(<argument pos:start="133:26" pos:end="133:28"><expr pos:start="133:26" pos:end="133:28"><name pos:start="133:26" pos:end="133:28">cpu</name></expr></argument>, <argument pos:start="133:31" pos:end="133:45"><expr pos:start="133:31" pos:end="133:45"><name pos:start="133:31" pos:end="133:45"><name pos:start="133:31" pos:end="133:33">env</name><operator pos:start="133:34" pos:end="133:35">-&gt;</operator><name pos:start="133:36" pos:end="133:45">excp_model</name></name></expr></argument>, <argument pos:start="133:48" pos:end="133:66"><expr pos:start="133:48" pos:end="133:66"><name pos:start="133:48" pos:end="133:66">POWERPC_EXCP_DOORCI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="135:13" pos:end="135:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="139:9" pos:end="139:54">/* Fixed interval timer on embedded PowerPC */</comment>

        <if_stmt pos:start="141:9" pos:end="149:9"><if pos:start="141:9" pos:end="149:9">if <condition pos:start="141:12" pos:end="141:63">(<expr pos:start="141:13" pos:end="141:62"><name pos:start="141:13" pos:end="141:35"><name pos:start="141:13" pos:end="141:15">env</name><operator pos:start="141:16" pos:end="141:17">-&gt;</operator><name pos:start="141:18" pos:end="141:35">pending_interrupts</name></name> <operator pos:start="141:37" pos:end="141:37">&amp;</operator> <operator pos:start="141:39" pos:end="141:39">(</operator><literal type="number" pos:start="141:40" pos:end="141:40">1</literal> <operator pos:start="141:42" pos:end="141:43">&lt;&lt;</operator> <name pos:start="141:45" pos:end="141:61">PPC_INTERRUPT_FIT</name><operator pos:start="141:62" pos:end="141:62">)</operator></expr>)</condition> <block pos:start="141:65" pos:end="149:9">{<block_content pos:start="143:13" pos:end="147:19">

            <expr_stmt pos:start="143:13" pos:end="143:65"><expr pos:start="143:13" pos:end="143:64"><name pos:start="143:13" pos:end="143:35"><name pos:start="143:13" pos:end="143:15">env</name><operator pos:start="143:16" pos:end="143:17">-&gt;</operator><name pos:start="143:18" pos:end="143:35">pending_interrupts</name></name> <operator pos:start="143:37" pos:end="143:38">&amp;=</operator> <operator pos:start="143:40" pos:end="143:40">~</operator><operator pos:start="143:41" pos:end="143:41">(</operator><literal type="number" pos:start="143:42" pos:end="143:42">1</literal> <operator pos:start="143:44" pos:end="143:45">&lt;&lt;</operator> <name pos:start="143:47" pos:end="143:63">PPC_INTERRUPT_FIT</name><operator pos:start="143:64" pos:end="143:64">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="145:13" pos:end="145:65"><expr pos:start="145:13" pos:end="145:64"><call pos:start="145:13" pos:end="145:64"><name pos:start="145:13" pos:end="145:24">powerpc_excp</name><argument_list pos:start="145:25" pos:end="145:64">(<argument pos:start="145:26" pos:end="145:28"><expr pos:start="145:26" pos:end="145:28"><name pos:start="145:26" pos:end="145:28">cpu</name></expr></argument>, <argument pos:start="145:31" pos:end="145:45"><expr pos:start="145:31" pos:end="145:45"><name pos:start="145:31" pos:end="145:45"><name pos:start="145:31" pos:end="145:33">env</name><operator pos:start="145:34" pos:end="145:35">-&gt;</operator><name pos:start="145:36" pos:end="145:45">excp_model</name></name></expr></argument>, <argument pos:start="145:48" pos:end="145:63"><expr pos:start="145:48" pos:end="145:63"><name pos:start="145:48" pos:end="145:63">POWERPC_EXCP_FIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="147:13" pos:end="147:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="151:9" pos:end="151:61">/* Programmable interval timer on embedded PowerPC */</comment>

        <if_stmt pos:start="153:9" pos:end="161:9"><if pos:start="153:9" pos:end="161:9">if <condition pos:start="153:12" pos:end="153:63">(<expr pos:start="153:13" pos:end="153:62"><name pos:start="153:13" pos:end="153:35"><name pos:start="153:13" pos:end="153:15">env</name><operator pos:start="153:16" pos:end="153:17">-&gt;</operator><name pos:start="153:18" pos:end="153:35">pending_interrupts</name></name> <operator pos:start="153:37" pos:end="153:37">&amp;</operator> <operator pos:start="153:39" pos:end="153:39">(</operator><literal type="number" pos:start="153:40" pos:end="153:40">1</literal> <operator pos:start="153:42" pos:end="153:43">&lt;&lt;</operator> <name pos:start="153:45" pos:end="153:61">PPC_INTERRUPT_PIT</name><operator pos:start="153:62" pos:end="153:62">)</operator></expr>)</condition> <block pos:start="153:65" pos:end="161:9">{<block_content pos:start="155:13" pos:end="159:19">

            <expr_stmt pos:start="155:13" pos:end="155:65"><expr pos:start="155:13" pos:end="155:64"><name pos:start="155:13" pos:end="155:35"><name pos:start="155:13" pos:end="155:15">env</name><operator pos:start="155:16" pos:end="155:17">-&gt;</operator><name pos:start="155:18" pos:end="155:35">pending_interrupts</name></name> <operator pos:start="155:37" pos:end="155:38">&amp;=</operator> <operator pos:start="155:40" pos:end="155:40">~</operator><operator pos:start="155:41" pos:end="155:41">(</operator><literal type="number" pos:start="155:42" pos:end="155:42">1</literal> <operator pos:start="155:44" pos:end="155:45">&lt;&lt;</operator> <name pos:start="155:47" pos:end="155:63">PPC_INTERRUPT_PIT</name><operator pos:start="155:64" pos:end="155:64">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="157:13" pos:end="157:65"><expr pos:start="157:13" pos:end="157:64"><call pos:start="157:13" pos:end="157:64"><name pos:start="157:13" pos:end="157:24">powerpc_excp</name><argument_list pos:start="157:25" pos:end="157:64">(<argument pos:start="157:26" pos:end="157:28"><expr pos:start="157:26" pos:end="157:28"><name pos:start="157:26" pos:end="157:28">cpu</name></expr></argument>, <argument pos:start="157:31" pos:end="157:45"><expr pos:start="157:31" pos:end="157:45"><name pos:start="157:31" pos:end="157:45"><name pos:start="157:31" pos:end="157:33">env</name><operator pos:start="157:34" pos:end="157:35">-&gt;</operator><name pos:start="157:36" pos:end="157:45">excp_model</name></name></expr></argument>, <argument pos:start="157:48" pos:end="157:63"><expr pos:start="157:48" pos:end="157:63"><name pos:start="157:48" pos:end="157:63">POWERPC_EXCP_PIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="159:13" pos:end="159:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="163:9" pos:end="163:35">/* Decrementer exception */</comment>

        <if_stmt pos:start="165:9" pos:end="177:9"><if pos:start="165:9" pos:end="177:9">if <condition pos:start="165:12" pos:end="165:64">(<expr pos:start="165:13" pos:end="165:63"><name pos:start="165:13" pos:end="165:35"><name pos:start="165:13" pos:end="165:15">env</name><operator pos:start="165:16" pos:end="165:17">-&gt;</operator><name pos:start="165:18" pos:end="165:35">pending_interrupts</name></name> <operator pos:start="165:37" pos:end="165:37">&amp;</operator> <operator pos:start="165:39" pos:end="165:39">(</operator><literal type="number" pos:start="165:40" pos:end="165:40">1</literal> <operator pos:start="165:42" pos:end="165:43">&lt;&lt;</operator> <name pos:start="165:45" pos:end="165:62">PPC_INTERRUPT_DECR</name><operator pos:start="165:63" pos:end="165:63">)</operator></expr>)</condition> <block pos:start="165:66" pos:end="177:9">{<block_content pos:start="167:13" pos:end="175:19">

            <if_stmt pos:start="167:13" pos:end="171:13"><if pos:start="167:13" pos:end="171:13">if <condition pos:start="167:16" pos:end="167:48">(<expr pos:start="167:17" pos:end="167:47"><call pos:start="167:17" pos:end="167:47"><name pos:start="167:17" pos:end="167:42">ppc_decr_clear_on_delivery</name><argument_list pos:start="167:43" pos:end="167:47">(<argument pos:start="167:44" pos:end="167:46"><expr pos:start="167:44" pos:end="167:46"><name pos:start="167:44" pos:end="167:46">env</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="167:50" pos:end="171:13">{<block_content pos:start="169:17" pos:end="169:70">

                <expr_stmt pos:start="169:17" pos:end="169:70"><expr pos:start="169:17" pos:end="169:69"><name pos:start="169:17" pos:end="169:39"><name pos:start="169:17" pos:end="169:19">env</name><operator pos:start="169:20" pos:end="169:21">-&gt;</operator><name pos:start="169:22" pos:end="169:39">pending_interrupts</name></name> <operator pos:start="169:41" pos:end="169:42">&amp;=</operator> <operator pos:start="169:44" pos:end="169:44">~</operator><operator pos:start="169:45" pos:end="169:45">(</operator><literal type="number" pos:start="169:46" pos:end="169:46">1</literal> <operator pos:start="169:48" pos:end="169:49">&lt;&lt;</operator> <name pos:start="169:51" pos:end="169:68">PPC_INTERRUPT_DECR</name><operator pos:start="169:69" pos:end="169:69">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="173:13" pos:end="173:66"><expr pos:start="173:13" pos:end="173:65"><call pos:start="173:13" pos:end="173:65"><name pos:start="173:13" pos:end="173:24">powerpc_excp</name><argument_list pos:start="173:25" pos:end="173:65">(<argument pos:start="173:26" pos:end="173:28"><expr pos:start="173:26" pos:end="173:28"><name pos:start="173:26" pos:end="173:28">cpu</name></expr></argument>, <argument pos:start="173:31" pos:end="173:45"><expr pos:start="173:31" pos:end="173:45"><name pos:start="173:31" pos:end="173:45"><name pos:start="173:31" pos:end="173:33">env</name><operator pos:start="173:34" pos:end="173:35">-&gt;</operator><name pos:start="173:36" pos:end="173:45">excp_model</name></name></expr></argument>, <argument pos:start="173:48" pos:end="173:64"><expr pos:start="173:48" pos:end="173:64"><name pos:start="173:48" pos:end="173:64">POWERPC_EXCP_DECR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="175:13" pos:end="175:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="179:9" pos:end="179:32">/* External interrupt */</comment>

        <if_stmt pos:start="181:9" pos:end="199:9"><if pos:start="181:9" pos:end="199:9">if <condition pos:start="181:12" pos:end="181:63">(<expr pos:start="181:13" pos:end="181:62"><name pos:start="181:13" pos:end="181:35"><name pos:start="181:13" pos:end="181:15">env</name><operator pos:start="181:16" pos:end="181:17">-&gt;</operator><name pos:start="181:18" pos:end="181:35">pending_interrupts</name></name> <operator pos:start="181:37" pos:end="181:37">&amp;</operator> <operator pos:start="181:39" pos:end="181:39">(</operator><literal type="number" pos:start="181:40" pos:end="181:40">1</literal> <operator pos:start="181:42" pos:end="181:43">&lt;&lt;</operator> <name pos:start="181:45" pos:end="181:61">PPC_INTERRUPT_EXT</name><operator pos:start="181:62" pos:end="181:62">)</operator></expr>)</condition> <block pos:start="181:65" pos:end="199:9">{<block_content pos:start="195:13" pos:end="197:19">

            <comment type="block" pos:start="183:13" pos:end="187:15">/* Taking an external interrupt does not clear the external

             * interrupt status

             */</comment>

<cpp:if pos:start="189:1" pos:end="189:5">#<cpp:directive pos:start="189:2" pos:end="189:3">if</cpp:directive> <expr pos:start="189:5" pos:end="189:5"><literal type="number" pos:start="189:5" pos:end="189:5">0</literal></expr></cpp:if>

            env-&gt;pending_interrupts &amp;= ~(1 &lt;&lt; PPC_INTERRUPT_EXT);

<cpp:endif pos:start="193:1" pos:end="193:6">#<cpp:directive pos:start="193:2" pos:end="193:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="195:13" pos:end="195:70"><expr pos:start="195:13" pos:end="195:69"><call pos:start="195:13" pos:end="195:69"><name pos:start="195:13" pos:end="195:24">powerpc_excp</name><argument_list pos:start="195:25" pos:end="195:69">(<argument pos:start="195:26" pos:end="195:28"><expr pos:start="195:26" pos:end="195:28"><name pos:start="195:26" pos:end="195:28">cpu</name></expr></argument>, <argument pos:start="195:31" pos:end="195:45"><expr pos:start="195:31" pos:end="195:45"><name pos:start="195:31" pos:end="195:45"><name pos:start="195:31" pos:end="195:33">env</name><operator pos:start="195:34" pos:end="195:35">-&gt;</operator><name pos:start="195:36" pos:end="195:45">excp_model</name></name></expr></argument>, <argument pos:start="195:48" pos:end="195:68"><expr pos:start="195:48" pos:end="195:68"><name pos:start="195:48" pos:end="195:68">POWERPC_EXCP_EXTERNAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="197:13" pos:end="197:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="201:9" pos:end="209:9"><if pos:start="201:9" pos:end="209:9">if <condition pos:start="201:12" pos:end="201:68">(<expr pos:start="201:13" pos:end="201:67"><name pos:start="201:13" pos:end="201:35"><name pos:start="201:13" pos:end="201:15">env</name><operator pos:start="201:16" pos:end="201:17">-&gt;</operator><name pos:start="201:18" pos:end="201:35">pending_interrupts</name></name> <operator pos:start="201:37" pos:end="201:37">&amp;</operator> <operator pos:start="201:39" pos:end="201:39">(</operator><literal type="number" pos:start="201:40" pos:end="201:40">1</literal> <operator pos:start="201:42" pos:end="201:43">&lt;&lt;</operator> <name pos:start="201:45" pos:end="201:66">PPC_INTERRUPT_DOORBELL</name><operator pos:start="201:67" pos:end="201:67">)</operator></expr>)</condition> <block pos:start="201:70" pos:end="209:9">{<block_content pos:start="203:13" pos:end="207:19">

            <expr_stmt pos:start="203:13" pos:end="203:70"><expr pos:start="203:13" pos:end="203:69"><name pos:start="203:13" pos:end="203:35"><name pos:start="203:13" pos:end="203:15">env</name><operator pos:start="203:16" pos:end="203:17">-&gt;</operator><name pos:start="203:18" pos:end="203:35">pending_interrupts</name></name> <operator pos:start="203:37" pos:end="203:38">&amp;=</operator> <operator pos:start="203:40" pos:end="203:40">~</operator><operator pos:start="203:41" pos:end="203:41">(</operator><literal type="number" pos:start="203:42" pos:end="203:42">1</literal> <operator pos:start="203:44" pos:end="203:45">&lt;&lt;</operator> <name pos:start="203:47" pos:end="203:68">PPC_INTERRUPT_DOORBELL</name><operator pos:start="203:69" pos:end="203:69">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="205:13" pos:end="205:67"><expr pos:start="205:13" pos:end="205:66"><call pos:start="205:13" pos:end="205:66"><name pos:start="205:13" pos:end="205:24">powerpc_excp</name><argument_list pos:start="205:25" pos:end="205:66">(<argument pos:start="205:26" pos:end="205:28"><expr pos:start="205:26" pos:end="205:28"><name pos:start="205:26" pos:end="205:28">cpu</name></expr></argument>, <argument pos:start="205:31" pos:end="205:45"><expr pos:start="205:31" pos:end="205:45"><name pos:start="205:31" pos:end="205:45"><name pos:start="205:31" pos:end="205:33">env</name><operator pos:start="205:34" pos:end="205:35">-&gt;</operator><name pos:start="205:36" pos:end="205:45">excp_model</name></name></expr></argument>, <argument pos:start="205:48" pos:end="205:65"><expr pos:start="205:48" pos:end="205:65"><name pos:start="205:48" pos:end="205:65">POWERPC_EXCP_DOORI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="207:13" pos:end="207:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="211:9" pos:end="219:9"><if pos:start="211:9" pos:end="219:9">if <condition pos:start="211:12" pos:end="211:65">(<expr pos:start="211:13" pos:end="211:64"><name pos:start="211:13" pos:end="211:35"><name pos:start="211:13" pos:end="211:15">env</name><operator pos:start="211:16" pos:end="211:17">-&gt;</operator><name pos:start="211:18" pos:end="211:35">pending_interrupts</name></name> <operator pos:start="211:37" pos:end="211:37">&amp;</operator> <operator pos:start="211:39" pos:end="211:39">(</operator><literal type="number" pos:start="211:40" pos:end="211:40">1</literal> <operator pos:start="211:42" pos:end="211:43">&lt;&lt;</operator> <name pos:start="211:45" pos:end="211:63">PPC_INTERRUPT_PERFM</name><operator pos:start="211:64" pos:end="211:64">)</operator></expr>)</condition> <block pos:start="211:67" pos:end="219:9">{<block_content pos:start="213:13" pos:end="217:19">

            <expr_stmt pos:start="213:13" pos:end="213:67"><expr pos:start="213:13" pos:end="213:66"><name pos:start="213:13" pos:end="213:35"><name pos:start="213:13" pos:end="213:15">env</name><operator pos:start="213:16" pos:end="213:17">-&gt;</operator><name pos:start="213:18" pos:end="213:35">pending_interrupts</name></name> <operator pos:start="213:37" pos:end="213:38">&amp;=</operator> <operator pos:start="213:40" pos:end="213:40">~</operator><operator pos:start="213:41" pos:end="213:41">(</operator><literal type="number" pos:start="213:42" pos:end="213:42">1</literal> <operator pos:start="213:44" pos:end="213:45">&lt;&lt;</operator> <name pos:start="213:47" pos:end="213:65">PPC_INTERRUPT_PERFM</name><operator pos:start="213:66" pos:end="213:66">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="215:13" pos:end="215:67"><expr pos:start="215:13" pos:end="215:66"><call pos:start="215:13" pos:end="215:66"><name pos:start="215:13" pos:end="215:24">powerpc_excp</name><argument_list pos:start="215:25" pos:end="215:66">(<argument pos:start="215:26" pos:end="215:28"><expr pos:start="215:26" pos:end="215:28"><name pos:start="215:26" pos:end="215:28">cpu</name></expr></argument>, <argument pos:start="215:31" pos:end="215:45"><expr pos:start="215:31" pos:end="215:45"><name pos:start="215:31" pos:end="215:45"><name pos:start="215:31" pos:end="215:33">env</name><operator pos:start="215:34" pos:end="215:35">-&gt;</operator><name pos:start="215:36" pos:end="215:45">excp_model</name></name></expr></argument>, <argument pos:start="215:48" pos:end="215:65"><expr pos:start="215:48" pos:end="215:65"><name pos:start="215:48" pos:end="215:65">POWERPC_EXCP_PERFM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="217:13" pos:end="217:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="221:9" pos:end="221:31">/* Thermal interrupt */</comment>

        <if_stmt pos:start="223:9" pos:end="231:9"><if pos:start="223:9" pos:end="231:9">if <condition pos:start="223:12" pos:end="223:65">(<expr pos:start="223:13" pos:end="223:64"><name pos:start="223:13" pos:end="223:35"><name pos:start="223:13" pos:end="223:15">env</name><operator pos:start="223:16" pos:end="223:17">-&gt;</operator><name pos:start="223:18" pos:end="223:35">pending_interrupts</name></name> <operator pos:start="223:37" pos:end="223:37">&amp;</operator> <operator pos:start="223:39" pos:end="223:39">(</operator><literal type="number" pos:start="223:40" pos:end="223:40">1</literal> <operator pos:start="223:42" pos:end="223:43">&lt;&lt;</operator> <name pos:start="223:45" pos:end="223:63">PPC_INTERRUPT_THERM</name><operator pos:start="223:64" pos:end="223:64">)</operator></expr>)</condition> <block pos:start="223:67" pos:end="231:9">{<block_content pos:start="225:13" pos:end="229:19">

            <expr_stmt pos:start="225:13" pos:end="225:67"><expr pos:start="225:13" pos:end="225:66"><name pos:start="225:13" pos:end="225:35"><name pos:start="225:13" pos:end="225:15">env</name><operator pos:start="225:16" pos:end="225:17">-&gt;</operator><name pos:start="225:18" pos:end="225:35">pending_interrupts</name></name> <operator pos:start="225:37" pos:end="225:38">&amp;=</operator> <operator pos:start="225:40" pos:end="225:40">~</operator><operator pos:start="225:41" pos:end="225:41">(</operator><literal type="number" pos:start="225:42" pos:end="225:42">1</literal> <operator pos:start="225:44" pos:end="225:45">&lt;&lt;</operator> <name pos:start="225:47" pos:end="225:65">PPC_INTERRUPT_THERM</name><operator pos:start="225:66" pos:end="225:66">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="227:13" pos:end="227:67"><expr pos:start="227:13" pos:end="227:66"><call pos:start="227:13" pos:end="227:66"><name pos:start="227:13" pos:end="227:24">powerpc_excp</name><argument_list pos:start="227:25" pos:end="227:66">(<argument pos:start="227:26" pos:end="227:28"><expr pos:start="227:26" pos:end="227:28"><name pos:start="227:26" pos:end="227:28">cpu</name></expr></argument>, <argument pos:start="227:31" pos:end="227:45"><expr pos:start="227:31" pos:end="227:45"><name pos:start="227:31" pos:end="227:45"><name pos:start="227:31" pos:end="227:33">env</name><operator pos:start="227:34" pos:end="227:35">-&gt;</operator><name pos:start="227:36" pos:end="227:45">excp_model</name></name></expr></argument>, <argument pos:start="227:48" pos:end="227:65"><expr pos:start="227:48" pos:end="227:65"><name pos:start="227:48" pos:end="227:65">POWERPC_EXCP_THERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="229:13" pos:end="229:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
