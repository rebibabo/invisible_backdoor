<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9881.c" pos:tabs="8"><function pos:start="1:1" pos:end="93:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">host_signal_handler</name><parameter_list pos:start="1:32" pos:end="3:42">(<parameter pos:start="1:33" pos:end="1:47"><decl pos:start="1:33" pos:end="1:47"><type pos:start="1:33" pos:end="1:47"><name pos:start="1:33" pos:end="1:35">int</name></type> <name pos:start="1:37" pos:end="1:47">host_signum</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:64"><decl pos:start="1:50" pos:end="1:64"><type pos:start="1:50" pos:end="1:64"><name pos:start="1:50" pos:end="1:58">siginfo_t</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:64">info</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:41"><decl pos:start="3:33" pos:end="3:41"><type pos:start="3:33" pos:end="3:41"><name pos:start="3:33" pos:end="3:36">void</name> <modifier pos:start="3:38" pos:end="3:38">*</modifier></type><name pos:start="3:39" pos:end="3:41">puc</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="93:1">{<block_content pos:start="7:5" pos:end="91:25">

    <decl_stmt pos:start="7:5" pos:end="7:44"><decl pos:start="7:5" pos:end="7:43"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">CPUArchState</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:21">env</name> <init pos:start="7:23" pos:end="7:43">= <expr pos:start="7:25" pos:end="7:43"><name pos:start="7:25" pos:end="7:43"><name pos:start="7:25" pos:end="7:34">thread_cpu</name><operator pos:start="7:35" pos:end="7:36">-&gt;</operator><name pos:start="7:37" pos:end="7:43">env_ptr</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">CPUState</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:17">cpu</name> <init pos:start="9:19" pos:end="9:36">= <expr pos:start="9:21" pos:end="9:36"><call pos:start="9:21" pos:end="9:36"><name pos:start="9:21" pos:end="9:31">ENV_GET_CPU</name><argument_list pos:start="9:32" pos:end="9:36">(<argument pos:start="9:33" pos:end="9:35"><expr pos:start="9:33" pos:end="9:35"><name pos:start="9:33" pos:end="9:35">env</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:32"><decl pos:start="11:5" pos:end="11:31"><type pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:13">TaskState</name> <modifier pos:start="11:15" pos:end="11:15">*</modifier></type><name pos:start="11:16" pos:end="11:17">ts</name> <init pos:start="11:19" pos:end="11:31">= <expr pos:start="11:21" pos:end="11:31"><name pos:start="11:21" pos:end="11:31"><name pos:start="11:21" pos:end="11:23">cpu</name><operator pos:start="11:24" pos:end="11:25">-&gt;</operator><name pos:start="11:26" pos:end="11:31">opaque</name></name></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="15:5" pos:end="15:12"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">sig</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:27"><decl pos:start="17:5" pos:end="17:26"><type pos:start="17:5" pos:end="17:20"><name pos:start="17:5" pos:end="17:20">target_siginfo_t</name></type> <name pos:start="17:22" pos:end="17:26">tinfo</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:25"><decl pos:start="19:5" pos:end="19:24"><type pos:start="19:5" pos:end="19:16"><name pos:start="19:5" pos:end="19:14">ucontext_t</name> <modifier pos:start="19:16" pos:end="19:16">*</modifier></type><name pos:start="19:17" pos:end="19:18">uc</name> <init pos:start="19:20" pos:end="19:24">= <expr pos:start="19:22" pos:end="19:24"><name pos:start="19:22" pos:end="19:24">puc</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:32"><decl pos:start="21:5" pos:end="21:31"><type pos:start="21:5" pos:end="21:30"><name pos:start="21:5" pos:end="21:28"><name pos:start="21:5" pos:end="21:10">struct</name> <name pos:start="21:12" pos:end="21:28">emulated_sigtable</name></name> <modifier pos:start="21:30" pos:end="21:30">*</modifier></type><name pos:start="21:31" pos:end="21:31">k</name></decl>;</decl_stmt>



    <comment type="block" pos:start="25:5" pos:end="27:39">/* the CPU emulator uses some host signals to detect exceptions,

       we forward to it some signals */</comment>

    <if_stmt pos:start="29:5" pos:end="37:5"><if pos:start="29:5" pos:end="37:5">if <condition pos:start="29:8" pos:end="31:29">(<expr pos:start="29:9" pos:end="31:28"><operator pos:start="29:9" pos:end="29:9">(</operator><name pos:start="29:10" pos:end="29:20">host_signum</name> <operator pos:start="29:22" pos:end="29:23">==</operator> <name pos:start="29:25" pos:end="29:31">SIGSEGV</name> <operator pos:start="29:33" pos:end="29:34">||</operator> <name pos:start="29:36" pos:end="29:46">host_signum</name> <operator pos:start="29:48" pos:end="29:49">==</operator> <name pos:start="29:51" pos:end="29:56">SIGBUS</name><operator pos:start="29:57" pos:end="29:57">)</operator>

        <operator pos:start="31:9" pos:end="31:10">&amp;&amp;</operator> <name pos:start="31:12" pos:end="31:24"><name pos:start="31:12" pos:end="31:15">info</name><operator pos:start="31:16" pos:end="31:17">-&gt;</operator><name pos:start="31:18" pos:end="31:24">si_code</name></name> <operator pos:start="31:26" pos:end="31:26">&gt;</operator> <literal type="number" pos:start="31:28" pos:end="31:28">0</literal></expr>)</condition> <block pos:start="31:31" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:19">

        <if_stmt pos:start="33:9" pos:end="35:19"><if pos:start="33:9" pos:end="35:19">if <condition pos:start="33:12" pos:end="33:55">(<expr pos:start="33:13" pos:end="33:54"><call pos:start="33:13" pos:end="33:54"><name pos:start="33:13" pos:end="33:30">cpu_signal_handler</name><argument_list pos:start="33:31" pos:end="33:54">(<argument pos:start="33:32" pos:end="33:42"><expr pos:start="33:32" pos:end="33:42"><name pos:start="33:32" pos:end="33:42">host_signum</name></expr></argument>, <argument pos:start="33:45" pos:end="33:48"><expr pos:start="33:45" pos:end="33:48"><name pos:start="33:45" pos:end="33:48">info</name></expr></argument>, <argument pos:start="33:51" pos:end="33:53"><expr pos:start="33:51" pos:end="33:53"><name pos:start="33:51" pos:end="33:53">puc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="35:13" pos:end="35:19"><block_content pos:start="35:13" pos:end="35:19">

            <return pos:start="35:13" pos:end="35:19">return;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:34">/* get target signal number */</comment>

    <expr_stmt pos:start="43:5" pos:end="43:45"><expr pos:start="43:5" pos:end="43:44"><name pos:start="43:5" pos:end="43:7">sig</name> <operator pos:start="43:9" pos:end="43:9">=</operator> <call pos:start="43:11" pos:end="43:44"><name pos:start="43:11" pos:end="43:31">host_to_target_signal</name><argument_list pos:start="43:32" pos:end="43:44">(<argument pos:start="43:33" pos:end="43:43"><expr pos:start="43:33" pos:end="43:43"><name pos:start="43:33" pos:end="43:43">host_signum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="45:5" pos:end="47:15"><if pos:start="45:5" pos:end="47:15">if <condition pos:start="45:8" pos:end="45:37">(<expr pos:start="45:9" pos:end="45:36"><name pos:start="45:9" pos:end="45:24"><name pos:start="45:9" pos:end="45:11">sig</name> <argument_list type="generic" pos:start="45:13" pos:end="45:24">&lt; <argument pos:start="45:15" pos:end="45:22"><expr pos:start="45:15" pos:end="45:22"><literal type="number" pos:start="45:15" pos:end="45:15">1</literal> <operator pos:start="45:17" pos:end="45:18">||</operator> <name pos:start="45:20" pos:end="45:22">sig</name></expr></argument> &gt;</argument_list></name> <name pos:start="45:26" pos:end="45:36">TARGET_NSIG</name></expr>)</condition><block type="pseudo" pos:start="47:9" pos:end="47:15"><block_content pos:start="47:9" pos:end="47:15">

        <return pos:start="47:9" pos:end="47:15">return;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:50"><expr pos:start="49:5" pos:end="49:49"><call pos:start="49:5" pos:end="49:49"><name pos:start="49:5" pos:end="49:26">trace_user_host_signal</name><argument_list pos:start="49:27" pos:end="49:49">(<argument pos:start="49:28" pos:end="49:30"><expr pos:start="49:28" pos:end="49:30"><name pos:start="49:28" pos:end="49:30">env</name></expr></argument>, <argument pos:start="49:33" pos:end="49:43"><expr pos:start="49:33" pos:end="49:43"><name pos:start="49:33" pos:end="49:43">host_signum</name></expr></argument>, <argument pos:start="49:46" pos:end="49:48"><expr pos:start="49:46" pos:end="49:48"><name pos:start="49:46" pos:end="49:48">sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:35"><expr pos:start="53:5" pos:end="53:34"><call pos:start="53:5" pos:end="53:34"><name pos:start="53:5" pos:end="53:29">rewind_if_in_safe_syscall</name><argument_list pos:start="53:30" pos:end="53:34">(<argument pos:start="53:31" pos:end="53:33"><expr pos:start="53:31" pos:end="53:33"><name pos:start="53:31" pos:end="53:33">puc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:48"><expr pos:start="57:5" pos:end="57:47"><call pos:start="57:5" pos:end="57:47"><name pos:start="57:5" pos:end="57:33">host_to_target_siginfo_noswap</name><argument_list pos:start="57:34" pos:end="57:47">(<argument pos:start="57:35" pos:end="57:40"><expr pos:start="57:35" pos:end="57:40"><operator pos:start="57:35" pos:end="57:35">&amp;</operator><name pos:start="57:36" pos:end="57:40">tinfo</name></expr></argument>, <argument pos:start="57:43" pos:end="57:46"><expr pos:start="57:43" pos:end="57:46"><name pos:start="57:43" pos:end="57:46">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:29"><expr pos:start="59:5" pos:end="59:28"><name pos:start="59:5" pos:end="59:5">k</name> <operator pos:start="59:7" pos:end="59:7">=</operator> <operator pos:start="59:9" pos:end="59:9">&amp;</operator><name pos:start="59:10" pos:end="59:28"><name pos:start="59:10" pos:end="59:11">ts</name><operator pos:start="59:12" pos:end="59:13">-&gt;</operator><name pos:start="59:14" pos:end="59:19">sigtab</name><index pos:start="59:20" pos:end="59:28">[<expr pos:start="59:21" pos:end="59:27"><name pos:start="59:21" pos:end="59:23">sig</name> <operator pos:start="59:25" pos:end="59:25">-</operator> <literal type="number" pos:start="59:27" pos:end="59:27">1</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:20"><expr pos:start="61:5" pos:end="61:19"><name pos:start="61:5" pos:end="61:11"><name pos:start="61:5" pos:end="61:5">k</name><operator pos:start="61:6" pos:end="61:7">-&gt;</operator><name pos:start="61:8" pos:end="61:11">info</name></name> <operator pos:start="61:13" pos:end="61:13">=</operator> <name pos:start="61:15" pos:end="61:19">tinfo</name></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:21"><expr pos:start="63:5" pos:end="63:20"><name pos:start="63:5" pos:end="63:14"><name pos:start="63:5" pos:end="63:5">k</name><operator pos:start="63:6" pos:end="63:7">-&gt;</operator><name pos:start="63:8" pos:end="63:14">pending</name></name> <operator pos:start="63:16" pos:end="63:16">=</operator> <name pos:start="63:18" pos:end="63:20">sig</name></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:27"><expr pos:start="65:5" pos:end="65:26"><name pos:start="65:5" pos:end="65:22"><name pos:start="65:5" pos:end="65:6">ts</name><operator pos:start="65:7" pos:end="65:8">-&gt;</operator><name pos:start="65:9" pos:end="65:22">signal_pending</name></name> <operator pos:start="65:24" pos:end="65:24">=</operator> <literal type="number" pos:start="65:26" pos:end="65:26">1</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="69:5" pos:end="79:7">/* Block host signals until target signal handler entered. We

     * can't block SIGSEGV or SIGBUS while we're executing guest

     * code in case the guest code provokes one in the window between

     * now and it getting out to the main loop. Signals will be

     * unblocked again in process_pending_signals().

     */</comment>

    <expr_stmt pos:start="81:5" pos:end="81:32"><expr pos:start="81:5" pos:end="81:31"><call pos:start="81:5" pos:end="81:31"><name pos:start="81:5" pos:end="81:14">sigfillset</name><argument_list pos:start="81:15" pos:end="81:31">(<argument pos:start="81:16" pos:end="81:30"><expr pos:start="81:16" pos:end="81:30"><operator pos:start="81:16" pos:end="81:16">&amp;</operator><name pos:start="81:17" pos:end="81:30"><name pos:start="81:17" pos:end="81:18">uc</name><operator pos:start="81:19" pos:end="81:20">-&gt;</operator><name pos:start="81:21" pos:end="81:30">uc_sigmask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:40"><expr pos:start="83:5" pos:end="83:39"><call pos:start="83:5" pos:end="83:39"><name pos:start="83:5" pos:end="83:13">sigdelset</name><argument_list pos:start="83:14" pos:end="83:39">(<argument pos:start="83:15" pos:end="83:29"><expr pos:start="83:15" pos:end="83:29"><operator pos:start="83:15" pos:end="83:15">&amp;</operator><name pos:start="83:16" pos:end="83:29"><name pos:start="83:16" pos:end="83:17">uc</name><operator pos:start="83:18" pos:end="83:19">-&gt;</operator><name pos:start="83:20" pos:end="83:29">uc_sigmask</name></name></expr></argument>, <argument pos:start="83:32" pos:end="83:38"><expr pos:start="83:32" pos:end="83:38"><name pos:start="83:32" pos:end="83:38">SIGSEGV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:39"><expr pos:start="85:5" pos:end="85:38"><call pos:start="85:5" pos:end="85:38"><name pos:start="85:5" pos:end="85:13">sigdelset</name><argument_list pos:start="85:14" pos:end="85:38">(<argument pos:start="85:15" pos:end="85:29"><expr pos:start="85:15" pos:end="85:29"><operator pos:start="85:15" pos:end="85:15">&amp;</operator><name pos:start="85:16" pos:end="85:29"><name pos:start="85:16" pos:end="85:17">uc</name><operator pos:start="85:18" pos:end="85:19">-&gt;</operator><name pos:start="85:20" pos:end="85:29">uc_sigmask</name></name></expr></argument>, <argument pos:start="85:32" pos:end="85:37"><expr pos:start="85:32" pos:end="85:37"><name pos:start="85:32" pos:end="85:37">SIGBUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="89:5" pos:end="89:55">/* interrupt the virtual CPU as soon as possible */</comment>

    <expr_stmt pos:start="91:5" pos:end="91:25"><expr pos:start="91:5" pos:end="91:24"><call pos:start="91:5" pos:end="91:24"><name pos:start="91:5" pos:end="91:12">cpu_exit</name><argument_list pos:start="91:13" pos:end="91:24">(<argument pos:start="91:14" pos:end="91:23"><expr pos:start="91:14" pos:end="91:23"><name pos:start="91:14" pos:end="91:23">thread_cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
