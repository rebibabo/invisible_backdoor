<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/1953.c" pos:tabs="8"><function pos:start="1:1" pos:end="85:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:16">ff_eval_refl</name><parameter_list pos:start="1:17" pos:end="1:72">(<parameter pos:start="1:18" pos:end="1:26"><decl pos:start="1:18" pos:end="1:26"><type pos:start="1:18" pos:end="1:26"><name pos:start="1:18" pos:end="1:20">int</name> <modifier pos:start="1:22" pos:end="1:22">*</modifier></type><name pos:start="1:23" pos:end="1:26">refl</name></decl></parameter>, <parameter pos:start="1:29" pos:end="1:48"><decl pos:start="1:29" pos:end="1:48"><type pos:start="1:29" pos:end="1:48"><specifier pos:start="1:29" pos:end="1:33">const</specifier> <name pos:start="1:35" pos:end="1:41">int16_t</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:48">coefs</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:71"><decl pos:start="1:51" pos:end="1:71"><type pos:start="1:51" pos:end="1:71"><name pos:start="1:51" pos:end="1:64">AVCodecContext</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:71">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="85:1">{<block_content pos:start="5:5" pos:end="83:13">

    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">b</name></decl>, <decl pos:start="5:12" pos:end="5:12"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:12">i</name></decl>, <decl pos:start="5:15" pos:end="5:15"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:15" pos:end="5:15">j</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:27"><decl pos:start="7:5" pos:end="7:26"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:26"><name pos:start="7:9" pos:end="7:15">buffer1</name><index pos:start="7:16" pos:end="7:26">[<expr pos:start="7:17" pos:end="7:25"><name pos:start="7:17" pos:end="7:25">LPC_ORDER</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:26"><name pos:start="9:9" pos:end="9:15">buffer2</name><index pos:start="9:16" pos:end="9:26">[<expr pos:start="9:17" pos:end="9:25"><name pos:start="9:17" pos:end="9:25">LPC_ORDER</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:9"><name pos:start="11:5" pos:end="11:7">int</name> <modifier pos:start="11:9" pos:end="11:9">*</modifier></type><name pos:start="11:10" pos:end="11:12">bp1</name> <init pos:start="11:14" pos:end="11:22">= <expr pos:start="11:16" pos:end="11:22"><name pos:start="11:16" pos:end="11:22">buffer1</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:9"><name pos:start="13:5" pos:end="13:7">int</name> <modifier pos:start="13:9" pos:end="13:9">*</modifier></type><name pos:start="13:10" pos:end="13:12">bp2</name> <init pos:start="13:14" pos:end="13:22">= <expr pos:start="13:16" pos:end="13:22"><name pos:start="13:16" pos:end="13:22">buffer2</name></expr></init></decl>;</decl_stmt>



    <for pos:start="17:5" pos:end="19:30">for <control pos:start="17:9" pos:end="17:33">(<init pos:start="17:10" pos:end="17:13"><expr pos:start="17:10" pos:end="17:12"><name pos:start="17:10" pos:end="17:10">i</name><operator pos:start="17:11" pos:end="17:11">=</operator><literal type="number" pos:start="17:12" pos:end="17:12">0</literal></expr>;</init> <condition pos:start="17:15" pos:end="17:28"><expr pos:start="17:15" pos:end="17:27"><name pos:start="17:15" pos:end="17:15">i</name> <operator pos:start="17:17" pos:end="17:17">&lt;</operator> <name pos:start="17:19" pos:end="17:27">LPC_ORDER</name></expr>;</condition> <incr pos:start="17:30" pos:end="17:32"><expr pos:start="17:30" pos:end="17:32"><name pos:start="17:30" pos:end="17:30">i</name><operator pos:start="17:31" pos:end="17:32">++</operator></expr></incr>)</control><block type="pseudo" pos:start="19:9" pos:end="19:30"><block_content pos:start="19:9" pos:end="19:30">

        <expr_stmt pos:start="19:9" pos:end="19:30"><expr pos:start="19:9" pos:end="19:29"><name pos:start="19:9" pos:end="19:18"><name pos:start="19:9" pos:end="19:15">buffer2</name><index pos:start="19:16" pos:end="19:18">[<expr pos:start="19:17" pos:end="19:17"><name pos:start="19:17" pos:end="19:17">i</name></expr>]</index></name> <operator pos:start="19:20" pos:end="19:20">=</operator> <name pos:start="19:22" pos:end="19:29"><name pos:start="19:22" pos:end="19:26">coefs</name><index pos:start="19:27" pos:end="19:29">[<expr pos:start="19:28" pos:end="19:28"><name pos:start="19:28" pos:end="19:28">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>



    <expr_stmt pos:start="23:5" pos:end="23:41"><expr pos:start="23:5" pos:end="23:40"><name pos:start="23:5" pos:end="23:21"><name pos:start="23:5" pos:end="23:8">refl</name><index pos:start="23:9" pos:end="23:21">[<expr pos:start="23:10" pos:end="23:20"><name pos:start="23:10" pos:end="23:18">LPC_ORDER</name><operator pos:start="23:19" pos:end="23:19">-</operator><literal type="number" pos:start="23:20" pos:end="23:20">1</literal></expr>]</index></name> <operator pos:start="23:23" pos:end="23:23">=</operator> <name pos:start="23:25" pos:end="23:40"><name pos:start="23:25" pos:end="23:27">bp2</name><index pos:start="23:28" pos:end="23:40">[<expr pos:start="23:29" pos:end="23:39"><name pos:start="23:29" pos:end="23:37">LPC_ORDER</name><operator pos:start="23:38" pos:end="23:38">-</operator><literal type="number" pos:start="23:39" pos:end="23:39">1</literal></expr>]</index></name></expr>;</expr_stmt>



    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:54">(<expr pos:start="27:9" pos:end="27:53"><operator pos:start="27:9" pos:end="27:9">(</operator><name pos:start="27:10" pos:end="27:17">unsigned</name><operator pos:start="27:18" pos:end="27:18">)</operator> <name pos:start="27:20" pos:end="27:35"><name pos:start="27:20" pos:end="27:22">bp2</name><index pos:start="27:23" pos:end="27:35">[<expr pos:start="27:24" pos:end="27:34"><name pos:start="27:24" pos:end="27:32">LPC_ORDER</name><operator pos:start="27:33" pos:end="27:33">-</operator><literal type="number" pos:start="27:34" pos:end="27:34">1</literal></expr>]</index></name> <operator pos:start="27:37" pos:end="27:37">+</operator> <literal type="number" pos:start="27:39" pos:end="27:44">0x1000</literal> <operator pos:start="27:46" pos:end="27:46">&gt;</operator> <literal type="number" pos:start="27:48" pos:end="27:53">0x1fff</literal></expr>)</condition> <block pos:start="27:56" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:17">

        <expr_stmt pos:start="29:9" pos:end="29:66"><expr pos:start="29:9" pos:end="29:65"><call pos:start="29:9" pos:end="29:65"><name pos:start="29:9" pos:end="29:14">av_log</name><argument_list pos:start="29:15" pos:end="29:65">(<argument pos:start="29:16" pos:end="29:20"><expr pos:start="29:16" pos:end="29:20"><name pos:start="29:16" pos:end="29:20">avctx</name></expr></argument>, <argument pos:start="29:23" pos:end="29:34"><expr pos:start="29:23" pos:end="29:34"><name pos:start="29:23" pos:end="29:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="29:37" pos:end="29:64"><expr pos:start="29:37" pos:end="29:64"><literal type="string" pos:start="29:37" pos:end="29:64">"Overflow. Broken sample?\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:17">return <expr pos:start="31:16" pos:end="31:16"><literal type="number" pos:start="31:16" pos:end="31:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="37:5" pos:end="81:5">for <control pos:start="37:9" pos:end="37:38">(<init pos:start="37:10" pos:end="37:25"><expr pos:start="37:10" pos:end="37:24"><name pos:start="37:10" pos:end="37:10">i</name> <operator pos:start="37:12" pos:end="37:12">=</operator> <name pos:start="37:14" pos:end="37:22">LPC_ORDER</name><operator pos:start="37:23" pos:end="37:23">-</operator><literal type="number" pos:start="37:24" pos:end="37:24">2</literal></expr>;</init> <condition pos:start="37:27" pos:end="37:33"><expr pos:start="37:27" pos:end="37:32"><name pos:start="37:27" pos:end="37:27">i</name> <operator pos:start="37:29" pos:end="37:30">&gt;=</operator> <literal type="number" pos:start="37:32" pos:end="37:32">0</literal></expr>;</condition> <incr pos:start="37:35" pos:end="37:37"><expr pos:start="37:35" pos:end="37:37"><name pos:start="37:35" pos:end="37:35">i</name><operator pos:start="37:36" pos:end="37:37">--</operator></expr></incr>)</control> <block pos:start="37:40" pos:end="81:5">{<block_content pos:start="39:9" pos:end="79:32">

        <expr_stmt pos:start="39:9" pos:end="39:49"><expr pos:start="39:9" pos:end="39:48"><name pos:start="39:9" pos:end="39:9">b</name> <operator pos:start="39:11" pos:end="39:11">=</operator> <literal type="number" pos:start="39:13" pos:end="39:19">0x1000</literal><operator pos:start="39:19" pos:end="39:19">-</operator><operator pos:start="39:20" pos:end="39:20">(</operator><operator pos:start="39:21" pos:end="39:21">(</operator><name pos:start="39:22" pos:end="39:29"><name pos:start="39:22" pos:end="39:24">bp2</name><index pos:start="39:25" pos:end="39:29">[<expr pos:start="39:26" pos:end="39:28"><name pos:start="39:26" pos:end="39:26">i</name><operator pos:start="39:27" pos:end="39:27">+</operator><literal type="number" pos:start="39:28" pos:end="39:28">1</literal></expr>]</index></name> <operator pos:start="39:31" pos:end="39:31">*</operator> <name pos:start="39:33" pos:end="39:40"><name pos:start="39:33" pos:end="39:35">bp2</name><index pos:start="39:36" pos:end="39:40">[<expr pos:start="39:37" pos:end="39:39"><name pos:start="39:37" pos:end="39:37">i</name><operator pos:start="39:38" pos:end="39:38">+</operator><literal type="number" pos:start="39:39" pos:end="39:39">1</literal></expr>]</index></name><operator pos:start="39:41" pos:end="39:41">)</operator> <operator pos:start="39:43" pos:end="39:44">&gt;&gt;</operator> <literal type="number" pos:start="39:46" pos:end="39:47">12</literal><operator pos:start="39:48" pos:end="39:48">)</operator></expr>;</expr_stmt>



        <if_stmt pos:start="43:9" pos:end="45:19"><if pos:start="43:9" pos:end="45:19">if <condition pos:start="43:12" pos:end="43:15">(<expr pos:start="43:13" pos:end="43:14"><operator pos:start="43:13" pos:end="43:13">!</operator><name pos:start="43:14" pos:end="43:14">b</name></expr>)</condition><block type="pseudo" pos:start="45:13" pos:end="45:19"><block_content pos:start="45:13" pos:end="45:19">

            <expr_stmt pos:start="45:13" pos:end="45:19"><expr pos:start="45:13" pos:end="45:18"><name pos:start="45:13" pos:end="45:13">b</name> <operator pos:start="45:15" pos:end="45:15">=</operator> <operator pos:start="45:17" pos:end="45:17">-</operator><literal type="number" pos:start="45:18" pos:end="45:18">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="49:9" pos:end="49:26"><expr pos:start="49:9" pos:end="49:25"><name pos:start="49:9" pos:end="49:9">b</name> <operator pos:start="49:11" pos:end="49:11">=</operator> <literal type="number" pos:start="49:13" pos:end="49:21">0x1000000</literal> <operator pos:start="49:23" pos:end="49:23">/</operator> <name pos:start="49:25" pos:end="49:25">b</name></expr>;</expr_stmt>

        <for pos:start="51:9" pos:end="65:9">for <control pos:start="51:13" pos:end="51:30">(<init pos:start="51:14" pos:end="51:17"><expr pos:start="51:14" pos:end="51:16"><name pos:start="51:14" pos:end="51:14">j</name><operator pos:start="51:15" pos:end="51:15">=</operator><literal type="number" pos:start="51:16" pos:end="51:16">0</literal></expr>;</init> <condition pos:start="51:19" pos:end="51:25"><expr pos:start="51:19" pos:end="51:24"><name pos:start="51:19" pos:end="51:19">j</name> <operator pos:start="51:21" pos:end="51:22">&lt;=</operator> <name pos:start="51:24" pos:end="51:24">i</name></expr>;</condition> <incr pos:start="51:27" pos:end="51:29"><expr pos:start="51:27" pos:end="51:29"><name pos:start="51:27" pos:end="51:27">j</name><operator pos:start="51:28" pos:end="51:29">++</operator></expr></incr>)</control> <block pos:start="51:32" pos:end="65:9">{<block_content pos:start="55:13" pos:end="63:75">

<cpp:if pos:start="53:1" pos:end="53:17">#<cpp:directive pos:start="53:2" pos:end="53:3">if</cpp:directive> <expr pos:start="53:5" pos:end="53:17"><name pos:start="53:5" pos:end="53:17">CONFIG_FTRAPV</name></expr></cpp:if>

            <decl_stmt pos:start="55:13" pos:end="55:60"><decl pos:start="55:13" pos:end="55:59"><type pos:start="55:13" pos:end="55:15"><name pos:start="55:13" pos:end="55:15">int</name></type> <name pos:start="55:17" pos:end="55:17">a</name> <init pos:start="55:19" pos:end="55:59">= <expr pos:start="55:21" pos:end="55:59"><name pos:start="55:21" pos:end="55:26"><name pos:start="55:21" pos:end="55:23">bp2</name><index pos:start="55:24" pos:end="55:26">[<expr pos:start="55:25" pos:end="55:25"><name pos:start="55:25" pos:end="55:25">j</name></expr>]</index></name> <operator pos:start="55:28" pos:end="55:28">-</operator> <operator pos:start="55:30" pos:end="55:30">(</operator><operator pos:start="55:31" pos:end="55:31">(</operator><name pos:start="55:32" pos:end="55:40"><name pos:start="55:32" pos:end="55:35">refl</name><index pos:start="55:36" pos:end="55:40">[<expr pos:start="55:37" pos:end="55:39"><name pos:start="55:37" pos:end="55:37">i</name><operator pos:start="55:38" pos:end="55:38">+</operator><literal type="number" pos:start="55:39" pos:end="55:39">1</literal></expr>]</index></name> <operator pos:start="55:42" pos:end="55:42">*</operator> <name pos:start="55:44" pos:end="55:51"><name pos:start="55:44" pos:end="55:46">bp2</name><index pos:start="55:47" pos:end="55:51">[<expr pos:start="55:48" pos:end="55:50"><name pos:start="55:48" pos:end="55:48">i</name><operator pos:start="55:49" pos:end="55:49">-</operator><name pos:start="55:50" pos:end="55:50">j</name></expr>]</index></name><operator pos:start="55:52" pos:end="55:52">)</operator> <operator pos:start="55:54" pos:end="55:55">&gt;&gt;</operator> <literal type="number" pos:start="55:57" pos:end="55:58">12</literal><operator pos:start="55:59" pos:end="55:59">)</operator></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="57:13" pos:end="62:0"><if pos:start="57:13" pos:end="62:0">if<condition pos:start="57:15" pos:end="57:52">(<expr pos:start="57:16" pos:end="57:51"><operator pos:start="57:16" pos:end="57:16">(</operator><name pos:start="57:17" pos:end="57:19">int</name><operator pos:start="57:20" pos:end="57:20">)</operator><operator pos:start="57:21" pos:end="57:21">(</operator><name pos:start="57:22" pos:end="57:22">a</name><operator pos:start="57:23" pos:end="57:23">*</operator><operator pos:start="57:24" pos:end="57:24">(</operator><name pos:start="57:25" pos:end="57:32">unsigned</name><operator pos:start="57:33" pos:end="57:33">)</operator><name pos:start="57:34" pos:end="57:34">b</name><operator pos:start="57:35" pos:end="57:35">)</operator> <operator pos:start="57:37" pos:end="57:38">!=</operator> <name pos:start="57:40" pos:end="57:40">a</name><operator pos:start="57:41" pos:end="57:41">*</operator><operator pos:start="57:42" pos:end="57:42">(</operator><name pos:start="57:43" pos:end="57:49">int64_t</name><operator pos:start="57:50" pos:end="57:50">)</operator><name pos:start="57:51" pos:end="57:51">b</name></expr>)</condition><block type="pseudo" pos:start="59:17" pos:end="62:0"><block_content pos:start="59:17" pos:end="62:0">

                <return pos:start="59:17" pos:end="62:0">return <expr pos:start="59:24" pos:end="59:24"><literal type="number" pos:start="59:24" pos:end="59:24">1</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif pos:start="61:1" pos:end="61:6">#<cpp:directive pos:start="61:2" pos:end="61:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="63:13" pos:end="63:75"><expr pos:start="63:13" pos:end="63:74"><name pos:start="63:13" pos:end="63:18"><name pos:start="63:13" pos:end="63:15">bp1</name><index pos:start="63:16" pos:end="63:18">[<expr pos:start="63:17" pos:end="63:17"><name pos:start="63:17" pos:end="63:17">j</name></expr>]</index></name> <operator pos:start="63:20" pos:end="63:20">=</operator> <operator pos:start="63:22" pos:end="63:22">(</operator><operator pos:start="63:23" pos:end="63:23">(</operator><name pos:start="63:24" pos:end="63:29"><name pos:start="63:24" pos:end="63:26">bp2</name><index pos:start="63:27" pos:end="63:29">[<expr pos:start="63:28" pos:end="63:28"><name pos:start="63:28" pos:end="63:28">j</name></expr>]</index></name> <operator pos:start="63:31" pos:end="63:31">-</operator> <operator pos:start="63:33" pos:end="63:33">(</operator><operator pos:start="63:34" pos:end="63:34">(</operator><name pos:start="63:35" pos:end="63:43"><name pos:start="63:35" pos:end="63:38">refl</name><index pos:start="63:39" pos:end="63:43">[<expr pos:start="63:40" pos:end="63:42"><name pos:start="63:40" pos:end="63:40">i</name><operator pos:start="63:41" pos:end="63:41">+</operator><literal type="number" pos:start="63:42" pos:end="63:42">1</literal></expr>]</index></name> <operator pos:start="63:45" pos:end="63:45">*</operator> <name pos:start="63:47" pos:end="63:54"><name pos:start="63:47" pos:end="63:49">bp2</name><index pos:start="63:50" pos:end="63:54">[<expr pos:start="63:51" pos:end="63:53"><name pos:start="63:51" pos:end="63:51">i</name><operator pos:start="63:52" pos:end="63:52">-</operator><name pos:start="63:53" pos:end="63:53">j</name></expr>]</index></name><operator pos:start="63:55" pos:end="63:55">)</operator> <operator pos:start="63:57" pos:end="63:58">&gt;&gt;</operator> <literal type="number" pos:start="63:60" pos:end="63:61">12</literal><operator pos:start="63:62" pos:end="63:62">)</operator><operator pos:start="63:63" pos:end="63:63">)</operator> <operator pos:start="63:65" pos:end="63:65">*</operator> <name pos:start="63:67" pos:end="63:67">b</name><operator pos:start="63:68" pos:end="63:68">)</operator> <operator pos:start="63:70" pos:end="63:71">&gt;&gt;</operator> <literal type="number" pos:start="63:73" pos:end="63:74">12</literal></expr>;</expr_stmt>

        </block_content>}</block></for>



        <if_stmt pos:start="69:9" pos:end="71:21"><if pos:start="69:9" pos:end="71:21">if <condition pos:start="69:12" pos:end="69:48">(<expr pos:start="69:13" pos:end="69:47"><operator pos:start="69:13" pos:end="69:13">(</operator><name pos:start="69:14" pos:end="69:21">unsigned</name><operator pos:start="69:22" pos:end="69:22">)</operator> <name pos:start="69:24" pos:end="69:29"><name pos:start="69:24" pos:end="69:26">bp1</name><index pos:start="69:27" pos:end="69:29">[<expr pos:start="69:28" pos:end="69:28"><name pos:start="69:28" pos:end="69:28">i</name></expr>]</index></name> <operator pos:start="69:31" pos:end="69:31">+</operator> <literal type="number" pos:start="69:33" pos:end="69:38">0x1000</literal> <operator pos:start="69:40" pos:end="69:40">&gt;</operator> <literal type="number" pos:start="69:42" pos:end="69:47">0x1fff</literal></expr>)</condition><block type="pseudo" pos:start="71:13" pos:end="71:21"><block_content pos:start="71:13" pos:end="71:21">

            <return pos:start="71:13" pos:end="71:21">return <expr pos:start="71:20" pos:end="71:20"><literal type="number" pos:start="71:20" pos:end="71:20">1</literal></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="75:9" pos:end="75:25"><expr pos:start="75:9" pos:end="75:24"><name pos:start="75:9" pos:end="75:15"><name pos:start="75:9" pos:end="75:12">refl</name><index pos:start="75:13" pos:end="75:15">[<expr pos:start="75:14" pos:end="75:14"><name pos:start="75:14" pos:end="75:14">i</name></expr>]</index></name> <operator pos:start="75:17" pos:end="75:17">=</operator> <name pos:start="75:19" pos:end="75:24"><name pos:start="75:19" pos:end="75:21">bp1</name><index pos:start="75:22" pos:end="75:24">[<expr pos:start="75:23" pos:end="75:23"><name pos:start="75:23" pos:end="75:23">i</name></expr>]</index></name></expr>;</expr_stmt>



        <expr_stmt pos:start="79:9" pos:end="79:32"><expr pos:start="79:9" pos:end="79:31"><call pos:start="79:9" pos:end="79:31"><name pos:start="79:9" pos:end="79:14">FFSWAP</name><argument_list pos:start="79:15" pos:end="79:31">(<argument pos:start="79:16" pos:end="79:20"><expr pos:start="79:16" pos:end="79:20"><name pos:start="79:16" pos:end="79:18">int</name> <operator pos:start="79:20" pos:end="79:20">*</operator></expr></argument>, <argument pos:start="79:23" pos:end="79:25"><expr pos:start="79:23" pos:end="79:25"><name pos:start="79:23" pos:end="79:25">bp1</name></expr></argument>, <argument pos:start="79:28" pos:end="79:30"><expr pos:start="79:28" pos:end="79:30"><name pos:start="79:28" pos:end="79:30">bp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <return pos:start="83:5" pos:end="83:13">return <expr pos:start="83:12" pos:end="83:12"><literal type="number" pos:start="83:12" pos:end="83:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
