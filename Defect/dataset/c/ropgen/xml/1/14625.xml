<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14625.c" pos:tabs="8"><function pos:start="1:1" pos:end="835:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">hls_slice_header</name><parameter_list pos:start="1:28" pos:end="1:43">(<parameter pos:start="1:29" pos:end="1:42"><decl pos:start="1:29" pos:end="1:42"><type pos:start="1:29" pos:end="1:41"><name pos:start="1:29" pos:end="1:39">HEVCContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:42">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="835:1">{<block_content pos:start="5:5" pos:end="833:13">

    <decl_stmt pos:start="5:5" pos:end="5:39"><decl pos:start="5:5" pos:end="5:38"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">GetBitContext</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:21">gb</name> <init pos:start="5:23" pos:end="5:38">= <expr pos:start="5:25" pos:end="5:38"><operator pos:start="5:25" pos:end="5:25">&amp;</operator><name pos:start="5:26" pos:end="5:38"><name pos:start="5:26" pos:end="5:26">s</name><operator pos:start="5:27" pos:end="5:28">-&gt;</operator><name pos:start="5:29" pos:end="5:34">HEVClc</name><operator pos:start="5:35" pos:end="5:36">-&gt;</operator><name pos:start="5:37" pos:end="5:38">gb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:30"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">SliceHeader</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:19">sh</name>   <init pos:start="7:23" pos:end="7:30">= <expr pos:start="7:25" pos:end="7:30"><operator pos:start="7:25" pos:end="7:25">&amp;</operator><name pos:start="7:26" pos:end="7:30"><name pos:start="7:26" pos:end="7:26">s</name><operator pos:start="7:27" pos:end="7:28">-&gt;</operator><name pos:start="7:29" pos:end="7:30">sh</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:15"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>, <decl pos:start="9:12" pos:end="9:14"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:14">ret</name></decl>;</decl_stmt>



    <comment type="line" pos:start="13:5" pos:end="13:23">// Coded parameters</comment>

    <expr_stmt pos:start="15:5" pos:end="15:48"><expr pos:start="15:5" pos:end="15:47"><name pos:start="15:5" pos:end="15:31"><name pos:start="15:5" pos:end="15:6">sh</name><operator pos:start="15:7" pos:end="15:8">-&gt;</operator><name pos:start="15:9" pos:end="15:31">first_slice_in_pic_flag</name></name> <operator pos:start="15:33" pos:end="15:33">=</operator> <call pos:start="15:35" pos:end="15:47"><name pos:start="15:35" pos:end="15:43">get_bits1</name><argument_list pos:start="15:44" pos:end="15:47">(<argument pos:start="15:45" pos:end="15:46"><expr pos:start="15:45" pos:end="15:46"><name pos:start="15:45" pos:end="15:46">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="27:5"><if pos:start="17:5" pos:end="27:5">if <condition pos:start="17:8" pos:end="17:64">(<expr pos:start="17:9" pos:end="17:63"><operator pos:start="17:9" pos:end="17:9">(</operator><call pos:start="17:10" pos:end="17:18"><name pos:start="17:10" pos:end="17:15">IS_IDR</name><argument_list pos:start="17:16" pos:end="17:18">(<argument pos:start="17:17" pos:end="17:17"><expr pos:start="17:17" pos:end="17:17"><name pos:start="17:17" pos:end="17:17">s</name></expr></argument>)</argument_list></call> <operator pos:start="17:20" pos:end="17:21">||</operator> <call pos:start="17:23" pos:end="17:31"><name pos:start="17:23" pos:end="17:28">IS_BLA</name><argument_list pos:start="17:29" pos:end="17:31">(<argument pos:start="17:30" pos:end="17:30"><expr pos:start="17:30" pos:end="17:30"><name pos:start="17:30" pos:end="17:30">s</name></expr></argument>)</argument_list></call><operator pos:start="17:32" pos:end="17:32">)</operator> <operator pos:start="17:34" pos:end="17:35">&amp;&amp;</operator> <name pos:start="17:37" pos:end="17:63"><name pos:start="17:37" pos:end="17:38">sh</name><operator pos:start="17:39" pos:end="17:40">-&gt;</operator><name pos:start="17:41" pos:end="17:63">first_slice_in_pic_flag</name></name></expr>)</condition> <block pos:start="17:66" pos:end="27:5">{<block_content pos:start="19:9" pos:end="25:34">

        <expr_stmt pos:start="19:9" pos:end="19:51"><expr pos:start="19:9" pos:end="19:50"><name pos:start="19:9" pos:end="19:21"><name pos:start="19:9" pos:end="19:9">s</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:21">seq_decode</name></name> <operator pos:start="19:23" pos:end="19:23">=</operator> <operator pos:start="19:25" pos:end="19:25">(</operator><name pos:start="19:26" pos:end="19:38"><name pos:start="19:26" pos:end="19:26">s</name><operator pos:start="19:27" pos:end="19:28">-&gt;</operator><name pos:start="19:29" pos:end="19:38">seq_decode</name></name> <operator pos:start="19:40" pos:end="19:40">+</operator> <literal type="number" pos:start="19:42" pos:end="19:42">1</literal><operator pos:start="19:43" pos:end="19:43">)</operator> <operator pos:start="19:45" pos:end="19:45">&amp;</operator> <literal type="number" pos:start="19:47" pos:end="19:50">0xff</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:32"><expr pos:start="21:9" pos:end="21:31"><name pos:start="21:9" pos:end="21:17"><name pos:start="21:9" pos:end="21:9">s</name><operator pos:start="21:10" pos:end="21:11">-&gt;</operator><name pos:start="21:12" pos:end="21:17">max_ra</name></name>     <operator pos:start="21:23" pos:end="21:23">=</operator> <name pos:start="21:25" pos:end="21:31">INT_MAX</name></expr>;</expr_stmt>

        <if_stmt pos:start="23:9" pos:end="25:34"><if pos:start="23:9" pos:end="25:34">if <condition pos:start="23:12" pos:end="23:22">(<expr pos:start="23:13" pos:end="23:21"><call pos:start="23:13" pos:end="23:21"><name pos:start="23:13" pos:end="23:18">IS_IDR</name><argument_list pos:start="23:19" pos:end="23:21">(<argument pos:start="23:20" pos:end="23:20"><expr pos:start="23:20" pos:end="23:20"><name pos:start="23:20" pos:end="23:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="25:13" pos:end="25:34"><block_content pos:start="25:13" pos:end="25:34">

            <expr_stmt pos:start="25:13" pos:end="25:34"><expr pos:start="25:13" pos:end="25:33"><call pos:start="25:13" pos:end="25:33"><name pos:start="25:13" pos:end="25:30">ff_hevc_clear_refs</name><argument_list pos:start="25:31" pos:end="25:33">(<argument pos:start="25:32" pos:end="25:32"><expr pos:start="25:32" pos:end="25:32"><name pos:start="25:32" pos:end="25:32">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:41"><expr pos:start="29:5" pos:end="29:40"><name pos:start="29:5" pos:end="29:36"><name pos:start="29:5" pos:end="29:6">sh</name><operator pos:start="29:7" pos:end="29:8">-&gt;</operator><name pos:start="29:9" pos:end="29:36">no_output_of_prior_pics_flag</name></name> <operator pos:start="29:38" pos:end="29:38">=</operator> <literal type="number" pos:start="29:40" pos:end="29:40">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="33:57"><if pos:start="31:5" pos:end="33:57">if <condition pos:start="31:8" pos:end="31:19">(<expr pos:start="31:9" pos:end="31:18"><call pos:start="31:9" pos:end="31:18"><name pos:start="31:9" pos:end="31:15">IS_IRAP</name><argument_list pos:start="31:16" pos:end="31:18">(<argument pos:start="31:17" pos:end="31:17"><expr pos:start="31:17" pos:end="31:17"><name pos:start="31:17" pos:end="31:17">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="33:9" pos:end="33:57"><block_content pos:start="33:9" pos:end="33:57">

        <expr_stmt pos:start="33:9" pos:end="33:57"><expr pos:start="33:9" pos:end="33:56"><name pos:start="33:9" pos:end="33:40"><name pos:start="33:9" pos:end="33:10">sh</name><operator pos:start="33:11" pos:end="33:12">-&gt;</operator><name pos:start="33:13" pos:end="33:40">no_output_of_prior_pics_flag</name></name> <operator pos:start="33:42" pos:end="33:42">=</operator> <call pos:start="33:44" pos:end="33:56"><name pos:start="33:44" pos:end="33:52">get_bits1</name><argument_list pos:start="33:53" pos:end="33:56">(<argument pos:start="33:54" pos:end="33:55"><expr pos:start="33:54" pos:end="33:55"><name pos:start="33:54" pos:end="33:55">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:40"><expr pos:start="37:5" pos:end="37:39"><name pos:start="37:5" pos:end="37:14"><name pos:start="37:5" pos:end="37:6">sh</name><operator pos:start="37:7" pos:end="37:8">-&gt;</operator><name pos:start="37:9" pos:end="37:14">pps_id</name></name> <operator pos:start="37:16" pos:end="37:16">=</operator> <call pos:start="37:18" pos:end="37:39"><name pos:start="37:18" pos:end="37:35">get_ue_golomb_long</name><argument_list pos:start="37:36" pos:end="37:39">(<argument pos:start="37:37" pos:end="37:38"><expr pos:start="37:37" pos:end="37:38"><name pos:start="37:37" pos:end="37:38">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="45:5"><if pos:start="39:5" pos:end="45:5">if <condition pos:start="39:8" pos:end="39:72">(<expr pos:start="39:9" pos:end="39:71"><name pos:start="39:9" pos:end="39:18"><name pos:start="39:9" pos:end="39:10">sh</name><operator pos:start="39:11" pos:end="39:12">-&gt;</operator><name pos:start="39:13" pos:end="39:18">pps_id</name></name> <operator pos:start="39:20" pos:end="39:21">&gt;=</operator> <name pos:start="39:23" pos:end="39:40">HEVC_MAX_PPS_COUNT</name> <operator pos:start="39:42" pos:end="39:43">||</operator> <operator pos:start="39:45" pos:end="39:45">!</operator><name pos:start="39:46" pos:end="39:71"><name pos:start="39:46" pos:end="39:46">s</name><operator pos:start="39:47" pos:end="39:48">-&gt;</operator><name pos:start="39:49" pos:end="39:50">ps</name><operator pos:start="39:51" pos:end="39:51">.</operator><name pos:start="39:52" pos:end="39:59">pps_list</name><index pos:start="39:60" pos:end="39:71">[<expr pos:start="39:61" pos:end="39:70"><name pos:start="39:61" pos:end="39:70"><name pos:start="39:61" pos:end="39:62">sh</name><operator pos:start="39:63" pos:end="39:64">-&gt;</operator><name pos:start="39:65" pos:end="39:70">pps_id</name></name></expr>]</index></name></expr>)</condition> <block pos:start="39:74" pos:end="45:5">{<block_content pos:start="41:9" pos:end="43:35">

        <expr_stmt pos:start="41:9" pos:end="41:80"><expr pos:start="41:9" pos:end="41:79"><call pos:start="41:9" pos:end="41:79"><name pos:start="41:9" pos:end="41:14">av_log</name><argument_list pos:start="41:15" pos:end="41:79">(<argument pos:start="41:16" pos:end="41:23"><expr pos:start="41:16" pos:end="41:23"><name pos:start="41:16" pos:end="41:23"><name pos:start="41:16" pos:end="41:16">s</name><operator pos:start="41:17" pos:end="41:18">-&gt;</operator><name pos:start="41:19" pos:end="41:23">avctx</name></name></expr></argument>, <argument pos:start="41:26" pos:end="41:37"><expr pos:start="41:26" pos:end="41:37"><name pos:start="41:26" pos:end="41:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="41:40" pos:end="41:66"><expr pos:start="41:40" pos:end="41:66"><literal type="string" pos:start="41:40" pos:end="41:66">"PPS id out of range: %d\n"</literal></expr></argument>, <argument pos:start="41:69" pos:end="41:78"><expr pos:start="41:69" pos:end="41:78"><name pos:start="41:69" pos:end="41:78"><name pos:start="41:69" pos:end="41:70">sh</name><operator pos:start="41:71" pos:end="41:72">-&gt;</operator><name pos:start="41:73" pos:end="41:78">pps_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="43:9" pos:end="43:35">return <expr pos:start="43:16" pos:end="43:34"><name pos:start="43:16" pos:end="43:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="47:5" pos:end="55:5"><if pos:start="47:5" pos:end="55:5">if <condition pos:start="47:8" pos:end="49:64">(<expr pos:start="47:9" pos:end="49:63"><operator pos:start="47:9" pos:end="47:9">!</operator><name pos:start="47:10" pos:end="47:36"><name pos:start="47:10" pos:end="47:11">sh</name><operator pos:start="47:12" pos:end="47:13">-&gt;</operator><name pos:start="47:14" pos:end="47:36">first_slice_in_pic_flag</name></name> <operator pos:start="47:38" pos:end="47:39">&amp;&amp;</operator>

        <name pos:start="49:9" pos:end="49:17"><name pos:start="49:9" pos:end="49:9">s</name><operator pos:start="49:10" pos:end="49:11">-&gt;</operator><name pos:start="49:12" pos:end="49:13">ps</name><operator pos:start="49:14" pos:end="49:14">.</operator><name pos:start="49:15" pos:end="49:17">pps</name></name> <operator pos:start="49:19" pos:end="49:20">!=</operator> <operator pos:start="49:22" pos:end="49:22">(</operator><name pos:start="49:23" pos:end="49:29">HEVCPPS</name><operator pos:start="49:30" pos:end="49:30">*</operator><operator pos:start="49:31" pos:end="49:31">)</operator><name pos:start="49:32" pos:end="49:57"><name pos:start="49:32" pos:end="49:32">s</name><operator pos:start="49:33" pos:end="49:34">-&gt;</operator><name pos:start="49:35" pos:end="49:36">ps</name><operator pos:start="49:37" pos:end="49:37">.</operator><name pos:start="49:38" pos:end="49:45">pps_list</name><index pos:start="49:46" pos:end="49:57">[<expr pos:start="49:47" pos:end="49:56"><name pos:start="49:47" pos:end="49:56"><name pos:start="49:47" pos:end="49:48">sh</name><operator pos:start="49:49" pos:end="49:50">-&gt;</operator><name pos:start="49:51" pos:end="49:56">pps_id</name></name></expr>]</index></name><operator pos:start="49:58" pos:end="49:59">-&gt;</operator><name pos:start="49:60" pos:end="49:63">data</name></expr>)</condition> <block pos:start="49:66" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:35">

        <expr_stmt pos:start="51:9" pos:end="51:72"><expr pos:start="51:9" pos:end="51:71"><call pos:start="51:9" pos:end="51:71"><name pos:start="51:9" pos:end="51:14">av_log</name><argument_list pos:start="51:15" pos:end="51:71">(<argument pos:start="51:16" pos:end="51:23"><expr pos:start="51:16" pos:end="51:23"><name pos:start="51:16" pos:end="51:23"><name pos:start="51:16" pos:end="51:16">s</name><operator pos:start="51:17" pos:end="51:18">-&gt;</operator><name pos:start="51:19" pos:end="51:23">avctx</name></name></expr></argument>, <argument pos:start="51:26" pos:end="51:37"><expr pos:start="51:26" pos:end="51:37"><name pos:start="51:26" pos:end="51:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="51:40" pos:end="51:70"><expr pos:start="51:40" pos:end="51:70"><literal type="string" pos:start="51:40" pos:end="51:70">"PPS changed between slices.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="53:9" pos:end="53:35">return <expr pos:start="53:16" pos:end="53:34"><name pos:start="53:16" pos:end="53:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:59"><expr pos:start="57:5" pos:end="57:58"><name pos:start="57:5" pos:end="57:13"><name pos:start="57:5" pos:end="57:5">s</name><operator pos:start="57:6" pos:end="57:7">-&gt;</operator><name pos:start="57:8" pos:end="57:9">ps</name><operator pos:start="57:10" pos:end="57:10">.</operator><name pos:start="57:11" pos:end="57:13">pps</name></name> <operator pos:start="57:15" pos:end="57:15">=</operator> <operator pos:start="57:17" pos:end="57:17">(</operator><name pos:start="57:18" pos:end="57:24">HEVCPPS</name><operator pos:start="57:25" pos:end="57:25">*</operator><operator pos:start="57:26" pos:end="57:26">)</operator><name pos:start="57:27" pos:end="57:52"><name pos:start="57:27" pos:end="57:27">s</name><operator pos:start="57:28" pos:end="57:29">-&gt;</operator><name pos:start="57:30" pos:end="57:31">ps</name><operator pos:start="57:32" pos:end="57:32">.</operator><name pos:start="57:33" pos:end="57:40">pps_list</name><index pos:start="57:41" pos:end="57:52">[<expr pos:start="57:42" pos:end="57:51"><name pos:start="57:42" pos:end="57:51"><name pos:start="57:42" pos:end="57:43">sh</name><operator pos:start="57:44" pos:end="57:45">-&gt;</operator><name pos:start="57:46" pos:end="57:51">pps_id</name></name></expr>]</index></name><operator pos:start="57:53" pos:end="57:54">-&gt;</operator><name pos:start="57:55" pos:end="57:58">data</name></expr>;</expr_stmt>

    <if_stmt pos:start="59:5" pos:end="61:45"><if pos:start="59:5" pos:end="61:45">if <condition pos:start="59:8" pos:end="59:65">(<expr pos:start="59:9" pos:end="59:64"><name pos:start="59:9" pos:end="59:24"><name pos:start="59:9" pos:end="59:9">s</name><operator pos:start="59:10" pos:end="59:11">-&gt;</operator><name pos:start="59:12" pos:end="59:24">nal_unit_type</name></name> <operator pos:start="59:26" pos:end="59:27">==</operator> <name pos:start="59:29" pos:end="59:44">HEVC_NAL_CRA_NUT</name> <operator pos:start="59:46" pos:end="59:47">&amp;&amp;</operator> <name pos:start="59:49" pos:end="59:59"><name pos:start="59:49" pos:end="59:49">s</name><operator pos:start="59:50" pos:end="59:51">-&gt;</operator><name pos:start="59:52" pos:end="59:59">last_eos</name></name> <operator pos:start="59:61" pos:end="59:62">==</operator> <literal type="number" pos:start="59:64" pos:end="59:64">1</literal></expr>)</condition><block type="pseudo" pos:start="61:9" pos:end="61:45"><block_content pos:start="61:9" pos:end="61:45">

        <expr_stmt pos:start="61:9" pos:end="61:45"><expr pos:start="61:9" pos:end="61:44"><name pos:start="61:9" pos:end="61:40"><name pos:start="61:9" pos:end="61:10">sh</name><operator pos:start="61:11" pos:end="61:12">-&gt;</operator><name pos:start="61:13" pos:end="61:40">no_output_of_prior_pics_flag</name></name> <operator pos:start="61:42" pos:end="61:42">=</operator> <literal type="number" pos:start="61:44" pos:end="61:44">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="65:5" pos:end="111:5"><if pos:start="65:5" pos:end="111:5">if <condition pos:start="65:8" pos:end="65:71">(<expr pos:start="65:9" pos:end="65:70"><name pos:start="65:9" pos:end="65:17"><name pos:start="65:9" pos:end="65:9">s</name><operator pos:start="65:10" pos:end="65:11">-&gt;</operator><name pos:start="65:12" pos:end="65:13">ps</name><operator pos:start="65:14" pos:end="65:14">.</operator><name pos:start="65:15" pos:end="65:17">sps</name></name> <operator pos:start="65:19" pos:end="65:20">!=</operator> <operator pos:start="65:22" pos:end="65:22">(</operator><name pos:start="65:23" pos:end="65:29">HEVCSPS</name><operator pos:start="65:30" pos:end="65:30">*</operator><operator pos:start="65:31" pos:end="65:31">)</operator><name pos:start="65:32" pos:end="65:64"><name pos:start="65:32" pos:end="65:32">s</name><operator pos:start="65:33" pos:end="65:34">-&gt;</operator><name pos:start="65:35" pos:end="65:36">ps</name><operator pos:start="65:37" pos:end="65:37">.</operator><name pos:start="65:38" pos:end="65:45">sps_list</name><index pos:start="65:46" pos:end="65:64">[<expr pos:start="65:47" pos:end="65:63"><name pos:start="65:47" pos:end="65:63"><name pos:start="65:47" pos:end="65:47">s</name><operator pos:start="65:48" pos:end="65:49">-&gt;</operator><name pos:start="65:50" pos:end="65:51">ps</name><operator pos:start="65:52" pos:end="65:52">.</operator><name pos:start="65:53" pos:end="65:55">pps</name><operator pos:start="65:56" pos:end="65:57">-&gt;</operator><name pos:start="65:58" pos:end="65:63">sps_id</name></name></expr>]</index></name><operator pos:start="65:65" pos:end="65:66">-&gt;</operator><name pos:start="65:67" pos:end="65:70">data</name></expr>)</condition> <block pos:start="65:73" pos:end="111:5">{<block_content pos:start="67:9" pos:end="109:32">

        <decl_stmt pos:start="67:9" pos:end="67:79"><decl pos:start="67:9" pos:end="67:78"><type pos:start="67:9" pos:end="67:23"><specifier pos:start="67:9" pos:end="67:13">const</specifier> <name pos:start="67:15" pos:end="67:21">HEVCSPS</name> <modifier pos:start="67:23" pos:end="67:23">*</modifier></type><name pos:start="67:24" pos:end="67:26">sps</name> <init pos:start="67:28" pos:end="67:78">= <expr pos:start="67:30" pos:end="67:78"><operator pos:start="67:30" pos:end="67:30">(</operator><name pos:start="67:31" pos:end="67:37">HEVCSPS</name><operator pos:start="67:38" pos:end="67:38">*</operator><operator pos:start="67:39" pos:end="67:39">)</operator><name pos:start="67:40" pos:end="67:72"><name pos:start="67:40" pos:end="67:40">s</name><operator pos:start="67:41" pos:end="67:42">-&gt;</operator><name pos:start="67:43" pos:end="67:44">ps</name><operator pos:start="67:45" pos:end="67:45">.</operator><name pos:start="67:46" pos:end="67:53">sps_list</name><index pos:start="67:54" pos:end="67:72">[<expr pos:start="67:55" pos:end="67:71"><name pos:start="67:55" pos:end="67:71"><name pos:start="67:55" pos:end="67:55">s</name><operator pos:start="67:56" pos:end="67:57">-&gt;</operator><name pos:start="67:58" pos:end="67:59">ps</name><operator pos:start="67:60" pos:end="67:60">.</operator><name pos:start="67:61" pos:end="67:63">pps</name><operator pos:start="67:64" pos:end="67:65">-&gt;</operator><name pos:start="67:66" pos:end="67:71">sps_id</name></name></expr>]</index></name><operator pos:start="67:73" pos:end="67:74">-&gt;</operator><name pos:start="67:75" pos:end="67:78">data</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="69:9" pos:end="69:44"><decl pos:start="69:9" pos:end="69:43"><type pos:start="69:9" pos:end="69:23"><specifier pos:start="69:9" pos:end="69:13">const</specifier> <name pos:start="69:15" pos:end="69:21">HEVCSPS</name> <modifier pos:start="69:23" pos:end="69:23">*</modifier></type><name pos:start="69:24" pos:end="69:31">last_sps</name> <init pos:start="69:33" pos:end="69:43">= <expr pos:start="69:35" pos:end="69:43"><name pos:start="69:35" pos:end="69:43"><name pos:start="69:35" pos:end="69:35">s</name><operator pos:start="69:36" pos:end="69:37">-&gt;</operator><name pos:start="69:38" pos:end="69:39">ps</name><operator pos:start="69:40" pos:end="69:40">.</operator><name pos:start="69:41" pos:end="69:43">sps</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="71:9" pos:end="71:35"><decl pos:start="71:9" pos:end="71:34"><type pos:start="71:9" pos:end="71:26"><name pos:start="71:9" pos:end="71:26"><name pos:start="71:9" pos:end="71:12">enum</name> <name pos:start="71:14" pos:end="71:26">AVPixelFormat</name></name></type> <name pos:start="71:28" pos:end="71:34">pix_fmt</name></decl>;</decl_stmt>



        <if_stmt pos:start="75:9" pos:end="85:9"><if pos:start="75:9" pos:end="85:9">if <condition pos:start="75:12" pos:end="75:75">(<expr pos:start="75:13" pos:end="75:74"><name pos:start="75:13" pos:end="75:20">last_sps</name> <operator pos:start="75:22" pos:end="75:23">&amp;&amp;</operator> <call pos:start="75:25" pos:end="75:34"><name pos:start="75:25" pos:end="75:31">IS_IRAP</name><argument_list pos:start="75:32" pos:end="75:34">(<argument pos:start="75:33" pos:end="75:33"><expr pos:start="75:33" pos:end="75:33"><name pos:start="75:33" pos:end="75:33">s</name></expr></argument>)</argument_list></call> <operator pos:start="75:36" pos:end="75:37">&amp;&amp;</operator> <name pos:start="75:39" pos:end="75:54"><name pos:start="75:39" pos:end="75:39">s</name><operator pos:start="75:40" pos:end="75:41">-&gt;</operator><name pos:start="75:42" pos:end="75:54">nal_unit_type</name></name> <operator pos:start="75:56" pos:end="75:57">!=</operator> <name pos:start="75:59" pos:end="75:74">HEVC_NAL_CRA_NUT</name></expr>)</condition> <block pos:start="75:77" pos:end="85:9">{<block_content pos:start="77:13" pos:end="83:53">

            <if_stmt pos:start="77:13" pos:end="83:53"><if pos:start="77:13" pos:end="83:53">if <condition pos:start="77:16" pos:end="81:93">(<expr pos:start="77:17" pos:end="81:92"><name pos:start="77:17" pos:end="77:26"><name pos:start="77:17" pos:end="77:19">sps</name><operator pos:start="77:20" pos:end="77:21">-&gt;</operator><name pos:start="77:22" pos:end="77:26">width</name></name> <operator pos:start="77:28" pos:end="77:29">!=</operator> <name pos:start="77:31" pos:end="77:45"><name pos:start="77:31" pos:end="77:38">last_sps</name><operator pos:start="77:39" pos:end="77:40">-&gt;</operator><name pos:start="77:41" pos:end="77:45">width</name></name> <operator pos:start="77:47" pos:end="77:48">||</operator> <name pos:start="77:50" pos:end="77:60"><name pos:start="77:50" pos:end="77:52">sps</name><operator pos:start="77:53" pos:end="77:54">-&gt;</operator><name pos:start="77:55" pos:end="77:60">height</name></name> <operator pos:start="77:62" pos:end="77:63">!=</operator> <name pos:start="77:65" pos:end="77:80"><name pos:start="77:65" pos:end="77:72">last_sps</name><operator pos:start="77:73" pos:end="77:74">-&gt;</operator><name pos:start="77:75" pos:end="77:80">height</name></name> <operator pos:start="77:82" pos:end="77:83">||</operator>

                <name pos:start="79:17" pos:end="79:60"><name pos:start="79:17" pos:end="79:19">sps</name><operator pos:start="79:20" pos:end="79:21">-&gt;</operator><name pos:start="79:22" pos:end="79:35">temporal_layer</name><index pos:start="79:36" pos:end="79:60">[<expr pos:start="79:37" pos:end="79:59"><name pos:start="79:37" pos:end="79:55"><name pos:start="79:37" pos:end="79:39">sps</name><operator pos:start="79:40" pos:end="79:41">-&gt;</operator><name pos:start="79:42" pos:end="79:55">max_sub_layers</name></name> <operator pos:start="79:57" pos:end="79:57">-</operator> <literal type="number" pos:start="79:59" pos:end="79:59">1</literal></expr>]</index></name><operator pos:start="79:61" pos:end="79:61">.</operator><name pos:start="79:62" pos:end="79:82">max_dec_pic_buffering</name> <operator pos:start="79:84" pos:end="79:85">!=</operator>

                <name pos:start="81:17" pos:end="81:70"><name pos:start="81:17" pos:end="81:24">last_sps</name><operator pos:start="81:25" pos:end="81:26">-&gt;</operator><name pos:start="81:27" pos:end="81:40">temporal_layer</name><index pos:start="81:41" pos:end="81:70">[<expr pos:start="81:42" pos:end="81:69"><name pos:start="81:42" pos:end="81:65"><name pos:start="81:42" pos:end="81:49">last_sps</name><operator pos:start="81:50" pos:end="81:51">-&gt;</operator><name pos:start="81:52" pos:end="81:65">max_sub_layers</name></name> <operator pos:start="81:67" pos:end="81:67">-</operator> <literal type="number" pos:start="81:69" pos:end="81:69">1</literal></expr>]</index></name><operator pos:start="81:71" pos:end="81:71">.</operator><name pos:start="81:72" pos:end="81:92">max_dec_pic_buffering</name></expr>)</condition><block type="pseudo" pos:start="83:17" pos:end="83:53"><block_content pos:start="83:17" pos:end="83:53">

                <expr_stmt pos:start="83:17" pos:end="83:53"><expr pos:start="83:17" pos:end="83:52"><name pos:start="83:17" pos:end="83:48"><name pos:start="83:17" pos:end="83:18">sh</name><operator pos:start="83:19" pos:end="83:20">-&gt;</operator><name pos:start="83:21" pos:end="83:48">no_output_of_prior_pics_flag</name></name> <operator pos:start="83:50" pos:end="83:50">=</operator> <literal type="number" pos:start="83:52" pos:end="83:52">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:30"><expr pos:start="87:9" pos:end="87:29"><call pos:start="87:9" pos:end="87:29"><name pos:start="87:9" pos:end="87:26">ff_hevc_clear_refs</name><argument_list pos:start="87:27" pos:end="87:29">(<argument pos:start="87:28" pos:end="87:28"><expr pos:start="87:28" pos:end="87:28"><name pos:start="87:28" pos:end="87:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="91:9" pos:end="91:37"><expr pos:start="91:9" pos:end="91:36"><name pos:start="91:9" pos:end="91:15">pix_fmt</name> <operator pos:start="91:17" pos:end="91:17">=</operator> <call pos:start="91:19" pos:end="91:36"><name pos:start="91:19" pos:end="91:28">get_format</name><argument_list pos:start="91:29" pos:end="91:36">(<argument pos:start="91:30" pos:end="91:30"><expr pos:start="91:30" pos:end="91:30"><name pos:start="91:30" pos:end="91:30">s</name></expr></argument>, <argument pos:start="91:33" pos:end="91:35"><expr pos:start="91:33" pos:end="91:35"><name pos:start="91:33" pos:end="91:35">sps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="93:9" pos:end="95:27"><if pos:start="93:9" pos:end="95:27">if <condition pos:start="93:12" pos:end="93:24">(<expr pos:start="93:13" pos:end="93:23"><name pos:start="93:13" pos:end="93:19">pix_fmt</name> <operator pos:start="93:21" pos:end="93:21">&lt;</operator> <literal type="number" pos:start="93:23" pos:end="93:23">0</literal></expr>)</condition><block type="pseudo" pos:start="95:13" pos:end="95:27"><block_content pos:start="95:13" pos:end="95:27">

            <return pos:start="95:13" pos:end="95:27">return <expr pos:start="95:20" pos:end="95:26"><name pos:start="95:20" pos:end="95:26">pix_fmt</name></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="99:9" pos:end="99:39"><expr pos:start="99:9" pos:end="99:38"><name pos:start="99:9" pos:end="99:11">ret</name> <operator pos:start="99:13" pos:end="99:13">=</operator> <call pos:start="99:15" pos:end="99:38"><name pos:start="99:15" pos:end="99:21">set_sps</name><argument_list pos:start="99:22" pos:end="99:38">(<argument pos:start="99:23" pos:end="99:23"><expr pos:start="99:23" pos:end="99:23"><name pos:start="99:23" pos:end="99:23">s</name></expr></argument>, <argument pos:start="99:26" pos:end="99:28"><expr pos:start="99:26" pos:end="99:28"><name pos:start="99:26" pos:end="99:28">sps</name></expr></argument>, <argument pos:start="99:31" pos:end="99:37"><expr pos:start="99:31" pos:end="99:37"><name pos:start="99:31" pos:end="99:37">pix_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="101:9" pos:end="103:23"><if pos:start="101:9" pos:end="103:23">if <condition pos:start="101:12" pos:end="101:20">(<expr pos:start="101:13" pos:end="101:19"><name pos:start="101:13" pos:end="101:15">ret</name> <operator pos:start="101:17" pos:end="101:17">&lt;</operator> <literal type="number" pos:start="101:19" pos:end="101:19">0</literal></expr>)</condition><block type="pseudo" pos:start="103:13" pos:end="103:23"><block_content pos:start="103:13" pos:end="103:23">

            <return pos:start="103:13" pos:end="103:23">return <expr pos:start="103:20" pos:end="103:22"><name pos:start="103:20" pos:end="103:22">ret</name></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="107:9" pos:end="107:51"><expr pos:start="107:9" pos:end="107:50"><name pos:start="107:9" pos:end="107:21"><name pos:start="107:9" pos:end="107:9">s</name><operator pos:start="107:10" pos:end="107:11">-&gt;</operator><name pos:start="107:12" pos:end="107:21">seq_decode</name></name> <operator pos:start="107:23" pos:end="107:23">=</operator> <operator pos:start="107:25" pos:end="107:25">(</operator><name pos:start="107:26" pos:end="107:38"><name pos:start="107:26" pos:end="107:26">s</name><operator pos:start="107:27" pos:end="107:28">-&gt;</operator><name pos:start="107:29" pos:end="107:38">seq_decode</name></name> <operator pos:start="107:40" pos:end="107:40">+</operator> <literal type="number" pos:start="107:42" pos:end="107:42">1</literal><operator pos:start="107:43" pos:end="107:43">)</operator> <operator pos:start="107:45" pos:end="107:45">&amp;</operator> <literal type="number" pos:start="107:47" pos:end="107:50">0xff</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:32"><expr pos:start="109:9" pos:end="109:31"><name pos:start="109:9" pos:end="109:17"><name pos:start="109:9" pos:end="109:9">s</name><operator pos:start="109:10" pos:end="109:11">-&gt;</operator><name pos:start="109:12" pos:end="109:17">max_ra</name></name>     <operator pos:start="109:23" pos:end="109:23">=</operator> <name pos:start="109:25" pos:end="109:31">INT_MAX</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="115:5" pos:end="115:41"><expr pos:start="115:5" pos:end="115:40"><name pos:start="115:5" pos:end="115:36"><name pos:start="115:5" pos:end="115:6">sh</name><operator pos:start="115:7" pos:end="115:8">-&gt;</operator><name pos:start="115:9" pos:end="115:36">dependent_slice_segment_flag</name></name> <operator pos:start="115:38" pos:end="115:38">=</operator> <literal type="number" pos:start="115:40" pos:end="115:40">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="117:5" pos:end="165:5"><if pos:start="117:5" pos:end="157:5">if <condition pos:start="117:8" pos:end="117:37">(<expr pos:start="117:9" pos:end="117:36"><operator pos:start="117:9" pos:end="117:9">!</operator><name pos:start="117:10" pos:end="117:36"><name pos:start="117:10" pos:end="117:11">sh</name><operator pos:start="117:12" pos:end="117:13">-&gt;</operator><name pos:start="117:14" pos:end="117:36">first_slice_in_pic_flag</name></name></expr>)</condition> <block pos:start="117:39" pos:end="157:5">{<block_content pos:start="119:9" pos:end="155:9">

        <decl_stmt pos:start="119:9" pos:end="119:33"><decl pos:start="119:9" pos:end="119:32"><type pos:start="119:9" pos:end="119:11"><name pos:start="119:9" pos:end="119:11">int</name></type> <name pos:start="119:13" pos:end="119:32">slice_address_length</name></decl>;</decl_stmt>



        <if_stmt pos:start="123:9" pos:end="125:61"><if pos:start="123:9" pos:end="125:61">if <condition pos:start="123:12" pos:end="123:61">(<expr pos:start="123:13" pos:end="123:60"><name pos:start="123:13" pos:end="123:60"><name pos:start="123:13" pos:end="123:13">s</name><operator pos:start="123:14" pos:end="123:15">-&gt;</operator><name pos:start="123:16" pos:end="123:17">ps</name><operator pos:start="123:18" pos:end="123:18">.</operator><name pos:start="123:19" pos:end="123:21">pps</name><operator pos:start="123:22" pos:end="123:23">-&gt;</operator><name pos:start="123:24" pos:end="123:60">dependent_slice_segments_enabled_flag</name></name></expr>)</condition><block type="pseudo" pos:start="125:13" pos:end="125:61"><block_content pos:start="125:13" pos:end="125:61">

            <expr_stmt pos:start="125:13" pos:end="125:61"><expr pos:start="125:13" pos:end="125:60"><name pos:start="125:13" pos:end="125:44"><name pos:start="125:13" pos:end="125:14">sh</name><operator pos:start="125:15" pos:end="125:16">-&gt;</operator><name pos:start="125:17" pos:end="125:44">dependent_slice_segment_flag</name></name> <operator pos:start="125:46" pos:end="125:46">=</operator> <call pos:start="125:48" pos:end="125:60"><name pos:start="125:48" pos:end="125:56">get_bits1</name><argument_list pos:start="125:57" pos:end="125:60">(<argument pos:start="125:58" pos:end="125:59"><expr pos:start="125:58" pos:end="125:59"><name pos:start="125:58" pos:end="125:59">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="129:9" pos:end="131:67"><expr pos:start="129:9" pos:end="131:66"><name pos:start="129:9" pos:end="129:28">slice_address_length</name> <operator pos:start="129:30" pos:end="129:30">=</operator> <call pos:start="129:32" pos:end="131:66"><name pos:start="129:32" pos:end="129:43">av_ceil_log2</name><argument_list pos:start="129:44" pos:end="131:66">(<argument pos:start="129:45" pos:end="131:65"><expr pos:start="129:45" pos:end="131:65"><name pos:start="129:45" pos:end="129:64"><name pos:start="129:45" pos:end="129:45">s</name><operator pos:start="129:46" pos:end="129:47">-&gt;</operator><name pos:start="129:48" pos:end="129:49">ps</name><operator pos:start="129:50" pos:end="129:50">.</operator><name pos:start="129:51" pos:end="129:53">sps</name><operator pos:start="129:54" pos:end="129:55">-&gt;</operator><name pos:start="129:56" pos:end="129:64">ctb_width</name></name> <operator pos:start="129:66" pos:end="129:66">*</operator>

                                            <name pos:start="131:45" pos:end="131:65"><name pos:start="131:45" pos:end="131:45">s</name><operator pos:start="131:46" pos:end="131:47">-&gt;</operator><name pos:start="131:48" pos:end="131:49">ps</name><operator pos:start="131:50" pos:end="131:50">.</operator><name pos:start="131:51" pos:end="131:53">sps</name><operator pos:start="131:54" pos:end="131:55">-&gt;</operator><name pos:start="131:56" pos:end="131:65">ctb_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:69"><expr pos:start="133:9" pos:end="133:68"><name pos:start="133:9" pos:end="133:30"><name pos:start="133:9" pos:end="133:10">sh</name><operator pos:start="133:11" pos:end="133:12">-&gt;</operator><name pos:start="133:13" pos:end="133:30">slice_segment_addr</name></name> <operator pos:start="133:32" pos:end="133:32">=</operator> <call pos:start="133:34" pos:end="133:68"><name pos:start="133:34" pos:end="133:42">get_bitsz</name><argument_list pos:start="133:43" pos:end="133:68">(<argument pos:start="133:44" pos:end="133:45"><expr pos:start="133:44" pos:end="133:45"><name pos:start="133:44" pos:end="133:45">gb</name></expr></argument>, <argument pos:start="133:48" pos:end="133:67"><expr pos:start="133:48" pos:end="133:67"><name pos:start="133:48" pos:end="133:67">slice_address_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="135:9" pos:end="145:9"><if pos:start="135:9" pos:end="145:9">if <condition pos:start="135:12" pos:end="135:83">(<expr pos:start="135:13" pos:end="135:82"><name pos:start="135:13" pos:end="135:34"><name pos:start="135:13" pos:end="135:14">sh</name><operator pos:start="135:15" pos:end="135:16">-&gt;</operator><name pos:start="135:17" pos:end="135:34">slice_segment_addr</name></name> <operator pos:start="135:36" pos:end="135:37">&gt;=</operator> <name pos:start="135:39" pos:end="135:58"><name pos:start="135:39" pos:end="135:39">s</name><operator pos:start="135:40" pos:end="135:41">-&gt;</operator><name pos:start="135:42" pos:end="135:43">ps</name><operator pos:start="135:44" pos:end="135:44">.</operator><name pos:start="135:45" pos:end="135:47">sps</name><operator pos:start="135:48" pos:end="135:49">-&gt;</operator><name pos:start="135:50" pos:end="135:58">ctb_width</name></name> <operator pos:start="135:60" pos:end="135:60">*</operator> <name pos:start="135:62" pos:end="135:82"><name pos:start="135:62" pos:end="135:62">s</name><operator pos:start="135:63" pos:end="135:64">-&gt;</operator><name pos:start="135:65" pos:end="135:66">ps</name><operator pos:start="135:67" pos:end="135:67">.</operator><name pos:start="135:68" pos:end="135:70">sps</name><operator pos:start="135:71" pos:end="135:72">-&gt;</operator><name pos:start="135:73" pos:end="135:82">ctb_height</name></name></expr>)</condition> <block pos:start="135:85" pos:end="145:9">{<block_content pos:start="137:13" pos:end="143:39">

            <expr_stmt pos:start="137:13" pos:end="141:43"><expr pos:start="137:13" pos:end="141:42"><call pos:start="137:13" pos:end="141:42"><name pos:start="137:13" pos:end="137:18">av_log</name><argument_list pos:start="137:19" pos:end="141:42">(<argument pos:start="137:20" pos:end="137:27"><expr pos:start="137:20" pos:end="137:27"><name pos:start="137:20" pos:end="137:27"><name pos:start="137:20" pos:end="137:20">s</name><operator pos:start="137:21" pos:end="137:22">-&gt;</operator><name pos:start="137:23" pos:end="137:27">avctx</name></name></expr></argument>, <argument pos:start="137:30" pos:end="137:41"><expr pos:start="137:30" pos:end="137:41"><name pos:start="137:30" pos:end="137:41">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="139:20" pos:end="139:57"><expr pos:start="139:20" pos:end="139:57"><literal type="string" pos:start="139:20" pos:end="139:57">"Invalid slice segment address: %u.\n"</literal></expr></argument>,

                   <argument pos:start="141:20" pos:end="141:41"><expr pos:start="141:20" pos:end="141:41"><name pos:start="141:20" pos:end="141:41"><name pos:start="141:20" pos:end="141:21">sh</name><operator pos:start="141:22" pos:end="141:23">-&gt;</operator><name pos:start="141:24" pos:end="141:41">slice_segment_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="143:13" pos:end="143:39">return <expr pos:start="143:20" pos:end="143:38"><name pos:start="143:20" pos:end="143:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="149:9" pos:end="155:9"><if pos:start="149:9" pos:end="155:9">if <condition pos:start="149:12" pos:end="149:46">(<expr pos:start="149:13" pos:end="149:45"><operator pos:start="149:13" pos:end="149:13">!</operator><name pos:start="149:14" pos:end="149:45"><name pos:start="149:14" pos:end="149:15">sh</name><operator pos:start="149:16" pos:end="149:17">-&gt;</operator><name pos:start="149:18" pos:end="149:45">dependent_slice_segment_flag</name></name></expr>)</condition> <block pos:start="149:48" pos:end="155:9">{<block_content pos:start="151:13" pos:end="153:27">

            <expr_stmt pos:start="151:13" pos:end="151:52"><expr pos:start="151:13" pos:end="151:51"><name pos:start="151:13" pos:end="151:26"><name pos:start="151:13" pos:end="151:14">sh</name><operator pos:start="151:15" pos:end="151:16">-&gt;</operator><name pos:start="151:17" pos:end="151:26">slice_addr</name></name> <operator pos:start="151:28" pos:end="151:28">=</operator> <name pos:start="151:30" pos:end="151:51"><name pos:start="151:30" pos:end="151:31">sh</name><operator pos:start="151:32" pos:end="151:33">-&gt;</operator><name pos:start="151:34" pos:end="151:51">slice_segment_addr</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="153:13" pos:end="153:27"><expr pos:start="153:13" pos:end="153:26"><name pos:start="153:13" pos:end="153:24"><name pos:start="153:13" pos:end="153:13">s</name><operator pos:start="153:14" pos:end="153:15">-&gt;</operator><name pos:start="153:16" pos:end="153:24">slice_idx</name></name><operator pos:start="153:25" pos:end="153:26">++</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="157:7" pos:end="165:5">else <block pos:start="157:12" pos:end="165:5">{<block_content pos:start="159:9" pos:end="163:35">

        <expr_stmt pos:start="159:9" pos:end="159:52"><expr pos:start="159:9" pos:end="159:51"><name pos:start="159:9" pos:end="159:30"><name pos:start="159:9" pos:end="159:10">sh</name><operator pos:start="159:11" pos:end="159:12">-&gt;</operator><name pos:start="159:13" pos:end="159:30">slice_segment_addr</name></name> <operator pos:start="159:32" pos:end="159:32">=</operator> <name pos:start="159:34" pos:end="159:47"><name pos:start="159:34" pos:end="159:35">sh</name><operator pos:start="159:36" pos:end="159:37">-&gt;</operator><name pos:start="159:38" pos:end="159:47">slice_addr</name></name> <operator pos:start="159:49" pos:end="159:49">=</operator> <literal type="number" pos:start="159:51" pos:end="159:51">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="161:9" pos:end="161:35"><expr pos:start="161:9" pos:end="161:34"><name pos:start="161:9" pos:end="161:20"><name pos:start="161:9" pos:end="161:9">s</name><operator pos:start="161:10" pos:end="161:11">-&gt;</operator><name pos:start="161:12" pos:end="161:20">slice_idx</name></name>           <operator pos:start="161:32" pos:end="161:32">=</operator> <literal type="number" pos:start="161:34" pos:end="161:34">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:35"><expr pos:start="163:9" pos:end="163:34"><name pos:start="163:9" pos:end="163:28"><name pos:start="163:9" pos:end="163:9">s</name><operator pos:start="163:10" pos:end="163:11">-&gt;</operator><name pos:start="163:12" pos:end="163:28">slice_initialized</name></name>   <operator pos:start="163:32" pos:end="163:32">=</operator> <literal type="number" pos:start="163:34" pos:end="163:34">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="169:5" pos:end="655:5"><if pos:start="169:5" pos:end="649:5">if <condition pos:start="169:8" pos:end="169:42">(<expr pos:start="169:9" pos:end="169:41"><operator pos:start="169:9" pos:end="169:9">!</operator><name pos:start="169:10" pos:end="169:41"><name pos:start="169:10" pos:end="169:11">sh</name><operator pos:start="169:12" pos:end="169:13">-&gt;</operator><name pos:start="169:14" pos:end="169:41">dependent_slice_segment_flag</name></name></expr>)</condition> <block pos:start="169:44" pos:end="649:5">{<block_content pos:start="171:9" pos:end="647:9">

        <expr_stmt pos:start="171:9" pos:end="171:33"><expr pos:start="171:9" pos:end="171:32"><name pos:start="171:9" pos:end="171:28"><name pos:start="171:9" pos:end="171:9">s</name><operator pos:start="171:10" pos:end="171:11">-&gt;</operator><name pos:start="171:12" pos:end="171:28">slice_initialized</name></name> <operator pos:start="171:30" pos:end="171:30">=</operator> <literal type="number" pos:start="171:32" pos:end="171:32">0</literal></expr>;</expr_stmt>



        <for pos:start="175:9" pos:end="177:29">for <control pos:start="175:13" pos:end="175:68">(<init pos:start="175:14" pos:end="175:19"><expr pos:start="175:14" pos:end="175:18"><name pos:start="175:14" pos:end="175:14">i</name> <operator pos:start="175:16" pos:end="175:16">=</operator> <literal type="number" pos:start="175:18" pos:end="175:18">0</literal></expr>;</init> <condition pos:start="175:21" pos:end="175:63"><expr pos:start="175:21" pos:end="175:62"><name pos:start="175:21" pos:end="175:21">i</name> <operator pos:start="175:23" pos:end="175:23">&lt;</operator> <name pos:start="175:25" pos:end="175:62"><name pos:start="175:25" pos:end="175:25">s</name><operator pos:start="175:26" pos:end="175:27">-&gt;</operator><name pos:start="175:28" pos:end="175:29">ps</name><operator pos:start="175:30" pos:end="175:30">.</operator><name pos:start="175:31" pos:end="175:33">pps</name><operator pos:start="175:34" pos:end="175:35">-&gt;</operator><name pos:start="175:36" pos:end="175:62">num_extra_slice_header_bits</name></name></expr>;</condition> <incr pos:start="175:65" pos:end="175:67"><expr pos:start="175:65" pos:end="175:67"><name pos:start="175:65" pos:end="175:65">i</name><operator pos:start="175:66" pos:end="175:67">++</operator></expr></incr>)</control><block type="pseudo" pos:start="177:13" pos:end="177:29"><block_content pos:start="177:13" pos:end="177:29">

            <expr_stmt pos:start="177:13" pos:end="177:29"><expr pos:start="177:13" pos:end="177:28"><call pos:start="177:13" pos:end="177:28"><name pos:start="177:13" pos:end="177:21">skip_bits</name><argument_list pos:start="177:22" pos:end="177:28">(<argument pos:start="177:23" pos:end="177:24"><expr pos:start="177:23" pos:end="177:24"><name pos:start="177:23" pos:end="177:24">gb</name></expr></argument>, <argument pos:start="177:27" pos:end="177:27"><expr pos:start="177:27" pos:end="177:27"><literal type="number" pos:start="177:27" pos:end="177:27">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>  <comment type="line" pos:start="177:32" pos:end="177:68">// slice_reserved_undetermined_flag[]</comment>



        <expr_stmt pos:start="181:9" pos:end="181:48"><expr pos:start="181:9" pos:end="181:47"><name pos:start="181:9" pos:end="181:22"><name pos:start="181:9" pos:end="181:10">sh</name><operator pos:start="181:11" pos:end="181:12">-&gt;</operator><name pos:start="181:13" pos:end="181:22">slice_type</name></name> <operator pos:start="181:24" pos:end="181:24">=</operator> <call pos:start="181:26" pos:end="181:47"><name pos:start="181:26" pos:end="181:43">get_ue_golomb_long</name><argument_list pos:start="181:44" pos:end="181:47">(<argument pos:start="181:45" pos:end="181:46"><expr pos:start="181:45" pos:end="181:46"><name pos:start="181:45" pos:end="181:46">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="183:9" pos:end="195:9"><if pos:start="183:9" pos:end="195:9">if <condition pos:start="183:12" pos:end="187:46">(<expr pos:start="183:13" pos:end="187:45"><operator pos:start="183:13" pos:end="183:13">!</operator><operator pos:start="183:14" pos:end="183:14">(</operator><name pos:start="183:15" pos:end="183:28"><name pos:start="183:15" pos:end="183:16">sh</name><operator pos:start="183:17" pos:end="183:18">-&gt;</operator><name pos:start="183:19" pos:end="183:28">slice_type</name></name> <operator pos:start="183:30" pos:end="183:31">==</operator> <name pos:start="183:33" pos:end="183:44">HEVC_SLICE_I</name> <operator pos:start="183:46" pos:end="183:47">||</operator>

              <name pos:start="185:15" pos:end="185:28"><name pos:start="185:15" pos:end="185:16">sh</name><operator pos:start="185:17" pos:end="185:18">-&gt;</operator><name pos:start="185:19" pos:end="185:28">slice_type</name></name> <operator pos:start="185:30" pos:end="185:31">==</operator> <name pos:start="185:33" pos:end="185:44">HEVC_SLICE_P</name> <operator pos:start="185:46" pos:end="185:47">||</operator>

              <name pos:start="187:15" pos:end="187:28"><name pos:start="187:15" pos:end="187:16">sh</name><operator pos:start="187:17" pos:end="187:18">-&gt;</operator><name pos:start="187:19" pos:end="187:28">slice_type</name></name> <operator pos:start="187:30" pos:end="187:31">==</operator> <name pos:start="187:33" pos:end="187:44">HEVC_SLICE_B</name><operator pos:start="187:45" pos:end="187:45">)</operator></expr>)</condition> <block pos:start="187:48" pos:end="195:9">{<block_content pos:start="189:13" pos:end="193:39">

            <expr_stmt pos:start="189:13" pos:end="191:35"><expr pos:start="189:13" pos:end="191:34"><call pos:start="189:13" pos:end="191:34"><name pos:start="189:13" pos:end="189:18">av_log</name><argument_list pos:start="189:19" pos:end="191:34">(<argument pos:start="189:20" pos:end="189:27"><expr pos:start="189:20" pos:end="189:27"><name pos:start="189:20" pos:end="189:27"><name pos:start="189:20" pos:end="189:20">s</name><operator pos:start="189:21" pos:end="189:22">-&gt;</operator><name pos:start="189:23" pos:end="189:27">avctx</name></name></expr></argument>, <argument pos:start="189:30" pos:end="189:41"><expr pos:start="189:30" pos:end="189:41"><name pos:start="189:30" pos:end="189:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="189:44" pos:end="189:70"><expr pos:start="189:44" pos:end="189:70"><literal type="string" pos:start="189:44" pos:end="189:70">"Unknown slice type: %d.\n"</literal></expr></argument>,

                   <argument pos:start="191:20" pos:end="191:33"><expr pos:start="191:20" pos:end="191:33"><name pos:start="191:20" pos:end="191:33"><name pos:start="191:20" pos:end="191:21">sh</name><operator pos:start="191:22" pos:end="191:23">-&gt;</operator><name pos:start="191:24" pos:end="191:33">slice_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="193:13" pos:end="193:39">return <expr pos:start="193:20" pos:end="193:38"><name pos:start="193:20" pos:end="193:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="197:9" pos:end="203:9"><if pos:start="197:9" pos:end="203:9">if <condition pos:start="197:12" pos:end="197:57">(<expr pos:start="197:13" pos:end="197:56"><call pos:start="197:13" pos:end="197:22"><name pos:start="197:13" pos:end="197:19">IS_IRAP</name><argument_list pos:start="197:20" pos:end="197:22">(<argument pos:start="197:21" pos:end="197:21"><expr pos:start="197:21" pos:end="197:21"><name pos:start="197:21" pos:end="197:21">s</name></expr></argument>)</argument_list></call> <operator pos:start="197:24" pos:end="197:25">&amp;&amp;</operator> <name pos:start="197:27" pos:end="197:40"><name pos:start="197:27" pos:end="197:28">sh</name><operator pos:start="197:29" pos:end="197:30">-&gt;</operator><name pos:start="197:31" pos:end="197:40">slice_type</name></name> <operator pos:start="197:42" pos:end="197:43">!=</operator> <name pos:start="197:45" pos:end="197:56">HEVC_SLICE_I</name></expr>)</condition> <block pos:start="197:59" pos:end="203:9">{<block_content pos:start="199:13" pos:end="201:39">

            <expr_stmt pos:start="199:13" pos:end="199:79"><expr pos:start="199:13" pos:end="199:78"><call pos:start="199:13" pos:end="199:78"><name pos:start="199:13" pos:end="199:18">av_log</name><argument_list pos:start="199:19" pos:end="199:78">(<argument pos:start="199:20" pos:end="199:27"><expr pos:start="199:20" pos:end="199:27"><name pos:start="199:20" pos:end="199:27"><name pos:start="199:20" pos:end="199:20">s</name><operator pos:start="199:21" pos:end="199:22">-&gt;</operator><name pos:start="199:23" pos:end="199:27">avctx</name></name></expr></argument>, <argument pos:start="199:30" pos:end="199:41"><expr pos:start="199:30" pos:end="199:41"><name pos:start="199:30" pos:end="199:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="199:44" pos:end="199:77"><expr pos:start="199:44" pos:end="199:77"><literal type="string" pos:start="199:44" pos:end="199:77">"Inter slices in an IRAP frame.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="201:13" pos:end="201:39">return <expr pos:start="201:20" pos:end="201:38"><name pos:start="201:20" pos:end="201:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <comment type="line" pos:start="207:9" pos:end="207:69">// when flag is not present, picture is inferred to be output</comment>

        <expr_stmt pos:start="209:9" pos:end="209:32"><expr pos:start="209:9" pos:end="209:31"><name pos:start="209:9" pos:end="209:27"><name pos:start="209:9" pos:end="209:10">sh</name><operator pos:start="209:11" pos:end="209:12">-&gt;</operator><name pos:start="209:13" pos:end="209:27">pic_output_flag</name></name> <operator pos:start="209:29" pos:end="209:29">=</operator> <literal type="number" pos:start="209:31" pos:end="209:31">1</literal></expr>;</expr_stmt>

        <if_stmt pos:start="211:9" pos:end="213:48"><if pos:start="211:9" pos:end="213:48">if <condition pos:start="211:12" pos:end="211:48">(<expr pos:start="211:13" pos:end="211:47"><name pos:start="211:13" pos:end="211:47"><name pos:start="211:13" pos:end="211:13">s</name><operator pos:start="211:14" pos:end="211:15">-&gt;</operator><name pos:start="211:16" pos:end="211:17">ps</name><operator pos:start="211:18" pos:end="211:18">.</operator><name pos:start="211:19" pos:end="211:21">pps</name><operator pos:start="211:22" pos:end="211:23">-&gt;</operator><name pos:start="211:24" pos:end="211:47">output_flag_present_flag</name></name></expr>)</condition><block type="pseudo" pos:start="213:13" pos:end="213:48"><block_content pos:start="213:13" pos:end="213:48">

            <expr_stmt pos:start="213:13" pos:end="213:48"><expr pos:start="213:13" pos:end="213:47"><name pos:start="213:13" pos:end="213:31"><name pos:start="213:13" pos:end="213:14">sh</name><operator pos:start="213:15" pos:end="213:16">-&gt;</operator><name pos:start="213:17" pos:end="213:31">pic_output_flag</name></name> <operator pos:start="213:33" pos:end="213:33">=</operator> <call pos:start="213:35" pos:end="213:47"><name pos:start="213:35" pos:end="213:43">get_bits1</name><argument_list pos:start="213:44" pos:end="213:47">(<argument pos:start="213:45" pos:end="213:46"><expr pos:start="213:45" pos:end="213:46"><name pos:start="213:45" pos:end="213:46">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="217:9" pos:end="219:50"><if pos:start="217:9" pos:end="219:50">if <condition pos:start="217:12" pos:end="217:50">(<expr pos:start="217:13" pos:end="217:49"><name pos:start="217:13" pos:end="217:49"><name pos:start="217:13" pos:end="217:13">s</name><operator pos:start="217:14" pos:end="217:15">-&gt;</operator><name pos:start="217:16" pos:end="217:17">ps</name><operator pos:start="217:18" pos:end="217:18">.</operator><name pos:start="217:19" pos:end="217:21">sps</name><operator pos:start="217:22" pos:end="217:23">-&gt;</operator><name pos:start="217:24" pos:end="217:49">separate_colour_plane_flag</name></name></expr>)</condition><block type="pseudo" pos:start="219:13" pos:end="219:50"><block_content pos:start="219:13" pos:end="219:50">

            <expr_stmt pos:start="219:13" pos:end="219:50"><expr pos:start="219:13" pos:end="219:49"><name pos:start="219:13" pos:end="219:31"><name pos:start="219:13" pos:end="219:14">sh</name><operator pos:start="219:15" pos:end="219:16">-&gt;</operator><name pos:start="219:17" pos:end="219:31">colour_plane_id</name></name> <operator pos:start="219:33" pos:end="219:33">=</operator> <call pos:start="219:35" pos:end="219:49"><name pos:start="219:35" pos:end="219:42">get_bits</name><argument_list pos:start="219:43" pos:end="219:49">(<argument pos:start="219:44" pos:end="219:45"><expr pos:start="219:44" pos:end="219:45"><name pos:start="219:44" pos:end="219:45">gb</name></expr></argument>, <argument pos:start="219:48" pos:end="219:48"><expr pos:start="219:48" pos:end="219:48"><literal type="number" pos:start="219:48" pos:end="219:48">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="223:9" pos:end="327:9"><if pos:start="223:9" pos:end="321:9">if <condition pos:start="223:12" pos:end="223:23">(<expr pos:start="223:13" pos:end="223:22"><operator pos:start="223:13" pos:end="223:13">!</operator><call pos:start="223:14" pos:end="223:22"><name pos:start="223:14" pos:end="223:19">IS_IDR</name><argument_list pos:start="223:20" pos:end="223:22">(<argument pos:start="223:21" pos:end="223:21"><expr pos:start="223:21" pos:end="223:21"><name pos:start="223:21" pos:end="223:21">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="223:25" pos:end="321:9">{<block_content pos:start="225:13" pos:end="319:56">

            <decl_stmt pos:start="225:13" pos:end="225:25"><decl pos:start="225:13" pos:end="225:19"><type pos:start="225:13" pos:end="225:15"><name pos:start="225:13" pos:end="225:15">int</name></type> <name pos:start="225:17" pos:end="225:19">poc</name></decl>, <decl pos:start="225:22" pos:end="225:24"><type ref="prev" pos:start="225:13" pos:end="225:15"/><name pos:start="225:22" pos:end="225:24">pos</name></decl>;</decl_stmt>



            <expr_stmt pos:start="229:13" pos:end="229:78"><expr pos:start="229:13" pos:end="229:77"><name pos:start="229:13" pos:end="229:33"><name pos:start="229:13" pos:end="229:14">sh</name><operator pos:start="229:15" pos:end="229:16">-&gt;</operator><name pos:start="229:17" pos:end="229:33">pic_order_cnt_lsb</name></name> <operator pos:start="229:35" pos:end="229:35">=</operator> <call pos:start="229:37" pos:end="229:77"><name pos:start="229:37" pos:end="229:44">get_bits</name><argument_list pos:start="229:45" pos:end="229:77">(<argument pos:start="229:46" pos:end="229:47"><expr pos:start="229:46" pos:end="229:47"><name pos:start="229:46" pos:end="229:47">gb</name></expr></argument>, <argument pos:start="229:50" pos:end="229:76"><expr pos:start="229:50" pos:end="229:76"><name pos:start="229:50" pos:end="229:76"><name pos:start="229:50" pos:end="229:50">s</name><operator pos:start="229:51" pos:end="229:52">-&gt;</operator><name pos:start="229:53" pos:end="229:54">ps</name><operator pos:start="229:55" pos:end="229:55">.</operator><name pos:start="229:56" pos:end="229:58">sps</name><operator pos:start="229:59" pos:end="229:60">-&gt;</operator><name pos:start="229:61" pos:end="229:76">log2_max_poc_lsb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="231:13" pos:end="231:102"><expr pos:start="231:13" pos:end="231:101"><name pos:start="231:13" pos:end="231:15">poc</name> <operator pos:start="231:17" pos:end="231:17">=</operator> <call pos:start="231:19" pos:end="231:101"><name pos:start="231:19" pos:end="231:37">ff_hevc_compute_poc</name><argument_list pos:start="231:38" pos:end="231:101">(<argument pos:start="231:39" pos:end="231:47"><expr pos:start="231:39" pos:end="231:47"><name pos:start="231:39" pos:end="231:47"><name pos:start="231:39" pos:end="231:39">s</name><operator pos:start="231:40" pos:end="231:41">-&gt;</operator><name pos:start="231:42" pos:end="231:43">ps</name><operator pos:start="231:44" pos:end="231:44">.</operator><name pos:start="231:45" pos:end="231:47">sps</name></name></expr></argument>, <argument pos:start="231:50" pos:end="231:59"><expr pos:start="231:50" pos:end="231:59"><name pos:start="231:50" pos:end="231:59"><name pos:start="231:50" pos:end="231:50">s</name><operator pos:start="231:51" pos:end="231:52">-&gt;</operator><name pos:start="231:53" pos:end="231:59">pocTid0</name></name></expr></argument>, <argument pos:start="231:62" pos:end="231:82"><expr pos:start="231:62" pos:end="231:82"><name pos:start="231:62" pos:end="231:82"><name pos:start="231:62" pos:end="231:63">sh</name><operator pos:start="231:64" pos:end="231:65">-&gt;</operator><name pos:start="231:66" pos:end="231:82">pic_order_cnt_lsb</name></name></expr></argument>, <argument pos:start="231:85" pos:end="231:100"><expr pos:start="231:85" pos:end="231:100"><name pos:start="231:85" pos:end="231:100"><name pos:start="231:85" pos:end="231:85">s</name><operator pos:start="231:86" pos:end="231:87">-&gt;</operator><name pos:start="231:88" pos:end="231:100">nal_unit_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="233:13" pos:end="245:13"><if pos:start="233:13" pos:end="245:13">if <condition pos:start="233:16" pos:end="233:62">(<expr pos:start="233:17" pos:end="233:61"><operator pos:start="233:17" pos:end="233:17">!</operator><name pos:start="233:18" pos:end="233:44"><name pos:start="233:18" pos:end="233:19">sh</name><operator pos:start="233:20" pos:end="233:21">-&gt;</operator><name pos:start="233:22" pos:end="233:44">first_slice_in_pic_flag</name></name> <operator pos:start="233:46" pos:end="233:47">&amp;&amp;</operator> <name pos:start="233:49" pos:end="233:51">poc</name> <operator pos:start="233:53" pos:end="233:54">!=</operator> <name pos:start="233:56" pos:end="233:61"><name pos:start="233:56" pos:end="233:56">s</name><operator pos:start="233:57" pos:end="233:58">-&gt;</operator><name pos:start="233:59" pos:end="233:61">poc</name></name></expr>)</condition> <block pos:start="233:64" pos:end="245:13">{<block_content pos:start="235:17" pos:end="243:29">

                <expr_stmt pos:start="235:17" pos:end="237:86"><expr pos:start="235:17" pos:end="237:85"><call pos:start="235:17" pos:end="237:85"><name pos:start="235:17" pos:end="235:22">av_log</name><argument_list pos:start="235:23" pos:end="237:85">(<argument pos:start="235:24" pos:end="235:31"><expr pos:start="235:24" pos:end="235:31"><name pos:start="235:24" pos:end="235:31"><name pos:start="235:24" pos:end="235:24">s</name><operator pos:start="235:25" pos:end="235:26">-&gt;</operator><name pos:start="235:27" pos:end="235:31">avctx</name></name></expr></argument>, <argument pos:start="235:34" pos:end="235:47"><expr pos:start="235:34" pos:end="235:47"><name pos:start="235:34" pos:end="235:47">AV_LOG_WARNING</name></expr></argument>,

                       <argument pos:start="237:24" pos:end="237:71"><expr pos:start="237:24" pos:end="237:71"><literal type="string" pos:start="237:24" pos:end="237:71">"Ignoring POC change between slices: %d -&gt; %d\n"</literal></expr></argument>, <argument pos:start="237:74" pos:end="237:79"><expr pos:start="237:74" pos:end="237:79"><name pos:start="237:74" pos:end="237:79"><name pos:start="237:74" pos:end="237:74">s</name><operator pos:start="237:75" pos:end="237:76">-&gt;</operator><name pos:start="237:77" pos:end="237:79">poc</name></name></expr></argument>, <argument pos:start="237:82" pos:end="237:84"><expr pos:start="237:82" pos:end="237:84"><name pos:start="237:82" pos:end="237:84">poc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="239:17" pos:end="241:47"><if pos:start="239:17" pos:end="241:47">if <condition pos:start="239:20" pos:end="239:62">(<expr pos:start="239:21" pos:end="239:61"><name pos:start="239:21" pos:end="239:45"><name pos:start="239:21" pos:end="239:21">s</name><operator pos:start="239:22" pos:end="239:23">-&gt;</operator><name pos:start="239:24" pos:end="239:28">avctx</name><operator pos:start="239:29" pos:end="239:30">-&gt;</operator><name pos:start="239:31" pos:end="239:45">err_recognition</name></name> <operator pos:start="239:47" pos:end="239:47">&amp;</operator> <name pos:start="239:49" pos:end="239:61">AV_EF_EXPLODE</name></expr>)</condition><block type="pseudo" pos:start="241:21" pos:end="241:47"><block_content pos:start="241:21" pos:end="241:47">

                    <return pos:start="241:21" pos:end="241:47">return <expr pos:start="241:28" pos:end="241:46"><name pos:start="241:28" pos:end="241:46">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

                <expr_stmt pos:start="243:17" pos:end="243:29"><expr pos:start="243:17" pos:end="243:28"><name pos:start="243:17" pos:end="243:19">poc</name> <operator pos:start="243:21" pos:end="243:21">=</operator> <name pos:start="243:23" pos:end="243:28"><name pos:start="243:23" pos:end="243:23">s</name><operator pos:start="243:24" pos:end="243:25">-&gt;</operator><name pos:start="243:26" pos:end="243:28">poc</name></name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="247:13" pos:end="247:25"><expr pos:start="247:13" pos:end="247:24"><name pos:start="247:13" pos:end="247:18"><name pos:start="247:13" pos:end="247:13">s</name><operator pos:start="247:14" pos:end="247:15">-&gt;</operator><name pos:start="247:16" pos:end="247:18">poc</name></name> <operator pos:start="247:20" pos:end="247:20">=</operator> <name pos:start="247:22" pos:end="247:24">poc</name></expr>;</expr_stmt>



            <expr_stmt pos:start="251:13" pos:end="251:64"><expr pos:start="251:13" pos:end="251:63"><name pos:start="251:13" pos:end="251:47"><name pos:start="251:13" pos:end="251:14">sh</name><operator pos:start="251:15" pos:end="251:16">-&gt;</operator><name pos:start="251:17" pos:end="251:47">short_term_ref_pic_set_sps_flag</name></name> <operator pos:start="251:49" pos:end="251:49">=</operator> <call pos:start="251:51" pos:end="251:63"><name pos:start="251:51" pos:end="251:59">get_bits1</name><argument_list pos:start="251:60" pos:end="251:63">(<argument pos:start="251:61" pos:end="251:62"><expr pos:start="251:61" pos:end="251:62"><name pos:start="251:61" pos:end="251:62">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="253:13" pos:end="253:36"><expr pos:start="253:13" pos:end="253:35"><name pos:start="253:13" pos:end="253:15">pos</name> <operator pos:start="253:17" pos:end="253:17">=</operator> <call pos:start="253:19" pos:end="253:35"><name pos:start="253:19" pos:end="253:31">get_bits_left</name><argument_list pos:start="253:32" pos:end="253:35">(<argument pos:start="253:33" pos:end="253:34"><expr pos:start="253:33" pos:end="253:34"><name pos:start="253:33" pos:end="253:34">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="255:13" pos:end="289:13"><if pos:start="255:13" pos:end="267:13">if <condition pos:start="255:16" pos:end="255:53">(<expr pos:start="255:17" pos:end="255:52"><operator pos:start="255:17" pos:end="255:17">!</operator><name pos:start="255:18" pos:end="255:52"><name pos:start="255:18" pos:end="255:19">sh</name><operator pos:start="255:20" pos:end="255:21">-&gt;</operator><name pos:start="255:22" pos:end="255:52">short_term_ref_pic_set_sps_flag</name></name></expr>)</condition> <block pos:start="255:55" pos:end="267:13">{<block_content pos:start="257:17" pos:end="265:52">

                <expr_stmt pos:start="257:17" pos:end="257:96"><expr pos:start="257:17" pos:end="257:95"><name pos:start="257:17" pos:end="257:19">ret</name> <operator pos:start="257:21" pos:end="257:21">=</operator> <call pos:start="257:23" pos:end="257:95"><name pos:start="257:23" pos:end="257:51">ff_hevc_decode_short_term_rps</name><argument_list pos:start="257:52" pos:end="257:95">(<argument pos:start="257:53" pos:end="257:54"><expr pos:start="257:53" pos:end="257:54"><name pos:start="257:53" pos:end="257:54">gb</name></expr></argument>, <argument pos:start="257:57" pos:end="257:64"><expr pos:start="257:57" pos:end="257:64"><name pos:start="257:57" pos:end="257:64"><name pos:start="257:57" pos:end="257:57">s</name><operator pos:start="257:58" pos:end="257:59">-&gt;</operator><name pos:start="257:60" pos:end="257:64">avctx</name></name></expr></argument>, <argument pos:start="257:67" pos:end="257:80"><expr pos:start="257:67" pos:end="257:80"><operator pos:start="257:67" pos:end="257:67">&amp;</operator><name pos:start="257:68" pos:end="257:80"><name pos:start="257:68" pos:end="257:69">sh</name><operator pos:start="257:70" pos:end="257:71">-&gt;</operator><name pos:start="257:72" pos:end="257:80">slice_rps</name></name></expr></argument>, <argument pos:start="257:83" pos:end="257:91"><expr pos:start="257:83" pos:end="257:91"><name pos:start="257:83" pos:end="257:91"><name pos:start="257:83" pos:end="257:83">s</name><operator pos:start="257:84" pos:end="257:85">-&gt;</operator><name pos:start="257:86" pos:end="257:87">ps</name><operator pos:start="257:88" pos:end="257:88">.</operator><name pos:start="257:89" pos:end="257:91">sps</name></name></expr></argument>, <argument pos:start="257:94" pos:end="257:94"><expr pos:start="257:94" pos:end="257:94"><literal type="number" pos:start="257:94" pos:end="257:94">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="259:17" pos:end="261:31"><if pos:start="259:17" pos:end="261:31">if <condition pos:start="259:20" pos:end="259:28">(<expr pos:start="259:21" pos:end="259:27"><name pos:start="259:21" pos:end="259:23">ret</name> <operator pos:start="259:25" pos:end="259:25">&lt;</operator> <literal type="number" pos:start="259:27" pos:end="259:27">0</literal></expr>)</condition><block type="pseudo" pos:start="261:21" pos:end="261:31"><block_content pos:start="261:21" pos:end="261:31">

                    <return pos:start="261:21" pos:end="261:31">return <expr pos:start="261:28" pos:end="261:30"><name pos:start="261:28" pos:end="261:30">ret</name></expr>;</return></block_content></block></if></if_stmt>



                <expr_stmt pos:start="265:17" pos:end="265:52"><expr pos:start="265:17" pos:end="265:51"><name pos:start="265:17" pos:end="265:34"><name pos:start="265:17" pos:end="265:18">sh</name><operator pos:start="265:19" pos:end="265:20">-&gt;</operator><name pos:start="265:21" pos:end="265:34">short_term_rps</name></name> <operator pos:start="265:36" pos:end="265:36">=</operator> <operator pos:start="265:38" pos:end="265:38">&amp;</operator><name pos:start="265:39" pos:end="265:51"><name pos:start="265:39" pos:end="265:40">sh</name><operator pos:start="265:41" pos:end="265:42">-&gt;</operator><name pos:start="265:43" pos:end="265:51">slice_rps</name></name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="267:15" pos:end="289:13">else <block pos:start="267:20" pos:end="289:13">{<block_content pos:start="269:17" pos:end="287:65">

                <decl_stmt pos:start="269:17" pos:end="269:37"><decl pos:start="269:17" pos:end="269:27"><type pos:start="269:17" pos:end="269:19"><name pos:start="269:17" pos:end="269:19">int</name></type> <name pos:start="269:21" pos:end="269:27">numbits</name></decl>, <decl pos:start="269:30" pos:end="269:36"><type ref="prev" pos:start="269:17" pos:end="269:19"/><name pos:start="269:30" pos:end="269:36">rps_idx</name></decl>;</decl_stmt>



                <if_stmt pos:start="273:17" pos:end="279:17"><if pos:start="273:17" pos:end="279:17">if <condition pos:start="273:20" pos:end="273:42">(<expr pos:start="273:21" pos:end="273:41"><operator pos:start="273:21" pos:end="273:21">!</operator><name pos:start="273:22" pos:end="273:41"><name pos:start="273:22" pos:end="273:22">s</name><operator pos:start="273:23" pos:end="273:24">-&gt;</operator><name pos:start="273:25" pos:end="273:26">ps</name><operator pos:start="273:27" pos:end="273:27">.</operator><name pos:start="273:28" pos:end="273:30">sps</name><operator pos:start="273:31" pos:end="273:32">-&gt;</operator><name pos:start="273:33" pos:end="273:41">nb_st_rps</name></name></expr>)</condition> <block pos:start="273:44" pos:end="279:17">{<block_content pos:start="275:21" pos:end="277:47">

                    <expr_stmt pos:start="275:21" pos:end="275:81"><expr pos:start="275:21" pos:end="275:80"><call pos:start="275:21" pos:end="275:80"><name pos:start="275:21" pos:end="275:26">av_log</name><argument_list pos:start="275:27" pos:end="275:80">(<argument pos:start="275:28" pos:end="275:35"><expr pos:start="275:28" pos:end="275:35"><name pos:start="275:28" pos:end="275:35"><name pos:start="275:28" pos:end="275:28">s</name><operator pos:start="275:29" pos:end="275:30">-&gt;</operator><name pos:start="275:31" pos:end="275:35">avctx</name></name></expr></argument>, <argument pos:start="275:38" pos:end="275:49"><expr pos:start="275:38" pos:end="275:49"><name pos:start="275:38" pos:end="275:49">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="275:52" pos:end="275:79"><expr pos:start="275:52" pos:end="275:79"><literal type="string" pos:start="275:52" pos:end="275:79">"No ref lists in the SPS.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="277:21" pos:end="277:47">return <expr pos:start="277:28" pos:end="277:46"><name pos:start="277:28" pos:end="277:46">AVERROR_INVALIDDATA</name></expr>;</return>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="283:17" pos:end="283:61"><expr pos:start="283:17" pos:end="283:60"><name pos:start="283:17" pos:end="283:23">numbits</name> <operator pos:start="283:25" pos:end="283:25">=</operator> <call pos:start="283:27" pos:end="283:60"><name pos:start="283:27" pos:end="283:38">av_ceil_log2</name><argument_list pos:start="283:39" pos:end="283:60">(<argument pos:start="283:40" pos:end="283:59"><expr pos:start="283:40" pos:end="283:59"><name pos:start="283:40" pos:end="283:59"><name pos:start="283:40" pos:end="283:40">s</name><operator pos:start="283:41" pos:end="283:42">-&gt;</operator><name pos:start="283:43" pos:end="283:44">ps</name><operator pos:start="283:45" pos:end="283:45">.</operator><name pos:start="283:46" pos:end="283:48">sps</name><operator pos:start="283:49" pos:end="283:50">-&gt;</operator><name pos:start="283:51" pos:end="283:59">nb_st_rps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="285:17" pos:end="285:66"><expr pos:start="285:17" pos:end="285:65"><name pos:start="285:17" pos:end="285:23">rps_idx</name> <operator pos:start="285:25" pos:end="285:25">=</operator> <ternary pos:start="285:27" pos:end="285:65"><condition pos:start="285:27" pos:end="285:39"><expr pos:start="285:27" pos:end="285:37"><name pos:start="285:27" pos:end="285:33">numbits</name> <operator pos:start="285:35" pos:end="285:35">&gt;</operator> <literal type="number" pos:start="285:37" pos:end="285:37">0</literal></expr> ?</condition><then pos:start="285:41" pos:end="285:61"> <expr pos:start="285:41" pos:end="285:61"><call pos:start="285:41" pos:end="285:61"><name pos:start="285:41" pos:end="285:48">get_bits</name><argument_list pos:start="285:49" pos:end="285:61">(<argument pos:start="285:50" pos:end="285:51"><expr pos:start="285:50" pos:end="285:51"><name pos:start="285:50" pos:end="285:51">gb</name></expr></argument>, <argument pos:start="285:54" pos:end="285:60"><expr pos:start="285:54" pos:end="285:60"><name pos:start="285:54" pos:end="285:60">numbits</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="285:63" pos:end="285:65">: <expr pos:start="285:65" pos:end="285:65"><literal type="number" pos:start="285:65" pos:end="285:65">0</literal></expr></else></ternary></expr>;</expr_stmt>

                <expr_stmt pos:start="287:17" pos:end="287:65"><expr pos:start="287:17" pos:end="287:64"><name pos:start="287:17" pos:end="287:34"><name pos:start="287:17" pos:end="287:18">sh</name><operator pos:start="287:19" pos:end="287:20">-&gt;</operator><name pos:start="287:21" pos:end="287:34">short_term_rps</name></name> <operator pos:start="287:36" pos:end="287:36">=</operator> <operator pos:start="287:38" pos:end="287:38">&amp;</operator><name pos:start="287:39" pos:end="287:64"><name pos:start="287:39" pos:end="287:39">s</name><operator pos:start="287:40" pos:end="287:41">-&gt;</operator><name pos:start="287:42" pos:end="287:43">ps</name><operator pos:start="287:44" pos:end="287:44">.</operator><name pos:start="287:45" pos:end="287:47">sps</name><operator pos:start="287:48" pos:end="287:49">-&gt;</operator><name pos:start="287:50" pos:end="287:55">st_rps</name><index pos:start="287:56" pos:end="287:64">[<expr pos:start="287:57" pos:end="287:63"><name pos:start="287:57" pos:end="287:63">rps_idx</name></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="291:13" pos:end="291:70"><expr pos:start="291:13" pos:end="291:69"><name pos:start="291:13" pos:end="291:43"><name pos:start="291:13" pos:end="291:14">sh</name><operator pos:start="291:15" pos:end="291:16">-&gt;</operator><name pos:start="291:17" pos:end="291:43">short_term_ref_pic_set_size</name></name> <operator pos:start="291:45" pos:end="291:45">=</operator> <name pos:start="291:47" pos:end="291:49">pos</name> <operator pos:start="291:51" pos:end="291:51">-</operator> <call pos:start="291:53" pos:end="291:69"><name pos:start="291:53" pos:end="291:65">get_bits_left</name><argument_list pos:start="291:66" pos:end="291:69">(<argument pos:start="291:67" pos:end="291:68"><expr pos:start="291:67" pos:end="291:68"><name pos:start="291:67" pos:end="291:68">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="295:13" pos:end="295:36"><expr pos:start="295:13" pos:end="295:35"><name pos:start="295:13" pos:end="295:15">pos</name> <operator pos:start="295:17" pos:end="295:17">=</operator> <call pos:start="295:19" pos:end="295:35"><name pos:start="295:19" pos:end="295:31">get_bits_left</name><argument_list pos:start="295:32" pos:end="295:35">(<argument pos:start="295:33" pos:end="295:34"><expr pos:start="295:33" pos:end="295:34"><name pos:start="295:33" pos:end="295:34">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="297:13" pos:end="297:59"><expr pos:start="297:13" pos:end="297:58"><name pos:start="297:13" pos:end="297:15">ret</name> <operator pos:start="297:17" pos:end="297:17">=</operator> <call pos:start="297:19" pos:end="297:58"><name pos:start="297:19" pos:end="297:31">decode_lt_rps</name><argument_list pos:start="297:32" pos:end="297:58">(<argument pos:start="297:33" pos:end="297:33"><expr pos:start="297:33" pos:end="297:33"><name pos:start="297:33" pos:end="297:33">s</name></expr></argument>, <argument pos:start="297:36" pos:end="297:53"><expr pos:start="297:36" pos:end="297:53"><operator pos:start="297:36" pos:end="297:36">&amp;</operator><name pos:start="297:37" pos:end="297:53"><name pos:start="297:37" pos:end="297:38">sh</name><operator pos:start="297:39" pos:end="297:40">-&gt;</operator><name pos:start="297:41" pos:end="297:53">long_term_rps</name></name></expr></argument>, <argument pos:start="297:56" pos:end="297:57"><expr pos:start="297:56" pos:end="297:57"><name pos:start="297:56" pos:end="297:57">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="299:13" pos:end="307:13"><if pos:start="299:13" pos:end="307:13">if <condition pos:start="299:16" pos:end="299:24">(<expr pos:start="299:17" pos:end="299:23"><name pos:start="299:17" pos:end="299:19">ret</name> <operator pos:start="299:21" pos:end="299:21">&lt;</operator> <literal type="number" pos:start="299:23" pos:end="299:23">0</literal></expr>)</condition> <block pos:start="299:26" pos:end="307:13">{<block_content pos:start="301:17" pos:end="305:47">

                <expr_stmt pos:start="301:17" pos:end="301:77"><expr pos:start="301:17" pos:end="301:76"><call pos:start="301:17" pos:end="301:76"><name pos:start="301:17" pos:end="301:22">av_log</name><argument_list pos:start="301:23" pos:end="301:76">(<argument pos:start="301:24" pos:end="301:31"><expr pos:start="301:24" pos:end="301:31"><name pos:start="301:24" pos:end="301:31"><name pos:start="301:24" pos:end="301:24">s</name><operator pos:start="301:25" pos:end="301:26">-&gt;</operator><name pos:start="301:27" pos:end="301:31">avctx</name></name></expr></argument>, <argument pos:start="301:34" pos:end="301:47"><expr pos:start="301:34" pos:end="301:47"><name pos:start="301:34" pos:end="301:47">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="301:50" pos:end="301:75"><expr pos:start="301:50" pos:end="301:75"><literal type="string" pos:start="301:50" pos:end="301:75">"Invalid long term RPS.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="303:17" pos:end="305:47"><if pos:start="303:17" pos:end="305:47">if <condition pos:start="303:20" pos:end="303:62">(<expr pos:start="303:21" pos:end="303:61"><name pos:start="303:21" pos:end="303:45"><name pos:start="303:21" pos:end="303:21">s</name><operator pos:start="303:22" pos:end="303:23">-&gt;</operator><name pos:start="303:24" pos:end="303:28">avctx</name><operator pos:start="303:29" pos:end="303:30">-&gt;</operator><name pos:start="303:31" pos:end="303:45">err_recognition</name></name> <operator pos:start="303:47" pos:end="303:47">&amp;</operator> <name pos:start="303:49" pos:end="303:61">AV_EF_EXPLODE</name></expr>)</condition><block type="pseudo" pos:start="305:21" pos:end="305:47"><block_content pos:start="305:21" pos:end="305:47">

                    <return pos:start="305:21" pos:end="305:47">return <expr pos:start="305:28" pos:end="305:46"><name pos:start="305:28" pos:end="305:46">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="309:13" pos:end="309:69"><expr pos:start="309:13" pos:end="309:68"><name pos:start="309:13" pos:end="309:42"><name pos:start="309:13" pos:end="309:14">sh</name><operator pos:start="309:15" pos:end="309:16">-&gt;</operator><name pos:start="309:17" pos:end="309:42">long_term_ref_pic_set_size</name></name> <operator pos:start="309:44" pos:end="309:44">=</operator> <name pos:start="309:46" pos:end="309:48">pos</name> <operator pos:start="309:50" pos:end="309:50">-</operator> <call pos:start="309:52" pos:end="309:68"><name pos:start="309:52" pos:end="309:64">get_bits_left</name><argument_list pos:start="309:65" pos:end="309:68">(<argument pos:start="309:66" pos:end="309:67"><expr pos:start="309:66" pos:end="309:67"><name pos:start="309:66" pos:end="309:67">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="313:13" pos:end="319:56"><if pos:start="313:13" pos:end="315:68">if <condition pos:start="313:16" pos:end="313:57">(<expr pos:start="313:17" pos:end="313:56"><name pos:start="313:17" pos:end="313:56"><name pos:start="313:17" pos:end="313:17">s</name><operator pos:start="313:18" pos:end="313:19">-&gt;</operator><name pos:start="313:20" pos:end="313:21">ps</name><operator pos:start="313:22" pos:end="313:22">.</operator><name pos:start="313:23" pos:end="313:25">sps</name><operator pos:start="313:26" pos:end="313:27">-&gt;</operator><name pos:start="313:28" pos:end="313:56">sps_temporal_mvp_enabled_flag</name></name></expr>)</condition><block type="pseudo" pos:start="315:17" pos:end="315:68"><block_content pos:start="315:17" pos:end="315:68">

                <expr_stmt pos:start="315:17" pos:end="315:68"><expr pos:start="315:17" pos:end="315:67"><name pos:start="315:17" pos:end="315:51"><name pos:start="315:17" pos:end="315:18">sh</name><operator pos:start="315:19" pos:end="315:20">-&gt;</operator><name pos:start="315:21" pos:end="315:51">slice_temporal_mvp_enabled_flag</name></name> <operator pos:start="315:53" pos:end="315:53">=</operator> <call pos:start="315:55" pos:end="315:67"><name pos:start="315:55" pos:end="315:63">get_bits1</name><argument_list pos:start="315:64" pos:end="315:67">(<argument pos:start="315:65" pos:end="315:66"><expr pos:start="315:65" pos:end="315:66"><name pos:start="315:65" pos:end="315:66">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="317:13" pos:end="319:56">else<block type="pseudo" pos:start="319:17" pos:end="319:56"><block_content pos:start="319:17" pos:end="319:56">

                <expr_stmt pos:start="319:17" pos:end="319:56"><expr pos:start="319:17" pos:end="319:55"><name pos:start="319:17" pos:end="319:51"><name pos:start="319:17" pos:end="319:18">sh</name><operator pos:start="319:19" pos:end="319:20">-&gt;</operator><name pos:start="319:21" pos:end="319:51">slice_temporal_mvp_enabled_flag</name></name> <operator pos:start="319:53" pos:end="319:53">=</operator> <literal type="number" pos:start="319:55" pos:end="319:55">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="321:11" pos:end="327:9">else <block pos:start="321:16" pos:end="327:9">{<block_content pos:start="323:13" pos:end="325:37">

            <expr_stmt pos:start="323:13" pos:end="323:40"><expr pos:start="323:13" pos:end="323:39"><name pos:start="323:13" pos:end="323:32"><name pos:start="323:13" pos:end="323:13">s</name><operator pos:start="323:14" pos:end="323:15">-&gt;</operator><name pos:start="323:16" pos:end="323:17">sh</name><operator pos:start="323:18" pos:end="323:18">.</operator><name pos:start="323:19" pos:end="323:32">short_term_rps</name></name> <operator pos:start="323:34" pos:end="323:34">=</operator> <name pos:start="323:36" pos:end="323:39">NULL</name></expr>;</expr_stmt>

            <expr_stmt pos:start="325:13" pos:end="325:37"><expr pos:start="325:13" pos:end="325:36"><name pos:start="325:13" pos:end="325:18"><name pos:start="325:13" pos:end="325:13">s</name><operator pos:start="325:14" pos:end="325:15">-&gt;</operator><name pos:start="325:16" pos:end="325:18">poc</name></name>               <operator pos:start="325:34" pos:end="325:34">=</operator> <literal type="number" pos:start="325:36" pos:end="325:36">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <comment type="block" pos:start="331:9" pos:end="331:19">/* 8.3.1 */</comment>

        <if_stmt pos:start="333:9" pos:end="349:32"><if pos:start="333:9" pos:end="349:32">if <condition pos:start="333:12" pos:end="347:48">(<expr pos:start="333:13" pos:end="347:47"><name pos:start="333:13" pos:end="333:39"><name pos:start="333:13" pos:end="333:14">sh</name><operator pos:start="333:15" pos:end="333:16">-&gt;</operator><name pos:start="333:17" pos:end="333:39">first_slice_in_pic_flag</name></name> <operator pos:start="333:41" pos:end="333:42">&amp;&amp;</operator> <name pos:start="333:44" pos:end="333:57"><name pos:start="333:44" pos:end="333:44">s</name><operator pos:start="333:45" pos:end="333:46">-&gt;</operator><name pos:start="333:47" pos:end="333:57">temporal_id</name></name> <operator pos:start="333:59" pos:end="333:60">==</operator> <literal type="number" pos:start="333:62" pos:end="333:62">0</literal> <operator pos:start="333:64" pos:end="333:65">&amp;&amp;</operator>

            <name pos:start="335:13" pos:end="335:28"><name pos:start="335:13" pos:end="335:13">s</name><operator pos:start="335:14" pos:end="335:15">-&gt;</operator><name pos:start="335:16" pos:end="335:28">nal_unit_type</name></name> <operator pos:start="335:30" pos:end="335:31">!=</operator> <name pos:start="335:33" pos:end="335:48">HEVC_NAL_TRAIL_N</name> <operator pos:start="335:50" pos:end="335:51">&amp;&amp;</operator>

            <name pos:start="337:13" pos:end="337:28"><name pos:start="337:13" pos:end="337:13">s</name><operator pos:start="337:14" pos:end="337:15">-&gt;</operator><name pos:start="337:16" pos:end="337:28">nal_unit_type</name></name> <operator pos:start="337:30" pos:end="337:31">!=</operator> <name pos:start="337:33" pos:end="337:46">HEVC_NAL_TSA_N</name>   <operator pos:start="337:50" pos:end="337:51">&amp;&amp;</operator>

            <name pos:start="339:13" pos:end="339:28"><name pos:start="339:13" pos:end="339:13">s</name><operator pos:start="339:14" pos:end="339:15">-&gt;</operator><name pos:start="339:16" pos:end="339:28">nal_unit_type</name></name> <operator pos:start="339:30" pos:end="339:31">!=</operator> <name pos:start="339:33" pos:end="339:47">HEVC_NAL_STSA_N</name>  <operator pos:start="339:50" pos:end="339:51">&amp;&amp;</operator>

            <name pos:start="341:13" pos:end="341:28"><name pos:start="341:13" pos:end="341:13">s</name><operator pos:start="341:14" pos:end="341:15">-&gt;</operator><name pos:start="341:16" pos:end="341:28">nal_unit_type</name></name> <operator pos:start="341:30" pos:end="341:31">!=</operator> <name pos:start="341:33" pos:end="341:47">HEVC_NAL_RADL_N</name>  <operator pos:start="341:50" pos:end="341:51">&amp;&amp;</operator>

            <name pos:start="343:13" pos:end="343:28"><name pos:start="343:13" pos:end="343:13">s</name><operator pos:start="343:14" pos:end="343:15">-&gt;</operator><name pos:start="343:16" pos:end="343:28">nal_unit_type</name></name> <operator pos:start="343:30" pos:end="343:31">!=</operator> <name pos:start="343:33" pos:end="343:47">HEVC_NAL_RADL_R</name>  <operator pos:start="343:50" pos:end="343:51">&amp;&amp;</operator>

            <name pos:start="345:13" pos:end="345:28"><name pos:start="345:13" pos:end="345:13">s</name><operator pos:start="345:14" pos:end="345:15">-&gt;</operator><name pos:start="345:16" pos:end="345:28">nal_unit_type</name></name> <operator pos:start="345:30" pos:end="345:31">!=</operator> <name pos:start="345:33" pos:end="345:47">HEVC_NAL_RASL_N</name>  <operator pos:start="345:50" pos:end="345:51">&amp;&amp;</operator>

            <name pos:start="347:13" pos:end="347:28"><name pos:start="347:13" pos:end="347:13">s</name><operator pos:start="347:14" pos:end="347:15">-&gt;</operator><name pos:start="347:16" pos:end="347:28">nal_unit_type</name></name> <operator pos:start="347:30" pos:end="347:31">!=</operator> <name pos:start="347:33" pos:end="347:47">HEVC_NAL_RASL_R</name></expr>)</condition><block type="pseudo" pos:start="349:13" pos:end="349:32"><block_content pos:start="349:13" pos:end="349:32">

            <expr_stmt pos:start="349:13" pos:end="349:32"><expr pos:start="349:13" pos:end="349:31"><name pos:start="349:13" pos:end="349:22"><name pos:start="349:13" pos:end="349:13">s</name><operator pos:start="349:14" pos:end="349:15">-&gt;</operator><name pos:start="349:16" pos:end="349:22">pocTid0</name></name> <operator pos:start="349:24" pos:end="349:24">=</operator> <name pos:start="349:26" pos:end="349:31"><name pos:start="349:26" pos:end="349:26">s</name><operator pos:start="349:27" pos:end="349:28">-&gt;</operator><name pos:start="349:29" pos:end="349:31">poc</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="353:9" pos:end="373:9"><if pos:start="353:9" pos:end="365:9">if <condition pos:start="353:12" pos:end="353:35">(<expr pos:start="353:13" pos:end="353:34"><name pos:start="353:13" pos:end="353:34"><name pos:start="353:13" pos:end="353:13">s</name><operator pos:start="353:14" pos:end="353:15">-&gt;</operator><name pos:start="353:16" pos:end="353:17">ps</name><operator pos:start="353:18" pos:end="353:18">.</operator><name pos:start="353:19" pos:end="353:21">sps</name><operator pos:start="353:22" pos:end="353:23">-&gt;</operator><name pos:start="353:24" pos:end="353:34">sao_enabled</name></name></expr>)</condition> <block pos:start="353:37" pos:end="365:9">{<block_content pos:start="355:13" pos:end="363:13">

            <expr_stmt pos:start="355:13" pos:end="355:69"><expr pos:start="355:13" pos:end="355:68"><name pos:start="355:13" pos:end="355:52"><name pos:start="355:13" pos:end="355:14">sh</name><operator pos:start="355:15" pos:end="355:16">-&gt;</operator><name pos:start="355:17" pos:end="355:49">slice_sample_adaptive_offset_flag</name><index pos:start="355:50" pos:end="355:52">[<expr pos:start="355:51" pos:end="355:51"><literal type="number" pos:start="355:51" pos:end="355:51">0</literal></expr>]</index></name> <operator pos:start="355:54" pos:end="355:54">=</operator> <call pos:start="355:56" pos:end="355:68"><name pos:start="355:56" pos:end="355:64">get_bits1</name><argument_list pos:start="355:65" pos:end="355:68">(<argument pos:start="355:66" pos:end="355:67"><expr pos:start="355:66" pos:end="355:67"><name pos:start="355:66" pos:end="355:67">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="357:13" pos:end="363:13"><if pos:start="357:13" pos:end="363:13">if <condition pos:start="357:16" pos:end="357:45">(<expr pos:start="357:17" pos:end="357:44"><name pos:start="357:17" pos:end="357:44"><name pos:start="357:17" pos:end="357:17">s</name><operator pos:start="357:18" pos:end="357:19">-&gt;</operator><name pos:start="357:20" pos:end="357:21">ps</name><operator pos:start="357:22" pos:end="357:22">.</operator><name pos:start="357:23" pos:end="357:25">sps</name><operator pos:start="357:26" pos:end="357:27">-&gt;</operator><name pos:start="357:28" pos:end="357:44">chroma_format_idc</name></name></expr>)</condition> <block pos:start="357:47" pos:end="363:13">{<block_content pos:start="359:17" pos:end="361:73">

                <expr_stmt pos:start="359:17" pos:end="361:73"><expr pos:start="359:17" pos:end="361:72"><name pos:start="359:17" pos:end="359:56"><name pos:start="359:17" pos:end="359:18">sh</name><operator pos:start="359:19" pos:end="359:20">-&gt;</operator><name pos:start="359:21" pos:end="359:53">slice_sample_adaptive_offset_flag</name><index pos:start="359:54" pos:end="359:56">[<expr pos:start="359:55" pos:end="359:55"><literal type="number" pos:start="359:55" pos:end="359:55">1</literal></expr>]</index></name> <operator pos:start="359:58" pos:end="359:58">=</operator>

                <name pos:start="361:17" pos:end="361:56"><name pos:start="361:17" pos:end="361:18">sh</name><operator pos:start="361:19" pos:end="361:20">-&gt;</operator><name pos:start="361:21" pos:end="361:53">slice_sample_adaptive_offset_flag</name><index pos:start="361:54" pos:end="361:56">[<expr pos:start="361:55" pos:end="361:55"><literal type="number" pos:start="361:55" pos:end="361:55">2</literal></expr>]</index></name> <operator pos:start="361:58" pos:end="361:58">=</operator> <call pos:start="361:60" pos:end="361:72"><name pos:start="361:60" pos:end="361:68">get_bits1</name><argument_list pos:start="361:69" pos:end="361:72">(<argument pos:start="361:70" pos:end="361:71"><expr pos:start="361:70" pos:end="361:71"><name pos:start="361:70" pos:end="361:71">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="365:11" pos:end="373:9">else <block pos:start="365:16" pos:end="373:9">{<block_content pos:start="367:13" pos:end="371:57">

            <expr_stmt pos:start="367:13" pos:end="367:57"><expr pos:start="367:13" pos:end="367:56"><name pos:start="367:13" pos:end="367:52"><name pos:start="367:13" pos:end="367:14">sh</name><operator pos:start="367:15" pos:end="367:16">-&gt;</operator><name pos:start="367:17" pos:end="367:49">slice_sample_adaptive_offset_flag</name><index pos:start="367:50" pos:end="367:52">[<expr pos:start="367:51" pos:end="367:51"><literal type="number" pos:start="367:51" pos:end="367:51">0</literal></expr>]</index></name> <operator pos:start="367:54" pos:end="367:54">=</operator> <literal type="number" pos:start="367:56" pos:end="367:56">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="369:13" pos:end="369:57"><expr pos:start="369:13" pos:end="369:56"><name pos:start="369:13" pos:end="369:52"><name pos:start="369:13" pos:end="369:14">sh</name><operator pos:start="369:15" pos:end="369:16">-&gt;</operator><name pos:start="369:17" pos:end="369:49">slice_sample_adaptive_offset_flag</name><index pos:start="369:50" pos:end="369:52">[<expr pos:start="369:51" pos:end="369:51"><literal type="number" pos:start="369:51" pos:end="369:51">1</literal></expr>]</index></name> <operator pos:start="369:54" pos:end="369:54">=</operator> <literal type="number" pos:start="369:56" pos:end="369:56">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="371:13" pos:end="371:57"><expr pos:start="371:13" pos:end="371:56"><name pos:start="371:13" pos:end="371:52"><name pos:start="371:13" pos:end="371:14">sh</name><operator pos:start="371:15" pos:end="371:16">-&gt;</operator><name pos:start="371:17" pos:end="371:49">slice_sample_adaptive_offset_flag</name><index pos:start="371:50" pos:end="371:52">[<expr pos:start="371:51" pos:end="371:51"><literal type="number" pos:start="371:51" pos:end="371:51">2</literal></expr>]</index></name> <operator pos:start="371:54" pos:end="371:54">=</operator> <literal type="number" pos:start="371:56" pos:end="371:56">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="377:9" pos:end="377:46"><expr pos:start="377:9" pos:end="377:45"><name pos:start="377:9" pos:end="377:23"><name pos:start="377:9" pos:end="377:10">sh</name><operator pos:start="377:11" pos:end="377:12">-&gt;</operator><name pos:start="377:13" pos:end="377:19">nb_refs</name><index pos:start="377:20" pos:end="377:23">[<expr pos:start="377:21" pos:end="377:22"><name pos:start="377:21" pos:end="377:22">L0</name></expr>]</index></name> <operator pos:start="377:25" pos:end="377:25">=</operator> <name pos:start="377:27" pos:end="377:41"><name pos:start="377:27" pos:end="377:28">sh</name><operator pos:start="377:29" pos:end="377:30">-&gt;</operator><name pos:start="377:31" pos:end="377:37">nb_refs</name><index pos:start="377:38" pos:end="377:41">[<expr pos:start="377:39" pos:end="377:40"><name pos:start="377:39" pos:end="377:40">L1</name></expr>]</index></name> <operator pos:start="377:43" pos:end="377:43">=</operator> <literal type="number" pos:start="377:45" pos:end="377:45">0</literal></expr>;</expr_stmt>

        <if_stmt pos:start="379:9" pos:end="535:9"><if pos:start="379:9" pos:end="535:9">if <condition pos:start="379:12" pos:end="379:77">(<expr pos:start="379:13" pos:end="379:76"><name pos:start="379:13" pos:end="379:26"><name pos:start="379:13" pos:end="379:14">sh</name><operator pos:start="379:15" pos:end="379:16">-&gt;</operator><name pos:start="379:17" pos:end="379:26">slice_type</name></name> <operator pos:start="379:28" pos:end="379:29">==</operator> <name pos:start="379:31" pos:end="379:42">HEVC_SLICE_P</name> <operator pos:start="379:44" pos:end="379:45">||</operator> <name pos:start="379:47" pos:end="379:60"><name pos:start="379:47" pos:end="379:48">sh</name><operator pos:start="379:49" pos:end="379:50">-&gt;</operator><name pos:start="379:51" pos:end="379:60">slice_type</name></name> <operator pos:start="379:62" pos:end="379:63">==</operator> <name pos:start="379:65" pos:end="379:76">HEVC_SLICE_B</name></expr>)</condition> <block pos:start="379:79" pos:end="535:9">{<block_content pos:start="381:13" pos:end="533:13">

            <decl_stmt pos:start="381:13" pos:end="381:24"><decl pos:start="381:13" pos:end="381:23"><type pos:start="381:13" pos:end="381:15"><name pos:start="381:13" pos:end="381:15">int</name></type> <name pos:start="381:17" pos:end="381:23">nb_refs</name></decl>;</decl_stmt>



            <expr_stmt pos:start="385:13" pos:end="385:71"><expr pos:start="385:13" pos:end="385:70"><name pos:start="385:13" pos:end="385:27"><name pos:start="385:13" pos:end="385:14">sh</name><operator pos:start="385:15" pos:end="385:16">-&gt;</operator><name pos:start="385:17" pos:end="385:23">nb_refs</name><index pos:start="385:24" pos:end="385:27">[<expr pos:start="385:25" pos:end="385:26"><name pos:start="385:25" pos:end="385:26">L0</name></expr>]</index></name> <operator pos:start="385:29" pos:end="385:29">=</operator> <name pos:start="385:31" pos:end="385:70"><name pos:start="385:31" pos:end="385:31">s</name><operator pos:start="385:32" pos:end="385:33">-&gt;</operator><name pos:start="385:34" pos:end="385:35">ps</name><operator pos:start="385:36" pos:end="385:36">.</operator><name pos:start="385:37" pos:end="385:39">pps</name><operator pos:start="385:40" pos:end="385:41">-&gt;</operator><name pos:start="385:42" pos:end="385:70">num_ref_idx_l0_default_active</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="387:13" pos:end="389:75"><if pos:start="387:13" pos:end="389:75">if <condition pos:start="387:16" pos:end="387:47">(<expr pos:start="387:17" pos:end="387:46"><name pos:start="387:17" pos:end="387:30"><name pos:start="387:17" pos:end="387:18">sh</name><operator pos:start="387:19" pos:end="387:20">-&gt;</operator><name pos:start="387:21" pos:end="387:30">slice_type</name></name> <operator pos:start="387:32" pos:end="387:33">==</operator> <name pos:start="387:35" pos:end="387:46">HEVC_SLICE_B</name></expr>)</condition><block type="pseudo" pos:start="389:17" pos:end="389:75"><block_content pos:start="389:17" pos:end="389:75">

                <expr_stmt pos:start="389:17" pos:end="389:75"><expr pos:start="389:17" pos:end="389:74"><name pos:start="389:17" pos:end="389:31"><name pos:start="389:17" pos:end="389:18">sh</name><operator pos:start="389:19" pos:end="389:20">-&gt;</operator><name pos:start="389:21" pos:end="389:27">nb_refs</name><index pos:start="389:28" pos:end="389:31">[<expr pos:start="389:29" pos:end="389:30"><name pos:start="389:29" pos:end="389:30">L1</name></expr>]</index></name> <operator pos:start="389:33" pos:end="389:33">=</operator> <name pos:start="389:35" pos:end="389:74"><name pos:start="389:35" pos:end="389:35">s</name><operator pos:start="389:36" pos:end="389:37">-&gt;</operator><name pos:start="389:38" pos:end="389:39">ps</name><operator pos:start="389:40" pos:end="389:40">.</operator><name pos:start="389:41" pos:end="389:43">pps</name><operator pos:start="389:44" pos:end="389:45">-&gt;</operator><name pos:start="389:46" pos:end="389:74">num_ref_idx_l1_default_active</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <if_stmt pos:start="393:13" pos:end="401:13"><if pos:start="393:13" pos:end="401:13">if <condition pos:start="393:16" pos:end="393:30">(<expr pos:start="393:17" pos:end="393:29"><call pos:start="393:17" pos:end="393:29"><name pos:start="393:17" pos:end="393:25">get_bits1</name><argument_list pos:start="393:26" pos:end="393:29">(<argument pos:start="393:27" pos:end="393:28"><expr pos:start="393:27" pos:end="393:28"><name pos:start="393:27" pos:end="393:28">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="393:32" pos:end="401:13">{<block_content pos:start="395:17" pos:end="399:65"> <comment type="line" pos:start="393:34" pos:end="393:68">// num_ref_idx_active_override_flag</comment>

                <expr_stmt pos:start="395:17" pos:end="395:61"><expr pos:start="395:17" pos:end="395:60"><name pos:start="395:17" pos:end="395:31"><name pos:start="395:17" pos:end="395:18">sh</name><operator pos:start="395:19" pos:end="395:20">-&gt;</operator><name pos:start="395:21" pos:end="395:27">nb_refs</name><index pos:start="395:28" pos:end="395:31">[<expr pos:start="395:29" pos:end="395:30"><name pos:start="395:29" pos:end="395:30">L0</name></expr>]</index></name> <operator pos:start="395:33" pos:end="395:33">=</operator> <call pos:start="395:35" pos:end="395:56"><name pos:start="395:35" pos:end="395:52">get_ue_golomb_long</name><argument_list pos:start="395:53" pos:end="395:56">(<argument pos:start="395:54" pos:end="395:55"><expr pos:start="395:54" pos:end="395:55"><name pos:start="395:54" pos:end="395:55">gb</name></expr></argument>)</argument_list></call> <operator pos:start="395:58" pos:end="395:58">+</operator> <literal type="number" pos:start="395:60" pos:end="395:60">1</literal></expr>;</expr_stmt>

                <if_stmt pos:start="397:17" pos:end="399:65"><if pos:start="397:17" pos:end="399:65">if <condition pos:start="397:20" pos:end="397:51">(<expr pos:start="397:21" pos:end="397:50"><name pos:start="397:21" pos:end="397:34"><name pos:start="397:21" pos:end="397:22">sh</name><operator pos:start="397:23" pos:end="397:24">-&gt;</operator><name pos:start="397:25" pos:end="397:34">slice_type</name></name> <operator pos:start="397:36" pos:end="397:37">==</operator> <name pos:start="397:39" pos:end="397:50">HEVC_SLICE_B</name></expr>)</condition><block type="pseudo" pos:start="399:21" pos:end="399:65"><block_content pos:start="399:21" pos:end="399:65">

                    <expr_stmt pos:start="399:21" pos:end="399:65"><expr pos:start="399:21" pos:end="399:64"><name pos:start="399:21" pos:end="399:35"><name pos:start="399:21" pos:end="399:22">sh</name><operator pos:start="399:23" pos:end="399:24">-&gt;</operator><name pos:start="399:25" pos:end="399:31">nb_refs</name><index pos:start="399:32" pos:end="399:35">[<expr pos:start="399:33" pos:end="399:34"><name pos:start="399:33" pos:end="399:34">L1</name></expr>]</index></name> <operator pos:start="399:37" pos:end="399:37">=</operator> <call pos:start="399:39" pos:end="399:60"><name pos:start="399:39" pos:end="399:56">get_ue_golomb_long</name><argument_list pos:start="399:57" pos:end="399:60">(<argument pos:start="399:58" pos:end="399:59"><expr pos:start="399:58" pos:end="399:59"><name pos:start="399:58" pos:end="399:59">gb</name></expr></argument>)</argument_list></call> <operator pos:start="399:62" pos:end="399:62">+</operator> <literal type="number" pos:start="399:64" pos:end="399:64">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="403:13" pos:end="411:13"><if pos:start="403:13" pos:end="411:13">if <condition pos:start="403:16" pos:end="403:83">(<expr pos:start="403:17" pos:end="403:82"><name pos:start="403:17" pos:end="403:31"><name pos:start="403:17" pos:end="403:18">sh</name><operator pos:start="403:19" pos:end="403:20">-&gt;</operator><name pos:start="403:21" pos:end="403:27">nb_refs</name><index pos:start="403:28" pos:end="403:31">[<expr pos:start="403:29" pos:end="403:30"><name pos:start="403:29" pos:end="403:30">L0</name></expr>]</index></name> <operator pos:start="403:33" pos:end="403:33">&gt;</operator> <name pos:start="403:35" pos:end="403:47">HEVC_MAX_REFS</name> <operator pos:start="403:49" pos:end="403:50">||</operator> <name pos:start="403:52" pos:end="403:66"><name pos:start="403:52" pos:end="403:53">sh</name><operator pos:start="403:54" pos:end="403:55">-&gt;</operator><name pos:start="403:56" pos:end="403:62">nb_refs</name><index pos:start="403:63" pos:end="403:66">[<expr pos:start="403:64" pos:end="403:65"><name pos:start="403:64" pos:end="403:65">L1</name></expr>]</index></name> <operator pos:start="403:68" pos:end="403:68">&gt;</operator> <name pos:start="403:70" pos:end="403:82">HEVC_MAX_REFS</name></expr>)</condition> <block pos:start="403:85" pos:end="411:13">{<block_content pos:start="405:17" pos:end="409:43">

                <expr_stmt pos:start="405:17" pos:end="407:57"><expr pos:start="405:17" pos:end="407:56"><call pos:start="405:17" pos:end="407:56"><name pos:start="405:17" pos:end="405:22">av_log</name><argument_list pos:start="405:23" pos:end="407:56">(<argument pos:start="405:24" pos:end="405:31"><expr pos:start="405:24" pos:end="405:31"><name pos:start="405:24" pos:end="405:31"><name pos:start="405:24" pos:end="405:24">s</name><operator pos:start="405:25" pos:end="405:26">-&gt;</operator><name pos:start="405:27" pos:end="405:31">avctx</name></name></expr></argument>, <argument pos:start="405:34" pos:end="405:45"><expr pos:start="405:34" pos:end="405:45"><name pos:start="405:34" pos:end="405:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="405:48" pos:end="405:72"><expr pos:start="405:48" pos:end="405:72"><literal type="string" pos:start="405:48" pos:end="405:72">"Too many refs: %d/%d.\n"</literal></expr></argument>,

                       <argument pos:start="407:24" pos:end="407:38"><expr pos:start="407:24" pos:end="407:38"><name pos:start="407:24" pos:end="407:38"><name pos:start="407:24" pos:end="407:25">sh</name><operator pos:start="407:26" pos:end="407:27">-&gt;</operator><name pos:start="407:28" pos:end="407:34">nb_refs</name><index pos:start="407:35" pos:end="407:38">[<expr pos:start="407:36" pos:end="407:37"><name pos:start="407:36" pos:end="407:37">L0</name></expr>]</index></name></expr></argument>, <argument pos:start="407:41" pos:end="407:55"><expr pos:start="407:41" pos:end="407:55"><name pos:start="407:41" pos:end="407:55"><name pos:start="407:41" pos:end="407:42">sh</name><operator pos:start="407:43" pos:end="407:44">-&gt;</operator><name pos:start="407:45" pos:end="407:51">nb_refs</name><index pos:start="407:52" pos:end="407:55">[<expr pos:start="407:53" pos:end="407:54"><name pos:start="407:53" pos:end="407:54">L1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="409:17" pos:end="409:43">return <expr pos:start="409:24" pos:end="409:42"><name pos:start="409:24" pos:end="409:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="415:13" pos:end="415:45"><expr pos:start="415:13" pos:end="415:44"><name pos:start="415:13" pos:end="415:40"><name pos:start="415:13" pos:end="415:14">sh</name><operator pos:start="415:15" pos:end="415:16">-&gt;</operator><name pos:start="415:17" pos:end="415:37">rpl_modification_flag</name><index pos:start="415:38" pos:end="415:40">[<expr pos:start="415:39" pos:end="415:39"><literal type="number" pos:start="415:39" pos:end="415:39">0</literal></expr>]</index></name> <operator pos:start="415:42" pos:end="415:42">=</operator> <literal type="number" pos:start="415:44" pos:end="415:44">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="417:13" pos:end="417:45"><expr pos:start="417:13" pos:end="417:44"><name pos:start="417:13" pos:end="417:40"><name pos:start="417:13" pos:end="417:14">sh</name><operator pos:start="417:15" pos:end="417:16">-&gt;</operator><name pos:start="417:17" pos:end="417:37">rpl_modification_flag</name><index pos:start="417:38" pos:end="417:40">[<expr pos:start="417:39" pos:end="417:39"><literal type="number" pos:start="417:39" pos:end="417:39">1</literal></expr>]</index></name> <operator pos:start="417:42" pos:end="417:42">=</operator> <literal type="number" pos:start="417:44" pos:end="417:44">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="419:13" pos:end="419:47"><expr pos:start="419:13" pos:end="419:46"><name pos:start="419:13" pos:end="419:19">nb_refs</name> <operator pos:start="419:21" pos:end="419:21">=</operator> <call pos:start="419:23" pos:end="419:46"><name pos:start="419:23" pos:end="419:43">ff_hevc_frame_nb_refs</name><argument_list pos:start="419:44" pos:end="419:46">(<argument pos:start="419:45" pos:end="419:45"><expr pos:start="419:45" pos:end="419:45"><name pos:start="419:45" pos:end="419:45">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="421:13" pos:end="427:13"><if pos:start="421:13" pos:end="427:13">if <condition pos:start="421:16" pos:end="421:25">(<expr pos:start="421:17" pos:end="421:24"><operator pos:start="421:17" pos:end="421:17">!</operator><name pos:start="421:18" pos:end="421:24">nb_refs</name></expr>)</condition> <block pos:start="421:27" pos:end="427:13">{<block_content pos:start="423:17" pos:end="425:43">

                <expr_stmt pos:start="423:17" pos:end="423:94"><expr pos:start="423:17" pos:end="423:93"><call pos:start="423:17" pos:end="423:93"><name pos:start="423:17" pos:end="423:22">av_log</name><argument_list pos:start="423:23" pos:end="423:93">(<argument pos:start="423:24" pos:end="423:31"><expr pos:start="423:24" pos:end="423:31"><name pos:start="423:24" pos:end="423:31"><name pos:start="423:24" pos:end="423:24">s</name><operator pos:start="423:25" pos:end="423:26">-&gt;</operator><name pos:start="423:27" pos:end="423:31">avctx</name></name></expr></argument>, <argument pos:start="423:34" pos:end="423:45"><expr pos:start="423:34" pos:end="423:45"><name pos:start="423:34" pos:end="423:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="423:48" pos:end="423:92"><expr pos:start="423:48" pos:end="423:92"><literal type="string" pos:start="423:48" pos:end="423:92">"Zero refs for a frame with P or B slices.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="425:17" pos:end="425:43">return <expr pos:start="425:24" pos:end="425:42"><name pos:start="425:24" pos:end="425:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="431:13" pos:end="457:13"><if pos:start="431:13" pos:end="457:13">if <condition pos:start="431:16" pos:end="431:74">(<expr pos:start="431:17" pos:end="431:73"><name pos:start="431:17" pos:end="431:58"><name pos:start="431:17" pos:end="431:17">s</name><operator pos:start="431:18" pos:end="431:19">-&gt;</operator><name pos:start="431:20" pos:end="431:21">ps</name><operator pos:start="431:22" pos:end="431:22">.</operator><name pos:start="431:23" pos:end="431:25">pps</name><operator pos:start="431:26" pos:end="431:27">-&gt;</operator><name pos:start="431:28" pos:end="431:58">lists_modification_present_flag</name></name> <operator pos:start="431:60" pos:end="431:61">&amp;&amp;</operator> <name pos:start="431:63" pos:end="431:69">nb_refs</name> <operator pos:start="431:71" pos:end="431:71">&gt;</operator> <literal type="number" pos:start="431:73" pos:end="431:73">1</literal></expr>)</condition> <block pos:start="431:76" pos:end="457:13">{<block_content pos:start="433:17" pos:end="455:17">

                <expr_stmt pos:start="433:17" pos:end="433:61"><expr pos:start="433:17" pos:end="433:60"><name pos:start="433:17" pos:end="433:44"><name pos:start="433:17" pos:end="433:18">sh</name><operator pos:start="433:19" pos:end="433:20">-&gt;</operator><name pos:start="433:21" pos:end="433:41">rpl_modification_flag</name><index pos:start="433:42" pos:end="433:44">[<expr pos:start="433:43" pos:end="433:43"><literal type="number" pos:start="433:43" pos:end="433:43">0</literal></expr>]</index></name> <operator pos:start="433:46" pos:end="433:46">=</operator> <call pos:start="433:48" pos:end="433:60"><name pos:start="433:48" pos:end="433:56">get_bits1</name><argument_list pos:start="433:57" pos:end="433:60">(<argument pos:start="433:58" pos:end="433:59"><expr pos:start="433:58" pos:end="433:59"><name pos:start="433:58" pos:end="433:59">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="435:17" pos:end="441:17"><if pos:start="435:17" pos:end="441:17">if <condition pos:start="435:20" pos:end="435:49">(<expr pos:start="435:21" pos:end="435:48"><name pos:start="435:21" pos:end="435:48"><name pos:start="435:21" pos:end="435:22">sh</name><operator pos:start="435:23" pos:end="435:24">-&gt;</operator><name pos:start="435:25" pos:end="435:45">rpl_modification_flag</name><index pos:start="435:46" pos:end="435:48">[<expr pos:start="435:47" pos:end="435:47"><literal type="number" pos:start="435:47" pos:end="435:47">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="435:51" pos:end="441:17">{<block_content pos:start="437:21" pos:end="439:86">

                    <for pos:start="437:21" pos:end="439:86">for <control pos:start="437:25" pos:end="437:57">(<init pos:start="437:26" pos:end="437:31"><expr pos:start="437:26" pos:end="437:30"><name pos:start="437:26" pos:end="437:26">i</name> <operator pos:start="437:28" pos:end="437:28">=</operator> <literal type="number" pos:start="437:30" pos:end="437:30">0</literal></expr>;</init> <condition pos:start="437:33" pos:end="437:52"><expr pos:start="437:33" pos:end="437:51"><name pos:start="437:33" pos:end="437:33">i</name> <operator pos:start="437:35" pos:end="437:35">&lt;</operator> <name pos:start="437:37" pos:end="437:51"><name pos:start="437:37" pos:end="437:38">sh</name><operator pos:start="437:39" pos:end="437:40">-&gt;</operator><name pos:start="437:41" pos:end="437:47">nb_refs</name><index pos:start="437:48" pos:end="437:51">[<expr pos:start="437:49" pos:end="437:50"><name pos:start="437:49" pos:end="437:50">L0</name></expr>]</index></name></expr>;</condition> <incr pos:start="437:54" pos:end="437:56"><expr pos:start="437:54" pos:end="437:56"><name pos:start="437:54" pos:end="437:54">i</name><operator pos:start="437:55" pos:end="437:56">++</operator></expr></incr>)</control><block type="pseudo" pos:start="439:25" pos:end="439:86"><block_content pos:start="439:25" pos:end="439:86">

                        <expr_stmt pos:start="439:25" pos:end="439:86"><expr pos:start="439:25" pos:end="439:85"><name pos:start="439:25" pos:end="439:47"><name pos:start="439:25" pos:end="439:26">sh</name><operator pos:start="439:27" pos:end="439:28">-&gt;</operator><name pos:start="439:29" pos:end="439:41">list_entry_lx</name><index pos:start="439:42" pos:end="439:44">[<expr pos:start="439:43" pos:end="439:43"><literal type="number" pos:start="439:43" pos:end="439:43">0</literal></expr>]</index><index pos:start="439:45" pos:end="439:47">[<expr pos:start="439:46" pos:end="439:46"><name pos:start="439:46" pos:end="439:46">i</name></expr>]</index></name> <operator pos:start="439:49" pos:end="439:49">=</operator> <call pos:start="439:51" pos:end="439:85"><name pos:start="439:51" pos:end="439:58">get_bits</name><argument_list pos:start="439:59" pos:end="439:85">(<argument pos:start="439:60" pos:end="439:61"><expr pos:start="439:60" pos:end="439:61"><name pos:start="439:60" pos:end="439:61">gb</name></expr></argument>, <argument pos:start="439:64" pos:end="439:84"><expr pos:start="439:64" pos:end="439:84"><call pos:start="439:64" pos:end="439:84"><name pos:start="439:64" pos:end="439:75">av_ceil_log2</name><argument_list pos:start="439:76" pos:end="439:84">(<argument pos:start="439:77" pos:end="439:83"><expr pos:start="439:77" pos:end="439:83"><name pos:start="439:77" pos:end="439:83">nb_refs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                </block_content>}</block></if></if_stmt>



                <if_stmt pos:start="445:17" pos:end="455:17"><if pos:start="445:17" pos:end="455:17">if <condition pos:start="445:20" pos:end="445:51">(<expr pos:start="445:21" pos:end="445:50"><name pos:start="445:21" pos:end="445:34"><name pos:start="445:21" pos:end="445:22">sh</name><operator pos:start="445:23" pos:end="445:24">-&gt;</operator><name pos:start="445:25" pos:end="445:34">slice_type</name></name> <operator pos:start="445:36" pos:end="445:37">==</operator> <name pos:start="445:39" pos:end="445:50">HEVC_SLICE_B</name></expr>)</condition> <block pos:start="445:53" pos:end="455:17">{<block_content pos:start="447:21" pos:end="453:90">

                    <expr_stmt pos:start="447:21" pos:end="447:65"><expr pos:start="447:21" pos:end="447:64"><name pos:start="447:21" pos:end="447:48"><name pos:start="447:21" pos:end="447:22">sh</name><operator pos:start="447:23" pos:end="447:24">-&gt;</operator><name pos:start="447:25" pos:end="447:45">rpl_modification_flag</name><index pos:start="447:46" pos:end="447:48">[<expr pos:start="447:47" pos:end="447:47"><literal type="number" pos:start="447:47" pos:end="447:47">1</literal></expr>]</index></name> <operator pos:start="447:50" pos:end="447:50">=</operator> <call pos:start="447:52" pos:end="447:64"><name pos:start="447:52" pos:end="447:60">get_bits1</name><argument_list pos:start="447:61" pos:end="447:64">(<argument pos:start="447:62" pos:end="447:63"><expr pos:start="447:62" pos:end="447:63"><name pos:start="447:62" pos:end="447:63">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="449:21" pos:end="453:90"><if pos:start="449:21" pos:end="453:90">if <condition pos:start="449:24" pos:end="449:58">(<expr pos:start="449:25" pos:end="449:57"><name pos:start="449:25" pos:end="449:52"><name pos:start="449:25" pos:end="449:26">sh</name><operator pos:start="449:27" pos:end="449:28">-&gt;</operator><name pos:start="449:29" pos:end="449:49">rpl_modification_flag</name><index pos:start="449:50" pos:end="449:52">[<expr pos:start="449:51" pos:end="449:51"><literal type="number" pos:start="449:51" pos:end="449:51">1</literal></expr>]</index></name> <operator pos:start="449:54" pos:end="449:55">==</operator> <literal type="number" pos:start="449:57" pos:end="449:57">1</literal></expr>)</condition><block type="pseudo" pos:start="451:25" pos:end="453:90"><block_content pos:start="451:25" pos:end="453:90">

                        <for pos:start="451:25" pos:end="453:90">for <control pos:start="451:29" pos:end="451:61">(<init pos:start="451:30" pos:end="451:35"><expr pos:start="451:30" pos:end="451:34"><name pos:start="451:30" pos:end="451:30">i</name> <operator pos:start="451:32" pos:end="451:32">=</operator> <literal type="number" pos:start="451:34" pos:end="451:34">0</literal></expr>;</init> <condition pos:start="451:37" pos:end="451:56"><expr pos:start="451:37" pos:end="451:55"><name pos:start="451:37" pos:end="451:37">i</name> <operator pos:start="451:39" pos:end="451:39">&lt;</operator> <name pos:start="451:41" pos:end="451:55"><name pos:start="451:41" pos:end="451:42">sh</name><operator pos:start="451:43" pos:end="451:44">-&gt;</operator><name pos:start="451:45" pos:end="451:51">nb_refs</name><index pos:start="451:52" pos:end="451:55">[<expr pos:start="451:53" pos:end="451:54"><name pos:start="451:53" pos:end="451:54">L1</name></expr>]</index></name></expr>;</condition> <incr pos:start="451:58" pos:end="451:60"><expr pos:start="451:58" pos:end="451:60"><name pos:start="451:58" pos:end="451:58">i</name><operator pos:start="451:59" pos:end="451:60">++</operator></expr></incr>)</control><block type="pseudo" pos:start="453:29" pos:end="453:90"><block_content pos:start="453:29" pos:end="453:90">

                            <expr_stmt pos:start="453:29" pos:end="453:90"><expr pos:start="453:29" pos:end="453:89"><name pos:start="453:29" pos:end="453:51"><name pos:start="453:29" pos:end="453:30">sh</name><operator pos:start="453:31" pos:end="453:32">-&gt;</operator><name pos:start="453:33" pos:end="453:45">list_entry_lx</name><index pos:start="453:46" pos:end="453:48">[<expr pos:start="453:47" pos:end="453:47"><literal type="number" pos:start="453:47" pos:end="453:47">1</literal></expr>]</index><index pos:start="453:49" pos:end="453:51">[<expr pos:start="453:50" pos:end="453:50"><name pos:start="453:50" pos:end="453:50">i</name></expr>]</index></name> <operator pos:start="453:53" pos:end="453:53">=</operator> <call pos:start="453:55" pos:end="453:89"><name pos:start="453:55" pos:end="453:62">get_bits</name><argument_list pos:start="453:63" pos:end="453:89">(<argument pos:start="453:64" pos:end="453:65"><expr pos:start="453:64" pos:end="453:65"><name pos:start="453:64" pos:end="453:65">gb</name></expr></argument>, <argument pos:start="453:68" pos:end="453:88"><expr pos:start="453:68" pos:end="453:88"><call pos:start="453:68" pos:end="453:88"><name pos:start="453:68" pos:end="453:79">av_ceil_log2</name><argument_list pos:start="453:80" pos:end="453:88">(<argument pos:start="453:81" pos:end="453:87"><expr pos:start="453:81" pos:end="453:87"><name pos:start="453:81" pos:end="453:87">nb_refs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="461:13" pos:end="463:53"><if pos:start="461:13" pos:end="463:53">if <condition pos:start="461:16" pos:end="461:47">(<expr pos:start="461:17" pos:end="461:46"><name pos:start="461:17" pos:end="461:30"><name pos:start="461:17" pos:end="461:18">sh</name><operator pos:start="461:19" pos:end="461:20">-&gt;</operator><name pos:start="461:21" pos:end="461:30">slice_type</name></name> <operator pos:start="461:32" pos:end="461:33">==</operator> <name pos:start="461:35" pos:end="461:46">HEVC_SLICE_B</name></expr>)</condition><block type="pseudo" pos:start="463:17" pos:end="463:53"><block_content pos:start="463:17" pos:end="463:53">

                <expr_stmt pos:start="463:17" pos:end="463:53"><expr pos:start="463:17" pos:end="463:52"><name pos:start="463:17" pos:end="463:36"><name pos:start="463:17" pos:end="463:18">sh</name><operator pos:start="463:19" pos:end="463:20">-&gt;</operator><name pos:start="463:21" pos:end="463:36">mvd_l1_zero_flag</name></name> <operator pos:start="463:38" pos:end="463:38">=</operator> <call pos:start="463:40" pos:end="463:52"><name pos:start="463:40" pos:end="463:48">get_bits1</name><argument_list pos:start="463:49" pos:end="463:52">(<argument pos:start="463:50" pos:end="463:51"><expr pos:start="463:50" pos:end="463:51"><name pos:start="463:50" pos:end="463:51">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <if_stmt pos:start="467:13" pos:end="473:40"><if pos:start="467:13" pos:end="469:52">if <condition pos:start="467:16" pos:end="467:51">(<expr pos:start="467:17" pos:end="467:50"><name pos:start="467:17" pos:end="467:50"><name pos:start="467:17" pos:end="467:17">s</name><operator pos:start="467:18" pos:end="467:19">-&gt;</operator><name pos:start="467:20" pos:end="467:21">ps</name><operator pos:start="467:22" pos:end="467:22">.</operator><name pos:start="467:23" pos:end="467:25">pps</name><operator pos:start="467:26" pos:end="467:27">-&gt;</operator><name pos:start="467:28" pos:end="467:50">cabac_init_present_flag</name></name></expr>)</condition><block type="pseudo" pos:start="469:17" pos:end="469:52"><block_content pos:start="469:17" pos:end="469:52">

                <expr_stmt pos:start="469:17" pos:end="469:52"><expr pos:start="469:17" pos:end="469:51"><name pos:start="469:17" pos:end="469:35"><name pos:start="469:17" pos:end="469:18">sh</name><operator pos:start="469:19" pos:end="469:20">-&gt;</operator><name pos:start="469:21" pos:end="469:35">cabac_init_flag</name></name> <operator pos:start="469:37" pos:end="469:37">=</operator> <call pos:start="469:39" pos:end="469:51"><name pos:start="469:39" pos:end="469:47">get_bits1</name><argument_list pos:start="469:48" pos:end="469:51">(<argument pos:start="469:49" pos:end="469:50"><expr pos:start="469:49" pos:end="469:50"><name pos:start="469:49" pos:end="469:50">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="471:13" pos:end="473:40">else<block type="pseudo" pos:start="473:17" pos:end="473:40"><block_content pos:start="473:17" pos:end="473:40">

                <expr_stmt pos:start="473:17" pos:end="473:40"><expr pos:start="473:17" pos:end="473:39"><name pos:start="473:17" pos:end="473:35"><name pos:start="473:17" pos:end="473:18">sh</name><operator pos:start="473:19" pos:end="473:20">-&gt;</operator><name pos:start="473:21" pos:end="473:35">cabac_init_flag</name></name> <operator pos:start="473:37" pos:end="473:37">=</operator> <literal type="number" pos:start="473:39" pos:end="473:39">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



            <expr_stmt pos:start="477:13" pos:end="477:39"><expr pos:start="477:13" pos:end="477:38"><name pos:start="477:13" pos:end="477:34"><name pos:start="477:13" pos:end="477:14">sh</name><operator pos:start="477:15" pos:end="477:16">-&gt;</operator><name pos:start="477:17" pos:end="477:34">collocated_ref_idx</name></name> <operator pos:start="477:36" pos:end="477:36">=</operator> <literal type="number" pos:start="477:38" pos:end="477:38">0</literal></expr>;</expr_stmt>

            <if_stmt pos:start="479:13" pos:end="507:13"><if pos:start="479:13" pos:end="507:13">if <condition pos:start="479:16" pos:end="479:52">(<expr pos:start="479:17" pos:end="479:51"><name pos:start="479:17" pos:end="479:51"><name pos:start="479:17" pos:end="479:18">sh</name><operator pos:start="479:19" pos:end="479:20">-&gt;</operator><name pos:start="479:21" pos:end="479:51">slice_temporal_mvp_enabled_flag</name></name></expr>)</condition> <block pos:start="479:54" pos:end="507:13">{<block_content pos:start="481:17" pos:end="505:17">

                <expr_stmt pos:start="481:17" pos:end="481:41"><expr pos:start="481:17" pos:end="481:40"><name pos:start="481:17" pos:end="481:35"><name pos:start="481:17" pos:end="481:18">sh</name><operator pos:start="481:19" pos:end="481:20">-&gt;</operator><name pos:start="481:21" pos:end="481:35">collocated_list</name></name> <operator pos:start="481:37" pos:end="481:37">=</operator> <name pos:start="481:39" pos:end="481:40">L0</name></expr>;</expr_stmt>

                <if_stmt pos:start="483:17" pos:end="485:57"><if pos:start="483:17" pos:end="485:57">if <condition pos:start="483:20" pos:end="483:51">(<expr pos:start="483:21" pos:end="483:50"><name pos:start="483:21" pos:end="483:34"><name pos:start="483:21" pos:end="483:22">sh</name><operator pos:start="483:23" pos:end="483:24">-&gt;</operator><name pos:start="483:25" pos:end="483:34">slice_type</name></name> <operator pos:start="483:36" pos:end="483:37">==</operator> <name pos:start="483:39" pos:end="483:50">HEVC_SLICE_B</name></expr>)</condition><block type="pseudo" pos:start="485:21" pos:end="485:57"><block_content pos:start="485:21" pos:end="485:57">

                    <expr_stmt pos:start="485:21" pos:end="485:57"><expr pos:start="485:21" pos:end="485:56"><name pos:start="485:21" pos:end="485:39"><name pos:start="485:21" pos:end="485:22">sh</name><operator pos:start="485:23" pos:end="485:24">-&gt;</operator><name pos:start="485:25" pos:end="485:39">collocated_list</name></name> <operator pos:start="485:41" pos:end="485:41">=</operator> <operator pos:start="485:43" pos:end="485:43">!</operator><call pos:start="485:44" pos:end="485:56"><name pos:start="485:44" pos:end="485:52">get_bits1</name><argument_list pos:start="485:53" pos:end="485:56">(<argument pos:start="485:54" pos:end="485:55"><expr pos:start="485:54" pos:end="485:55"><name pos:start="485:54" pos:end="485:55">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



                <if_stmt pos:start="489:17" pos:end="505:17"><if pos:start="489:17" pos:end="505:17">if <condition pos:start="489:20" pos:end="489:57">(<expr pos:start="489:21" pos:end="489:56"><name pos:start="489:21" pos:end="489:52"><name pos:start="489:21" pos:end="489:22">sh</name><operator pos:start="489:23" pos:end="489:24">-&gt;</operator><name pos:start="489:25" pos:end="489:31">nb_refs</name><index pos:start="489:32" pos:end="489:52">[<expr pos:start="489:33" pos:end="489:51"><name pos:start="489:33" pos:end="489:51"><name pos:start="489:33" pos:end="489:34">sh</name><operator pos:start="489:35" pos:end="489:36">-&gt;</operator><name pos:start="489:37" pos:end="489:51">collocated_list</name></name></expr>]</index></name> <operator pos:start="489:54" pos:end="489:54">&gt;</operator> <literal type="number" pos:start="489:56" pos:end="489:56">1</literal></expr>)</condition> <block pos:start="489:59" pos:end="505:17">{<block_content pos:start="491:21" pos:end="503:21">

                    <expr_stmt pos:start="491:21" pos:end="491:68"><expr pos:start="491:21" pos:end="491:67"><name pos:start="491:21" pos:end="491:42"><name pos:start="491:21" pos:end="491:22">sh</name><operator pos:start="491:23" pos:end="491:24">-&gt;</operator><name pos:start="491:25" pos:end="491:42">collocated_ref_idx</name></name> <operator pos:start="491:44" pos:end="491:44">=</operator> <call pos:start="491:46" pos:end="491:67"><name pos:start="491:46" pos:end="491:63">get_ue_golomb_long</name><argument_list pos:start="491:64" pos:end="491:67">(<argument pos:start="491:65" pos:end="491:66"><expr pos:start="491:65" pos:end="491:66"><name pos:start="491:65" pos:end="491:66">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="493:21" pos:end="503:21"><if pos:start="493:21" pos:end="503:21">if <condition pos:start="493:24" pos:end="493:83">(<expr pos:start="493:25" pos:end="493:82"><name pos:start="493:25" pos:end="493:46"><name pos:start="493:25" pos:end="493:26">sh</name><operator pos:start="493:27" pos:end="493:28">-&gt;</operator><name pos:start="493:29" pos:end="493:46">collocated_ref_idx</name></name> <operator pos:start="493:48" pos:end="493:49">&gt;=</operator> <name pos:start="493:51" pos:end="493:82"><name pos:start="493:51" pos:end="493:52">sh</name><operator pos:start="493:53" pos:end="493:54">-&gt;</operator><name pos:start="493:55" pos:end="493:61">nb_refs</name><index pos:start="493:62" pos:end="493:82">[<expr pos:start="493:63" pos:end="493:81"><name pos:start="493:63" pos:end="493:81"><name pos:start="493:63" pos:end="493:64">sh</name><operator pos:start="493:65" pos:end="493:66">-&gt;</operator><name pos:start="493:67" pos:end="493:81">collocated_list</name></name></expr>]</index></name></expr>)</condition> <block pos:start="493:85" pos:end="503:21">{<block_content pos:start="495:25" pos:end="501:51">

                        <expr_stmt pos:start="495:25" pos:end="499:55"><expr pos:start="495:25" pos:end="499:54"><call pos:start="495:25" pos:end="499:54"><name pos:start="495:25" pos:end="495:30">av_log</name><argument_list pos:start="495:31" pos:end="499:54">(<argument pos:start="495:32" pos:end="495:39"><expr pos:start="495:32" pos:end="495:39"><name pos:start="495:32" pos:end="495:39"><name pos:start="495:32" pos:end="495:32">s</name><operator pos:start="495:33" pos:end="495:34">-&gt;</operator><name pos:start="495:35" pos:end="495:39">avctx</name></name></expr></argument>, <argument pos:start="495:42" pos:end="495:53"><expr pos:start="495:42" pos:end="495:53"><name pos:start="495:42" pos:end="495:53">AV_LOG_ERROR</name></expr></argument>,

                               <argument pos:start="497:32" pos:end="497:66"><expr pos:start="497:32" pos:end="497:66"><literal type="string" pos:start="497:32" pos:end="497:66">"Invalid collocated_ref_idx: %d.\n"</literal></expr></argument>,

                               <argument pos:start="499:32" pos:end="499:53"><expr pos:start="499:32" pos:end="499:53"><name pos:start="499:32" pos:end="499:53"><name pos:start="499:32" pos:end="499:33">sh</name><operator pos:start="499:34" pos:end="499:35">-&gt;</operator><name pos:start="499:36" pos:end="499:53">collocated_ref_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <return pos:start="501:25" pos:end="501:51">return <expr pos:start="501:32" pos:end="501:50"><name pos:start="501:32" pos:end="501:50">AVERROR_INVALIDDATA</name></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="511:13" pos:end="517:13"><if pos:start="511:13" pos:end="517:13">if <condition pos:start="511:16" pos:end="513:84">(<expr pos:start="511:17" pos:end="513:83"><operator pos:start="511:17" pos:end="511:17">(</operator><name pos:start="511:18" pos:end="511:46"><name pos:start="511:18" pos:end="511:18">s</name><operator pos:start="511:19" pos:end="511:20">-&gt;</operator><name pos:start="511:21" pos:end="511:22">ps</name><operator pos:start="511:23" pos:end="511:23">.</operator><name pos:start="511:24" pos:end="511:26">pps</name><operator pos:start="511:27" pos:end="511:28">-&gt;</operator><name pos:start="511:29" pos:end="511:46">weighted_pred_flag</name></name>   <operator pos:start="511:50" pos:end="511:51">&amp;&amp;</operator> <name pos:start="511:53" pos:end="511:66"><name pos:start="511:53" pos:end="511:54">sh</name><operator pos:start="511:55" pos:end="511:56">-&gt;</operator><name pos:start="511:57" pos:end="511:66">slice_type</name></name> <operator pos:start="511:68" pos:end="511:69">==</operator> <name pos:start="511:71" pos:end="511:82">HEVC_SLICE_P</name><operator pos:start="511:83" pos:end="511:83">)</operator> <operator pos:start="511:85" pos:end="511:86">||</operator>

                <operator pos:start="513:17" pos:end="513:17">(</operator><name pos:start="513:18" pos:end="513:48"><name pos:start="513:18" pos:end="513:18">s</name><operator pos:start="513:19" pos:end="513:20">-&gt;</operator><name pos:start="513:21" pos:end="513:22">ps</name><operator pos:start="513:23" pos:end="513:23">.</operator><name pos:start="513:24" pos:end="513:26">pps</name><operator pos:start="513:27" pos:end="513:28">-&gt;</operator><name pos:start="513:29" pos:end="513:48">weighted_bipred_flag</name></name> <operator pos:start="513:50" pos:end="513:51">&amp;&amp;</operator> <name pos:start="513:53" pos:end="513:66"><name pos:start="513:53" pos:end="513:54">sh</name><operator pos:start="513:55" pos:end="513:56">-&gt;</operator><name pos:start="513:57" pos:end="513:66">slice_type</name></name> <operator pos:start="513:68" pos:end="513:69">==</operator> <name pos:start="513:71" pos:end="513:82">HEVC_SLICE_B</name><operator pos:start="513:83" pos:end="513:83">)</operator></expr>)</condition> <block pos:start="513:86" pos:end="517:13">{<block_content pos:start="515:17" pos:end="515:41">

                <expr_stmt pos:start="515:17" pos:end="515:41"><expr pos:start="515:17" pos:end="515:40"><call pos:start="515:17" pos:end="515:40"><name pos:start="515:17" pos:end="515:33">pred_weight_table</name><argument_list pos:start="515:34" pos:end="515:40">(<argument pos:start="515:35" pos:end="515:35"><expr pos:start="515:35" pos:end="515:35"><name pos:start="515:35" pos:end="515:35">s</name></expr></argument>, <argument pos:start="515:38" pos:end="515:39"><expr pos:start="515:38" pos:end="515:39"><name pos:start="515:38" pos:end="515:39">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="521:13" pos:end="521:64"><expr pos:start="521:13" pos:end="521:63"><name pos:start="521:13" pos:end="521:34"><name pos:start="521:13" pos:end="521:14">sh</name><operator pos:start="521:15" pos:end="521:16">-&gt;</operator><name pos:start="521:17" pos:end="521:34">max_num_merge_cand</name></name> <operator pos:start="521:36" pos:end="521:36">=</operator> <literal type="number" pos:start="521:38" pos:end="521:40">5</literal> <operator pos:start="521:40" pos:end="521:40">-</operator> <call pos:start="521:42" pos:end="521:63"><name pos:start="521:42" pos:end="521:59">get_ue_golomb_long</name><argument_list pos:start="521:60" pos:end="521:63">(<argument pos:start="521:61" pos:end="521:62"><expr pos:start="521:61" pos:end="521:62"><name pos:start="521:61" pos:end="521:62">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="523:13" pos:end="533:13"><if pos:start="523:13" pos:end="533:13">if <condition pos:start="523:16" pos:end="523:73">(<expr pos:start="523:17" pos:end="523:72"><name pos:start="523:17" pos:end="523:38"><name pos:start="523:17" pos:end="523:18">sh</name><operator pos:start="523:19" pos:end="523:20">-&gt;</operator><name pos:start="523:21" pos:end="523:38">max_num_merge_cand</name></name> <operator pos:start="523:40" pos:end="523:40">&lt;</operator> <literal type="number" pos:start="523:42" pos:end="523:42">1</literal> <operator pos:start="523:44" pos:end="523:45">||</operator> <name pos:start="523:47" pos:end="523:68"><name pos:start="523:47" pos:end="523:48">sh</name><operator pos:start="523:49" pos:end="523:50">-&gt;</operator><name pos:start="523:51" pos:end="523:68">max_num_merge_cand</name></name> <operator pos:start="523:70" pos:end="523:70">&gt;</operator> <literal type="number" pos:start="523:72" pos:end="523:72">5</literal></expr>)</condition> <block pos:start="523:75" pos:end="533:13">{<block_content pos:start="525:17" pos:end="531:43">

                <expr_stmt pos:start="525:17" pos:end="529:47"><expr pos:start="525:17" pos:end="529:46"><call pos:start="525:17" pos:end="529:46"><name pos:start="525:17" pos:end="525:22">av_log</name><argument_list pos:start="525:23" pos:end="529:46">(<argument pos:start="525:24" pos:end="525:31"><expr pos:start="525:24" pos:end="525:31"><name pos:start="525:24" pos:end="525:31"><name pos:start="525:24" pos:end="525:24">s</name><operator pos:start="525:25" pos:end="525:26">-&gt;</operator><name pos:start="525:27" pos:end="525:31">avctx</name></name></expr></argument>, <argument pos:start="525:34" pos:end="525:45"><expr pos:start="525:34" pos:end="525:45"><name pos:start="525:34" pos:end="525:45">AV_LOG_ERROR</name></expr></argument>,

                       <argument pos:start="527:24" pos:end="527:72"><expr pos:start="527:24" pos:end="527:72"><literal type="string" pos:start="527:24" pos:end="527:72">"Invalid number of merging MVP candidates: %d.\n"</literal></expr></argument>,

                       <argument pos:start="529:24" pos:end="529:45"><expr pos:start="529:24" pos:end="529:45"><name pos:start="529:24" pos:end="529:45"><name pos:start="529:24" pos:end="529:25">sh</name><operator pos:start="529:26" pos:end="529:27">-&gt;</operator><name pos:start="529:28" pos:end="529:45">max_num_merge_cand</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="531:17" pos:end="531:43">return <expr pos:start="531:24" pos:end="531:42"><name pos:start="531:24" pos:end="531:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="539:9" pos:end="539:47"><expr pos:start="539:9" pos:end="539:46"><name pos:start="539:9" pos:end="539:26"><name pos:start="539:9" pos:end="539:10">sh</name><operator pos:start="539:11" pos:end="539:12">-&gt;</operator><name pos:start="539:13" pos:end="539:26">slice_qp_delta</name></name> <operator pos:start="539:28" pos:end="539:28">=</operator> <call pos:start="539:30" pos:end="539:46"><name pos:start="539:30" pos:end="539:42">get_se_golomb</name><argument_list pos:start="539:43" pos:end="539:46">(<argument pos:start="539:44" pos:end="539:45"><expr pos:start="539:44" pos:end="539:45"><name pos:start="539:44" pos:end="539:45">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="543:9" pos:end="555:9"><if pos:start="543:9" pos:end="549:9">if <condition pos:start="543:12" pos:end="543:70">(<expr pos:start="543:13" pos:end="543:69"><name pos:start="543:13" pos:end="543:69"><name pos:start="543:13" pos:end="543:13">s</name><operator pos:start="543:14" pos:end="543:15">-&gt;</operator><name pos:start="543:16" pos:end="543:17">ps</name><operator pos:start="543:18" pos:end="543:18">.</operator><name pos:start="543:19" pos:end="543:21">pps</name><operator pos:start="543:22" pos:end="543:23">-&gt;</operator><name pos:start="543:24" pos:end="543:69">pic_slice_level_chroma_qp_offsets_present_flag</name></name></expr>)</condition> <block pos:start="543:72" pos:end="549:9">{<block_content pos:start="545:13" pos:end="547:55">

            <expr_stmt pos:start="545:13" pos:end="545:55"><expr pos:start="545:13" pos:end="545:54"><name pos:start="545:13" pos:end="545:34"><name pos:start="545:13" pos:end="545:14">sh</name><operator pos:start="545:15" pos:end="545:16">-&gt;</operator><name pos:start="545:17" pos:end="545:34">slice_cb_qp_offset</name></name> <operator pos:start="545:36" pos:end="545:36">=</operator> <call pos:start="545:38" pos:end="545:54"><name pos:start="545:38" pos:end="545:50">get_se_golomb</name><argument_list pos:start="545:51" pos:end="545:54">(<argument pos:start="545:52" pos:end="545:53"><expr pos:start="545:52" pos:end="545:53"><name pos:start="545:52" pos:end="545:53">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="547:13" pos:end="547:55"><expr pos:start="547:13" pos:end="547:54"><name pos:start="547:13" pos:end="547:34"><name pos:start="547:13" pos:end="547:14">sh</name><operator pos:start="547:15" pos:end="547:16">-&gt;</operator><name pos:start="547:17" pos:end="547:34">slice_cr_qp_offset</name></name> <operator pos:start="547:36" pos:end="547:36">=</operator> <call pos:start="547:38" pos:end="547:54"><name pos:start="547:38" pos:end="547:50">get_se_golomb</name><argument_list pos:start="547:51" pos:end="547:54">(<argument pos:start="547:52" pos:end="547:53"><expr pos:start="547:52" pos:end="547:53"><name pos:start="547:52" pos:end="547:53">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="549:11" pos:end="555:9">else <block pos:start="549:16" pos:end="555:9">{<block_content pos:start="551:13" pos:end="553:39">

            <expr_stmt pos:start="551:13" pos:end="551:39"><expr pos:start="551:13" pos:end="551:38"><name pos:start="551:13" pos:end="551:34"><name pos:start="551:13" pos:end="551:14">sh</name><operator pos:start="551:15" pos:end="551:16">-&gt;</operator><name pos:start="551:17" pos:end="551:34">slice_cb_qp_offset</name></name> <operator pos:start="551:36" pos:end="551:36">=</operator> <literal type="number" pos:start="551:38" pos:end="551:38">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="553:13" pos:end="553:39"><expr pos:start="553:13" pos:end="553:38"><name pos:start="553:13" pos:end="553:34"><name pos:start="553:13" pos:end="553:14">sh</name><operator pos:start="553:15" pos:end="553:16">-&gt;</operator><name pos:start="553:17" pos:end="553:34">slice_cr_qp_offset</name></name> <operator pos:start="553:36" pos:end="553:36">=</operator> <literal type="number" pos:start="553:38" pos:end="553:38">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="559:9" pos:end="565:53"><if pos:start="559:9" pos:end="561:65">if <condition pos:start="559:12" pos:end="559:58">(<expr pos:start="559:13" pos:end="559:57"><name pos:start="559:13" pos:end="559:57"><name pos:start="559:13" pos:end="559:13">s</name><operator pos:start="559:14" pos:end="559:15">-&gt;</operator><name pos:start="559:16" pos:end="559:17">ps</name><operator pos:start="559:18" pos:end="559:18">.</operator><name pos:start="559:19" pos:end="559:21">pps</name><operator pos:start="559:22" pos:end="559:23">-&gt;</operator><name pos:start="559:24" pos:end="559:57">chroma_qp_offset_list_enabled_flag</name></name></expr>)</condition><block type="pseudo" pos:start="561:13" pos:end="561:65"><block_content pos:start="561:13" pos:end="561:65">

            <expr_stmt pos:start="561:13" pos:end="561:65"><expr pos:start="561:13" pos:end="561:64"><name pos:start="561:13" pos:end="561:48"><name pos:start="561:13" pos:end="561:14">sh</name><operator pos:start="561:15" pos:end="561:16">-&gt;</operator><name pos:start="561:17" pos:end="561:48">cu_chroma_qp_offset_enabled_flag</name></name> <operator pos:start="561:50" pos:end="561:50">=</operator> <call pos:start="561:52" pos:end="561:64"><name pos:start="561:52" pos:end="561:60">get_bits1</name><argument_list pos:start="561:61" pos:end="561:64">(<argument pos:start="561:62" pos:end="561:63"><expr pos:start="561:62" pos:end="561:63"><name pos:start="561:62" pos:end="561:63">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="563:9" pos:end="565:53">else<block type="pseudo" pos:start="565:13" pos:end="565:53"><block_content pos:start="565:13" pos:end="565:53">

            <expr_stmt pos:start="565:13" pos:end="565:53"><expr pos:start="565:13" pos:end="565:52"><name pos:start="565:13" pos:end="565:48"><name pos:start="565:13" pos:end="565:14">sh</name><operator pos:start="565:15" pos:end="565:16">-&gt;</operator><name pos:start="565:17" pos:end="565:48">cu_chroma_qp_offset_enabled_flag</name></name> <operator pos:start="565:50" pos:end="565:50">=</operator> <literal type="number" pos:start="565:52" pos:end="565:52">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <if_stmt pos:start="569:9" pos:end="629:9"><if pos:start="569:9" pos:end="621:9">if <condition pos:start="569:12" pos:end="569:62">(<expr pos:start="569:13" pos:end="569:61"><name pos:start="569:13" pos:end="569:61"><name pos:start="569:13" pos:end="569:13">s</name><operator pos:start="569:14" pos:end="569:15">-&gt;</operator><name pos:start="569:16" pos:end="569:17">ps</name><operator pos:start="569:18" pos:end="569:18">.</operator><name pos:start="569:19" pos:end="569:21">pps</name><operator pos:start="569:22" pos:end="569:23">-&gt;</operator><name pos:start="569:24" pos:end="569:61">deblocking_filter_control_present_flag</name></name></expr>)</condition> <block pos:start="569:64" pos:end="621:9">{<block_content pos:start="571:13" pos:end="619:13">

            <decl_stmt pos:start="571:13" pos:end="571:52"><decl pos:start="571:13" pos:end="571:51"><type pos:start="571:13" pos:end="571:15"><name pos:start="571:13" pos:end="571:15">int</name></type> <name pos:start="571:17" pos:end="571:47">deblocking_filter_override_flag</name> <init pos:start="571:49" pos:end="571:51">= <expr pos:start="571:51" pos:end="571:51"><literal type="number" pos:start="571:51" pos:end="571:51">0</literal></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="575:13" pos:end="577:64"><if pos:start="575:13" pos:end="577:64">if <condition pos:start="575:16" pos:end="575:67">(<expr pos:start="575:17" pos:end="575:66"><name pos:start="575:17" pos:end="575:66"><name pos:start="575:17" pos:end="575:17">s</name><operator pos:start="575:18" pos:end="575:19">-&gt;</operator><name pos:start="575:20" pos:end="575:21">ps</name><operator pos:start="575:22" pos:end="575:22">.</operator><name pos:start="575:23" pos:end="575:25">pps</name><operator pos:start="575:26" pos:end="575:27">-&gt;</operator><name pos:start="575:28" pos:end="575:66">deblocking_filter_override_enabled_flag</name></name></expr>)</condition><block type="pseudo" pos:start="577:17" pos:end="577:64"><block_content pos:start="577:17" pos:end="577:64">

                <expr_stmt pos:start="577:17" pos:end="577:64"><expr pos:start="577:17" pos:end="577:63"><name pos:start="577:17" pos:end="577:47">deblocking_filter_override_flag</name> <operator pos:start="577:49" pos:end="577:49">=</operator> <call pos:start="577:51" pos:end="577:63"><name pos:start="577:51" pos:end="577:59">get_bits1</name><argument_list pos:start="577:60" pos:end="577:63">(<argument pos:start="577:61" pos:end="577:62"><expr pos:start="577:61" pos:end="577:62"><name pos:start="577:61" pos:end="577:62">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <if_stmt pos:start="581:13" pos:end="619:13"><if pos:start="581:13" pos:end="611:13">if <condition pos:start="581:16" pos:end="581:48">(<expr pos:start="581:17" pos:end="581:47"><name pos:start="581:17" pos:end="581:47">deblocking_filter_override_flag</name></expr>)</condition> <block pos:start="581:50" pos:end="611:13">{<block_content pos:start="583:17" pos:end="609:17">

                <expr_stmt pos:start="583:17" pos:end="583:67"><expr pos:start="583:17" pos:end="583:66"><name pos:start="583:17" pos:end="583:50"><name pos:start="583:17" pos:end="583:18">sh</name><operator pos:start="583:19" pos:end="583:20">-&gt;</operator><name pos:start="583:21" pos:end="583:50">disable_deblocking_filter_flag</name></name> <operator pos:start="583:52" pos:end="583:52">=</operator> <call pos:start="583:54" pos:end="583:66"><name pos:start="583:54" pos:end="583:62">get_bits1</name><argument_list pos:start="583:63" pos:end="583:66">(<argument pos:start="583:64" pos:end="583:65"><expr pos:start="583:64" pos:end="583:65"><name pos:start="583:64" pos:end="583:65">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="585:17" pos:end="609:17"><if pos:start="585:17" pos:end="609:17">if <condition pos:start="585:20" pos:end="585:56">(<expr pos:start="585:21" pos:end="585:55"><operator pos:start="585:21" pos:end="585:21">!</operator><name pos:start="585:22" pos:end="585:55"><name pos:start="585:22" pos:end="585:23">sh</name><operator pos:start="585:24" pos:end="585:25">-&gt;</operator><name pos:start="585:26" pos:end="585:55">disable_deblocking_filter_flag</name></name></expr>)</condition> <block pos:start="585:58" pos:end="609:17">{<block_content pos:start="587:21" pos:end="607:59">

                    <decl_stmt pos:start="587:21" pos:end="587:61"><decl pos:start="587:21" pos:end="587:60"><type pos:start="587:21" pos:end="587:23"><name pos:start="587:21" pos:end="587:23">int</name></type> <name pos:start="587:25" pos:end="587:40">beta_offset_div2</name> <init pos:start="587:42" pos:end="587:60">= <expr pos:start="587:44" pos:end="587:60"><call pos:start="587:44" pos:end="587:60"><name pos:start="587:44" pos:end="587:56">get_se_golomb</name><argument_list pos:start="587:57" pos:end="587:60">(<argument pos:start="587:58" pos:end="587:59"><expr pos:start="587:58" pos:end="587:59"><name pos:start="587:58" pos:end="587:59">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="589:21" pos:end="589:62"><decl pos:start="589:21" pos:end="589:60"><type pos:start="589:21" pos:end="589:23"><name pos:start="589:21" pos:end="589:23">int</name></type> <name pos:start="589:25" pos:end="589:38">tc_offset_div2</name>   <init pos:start="589:42" pos:end="589:60">= <expr pos:start="589:44" pos:end="589:60"><call pos:start="589:44" pos:end="589:60"><name pos:start="589:44" pos:end="589:56">get_se_golomb</name><argument_list pos:start="589:57" pos:end="589:60">(<argument pos:start="589:58" pos:end="589:59"><expr pos:start="589:58" pos:end="589:59"><name pos:start="589:58" pos:end="589:59">gb</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

                    <if_stmt pos:start="591:21" pos:end="603:21"><if pos:start="591:21" pos:end="603:21">if <condition pos:start="591:24" pos:end="593:70">(<expr pos:start="591:25" pos:end="593:69"><name pos:start="591:25" pos:end="591:67"><name pos:start="591:25" pos:end="591:40">beta_offset_div2</name> <argument_list type="generic" pos:start="591:42" pos:end="591:67">&lt; <argument pos:start="591:44" pos:end="591:65"><expr pos:start="591:44" pos:end="591:65"><operator pos:start="591:44" pos:end="591:44">-</operator><literal type="number" pos:start="591:45" pos:end="591:45">6</literal> <operator pos:start="591:47" pos:end="591:48">||</operator> <name pos:start="591:50" pos:end="591:65">beta_offset_div2</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="591:69" pos:end="591:69">6</literal> <operator pos:start="591:71" pos:end="591:72">||</operator>

                        <name pos:start="593:25" pos:end="593:67"><name pos:start="593:25" pos:end="593:38">tc_offset_div2</name>   <argument_list type="generic" pos:start="593:42" pos:end="593:67">&lt; <argument pos:start="593:44" pos:end="593:63"><expr pos:start="593:44" pos:end="593:63"><operator pos:start="593:44" pos:end="593:44">-</operator><literal type="number" pos:start="593:45" pos:end="593:45">6</literal> <operator pos:start="593:47" pos:end="593:48">||</operator> <name pos:start="593:50" pos:end="593:63">tc_offset_div2</name></expr></argument>   &gt;</argument_list></name> <literal type="number" pos:start="593:69" pos:end="593:69">6</literal></expr>)</condition> <block pos:start="593:72" pos:end="603:21">{<block_content pos:start="595:25" pos:end="601:51">

                        <expr_stmt pos:start="595:25" pos:end="599:62"><expr pos:start="595:25" pos:end="599:61"><call pos:start="595:25" pos:end="599:61"><name pos:start="595:25" pos:end="595:30">av_log</name><argument_list pos:start="595:31" pos:end="599:61">(<argument pos:start="595:32" pos:end="595:39"><expr pos:start="595:32" pos:end="595:39"><name pos:start="595:32" pos:end="595:39"><name pos:start="595:32" pos:end="595:32">s</name><operator pos:start="595:33" pos:end="595:34">-&gt;</operator><name pos:start="595:35" pos:end="595:39">avctx</name></name></expr></argument>, <argument pos:start="595:42" pos:end="595:53"><expr pos:start="595:42" pos:end="595:53"><name pos:start="595:42" pos:end="595:53">AV_LOG_ERROR</name></expr></argument>,

                            <argument pos:start="597:29" pos:end="597:70"><expr pos:start="597:29" pos:end="597:70"><literal type="string" pos:start="597:29" pos:end="597:70">"Invalid deblock filter offsets: %d, %d\n"</literal></expr></argument>,

                            <argument pos:start="599:29" pos:end="599:44"><expr pos:start="599:29" pos:end="599:44"><name pos:start="599:29" pos:end="599:44">beta_offset_div2</name></expr></argument>, <argument pos:start="599:47" pos:end="599:60"><expr pos:start="599:47" pos:end="599:60"><name pos:start="599:47" pos:end="599:60">tc_offset_div2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <return pos:start="601:25" pos:end="601:51">return <expr pos:start="601:32" pos:end="601:50"><name pos:start="601:32" pos:end="601:50">AVERROR_INVALIDDATA</name></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="605:21" pos:end="605:59"><expr pos:start="605:21" pos:end="605:58"><name pos:start="605:21" pos:end="605:35"><name pos:start="605:21" pos:end="605:22">sh</name><operator pos:start="605:23" pos:end="605:24">-&gt;</operator><name pos:start="605:25" pos:end="605:35">beta_offset</name></name> <operator pos:start="605:37" pos:end="605:37">=</operator> <name pos:start="605:39" pos:end="605:54">beta_offset_div2</name> <operator pos:start="605:56" pos:end="605:56">*</operator> <literal type="number" pos:start="605:58" pos:end="605:58">2</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="607:21" pos:end="607:59"><expr pos:start="607:21" pos:end="607:58"><name pos:start="607:21" pos:end="607:33"><name pos:start="607:21" pos:end="607:22">sh</name><operator pos:start="607:23" pos:end="607:24">-&gt;</operator><name pos:start="607:25" pos:end="607:33">tc_offset</name></name>   <operator pos:start="607:37" pos:end="607:37">=</operator>   <name pos:start="607:41" pos:end="607:54">tc_offset_div2</name> <operator pos:start="607:56" pos:end="607:56">*</operator> <literal type="number" pos:start="607:58" pos:end="607:58">2</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="611:15" pos:end="619:13">else <block pos:start="611:20" pos:end="619:13">{<block_content pos:start="613:17" pos:end="617:74">

                <expr_stmt pos:start="613:17" pos:end="613:76"><expr pos:start="613:17" pos:end="613:75"><name pos:start="613:17" pos:end="613:50"><name pos:start="613:17" pos:end="613:18">sh</name><operator pos:start="613:19" pos:end="613:20">-&gt;</operator><name pos:start="613:21" pos:end="613:50">disable_deblocking_filter_flag</name></name> <operator pos:start="613:52" pos:end="613:52">=</operator> <name pos:start="613:54" pos:end="613:75"><name pos:start="613:54" pos:end="613:54">s</name><operator pos:start="613:55" pos:end="613:56">-&gt;</operator><name pos:start="613:57" pos:end="613:58">ps</name><operator pos:start="613:59" pos:end="613:59">.</operator><name pos:start="613:60" pos:end="613:62">pps</name><operator pos:start="613:63" pos:end="613:64">-&gt;</operator><name pos:start="613:65" pos:end="613:75">disable_dbf</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="615:17" pos:end="615:76"><expr pos:start="615:17" pos:end="615:75"><name pos:start="615:17" pos:end="615:31"><name pos:start="615:17" pos:end="615:18">sh</name><operator pos:start="615:19" pos:end="615:20">-&gt;</operator><name pos:start="615:21" pos:end="615:31">beta_offset</name></name>                    <operator pos:start="615:52" pos:end="615:52">=</operator> <name pos:start="615:54" pos:end="615:75"><name pos:start="615:54" pos:end="615:54">s</name><operator pos:start="615:55" pos:end="615:56">-&gt;</operator><name pos:start="615:57" pos:end="615:58">ps</name><operator pos:start="615:59" pos:end="615:59">.</operator><name pos:start="615:60" pos:end="615:62">pps</name><operator pos:start="615:63" pos:end="615:64">-&gt;</operator><name pos:start="615:65" pos:end="615:75">beta_offset</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="617:17" pos:end="617:74"><expr pos:start="617:17" pos:end="617:73"><name pos:start="617:17" pos:end="617:29"><name pos:start="617:17" pos:end="617:18">sh</name><operator pos:start="617:19" pos:end="617:20">-&gt;</operator><name pos:start="617:21" pos:end="617:29">tc_offset</name></name>                      <operator pos:start="617:52" pos:end="617:52">=</operator> <name pos:start="617:54" pos:end="617:73"><name pos:start="617:54" pos:end="617:54">s</name><operator pos:start="617:55" pos:end="617:56">-&gt;</operator><name pos:start="617:57" pos:end="617:58">ps</name><operator pos:start="617:59" pos:end="617:59">.</operator><name pos:start="617:60" pos:end="617:62">pps</name><operator pos:start="617:63" pos:end="617:64">-&gt;</operator><name pos:start="617:65" pos:end="617:73">tc_offset</name></name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="621:11" pos:end="629:9">else <block pos:start="621:16" pos:end="629:9">{<block_content pos:start="623:13" pos:end="627:51">

            <expr_stmt pos:start="623:13" pos:end="623:51"><expr pos:start="623:13" pos:end="623:50"><name pos:start="623:13" pos:end="623:46"><name pos:start="623:13" pos:end="623:14">sh</name><operator pos:start="623:15" pos:end="623:16">-&gt;</operator><name pos:start="623:17" pos:end="623:46">disable_deblocking_filter_flag</name></name> <operator pos:start="623:48" pos:end="623:48">=</operator> <literal type="number" pos:start="623:50" pos:end="623:50">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="625:13" pos:end="625:51"><expr pos:start="625:13" pos:end="625:50"><name pos:start="625:13" pos:end="625:27"><name pos:start="625:13" pos:end="625:14">sh</name><operator pos:start="625:15" pos:end="625:16">-&gt;</operator><name pos:start="625:17" pos:end="625:27">beta_offset</name></name>                    <operator pos:start="625:48" pos:end="625:48">=</operator> <literal type="number" pos:start="625:50" pos:end="625:50">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="627:13" pos:end="627:51"><expr pos:start="627:13" pos:end="627:50"><name pos:start="627:13" pos:end="627:25"><name pos:start="627:13" pos:end="627:14">sh</name><operator pos:start="627:15" pos:end="627:16">-&gt;</operator><name pos:start="627:17" pos:end="627:25">tc_offset</name></name>                      <operator pos:start="627:48" pos:end="627:48">=</operator> <literal type="number" pos:start="627:50" pos:end="627:50">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="633:9" pos:end="647:9"><if pos:start="633:9" pos:end="643:9">if <condition pos:start="633:12" pos:end="639:50">(<expr pos:start="633:13" pos:end="639:49"><name pos:start="633:13" pos:end="633:65"><name pos:start="633:13" pos:end="633:13">s</name><operator pos:start="633:14" pos:end="633:15">-&gt;</operator><name pos:start="633:16" pos:end="633:17">ps</name><operator pos:start="633:18" pos:end="633:18">.</operator><name pos:start="633:19" pos:end="633:21">pps</name><operator pos:start="633:22" pos:end="633:23">-&gt;</operator><name pos:start="633:24" pos:end="633:65">seq_loop_filter_across_slices_enabled_flag</name></name> <operator pos:start="633:67" pos:end="633:68">&amp;&amp;</operator>

            <operator pos:start="635:13" pos:end="635:13">(</operator><name pos:start="635:14" pos:end="635:53"><name pos:start="635:14" pos:end="635:15">sh</name><operator pos:start="635:16" pos:end="635:17">-&gt;</operator><name pos:start="635:18" pos:end="635:50">slice_sample_adaptive_offset_flag</name><index pos:start="635:51" pos:end="635:53">[<expr pos:start="635:52" pos:end="635:52"><literal type="number" pos:start="635:52" pos:end="635:52">0</literal></expr>]</index></name> <operator pos:start="635:55" pos:end="635:56">||</operator>

             <name pos:start="637:14" pos:end="637:53"><name pos:start="637:14" pos:end="637:15">sh</name><operator pos:start="637:16" pos:end="637:17">-&gt;</operator><name pos:start="637:18" pos:end="637:50">slice_sample_adaptive_offset_flag</name><index pos:start="637:51" pos:end="637:53">[<expr pos:start="637:52" pos:end="637:52"><literal type="number" pos:start="637:52" pos:end="637:52">1</literal></expr>]</index></name> <operator pos:start="637:55" pos:end="637:56">||</operator>

             <operator pos:start="639:14" pos:end="639:14">!</operator><name pos:start="639:15" pos:end="639:48"><name pos:start="639:15" pos:end="639:16">sh</name><operator pos:start="639:17" pos:end="639:18">-&gt;</operator><name pos:start="639:19" pos:end="639:48">disable_deblocking_filter_flag</name></name><operator pos:start="639:49" pos:end="639:49">)</operator></expr>)</condition> <block pos:start="639:52" pos:end="643:9">{<block_content pos:start="641:13" pos:end="641:77">

            <expr_stmt pos:start="641:13" pos:end="641:77"><expr pos:start="641:13" pos:end="641:76"><name pos:start="641:13" pos:end="641:60"><name pos:start="641:13" pos:end="641:14">sh</name><operator pos:start="641:15" pos:end="641:16">-&gt;</operator><name pos:start="641:17" pos:end="641:60">slice_loop_filter_across_slices_enabled_flag</name></name> <operator pos:start="641:62" pos:end="641:62">=</operator> <call pos:start="641:64" pos:end="641:76"><name pos:start="641:64" pos:end="641:72">get_bits1</name><argument_list pos:start="641:73" pos:end="641:76">(<argument pos:start="641:74" pos:end="641:75"><expr pos:start="641:74" pos:end="641:75"><name pos:start="641:74" pos:end="641:75">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="643:11" pos:end="647:9">else <block pos:start="643:16" pos:end="647:9">{<block_content pos:start="645:13" pos:end="645:117">

            <expr_stmt pos:start="645:13" pos:end="645:117"><expr pos:start="645:13" pos:end="645:116"><name pos:start="645:13" pos:end="645:60"><name pos:start="645:13" pos:end="645:14">sh</name><operator pos:start="645:15" pos:end="645:16">-&gt;</operator><name pos:start="645:17" pos:end="645:60">slice_loop_filter_across_slices_enabled_flag</name></name> <operator pos:start="645:62" pos:end="645:62">=</operator> <name pos:start="645:64" pos:end="645:116"><name pos:start="645:64" pos:end="645:64">s</name><operator pos:start="645:65" pos:end="645:66">-&gt;</operator><name pos:start="645:67" pos:end="645:68">ps</name><operator pos:start="645:69" pos:end="645:69">.</operator><name pos:start="645:70" pos:end="645:72">pps</name><operator pos:start="645:73" pos:end="645:74">-&gt;</operator><name pos:start="645:75" pos:end="645:116">seq_loop_filter_across_slices_enabled_flag</name></name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="649:7" pos:end="655:5">else if <condition pos:start="649:15" pos:end="649:37">(<expr pos:start="649:16" pos:end="649:36"><operator pos:start="649:16" pos:end="649:16">!</operator><name pos:start="649:17" pos:end="649:36"><name pos:start="649:17" pos:end="649:17">s</name><operator pos:start="649:18" pos:end="649:19">-&gt;</operator><name pos:start="649:20" pos:end="649:36">slice_initialized</name></name></expr>)</condition> <block pos:start="649:39" pos:end="655:5">{<block_content pos:start="651:9" pos:end="653:35">

        <expr_stmt pos:start="651:9" pos:end="651:79"><expr pos:start="651:9" pos:end="651:78"><call pos:start="651:9" pos:end="651:78"><name pos:start="651:9" pos:end="651:14">av_log</name><argument_list pos:start="651:15" pos:end="651:78">(<argument pos:start="651:16" pos:end="651:23"><expr pos:start="651:16" pos:end="651:23"><name pos:start="651:16" pos:end="651:23"><name pos:start="651:16" pos:end="651:16">s</name><operator pos:start="651:17" pos:end="651:18">-&gt;</operator><name pos:start="651:19" pos:end="651:23">avctx</name></name></expr></argument>, <argument pos:start="651:26" pos:end="651:37"><expr pos:start="651:26" pos:end="651:37"><name pos:start="651:26" pos:end="651:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="651:40" pos:end="651:77"><expr pos:start="651:40" pos:end="651:77"><literal type="string" pos:start="651:40" pos:end="651:77">"Independent slice segment missing.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="653:9" pos:end="653:35">return <expr pos:start="653:16" pos:end="653:34"><name pos:start="653:16" pos:end="653:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="659:5" pos:end="659:36"><expr pos:start="659:5" pos:end="659:35"><name pos:start="659:5" pos:end="659:31"><name pos:start="659:5" pos:end="659:6">sh</name><operator pos:start="659:7" pos:end="659:8">-&gt;</operator><name pos:start="659:9" pos:end="659:31">num_entry_point_offsets</name></name> <operator pos:start="659:33" pos:end="659:33">=</operator> <literal type="number" pos:start="659:35" pos:end="659:35">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="661:5" pos:end="741:5"><if pos:start="661:5" pos:end="741:5">if <condition pos:start="661:8" pos:end="661:85">(<expr pos:start="661:9" pos:end="661:84"><name pos:start="661:9" pos:end="661:37"><name pos:start="661:9" pos:end="661:9">s</name><operator pos:start="661:10" pos:end="661:11">-&gt;</operator><name pos:start="661:12" pos:end="661:13">ps</name><operator pos:start="661:14" pos:end="661:14">.</operator><name pos:start="661:15" pos:end="661:17">pps</name><operator pos:start="661:18" pos:end="661:19">-&gt;</operator><name pos:start="661:20" pos:end="661:37">tiles_enabled_flag</name></name> <operator pos:start="661:39" pos:end="661:40">||</operator> <name pos:start="661:42" pos:end="661:84"><name pos:start="661:42" pos:end="661:42">s</name><operator pos:start="661:43" pos:end="661:44">-&gt;</operator><name pos:start="661:45" pos:end="661:46">ps</name><operator pos:start="661:47" pos:end="661:47">.</operator><name pos:start="661:48" pos:end="661:50">pps</name><operator pos:start="661:51" pos:end="661:52">-&gt;</operator><name pos:start="661:53" pos:end="661:84">entropy_coding_sync_enabled_flag</name></name></expr>)</condition> <block pos:start="661:87" pos:end="741:5">{<block_content pos:start="663:9" pos:end="739:41">

        <decl_stmt pos:start="663:9" pos:end="663:66"><decl pos:start="663:9" pos:end="663:65"><type pos:start="663:9" pos:end="663:16"><name pos:start="663:9" pos:end="663:16">unsigned</name></type> <name pos:start="663:18" pos:end="663:40">num_entry_point_offsets</name> <init pos:start="663:42" pos:end="663:65">= <expr pos:start="663:44" pos:end="663:65"><call pos:start="663:44" pos:end="663:65"><name pos:start="663:44" pos:end="663:61">get_ue_golomb_long</name><argument_list pos:start="663:62" pos:end="663:65">(<argument pos:start="663:63" pos:end="663:64"><expr pos:start="663:63" pos:end="663:64"><name pos:start="663:63" pos:end="663:64">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:start="665:9" pos:end="665:78">// It would be possible to bound this tighter but this here is simpler</comment>

        <if_stmt pos:start="667:9" pos:end="673:9"><if pos:start="667:9" pos:end="673:9">if <condition pos:start="667:12" pos:end="667:56">(<expr pos:start="667:13" pos:end="667:55"><name pos:start="667:13" pos:end="667:35">num_entry_point_offsets</name> <operator pos:start="667:37" pos:end="667:37">&gt;</operator> <call pos:start="667:39" pos:end="667:55"><name pos:start="667:39" pos:end="667:51">get_bits_left</name><argument_list pos:start="667:52" pos:end="667:55">(<argument pos:start="667:53" pos:end="667:54"><expr pos:start="667:53" pos:end="667:54"><name pos:start="667:53" pos:end="667:54">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="667:58" pos:end="673:9">{<block_content pos:start="669:13" pos:end="671:39">

            <expr_stmt pos:start="669:13" pos:end="669:111"><expr pos:start="669:13" pos:end="669:110"><call pos:start="669:13" pos:end="669:110"><name pos:start="669:13" pos:end="669:18">av_log</name><argument_list pos:start="669:19" pos:end="669:110">(<argument pos:start="669:20" pos:end="669:27"><expr pos:start="669:20" pos:end="669:27"><name pos:start="669:20" pos:end="669:27"><name pos:start="669:20" pos:end="669:20">s</name><operator pos:start="669:21" pos:end="669:22">-&gt;</operator><name pos:start="669:23" pos:end="669:27">avctx</name></name></expr></argument>, <argument pos:start="669:30" pos:end="669:41"><expr pos:start="669:30" pos:end="669:41"><name pos:start="669:30" pos:end="669:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="669:44" pos:end="669:84"><expr pos:start="669:44" pos:end="669:84"><literal type="string" pos:start="669:44" pos:end="669:84">"num_entry_point_offsets %d is invalid\n"</literal></expr></argument>, <argument pos:start="669:87" pos:end="669:109"><expr pos:start="669:87" pos:end="669:109"><name pos:start="669:87" pos:end="669:109">num_entry_point_offsets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="671:13" pos:end="671:39">return <expr pos:start="671:20" pos:end="671:38"><name pos:start="671:20" pos:end="671:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="677:9" pos:end="677:62"><expr pos:start="677:9" pos:end="677:61"><name pos:start="677:9" pos:end="677:35"><name pos:start="677:9" pos:end="677:10">sh</name><operator pos:start="677:11" pos:end="677:12">-&gt;</operator><name pos:start="677:13" pos:end="677:35">num_entry_point_offsets</name></name> <operator pos:start="677:37" pos:end="677:37">=</operator> <name pos:start="677:39" pos:end="677:61">num_entry_point_offsets</name></expr>;</expr_stmt>

        <if_stmt pos:start="679:9" pos:end="739:41"><if pos:start="679:9" pos:end="737:9">if <condition pos:start="679:12" pos:end="679:44">(<expr pos:start="679:13" pos:end="679:43"><name pos:start="679:13" pos:end="679:39"><name pos:start="679:13" pos:end="679:14">sh</name><operator pos:start="679:15" pos:end="679:16">-&gt;</operator><name pos:start="679:17" pos:end="679:39">num_entry_point_offsets</name></name> <operator pos:start="679:41" pos:end="679:41">&gt;</operator> <literal type="number" pos:start="679:43" pos:end="679:43">0</literal></expr>)</condition> <block pos:start="679:46" pos:end="737:9">{<block_content pos:start="681:13" pos:end="735:45">

            <decl_stmt pos:start="681:13" pos:end="681:56"><decl pos:start="681:13" pos:end="681:55"><type pos:start="681:13" pos:end="681:15"><name pos:start="681:13" pos:end="681:15">int</name></type> <name pos:start="681:17" pos:end="681:26">offset_len</name> <init pos:start="681:28" pos:end="681:55">= <expr pos:start="681:30" pos:end="681:55"><call pos:start="681:30" pos:end="681:51"><name pos:start="681:30" pos:end="681:47">get_ue_golomb_long</name><argument_list pos:start="681:48" pos:end="681:51">(<argument pos:start="681:49" pos:end="681:50"><expr pos:start="681:49" pos:end="681:50"><name pos:start="681:49" pos:end="681:50">gb</name></expr></argument>)</argument_list></call> <operator pos:start="681:53" pos:end="681:53">+</operator> <literal type="number" pos:start="681:55" pos:end="681:55">1</literal></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="685:13" pos:end="693:13"><if pos:start="685:13" pos:end="693:13">if <condition pos:start="685:16" pos:end="685:50">(<expr pos:start="685:17" pos:end="685:49"><name pos:start="685:17" pos:end="685:46"><name pos:start="685:17" pos:end="685:26">offset_len</name> <argument_list type="generic" pos:start="685:28" pos:end="685:46">&lt; <argument pos:start="685:30" pos:end="685:44"><expr pos:start="685:30" pos:end="685:44"><literal type="number" pos:start="685:30" pos:end="685:30">1</literal> <operator pos:start="685:32" pos:end="685:33">||</operator> <name pos:start="685:35" pos:end="685:44">offset_len</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="685:48" pos:end="685:49">32</literal></expr>)</condition> <block pos:start="685:52" pos:end="693:13">{<block_content pos:start="687:17" pos:end="691:43">

                <expr_stmt pos:start="687:17" pos:end="687:48"><expr pos:start="687:17" pos:end="687:47"><name pos:start="687:17" pos:end="687:43"><name pos:start="687:17" pos:end="687:18">sh</name><operator pos:start="687:19" pos:end="687:20">-&gt;</operator><name pos:start="687:21" pos:end="687:43">num_entry_point_offsets</name></name> <operator pos:start="687:45" pos:end="687:45">=</operator> <literal type="number" pos:start="687:47" pos:end="687:47">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="689:17" pos:end="689:89"><expr pos:start="689:17" pos:end="689:88"><call pos:start="689:17" pos:end="689:88"><name pos:start="689:17" pos:end="689:22">av_log</name><argument_list pos:start="689:23" pos:end="689:88">(<argument pos:start="689:24" pos:end="689:31"><expr pos:start="689:24" pos:end="689:31"><name pos:start="689:24" pos:end="689:31"><name pos:start="689:24" pos:end="689:24">s</name><operator pos:start="689:25" pos:end="689:26">-&gt;</operator><name pos:start="689:27" pos:end="689:31">avctx</name></name></expr></argument>, <argument pos:start="689:34" pos:end="689:45"><expr pos:start="689:34" pos:end="689:45"><name pos:start="689:34" pos:end="689:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="689:48" pos:end="689:75"><expr pos:start="689:48" pos:end="689:75"><literal type="string" pos:start="689:48" pos:end="689:75">"offset_len %d is invalid\n"</literal></expr></argument>, <argument pos:start="689:78" pos:end="689:87"><expr pos:start="689:78" pos:end="689:87"><name pos:start="689:78" pos:end="689:87">offset_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="691:17" pos:end="691:43">return <expr pos:start="691:24" pos:end="691:42"><name pos:start="691:24" pos:end="691:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="697:13" pos:end="697:46"><expr pos:start="697:13" pos:end="697:45"><call pos:start="697:13" pos:end="697:45"><name pos:start="697:13" pos:end="697:20">av_freep</name><argument_list pos:start="697:21" pos:end="697:45">(<argument pos:start="697:22" pos:end="697:44"><expr pos:start="697:22" pos:end="697:44"><operator pos:start="697:22" pos:end="697:22">&amp;</operator><name pos:start="697:23" pos:end="697:44"><name pos:start="697:23" pos:end="697:24">sh</name><operator pos:start="697:25" pos:end="697:26">-&gt;</operator><name pos:start="697:27" pos:end="697:44">entry_point_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="699:13" pos:end="699:34"><expr pos:start="699:13" pos:end="699:33"><call pos:start="699:13" pos:end="699:33"><name pos:start="699:13" pos:end="699:20">av_freep</name><argument_list pos:start="699:21" pos:end="699:33">(<argument pos:start="699:22" pos:end="699:32"><expr pos:start="699:22" pos:end="699:32"><operator pos:start="699:22" pos:end="699:22">&amp;</operator><name pos:start="699:23" pos:end="699:32"><name pos:start="699:23" pos:end="699:24">sh</name><operator pos:start="699:25" pos:end="699:26">-&gt;</operator><name pos:start="699:27" pos:end="699:32">offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="701:13" pos:end="701:32"><expr pos:start="701:13" pos:end="701:31"><call pos:start="701:13" pos:end="701:31"><name pos:start="701:13" pos:end="701:20">av_freep</name><argument_list pos:start="701:21" pos:end="701:31">(<argument pos:start="701:22" pos:end="701:30"><expr pos:start="701:22" pos:end="701:30"><operator pos:start="701:22" pos:end="701:22">&amp;</operator><name pos:start="701:23" pos:end="701:30"><name pos:start="701:23" pos:end="701:24">sh</name><operator pos:start="701:25" pos:end="701:26">-&gt;</operator><name pos:start="701:27" pos:end="701:30">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="703:13" pos:end="703:100"><expr pos:start="703:13" pos:end="703:99"><name pos:start="703:13" pos:end="703:34"><name pos:start="703:13" pos:end="703:14">sh</name><operator pos:start="703:15" pos:end="703:16">-&gt;</operator><name pos:start="703:17" pos:end="703:34">entry_point_offset</name></name> <operator pos:start="703:36" pos:end="703:36">=</operator> <call pos:start="703:38" pos:end="703:99"><name pos:start="703:38" pos:end="703:52">av_malloc_array</name><argument_list pos:start="703:53" pos:end="703:99">(<argument pos:start="703:54" pos:end="703:80"><expr pos:start="703:54" pos:end="703:80"><name pos:start="703:54" pos:end="703:80"><name pos:start="703:54" pos:end="703:55">sh</name><operator pos:start="703:56" pos:end="703:57">-&gt;</operator><name pos:start="703:58" pos:end="703:80">num_entry_point_offsets</name></name></expr></argument>, <argument pos:start="703:83" pos:end="703:98"><expr pos:start="703:83" pos:end="703:98"><sizeof pos:start="703:83" pos:end="703:98">sizeof<argument_list pos:start="703:89" pos:end="703:98">(<argument pos:start="703:90" pos:end="703:97"><expr pos:start="703:90" pos:end="703:97"><name pos:start="703:90" pos:end="703:97">unsigned</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="705:13" pos:end="705:83"><expr pos:start="705:13" pos:end="705:82"><name pos:start="705:13" pos:end="705:22"><name pos:start="705:13" pos:end="705:14">sh</name><operator pos:start="705:15" pos:end="705:16">-&gt;</operator><name pos:start="705:17" pos:end="705:22">offset</name></name> <operator pos:start="705:24" pos:end="705:24">=</operator> <call pos:start="705:26" pos:end="705:82"><name pos:start="705:26" pos:end="705:40">av_malloc_array</name><argument_list pos:start="705:41" pos:end="705:82">(<argument pos:start="705:42" pos:end="705:68"><expr pos:start="705:42" pos:end="705:68"><name pos:start="705:42" pos:end="705:68"><name pos:start="705:42" pos:end="705:43">sh</name><operator pos:start="705:44" pos:end="705:45">-&gt;</operator><name pos:start="705:46" pos:end="705:68">num_entry_point_offsets</name></name></expr></argument>, <argument pos:start="705:71" pos:end="705:81"><expr pos:start="705:71" pos:end="705:81"><sizeof pos:start="705:71" pos:end="705:81">sizeof<argument_list pos:start="705:77" pos:end="705:81">(<argument pos:start="705:78" pos:end="705:80"><expr pos:start="705:78" pos:end="705:80"><name pos:start="705:78" pos:end="705:80">int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="707:13" pos:end="707:81"><expr pos:start="707:13" pos:end="707:80"><name pos:start="707:13" pos:end="707:20"><name pos:start="707:13" pos:end="707:14">sh</name><operator pos:start="707:15" pos:end="707:16">-&gt;</operator><name pos:start="707:17" pos:end="707:20">size</name></name> <operator pos:start="707:22" pos:end="707:22">=</operator> <call pos:start="707:24" pos:end="707:80"><name pos:start="707:24" pos:end="707:38">av_malloc_array</name><argument_list pos:start="707:39" pos:end="707:80">(<argument pos:start="707:40" pos:end="707:66"><expr pos:start="707:40" pos:end="707:66"><name pos:start="707:40" pos:end="707:66"><name pos:start="707:40" pos:end="707:41">sh</name><operator pos:start="707:42" pos:end="707:43">-&gt;</operator><name pos:start="707:44" pos:end="707:66">num_entry_point_offsets</name></name></expr></argument>, <argument pos:start="707:69" pos:end="707:79"><expr pos:start="707:69" pos:end="707:79"><sizeof pos:start="707:69" pos:end="707:79">sizeof<argument_list pos:start="707:75" pos:end="707:79">(<argument pos:start="707:76" pos:end="707:78"><expr pos:start="707:76" pos:end="707:78"><name pos:start="707:76" pos:end="707:78">int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="709:13" pos:end="717:13"><if pos:start="709:13" pos:end="717:13">if <condition pos:start="709:16" pos:end="709:68">(<expr pos:start="709:17" pos:end="709:67"><operator pos:start="709:17" pos:end="709:17">!</operator><name pos:start="709:18" pos:end="709:39"><name pos:start="709:18" pos:end="709:19">sh</name><operator pos:start="709:20" pos:end="709:21">-&gt;</operator><name pos:start="709:22" pos:end="709:39">entry_point_offset</name></name> <operator pos:start="709:41" pos:end="709:42">||</operator> <operator pos:start="709:44" pos:end="709:44">!</operator><name pos:start="709:45" pos:end="709:54"><name pos:start="709:45" pos:end="709:46">sh</name><operator pos:start="709:47" pos:end="709:48">-&gt;</operator><name pos:start="709:49" pos:end="709:54">offset</name></name> <operator pos:start="709:56" pos:end="709:57">||</operator> <operator pos:start="709:59" pos:end="709:59">!</operator><name pos:start="709:60" pos:end="709:67"><name pos:start="709:60" pos:end="709:61">sh</name><operator pos:start="709:62" pos:end="709:63">-&gt;</operator><name pos:start="709:64" pos:end="709:67">size</name></name></expr>)</condition> <block pos:start="709:70" pos:end="717:13">{<block_content pos:start="711:17" pos:end="715:39">

                <expr_stmt pos:start="711:17" pos:end="711:48"><expr pos:start="711:17" pos:end="711:47"><name pos:start="711:17" pos:end="711:43"><name pos:start="711:17" pos:end="711:18">sh</name><operator pos:start="711:19" pos:end="711:20">-&gt;</operator><name pos:start="711:21" pos:end="711:43">num_entry_point_offsets</name></name> <operator pos:start="711:45" pos:end="711:45">=</operator> <literal type="number" pos:start="711:47" pos:end="711:47">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="713:17" pos:end="713:78"><expr pos:start="713:17" pos:end="713:77"><call pos:start="713:17" pos:end="713:77"><name pos:start="713:17" pos:end="713:22">av_log</name><argument_list pos:start="713:23" pos:end="713:77">(<argument pos:start="713:24" pos:end="713:31"><expr pos:start="713:24" pos:end="713:31"><name pos:start="713:24" pos:end="713:31"><name pos:start="713:24" pos:end="713:24">s</name><operator pos:start="713:25" pos:end="713:26">-&gt;</operator><name pos:start="713:27" pos:end="713:31">avctx</name></name></expr></argument>, <argument pos:start="713:34" pos:end="713:45"><expr pos:start="713:34" pos:end="713:45"><name pos:start="713:34" pos:end="713:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="713:48" pos:end="713:76"><expr pos:start="713:48" pos:end="713:76"><literal type="string" pos:start="713:48" pos:end="713:76">"Failed to allocate memory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="715:17" pos:end="715:39">return <expr pos:start="715:24" pos:end="715:38"><call pos:start="715:24" pos:end="715:38"><name pos:start="715:24" pos:end="715:30">AVERROR</name><argument_list pos:start="715:31" pos:end="715:38">(<argument pos:start="715:32" pos:end="715:37"><expr pos:start="715:32" pos:end="715:37"><name pos:start="715:32" pos:end="715:37">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <for pos:start="719:13" pos:end="725:13">for <control pos:start="719:17" pos:end="719:61">(<init pos:start="719:18" pos:end="719:23"><expr pos:start="719:18" pos:end="719:22"><name pos:start="719:18" pos:end="719:18">i</name> <operator pos:start="719:20" pos:end="719:20">=</operator> <literal type="number" pos:start="719:22" pos:end="719:22">0</literal></expr>;</init> <condition pos:start="719:25" pos:end="719:56"><expr pos:start="719:25" pos:end="719:55"><name pos:start="719:25" pos:end="719:25">i</name> <operator pos:start="719:27" pos:end="719:27">&lt;</operator> <name pos:start="719:29" pos:end="719:55"><name pos:start="719:29" pos:end="719:30">sh</name><operator pos:start="719:31" pos:end="719:32">-&gt;</operator><name pos:start="719:33" pos:end="719:55">num_entry_point_offsets</name></name></expr>;</condition> <incr pos:start="719:58" pos:end="719:60"><expr pos:start="719:58" pos:end="719:60"><name pos:start="719:58" pos:end="719:58">i</name><operator pos:start="719:59" pos:end="719:60">++</operator></expr></incr>)</control> <block pos:start="719:63" pos:end="725:13">{<block_content pos:start="721:17" pos:end="723:52">

                <decl_stmt pos:start="721:17" pos:end="721:61"><decl pos:start="721:17" pos:end="721:60"><type pos:start="721:17" pos:end="721:24"><name pos:start="721:17" pos:end="721:24">unsigned</name></type> <name pos:start="721:26" pos:end="721:28">val</name> <init pos:start="721:30" pos:end="721:60">= <expr pos:start="721:32" pos:end="721:60"><call pos:start="721:32" pos:end="721:60"><name pos:start="721:32" pos:end="721:44">get_bits_long</name><argument_list pos:start="721:45" pos:end="721:60">(<argument pos:start="721:46" pos:end="721:47"><expr pos:start="721:46" pos:end="721:47"><name pos:start="721:46" pos:end="721:47">gb</name></expr></argument>, <argument pos:start="721:50" pos:end="721:59"><expr pos:start="721:50" pos:end="721:59"><name pos:start="721:50" pos:end="721:59">offset_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="723:17" pos:end="723:52"><expr pos:start="723:17" pos:end="723:51"><name pos:start="723:17" pos:end="723:41"><name pos:start="723:17" pos:end="723:18">sh</name><operator pos:start="723:19" pos:end="723:20">-&gt;</operator><name pos:start="723:21" pos:end="723:38">entry_point_offset</name><index pos:start="723:39" pos:end="723:41">[<expr pos:start="723:40" pos:end="723:40"><name pos:start="723:40" pos:end="723:40">i</name></expr>]</index></name> <operator pos:start="723:43" pos:end="723:43">=</operator> <name pos:start="723:45" pos:end="723:47">val</name> <operator pos:start="723:49" pos:end="723:49">+</operator> <literal type="number" pos:start="723:51" pos:end="723:51">1</literal></expr>;</expr_stmt> <comment type="line" pos:start="723:54" pos:end="723:81">// +1; // +1 to get the size</comment>

            </block_content>}</block></for>

            <if_stmt pos:start="727:13" pos:end="735:45"><if pos:start="727:13" pos:end="733:13">if <condition pos:start="727:16" pos:end="727:107">(<expr pos:start="727:17" pos:end="727:106"><name pos:start="727:17" pos:end="727:33"><name pos:start="727:17" pos:end="727:17">s</name><operator pos:start="727:18" pos:end="727:19">-&gt;</operator><name pos:start="727:20" pos:end="727:33">threads_number</name></name> <operator pos:start="727:35" pos:end="727:35">&gt;</operator> <literal type="number" pos:start="727:37" pos:end="727:37">1</literal> <operator pos:start="727:39" pos:end="727:40">&amp;&amp;</operator> <operator pos:start="727:42" pos:end="727:42">(</operator><name pos:start="727:43" pos:end="727:66"><name pos:start="727:43" pos:end="727:43">s</name><operator pos:start="727:44" pos:end="727:45">-&gt;</operator><name pos:start="727:46" pos:end="727:47">ps</name><operator pos:start="727:48" pos:end="727:48">.</operator><name pos:start="727:49" pos:end="727:51">pps</name><operator pos:start="727:52" pos:end="727:53">-&gt;</operator><name pos:start="727:54" pos:end="727:66">num_tile_rows</name></name> <operator pos:start="727:68" pos:end="727:68">&gt;</operator> <literal type="number" pos:start="727:70" pos:end="727:70">1</literal> <operator pos:start="727:72" pos:end="727:73">||</operator> <name pos:start="727:75" pos:end="727:101"><name pos:start="727:75" pos:end="727:75">s</name><operator pos:start="727:76" pos:end="727:77">-&gt;</operator><name pos:start="727:78" pos:end="727:79">ps</name><operator pos:start="727:80" pos:end="727:80">.</operator><name pos:start="727:81" pos:end="727:83">pps</name><operator pos:start="727:84" pos:end="727:85">-&gt;</operator><name pos:start="727:86" pos:end="727:101">num_tile_columns</name></name> <operator pos:start="727:103" pos:end="727:103">&gt;</operator> <literal type="number" pos:start="727:105" pos:end="727:105">1</literal><operator pos:start="727:106" pos:end="727:106">)</operator></expr>)</condition> <block pos:start="727:109" pos:end="733:13">{<block_content pos:start="729:17" pos:end="731:38">

                <expr_stmt pos:start="729:17" pos:end="729:45"><expr pos:start="729:17" pos:end="729:44"><name pos:start="729:17" pos:end="729:40"><name pos:start="729:17" pos:end="729:17">s</name><operator pos:start="729:18" pos:end="729:19">-&gt;</operator><name pos:start="729:20" pos:end="729:40">enable_parallel_tiles</name></name> <operator pos:start="729:42" pos:end="729:42">=</operator> <literal type="number" pos:start="729:44" pos:end="729:44">0</literal></expr>;</expr_stmt> <comment type="line" pos:start="729:47" pos:end="729:92">// TODO: you can enable tiles in parallel here</comment>

                <expr_stmt pos:start="731:17" pos:end="731:38"><expr pos:start="731:17" pos:end="731:37"><name pos:start="731:17" pos:end="731:33"><name pos:start="731:17" pos:end="731:17">s</name><operator pos:start="731:18" pos:end="731:19">-&gt;</operator><name pos:start="731:20" pos:end="731:33">threads_number</name></name> <operator pos:start="731:35" pos:end="731:35">=</operator> <literal type="number" pos:start="731:37" pos:end="731:37">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="733:15" pos:end="735:45">else<block type="pseudo" pos:start="735:17" pos:end="735:45"><block_content pos:start="735:17" pos:end="735:45">

                <expr_stmt pos:start="735:17" pos:end="735:45"><expr pos:start="735:17" pos:end="735:44"><name pos:start="735:17" pos:end="735:40"><name pos:start="735:17" pos:end="735:17">s</name><operator pos:start="735:18" pos:end="735:19">-&gt;</operator><name pos:start="735:20" pos:end="735:40">enable_parallel_tiles</name></name> <operator pos:start="735:42" pos:end="735:42">=</operator> <literal type="number" pos:start="735:44" pos:end="735:44">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="737:11" pos:end="739:41">else<block type="pseudo" pos:start="739:13" pos:end="739:41"><block_content pos:start="739:13" pos:end="739:41">

            <expr_stmt pos:start="739:13" pos:end="739:41"><expr pos:start="739:13" pos:end="739:40"><name pos:start="739:13" pos:end="739:36"><name pos:start="739:13" pos:end="739:13">s</name><operator pos:start="739:14" pos:end="739:15">-&gt;</operator><name pos:start="739:16" pos:end="739:36">enable_parallel_tiles</name></name> <operator pos:start="739:38" pos:end="739:38">=</operator> <literal type="number" pos:start="739:40" pos:end="739:40">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="745:5" pos:end="761:5"><if pos:start="745:5" pos:end="761:5">if <condition pos:start="745:8" pos:end="745:55">(<expr pos:start="745:9" pos:end="745:54"><name pos:start="745:9" pos:end="745:54"><name pos:start="745:9" pos:end="745:9">s</name><operator pos:start="745:10" pos:end="745:11">-&gt;</operator><name pos:start="745:12" pos:end="745:13">ps</name><operator pos:start="745:14" pos:end="745:14">.</operator><name pos:start="745:15" pos:end="745:17">pps</name><operator pos:start="745:18" pos:end="745:19">-&gt;</operator><name pos:start="745:20" pos:end="745:54">slice_header_extension_present_flag</name></name></expr>)</condition> <block pos:start="745:57" pos:end="761:5">{<block_content pos:start="747:9" pos:end="759:29">

        <decl_stmt pos:start="747:9" pos:end="747:53"><decl pos:start="747:9" pos:end="747:52"><type pos:start="747:9" pos:end="747:20"><name pos:start="747:9" pos:end="747:16">unsigned</name> <name pos:start="747:18" pos:end="747:20">int</name></type> <name pos:start="747:22" pos:end="747:27">length</name> <init pos:start="747:29" pos:end="747:52">= <expr pos:start="747:31" pos:end="747:52"><call pos:start="747:31" pos:end="747:52"><name pos:start="747:31" pos:end="747:48">get_ue_golomb_long</name><argument_list pos:start="747:49" pos:end="747:52">(<argument pos:start="747:50" pos:end="747:51"><expr pos:start="747:50" pos:end="747:51"><name pos:start="747:50" pos:end="747:51">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="749:9" pos:end="755:9"><if pos:start="749:9" pos:end="755:9">if <condition pos:start="749:12" pos:end="749:43">(<expr pos:start="749:13" pos:end="749:42"><name pos:start="749:13" pos:end="749:18">length</name><operator pos:start="749:19" pos:end="749:19">*</operator><literal type="number" pos:start="749:20" pos:end="749:22">8LL</literal> <operator pos:start="749:24" pos:end="749:24">&gt;</operator> <call pos:start="749:26" pos:end="749:42"><name pos:start="749:26" pos:end="749:38">get_bits_left</name><argument_list pos:start="749:39" pos:end="749:42">(<argument pos:start="749:40" pos:end="749:41"><expr pos:start="749:40" pos:end="749:41"><name pos:start="749:40" pos:end="749:41">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="749:45" pos:end="755:9">{<block_content pos:start="751:13" pos:end="753:39">

            <expr_stmt pos:start="751:13" pos:end="751:91"><expr pos:start="751:13" pos:end="751:90"><call pos:start="751:13" pos:end="751:90"><name pos:start="751:13" pos:end="751:18">av_log</name><argument_list pos:start="751:19" pos:end="751:90">(<argument pos:start="751:20" pos:end="751:27"><expr pos:start="751:20" pos:end="751:27"><name pos:start="751:20" pos:end="751:27"><name pos:start="751:20" pos:end="751:20">s</name><operator pos:start="751:21" pos:end="751:22">-&gt;</operator><name pos:start="751:23" pos:end="751:27">avctx</name></name></expr></argument>, <argument pos:start="751:30" pos:end="751:41"><expr pos:start="751:30" pos:end="751:41"><name pos:start="751:30" pos:end="751:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="751:44" pos:end="751:89"><expr pos:start="751:44" pos:end="751:89"><literal type="string" pos:start="751:44" pos:end="751:89">"too many slice_header_extension_data_bytes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="753:13" pos:end="753:39">return <expr pos:start="753:20" pos:end="753:38"><name pos:start="753:20" pos:end="753:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <for pos:start="757:9" pos:end="759:29">for <control pos:start="757:13" pos:end="757:36">(<init pos:start="757:14" pos:end="757:19"><expr pos:start="757:14" pos:end="757:18"><name pos:start="757:14" pos:end="757:14">i</name> <operator pos:start="757:16" pos:end="757:16">=</operator> <literal type="number" pos:start="757:18" pos:end="757:18">0</literal></expr>;</init> <condition pos:start="757:21" pos:end="757:31"><expr pos:start="757:21" pos:end="757:30"><name pos:start="757:21" pos:end="757:21">i</name> <operator pos:start="757:23" pos:end="757:23">&lt;</operator> <name pos:start="757:25" pos:end="757:30">length</name></expr>;</condition> <incr pos:start="757:33" pos:end="757:35"><expr pos:start="757:33" pos:end="757:35"><name pos:start="757:33" pos:end="757:33">i</name><operator pos:start="757:34" pos:end="757:35">++</operator></expr></incr>)</control><block type="pseudo" pos:start="759:13" pos:end="759:29"><block_content pos:start="759:13" pos:end="759:29">

            <expr_stmt pos:start="759:13" pos:end="759:29"><expr pos:start="759:13" pos:end="759:28"><call pos:start="759:13" pos:end="759:28"><name pos:start="759:13" pos:end="759:21">skip_bits</name><argument_list pos:start="759:22" pos:end="759:28">(<argument pos:start="759:23" pos:end="759:24"><expr pos:start="759:23" pos:end="759:24"><name pos:start="759:23" pos:end="759:24">gb</name></expr></argument>, <argument pos:start="759:27" pos:end="759:27"><expr pos:start="759:27" pos:end="759:27"><literal type="number" pos:start="759:27" pos:end="759:27">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>  <comment type="line" pos:start="759:32" pos:end="759:66">// slice_header_extension_data_byte</comment>

    </block_content>}</block></if></if_stmt>



    <comment type="line" pos:start="765:5" pos:end="765:26">// Inferred parameters</comment>

    <expr_stmt pos:start="767:5" pos:end="767:77"><expr pos:start="767:5" pos:end="767:76"><name pos:start="767:5" pos:end="767:16"><name pos:start="767:5" pos:end="767:6">sh</name><operator pos:start="767:7" pos:end="767:8">-&gt;</operator><name pos:start="767:9" pos:end="767:16">slice_qp</name></name> <operator pos:start="767:18" pos:end="767:18">=</operator> <literal type="number" pos:start="767:20" pos:end="767:24">26U</literal> <operator pos:start="767:24" pos:end="767:24">+</operator> <name pos:start="767:26" pos:end="767:55"><name pos:start="767:26" pos:end="767:26">s</name><operator pos:start="767:27" pos:end="767:28">-&gt;</operator><name pos:start="767:29" pos:end="767:30">ps</name><operator pos:start="767:31" pos:end="767:31">.</operator><name pos:start="767:32" pos:end="767:34">pps</name><operator pos:start="767:35" pos:end="767:36">-&gt;</operator><name pos:start="767:37" pos:end="767:55">pic_init_qp_minus26</name></name> <operator pos:start="767:57" pos:end="767:57">+</operator> <name pos:start="767:59" pos:end="767:76"><name pos:start="767:59" pos:end="767:60">sh</name><operator pos:start="767:61" pos:end="767:62">-&gt;</operator><name pos:start="767:63" pos:end="767:76">slice_qp_delta</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="769:5" pos:end="785:5"><if pos:start="769:5" pos:end="785:5">if <condition pos:start="769:8" pos:end="771:48">(<expr pos:start="769:9" pos:end="771:47"><name pos:start="769:9" pos:end="769:20"><name pos:start="769:9" pos:end="769:10">sh</name><operator pos:start="769:11" pos:end="769:12">-&gt;</operator><name pos:start="769:13" pos:end="769:20">slice_qp</name></name> <operator pos:start="769:22" pos:end="769:22">&gt;</operator> <literal type="number" pos:start="769:24" pos:end="769:25">51</literal> <operator pos:start="769:27" pos:end="769:28">||</operator>

        <name pos:start="771:9" pos:end="771:20"><name pos:start="771:9" pos:end="771:10">sh</name><operator pos:start="771:11" pos:end="771:12">-&gt;</operator><name pos:start="771:13" pos:end="771:20">slice_qp</name></name> <operator pos:start="771:22" pos:end="771:22">&lt;</operator> <operator pos:start="771:24" pos:end="771:24">-</operator><name pos:start="771:25" pos:end="771:47"><name pos:start="771:25" pos:end="771:25">s</name><operator pos:start="771:26" pos:end="771:27">-&gt;</operator><name pos:start="771:28" pos:end="771:29">ps</name><operator pos:start="771:30" pos:end="771:30">.</operator><name pos:start="771:31" pos:end="771:33">sps</name><operator pos:start="771:34" pos:end="771:35">-&gt;</operator><name pos:start="771:36" pos:end="771:47">qp_bd_offset</name></name></expr>)</condition> <block pos:start="771:50" pos:end="785:5">{<block_content pos:start="773:9" pos:end="783:35">

        <expr_stmt pos:start="773:9" pos:end="781:41"><expr pos:start="773:9" pos:end="781:40"><call pos:start="773:9" pos:end="781:40"><name pos:start="773:9" pos:end="773:14">av_log</name><argument_list pos:start="773:15" pos:end="781:40">(<argument pos:start="773:16" pos:end="773:23"><expr pos:start="773:16" pos:end="773:23"><name pos:start="773:16" pos:end="773:23"><name pos:start="773:16" pos:end="773:16">s</name><operator pos:start="773:17" pos:end="773:18">-&gt;</operator><name pos:start="773:19" pos:end="773:23">avctx</name></name></expr></argument>, <argument pos:start="773:26" pos:end="773:37"><expr pos:start="773:26" pos:end="773:37"><name pos:start="773:26" pos:end="773:37">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="775:16" pos:end="777:28"><expr pos:start="775:16" pos:end="777:28"><literal type="string" pos:start="775:16" pos:end="775:60">"The slice_qp %d is outside the valid range "</literal>

               <literal type="string" pos:start="777:16" pos:end="777:28">"[%d, 51].\n"</literal></expr></argument>,

               <argument pos:start="779:16" pos:end="779:27"><expr pos:start="779:16" pos:end="779:27"><name pos:start="779:16" pos:end="779:27"><name pos:start="779:16" pos:end="779:17">sh</name><operator pos:start="779:18" pos:end="779:19">-&gt;</operator><name pos:start="779:20" pos:end="779:27">slice_qp</name></name></expr></argument>,

               <argument pos:start="781:16" pos:end="781:39"><expr pos:start="781:16" pos:end="781:39"><operator pos:start="781:16" pos:end="781:16">-</operator><name pos:start="781:17" pos:end="781:39"><name pos:start="781:17" pos:end="781:17">s</name><operator pos:start="781:18" pos:end="781:19">-&gt;</operator><name pos:start="781:20" pos:end="781:21">ps</name><operator pos:start="781:22" pos:end="781:22">.</operator><name pos:start="781:23" pos:end="781:25">sps</name><operator pos:start="781:26" pos:end="781:27">-&gt;</operator><name pos:start="781:28" pos:end="781:39">qp_bd_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="783:9" pos:end="783:35">return <expr pos:start="783:16" pos:end="783:34"><name pos:start="783:16" pos:end="783:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="789:5" pos:end="789:51"><expr pos:start="789:5" pos:end="789:50"><name pos:start="789:5" pos:end="789:25"><name pos:start="789:5" pos:end="789:6">sh</name><operator pos:start="789:7" pos:end="789:8">-&gt;</operator><name pos:start="789:9" pos:end="789:25">slice_ctb_addr_rs</name></name> <operator pos:start="789:27" pos:end="789:27">=</operator> <name pos:start="789:29" pos:end="789:50"><name pos:start="789:29" pos:end="789:30">sh</name><operator pos:start="789:31" pos:end="789:32">-&gt;</operator><name pos:start="789:33" pos:end="789:50">slice_segment_addr</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="793:5" pos:end="799:5"><if pos:start="793:5" pos:end="799:5">if <condition pos:start="793:8" pos:end="793:71">(<expr pos:start="793:9" pos:end="793:70"><operator pos:start="793:9" pos:end="793:9">!</operator><name pos:start="793:10" pos:end="793:32"><name pos:start="793:10" pos:end="793:10">s</name><operator pos:start="793:11" pos:end="793:12">-&gt;</operator><name pos:start="793:13" pos:end="793:14">sh</name><operator pos:start="793:15" pos:end="793:15">.</operator><name pos:start="793:16" pos:end="793:32">slice_ctb_addr_rs</name></name> <operator pos:start="793:34" pos:end="793:35">&amp;&amp;</operator> <name pos:start="793:37" pos:end="793:70"><name pos:start="793:37" pos:end="793:37">s</name><operator pos:start="793:38" pos:end="793:39">-&gt;</operator><name pos:start="793:40" pos:end="793:41">sh</name><operator pos:start="793:42" pos:end="793:42">.</operator><name pos:start="793:43" pos:end="793:70">dependent_slice_segment_flag</name></name></expr>)</condition> <block pos:start="793:73" pos:end="799:5">{<block_content pos:start="795:9" pos:end="797:35">

        <expr_stmt pos:start="795:9" pos:end="795:70"><expr pos:start="795:9" pos:end="795:69"><call pos:start="795:9" pos:end="795:69"><name pos:start="795:9" pos:end="795:14">av_log</name><argument_list pos:start="795:15" pos:end="795:69">(<argument pos:start="795:16" pos:end="795:23"><expr pos:start="795:16" pos:end="795:23"><name pos:start="795:16" pos:end="795:23"><name pos:start="795:16" pos:end="795:16">s</name><operator pos:start="795:17" pos:end="795:18">-&gt;</operator><name pos:start="795:19" pos:end="795:23">avctx</name></name></expr></argument>, <argument pos:start="795:26" pos:end="795:37"><expr pos:start="795:26" pos:end="795:37"><name pos:start="795:26" pos:end="795:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="795:40" pos:end="795:68"><expr pos:start="795:40" pos:end="795:68"><literal type="string" pos:start="795:40" pos:end="795:68">"Impossible slice segment.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="797:9" pos:end="797:35">return <expr pos:start="797:16" pos:end="797:34"><name pos:start="797:16" pos:end="797:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="803:5" pos:end="811:5"><if pos:start="803:5" pos:end="811:5">if <condition pos:start="803:8" pos:end="803:30">(<expr pos:start="803:9" pos:end="803:29"><call pos:start="803:9" pos:end="803:25"><name pos:start="803:9" pos:end="803:21">get_bits_left</name><argument_list pos:start="803:22" pos:end="803:25">(<argument pos:start="803:23" pos:end="803:24"><expr pos:start="803:23" pos:end="803:24"><name pos:start="803:23" pos:end="803:24">gb</name></expr></argument>)</argument_list></call> <operator pos:start="803:27" pos:end="803:27">&lt;</operator> <literal type="number" pos:start="803:29" pos:end="803:29">0</literal></expr>)</condition> <block pos:start="803:32" pos:end="811:5">{<block_content pos:start="805:9" pos:end="809:35">

        <expr_stmt pos:start="805:9" pos:end="807:73"><expr pos:start="805:9" pos:end="807:72"><call pos:start="805:9" pos:end="807:72"><name pos:start="805:9" pos:end="805:14">av_log</name><argument_list pos:start="805:15" pos:end="807:72">(<argument pos:start="805:16" pos:end="805:23"><expr pos:start="805:16" pos:end="805:23"><name pos:start="805:16" pos:end="805:23"><name pos:start="805:16" pos:end="805:16">s</name><operator pos:start="805:17" pos:end="805:18">-&gt;</operator><name pos:start="805:19" pos:end="805:23">avctx</name></name></expr></argument>, <argument pos:start="805:26" pos:end="805:37"><expr pos:start="805:26" pos:end="805:37"><name pos:start="805:26" pos:end="805:37">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="807:16" pos:end="807:51"><expr pos:start="807:16" pos:end="807:51"><literal type="string" pos:start="807:16" pos:end="807:51">"Overread slice header by %d bits\n"</literal></expr></argument>, <argument pos:start="807:54" pos:end="807:71"><expr pos:start="807:54" pos:end="807:71"><operator pos:start="807:54" pos:end="807:54">-</operator><call pos:start="807:55" pos:end="807:71"><name pos:start="807:55" pos:end="807:67">get_bits_left</name><argument_list pos:start="807:68" pos:end="807:71">(<argument pos:start="807:69" pos:end="807:70"><expr pos:start="807:69" pos:end="807:70"><name pos:start="807:69" pos:end="807:70">gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="809:9" pos:end="809:35">return <expr pos:start="809:16" pos:end="809:34"><name pos:start="809:16" pos:end="809:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="815:5" pos:end="815:68"><expr pos:start="815:5" pos:end="815:67"><name pos:start="815:5" pos:end="815:29"><name pos:start="815:5" pos:end="815:5">s</name><operator pos:start="815:6" pos:end="815:7">-&gt;</operator><name pos:start="815:8" pos:end="815:13">HEVClc</name><operator pos:start="815:14" pos:end="815:15">-&gt;</operator><name pos:start="815:16" pos:end="815:29">first_qp_group</name></name> <operator pos:start="815:31" pos:end="815:31">=</operator> <operator pos:start="815:33" pos:end="815:33">!</operator><name pos:start="815:34" pos:end="815:67"><name pos:start="815:34" pos:end="815:34">s</name><operator pos:start="815:35" pos:end="815:36">-&gt;</operator><name pos:start="815:37" pos:end="815:38">sh</name><operator pos:start="815:39" pos:end="815:39">.</operator><name pos:start="815:40" pos:end="815:67">dependent_slice_segment_flag</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="819:5" pos:end="821:41"><if pos:start="819:5" pos:end="821:41">if <condition pos:start="819:8" pos:end="819:45">(<expr pos:start="819:9" pos:end="819:44"><operator pos:start="819:9" pos:end="819:9">!</operator><name pos:start="819:10" pos:end="819:44"><name pos:start="819:10" pos:end="819:10">s</name><operator pos:start="819:11" pos:end="819:12">-&gt;</operator><name pos:start="819:13" pos:end="819:14">ps</name><operator pos:start="819:15" pos:end="819:15">.</operator><name pos:start="819:16" pos:end="819:18">pps</name><operator pos:start="819:19" pos:end="819:20">-&gt;</operator><name pos:start="819:21" pos:end="819:44">cu_qp_delta_enabled_flag</name></name></expr>)</condition><block type="pseudo" pos:start="821:9" pos:end="821:41"><block_content pos:start="821:9" pos:end="821:41">

        <expr_stmt pos:start="821:9" pos:end="821:41"><expr pos:start="821:9" pos:end="821:40"><name pos:start="821:9" pos:end="821:23"><name pos:start="821:9" pos:end="821:9">s</name><operator pos:start="821:10" pos:end="821:11">-&gt;</operator><name pos:start="821:12" pos:end="821:17">HEVClc</name><operator pos:start="821:18" pos:end="821:19">-&gt;</operator><name pos:start="821:20" pos:end="821:23">qp_y</name></name> <operator pos:start="821:25" pos:end="821:25">=</operator> <name pos:start="821:27" pos:end="821:40"><name pos:start="821:27" pos:end="821:27">s</name><operator pos:start="821:28" pos:end="821:29">-&gt;</operator><name pos:start="821:30" pos:end="821:31">sh</name><operator pos:start="821:32" pos:end="821:32">.</operator><name pos:start="821:33" pos:end="821:40">slice_qp</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="825:5" pos:end="825:29"><expr pos:start="825:5" pos:end="825:28"><name pos:start="825:5" pos:end="825:24"><name pos:start="825:5" pos:end="825:5">s</name><operator pos:start="825:6" pos:end="825:7">-&gt;</operator><name pos:start="825:8" pos:end="825:24">slice_initialized</name></name> <operator pos:start="825:26" pos:end="825:26">=</operator> <literal type="number" pos:start="825:28" pos:end="825:28">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="827:5" pos:end="827:38"><expr pos:start="827:5" pos:end="827:37"><name pos:start="827:5" pos:end="827:33"><name pos:start="827:5" pos:end="827:5">s</name><operator pos:start="827:6" pos:end="827:7">-&gt;</operator><name pos:start="827:8" pos:end="827:13">HEVClc</name><operator pos:start="827:14" pos:end="827:15">-&gt;</operator><name pos:start="827:16" pos:end="827:17">tu</name><operator pos:start="827:18" pos:end="827:18">.</operator><name pos:start="827:19" pos:end="827:33">cu_qp_offset_cb</name></name> <operator pos:start="827:35" pos:end="827:35">=</operator> <literal type="number" pos:start="827:37" pos:end="827:37">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="829:5" pos:end="829:38"><expr pos:start="829:5" pos:end="829:37"><name pos:start="829:5" pos:end="829:33"><name pos:start="829:5" pos:end="829:5">s</name><operator pos:start="829:6" pos:end="829:7">-&gt;</operator><name pos:start="829:8" pos:end="829:13">HEVClc</name><operator pos:start="829:14" pos:end="829:15">-&gt;</operator><name pos:start="829:16" pos:end="829:17">tu</name><operator pos:start="829:18" pos:end="829:18">.</operator><name pos:start="829:19" pos:end="829:33">cu_qp_offset_cr</name></name> <operator pos:start="829:35" pos:end="829:35">=</operator> <literal type="number" pos:start="829:37" pos:end="829:37">0</literal></expr>;</expr_stmt>



    <return pos:start="833:5" pos:end="833:13">return <expr pos:start="833:12" pos:end="833:12"><literal type="number" pos:start="833:12" pos:end="833:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
