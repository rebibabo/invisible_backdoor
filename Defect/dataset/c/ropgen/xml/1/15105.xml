<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/15105.c" pos:tabs="8"><function pos:start="1:1" pos:end="67:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:32">qtest_qmpv_discard_response</name><parameter_list pos:start="1:33" pos:end="1:76">(<parameter pos:start="1:34" pos:end="1:46"><decl pos:start="1:34" pos:end="1:46"><type pos:start="1:34" pos:end="1:46"><name pos:start="1:34" pos:end="1:43">QTestState</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:46">s</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:63"><decl pos:start="1:49" pos:end="1:63"><type pos:start="1:49" pos:end="1:63"><specifier pos:start="1:49" pos:end="1:53">const</specifier> <name pos:start="1:55" pos:end="1:58">char</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:63">fmt</name></decl></parameter>, <parameter pos:start="1:66" pos:end="1:75"><decl pos:start="1:66" pos:end="1:75"><type pos:start="1:66" pos:end="1:75"><name pos:start="1:66" pos:end="1:72">va_list</name></type> <name pos:start="1:74" pos:end="1:75">ap</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="67:1">{<block_content pos:start="5:5" pos:end="65:5">

    <decl_stmt pos:start="5:5" pos:end="5:27"><decl pos:start="5:5" pos:end="5:26"><type pos:start="5:5" pos:end="5:8"><name pos:start="5:5" pos:end="5:8">bool</name></type> <name pos:start="5:10" pos:end="5:18">has_reply</name> <init pos:start="5:20" pos:end="5:26">= <expr pos:start="5:22" pos:end="5:26"><name pos:start="5:22" pos:end="5:26">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:15">nesting</name> <init pos:start="7:17" pos:end="7:19">= <expr pos:start="7:19" pos:end="7:19"><literal type="number" pos:start="7:19" pos:end="7:19">0</literal></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="11:26">/* Send QMP request */</comment>

    <expr_stmt pos:start="13:5" pos:end="13:37"><expr pos:start="13:5" pos:end="13:36"><call pos:start="13:5" pos:end="13:36"><name pos:start="13:5" pos:end="13:16">socket_sendf</name><argument_list pos:start="13:17" pos:end="13:36">(<argument pos:start="13:18" pos:end="13:26"><expr pos:start="13:18" pos:end="13:26"><name pos:start="13:18" pos:end="13:26"><name pos:start="13:18" pos:end="13:18">s</name><operator pos:start="13:19" pos:end="13:20">-&gt;</operator><name pos:start="13:21" pos:end="13:26">qmp_fd</name></name></expr></argument>, <argument pos:start="13:29" pos:end="13:31"><expr pos:start="13:29" pos:end="13:31"><name pos:start="13:29" pos:end="13:31">fmt</name></expr></argument>, <argument pos:start="13:34" pos:end="13:35"><expr pos:start="13:34" pos:end="13:35"><name pos:start="13:34" pos:end="13:35">ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="17:5" pos:end="17:23">/* Receive reply */</comment>

    <while pos:start="19:5" pos:end="65:5">while <condition pos:start="19:11" pos:end="19:37">(<expr pos:start="19:12" pos:end="19:36"><operator pos:start="19:12" pos:end="19:12">!</operator><name pos:start="19:13" pos:end="19:21">has_reply</name> <operator pos:start="19:23" pos:end="19:24">||</operator> <name pos:start="19:26" pos:end="19:32">nesting</name> <operator pos:start="19:34" pos:end="19:34">&gt;</operator> <literal type="number" pos:start="19:36" pos:end="19:36">0</literal></expr>)</condition> <block pos:start="19:39" pos:end="65:5">{<block_content pos:start="21:9" pos:end="63:9">

        <decl_stmt pos:start="21:9" pos:end="21:20"><decl pos:start="21:9" pos:end="21:19"><type pos:start="21:9" pos:end="21:15"><name pos:start="21:9" pos:end="21:15">ssize_t</name></type> <name pos:start="21:17" pos:end="21:19">len</name></decl>;</decl_stmt>

        <decl_stmt pos:start="23:9" pos:end="23:15"><decl pos:start="23:9" pos:end="23:14"><type pos:start="23:9" pos:end="23:12"><name pos:start="23:9" pos:end="23:12">char</name></type> <name pos:start="23:14" pos:end="23:14">c</name></decl>;</decl_stmt>



        <expr_stmt pos:start="27:9" pos:end="27:37"><expr pos:start="27:9" pos:end="27:36"><name pos:start="27:9" pos:end="27:11">len</name> <operator pos:start="27:13" pos:end="27:13">=</operator> <call pos:start="27:15" pos:end="27:36"><name pos:start="27:15" pos:end="27:18">read</name><argument_list pos:start="27:19" pos:end="27:36">(<argument pos:start="27:20" pos:end="27:28"><expr pos:start="27:20" pos:end="27:28"><name pos:start="27:20" pos:end="27:28"><name pos:start="27:20" pos:end="27:20">s</name><operator pos:start="27:21" pos:end="27:22">-&gt;</operator><name pos:start="27:23" pos:end="27:28">qmp_fd</name></name></expr></argument>, <argument pos:start="27:31" pos:end="27:32"><expr pos:start="27:31" pos:end="27:32"><operator pos:start="27:31" pos:end="27:31">&amp;</operator><name pos:start="27:32" pos:end="27:32">c</name></expr></argument>, <argument pos:start="27:35" pos:end="27:35"><expr pos:start="27:35" pos:end="27:35"><literal type="number" pos:start="27:35" pos:end="27:35">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="29:9" pos:end="33:9"><if pos:start="29:9" pos:end="33:9">if <condition pos:start="29:12" pos:end="29:40">(<expr pos:start="29:13" pos:end="29:39"><name pos:start="29:13" pos:end="29:15">len</name> <operator pos:start="29:17" pos:end="29:18">==</operator> <operator pos:start="29:20" pos:end="29:20">-</operator><literal type="number" pos:start="29:21" pos:end="29:21">1</literal> <operator pos:start="29:23" pos:end="29:24">&amp;&amp;</operator> <name pos:start="29:26" pos:end="29:30">errno</name> <operator pos:start="29:32" pos:end="29:33">==</operator> <name pos:start="29:35" pos:end="29:39">EINTR</name></expr>)</condition> <block pos:start="29:42" pos:end="33:9">{<block_content pos:start="31:13" pos:end="31:21">

            <continue pos:start="31:13" pos:end="31:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="37:9" pos:end="43:9"><if pos:start="37:9" pos:end="43:9">if <condition pos:start="37:12" pos:end="37:34">(<expr pos:start="37:13" pos:end="37:33"><name pos:start="37:13" pos:end="37:15">len</name> <operator pos:start="37:17" pos:end="37:18">==</operator> <operator pos:start="37:20" pos:end="37:20">-</operator><literal type="number" pos:start="37:21" pos:end="37:21">1</literal> <operator pos:start="37:23" pos:end="37:24">||</operator> <name pos:start="37:26" pos:end="37:28">len</name> <operator pos:start="37:30" pos:end="37:31">==</operator> <literal type="number" pos:start="37:33" pos:end="37:33">0</literal></expr>)</condition> <block pos:start="37:36" pos:end="43:9">{<block_content pos:start="39:13" pos:end="41:20">

            <expr_stmt pos:start="39:13" pos:end="39:45"><expr pos:start="39:13" pos:end="39:44"><call pos:start="39:13" pos:end="39:44"><name pos:start="39:13" pos:end="39:19">fprintf</name><argument_list pos:start="39:20" pos:end="39:44">(<argument pos:start="39:21" pos:end="39:26"><expr pos:start="39:21" pos:end="39:26"><name pos:start="39:21" pos:end="39:26">stderr</name></expr></argument>, <argument pos:start="39:29" pos:end="39:43"><expr pos:start="39:29" pos:end="39:43"><literal type="string" pos:start="39:29" pos:end="39:43">"Broken pipe\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:20"><expr pos:start="41:13" pos:end="41:19"><call pos:start="41:13" pos:end="41:19"><name pos:start="41:13" pos:end="41:16">exit</name><argument_list pos:start="41:17" pos:end="41:19">(<argument pos:start="41:18" pos:end="41:18"><expr pos:start="41:18" pos:end="41:18"><literal type="number" pos:start="41:18" pos:end="41:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <switch pos:start="47:9" pos:end="63:9">switch <condition pos:start="47:16" pos:end="47:18">(<expr pos:start="47:17" pos:end="47:17"><name pos:start="47:17" pos:end="47:17">c</name></expr>)</condition> <block pos:start="47:20" pos:end="63:9">{<block_content pos:start="49:9" pos:end="61:18">

        <case pos:start="49:9" pos:end="49:17">case <expr pos:start="49:14" pos:end="49:16"><literal type="char" pos:start="49:14" pos:end="49:16">'{'</literal></expr>:</case>

            <expr_stmt pos:start="51:13" pos:end="51:22"><expr pos:start="51:13" pos:end="51:21"><name pos:start="51:13" pos:end="51:19">nesting</name><operator pos:start="51:20" pos:end="51:21">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:29"><expr pos:start="53:13" pos:end="53:28"><name pos:start="53:13" pos:end="53:21">has_reply</name> <operator pos:start="53:23" pos:end="53:23">=</operator> <name pos:start="53:25" pos:end="53:28">true</name></expr>;</expr_stmt>

            <break pos:start="55:13" pos:end="55:18">break;</break>

        <case pos:start="57:9" pos:end="57:17">case <expr pos:start="57:14" pos:end="57:16"><literal type="char" pos:start="57:14" pos:end="57:16">'}'</literal></expr>:</case>

            <expr_stmt pos:start="59:13" pos:end="59:22"><expr pos:start="59:13" pos:end="59:21"><name pos:start="59:13" pos:end="59:19">nesting</name><operator pos:start="59:20" pos:end="59:21">--</operator></expr>;</expr_stmt>

            <break pos:start="61:13" pos:end="61:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></while>

</block_content>}</block></function>
</unit>
