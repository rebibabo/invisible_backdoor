<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13907.c" pos:tabs="8"><function pos:start="1:1" pos:end="1059:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:17">ide_exec_cmd</name><parameter_list pos:start="1:18" pos:end="1:44">(<parameter pos:start="1:19" pos:end="1:29"><decl pos:start="1:19" pos:end="1:29"><type pos:start="1:19" pos:end="1:29"><name pos:start="1:19" pos:end="1:24">IDEBus</name> <modifier pos:start="1:26" pos:end="1:26">*</modifier></type><name pos:start="1:27" pos:end="1:29">bus</name></decl></parameter>, <parameter pos:start="1:32" pos:end="1:43"><decl pos:start="1:32" pos:end="1:43"><type pos:start="1:32" pos:end="1:43"><name pos:start="1:32" pos:end="1:39">uint32_t</name></type> <name pos:start="1:41" pos:end="1:43">val</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="1059:1">{<block_content pos:start="5:5" pos:end="1057:5">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">uint16_t</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:27">identify_data</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">IDEState</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:15">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">n</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="16:0"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:13">lba48</name> <init pos:start="11:15" pos:end="11:17">= <expr pos:start="11:17" pos:end="11:17"><literal type="number" pos:start="11:17" pos:end="11:17">0</literal></expr></init></decl>;</decl_stmt>



<cpp:if pos:start="15:1" pos:end="15:22">#<cpp:directive pos:start="15:2" pos:end="15:3">if</cpp:directive> <expr pos:start="15:5" pos:end="15:22"><call pos:start="15:5" pos:end="15:22"><name pos:start="15:5" pos:end="15:11">defined</name><argument_list pos:start="15:12" pos:end="15:22">(<argument pos:start="15:13" pos:end="15:21"><expr pos:start="15:13" pos:end="15:21"><name pos:start="15:13" pos:end="15:21">DEBUG_IDE</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="17:5" pos:end="20:0"><expr pos:start="17:5" pos:end="17:34"><call pos:start="17:5" pos:end="17:34"><name pos:start="17:5" pos:end="17:10">printf</name><argument_list pos:start="17:11" pos:end="17:34">(<argument pos:start="17:12" pos:end="17:28"><expr pos:start="17:12" pos:end="17:28"><literal type="string" pos:start="17:12" pos:end="17:28">"ide: CMD=%02x\n"</literal></expr></argument>, <argument pos:start="17:31" pos:end="17:33"><expr pos:start="17:31" pos:end="17:33"><name pos:start="17:31" pos:end="17:33">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="19:1" pos:end="19:6">#<cpp:directive pos:start="19:2" pos:end="19:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="21:5" pos:end="21:30"><expr pos:start="21:5" pos:end="21:29"><name pos:start="21:5" pos:end="21:5">s</name> <operator pos:start="21:7" pos:end="21:7">=</operator> <call pos:start="21:9" pos:end="21:29"><name pos:start="21:9" pos:end="21:24">idebus_active_if</name><argument_list pos:start="21:25" pos:end="21:29">(<argument pos:start="21:26" pos:end="21:28"><expr pos:start="21:26" pos:end="21:28"><name pos:start="21:26" pos:end="21:28">bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="23:5" pos:end="23:47">/* ignore commands to non existent slave */</comment>

    <if_stmt pos:start="25:5" pos:end="27:15"><if pos:start="25:5" pos:end="27:15">if <condition pos:start="25:8" pos:end="25:32">(<expr pos:start="25:9" pos:end="25:31"><name pos:start="25:9" pos:end="25:9">s</name> <operator pos:start="25:11" pos:end="25:12">!=</operator> <name pos:start="25:14" pos:end="25:21"><name pos:start="25:14" pos:end="25:16">bus</name><operator pos:start="25:17" pos:end="25:18">-&gt;</operator><name pos:start="25:19" pos:end="25:21">ifs</name></name> <operator pos:start="25:23" pos:end="25:24">&amp;&amp;</operator> <operator pos:start="25:26" pos:end="25:26">!</operator><name pos:start="25:27" pos:end="25:31"><name pos:start="25:27" pos:end="25:27">s</name><operator pos:start="25:28" pos:end="25:29">-&gt;</operator><name pos:start="25:30" pos:end="25:31">bs</name></name></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:15"><block_content pos:start="27:9" pos:end="27:15">

        <return pos:start="27:9" pos:end="27:15">return;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:67">/* Only DEVICE RESET is allowed while BSY or/and DRQ are set */</comment>

    <if_stmt pos:start="33:5" pos:end="35:15"><if pos:start="33:5" pos:end="35:15">if <condition pos:start="33:8" pos:end="33:70">(<expr pos:start="33:9" pos:end="33:69"><operator pos:start="33:9" pos:end="33:9">(</operator><name pos:start="33:10" pos:end="33:18"><name pos:start="33:10" pos:end="33:10">s</name><operator pos:start="33:11" pos:end="33:12">-&gt;</operator><name pos:start="33:13" pos:end="33:18">status</name></name> <operator pos:start="33:20" pos:end="33:20">&amp;</operator> <operator pos:start="33:22" pos:end="33:22">(</operator><name pos:start="33:23" pos:end="33:31">BUSY_STAT</name><operator pos:start="33:32" pos:end="33:32">|</operator><name pos:start="33:33" pos:end="33:40">DRQ_STAT</name><operator pos:start="33:41" pos:end="33:41">)</operator><operator pos:start="33:42" pos:end="33:42">)</operator> <operator pos:start="33:44" pos:end="33:45">&amp;&amp;</operator> <name pos:start="33:47" pos:end="33:49">val</name> <operator pos:start="33:51" pos:end="33:52">!=</operator> <name pos:start="33:54" pos:end="33:69">WIN_DEVICE_RESET</name></expr>)</condition><block type="pseudo" pos:start="35:9" pos:end="35:15"><block_content pos:start="35:9" pos:end="35:15">

        <return pos:start="35:9" pos:end="35:15">return;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="39:5" pos:end="43:5"><if pos:start="39:5" pos:end="43:5">if <condition pos:start="39:8" pos:end="39:35">(<expr pos:start="39:9" pos:end="39:34"><operator pos:start="39:9" pos:end="39:9">!</operator><call pos:start="39:10" pos:end="39:34"><name pos:start="39:10" pos:end="39:26">ide_cmd_permitted</name><argument_list pos:start="39:27" pos:end="39:34">(<argument pos:start="39:28" pos:end="39:28"><expr pos:start="39:28" pos:end="39:28"><name pos:start="39:28" pos:end="39:28">s</name></expr></argument>, <argument pos:start="39:31" pos:end="39:33"><expr pos:start="39:31" pos:end="39:33"><name pos:start="39:31" pos:end="39:33">val</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="39:37" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:23">

        <goto pos:start="41:9" pos:end="41:23">goto <name pos:start="41:14" pos:end="41:22">abort_cmd</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="47:5" pos:end="85:5"><if pos:start="47:5" pos:end="85:5">if <condition pos:start="47:8" pos:end="47:43">(<expr pos:start="47:9" pos:end="47:42"><name pos:start="47:9" pos:end="47:26"><name pos:start="47:9" pos:end="47:21">ide_cmd_table</name><index pos:start="47:22" pos:end="47:26">[<expr pos:start="47:23" pos:end="47:25"><name pos:start="47:23" pos:end="47:25">val</name></expr>]</index></name><operator pos:start="47:27" pos:end="47:27">.</operator><name pos:start="47:28" pos:end="47:34">handler</name> <operator pos:start="47:36" pos:end="47:37">!=</operator> <name pos:start="47:39" pos:end="47:42">NULL</name></expr>)</condition> <block pos:start="47:45" pos:end="85:5">{<block_content pos:start="49:9" pos:end="83:15">

        <decl_stmt pos:start="49:9" pos:end="49:22"><decl pos:start="49:9" pos:end="49:21"><type pos:start="49:9" pos:end="49:12"><name pos:start="49:9" pos:end="49:12">bool</name></type> <name pos:start="49:14" pos:end="49:21">complete</name></decl>;</decl_stmt>



        <expr_stmt pos:start="53:9" pos:end="53:43"><expr pos:start="53:9" pos:end="53:42"><name pos:start="53:9" pos:end="53:17"><name pos:start="53:9" pos:end="53:9">s</name><operator pos:start="53:10" pos:end="53:11">-&gt;</operator><name pos:start="53:12" pos:end="53:17">status</name></name> <operator pos:start="53:19" pos:end="53:19">=</operator> <name pos:start="53:21" pos:end="53:30">READY_STAT</name> <operator pos:start="53:32" pos:end="53:32">|</operator> <name pos:start="53:34" pos:end="53:42">BUSY_STAT</name></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:21"><expr pos:start="55:9" pos:end="55:20"><name pos:start="55:9" pos:end="55:16"><name pos:start="55:9" pos:end="55:9">s</name><operator pos:start="55:10" pos:end="55:11">-&gt;</operator><name pos:start="55:12" pos:end="55:16">error</name></name> <operator pos:start="55:18" pos:end="55:18">=</operator> <literal type="number" pos:start="55:20" pos:end="55:20">0</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="59:9" pos:end="59:54"><expr pos:start="59:9" pos:end="59:53"><name pos:start="59:9" pos:end="59:16">complete</name> <operator pos:start="59:18" pos:end="59:18">=</operator> <name pos:start="59:20" pos:end="59:37"><name pos:start="59:20" pos:end="59:32">ide_cmd_table</name><index pos:start="59:33" pos:end="59:37">[<expr pos:start="59:34" pos:end="59:36"><name pos:start="59:34" pos:end="59:36">val</name></expr>]</index></name><operator pos:start="59:38" pos:end="59:38">.</operator><call pos:start="59:39" pos:end="59:53"><name pos:start="59:39" pos:end="59:45">handler</name><argument_list pos:start="59:46" pos:end="59:53">(<argument pos:start="59:47" pos:end="59:47"><expr pos:start="59:47" pos:end="59:47"><name pos:start="59:47" pos:end="59:47">s</name></expr></argument>, <argument pos:start="59:50" pos:end="59:52"><expr pos:start="59:50" pos:end="59:52"><name pos:start="59:50" pos:end="59:52">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="61:9" pos:end="79:9"><if pos:start="61:9" pos:end="79:9">if <condition pos:start="61:12" pos:end="61:21">(<expr pos:start="61:13" pos:end="61:20"><name pos:start="61:13" pos:end="61:20">complete</name></expr>)</condition> <block pos:start="61:23" pos:end="79:9">{<block_content pos:start="63:13" pos:end="77:32">

            <expr_stmt pos:start="63:13" pos:end="63:36"><expr pos:start="63:13" pos:end="63:35"><name pos:start="63:13" pos:end="63:21"><name pos:start="63:13" pos:end="63:13">s</name><operator pos:start="63:14" pos:end="63:15">-&gt;</operator><name pos:start="63:16" pos:end="63:21">status</name></name> <operator pos:start="63:23" pos:end="63:24">&amp;=</operator> <operator pos:start="63:26" pos:end="63:26">~</operator><name pos:start="63:27" pos:end="63:35">BUSY_STAT</name></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:59"><expr pos:start="65:13" pos:end="65:58"><call pos:start="65:13" pos:end="65:58"><name pos:start="65:13" pos:end="65:18">assert</name><argument_list pos:start="65:19" pos:end="65:58">(<argument pos:start="65:20" pos:end="65:57"><expr pos:start="65:20" pos:end="65:57"><operator pos:start="65:20" pos:end="65:20">!</operator><operator pos:start="65:21" pos:end="65:21">!</operator><name pos:start="65:22" pos:end="65:29"><name pos:start="65:22" pos:end="65:22">s</name><operator pos:start="65:23" pos:end="65:24">-&gt;</operator><name pos:start="65:25" pos:end="65:29">error</name></name> <operator pos:start="65:31" pos:end="65:32">==</operator> <operator pos:start="65:34" pos:end="65:34">!</operator><operator pos:start="65:35" pos:end="65:35">!</operator><operator pos:start="65:36" pos:end="65:36">(</operator><name pos:start="65:37" pos:end="65:45"><name pos:start="65:37" pos:end="65:37">s</name><operator pos:start="65:38" pos:end="65:39">-&gt;</operator><name pos:start="65:40" pos:end="65:45">status</name></name> <operator pos:start="65:47" pos:end="65:47">&amp;</operator> <name pos:start="65:49" pos:end="65:56">ERR_STAT</name><operator pos:start="65:57" pos:end="65:57">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="69:13" pos:end="73:13"><if pos:start="69:13" pos:end="73:13">if <condition pos:start="69:16" pos:end="69:66">(<expr pos:start="69:17" pos:end="69:65"><operator pos:start="69:17" pos:end="69:17">(</operator><name pos:start="69:18" pos:end="69:35"><name pos:start="69:18" pos:end="69:30">ide_cmd_table</name><index pos:start="69:31" pos:end="69:35">[<expr pos:start="69:32" pos:end="69:34"><name pos:start="69:32" pos:end="69:34">val</name></expr>]</index></name><operator pos:start="69:36" pos:end="69:36">.</operator><name pos:start="69:37" pos:end="69:41">flags</name> <operator pos:start="69:43" pos:end="69:43">&amp;</operator> <name pos:start="69:45" pos:end="69:51">SET_DSC</name><operator pos:start="69:52" pos:end="69:52">)</operator> <operator pos:start="69:54" pos:end="69:55">&amp;&amp;</operator> <operator pos:start="69:57" pos:end="69:57">!</operator><name pos:start="69:58" pos:end="69:65"><name pos:start="69:58" pos:end="69:58">s</name><operator pos:start="69:59" pos:end="69:60">-&gt;</operator><name pos:start="69:61" pos:end="69:65">error</name></name></expr>)</condition> <block pos:start="69:68" pos:end="73:13">{<block_content pos:start="71:17" pos:end="71:39">

                <expr_stmt pos:start="71:17" pos:end="71:39"><expr pos:start="71:17" pos:end="71:38"><name pos:start="71:17" pos:end="71:25"><name pos:start="71:17" pos:end="71:17">s</name><operator pos:start="71:18" pos:end="71:19">-&gt;</operator><name pos:start="71:20" pos:end="71:25">status</name></name> <operator pos:start="71:27" pos:end="71:28">|=</operator> <name pos:start="71:30" pos:end="71:38">SEEK_STAT</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="77:13" pos:end="77:32"><expr pos:start="77:13" pos:end="77:31"><call pos:start="77:13" pos:end="77:31"><name pos:start="77:13" pos:end="77:23">ide_set_irq</name><argument_list pos:start="77:24" pos:end="77:31">(<argument pos:start="77:25" pos:end="77:30"><expr pos:start="77:25" pos:end="77:30"><name pos:start="77:25" pos:end="77:30"><name pos:start="77:25" pos:end="77:25">s</name><operator pos:start="77:26" pos:end="77:27">-&gt;</operator><name pos:start="77:28" pos:end="77:30">bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <return pos:start="83:9" pos:end="83:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="89:5" pos:end="1057:5">switch<condition pos:start="89:11" pos:end="89:15">(<expr pos:start="89:12" pos:end="89:14"><name pos:start="89:12" pos:end="89:14">val</name></expr>)</condition> <block pos:start="89:17" pos:end="1057:5">{<block_content pos:start="91:5" pos:end="1055:14">

    <case pos:start="91:5" pos:end="91:21">case <expr pos:start="91:10" pos:end="91:20"><name pos:start="91:10" pos:end="91:20">WIN_SETMULT</name></expr>:</case>

        <if_stmt pos:start="93:9" pos:end="115:9"><if pos:start="93:9" pos:end="101:9">if <condition pos:start="93:12" pos:end="93:58">(<expr pos:start="93:13" pos:end="93:57"><name pos:start="93:13" pos:end="93:25"><name pos:start="93:13" pos:end="93:13">s</name><operator pos:start="93:14" pos:end="93:15">-&gt;</operator><name pos:start="93:16" pos:end="93:25">drive_kind</name></name> <operator pos:start="93:27" pos:end="93:28">==</operator> <name pos:start="93:30" pos:end="93:38">IDE_CFATA</name> <operator pos:start="93:40" pos:end="93:41">&amp;&amp;</operator> <name pos:start="93:43" pos:end="93:52"><name pos:start="93:43" pos:end="93:43">s</name><operator pos:start="93:44" pos:end="93:45">-&gt;</operator><name pos:start="93:46" pos:end="93:52">nsector</name></name> <operator pos:start="93:54" pos:end="93:55">==</operator> <literal type="number" pos:start="93:57" pos:end="93:57">0</literal></expr>)</condition> <block pos:start="93:60" pos:end="101:9">{<block_content pos:start="97:13" pos:end="99:47">

            <comment type="block" pos:start="95:13" pos:end="95:49">/* Disable Read and Write Multiple */</comment>

            <expr_stmt pos:start="97:13" pos:end="97:32"><expr pos:start="97:13" pos:end="97:31"><name pos:start="97:13" pos:end="97:27"><name pos:start="97:13" pos:end="97:13">s</name><operator pos:start="97:14" pos:end="97:15">-&gt;</operator><name pos:start="97:16" pos:end="97:27">mult_sectors</name></name> <operator pos:start="97:29" pos:end="97:29">=</operator> <literal type="number" pos:start="97:31" pos:end="97:31">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:47"><expr pos:start="99:13" pos:end="99:46"><name pos:start="99:13" pos:end="99:21"><name pos:start="99:13" pos:end="99:13">s</name><operator pos:start="99:14" pos:end="99:15">-&gt;</operator><name pos:start="99:16" pos:end="99:21">status</name></name> <operator pos:start="99:23" pos:end="99:23">=</operator> <name pos:start="99:25" pos:end="99:34">READY_STAT</name> <operator pos:start="99:36" pos:end="99:36">|</operator> <name pos:start="99:38" pos:end="99:46">SEEK_STAT</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="101:11" pos:end="109:9">else if <condition pos:start="101:19" pos:end="105:51">(<expr pos:start="101:20" pos:end="105:50"><operator pos:start="101:20" pos:end="101:20">(</operator><name pos:start="101:21" pos:end="101:30"><name pos:start="101:21" pos:end="101:21">s</name><operator pos:start="101:22" pos:end="101:23">-&gt;</operator><name pos:start="101:24" pos:end="101:30">nsector</name></name> <operator pos:start="101:32" pos:end="101:32">&amp;</operator> <literal type="number" pos:start="101:34" pos:end="101:37">0xff</literal><operator pos:start="101:38" pos:end="101:38">)</operator> <operator pos:start="101:40" pos:end="101:41">!=</operator> <literal type="number" pos:start="101:43" pos:end="101:43">0</literal> <operator pos:start="101:45" pos:end="101:46">&amp;&amp;</operator>

            <operator pos:start="103:13" pos:end="103:13">(</operator><operator pos:start="103:14" pos:end="103:14">(</operator><name pos:start="103:15" pos:end="103:24"><name pos:start="103:15" pos:end="103:15">s</name><operator pos:start="103:16" pos:end="103:17">-&gt;</operator><name pos:start="103:18" pos:end="103:24">nsector</name></name> <operator pos:start="103:26" pos:end="103:26">&amp;</operator> <literal type="number" pos:start="103:28" pos:end="103:31">0xff</literal><operator pos:start="103:32" pos:end="103:32">)</operator> <operator pos:start="103:34" pos:end="103:34">&gt;</operator> <name pos:start="103:36" pos:end="103:51">MAX_MULT_SECTORS</name> <operator pos:start="103:53" pos:end="103:54">||</operator>

             <operator pos:start="105:14" pos:end="105:14">(</operator><name pos:start="105:15" pos:end="105:24"><name pos:start="105:15" pos:end="105:15">s</name><operator pos:start="105:16" pos:end="105:17">-&gt;</operator><name pos:start="105:18" pos:end="105:24">nsector</name></name> <operator pos:start="105:26" pos:end="105:26">&amp;</operator> <operator pos:start="105:28" pos:end="105:28">(</operator><name pos:start="105:29" pos:end="105:38"><name pos:start="105:29" pos:end="105:29">s</name><operator pos:start="105:30" pos:end="105:31">-&gt;</operator><name pos:start="105:32" pos:end="105:38">nsector</name></name> <operator pos:start="105:40" pos:end="105:40">-</operator> <literal type="number" pos:start="105:42" pos:end="105:42">1</literal><operator pos:start="105:43" pos:end="105:43">)</operator><operator pos:start="105:44" pos:end="105:44">)</operator> <operator pos:start="105:46" pos:end="105:47">!=</operator> <literal type="number" pos:start="105:49" pos:end="105:49">0</literal><operator pos:start="105:50" pos:end="105:50">)</operator></expr>)</condition> <block pos:start="105:53" pos:end="109:9">{<block_content pos:start="107:13" pos:end="107:33">

            <expr_stmt pos:start="107:13" pos:end="107:33"><expr pos:start="107:13" pos:end="107:32"><call pos:start="107:13" pos:end="107:32"><name pos:start="107:13" pos:end="107:29">ide_abort_command</name><argument_list pos:start="107:30" pos:end="107:32">(<argument pos:start="107:31" pos:end="107:31"><expr pos:start="107:31" pos:end="107:31"><name pos:start="107:31" pos:end="107:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="109:11" pos:end="115:9">else <block pos:start="109:16" pos:end="115:9">{<block_content pos:start="111:13" pos:end="113:47">

            <expr_stmt pos:start="111:13" pos:end="111:48"><expr pos:start="111:13" pos:end="111:47"><name pos:start="111:13" pos:end="111:27"><name pos:start="111:13" pos:end="111:13">s</name><operator pos:start="111:14" pos:end="111:15">-&gt;</operator><name pos:start="111:16" pos:end="111:27">mult_sectors</name></name> <operator pos:start="111:29" pos:end="111:29">=</operator> <name pos:start="111:31" pos:end="111:40"><name pos:start="111:31" pos:end="111:31">s</name><operator pos:start="111:32" pos:end="111:33">-&gt;</operator><name pos:start="111:34" pos:end="111:40">nsector</name></name> <operator pos:start="111:42" pos:end="111:42">&amp;</operator> <literal type="number" pos:start="111:44" pos:end="111:47">0xff</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="113:13" pos:end="113:47"><expr pos:start="113:13" pos:end="113:46"><name pos:start="113:13" pos:end="113:21"><name pos:start="113:13" pos:end="113:13">s</name><operator pos:start="113:14" pos:end="113:15">-&gt;</operator><name pos:start="113:16" pos:end="113:21">status</name></name> <operator pos:start="113:23" pos:end="113:23">=</operator> <name pos:start="113:25" pos:end="113:34">READY_STAT</name> <operator pos:start="113:36" pos:end="113:36">|</operator> <name pos:start="113:38" pos:end="113:46">SEEK_STAT</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:28"><expr pos:start="117:9" pos:end="117:27"><call pos:start="117:9" pos:end="117:27"><name pos:start="117:9" pos:end="117:19">ide_set_irq</name><argument_list pos:start="117:20" pos:end="117:27">(<argument pos:start="117:21" pos:end="117:26"><expr pos:start="117:21" pos:end="117:26"><name pos:start="117:21" pos:end="117:26"><name pos:start="117:21" pos:end="117:21">s</name><operator pos:start="117:22" pos:end="117:23">-&gt;</operator><name pos:start="117:24" pos:end="117:26">bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="119:9" pos:end="119:14">break;</break>



    <case pos:start="123:5" pos:end="123:24">case <expr pos:start="123:10" pos:end="123:23"><name pos:start="123:10" pos:end="123:23">WIN_VERIFY_EXT</name></expr>:</case>

        <expr_stmt pos:start="125:9" pos:end="125:18"><expr pos:start="125:9" pos:end="125:17"><name pos:start="125:9" pos:end="125:13">lba48</name> <operator pos:start="125:15" pos:end="125:15">=</operator> <literal type="number" pos:start="125:17" pos:end="125:17">1</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="127:9" pos:end="127:26">/* fall through */</comment>

    <case pos:start="129:5" pos:end="129:20">case <expr pos:start="129:10" pos:end="129:19"><name pos:start="129:10" pos:end="129:19">WIN_VERIFY</name></expr>:</case>

    <case pos:start="131:5" pos:end="131:25">case <expr pos:start="131:10" pos:end="131:24"><name pos:start="131:10" pos:end="131:24">WIN_VERIFY_ONCE</name></expr>:</case>

        <comment type="block" pos:start="133:9" pos:end="133:38">/* do sector number check ? */</comment>

	<expr_stmt pos:start="135:9" pos:end="135:42"><expr pos:start="135:9" pos:end="135:41"><call pos:start="135:9" pos:end="135:41"><name pos:start="135:9" pos:end="135:31">ide_cmd_lba48_transform</name><argument_list pos:start="135:32" pos:end="135:41">(<argument pos:start="135:33" pos:end="135:33"><expr pos:start="135:33" pos:end="135:33"><name pos:start="135:33" pos:end="135:33">s</name></expr></argument>, <argument pos:start="135:36" pos:end="135:40"><expr pos:start="135:36" pos:end="135:40"><name pos:start="135:36" pos:end="135:40">lba48</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:43"><expr pos:start="137:9" pos:end="137:42"><name pos:start="137:9" pos:end="137:17"><name pos:start="137:9" pos:end="137:9">s</name><operator pos:start="137:10" pos:end="137:11">-&gt;</operator><name pos:start="137:12" pos:end="137:17">status</name></name> <operator pos:start="137:19" pos:end="137:19">=</operator> <name pos:start="137:21" pos:end="137:30">READY_STAT</name> <operator pos:start="137:32" pos:end="137:32">|</operator> <name pos:start="137:34" pos:end="137:42">SEEK_STAT</name></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:28"><expr pos:start="139:9" pos:end="139:27"><call pos:start="139:9" pos:end="139:27"><name pos:start="139:9" pos:end="139:19">ide_set_irq</name><argument_list pos:start="139:20" pos:end="139:27">(<argument pos:start="139:21" pos:end="139:26"><expr pos:start="139:21" pos:end="139:26"><name pos:start="139:21" pos:end="139:26"><name pos:start="139:21" pos:end="139:21">s</name><operator pos:start="139:22" pos:end="139:23">-&gt;</operator><name pos:start="139:24" pos:end="139:26">bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="141:9" pos:end="141:14">break;</break>



    <case pos:start="145:5" pos:end="145:22">case <expr pos:start="145:10" pos:end="145:21"><name pos:start="145:10" pos:end="145:21">WIN_READ_EXT</name></expr>:</case>

        <expr_stmt pos:start="147:9" pos:end="147:18"><expr pos:start="147:9" pos:end="147:17"><name pos:start="147:9" pos:end="147:13">lba48</name> <operator pos:start="147:15" pos:end="147:15">=</operator> <literal type="number" pos:start="147:17" pos:end="147:17">1</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="149:9" pos:end="149:26">/* fall through */</comment>

    <case pos:start="151:5" pos:end="151:18">case <expr pos:start="151:10" pos:end="151:17"><name pos:start="151:10" pos:end="151:17">WIN_READ</name></expr>:</case>

    <case pos:start="153:5" pos:end="153:23">case <expr pos:start="153:10" pos:end="153:22"><name pos:start="153:10" pos:end="153:22">WIN_READ_ONCE</name></expr>:</case>

        <if_stmt pos:start="155:9" pos:end="161:9"><if pos:start="155:9" pos:end="161:9">if <condition pos:start="155:12" pos:end="155:36">(<expr pos:start="155:13" pos:end="155:35"><name pos:start="155:13" pos:end="155:25"><name pos:start="155:13" pos:end="155:13">s</name><operator pos:start="155:14" pos:end="155:15">-&gt;</operator><name pos:start="155:16" pos:end="155:25">drive_kind</name></name> <operator pos:start="155:27" pos:end="155:28">==</operator> <name pos:start="155:30" pos:end="155:35">IDE_CD</name></expr>)</condition> <block pos:start="155:38" pos:end="161:9">{<block_content pos:start="157:13" pos:end="159:27">

            <expr_stmt pos:start="157:13" pos:end="157:33"><expr pos:start="157:13" pos:end="157:32"><call pos:start="157:13" pos:end="157:32"><name pos:start="157:13" pos:end="157:29">ide_set_signature</name><argument_list pos:start="157:30" pos:end="157:32">(<argument pos:start="157:31" pos:end="157:31"><expr pos:start="157:31" pos:end="157:31"><name pos:start="157:31" pos:end="157:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="157:35" pos:end="157:74">/* odd, but ATA4 8.27.5.2 requires it */</comment>

            <goto pos:start="159:13" pos:end="159:27">goto <name pos:start="159:18" pos:end="159:26">abort_cmd</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="163:9" pos:end="167:9"><if pos:start="163:9" pos:end="167:9">if <condition pos:start="163:12" pos:end="163:19">(<expr pos:start="163:13" pos:end="163:18"><operator pos:start="163:13" pos:end="163:13">!</operator><name pos:start="163:14" pos:end="163:18"><name pos:start="163:14" pos:end="163:14">s</name><operator pos:start="163:15" pos:end="163:16">-&gt;</operator><name pos:start="163:17" pos:end="163:18">bs</name></name></expr>)</condition> <block pos:start="163:21" pos:end="167:9">{<block_content pos:start="165:13" pos:end="165:27">

            <goto pos:start="165:13" pos:end="165:27">goto <name pos:start="165:18" pos:end="165:26">abort_cmd</name>;</goto>

        </block_content>}</block></if></if_stmt>

	<expr_stmt pos:start="169:9" pos:end="169:42"><expr pos:start="169:9" pos:end="169:41"><call pos:start="169:9" pos:end="169:41"><name pos:start="169:9" pos:end="169:31">ide_cmd_lba48_transform</name><argument_list pos:start="169:32" pos:end="169:41">(<argument pos:start="169:33" pos:end="169:33"><expr pos:start="169:33" pos:end="169:33"><name pos:start="169:33" pos:end="169:33">s</name></expr></argument>, <argument pos:start="169:36" pos:end="169:40"><expr pos:start="169:36" pos:end="169:40"><name pos:start="169:36" pos:end="169:40">lba48</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:30"><expr pos:start="171:9" pos:end="171:29"><name pos:start="171:9" pos:end="171:25"><name pos:start="171:9" pos:end="171:9">s</name><operator pos:start="171:10" pos:end="171:11">-&gt;</operator><name pos:start="171:12" pos:end="171:25">req_nb_sectors</name></name> <operator pos:start="171:27" pos:end="171:27">=</operator> <literal type="number" pos:start="171:29" pos:end="171:29">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:27"><expr pos:start="173:9" pos:end="173:26"><call pos:start="173:9" pos:end="173:26"><name pos:start="173:9" pos:end="173:23">ide_sector_read</name><argument_list pos:start="173:24" pos:end="173:26">(<argument pos:start="173:25" pos:end="173:25"><expr pos:start="173:25" pos:end="173:25"><name pos:start="173:25" pos:end="173:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="175:9" pos:end="175:14">break;</break>



    <case pos:start="179:5" pos:end="179:23">case <expr pos:start="179:10" pos:end="179:22"><name pos:start="179:10" pos:end="179:22">WIN_WRITE_EXT</name></expr>:</case>

        <expr_stmt pos:start="181:9" pos:end="181:18"><expr pos:start="181:9" pos:end="181:17"><name pos:start="181:9" pos:end="181:13">lba48</name> <operator pos:start="181:15" pos:end="181:15">=</operator> <literal type="number" pos:start="181:17" pos:end="181:17">1</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="183:9" pos:end="183:26">/* fall through */</comment>

    <case pos:start="185:5" pos:end="185:19">case <expr pos:start="185:10" pos:end="185:18"><name pos:start="185:10" pos:end="185:18">WIN_WRITE</name></expr>:</case>

    <case pos:start="187:5" pos:end="187:24">case <expr pos:start="187:10" pos:end="187:23"><name pos:start="187:10" pos:end="187:23">WIN_WRITE_ONCE</name></expr>:</case>

    <case pos:start="189:5" pos:end="189:33">case <expr pos:start="189:10" pos:end="189:32"><name pos:start="189:10" pos:end="189:32">CFA_WRITE_SECT_WO_ERASE</name></expr>:</case>

    <case pos:start="191:5" pos:end="191:26">case <expr pos:start="191:10" pos:end="191:25"><name pos:start="191:10" pos:end="191:25">WIN_WRITE_VERIFY</name></expr>:</case>

        <if_stmt pos:start="193:9" pos:end="197:9"><if pos:start="193:9" pos:end="197:9">if <condition pos:start="193:12" pos:end="193:19">(<expr pos:start="193:13" pos:end="193:18"><operator pos:start="193:13" pos:end="193:13">!</operator><name pos:start="193:14" pos:end="193:18"><name pos:start="193:14" pos:end="193:14">s</name><operator pos:start="193:15" pos:end="193:16">-&gt;</operator><name pos:start="193:17" pos:end="193:18">bs</name></name></expr>)</condition> <block pos:start="193:21" pos:end="197:9">{<block_content pos:start="195:13" pos:end="195:27">

            <goto pos:start="195:13" pos:end="195:27">goto <name pos:start="195:18" pos:end="195:26">abort_cmd</name>;</goto>

        </block_content>}</block></if></if_stmt>

	<expr_stmt pos:start="199:9" pos:end="199:42"><expr pos:start="199:9" pos:end="199:41"><call pos:start="199:9" pos:end="199:41"><name pos:start="199:9" pos:end="199:31">ide_cmd_lba48_transform</name><argument_list pos:start="199:32" pos:end="199:41">(<argument pos:start="199:33" pos:end="199:33"><expr pos:start="199:33" pos:end="199:33"><name pos:start="199:33" pos:end="199:33">s</name></expr></argument>, <argument pos:start="199:36" pos:end="199:40"><expr pos:start="199:36" pos:end="199:40"><name pos:start="199:36" pos:end="199:40">lba48</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="201:9" pos:end="201:21"><expr pos:start="201:9" pos:end="201:20"><name pos:start="201:9" pos:end="201:16"><name pos:start="201:9" pos:end="201:9">s</name><operator pos:start="201:10" pos:end="201:11">-&gt;</operator><name pos:start="201:12" pos:end="201:16">error</name></name> <operator pos:start="201:18" pos:end="201:18">=</operator> <literal type="number" pos:start="201:20" pos:end="201:20">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="203:9" pos:end="203:43"><expr pos:start="203:9" pos:end="203:42"><name pos:start="203:9" pos:end="203:17"><name pos:start="203:9" pos:end="203:9">s</name><operator pos:start="203:10" pos:end="203:11">-&gt;</operator><name pos:start="203:12" pos:end="203:17">status</name></name> <operator pos:start="203:19" pos:end="203:19">=</operator> <name pos:start="203:21" pos:end="203:29">SEEK_STAT</name> <operator pos:start="203:31" pos:end="203:31">|</operator> <name pos:start="203:33" pos:end="203:42">READY_STAT</name></expr>;</expr_stmt>

        <expr_stmt pos:start="205:9" pos:end="205:30"><expr pos:start="205:9" pos:end="205:29"><name pos:start="205:9" pos:end="205:25"><name pos:start="205:9" pos:end="205:9">s</name><operator pos:start="205:10" pos:end="205:11">-&gt;</operator><name pos:start="205:12" pos:end="205:25">req_nb_sectors</name></name> <operator pos:start="205:27" pos:end="205:27">=</operator> <literal type="number" pos:start="205:29" pos:end="205:29">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="207:9" pos:end="207:67"><expr pos:start="207:9" pos:end="207:66"><call pos:start="207:9" pos:end="207:66"><name pos:start="207:9" pos:end="207:26">ide_transfer_start</name><argument_list pos:start="207:27" pos:end="207:66">(<argument pos:start="207:28" pos:end="207:28"><expr pos:start="207:28" pos:end="207:28"><name pos:start="207:28" pos:end="207:28">s</name></expr></argument>, <argument pos:start="207:31" pos:end="207:42"><expr pos:start="207:31" pos:end="207:42"><name pos:start="207:31" pos:end="207:42"><name pos:start="207:31" pos:end="207:31">s</name><operator pos:start="207:32" pos:end="207:33">-&gt;</operator><name pos:start="207:34" pos:end="207:42">io_buffer</name></name></expr></argument>, <argument pos:start="207:45" pos:end="207:47"><expr pos:start="207:45" pos:end="207:47"><literal type="number" pos:start="207:45" pos:end="207:47">512</literal></expr></argument>, <argument pos:start="207:50" pos:end="207:65"><expr pos:start="207:50" pos:end="207:65"><name pos:start="207:50" pos:end="207:65">ide_sector_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="209:9" pos:end="209:29"><expr pos:start="209:9" pos:end="209:28"><name pos:start="209:9" pos:end="209:24"><name pos:start="209:9" pos:end="209:9">s</name><operator pos:start="209:10" pos:end="209:11">-&gt;</operator><name pos:start="209:12" pos:end="209:24">media_changed</name></name> <operator pos:start="209:26" pos:end="209:26">=</operator> <literal type="number" pos:start="209:28" pos:end="209:28">1</literal></expr>;</expr_stmt>

        <break pos:start="211:9" pos:end="211:14">break;</break>



    <case pos:start="215:5" pos:end="215:26">case <expr pos:start="215:10" pos:end="215:25"><name pos:start="215:10" pos:end="215:25">WIN_MULTREAD_EXT</name></expr>:</case>

        <expr_stmt pos:start="217:9" pos:end="217:18"><expr pos:start="217:9" pos:end="217:17"><name pos:start="217:9" pos:end="217:13">lba48</name> <operator pos:start="217:15" pos:end="217:15">=</operator> <literal type="number" pos:start="217:17" pos:end="217:17">1</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="219:9" pos:end="219:26">/* fall through */</comment>

    <case pos:start="221:5" pos:end="221:22">case <expr pos:start="221:10" pos:end="221:21"><name pos:start="221:10" pos:end="221:21">WIN_MULTREAD</name></expr>:</case>

        <if_stmt pos:start="223:9" pos:end="227:9"><if pos:start="223:9" pos:end="227:9">if <condition pos:start="223:12" pos:end="223:19">(<expr pos:start="223:13" pos:end="223:18"><operator pos:start="223:13" pos:end="223:13">!</operator><name pos:start="223:14" pos:end="223:18"><name pos:start="223:14" pos:end="223:14">s</name><operator pos:start="223:15" pos:end="223:16">-&gt;</operator><name pos:start="223:17" pos:end="223:18">bs</name></name></expr>)</condition> <block pos:start="223:21" pos:end="227:9">{<block_content pos:start="225:13" pos:end="225:27">

            <goto pos:start="225:13" pos:end="225:27">goto <name pos:start="225:18" pos:end="225:26">abort_cmd</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="229:9" pos:end="233:9"><if pos:start="229:9" pos:end="233:9">if <condition pos:start="229:12" pos:end="229:29">(<expr pos:start="229:13" pos:end="229:28"><operator pos:start="229:13" pos:end="229:13">!</operator><name pos:start="229:14" pos:end="229:28"><name pos:start="229:14" pos:end="229:14">s</name><operator pos:start="229:15" pos:end="229:16">-&gt;</operator><name pos:start="229:17" pos:end="229:28">mult_sectors</name></name></expr>)</condition> <block pos:start="229:31" pos:end="233:9">{<block_content pos:start="231:13" pos:end="231:27">

            <goto pos:start="231:13" pos:end="231:27">goto <name pos:start="231:18" pos:end="231:26">abort_cmd</name>;</goto>

        </block_content>}</block></if></if_stmt>

	<expr_stmt pos:start="235:9" pos:end="235:42"><expr pos:start="235:9" pos:end="235:41"><call pos:start="235:9" pos:end="235:41"><name pos:start="235:9" pos:end="235:31">ide_cmd_lba48_transform</name><argument_list pos:start="235:32" pos:end="235:41">(<argument pos:start="235:33" pos:end="235:33"><expr pos:start="235:33" pos:end="235:33"><name pos:start="235:33" pos:end="235:33">s</name></expr></argument>, <argument pos:start="235:36" pos:end="235:40"><expr pos:start="235:36" pos:end="235:40"><name pos:start="235:36" pos:end="235:40">lba48</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="237:9" pos:end="237:44"><expr pos:start="237:9" pos:end="237:43"><name pos:start="237:9" pos:end="237:25"><name pos:start="237:9" pos:end="237:9">s</name><operator pos:start="237:10" pos:end="237:11">-&gt;</operator><name pos:start="237:12" pos:end="237:25">req_nb_sectors</name></name> <operator pos:start="237:27" pos:end="237:27">=</operator> <name pos:start="237:29" pos:end="237:43"><name pos:start="237:29" pos:end="237:29">s</name><operator pos:start="237:30" pos:end="237:31">-&gt;</operator><name pos:start="237:32" pos:end="237:43">mult_sectors</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="239:9" pos:end="239:27"><expr pos:start="239:9" pos:end="239:26"><call pos:start="239:9" pos:end="239:26"><name pos:start="239:9" pos:end="239:23">ide_sector_read</name><argument_list pos:start="239:24" pos:end="239:26">(<argument pos:start="239:25" pos:end="239:25"><expr pos:start="239:25" pos:end="239:25"><name pos:start="239:25" pos:end="239:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="241:9" pos:end="241:14">break;</break>



    <case pos:start="245:5" pos:end="245:27">case <expr pos:start="245:10" pos:end="245:26"><name pos:start="245:10" pos:end="245:26">WIN_MULTWRITE_EXT</name></expr>:</case>

        <expr_stmt pos:start="247:9" pos:end="247:18"><expr pos:start="247:9" pos:end="247:17"><name pos:start="247:9" pos:end="247:13">lba48</name> <operator pos:start="247:15" pos:end="247:15">=</operator> <literal type="number" pos:start="247:17" pos:end="247:17">1</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="249:9" pos:end="249:26">/* fall through */</comment>

    <case pos:start="251:5" pos:end="251:23">case <expr pos:start="251:10" pos:end="251:22"><name pos:start="251:10" pos:end="251:22">WIN_MULTWRITE</name></expr>:</case>

    <case pos:start="253:5" pos:end="253:34">case <expr pos:start="253:10" pos:end="253:33"><name pos:start="253:10" pos:end="253:33">CFA_WRITE_MULTI_WO_ERASE</name></expr>:</case>

        <if_stmt pos:start="255:9" pos:end="259:9"><if pos:start="255:9" pos:end="259:9">if <condition pos:start="255:12" pos:end="255:19">(<expr pos:start="255:13" pos:end="255:18"><operator pos:start="255:13" pos:end="255:13">!</operator><name pos:start="255:14" pos:end="255:18"><name pos:start="255:14" pos:end="255:14">s</name><operator pos:start="255:15" pos:end="255:16">-&gt;</operator><name pos:start="255:17" pos:end="255:18">bs</name></name></expr>)</condition> <block pos:start="255:21" pos:end="259:9">{<block_content pos:start="257:13" pos:end="257:27">

            <goto pos:start="257:13" pos:end="257:27">goto <name pos:start="257:18" pos:end="257:26">abort_cmd</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="261:9" pos:end="265:9"><if pos:start="261:9" pos:end="265:9">if <condition pos:start="261:12" pos:end="261:29">(<expr pos:start="261:13" pos:end="261:28"><operator pos:start="261:13" pos:end="261:13">!</operator><name pos:start="261:14" pos:end="261:28"><name pos:start="261:14" pos:end="261:14">s</name><operator pos:start="261:15" pos:end="261:16">-&gt;</operator><name pos:start="261:17" pos:end="261:28">mult_sectors</name></name></expr>)</condition> <block pos:start="261:31" pos:end="265:9">{<block_content pos:start="263:13" pos:end="263:27">

            <goto pos:start="263:13" pos:end="263:27">goto <name pos:start="263:18" pos:end="263:26">abort_cmd</name>;</goto>

        </block_content>}</block></if></if_stmt>

	<expr_stmt pos:start="267:9" pos:end="267:42"><expr pos:start="267:9" pos:end="267:41"><call pos:start="267:9" pos:end="267:41"><name pos:start="267:9" pos:end="267:31">ide_cmd_lba48_transform</name><argument_list pos:start="267:32" pos:end="267:41">(<argument pos:start="267:33" pos:end="267:33"><expr pos:start="267:33" pos:end="267:33"><name pos:start="267:33" pos:end="267:33">s</name></expr></argument>, <argument pos:start="267:36" pos:end="267:40"><expr pos:start="267:36" pos:end="267:40"><name pos:start="267:36" pos:end="267:40">lba48</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="269:9" pos:end="269:21"><expr pos:start="269:9" pos:end="269:20"><name pos:start="269:9" pos:end="269:16"><name pos:start="269:9" pos:end="269:9">s</name><operator pos:start="269:10" pos:end="269:11">-&gt;</operator><name pos:start="269:12" pos:end="269:16">error</name></name> <operator pos:start="269:18" pos:end="269:18">=</operator> <literal type="number" pos:start="269:20" pos:end="269:20">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="271:9" pos:end="271:43"><expr pos:start="271:9" pos:end="271:42"><name pos:start="271:9" pos:end="271:17"><name pos:start="271:9" pos:end="271:9">s</name><operator pos:start="271:10" pos:end="271:11">-&gt;</operator><name pos:start="271:12" pos:end="271:17">status</name></name> <operator pos:start="271:19" pos:end="271:19">=</operator> <name pos:start="271:21" pos:end="271:29">SEEK_STAT</name> <operator pos:start="271:31" pos:end="271:31">|</operator> <name pos:start="271:33" pos:end="271:42">READY_STAT</name></expr>;</expr_stmt>

        <expr_stmt pos:start="273:9" pos:end="273:44"><expr pos:start="273:9" pos:end="273:43"><name pos:start="273:9" pos:end="273:25"><name pos:start="273:9" pos:end="273:9">s</name><operator pos:start="273:10" pos:end="273:11">-&gt;</operator><name pos:start="273:12" pos:end="273:25">req_nb_sectors</name></name> <operator pos:start="273:27" pos:end="273:27">=</operator> <name pos:start="273:29" pos:end="273:43"><name pos:start="273:29" pos:end="273:29">s</name><operator pos:start="273:30" pos:end="273:31">-&gt;</operator><name pos:start="273:32" pos:end="273:43">mult_sectors</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="275:9" pos:end="275:23"><expr pos:start="275:9" pos:end="275:22"><name pos:start="275:9" pos:end="275:9">n</name> <operator pos:start="275:11" pos:end="275:11">=</operator> <name pos:start="275:13" pos:end="275:22"><name pos:start="275:13" pos:end="275:13">s</name><operator pos:start="275:14" pos:end="275:15">-&gt;</operator><name pos:start="275:16" pos:end="275:22">nsector</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="277:9" pos:end="279:34"><if pos:start="277:9" pos:end="279:34">if <condition pos:start="277:12" pos:end="277:34">(<expr pos:start="277:13" pos:end="277:33"><name pos:start="277:13" pos:end="277:13">n</name> <operator pos:start="277:15" pos:end="277:15">&gt;</operator> <name pos:start="277:17" pos:end="277:33"><name pos:start="277:17" pos:end="277:17">s</name><operator pos:start="277:18" pos:end="277:19">-&gt;</operator><name pos:start="277:20" pos:end="277:33">req_nb_sectors</name></name></expr>)</condition><block type="pseudo" pos:start="279:13" pos:end="279:34"><block_content pos:start="279:13" pos:end="279:34">

            <expr_stmt pos:start="279:13" pos:end="279:34"><expr pos:start="279:13" pos:end="279:33"><name pos:start="279:13" pos:end="279:13">n</name> <operator pos:start="279:15" pos:end="279:15">=</operator> <name pos:start="279:17" pos:end="279:33"><name pos:start="279:17" pos:end="279:17">s</name><operator pos:start="279:18" pos:end="279:19">-&gt;</operator><name pos:start="279:20" pos:end="279:33">req_nb_sectors</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="281:9" pos:end="281:71"><expr pos:start="281:9" pos:end="281:70"><call pos:start="281:9" pos:end="281:70"><name pos:start="281:9" pos:end="281:26">ide_transfer_start</name><argument_list pos:start="281:27" pos:end="281:70">(<argument pos:start="281:28" pos:end="281:28"><expr pos:start="281:28" pos:end="281:28"><name pos:start="281:28" pos:end="281:28">s</name></expr></argument>, <argument pos:start="281:31" pos:end="281:42"><expr pos:start="281:31" pos:end="281:42"><name pos:start="281:31" pos:end="281:42"><name pos:start="281:31" pos:end="281:31">s</name><operator pos:start="281:32" pos:end="281:33">-&gt;</operator><name pos:start="281:34" pos:end="281:42">io_buffer</name></name></expr></argument>, <argument pos:start="281:45" pos:end="281:51"><expr pos:start="281:45" pos:end="281:51"><literal type="number" pos:start="281:45" pos:end="281:47">512</literal> <operator pos:start="281:49" pos:end="281:49">*</operator> <name pos:start="281:51" pos:end="281:51">n</name></expr></argument>, <argument pos:start="281:54" pos:end="281:69"><expr pos:start="281:54" pos:end="281:69"><name pos:start="281:54" pos:end="281:69">ide_sector_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="283:9" pos:end="283:29"><expr pos:start="283:9" pos:end="283:28"><name pos:start="283:9" pos:end="283:24"><name pos:start="283:9" pos:end="283:9">s</name><operator pos:start="283:10" pos:end="283:11">-&gt;</operator><name pos:start="283:12" pos:end="283:24">media_changed</name></name> <operator pos:start="283:26" pos:end="283:26">=</operator> <literal type="number" pos:start="283:28" pos:end="283:28">1</literal></expr>;</expr_stmt>

        <break pos:start="285:9" pos:end="285:14">break;</break>



    <case pos:start="289:5" pos:end="289:25">case <expr pos:start="289:10" pos:end="289:24"><name pos:start="289:10" pos:end="289:24">WIN_READDMA_EXT</name></expr>:</case>

        <expr_stmt pos:start="291:9" pos:end="291:18"><expr pos:start="291:9" pos:end="291:17"><name pos:start="291:9" pos:end="291:13">lba48</name> <operator pos:start="291:15" pos:end="291:15">=</operator> <literal type="number" pos:start="291:17" pos:end="291:17">1</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="293:9" pos:end="293:26">/* fall through */</comment>

    <case pos:start="295:5" pos:end="295:21">case <expr pos:start="295:10" pos:end="295:20"><name pos:start="295:10" pos:end="295:20">WIN_READDMA</name></expr>:</case>

    <case pos:start="297:5" pos:end="297:26">case <expr pos:start="297:10" pos:end="297:25"><name pos:start="297:10" pos:end="297:25">WIN_READDMA_ONCE</name></expr>:</case>

        <if_stmt pos:start="299:9" pos:end="303:9"><if pos:start="299:9" pos:end="303:9">if <condition pos:start="299:12" pos:end="299:19">(<expr pos:start="299:13" pos:end="299:18"><operator pos:start="299:13" pos:end="299:13">!</operator><name pos:start="299:14" pos:end="299:18"><name pos:start="299:14" pos:end="299:14">s</name><operator pos:start="299:15" pos:end="299:16">-&gt;</operator><name pos:start="299:17" pos:end="299:18">bs</name></name></expr>)</condition> <block pos:start="299:21" pos:end="303:9">{<block_content pos:start="301:13" pos:end="301:27">

            <goto pos:start="301:13" pos:end="301:27">goto <name pos:start="301:18" pos:end="301:26">abort_cmd</name>;</goto>

        </block_content>}</block></if></if_stmt>

	<expr_stmt pos:start="305:9" pos:end="305:42"><expr pos:start="305:9" pos:end="305:41"><call pos:start="305:9" pos:end="305:41"><name pos:start="305:9" pos:end="305:31">ide_cmd_lba48_transform</name><argument_list pos:start="305:32" pos:end="305:41">(<argument pos:start="305:33" pos:end="305:33"><expr pos:start="305:33" pos:end="305:33"><name pos:start="305:33" pos:end="305:33">s</name></expr></argument>, <argument pos:start="305:36" pos:end="305:40"><expr pos:start="305:36" pos:end="305:40"><name pos:start="305:36" pos:end="305:40">lba48</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="307:9" pos:end="307:46"><expr pos:start="307:9" pos:end="307:45"><call pos:start="307:9" pos:end="307:45"><name pos:start="307:9" pos:end="307:28">ide_sector_start_dma</name><argument_list pos:start="307:29" pos:end="307:45">(<argument pos:start="307:30" pos:end="307:30"><expr pos:start="307:30" pos:end="307:30"><name pos:start="307:30" pos:end="307:30">s</name></expr></argument>, <argument pos:start="307:33" pos:end="307:44"><expr pos:start="307:33" pos:end="307:44"><name pos:start="307:33" pos:end="307:44">IDE_DMA_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="309:9" pos:end="309:14">break;</break>



    <case pos:start="313:5" pos:end="313:26">case <expr pos:start="313:10" pos:end="313:25"><name pos:start="313:10" pos:end="313:25">WIN_WRITEDMA_EXT</name></expr>:</case>

        <expr_stmt pos:start="315:9" pos:end="315:18"><expr pos:start="315:9" pos:end="315:17"><name pos:start="315:9" pos:end="315:13">lba48</name> <operator pos:start="315:15" pos:end="315:15">=</operator> <literal type="number" pos:start="315:17" pos:end="315:17">1</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="317:9" pos:end="317:26">/* fall through */</comment>

    <case pos:start="319:5" pos:end="319:22">case <expr pos:start="319:10" pos:end="319:21"><name pos:start="319:10" pos:end="319:21">WIN_WRITEDMA</name></expr>:</case>

    <case pos:start="321:5" pos:end="321:27">case <expr pos:start="321:10" pos:end="321:26"><name pos:start="321:10" pos:end="321:26">WIN_WRITEDMA_ONCE</name></expr>:</case>

        <if_stmt pos:start="323:9" pos:end="327:9"><if pos:start="323:9" pos:end="327:9">if <condition pos:start="323:12" pos:end="323:19">(<expr pos:start="323:13" pos:end="323:18"><operator pos:start="323:13" pos:end="323:13">!</operator><name pos:start="323:14" pos:end="323:18"><name pos:start="323:14" pos:end="323:14">s</name><operator pos:start="323:15" pos:end="323:16">-&gt;</operator><name pos:start="323:17" pos:end="323:18">bs</name></name></expr>)</condition> <block pos:start="323:21" pos:end="327:9">{<block_content pos:start="325:13" pos:end="325:27">

            <goto pos:start="325:13" pos:end="325:27">goto <name pos:start="325:18" pos:end="325:26">abort_cmd</name>;</goto>

        </block_content>}</block></if></if_stmt>

	<expr_stmt pos:start="329:9" pos:end="329:42"><expr pos:start="329:9" pos:end="329:41"><call pos:start="329:9" pos:end="329:41"><name pos:start="329:9" pos:end="329:31">ide_cmd_lba48_transform</name><argument_list pos:start="329:32" pos:end="329:41">(<argument pos:start="329:33" pos:end="329:33"><expr pos:start="329:33" pos:end="329:33"><name pos:start="329:33" pos:end="329:33">s</name></expr></argument>, <argument pos:start="329:36" pos:end="329:40"><expr pos:start="329:36" pos:end="329:40"><name pos:start="329:36" pos:end="329:40">lba48</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="331:9" pos:end="331:47"><expr pos:start="331:9" pos:end="331:46"><call pos:start="331:9" pos:end="331:46"><name pos:start="331:9" pos:end="331:28">ide_sector_start_dma</name><argument_list pos:start="331:29" pos:end="331:46">(<argument pos:start="331:30" pos:end="331:30"><expr pos:start="331:30" pos:end="331:30"><name pos:start="331:30" pos:end="331:30">s</name></expr></argument>, <argument pos:start="331:33" pos:end="331:45"><expr pos:start="331:33" pos:end="331:45"><name pos:start="331:33" pos:end="331:45">IDE_DMA_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="333:9" pos:end="333:29"><expr pos:start="333:9" pos:end="333:28"><name pos:start="333:9" pos:end="333:24"><name pos:start="333:9" pos:end="333:9">s</name><operator pos:start="333:10" pos:end="333:11">-&gt;</operator><name pos:start="333:12" pos:end="333:24">media_changed</name></name> <operator pos:start="333:26" pos:end="333:26">=</operator> <literal type="number" pos:start="333:28" pos:end="333:28">1</literal></expr>;</expr_stmt>

        <break pos:start="335:9" pos:end="335:14">break;</break>



    <case pos:start="339:5" pos:end="339:33">case <expr pos:start="339:10" pos:end="339:32"><name pos:start="339:10" pos:end="339:32">WIN_READ_NATIVE_MAX_EXT</name></expr>:</case>

        <expr_stmt pos:start="341:9" pos:end="341:18"><expr pos:start="341:9" pos:end="341:17"><name pos:start="341:9" pos:end="341:13">lba48</name> <operator pos:start="341:15" pos:end="341:15">=</operator> <literal type="number" pos:start="341:17" pos:end="341:17">1</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="343:9" pos:end="343:26">/* fall through */</comment>

    <case pos:start="345:5" pos:end="345:29">case <expr pos:start="345:10" pos:end="345:28"><name pos:start="345:10" pos:end="345:28">WIN_READ_NATIVE_MAX</name></expr>:</case>

        <comment type="block" pos:start="347:9" pos:end="347:77">/* Refuse if no sectors are addressable (e.g. medium not inserted) */</comment>

        <if_stmt pos:start="349:9" pos:end="353:9"><if pos:start="349:9" pos:end="353:9">if <condition pos:start="349:12" pos:end="349:31">(<expr pos:start="349:13" pos:end="349:30"><name pos:start="349:13" pos:end="349:25"><name pos:start="349:13" pos:end="349:13">s</name><operator pos:start="349:14" pos:end="349:15">-&gt;</operator><name pos:start="349:16" pos:end="349:25">nb_sectors</name></name> <operator pos:start="349:27" pos:end="349:28">==</operator> <literal type="number" pos:start="349:30" pos:end="349:30">0</literal></expr>)</condition> <block pos:start="349:33" pos:end="353:9">{<block_content pos:start="351:13" pos:end="351:27">

            <goto pos:start="351:13" pos:end="351:27">goto <name pos:start="351:18" pos:end="351:26">abort_cmd</name>;</goto>

        </block_content>}</block></if></if_stmt>

	<expr_stmt pos:start="355:9" pos:end="355:42"><expr pos:start="355:9" pos:end="355:41"><call pos:start="355:9" pos:end="355:41"><name pos:start="355:9" pos:end="355:31">ide_cmd_lba48_transform</name><argument_list pos:start="355:32" pos:end="355:41">(<argument pos:start="355:33" pos:end="355:33"><expr pos:start="355:33" pos:end="355:33"><name pos:start="355:33" pos:end="355:33">s</name></expr></argument>, <argument pos:start="355:36" pos:end="355:40"><expr pos:start="355:36" pos:end="355:40"><name pos:start="355:36" pos:end="355:40">lba48</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="357:9" pos:end="357:45"><expr pos:start="357:9" pos:end="357:44"><call pos:start="357:9" pos:end="357:44"><name pos:start="357:9" pos:end="357:22">ide_set_sector</name><argument_list pos:start="357:23" pos:end="357:44">(<argument pos:start="357:24" pos:end="357:24"><expr pos:start="357:24" pos:end="357:24"><name pos:start="357:24" pos:end="357:24">s</name></expr></argument>, <argument pos:start="357:27" pos:end="357:43"><expr pos:start="357:27" pos:end="357:43"><name pos:start="357:27" pos:end="357:39"><name pos:start="357:27" pos:end="357:27">s</name><operator pos:start="357:28" pos:end="357:29">-&gt;</operator><name pos:start="357:30" pos:end="357:39">nb_sectors</name></name> <operator pos:start="357:41" pos:end="357:41">-</operator> <literal type="number" pos:start="357:43" pos:end="357:43">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="359:9" pos:end="359:43"><expr pos:start="359:9" pos:end="359:42"><name pos:start="359:9" pos:end="359:17"><name pos:start="359:9" pos:end="359:9">s</name><operator pos:start="359:10" pos:end="359:11">-&gt;</operator><name pos:start="359:12" pos:end="359:17">status</name></name> <operator pos:start="359:19" pos:end="359:19">=</operator> <name pos:start="359:21" pos:end="359:30">READY_STAT</name> <operator pos:start="359:32" pos:end="359:32">|</operator> <name pos:start="359:34" pos:end="359:42">SEEK_STAT</name></expr>;</expr_stmt>

        <expr_stmt pos:start="361:9" pos:end="361:28"><expr pos:start="361:9" pos:end="361:27"><call pos:start="361:9" pos:end="361:27"><name pos:start="361:9" pos:end="361:19">ide_set_irq</name><argument_list pos:start="361:20" pos:end="361:27">(<argument pos:start="361:21" pos:end="361:26"><expr pos:start="361:21" pos:end="361:26"><name pos:start="361:21" pos:end="361:26"><name pos:start="361:21" pos:end="361:21">s</name><operator pos:start="361:22" pos:end="361:23">-&gt;</operator><name pos:start="361:24" pos:end="361:26">bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="363:9" pos:end="363:14">break;</break>



    <case pos:start="367:5" pos:end="367:29">case <expr pos:start="367:10" pos:end="367:28"><name pos:start="367:10" pos:end="367:28">WIN_CHECKPOWERMODE1</name></expr>:</case>

    <case pos:start="369:5" pos:end="369:29">case <expr pos:start="369:10" pos:end="369:28"><name pos:start="369:10" pos:end="369:28">WIN_CHECKPOWERMODE2</name></expr>:</case>

        <expr_stmt pos:start="371:9" pos:end="371:21"><expr pos:start="371:9" pos:end="371:20"><name pos:start="371:9" pos:end="371:16"><name pos:start="371:9" pos:end="371:9">s</name><operator pos:start="371:10" pos:end="371:11">-&gt;</operator><name pos:start="371:12" pos:end="371:16">error</name></name> <operator pos:start="371:18" pos:end="371:18">=</operator> <literal type="number" pos:start="371:20" pos:end="371:20">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="373:9" pos:end="373:26"><expr pos:start="373:9" pos:end="373:25"><name pos:start="373:9" pos:end="373:18"><name pos:start="373:9" pos:end="373:9">s</name><operator pos:start="373:10" pos:end="373:11">-&gt;</operator><name pos:start="373:12" pos:end="373:18">nsector</name></name> <operator pos:start="373:20" pos:end="373:20">=</operator> <literal type="number" pos:start="373:22" pos:end="373:25">0xff</literal></expr>;</expr_stmt> <comment type="block" pos:start="373:28" pos:end="373:54">/* device active or idle */</comment>

        <expr_stmt pos:start="375:9" pos:end="375:43"><expr pos:start="375:9" pos:end="375:42"><name pos:start="375:9" pos:end="375:17"><name pos:start="375:9" pos:end="375:9">s</name><operator pos:start="375:10" pos:end="375:11">-&gt;</operator><name pos:start="375:12" pos:end="375:17">status</name></name> <operator pos:start="375:19" pos:end="375:19">=</operator> <name pos:start="375:21" pos:end="375:30">READY_STAT</name> <operator pos:start="375:32" pos:end="375:32">|</operator> <name pos:start="375:34" pos:end="375:42">SEEK_STAT</name></expr>;</expr_stmt>

        <expr_stmt pos:start="377:9" pos:end="377:28"><expr pos:start="377:9" pos:end="377:27"><call pos:start="377:9" pos:end="377:27"><name pos:start="377:9" pos:end="377:19">ide_set_irq</name><argument_list pos:start="377:20" pos:end="377:27">(<argument pos:start="377:21" pos:end="377:26"><expr pos:start="377:21" pos:end="377:26"><name pos:start="377:21" pos:end="377:26"><name pos:start="377:21" pos:end="377:21">s</name><operator pos:start="377:22" pos:end="377:23">-&gt;</operator><name pos:start="377:24" pos:end="377:26">bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="379:9" pos:end="379:14">break;</break>

    <case pos:start="381:5" pos:end="381:25">case <expr pos:start="381:10" pos:end="381:24"><name pos:start="381:10" pos:end="381:24">WIN_SETFEATURES</name></expr>:</case>

        <if_stmt pos:start="383:9" pos:end="385:27"><if pos:start="383:9" pos:end="385:27">if <condition pos:start="383:12" pos:end="383:19">(<expr pos:start="383:13" pos:end="383:18"><operator pos:start="383:13" pos:end="383:13">!</operator><name pos:start="383:14" pos:end="383:18"><name pos:start="383:14" pos:end="383:14">s</name><operator pos:start="383:15" pos:end="383:16">-&gt;</operator><name pos:start="383:17" pos:end="383:18">bs</name></name></expr>)</condition><block type="pseudo" pos:start="385:13" pos:end="385:27"><block_content pos:start="385:13" pos:end="385:27">

            <goto pos:start="385:13" pos:end="385:27">goto <name pos:start="385:18" pos:end="385:26">abort_cmd</name>;</goto></block_content></block></if></if_stmt>

        <comment type="block" pos:start="387:9" pos:end="387:36">/* XXX: valid for CDROM ? */</comment>

        <switch pos:start="389:9" pos:end="517:9">switch<condition pos:start="389:15" pos:end="389:26">(<expr pos:start="389:16" pos:end="389:25"><name pos:start="389:16" pos:end="389:25"><name pos:start="389:16" pos:end="389:16">s</name><operator pos:start="389:17" pos:end="389:18">-&gt;</operator><name pos:start="389:19" pos:end="389:25">feature</name></name></expr>)</condition> <block pos:start="389:28" pos:end="517:9">{<block_content pos:start="391:9" pos:end="515:27">

        <case pos:start="391:9" pos:end="391:18">case <expr pos:start="391:14" pos:end="391:17"><literal type="number" pos:start="391:14" pos:end="391:17">0x02</literal></expr>:</case> <comment type="block" pos:start="391:20" pos:end="391:43">/* write cache enable */</comment>

            <expr_stmt pos:start="393:13" pos:end="393:53"><expr pos:start="393:13" pos:end="393:52"><call pos:start="393:13" pos:end="393:52"><name pos:start="393:13" pos:end="393:39">bdrv_set_enable_write_cache</name><argument_list pos:start="393:40" pos:end="393:52">(<argument pos:start="393:41" pos:end="393:45"><expr pos:start="393:41" pos:end="393:45"><name pos:start="393:41" pos:end="393:45"><name pos:start="393:41" pos:end="393:41">s</name><operator pos:start="393:42" pos:end="393:43">-&gt;</operator><name pos:start="393:44" pos:end="393:45">bs</name></name></expr></argument>, <argument pos:start="393:48" pos:end="393:51"><expr pos:start="393:48" pos:end="393:51"><name pos:start="393:48" pos:end="393:51">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="395:13" pos:end="395:57"><expr pos:start="395:13" pos:end="395:56"><name pos:start="395:13" pos:end="395:25">identify_data</name> <operator pos:start="395:27" pos:end="395:27">=</operator> <operator pos:start="395:29" pos:end="395:29">(</operator><name pos:start="395:30" pos:end="395:37">uint16_t</name> <operator pos:start="395:39" pos:end="395:39">*</operator><operator pos:start="395:40" pos:end="395:40">)</operator><name pos:start="395:41" pos:end="395:56"><name pos:start="395:41" pos:end="395:41">s</name><operator pos:start="395:42" pos:end="395:43">-&gt;</operator><name pos:start="395:44" pos:end="395:56">identify_data</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="397:13" pos:end="397:67"><expr pos:start="397:13" pos:end="397:66"><call pos:start="397:13" pos:end="397:66"><name pos:start="397:13" pos:end="397:20">put_le16</name><argument_list pos:start="397:21" pos:end="397:66">(<argument pos:start="397:22" pos:end="397:39"><expr pos:start="397:22" pos:end="397:39"><name pos:start="397:22" pos:end="397:34">identify_data</name> <operator pos:start="397:36" pos:end="397:36">+</operator> <literal type="number" pos:start="397:38" pos:end="397:39">85</literal></expr></argument>, <argument pos:start="397:42" pos:end="397:65"><expr pos:start="397:42" pos:end="397:65"><operator pos:start="397:42" pos:end="397:42">(</operator><literal type="number" pos:start="397:43" pos:end="397:43">1</literal> <operator pos:start="397:45" pos:end="397:46">&lt;&lt;</operator> <literal type="number" pos:start="397:48" pos:end="397:49">14</literal><operator pos:start="397:50" pos:end="397:50">)</operator> <operator pos:start="397:52" pos:end="397:52">|</operator> <operator pos:start="397:54" pos:end="397:54">(</operator><literal type="number" pos:start="397:55" pos:end="397:55">1</literal> <operator pos:start="397:57" pos:end="397:58">&lt;&lt;</operator> <literal type="number" pos:start="397:60" pos:end="397:60">5</literal><operator pos:start="397:61" pos:end="397:61">)</operator> <operator pos:start="397:63" pos:end="397:63">|</operator> <literal type="number" pos:start="397:65" pos:end="397:65">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="399:13" pos:end="399:47"><expr pos:start="399:13" pos:end="399:46"><name pos:start="399:13" pos:end="399:21"><name pos:start="399:13" pos:end="399:13">s</name><operator pos:start="399:14" pos:end="399:15">-&gt;</operator><name pos:start="399:16" pos:end="399:21">status</name></name> <operator pos:start="399:23" pos:end="399:23">=</operator> <name pos:start="399:25" pos:end="399:34">READY_STAT</name> <operator pos:start="399:36" pos:end="399:36">|</operator> <name pos:start="399:38" pos:end="399:46">SEEK_STAT</name></expr>;</expr_stmt>

            <expr_stmt pos:start="401:13" pos:end="401:32"><expr pos:start="401:13" pos:end="401:31"><call pos:start="401:13" pos:end="401:31"><name pos:start="401:13" pos:end="401:23">ide_set_irq</name><argument_list pos:start="401:24" pos:end="401:31">(<argument pos:start="401:25" pos:end="401:30"><expr pos:start="401:25" pos:end="401:30"><name pos:start="401:25" pos:end="401:30"><name pos:start="401:25" pos:end="401:25">s</name><operator pos:start="401:26" pos:end="401:27">-&gt;</operator><name pos:start="401:28" pos:end="401:30">bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="403:13" pos:end="403:18">break;</break>

        <case pos:start="405:9" pos:end="405:18">case <expr pos:start="405:14" pos:end="405:17"><literal type="number" pos:start="405:14" pos:end="405:17">0x82</literal></expr>:</case> <comment type="block" pos:start="405:20" pos:end="405:44">/* write cache disable */</comment>

            <expr_stmt pos:start="407:13" pos:end="407:54"><expr pos:start="407:13" pos:end="407:53"><call pos:start="407:13" pos:end="407:53"><name pos:start="407:13" pos:end="407:39">bdrv_set_enable_write_cache</name><argument_list pos:start="407:40" pos:end="407:53">(<argument pos:start="407:41" pos:end="407:45"><expr pos:start="407:41" pos:end="407:45"><name pos:start="407:41" pos:end="407:45"><name pos:start="407:41" pos:end="407:41">s</name><operator pos:start="407:42" pos:end="407:43">-&gt;</operator><name pos:start="407:44" pos:end="407:45">bs</name></name></expr></argument>, <argument pos:start="407:48" pos:end="407:52"><expr pos:start="407:48" pos:end="407:52"><name pos:start="407:48" pos:end="407:52">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="409:13" pos:end="409:57"><expr pos:start="409:13" pos:end="409:56"><name pos:start="409:13" pos:end="409:25">identify_data</name> <operator pos:start="409:27" pos:end="409:27">=</operator> <operator pos:start="409:29" pos:end="409:29">(</operator><name pos:start="409:30" pos:end="409:37">uint16_t</name> <operator pos:start="409:39" pos:end="409:39">*</operator><operator pos:start="409:40" pos:end="409:40">)</operator><name pos:start="409:41" pos:end="409:56"><name pos:start="409:41" pos:end="409:41">s</name><operator pos:start="409:42" pos:end="409:43">-&gt;</operator><name pos:start="409:44" pos:end="409:56">identify_data</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="411:13" pos:end="411:56"><expr pos:start="411:13" pos:end="411:55"><call pos:start="411:13" pos:end="411:55"><name pos:start="411:13" pos:end="411:20">put_le16</name><argument_list pos:start="411:21" pos:end="411:55">(<argument pos:start="411:22" pos:end="411:39"><expr pos:start="411:22" pos:end="411:39"><name pos:start="411:22" pos:end="411:34">identify_data</name> <operator pos:start="411:36" pos:end="411:36">+</operator> <literal type="number" pos:start="411:38" pos:end="411:39">85</literal></expr></argument>, <argument pos:start="411:42" pos:end="411:54"><expr pos:start="411:42" pos:end="411:54"><operator pos:start="411:42" pos:end="411:42">(</operator><literal type="number" pos:start="411:43" pos:end="411:43">1</literal> <operator pos:start="411:45" pos:end="411:46">&lt;&lt;</operator> <literal type="number" pos:start="411:48" pos:end="411:49">14</literal><operator pos:start="411:50" pos:end="411:50">)</operator> <operator pos:start="411:52" pos:end="411:52">|</operator> <literal type="number" pos:start="411:54" pos:end="411:54">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="413:13" pos:end="413:31"><expr pos:start="413:13" pos:end="413:30"><call pos:start="413:13" pos:end="413:30"><name pos:start="413:13" pos:end="413:27">ide_flush_cache</name><argument_list pos:start="413:28" pos:end="413:30">(<argument pos:start="413:29" pos:end="413:29"><expr pos:start="413:29" pos:end="413:29"><name pos:start="413:29" pos:end="413:29">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="415:13" pos:end="415:18">break;</break>

        <case pos:start="417:9" pos:end="417:18">case <expr pos:start="417:14" pos:end="417:17"><literal type="number" pos:start="417:14" pos:end="417:17">0xcc</literal></expr>:</case> <comment type="block" pos:start="417:20" pos:end="417:62">/* reverting to power-on defaults enable */</comment>

        <case pos:start="419:9" pos:end="419:18">case <expr pos:start="419:14" pos:end="419:17"><literal type="number" pos:start="419:14" pos:end="419:17">0x66</literal></expr>:</case> <comment type="block" pos:start="419:20" pos:end="419:63">/* reverting to power-on defaults disable */</comment>

        <case pos:start="421:9" pos:end="421:18">case <expr pos:start="421:14" pos:end="421:17"><literal type="number" pos:start="421:14" pos:end="421:17">0xaa</literal></expr>:</case> <comment type="block" pos:start="421:20" pos:end="421:47">/* read look-ahead enable */</comment>

        <case pos:start="423:9" pos:end="423:18">case <expr pos:start="423:14" pos:end="423:17"><literal type="number" pos:start="423:14" pos:end="423:17">0x55</literal></expr>:</case> <comment type="block" pos:start="423:20" pos:end="423:48">/* read look-ahead disable */</comment>

        <case pos:start="425:9" pos:end="425:18">case <expr pos:start="425:14" pos:end="425:17"><literal type="number" pos:start="425:14" pos:end="425:17">0x05</literal></expr>:</case> <comment type="block" pos:start="425:20" pos:end="425:59">/* set advanced power management mode */</comment>

        <case pos:start="427:9" pos:end="427:18">case <expr pos:start="427:14" pos:end="427:17"><literal type="number" pos:start="427:14" pos:end="427:17">0x85</literal></expr>:</case> <comment type="block" pos:start="427:20" pos:end="427:63">/* disable advanced power management mode */</comment>

        <case pos:start="429:9" pos:end="429:18">case <expr pos:start="429:14" pos:end="429:17"><literal type="number" pos:start="429:14" pos:end="429:17">0x69</literal></expr>:</case> <comment type="block" pos:start="429:20" pos:end="429:28">/* NOP */</comment>

        <case pos:start="431:9" pos:end="431:18">case <expr pos:start="431:14" pos:end="431:17"><literal type="number" pos:start="431:14" pos:end="431:17">0x67</literal></expr>:</case> <comment type="block" pos:start="431:20" pos:end="431:28">/* NOP */</comment>

        <case pos:start="433:9" pos:end="433:18">case <expr pos:start="433:14" pos:end="433:17"><literal type="number" pos:start="433:14" pos:end="433:17">0x96</literal></expr>:</case> <comment type="block" pos:start="433:20" pos:end="433:28">/* NOP */</comment>

        <case pos:start="435:9" pos:end="435:18">case <expr pos:start="435:14" pos:end="435:17"><literal type="number" pos:start="435:14" pos:end="435:17">0x9a</literal></expr>:</case> <comment type="block" pos:start="435:20" pos:end="435:28">/* NOP */</comment>

        <case pos:start="437:9" pos:end="437:18">case <expr pos:start="437:14" pos:end="437:17"><literal type="number" pos:start="437:14" pos:end="437:17">0x42</literal></expr>:</case> <comment type="block" pos:start="437:20" pos:end="437:55">/* enable Automatic Acoustic Mode */</comment>

        <case pos:start="439:9" pos:end="439:18">case <expr pos:start="439:14" pos:end="439:17"><literal type="number" pos:start="439:14" pos:end="439:17">0xc2</literal></expr>:</case> <comment type="block" pos:start="439:20" pos:end="439:56">/* disable Automatic Acoustic Mode */</comment>

            <expr_stmt pos:start="441:13" pos:end="441:47"><expr pos:start="441:13" pos:end="441:46"><name pos:start="441:13" pos:end="441:21"><name pos:start="441:13" pos:end="441:13">s</name><operator pos:start="441:14" pos:end="441:15">-&gt;</operator><name pos:start="441:16" pos:end="441:21">status</name></name> <operator pos:start="441:23" pos:end="441:23">=</operator> <name pos:start="441:25" pos:end="441:34">READY_STAT</name> <operator pos:start="441:36" pos:end="441:36">|</operator> <name pos:start="441:38" pos:end="441:46">SEEK_STAT</name></expr>;</expr_stmt>

            <expr_stmt pos:start="443:13" pos:end="443:32"><expr pos:start="443:13" pos:end="443:31"><call pos:start="443:13" pos:end="443:31"><name pos:start="443:13" pos:end="443:23">ide_set_irq</name><argument_list pos:start="443:24" pos:end="443:31">(<argument pos:start="443:25" pos:end="443:30"><expr pos:start="443:25" pos:end="443:30"><name pos:start="443:25" pos:end="443:30"><name pos:start="443:25" pos:end="443:25">s</name><operator pos:start="443:26" pos:end="443:27">-&gt;</operator><name pos:start="443:28" pos:end="443:30">bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="445:13" pos:end="445:18">break;</break>

        <case pos:start="447:9" pos:end="447:18">case <expr pos:start="447:14" pos:end="447:17"><literal type="number" pos:start="447:14" pos:end="447:17">0x03</literal></expr>:</case> <block pos:start="447:20" pos:end="511:9">{<block_content pos:start="449:17" pos:end="509:18"> <comment type="block" pos:start="447:22" pos:end="447:44">/* set transfer mode */</comment>

		<decl_stmt pos:start="449:17" pos:end="449:48"><decl pos:start="449:17" pos:end="449:47"><type pos:start="449:17" pos:end="449:23"><name pos:start="449:17" pos:end="449:23">uint8_t</name></type> <name pos:start="449:25" pos:end="449:27">val</name> <init pos:start="449:29" pos:end="449:47">= <expr pos:start="449:31" pos:end="449:47"><name pos:start="449:31" pos:end="449:40"><name pos:start="449:31" pos:end="449:31">s</name><operator pos:start="449:32" pos:end="449:33">-&gt;</operator><name pos:start="449:34" pos:end="449:40">nsector</name></name> <operator pos:start="449:42" pos:end="449:42">&amp;</operator> <literal type="number" pos:start="449:44" pos:end="449:47">0x07</literal></expr></init></decl>;</decl_stmt>

		<expr_stmt pos:start="451:17" pos:end="451:61"><expr pos:start="451:17" pos:end="451:60"><name pos:start="451:17" pos:end="451:29">identify_data</name> <operator pos:start="451:31" pos:end="451:31">=</operator> <operator pos:start="451:33" pos:end="451:33">(</operator><name pos:start="451:34" pos:end="451:41">uint16_t</name> <operator pos:start="451:43" pos:end="451:43">*</operator><operator pos:start="451:44" pos:end="451:44">)</operator><name pos:start="451:45" pos:end="451:60"><name pos:start="451:45" pos:end="451:45">s</name><operator pos:start="451:46" pos:end="451:47">-&gt;</operator><name pos:start="451:48" pos:end="451:60">identify_data</name></name></expr>;</expr_stmt>



		<switch pos:start="455:17" pos:end="503:17">switch <condition pos:start="455:24" pos:end="455:40">(<expr pos:start="455:25" pos:end="455:39"><name pos:start="455:25" pos:end="455:34"><name pos:start="455:25" pos:end="455:25">s</name><operator pos:start="455:26" pos:end="455:27">-&gt;</operator><name pos:start="455:28" pos:end="455:34">nsector</name></name> <operator pos:start="455:36" pos:end="455:37">&gt;&gt;</operator> <literal type="number" pos:start="455:39" pos:end="455:39">3</literal></expr>)</condition> <block pos:start="455:42" pos:end="503:17">{<block_content pos:start="457:17" pos:end="501:39">

		<case pos:start="457:17" pos:end="457:26">case <expr pos:start="457:22" pos:end="457:25"><literal type="number" pos:start="457:22" pos:end="457:25">0x00</literal></expr>:</case> <comment type="block" pos:start="457:28" pos:end="457:44">/* pio default */</comment>

		<case pos:start="459:17" pos:end="459:26">case <expr pos:start="459:22" pos:end="459:25"><literal type="number" pos:start="459:22" pos:end="459:25">0x01</literal></expr>:</case> <comment type="block" pos:start="459:28" pos:end="459:41">/* pio mode */</comment>

			<expr_stmt pos:start="461:25" pos:end="461:58"><expr pos:start="461:25" pos:end="461:57"><call pos:start="461:25" pos:end="461:57"><name pos:start="461:25" pos:end="461:32">put_le16</name><argument_list pos:start="461:33" pos:end="461:57">(<argument pos:start="461:34" pos:end="461:51"><expr pos:start="461:34" pos:end="461:51"><name pos:start="461:34" pos:end="461:46">identify_data</name> <operator pos:start="461:48" pos:end="461:48">+</operator> <literal type="number" pos:start="461:50" pos:end="461:51">62</literal></expr></argument>,<argument pos:start="461:53" pos:end="461:56"><expr pos:start="461:53" pos:end="461:56"><literal type="number" pos:start="461:53" pos:end="461:56">0x07</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt pos:start="463:25" pos:end="463:58"><expr pos:start="463:25" pos:end="463:57"><call pos:start="463:25" pos:end="463:57"><name pos:start="463:25" pos:end="463:32">put_le16</name><argument_list pos:start="463:33" pos:end="463:57">(<argument pos:start="463:34" pos:end="463:51"><expr pos:start="463:34" pos:end="463:51"><name pos:start="463:34" pos:end="463:46">identify_data</name> <operator pos:start="463:48" pos:end="463:48">+</operator> <literal type="number" pos:start="463:50" pos:end="463:51">63</literal></expr></argument>,<argument pos:start="463:53" pos:end="463:56"><expr pos:start="463:53" pos:end="463:56"><literal type="number" pos:start="463:53" pos:end="463:56">0x07</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt pos:start="465:25" pos:end="465:58"><expr pos:start="465:25" pos:end="465:57"><call pos:start="465:25" pos:end="465:57"><name pos:start="465:25" pos:end="465:32">put_le16</name><argument_list pos:start="465:33" pos:end="465:57">(<argument pos:start="465:34" pos:end="465:51"><expr pos:start="465:34" pos:end="465:51"><name pos:start="465:34" pos:end="465:46">identify_data</name> <operator pos:start="465:48" pos:end="465:48">+</operator> <literal type="number" pos:start="465:50" pos:end="465:51">88</literal></expr></argument>,<argument pos:start="465:53" pos:end="465:56"><expr pos:start="465:53" pos:end="465:56"><literal type="number" pos:start="465:53" pos:end="465:56">0x3f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<break pos:start="467:25" pos:end="467:30">break;</break>

                <case pos:start="469:17" pos:end="469:26">case <expr pos:start="469:22" pos:end="469:25"><literal type="number" pos:start="469:22" pos:end="469:25">0x02</literal></expr>:</case> <comment type="block" pos:start="469:28" pos:end="469:51">/* sigle word dma mode*/</comment>

			<expr_stmt pos:start="471:25" pos:end="471:77"><expr pos:start="471:25" pos:end="471:76"><call pos:start="471:25" pos:end="471:76"><name pos:start="471:25" pos:end="471:32">put_le16</name><argument_list pos:start="471:33" pos:end="471:76">(<argument pos:start="471:34" pos:end="471:51"><expr pos:start="471:34" pos:end="471:51"><name pos:start="471:34" pos:end="471:46">identify_data</name> <operator pos:start="471:48" pos:end="471:48">+</operator> <literal type="number" pos:start="471:50" pos:end="471:51">62</literal></expr></argument>,<argument pos:start="471:53" pos:end="471:75"><expr pos:start="471:53" pos:end="471:75"><literal type="number" pos:start="471:53" pos:end="471:56">0x07</literal> <operator pos:start="471:58" pos:end="471:58">|</operator> <operator pos:start="471:60" pos:end="471:60">(</operator><literal type="number" pos:start="471:61" pos:end="471:61">1</literal> <operator pos:start="471:63" pos:end="471:64">&lt;&lt;</operator> <operator pos:start="471:66" pos:end="471:66">(</operator><name pos:start="471:67" pos:end="471:69">val</name> <operator pos:start="471:71" pos:end="471:71">+</operator> <literal type="number" pos:start="471:73" pos:end="471:73">8</literal><operator pos:start="471:74" pos:end="471:74">)</operator><operator pos:start="471:75" pos:end="471:75">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt pos:start="473:25" pos:end="473:58"><expr pos:start="473:25" pos:end="473:57"><call pos:start="473:25" pos:end="473:57"><name pos:start="473:25" pos:end="473:32">put_le16</name><argument_list pos:start="473:33" pos:end="473:57">(<argument pos:start="473:34" pos:end="473:51"><expr pos:start="473:34" pos:end="473:51"><name pos:start="473:34" pos:end="473:46">identify_data</name> <operator pos:start="473:48" pos:end="473:48">+</operator> <literal type="number" pos:start="473:50" pos:end="473:51">63</literal></expr></argument>,<argument pos:start="473:53" pos:end="473:56"><expr pos:start="473:53" pos:end="473:56"><literal type="number" pos:start="473:53" pos:end="473:56">0x07</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt pos:start="475:25" pos:end="475:58"><expr pos:start="475:25" pos:end="475:57"><call pos:start="475:25" pos:end="475:57"><name pos:start="475:25" pos:end="475:32">put_le16</name><argument_list pos:start="475:33" pos:end="475:57">(<argument pos:start="475:34" pos:end="475:51"><expr pos:start="475:34" pos:end="475:51"><name pos:start="475:34" pos:end="475:46">identify_data</name> <operator pos:start="475:48" pos:end="475:48">+</operator> <literal type="number" pos:start="475:50" pos:end="475:51">88</literal></expr></argument>,<argument pos:start="475:53" pos:end="475:56"><expr pos:start="475:53" pos:end="475:56"><literal type="number" pos:start="475:53" pos:end="475:56">0x3f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<break pos:start="477:25" pos:end="477:30">break;</break>

		<case pos:start="479:17" pos:end="479:26">case <expr pos:start="479:22" pos:end="479:25"><literal type="number" pos:start="479:22" pos:end="479:25">0x04</literal></expr>:</case> <comment type="block" pos:start="479:28" pos:end="479:42">/* mdma mode */</comment>

			<expr_stmt pos:start="481:25" pos:end="481:58"><expr pos:start="481:25" pos:end="481:57"><call pos:start="481:25" pos:end="481:57"><name pos:start="481:25" pos:end="481:32">put_le16</name><argument_list pos:start="481:33" pos:end="481:57">(<argument pos:start="481:34" pos:end="481:51"><expr pos:start="481:34" pos:end="481:51"><name pos:start="481:34" pos:end="481:46">identify_data</name> <operator pos:start="481:48" pos:end="481:48">+</operator> <literal type="number" pos:start="481:50" pos:end="481:51">62</literal></expr></argument>,<argument pos:start="481:53" pos:end="481:56"><expr pos:start="481:53" pos:end="481:56"><literal type="number" pos:start="481:53" pos:end="481:56">0x07</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt pos:start="483:25" pos:end="483:77"><expr pos:start="483:25" pos:end="483:76"><call pos:start="483:25" pos:end="483:76"><name pos:start="483:25" pos:end="483:32">put_le16</name><argument_list pos:start="483:33" pos:end="483:76">(<argument pos:start="483:34" pos:end="483:51"><expr pos:start="483:34" pos:end="483:51"><name pos:start="483:34" pos:end="483:46">identify_data</name> <operator pos:start="483:48" pos:end="483:48">+</operator> <literal type="number" pos:start="483:50" pos:end="483:51">63</literal></expr></argument>,<argument pos:start="483:53" pos:end="483:75"><expr pos:start="483:53" pos:end="483:75"><literal type="number" pos:start="483:53" pos:end="483:56">0x07</literal> <operator pos:start="483:58" pos:end="483:58">|</operator> <operator pos:start="483:60" pos:end="483:60">(</operator><literal type="number" pos:start="483:61" pos:end="483:61">1</literal> <operator pos:start="483:63" pos:end="483:64">&lt;&lt;</operator> <operator pos:start="483:66" pos:end="483:66">(</operator><name pos:start="483:67" pos:end="483:69">val</name> <operator pos:start="483:71" pos:end="483:71">+</operator> <literal type="number" pos:start="483:73" pos:end="483:73">8</literal><operator pos:start="483:74" pos:end="483:74">)</operator><operator pos:start="483:75" pos:end="483:75">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt pos:start="485:25" pos:end="485:58"><expr pos:start="485:25" pos:end="485:57"><call pos:start="485:25" pos:end="485:57"><name pos:start="485:25" pos:end="485:32">put_le16</name><argument_list pos:start="485:33" pos:end="485:57">(<argument pos:start="485:34" pos:end="485:51"><expr pos:start="485:34" pos:end="485:51"><name pos:start="485:34" pos:end="485:46">identify_data</name> <operator pos:start="485:48" pos:end="485:48">+</operator> <literal type="number" pos:start="485:50" pos:end="485:51">88</literal></expr></argument>,<argument pos:start="485:53" pos:end="485:56"><expr pos:start="485:53" pos:end="485:56"><literal type="number" pos:start="485:53" pos:end="485:56">0x3f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<break pos:start="487:25" pos:end="487:30">break;</break>

		<case pos:start="489:17" pos:end="489:26">case <expr pos:start="489:22" pos:end="489:25"><literal type="number" pos:start="489:22" pos:end="489:25">0x08</literal></expr>:</case> <comment type="block" pos:start="489:28" pos:end="489:42">/* udma mode */</comment>

			<expr_stmt pos:start="491:25" pos:end="491:58"><expr pos:start="491:25" pos:end="491:57"><call pos:start="491:25" pos:end="491:57"><name pos:start="491:25" pos:end="491:32">put_le16</name><argument_list pos:start="491:33" pos:end="491:57">(<argument pos:start="491:34" pos:end="491:51"><expr pos:start="491:34" pos:end="491:51"><name pos:start="491:34" pos:end="491:46">identify_data</name> <operator pos:start="491:48" pos:end="491:48">+</operator> <literal type="number" pos:start="491:50" pos:end="491:51">62</literal></expr></argument>,<argument pos:start="491:53" pos:end="491:56"><expr pos:start="491:53" pos:end="491:56"><literal type="number" pos:start="491:53" pos:end="491:56">0x07</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt pos:start="493:25" pos:end="493:58"><expr pos:start="493:25" pos:end="493:57"><call pos:start="493:25" pos:end="493:57"><name pos:start="493:25" pos:end="493:32">put_le16</name><argument_list pos:start="493:33" pos:end="493:57">(<argument pos:start="493:34" pos:end="493:51"><expr pos:start="493:34" pos:end="493:51"><name pos:start="493:34" pos:end="493:46">identify_data</name> <operator pos:start="493:48" pos:end="493:48">+</operator> <literal type="number" pos:start="493:50" pos:end="493:51">63</literal></expr></argument>,<argument pos:start="493:53" pos:end="493:56"><expr pos:start="493:53" pos:end="493:56"><literal type="number" pos:start="493:53" pos:end="493:56">0x07</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt pos:start="495:25" pos:end="495:77"><expr pos:start="495:25" pos:end="495:76"><call pos:start="495:25" pos:end="495:76"><name pos:start="495:25" pos:end="495:32">put_le16</name><argument_list pos:start="495:33" pos:end="495:76">(<argument pos:start="495:34" pos:end="495:51"><expr pos:start="495:34" pos:end="495:51"><name pos:start="495:34" pos:end="495:46">identify_data</name> <operator pos:start="495:48" pos:end="495:48">+</operator> <literal type="number" pos:start="495:50" pos:end="495:51">88</literal></expr></argument>,<argument pos:start="495:53" pos:end="495:75"><expr pos:start="495:53" pos:end="495:75"><literal type="number" pos:start="495:53" pos:end="495:56">0x3f</literal> <operator pos:start="495:58" pos:end="495:58">|</operator> <operator pos:start="495:60" pos:end="495:60">(</operator><literal type="number" pos:start="495:61" pos:end="495:61">1</literal> <operator pos:start="495:63" pos:end="495:64">&lt;&lt;</operator> <operator pos:start="495:66" pos:end="495:66">(</operator><name pos:start="495:67" pos:end="495:69">val</name> <operator pos:start="495:71" pos:end="495:71">+</operator> <literal type="number" pos:start="495:73" pos:end="495:73">8</literal><operator pos:start="495:74" pos:end="495:74">)</operator><operator pos:start="495:75" pos:end="495:75">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<break pos:start="497:25" pos:end="497:30">break;</break>

		<default pos:start="499:17" pos:end="499:24">default:</default>

			<goto pos:start="501:25" pos:end="501:39">goto <name pos:start="501:30" pos:end="501:38">abort_cmd</name>;</goto>

		</block_content>}</block></switch>

            <expr_stmt pos:start="505:13" pos:end="505:47"><expr pos:start="505:13" pos:end="505:46"><name pos:start="505:13" pos:end="505:21"><name pos:start="505:13" pos:end="505:13">s</name><operator pos:start="505:14" pos:end="505:15">-&gt;</operator><name pos:start="505:16" pos:end="505:21">status</name></name> <operator pos:start="505:23" pos:end="505:23">=</operator> <name pos:start="505:25" pos:end="505:34">READY_STAT</name> <operator pos:start="505:36" pos:end="505:36">|</operator> <name pos:start="505:38" pos:end="505:46">SEEK_STAT</name></expr>;</expr_stmt>

            <expr_stmt pos:start="507:13" pos:end="507:32"><expr pos:start="507:13" pos:end="507:31"><call pos:start="507:13" pos:end="507:31"><name pos:start="507:13" pos:end="507:23">ide_set_irq</name><argument_list pos:start="507:24" pos:end="507:31">(<argument pos:start="507:25" pos:end="507:30"><expr pos:start="507:25" pos:end="507:30"><name pos:start="507:25" pos:end="507:30"><name pos:start="507:25" pos:end="507:25">s</name><operator pos:start="507:26" pos:end="507:27">-&gt;</operator><name pos:start="507:28" pos:end="507:30">bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="509:13" pos:end="509:18">break;</break>

	</block_content>}</block>

        <default pos:start="513:9" pos:end="513:16">default:</default>

            <goto pos:start="515:13" pos:end="515:27">goto <name pos:start="515:18" pos:end="515:26">abort_cmd</name>;</goto>

        </block_content>}</block></switch>

        <break pos:start="519:9" pos:end="519:14">break;</break>

    <case pos:start="521:5" pos:end="521:25">case <expr pos:start="521:10" pos:end="521:24"><name pos:start="521:10" pos:end="521:24">WIN_FLUSH_CACHE</name></expr>:</case>

    <case pos:start="523:5" pos:end="523:29">case <expr pos:start="523:10" pos:end="523:28"><name pos:start="523:10" pos:end="523:28">WIN_FLUSH_CACHE_EXT</name></expr>:</case>

        <expr_stmt pos:start="525:9" pos:end="525:27"><expr pos:start="525:9" pos:end="525:26"><call pos:start="525:9" pos:end="525:26"><name pos:start="525:9" pos:end="525:23">ide_flush_cache</name><argument_list pos:start="525:24" pos:end="525:26">(<argument pos:start="525:25" pos:end="525:25"><expr pos:start="525:25" pos:end="525:25"><name pos:start="525:25" pos:end="525:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="527:9" pos:end="527:14">break;</break>

    <case pos:start="529:5" pos:end="529:18">case <expr pos:start="529:10" pos:end="529:17"><name pos:start="529:10" pos:end="529:17">WIN_SEEK</name></expr>:</case>

        <comment type="block" pos:start="531:9" pos:end="531:51">/* XXX: Check that seek is within bounds */</comment>

        <expr_stmt pos:start="533:9" pos:end="533:43"><expr pos:start="533:9" pos:end="533:42"><name pos:start="533:9" pos:end="533:17"><name pos:start="533:9" pos:end="533:9">s</name><operator pos:start="533:10" pos:end="533:11">-&gt;</operator><name pos:start="533:12" pos:end="533:17">status</name></name> <operator pos:start="533:19" pos:end="533:19">=</operator> <name pos:start="533:21" pos:end="533:30">READY_STAT</name> <operator pos:start="533:32" pos:end="533:32">|</operator> <name pos:start="533:34" pos:end="533:42">SEEK_STAT</name></expr>;</expr_stmt>

        <expr_stmt pos:start="535:9" pos:end="535:28"><expr pos:start="535:9" pos:end="535:27"><call pos:start="535:9" pos:end="535:27"><name pos:start="535:9" pos:end="535:19">ide_set_irq</name><argument_list pos:start="535:20" pos:end="535:27">(<argument pos:start="535:21" pos:end="535:26"><expr pos:start="535:21" pos:end="535:26"><name pos:start="535:21" pos:end="535:26"><name pos:start="535:21" pos:end="535:21">s</name><operator pos:start="535:22" pos:end="535:23">-&gt;</operator><name pos:start="535:24" pos:end="535:26">bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="537:9" pos:end="537:14">break;</break>

        <comment type="block" pos:start="539:9" pos:end="539:28">/* ATAPI commands */</comment>

    <case pos:start="541:5" pos:end="541:23">case <expr pos:start="541:10" pos:end="541:22"><name pos:start="541:10" pos:end="541:22">WIN_PIDENTIFY</name></expr>:</case>

        <expr_stmt pos:start="543:9" pos:end="543:30"><expr pos:start="543:9" pos:end="543:29"><call pos:start="543:9" pos:end="543:29"><name pos:start="543:9" pos:end="543:26">ide_atapi_identify</name><argument_list pos:start="543:27" pos:end="543:29">(<argument pos:start="543:28" pos:end="543:28"><expr pos:start="543:28" pos:end="543:28"><name pos:start="543:28" pos:end="543:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="545:9" pos:end="545:43"><expr pos:start="545:9" pos:end="545:42"><name pos:start="545:9" pos:end="545:17"><name pos:start="545:9" pos:end="545:9">s</name><operator pos:start="545:10" pos:end="545:11">-&gt;</operator><name pos:start="545:12" pos:end="545:17">status</name></name> <operator pos:start="545:19" pos:end="545:19">=</operator> <name pos:start="545:21" pos:end="545:30">READY_STAT</name> <operator pos:start="545:32" pos:end="545:32">|</operator> <name pos:start="545:34" pos:end="545:42">SEEK_STAT</name></expr>;</expr_stmt>

        <expr_stmt pos:start="547:9" pos:end="547:68"><expr pos:start="547:9" pos:end="547:67"><call pos:start="547:9" pos:end="547:67"><name pos:start="547:9" pos:end="547:26">ide_transfer_start</name><argument_list pos:start="547:27" pos:end="547:67">(<argument pos:start="547:28" pos:end="547:28"><expr pos:start="547:28" pos:end="547:28"><name pos:start="547:28" pos:end="547:28">s</name></expr></argument>, <argument pos:start="547:31" pos:end="547:42"><expr pos:start="547:31" pos:end="547:42"><name pos:start="547:31" pos:end="547:42"><name pos:start="547:31" pos:end="547:31">s</name><operator pos:start="547:32" pos:end="547:33">-&gt;</operator><name pos:start="547:34" pos:end="547:42">io_buffer</name></name></expr></argument>, <argument pos:start="547:45" pos:end="547:47"><expr pos:start="547:45" pos:end="547:47"><literal type="number" pos:start="547:45" pos:end="547:47">512</literal></expr></argument>, <argument pos:start="547:50" pos:end="547:66"><expr pos:start="547:50" pos:end="547:66"><name pos:start="547:50" pos:end="547:66">ide_transfer_stop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="549:9" pos:end="549:28"><expr pos:start="549:9" pos:end="549:27"><call pos:start="549:9" pos:end="549:27"><name pos:start="549:9" pos:end="549:19">ide_set_irq</name><argument_list pos:start="549:20" pos:end="549:27">(<argument pos:start="549:21" pos:end="549:26"><expr pos:start="549:21" pos:end="549:26"><name pos:start="549:21" pos:end="549:26"><name pos:start="549:21" pos:end="549:21">s</name><operator pos:start="549:22" pos:end="549:23">-&gt;</operator><name pos:start="549:24" pos:end="549:26">bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="551:9" pos:end="551:14">break;</break>

    <case pos:start="553:5" pos:end="553:22">case <expr pos:start="553:10" pos:end="553:21"><name pos:start="553:10" pos:end="553:21">WIN_DIAGNOSE</name></expr>:</case>

        <expr_stmt pos:start="555:9" pos:end="555:29"><expr pos:start="555:9" pos:end="555:28"><call pos:start="555:9" pos:end="555:28"><name pos:start="555:9" pos:end="555:25">ide_set_signature</name><argument_list pos:start="555:26" pos:end="555:28">(<argument pos:start="555:27" pos:end="555:27"><expr pos:start="555:27" pos:end="555:27"><name pos:start="555:27" pos:end="555:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="557:9" pos:end="567:47"><if pos:start="557:9" pos:end="559:26">if <condition pos:start="557:12" pos:end="557:36">(<expr pos:start="557:13" pos:end="557:35"><name pos:start="557:13" pos:end="557:25"><name pos:start="557:13" pos:end="557:13">s</name><operator pos:start="557:14" pos:end="557:15">-&gt;</operator><name pos:start="557:16" pos:end="557:25">drive_kind</name></name> <operator pos:start="557:27" pos:end="557:28">==</operator> <name pos:start="557:30" pos:end="557:35">IDE_CD</name></expr>)</condition><block type="pseudo" pos:start="559:13" pos:end="559:26"><block_content pos:start="559:13" pos:end="559:26">

            <expr_stmt pos:start="559:13" pos:end="559:26"><expr pos:start="559:13" pos:end="559:25"><name pos:start="559:13" pos:end="559:21"><name pos:start="559:13" pos:end="559:13">s</name><operator pos:start="559:14" pos:end="559:15">-&gt;</operator><name pos:start="559:16" pos:end="559:21">status</name></name> <operator pos:start="559:23" pos:end="559:23">=</operator> <literal type="number" pos:start="559:25" pos:end="559:25">0</literal></expr>;</expr_stmt></block_content></block></if> <comment type="block" pos:start="559:28" pos:end="563:59">/* ATAPI spec (v6) section 9.10 defines packet

                            * devices to return a clear status register

                            * with READY_STAT *not* set. */</comment>

        <else pos:start="565:9" pos:end="567:47">else<block type="pseudo" pos:start="567:13" pos:end="567:47"><block_content pos:start="567:13" pos:end="567:47">

            <expr_stmt pos:start="567:13" pos:end="567:47"><expr pos:start="567:13" pos:end="567:46"><name pos:start="567:13" pos:end="567:21"><name pos:start="567:13" pos:end="567:13">s</name><operator pos:start="567:14" pos:end="567:15">-&gt;</operator><name pos:start="567:16" pos:end="567:21">status</name></name> <operator pos:start="567:23" pos:end="567:23">=</operator> <name pos:start="567:25" pos:end="567:34">READY_STAT</name> <operator pos:start="567:36" pos:end="567:36">|</operator> <name pos:start="567:38" pos:end="567:46">SEEK_STAT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="569:9" pos:end="569:24"><expr pos:start="569:9" pos:end="569:23"><name pos:start="569:9" pos:end="569:16"><name pos:start="569:9" pos:end="569:9">s</name><operator pos:start="569:10" pos:end="569:11">-&gt;</operator><name pos:start="569:12" pos:end="569:16">error</name></name> <operator pos:start="569:18" pos:end="569:18">=</operator> <literal type="number" pos:start="569:20" pos:end="569:23">0x01</literal></expr>;</expr_stmt> <comment type="block" pos:start="569:26" pos:end="573:28">/* Device 0 passed, Device 1 passed or not

                          * present.

                          */</comment>

        <expr_stmt pos:start="575:9" pos:end="575:28"><expr pos:start="575:9" pos:end="575:27"><call pos:start="575:9" pos:end="575:27"><name pos:start="575:9" pos:end="575:19">ide_set_irq</name><argument_list pos:start="575:20" pos:end="575:27">(<argument pos:start="575:21" pos:end="575:26"><expr pos:start="575:21" pos:end="575:26"><name pos:start="575:21" pos:end="575:26"><name pos:start="575:21" pos:end="575:21">s</name><operator pos:start="575:22" pos:end="575:23">-&gt;</operator><name pos:start="575:24" pos:end="575:26">bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="577:9" pos:end="577:14">break;</break>

    <case pos:start="579:5" pos:end="579:26">case <expr pos:start="579:10" pos:end="579:25"><name pos:start="579:10" pos:end="579:25">WIN_DEVICE_RESET</name></expr>:</case>

        <expr_stmt pos:start="581:9" pos:end="581:29"><expr pos:start="581:9" pos:end="581:28"><call pos:start="581:9" pos:end="581:28"><name pos:start="581:9" pos:end="581:25">ide_set_signature</name><argument_list pos:start="581:26" pos:end="581:28">(<argument pos:start="581:27" pos:end="581:27"><expr pos:start="581:27" pos:end="581:27"><name pos:start="581:27" pos:end="581:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="583:9" pos:end="583:25"><expr pos:start="583:9" pos:end="583:24"><name pos:start="583:9" pos:end="583:17"><name pos:start="583:9" pos:end="583:9">s</name><operator pos:start="583:10" pos:end="583:11">-&gt;</operator><name pos:start="583:12" pos:end="583:17">status</name></name> <operator pos:start="583:19" pos:end="583:19">=</operator> <literal type="number" pos:start="583:21" pos:end="583:24">0x00</literal></expr>;</expr_stmt> <comment type="block" pos:start="583:27" pos:end="583:56">/* NOTE: READY is _not_ set */</comment>

        <expr_stmt pos:start="585:9" pos:end="585:24"><expr pos:start="585:9" pos:end="585:23"><name pos:start="585:9" pos:end="585:16"><name pos:start="585:9" pos:end="585:9">s</name><operator pos:start="585:10" pos:end="585:11">-&gt;</operator><name pos:start="585:12" pos:end="585:16">error</name></name> <operator pos:start="585:18" pos:end="585:18">=</operator> <literal type="number" pos:start="585:20" pos:end="585:23">0x01</literal></expr>;</expr_stmt>

        <break pos:start="587:9" pos:end="587:14">break;</break>

    <case pos:start="589:5" pos:end="589:23">case <expr pos:start="589:10" pos:end="589:22"><name pos:start="589:10" pos:end="589:22">WIN_PACKETCMD</name></expr>:</case>

        <comment type="block" pos:start="591:9" pos:end="591:48">/* overlapping commands not supported */</comment>

        <if_stmt pos:start="593:9" pos:end="595:27"><if pos:start="593:9" pos:end="595:27">if <condition pos:start="593:12" pos:end="593:30">(<expr pos:start="593:13" pos:end="593:29"><name pos:start="593:13" pos:end="593:22"><name pos:start="593:13" pos:end="593:13">s</name><operator pos:start="593:14" pos:end="593:15">-&gt;</operator><name pos:start="593:16" pos:end="593:22">feature</name></name> <operator pos:start="593:24" pos:end="593:24">&amp;</operator> <literal type="number" pos:start="593:26" pos:end="593:29">0x02</literal></expr>)</condition><block type="pseudo" pos:start="595:13" pos:end="595:27"><block_content pos:start="595:13" pos:end="595:27">

            <goto pos:start="595:13" pos:end="595:27">goto <name pos:start="595:18" pos:end="595:26">abort_cmd</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="597:9" pos:end="597:43"><expr pos:start="597:9" pos:end="597:42"><name pos:start="597:9" pos:end="597:17"><name pos:start="597:9" pos:end="597:9">s</name><operator pos:start="597:10" pos:end="597:11">-&gt;</operator><name pos:start="597:12" pos:end="597:17">status</name></name> <operator pos:start="597:19" pos:end="597:19">=</operator> <name pos:start="597:21" pos:end="597:30">READY_STAT</name> <operator pos:start="597:32" pos:end="597:32">|</operator> <name pos:start="597:34" pos:end="597:42">SEEK_STAT</name></expr>;</expr_stmt>

        <expr_stmt pos:start="599:9" pos:end="599:38"><expr pos:start="599:9" pos:end="599:37"><name pos:start="599:9" pos:end="599:20"><name pos:start="599:9" pos:end="599:9">s</name><operator pos:start="599:10" pos:end="599:11">-&gt;</operator><name pos:start="599:12" pos:end="599:20">atapi_dma</name></name> <operator pos:start="599:22" pos:end="599:22">=</operator> <name pos:start="599:24" pos:end="599:33"><name pos:start="599:24" pos:end="599:24">s</name><operator pos:start="599:25" pos:end="599:26">-&gt;</operator><name pos:start="599:27" pos:end="599:33">feature</name></name> <operator pos:start="599:35" pos:end="599:35">&amp;</operator> <literal type="number" pos:start="599:37" pos:end="599:37">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="601:9" pos:end="601:23"><expr pos:start="601:9" pos:end="601:22"><name pos:start="601:9" pos:end="601:18"><name pos:start="601:9" pos:end="601:9">s</name><operator pos:start="601:10" pos:end="601:11">-&gt;</operator><name pos:start="601:12" pos:end="601:18">nsector</name></name> <operator pos:start="601:20" pos:end="601:20">=</operator> <literal type="number" pos:start="601:22" pos:end="601:22">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="603:9" pos:end="605:42"><expr pos:start="603:9" pos:end="605:41"><call pos:start="603:9" pos:end="605:41"><name pos:start="603:9" pos:end="603:26">ide_transfer_start</name><argument_list pos:start="603:27" pos:end="605:41">(<argument pos:start="603:28" pos:end="603:28"><expr pos:start="603:28" pos:end="603:28"><name pos:start="603:28" pos:end="603:28">s</name></expr></argument>, <argument pos:start="603:31" pos:end="603:42"><expr pos:start="603:31" pos:end="603:42"><name pos:start="603:31" pos:end="603:42"><name pos:start="603:31" pos:end="603:31">s</name><operator pos:start="603:32" pos:end="603:33">-&gt;</operator><name pos:start="603:34" pos:end="603:42">io_buffer</name></name></expr></argument>, <argument pos:start="603:45" pos:end="603:61"><expr pos:start="603:45" pos:end="603:61"><name pos:start="603:45" pos:end="603:61">ATAPI_PACKET_SIZE</name></expr></argument>,

                           <argument pos:start="605:28" pos:end="605:40"><expr pos:start="605:28" pos:end="605:40"><name pos:start="605:28" pos:end="605:40">ide_atapi_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="607:9" pos:end="607:14">break;</break>

    <comment type="block" pos:start="609:5" pos:end="609:25">/* CF-ATA commands */</comment>

    <case pos:start="611:5" pos:end="611:32">case <expr pos:start="611:10" pos:end="611:31"><name pos:start="611:10" pos:end="611:31">CFA_REQ_EXT_ERROR_CODE</name></expr>:</case>

        <expr_stmt pos:start="613:9" pos:end="613:24"><expr pos:start="613:9" pos:end="613:23"><name pos:start="613:9" pos:end="613:16"><name pos:start="613:9" pos:end="613:9">s</name><operator pos:start="613:10" pos:end="613:11">-&gt;</operator><name pos:start="613:12" pos:end="613:16">error</name></name> <operator pos:start="613:18" pos:end="613:18">=</operator> <literal type="number" pos:start="613:20" pos:end="613:23">0x09</literal></expr>;</expr_stmt>    <comment type="block" pos:start="613:29" pos:end="613:53">/* miscellaneous error */</comment>

        <expr_stmt pos:start="615:9" pos:end="615:43"><expr pos:start="615:9" pos:end="615:42"><name pos:start="615:9" pos:end="615:17"><name pos:start="615:9" pos:end="615:9">s</name><operator pos:start="615:10" pos:end="615:11">-&gt;</operator><name pos:start="615:12" pos:end="615:17">status</name></name> <operator pos:start="615:19" pos:end="615:19">=</operator> <name pos:start="615:21" pos:end="615:30">READY_STAT</name> <operator pos:start="615:32" pos:end="615:32">|</operator> <name pos:start="615:34" pos:end="615:42">SEEK_STAT</name></expr>;</expr_stmt>

        <expr_stmt pos:start="617:9" pos:end="617:28"><expr pos:start="617:9" pos:end="617:27"><call pos:start="617:9" pos:end="617:27"><name pos:start="617:9" pos:end="617:19">ide_set_irq</name><argument_list pos:start="617:20" pos:end="617:27">(<argument pos:start="617:21" pos:end="617:26"><expr pos:start="617:21" pos:end="617:26"><name pos:start="617:21" pos:end="617:26"><name pos:start="617:21" pos:end="617:21">s</name><operator pos:start="617:22" pos:end="617:23">-&gt;</operator><name pos:start="617:24" pos:end="617:26">bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="619:9" pos:end="619:14">break;</break>

    <case pos:start="621:5" pos:end="621:27">case <expr pos:start="621:10" pos:end="621:26"><name pos:start="621:10" pos:end="621:26">CFA_ERASE_SECTORS</name></expr>:</case>

    <case pos:start="623:5" pos:end="634:0">case <expr pos:start="623:10" pos:end="623:23"><name pos:start="623:10" pos:end="623:23">CFA_WEAR_LEVEL</name></expr>:</case>

<cpp:if pos:start="625:1" pos:end="625:5">#<cpp:directive pos:start="625:2" pos:end="625:3">if</cpp:directive> <expr pos:start="625:5" pos:end="625:5"><literal type="number" pos:start="625:5" pos:end="625:5">0</literal></expr></cpp:if>

    <comment type="block" pos:start="627:5" pos:end="629:37">/* This one has the same ID as CFA_WEAR_LEVEL and is required for

       Windows 8 to work with AHCI */</comment>

    case WIN_SECURITY_FREEZE_LOCK:

<cpp:endif pos:start="633:1" pos:end="633:6">#<cpp:directive pos:start="633:2" pos:end="633:6">endif</cpp:directive></cpp:endif>

        <if_stmt pos:start="635:9" pos:end="637:27"><if pos:start="635:9" pos:end="637:27">if <condition pos:start="635:12" pos:end="635:34">(<expr pos:start="635:13" pos:end="635:33"><name pos:start="635:13" pos:end="635:15">val</name> <operator pos:start="635:17" pos:end="635:18">==</operator> <name pos:start="635:20" pos:end="635:33">CFA_WEAR_LEVEL</name></expr>)</condition><block type="pseudo" pos:start="637:13" pos:end="637:27"><block_content pos:start="637:13" pos:end="637:27">

            <expr_stmt pos:start="637:13" pos:end="637:27"><expr pos:start="637:13" pos:end="637:26"><name pos:start="637:13" pos:end="637:22"><name pos:start="637:13" pos:end="637:13">s</name><operator pos:start="637:14" pos:end="637:15">-&gt;</operator><name pos:start="637:16" pos:end="637:22">nsector</name></name> <operator pos:start="637:24" pos:end="637:24">=</operator> <literal type="number" pos:start="637:26" pos:end="637:26">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="639:9" pos:end="641:33"><if pos:start="639:9" pos:end="641:33">if <condition pos:start="639:12" pos:end="639:37">(<expr pos:start="639:13" pos:end="639:36"><name pos:start="639:13" pos:end="639:15">val</name> <operator pos:start="639:17" pos:end="639:18">==</operator> <name pos:start="639:20" pos:end="639:36">CFA_ERASE_SECTORS</name></expr>)</condition><block type="pseudo" pos:start="641:13" pos:end="641:33"><block_content pos:start="641:13" pos:end="641:33">

            <expr_stmt pos:start="641:13" pos:end="641:33"><expr pos:start="641:13" pos:end="641:32"><name pos:start="641:13" pos:end="641:28"><name pos:start="641:13" pos:end="641:13">s</name><operator pos:start="641:14" pos:end="641:15">-&gt;</operator><name pos:start="641:16" pos:end="641:28">media_changed</name></name> <operator pos:start="641:30" pos:end="641:30">=</operator> <literal type="number" pos:start="641:32" pos:end="641:32">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="643:9" pos:end="643:24"><expr pos:start="643:9" pos:end="643:23"><name pos:start="643:9" pos:end="643:16"><name pos:start="643:9" pos:end="643:9">s</name><operator pos:start="643:10" pos:end="643:11">-&gt;</operator><name pos:start="643:12" pos:end="643:16">error</name></name> <operator pos:start="643:18" pos:end="643:18">=</operator> <literal type="number" pos:start="643:20" pos:end="643:23">0x00</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="645:9" pos:end="645:43"><expr pos:start="645:9" pos:end="645:42"><name pos:start="645:9" pos:end="645:17"><name pos:start="645:9" pos:end="645:9">s</name><operator pos:start="645:10" pos:end="645:11">-&gt;</operator><name pos:start="645:12" pos:end="645:17">status</name></name> <operator pos:start="645:19" pos:end="645:19">=</operator> <name pos:start="645:21" pos:end="645:30">READY_STAT</name> <operator pos:start="645:32" pos:end="645:32">|</operator> <name pos:start="645:34" pos:end="645:42">SEEK_STAT</name></expr>;</expr_stmt>

        <expr_stmt pos:start="647:9" pos:end="647:28"><expr pos:start="647:9" pos:end="647:27"><call pos:start="647:9" pos:end="647:27"><name pos:start="647:9" pos:end="647:19">ide_set_irq</name><argument_list pos:start="647:20" pos:end="647:27">(<argument pos:start="647:21" pos:end="647:26"><expr pos:start="647:21" pos:end="647:26"><name pos:start="647:21" pos:end="647:26"><name pos:start="647:21" pos:end="647:21">s</name><operator pos:start="647:22" pos:end="647:23">-&gt;</operator><name pos:start="647:24" pos:end="647:26">bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="649:9" pos:end="649:14">break;</break>

    <case pos:start="651:5" pos:end="651:30">case <expr pos:start="651:10" pos:end="651:29"><name pos:start="651:10" pos:end="651:29">CFA_TRANSLATE_SECTOR</name></expr>:</case>

        <expr_stmt pos:start="653:9" pos:end="653:24"><expr pos:start="653:9" pos:end="653:23"><name pos:start="653:9" pos:end="653:16"><name pos:start="653:9" pos:end="653:9">s</name><operator pos:start="653:10" pos:end="653:11">-&gt;</operator><name pos:start="653:12" pos:end="653:16">error</name></name> <operator pos:start="653:18" pos:end="653:18">=</operator> <literal type="number" pos:start="653:20" pos:end="653:23">0x00</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="655:9" pos:end="655:43"><expr pos:start="655:9" pos:end="655:42"><name pos:start="655:9" pos:end="655:17"><name pos:start="655:9" pos:end="655:9">s</name><operator pos:start="655:10" pos:end="655:11">-&gt;</operator><name pos:start="655:12" pos:end="655:17">status</name></name> <operator pos:start="655:19" pos:end="655:19">=</operator> <name pos:start="655:21" pos:end="655:30">READY_STAT</name> <operator pos:start="655:32" pos:end="655:32">|</operator> <name pos:start="655:34" pos:end="655:42">SEEK_STAT</name></expr>;</expr_stmt>

        <expr_stmt pos:start="657:9" pos:end="657:39"><expr pos:start="657:9" pos:end="657:38"><call pos:start="657:9" pos:end="657:38"><name pos:start="657:9" pos:end="657:14">memset</name><argument_list pos:start="657:15" pos:end="657:38">(<argument pos:start="657:16" pos:end="657:27"><expr pos:start="657:16" pos:end="657:27"><name pos:start="657:16" pos:end="657:27"><name pos:start="657:16" pos:end="657:16">s</name><operator pos:start="657:17" pos:end="657:18">-&gt;</operator><name pos:start="657:19" pos:end="657:27">io_buffer</name></name></expr></argument>, <argument pos:start="657:30" pos:end="657:30"><expr pos:start="657:30" pos:end="657:30"><literal type="number" pos:start="657:30" pos:end="657:30">0</literal></expr></argument>, <argument pos:start="657:33" pos:end="657:37"><expr pos:start="657:33" pos:end="657:37"><literal type="number" pos:start="657:33" pos:end="657:37">0x200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="659:9" pos:end="659:37"><expr pos:start="659:9" pos:end="659:36"><name pos:start="659:9" pos:end="659:26"><name pos:start="659:9" pos:end="659:9">s</name><operator pos:start="659:10" pos:end="659:11">-&gt;</operator><name pos:start="659:12" pos:end="659:20">io_buffer</name><index pos:start="659:21" pos:end="659:26">[<expr pos:start="659:22" pos:end="659:25"><literal type="number" pos:start="659:22" pos:end="659:25">0x00</literal></expr>]</index></name> <operator pos:start="659:28" pos:end="659:28">=</operator> <name pos:start="659:30" pos:end="659:36"><name pos:start="659:30" pos:end="659:30">s</name><operator pos:start="659:31" pos:end="659:32">-&gt;</operator><name pos:start="659:33" pos:end="659:36">hcyl</name></name></expr>;</expr_stmt>			<comment type="block" pos:start="659:57" pos:end="659:69">/* Cyl MSB */</comment>

        <expr_stmt pos:start="661:9" pos:end="661:37"><expr pos:start="661:9" pos:end="661:36"><name pos:start="661:9" pos:end="661:26"><name pos:start="661:9" pos:end="661:9">s</name><operator pos:start="661:10" pos:end="661:11">-&gt;</operator><name pos:start="661:12" pos:end="661:20">io_buffer</name><index pos:start="661:21" pos:end="661:26">[<expr pos:start="661:22" pos:end="661:25"><literal type="number" pos:start="661:22" pos:end="661:25">0x01</literal></expr>]</index></name> <operator pos:start="661:28" pos:end="661:28">=</operator> <name pos:start="661:30" pos:end="661:36"><name pos:start="661:30" pos:end="661:30">s</name><operator pos:start="661:31" pos:end="661:32">-&gt;</operator><name pos:start="661:33" pos:end="661:36">lcyl</name></name></expr>;</expr_stmt>			<comment type="block" pos:start="661:57" pos:end="661:69">/* Cyl LSB */</comment>

        <expr_stmt pos:start="663:9" pos:end="663:39"><expr pos:start="663:9" pos:end="663:38"><name pos:start="663:9" pos:end="663:26"><name pos:start="663:9" pos:end="663:9">s</name><operator pos:start="663:10" pos:end="663:11">-&gt;</operator><name pos:start="663:12" pos:end="663:20">io_buffer</name><index pos:start="663:21" pos:end="663:26">[<expr pos:start="663:22" pos:end="663:25"><literal type="number" pos:start="663:22" pos:end="663:25">0x02</literal></expr>]</index></name> <operator pos:start="663:28" pos:end="663:28">=</operator> <name pos:start="663:30" pos:end="663:38"><name pos:start="663:30" pos:end="663:30">s</name><operator pos:start="663:31" pos:end="663:32">-&gt;</operator><name pos:start="663:33" pos:end="663:38">select</name></name></expr>;</expr_stmt>			<comment type="block" pos:start="663:57" pos:end="663:66">/* Head */</comment>

        <expr_stmt pos:start="665:9" pos:end="665:39"><expr pos:start="665:9" pos:end="665:38"><name pos:start="665:9" pos:end="665:26"><name pos:start="665:9" pos:end="665:9">s</name><operator pos:start="665:10" pos:end="665:11">-&gt;</operator><name pos:start="665:12" pos:end="665:20">io_buffer</name><index pos:start="665:21" pos:end="665:26">[<expr pos:start="665:22" pos:end="665:25"><literal type="number" pos:start="665:22" pos:end="665:25">0x03</literal></expr>]</index></name> <operator pos:start="665:28" pos:end="665:28">=</operator> <name pos:start="665:30" pos:end="665:38"><name pos:start="665:30" pos:end="665:30">s</name><operator pos:start="665:31" pos:end="665:32">-&gt;</operator><name pos:start="665:33" pos:end="665:38">sector</name></name></expr>;</expr_stmt>			<comment type="block" pos:start="665:57" pos:end="665:68">/* Sector */</comment>

        <expr_stmt pos:start="667:9" pos:end="667:53"><expr pos:start="667:9" pos:end="667:52"><name pos:start="667:9" pos:end="667:26"><name pos:start="667:9" pos:end="667:9">s</name><operator pos:start="667:10" pos:end="667:11">-&gt;</operator><name pos:start="667:12" pos:end="667:20">io_buffer</name><index pos:start="667:21" pos:end="667:26">[<expr pos:start="667:22" pos:end="667:25"><literal type="number" pos:start="667:22" pos:end="667:25">0x04</literal></expr>]</index></name> <operator pos:start="667:28" pos:end="667:28">=</operator> <call pos:start="667:30" pos:end="667:46"><name pos:start="667:30" pos:end="667:43">ide_get_sector</name><argument_list pos:start="667:44" pos:end="667:46">(<argument pos:start="667:45" pos:end="667:45"><expr pos:start="667:45" pos:end="667:45"><name pos:start="667:45" pos:end="667:45">s</name></expr></argument>)</argument_list></call> <operator pos:start="667:48" pos:end="667:49">&gt;&gt;</operator> <literal type="number" pos:start="667:51" pos:end="667:52">16</literal></expr>;</expr_stmt>	<comment type="block" pos:start="667:57" pos:end="667:69">/* LBA MSB */</comment>

        <expr_stmt pos:start="669:9" pos:end="669:52"><expr pos:start="669:9" pos:end="669:51"><name pos:start="669:9" pos:end="669:26"><name pos:start="669:9" pos:end="669:9">s</name><operator pos:start="669:10" pos:end="669:11">-&gt;</operator><name pos:start="669:12" pos:end="669:20">io_buffer</name><index pos:start="669:21" pos:end="669:26">[<expr pos:start="669:22" pos:end="669:25"><literal type="number" pos:start="669:22" pos:end="669:25">0x05</literal></expr>]</index></name> <operator pos:start="669:28" pos:end="669:28">=</operator> <call pos:start="669:30" pos:end="669:46"><name pos:start="669:30" pos:end="669:43">ide_get_sector</name><argument_list pos:start="669:44" pos:end="669:46">(<argument pos:start="669:45" pos:end="669:45"><expr pos:start="669:45" pos:end="669:45"><name pos:start="669:45" pos:end="669:45">s</name></expr></argument>)</argument_list></call> <operator pos:start="669:48" pos:end="669:49">&gt;&gt;</operator> <literal type="number" pos:start="669:51" pos:end="669:51">8</literal></expr>;</expr_stmt>	<comment type="block" pos:start="669:57" pos:end="669:65">/* LBA */</comment>

        <expr_stmt pos:start="671:9" pos:end="671:52"><expr pos:start="671:9" pos:end="671:51"><name pos:start="671:9" pos:end="671:26"><name pos:start="671:9" pos:end="671:9">s</name><operator pos:start="671:10" pos:end="671:11">-&gt;</operator><name pos:start="671:12" pos:end="671:20">io_buffer</name><index pos:start="671:21" pos:end="671:26">[<expr pos:start="671:22" pos:end="671:25"><literal type="number" pos:start="671:22" pos:end="671:25">0x06</literal></expr>]</index></name> <operator pos:start="671:28" pos:end="671:28">=</operator> <call pos:start="671:30" pos:end="671:46"><name pos:start="671:30" pos:end="671:43">ide_get_sector</name><argument_list pos:start="671:44" pos:end="671:46">(<argument pos:start="671:45" pos:end="671:45"><expr pos:start="671:45" pos:end="671:45"><name pos:start="671:45" pos:end="671:45">s</name></expr></argument>)</argument_list></call> <operator pos:start="671:48" pos:end="671:49">&gt;&gt;</operator> <literal type="number" pos:start="671:51" pos:end="671:51">0</literal></expr>;</expr_stmt>	<comment type="block" pos:start="671:57" pos:end="671:69">/* LBA LSB */</comment>

        <expr_stmt pos:start="673:9" pos:end="673:34"><expr pos:start="673:9" pos:end="673:33"><name pos:start="673:9" pos:end="673:26"><name pos:start="673:9" pos:end="673:9">s</name><operator pos:start="673:10" pos:end="673:11">-&gt;</operator><name pos:start="673:12" pos:end="673:20">io_buffer</name><index pos:start="673:21" pos:end="673:26">[<expr pos:start="673:22" pos:end="673:25"><literal type="number" pos:start="673:22" pos:end="673:25">0x13</literal></expr>]</index></name> <operator pos:start="673:28" pos:end="673:28">=</operator> <literal type="number" pos:start="673:30" pos:end="673:33">0x00</literal></expr>;</expr_stmt>				<comment type="block" pos:start="673:65" pos:end="673:80">/* Erase flag */</comment>

        <expr_stmt pos:start="675:9" pos:end="675:34"><expr pos:start="675:9" pos:end="675:33"><name pos:start="675:9" pos:end="675:26"><name pos:start="675:9" pos:end="675:9">s</name><operator pos:start="675:10" pos:end="675:11">-&gt;</operator><name pos:start="675:12" pos:end="675:20">io_buffer</name><index pos:start="675:21" pos:end="675:26">[<expr pos:start="675:22" pos:end="675:25"><literal type="number" pos:start="675:22" pos:end="675:25">0x18</literal></expr>]</index></name> <operator pos:start="675:28" pos:end="675:28">=</operator> <literal type="number" pos:start="675:30" pos:end="675:33">0x00</literal></expr>;</expr_stmt>				<comment type="block" pos:start="675:65" pos:end="675:79">/* Hot count */</comment>

        <expr_stmt pos:start="677:9" pos:end="677:34"><expr pos:start="677:9" pos:end="677:33"><name pos:start="677:9" pos:end="677:26"><name pos:start="677:9" pos:end="677:9">s</name><operator pos:start="677:10" pos:end="677:11">-&gt;</operator><name pos:start="677:12" pos:end="677:20">io_buffer</name><index pos:start="677:21" pos:end="677:26">[<expr pos:start="677:22" pos:end="677:25"><literal type="number" pos:start="677:22" pos:end="677:25">0x19</literal></expr>]</index></name> <operator pos:start="677:28" pos:end="677:28">=</operator> <literal type="number" pos:start="677:30" pos:end="677:33">0x00</literal></expr>;</expr_stmt>				<comment type="block" pos:start="677:65" pos:end="677:79">/* Hot count */</comment>

        <expr_stmt pos:start="679:9" pos:end="679:34"><expr pos:start="679:9" pos:end="679:33"><name pos:start="679:9" pos:end="679:26"><name pos:start="679:9" pos:end="679:9">s</name><operator pos:start="679:10" pos:end="679:11">-&gt;</operator><name pos:start="679:12" pos:end="679:20">io_buffer</name><index pos:start="679:21" pos:end="679:26">[<expr pos:start="679:22" pos:end="679:25"><literal type="number" pos:start="679:22" pos:end="679:25">0x1a</literal></expr>]</index></name> <operator pos:start="679:28" pos:end="679:28">=</operator> <literal type="number" pos:start="679:30" pos:end="679:33">0x01</literal></expr>;</expr_stmt>				<comment type="block" pos:start="679:65" pos:end="679:79">/* Hot count */</comment>

        <expr_stmt pos:start="681:9" pos:end="681:70"><expr pos:start="681:9" pos:end="681:69"><call pos:start="681:9" pos:end="681:69"><name pos:start="681:9" pos:end="681:26">ide_transfer_start</name><argument_list pos:start="681:27" pos:end="681:69">(<argument pos:start="681:28" pos:end="681:28"><expr pos:start="681:28" pos:end="681:28"><name pos:start="681:28" pos:end="681:28">s</name></expr></argument>, <argument pos:start="681:31" pos:end="681:42"><expr pos:start="681:31" pos:end="681:42"><name pos:start="681:31" pos:end="681:42"><name pos:start="681:31" pos:end="681:31">s</name><operator pos:start="681:32" pos:end="681:33">-&gt;</operator><name pos:start="681:34" pos:end="681:42">io_buffer</name></name></expr></argument>, <argument pos:start="681:45" pos:end="681:49"><expr pos:start="681:45" pos:end="681:49"><literal type="number" pos:start="681:45" pos:end="681:49">0x200</literal></expr></argument>, <argument pos:start="681:52" pos:end="681:68"><expr pos:start="681:52" pos:end="681:68"><name pos:start="681:52" pos:end="681:68">ide_transfer_stop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="683:9" pos:end="683:28"><expr pos:start="683:9" pos:end="683:27"><call pos:start="683:9" pos:end="683:27"><name pos:start="683:9" pos:end="683:19">ide_set_irq</name><argument_list pos:start="683:20" pos:end="683:27">(<argument pos:start="683:21" pos:end="683:26"><expr pos:start="683:21" pos:end="683:26"><name pos:start="683:21" pos:end="683:26"><name pos:start="683:21" pos:end="683:21">s</name><operator pos:start="683:22" pos:end="683:23">-&gt;</operator><name pos:start="683:24" pos:end="683:26">bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="685:9" pos:end="685:14">break;</break>

    <case pos:start="687:5" pos:end="687:37">case <expr pos:start="687:10" pos:end="687:36"><name pos:start="687:10" pos:end="687:36">CFA_ACCESS_METADATA_STORAGE</name></expr>:</case>

        <switch pos:start="689:9" pos:end="713:9">switch <condition pos:start="689:16" pos:end="689:27">(<expr pos:start="689:17" pos:end="689:26"><name pos:start="689:17" pos:end="689:26"><name pos:start="689:17" pos:end="689:17">s</name><operator pos:start="689:18" pos:end="689:19">-&gt;</operator><name pos:start="689:20" pos:end="689:26">feature</name></name></expr>)</condition> <block pos:start="689:29" pos:end="713:9">{<block_content pos:start="691:9" pos:end="711:27">

        <case pos:start="691:9" pos:end="691:18">case <expr pos:start="691:14" pos:end="691:17"><literal type="number" pos:start="691:14" pos:end="691:17">0x02</literal></expr>:</case>	<comment type="block" pos:start="691:25" pos:end="691:54">/* Inquiry Metadata Storage */</comment>

            <expr_stmt pos:start="693:13" pos:end="693:42"><expr pos:start="693:13" pos:end="693:41"><call pos:start="693:13" pos:end="693:41"><name pos:start="693:13" pos:end="693:38">ide_cfata_metadata_inquiry</name><argument_list pos:start="693:39" pos:end="693:41">(<argument pos:start="693:40" pos:end="693:40"><expr pos:start="693:40" pos:end="693:40"><name pos:start="693:40" pos:end="693:40">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="695:13" pos:end="695:18">break;</break>

        <case pos:start="697:9" pos:end="697:18">case <expr pos:start="697:14" pos:end="697:17"><literal type="number" pos:start="697:14" pos:end="697:17">0x03</literal></expr>:</case>	<comment type="block" pos:start="697:25" pos:end="697:51">/* Read Metadata Storage */</comment>

            <expr_stmt pos:start="699:13" pos:end="699:39"><expr pos:start="699:13" pos:end="699:38"><call pos:start="699:13" pos:end="699:38"><name pos:start="699:13" pos:end="699:35">ide_cfata_metadata_read</name><argument_list pos:start="699:36" pos:end="699:38">(<argument pos:start="699:37" pos:end="699:37"><expr pos:start="699:37" pos:end="699:37"><name pos:start="699:37" pos:end="699:37">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="701:13" pos:end="701:18">break;</break>

        <case pos:start="703:9" pos:end="703:18">case <expr pos:start="703:14" pos:end="703:17"><literal type="number" pos:start="703:14" pos:end="703:17">0x04</literal></expr>:</case>	<comment type="block" pos:start="703:25" pos:end="703:52">/* Write Metadata Storage */</comment>

            <expr_stmt pos:start="705:13" pos:end="705:40"><expr pos:start="705:13" pos:end="705:39"><call pos:start="705:13" pos:end="705:39"><name pos:start="705:13" pos:end="705:36">ide_cfata_metadata_write</name><argument_list pos:start="705:37" pos:end="705:39">(<argument pos:start="705:38" pos:end="705:38"><expr pos:start="705:38" pos:end="705:38"><name pos:start="705:38" pos:end="705:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="707:13" pos:end="707:18">break;</break>

        <default pos:start="709:9" pos:end="709:16">default:</default>

            <goto pos:start="711:13" pos:end="711:27">goto <name pos:start="711:18" pos:end="711:26">abort_cmd</name>;</goto>

        </block_content>}</block></switch>

        <expr_stmt pos:start="715:9" pos:end="715:70"><expr pos:start="715:9" pos:end="715:69"><call pos:start="715:9" pos:end="715:69"><name pos:start="715:9" pos:end="715:26">ide_transfer_start</name><argument_list pos:start="715:27" pos:end="715:69">(<argument pos:start="715:28" pos:end="715:28"><expr pos:start="715:28" pos:end="715:28"><name pos:start="715:28" pos:end="715:28">s</name></expr></argument>, <argument pos:start="715:31" pos:end="715:42"><expr pos:start="715:31" pos:end="715:42"><name pos:start="715:31" pos:end="715:42"><name pos:start="715:31" pos:end="715:31">s</name><operator pos:start="715:32" pos:end="715:33">-&gt;</operator><name pos:start="715:34" pos:end="715:42">io_buffer</name></name></expr></argument>, <argument pos:start="715:45" pos:end="715:49"><expr pos:start="715:45" pos:end="715:49"><literal type="number" pos:start="715:45" pos:end="715:49">0x200</literal></expr></argument>, <argument pos:start="715:52" pos:end="715:68"><expr pos:start="715:52" pos:end="715:68"><name pos:start="715:52" pos:end="715:68">ide_transfer_stop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="717:9" pos:end="717:25"><expr pos:start="717:9" pos:end="717:24"><name pos:start="717:9" pos:end="717:17"><name pos:start="717:9" pos:end="717:9">s</name><operator pos:start="717:10" pos:end="717:11">-&gt;</operator><name pos:start="717:12" pos:end="717:17">status</name></name> <operator pos:start="717:19" pos:end="717:19">=</operator> <literal type="number" pos:start="717:21" pos:end="717:24">0x00</literal></expr>;</expr_stmt> <comment type="block" pos:start="717:27" pos:end="717:56">/* NOTE: READY is _not_ set */</comment>

        <expr_stmt pos:start="719:9" pos:end="719:28"><expr pos:start="719:9" pos:end="719:27"><call pos:start="719:9" pos:end="719:27"><name pos:start="719:9" pos:end="719:19">ide_set_irq</name><argument_list pos:start="719:20" pos:end="719:27">(<argument pos:start="719:21" pos:end="719:26"><expr pos:start="719:21" pos:end="719:26"><name pos:start="719:21" pos:end="719:26"><name pos:start="719:21" pos:end="719:21">s</name><operator pos:start="719:22" pos:end="719:23">-&gt;</operator><name pos:start="719:24" pos:end="719:26">bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="721:9" pos:end="721:14">break;</break>

    <case pos:start="723:5" pos:end="723:29">case <expr pos:start="723:10" pos:end="723:28"><name pos:start="723:10" pos:end="723:28">IBM_SENSE_CONDITION</name></expr>:</case>

        <switch pos:start="725:9" pos:end="737:9">switch <condition pos:start="725:16" pos:end="725:27">(<expr pos:start="725:17" pos:end="725:26"><name pos:start="725:17" pos:end="725:26"><name pos:start="725:17" pos:end="725:17">s</name><operator pos:start="725:18" pos:end="725:19">-&gt;</operator><name pos:start="725:20" pos:end="725:26">feature</name></name></expr>)</condition> <block pos:start="725:29" pos:end="737:9">{<block_content pos:start="727:9" pos:end="735:27">

        <case pos:start="727:9" pos:end="727:18">case <expr pos:start="727:14" pos:end="727:17"><literal type="number" pos:start="727:14" pos:end="727:17">0x01</literal></expr>:</case>  <comment type="block" pos:start="727:21" pos:end="727:53">/* sense temperature in device */</comment>

            <expr_stmt pos:start="729:13" pos:end="729:30"><expr pos:start="729:13" pos:end="729:29"><name pos:start="729:13" pos:end="729:22"><name pos:start="729:13" pos:end="729:13">s</name><operator pos:start="729:14" pos:end="729:15">-&gt;</operator><name pos:start="729:16" pos:end="729:22">nsector</name></name> <operator pos:start="729:24" pos:end="729:24">=</operator> <literal type="number" pos:start="729:26" pos:end="729:29">0x50</literal></expr>;</expr_stmt>      <comment type="block" pos:start="729:37" pos:end="729:47">/* +20 C */</comment>

            <break pos:start="731:13" pos:end="731:18">break;</break>

        <default pos:start="733:9" pos:end="733:16">default:</default>

            <goto pos:start="735:13" pos:end="735:27">goto <name pos:start="735:18" pos:end="735:26">abort_cmd</name>;</goto>

        </block_content>}</block></switch>

        <expr_stmt pos:start="739:9" pos:end="739:43"><expr pos:start="739:9" pos:end="739:42"><name pos:start="739:9" pos:end="739:17"><name pos:start="739:9" pos:end="739:9">s</name><operator pos:start="739:10" pos:end="739:11">-&gt;</operator><name pos:start="739:12" pos:end="739:17">status</name></name> <operator pos:start="739:19" pos:end="739:19">=</operator> <name pos:start="739:21" pos:end="739:30">READY_STAT</name> <operator pos:start="739:32" pos:end="739:32">|</operator> <name pos:start="739:34" pos:end="739:42">SEEK_STAT</name></expr>;</expr_stmt>

        <expr_stmt pos:start="741:9" pos:end="741:28"><expr pos:start="741:9" pos:end="741:27"><call pos:start="741:9" pos:end="741:27"><name pos:start="741:9" pos:end="741:19">ide_set_irq</name><argument_list pos:start="741:20" pos:end="741:27">(<argument pos:start="741:21" pos:end="741:26"><expr pos:start="741:21" pos:end="741:26"><name pos:start="741:21" pos:end="741:26"><name pos:start="741:21" pos:end="741:21">s</name><operator pos:start="741:22" pos:end="741:23">-&gt;</operator><name pos:start="741:24" pos:end="741:26">bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="743:9" pos:end="743:14">break;</break>



    <case pos:start="747:5" pos:end="747:19">case <expr pos:start="747:10" pos:end="747:18"><name pos:start="747:10" pos:end="747:18">WIN_SMART</name></expr>:</case>

	<if_stmt pos:start="749:9" pos:end="751:31"><if pos:start="749:9" pos:end="751:31">if <condition pos:start="749:12" pos:end="749:47">(<expr pos:start="749:13" pos:end="749:46"><name pos:start="749:13" pos:end="749:19"><name pos:start="749:13" pos:end="749:13">s</name><operator pos:start="749:14" pos:end="749:15">-&gt;</operator><name pos:start="749:16" pos:end="749:19">hcyl</name></name> <operator pos:start="749:21" pos:end="749:22">!=</operator> <literal type="number" pos:start="749:24" pos:end="749:27">0xc2</literal> <operator pos:start="749:29" pos:end="749:30">||</operator> <name pos:start="749:32" pos:end="749:38"><name pos:start="749:32" pos:end="749:32">s</name><operator pos:start="749:33" pos:end="749:34">-&gt;</operator><name pos:start="749:35" pos:end="749:38">lcyl</name></name> <operator pos:start="749:40" pos:end="749:41">!=</operator> <literal type="number" pos:start="749:43" pos:end="749:46">0x4f</literal></expr>)</condition><block type="pseudo" pos:start="751:17" pos:end="751:31"><block_content pos:start="751:17" pos:end="751:31">

		<goto pos:start="751:17" pos:end="751:31">goto <name pos:start="751:22" pos:end="751:30">abort_cmd</name>;</goto></block_content></block></if></if_stmt>

	<if_stmt pos:start="753:9" pos:end="755:31"><if pos:start="753:9" pos:end="755:31">if <condition pos:start="753:12" pos:end="753:60">(<expr pos:start="753:13" pos:end="753:59"><operator pos:start="753:13" pos:end="753:13">!</operator><name pos:start="753:14" pos:end="753:29"><name pos:start="753:14" pos:end="753:14">s</name><operator pos:start="753:15" pos:end="753:16">-&gt;</operator><name pos:start="753:17" pos:end="753:29">smart_enabled</name></name> <operator pos:start="753:31" pos:end="753:32">&amp;&amp;</operator> <name pos:start="753:34" pos:end="753:43"><name pos:start="753:34" pos:end="753:34">s</name><operator pos:start="753:35" pos:end="753:36">-&gt;</operator><name pos:start="753:37" pos:end="753:43">feature</name></name> <operator pos:start="753:45" pos:end="753:46">!=</operator> <name pos:start="753:48" pos:end="753:59">SMART_ENABLE</name></expr>)</condition><block type="pseudo" pos:start="755:17" pos:end="755:31"><block_content pos:start="755:17" pos:end="755:31">

		<goto pos:start="755:17" pos:end="755:31">goto <name pos:start="755:22" pos:end="755:30">abort_cmd</name>;</goto></block_content></block></if></if_stmt>

	<switch pos:start="757:9" pos:end="1041:9">switch <condition pos:start="757:16" pos:end="757:27">(<expr pos:start="757:17" pos:end="757:26"><name pos:start="757:17" pos:end="757:26"><name pos:start="757:17" pos:end="757:17">s</name><operator pos:start="757:18" pos:end="757:19">-&gt;</operator><name pos:start="757:20" pos:end="757:26">feature</name></name></expr>)</condition> <block pos:start="757:29" pos:end="1041:9">{<block_content pos:start="759:9" pos:end="1039:31">

	<case pos:start="759:9" pos:end="759:27">case <expr pos:start="759:14" pos:end="759:26"><name pos:start="759:14" pos:end="759:26">SMART_DISABLE</name></expr>:</case>

		<expr_stmt pos:start="761:17" pos:end="761:37"><expr pos:start="761:17" pos:end="761:36"><name pos:start="761:17" pos:end="761:32"><name pos:start="761:17" pos:end="761:17">s</name><operator pos:start="761:18" pos:end="761:19">-&gt;</operator><name pos:start="761:20" pos:end="761:32">smart_enabled</name></name> <operator pos:start="761:34" pos:end="761:34">=</operator> <literal type="number" pos:start="761:36" pos:end="761:36">0</literal></expr>;</expr_stmt>

		<expr_stmt pos:start="763:17" pos:end="763:51"><expr pos:start="763:17" pos:end="763:50"><name pos:start="763:17" pos:end="763:25"><name pos:start="763:17" pos:end="763:17">s</name><operator pos:start="763:18" pos:end="763:19">-&gt;</operator><name pos:start="763:20" pos:end="763:25">status</name></name> <operator pos:start="763:27" pos:end="763:27">=</operator> <name pos:start="763:29" pos:end="763:38">READY_STAT</name> <operator pos:start="763:40" pos:end="763:40">|</operator> <name pos:start="763:42" pos:end="763:50">SEEK_STAT</name></expr>;</expr_stmt>

		<expr_stmt pos:start="765:17" pos:end="765:36"><expr pos:start="765:17" pos:end="765:35"><call pos:start="765:17" pos:end="765:35"><name pos:start="765:17" pos:end="765:27">ide_set_irq</name><argument_list pos:start="765:28" pos:end="765:35">(<argument pos:start="765:29" pos:end="765:34"><expr pos:start="765:29" pos:end="765:34"><name pos:start="765:29" pos:end="765:34"><name pos:start="765:29" pos:end="765:29">s</name><operator pos:start="765:30" pos:end="765:31">-&gt;</operator><name pos:start="765:32" pos:end="765:34">bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<break pos:start="767:17" pos:end="767:22">break;</break>

	<case pos:start="769:9" pos:end="769:26">case <expr pos:start="769:14" pos:end="769:25"><name pos:start="769:14" pos:end="769:25">SMART_ENABLE</name></expr>:</case>

		<expr_stmt pos:start="771:17" pos:end="771:37"><expr pos:start="771:17" pos:end="771:36"><name pos:start="771:17" pos:end="771:32"><name pos:start="771:17" pos:end="771:17">s</name><operator pos:start="771:18" pos:end="771:19">-&gt;</operator><name pos:start="771:20" pos:end="771:32">smart_enabled</name></name> <operator pos:start="771:34" pos:end="771:34">=</operator> <literal type="number" pos:start="771:36" pos:end="771:36">1</literal></expr>;</expr_stmt>

		<expr_stmt pos:start="773:17" pos:end="773:51"><expr pos:start="773:17" pos:end="773:50"><name pos:start="773:17" pos:end="773:25"><name pos:start="773:17" pos:end="773:17">s</name><operator pos:start="773:18" pos:end="773:19">-&gt;</operator><name pos:start="773:20" pos:end="773:25">status</name></name> <operator pos:start="773:27" pos:end="773:27">=</operator> <name pos:start="773:29" pos:end="773:38">READY_STAT</name> <operator pos:start="773:40" pos:end="773:40">|</operator> <name pos:start="773:42" pos:end="773:50">SEEK_STAT</name></expr>;</expr_stmt>

		<expr_stmt pos:start="775:17" pos:end="775:36"><expr pos:start="775:17" pos:end="775:35"><call pos:start="775:17" pos:end="775:35"><name pos:start="775:17" pos:end="775:27">ide_set_irq</name><argument_list pos:start="775:28" pos:end="775:35">(<argument pos:start="775:29" pos:end="775:34"><expr pos:start="775:29" pos:end="775:34"><name pos:start="775:29" pos:end="775:34"><name pos:start="775:29" pos:end="775:29">s</name><operator pos:start="775:30" pos:end="775:31">-&gt;</operator><name pos:start="775:32" pos:end="775:34">bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<break pos:start="777:17" pos:end="777:22">break;</break>

	<case pos:start="779:9" pos:end="779:33">case <expr pos:start="779:14" pos:end="779:32"><name pos:start="779:14" pos:end="779:32">SMART_ATTR_AUTOSAVE</name></expr>:</case>

		<switch pos:start="781:17" pos:end="799:17">switch <condition pos:start="781:24" pos:end="781:34">(<expr pos:start="781:25" pos:end="781:33"><name pos:start="781:25" pos:end="781:33"><name pos:start="781:25" pos:end="781:25">s</name><operator pos:start="781:26" pos:end="781:27">-&gt;</operator><name pos:start="781:28" pos:end="781:33">sector</name></name></expr>)</condition> <block pos:start="781:36" pos:end="799:17">{<block_content pos:start="783:17" pos:end="797:31">

		<case pos:start="783:17" pos:end="783:26">case <expr pos:start="783:22" pos:end="783:25"><literal type="number" pos:start="783:22" pos:end="783:25">0x00</literal></expr>:</case>

		<expr_stmt pos:start="785:17" pos:end="785:38"><expr pos:start="785:17" pos:end="785:37"><name pos:start="785:17" pos:end="785:33"><name pos:start="785:17" pos:end="785:17">s</name><operator pos:start="785:18" pos:end="785:19">-&gt;</operator><name pos:start="785:20" pos:end="785:33">smart_autosave</name></name> <operator pos:start="785:35" pos:end="785:35">=</operator> <literal type="number" pos:start="785:37" pos:end="785:37">0</literal></expr>;</expr_stmt>

		<break pos:start="787:17" pos:end="787:22">break;</break>

		<case pos:start="789:17" pos:end="789:26">case <expr pos:start="789:22" pos:end="789:25"><literal type="number" pos:start="789:22" pos:end="789:25">0xf1</literal></expr>:</case>

		<expr_stmt pos:start="791:17" pos:end="791:38"><expr pos:start="791:17" pos:end="791:37"><name pos:start="791:17" pos:end="791:33"><name pos:start="791:17" pos:end="791:17">s</name><operator pos:start="791:18" pos:end="791:19">-&gt;</operator><name pos:start="791:20" pos:end="791:33">smart_autosave</name></name> <operator pos:start="791:35" pos:end="791:35">=</operator> <literal type="number" pos:start="791:37" pos:end="791:37">1</literal></expr>;</expr_stmt>

		<break pos:start="793:17" pos:end="793:22">break;</break>

		<default pos:start="795:17" pos:end="795:24">default:</default>

		<goto pos:start="797:17" pos:end="797:31">goto <name pos:start="797:22" pos:end="797:30">abort_cmd</name>;</goto>

		</block_content>}</block></switch>

		<expr_stmt pos:start="801:17" pos:end="801:51"><expr pos:start="801:17" pos:end="801:50"><name pos:start="801:17" pos:end="801:25"><name pos:start="801:17" pos:end="801:17">s</name><operator pos:start="801:18" pos:end="801:19">-&gt;</operator><name pos:start="801:20" pos:end="801:25">status</name></name> <operator pos:start="801:27" pos:end="801:27">=</operator> <name pos:start="801:29" pos:end="801:38">READY_STAT</name> <operator pos:start="801:40" pos:end="801:40">|</operator> <name pos:start="801:42" pos:end="801:50">SEEK_STAT</name></expr>;</expr_stmt>

		<expr_stmt pos:start="803:17" pos:end="803:36"><expr pos:start="803:17" pos:end="803:35"><call pos:start="803:17" pos:end="803:35"><name pos:start="803:17" pos:end="803:27">ide_set_irq</name><argument_list pos:start="803:28" pos:end="803:35">(<argument pos:start="803:29" pos:end="803:34"><expr pos:start="803:29" pos:end="803:34"><name pos:start="803:29" pos:end="803:34"><name pos:start="803:29" pos:end="803:29">s</name><operator pos:start="803:30" pos:end="803:31">-&gt;</operator><name pos:start="803:32" pos:end="803:34">bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<break pos:start="805:17" pos:end="805:22">break;</break>

	<case pos:start="807:9" pos:end="807:26">case <expr pos:start="807:14" pos:end="807:25"><name pos:start="807:14" pos:end="807:25">SMART_STATUS</name></expr>:</case>

		<if_stmt pos:start="809:17" pos:end="821:17"><if pos:start="809:17" pos:end="815:17">if <condition pos:start="809:20" pos:end="809:37">(<expr pos:start="809:21" pos:end="809:36"><operator pos:start="809:21" pos:end="809:21">!</operator><name pos:start="809:22" pos:end="809:36"><name pos:start="809:22" pos:end="809:22">s</name><operator pos:start="809:23" pos:end="809:24">-&gt;</operator><name pos:start="809:25" pos:end="809:36">smart_errors</name></name></expr>)</condition> <block pos:start="809:39" pos:end="815:17">{<block_content pos:start="811:17" pos:end="813:31">

		<expr_stmt pos:start="811:17" pos:end="811:31"><expr pos:start="811:17" pos:end="811:30"><name pos:start="811:17" pos:end="811:23"><name pos:start="811:17" pos:end="811:17">s</name><operator pos:start="811:18" pos:end="811:19">-&gt;</operator><name pos:start="811:20" pos:end="811:23">hcyl</name></name> <operator pos:start="811:25" pos:end="811:25">=</operator> <literal type="number" pos:start="811:27" pos:end="811:30">0xc2</literal></expr>;</expr_stmt>

		<expr_stmt pos:start="813:17" pos:end="813:31"><expr pos:start="813:17" pos:end="813:30"><name pos:start="813:17" pos:end="813:23"><name pos:start="813:17" pos:end="813:17">s</name><operator pos:start="813:18" pos:end="813:19">-&gt;</operator><name pos:start="813:20" pos:end="813:23">lcyl</name></name> <operator pos:start="813:25" pos:end="813:25">=</operator> <literal type="number" pos:start="813:27" pos:end="813:30">0x4f</literal></expr>;</expr_stmt>

		</block_content>}</block></if> <else pos:start="815:19" pos:end="821:17">else <block pos:start="815:24" pos:end="821:17">{<block_content pos:start="817:17" pos:end="819:31">

		<expr_stmt pos:start="817:17" pos:end="817:31"><expr pos:start="817:17" pos:end="817:30"><name pos:start="817:17" pos:end="817:23"><name pos:start="817:17" pos:end="817:17">s</name><operator pos:start="817:18" pos:end="817:19">-&gt;</operator><name pos:start="817:20" pos:end="817:23">hcyl</name></name> <operator pos:start="817:25" pos:end="817:25">=</operator> <literal type="number" pos:start="817:27" pos:end="817:30">0x2c</literal></expr>;</expr_stmt>

		<expr_stmt pos:start="819:17" pos:end="819:31"><expr pos:start="819:17" pos:end="819:30"><name pos:start="819:17" pos:end="819:23"><name pos:start="819:17" pos:end="819:17">s</name><operator pos:start="819:18" pos:end="819:19">-&gt;</operator><name pos:start="819:20" pos:end="819:23">lcyl</name></name> <operator pos:start="819:25" pos:end="819:25">=</operator> <literal type="number" pos:start="819:27" pos:end="819:30">0xf4</literal></expr>;</expr_stmt>

		</block_content>}</block></else></if_stmt>

		<expr_stmt pos:start="823:17" pos:end="823:51"><expr pos:start="823:17" pos:end="823:50"><name pos:start="823:17" pos:end="823:25"><name pos:start="823:17" pos:end="823:17">s</name><operator pos:start="823:18" pos:end="823:19">-&gt;</operator><name pos:start="823:20" pos:end="823:25">status</name></name> <operator pos:start="823:27" pos:end="823:27">=</operator> <name pos:start="823:29" pos:end="823:38">READY_STAT</name> <operator pos:start="823:40" pos:end="823:40">|</operator> <name pos:start="823:42" pos:end="823:50">SEEK_STAT</name></expr>;</expr_stmt>

		<expr_stmt pos:start="825:17" pos:end="825:36"><expr pos:start="825:17" pos:end="825:35"><call pos:start="825:17" pos:end="825:35"><name pos:start="825:17" pos:end="825:27">ide_set_irq</name><argument_list pos:start="825:28" pos:end="825:35">(<argument pos:start="825:29" pos:end="825:34"><expr pos:start="825:29" pos:end="825:34"><name pos:start="825:29" pos:end="825:34"><name pos:start="825:29" pos:end="825:29">s</name><operator pos:start="825:30" pos:end="825:31">-&gt;</operator><name pos:start="825:32" pos:end="825:34">bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<break pos:start="827:17" pos:end="827:22">break;</break>

	<case pos:start="829:9" pos:end="829:31">case <expr pos:start="829:14" pos:end="829:30"><name pos:start="829:14" pos:end="829:30">SMART_READ_THRESH</name></expr>:</case>

		<expr_stmt pos:start="831:17" pos:end="831:47"><expr pos:start="831:17" pos:end="831:46"><call pos:start="831:17" pos:end="831:46"><name pos:start="831:17" pos:end="831:22">memset</name><argument_list pos:start="831:23" pos:end="831:46">(<argument pos:start="831:24" pos:end="831:35"><expr pos:start="831:24" pos:end="831:35"><name pos:start="831:24" pos:end="831:35"><name pos:start="831:24" pos:end="831:24">s</name><operator pos:start="831:25" pos:end="831:26">-&gt;</operator><name pos:start="831:27" pos:end="831:35">io_buffer</name></name></expr></argument>, <argument pos:start="831:38" pos:end="831:38"><expr pos:start="831:38" pos:end="831:38"><literal type="number" pos:start="831:38" pos:end="831:38">0</literal></expr></argument>, <argument pos:start="831:41" pos:end="831:45"><expr pos:start="831:41" pos:end="831:45"><literal type="number" pos:start="831:41" pos:end="831:45">0x200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="833:17" pos:end="833:39"><expr pos:start="833:17" pos:end="833:38"><name pos:start="833:17" pos:end="833:31"><name pos:start="833:17" pos:end="833:17">s</name><operator pos:start="833:18" pos:end="833:19">-&gt;</operator><name pos:start="833:20" pos:end="833:28">io_buffer</name><index pos:start="833:29" pos:end="833:31">[<expr pos:start="833:30" pos:end="833:30"><literal type="number" pos:start="833:30" pos:end="833:30">0</literal></expr>]</index></name> <operator pos:start="833:33" pos:end="833:33">=</operator> <literal type="number" pos:start="833:35" pos:end="833:38">0x01</literal></expr>;</expr_stmt> <comment type="block" pos:start="833:41" pos:end="833:66">/* smart struct version */</comment>

		<for pos:start="835:17" pos:end="841:17">for <control pos:start="835:21" pos:end="835:66">(<init pos:start="835:22" pos:end="835:27"><expr pos:start="835:22" pos:end="835:26"><name pos:start="835:22" pos:end="835:22">n</name> <operator pos:start="835:24" pos:end="835:24">=</operator> <literal type="number" pos:start="835:26" pos:end="835:26">0</literal></expr>;</init> <condition pos:start="835:29" pos:end="835:61"><expr pos:start="835:29" pos:end="835:60"><name pos:start="835:29" pos:end="835:29">n</name> <operator pos:start="835:31" pos:end="835:31">&lt;</operator> <call pos:start="835:33" pos:end="835:60"><name pos:start="835:33" pos:end="835:42">ARRAY_SIZE</name><argument_list pos:start="835:43" pos:end="835:60">(<argument pos:start="835:44" pos:end="835:59"><expr pos:start="835:44" pos:end="835:59"><name pos:start="835:44" pos:end="835:59">smart_attributes</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="835:63" pos:end="835:65"><expr pos:start="835:63" pos:end="835:65"><name pos:start="835:63" pos:end="835:63">n</name><operator pos:start="835:64" pos:end="835:65">++</operator></expr></incr>)</control> <block pos:start="835:68" pos:end="841:17">{<block_content pos:start="837:17" pos:end="839:67">

		<expr_stmt pos:start="837:17" pos:end="837:66"><expr pos:start="837:17" pos:end="837:65"><name pos:start="837:17" pos:end="837:40"><name pos:start="837:17" pos:end="837:17">s</name><operator pos:start="837:18" pos:end="837:19">-&gt;</operator><name pos:start="837:20" pos:end="837:28">io_buffer</name><index pos:start="837:29" pos:end="837:40">[<expr pos:start="837:30" pos:end="837:39"><literal type="number" pos:start="837:30" pos:end="837:31">2</literal><operator pos:start="837:31" pos:end="837:31">+</operator><literal type="number" pos:start="837:32" pos:end="837:33">0</literal><operator pos:start="837:33" pos:end="837:33">+</operator><operator pos:start="837:34" pos:end="837:34">(</operator><name pos:start="837:35" pos:end="837:35">n</name><operator pos:start="837:36" pos:end="837:36">*</operator><literal type="number" pos:start="837:37" pos:end="837:38">12</literal><operator pos:start="837:39" pos:end="837:39">)</operator></expr>]</index></name> <operator pos:start="837:42" pos:end="837:42">=</operator> <name pos:start="837:44" pos:end="837:65"><name pos:start="837:44" pos:end="837:59">smart_attributes</name><index pos:start="837:60" pos:end="837:62">[<expr pos:start="837:61" pos:end="837:61"><name pos:start="837:61" pos:end="837:61">n</name></expr>]</index><index pos:start="837:63" pos:end="837:65">[<expr pos:start="837:64" pos:end="837:64"><literal type="number" pos:start="837:64" pos:end="837:64">0</literal></expr>]</index></name></expr>;</expr_stmt>

		<expr_stmt pos:start="839:17" pos:end="839:67"><expr pos:start="839:17" pos:end="839:66"><name pos:start="839:17" pos:end="839:40"><name pos:start="839:17" pos:end="839:17">s</name><operator pos:start="839:18" pos:end="839:19">-&gt;</operator><name pos:start="839:20" pos:end="839:28">io_buffer</name><index pos:start="839:29" pos:end="839:40">[<expr pos:start="839:30" pos:end="839:39"><literal type="number" pos:start="839:30" pos:end="839:31">2</literal><operator pos:start="839:31" pos:end="839:31">+</operator><literal type="number" pos:start="839:32" pos:end="839:33">1</literal><operator pos:start="839:33" pos:end="839:33">+</operator><operator pos:start="839:34" pos:end="839:34">(</operator><name pos:start="839:35" pos:end="839:35">n</name><operator pos:start="839:36" pos:end="839:36">*</operator><literal type="number" pos:start="839:37" pos:end="839:38">12</literal><operator pos:start="839:39" pos:end="839:39">)</operator></expr>]</index></name> <operator pos:start="839:42" pos:end="839:42">=</operator> <name pos:start="839:44" pos:end="839:66"><name pos:start="839:44" pos:end="839:59">smart_attributes</name><index pos:start="839:60" pos:end="839:62">[<expr pos:start="839:61" pos:end="839:61"><name pos:start="839:61" pos:end="839:61">n</name></expr>]</index><index pos:start="839:63" pos:end="839:66">[<expr pos:start="839:64" pos:end="839:65"><literal type="number" pos:start="839:64" pos:end="839:65">11</literal></expr>]</index></name></expr>;</expr_stmt>

		</block_content>}</block></for>

		<for pos:start="843:17" pos:end="845:53">for <control pos:start="843:21" pos:end="843:37">(<init pos:start="843:22" pos:end="843:25"><expr pos:start="843:22" pos:end="843:24"><name pos:start="843:22" pos:end="843:22">n</name><operator pos:start="843:23" pos:end="843:23">=</operator><literal type="number" pos:start="843:24" pos:end="843:24">0</literal></expr>;</init> <condition pos:start="843:27" pos:end="843:32"><expr pos:start="843:27" pos:end="843:31"><name pos:start="843:27" pos:end="843:27">n</name><operator pos:start="843:28" pos:end="843:28">&lt;</operator><literal type="number" pos:start="843:29" pos:end="843:31">511</literal></expr>;</condition> <incr pos:start="843:34" pos:end="843:36"><expr pos:start="843:34" pos:end="843:36"><name pos:start="843:34" pos:end="843:34">n</name><operator pos:start="843:35" pos:end="843:36">++</operator></expr></incr>)</control><block type="pseudo" pos:start="845:17" pos:end="845:53"><block_content pos:start="845:17" pos:end="845:53"> <comment type="block" pos:start="843:39" pos:end="843:52">/* checksum */</comment>

		<expr_stmt pos:start="845:17" pos:end="845:53"><expr pos:start="845:17" pos:end="845:52"><name pos:start="845:17" pos:end="845:33"><name pos:start="845:17" pos:end="845:17">s</name><operator pos:start="845:18" pos:end="845:19">-&gt;</operator><name pos:start="845:20" pos:end="845:28">io_buffer</name><index pos:start="845:29" pos:end="845:33">[<expr pos:start="845:30" pos:end="845:32"><literal type="number" pos:start="845:30" pos:end="845:32">511</literal></expr>]</index></name> <operator pos:start="845:35" pos:end="845:36">+=</operator> <name pos:start="845:38" pos:end="845:52"><name pos:start="845:38" pos:end="845:38">s</name><operator pos:start="845:39" pos:end="845:40">-&gt;</operator><name pos:start="845:41" pos:end="845:49">io_buffer</name><index pos:start="845:50" pos:end="845:52">[<expr pos:start="845:51" pos:end="845:51"><name pos:start="845:51" pos:end="845:51">n</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

		<expr_stmt pos:start="847:17" pos:end="847:62"><expr pos:start="847:17" pos:end="847:61"><name pos:start="847:17" pos:end="847:33"><name pos:start="847:17" pos:end="847:17">s</name><operator pos:start="847:18" pos:end="847:19">-&gt;</operator><name pos:start="847:20" pos:end="847:28">io_buffer</name><index pos:start="847:29" pos:end="847:33">[<expr pos:start="847:30" pos:end="847:32"><literal type="number" pos:start="847:30" pos:end="847:32">511</literal></expr>]</index></name> <operator pos:start="847:35" pos:end="847:35">=</operator> <literal type="number" pos:start="847:37" pos:end="847:43">0x100</literal> <operator pos:start="847:43" pos:end="847:43">-</operator> <name pos:start="847:45" pos:end="847:61"><name pos:start="847:45" pos:end="847:45">s</name><operator pos:start="847:46" pos:end="847:47">-&gt;</operator><name pos:start="847:48" pos:end="847:56">io_buffer</name><index pos:start="847:57" pos:end="847:61">[<expr pos:start="847:58" pos:end="847:60"><literal type="number" pos:start="847:58" pos:end="847:60">511</literal></expr>]</index></name></expr>;</expr_stmt>

		<expr_stmt pos:start="849:17" pos:end="849:51"><expr pos:start="849:17" pos:end="849:50"><name pos:start="849:17" pos:end="849:25"><name pos:start="849:17" pos:end="849:17">s</name><operator pos:start="849:18" pos:end="849:19">-&gt;</operator><name pos:start="849:20" pos:end="849:25">status</name></name> <operator pos:start="849:27" pos:end="849:27">=</operator> <name pos:start="849:29" pos:end="849:38">READY_STAT</name> <operator pos:start="849:40" pos:end="849:40">|</operator> <name pos:start="849:42" pos:end="849:50">SEEK_STAT</name></expr>;</expr_stmt>

		<expr_stmt pos:start="851:17" pos:end="851:78"><expr pos:start="851:17" pos:end="851:77"><call pos:start="851:17" pos:end="851:77"><name pos:start="851:17" pos:end="851:34">ide_transfer_start</name><argument_list pos:start="851:35" pos:end="851:77">(<argument pos:start="851:36" pos:end="851:36"><expr pos:start="851:36" pos:end="851:36"><name pos:start="851:36" pos:end="851:36">s</name></expr></argument>, <argument pos:start="851:39" pos:end="851:50"><expr pos:start="851:39" pos:end="851:50"><name pos:start="851:39" pos:end="851:50"><name pos:start="851:39" pos:end="851:39">s</name><operator pos:start="851:40" pos:end="851:41">-&gt;</operator><name pos:start="851:42" pos:end="851:50">io_buffer</name></name></expr></argument>, <argument pos:start="851:53" pos:end="851:57"><expr pos:start="851:53" pos:end="851:57"><literal type="number" pos:start="851:53" pos:end="851:57">0x200</literal></expr></argument>, <argument pos:start="851:60" pos:end="851:76"><expr pos:start="851:60" pos:end="851:76"><name pos:start="851:60" pos:end="851:76">ide_transfer_stop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="853:17" pos:end="853:36"><expr pos:start="853:17" pos:end="853:35"><call pos:start="853:17" pos:end="853:35"><name pos:start="853:17" pos:end="853:27">ide_set_irq</name><argument_list pos:start="853:28" pos:end="853:35">(<argument pos:start="853:29" pos:end="853:34"><expr pos:start="853:29" pos:end="853:34"><name pos:start="853:29" pos:end="853:34"><name pos:start="853:29" pos:end="853:29">s</name><operator pos:start="853:30" pos:end="853:31">-&gt;</operator><name pos:start="853:32" pos:end="853:34">bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<break pos:start="855:17" pos:end="855:22">break;</break>

	<case pos:start="857:9" pos:end="857:29">case <expr pos:start="857:14" pos:end="857:28"><name pos:start="857:14" pos:end="857:28">SMART_READ_DATA</name></expr>:</case>

		<expr_stmt pos:start="859:17" pos:end="859:47"><expr pos:start="859:17" pos:end="859:46"><call pos:start="859:17" pos:end="859:46"><name pos:start="859:17" pos:end="859:22">memset</name><argument_list pos:start="859:23" pos:end="859:46">(<argument pos:start="859:24" pos:end="859:35"><expr pos:start="859:24" pos:end="859:35"><name pos:start="859:24" pos:end="859:35"><name pos:start="859:24" pos:end="859:24">s</name><operator pos:start="859:25" pos:end="859:26">-&gt;</operator><name pos:start="859:27" pos:end="859:35">io_buffer</name></name></expr></argument>, <argument pos:start="859:38" pos:end="859:38"><expr pos:start="859:38" pos:end="859:38"><literal type="number" pos:start="859:38" pos:end="859:38">0</literal></expr></argument>, <argument pos:start="859:41" pos:end="859:45"><expr pos:start="859:41" pos:end="859:45"><literal type="number" pos:start="859:41" pos:end="859:45">0x200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="861:17" pos:end="861:39"><expr pos:start="861:17" pos:end="861:38"><name pos:start="861:17" pos:end="861:31"><name pos:start="861:17" pos:end="861:17">s</name><operator pos:start="861:18" pos:end="861:19">-&gt;</operator><name pos:start="861:20" pos:end="861:28">io_buffer</name><index pos:start="861:29" pos:end="861:31">[<expr pos:start="861:30" pos:end="861:30"><literal type="number" pos:start="861:30" pos:end="861:30">0</literal></expr>]</index></name> <operator pos:start="861:33" pos:end="861:33">=</operator> <literal type="number" pos:start="861:35" pos:end="861:38">0x01</literal></expr>;</expr_stmt> <comment type="block" pos:start="861:41" pos:end="861:66">/* smart struct version */</comment>

		<for pos:start="863:17" pos:end="873:17">for <control pos:start="863:21" pos:end="863:66">(<init pos:start="863:22" pos:end="863:27"><expr pos:start="863:22" pos:end="863:26"><name pos:start="863:22" pos:end="863:22">n</name> <operator pos:start="863:24" pos:end="863:24">=</operator> <literal type="number" pos:start="863:26" pos:end="863:26">0</literal></expr>;</init> <condition pos:start="863:29" pos:end="863:61"><expr pos:start="863:29" pos:end="863:60"><name pos:start="863:29" pos:end="863:29">n</name> <operator pos:start="863:31" pos:end="863:31">&lt;</operator> <call pos:start="863:33" pos:end="863:60"><name pos:start="863:33" pos:end="863:42">ARRAY_SIZE</name><argument_list pos:start="863:43" pos:end="863:60">(<argument pos:start="863:44" pos:end="863:59"><expr pos:start="863:44" pos:end="863:59"><name pos:start="863:44" pos:end="863:59">smart_attributes</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="863:63" pos:end="863:65"><expr pos:start="863:63" pos:end="863:65"><name pos:start="863:63" pos:end="863:63">n</name><operator pos:start="863:64" pos:end="863:65">++</operator></expr></incr>)</control> <block pos:start="863:68" pos:end="873:17">{<block_content pos:start="865:21" pos:end="871:21">

		    <decl_stmt pos:start="865:21" pos:end="865:26"><decl pos:start="865:21" pos:end="865:25"><type pos:start="865:21" pos:end="865:23"><name pos:start="865:21" pos:end="865:23">int</name></type> <name pos:start="865:25" pos:end="865:25">i</name></decl>;</decl_stmt>

		    <for pos:start="867:21" pos:end="871:21">for<control pos:start="867:24" pos:end="867:43">(<init pos:start="867:25" pos:end="867:30"><expr pos:start="867:25" pos:end="867:29"><name pos:start="867:25" pos:end="867:25">i</name> <operator pos:start="867:27" pos:end="867:27">=</operator> <literal type="number" pos:start="867:29" pos:end="867:29">0</literal></expr>;</init> <condition pos:start="867:32" pos:end="867:38"><expr pos:start="867:32" pos:end="867:37"><name pos:start="867:32" pos:end="867:32">i</name> <operator pos:start="867:34" pos:end="867:34">&lt;</operator> <literal type="number" pos:start="867:36" pos:end="867:37">11</literal></expr>;</condition> <incr pos:start="867:40" pos:end="867:42"><expr pos:start="867:40" pos:end="867:42"><name pos:start="867:40" pos:end="867:40">i</name><operator pos:start="867:41" pos:end="867:42">++</operator></expr></incr>)</control> <block pos:start="867:45" pos:end="871:21">{<block_content pos:start="869:25" pos:end="869:74">

			<expr_stmt pos:start="869:25" pos:end="869:74"><expr pos:start="869:25" pos:end="869:73"><name pos:start="869:25" pos:end="869:48"><name pos:start="869:25" pos:end="869:25">s</name><operator pos:start="869:26" pos:end="869:27">-&gt;</operator><name pos:start="869:28" pos:end="869:36">io_buffer</name><index pos:start="869:37" pos:end="869:48">[<expr pos:start="869:38" pos:end="869:47"><literal type="number" pos:start="869:38" pos:end="869:38">2</literal><operator pos:start="869:39" pos:end="869:39">+</operator><name pos:start="869:40" pos:end="869:40">i</name><operator pos:start="869:41" pos:end="869:41">+</operator><operator pos:start="869:42" pos:end="869:42">(</operator><name pos:start="869:43" pos:end="869:43">n</name><operator pos:start="869:44" pos:end="869:44">*</operator><literal type="number" pos:start="869:45" pos:end="869:46">12</literal><operator pos:start="869:47" pos:end="869:47">)</operator></expr>]</index></name> <operator pos:start="869:50" pos:end="869:50">=</operator> <name pos:start="869:52" pos:end="869:73"><name pos:start="869:52" pos:end="869:67">smart_attributes</name><index pos:start="869:68" pos:end="869:70">[<expr pos:start="869:69" pos:end="869:69"><name pos:start="869:69" pos:end="869:69">n</name></expr>]</index><index pos:start="869:71" pos:end="869:73">[<expr pos:start="869:72" pos:end="869:72"><name pos:start="869:72" pos:end="869:72">i</name></expr>]</index></name></expr>;</expr_stmt>

		    </block_content>}</block></for>

		</block_content>}</block></for>

		<expr_stmt pos:start="875:17" pos:end="875:73"><expr pos:start="875:17" pos:end="875:72"><name pos:start="875:17" pos:end="875:33"><name pos:start="875:17" pos:end="875:17">s</name><operator pos:start="875:18" pos:end="875:19">-&gt;</operator><name pos:start="875:20" pos:end="875:28">io_buffer</name><index pos:start="875:29" pos:end="875:33">[<expr pos:start="875:30" pos:end="875:32"><literal type="number" pos:start="875:30" pos:end="875:32">362</literal></expr>]</index></name> <operator pos:start="875:35" pos:end="875:35">=</operator> <literal type="number" pos:start="875:37" pos:end="875:40">0x02</literal> <operator pos:start="875:42" pos:end="875:42">|</operator> <operator pos:start="875:44" pos:end="875:44">(</operator><ternary pos:start="875:45" pos:end="875:71"><condition pos:start="875:45" pos:end="875:62"><expr pos:start="875:45" pos:end="875:61"><name pos:start="875:45" pos:end="875:61"><name pos:start="875:45" pos:end="875:45">s</name><operator pos:start="875:46" pos:end="875:47">-&gt;</operator><name pos:start="875:48" pos:end="875:61">smart_autosave</name></name></expr>?</condition><then pos:start="875:63" pos:end="875:66"><expr pos:start="875:63" pos:end="875:66"><literal type="number" pos:start="875:63" pos:end="875:66">0x80</literal></expr></then><else pos:start="875:67" pos:end="875:71">:<expr pos:start="875:68" pos:end="875:71"><literal type="number" pos:start="875:68" pos:end="875:71">0x00</literal></expr></else></ternary><operator pos:start="875:72" pos:end="875:72">)</operator></expr>;</expr_stmt>

		<if_stmt pos:start="877:17" pos:end="891:17"><if pos:start="877:17" pos:end="881:17">if <condition pos:start="877:20" pos:end="877:49">(<expr pos:start="877:21" pos:end="877:48"><name pos:start="877:21" pos:end="877:43"><name pos:start="877:21" pos:end="877:21">s</name><operator pos:start="877:22" pos:end="877:23">-&gt;</operator><name pos:start="877:24" pos:end="877:43">smart_selftest_count</name></name> <operator pos:start="877:45" pos:end="877:46">==</operator> <literal type="number" pos:start="877:48" pos:end="877:48">0</literal></expr>)</condition> <block pos:start="877:51" pos:end="881:17">{<block_content pos:start="879:17" pos:end="879:38">

		<expr_stmt pos:start="879:17" pos:end="879:38"><expr pos:start="879:17" pos:end="879:37"><name pos:start="879:17" pos:end="879:33"><name pos:start="879:17" pos:end="879:17">s</name><operator pos:start="879:18" pos:end="879:19">-&gt;</operator><name pos:start="879:20" pos:end="879:28">io_buffer</name><index pos:start="879:29" pos:end="879:33">[<expr pos:start="879:30" pos:end="879:32"><literal type="number" pos:start="879:30" pos:end="879:32">363</literal></expr>]</index></name> <operator pos:start="879:35" pos:end="879:35">=</operator> <literal type="number" pos:start="879:37" pos:end="879:37">0</literal></expr>;</expr_stmt>

		</block_content>}</block></if> <else pos:start="881:19" pos:end="891:17">else <block pos:start="881:24" pos:end="891:17">{<block_content pos:start="883:17" pos:end="889:47">

		<expr_stmt pos:start="883:17" pos:end="889:47"><expr pos:start="883:17" pos:end="889:46"><name pos:start="883:17" pos:end="883:33"><name pos:start="883:17" pos:end="883:17">s</name><operator pos:start="883:18" pos:end="883:19">-&gt;</operator><name pos:start="883:20" pos:end="883:28">io_buffer</name><index pos:start="883:29" pos:end="883:33">[<expr pos:start="883:30" pos:end="883:32"><literal type="number" pos:start="883:30" pos:end="883:32">363</literal></expr>]</index></name> <operator pos:start="883:35" pos:end="883:35">=</operator>

			<name pos:start="885:25" pos:end="889:46"><name pos:start="885:25" pos:end="885:25">s</name><operator pos:start="885:26" pos:end="885:27">-&gt;</operator><name pos:start="885:28" pos:end="885:46">smart_selftest_data</name><index pos:start="885:47" pos:end="889:46">[<expr pos:start="885:48" pos:end="889:45"><literal type="number" pos:start="885:48" pos:end="885:50">3</literal> <operator pos:start="885:50" pos:end="885:50">+</operator> 

					   <operator pos:start="887:44" pos:end="887:44">(</operator><name pos:start="887:45" pos:end="887:67"><name pos:start="887:45" pos:end="887:45">s</name><operator pos:start="887:46" pos:end="887:47">-&gt;</operator><name pos:start="887:48" pos:end="887:67">smart_selftest_count</name></name> <operator pos:start="887:69" pos:end="887:69">-</operator> <literal type="number" pos:start="887:71" pos:end="887:71">1</literal><operator pos:start="887:72" pos:end="887:72">)</operator> <operator pos:start="887:74" pos:end="887:74">*</operator>

					   <literal type="number" pos:start="889:44" pos:end="889:45">24</literal></expr>]</index></name></expr>;</expr_stmt>

		</block_content>}</block></else></if_stmt>

		<expr_stmt pos:start="893:17" pos:end="893:41"><expr pos:start="893:17" pos:end="893:40"><name pos:start="893:17" pos:end="893:33"><name pos:start="893:17" pos:end="893:17">s</name><operator pos:start="893:18" pos:end="893:19">-&gt;</operator><name pos:start="893:20" pos:end="893:28">io_buffer</name><index pos:start="893:29" pos:end="893:33">[<expr pos:start="893:30" pos:end="893:32"><literal type="number" pos:start="893:30" pos:end="893:32">364</literal></expr>]</index></name> <operator pos:start="893:35" pos:end="893:35">=</operator> <literal type="number" pos:start="893:37" pos:end="893:40">0x20</literal></expr>;</expr_stmt> 

		<expr_stmt pos:start="895:17" pos:end="895:41"><expr pos:start="895:17" pos:end="895:40"><name pos:start="895:17" pos:end="895:33"><name pos:start="895:17" pos:end="895:17">s</name><operator pos:start="895:18" pos:end="895:19">-&gt;</operator><name pos:start="895:20" pos:end="895:28">io_buffer</name><index pos:start="895:29" pos:end="895:33">[<expr pos:start="895:30" pos:end="895:32"><literal type="number" pos:start="895:30" pos:end="895:32">365</literal></expr>]</index></name> <operator pos:start="895:35" pos:end="895:35">=</operator> <literal type="number" pos:start="895:37" pos:end="895:40">0x01</literal></expr>;</expr_stmt> 

		<comment type="block" pos:start="897:17" pos:end="897:74">/* offline data collection capacity: execute + self-test*/</comment>

		<expr_stmt pos:start="899:17" pos:end="899:54"><expr pos:start="899:17" pos:end="899:53"><name pos:start="899:17" pos:end="899:33"><name pos:start="899:17" pos:end="899:17">s</name><operator pos:start="899:18" pos:end="899:19">-&gt;</operator><name pos:start="899:20" pos:end="899:28">io_buffer</name><index pos:start="899:29" pos:end="899:33">[<expr pos:start="899:30" pos:end="899:32"><literal type="number" pos:start="899:30" pos:end="899:32">367</literal></expr>]</index></name> <operator pos:start="899:35" pos:end="899:35">=</operator> <operator pos:start="899:37" pos:end="899:37">(</operator><literal type="number" pos:start="899:38" pos:end="899:38">1</literal><operator pos:start="899:39" pos:end="899:40">&lt;&lt;</operator><literal type="number" pos:start="899:41" pos:end="899:41">4</literal> <operator pos:start="899:43" pos:end="899:43">|</operator> <literal type="number" pos:start="899:45" pos:end="899:45">1</literal><operator pos:start="899:46" pos:end="899:47">&lt;&lt;</operator><literal type="number" pos:start="899:48" pos:end="899:48">3</literal> <operator pos:start="899:50" pos:end="899:50">|</operator> <literal type="number" pos:start="899:52" pos:end="899:52">1</literal><operator pos:start="899:53" pos:end="899:53">)</operator></expr>;</expr_stmt> 

		<expr_stmt pos:start="901:17" pos:end="901:41"><expr pos:start="901:17" pos:end="901:40"><name pos:start="901:17" pos:end="901:33"><name pos:start="901:17" pos:end="901:17">s</name><operator pos:start="901:18" pos:end="901:19">-&gt;</operator><name pos:start="901:20" pos:end="901:28">io_buffer</name><index pos:start="901:29" pos:end="901:33">[<expr pos:start="901:30" pos:end="901:32"><literal type="number" pos:start="901:30" pos:end="901:32">368</literal></expr>]</index></name> <operator pos:start="901:35" pos:end="901:35">=</operator> <literal type="number" pos:start="901:37" pos:end="901:40">0x03</literal></expr>;</expr_stmt> <comment type="block" pos:start="901:43" pos:end="901:68">/* smart capability (1) */</comment>

		<expr_stmt pos:start="903:17" pos:end="903:41"><expr pos:start="903:17" pos:end="903:40"><name pos:start="903:17" pos:end="903:33"><name pos:start="903:17" pos:end="903:17">s</name><operator pos:start="903:18" pos:end="903:19">-&gt;</operator><name pos:start="903:20" pos:end="903:28">io_buffer</name><index pos:start="903:29" pos:end="903:33">[<expr pos:start="903:30" pos:end="903:32"><literal type="number" pos:start="903:30" pos:end="903:32">369</literal></expr>]</index></name> <operator pos:start="903:35" pos:end="903:35">=</operator> <literal type="number" pos:start="903:37" pos:end="903:40">0x00</literal></expr>;</expr_stmt> <comment type="block" pos:start="903:43" pos:end="903:68">/* smart capability (2) */</comment>

		<expr_stmt pos:start="905:17" pos:end="905:41"><expr pos:start="905:17" pos:end="905:40"><name pos:start="905:17" pos:end="905:33"><name pos:start="905:17" pos:end="905:17">s</name><operator pos:start="905:18" pos:end="905:19">-&gt;</operator><name pos:start="905:20" pos:end="905:28">io_buffer</name><index pos:start="905:29" pos:end="905:33">[<expr pos:start="905:30" pos:end="905:32"><literal type="number" pos:start="905:30" pos:end="905:32">370</literal></expr>]</index></name> <operator pos:start="905:35" pos:end="905:35">=</operator> <literal type="number" pos:start="905:37" pos:end="905:40">0x01</literal></expr>;</expr_stmt> <comment type="block" pos:start="905:43" pos:end="905:71">/* error logging supported */</comment>

		<expr_stmt pos:start="907:17" pos:end="907:41"><expr pos:start="907:17" pos:end="907:40"><name pos:start="907:17" pos:end="907:33"><name pos:start="907:17" pos:end="907:17">s</name><operator pos:start="907:18" pos:end="907:19">-&gt;</operator><name pos:start="907:20" pos:end="907:28">io_buffer</name><index pos:start="907:29" pos:end="907:33">[<expr pos:start="907:30" pos:end="907:32"><literal type="number" pos:start="907:30" pos:end="907:32">372</literal></expr>]</index></name> <operator pos:start="907:35" pos:end="907:35">=</operator> <literal type="number" pos:start="907:37" pos:end="907:40">0x02</literal></expr>;</expr_stmt> <comment type="block" pos:start="907:43" pos:end="907:75">/* minutes for poll short test */</comment>

		<expr_stmt pos:start="909:17" pos:end="909:41"><expr pos:start="909:17" pos:end="909:40"><name pos:start="909:17" pos:end="909:33"><name pos:start="909:17" pos:end="909:17">s</name><operator pos:start="909:18" pos:end="909:19">-&gt;</operator><name pos:start="909:20" pos:end="909:28">io_buffer</name><index pos:start="909:29" pos:end="909:33">[<expr pos:start="909:30" pos:end="909:32"><literal type="number" pos:start="909:30" pos:end="909:32">373</literal></expr>]</index></name> <operator pos:start="909:35" pos:end="909:35">=</operator> <literal type="number" pos:start="909:37" pos:end="909:40">0x36</literal></expr>;</expr_stmt> <comment type="block" pos:start="909:43" pos:end="909:73">/* minutes for poll ext test */</comment>

		<expr_stmt pos:start="911:17" pos:end="911:41"><expr pos:start="911:17" pos:end="911:40"><name pos:start="911:17" pos:end="911:33"><name pos:start="911:17" pos:end="911:17">s</name><operator pos:start="911:18" pos:end="911:19">-&gt;</operator><name pos:start="911:20" pos:end="911:28">io_buffer</name><index pos:start="911:29" pos:end="911:33">[<expr pos:start="911:30" pos:end="911:32"><literal type="number" pos:start="911:30" pos:end="911:32">374</literal></expr>]</index></name> <operator pos:start="911:35" pos:end="911:35">=</operator> <literal type="number" pos:start="911:37" pos:end="911:40">0x01</literal></expr>;</expr_stmt> <comment type="block" pos:start="911:43" pos:end="911:75">/* minutes for poll conveyance */</comment>



		<for pos:start="915:17" pos:end="917:53">for <control pos:start="915:21" pos:end="915:37">(<init pos:start="915:22" pos:end="915:25"><expr pos:start="915:22" pos:end="915:24"><name pos:start="915:22" pos:end="915:22">n</name><operator pos:start="915:23" pos:end="915:23">=</operator><literal type="number" pos:start="915:24" pos:end="915:24">0</literal></expr>;</init> <condition pos:start="915:27" pos:end="915:32"><expr pos:start="915:27" pos:end="915:31"><name pos:start="915:27" pos:end="915:27">n</name><operator pos:start="915:28" pos:end="915:28">&lt;</operator><literal type="number" pos:start="915:29" pos:end="915:31">511</literal></expr>;</condition> <incr pos:start="915:34" pos:end="915:36"><expr pos:start="915:34" pos:end="915:36"><name pos:start="915:34" pos:end="915:34">n</name><operator pos:start="915:35" pos:end="915:36">++</operator></expr></incr>)</control><block type="pseudo" pos:start="917:17" pos:end="917:53"><block_content pos:start="917:17" pos:end="917:53"> 

		<expr_stmt pos:start="917:17" pos:end="917:53"><expr pos:start="917:17" pos:end="917:52"><name pos:start="917:17" pos:end="917:33"><name pos:start="917:17" pos:end="917:17">s</name><operator pos:start="917:18" pos:end="917:19">-&gt;</operator><name pos:start="917:20" pos:end="917:28">io_buffer</name><index pos:start="917:29" pos:end="917:33">[<expr pos:start="917:30" pos:end="917:32"><literal type="number" pos:start="917:30" pos:end="917:32">511</literal></expr>]</index></name> <operator pos:start="917:35" pos:end="917:36">+=</operator> <name pos:start="917:38" pos:end="917:52"><name pos:start="917:38" pos:end="917:38">s</name><operator pos:start="917:39" pos:end="917:40">-&gt;</operator><name pos:start="917:41" pos:end="917:49">io_buffer</name><index pos:start="917:50" pos:end="917:52">[<expr pos:start="917:51" pos:end="917:51"><name pos:start="917:51" pos:end="917:51">n</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

		<expr_stmt pos:start="919:17" pos:end="919:62"><expr pos:start="919:17" pos:end="919:61"><name pos:start="919:17" pos:end="919:33"><name pos:start="919:17" pos:end="919:17">s</name><operator pos:start="919:18" pos:end="919:19">-&gt;</operator><name pos:start="919:20" pos:end="919:28">io_buffer</name><index pos:start="919:29" pos:end="919:33">[<expr pos:start="919:30" pos:end="919:32"><literal type="number" pos:start="919:30" pos:end="919:32">511</literal></expr>]</index></name> <operator pos:start="919:35" pos:end="919:35">=</operator> <literal type="number" pos:start="919:37" pos:end="919:43">0x100</literal> <operator pos:start="919:43" pos:end="919:43">-</operator> <name pos:start="919:45" pos:end="919:61"><name pos:start="919:45" pos:end="919:45">s</name><operator pos:start="919:46" pos:end="919:47">-&gt;</operator><name pos:start="919:48" pos:end="919:56">io_buffer</name><index pos:start="919:57" pos:end="919:61">[<expr pos:start="919:58" pos:end="919:60"><literal type="number" pos:start="919:58" pos:end="919:60">511</literal></expr>]</index></name></expr>;</expr_stmt>

		<expr_stmt pos:start="921:17" pos:end="921:51"><expr pos:start="921:17" pos:end="921:50"><name pos:start="921:17" pos:end="921:25"><name pos:start="921:17" pos:end="921:17">s</name><operator pos:start="921:18" pos:end="921:19">-&gt;</operator><name pos:start="921:20" pos:end="921:25">status</name></name> <operator pos:start="921:27" pos:end="921:27">=</operator> <name pos:start="921:29" pos:end="921:38">READY_STAT</name> <operator pos:start="921:40" pos:end="921:40">|</operator> <name pos:start="921:42" pos:end="921:50">SEEK_STAT</name></expr>;</expr_stmt>

		<expr_stmt pos:start="923:17" pos:end="923:78"><expr pos:start="923:17" pos:end="923:77"><call pos:start="923:17" pos:end="923:77"><name pos:start="923:17" pos:end="923:34">ide_transfer_start</name><argument_list pos:start="923:35" pos:end="923:77">(<argument pos:start="923:36" pos:end="923:36"><expr pos:start="923:36" pos:end="923:36"><name pos:start="923:36" pos:end="923:36">s</name></expr></argument>, <argument pos:start="923:39" pos:end="923:50"><expr pos:start="923:39" pos:end="923:50"><name pos:start="923:39" pos:end="923:50"><name pos:start="923:39" pos:end="923:39">s</name><operator pos:start="923:40" pos:end="923:41">-&gt;</operator><name pos:start="923:42" pos:end="923:50">io_buffer</name></name></expr></argument>, <argument pos:start="923:53" pos:end="923:57"><expr pos:start="923:53" pos:end="923:57"><literal type="number" pos:start="923:53" pos:end="923:57">0x200</literal></expr></argument>, <argument pos:start="923:60" pos:end="923:76"><expr pos:start="923:60" pos:end="923:76"><name pos:start="923:60" pos:end="923:76">ide_transfer_stop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="925:17" pos:end="925:36"><expr pos:start="925:17" pos:end="925:35"><call pos:start="925:17" pos:end="925:35"><name pos:start="925:17" pos:end="925:27">ide_set_irq</name><argument_list pos:start="925:28" pos:end="925:35">(<argument pos:start="925:29" pos:end="925:34"><expr pos:start="925:29" pos:end="925:34"><name pos:start="925:29" pos:end="925:34"><name pos:start="925:29" pos:end="925:29">s</name><operator pos:start="925:30" pos:end="925:31">-&gt;</operator><name pos:start="925:32" pos:end="925:34">bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<break pos:start="927:17" pos:end="927:22">break;</break>

	<case pos:start="929:9" pos:end="929:28">case <expr pos:start="929:14" pos:end="929:27"><name pos:start="929:14" pos:end="929:27">SMART_READ_LOG</name></expr>:</case>

		<switch pos:start="931:17" pos:end="987:17">switch <condition pos:start="931:24" pos:end="931:34">(<expr pos:start="931:25" pos:end="931:33"><name pos:start="931:25" pos:end="931:33"><name pos:start="931:25" pos:end="931:25">s</name><operator pos:start="931:26" pos:end="931:27">-&gt;</operator><name pos:start="931:28" pos:end="931:33">sector</name></name></expr>)</condition> <block pos:start="931:36" pos:end="987:17">{<block_content pos:start="933:17" pos:end="985:31">

		<case pos:start="933:17" pos:end="933:26">case <expr pos:start="933:22" pos:end="933:25"><literal type="number" pos:start="933:22" pos:end="933:25">0x01</literal></expr>:</case> <comment type="block" pos:start="933:28" pos:end="933:56">/* summary smart error log */</comment>

		<expr_stmt pos:start="935:17" pos:end="935:47"><expr pos:start="935:17" pos:end="935:46"><call pos:start="935:17" pos:end="935:46"><name pos:start="935:17" pos:end="935:22">memset</name><argument_list pos:start="935:23" pos:end="935:46">(<argument pos:start="935:24" pos:end="935:35"><expr pos:start="935:24" pos:end="935:35"><name pos:start="935:24" pos:end="935:35"><name pos:start="935:24" pos:end="935:24">s</name><operator pos:start="935:25" pos:end="935:26">-&gt;</operator><name pos:start="935:27" pos:end="935:35">io_buffer</name></name></expr></argument>, <argument pos:start="935:38" pos:end="935:38"><expr pos:start="935:38" pos:end="935:38"><literal type="number" pos:start="935:38" pos:end="935:38">0</literal></expr></argument>, <argument pos:start="935:41" pos:end="935:45"><expr pos:start="935:41" pos:end="935:45"><literal type="number" pos:start="935:41" pos:end="935:45">0x200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="937:17" pos:end="937:39"><expr pos:start="937:17" pos:end="937:38"><name pos:start="937:17" pos:end="937:31"><name pos:start="937:17" pos:end="937:17">s</name><operator pos:start="937:18" pos:end="937:19">-&gt;</operator><name pos:start="937:20" pos:end="937:28">io_buffer</name><index pos:start="937:29" pos:end="937:31">[<expr pos:start="937:30" pos:end="937:30"><literal type="number" pos:start="937:30" pos:end="937:30">0</literal></expr>]</index></name> <operator pos:start="937:33" pos:end="937:33">=</operator> <literal type="number" pos:start="937:35" pos:end="937:38">0x01</literal></expr>;</expr_stmt>

		<expr_stmt pos:start="939:17" pos:end="939:39"><expr pos:start="939:17" pos:end="939:38"><name pos:start="939:17" pos:end="939:31"><name pos:start="939:17" pos:end="939:17">s</name><operator pos:start="939:18" pos:end="939:19">-&gt;</operator><name pos:start="939:20" pos:end="939:28">io_buffer</name><index pos:start="939:29" pos:end="939:31">[<expr pos:start="939:30" pos:end="939:30"><literal type="number" pos:start="939:30" pos:end="939:30">1</literal></expr>]</index></name> <operator pos:start="939:33" pos:end="939:33">=</operator> <literal type="number" pos:start="939:35" pos:end="939:38">0x00</literal></expr>;</expr_stmt> <comment type="block" pos:start="939:41" pos:end="939:62">/* no error entries */</comment>

		<expr_stmt pos:start="941:17" pos:end="941:59"><expr pos:start="941:17" pos:end="941:58"><name pos:start="941:17" pos:end="941:33"><name pos:start="941:17" pos:end="941:17">s</name><operator pos:start="941:18" pos:end="941:19">-&gt;</operator><name pos:start="941:20" pos:end="941:28">io_buffer</name><index pos:start="941:29" pos:end="941:33">[<expr pos:start="941:30" pos:end="941:32"><literal type="number" pos:start="941:30" pos:end="941:32">452</literal></expr>]</index></name> <operator pos:start="941:35" pos:end="941:35">=</operator> <name pos:start="941:37" pos:end="941:51"><name pos:start="941:37" pos:end="941:37">s</name><operator pos:start="941:38" pos:end="941:39">-&gt;</operator><name pos:start="941:40" pos:end="941:51">smart_errors</name></name> <operator pos:start="941:53" pos:end="941:53">&amp;</operator> <literal type="number" pos:start="941:55" pos:end="941:58">0xff</literal></expr>;</expr_stmt>

		<expr_stmt pos:start="943:17" pos:end="943:68"><expr pos:start="943:17" pos:end="943:67"><name pos:start="943:17" pos:end="943:33"><name pos:start="943:17" pos:end="943:17">s</name><operator pos:start="943:18" pos:end="943:19">-&gt;</operator><name pos:start="943:20" pos:end="943:28">io_buffer</name><index pos:start="943:29" pos:end="943:33">[<expr pos:start="943:30" pos:end="943:32"><literal type="number" pos:start="943:30" pos:end="943:32">453</literal></expr>]</index></name> <operator pos:start="943:35" pos:end="943:35">=</operator> <operator pos:start="943:37" pos:end="943:37">(</operator><name pos:start="943:38" pos:end="943:52"><name pos:start="943:38" pos:end="943:38">s</name><operator pos:start="943:39" pos:end="943:40">-&gt;</operator><name pos:start="943:41" pos:end="943:52">smart_errors</name></name> <operator pos:start="943:54" pos:end="943:54">&amp;</operator> <literal type="number" pos:start="943:56" pos:end="943:61">0xff00</literal><operator pos:start="943:62" pos:end="943:62">)</operator> <operator pos:start="943:64" pos:end="943:65">&gt;&gt;</operator> <literal type="number" pos:start="943:67" pos:end="943:67">8</literal></expr>;</expr_stmt>



		<for pos:start="947:17" pos:end="949:61">for <control pos:start="947:21" pos:end="947:37">(<init pos:start="947:22" pos:end="947:25"><expr pos:start="947:22" pos:end="947:24"><name pos:start="947:22" pos:end="947:22">n</name><operator pos:start="947:23" pos:end="947:23">=</operator><literal type="number" pos:start="947:24" pos:end="947:24">0</literal></expr>;</init> <condition pos:start="947:27" pos:end="947:32"><expr pos:start="947:27" pos:end="947:31"><name pos:start="947:27" pos:end="947:27">n</name><operator pos:start="947:28" pos:end="947:28">&lt;</operator><literal type="number" pos:start="947:29" pos:end="947:31">511</literal></expr>;</condition> <incr pos:start="947:34" pos:end="947:36"><expr pos:start="947:34" pos:end="947:36"><name pos:start="947:34" pos:end="947:34">n</name><operator pos:start="947:35" pos:end="947:36">++</operator></expr></incr>)</control><block type="pseudo" pos:start="949:25" pos:end="949:61"><block_content pos:start="949:25" pos:end="949:61">

			<expr_stmt pos:start="949:25" pos:end="949:61"><expr pos:start="949:25" pos:end="949:60"><name pos:start="949:25" pos:end="949:41"><name pos:start="949:25" pos:end="949:25">s</name><operator pos:start="949:26" pos:end="949:27">-&gt;</operator><name pos:start="949:28" pos:end="949:36">io_buffer</name><index pos:start="949:37" pos:end="949:41">[<expr pos:start="949:38" pos:end="949:40"><literal type="number" pos:start="949:38" pos:end="949:40">511</literal></expr>]</index></name> <operator pos:start="949:43" pos:end="949:44">+=</operator> <name pos:start="949:46" pos:end="949:60"><name pos:start="949:46" pos:end="949:46">s</name><operator pos:start="949:47" pos:end="949:48">-&gt;</operator><name pos:start="949:49" pos:end="949:57">io_buffer</name><index pos:start="949:58" pos:end="949:60">[<expr pos:start="949:59" pos:end="949:59"><name pos:start="949:59" pos:end="949:59">n</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

		<expr_stmt pos:start="951:17" pos:end="951:62"><expr pos:start="951:17" pos:end="951:61"><name pos:start="951:17" pos:end="951:33"><name pos:start="951:17" pos:end="951:17">s</name><operator pos:start="951:18" pos:end="951:19">-&gt;</operator><name pos:start="951:20" pos:end="951:28">io_buffer</name><index pos:start="951:29" pos:end="951:33">[<expr pos:start="951:30" pos:end="951:32"><literal type="number" pos:start="951:30" pos:end="951:32">511</literal></expr>]</index></name> <operator pos:start="951:35" pos:end="951:35">=</operator> <literal type="number" pos:start="951:37" pos:end="951:43">0x100</literal> <operator pos:start="951:43" pos:end="951:43">-</operator> <name pos:start="951:45" pos:end="951:61"><name pos:start="951:45" pos:end="951:45">s</name><operator pos:start="951:46" pos:end="951:47">-&gt;</operator><name pos:start="951:48" pos:end="951:56">io_buffer</name><index pos:start="951:57" pos:end="951:61">[<expr pos:start="951:58" pos:end="951:60"><literal type="number" pos:start="951:58" pos:end="951:60">511</literal></expr>]</index></name></expr>;</expr_stmt>

		<break pos:start="953:17" pos:end="953:22">break;</break>

		<case pos:start="955:17" pos:end="955:26">case <expr pos:start="955:22" pos:end="955:25"><literal type="number" pos:start="955:22" pos:end="955:25">0x06</literal></expr>:</case> <comment type="block" pos:start="955:28" pos:end="955:52">/* smart self test log */</comment>

		<expr_stmt pos:start="957:17" pos:end="957:47"><expr pos:start="957:17" pos:end="957:46"><call pos:start="957:17" pos:end="957:46"><name pos:start="957:17" pos:end="957:22">memset</name><argument_list pos:start="957:23" pos:end="957:46">(<argument pos:start="957:24" pos:end="957:35"><expr pos:start="957:24" pos:end="957:35"><name pos:start="957:24" pos:end="957:35"><name pos:start="957:24" pos:end="957:24">s</name><operator pos:start="957:25" pos:end="957:26">-&gt;</operator><name pos:start="957:27" pos:end="957:35">io_buffer</name></name></expr></argument>, <argument pos:start="957:38" pos:end="957:38"><expr pos:start="957:38" pos:end="957:38"><literal type="number" pos:start="957:38" pos:end="957:38">0</literal></expr></argument>, <argument pos:start="957:41" pos:end="957:45"><expr pos:start="957:41" pos:end="957:45"><literal type="number" pos:start="957:41" pos:end="957:45">0x200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="959:17" pos:end="959:39"><expr pos:start="959:17" pos:end="959:38"><name pos:start="959:17" pos:end="959:31"><name pos:start="959:17" pos:end="959:17">s</name><operator pos:start="959:18" pos:end="959:19">-&gt;</operator><name pos:start="959:20" pos:end="959:28">io_buffer</name><index pos:start="959:29" pos:end="959:31">[<expr pos:start="959:30" pos:end="959:30"><literal type="number" pos:start="959:30" pos:end="959:30">0</literal></expr>]</index></name> <operator pos:start="959:33" pos:end="959:33">=</operator> <literal type="number" pos:start="959:35" pos:end="959:38">0x01</literal></expr>;</expr_stmt>

		<if_stmt pos:start="961:17" pos:end="973:17"><if pos:start="961:17" pos:end="965:17">if <condition pos:start="961:20" pos:end="961:49">(<expr pos:start="961:21" pos:end="961:48"><name pos:start="961:21" pos:end="961:43"><name pos:start="961:21" pos:end="961:21">s</name><operator pos:start="961:22" pos:end="961:23">-&gt;</operator><name pos:start="961:24" pos:end="961:43">smart_selftest_count</name></name> <operator pos:start="961:45" pos:end="961:46">==</operator> <literal type="number" pos:start="961:48" pos:end="961:48">0</literal></expr>)</condition> <block pos:start="961:51" pos:end="965:17">{<block_content pos:start="963:25" pos:end="963:46">

			<expr_stmt pos:start="963:25" pos:end="963:46"><expr pos:start="963:25" pos:end="963:45"><name pos:start="963:25" pos:end="963:41"><name pos:start="963:25" pos:end="963:25">s</name><operator pos:start="963:26" pos:end="963:27">-&gt;</operator><name pos:start="963:28" pos:end="963:36">io_buffer</name><index pos:start="963:37" pos:end="963:41">[<expr pos:start="963:38" pos:end="963:40"><literal type="number" pos:start="963:38" pos:end="963:40">508</literal></expr>]</index></name> <operator pos:start="963:43" pos:end="963:43">=</operator> <literal type="number" pos:start="963:45" pos:end="963:45">0</literal></expr>;</expr_stmt>

		</block_content>}</block></if> <else pos:start="965:19" pos:end="973:17">else <block pos:start="965:24" pos:end="973:17">{<block_content pos:start="967:25" pos:end="971:68">

			<expr_stmt pos:start="967:25" pos:end="967:68"><expr pos:start="967:25" pos:end="967:67"><name pos:start="967:25" pos:end="967:41"><name pos:start="967:25" pos:end="967:25">s</name><operator pos:start="967:26" pos:end="967:27">-&gt;</operator><name pos:start="967:28" pos:end="967:36">io_buffer</name><index pos:start="967:37" pos:end="967:41">[<expr pos:start="967:38" pos:end="967:40"><literal type="number" pos:start="967:38" pos:end="967:40">508</literal></expr>]</index></name> <operator pos:start="967:43" pos:end="967:43">=</operator> <name pos:start="967:45" pos:end="967:67"><name pos:start="967:45" pos:end="967:45">s</name><operator pos:start="967:46" pos:end="967:47">-&gt;</operator><name pos:start="967:48" pos:end="967:67">smart_selftest_count</name></name></expr>;</expr_stmt>

			<for pos:start="969:25" pos:end="971:68">for <control pos:start="969:29" pos:end="969:45">(<init pos:start="969:30" pos:end="969:33"><expr pos:start="969:30" pos:end="969:32"><name pos:start="969:30" pos:end="969:30">n</name><operator pos:start="969:31" pos:end="969:31">=</operator><literal type="number" pos:start="969:32" pos:end="969:32">2</literal></expr>;</init> <condition pos:start="969:35" pos:end="969:40"><expr pos:start="969:35" pos:end="969:39"><name pos:start="969:35" pos:end="969:35">n</name><operator pos:start="969:36" pos:end="969:36">&lt;</operator><literal type="number" pos:start="969:37" pos:end="969:39">506</literal></expr>;</condition> <incr pos:start="969:42" pos:end="969:44"><expr pos:start="969:42" pos:end="969:44"><name pos:start="969:42" pos:end="969:42">n</name><operator pos:start="969:43" pos:end="969:44">++</operator></expr></incr>)</control><block type="pseudo" pos:start="971:25" pos:end="971:68"><block_content pos:start="971:25" pos:end="971:68"> 

			<expr_stmt pos:start="971:25" pos:end="971:68"><expr pos:start="971:25" pos:end="971:67"><name pos:start="971:25" pos:end="971:39"><name pos:start="971:25" pos:end="971:25">s</name><operator pos:start="971:26" pos:end="971:27">-&gt;</operator><name pos:start="971:28" pos:end="971:36">io_buffer</name><index pos:start="971:37" pos:end="971:39">[<expr pos:start="971:38" pos:end="971:38"><name pos:start="971:38" pos:end="971:38">n</name></expr>]</index></name> <operator pos:start="971:41" pos:end="971:41">=</operator> <name pos:start="971:43" pos:end="971:67"><name pos:start="971:43" pos:end="971:43">s</name><operator pos:start="971:44" pos:end="971:45">-&gt;</operator><name pos:start="971:46" pos:end="971:64">smart_selftest_data</name><index pos:start="971:65" pos:end="971:67">[<expr pos:start="971:66" pos:end="971:66"><name pos:start="971:66" pos:end="971:66">n</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

		</block_content>}</block></else></if_stmt>

		<for pos:start="975:17" pos:end="977:61">for <control pos:start="975:21" pos:end="975:37">(<init pos:start="975:22" pos:end="975:25"><expr pos:start="975:22" pos:end="975:24"><name pos:start="975:22" pos:end="975:22">n</name><operator pos:start="975:23" pos:end="975:23">=</operator><literal type="number" pos:start="975:24" pos:end="975:24">0</literal></expr>;</init> <condition pos:start="975:27" pos:end="975:32"><expr pos:start="975:27" pos:end="975:31"><name pos:start="975:27" pos:end="975:27">n</name><operator pos:start="975:28" pos:end="975:28">&lt;</operator><literal type="number" pos:start="975:29" pos:end="975:31">511</literal></expr>;</condition> <incr pos:start="975:34" pos:end="975:36"><expr pos:start="975:34" pos:end="975:36"><name pos:start="975:34" pos:end="975:34">n</name><operator pos:start="975:35" pos:end="975:36">++</operator></expr></incr>)</control><block type="pseudo" pos:start="977:25" pos:end="977:61"><block_content pos:start="977:25" pos:end="977:61">

			<expr_stmt pos:start="977:25" pos:end="977:61"><expr pos:start="977:25" pos:end="977:60"><name pos:start="977:25" pos:end="977:41"><name pos:start="977:25" pos:end="977:25">s</name><operator pos:start="977:26" pos:end="977:27">-&gt;</operator><name pos:start="977:28" pos:end="977:36">io_buffer</name><index pos:start="977:37" pos:end="977:41">[<expr pos:start="977:38" pos:end="977:40"><literal type="number" pos:start="977:38" pos:end="977:40">511</literal></expr>]</index></name> <operator pos:start="977:43" pos:end="977:44">+=</operator> <name pos:start="977:46" pos:end="977:60"><name pos:start="977:46" pos:end="977:46">s</name><operator pos:start="977:47" pos:end="977:48">-&gt;</operator><name pos:start="977:49" pos:end="977:57">io_buffer</name><index pos:start="977:58" pos:end="977:60">[<expr pos:start="977:59" pos:end="977:59"><name pos:start="977:59" pos:end="977:59">n</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

		<expr_stmt pos:start="979:17" pos:end="979:62"><expr pos:start="979:17" pos:end="979:61"><name pos:start="979:17" pos:end="979:33"><name pos:start="979:17" pos:end="979:17">s</name><operator pos:start="979:18" pos:end="979:19">-&gt;</operator><name pos:start="979:20" pos:end="979:28">io_buffer</name><index pos:start="979:29" pos:end="979:33">[<expr pos:start="979:30" pos:end="979:32"><literal type="number" pos:start="979:30" pos:end="979:32">511</literal></expr>]</index></name> <operator pos:start="979:35" pos:end="979:35">=</operator> <literal type="number" pos:start="979:37" pos:end="979:43">0x100</literal> <operator pos:start="979:43" pos:end="979:43">-</operator> <name pos:start="979:45" pos:end="979:61"><name pos:start="979:45" pos:end="979:45">s</name><operator pos:start="979:46" pos:end="979:47">-&gt;</operator><name pos:start="979:48" pos:end="979:56">io_buffer</name><index pos:start="979:57" pos:end="979:61">[<expr pos:start="979:58" pos:end="979:60"><literal type="number" pos:start="979:58" pos:end="979:60">511</literal></expr>]</index></name></expr>;</expr_stmt>

		<break pos:start="981:17" pos:end="981:22">break;</break>

		<default pos:start="983:17" pos:end="983:24">default:</default>

		<goto pos:start="985:17" pos:end="985:31">goto <name pos:start="985:22" pos:end="985:30">abort_cmd</name>;</goto>

		</block_content>}</block></switch>

		<expr_stmt pos:start="989:17" pos:end="989:51"><expr pos:start="989:17" pos:end="989:50"><name pos:start="989:17" pos:end="989:25"><name pos:start="989:17" pos:end="989:17">s</name><operator pos:start="989:18" pos:end="989:19">-&gt;</operator><name pos:start="989:20" pos:end="989:25">status</name></name> <operator pos:start="989:27" pos:end="989:27">=</operator> <name pos:start="989:29" pos:end="989:38">READY_STAT</name> <operator pos:start="989:40" pos:end="989:40">|</operator> <name pos:start="989:42" pos:end="989:50">SEEK_STAT</name></expr>;</expr_stmt>

		<expr_stmt pos:start="991:17" pos:end="991:78"><expr pos:start="991:17" pos:end="991:77"><call pos:start="991:17" pos:end="991:77"><name pos:start="991:17" pos:end="991:34">ide_transfer_start</name><argument_list pos:start="991:35" pos:end="991:77">(<argument pos:start="991:36" pos:end="991:36"><expr pos:start="991:36" pos:end="991:36"><name pos:start="991:36" pos:end="991:36">s</name></expr></argument>, <argument pos:start="991:39" pos:end="991:50"><expr pos:start="991:39" pos:end="991:50"><name pos:start="991:39" pos:end="991:50"><name pos:start="991:39" pos:end="991:39">s</name><operator pos:start="991:40" pos:end="991:41">-&gt;</operator><name pos:start="991:42" pos:end="991:50">io_buffer</name></name></expr></argument>, <argument pos:start="991:53" pos:end="991:57"><expr pos:start="991:53" pos:end="991:57"><literal type="number" pos:start="991:53" pos:end="991:57">0x200</literal></expr></argument>, <argument pos:start="991:60" pos:end="991:76"><expr pos:start="991:60" pos:end="991:76"><name pos:start="991:60" pos:end="991:76">ide_transfer_stop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="993:17" pos:end="993:36"><expr pos:start="993:17" pos:end="993:35"><call pos:start="993:17" pos:end="993:35"><name pos:start="993:17" pos:end="993:27">ide_set_irq</name><argument_list pos:start="993:28" pos:end="993:35">(<argument pos:start="993:29" pos:end="993:34"><expr pos:start="993:29" pos:end="993:34"><name pos:start="993:29" pos:end="993:34"><name pos:start="993:29" pos:end="993:29">s</name><operator pos:start="993:30" pos:end="993:31">-&gt;</operator><name pos:start="993:32" pos:end="993:34">bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<break pos:start="995:17" pos:end="995:22">break;</break>

	<case pos:start="997:9" pos:end="997:35">case <expr pos:start="997:14" pos:end="997:34"><name pos:start="997:14" pos:end="997:34">SMART_EXECUTE_OFFLINE</name></expr>:</case>

		<switch pos:start="999:17" pos:end="1033:17">switch <condition pos:start="999:24" pos:end="999:34">(<expr pos:start="999:25" pos:end="999:33"><name pos:start="999:25" pos:end="999:33"><name pos:start="999:25" pos:end="999:25">s</name><operator pos:start="999:26" pos:end="999:27">-&gt;</operator><name pos:start="999:28" pos:end="999:33">sector</name></name></expr>)</condition> <block pos:start="999:36" pos:end="1033:17">{<block_content pos:start="1001:17" pos:end="1031:31">

		<case pos:start="1001:17" pos:end="1001:23">case <expr pos:start="1001:22" pos:end="1001:22"><literal type="number" pos:start="1001:22" pos:end="1001:22">0</literal></expr>:</case> <comment type="block" pos:start="1001:25" pos:end="1001:46">/* off-line routine */</comment>

		<case pos:start="1003:17" pos:end="1003:23">case <expr pos:start="1003:22" pos:end="1003:22"><literal type="number" pos:start="1003:22" pos:end="1003:22">1</literal></expr>:</case> <comment type="block" pos:start="1003:25" pos:end="1003:45">/* short self test */</comment>

		<case pos:start="1005:17" pos:end="1005:23">case <expr pos:start="1005:22" pos:end="1005:22"><literal type="number" pos:start="1005:22" pos:end="1005:22">2</literal></expr>:</case> <comment type="block" pos:start="1005:25" pos:end="1005:48">/* extended self test */</comment>

		<expr_stmt pos:start="1007:17" pos:end="1007:42"><expr pos:start="1007:17" pos:end="1007:41"><name pos:start="1007:17" pos:end="1007:39"><name pos:start="1007:17" pos:end="1007:17">s</name><operator pos:start="1007:18" pos:end="1007:19">-&gt;</operator><name pos:start="1007:20" pos:end="1007:39">smart_selftest_count</name></name><operator pos:start="1007:40" pos:end="1007:41">++</operator></expr>;</expr_stmt>

		<if_stmt pos:start="1009:17" pos:end="1011:52"><if pos:start="1009:17" pos:end="1011:52">if<condition pos:start="1009:19" pos:end="1009:48">(<expr pos:start="1009:20" pos:end="1009:47"><name pos:start="1009:20" pos:end="1009:42"><name pos:start="1009:20" pos:end="1009:20">s</name><operator pos:start="1009:21" pos:end="1009:22">-&gt;</operator><name pos:start="1009:23" pos:end="1009:42">smart_selftest_count</name></name> <operator pos:start="1009:44" pos:end="1009:44">&gt;</operator> <literal type="number" pos:start="1009:46" pos:end="1009:47">21</literal></expr>)</condition><block type="pseudo" pos:start="1011:25" pos:end="1011:52"><block_content pos:start="1011:25" pos:end="1011:52">

			<expr_stmt pos:start="1011:25" pos:end="1011:52"><expr pos:start="1011:25" pos:end="1011:51"><name pos:start="1011:25" pos:end="1011:47"><name pos:start="1011:25" pos:end="1011:25">s</name><operator pos:start="1011:26" pos:end="1011:27">-&gt;</operator><name pos:start="1011:28" pos:end="1011:47">smart_selftest_count</name></name> <operator pos:start="1011:49" pos:end="1011:49">=</operator> <literal type="number" pos:start="1011:51" pos:end="1011:51">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt pos:start="1013:17" pos:end="1013:59"><expr pos:start="1013:17" pos:end="1013:58"><name pos:start="1013:17" pos:end="1013:17">n</name> <operator pos:start="1013:19" pos:end="1013:19">=</operator> <literal type="number" pos:start="1013:21" pos:end="1013:23">2</literal> <operator pos:start="1013:23" pos:end="1013:23">+</operator> <operator pos:start="1013:25" pos:end="1013:25">(</operator><name pos:start="1013:26" pos:end="1013:48"><name pos:start="1013:26" pos:end="1013:26">s</name><operator pos:start="1013:27" pos:end="1013:28">-&gt;</operator><name pos:start="1013:29" pos:end="1013:48">smart_selftest_count</name></name> <operator pos:start="1013:50" pos:end="1013:50">-</operator> <literal type="number" pos:start="1013:52" pos:end="1013:52">1</literal><operator pos:start="1013:53" pos:end="1013:53">)</operator> <operator pos:start="1013:55" pos:end="1013:55">*</operator> <literal type="number" pos:start="1013:57" pos:end="1013:58">24</literal></expr>;</expr_stmt>

		<expr_stmt pos:start="1015:17" pos:end="1015:54"><expr pos:start="1015:17" pos:end="1015:53"><name pos:start="1015:17" pos:end="1015:41"><name pos:start="1015:17" pos:end="1015:17">s</name><operator pos:start="1015:18" pos:end="1015:19">-&gt;</operator><name pos:start="1015:20" pos:end="1015:38">smart_selftest_data</name><index pos:start="1015:39" pos:end="1015:41">[<expr pos:start="1015:40" pos:end="1015:40"><name pos:start="1015:40" pos:end="1015:40">n</name></expr>]</index></name> <operator pos:start="1015:43" pos:end="1015:43">=</operator> <name pos:start="1015:45" pos:end="1015:53"><name pos:start="1015:45" pos:end="1015:45">s</name><operator pos:start="1015:46" pos:end="1015:47">-&gt;</operator><name pos:start="1015:48" pos:end="1015:53">sector</name></name></expr>;</expr_stmt>

		<expr_stmt pos:start="1017:17" pos:end="1017:51"><expr pos:start="1017:17" pos:end="1017:50"><name pos:start="1017:17" pos:end="1017:43"><name pos:start="1017:17" pos:end="1017:17">s</name><operator pos:start="1017:18" pos:end="1017:19">-&gt;</operator><name pos:start="1017:20" pos:end="1017:38">smart_selftest_data</name><index pos:start="1017:39" pos:end="1017:43">[<expr pos:start="1017:40" pos:end="1017:42"><name pos:start="1017:40" pos:end="1017:40">n</name><operator pos:start="1017:41" pos:end="1017:41">+</operator><literal type="number" pos:start="1017:42" pos:end="1017:42">1</literal></expr>]</index></name> <operator pos:start="1017:45" pos:end="1017:45">=</operator> <literal type="number" pos:start="1017:47" pos:end="1017:50">0x00</literal></expr>;</expr_stmt> <comment type="block" pos:start="1017:53" pos:end="1017:73">/* OK and finished */</comment>

		<expr_stmt pos:start="1019:17" pos:end="1019:51"><expr pos:start="1019:17" pos:end="1019:50"><name pos:start="1019:17" pos:end="1019:43"><name pos:start="1019:17" pos:end="1019:17">s</name><operator pos:start="1019:18" pos:end="1019:19">-&gt;</operator><name pos:start="1019:20" pos:end="1019:38">smart_selftest_data</name><index pos:start="1019:39" pos:end="1019:43">[<expr pos:start="1019:40" pos:end="1019:42"><name pos:start="1019:40" pos:end="1019:40">n</name><operator pos:start="1019:41" pos:end="1019:41">+</operator><literal type="number" pos:start="1019:42" pos:end="1019:42">2</literal></expr>]</index></name> <operator pos:start="1019:45" pos:end="1019:45">=</operator> <literal type="number" pos:start="1019:47" pos:end="1019:50">0x34</literal></expr>;</expr_stmt> <comment type="block" pos:start="1019:53" pos:end="1019:72">/* hour count lsb */</comment>

		<expr_stmt pos:start="1021:17" pos:end="1021:51"><expr pos:start="1021:17" pos:end="1021:50"><name pos:start="1021:17" pos:end="1021:43"><name pos:start="1021:17" pos:end="1021:17">s</name><operator pos:start="1021:18" pos:end="1021:19">-&gt;</operator><name pos:start="1021:20" pos:end="1021:38">smart_selftest_data</name><index pos:start="1021:39" pos:end="1021:43">[<expr pos:start="1021:40" pos:end="1021:42"><name pos:start="1021:40" pos:end="1021:40">n</name><operator pos:start="1021:41" pos:end="1021:41">+</operator><literal type="number" pos:start="1021:42" pos:end="1021:42">3</literal></expr>]</index></name> <operator pos:start="1021:45" pos:end="1021:45">=</operator> <literal type="number" pos:start="1021:47" pos:end="1021:50">0x12</literal></expr>;</expr_stmt> <comment type="block" pos:start="1021:53" pos:end="1021:72">/* hour count msb */</comment>

		<expr_stmt pos:start="1023:17" pos:end="1023:51"><expr pos:start="1023:17" pos:end="1023:50"><name pos:start="1023:17" pos:end="1023:25"><name pos:start="1023:17" pos:end="1023:17">s</name><operator pos:start="1023:18" pos:end="1023:19">-&gt;</operator><name pos:start="1023:20" pos:end="1023:25">status</name></name> <operator pos:start="1023:27" pos:end="1023:27">=</operator> <name pos:start="1023:29" pos:end="1023:38">READY_STAT</name> <operator pos:start="1023:40" pos:end="1023:40">|</operator> <name pos:start="1023:42" pos:end="1023:50">SEEK_STAT</name></expr>;</expr_stmt>

		<expr_stmt pos:start="1025:17" pos:end="1025:36"><expr pos:start="1025:17" pos:end="1025:35"><call pos:start="1025:17" pos:end="1025:35"><name pos:start="1025:17" pos:end="1025:27">ide_set_irq</name><argument_list pos:start="1025:28" pos:end="1025:35">(<argument pos:start="1025:29" pos:end="1025:34"><expr pos:start="1025:29" pos:end="1025:34"><name pos:start="1025:29" pos:end="1025:34"><name pos:start="1025:29" pos:end="1025:29">s</name><operator pos:start="1025:30" pos:end="1025:31">-&gt;</operator><name pos:start="1025:32" pos:end="1025:34">bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<break pos:start="1027:17" pos:end="1027:22">break;</break>

		<default pos:start="1029:17" pos:end="1029:24">default:</default>

		<goto pos:start="1031:17" pos:end="1031:31">goto <name pos:start="1031:22" pos:end="1031:30">abort_cmd</name>;</goto>

		</block_content>}</block></switch>

		<break pos:start="1035:17" pos:end="1035:22">break;</break>

	<default pos:start="1037:9" pos:end="1037:16">default:</default>

		<goto pos:start="1039:17" pos:end="1039:31">goto <name pos:start="1039:22" pos:end="1039:30">abort_cmd</name>;</goto>

	</block_content>}</block></switch>

	<break pos:start="1043:9" pos:end="1043:14">break;</break>

    <default pos:start="1045:5" pos:end="1045:12">default:</default>

        <comment type="block" pos:start="1047:9" pos:end="1047:37">/* should not be reachable */</comment>

    <label pos:start="1049:5" pos:end="1049:14"><name pos:start="1049:5" pos:end="1049:13">abort_cmd</name>:</label>

        <expr_stmt pos:start="1051:9" pos:end="1051:29"><expr pos:start="1051:9" pos:end="1051:28"><call pos:start="1051:9" pos:end="1051:28"><name pos:start="1051:9" pos:end="1051:25">ide_abort_command</name><argument_list pos:start="1051:26" pos:end="1051:28">(<argument pos:start="1051:27" pos:end="1051:27"><expr pos:start="1051:27" pos:end="1051:27"><name pos:start="1051:27" pos:end="1051:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1053:9" pos:end="1053:28"><expr pos:start="1053:9" pos:end="1053:27"><call pos:start="1053:9" pos:end="1053:27"><name pos:start="1053:9" pos:end="1053:19">ide_set_irq</name><argument_list pos:start="1053:20" pos:end="1053:27">(<argument pos:start="1053:21" pos:end="1053:26"><expr pos:start="1053:21" pos:end="1053:26"><name pos:start="1053:21" pos:end="1053:26"><name pos:start="1053:21" pos:end="1053:21">s</name><operator pos:start="1053:22" pos:end="1053:23">-&gt;</operator><name pos:start="1053:24" pos:end="1053:26">bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1055:9" pos:end="1055:14">break;</break>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
