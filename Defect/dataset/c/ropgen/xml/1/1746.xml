<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/1746.c" pos:tabs="8"><function pos:start="1:1" pos:end="149:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:30">test_redirector_tx</name><parameter_list pos:start="1:31" pos:end="1:36">(<parameter pos:start="1:32" pos:end="1:35"><decl pos:start="1:32" pos:end="1:35"><type pos:start="1:32" pos:end="1:35"><name pos:start="1:32" pos:end="1:35">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="149:1">{<block_content pos:start="11:5" pos:end="148:0">

<cpp:ifndef pos:start="5:1" pos:end="5:14">#<cpp:directive pos:start="5:2" pos:end="5:7">ifndef</cpp:directive> <name pos:start="5:9" pos:end="5:14">_WIN32</name></cpp:ifndef>

<comment type="block" pos:start="7:1" pos:end="7:57">/* socketpair(PF_UNIX) which does not exist on windows */</comment>



    <decl_stmt pos:start="11:5" pos:end="11:35"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:23"><name pos:start="11:9" pos:end="11:20">backend_sock</name><index pos:start="11:21" pos:end="11:23">[<expr pos:start="11:22" pos:end="11:22"><literal type="number" pos:start="11:22" pos:end="11:22">2</literal></expr>]</index></name></decl>, <decl pos:start="11:26" pos:end="11:34"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:26" pos:end="11:34">recv_sock</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:8">char</name> <modifier pos:start="13:10" pos:end="13:10">*</modifier></type><name pos:start="13:11" pos:end="13:17">cmdline</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:30"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:16">ret</name> <init pos:start="15:18" pos:end="15:20">= <expr pos:start="15:20" pos:end="15:20"><literal type="number" pos:start="15:20" pos:end="15:20">0</literal></expr></init></decl>, <decl pos:start="15:23" pos:end="15:29"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:23" pos:end="15:25">len</name> <init pos:start="15:27" pos:end="15:29">= <expr pos:start="15:29" pos:end="15:29"><literal type="number" pos:start="15:29" pos:end="15:29">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:32"><decl pos:start="17:5" pos:end="17:31"><type pos:start="17:5" pos:end="17:8"><name pos:start="17:5" pos:end="17:8">char</name></type> <name pos:start="17:10" pos:end="17:19"><name pos:start="17:10" pos:end="17:17">send_buf</name><index pos:start="17:18" pos:end="17:19">[]</index></name> <init pos:start="17:21" pos:end="17:31">= <expr pos:start="17:23" pos:end="17:31"><literal type="string" pos:start="17:23" pos:end="17:31">"Hello!!"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:52"><decl pos:start="19:5" pos:end="19:51"><type pos:start="19:5" pos:end="19:8"><name pos:start="19:5" pos:end="19:8">char</name></type> <name pos:start="19:10" pos:end="19:21"><name pos:start="19:10" pos:end="19:19">sock_path0</name><index pos:start="19:20" pos:end="19:21">[]</index></name> <init pos:start="19:23" pos:end="19:51">= <expr pos:start="19:25" pos:end="19:51"><literal type="string" pos:start="19:25" pos:end="19:51">"filter-redirector0.XXXXXX"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:52"><decl pos:start="21:5" pos:end="21:51"><type pos:start="21:5" pos:end="21:8"><name pos:start="21:5" pos:end="21:8">char</name></type> <name pos:start="21:10" pos:end="21:21"><name pos:start="21:10" pos:end="21:19">sock_path1</name><index pos:start="21:20" pos:end="21:21">[]</index></name> <init pos:start="21:23" pos:end="21:51">= <expr pos:start="21:25" pos:end="21:51"><literal type="string" pos:start="21:25" pos:end="21:51">"filter-redirector1.XXXXXX"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:19"><decl pos:start="23:5" pos:end="23:18"><type pos:start="23:5" pos:end="23:10"><name pos:start="23:5" pos:end="23:8">char</name> <modifier pos:start="23:10" pos:end="23:10">*</modifier></type><name pos:start="23:11" pos:end="23:18">recv_buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:37"><decl pos:start="25:5" pos:end="25:36"><type pos:start="25:5" pos:end="25:12"><name pos:start="25:5" pos:end="25:12">uint32_t</name></type> <name pos:start="25:14" pos:end="25:17">size</name> <init pos:start="25:19" pos:end="25:36">= <expr pos:start="25:21" pos:end="25:36"><sizeof pos:start="25:21" pos:end="25:36">sizeof<argument_list pos:start="25:27" pos:end="25:36">(<argument pos:start="25:28" pos:end="25:35"><expr pos:start="25:28" pos:end="25:35"><name pos:start="25:28" pos:end="25:35">send_buf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:23"><expr pos:start="27:5" pos:end="27:22"><name pos:start="27:5" pos:end="27:8">size</name> <operator pos:start="27:10" pos:end="27:10">=</operator> <call pos:start="27:12" pos:end="27:22"><name pos:start="27:12" pos:end="27:16">htonl</name><argument_list pos:start="27:17" pos:end="27:22">(<argument pos:start="27:18" pos:end="27:21"><expr pos:start="27:18" pos:end="27:21"><name pos:start="27:18" pos:end="27:21">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:60"><expr pos:start="31:5" pos:end="31:59"><name pos:start="31:5" pos:end="31:7">ret</name> <operator pos:start="31:9" pos:end="31:9">=</operator> <call pos:start="31:11" pos:end="31:59"><name pos:start="31:11" pos:end="31:20">socketpair</name><argument_list pos:start="31:21" pos:end="31:59">(<argument pos:start="31:22" pos:end="31:28"><expr pos:start="31:22" pos:end="31:28"><name pos:start="31:22" pos:end="31:28">PF_UNIX</name></expr></argument>, <argument pos:start="31:31" pos:end="31:41"><expr pos:start="31:31" pos:end="31:41"><name pos:start="31:31" pos:end="31:41">SOCK_STREAM</name></expr></argument>, <argument pos:start="31:44" pos:end="31:44"><expr pos:start="31:44" pos:end="31:44"><literal type="number" pos:start="31:44" pos:end="31:44">0</literal></expr></argument>, <argument pos:start="31:47" pos:end="31:58"><expr pos:start="31:47" pos:end="31:58"><name pos:start="31:47" pos:end="31:58">backend_sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:33"><expr pos:start="33:5" pos:end="33:32"><call pos:start="33:5" pos:end="33:32"><name pos:start="33:5" pos:end="33:19">g_assert_cmpint</name><argument_list pos:start="33:20" pos:end="33:32">(<argument pos:start="33:21" pos:end="33:23"><expr pos:start="33:21" pos:end="33:23"><name pos:start="33:21" pos:end="33:23">ret</name></expr></argument>, <argument pos:start="33:26" pos:end="33:27"><expr pos:start="33:26" pos:end="33:27"><operator pos:start="33:26" pos:end="33:27">!=</operator></expr></argument>, <argument pos:start="33:30" pos:end="33:31"><expr pos:start="33:30" pos:end="33:31"><operator pos:start="33:30" pos:end="33:30">-</operator><literal type="number" pos:start="33:31" pos:end="33:31">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:30"><expr pos:start="37:5" pos:end="37:29"><name pos:start="37:5" pos:end="37:7">ret</name> <operator pos:start="37:9" pos:end="37:9">=</operator> <call pos:start="37:11" pos:end="37:29"><name pos:start="37:11" pos:end="37:17">mkstemp</name><argument_list pos:start="37:18" pos:end="37:29">(<argument pos:start="37:19" pos:end="37:28"><expr pos:start="37:19" pos:end="37:28"><name pos:start="37:19" pos:end="37:28">sock_path0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:33"><expr pos:start="39:5" pos:end="39:32"><call pos:start="39:5" pos:end="39:32"><name pos:start="39:5" pos:end="39:19">g_assert_cmpint</name><argument_list pos:start="39:20" pos:end="39:32">(<argument pos:start="39:21" pos:end="39:23"><expr pos:start="39:21" pos:end="39:23"><name pos:start="39:21" pos:end="39:23">ret</name></expr></argument>, <argument pos:start="39:26" pos:end="39:27"><expr pos:start="39:26" pos:end="39:27"><operator pos:start="39:26" pos:end="39:27">!=</operator></expr></argument>, <argument pos:start="39:30" pos:end="39:31"><expr pos:start="39:30" pos:end="39:31"><operator pos:start="39:30" pos:end="39:30">-</operator><literal type="number" pos:start="39:31" pos:end="39:31">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:30"><expr pos:start="41:5" pos:end="41:29"><name pos:start="41:5" pos:end="41:7">ret</name> <operator pos:start="41:9" pos:end="41:9">=</operator> <call pos:start="41:11" pos:end="41:29"><name pos:start="41:11" pos:end="41:17">mkstemp</name><argument_list pos:start="41:18" pos:end="41:29">(<argument pos:start="41:19" pos:end="41:28"><expr pos:start="41:19" pos:end="41:28"><name pos:start="41:19" pos:end="41:28">sock_path1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:33"><expr pos:start="43:5" pos:end="43:32"><call pos:start="43:5" pos:end="43:32"><name pos:start="43:5" pos:end="43:19">g_assert_cmpint</name><argument_list pos:start="43:20" pos:end="43:32">(<argument pos:start="43:21" pos:end="43:23"><expr pos:start="43:21" pos:end="43:23"><name pos:start="43:21" pos:end="43:23">ret</name></expr></argument>, <argument pos:start="43:26" pos:end="43:27"><expr pos:start="43:26" pos:end="43:27"><operator pos:start="43:26" pos:end="43:27">!=</operator></expr></argument>, <argument pos:start="43:30" pos:end="43:31"><expr pos:start="43:30" pos:end="43:31"><operator pos:start="43:30" pos:end="43:30">-</operator><literal type="number" pos:start="43:31" pos:end="43:31">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="69:71"><expr pos:start="47:5" pos:end="69:70"><name pos:start="47:5" pos:end="47:11">cmdline</name> <operator pos:start="47:13" pos:end="47:13">=</operator> <call pos:start="47:15" pos:end="69:70"><name pos:start="47:15" pos:end="47:29">g_strdup_printf</name><argument_list pos:start="47:30" pos:end="69:70">(<argument pos:start="47:31" pos:end="67:46"><expr pos:start="47:31" pos:end="67:46"><literal type="string" pos:start="47:31" pos:end="47:66">"-netdev socket,id=qtest-bn0,fd=%d "</literal>

                <literal type="string" pos:start="49:17" pos:end="49:63">"-device rtl8139,netdev=qtest-bn0,id=qtest-e0 "</literal>

                <literal type="string" pos:start="51:17" pos:end="51:71">"-chardev socket,id=redirector0,path=%s,server,nowait "</literal>

                <literal type="string" pos:start="53:17" pos:end="53:71">"-chardev socket,id=redirector1,path=%s,server,nowait "</literal>

                <literal type="string" pos:start="55:17" pos:end="55:64">"-chardev socket,id=redirector2,path=%s,nowait "</literal>

                <literal type="string" pos:start="57:17" pos:end="57:73">"-object filter-redirector,id=qtest-f0,netdev=qtest-bn0,"</literal>

                <literal type="string" pos:start="59:17" pos:end="59:46">"queue=tx,outdev=redirector0 "</literal>

                <literal type="string" pos:start="61:17" pos:end="61:73">"-object filter-redirector,id=qtest-f1,netdev=qtest-bn0,"</literal>

                <literal type="string" pos:start="63:17" pos:end="63:45">"queue=tx,indev=redirector2 "</literal>

                <literal type="string" pos:start="65:17" pos:end="65:73">"-object filter-redirector,id=qtest-f2,netdev=qtest-bn0,"</literal>

                <literal type="string" pos:start="67:17" pos:end="67:46">"queue=tx,outdev=redirector1 "</literal></expr></argument>

                , <argument pos:start="69:19" pos:end="69:33"><expr pos:start="69:19" pos:end="69:33"><name pos:start="69:19" pos:end="69:33"><name pos:start="69:19" pos:end="69:30">backend_sock</name><index pos:start="69:31" pos:end="69:33">[<expr pos:start="69:32" pos:end="69:32"><literal type="number" pos:start="69:32" pos:end="69:32">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="69:36" pos:end="69:45"><expr pos:start="69:36" pos:end="69:45"><name pos:start="69:36" pos:end="69:45">sock_path0</name></expr></argument>, <argument pos:start="69:48" pos:end="69:57"><expr pos:start="69:48" pos:end="69:57"><name pos:start="69:48" pos:end="69:57">sock_path1</name></expr></argument>, <argument pos:start="69:60" pos:end="69:69"><expr pos:start="69:60" pos:end="69:69"><name pos:start="69:60" pos:end="69:69">sock_path0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:25"><expr pos:start="71:5" pos:end="71:24"><call pos:start="71:5" pos:end="71:24"><name pos:start="71:5" pos:end="71:15">qtest_start</name><argument_list pos:start="71:16" pos:end="71:24">(<argument pos:start="71:17" pos:end="71:23"><expr pos:start="71:17" pos:end="71:23"><name pos:start="71:17" pos:end="71:23">cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:20"><expr pos:start="73:5" pos:end="73:19"><call pos:start="73:5" pos:end="73:19"><name pos:start="73:5" pos:end="73:10">g_free</name><argument_list pos:start="73:11" pos:end="73:19">(<argument pos:start="73:12" pos:end="73:18"><expr pos:start="73:12" pos:end="73:18"><name pos:start="73:12" pos:end="73:18">cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:47"><expr pos:start="77:5" pos:end="77:46"><name pos:start="77:5" pos:end="77:13">recv_sock</name> <operator pos:start="77:15" pos:end="77:15">=</operator> <call pos:start="77:17" pos:end="77:46"><name pos:start="77:17" pos:end="77:28">unix_connect</name><argument_list pos:start="77:29" pos:end="77:46">(<argument pos:start="77:30" pos:end="77:39"><expr pos:start="77:30" pos:end="77:39"><name pos:start="77:30" pos:end="77:39">sock_path1</name></expr></argument>, <argument pos:start="77:42" pos:end="77:45"><expr pos:start="77:42" pos:end="77:45"><name pos:start="77:42" pos:end="77:45">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:39"><expr pos:start="79:5" pos:end="79:38"><call pos:start="79:5" pos:end="79:38"><name pos:start="79:5" pos:end="79:19">g_assert_cmpint</name><argument_list pos:start="79:20" pos:end="79:38">(<argument pos:start="79:21" pos:end="79:29"><expr pos:start="79:21" pos:end="79:29"><name pos:start="79:21" pos:end="79:29">recv_sock</name></expr></argument>, <argument pos:start="79:32" pos:end="79:33"><expr pos:start="79:32" pos:end="79:33"><operator pos:start="79:32" pos:end="79:33">!=</operator></expr></argument>, <argument pos:start="79:36" pos:end="79:37"><expr pos:start="79:36" pos:end="79:37"><operator pos:start="79:36" pos:end="79:36">-</operator><literal type="number" pos:start="79:37" pos:end="79:37">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="83:5" pos:end="83:78">/* send a qmp command to guarantee that 'connected' is setting to true. */</comment>

    <expr_stmt pos:start="85:5" pos:end="85:41"><expr pos:start="85:5" pos:end="85:40"><call pos:start="85:5" pos:end="85:40"><name pos:start="85:5" pos:end="85:7">qmp</name><argument_list pos:start="85:8" pos:end="85:40">(<argument pos:start="85:9" pos:end="85:39"><expr pos:start="85:9" pos:end="85:39"><literal type="string" pos:start="85:9" pos:end="85:39">"{ 'execute' : 'query-status'}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <decl_stmt pos:start="89:5" pos:end="105:6"><decl pos:start="89:5" pos:end="105:5"><type pos:start="89:5" pos:end="89:16"><name pos:start="89:5" pos:end="89:16"><name pos:start="89:5" pos:end="89:10">struct</name> <name pos:start="89:12" pos:end="89:16">iovec</name></name></type> <name pos:start="89:18" pos:end="89:22"><name pos:start="89:18" pos:end="89:20">iov</name><index pos:start="89:21" pos:end="89:22">[]</index></name> <init pos:start="89:24" pos:end="105:5">= <expr pos:start="89:26" pos:end="105:5"><block pos:start="89:26" pos:end="105:5">{

        <expr pos:start="91:9" pos:end="97:9"><block pos:start="91:9" pos:end="97:9">{

            <expr pos:start="93:13" pos:end="93:29"><operator pos:start="93:13" pos:end="93:13">.</operator><name pos:start="93:14" pos:end="93:21">iov_base</name> <operator pos:start="93:23" pos:end="93:23">=</operator> <operator pos:start="93:25" pos:end="93:25">&amp;</operator><name pos:start="93:26" pos:end="93:29">size</name></expr>,

            <expr pos:start="95:13" pos:end="95:35"><operator pos:start="95:13" pos:end="95:13">.</operator><name pos:start="95:14" pos:end="95:20">iov_len</name> <operator pos:start="95:22" pos:end="95:22">=</operator> <sizeof pos:start="95:24" pos:end="95:35">sizeof<argument_list pos:start="95:30" pos:end="95:35">(<argument pos:start="95:31" pos:end="95:34"><expr pos:start="95:31" pos:end="95:34"><name pos:start="95:31" pos:end="95:34">size</name></expr></argument>)</argument_list></sizeof></expr>,

        }</block></expr>, <expr pos:start="97:12" pos:end="103:9"><block pos:start="97:12" pos:end="103:9">{

            <expr pos:start="99:13" pos:end="99:32"><operator pos:start="99:13" pos:end="99:13">.</operator><name pos:start="99:14" pos:end="99:21">iov_base</name> <operator pos:start="99:23" pos:end="99:23">=</operator> <name pos:start="99:25" pos:end="99:32">send_buf</name></expr>,

            <expr pos:start="101:13" pos:end="101:39"><operator pos:start="101:13" pos:end="101:13">.</operator><name pos:start="101:14" pos:end="101:20">iov_len</name> <operator pos:start="101:22" pos:end="101:22">=</operator> <sizeof pos:start="101:24" pos:end="101:39">sizeof<argument_list pos:start="101:30" pos:end="101:39">(<argument pos:start="101:31" pos:end="101:38"><expr pos:start="101:31" pos:end="101:38"><name pos:start="101:31" pos:end="101:38">send_buf</name></expr></argument>)</argument_list></sizeof></expr>,

        }</block></expr>,

    }</block></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="109:5" pos:end="109:80"><expr pos:start="109:5" pos:end="109:79"><name pos:start="109:5" pos:end="109:7">ret</name> <operator pos:start="109:9" pos:end="109:9">=</operator> <call pos:start="109:11" pos:end="109:79"><name pos:start="109:11" pos:end="109:18">iov_send</name><argument_list pos:start="109:19" pos:end="109:79">(<argument pos:start="109:20" pos:end="109:34"><expr pos:start="109:20" pos:end="109:34"><name pos:start="109:20" pos:end="109:34"><name pos:start="109:20" pos:end="109:31">backend_sock</name><index pos:start="109:32" pos:end="109:34">[<expr pos:start="109:33" pos:end="109:33"><literal type="number" pos:start="109:33" pos:end="109:33">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="109:37" pos:end="109:39"><expr pos:start="109:37" pos:end="109:39"><name pos:start="109:37" pos:end="109:39">iov</name></expr></argument>, <argument pos:start="109:42" pos:end="109:42"><expr pos:start="109:42" pos:end="109:42"><literal type="number" pos:start="109:42" pos:end="109:42">2</literal></expr></argument>, <argument pos:start="109:45" pos:end="109:45"><expr pos:start="109:45" pos:end="109:45"><literal type="number" pos:start="109:45" pos:end="109:45">0</literal></expr></argument>, <argument pos:start="109:48" pos:end="109:78"><expr pos:start="109:48" pos:end="109:78"><sizeof pos:start="109:48" pos:end="109:59">sizeof<argument_list pos:start="109:54" pos:end="109:59">(<argument pos:start="109:55" pos:end="109:58"><expr pos:start="109:55" pos:end="109:58"><name pos:start="109:55" pos:end="109:58">size</name></expr></argument>)</argument_list></sizeof> <operator pos:start="109:61" pos:end="109:61">+</operator> <sizeof pos:start="109:63" pos:end="109:78">sizeof<argument_list pos:start="109:69" pos:end="109:78">(<argument pos:start="109:70" pos:end="109:77"><expr pos:start="109:70" pos:end="109:77"><name pos:start="109:70" pos:end="109:77">send_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:62"><expr pos:start="111:5" pos:end="111:61"><call pos:start="111:5" pos:end="111:61"><name pos:start="111:5" pos:end="111:19">g_assert_cmpint</name><argument_list pos:start="111:20" pos:end="111:61">(<argument pos:start="111:21" pos:end="111:23"><expr pos:start="111:21" pos:end="111:23"><name pos:start="111:21" pos:end="111:23">ret</name></expr></argument>, <argument pos:start="111:26" pos:end="111:27"><expr pos:start="111:26" pos:end="111:27"><operator pos:start="111:26" pos:end="111:27">==</operator></expr></argument>, <argument pos:start="111:30" pos:end="111:60"><expr pos:start="111:30" pos:end="111:60"><sizeof pos:start="111:30" pos:end="111:45">sizeof<argument_list pos:start="111:36" pos:end="111:45">(<argument pos:start="111:37" pos:end="111:44"><expr pos:start="111:37" pos:end="111:44"><name pos:start="111:37" pos:end="111:44">send_buf</name></expr></argument>)</argument_list></sizeof> <operator pos:start="111:47" pos:end="111:47">+</operator> <sizeof pos:start="111:49" pos:end="111:60">sizeof<argument_list pos:start="111:55" pos:end="111:60">(<argument pos:start="111:56" pos:end="111:59"><expr pos:start="111:56" pos:end="111:59"><name pos:start="111:56" pos:end="111:59">size</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:27"><expr pos:start="113:5" pos:end="113:26"><call pos:start="113:5" pos:end="113:26"><name pos:start="113:5" pos:end="113:9">close</name><argument_list pos:start="113:10" pos:end="113:26">(<argument pos:start="113:11" pos:end="113:25"><expr pos:start="113:11" pos:end="113:25"><name pos:start="113:11" pos:end="113:25"><name pos:start="113:11" pos:end="113:22">backend_sock</name><index pos:start="113:23" pos:end="113:25">[<expr pos:start="113:24" pos:end="113:24"><literal type="number" pos:start="113:24" pos:end="113:24">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="117:5" pos:end="117:53"><expr pos:start="117:5" pos:end="117:52"><name pos:start="117:5" pos:end="117:7">ret</name> <operator pos:start="117:9" pos:end="117:9">=</operator> <call pos:start="117:11" pos:end="117:52"><name pos:start="117:11" pos:end="117:19">qemu_recv</name><argument_list pos:start="117:20" pos:end="117:52">(<argument pos:start="117:21" pos:end="117:29"><expr pos:start="117:21" pos:end="117:29"><name pos:start="117:21" pos:end="117:29">recv_sock</name></expr></argument>, <argument pos:start="117:32" pos:end="117:35"><expr pos:start="117:32" pos:end="117:35"><operator pos:start="117:32" pos:end="117:32">&amp;</operator><name pos:start="117:33" pos:end="117:35">len</name></expr></argument>, <argument pos:start="117:38" pos:end="117:48"><expr pos:start="117:38" pos:end="117:48"><sizeof pos:start="117:38" pos:end="117:48">sizeof<argument_list pos:start="117:44" pos:end="117:48">(<argument pos:start="117:45" pos:end="117:47"><expr pos:start="117:45" pos:end="117:47"><name pos:start="117:45" pos:end="117:47">len</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="117:51" pos:end="117:51"><expr pos:start="117:51" pos:end="117:51"><literal type="number" pos:start="117:51" pos:end="117:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:42"><expr pos:start="119:5" pos:end="119:41"><call pos:start="119:5" pos:end="119:41"><name pos:start="119:5" pos:end="119:19">g_assert_cmpint</name><argument_list pos:start="119:20" pos:end="119:41">(<argument pos:start="119:21" pos:end="119:23"><expr pos:start="119:21" pos:end="119:23"><name pos:start="119:21" pos:end="119:23">ret</name></expr></argument>, <argument pos:start="119:26" pos:end="119:27"><expr pos:start="119:26" pos:end="119:27"><operator pos:start="119:26" pos:end="119:27">==</operator></expr></argument>, <argument pos:start="119:30" pos:end="119:40"><expr pos:start="119:30" pos:end="119:40"><sizeof pos:start="119:30" pos:end="119:40">sizeof<argument_list pos:start="119:36" pos:end="119:40">(<argument pos:start="119:37" pos:end="119:39"><expr pos:start="119:37" pos:end="119:39"><name pos:start="119:37" pos:end="119:39">len</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:21"><expr pos:start="121:5" pos:end="121:20"><name pos:start="121:5" pos:end="121:7">len</name> <operator pos:start="121:9" pos:end="121:9">=</operator> <call pos:start="121:11" pos:end="121:20"><name pos:start="121:11" pos:end="121:15">ntohl</name><argument_list pos:start="121:16" pos:end="121:20">(<argument pos:start="121:17" pos:end="121:19"><expr pos:start="121:17" pos:end="121:19"><name pos:start="121:17" pos:end="121:19">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="125:5" pos:end="125:47"><expr pos:start="125:5" pos:end="125:46"><call pos:start="125:5" pos:end="125:46"><name pos:start="125:5" pos:end="125:19">g_assert_cmpint</name><argument_list pos:start="125:20" pos:end="125:46">(<argument pos:start="125:21" pos:end="125:23"><expr pos:start="125:21" pos:end="125:23"><name pos:start="125:21" pos:end="125:23">len</name></expr></argument>, <argument pos:start="125:26" pos:end="125:27"><expr pos:start="125:26" pos:end="125:27"><operator pos:start="125:26" pos:end="125:27">==</operator></expr></argument>, <argument pos:start="125:30" pos:end="125:45"><expr pos:start="125:30" pos:end="125:45"><sizeof pos:start="125:30" pos:end="125:45">sizeof<argument_list pos:start="125:36" pos:end="125:45">(<argument pos:start="125:37" pos:end="125:44"><expr pos:start="125:37" pos:end="125:44"><name pos:start="125:37" pos:end="125:44">send_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:29"><expr pos:start="127:5" pos:end="127:28"><name pos:start="127:5" pos:end="127:12">recv_buf</name> <operator pos:start="127:14" pos:end="127:14">=</operator> <call pos:start="127:16" pos:end="127:28"><name pos:start="127:16" pos:end="127:23">g_malloc</name><argument_list pos:start="127:24" pos:end="127:28">(<argument pos:start="127:25" pos:end="127:27"><expr pos:start="127:25" pos:end="127:27"><name pos:start="127:25" pos:end="127:27">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:49"><expr pos:start="129:5" pos:end="129:48"><name pos:start="129:5" pos:end="129:7">ret</name> <operator pos:start="129:9" pos:end="129:9">=</operator> <call pos:start="129:11" pos:end="129:48"><name pos:start="129:11" pos:end="129:19">qemu_recv</name><argument_list pos:start="129:20" pos:end="129:48">(<argument pos:start="129:21" pos:end="129:29"><expr pos:start="129:21" pos:end="129:29"><name pos:start="129:21" pos:end="129:29">recv_sock</name></expr></argument>, <argument pos:start="129:32" pos:end="129:39"><expr pos:start="129:32" pos:end="129:39"><name pos:start="129:32" pos:end="129:39">recv_buf</name></expr></argument>, <argument pos:start="129:42" pos:end="129:44"><expr pos:start="129:42" pos:end="129:44"><name pos:start="129:42" pos:end="129:44">len</name></expr></argument>, <argument pos:start="129:47" pos:end="129:47"><expr pos:start="129:47" pos:end="129:47"><literal type="number" pos:start="129:47" pos:end="129:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:44"><expr pos:start="131:5" pos:end="131:43"><call pos:start="131:5" pos:end="131:43"><name pos:start="131:5" pos:end="131:19">g_assert_cmpstr</name><argument_list pos:start="131:20" pos:end="131:43">(<argument pos:start="131:21" pos:end="131:28"><expr pos:start="131:21" pos:end="131:28"><name pos:start="131:21" pos:end="131:28">recv_buf</name></expr></argument>, <argument pos:start="131:31" pos:end="131:32"><expr pos:start="131:31" pos:end="131:32"><operator pos:start="131:31" pos:end="131:32">==</operator></expr></argument>, <argument pos:start="131:35" pos:end="131:42"><expr pos:start="131:35" pos:end="131:42"><name pos:start="131:35" pos:end="131:42">send_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="135:5" pos:end="135:21"><expr pos:start="135:5" pos:end="135:20"><call pos:start="135:5" pos:end="135:20"><name pos:start="135:5" pos:end="135:10">g_free</name><argument_list pos:start="135:11" pos:end="135:20">(<argument pos:start="135:12" pos:end="135:19"><expr pos:start="135:12" pos:end="135:19"><name pos:start="135:12" pos:end="135:19">recv_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="137:5" pos:end="137:21"><expr pos:start="137:5" pos:end="137:20"><call pos:start="137:5" pos:end="137:20"><name pos:start="137:5" pos:end="137:9">close</name><argument_list pos:start="137:10" pos:end="137:20">(<argument pos:start="137:11" pos:end="137:19"><expr pos:start="137:11" pos:end="137:19"><name pos:start="137:11" pos:end="137:19">recv_sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:23"><expr pos:start="139:5" pos:end="139:22"><call pos:start="139:5" pos:end="139:22"><name pos:start="139:5" pos:end="139:10">unlink</name><argument_list pos:start="139:11" pos:end="139:22">(<argument pos:start="139:12" pos:end="139:21"><expr pos:start="139:12" pos:end="139:21"><name pos:start="139:12" pos:end="139:21">sock_path0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="141:5" pos:end="141:23"><expr pos:start="141:5" pos:end="141:22"><call pos:start="141:5" pos:end="141:22"><name pos:start="141:5" pos:end="141:10">unlink</name><argument_list pos:start="141:11" pos:end="141:22">(<argument pos:start="141:12" pos:end="141:21"><expr pos:start="141:12" pos:end="141:21"><name pos:start="141:12" pos:end="141:21">sock_path1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="143:5" pos:end="148:0"><expr pos:start="143:5" pos:end="143:15"><call pos:start="143:5" pos:end="143:15"><name pos:start="143:5" pos:end="143:13">qtest_end</name><argument_list pos:start="143:14" pos:end="143:15">()</argument_list></call></expr>;</expr_stmt>



<cpp:endif pos:start="147:1" pos:end="147:6">#<cpp:directive pos:start="147:2" pos:end="147:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
