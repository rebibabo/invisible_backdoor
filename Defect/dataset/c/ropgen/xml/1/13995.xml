<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13995.c" pos:tabs="8"><function pos:start="1:1" pos:end="279:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:19">main_loop_wait</name><parameter_list pos:start="1:20" pos:end="1:32">(<parameter pos:start="1:21" pos:end="1:31"><decl pos:start="1:21" pos:end="1:31"><type pos:start="1:21" pos:end="1:23"><name pos:start="1:21" pos:end="1:23">int</name></type> <name pos:start="1:25" pos:end="1:31">timeout</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="279:1">{<block_content pos:start="5:5" pos:end="275:19">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:21"><name pos:start="5:5" pos:end="5:19">IOHandlerRecord</name> <modifier pos:start="5:21" pos:end="5:21">*</modifier></type><name pos:start="5:22" pos:end="5:24">ioh</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:10">fd_set</name></type> <name pos:start="7:12" pos:end="7:15">rfds</name></decl>, <decl pos:start="7:18" pos:end="7:21"><type ref="prev" pos:start="7:5" pos:end="7:10"/><name pos:start="7:18" pos:end="7:21">wfds</name></decl>, <decl pos:start="7:24" pos:end="7:27"><type ref="prev" pos:start="7:5" pos:end="7:10"/><name pos:start="7:24" pos:end="7:27">xfds</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="12:0"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>, <decl pos:start="9:14" pos:end="9:17"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:14" pos:end="9:17">nfds</name></decl>;</decl_stmt>

<cpp:ifdef pos:start="11:1" pos:end="11:13">#<cpp:directive pos:start="11:2" pos:end="11:6">ifdef</cpp:directive> <name pos:start="11:8" pos:end="11:13">_WIN32</name></cpp:ifdef>

    <decl_stmt pos:start="13:5" pos:end="16:0"><decl pos:start="13:5" pos:end="13:12"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:12">ret2</name></decl>, <decl pos:start="13:15" pos:end="13:15"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:15" pos:end="13:15">i</name></decl>;</decl_stmt>

<cpp:endif pos:start="15:1" pos:end="15:6">#<cpp:directive pos:start="15:2" pos:end="15:6">endif</cpp:directive></cpp:endif>

    <decl_stmt pos:start="17:5" pos:end="17:22"><decl pos:start="17:5" pos:end="17:21"><type pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:10">struct</name> <name pos:start="17:12" pos:end="17:18">timeval</name></name></type> <name pos:start="17:20" pos:end="17:21">tv</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:21"><decl pos:start="19:5" pos:end="19:20"><type pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:16">PollingEntry</name> <modifier pos:start="19:18" pos:end="19:18">*</modifier></type><name pos:start="19:19" pos:end="19:20">pe</name></decl>;</decl_stmt>





    <comment type="block" pos:start="25:5" pos:end="25:68">/* XXX: need to suppress polling by better using win32 events */</comment>

    <expr_stmt pos:start="27:5" pos:end="27:12"><expr pos:start="27:5" pos:end="27:11"><name pos:start="27:5" pos:end="27:7">ret</name> <operator pos:start="27:9" pos:end="27:9">=</operator> <literal type="number" pos:start="27:11" pos:end="27:11">0</literal></expr>;</expr_stmt>

    <for pos:start="29:5" pos:end="36:0">for<control pos:start="29:8" pos:end="29:60">(<init pos:start="29:9" pos:end="29:33"><expr pos:start="29:9" pos:end="29:32"><name pos:start="29:9" pos:end="29:10">pe</name> <operator pos:start="29:12" pos:end="29:12">=</operator> <name pos:start="29:14" pos:end="29:32">first_polling_entry</name></expr>;</init> <condition pos:start="29:35" pos:end="29:45"><expr pos:start="29:35" pos:end="29:44"><name pos:start="29:35" pos:end="29:36">pe</name> <operator pos:start="29:38" pos:end="29:39">!=</operator> <name pos:start="29:41" pos:end="29:44">NULL</name></expr>;</condition> <incr pos:start="29:47" pos:end="29:59"><expr pos:start="29:47" pos:end="29:59"><name pos:start="29:47" pos:end="29:48">pe</name> <operator pos:start="29:50" pos:end="29:50">=</operator> <name pos:start="29:52" pos:end="29:59"><name pos:start="29:52" pos:end="29:53">pe</name><operator pos:start="29:54" pos:end="29:55">-&gt;</operator><name pos:start="29:56" pos:end="29:59">next</name></name></expr></incr>)</control> <block pos:start="29:62" pos:end="36:0">{<block_content pos:start="31:9" pos:end="31:36">

        <expr_stmt pos:start="31:9" pos:end="31:36"><expr pos:start="31:9" pos:end="31:35"><name pos:start="31:9" pos:end="31:11">ret</name> <operator pos:start="31:13" pos:end="31:14">|=</operator> <call pos:start="31:16" pos:end="31:35"><name pos:start="31:16" pos:end="31:23"><name pos:start="31:16" pos:end="31:17">pe</name><operator pos:start="31:18" pos:end="31:19">-&gt;</operator><name pos:start="31:20" pos:end="31:23">func</name></name><argument_list pos:start="31:24" pos:end="31:35">(<argument pos:start="31:25" pos:end="31:34"><expr pos:start="31:25" pos:end="31:34"><name pos:start="31:25" pos:end="31:34"><name pos:start="31:25" pos:end="31:26">pe</name><operator pos:start="31:27" pos:end="31:28">-&gt;</operator><name pos:start="31:29" pos:end="31:34">opaque</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

<cpp:ifdef pos:start="35:1" pos:end="35:13">#<cpp:directive pos:start="35:2" pos:end="35:6">ifdef</cpp:directive> <name pos:start="35:8" pos:end="35:13">_WIN32</name></cpp:ifdef>

    <if_stmt pos:start="37:5" pos:end="96:0"><if pos:start="37:5" pos:end="96:0">if <condition pos:start="37:8" pos:end="37:17">(<expr pos:start="37:9" pos:end="37:16"><name pos:start="37:9" pos:end="37:11">ret</name> <operator pos:start="37:13" pos:end="37:14">==</operator> <literal type="number" pos:start="37:16" pos:end="37:16">0</literal></expr>)</condition> <block pos:start="37:19" pos:end="96:0">{<block_content pos:start="39:9" pos:end="91:9">

        <decl_stmt pos:start="39:9" pos:end="39:16"><decl pos:start="39:9" pos:end="39:15"><type pos:start="39:9" pos:end="39:11"><name pos:start="39:9" pos:end="39:11">int</name></type> <name pos:start="39:13" pos:end="39:15">err</name></decl>;</decl_stmt>

        <decl_stmt pos:start="41:9" pos:end="41:39"><decl pos:start="41:9" pos:end="41:38"><type pos:start="41:9" pos:end="41:21"><name pos:start="41:9" pos:end="41:19">WaitObjects</name> <modifier pos:start="41:21" pos:end="41:21">*</modifier></type><name pos:start="41:22" pos:end="41:22">w</name> <init pos:start="41:24" pos:end="41:38">= <expr pos:start="41:26" pos:end="41:38"><operator pos:start="41:26" pos:end="41:26">&amp;</operator><name pos:start="41:27" pos:end="41:38">wait_objects</name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="45:9" pos:end="45:72"><expr pos:start="45:9" pos:end="45:71"><name pos:start="45:9" pos:end="45:11">ret</name> <operator pos:start="45:13" pos:end="45:13">=</operator> <call pos:start="45:15" pos:end="45:71"><name pos:start="45:15" pos:end="45:36">WaitForMultipleObjects</name><argument_list pos:start="45:37" pos:end="45:71">(<argument pos:start="45:38" pos:end="45:43"><expr pos:start="45:38" pos:end="45:43"><name pos:start="45:38" pos:end="45:43"><name pos:start="45:38" pos:end="45:38">w</name><operator pos:start="45:39" pos:end="45:40">-&gt;</operator><name pos:start="45:41" pos:end="45:43">num</name></name></expr></argument>, <argument pos:start="45:46" pos:end="45:54"><expr pos:start="45:46" pos:end="45:54"><name pos:start="45:46" pos:end="45:54"><name pos:start="45:46" pos:end="45:46">w</name><operator pos:start="45:47" pos:end="45:48">-&gt;</operator><name pos:start="45:49" pos:end="45:54">events</name></name></expr></argument>, <argument pos:start="45:57" pos:end="45:61"><expr pos:start="45:57" pos:end="45:61"><name pos:start="45:57" pos:end="45:61">FALSE</name></expr></argument>, <argument pos:start="45:64" pos:end="45:70"><expr pos:start="45:64" pos:end="45:70"><name pos:start="45:64" pos:end="45:70">timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="47:9" pos:end="91:9"><if pos:start="47:9" pos:end="83:9">if <condition pos:start="47:12" pos:end="47:74">(<expr pos:start="47:13" pos:end="47:73"><name pos:start="47:13" pos:end="47:25">WAIT_OBJECT_0</name> <operator pos:start="47:27" pos:end="47:27">+</operator> <literal type="number" pos:start="47:29" pos:end="47:29">0</literal> <operator pos:start="47:31" pos:end="47:32">&lt;=</operator> <name pos:start="47:34" pos:end="47:36">ret</name> <operator pos:start="47:38" pos:end="47:39">&amp;&amp;</operator> <name pos:start="47:41" pos:end="47:43">ret</name> <operator pos:start="47:45" pos:end="47:46">&lt;=</operator> <name pos:start="47:48" pos:end="47:60">WAIT_OBJECT_0</name> <operator pos:start="47:62" pos:end="47:62">+</operator> <name pos:start="47:64" pos:end="47:69"><name pos:start="47:64" pos:end="47:64">w</name><operator pos:start="47:65" pos:end="47:66">-&gt;</operator><name pos:start="47:67" pos:end="47:69">num</name></name> <operator pos:start="47:71" pos:end="47:71">-</operator> <literal type="number" pos:start="47:73" pos:end="47:73">1</literal></expr>)</condition> <block pos:start="47:76" pos:end="83:9">{<block_content pos:start="49:13" pos:end="81:13">

            <if_stmt pos:start="49:13" pos:end="51:77"><if pos:start="49:13" pos:end="51:77">if <condition pos:start="49:16" pos:end="49:45">(<expr pos:start="49:17" pos:end="49:44"><name pos:start="49:17" pos:end="49:44"><name pos:start="49:17" pos:end="49:17">w</name><operator pos:start="49:18" pos:end="49:19">-&gt;</operator><name pos:start="49:20" pos:end="49:23">func</name><index pos:start="49:24" pos:end="49:44">[<expr pos:start="49:25" pos:end="49:43"><name pos:start="49:25" pos:end="49:27">ret</name> <operator pos:start="49:29" pos:end="49:29">-</operator> <name pos:start="49:31" pos:end="49:43">WAIT_OBJECT_0</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="51:17" pos:end="51:77"><block_content pos:start="51:17" pos:end="51:77">

                <expr_stmt pos:start="51:17" pos:end="51:77"><expr pos:start="51:17" pos:end="51:76"><name pos:start="51:17" pos:end="51:44"><name pos:start="51:17" pos:end="51:17">w</name><operator pos:start="51:18" pos:end="51:19">-&gt;</operator><name pos:start="51:20" pos:end="51:23">func</name><index pos:start="51:24" pos:end="51:44">[<expr pos:start="51:25" pos:end="51:43"><name pos:start="51:25" pos:end="51:27">ret</name> <operator pos:start="51:29" pos:end="51:29">-</operator> <name pos:start="51:31" pos:end="51:43">WAIT_OBJECT_0</name></expr>]</index></name><operator pos:start="51:45" pos:end="51:45">(</operator><name pos:start="51:46" pos:end="51:75"><name pos:start="51:46" pos:end="51:46">w</name><operator pos:start="51:47" pos:end="51:48">-&gt;</operator><name pos:start="51:49" pos:end="51:54">opaque</name><index pos:start="51:55" pos:end="51:75">[<expr pos:start="51:56" pos:end="51:74"><name pos:start="51:56" pos:end="51:58">ret</name> <operator pos:start="51:60" pos:end="51:60">-</operator> <name pos:start="51:62" pos:end="51:74">WAIT_OBJECT_0</name></expr>]</index></name><operator pos:start="51:76" pos:end="51:76">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <comment type="block" pos:start="55:13" pos:end="55:54">/* Check for additional signaled events */</comment>

            <for pos:start="57:13" pos:end="81:13">for<control pos:start="57:16" pos:end="57:63">(<init pos:start="57:17" pos:end="57:46"><expr pos:start="57:17" pos:end="57:45"><name pos:start="57:17" pos:end="57:17">i</name> <operator pos:start="57:19" pos:end="57:19">=</operator> <operator pos:start="57:21" pos:end="57:21">(</operator><name pos:start="57:22" pos:end="57:24">ret</name> <operator pos:start="57:26" pos:end="57:26">-</operator> <name pos:start="57:28" pos:end="57:40">WAIT_OBJECT_0</name> <operator pos:start="57:42" pos:end="57:42">+</operator> <literal type="number" pos:start="57:44" pos:end="57:44">1</literal><operator pos:start="57:45" pos:end="57:45">)</operator></expr>;</init> <condition pos:start="57:48" pos:end="57:58"><expr pos:start="57:48" pos:end="57:57"><name pos:start="57:48" pos:end="57:48">i</name> <operator pos:start="57:50" pos:end="57:50">&lt;</operator> <name pos:start="57:52" pos:end="57:57"><name pos:start="57:52" pos:end="57:52">w</name><operator pos:start="57:53" pos:end="57:54">-&gt;</operator><name pos:start="57:55" pos:end="57:57">num</name></name></expr>;</condition> <incr pos:start="57:60" pos:end="57:62"><expr pos:start="57:60" pos:end="57:62"><name pos:start="57:60" pos:end="57:60">i</name><operator pos:start="57:61" pos:end="57:62">++</operator></expr></incr>)</control> <block pos:start="57:65" pos:end="81:13">{<block_content pos:start="63:17" pos:end="79:17">



                <comment type="block" pos:start="61:17" pos:end="61:48">/* Check if event is signaled */</comment>

                <expr_stmt pos:start="63:17" pos:end="63:60"><expr pos:start="63:17" pos:end="63:59"><name pos:start="63:17" pos:end="63:20">ret2</name> <operator pos:start="63:22" pos:end="63:22">=</operator> <call pos:start="63:24" pos:end="63:59"><name pos:start="63:24" pos:end="63:42">WaitForSingleObject</name><argument_list pos:start="63:43" pos:end="63:59">(<argument pos:start="63:44" pos:end="63:55"><expr pos:start="63:44" pos:end="63:55"><name pos:start="63:44" pos:end="63:55"><name pos:start="63:44" pos:end="63:44">w</name><operator pos:start="63:45" pos:end="63:46">-&gt;</operator><name pos:start="63:47" pos:end="63:52">events</name><index pos:start="63:53" pos:end="63:55">[<expr pos:start="63:54" pos:end="63:54"><name pos:start="63:54" pos:end="63:54">i</name></expr>]</index></name></expr></argument>, <argument pos:start="63:58" pos:end="63:58"><expr pos:start="63:58" pos:end="63:58"><literal type="number" pos:start="63:58" pos:end="63:58">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="65:17" pos:end="79:17"><if pos:start="65:17" pos:end="71:17">if<condition pos:start="65:19" pos:end="65:41">(<expr pos:start="65:20" pos:end="65:40"><name pos:start="65:20" pos:end="65:23">ret2</name> <operator pos:start="65:25" pos:end="65:26">==</operator> <name pos:start="65:28" pos:end="65:40">WAIT_OBJECT_0</name></expr>)</condition> <block pos:start="65:43" pos:end="71:17">{<block_content pos:start="67:21" pos:end="69:49">

                    <if_stmt pos:start="67:21" pos:end="69:49"><if pos:start="67:21" pos:end="69:49">if <condition pos:start="67:24" pos:end="67:35">(<expr pos:start="67:25" pos:end="67:34"><name pos:start="67:25" pos:end="67:34"><name pos:start="67:25" pos:end="67:25">w</name><operator pos:start="67:26" pos:end="67:27">-&gt;</operator><name pos:start="67:28" pos:end="67:31">func</name><index pos:start="67:32" pos:end="67:34">[<expr pos:start="67:33" pos:end="67:33"><name pos:start="67:33" pos:end="67:33">i</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="69:25" pos:end="69:49"><block_content pos:start="69:25" pos:end="69:49">

                        <expr_stmt pos:start="69:25" pos:end="69:49"><expr pos:start="69:25" pos:end="69:48"><name pos:start="69:25" pos:end="69:34"><name pos:start="69:25" pos:end="69:25">w</name><operator pos:start="69:26" pos:end="69:27">-&gt;</operator><name pos:start="69:28" pos:end="69:31">func</name><index pos:start="69:32" pos:end="69:34">[<expr pos:start="69:33" pos:end="69:33"><name pos:start="69:33" pos:end="69:33">i</name></expr>]</index></name><operator pos:start="69:35" pos:end="69:35">(</operator><name pos:start="69:36" pos:end="69:47"><name pos:start="69:36" pos:end="69:36">w</name><operator pos:start="69:37" pos:end="69:38">-&gt;</operator><name pos:start="69:39" pos:end="69:44">opaque</name><index pos:start="69:45" pos:end="69:47">[<expr pos:start="69:46" pos:end="69:46"><name pos:start="69:46" pos:end="69:46">i</name></expr>]</index></name><operator pos:start="69:48" pos:end="69:48">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="71:19" pos:end="73:17">else if <condition pos:start="71:27" pos:end="71:48">(<expr pos:start="71:28" pos:end="71:47"><name pos:start="71:28" pos:end="71:31">ret2</name> <operator pos:start="71:33" pos:end="71:34">==</operator> <name pos:start="71:36" pos:end="71:47">WAIT_TIMEOUT</name></expr>)</condition> <block pos:start="71:50" pos:end="73:17">{<block_content>

                </block_content>}</block></if> <else pos:start="73:19" pos:end="79:17">else <block pos:start="73:24" pos:end="79:17">{<block_content pos:start="75:21" pos:end="77:81">

                    <expr_stmt pos:start="75:21" pos:end="75:41"><expr pos:start="75:21" pos:end="75:40"><name pos:start="75:21" pos:end="75:23">err</name> <operator pos:start="75:25" pos:end="75:25">=</operator> <call pos:start="75:27" pos:end="75:40"><name pos:start="75:27" pos:end="75:38">GetLastError</name><argument_list pos:start="75:39" pos:end="75:40">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="77:21" pos:end="77:81"><expr pos:start="77:21" pos:end="77:80"><call pos:start="77:21" pos:end="77:80"><name pos:start="77:21" pos:end="77:27">fprintf</name><argument_list pos:start="77:28" pos:end="77:80">(<argument pos:start="77:29" pos:end="77:34"><expr pos:start="77:29" pos:end="77:34"><name pos:start="77:29" pos:end="77:34">stderr</name></expr></argument>, <argument pos:start="77:37" pos:end="77:71"><expr pos:start="77:37" pos:end="77:71"><literal type="string" pos:start="77:37" pos:end="77:71">"WaitForSingleObject error %d %d\n"</literal></expr></argument>, <argument pos:start="77:74" pos:end="77:74"><expr pos:start="77:74" pos:end="77:74"><name pos:start="77:74" pos:end="77:74">i</name></expr></argument>, <argument pos:start="77:77" pos:end="77:79"><expr pos:start="77:77" pos:end="77:79"><name pos:start="77:77" pos:end="77:79">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if> <if type="elseif" pos:start="83:11" pos:end="85:9">else if <condition pos:start="83:19" pos:end="83:39">(<expr pos:start="83:20" pos:end="83:38"><name pos:start="83:20" pos:end="83:22">ret</name> <operator pos:start="83:24" pos:end="83:25">==</operator> <name pos:start="83:27" pos:end="83:38">WAIT_TIMEOUT</name></expr>)</condition> <block pos:start="83:41" pos:end="85:9">{<block_content>

        </block_content>}</block></if> <else pos:start="85:11" pos:end="91:9">else <block pos:start="85:16" pos:end="91:9">{<block_content pos:start="87:13" pos:end="89:78">

            <expr_stmt pos:start="87:13" pos:end="87:33"><expr pos:start="87:13" pos:end="87:32"><name pos:start="87:13" pos:end="87:15">err</name> <operator pos:start="87:17" pos:end="87:17">=</operator> <call pos:start="87:19" pos:end="87:32"><name pos:start="87:19" pos:end="87:30">GetLastError</name><argument_list pos:start="87:31" pos:end="87:32">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:78"><expr pos:start="89:13" pos:end="89:77"><call pos:start="89:13" pos:end="89:77"><name pos:start="89:13" pos:end="89:19">fprintf</name><argument_list pos:start="89:20" pos:end="89:77">(<argument pos:start="89:21" pos:end="89:26"><expr pos:start="89:21" pos:end="89:26"><name pos:start="89:21" pos:end="89:26">stderr</name></expr></argument>, <argument pos:start="89:29" pos:end="89:66"><expr pos:start="89:29" pos:end="89:66"><literal type="string" pos:start="89:29" pos:end="89:66">"WaitForMultipleObjects error %d %d\n"</literal></expr></argument>, <argument pos:start="89:69" pos:end="89:71"><expr pos:start="89:69" pos:end="89:71"><name pos:start="89:69" pos:end="89:71">ret</name></expr></argument>, <argument pos:start="89:74" pos:end="89:76"><expr pos:start="89:74" pos:end="89:76"><name pos:start="89:74" pos:end="89:76">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="95:1" pos:end="95:6">#<cpp:directive pos:start="95:2" pos:end="95:6">endif</cpp:directive></cpp:endif>

    <comment type="block" pos:start="97:5" pos:end="97:25">/* poll any events */</comment>

    <comment type="block" pos:start="99:5" pos:end="99:56">/* XXX: separate device handlers from system ones */</comment>

    <expr_stmt pos:start="101:5" pos:end="101:14"><expr pos:start="101:5" pos:end="101:13"><name pos:start="101:5" pos:end="101:8">nfds</name> <operator pos:start="101:10" pos:end="101:10">=</operator> <operator pos:start="101:12" pos:end="101:12">-</operator><literal type="number" pos:start="101:13" pos:end="101:13">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:19"><expr pos:start="103:5" pos:end="103:18"><call pos:start="103:5" pos:end="103:18"><name pos:start="103:5" pos:end="103:11">FD_ZERO</name><argument_list pos:start="103:12" pos:end="103:18">(<argument pos:start="103:13" pos:end="103:17"><expr pos:start="103:13" pos:end="103:17"><operator pos:start="103:13" pos:end="103:13">&amp;</operator><name pos:start="103:14" pos:end="103:17">rfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:19"><expr pos:start="105:5" pos:end="105:18"><call pos:start="105:5" pos:end="105:18"><name pos:start="105:5" pos:end="105:11">FD_ZERO</name><argument_list pos:start="105:12" pos:end="105:18">(<argument pos:start="105:13" pos:end="105:17"><expr pos:start="105:13" pos:end="105:17"><operator pos:start="105:13" pos:end="105:13">&amp;</operator><name pos:start="105:14" pos:end="105:17">wfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:19"><expr pos:start="107:5" pos:end="107:18"><call pos:start="107:5" pos:end="107:18"><name pos:start="107:5" pos:end="107:11">FD_ZERO</name><argument_list pos:start="107:12" pos:end="107:18">(<argument pos:start="107:13" pos:end="107:17"><expr pos:start="107:13" pos:end="107:17"><operator pos:start="107:13" pos:end="107:13">&amp;</operator><name pos:start="107:14" pos:end="107:17">xfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="109:5" pos:end="139:5">for<control pos:start="109:8" pos:end="109:61">(<init pos:start="109:9" pos:end="109:31"><expr pos:start="109:9" pos:end="109:30"><name pos:start="109:9" pos:end="109:11">ioh</name> <operator pos:start="109:13" pos:end="109:13">=</operator> <name pos:start="109:15" pos:end="109:30">first_io_handler</name></expr>;</init> <condition pos:start="109:33" pos:end="109:44"><expr pos:start="109:33" pos:end="109:43"><name pos:start="109:33" pos:end="109:35">ioh</name> <operator pos:start="109:37" pos:end="109:38">!=</operator> <name pos:start="109:40" pos:end="109:43">NULL</name></expr>;</condition> <incr pos:start="109:46" pos:end="109:60"><expr pos:start="109:46" pos:end="109:60"><name pos:start="109:46" pos:end="109:48">ioh</name> <operator pos:start="109:50" pos:end="109:50">=</operator> <name pos:start="109:52" pos:end="109:60"><name pos:start="109:52" pos:end="109:54">ioh</name><operator pos:start="109:55" pos:end="109:56">-&gt;</operator><name pos:start="109:57" pos:end="109:60">next</name></name></expr></incr>)</control> <block pos:start="109:63" pos:end="139:5">{<block_content pos:start="111:9" pos:end="137:9">

        <if_stmt pos:start="111:9" pos:end="113:21"><if pos:start="111:9" pos:end="113:21">if <condition pos:start="111:12" pos:end="111:25">(<expr pos:start="111:13" pos:end="111:24"><name pos:start="111:13" pos:end="111:24"><name pos:start="111:13" pos:end="111:15">ioh</name><operator pos:start="111:16" pos:end="111:17">-&gt;</operator><name pos:start="111:18" pos:end="111:24">deleted</name></name></expr>)</condition><block type="pseudo" pos:start="113:13" pos:end="113:21"><block_content pos:start="113:13" pos:end="113:21">

            <continue pos:start="113:13" pos:end="113:21">continue;</continue></block_content></block></if></if_stmt>

        <if_stmt pos:start="115:9" pos:end="127:9"><if pos:start="115:9" pos:end="127:9">if <condition pos:start="115:12" pos:end="119:50">(<expr pos:start="115:13" pos:end="119:49"><name pos:start="115:13" pos:end="115:24"><name pos:start="115:13" pos:end="115:15">ioh</name><operator pos:start="115:16" pos:end="115:17">-&gt;</operator><name pos:start="115:18" pos:end="115:24">fd_read</name></name> <operator pos:start="115:26" pos:end="115:27">&amp;&amp;</operator>

            <operator pos:start="117:13" pos:end="117:13">(</operator><operator pos:start="117:14" pos:end="117:14">!</operator><name pos:start="117:15" pos:end="117:31"><name pos:start="117:15" pos:end="117:17">ioh</name><operator pos:start="117:18" pos:end="117:19">-&gt;</operator><name pos:start="117:20" pos:end="117:31">fd_read_poll</name></name> <operator pos:start="117:33" pos:end="117:34">||</operator>

             <call pos:start="119:14" pos:end="119:43"><name pos:start="119:14" pos:end="119:30"><name pos:start="119:14" pos:end="119:16">ioh</name><operator pos:start="119:17" pos:end="119:18">-&gt;</operator><name pos:start="119:19" pos:end="119:30">fd_read_poll</name></name><argument_list pos:start="119:31" pos:end="119:43">(<argument pos:start="119:32" pos:end="119:42"><expr pos:start="119:32" pos:end="119:42"><name pos:start="119:32" pos:end="119:42"><name pos:start="119:32" pos:end="119:34">ioh</name><operator pos:start="119:35" pos:end="119:36">-&gt;</operator><name pos:start="119:37" pos:end="119:42">opaque</name></name></expr></argument>)</argument_list></call> <operator pos:start="119:45" pos:end="119:46">!=</operator> <literal type="number" pos:start="119:48" pos:end="119:48">0</literal><operator pos:start="119:49" pos:end="119:49">)</operator></expr>)</condition> <block pos:start="119:52" pos:end="127:9">{<block_content pos:start="121:13" pos:end="125:31">

            <expr_stmt pos:start="121:13" pos:end="121:35"><expr pos:start="121:13" pos:end="121:34"><call pos:start="121:13" pos:end="121:34"><name pos:start="121:13" pos:end="121:18">FD_SET</name><argument_list pos:start="121:19" pos:end="121:34">(<argument pos:start="121:20" pos:end="121:26"><expr pos:start="121:20" pos:end="121:26"><name pos:start="121:20" pos:end="121:26"><name pos:start="121:20" pos:end="121:22">ioh</name><operator pos:start="121:23" pos:end="121:24">-&gt;</operator><name pos:start="121:25" pos:end="121:26">fd</name></name></expr></argument>, <argument pos:start="121:29" pos:end="121:33"><expr pos:start="121:29" pos:end="121:33"><operator pos:start="121:29" pos:end="121:29">&amp;</operator><name pos:start="121:30" pos:end="121:33">rfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="123:13" pos:end="125:31"><if pos:start="123:13" pos:end="125:31">if <condition pos:start="123:16" pos:end="123:31">(<expr pos:start="123:17" pos:end="123:30"><name pos:start="123:17" pos:end="123:23"><name pos:start="123:17" pos:end="123:19">ioh</name><operator pos:start="123:20" pos:end="123:21">-&gt;</operator><name pos:start="123:22" pos:end="123:23">fd</name></name> <operator pos:start="123:25" pos:end="123:25">&gt;</operator> <name pos:start="123:27" pos:end="123:30">nfds</name></expr>)</condition><block type="pseudo" pos:start="125:17" pos:end="125:31"><block_content pos:start="125:17" pos:end="125:31">

                <expr_stmt pos:start="125:17" pos:end="125:31"><expr pos:start="125:17" pos:end="125:30"><name pos:start="125:17" pos:end="125:20">nfds</name> <operator pos:start="125:22" pos:end="125:22">=</operator> <name pos:start="125:24" pos:end="125:30"><name pos:start="125:24" pos:end="125:26">ioh</name><operator pos:start="125:27" pos:end="125:28">-&gt;</operator><name pos:start="125:29" pos:end="125:30">fd</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="129:9" pos:end="137:9"><if pos:start="129:9" pos:end="137:9">if <condition pos:start="129:12" pos:end="129:26">(<expr pos:start="129:13" pos:end="129:25"><name pos:start="129:13" pos:end="129:25"><name pos:start="129:13" pos:end="129:15">ioh</name><operator pos:start="129:16" pos:end="129:17">-&gt;</operator><name pos:start="129:18" pos:end="129:25">fd_write</name></name></expr>)</condition> <block pos:start="129:28" pos:end="137:9">{<block_content pos:start="131:13" pos:end="135:31">

            <expr_stmt pos:start="131:13" pos:end="131:35"><expr pos:start="131:13" pos:end="131:34"><call pos:start="131:13" pos:end="131:34"><name pos:start="131:13" pos:end="131:18">FD_SET</name><argument_list pos:start="131:19" pos:end="131:34">(<argument pos:start="131:20" pos:end="131:26"><expr pos:start="131:20" pos:end="131:26"><name pos:start="131:20" pos:end="131:26"><name pos:start="131:20" pos:end="131:22">ioh</name><operator pos:start="131:23" pos:end="131:24">-&gt;</operator><name pos:start="131:25" pos:end="131:26">fd</name></name></expr></argument>, <argument pos:start="131:29" pos:end="131:33"><expr pos:start="131:29" pos:end="131:33"><operator pos:start="131:29" pos:end="131:29">&amp;</operator><name pos:start="131:30" pos:end="131:33">wfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="133:13" pos:end="135:31"><if pos:start="133:13" pos:end="135:31">if <condition pos:start="133:16" pos:end="133:31">(<expr pos:start="133:17" pos:end="133:30"><name pos:start="133:17" pos:end="133:23"><name pos:start="133:17" pos:end="133:19">ioh</name><operator pos:start="133:20" pos:end="133:21">-&gt;</operator><name pos:start="133:22" pos:end="133:23">fd</name></name> <operator pos:start="133:25" pos:end="133:25">&gt;</operator> <name pos:start="133:27" pos:end="133:30">nfds</name></expr>)</condition><block type="pseudo" pos:start="135:17" pos:end="135:31"><block_content pos:start="135:17" pos:end="135:31">

                <expr_stmt pos:start="135:17" pos:end="135:31"><expr pos:start="135:17" pos:end="135:30"><name pos:start="135:17" pos:end="135:20">nfds</name> <operator pos:start="135:22" pos:end="135:22">=</operator> <name pos:start="135:24" pos:end="135:30"><name pos:start="135:24" pos:end="135:26">ioh</name><operator pos:start="135:27" pos:end="135:28">-&gt;</operator><name pos:start="135:29" pos:end="135:30">fd</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="143:5" pos:end="146:0"><expr pos:start="143:5" pos:end="143:17"><name pos:start="143:5" pos:end="143:13"><name pos:start="143:5" pos:end="143:6">tv</name><operator pos:start="143:7" pos:end="143:7">.</operator><name pos:start="143:8" pos:end="143:13">tv_sec</name></name> <operator pos:start="143:15" pos:end="143:15">=</operator> <literal type="number" pos:start="143:17" pos:end="143:17">0</literal></expr>;</expr_stmt>

<cpp:ifdef pos:start="145:1" pos:end="145:13">#<cpp:directive pos:start="145:2" pos:end="145:6">ifdef</cpp:directive> <name pos:start="145:8" pos:end="145:13">_WIN32</name></cpp:ifdef>

    <expr_stmt pos:start="147:5" pos:end="150:0"><expr pos:start="147:5" pos:end="147:18"><name pos:start="147:5" pos:end="147:14"><name pos:start="147:5" pos:end="147:6">tv</name><operator pos:start="147:7" pos:end="147:7">.</operator><name pos:start="147:8" pos:end="147:14">tv_usec</name></name> <operator pos:start="147:16" pos:end="147:16">=</operator> <literal type="number" pos:start="147:18" pos:end="147:18">0</literal></expr>;</expr_stmt>

<cpp:else pos:start="149:1" pos:end="149:5">#<cpp:directive pos:start="149:2" pos:end="149:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="151:5" pos:end="156:0"><expr pos:start="151:5" pos:end="151:31"><name pos:start="151:5" pos:end="151:14"><name pos:start="151:5" pos:end="151:6">tv</name><operator pos:start="151:7" pos:end="151:7">.</operator><name pos:start="151:8" pos:end="151:14">tv_usec</name></name> <operator pos:start="151:16" pos:end="151:16">=</operator> <name pos:start="151:18" pos:end="151:24">timeout</name> <operator pos:start="151:26" pos:end="151:26">*</operator> <literal type="number" pos:start="151:28" pos:end="151:31">1000</literal></expr>;</expr_stmt>

<cpp:endif pos:start="153:1" pos:end="153:6">#<cpp:directive pos:start="153:2" pos:end="153:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="155:1" pos:end="155:25">#<cpp:directive pos:start="155:2" pos:end="155:3">if</cpp:directive> <expr pos:start="155:5" pos:end="155:25"><call pos:start="155:5" pos:end="155:25"><name pos:start="155:5" pos:end="155:11">defined</name><argument_list pos:start="155:12" pos:end="155:25">(<argument pos:start="155:13" pos:end="155:24"><expr pos:start="155:13" pos:end="155:24"><name pos:start="155:13" pos:end="155:24">CONFIG_SLIRP</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <if_stmt pos:start="157:5" pos:end="164:0"><if pos:start="157:5" pos:end="164:0">if <condition pos:start="157:8" pos:end="157:21">(<expr pos:start="157:9" pos:end="157:20"><name pos:start="157:9" pos:end="157:20">slirp_inited</name></expr>)</condition> <block pos:start="157:23" pos:end="164:0">{<block_content pos:start="159:9" pos:end="159:54">

        <expr_stmt pos:start="159:9" pos:end="159:54"><expr pos:start="159:9" pos:end="159:53"><call pos:start="159:9" pos:end="159:53"><name pos:start="159:9" pos:end="159:25">slirp_select_fill</name><argument_list pos:start="159:26" pos:end="159:53">(<argument pos:start="159:27" pos:end="159:31"><expr pos:start="159:27" pos:end="159:31"><operator pos:start="159:27" pos:end="159:27">&amp;</operator><name pos:start="159:28" pos:end="159:31">nfds</name></expr></argument>, <argument pos:start="159:34" pos:end="159:38"><expr pos:start="159:34" pos:end="159:38"><operator pos:start="159:34" pos:end="159:34">&amp;</operator><name pos:start="159:35" pos:end="159:38">rfds</name></expr></argument>, <argument pos:start="159:41" pos:end="159:45"><expr pos:start="159:41" pos:end="159:45"><operator pos:start="159:41" pos:end="159:41">&amp;</operator><name pos:start="159:42" pos:end="159:45">wfds</name></expr></argument>, <argument pos:start="159:48" pos:end="159:52"><expr pos:start="159:48" pos:end="159:52"><operator pos:start="159:48" pos:end="159:48">&amp;</operator><name pos:start="159:49" pos:end="159:52">xfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="163:1" pos:end="163:6">#<cpp:directive pos:start="163:2" pos:end="163:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="165:5" pos:end="165:53"><expr pos:start="165:5" pos:end="165:52"><name pos:start="165:5" pos:end="165:7">ret</name> <operator pos:start="165:9" pos:end="165:9">=</operator> <call pos:start="165:11" pos:end="165:52"><name pos:start="165:11" pos:end="165:16">select</name><argument_list pos:start="165:17" pos:end="165:52">(<argument pos:start="165:18" pos:end="165:25"><expr pos:start="165:18" pos:end="165:25"><name pos:start="165:18" pos:end="165:21">nfds</name> <operator pos:start="165:23" pos:end="165:23">+</operator> <literal type="number" pos:start="165:25" pos:end="165:25">1</literal></expr></argument>, <argument pos:start="165:28" pos:end="165:32"><expr pos:start="165:28" pos:end="165:32"><operator pos:start="165:28" pos:end="165:28">&amp;</operator><name pos:start="165:29" pos:end="165:32">rfds</name></expr></argument>, <argument pos:start="165:35" pos:end="165:39"><expr pos:start="165:35" pos:end="165:39"><operator pos:start="165:35" pos:end="165:35">&amp;</operator><name pos:start="165:36" pos:end="165:39">wfds</name></expr></argument>, <argument pos:start="165:42" pos:end="165:46"><expr pos:start="165:42" pos:end="165:46"><operator pos:start="165:42" pos:end="165:42">&amp;</operator><name pos:start="165:43" pos:end="165:46">xfds</name></expr></argument>, <argument pos:start="165:49" pos:end="165:51"><expr pos:start="165:49" pos:end="165:51"><operator pos:start="165:49" pos:end="165:49">&amp;</operator><name pos:start="165:50" pos:end="165:51">tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="167:5" pos:end="214:0"><if pos:start="167:5" pos:end="214:0">if <condition pos:start="167:8" pos:end="167:16">(<expr pos:start="167:9" pos:end="167:15"><name pos:start="167:9" pos:end="167:11">ret</name> <operator pos:start="167:13" pos:end="167:13">&gt;</operator> <literal type="number" pos:start="167:15" pos:end="167:15">0</literal></expr>)</condition> <block pos:start="167:18" pos:end="214:0">{<block_content pos:start="169:9" pos:end="209:9">

        <decl_stmt pos:start="169:9" pos:end="169:31"><decl pos:start="169:9" pos:end="169:30"><type pos:start="169:9" pos:end="169:26"><name pos:start="169:9" pos:end="169:23">IOHandlerRecord</name> <modifier pos:start="169:25" pos:end="169:25">*</modifier><modifier pos:start="169:26" pos:end="169:26">*</modifier></type><name pos:start="169:27" pos:end="169:30">pioh</name></decl>;</decl_stmt>



        <for pos:start="173:9" pos:end="187:9">for<control pos:start="173:12" pos:end="173:65">(<init pos:start="173:13" pos:end="173:35"><expr pos:start="173:13" pos:end="173:34"><name pos:start="173:13" pos:end="173:15">ioh</name> <operator pos:start="173:17" pos:end="173:17">=</operator> <name pos:start="173:19" pos:end="173:34">first_io_handler</name></expr>;</init> <condition pos:start="173:37" pos:end="173:48"><expr pos:start="173:37" pos:end="173:47"><name pos:start="173:37" pos:end="173:39">ioh</name> <operator pos:start="173:41" pos:end="173:42">!=</operator> <name pos:start="173:44" pos:end="173:47">NULL</name></expr>;</condition> <incr pos:start="173:50" pos:end="173:64"><expr pos:start="173:50" pos:end="173:64"><name pos:start="173:50" pos:end="173:52">ioh</name> <operator pos:start="173:54" pos:end="173:54">=</operator> <name pos:start="173:56" pos:end="173:64"><name pos:start="173:56" pos:end="173:58">ioh</name><operator pos:start="173:59" pos:end="173:60">-&gt;</operator><name pos:start="173:61" pos:end="173:64">next</name></name></expr></incr>)</control> <block pos:start="173:67" pos:end="187:9">{<block_content pos:start="175:13" pos:end="185:13">

            <if_stmt pos:start="175:13" pos:end="179:13"><if pos:start="175:13" pos:end="179:13">if <condition pos:start="175:16" pos:end="175:74">(<expr pos:start="175:17" pos:end="175:73"><operator pos:start="175:17" pos:end="175:17">!</operator><name pos:start="175:18" pos:end="175:29"><name pos:start="175:18" pos:end="175:20">ioh</name><operator pos:start="175:21" pos:end="175:22">-&gt;</operator><name pos:start="175:23" pos:end="175:29">deleted</name></name> <operator pos:start="175:31" pos:end="175:32">&amp;&amp;</operator> <name pos:start="175:34" pos:end="175:45"><name pos:start="175:34" pos:end="175:36">ioh</name><operator pos:start="175:37" pos:end="175:38">-&gt;</operator><name pos:start="175:39" pos:end="175:45">fd_read</name></name> <operator pos:start="175:47" pos:end="175:48">&amp;&amp;</operator> <call pos:start="175:50" pos:end="175:73"><name pos:start="175:50" pos:end="175:57">FD_ISSET</name><argument_list pos:start="175:58" pos:end="175:73">(<argument pos:start="175:59" pos:end="175:65"><expr pos:start="175:59" pos:end="175:65"><name pos:start="175:59" pos:end="175:65"><name pos:start="175:59" pos:end="175:61">ioh</name><operator pos:start="175:62" pos:end="175:63">-&gt;</operator><name pos:start="175:64" pos:end="175:65">fd</name></name></expr></argument>, <argument pos:start="175:68" pos:end="175:72"><expr pos:start="175:68" pos:end="175:72"><operator pos:start="175:68" pos:end="175:68">&amp;</operator><name pos:start="175:69" pos:end="175:72">rfds</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="175:76" pos:end="179:13">{<block_content pos:start="177:17" pos:end="177:42">

                <expr_stmt pos:start="177:17" pos:end="177:42"><expr pos:start="177:17" pos:end="177:41"><call pos:start="177:17" pos:end="177:41"><name pos:start="177:17" pos:end="177:28"><name pos:start="177:17" pos:end="177:19">ioh</name><operator pos:start="177:20" pos:end="177:21">-&gt;</operator><name pos:start="177:22" pos:end="177:28">fd_read</name></name><argument_list pos:start="177:29" pos:end="177:41">(<argument pos:start="177:30" pos:end="177:40"><expr pos:start="177:30" pos:end="177:40"><name pos:start="177:30" pos:end="177:40"><name pos:start="177:30" pos:end="177:32">ioh</name><operator pos:start="177:33" pos:end="177:34">-&gt;</operator><name pos:start="177:35" pos:end="177:40">opaque</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="181:13" pos:end="185:13"><if pos:start="181:13" pos:end="185:13">if <condition pos:start="181:16" pos:end="181:75">(<expr pos:start="181:17" pos:end="181:74"><operator pos:start="181:17" pos:end="181:17">!</operator><name pos:start="181:18" pos:end="181:29"><name pos:start="181:18" pos:end="181:20">ioh</name><operator pos:start="181:21" pos:end="181:22">-&gt;</operator><name pos:start="181:23" pos:end="181:29">deleted</name></name> <operator pos:start="181:31" pos:end="181:32">&amp;&amp;</operator> <name pos:start="181:34" pos:end="181:46"><name pos:start="181:34" pos:end="181:36">ioh</name><operator pos:start="181:37" pos:end="181:38">-&gt;</operator><name pos:start="181:39" pos:end="181:46">fd_write</name></name> <operator pos:start="181:48" pos:end="181:49">&amp;&amp;</operator> <call pos:start="181:51" pos:end="181:74"><name pos:start="181:51" pos:end="181:58">FD_ISSET</name><argument_list pos:start="181:59" pos:end="181:74">(<argument pos:start="181:60" pos:end="181:66"><expr pos:start="181:60" pos:end="181:66"><name pos:start="181:60" pos:end="181:66"><name pos:start="181:60" pos:end="181:62">ioh</name><operator pos:start="181:63" pos:end="181:64">-&gt;</operator><name pos:start="181:65" pos:end="181:66">fd</name></name></expr></argument>, <argument pos:start="181:69" pos:end="181:73"><expr pos:start="181:69" pos:end="181:73"><operator pos:start="181:69" pos:end="181:69">&amp;</operator><name pos:start="181:70" pos:end="181:73">wfds</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="181:77" pos:end="185:13">{<block_content pos:start="183:17" pos:end="183:43">

                <expr_stmt pos:start="183:17" pos:end="183:43"><expr pos:start="183:17" pos:end="183:42"><call pos:start="183:17" pos:end="183:42"><name pos:start="183:17" pos:end="183:29"><name pos:start="183:17" pos:end="183:19">ioh</name><operator pos:start="183:20" pos:end="183:21">-&gt;</operator><name pos:start="183:22" pos:end="183:29">fd_write</name></name><argument_list pos:start="183:30" pos:end="183:42">(<argument pos:start="183:31" pos:end="183:41"><expr pos:start="183:31" pos:end="183:41"><name pos:start="183:31" pos:end="183:41"><name pos:start="183:31" pos:end="183:33">ioh</name><operator pos:start="183:34" pos:end="183:35">-&gt;</operator><name pos:start="183:36" pos:end="183:41">opaque</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>



	<comment type="block" pos:start="191:9" pos:end="191:40">/* remove deleted IO handlers */</comment>

	<expr_stmt pos:start="193:9" pos:end="193:33"><expr pos:start="193:9" pos:end="193:32"><name pos:start="193:9" pos:end="193:12">pioh</name> <operator pos:start="193:14" pos:end="193:14">=</operator> <operator pos:start="193:16" pos:end="193:16">&amp;</operator><name pos:start="193:17" pos:end="193:32">first_io_handler</name></expr>;</expr_stmt>

	<while pos:start="195:9" pos:end="209:9">while <condition pos:start="195:15" pos:end="195:21">(<expr pos:start="195:16" pos:end="195:20"><operator pos:start="195:16" pos:end="195:16">*</operator><name pos:start="195:17" pos:end="195:20">pioh</name></expr>)</condition> <block pos:start="195:23" pos:end="209:9">{<block_content pos:start="197:13" pos:end="207:34">

            <expr_stmt pos:start="197:13" pos:end="197:24"><expr pos:start="197:13" pos:end="197:23"><name pos:start="197:13" pos:end="197:15">ioh</name> <operator pos:start="197:17" pos:end="197:17">=</operator> <operator pos:start="197:19" pos:end="197:19">*</operator><name pos:start="197:20" pos:end="197:23">pioh</name></expr>;</expr_stmt>

            <if_stmt pos:start="199:13" pos:end="207:34"><if pos:start="199:13" pos:end="205:13">if <condition pos:start="199:16" pos:end="199:29">(<expr pos:start="199:17" pos:end="199:28"><name pos:start="199:17" pos:end="199:28"><name pos:start="199:17" pos:end="199:19">ioh</name><operator pos:start="199:20" pos:end="199:21">-&gt;</operator><name pos:start="199:22" pos:end="199:28">deleted</name></name></expr>)</condition> <block pos:start="199:31" pos:end="205:13">{<block_content pos:start="201:17" pos:end="203:31">

                <expr_stmt pos:start="201:17" pos:end="201:34"><expr pos:start="201:17" pos:end="201:33"><operator pos:start="201:17" pos:end="201:17">*</operator><name pos:start="201:18" pos:end="201:21">pioh</name> <operator pos:start="201:23" pos:end="201:23">=</operator> <name pos:start="201:25" pos:end="201:33"><name pos:start="201:25" pos:end="201:27">ioh</name><operator pos:start="201:28" pos:end="201:29">-&gt;</operator><name pos:start="201:30" pos:end="201:33">next</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="203:17" pos:end="203:31"><expr pos:start="203:17" pos:end="203:30"><call pos:start="203:17" pos:end="203:30"><name pos:start="203:17" pos:end="203:25">qemu_free</name><argument_list pos:start="203:26" pos:end="203:30">(<argument pos:start="203:27" pos:end="203:29"><expr pos:start="203:27" pos:end="203:29"><name pos:start="203:27" pos:end="203:29">ioh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="205:15" pos:end="207:34">else<block type="pseudo" pos:start="207:17" pos:end="207:34"><block_content pos:start="207:17" pos:end="207:34">

                <expr_stmt pos:start="207:17" pos:end="207:34"><expr pos:start="207:17" pos:end="207:33"><name pos:start="207:17" pos:end="207:20">pioh</name> <operator pos:start="207:22" pos:end="207:22">=</operator> <operator pos:start="207:24" pos:end="207:24">&amp;</operator><name pos:start="207:25" pos:end="207:33"><name pos:start="207:25" pos:end="207:27">ioh</name><operator pos:start="207:28" pos:end="207:29">-&gt;</operator><name pos:start="207:30" pos:end="207:33">next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></while>

    </block_content>}</block></if></if_stmt>

<cpp:if pos:start="213:1" pos:end="213:25">#<cpp:directive pos:start="213:2" pos:end="213:3">if</cpp:directive> <expr pos:start="213:5" pos:end="213:25"><call pos:start="213:5" pos:end="213:25"><name pos:start="213:5" pos:end="213:11">defined</name><argument_list pos:start="213:12" pos:end="213:25">(<argument pos:start="213:13" pos:end="213:24"><expr pos:start="213:13" pos:end="213:24"><name pos:start="213:13" pos:end="213:24">CONFIG_SLIRP</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <if_stmt pos:start="215:5" pos:end="232:0"><if pos:start="215:5" pos:end="232:0">if <condition pos:start="215:8" pos:end="215:21">(<expr pos:start="215:9" pos:end="215:20"><name pos:start="215:9" pos:end="215:20">slirp_inited</name></expr>)</condition> <block pos:start="215:23" pos:end="232:0">{<block_content pos:start="217:9" pos:end="227:47">

        <if_stmt pos:start="217:9" pos:end="225:9"><if pos:start="217:9" pos:end="225:9">if <condition pos:start="217:12" pos:end="217:20">(<expr pos:start="217:13" pos:end="217:19"><name pos:start="217:13" pos:end="217:15">ret</name> <operator pos:start="217:17" pos:end="217:17">&lt;</operator> <literal type="number" pos:start="217:19" pos:end="217:19">0</literal></expr>)</condition> <block pos:start="217:22" pos:end="225:9">{<block_content pos:start="219:13" pos:end="223:27">

            <expr_stmt pos:start="219:13" pos:end="219:27"><expr pos:start="219:13" pos:end="219:26"><call pos:start="219:13" pos:end="219:26"><name pos:start="219:13" pos:end="219:19">FD_ZERO</name><argument_list pos:start="219:20" pos:end="219:26">(<argument pos:start="219:21" pos:end="219:25"><expr pos:start="219:21" pos:end="219:25"><operator pos:start="219:21" pos:end="219:21">&amp;</operator><name pos:start="219:22" pos:end="219:25">rfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="221:13" pos:end="221:27"><expr pos:start="221:13" pos:end="221:26"><call pos:start="221:13" pos:end="221:26"><name pos:start="221:13" pos:end="221:19">FD_ZERO</name><argument_list pos:start="221:20" pos:end="221:26">(<argument pos:start="221:21" pos:end="221:25"><expr pos:start="221:21" pos:end="221:25"><operator pos:start="221:21" pos:end="221:21">&amp;</operator><name pos:start="221:22" pos:end="221:25">wfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="223:13" pos:end="223:27"><expr pos:start="223:13" pos:end="223:26"><call pos:start="223:13" pos:end="223:26"><name pos:start="223:13" pos:end="223:19">FD_ZERO</name><argument_list pos:start="223:20" pos:end="223:26">(<argument pos:start="223:21" pos:end="223:25"><expr pos:start="223:21" pos:end="223:25"><operator pos:start="223:21" pos:end="223:21">&amp;</operator><name pos:start="223:22" pos:end="223:25">xfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="227:9" pos:end="227:47"><expr pos:start="227:9" pos:end="227:46"><call pos:start="227:9" pos:end="227:46"><name pos:start="227:9" pos:end="227:25">slirp_select_poll</name><argument_list pos:start="227:26" pos:end="227:46">(<argument pos:start="227:27" pos:end="227:31"><expr pos:start="227:27" pos:end="227:31"><operator pos:start="227:27" pos:end="227:27">&amp;</operator><name pos:start="227:28" pos:end="227:31">rfds</name></expr></argument>, <argument pos:start="227:34" pos:end="227:38"><expr pos:start="227:34" pos:end="227:38"><operator pos:start="227:34" pos:end="227:34">&amp;</operator><name pos:start="227:35" pos:end="227:38">wfds</name></expr></argument>, <argument pos:start="227:41" pos:end="227:45"><expr pos:start="227:41" pos:end="227:45"><operator pos:start="227:41" pos:end="227:41">&amp;</operator><name pos:start="227:42" pos:end="227:45">xfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="231:1" pos:end="231:6">#<cpp:directive pos:start="231:2" pos:end="231:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="233:5" pos:end="233:20"><expr pos:start="233:5" pos:end="233:19"><call pos:start="233:5" pos:end="233:19"><name pos:start="233:5" pos:end="233:17">qemu_aio_poll</name><argument_list pos:start="233:18" pos:end="233:19">()</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="237:5" pos:end="249:5"><if pos:start="237:5" pos:end="249:5">if <condition pos:start="237:8" pos:end="237:19">(<expr pos:start="237:9" pos:end="237:18"><name pos:start="237:9" pos:end="237:18">vm_running</name></expr>)</condition> <block pos:start="237:21" pos:end="249:5">{<block_content pos:start="239:9" pos:end="247:18">

        <if_stmt pos:start="239:9" pos:end="243:50"><if pos:start="239:9" pos:end="243:50">if <condition pos:start="239:12" pos:end="239:67">(<expr pos:start="239:13" pos:end="239:66"><call pos:start="239:13" pos:end="239:66"><name pos:start="239:13" pos:end="239:18">likely</name><argument_list pos:start="239:19" pos:end="239:66">(<argument pos:start="239:20" pos:end="239:65"><expr pos:start="239:20" pos:end="239:65"><operator pos:start="239:20" pos:end="239:20">!</operator><operator pos:start="239:21" pos:end="239:21">(</operator><name pos:start="239:22" pos:end="239:48"><name pos:start="239:22" pos:end="239:28">cur_cpu</name><operator pos:start="239:29" pos:end="239:30">-&gt;</operator><name pos:start="239:31" pos:end="239:48">singlestep_enabled</name></name> <operator pos:start="239:50" pos:end="239:50">&amp;</operator> <name pos:start="239:52" pos:end="239:64">SSTEP_NOTIMER</name><operator pos:start="239:65" pos:end="239:65">)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="241:9" pos:end="243:50"><block_content pos:start="241:9" pos:end="243:50">

        <expr_stmt pos:start="241:9" pos:end="243:50"><expr pos:start="241:9" pos:end="243:49"><call pos:start="241:9" pos:end="243:49"><name pos:start="241:9" pos:end="241:23">qemu_run_timers</name><argument_list pos:start="241:24" pos:end="243:49">(<argument pos:start="241:25" pos:end="241:58"><expr pos:start="241:25" pos:end="241:58"><operator pos:start="241:25" pos:end="241:25">&amp;</operator><name pos:start="241:26" pos:end="241:58"><name pos:start="241:26" pos:end="241:38">active_timers</name><index pos:start="241:39" pos:end="241:58">[<expr pos:start="241:40" pos:end="241:57"><name pos:start="241:40" pos:end="241:57">QEMU_TIMER_VIRTUAL</name></expr>]</index></name></expr></argument>,

                        <argument pos:start="243:25" pos:end="243:48"><expr pos:start="243:25" pos:end="243:48"><call pos:start="243:25" pos:end="243:48"><name pos:start="243:25" pos:end="243:38">qemu_get_clock</name><argument_list pos:start="243:39" pos:end="243:48">(<argument pos:start="243:40" pos:end="243:47"><expr pos:start="243:40" pos:end="243:47"><name pos:start="243:40" pos:end="243:47">vm_clock</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block" pos:start="245:9" pos:end="245:39">/* run dma transfers, if any */</comment>

        <expr_stmt pos:start="247:9" pos:end="247:18"><expr pos:start="247:9" pos:end="247:17"><call pos:start="247:9" pos:end="247:17"><name pos:start="247:9" pos:end="247:15">DMA_run</name><argument_list pos:start="247:16" pos:end="247:17">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="253:5" pos:end="253:26">/* real time timers */</comment>

    <expr_stmt pos:start="255:5" pos:end="257:46"><expr pos:start="255:5" pos:end="257:45"><call pos:start="255:5" pos:end="257:45"><name pos:start="255:5" pos:end="255:19">qemu_run_timers</name><argument_list pos:start="255:20" pos:end="257:45">(<argument pos:start="255:21" pos:end="255:55"><expr pos:start="255:21" pos:end="255:55"><operator pos:start="255:21" pos:end="255:21">&amp;</operator><name pos:start="255:22" pos:end="255:55"><name pos:start="255:22" pos:end="255:34">active_timers</name><index pos:start="255:35" pos:end="255:55">[<expr pos:start="255:36" pos:end="255:54"><name pos:start="255:36" pos:end="255:54">QEMU_TIMER_REALTIME</name></expr>]</index></name></expr></argument>,

                    <argument pos:start="257:21" pos:end="257:44"><expr pos:start="257:21" pos:end="257:44"><call pos:start="257:21" pos:end="257:44"><name pos:start="257:21" pos:end="257:34">qemu_get_clock</name><argument_list pos:start="257:35" pos:end="257:44">(<argument pos:start="257:36" pos:end="257:43"><expr pos:start="257:36" pos:end="257:43"><name pos:start="257:36" pos:end="257:43">rt_clock</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="261:5" pos:end="267:5"><if pos:start="261:5" pos:end="267:5">if <condition pos:start="261:8" pos:end="261:48">(<expr pos:start="261:9" pos:end="261:47"><name pos:start="261:9" pos:end="261:26"><name pos:start="261:9" pos:end="261:19">alarm_timer</name><operator pos:start="261:20" pos:end="261:21">-&gt;</operator><name pos:start="261:22" pos:end="261:26">flags</name></name> <operator pos:start="261:28" pos:end="261:28">&amp;</operator> <name pos:start="261:30" pos:end="261:47">ALARM_FLAG_EXPIRED</name></expr>)</condition> <block pos:start="261:50" pos:end="267:5">{<block_content pos:start="263:9" pos:end="265:44">

        <expr_stmt pos:start="263:9" pos:end="263:52"><expr pos:start="263:9" pos:end="263:51"><name pos:start="263:9" pos:end="263:26"><name pos:start="263:9" pos:end="263:19">alarm_timer</name><operator pos:start="263:20" pos:end="263:21">-&gt;</operator><name pos:start="263:22" pos:end="263:26">flags</name></name> <operator pos:start="263:28" pos:end="263:29">&amp;=</operator> <operator pos:start="263:31" pos:end="263:31">~</operator><operator pos:start="263:32" pos:end="263:32">(</operator><name pos:start="263:33" pos:end="263:50">ALARM_FLAG_EXPIRED</name><operator pos:start="263:51" pos:end="263:51">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="265:9" pos:end="265:44"><expr pos:start="265:9" pos:end="265:43"><call pos:start="265:9" pos:end="265:43"><name pos:start="265:9" pos:end="265:30">qemu_rearm_alarm_timer</name><argument_list pos:start="265:31" pos:end="265:43">(<argument pos:start="265:32" pos:end="265:42"><expr pos:start="265:32" pos:end="265:42"><name pos:start="265:32" pos:end="265:42">alarm_timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="271:5" pos:end="273:16">/* Check bottom-halves last in case any of the earlier events triggered

       them.  */</comment>

    <expr_stmt pos:start="275:5" pos:end="275:19"><expr pos:start="275:5" pos:end="275:18"><call pos:start="275:5" pos:end="275:18"><name pos:start="275:5" pos:end="275:16">qemu_bh_poll</name><argument_list pos:start="275:17" pos:end="275:18">()</argument_list></call></expr>;</expr_stmt>



</block_content>}</block></function>
</unit>
