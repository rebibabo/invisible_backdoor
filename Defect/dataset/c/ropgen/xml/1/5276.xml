<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5276.c" pos:tabs="8"><function pos:start="1:1" pos:end="403:1"><type pos:start="1:1" pos:end="1:25"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name> <name pos:start="1:20" pos:end="1:25">RENAME</name></type>(<name pos:start="1:27" pos:end="1:37">yuv2packed1</name>)<parameter_list pos:start="1:39" pos:end="3:98">(<parameter pos:start="1:40" pos:end="1:52"><decl pos:start="1:40" pos:end="1:52"><type pos:start="1:40" pos:end="1:52"><name pos:start="1:40" pos:end="1:49">SwsContext</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:52">c</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:68"><decl pos:start="1:55" pos:end="1:68"><type pos:start="1:55" pos:end="1:68"><name pos:start="1:55" pos:end="1:62">uint16_t</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:68">buf0</name></decl></parameter>, <parameter pos:start="1:71" pos:end="1:86"><decl pos:start="1:71" pos:end="1:86"><type pos:start="1:71" pos:end="1:86"><name pos:start="1:71" pos:end="1:78">uint16_t</name> <modifier pos:start="1:80" pos:end="1:80">*</modifier></type><name pos:start="1:81" pos:end="1:86">uvbuf0</name></decl></parameter>, <parameter pos:start="1:89" pos:end="1:104"><decl pos:start="1:89" pos:end="1:104"><type pos:start="1:89" pos:end="1:104"><name pos:start="1:89" pos:end="1:96">uint16_t</name> <modifier pos:start="1:98" pos:end="1:98">*</modifier></type><name pos:start="1:99" pos:end="1:104">uvbuf1</name></decl></parameter>,

			    <parameter pos:start="3:29" pos:end="3:41"><decl pos:start="3:29" pos:end="3:41"><type pos:start="3:29" pos:end="3:41"><name pos:start="3:29" pos:end="3:35">uint8_t</name> <modifier pos:start="3:37" pos:end="3:37">*</modifier></type><name pos:start="3:38" pos:end="3:41">dest</name></decl></parameter>, <parameter pos:start="3:44" pos:end="3:51"><decl pos:start="3:44" pos:end="3:51"><type pos:start="3:44" pos:end="3:51"><name pos:start="3:44" pos:end="3:46">int</name></type> <name pos:start="3:48" pos:end="3:51">dstW</name></decl></parameter>, <parameter pos:start="3:54" pos:end="3:64"><decl pos:start="3:54" pos:end="3:64"><type pos:start="3:54" pos:end="3:64"><name pos:start="3:54" pos:end="3:56">int</name></type> <name pos:start="3:58" pos:end="3:64">uvalpha</name></decl></parameter>, <parameter pos:start="3:67" pos:end="3:79"><decl pos:start="3:67" pos:end="3:79"><type pos:start="3:67" pos:end="3:79"><name pos:start="3:67" pos:end="3:69">int</name></type> <name pos:start="3:71" pos:end="3:79">dstFormat</name></decl></parameter>, <parameter pos:start="3:82" pos:end="3:90"><decl pos:start="3:82" pos:end="3:90"><type pos:start="3:82" pos:end="3:90"><name pos:start="3:82" pos:end="3:84">int</name></type> <name pos:start="3:86" pos:end="3:90">flags</name></decl></parameter>, <parameter pos:start="3:93" pos:end="3:97"><decl pos:start="3:93" pos:end="3:97"><type pos:start="3:93" pos:end="3:97"><name pos:start="3:93" pos:end="3:95">int</name></type> <name pos:start="3:97" pos:end="3:97">y</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="403:1">{<block_content pos:start="7:9" pos:end="401:9">

	<decl_stmt pos:start="7:9" pos:end="7:28"><decl pos:start="7:9" pos:end="7:27"><type pos:start="7:9" pos:end="7:17"><specifier pos:start="7:9" pos:end="7:13">const</specifier> <name pos:start="7:15" pos:end="7:17">int</name></type> <name pos:start="7:19" pos:end="7:25">yalpha1</name><init pos:start="7:26" pos:end="7:27">=<expr pos:start="7:27" pos:end="7:27"><literal type="number" pos:start="7:27" pos:end="7:27">0</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="9:9" pos:end="9:14"><decl pos:start="9:9" pos:end="9:13"><type pos:start="9:9" pos:end="9:11"><name pos:start="9:9" pos:end="9:11">int</name></type> <name pos:start="9:13" pos:end="9:13">i</name></decl>;</decl_stmt>



	<decl_stmt pos:start="13:9" pos:end="13:29"><decl pos:start="13:9" pos:end="13:28"><type pos:start="13:9" pos:end="13:18"><name pos:start="13:9" pos:end="13:16">uint16_t</name> <modifier pos:start="13:18" pos:end="13:18">*</modifier></type><name pos:start="13:19" pos:end="13:22">buf1</name><init pos:start="13:23" pos:end="13:28">= <expr pos:start="13:25" pos:end="13:28"><name pos:start="13:25" pos:end="13:28">buf0</name></expr></init></decl>;</decl_stmt> <comment type="line" pos:start="13:31" pos:end="13:62">//FIXME needed for the rgb1/bgr1</comment>

	<decl_stmt pos:start="15:9" pos:end="15:31"><decl pos:start="15:9" pos:end="15:30"><type pos:start="15:9" pos:end="15:17"><specifier pos:start="15:9" pos:end="15:13">const</specifier> <name pos:start="15:15" pos:end="15:17">int</name></type> <name pos:start="15:19" pos:end="15:24">yalpha</name><init pos:start="15:25" pos:end="15:30">= <expr pos:start="15:27" pos:end="15:30"><literal type="number" pos:start="15:27" pos:end="15:30">4096</literal></expr></init></decl>;</decl_stmt> <comment type="line" pos:start="15:33" pos:end="15:43">//FIXME ...</comment>



	<if_stmt pos:start="19:9" pos:end="32:0"><if pos:start="19:9" pos:end="32:0">if<condition pos:start="19:11" pos:end="19:36">(<expr pos:start="19:12" pos:end="19:35"><name pos:start="19:12" pos:end="19:16">flags</name><operator pos:start="19:17" pos:end="19:17">&amp;</operator><name pos:start="19:18" pos:end="19:35">SWS_FULL_CHR_H_INT</name></expr>)</condition>

	<block pos:start="21:9" pos:end="32:0">{<block_content pos:start="23:17" pos:end="25:23">

		<expr_stmt pos:start="23:17" pos:end="23:94"><expr pos:start="23:17" pos:end="23:93"><call pos:start="23:17" pos:end="23:93"><call pos:start="23:17" pos:end="23:35"><name pos:start="23:17" pos:end="23:22">RENAME</name><argument_list pos:start="23:23" pos:end="23:35">(<argument pos:start="23:24" pos:end="23:34"><expr pos:start="23:24" pos:end="23:34"><name pos:start="23:24" pos:end="23:34">yuv2packed2</name></expr></argument>)</argument_list></call><argument_list pos:start="23:36" pos:end="23:93">(<argument pos:start="23:37" pos:end="23:37"><expr pos:start="23:37" pos:end="23:37"><name pos:start="23:37" pos:end="23:37">c</name></expr></argument>, <argument pos:start="23:40" pos:end="23:43"><expr pos:start="23:40" pos:end="23:43"><name pos:start="23:40" pos:end="23:43">buf0</name></expr></argument>, <argument pos:start="23:46" pos:end="23:49"><expr pos:start="23:46" pos:end="23:49"><name pos:start="23:46" pos:end="23:49">buf0</name></expr></argument>, <argument pos:start="23:52" pos:end="23:57"><expr pos:start="23:52" pos:end="23:57"><name pos:start="23:52" pos:end="23:57">uvbuf0</name></expr></argument>, <argument pos:start="23:60" pos:end="23:65"><expr pos:start="23:60" pos:end="23:65"><name pos:start="23:60" pos:end="23:65">uvbuf1</name></expr></argument>, <argument pos:start="23:68" pos:end="23:71"><expr pos:start="23:68" pos:end="23:71"><name pos:start="23:68" pos:end="23:71">dest</name></expr></argument>, <argument pos:start="23:74" pos:end="23:77"><expr pos:start="23:74" pos:end="23:77"><name pos:start="23:74" pos:end="23:77">dstW</name></expr></argument>, <argument pos:start="23:80" pos:end="23:80"><expr pos:start="23:80" pos:end="23:80"><literal type="number" pos:start="23:80" pos:end="23:80">0</literal></expr></argument>, <argument pos:start="23:83" pos:end="23:89"><expr pos:start="23:83" pos:end="23:89"><name pos:start="23:83" pos:end="23:89">uvalpha</name></expr></argument>, <argument pos:start="23:92" pos:end="23:92"><expr pos:start="23:92" pos:end="23:92"><name pos:start="23:92" pos:end="23:92">y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return pos:start="25:17" pos:end="25:23">return;</return>

	</block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="31:1" pos:end="31:15">#<cpp:directive pos:start="31:2" pos:end="31:6">ifdef</cpp:directive> <name pos:start="31:8" pos:end="31:15">HAVE_MMX</name></cpp:ifdef>

	<if_stmt pos:start="33:9" pos:end="390:0"><if pos:start="33:9" pos:end="209:9">if<condition pos:start="33:11" pos:end="33:28">( <expr pos:start="33:13" pos:end="33:26"><name pos:start="33:13" pos:end="33:19">uvalpha</name> <operator pos:start="33:21" pos:end="33:21">&lt;</operator> <literal type="number" pos:start="33:23" pos:end="33:26">2048</literal></expr> )</condition> <comment type="line" pos:start="33:30" pos:end="33:112">// note this is not correct (shifts chrominance by 0.5 pixels) but its a bit faster</comment>

	<block pos:start="35:9" pos:end="209:9">{<block_content pos:start="37:17" pos:end="207:17">

		<switch pos:start="37:17" pos:end="207:17">switch<condition pos:start="37:23" pos:end="37:33">(<expr pos:start="37:24" pos:end="37:32"><name pos:start="37:24" pos:end="37:32">dstFormat</name></expr>)</condition>

		<block pos:start="39:17" pos:end="207:17">{<block_content pos:start="41:17" pos:end="205:31">

		<case pos:start="41:17" pos:end="41:35">case <expr pos:start="41:22" pos:end="41:34"><name pos:start="41:22" pos:end="41:34">PIX_FMT_RGB32</name></expr>:</case>

			<asm pos:start="43:25" pos:end="65:26">asm <specifier pos:start="43:29" pos:end="43:36">volatile</specifier>(

				"mov %%"REG_b", "ESP_OFFSET"(%5)	\n\t"

				"mov %4, %%"REG_b"			\n\t"

                                "push %%"REG_BP"                        \n\t"

				YSCALEYUV2RGB1(%%REGBP, %5)

				WRITEBGR32(%%REGb, 8280(%5), %%REGBP)

                                "pop %%"REG_BP"                         \n\t"

				"mov "ESP_OFFSET"(%5), %%"REG_b"	\n\t"



			:: "c" (buf0), "d" (buf1), "S" (uvbuf0), "D" (uvbuf1), "m" (dest),

			"a" (&amp;c-&gt;redDither)

			);</asm>

			<return pos:start="67:25" pos:end="67:31">return;</return>

		<case pos:start="69:17" pos:end="69:35">case <expr pos:start="69:22" pos:end="69:34"><name pos:start="69:22" pos:end="69:34">PIX_FMT_BGR24</name></expr>:</case>

			<asm pos:start="71:25" pos:end="93:26">asm <specifier pos:start="71:29" pos:end="71:36">volatile</specifier>(

				"mov %%"REG_b", "ESP_OFFSET"(%5)	\n\t"

				"mov %4, %%"REG_b"			\n\t"

                                "push %%"REG_BP"                        \n\t"

				YSCALEYUV2RGB1(%%REGBP, %5)

				WRITEBGR24(%%REGb, 8280(%5), %%REGBP)

                                "pop %%"REG_BP"                         \n\t"

				"mov "ESP_OFFSET"(%5), %%"REG_b"	\n\t"



			:: "c" (buf0), "d" (buf1), "S" (uvbuf0), "D" (uvbuf1), "m" (dest),

			"a" (&amp;c-&gt;redDither)

			);</asm>

			<return pos:start="95:25" pos:end="95:31">return;</return>

		<case pos:start="97:17" pos:end="97:36">case <expr pos:start="97:22" pos:end="97:35"><name pos:start="97:22" pos:end="97:35">PIX_FMT_BGR555</name></expr>:</case>

			<asm pos:start="99:25" pos:end="133:26">asm <specifier pos:start="99:29" pos:end="99:36">volatile</specifier>(

				"mov %%"REG_b", "ESP_OFFSET"(%5)	\n\t"

				"mov %4, %%"REG_b"			\n\t"

                                "push %%"REG_BP"                        \n\t"

				YSCALEYUV2RGB1(%%REGBP, %5)

		<comment type="block" pos:start="109:17" pos:end="109:54">/* mm2=B, %%mm4=G, %%mm5=R, %%mm7=0 */</comment>

<cpp:ifdef pos:start="111:1" pos:end="111:18">#<cpp:directive pos:start="111:2" pos:end="111:6">ifdef</cpp:directive> <name pos:start="111:8" pos:end="111:18">DITHER1XBPP</name></cpp:ifdef>

				"paddusb "MANGLE(b5Dither)", %%mm2\n\t"

				"paddusb "MANGLE(g5Dither)", %%mm4\n\t"

				"paddusb "MANGLE(r5Dither)", %%mm5\n\t"

<cpp:endif pos:start="119:1" pos:end="119:6">#<cpp:directive pos:start="119:2" pos:end="119:6">endif</cpp:directive></cpp:endif>

				WRITEBGR15(%%REGb, 8280(%5), %%REGBP)

                                "pop %%"REG_BP"                         \n\t"

				"mov "ESP_OFFSET"(%5), %%"REG_b"	\n\t"



			:: "c" (buf0), "d" (buf1), "S" (uvbuf0), "D" (uvbuf1), "m" (dest),

			"a" (&amp;c-&gt;redDither)

			);</asm>

			<return pos:start="135:25" pos:end="135:31">return;</return>

		<case pos:start="137:17" pos:end="137:36">case <expr pos:start="137:22" pos:end="137:35"><name pos:start="137:22" pos:end="137:35">PIX_FMT_BGR565</name></expr>:</case>

			<asm pos:start="139:25" pos:end="175:26">asm <specifier pos:start="139:29" pos:end="139:36">volatile</specifier>(

				"mov %%"REG_b", "ESP_OFFSET"(%5)	\n\t"

				"mov %4, %%"REG_b"			\n\t"

                                "push %%"REG_BP"                        \n\t"

				YSCALEYUV2RGB1(%%REGBP, %5)

		<comment type="block" pos:start="149:17" pos:end="149:54">/* mm2=B, %%mm4=G, %%mm5=R, %%mm7=0 */</comment>

<cpp:ifdef pos:start="151:1" pos:end="151:18">#<cpp:directive pos:start="151:2" pos:end="151:6">ifdef</cpp:directive> <name pos:start="151:8" pos:end="151:18">DITHER1XBPP</name></cpp:ifdef>

				"paddusb "MANGLE(b5Dither)", %%mm2\n\t"

				"paddusb "MANGLE(g6Dither)", %%mm4\n\t"

				"paddusb "MANGLE(r5Dither)", %%mm5\n\t"

<cpp:endif pos:start="159:1" pos:end="159:6">#<cpp:directive pos:start="159:2" pos:end="159:6">endif</cpp:directive></cpp:endif>



				WRITEBGR16(%%REGb, 8280(%5), %%REGBP)

                                "pop %%"REG_BP"                         \n\t"

				"mov "ESP_OFFSET"(%5), %%"REG_b"	\n\t"



			:: "c" (buf0), "d" (buf1), "S" (uvbuf0), "D" (uvbuf1), "m" (dest),

			"a" (&amp;c-&gt;redDither)

			);</asm>

			<return pos:start="177:25" pos:end="177:31">return;</return>

		<case pos:start="179:17" pos:end="179:37">case <expr pos:start="179:22" pos:end="179:36"><name pos:start="179:22" pos:end="179:36">PIX_FMT_YUYV422</name></expr>:</case>

			<asm pos:start="181:25" pos:end="203:26">asm <specifier pos:start="181:29" pos:end="181:36">volatile</specifier>(

				"mov %%"REG_b", "ESP_OFFSET"(%5)	\n\t"

				"mov %4, %%"REG_b"			\n\t"

                                "push %%"REG_BP"                        \n\t"

				YSCALEYUV2PACKED1(%%REGBP, %5)

				WRITEYUY2(%%REGb, 8280(%5), %%REGBP)

                                "pop %%"REG_BP"                         \n\t"

				"mov "ESP_OFFSET"(%5), %%"REG_b"	\n\t"



			:: "c" (buf0), "d" (buf1), "S" (uvbuf0), "D" (uvbuf1), "m" (dest),

			"a" (&amp;c-&gt;redDither)

			);</asm>

			<return pos:start="205:25" pos:end="205:31">return;</return>

		</block_content>}</block></switch>

	</block_content>}</block></if>

	<else pos:start="211:9" pos:end="390:0">else

	<block pos:start="213:9" pos:end="390:0">{<block_content pos:start="215:17" pos:end="385:17">

		<switch pos:start="215:17" pos:end="385:17">switch<condition pos:start="215:23" pos:end="215:33">(<expr pos:start="215:24" pos:end="215:32"><name pos:start="215:24" pos:end="215:32">dstFormat</name></expr>)</condition>

		<block pos:start="217:17" pos:end="385:17">{<block_content pos:start="219:17" pos:end="383:31">

		<case pos:start="219:17" pos:end="219:35">case <expr pos:start="219:22" pos:end="219:34"><name pos:start="219:22" pos:end="219:34">PIX_FMT_RGB32</name></expr>:</case>

			<asm pos:start="221:25" pos:end="243:26">asm <specifier pos:start="221:29" pos:end="221:36">volatile</specifier>(

				"mov %%"REG_b", "ESP_OFFSET"(%5)	\n\t"

				"mov %4, %%"REG_b"			\n\t"

                                "push %%"REG_BP"                        \n\t"

				YSCALEYUV2RGB1b(%%REGBP, %5)

				WRITEBGR32(%%REGb, 8280(%5), %%REGBP)

                                "pop %%"REG_BP"                         \n\t"

				"mov "ESP_OFFSET"(%5), %%"REG_b"	\n\t"



			:: "c" (buf0), "d" (buf1), "S" (uvbuf0), "D" (uvbuf1), "m" (dest),

			"a" (&amp;c-&gt;redDither)

			);</asm>

			<return pos:start="245:25" pos:end="245:31">return;</return>

		<case pos:start="247:17" pos:end="247:35">case <expr pos:start="247:22" pos:end="247:34"><name pos:start="247:22" pos:end="247:34">PIX_FMT_BGR24</name></expr>:</case>

			<asm pos:start="249:25" pos:end="271:26">asm <specifier pos:start="249:29" pos:end="249:36">volatile</specifier>(

				"mov %%"REG_b", "ESP_OFFSET"(%5)	\n\t"

				"mov %4, %%"REG_b"			\n\t"

                                "push %%"REG_BP"                        \n\t"

				YSCALEYUV2RGB1b(%%REGBP, %5)

				WRITEBGR24(%%REGb, 8280(%5), %%REGBP)

                                "pop %%"REG_BP"                         \n\t"

				"mov "ESP_OFFSET"(%5), %%"REG_b"	\n\t"



			:: "c" (buf0), "d" (buf1), "S" (uvbuf0), "D" (uvbuf1), "m" (dest),

			"a" (&amp;c-&gt;redDither)

			);</asm>

			<return pos:start="273:25" pos:end="273:31">return;</return>

		<case pos:start="275:17" pos:end="275:36">case <expr pos:start="275:22" pos:end="275:35"><name pos:start="275:22" pos:end="275:35">PIX_FMT_BGR555</name></expr>:</case>

			<asm pos:start="277:25" pos:end="311:26">asm <specifier pos:start="277:29" pos:end="277:36">volatile</specifier>(

				"mov %%"REG_b", "ESP_OFFSET"(%5)	\n\t"

				"mov %4, %%"REG_b"			\n\t"

                                "push %%"REG_BP"                        \n\t"

				YSCALEYUV2RGB1b(%%REGBP, %5)

		<comment type="block" pos:start="287:17" pos:end="287:54">/* mm2=B, %%mm4=G, %%mm5=R, %%mm7=0 */</comment>

<cpp:ifdef pos:start="289:1" pos:end="289:18">#<cpp:directive pos:start="289:2" pos:end="289:6">ifdef</cpp:directive> <name pos:start="289:8" pos:end="289:18">DITHER1XBPP</name></cpp:ifdef>

				"paddusb "MANGLE(b5Dither)", %%mm2\n\t"

				"paddusb "MANGLE(g5Dither)", %%mm4\n\t"

				"paddusb "MANGLE(r5Dither)", %%mm5\n\t"

<cpp:endif pos:start="297:1" pos:end="297:6">#<cpp:directive pos:start="297:2" pos:end="297:6">endif</cpp:directive></cpp:endif>

				WRITEBGR15(%%REGb, 8280(%5), %%REGBP)

                                "pop %%"REG_BP"                         \n\t"

				"mov "ESP_OFFSET"(%5), %%"REG_b"	\n\t"



			:: "c" (buf0), "d" (buf1), "S" (uvbuf0), "D" (uvbuf1), "m" (dest),

			"a" (&amp;c-&gt;redDither)

			);</asm>

			<return pos:start="313:25" pos:end="313:31">return;</return>

		<case pos:start="315:17" pos:end="315:36">case <expr pos:start="315:22" pos:end="315:35"><name pos:start="315:22" pos:end="315:35">PIX_FMT_BGR565</name></expr>:</case>

			<asm pos:start="317:25" pos:end="353:26">asm <specifier pos:start="317:29" pos:end="317:36">volatile</specifier>(

				"mov %%"REG_b", "ESP_OFFSET"(%5)	\n\t"

				"mov %4, %%"REG_b"			\n\t"

                                "push %%"REG_BP"                        \n\t"

				YSCALEYUV2RGB1b(%%REGBP, %5)

		<comment type="block" pos:start="327:17" pos:end="327:54">/* mm2=B, %%mm4=G, %%mm5=R, %%mm7=0 */</comment>

<cpp:ifdef pos:start="329:1" pos:end="329:18">#<cpp:directive pos:start="329:2" pos:end="329:6">ifdef</cpp:directive> <name pos:start="329:8" pos:end="329:18">DITHER1XBPP</name></cpp:ifdef>

				"paddusb "MANGLE(b5Dither)", %%mm2\n\t"

				"paddusb "MANGLE(g6Dither)", %%mm4\n\t"

				"paddusb "MANGLE(r5Dither)", %%mm5\n\t"

<cpp:endif pos:start="337:1" pos:end="337:6">#<cpp:directive pos:start="337:2" pos:end="337:6">endif</cpp:directive></cpp:endif>



				WRITEBGR16(%%REGb, 8280(%5), %%REGBP)

                                "pop %%"REG_BP"                         \n\t"

				"mov "ESP_OFFSET"(%5), %%"REG_b"	\n\t"



			:: "c" (buf0), "d" (buf1), "S" (uvbuf0), "D" (uvbuf1), "m" (dest),

			"a" (&amp;c-&gt;redDither)

			);</asm>

			<return pos:start="355:25" pos:end="355:31">return;</return>

		<case pos:start="357:17" pos:end="357:37">case <expr pos:start="357:22" pos:end="357:36"><name pos:start="357:22" pos:end="357:36">PIX_FMT_YUYV422</name></expr>:</case>

			<asm pos:start="359:25" pos:end="381:26">asm <specifier pos:start="359:29" pos:end="359:36">volatile</specifier>(

				"mov %%"REG_b", "ESP_OFFSET"(%5)	\n\t"

				"mov %4, %%"REG_b"			\n\t"

                                "push %%"REG_BP"                        \n\t"

				YSCALEYUV2PACKED1b(%%REGBP, %5)

				WRITEYUY2(%%REGb, 8280(%5), %%REGBP)

                                "pop %%"REG_BP"                         \n\t"

				"mov "ESP_OFFSET"(%5), %%"REG_b"	\n\t"



			:: "c" (buf0), "d" (buf1), "S" (uvbuf0), "D" (uvbuf1), "m" (dest),

			"a" (&amp;c-&gt;redDither)

			);</asm>

			<return pos:start="383:25" pos:end="383:31">return;</return>

		</block_content>}</block></switch>

	</block_content>}</block></else></if_stmt>

<cpp:endif pos:start="389:1" pos:end="389:6">#<cpp:directive pos:start="389:2" pos:end="389:6">endif</cpp:directive></cpp:endif>

	<if_stmt pos:start="391:9" pos:end="401:9"><if pos:start="391:9" pos:end="397:9">if<condition pos:start="391:11" pos:end="391:28">( <expr pos:start="391:13" pos:end="391:26"><name pos:start="391:13" pos:end="391:19">uvalpha</name> <operator pos:start="391:21" pos:end="391:21">&lt;</operator> <literal type="number" pos:start="391:23" pos:end="391:26">2048</literal></expr> )</condition>

	<block pos:start="393:9" pos:end="397:9">{<block_content pos:start="395:17" pos:end="395:82">

		<macro pos:start="395:17" pos:end="395:82"><name pos:start="395:17" pos:end="395:37">YSCALE_YUV_2_ANYRGB_C</name><argument_list pos:start="395:38" pos:end="395:82">(<argument pos:start="395:39" pos:end="395:57">YSCALE_YUV_2_RGB1_C</argument>, <argument pos:start="395:60" pos:end="395:81">YSCALE_YUV_2_PACKED1_C</argument>)</argument_list></macro>

	</block_content>}</block></if><else pos:start="397:10" pos:end="401:9">else<block pos:start="397:14" pos:end="401:9">{<block_content pos:start="399:17" pos:end="399:84">

		<macro pos:start="399:17" pos:end="399:84"><name pos:start="399:17" pos:end="399:37">YSCALE_YUV_2_ANYRGB_C</name><argument_list pos:start="399:38" pos:end="399:84">(<argument pos:start="399:39" pos:end="399:58">YSCALE_YUV_2_RGB1B_C</argument>, <argument pos:start="399:61" pos:end="399:83">YSCALE_YUV_2_PACKED1B_C</argument>)</argument_list></macro>

	</block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
