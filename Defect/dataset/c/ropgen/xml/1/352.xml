<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/352.c" pos:tabs="8"><function pos:start="1:1" pos:end="75:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:21">ff_rtp_send_h263</name><parameter_list pos:start="1:22" pos:end="1:73">(<parameter pos:start="1:23" pos:end="1:41"><decl pos:start="1:23" pos:end="1:41"><type pos:start="1:23" pos:end="1:41"><name pos:start="1:23" pos:end="1:37">AVFormatContext</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:41">s1</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:62"><decl pos:start="1:44" pos:end="1:62"><type pos:start="1:44" pos:end="1:62"><specifier pos:start="1:44" pos:end="1:48">const</specifier> <name pos:start="1:50" pos:end="1:56">uint8_t</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:62">buf1</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:72"><decl pos:start="1:65" pos:end="1:72"><type pos:start="1:65" pos:end="1:72"><name pos:start="1:65" pos:end="1:67">int</name></type> <name pos:start="1:69" pos:end="1:72">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="75:1">{<block_content pos:start="5:5" pos:end="73:5">

    <decl_stmt pos:start="5:5" pos:end="5:37"><decl pos:start="5:5" pos:end="5:36"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">RTPMuxContext</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:20">s</name> <init pos:start="5:22" pos:end="5:36">= <expr pos:start="5:24" pos:end="5:36"><name pos:start="5:24" pos:end="5:36"><name pos:start="5:24" pos:end="5:25">s1</name><operator pos:start="5:26" pos:end="5:27">-&gt;</operator><name pos:start="5:28" pos:end="5:36">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">len</name></decl>, <decl pos:start="7:14" pos:end="7:28"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:14" pos:end="7:28">max_packet_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:15"><decl pos:start="9:5" pos:end="9:14"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">uint8_t</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:14">q</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:42"><expr pos:start="13:5" pos:end="13:41"><name pos:start="13:5" pos:end="13:19">max_packet_size</name> <operator pos:start="13:21" pos:end="13:21">=</operator> <name pos:start="13:23" pos:end="13:41"><name pos:start="13:23" pos:end="13:23">s</name><operator pos:start="13:24" pos:end="13:25">-&gt;</operator><name pos:start="13:26" pos:end="13:41">max_payload_size</name></name></expr>;</expr_stmt>



    <while pos:start="17:5" pos:end="73:5">while <condition pos:start="17:11" pos:end="17:20">(<expr pos:start="17:12" pos:end="17:19"><name pos:start="17:12" pos:end="17:15">size</name> <operator pos:start="17:17" pos:end="17:17">&gt;</operator> <literal type="number" pos:start="17:19" pos:end="17:19">0</literal></expr>)</condition> <block pos:start="17:22" pos:end="73:5">{<block_content pos:start="19:9" pos:end="71:20">

        <expr_stmt pos:start="19:9" pos:end="19:19"><expr pos:start="19:9" pos:end="19:18"><name pos:start="19:9" pos:end="19:9">q</name> <operator pos:start="19:11" pos:end="19:11">=</operator> <name pos:start="19:13" pos:end="19:18"><name pos:start="19:13" pos:end="19:13">s</name><operator pos:start="19:14" pos:end="19:15">-&gt;</operator><name pos:start="19:16" pos:end="19:18">buf</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="21:9" pos:end="33:9"><if pos:start="21:9" pos:end="29:9">if <condition pos:start="21:12" pos:end="21:45">(<expr pos:start="21:13" pos:end="21:44"><operator pos:start="21:13" pos:end="21:13">(</operator><name pos:start="21:14" pos:end="21:20"><name pos:start="21:14" pos:end="21:17">buf1</name><index pos:start="21:18" pos:end="21:20">[<expr pos:start="21:19" pos:end="21:19"><literal type="number" pos:start="21:19" pos:end="21:19">0</literal></expr>]</index></name> <operator pos:start="21:22" pos:end="21:23">==</operator> <literal type="number" pos:start="21:25" pos:end="21:25">0</literal><operator pos:start="21:26" pos:end="21:26">)</operator> <operator pos:start="21:28" pos:end="21:29">&amp;&amp;</operator> <operator pos:start="21:31" pos:end="21:31">(</operator><name pos:start="21:32" pos:end="21:38"><name pos:start="21:32" pos:end="21:35">buf1</name><index pos:start="21:36" pos:end="21:38">[<expr pos:start="21:37" pos:end="21:37"><literal type="number" pos:start="21:37" pos:end="21:37">1</literal></expr>]</index></name> <operator pos:start="21:40" pos:end="21:41">==</operator> <literal type="number" pos:start="21:43" pos:end="21:43">0</literal><operator pos:start="21:44" pos:end="21:44">)</operator></expr>)</condition> <block pos:start="21:47" pos:end="29:9">{<block_content pos:start="23:13" pos:end="27:22">

            <expr_stmt pos:start="23:13" pos:end="23:24"><expr pos:start="23:13" pos:end="23:23"><operator pos:start="23:13" pos:end="23:13">*</operator><name pos:start="23:14" pos:end="23:14">q</name><operator pos:start="23:15" pos:end="23:16">++</operator> <operator pos:start="23:18" pos:end="23:18">=</operator> <literal type="number" pos:start="23:20" pos:end="23:23">0x04</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="25:13" pos:end="25:22"><expr pos:start="25:13" pos:end="25:21"><name pos:start="25:13" pos:end="25:16">buf1</name> <operator pos:start="25:18" pos:end="25:19">+=</operator> <literal type="number" pos:start="25:21" pos:end="25:21">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="27:13" pos:end="27:22"><expr pos:start="27:13" pos:end="27:21"><name pos:start="27:13" pos:end="27:16">size</name> <operator pos:start="27:18" pos:end="27:19">-=</operator> <literal type="number" pos:start="27:21" pos:end="27:21">2</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="29:11" pos:end="33:9">else <block pos:start="29:16" pos:end="33:9">{<block_content pos:start="31:13" pos:end="31:21">

            <expr_stmt pos:start="31:13" pos:end="31:21"><expr pos:start="31:13" pos:end="31:20"><operator pos:start="31:13" pos:end="31:13">*</operator><name pos:start="31:14" pos:end="31:14">q</name><operator pos:start="31:15" pos:end="31:16">++</operator> <operator pos:start="31:18" pos:end="31:18">=</operator> <literal type="number" pos:start="31:20" pos:end="31:20">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:17"><expr pos:start="35:9" pos:end="35:16"><operator pos:start="35:9" pos:end="35:9">*</operator><name pos:start="35:10" pos:end="35:10">q</name><operator pos:start="35:11" pos:end="35:12">++</operator> <operator pos:start="35:14" pos:end="35:14">=</operator> <literal type="number" pos:start="35:16" pos:end="35:16">0</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="39:9" pos:end="39:47"><expr pos:start="39:9" pos:end="39:46"><name pos:start="39:9" pos:end="39:11">len</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <call pos:start="39:15" pos:end="39:46"><name pos:start="39:15" pos:end="39:19">FFMIN</name><argument_list pos:start="39:20" pos:end="39:46">(<argument pos:start="39:21" pos:end="39:39"><expr pos:start="39:21" pos:end="39:39"><name pos:start="39:21" pos:end="39:35">max_packet_size</name> <operator pos:start="39:37" pos:end="39:37">-</operator> <literal type="number" pos:start="39:39" pos:end="39:39">2</literal></expr></argument>, <argument pos:start="39:42" pos:end="39:45"><expr pos:start="39:42" pos:end="39:45"><name pos:start="39:42" pos:end="39:45">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="43:9" pos:end="43:70">/* Look for a better place to split the frame into packets. */</comment>

        <if_stmt pos:start="45:9" pos:end="51:9"><if pos:start="45:9" pos:end="51:9">if <condition pos:start="45:12" pos:end="45:23">(<expr pos:start="45:13" pos:end="45:22"><name pos:start="45:13" pos:end="45:15">len</name> <operator pos:start="45:17" pos:end="45:17">&lt;</operator> <name pos:start="45:19" pos:end="45:22">size</name></expr>)</condition> <block pos:start="45:25" pos:end="51:9">{<block_content pos:start="47:13" pos:end="49:29">

            <decl_stmt pos:start="47:13" pos:end="47:78"><decl pos:start="47:13" pos:end="47:77"><type pos:start="47:13" pos:end="47:27"><specifier pos:start="47:13" pos:end="47:17">const</specifier> <name pos:start="47:19" pos:end="47:25">uint8_t</name> <modifier pos:start="47:27" pos:end="47:27">*</modifier></type><name pos:start="47:28" pos:end="47:30">end</name> <init pos:start="47:32" pos:end="47:77">= <expr pos:start="47:34" pos:end="47:77"><call pos:start="47:34" pos:end="47:77"><name pos:start="47:34" pos:end="47:59">find_resync_marker_reverse</name><argument_list pos:start="47:60" pos:end="47:77">(<argument pos:start="47:61" pos:end="47:64"><expr pos:start="47:61" pos:end="47:64"><name pos:start="47:61" pos:end="47:64">buf1</name></expr></argument>, <argument pos:start="47:67" pos:end="47:76"><expr pos:start="47:67" pos:end="47:76"><name pos:start="47:67" pos:end="47:70">buf1</name> <operator pos:start="47:72" pos:end="47:72">+</operator> <name pos:start="47:74" pos:end="47:76">len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:29"><expr pos:start="49:13" pos:end="49:28"><name pos:start="49:13" pos:end="49:15">len</name> <operator pos:start="49:17" pos:end="49:17">=</operator> <name pos:start="49:19" pos:end="49:21">end</name> <operator pos:start="49:23" pos:end="49:23">-</operator> <name pos:start="49:25" pos:end="49:28">buf1</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="55:9" pos:end="55:29"><expr pos:start="55:9" pos:end="55:28"><call pos:start="55:9" pos:end="55:28"><name pos:start="55:9" pos:end="55:14">memcpy</name><argument_list pos:start="55:15" pos:end="55:28">(<argument pos:start="55:16" pos:end="55:16"><expr pos:start="55:16" pos:end="55:16"><name pos:start="55:16" pos:end="55:16">q</name></expr></argument>, <argument pos:start="55:19" pos:end="55:22"><expr pos:start="55:19" pos:end="55:22"><name pos:start="55:19" pos:end="55:22">buf1</name></expr></argument>, <argument pos:start="55:25" pos:end="55:27"><expr pos:start="55:25" pos:end="55:27"><name pos:start="55:25" pos:end="55:27">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:17"><expr pos:start="57:9" pos:end="57:16"><name pos:start="57:9" pos:end="57:9">q</name> <operator pos:start="57:11" pos:end="57:12">+=</operator> <name pos:start="57:14" pos:end="57:16">len</name></expr>;</expr_stmt>



        <comment type="block" pos:start="61:9" pos:end="61:31">/* 90 KHz time stamp */</comment>

        <expr_stmt pos:start="63:9" pos:end="63:40"><expr pos:start="63:9" pos:end="63:39"><name pos:start="63:9" pos:end="63:20"><name pos:start="63:9" pos:end="63:9">s</name><operator pos:start="63:10" pos:end="63:11">-&gt;</operator><name pos:start="63:12" pos:end="63:20">timestamp</name></name> <operator pos:start="63:22" pos:end="63:22">=</operator> <name pos:start="63:24" pos:end="63:39"><name pos:start="63:24" pos:end="63:24">s</name><operator pos:start="63:25" pos:end="63:26">-&gt;</operator><name pos:start="63:27" pos:end="63:39">cur_timestamp</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:64"><expr pos:start="65:9" pos:end="65:63"><call pos:start="65:9" pos:end="65:63"><name pos:start="65:9" pos:end="65:24">ff_rtp_send_data</name><argument_list pos:start="65:25" pos:end="65:63">(<argument pos:start="65:26" pos:end="65:27"><expr pos:start="65:26" pos:end="65:27"><name pos:start="65:26" pos:end="65:27">s1</name></expr></argument>, <argument pos:start="65:30" pos:end="65:35"><expr pos:start="65:30" pos:end="65:35"><name pos:start="65:30" pos:end="65:35"><name pos:start="65:30" pos:end="65:30">s</name><operator pos:start="65:31" pos:end="65:32">-&gt;</operator><name pos:start="65:33" pos:end="65:35">buf</name></name></expr></argument>, <argument pos:start="65:38" pos:end="65:47"><expr pos:start="65:38" pos:end="65:47"><name pos:start="65:38" pos:end="65:38">q</name> <operator pos:start="65:40" pos:end="65:40">-</operator> <name pos:start="65:42" pos:end="65:47"><name pos:start="65:42" pos:end="65:42">s</name><operator pos:start="65:43" pos:end="65:44">-&gt;</operator><name pos:start="65:45" pos:end="65:47">buf</name></name></expr></argument>, <argument pos:start="65:50" pos:end="65:62"><expr pos:start="65:50" pos:end="65:62"><operator pos:start="65:50" pos:end="65:50">(</operator><name pos:start="65:51" pos:end="65:53">len</name> <operator pos:start="65:55" pos:end="65:56">==</operator> <name pos:start="65:58" pos:end="65:61">size</name><operator pos:start="65:62" pos:end="65:62">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="69:9" pos:end="69:20"><expr pos:start="69:9" pos:end="69:19"><name pos:start="69:9" pos:end="69:12">buf1</name> <operator pos:start="69:14" pos:end="69:15">+=</operator> <name pos:start="69:17" pos:end="69:19">len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:20"><expr pos:start="71:9" pos:end="71:19"><name pos:start="71:9" pos:end="71:12">size</name> <operator pos:start="71:14" pos:end="71:15">-=</operator> <name pos:start="71:17" pos:end="71:19">len</name></expr>;</expr_stmt>

    </block_content>}</block></while>

</block_content>}</block></function>
</unit>
