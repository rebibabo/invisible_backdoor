<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6790.c" pos:tabs="8"><function pos:start="1:1" pos:end="301:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">decode_header</name><parameter_list pos:start="1:25" pos:end="1:40">(<parameter pos:start="1:26" pos:end="1:39"><decl pos:start="1:26" pos:end="1:39"><type pos:start="1:26" pos:end="1:37"><name pos:start="1:26" pos:end="1:35">PSDContext</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type> <name pos:start="1:39" pos:end="1:39">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="301:1">{<block_content pos:start="5:5" pos:end="299:15">

    <decl_stmt pos:start="5:5" pos:end="5:52"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:17">signature</name></decl>, <decl pos:start="5:20" pos:end="5:26"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:20" pos:end="5:26">version</name></decl>, <decl pos:start="5:29" pos:end="5:38"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:29" pos:end="5:38">color_mode</name></decl>, <decl pos:start="5:41" pos:end="5:51"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:41" pos:end="5:51">compression</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">int64_t</name></type> <name pos:start="7:13" pos:end="7:23">len_section</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name> <init pos:start="9:13" pos:end="9:15">= <expr pos:start="9:15" pos:end="9:15"><literal type="number" pos:start="9:15" pos:end="9:15">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="19:5"><if pos:start="13:5" pos:end="19:5">if <condition pos:start="13:8" pos:end="13:48">(<expr pos:start="13:9" pos:end="13:47"><call pos:start="13:9" pos:end="13:42"><name pos:start="13:9" pos:end="13:34">bytestream2_get_bytes_left</name><argument_list pos:start="13:35" pos:end="13:42">(<argument pos:start="13:36" pos:end="13:41"><expr pos:start="13:36" pos:end="13:41"><operator pos:start="13:36" pos:end="13:36">&amp;</operator><name pos:start="13:37" pos:end="13:41"><name pos:start="13:37" pos:end="13:37">s</name><operator pos:start="13:38" pos:end="13:39">-&gt;</operator><name pos:start="13:40" pos:end="13:41">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="13:44" pos:end="13:44">&lt;</operator> <literal type="number" pos:start="13:46" pos:end="13:47">30</literal></expr>)</condition> <block pos:start="13:50" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:35"><comment type="block" pos:start="13:51" pos:end="13:107">/* File header section + color map data section length */</comment>

        <expr_stmt pos:start="15:9" pos:end="15:71"><expr pos:start="15:9" pos:end="15:70"><call pos:start="15:9" pos:end="15:70"><name pos:start="15:9" pos:end="15:14">av_log</name><argument_list pos:start="15:15" pos:end="15:70">(<argument pos:start="15:16" pos:end="15:23"><expr pos:start="15:16" pos:end="15:23"><name pos:start="15:16" pos:end="15:23"><name pos:start="15:16" pos:end="15:16">s</name><operator pos:start="15:17" pos:end="15:18">-&gt;</operator><name pos:start="15:19" pos:end="15:23">avctx</name></name></expr></argument>, <argument pos:start="15:26" pos:end="15:37"><expr pos:start="15:26" pos:end="15:37"><name pos:start="15:26" pos:end="15:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="15:40" pos:end="15:69"><expr pos:start="15:40" pos:end="15:69"><literal type="string" pos:start="15:40" pos:end="15:69">"Header too short to parse.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="17:9" pos:end="17:35">return <expr pos:start="17:16" pos:end="17:34"><name pos:start="17:16" pos:end="17:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:45"><expr pos:start="23:5" pos:end="23:44"><name pos:start="23:5" pos:end="23:13">signature</name> <operator pos:start="23:15" pos:end="23:15">=</operator> <call pos:start="23:17" pos:end="23:44"><name pos:start="23:17" pos:end="23:36">bytestream2_get_le32</name><argument_list pos:start="23:37" pos:end="23:44">(<argument pos:start="23:38" pos:end="23:43"><expr pos:start="23:38" pos:end="23:43"><operator pos:start="23:38" pos:end="23:38">&amp;</operator><name pos:start="23:39" pos:end="23:43"><name pos:start="23:39" pos:end="23:39">s</name><operator pos:start="23:40" pos:end="23:41">-&gt;</operator><name pos:start="23:42" pos:end="23:43">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:44">(<expr pos:start="25:9" pos:end="25:43"><name pos:start="25:9" pos:end="25:17">signature</name> <operator pos:start="25:19" pos:end="25:20">!=</operator> <call pos:start="25:22" pos:end="25:43"><name pos:start="25:22" pos:end="25:26">MKTAG</name><argument_list pos:start="25:27" pos:end="25:43">(<argument pos:start="25:28" pos:end="25:30"><expr pos:start="25:28" pos:end="25:30"><literal type="char" pos:start="25:28" pos:end="25:30">'8'</literal></expr></argument>,<argument pos:start="25:32" pos:end="25:34"><expr pos:start="25:32" pos:end="25:34"><literal type="char" pos:start="25:32" pos:end="25:34">'B'</literal></expr></argument>,<argument pos:start="25:36" pos:end="25:38"><expr pos:start="25:36" pos:end="25:38"><literal type="char" pos:start="25:36" pos:end="25:38">'P'</literal></expr></argument>,<argument pos:start="25:40" pos:end="25:42"><expr pos:start="25:40" pos:end="25:42"><literal type="char" pos:start="25:40" pos:end="25:42">'S'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="25:46" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:35">

        <expr_stmt pos:start="27:9" pos:end="27:75"><expr pos:start="27:9" pos:end="27:74"><call pos:start="27:9" pos:end="27:74"><name pos:start="27:9" pos:end="27:14">av_log</name><argument_list pos:start="27:15" pos:end="27:74">(<argument pos:start="27:16" pos:end="27:23"><expr pos:start="27:16" pos:end="27:23"><name pos:start="27:16" pos:end="27:23"><name pos:start="27:16" pos:end="27:16">s</name><operator pos:start="27:17" pos:end="27:18">-&gt;</operator><name pos:start="27:19" pos:end="27:23">avctx</name></name></expr></argument>, <argument pos:start="27:26" pos:end="27:37"><expr pos:start="27:26" pos:end="27:37"><name pos:start="27:26" pos:end="27:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="27:40" pos:end="27:62"><expr pos:start="27:40" pos:end="27:62"><literal type="string" pos:start="27:40" pos:end="27:62">"Wrong signature %d.\n"</literal></expr></argument>, <argument pos:start="27:65" pos:end="27:73"><expr pos:start="27:65" pos:end="27:73"><name pos:start="27:65" pos:end="27:73">signature</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:35">return <expr pos:start="29:16" pos:end="29:34"><name pos:start="29:16" pos:end="29:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:43"><expr pos:start="35:5" pos:end="35:42"><name pos:start="35:5" pos:end="35:11">version</name> <operator pos:start="35:13" pos:end="35:13">=</operator> <call pos:start="35:15" pos:end="35:42"><name pos:start="35:15" pos:end="35:34">bytestream2_get_be16</name><argument_list pos:start="35:35" pos:end="35:42">(<argument pos:start="35:36" pos:end="35:41"><expr pos:start="35:36" pos:end="35:41"><operator pos:start="35:36" pos:end="35:36">&amp;</operator><name pos:start="35:37" pos:end="35:41"><name pos:start="35:37" pos:end="35:37">s</name><operator pos:start="35:38" pos:end="35:39">-&gt;</operator><name pos:start="35:40" pos:end="35:41">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="43:5"><if pos:start="37:5" pos:end="43:5">if <condition pos:start="37:8" pos:end="37:21">(<expr pos:start="37:9" pos:end="37:20"><name pos:start="37:9" pos:end="37:15">version</name> <operator pos:start="37:17" pos:end="37:18">!=</operator> <literal type="number" pos:start="37:20" pos:end="37:20">1</literal></expr>)</condition> <block pos:start="37:23" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:35">

        <expr_stmt pos:start="39:9" pos:end="39:71"><expr pos:start="39:9" pos:end="39:70"><call pos:start="39:9" pos:end="39:70"><name pos:start="39:9" pos:end="39:14">av_log</name><argument_list pos:start="39:15" pos:end="39:70">(<argument pos:start="39:16" pos:end="39:23"><expr pos:start="39:16" pos:end="39:23"><name pos:start="39:16" pos:end="39:23"><name pos:start="39:16" pos:end="39:16">s</name><operator pos:start="39:17" pos:end="39:18">-&gt;</operator><name pos:start="39:19" pos:end="39:23">avctx</name></name></expr></argument>, <argument pos:start="39:26" pos:end="39:37"><expr pos:start="39:26" pos:end="39:37"><name pos:start="39:26" pos:end="39:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="39:40" pos:end="39:60"><expr pos:start="39:40" pos:end="39:60"><literal type="string" pos:start="39:40" pos:end="39:60">"Wrong version %d.\n"</literal></expr></argument>, <argument pos:start="39:63" pos:end="39:69"><expr pos:start="39:63" pos:end="39:69"><name pos:start="39:63" pos:end="39:69">version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="41:9" pos:end="41:35">return <expr pos:start="41:16" pos:end="41:34"><name pos:start="41:16" pos:end="41:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:32"><expr pos:start="47:5" pos:end="47:31"><call pos:start="47:5" pos:end="47:31"><name pos:start="47:5" pos:end="47:20">bytestream2_skip</name><argument_list pos:start="47:21" pos:end="47:31">(<argument pos:start="47:22" pos:end="47:27"><expr pos:start="47:22" pos:end="47:27"><operator pos:start="47:22" pos:end="47:22">&amp;</operator><name pos:start="47:23" pos:end="47:27"><name pos:start="47:23" pos:end="47:23">s</name><operator pos:start="47:24" pos:end="47:25">-&gt;</operator><name pos:start="47:26" pos:end="47:27">gb</name></name></expr></argument>, <argument pos:start="47:30" pos:end="47:30"><expr pos:start="47:30" pos:end="47:30"><literal type="number" pos:start="47:30" pos:end="47:30">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="block" pos:start="47:33" pos:end="47:46">/* reserved */</comment>



    <expr_stmt pos:start="51:5" pos:end="51:52"><expr pos:start="51:5" pos:end="51:51"><name pos:start="51:5" pos:end="51:20"><name pos:start="51:5" pos:end="51:5">s</name><operator pos:start="51:6" pos:end="51:7">-&gt;</operator><name pos:start="51:8" pos:end="51:20">channel_count</name></name> <operator pos:start="51:22" pos:end="51:22">=</operator> <call pos:start="51:24" pos:end="51:51"><name pos:start="51:24" pos:end="51:43">bytestream2_get_be16</name><argument_list pos:start="51:44" pos:end="51:51">(<argument pos:start="51:45" pos:end="51:50"><expr pos:start="51:45" pos:end="51:50"><operator pos:start="51:45" pos:end="51:45">&amp;</operator><name pos:start="51:46" pos:end="51:50"><name pos:start="51:46" pos:end="51:46">s</name><operator pos:start="51:47" pos:end="51:48">-&gt;</operator><name pos:start="51:49" pos:end="51:50">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="59:5"><if pos:start="53:5" pos:end="59:5">if <condition pos:start="53:8" pos:end="53:58">(<expr pos:start="53:9" pos:end="53:57"><operator pos:start="53:9" pos:end="53:9">(</operator><name pos:start="53:10" pos:end="53:25"><name pos:start="53:10" pos:end="53:10">s</name><operator pos:start="53:11" pos:end="53:12">-&gt;</operator><name pos:start="53:13" pos:end="53:25">channel_count</name></name> <operator pos:start="53:27" pos:end="53:27">&lt;</operator> <literal type="number" pos:start="53:29" pos:end="53:29">1</literal><operator pos:start="53:30" pos:end="53:30">)</operator> <operator pos:start="53:32" pos:end="53:33">||</operator> <operator pos:start="53:35" pos:end="53:35">(</operator><name pos:start="53:36" pos:end="53:51"><name pos:start="53:36" pos:end="53:36">s</name><operator pos:start="53:37" pos:end="53:38">-&gt;</operator><name pos:start="53:39" pos:end="53:51">channel_count</name></name> <operator pos:start="53:53" pos:end="53:53">&gt;</operator> <literal type="number" pos:start="53:55" pos:end="53:56">56</literal><operator pos:start="53:57" pos:end="53:57">)</operator></expr>)</condition> <block pos:start="53:60" pos:end="59:5">{<block_content pos:start="55:9" pos:end="57:35">

        <expr_stmt pos:start="55:9" pos:end="55:88"><expr pos:start="55:9" pos:end="55:87"><call pos:start="55:9" pos:end="55:87"><name pos:start="55:9" pos:end="55:14">av_log</name><argument_list pos:start="55:15" pos:end="55:87">(<argument pos:start="55:16" pos:end="55:23"><expr pos:start="55:16" pos:end="55:23"><name pos:start="55:16" pos:end="55:23"><name pos:start="55:16" pos:end="55:16">s</name><operator pos:start="55:17" pos:end="55:18">-&gt;</operator><name pos:start="55:19" pos:end="55:23">avctx</name></name></expr></argument>, <argument pos:start="55:26" pos:end="55:37"><expr pos:start="55:26" pos:end="55:37"><name pos:start="55:26" pos:end="55:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="55:40" pos:end="55:68"><expr pos:start="55:40" pos:end="55:68"><literal type="string" pos:start="55:40" pos:end="55:68">"Invalid channel count %d.\n"</literal></expr></argument>, <argument pos:start="55:71" pos:end="55:86"><expr pos:start="55:71" pos:end="55:86"><name pos:start="55:71" pos:end="55:86"><name pos:start="55:71" pos:end="55:71">s</name><operator pos:start="55:72" pos:end="55:73">-&gt;</operator><name pos:start="55:74" pos:end="55:86">channel_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="57:9" pos:end="57:35">return <expr pos:start="57:16" pos:end="57:34"><name pos:start="57:16" pos:end="57:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:45"><expr pos:start="63:5" pos:end="63:44"><name pos:start="63:5" pos:end="63:13"><name pos:start="63:5" pos:end="63:5">s</name><operator pos:start="63:6" pos:end="63:7">-&gt;</operator><name pos:start="63:8" pos:end="63:13">height</name></name> <operator pos:start="63:15" pos:end="63:15">=</operator> <call pos:start="63:17" pos:end="63:44"><name pos:start="63:17" pos:end="63:36">bytestream2_get_be32</name><argument_list pos:start="63:37" pos:end="63:44">(<argument pos:start="63:38" pos:end="63:43"><expr pos:start="63:38" pos:end="63:43"><operator pos:start="63:38" pos:end="63:38">&amp;</operator><name pos:start="63:39" pos:end="63:43"><name pos:start="63:39" pos:end="63:39">s</name><operator pos:start="63:40" pos:end="63:41">-&gt;</operator><name pos:start="63:42" pos:end="63:43">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="67:5" pos:end="79:5"><if pos:start="67:5" pos:end="79:5">if <condition pos:start="67:8" pos:end="67:94">(<expr pos:start="67:9" pos:end="67:93"><operator pos:start="67:9" pos:end="67:9">(</operator><name pos:start="67:10" pos:end="67:18"><name pos:start="67:10" pos:end="67:10">s</name><operator pos:start="67:11" pos:end="67:12">-&gt;</operator><name pos:start="67:13" pos:end="67:18">height</name></name> <operator pos:start="67:20" pos:end="67:20">&gt;</operator> <literal type="number" pos:start="67:22" pos:end="67:26">30000</literal><operator pos:start="67:27" pos:end="67:27">)</operator> <operator pos:start="67:29" pos:end="67:30">&amp;&amp;</operator> <operator pos:start="67:32" pos:end="67:32">(</operator><name pos:start="67:33" pos:end="67:63"><name pos:start="67:33" pos:end="67:33">s</name><operator pos:start="67:34" pos:end="67:35">-&gt;</operator><name pos:start="67:36" pos:end="67:40">avctx</name><operator pos:start="67:41" pos:end="67:42">-&gt;</operator><name pos:start="67:43" pos:end="67:63">strict_std_compliance</name></name> <operator pos:start="67:65" pos:end="67:65">&gt;</operator> <name pos:start="67:67" pos:end="67:92">FF_COMPLIANCE_EXPERIMENTAL</name><operator pos:start="67:93" pos:end="67:93">)</operator></expr>)</condition> <block pos:start="67:96" pos:end="79:5">{<block_content pos:start="69:9" pos:end="77:36">

        <expr_stmt pos:start="69:9" pos:end="75:43"><expr pos:start="69:9" pos:end="75:42"><call pos:start="69:9" pos:end="75:42"><name pos:start="69:9" pos:end="69:14">av_log</name><argument_list pos:start="69:15" pos:end="75:42">(<argument pos:start="69:16" pos:end="69:23"><expr pos:start="69:16" pos:end="69:23"><name pos:start="69:16" pos:end="69:23"><name pos:start="69:16" pos:end="69:16">s</name><operator pos:start="69:17" pos:end="69:18">-&gt;</operator><name pos:start="69:19" pos:end="69:23">avctx</name></name></expr></argument>, <argument pos:start="69:26" pos:end="69:37"><expr pos:start="69:26" pos:end="69:37"><name pos:start="69:26" pos:end="69:37">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="71:16" pos:end="73:73"><expr pos:start="71:16" pos:end="73:73"><literal type="string" pos:start="71:16" pos:end="71:53">"Height &gt; 30000 is experimental, add "</literal>

               <literal type="string" pos:start="73:16" pos:end="73:73">"'-strict %d' if you want to try to decode the picture.\n"</literal></expr></argument>,

               <argument pos:start="75:16" pos:end="75:41"><expr pos:start="75:16" pos:end="75:41"><name pos:start="75:16" pos:end="75:41">FF_COMPLIANCE_EXPERIMENTAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="77:9" pos:end="77:36">return <expr pos:start="77:16" pos:end="77:35"><name pos:start="77:16" pos:end="77:35">AVERROR_EXPERIMENTAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="83:5" pos:end="83:44"><expr pos:start="83:5" pos:end="83:43"><name pos:start="83:5" pos:end="83:12"><name pos:start="83:5" pos:end="83:5">s</name><operator pos:start="83:6" pos:end="83:7">-&gt;</operator><name pos:start="83:8" pos:end="83:12">width</name></name> <operator pos:start="83:14" pos:end="83:14">=</operator> <call pos:start="83:16" pos:end="83:43"><name pos:start="83:16" pos:end="83:35">bytestream2_get_be32</name><argument_list pos:start="83:36" pos:end="83:43">(<argument pos:start="83:37" pos:end="83:42"><expr pos:start="83:37" pos:end="83:42"><operator pos:start="83:37" pos:end="83:37">&amp;</operator><name pos:start="83:38" pos:end="83:42"><name pos:start="83:38" pos:end="83:38">s</name><operator pos:start="83:39" pos:end="83:40">-&gt;</operator><name pos:start="83:41" pos:end="83:42">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="85:5" pos:end="97:5"><if pos:start="85:5" pos:end="97:5">if <condition pos:start="85:8" pos:end="85:93">(<expr pos:start="85:9" pos:end="85:92"><operator pos:start="85:9" pos:end="85:9">(</operator><name pos:start="85:10" pos:end="85:17"><name pos:start="85:10" pos:end="85:10">s</name><operator pos:start="85:11" pos:end="85:12">-&gt;</operator><name pos:start="85:13" pos:end="85:17">width</name></name> <operator pos:start="85:19" pos:end="85:19">&gt;</operator> <literal type="number" pos:start="85:21" pos:end="85:25">30000</literal><operator pos:start="85:26" pos:end="85:26">)</operator> <operator pos:start="85:28" pos:end="85:29">&amp;&amp;</operator> <operator pos:start="85:31" pos:end="85:31">(</operator><name pos:start="85:32" pos:end="85:62"><name pos:start="85:32" pos:end="85:32">s</name><operator pos:start="85:33" pos:end="85:34">-&gt;</operator><name pos:start="85:35" pos:end="85:39">avctx</name><operator pos:start="85:40" pos:end="85:41">-&gt;</operator><name pos:start="85:42" pos:end="85:62">strict_std_compliance</name></name> <operator pos:start="85:64" pos:end="85:64">&gt;</operator> <name pos:start="85:66" pos:end="85:91">FF_COMPLIANCE_EXPERIMENTAL</name><operator pos:start="85:92" pos:end="85:92">)</operator></expr>)</condition> <block pos:start="85:95" pos:end="97:5">{<block_content pos:start="87:9" pos:end="95:36">

        <expr_stmt pos:start="87:9" pos:end="93:43"><expr pos:start="87:9" pos:end="93:42"><call pos:start="87:9" pos:end="93:42"><name pos:start="87:9" pos:end="87:14">av_log</name><argument_list pos:start="87:15" pos:end="93:42">(<argument pos:start="87:16" pos:end="87:23"><expr pos:start="87:16" pos:end="87:23"><name pos:start="87:16" pos:end="87:23"><name pos:start="87:16" pos:end="87:16">s</name><operator pos:start="87:17" pos:end="87:18">-&gt;</operator><name pos:start="87:19" pos:end="87:23">avctx</name></name></expr></argument>, <argument pos:start="87:26" pos:end="87:37"><expr pos:start="87:26" pos:end="87:37"><name pos:start="87:26" pos:end="87:37">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="89:16" pos:end="91:73"><expr pos:start="89:16" pos:end="91:73"><literal type="string" pos:start="89:16" pos:end="89:52">"Width &gt; 30000 is experimental, add "</literal>

               <literal type="string" pos:start="91:16" pos:end="91:73">"'-strict %d' if you want to try to decode the picture.\n"</literal></expr></argument>,

               <argument pos:start="93:16" pos:end="93:41"><expr pos:start="93:16" pos:end="93:41"><name pos:start="93:16" pos:end="93:41">FF_COMPLIANCE_EXPERIMENTAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="95:9" pos:end="95:36">return <expr pos:start="95:16" pos:end="95:35"><name pos:start="95:16" pos:end="95:35">AVERROR_EXPERIMENTAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="101:5" pos:end="103:19"><if pos:start="101:5" pos:end="103:19">if <condition pos:start="101:8" pos:end="101:69">(<expr pos:start="101:9" pos:end="101:68"><operator pos:start="101:9" pos:end="101:9">(</operator><name pos:start="101:10" pos:end="101:12">ret</name> <operator pos:start="101:14" pos:end="101:14">=</operator> <call pos:start="101:16" pos:end="101:63"><name pos:start="101:16" pos:end="101:32">ff_set_dimensions</name><argument_list pos:start="101:33" pos:end="101:63">(<argument pos:start="101:34" pos:end="101:41"><expr pos:start="101:34" pos:end="101:41"><name pos:start="101:34" pos:end="101:41"><name pos:start="101:34" pos:end="101:34">s</name><operator pos:start="101:35" pos:end="101:36">-&gt;</operator><name pos:start="101:37" pos:end="101:41">avctx</name></name></expr></argument>, <argument pos:start="101:44" pos:end="101:51"><expr pos:start="101:44" pos:end="101:51"><name pos:start="101:44" pos:end="101:51"><name pos:start="101:44" pos:end="101:44">s</name><operator pos:start="101:45" pos:end="101:46">-&gt;</operator><name pos:start="101:47" pos:end="101:51">width</name></name></expr></argument>, <argument pos:start="101:54" pos:end="101:62"><expr pos:start="101:54" pos:end="101:62"><name pos:start="101:54" pos:end="101:62"><name pos:start="101:54" pos:end="101:54">s</name><operator pos:start="101:55" pos:end="101:56">-&gt;</operator><name pos:start="101:57" pos:end="101:62">height</name></name></expr></argument>)</argument_list></call><operator pos:start="101:64" pos:end="101:64">)</operator> <operator pos:start="101:66" pos:end="101:66">&lt;</operator> <literal type="number" pos:start="101:68" pos:end="101:68">0</literal></expr>)</condition><block type="pseudo" pos:start="103:9" pos:end="103:19"><block_content pos:start="103:9" pos:end="103:19">

        <return pos:start="103:9" pos:end="103:19">return <expr pos:start="103:16" pos:end="103:18"><name pos:start="103:16" pos:end="103:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="107:5" pos:end="107:52"><expr pos:start="107:5" pos:end="107:51"><name pos:start="107:5" pos:end="107:20"><name pos:start="107:5" pos:end="107:5">s</name><operator pos:start="107:6" pos:end="107:7">-&gt;</operator><name pos:start="107:8" pos:end="107:20">channel_depth</name></name> <operator pos:start="107:22" pos:end="107:22">=</operator> <call pos:start="107:24" pos:end="107:51"><name pos:start="107:24" pos:end="107:43">bytestream2_get_be16</name><argument_list pos:start="107:44" pos:end="107:51">(<argument pos:start="107:45" pos:end="107:50"><expr pos:start="107:45" pos:end="107:50"><operator pos:start="107:45" pos:end="107:45">&amp;</operator><name pos:start="107:46" pos:end="107:50"><name pos:start="107:46" pos:end="107:46">s</name><operator pos:start="107:47" pos:end="107:48">-&gt;</operator><name pos:start="107:49" pos:end="107:50">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="111:5" pos:end="111:46"><expr pos:start="111:5" pos:end="111:45"><name pos:start="111:5" pos:end="111:14">color_mode</name> <operator pos:start="111:16" pos:end="111:16">=</operator> <call pos:start="111:18" pos:end="111:45"><name pos:start="111:18" pos:end="111:37">bytestream2_get_be16</name><argument_list pos:start="111:38" pos:end="111:45">(<argument pos:start="111:39" pos:end="111:44"><expr pos:start="111:39" pos:end="111:44"><operator pos:start="111:39" pos:end="111:39">&amp;</operator><name pos:start="111:40" pos:end="111:44"><name pos:start="111:40" pos:end="111:40">s</name><operator pos:start="111:41" pos:end="111:42">-&gt;</operator><name pos:start="111:43" pos:end="111:44">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch pos:start="113:5" pos:end="169:5">switch <condition pos:start="113:12" pos:end="113:23">(<expr pos:start="113:13" pos:end="113:22"><name pos:start="113:13" pos:end="113:22">color_mode</name></expr>)</condition> <block pos:start="113:25" pos:end="169:5">{<block_content pos:start="115:5" pos:end="167:35">

    <case pos:start="115:5" pos:end="115:11">case <expr pos:start="115:10" pos:end="115:10"><literal type="number" pos:start="115:10" pos:end="115:10">0</literal></expr>:</case>

        <expr_stmt pos:start="117:9" pos:end="117:35"><expr pos:start="117:9" pos:end="117:34"><name pos:start="117:9" pos:end="117:21"><name pos:start="117:9" pos:end="117:9">s</name><operator pos:start="117:10" pos:end="117:11">-&gt;</operator><name pos:start="117:12" pos:end="117:21">color_mode</name></name> <operator pos:start="117:23" pos:end="117:23">=</operator> <name pos:start="117:25" pos:end="117:34">PSD_BITMAP</name></expr>;</expr_stmt>

        <break pos:start="119:9" pos:end="119:14">break;</break>

    <case pos:start="121:5" pos:end="121:11">case <expr pos:start="121:10" pos:end="121:10"><literal type="number" pos:start="121:10" pos:end="121:10">1</literal></expr>:</case>

        <expr_stmt pos:start="123:9" pos:end="123:38"><expr pos:start="123:9" pos:end="123:37"><name pos:start="123:9" pos:end="123:21"><name pos:start="123:9" pos:end="123:9">s</name><operator pos:start="123:10" pos:end="123:11">-&gt;</operator><name pos:start="123:12" pos:end="123:21">color_mode</name></name> <operator pos:start="123:23" pos:end="123:23">=</operator> <name pos:start="123:25" pos:end="123:37">PSD_GRAYSCALE</name></expr>;</expr_stmt>

        <break pos:start="125:9" pos:end="125:14">break;</break>

    <case pos:start="127:5" pos:end="127:11">case <expr pos:start="127:10" pos:end="127:10"><literal type="number" pos:start="127:10" pos:end="127:10">2</literal></expr>:</case>

        <expr_stmt pos:start="129:9" pos:end="129:36"><expr pos:start="129:9" pos:end="129:35"><name pos:start="129:9" pos:end="129:21"><name pos:start="129:9" pos:end="129:9">s</name><operator pos:start="129:10" pos:end="129:11">-&gt;</operator><name pos:start="129:12" pos:end="129:21">color_mode</name></name> <operator pos:start="129:23" pos:end="129:23">=</operator> <name pos:start="129:25" pos:end="129:35">PSD_INDEXED</name></expr>;</expr_stmt>

        <break pos:start="131:9" pos:end="131:14">break;</break>

    <case pos:start="133:5" pos:end="133:11">case <expr pos:start="133:10" pos:end="133:10"><literal type="number" pos:start="133:10" pos:end="133:10">3</literal></expr>:</case>

        <expr_stmt pos:start="135:9" pos:end="135:32"><expr pos:start="135:9" pos:end="135:31"><name pos:start="135:9" pos:end="135:21"><name pos:start="135:9" pos:end="135:9">s</name><operator pos:start="135:10" pos:end="135:11">-&gt;</operator><name pos:start="135:12" pos:end="135:21">color_mode</name></name> <operator pos:start="135:23" pos:end="135:23">=</operator> <name pos:start="135:25" pos:end="135:31">PSD_RGB</name></expr>;</expr_stmt>

        <break pos:start="137:9" pos:end="137:14">break;</break>

    <case pos:start="139:5" pos:end="139:11">case <expr pos:start="139:10" pos:end="139:10"><literal type="number" pos:start="139:10" pos:end="139:10">4</literal></expr>:</case>

        <expr_stmt pos:start="141:9" pos:end="141:33"><expr pos:start="141:9" pos:end="141:32"><name pos:start="141:9" pos:end="141:21"><name pos:start="141:9" pos:end="141:9">s</name><operator pos:start="141:10" pos:end="141:11">-&gt;</operator><name pos:start="141:12" pos:end="141:21">color_mode</name></name> <operator pos:start="141:23" pos:end="141:23">=</operator> <name pos:start="141:25" pos:end="141:32">PSD_CMYK</name></expr>;</expr_stmt>

        <break pos:start="143:9" pos:end="143:14">break;</break>

    <case pos:start="145:5" pos:end="145:11">case <expr pos:start="145:10" pos:end="145:10"><literal type="number" pos:start="145:10" pos:end="145:10">7</literal></expr>:</case>

        <expr_stmt pos:start="147:9" pos:end="147:41"><expr pos:start="147:9" pos:end="147:40"><name pos:start="147:9" pos:end="147:21"><name pos:start="147:9" pos:end="147:9">s</name><operator pos:start="147:10" pos:end="147:11">-&gt;</operator><name pos:start="147:12" pos:end="147:21">color_mode</name></name> <operator pos:start="147:23" pos:end="147:23">=</operator> <name pos:start="147:25" pos:end="147:40">PSD_MULTICHANNEL</name></expr>;</expr_stmt>

        <break pos:start="149:9" pos:end="149:14">break;</break>

    <case pos:start="151:5" pos:end="151:11">case <expr pos:start="151:10" pos:end="151:10"><literal type="number" pos:start="151:10" pos:end="151:10">8</literal></expr>:</case>

        <expr_stmt pos:start="153:9" pos:end="153:36"><expr pos:start="153:9" pos:end="153:35"><name pos:start="153:9" pos:end="153:21"><name pos:start="153:9" pos:end="153:9">s</name><operator pos:start="153:10" pos:end="153:11">-&gt;</operator><name pos:start="153:12" pos:end="153:21">color_mode</name></name> <operator pos:start="153:23" pos:end="153:23">=</operator> <name pos:start="153:25" pos:end="153:35">PSD_DUOTONE</name></expr>;</expr_stmt>

        <break pos:start="155:9" pos:end="155:14">break;</break>

    <case pos:start="157:5" pos:end="157:11">case <expr pos:start="157:10" pos:end="157:10"><literal type="number" pos:start="157:10" pos:end="157:10">9</literal></expr>:</case>

        <expr_stmt pos:start="159:9" pos:end="159:32"><expr pos:start="159:9" pos:end="159:31"><name pos:start="159:9" pos:end="159:21"><name pos:start="159:9" pos:end="159:9">s</name><operator pos:start="159:10" pos:end="159:11">-&gt;</operator><name pos:start="159:12" pos:end="159:21">color_mode</name></name> <operator pos:start="159:23" pos:end="159:23">=</operator> <name pos:start="159:25" pos:end="159:31">PSD_LAB</name></expr>;</expr_stmt>

        <break pos:start="161:9" pos:end="161:14">break;</break>

    <default pos:start="163:5" pos:end="163:12">default:</default>

        <expr_stmt pos:start="165:9" pos:end="165:79"><expr pos:start="165:9" pos:end="165:78"><call pos:start="165:9" pos:end="165:78"><name pos:start="165:9" pos:end="165:14">av_log</name><argument_list pos:start="165:15" pos:end="165:78">(<argument pos:start="165:16" pos:end="165:23"><expr pos:start="165:16" pos:end="165:23"><name pos:start="165:16" pos:end="165:23"><name pos:start="165:16" pos:end="165:16">s</name><operator pos:start="165:17" pos:end="165:18">-&gt;</operator><name pos:start="165:19" pos:end="165:23">avctx</name></name></expr></argument>, <argument pos:start="165:26" pos:end="165:37"><expr pos:start="165:26" pos:end="165:37"><name pos:start="165:26" pos:end="165:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="165:40" pos:end="165:65"><expr pos:start="165:40" pos:end="165:65"><literal type="string" pos:start="165:40" pos:end="165:65">"Unknown color mode %d.\n"</literal></expr></argument>, <argument pos:start="165:68" pos:end="165:77"><expr pos:start="165:68" pos:end="165:77"><name pos:start="165:68" pos:end="165:77">color_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="167:9" pos:end="167:35">return <expr pos:start="167:16" pos:end="167:34"><name pos:start="167:16" pos:end="167:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></switch>



    <comment type="block" pos:start="173:5" pos:end="173:24">/* color map data */</comment>

    <expr_stmt pos:start="175:5" pos:end="175:47"><expr pos:start="175:5" pos:end="175:46"><name pos:start="175:5" pos:end="175:15">len_section</name> <operator pos:start="175:17" pos:end="175:17">=</operator> <call pos:start="175:19" pos:end="175:46"><name pos:start="175:19" pos:end="175:38">bytestream2_get_be32</name><argument_list pos:start="175:39" pos:end="175:46">(<argument pos:start="175:40" pos:end="175:45"><expr pos:start="175:40" pos:end="175:45"><operator pos:start="175:40" pos:end="175:40">&amp;</operator><name pos:start="175:41" pos:end="175:45"><name pos:start="175:41" pos:end="175:41">s</name><operator pos:start="175:42" pos:end="175:43">-&gt;</operator><name pos:start="175:44" pos:end="175:45">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="177:5" pos:end="183:5"><if pos:start="177:5" pos:end="183:5">if <condition pos:start="177:8" pos:end="177:24">(<expr pos:start="177:9" pos:end="177:23"><name pos:start="177:9" pos:end="177:19">len_section</name> <operator pos:start="177:21" pos:end="177:21">&lt;</operator> <literal type="number" pos:start="177:23" pos:end="177:23">0</literal></expr>)</condition> <block pos:start="177:26" pos:end="183:5">{<block_content pos:start="179:9" pos:end="181:35">

        <expr_stmt pos:start="179:9" pos:end="179:86"><expr pos:start="179:9" pos:end="179:85"><call pos:start="179:9" pos:end="179:85"><name pos:start="179:9" pos:end="179:14">av_log</name><argument_list pos:start="179:15" pos:end="179:85">(<argument pos:start="179:16" pos:end="179:23"><expr pos:start="179:16" pos:end="179:23"><name pos:start="179:16" pos:end="179:23"><name pos:start="179:16" pos:end="179:16">s</name><operator pos:start="179:17" pos:end="179:18">-&gt;</operator><name pos:start="179:19" pos:end="179:23">avctx</name></name></expr></argument>, <argument pos:start="179:26" pos:end="179:37"><expr pos:start="179:26" pos:end="179:37"><name pos:start="179:26" pos:end="179:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="179:40" pos:end="179:84"><expr pos:start="179:40" pos:end="179:84"><literal type="string" pos:start="179:40" pos:end="179:84">"Negative size for color map data section.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="181:9" pos:end="181:35">return <expr pos:start="181:16" pos:end="181:34"><name pos:start="181:16" pos:end="181:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="187:5" pos:end="193:5"><if pos:start="187:5" pos:end="193:5">if <condition pos:start="187:8" pos:end="187:63">(<expr pos:start="187:9" pos:end="187:62"><call pos:start="187:9" pos:end="187:42"><name pos:start="187:9" pos:end="187:34">bytestream2_get_bytes_left</name><argument_list pos:start="187:35" pos:end="187:42">(<argument pos:start="187:36" pos:end="187:41"><expr pos:start="187:36" pos:end="187:41"><operator pos:start="187:36" pos:end="187:36">&amp;</operator><name pos:start="187:37" pos:end="187:41"><name pos:start="187:37" pos:end="187:37">s</name><operator pos:start="187:38" pos:end="187:39">-&gt;</operator><name pos:start="187:40" pos:end="187:41">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="187:44" pos:end="187:44">&lt;</operator> <operator pos:start="187:46" pos:end="187:46">(</operator><name pos:start="187:47" pos:end="187:57">len_section</name> <operator pos:start="187:59" pos:end="187:59">+</operator> <literal type="number" pos:start="187:61" pos:end="187:61">4</literal><operator pos:start="187:62" pos:end="187:62">)</operator></expr>)</condition> <block pos:start="187:65" pos:end="193:5">{<block_content pos:start="189:9" pos:end="191:35"> <comment type="block" pos:start="187:67" pos:end="187:100">/* section and len next section */</comment>

        <expr_stmt pos:start="189:9" pos:end="189:61"><expr pos:start="189:9" pos:end="189:60"><call pos:start="189:9" pos:end="189:60"><name pos:start="189:9" pos:end="189:14">av_log</name><argument_list pos:start="189:15" pos:end="189:60">(<argument pos:start="189:16" pos:end="189:23"><expr pos:start="189:16" pos:end="189:23"><name pos:start="189:16" pos:end="189:23"><name pos:start="189:16" pos:end="189:16">s</name><operator pos:start="189:17" pos:end="189:18">-&gt;</operator><name pos:start="189:19" pos:end="189:23">avctx</name></name></expr></argument>, <argument pos:start="189:26" pos:end="189:37"><expr pos:start="189:26" pos:end="189:37"><name pos:start="189:26" pos:end="189:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="189:40" pos:end="189:59"><expr pos:start="189:40" pos:end="189:59"><literal type="string" pos:start="189:40" pos:end="189:59">"Incomplete file.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="191:9" pos:end="191:35">return <expr pos:start="191:16" pos:end="191:34"><name pos:start="191:16" pos:end="191:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="195:5" pos:end="195:42"><expr pos:start="195:5" pos:end="195:41"><call pos:start="195:5" pos:end="195:41"><name pos:start="195:5" pos:end="195:20">bytestream2_skip</name><argument_list pos:start="195:21" pos:end="195:41">(<argument pos:start="195:22" pos:end="195:27"><expr pos:start="195:22" pos:end="195:27"><operator pos:start="195:22" pos:end="195:22">&amp;</operator><name pos:start="195:23" pos:end="195:27"><name pos:start="195:23" pos:end="195:23">s</name><operator pos:start="195:24" pos:end="195:25">-&gt;</operator><name pos:start="195:26" pos:end="195:27">gb</name></name></expr></argument>, <argument pos:start="195:30" pos:end="195:40"><expr pos:start="195:30" pos:end="195:40"><name pos:start="195:30" pos:end="195:40">len_section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="199:5" pos:end="199:26">/* image ressources */</comment>

    <expr_stmt pos:start="201:5" pos:end="201:47"><expr pos:start="201:5" pos:end="201:46"><name pos:start="201:5" pos:end="201:15">len_section</name> <operator pos:start="201:17" pos:end="201:17">=</operator> <call pos:start="201:19" pos:end="201:46"><name pos:start="201:19" pos:end="201:38">bytestream2_get_be32</name><argument_list pos:start="201:39" pos:end="201:46">(<argument pos:start="201:40" pos:end="201:45"><expr pos:start="201:40" pos:end="201:45"><operator pos:start="201:40" pos:end="201:40">&amp;</operator><name pos:start="201:41" pos:end="201:45"><name pos:start="201:41" pos:end="201:41">s</name><operator pos:start="201:42" pos:end="201:43">-&gt;</operator><name pos:start="201:44" pos:end="201:45">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="203:5" pos:end="209:5"><if pos:start="203:5" pos:end="209:5">if <condition pos:start="203:8" pos:end="203:24">(<expr pos:start="203:9" pos:end="203:23"><name pos:start="203:9" pos:end="203:19">len_section</name> <operator pos:start="203:21" pos:end="203:21">&lt;</operator> <literal type="number" pos:start="203:23" pos:end="203:23">0</literal></expr>)</condition> <block pos:start="203:26" pos:end="209:5">{<block_content pos:start="205:9" pos:end="207:35">

        <expr_stmt pos:start="205:9" pos:end="205:88"><expr pos:start="205:9" pos:end="205:87"><call pos:start="205:9" pos:end="205:87"><name pos:start="205:9" pos:end="205:14">av_log</name><argument_list pos:start="205:15" pos:end="205:87">(<argument pos:start="205:16" pos:end="205:23"><expr pos:start="205:16" pos:end="205:23"><name pos:start="205:16" pos:end="205:23"><name pos:start="205:16" pos:end="205:16">s</name><operator pos:start="205:17" pos:end="205:18">-&gt;</operator><name pos:start="205:19" pos:end="205:23">avctx</name></name></expr></argument>, <argument pos:start="205:26" pos:end="205:37"><expr pos:start="205:26" pos:end="205:37"><name pos:start="205:26" pos:end="205:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="205:40" pos:end="205:86"><expr pos:start="205:40" pos:end="205:86"><literal type="string" pos:start="205:40" pos:end="205:86">"Negative size for image ressources section.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="207:9" pos:end="207:35">return <expr pos:start="207:16" pos:end="207:34"><name pos:start="207:16" pos:end="207:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="213:5" pos:end="219:5"><if pos:start="213:5" pos:end="219:5">if <condition pos:start="213:8" pos:end="213:63">(<expr pos:start="213:9" pos:end="213:62"><call pos:start="213:9" pos:end="213:42"><name pos:start="213:9" pos:end="213:34">bytestream2_get_bytes_left</name><argument_list pos:start="213:35" pos:end="213:42">(<argument pos:start="213:36" pos:end="213:41"><expr pos:start="213:36" pos:end="213:41"><operator pos:start="213:36" pos:end="213:36">&amp;</operator><name pos:start="213:37" pos:end="213:41"><name pos:start="213:37" pos:end="213:37">s</name><operator pos:start="213:38" pos:end="213:39">-&gt;</operator><name pos:start="213:40" pos:end="213:41">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="213:44" pos:end="213:44">&lt;</operator> <operator pos:start="213:46" pos:end="213:46">(</operator><name pos:start="213:47" pos:end="213:57">len_section</name> <operator pos:start="213:59" pos:end="213:59">+</operator> <literal type="number" pos:start="213:61" pos:end="213:61">4</literal><operator pos:start="213:62" pos:end="213:62">)</operator></expr>)</condition> <block pos:start="213:65" pos:end="219:5">{<block_content pos:start="215:9" pos:end="217:35"> <comment type="block" pos:start="213:67" pos:end="213:100">/* section and len next section */</comment>

        <expr_stmt pos:start="215:9" pos:end="215:61"><expr pos:start="215:9" pos:end="215:60"><call pos:start="215:9" pos:end="215:60"><name pos:start="215:9" pos:end="215:14">av_log</name><argument_list pos:start="215:15" pos:end="215:60">(<argument pos:start="215:16" pos:end="215:23"><expr pos:start="215:16" pos:end="215:23"><name pos:start="215:16" pos:end="215:23"><name pos:start="215:16" pos:end="215:16">s</name><operator pos:start="215:17" pos:end="215:18">-&gt;</operator><name pos:start="215:19" pos:end="215:23">avctx</name></name></expr></argument>, <argument pos:start="215:26" pos:end="215:37"><expr pos:start="215:26" pos:end="215:37"><name pos:start="215:26" pos:end="215:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="215:40" pos:end="215:59"><expr pos:start="215:40" pos:end="215:59"><literal type="string" pos:start="215:40" pos:end="215:59">"Incomplete file.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="217:9" pos:end="217:35">return <expr pos:start="217:16" pos:end="217:34"><name pos:start="217:16" pos:end="217:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="221:5" pos:end="221:42"><expr pos:start="221:5" pos:end="221:41"><call pos:start="221:5" pos:end="221:41"><name pos:start="221:5" pos:end="221:20">bytestream2_skip</name><argument_list pos:start="221:21" pos:end="221:41">(<argument pos:start="221:22" pos:end="221:27"><expr pos:start="221:22" pos:end="221:27"><operator pos:start="221:22" pos:end="221:22">&amp;</operator><name pos:start="221:23" pos:end="221:27"><name pos:start="221:23" pos:end="221:23">s</name><operator pos:start="221:24" pos:end="221:25">-&gt;</operator><name pos:start="221:26" pos:end="221:27">gb</name></name></expr></argument>, <argument pos:start="221:30" pos:end="221:40"><expr pos:start="221:30" pos:end="221:40"><name pos:start="221:30" pos:end="221:40">len_section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="225:5" pos:end="225:26">/* layers and masks */</comment>

    <expr_stmt pos:start="227:5" pos:end="227:47"><expr pos:start="227:5" pos:end="227:46"><name pos:start="227:5" pos:end="227:15">len_section</name> <operator pos:start="227:17" pos:end="227:17">=</operator> <call pos:start="227:19" pos:end="227:46"><name pos:start="227:19" pos:end="227:38">bytestream2_get_be32</name><argument_list pos:start="227:39" pos:end="227:46">(<argument pos:start="227:40" pos:end="227:45"><expr pos:start="227:40" pos:end="227:45"><operator pos:start="227:40" pos:end="227:40">&amp;</operator><name pos:start="227:41" pos:end="227:45"><name pos:start="227:41" pos:end="227:41">s</name><operator pos:start="227:42" pos:end="227:43">-&gt;</operator><name pos:start="227:44" pos:end="227:45">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="229:5" pos:end="235:5"><if pos:start="229:5" pos:end="235:5">if <condition pos:start="229:8" pos:end="229:24">(<expr pos:start="229:9" pos:end="229:23"><name pos:start="229:9" pos:end="229:19">len_section</name> <operator pos:start="229:21" pos:end="229:21">&lt;</operator> <literal type="number" pos:start="229:23" pos:end="229:23">0</literal></expr>)</condition> <block pos:start="229:26" pos:end="235:5">{<block_content pos:start="231:9" pos:end="233:35">

        <expr_stmt pos:start="231:9" pos:end="231:93"><expr pos:start="231:9" pos:end="231:92"><call pos:start="231:9" pos:end="231:92"><name pos:start="231:9" pos:end="231:14">av_log</name><argument_list pos:start="231:15" pos:end="231:92">(<argument pos:start="231:16" pos:end="231:23"><expr pos:start="231:16" pos:end="231:23"><name pos:start="231:16" pos:end="231:23"><name pos:start="231:16" pos:end="231:16">s</name><operator pos:start="231:17" pos:end="231:18">-&gt;</operator><name pos:start="231:19" pos:end="231:23">avctx</name></name></expr></argument>, <argument pos:start="231:26" pos:end="231:37"><expr pos:start="231:26" pos:end="231:37"><name pos:start="231:26" pos:end="231:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="231:40" pos:end="231:91"><expr pos:start="231:40" pos:end="231:91"><literal type="string" pos:start="231:40" pos:end="231:91">"Negative size for layers and masks data section.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="233:9" pos:end="233:35">return <expr pos:start="233:16" pos:end="233:34"><name pos:start="233:16" pos:end="233:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="239:5" pos:end="245:5"><if pos:start="239:5" pos:end="245:5">if <condition pos:start="239:8" pos:end="239:57">(<expr pos:start="239:9" pos:end="239:56"><call pos:start="239:9" pos:end="239:42"><name pos:start="239:9" pos:end="239:34">bytestream2_get_bytes_left</name><argument_list pos:start="239:35" pos:end="239:42">(<argument pos:start="239:36" pos:end="239:41"><expr pos:start="239:36" pos:end="239:41"><operator pos:start="239:36" pos:end="239:36">&amp;</operator><name pos:start="239:37" pos:end="239:41"><name pos:start="239:37" pos:end="239:37">s</name><operator pos:start="239:38" pos:end="239:39">-&gt;</operator><name pos:start="239:40" pos:end="239:41">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="239:44" pos:end="239:44">&lt;</operator> <name pos:start="239:46" pos:end="239:56">len_section</name></expr>)</condition> <block pos:start="239:59" pos:end="245:5">{<block_content pos:start="241:9" pos:end="243:35">

        <expr_stmt pos:start="241:9" pos:end="241:61"><expr pos:start="241:9" pos:end="241:60"><call pos:start="241:9" pos:end="241:60"><name pos:start="241:9" pos:end="241:14">av_log</name><argument_list pos:start="241:15" pos:end="241:60">(<argument pos:start="241:16" pos:end="241:23"><expr pos:start="241:16" pos:end="241:23"><name pos:start="241:16" pos:end="241:23"><name pos:start="241:16" pos:end="241:16">s</name><operator pos:start="241:17" pos:end="241:18">-&gt;</operator><name pos:start="241:19" pos:end="241:23">avctx</name></name></expr></argument>, <argument pos:start="241:26" pos:end="241:37"><expr pos:start="241:26" pos:end="241:37"><name pos:start="241:26" pos:end="241:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="241:40" pos:end="241:59"><expr pos:start="241:40" pos:end="241:59"><literal type="string" pos:start="241:40" pos:end="241:59">"Incomplete file.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="243:9" pos:end="243:35">return <expr pos:start="243:16" pos:end="243:34"><name pos:start="243:16" pos:end="243:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="247:5" pos:end="247:42"><expr pos:start="247:5" pos:end="247:41"><call pos:start="247:5" pos:end="247:41"><name pos:start="247:5" pos:end="247:20">bytestream2_skip</name><argument_list pos:start="247:21" pos:end="247:41">(<argument pos:start="247:22" pos:end="247:27"><expr pos:start="247:22" pos:end="247:27"><operator pos:start="247:22" pos:end="247:22">&amp;</operator><name pos:start="247:23" pos:end="247:27"><name pos:start="247:23" pos:end="247:23">s</name><operator pos:start="247:24" pos:end="247:25">-&gt;</operator><name pos:start="247:26" pos:end="247:27">gb</name></name></expr></argument>, <argument pos:start="247:30" pos:end="247:40"><expr pos:start="247:30" pos:end="247:40"><name pos:start="247:30" pos:end="247:40">len_section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="251:5" pos:end="251:23">/* image section */</comment>

    <if_stmt pos:start="253:5" pos:end="259:5"><if pos:start="253:5" pos:end="259:5">if <condition pos:start="253:8" pos:end="253:47">(<expr pos:start="253:9" pos:end="253:46"><call pos:start="253:9" pos:end="253:42"><name pos:start="253:9" pos:end="253:34">bytestream2_get_bytes_left</name><argument_list pos:start="253:35" pos:end="253:42">(<argument pos:start="253:36" pos:end="253:41"><expr pos:start="253:36" pos:end="253:41"><operator pos:start="253:36" pos:end="253:36">&amp;</operator><name pos:start="253:37" pos:end="253:41"><name pos:start="253:37" pos:end="253:37">s</name><operator pos:start="253:38" pos:end="253:39">-&gt;</operator><name pos:start="253:40" pos:end="253:41">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="253:44" pos:end="253:44">&lt;</operator> <literal type="number" pos:start="253:46" pos:end="253:46">2</literal></expr>)</condition> <block pos:start="253:49" pos:end="259:5">{<block_content pos:start="255:9" pos:end="257:35">

        <expr_stmt pos:start="255:9" pos:end="255:77"><expr pos:start="255:9" pos:end="255:76"><call pos:start="255:9" pos:end="255:76"><name pos:start="255:9" pos:end="255:14">av_log</name><argument_list pos:start="255:15" pos:end="255:76">(<argument pos:start="255:16" pos:end="255:23"><expr pos:start="255:16" pos:end="255:23"><name pos:start="255:16" pos:end="255:23"><name pos:start="255:16" pos:end="255:16">s</name><operator pos:start="255:17" pos:end="255:18">-&gt;</operator><name pos:start="255:19" pos:end="255:23">avctx</name></name></expr></argument>, <argument pos:start="255:26" pos:end="255:37"><expr pos:start="255:26" pos:end="255:37"><name pos:start="255:26" pos:end="255:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="255:40" pos:end="255:75"><expr pos:start="255:40" pos:end="255:75"><literal type="string" pos:start="255:40" pos:end="255:75">"File without image data section.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="257:9" pos:end="257:35">return <expr pos:start="257:16" pos:end="257:34"><name pos:start="257:16" pos:end="257:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="263:5" pos:end="263:50"><expr pos:start="263:5" pos:end="263:49"><name pos:start="263:5" pos:end="263:18"><name pos:start="263:5" pos:end="263:5">s</name><operator pos:start="263:6" pos:end="263:7">-&gt;</operator><name pos:start="263:8" pos:end="263:18">compression</name></name> <operator pos:start="263:20" pos:end="263:20">=</operator> <call pos:start="263:22" pos:end="263:49"><name pos:start="263:22" pos:end="263:41">bytestream2_get_be16</name><argument_list pos:start="263:42" pos:end="263:49">(<argument pos:start="263:43" pos:end="263:48"><expr pos:start="263:43" pos:end="263:48"><operator pos:start="263:43" pos:end="263:43">&amp;</operator><name pos:start="263:44" pos:end="263:48"><name pos:start="263:44" pos:end="263:44">s</name><operator pos:start="263:45" pos:end="263:46">-&gt;</operator><name pos:start="263:47" pos:end="263:48">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch pos:start="265:5" pos:end="295:5">switch <condition pos:start="265:12" pos:end="265:27">(<expr pos:start="265:13" pos:end="265:26"><name pos:start="265:13" pos:end="265:26"><name pos:start="265:13" pos:end="265:13">s</name><operator pos:start="265:14" pos:end="265:15">-&gt;</operator><name pos:start="265:16" pos:end="265:26">compression</name></name></expr>)</condition> <block pos:start="265:29" pos:end="295:5">{<block_content pos:start="267:5" pos:end="293:35">

    <case pos:start="267:5" pos:end="267:11">case <expr pos:start="267:10" pos:end="267:10"><literal type="number" pos:start="267:10" pos:end="267:10">0</literal></expr>:</case>

    <case pos:start="269:5" pos:end="269:11">case <expr pos:start="269:10" pos:end="269:10"><literal type="number" pos:start="269:10" pos:end="269:10">1</literal></expr>:</case>

        <break pos:start="271:9" pos:end="271:14">break;</break>

    <case pos:start="273:5" pos:end="273:11">case <expr pos:start="273:10" pos:end="273:10"><literal type="number" pos:start="273:10" pos:end="273:10">2</literal></expr>:</case>

        <expr_stmt pos:start="275:9" pos:end="275:77"><expr pos:start="275:9" pos:end="275:76"><call pos:start="275:9" pos:end="275:76"><name pos:start="275:9" pos:end="275:29">avpriv_request_sample</name><argument_list pos:start="275:30" pos:end="275:76">(<argument pos:start="275:31" pos:end="275:38"><expr pos:start="275:31" pos:end="275:38"><name pos:start="275:31" pos:end="275:38"><name pos:start="275:31" pos:end="275:31">s</name><operator pos:start="275:32" pos:end="275:33">-&gt;</operator><name pos:start="275:34" pos:end="275:38">avctx</name></name></expr></argument>, <argument pos:start="275:41" pos:end="275:75"><expr pos:start="275:41" pos:end="275:75"><literal type="string" pos:start="275:41" pos:end="275:75">"ZIP without predictor compression"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="277:9" pos:end="277:36">return <expr pos:start="277:16" pos:end="277:35"><name pos:start="277:16" pos:end="277:35">AVERROR_PATCHWELCOME</name></expr>;</return>

        <break pos:start="279:9" pos:end="279:14">break;</break>

    <case pos:start="281:5" pos:end="281:11">case <expr pos:start="281:10" pos:end="281:10"><literal type="number" pos:start="281:10" pos:end="281:10">3</literal></expr>:</case>

        <expr_stmt pos:start="283:9" pos:end="283:74"><expr pos:start="283:9" pos:end="283:73"><call pos:start="283:9" pos:end="283:73"><name pos:start="283:9" pos:end="283:29">avpriv_request_sample</name><argument_list pos:start="283:30" pos:end="283:73">(<argument pos:start="283:31" pos:end="283:38"><expr pos:start="283:31" pos:end="283:38"><name pos:start="283:31" pos:end="283:38"><name pos:start="283:31" pos:end="283:31">s</name><operator pos:start="283:32" pos:end="283:33">-&gt;</operator><name pos:start="283:34" pos:end="283:38">avctx</name></name></expr></argument>, <argument pos:start="283:41" pos:end="283:72"><expr pos:start="283:41" pos:end="283:72"><literal type="string" pos:start="283:41" pos:end="283:72">"ZIP with predictor compression"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="285:9" pos:end="285:36">return <expr pos:start="285:16" pos:end="285:35"><name pos:start="285:16" pos:end="285:35">AVERROR_PATCHWELCOME</name></expr>;</return>

        <break pos:start="287:9" pos:end="287:14">break;</break>

    <default pos:start="289:5" pos:end="289:12">default:</default>

        <expr_stmt pos:start="291:9" pos:end="291:81"><expr pos:start="291:9" pos:end="291:80"><call pos:start="291:9" pos:end="291:80"><name pos:start="291:9" pos:end="291:14">av_log</name><argument_list pos:start="291:15" pos:end="291:80">(<argument pos:start="291:16" pos:end="291:23"><expr pos:start="291:16" pos:end="291:23"><name pos:start="291:16" pos:end="291:23"><name pos:start="291:16" pos:end="291:16">s</name><operator pos:start="291:17" pos:end="291:18">-&gt;</operator><name pos:start="291:19" pos:end="291:23">avctx</name></name></expr></argument>, <argument pos:start="291:26" pos:end="291:37"><expr pos:start="291:26" pos:end="291:37"><name pos:start="291:26" pos:end="291:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="291:40" pos:end="291:66"><expr pos:start="291:40" pos:end="291:66"><literal type="string" pos:start="291:40" pos:end="291:66">"Unknown compression %d.\n"</literal></expr></argument>, <argument pos:start="291:69" pos:end="291:79"><expr pos:start="291:69" pos:end="291:79"><name pos:start="291:69" pos:end="291:79">compression</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="293:9" pos:end="293:35">return <expr pos:start="293:16" pos:end="293:34"><name pos:start="293:16" pos:end="293:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></switch>



    <return pos:start="299:5" pos:end="299:15">return <expr pos:start="299:12" pos:end="299:14"><name pos:start="299:12" pos:end="299:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
