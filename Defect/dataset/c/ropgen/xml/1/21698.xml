<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21698.c" pos:tabs="8"><function pos:start="1:1" pos:end="107:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">mmu_translate_region</name><parameter_list pos:start="1:32" pos:end="7:41">(<parameter pos:start="1:33" pos:end="1:50"><decl pos:start="1:33" pos:end="1:50"><type pos:start="1:33" pos:end="1:50"><name pos:start="1:33" pos:end="1:45">CPUS390XState</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:50">env</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:70"><decl pos:start="1:53" pos:end="1:70"><type pos:start="1:53" pos:end="1:70"><name pos:start="1:53" pos:end="1:64">target_ulong</name></type> <name pos:start="1:66" pos:end="1:70">vaddr</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:44"><decl pos:start="3:33" pos:end="3:44"><type pos:start="3:33" pos:end="3:44"><name pos:start="3:33" pos:end="3:40">uint64_t</name></type> <name pos:start="3:42" pos:end="3:44">asc</name></decl></parameter>, <parameter pos:start="3:47" pos:end="3:60"><decl pos:start="3:47" pos:end="3:60"><type pos:start="3:47" pos:end="3:60"><name pos:start="3:47" pos:end="3:54">uint64_t</name></type> <name pos:start="3:56" pos:end="3:60">entry</name></decl></parameter>, <parameter pos:start="3:63" pos:end="3:71"><decl pos:start="3:63" pos:end="3:71"><type pos:start="3:63" pos:end="3:71"><name pos:start="3:63" pos:end="3:65">int</name></type> <name pos:start="3:67" pos:end="3:71">level</name></decl></parameter>,

                                <parameter pos:start="5:33" pos:end="5:51"><decl pos:start="5:33" pos:end="5:51"><type pos:start="5:33" pos:end="5:51"><name pos:start="5:33" pos:end="5:44">target_ulong</name> <modifier pos:start="5:46" pos:end="5:46">*</modifier></type><name pos:start="5:47" pos:end="5:51">raddr</name></decl></parameter>, <parameter pos:start="5:54" pos:end="5:63"><decl pos:start="5:54" pos:end="5:63"><type pos:start="5:54" pos:end="5:63"><name pos:start="5:54" pos:end="5:56">int</name> <modifier pos:start="5:58" pos:end="5:58">*</modifier></type><name pos:start="5:59" pos:end="5:63">flags</name></decl></parameter>, <parameter pos:start="5:66" pos:end="5:71"><decl pos:start="5:66" pos:end="5:71"><type pos:start="5:66" pos:end="5:71"><name pos:start="5:66" pos:end="5:68">int</name></type> <name pos:start="5:70" pos:end="5:71">rw</name></decl></parameter>,

                                <parameter pos:start="7:33" pos:end="7:40"><decl pos:start="7:33" pos:end="7:40"><type pos:start="7:33" pos:end="7:40"><name pos:start="7:33" pos:end="7:36">bool</name></type> <name pos:start="7:38" pos:end="7:40">exc</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="107:1">{<block_content pos:start="11:5" pos:end="105:55">

    <decl_stmt pos:start="11:5" pos:end="11:46"><decl pos:start="11:5" pos:end="11:45"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">CPUState</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:16">cs</name> <init pos:start="11:18" pos:end="11:45">= <expr pos:start="11:20" pos:end="11:45"><call pos:start="11:20" pos:end="11:45"><name pos:start="11:20" pos:end="11:22">CPU</name><argument_list pos:start="11:23" pos:end="11:45">(<argument pos:start="11:24" pos:end="11:44"><expr pos:start="11:24" pos:end="11:44"><call pos:start="11:24" pos:end="11:44"><name pos:start="11:24" pos:end="11:39">s390_env_get_cpu</name><argument_list pos:start="11:40" pos:end="11:44">(<argument pos:start="11:41" pos:end="11:43"><expr pos:start="11:41" pos:end="11:43"><name pos:start="11:41" pos:end="11:43">env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:37"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:19">origin</name></decl>, <decl pos:start="13:22" pos:end="13:25"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:22" pos:end="13:25">offs</name></decl>, <decl pos:start="13:28" pos:end="13:36"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:28" pos:end="13:36">new_entry</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="21:6"><decl pos:start="15:5" pos:end="21:5"><type pos:start="15:5" pos:end="15:13"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:13">int</name></type> <name pos:start="15:15" pos:end="15:22"><name pos:start="15:15" pos:end="15:19">pchks</name><index pos:start="15:20" pos:end="15:22">[<expr pos:start="15:21" pos:end="15:21"><literal type="number" pos:start="15:21" pos:end="15:21">4</literal></expr>]</index></name> <init pos:start="15:24" pos:end="21:5">= <expr pos:start="15:26" pos:end="21:5"><block pos:start="15:26" pos:end="21:5">{

        <expr pos:start="17:9" pos:end="17:25"><name pos:start="17:9" pos:end="17:25">PGM_SEGMENT_TRANS</name></expr>, <expr pos:start="17:28" pos:end="17:46"><name pos:start="17:28" pos:end="17:46">PGM_REG_THIRD_TRANS</name></expr>,

        <expr pos:start="19:9" pos:end="19:25"><name pos:start="19:9" pos:end="19:25">PGM_REG_SEC_TRANS</name></expr>, <expr pos:start="19:28" pos:end="19:46"><name pos:start="19:28" pos:end="19:46">PGM_REG_FIRST_TRANS</name></expr>

    }</block></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:56"><expr pos:start="25:5" pos:end="25:55"><call pos:start="25:5" pos:end="25:55"><name pos:start="25:5" pos:end="25:15">PTE_DPRINTF</name><argument_list pos:start="25:16" pos:end="25:55">(<argument pos:start="25:17" pos:end="25:37"><expr pos:start="25:17" pos:end="25:37"><literal type="string" pos:start="25:17" pos:end="25:25">"%s: 0x%"</literal> <name pos:start="25:27" pos:end="25:32">PRIx64</name> <literal type="string" pos:start="25:34" pos:end="25:37">"\n"</literal></expr></argument>, <argument pos:start="25:40" pos:end="25:47"><expr pos:start="25:40" pos:end="25:47"><name pos:start="25:40" pos:end="25:47">__func__</name></expr></argument>, <argument pos:start="25:50" pos:end="25:54"><expr pos:start="25:50" pos:end="25:54"><name pos:start="25:50" pos:end="25:54">entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:42"><expr pos:start="29:5" pos:end="29:41"><name pos:start="29:5" pos:end="29:10">origin</name> <operator pos:start="29:12" pos:end="29:12">=</operator> <name pos:start="29:14" pos:end="29:18">entry</name> <operator pos:start="29:20" pos:end="29:20">&amp;</operator> <name pos:start="29:22" pos:end="29:41">_REGION_ENTRY_ORIGIN</name></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:53"><expr pos:start="31:5" pos:end="31:52"><name pos:start="31:5" pos:end="31:8">offs</name> <operator pos:start="31:10" pos:end="31:10">=</operator> <operator pos:start="31:12" pos:end="31:12">(</operator><name pos:start="31:13" pos:end="31:17">vaddr</name> <operator pos:start="31:19" pos:end="31:20">&gt;&gt;</operator> <operator pos:start="31:22" pos:end="31:22">(</operator><literal type="number" pos:start="31:23" pos:end="31:26">17</literal> <operator pos:start="31:26" pos:end="31:26">+</operator> <literal type="number" pos:start="31:28" pos:end="31:29">11</literal> <operator pos:start="31:31" pos:end="31:31">*</operator> <name pos:start="31:33" pos:end="31:37">level</name> <operator pos:start="31:39" pos:end="31:39">/</operator> <literal type="number" pos:start="31:41" pos:end="31:41">4</literal><operator pos:start="31:42" pos:end="31:42">)</operator><operator pos:start="31:43" pos:end="31:43">)</operator> <operator pos:start="31:45" pos:end="31:45">&amp;</operator> <literal type="number" pos:start="31:47" pos:end="31:52">0x3ff8</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:48"><expr pos:start="35:5" pos:end="35:47"><name pos:start="35:5" pos:end="35:13">new_entry</name> <operator pos:start="35:15" pos:end="35:15">=</operator> <call pos:start="35:17" pos:end="35:47"><name pos:start="35:17" pos:end="35:24">ldq_phys</name><argument_list pos:start="35:25" pos:end="35:47">(<argument pos:start="35:26" pos:end="35:31"><expr pos:start="35:26" pos:end="35:31"><name pos:start="35:26" pos:end="35:31"><name pos:start="35:26" pos:end="35:27">cs</name><operator pos:start="35:28" pos:end="35:29">-&gt;</operator><name pos:start="35:30" pos:end="35:31">as</name></name></expr></argument>, <argument pos:start="35:34" pos:end="35:46"><expr pos:start="35:34" pos:end="35:46"><name pos:start="35:34" pos:end="35:39">origin</name> <operator pos:start="35:41" pos:end="35:41">+</operator> <name pos:start="35:43" pos:end="35:46">offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="39:51"><expr pos:start="37:5" pos:end="39:50"><call pos:start="37:5" pos:end="39:50"><name pos:start="37:5" pos:end="37:15">PTE_DPRINTF</name><argument_list pos:start="37:16" pos:end="39:50">(<argument pos:start="37:17" pos:end="37:73"><expr pos:start="37:17" pos:end="37:73"><literal type="string" pos:start="37:17" pos:end="37:25">"%s: 0x%"</literal> <name pos:start="37:27" pos:end="37:32">PRIx64</name> <literal type="string" pos:start="37:34" pos:end="37:41">" + 0x%"</literal> <name pos:start="37:43" pos:end="37:48">PRIx64</name> <literal type="string" pos:start="37:50" pos:end="37:61">" =&gt; 0x%016"</literal> <name pos:start="37:63" pos:end="37:68">PRIx64</name> <literal type="string" pos:start="37:70" pos:end="37:73">"\n"</literal></expr></argument>,

                <argument pos:start="39:17" pos:end="39:24"><expr pos:start="39:17" pos:end="39:24"><name pos:start="39:17" pos:end="39:24">__func__</name></expr></argument>, <argument pos:start="39:27" pos:end="39:32"><expr pos:start="39:27" pos:end="39:32"><name pos:start="39:27" pos:end="39:32">origin</name></expr></argument>, <argument pos:start="39:35" pos:end="39:38"><expr pos:start="39:35" pos:end="39:38"><name pos:start="39:35" pos:end="39:38">offs</name></expr></argument>, <argument pos:start="39:41" pos:end="39:49"><expr pos:start="39:41" pos:end="39:49"><name pos:start="39:41" pos:end="39:49">new_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="43:5" pos:end="53:5"><if pos:start="43:5" pos:end="53:5">if <condition pos:start="43:8" pos:end="43:45">(<expr pos:start="43:9" pos:end="43:44"><operator pos:start="43:9" pos:end="43:9">(</operator><name pos:start="43:10" pos:end="43:18">new_entry</name> <operator pos:start="43:20" pos:end="43:20">&amp;</operator> <name pos:start="43:22" pos:end="43:38">_REGION_ENTRY_INV</name><operator pos:start="43:39" pos:end="43:39">)</operator> <operator pos:start="43:41" pos:end="43:42">!=</operator> <literal type="number" pos:start="43:44" pos:end="43:44">0</literal></expr>)</condition> <block pos:start="43:47" pos:end="53:5">{<block_content pos:start="47:9" pos:end="51:18">

        <comment type="block" pos:start="45:9" pos:end="45:57">/* XXX different regions have different faults */</comment>

        <expr_stmt pos:start="47:9" pos:end="47:50"><expr pos:start="47:9" pos:end="47:49"><call pos:start="47:9" pos:end="47:49"><name pos:start="47:9" pos:end="47:15">DPRINTF</name><argument_list pos:start="47:16" pos:end="47:49">(<argument pos:start="47:17" pos:end="47:38"><expr pos:start="47:17" pos:end="47:38"><literal type="string" pos:start="47:17" pos:end="47:38">"%s: invalid region\n"</literal></expr></argument>, <argument pos:start="47:41" pos:end="47:48"><expr pos:start="47:41" pos:end="47:48"><name pos:start="47:41" pos:end="47:48">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:72"><expr pos:start="49:9" pos:end="49:71"><call pos:start="49:9" pos:end="49:71"><name pos:start="49:9" pos:end="49:26">trigger_page_fault</name><argument_list pos:start="49:27" pos:end="49:71">(<argument pos:start="49:28" pos:end="49:30"><expr pos:start="49:28" pos:end="49:30"><name pos:start="49:28" pos:end="49:30">env</name></expr></argument>, <argument pos:start="49:33" pos:end="49:37"><expr pos:start="49:33" pos:end="49:37"><name pos:start="49:33" pos:end="49:37">vaddr</name></expr></argument>, <argument pos:start="49:40" pos:end="49:56"><expr pos:start="49:40" pos:end="49:56"><name pos:start="49:40" pos:end="49:56">PGM_SEGMENT_TRANS</name></expr></argument>, <argument pos:start="49:59" pos:end="49:61"><expr pos:start="49:59" pos:end="49:61"><name pos:start="49:59" pos:end="49:61">asc</name></expr></argument>, <argument pos:start="49:64" pos:end="49:65"><expr pos:start="49:64" pos:end="49:65"><name pos:start="49:64" pos:end="49:65">rw</name></expr></argument>, <argument pos:start="49:68" pos:end="49:70"><expr pos:start="49:68" pos:end="49:70"><name pos:start="49:68" pos:end="49:70">exc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="51:9" pos:end="51:18">return <expr pos:start="51:16" pos:end="51:17"><operator pos:start="51:16" pos:end="51:16">-</operator><literal type="number" pos:start="51:17" pos:end="51:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="57:5" pos:end="63:5"><if pos:start="57:5" pos:end="63:5">if <condition pos:start="57:8" pos:end="57:55">(<expr pos:start="57:9" pos:end="57:54"><operator pos:start="57:9" pos:end="57:9">(</operator><name pos:start="57:10" pos:end="57:18">new_entry</name> <operator pos:start="57:20" pos:end="57:20">&amp;</operator> <name pos:start="57:22" pos:end="57:44">_REGION_ENTRY_TYPE_MASK</name><operator pos:start="57:45" pos:end="57:45">)</operator> <operator pos:start="57:47" pos:end="57:48">!=</operator> <name pos:start="57:50" pos:end="57:54">level</name></expr>)</condition> <block pos:start="57:57" pos:end="63:5">{<block_content pos:start="59:9" pos:end="61:18">

        <expr_stmt pos:start="59:9" pos:end="59:69"><expr pos:start="59:9" pos:end="59:68"><call pos:start="59:9" pos:end="59:68"><name pos:start="59:9" pos:end="59:26">trigger_page_fault</name><argument_list pos:start="59:27" pos:end="59:68">(<argument pos:start="59:28" pos:end="59:30"><expr pos:start="59:28" pos:end="59:30"><name pos:start="59:28" pos:end="59:30">env</name></expr></argument>, <argument pos:start="59:33" pos:end="59:37"><expr pos:start="59:33" pos:end="59:37"><name pos:start="59:33" pos:end="59:37">vaddr</name></expr></argument>, <argument pos:start="59:40" pos:end="59:53"><expr pos:start="59:40" pos:end="59:53"><name pos:start="59:40" pos:end="59:53">PGM_TRANS_SPEC</name></expr></argument>, <argument pos:start="59:56" pos:end="59:58"><expr pos:start="59:56" pos:end="59:58"><name pos:start="59:56" pos:end="59:58">asc</name></expr></argument>, <argument pos:start="59:61" pos:end="59:62"><expr pos:start="59:61" pos:end="59:62"><name pos:start="59:61" pos:end="59:62">rw</name></expr></argument>, <argument pos:start="59:65" pos:end="59:67"><expr pos:start="59:65" pos:end="59:67"><name pos:start="59:65" pos:end="59:67">exc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="61:9" pos:end="61:18">return <expr pos:start="61:16" pos:end="61:17"><operator pos:start="61:16" pos:end="61:16">-</operator><literal type="number" pos:start="61:17" pos:end="61:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="67:5" pos:end="67:37">/* XXX region protection flags */</comment>

    <comment type="block" pos:start="69:5" pos:end="69:31">/* *flags &amp;= ~PAGE_WRITE */</comment>



    <if_stmt pos:start="73:5" pos:end="79:5"><if pos:start="73:5" pos:end="79:5">if <condition pos:start="73:8" pos:end="73:36">(<expr pos:start="73:9" pos:end="73:35"><name pos:start="73:9" pos:end="73:13">level</name> <operator pos:start="73:15" pos:end="73:16">==</operator> <name pos:start="73:18" pos:end="73:35">_ASCE_TYPE_SEGMENT</name></expr>)</condition> <block pos:start="73:38" pos:end="79:5">{<block_content pos:start="75:9" pos:end="77:46">

        <return pos:start="75:9" pos:end="77:46">return <expr pos:start="75:16" pos:end="77:45"><call pos:start="75:16" pos:end="77:45"><name pos:start="75:16" pos:end="75:36">mmu_translate_segment</name><argument_list pos:start="75:37" pos:end="77:45">(<argument pos:start="75:38" pos:end="75:40"><expr pos:start="75:38" pos:end="75:40"><name pos:start="75:38" pos:end="75:40">env</name></expr></argument>, <argument pos:start="75:43" pos:end="75:47"><expr pos:start="75:43" pos:end="75:47"><name pos:start="75:43" pos:end="75:47">vaddr</name></expr></argument>, <argument pos:start="75:50" pos:end="75:52"><expr pos:start="75:50" pos:end="75:52"><name pos:start="75:50" pos:end="75:52">asc</name></expr></argument>, <argument pos:start="75:55" pos:end="75:63"><expr pos:start="75:55" pos:end="75:63"><name pos:start="75:55" pos:end="75:63">new_entry</name></expr></argument>, <argument pos:start="75:66" pos:end="75:70"><expr pos:start="75:66" pos:end="75:70"><name pos:start="75:66" pos:end="75:70">raddr</name></expr></argument>, <argument pos:start="75:73" pos:end="75:77"><expr pos:start="75:73" pos:end="75:77"><name pos:start="75:73" pos:end="75:77">flags</name></expr></argument>,

                                     <argument pos:start="77:38" pos:end="77:39"><expr pos:start="77:38" pos:end="77:39"><name pos:start="77:38" pos:end="77:39">rw</name></expr></argument>, <argument pos:start="77:42" pos:end="77:44"><expr pos:start="77:42" pos:end="77:44"><name pos:start="77:42" pos:end="77:44">exc</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="83:5" pos:end="83:46">/* Check region table offset and length */</comment>

    <expr_stmt pos:start="85:5" pos:end="85:54"><expr pos:start="85:5" pos:end="85:53"><name pos:start="85:5" pos:end="85:8">offs</name> <operator pos:start="85:10" pos:end="85:10">=</operator> <operator pos:start="85:12" pos:end="85:12">(</operator><name pos:start="85:13" pos:end="85:17">vaddr</name> <operator pos:start="85:19" pos:end="85:20">&gt;&gt;</operator> <operator pos:start="85:22" pos:end="85:22">(</operator><literal type="number" pos:start="85:23" pos:end="85:26">28</literal> <operator pos:start="85:26" pos:end="85:26">+</operator> <literal type="number" pos:start="85:28" pos:end="85:29">11</literal> <operator pos:start="85:31" pos:end="85:31">*</operator> <operator pos:start="85:33" pos:end="85:33">(</operator><name pos:start="85:34" pos:end="85:38">level</name> <operator pos:start="85:40" pos:end="85:40">-</operator> <literal type="number" pos:start="85:42" pos:end="85:42">4</literal><operator pos:start="85:43" pos:end="85:43">)</operator> <operator pos:start="85:45" pos:end="85:45">/</operator> <literal type="number" pos:start="85:47" pos:end="85:47">4</literal><operator pos:start="85:48" pos:end="85:48">)</operator><operator pos:start="85:49" pos:end="85:49">)</operator> <operator pos:start="85:51" pos:end="85:51">&amp;</operator> <literal type="number" pos:start="85:53" pos:end="85:53">3</literal></expr>;</expr_stmt>

    <if_stmt pos:start="87:5" pos:end="97:5"><if pos:start="87:5" pos:end="97:5">if <condition pos:start="87:8" pos:end="89:53">(<expr pos:start="87:9" pos:end="89:53"><call pos:start="87:9" pos:end="89:53"><name pos:start="87:9" pos:end="87:12">offs</name> <argument_list pos:start="87:14" pos:end="89:53">&lt; <argument pos:start="87:16" pos:end="89:52"><expr pos:start="87:16" pos:end="89:52"><operator pos:start="87:16" pos:end="87:16">(</operator><operator pos:start="87:17" pos:end="87:17">(</operator><name pos:start="87:18" pos:end="87:26">new_entry</name> <operator pos:start="87:28" pos:end="87:28">&amp;</operator> <name pos:start="87:30" pos:end="87:45">_REGION_ENTRY_TF</name><operator pos:start="87:46" pos:end="87:46">)</operator> <operator pos:start="87:48" pos:end="87:49">&gt;&gt;</operator> <literal type="number" pos:start="87:51" pos:end="87:51">6</literal><operator pos:start="87:52" pos:end="87:52">)</operator>

        <operator pos:start="89:9" pos:end="89:10">||</operator> <name pos:start="89:12" pos:end="89:15">offs</name> <operator pos:start="89:17" pos:end="89:17">&gt;</operator> <operator pos:start="89:19" pos:end="89:19">(</operator><name pos:start="89:20" pos:end="89:28">new_entry</name> <operator pos:start="89:30" pos:end="89:30">&amp;</operator> <name pos:start="89:32" pos:end="89:51">_REGION_ENTRY_LENGTH</name><operator pos:start="89:52" pos:end="89:52">)</operator></expr></argument>)</argument_list></call></expr></condition> <block pos:start="89:55" pos:end="97:5">{<block_content pos:start="91:9" pos:end="95:18">

        <expr_stmt pos:start="91:9" pos:end="91:74"><expr pos:start="91:9" pos:end="91:73"><call pos:start="91:9" pos:end="91:73"><name pos:start="91:9" pos:end="91:15">DPRINTF</name><argument_list pos:start="91:16" pos:end="91:73">(<argument pos:start="91:17" pos:end="91:51"><expr pos:start="91:17" pos:end="91:51"><literal type="string" pos:start="91:17" pos:end="91:51">"%s: invalid offset or len (%lx)\n"</literal></expr></argument>, <argument pos:start="91:54" pos:end="91:61"><expr pos:start="91:54" pos:end="91:61"><name pos:start="91:54" pos:end="91:61">__func__</name></expr></argument>, <argument pos:start="91:64" pos:end="91:72"><expr pos:start="91:64" pos:end="91:72"><name pos:start="91:64" pos:end="91:72">new_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:75"><expr pos:start="93:9" pos:end="93:74"><call pos:start="93:9" pos:end="93:74"><name pos:start="93:9" pos:end="93:26">trigger_page_fault</name><argument_list pos:start="93:27" pos:end="93:74">(<argument pos:start="93:28" pos:end="93:30"><expr pos:start="93:28" pos:end="93:30"><name pos:start="93:28" pos:end="93:30">env</name></expr></argument>, <argument pos:start="93:33" pos:end="93:37"><expr pos:start="93:33" pos:end="93:37"><name pos:start="93:33" pos:end="93:37">vaddr</name></expr></argument>, <argument pos:start="93:40" pos:end="93:59"><expr pos:start="93:40" pos:end="93:59"><name pos:start="93:40" pos:end="93:59"><name pos:start="93:40" pos:end="93:44">pchks</name><index pos:start="93:45" pos:end="93:59">[<expr pos:start="93:46" pos:end="93:58"><name pos:start="93:46" pos:end="93:50">level</name> <operator pos:start="93:52" pos:end="93:52">/</operator> <literal type="number" pos:start="93:54" pos:end="93:56">4</literal> <operator pos:start="93:56" pos:end="93:56">-</operator> <literal type="number" pos:start="93:58" pos:end="93:58">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="93:62" pos:end="93:64"><expr pos:start="93:62" pos:end="93:64"><name pos:start="93:62" pos:end="93:64">asc</name></expr></argument>, <argument pos:start="93:67" pos:end="93:68"><expr pos:start="93:67" pos:end="93:68"><name pos:start="93:67" pos:end="93:68">rw</name></expr></argument>, <argument pos:start="93:71" pos:end="93:73"><expr pos:start="93:71" pos:end="93:73"><name pos:start="93:71" pos:end="93:73">exc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="95:9" pos:end="95:18">return <expr pos:start="95:16" pos:end="95:17"><operator pos:start="95:16" pos:end="95:16">-</operator><literal type="number" pos:start="95:17" pos:end="95:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="101:5" pos:end="101:28">/* yet another region */</comment>

    <return pos:start="103:5" pos:end="105:55">return <expr pos:start="103:12" pos:end="105:54"><call pos:start="103:12" pos:end="105:54"><name pos:start="103:12" pos:end="103:31">mmu_translate_region</name><argument_list pos:start="103:32" pos:end="105:54">(<argument pos:start="103:33" pos:end="103:35"><expr pos:start="103:33" pos:end="103:35"><name pos:start="103:33" pos:end="103:35">env</name></expr></argument>, <argument pos:start="103:38" pos:end="103:42"><expr pos:start="103:38" pos:end="103:42"><name pos:start="103:38" pos:end="103:42">vaddr</name></expr></argument>, <argument pos:start="103:45" pos:end="103:47"><expr pos:start="103:45" pos:end="103:47"><name pos:start="103:45" pos:end="103:47">asc</name></expr></argument>, <argument pos:start="103:50" pos:end="103:58"><expr pos:start="103:50" pos:end="103:58"><name pos:start="103:50" pos:end="103:58">new_entry</name></expr></argument>, <argument pos:start="103:61" pos:end="103:69"><expr pos:start="103:61" pos:end="103:69"><name pos:start="103:61" pos:end="103:65">level</name> <operator pos:start="103:67" pos:end="103:67">-</operator> <literal type="number" pos:start="103:69" pos:end="103:69">4</literal></expr></argument>,

                                <argument pos:start="105:33" pos:end="105:37"><expr pos:start="105:33" pos:end="105:37"><name pos:start="105:33" pos:end="105:37">raddr</name></expr></argument>, <argument pos:start="105:40" pos:end="105:44"><expr pos:start="105:40" pos:end="105:44"><name pos:start="105:40" pos:end="105:44">flags</name></expr></argument>, <argument pos:start="105:47" pos:end="105:48"><expr pos:start="105:47" pos:end="105:48"><name pos:start="105:47" pos:end="105:48">rw</name></expr></argument>, <argument pos:start="105:51" pos:end="105:53"><expr pos:start="105:51" pos:end="105:53"><name pos:start="105:51" pos:end="105:53">exc</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
