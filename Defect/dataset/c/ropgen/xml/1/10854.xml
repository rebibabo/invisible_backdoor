<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/10854.c" pos:tabs="8"><function pos:start="1:1" pos:end="143:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:32">vfio_early_setup_msix</name><parameter_list pos:start="1:33" pos:end="1:53">(<parameter pos:start="1:34" pos:end="1:52"><decl pos:start="1:34" pos:end="1:52"><type pos:start="1:34" pos:end="1:48"><name pos:start="1:34" pos:end="1:46">VFIOPCIDevice</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:52">vdev</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="143:1">{<block_content pos:start="5:5" pos:end="141:13">

    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">uint8_t</name></type> <name pos:start="5:13" pos:end="5:15">pos</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint16_t</name></type> <name pos:start="7:14" pos:end="7:17">ctrl</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:18">table</name></decl>, <decl pos:start="9:21" pos:end="9:23"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:21" pos:end="9:23">pba</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:10">fd</name> <init pos:start="11:12" pos:end="11:30">= <expr pos:start="11:14" pos:end="11:30"><name pos:start="11:14" pos:end="11:30"><name pos:start="11:14" pos:end="11:17">vdev</name><operator pos:start="11:18" pos:end="11:19">-&gt;</operator><name pos:start="11:20" pos:end="11:27">vbasedev</name><operator pos:start="11:28" pos:end="11:28">.</operator><name pos:start="11:29" pos:end="11:30">fd</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:60"><expr pos:start="15:5" pos:end="15:59"><name pos:start="15:5" pos:end="15:7">pos</name> <operator pos:start="15:9" pos:end="15:9">=</operator> <call pos:start="15:11" pos:end="15:59"><name pos:start="15:11" pos:end="15:29">pci_find_capability</name><argument_list pos:start="15:30" pos:end="15:59">(<argument pos:start="15:31" pos:end="15:41"><expr pos:start="15:31" pos:end="15:41"><operator pos:start="15:31" pos:end="15:31">&amp;</operator><name pos:start="15:32" pos:end="15:41"><name pos:start="15:32" pos:end="15:35">vdev</name><operator pos:start="15:36" pos:end="15:37">-&gt;</operator><name pos:start="15:38" pos:end="15:41">pdev</name></name></expr></argument>, <argument pos:start="15:44" pos:end="15:58"><expr pos:start="15:44" pos:end="15:58"><name pos:start="15:44" pos:end="15:58">PCI_CAP_ID_MSIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="21:5"><if pos:start="17:5" pos:end="21:5">if <condition pos:start="17:8" pos:end="17:13">(<expr pos:start="17:9" pos:end="17:12"><operator pos:start="17:9" pos:end="17:9">!</operator><name pos:start="17:10" pos:end="17:12">pos</name></expr>)</condition> <block pos:start="17:15" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:17">

        <return pos:start="19:9" pos:end="19:17">return <expr pos:start="19:16" pos:end="19:16"><literal type="number" pos:start="19:16" pos:end="19:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="27:73">(<expr pos:start="25:9" pos:end="27:72"><call pos:start="25:9" pos:end="27:56"><name pos:start="25:9" pos:end="25:13">pread</name><argument_list pos:start="25:14" pos:end="27:56">(<argument pos:start="25:15" pos:end="25:16"><expr pos:start="25:15" pos:end="25:16"><name pos:start="25:15" pos:end="25:16">fd</name></expr></argument>, <argument pos:start="25:19" pos:end="25:23"><expr pos:start="25:19" pos:end="25:23"><operator pos:start="25:19" pos:end="25:19">&amp;</operator><name pos:start="25:20" pos:end="25:23">ctrl</name></expr></argument>, <argument pos:start="25:26" pos:end="25:37"><expr pos:start="25:26" pos:end="25:37"><sizeof pos:start="25:26" pos:end="25:37">sizeof<argument_list pos:start="25:32" pos:end="25:37">(<argument pos:start="25:33" pos:end="25:36"><expr pos:start="25:33" pos:end="25:36"><name pos:start="25:33" pos:end="25:36">ctrl</name></expr></argument>)</argument_list></sizeof></expr></argument>,

              <argument pos:start="27:15" pos:end="27:55"><expr pos:start="27:15" pos:end="27:55"><name pos:start="27:15" pos:end="27:33"><name pos:start="27:15" pos:end="27:18">vdev</name><operator pos:start="27:19" pos:end="27:20">-&gt;</operator><name pos:start="27:21" pos:end="27:33">config_offset</name></name> <operator pos:start="27:35" pos:end="27:35">+</operator> <name pos:start="27:37" pos:end="27:39">pos</name> <operator pos:start="27:41" pos:end="27:41">+</operator> <name pos:start="27:43" pos:end="27:55">PCI_CAP_FLAGS</name></expr></argument>)</argument_list></call> <operator pos:start="27:58" pos:end="27:59">!=</operator> <sizeof pos:start="27:61" pos:end="27:72">sizeof<argument_list pos:start="27:67" pos:end="27:72">(<argument pos:start="27:68" pos:end="27:71"><expr pos:start="27:68" pos:end="27:71"><name pos:start="27:68" pos:end="27:71">ctrl</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="27:75" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:22">

        <return pos:start="29:9" pos:end="29:22">return <expr pos:start="29:16" pos:end="29:21"><operator pos:start="29:16" pos:end="29:16">-</operator><name pos:start="29:17" pos:end="29:21">errno</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="37:75">(<expr pos:start="35:9" pos:end="37:74"><call pos:start="35:9" pos:end="37:57"><name pos:start="35:9" pos:end="35:13">pread</name><argument_list pos:start="35:14" pos:end="37:57">(<argument pos:start="35:15" pos:end="35:16"><expr pos:start="35:15" pos:end="35:16"><name pos:start="35:15" pos:end="35:16">fd</name></expr></argument>, <argument pos:start="35:19" pos:end="35:24"><expr pos:start="35:19" pos:end="35:24"><operator pos:start="35:19" pos:end="35:19">&amp;</operator><name pos:start="35:20" pos:end="35:24">table</name></expr></argument>, <argument pos:start="35:27" pos:end="35:39"><expr pos:start="35:27" pos:end="35:39"><sizeof pos:start="35:27" pos:end="35:39">sizeof<argument_list pos:start="35:33" pos:end="35:39">(<argument pos:start="35:34" pos:end="35:38"><expr pos:start="35:34" pos:end="35:38"><name pos:start="35:34" pos:end="35:38">table</name></expr></argument>)</argument_list></sizeof></expr></argument>,

              <argument pos:start="37:15" pos:end="37:56"><expr pos:start="37:15" pos:end="37:56"><name pos:start="37:15" pos:end="37:33"><name pos:start="37:15" pos:end="37:18">vdev</name><operator pos:start="37:19" pos:end="37:20">-&gt;</operator><name pos:start="37:21" pos:end="37:33">config_offset</name></name> <operator pos:start="37:35" pos:end="37:35">+</operator> <name pos:start="37:37" pos:end="37:39">pos</name> <operator pos:start="37:41" pos:end="37:41">+</operator> <name pos:start="37:43" pos:end="37:56">PCI_MSIX_TABLE</name></expr></argument>)</argument_list></call> <operator pos:start="37:59" pos:end="37:60">!=</operator> <sizeof pos:start="37:62" pos:end="37:74">sizeof<argument_list pos:start="37:68" pos:end="37:74">(<argument pos:start="37:69" pos:end="37:73"><expr pos:start="37:69" pos:end="37:73"><name pos:start="37:69" pos:end="37:73">table</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="37:77" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:22">

        <return pos:start="39:9" pos:end="39:22">return <expr pos:start="39:16" pos:end="39:21"><operator pos:start="39:16" pos:end="39:16">-</operator><name pos:start="39:17" pos:end="39:21">errno</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="45:5" pos:end="51:5"><if pos:start="45:5" pos:end="51:5">if <condition pos:start="45:8" pos:end="47:71">(<expr pos:start="45:9" pos:end="47:70"><call pos:start="45:9" pos:end="47:55"><name pos:start="45:9" pos:end="45:13">pread</name><argument_list pos:start="45:14" pos:end="47:55">(<argument pos:start="45:15" pos:end="45:16"><expr pos:start="45:15" pos:end="45:16"><name pos:start="45:15" pos:end="45:16">fd</name></expr></argument>, <argument pos:start="45:19" pos:end="45:22"><expr pos:start="45:19" pos:end="45:22"><operator pos:start="45:19" pos:end="45:19">&amp;</operator><name pos:start="45:20" pos:end="45:22">pba</name></expr></argument>, <argument pos:start="45:25" pos:end="45:35"><expr pos:start="45:25" pos:end="45:35"><sizeof pos:start="45:25" pos:end="45:35">sizeof<argument_list pos:start="45:31" pos:end="45:35">(<argument pos:start="45:32" pos:end="45:34"><expr pos:start="45:32" pos:end="45:34"><name pos:start="45:32" pos:end="45:34">pba</name></expr></argument>)</argument_list></sizeof></expr></argument>,

              <argument pos:start="47:15" pos:end="47:54"><expr pos:start="47:15" pos:end="47:54"><name pos:start="47:15" pos:end="47:33"><name pos:start="47:15" pos:end="47:18">vdev</name><operator pos:start="47:19" pos:end="47:20">-&gt;</operator><name pos:start="47:21" pos:end="47:33">config_offset</name></name> <operator pos:start="47:35" pos:end="47:35">+</operator> <name pos:start="47:37" pos:end="47:39">pos</name> <operator pos:start="47:41" pos:end="47:41">+</operator> <name pos:start="47:43" pos:end="47:54">PCI_MSIX_PBA</name></expr></argument>)</argument_list></call> <operator pos:start="47:57" pos:end="47:58">!=</operator> <sizeof pos:start="47:60" pos:end="47:70">sizeof<argument_list pos:start="47:66" pos:end="47:70">(<argument pos:start="47:67" pos:end="47:69"><expr pos:start="47:67" pos:end="47:69"><name pos:start="47:67" pos:end="47:69">pba</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="47:73" pos:end="51:5">{<block_content pos:start="49:9" pos:end="49:22">

        <return pos:start="49:9" pos:end="49:22">return <expr pos:start="49:16" pos:end="49:21"><operator pos:start="49:16" pos:end="49:16">-</operator><name pos:start="49:17" pos:end="49:21">errno</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:29"><expr pos:start="55:5" pos:end="55:28"><name pos:start="55:5" pos:end="55:8">ctrl</name> <operator pos:start="55:10" pos:end="55:10">=</operator> <call pos:start="55:12" pos:end="55:28"><name pos:start="55:12" pos:end="55:22">le16_to_cpu</name><argument_list pos:start="55:23" pos:end="55:28">(<argument pos:start="55:24" pos:end="55:27"><expr pos:start="55:24" pos:end="55:27"><name pos:start="55:24" pos:end="55:27">ctrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:31"><expr pos:start="57:5" pos:end="57:30"><name pos:start="57:5" pos:end="57:9">table</name> <operator pos:start="57:11" pos:end="57:11">=</operator> <call pos:start="57:13" pos:end="57:30"><name pos:start="57:13" pos:end="57:23">le32_to_cpu</name><argument_list pos:start="57:24" pos:end="57:30">(<argument pos:start="57:25" pos:end="57:29"><expr pos:start="57:25" pos:end="57:29"><name pos:start="57:25" pos:end="57:29">table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:27"><expr pos:start="59:5" pos:end="59:26"><name pos:start="59:5" pos:end="59:7">pba</name> <operator pos:start="59:9" pos:end="59:9">=</operator> <call pos:start="59:11" pos:end="59:26"><name pos:start="59:11" pos:end="59:21">le32_to_cpu</name><argument_list pos:start="59:22" pos:end="59:26">(<argument pos:start="59:23" pos:end="59:25"><expr pos:start="59:23" pos:end="59:25"><name pos:start="59:23" pos:end="59:25">pba</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:50"><expr pos:start="63:5" pos:end="63:49"><name pos:start="63:5" pos:end="63:14"><name pos:start="63:5" pos:end="63:8">vdev</name><operator pos:start="63:9" pos:end="63:10">-&gt;</operator><name pos:start="63:11" pos:end="63:14">msix</name></name> <operator pos:start="63:16" pos:end="63:16">=</operator> <call pos:start="63:18" pos:end="63:49"><name pos:start="63:18" pos:end="63:26">g_malloc0</name><argument_list pos:start="63:27" pos:end="63:49">(<argument pos:start="63:28" pos:end="63:48"><expr pos:start="63:28" pos:end="63:48"><sizeof pos:start="63:28" pos:end="63:48">sizeof<argument_list pos:start="63:34" pos:end="63:48">(<argument pos:start="63:35" pos:end="63:47"><expr pos:start="63:35" pos:end="63:47"><operator pos:start="63:35" pos:end="63:35">*</operator><operator pos:start="63:36" pos:end="63:36">(</operator><name pos:start="63:37" pos:end="63:46"><name pos:start="63:37" pos:end="63:40">vdev</name><operator pos:start="63:41" pos:end="63:42">-&gt;</operator><name pos:start="63:43" pos:end="63:46">msix</name></name><operator pos:start="63:47" pos:end="63:47">)</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:59"><expr pos:start="65:5" pos:end="65:58"><name pos:start="65:5" pos:end="65:25"><name pos:start="65:5" pos:end="65:8">vdev</name><operator pos:start="65:9" pos:end="65:10">-&gt;</operator><name pos:start="65:11" pos:end="65:14">msix</name><operator pos:start="65:15" pos:end="65:16">-&gt;</operator><name pos:start="65:17" pos:end="65:25">table_bar</name></name> <operator pos:start="65:27" pos:end="65:27">=</operator> <name pos:start="65:29" pos:end="65:33">table</name> <operator pos:start="65:35" pos:end="65:35">&amp;</operator> <name pos:start="65:37" pos:end="65:58">PCI_MSIX_FLAGS_BIRMASK</name></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:63"><expr pos:start="67:5" pos:end="67:62"><name pos:start="67:5" pos:end="67:28"><name pos:start="67:5" pos:end="67:8">vdev</name><operator pos:start="67:9" pos:end="67:10">-&gt;</operator><name pos:start="67:11" pos:end="67:14">msix</name><operator pos:start="67:15" pos:end="67:16">-&gt;</operator><name pos:start="67:17" pos:end="67:28">table_offset</name></name> <operator pos:start="67:30" pos:end="67:30">=</operator> <name pos:start="67:32" pos:end="67:36">table</name> <operator pos:start="67:38" pos:end="67:38">&amp;</operator> <operator pos:start="67:40" pos:end="67:40">~</operator><name pos:start="67:41" pos:end="67:62">PCI_MSIX_FLAGS_BIRMASK</name></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:55"><expr pos:start="69:5" pos:end="69:54"><name pos:start="69:5" pos:end="69:23"><name pos:start="69:5" pos:end="69:8">vdev</name><operator pos:start="69:9" pos:end="69:10">-&gt;</operator><name pos:start="69:11" pos:end="69:14">msix</name><operator pos:start="69:15" pos:end="69:16">-&gt;</operator><name pos:start="69:17" pos:end="69:23">pba_bar</name></name> <operator pos:start="69:25" pos:end="69:25">=</operator> <name pos:start="69:27" pos:end="69:29">pba</name> <operator pos:start="69:31" pos:end="69:31">&amp;</operator> <name pos:start="69:33" pos:end="69:54">PCI_MSIX_FLAGS_BIRMASK</name></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:59"><expr pos:start="71:5" pos:end="71:58"><name pos:start="71:5" pos:end="71:26"><name pos:start="71:5" pos:end="71:8">vdev</name><operator pos:start="71:9" pos:end="71:10">-&gt;</operator><name pos:start="71:11" pos:end="71:14">msix</name><operator pos:start="71:15" pos:end="71:16">-&gt;</operator><name pos:start="71:17" pos:end="71:26">pba_offset</name></name> <operator pos:start="71:28" pos:end="71:28">=</operator> <name pos:start="71:30" pos:end="71:32">pba</name> <operator pos:start="71:34" pos:end="71:34">&amp;</operator> <operator pos:start="71:36" pos:end="71:36">~</operator><name pos:start="71:37" pos:end="71:58">PCI_MSIX_FLAGS_BIRMASK</name></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:60"><expr pos:start="73:5" pos:end="73:59"><name pos:start="73:5" pos:end="73:23"><name pos:start="73:5" pos:end="73:8">vdev</name><operator pos:start="73:9" pos:end="73:10">-&gt;</operator><name pos:start="73:11" pos:end="73:14">msix</name><operator pos:start="73:15" pos:end="73:16">-&gt;</operator><name pos:start="73:17" pos:end="73:23">entries</name></name> <operator pos:start="73:25" pos:end="73:25">=</operator> <operator pos:start="73:27" pos:end="73:27">(</operator><name pos:start="73:28" pos:end="73:31">ctrl</name> <operator pos:start="73:33" pos:end="73:33">&amp;</operator> <name pos:start="73:35" pos:end="73:54">PCI_MSIX_FLAGS_QSIZE</name><operator pos:start="73:55" pos:end="73:55">)</operator> <operator pos:start="73:57" pos:end="73:57">+</operator> <literal type="number" pos:start="73:59" pos:end="73:59">1</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="77:5" pos:end="85:7">/*

     * Test the size of the pba_offset variable and catch if it extends outside

     * of the specified BAR. If it is the case, we need to apply a hardware

     * specific quirk if the device is known or we have a broken configuration.

     */</comment>

    <if_stmt pos:start="87:5" pos:end="127:5"><if pos:start="87:5" pos:end="127:5">if <condition pos:start="87:8" pos:end="89:52">(<expr pos:start="87:9" pos:end="89:51"><name pos:start="87:9" pos:end="87:30"><name pos:start="87:9" pos:end="87:12">vdev</name><operator pos:start="87:13" pos:end="87:14">-&gt;</operator><name pos:start="87:15" pos:end="87:18">msix</name><operator pos:start="87:19" pos:end="87:20">-&gt;</operator><name pos:start="87:21" pos:end="87:30">pba_offset</name></name> <operator pos:start="87:32" pos:end="87:33">&gt;=</operator>

        <name pos:start="89:9" pos:end="89:39"><name pos:start="89:9" pos:end="89:12">vdev</name><operator pos:start="89:13" pos:end="89:14">-&gt;</operator><name pos:start="89:15" pos:end="89:18">bars</name><index pos:start="89:19" pos:end="89:39">[<expr pos:start="89:20" pos:end="89:38"><name pos:start="89:20" pos:end="89:38"><name pos:start="89:20" pos:end="89:23">vdev</name><operator pos:start="89:24" pos:end="89:25">-&gt;</operator><name pos:start="89:26" pos:end="89:29">msix</name><operator pos:start="89:30" pos:end="89:31">-&gt;</operator><name pos:start="89:32" pos:end="89:38">pba_bar</name></name></expr>]</index></name><operator pos:start="89:40" pos:end="89:40">.</operator><name pos:start="89:41" pos:end="89:51"><name pos:start="89:41" pos:end="89:46">region</name><operator pos:start="89:47" pos:end="89:47">.</operator><name pos:start="89:48" pos:end="89:51">size</name></name></expr>)</condition> <block pos:start="89:54" pos:end="127:5">{<block_content pos:start="93:9" pos:end="125:9">



        <decl_stmt pos:start="93:9" pos:end="93:38"><decl pos:start="93:9" pos:end="93:37"><type pos:start="93:9" pos:end="93:19"><name pos:start="93:9" pos:end="93:17">PCIDevice</name> <modifier pos:start="93:19" pos:end="93:19">*</modifier></type><name pos:start="93:20" pos:end="93:23">pdev</name> <init pos:start="93:25" pos:end="93:37">= <expr pos:start="93:27" pos:end="93:37"><operator pos:start="93:27" pos:end="93:27">&amp;</operator><name pos:start="93:28" pos:end="93:37"><name pos:start="93:28" pos:end="93:31">vdev</name><operator pos:start="93:32" pos:end="93:33">-&gt;</operator><name pos:start="93:34" pos:end="93:37">pdev</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="95:9" pos:end="95:69"><decl pos:start="95:9" pos:end="95:68"><type pos:start="95:9" pos:end="95:16"><name pos:start="95:9" pos:end="95:16">uint16_t</name></type> <name pos:start="95:18" pos:end="95:23">vendor</name> <init pos:start="95:25" pos:end="95:68">= <expr pos:start="95:27" pos:end="95:68"><call pos:start="95:27" pos:end="95:68"><name pos:start="95:27" pos:end="95:38">pci_get_word</name><argument_list pos:start="95:39" pos:end="95:68">(<argument pos:start="95:40" pos:end="95:67"><expr pos:start="95:40" pos:end="95:67"><name pos:start="95:40" pos:end="95:51"><name pos:start="95:40" pos:end="95:43">pdev</name><operator pos:start="95:44" pos:end="95:45">-&gt;</operator><name pos:start="95:46" pos:end="95:51">config</name></name> <operator pos:start="95:53" pos:end="95:53">+</operator> <name pos:start="95:55" pos:end="95:67">PCI_VENDOR_ID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="97:9" pos:end="97:69"><decl pos:start="97:9" pos:end="97:68"><type pos:start="97:9" pos:end="97:16"><name pos:start="97:9" pos:end="97:16">uint16_t</name></type> <name pos:start="97:18" pos:end="97:23">device</name> <init pos:start="97:25" pos:end="97:68">= <expr pos:start="97:27" pos:end="97:68"><call pos:start="97:27" pos:end="97:68"><name pos:start="97:27" pos:end="97:38">pci_get_word</name><argument_list pos:start="97:39" pos:end="97:68">(<argument pos:start="97:40" pos:end="97:67"><expr pos:start="97:40" pos:end="97:67"><name pos:start="97:40" pos:end="97:51"><name pos:start="97:40" pos:end="97:43">pdev</name><operator pos:start="97:44" pos:end="97:45">-&gt;</operator><name pos:start="97:46" pos:end="97:51">config</name></name> <operator pos:start="97:53" pos:end="97:53">+</operator> <name pos:start="97:55" pos:end="97:67">PCI_DEVICE_ID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="101:9" pos:end="111:11">/*

         * Chelsio T5 Virtual Function devices are encoded as 0x58xx for T5

         * adapters. The T5 hardware returns an incorrect value of 0x8000 for

         * the VF PBA offset while the BAR itself is only 8k. The correct value

         * is 0x1000, so we hard code that here.

         */</comment>

        <if_stmt pos:start="113:9" pos:end="125:9"><if pos:start="113:9" pos:end="117:9">if <condition pos:start="113:12" pos:end="113:75">(<expr pos:start="113:13" pos:end="113:74"><name pos:start="113:13" pos:end="113:18">vendor</name> <operator pos:start="113:20" pos:end="113:21">==</operator> <name pos:start="113:23" pos:end="113:43">PCI_VENDOR_ID_CHELSIO</name> <operator pos:start="113:45" pos:end="113:46">&amp;&amp;</operator> <operator pos:start="113:48" pos:end="113:48">(</operator><name pos:start="113:49" pos:end="113:54">device</name> <operator pos:start="113:56" pos:end="113:56">&amp;</operator> <literal type="number" pos:start="113:58" pos:end="113:63">0xff00</literal><operator pos:start="113:64" pos:end="113:64">)</operator> <operator pos:start="113:66" pos:end="113:67">==</operator> <literal type="number" pos:start="113:69" pos:end="113:74">0x5800</literal></expr>)</condition> <block pos:start="113:77" pos:end="117:9">{<block_content pos:start="115:13" pos:end="115:44">

            <expr_stmt pos:start="115:13" pos:end="115:44"><expr pos:start="115:13" pos:end="115:43"><name pos:start="115:13" pos:end="115:34"><name pos:start="115:13" pos:end="115:16">vdev</name><operator pos:start="115:17" pos:end="115:18">-&gt;</operator><name pos:start="115:19" pos:end="115:22">msix</name><operator pos:start="115:23" pos:end="115:24">-&gt;</operator><name pos:start="115:25" pos:end="115:34">pba_offset</name></name> <operator pos:start="115:36" pos:end="115:36">=</operator> <literal type="number" pos:start="115:38" pos:end="115:43">0x1000</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="117:11" pos:end="125:9">else <block pos:start="117:16" pos:end="125:9">{<block_content pos:start="119:13" pos:end="123:27">

            <expr_stmt pos:start="119:13" pos:end="121:62"><expr pos:start="119:13" pos:end="121:61"><call pos:start="119:13" pos:end="121:61"><name pos:start="119:13" pos:end="119:24">error_report</name><argument_list pos:start="119:25" pos:end="121:61">(<argument pos:start="119:26" pos:end="121:60"><expr pos:start="119:26" pos:end="121:60"><literal type="string" pos:start="119:26" pos:end="119:73">"vfio: Hardware reports invalid configuration, "</literal>

                         <literal type="string" pos:start="121:26" pos:end="121:60">"MSIX PBA outside of specified BAR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="123:13" pos:end="123:27">return <expr pos:start="123:20" pos:end="123:26"><operator pos:start="123:20" pos:end="123:20">-</operator><name pos:start="123:21" pos:end="123:26">EINVAL</name></expr>;</return>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="131:5" pos:end="137:53"><expr pos:start="131:5" pos:end="137:52"><call pos:start="131:5" pos:end="137:52"><name pos:start="131:5" pos:end="131:31">trace_vfio_early_setup_msix</name><argument_list pos:start="131:32" pos:end="137:52">(<argument pos:start="131:33" pos:end="131:51"><expr pos:start="131:33" pos:end="131:51"><name pos:start="131:33" pos:end="131:51"><name pos:start="131:33" pos:end="131:36">vdev</name><operator pos:start="131:37" pos:end="131:38">-&gt;</operator><name pos:start="131:39" pos:end="131:46">vbasedev</name><operator pos:start="131:47" pos:end="131:47">.</operator><name pos:start="131:48" pos:end="131:51">name</name></name></expr></argument>, <argument pos:start="131:54" pos:end="131:56"><expr pos:start="131:54" pos:end="131:56"><name pos:start="131:54" pos:end="131:56">pos</name></expr></argument>,

                                <argument pos:start="133:33" pos:end="133:53"><expr pos:start="133:33" pos:end="133:53"><name pos:start="133:33" pos:end="133:53"><name pos:start="133:33" pos:end="133:36">vdev</name><operator pos:start="133:37" pos:end="133:38">-&gt;</operator><name pos:start="133:39" pos:end="133:42">msix</name><operator pos:start="133:43" pos:end="133:44">-&gt;</operator><name pos:start="133:45" pos:end="133:53">table_bar</name></name></expr></argument>,

                                <argument pos:start="135:33" pos:end="135:56"><expr pos:start="135:33" pos:end="135:56"><name pos:start="135:33" pos:end="135:56"><name pos:start="135:33" pos:end="135:36">vdev</name><operator pos:start="135:37" pos:end="135:38">-&gt;</operator><name pos:start="135:39" pos:end="135:42">msix</name><operator pos:start="135:43" pos:end="135:44">-&gt;</operator><name pos:start="135:45" pos:end="135:56">table_offset</name></name></expr></argument>,

                                <argument pos:start="137:33" pos:end="137:51"><expr pos:start="137:33" pos:end="137:51"><name pos:start="137:33" pos:end="137:51"><name pos:start="137:33" pos:end="137:36">vdev</name><operator pos:start="137:37" pos:end="137:38">-&gt;</operator><name pos:start="137:39" pos:end="137:42">msix</name><operator pos:start="137:43" pos:end="137:44">-&gt;</operator><name pos:start="137:45" pos:end="137:51">entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="141:5" pos:end="141:13">return <expr pos:start="141:12" pos:end="141:12"><literal type="number" pos:start="141:12" pos:end="141:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
