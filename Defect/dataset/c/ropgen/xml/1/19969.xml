<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19969.c" pos:tabs="8"><function pos:start="1:1" pos:end="89:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:30">max_x86_cpu_initfn</name><parameter_list pos:start="1:31" pos:end="1:43">(<parameter pos:start="1:32" pos:end="1:42"><decl pos:start="1:32" pos:end="1:42"><type pos:start="1:32" pos:end="1:39"><name pos:start="1:32" pos:end="1:37">Object</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:42">obj</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="89:1">{<block_content pos:start="5:5" pos:end="87:69">

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:30"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:10">X86CPU</name> <modifier pos:start="5:12" pos:end="5:12">*</modifier></type><name pos:start="5:13" pos:end="5:15">cpu</name> <init pos:start="5:17" pos:end="5:30">= <expr pos:start="5:19" pos:end="5:30"><call pos:start="5:19" pos:end="5:30"><name pos:start="5:19" pos:end="5:25">X86_CPU</name><argument_list pos:start="5:26" pos:end="5:30">(<argument pos:start="5:27" pos:end="5:29"><expr pos:start="5:27" pos:end="5:29"><name pos:start="5:27" pos:end="5:29">obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">CPUX86State</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:20">env</name> <init pos:start="7:22" pos:end="7:32">= <expr pos:start="7:24" pos:end="7:32"><operator pos:start="7:24" pos:end="7:24">&amp;</operator><name pos:start="7:25" pos:end="7:32"><name pos:start="7:25" pos:end="7:27">cpu</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:32">env</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">KVMState</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:15">s</name> <init pos:start="9:17" pos:end="9:27">= <expr pos:start="9:19" pos:end="9:27"><name pos:start="9:19" pos:end="9:27">kvm_state</name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="13:5" pos:end="17:7">/* We can't fill the features array here because we don't know yet if

     * "migratable" is true or false.

     */</comment>

    <expr_stmt pos:start="19:5" pos:end="19:29"><expr pos:start="19:5" pos:end="19:28"><name pos:start="19:5" pos:end="19:21"><name pos:start="19:5" pos:end="19:7">cpu</name><operator pos:start="19:8" pos:end="19:9">-&gt;</operator><name pos:start="19:10" pos:end="19:21">max_features</name></name> <operator pos:start="19:23" pos:end="19:23">=</operator> <name pos:start="19:25" pos:end="19:28">true</name></expr>;</expr_stmt>



    <if_stmt pos:start="23:5" pos:end="83:5"><if pos:start="23:5" pos:end="65:5">if <condition pos:start="23:8" pos:end="23:22">(<expr pos:start="23:9" pos:end="23:21"><call pos:start="23:9" pos:end="23:21"><name pos:start="23:9" pos:end="23:19">kvm_enabled</name><argument_list pos:start="23:20" pos:end="23:21">()</argument_list></call></expr>)</condition> <block pos:start="23:24" pos:end="65:5">{<block_content pos:start="25:9" pos:end="63:9">

        <decl_stmt pos:start="25:9" pos:end="25:43"><decl pos:start="25:9" pos:end="25:42"><type pos:start="25:9" pos:end="25:24"><name pos:start="25:9" pos:end="25:24">X86CPUDefinition</name></type> <name pos:start="25:26" pos:end="25:36">host_cpudef</name> <init pos:start="25:38" pos:end="25:42">= <expr pos:start="25:40" pos:end="25:42"><block pos:start="25:40" pos:end="25:42">{ }</block></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="27:9" pos:end="27:52"><decl pos:start="27:9" pos:end="27:24"><type pos:start="27:9" pos:end="27:16"><name pos:start="27:9" pos:end="27:16">uint32_t</name></type> <name pos:start="27:18" pos:end="27:20">eax</name> <init pos:start="27:22" pos:end="27:24">= <expr pos:start="27:24" pos:end="27:24"><literal type="number" pos:start="27:24" pos:end="27:24">0</literal></expr></init></decl>, <decl pos:start="27:27" pos:end="27:33"><type ref="prev" pos:start="27:9" pos:end="27:16"/><name pos:start="27:27" pos:end="27:29">ebx</name> <init pos:start="27:31" pos:end="27:33">= <expr pos:start="27:33" pos:end="27:33"><literal type="number" pos:start="27:33" pos:end="27:33">0</literal></expr></init></decl>, <decl pos:start="27:36" pos:end="27:42"><type ref="prev" pos:start="27:9" pos:end="27:16"/><name pos:start="27:36" pos:end="27:38">ecx</name> <init pos:start="27:40" pos:end="27:42">= <expr pos:start="27:42" pos:end="27:42"><literal type="number" pos:start="27:42" pos:end="27:42">0</literal></expr></init></decl>, <decl pos:start="27:45" pos:end="27:51"><type ref="prev" pos:start="27:9" pos:end="27:16"/><name pos:start="27:45" pos:end="27:47">edx</name> <init pos:start="27:49" pos:end="27:51">= <expr pos:start="27:51" pos:end="27:51"><literal type="number" pos:start="27:51" pos:end="27:51">0</literal></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="31:9" pos:end="33:67"><expr pos:start="31:9" pos:end="33:66"><call pos:start="31:9" pos:end="33:66"><name pos:start="31:9" pos:end="31:23">host_vendor_fms</name><argument_list pos:start="31:24" pos:end="33:66">(<argument pos:start="31:25" pos:end="31:42"><expr pos:start="31:25" pos:end="31:42"><name pos:start="31:25" pos:end="31:42"><name pos:start="31:25" pos:end="31:35">host_cpudef</name><operator pos:start="31:36" pos:end="31:36">.</operator><name pos:start="31:37" pos:end="31:42">vendor</name></name></expr></argument>, <argument pos:start="31:45" pos:end="31:63"><expr pos:start="31:45" pos:end="31:63"><operator pos:start="31:45" pos:end="31:45">&amp;</operator><name pos:start="31:46" pos:end="31:63"><name pos:start="31:46" pos:end="31:56">host_cpudef</name><operator pos:start="31:57" pos:end="31:57">.</operator><name pos:start="31:58" pos:end="31:63">family</name></name></expr></argument>,

                        <argument pos:start="33:25" pos:end="33:42"><expr pos:start="33:25" pos:end="33:42"><operator pos:start="33:25" pos:end="33:25">&amp;</operator><name pos:start="33:26" pos:end="33:42"><name pos:start="33:26" pos:end="33:36">host_cpudef</name><operator pos:start="33:37" pos:end="33:37">.</operator><name pos:start="33:38" pos:end="33:42">model</name></name></expr></argument>, <argument pos:start="33:45" pos:end="33:65"><expr pos:start="33:45" pos:end="33:65"><operator pos:start="33:45" pos:end="33:45">&amp;</operator><name pos:start="33:46" pos:end="33:65"><name pos:start="33:46" pos:end="33:56">host_cpudef</name><operator pos:start="33:57" pos:end="33:57">.</operator><name pos:start="33:58" pos:end="33:65">stepping</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="37:9" pos:end="37:52"><expr pos:start="37:9" pos:end="37:51"><call pos:start="37:9" pos:end="37:51"><name pos:start="37:9" pos:end="37:29">cpu_x86_fill_model_id</name><argument_list pos:start="37:30" pos:end="37:51">(<argument pos:start="37:31" pos:end="37:50"><expr pos:start="37:31" pos:end="37:50"><name pos:start="37:31" pos:end="37:50"><name pos:start="37:31" pos:end="37:41">host_cpudef</name><operator pos:start="37:42" pos:end="37:42">.</operator><name pos:start="37:43" pos:end="37:50">model_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="41:9" pos:end="41:58"><expr pos:start="41:9" pos:end="41:57"><call pos:start="41:9" pos:end="41:57"><name pos:start="41:9" pos:end="41:24">x86_cpu_load_def</name><argument_list pos:start="41:25" pos:end="41:57">(<argument pos:start="41:26" pos:end="41:28"><expr pos:start="41:26" pos:end="41:28"><name pos:start="41:26" pos:end="41:28">cpu</name></expr></argument>, <argument pos:start="41:31" pos:end="41:42"><expr pos:start="41:31" pos:end="41:42"><operator pos:start="41:31" pos:end="41:31">&amp;</operator><name pos:start="41:32" pos:end="41:42">host_cpudef</name></expr></argument>, <argument pos:start="41:45" pos:end="41:56"><expr pos:start="41:45" pos:end="41:56"><operator pos:start="41:45" pos:end="41:45">&amp;</operator><name pos:start="41:46" pos:end="41:56">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="45:9" pos:end="47:59"><expr pos:start="45:9" pos:end="47:58"><name pos:start="45:9" pos:end="45:28"><name pos:start="45:9" pos:end="45:11">env</name><operator pos:start="45:12" pos:end="45:13">-&gt;</operator><name pos:start="45:14" pos:end="45:28">cpuid_min_level</name></name> <operator pos:start="45:30" pos:end="45:30">=</operator>

            <call pos:start="47:13" pos:end="47:58"><name pos:start="47:13" pos:end="47:40">kvm_arch_get_supported_cpuid</name><argument_list pos:start="47:41" pos:end="47:58">(<argument pos:start="47:42" pos:end="47:42"><expr pos:start="47:42" pos:end="47:42"><name pos:start="47:42" pos:end="47:42">s</name></expr></argument>, <argument pos:start="47:45" pos:end="47:47"><expr pos:start="47:45" pos:end="47:47"><literal type="number" pos:start="47:45" pos:end="47:47">0x0</literal></expr></argument>, <argument pos:start="47:50" pos:end="47:50"><expr pos:start="47:50" pos:end="47:50"><literal type="number" pos:start="47:50" pos:end="47:50">0</literal></expr></argument>, <argument pos:start="47:53" pos:end="47:57"><expr pos:start="47:53" pos:end="47:57"><name pos:start="47:53" pos:end="47:57">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="51:66"><expr pos:start="49:9" pos:end="51:65"><name pos:start="49:9" pos:end="49:29"><name pos:start="49:9" pos:end="49:11">env</name><operator pos:start="49:12" pos:end="49:13">-&gt;</operator><name pos:start="49:14" pos:end="49:29">cpuid_min_xlevel</name></name> <operator pos:start="49:31" pos:end="49:31">=</operator>

            <call pos:start="51:13" pos:end="51:65"><name pos:start="51:13" pos:end="51:40">kvm_arch_get_supported_cpuid</name><argument_list pos:start="51:41" pos:end="51:65">(<argument pos:start="51:42" pos:end="51:42"><expr pos:start="51:42" pos:end="51:42"><name pos:start="51:42" pos:end="51:42">s</name></expr></argument>, <argument pos:start="51:45" pos:end="51:54"><expr pos:start="51:45" pos:end="51:54"><literal type="number" pos:start="51:45" pos:end="51:54">0x80000000</literal></expr></argument>, <argument pos:start="51:57" pos:end="51:57"><expr pos:start="51:57" pos:end="51:57"><literal type="number" pos:start="51:57" pos:end="51:57">0</literal></expr></argument>, <argument pos:start="51:60" pos:end="51:64"><expr pos:start="51:60" pos:end="51:64"><name pos:start="51:60" pos:end="51:64">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="55:66"><expr pos:start="53:9" pos:end="55:65"><name pos:start="53:9" pos:end="53:30"><name pos:start="53:9" pos:end="53:11">env</name><operator pos:start="53:12" pos:end="53:13">-&gt;</operator><name pos:start="53:14" pos:end="53:30">cpuid_min_xlevel2</name></name> <operator pos:start="53:32" pos:end="53:32">=</operator>

            <call pos:start="55:13" pos:end="55:65"><name pos:start="55:13" pos:end="55:40">kvm_arch_get_supported_cpuid</name><argument_list pos:start="55:41" pos:end="55:65">(<argument pos:start="55:42" pos:end="55:42"><expr pos:start="55:42" pos:end="55:42"><name pos:start="55:42" pos:end="55:42">s</name></expr></argument>, <argument pos:start="55:45" pos:end="55:54"><expr pos:start="55:45" pos:end="55:54"><literal type="number" pos:start="55:45" pos:end="55:54">0xC0000000</literal></expr></argument>, <argument pos:start="55:57" pos:end="55:57"><expr pos:start="55:57" pos:end="55:57"><literal type="number" pos:start="55:57" pos:end="55:57">0</literal></expr></argument>, <argument pos:start="55:60" pos:end="55:64"><expr pos:start="55:60" pos:end="55:64"><name pos:start="55:60" pos:end="55:64">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="59:9" pos:end="63:9"><if pos:start="59:9" pos:end="63:9">if <condition pos:start="59:12" pos:end="59:29">(<expr pos:start="59:13" pos:end="59:28"><call pos:start="59:13" pos:end="59:28"><name pos:start="59:13" pos:end="59:26">lmce_supported</name><argument_list pos:start="59:27" pos:end="59:28">()</argument_list></call></expr>)</condition> <block pos:start="59:31" pos:end="63:9">{<block_content pos:start="61:13" pos:end="61:78">

            <expr_stmt pos:start="61:13" pos:end="61:78"><expr pos:start="61:13" pos:end="61:77"><call pos:start="61:13" pos:end="61:77"><name pos:start="61:13" pos:end="61:36">object_property_set_bool</name><argument_list pos:start="61:37" pos:end="61:77">(<argument pos:start="61:38" pos:end="61:48"><expr pos:start="61:38" pos:end="61:48"><call pos:start="61:38" pos:end="61:48"><name pos:start="61:38" pos:end="61:43">OBJECT</name><argument_list pos:start="61:44" pos:end="61:48">(<argument pos:start="61:45" pos:end="61:47"><expr pos:start="61:45" pos:end="61:47"><name pos:start="61:45" pos:end="61:47">cpu</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="61:51" pos:end="61:54"><expr pos:start="61:51" pos:end="61:54"><name pos:start="61:51" pos:end="61:54">true</name></expr></argument>, <argument pos:start="61:57" pos:end="61:62"><expr pos:start="61:57" pos:end="61:62"><literal type="string" pos:start="61:57" pos:end="61:62">"lmce"</literal></expr></argument>, <argument pos:start="61:65" pos:end="61:76"><expr pos:start="61:65" pos:end="61:76"><operator pos:start="61:65" pos:end="61:65">&amp;</operator><name pos:start="61:66" pos:end="61:76">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="65:7" pos:end="83:5">else <block pos:start="65:12" pos:end="83:5">{<block_content pos:start="67:9" pos:end="81:58">

        <expr_stmt pos:start="67:9" pos:end="69:56"><expr pos:start="67:9" pos:end="69:55"><call pos:start="67:9" pos:end="69:55"><name pos:start="67:9" pos:end="67:31">object_property_set_str</name><argument_list pos:start="67:32" pos:end="69:55">(<argument pos:start="67:33" pos:end="67:43"><expr pos:start="67:33" pos:end="67:43"><call pos:start="67:33" pos:end="67:43"><name pos:start="67:33" pos:end="67:38">OBJECT</name><argument_list pos:start="67:39" pos:end="67:43">(<argument pos:start="67:40" pos:end="67:42"><expr pos:start="67:40" pos:end="67:42"><name pos:start="67:40" pos:end="67:42">cpu</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="67:46" pos:end="67:61"><expr pos:start="67:46" pos:end="67:61"><name pos:start="67:46" pos:end="67:61">CPUID_VENDOR_AMD</name></expr></argument>,

                                <argument pos:start="69:33" pos:end="69:40"><expr pos:start="69:33" pos:end="69:40"><literal type="string" pos:start="69:33" pos:end="69:40">"vendor"</literal></expr></argument>, <argument pos:start="69:43" pos:end="69:54"><expr pos:start="69:43" pos:end="69:54"><operator pos:start="69:43" pos:end="69:43">&amp;</operator><name pos:start="69:44" pos:end="69:54">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:72"><expr pos:start="71:9" pos:end="71:71"><call pos:start="71:9" pos:end="71:71"><name pos:start="71:9" pos:end="71:31">object_property_set_int</name><argument_list pos:start="71:32" pos:end="71:71">(<argument pos:start="71:33" pos:end="71:43"><expr pos:start="71:33" pos:end="71:43"><call pos:start="71:33" pos:end="71:43"><name pos:start="71:33" pos:end="71:38">OBJECT</name><argument_list pos:start="71:39" pos:end="71:43">(<argument pos:start="71:40" pos:end="71:42"><expr pos:start="71:40" pos:end="71:42"><name pos:start="71:40" pos:end="71:42">cpu</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="71:46" pos:end="71:46"><expr pos:start="71:46" pos:end="71:46"><literal type="number" pos:start="71:46" pos:end="71:46">6</literal></expr></argument>, <argument pos:start="71:49" pos:end="71:56"><expr pos:start="71:49" pos:end="71:56"><literal type="string" pos:start="71:49" pos:end="71:56">"family"</literal></expr></argument>, <argument pos:start="71:59" pos:end="71:70"><expr pos:start="71:59" pos:end="71:70"><operator pos:start="71:59" pos:end="71:59">&amp;</operator><name pos:start="71:60" pos:end="71:70">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:71"><expr pos:start="73:9" pos:end="73:70"><call pos:start="73:9" pos:end="73:70"><name pos:start="73:9" pos:end="73:31">object_property_set_int</name><argument_list pos:start="73:32" pos:end="73:70">(<argument pos:start="73:33" pos:end="73:43"><expr pos:start="73:33" pos:end="73:43"><call pos:start="73:33" pos:end="73:43"><name pos:start="73:33" pos:end="73:38">OBJECT</name><argument_list pos:start="73:39" pos:end="73:43">(<argument pos:start="73:40" pos:end="73:42"><expr pos:start="73:40" pos:end="73:42"><name pos:start="73:40" pos:end="73:42">cpu</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="73:46" pos:end="73:46"><expr pos:start="73:46" pos:end="73:46"><literal type="number" pos:start="73:46" pos:end="73:46">6</literal></expr></argument>, <argument pos:start="73:49" pos:end="73:55"><expr pos:start="73:49" pos:end="73:55"><literal type="string" pos:start="73:49" pos:end="73:55">"model"</literal></expr></argument>, <argument pos:start="73:58" pos:end="73:69"><expr pos:start="73:58" pos:end="73:69"><operator pos:start="73:58" pos:end="73:58">&amp;</operator><name pos:start="73:59" pos:end="73:69">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:74"><expr pos:start="75:9" pos:end="75:73"><call pos:start="75:9" pos:end="75:73"><name pos:start="75:9" pos:end="75:31">object_property_set_int</name><argument_list pos:start="75:32" pos:end="75:73">(<argument pos:start="75:33" pos:end="75:43"><expr pos:start="75:33" pos:end="75:43"><call pos:start="75:33" pos:end="75:43"><name pos:start="75:33" pos:end="75:38">OBJECT</name><argument_list pos:start="75:39" pos:end="75:43">(<argument pos:start="75:40" pos:end="75:42"><expr pos:start="75:40" pos:end="75:42"><name pos:start="75:40" pos:end="75:42">cpu</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="75:46" pos:end="75:46"><expr pos:start="75:46" pos:end="75:46"><literal type="number" pos:start="75:46" pos:end="75:46">3</literal></expr></argument>, <argument pos:start="75:49" pos:end="75:58"><expr pos:start="75:49" pos:end="75:58"><literal type="string" pos:start="75:49" pos:end="75:58">"stepping"</literal></expr></argument>, <argument pos:start="75:61" pos:end="75:72"><expr pos:start="75:61" pos:end="75:72"><operator pos:start="75:61" pos:end="75:61">&amp;</operator><name pos:start="75:62" pos:end="75:72">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="81:58"><expr pos:start="77:9" pos:end="81:57"><call pos:start="77:9" pos:end="81:57"><name pos:start="77:9" pos:end="77:31">object_property_set_str</name><argument_list pos:start="77:32" pos:end="81:57">(<argument pos:start="77:33" pos:end="77:43"><expr pos:start="77:33" pos:end="77:43"><call pos:start="77:33" pos:end="77:43"><name pos:start="77:33" pos:end="77:38">OBJECT</name><argument_list pos:start="77:39" pos:end="77:43">(<argument pos:start="77:40" pos:end="77:42"><expr pos:start="77:40" pos:end="77:42"><name pos:start="77:40" pos:end="77:42">cpu</name></expr></argument>)</argument_list></call></expr></argument>,

                                <argument pos:start="79:33" pos:end="79:71"><expr pos:start="79:33" pos:end="79:71"><literal type="string" pos:start="79:33" pos:end="79:55">"QEMU TCG CPU version "</literal> <name pos:start="79:57" pos:end="79:71">QEMU_HW_VERSION</name></expr></argument>,

                                <argument pos:start="81:33" pos:end="81:42"><expr pos:start="81:33" pos:end="81:42"><literal type="string" pos:start="81:33" pos:end="81:42">"model-id"</literal></expr></argument>, <argument pos:start="81:45" pos:end="81:56"><expr pos:start="81:45" pos:end="81:56"><operator pos:start="81:45" pos:end="81:45">&amp;</operator><name pos:start="81:46" pos:end="81:56">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="87:5" pos:end="87:69"><expr pos:start="87:5" pos:end="87:68"><call pos:start="87:5" pos:end="87:68"><name pos:start="87:5" pos:end="87:28">object_property_set_bool</name><argument_list pos:start="87:29" pos:end="87:68">(<argument pos:start="87:30" pos:end="87:40"><expr pos:start="87:30" pos:end="87:40"><call pos:start="87:30" pos:end="87:40"><name pos:start="87:30" pos:end="87:35">OBJECT</name><argument_list pos:start="87:36" pos:end="87:40">(<argument pos:start="87:37" pos:end="87:39"><expr pos:start="87:37" pos:end="87:39"><name pos:start="87:37" pos:end="87:39">cpu</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="87:43" pos:end="87:46"><expr pos:start="87:43" pos:end="87:46"><name pos:start="87:43" pos:end="87:46">true</name></expr></argument>, <argument pos:start="87:49" pos:end="87:53"><expr pos:start="87:49" pos:end="87:53"><literal type="string" pos:start="87:49" pos:end="87:53">"pmu"</literal></expr></argument>, <argument pos:start="87:56" pos:end="87:67"><expr pos:start="87:56" pos:end="87:67"><operator pos:start="87:56" pos:end="87:56">&amp;</operator><name pos:start="87:57" pos:end="87:67">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
