<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8214.c" pos:tabs="8"><function pos:start="1:1" pos:end="163:1"><type pos:start="1:1" pos:end="1:14"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">int32_t</name></type> <name pos:start="1:16" pos:end="1:32">scsi_send_command</name><parameter_list pos:start="1:33" pos:end="3:55">(<parameter pos:start="1:34" pos:end="1:46"><decl pos:start="1:34" pos:end="1:46"><type pos:start="1:34" pos:end="1:46"><name pos:start="1:34" pos:end="1:43">SCSIDevice</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:46">d</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:60"><decl pos:start="1:49" pos:end="1:60"><type pos:start="1:49" pos:end="1:60"><name pos:start="1:49" pos:end="1:56">uint32_t</name></type> <name pos:start="1:58" pos:end="1:60">tag</name></decl></parameter>,

                                 <parameter pos:start="3:34" pos:end="3:45"><decl pos:start="3:34" pos:end="3:45"><type pos:start="3:34" pos:end="3:45"><name pos:start="3:34" pos:end="3:40">uint8_t</name> <modifier pos:start="3:42" pos:end="3:42">*</modifier></type><name pos:start="3:43" pos:end="3:45">cmd</name></decl></parameter>, <parameter pos:start="3:48" pos:end="3:54"><decl pos:start="3:48" pos:end="3:54"><type pos:start="3:48" pos:end="3:54"><name pos:start="3:48" pos:end="3:50">int</name></type> <name pos:start="3:52" pos:end="3:54">lun</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="163:1">{<block_content pos:start="7:5" pos:end="161:27">

    <decl_stmt pos:start="7:5" pos:end="7:63"><decl pos:start="7:5" pos:end="7:62"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">SCSIGenericState</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:23">s</name> <init pos:start="7:25" pos:end="7:62">= <expr pos:start="7:27" pos:end="7:62"><call pos:start="7:27" pos:end="7:62"><name pos:start="7:27" pos:end="7:35">DO_UPCAST</name><argument_list pos:start="7:36" pos:end="7:62">(<argument pos:start="7:37" pos:end="7:52"><expr pos:start="7:37" pos:end="7:52"><name pos:start="7:37" pos:end="7:52">SCSIGenericState</name></expr></argument>, <argument pos:start="7:55" pos:end="7:58"><expr pos:start="7:55" pos:end="7:58"><name pos:start="7:55" pos:end="7:58">qdev</name></expr></argument>, <argument pos:start="7:61" pos:end="7:61"><expr pos:start="7:61" pos:end="7:61"><name pos:start="7:61" pos:end="7:61">d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:18">SCSIGenericReq</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:21">r</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">SCSIBus</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:16">bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:12"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="49:5"><if pos:start="17:5" pos:end="49:5">if <condition pos:start="17:8" pos:end="19:51">(<expr pos:start="17:9" pos:end="19:50"><name pos:start="17:9" pos:end="17:14"><name pos:start="17:9" pos:end="17:11">cmd</name><index pos:start="17:12" pos:end="17:14">[<expr pos:start="17:13" pos:end="17:13"><literal type="number" pos:start="17:13" pos:end="17:13">0</literal></expr>]</index></name> <operator pos:start="17:16" pos:end="17:17">!=</operator> <name pos:start="17:19" pos:end="17:31">REQUEST_SENSE</name> <operator pos:start="17:33" pos:end="17:34">&amp;&amp;</operator>

        <operator pos:start="19:9" pos:end="19:9">(</operator><name pos:start="19:10" pos:end="19:12">lun</name> <operator pos:start="19:14" pos:end="19:15">!=</operator> <name pos:start="19:17" pos:end="19:22"><name pos:start="19:17" pos:end="19:17">s</name><operator pos:start="19:18" pos:end="19:19">-&gt;</operator><name pos:start="19:20" pos:end="19:22">lun</name></name> <operator pos:start="19:24" pos:end="19:25">||</operator> <operator pos:start="19:27" pos:end="19:27">(</operator><name pos:start="19:28" pos:end="19:33"><name pos:start="19:28" pos:end="19:30">cmd</name><index pos:start="19:31" pos:end="19:33">[<expr pos:start="19:32" pos:end="19:32"><literal type="number" pos:start="19:32" pos:end="19:32">1</literal></expr>]</index></name> <operator pos:start="19:35" pos:end="19:36">&gt;&gt;</operator> <literal type="number" pos:start="19:38" pos:end="19:38">5</literal><operator pos:start="19:39" pos:end="19:39">)</operator> <operator pos:start="19:41" pos:end="19:42">!=</operator> <name pos:start="19:44" pos:end="19:49"><name pos:start="19:44" pos:end="19:44">s</name><operator pos:start="19:45" pos:end="19:46">-&gt;</operator><name pos:start="19:47" pos:end="19:49">lun</name></name><operator pos:start="19:50" pos:end="19:50">)</operator></expr>)</condition> <block pos:start="19:53" pos:end="49:5">{<block_content pos:start="21:9" pos:end="47:17">

        <expr_stmt pos:start="21:9" pos:end="21:67"><expr pos:start="21:9" pos:end="21:66"><call pos:start="21:9" pos:end="21:66"><name pos:start="21:9" pos:end="21:15">DPRINTF</name><argument_list pos:start="21:16" pos:end="21:66">(<argument pos:start="21:17" pos:end="21:40"><expr pos:start="21:17" pos:end="21:40"><literal type="string" pos:start="21:17" pos:end="21:40">"Unimplemented LUN %d\n"</literal></expr></argument>, <argument pos:start="21:43" pos:end="21:65"><expr pos:start="21:43" pos:end="21:65"><ternary pos:start="21:43" pos:end="21:65"><condition pos:start="21:43" pos:end="21:47"><expr pos:start="21:43" pos:end="21:45"><name pos:start="21:43" pos:end="21:45">lun</name></expr> ?</condition><then pos:start="21:49" pos:end="21:51"> <expr pos:start="21:49" pos:end="21:51"><name pos:start="21:49" pos:end="21:51">lun</name></expr> </then><else pos:start="21:53" pos:end="21:65">: <expr pos:start="21:55" pos:end="21:65"><name pos:start="21:55" pos:end="21:60"><name pos:start="21:55" pos:end="21:57">cmd</name><index pos:start="21:58" pos:end="21:60">[<expr pos:start="21:59" pos:end="21:59"><literal type="number" pos:start="21:59" pos:end="21:59">1</literal></expr>]</index></name> <operator pos:start="21:62" pos:end="21:63">&gt;&gt;</operator> <literal type="number" pos:start="21:65" pos:end="21:65">5</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="25:9" pos:end="25:30"><expr pos:start="25:9" pos:end="25:29"><name pos:start="25:9" pos:end="25:22"><name pos:start="25:9" pos:end="25:9">s</name><operator pos:start="25:10" pos:end="25:11">-&gt;</operator><name pos:start="25:12" pos:end="25:19">sensebuf</name><index pos:start="25:20" pos:end="25:22">[<expr pos:start="25:21" pos:end="25:21"><literal type="number" pos:start="25:21" pos:end="25:21">0</literal></expr>]</index></name> <operator pos:start="25:24" pos:end="25:24">=</operator> <literal type="number" pos:start="25:26" pos:end="25:29">0x70</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:30"><expr pos:start="27:9" pos:end="27:29"><name pos:start="27:9" pos:end="27:22"><name pos:start="27:9" pos:end="27:9">s</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:19">sensebuf</name><index pos:start="27:20" pos:end="27:22">[<expr pos:start="27:21" pos:end="27:21"><literal type="number" pos:start="27:21" pos:end="27:21">1</literal></expr>]</index></name> <operator pos:start="27:24" pos:end="27:24">=</operator> <literal type="number" pos:start="27:26" pos:end="27:29">0x00</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:41"><expr pos:start="29:9" pos:end="29:40"><name pos:start="29:9" pos:end="29:22"><name pos:start="29:9" pos:end="29:9">s</name><operator pos:start="29:10" pos:end="29:11">-&gt;</operator><name pos:start="29:12" pos:end="29:19">sensebuf</name><index pos:start="29:20" pos:end="29:22">[<expr pos:start="29:21" pos:end="29:21"><literal type="number" pos:start="29:21" pos:end="29:21">2</literal></expr>]</index></name> <operator pos:start="29:24" pos:end="29:24">=</operator> <name pos:start="29:26" pos:end="29:40">ILLEGAL_REQUEST</name></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:30"><expr pos:start="31:9" pos:end="31:29"><name pos:start="31:9" pos:end="31:22"><name pos:start="31:9" pos:end="31:9">s</name><operator pos:start="31:10" pos:end="31:11">-&gt;</operator><name pos:start="31:12" pos:end="31:19">sensebuf</name><index pos:start="31:20" pos:end="31:22">[<expr pos:start="31:21" pos:end="31:21"><literal type="number" pos:start="31:21" pos:end="31:21">3</literal></expr>]</index></name> <operator pos:start="31:24" pos:end="31:24">=</operator> <literal type="number" pos:start="31:26" pos:end="31:29">0x00</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:30"><expr pos:start="33:9" pos:end="33:29"><name pos:start="33:9" pos:end="33:22"><name pos:start="33:9" pos:end="33:9">s</name><operator pos:start="33:10" pos:end="33:11">-&gt;</operator><name pos:start="33:12" pos:end="33:19">sensebuf</name><index pos:start="33:20" pos:end="33:22">[<expr pos:start="33:21" pos:end="33:21"><literal type="number" pos:start="33:21" pos:end="33:21">4</literal></expr>]</index></name> <operator pos:start="33:24" pos:end="33:24">=</operator> <literal type="number" pos:start="33:26" pos:end="33:29">0x00</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:30"><expr pos:start="35:9" pos:end="35:29"><name pos:start="35:9" pos:end="35:22"><name pos:start="35:9" pos:end="35:9">s</name><operator pos:start="35:10" pos:end="35:11">-&gt;</operator><name pos:start="35:12" pos:end="35:19">sensebuf</name><index pos:start="35:20" pos:end="35:22">[<expr pos:start="35:21" pos:end="35:21"><literal type="number" pos:start="35:21" pos:end="35:21">5</literal></expr>]</index></name> <operator pos:start="35:24" pos:end="35:24">=</operator> <literal type="number" pos:start="35:26" pos:end="35:29">0x00</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:30"><expr pos:start="37:9" pos:end="37:29"><name pos:start="37:9" pos:end="37:22"><name pos:start="37:9" pos:end="37:9">s</name><operator pos:start="37:10" pos:end="37:11">-&gt;</operator><name pos:start="37:12" pos:end="37:19">sensebuf</name><index pos:start="37:20" pos:end="37:22">[<expr pos:start="37:21" pos:end="37:21"><literal type="number" pos:start="37:21" pos:end="37:21">6</literal></expr>]</index></name> <operator pos:start="37:24" pos:end="37:24">=</operator> <literal type="number" pos:start="37:26" pos:end="37:29">0x00</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:24"><expr pos:start="39:9" pos:end="39:23"><name pos:start="39:9" pos:end="39:19"><name pos:start="39:9" pos:end="39:9">s</name><operator pos:start="39:10" pos:end="39:11">-&gt;</operator><name pos:start="39:12" pos:end="39:19">senselen</name></name> <operator pos:start="39:21" pos:end="39:21">=</operator> <literal type="number" pos:start="39:23" pos:end="39:23">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:47"><expr pos:start="41:9" pos:end="41:46"><name pos:start="41:9" pos:end="41:24"><name pos:start="41:9" pos:end="41:9">s</name><operator pos:start="41:10" pos:end="41:11">-&gt;</operator><name pos:start="41:12" pos:end="41:24">driver_status</name></name> <operator pos:start="41:26" pos:end="41:26">=</operator> <name pos:start="41:28" pos:end="41:46">SG_ERR_DRIVER_SENSE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:38"><expr pos:start="43:9" pos:end="43:37"><name pos:start="43:9" pos:end="43:11">bus</name> <operator pos:start="43:13" pos:end="43:13">=</operator> <call pos:start="43:15" pos:end="43:37"><name pos:start="43:15" pos:end="43:34">scsi_bus_from_device</name><argument_list pos:start="43:35" pos:end="43:37">(<argument pos:start="43:36" pos:end="43:36"><expr pos:start="43:36" pos:end="43:36"><name pos:start="43:36" pos:end="43:36">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:72"><expr pos:start="45:9" pos:end="45:71"><call pos:start="45:9" pos:end="45:71"><name pos:start="45:9" pos:end="45:26"><name pos:start="45:9" pos:end="45:11">bus</name><operator pos:start="45:12" pos:end="45:13">-&gt;</operator><name pos:start="45:14" pos:end="45:16">ops</name><operator pos:start="45:17" pos:end="45:18">-&gt;</operator><name pos:start="45:19" pos:end="45:26">complete</name></name><argument_list pos:start="45:27" pos:end="45:71">(<argument pos:start="45:28" pos:end="45:30"><expr pos:start="45:28" pos:end="45:30"><name pos:start="45:28" pos:end="45:30">bus</name></expr></argument>, <argument pos:start="45:33" pos:end="45:48"><expr pos:start="45:33" pos:end="45:48"><name pos:start="45:33" pos:end="45:48">SCSI_REASON_DONE</name></expr></argument>, <argument pos:start="45:51" pos:end="45:53"><expr pos:start="45:51" pos:end="45:53"><name pos:start="45:51" pos:end="45:53">tag</name></expr></argument>, <argument pos:start="45:56" pos:end="45:70"><expr pos:start="45:56" pos:end="45:70"><name pos:start="45:56" pos:end="45:70">CHECK_CONDITION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="47:9" pos:end="47:17">return <expr pos:start="47:16" pos:end="47:16"><literal type="number" pos:start="47:16" pos:end="47:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:34"><expr pos:start="53:5" pos:end="53:33"><name pos:start="53:5" pos:end="53:5">r</name> <operator pos:start="53:7" pos:end="53:7">=</operator> <call pos:start="53:9" pos:end="53:33"><name pos:start="53:9" pos:end="53:25">scsi_find_request</name><argument_list pos:start="53:26" pos:end="53:33">(<argument pos:start="53:27" pos:end="53:27"><expr pos:start="53:27" pos:end="53:27"><name pos:start="53:27" pos:end="53:27">s</name></expr></argument>, <argument pos:start="53:30" pos:end="53:32"><expr pos:start="53:30" pos:end="53:32"><name pos:start="53:30" pos:end="53:32">tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="55:5" pos:end="61:5"><if pos:start="55:5" pos:end="61:5">if <condition pos:start="55:8" pos:end="55:10">(<expr pos:start="55:9" pos:end="55:9"><name pos:start="55:9" pos:end="55:9">r</name></expr>)</condition> <block pos:start="55:12" pos:end="61:5">{<block_content pos:start="57:9" pos:end="59:31">

        <expr_stmt pos:start="57:9" pos:end="57:53"><expr pos:start="57:9" pos:end="57:52"><call pos:start="57:9" pos:end="57:52"><name pos:start="57:9" pos:end="57:12">BADF</name><argument_list pos:start="57:13" pos:end="57:52">(<argument pos:start="57:14" pos:end="57:43"><expr pos:start="57:14" pos:end="57:43"><literal type="string" pos:start="57:14" pos:end="57:43">"Tag 0x%x already in use %p\n"</literal></expr></argument>, <argument pos:start="57:46" pos:end="57:48"><expr pos:start="57:46" pos:end="57:48"><name pos:start="57:46" pos:end="57:48">tag</name></expr></argument>, <argument pos:start="57:51" pos:end="57:51"><expr pos:start="57:51" pos:end="57:51"><name pos:start="57:51" pos:end="57:51">r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:31"><expr pos:start="59:9" pos:end="59:30"><call pos:start="59:9" pos:end="59:30"><name pos:start="59:9" pos:end="59:22">scsi_cancel_io</name><argument_list pos:start="59:23" pos:end="59:30">(<argument pos:start="59:24" pos:end="59:24"><expr pos:start="59:24" pos:end="59:24"><name pos:start="59:24" pos:end="59:24">d</name></expr></argument>, <argument pos:start="59:27" pos:end="59:29"><expr pos:start="59:27" pos:end="59:29"><name pos:start="59:27" pos:end="59:29">tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:38"><expr pos:start="63:5" pos:end="63:37"><name pos:start="63:5" pos:end="63:5">r</name> <operator pos:start="63:7" pos:end="63:7">=</operator> <call pos:start="63:9" pos:end="63:37"><name pos:start="63:9" pos:end="63:24">scsi_new_request</name><argument_list pos:start="63:25" pos:end="63:37">(<argument pos:start="63:26" pos:end="63:26"><expr pos:start="63:26" pos:end="63:26"><name pos:start="63:26" pos:end="63:26">d</name></expr></argument>, <argument pos:start="63:29" pos:end="63:31"><expr pos:start="63:29" pos:end="63:31"><name pos:start="63:29" pos:end="63:31">tag</name></expr></argument>, <argument pos:start="63:34" pos:end="63:36"><expr pos:start="63:34" pos:end="63:36"><name pos:start="63:34" pos:end="63:36">lun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="67:5" pos:end="75:5"><if pos:start="67:5" pos:end="75:5">if <condition pos:start="67:8" pos:end="67:43">(<expr pos:start="67:9" pos:end="67:42"><operator pos:start="67:9" pos:end="67:9">-</operator><literal type="number" pos:start="67:10" pos:end="67:10">1</literal> <operator pos:start="67:12" pos:end="67:13">==</operator> <call pos:start="67:15" pos:end="67:42"><name pos:start="67:15" pos:end="67:28">scsi_req_parse</name><argument_list pos:start="67:29" pos:end="67:42">(<argument pos:start="67:30" pos:end="67:36"><expr pos:start="67:30" pos:end="67:36"><operator pos:start="67:30" pos:end="67:30">&amp;</operator><name pos:start="67:31" pos:end="67:36"><name pos:start="67:31" pos:end="67:31">r</name><operator pos:start="67:32" pos:end="67:33">-&gt;</operator><name pos:start="67:34" pos:end="67:36">req</name></name></expr></argument>, <argument pos:start="67:39" pos:end="67:41"><expr pos:start="67:39" pos:end="67:41"><name pos:start="67:39" pos:end="67:41">cmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="67:45" pos:end="75:5">{<block_content pos:start="69:9" pos:end="73:17">

        <expr_stmt pos:start="69:9" pos:end="69:65"><expr pos:start="69:9" pos:end="69:64"><call pos:start="69:9" pos:end="69:64"><name pos:start="69:9" pos:end="69:12">BADF</name><argument_list pos:start="69:13" pos:end="69:64">(<argument pos:start="69:14" pos:end="69:55"><expr pos:start="69:14" pos:end="69:55"><literal type="string" pos:start="69:14" pos:end="69:55">"Unsupported command length, command %x\n"</literal></expr></argument>, <argument pos:start="69:58" pos:end="69:63"><expr pos:start="69:58" pos:end="69:63"><name pos:start="69:58" pos:end="69:63"><name pos:start="69:58" pos:end="69:60">cmd</name><index pos:start="69:61" pos:end="69:63">[<expr pos:start="69:62" pos:end="69:62"><literal type="number" pos:start="69:62" pos:end="69:62">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:31"><expr pos:start="71:9" pos:end="71:30"><call pos:start="71:9" pos:end="71:30"><name pos:start="71:9" pos:end="71:27">scsi_remove_request</name><argument_list pos:start="71:28" pos:end="71:30">(<argument pos:start="71:29" pos:end="71:29"><expr pos:start="71:29" pos:end="71:29"><name pos:start="71:29" pos:end="71:29">r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="73:9" pos:end="73:17">return <expr pos:start="73:16" pos:end="73:16"><literal type="number" pos:start="73:16" pos:end="73:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:28"><expr pos:start="77:5" pos:end="77:27"><call pos:start="77:5" pos:end="77:27"><name pos:start="77:5" pos:end="77:18">scsi_req_fixup</name><argument_list pos:start="77:19" pos:end="77:27">(<argument pos:start="77:20" pos:end="77:26"><expr pos:start="77:20" pos:end="77:26"><operator pos:start="77:20" pos:end="77:20">&amp;</operator><name pos:start="77:21" pos:end="77:26"><name pos:start="77:21" pos:end="77:21">r</name><operator pos:start="77:22" pos:end="77:23">-&gt;</operator><name pos:start="77:24" pos:end="77:26">req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="81:5" pos:end="88:0"><expr pos:start="81:5" pos:end="83:36"><call pos:start="81:5" pos:end="83:36"><name pos:start="81:5" pos:end="81:11">DPRINTF</name><argument_list pos:start="81:12" pos:end="83:36">(<argument pos:start="81:13" pos:end="81:58"><expr pos:start="81:13" pos:end="81:58"><literal type="string" pos:start="81:13" pos:end="81:58">"Command: lun=%d tag=0x%x len %zd data=0x%02x"</literal></expr></argument>, <argument pos:start="81:61" pos:end="81:63"><expr pos:start="81:61" pos:end="81:63"><name pos:start="81:61" pos:end="81:63">lun</name></expr></argument>, <argument pos:start="81:66" pos:end="81:68"><expr pos:start="81:66" pos:end="81:68"><name pos:start="81:66" pos:end="81:68">tag</name></expr></argument>,

            <argument pos:start="83:13" pos:end="83:27"><expr pos:start="83:13" pos:end="83:27"><name pos:start="83:13" pos:end="83:27"><name pos:start="83:13" pos:end="83:13">r</name><operator pos:start="83:14" pos:end="83:15">-&gt;</operator><name pos:start="83:16" pos:end="83:18">req</name><operator pos:start="83:19" pos:end="83:19">.</operator><name pos:start="83:20" pos:end="83:22">cmd</name><operator pos:start="83:23" pos:end="83:23">.</operator><name pos:start="83:24" pos:end="83:27">xfer</name></name></expr></argument>, <argument pos:start="83:30" pos:end="83:35"><expr pos:start="83:30" pos:end="83:35"><name pos:start="83:30" pos:end="83:35"><name pos:start="83:30" pos:end="83:32">cmd</name><index pos:start="83:33" pos:end="83:35">[<expr pos:start="83:34" pos:end="83:34"><literal type="number" pos:start="83:34" pos:end="83:34">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:ifdef pos:start="87:1" pos:end="87:17">#<cpp:directive pos:start="87:2" pos:end="87:6">ifdef</cpp:directive> <name pos:start="87:8" pos:end="87:17">DEBUG_SCSI</name></cpp:ifdef>

    <block pos:start="89:5" pos:end="104:0">{<block_content pos:start="91:9" pos:end="99:21">

        <decl_stmt pos:start="91:9" pos:end="91:14"><decl pos:start="91:9" pos:end="91:13"><type pos:start="91:9" pos:end="91:11"><name pos:start="91:9" pos:end="91:11">int</name></type> <name pos:start="91:13" pos:end="91:13">i</name></decl>;</decl_stmt>

        <for pos:start="93:9" pos:end="97:9">for <control pos:start="93:13" pos:end="93:44">(<init pos:start="93:14" pos:end="93:19"><expr pos:start="93:14" pos:end="93:18"><name pos:start="93:14" pos:end="93:14">i</name> <operator pos:start="93:16" pos:end="93:16">=</operator> <literal type="number" pos:start="93:18" pos:end="93:18">1</literal></expr>;</init> <condition pos:start="93:21" pos:end="93:39"><expr pos:start="93:21" pos:end="93:38"><name pos:start="93:21" pos:end="93:21">i</name> <operator pos:start="93:23" pos:end="93:23">&lt;</operator> <name pos:start="93:25" pos:end="93:38"><name pos:start="93:25" pos:end="93:25">r</name><operator pos:start="93:26" pos:end="93:27">-&gt;</operator><name pos:start="93:28" pos:end="93:30">req</name><operator pos:start="93:31" pos:end="93:31">.</operator><name pos:start="93:32" pos:end="93:34">cmd</name><operator pos:start="93:35" pos:end="93:35">.</operator><name pos:start="93:36" pos:end="93:38">len</name></name></expr>;</condition> <incr pos:start="93:41" pos:end="93:43"><expr pos:start="93:41" pos:end="93:43"><name pos:start="93:41" pos:end="93:41">i</name><operator pos:start="93:42" pos:end="93:43">++</operator></expr></incr>)</control> <block pos:start="93:46" pos:end="97:9">{<block_content pos:start="95:13" pos:end="95:38">

            <expr_stmt pos:start="95:13" pos:end="95:38"><expr pos:start="95:13" pos:end="95:37"><call pos:start="95:13" pos:end="95:37"><name pos:start="95:13" pos:end="95:18">printf</name><argument_list pos:start="95:19" pos:end="95:37">(<argument pos:start="95:20" pos:end="95:28"><expr pos:start="95:20" pos:end="95:28"><literal type="string" pos:start="95:20" pos:end="95:28">" 0x%02x"</literal></expr></argument>, <argument pos:start="95:31" pos:end="95:36"><expr pos:start="95:31" pos:end="95:36"><name pos:start="95:31" pos:end="95:36"><name pos:start="95:31" pos:end="95:33">cmd</name><index pos:start="95:34" pos:end="95:36">[<expr pos:start="95:35" pos:end="95:35"><name pos:start="95:35" pos:end="95:35">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="99:9" pos:end="99:21"><expr pos:start="99:9" pos:end="99:20"><call pos:start="99:9" pos:end="99:20"><name pos:start="99:9" pos:end="99:14">printf</name><argument_list pos:start="99:15" pos:end="99:20">(<argument pos:start="99:16" pos:end="99:19"><expr pos:start="99:16" pos:end="99:19"><literal type="string" pos:start="99:16" pos:end="99:19">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>

<cpp:endif pos:start="103:1" pos:end="103:6">#<cpp:directive pos:start="103:2" pos:end="103:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="107:5" pos:end="129:5"><if pos:start="107:5" pos:end="129:5">if <condition pos:start="107:8" pos:end="107:29">(<expr pos:start="107:9" pos:end="107:28"><name pos:start="107:9" pos:end="107:23"><name pos:start="107:9" pos:end="107:9">r</name><operator pos:start="107:10" pos:end="107:11">-&gt;</operator><name pos:start="107:12" pos:end="107:14">req</name><operator pos:start="107:15" pos:end="107:15">.</operator><name pos:start="107:16" pos:end="107:18">cmd</name><operator pos:start="107:19" pos:end="107:19">.</operator><name pos:start="107:20" pos:end="107:23">xfer</name></name> <operator pos:start="107:25" pos:end="107:26">==</operator> <literal type="number" pos:start="107:28" pos:end="107:28">0</literal></expr>)</condition> <block pos:start="107:31" pos:end="129:5">{<block_content pos:start="109:9" pos:end="127:17">

        <if_stmt pos:start="109:9" pos:end="111:30"><if pos:start="109:9" pos:end="111:30">if <condition pos:start="109:12" pos:end="109:27">(<expr pos:start="109:13" pos:end="109:26"><name pos:start="109:13" pos:end="109:18"><name pos:start="109:13" pos:end="109:13">r</name><operator pos:start="109:14" pos:end="109:15">-&gt;</operator><name pos:start="109:16" pos:end="109:18">buf</name></name> <operator pos:start="109:20" pos:end="109:21">!=</operator> <name pos:start="109:23" pos:end="109:26">NULL</name></expr>)</condition><block type="pseudo" pos:start="111:13" pos:end="111:30"><block_content pos:start="111:13" pos:end="111:30">

            <expr_stmt pos:start="111:13" pos:end="111:30"><expr pos:start="111:13" pos:end="111:29"><call pos:start="111:13" pos:end="111:29"><name pos:start="111:13" pos:end="111:21">qemu_free</name><argument_list pos:start="111:22" pos:end="111:29">(<argument pos:start="111:23" pos:end="111:28"><expr pos:start="111:23" pos:end="111:28"><name pos:start="111:23" pos:end="111:28"><name pos:start="111:23" pos:end="111:23">r</name><operator pos:start="111:24" pos:end="111:25">-&gt;</operator><name pos:start="111:26" pos:end="111:28">buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:22"><expr pos:start="113:9" pos:end="113:21"><name pos:start="113:9" pos:end="113:17"><name pos:start="113:9" pos:end="113:9">r</name><operator pos:start="113:10" pos:end="113:11">-&gt;</operator><name pos:start="113:12" pos:end="113:17">buflen</name></name> <operator pos:start="113:19" pos:end="113:19">=</operator> <literal type="number" pos:start="113:21" pos:end="113:21">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:22"><expr pos:start="115:9" pos:end="115:21"><name pos:start="115:9" pos:end="115:14"><name pos:start="115:9" pos:end="115:9">r</name><operator pos:start="115:10" pos:end="115:11">-&gt;</operator><name pos:start="115:12" pos:end="115:14">buf</name></name> <operator pos:start="115:16" pos:end="115:16">=</operator> <name pos:start="115:18" pos:end="115:21">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:78"><expr pos:start="117:9" pos:end="117:77"><name pos:start="117:9" pos:end="117:11">ret</name> <operator pos:start="117:13" pos:end="117:13">=</operator> <call pos:start="117:15" pos:end="117:77"><name pos:start="117:15" pos:end="117:29">execute_command</name><argument_list pos:start="117:30" pos:end="117:77">(<argument pos:start="117:31" pos:end="117:35"><expr pos:start="117:31" pos:end="117:35"><name pos:start="117:31" pos:end="117:35"><name pos:start="117:31" pos:end="117:31">s</name><operator pos:start="117:32" pos:end="117:33">-&gt;</operator><name pos:start="117:34" pos:end="117:35">bs</name></name></expr></argument>, <argument pos:start="117:38" pos:end="117:38"><expr pos:start="117:38" pos:end="117:38"><name pos:start="117:38" pos:end="117:38">r</name></expr></argument>, <argument pos:start="117:41" pos:end="117:53"><expr pos:start="117:41" pos:end="117:53"><name pos:start="117:41" pos:end="117:53">SG_DXFER_NONE</name></expr></argument>, <argument pos:start="117:56" pos:end="117:76"><expr pos:start="117:56" pos:end="117:76"><name pos:start="117:56" pos:end="117:76">scsi_command_complete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="119:9" pos:end="125:9"><if pos:start="119:9" pos:end="125:9">if <condition pos:start="119:12" pos:end="119:22">(<expr pos:start="119:13" pos:end="119:21"><name pos:start="119:13" pos:end="119:15">ret</name> <operator pos:start="119:17" pos:end="119:18">==</operator> <operator pos:start="119:20" pos:end="119:20">-</operator><literal type="number" pos:start="119:21" pos:end="119:21">1</literal></expr>)</condition> <block pos:start="119:24" pos:end="125:9">{<block_content pos:start="121:13" pos:end="123:21">

            <expr_stmt pos:start="121:13" pos:end="121:46"><expr pos:start="121:13" pos:end="121:45"><call pos:start="121:13" pos:end="121:45"><name pos:start="121:13" pos:end="121:33">scsi_command_complete</name><argument_list pos:start="121:34" pos:end="121:45">(<argument pos:start="121:35" pos:end="121:35"><expr pos:start="121:35" pos:end="121:35"><name pos:start="121:35" pos:end="121:35">r</name></expr></argument>, <argument pos:start="121:38" pos:end="121:44"><expr pos:start="121:38" pos:end="121:44"><operator pos:start="121:38" pos:end="121:38">-</operator><name pos:start="121:39" pos:end="121:44">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="123:13" pos:end="123:21">return <expr pos:start="123:20" pos:end="123:20"><literal type="number" pos:start="123:20" pos:end="123:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <return pos:start="127:9" pos:end="127:17">return <expr pos:start="127:16" pos:end="127:16"><literal type="number" pos:start="127:16" pos:end="127:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="133:5" pos:end="143:5"><if pos:start="133:5" pos:end="143:5">if <condition pos:start="133:8" pos:end="133:37">(<expr pos:start="133:9" pos:end="133:36"><name pos:start="133:9" pos:end="133:17"><name pos:start="133:9" pos:end="133:9">r</name><operator pos:start="133:10" pos:end="133:11">-&gt;</operator><name pos:start="133:12" pos:end="133:17">buflen</name></name> <operator pos:start="133:19" pos:end="133:20">!=</operator> <name pos:start="133:22" pos:end="133:36"><name pos:start="133:22" pos:end="133:22">r</name><operator pos:start="133:23" pos:end="133:24">-&gt;</operator><name pos:start="133:25" pos:end="133:27">req</name><operator pos:start="133:28" pos:end="133:28">.</operator><name pos:start="133:29" pos:end="133:31">cmd</name><operator pos:start="133:32" pos:end="133:32">.</operator><name pos:start="133:33" pos:end="133:36">xfer</name></name></expr>)</condition> <block pos:start="133:39" pos:end="143:5">{<block_content pos:start="135:9" pos:end="141:36">

        <if_stmt pos:start="135:9" pos:end="137:30"><if pos:start="135:9" pos:end="137:30">if <condition pos:start="135:12" pos:end="135:27">(<expr pos:start="135:13" pos:end="135:26"><name pos:start="135:13" pos:end="135:18"><name pos:start="135:13" pos:end="135:13">r</name><operator pos:start="135:14" pos:end="135:15">-&gt;</operator><name pos:start="135:16" pos:end="135:18">buf</name></name> <operator pos:start="135:20" pos:end="135:21">!=</operator> <name pos:start="135:23" pos:end="135:26">NULL</name></expr>)</condition><block type="pseudo" pos:start="137:13" pos:end="137:30"><block_content pos:start="137:13" pos:end="137:30">

            <expr_stmt pos:start="137:13" pos:end="137:30"><expr pos:start="137:13" pos:end="137:29"><call pos:start="137:13" pos:end="137:29"><name pos:start="137:13" pos:end="137:21">qemu_free</name><argument_list pos:start="137:22" pos:end="137:29">(<argument pos:start="137:23" pos:end="137:28"><expr pos:start="137:23" pos:end="137:28"><name pos:start="137:23" pos:end="137:28"><name pos:start="137:23" pos:end="137:23">r</name><operator pos:start="137:24" pos:end="137:25">-&gt;</operator><name pos:start="137:26" pos:end="137:28">buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:46"><expr pos:start="139:9" pos:end="139:45"><name pos:start="139:9" pos:end="139:14"><name pos:start="139:9" pos:end="139:9">r</name><operator pos:start="139:10" pos:end="139:11">-&gt;</operator><name pos:start="139:12" pos:end="139:14">buf</name></name> <operator pos:start="139:16" pos:end="139:16">=</operator> <call pos:start="139:18" pos:end="139:45"><name pos:start="139:18" pos:end="139:28">qemu_malloc</name><argument_list pos:start="139:29" pos:end="139:45">(<argument pos:start="139:30" pos:end="139:44"><expr pos:start="139:30" pos:end="139:44"><name pos:start="139:30" pos:end="139:44"><name pos:start="139:30" pos:end="139:30">r</name><operator pos:start="139:31" pos:end="139:32">-&gt;</operator><name pos:start="139:33" pos:end="139:35">req</name><operator pos:start="139:36" pos:end="139:36">.</operator><name pos:start="139:37" pos:end="139:39">cmd</name><operator pos:start="139:40" pos:end="139:40">.</operator><name pos:start="139:41" pos:end="139:44">xfer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="141:9" pos:end="141:36"><expr pos:start="141:9" pos:end="141:35"><name pos:start="141:9" pos:end="141:17"><name pos:start="141:9" pos:end="141:9">r</name><operator pos:start="141:10" pos:end="141:11">-&gt;</operator><name pos:start="141:12" pos:end="141:17">buflen</name></name> <operator pos:start="141:19" pos:end="141:19">=</operator> <name pos:start="141:21" pos:end="141:35"><name pos:start="141:21" pos:end="141:21">r</name><operator pos:start="141:22" pos:end="141:23">-&gt;</operator><name pos:start="141:24" pos:end="141:26">req</name><operator pos:start="141:27" pos:end="141:27">.</operator><name pos:start="141:28" pos:end="141:30">cmd</name><operator pos:start="141:31" pos:end="141:31">.</operator><name pos:start="141:32" pos:end="141:35">xfer</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="147:5" pos:end="147:33"><expr pos:start="147:5" pos:end="147:32"><call pos:start="147:5" pos:end="147:32"><name pos:start="147:5" pos:end="147:10">memset</name><argument_list pos:start="147:11" pos:end="147:32">(<argument pos:start="147:12" pos:end="147:17"><expr pos:start="147:12" pos:end="147:17"><name pos:start="147:12" pos:end="147:17"><name pos:start="147:12" pos:end="147:12">r</name><operator pos:start="147:13" pos:end="147:14">-&gt;</operator><name pos:start="147:15" pos:end="147:17">buf</name></name></expr></argument>, <argument pos:start="147:20" pos:end="147:20"><expr pos:start="147:20" pos:end="147:20"><literal type="number" pos:start="147:20" pos:end="147:20">0</literal></expr></argument>, <argument pos:start="147:23" pos:end="147:31"><expr pos:start="147:23" pos:end="147:31"><name pos:start="147:23" pos:end="147:31"><name pos:start="147:23" pos:end="147:23">r</name><operator pos:start="147:24" pos:end="147:25">-&gt;</operator><name pos:start="147:26" pos:end="147:31">buflen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="149:5" pos:end="149:29"><expr pos:start="149:5" pos:end="149:28"><name pos:start="149:5" pos:end="149:10"><name pos:start="149:5" pos:end="149:5">r</name><operator pos:start="149:6" pos:end="149:7">-&gt;</operator><name pos:start="149:8" pos:end="149:10">len</name></name> <operator pos:start="149:12" pos:end="149:12">=</operator> <name pos:start="149:14" pos:end="149:28"><name pos:start="149:14" pos:end="149:14">r</name><operator pos:start="149:15" pos:end="149:16">-&gt;</operator><name pos:start="149:17" pos:end="149:19">req</name><operator pos:start="149:20" pos:end="149:20">.</operator><name pos:start="149:21" pos:end="149:23">cmd</name><operator pos:start="149:24" pos:end="149:24">.</operator><name pos:start="149:25" pos:end="149:28">xfer</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="151:5" pos:end="157:5"><if pos:start="151:5" pos:end="157:5">if <condition pos:start="151:8" pos:end="151:44">(<expr pos:start="151:9" pos:end="151:43"><name pos:start="151:9" pos:end="151:23"><name pos:start="151:9" pos:end="151:9">r</name><operator pos:start="151:10" pos:end="151:11">-&gt;</operator><name pos:start="151:12" pos:end="151:14">req</name><operator pos:start="151:15" pos:end="151:15">.</operator><name pos:start="151:16" pos:end="151:18">cmd</name><operator pos:start="151:19" pos:end="151:19">.</operator><name pos:start="151:20" pos:end="151:23">mode</name></name> <operator pos:start="151:25" pos:end="151:26">==</operator> <name pos:start="151:28" pos:end="151:43">SCSI_XFER_TO_DEV</name></expr>)</condition> <block pos:start="151:46" pos:end="157:5">{<block_content pos:start="153:9" pos:end="155:32">

        <expr_stmt pos:start="153:9" pos:end="153:19"><expr pos:start="153:9" pos:end="153:18"><name pos:start="153:9" pos:end="153:14"><name pos:start="153:9" pos:end="153:9">r</name><operator pos:start="153:10" pos:end="153:11">-&gt;</operator><name pos:start="153:12" pos:end="153:14">len</name></name> <operator pos:start="153:16" pos:end="153:16">=</operator> <literal type="number" pos:start="153:18" pos:end="153:18">0</literal></expr>;</expr_stmt>

        <return pos:start="155:9" pos:end="155:32">return <expr pos:start="155:16" pos:end="155:31"><operator pos:start="155:16" pos:end="155:16">-</operator><name pos:start="155:17" pos:end="155:31"><name pos:start="155:17" pos:end="155:17">r</name><operator pos:start="155:18" pos:end="155:19">-&gt;</operator><name pos:start="155:20" pos:end="155:22">req</name><operator pos:start="155:23" pos:end="155:23">.</operator><name pos:start="155:24" pos:end="155:26">cmd</name><operator pos:start="155:27" pos:end="155:27">.</operator><name pos:start="155:28" pos:end="155:31">xfer</name></name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <return pos:start="161:5" pos:end="161:27">return <expr pos:start="161:12" pos:end="161:26"><name pos:start="161:12" pos:end="161:26"><name pos:start="161:12" pos:end="161:12">r</name><operator pos:start="161:13" pos:end="161:14">-&gt;</operator><name pos:start="161:15" pos:end="161:17">req</name><operator pos:start="161:18" pos:end="161:18">.</operator><name pos:start="161:19" pos:end="161:21">cmd</name><operator pos:start="161:22" pos:end="161:22">.</operator><name pos:start="161:23" pos:end="161:26">xfer</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
