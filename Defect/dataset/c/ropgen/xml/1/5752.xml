<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5752.c" pos:tabs="8"><function pos:start="1:1" pos:end="209:1"><type pos:start="1:1" pos:end="1:8"><name pos:start="1:1" pos:end="1:8">AUXReply</name></type> <name pos:start="1:10" pos:end="1:20">aux_request</name><parameter_list pos:start="1:21" pos:end="3:49">(<parameter pos:start="1:22" pos:end="1:32"><decl pos:start="1:22" pos:end="1:32"><type pos:start="1:22" pos:end="1:32"><name pos:start="1:22" pos:end="1:27">AUXBus</name> <modifier pos:start="1:29" pos:end="1:29">*</modifier></type><name pos:start="1:30" pos:end="1:32">bus</name></decl></parameter>, <parameter pos:start="1:35" pos:end="1:48"><decl pos:start="1:35" pos:end="1:48"><type pos:start="1:35" pos:end="1:48"><name pos:start="1:35" pos:end="1:44">AUXCommand</name></type> <name pos:start="1:46" pos:end="1:48">cmd</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:66"><decl pos:start="1:51" pos:end="1:66"><type pos:start="1:51" pos:end="1:66"><name pos:start="1:51" pos:end="1:58">uint32_t</name></type> <name pos:start="1:60" pos:end="1:66">address</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:33"><decl pos:start="3:23" pos:end="3:33"><type pos:start="3:23" pos:end="3:33"><name pos:start="3:23" pos:end="3:29">uint8_t</name></type> <name pos:start="3:31" pos:end="3:33">len</name></decl></parameter>, <parameter pos:start="3:36" pos:end="3:48"><decl pos:start="3:36" pos:end="3:48"><type pos:start="3:36" pos:end="3:48"><name pos:start="3:36" pos:end="3:42">uint8_t</name> <modifier pos:start="3:44" pos:end="3:44">*</modifier></type><name pos:start="3:45" pos:end="3:48">data</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="209:1">{<block_content pos:start="7:5" pos:end="207:15">

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">AUXReply</name></type> <name pos:start="7:14" pos:end="7:16">ret</name> <init pos:start="7:18" pos:end="7:27">= <expr pos:start="7:20" pos:end="7:27"><name pos:start="7:20" pos:end="7:27">AUX_NACK</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:43"><decl pos:start="9:5" pos:end="9:42"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:10">I2CBus</name> <modifier pos:start="9:12" pos:end="9:12">*</modifier></type><name pos:start="9:13" pos:end="9:19">i2c_bus</name> <init pos:start="9:21" pos:end="9:42">= <expr pos:start="9:23" pos:end="9:42"><call pos:start="9:23" pos:end="9:42"><name pos:start="9:23" pos:end="9:37">aux_get_i2c_bus</name><argument_list pos:start="9:38" pos:end="9:42">(<argument pos:start="9:39" pos:end="9:41"><expr pos:start="9:39" pos:end="9:41"><name pos:start="9:39" pos:end="9:41">bus</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:13"><decl pos:start="11:5" pos:end="11:12"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:10">size_t</name></type> <name pos:start="11:12" pos:end="11:12">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:26"><decl pos:start="13:5" pos:end="13:25"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">bool</name></type> <name pos:start="13:10" pos:end="13:17">is_write</name> <init pos:start="13:19" pos:end="13:25">= <expr pos:start="13:21" pos:end="13:25"><name pos:start="13:21" pos:end="13:25">false</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="19:22"><expr pos:start="17:5" pos:end="19:21"><call pos:start="17:5" pos:end="19:21"><name pos:start="17:5" pos:end="17:11">DPRINTF</name><argument_list pos:start="17:12" pos:end="19:21">(<argument pos:start="17:13" pos:end="17:68"><expr pos:start="17:13" pos:end="17:68"><literal type="string" pos:start="17:13" pos:end="17:36">"request at address 0x%"</literal> <name pos:start="17:38" pos:end="17:43">PRIX32</name> <literal type="string" pos:start="17:45" pos:end="17:68">", command %u, len %u\n"</literal></expr></argument>, <argument pos:start="17:71" pos:end="17:77"><expr pos:start="17:71" pos:end="17:77"><name pos:start="17:71" pos:end="17:77">address</name></expr></argument>,

            <argument pos:start="19:13" pos:end="19:15"><expr pos:start="19:13" pos:end="19:15"><name pos:start="19:13" pos:end="19:15">cmd</name></expr></argument>, <argument pos:start="19:18" pos:end="19:20"><expr pos:start="19:18" pos:end="19:20"><name pos:start="19:18" pos:end="19:20">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="23:5" pos:end="201:5">switch <condition pos:start="23:12" pos:end="23:16">(<expr pos:start="23:13" pos:end="23:15"><name pos:start="23:13" pos:end="23:15">cmd</name></expr>)</condition> <block pos:start="23:18" pos:end="201:5">{<block_content pos:start="31:5" pos:end="199:24">

    <comment type="block" pos:start="25:5" pos:end="29:7">/*

     * Forward the request on the AUX bus..

     */</comment>

    <case pos:start="31:5" pos:end="31:19">case <expr pos:start="31:10" pos:end="31:18"><name pos:start="31:10" pos:end="31:18">WRITE_AUX</name></expr>:</case>

    <case pos:start="33:5" pos:end="33:18">case <expr pos:start="33:10" pos:end="33:17"><name pos:start="33:10" pos:end="33:17">READ_AUX</name></expr>:</case>

        <expr_stmt pos:start="35:9" pos:end="35:50"><expr pos:start="35:9" pos:end="35:49"><name pos:start="35:9" pos:end="35:16">is_write</name> <operator pos:start="35:18" pos:end="35:18">=</operator> <ternary pos:start="35:20" pos:end="35:49"><condition pos:start="35:20" pos:end="35:36"><expr pos:start="35:20" pos:end="35:34"><name pos:start="35:20" pos:end="35:22">cmd</name> <operator pos:start="35:24" pos:end="35:25">==</operator> <name pos:start="35:27" pos:end="35:34">READ_AUX</name></expr> ?</condition><then pos:start="35:38" pos:end="35:42"> <expr pos:start="35:38" pos:end="35:42"><name pos:start="35:38" pos:end="35:42">false</name></expr> </then><else pos:start="35:44" pos:end="35:49">: <expr pos:start="35:46" pos:end="35:49"><name pos:start="35:46" pos:end="35:49">true</name></expr></else></ternary></expr>;</expr_stmt>

        <for pos:start="37:9" pos:end="55:9">for <control pos:start="37:13" pos:end="37:33">(<init pos:start="37:14" pos:end="37:19"><expr pos:start="37:14" pos:end="37:18"><name pos:start="37:14" pos:end="37:14">i</name> <operator pos:start="37:16" pos:end="37:16">=</operator> <literal type="number" pos:start="37:18" pos:end="37:18">0</literal></expr>;</init> <condition pos:start="37:21" pos:end="37:28"><expr pos:start="37:21" pos:end="37:27"><name pos:start="37:21" pos:end="37:21">i</name> <operator pos:start="37:23" pos:end="37:23">&lt;</operator> <name pos:start="37:25" pos:end="37:27">len</name></expr>;</condition> <incr pos:start="37:30" pos:end="37:32"><expr pos:start="37:30" pos:end="37:32"><name pos:start="37:30" pos:end="37:30">i</name><operator pos:start="37:31" pos:end="37:32">++</operator></expr></incr>)</control> <block pos:start="37:35" pos:end="55:9">{<block_content pos:start="39:13" pos:end="53:13">

            <if_stmt pos:start="39:13" pos:end="53:13"><if pos:start="39:13" pos:end="47:13">if <condition pos:start="39:16" pos:end="43:44">(<expr pos:start="39:17" pos:end="43:43"><operator pos:start="39:17" pos:end="39:17">!</operator><call pos:start="39:18" pos:end="43:43"><name pos:start="39:18" pos:end="39:33">address_space_rw</name><argument_list pos:start="39:34" pos:end="43:43">(<argument pos:start="39:35" pos:end="39:54"><expr pos:start="39:35" pos:end="39:54"><operator pos:start="39:35" pos:end="39:35">&amp;</operator><name pos:start="39:36" pos:end="39:54"><name pos:start="39:36" pos:end="39:38">bus</name><operator pos:start="39:39" pos:end="39:40">-&gt;</operator><name pos:start="39:41" pos:end="39:54">aux_addr_space</name></name></expr></argument>, <argument pos:start="39:57" pos:end="39:65"><expr pos:start="39:57" pos:end="39:65"><name pos:start="39:57" pos:end="39:63">address</name><operator pos:start="39:64" pos:end="39:65">++</operator></expr></argument>,

                                  <argument pos:start="41:35" pos:end="41:56"><expr pos:start="41:35" pos:end="41:56"><name pos:start="41:35" pos:end="41:56">MEMTXATTRS_UNSPECIFIED</name></expr></argument>, <argument pos:start="41:59" pos:end="41:64"><expr pos:start="41:59" pos:end="41:64"><name pos:start="41:59" pos:end="41:62">data</name><operator pos:start="41:63" pos:end="41:64">++</operator></expr></argument>, <argument pos:start="41:67" pos:end="41:67"><expr pos:start="41:67" pos:end="41:67"><literal type="number" pos:start="41:67" pos:end="41:67">1</literal></expr></argument>,

                                  <argument pos:start="43:35" pos:end="43:42"><expr pos:start="43:35" pos:end="43:42"><name pos:start="43:35" pos:end="43:42">is_write</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="43:46" pos:end="47:13">{<block_content pos:start="45:17" pos:end="45:34">

                <expr_stmt pos:start="45:17" pos:end="45:34"><expr pos:start="45:17" pos:end="45:33"><name pos:start="45:17" pos:end="45:19">ret</name> <operator pos:start="45:21" pos:end="45:21">=</operator> <name pos:start="45:23" pos:end="45:33">AUX_I2C_ACK</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="47:15" pos:end="53:13">else <block pos:start="47:20" pos:end="53:13">{<block_content pos:start="49:17" pos:end="51:22">

                <expr_stmt pos:start="49:17" pos:end="49:31"><expr pos:start="49:17" pos:end="49:30"><name pos:start="49:17" pos:end="49:19">ret</name> <operator pos:start="49:21" pos:end="49:21">=</operator> <name pos:start="49:23" pos:end="49:30">AUX_NACK</name></expr>;</expr_stmt>

                <break pos:start="51:17" pos:end="51:22">break;</break>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></for>

        <break pos:start="57:9" pos:end="57:14">break;</break>

    <comment type="block" pos:start="59:5" pos:end="63:7">/*

     * Classic I2C transactions..

     */</comment>

    <case pos:start="65:5" pos:end="65:18">case <expr pos:start="65:10" pos:end="65:17"><name pos:start="65:10" pos:end="65:17">READ_I2C</name></expr>:</case>

    <case pos:start="67:5" pos:end="67:19">case <expr pos:start="67:10" pos:end="67:18"><name pos:start="67:10" pos:end="67:18">WRITE_I2C</name></expr>:</case>

        <expr_stmt pos:start="69:9" pos:end="69:50"><expr pos:start="69:9" pos:end="69:49"><name pos:start="69:9" pos:end="69:16">is_write</name> <operator pos:start="69:18" pos:end="69:18">=</operator> <ternary pos:start="69:20" pos:end="69:49"><condition pos:start="69:20" pos:end="69:36"><expr pos:start="69:20" pos:end="69:34"><name pos:start="69:20" pos:end="69:22">cmd</name> <operator pos:start="69:24" pos:end="69:25">==</operator> <name pos:start="69:27" pos:end="69:34">READ_I2C</name></expr> ?</condition><then pos:start="69:38" pos:end="69:42"> <expr pos:start="69:38" pos:end="69:42"><name pos:start="69:38" pos:end="69:42">false</name></expr> </then><else pos:start="69:44" pos:end="69:49">: <expr pos:start="69:46" pos:end="69:49"><name pos:start="69:46" pos:end="69:49">true</name></expr></else></ternary></expr>;</expr_stmt>

        <if_stmt pos:start="71:9" pos:end="75:9"><if pos:start="71:9" pos:end="75:9">if <condition pos:start="71:12" pos:end="71:34">(<expr pos:start="71:13" pos:end="71:33"><call pos:start="71:13" pos:end="71:33"><name pos:start="71:13" pos:end="71:24">i2c_bus_busy</name><argument_list pos:start="71:25" pos:end="71:33">(<argument pos:start="71:26" pos:end="71:32"><expr pos:start="71:26" pos:end="71:32"><name pos:start="71:26" pos:end="71:32">i2c_bus</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="71:36" pos:end="75:9">{<block_content pos:start="73:13" pos:end="73:38">

            <expr_stmt pos:start="73:13" pos:end="73:38"><expr pos:start="73:13" pos:end="73:37"><call pos:start="73:13" pos:end="73:37"><name pos:start="73:13" pos:end="73:28">i2c_end_transfer</name><argument_list pos:start="73:29" pos:end="73:37">(<argument pos:start="73:30" pos:end="73:36"><expr pos:start="73:30" pos:end="73:36"><name pos:start="73:30" pos:end="73:36">i2c_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="79:9" pos:end="85:9"><if pos:start="79:9" pos:end="85:9">if <condition pos:start="79:12" pos:end="79:59">(<expr pos:start="79:13" pos:end="79:58"><call pos:start="79:13" pos:end="79:58"><name pos:start="79:13" pos:end="79:30">i2c_start_transfer</name><argument_list pos:start="79:31" pos:end="79:58">(<argument pos:start="79:32" pos:end="79:38"><expr pos:start="79:32" pos:end="79:38"><name pos:start="79:32" pos:end="79:38">i2c_bus</name></expr></argument>, <argument pos:start="79:41" pos:end="79:47"><expr pos:start="79:41" pos:end="79:47"><name pos:start="79:41" pos:end="79:47">address</name></expr></argument>, <argument pos:start="79:50" pos:end="79:57"><expr pos:start="79:50" pos:end="79:57"><name pos:start="79:50" pos:end="79:57">is_write</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="79:61" pos:end="85:9">{<block_content pos:start="81:13" pos:end="83:18">

            <expr_stmt pos:start="81:13" pos:end="81:31"><expr pos:start="81:13" pos:end="81:30"><name pos:start="81:13" pos:end="81:15">ret</name> <operator pos:start="81:17" pos:end="81:17">=</operator> <name pos:start="81:19" pos:end="81:30">AUX_I2C_NACK</name></expr>;</expr_stmt>

            <break pos:start="83:13" pos:end="83:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="89:9" pos:end="89:26"><expr pos:start="89:9" pos:end="89:25"><name pos:start="89:9" pos:end="89:11">ret</name> <operator pos:start="89:13" pos:end="89:13">=</operator> <name pos:start="89:15" pos:end="89:25">AUX_I2C_ACK</name></expr>;</expr_stmt>

        <while pos:start="91:9" pos:end="103:9">while <condition pos:start="91:15" pos:end="91:23">(<expr pos:start="91:16" pos:end="91:22"><name pos:start="91:16" pos:end="91:18">len</name> <operator pos:start="91:20" pos:end="91:20">&gt;</operator> <literal type="number" pos:start="91:22" pos:end="91:22">0</literal></expr>)</condition> <block pos:start="91:25" pos:end="103:9">{<block_content pos:start="93:13" pos:end="101:18">

            <if_stmt pos:start="93:13" pos:end="99:13"><if pos:start="93:13" pos:end="99:13">if <condition pos:start="93:16" pos:end="93:61">(<expr pos:start="93:17" pos:end="93:60"><call pos:start="93:17" pos:end="93:56"><name pos:start="93:17" pos:end="93:29">i2c_send_recv</name><argument_list pos:start="93:30" pos:end="93:56">(<argument pos:start="93:31" pos:end="93:37"><expr pos:start="93:31" pos:end="93:37"><name pos:start="93:31" pos:end="93:37">i2c_bus</name></expr></argument>, <argument pos:start="93:40" pos:end="93:45"><expr pos:start="93:40" pos:end="93:45"><name pos:start="93:40" pos:end="93:43">data</name><operator pos:start="93:44" pos:end="93:45">++</operator></expr></argument>, <argument pos:start="93:48" pos:end="93:55"><expr pos:start="93:48" pos:end="93:55"><name pos:start="93:48" pos:end="93:55">is_write</name></expr></argument>)</argument_list></call> <operator pos:start="93:58" pos:end="93:58">&lt;</operator> <literal type="number" pos:start="93:60" pos:end="93:60">0</literal></expr>)</condition> <block pos:start="93:63" pos:end="99:13">{<block_content pos:start="95:17" pos:end="97:22">

                <expr_stmt pos:start="95:17" pos:end="95:35"><expr pos:start="95:17" pos:end="95:34"><name pos:start="95:17" pos:end="95:19">ret</name> <operator pos:start="95:21" pos:end="95:21">=</operator> <name pos:start="95:23" pos:end="95:34">AUX_I2C_NACK</name></expr>;</expr_stmt>

                <break pos:start="97:17" pos:end="97:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:18"><expr pos:start="101:13" pos:end="101:17"><name pos:start="101:13" pos:end="101:15">len</name><operator pos:start="101:16" pos:end="101:17">--</operator></expr>;</expr_stmt>

        </block_content>}</block></while>

        <expr_stmt pos:start="105:9" pos:end="105:34"><expr pos:start="105:9" pos:end="105:33"><call pos:start="105:9" pos:end="105:33"><name pos:start="105:9" pos:end="105:24">i2c_end_transfer</name><argument_list pos:start="105:25" pos:end="105:33">(<argument pos:start="105:26" pos:end="105:32"><expr pos:start="105:26" pos:end="105:32"><name pos:start="105:26" pos:end="105:32">i2c_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="107:9" pos:end="107:14">break;</break>

    <comment type="block" pos:start="109:5" pos:end="123:7">/*

     * I2C MOT transactions.

     *

     * Here we send a start when:

     *  - We didn't start transaction yet.

     *  - We had a READ and we do a WRITE.

     *  - We changed the address.

     */</comment>

    <case pos:start="125:5" pos:end="125:23">case <expr pos:start="125:10" pos:end="125:22"><name pos:start="125:10" pos:end="125:22">WRITE_I2C_MOT</name></expr>:</case>

    <case pos:start="127:5" pos:end="127:22">case <expr pos:start="127:10" pos:end="127:21"><name pos:start="127:10" pos:end="127:21">READ_I2C_MOT</name></expr>:</case>

        <expr_stmt pos:start="129:9" pos:end="129:54"><expr pos:start="129:9" pos:end="129:53"><name pos:start="129:9" pos:end="129:16">is_write</name> <operator pos:start="129:18" pos:end="129:18">=</operator> <ternary pos:start="129:20" pos:end="129:53"><condition pos:start="129:20" pos:end="129:40"><expr pos:start="129:20" pos:end="129:38"><name pos:start="129:20" pos:end="129:22">cmd</name> <operator pos:start="129:24" pos:end="129:25">==</operator> <name pos:start="129:27" pos:end="129:38">READ_I2C_MOT</name></expr> ?</condition><then pos:start="129:42" pos:end="129:46"> <expr pos:start="129:42" pos:end="129:46"><name pos:start="129:42" pos:end="129:46">false</name></expr> </then><else pos:start="129:48" pos:end="129:53">: <expr pos:start="129:50" pos:end="129:53"><name pos:start="129:50" pos:end="129:53">true</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:27"><expr pos:start="131:9" pos:end="131:26"><name pos:start="131:9" pos:end="131:11">ret</name> <operator pos:start="131:13" pos:end="131:13">=</operator> <name pos:start="131:15" pos:end="131:26">AUX_I2C_NACK</name></expr>;</expr_stmt>

        <if_stmt pos:start="133:9" pos:end="165:9"><if pos:start="133:9" pos:end="147:9">if <condition pos:start="133:12" pos:end="133:35">(<expr pos:start="133:13" pos:end="133:34"><operator pos:start="133:13" pos:end="133:13">!</operator><call pos:start="133:14" pos:end="133:34"><name pos:start="133:14" pos:end="133:25">i2c_bus_busy</name><argument_list pos:start="133:26" pos:end="133:34">(<argument pos:start="133:27" pos:end="133:33"><expr pos:start="133:27" pos:end="133:33"><name pos:start="133:27" pos:end="133:33">i2c_bus</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="133:37" pos:end="147:9">{<block_content pos:start="141:13" pos:end="145:13">

            <comment type="block" pos:start="135:13" pos:end="139:15">/*

             * No transactions started..

             */</comment>

            <if_stmt pos:start="141:13" pos:end="145:13"><if pos:start="141:13" pos:end="145:13">if <condition pos:start="141:16" pos:end="141:63">(<expr pos:start="141:17" pos:end="141:62"><call pos:start="141:17" pos:end="141:62"><name pos:start="141:17" pos:end="141:34">i2c_start_transfer</name><argument_list pos:start="141:35" pos:end="141:62">(<argument pos:start="141:36" pos:end="141:42"><expr pos:start="141:36" pos:end="141:42"><name pos:start="141:36" pos:end="141:42">i2c_bus</name></expr></argument>, <argument pos:start="141:45" pos:end="141:51"><expr pos:start="141:45" pos:end="141:51"><name pos:start="141:45" pos:end="141:51">address</name></expr></argument>, <argument pos:start="141:54" pos:end="141:61"><expr pos:start="141:54" pos:end="141:61"><name pos:start="141:54" pos:end="141:61">is_write</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="141:65" pos:end="145:13">{<block_content pos:start="143:17" pos:end="143:22">

                <break pos:start="143:17" pos:end="143:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="147:11" pos:end="165:9">else if <condition pos:start="147:19" pos:end="149:50">(<expr pos:start="147:20" pos:end="149:49"><operator pos:start="147:20" pos:end="147:20">(</operator><name pos:start="147:21" pos:end="147:27">address</name> <operator pos:start="147:29" pos:end="147:30">!=</operator> <name pos:start="147:32" pos:end="147:52"><name pos:start="147:32" pos:end="147:34">bus</name><operator pos:start="147:35" pos:end="147:36">-&gt;</operator><name pos:start="147:37" pos:end="147:52">last_i2c_address</name></name><operator pos:start="147:53" pos:end="147:53">)</operator> <operator pos:start="147:55" pos:end="147:56">||</operator>

                   <operator pos:start="149:20" pos:end="149:20">(</operator><name pos:start="149:21" pos:end="149:41"><name pos:start="149:21" pos:end="149:23">bus</name><operator pos:start="149:24" pos:end="149:25">-&gt;</operator><name pos:start="149:26" pos:end="149:41">last_transaction</name></name> <operator pos:start="149:43" pos:end="149:44">!=</operator> <name pos:start="149:46" pos:end="149:48">cmd</name><operator pos:start="149:49" pos:end="149:49">)</operator></expr>)</condition> <block pos:start="149:52" pos:end="165:9">{<block_content pos:start="157:13" pos:end="163:13">

            <comment type="block" pos:start="151:13" pos:end="155:15">/*

             * Transaction started but we need to restart..

             */</comment>

            <expr_stmt pos:start="157:13" pos:end="157:38"><expr pos:start="157:13" pos:end="157:37"><call pos:start="157:13" pos:end="157:37"><name pos:start="157:13" pos:end="157:28">i2c_end_transfer</name><argument_list pos:start="157:29" pos:end="157:37">(<argument pos:start="157:30" pos:end="157:36"><expr pos:start="157:30" pos:end="157:36"><name pos:start="157:30" pos:end="157:36">i2c_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="159:13" pos:end="163:13"><if pos:start="159:13" pos:end="163:13">if <condition pos:start="159:16" pos:end="159:63">(<expr pos:start="159:17" pos:end="159:62"><call pos:start="159:17" pos:end="159:62"><name pos:start="159:17" pos:end="159:34">i2c_start_transfer</name><argument_list pos:start="159:35" pos:end="159:62">(<argument pos:start="159:36" pos:end="159:42"><expr pos:start="159:36" pos:end="159:42"><name pos:start="159:36" pos:end="159:42">i2c_bus</name></expr></argument>, <argument pos:start="159:45" pos:end="159:51"><expr pos:start="159:45" pos:end="159:51"><name pos:start="159:45" pos:end="159:51">address</name></expr></argument>, <argument pos:start="159:54" pos:end="159:61"><expr pos:start="159:54" pos:end="159:61"><name pos:start="159:54" pos:end="159:61">is_write</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="159:65" pos:end="163:13">{<block_content pos:start="161:17" pos:end="161:22">

                <break pos:start="161:17" pos:end="161:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="169:9" pos:end="169:36"><expr pos:start="169:9" pos:end="169:35"><name pos:start="169:9" pos:end="169:29"><name pos:start="169:9" pos:end="169:11">bus</name><operator pos:start="169:12" pos:end="169:13">-&gt;</operator><name pos:start="169:14" pos:end="169:29">last_transaction</name></name> <operator pos:start="169:31" pos:end="169:31">=</operator> <name pos:start="169:33" pos:end="169:35">cmd</name></expr>;</expr_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:40"><expr pos:start="171:9" pos:end="171:39"><name pos:start="171:9" pos:end="171:29"><name pos:start="171:9" pos:end="171:11">bus</name><operator pos:start="171:12" pos:end="171:13">-&gt;</operator><name pos:start="171:14" pos:end="171:29">last_i2c_address</name></name> <operator pos:start="171:31" pos:end="171:31">=</operator> <name pos:start="171:33" pos:end="171:39">address</name></expr>;</expr_stmt>

        <while pos:start="173:9" pos:end="185:9">while <condition pos:start="173:15" pos:end="173:23">(<expr pos:start="173:16" pos:end="173:22"><name pos:start="173:16" pos:end="173:18">len</name> <operator pos:start="173:20" pos:end="173:20">&gt;</operator> <literal type="number" pos:start="173:22" pos:end="173:22">0</literal></expr>)</condition> <block pos:start="173:25" pos:end="185:9">{<block_content pos:start="175:13" pos:end="183:18">

            <if_stmt pos:start="175:13" pos:end="181:13"><if pos:start="175:13" pos:end="181:13">if <condition pos:start="175:16" pos:end="175:61">(<expr pos:start="175:17" pos:end="175:60"><call pos:start="175:17" pos:end="175:56"><name pos:start="175:17" pos:end="175:29">i2c_send_recv</name><argument_list pos:start="175:30" pos:end="175:56">(<argument pos:start="175:31" pos:end="175:37"><expr pos:start="175:31" pos:end="175:37"><name pos:start="175:31" pos:end="175:37">i2c_bus</name></expr></argument>, <argument pos:start="175:40" pos:end="175:45"><expr pos:start="175:40" pos:end="175:45"><name pos:start="175:40" pos:end="175:43">data</name><operator pos:start="175:44" pos:end="175:45">++</operator></expr></argument>, <argument pos:start="175:48" pos:end="175:55"><expr pos:start="175:48" pos:end="175:55"><name pos:start="175:48" pos:end="175:55">is_write</name></expr></argument>)</argument_list></call> <operator pos:start="175:58" pos:end="175:58">&lt;</operator> <literal type="number" pos:start="175:60" pos:end="175:60">0</literal></expr>)</condition> <block pos:start="175:63" pos:end="181:13">{<block_content pos:start="177:17" pos:end="179:22">

                <expr_stmt pos:start="177:17" pos:end="177:42"><expr pos:start="177:17" pos:end="177:41"><call pos:start="177:17" pos:end="177:41"><name pos:start="177:17" pos:end="177:32">i2c_end_transfer</name><argument_list pos:start="177:33" pos:end="177:41">(<argument pos:start="177:34" pos:end="177:40"><expr pos:start="177:34" pos:end="177:40"><name pos:start="177:34" pos:end="177:40">i2c_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="179:17" pos:end="179:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="183:13" pos:end="183:18"><expr pos:start="183:13" pos:end="183:17"><name pos:start="183:13" pos:end="183:15">len</name><operator pos:start="183:16" pos:end="183:17">--</operator></expr>;</expr_stmt>

        </block_content>}</block></while>

        <if_stmt pos:start="187:9" pos:end="191:9"><if pos:start="187:9" pos:end="191:9">if <condition pos:start="187:12" pos:end="187:21">(<expr pos:start="187:13" pos:end="187:20"><name pos:start="187:13" pos:end="187:15">len</name> <operator pos:start="187:17" pos:end="187:18">==</operator> <literal type="number" pos:start="187:20" pos:end="187:20">0</literal></expr>)</condition> <block pos:start="187:23" pos:end="191:9">{<block_content pos:start="189:13" pos:end="189:30">

            <expr_stmt pos:start="189:13" pos:end="189:30"><expr pos:start="189:13" pos:end="189:29"><name pos:start="189:13" pos:end="189:15">ret</name> <operator pos:start="189:17" pos:end="189:17">=</operator> <name pos:start="189:19" pos:end="189:29">AUX_I2C_ACK</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="193:9" pos:end="193:14">break;</break>

    <default pos:start="195:5" pos:end="195:12">default:</default>

        <expr_stmt pos:start="197:9" pos:end="197:38"><expr pos:start="197:9" pos:end="197:37"><call pos:start="197:9" pos:end="197:37"><name pos:start="197:9" pos:end="197:15">DPRINTF</name><argument_list pos:start="197:16" pos:end="197:37">(<argument pos:start="197:17" pos:end="197:36"><expr pos:start="197:17" pos:end="197:36"><literal type="string" pos:start="197:17" pos:end="197:36">"Not implemented!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="199:9" pos:end="199:24">return <expr pos:start="199:16" pos:end="199:23"><name pos:start="199:16" pos:end="199:23">AUX_NACK</name></expr>;</return>

    </block_content>}</block></switch>



    <expr_stmt pos:start="205:5" pos:end="205:32"><expr pos:start="205:5" pos:end="205:31"><call pos:start="205:5" pos:end="205:31"><name pos:start="205:5" pos:end="205:11">DPRINTF</name><argument_list pos:start="205:12" pos:end="205:31">(<argument pos:start="205:13" pos:end="205:25"><expr pos:start="205:13" pos:end="205:25"><literal type="string" pos:start="205:13" pos:end="205:25">"reply: %u\n"</literal></expr></argument>, <argument pos:start="205:28" pos:end="205:30"><expr pos:start="205:28" pos:end="205:30"><name pos:start="205:28" pos:end="205:30">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="207:5" pos:end="207:15">return <expr pos:start="207:12" pos:end="207:14"><name pos:start="207:12" pos:end="207:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
