<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/23304.c" pos:tabs="8"><function pos:start="1:1" pos:end="65:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:21">vnc_display_init</name><parameter_list pos:start="1:22" pos:end="1:39">(<parameter pos:start="1:23" pos:end="1:38"><decl pos:start="1:23" pos:end="1:38"><type pos:start="1:23" pos:end="1:36"><name pos:start="1:23" pos:end="1:34">DisplayState</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:38">ds</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="65:1">{<block_content pos:start="5:5" pos:end="63:44">

    <decl_stmt pos:start="5:5" pos:end="5:44"><decl pos:start="5:5" pos:end="5:43"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">VncDisplay</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:18">vs</name> <init pos:start="5:20" pos:end="5:43">= <expr pos:start="5:22" pos:end="5:43"><call pos:start="5:22" pos:end="5:43"><name pos:start="5:22" pos:end="5:30">g_malloc0</name><argument_list pos:start="5:31" pos:end="5:43">(<argument pos:start="5:32" pos:end="5:42"><expr pos:start="5:32" pos:end="5:42"><sizeof pos:start="5:32" pos:end="5:42">sizeof<argument_list pos:start="5:38" pos:end="5:42">(<argument pos:start="5:39" pos:end="5:41"><expr pos:start="5:39" pos:end="5:41"><operator pos:start="5:39" pos:end="5:39">*</operator><name pos:start="5:40" pos:end="5:41">vs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:51"><expr pos:start="9:5" pos:end="9:50"><name pos:start="9:5" pos:end="9:7">dcl</name> <operator pos:start="9:9" pos:end="9:9">=</operator> <call pos:start="9:11" pos:end="9:50"><name pos:start="9:11" pos:end="9:19">g_malloc0</name><argument_list pos:start="9:20" pos:end="9:50">(<argument pos:start="9:21" pos:end="9:49"><expr pos:start="9:21" pos:end="9:49"><sizeof pos:start="9:21" pos:end="9:49">sizeof<argument_list pos:start="9:27" pos:end="9:49">(<argument pos:start="9:28" pos:end="9:48"><expr pos:start="9:28" pos:end="9:48"><name pos:start="9:28" pos:end="9:48">DisplayChangeListener</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:20"><expr pos:start="13:5" pos:end="13:19"><name pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:6">ds</name><operator pos:start="13:7" pos:end="13:8">-&gt;</operator><name pos:start="13:9" pos:end="13:14">opaque</name></name> <operator pos:start="13:16" pos:end="13:16">=</operator> <name pos:start="13:18" pos:end="13:19">vs</name></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:18"><expr pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:7">dcl</name><operator pos:start="15:8" pos:end="15:9">-&gt;</operator><name pos:start="15:10" pos:end="15:13">idle</name></name> <operator pos:start="15:15" pos:end="15:15">=</operator> <literal type="number" pos:start="15:17" pos:end="15:17">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:21"><expr pos:start="17:5" pos:end="17:20"><name pos:start="17:5" pos:end="17:15">vnc_display</name> <operator pos:start="17:17" pos:end="17:17">=</operator> <name pos:start="17:19" pos:end="17:20">vs</name></expr>;</expr_stmt>



    <expr_stmt pos:start="21:5" pos:end="24:0"><expr pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:13"><name pos:start="21:5" pos:end="21:6">vs</name><operator pos:start="21:7" pos:end="21:8">-&gt;</operator><name pos:start="21:9" pos:end="21:13">lsock</name></name> <operator pos:start="21:15" pos:end="21:15">=</operator> <operator pos:start="21:17" pos:end="21:17">-</operator><literal type="number" pos:start="21:18" pos:end="21:18">1</literal></expr>;</expr_stmt>

<cpp:ifdef pos:start="23:1" pos:end="23:20">#<cpp:directive pos:start="23:2" pos:end="23:6">ifdef</cpp:directive> <name pos:start="23:8" pos:end="23:20">CONFIG_VNC_WS</name></cpp:ifdef>

    <expr_stmt pos:start="25:5" pos:end="28:0"><expr pos:start="25:5" pos:end="25:21"><name pos:start="25:5" pos:end="25:16"><name pos:start="25:5" pos:end="25:6">vs</name><operator pos:start="25:7" pos:end="25:8">-&gt;</operator><name pos:start="25:9" pos:end="25:16">lwebsock</name></name> <operator pos:start="25:18" pos:end="25:18">=</operator> <operator pos:start="25:20" pos:end="25:20">-</operator><literal type="number" pos:start="25:21" pos:end="25:21">1</literal></expr>;</expr_stmt>

<cpp:endif pos:start="27:1" pos:end="27:6">#<cpp:directive pos:start="27:2" pos:end="27:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="31:5" pos:end="31:16"><expr pos:start="31:5" pos:end="31:15"><name pos:start="31:5" pos:end="31:10"><name pos:start="31:5" pos:end="31:6">vs</name><operator pos:start="31:7" pos:end="31:8">-&gt;</operator><name pos:start="31:9" pos:end="31:10">ds</name></name> <operator pos:start="31:12" pos:end="31:12">=</operator> <name pos:start="31:14" pos:end="31:15">ds</name></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:30"><expr pos:start="33:5" pos:end="33:29"><call pos:start="33:5" pos:end="33:29"><name pos:start="33:5" pos:end="33:15">QTAILQ_INIT</name><argument_list pos:start="33:16" pos:end="33:29">(<argument pos:start="33:17" pos:end="33:28"><expr pos:start="33:17" pos:end="33:28"><operator pos:start="33:17" pos:end="33:17">&amp;</operator><name pos:start="33:18" pos:end="33:28"><name pos:start="33:18" pos:end="33:19">vs</name><operator pos:start="33:20" pos:end="33:21">-&gt;</operator><name pos:start="33:22" pos:end="33:28">clients</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:27"><expr pos:start="35:5" pos:end="35:26"><name pos:start="35:5" pos:end="35:15"><name pos:start="35:5" pos:end="35:6">vs</name><operator pos:start="35:7" pos:end="35:8">-&gt;</operator><name pos:start="35:9" pos:end="35:15">expires</name></name> <operator pos:start="35:17" pos:end="35:17">=</operator> <name pos:start="35:19" pos:end="35:26">TIME_MAX</name></expr>;</expr_stmt>



    <if_stmt pos:start="39:5" pos:end="45:68"><if pos:start="39:5" pos:end="41:76">if <condition pos:start="39:8" pos:end="39:24">(<expr pos:start="39:9" pos:end="39:23"><name pos:start="39:9" pos:end="39:23">keyboard_layout</name></expr>)</condition><block type="pseudo" pos:start="41:9" pos:end="41:76"><block_content pos:start="41:9" pos:end="41:76">

        <expr_stmt pos:start="41:9" pos:end="41:76"><expr pos:start="41:9" pos:end="41:75"><name pos:start="41:9" pos:end="41:22"><name pos:start="41:9" pos:end="41:10">vs</name><operator pos:start="41:11" pos:end="41:12">-&gt;</operator><name pos:start="41:13" pos:end="41:22">kbd_layout</name></name> <operator pos:start="41:24" pos:end="41:24">=</operator> <call pos:start="41:26" pos:end="41:75"><name pos:start="41:26" pos:end="41:45">init_keyboard_layout</name><argument_list pos:start="41:46" pos:end="41:75">(<argument pos:start="41:47" pos:end="41:57"><expr pos:start="41:47" pos:end="41:57"><name pos:start="41:47" pos:end="41:57">name2keysym</name></expr></argument>, <argument pos:start="41:60" pos:end="41:74"><expr pos:start="41:60" pos:end="41:74"><name pos:start="41:60" pos:end="41:74">keyboard_layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="43:5" pos:end="45:68">else<block type="pseudo" pos:start="45:9" pos:end="45:68"><block_content pos:start="45:9" pos:end="45:68">

        <expr_stmt pos:start="45:9" pos:end="45:68"><expr pos:start="45:9" pos:end="45:67"><name pos:start="45:9" pos:end="45:22"><name pos:start="45:9" pos:end="45:10">vs</name><operator pos:start="45:11" pos:end="45:12">-&gt;</operator><name pos:start="45:13" pos:end="45:22">kbd_layout</name></name> <operator pos:start="45:24" pos:end="45:24">=</operator> <call pos:start="45:26" pos:end="45:67"><name pos:start="45:26" pos:end="45:45">init_keyboard_layout</name><argument_list pos:start="45:46" pos:end="45:67">(<argument pos:start="45:47" pos:end="45:57"><expr pos:start="45:47" pos:end="45:57"><name pos:start="45:47" pos:end="45:57">name2keysym</name></expr></argument>, <argument pos:start="45:60" pos:end="45:66"><expr pos:start="45:60" pos:end="45:66"><literal type="string" pos:start="45:60" pos:end="45:66">"en-us"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <if_stmt pos:start="49:5" pos:end="51:16"><if pos:start="49:5" pos:end="51:16">if <condition pos:start="49:8" pos:end="49:24">(<expr pos:start="49:9" pos:end="49:23"><operator pos:start="49:9" pos:end="49:9">!</operator><name pos:start="49:10" pos:end="49:23"><name pos:start="49:10" pos:end="49:11">vs</name><operator pos:start="49:12" pos:end="49:13">-&gt;</operator><name pos:start="49:14" pos:end="49:23">kbd_layout</name></name></expr>)</condition><block type="pseudo" pos:start="51:9" pos:end="51:16"><block_content pos:start="51:9" pos:end="51:16">

        <expr_stmt pos:start="51:9" pos:end="51:16"><expr pos:start="51:9" pos:end="51:15"><call pos:start="51:9" pos:end="51:15"><name pos:start="51:9" pos:end="51:12">exit</name><argument_list pos:start="51:13" pos:end="51:15">(<argument pos:start="51:14" pos:end="51:14"><expr pos:start="51:14" pos:end="51:14"><literal type="number" pos:start="51:14" pos:end="51:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:32"><expr pos:start="55:5" pos:end="55:31"><call pos:start="55:5" pos:end="55:31"><name pos:start="55:5" pos:end="55:19">qemu_mutex_init</name><argument_list pos:start="55:20" pos:end="55:31">(<argument pos:start="55:21" pos:end="55:30"><expr pos:start="55:21" pos:end="55:30"><operator pos:start="55:21" pos:end="55:21">&amp;</operator><name pos:start="55:22" pos:end="55:30"><name pos:start="55:22" pos:end="55:23">vs</name><operator pos:start="55:24" pos:end="55:25">-&gt;</operator><name pos:start="55:26" pos:end="55:30">mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:30"><expr pos:start="57:5" pos:end="57:29"><call pos:start="57:5" pos:end="57:29"><name pos:start="57:5" pos:end="57:27">vnc_start_worker_thread</name><argument_list pos:start="57:28" pos:end="57:29">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:24"><expr pos:start="61:5" pos:end="61:23"><name pos:start="61:5" pos:end="61:12"><name pos:start="61:5" pos:end="61:7">dcl</name><operator pos:start="61:8" pos:end="61:9">-&gt;</operator><name pos:start="61:10" pos:end="61:12">ops</name></name> <operator pos:start="61:14" pos:end="61:14">=</operator> <operator pos:start="61:16" pos:end="61:16">&amp;</operator><name pos:start="61:17" pos:end="61:23">dcl_ops</name></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:44"><expr pos:start="63:5" pos:end="63:43"><call pos:start="63:5" pos:end="63:43"><name pos:start="63:5" pos:end="63:34">register_displaychangelistener</name><argument_list pos:start="63:35" pos:end="63:43">(<argument pos:start="63:36" pos:end="63:37"><expr pos:start="63:36" pos:end="63:37"><name pos:start="63:36" pos:end="63:37">ds</name></expr></argument>, <argument pos:start="63:40" pos:end="63:42"><expr pos:start="63:40" pos:end="63:42"><name pos:start="63:40" pos:end="63:42">dcl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
