<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4357.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:31"><name pos:start="1:1" pos:end="1:8">writev_f</name><argument_list pos:start="1:9" pos:end="1:31">(<argument pos:start="1:10" pos:end="1:17">int argc</argument>, <argument pos:start="1:20" pos:end="1:30">char **argv</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="133:1">{<block_content pos:start="5:9" pos:end="131:17">

	<decl_stmt pos:start="5:9" pos:end="5:30"><decl pos:start="5:9" pos:end="5:25"><type pos:start="5:9" pos:end="5:22"><name pos:start="5:9" pos:end="5:22"><name pos:start="5:9" pos:end="5:14">struct</name> <name pos:start="5:16" pos:end="5:22">timeval</name></name></type> <name pos:start="5:24" pos:end="5:25">t1</name></decl>, <decl pos:start="5:28" pos:end="5:29"><type ref="prev" pos:start="5:9" pos:end="5:22"/><name pos:start="5:28" pos:end="5:29">t2</name></decl>;</decl_stmt>

	<decl_stmt pos:start="7:9" pos:end="7:33"><decl pos:start="7:9" pos:end="7:21"><type pos:start="7:9" pos:end="7:11"><name pos:start="7:9" pos:end="7:11">int</name></type> <name pos:start="7:13" pos:end="7:17">Cflag</name> <init pos:start="7:19" pos:end="7:21">= <expr pos:start="7:21" pos:end="7:21"><literal type="number" pos:start="7:21" pos:end="7:21">0</literal></expr></init></decl>, <decl pos:start="7:24" pos:end="7:32"><type ref="prev" pos:start="7:9" pos:end="7:11"/><name pos:start="7:24" pos:end="7:28">qflag</name> <init pos:start="7:30" pos:end="7:32">= <expr pos:start="7:32" pos:end="7:32"><literal type="number" pos:start="7:32" pos:end="7:32">0</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="9:9" pos:end="9:19"><decl pos:start="9:9" pos:end="9:13"><type pos:start="9:9" pos:end="9:11"><name pos:start="9:9" pos:end="9:11">int</name></type> <name pos:start="9:13" pos:end="9:13">c</name></decl>, <decl pos:start="9:16" pos:end="9:18"><type ref="prev" pos:start="9:9" pos:end="9:11"/><name pos:start="9:16" pos:end="9:18">cnt</name></decl>;</decl_stmt>

	<decl_stmt pos:start="11:9" pos:end="11:18"><decl pos:start="11:9" pos:end="11:17"><type pos:start="11:9" pos:end="11:14"><name pos:start="11:9" pos:end="11:12">char</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:17">buf</name></decl>;</decl_stmt>

	<decl_stmt pos:start="13:9" pos:end="13:23"><decl pos:start="13:9" pos:end="13:22"><type pos:start="13:9" pos:end="13:15"><name pos:start="13:9" pos:end="13:15">int64_t</name></type> <name pos:start="13:17" pos:end="13:22">offset</name></decl>;</decl_stmt>

	<decl_stmt pos:start="15:9" pos:end="15:18"><decl pos:start="15:9" pos:end="15:17"><type pos:start="15:9" pos:end="15:11"><name pos:start="15:9" pos:end="15:11">int</name></type> <name pos:start="15:13" pos:end="15:17">total</name></decl>;</decl_stmt>

	<decl_stmt pos:start="17:9" pos:end="17:19"><decl pos:start="17:9" pos:end="17:18"><type pos:start="17:9" pos:end="17:11"><name pos:start="17:9" pos:end="17:11">int</name></type> <name pos:start="17:13" pos:end="17:18">nr_iov</name></decl>;</decl_stmt>

	<decl_stmt pos:start="19:9" pos:end="19:27"><decl pos:start="19:9" pos:end="19:26"><type pos:start="19:9" pos:end="19:11"><name pos:start="19:9" pos:end="19:11">int</name></type> <name pos:start="19:13" pos:end="19:19">pattern</name> <init pos:start="19:21" pos:end="19:26">= <expr pos:start="19:23" pos:end="19:26"><literal type="number" pos:start="19:23" pos:end="19:26">0xcd</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="21:9" pos:end="21:26"><decl pos:start="21:9" pos:end="21:25"><type pos:start="21:9" pos:end="21:20"><name pos:start="21:9" pos:end="21:20">QEMUIOVector</name></type> <name pos:start="21:22" pos:end="21:25">qiov</name></decl>;</decl_stmt>



	<while pos:start="25:9" pos:end="53:9">while <condition pos:start="25:15" pos:end="25:55">(<expr pos:start="25:16" pos:end="25:54"><operator pos:start="25:16" pos:end="25:16">(</operator><name pos:start="25:17" pos:end="25:17">c</name> <operator pos:start="25:19" pos:end="25:19">=</operator> <call pos:start="25:21" pos:end="25:46"><name pos:start="25:21" pos:end="25:26">getopt</name><argument_list pos:start="25:27" pos:end="25:46">(<argument pos:start="25:28" pos:end="25:31"><expr pos:start="25:28" pos:end="25:31"><name pos:start="25:28" pos:end="25:31">argc</name></expr></argument>, <argument pos:start="25:34" pos:end="25:37"><expr pos:start="25:34" pos:end="25:37"><name pos:start="25:34" pos:end="25:37">argv</name></expr></argument>, <argument pos:start="25:40" pos:end="25:45"><expr pos:start="25:40" pos:end="25:45"><literal type="string" pos:start="25:40" pos:end="25:45">"CqP:"</literal></expr></argument>)</argument_list></call><operator pos:start="25:47" pos:end="25:47">)</operator> <operator pos:start="25:49" pos:end="25:50">!=</operator> <name pos:start="25:52" pos:end="25:54">EOF</name></expr>)</condition> <block pos:start="25:57" pos:end="53:9">{<block_content pos:start="27:17" pos:end="51:17">

		<switch pos:start="27:17" pos:end="51:17">switch <condition pos:start="27:24" pos:end="27:26">(<expr pos:start="27:25" pos:end="27:25"><name pos:start="27:25" pos:end="27:25">c</name></expr>)</condition> <block pos:start="27:28" pos:end="51:17">{<block_content pos:start="29:17" pos:end="49:58">

		<case pos:start="29:17" pos:end="29:25">case <expr pos:start="29:22" pos:end="29:24"><literal type="char" pos:start="29:22" pos:end="29:24">'C'</literal></expr>:</case>

			<expr_stmt pos:start="31:25" pos:end="31:34"><expr pos:start="31:25" pos:end="31:33"><name pos:start="31:25" pos:end="31:29">Cflag</name> <operator pos:start="31:31" pos:end="31:31">=</operator> <literal type="number" pos:start="31:33" pos:end="31:33">1</literal></expr>;</expr_stmt>

			<break pos:start="33:25" pos:end="33:30">break;</break>

		<case pos:start="35:17" pos:end="35:25">case <expr pos:start="35:22" pos:end="35:24"><literal type="char" pos:start="35:22" pos:end="35:24">'q'</literal></expr>:</case>

			<expr_stmt pos:start="37:25" pos:end="37:34"><expr pos:start="37:25" pos:end="37:33"><name pos:start="37:25" pos:end="37:29">qflag</name> <operator pos:start="37:31" pos:end="37:31">=</operator> <literal type="number" pos:start="37:33" pos:end="37:33">1</literal></expr>;</expr_stmt>

			<break pos:start="39:25" pos:end="39:30">break;</break>

		<case pos:start="41:17" pos:end="41:25">case <expr pos:start="41:22" pos:end="41:24"><literal type="char" pos:start="41:22" pos:end="41:24">'P'</literal></expr>:</case>

			<expr_stmt pos:start="43:25" pos:end="43:47"><expr pos:start="43:25" pos:end="43:46"><name pos:start="43:25" pos:end="43:31">pattern</name> <operator pos:start="43:33" pos:end="43:33">=</operator> <call pos:start="43:35" pos:end="43:46"><name pos:start="43:35" pos:end="43:38">atoi</name><argument_list pos:start="43:39" pos:end="43:46">(<argument pos:start="43:40" pos:end="43:45"><expr pos:start="43:40" pos:end="43:45"><name pos:start="43:40" pos:end="43:45">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<break pos:start="45:25" pos:end="45:30">break;</break>

		<default pos:start="47:17" pos:end="47:24">default:</default>

			<return pos:start="49:25" pos:end="49:58">return <expr pos:start="49:32" pos:end="49:57"><call pos:start="49:32" pos:end="49:57"><name pos:start="49:32" pos:end="49:44">command_usage</name><argument_list pos:start="49:45" pos:end="49:57">(<argument pos:start="49:46" pos:end="49:56"><expr pos:start="49:46" pos:end="49:56"><operator pos:start="49:46" pos:end="49:46">&amp;</operator><name pos:start="49:47" pos:end="49:56">writev_cmd</name></expr></argument>)</argument_list></call></expr>;</return>

		</block_content>}</block></switch>

	</block_content>}</block></while>



	<if_stmt pos:start="57:9" pos:end="59:50"><if pos:start="57:9" pos:end="59:50">if <condition pos:start="57:12" pos:end="57:30">(<expr pos:start="57:13" pos:end="57:29"><name pos:start="57:13" pos:end="57:18">optind</name> <operator pos:start="57:20" pos:end="57:20">&gt;</operator> <name pos:start="57:22" pos:end="57:25">argc</name> <operator pos:start="57:27" pos:end="57:27">-</operator> <literal type="number" pos:start="57:29" pos:end="57:29">2</literal></expr>)</condition><block type="pseudo" pos:start="59:17" pos:end="59:50"><block_content pos:start="59:17" pos:end="59:50">

		<return pos:start="59:17" pos:end="59:50">return <expr pos:start="59:24" pos:end="59:49"><call pos:start="59:24" pos:end="59:49"><name pos:start="59:24" pos:end="59:36">command_usage</name><argument_list pos:start="59:37" pos:end="59:49">(<argument pos:start="59:38" pos:end="59:48"><expr pos:start="59:38" pos:end="59:48"><operator pos:start="59:38" pos:end="59:38">&amp;</operator><name pos:start="59:39" pos:end="59:48">writev_cmd</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



	<expr_stmt pos:start="63:9" pos:end="63:38"><expr pos:start="63:9" pos:end="63:37"><name pos:start="63:9" pos:end="63:14">offset</name> <operator pos:start="63:16" pos:end="63:16">=</operator> <call pos:start="63:18" pos:end="63:37"><name pos:start="63:18" pos:end="63:23">cvtnum</name><argument_list pos:start="63:24" pos:end="63:37">(<argument pos:start="63:25" pos:end="63:36"><expr pos:start="63:25" pos:end="63:36"><name pos:start="63:25" pos:end="63:36"><name pos:start="63:25" pos:end="63:28">argv</name><index pos:start="63:29" pos:end="63:36">[<expr pos:start="63:30" pos:end="63:35"><name pos:start="63:30" pos:end="63:35">optind</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt pos:start="65:9" pos:end="71:9"><if pos:start="65:9" pos:end="71:9">if <condition pos:start="65:12" pos:end="65:23">(<expr pos:start="65:13" pos:end="65:22"><name pos:start="65:13" pos:end="65:18">offset</name> <operator pos:start="65:20" pos:end="65:20">&lt;</operator> <literal type="number" pos:start="65:22" pos:end="65:22">0</literal></expr>)</condition> <block pos:start="65:25" pos:end="71:9">{<block_content pos:start="67:17" pos:end="69:25">

		<expr_stmt pos:start="67:17" pos:end="67:76"><expr pos:start="67:17" pos:end="67:75"><call pos:start="67:17" pos:end="67:75"><name pos:start="67:17" pos:end="67:22">printf</name><argument_list pos:start="67:23" pos:end="67:75">(<argument pos:start="67:24" pos:end="67:60"><expr pos:start="67:24" pos:end="67:60"><literal type="string" pos:start="67:24" pos:end="67:60">"non-numeric length argument -- %s\n"</literal></expr></argument>, <argument pos:start="67:63" pos:end="67:74"><expr pos:start="67:63" pos:end="67:74"><name pos:start="67:63" pos:end="67:74"><name pos:start="67:63" pos:end="67:66">argv</name><index pos:start="67:67" pos:end="67:74">[<expr pos:start="67:68" pos:end="67:73"><name pos:start="67:68" pos:end="67:73">optind</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return pos:start="69:17" pos:end="69:25">return <expr pos:start="69:24" pos:end="69:24"><literal type="number" pos:start="69:24" pos:end="69:24">0</literal></expr>;</return>

	</block_content>}</block></if></if_stmt>

	<expr_stmt pos:start="73:9" pos:end="73:17"><expr pos:start="73:9" pos:end="73:16"><name pos:start="73:9" pos:end="73:14">optind</name><operator pos:start="73:15" pos:end="73:16">++</operator></expr>;</expr_stmt>



	<if_stmt pos:start="77:9" pos:end="85:9"><if pos:start="77:9" pos:end="85:9">if <condition pos:start="77:12" pos:end="77:27">(<expr pos:start="77:13" pos:end="77:26"><name pos:start="77:13" pos:end="77:18">offset</name> <operator pos:start="77:20" pos:end="77:20">&amp;</operator> <literal type="number" pos:start="77:22" pos:end="77:26">0x1ff</literal></expr>)</condition> <block pos:start="77:29" pos:end="85:9">{<block_content pos:start="79:17" pos:end="83:25">

		<expr_stmt pos:start="79:17" pos:end="81:43"><expr pos:start="79:17" pos:end="81:42"><call pos:start="79:17" pos:end="81:42"><name pos:start="79:17" pos:end="79:22">printf</name><argument_list pos:start="79:23" pos:end="81:42">(<argument pos:start="79:24" pos:end="79:60"><expr pos:start="79:24" pos:end="79:60"><literal type="string" pos:start="79:24" pos:end="79:60">"offset %lld is not sector aligned\n"</literal></expr></argument>,

			<argument pos:start="81:25" pos:end="81:41"><expr pos:start="81:25" pos:end="81:41"><operator pos:start="81:25" pos:end="81:25">(</operator><name pos:start="81:26" pos:end="81:29">long</name> <name pos:start="81:31" pos:end="81:34">long</name><operator pos:start="81:35" pos:end="81:35">)</operator><name pos:start="81:36" pos:end="81:41">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return pos:start="83:17" pos:end="83:25">return <expr pos:start="83:24" pos:end="83:24"><literal type="number" pos:start="83:24" pos:end="83:24">0</literal></expr>;</return>

	</block_content>}</block></if></if_stmt>



	<expr_stmt pos:start="89:9" pos:end="89:31"><expr pos:start="89:9" pos:end="89:30"><name pos:start="89:9" pos:end="89:14">nr_iov</name> <operator pos:start="89:16" pos:end="89:16">=</operator> <name pos:start="89:18" pos:end="89:21">argc</name> <operator pos:start="89:23" pos:end="89:23">-</operator> <name pos:start="89:25" pos:end="89:30">optind</name></expr>;</expr_stmt>

	<expr_stmt pos:start="91:9" pos:end="91:66"><expr pos:start="91:9" pos:end="91:65"><name pos:start="91:9" pos:end="91:11">buf</name> <operator pos:start="91:13" pos:end="91:13">=</operator> <call pos:start="91:15" pos:end="91:65"><name pos:start="91:15" pos:end="91:26">create_iovec</name><argument_list pos:start="91:27" pos:end="91:65">(<argument pos:start="91:28" pos:end="91:32"><expr pos:start="91:28" pos:end="91:32"><operator pos:start="91:28" pos:end="91:28">&amp;</operator><name pos:start="91:29" pos:end="91:32">qiov</name></expr></argument>, <argument pos:start="91:35" pos:end="91:47"><expr pos:start="91:35" pos:end="91:47"><operator pos:start="91:35" pos:end="91:35">&amp;</operator><name pos:start="91:36" pos:end="91:47"><name pos:start="91:36" pos:end="91:39">argv</name><index pos:start="91:40" pos:end="91:47">[<expr pos:start="91:41" pos:end="91:46"><name pos:start="91:41" pos:end="91:46">optind</name></expr>]</index></name></expr></argument>, <argument pos:start="91:50" pos:end="91:55"><expr pos:start="91:50" pos:end="91:55"><name pos:start="91:50" pos:end="91:55">nr_iov</name></expr></argument>, <argument pos:start="91:58" pos:end="91:64"><expr pos:start="91:58" pos:end="91:64"><name pos:start="91:58" pos:end="91:64">pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<expr_stmt pos:start="95:9" pos:end="95:32"><expr pos:start="95:9" pos:end="95:31"><call pos:start="95:9" pos:end="95:31"><name pos:start="95:9" pos:end="95:20">gettimeofday</name><argument_list pos:start="95:21" pos:end="95:31">(<argument pos:start="95:22" pos:end="95:24"><expr pos:start="95:22" pos:end="95:24"><operator pos:start="95:22" pos:end="95:22">&amp;</operator><name pos:start="95:23" pos:end="95:24">t1</name></expr></argument>, <argument pos:start="95:27" pos:end="95:30"><expr pos:start="95:27" pos:end="95:30"><name pos:start="95:27" pos:end="95:30">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="97:9" pos:end="97:51"><expr pos:start="97:9" pos:end="97:50"><name pos:start="97:9" pos:end="97:11">cnt</name> <operator pos:start="97:13" pos:end="97:13">=</operator> <call pos:start="97:15" pos:end="97:50"><name pos:start="97:15" pos:end="97:27">do_aio_writev</name><argument_list pos:start="97:28" pos:end="97:50">(<argument pos:start="97:29" pos:end="97:33"><expr pos:start="97:29" pos:end="97:33"><operator pos:start="97:29" pos:end="97:29">&amp;</operator><name pos:start="97:30" pos:end="97:33">qiov</name></expr></argument>, <argument pos:start="97:36" pos:end="97:41"><expr pos:start="97:36" pos:end="97:41"><name pos:start="97:36" pos:end="97:41">offset</name></expr></argument>, <argument pos:start="97:44" pos:end="97:49"><expr pos:start="97:44" pos:end="97:49"><operator pos:start="97:44" pos:end="97:44">&amp;</operator><name pos:start="97:45" pos:end="97:49">total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="99:9" pos:end="99:32"><expr pos:start="99:9" pos:end="99:31"><call pos:start="99:9" pos:end="99:31"><name pos:start="99:9" pos:end="99:20">gettimeofday</name><argument_list pos:start="99:21" pos:end="99:31">(<argument pos:start="99:22" pos:end="99:24"><expr pos:start="99:22" pos:end="99:24"><operator pos:start="99:22" pos:end="99:22">&amp;</operator><name pos:start="99:23" pos:end="99:24">t2</name></expr></argument>, <argument pos:start="99:27" pos:end="99:30"><expr pos:start="99:27" pos:end="99:30"><name pos:start="99:27" pos:end="99:30">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<if_stmt pos:start="103:9" pos:end="109:9"><if pos:start="103:9" pos:end="109:9">if <condition pos:start="103:12" pos:end="103:20">(<expr pos:start="103:13" pos:end="103:19"><name pos:start="103:13" pos:end="103:15">cnt</name> <operator pos:start="103:17" pos:end="103:17">&lt;</operator> <literal type="number" pos:start="103:19" pos:end="103:19">0</literal></expr>)</condition> <block pos:start="103:22" pos:end="109:9">{<block_content pos:start="105:17" pos:end="107:25">

		<expr_stmt pos:start="105:17" pos:end="105:62"><expr pos:start="105:17" pos:end="105:61"><call pos:start="105:17" pos:end="105:61"><name pos:start="105:17" pos:end="105:22">printf</name><argument_list pos:start="105:23" pos:end="105:61">(<argument pos:start="105:24" pos:end="105:44"><expr pos:start="105:24" pos:end="105:44"><literal type="string" pos:start="105:24" pos:end="105:44">"writev failed: %s\n"</literal></expr></argument>, <argument pos:start="105:47" pos:end="105:60"><expr pos:start="105:47" pos:end="105:60"><call pos:start="105:47" pos:end="105:60"><name pos:start="105:47" pos:end="105:54">strerror</name><argument_list pos:start="105:55" pos:end="105:60">(<argument pos:start="105:56" pos:end="105:59"><expr pos:start="105:56" pos:end="105:59"><operator pos:start="105:56" pos:end="105:56">-</operator><name pos:start="105:57" pos:end="105:59">cnt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return pos:start="107:17" pos:end="107:25">return <expr pos:start="107:24" pos:end="107:24"><literal type="number" pos:start="107:24" pos:end="107:24">0</literal></expr>;</return>

	</block_content>}</block></if></if_stmt>



	<if_stmt pos:start="113:9" pos:end="115:25"><if pos:start="113:9" pos:end="115:25">if <condition pos:start="113:12" pos:end="113:18">(<expr pos:start="113:13" pos:end="113:17"><name pos:start="113:13" pos:end="113:17">qflag</name></expr>)</condition><block type="pseudo" pos:start="115:17" pos:end="115:25"><block_content pos:start="115:17" pos:end="115:25">

		<return pos:start="115:17" pos:end="115:25">return <expr pos:start="115:24" pos:end="115:24"><literal type="number" pos:start="115:24" pos:end="115:24">0</literal></expr>;</return></block_content></block></if></if_stmt>



	<comment type="block" pos:start="119:9" pos:end="119:64">/* Finally, report back -- -C gives a parsable format */</comment>

	<expr_stmt pos:start="121:9" pos:end="121:26"><expr pos:start="121:9" pos:end="121:25"><name pos:start="121:9" pos:end="121:10">t2</name> <operator pos:start="121:12" pos:end="121:12">=</operator> <call pos:start="121:14" pos:end="121:25"><name pos:start="121:14" pos:end="121:17">tsub</name><argument_list pos:start="121:18" pos:end="121:25">(<argument pos:start="121:19" pos:end="121:20"><expr pos:start="121:19" pos:end="121:20"><name pos:start="121:19" pos:end="121:20">t2</name></expr></argument>, <argument pos:start="121:23" pos:end="121:24"><expr pos:start="121:23" pos:end="121:24"><name pos:start="121:23" pos:end="121:24">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="123:9" pos:end="123:73"><expr pos:start="123:9" pos:end="123:72"><call pos:start="123:9" pos:end="123:72"><name pos:start="123:9" pos:end="123:20">print_report</name><argument_list pos:start="123:21" pos:end="123:72">(<argument pos:start="123:22" pos:end="123:28"><expr pos:start="123:22" pos:end="123:28"><literal type="string" pos:start="123:22" pos:end="123:28">"wrote"</literal></expr></argument>, <argument pos:start="123:31" pos:end="123:33"><expr pos:start="123:31" pos:end="123:33"><operator pos:start="123:31" pos:end="123:31">&amp;</operator><name pos:start="123:32" pos:end="123:33">t2</name></expr></argument>, <argument pos:start="123:36" pos:end="123:41"><expr pos:start="123:36" pos:end="123:41"><name pos:start="123:36" pos:end="123:41">offset</name></expr></argument>, <argument pos:start="123:44" pos:end="123:52"><expr pos:start="123:44" pos:end="123:52"><name pos:start="123:44" pos:end="123:52"><name pos:start="123:44" pos:end="123:47">qiov</name><operator pos:start="123:48" pos:end="123:48">.</operator><name pos:start="123:49" pos:end="123:52">size</name></name></expr></argument>, <argument pos:start="123:55" pos:end="123:59"><expr pos:start="123:55" pos:end="123:59"><name pos:start="123:55" pos:end="123:59">total</name></expr></argument>, <argument pos:start="123:62" pos:end="123:64"><expr pos:start="123:62" pos:end="123:64"><name pos:start="123:62" pos:end="123:64">cnt</name></expr></argument>, <argument pos:start="123:67" pos:end="123:71"><expr pos:start="123:67" pos:end="123:71"><name pos:start="123:67" pos:end="123:71">Cflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<expr_stmt pos:start="127:9" pos:end="127:26"><expr pos:start="127:9" pos:end="127:25"><call pos:start="127:9" pos:end="127:25"><name pos:start="127:9" pos:end="127:20">qemu_io_free</name><argument_list pos:start="127:21" pos:end="127:25">(<argument pos:start="127:22" pos:end="127:24"><expr pos:start="127:22" pos:end="127:24"><name pos:start="127:22" pos:end="127:24">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<return pos:start="131:9" pos:end="131:17">return <expr pos:start="131:16" pos:end="131:16"><literal type="number" pos:start="131:16" pos:end="131:16">0</literal></expr>;</return>

</block_content>}</block>
</unit>
