<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22578.c" pos:tabs="8"><function pos:start="1:1" pos:end="89:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:21">ff_read_riff_info</name><parameter_list pos:start="1:22" pos:end="1:55">(<parameter pos:start="1:23" pos:end="1:40"><decl pos:start="1:23" pos:end="1:40"><type pos:start="1:23" pos:end="1:40"><name pos:start="1:23" pos:end="1:37">AVFormatContext</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:40">s</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:54"><decl pos:start="1:43" pos:end="1:54"><type pos:start="1:43" pos:end="1:54"><name pos:start="1:43" pos:end="1:49">int64_t</name></type> <name pos:start="1:51" pos:end="1:54">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="89:1">{<block_content pos:start="5:5" pos:end="87:13">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">int64_t</name></type> <name pos:start="5:13" pos:end="5:17">start</name></decl>, <decl pos:start="5:20" pos:end="5:22"><type ref="prev" pos:start="5:5" pos:end="5:11"/><name pos:start="5:20" pos:end="5:22">end</name></decl>, <decl pos:start="5:25" pos:end="5:27"><type ref="prev" pos:start="5:5" pos:end="5:11"/><name pos:start="5:25" pos:end="5:27">cur</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">AVIOContext</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:19">pb</name> <init pos:start="7:21" pos:end="7:27">= <expr pos:start="7:23" pos:end="7:27"><name pos:start="7:23" pos:end="7:27"><name pos:start="7:23" pos:end="7:23">s</name><operator pos:start="7:24" pos:end="7:25">-&gt;</operator><name pos:start="7:26" pos:end="7:27">pb</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:26"><expr pos:start="11:5" pos:end="11:25"><name pos:start="11:5" pos:end="11:9">start</name> <operator pos:start="11:11" pos:end="11:11">=</operator> <call pos:start="11:13" pos:end="11:25"><name pos:start="11:13" pos:end="11:21">avio_tell</name><argument_list pos:start="11:22" pos:end="11:25">(<argument pos:start="11:23" pos:end="11:24"><expr pos:start="11:23" pos:end="11:24"><name pos:start="11:23" pos:end="11:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:23"><expr pos:start="13:5" pos:end="13:22"><name pos:start="13:5" pos:end="13:7">end</name> <operator pos:start="13:9" pos:end="13:9">=</operator> <name pos:start="13:11" pos:end="13:15">start</name> <operator pos:start="13:17" pos:end="13:17">+</operator> <name pos:start="13:19" pos:end="13:22">size</name></expr>;</expr_stmt>



    <while pos:start="17:5" pos:end="83:5">while <condition pos:start="17:11" pos:end="17:75">(<expr pos:start="17:12" pos:end="17:55"><operator pos:start="17:12" pos:end="17:12">(</operator><name pos:start="17:13" pos:end="17:15">cur</name> <operator pos:start="17:17" pos:end="17:17">=</operator> <call pos:start="17:19" pos:end="17:31"><name pos:start="17:19" pos:end="17:27">avio_tell</name><argument_list pos:start="17:28" pos:end="17:31">(<argument pos:start="17:29" pos:end="17:30"><expr pos:start="17:29" pos:end="17:30"><name pos:start="17:29" pos:end="17:30">pb</name></expr></argument>)</argument_list></call><operator pos:start="17:32" pos:end="17:32">)</operator> <operator pos:start="17:34" pos:end="17:35">&gt;=</operator> <literal type="number" pos:start="17:37" pos:end="17:37">0</literal> <operator pos:start="17:39" pos:end="17:40">&amp;&amp;</operator> <name pos:start="17:42" pos:end="17:44">cur</name> <operator pos:start="17:46" pos:end="17:47">&lt;=</operator> <name pos:start="17:49" pos:end="17:51">end</name> <operator pos:start="17:53" pos:end="17:53">-</operator> <literal type="number" pos:start="17:55" pos:end="17:55">8</literal></expr> <comment type="block" pos:start="17:57" pos:end="17:74">/* = tag + size */</comment>)</condition> <block pos:start="17:77" pos:end="83:5">{<block_content pos:start="19:9" pos:end="81:71">

        <decl_stmt pos:start="19:9" pos:end="19:28"><decl pos:start="19:9" pos:end="19:27"><type pos:start="19:9" pos:end="19:16"><name pos:start="19:9" pos:end="19:16">uint32_t</name></type> <name pos:start="19:18" pos:end="19:27">chunk_code</name></decl>;</decl_stmt>

        <decl_stmt pos:start="21:9" pos:end="21:27"><decl pos:start="21:9" pos:end="21:26"><type pos:start="21:9" pos:end="21:15"><name pos:start="21:9" pos:end="21:15">int64_t</name></type> <name pos:start="21:17" pos:end="21:26">chunk_size</name></decl>;</decl_stmt>

        <decl_stmt pos:start="23:9" pos:end="23:26"><decl pos:start="23:9" pos:end="23:25"><type pos:start="23:9" pos:end="23:12"><name pos:start="23:9" pos:end="23:12">char</name></type> <name pos:start="23:14" pos:end="23:19"><name pos:start="23:14" pos:end="23:16">key</name><index pos:start="23:17" pos:end="23:19">[<expr pos:start="23:18" pos:end="23:18"><literal type="number" pos:start="23:18" pos:end="23:18">5</literal></expr>]</index></name> <init pos:start="23:21" pos:end="23:25">= <expr pos:start="23:23" pos:end="23:25"><block pos:start="23:23" pos:end="23:25">{<expr pos:start="23:24" pos:end="23:24"><literal type="number" pos:start="23:24" pos:end="23:24">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="25:9" pos:end="25:20"><decl pos:start="25:9" pos:end="25:19"><type pos:start="25:9" pos:end="25:14"><name pos:start="25:9" pos:end="25:12">char</name> <modifier pos:start="25:14" pos:end="25:14">*</modifier></type><name pos:start="25:15" pos:end="25:19">value</name></decl>;</decl_stmt>



        <expr_stmt pos:start="29:9" pos:end="29:35"><expr pos:start="29:9" pos:end="29:34"><name pos:start="29:9" pos:end="29:18">chunk_code</name> <operator pos:start="29:20" pos:end="29:20">=</operator> <call pos:start="29:22" pos:end="29:34"><name pos:start="29:22" pos:end="29:30">avio_rl32</name><argument_list pos:start="29:31" pos:end="29:34">(<argument pos:start="29:32" pos:end="29:33"><expr pos:start="29:32" pos:end="29:33"><name pos:start="29:32" pos:end="29:33">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:35"><expr pos:start="31:9" pos:end="31:34"><name pos:start="31:9" pos:end="31:18">chunk_size</name> <operator pos:start="31:20" pos:end="31:20">=</operator> <call pos:start="31:22" pos:end="31:34"><name pos:start="31:22" pos:end="31:30">avio_rl32</name><argument_list pos:start="31:31" pos:end="31:34">(<argument pos:start="31:32" pos:end="31:33"><expr pos:start="31:32" pos:end="31:33"><name pos:start="31:32" pos:end="31:33">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="33:9" pos:end="39:9"><if pos:start="33:9" pos:end="39:9">if <condition pos:start="33:12" pos:end="33:81">(<expr pos:start="33:13" pos:end="33:80"><name pos:start="33:13" pos:end="33:22">chunk_size</name> <operator pos:start="33:24" pos:end="33:24">&gt;</operator> <name pos:start="33:26" pos:end="33:28">end</name> <operator pos:start="33:30" pos:end="33:31">||</operator> <name pos:start="33:33" pos:end="33:35">end</name> <operator pos:start="33:37" pos:end="33:37">-</operator> <name pos:start="33:39" pos:end="33:48">chunk_size</name> <operator pos:start="33:50" pos:end="33:50">&lt;</operator> <name pos:start="33:52" pos:end="33:54">cur</name> <operator pos:start="33:56" pos:end="33:57">||</operator> <name pos:start="33:59" pos:end="33:68">chunk_size</name> <operator pos:start="33:70" pos:end="33:71">==</operator> <name pos:start="33:73" pos:end="33:80">UINT_MAX</name></expr>)</condition> <block pos:start="33:83" pos:end="39:9">{<block_content pos:start="35:13" pos:end="37:39">

            <expr_stmt pos:start="35:13" pos:end="35:63"><expr pos:start="35:13" pos:end="35:62"><call pos:start="35:13" pos:end="35:62"><name pos:start="35:13" pos:end="35:18">av_log</name><argument_list pos:start="35:19" pos:end="35:62">(<argument pos:start="35:20" pos:end="35:20"><expr pos:start="35:20" pos:end="35:20"><name pos:start="35:20" pos:end="35:20">s</name></expr></argument>, <argument pos:start="35:23" pos:end="35:34"><expr pos:start="35:23" pos:end="35:34"><name pos:start="35:23" pos:end="35:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="35:37" pos:end="35:61"><expr pos:start="35:37" pos:end="35:61"><literal type="string" pos:start="35:37" pos:end="35:61">"too big INFO subchunk\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="37:13" pos:end="37:39">return <expr pos:start="37:20" pos:end="37:38"><name pos:start="37:20" pos:end="37:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="43:9" pos:end="43:39"><expr pos:start="43:9" pos:end="43:38"><name pos:start="43:9" pos:end="43:18">chunk_size</name> <operator pos:start="43:20" pos:end="43:21">+=</operator> <operator pos:start="43:23" pos:end="43:23">(</operator><name pos:start="43:24" pos:end="43:33">chunk_size</name> <operator pos:start="43:35" pos:end="43:35">&amp;</operator> <literal type="number" pos:start="43:37" pos:end="43:37">1</literal><operator pos:start="43:38" pos:end="43:38">)</operator></expr>;</expr_stmt>



        <expr_stmt pos:start="47:9" pos:end="47:42"><expr pos:start="47:9" pos:end="47:41"><name pos:start="47:9" pos:end="47:13">value</name> <operator pos:start="47:15" pos:end="47:15">=</operator> <call pos:start="47:17" pos:end="47:41"><name pos:start="47:17" pos:end="47:25">av_malloc</name><argument_list pos:start="47:26" pos:end="47:41">(<argument pos:start="47:27" pos:end="47:40"><expr pos:start="47:27" pos:end="47:40"><name pos:start="47:27" pos:end="47:36">chunk_size</name> <operator pos:start="47:38" pos:end="47:38">+</operator> <literal type="number" pos:start="47:40" pos:end="47:40">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="49:9" pos:end="55:9"><if pos:start="49:9" pos:end="55:9">if <condition pos:start="49:12" pos:end="49:19">(<expr pos:start="49:13" pos:end="49:18"><operator pos:start="49:13" pos:end="49:13">!</operator><name pos:start="49:14" pos:end="49:18">value</name></expr>)</condition> <block pos:start="49:21" pos:end="55:9">{<block_content pos:start="51:13" pos:end="53:35">

            <expr_stmt pos:start="51:13" pos:end="51:80"><expr pos:start="51:13" pos:end="51:79"><call pos:start="51:13" pos:end="51:79"><name pos:start="51:13" pos:end="51:18">av_log</name><argument_list pos:start="51:19" pos:end="51:79">(<argument pos:start="51:20" pos:end="51:20"><expr pos:start="51:20" pos:end="51:20"><name pos:start="51:20" pos:end="51:20">s</name></expr></argument>, <argument pos:start="51:23" pos:end="51:34"><expr pos:start="51:23" pos:end="51:34"><name pos:start="51:23" pos:end="51:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="51:37" pos:end="51:78"><expr pos:start="51:37" pos:end="51:78"><literal type="string" pos:start="51:37" pos:end="51:78">"out of memory, unable to read INFO tag\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="53:13" pos:end="53:35">return <expr pos:start="53:20" pos:end="53:34"><call pos:start="53:20" pos:end="53:34"><name pos:start="53:20" pos:end="53:26">AVERROR</name><argument_list pos:start="53:27" pos:end="53:34">(<argument pos:start="53:28" pos:end="53:33"><expr pos:start="53:28" pos:end="53:33"><name pos:start="53:28" pos:end="53:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="59:9" pos:end="59:33"><expr pos:start="59:9" pos:end="59:32"><call pos:start="59:9" pos:end="59:32"><name pos:start="59:9" pos:end="59:15">AV_WL32</name><argument_list pos:start="59:16" pos:end="59:32">(<argument pos:start="59:17" pos:end="59:19"><expr pos:start="59:17" pos:end="59:19"><name pos:start="59:17" pos:end="59:19">key</name></expr></argument>, <argument pos:start="59:22" pos:end="59:31"><expr pos:start="59:22" pos:end="59:31"><name pos:start="59:22" pos:end="59:31">chunk_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="63:9" pos:end="73:9"><if pos:start="63:9" pos:end="73:9">if <condition pos:start="63:12" pos:end="63:59">(<expr pos:start="63:13" pos:end="63:58"><call pos:start="63:13" pos:end="63:44"><name pos:start="63:13" pos:end="63:21">avio_read</name><argument_list pos:start="63:22" pos:end="63:44">(<argument pos:start="63:23" pos:end="63:24"><expr pos:start="63:23" pos:end="63:24"><name pos:start="63:23" pos:end="63:24">pb</name></expr></argument>, <argument pos:start="63:27" pos:end="63:31"><expr pos:start="63:27" pos:end="63:31"><name pos:start="63:27" pos:end="63:31">value</name></expr></argument>, <argument pos:start="63:34" pos:end="63:43"><expr pos:start="63:34" pos:end="63:43"><name pos:start="63:34" pos:end="63:43">chunk_size</name></expr></argument>)</argument_list></call> <operator pos:start="63:46" pos:end="63:47">!=</operator> <name pos:start="63:49" pos:end="63:58">chunk_size</name></expr>)</condition> <block pos:start="63:61" pos:end="73:9">{<block_content pos:start="65:13" pos:end="71:39">

            <expr_stmt pos:start="65:13" pos:end="65:26"><expr pos:start="65:13" pos:end="65:25"><call pos:start="65:13" pos:end="65:25"><name pos:start="65:13" pos:end="65:20">av_freep</name><argument_list pos:start="65:21" pos:end="65:25">(<argument pos:start="65:22" pos:end="65:24"><expr pos:start="65:22" pos:end="65:24"><name pos:start="65:22" pos:end="65:24">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:28"><expr pos:start="67:13" pos:end="67:27"><call pos:start="67:13" pos:end="67:27"><name pos:start="67:13" pos:end="67:20">av_freep</name><argument_list pos:start="67:21" pos:end="67:27">(<argument pos:start="67:22" pos:end="67:26"><expr pos:start="67:22" pos:end="67:26"><name pos:start="67:22" pos:end="67:26">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:86"><expr pos:start="69:13" pos:end="69:85"><call pos:start="69:13" pos:end="69:85"><name pos:start="69:13" pos:end="69:18">av_log</name><argument_list pos:start="69:19" pos:end="69:85">(<argument pos:start="69:20" pos:end="69:20"><expr pos:start="69:20" pos:end="69:20"><name pos:start="69:20" pos:end="69:20">s</name></expr></argument>, <argument pos:start="69:23" pos:end="69:34"><expr pos:start="69:23" pos:end="69:34"><name pos:start="69:23" pos:end="69:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="69:37" pos:end="69:84"><expr pos:start="69:37" pos:end="69:84"><literal type="string" pos:start="69:37" pos:end="69:84">"premature end of file while reading INFO tag\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="71:13" pos:end="71:39">return <expr pos:start="71:20" pos:end="71:38"><name pos:start="71:20" pos:end="71:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="77:9" pos:end="77:30"><expr pos:start="77:9" pos:end="77:29"><name pos:start="77:9" pos:end="77:25"><name pos:start="77:9" pos:end="77:13">value</name><index pos:start="77:14" pos:end="77:25">[<expr pos:start="77:15" pos:end="77:24"><name pos:start="77:15" pos:end="77:24">chunk_size</name></expr>]</index></name> <operator pos:start="77:27" pos:end="77:27">=</operator> <literal type="number" pos:start="77:29" pos:end="77:29">0</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="81:9" pos:end="81:71"><expr pos:start="81:9" pos:end="81:70"><call pos:start="81:9" pos:end="81:70"><name pos:start="81:9" pos:end="81:19">av_dict_set</name><argument_list pos:start="81:20" pos:end="81:70">(<argument pos:start="81:21" pos:end="81:32"><expr pos:start="81:21" pos:end="81:32"><operator pos:start="81:21" pos:end="81:21">&amp;</operator><name pos:start="81:22" pos:end="81:32"><name pos:start="81:22" pos:end="81:22">s</name><operator pos:start="81:23" pos:end="81:24">-&gt;</operator><name pos:start="81:25" pos:end="81:32">metadata</name></name></expr></argument>, <argument pos:start="81:35" pos:end="81:37"><expr pos:start="81:35" pos:end="81:37"><name pos:start="81:35" pos:end="81:37">key</name></expr></argument>, <argument pos:start="81:40" pos:end="81:44"><expr pos:start="81:40" pos:end="81:44"><name pos:start="81:40" pos:end="81:44">value</name></expr></argument>, <argument pos:start="81:47" pos:end="81:69"><expr pos:start="81:47" pos:end="81:69"><name pos:start="81:47" pos:end="81:69">AV_DICT_DONT_STRDUP_VAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <return pos:start="87:5" pos:end="87:13">return <expr pos:start="87:12" pos:end="87:12"><literal type="number" pos:start="87:12" pos:end="87:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
