<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9784.c" pos:tabs="8"><function pos:start="1:1" pos:end="127:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:34">xen_pt_register_regions</name><parameter_list pos:start="1:35" pos:end="1:61">(<parameter pos:start="1:36" pos:end="1:60"><decl pos:start="1:36" pos:end="1:60"><type pos:start="1:36" pos:end="1:59"><name pos:start="1:36" pos:end="1:57">XenPCIPassthroughState</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:60">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="127:1">{<block_content pos:start="5:5" pos:end="125:13">

    <decl_stmt pos:start="5:5" pos:end="5:14"><decl pos:start="5:5" pos:end="5:13"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name> <init pos:start="5:11" pos:end="5:13">= <expr pos:start="5:13" pos:end="5:13"><literal type="number" pos:start="5:13" pos:end="5:13">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:42"><decl pos:start="7:5" pos:end="7:41"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">XenHostPCIDevice</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:23">d</name> <init pos:start="7:25" pos:end="7:41">= <expr pos:start="7:27" pos:end="7:41"><operator pos:start="7:27" pos:end="7:27">&amp;</operator><name pos:start="7:28" pos:end="7:41"><name pos:start="7:28" pos:end="7:28">s</name><operator pos:start="7:29" pos:end="7:30">-&gt;</operator><name pos:start="7:31" pos:end="7:41">real_device</name></name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="11:32">/* Register PIO/MMIO BARs */</comment>

    <for pos:start="13:5" pos:end="71:5">for <control pos:start="13:9" pos:end="13:38">(<init pos:start="13:10" pos:end="13:15"><expr pos:start="13:10" pos:end="13:14"><name pos:start="13:10" pos:end="13:10">i</name> <operator pos:start="13:12" pos:end="13:12">=</operator> <literal type="number" pos:start="13:14" pos:end="13:14">0</literal></expr>;</init> <condition pos:start="13:17" pos:end="13:33"><expr pos:start="13:17" pos:end="13:32"><name pos:start="13:17" pos:end="13:17">i</name> <operator pos:start="13:19" pos:end="13:19">&lt;</operator> <name pos:start="13:21" pos:end="13:32">PCI_ROM_SLOT</name></expr>;</condition> <incr pos:start="13:35" pos:end="13:37"><expr pos:start="13:35" pos:end="13:37"><name pos:start="13:35" pos:end="13:35">i</name><operator pos:start="13:36" pos:end="13:37">++</operator></expr></incr>)</control> <block pos:start="13:40" pos:end="71:5">{<block_content pos:start="15:9" pos:end="69:51">

        <decl_stmt pos:start="15:9" pos:end="15:50"><decl pos:start="15:9" pos:end="15:49"><type pos:start="15:9" pos:end="15:28"><name pos:start="15:9" pos:end="15:26">XenHostPCIIORegion</name> <modifier pos:start="15:28" pos:end="15:28">*</modifier></type><name pos:start="15:29" pos:end="15:29">r</name> <init pos:start="15:31" pos:end="15:49">= <expr pos:start="15:33" pos:end="15:49"><operator pos:start="15:33" pos:end="15:33">&amp;</operator><name pos:start="15:34" pos:end="15:49"><name pos:start="15:34" pos:end="15:34">d</name><operator pos:start="15:35" pos:end="15:36">-&gt;</operator><name pos:start="15:37" pos:end="15:46">io_regions</name><index pos:start="15:47" pos:end="15:49">[<expr pos:start="15:48" pos:end="15:48"><name pos:start="15:48" pos:end="15:48">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="17:9" pos:end="17:21"><decl pos:start="17:9" pos:end="17:20"><type pos:start="17:9" pos:end="17:15"><name pos:start="17:9" pos:end="17:15">uint8_t</name></type> <name pos:start="17:17" pos:end="17:20">type</name></decl>;</decl_stmt>



        <if_stmt pos:start="21:9" pos:end="25:9"><if pos:start="21:9" pos:end="25:9">if <condition pos:start="21:12" pos:end="21:46">(<expr pos:start="21:13" pos:end="21:45"><name pos:start="21:13" pos:end="21:24"><name pos:start="21:13" pos:end="21:13">r</name><operator pos:start="21:14" pos:end="21:15">-&gt;</operator><name pos:start="21:16" pos:end="21:24">base_addr</name></name> <operator pos:start="21:26" pos:end="21:27">==</operator> <literal type="number" pos:start="21:29" pos:end="21:29">0</literal> <operator pos:start="21:31" pos:end="21:32">||</operator> <name pos:start="21:34" pos:end="21:40"><name pos:start="21:34" pos:end="21:34">r</name><operator pos:start="21:35" pos:end="21:36">-&gt;</operator><name pos:start="21:37" pos:end="21:40">size</name></name> <operator pos:start="21:42" pos:end="21:43">==</operator> <literal type="number" pos:start="21:45" pos:end="21:45">0</literal></expr>)</condition> <block pos:start="21:48" pos:end="25:9">{<block_content pos:start="23:13" pos:end="23:21">

            <continue pos:start="23:13" pos:end="23:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="29:9" pos:end="29:44"><expr pos:start="29:9" pos:end="29:43"><name pos:start="29:9" pos:end="29:19"><name pos:start="29:9" pos:end="29:9">s</name><operator pos:start="29:10" pos:end="29:11">-&gt;</operator><name pos:start="29:12" pos:end="29:16">bases</name><index pos:start="29:17" pos:end="29:19">[<expr pos:start="29:18" pos:end="29:18"><name pos:start="29:18" pos:end="29:18">i</name></expr>]</index></name><operator pos:start="29:20" pos:end="29:20">.</operator><name pos:start="29:21" pos:end="29:28"><name pos:start="29:21" pos:end="29:26">access</name><operator pos:start="29:27" pos:end="29:27">.</operator><name pos:start="29:28" pos:end="29:28">u</name></name> <operator pos:start="29:30" pos:end="29:30">=</operator> <name pos:start="29:32" pos:end="29:43"><name pos:start="29:32" pos:end="29:32">r</name><operator pos:start="29:33" pos:end="29:34">-&gt;</operator><name pos:start="29:35" pos:end="29:43">base_addr</name></name></expr>;</expr_stmt>



        <if_stmt pos:start="33:9" pos:end="53:9"><if pos:start="33:9" pos:end="37:9">if <condition pos:start="33:12" pos:end="33:50">(<expr pos:start="33:13" pos:end="33:49"><name pos:start="33:13" pos:end="33:19"><name pos:start="33:13" pos:end="33:13">r</name><operator pos:start="33:14" pos:end="33:15">-&gt;</operator><name pos:start="33:16" pos:end="33:19">type</name></name> <operator pos:start="33:21" pos:end="33:21">&amp;</operator> <name pos:start="33:23" pos:end="33:49">XEN_HOST_PCI_REGION_TYPE_IO</name></expr>)</condition> <block pos:start="33:52" pos:end="37:9">{<block_content pos:start="35:13" pos:end="35:45">

            <expr_stmt pos:start="35:13" pos:end="35:45"><expr pos:start="35:13" pos:end="35:44"><name pos:start="35:13" pos:end="35:16">type</name> <operator pos:start="35:18" pos:end="35:18">=</operator> <name pos:start="35:20" pos:end="35:44">PCI_BASE_ADDRESS_SPACE_IO</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="37:11" pos:end="53:9">else <block pos:start="37:16" pos:end="53:9">{<block_content pos:start="39:13" pos:end="51:13">

            <expr_stmt pos:start="39:13" pos:end="39:49"><expr pos:start="39:13" pos:end="39:48"><name pos:start="39:13" pos:end="39:16">type</name> <operator pos:start="39:18" pos:end="39:18">=</operator> <name pos:start="39:20" pos:end="39:48">PCI_BASE_ADDRESS_SPACE_MEMORY</name></expr>;</expr_stmt>

            <if_stmt pos:start="41:13" pos:end="45:13"><if pos:start="41:13" pos:end="45:13">if <condition pos:start="41:16" pos:end="41:60">(<expr pos:start="41:17" pos:end="41:59"><name pos:start="41:17" pos:end="41:23"><name pos:start="41:17" pos:end="41:17">r</name><operator pos:start="41:18" pos:end="41:19">-&gt;</operator><name pos:start="41:20" pos:end="41:23">type</name></name> <operator pos:start="41:25" pos:end="41:25">&amp;</operator> <name pos:start="41:27" pos:end="41:59">XEN_HOST_PCI_REGION_TYPE_PREFETCH</name></expr>)</condition> <block pos:start="41:62" pos:end="45:13">{<block_content pos:start="43:17" pos:end="43:54">

                <expr_stmt pos:start="43:17" pos:end="43:54"><expr pos:start="43:17" pos:end="43:53"><name pos:start="43:17" pos:end="43:20">type</name> <operator pos:start="43:22" pos:end="43:23">|=</operator> <name pos:start="43:25" pos:end="43:53">PCI_BASE_ADDRESS_MEM_PREFETCH</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="47:13" pos:end="51:13"><if pos:start="47:13" pos:end="51:13">if <condition pos:start="47:16" pos:end="47:58">(<expr pos:start="47:17" pos:end="47:57"><name pos:start="47:17" pos:end="47:23"><name pos:start="47:17" pos:end="47:17">r</name><operator pos:start="47:18" pos:end="47:19">-&gt;</operator><name pos:start="47:20" pos:end="47:23">type</name></name> <operator pos:start="47:25" pos:end="47:25">&amp;</operator> <name pos:start="47:27" pos:end="47:57">XEN_HOST_PCI_REGION_TYPE_MEM_64</name></expr>)</condition> <block pos:start="47:60" pos:end="51:13">{<block_content pos:start="49:17" pos:end="49:53">

                <expr_stmt pos:start="49:17" pos:end="49:53"><expr pos:start="49:17" pos:end="49:52"><name pos:start="49:17" pos:end="49:20">type</name> <operator pos:start="49:22" pos:end="49:23">|=</operator> <name pos:start="49:25" pos:end="49:52">PCI_BASE_ADDRESS_MEM_TYPE_64</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="57:9" pos:end="59:57"><expr pos:start="57:9" pos:end="59:56"><call pos:start="57:9" pos:end="59:56"><name pos:start="57:9" pos:end="57:29">memory_region_init_io</name><argument_list pos:start="57:30" pos:end="59:56">(<argument pos:start="57:31" pos:end="57:40"><expr pos:start="57:31" pos:end="57:40"><operator pos:start="57:31" pos:end="57:31">&amp;</operator><name pos:start="57:32" pos:end="57:40"><name pos:start="57:32" pos:end="57:32">s</name><operator pos:start="57:33" pos:end="57:34">-&gt;</operator><name pos:start="57:35" pos:end="57:37">bar</name><index pos:start="57:38" pos:end="57:40">[<expr pos:start="57:39" pos:end="57:39"><name pos:start="57:39" pos:end="57:39">i</name></expr>]</index></name></expr></argument>, <argument pos:start="57:43" pos:end="57:51"><expr pos:start="57:43" pos:end="57:51"><call pos:start="57:43" pos:end="57:51"><name pos:start="57:43" pos:end="57:48">OBJECT</name><argument_list pos:start="57:49" pos:end="57:51">(<argument pos:start="57:50" pos:end="57:50"><expr pos:start="57:50" pos:end="57:50"><name pos:start="57:50" pos:end="57:50">s</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="57:54" pos:end="57:57"><expr pos:start="57:54" pos:end="57:57"><operator pos:start="57:54" pos:end="57:54">&amp;</operator><name pos:start="57:55" pos:end="57:57">ops</name></expr></argument>, <argument pos:start="57:60" pos:end="57:66"><expr pos:start="57:60" pos:end="57:66"><operator pos:start="57:60" pos:end="57:60">&amp;</operator><name pos:start="57:61" pos:end="57:66"><name pos:start="57:61" pos:end="57:61">s</name><operator pos:start="57:62" pos:end="57:63">-&gt;</operator><name pos:start="57:64" pos:end="57:66">dev</name></name></expr></argument>,

                              <argument pos:start="59:31" pos:end="59:46"><expr pos:start="59:31" pos:end="59:46"><literal type="string" pos:start="59:31" pos:end="59:46">"xen-pci-pt-bar"</literal></expr></argument>, <argument pos:start="59:49" pos:end="59:55"><expr pos:start="59:49" pos:end="59:55"><name pos:start="59:49" pos:end="59:55"><name pos:start="59:49" pos:end="59:49">r</name><operator pos:start="59:50" pos:end="59:51">-&gt;</operator><name pos:start="59:52" pos:end="59:55">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:55"><expr pos:start="61:9" pos:end="61:54"><call pos:start="61:9" pos:end="61:54"><name pos:start="61:9" pos:end="61:24">pci_register_bar</name><argument_list pos:start="61:25" pos:end="61:54">(<argument pos:start="61:26" pos:end="61:32"><expr pos:start="61:26" pos:end="61:32"><operator pos:start="61:26" pos:end="61:26">&amp;</operator><name pos:start="61:27" pos:end="61:32"><name pos:start="61:27" pos:end="61:27">s</name><operator pos:start="61:28" pos:end="61:29">-&gt;</operator><name pos:start="61:30" pos:end="61:32">dev</name></name></expr></argument>, <argument pos:start="61:35" pos:end="61:35"><expr pos:start="61:35" pos:end="61:35"><name pos:start="61:35" pos:end="61:35">i</name></expr></argument>, <argument pos:start="61:38" pos:end="61:41"><expr pos:start="61:38" pos:end="61:41"><name pos:start="61:38" pos:end="61:41">type</name></expr></argument>, <argument pos:start="61:44" pos:end="61:53"><expr pos:start="61:44" pos:end="61:53"><operator pos:start="61:44" pos:end="61:44">&amp;</operator><name pos:start="61:45" pos:end="61:53"><name pos:start="61:45" pos:end="61:45">s</name><operator pos:start="61:46" pos:end="61:47">-&gt;</operator><name pos:start="61:48" pos:end="61:50">bar</name><index pos:start="61:51" pos:end="61:53">[<expr pos:start="61:52" pos:end="61:52"><name pos:start="61:52" pos:end="61:52">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="65:9" pos:end="69:51"><expr pos:start="65:9" pos:end="69:50"><call pos:start="65:9" pos:end="69:50"><name pos:start="65:9" pos:end="65:18">XEN_PT_LOG</name><argument_list pos:start="65:19" pos:end="69:50">(<argument pos:start="65:20" pos:end="65:26"><expr pos:start="65:20" pos:end="65:26"><operator pos:start="65:20" pos:end="65:20">&amp;</operator><name pos:start="65:21" pos:end="65:26"><name pos:start="65:21" pos:end="65:21">s</name><operator pos:start="65:22" pos:end="65:23">-&gt;</operator><name pos:start="65:24" pos:end="65:26">dev</name></name></expr></argument>, <argument pos:start="65:29" pos:end="67:58"><expr pos:start="65:29" pos:end="67:58"><literal type="string" pos:start="65:29" pos:end="65:65">"IO region %i registered (size=0x%08"</literal><name pos:start="65:66" pos:end="65:71">PRIx64</name>

                   <literal type="string" pos:start="67:20" pos:end="67:37">" base_addr=0x%08"</literal><name pos:start="67:38" pos:end="67:43">PRIx64</name><literal type="string" pos:start="67:44" pos:end="67:58">" type: %#x)\n"</literal></expr></argument>,

                   <argument pos:start="69:20" pos:end="69:20"><expr pos:start="69:20" pos:end="69:20"><name pos:start="69:20" pos:end="69:20">i</name></expr></argument>, <argument pos:start="69:23" pos:end="69:29"><expr pos:start="69:23" pos:end="69:29"><name pos:start="69:23" pos:end="69:29"><name pos:start="69:23" pos:end="69:23">r</name><operator pos:start="69:24" pos:end="69:25">-&gt;</operator><name pos:start="69:26" pos:end="69:29">size</name></name></expr></argument>, <argument pos:start="69:32" pos:end="69:43"><expr pos:start="69:32" pos:end="69:43"><name pos:start="69:32" pos:end="69:43"><name pos:start="69:32" pos:end="69:32">r</name><operator pos:start="69:33" pos:end="69:34">-&gt;</operator><name pos:start="69:35" pos:end="69:43">base_addr</name></name></expr></argument>, <argument pos:start="69:46" pos:end="69:49"><expr pos:start="69:46" pos:end="69:49"><name pos:start="69:46" pos:end="69:49">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="75:5" pos:end="75:40">/* Register expansion ROM address */</comment>

    <if_stmt pos:start="77:5" pos:end="121:5"><if pos:start="77:5" pos:end="121:5">if <condition pos:start="77:8" pos:end="77:40">(<expr pos:start="77:9" pos:end="77:39"><name pos:start="77:9" pos:end="77:24"><name pos:start="77:9" pos:end="77:9">d</name><operator pos:start="77:10" pos:end="77:11">-&gt;</operator><name pos:start="77:12" pos:end="77:14">rom</name><operator pos:start="77:15" pos:end="77:15">.</operator><name pos:start="77:16" pos:end="77:24">base_addr</name></name> <operator pos:start="77:26" pos:end="77:27">&amp;&amp;</operator> <name pos:start="77:29" pos:end="77:39"><name pos:start="77:29" pos:end="77:29">d</name><operator pos:start="77:30" pos:end="77:31">-&gt;</operator><name pos:start="77:32" pos:end="77:34">rom</name><operator pos:start="77:35" pos:end="77:35">.</operator><name pos:start="77:36" pos:end="77:39">size</name></name></expr>)</condition> <block pos:start="77:42" pos:end="121:5">{<block_content pos:start="79:9" pos:end="119:50">

        <decl_stmt pos:start="79:9" pos:end="79:30"><decl pos:start="79:9" pos:end="79:29"><type pos:start="79:9" pos:end="79:16"><name pos:start="79:9" pos:end="79:16">uint32_t</name></type> <name pos:start="79:18" pos:end="79:25">bar_data</name> <init pos:start="79:27" pos:end="79:29">= <expr pos:start="79:29" pos:end="79:29"><literal type="number" pos:start="79:29" pos:end="79:29">0</literal></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="83:9" pos:end="83:69">/* Re-set BAR reported by OS, otherwise ROM can't be read. */</comment>

        <if_stmt pos:start="85:9" pos:end="89:9"><if pos:start="85:9" pos:end="89:9">if <condition pos:start="85:12" pos:end="85:65">(<expr pos:start="85:13" pos:end="85:64"><call pos:start="85:13" pos:end="85:64"><name pos:start="85:13" pos:end="85:33">xen_host_pci_get_long</name><argument_list pos:start="85:34" pos:end="85:64">(<argument pos:start="85:35" pos:end="85:35"><expr pos:start="85:35" pos:end="85:35"><name pos:start="85:35" pos:end="85:35">d</name></expr></argument>, <argument pos:start="85:38" pos:end="85:52"><expr pos:start="85:38" pos:end="85:52"><name pos:start="85:38" pos:end="85:52">PCI_ROM_ADDRESS</name></expr></argument>, <argument pos:start="85:55" pos:end="85:63"><expr pos:start="85:55" pos:end="85:63"><operator pos:start="85:55" pos:end="85:55">&amp;</operator><name pos:start="85:56" pos:end="85:63">bar_data</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="85:67" pos:end="89:9">{<block_content pos:start="87:13" pos:end="87:21">

            <return pos:start="87:13" pos:end="87:21">return <expr pos:start="87:20" pos:end="87:20"><literal type="number" pos:start="87:20" pos:end="87:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="91:9" pos:end="97:9"><if pos:start="91:9" pos:end="97:9">if <condition pos:start="91:12" pos:end="91:51">(<expr pos:start="91:13" pos:end="91:50"><operator pos:start="91:13" pos:end="91:13">(</operator><name pos:start="91:14" pos:end="91:21">bar_data</name> <operator pos:start="91:23" pos:end="91:23">&amp;</operator> <name pos:start="91:25" pos:end="91:44">PCI_ROM_ADDRESS_MASK</name><operator pos:start="91:45" pos:end="91:45">)</operator> <operator pos:start="91:47" pos:end="91:48">==</operator> <literal type="number" pos:start="91:50" pos:end="91:50">0</literal></expr>)</condition> <block pos:start="91:53" pos:end="97:9">{<block_content pos:start="93:13" pos:end="95:64">

            <expr_stmt pos:start="93:13" pos:end="93:64"><expr pos:start="93:13" pos:end="93:63"><name pos:start="93:13" pos:end="93:20">bar_data</name> <operator pos:start="93:22" pos:end="93:23">|=</operator> <name pos:start="93:25" pos:end="93:40"><name pos:start="93:25" pos:end="93:25">d</name><operator pos:start="93:26" pos:end="93:27">-&gt;</operator><name pos:start="93:28" pos:end="93:30">rom</name><operator pos:start="93:31" pos:end="93:31">.</operator><name pos:start="93:32" pos:end="93:40">base_addr</name></name> <operator pos:start="93:42" pos:end="93:42">&amp;</operator> <name pos:start="93:44" pos:end="93:63">PCI_ROM_ADDRESS_MASK</name></expr>;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:64"><expr pos:start="95:13" pos:end="95:63"><call pos:start="95:13" pos:end="95:63"><name pos:start="95:13" pos:end="95:33">xen_host_pci_set_long</name><argument_list pos:start="95:34" pos:end="95:63">(<argument pos:start="95:35" pos:end="95:35"><expr pos:start="95:35" pos:end="95:35"><name pos:start="95:35" pos:end="95:35">d</name></expr></argument>, <argument pos:start="95:38" pos:end="95:52"><expr pos:start="95:38" pos:end="95:52"><name pos:start="95:38" pos:end="95:52">PCI_ROM_ADDRESS</name></expr></argument>, <argument pos:start="95:55" pos:end="95:62"><expr pos:start="95:55" pos:end="95:62"><name pos:start="95:55" pos:end="95:62">bar_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="101:9" pos:end="101:63"><expr pos:start="101:9" pos:end="101:62"><name pos:start="101:9" pos:end="101:30"><name pos:start="101:9" pos:end="101:9">s</name><operator pos:start="101:10" pos:end="101:11">-&gt;</operator><name pos:start="101:12" pos:end="101:16">bases</name><index pos:start="101:17" pos:end="101:30">[<expr pos:start="101:18" pos:end="101:29"><name pos:start="101:18" pos:end="101:29">PCI_ROM_SLOT</name></expr>]</index></name><operator pos:start="101:31" pos:end="101:31">.</operator><name pos:start="101:32" pos:end="101:43"><name pos:start="101:32" pos:end="101:37">access</name><operator pos:start="101:38" pos:end="101:38">.</operator><name pos:start="101:39" pos:end="101:43">maddr</name></name> <operator pos:start="101:45" pos:end="101:45">=</operator> <name pos:start="101:47" pos:end="101:62"><name pos:start="101:47" pos:end="101:47">d</name><operator pos:start="101:48" pos:end="101:49">-&gt;</operator><name pos:start="101:50" pos:end="101:52">rom</name><operator pos:start="101:53" pos:end="101:53">.</operator><name pos:start="101:54" pos:end="101:62">base_addr</name></name></expr>;</expr_stmt>



        <expr_stmt pos:start="105:9" pos:end="107:61"><expr pos:start="105:9" pos:end="107:60"><call pos:start="105:9" pos:end="107:60"><name pos:start="105:9" pos:end="105:29">memory_region_init_io</name><argument_list pos:start="105:30" pos:end="107:60">(<argument pos:start="105:31" pos:end="105:37"><expr pos:start="105:31" pos:end="105:37"><operator pos:start="105:31" pos:end="105:31">&amp;</operator><name pos:start="105:32" pos:end="105:37"><name pos:start="105:32" pos:end="105:32">s</name><operator pos:start="105:33" pos:end="105:34">-&gt;</operator><name pos:start="105:35" pos:end="105:37">rom</name></name></expr></argument>, <argument pos:start="105:40" pos:end="105:48"><expr pos:start="105:40" pos:end="105:48"><call pos:start="105:40" pos:end="105:48"><name pos:start="105:40" pos:end="105:45">OBJECT</name><argument_list pos:start="105:46" pos:end="105:48">(<argument pos:start="105:47" pos:end="105:47"><expr pos:start="105:47" pos:end="105:47"><name pos:start="105:47" pos:end="105:47">s</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="105:51" pos:end="105:54"><expr pos:start="105:51" pos:end="105:54"><operator pos:start="105:51" pos:end="105:51">&amp;</operator><name pos:start="105:52" pos:end="105:54">ops</name></expr></argument>, <argument pos:start="105:57" pos:end="105:63"><expr pos:start="105:57" pos:end="105:63"><operator pos:start="105:57" pos:end="105:57">&amp;</operator><name pos:start="105:58" pos:end="105:63"><name pos:start="105:58" pos:end="105:58">s</name><operator pos:start="105:59" pos:end="105:60">-&gt;</operator><name pos:start="105:61" pos:end="105:63">dev</name></name></expr></argument>,

                              <argument pos:start="107:31" pos:end="107:46"><expr pos:start="107:31" pos:end="107:46"><literal type="string" pos:start="107:31" pos:end="107:46">"xen-pci-pt-rom"</literal></expr></argument>, <argument pos:start="107:49" pos:end="107:59"><expr pos:start="107:49" pos:end="107:59"><name pos:start="107:49" pos:end="107:59"><name pos:start="107:49" pos:end="107:49">d</name><operator pos:start="107:50" pos:end="107:51">-&gt;</operator><name pos:start="107:52" pos:end="107:54">rom</name><operator pos:start="107:55" pos:end="107:55">.</operator><name pos:start="107:56" pos:end="107:59">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="111:34"><expr pos:start="109:9" pos:end="111:33"><call pos:start="109:9" pos:end="111:33"><name pos:start="109:9" pos:end="109:24">pci_register_bar</name><argument_list pos:start="109:25" pos:end="111:33">(<argument pos:start="109:26" pos:end="109:32"><expr pos:start="109:26" pos:end="109:32"><operator pos:start="109:26" pos:end="109:26">&amp;</operator><name pos:start="109:27" pos:end="109:32"><name pos:start="109:27" pos:end="109:27">s</name><operator pos:start="109:28" pos:end="109:29">-&gt;</operator><name pos:start="109:30" pos:end="109:32">dev</name></name></expr></argument>, <argument pos:start="109:35" pos:end="109:46"><expr pos:start="109:35" pos:end="109:46"><name pos:start="109:35" pos:end="109:46">PCI_ROM_SLOT</name></expr></argument>, <argument pos:start="109:49" pos:end="109:77"><expr pos:start="109:49" pos:end="109:77"><name pos:start="109:49" pos:end="109:77">PCI_BASE_ADDRESS_MEM_PREFETCH</name></expr></argument>,

                         <argument pos:start="111:26" pos:end="111:32"><expr pos:start="111:26" pos:end="111:32"><operator pos:start="111:26" pos:end="111:26">&amp;</operator><name pos:start="111:27" pos:end="111:32"><name pos:start="111:27" pos:end="111:27">s</name><operator pos:start="111:28" pos:end="111:29">-&gt;</operator><name pos:start="111:30" pos:end="111:32">rom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="115:9" pos:end="119:50"><expr pos:start="115:9" pos:end="119:49"><call pos:start="115:9" pos:end="119:49"><name pos:start="115:9" pos:end="115:18">XEN_PT_LOG</name><argument_list pos:start="115:19" pos:end="119:49">(<argument pos:start="115:20" pos:end="115:26"><expr pos:start="115:20" pos:end="115:26"><operator pos:start="115:20" pos:end="115:20">&amp;</operator><name pos:start="115:21" pos:end="115:26"><name pos:start="115:21" pos:end="115:21">s</name><operator pos:start="115:22" pos:end="115:23">-&gt;</operator><name pos:start="115:24" pos:end="115:26">dev</name></name></expr></argument>, <argument pos:start="115:29" pos:end="117:48"><expr pos:start="115:29" pos:end="117:48"><literal type="string" pos:start="115:29" pos:end="115:66">"Expansion ROM registered (size=0x%08"</literal><name pos:start="115:67" pos:end="115:72">PRIx64</name>

                   <literal type="string" pos:start="117:20" pos:end="117:37">" base_addr=0x%08"</literal><name pos:start="117:38" pos:end="117:43">PRIx64</name><literal type="string" pos:start="117:44" pos:end="117:48">")\n"</literal></expr></argument>,

                   <argument pos:start="119:20" pos:end="119:30"><expr pos:start="119:20" pos:end="119:30"><name pos:start="119:20" pos:end="119:30"><name pos:start="119:20" pos:end="119:20">d</name><operator pos:start="119:21" pos:end="119:22">-&gt;</operator><name pos:start="119:23" pos:end="119:25">rom</name><operator pos:start="119:26" pos:end="119:26">.</operator><name pos:start="119:27" pos:end="119:30">size</name></name></expr></argument>, <argument pos:start="119:33" pos:end="119:48"><expr pos:start="119:33" pos:end="119:48"><name pos:start="119:33" pos:end="119:48"><name pos:start="119:33" pos:end="119:33">d</name><operator pos:start="119:34" pos:end="119:35">-&gt;</operator><name pos:start="119:36" pos:end="119:38">rom</name><operator pos:start="119:39" pos:end="119:39">.</operator><name pos:start="119:40" pos:end="119:48">base_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="125:5" pos:end="125:13">return <expr pos:start="125:12" pos:end="125:12"><literal type="number" pos:start="125:12" pos:end="125:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
