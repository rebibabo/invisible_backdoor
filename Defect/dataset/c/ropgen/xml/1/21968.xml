<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21968.c" pos:tabs="8"><function pos:start="1:1" pos:end="294:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">wavpack_encode_block</name><parameter_list pos:start="1:32" pos:end="3:59">(<parameter pos:start="1:33" pos:end="1:55"><decl pos:start="1:33" pos:end="1:55"><type pos:start="1:33" pos:end="1:55"><name pos:start="1:33" pos:end="1:52">WavPackEncodeContext</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:55">s</name></decl></parameter>,
                                <parameter pos:start="2:33" pos:end="2:50"><decl pos:start="2:33" pos:end="2:50"><type pos:start="2:33" pos:end="2:50"><name pos:start="2:33" pos:end="2:39">int32_t</name> <modifier pos:start="2:41" pos:end="2:41">*</modifier></type><name pos:start="2:42" pos:end="2:50">samples_l</name></decl></parameter>, <parameter pos:start="2:53" pos:end="2:70"><decl pos:start="2:53" pos:end="2:70"><type pos:start="2:53" pos:end="2:70"><name pos:start="2:53" pos:end="2:59">int32_t</name> <modifier pos:start="2:61" pos:end="2:61">*</modifier></type><name pos:start="2:62" pos:end="2:70">samples_r</name></decl></parameter>,
                                <parameter pos:start="3:33" pos:end="3:44"><decl pos:start="3:33" pos:end="3:44"><type pos:start="3:33" pos:end="3:44"><name pos:start="3:33" pos:end="3:39">uint8_t</name> <modifier pos:start="3:41" pos:end="3:41">*</modifier></type><name pos:start="3:42" pos:end="3:44">out</name></decl></parameter>, <parameter pos:start="3:47" pos:end="3:58"><decl pos:start="3:47" pos:end="3:58"><type pos:start="3:47" pos:end="3:58"><name pos:start="3:47" pos:end="3:49">int</name></type> <name pos:start="3:51" pos:end="3:58">out_size</name></decl></parameter>)</parameter_list>
<block pos:start="4:1" pos:end="294:1">{<block_content pos:start="5:5" pos:end="293:22">
    <decl_stmt pos:start="5:5" pos:end="5:63"><decl pos:start="5:5" pos:end="5:18"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:18">block_size</name></decl>, <decl pos:start="5:21" pos:end="5:25"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:21" pos:end="5:25">start</name></decl>, <decl pos:start="5:28" pos:end="5:30"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:28" pos:end="5:30">end</name></decl>, <decl pos:start="5:33" pos:end="5:41"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:33" pos:end="5:41">data_size</name></decl>, <decl pos:start="5:44" pos:end="5:49"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:44" pos:end="5:49">tcount</name></decl>, <decl pos:start="5:52" pos:end="5:55"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:52" pos:end="5:55">temp</name></decl>, <decl pos:start="5:58" pos:end="5:62"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:58" pos:end="5:58">m</name> <init pos:start="5:60" pos:end="5:62">= <expr pos:start="5:62" pos:end="5:62"><literal type="number" pos:start="5:62" pos:end="5:62">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:68"><decl pos:start="6:5" pos:end="6:9"><type pos:start="6:5" pos:end="6:7"><name pos:start="6:5" pos:end="6:7">int</name></type> <name pos:start="6:9" pos:end="6:9">i</name></decl>, <decl pos:start="6:12" pos:end="6:12"><type ref="prev" pos:start="6:5" pos:end="6:7"/><name pos:start="6:12" pos:end="6:12">j</name></decl>, <decl pos:start="6:15" pos:end="6:21"><type ref="prev" pos:start="6:5" pos:end="6:7"/><name pos:start="6:15" pos:end="6:17">ret</name> <init pos:start="6:19" pos:end="6:21">= <expr pos:start="6:21" pos:end="6:21"><literal type="number" pos:start="6:21" pos:end="6:21">0</literal></expr></init></decl>, <decl pos:start="6:24" pos:end="6:36"><type ref="prev" pos:start="6:5" pos:end="6:7"/><name pos:start="6:24" pos:end="6:32">got_extra</name> <init pos:start="6:34" pos:end="6:36">= <expr pos:start="6:36" pos:end="6:36"><literal type="number" pos:start="6:36" pos:end="6:36">0</literal></expr></init></decl>, <decl pos:start="6:39" pos:end="6:67"><type ref="prev" pos:start="6:5" pos:end="6:7"/><name pos:start="6:39" pos:end="6:48">nb_samples</name> <init pos:start="6:50" pos:end="6:67">= <expr pos:start="6:52" pos:end="6:67"><name pos:start="6:52" pos:end="6:67"><name pos:start="6:52" pos:end="6:52">s</name><operator pos:start="6:53" pos:end="6:54">-&gt;</operator><name pos:start="6:55" pos:end="6:67">block_samples</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:30"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:16">crc</name> <init pos:start="7:18" pos:end="7:30">= <expr pos:start="7:20" pos:end="7:30"><literal type="number" pos:start="7:20" pos:end="7:30">0xffffffffu</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:23"><decl pos:start="8:5" pos:end="8:22"><type pos:start="8:5" pos:end="8:19"><name pos:start="8:5" pos:end="8:17"><name pos:start="8:5" pos:end="8:10">struct</name> <name pos:start="8:12" pos:end="8:17">Decorr</name></name> <modifier pos:start="8:19" pos:end="8:19">*</modifier></type><name pos:start="8:20" pos:end="8:22">dpp</name></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:18">PutByteContext</name></type> <name pos:start="9:20" pos:end="9:21">pb</name></decl>;</decl_stmt>
    <if_stmt pos:start="10:5" pos:end="31:5"><if pos:start="10:5" pos:end="31:5">if <condition pos:start="10:8" pos:end="10:50">(<expr pos:start="10:9" pos:end="10:49"><operator pos:start="10:9" pos:end="10:9">!</operator><operator pos:start="10:10" pos:end="10:10">(</operator><name pos:start="10:11" pos:end="10:18"><name pos:start="10:11" pos:end="10:11">s</name><operator pos:start="10:12" pos:end="10:13">-&gt;</operator><name pos:start="10:14" pos:end="10:18">flags</name></name> <operator pos:start="10:20" pos:end="10:20">&amp;</operator> <name pos:start="10:22" pos:end="10:28">WV_MONO</name><operator pos:start="10:29" pos:end="10:29">)</operator> <operator pos:start="10:31" pos:end="10:32">&amp;&amp;</operator> <name pos:start="10:34" pos:end="10:49"><name pos:start="10:34" pos:end="10:34">s</name><operator pos:start="10:35" pos:end="10:36">-&gt;</operator><name pos:start="10:37" pos:end="10:49">optimize_mono</name></name></expr>)</condition> <block pos:start="10:52" pos:end="31:5">{<block_content pos:start="11:9" pos:end="30:9">
        <decl_stmt pos:start="11:9" pos:end="11:34"><decl pos:start="11:9" pos:end="11:23"><type pos:start="11:9" pos:end="11:15"><name pos:start="11:9" pos:end="11:15">int32_t</name></type> <name pos:start="11:17" pos:end="11:19">lor</name> <init pos:start="11:21" pos:end="11:23">= <expr pos:start="11:23" pos:end="11:23"><literal type="number" pos:start="11:23" pos:end="11:23">0</literal></expr></init></decl>, <decl pos:start="11:26" pos:end="11:33"><type ref="prev" pos:start="11:9" pos:end="11:15"/><name pos:start="11:26" pos:end="11:29">diff</name> <init pos:start="11:31" pos:end="11:33">= <expr pos:start="11:33" pos:end="11:33"><literal type="number" pos:start="11:33" pos:end="11:33">0</literal></expr></init></decl>;</decl_stmt>
        <for pos:start="12:9" pos:end="17:9">for <control pos:start="12:13" pos:end="12:40">(<init pos:start="12:14" pos:end="12:19"><expr pos:start="12:14" pos:end="12:18"><name pos:start="12:14" pos:end="12:14">i</name> <operator pos:start="12:16" pos:end="12:16">=</operator> <literal type="number" pos:start="12:18" pos:end="12:18">0</literal></expr>;</init> <condition pos:start="12:21" pos:end="12:35"><expr pos:start="12:21" pos:end="12:34"><name pos:start="12:21" pos:end="12:21">i</name> <operator pos:start="12:23" pos:end="12:23">&lt;</operator> <name pos:start="12:25" pos:end="12:34">nb_samples</name></expr>;</condition> <incr pos:start="12:37" pos:end="12:39"><expr pos:start="12:37" pos:end="12:39"><name pos:start="12:37" pos:end="12:37">i</name><operator pos:start="12:38" pos:end="12:39">++</operator></expr></incr>)</control> <block pos:start="12:42" pos:end="17:9">{<block_content pos:start="13:13" pos:end="16:22">
            <expr_stmt pos:start="13:13" pos:end="13:48"><expr pos:start="13:13" pos:end="13:47"><name pos:start="13:13" pos:end="13:15">lor</name>  <operator pos:start="13:18" pos:end="13:19">|=</operator> <name pos:start="13:21" pos:end="13:32"><name pos:start="13:21" pos:end="13:29">samples_l</name><index pos:start="13:30" pos:end="13:32">[<expr pos:start="13:31" pos:end="13:31"><name pos:start="13:31" pos:end="13:31">i</name></expr>]</index></name> <operator pos:start="13:34" pos:end="13:34">|</operator> <name pos:start="13:36" pos:end="13:47"><name pos:start="13:36" pos:end="13:44">samples_r</name><index pos:start="13:45" pos:end="13:47">[<expr pos:start="13:46" pos:end="13:46"><name pos:start="13:46" pos:end="13:46">i</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt pos:start="14:13" pos:end="14:48"><expr pos:start="14:13" pos:end="14:47"><name pos:start="14:13" pos:end="14:16">diff</name> <operator pos:start="14:18" pos:end="14:19">|=</operator> <name pos:start="14:21" pos:end="14:32"><name pos:start="14:21" pos:end="14:29">samples_l</name><index pos:start="14:30" pos:end="14:32">[<expr pos:start="14:31" pos:end="14:31"><name pos:start="14:31" pos:end="14:31">i</name></expr>]</index></name> <operator pos:start="14:34" pos:end="14:34">-</operator> <name pos:start="14:36" pos:end="14:47"><name pos:start="14:36" pos:end="14:44">samples_r</name><index pos:start="14:45" pos:end="14:47">[<expr pos:start="14:46" pos:end="14:46"><name pos:start="14:46" pos:end="14:46">i</name></expr>]</index></name></expr>;</expr_stmt>
            <if_stmt pos:start="15:13" pos:end="16:22"><if pos:start="15:13" pos:end="16:22">if <condition pos:start="15:16" pos:end="15:28">(<expr pos:start="15:17" pos:end="15:27"><name pos:start="15:17" pos:end="15:19">lor</name> <operator pos:start="15:21" pos:end="15:22">&amp;&amp;</operator> <name pos:start="15:24" pos:end="15:27">diff</name></expr>)</condition><block type="pseudo" pos:start="16:17" pos:end="16:22"><block_content pos:start="16:17" pos:end="16:22">
                <break pos:start="16:17" pos:end="16:22">break;</break></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <if_stmt pos:start="18:9" pos:end="30:9"><if pos:start="18:9" pos:end="26:9">if <condition pos:start="18:12" pos:end="18:44">(<expr pos:start="18:13" pos:end="18:43"><name pos:start="18:13" pos:end="18:13">i</name> <operator pos:start="18:15" pos:end="18:16">==</operator> <name pos:start="18:18" pos:end="18:27">nb_samples</name> <operator pos:start="18:29" pos:end="18:30">&amp;&amp;</operator> <name pos:start="18:32" pos:end="18:34">lor</name> <operator pos:start="18:36" pos:end="18:37">&amp;&amp;</operator> <operator pos:start="18:39" pos:end="18:39">!</operator><name pos:start="18:40" pos:end="18:43">diff</name></expr>)</condition> <block pos:start="18:46" pos:end="26:9">{<block_content pos:start="19:13" pos:end="25:13">
            <expr_stmt pos:start="19:13" pos:end="19:61"><expr pos:start="19:13" pos:end="19:60"><name pos:start="19:13" pos:end="19:20"><name pos:start="19:13" pos:end="19:13">s</name><operator pos:start="19:14" pos:end="19:15">-&gt;</operator><name pos:start="19:16" pos:end="19:20">flags</name></name> <operator pos:start="19:22" pos:end="19:23">&amp;=</operator> <operator pos:start="19:25" pos:end="19:25">~</operator><operator pos:start="19:26" pos:end="19:26">(</operator><name pos:start="19:27" pos:end="19:41">WV_JOINT_STEREO</name> <operator pos:start="19:43" pos:end="19:43">|</operator> <name pos:start="19:45" pos:end="19:59">WV_CROSS_DECORR</name><operator pos:start="19:60" pos:end="19:60">)</operator></expr>;</expr_stmt>
            <expr_stmt pos:start="20:13" pos:end="20:40"><expr pos:start="20:13" pos:end="20:39"><name pos:start="20:13" pos:end="20:20"><name pos:start="20:13" pos:end="20:13">s</name><operator pos:start="20:14" pos:end="20:15">-&gt;</operator><name pos:start="20:16" pos:end="20:20">flags</name></name> <operator pos:start="20:22" pos:end="20:23">|=</operator> <name pos:start="20:25" pos:end="20:39">WV_FALSE_STEREO</name></expr>;</expr_stmt>
            <if_stmt pos:start="21:13" pos:end="25:13"><if pos:start="21:13" pos:end="25:13">if <condition pos:start="21:16" pos:end="21:33">(<expr pos:start="21:17" pos:end="21:32"><operator pos:start="21:17" pos:end="21:17">!</operator><name pos:start="21:18" pos:end="21:32"><name pos:start="21:18" pos:end="21:18">s</name><operator pos:start="21:19" pos:end="21:20">-&gt;</operator><name pos:start="21:21" pos:end="21:32">false_stereo</name></name></expr>)</condition> <block pos:start="21:35" pos:end="25:13">{<block_content pos:start="22:17" pos:end="24:28">
                <expr_stmt pos:start="22:17" pos:end="22:36"><expr pos:start="22:17" pos:end="22:35"><name pos:start="22:17" pos:end="22:31"><name pos:start="22:17" pos:end="22:17">s</name><operator pos:start="22:18" pos:end="22:19">-&gt;</operator><name pos:start="22:20" pos:end="22:31">false_stereo</name></name> <operator pos:start="22:33" pos:end="22:33">=</operator> <literal type="number" pos:start="22:35" pos:end="22:35">1</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="23:17" pos:end="23:33"><expr pos:start="23:17" pos:end="23:32"><name pos:start="23:17" pos:end="23:28"><name pos:start="23:17" pos:end="23:17">s</name><operator pos:start="23:18" pos:end="23:19">-&gt;</operator><name pos:start="23:20" pos:end="23:28">num_terms</name></name> <operator pos:start="23:30" pos:end="23:30">=</operator> <literal type="number" pos:start="23:32" pos:end="23:32">0</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="24:17" pos:end="24:28"><expr pos:start="24:17" pos:end="24:27"><call pos:start="24:17" pos:end="24:27"><name pos:start="24:17" pos:end="24:21">CLEAR</name><argument_list pos:start="24:22" pos:end="24:27">(<argument pos:start="24:23" pos:end="24:26"><expr pos:start="24:23" pos:end="24:26"><name pos:start="24:23" pos:end="24:26"><name pos:start="24:23" pos:end="24:23">s</name><operator pos:start="24:24" pos:end="24:25">-&gt;</operator><name pos:start="24:26" pos:end="24:26">w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="26:11" pos:end="30:9">else if <condition pos:start="26:19" pos:end="26:35">(<expr pos:start="26:20" pos:end="26:34"><name pos:start="26:20" pos:end="26:34"><name pos:start="26:20" pos:end="26:20">s</name><operator pos:start="26:21" pos:end="26:22">-&gt;</operator><name pos:start="26:23" pos:end="26:34">false_stereo</name></name></expr>)</condition> <block pos:start="26:37" pos:end="30:9">{<block_content pos:start="27:13" pos:end="29:24">
            <expr_stmt pos:start="27:13" pos:end="27:32"><expr pos:start="27:13" pos:end="27:31"><name pos:start="27:13" pos:end="27:27"><name pos:start="27:13" pos:end="27:13">s</name><operator pos:start="27:14" pos:end="27:15">-&gt;</operator><name pos:start="27:16" pos:end="27:27">false_stereo</name></name> <operator pos:start="27:29" pos:end="27:29">=</operator> <literal type="number" pos:start="27:31" pos:end="27:31">0</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="28:13" pos:end="28:29"><expr pos:start="28:13" pos:end="28:28"><name pos:start="28:13" pos:end="28:24"><name pos:start="28:13" pos:end="28:13">s</name><operator pos:start="28:14" pos:end="28:15">-&gt;</operator><name pos:start="28:16" pos:end="28:24">num_terms</name></name> <operator pos:start="28:26" pos:end="28:26">=</operator> <literal type="number" pos:start="28:28" pos:end="28:28">0</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="29:13" pos:end="29:24"><expr pos:start="29:13" pos:end="29:23"><call pos:start="29:13" pos:end="29:23"><name pos:start="29:13" pos:end="29:17">CLEAR</name><argument_list pos:start="29:18" pos:end="29:23">(<argument pos:start="29:19" pos:end="29:22"><expr pos:start="29:19" pos:end="29:22"><name pos:start="29:19" pos:end="29:22"><name pos:start="29:19" pos:end="29:19">s</name><operator pos:start="29:20" pos:end="29:21">-&gt;</operator><name pos:start="29:22" pos:end="29:22">w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="32:5" pos:end="43:5"><if pos:start="32:5" pos:end="43:5">if <condition pos:start="32:8" pos:end="32:30">(<expr pos:start="32:9" pos:end="32:29"><name pos:start="32:9" pos:end="32:16"><name pos:start="32:9" pos:end="32:9">s</name><operator pos:start="32:10" pos:end="32:11">-&gt;</operator><name pos:start="32:12" pos:end="32:16">flags</name></name> <operator pos:start="32:18" pos:end="32:18">&amp;</operator> <name pos:start="32:20" pos:end="32:29">SHIFT_MASK</name></expr>)</condition> <block pos:start="32:32" pos:end="43:5">{<block_content pos:start="33:9" pos:end="42:47">
        <decl_stmt pos:start="33:9" pos:end="33:57"><decl pos:start="33:9" pos:end="33:56"><type pos:start="33:9" pos:end="33:11"><name pos:start="33:9" pos:end="33:11">int</name></type> <name pos:start="33:13" pos:end="33:17">shift</name> <init pos:start="33:19" pos:end="33:56">= <expr pos:start="33:21" pos:end="33:56"><operator pos:start="33:21" pos:end="33:21">(</operator><name pos:start="33:22" pos:end="33:29"><name pos:start="33:22" pos:end="33:22">s</name><operator pos:start="33:23" pos:end="33:24">-&gt;</operator><name pos:start="33:25" pos:end="33:29">flags</name></name> <operator pos:start="33:31" pos:end="33:31">&amp;</operator> <name pos:start="33:33" pos:end="33:42">SHIFT_MASK</name><operator pos:start="33:43" pos:end="33:43">)</operator> <operator pos:start="33:45" pos:end="33:46">&gt;&gt;</operator> <name pos:start="33:48" pos:end="33:56">SHIFT_LSB</name></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="34:9" pos:end="34:51"><decl pos:start="34:9" pos:end="34:50"><type pos:start="34:9" pos:end="34:11"><name pos:start="34:9" pos:end="34:11">int</name></type> <name pos:start="34:13" pos:end="34:15">mag</name> <init pos:start="34:17" pos:end="34:50">= <expr pos:start="34:19" pos:end="34:50"><operator pos:start="34:19" pos:end="34:19">(</operator><name pos:start="34:20" pos:end="34:27"><name pos:start="34:20" pos:end="34:20">s</name><operator pos:start="34:21" pos:end="34:22">-&gt;</operator><name pos:start="34:23" pos:end="34:27">flags</name></name> <operator pos:start="34:29" pos:end="34:29">&amp;</operator> <name pos:start="34:31" pos:end="34:38">MAG_MASK</name><operator pos:start="34:39" pos:end="34:39">)</operator> <operator pos:start="34:41" pos:end="34:42">&gt;&gt;</operator> <name pos:start="34:44" pos:end="34:50">MAG_LSB</name></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="35:9" pos:end="38:66"><if pos:start="35:9" pos:end="36:53">if <condition pos:start="35:12" pos:end="35:36">(<expr pos:start="35:13" pos:end="35:35"><name pos:start="35:13" pos:end="35:20"><name pos:start="35:13" pos:end="35:13">s</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:20">flags</name></name> <operator pos:start="35:22" pos:end="35:22">&amp;</operator> <name pos:start="35:24" pos:end="35:35">WV_MONO_DATA</name></expr>)</condition><block type="pseudo" pos:start="36:13" pos:end="36:53"><block_content pos:start="36:13" pos:end="36:53">
            <expr_stmt pos:start="36:13" pos:end="36:53"><expr pos:start="36:13" pos:end="36:52"><call pos:start="36:13" pos:end="36:52"><name pos:start="36:13" pos:end="36:22">shift_mono</name><argument_list pos:start="36:23" pos:end="36:52">(<argument pos:start="36:24" pos:end="36:32"><expr pos:start="36:24" pos:end="36:32"><name pos:start="36:24" pos:end="36:32">samples_l</name></expr></argument>, <argument pos:start="36:35" pos:end="36:44"><expr pos:start="36:35" pos:end="36:44"><name pos:start="36:35" pos:end="36:44">nb_samples</name></expr></argument>, <argument pos:start="36:47" pos:end="36:51"><expr pos:start="36:47" pos:end="36:51"><name pos:start="36:47" pos:end="36:51">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else pos:start="37:9" pos:end="38:66">else<block type="pseudo" pos:start="38:13" pos:end="38:66"><block_content pos:start="38:13" pos:end="38:66">
            <expr_stmt pos:start="38:13" pos:end="38:66"><expr pos:start="38:13" pos:end="38:65"><call pos:start="38:13" pos:end="38:65"><name pos:start="38:13" pos:end="38:24">shift_stereo</name><argument_list pos:start="38:25" pos:end="38:65">(<argument pos:start="38:26" pos:end="38:34"><expr pos:start="38:26" pos:end="38:34"><name pos:start="38:26" pos:end="38:34">samples_l</name></expr></argument>, <argument pos:start="38:37" pos:end="38:45"><expr pos:start="38:37" pos:end="38:45"><name pos:start="38:37" pos:end="38:45">samples_r</name></expr></argument>, <argument pos:start="38:48" pos:end="38:57"><expr pos:start="38:48" pos:end="38:57"><name pos:start="38:48" pos:end="38:57">nb_samples</name></expr></argument>, <argument pos:start="38:60" pos:end="38:64"><expr pos:start="38:60" pos:end="38:64"><name pos:start="38:60" pos:end="38:64">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <if_stmt pos:start="39:9" pos:end="42:47"><if pos:start="39:9" pos:end="40:34">if <condition pos:start="39:12" pos:end="39:31">(<expr pos:start="39:13" pos:end="39:30"><operator pos:start="39:13" pos:end="39:13">(</operator><name pos:start="39:14" pos:end="39:16">mag</name> <operator pos:start="39:18" pos:end="39:19">-=</operator> <name pos:start="39:21" pos:end="39:25">shift</name><operator pos:start="39:26" pos:end="39:26">)</operator> <operator pos:start="39:28" pos:end="39:28">&lt;</operator> <literal type="number" pos:start="39:30" pos:end="39:30">0</literal></expr>)</condition><block type="pseudo" pos:start="40:13" pos:end="40:34"><block_content pos:start="40:13" pos:end="40:34">
            <expr_stmt pos:start="40:13" pos:end="40:34"><expr pos:start="40:13" pos:end="40:33"><name pos:start="40:13" pos:end="40:20"><name pos:start="40:13" pos:end="40:13">s</name><operator pos:start="40:14" pos:end="40:15">-&gt;</operator><name pos:start="40:16" pos:end="40:20">flags</name></name> <operator pos:start="40:22" pos:end="40:23">&amp;=</operator> <operator pos:start="40:25" pos:end="40:25">~</operator><name pos:start="40:26" pos:end="40:33">MAG_MASK</name></expr>;</expr_stmt></block_content></block></if>
        <else pos:start="41:9" pos:end="42:47">else<block type="pseudo" pos:start="42:13" pos:end="42:47"><block_content pos:start="42:13" pos:end="42:47">
            <expr_stmt pos:start="42:13" pos:end="42:47"><expr pos:start="42:13" pos:end="42:46"><name pos:start="42:13" pos:end="42:20"><name pos:start="42:13" pos:end="42:13">s</name><operator pos:start="42:14" pos:end="42:15">-&gt;</operator><name pos:start="42:16" pos:end="42:20">flags</name></name> <operator pos:start="42:22" pos:end="42:23">-=</operator> <operator pos:start="42:25" pos:end="42:25">(</operator><literal type="number" pos:start="42:26" pos:end="42:26">1</literal> <operator pos:start="42:28" pos:end="42:29">&lt;&lt;</operator> <name pos:start="42:31" pos:end="42:37">MAG_LSB</name><operator pos:start="42:38" pos:end="42:38">)</operator> <operator pos:start="42:40" pos:end="42:40">*</operator> <name pos:start="42:42" pos:end="42:46">shift</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="44:5" pos:end="62:5"><if pos:start="44:5" pos:end="56:5">if <condition pos:start="44:8" pos:end="44:77">(<expr pos:start="44:9" pos:end="44:76"><operator pos:start="44:9" pos:end="44:9">(</operator><name pos:start="44:10" pos:end="44:17"><name pos:start="44:10" pos:end="44:10">s</name><operator pos:start="44:11" pos:end="44:12">-&gt;</operator><name pos:start="44:13" pos:end="44:17">flags</name></name> <operator pos:start="44:19" pos:end="44:19">&amp;</operator> <name pos:start="44:21" pos:end="44:33">WV_FLOAT_DATA</name><operator pos:start="44:34" pos:end="44:34">)</operator> <operator pos:start="44:36" pos:end="44:37">||</operator> <operator pos:start="44:39" pos:end="44:39">(</operator><name pos:start="44:40" pos:end="44:47"><name pos:start="44:40" pos:end="44:40">s</name><operator pos:start="44:41" pos:end="44:42">-&gt;</operator><name pos:start="44:43" pos:end="44:47">flags</name></name> <operator pos:start="44:49" pos:end="44:49">&amp;</operator> <name pos:start="44:51" pos:end="44:58">MAG_MASK</name><operator pos:start="44:59" pos:end="44:59">)</operator> <operator pos:start="44:61" pos:end="44:62">&gt;&gt;</operator> <name pos:start="44:64" pos:end="44:70">MAG_LSB</name> <operator pos:start="44:72" pos:end="44:73">&gt;=</operator> <literal type="number" pos:start="44:75" pos:end="44:76">24</literal></expr>)</condition> <block pos:start="44:79" pos:end="56:5">{<block_content pos:start="45:9" pos:end="55:25">
        <expr_stmt pos:start="45:9" pos:end="45:89"><expr pos:start="45:9" pos:end="45:88"><call pos:start="45:9" pos:end="45:88"><name pos:start="45:9" pos:end="45:29">av_fast_padded_malloc</name><argument_list pos:start="45:30" pos:end="45:88">(<argument pos:start="45:31" pos:end="45:40"><expr pos:start="45:31" pos:end="45:40"><operator pos:start="45:31" pos:end="45:31">&amp;</operator><name pos:start="45:32" pos:end="45:40"><name pos:start="45:32" pos:end="45:32">s</name><operator pos:start="45:33" pos:end="45:34">-&gt;</operator><name pos:start="45:35" pos:end="45:40">orig_l</name></name></expr></argument>, <argument pos:start="45:43" pos:end="45:57"><expr pos:start="45:43" pos:end="45:57"><operator pos:start="45:43" pos:end="45:43">&amp;</operator><name pos:start="45:44" pos:end="45:57"><name pos:start="45:44" pos:end="45:44">s</name><operator pos:start="45:45" pos:end="45:46">-&gt;</operator><name pos:start="45:47" pos:end="45:57">orig_l_size</name></name></expr></argument>, <argument pos:start="45:60" pos:end="45:87"><expr pos:start="45:60" pos:end="45:87"><sizeof pos:start="45:60" pos:end="45:74">sizeof<argument_list pos:start="45:66" pos:end="45:74">(<argument pos:start="45:67" pos:end="45:73"><expr pos:start="45:67" pos:end="45:73"><name pos:start="45:67" pos:end="45:73">int32_t</name></expr></argument>)</argument_list></sizeof> <operator pos:start="45:76" pos:end="45:76">*</operator> <name pos:start="45:78" pos:end="45:87">nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="46:9" pos:end="46:67"><expr pos:start="46:9" pos:end="46:66"><call pos:start="46:9" pos:end="46:66"><name pos:start="46:9" pos:end="46:14">memcpy</name><argument_list pos:start="46:15" pos:end="46:66">(<argument pos:start="46:16" pos:end="46:24"><expr pos:start="46:16" pos:end="46:24"><name pos:start="46:16" pos:end="46:24"><name pos:start="46:16" pos:end="46:16">s</name><operator pos:start="46:17" pos:end="46:18">-&gt;</operator><name pos:start="46:19" pos:end="46:24">orig_l</name></name></expr></argument>, <argument pos:start="46:27" pos:end="46:35"><expr pos:start="46:27" pos:end="46:35"><name pos:start="46:27" pos:end="46:35">samples_l</name></expr></argument>, <argument pos:start="46:38" pos:end="46:65"><expr pos:start="46:38" pos:end="46:65"><sizeof pos:start="46:38" pos:end="46:52">sizeof<argument_list pos:start="46:44" pos:end="46:52">(<argument pos:start="46:45" pos:end="46:51"><expr pos:start="46:45" pos:end="46:51"><name pos:start="46:45" pos:end="46:51">int32_t</name></expr></argument>)</argument_list></sizeof> <operator pos:start="46:54" pos:end="46:54">*</operator> <name pos:start="46:56" pos:end="46:65">nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="47:9" pos:end="50:9"><if pos:start="47:9" pos:end="50:9">if <condition pos:start="47:12" pos:end="47:39">(<expr pos:start="47:13" pos:end="47:38"><operator pos:start="47:13" pos:end="47:13">!</operator><operator pos:start="47:14" pos:end="47:14">(</operator><name pos:start="47:15" pos:end="47:22"><name pos:start="47:15" pos:end="47:15">s</name><operator pos:start="47:16" pos:end="47:17">-&gt;</operator><name pos:start="47:18" pos:end="47:22">flags</name></name> <operator pos:start="47:24" pos:end="47:24">&amp;</operator> <name pos:start="47:26" pos:end="47:37">WV_MONO_DATA</name><operator pos:start="47:38" pos:end="47:38">)</operator></expr>)</condition> <block pos:start="47:41" pos:end="50:9">{<block_content pos:start="48:13" pos:end="49:71">
            <expr_stmt pos:start="48:13" pos:end="48:93"><expr pos:start="48:13" pos:end="48:92"><call pos:start="48:13" pos:end="48:92"><name pos:start="48:13" pos:end="48:33">av_fast_padded_malloc</name><argument_list pos:start="48:34" pos:end="48:92">(<argument pos:start="48:35" pos:end="48:44"><expr pos:start="48:35" pos:end="48:44"><operator pos:start="48:35" pos:end="48:35">&amp;</operator><name pos:start="48:36" pos:end="48:44"><name pos:start="48:36" pos:end="48:36">s</name><operator pos:start="48:37" pos:end="48:38">-&gt;</operator><name pos:start="48:39" pos:end="48:44">orig_r</name></name></expr></argument>, <argument pos:start="48:47" pos:end="48:61"><expr pos:start="48:47" pos:end="48:61"><operator pos:start="48:47" pos:end="48:47">&amp;</operator><name pos:start="48:48" pos:end="48:61"><name pos:start="48:48" pos:end="48:48">s</name><operator pos:start="48:49" pos:end="48:50">-&gt;</operator><name pos:start="48:51" pos:end="48:61">orig_r_size</name></name></expr></argument>, <argument pos:start="48:64" pos:end="48:91"><expr pos:start="48:64" pos:end="48:91"><sizeof pos:start="48:64" pos:end="48:78">sizeof<argument_list pos:start="48:70" pos:end="48:78">(<argument pos:start="48:71" pos:end="48:77"><expr pos:start="48:71" pos:end="48:77"><name pos:start="48:71" pos:end="48:77">int32_t</name></expr></argument>)</argument_list></sizeof> <operator pos:start="48:80" pos:end="48:80">*</operator> <name pos:start="48:82" pos:end="48:91">nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="49:13" pos:end="49:71"><expr pos:start="49:13" pos:end="49:70"><call pos:start="49:13" pos:end="49:70"><name pos:start="49:13" pos:end="49:18">memcpy</name><argument_list pos:start="49:19" pos:end="49:70">(<argument pos:start="49:20" pos:end="49:28"><expr pos:start="49:20" pos:end="49:28"><name pos:start="49:20" pos:end="49:28"><name pos:start="49:20" pos:end="49:20">s</name><operator pos:start="49:21" pos:end="49:22">-&gt;</operator><name pos:start="49:23" pos:end="49:28">orig_r</name></name></expr></argument>, <argument pos:start="49:31" pos:end="49:39"><expr pos:start="49:31" pos:end="49:39"><name pos:start="49:31" pos:end="49:39">samples_r</name></expr></argument>, <argument pos:start="49:42" pos:end="49:69"><expr pos:start="49:42" pos:end="49:69"><sizeof pos:start="49:42" pos:end="49:56">sizeof<argument_list pos:start="49:48" pos:end="49:56">(<argument pos:start="49:49" pos:end="49:55"><expr pos:start="49:49" pos:end="49:55"><name pos:start="49:49" pos:end="49:55">int32_t</name></expr></argument>)</argument_list></sizeof> <operator pos:start="49:58" pos:end="49:58">*</operator> <name pos:start="49:60" pos:end="49:69">nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="51:9" pos:end="54:72"><if pos:start="51:9" pos:end="52:72">if <condition pos:start="51:12" pos:end="51:37">(<expr pos:start="51:13" pos:end="51:36"><name pos:start="51:13" pos:end="51:20"><name pos:start="51:13" pos:end="51:13">s</name><operator pos:start="51:14" pos:end="51:15">-&gt;</operator><name pos:start="51:16" pos:end="51:20">flags</name></name> <operator pos:start="51:22" pos:end="51:22">&amp;</operator> <name pos:start="51:24" pos:end="51:36">WV_FLOAT_DATA</name></expr>)</condition><block type="pseudo" pos:start="52:13" pos:end="52:72"><block_content pos:start="52:13" pos:end="52:72">
            <expr_stmt pos:start="52:13" pos:end="52:72"><expr pos:start="52:13" pos:end="52:71"><name pos:start="52:13" pos:end="52:21">got_extra</name> <operator pos:start="52:23" pos:end="52:23">=</operator> <call pos:start="52:25" pos:end="52:71"><name pos:start="52:25" pos:end="52:34">scan_float</name><argument_list pos:start="52:35" pos:end="52:71">(<argument pos:start="52:36" pos:end="52:36"><expr pos:start="52:36" pos:end="52:36"><name pos:start="52:36" pos:end="52:36">s</name></expr></argument>, <argument pos:start="52:39" pos:end="52:47"><expr pos:start="52:39" pos:end="52:47"><name pos:start="52:39" pos:end="52:47">samples_l</name></expr></argument>, <argument pos:start="52:50" pos:end="52:58"><expr pos:start="52:50" pos:end="52:58"><name pos:start="52:50" pos:end="52:58">samples_r</name></expr></argument>, <argument pos:start="52:61" pos:end="52:70"><expr pos:start="52:61" pos:end="52:70"><name pos:start="52:61" pos:end="52:70">nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else pos:start="53:9" pos:end="54:72">else<block type="pseudo" pos:start="54:13" pos:end="54:72"><block_content pos:start="54:13" pos:end="54:72">
            <expr_stmt pos:start="54:13" pos:end="54:72"><expr pos:start="54:13" pos:end="54:71"><name pos:start="54:13" pos:end="54:21">got_extra</name> <operator pos:start="54:23" pos:end="54:23">=</operator> <call pos:start="54:25" pos:end="54:71"><name pos:start="54:25" pos:end="54:34">scan_int32</name><argument_list pos:start="54:35" pos:end="54:71">(<argument pos:start="54:36" pos:end="54:36"><expr pos:start="54:36" pos:end="54:36"><name pos:start="54:36" pos:end="54:36">s</name></expr></argument>, <argument pos:start="54:39" pos:end="54:47"><expr pos:start="54:39" pos:end="54:47"><name pos:start="54:39" pos:end="54:47">samples_l</name></expr></argument>, <argument pos:start="54:50" pos:end="54:58"><expr pos:start="54:50" pos:end="54:58"><name pos:start="54:50" pos:end="54:58">samples_r</name></expr></argument>, <argument pos:start="54:61" pos:end="54:70"><expr pos:start="54:61" pos:end="54:70"><name pos:start="54:61" pos:end="54:70">nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt pos:start="55:9" pos:end="55:25"><expr pos:start="55:9" pos:end="55:24"><name pos:start="55:9" pos:end="55:20"><name pos:start="55:9" pos:end="55:9">s</name><operator pos:start="55:10" pos:end="55:11">-&gt;</operator><name pos:start="55:12" pos:end="55:20">num_terms</name></name> <operator pos:start="55:22" pos:end="55:22">=</operator> <literal type="number" pos:start="55:24" pos:end="55:24">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="56:7" pos:end="62:5">else <block pos:start="56:12" pos:end="62:5">{<block_content pos:start="57:9" pos:end="61:9">
        <expr_stmt pos:start="57:9" pos:end="57:56"><expr pos:start="57:9" pos:end="57:55"><call pos:start="57:9" pos:end="57:55"><name pos:start="57:9" pos:end="57:18">scan_int23</name><argument_list pos:start="57:19" pos:end="57:55">(<argument pos:start="57:20" pos:end="57:20"><expr pos:start="57:20" pos:end="57:20"><name pos:start="57:20" pos:end="57:20">s</name></expr></argument>, <argument pos:start="57:23" pos:end="57:31"><expr pos:start="57:23" pos:end="57:31"><name pos:start="57:23" pos:end="57:31">samples_l</name></expr></argument>, <argument pos:start="57:34" pos:end="57:42"><expr pos:start="57:34" pos:end="57:42"><name pos:start="57:34" pos:end="57:42">samples_r</name></expr></argument>, <argument pos:start="57:45" pos:end="57:54"><expr pos:start="57:45" pos:end="57:54"><name pos:start="57:45" pos:end="57:54">nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="58:9" pos:end="61:9"><if pos:start="58:9" pos:end="61:9">if <condition pos:start="58:12" pos:end="58:71">(<expr pos:start="58:13" pos:end="58:70"><name pos:start="58:13" pos:end="58:20"><name pos:start="58:13" pos:end="58:13">s</name><operator pos:start="58:14" pos:end="58:15">-&gt;</operator><name pos:start="58:16" pos:end="58:20">shift</name></name> <operator pos:start="58:22" pos:end="58:23">!=</operator> <name pos:start="58:25" pos:end="58:38"><name pos:start="58:25" pos:end="58:25">s</name><operator pos:start="58:26" pos:end="58:27">-&gt;</operator><name pos:start="58:28" pos:end="58:38">int32_zeros</name></name> <operator pos:start="58:40" pos:end="58:40">+</operator> <name pos:start="58:42" pos:end="58:54"><name pos:start="58:42" pos:end="58:42">s</name><operator pos:start="58:43" pos:end="58:44">-&gt;</operator><name pos:start="58:45" pos:end="58:54">int32_ones</name></name> <operator pos:start="58:56" pos:end="58:56">+</operator> <name pos:start="58:58" pos:end="58:70"><name pos:start="58:58" pos:end="58:58">s</name><operator pos:start="58:59" pos:end="58:60">-&gt;</operator><name pos:start="58:61" pos:end="58:70">int32_dups</name></name></expr>)</condition> <block pos:start="58:73" pos:end="61:9">{<block_content pos:start="59:13" pos:end="60:29">
            <expr_stmt pos:start="59:13" pos:end="59:70"><expr pos:start="59:13" pos:end="59:69"><name pos:start="59:13" pos:end="59:20"><name pos:start="59:13" pos:end="59:13">s</name><operator pos:start="59:14" pos:end="59:15">-&gt;</operator><name pos:start="59:16" pos:end="59:20">shift</name></name> <operator pos:start="59:22" pos:end="59:22">=</operator> <name pos:start="59:24" pos:end="59:37"><name pos:start="59:24" pos:end="59:24">s</name><operator pos:start="59:25" pos:end="59:26">-&gt;</operator><name pos:start="59:27" pos:end="59:37">int32_zeros</name></name> <operator pos:start="59:39" pos:end="59:39">+</operator> <name pos:start="59:41" pos:end="59:53"><name pos:start="59:41" pos:end="59:41">s</name><operator pos:start="59:42" pos:end="59:43">-&gt;</operator><name pos:start="59:44" pos:end="59:53">int32_ones</name></name> <operator pos:start="59:55" pos:end="59:55">+</operator> <name pos:start="59:57" pos:end="59:69"><name pos:start="59:57" pos:end="59:57">s</name><operator pos:start="59:58" pos:end="59:59">-&gt;</operator><name pos:start="59:60" pos:end="59:69">int32_dups</name></name></expr>;</expr_stmt>
            <expr_stmt pos:start="60:13" pos:end="60:29"><expr pos:start="60:13" pos:end="60:28"><name pos:start="60:13" pos:end="60:24"><name pos:start="60:13" pos:end="60:13">s</name><operator pos:start="60:14" pos:end="60:15">-&gt;</operator><name pos:start="60:16" pos:end="60:24">num_terms</name></name> <operator pos:start="60:26" pos:end="60:26">=</operator> <literal type="number" pos:start="60:28" pos:end="60:28">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt pos:start="63:5" pos:end="70:5"><if pos:start="63:5" pos:end="70:5">if <condition pos:start="63:8" pos:end="63:40">(<expr pos:start="63:9" pos:end="63:39"><operator pos:start="63:9" pos:end="63:9">!</operator><name pos:start="63:10" pos:end="63:22"><name pos:start="63:10" pos:end="63:10">s</name><operator pos:start="63:11" pos:end="63:12">-&gt;</operator><name pos:start="63:13" pos:end="63:22">num_passes</name></name> <operator pos:start="63:24" pos:end="63:25">&amp;&amp;</operator> <operator pos:start="63:27" pos:end="63:27">!</operator><name pos:start="63:28" pos:end="63:39"><name pos:start="63:28" pos:end="63:28">s</name><operator pos:start="63:29" pos:end="63:30">-&gt;</operator><name pos:start="63:31" pos:end="63:39">num_terms</name></name></expr>)</condition> <block pos:start="63:42" pos:end="70:5">{<block_content pos:start="64:9" pos:end="69:26">
        <expr_stmt pos:start="64:9" pos:end="64:26"><expr pos:start="64:9" pos:end="64:25"><name pos:start="64:9" pos:end="64:21"><name pos:start="64:9" pos:end="64:9">s</name><operator pos:start="64:10" pos:end="64:11">-&gt;</operator><name pos:start="64:12" pos:end="64:21">num_passes</name></name> <operator pos:start="64:23" pos:end="64:23">=</operator> <literal type="number" pos:start="64:25" pos:end="64:25">1</literal></expr>;</expr_stmt>
        <if_stmt pos:start="65:9" pos:end="68:59"><if pos:start="65:9" pos:end="66:46">if <condition pos:start="65:12" pos:end="65:36">(<expr pos:start="65:13" pos:end="65:35"><name pos:start="65:13" pos:end="65:20"><name pos:start="65:13" pos:end="65:13">s</name><operator pos:start="65:14" pos:end="65:15">-&gt;</operator><name pos:start="65:16" pos:end="65:20">flags</name></name> <operator pos:start="65:22" pos:end="65:22">&amp;</operator> <name pos:start="65:24" pos:end="65:35">WV_MONO_DATA</name></expr>)</condition><block type="pseudo" pos:start="66:13" pos:end="66:46"><block_content pos:start="66:13" pos:end="66:46">
            <expr_stmt pos:start="66:13" pos:end="66:46"><expr pos:start="66:13" pos:end="66:45"><name pos:start="66:13" pos:end="66:15">ret</name> <operator pos:start="66:17" pos:end="66:17">=</operator> <call pos:start="66:19" pos:end="66:45"><name pos:start="66:19" pos:end="66:25">wv_mono</name><argument_list pos:start="66:26" pos:end="66:45">(<argument pos:start="66:27" pos:end="66:27"><expr pos:start="66:27" pos:end="66:27"><name pos:start="66:27" pos:end="66:27">s</name></expr></argument>, <argument pos:start="66:30" pos:end="66:38"><expr pos:start="66:30" pos:end="66:38"><name pos:start="66:30" pos:end="66:38">samples_l</name></expr></argument>, <argument pos:start="66:41" pos:end="66:41"><expr pos:start="66:41" pos:end="66:41"><literal type="number" pos:start="66:41" pos:end="66:41">1</literal></expr></argument>, <argument pos:start="66:44" pos:end="66:44"><expr pos:start="66:44" pos:end="66:44"><literal type="number" pos:start="66:44" pos:end="66:44">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else pos:start="67:9" pos:end="68:59">else<block type="pseudo" pos:start="68:13" pos:end="68:59"><block_content pos:start="68:13" pos:end="68:59">
            <expr_stmt pos:start="68:13" pos:end="68:59"><expr pos:start="68:13" pos:end="68:58"><name pos:start="68:13" pos:end="68:15">ret</name> <operator pos:start="68:17" pos:end="68:17">=</operator> <call pos:start="68:19" pos:end="68:58"><name pos:start="68:19" pos:end="68:27">wv_stereo</name><argument_list pos:start="68:28" pos:end="68:58">(<argument pos:start="68:29" pos:end="68:29"><expr pos:start="68:29" pos:end="68:29"><name pos:start="68:29" pos:end="68:29">s</name></expr></argument>, <argument pos:start="68:32" pos:end="68:40"><expr pos:start="68:32" pos:end="68:40"><name pos:start="68:32" pos:end="68:40">samples_l</name></expr></argument>, <argument pos:start="68:43" pos:end="68:51"><expr pos:start="68:43" pos:end="68:51"><name pos:start="68:43" pos:end="68:51">samples_r</name></expr></argument>, <argument pos:start="68:54" pos:end="68:54"><expr pos:start="68:54" pos:end="68:54"><literal type="number" pos:start="68:54" pos:end="68:54">1</literal></expr></argument>, <argument pos:start="68:57" pos:end="68:57"><expr pos:start="68:57" pos:end="68:57"><literal type="number" pos:start="68:57" pos:end="68:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt pos:start="69:9" pos:end="69:26"><expr pos:start="69:9" pos:end="69:25"><name pos:start="69:9" pos:end="69:21"><name pos:start="69:9" pos:end="69:9">s</name><operator pos:start="69:10" pos:end="69:11">-&gt;</operator><name pos:start="69:12" pos:end="69:21">num_passes</name></name> <operator pos:start="69:23" pos:end="69:23">=</operator> <literal type="number" pos:start="69:25" pos:end="69:25">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="71:5" pos:end="81:5"><if pos:start="71:5" pos:end="76:5">if <condition pos:start="71:8" pos:end="71:32">(<expr pos:start="71:9" pos:end="71:31"><name pos:start="71:9" pos:end="71:16"><name pos:start="71:9" pos:end="71:9">s</name><operator pos:start="71:10" pos:end="71:11">-&gt;</operator><name pos:start="71:12" pos:end="71:16">flags</name></name> <operator pos:start="71:18" pos:end="71:18">&amp;</operator> <name pos:start="71:20" pos:end="71:31">WV_MONO_DATA</name></expr>)</condition> <block pos:start="71:34" pos:end="76:5">{<block_content pos:start="72:9" pos:end="75:58">
        <for pos:start="72:9" pos:end="73:45">for <control pos:start="72:13" pos:end="72:40">(<init pos:start="72:14" pos:end="72:19"><expr pos:start="72:14" pos:end="72:18"><name pos:start="72:14" pos:end="72:14">i</name> <operator pos:start="72:16" pos:end="72:16">=</operator> <literal type="number" pos:start="72:18" pos:end="72:18">0</literal></expr>;</init> <condition pos:start="72:21" pos:end="72:35"><expr pos:start="72:21" pos:end="72:34"><name pos:start="72:21" pos:end="72:21">i</name> <operator pos:start="72:23" pos:end="72:23">&lt;</operator> <name pos:start="72:25" pos:end="72:34">nb_samples</name></expr>;</condition> <incr pos:start="72:37" pos:end="72:39"><expr pos:start="72:37" pos:end="72:39"><name pos:start="72:37" pos:end="72:37">i</name><operator pos:start="72:38" pos:end="72:39">++</operator></expr></incr>)</control><block type="pseudo" pos:start="73:13" pos:end="73:45"><block_content pos:start="73:13" pos:end="73:45">
            <expr_stmt pos:start="73:13" pos:end="73:45"><expr pos:start="73:13" pos:end="73:44"><name pos:start="73:13" pos:end="73:15">crc</name> <operator pos:start="73:17" pos:end="73:18">+=</operator> <operator pos:start="73:20" pos:end="73:20">(</operator><name pos:start="73:21" pos:end="73:23">crc</name> <operator pos:start="73:25" pos:end="73:26">&lt;&lt;</operator> <literal type="number" pos:start="73:28" pos:end="73:28">1</literal><operator pos:start="73:29" pos:end="73:29">)</operator> <operator pos:start="73:31" pos:end="73:31">+</operator> <name pos:start="73:33" pos:end="73:44"><name pos:start="73:33" pos:end="73:41">samples_l</name><index pos:start="73:42" pos:end="73:44">[<expr pos:start="73:43" pos:end="73:43"><name pos:start="73:43" pos:end="73:43">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
        <if_stmt pos:start="74:9" pos:end="75:58"><if pos:start="74:9" pos:end="75:58">if <condition pos:start="74:12" pos:end="74:26">(<expr pos:start="74:13" pos:end="74:25"><name pos:start="74:13" pos:end="74:25"><name pos:start="74:13" pos:end="74:13">s</name><operator pos:start="74:14" pos:end="74:15">-&gt;</operator><name pos:start="74:16" pos:end="74:25">num_passes</name></name></expr>)</condition><block type="pseudo" pos:start="75:13" pos:end="75:58"><block_content pos:start="75:13" pos:end="75:58">
            <expr_stmt pos:start="75:13" pos:end="75:58"><expr pos:start="75:13" pos:end="75:57"><name pos:start="75:13" pos:end="75:15">ret</name> <operator pos:start="75:17" pos:end="75:17">=</operator> <call pos:start="75:19" pos:end="75:57"><name pos:start="75:19" pos:end="75:25">wv_mono</name><argument_list pos:start="75:26" pos:end="75:57">(<argument pos:start="75:27" pos:end="75:27"><expr pos:start="75:27" pos:end="75:27"><name pos:start="75:27" pos:end="75:27">s</name></expr></argument>, <argument pos:start="75:30" pos:end="75:38"><expr pos:start="75:30" pos:end="75:38"><name pos:start="75:30" pos:end="75:38">samples_l</name></expr></argument>, <argument pos:start="75:41" pos:end="75:53"><expr pos:start="75:41" pos:end="75:53"><operator pos:start="75:41" pos:end="75:41">!</operator><name pos:start="75:42" pos:end="75:53"><name pos:start="75:42" pos:end="75:42">s</name><operator pos:start="75:43" pos:end="75:44">-&gt;</operator><name pos:start="75:45" pos:end="75:53">num_terms</name></name></expr></argument>, <argument pos:start="75:56" pos:end="75:56"><expr pos:start="75:56" pos:end="75:56"><literal type="number" pos:start="75:56" pos:end="75:56">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if> <else pos:start="76:7" pos:end="81:5">else <block pos:start="76:12" pos:end="81:5">{<block_content pos:start="77:9" pos:end="80:71">
        <for pos:start="77:9" pos:end="78:82">for <control pos:start="77:13" pos:end="77:40">(<init pos:start="77:14" pos:end="77:19"><expr pos:start="77:14" pos:end="77:18"><name pos:start="77:14" pos:end="77:14">i</name> <operator pos:start="77:16" pos:end="77:16">=</operator> <literal type="number" pos:start="77:18" pos:end="77:18">0</literal></expr>;</init> <condition pos:start="77:21" pos:end="77:35"><expr pos:start="77:21" pos:end="77:34"><name pos:start="77:21" pos:end="77:21">i</name> <operator pos:start="77:23" pos:end="77:23">&lt;</operator> <name pos:start="77:25" pos:end="77:34">nb_samples</name></expr>;</condition> <incr pos:start="77:37" pos:end="77:39"><expr pos:start="77:37" pos:end="77:39"><name pos:start="77:37" pos:end="77:37">i</name><operator pos:start="77:38" pos:end="77:39">++</operator></expr></incr>)</control><block type="pseudo" pos:start="78:13" pos:end="78:82"><block_content pos:start="78:13" pos:end="78:82">
            <expr_stmt pos:start="78:13" pos:end="78:82"><expr pos:start="78:13" pos:end="78:81"><name pos:start="78:13" pos:end="78:15">crc</name> <operator pos:start="78:17" pos:end="78:18">+=</operator> <operator pos:start="78:20" pos:end="78:20">(</operator><name pos:start="78:21" pos:end="78:23">crc</name> <operator pos:start="78:25" pos:end="78:26">&lt;&lt;</operator> <literal type="number" pos:start="78:28" pos:end="78:28">3</literal><operator pos:start="78:29" pos:end="78:29">)</operator> <operator pos:start="78:31" pos:end="78:31">+</operator> <operator pos:start="78:33" pos:end="78:33">(</operator><name pos:start="78:34" pos:end="78:45"><name pos:start="78:34" pos:end="78:42">samples_l</name><index pos:start="78:43" pos:end="78:45">[<expr pos:start="78:44" pos:end="78:44"><name pos:start="78:44" pos:end="78:44">i</name></expr>]</index></name> <operator pos:start="78:47" pos:end="78:48">&lt;&lt;</operator> <literal type="number" pos:start="78:50" pos:end="78:50">1</literal><operator pos:start="78:51" pos:end="78:51">)</operator> <operator pos:start="78:53" pos:end="78:53">+</operator> <name pos:start="78:55" pos:end="78:66"><name pos:start="78:55" pos:end="78:63">samples_l</name><index pos:start="78:64" pos:end="78:66">[<expr pos:start="78:65" pos:end="78:65"><name pos:start="78:65" pos:end="78:65">i</name></expr>]</index></name> <operator pos:start="78:68" pos:end="78:68">+</operator> <name pos:start="78:70" pos:end="78:81"><name pos:start="78:70" pos:end="78:78">samples_r</name><index pos:start="78:79" pos:end="78:81">[<expr pos:start="78:80" pos:end="78:80"><name pos:start="78:80" pos:end="78:80">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
        <if_stmt pos:start="79:9" pos:end="80:71"><if pos:start="79:9" pos:end="80:71">if <condition pos:start="79:12" pos:end="79:26">(<expr pos:start="79:13" pos:end="79:25"><name pos:start="79:13" pos:end="79:25"><name pos:start="79:13" pos:end="79:13">s</name><operator pos:start="79:14" pos:end="79:15">-&gt;</operator><name pos:start="79:16" pos:end="79:25">num_passes</name></name></expr>)</condition><block type="pseudo" pos:start="80:13" pos:end="80:71"><block_content pos:start="80:13" pos:end="80:71">
            <expr_stmt pos:start="80:13" pos:end="80:71"><expr pos:start="80:13" pos:end="80:70"><name pos:start="80:13" pos:end="80:15">ret</name> <operator pos:start="80:17" pos:end="80:17">=</operator> <call pos:start="80:19" pos:end="80:70"><name pos:start="80:19" pos:end="80:27">wv_stereo</name><argument_list pos:start="80:28" pos:end="80:70">(<argument pos:start="80:29" pos:end="80:29"><expr pos:start="80:29" pos:end="80:29"><name pos:start="80:29" pos:end="80:29">s</name></expr></argument>, <argument pos:start="80:32" pos:end="80:40"><expr pos:start="80:32" pos:end="80:40"><name pos:start="80:32" pos:end="80:40">samples_l</name></expr></argument>, <argument pos:start="80:43" pos:end="80:51"><expr pos:start="80:43" pos:end="80:51"><name pos:start="80:43" pos:end="80:51">samples_r</name></expr></argument>, <argument pos:start="80:54" pos:end="80:66"><expr pos:start="80:54" pos:end="80:66"><operator pos:start="80:54" pos:end="80:54">!</operator><name pos:start="80:55" pos:end="80:66"><name pos:start="80:55" pos:end="80:55">s</name><operator pos:start="80:56" pos:end="80:57">-&gt;</operator><name pos:start="80:58" pos:end="80:66">num_terms</name></name></expr></argument>, <argument pos:start="80:69" pos:end="80:69"><expr pos:start="80:69" pos:end="80:69"><literal type="number" pos:start="80:69" pos:end="80:69">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt pos:start="82:5" pos:end="83:19"><if pos:start="82:5" pos:end="83:19">if <condition pos:start="82:8" pos:end="82:16">(<expr pos:start="82:9" pos:end="82:15"><name pos:start="82:9" pos:end="82:11">ret</name> <operator pos:start="82:13" pos:end="82:13">&lt;</operator> <literal type="number" pos:start="82:15" pos:end="82:15">0</literal></expr>)</condition><block type="pseudo" pos:start="83:9" pos:end="83:19"><block_content pos:start="83:9" pos:end="83:19">
        <return pos:start="83:9" pos:end="83:19">return <expr pos:start="83:16" pos:end="83:18"><name pos:start="83:16" pos:end="83:18">ret</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt pos:start="84:5" pos:end="85:37"><if pos:start="84:5" pos:end="85:37">if <condition pos:start="84:8" pos:end="84:22">(<expr pos:start="84:9" pos:end="84:21"><operator pos:start="84:9" pos:end="84:9">!</operator><name pos:start="84:10" pos:end="84:21"><name pos:start="84:10" pos:end="84:10">s</name><operator pos:start="84:11" pos:end="84:12">-&gt;</operator><name pos:start="84:13" pos:end="84:21">ch_offset</name></name></expr>)</condition><block type="pseudo" pos:start="85:9" pos:end="85:37"><block_content pos:start="85:9" pos:end="85:37">
        <expr_stmt pos:start="85:9" pos:end="85:37"><expr pos:start="85:9" pos:end="85:36"><name pos:start="85:9" pos:end="85:16"><name pos:start="85:9" pos:end="85:9">s</name><operator pos:start="85:10" pos:end="85:11">-&gt;</operator><name pos:start="85:12" pos:end="85:16">flags</name></name> <operator pos:start="85:18" pos:end="85:19">|=</operator> <name pos:start="85:21" pos:end="85:36">WV_INITIAL_BLOCK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt pos:start="86:5" pos:end="86:46"><expr pos:start="86:5" pos:end="86:45"><name pos:start="86:5" pos:end="86:16"><name pos:start="86:5" pos:end="86:5">s</name><operator pos:start="86:6" pos:end="86:7">-&gt;</operator><name pos:start="86:8" pos:end="86:16">ch_offset</name></name> <operator pos:start="86:18" pos:end="86:19">+=</operator> <literal type="number" pos:start="86:21" pos:end="86:23">1</literal> <operator pos:start="86:23" pos:end="86:23">+</operator> <operator pos:start="86:25" pos:end="86:25">!</operator><operator pos:start="86:26" pos:end="86:26">(</operator><name pos:start="86:27" pos:end="86:34"><name pos:start="86:27" pos:end="86:27">s</name><operator pos:start="86:28" pos:end="86:29">-&gt;</operator><name pos:start="86:30" pos:end="86:34">flags</name></name> <operator pos:start="86:36" pos:end="86:36">&amp;</operator> <name pos:start="86:38" pos:end="86:44">WV_MONO</name><operator pos:start="86:45" pos:end="86:45">)</operator></expr>;</expr_stmt>
    <if_stmt pos:start="87:5" pos:end="88:35"><if pos:start="87:5" pos:end="88:35">if <condition pos:start="87:8" pos:end="87:43">(<expr pos:start="87:9" pos:end="87:42"><name pos:start="87:9" pos:end="87:20"><name pos:start="87:9" pos:end="87:9">s</name><operator pos:start="87:10" pos:end="87:11">-&gt;</operator><name pos:start="87:12" pos:end="87:20">ch_offset</name></name> <operator pos:start="87:22" pos:end="87:23">==</operator> <name pos:start="87:25" pos:end="87:42"><name pos:start="87:25" pos:end="87:25">s</name><operator pos:start="87:26" pos:end="87:27">-&gt;</operator><name pos:start="87:28" pos:end="87:32">avctx</name><operator pos:start="87:33" pos:end="87:34">-&gt;</operator><name pos:start="87:35" pos:end="87:42">channels</name></name></expr>)</condition><block type="pseudo" pos:start="88:9" pos:end="88:35"><block_content pos:start="88:9" pos:end="88:35">
        <expr_stmt pos:start="88:9" pos:end="88:35"><expr pos:start="88:9" pos:end="88:34"><name pos:start="88:9" pos:end="88:16"><name pos:start="88:9" pos:end="88:9">s</name><operator pos:start="88:10" pos:end="88:11">-&gt;</operator><name pos:start="88:12" pos:end="88:16">flags</name></name> <operator pos:start="88:18" pos:end="88:19">|=</operator> <name pos:start="88:21" pos:end="88:34">WV_FINAL_BLOCK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt pos:start="89:5" pos:end="89:48"><expr pos:start="89:5" pos:end="89:47"><call pos:start="89:5" pos:end="89:47"><name pos:start="89:5" pos:end="89:27">bytestream2_init_writer</name><argument_list pos:start="89:28" pos:end="89:47">(<argument pos:start="89:29" pos:end="89:31"><expr pos:start="89:29" pos:end="89:31"><operator pos:start="89:29" pos:end="89:29">&amp;</operator><name pos:start="89:30" pos:end="89:31">pb</name></expr></argument>, <argument pos:start="89:34" pos:end="89:36"><expr pos:start="89:34" pos:end="89:36"><name pos:start="89:34" pos:end="89:36">out</name></expr></argument>, <argument pos:start="89:39" pos:end="89:46"><expr pos:start="89:39" pos:end="89:46"><name pos:start="89:39" pos:end="89:46">out_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="90:5" pos:end="90:57"><expr pos:start="90:5" pos:end="90:56"><call pos:start="90:5" pos:end="90:56"><name pos:start="90:5" pos:end="90:24">bytestream2_put_le32</name><argument_list pos:start="90:25" pos:end="90:56">(<argument pos:start="90:26" pos:end="90:28"><expr pos:start="90:26" pos:end="90:28"><operator pos:start="90:26" pos:end="90:26">&amp;</operator><name pos:start="90:27" pos:end="90:28">pb</name></expr></argument>, <argument pos:start="90:31" pos:end="90:55"><expr pos:start="90:31" pos:end="90:55"><call pos:start="90:31" pos:end="90:55"><name pos:start="90:31" pos:end="90:35">MKTAG</name><argument_list pos:start="90:36" pos:end="90:55">(<argument pos:start="90:37" pos:end="90:39"><expr pos:start="90:37" pos:end="90:39"><literal type="char" pos:start="90:37" pos:end="90:39">'w'</literal></expr></argument>, <argument pos:start="90:42" pos:end="90:44"><expr pos:start="90:42" pos:end="90:44"><literal type="char" pos:start="90:42" pos:end="90:44">'v'</literal></expr></argument>, <argument pos:start="90:47" pos:end="90:49"><expr pos:start="90:47" pos:end="90:49"><literal type="char" pos:start="90:47" pos:end="90:49">'p'</literal></expr></argument>, <argument pos:start="90:52" pos:end="90:54"><expr pos:start="90:52" pos:end="90:54"><literal type="char" pos:start="90:52" pos:end="90:54">'k'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="91:5" pos:end="91:33"><expr pos:start="91:5" pos:end="91:32"><call pos:start="91:5" pos:end="91:32"><name pos:start="91:5" pos:end="91:24">bytestream2_put_le32</name><argument_list pos:start="91:25" pos:end="91:32">(<argument pos:start="91:26" pos:end="91:28"><expr pos:start="91:26" pos:end="91:28"><operator pos:start="91:26" pos:end="91:26">&amp;</operator><name pos:start="91:27" pos:end="91:28">pb</name></expr></argument>, <argument pos:start="91:31" pos:end="91:31"><expr pos:start="91:31" pos:end="91:31"><literal type="number" pos:start="91:31" pos:end="91:31">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="92:5" pos:end="92:37"><expr pos:start="92:5" pos:end="92:36"><call pos:start="92:5" pos:end="92:36"><name pos:start="92:5" pos:end="92:24">bytestream2_put_le16</name><argument_list pos:start="92:25" pos:end="92:36">(<argument pos:start="92:26" pos:end="92:28"><expr pos:start="92:26" pos:end="92:28"><operator pos:start="92:26" pos:end="92:26">&amp;</operator><name pos:start="92:27" pos:end="92:28">pb</name></expr></argument>, <argument pos:start="92:31" pos:end="92:35"><expr pos:start="92:31" pos:end="92:35"><literal type="number" pos:start="92:31" pos:end="92:35">0x410</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="93:5" pos:end="93:33"><expr pos:start="93:5" pos:end="93:32"><call pos:start="93:5" pos:end="93:32"><name pos:start="93:5" pos:end="93:24">bytestream2_put_le16</name><argument_list pos:start="93:25" pos:end="93:32">(<argument pos:start="93:26" pos:end="93:28"><expr pos:start="93:26" pos:end="93:28"><operator pos:start="93:26" pos:end="93:26">&amp;</operator><name pos:start="93:27" pos:end="93:28">pb</name></expr></argument>, <argument pos:start="93:31" pos:end="93:31"><expr pos:start="93:31" pos:end="93:31"><literal type="number" pos:start="93:31" pos:end="93:31">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="94:5" pos:end="94:33"><expr pos:start="94:5" pos:end="94:32"><call pos:start="94:5" pos:end="94:32"><name pos:start="94:5" pos:end="94:24">bytestream2_put_le32</name><argument_list pos:start="94:25" pos:end="94:32">(<argument pos:start="94:26" pos:end="94:28"><expr pos:start="94:26" pos:end="94:28"><operator pos:start="94:26" pos:end="94:26">&amp;</operator><name pos:start="94:27" pos:end="94:28">pb</name></expr></argument>, <argument pos:start="94:31" pos:end="94:31"><expr pos:start="94:31" pos:end="94:31"><literal type="number" pos:start="94:31" pos:end="94:31">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="95:5" pos:end="95:47"><expr pos:start="95:5" pos:end="95:46"><call pos:start="95:5" pos:end="95:46"><name pos:start="95:5" pos:end="95:24">bytestream2_put_le32</name><argument_list pos:start="95:25" pos:end="95:46">(<argument pos:start="95:26" pos:end="95:28"><expr pos:start="95:26" pos:end="95:28"><operator pos:start="95:26" pos:end="95:26">&amp;</operator><name pos:start="95:27" pos:end="95:28">pb</name></expr></argument>, <argument pos:start="95:31" pos:end="95:45"><expr pos:start="95:31" pos:end="95:45"><name pos:start="95:31" pos:end="95:45"><name pos:start="95:31" pos:end="95:31">s</name><operator pos:start="95:32" pos:end="95:33">-&gt;</operator><name pos:start="95:34" pos:end="95:45">sample_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="96:5" pos:end="96:42"><expr pos:start="96:5" pos:end="96:41"><call pos:start="96:5" pos:end="96:41"><name pos:start="96:5" pos:end="96:24">bytestream2_put_le32</name><argument_list pos:start="96:25" pos:end="96:41">(<argument pos:start="96:26" pos:end="96:28"><expr pos:start="96:26" pos:end="96:28"><operator pos:start="96:26" pos:end="96:26">&amp;</operator><name pos:start="96:27" pos:end="96:28">pb</name></expr></argument>, <argument pos:start="96:31" pos:end="96:40"><expr pos:start="96:31" pos:end="96:40"><name pos:start="96:31" pos:end="96:40">nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="97:5" pos:end="97:40"><expr pos:start="97:5" pos:end="97:39"><call pos:start="97:5" pos:end="97:39"><name pos:start="97:5" pos:end="97:24">bytestream2_put_le32</name><argument_list pos:start="97:25" pos:end="97:39">(<argument pos:start="97:26" pos:end="97:28"><expr pos:start="97:26" pos:end="97:28"><operator pos:start="97:26" pos:end="97:26">&amp;</operator><name pos:start="97:27" pos:end="97:28">pb</name></expr></argument>, <argument pos:start="97:31" pos:end="97:38"><expr pos:start="97:31" pos:end="97:38"><name pos:start="97:31" pos:end="97:38"><name pos:start="97:31" pos:end="97:31">s</name><operator pos:start="97:32" pos:end="97:33">-&gt;</operator><name pos:start="97:34" pos:end="97:38">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="98:5" pos:end="98:35"><expr pos:start="98:5" pos:end="98:34"><call pos:start="98:5" pos:end="98:34"><name pos:start="98:5" pos:end="98:24">bytestream2_put_le32</name><argument_list pos:start="98:25" pos:end="98:34">(<argument pos:start="98:26" pos:end="98:28"><expr pos:start="98:26" pos:end="98:28"><operator pos:start="98:26" pos:end="98:26">&amp;</operator><name pos:start="98:27" pos:end="98:28">pb</name></expr></argument>, <argument pos:start="98:31" pos:end="98:33"><expr pos:start="98:31" pos:end="98:33"><name pos:start="98:31" pos:end="98:33">crc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="99:5" pos:end="106:5"><if pos:start="99:5" pos:end="106:5">if <condition pos:start="99:8" pos:end="101:56">(<expr pos:start="99:9" pos:end="101:55"><name pos:start="99:9" pos:end="99:16"><name pos:start="99:9" pos:end="99:9">s</name><operator pos:start="99:10" pos:end="99:11">-&gt;</operator><name pos:start="99:12" pos:end="99:16">flags</name></name> <operator pos:start="99:18" pos:end="99:18">&amp;</operator> <name pos:start="99:20" pos:end="99:35">WV_INITIAL_BLOCK</name> <operator pos:start="99:37" pos:end="99:38">&amp;&amp;</operator>
        <name pos:start="100:9" pos:end="100:32"><name pos:start="100:9" pos:end="100:9">s</name><operator pos:start="100:10" pos:end="100:11">-&gt;</operator><name pos:start="100:12" pos:end="100:16">avctx</name><operator pos:start="100:17" pos:end="100:18">-&gt;</operator><name pos:start="100:19" pos:end="100:32">channel_layout</name></name> <operator pos:start="100:34" pos:end="100:35">!=</operator> <name pos:start="100:37" pos:end="100:53">AV_CH_LAYOUT_MONO</name> <operator pos:start="100:55" pos:end="100:56">&amp;&amp;</operator>
        <name pos:start="101:9" pos:end="101:32"><name pos:start="101:9" pos:end="101:9">s</name><operator pos:start="101:10" pos:end="101:11">-&gt;</operator><name pos:start="101:12" pos:end="101:16">avctx</name><operator pos:start="101:17" pos:end="101:18">-&gt;</operator><name pos:start="101:19" pos:end="101:32">channel_layout</name></name> <operator pos:start="101:34" pos:end="101:35">!=</operator> <name pos:start="101:37" pos:end="101:55">AV_CH_LAYOUT_STEREO</name></expr>)</condition> <block pos:start="101:58" pos:end="106:5">{<block_content pos:start="102:9" pos:end="105:37">
        <expr_stmt pos:start="102:9" pos:end="102:51"><expr pos:start="102:9" pos:end="102:50"><call pos:start="102:9" pos:end="102:50"><name pos:start="102:9" pos:end="102:26">put_metadata_block</name><argument_list pos:start="102:27" pos:end="102:50">(<argument pos:start="102:28" pos:end="102:30"><expr pos:start="102:28" pos:end="102:30"><operator pos:start="102:28" pos:end="102:28">&amp;</operator><name pos:start="102:29" pos:end="102:30">pb</name></expr></argument>, <argument pos:start="102:33" pos:end="102:46"><expr pos:start="102:33" pos:end="102:46"><name pos:start="102:33" pos:end="102:46">WP_ID_CHANINFO</name></expr></argument>, <argument pos:start="102:49" pos:end="102:49"><expr pos:start="102:49" pos:end="102:49"><literal type="number" pos:start="102:49" pos:end="102:49">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="103:9" pos:end="103:54"><expr pos:start="103:9" pos:end="103:53"><call pos:start="103:9" pos:end="103:53"><name pos:start="103:9" pos:end="103:28">bytestream2_put_byte</name><argument_list pos:start="103:29" pos:end="103:53">(<argument pos:start="103:30" pos:end="103:32"><expr pos:start="103:30" pos:end="103:32"><operator pos:start="103:30" pos:end="103:30">&amp;</operator><name pos:start="103:31" pos:end="103:32">pb</name></expr></argument>, <argument pos:start="103:35" pos:end="103:52"><expr pos:start="103:35" pos:end="103:52"><name pos:start="103:35" pos:end="103:52"><name pos:start="103:35" pos:end="103:35">s</name><operator pos:start="103:36" pos:end="103:37">-&gt;</operator><name pos:start="103:38" pos:end="103:42">avctx</name><operator pos:start="103:43" pos:end="103:44">-&gt;</operator><name pos:start="103:45" pos:end="103:52">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="104:9" pos:end="104:60"><expr pos:start="104:9" pos:end="104:59"><call pos:start="104:9" pos:end="104:59"><name pos:start="104:9" pos:end="104:28">bytestream2_put_le32</name><argument_list pos:start="104:29" pos:end="104:59">(<argument pos:start="104:30" pos:end="104:32"><expr pos:start="104:30" pos:end="104:32"><operator pos:start="104:30" pos:end="104:30">&amp;</operator><name pos:start="104:31" pos:end="104:32">pb</name></expr></argument>, <argument pos:start="104:35" pos:end="104:58"><expr pos:start="104:35" pos:end="104:58"><name pos:start="104:35" pos:end="104:58"><name pos:start="104:35" pos:end="104:35">s</name><operator pos:start="104:36" pos:end="104:37">-&gt;</operator><name pos:start="104:38" pos:end="104:42">avctx</name><operator pos:start="104:43" pos:end="104:44">-&gt;</operator><name pos:start="104:45" pos:end="104:58">channel_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="105:9" pos:end="105:37"><expr pos:start="105:9" pos:end="105:36"><call pos:start="105:9" pos:end="105:36"><name pos:start="105:9" pos:end="105:28">bytestream2_put_byte</name><argument_list pos:start="105:29" pos:end="105:36">(<argument pos:start="105:30" pos:end="105:32"><expr pos:start="105:30" pos:end="105:32"><operator pos:start="105:30" pos:end="105:30">&amp;</operator><name pos:start="105:31" pos:end="105:32">pb</name></expr></argument>, <argument pos:start="105:35" pos:end="105:35"><expr pos:start="105:35" pos:end="105:35"><literal type="number" pos:start="105:35" pos:end="105:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="107:5" pos:end="111:5"><if pos:start="107:5" pos:end="111:5">if <condition pos:start="107:8" pos:end="107:46">(<expr pos:start="107:9" pos:end="107:45"><operator pos:start="107:9" pos:end="107:9">(</operator><name pos:start="107:10" pos:end="107:17"><name pos:start="107:10" pos:end="107:10">s</name><operator pos:start="107:11" pos:end="107:12">-&gt;</operator><name pos:start="107:13" pos:end="107:17">flags</name></name> <operator pos:start="107:19" pos:end="107:19">&amp;</operator> <name pos:start="107:21" pos:end="107:30">SRATE_MASK</name><operator pos:start="107:31" pos:end="107:31">)</operator> <operator pos:start="107:33" pos:end="107:34">==</operator> <name pos:start="107:36" pos:end="107:45">SRATE_MASK</name></expr>)</condition> <block pos:start="107:48" pos:end="111:5">{<block_content pos:start="108:9" pos:end="110:37">
        <expr_stmt pos:start="108:9" pos:end="108:54"><expr pos:start="108:9" pos:end="108:53"><call pos:start="108:9" pos:end="108:53"><name pos:start="108:9" pos:end="108:26">put_metadata_block</name><argument_list pos:start="108:27" pos:end="108:53">(<argument pos:start="108:28" pos:end="108:30"><expr pos:start="108:28" pos:end="108:30"><operator pos:start="108:28" pos:end="108:28">&amp;</operator><name pos:start="108:29" pos:end="108:30">pb</name></expr></argument>, <argument pos:start="108:33" pos:end="108:49"><expr pos:start="108:33" pos:end="108:49"><name pos:start="108:33" pos:end="108:49">WP_ID_SAMPLE_RATE</name></expr></argument>, <argument pos:start="108:52" pos:end="108:52"><expr pos:start="108:52" pos:end="108:52"><literal type="number" pos:start="108:52" pos:end="108:52">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="109:9" pos:end="109:57"><expr pos:start="109:9" pos:end="109:56"><call pos:start="109:9" pos:end="109:56"><name pos:start="109:9" pos:end="109:28">bytestream2_put_le24</name><argument_list pos:start="109:29" pos:end="109:56">(<argument pos:start="109:30" pos:end="109:32"><expr pos:start="109:30" pos:end="109:32"><operator pos:start="109:30" pos:end="109:30">&amp;</operator><name pos:start="109:31" pos:end="109:32">pb</name></expr></argument>, <argument pos:start="109:35" pos:end="109:55"><expr pos:start="109:35" pos:end="109:55"><name pos:start="109:35" pos:end="109:55"><name pos:start="109:35" pos:end="109:35">s</name><operator pos:start="109:36" pos:end="109:37">-&gt;</operator><name pos:start="109:38" pos:end="109:42">avctx</name><operator pos:start="109:43" pos:end="109:44">-&gt;</operator><name pos:start="109:45" pos:end="109:55">sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="110:9" pos:end="110:37"><expr pos:start="110:9" pos:end="110:36"><call pos:start="110:9" pos:end="110:36"><name pos:start="110:9" pos:end="110:28">bytestream2_put_byte</name><argument_list pos:start="110:29" pos:end="110:36">(<argument pos:start="110:30" pos:end="110:32"><expr pos:start="110:30" pos:end="110:32"><operator pos:start="110:30" pos:end="110:30">&amp;</operator><name pos:start="110:31" pos:end="110:32">pb</name></expr></argument>, <argument pos:start="110:35" pos:end="110:35"><expr pos:start="110:35" pos:end="110:35"><literal type="number" pos:start="110:35" pos:end="110:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="112:5" pos:end="112:58"><expr pos:start="112:5" pos:end="112:57"><call pos:start="112:5" pos:end="112:57"><name pos:start="112:5" pos:end="112:22">put_metadata_block</name><argument_list pos:start="112:23" pos:end="112:57">(<argument pos:start="112:24" pos:end="112:26"><expr pos:start="112:24" pos:end="112:26"><operator pos:start="112:24" pos:end="112:24">&amp;</operator><name pos:start="112:25" pos:end="112:26">pb</name></expr></argument>, <argument pos:start="112:29" pos:end="112:42"><expr pos:start="112:29" pos:end="112:42"><name pos:start="112:29" pos:end="112:42">WP_ID_DECTERMS</name></expr></argument>, <argument pos:start="112:45" pos:end="112:56"><expr pos:start="112:45" pos:end="112:56"><name pos:start="112:45" pos:end="112:56"><name pos:start="112:45" pos:end="112:45">s</name><operator pos:start="112:46" pos:end="112:47">-&gt;</operator><name pos:start="112:48" pos:end="112:56">num_terms</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for pos:start="113:5" pos:end="116:5">for <control pos:start="113:9" pos:end="113:38">(<init pos:start="113:10" pos:end="113:15"><expr pos:start="113:10" pos:end="113:14"><name pos:start="113:10" pos:end="113:10">i</name> <operator pos:start="113:12" pos:end="113:12">=</operator> <literal type="number" pos:start="113:14" pos:end="113:14">0</literal></expr>;</init> <condition pos:start="113:17" pos:end="113:33"><expr pos:start="113:17" pos:end="113:32"><name pos:start="113:17" pos:end="113:17">i</name> <operator pos:start="113:19" pos:end="113:19">&lt;</operator> <name pos:start="113:21" pos:end="113:32"><name pos:start="113:21" pos:end="113:21">s</name><operator pos:start="113:22" pos:end="113:23">-&gt;</operator><name pos:start="113:24" pos:end="113:32">num_terms</name></name></expr>;</condition> <incr pos:start="113:35" pos:end="113:37"><expr pos:start="113:35" pos:end="113:37"><name pos:start="113:35" pos:end="113:35">i</name><operator pos:start="113:36" pos:end="113:37">++</operator></expr></incr>)</control> <block pos:start="113:40" pos:end="116:5">{<block_content pos:start="114:9" pos:end="115:90">
        <decl_stmt pos:start="114:9" pos:end="114:50"><decl pos:start="114:9" pos:end="114:49"><type pos:start="114:9" pos:end="114:23"><name pos:start="114:9" pos:end="114:21"><name pos:start="114:9" pos:end="114:14">struct</name> <name pos:start="114:16" pos:end="114:21">Decorr</name></name> <modifier pos:start="114:23" pos:end="114:23">*</modifier></type><name pos:start="114:24" pos:end="114:26">dpp</name> <init pos:start="114:28" pos:end="114:49">= <expr pos:start="114:30" pos:end="114:49"><operator pos:start="114:30" pos:end="114:30">&amp;</operator><name pos:start="114:31" pos:end="114:49"><name pos:start="114:31" pos:end="114:31">s</name><operator pos:start="114:32" pos:end="114:33">-&gt;</operator><name pos:start="114:34" pos:end="114:46">decorr_passes</name><index pos:start="114:47" pos:end="114:49">[<expr pos:start="114:48" pos:end="114:48"><name pos:start="114:48" pos:end="114:48">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="115:9" pos:end="115:90"><expr pos:start="115:9" pos:end="115:89"><call pos:start="115:9" pos:end="115:89"><name pos:start="115:9" pos:end="115:28">bytestream2_put_byte</name><argument_list pos:start="115:29" pos:end="115:89">(<argument pos:start="115:30" pos:end="115:32"><expr pos:start="115:30" pos:end="115:32"><operator pos:start="115:30" pos:end="115:30">&amp;</operator><name pos:start="115:31" pos:end="115:32">pb</name></expr></argument>, <argument pos:start="115:35" pos:end="115:88"><expr pos:start="115:35" pos:end="115:88"><operator pos:start="115:35" pos:end="115:35">(</operator><operator pos:start="115:36" pos:end="115:36">(</operator><name pos:start="115:37" pos:end="115:46"><name pos:start="115:37" pos:end="115:39">dpp</name><operator pos:start="115:40" pos:end="115:41">-&gt;</operator><name pos:start="115:42" pos:end="115:46">value</name></name> <operator pos:start="115:48" pos:end="115:48">+</operator> <literal type="number" pos:start="115:50" pos:end="115:50">5</literal><operator pos:start="115:51" pos:end="115:51">)</operator> <operator pos:start="115:53" pos:end="115:53">&amp;</operator> <literal type="number" pos:start="115:55" pos:end="115:58">0x1f</literal><operator pos:start="115:59" pos:end="115:59">)</operator> <operator pos:start="115:61" pos:end="115:61">|</operator> <operator pos:start="115:63" pos:end="115:63">(</operator><operator pos:start="115:64" pos:end="115:64">(</operator><name pos:start="115:65" pos:end="115:74"><name pos:start="115:65" pos:end="115:67">dpp</name><operator pos:start="115:68" pos:end="115:69">-&gt;</operator><name pos:start="115:70" pos:end="115:74">delta</name></name> <operator pos:start="115:76" pos:end="115:77">&lt;&lt;</operator> <literal type="number" pos:start="115:79" pos:end="115:79">5</literal><operator pos:start="115:80" pos:end="115:80">)</operator> <operator pos:start="115:82" pos:end="115:82">&amp;</operator> <literal type="number" pos:start="115:84" pos:end="115:87">0xe0</literal><operator pos:start="115:88" pos:end="115:88">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <if_stmt pos:start="117:5" pos:end="124:0"><if pos:start="117:5" pos:end="124:0">if <condition pos:start="117:8" pos:end="117:25">(<expr pos:start="117:9" pos:end="117:24"><name pos:start="117:9" pos:end="117:20"><name pos:start="117:9" pos:end="117:9">s</name><operator pos:start="117:10" pos:end="117:11">-&gt;</operator><name pos:start="117:12" pos:end="117:20">num_terms</name></name> <operator pos:start="117:22" pos:end="117:22">&amp;</operator> <literal type="number" pos:start="117:24" pos:end="117:24">1</literal></expr>)</condition><block type="pseudo" pos:start="118:9" pos:end="124:0"><block_content pos:start="118:9" pos:end="124:0">
        <expr_stmt pos:start="118:9" pos:end="124:0"><expr pos:start="118:9" pos:end="118:36"><call pos:start="118:9" pos:end="118:36"><name pos:start="118:9" pos:end="118:28">bytestream2_put_byte</name><argument_list pos:start="118:29" pos:end="118:36">(<argument pos:start="118:30" pos:end="118:32"><expr pos:start="118:30" pos:end="118:32"><operator pos:start="118:30" pos:end="118:30">&amp;</operator><name pos:start="118:31" pos:end="118:32">pb</name></expr></argument>, <argument pos:start="118:35" pos:end="118:35"><expr pos:start="118:35" pos:end="118:35"><literal type="number" pos:start="118:35" pos:end="118:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:define pos:start="119:1" pos:end="123:15">#<cpp:directive pos:start="119:2" pos:end="119:7">define</cpp:directive> <cpp:macro pos:start="119:9" pos:end="119:29"><name pos:start="119:9" pos:end="119:23">WRITE_DECWEIGHT</name><parameter_list pos:start="119:24" pos:end="119:29">(<parameter pos:start="119:25" pos:end="119:28"><type pos:start="119:25" pos:end="119:28"><name pos:start="119:25" pos:end="119:28">type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="119:31" pos:end="123:15">do {            \
        temp = store_weight(type);    \
        bytestream2_put_byte(&amp;pb, temp);      \
        type = restore_weight(temp);  \
    } while (0)</cpp:value></cpp:define>
    <expr_stmt pos:start="124:5" pos:end="124:48"><expr pos:start="124:5" pos:end="124:47"><call pos:start="124:5" pos:end="124:47"><name pos:start="124:5" pos:end="124:24">bytestream2_put_byte</name><argument_list pos:start="124:25" pos:end="124:47">(<argument pos:start="124:26" pos:end="124:28"><expr pos:start="124:26" pos:end="124:28"><operator pos:start="124:26" pos:end="124:26">&amp;</operator><name pos:start="124:27" pos:end="124:28">pb</name></expr></argument>, <argument pos:start="124:31" pos:end="124:46"><expr pos:start="124:31" pos:end="124:46"><name pos:start="124:31" pos:end="124:46">WP_ID_DECWEIGHTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="125:5" pos:end="125:33"><expr pos:start="125:5" pos:end="125:32"><call pos:start="125:5" pos:end="125:32"><name pos:start="125:5" pos:end="125:24">bytestream2_put_byte</name><argument_list pos:start="125:25" pos:end="125:32">(<argument pos:start="125:26" pos:end="125:28"><expr pos:start="125:26" pos:end="125:28"><operator pos:start="125:26" pos:end="125:26">&amp;</operator><name pos:start="125:27" pos:end="125:28">pb</name></expr></argument>, <argument pos:start="125:31" pos:end="125:31"><expr pos:start="125:31" pos:end="125:31"><literal type="number" pos:start="125:31" pos:end="125:31">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="126:5" pos:end="126:36"><expr pos:start="126:5" pos:end="126:35"><name pos:start="126:5" pos:end="126:9">start</name> <operator pos:start="126:11" pos:end="126:11">=</operator> <call pos:start="126:13" pos:end="126:35"><name pos:start="126:13" pos:end="126:30">bytestream2_tell_p</name><argument_list pos:start="126:31" pos:end="126:35">(<argument pos:start="126:32" pos:end="126:34"><expr pos:start="126:32" pos:end="126:34"><operator pos:start="126:32" pos:end="126:32">&amp;</operator><name pos:start="126:33" pos:end="126:34">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for pos:start="127:5" pos:end="132:5">for <control pos:start="127:9" pos:end="127:43">(<init pos:start="127:10" pos:end="127:30"><expr pos:start="127:10" pos:end="127:29"><name pos:start="127:10" pos:end="127:10">i</name> <operator pos:start="127:12" pos:end="127:12">=</operator> <name pos:start="127:14" pos:end="127:25"><name pos:start="127:14" pos:end="127:14">s</name><operator pos:start="127:15" pos:end="127:16">-&gt;</operator><name pos:start="127:17" pos:end="127:25">num_terms</name></name> <operator pos:start="127:27" pos:end="127:27">-</operator> <literal type="number" pos:start="127:29" pos:end="127:29">1</literal></expr>;</init> <condition pos:start="127:32" pos:end="127:38"><expr pos:start="127:32" pos:end="127:37"><name pos:start="127:32" pos:end="127:32">i</name> <operator pos:start="127:34" pos:end="127:35">&gt;=</operator> <literal type="number" pos:start="127:37" pos:end="127:37">0</literal></expr>;</condition> <incr pos:start="127:40" pos:end="127:42"><expr pos:start="127:40" pos:end="127:42"><operator pos:start="127:40" pos:end="127:41">--</operator><name pos:start="127:42" pos:end="127:42">i</name></expr></incr>)</control> <block pos:start="127:45" pos:end="132:5">{<block_content pos:start="128:9" pos:end="131:22">
        <decl_stmt pos:start="128:9" pos:end="128:50"><decl pos:start="128:9" pos:end="128:49"><type pos:start="128:9" pos:end="128:23"><name pos:start="128:9" pos:end="128:21"><name pos:start="128:9" pos:end="128:14">struct</name> <name pos:start="128:16" pos:end="128:21">Decorr</name></name> <modifier pos:start="128:23" pos:end="128:23">*</modifier></type><name pos:start="128:24" pos:end="128:26">dpp</name> <init pos:start="128:28" pos:end="128:49">= <expr pos:start="128:30" pos:end="128:49"><operator pos:start="128:30" pos:end="128:30">&amp;</operator><name pos:start="128:31" pos:end="128:49"><name pos:start="128:31" pos:end="128:31">s</name><operator pos:start="128:32" pos:end="128:33">-&gt;</operator><name pos:start="128:34" pos:end="128:46">decorr_passes</name><index pos:start="128:47" pos:end="128:49">[<expr pos:start="128:48" pos:end="128:48"><name pos:start="128:48" pos:end="128:48">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="129:9" pos:end="131:22"><if pos:start="129:9" pos:end="131:22">if <condition pos:start="129:12" pos:end="130:71">(<expr pos:start="129:13" pos:end="130:70"><call pos:start="129:13" pos:end="129:38"><name pos:start="129:13" pos:end="129:24">store_weight</name><argument_list pos:start="129:25" pos:end="129:38">(<argument pos:start="129:26" pos:end="129:37"><expr pos:start="129:26" pos:end="129:37"><name pos:start="129:26" pos:end="129:37"><name pos:start="129:26" pos:end="129:28">dpp</name><operator pos:start="129:29" pos:end="129:30">-&gt;</operator><name pos:start="129:31" pos:end="129:37">weightA</name></name></expr></argument>)</argument_list></call> <operator pos:start="129:40" pos:end="129:41">||</operator>
            <operator pos:start="130:13" pos:end="130:13">(</operator><operator pos:start="130:14" pos:end="130:14">!</operator><operator pos:start="130:15" pos:end="130:15">(</operator><name pos:start="130:16" pos:end="130:23"><name pos:start="130:16" pos:end="130:16">s</name><operator pos:start="130:17" pos:end="130:18">-&gt;</operator><name pos:start="130:19" pos:end="130:23">flags</name></name> <operator pos:start="130:25" pos:end="130:25">&amp;</operator> <name pos:start="130:27" pos:end="130:38">WV_MONO_DATA</name><operator pos:start="130:39" pos:end="130:39">)</operator> <operator pos:start="130:41" pos:end="130:42">&amp;&amp;</operator> <call pos:start="130:44" pos:end="130:69"><name pos:start="130:44" pos:end="130:55">store_weight</name><argument_list pos:start="130:56" pos:end="130:69">(<argument pos:start="130:57" pos:end="130:68"><expr pos:start="130:57" pos:end="130:68"><name pos:start="130:57" pos:end="130:68"><name pos:start="130:57" pos:end="130:59">dpp</name><operator pos:start="130:60" pos:end="130:61">-&gt;</operator><name pos:start="130:62" pos:end="130:68">weightB</name></name></expr></argument>)</argument_list></call><operator pos:start="130:70" pos:end="130:70">)</operator></expr>)</condition><block type="pseudo" pos:start="131:17" pos:end="131:22"><block_content pos:start="131:17" pos:end="131:22">
                <break pos:start="131:17" pos:end="131:22">break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt pos:start="133:5" pos:end="133:19"><expr pos:start="133:5" pos:end="133:18"><name pos:start="133:5" pos:end="133:10">tcount</name> <operator pos:start="133:12" pos:end="133:12">=</operator> <name pos:start="133:14" pos:end="133:14">i</name> <operator pos:start="133:16" pos:end="133:16">+</operator> <literal type="number" pos:start="133:18" pos:end="133:18">1</literal></expr>;</expr_stmt>
    <for pos:start="134:5" pos:end="143:5">for <control pos:start="134:9" pos:end="134:38">(<init pos:start="134:10" pos:end="134:15"><expr pos:start="134:10" pos:end="134:14"><name pos:start="134:10" pos:end="134:10">i</name> <operator pos:start="134:12" pos:end="134:12">=</operator> <literal type="number" pos:start="134:14" pos:end="134:14">0</literal></expr>;</init> <condition pos:start="134:17" pos:end="134:33"><expr pos:start="134:17" pos:end="134:32"><name pos:start="134:17" pos:end="134:17">i</name> <operator pos:start="134:19" pos:end="134:19">&lt;</operator> <name pos:start="134:21" pos:end="134:32"><name pos:start="134:21" pos:end="134:21">s</name><operator pos:start="134:22" pos:end="134:23">-&gt;</operator><name pos:start="134:24" pos:end="134:32">num_terms</name></name></expr>;</condition> <incr pos:start="134:35" pos:end="134:37"><expr pos:start="134:35" pos:end="134:37"><name pos:start="134:35" pos:end="134:35">i</name><operator pos:start="134:36" pos:end="134:37">++</operator></expr></incr>)</control> <block pos:start="134:40" pos:end="143:5">{<block_content pos:start="135:9" pos:end="142:9">
        <decl_stmt pos:start="135:9" pos:end="135:50"><decl pos:start="135:9" pos:end="135:49"><type pos:start="135:9" pos:end="135:23"><name pos:start="135:9" pos:end="135:21"><name pos:start="135:9" pos:end="135:14">struct</name> <name pos:start="135:16" pos:end="135:21">Decorr</name></name> <modifier pos:start="135:23" pos:end="135:23">*</modifier></type><name pos:start="135:24" pos:end="135:26">dpp</name> <init pos:start="135:28" pos:end="135:49">= <expr pos:start="135:30" pos:end="135:49"><operator pos:start="135:30" pos:end="135:30">&amp;</operator><name pos:start="135:31" pos:end="135:49"><name pos:start="135:31" pos:end="135:31">s</name><operator pos:start="135:32" pos:end="135:33">-&gt;</operator><name pos:start="135:34" pos:end="135:46">decorr_passes</name><index pos:start="135:47" pos:end="135:49">[<expr pos:start="135:48" pos:end="135:48"><name pos:start="135:48" pos:end="135:48">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="136:9" pos:end="142:9"><if pos:start="136:9" pos:end="140:9">if <condition pos:start="136:12" pos:end="136:23">(<expr pos:start="136:13" pos:end="136:22"><name pos:start="136:13" pos:end="136:13">i</name> <operator pos:start="136:15" pos:end="136:15">&lt;</operator> <name pos:start="136:17" pos:end="136:22">tcount</name></expr>)</condition> <block pos:start="136:25" pos:end="140:9">{<block_content pos:start="137:13" pos:end="139:46">
            <expr_stmt pos:start="137:13" pos:end="137:42"><expr pos:start="137:13" pos:end="137:41"><call pos:start="137:13" pos:end="137:41"><name pos:start="137:13" pos:end="137:27">WRITE_DECWEIGHT</name><argument_list pos:start="137:28" pos:end="137:41">(<argument pos:start="137:29" pos:end="137:40"><expr pos:start="137:29" pos:end="137:40"><name pos:start="137:29" pos:end="137:40"><name pos:start="137:29" pos:end="137:31">dpp</name><operator pos:start="137:32" pos:end="137:33">-&gt;</operator><name pos:start="137:34" pos:end="137:40">weightA</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="138:13" pos:end="139:46"><if pos:start="138:13" pos:end="139:46">if <condition pos:start="138:16" pos:end="138:43">(<expr pos:start="138:17" pos:end="138:42"><operator pos:start="138:17" pos:end="138:17">!</operator><operator pos:start="138:18" pos:end="138:18">(</operator><name pos:start="138:19" pos:end="138:26"><name pos:start="138:19" pos:end="138:19">s</name><operator pos:start="138:20" pos:end="138:21">-&gt;</operator><name pos:start="138:22" pos:end="138:26">flags</name></name> <operator pos:start="138:28" pos:end="138:28">&amp;</operator> <name pos:start="138:30" pos:end="138:41">WV_MONO_DATA</name><operator pos:start="138:42" pos:end="138:42">)</operator></expr>)</condition><block type="pseudo" pos:start="139:17" pos:end="139:46"><block_content pos:start="139:17" pos:end="139:46">
                <expr_stmt pos:start="139:17" pos:end="139:46"><expr pos:start="139:17" pos:end="139:45"><call pos:start="139:17" pos:end="139:45"><name pos:start="139:17" pos:end="139:31">WRITE_DECWEIGHT</name><argument_list pos:start="139:32" pos:end="139:45">(<argument pos:start="139:33" pos:end="139:44"><expr pos:start="139:33" pos:end="139:44"><name pos:start="139:33" pos:end="139:44"><name pos:start="139:33" pos:end="139:35">dpp</name><operator pos:start="139:36" pos:end="139:37">-&gt;</operator><name pos:start="139:38" pos:end="139:44">weightB</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if> <else pos:start="140:11" pos:end="142:9">else <block pos:start="140:16" pos:end="142:9">{<block_content pos:start="141:13" pos:end="141:44">
            <expr_stmt pos:start="141:13" pos:end="141:44"><expr pos:start="141:13" pos:end="141:43"><name pos:start="141:13" pos:end="141:24"><name pos:start="141:13" pos:end="141:15">dpp</name><operator pos:start="141:16" pos:end="141:17">-&gt;</operator><name pos:start="141:18" pos:end="141:24">weightA</name></name> <operator pos:start="141:26" pos:end="141:26">=</operator> <name pos:start="141:28" pos:end="141:39"><name pos:start="141:28" pos:end="141:30">dpp</name><operator pos:start="141:31" pos:end="141:32">-&gt;</operator><name pos:start="141:33" pos:end="141:39">weightB</name></name> <operator pos:start="141:41" pos:end="141:41">=</operator> <literal type="number" pos:start="141:43" pos:end="141:43">0</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <expr_stmt pos:start="144:5" pos:end="144:34"><expr pos:start="144:5" pos:end="144:33"><name pos:start="144:5" pos:end="144:7">end</name> <operator pos:start="144:9" pos:end="144:9">=</operator> <call pos:start="144:11" pos:end="144:33"><name pos:start="144:11" pos:end="144:28">bytestream2_tell_p</name><argument_list pos:start="144:29" pos:end="144:33">(<argument pos:start="144:30" pos:end="144:32"><expr pos:start="144:30" pos:end="144:32"><operator pos:start="144:30" pos:end="144:30">&amp;</operator><name pos:start="144:31" pos:end="144:32">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="145:5" pos:end="145:78"><expr pos:start="145:5" pos:end="145:77"><name pos:start="145:5" pos:end="145:18"><name pos:start="145:5" pos:end="145:7">out</name><index pos:start="145:8" pos:end="145:18">[<expr pos:start="145:9" pos:end="145:17"><name pos:start="145:9" pos:end="145:13">start</name> <operator pos:start="145:15" pos:end="145:15">-</operator> <literal type="number" pos:start="145:17" pos:end="145:17">2</literal></expr>]</index></name> <operator pos:start="145:20" pos:end="145:20">=</operator> <name pos:start="145:22" pos:end="145:37">WP_ID_DECWEIGHTS</name> <operator pos:start="145:39" pos:end="145:39">|</operator> <operator pos:start="145:41" pos:end="145:41">(</operator><ternary pos:start="145:42" pos:end="145:76"><condition pos:start="145:42" pos:end="145:62"><expr pos:start="145:42" pos:end="145:60"><operator pos:start="145:42" pos:end="145:42">(</operator><operator pos:start="145:43" pos:end="145:43">(</operator><name pos:start="145:44" pos:end="145:46">end</name> <operator pos:start="145:48" pos:end="145:48">-</operator> <name pos:start="145:50" pos:end="145:54">start</name><operator pos:start="145:55" pos:end="145:55">)</operator> <operator pos:start="145:57" pos:end="145:57">&amp;</operator> <literal type="number" pos:start="145:59" pos:end="145:59">1</literal><operator pos:start="145:60" pos:end="145:60">)</operator></expr> ?</condition><then pos:start="145:64" pos:end="145:73"> <expr pos:start="145:64" pos:end="145:73"><name pos:start="145:64" pos:end="145:73">WP_IDF_ODD</name></expr></then><else pos:start="145:74" pos:end="145:76">: <expr pos:start="145:76" pos:end="145:76"><literal type="number" pos:start="145:76" pos:end="145:76">0</literal></expr></else></ternary><operator pos:start="145:77" pos:end="145:77">)</operator></expr>;</expr_stmt>
    <expr_stmt pos:start="146:5" pos:end="146:44"><expr pos:start="146:5" pos:end="146:43"><name pos:start="146:5" pos:end="146:18"><name pos:start="146:5" pos:end="146:7">out</name><index pos:start="146:8" pos:end="146:18">[<expr pos:start="146:9" pos:end="146:17"><name pos:start="146:9" pos:end="146:13">start</name> <operator pos:start="146:15" pos:end="146:15">-</operator> <literal type="number" pos:start="146:17" pos:end="146:17">1</literal></expr>]</index></name> <operator pos:start="146:20" pos:end="146:20">=</operator> <operator pos:start="146:22" pos:end="146:22">(</operator><name pos:start="146:23" pos:end="146:25">end</name> <operator pos:start="146:27" pos:end="146:27">-</operator> <name pos:start="146:29" pos:end="146:33">start</name> <operator pos:start="146:35" pos:end="146:35">+</operator> <literal type="number" pos:start="146:37" pos:end="146:37">1</literal><operator pos:start="146:38" pos:end="146:38">)</operator> <operator pos:start="146:40" pos:end="146:41">&gt;&gt;</operator> <literal type="number" pos:start="146:43" pos:end="146:43">1</literal></expr>;</expr_stmt>
    <if_stmt pos:start="147:5" pos:end="154:0"><if pos:start="147:5" pos:end="154:0">if <condition pos:start="147:8" pos:end="147:26">(<expr pos:start="147:9" pos:end="147:25"><operator pos:start="147:9" pos:end="147:9">(</operator><name pos:start="147:10" pos:end="147:12">end</name> <operator pos:start="147:14" pos:end="147:14">-</operator> <name pos:start="147:16" pos:end="147:20">start</name><operator pos:start="147:21" pos:end="147:21">)</operator> <operator pos:start="147:23" pos:end="147:23">&amp;</operator> <literal type="number" pos:start="147:25" pos:end="147:25">1</literal></expr>)</condition><block type="pseudo" pos:start="148:9" pos:end="154:0"><block_content pos:start="148:9" pos:end="154:0">
        <expr_stmt pos:start="148:9" pos:end="154:0"><expr pos:start="148:9" pos:end="148:36"><call pos:start="148:9" pos:end="148:36"><name pos:start="148:9" pos:end="148:28">bytestream2_put_byte</name><argument_list pos:start="148:29" pos:end="148:36">(<argument pos:start="148:30" pos:end="148:32"><expr pos:start="148:30" pos:end="148:32"><operator pos:start="148:30" pos:end="148:30">&amp;</operator><name pos:start="148:31" pos:end="148:32">pb</name></expr></argument>, <argument pos:start="148:35" pos:end="148:35"><expr pos:start="148:35" pos:end="148:35"><literal type="number" pos:start="148:35" pos:end="148:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:define pos:start="149:1" pos:end="153:15">#<cpp:directive pos:start="149:2" pos:end="149:7">define</cpp:directive> <cpp:macro pos:start="149:9" pos:end="149:29"><name pos:start="149:9" pos:end="149:23">WRITE_DECSAMPLE</name><parameter_list pos:start="149:24" pos:end="149:29">(<parameter pos:start="149:25" pos:end="149:28"><type pos:start="149:25" pos:end="149:28"><name pos:start="149:25" pos:end="149:28">type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="149:31" pos:end="153:15">do {        \
        temp = log2s(type);               \
        type = wp_exp2(temp);             \
        bytestream2_put_le16(&amp;pb, temp);  \
    } while (0)</cpp:value></cpp:define>
    <expr_stmt pos:start="154:5" pos:end="154:48"><expr pos:start="154:5" pos:end="154:47"><call pos:start="154:5" pos:end="154:47"><name pos:start="154:5" pos:end="154:24">bytestream2_put_byte</name><argument_list pos:start="154:25" pos:end="154:47">(<argument pos:start="154:26" pos:end="154:28"><expr pos:start="154:26" pos:end="154:28"><operator pos:start="154:26" pos:end="154:26">&amp;</operator><name pos:start="154:27" pos:end="154:28">pb</name></expr></argument>, <argument pos:start="154:31" pos:end="154:46"><expr pos:start="154:31" pos:end="154:46"><name pos:start="154:31" pos:end="154:46">WP_ID_DECSAMPLES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="155:5" pos:end="155:33"><expr pos:start="155:5" pos:end="155:32"><call pos:start="155:5" pos:end="155:32"><name pos:start="155:5" pos:end="155:24">bytestream2_put_byte</name><argument_list pos:start="155:25" pos:end="155:32">(<argument pos:start="155:26" pos:end="155:28"><expr pos:start="155:26" pos:end="155:28"><operator pos:start="155:26" pos:end="155:26">&amp;</operator><name pos:start="155:27" pos:end="155:28">pb</name></expr></argument>, <argument pos:start="155:31" pos:end="155:31"><expr pos:start="155:31" pos:end="155:31"><literal type="number" pos:start="155:31" pos:end="155:31">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="156:5" pos:end="156:36"><expr pos:start="156:5" pos:end="156:35"><name pos:start="156:5" pos:end="156:9">start</name> <operator pos:start="156:11" pos:end="156:11">=</operator> <call pos:start="156:13" pos:end="156:35"><name pos:start="156:13" pos:end="156:30">bytestream2_tell_p</name><argument_list pos:start="156:31" pos:end="156:35">(<argument pos:start="156:32" pos:end="156:34"><expr pos:start="156:32" pos:end="156:34"><operator pos:start="156:32" pos:end="156:32">&amp;</operator><name pos:start="156:33" pos:end="156:34">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for pos:start="157:5" pos:end="181:5">for <control pos:start="157:9" pos:end="157:38">(<init pos:start="157:10" pos:end="157:15"><expr pos:start="157:10" pos:end="157:14"><name pos:start="157:10" pos:end="157:10">i</name> <operator pos:start="157:12" pos:end="157:12">=</operator> <literal type="number" pos:start="157:14" pos:end="157:14">0</literal></expr>;</init> <condition pos:start="157:17" pos:end="157:33"><expr pos:start="157:17" pos:end="157:32"><name pos:start="157:17" pos:end="157:17">i</name> <operator pos:start="157:19" pos:end="157:19">&lt;</operator> <name pos:start="157:21" pos:end="157:32"><name pos:start="157:21" pos:end="157:21">s</name><operator pos:start="157:22" pos:end="157:23">-&gt;</operator><name pos:start="157:24" pos:end="157:32">num_terms</name></name></expr>;</condition> <incr pos:start="157:35" pos:end="157:37"><expr pos:start="157:35" pos:end="157:37"><name pos:start="157:35" pos:end="157:35">i</name><operator pos:start="157:36" pos:end="157:37">++</operator></expr></incr>)</control> <block pos:start="157:40" pos:end="181:5">{<block_content pos:start="158:9" pos:end="180:9">
        <decl_stmt pos:start="158:9" pos:end="158:50"><decl pos:start="158:9" pos:end="158:49"><type pos:start="158:9" pos:end="158:23"><name pos:start="158:9" pos:end="158:21"><name pos:start="158:9" pos:end="158:14">struct</name> <name pos:start="158:16" pos:end="158:21">Decorr</name></name> <modifier pos:start="158:23" pos:end="158:23">*</modifier></type><name pos:start="158:24" pos:end="158:26">dpp</name> <init pos:start="158:28" pos:end="158:49">= <expr pos:start="158:30" pos:end="158:49"><operator pos:start="158:30" pos:end="158:30">&amp;</operator><name pos:start="158:31" pos:end="158:49"><name pos:start="158:31" pos:end="158:31">s</name><operator pos:start="158:32" pos:end="158:33">-&gt;</operator><name pos:start="158:34" pos:end="158:46">decorr_passes</name><index pos:start="158:47" pos:end="158:49">[<expr pos:start="158:48" pos:end="158:48"><name pos:start="158:48" pos:end="158:48">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="159:9" pos:end="180:9"><if pos:start="159:9" pos:end="177:9">if <condition pos:start="159:12" pos:end="159:19">(<expr pos:start="159:13" pos:end="159:18"><name pos:start="159:13" pos:end="159:13">i</name> <operator pos:start="159:15" pos:end="159:16">==</operator> <literal type="number" pos:start="159:18" pos:end="159:18">0</literal></expr>)</condition> <block pos:start="159:21" pos:end="177:9">{<block_content pos:start="160:13" pos:end="176:13">
            <if_stmt pos:start="160:13" pos:end="176:13"><if pos:start="160:13" pos:end="167:13">if <condition pos:start="160:16" pos:end="160:38">(<expr pos:start="160:17" pos:end="160:37"><name pos:start="160:17" pos:end="160:26"><name pos:start="160:17" pos:end="160:19">dpp</name><operator pos:start="160:20" pos:end="160:21">-&gt;</operator><name pos:start="160:22" pos:end="160:26">value</name></name> <operator pos:start="160:28" pos:end="160:28">&gt;</operator> <name pos:start="160:30" pos:end="160:37">MAX_TERM</name></expr>)</condition> <block pos:start="160:40" pos:end="167:13">{<block_content pos:start="161:17" pos:end="166:17">
                <expr_stmt pos:start="161:17" pos:end="161:50"><expr pos:start="161:17" pos:end="161:49"><call pos:start="161:17" pos:end="161:49"><name pos:start="161:17" pos:end="161:31">WRITE_DECSAMPLE</name><argument_list pos:start="161:32" pos:end="161:49">(<argument pos:start="161:33" pos:end="161:48"><expr pos:start="161:33" pos:end="161:48"><name pos:start="161:33" pos:end="161:48"><name pos:start="161:33" pos:end="161:35">dpp</name><operator pos:start="161:36" pos:end="161:37">-&gt;</operator><name pos:start="161:38" pos:end="161:45">samplesA</name><index pos:start="161:46" pos:end="161:48">[<expr pos:start="161:47" pos:end="161:47"><literal type="number" pos:start="161:47" pos:end="161:47">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="162:17" pos:end="162:50"><expr pos:start="162:17" pos:end="162:49"><call pos:start="162:17" pos:end="162:49"><name pos:start="162:17" pos:end="162:31">WRITE_DECSAMPLE</name><argument_list pos:start="162:32" pos:end="162:49">(<argument pos:start="162:33" pos:end="162:48"><expr pos:start="162:33" pos:end="162:48"><name pos:start="162:33" pos:end="162:48"><name pos:start="162:33" pos:end="162:35">dpp</name><operator pos:start="162:36" pos:end="162:37">-&gt;</operator><name pos:start="162:38" pos:end="162:45">samplesA</name><index pos:start="162:46" pos:end="162:48">[<expr pos:start="162:47" pos:end="162:47"><literal type="number" pos:start="162:47" pos:end="162:47">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="163:17" pos:end="166:17"><if pos:start="163:17" pos:end="166:17">if <condition pos:start="163:20" pos:end="163:47">(<expr pos:start="163:21" pos:end="163:46"><operator pos:start="163:21" pos:end="163:21">!</operator><operator pos:start="163:22" pos:end="163:22">(</operator><name pos:start="163:23" pos:end="163:30"><name pos:start="163:23" pos:end="163:23">s</name><operator pos:start="163:24" pos:end="163:25">-&gt;</operator><name pos:start="163:26" pos:end="163:30">flags</name></name> <operator pos:start="163:32" pos:end="163:32">&amp;</operator> <name pos:start="163:34" pos:end="163:45">WV_MONO_DATA</name><operator pos:start="163:46" pos:end="163:46">)</operator></expr>)</condition> <block pos:start="163:49" pos:end="166:17">{<block_content pos:start="164:21" pos:end="165:54">
                    <expr_stmt pos:start="164:21" pos:end="164:54"><expr pos:start="164:21" pos:end="164:53"><call pos:start="164:21" pos:end="164:53"><name pos:start="164:21" pos:end="164:35">WRITE_DECSAMPLE</name><argument_list pos:start="164:36" pos:end="164:53">(<argument pos:start="164:37" pos:end="164:52"><expr pos:start="164:37" pos:end="164:52"><name pos:start="164:37" pos:end="164:52"><name pos:start="164:37" pos:end="164:39">dpp</name><operator pos:start="164:40" pos:end="164:41">-&gt;</operator><name pos:start="164:42" pos:end="164:49">samplesB</name><index pos:start="164:50" pos:end="164:52">[<expr pos:start="164:51" pos:end="164:51"><literal type="number" pos:start="164:51" pos:end="164:51">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="165:21" pos:end="165:54"><expr pos:start="165:21" pos:end="165:53"><call pos:start="165:21" pos:end="165:53"><name pos:start="165:21" pos:end="165:35">WRITE_DECSAMPLE</name><argument_list pos:start="165:36" pos:end="165:53">(<argument pos:start="165:37" pos:end="165:52"><expr pos:start="165:37" pos:end="165:52"><name pos:start="165:37" pos:end="165:52"><name pos:start="165:37" pos:end="165:39">dpp</name><operator pos:start="165:40" pos:end="165:41">-&gt;</operator><name pos:start="165:42" pos:end="165:49">samplesB</name><index pos:start="165:50" pos:end="165:52">[<expr pos:start="165:51" pos:end="165:51"><literal type="number" pos:start="165:51" pos:end="165:51">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <if type="elseif" pos:start="167:15" pos:end="170:13">else if <condition pos:start="167:23" pos:end="167:38">(<expr pos:start="167:24" pos:end="167:37"><name pos:start="167:24" pos:end="167:33"><name pos:start="167:24" pos:end="167:26">dpp</name><operator pos:start="167:27" pos:end="167:28">-&gt;</operator><name pos:start="167:29" pos:end="167:33">value</name></name> <operator pos:start="167:35" pos:end="167:35">&lt;</operator> <literal type="number" pos:start="167:37" pos:end="167:37">0</literal></expr>)</condition> <block pos:start="167:40" pos:end="170:13">{<block_content pos:start="168:17" pos:end="169:50">
                <expr_stmt pos:start="168:17" pos:end="168:50"><expr pos:start="168:17" pos:end="168:49"><call pos:start="168:17" pos:end="168:49"><name pos:start="168:17" pos:end="168:31">WRITE_DECSAMPLE</name><argument_list pos:start="168:32" pos:end="168:49">(<argument pos:start="168:33" pos:end="168:48"><expr pos:start="168:33" pos:end="168:48"><name pos:start="168:33" pos:end="168:48"><name pos:start="168:33" pos:end="168:35">dpp</name><operator pos:start="168:36" pos:end="168:37">-&gt;</operator><name pos:start="168:38" pos:end="168:45">samplesA</name><index pos:start="168:46" pos:end="168:48">[<expr pos:start="168:47" pos:end="168:47"><literal type="number" pos:start="168:47" pos:end="168:47">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="169:17" pos:end="169:50"><expr pos:start="169:17" pos:end="169:49"><call pos:start="169:17" pos:end="169:49"><name pos:start="169:17" pos:end="169:31">WRITE_DECSAMPLE</name><argument_list pos:start="169:32" pos:end="169:49">(<argument pos:start="169:33" pos:end="169:48"><expr pos:start="169:33" pos:end="169:48"><name pos:start="169:33" pos:end="169:48"><name pos:start="169:33" pos:end="169:35">dpp</name><operator pos:start="169:36" pos:end="169:37">-&gt;</operator><name pos:start="169:38" pos:end="169:45">samplesB</name><index pos:start="169:46" pos:end="169:48">[<expr pos:start="169:47" pos:end="169:47"><literal type="number" pos:start="169:47" pos:end="169:47">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="170:15" pos:end="176:13">else <block pos:start="170:20" pos:end="176:13">{<block_content pos:start="171:17" pos:end="175:17">
                <for pos:start="171:17" pos:end="175:17">for <control pos:start="171:21" pos:end="171:48">(<init pos:start="171:22" pos:end="171:27"><expr pos:start="171:22" pos:end="171:26"><name pos:start="171:22" pos:end="171:22">j</name> <operator pos:start="171:24" pos:end="171:24">=</operator> <literal type="number" pos:start="171:26" pos:end="171:26">0</literal></expr>;</init> <condition pos:start="171:29" pos:end="171:43"><expr pos:start="171:29" pos:end="171:42"><name pos:start="171:29" pos:end="171:29">j</name> <operator pos:start="171:31" pos:end="171:31">&lt;</operator> <name pos:start="171:33" pos:end="171:42"><name pos:start="171:33" pos:end="171:35">dpp</name><operator pos:start="171:36" pos:end="171:37">-&gt;</operator><name pos:start="171:38" pos:end="171:42">value</name></name></expr>;</condition> <incr pos:start="171:45" pos:end="171:47"><expr pos:start="171:45" pos:end="171:47"><name pos:start="171:45" pos:end="171:45">j</name><operator pos:start="171:46" pos:end="171:47">++</operator></expr></incr>)</control> <block pos:start="171:50" pos:end="175:17">{<block_content pos:start="172:21" pos:end="174:58">
                    <expr_stmt pos:start="172:21" pos:end="172:54"><expr pos:start="172:21" pos:end="172:53"><call pos:start="172:21" pos:end="172:53"><name pos:start="172:21" pos:end="172:35">WRITE_DECSAMPLE</name><argument_list pos:start="172:36" pos:end="172:53">(<argument pos:start="172:37" pos:end="172:52"><expr pos:start="172:37" pos:end="172:52"><name pos:start="172:37" pos:end="172:52"><name pos:start="172:37" pos:end="172:39">dpp</name><operator pos:start="172:40" pos:end="172:41">-&gt;</operator><name pos:start="172:42" pos:end="172:49">samplesA</name><index pos:start="172:50" pos:end="172:52">[<expr pos:start="172:51" pos:end="172:51"><name pos:start="172:51" pos:end="172:51">j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt pos:start="173:21" pos:end="174:58"><if pos:start="173:21" pos:end="174:58">if <condition pos:start="173:24" pos:end="173:51">(<expr pos:start="173:25" pos:end="173:50"><operator pos:start="173:25" pos:end="173:25">!</operator><operator pos:start="173:26" pos:end="173:26">(</operator><name pos:start="173:27" pos:end="173:34"><name pos:start="173:27" pos:end="173:27">s</name><operator pos:start="173:28" pos:end="173:29">-&gt;</operator><name pos:start="173:30" pos:end="173:34">flags</name></name> <operator pos:start="173:36" pos:end="173:36">&amp;</operator> <name pos:start="173:38" pos:end="173:49">WV_MONO_DATA</name><operator pos:start="173:50" pos:end="173:50">)</operator></expr>)</condition><block type="pseudo" pos:start="174:25" pos:end="174:58"><block_content pos:start="174:25" pos:end="174:58">
                        <expr_stmt pos:start="174:25" pos:end="174:58"><expr pos:start="174:25" pos:end="174:57"><call pos:start="174:25" pos:end="174:57"><name pos:start="174:25" pos:end="174:39">WRITE_DECSAMPLE</name><argument_list pos:start="174:40" pos:end="174:57">(<argument pos:start="174:41" pos:end="174:56"><expr pos:start="174:41" pos:end="174:56"><name pos:start="174:41" pos:end="174:56"><name pos:start="174:41" pos:end="174:43">dpp</name><operator pos:start="174:44" pos:end="174:45">-&gt;</operator><name pos:start="174:46" pos:end="174:53">samplesB</name><index pos:start="174:54" pos:end="174:56">[<expr pos:start="174:55" pos:end="174:55"><name pos:start="174:55" pos:end="174:55">j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else pos:start="177:11" pos:end="180:9">else <block pos:start="177:16" pos:end="180:9">{<block_content pos:start="178:13" pos:end="179:33">
            <expr_stmt pos:start="178:13" pos:end="178:33"><expr pos:start="178:13" pos:end="178:32"><call pos:start="178:13" pos:end="178:32"><name pos:start="178:13" pos:end="178:17">CLEAR</name><argument_list pos:start="178:18" pos:end="178:32">(<argument pos:start="178:19" pos:end="178:31"><expr pos:start="178:19" pos:end="178:31"><name pos:start="178:19" pos:end="178:31"><name pos:start="178:19" pos:end="178:21">dpp</name><operator pos:start="178:22" pos:end="178:23">-&gt;</operator><name pos:start="178:24" pos:end="178:31">samplesA</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="179:13" pos:end="179:33"><expr pos:start="179:13" pos:end="179:32"><call pos:start="179:13" pos:end="179:32"><name pos:start="179:13" pos:end="179:17">CLEAR</name><argument_list pos:start="179:18" pos:end="179:32">(<argument pos:start="179:19" pos:end="179:31"><expr pos:start="179:19" pos:end="179:31"><name pos:start="179:19" pos:end="179:31"><name pos:start="179:19" pos:end="179:21">dpp</name><operator pos:start="179:22" pos:end="179:23">-&gt;</operator><name pos:start="179:24" pos:end="179:31">samplesB</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <expr_stmt pos:start="182:5" pos:end="182:34"><expr pos:start="182:5" pos:end="182:33"><name pos:start="182:5" pos:end="182:7">end</name> <operator pos:start="182:9" pos:end="182:9">=</operator> <call pos:start="182:11" pos:end="182:33"><name pos:start="182:11" pos:end="182:28">bytestream2_tell_p</name><argument_list pos:start="182:29" pos:end="182:33">(<argument pos:start="182:30" pos:end="182:32"><expr pos:start="182:30" pos:end="182:32"><operator pos:start="182:30" pos:end="182:30">&amp;</operator><name pos:start="182:31" pos:end="182:32">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="183:5" pos:end="191:0"><expr pos:start="183:5" pos:end="183:39"><name pos:start="183:5" pos:end="183:18"><name pos:start="183:5" pos:end="183:7">out</name><index pos:start="183:8" pos:end="183:18">[<expr pos:start="183:9" pos:end="183:17"><name pos:start="183:9" pos:end="183:13">start</name> <operator pos:start="183:15" pos:end="183:15">-</operator> <literal type="number" pos:start="183:17" pos:end="183:17">1</literal></expr>]</index></name> <operator pos:start="183:20" pos:end="183:20">=</operator> <operator pos:start="183:22" pos:end="183:22">(</operator><name pos:start="183:23" pos:end="183:25">end</name> <operator pos:start="183:27" pos:end="183:27">-</operator> <name pos:start="183:29" pos:end="183:33">start</name><operator pos:start="183:34" pos:end="183:34">)</operator> <operator pos:start="183:36" pos:end="183:37">&gt;&gt;</operator> <literal type="number" pos:start="183:39" pos:end="183:39">1</literal></expr>;</expr_stmt>
<cpp:define pos:start="184:1" pos:end="190:15">#<cpp:directive pos:start="184:2" pos:end="184:7">define</cpp:directive> <cpp:macro pos:start="184:9" pos:end="184:32"><name pos:start="184:9" pos:end="184:26">WRITE_CHAN_ENTROPY</name><parameter_list pos:start="184:27" pos:end="184:32">(<parameter pos:start="184:28" pos:end="184:31"><type pos:start="184:28" pos:end="184:31"><name pos:start="184:28" pos:end="184:31">chan</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="184:34" pos:end="190:15">do {               \
        for (i = 0; i &lt; 3; i++) {                   \
            temp = wp_log2(s-&gt;w.c[chan].median[i]); \
            bytestream2_put_le16(&amp;pb, temp);        \
            s-&gt;w.c[chan].median[i] = wp_exp2(temp); \
        }                                           \
    } while (0)</cpp:value></cpp:define>
    <expr_stmt pos:start="191:5" pos:end="191:83"><expr pos:start="191:5" pos:end="191:82"><call pos:start="191:5" pos:end="191:82"><name pos:start="191:5" pos:end="191:22">put_metadata_block</name><argument_list pos:start="191:23" pos:end="191:82">(<argument pos:start="191:24" pos:end="191:26"><expr pos:start="191:24" pos:end="191:26"><operator pos:start="191:24" pos:end="191:24">&amp;</operator><name pos:start="191:25" pos:end="191:26">pb</name></expr></argument>, <argument pos:start="191:29" pos:end="191:41"><expr pos:start="191:29" pos:end="191:41"><name pos:start="191:29" pos:end="191:41">WP_ID_ENTROPY</name></expr></argument>, <argument pos:start="191:44" pos:end="191:81"><expr pos:start="191:44" pos:end="191:81"><literal type="number" pos:start="191:44" pos:end="191:44">6</literal> <operator pos:start="191:46" pos:end="191:46">*</operator> <operator pos:start="191:48" pos:end="191:48">(</operator><literal type="number" pos:start="191:49" pos:end="191:51">1</literal> <operator pos:start="191:51" pos:end="191:51">+</operator> <operator pos:start="191:53" pos:end="191:53">(</operator><operator pos:start="191:54" pos:end="191:54">!</operator><operator pos:start="191:55" pos:end="191:55">(</operator><name pos:start="191:56" pos:end="191:63"><name pos:start="191:56" pos:end="191:56">s</name><operator pos:start="191:57" pos:end="191:58">-&gt;</operator><name pos:start="191:59" pos:end="191:63">flags</name></name> <operator pos:start="191:65" pos:end="191:65">&amp;</operator> <name pos:start="191:67" pos:end="191:78">WV_MONO_DATA</name><operator pos:start="191:79" pos:end="191:79">)</operator><operator pos:start="191:80" pos:end="191:80">)</operator><operator pos:start="191:81" pos:end="191:81">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="192:5" pos:end="192:26"><expr pos:start="192:5" pos:end="192:25"><call pos:start="192:5" pos:end="192:25"><name pos:start="192:5" pos:end="192:22">WRITE_CHAN_ENTROPY</name><argument_list pos:start="192:23" pos:end="192:25">(<argument pos:start="192:24" pos:end="192:24"><expr pos:start="192:24" pos:end="192:24"><literal type="number" pos:start="192:24" pos:end="192:24">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="193:5" pos:end="194:30"><if pos:start="193:5" pos:end="194:30">if <condition pos:start="193:8" pos:end="193:35">(<expr pos:start="193:9" pos:end="193:34"><operator pos:start="193:9" pos:end="193:9">!</operator><operator pos:start="193:10" pos:end="193:10">(</operator><name pos:start="193:11" pos:end="193:18"><name pos:start="193:11" pos:end="193:11">s</name><operator pos:start="193:12" pos:end="193:13">-&gt;</operator><name pos:start="193:14" pos:end="193:18">flags</name></name> <operator pos:start="193:20" pos:end="193:20">&amp;</operator> <name pos:start="193:22" pos:end="193:33">WV_MONO_DATA</name><operator pos:start="193:34" pos:end="193:34">)</operator></expr>)</condition><block type="pseudo" pos:start="194:9" pos:end="194:30"><block_content pos:start="194:9" pos:end="194:30">
        <expr_stmt pos:start="194:9" pos:end="194:30"><expr pos:start="194:9" pos:end="194:29"><call pos:start="194:9" pos:end="194:29"><name pos:start="194:9" pos:end="194:26">WRITE_CHAN_ENTROPY</name><argument_list pos:start="194:27" pos:end="194:29">(<argument pos:start="194:28" pos:end="194:28"><expr pos:start="194:28" pos:end="194:28"><literal type="number" pos:start="194:28" pos:end="194:28">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="195:5" pos:end="201:5"><if pos:start="195:5" pos:end="201:5">if <condition pos:start="195:8" pos:end="195:33">(<expr pos:start="195:9" pos:end="195:32"><name pos:start="195:9" pos:end="195:16"><name pos:start="195:9" pos:end="195:9">s</name><operator pos:start="195:10" pos:end="195:11">-&gt;</operator><name pos:start="195:12" pos:end="195:16">flags</name></name> <operator pos:start="195:18" pos:end="195:18">&amp;</operator> <name pos:start="195:20" pos:end="195:32">WV_FLOAT_DATA</name></expr>)</condition> <block pos:start="195:35" pos:end="201:5">{<block_content pos:start="196:9" pos:end="200:39">
        <expr_stmt pos:start="196:9" pos:end="196:52"><expr pos:start="196:9" pos:end="196:51"><call pos:start="196:9" pos:end="196:51"><name pos:start="196:9" pos:end="196:26">put_metadata_block</name><argument_list pos:start="196:27" pos:end="196:51">(<argument pos:start="196:28" pos:end="196:30"><expr pos:start="196:28" pos:end="196:30"><operator pos:start="196:28" pos:end="196:28">&amp;</operator><name pos:start="196:29" pos:end="196:30">pb</name></expr></argument>, <argument pos:start="196:33" pos:end="196:47"><expr pos:start="196:33" pos:end="196:47"><name pos:start="196:33" pos:end="196:47">WP_ID_FLOATINFO</name></expr></argument>, <argument pos:start="196:50" pos:end="196:50"><expr pos:start="196:50" pos:end="196:50"><literal type="number" pos:start="196:50" pos:end="196:50">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="197:9" pos:end="197:50"><expr pos:start="197:9" pos:end="197:49"><call pos:start="197:9" pos:end="197:49"><name pos:start="197:9" pos:end="197:28">bytestream2_put_byte</name><argument_list pos:start="197:29" pos:end="197:49">(<argument pos:start="197:30" pos:end="197:32"><expr pos:start="197:30" pos:end="197:32"><operator pos:start="197:30" pos:end="197:30">&amp;</operator><name pos:start="197:31" pos:end="197:32">pb</name></expr></argument>, <argument pos:start="197:35" pos:end="197:48"><expr pos:start="197:35" pos:end="197:48"><name pos:start="197:35" pos:end="197:48"><name pos:start="197:35" pos:end="197:35">s</name><operator pos:start="197:36" pos:end="197:37">-&gt;</operator><name pos:start="197:38" pos:end="197:48">float_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="198:9" pos:end="198:50"><expr pos:start="198:9" pos:end="198:49"><call pos:start="198:9" pos:end="198:49"><name pos:start="198:9" pos:end="198:28">bytestream2_put_byte</name><argument_list pos:start="198:29" pos:end="198:49">(<argument pos:start="198:30" pos:end="198:32"><expr pos:start="198:30" pos:end="198:32"><operator pos:start="198:30" pos:end="198:30">&amp;</operator><name pos:start="198:31" pos:end="198:32">pb</name></expr></argument>, <argument pos:start="198:35" pos:end="198:48"><expr pos:start="198:35" pos:end="198:48"><name pos:start="198:35" pos:end="198:48"><name pos:start="198:35" pos:end="198:35">s</name><operator pos:start="198:36" pos:end="198:37">-&gt;</operator><name pos:start="198:38" pos:end="198:48">float_shift</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="199:9" pos:end="199:52"><expr pos:start="199:9" pos:end="199:51"><call pos:start="199:9" pos:end="199:51"><name pos:start="199:9" pos:end="199:28">bytestream2_put_byte</name><argument_list pos:start="199:29" pos:end="199:51">(<argument pos:start="199:30" pos:end="199:32"><expr pos:start="199:30" pos:end="199:32"><operator pos:start="199:30" pos:end="199:30">&amp;</operator><name pos:start="199:31" pos:end="199:32">pb</name></expr></argument>, <argument pos:start="199:35" pos:end="199:50"><expr pos:start="199:35" pos:end="199:50"><name pos:start="199:35" pos:end="199:50"><name pos:start="199:35" pos:end="199:35">s</name><operator pos:start="199:36" pos:end="199:37">-&gt;</operator><name pos:start="199:38" pos:end="199:50">float_max_exp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="200:9" pos:end="200:39"><expr pos:start="200:9" pos:end="200:38"><call pos:start="200:9" pos:end="200:38"><name pos:start="200:9" pos:end="200:28">bytestream2_put_byte</name><argument_list pos:start="200:29" pos:end="200:38">(<argument pos:start="200:30" pos:end="200:32"><expr pos:start="200:30" pos:end="200:32"><operator pos:start="200:30" pos:end="200:30">&amp;</operator><name pos:start="200:31" pos:end="200:32">pb</name></expr></argument>, <argument pos:start="200:35" pos:end="200:37"><expr pos:start="200:35" pos:end="200:37"><literal type="number" pos:start="200:35" pos:end="200:37">127</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="202:5" pos:end="208:5"><if pos:start="202:5" pos:end="208:5">if <condition pos:start="202:8" pos:end="202:33">(<expr pos:start="202:9" pos:end="202:32"><name pos:start="202:9" pos:end="202:16"><name pos:start="202:9" pos:end="202:9">s</name><operator pos:start="202:10" pos:end="202:11">-&gt;</operator><name pos:start="202:12" pos:end="202:16">flags</name></name> <operator pos:start="202:18" pos:end="202:18">&amp;</operator> <name pos:start="202:20" pos:end="202:32">WV_INT32_DATA</name></expr>)</condition> <block pos:start="202:35" pos:end="208:5">{<block_content pos:start="203:9" pos:end="207:49">
        <expr_stmt pos:start="203:9" pos:end="203:52"><expr pos:start="203:9" pos:end="203:51"><call pos:start="203:9" pos:end="203:51"><name pos:start="203:9" pos:end="203:26">put_metadata_block</name><argument_list pos:start="203:27" pos:end="203:51">(<argument pos:start="203:28" pos:end="203:30"><expr pos:start="203:28" pos:end="203:30"><operator pos:start="203:28" pos:end="203:28">&amp;</operator><name pos:start="203:29" pos:end="203:30">pb</name></expr></argument>, <argument pos:start="203:33" pos:end="203:47"><expr pos:start="203:33" pos:end="203:47"><name pos:start="203:33" pos:end="203:47">WP_ID_INT32INFO</name></expr></argument>, <argument pos:start="203:50" pos:end="203:50"><expr pos:start="203:50" pos:end="203:50"><literal type="number" pos:start="203:50" pos:end="203:50">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="204:9" pos:end="204:54"><expr pos:start="204:9" pos:end="204:53"><call pos:start="204:9" pos:end="204:53"><name pos:start="204:9" pos:end="204:28">bytestream2_put_byte</name><argument_list pos:start="204:29" pos:end="204:53">(<argument pos:start="204:30" pos:end="204:32"><expr pos:start="204:30" pos:end="204:32"><operator pos:start="204:30" pos:end="204:30">&amp;</operator><name pos:start="204:31" pos:end="204:32">pb</name></expr></argument>, <argument pos:start="204:35" pos:end="204:52"><expr pos:start="204:35" pos:end="204:52"><name pos:start="204:35" pos:end="204:52"><name pos:start="204:35" pos:end="204:35">s</name><operator pos:start="204:36" pos:end="204:37">-&gt;</operator><name pos:start="204:38" pos:end="204:52">int32_sent_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="205:9" pos:end="205:50"><expr pos:start="205:9" pos:end="205:49"><call pos:start="205:9" pos:end="205:49"><name pos:start="205:9" pos:end="205:28">bytestream2_put_byte</name><argument_list pos:start="205:29" pos:end="205:49">(<argument pos:start="205:30" pos:end="205:32"><expr pos:start="205:30" pos:end="205:32"><operator pos:start="205:30" pos:end="205:30">&amp;</operator><name pos:start="205:31" pos:end="205:32">pb</name></expr></argument>, <argument pos:start="205:35" pos:end="205:48"><expr pos:start="205:35" pos:end="205:48"><name pos:start="205:35" pos:end="205:48"><name pos:start="205:35" pos:end="205:35">s</name><operator pos:start="205:36" pos:end="205:37">-&gt;</operator><name pos:start="205:38" pos:end="205:48">int32_zeros</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="206:9" pos:end="206:49"><expr pos:start="206:9" pos:end="206:48"><call pos:start="206:9" pos:end="206:48"><name pos:start="206:9" pos:end="206:28">bytestream2_put_byte</name><argument_list pos:start="206:29" pos:end="206:48">(<argument pos:start="206:30" pos:end="206:32"><expr pos:start="206:30" pos:end="206:32"><operator pos:start="206:30" pos:end="206:30">&amp;</operator><name pos:start="206:31" pos:end="206:32">pb</name></expr></argument>, <argument pos:start="206:35" pos:end="206:47"><expr pos:start="206:35" pos:end="206:47"><name pos:start="206:35" pos:end="206:47"><name pos:start="206:35" pos:end="206:35">s</name><operator pos:start="206:36" pos:end="206:37">-&gt;</operator><name pos:start="206:38" pos:end="206:47">int32_ones</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="207:9" pos:end="207:49"><expr pos:start="207:9" pos:end="207:48"><call pos:start="207:9" pos:end="207:48"><name pos:start="207:9" pos:end="207:28">bytestream2_put_byte</name><argument_list pos:start="207:29" pos:end="207:48">(<argument pos:start="207:30" pos:end="207:32"><expr pos:start="207:30" pos:end="207:32"><operator pos:start="207:30" pos:end="207:30">&amp;</operator><name pos:start="207:31" pos:end="207:32">pb</name></expr></argument>, <argument pos:start="207:35" pos:end="207:47"><expr pos:start="207:35" pos:end="207:47"><name pos:start="207:35" pos:end="207:47"><name pos:start="207:35" pos:end="207:35">s</name><operator pos:start="207:36" pos:end="207:37">-&gt;</operator><name pos:start="207:38" pos:end="207:47">int32_dups</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="209:5" pos:end="257:5"><if pos:start="209:5" pos:end="245:5">if <condition pos:start="209:8" pos:end="209:50">(<expr pos:start="209:9" pos:end="209:49"><name pos:start="209:9" pos:end="209:16"><name pos:start="209:9" pos:end="209:9">s</name><operator pos:start="209:10" pos:end="209:11">-&gt;</operator><name pos:start="209:12" pos:end="209:16">flags</name></name> <operator pos:start="209:18" pos:end="209:18">&amp;</operator> <name pos:start="209:20" pos:end="209:31">WV_MONO_DATA</name> <operator pos:start="209:33" pos:end="209:34">&amp;&amp;</operator> <operator pos:start="209:36" pos:end="209:36">!</operator><name pos:start="209:37" pos:end="209:49"><name pos:start="209:37" pos:end="209:37">s</name><operator pos:start="209:38" pos:end="209:39">-&gt;</operator><name pos:start="209:40" pos:end="209:49">num_passes</name></name></expr>)</condition> <block pos:start="209:52" pos:end="245:5">{<block_content pos:start="210:9" pos:end="244:9">
        <for pos:start="210:9" pos:end="230:9">for <control pos:start="210:13" pos:end="210:40">(<init pos:start="210:14" pos:end="210:19"><expr pos:start="210:14" pos:end="210:18"><name pos:start="210:14" pos:end="210:14">i</name> <operator pos:start="210:16" pos:end="210:16">=</operator> <literal type="number" pos:start="210:18" pos:end="210:18">0</literal></expr>;</init> <condition pos:start="210:21" pos:end="210:35"><expr pos:start="210:21" pos:end="210:34"><name pos:start="210:21" pos:end="210:21">i</name> <operator pos:start="210:23" pos:end="210:23">&lt;</operator> <name pos:start="210:25" pos:end="210:34">nb_samples</name></expr>;</condition> <incr pos:start="210:37" pos:end="210:39"><expr pos:start="210:37" pos:end="210:39"><name pos:start="210:37" pos:end="210:37">i</name><operator pos:start="210:38" pos:end="210:39">++</operator></expr></incr>)</control> <block pos:start="210:42" pos:end="230:9">{<block_content pos:start="211:13" pos:end="229:32">
            <decl_stmt pos:start="211:13" pos:end="211:40"><decl pos:start="211:13" pos:end="211:39"><type pos:start="211:13" pos:end="211:19"><name pos:start="211:13" pos:end="211:19">int32_t</name></type> <name pos:start="211:21" pos:end="211:24">code</name> <init pos:start="211:26" pos:end="211:39">= <expr pos:start="211:28" pos:end="211:39"><name pos:start="211:28" pos:end="211:39"><name pos:start="211:28" pos:end="211:36">samples_l</name><index pos:start="211:37" pos:end="211:39">[<expr pos:start="211:38" pos:end="211:38"><name pos:start="211:38" pos:end="211:38">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <for pos:start="212:13" pos:end="227:13">for <control pos:start="212:17" pos:end="212:80">(<init pos:start="212:18" pos:end="212:63"><expr pos:start="212:18" pos:end="212:38"><name pos:start="212:18" pos:end="212:23">tcount</name> <operator pos:start="212:25" pos:end="212:25">=</operator> <name pos:start="212:27" pos:end="212:38"><name pos:start="212:27" pos:end="212:27">s</name><operator pos:start="212:28" pos:end="212:29">-&gt;</operator><name pos:start="212:30" pos:end="212:38">num_terms</name></name></expr><operator pos:start="212:39" pos:end="212:39">,</operator> <expr pos:start="212:41" pos:end="212:62"><name pos:start="212:41" pos:end="212:43">dpp</name> <operator pos:start="212:45" pos:end="212:45">=</operator> <name pos:start="212:47" pos:end="212:62"><name pos:start="212:47" pos:end="212:47">s</name><operator pos:start="212:48" pos:end="212:49">-&gt;</operator><name pos:start="212:50" pos:end="212:62">decorr_passes</name></name></expr>;</init> <condition pos:start="212:65" pos:end="212:73"><expr pos:start="212:65" pos:end="212:72"><name pos:start="212:65" pos:end="212:70">tcount</name><operator pos:start="212:71" pos:end="212:72">--</operator></expr>;</condition> <incr pos:start="212:75" pos:end="212:79"><expr pos:start="212:75" pos:end="212:79"><name pos:start="212:75" pos:end="212:77">dpp</name><operator pos:start="212:78" pos:end="212:79">++</operator></expr></incr>)</control> <block pos:start="212:82" pos:end="227:13">{<block_content pos:start="213:17" pos:end="226:67">
                <decl_stmt pos:start="213:17" pos:end="213:28"><decl pos:start="213:17" pos:end="213:27"><type pos:start="213:17" pos:end="213:23"><name pos:start="213:17" pos:end="213:23">int32_t</name></type> <name pos:start="213:25" pos:end="213:27">sam</name></decl>;</decl_stmt>
                <if_stmt pos:start="214:17" pos:end="224:17"><if pos:start="214:17" pos:end="221:17">if <condition pos:start="214:20" pos:end="214:42">(<expr pos:start="214:21" pos:end="214:41"><name pos:start="214:21" pos:end="214:30"><name pos:start="214:21" pos:end="214:23">dpp</name><operator pos:start="214:24" pos:end="214:25">-&gt;</operator><name pos:start="214:26" pos:end="214:30">value</name></name> <operator pos:start="214:32" pos:end="214:32">&gt;</operator> <name pos:start="214:34" pos:end="214:41">MAX_TERM</name></expr>)</condition> <block pos:start="214:44" pos:end="221:17">{<block_content pos:start="215:21" pos:end="220:44">
                    <if_stmt pos:start="215:21" pos:end="218:77"><if pos:start="215:21" pos:end="216:70">if <condition pos:start="215:24" pos:end="215:39">(<expr pos:start="215:25" pos:end="215:38"><name pos:start="215:25" pos:end="215:34"><name pos:start="215:25" pos:end="215:27">dpp</name><operator pos:start="215:28" pos:end="215:29">-&gt;</operator><name pos:start="215:30" pos:end="215:34">value</name></name> <operator pos:start="215:36" pos:end="215:36">&amp;</operator> <literal type="number" pos:start="215:38" pos:end="215:38">1</literal></expr>)</condition><block type="pseudo" pos:start="216:25" pos:end="216:70"><block_content pos:start="216:25" pos:end="216:70">
                        <expr_stmt pos:start="216:25" pos:end="216:70"><expr pos:start="216:25" pos:end="216:69"><name pos:start="216:25" pos:end="216:27">sam</name> <operator pos:start="216:29" pos:end="216:29">=</operator> <literal type="number" pos:start="216:31" pos:end="216:31">2</literal> <operator pos:start="216:33" pos:end="216:33">*</operator> <name pos:start="216:35" pos:end="216:50"><name pos:start="216:35" pos:end="216:37">dpp</name><operator pos:start="216:38" pos:end="216:39">-&gt;</operator><name pos:start="216:40" pos:end="216:47">samplesA</name><index pos:start="216:48" pos:end="216:50">[<expr pos:start="216:49" pos:end="216:49"><literal type="number" pos:start="216:49" pos:end="216:49">0</literal></expr>]</index></name> <operator pos:start="216:52" pos:end="216:52">-</operator> <name pos:start="216:54" pos:end="216:69"><name pos:start="216:54" pos:end="216:56">dpp</name><operator pos:start="216:57" pos:end="216:58">-&gt;</operator><name pos:start="216:59" pos:end="216:66">samplesA</name><index pos:start="216:67" pos:end="216:69">[<expr pos:start="216:68" pos:end="216:68"><literal type="number" pos:start="216:68" pos:end="216:68">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
                    <else pos:start="217:21" pos:end="218:77">else<block type="pseudo" pos:start="218:25" pos:end="218:77"><block_content pos:start="218:25" pos:end="218:77">
                        <expr_stmt pos:start="218:25" pos:end="218:77"><expr pos:start="218:25" pos:end="218:76"><name pos:start="218:25" pos:end="218:27">sam</name> <operator pos:start="218:29" pos:end="218:29">=</operator> <operator pos:start="218:31" pos:end="218:31">(</operator><literal type="number" pos:start="218:32" pos:end="218:32">3</literal> <operator pos:start="218:34" pos:end="218:34">*</operator> <name pos:start="218:36" pos:end="218:51"><name pos:start="218:36" pos:end="218:38">dpp</name><operator pos:start="218:39" pos:end="218:40">-&gt;</operator><name pos:start="218:41" pos:end="218:48">samplesA</name><index pos:start="218:49" pos:end="218:51">[<expr pos:start="218:50" pos:end="218:50"><literal type="number" pos:start="218:50" pos:end="218:50">0</literal></expr>]</index></name> <operator pos:start="218:53" pos:end="218:53">-</operator> <name pos:start="218:55" pos:end="218:70"><name pos:start="218:55" pos:end="218:57">dpp</name><operator pos:start="218:58" pos:end="218:59">-&gt;</operator><name pos:start="218:60" pos:end="218:67">samplesA</name><index pos:start="218:68" pos:end="218:70">[<expr pos:start="218:69" pos:end="218:69"><literal type="number" pos:start="218:69" pos:end="218:69">1</literal></expr>]</index></name><operator pos:start="218:71" pos:end="218:71">)</operator> <operator pos:start="218:73" pos:end="218:74">&gt;&gt;</operator> <literal type="number" pos:start="218:76" pos:end="218:76">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
                    <expr_stmt pos:start="219:21" pos:end="219:56"><expr pos:start="219:21" pos:end="219:55"><name pos:start="219:21" pos:end="219:36"><name pos:start="219:21" pos:end="219:23">dpp</name><operator pos:start="219:24" pos:end="219:25">-&gt;</operator><name pos:start="219:26" pos:end="219:33">samplesA</name><index pos:start="219:34" pos:end="219:36">[<expr pos:start="219:35" pos:end="219:35"><literal type="number" pos:start="219:35" pos:end="219:35">1</literal></expr>]</index></name> <operator pos:start="219:38" pos:end="219:38">=</operator> <name pos:start="219:40" pos:end="219:55"><name pos:start="219:40" pos:end="219:42">dpp</name><operator pos:start="219:43" pos:end="219:44">-&gt;</operator><name pos:start="219:45" pos:end="219:52">samplesA</name><index pos:start="219:53" pos:end="219:55">[<expr pos:start="219:54" pos:end="219:54"><literal type="number" pos:start="219:54" pos:end="219:54">0</literal></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt pos:start="220:21" pos:end="220:44"><expr pos:start="220:21" pos:end="220:43"><name pos:start="220:21" pos:end="220:36"><name pos:start="220:21" pos:end="220:23">dpp</name><operator pos:start="220:24" pos:end="220:25">-&gt;</operator><name pos:start="220:26" pos:end="220:33">samplesA</name><index pos:start="220:34" pos:end="220:36">[<expr pos:start="220:35" pos:end="220:35"><literal type="number" pos:start="220:35" pos:end="220:35">0</literal></expr>]</index></name> <operator pos:start="220:38" pos:end="220:38">=</operator> <name pos:start="220:40" pos:end="220:43">code</name></expr>;</expr_stmt>
                </block_content>}</block></if> <else pos:start="221:19" pos:end="224:17">else <block pos:start="221:24" pos:end="224:17">{<block_content pos:start="222:21" pos:end="223:76">
                    <expr_stmt pos:start="222:21" pos:end="222:43"><expr pos:start="222:21" pos:end="222:42"><name pos:start="222:21" pos:end="222:23">sam</name> <operator pos:start="222:25" pos:end="222:25">=</operator> <name pos:start="222:27" pos:end="222:42"><name pos:start="222:27" pos:end="222:29">dpp</name><operator pos:start="222:30" pos:end="222:31">-&gt;</operator><name pos:start="222:32" pos:end="222:39">samplesA</name><index pos:start="222:40" pos:end="222:42">[<expr pos:start="222:41" pos:end="222:41"><name pos:start="222:41" pos:end="222:41">m</name></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt pos:start="223:21" pos:end="223:76"><expr pos:start="223:21" pos:end="223:75"><name pos:start="223:21" pos:end="223:68"><name pos:start="223:21" pos:end="223:23">dpp</name><operator pos:start="223:24" pos:end="223:25">-&gt;</operator><name pos:start="223:26" pos:end="223:33">samplesA</name><index pos:start="223:34" pos:end="223:68">[<expr pos:start="223:35" pos:end="223:67"><operator pos:start="223:35" pos:end="223:35">(</operator><name pos:start="223:36" pos:end="223:36">m</name> <operator pos:start="223:38" pos:end="223:38">+</operator> <name pos:start="223:40" pos:end="223:49"><name pos:start="223:40" pos:end="223:42">dpp</name><operator pos:start="223:43" pos:end="223:44">-&gt;</operator><name pos:start="223:45" pos:end="223:49">value</name></name><operator pos:start="223:50" pos:end="223:50">)</operator> <operator pos:start="223:52" pos:end="223:52">&amp;</operator> <operator pos:start="223:54" pos:end="223:54">(</operator><name pos:start="223:55" pos:end="223:62">MAX_TERM</name> <operator pos:start="223:64" pos:end="223:64">-</operator> <literal type="number" pos:start="223:66" pos:end="223:66">1</literal><operator pos:start="223:67" pos:end="223:67">)</operator></expr>]</index></name> <operator pos:start="223:70" pos:end="223:70">=</operator> <name pos:start="223:72" pos:end="223:75">code</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <expr_stmt pos:start="225:17" pos:end="225:56"><expr pos:start="225:17" pos:end="225:55"><name pos:start="225:17" pos:end="225:20">code</name> <operator pos:start="225:22" pos:end="225:23">-=</operator> <call pos:start="225:25" pos:end="225:55"><name pos:start="225:25" pos:end="225:36">APPLY_WEIGHT</name><argument_list pos:start="225:37" pos:end="225:55">(<argument pos:start="225:38" pos:end="225:49"><expr pos:start="225:38" pos:end="225:49"><name pos:start="225:38" pos:end="225:49"><name pos:start="225:38" pos:end="225:40">dpp</name><operator pos:start="225:41" pos:end="225:42">-&gt;</operator><name pos:start="225:43" pos:end="225:49">weightA</name></name></expr></argument>, <argument pos:start="225:52" pos:end="225:54"><expr pos:start="225:52" pos:end="225:54"><name pos:start="225:52" pos:end="225:54">sam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="226:17" pos:end="226:67"><expr pos:start="226:17" pos:end="226:66"><call pos:start="226:17" pos:end="226:66"><name pos:start="226:17" pos:end="226:29">UPDATE_WEIGHT</name><argument_list pos:start="226:30" pos:end="226:66">(<argument pos:start="226:31" pos:end="226:42"><expr pos:start="226:31" pos:end="226:42"><name pos:start="226:31" pos:end="226:42"><name pos:start="226:31" pos:end="226:33">dpp</name><operator pos:start="226:34" pos:end="226:35">-&gt;</operator><name pos:start="226:36" pos:end="226:42">weightA</name></name></expr></argument>, <argument pos:start="226:45" pos:end="226:54"><expr pos:start="226:45" pos:end="226:54"><name pos:start="226:45" pos:end="226:54"><name pos:start="226:45" pos:end="226:47">dpp</name><operator pos:start="226:48" pos:end="226:49">-&gt;</operator><name pos:start="226:50" pos:end="226:54">delta</name></name></expr></argument>, <argument pos:start="226:57" pos:end="226:59"><expr pos:start="226:57" pos:end="226:59"><name pos:start="226:57" pos:end="226:59">sam</name></expr></argument>, <argument pos:start="226:62" pos:end="226:65"><expr pos:start="226:62" pos:end="226:65"><name pos:start="226:62" pos:end="226:65">code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt pos:start="228:13" pos:end="228:41"><expr pos:start="228:13" pos:end="228:40"><name pos:start="228:13" pos:end="228:13">m</name> <operator pos:start="228:15" pos:end="228:15">=</operator> <operator pos:start="228:17" pos:end="228:17">(</operator><name pos:start="228:18" pos:end="228:18">m</name> <operator pos:start="228:20" pos:end="228:20">+</operator> <literal type="number" pos:start="228:22" pos:end="228:22">1</literal><operator pos:start="228:23" pos:end="228:23">)</operator> <operator pos:start="228:25" pos:end="228:25">&amp;</operator> <operator pos:start="228:27" pos:end="228:27">(</operator><name pos:start="228:28" pos:end="228:35">MAX_TERM</name> <operator pos:start="228:37" pos:end="228:37">-</operator> <literal type="number" pos:start="228:39" pos:end="228:39">1</literal><operator pos:start="228:40" pos:end="228:40">)</operator></expr>;</expr_stmt>
            <expr_stmt pos:start="229:13" pos:end="229:32"><expr pos:start="229:13" pos:end="229:31"><name pos:start="229:13" pos:end="229:24"><name pos:start="229:13" pos:end="229:21">samples_l</name><index pos:start="229:22" pos:end="229:24">[<expr pos:start="229:23" pos:end="229:23"><name pos:start="229:23" pos:end="229:23">i</name></expr>]</index></name> <operator pos:start="229:26" pos:end="229:26">=</operator> <name pos:start="229:28" pos:end="229:31">code</name></expr>;</expr_stmt>
        </block_content>}</block></for>
        <if_stmt pos:start="231:9" pos:end="244:9"><if pos:start="231:9" pos:end="244:9">if <condition pos:start="231:12" pos:end="231:14">(<expr pos:start="231:13" pos:end="231:13"><name pos:start="231:13" pos:end="231:13">m</name></expr>)</condition> <block pos:start="231:16" pos:end="244:9">{<block_content pos:start="232:13" pos:end="243:13">
            <for pos:start="232:13" pos:end="243:13">for <control pos:start="232:17" pos:end="232:80">(<init pos:start="232:18" pos:end="232:63"><expr pos:start="232:18" pos:end="232:38"><name pos:start="232:18" pos:end="232:23">tcount</name> <operator pos:start="232:25" pos:end="232:25">=</operator> <name pos:start="232:27" pos:end="232:38"><name pos:start="232:27" pos:end="232:27">s</name><operator pos:start="232:28" pos:end="232:29">-&gt;</operator><name pos:start="232:30" pos:end="232:38">num_terms</name></name></expr><operator pos:start="232:39" pos:end="232:39">,</operator> <expr pos:start="232:41" pos:end="232:62"><name pos:start="232:41" pos:end="232:43">dpp</name> <operator pos:start="232:45" pos:end="232:45">=</operator> <name pos:start="232:47" pos:end="232:62"><name pos:start="232:47" pos:end="232:47">s</name><operator pos:start="232:48" pos:end="232:49">-&gt;</operator><name pos:start="232:50" pos:end="232:62">decorr_passes</name></name></expr>;</init> <condition pos:start="232:65" pos:end="232:73"><expr pos:start="232:65" pos:end="232:72"><name pos:start="232:65" pos:end="232:70">tcount</name><operator pos:start="232:71" pos:end="232:72">--</operator></expr>;</condition> <incr pos:start="232:75" pos:end="232:79"><expr pos:start="232:75" pos:end="232:79"><name pos:start="232:75" pos:end="232:77">dpp</name><operator pos:start="232:78" pos:end="232:79">++</operator></expr></incr>)</control><block type="pseudo" pos:start="233:17" pos:end="243:13"><block_content pos:start="233:17" pos:end="243:13">
                <if_stmt pos:start="233:17" pos:end="243:13"><if pos:start="233:17" pos:end="243:13">if <condition pos:start="233:20" pos:end="233:61">(<expr pos:start="233:21" pos:end="233:60"><name pos:start="233:21" pos:end="233:30"><name pos:start="233:21" pos:end="233:23">dpp</name><operator pos:start="233:24" pos:end="233:25">-&gt;</operator><name pos:start="233:26" pos:end="233:30">value</name></name> <operator pos:start="233:32" pos:end="233:32">&gt;</operator> <literal type="number" pos:start="233:34" pos:end="233:34">0</literal> <operator pos:start="233:36" pos:end="233:37">&amp;&amp;</operator> <name pos:start="233:39" pos:end="233:48"><name pos:start="233:39" pos:end="233:41">dpp</name><operator pos:start="233:42" pos:end="233:43">-&gt;</operator><name pos:start="233:44" pos:end="233:48">value</name></name> <operator pos:start="233:50" pos:end="233:51">&lt;=</operator> <name pos:start="233:53" pos:end="233:60">MAX_TERM</name></expr>)</condition> <block pos:start="233:63" pos:end="243:13">{<block_content pos:start="234:17" pos:end="242:17">
                <decl_stmt pos:start="234:17" pos:end="234:59"><decl pos:start="234:17" pos:end="234:40"><type pos:start="234:17" pos:end="234:23"><name pos:start="234:17" pos:end="234:23">int32_t</name></type> <name pos:start="234:25" pos:end="234:40"><name pos:start="234:25" pos:end="234:30">temp_A</name><index pos:start="234:31" pos:end="234:40">[<expr pos:start="234:32" pos:end="234:39"><name pos:start="234:32" pos:end="234:39">MAX_TERM</name></expr>]</index></name></decl>, <decl pos:start="234:43" pos:end="234:58"><type ref="prev" pos:start="234:17" pos:end="234:23"/><name pos:start="234:43" pos:end="234:58"><name pos:start="234:43" pos:end="234:48">temp_B</name><index pos:start="234:49" pos:end="234:58">[<expr pos:start="234:50" pos:end="234:57"><name pos:start="234:50" pos:end="234:57">MAX_TERM</name></expr>]</index></name></decl>;</decl_stmt>
                <decl_stmt pos:start="235:17" pos:end="235:22"><decl pos:start="235:17" pos:end="235:21"><type pos:start="235:17" pos:end="235:19"><name pos:start="235:17" pos:end="235:19">int</name></type> <name pos:start="235:21" pos:end="235:21">k</name></decl>;</decl_stmt>
                <expr_stmt pos:start="236:17" pos:end="236:69"><expr pos:start="236:17" pos:end="236:68"><call pos:start="236:17" pos:end="236:68"><name pos:start="236:17" pos:end="236:22">memcpy</name><argument_list pos:start="236:23" pos:end="236:68">(<argument pos:start="236:24" pos:end="236:29"><expr pos:start="236:24" pos:end="236:29"><name pos:start="236:24" pos:end="236:29">temp_A</name></expr></argument>, <argument pos:start="236:32" pos:end="236:44"><expr pos:start="236:32" pos:end="236:44"><name pos:start="236:32" pos:end="236:44"><name pos:start="236:32" pos:end="236:34">dpp</name><operator pos:start="236:35" pos:end="236:36">-&gt;</operator><name pos:start="236:37" pos:end="236:44">samplesA</name></name></expr></argument>, <argument pos:start="236:47" pos:end="236:67"><expr pos:start="236:47" pos:end="236:67"><sizeof pos:start="236:47" pos:end="236:67">sizeof<argument_list pos:start="236:53" pos:end="236:67">(<argument pos:start="236:54" pos:end="236:66"><expr pos:start="236:54" pos:end="236:66"><name pos:start="236:54" pos:end="236:66"><name pos:start="236:54" pos:end="236:56">dpp</name><operator pos:start="236:57" pos:end="236:58">-&gt;</operator><name pos:start="236:59" pos:end="236:66">samplesA</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="237:17" pos:end="237:69"><expr pos:start="237:17" pos:end="237:68"><call pos:start="237:17" pos:end="237:68"><name pos:start="237:17" pos:end="237:22">memcpy</name><argument_list pos:start="237:23" pos:end="237:68">(<argument pos:start="237:24" pos:end="237:29"><expr pos:start="237:24" pos:end="237:29"><name pos:start="237:24" pos:end="237:29">temp_B</name></expr></argument>, <argument pos:start="237:32" pos:end="237:44"><expr pos:start="237:32" pos:end="237:44"><name pos:start="237:32" pos:end="237:44"><name pos:start="237:32" pos:end="237:34">dpp</name><operator pos:start="237:35" pos:end="237:36">-&gt;</operator><name pos:start="237:37" pos:end="237:44">samplesB</name></name></expr></argument>, <argument pos:start="237:47" pos:end="237:67"><expr pos:start="237:47" pos:end="237:67"><sizeof pos:start="237:47" pos:end="237:67">sizeof<argument_list pos:start="237:53" pos:end="237:67">(<argument pos:start="237:54" pos:end="237:66"><expr pos:start="237:54" pos:end="237:66"><name pos:start="237:54" pos:end="237:66"><name pos:start="237:54" pos:end="237:56">dpp</name><operator pos:start="237:57" pos:end="237:58">-&gt;</operator><name pos:start="237:59" pos:end="237:66">samplesB</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for pos:start="238:17" pos:end="242:17">for <control pos:start="238:21" pos:end="238:46">(<init pos:start="238:22" pos:end="238:27"><expr pos:start="238:22" pos:end="238:26"><name pos:start="238:22" pos:end="238:22">k</name> <operator pos:start="238:24" pos:end="238:24">=</operator> <literal type="number" pos:start="238:26" pos:end="238:26">0</literal></expr>;</init> <condition pos:start="238:29" pos:end="238:41"><expr pos:start="238:29" pos:end="238:40"><name pos:start="238:29" pos:end="238:29">k</name> <operator pos:start="238:31" pos:end="238:31">&lt;</operator> <name pos:start="238:33" pos:end="238:40">MAX_TERM</name></expr>;</condition> <incr pos:start="238:43" pos:end="238:45"><expr pos:start="238:43" pos:end="238:45"><name pos:start="238:43" pos:end="238:43">k</name><operator pos:start="238:44" pos:end="238:45">++</operator></expr></incr>)</control> <block pos:start="238:48" pos:end="242:17">{<block_content pos:start="239:21" pos:end="241:49">
                    <expr_stmt pos:start="239:21" pos:end="239:49"><expr pos:start="239:21" pos:end="239:48"><name pos:start="239:21" pos:end="239:36"><name pos:start="239:21" pos:end="239:23">dpp</name><operator pos:start="239:24" pos:end="239:25">-&gt;</operator><name pos:start="239:26" pos:end="239:33">samplesA</name><index pos:start="239:34" pos:end="239:36">[<expr pos:start="239:35" pos:end="239:35"><name pos:start="239:35" pos:end="239:35">k</name></expr>]</index></name> <operator pos:start="239:38" pos:end="239:38">=</operator> <name pos:start="239:40" pos:end="239:48"><name pos:start="239:40" pos:end="239:45">temp_A</name><index pos:start="239:46" pos:end="239:48">[<expr pos:start="239:47" pos:end="239:47"><name pos:start="239:47" pos:end="239:47">m</name></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt pos:start="240:21" pos:end="240:49"><expr pos:start="240:21" pos:end="240:48"><name pos:start="240:21" pos:end="240:36"><name pos:start="240:21" pos:end="240:23">dpp</name><operator pos:start="240:24" pos:end="240:25">-&gt;</operator><name pos:start="240:26" pos:end="240:33">samplesB</name><index pos:start="240:34" pos:end="240:36">[<expr pos:start="240:35" pos:end="240:35"><name pos:start="240:35" pos:end="240:35">k</name></expr>]</index></name> <operator pos:start="240:38" pos:end="240:38">=</operator> <name pos:start="240:40" pos:end="240:48"><name pos:start="240:40" pos:end="240:45">temp_B</name><index pos:start="240:46" pos:end="240:48">[<expr pos:start="240:47" pos:end="240:47"><name pos:start="240:47" pos:end="240:47">m</name></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt pos:start="241:21" pos:end="241:49"><expr pos:start="241:21" pos:end="241:48"><name pos:start="241:21" pos:end="241:21">m</name> <operator pos:start="241:23" pos:end="241:23">=</operator> <operator pos:start="241:25" pos:end="241:25">(</operator><name pos:start="241:26" pos:end="241:26">m</name> <operator pos:start="241:28" pos:end="241:28">+</operator> <literal type="number" pos:start="241:30" pos:end="241:30">1</literal><operator pos:start="241:31" pos:end="241:31">)</operator> <operator pos:start="241:33" pos:end="241:33">&amp;</operator> <operator pos:start="241:35" pos:end="241:35">(</operator><name pos:start="241:36" pos:end="241:43">MAX_TERM</name> <operator pos:start="241:45" pos:end="241:45">-</operator> <literal type="number" pos:start="241:47" pos:end="241:47">1</literal><operator pos:start="241:48" pos:end="241:48">)</operator></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt></block_content></block></for>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="245:7" pos:end="257:5">else if <condition pos:start="245:15" pos:end="245:30">(<expr pos:start="245:16" pos:end="245:29"><operator pos:start="245:16" pos:end="245:16">!</operator><name pos:start="245:17" pos:end="245:29"><name pos:start="245:17" pos:end="245:17">s</name><operator pos:start="245:18" pos:end="245:19">-&gt;</operator><name pos:start="245:20" pos:end="245:29">num_passes</name></name></expr>)</condition> <block pos:start="245:32" pos:end="257:5">{<block_content pos:start="246:9" pos:end="256:9">
        <if_stmt pos:start="246:9" pos:end="249:9"><if pos:start="246:9" pos:end="249:9">if <condition pos:start="246:12" pos:end="246:39">(<expr pos:start="246:13" pos:end="246:38"><name pos:start="246:13" pos:end="246:20"><name pos:start="246:13" pos:end="246:13">s</name><operator pos:start="246:14" pos:end="246:15">-&gt;</operator><name pos:start="246:16" pos:end="246:20">flags</name></name> <operator pos:start="246:22" pos:end="246:22">&amp;</operator> <name pos:start="246:24" pos:end="246:38">WV_JOINT_STEREO</name></expr>)</condition> <block pos:start="246:41" pos:end="249:9">{<block_content pos:start="247:13" pos:end="248:70">
            <for pos:start="247:13" pos:end="248:70">for <control pos:start="247:17" pos:end="247:44">(<init pos:start="247:18" pos:end="247:23"><expr pos:start="247:18" pos:end="247:22"><name pos:start="247:18" pos:end="247:18">i</name> <operator pos:start="247:20" pos:end="247:20">=</operator> <literal type="number" pos:start="247:22" pos:end="247:22">0</literal></expr>;</init> <condition pos:start="247:25" pos:end="247:39"><expr pos:start="247:25" pos:end="247:38"><name pos:start="247:25" pos:end="247:25">i</name> <operator pos:start="247:27" pos:end="247:27">&lt;</operator> <name pos:start="247:29" pos:end="247:38">nb_samples</name></expr>;</condition> <incr pos:start="247:41" pos:end="247:43"><expr pos:start="247:41" pos:end="247:43"><name pos:start="247:41" pos:end="247:41">i</name><operator pos:start="247:42" pos:end="247:43">++</operator></expr></incr>)</control><block type="pseudo" pos:start="248:17" pos:end="248:70"><block_content pos:start="248:17" pos:end="248:70">
                <expr_stmt pos:start="248:17" pos:end="248:70"><expr pos:start="248:17" pos:end="248:69"><name pos:start="248:17" pos:end="248:28"><name pos:start="248:17" pos:end="248:25">samples_r</name><index pos:start="248:26" pos:end="248:28">[<expr pos:start="248:27" pos:end="248:27"><name pos:start="248:27" pos:end="248:27">i</name></expr>]</index></name> <operator pos:start="248:30" pos:end="248:31">+=</operator> <operator pos:start="248:33" pos:end="248:33">(</operator><operator pos:start="248:34" pos:end="248:34">(</operator><name pos:start="248:35" pos:end="248:46"><name pos:start="248:35" pos:end="248:43">samples_l</name><index pos:start="248:44" pos:end="248:46">[<expr pos:start="248:45" pos:end="248:45"><name pos:start="248:45" pos:end="248:45">i</name></expr>]</index></name> <operator pos:start="248:48" pos:end="248:49">-=</operator> <name pos:start="248:51" pos:end="248:62"><name pos:start="248:51" pos:end="248:59">samples_r</name><index pos:start="248:60" pos:end="248:62">[<expr pos:start="248:61" pos:end="248:61"><name pos:start="248:61" pos:end="248:61">i</name></expr>]</index></name><operator pos:start="248:63" pos:end="248:63">)</operator> <operator pos:start="248:65" pos:end="248:66">&gt;&gt;</operator> <literal type="number" pos:start="248:68" pos:end="248:68">1</literal><operator pos:start="248:69" pos:end="248:69">)</operator></expr>;</expr_stmt></block_content></block></for>
        </block_content>}</block></if></if_stmt>
        <for pos:start="250:9" pos:end="256:9">for <control pos:start="250:13" pos:end="250:42">(<init pos:start="250:14" pos:end="250:19"><expr pos:start="250:14" pos:end="250:18"><name pos:start="250:14" pos:end="250:14">i</name> <operator pos:start="250:16" pos:end="250:16">=</operator> <literal type="number" pos:start="250:18" pos:end="250:18">0</literal></expr>;</init> <condition pos:start="250:21" pos:end="250:37"><expr pos:start="250:21" pos:end="250:36"><name pos:start="250:21" pos:end="250:21">i</name> <operator pos:start="250:23" pos:end="250:23">&lt;</operator> <name pos:start="250:25" pos:end="250:36"><name pos:start="250:25" pos:end="250:25">s</name><operator pos:start="250:26" pos:end="250:27">-&gt;</operator><name pos:start="250:28" pos:end="250:36">num_terms</name></name></expr>;</condition> <incr pos:start="250:39" pos:end="250:41"><expr pos:start="250:39" pos:end="250:41"><name pos:start="250:39" pos:end="250:39">i</name><operator pos:start="250:40" pos:end="250:41">++</operator></expr></incr>)</control> <block pos:start="250:44" pos:end="256:9">{<block_content pos:start="251:13" pos:end="255:78">
            <decl_stmt pos:start="251:13" pos:end="251:54"><decl pos:start="251:13" pos:end="251:53"><type pos:start="251:13" pos:end="251:27"><name pos:start="251:13" pos:end="251:25"><name pos:start="251:13" pos:end="251:18">struct</name> <name pos:start="251:20" pos:end="251:25">Decorr</name></name> <modifier pos:start="251:27" pos:end="251:27">*</modifier></type><name pos:start="251:28" pos:end="251:30">dpp</name> <init pos:start="251:32" pos:end="251:53">= <expr pos:start="251:34" pos:end="251:53"><operator pos:start="251:34" pos:end="251:34">&amp;</operator><name pos:start="251:35" pos:end="251:53"><name pos:start="251:35" pos:end="251:35">s</name><operator pos:start="251:36" pos:end="251:37">-&gt;</operator><name pos:start="251:38" pos:end="251:50">decorr_passes</name><index pos:start="251:51" pos:end="251:53">[<expr pos:start="251:52" pos:end="251:52"><name pos:start="251:52" pos:end="251:52">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if_stmt pos:start="252:13" pos:end="255:78"><if pos:start="252:13" pos:end="253:75">if <condition pos:start="252:16" pos:end="252:76">(<expr pos:start="252:17" pos:end="252:75"><operator pos:start="252:17" pos:end="252:17">(</operator><operator pos:start="252:18" pos:end="252:18">(</operator><name pos:start="252:19" pos:end="252:26"><name pos:start="252:19" pos:end="252:19">s</name><operator pos:start="252:20" pos:end="252:21">-&gt;</operator><name pos:start="252:22" pos:end="252:26">flags</name></name> <operator pos:start="252:28" pos:end="252:28">&amp;</operator> <name pos:start="252:30" pos:end="252:37">MAG_MASK</name><operator pos:start="252:38" pos:end="252:38">)</operator> <operator pos:start="252:40" pos:end="252:41">&gt;&gt;</operator> <name pos:start="252:43" pos:end="252:49">MAG_LSB</name><operator pos:start="252:50" pos:end="252:50">)</operator> <operator pos:start="252:52" pos:end="252:53">&gt;=</operator> <literal type="number" pos:start="252:55" pos:end="252:56">16</literal> <operator pos:start="252:58" pos:end="252:59">||</operator> <name pos:start="252:61" pos:end="252:70"><name pos:start="252:61" pos:end="252:63">dpp</name><operator pos:start="252:64" pos:end="252:65">-&gt;</operator><name pos:start="252:66" pos:end="252:70">delta</name></name> <operator pos:start="252:72" pos:end="252:73">!=</operator> <literal type="number" pos:start="252:75" pos:end="252:75">2</literal></expr>)</condition><block type="pseudo" pos:start="253:17" pos:end="253:75"><block_content pos:start="253:17" pos:end="253:75">
                <expr_stmt pos:start="253:17" pos:end="253:75"><expr pos:start="253:17" pos:end="253:74"><call pos:start="253:17" pos:end="253:74"><name pos:start="253:17" pos:end="253:35">decorr_stereo_pass2</name><argument_list pos:start="253:36" pos:end="253:74">(<argument pos:start="253:37" pos:end="253:39"><expr pos:start="253:37" pos:end="253:39"><name pos:start="253:37" pos:end="253:39">dpp</name></expr></argument>, <argument pos:start="253:42" pos:end="253:50"><expr pos:start="253:42" pos:end="253:50"><name pos:start="253:42" pos:end="253:50">samples_l</name></expr></argument>, <argument pos:start="253:53" pos:end="253:61"><expr pos:start="253:53" pos:end="253:61"><name pos:start="253:53" pos:end="253:61">samples_r</name></expr></argument>, <argument pos:start="253:64" pos:end="253:73"><expr pos:start="253:64" pos:end="253:73"><name pos:start="253:64" pos:end="253:73">nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else pos:start="254:13" pos:end="255:78">else<block type="pseudo" pos:start="255:17" pos:end="255:78"><block_content pos:start="255:17" pos:end="255:78">
                <expr_stmt pos:start="255:17" pos:end="255:78"><expr pos:start="255:17" pos:end="255:77"><call pos:start="255:17" pos:end="255:77"><name pos:start="255:17" pos:end="255:38">decorr_stereo_pass_id2</name><argument_list pos:start="255:39" pos:end="255:77">(<argument pos:start="255:40" pos:end="255:42"><expr pos:start="255:40" pos:end="255:42"><name pos:start="255:40" pos:end="255:42">dpp</name></expr></argument>, <argument pos:start="255:45" pos:end="255:53"><expr pos:start="255:45" pos:end="255:53"><name pos:start="255:45" pos:end="255:53">samples_l</name></expr></argument>, <argument pos:start="255:56" pos:end="255:64"><expr pos:start="255:56" pos:end="255:64"><name pos:start="255:56" pos:end="255:64">samples_r</name></expr></argument>, <argument pos:start="255:67" pos:end="255:76"><expr pos:start="255:67" pos:end="255:76"><name pos:start="255:67" pos:end="255:76">nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="258:5" pos:end="258:56"><expr pos:start="258:5" pos:end="258:55"><call pos:start="258:5" pos:end="258:55"><name pos:start="258:5" pos:end="258:24">bytestream2_put_byte</name><argument_list pos:start="258:25" pos:end="258:55">(<argument pos:start="258:26" pos:end="258:28"><expr pos:start="258:26" pos:end="258:28"><operator pos:start="258:26" pos:end="258:26">&amp;</operator><name pos:start="258:27" pos:end="258:28">pb</name></expr></argument>, <argument pos:start="258:31" pos:end="258:54"><expr pos:start="258:31" pos:end="258:54"><name pos:start="258:31" pos:end="258:40">WP_ID_DATA</name> <operator pos:start="258:42" pos:end="258:42">|</operator> <name pos:start="258:44" pos:end="258:54">WP_IDF_LONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="259:5" pos:end="259:76"><expr pos:start="259:5" pos:end="259:75"><call pos:start="259:5" pos:end="259:75"><name pos:start="259:5" pos:end="259:17">init_put_bits</name><argument_list pos:start="259:18" pos:end="259:75">(<argument pos:start="259:19" pos:end="259:24"><expr pos:start="259:19" pos:end="259:24"><operator pos:start="259:19" pos:end="259:19">&amp;</operator><name pos:start="259:20" pos:end="259:24"><name pos:start="259:20" pos:end="259:20">s</name><operator pos:start="259:21" pos:end="259:22">-&gt;</operator><name pos:start="259:23" pos:end="259:24">pb</name></name></expr></argument>, <argument pos:start="259:27" pos:end="259:39"><expr pos:start="259:27" pos:end="259:39"><name pos:start="259:27" pos:end="259:35"><name pos:start="259:27" pos:end="259:28">pb</name><operator pos:start="259:29" pos:end="259:29">.</operator><name pos:start="259:30" pos:end="259:35">buffer</name></name> <operator pos:start="259:37" pos:end="259:37">+</operator> <literal type="number" pos:start="259:39" pos:end="259:39">3</literal></expr></argument>, <argument pos:start="259:42" pos:end="259:74"><expr pos:start="259:42" pos:end="259:74"><call pos:start="259:42" pos:end="259:74"><name pos:start="259:42" pos:end="259:69">bytestream2_get_bytes_left_p</name><argument_list pos:start="259:70" pos:end="259:74">(<argument pos:start="259:71" pos:end="259:73"><expr pos:start="259:71" pos:end="259:73"><operator pos:start="259:71" pos:end="259:71">&amp;</operator><name pos:start="259:72" pos:end="259:73">pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="260:5" pos:end="268:5"><if pos:start="260:5" pos:end="263:5">if <condition pos:start="260:8" pos:end="260:32">(<expr pos:start="260:9" pos:end="260:31"><name pos:start="260:9" pos:end="260:16"><name pos:start="260:9" pos:end="260:9">s</name><operator pos:start="260:10" pos:end="260:11">-&gt;</operator><name pos:start="260:12" pos:end="260:16">flags</name></name> <operator pos:start="260:18" pos:end="260:18">&amp;</operator> <name pos:start="260:20" pos:end="260:31">WV_MONO_DATA</name></expr>)</condition> <block pos:start="260:34" pos:end="263:5">{<block_content pos:start="261:9" pos:end="262:67">
        <for pos:start="261:9" pos:end="262:67">for <control pos:start="261:13" pos:end="261:40">(<init pos:start="261:14" pos:end="261:19"><expr pos:start="261:14" pos:end="261:18"><name pos:start="261:14" pos:end="261:14">i</name> <operator pos:start="261:16" pos:end="261:16">=</operator> <literal type="number" pos:start="261:18" pos:end="261:18">0</literal></expr>;</init> <condition pos:start="261:21" pos:end="261:35"><expr pos:start="261:21" pos:end="261:34"><name pos:start="261:21" pos:end="261:21">i</name> <operator pos:start="261:23" pos:end="261:23">&lt;</operator> <name pos:start="261:25" pos:end="261:34">nb_samples</name></expr>;</condition> <incr pos:start="261:37" pos:end="261:39"><expr pos:start="261:37" pos:end="261:39"><name pos:start="261:37" pos:end="261:37">i</name><operator pos:start="261:38" pos:end="261:39">++</operator></expr></incr>)</control><block type="pseudo" pos:start="262:13" pos:end="262:67"><block_content pos:start="262:13" pos:end="262:67">
            <expr_stmt pos:start="262:13" pos:end="262:67"><expr pos:start="262:13" pos:end="262:66"><call pos:start="262:13" pos:end="262:66"><name pos:start="262:13" pos:end="262:33">wavpack_encode_sample</name><argument_list pos:start="262:34" pos:end="262:66">(<argument pos:start="262:35" pos:end="262:35"><expr pos:start="262:35" pos:end="262:35"><name pos:start="262:35" pos:end="262:35">s</name></expr></argument>, <argument pos:start="262:38" pos:end="262:47"><expr pos:start="262:38" pos:end="262:47"><operator pos:start="262:38" pos:end="262:38">&amp;</operator><name pos:start="262:39" pos:end="262:47"><name pos:start="262:39" pos:end="262:39">s</name><operator pos:start="262:40" pos:end="262:41">-&gt;</operator><name pos:start="262:42" pos:end="262:42">w</name><operator pos:start="262:43" pos:end="262:43">.</operator><name pos:start="262:44" pos:end="262:44">c</name><index pos:start="262:45" pos:end="262:47">[<expr pos:start="262:46" pos:end="262:46"><literal type="number" pos:start="262:46" pos:end="262:46">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="262:50" pos:end="262:65"><expr pos:start="262:50" pos:end="262:65"><name pos:start="262:50" pos:end="262:65"><name pos:start="262:50" pos:end="262:50">s</name><operator pos:start="262:51" pos:end="262:52">-&gt;</operator><name pos:start="262:53" pos:end="262:59">samples</name><index pos:start="262:60" pos:end="262:62">[<expr pos:start="262:61" pos:end="262:61"><literal type="number" pos:start="262:61" pos:end="262:61">0</literal></expr>]</index><index pos:start="262:63" pos:end="262:65">[<expr pos:start="262:64" pos:end="262:64"><name pos:start="262:64" pos:end="262:64">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    </block_content>}</block></if> <else pos:start="263:7" pos:end="268:5">else <block pos:start="263:12" pos:end="268:5">{<block_content pos:start="264:9" pos:end="267:9">
        <for pos:start="264:9" pos:end="267:9">for <control pos:start="264:13" pos:end="264:40">(<init pos:start="264:14" pos:end="264:19"><expr pos:start="264:14" pos:end="264:18"><name pos:start="264:14" pos:end="264:14">i</name> <operator pos:start="264:16" pos:end="264:16">=</operator> <literal type="number" pos:start="264:18" pos:end="264:18">0</literal></expr>;</init> <condition pos:start="264:21" pos:end="264:35"><expr pos:start="264:21" pos:end="264:34"><name pos:start="264:21" pos:end="264:21">i</name> <operator pos:start="264:23" pos:end="264:23">&lt;</operator> <name pos:start="264:25" pos:end="264:34">nb_samples</name></expr>;</condition> <incr pos:start="264:37" pos:end="264:39"><expr pos:start="264:37" pos:end="264:39"><name pos:start="264:37" pos:end="264:37">i</name><operator pos:start="264:38" pos:end="264:39">++</operator></expr></incr>)</control> <block pos:start="264:42" pos:end="267:9">{<block_content pos:start="265:13" pos:end="266:67">
            <expr_stmt pos:start="265:13" pos:end="265:67"><expr pos:start="265:13" pos:end="265:66"><call pos:start="265:13" pos:end="265:66"><name pos:start="265:13" pos:end="265:33">wavpack_encode_sample</name><argument_list pos:start="265:34" pos:end="265:66">(<argument pos:start="265:35" pos:end="265:35"><expr pos:start="265:35" pos:end="265:35"><name pos:start="265:35" pos:end="265:35">s</name></expr></argument>, <argument pos:start="265:38" pos:end="265:47"><expr pos:start="265:38" pos:end="265:47"><operator pos:start="265:38" pos:end="265:38">&amp;</operator><name pos:start="265:39" pos:end="265:47"><name pos:start="265:39" pos:end="265:39">s</name><operator pos:start="265:40" pos:end="265:41">-&gt;</operator><name pos:start="265:42" pos:end="265:42">w</name><operator pos:start="265:43" pos:end="265:43">.</operator><name pos:start="265:44" pos:end="265:44">c</name><index pos:start="265:45" pos:end="265:47">[<expr pos:start="265:46" pos:end="265:46"><literal type="number" pos:start="265:46" pos:end="265:46">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="265:50" pos:end="265:65"><expr pos:start="265:50" pos:end="265:65"><name pos:start="265:50" pos:end="265:65"><name pos:start="265:50" pos:end="265:50">s</name><operator pos:start="265:51" pos:end="265:52">-&gt;</operator><name pos:start="265:53" pos:end="265:59">samples</name><index pos:start="265:60" pos:end="265:62">[<expr pos:start="265:61" pos:end="265:61"><literal type="number" pos:start="265:61" pos:end="265:61">0</literal></expr>]</index><index pos:start="265:63" pos:end="265:65">[<expr pos:start="265:64" pos:end="265:64"><name pos:start="265:64" pos:end="265:64">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="266:13" pos:end="266:67"><expr pos:start="266:13" pos:end="266:66"><call pos:start="266:13" pos:end="266:66"><name pos:start="266:13" pos:end="266:33">wavpack_encode_sample</name><argument_list pos:start="266:34" pos:end="266:66">(<argument pos:start="266:35" pos:end="266:35"><expr pos:start="266:35" pos:end="266:35"><name pos:start="266:35" pos:end="266:35">s</name></expr></argument>, <argument pos:start="266:38" pos:end="266:47"><expr pos:start="266:38" pos:end="266:47"><operator pos:start="266:38" pos:end="266:38">&amp;</operator><name pos:start="266:39" pos:end="266:47"><name pos:start="266:39" pos:end="266:39">s</name><operator pos:start="266:40" pos:end="266:41">-&gt;</operator><name pos:start="266:42" pos:end="266:42">w</name><operator pos:start="266:43" pos:end="266:43">.</operator><name pos:start="266:44" pos:end="266:44">c</name><index pos:start="266:45" pos:end="266:47">[<expr pos:start="266:46" pos:end="266:46"><literal type="number" pos:start="266:46" pos:end="266:46">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="266:50" pos:end="266:65"><expr pos:start="266:50" pos:end="266:65"><name pos:start="266:50" pos:end="266:65"><name pos:start="266:50" pos:end="266:50">s</name><operator pos:start="266:51" pos:end="266:52">-&gt;</operator><name pos:start="266:53" pos:end="266:59">samples</name><index pos:start="266:60" pos:end="266:62">[<expr pos:start="266:61" pos:end="266:61"><literal type="number" pos:start="266:61" pos:end="266:61">1</literal></expr>]</index><index pos:start="266:63" pos:end="266:65">[<expr pos:start="266:64" pos:end="266:64"><name pos:start="266:64" pos:end="266:64">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></else></if_stmt>
    <expr_stmt pos:start="269:5" pos:end="269:20"><expr pos:start="269:5" pos:end="269:19"><call pos:start="269:5" pos:end="269:19"><name pos:start="269:5" pos:end="269:16">encode_flush</name><argument_list pos:start="269:17" pos:end="269:19">(<argument pos:start="269:18" pos:end="269:18"><expr pos:start="269:18" pos:end="269:18"><name pos:start="269:18" pos:end="269:18">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="270:5" pos:end="270:27"><expr pos:start="270:5" pos:end="270:26"><call pos:start="270:5" pos:end="270:26"><name pos:start="270:5" pos:end="270:18">flush_put_bits</name><argument_list pos:start="270:19" pos:end="270:26">(<argument pos:start="270:20" pos:end="270:25"><expr pos:start="270:20" pos:end="270:25"><operator pos:start="270:20" pos:end="270:20">&amp;</operator><name pos:start="270:21" pos:end="270:25"><name pos:start="270:21" pos:end="270:21">s</name><operator pos:start="270:22" pos:end="270:23">-&gt;</operator><name pos:start="270:24" pos:end="270:25">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="271:5" pos:end="271:44"><expr pos:start="271:5" pos:end="271:43"><name pos:start="271:5" pos:end="271:13">data_size</name> <operator pos:start="271:15" pos:end="271:15">=</operator> <call pos:start="271:17" pos:end="271:38"><name pos:start="271:17" pos:end="271:30">put_bits_count</name><argument_list pos:start="271:31" pos:end="271:38">(<argument pos:start="271:32" pos:end="271:37"><expr pos:start="271:32" pos:end="271:37"><operator pos:start="271:32" pos:end="271:32">&amp;</operator><name pos:start="271:33" pos:end="271:37"><name pos:start="271:33" pos:end="271:33">s</name><operator pos:start="271:34" pos:end="271:35">-&gt;</operator><name pos:start="271:36" pos:end="271:37">pb</name></name></expr></argument>)</argument_list></call> <operator pos:start="271:40" pos:end="271:41">&gt;&gt;</operator> <literal type="number" pos:start="271:43" pos:end="271:43">3</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="272:5" pos:end="272:52"><expr pos:start="272:5" pos:end="272:51"><call pos:start="272:5" pos:end="272:51"><name pos:start="272:5" pos:end="272:24">bytestream2_put_le24</name><argument_list pos:start="272:25" pos:end="272:51">(<argument pos:start="272:26" pos:end="272:28"><expr pos:start="272:26" pos:end="272:28"><operator pos:start="272:26" pos:end="272:26">&amp;</operator><name pos:start="272:27" pos:end="272:28">pb</name></expr></argument>, <argument pos:start="272:31" pos:end="272:50"><expr pos:start="272:31" pos:end="272:50"><operator pos:start="272:31" pos:end="272:31">(</operator><name pos:start="272:32" pos:end="272:40">data_size</name> <operator pos:start="272:42" pos:end="272:42">+</operator> <literal type="number" pos:start="272:44" pos:end="272:44">1</literal><operator pos:start="272:45" pos:end="272:45">)</operator> <operator pos:start="272:47" pos:end="272:48">&gt;&gt;</operator> <literal type="number" pos:start="272:50" pos:end="272:50">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="273:5" pos:end="273:39"><expr pos:start="273:5" pos:end="273:38"><call pos:start="273:5" pos:end="273:38"><name pos:start="273:5" pos:end="273:22">bytestream2_skip_p</name><argument_list pos:start="273:23" pos:end="273:38">(<argument pos:start="273:24" pos:end="273:26"><expr pos:start="273:24" pos:end="273:26"><operator pos:start="273:24" pos:end="273:24">&amp;</operator><name pos:start="273:25" pos:end="273:26">pb</name></expr></argument>, <argument pos:start="273:29" pos:end="273:37"><expr pos:start="273:29" pos:end="273:37"><name pos:start="273:29" pos:end="273:37">data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="274:5" pos:end="275:37"><if pos:start="274:5" pos:end="275:37">if <condition pos:start="274:8" pos:end="274:22">(<expr pos:start="274:9" pos:end="274:21"><name pos:start="274:9" pos:end="274:17">data_size</name> <operator pos:start="274:19" pos:end="274:19">&amp;</operator> <literal type="number" pos:start="274:21" pos:end="274:21">1</literal></expr>)</condition><block type="pseudo" pos:start="275:9" pos:end="275:37"><block_content pos:start="275:9" pos:end="275:37">
        <expr_stmt pos:start="275:9" pos:end="275:37"><expr pos:start="275:9" pos:end="275:36"><call pos:start="275:9" pos:end="275:36"><name pos:start="275:9" pos:end="275:28">bytestream2_put_byte</name><argument_list pos:start="275:29" pos:end="275:36">(<argument pos:start="275:30" pos:end="275:32"><expr pos:start="275:30" pos:end="275:32"><operator pos:start="275:30" pos:end="275:30">&amp;</operator><name pos:start="275:31" pos:end="275:32">pb</name></expr></argument>, <argument pos:start="275:35" pos:end="275:35"><expr pos:start="275:35" pos:end="275:35"><literal type="number" pos:start="275:35" pos:end="275:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="276:5" pos:end="290:5"><if pos:start="276:5" pos:end="290:5">if <condition pos:start="276:8" pos:end="276:18">(<expr pos:start="276:9" pos:end="276:17"><name pos:start="276:9" pos:end="276:17">got_extra</name></expr>)</condition> <block pos:start="276:20" pos:end="290:5">{<block_content pos:start="277:9" pos:end="289:41">
        <expr_stmt pos:start="277:9" pos:end="277:65"><expr pos:start="277:9" pos:end="277:64"><call pos:start="277:9" pos:end="277:64"><name pos:start="277:9" pos:end="277:28">bytestream2_put_byte</name><argument_list pos:start="277:29" pos:end="277:64">(<argument pos:start="277:30" pos:end="277:32"><expr pos:start="277:30" pos:end="277:32"><operator pos:start="277:30" pos:end="277:30">&amp;</operator><name pos:start="277:31" pos:end="277:32">pb</name></expr></argument>, <argument pos:start="277:35" pos:end="277:63"><expr pos:start="277:35" pos:end="277:63"><name pos:start="277:35" pos:end="277:49">WP_ID_EXTRABITS</name> <operator pos:start="277:51" pos:end="277:51">|</operator> <name pos:start="277:53" pos:end="277:63">WP_IDF_LONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="278:9" pos:end="278:80"><expr pos:start="278:9" pos:end="278:79"><call pos:start="278:9" pos:end="278:79"><name pos:start="278:9" pos:end="278:21">init_put_bits</name><argument_list pos:start="278:22" pos:end="278:79">(<argument pos:start="278:23" pos:end="278:28"><expr pos:start="278:23" pos:end="278:28"><operator pos:start="278:23" pos:end="278:23">&amp;</operator><name pos:start="278:24" pos:end="278:28"><name pos:start="278:24" pos:end="278:24">s</name><operator pos:start="278:25" pos:end="278:26">-&gt;</operator><name pos:start="278:27" pos:end="278:28">pb</name></name></expr></argument>, <argument pos:start="278:31" pos:end="278:43"><expr pos:start="278:31" pos:end="278:43"><name pos:start="278:31" pos:end="278:39"><name pos:start="278:31" pos:end="278:32">pb</name><operator pos:start="278:33" pos:end="278:33">.</operator><name pos:start="278:34" pos:end="278:39">buffer</name></name> <operator pos:start="278:41" pos:end="278:41">+</operator> <literal type="number" pos:start="278:43" pos:end="278:43">7</literal></expr></argument>, <argument pos:start="278:46" pos:end="278:78"><expr pos:start="278:46" pos:end="278:78"><call pos:start="278:46" pos:end="278:78"><name pos:start="278:46" pos:end="278:73">bytestream2_get_bytes_left_p</name><argument_list pos:start="278:74" pos:end="278:78">(<argument pos:start="278:75" pos:end="278:77"><expr pos:start="278:75" pos:end="278:77"><operator pos:start="278:75" pos:end="278:75">&amp;</operator><name pos:start="278:76" pos:end="278:77">pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="279:9" pos:end="282:60"><if pos:start="279:9" pos:end="280:60">if <condition pos:start="279:12" pos:end="279:37">(<expr pos:start="279:13" pos:end="279:36"><name pos:start="279:13" pos:end="279:20"><name pos:start="279:13" pos:end="279:13">s</name><operator pos:start="279:14" pos:end="279:15">-&gt;</operator><name pos:start="279:16" pos:end="279:20">flags</name></name> <operator pos:start="279:22" pos:end="279:22">&amp;</operator> <name pos:start="279:24" pos:end="279:36">WV_FLOAT_DATA</name></expr>)</condition><block type="pseudo" pos:start="280:13" pos:end="280:60"><block_content pos:start="280:13" pos:end="280:60">
            <expr_stmt pos:start="280:13" pos:end="280:60"><expr pos:start="280:13" pos:end="280:59"><call pos:start="280:13" pos:end="280:59"><name pos:start="280:13" pos:end="280:22">pack_float</name><argument_list pos:start="280:23" pos:end="280:59">(<argument pos:start="280:24" pos:end="280:24"><expr pos:start="280:24" pos:end="280:24"><name pos:start="280:24" pos:end="280:24">s</name></expr></argument>, <argument pos:start="280:27" pos:end="280:35"><expr pos:start="280:27" pos:end="280:35"><name pos:start="280:27" pos:end="280:35"><name pos:start="280:27" pos:end="280:27">s</name><operator pos:start="280:28" pos:end="280:29">-&gt;</operator><name pos:start="280:30" pos:end="280:35">orig_l</name></name></expr></argument>, <argument pos:start="280:38" pos:end="280:46"><expr pos:start="280:38" pos:end="280:46"><name pos:start="280:38" pos:end="280:46"><name pos:start="280:38" pos:end="280:38">s</name><operator pos:start="280:39" pos:end="280:40">-&gt;</operator><name pos:start="280:41" pos:end="280:46">orig_r</name></name></expr></argument>, <argument pos:start="280:49" pos:end="280:58"><expr pos:start="280:49" pos:end="280:58"><name pos:start="280:49" pos:end="280:58">nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else pos:start="281:9" pos:end="282:60">else<block type="pseudo" pos:start="282:13" pos:end="282:60"><block_content pos:start="282:13" pos:end="282:60">
            <expr_stmt pos:start="282:13" pos:end="282:60"><expr pos:start="282:13" pos:end="282:59"><call pos:start="282:13" pos:end="282:59"><name pos:start="282:13" pos:end="282:22">pack_int32</name><argument_list pos:start="282:23" pos:end="282:59">(<argument pos:start="282:24" pos:end="282:24"><expr pos:start="282:24" pos:end="282:24"><name pos:start="282:24" pos:end="282:24">s</name></expr></argument>, <argument pos:start="282:27" pos:end="282:35"><expr pos:start="282:27" pos:end="282:35"><name pos:start="282:27" pos:end="282:35"><name pos:start="282:27" pos:end="282:27">s</name><operator pos:start="282:28" pos:end="282:29">-&gt;</operator><name pos:start="282:30" pos:end="282:35">orig_l</name></name></expr></argument>, <argument pos:start="282:38" pos:end="282:46"><expr pos:start="282:38" pos:end="282:46"><name pos:start="282:38" pos:end="282:46"><name pos:start="282:38" pos:end="282:38">s</name><operator pos:start="282:39" pos:end="282:40">-&gt;</operator><name pos:start="282:41" pos:end="282:46">orig_r</name></name></expr></argument>, <argument pos:start="282:49" pos:end="282:58"><expr pos:start="282:49" pos:end="282:58"><name pos:start="282:49" pos:end="282:58">nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt pos:start="283:9" pos:end="283:31"><expr pos:start="283:9" pos:end="283:30"><call pos:start="283:9" pos:end="283:30"><name pos:start="283:9" pos:end="283:22">flush_put_bits</name><argument_list pos:start="283:23" pos:end="283:30">(<argument pos:start="283:24" pos:end="283:29"><expr pos:start="283:24" pos:end="283:29"><operator pos:start="283:24" pos:end="283:24">&amp;</operator><name pos:start="283:25" pos:end="283:29"><name pos:start="283:25" pos:end="283:25">s</name><operator pos:start="283:26" pos:end="283:27">-&gt;</operator><name pos:start="283:28" pos:end="283:29">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="284:9" pos:end="284:48"><expr pos:start="284:9" pos:end="284:47"><name pos:start="284:9" pos:end="284:17">data_size</name> <operator pos:start="284:19" pos:end="284:19">=</operator> <call pos:start="284:21" pos:end="284:42"><name pos:start="284:21" pos:end="284:34">put_bits_count</name><argument_list pos:start="284:35" pos:end="284:42">(<argument pos:start="284:36" pos:end="284:41"><expr pos:start="284:36" pos:end="284:41"><operator pos:start="284:36" pos:end="284:36">&amp;</operator><name pos:start="284:37" pos:end="284:41"><name pos:start="284:37" pos:end="284:37">s</name><operator pos:start="284:38" pos:end="284:39">-&gt;</operator><name pos:start="284:40" pos:end="284:41">pb</name></name></expr></argument>)</argument_list></call> <operator pos:start="284:44" pos:end="284:45">&gt;&gt;</operator> <literal type="number" pos:start="284:47" pos:end="284:47">3</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="285:9" pos:end="285:56"><expr pos:start="285:9" pos:end="285:55"><call pos:start="285:9" pos:end="285:55"><name pos:start="285:9" pos:end="285:28">bytestream2_put_le24</name><argument_list pos:start="285:29" pos:end="285:55">(<argument pos:start="285:30" pos:end="285:32"><expr pos:start="285:30" pos:end="285:32"><operator pos:start="285:30" pos:end="285:30">&amp;</operator><name pos:start="285:31" pos:end="285:32">pb</name></expr></argument>, <argument pos:start="285:35" pos:end="285:54"><expr pos:start="285:35" pos:end="285:54"><operator pos:start="285:35" pos:end="285:35">(</operator><name pos:start="285:36" pos:end="285:44">data_size</name> <operator pos:start="285:46" pos:end="285:46">+</operator> <literal type="number" pos:start="285:48" pos:end="285:48">5</literal><operator pos:start="285:49" pos:end="285:49">)</operator> <operator pos:start="285:51" pos:end="285:52">&gt;&gt;</operator> <literal type="number" pos:start="285:54" pos:end="285:54">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="286:9" pos:end="286:44"><expr pos:start="286:9" pos:end="286:43"><call pos:start="286:9" pos:end="286:43"><name pos:start="286:9" pos:end="286:28">bytestream2_put_le32</name><argument_list pos:start="286:29" pos:end="286:43">(<argument pos:start="286:30" pos:end="286:32"><expr pos:start="286:30" pos:end="286:32"><operator pos:start="286:30" pos:end="286:30">&amp;</operator><name pos:start="286:31" pos:end="286:32">pb</name></expr></argument>, <argument pos:start="286:35" pos:end="286:42"><expr pos:start="286:35" pos:end="286:42"><name pos:start="286:35" pos:end="286:42"><name pos:start="286:35" pos:end="286:35">s</name><operator pos:start="286:36" pos:end="286:37">-&gt;</operator><name pos:start="286:38" pos:end="286:42">crc_x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="287:9" pos:end="287:43"><expr pos:start="287:9" pos:end="287:42"><call pos:start="287:9" pos:end="287:42"><name pos:start="287:9" pos:end="287:26">bytestream2_skip_p</name><argument_list pos:start="287:27" pos:end="287:42">(<argument pos:start="287:28" pos:end="287:30"><expr pos:start="287:28" pos:end="287:30"><operator pos:start="287:28" pos:end="287:28">&amp;</operator><name pos:start="287:29" pos:end="287:30">pb</name></expr></argument>, <argument pos:start="287:33" pos:end="287:41"><expr pos:start="287:33" pos:end="287:41"><name pos:start="287:33" pos:end="287:41">data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="288:9" pos:end="289:41"><if pos:start="288:9" pos:end="289:41">if <condition pos:start="288:12" pos:end="288:26">(<expr pos:start="288:13" pos:end="288:25"><name pos:start="288:13" pos:end="288:21">data_size</name> <operator pos:start="288:23" pos:end="288:23">&amp;</operator> <literal type="number" pos:start="288:25" pos:end="288:25">1</literal></expr>)</condition><block type="pseudo" pos:start="289:13" pos:end="289:41"><block_content pos:start="289:13" pos:end="289:41">
            <expr_stmt pos:start="289:13" pos:end="289:41"><expr pos:start="289:13" pos:end="289:40"><call pos:start="289:13" pos:end="289:40"><name pos:start="289:13" pos:end="289:32">bytestream2_put_byte</name><argument_list pos:start="289:33" pos:end="289:40">(<argument pos:start="289:34" pos:end="289:36"><expr pos:start="289:34" pos:end="289:36"><operator pos:start="289:34" pos:end="289:34">&amp;</operator><name pos:start="289:35" pos:end="289:36">pb</name></expr></argument>, <argument pos:start="289:39" pos:end="289:39"><expr pos:start="289:39" pos:end="289:39"><literal type="number" pos:start="289:39" pos:end="289:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="291:5" pos:end="291:41"><expr pos:start="291:5" pos:end="291:40"><name pos:start="291:5" pos:end="291:14">block_size</name> <operator pos:start="291:16" pos:end="291:16">=</operator> <call pos:start="291:18" pos:end="291:40"><name pos:start="291:18" pos:end="291:35">bytestream2_tell_p</name><argument_list pos:start="291:36" pos:end="291:40">(<argument pos:start="291:37" pos:end="291:39"><expr pos:start="291:37" pos:end="291:39"><operator pos:start="291:37" pos:end="291:37">&amp;</operator><name pos:start="291:38" pos:end="291:39">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="292:5" pos:end="292:37"><expr pos:start="292:5" pos:end="292:36"><call pos:start="292:5" pos:end="292:36"><name pos:start="292:5" pos:end="292:11">AV_WL32</name><argument_list pos:start="292:12" pos:end="292:36">(<argument pos:start="292:13" pos:end="292:19"><expr pos:start="292:13" pos:end="292:19"><name pos:start="292:13" pos:end="292:15">out</name> <operator pos:start="292:17" pos:end="292:17">+</operator> <literal type="number" pos:start="292:19" pos:end="292:19">4</literal></expr></argument>, <argument pos:start="292:22" pos:end="292:35"><expr pos:start="292:22" pos:end="292:35"><name pos:start="292:22" pos:end="292:31">block_size</name> <operator pos:start="292:33" pos:end="292:33">-</operator> <literal type="number" pos:start="292:35" pos:end="292:35">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="293:5" pos:end="293:22">return <expr pos:start="293:12" pos:end="293:21"><name pos:start="293:12" pos:end="293:21">block_size</name></expr>;</return>
</block_content>}</block></function></unit>
