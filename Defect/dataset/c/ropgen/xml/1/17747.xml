<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17747.c" pos:tabs="8"><function pos:start="1:1" pos:end="174:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">gen_rot_rm_T1</name><parameter_list pos:start="1:26" pos:end="1:73">(<parameter pos:start="1:27" pos:end="1:41"><decl pos:start="1:27" pos:end="1:41"><type pos:start="1:27" pos:end="1:41"><name pos:start="1:27" pos:end="1:38">DisasContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:41">s</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:49"><decl pos:start="1:44" pos:end="1:49"><type pos:start="1:44" pos:end="1:49"><name pos:start="1:44" pos:end="1:46">int</name></type> <name pos:start="1:48" pos:end="1:49">ot</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:58"><decl pos:start="1:52" pos:end="1:58"><type pos:start="1:52" pos:end="1:58"><name pos:start="1:52" pos:end="1:54">int</name></type> <name pos:start="1:56" pos:end="1:58">op1</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:72"><decl pos:start="1:61" pos:end="1:72"><type pos:start="1:61" pos:end="1:72"><name pos:start="1:61" pos:end="1:63">int</name></type> <name pos:start="1:65" pos:end="1:72">is_right</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="174:1">{<block_content pos:start="5:5" pos:end="172:32">

    <decl_stmt pos:start="5:5" pos:end="5:54"><decl pos:start="5:5" pos:end="5:53"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:16">target_ulong</name></type> <name pos:start="5:18" pos:end="5:21">mask</name> <init pos:start="5:23" pos:end="5:53">= <expr pos:start="5:25" pos:end="5:53"><operator pos:start="5:25" pos:end="5:25">(</operator><ternary pos:start="5:26" pos:end="5:52"><condition pos:start="5:26" pos:end="5:40"><expr pos:start="5:26" pos:end="5:38"><name pos:start="5:26" pos:end="5:27">ot</name> <operator pos:start="5:29" pos:end="5:30">==</operator> <name pos:start="5:32" pos:end="5:38">OT_QUAD</name></expr> ?</condition><then pos:start="5:42" pos:end="5:45"> <expr pos:start="5:42" pos:end="5:45"><literal type="number" pos:start="5:42" pos:end="5:45">0x3f</literal></expr> </then><else pos:start="5:47" pos:end="5:52">: <expr pos:start="5:49" pos:end="5:52"><literal type="number" pos:start="5:49" pos:end="5:52">0x1f</literal></expr></else></ternary><operator pos:start="5:53" pos:end="5:53">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">TCGv_i32</name></type> <name pos:start="7:14" pos:end="7:15">t0</name></decl>, <decl pos:start="7:18" pos:end="7:19"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:18" pos:end="7:19">t1</name></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="11:14">/* load */</comment>

    <if_stmt pos:start="13:5" pos:end="21:5"><if pos:start="13:5" pos:end="17:5">if <condition pos:start="13:8" pos:end="13:23">(<expr pos:start="13:9" pos:end="13:22"><name pos:start="13:9" pos:end="13:11">op1</name> <operator pos:start="13:13" pos:end="13:14">==</operator> <name pos:start="13:16" pos:end="13:22">OR_TMP0</name></expr>)</condition> <block pos:start="13:25" pos:end="17:5">{<block_content pos:start="15:9" pos:end="15:43">

        <expr_stmt pos:start="15:9" pos:end="15:43"><expr pos:start="15:9" pos:end="15:42"><call pos:start="15:9" pos:end="15:42"><name pos:start="15:9" pos:end="15:23">gen_op_ld_T0_A0</name><argument_list pos:start="15:24" pos:end="15:42">(<argument pos:start="15:25" pos:end="15:41"><expr pos:start="15:25" pos:end="15:41"><name pos:start="15:25" pos:end="15:26">ot</name> <operator pos:start="15:28" pos:end="15:28">+</operator> <name pos:start="15:30" pos:end="15:41"><name pos:start="15:30" pos:end="15:30">s</name><operator pos:start="15:31" pos:end="15:32">-&gt;</operator><name pos:start="15:33" pos:end="15:41">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="17:7" pos:end="21:5">else <block pos:start="17:12" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:38">

        <expr_stmt pos:start="19:9" pos:end="19:38"><expr pos:start="19:9" pos:end="19:37"><call pos:start="19:9" pos:end="19:37"><name pos:start="19:9" pos:end="19:25">gen_op_mov_TN_reg</name><argument_list pos:start="19:26" pos:end="19:37">(<argument pos:start="19:27" pos:end="19:28"><expr pos:start="19:27" pos:end="19:28"><name pos:start="19:27" pos:end="19:28">ot</name></expr></argument>, <argument pos:start="19:31" pos:end="19:31"><expr pos:start="19:31" pos:end="19:31"><literal type="number" pos:start="19:31" pos:end="19:31">0</literal></expr></argument>, <argument pos:start="19:34" pos:end="19:36"><expr pos:start="19:34" pos:end="19:36"><name pos:start="19:34" pos:end="19:36">op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:46"><expr pos:start="25:5" pos:end="25:45"><call pos:start="25:5" pos:end="25:45"><name pos:start="25:5" pos:end="25:19">tcg_gen_andi_tl</name><argument_list pos:start="25:20" pos:end="25:45">(<argument pos:start="25:21" pos:end="25:28"><expr pos:start="25:21" pos:end="25:28"><name pos:start="25:21" pos:end="25:28"><name pos:start="25:21" pos:end="25:25">cpu_T</name><index pos:start="25:26" pos:end="25:28">[<expr pos:start="25:27" pos:end="25:27"><literal type="number" pos:start="25:27" pos:end="25:27">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="25:31" pos:end="25:38"><expr pos:start="25:31" pos:end="25:38"><name pos:start="25:31" pos:end="25:38"><name pos:start="25:31" pos:end="25:35">cpu_T</name><index pos:start="25:36" pos:end="25:38">[<expr pos:start="25:37" pos:end="25:37"><literal type="number" pos:start="25:37" pos:end="25:37">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="25:41" pos:end="25:44"><expr pos:start="25:41" pos:end="25:44"><name pos:start="25:41" pos:end="25:44">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="29:5" pos:end="89:5">switch <condition pos:start="29:12" pos:end="29:15">(<expr pos:start="29:13" pos:end="29:14"><name pos:start="29:13" pos:end="29:14">ot</name></expr>)</condition> <block pos:start="29:17" pos:end="89:5">{<block_content pos:start="31:5" pos:end="87:14">

    <case pos:start="31:5" pos:end="31:17">case <expr pos:start="31:10" pos:end="31:16"><name pos:start="31:10" pos:end="31:16">OT_BYTE</name></expr>:</case>

        <comment type="block" pos:start="33:9" pos:end="33:71">/* Replicate the 8-bit input so that a 32-bit rotate works.  */</comment>

        <expr_stmt pos:start="35:9" pos:end="35:45"><expr pos:start="35:9" pos:end="35:44"><call pos:start="35:9" pos:end="35:44"><name pos:start="35:9" pos:end="35:24">tcg_gen_ext8u_tl</name><argument_list pos:start="35:25" pos:end="35:44">(<argument pos:start="35:26" pos:end="35:33"><expr pos:start="35:26" pos:end="35:33"><name pos:start="35:26" pos:end="35:33"><name pos:start="35:26" pos:end="35:30">cpu_T</name><index pos:start="35:31" pos:end="35:33">[<expr pos:start="35:32" pos:end="35:32"><literal type="number" pos:start="35:32" pos:end="35:32">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="35:36" pos:end="35:43"><expr pos:start="35:36" pos:end="35:43"><name pos:start="35:36" pos:end="35:43"><name pos:start="35:36" pos:end="35:40">cpu_T</name><index pos:start="35:41" pos:end="35:43">[<expr pos:start="35:42" pos:end="35:42"><literal type="number" pos:start="35:42" pos:end="35:42">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:56"><expr pos:start="37:9" pos:end="37:55"><call pos:start="37:9" pos:end="37:55"><name pos:start="37:9" pos:end="37:23">tcg_gen_muli_tl</name><argument_list pos:start="37:24" pos:end="37:55">(<argument pos:start="37:25" pos:end="37:32"><expr pos:start="37:25" pos:end="37:32"><name pos:start="37:25" pos:end="37:32"><name pos:start="37:25" pos:end="37:29">cpu_T</name><index pos:start="37:30" pos:end="37:32">[<expr pos:start="37:31" pos:end="37:31"><literal type="number" pos:start="37:31" pos:end="37:31">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="37:35" pos:end="37:42"><expr pos:start="37:35" pos:end="37:42"><name pos:start="37:35" pos:end="37:42"><name pos:start="37:35" pos:end="37:39">cpu_T</name><index pos:start="37:40" pos:end="37:42">[<expr pos:start="37:41" pos:end="37:41"><literal type="number" pos:start="37:41" pos:end="37:41">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="37:45" pos:end="37:54"><expr pos:start="37:45" pos:end="37:54"><literal type="number" pos:start="37:45" pos:end="37:54">0x01010101</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="39:9" pos:end="39:21">goto <name pos:start="39:14" pos:end="39:20">do_long</name>;</goto>

    <case pos:start="41:5" pos:end="41:17">case <expr pos:start="41:10" pos:end="41:16"><name pos:start="41:10" pos:end="41:16">OT_WORD</name></expr>:</case>

        <comment type="block" pos:start="43:9" pos:end="43:72">/* Replicate the 16-bit input so that a 32-bit rotate works.  */</comment>

        <expr_stmt pos:start="45:9" pos:end="45:65"><expr pos:start="45:9" pos:end="45:64"><call pos:start="45:9" pos:end="45:64"><name pos:start="45:9" pos:end="45:26">tcg_gen_deposit_tl</name><argument_list pos:start="45:27" pos:end="45:64">(<argument pos:start="45:28" pos:end="45:35"><expr pos:start="45:28" pos:end="45:35"><name pos:start="45:28" pos:end="45:35"><name pos:start="45:28" pos:end="45:32">cpu_T</name><index pos:start="45:33" pos:end="45:35">[<expr pos:start="45:34" pos:end="45:34"><literal type="number" pos:start="45:34" pos:end="45:34">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="45:38" pos:end="45:45"><expr pos:start="45:38" pos:end="45:45"><name pos:start="45:38" pos:end="45:45"><name pos:start="45:38" pos:end="45:42">cpu_T</name><index pos:start="45:43" pos:end="45:45">[<expr pos:start="45:44" pos:end="45:44"><literal type="number" pos:start="45:44" pos:end="45:44">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="45:48" pos:end="45:55"><expr pos:start="45:48" pos:end="45:55"><name pos:start="45:48" pos:end="45:55"><name pos:start="45:48" pos:end="45:52">cpu_T</name><index pos:start="45:53" pos:end="45:55">[<expr pos:start="45:54" pos:end="45:54"><literal type="number" pos:start="45:54" pos:end="45:54">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="45:58" pos:end="45:59"><expr pos:start="45:58" pos:end="45:59"><literal type="number" pos:start="45:58" pos:end="45:59">16</literal></expr></argument>, <argument pos:start="45:62" pos:end="45:63"><expr pos:start="45:62" pos:end="45:63"><literal type="number" pos:start="45:62" pos:end="45:63">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="47:9" pos:end="47:21">goto <name pos:start="47:14" pos:end="47:20">do_long</name>;</goto>

    <label pos:start="49:5" pos:end="52:0"><name pos:start="49:5" pos:end="49:11">do_long</name>:</label>

<cpp:ifdef pos:start="51:1" pos:end="51:20">#<cpp:directive pos:start="51:2" pos:end="51:6">ifdef</cpp:directive> <name pos:start="51:8" pos:end="51:20">TARGET_X86_64</name></cpp:ifdef>

    <case pos:start="53:5" pos:end="53:17">case <expr pos:start="53:10" pos:end="53:16"><name pos:start="53:10" pos:end="53:16">OT_LONG</name></expr>:</case>

        <expr_stmt pos:start="55:9" pos:end="55:53"><expr pos:start="55:9" pos:end="55:52"><call pos:start="55:9" pos:end="55:52"><name pos:start="55:9" pos:end="55:28">tcg_gen_trunc_tl_i32</name><argument_list pos:start="55:29" pos:end="55:52">(<argument pos:start="55:30" pos:end="55:41"><expr pos:start="55:30" pos:end="55:41"><name pos:start="55:30" pos:end="55:41">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="55:44" pos:end="55:51"><expr pos:start="55:44" pos:end="55:51"><name pos:start="55:44" pos:end="55:51"><name pos:start="55:44" pos:end="55:48">cpu_T</name><index pos:start="55:49" pos:end="55:51">[<expr pos:start="55:50" pos:end="55:50"><literal type="number" pos:start="55:50" pos:end="55:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:53"><expr pos:start="57:9" pos:end="57:52"><call pos:start="57:9" pos:end="57:52"><name pos:start="57:9" pos:end="57:28">tcg_gen_trunc_tl_i32</name><argument_list pos:start="57:29" pos:end="57:52">(<argument pos:start="57:30" pos:end="57:41"><expr pos:start="57:30" pos:end="57:41"><name pos:start="57:30" pos:end="57:41">cpu_tmp3_i32</name></expr></argument>, <argument pos:start="57:44" pos:end="57:51"><expr pos:start="57:44" pos:end="57:51"><name pos:start="57:44" pos:end="57:51"><name pos:start="57:44" pos:end="57:48">cpu_T</name><index pos:start="57:49" pos:end="57:51">[<expr pos:start="57:50" pos:end="57:50"><literal type="number" pos:start="57:50" pos:end="57:50">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="59:9" pos:end="67:9"><if pos:start="59:9" pos:end="63:9">if <condition pos:start="59:12" pos:end="59:21">(<expr pos:start="59:13" pos:end="59:20"><name pos:start="59:13" pos:end="59:20">is_right</name></expr>)</condition> <block pos:start="59:23" pos:end="63:9">{<block_content pos:start="61:13" pos:end="61:71">

            <expr_stmt pos:start="61:13" pos:end="61:71"><expr pos:start="61:13" pos:end="61:70"><call pos:start="61:13" pos:end="61:70"><name pos:start="61:13" pos:end="61:28">tcg_gen_rotr_i32</name><argument_list pos:start="61:29" pos:end="61:70">(<argument pos:start="61:30" pos:end="61:41"><expr pos:start="61:30" pos:end="61:41"><name pos:start="61:30" pos:end="61:41">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="61:44" pos:end="61:55"><expr pos:start="61:44" pos:end="61:55"><name pos:start="61:44" pos:end="61:55">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="61:58" pos:end="61:69"><expr pos:start="61:58" pos:end="61:69"><name pos:start="61:58" pos:end="61:69">cpu_tmp3_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="63:11" pos:end="67:9">else <block pos:start="63:16" pos:end="67:9">{<block_content pos:start="65:13" pos:end="65:71">

            <expr_stmt pos:start="65:13" pos:end="65:71"><expr pos:start="65:13" pos:end="65:70"><call pos:start="65:13" pos:end="65:70"><name pos:start="65:13" pos:end="65:28">tcg_gen_rotl_i32</name><argument_list pos:start="65:29" pos:end="65:70">(<argument pos:start="65:30" pos:end="65:41"><expr pos:start="65:30" pos:end="65:41"><name pos:start="65:30" pos:end="65:41">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="65:44" pos:end="65:55"><expr pos:start="65:44" pos:end="65:55"><name pos:start="65:44" pos:end="65:55">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="65:58" pos:end="65:69"><expr pos:start="65:58" pos:end="65:69"><name pos:start="65:58" pos:end="65:69">cpu_tmp3_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:52"><expr pos:start="69:9" pos:end="69:51"><call pos:start="69:9" pos:end="69:51"><name pos:start="69:9" pos:end="69:27">tcg_gen_extu_i32_tl</name><argument_list pos:start="69:28" pos:end="69:51">(<argument pos:start="69:29" pos:end="69:36"><expr pos:start="69:29" pos:end="69:36"><name pos:start="69:29" pos:end="69:36"><name pos:start="69:29" pos:end="69:33">cpu_T</name><index pos:start="69:34" pos:end="69:36">[<expr pos:start="69:35" pos:end="69:35"><literal type="number" pos:start="69:35" pos:end="69:35">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="69:39" pos:end="69:50"><expr pos:start="69:39" pos:end="69:50"><name pos:start="69:39" pos:end="69:50">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="71:9" pos:end="74:0">break;</break>

<cpp:endif pos:start="73:1" pos:end="73:6">#<cpp:directive pos:start="73:2" pos:end="73:6">endif</cpp:directive></cpp:endif>

    <default pos:start="75:5" pos:end="75:12">default:</default>

        <if_stmt pos:start="77:9" pos:end="85:9"><if pos:start="77:9" pos:end="81:9">if <condition pos:start="77:12" pos:end="77:21">(<expr pos:start="77:13" pos:end="77:20"><name pos:start="77:13" pos:end="77:20">is_right</name></expr>)</condition> <block pos:start="77:23" pos:end="81:9">{<block_content pos:start="79:13" pos:end="79:58">

            <expr_stmt pos:start="79:13" pos:end="79:58"><expr pos:start="79:13" pos:end="79:57"><call pos:start="79:13" pos:end="79:57"><name pos:start="79:13" pos:end="79:27">tcg_gen_rotr_tl</name><argument_list pos:start="79:28" pos:end="79:57">(<argument pos:start="79:29" pos:end="79:36"><expr pos:start="79:29" pos:end="79:36"><name pos:start="79:29" pos:end="79:36"><name pos:start="79:29" pos:end="79:33">cpu_T</name><index pos:start="79:34" pos:end="79:36">[<expr pos:start="79:35" pos:end="79:35"><literal type="number" pos:start="79:35" pos:end="79:35">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="79:39" pos:end="79:46"><expr pos:start="79:39" pos:end="79:46"><name pos:start="79:39" pos:end="79:46"><name pos:start="79:39" pos:end="79:43">cpu_T</name><index pos:start="79:44" pos:end="79:46">[<expr pos:start="79:45" pos:end="79:45"><literal type="number" pos:start="79:45" pos:end="79:45">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="79:49" pos:end="79:56"><expr pos:start="79:49" pos:end="79:56"><name pos:start="79:49" pos:end="79:56"><name pos:start="79:49" pos:end="79:53">cpu_T</name><index pos:start="79:54" pos:end="79:56">[<expr pos:start="79:55" pos:end="79:55"><literal type="number" pos:start="79:55" pos:end="79:55">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="81:11" pos:end="85:9">else <block pos:start="81:16" pos:end="85:9">{<block_content pos:start="83:13" pos:end="83:58">

            <expr_stmt pos:start="83:13" pos:end="83:58"><expr pos:start="83:13" pos:end="83:57"><call pos:start="83:13" pos:end="83:57"><name pos:start="83:13" pos:end="83:27">tcg_gen_rotl_tl</name><argument_list pos:start="83:28" pos:end="83:57">(<argument pos:start="83:29" pos:end="83:36"><expr pos:start="83:29" pos:end="83:36"><name pos:start="83:29" pos:end="83:36"><name pos:start="83:29" pos:end="83:33">cpu_T</name><index pos:start="83:34" pos:end="83:36">[<expr pos:start="83:35" pos:end="83:35"><literal type="number" pos:start="83:35" pos:end="83:35">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="83:39" pos:end="83:46"><expr pos:start="83:39" pos:end="83:46"><name pos:start="83:39" pos:end="83:46"><name pos:start="83:39" pos:end="83:43">cpu_T</name><index pos:start="83:44" pos:end="83:46">[<expr pos:start="83:45" pos:end="83:45"><literal type="number" pos:start="83:45" pos:end="83:45">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="83:49" pos:end="83:56"><expr pos:start="83:49" pos:end="83:56"><name pos:start="83:49" pos:end="83:56"><name pos:start="83:49" pos:end="83:53">cpu_T</name><index pos:start="83:54" pos:end="83:56">[<expr pos:start="83:55" pos:end="83:55"><literal type="number" pos:start="83:55" pos:end="83:55">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="87:9" pos:end="87:14">break;</break>

    </block_content>}</block></switch>



    <comment type="block" pos:start="93:5" pos:end="93:15">/* store */</comment>

    <if_stmt pos:start="95:5" pos:end="103:5"><if pos:start="95:5" pos:end="99:5">if <condition pos:start="95:8" pos:end="95:23">(<expr pos:start="95:9" pos:end="95:22"><name pos:start="95:9" pos:end="95:11">op1</name> <operator pos:start="95:13" pos:end="95:14">==</operator> <name pos:start="95:16" pos:end="95:22">OR_TMP0</name></expr>)</condition> <block pos:start="95:25" pos:end="99:5">{<block_content pos:start="97:9" pos:end="97:43">

        <expr_stmt pos:start="97:9" pos:end="97:43"><expr pos:start="97:9" pos:end="97:42"><call pos:start="97:9" pos:end="97:42"><name pos:start="97:9" pos:end="97:23">gen_op_st_T0_A0</name><argument_list pos:start="97:24" pos:end="97:42">(<argument pos:start="97:25" pos:end="97:41"><expr pos:start="97:25" pos:end="97:41"><name pos:start="97:25" pos:end="97:26">ot</name> <operator pos:start="97:28" pos:end="97:28">+</operator> <name pos:start="97:30" pos:end="97:41"><name pos:start="97:30" pos:end="97:30">s</name><operator pos:start="97:31" pos:end="97:32">-&gt;</operator><name pos:start="97:33" pos:end="97:41">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="99:7" pos:end="103:5">else <block pos:start="99:12" pos:end="103:5">{<block_content pos:start="101:9" pos:end="101:35">

        <expr_stmt pos:start="101:9" pos:end="101:35"><expr pos:start="101:9" pos:end="101:34"><call pos:start="101:9" pos:end="101:34"><name pos:start="101:9" pos:end="101:25">gen_op_mov_reg_T0</name><argument_list pos:start="101:26" pos:end="101:34">(<argument pos:start="101:27" pos:end="101:28"><expr pos:start="101:27" pos:end="101:28"><name pos:start="101:27" pos:end="101:28">ot</name></expr></argument>, <argument pos:start="101:31" pos:end="101:33"><expr pos:start="101:31" pos:end="101:33"><name pos:start="101:31" pos:end="101:33">op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="107:5" pos:end="107:53">/* We'll need the flags computed into CC_SRC.  */</comment>

    <expr_stmt pos:start="109:5" pos:end="109:26"><expr pos:start="109:5" pos:end="109:25"><call pos:start="109:5" pos:end="109:25"><name pos:start="109:5" pos:end="109:22">gen_compute_eflags</name><argument_list pos:start="109:23" pos:end="109:25">(<argument pos:start="109:24" pos:end="109:24"><expr pos:start="109:24" pos:end="109:24"><name pos:start="109:24" pos:end="109:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="113:5" pos:end="119:26">/* The value that was "rotated out" is now present at the other end

       of the word.  Compute C into CC_DST and O into CC_SRC2.  Note that

       since we've computed the flags into CC_SRC, these variables are

       currently dead.  */</comment>

    <if_stmt pos:start="121:5" pos:end="134:5"><if pos:start="121:5" pos:end="128:5">if <condition pos:start="121:8" pos:end="121:17">(<expr pos:start="121:9" pos:end="121:16"><name pos:start="121:9" pos:end="121:16">is_right</name></expr>)</condition> <block pos:start="121:19" pos:end="128:5">{<block_content pos:start="123:9" pos:end="125:52">

        <expr_stmt pos:start="123:9" pos:end="123:57"><expr pos:start="123:9" pos:end="123:56"><call pos:start="123:9" pos:end="123:56"><name pos:start="123:9" pos:end="123:23">tcg_gen_shri_tl</name><argument_list pos:start="123:24" pos:end="123:56">(<argument pos:start="123:25" pos:end="123:35"><expr pos:start="123:25" pos:end="123:35"><name pos:start="123:25" pos:end="123:35">cpu_cc_src2</name></expr></argument>, <argument pos:start="123:38" pos:end="123:45"><expr pos:start="123:38" pos:end="123:45"><name pos:start="123:38" pos:end="123:45"><name pos:start="123:38" pos:end="123:42">cpu_T</name><index pos:start="123:43" pos:end="123:45">[<expr pos:start="123:44" pos:end="123:44"><literal type="number" pos:start="123:44" pos:end="123:44">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="123:48" pos:end="123:55"><expr pos:start="123:48" pos:end="123:55"><name pos:start="123:48" pos:end="123:51">mask</name> <operator pos:start="123:53" pos:end="123:53">-</operator> <literal type="number" pos:start="123:55" pos:end="123:55">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:52"><expr pos:start="125:9" pos:end="125:51"><call pos:start="125:9" pos:end="125:51"><name pos:start="125:9" pos:end="125:23">tcg_gen_shri_tl</name><argument_list pos:start="125:24" pos:end="125:51">(<argument pos:start="125:25" pos:end="125:34"><expr pos:start="125:25" pos:end="125:34"><name pos:start="125:25" pos:end="125:34">cpu_cc_dst</name></expr></argument>, <argument pos:start="125:37" pos:end="125:44"><expr pos:start="125:37" pos:end="125:44"><name pos:start="125:37" pos:end="125:44"><name pos:start="125:37" pos:end="125:41">cpu_T</name><index pos:start="125:42" pos:end="125:44">[<expr pos:start="125:43" pos:end="125:43"><literal type="number" pos:start="125:43" pos:end="125:43">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="125:47" pos:end="125:50"><expr pos:start="125:47" pos:end="125:50"><name pos:start="125:47" pos:end="125:50">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    </block_content>}</block></if> <else pos:start="128:7" pos:end="134:5">else <block pos:start="128:12" pos:end="134:5">{<block_content pos:start="130:9" pos:end="132:49">

        <expr_stmt pos:start="130:9" pos:end="130:53"><expr pos:start="130:9" pos:end="130:52"><call pos:start="130:9" pos:end="130:52"><name pos:start="130:9" pos:end="130:23">tcg_gen_shri_tl</name><argument_list pos:start="130:24" pos:end="130:52">(<argument pos:start="130:25" pos:end="130:35"><expr pos:start="130:25" pos:end="130:35"><name pos:start="130:25" pos:end="130:35">cpu_cc_src2</name></expr></argument>, <argument pos:start="130:38" pos:end="130:45"><expr pos:start="130:38" pos:end="130:45"><name pos:start="130:38" pos:end="130:45"><name pos:start="130:38" pos:end="130:42">cpu_T</name><index pos:start="130:43" pos:end="130:45">[<expr pos:start="130:44" pos:end="130:44"><literal type="number" pos:start="130:44" pos:end="130:44">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="130:48" pos:end="130:51"><expr pos:start="130:48" pos:end="130:51"><name pos:start="130:48" pos:end="130:51">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="132:9" pos:end="132:49"><expr pos:start="132:9" pos:end="132:48"><call pos:start="132:9" pos:end="132:48"><name pos:start="132:9" pos:end="132:23">tcg_gen_andi_tl</name><argument_list pos:start="132:24" pos:end="132:48">(<argument pos:start="132:25" pos:end="132:34"><expr pos:start="132:25" pos:end="132:34"><name pos:start="132:25" pos:end="132:34">cpu_cc_dst</name></expr></argument>, <argument pos:start="132:37" pos:end="132:44"><expr pos:start="132:37" pos:end="132:44"><name pos:start="132:37" pos:end="132:44"><name pos:start="132:37" pos:end="132:41">cpu_T</name><index pos:start="132:42" pos:end="132:44">[<expr pos:start="132:43" pos:end="132:43"><literal type="number" pos:start="132:43" pos:end="132:43">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="132:47" pos:end="132:47"><expr pos:start="132:47" pos:end="132:47"><literal type="number" pos:start="132:47" pos:end="132:47">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="136:5" pos:end="136:49"><expr pos:start="136:5" pos:end="136:48"><call pos:start="136:5" pos:end="136:48"><name pos:start="136:5" pos:end="136:19">tcg_gen_andi_tl</name><argument_list pos:start="136:20" pos:end="136:48">(<argument pos:start="136:21" pos:end="136:31"><expr pos:start="136:21" pos:end="136:31"><name pos:start="136:21" pos:end="136:31">cpu_cc_src2</name></expr></argument>, <argument pos:start="136:34" pos:end="136:44"><expr pos:start="136:34" pos:end="136:44"><name pos:start="136:34" pos:end="136:44">cpu_cc_src2</name></expr></argument>, <argument pos:start="136:47" pos:end="136:47"><expr pos:start="136:47" pos:end="136:47"><literal type="number" pos:start="136:47" pos:end="136:47">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="138:5" pos:end="138:57"><expr pos:start="138:5" pos:end="138:56"><call pos:start="138:5" pos:end="138:56"><name pos:start="138:5" pos:end="138:18">tcg_gen_xor_tl</name><argument_list pos:start="138:19" pos:end="138:56">(<argument pos:start="138:20" pos:end="138:30"><expr pos:start="138:20" pos:end="138:30"><name pos:start="138:20" pos:end="138:30">cpu_cc_src2</name></expr></argument>, <argument pos:start="138:33" pos:end="138:43"><expr pos:start="138:33" pos:end="138:43"><name pos:start="138:33" pos:end="138:43">cpu_cc_src2</name></expr></argument>, <argument pos:start="138:46" pos:end="138:55"><expr pos:start="138:46" pos:end="138:55"><name pos:start="138:46" pos:end="138:55">cpu_cc_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="142:5" pos:end="148:40">/* Now conditionally store the new CC_OP value.  If the shift count

       is 0 we keep the CC_OP_EFLAGS setting so that only CC_SRC is live.

       Otherwise reuse CC_OP_ADCOX which have the C and O flags split out

       exactly as we computed above.  */</comment>

    <expr_stmt pos:start="150:5" pos:end="150:26"><expr pos:start="150:5" pos:end="150:25"><name pos:start="150:5" pos:end="150:6">t0</name> <operator pos:start="150:8" pos:end="150:8">=</operator> <call pos:start="150:10" pos:end="150:25"><name pos:start="150:10" pos:end="150:22">tcg_const_i32</name><argument_list pos:start="150:23" pos:end="150:25">(<argument pos:start="150:24" pos:end="150:24"><expr pos:start="150:24" pos:end="150:24"><literal type="number" pos:start="150:24" pos:end="150:24">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="152:5" pos:end="152:28"><expr pos:start="152:5" pos:end="152:27"><name pos:start="152:5" pos:end="152:6">t1</name> <operator pos:start="152:8" pos:end="152:8">=</operator> <call pos:start="152:10" pos:end="152:27"><name pos:start="152:10" pos:end="152:25">tcg_temp_new_i32</name><argument_list pos:start="152:26" pos:end="152:27">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="154:5" pos:end="154:39"><expr pos:start="154:5" pos:end="154:38"><call pos:start="154:5" pos:end="154:38"><name pos:start="154:5" pos:end="154:24">tcg_gen_trunc_tl_i32</name><argument_list pos:start="154:25" pos:end="154:38">(<argument pos:start="154:26" pos:end="154:27"><expr pos:start="154:26" pos:end="154:27"><name pos:start="154:26" pos:end="154:27">t1</name></expr></argument>, <argument pos:start="154:30" pos:end="154:37"><expr pos:start="154:30" pos:end="154:37"><name pos:start="154:30" pos:end="154:37"><name pos:start="154:30" pos:end="154:34">cpu_T</name><index pos:start="154:35" pos:end="154:37">[<expr pos:start="154:36" pos:end="154:36"><literal type="number" pos:start="154:36" pos:end="154:36">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="156:5" pos:end="156:48"><expr pos:start="156:5" pos:end="156:47"><call pos:start="156:5" pos:end="156:47"><name pos:start="156:5" pos:end="156:20">tcg_gen_movi_i32</name><argument_list pos:start="156:21" pos:end="156:47">(<argument pos:start="156:22" pos:end="156:33"><expr pos:start="156:22" pos:end="156:33"><name pos:start="156:22" pos:end="156:33">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="156:36" pos:end="156:46"><expr pos:start="156:36" pos:end="156:46"><name pos:start="156:36" pos:end="156:46">CC_OP_ADCOX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

    <expr_stmt pos:start="158:5" pos:end="158:49"><expr pos:start="158:5" pos:end="158:48"><call pos:start="158:5" pos:end="158:48"><name pos:start="158:5" pos:end="158:20">tcg_gen_movi_i32</name><argument_list pos:start="158:21" pos:end="158:48">(<argument pos:start="158:22" pos:end="158:33"><expr pos:start="158:22" pos:end="158:33"><name pos:start="158:22" pos:end="158:33">cpu_tmp3_i32</name></expr></argument>, <argument pos:start="158:36" pos:end="158:47"><expr pos:start="158:36" pos:end="158:47"><name pos:start="158:36" pos:end="158:47">CC_OP_EFLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="160:5" pos:end="162:52"><expr pos:start="160:5" pos:end="162:51"><call pos:start="160:5" pos:end="162:51"><name pos:start="160:5" pos:end="160:23">tcg_gen_movcond_i32</name><argument_list pos:start="160:24" pos:end="162:51">(<argument pos:start="160:25" pos:end="160:35"><expr pos:start="160:25" pos:end="160:35"><name pos:start="160:25" pos:end="160:35">TCG_COND_NE</name></expr></argument>, <argument pos:start="160:38" pos:end="160:46"><expr pos:start="160:38" pos:end="160:46"><name pos:start="160:38" pos:end="160:46">cpu_cc_op</name></expr></argument>, <argument pos:start="160:49" pos:end="160:50"><expr pos:start="160:49" pos:end="160:50"><name pos:start="160:49" pos:end="160:50">t1</name></expr></argument>, <argument pos:start="160:53" pos:end="160:54"><expr pos:start="160:53" pos:end="160:54"><name pos:start="160:53" pos:end="160:54">t0</name></expr></argument>,

                        <argument pos:start="162:25" pos:end="162:36"><expr pos:start="162:25" pos:end="162:36"><name pos:start="162:25" pos:end="162:36">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="162:39" pos:end="162:50"><expr pos:start="162:39" pos:end="162:50"><name pos:start="162:39" pos:end="162:50">cpu_tmp3_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="164:5" pos:end="164:26"><expr pos:start="164:5" pos:end="164:25"><call pos:start="164:5" pos:end="164:25"><name pos:start="164:5" pos:end="164:21">tcg_temp_free_i32</name><argument_list pos:start="164:22" pos:end="164:25">(<argument pos:start="164:23" pos:end="164:24"><expr pos:start="164:23" pos:end="164:24"><name pos:start="164:23" pos:end="164:24">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="166:5" pos:end="166:26"><expr pos:start="166:5" pos:end="166:25"><call pos:start="166:5" pos:end="166:25"><name pos:start="166:5" pos:end="166:21">tcg_temp_free_i32</name><argument_list pos:start="166:22" pos:end="166:25">(<argument pos:start="166:23" pos:end="166:24"><expr pos:start="166:23" pos:end="166:24"><name pos:start="166:23" pos:end="166:24">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="170:5" pos:end="170:52">/* The CC_OP value is no longer predictable.  */</comment> 

    <expr_stmt pos:start="172:5" pos:end="172:32"><expr pos:start="172:5" pos:end="172:31"><call pos:start="172:5" pos:end="172:31"><name pos:start="172:5" pos:end="172:13">set_cc_op</name><argument_list pos:start="172:14" pos:end="172:31">(<argument pos:start="172:15" pos:end="172:15"><expr pos:start="172:15" pos:end="172:15"><name pos:start="172:15" pos:end="172:15">s</name></expr></argument>, <argument pos:start="172:18" pos:end="172:30"><expr pos:start="172:18" pos:end="172:30"><name pos:start="172:18" pos:end="172:30">CC_OP_DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function></unit>
