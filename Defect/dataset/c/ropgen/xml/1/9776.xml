<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9776.c" pos:tabs="8"><function pos:start="1:1" pos:end="174:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">pcm_dvd_parse_header</name><parameter_list pos:start="1:32" pos:end="1:77">(<parameter pos:start="1:33" pos:end="1:53"><decl pos:start="1:33" pos:end="1:53"><type pos:start="1:33" pos:end="1:53"><name pos:start="1:33" pos:end="1:46">AVCodecContext</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:53">avctx</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:76"><decl pos:start="1:56" pos:end="1:76"><type pos:start="1:56" pos:end="1:76"><specifier pos:start="1:56" pos:end="1:60">const</specifier> <name pos:start="1:62" pos:end="1:68">uint8_t</name> <modifier pos:start="1:70" pos:end="1:70">*</modifier></type><name pos:start="1:71" pos:end="1:76">header</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="174:1">{<block_content pos:start="7:5" pos:end="172:13">

    <comment type="block" pos:start="5:5" pos:end="5:77">/* no traces of 44100 and 32000Hz in any commercial software or player */</comment>

    <decl_stmt pos:start="7:5" pos:end="7:74"><decl pos:start="7:5" pos:end="7:73"><type pos:start="7:5" pos:end="7:25"><specifier pos:start="7:5" pos:end="7:10">static</specifier> <specifier pos:start="7:12" pos:end="7:16">const</specifier> <name pos:start="7:18" pos:end="7:25">uint32_t</name></type> <name pos:start="7:27" pos:end="7:40"><name pos:start="7:27" pos:end="7:37">frequencies</name><index pos:start="7:38" pos:end="7:40">[<expr pos:start="7:39" pos:end="7:39"><literal type="number" pos:start="7:39" pos:end="7:39">4</literal></expr>]</index></name> <init pos:start="7:42" pos:end="7:73">= <expr pos:start="7:44" pos:end="7:73"><block pos:start="7:44" pos:end="7:73">{ <expr pos:start="7:46" pos:end="7:50"><literal type="number" pos:start="7:46" pos:end="7:50">48000</literal></expr>, <expr pos:start="7:53" pos:end="7:57"><literal type="number" pos:start="7:53" pos:end="7:57">96000</literal></expr>, <expr pos:start="7:60" pos:end="7:64"><literal type="number" pos:start="7:60" pos:end="7:64">44100</literal></expr>, <expr pos:start="7:67" pos:end="7:71"><literal type="number" pos:start="7:67" pos:end="7:71">32000</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:40"><decl pos:start="9:5" pos:end="9:39"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">PCMDVDContext</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:20">s</name> <init pos:start="9:22" pos:end="9:39">= <expr pos:start="9:24" pos:end="9:39"><name pos:start="9:24" pos:end="9:39"><name pos:start="9:24" pos:end="9:28">avctx</name><operator pos:start="9:29" pos:end="9:30">-&gt;</operator><name pos:start="9:31" pos:end="9:39">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:79"><decl pos:start="11:5" pos:end="11:78"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:18">header_int</name> <init pos:start="11:20" pos:end="11:78">= <expr pos:start="11:22" pos:end="11:78"><operator pos:start="11:22" pos:end="11:22">(</operator><name pos:start="11:23" pos:end="11:31"><name pos:start="11:23" pos:end="11:28">header</name><index pos:start="11:29" pos:end="11:31">[<expr pos:start="11:30" pos:end="11:30"><literal type="number" pos:start="11:30" pos:end="11:30">0</literal></expr>]</index></name> <operator pos:start="11:33" pos:end="11:33">&amp;</operator> <literal type="number" pos:start="11:35" pos:end="11:38">0xe0</literal><operator pos:start="11:39" pos:end="11:39">)</operator> <operator pos:start="11:41" pos:end="11:41">|</operator> <operator pos:start="11:43" pos:end="11:43">(</operator><name pos:start="11:44" pos:end="11:52"><name pos:start="11:44" pos:end="11:49">header</name><index pos:start="11:50" pos:end="11:52">[<expr pos:start="11:51" pos:end="11:51"><literal type="number" pos:start="11:51" pos:end="11:51">1</literal></expr>]</index></name> <operator pos:start="11:54" pos:end="11:55">&lt;&lt;</operator> <literal type="number" pos:start="11:57" pos:end="11:57">8</literal><operator pos:start="11:58" pos:end="11:58">)</operator> <operator pos:start="11:60" pos:end="11:60">|</operator> <operator pos:start="11:62" pos:end="11:62">(</operator><name pos:start="11:63" pos:end="11:71"><name pos:start="11:63" pos:end="11:68">header</name><index pos:start="11:69" pos:end="11:71">[<expr pos:start="11:70" pos:end="11:70"><literal type="number" pos:start="11:70" pos:end="11:70">2</literal></expr>]</index></name> <operator pos:start="11:73" pos:end="11:74">&lt;&lt;</operator> <literal type="number" pos:start="11:76" pos:end="11:77">16</literal><operator pos:start="11:78" pos:end="11:78">)</operator></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:76">/* early exit if the header didn't change apart from the frame number */</comment>

    <if_stmt pos:start="17:5" pos:end="19:17"><if pos:start="17:5" pos:end="19:17">if <condition pos:start="17:8" pos:end="17:37">(<expr pos:start="17:9" pos:end="17:36"><name pos:start="17:9" pos:end="17:22"><name pos:start="17:9" pos:end="17:9">s</name><operator pos:start="17:10" pos:end="17:11">-&gt;</operator><name pos:start="17:12" pos:end="17:22">last_header</name></name> <operator pos:start="17:24" pos:end="17:25">==</operator> <name pos:start="17:27" pos:end="17:36">header_int</name></expr>)</condition><block type="pseudo" pos:start="19:9" pos:end="19:17"><block_content pos:start="19:9" pos:end="19:17">

        <return pos:start="19:9" pos:end="19:17">return <expr pos:start="19:16" pos:end="19:16"><literal type="number" pos:start="19:16" pos:end="19:16">0</literal></expr>;</return></block_content></block></if></if_stmt>




    <if_stmt pos:start="24:5" pos:end="28:49"><if pos:start="24:5" pos:end="28:49">if <condition pos:start="24:8" pos:end="24:42">(<expr pos:start="24:9" pos:end="24:41"><name pos:start="24:9" pos:end="24:20"><name pos:start="24:9" pos:end="24:13">avctx</name><operator pos:start="24:14" pos:end="24:15">-&gt;</operator><name pos:start="24:16" pos:end="24:20">debug</name></name> <operator pos:start="24:22" pos:end="24:22">&amp;</operator> <name pos:start="24:24" pos:end="24:41">FF_DEBUG_PICT_INFO</name></expr>)</condition><block type="pseudo" pos:start="26:9" pos:end="28:49"><block_content pos:start="26:9" pos:end="28:49">

        <expr_stmt pos:start="26:9" pos:end="28:49"><expr pos:start="26:9" pos:end="28:48"><call pos:start="26:9" pos:end="28:48"><name pos:start="26:9" pos:end="26:15">av_dlog</name><argument_list pos:start="26:16" pos:end="28:48">(<argument pos:start="26:17" pos:end="26:21"><expr pos:start="26:17" pos:end="26:21"><name pos:start="26:17" pos:end="26:21">avctx</name></expr></argument>, <argument pos:start="26:24" pos:end="26:70"><expr pos:start="26:24" pos:end="26:70"><literal type="string" pos:start="26:24" pos:end="26:70">"pcm_dvd_parse_header: header = %02x%02x%02x\n"</literal></expr></argument>,

                <argument pos:start="28:17" pos:end="28:25"><expr pos:start="28:17" pos:end="28:25"><name pos:start="28:17" pos:end="28:25"><name pos:start="28:17" pos:end="28:22">header</name><index pos:start="28:23" pos:end="28:25">[<expr pos:start="28:24" pos:end="28:24"><literal type="number" pos:start="28:24" pos:end="28:24">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="28:28" pos:end="28:36"><expr pos:start="28:28" pos:end="28:36"><name pos:start="28:28" pos:end="28:36"><name pos:start="28:28" pos:end="28:33">header</name><index pos:start="28:34" pos:end="28:36">[<expr pos:start="28:35" pos:end="28:35"><literal type="number" pos:start="28:35" pos:end="28:35">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="28:39" pos:end="28:47"><expr pos:start="28:39" pos:end="28:47"><name pos:start="28:39" pos:end="28:47"><name pos:start="28:39" pos:end="28:44">header</name><index pos:start="28:45" pos:end="28:47">[<expr pos:start="28:46" pos:end="28:46"><literal type="number" pos:start="28:46" pos:end="28:46">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block" pos:start="30:5" pos:end="38:7">/*

     * header[0] emphasis (1), muse(1), reserved(1), frame number(5)

     * header[1] quant (2), freq(2), reserved(1), channels(3)

     * header[2] dynamic range control (0x80 = off)

     */</comment>



    <comment type="block" pos:start="42:5" pos:end="42:79">/* Discard potentially existing leftover samples from old channel layout */</comment>

    <expr_stmt pos:start="44:5" pos:end="44:30"><expr pos:start="44:5" pos:end="44:29"><name pos:start="44:5" pos:end="44:25"><name pos:start="44:5" pos:end="44:5">s</name><operator pos:start="44:6" pos:end="44:7">-&gt;</operator><name pos:start="44:8" pos:end="44:25">extra_sample_count</name></name> <operator pos:start="44:27" pos:end="44:27">=</operator> <literal type="number" pos:start="44:29" pos:end="44:29">0</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="48:5" pos:end="48:67">/* get the sample depth and derive the sample format from it */</comment>

    <expr_stmt pos:start="50:5" pos:end="50:65"><expr pos:start="50:5" pos:end="50:64"><name pos:start="50:5" pos:end="50:32"><name pos:start="50:5" pos:end="50:9">avctx</name><operator pos:start="50:10" pos:end="50:11">-&gt;</operator><name pos:start="50:12" pos:end="50:32">bits_per_coded_sample</name></name> <operator pos:start="50:34" pos:end="50:34">=</operator> <literal type="number" pos:start="50:36" pos:end="50:39">16</literal> <operator pos:start="50:39" pos:end="50:39">+</operator> <operator pos:start="50:41" pos:end="50:41">(</operator><name pos:start="50:42" pos:end="50:50"><name pos:start="50:42" pos:end="50:47">header</name><index pos:start="50:48" pos:end="50:50">[<expr pos:start="50:49" pos:end="50:49"><literal type="number" pos:start="50:49" pos:end="50:49">1</literal></expr>]</index></name> <operator pos:start="50:52" pos:end="50:53">&gt;&gt;</operator> <literal type="number" pos:start="50:55" pos:end="50:55">6</literal> <operator pos:start="50:57" pos:end="50:57">&amp;</operator> <literal type="number" pos:start="50:59" pos:end="50:59">3</literal><operator pos:start="50:60" pos:end="50:60">)</operator> <operator pos:start="50:62" pos:end="50:62">*</operator> <literal type="number" pos:start="50:64" pos:end="50:64">4</literal></expr>;</expr_stmt>

    <if_stmt pos:start="52:5" pos:end="62:5"><if pos:start="52:5" pos:end="62:5">if <condition pos:start="52:8" pos:end="52:43">(<expr pos:start="52:9" pos:end="52:42"><name pos:start="52:9" pos:end="52:36"><name pos:start="52:9" pos:end="52:13">avctx</name><operator pos:start="52:14" pos:end="52:15">-&gt;</operator><name pos:start="52:16" pos:end="52:36">bits_per_coded_sample</name></name> <operator pos:start="52:38" pos:end="52:39">==</operator> <literal type="number" pos:start="52:41" pos:end="52:42">28</literal></expr>)</condition> <block pos:start="52:45" pos:end="62:5">{<block_content pos:start="54:9" pos:end="60:35">

        <expr_stmt pos:start="54:9" pos:end="58:45"><expr pos:start="54:9" pos:end="58:44"><call pos:start="54:9" pos:end="58:44"><name pos:start="54:9" pos:end="54:14">av_log</name><argument_list pos:start="54:15" pos:end="58:44">(<argument pos:start="54:16" pos:end="54:20"><expr pos:start="54:16" pos:end="54:20"><name pos:start="54:16" pos:end="54:20">avctx</name></expr></argument>, <argument pos:start="54:23" pos:end="54:34"><expr pos:start="54:23" pos:end="54:34"><name pos:start="54:23" pos:end="54:34">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="56:16" pos:end="56:54"><expr pos:start="56:16" pos:end="56:54"><literal type="string" pos:start="56:16" pos:end="56:54">"PCM DVD unsupported sample depth %i\n"</literal></expr></argument>,

               <argument pos:start="58:16" pos:end="58:43"><expr pos:start="58:16" pos:end="58:43"><name pos:start="58:16" pos:end="58:43"><name pos:start="58:16" pos:end="58:20">avctx</name><operator pos:start="58:21" pos:end="58:22">-&gt;</operator><name pos:start="58:23" pos:end="58:43">bits_per_coded_sample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="60:9" pos:end="60:35">return <expr pos:start="60:16" pos:end="60:34"><name pos:start="60:16" pos:end="60:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="64:5" pos:end="66:79"><expr pos:start="64:5" pos:end="66:78"><name pos:start="64:5" pos:end="64:21"><name pos:start="64:5" pos:end="64:9">avctx</name><operator pos:start="64:10" pos:end="64:11">-&gt;</operator><name pos:start="64:12" pos:end="64:21">sample_fmt</name></name> <operator pos:start="64:23" pos:end="64:23">=</operator> <ternary pos:start="64:25" pos:end="66:78"><condition pos:start="64:25" pos:end="64:60"><expr pos:start="64:25" pos:end="64:58"><name pos:start="64:25" pos:end="64:52"><name pos:start="64:25" pos:end="64:29">avctx</name><operator pos:start="64:30" pos:end="64:31">-&gt;</operator><name pos:start="64:32" pos:end="64:52">bits_per_coded_sample</name></name> <operator pos:start="64:54" pos:end="64:55">==</operator> <literal type="number" pos:start="64:57" pos:end="64:58">16</literal></expr> ?</condition><then pos:start="64:62" pos:end="64:78"> <expr pos:start="64:62" pos:end="64:78"><name pos:start="64:62" pos:end="64:78">AV_SAMPLE_FMT_S16</name></expr>

                                                           </then><else pos:start="66:60" pos:end="66:78">: <expr pos:start="66:62" pos:end="66:78"><name pos:start="66:62" pos:end="66:78">AV_SAMPLE_FMT_S32</name></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt pos:start="68:5" pos:end="68:62"><expr pos:start="68:5" pos:end="68:61"><name pos:start="68:5" pos:end="68:30"><name pos:start="68:5" pos:end="68:9">avctx</name><operator pos:start="68:10" pos:end="68:11">-&gt;</operator><name pos:start="68:12" pos:end="68:30">bits_per_raw_sample</name></name> <operator pos:start="68:32" pos:end="68:32">=</operator> <name pos:start="68:34" pos:end="68:61"><name pos:start="68:34" pos:end="68:38">avctx</name><operator pos:start="68:39" pos:end="68:40">-&gt;</operator><name pos:start="68:41" pos:end="68:61">bits_per_coded_sample</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="72:5" pos:end="72:29">/* get the sample rate */</comment>

    <expr_stmt pos:start="74:5" pos:end="74:57"><expr pos:start="74:5" pos:end="74:56"><name pos:start="74:5" pos:end="74:22"><name pos:start="74:5" pos:end="74:9">avctx</name><operator pos:start="74:10" pos:end="74:11">-&gt;</operator><name pos:start="74:12" pos:end="74:22">sample_rate</name></name> <operator pos:start="74:24" pos:end="74:24">=</operator> <name pos:start="74:26" pos:end="74:56"><name pos:start="74:26" pos:end="74:36">frequencies</name><index pos:start="74:37" pos:end="74:56">[<expr pos:start="74:38" pos:end="74:55"><name pos:start="74:38" pos:end="74:46"><name pos:start="74:38" pos:end="74:43">header</name><index pos:start="74:44" pos:end="74:46">[<expr pos:start="74:45" pos:end="74:45"><literal type="number" pos:start="74:45" pos:end="74:45">1</literal></expr>]</index></name> <operator pos:start="74:48" pos:end="74:49">&gt;&gt;</operator> <literal type="number" pos:start="74:51" pos:end="74:51">4</literal> <operator pos:start="74:53" pos:end="74:53">&amp;</operator> <literal type="number" pos:start="74:55" pos:end="74:55">3</literal></expr>]</index></name></expr>;</expr_stmt>



    <comment type="block" pos:start="78:5" pos:end="78:36">/* get the number of channels */</comment>

    <expr_stmt pos:start="80:5" pos:end="80:42"><expr pos:start="80:5" pos:end="80:41"><name pos:start="80:5" pos:end="80:19"><name pos:start="80:5" pos:end="80:9">avctx</name><operator pos:start="80:10" pos:end="80:11">-&gt;</operator><name pos:start="80:12" pos:end="80:19">channels</name></name> <operator pos:start="80:21" pos:end="80:21">=</operator> <literal type="number" pos:start="80:23" pos:end="80:25">1</literal> <operator pos:start="80:25" pos:end="80:25">+</operator> <operator pos:start="80:27" pos:end="80:27">(</operator><name pos:start="80:28" pos:end="80:36"><name pos:start="80:28" pos:end="80:33">header</name><index pos:start="80:34" pos:end="80:36">[<expr pos:start="80:35" pos:end="80:35"><literal type="number" pos:start="80:35" pos:end="80:35">1</literal></expr>]</index></name> <operator pos:start="80:38" pos:end="80:38">&amp;</operator> <literal type="number" pos:start="80:40" pos:end="80:40">7</literal><operator pos:start="80:41" pos:end="80:41">)</operator></expr>;</expr_stmt>

    <comment type="block" pos:start="82:5" pos:end="82:31">/* calculate the bitrate */</comment>

    <expr_stmt pos:start="84:5" pos:end="88:51"><expr pos:start="84:5" pos:end="88:50"><name pos:start="84:5" pos:end="84:19"><name pos:start="84:5" pos:end="84:9">avctx</name><operator pos:start="84:10" pos:end="84:11">-&gt;</operator><name pos:start="84:12" pos:end="84:19">bit_rate</name></name> <operator pos:start="84:21" pos:end="84:21">=</operator> <name pos:start="84:23" pos:end="84:37"><name pos:start="84:23" pos:end="84:27">avctx</name><operator pos:start="84:28" pos:end="84:29">-&gt;</operator><name pos:start="84:30" pos:end="84:37">channels</name></name> <operator pos:start="84:39" pos:end="84:39">*</operator>

                      <name pos:start="86:23" pos:end="86:40"><name pos:start="86:23" pos:end="86:27">avctx</name><operator pos:start="86:28" pos:end="86:29">-&gt;</operator><name pos:start="86:30" pos:end="86:40">sample_rate</name></name> <operator pos:start="86:42" pos:end="86:42">*</operator>

                      <name pos:start="88:23" pos:end="88:50"><name pos:start="88:23" pos:end="88:27">avctx</name><operator pos:start="88:28" pos:end="88:29">-&gt;</operator><name pos:start="88:30" pos:end="88:50">bits_per_coded_sample</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="92:5" pos:end="96:63">/* 4 samples form a group in 20/24bit PCM on DVD Video.

     * A block is formed by the number of groups that are

     * needed to complete a set of samples for each channel. */</comment>

    <if_stmt pos:start="98:5" pos:end="152:5"><if pos:start="98:5" pos:end="104:5">if <condition pos:start="98:8" pos:end="98:43">(<expr pos:start="98:9" pos:end="98:42"><name pos:start="98:9" pos:end="98:36"><name pos:start="98:9" pos:end="98:13">avctx</name><operator pos:start="98:14" pos:end="98:15">-&gt;</operator><name pos:start="98:16" pos:end="98:36">bits_per_coded_sample</name></name> <operator pos:start="98:38" pos:end="98:39">==</operator> <literal type="number" pos:start="98:41" pos:end="98:42">16</literal></expr>)</condition> <block pos:start="98:45" pos:end="104:5">{<block_content pos:start="100:9" pos:end="102:51">

        <expr_stmt pos:start="100:9" pos:end="100:33"><expr pos:start="100:9" pos:end="100:32"><name pos:start="100:9" pos:end="100:28"><name pos:start="100:9" pos:end="100:9">s</name><operator pos:start="100:10" pos:end="100:11">-&gt;</operator><name pos:start="100:12" pos:end="100:28">samples_per_block</name></name> <operator pos:start="100:30" pos:end="100:30">=</operator> <literal type="number" pos:start="100:32" pos:end="100:32">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="102:9" pos:end="102:51"><expr pos:start="102:9" pos:end="102:50"><name pos:start="102:9" pos:end="102:21"><name pos:start="102:9" pos:end="102:9">s</name><operator pos:start="102:10" pos:end="102:11">-&gt;</operator><name pos:start="102:12" pos:end="102:21">block_size</name></name>        <operator pos:start="102:30" pos:end="102:30">=</operator> <name pos:start="102:32" pos:end="102:46"><name pos:start="102:32" pos:end="102:36">avctx</name><operator pos:start="102:37" pos:end="102:38">-&gt;</operator><name pos:start="102:39" pos:end="102:46">channels</name></name> <operator pos:start="102:48" pos:end="102:48">*</operator> <literal type="number" pos:start="102:50" pos:end="102:50">2</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="104:7" pos:end="152:5">else <block pos:start="104:12" pos:end="152:5">{<block_content pos:start="106:9" pos:end="150:9">

        <switch pos:start="106:9" pos:end="150:9">switch <condition pos:start="106:16" pos:end="106:32">(<expr pos:start="106:17" pos:end="106:31"><name pos:start="106:17" pos:end="106:31"><name pos:start="106:17" pos:end="106:21">avctx</name><operator pos:start="106:22" pos:end="106:23">-&gt;</operator><name pos:start="106:24" pos:end="106:31">channels</name></name></expr>)</condition> <block pos:start="106:34" pos:end="150:9">{<block_content pos:start="108:9" pos:end="148:18">

        <case pos:start="108:9" pos:end="108:15">case <expr pos:start="108:14" pos:end="108:14"><literal type="number" pos:start="108:14" pos:end="108:14">1</literal></expr>:</case>

        <case pos:start="110:9" pos:end="110:15">case <expr pos:start="110:14" pos:end="110:14"><literal type="number" pos:start="110:14" pos:end="110:14">2</literal></expr>:</case>

        <case pos:start="112:9" pos:end="112:15">case <expr pos:start="112:14" pos:end="112:14"><literal type="number" pos:start="112:14" pos:end="112:14">4</literal></expr>:</case>

            <comment type="block" pos:start="114:13" pos:end="114:54">/* one group has all the samples needed */</comment>

            <expr_stmt pos:start="116:13" pos:end="116:72"><expr pos:start="116:13" pos:end="116:71"><name pos:start="116:13" pos:end="116:25"><name pos:start="116:13" pos:end="116:13">s</name><operator pos:start="116:14" pos:end="116:15">-&gt;</operator><name pos:start="116:16" pos:end="116:25">block_size</name></name>        <operator pos:start="116:34" pos:end="116:34">=</operator> <literal type="number" pos:start="116:36" pos:end="116:36">4</literal> <operator pos:start="116:38" pos:end="116:38">*</operator> <name pos:start="116:40" pos:end="116:67"><name pos:start="116:40" pos:end="116:44">avctx</name><operator pos:start="116:45" pos:end="116:46">-&gt;</operator><name pos:start="116:47" pos:end="116:67">bits_per_coded_sample</name></name> <operator pos:start="116:69" pos:end="116:69">/</operator> <literal type="number" pos:start="116:71" pos:end="116:71">8</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="118:13" pos:end="118:55"><expr pos:start="118:13" pos:end="118:54"><name pos:start="118:13" pos:end="118:32"><name pos:start="118:13" pos:end="118:13">s</name><operator pos:start="118:14" pos:end="118:15">-&gt;</operator><name pos:start="118:16" pos:end="118:32">samples_per_block</name></name> <operator pos:start="118:34" pos:end="118:34">=</operator> <literal type="number" pos:start="118:36" pos:end="118:36">4</literal> <operator pos:start="118:38" pos:end="118:38">/</operator> <name pos:start="118:40" pos:end="118:54"><name pos:start="118:40" pos:end="118:44">avctx</name><operator pos:start="118:45" pos:end="118:46">-&gt;</operator><name pos:start="118:47" pos:end="118:54">channels</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="120:13" pos:end="120:37"><expr pos:start="120:13" pos:end="120:36"><name pos:start="120:13" pos:end="120:31"><name pos:start="120:13" pos:end="120:13">s</name><operator pos:start="120:14" pos:end="120:15">-&gt;</operator><name pos:start="120:16" pos:end="120:31">groups_per_block</name></name>  <operator pos:start="120:34" pos:end="120:34">=</operator> <literal type="number" pos:start="120:36" pos:end="120:36">1</literal></expr>;</expr_stmt>

            <break pos:start="122:13" pos:end="122:18">break;</break>

        <case pos:start="124:9" pos:end="124:15">case <expr pos:start="124:14" pos:end="124:14"><literal type="number" pos:start="124:14" pos:end="124:14">8</literal></expr>:</case>

            <comment type="block" pos:start="126:13" pos:end="126:56">/* two groups have all the samples needed */</comment>

            <expr_stmt pos:start="128:13" pos:end="128:72"><expr pos:start="128:13" pos:end="128:71"><name pos:start="128:13" pos:end="128:25"><name pos:start="128:13" pos:end="128:13">s</name><operator pos:start="128:14" pos:end="128:15">-&gt;</operator><name pos:start="128:16" pos:end="128:25">block_size</name></name>        <operator pos:start="128:34" pos:end="128:34">=</operator> <literal type="number" pos:start="128:36" pos:end="128:36">8</literal> <operator pos:start="128:38" pos:end="128:38">*</operator> <name pos:start="128:40" pos:end="128:67"><name pos:start="128:40" pos:end="128:44">avctx</name><operator pos:start="128:45" pos:end="128:46">-&gt;</operator><name pos:start="128:47" pos:end="128:67">bits_per_coded_sample</name></name> <operator pos:start="128:69" pos:end="128:69">/</operator> <literal type="number" pos:start="128:71" pos:end="128:71">8</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="130:13" pos:end="130:37"><expr pos:start="130:13" pos:end="130:36"><name pos:start="130:13" pos:end="130:32"><name pos:start="130:13" pos:end="130:13">s</name><operator pos:start="130:14" pos:end="130:15">-&gt;</operator><name pos:start="130:16" pos:end="130:32">samples_per_block</name></name> <operator pos:start="130:34" pos:end="130:34">=</operator> <literal type="number" pos:start="130:36" pos:end="130:36">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="132:13" pos:end="132:37"><expr pos:start="132:13" pos:end="132:36"><name pos:start="132:13" pos:end="132:31"><name pos:start="132:13" pos:end="132:13">s</name><operator pos:start="132:14" pos:end="132:15">-&gt;</operator><name pos:start="132:16" pos:end="132:31">groups_per_block</name></name>  <operator pos:start="132:34" pos:end="132:34">=</operator> <literal type="number" pos:start="132:36" pos:end="132:36">2</literal></expr>;</expr_stmt>

            <break pos:start="134:13" pos:end="134:18">break;</break>

        <default pos:start="136:9" pos:end="136:16">default:</default>

            <comment type="block" pos:start="138:13" pos:end="138:45">/* need avctx-&gt;channels groups */</comment>

            <expr_stmt pos:start="140:13" pos:end="142:68"><expr pos:start="140:13" pos:end="142:67"><name pos:start="140:13" pos:end="140:25"><name pos:start="140:13" pos:end="140:13">s</name><operator pos:start="140:14" pos:end="140:15">-&gt;</operator><name pos:start="140:16" pos:end="140:25">block_size</name></name>        <operator pos:start="140:34" pos:end="140:34">=</operator> <literal type="number" pos:start="140:36" pos:end="140:36">4</literal> <operator pos:start="140:38" pos:end="140:38">*</operator> <name pos:start="140:40" pos:end="140:54"><name pos:start="140:40" pos:end="140:44">avctx</name><operator pos:start="140:45" pos:end="140:46">-&gt;</operator><name pos:start="140:47" pos:end="140:54">channels</name></name> <operator pos:start="140:56" pos:end="140:56">*</operator>

                                   <name pos:start="142:36" pos:end="142:63"><name pos:start="142:36" pos:end="142:40">avctx</name><operator pos:start="142:41" pos:end="142:42">-&gt;</operator><name pos:start="142:43" pos:end="142:63">bits_per_coded_sample</name></name> <operator pos:start="142:65" pos:end="142:65">/</operator> <literal type="number" pos:start="142:67" pos:end="142:67">8</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="144:13" pos:end="144:37"><expr pos:start="144:13" pos:end="144:36"><name pos:start="144:13" pos:end="144:32"><name pos:start="144:13" pos:end="144:13">s</name><operator pos:start="144:14" pos:end="144:15">-&gt;</operator><name pos:start="144:16" pos:end="144:32">samples_per_block</name></name> <operator pos:start="144:34" pos:end="144:34">=</operator> <literal type="number" pos:start="144:36" pos:end="144:36">4</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="146:13" pos:end="146:51"><expr pos:start="146:13" pos:end="146:50"><name pos:start="146:13" pos:end="146:31"><name pos:start="146:13" pos:end="146:13">s</name><operator pos:start="146:14" pos:end="146:15">-&gt;</operator><name pos:start="146:16" pos:end="146:31">groups_per_block</name></name>  <operator pos:start="146:34" pos:end="146:34">=</operator> <name pos:start="146:36" pos:end="146:50"><name pos:start="146:36" pos:end="146:40">avctx</name><operator pos:start="146:41" pos:end="146:42">-&gt;</operator><name pos:start="146:43" pos:end="146:50">channels</name></name></expr>;</expr_stmt>

            <break pos:start="148:13" pos:end="148:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="156:5" pos:end="164:53"><if pos:start="156:5" pos:end="164:53">if <condition pos:start="156:8" pos:end="156:42">(<expr pos:start="156:9" pos:end="156:41"><name pos:start="156:9" pos:end="156:20"><name pos:start="156:9" pos:end="156:13">avctx</name><operator pos:start="156:14" pos:end="156:15">-&gt;</operator><name pos:start="156:16" pos:end="156:20">debug</name></name> <operator pos:start="156:22" pos:end="156:22">&amp;</operator> <name pos:start="156:24" pos:end="156:41">FF_DEBUG_PICT_INFO</name></expr>)</condition><block type="pseudo" pos:start="158:9" pos:end="164:53"><block_content pos:start="158:9" pos:end="164:53">

        <expr_stmt pos:start="158:9" pos:end="164:53"><expr pos:start="158:9" pos:end="164:52"><call pos:start="158:9" pos:end="164:52"><name pos:start="158:9" pos:end="158:15">av_dlog</name><argument_list pos:start="158:16" pos:end="164:52">(<argument pos:start="158:17" pos:end="158:21"><expr pos:start="158:17" pos:end="158:21"><name pos:start="158:17" pos:end="158:21">avctx</name></expr></argument>,

                <argument pos:start="160:17" pos:end="160:90"><expr pos:start="160:17" pos:end="160:90"><literal type="string" pos:start="160:17" pos:end="160:90">"pcm_dvd_parse_header: %d channels, %d bits per sample, %d Hz, %d bit/s\n"</literal></expr></argument>,

                <argument pos:start="162:17" pos:end="162:31"><expr pos:start="162:17" pos:end="162:31"><name pos:start="162:17" pos:end="162:31"><name pos:start="162:17" pos:end="162:21">avctx</name><operator pos:start="162:22" pos:end="162:23">-&gt;</operator><name pos:start="162:24" pos:end="162:31">channels</name></name></expr></argument>, <argument pos:start="162:34" pos:end="162:61"><expr pos:start="162:34" pos:end="162:61"><name pos:start="162:34" pos:end="162:61"><name pos:start="162:34" pos:end="162:38">avctx</name><operator pos:start="162:39" pos:end="162:40">-&gt;</operator><name pos:start="162:41" pos:end="162:61">bits_per_coded_sample</name></name></expr></argument>,

                <argument pos:start="164:17" pos:end="164:34"><expr pos:start="164:17" pos:end="164:34"><name pos:start="164:17" pos:end="164:34"><name pos:start="164:17" pos:end="164:21">avctx</name><operator pos:start="164:22" pos:end="164:23">-&gt;</operator><name pos:start="164:24" pos:end="164:34">sample_rate</name></name></expr></argument>, <argument pos:start="164:37" pos:end="164:51"><expr pos:start="164:37" pos:end="164:51"><name pos:start="164:37" pos:end="164:51"><name pos:start="164:37" pos:end="164:41">avctx</name><operator pos:start="164:42" pos:end="164:43">-&gt;</operator><name pos:start="164:44" pos:end="164:51">bit_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="168:5" pos:end="168:32"><expr pos:start="168:5" pos:end="168:31"><name pos:start="168:5" pos:end="168:18"><name pos:start="168:5" pos:end="168:5">s</name><operator pos:start="168:6" pos:end="168:7">-&gt;</operator><name pos:start="168:8" pos:end="168:18">last_header</name></name> <operator pos:start="168:20" pos:end="168:20">=</operator> <name pos:start="168:22" pos:end="168:31">header_int</name></expr>;</expr_stmt>



    <return pos:start="172:5" pos:end="172:13">return <expr pos:start="172:12" pos:end="172:12"><literal type="number" pos:start="172:12" pos:end="172:12">0</literal></expr>;</return>

</block_content>}</block></function></unit>
