<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20315.c" pos:tabs="8"><function pos:start="1:1" pos:end="287:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">decode_band_hdr</name><parameter_list pos:start="1:27" pos:end="3:49">(<parameter pos:start="1:28" pos:end="1:46"><decl pos:start="1:28" pos:end="1:46"><type pos:start="1:28" pos:end="1:46"><name pos:start="1:28" pos:end="1:41">IVI4DecContext</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:46">ctx</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:65"><decl pos:start="1:49" pos:end="1:65"><type pos:start="1:49" pos:end="1:65"><name pos:start="1:49" pos:end="1:59">IVIBandDesc</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:65">band</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:48"><decl pos:start="3:28" pos:end="3:48"><type pos:start="3:28" pos:end="3:48"><name pos:start="3:28" pos:end="3:41">AVCodecContext</name> <modifier pos:start="3:43" pos:end="3:43">*</modifier></type><name pos:start="3:44" pos:end="3:48">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="287:1">{<block_content pos:start="7:5" pos:end="285:13">

    <decl_stmt pos:start="7:5" pos:end="7:55"><decl pos:start="7:5" pos:end="7:13"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:13">plane</name></decl>, <decl pos:start="7:16" pos:end="7:23"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:16" pos:end="7:23">band_num</name></decl>, <decl pos:start="7:26" pos:end="7:29"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:26" pos:end="7:29">indx</name></decl>, <decl pos:start="7:32" pos:end="7:43"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:32" pos:end="7:43">transform_id</name></decl>, <decl pos:start="7:46" pos:end="7:54"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:46" pos:end="7:54">scan_indx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:17">quant_mat</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:37"><expr pos:start="15:5" pos:end="15:36"><name pos:start="15:5" pos:end="15:9">plane</name>    <operator pos:start="15:14" pos:end="15:14">=</operator> <call pos:start="15:16" pos:end="15:36"><name pos:start="15:16" pos:end="15:23">get_bits</name><argument_list pos:start="15:24" pos:end="15:36">(<argument pos:start="15:25" pos:end="15:32"><expr pos:start="15:25" pos:end="15:32"><operator pos:start="15:25" pos:end="15:25">&amp;</operator><name pos:start="15:26" pos:end="15:32"><name pos:start="15:26" pos:end="15:28">ctx</name><operator pos:start="15:29" pos:end="15:30">-&gt;</operator><name pos:start="15:31" pos:end="15:32">gb</name></name></expr></argument>, <argument pos:start="15:35" pos:end="15:35"><expr pos:start="15:35" pos:end="15:35"><literal type="number" pos:start="15:35" pos:end="15:35">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:37"><expr pos:start="17:5" pos:end="17:36"><name pos:start="17:5" pos:end="17:12">band_num</name> <operator pos:start="17:14" pos:end="17:14">=</operator> <call pos:start="17:16" pos:end="17:36"><name pos:start="17:16" pos:end="17:23">get_bits</name><argument_list pos:start="17:24" pos:end="17:36">(<argument pos:start="17:25" pos:end="17:32"><expr pos:start="17:25" pos:end="17:32"><operator pos:start="17:25" pos:end="17:25">&amp;</operator><name pos:start="17:26" pos:end="17:32"><name pos:start="17:26" pos:end="17:28">ctx</name><operator pos:start="17:29" pos:end="17:30">-&gt;</operator><name pos:start="17:31" pos:end="17:32">gb</name></name></expr></argument>, <argument pos:start="17:35" pos:end="17:35"><expr pos:start="17:35" pos:end="17:35"><literal type="number" pos:start="17:35" pos:end="17:35">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="25:5"><if pos:start="19:5" pos:end="25:5">if <condition pos:start="19:8" pos:end="19:59">(<expr pos:start="19:9" pos:end="19:58"><name pos:start="19:9" pos:end="19:19"><name pos:start="19:9" pos:end="19:12">band</name><operator pos:start="19:13" pos:end="19:14">-&gt;</operator><name pos:start="19:15" pos:end="19:19">plane</name></name> <operator pos:start="19:21" pos:end="19:22">!=</operator> <name pos:start="19:24" pos:end="19:28">plane</name> <operator pos:start="19:30" pos:end="19:31">||</operator> <name pos:start="19:33" pos:end="19:46"><name pos:start="19:33" pos:end="19:36">band</name><operator pos:start="19:37" pos:end="19:38">-&gt;</operator><name pos:start="19:39" pos:end="19:46">band_num</name></name> <operator pos:start="19:48" pos:end="19:49">!=</operator> <name pos:start="19:51" pos:end="19:58">band_num</name></expr>)</condition> <block pos:start="19:61" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:35">

        <expr_stmt pos:start="21:9" pos:end="21:71"><expr pos:start="21:9" pos:end="21:70"><call pos:start="21:9" pos:end="21:70"><name pos:start="21:9" pos:end="21:14">av_log</name><argument_list pos:start="21:15" pos:end="21:70">(<argument pos:start="21:16" pos:end="21:20"><expr pos:start="21:16" pos:end="21:20"><name pos:start="21:16" pos:end="21:20">avctx</name></expr></argument>, <argument pos:start="21:23" pos:end="21:34"><expr pos:start="21:23" pos:end="21:34"><name pos:start="21:23" pos:end="21:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="21:37" pos:end="21:69"><expr pos:start="21:37" pos:end="21:69"><literal type="string" pos:start="21:37" pos:end="21:69">"Invalid band header sequence!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="23:35">return <expr pos:start="23:16" pos:end="23:34"><name pos:start="23:16" pos:end="23:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:41"><expr pos:start="29:5" pos:end="29:40"><name pos:start="29:5" pos:end="29:18"><name pos:start="29:5" pos:end="29:8">band</name><operator pos:start="29:9" pos:end="29:10">-&gt;</operator><name pos:start="29:11" pos:end="29:18">is_empty</name></name> <operator pos:start="29:20" pos:end="29:20">=</operator> <call pos:start="29:22" pos:end="29:40"><name pos:start="29:22" pos:end="29:30">get_bits1</name><argument_list pos:start="29:31" pos:end="29:40">(<argument pos:start="29:32" pos:end="29:39"><expr pos:start="29:32" pos:end="29:39"><operator pos:start="29:32" pos:end="29:32">&amp;</operator><name pos:start="29:33" pos:end="29:39"><name pos:start="29:33" pos:end="29:35">ctx</name><operator pos:start="29:36" pos:end="29:37">-&gt;</operator><name pos:start="29:38" pos:end="29:39">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="243:5"><if pos:start="31:5" pos:end="243:5">if <condition pos:start="31:8" pos:end="31:24">(<expr pos:start="31:9" pos:end="31:23"><operator pos:start="31:9" pos:end="31:9">!</operator><name pos:start="31:10" pos:end="31:23"><name pos:start="31:10" pos:end="31:13">band</name><operator pos:start="31:14" pos:end="31:15">-&gt;</operator><name pos:start="31:16" pos:end="31:23">is_empty</name></name></expr>)</condition> <block pos:start="31:26" pos:end="243:5">{<block_content pos:start="37:9" pos:end="241:9">

        <comment type="block" pos:start="33:9" pos:end="35:66">/* skip header size

         * If header size is not given, header size is 4 bytes. */</comment>

        <if_stmt pos:start="37:9" pos:end="39:36"><if pos:start="37:9" pos:end="39:36">if <condition pos:start="37:12" pos:end="37:32">(<expr pos:start="37:13" pos:end="37:31"><call pos:start="37:13" pos:end="37:31"><name pos:start="37:13" pos:end="37:21">get_bits1</name><argument_list pos:start="37:22" pos:end="37:31">(<argument pos:start="37:23" pos:end="37:30"><expr pos:start="37:23" pos:end="37:30"><operator pos:start="37:23" pos:end="37:23">&amp;</operator><name pos:start="37:24" pos:end="37:30"><name pos:start="37:24" pos:end="37:26">ctx</name><operator pos:start="37:27" pos:end="37:28">-&gt;</operator><name pos:start="37:29" pos:end="37:30">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="39:13" pos:end="39:36"><block_content pos:start="39:13" pos:end="39:36">

            <expr_stmt pos:start="39:13" pos:end="39:36"><expr pos:start="39:13" pos:end="39:35"><call pos:start="39:13" pos:end="39:35"><name pos:start="39:13" pos:end="39:21">skip_bits</name><argument_list pos:start="39:22" pos:end="39:35">(<argument pos:start="39:23" pos:end="39:30"><expr pos:start="39:23" pos:end="39:30"><operator pos:start="39:23" pos:end="39:23">&amp;</operator><name pos:start="39:24" pos:end="39:30"><name pos:start="39:24" pos:end="39:26">ctx</name><operator pos:start="39:27" pos:end="39:28">-&gt;</operator><name pos:start="39:29" pos:end="39:30">gb</name></name></expr></argument>, <argument pos:start="39:33" pos:end="39:34"><expr pos:start="39:33" pos:end="39:34"><literal type="number" pos:start="39:33" pos:end="39:34">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="43:9" pos:end="43:49"><expr pos:start="43:9" pos:end="43:48"><name pos:start="43:9" pos:end="43:24"><name pos:start="43:9" pos:end="43:12">band</name><operator pos:start="43:13" pos:end="43:14">-&gt;</operator><name pos:start="43:15" pos:end="43:24">is_halfpel</name></name> <operator pos:start="43:26" pos:end="43:26">=</operator> <call pos:start="43:28" pos:end="43:48"><name pos:start="43:28" pos:end="43:35">get_bits</name><argument_list pos:start="43:36" pos:end="43:48">(<argument pos:start="43:37" pos:end="43:44"><expr pos:start="43:37" pos:end="43:44"><operator pos:start="43:37" pos:end="43:37">&amp;</operator><name pos:start="43:38" pos:end="43:44"><name pos:start="43:38" pos:end="43:40">ctx</name><operator pos:start="43:41" pos:end="43:42">-&gt;</operator><name pos:start="43:43" pos:end="43:44">gb</name></name></expr></argument>, <argument pos:start="43:47" pos:end="43:47"><expr pos:start="43:47" pos:end="43:47"><literal type="number" pos:start="43:47" pos:end="43:47">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="45:9" pos:end="56:0"><if pos:start="45:9" pos:end="56:0">if <condition pos:start="45:12" pos:end="45:34">(<expr pos:start="45:13" pos:end="45:33"><name pos:start="45:13" pos:end="45:28"><name pos:start="45:13" pos:end="45:16">band</name><operator pos:start="45:17" pos:end="45:18">-&gt;</operator><name pos:start="45:19" pos:end="45:28">is_halfpel</name></name> <operator pos:start="45:30" pos:end="45:31">&gt;=</operator> <literal type="number" pos:start="45:33" pos:end="45:33">2</literal></expr>)</condition> <block pos:start="45:36" pos:end="56:0">{<block_content pos:start="47:13" pos:end="51:39">

            <expr_stmt pos:start="47:13" pos:end="49:37"><expr pos:start="47:13" pos:end="49:36"><call pos:start="47:13" pos:end="49:36"><name pos:start="47:13" pos:end="47:18">av_log</name><argument_list pos:start="47:19" pos:end="49:36">(<argument pos:start="47:20" pos:end="47:24"><expr pos:start="47:20" pos:end="47:24"><name pos:start="47:20" pos:end="47:24">avctx</name></expr></argument>, <argument pos:start="47:27" pos:end="47:38"><expr pos:start="47:27" pos:end="47:38"><name pos:start="47:27" pos:end="47:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="47:41" pos:end="47:82"><expr pos:start="47:41" pos:end="47:82"><literal type="string" pos:start="47:41" pos:end="47:82">"Invalid/unsupported mv resolution: %d!\n"</literal></expr></argument>,

                   <argument pos:start="49:20" pos:end="49:35"><expr pos:start="49:20" pos:end="49:35"><name pos:start="49:20" pos:end="49:35"><name pos:start="49:20" pos:end="49:23">band</name><operator pos:start="49:24" pos:end="49:25">-&gt;</operator><name pos:start="49:26" pos:end="49:35">is_halfpel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="51:13" pos:end="51:39">return <expr pos:start="51:20" pos:end="51:38"><name pos:start="51:20" pos:end="51:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

<cpp:if pos:start="55:1" pos:end="55:24">#<cpp:directive pos:start="55:2" pos:end="55:3">if</cpp:directive> <expr pos:start="55:5" pos:end="55:24"><name pos:start="55:5" pos:end="55:24">IVI4_STREAM_ANALYSER</name></expr></cpp:if>

        <if_stmt pos:start="57:9" pos:end="62:0"><if pos:start="57:9" pos:end="62:0">if <condition pos:start="57:12" pos:end="57:30">(<expr pos:start="57:13" pos:end="57:29"><operator pos:start="57:13" pos:end="57:13">!</operator><name pos:start="57:14" pos:end="57:29"><name pos:start="57:14" pos:end="57:17">band</name><operator pos:start="57:18" pos:end="57:19">-&gt;</operator><name pos:start="57:20" pos:end="57:29">is_halfpel</name></name></expr>)</condition><block type="pseudo" pos:start="59:13" pos:end="62:0"><block_content pos:start="59:13" pos:end="62:0">

            <expr_stmt pos:start="59:13" pos:end="62:0"><expr pos:start="59:13" pos:end="59:33"><name pos:start="59:13" pos:end="59:29"><name pos:start="59:13" pos:end="59:15">ctx</name><operator pos:start="59:16" pos:end="59:17">-&gt;</operator><name pos:start="59:18" pos:end="59:29">uses_fullpel</name></name> <operator pos:start="59:31" pos:end="59:31">=</operator> <literal type="number" pos:start="59:33" pos:end="59:33">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="61:1" pos:end="61:6">#<cpp:directive pos:start="61:2" pos:end="61:6">endif</cpp:directive></cpp:endif>



        <expr_stmt pos:start="65:9" pos:end="65:53"><expr pos:start="65:9" pos:end="65:52"><name pos:start="65:9" pos:end="65:30"><name pos:start="65:9" pos:end="65:12">band</name><operator pos:start="65:13" pos:end="65:14">-&gt;</operator><name pos:start="65:15" pos:end="65:30">checksum_present</name></name> <operator pos:start="65:32" pos:end="65:32">=</operator> <call pos:start="65:34" pos:end="65:52"><name pos:start="65:34" pos:end="65:42">get_bits1</name><argument_list pos:start="65:43" pos:end="65:52">(<argument pos:start="65:44" pos:end="65:51"><expr pos:start="65:44" pos:end="65:51"><operator pos:start="65:44" pos:end="65:44">&amp;</operator><name pos:start="65:45" pos:end="65:51"><name pos:start="65:45" pos:end="65:47">ctx</name><operator pos:start="65:48" pos:end="65:49">-&gt;</operator><name pos:start="65:50" pos:end="65:51">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="67:9" pos:end="69:52"><if pos:start="67:9" pos:end="69:52">if <condition pos:start="67:12" pos:end="67:35">(<expr pos:start="67:13" pos:end="67:34"><name pos:start="67:13" pos:end="67:34"><name pos:start="67:13" pos:end="67:16">band</name><operator pos:start="67:17" pos:end="67:18">-&gt;</operator><name pos:start="67:19" pos:end="67:34">checksum_present</name></name></expr>)</condition><block type="pseudo" pos:start="69:13" pos:end="69:52"><block_content pos:start="69:13" pos:end="69:52">

            <expr_stmt pos:start="69:13" pos:end="69:52"><expr pos:start="69:13" pos:end="69:51"><name pos:start="69:13" pos:end="69:26"><name pos:start="69:13" pos:end="69:16">band</name><operator pos:start="69:17" pos:end="69:18">-&gt;</operator><name pos:start="69:19" pos:end="69:26">checksum</name></name> <operator pos:start="69:28" pos:end="69:28">=</operator> <call pos:start="69:30" pos:end="69:51"><name pos:start="69:30" pos:end="69:37">get_bits</name><argument_list pos:start="69:38" pos:end="69:51">(<argument pos:start="69:39" pos:end="69:46"><expr pos:start="69:39" pos:end="69:46"><operator pos:start="69:39" pos:end="69:39">&amp;</operator><name pos:start="69:40" pos:end="69:46"><name pos:start="69:40" pos:end="69:42">ctx</name><operator pos:start="69:43" pos:end="69:44">-&gt;</operator><name pos:start="69:45" pos:end="69:46">gb</name></name></expr></argument>, <argument pos:start="69:49" pos:end="69:50"><expr pos:start="69:49" pos:end="69:50"><literal type="number" pos:start="69:49" pos:end="69:50">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="73:9" pos:end="73:37"><expr pos:start="73:9" pos:end="73:36"><name pos:start="73:9" pos:end="73:12">indx</name> <operator pos:start="73:14" pos:end="73:14">=</operator> <call pos:start="73:16" pos:end="73:36"><name pos:start="73:16" pos:end="73:23">get_bits</name><argument_list pos:start="73:24" pos:end="73:36">(<argument pos:start="73:25" pos:end="73:32"><expr pos:start="73:25" pos:end="73:32"><operator pos:start="73:25" pos:end="73:25">&amp;</operator><name pos:start="73:26" pos:end="73:32"><name pos:start="73:26" pos:end="73:28">ctx</name><operator pos:start="73:29" pos:end="73:30">-&gt;</operator><name pos:start="73:31" pos:end="73:32">gb</name></name></expr></argument>, <argument pos:start="73:35" pos:end="73:35"><expr pos:start="73:35" pos:end="73:35"><literal type="number" pos:start="73:35" pos:end="73:35">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="75:9" pos:end="81:9"><if pos:start="75:9" pos:end="81:9">if <condition pos:start="75:12" pos:end="75:22">(<expr pos:start="75:13" pos:end="75:21"><name pos:start="75:13" pos:end="75:16">indx</name> <operator pos:start="75:18" pos:end="75:19">==</operator> <literal type="number" pos:start="75:21" pos:end="75:21">3</literal></expr>)</condition> <block pos:start="75:24" pos:end="81:9">{<block_content pos:start="77:13" pos:end="79:39">

            <expr_stmt pos:start="77:13" pos:end="77:65"><expr pos:start="77:13" pos:end="77:64"><call pos:start="77:13" pos:end="77:64"><name pos:start="77:13" pos:end="77:18">av_log</name><argument_list pos:start="77:19" pos:end="77:64">(<argument pos:start="77:20" pos:end="77:24"><expr pos:start="77:20" pos:end="77:24"><name pos:start="77:20" pos:end="77:24">avctx</name></expr></argument>, <argument pos:start="77:27" pos:end="77:38"><expr pos:start="77:27" pos:end="77:38"><name pos:start="77:27" pos:end="77:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="77:41" pos:end="77:63"><expr pos:start="77:41" pos:end="77:63"><literal type="string" pos:start="77:41" pos:end="77:63">"Invalid block size!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="79:13" pos:end="79:39">return <expr pos:start="79:20" pos:end="79:38"><name pos:start="79:20" pos:end="79:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:36"><expr pos:start="83:9" pos:end="83:35"><name pos:start="83:9" pos:end="83:21"><name pos:start="83:9" pos:end="83:12">band</name><operator pos:start="83:13" pos:end="83:14">-&gt;</operator><name pos:start="83:15" pos:end="83:21">mb_size</name></name>  <operator pos:start="83:24" pos:end="83:24">=</operator> <literal type="number" pos:start="83:26" pos:end="83:27">16</literal> <operator pos:start="83:29" pos:end="83:30">&gt;&gt;</operator> <name pos:start="83:32" pos:end="83:35">indx</name></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:42"><expr pos:start="85:9" pos:end="85:41"><name pos:start="85:9" pos:end="85:22"><name pos:start="85:9" pos:end="85:12">band</name><operator pos:start="85:13" pos:end="85:14">-&gt;</operator><name pos:start="85:15" pos:end="85:22">blk_size</name></name> <operator pos:start="85:24" pos:end="85:24">=</operator> <literal type="number" pos:start="85:26" pos:end="85:26">8</literal> <operator pos:start="85:28" pos:end="85:29">&gt;&gt;</operator> <operator pos:start="85:31" pos:end="85:31">(</operator><name pos:start="85:32" pos:end="85:35">indx</name> <operator pos:start="85:37" pos:end="85:38">&gt;&gt;</operator> <literal type="number" pos:start="85:40" pos:end="85:40">1</literal><operator pos:start="85:41" pos:end="85:41">)</operator></expr>;</expr_stmt>



        <expr_stmt pos:start="89:9" pos:end="89:51"><expr pos:start="89:9" pos:end="89:50"><name pos:start="89:9" pos:end="89:24"><name pos:start="89:9" pos:end="89:12">band</name><operator pos:start="89:13" pos:end="89:14">-&gt;</operator><name pos:start="89:15" pos:end="89:24">inherit_mv</name></name>     <operator pos:start="89:30" pos:end="89:30">=</operator> <call pos:start="89:32" pos:end="89:50"><name pos:start="89:32" pos:end="89:40">get_bits1</name><argument_list pos:start="89:41" pos:end="89:50">(<argument pos:start="89:42" pos:end="89:49"><expr pos:start="89:42" pos:end="89:49"><operator pos:start="89:42" pos:end="89:42">&amp;</operator><name pos:start="89:43" pos:end="89:49"><name pos:start="89:43" pos:end="89:45">ctx</name><operator pos:start="89:46" pos:end="89:47">-&gt;</operator><name pos:start="89:48" pos:end="89:49">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:51"><expr pos:start="91:9" pos:end="91:50"><name pos:start="91:9" pos:end="91:28"><name pos:start="91:9" pos:end="91:12">band</name><operator pos:start="91:13" pos:end="91:14">-&gt;</operator><name pos:start="91:15" pos:end="91:28">inherit_qdelta</name></name> <operator pos:start="91:30" pos:end="91:30">=</operator> <call pos:start="91:32" pos:end="91:50"><name pos:start="91:32" pos:end="91:40">get_bits1</name><argument_list pos:start="91:41" pos:end="91:50">(<argument pos:start="91:42" pos:end="91:49"><expr pos:start="91:42" pos:end="91:49"><operator pos:start="91:42" pos:end="91:42">&amp;</operator><name pos:start="91:43" pos:end="91:49"><name pos:start="91:43" pos:end="91:45">ctx</name><operator pos:start="91:46" pos:end="91:47">-&gt;</operator><name pos:start="91:48" pos:end="91:49">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="95:9" pos:end="95:49"><expr pos:start="95:9" pos:end="95:48"><name pos:start="95:9" pos:end="95:24"><name pos:start="95:9" pos:end="95:12">band</name><operator pos:start="95:13" pos:end="95:14">-&gt;</operator><name pos:start="95:15" pos:end="95:24">glob_quant</name></name> <operator pos:start="95:26" pos:end="95:26">=</operator> <call pos:start="95:28" pos:end="95:48"><name pos:start="95:28" pos:end="95:35">get_bits</name><argument_list pos:start="95:36" pos:end="95:48">(<argument pos:start="95:37" pos:end="95:44"><expr pos:start="95:37" pos:end="95:44"><operator pos:start="95:37" pos:end="95:37">&amp;</operator><name pos:start="95:38" pos:end="95:44"><name pos:start="95:38" pos:end="95:40">ctx</name><operator pos:start="95:41" pos:end="95:42">-&gt;</operator><name pos:start="95:43" pos:end="95:44">gb</name></name></expr></argument>, <argument pos:start="95:47" pos:end="95:47"><expr pos:start="95:47" pos:end="95:47"><literal type="number" pos:start="95:47" pos:end="95:47">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="99:9" pos:end="195:9"><if pos:start="99:9" pos:end="195:9">if <condition pos:start="99:12" pos:end="99:71">(<expr pos:start="99:13" pos:end="99:70"><operator pos:start="99:13" pos:end="99:13">!</operator><call pos:start="99:14" pos:end="99:32"><name pos:start="99:14" pos:end="99:22">get_bits1</name><argument_list pos:start="99:23" pos:end="99:32">(<argument pos:start="99:24" pos:end="99:31"><expr pos:start="99:24" pos:end="99:31"><operator pos:start="99:24" pos:end="99:24">&amp;</operator><name pos:start="99:25" pos:end="99:31"><name pos:start="99:25" pos:end="99:27">ctx</name><operator pos:start="99:28" pos:end="99:29">-&gt;</operator><name pos:start="99:30" pos:end="99:31">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="99:34" pos:end="99:35">||</operator> <name pos:start="99:37" pos:end="99:51"><name pos:start="99:37" pos:end="99:39">ctx</name><operator pos:start="99:40" pos:end="99:41">-&gt;</operator><name pos:start="99:42" pos:end="99:51">frame_type</name></name> <operator pos:start="99:53" pos:end="99:54">==</operator> <name pos:start="99:56" pos:end="99:70">FRAMETYPE_INTRA</name></expr>)</condition> <block pos:start="99:73" pos:end="195:9">{<block_content pos:start="101:13" pos:end="193:40">

            <expr_stmt pos:start="101:13" pos:end="101:49"><expr pos:start="101:13" pos:end="101:48"><name pos:start="101:13" pos:end="101:24">transform_id</name> <operator pos:start="101:26" pos:end="101:26">=</operator> <call pos:start="101:28" pos:end="101:48"><name pos:start="101:28" pos:end="101:35">get_bits</name><argument_list pos:start="101:36" pos:end="101:48">(<argument pos:start="101:37" pos:end="101:44"><expr pos:start="101:37" pos:end="101:44"><operator pos:start="101:37" pos:end="101:37">&amp;</operator><name pos:start="101:38" pos:end="101:44"><name pos:start="101:38" pos:end="101:40">ctx</name><operator pos:start="101:41" pos:end="101:42">-&gt;</operator><name pos:start="101:43" pos:end="101:44">gb</name></name></expr></argument>, <argument pos:start="101:47" pos:end="101:47"><expr pos:start="101:47" pos:end="101:47"><literal type="number" pos:start="101:47" pos:end="101:47">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="103:13" pos:end="111:13"><if pos:start="103:13" pos:end="111:13">if <condition pos:start="103:16" pos:end="105:52">(<expr pos:start="103:17" pos:end="105:51"><name pos:start="103:17" pos:end="103:28">transform_id</name> <operator pos:start="103:30" pos:end="103:31">&gt;=</operator> <call pos:start="103:33" pos:end="103:58"><name pos:start="103:33" pos:end="103:46">FF_ARRAY_ELEMS</name><argument_list pos:start="103:47" pos:end="103:58">(<argument pos:start="103:48" pos:end="103:57"><expr pos:start="103:48" pos:end="103:57"><name pos:start="103:48" pos:end="103:57">transforms</name></expr></argument>)</argument_list></call> <operator pos:start="103:60" pos:end="103:61">||</operator>

                <operator pos:start="105:17" pos:end="105:17">!</operator><name pos:start="105:18" pos:end="105:41"><name pos:start="105:18" pos:end="105:27">transforms</name><index pos:start="105:28" pos:end="105:41">[<expr pos:start="105:29" pos:end="105:40"><name pos:start="105:29" pos:end="105:40">transform_id</name></expr>]</index></name><operator pos:start="105:42" pos:end="105:42">.</operator><name pos:start="105:43" pos:end="105:51">inv_trans</name></expr>)</condition> <block pos:start="105:54" pos:end="111:13">{<block_content pos:start="107:17" pos:end="109:44">

                <expr_stmt pos:start="107:17" pos:end="107:93"><expr pos:start="107:17" pos:end="107:92"><call pos:start="107:17" pos:end="107:92"><name pos:start="107:17" pos:end="107:37">av_log_ask_for_sample</name><argument_list pos:start="107:38" pos:end="107:92">(<argument pos:start="107:39" pos:end="107:43"><expr pos:start="107:39" pos:end="107:43"><name pos:start="107:39" pos:end="107:43">avctx</name></expr></argument>, <argument pos:start="107:46" pos:end="107:77"><expr pos:start="107:46" pos:end="107:77"><literal type="string" pos:start="107:46" pos:end="107:77">"Unimplemented transform: %d!\n"</literal></expr></argument>, <argument pos:start="107:80" pos:end="107:91"><expr pos:start="107:80" pos:end="107:91"><name pos:start="107:80" pos:end="107:91">transform_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="109:17" pos:end="109:44">return <expr pos:start="109:24" pos:end="109:43"><name pos:start="109:24" pos:end="109:43">AVERROR_PATCHWELCOME</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="113:13" pos:end="121:13"><if pos:start="113:13" pos:end="121:13">if <condition pos:start="113:16" pos:end="115:36">(<expr pos:start="113:17" pos:end="115:35"><operator pos:start="113:17" pos:end="113:17">(</operator><name pos:start="113:18" pos:end="113:29">transform_id</name> <operator pos:start="113:31" pos:end="113:32">&gt;=</operator> <literal type="number" pos:start="113:34" pos:end="113:34">7</literal> <operator pos:start="113:36" pos:end="113:37">&amp;&amp;</operator> <name pos:start="113:39" pos:end="113:50">transform_id</name> <operator pos:start="113:52" pos:end="113:53">&lt;=</operator> <literal type="number" pos:start="113:55" pos:end="113:55">9</literal><operator pos:start="113:56" pos:end="113:56">)</operator> <operator pos:start="113:58" pos:end="113:59">||</operator>

                 <name pos:start="115:18" pos:end="115:29">transform_id</name> <operator pos:start="115:31" pos:end="115:32">==</operator> <literal type="number" pos:start="115:34" pos:end="115:35">17</literal></expr>)</condition> <block pos:start="115:38" pos:end="121:13">{<block_content pos:start="117:17" pos:end="119:44">

                <expr_stmt pos:start="117:17" pos:end="117:83"><expr pos:start="117:17" pos:end="117:82"><call pos:start="117:17" pos:end="117:82"><name pos:start="117:17" pos:end="117:37">av_log_ask_for_sample</name><argument_list pos:start="117:38" pos:end="117:82">(<argument pos:start="117:39" pos:end="117:43"><expr pos:start="117:39" pos:end="117:43"><name pos:start="117:39" pos:end="117:43">avctx</name></expr></argument>, <argument pos:start="117:46" pos:end="117:81"><expr pos:start="117:46" pos:end="117:81"><literal type="string" pos:start="117:46" pos:end="117:81">"DCT transform not supported yet!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="119:17" pos:end="119:44">return <expr pos:start="119:24" pos:end="119:43"><name pos:start="119:24" pos:end="119:43">AVERROR_PATCHWELCOME</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="125:13" pos:end="134:0"><if pos:start="125:13" pos:end="134:0">if <condition pos:start="125:16" pos:end="125:56">(<expr pos:start="125:17" pos:end="125:55"><name pos:start="125:17" pos:end="125:28">transform_id</name> <operator pos:start="125:30" pos:end="125:30">&lt;</operator> <literal type="number" pos:start="125:32" pos:end="125:33">10</literal> <operator pos:start="125:35" pos:end="125:36">&amp;&amp;</operator> <name pos:start="125:38" pos:end="125:51"><name pos:start="125:38" pos:end="125:41">band</name><operator pos:start="125:42" pos:end="125:43">-&gt;</operator><name pos:start="125:44" pos:end="125:51">blk_size</name></name> <operator pos:start="125:53" pos:end="125:53">&lt;</operator> <literal type="number" pos:start="125:55" pos:end="125:55">8</literal></expr>)</condition> <block pos:start="125:58" pos:end="134:0">{<block_content pos:start="127:17" pos:end="129:43">

                <expr_stmt pos:start="127:17" pos:end="127:71"><expr pos:start="127:17" pos:end="127:70"><call pos:start="127:17" pos:end="127:70"><name pos:start="127:17" pos:end="127:22">av_log</name><argument_list pos:start="127:23" pos:end="127:70">(<argument pos:start="127:24" pos:end="127:28"><expr pos:start="127:24" pos:end="127:28"><name pos:start="127:24" pos:end="127:28">avctx</name></expr></argument>, <argument pos:start="127:31" pos:end="127:42"><expr pos:start="127:31" pos:end="127:42"><name pos:start="127:31" pos:end="127:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="127:45" pos:end="127:69"><expr pos:start="127:45" pos:end="127:69"><literal type="string" pos:start="127:45" pos:end="127:69">"wrong transform size!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="129:17" pos:end="129:43">return <expr pos:start="129:24" pos:end="129:42"><name pos:start="129:24" pos:end="129:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

<cpp:if pos:start="133:1" pos:end="133:24">#<cpp:directive pos:start="133:2" pos:end="133:3">if</cpp:directive> <expr pos:start="133:5" pos:end="133:24"><name pos:start="133:5" pos:end="133:24">IVI4_STREAM_ANALYSER</name></expr></cpp:if>

            <if_stmt pos:start="135:13" pos:end="140:0"><if pos:start="135:13" pos:end="140:0">if <condition pos:start="135:16" pos:end="135:79">(<expr pos:start="135:17" pos:end="135:78"><operator pos:start="135:17" pos:end="135:17">(</operator><name pos:start="135:18" pos:end="135:29">transform_id</name> <operator pos:start="135:31" pos:end="135:32">&gt;=</operator> <literal type="number" pos:start="135:34" pos:end="135:34">0</literal> <operator pos:start="135:36" pos:end="135:37">&amp;&amp;</operator> <name pos:start="135:39" pos:end="135:50">transform_id</name> <operator pos:start="135:52" pos:end="135:53">&lt;=</operator> <literal type="number" pos:start="135:55" pos:end="135:55">2</literal><operator pos:start="135:56" pos:end="135:56">)</operator> <operator pos:start="135:58" pos:end="135:59">||</operator> <name pos:start="135:61" pos:end="135:72">transform_id</name> <operator pos:start="135:74" pos:end="135:75">==</operator> <literal type="number" pos:start="135:77" pos:end="135:78">10</literal></expr>)</condition><block type="pseudo" pos:start="137:17" pos:end="140:0"><block_content pos:start="137:17" pos:end="140:0">

                <expr_stmt pos:start="137:17" pos:end="140:0"><expr pos:start="137:17" pos:end="137:34"><name pos:start="137:17" pos:end="137:30"><name pos:start="137:17" pos:end="137:19">ctx</name><operator pos:start="137:20" pos:end="137:21">-&gt;</operator><name pos:start="137:22" pos:end="137:30">uses_haar</name></name> <operator pos:start="137:32" pos:end="137:32">=</operator> <literal type="number" pos:start="137:34" pos:end="137:34">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="139:1" pos:end="139:6">#<cpp:directive pos:start="139:2" pos:end="139:6">endif</cpp:directive></cpp:endif>



            <expr_stmt pos:start="143:13" pos:end="143:69"><expr pos:start="143:13" pos:end="143:68"><name pos:start="143:13" pos:end="143:31"><name pos:start="143:13" pos:end="143:16">band</name><operator pos:start="143:17" pos:end="143:18">-&gt;</operator><name pos:start="143:19" pos:end="143:31">inv_transform</name></name> <operator pos:start="143:33" pos:end="143:33">=</operator> <name pos:start="143:35" pos:end="143:58"><name pos:start="143:35" pos:end="143:44">transforms</name><index pos:start="143:45" pos:end="143:58">[<expr pos:start="143:46" pos:end="143:57"><name pos:start="143:46" pos:end="143:57">transform_id</name></expr>]</index></name><operator pos:start="143:59" pos:end="143:59">.</operator><name pos:start="143:60" pos:end="143:68">inv_trans</name></expr>;</expr_stmt>

            <expr_stmt pos:start="145:13" pos:end="145:68"><expr pos:start="145:13" pos:end="145:67"><name pos:start="145:13" pos:end="145:30"><name pos:start="145:13" pos:end="145:16">band</name><operator pos:start="145:17" pos:end="145:18">-&gt;</operator><name pos:start="145:19" pos:end="145:30">dc_transform</name></name>  <operator pos:start="145:33" pos:end="145:33">=</operator> <name pos:start="145:35" pos:end="145:58"><name pos:start="145:35" pos:end="145:44">transforms</name><index pos:start="145:45" pos:end="145:58">[<expr pos:start="145:46" pos:end="145:57"><name pos:start="145:46" pos:end="145:57">transform_id</name></expr>]</index></name><operator pos:start="145:59" pos:end="145:59">.</operator><name pos:start="145:60" pos:end="145:67">dc_trans</name></expr>;</expr_stmt>

            <expr_stmt pos:start="147:13" pos:end="147:71"><expr pos:start="147:13" pos:end="147:70"><name pos:start="147:13" pos:end="147:29"><name pos:start="147:13" pos:end="147:16">band</name><operator pos:start="147:17" pos:end="147:18">-&gt;</operator><name pos:start="147:19" pos:end="147:29">is_2d_trans</name></name>   <operator pos:start="147:33" pos:end="147:33">=</operator> <name pos:start="147:35" pos:end="147:58"><name pos:start="147:35" pos:end="147:44">transforms</name><index pos:start="147:45" pos:end="147:58">[<expr pos:start="147:46" pos:end="147:57"><name pos:start="147:46" pos:end="147:57">transform_id</name></expr>]</index></name><operator pos:start="147:59" pos:end="147:59">.</operator><name pos:start="147:60" pos:end="147:70">is_2d_trans</name></expr>;</expr_stmt>

            <expr_stmt pos:start="149:13" pos:end="149:62"><expr pos:start="149:13" pos:end="149:61"><name pos:start="149:13" pos:end="149:32"><name pos:start="149:13" pos:end="149:16">band</name><operator pos:start="149:17" pos:end="149:18">-&gt;</operator><name pos:start="149:19" pos:end="149:32">transform_size</name></name><operator pos:start="149:33" pos:end="149:33">=</operator> <ternary pos:start="149:35" pos:end="149:61"><condition pos:start="149:35" pos:end="149:55"><expr pos:start="149:35" pos:end="149:53"><operator pos:start="149:35" pos:end="149:35">(</operator><name pos:start="149:36" pos:end="149:47">transform_id</name> <operator pos:start="149:49" pos:end="149:49">&lt;</operator> <literal type="number" pos:start="149:51" pos:end="149:52">10</literal><operator pos:start="149:53" pos:end="149:53">)</operator></expr> ?</condition><then pos:start="149:57" pos:end="149:57"> <expr pos:start="149:57" pos:end="149:57"><literal type="number" pos:start="149:57" pos:end="149:57">8</literal></expr> </then><else pos:start="149:59" pos:end="149:61">: <expr pos:start="149:61" pos:end="149:61"><literal type="number" pos:start="149:61" pos:end="149:61">4</literal></expr></else></ternary></expr>;</expr_stmt>



            <expr_stmt pos:start="153:13" pos:end="153:46"><expr pos:start="153:13" pos:end="153:45"><name pos:start="153:13" pos:end="153:21">scan_indx</name> <operator pos:start="153:23" pos:end="153:23">=</operator> <call pos:start="153:25" pos:end="153:45"><name pos:start="153:25" pos:end="153:32">get_bits</name><argument_list pos:start="153:33" pos:end="153:45">(<argument pos:start="153:34" pos:end="153:41"><expr pos:start="153:34" pos:end="153:41"><operator pos:start="153:34" pos:end="153:34">&amp;</operator><name pos:start="153:35" pos:end="153:41"><name pos:start="153:35" pos:end="153:37">ctx</name><operator pos:start="153:38" pos:end="153:39">-&gt;</operator><name pos:start="153:40" pos:end="153:41">gb</name></name></expr></argument>, <argument pos:start="153:44" pos:end="153:44"><expr pos:start="153:44" pos:end="153:44"><literal type="number" pos:start="153:44" pos:end="153:44">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="155:13" pos:end="161:13"><if pos:start="155:13" pos:end="161:13">if <condition pos:start="155:16" pos:end="155:69">(<expr pos:start="155:17" pos:end="155:68"><operator pos:start="155:17" pos:end="155:17">(</operator><name pos:start="155:18" pos:end="155:26">scan_indx</name><operator pos:start="155:27" pos:end="155:27">&gt;</operator><literal type="number" pos:start="155:28" pos:end="155:28">4</literal> <operator pos:start="155:30" pos:end="155:31">&amp;&amp;</operator> <name pos:start="155:33" pos:end="155:41">scan_indx</name><operator pos:start="155:42" pos:end="155:42">&lt;</operator><literal type="number" pos:start="155:43" pos:end="155:44">10</literal><operator pos:start="155:45" pos:end="155:45">)</operator> <operator pos:start="155:47" pos:end="155:48">!=</operator> <operator pos:start="155:50" pos:end="155:50">(</operator><name pos:start="155:51" pos:end="155:64"><name pos:start="155:51" pos:end="155:54">band</name><operator pos:start="155:55" pos:end="155:56">-&gt;</operator><name pos:start="155:57" pos:end="155:64">blk_size</name></name><operator pos:start="155:65" pos:end="155:66">==</operator><literal type="number" pos:start="155:67" pos:end="155:67">4</literal><operator pos:start="155:68" pos:end="155:68">)</operator></expr>)</condition> <block pos:start="155:71" pos:end="161:13">{<block_content pos:start="157:17" pos:end="159:43">

                <expr_stmt pos:start="157:17" pos:end="157:73"><expr pos:start="157:17" pos:end="157:72"><call pos:start="157:17" pos:end="157:72"><name pos:start="157:17" pos:end="157:22">av_log</name><argument_list pos:start="157:23" pos:end="157:72">(<argument pos:start="157:24" pos:end="157:28"><expr pos:start="157:24" pos:end="157:28"><name pos:start="157:24" pos:end="157:28">avctx</name></expr></argument>, <argument pos:start="157:31" pos:end="157:42"><expr pos:start="157:31" pos:end="157:42"><name pos:start="157:31" pos:end="157:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="157:45" pos:end="157:71"><expr pos:start="157:45" pos:end="157:71"><literal type="string" pos:start="157:45" pos:end="157:71">"mismatching scan table!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="159:17" pos:end="159:43">return <expr pos:start="159:24" pos:end="159:42"><name pos:start="159:24" pos:end="159:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="163:13" pos:end="169:13"><if pos:start="163:13" pos:end="169:13">if <condition pos:start="163:16" pos:end="163:32">(<expr pos:start="163:17" pos:end="163:31"><name pos:start="163:17" pos:end="163:25">scan_indx</name> <operator pos:start="163:27" pos:end="163:28">==</operator> <literal type="number" pos:start="163:30" pos:end="163:31">15</literal></expr>)</condition> <block pos:start="163:34" pos:end="169:13">{<block_content pos:start="165:17" pos:end="167:43">

                <expr_stmt pos:start="165:17" pos:end="165:82"><expr pos:start="165:17" pos:end="165:81"><call pos:start="165:17" pos:end="165:81"><name pos:start="165:17" pos:end="165:22">av_log</name><argument_list pos:start="165:23" pos:end="165:81">(<argument pos:start="165:24" pos:end="165:28"><expr pos:start="165:24" pos:end="165:28"><name pos:start="165:24" pos:end="165:28">avctx</name></expr></argument>, <argument pos:start="165:31" pos:end="165:42"><expr pos:start="165:31" pos:end="165:42"><name pos:start="165:31" pos:end="165:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="165:45" pos:end="165:80"><expr pos:start="165:45" pos:end="165:80"><literal type="string" pos:start="165:45" pos:end="165:80">"Custom scan pattern encountered!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="167:17" pos:end="167:43">return <expr pos:start="167:24" pos:end="167:42"><name pos:start="167:24" pos:end="167:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="171:13" pos:end="171:54"><expr pos:start="171:13" pos:end="171:53"><name pos:start="171:13" pos:end="171:22"><name pos:start="171:13" pos:end="171:16">band</name><operator pos:start="171:17" pos:end="171:18">-&gt;</operator><name pos:start="171:19" pos:end="171:22">scan</name></name> <operator pos:start="171:24" pos:end="171:24">=</operator> <name pos:start="171:26" pos:end="171:53"><name pos:start="171:26" pos:end="171:42">scan_index_to_tab</name><index pos:start="171:43" pos:end="171:53">[<expr pos:start="171:44" pos:end="171:52"><name pos:start="171:44" pos:end="171:52">scan_indx</name></expr>]</index></name></expr>;</expr_stmt>



            <expr_stmt pos:start="175:13" pos:end="175:46"><expr pos:start="175:13" pos:end="175:45"><name pos:start="175:13" pos:end="175:21">quant_mat</name> <operator pos:start="175:23" pos:end="175:23">=</operator> <call pos:start="175:25" pos:end="175:45"><name pos:start="175:25" pos:end="175:32">get_bits</name><argument_list pos:start="175:33" pos:end="175:45">(<argument pos:start="175:34" pos:end="175:41"><expr pos:start="175:34" pos:end="175:41"><operator pos:start="175:34" pos:end="175:34">&amp;</operator><name pos:start="175:35" pos:end="175:41"><name pos:start="175:35" pos:end="175:37">ctx</name><operator pos:start="175:38" pos:end="175:39">-&gt;</operator><name pos:start="175:40" pos:end="175:41">gb</name></name></expr></argument>, <argument pos:start="175:44" pos:end="175:44"><expr pos:start="175:44" pos:end="175:44"><literal type="number" pos:start="175:44" pos:end="175:44">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="177:13" pos:end="183:13"><if pos:start="177:13" pos:end="183:13">if <condition pos:start="177:16" pos:end="177:32">(<expr pos:start="177:17" pos:end="177:31"><name pos:start="177:17" pos:end="177:25">quant_mat</name> <operator pos:start="177:27" pos:end="177:28">==</operator> <literal type="number" pos:start="177:30" pos:end="177:31">31</literal></expr>)</condition> <block pos:start="177:34" pos:end="183:13">{<block_content pos:start="179:17" pos:end="181:43">

                <expr_stmt pos:start="179:17" pos:end="179:82"><expr pos:start="179:17" pos:end="179:81"><call pos:start="179:17" pos:end="179:81"><name pos:start="179:17" pos:end="179:22">av_log</name><argument_list pos:start="179:23" pos:end="179:81">(<argument pos:start="179:24" pos:end="179:28"><expr pos:start="179:24" pos:end="179:28"><name pos:start="179:24" pos:end="179:28">avctx</name></expr></argument>, <argument pos:start="179:31" pos:end="179:42"><expr pos:start="179:31" pos:end="179:42"><name pos:start="179:31" pos:end="179:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="179:45" pos:end="179:80"><expr pos:start="179:45" pos:end="179:80"><literal type="string" pos:start="179:45" pos:end="179:80">"Custom quant matrix encountered!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="181:17" pos:end="181:43">return <expr pos:start="181:24" pos:end="181:42"><name pos:start="181:24" pos:end="181:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="185:13" pos:end="191:13"><if pos:start="185:13" pos:end="191:13">if <condition pos:start="185:16" pos:end="185:31">(<expr pos:start="185:17" pos:end="185:30"><name pos:start="185:17" pos:end="185:25">quant_mat</name> <operator pos:start="185:27" pos:end="185:27">&gt;</operator> <literal type="number" pos:start="185:29" pos:end="185:30">21</literal></expr>)</condition> <block pos:start="185:33" pos:end="191:13">{<block_content pos:start="187:17" pos:end="189:43">

                <expr_stmt pos:start="187:17" pos:end="187:83"><expr pos:start="187:17" pos:end="187:82"><call pos:start="187:17" pos:end="187:82"><name pos:start="187:17" pos:end="187:22">av_log</name><argument_list pos:start="187:23" pos:end="187:82">(<argument pos:start="187:24" pos:end="187:28"><expr pos:start="187:24" pos:end="187:28"><name pos:start="187:24" pos:end="187:28">avctx</name></expr></argument>, <argument pos:start="187:31" pos:end="187:42"><expr pos:start="187:31" pos:end="187:42"><name pos:start="187:31" pos:end="187:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="187:45" pos:end="187:81"><expr pos:start="187:45" pos:end="187:81"><literal type="string" pos:start="187:45" pos:end="187:81">"Invalid quant matrix encountered!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="189:17" pos:end="189:43">return <expr pos:start="189:24" pos:end="189:42"><name pos:start="189:24" pos:end="189:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="193:13" pos:end="193:40"><expr pos:start="193:13" pos:end="193:39"><name pos:start="193:13" pos:end="193:27"><name pos:start="193:13" pos:end="193:16">band</name><operator pos:start="193:17" pos:end="193:18">-&gt;</operator><name pos:start="193:19" pos:end="193:27">quant_mat</name></name> <operator pos:start="193:29" pos:end="193:29">=</operator> <name pos:start="193:31" pos:end="193:39">quant_mat</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="199:9" pos:end="199:43">/* decode block huffman codebook */</comment>

        <if_stmt pos:start="201:9" pos:end="205:39"><if pos:start="201:9" pos:end="205:39">if <condition pos:start="201:12" pos:end="203:56">(<expr pos:start="201:13" pos:end="203:55"><call pos:start="201:13" pos:end="203:55"><name pos:start="201:13" pos:end="201:32">ff_ivi_dec_huff_desc</name><argument_list pos:start="201:33" pos:end="203:55">(<argument pos:start="201:34" pos:end="201:41"><expr pos:start="201:34" pos:end="201:41"><operator pos:start="201:34" pos:end="201:34">&amp;</operator><name pos:start="201:35" pos:end="201:41"><name pos:start="201:35" pos:end="201:37">ctx</name><operator pos:start="201:38" pos:end="201:39">-&gt;</operator><name pos:start="201:40" pos:end="201:41">gb</name></name></expr></argument>, <argument pos:start="201:44" pos:end="201:62"><expr pos:start="201:44" pos:end="201:62"><call pos:start="201:44" pos:end="201:62"><name pos:start="201:44" pos:end="201:52">get_bits1</name><argument_list pos:start="201:53" pos:end="201:62">(<argument pos:start="201:54" pos:end="201:61"><expr pos:start="201:54" pos:end="201:61"><operator pos:start="201:54" pos:end="201:54">&amp;</operator><name pos:start="201:55" pos:end="201:61"><name pos:start="201:55" pos:end="201:57">ctx</name><operator pos:start="201:58" pos:end="201:59">-&gt;</operator><name pos:start="201:60" pos:end="201:61">gb</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="201:65" pos:end="201:76"><expr pos:start="201:65" pos:end="201:76"><name pos:start="201:65" pos:end="201:76">IVI_BLK_HUFF</name></expr></argument>,

                                 <argument pos:start="203:34" pos:end="203:47"><expr pos:start="203:34" pos:end="203:47"><operator pos:start="203:34" pos:end="203:34">&amp;</operator><name pos:start="203:35" pos:end="203:47"><name pos:start="203:35" pos:end="203:38">band</name><operator pos:start="203:39" pos:end="203:40">-&gt;</operator><name pos:start="203:41" pos:end="203:47">blk_vlc</name></name></expr></argument>, <argument pos:start="203:50" pos:end="203:54"><expr pos:start="203:50" pos:end="203:54"><name pos:start="203:50" pos:end="203:54">avctx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="205:13" pos:end="205:39"><block_content pos:start="205:13" pos:end="205:39">

            <return pos:start="205:13" pos:end="205:39">return <expr pos:start="205:20" pos:end="205:38"><name pos:start="205:20" pos:end="205:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



        <comment type="block" pos:start="209:9" pos:end="209:58">/* select appropriate rvmap table for this band */</comment>

        <expr_stmt pos:start="211:9" pos:end="211:74"><expr pos:start="211:9" pos:end="211:73"><name pos:start="211:9" pos:end="211:23"><name pos:start="211:9" pos:end="211:12">band</name><operator pos:start="211:13" pos:end="211:14">-&gt;</operator><name pos:start="211:15" pos:end="211:23">rvmap_sel</name></name> <operator pos:start="211:25" pos:end="211:25">=</operator> <ternary pos:start="211:27" pos:end="211:73"><condition pos:start="211:27" pos:end="211:47"><expr pos:start="211:27" pos:end="211:45"><call pos:start="211:27" pos:end="211:45"><name pos:start="211:27" pos:end="211:35">get_bits1</name><argument_list pos:start="211:36" pos:end="211:45">(<argument pos:start="211:37" pos:end="211:44"><expr pos:start="211:37" pos:end="211:44"><operator pos:start="211:37" pos:end="211:37">&amp;</operator><name pos:start="211:38" pos:end="211:44"><name pos:start="211:38" pos:end="211:40">ctx</name><operator pos:start="211:41" pos:end="211:42">-&gt;</operator><name pos:start="211:43" pos:end="211:44">gb</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="211:49" pos:end="211:69"> <expr pos:start="211:49" pos:end="211:69"><call pos:start="211:49" pos:end="211:69"><name pos:start="211:49" pos:end="211:56">get_bits</name><argument_list pos:start="211:57" pos:end="211:69">(<argument pos:start="211:58" pos:end="211:65"><expr pos:start="211:58" pos:end="211:65"><operator pos:start="211:58" pos:end="211:58">&amp;</operator><name pos:start="211:59" pos:end="211:65"><name pos:start="211:59" pos:end="211:61">ctx</name><operator pos:start="211:62" pos:end="211:63">-&gt;</operator><name pos:start="211:64" pos:end="211:65">gb</name></name></expr></argument>, <argument pos:start="211:68" pos:end="211:68"><expr pos:start="211:68" pos:end="211:68"><literal type="number" pos:start="211:68" pos:end="211:68">3</literal></expr></argument>)</argument_list></call></expr> </then><else pos:start="211:71" pos:end="211:73">: <expr pos:start="211:73" pos:end="211:73"><literal type="number" pos:start="211:73" pos:end="211:73">8</literal></expr></else></ternary></expr>;</expr_stmt>



        <comment type="block" pos:start="215:9" pos:end="215:57">/* decode rvmap probability corrections if any */</comment>

        <expr_stmt pos:start="217:9" pos:end="217:27"><expr pos:start="217:9" pos:end="217:26"><name pos:start="217:9" pos:end="217:22"><name pos:start="217:9" pos:end="217:12">band</name><operator pos:start="217:13" pos:end="217:14">-&gt;</operator><name pos:start="217:15" pos:end="217:22">num_corr</name></name> <operator pos:start="217:24" pos:end="217:24">=</operator> <literal type="number" pos:start="217:26" pos:end="217:26">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="217:29" pos:end="217:57">/* there is no corrections */</comment>

        <if_stmt pos:start="219:9" pos:end="241:9"><if pos:start="219:9" pos:end="241:9">if <condition pos:start="219:12" pos:end="219:32">(<expr pos:start="219:13" pos:end="219:31"><call pos:start="219:13" pos:end="219:31"><name pos:start="219:13" pos:end="219:21">get_bits1</name><argument_list pos:start="219:22" pos:end="219:31">(<argument pos:start="219:23" pos:end="219:30"><expr pos:start="219:23" pos:end="219:30"><operator pos:start="219:23" pos:end="219:23">&amp;</operator><name pos:start="219:24" pos:end="219:30"><name pos:start="219:24" pos:end="219:26">ctx</name><operator pos:start="219:27" pos:end="219:28">-&gt;</operator><name pos:start="219:29" pos:end="219:30">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="219:34" pos:end="241:9">{<block_content pos:start="221:13" pos:end="239:54">

            <expr_stmt pos:start="221:13" pos:end="221:51"><expr pos:start="221:13" pos:end="221:50"><name pos:start="221:13" pos:end="221:26"><name pos:start="221:13" pos:end="221:16">band</name><operator pos:start="221:17" pos:end="221:18">-&gt;</operator><name pos:start="221:19" pos:end="221:26">num_corr</name></name> <operator pos:start="221:28" pos:end="221:28">=</operator> <call pos:start="221:30" pos:end="221:50"><name pos:start="221:30" pos:end="221:37">get_bits</name><argument_list pos:start="221:38" pos:end="221:50">(<argument pos:start="221:39" pos:end="221:46"><expr pos:start="221:39" pos:end="221:46"><operator pos:start="221:39" pos:end="221:39">&amp;</operator><name pos:start="221:40" pos:end="221:46"><name pos:start="221:40" pos:end="221:42">ctx</name><operator pos:start="221:43" pos:end="221:44">-&gt;</operator><name pos:start="221:45" pos:end="221:46">gb</name></name></expr></argument>, <argument pos:start="221:49" pos:end="221:49"><expr pos:start="221:49" pos:end="221:49"><literal type="number" pos:start="221:49" pos:end="221:49">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="221:53" pos:end="221:88">/* get number of correction pairs */</comment>

            <if_stmt pos:start="223:13" pos:end="231:13"><if pos:start="223:13" pos:end="231:13">if <condition pos:start="223:16" pos:end="223:36">(<expr pos:start="223:17" pos:end="223:35"><name pos:start="223:17" pos:end="223:30"><name pos:start="223:17" pos:end="223:20">band</name><operator pos:start="223:21" pos:end="223:22">-&gt;</operator><name pos:start="223:23" pos:end="223:30">num_corr</name></name> <operator pos:start="223:32" pos:end="223:32">&gt;</operator> <literal type="number" pos:start="223:34" pos:end="223:35">61</literal></expr>)</condition> <block pos:start="223:38" pos:end="231:13">{<block_content pos:start="225:17" pos:end="229:43">

                <expr_stmt pos:start="225:17" pos:end="227:39"><expr pos:start="225:17" pos:end="227:38"><call pos:start="225:17" pos:end="227:38"><name pos:start="225:17" pos:end="225:22">av_log</name><argument_list pos:start="225:23" pos:end="227:38">(<argument pos:start="225:24" pos:end="225:28"><expr pos:start="225:24" pos:end="225:28"><name pos:start="225:24" pos:end="225:28">avctx</name></expr></argument>, <argument pos:start="225:31" pos:end="225:42"><expr pos:start="225:31" pos:end="225:42"><name pos:start="225:31" pos:end="225:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="225:45" pos:end="225:72"><expr pos:start="225:45" pos:end="225:72"><literal type="string" pos:start="225:45" pos:end="225:72">"Too many corrections: %d\n"</literal></expr></argument>,

                       <argument pos:start="227:24" pos:end="227:37"><expr pos:start="227:24" pos:end="227:37"><name pos:start="227:24" pos:end="227:37"><name pos:start="227:24" pos:end="227:27">band</name><operator pos:start="227:28" pos:end="227:29">-&gt;</operator><name pos:start="227:30" pos:end="227:37">num_corr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="229:17" pos:end="229:43">return <expr pos:start="229:24" pos:end="229:42"><name pos:start="229:24" pos:end="229:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="235:13" pos:end="235:39">/* read correction pairs */</comment>

            <for pos:start="237:13" pos:end="239:54">for <control pos:start="237:17" pos:end="237:52">(<init pos:start="237:18" pos:end="237:23"><expr pos:start="237:18" pos:end="237:22"><name pos:start="237:18" pos:end="237:18">i</name> <operator pos:start="237:20" pos:end="237:20">=</operator> <literal type="number" pos:start="237:22" pos:end="237:22">0</literal></expr>;</init> <condition pos:start="237:25" pos:end="237:47"><expr pos:start="237:25" pos:end="237:46"><name pos:start="237:25" pos:end="237:25">i</name> <operator pos:start="237:27" pos:end="237:27">&lt;</operator> <name pos:start="237:29" pos:end="237:42"><name pos:start="237:29" pos:end="237:32">band</name><operator pos:start="237:33" pos:end="237:34">-&gt;</operator><name pos:start="237:35" pos:end="237:42">num_corr</name></name> <operator pos:start="237:44" pos:end="237:44">*</operator> <literal type="number" pos:start="237:46" pos:end="237:46">2</literal></expr>;</condition> <incr pos:start="237:49" pos:end="237:51"><expr pos:start="237:49" pos:end="237:51"><name pos:start="237:49" pos:end="237:49">i</name><operator pos:start="237:50" pos:end="237:51">++</operator></expr></incr>)</control><block type="pseudo" pos:start="239:17" pos:end="239:54"><block_content pos:start="239:17" pos:end="239:54">

                <expr_stmt pos:start="239:17" pos:end="239:54"><expr pos:start="239:17" pos:end="239:53"><name pos:start="239:17" pos:end="239:29"><name pos:start="239:17" pos:end="239:20">band</name><operator pos:start="239:21" pos:end="239:22">-&gt;</operator><name pos:start="239:23" pos:end="239:26">corr</name><index pos:start="239:27" pos:end="239:29">[<expr pos:start="239:28" pos:end="239:28"><name pos:start="239:28" pos:end="239:28">i</name></expr>]</index></name> <operator pos:start="239:31" pos:end="239:31">=</operator> <call pos:start="239:33" pos:end="239:53"><name pos:start="239:33" pos:end="239:40">get_bits</name><argument_list pos:start="239:41" pos:end="239:53">(<argument pos:start="239:42" pos:end="239:49"><expr pos:start="239:42" pos:end="239:49"><operator pos:start="239:42" pos:end="239:42">&amp;</operator><name pos:start="239:43" pos:end="239:49"><name pos:start="239:43" pos:end="239:45">ctx</name><operator pos:start="239:46" pos:end="239:47">-&gt;</operator><name pos:start="239:48" pos:end="239:49">gb</name></name></expr></argument>, <argument pos:start="239:52" pos:end="239:52"><expr pos:start="239:52" pos:end="239:52"><literal type="number" pos:start="239:52" pos:end="239:52">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="247:5" pos:end="259:5"><if pos:start="247:5" pos:end="253:5">if <condition pos:start="247:8" pos:end="247:28">(<expr pos:start="247:9" pos:end="247:27"><name pos:start="247:9" pos:end="247:22"><name pos:start="247:9" pos:end="247:12">band</name><operator pos:start="247:13" pos:end="247:14">-&gt;</operator><name pos:start="247:15" pos:end="247:22">blk_size</name></name> <operator pos:start="247:24" pos:end="247:25">==</operator> <literal type="number" pos:start="247:27" pos:end="247:27">8</literal></expr>)</condition> <block pos:start="247:30" pos:end="253:5">{<block_content pos:start="249:9" pos:end="251:89">

        <expr_stmt pos:start="249:9" pos:end="249:89"><expr pos:start="249:9" pos:end="249:88"><name pos:start="249:9" pos:end="249:24"><name pos:start="249:9" pos:end="249:12">band</name><operator pos:start="249:13" pos:end="249:14">-&gt;</operator><name pos:start="249:15" pos:end="249:24">intra_base</name></name> <operator pos:start="249:26" pos:end="249:26">=</operator> <operator pos:start="249:28" pos:end="249:28">&amp;</operator><name pos:start="249:29" pos:end="249:88"><name pos:start="249:29" pos:end="249:48">ivi4_quant_8x8_intra</name><index pos:start="249:49" pos:end="249:85">[<expr pos:start="249:50" pos:end="249:84"><name pos:start="249:50" pos:end="249:84"><name pos:start="249:50" pos:end="249:67">quant_index_to_tab</name><index pos:start="249:68" pos:end="249:84">[<expr pos:start="249:69" pos:end="249:83"><name pos:start="249:69" pos:end="249:83"><name pos:start="249:69" pos:end="249:72">band</name><operator pos:start="249:73" pos:end="249:74">-&gt;</operator><name pos:start="249:75" pos:end="249:83">quant_mat</name></name></expr>]</index></name></expr>]</index><index pos:start="249:86" pos:end="249:88">[<expr pos:start="249:87" pos:end="249:87"><literal type="number" pos:start="249:87" pos:end="249:87">0</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="251:9" pos:end="251:89"><expr pos:start="251:9" pos:end="251:88"><name pos:start="251:9" pos:end="251:24"><name pos:start="251:9" pos:end="251:12">band</name><operator pos:start="251:13" pos:end="251:14">-&gt;</operator><name pos:start="251:15" pos:end="251:24">inter_base</name></name> <operator pos:start="251:26" pos:end="251:26">=</operator> <operator pos:start="251:28" pos:end="251:28">&amp;</operator><name pos:start="251:29" pos:end="251:88"><name pos:start="251:29" pos:end="251:48">ivi4_quant_8x8_inter</name><index pos:start="251:49" pos:end="251:85">[<expr pos:start="251:50" pos:end="251:84"><name pos:start="251:50" pos:end="251:84"><name pos:start="251:50" pos:end="251:67">quant_index_to_tab</name><index pos:start="251:68" pos:end="251:84">[<expr pos:start="251:69" pos:end="251:83"><name pos:start="251:69" pos:end="251:83"><name pos:start="251:69" pos:end="251:72">band</name><operator pos:start="251:73" pos:end="251:74">-&gt;</operator><name pos:start="251:75" pos:end="251:83">quant_mat</name></name></expr>]</index></name></expr>]</index><index pos:start="251:86" pos:end="251:88">[<expr pos:start="251:87" pos:end="251:87"><literal type="number" pos:start="251:87" pos:end="251:87">0</literal></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="253:7" pos:end="259:5">else <block pos:start="253:12" pos:end="259:5">{<block_content pos:start="255:9" pos:end="257:89">

        <expr_stmt pos:start="255:9" pos:end="255:89"><expr pos:start="255:9" pos:end="255:88"><name pos:start="255:9" pos:end="255:24"><name pos:start="255:9" pos:end="255:12">band</name><operator pos:start="255:13" pos:end="255:14">-&gt;</operator><name pos:start="255:15" pos:end="255:24">intra_base</name></name> <operator pos:start="255:26" pos:end="255:26">=</operator> <operator pos:start="255:28" pos:end="255:28">&amp;</operator><name pos:start="255:29" pos:end="255:88"><name pos:start="255:29" pos:end="255:48">ivi4_quant_4x4_intra</name><index pos:start="255:49" pos:end="255:85">[<expr pos:start="255:50" pos:end="255:84"><name pos:start="255:50" pos:end="255:84"><name pos:start="255:50" pos:end="255:67">quant_index_to_tab</name><index pos:start="255:68" pos:end="255:84">[<expr pos:start="255:69" pos:end="255:83"><name pos:start="255:69" pos:end="255:83"><name pos:start="255:69" pos:end="255:72">band</name><operator pos:start="255:73" pos:end="255:74">-&gt;</operator><name pos:start="255:75" pos:end="255:83">quant_mat</name></name></expr>]</index></name></expr>]</index><index pos:start="255:86" pos:end="255:88">[<expr pos:start="255:87" pos:end="255:87"><literal type="number" pos:start="255:87" pos:end="255:87">0</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="257:9" pos:end="257:89"><expr pos:start="257:9" pos:end="257:88"><name pos:start="257:9" pos:end="257:24"><name pos:start="257:9" pos:end="257:12">band</name><operator pos:start="257:13" pos:end="257:14">-&gt;</operator><name pos:start="257:15" pos:end="257:24">inter_base</name></name> <operator pos:start="257:26" pos:end="257:26">=</operator> <operator pos:start="257:28" pos:end="257:28">&amp;</operator><name pos:start="257:29" pos:end="257:88"><name pos:start="257:29" pos:end="257:48">ivi4_quant_4x4_inter</name><index pos:start="257:49" pos:end="257:85">[<expr pos:start="257:50" pos:end="257:84"><name pos:start="257:50" pos:end="257:84"><name pos:start="257:50" pos:end="257:67">quant_index_to_tab</name><index pos:start="257:68" pos:end="257:84">[<expr pos:start="257:69" pos:end="257:83"><name pos:start="257:69" pos:end="257:83"><name pos:start="257:69" pos:end="257:72">band</name><operator pos:start="257:73" pos:end="257:74">-&gt;</operator><name pos:start="257:75" pos:end="257:83">quant_mat</name></name></expr>]</index></name></expr>]</index><index pos:start="257:86" pos:end="257:88">[<expr pos:start="257:87" pos:end="257:87"><literal type="number" pos:start="257:87" pos:end="257:87">0</literal></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="263:5" pos:end="263:42">/* Indeo 4 doesn't use scale tables */</comment>

    <expr_stmt pos:start="265:5" pos:end="265:29"><expr pos:start="265:5" pos:end="265:28"><name pos:start="265:5" pos:end="265:21"><name pos:start="265:5" pos:end="265:8">band</name><operator pos:start="265:9" pos:end="265:10">-&gt;</operator><name pos:start="265:11" pos:end="265:21">intra_scale</name></name> <operator pos:start="265:23" pos:end="265:23">=</operator> <name pos:start="265:25" pos:end="265:28">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="267:5" pos:end="267:29"><expr pos:start="267:5" pos:end="267:28"><name pos:start="267:5" pos:end="267:21"><name pos:start="267:5" pos:end="267:8">band</name><operator pos:start="267:9" pos:end="267:10">-&gt;</operator><name pos:start="267:11" pos:end="267:21">inter_scale</name></name> <operator pos:start="267:23" pos:end="267:23">=</operator> <name pos:start="267:25" pos:end="267:28">NULL</name></expr>;</expr_stmt>



    <expr_stmt pos:start="271:5" pos:end="271:29"><expr pos:start="271:5" pos:end="271:28"><call pos:start="271:5" pos:end="271:28"><name pos:start="271:5" pos:end="271:18">align_get_bits</name><argument_list pos:start="271:19" pos:end="271:28">(<argument pos:start="271:20" pos:end="271:27"><expr pos:start="271:20" pos:end="271:27"><operator pos:start="271:20" pos:end="271:20">&amp;</operator><name pos:start="271:21" pos:end="271:27"><name pos:start="271:21" pos:end="271:23">ctx</name><operator pos:start="271:24" pos:end="271:25">-&gt;</operator><name pos:start="271:26" pos:end="271:27">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="275:5" pos:end="281:5"><if pos:start="275:5" pos:end="281:5">if <condition pos:start="275:8" pos:end="275:20">(<expr pos:start="275:9" pos:end="275:19"><operator pos:start="275:9" pos:end="275:9">!</operator><name pos:start="275:10" pos:end="275:19"><name pos:start="275:10" pos:end="275:13">band</name><operator pos:start="275:14" pos:end="275:15">-&gt;</operator><name pos:start="275:16" pos:end="275:19">scan</name></name></expr>)</condition> <block pos:start="275:22" pos:end="281:5">{<block_content pos:start="277:9" pos:end="279:35">

        <expr_stmt pos:start="277:9" pos:end="277:60"><expr pos:start="277:9" pos:end="277:59"><call pos:start="277:9" pos:end="277:59"><name pos:start="277:9" pos:end="277:14">av_log</name><argument_list pos:start="277:15" pos:end="277:59">(<argument pos:start="277:16" pos:end="277:20"><expr pos:start="277:16" pos:end="277:20"><name pos:start="277:16" pos:end="277:20">avctx</name></expr></argument>, <argument pos:start="277:23" pos:end="277:34"><expr pos:start="277:23" pos:end="277:34"><name pos:start="277:23" pos:end="277:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="277:37" pos:end="277:58"><expr pos:start="277:37" pos:end="277:58"><literal type="string" pos:start="277:37" pos:end="277:58">"band-&gt;scan not set\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="279:9" pos:end="279:35">return <expr pos:start="279:16" pos:end="279:34"><name pos:start="279:16" pos:end="279:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <return pos:start="285:5" pos:end="285:13">return <expr pos:start="285:12" pos:end="285:12"><literal type="number" pos:start="285:12" pos:end="285:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
