<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/18573.c" pos:tabs="8"><function pos:start="1:1" pos:end="327:1"><type pos:start="1:1" pos:end="1:23"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name> <name pos:start="1:12" pos:end="1:23">coroutine_fn</name></type> <name pos:start="1:25" pos:end="1:44">bdrv_co_block_status</name><parameter_list pos:start="1:45" pos:end="9:69">(<parameter pos:start="1:46" pos:end="1:65"><decl pos:start="1:46" pos:end="1:65"><type pos:start="1:46" pos:end="1:65"><name pos:start="1:46" pos:end="1:61">BlockDriverState</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:65">bs</name></decl></parameter>,

                                             <parameter pos:start="3:46" pos:end="3:59"><decl pos:start="3:46" pos:end="3:59"><type pos:start="3:46" pos:end="3:59"><name pos:start="3:46" pos:end="3:49">bool</name></type> <name pos:start="3:51" pos:end="3:59">want_zero</name></decl></parameter>,

                                             <parameter pos:start="5:46" pos:end="5:59"><decl pos:start="5:46" pos:end="5:59"><type pos:start="5:46" pos:end="5:59"><name pos:start="5:46" pos:end="5:52">int64_t</name></type> <name pos:start="5:54" pos:end="5:59">offset</name></decl></parameter>, <parameter pos:start="5:62" pos:end="5:74"><decl pos:start="5:62" pos:end="5:74"><type pos:start="5:62" pos:end="5:74"><name pos:start="5:62" pos:end="5:68">int64_t</name></type> <name pos:start="5:70" pos:end="5:74">bytes</name></decl></parameter>,

                                             <parameter pos:start="7:46" pos:end="7:58"><decl pos:start="7:46" pos:end="7:58"><type pos:start="7:46" pos:end="7:58"><name pos:start="7:46" pos:end="7:52">int64_t</name> <modifier pos:start="7:54" pos:end="7:54">*</modifier></type><name pos:start="7:55" pos:end="7:58">pnum</name></decl></parameter>, <parameter pos:start="7:61" pos:end="7:72"><decl pos:start="7:61" pos:end="7:72"><type pos:start="7:61" pos:end="7:72"><name pos:start="7:61" pos:end="7:67">int64_t</name> <modifier pos:start="7:69" pos:end="7:69">*</modifier></type><name pos:start="7:70" pos:end="7:72">map</name></decl></parameter>,

                                             <parameter pos:start="9:46" pos:end="9:68"><decl pos:start="9:46" pos:end="9:68"><type pos:start="9:46" pos:end="9:68"><name pos:start="9:46" pos:end="9:61">BlockDriverState</name> <modifier pos:start="9:63" pos:end="9:63">*</modifier><modifier pos:start="9:64" pos:end="9:64">*</modifier></type><name pos:start="9:65" pos:end="9:68">file</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="327:1">{<block_content pos:start="13:5" pos:end="325:15">

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">int64_t</name></type> <name pos:start="13:13" pos:end="13:22">total_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:14"><decl pos:start="15:5" pos:end="15:13"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">int64_t</name></type> <name pos:start="15:13" pos:end="15:13">n</name></decl>;</decl_stmt> <comment type="block" pos:start="15:16" pos:end="15:26">/* bytes */</comment>

    <decl_stmt pos:start="17:5" pos:end="17:12"><decl pos:start="17:5" pos:end="17:11"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:26"><decl pos:start="19:5" pos:end="19:25"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:11">int64_t</name></type> <name pos:start="19:13" pos:end="19:21">local_map</name> <init pos:start="19:23" pos:end="19:25">= <expr pos:start="19:25" pos:end="19:25"><literal type="number" pos:start="19:25" pos:end="19:25">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:40"><decl pos:start="21:5" pos:end="21:39"><type pos:start="21:5" pos:end="21:22"><name pos:start="21:5" pos:end="21:20">BlockDriverState</name> <modifier pos:start="21:22" pos:end="21:22">*</modifier></type><name pos:start="21:23" pos:end="21:32">local_file</name> <init pos:start="21:34" pos:end="21:39">= <expr pos:start="21:36" pos:end="21:39"><name pos:start="21:36" pos:end="21:39">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:42"><decl pos:start="23:5" pos:end="23:26"><type pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:11">int64_t</name></type> <name pos:start="23:13" pos:end="23:26">aligned_offset</name></decl>, <decl pos:start="23:29" pos:end="23:41"><type ref="prev" pos:start="23:5" pos:end="23:11"/><name pos:start="23:29" pos:end="23:41">aligned_bytes</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:19"><decl pos:start="25:5" pos:end="25:18"><type pos:start="25:5" pos:end="25:12"><name pos:start="25:5" pos:end="25:12">uint32_t</name></type> <name pos:start="25:14" pos:end="25:18">align</name></decl>;</decl_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:17"><expr pos:start="29:5" pos:end="29:16"><call pos:start="29:5" pos:end="29:16"><name pos:start="29:5" pos:end="29:10">assert</name><argument_list pos:start="29:11" pos:end="29:16">(<argument pos:start="29:12" pos:end="29:15"><expr pos:start="29:12" pos:end="29:15"><name pos:start="29:12" pos:end="29:15">pnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:14"><expr pos:start="31:5" pos:end="31:13"><operator pos:start="31:5" pos:end="31:5">*</operator><name pos:start="31:6" pos:end="31:9">pnum</name> <operator pos:start="31:11" pos:end="31:11">=</operator> <literal type="number" pos:start="31:13" pos:end="31:13">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:36"><expr pos:start="33:5" pos:end="33:35"><name pos:start="33:5" pos:end="33:14">total_size</name> <operator pos:start="33:16" pos:end="33:16">=</operator> <call pos:start="33:18" pos:end="33:35"><name pos:start="33:18" pos:end="33:31">bdrv_getlength</name><argument_list pos:start="33:32" pos:end="33:35">(<argument pos:start="33:33" pos:end="33:34"><expr pos:start="33:33" pos:end="33:34"><name pos:start="33:33" pos:end="33:34">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:23">(<expr pos:start="35:9" pos:end="35:22"><name pos:start="35:9" pos:end="35:18">total_size</name> <operator pos:start="35:20" pos:end="35:20">&lt;</operator> <literal type="number" pos:start="35:22" pos:end="35:22">0</literal></expr>)</condition> <block pos:start="35:25" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:23">

        <expr_stmt pos:start="37:9" pos:end="37:25"><expr pos:start="37:9" pos:end="37:24"><name pos:start="37:9" pos:end="37:11">ret</name> <operator pos:start="37:13" pos:end="37:13">=</operator> <name pos:start="37:15" pos:end="37:24">total_size</name></expr>;</expr_stmt>

        <goto pos:start="39:9" pos:end="39:23">goto <name pos:start="39:14" pos:end="39:22">early_out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="45:5" pos:end="51:5"><if pos:start="45:5" pos:end="51:5">if <condition pos:start="45:8" pos:end="45:29">(<expr pos:start="45:9" pos:end="45:28"><name pos:start="45:9" pos:end="45:14">offset</name> <operator pos:start="45:16" pos:end="45:17">&gt;=</operator> <name pos:start="45:19" pos:end="45:28">total_size</name></expr>)</condition> <block pos:start="45:31" pos:end="51:5">{<block_content pos:start="47:9" pos:end="49:23">

        <expr_stmt pos:start="47:9" pos:end="47:29"><expr pos:start="47:9" pos:end="47:28"><name pos:start="47:9" pos:end="47:11">ret</name> <operator pos:start="47:13" pos:end="47:13">=</operator> <name pos:start="47:15" pos:end="47:28">BDRV_BLOCK_EOF</name></expr>;</expr_stmt>

        <goto pos:start="49:9" pos:end="49:23">goto <name pos:start="49:14" pos:end="49:22">early_out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="53:5" pos:end="59:5"><if pos:start="53:5" pos:end="59:5">if <condition pos:start="53:8" pos:end="53:15">(<expr pos:start="53:9" pos:end="53:14"><operator pos:start="53:9" pos:end="53:9">!</operator><name pos:start="53:10" pos:end="53:14">bytes</name></expr>)</condition> <block pos:start="53:17" pos:end="59:5">{<block_content pos:start="55:9" pos:end="57:23">

        <expr_stmt pos:start="55:9" pos:end="55:16"><expr pos:start="55:9" pos:end="55:15"><name pos:start="55:9" pos:end="55:11">ret</name> <operator pos:start="55:13" pos:end="55:13">=</operator> <literal type="number" pos:start="55:15" pos:end="55:15">0</literal></expr>;</expr_stmt>

        <goto pos:start="57:9" pos:end="57:23">goto <name pos:start="57:14" pos:end="57:22">early_out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:28"><expr pos:start="63:5" pos:end="63:27"><name pos:start="63:5" pos:end="63:5">n</name> <operator pos:start="63:7" pos:end="63:7">=</operator> <name pos:start="63:9" pos:end="63:18">total_size</name> <operator pos:start="63:20" pos:end="63:20">-</operator> <name pos:start="63:22" pos:end="63:27">offset</name></expr>;</expr_stmt>

    <if_stmt pos:start="65:5" pos:end="69:5"><if pos:start="65:5" pos:end="69:5">if <condition pos:start="65:8" pos:end="65:18">(<expr pos:start="65:9" pos:end="65:17"><name pos:start="65:9" pos:end="65:9">n</name> <operator pos:start="65:11" pos:end="65:11">&lt;</operator> <name pos:start="65:13" pos:end="65:17">bytes</name></expr>)</condition> <block pos:start="65:20" pos:end="69:5">{<block_content pos:start="67:9" pos:end="67:18">

        <expr_stmt pos:start="67:9" pos:end="67:18"><expr pos:start="67:9" pos:end="67:17"><name pos:start="67:9" pos:end="67:13">bytes</name> <operator pos:start="67:15" pos:end="67:15">=</operator> <name pos:start="67:17" pos:end="67:17">n</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>





    <if_stmt pos:start="75:5" pos:end="99:5"><if pos:start="75:5" pos:end="99:5">if <condition pos:start="75:8" pos:end="75:43">(<expr pos:start="75:9" pos:end="75:42"><operator pos:start="75:9" pos:end="75:9">!</operator><name pos:start="75:10" pos:end="75:42"><name pos:start="75:10" pos:end="75:11">bs</name><operator pos:start="75:12" pos:end="75:13">-&gt;</operator><name pos:start="75:14" pos:end="75:16">drv</name><operator pos:start="75:17" pos:end="75:18">-&gt;</operator><name pos:start="75:19" pos:end="75:42">bdrv_co_get_block_status</name></name></expr>)</condition> <block pos:start="75:45" pos:end="99:5">{<block_content pos:start="77:9" pos:end="97:23">

        <expr_stmt pos:start="77:9" pos:end="77:22"><expr pos:start="77:9" pos:end="77:21"><operator pos:start="77:9" pos:end="77:9">*</operator><name pos:start="77:10" pos:end="77:13">pnum</name> <operator pos:start="77:15" pos:end="77:15">=</operator> <name pos:start="77:17" pos:end="77:21">bytes</name></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:53"><expr pos:start="79:9" pos:end="79:52"><name pos:start="79:9" pos:end="79:11">ret</name> <operator pos:start="79:13" pos:end="79:13">=</operator> <name pos:start="79:15" pos:end="79:29">BDRV_BLOCK_DATA</name> <operator pos:start="79:31" pos:end="79:31">|</operator> <name pos:start="79:33" pos:end="79:52">BDRV_BLOCK_ALLOCATED</name></expr>;</expr_stmt>

        <if_stmt pos:start="81:9" pos:end="85:9"><if pos:start="81:9" pos:end="85:9">if <condition pos:start="81:12" pos:end="81:41">(<expr pos:start="81:13" pos:end="81:40"><name pos:start="81:13" pos:end="81:18">offset</name> <operator pos:start="81:20" pos:end="81:20">+</operator> <name pos:start="81:22" pos:end="81:26">bytes</name> <operator pos:start="81:28" pos:end="81:29">==</operator> <name pos:start="81:31" pos:end="81:40">total_size</name></expr>)</condition> <block pos:start="81:43" pos:end="85:9">{<block_content pos:start="83:13" pos:end="83:34">

            <expr_stmt pos:start="83:13" pos:end="83:34"><expr pos:start="83:13" pos:end="83:33"><name pos:start="83:13" pos:end="83:15">ret</name> <operator pos:start="83:17" pos:end="83:18">|=</operator> <name pos:start="83:20" pos:end="83:33">BDRV_BLOCK_EOF</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="87:9" pos:end="95:9"><if pos:start="87:9" pos:end="95:9">if <condition pos:start="87:12" pos:end="87:35">(<expr pos:start="87:13" pos:end="87:34"><name pos:start="87:13" pos:end="87:34"><name pos:start="87:13" pos:end="87:14">bs</name><operator pos:start="87:15" pos:end="87:16">-&gt;</operator><name pos:start="87:17" pos:end="87:19">drv</name><operator pos:start="87:20" pos:end="87:21">-&gt;</operator><name pos:start="87:22" pos:end="87:34">protocol_name</name></name></expr>)</condition> <block pos:start="87:37" pos:end="95:9">{<block_content pos:start="89:13" pos:end="93:28">

            <expr_stmt pos:start="89:13" pos:end="89:43"><expr pos:start="89:13" pos:end="89:42"><name pos:start="89:13" pos:end="89:15">ret</name> <operator pos:start="89:17" pos:end="89:18">|=</operator> <name pos:start="89:20" pos:end="89:42">BDRV_BLOCK_OFFSET_VALID</name></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:31"><expr pos:start="91:13" pos:end="91:30"><name pos:start="91:13" pos:end="91:21">local_map</name> <operator pos:start="91:23" pos:end="91:23">=</operator> <name pos:start="91:25" pos:end="91:30">offset</name></expr>;</expr_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:28"><expr pos:start="93:13" pos:end="93:27"><name pos:start="93:13" pos:end="93:22">local_file</name> <operator pos:start="93:24" pos:end="93:24">=</operator> <name pos:start="93:26" pos:end="93:27">bs</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <goto pos:start="97:9" pos:end="97:23">goto <name pos:start="97:14" pos:end="97:22">early_out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="103:5" pos:end="103:27"><expr pos:start="103:5" pos:end="103:26"><call pos:start="103:5" pos:end="103:26"><name pos:start="103:5" pos:end="103:22">bdrv_inc_in_flight</name><argument_list pos:start="103:23" pos:end="103:26">(<argument pos:start="103:24" pos:end="103:25"><expr pos:start="103:24" pos:end="103:25"><name pos:start="103:24" pos:end="103:25">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="107:5" pos:end="107:51">/* Round out to request_alignment boundaries */</comment>

    <comment type="block" pos:start="109:5" pos:end="111:77">/* TODO: until we have a byte-based driver callback, we also have to

     * round out to sectors, even if that is bigger than request_alignment */</comment>

    <expr_stmt pos:start="113:5" pos:end="113:60"><expr pos:start="113:5" pos:end="113:59"><name pos:start="113:5" pos:end="113:9">align</name> <operator pos:start="113:11" pos:end="113:11">=</operator> <call pos:start="113:13" pos:end="113:59"><name pos:start="113:13" pos:end="113:15">MAX</name><argument_list pos:start="113:16" pos:end="113:59">(<argument pos:start="113:17" pos:end="113:40"><expr pos:start="113:17" pos:end="113:40"><name pos:start="113:17" pos:end="113:40"><name pos:start="113:17" pos:end="113:18">bs</name><operator pos:start="113:19" pos:end="113:20">-&gt;</operator><name pos:start="113:21" pos:end="113:22">bl</name><operator pos:start="113:23" pos:end="113:23">.</operator><name pos:start="113:24" pos:end="113:40">request_alignment</name></name></expr></argument>, <argument pos:start="113:43" pos:end="113:58"><expr pos:start="113:43" pos:end="113:58"><name pos:start="113:43" pos:end="113:58">BDRV_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:52"><expr pos:start="115:5" pos:end="115:51"><name pos:start="115:5" pos:end="115:18">aligned_offset</name> <operator pos:start="115:20" pos:end="115:20">=</operator> <call pos:start="115:22" pos:end="115:51"><name pos:start="115:22" pos:end="115:36">QEMU_ALIGN_DOWN</name><argument_list pos:start="115:37" pos:end="115:51">(<argument pos:start="115:38" pos:end="115:43"><expr pos:start="115:38" pos:end="115:43"><name pos:start="115:38" pos:end="115:43">offset</name></expr></argument>, <argument pos:start="115:46" pos:end="115:50"><expr pos:start="115:46" pos:end="115:50"><name pos:start="115:46" pos:end="115:50">align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:69"><expr pos:start="117:5" pos:end="117:68"><name pos:start="117:5" pos:end="117:17">aligned_bytes</name> <operator pos:start="117:19" pos:end="117:19">=</operator> <call pos:start="117:21" pos:end="117:51"><name pos:start="117:21" pos:end="117:28">ROUND_UP</name><argument_list pos:start="117:29" pos:end="117:51">(<argument pos:start="117:30" pos:end="117:43"><expr pos:start="117:30" pos:end="117:43"><name pos:start="117:30" pos:end="117:35">offset</name> <operator pos:start="117:37" pos:end="117:37">+</operator> <name pos:start="117:39" pos:end="117:43">bytes</name></expr></argument>, <argument pos:start="117:46" pos:end="117:50"><expr pos:start="117:46" pos:end="117:50"><name pos:start="117:46" pos:end="117:50">align</name></expr></argument>)</argument_list></call> <operator pos:start="117:53" pos:end="117:53">-</operator> <name pos:start="117:55" pos:end="117:68">aligned_offset</name></expr>;</expr_stmt>



    <block pos:start="121:5" pos:end="171:5">{<block_content pos:start="123:9" pos:end="169:41">

        <decl_stmt pos:start="123:9" pos:end="123:18"><decl pos:start="123:9" pos:end="123:17"><type pos:start="123:9" pos:end="123:11"><name pos:start="123:9" pos:end="123:11">int</name></type> <name pos:start="123:13" pos:end="123:17">count</name></decl>;</decl_stmt> <comment type="block" pos:start="123:20" pos:end="123:32">/* sectors */</comment>

        <decl_stmt pos:start="125:9" pos:end="125:24"><decl pos:start="125:9" pos:end="125:23"><type pos:start="125:9" pos:end="125:15"><name pos:start="125:9" pos:end="125:15">int64_t</name></type> <name pos:start="125:17" pos:end="125:23">longret</name></decl>;</decl_stmt>



        <expr_stmt pos:start="129:9" pos:end="131:50"><expr pos:start="129:9" pos:end="131:49"><call pos:start="129:9" pos:end="131:49"><name pos:start="129:9" pos:end="129:14">assert</name><argument_list pos:start="129:15" pos:end="131:49">(<argument pos:start="129:16" pos:end="131:48"><expr pos:start="129:16" pos:end="131:48"><call pos:start="129:16" pos:end="131:48"><name pos:start="129:16" pos:end="129:30">QEMU_IS_ALIGNED</name><argument_list pos:start="129:31" pos:end="131:48">(<argument pos:start="129:32" pos:end="129:61"><expr pos:start="129:32" pos:end="129:61"><name pos:start="129:32" pos:end="129:45">aligned_offset</name> <operator pos:start="129:47" pos:end="129:47">|</operator> <name pos:start="129:49" pos:end="129:61">aligned_bytes</name></expr></argument>,

                               <argument pos:start="131:32" pos:end="131:47"><expr pos:start="131:32" pos:end="131:47"><name pos:start="131:32" pos:end="131:47">BDRV_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="133:9" pos:end="141:11">/*

         * The contract allows us to return pnum smaller than bytes, even

         * if the next query would see the same status; we truncate the

         * request to avoid overflowing the driver's 32-bit interface.

         */</comment>

        <expr_stmt pos:start="143:9" pos:end="149:25"><expr pos:start="143:9" pos:end="149:24"><name pos:start="143:9" pos:end="143:15">longret</name> <operator pos:start="143:17" pos:end="143:17">=</operator> <call pos:start="143:19" pos:end="149:24"><name pos:start="143:19" pos:end="143:51"><name pos:start="143:19" pos:end="143:20">bs</name><operator pos:start="143:21" pos:end="143:22">-&gt;</operator><name pos:start="143:23" pos:end="143:25">drv</name><operator pos:start="143:26" pos:end="143:27">-&gt;</operator><name pos:start="143:28" pos:end="143:51">bdrv_co_get_block_status</name></name><argument_list pos:start="143:52" pos:end="149:24">(

            <argument pos:start="145:13" pos:end="145:14"><expr pos:start="145:13" pos:end="145:14"><name pos:start="145:13" pos:end="145:14">bs</name></expr></argument>, <argument pos:start="145:17" pos:end="145:50"><expr pos:start="145:17" pos:end="145:50"><name pos:start="145:17" pos:end="145:30">aligned_offset</name> <operator pos:start="145:32" pos:end="145:33">&gt;&gt;</operator> <name pos:start="145:35" pos:end="145:50">BDRV_SECTOR_BITS</name></expr></argument>,

            <argument pos:start="147:13" pos:end="147:59"><expr pos:start="147:13" pos:end="147:59"><call pos:start="147:13" pos:end="147:39"><name pos:start="147:13" pos:end="147:15">MIN</name><argument_list pos:start="147:16" pos:end="147:39">(<argument pos:start="147:17" pos:end="147:23"><expr pos:start="147:17" pos:end="147:23"><name pos:start="147:17" pos:end="147:23">INT_MAX</name></expr></argument>, <argument pos:start="147:26" pos:end="147:38"><expr pos:start="147:26" pos:end="147:38"><name pos:start="147:26" pos:end="147:38">aligned_bytes</name></expr></argument>)</argument_list></call> <operator pos:start="147:41" pos:end="147:42">&gt;&gt;</operator> <name pos:start="147:44" pos:end="147:59">BDRV_SECTOR_BITS</name></expr></argument>, <argument pos:start="147:62" pos:end="147:67"><expr pos:start="147:62" pos:end="147:67"><operator pos:start="147:62" pos:end="147:62">&amp;</operator><name pos:start="147:63" pos:end="147:67">count</name></expr></argument>,

            <argument pos:start="149:13" pos:end="149:23"><expr pos:start="149:13" pos:end="149:23"><operator pos:start="149:13" pos:end="149:13">&amp;</operator><name pos:start="149:14" pos:end="149:23">local_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="151:9" pos:end="159:9"><if pos:start="151:9" pos:end="159:9">if <condition pos:start="151:12" pos:end="151:24">(<expr pos:start="151:13" pos:end="151:23"><name pos:start="151:13" pos:end="151:19">longret</name> <operator pos:start="151:21" pos:end="151:21">&lt;</operator> <literal type="number" pos:start="151:23" pos:end="151:23">0</literal></expr>)</condition> <block pos:start="151:26" pos:end="159:9">{<block_content pos:start="153:13" pos:end="157:21">

            <expr_stmt pos:start="153:13" pos:end="153:39"><expr pos:start="153:13" pos:end="153:38"><call pos:start="153:13" pos:end="153:38"><name pos:start="153:13" pos:end="153:18">assert</name><argument_list pos:start="153:19" pos:end="153:38">(<argument pos:start="153:20" pos:end="153:37"><expr pos:start="153:20" pos:end="153:37"><name pos:start="153:20" pos:end="153:26">INT_MIN</name> <operator pos:start="153:28" pos:end="153:29">&lt;=</operator> <name pos:start="153:31" pos:end="153:37">longret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="155:13" pos:end="155:26"><expr pos:start="155:13" pos:end="155:25"><name pos:start="155:13" pos:end="155:15">ret</name> <operator pos:start="155:17" pos:end="155:17">=</operator> <name pos:start="155:19" pos:end="155:25">longret</name></expr>;</expr_stmt>

            <goto pos:start="157:13" pos:end="157:21">goto <name pos:start="157:18" pos:end="157:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="161:9" pos:end="165:9"><if pos:start="161:9" pos:end="165:9">if <condition pos:start="161:12" pos:end="161:46">(<expr pos:start="161:13" pos:end="161:45"><name pos:start="161:13" pos:end="161:19">longret</name> <operator pos:start="161:21" pos:end="161:21">&amp;</operator> <name pos:start="161:23" pos:end="161:45">BDRV_BLOCK_OFFSET_VALID</name></expr>)</condition> <block pos:start="161:48" pos:end="165:9">{<block_content pos:start="163:13" pos:end="163:57">

            <expr_stmt pos:start="163:13" pos:end="163:57"><expr pos:start="163:13" pos:end="163:56"><name pos:start="163:13" pos:end="163:21">local_map</name> <operator pos:start="163:23" pos:end="163:23">=</operator> <name pos:start="163:25" pos:end="163:31">longret</name> <operator pos:start="163:33" pos:end="163:33">&amp;</operator> <name pos:start="163:35" pos:end="163:56">BDRV_BLOCK_OFFSET_MASK</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="167:9" pos:end="167:48"><expr pos:start="167:9" pos:end="167:47"><name pos:start="167:9" pos:end="167:11">ret</name> <operator pos:start="167:13" pos:end="167:13">=</operator> <name pos:start="167:15" pos:end="167:21">longret</name> <operator pos:start="167:23" pos:end="167:23">&amp;</operator> <operator pos:start="167:25" pos:end="167:25">~</operator><name pos:start="167:26" pos:end="167:47">BDRV_BLOCK_OFFSET_MASK</name></expr>;</expr_stmt>

        <expr_stmt pos:start="169:9" pos:end="169:41"><expr pos:start="169:9" pos:end="169:40"><operator pos:start="169:9" pos:end="169:9">*</operator><name pos:start="169:10" pos:end="169:13">pnum</name> <operator pos:start="169:15" pos:end="169:15">=</operator> <name pos:start="169:17" pos:end="169:21">count</name> <operator pos:start="169:23" pos:end="169:23">*</operator> <name pos:start="169:25" pos:end="169:40">BDRV_SECTOR_SIZE</name></expr>;</expr_stmt>

    </block_content>}</block>



    <comment type="block" pos:start="175:5" pos:end="181:7">/*

     * The driver's result must be a multiple of request_alignment.

     * Clamp pnum and adjust map to original request.

     */</comment>

    <expr_stmt pos:start="183:5" pos:end="183:77"><expr pos:start="183:5" pos:end="183:76"><call pos:start="183:5" pos:end="183:76"><name pos:start="183:5" pos:end="183:10">assert</name><argument_list pos:start="183:11" pos:end="183:76">(<argument pos:start="183:12" pos:end="183:75"><expr pos:start="183:12" pos:end="183:75"><call pos:start="183:12" pos:end="183:40"><name pos:start="183:12" pos:end="183:26">QEMU_IS_ALIGNED</name><argument_list pos:start="183:27" pos:end="183:40">(<argument pos:start="183:28" pos:end="183:32"><expr pos:start="183:28" pos:end="183:32"><operator pos:start="183:28" pos:end="183:28">*</operator><name pos:start="183:29" pos:end="183:32">pnum</name></expr></argument>, <argument pos:start="183:35" pos:end="183:39"><expr pos:start="183:35" pos:end="183:39"><name pos:start="183:35" pos:end="183:39">align</name></expr></argument>)</argument_list></call> <operator pos:start="183:42" pos:end="183:43">&amp;&amp;</operator> <name pos:start="183:45" pos:end="183:49">align</name> <operator pos:start="183:51" pos:end="183:51">&gt;</operator> <name pos:start="183:53" pos:end="183:58">offset</name> <operator pos:start="183:60" pos:end="183:60">-</operator> <name pos:start="183:62" pos:end="183:75">aligned_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="185:5" pos:end="185:37"><expr pos:start="185:5" pos:end="185:36"><operator pos:start="185:5" pos:end="185:5">*</operator><name pos:start="185:6" pos:end="185:9">pnum</name> <operator pos:start="185:11" pos:end="185:12">-=</operator> <name pos:start="185:14" pos:end="185:19">offset</name> <operator pos:start="185:21" pos:end="185:21">-</operator> <name pos:start="185:23" pos:end="185:36">aligned_offset</name></expr>;</expr_stmt>

    <if_stmt pos:start="187:5" pos:end="191:5"><if pos:start="187:5" pos:end="191:5">if <condition pos:start="187:8" pos:end="187:22">(<expr pos:start="187:9" pos:end="187:21"><operator pos:start="187:9" pos:end="187:9">*</operator><name pos:start="187:10" pos:end="187:13">pnum</name> <operator pos:start="187:15" pos:end="187:15">&gt;</operator> <name pos:start="187:17" pos:end="187:21">bytes</name></expr>)</condition> <block pos:start="187:24" pos:end="191:5">{<block_content pos:start="189:9" pos:end="189:22">

        <expr_stmt pos:start="189:9" pos:end="189:22"><expr pos:start="189:9" pos:end="189:21"><operator pos:start="189:9" pos:end="189:9">*</operator><name pos:start="189:10" pos:end="189:13">pnum</name> <operator pos:start="189:15" pos:end="189:15">=</operator> <name pos:start="189:17" pos:end="189:21">bytes</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="193:5" pos:end="197:5"><if pos:start="193:5" pos:end="197:5">if <condition pos:start="193:8" pos:end="193:38">(<expr pos:start="193:9" pos:end="193:37"><name pos:start="193:9" pos:end="193:11">ret</name> <operator pos:start="193:13" pos:end="193:13">&amp;</operator> <name pos:start="193:15" pos:end="193:37">BDRV_BLOCK_OFFSET_VALID</name></expr>)</condition> <block pos:start="193:40" pos:end="197:5">{<block_content pos:start="195:9" pos:end="195:45">

        <expr_stmt pos:start="195:9" pos:end="195:45"><expr pos:start="195:9" pos:end="195:44"><name pos:start="195:9" pos:end="195:17">local_map</name> <operator pos:start="195:19" pos:end="195:20">+=</operator> <name pos:start="195:22" pos:end="195:27">offset</name> <operator pos:start="195:29" pos:end="195:29">-</operator> <name pos:start="195:31" pos:end="195:44">aligned_offset</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="201:5" pos:end="211:5"><if pos:start="201:5" pos:end="211:5">if <condition pos:start="201:8" pos:end="201:29">(<expr pos:start="201:9" pos:end="201:28"><name pos:start="201:9" pos:end="201:11">ret</name> <operator pos:start="201:13" pos:end="201:13">&amp;</operator> <name pos:start="201:15" pos:end="201:28">BDRV_BLOCK_RAW</name></expr>)</condition> <block pos:start="201:31" pos:end="211:5">{<block_content pos:start="203:9" pos:end="209:17">

        <expr_stmt pos:start="203:9" pos:end="203:60"><expr pos:start="203:9" pos:end="203:59"><call pos:start="203:9" pos:end="203:59"><name pos:start="203:9" pos:end="203:14">assert</name><argument_list pos:start="203:15" pos:end="203:59">(<argument pos:start="203:16" pos:end="203:58"><expr pos:start="203:16" pos:end="203:58"><name pos:start="203:16" pos:end="203:18">ret</name> <operator pos:start="203:20" pos:end="203:20">&amp;</operator> <name pos:start="203:22" pos:end="203:44">BDRV_BLOCK_OFFSET_VALID</name> <operator pos:start="203:46" pos:end="203:47">&amp;&amp;</operator> <name pos:start="203:49" pos:end="203:58">local_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="205:9" pos:end="207:73"><expr pos:start="205:9" pos:end="207:72"><name pos:start="205:9" pos:end="205:11">ret</name> <operator pos:start="205:13" pos:end="205:13">=</operator> <call pos:start="205:15" pos:end="207:72"><name pos:start="205:15" pos:end="205:34">bdrv_co_block_status</name><argument_list pos:start="205:35" pos:end="207:72">(<argument pos:start="205:36" pos:end="205:45"><expr pos:start="205:36" pos:end="205:45"><name pos:start="205:36" pos:end="205:45">local_file</name></expr></argument>, <argument pos:start="205:48" pos:end="205:56"><expr pos:start="205:48" pos:end="205:56"><name pos:start="205:48" pos:end="205:56">want_zero</name></expr></argument>, <argument pos:start="205:59" pos:end="205:67"><expr pos:start="205:59" pos:end="205:67"><name pos:start="205:59" pos:end="205:67">local_map</name></expr></argument>,

                                   <argument pos:start="207:36" pos:end="207:40"><expr pos:start="207:36" pos:end="207:40"><operator pos:start="207:36" pos:end="207:36">*</operator><name pos:start="207:37" pos:end="207:40">pnum</name></expr></argument>, <argument pos:start="207:43" pos:end="207:46"><expr pos:start="207:43" pos:end="207:46"><name pos:start="207:43" pos:end="207:46">pnum</name></expr></argument>, <argument pos:start="207:49" pos:end="207:58"><expr pos:start="207:49" pos:end="207:58"><operator pos:start="207:49" pos:end="207:49">&amp;</operator><name pos:start="207:50" pos:end="207:58">local_map</name></expr></argument>, <argument pos:start="207:61" pos:end="207:71"><expr pos:start="207:61" pos:end="207:71"><operator pos:start="207:61" pos:end="207:61">&amp;</operator><name pos:start="207:62" pos:end="207:71">local_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="209:9" pos:end="209:17">goto <name pos:start="209:14" pos:end="209:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="215:5" pos:end="241:5"><if pos:start="215:5" pos:end="219:5">if <condition pos:start="215:8" pos:end="215:50">(<expr pos:start="215:9" pos:end="215:49"><name pos:start="215:9" pos:end="215:11">ret</name> <operator pos:start="215:13" pos:end="215:13">&amp;</operator> <operator pos:start="215:15" pos:end="215:15">(</operator><name pos:start="215:16" pos:end="215:30">BDRV_BLOCK_DATA</name> <operator pos:start="215:32" pos:end="215:32">|</operator> <name pos:start="215:34" pos:end="215:48">BDRV_BLOCK_ZERO</name><operator pos:start="215:49" pos:end="215:49">)</operator></expr>)</condition> <block pos:start="215:52" pos:end="219:5">{<block_content pos:start="217:9" pos:end="217:36">

        <expr_stmt pos:start="217:9" pos:end="217:36"><expr pos:start="217:9" pos:end="217:35"><name pos:start="217:9" pos:end="217:11">ret</name> <operator pos:start="217:13" pos:end="217:14">|=</operator> <name pos:start="217:16" pos:end="217:35">BDRV_BLOCK_ALLOCATED</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="219:7" pos:end="241:5">else if <condition pos:start="219:15" pos:end="219:25">(<expr pos:start="219:16" pos:end="219:24"><name pos:start="219:16" pos:end="219:24">want_zero</name></expr>)</condition> <block pos:start="219:27" pos:end="241:5">{<block_content pos:start="221:9" pos:end="239:9">

        <if_stmt pos:start="221:9" pos:end="239:9"><if pos:start="221:9" pos:end="225:9">if <condition pos:start="221:12" pos:end="221:49">(<expr pos:start="221:13" pos:end="221:48"><call pos:start="221:13" pos:end="221:48"><name pos:start="221:13" pos:end="221:44">bdrv_unallocated_blocks_are_zero</name><argument_list pos:start="221:45" pos:end="221:48">(<argument pos:start="221:46" pos:end="221:47"><expr pos:start="221:46" pos:end="221:47"><name pos:start="221:46" pos:end="221:47">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="221:51" pos:end="225:9">{<block_content pos:start="223:13" pos:end="223:35">

            <expr_stmt pos:start="223:13" pos:end="223:35"><expr pos:start="223:13" pos:end="223:34"><name pos:start="223:13" pos:end="223:15">ret</name> <operator pos:start="223:17" pos:end="223:18">|=</operator> <name pos:start="223:20" pos:end="223:34">BDRV_BLOCK_ZERO</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="225:11" pos:end="239:9">else if <condition pos:start="225:19" pos:end="225:31">(<expr pos:start="225:20" pos:end="225:30"><name pos:start="225:20" pos:end="225:30"><name pos:start="225:20" pos:end="225:21">bs</name><operator pos:start="225:22" pos:end="225:23">-&gt;</operator><name pos:start="225:24" pos:end="225:30">backing</name></name></expr>)</condition> <block pos:start="225:33" pos:end="239:9">{<block_content pos:start="227:13" pos:end="237:13">

            <decl_stmt pos:start="227:13" pos:end="227:52"><decl pos:start="227:13" pos:end="227:51"><type pos:start="227:13" pos:end="227:30"><name pos:start="227:13" pos:end="227:28">BlockDriverState</name> <modifier pos:start="227:30" pos:end="227:30">*</modifier></type><name pos:start="227:31" pos:end="227:33">bs2</name> <init pos:start="227:35" pos:end="227:51">= <expr pos:start="227:37" pos:end="227:51"><name pos:start="227:37" pos:end="227:51"><name pos:start="227:37" pos:end="227:38">bs</name><operator pos:start="227:39" pos:end="227:40">-&gt;</operator><name pos:start="227:41" pos:end="227:47">backing</name><operator pos:start="227:48" pos:end="227:49">-&gt;</operator><name pos:start="227:50" pos:end="227:51">bs</name></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="229:13" pos:end="229:48"><decl pos:start="229:13" pos:end="229:47"><type pos:start="229:13" pos:end="229:19"><name pos:start="229:13" pos:end="229:19">int64_t</name></type> <name pos:start="229:21" pos:end="229:25">size2</name> <init pos:start="229:27" pos:end="229:47">= <expr pos:start="229:29" pos:end="229:47"><call pos:start="229:29" pos:end="229:47"><name pos:start="229:29" pos:end="229:42">bdrv_getlength</name><argument_list pos:start="229:43" pos:end="229:47">(<argument pos:start="229:44" pos:end="229:46"><expr pos:start="229:44" pos:end="229:46"><name pos:start="229:44" pos:end="229:46">bs2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="233:13" pos:end="237:13"><if pos:start="233:13" pos:end="237:13">if <condition pos:start="233:16" pos:end="233:46">(<expr pos:start="233:17" pos:end="233:45"><name pos:start="233:17" pos:end="233:21">size2</name> <operator pos:start="233:23" pos:end="233:24">&gt;=</operator> <literal type="number" pos:start="233:26" pos:end="233:26">0</literal> <operator pos:start="233:28" pos:end="233:29">&amp;&amp;</operator> <name pos:start="233:31" pos:end="233:36">offset</name> <operator pos:start="233:38" pos:end="233:39">&gt;=</operator> <name pos:start="233:41" pos:end="233:45">size2</name></expr>)</condition> <block pos:start="233:48" pos:end="237:13">{<block_content pos:start="235:17" pos:end="235:39">

                <expr_stmt pos:start="235:17" pos:end="235:39"><expr pos:start="235:17" pos:end="235:38"><name pos:start="235:17" pos:end="235:19">ret</name> <operator pos:start="235:21" pos:end="235:22">|=</operator> <name pos:start="235:24" pos:end="235:38">BDRV_BLOCK_ZERO</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="245:5" pos:end="297:5"><if pos:start="245:5" pos:end="297:5">if <condition pos:start="245:8" pos:end="249:40">(<expr pos:start="245:9" pos:end="249:39"><name pos:start="245:9" pos:end="245:17">want_zero</name> <operator pos:start="245:19" pos:end="245:20">&amp;&amp;</operator> <name pos:start="245:22" pos:end="245:31">local_file</name> <operator pos:start="245:33" pos:end="245:34">&amp;&amp;</operator> <name pos:start="245:36" pos:end="245:45">local_file</name> <operator pos:start="245:47" pos:end="245:48">!=</operator> <name pos:start="245:50" pos:end="245:51">bs</name> <operator pos:start="245:53" pos:end="245:54">&amp;&amp;</operator>

        <operator pos:start="247:9" pos:end="247:9">(</operator><name pos:start="247:10" pos:end="247:12">ret</name> <operator pos:start="247:14" pos:end="247:14">&amp;</operator> <name pos:start="247:16" pos:end="247:30">BDRV_BLOCK_DATA</name><operator pos:start="247:31" pos:end="247:31">)</operator> <operator pos:start="247:33" pos:end="247:34">&amp;&amp;</operator> <operator pos:start="247:36" pos:end="247:36">!</operator><operator pos:start="247:37" pos:end="247:37">(</operator><name pos:start="247:38" pos:end="247:40">ret</name> <operator pos:start="247:42" pos:end="247:42">&amp;</operator> <name pos:start="247:44" pos:end="247:58">BDRV_BLOCK_ZERO</name><operator pos:start="247:59" pos:end="247:59">)</operator> <operator pos:start="247:61" pos:end="247:62">&amp;&amp;</operator>

        <operator pos:start="249:9" pos:end="249:9">(</operator><name pos:start="249:10" pos:end="249:12">ret</name> <operator pos:start="249:14" pos:end="249:14">&amp;</operator> <name pos:start="249:16" pos:end="249:38">BDRV_BLOCK_OFFSET_VALID</name><operator pos:start="249:39" pos:end="249:39">)</operator></expr>)</condition> <block pos:start="249:42" pos:end="297:5">{<block_content pos:start="251:9" pos:end="295:9">

        <decl_stmt pos:start="251:9" pos:end="251:26"><decl pos:start="251:9" pos:end="251:25"><type pos:start="251:9" pos:end="251:15"><name pos:start="251:9" pos:end="251:15">int64_t</name></type> <name pos:start="251:17" pos:end="251:25">file_pnum</name></decl>;</decl_stmt>

        <decl_stmt pos:start="253:9" pos:end="253:17"><decl pos:start="253:9" pos:end="253:16"><type pos:start="253:9" pos:end="253:11"><name pos:start="253:9" pos:end="253:11">int</name></type> <name pos:start="253:13" pos:end="253:16">ret2</name></decl>;</decl_stmt>



        <expr_stmt pos:start="257:9" pos:end="259:67"><expr pos:start="257:9" pos:end="259:66"><name pos:start="257:9" pos:end="257:12">ret2</name> <operator pos:start="257:14" pos:end="257:14">=</operator> <call pos:start="257:16" pos:end="259:66"><name pos:start="257:16" pos:end="257:35">bdrv_co_block_status</name><argument_list pos:start="257:36" pos:end="259:66">(<argument pos:start="257:37" pos:end="257:46"><expr pos:start="257:37" pos:end="257:46"><name pos:start="257:37" pos:end="257:46">local_file</name></expr></argument>, <argument pos:start="257:49" pos:end="257:57"><expr pos:start="257:49" pos:end="257:57"><name pos:start="257:49" pos:end="257:57">want_zero</name></expr></argument>, <argument pos:start="257:60" pos:end="257:68"><expr pos:start="257:60" pos:end="257:68"><name pos:start="257:60" pos:end="257:68">local_map</name></expr></argument>,

                                    <argument pos:start="259:37" pos:end="259:41"><expr pos:start="259:37" pos:end="259:41"><operator pos:start="259:37" pos:end="259:37">*</operator><name pos:start="259:38" pos:end="259:41">pnum</name></expr></argument>, <argument pos:start="259:44" pos:end="259:53"><expr pos:start="259:44" pos:end="259:53"><operator pos:start="259:44" pos:end="259:44">&amp;</operator><name pos:start="259:45" pos:end="259:53">file_pnum</name></expr></argument>, <argument pos:start="259:56" pos:end="259:59"><expr pos:start="259:56" pos:end="259:59"><name pos:start="259:56" pos:end="259:59">NULL</name></expr></argument>, <argument pos:start="259:62" pos:end="259:65"><expr pos:start="259:62" pos:end="259:65"><name pos:start="259:62" pos:end="259:65">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="261:9" pos:end="295:9"><if pos:start="261:9" pos:end="295:9">if <condition pos:start="261:12" pos:end="261:22">(<expr pos:start="261:13" pos:end="261:21"><name pos:start="261:13" pos:end="261:16">ret2</name> <operator pos:start="261:18" pos:end="261:19">&gt;=</operator> <literal type="number" pos:start="261:21" pos:end="261:21">0</literal></expr>)</condition> <block pos:start="261:24" pos:end="295:9">{<block_content pos:start="269:13" pos:end="293:13">

            <comment type="block" pos:start="263:13" pos:end="267:15">/* Ignore errors.  This is just providing extra information, it

             * is useful but not necessary.

             */</comment>

            <if_stmt pos:start="269:13" pos:end="293:13"><if pos:start="269:13" pos:end="285:13">if <condition pos:start="269:16" pos:end="271:55">(<expr pos:start="269:17" pos:end="271:54"><name pos:start="269:17" pos:end="269:20">ret2</name> <operator pos:start="269:22" pos:end="269:22">&amp;</operator> <name pos:start="269:24" pos:end="269:37">BDRV_BLOCK_EOF</name> <operator pos:start="269:39" pos:end="269:40">&amp;&amp;</operator>

                <operator pos:start="271:17" pos:end="271:17">(</operator><operator pos:start="271:18" pos:end="271:18">!</operator><name pos:start="271:19" pos:end="271:27">file_pnum</name> <operator pos:start="271:29" pos:end="271:30">||</operator> <name pos:start="271:32" pos:end="271:35">ret2</name> <operator pos:start="271:37" pos:end="271:37">&amp;</operator> <name pos:start="271:39" pos:end="271:53">BDRV_BLOCK_ZERO</name><operator pos:start="271:54" pos:end="271:54">)</operator></expr>)</condition> <block pos:start="271:57" pos:end="285:13">{<block_content pos:start="283:17" pos:end="283:39">

                <comment type="block" pos:start="273:17" pos:end="281:19">/*

                 * It is valid for the format block driver to read

                 * beyond the end of the underlying file's current

                 * size; such areas read as zero.

                 */</comment>

                <expr_stmt pos:start="283:17" pos:end="283:39"><expr pos:start="283:17" pos:end="283:38"><name pos:start="283:17" pos:end="283:19">ret</name> <operator pos:start="283:21" pos:end="283:22">|=</operator> <name pos:start="283:24" pos:end="283:38">BDRV_BLOCK_ZERO</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="285:15" pos:end="293:13">else <block pos:start="285:20" pos:end="293:13">{<block_content pos:start="289:17" pos:end="291:48">

                <comment type="block" pos:start="287:17" pos:end="287:80">/* Limit request to the range reported by the protocol driver */</comment>

                <expr_stmt pos:start="289:17" pos:end="289:34"><expr pos:start="289:17" pos:end="289:33"><operator pos:start="289:17" pos:end="289:17">*</operator><name pos:start="289:18" pos:end="289:21">pnum</name> <operator pos:start="289:23" pos:end="289:23">=</operator> <name pos:start="289:25" pos:end="289:33">file_pnum</name></expr>;</expr_stmt>

                <expr_stmt pos:start="291:17" pos:end="291:48"><expr pos:start="291:17" pos:end="291:47"><name pos:start="291:17" pos:end="291:19">ret</name> <operator pos:start="291:21" pos:end="291:22">|=</operator> <operator pos:start="291:24" pos:end="291:24">(</operator><name pos:start="291:25" pos:end="291:28">ret2</name> <operator pos:start="291:30" pos:end="291:30">&amp;</operator> <name pos:start="291:32" pos:end="291:46">BDRV_BLOCK_ZERO</name><operator pos:start="291:47" pos:end="291:47">)</operator></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



<label pos:start="301:1" pos:end="301:4"><name pos:start="301:1" pos:end="301:3">out</name>:</label>

    <expr_stmt pos:start="303:5" pos:end="303:27"><expr pos:start="303:5" pos:end="303:26"><call pos:start="303:5" pos:end="303:26"><name pos:start="303:5" pos:end="303:22">bdrv_dec_in_flight</name><argument_list pos:start="303:23" pos:end="303:26">(<argument pos:start="303:24" pos:end="303:25"><expr pos:start="303:24" pos:end="303:25"><name pos:start="303:24" pos:end="303:25">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="305:5" pos:end="309:5"><if pos:start="305:5" pos:end="309:5">if <condition pos:start="305:8" pos:end="305:49">(<expr pos:start="305:9" pos:end="305:48"><name pos:start="305:9" pos:end="305:11">ret</name> <operator pos:start="305:13" pos:end="305:14">&gt;=</operator> <literal type="number" pos:start="305:16" pos:end="305:16">0</literal> <operator pos:start="305:18" pos:end="305:19">&amp;&amp;</operator> <name pos:start="305:21" pos:end="305:26">offset</name> <operator pos:start="305:28" pos:end="305:28">+</operator> <operator pos:start="305:30" pos:end="305:30">*</operator><name pos:start="305:31" pos:end="305:34">pnum</name> <operator pos:start="305:36" pos:end="305:37">==</operator> <name pos:start="305:39" pos:end="305:48">total_size</name></expr>)</condition> <block pos:start="305:51" pos:end="309:5">{<block_content pos:start="307:9" pos:end="307:30">

        <expr_stmt pos:start="307:9" pos:end="307:30"><expr pos:start="307:9" pos:end="307:29"><name pos:start="307:9" pos:end="307:11">ret</name> <operator pos:start="307:13" pos:end="307:14">|=</operator> <name pos:start="307:16" pos:end="307:29">BDRV_BLOCK_EOF</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<label pos:start="311:1" pos:end="311:10"><name pos:start="311:1" pos:end="311:9">early_out</name>:</label>

    <if_stmt pos:start="313:5" pos:end="317:5"><if pos:start="313:5" pos:end="317:5">if <condition pos:start="313:8" pos:end="313:13">(<expr pos:start="313:9" pos:end="313:12"><name pos:start="313:9" pos:end="313:12">file</name></expr>)</condition> <block pos:start="313:15" pos:end="317:5">{<block_content pos:start="315:9" pos:end="315:27">

        <expr_stmt pos:start="315:9" pos:end="315:27"><expr pos:start="315:9" pos:end="315:26"><operator pos:start="315:9" pos:end="315:9">*</operator><name pos:start="315:10" pos:end="315:13">file</name> <operator pos:start="315:15" pos:end="315:15">=</operator> <name pos:start="315:17" pos:end="315:26">local_file</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="319:5" pos:end="323:5"><if pos:start="319:5" pos:end="323:5">if <condition pos:start="319:8" pos:end="319:12">(<expr pos:start="319:9" pos:end="319:11"><name pos:start="319:9" pos:end="319:11">map</name></expr>)</condition> <block pos:start="319:14" pos:end="323:5">{<block_content pos:start="321:9" pos:end="321:25">

        <expr_stmt pos:start="321:9" pos:end="321:25"><expr pos:start="321:9" pos:end="321:24"><operator pos:start="321:9" pos:end="321:9">*</operator><name pos:start="321:10" pos:end="321:12">map</name> <operator pos:start="321:14" pos:end="321:14">=</operator> <name pos:start="321:16" pos:end="321:24">local_map</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="325:5" pos:end="325:15">return <expr pos:start="325:12" pos:end="325:14"><name pos:start="325:12" pos:end="325:14">ret</name></expr>;</return>

</block_content>}</block></function></unit>
