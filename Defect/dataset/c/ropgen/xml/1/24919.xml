<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24919.c" pos:tabs="8"><function pos:start="1:1" pos:end="61:0"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">submit_stats</name><parameter_list pos:start="1:24" pos:end="1:46">(<parameter pos:start="1:25" pos:end="1:45"><decl pos:start="1:25" pos:end="1:45"><type pos:start="1:25" pos:end="1:40"><name pos:start="1:25" pos:end="1:38">AVCodecContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:45">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="61:0">{<block_content pos:start="7:5" pos:end="61:0">

<cpp:ifdef pos:start="5:1" pos:end="5:25">#<cpp:directive pos:start="5:2" pos:end="5:6">ifdef</cpp:directive> <name pos:start="5:8" pos:end="5:25">TH_ENCCTL_2PASS_IN</name></cpp:ifdef>

    <decl_stmt pos:start="7:5" pos:end="7:40"><decl pos:start="7:5" pos:end="7:39"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">TheoraContext</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">h</name> <init pos:start="7:22" pos:end="7:39">= <expr pos:start="7:24" pos:end="7:39"><name pos:start="7:24" pos:end="7:39"><name pos:start="7:24" pos:end="7:28">avctx</name><operator pos:start="7:29" pos:end="7:30">-&gt;</operator><name pos:start="7:31" pos:end="7:39">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:14"><decl pos:start="9:5" pos:end="9:13"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:13">bytes</name></decl>;</decl_stmt>


        <if_stmt pos:start="12:9" pos:end="61:0"><if pos:start="12:9" pos:end="61:0">if <condition pos:start="12:12" pos:end="12:29">(<expr pos:start="12:13" pos:end="12:28"><operator pos:start="12:13" pos:end="12:13">!</operator><name pos:start="12:14" pos:end="12:28"><name pos:start="12:14" pos:end="12:18">avctx</name><operator pos:start="12:19" pos:end="12:20">-&gt;</operator><name pos:start="12:21" pos:end="12:28">stats_in</name></name></expr>)</condition> <block pos:start="12:31" pos:end="61:0">{<block_content pos:start="14:13" pos:end="61:0">

            <expr_stmt pos:start="14:13" pos:end="14:74"><expr pos:start="14:13" pos:end="14:73"><call pos:start="14:13" pos:end="14:73"><name pos:start="14:13" pos:end="14:18">av_log</name><argument_list pos:start="14:19" pos:end="14:73">(<argument pos:start="14:20" pos:end="14:24"><expr pos:start="14:20" pos:end="14:24"><name pos:start="14:20" pos:end="14:24">avctx</name></expr></argument>, <argument pos:start="14:27" pos:end="14:38"><expr pos:start="14:27" pos:end="14:38"><name pos:start="14:27" pos:end="14:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="14:41" pos:end="14:72"><expr pos:start="14:41" pos:end="14:72"><literal type="string" pos:start="14:41" pos:end="14:72">"No statsfile for second pass\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="16:13" pos:end="16:35">return <expr pos:start="16:20" pos:end="16:34"><call pos:start="16:20" pos:end="16:34"><name pos:start="16:20" pos:end="16:26">AVERROR</name><argument_list pos:start="16:27" pos:end="16:34">(<argument pos:start="16:28" pos:end="16:33"><expr pos:start="16:28" pos:end="16:33"><name pos:start="16:28" pos:end="16:33">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>


        <expr_stmt pos:start="19:9" pos:end="19:54"><expr pos:start="19:9" pos:end="19:53"><name pos:start="19:9" pos:end="19:21"><name pos:start="19:9" pos:end="19:9">h</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:21">stats_size</name></name> <operator pos:start="19:23" pos:end="19:23">=</operator> <call pos:start="19:25" pos:end="19:47"><name pos:start="19:25" pos:end="19:30">strlen</name><argument_list pos:start="19:31" pos:end="19:47">(<argument pos:start="19:32" pos:end="19:46"><expr pos:start="19:32" pos:end="19:46"><name pos:start="19:32" pos:end="19:46"><name pos:start="19:32" pos:end="19:36">avctx</name><operator pos:start="19:37" pos:end="19:38">-&gt;</operator><name pos:start="19:39" pos:end="19:46">stats_in</name></name></expr></argument>)</argument_list></call> <operator pos:start="19:49" pos:end="19:49">*</operator> <literal type="number" pos:start="19:51" pos:end="19:51">3</literal><operator pos:start="19:52" pos:end="19:52">/</operator><literal type="number" pos:start="19:53" pos:end="19:53">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:49"><expr pos:start="21:9" pos:end="21:48"><name pos:start="21:9" pos:end="21:16"><name pos:start="21:9" pos:end="21:9">h</name><operator pos:start="21:10" pos:end="21:11">-&gt;</operator><name pos:start="21:12" pos:end="21:16">stats</name></name>      <operator pos:start="21:23" pos:end="21:23">=</operator> <call pos:start="21:25" pos:end="21:48"><name pos:start="21:25" pos:end="21:33">av_malloc</name><argument_list pos:start="21:34" pos:end="21:48">(<argument pos:start="21:35" pos:end="21:47"><expr pos:start="21:35" pos:end="21:47"><name pos:start="21:35" pos:end="21:47"><name pos:start="21:35" pos:end="21:35">h</name><operator pos:start="21:36" pos:end="21:37">-&gt;</operator><name pos:start="21:38" pos:end="21:47">stats_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





        <expr_stmt pos:start="27:9" pos:end="27:83"><expr pos:start="27:9" pos:end="27:82"><name pos:start="27:9" pos:end="27:21"><name pos:start="27:9" pos:end="27:9">h</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:21">stats_size</name></name> <operator pos:start="27:23" pos:end="27:23">=</operator> <call pos:start="27:25" pos:end="27:82"><name pos:start="27:25" pos:end="27:40">av_base64_decode</name><argument_list pos:start="27:41" pos:end="27:82">(<argument pos:start="27:42" pos:end="27:49"><expr pos:start="27:42" pos:end="27:49"><name pos:start="27:42" pos:end="27:49"><name pos:start="27:42" pos:end="27:42">h</name><operator pos:start="27:43" pos:end="27:44">-&gt;</operator><name pos:start="27:45" pos:end="27:49">stats</name></name></expr></argument>, <argument pos:start="27:52" pos:end="27:66"><expr pos:start="27:52" pos:end="27:66"><name pos:start="27:52" pos:end="27:66"><name pos:start="27:52" pos:end="27:56">avctx</name><operator pos:start="27:57" pos:end="27:58">-&gt;</operator><name pos:start="27:59" pos:end="27:66">stats_in</name></name></expr></argument>, <argument pos:start="27:69" pos:end="27:81"><expr pos:start="27:69" pos:end="27:81"><name pos:start="27:69" pos:end="27:81"><name pos:start="27:69" pos:end="27:69">h</name><operator pos:start="27:70" pos:end="27:71">-&gt;</operator><name pos:start="27:72" pos:end="27:81">stats_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <while pos:start="30:5" pos:end="61:0">while <condition pos:start="30:11" pos:end="30:47">(<expr pos:start="30:12" pos:end="30:46"><name pos:start="30:12" pos:end="30:24"><name pos:start="30:12" pos:end="30:12">h</name><operator pos:start="30:13" pos:end="30:14">-&gt;</operator><name pos:start="30:15" pos:end="30:24">stats_size</name></name> <operator pos:start="30:26" pos:end="30:26">-</operator> <name pos:start="30:28" pos:end="30:42"><name pos:start="30:28" pos:end="30:28">h</name><operator pos:start="30:29" pos:end="30:30">-&gt;</operator><name pos:start="30:31" pos:end="30:42">stats_offset</name></name> <operator pos:start="30:44" pos:end="30:44">&gt;</operator> <literal type="number" pos:start="30:46" pos:end="30:46">0</literal></expr>)</condition> <block pos:start="30:49" pos:end="61:0">{<block_content pos:start="32:9" pos:end="61:0">

        <expr_stmt pos:start="32:9" pos:end="36:63"><expr pos:start="32:9" pos:end="36:62"><name pos:start="32:9" pos:end="32:13">bytes</name> <operator pos:start="32:15" pos:end="32:15">=</operator> <call pos:start="32:17" pos:end="36:62"><name pos:start="32:17" pos:end="32:29">th_encode_ctl</name><argument_list pos:start="32:30" pos:end="36:62">(<argument pos:start="32:31" pos:end="32:40"><expr pos:start="32:31" pos:end="32:40"><name pos:start="32:31" pos:end="32:40"><name pos:start="32:31" pos:end="32:31">h</name><operator pos:start="32:32" pos:end="32:33">-&gt;</operator><name pos:start="32:34" pos:end="32:40">t_state</name></name></expr></argument>, <argument pos:start="32:43" pos:end="32:60"><expr pos:start="32:43" pos:end="32:60"><name pos:start="32:43" pos:end="32:60">TH_ENCCTL_2PASS_IN</name></expr></argument>,

                              <argument pos:start="34:31" pos:end="34:56"><expr pos:start="34:31" pos:end="34:56"><name pos:start="34:31" pos:end="34:38"><name pos:start="34:31" pos:end="34:31">h</name><operator pos:start="34:32" pos:end="34:33">-&gt;</operator><name pos:start="34:34" pos:end="34:38">stats</name></name> <operator pos:start="34:40" pos:end="34:40">+</operator> <name pos:start="34:42" pos:end="34:56"><name pos:start="34:42" pos:end="34:42">h</name><operator pos:start="34:43" pos:end="34:44">-&gt;</operator><name pos:start="34:45" pos:end="34:56">stats_offset</name></name></expr></argument>,

                              <argument pos:start="36:31" pos:end="36:61"><expr pos:start="36:31" pos:end="36:61"><name pos:start="36:31" pos:end="36:43"><name pos:start="36:31" pos:end="36:31">h</name><operator pos:start="36:32" pos:end="36:33">-&gt;</operator><name pos:start="36:34" pos:end="36:43">stats_size</name></name> <operator pos:start="36:45" pos:end="36:45">-</operator> <name pos:start="36:47" pos:end="36:61"><name pos:start="36:47" pos:end="36:47">h</name><operator pos:start="36:48" pos:end="36:49">-&gt;</operator><name pos:start="36:50" pos:end="36:61">stats_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="38:9" pos:end="61:0"><if pos:start="38:9" pos:end="61:0">if <condition pos:start="38:12" pos:end="38:22">(<expr pos:start="38:13" pos:end="38:21"><name pos:start="38:13" pos:end="38:17">bytes</name> <operator pos:start="38:19" pos:end="38:19">&lt;</operator> <literal type="number" pos:start="38:21" pos:end="38:21">0</literal></expr>)</condition> <block pos:start="38:24" pos:end="61:0">{<block_content pos:start="40:13" pos:end="61:0">

            <expr_stmt pos:start="40:13" pos:end="40:68"><expr pos:start="40:13" pos:end="40:67"><call pos:start="40:13" pos:end="40:67"><name pos:start="40:13" pos:end="40:18">av_log</name><argument_list pos:start="40:19" pos:end="40:67">(<argument pos:start="40:20" pos:end="40:24"><expr pos:start="40:20" pos:end="40:24"><name pos:start="40:20" pos:end="40:24">avctx</name></expr></argument>, <argument pos:start="40:27" pos:end="40:38"><expr pos:start="40:27" pos:end="40:38"><name pos:start="40:27" pos:end="40:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="40:41" pos:end="40:66"><expr pos:start="40:41" pos:end="40:66"><literal type="string" pos:start="40:41" pos:end="40:66">"Error submitting stats\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="42:13" pos:end="42:36">return <expr pos:start="42:20" pos:end="42:35"><name pos:start="42:20" pos:end="42:35">AVERROR_EXTERNAL</name></expr>;</return>


        <if_stmt pos:start="45:9" pos:end="47:21"><if pos:start="45:9" pos:end="47:21">if <condition pos:start="45:12" pos:end="45:19">(<expr pos:start="45:13" pos:end="45:18"><operator pos:start="45:13" pos:end="45:13">!</operator><name pos:start="45:14" pos:end="45:18">bytes</name></expr>)</condition><block type="pseudo" pos:start="47:13" pos:end="47:21"><block_content pos:start="47:13" pos:end="47:21">

            <return pos:start="47:13" pos:end="47:21">return <expr pos:start="47:20" pos:end="47:20"><literal type="number" pos:start="47:20" pos:end="47:20">0</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:33"><expr pos:start="49:9" pos:end="49:32"><name pos:start="49:9" pos:end="49:23"><name pos:start="49:9" pos:end="49:9">h</name><operator pos:start="49:10" pos:end="49:11">-&gt;</operator><name pos:start="49:12" pos:end="49:23">stats_offset</name></name> <operator pos:start="49:25" pos:end="49:26">+=</operator> <name pos:start="49:28" pos:end="49:32">bytes</name></expr>;</expr_stmt>


    <return pos:start="52:5" pos:end="55:0">return <expr pos:start="52:12" pos:end="52:12"><literal type="number" pos:start="52:12" pos:end="52:12">0</literal></expr>;</return>

<cpp:else pos:start="54:1" pos:end="54:5">#<cpp:directive pos:start="54:2" pos:end="54:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="56:5" pos:end="56:72"><expr pos:start="56:5" pos:end="56:71"><call pos:start="56:5" pos:end="56:71"><name pos:start="56:5" pos:end="56:10">av_log</name><argument_list pos:start="56:11" pos:end="56:71">(<argument pos:start="56:12" pos:end="56:16"><expr pos:start="56:12" pos:end="56:16"><name pos:start="56:12" pos:end="56:16">avctx</name></expr></argument>, <argument pos:start="56:19" pos:end="56:30"><expr pos:start="56:19" pos:end="56:30"><name pos:start="56:19" pos:end="56:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="56:33" pos:end="56:70"><expr pos:start="56:33" pos:end="56:70"><literal type="string" pos:start="56:33" pos:end="56:70">"libtheora too old to support 2pass\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="58:5" pos:end="61:0">return <expr pos:start="58:12" pos:end="58:26"><call pos:start="58:12" pos:end="58:26"><name pos:start="58:12" pos:end="58:18">AVERROR</name><argument_list pos:start="58:19" pos:end="58:26">(<argument pos:start="58:20" pos:end="58:25"><expr pos:start="58:20" pos:end="58:25"><name pos:start="58:20" pos:end="58:25">ENOSUP</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block_content></block></while></block_content></block></if></if_stmt></block_content></block></function>

<cpp:endif pos:start="60:1" pos:end="60:6">#<cpp:directive pos:start="60:2" pos:end="60:6">endif</cpp:directive></cpp:endif>
</unit>
