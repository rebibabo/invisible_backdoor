<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3069.c" pos:tabs="8"><function pos:start="1:1" pos:end="95:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:44">test_wait_event_notifier_noflush</name><parameter_list pos:start="1:45" pos:end="1:50">(<parameter pos:start="1:46" pos:end="1:49"><decl pos:start="1:46" pos:end="1:49"><type pos:start="1:46" pos:end="1:49"><name pos:start="1:46" pos:end="1:49">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="95:1">{<block_content pos:start="5:5" pos:end="93:36">

    <decl_stmt pos:start="5:5" pos:end="5:44"><decl pos:start="5:5" pos:end="5:43"><type pos:start="5:5" pos:end="5:25"><name pos:start="5:5" pos:end="5:25">EventNotifierTestData</name></type> <name pos:start="5:27" pos:end="5:30">data</name> <init pos:start="5:32" pos:end="5:43">= <expr pos:start="5:34" pos:end="5:43"><block pos:start="5:34" pos:end="5:43">{ <expr pos:start="5:36" pos:end="5:41"><operator pos:start="5:36" pos:end="5:36">.</operator><name pos:start="5:37" pos:end="5:37">n</name> <operator pos:start="5:39" pos:end="5:39">=</operator> <literal type="number" pos:start="5:41" pos:end="5:41">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:58"><decl pos:start="7:5" pos:end="7:57"><type pos:start="7:5" pos:end="7:25"><name pos:start="7:5" pos:end="7:25">EventNotifierTestData</name></type> <name pos:start="7:27" pos:end="7:31">dummy</name> <init pos:start="7:33" pos:end="7:57">= <expr pos:start="7:35" pos:end="7:57"><block pos:start="7:35" pos:end="7:57">{ <expr pos:start="7:37" pos:end="7:42"><operator pos:start="7:37" pos:end="7:37">.</operator><name pos:start="7:38" pos:end="7:38">n</name> <operator pos:start="7:40" pos:end="7:40">=</operator> <literal type="number" pos:start="7:42" pos:end="7:42">0</literal></expr>, <expr pos:start="7:45" pos:end="7:55"><operator pos:start="7:45" pos:end="7:45">.</operator><name pos:start="7:46" pos:end="7:51">active</name> <operator pos:start="7:53" pos:end="7:53">=</operator> <literal type="number" pos:start="7:55" pos:end="7:55">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:40"><expr pos:start="11:5" pos:end="11:39"><call pos:start="11:5" pos:end="11:39"><name pos:start="11:5" pos:end="11:23">event_notifier_init</name><argument_list pos:start="11:24" pos:end="11:39">(<argument pos:start="11:25" pos:end="11:31"><expr pos:start="11:25" pos:end="11:31"><operator pos:start="11:25" pos:end="11:25">&amp;</operator><name pos:start="11:26" pos:end="11:31"><name pos:start="11:26" pos:end="11:29">data</name><operator pos:start="11:30" pos:end="11:30">.</operator><name pos:start="11:31" pos:end="11:31">e</name></name></expr></argument>, <argument pos:start="11:34" pos:end="11:38"><expr pos:start="11:34" pos:end="11:38"><name pos:start="11:34" pos:end="11:38">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:63"><expr pos:start="13:5" pos:end="13:62"><call pos:start="13:5" pos:end="13:62"><name pos:start="13:5" pos:end="13:26">aio_set_event_notifier</name><argument_list pos:start="13:27" pos:end="13:62">(<argument pos:start="13:28" pos:end="13:30"><expr pos:start="13:28" pos:end="13:30"><name pos:start="13:28" pos:end="13:30">ctx</name></expr></argument>, <argument pos:start="13:33" pos:end="13:39"><expr pos:start="13:33" pos:end="13:39"><operator pos:start="13:33" pos:end="13:33">&amp;</operator><name pos:start="13:34" pos:end="13:39"><name pos:start="13:34" pos:end="13:37">data</name><operator pos:start="13:38" pos:end="13:38">.</operator><name pos:start="13:39" pos:end="13:39">e</name></name></expr></argument>, <argument pos:start="13:42" pos:end="13:55"><expr pos:start="13:42" pos:end="13:55"><name pos:start="13:42" pos:end="13:55">event_ready_cb</name></expr></argument>, <argument pos:start="13:58" pos:end="13:61"><expr pos:start="13:58" pos:end="13:61"><name pos:start="13:58" pos:end="13:61">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:36"><expr pos:start="17:5" pos:end="17:35"><call pos:start="17:5" pos:end="17:35"><name pos:start="17:5" pos:end="17:12">g_assert</name><argument_list pos:start="17:13" pos:end="17:35">(<argument pos:start="17:14" pos:end="17:34"><expr pos:start="17:14" pos:end="17:34"><operator pos:start="17:14" pos:end="17:14">!</operator><call pos:start="17:15" pos:end="17:34"><name pos:start="17:15" pos:end="17:22">aio_poll</name><argument_list pos:start="17:23" pos:end="17:34">(<argument pos:start="17:24" pos:end="17:26"><expr pos:start="17:24" pos:end="17:26"><name pos:start="17:24" pos:end="17:26">ctx</name></expr></argument>, <argument pos:start="17:29" pos:end="17:33"><expr pos:start="17:29" pos:end="17:33"><name pos:start="17:29" pos:end="17:33">false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:35"><expr pos:start="19:5" pos:end="19:34"><call pos:start="19:5" pos:end="19:34"><name pos:start="19:5" pos:end="19:19">g_assert_cmpint</name><argument_list pos:start="19:20" pos:end="19:34">(<argument pos:start="19:21" pos:end="19:26"><expr pos:start="19:21" pos:end="19:26"><name pos:start="19:21" pos:end="19:26"><name pos:start="19:21" pos:end="19:24">data</name><operator pos:start="19:25" pos:end="19:25">.</operator><name pos:start="19:26" pos:end="19:26">n</name></name></expr></argument>, <argument pos:start="19:29" pos:end="19:30"><expr pos:start="19:29" pos:end="19:30"><operator pos:start="19:29" pos:end="19:30">==</operator></expr></argument>, <argument pos:start="19:33" pos:end="19:33"><expr pos:start="19:33" pos:end="19:33"><literal type="number" pos:start="19:33" pos:end="19:33">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="23:5" pos:end="25:53">/* Until there is an active descriptor, aio_poll may or may not call

     * event_ready_cb.  Still, it must not block.  */</comment>

    <expr_stmt pos:start="27:5" pos:end="27:32"><expr pos:start="27:5" pos:end="27:31"><call pos:start="27:5" pos:end="27:31"><name pos:start="27:5" pos:end="27:22">event_notifier_set</name><argument_list pos:start="27:23" pos:end="27:31">(<argument pos:start="27:24" pos:end="27:30"><expr pos:start="27:24" pos:end="27:30"><operator pos:start="27:24" pos:end="27:24">&amp;</operator><name pos:start="27:25" pos:end="27:30"><name pos:start="27:25" pos:end="27:28">data</name><operator pos:start="27:29" pos:end="27:29">.</operator><name pos:start="27:30" pos:end="27:30">e</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:35"><expr pos:start="29:5" pos:end="29:34"><call pos:start="29:5" pos:end="29:34"><name pos:start="29:5" pos:end="29:12">g_assert</name><argument_list pos:start="29:13" pos:end="29:34">(<argument pos:start="29:14" pos:end="29:33"><expr pos:start="29:14" pos:end="29:33"><operator pos:start="29:14" pos:end="29:14">!</operator><call pos:start="29:15" pos:end="29:33"><name pos:start="29:15" pos:end="29:22">aio_poll</name><argument_list pos:start="29:23" pos:end="29:33">(<argument pos:start="29:24" pos:end="29:26"><expr pos:start="29:24" pos:end="29:26"><name pos:start="29:24" pos:end="29:26">ctx</name></expr></argument>, <argument pos:start="29:29" pos:end="29:32"><expr pos:start="29:29" pos:end="29:32"><name pos:start="29:29" pos:end="29:32">true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:15"><expr pos:start="31:5" pos:end="31:14"><name pos:start="31:5" pos:end="31:10"><name pos:start="31:5" pos:end="31:8">data</name><operator pos:start="31:9" pos:end="31:9">.</operator><name pos:start="31:10" pos:end="31:10">n</name></name> <operator pos:start="31:12" pos:end="31:12">=</operator> <literal type="number" pos:start="31:14" pos:end="31:14">0</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:78">/* An active event notifier forces aio_poll to look at EventNotifiers.  */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:41"><expr pos:start="37:5" pos:end="37:40"><call pos:start="37:5" pos:end="37:40"><name pos:start="37:5" pos:end="37:23">event_notifier_init</name><argument_list pos:start="37:24" pos:end="37:40">(<argument pos:start="37:25" pos:end="37:32"><expr pos:start="37:25" pos:end="37:32"><operator pos:start="37:25" pos:end="37:25">&amp;</operator><name pos:start="37:26" pos:end="37:32"><name pos:start="37:26" pos:end="37:30">dummy</name><operator pos:start="37:31" pos:end="37:31">.</operator><name pos:start="37:32" pos:end="37:32">e</name></name></expr></argument>, <argument pos:start="37:35" pos:end="37:39"><expr pos:start="37:35" pos:end="37:39"><name pos:start="37:35" pos:end="37:39">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:75"><expr pos:start="39:5" pos:end="39:74"><call pos:start="39:5" pos:end="39:74"><name pos:start="39:5" pos:end="39:26">aio_set_event_notifier</name><argument_list pos:start="39:27" pos:end="39:74">(<argument pos:start="39:28" pos:end="39:30"><expr pos:start="39:28" pos:end="39:30"><name pos:start="39:28" pos:end="39:30">ctx</name></expr></argument>, <argument pos:start="39:33" pos:end="39:40"><expr pos:start="39:33" pos:end="39:40"><operator pos:start="39:33" pos:end="39:33">&amp;</operator><name pos:start="39:34" pos:end="39:40"><name pos:start="39:34" pos:end="39:38">dummy</name><operator pos:start="39:39" pos:end="39:39">.</operator><name pos:start="39:40" pos:end="39:40">e</name></name></expr></argument>, <argument pos:start="39:43" pos:end="39:56"><expr pos:start="39:43" pos:end="39:56"><name pos:start="39:43" pos:end="39:56">event_ready_cb</name></expr></argument>, <argument pos:start="39:59" pos:end="39:73"><expr pos:start="39:59" pos:end="39:73"><name pos:start="39:59" pos:end="39:73">event_active_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:32"><expr pos:start="43:5" pos:end="43:31"><call pos:start="43:5" pos:end="43:31"><name pos:start="43:5" pos:end="43:22">event_notifier_set</name><argument_list pos:start="43:23" pos:end="43:31">(<argument pos:start="43:24" pos:end="43:30"><expr pos:start="43:24" pos:end="43:30"><operator pos:start="43:24" pos:end="43:24">&amp;</operator><name pos:start="43:25" pos:end="43:30"><name pos:start="43:25" pos:end="43:28">data</name><operator pos:start="43:29" pos:end="43:29">.</operator><name pos:start="43:30" pos:end="43:30">e</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:35"><expr pos:start="45:5" pos:end="45:34"><call pos:start="45:5" pos:end="45:34"><name pos:start="45:5" pos:end="45:12">g_assert</name><argument_list pos:start="45:13" pos:end="45:34">(<argument pos:start="45:14" pos:end="45:33"><expr pos:start="45:14" pos:end="45:33"><call pos:start="45:14" pos:end="45:33"><name pos:start="45:14" pos:end="45:21">aio_poll</name><argument_list pos:start="45:22" pos:end="45:33">(<argument pos:start="45:23" pos:end="45:25"><expr pos:start="45:23" pos:end="45:25"><name pos:start="45:23" pos:end="45:25">ctx</name></expr></argument>, <argument pos:start="45:28" pos:end="45:32"><expr pos:start="45:28" pos:end="45:32"><name pos:start="45:28" pos:end="45:32">false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:35"><expr pos:start="47:5" pos:end="47:34"><call pos:start="47:5" pos:end="47:34"><name pos:start="47:5" pos:end="47:19">g_assert_cmpint</name><argument_list pos:start="47:20" pos:end="47:34">(<argument pos:start="47:21" pos:end="47:26"><expr pos:start="47:21" pos:end="47:26"><name pos:start="47:21" pos:end="47:26"><name pos:start="47:21" pos:end="47:24">data</name><operator pos:start="47:25" pos:end="47:25">.</operator><name pos:start="47:26" pos:end="47:26">n</name></name></expr></argument>, <argument pos:start="47:29" pos:end="47:30"><expr pos:start="47:29" pos:end="47:30"><operator pos:start="47:29" pos:end="47:30">==</operator></expr></argument>, <argument pos:start="47:33" pos:end="47:33"><expr pos:start="47:33" pos:end="47:33"><literal type="number" pos:start="47:33" pos:end="47:33">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:35"><expr pos:start="49:5" pos:end="49:34"><call pos:start="49:5" pos:end="49:34"><name pos:start="49:5" pos:end="49:12">g_assert</name><argument_list pos:start="49:13" pos:end="49:34">(<argument pos:start="49:14" pos:end="49:33"><expr pos:start="49:14" pos:end="49:33"><call pos:start="49:14" pos:end="49:33"><name pos:start="49:14" pos:end="49:21">aio_poll</name><argument_list pos:start="49:22" pos:end="49:33">(<argument pos:start="49:23" pos:end="49:25"><expr pos:start="49:23" pos:end="49:25"><name pos:start="49:23" pos:end="49:25">ctx</name></expr></argument>, <argument pos:start="49:28" pos:end="49:32"><expr pos:start="49:28" pos:end="49:32"><name pos:start="49:28" pos:end="49:32">false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:35"><expr pos:start="51:5" pos:end="51:34"><call pos:start="51:5" pos:end="51:34"><name pos:start="51:5" pos:end="51:19">g_assert_cmpint</name><argument_list pos:start="51:20" pos:end="51:34">(<argument pos:start="51:21" pos:end="51:26"><expr pos:start="51:21" pos:end="51:26"><name pos:start="51:21" pos:end="51:26"><name pos:start="51:21" pos:end="51:24">data</name><operator pos:start="51:25" pos:end="51:25">.</operator><name pos:start="51:26" pos:end="51:26">n</name></name></expr></argument>, <argument pos:start="51:29" pos:end="51:30"><expr pos:start="51:29" pos:end="51:30"><operator pos:start="51:29" pos:end="51:30">==</operator></expr></argument>, <argument pos:start="51:33" pos:end="51:33"><expr pos:start="51:33" pos:end="51:33"><literal type="number" pos:start="51:33" pos:end="51:33">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:32"><expr pos:start="55:5" pos:end="55:31"><call pos:start="55:5" pos:end="55:31"><name pos:start="55:5" pos:end="55:22">event_notifier_set</name><argument_list pos:start="55:23" pos:end="55:31">(<argument pos:start="55:24" pos:end="55:30"><expr pos:start="55:24" pos:end="55:30"><operator pos:start="55:24" pos:end="55:24">&amp;</operator><name pos:start="55:25" pos:end="55:30"><name pos:start="55:25" pos:end="55:28">data</name><operator pos:start="55:29" pos:end="55:29">.</operator><name pos:start="55:30" pos:end="55:30">e</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:35"><expr pos:start="57:5" pos:end="57:34"><call pos:start="57:5" pos:end="57:34"><name pos:start="57:5" pos:end="57:12">g_assert</name><argument_list pos:start="57:13" pos:end="57:34">(<argument pos:start="57:14" pos:end="57:33"><expr pos:start="57:14" pos:end="57:33"><call pos:start="57:14" pos:end="57:33"><name pos:start="57:14" pos:end="57:21">aio_poll</name><argument_list pos:start="57:22" pos:end="57:33">(<argument pos:start="57:23" pos:end="57:25"><expr pos:start="57:23" pos:end="57:25"><name pos:start="57:23" pos:end="57:25">ctx</name></expr></argument>, <argument pos:start="57:28" pos:end="57:32"><expr pos:start="57:28" pos:end="57:32"><name pos:start="57:28" pos:end="57:32">false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:35"><expr pos:start="59:5" pos:end="59:34"><call pos:start="59:5" pos:end="59:34"><name pos:start="59:5" pos:end="59:19">g_assert_cmpint</name><argument_list pos:start="59:20" pos:end="59:34">(<argument pos:start="59:21" pos:end="59:26"><expr pos:start="59:21" pos:end="59:26"><name pos:start="59:21" pos:end="59:26"><name pos:start="59:21" pos:end="59:24">data</name><operator pos:start="59:25" pos:end="59:25">.</operator><name pos:start="59:26" pos:end="59:26">n</name></name></expr></argument>, <argument pos:start="59:29" pos:end="59:30"><expr pos:start="59:29" pos:end="59:30"><operator pos:start="59:29" pos:end="59:30">==</operator></expr></argument>, <argument pos:start="59:33" pos:end="59:33"><expr pos:start="59:33" pos:end="59:33"><literal type="number" pos:start="59:33" pos:end="59:33">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:35"><expr pos:start="61:5" pos:end="61:34"><call pos:start="61:5" pos:end="61:34"><name pos:start="61:5" pos:end="61:12">g_assert</name><argument_list pos:start="61:13" pos:end="61:34">(<argument pos:start="61:14" pos:end="61:33"><expr pos:start="61:14" pos:end="61:33"><call pos:start="61:14" pos:end="61:33"><name pos:start="61:14" pos:end="61:21">aio_poll</name><argument_list pos:start="61:22" pos:end="61:33">(<argument pos:start="61:23" pos:end="61:25"><expr pos:start="61:23" pos:end="61:25"><name pos:start="61:23" pos:end="61:25">ctx</name></expr></argument>, <argument pos:start="61:28" pos:end="61:32"><expr pos:start="61:28" pos:end="61:32"><name pos:start="61:28" pos:end="61:32">false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:35"><expr pos:start="63:5" pos:end="63:34"><call pos:start="63:5" pos:end="63:34"><name pos:start="63:5" pos:end="63:19">g_assert_cmpint</name><argument_list pos:start="63:20" pos:end="63:34">(<argument pos:start="63:21" pos:end="63:26"><expr pos:start="63:21" pos:end="63:26"><name pos:start="63:21" pos:end="63:26"><name pos:start="63:21" pos:end="63:24">data</name><operator pos:start="63:25" pos:end="63:25">.</operator><name pos:start="63:26" pos:end="63:26">n</name></name></expr></argument>, <argument pos:start="63:29" pos:end="63:30"><expr pos:start="63:29" pos:end="63:30"><operator pos:start="63:29" pos:end="63:30">==</operator></expr></argument>, <argument pos:start="63:33" pos:end="63:33"><expr pos:start="63:33" pos:end="63:33"><literal type="number" pos:start="63:33" pos:end="63:33">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:33"><expr pos:start="67:5" pos:end="67:32"><call pos:start="67:5" pos:end="67:32"><name pos:start="67:5" pos:end="67:22">event_notifier_set</name><argument_list pos:start="67:23" pos:end="67:32">(<argument pos:start="67:24" pos:end="67:31"><expr pos:start="67:24" pos:end="67:31"><operator pos:start="67:24" pos:end="67:24">&amp;</operator><name pos:start="67:25" pos:end="67:31"><name pos:start="67:25" pos:end="67:29">dummy</name><operator pos:start="67:30" pos:end="67:30">.</operator><name pos:start="67:31" pos:end="67:31">e</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:19"><expr pos:start="69:5" pos:end="69:18"><call pos:start="69:5" pos:end="69:18"><name pos:start="69:5" pos:end="69:16">wait_for_aio</name><argument_list pos:start="69:17" pos:end="69:18">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:35"><expr pos:start="71:5" pos:end="71:34"><call pos:start="71:5" pos:end="71:34"><name pos:start="71:5" pos:end="71:19">g_assert_cmpint</name><argument_list pos:start="71:20" pos:end="71:34">(<argument pos:start="71:21" pos:end="71:26"><expr pos:start="71:21" pos:end="71:26"><name pos:start="71:21" pos:end="71:26"><name pos:start="71:21" pos:end="71:24">data</name><operator pos:start="71:25" pos:end="71:25">.</operator><name pos:start="71:26" pos:end="71:26">n</name></name></expr></argument>, <argument pos:start="71:29" pos:end="71:30"><expr pos:start="71:29" pos:end="71:30"><operator pos:start="71:29" pos:end="71:30">==</operator></expr></argument>, <argument pos:start="71:33" pos:end="71:33"><expr pos:start="71:33" pos:end="71:33"><literal type="number" pos:start="71:33" pos:end="71:33">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:36"><expr pos:start="73:5" pos:end="73:35"><call pos:start="73:5" pos:end="73:35"><name pos:start="73:5" pos:end="73:19">g_assert_cmpint</name><argument_list pos:start="73:20" pos:end="73:35">(<argument pos:start="73:21" pos:end="73:27"><expr pos:start="73:21" pos:end="73:27"><name pos:start="73:21" pos:end="73:27"><name pos:start="73:21" pos:end="73:25">dummy</name><operator pos:start="73:26" pos:end="73:26">.</operator><name pos:start="73:27" pos:end="73:27">n</name></name></expr></argument>, <argument pos:start="73:30" pos:end="73:31"><expr pos:start="73:30" pos:end="73:31"><operator pos:start="73:30" pos:end="73:31">==</operator></expr></argument>, <argument pos:start="73:34" pos:end="73:34"><expr pos:start="73:34" pos:end="73:34"><literal type="number" pos:start="73:34" pos:end="73:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:41"><expr pos:start="75:5" pos:end="75:40"><call pos:start="75:5" pos:end="75:40"><name pos:start="75:5" pos:end="75:19">g_assert_cmpint</name><argument_list pos:start="75:20" pos:end="75:40">(<argument pos:start="75:21" pos:end="75:32"><expr pos:start="75:21" pos:end="75:32"><name pos:start="75:21" pos:end="75:32"><name pos:start="75:21" pos:end="75:25">dummy</name><operator pos:start="75:26" pos:end="75:26">.</operator><name pos:start="75:27" pos:end="75:32">active</name></name></expr></argument>, <argument pos:start="75:35" pos:end="75:36"><expr pos:start="75:35" pos:end="75:36"><operator pos:start="75:35" pos:end="75:36">==</operator></expr></argument>, <argument pos:start="75:39" pos:end="75:39"><expr pos:start="75:39" pos:end="75:39"><literal type="number" pos:start="75:39" pos:end="75:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:54"><expr pos:start="79:5" pos:end="79:53"><call pos:start="79:5" pos:end="79:53"><name pos:start="79:5" pos:end="79:26">aio_set_event_notifier</name><argument_list pos:start="79:27" pos:end="79:53">(<argument pos:start="79:28" pos:end="79:30"><expr pos:start="79:28" pos:end="79:30"><name pos:start="79:28" pos:end="79:30">ctx</name></expr></argument>, <argument pos:start="79:33" pos:end="79:40"><expr pos:start="79:33" pos:end="79:40"><operator pos:start="79:33" pos:end="79:33">&amp;</operator><name pos:start="79:34" pos:end="79:40"><name pos:start="79:34" pos:end="79:38">dummy</name><operator pos:start="79:39" pos:end="79:39">.</operator><name pos:start="79:40" pos:end="79:40">e</name></name></expr></argument>, <argument pos:start="79:43" pos:end="79:46"><expr pos:start="79:43" pos:end="79:46"><name pos:start="79:43" pos:end="79:46">NULL</name></expr></argument>, <argument pos:start="79:49" pos:end="79:52"><expr pos:start="79:49" pos:end="79:52"><name pos:start="79:49" pos:end="79:52">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:37"><expr pos:start="81:5" pos:end="81:36"><call pos:start="81:5" pos:end="81:36"><name pos:start="81:5" pos:end="81:26">event_notifier_cleanup</name><argument_list pos:start="81:27" pos:end="81:36">(<argument pos:start="81:28" pos:end="81:35"><expr pos:start="81:28" pos:end="81:35"><operator pos:start="81:28" pos:end="81:28">&amp;</operator><name pos:start="81:29" pos:end="81:35"><name pos:start="81:29" pos:end="81:33">dummy</name><operator pos:start="81:34" pos:end="81:34">.</operator><name pos:start="81:35" pos:end="81:35">e</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:53"><expr pos:start="85:5" pos:end="85:52"><call pos:start="85:5" pos:end="85:52"><name pos:start="85:5" pos:end="85:26">aio_set_event_notifier</name><argument_list pos:start="85:27" pos:end="85:52">(<argument pos:start="85:28" pos:end="85:30"><expr pos:start="85:28" pos:end="85:30"><name pos:start="85:28" pos:end="85:30">ctx</name></expr></argument>, <argument pos:start="85:33" pos:end="85:39"><expr pos:start="85:33" pos:end="85:39"><operator pos:start="85:33" pos:end="85:33">&amp;</operator><name pos:start="85:34" pos:end="85:39"><name pos:start="85:34" pos:end="85:37">data</name><operator pos:start="85:38" pos:end="85:38">.</operator><name pos:start="85:39" pos:end="85:39">e</name></name></expr></argument>, <argument pos:start="85:42" pos:end="85:45"><expr pos:start="85:42" pos:end="85:45"><name pos:start="85:42" pos:end="85:45">NULL</name></expr></argument>, <argument pos:start="85:48" pos:end="85:51"><expr pos:start="85:48" pos:end="85:51"><name pos:start="85:48" pos:end="85:51">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:36"><expr pos:start="87:5" pos:end="87:35"><call pos:start="87:5" pos:end="87:35"><name pos:start="87:5" pos:end="87:12">g_assert</name><argument_list pos:start="87:13" pos:end="87:35">(<argument pos:start="87:14" pos:end="87:34"><expr pos:start="87:14" pos:end="87:34"><operator pos:start="87:14" pos:end="87:14">!</operator><call pos:start="87:15" pos:end="87:34"><name pos:start="87:15" pos:end="87:22">aio_poll</name><argument_list pos:start="87:23" pos:end="87:34">(<argument pos:start="87:24" pos:end="87:26"><expr pos:start="87:24" pos:end="87:26"><name pos:start="87:24" pos:end="87:26">ctx</name></expr></argument>, <argument pos:start="87:29" pos:end="87:33"><expr pos:start="87:29" pos:end="87:33"><name pos:start="87:29" pos:end="87:33">false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:35"><expr pos:start="89:5" pos:end="89:34"><call pos:start="89:5" pos:end="89:34"><name pos:start="89:5" pos:end="89:19">g_assert_cmpint</name><argument_list pos:start="89:20" pos:end="89:34">(<argument pos:start="89:21" pos:end="89:26"><expr pos:start="89:21" pos:end="89:26"><name pos:start="89:21" pos:end="89:26"><name pos:start="89:21" pos:end="89:24">data</name><operator pos:start="89:25" pos:end="89:25">.</operator><name pos:start="89:26" pos:end="89:26">n</name></name></expr></argument>, <argument pos:start="89:29" pos:end="89:30"><expr pos:start="89:29" pos:end="89:30"><operator pos:start="89:29" pos:end="89:30">==</operator></expr></argument>, <argument pos:start="89:33" pos:end="89:33"><expr pos:start="89:33" pos:end="89:33"><literal type="number" pos:start="89:33" pos:end="89:33">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="93:5" pos:end="93:36"><expr pos:start="93:5" pos:end="93:35"><call pos:start="93:5" pos:end="93:35"><name pos:start="93:5" pos:end="93:26">event_notifier_cleanup</name><argument_list pos:start="93:27" pos:end="93:35">(<argument pos:start="93:28" pos:end="93:34"><expr pos:start="93:28" pos:end="93:34"><operator pos:start="93:28" pos:end="93:28">&amp;</operator><name pos:start="93:29" pos:end="93:34"><name pos:start="93:29" pos:end="93:32">data</name><operator pos:start="93:33" pos:end="93:33">.</operator><name pos:start="93:34" pos:end="93:34">e</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
