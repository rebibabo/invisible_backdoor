<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11325.c" pos:tabs="8"><function pos:start="1:1" pos:end="299:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">img_resize</name><parameter_list pos:start="1:22" pos:end="1:44">(<parameter pos:start="1:23" pos:end="1:30"><decl pos:start="1:23" pos:end="1:30"><type pos:start="1:23" pos:end="1:30"><name pos:start="1:23" pos:end="1:25">int</name></type> <name pos:start="1:27" pos:end="1:30">argc</name></decl></parameter>, <parameter pos:start="1:33" pos:end="1:43"><decl pos:start="1:33" pos:end="1:43"><type pos:start="1:33" pos:end="1:43"><name pos:start="1:33" pos:end="1:36">char</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier><modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:43">argv</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="299:1">{<block_content pos:start="5:5" pos:end="297:13">

    <decl_stmt pos:start="5:5" pos:end="5:22"><decl pos:start="5:5" pos:end="5:21"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:9">Error</name> <modifier pos:start="5:11" pos:end="5:11">*</modifier></type><name pos:start="5:12" pos:end="5:14">err</name> <init pos:start="5:16" pos:end="5:21">= <expr pos:start="5:18" pos:end="5:21"><name pos:start="5:18" pos:end="5:21">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">c</name></decl>, <decl pos:start="7:12" pos:end="7:14"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:14">ret</name></decl>, <decl pos:start="7:17" pos:end="7:24"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:17" pos:end="7:24">relative</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:38"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:24">filename</name></decl>, <decl pos:start="9:27" pos:end="9:30"><type ref="prev" pos:start="9:5" pos:end="9:16"><modifier pos:start="9:27" pos:end="9:27">*</modifier></type><name pos:start="9:28" pos:end="9:30">fmt</name></decl>, <decl pos:start="9:33" pos:end="9:37"><type ref="prev" pos:start="9:5" pos:end="9:16"><modifier pos:start="9:33" pos:end="9:33">*</modifier></type><name pos:start="9:34" pos:end="9:37">size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:13"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">int64_t</name></type> <name pos:start="11:13" pos:end="11:13">n</name></decl>, <decl pos:start="11:16" pos:end="11:25"><type ref="prev" pos:start="11:5" pos:end="11:11"/><name pos:start="11:16" pos:end="11:25">total_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">bool</name></type> <name pos:start="13:10" pos:end="13:14">quiet</name> <init pos:start="13:16" pos:end="13:22">= <expr pos:start="13:18" pos:end="13:22"><name pos:start="13:18" pos:end="13:22">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:29"><decl pos:start="15:5" pos:end="15:28"><type pos:start="15:5" pos:end="15:18"><name pos:start="15:5" pos:end="15:16">BlockBackend</name> <modifier pos:start="15:18" pos:end="15:18">*</modifier></type><name pos:start="15:19" pos:end="15:21">blk</name> <init pos:start="15:23" pos:end="15:28">= <expr pos:start="15:25" pos:end="15:28"><name pos:start="15:25" pos:end="15:28">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:20"><decl pos:start="17:5" pos:end="17:19"><type pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:12">QemuOpts</name> <modifier pos:start="17:14" pos:end="17:14">*</modifier></type><name pos:start="17:15" pos:end="17:19">param</name></decl>;</decl_stmt>



    <decl_stmt pos:start="21:5" pos:end="45:6"><decl pos:start="21:5" pos:end="45:5"><type pos:start="21:5" pos:end="21:23"><specifier pos:start="21:5" pos:end="21:10">static</specifier> <name pos:start="21:12" pos:end="21:23">QemuOptsList</name></type> <name pos:start="21:25" pos:end="21:38">resize_options</name> <init pos:start="21:40" pos:end="45:5">= <expr pos:start="21:42" pos:end="45:5"><block pos:start="21:42" pos:end="45:5">{

        <expr pos:start="23:9" pos:end="23:32"><operator pos:start="23:9" pos:end="23:9">.</operator><name pos:start="23:10" pos:end="23:13">name</name> <operator pos:start="23:15" pos:end="23:15">=</operator> <literal type="string" pos:start="23:17" pos:end="23:32">"resize_options"</literal></expr>,

        <expr pos:start="25:9" pos:end="25:60"><operator pos:start="25:9" pos:end="25:9">.</operator><name pos:start="25:10" pos:end="25:13">head</name> <operator pos:start="25:15" pos:end="25:15">=</operator> <call pos:start="25:17" pos:end="25:60"><name pos:start="25:17" pos:end="25:39">QTAILQ_HEAD_INITIALIZER</name><argument_list pos:start="25:40" pos:end="25:60">(<argument pos:start="25:41" pos:end="25:59"><expr pos:start="25:41" pos:end="25:59"><name pos:start="25:41" pos:end="25:59"><name pos:start="25:41" pos:end="25:54">resize_options</name><operator pos:start="25:55" pos:end="25:55">.</operator><name pos:start="25:56" pos:end="25:59">head</name></name></expr></argument>)</argument_list></call></expr>,

        <expr pos:start="27:9" pos:end="43:9"><operator pos:start="27:9" pos:end="27:9">.</operator><name pos:start="27:10" pos:end="27:13">desc</name> <operator pos:start="27:15" pos:end="27:15">=</operator> <block pos:start="27:17" pos:end="43:9">{

            <expr pos:start="29:13" pos:end="37:13"><block pos:start="29:13" pos:end="37:13">{

                <expr pos:start="31:17" pos:end="31:38"><operator pos:start="31:17" pos:end="31:17">.</operator><name pos:start="31:18" pos:end="31:21">name</name> <operator pos:start="31:23" pos:end="31:23">=</operator> <name pos:start="31:25" pos:end="31:38">BLOCK_OPT_SIZE</name></expr>,

                <expr pos:start="33:17" pos:end="33:37"><operator pos:start="33:17" pos:end="33:17">.</operator><name pos:start="33:18" pos:end="33:21">type</name> <operator pos:start="33:23" pos:end="33:23">=</operator> <name pos:start="33:25" pos:end="33:37">QEMU_OPT_SIZE</name></expr>,

                <expr pos:start="35:17" pos:end="35:43"><operator pos:start="35:17" pos:end="35:17">.</operator><name pos:start="35:18" pos:end="35:21">help</name> <operator pos:start="35:23" pos:end="35:23">=</operator> <literal type="string" pos:start="35:25" pos:end="35:43">"Virtual disk size"</literal></expr>

            }</block></expr>, <expr pos:start="37:16" pos:end="41:13"><block pos:start="37:16" pos:end="41:13">{

                <comment type="block" pos:start="39:17" pos:end="39:33">/* end of list */</comment>

            }</block></expr>

        }</block></expr>,

    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:28"><decl pos:start="47:5" pos:end="47:27"><type pos:start="47:5" pos:end="47:8"><name pos:start="47:5" pos:end="47:8">bool</name></type> <name pos:start="47:10" pos:end="47:19">image_opts</name> <init pos:start="47:21" pos:end="47:27">= <expr pos:start="47:23" pos:end="47:27"><name pos:start="47:23" pos:end="47:27">false</name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="51:5" pos:end="53:31">/* Remove size from argv manually so that negative numbers are not treated

     * as options by getopt. */</comment>

    <if_stmt pos:start="55:5" pos:end="61:5"><if pos:start="55:5" pos:end="61:5">if <condition pos:start="55:8" pos:end="55:17">(<expr pos:start="55:9" pos:end="55:16"><name pos:start="55:9" pos:end="55:12">argc</name> <operator pos:start="55:14" pos:end="55:14">&lt;</operator> <literal type="number" pos:start="55:16" pos:end="55:16">3</literal></expr>)</condition> <block pos:start="55:19" pos:end="61:5">{<block_content pos:start="57:9" pos:end="59:17">

        <expr_stmt pos:start="57:9" pos:end="57:43"><expr pos:start="57:9" pos:end="57:42"><call pos:start="57:9" pos:end="57:42"><name pos:start="57:9" pos:end="57:18">error_exit</name><argument_list pos:start="57:19" pos:end="57:42">(<argument pos:start="57:20" pos:end="57:41"><expr pos:start="57:20" pos:end="57:41"><literal type="string" pos:start="57:20" pos:end="57:41">"Not enough arguments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="59:9" pos:end="59:17">return <expr pos:start="59:16" pos:end="59:16"><literal type="number" pos:start="59:16" pos:end="59:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:24"><expr pos:start="65:5" pos:end="65:23"><name pos:start="65:5" pos:end="65:8">size</name> <operator pos:start="65:10" pos:end="65:10">=</operator> <name pos:start="65:12" pos:end="65:23"><name pos:start="65:12" pos:end="65:15">argv</name><index pos:start="65:16" pos:end="65:23">[<expr pos:start="65:17" pos:end="65:22"><operator pos:start="65:17" pos:end="65:18">--</operator><name pos:start="65:19" pos:end="65:22">argc</name></expr>]</index></name></expr>;</expr_stmt>



    <comment type="block" pos:start="69:5" pos:end="69:32">/* Parse getopt arguments */</comment>

    <expr_stmt pos:start="71:5" pos:end="71:15"><expr pos:start="71:5" pos:end="71:14"><name pos:start="71:5" pos:end="71:7">fmt</name> <operator pos:start="71:9" pos:end="71:9">=</operator> <name pos:start="71:11" pos:end="71:14">NULL</name></expr>;</expr_stmt>

    <for pos:start="73:5" pos:end="143:5">for<control pos:start="73:8" pos:end="73:11">(<init pos:start="73:9" pos:end="73:9">;</init><condition pos:start="73:10" pos:end="73:10">;</condition><incr/>)</control> <block pos:start="73:13" pos:end="143:5">{<block_content pos:start="75:9" pos:end="141:9">

        <decl_stmt pos:start="75:9" pos:end="85:10"><decl pos:start="75:9" pos:end="85:9"><type pos:start="75:9" pos:end="75:34"><specifier pos:start="75:9" pos:end="75:14">static</specifier> <specifier pos:start="75:16" pos:end="75:20">const</specifier> <name pos:start="75:22" pos:end="75:34"><name pos:start="75:22" pos:end="75:27">struct</name> <name pos:start="75:29" pos:end="75:34">option</name></name></type> <name pos:start="75:36" pos:end="75:49"><name pos:start="75:36" pos:end="75:47">long_options</name><index pos:start="75:48" pos:end="75:49">[]</index></name> <init pos:start="75:51" pos:end="85:9">= <expr pos:start="75:53" pos:end="85:9"><block pos:start="75:53" pos:end="85:9">{

            <expr pos:start="77:13" pos:end="77:41"><block pos:start="77:13" pos:end="77:41">{<expr pos:start="77:14" pos:end="77:19"><literal type="string" pos:start="77:14" pos:end="77:19">"help"</literal></expr>, <expr pos:start="77:22" pos:end="77:32"><name pos:start="77:22" pos:end="77:32">no_argument</name></expr>, <expr pos:start="77:35" pos:end="77:35"><literal type="number" pos:start="77:35" pos:end="77:35">0</literal></expr>, <expr pos:start="77:38" pos:end="77:40"><literal type="char" pos:start="77:38" pos:end="77:40">'h'</literal></expr>}</block></expr>,

            <expr pos:start="79:13" pos:end="79:59"><block pos:start="79:13" pos:end="79:59">{<expr pos:start="79:14" pos:end="79:21"><literal type="string" pos:start="79:14" pos:end="79:21">"object"</literal></expr>, <expr pos:start="79:24" pos:end="79:40"><name pos:start="79:24" pos:end="79:40">required_argument</name></expr>, <expr pos:start="79:43" pos:end="79:43"><literal type="number" pos:start="79:43" pos:end="79:43">0</literal></expr>, <expr pos:start="79:46" pos:end="79:58"><name pos:start="79:46" pos:end="79:58">OPTION_OBJECT</name></expr>}</block></expr>,

            <expr pos:start="81:13" pos:end="81:61"><block pos:start="81:13" pos:end="81:61">{<expr pos:start="81:14" pos:end="81:25"><literal type="string" pos:start="81:14" pos:end="81:25">"image-opts"</literal></expr>, <expr pos:start="81:28" pos:end="81:38"><name pos:start="81:28" pos:end="81:38">no_argument</name></expr>, <expr pos:start="81:41" pos:end="81:41"><literal type="number" pos:start="81:41" pos:end="81:41">0</literal></expr>, <expr pos:start="81:44" pos:end="81:60"><name pos:start="81:44" pos:end="81:60">OPTION_IMAGE_OPTS</name></expr>}</block></expr>,

            <expr pos:start="83:13" pos:end="83:24"><block pos:start="83:13" pos:end="83:24">{<expr pos:start="83:14" pos:end="83:14"><literal type="number" pos:start="83:14" pos:end="83:14">0</literal></expr>, <expr pos:start="83:17" pos:end="83:17"><literal type="number" pos:start="83:17" pos:end="83:17">0</literal></expr>, <expr pos:start="83:20" pos:end="83:20"><literal type="number" pos:start="83:20" pos:end="83:20">0</literal></expr>, <expr pos:start="83:23" pos:end="83:23"><literal type="number" pos:start="83:23" pos:end="83:23">0</literal></expr>}</block></expr>

        }</block></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="87:9" pos:end="89:44"><expr pos:start="87:9" pos:end="89:43"><name pos:start="87:9" pos:end="87:9">c</name> <operator pos:start="87:11" pos:end="87:11">=</operator> <call pos:start="87:13" pos:end="89:43"><name pos:start="87:13" pos:end="87:23">getopt_long</name><argument_list pos:start="87:24" pos:end="89:43">(<argument pos:start="87:25" pos:end="87:28"><expr pos:start="87:25" pos:end="87:28"><name pos:start="87:25" pos:end="87:28">argc</name></expr></argument>, <argument pos:start="87:31" pos:end="87:34"><expr pos:start="87:31" pos:end="87:34"><name pos:start="87:31" pos:end="87:34">argv</name></expr></argument>, <argument pos:start="87:37" pos:end="87:42"><expr pos:start="87:37" pos:end="87:42"><literal type="string" pos:start="87:37" pos:end="87:42">"f:hq"</literal></expr></argument>,

                        <argument pos:start="89:25" pos:end="89:36"><expr pos:start="89:25" pos:end="89:36"><name pos:start="89:25" pos:end="89:36">long_options</name></expr></argument>, <argument pos:start="89:39" pos:end="89:42"><expr pos:start="89:39" pos:end="89:42"><name pos:start="89:39" pos:end="89:42">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="91:9" pos:end="95:9"><if pos:start="91:9" pos:end="95:9">if <condition pos:start="91:12" pos:end="91:20">(<expr pos:start="91:13" pos:end="91:19"><name pos:start="91:13" pos:end="91:13">c</name> <operator pos:start="91:15" pos:end="91:16">==</operator> <operator pos:start="91:18" pos:end="91:18">-</operator><literal type="number" pos:start="91:19" pos:end="91:19">1</literal></expr>)</condition> <block pos:start="91:22" pos:end="95:9">{<block_content pos:start="93:13" pos:end="93:18">

            <break pos:start="93:13" pos:end="93:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <switch pos:start="97:9" pos:end="141:9">switch<condition pos:start="97:15" pos:end="97:17">(<expr pos:start="97:16" pos:end="97:16"><name pos:start="97:16" pos:end="97:16">c</name></expr>)</condition> <block pos:start="97:19" pos:end="141:9">{<block_content pos:start="99:9" pos:end="139:18">

        <case pos:start="99:9" pos:end="99:17">case <expr pos:start="99:14" pos:end="99:16"><literal type="char" pos:start="99:14" pos:end="99:16">'?'</literal></expr>:</case>

        <case pos:start="101:9" pos:end="101:17">case <expr pos:start="101:14" pos:end="101:16"><literal type="char" pos:start="101:14" pos:end="101:16">'h'</literal></expr>:</case>

            <expr_stmt pos:start="103:13" pos:end="103:19"><expr pos:start="103:13" pos:end="103:18"><call pos:start="103:13" pos:end="103:18"><name pos:start="103:13" pos:end="103:16">help</name><argument_list pos:start="103:17" pos:end="103:18">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="105:13" pos:end="105:18">break;</break>

        <case pos:start="107:9" pos:end="107:17">case <expr pos:start="107:14" pos:end="107:16"><literal type="char" pos:start="107:14" pos:end="107:16">'f'</literal></expr>:</case>

            <expr_stmt pos:start="109:13" pos:end="109:25"><expr pos:start="109:13" pos:end="109:24"><name pos:start="109:13" pos:end="109:15">fmt</name> <operator pos:start="109:17" pos:end="109:17">=</operator> <name pos:start="109:19" pos:end="109:24">optarg</name></expr>;</expr_stmt>

            <break pos:start="111:13" pos:end="111:18">break;</break>

        <case pos:start="113:9" pos:end="113:17">case <expr pos:start="113:14" pos:end="113:16"><literal type="char" pos:start="113:14" pos:end="113:16">'q'</literal></expr>:</case>

            <expr_stmt pos:start="115:13" pos:end="115:25"><expr pos:start="115:13" pos:end="115:24"><name pos:start="115:13" pos:end="115:17">quiet</name> <operator pos:start="115:19" pos:end="115:19">=</operator> <name pos:start="115:21" pos:end="115:24">true</name></expr>;</expr_stmt>

            <break pos:start="117:13" pos:end="117:18">break;</break>

        <case pos:start="119:9" pos:end="119:27">case <expr pos:start="119:14" pos:end="119:26"><name pos:start="119:14" pos:end="119:26">OPTION_OBJECT</name></expr>:</case> <block pos:start="119:29" pos:end="133:9">{<block_content pos:start="121:13" pos:end="131:13">

            <decl_stmt pos:start="121:13" pos:end="121:27"><decl pos:start="121:13" pos:end="121:26"><type pos:start="121:13" pos:end="121:22"><name pos:start="121:13" pos:end="121:20">QemuOpts</name> <modifier pos:start="121:22" pos:end="121:22">*</modifier></type><name pos:start="121:23" pos:end="121:26">opts</name></decl>;</decl_stmt>

            <expr_stmt pos:start="123:13" pos:end="125:57"><expr pos:start="123:13" pos:end="125:56"><name pos:start="123:13" pos:end="123:16">opts</name> <operator pos:start="123:18" pos:end="123:18">=</operator> <call pos:start="123:20" pos:end="125:56"><name pos:start="123:20" pos:end="123:42">qemu_opts_parse_noisily</name><argument_list pos:start="123:43" pos:end="125:56">(<argument pos:start="123:44" pos:end="123:60"><expr pos:start="123:44" pos:end="123:60"><operator pos:start="123:44" pos:end="123:44">&amp;</operator><name pos:start="123:45" pos:end="123:60">qemu_object_opts</name></expr></argument>,

                                           <argument pos:start="125:44" pos:end="125:49"><expr pos:start="125:44" pos:end="125:49"><name pos:start="125:44" pos:end="125:49">optarg</name></expr></argument>, <argument pos:start="125:52" pos:end="125:55"><expr pos:start="125:52" pos:end="125:55"><name pos:start="125:52" pos:end="125:55">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="127:13" pos:end="131:13"><if pos:start="127:13" pos:end="131:13">if <condition pos:start="127:16" pos:end="127:22">(<expr pos:start="127:17" pos:end="127:21"><operator pos:start="127:17" pos:end="127:17">!</operator><name pos:start="127:18" pos:end="127:21">opts</name></expr>)</condition> <block pos:start="127:24" pos:end="131:13">{<block_content pos:start="129:17" pos:end="129:25">

                <return pos:start="129:17" pos:end="129:25">return <expr pos:start="129:24" pos:end="129:24"><literal type="number" pos:start="129:24" pos:end="129:24">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>   <break pos:start="133:13" pos:end="133:18">break;</break>

        <case pos:start="135:9" pos:end="135:31">case <expr pos:start="135:14" pos:end="135:30"><name pos:start="135:14" pos:end="135:30">OPTION_IMAGE_OPTS</name></expr>:</case>

            <expr_stmt pos:start="137:13" pos:end="137:30"><expr pos:start="137:13" pos:end="137:29"><name pos:start="137:13" pos:end="137:22">image_opts</name> <operator pos:start="137:24" pos:end="137:24">=</operator> <name pos:start="137:26" pos:end="137:29">true</name></expr>;</expr_stmt>

            <break pos:start="139:13" pos:end="139:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></for>

    <if_stmt pos:start="145:5" pos:end="149:5"><if pos:start="145:5" pos:end="149:5">if <condition pos:start="145:8" pos:end="145:27">(<expr pos:start="145:9" pos:end="145:26"><name pos:start="145:9" pos:end="145:14">optind</name> <operator pos:start="145:16" pos:end="145:17">!=</operator> <name pos:start="145:19" pos:end="145:22">argc</name> <operator pos:start="145:24" pos:end="145:24">-</operator> <literal type="number" pos:start="145:26" pos:end="145:26">1</literal></expr>)</condition> <block pos:start="145:29" pos:end="149:5">{<block_content pos:start="147:9" pos:end="147:52">

        <expr_stmt pos:start="147:9" pos:end="147:52"><expr pos:start="147:9" pos:end="147:51"><call pos:start="147:9" pos:end="147:51"><name pos:start="147:9" pos:end="147:18">error_exit</name><argument_list pos:start="147:19" pos:end="147:51">(<argument pos:start="147:20" pos:end="147:50"><expr pos:start="147:20" pos:end="147:50"><literal type="string" pos:start="147:20" pos:end="147:50">"Expecting one image file name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="151:5" pos:end="151:30"><expr pos:start="151:5" pos:end="151:29"><name pos:start="151:5" pos:end="151:12">filename</name> <operator pos:start="151:14" pos:end="151:14">=</operator> <name pos:start="151:16" pos:end="151:29"><name pos:start="151:16" pos:end="151:19">argv</name><index pos:start="151:20" pos:end="151:29">[<expr pos:start="151:21" pos:end="151:28"><name pos:start="151:21" pos:end="151:26">optind</name><operator pos:start="151:27" pos:end="151:28">++</operator></expr>]</index></name></expr>;</expr_stmt>



    <if_stmt pos:start="155:5" pos:end="163:5"><if pos:start="155:5" pos:end="163:5">if <condition pos:start="155:8" pos:end="159:38">(<expr pos:start="155:9" pos:end="159:37"><call pos:start="155:9" pos:end="159:37"><name pos:start="155:9" pos:end="155:25">qemu_opts_foreach</name><argument_list pos:start="155:26" pos:end="159:37">(<argument pos:start="155:27" pos:end="155:43"><expr pos:start="155:27" pos:end="155:43"><operator pos:start="155:27" pos:end="155:27">&amp;</operator><name pos:start="155:28" pos:end="155:43">qemu_object_opts</name></expr></argument>,

                          <argument pos:start="157:27" pos:end="157:57"><expr pos:start="157:27" pos:end="157:57"><name pos:start="157:27" pos:end="157:57">user_creatable_add_opts_foreach</name></expr></argument>,

                          <argument pos:start="159:27" pos:end="159:30"><expr pos:start="159:27" pos:end="159:30"><name pos:start="159:27" pos:end="159:30">NULL</name></expr></argument>, <argument pos:start="159:33" pos:end="159:36"><expr pos:start="159:33" pos:end="159:36"><name pos:start="159:33" pos:end="159:36">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="159:40" pos:end="163:5">{<block_content pos:start="161:9" pos:end="161:17">

        <return pos:start="161:9" pos:end="161:17">return <expr pos:start="161:16" pos:end="161:16"><literal type="number" pos:start="161:16" pos:end="161:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="167:5" pos:end="167:54">/* Choose grow, shrink, or absolute resize mode */</comment>

    <switch pos:start="169:5" pos:end="193:5">switch <condition pos:start="169:12" pos:end="169:20">(<expr pos:start="169:13" pos:end="169:19"><name pos:start="169:13" pos:end="169:19"><name pos:start="169:13" pos:end="169:16">size</name><index pos:start="169:17" pos:end="169:19">[<expr pos:start="169:18" pos:end="169:18"><literal type="number" pos:start="169:18" pos:end="169:18">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="169:22" pos:end="193:5">{<block_content pos:start="171:5" pos:end="191:14">

    <case pos:start="171:5" pos:end="171:13">case <expr pos:start="171:10" pos:end="171:12"><literal type="char" pos:start="171:10" pos:end="171:12">'+'</literal></expr>:</case>

        <expr_stmt pos:start="173:9" pos:end="173:21"><expr pos:start="173:9" pos:end="173:20"><name pos:start="173:9" pos:end="173:16">relative</name> <operator pos:start="173:18" pos:end="173:18">=</operator> <literal type="number" pos:start="173:20" pos:end="173:20">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="175:9" pos:end="175:15"><expr pos:start="175:9" pos:end="175:14"><name pos:start="175:9" pos:end="175:12">size</name><operator pos:start="175:13" pos:end="175:14">++</operator></expr>;</expr_stmt>

        <break pos:start="177:9" pos:end="177:14">break;</break>

    <case pos:start="179:5" pos:end="179:13">case <expr pos:start="179:10" pos:end="179:12"><literal type="char" pos:start="179:10" pos:end="179:12">'-'</literal></expr>:</case>

        <expr_stmt pos:start="181:9" pos:end="181:22"><expr pos:start="181:9" pos:end="181:21"><name pos:start="181:9" pos:end="181:16">relative</name> <operator pos:start="181:18" pos:end="181:18">=</operator> <operator pos:start="181:20" pos:end="181:20">-</operator><literal type="number" pos:start="181:21" pos:end="181:21">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="183:9" pos:end="183:15"><expr pos:start="183:9" pos:end="183:14"><name pos:start="183:9" pos:end="183:12">size</name><operator pos:start="183:13" pos:end="183:14">++</operator></expr>;</expr_stmt>

        <break pos:start="185:9" pos:end="185:14">break;</break>

    <default pos:start="187:5" pos:end="187:12">default:</default>

        <expr_stmt pos:start="189:9" pos:end="189:21"><expr pos:start="189:9" pos:end="189:20"><name pos:start="189:9" pos:end="189:16">relative</name> <operator pos:start="189:18" pos:end="189:18">=</operator> <literal type="number" pos:start="189:20" pos:end="189:20">0</literal></expr>;</expr_stmt>

        <break pos:start="191:9" pos:end="191:14">break;</break>

    </block_content>}</block></switch>



    <comment type="block" pos:start="197:5" pos:end="197:20">/* Parse size */</comment>

    <expr_stmt pos:start="199:5" pos:end="199:69"><expr pos:start="199:5" pos:end="199:68"><name pos:start="199:5" pos:end="199:9">param</name> <operator pos:start="199:11" pos:end="199:11">=</operator> <call pos:start="199:13" pos:end="199:68"><name pos:start="199:13" pos:end="199:28">qemu_opts_create</name><argument_list pos:start="199:29" pos:end="199:68">(<argument pos:start="199:30" pos:end="199:44"><expr pos:start="199:30" pos:end="199:44"><operator pos:start="199:30" pos:end="199:30">&amp;</operator><name pos:start="199:31" pos:end="199:44">resize_options</name></expr></argument>, <argument pos:start="199:47" pos:end="199:50"><expr pos:start="199:47" pos:end="199:50"><name pos:start="199:47" pos:end="199:50">NULL</name></expr></argument>, <argument pos:start="199:53" pos:end="199:53"><expr pos:start="199:53" pos:end="199:53"><literal type="number" pos:start="199:53" pos:end="199:53">0</literal></expr></argument>, <argument pos:start="199:56" pos:end="199:67"><expr pos:start="199:56" pos:end="199:67"><operator pos:start="199:56" pos:end="199:56">&amp;</operator><name pos:start="199:57" pos:end="199:67">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="201:5" pos:end="201:52"><expr pos:start="201:5" pos:end="201:51"><call pos:start="201:5" pos:end="201:51"><name pos:start="201:5" pos:end="201:16">qemu_opt_set</name><argument_list pos:start="201:17" pos:end="201:51">(<argument pos:start="201:18" pos:end="201:22"><expr pos:start="201:18" pos:end="201:22"><name pos:start="201:18" pos:end="201:22">param</name></expr></argument>, <argument pos:start="201:25" pos:end="201:38"><expr pos:start="201:25" pos:end="201:38"><name pos:start="201:25" pos:end="201:38">BLOCK_OPT_SIZE</name></expr></argument>, <argument pos:start="201:41" pos:end="201:44"><expr pos:start="201:41" pos:end="201:44"><name pos:start="201:41" pos:end="201:44">size</name></expr></argument>, <argument pos:start="201:47" pos:end="201:50"><expr pos:start="201:47" pos:end="201:50"><operator pos:start="201:47" pos:end="201:47">&amp;</operator><name pos:start="201:48" pos:end="201:50">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="203:5" pos:end="213:5"><if pos:start="203:5" pos:end="213:5">if <condition pos:start="203:8" pos:end="203:12">(<expr pos:start="203:9" pos:end="203:11"><name pos:start="203:9" pos:end="203:11">err</name></expr>)</condition> <block pos:start="203:14" pos:end="213:5">{<block_content pos:start="205:9" pos:end="211:17">

        <expr_stmt pos:start="205:9" pos:end="205:30"><expr pos:start="205:9" pos:end="205:29"><call pos:start="205:9" pos:end="205:29"><name pos:start="205:9" pos:end="205:24">error_report_err</name><argument_list pos:start="205:25" pos:end="205:29">(<argument pos:start="205:26" pos:end="205:28"><expr pos:start="205:26" pos:end="205:28"><name pos:start="205:26" pos:end="205:28">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="207:9" pos:end="207:17"><expr pos:start="207:9" pos:end="207:16"><name pos:start="207:9" pos:end="207:11">ret</name> <operator pos:start="207:13" pos:end="207:13">=</operator> <operator pos:start="207:15" pos:end="207:15">-</operator><literal type="number" pos:start="207:16" pos:end="207:16">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="209:9" pos:end="209:29"><expr pos:start="209:9" pos:end="209:28"><call pos:start="209:9" pos:end="209:28"><name pos:start="209:9" pos:end="209:21">qemu_opts_del</name><argument_list pos:start="209:22" pos:end="209:28">(<argument pos:start="209:23" pos:end="209:27"><expr pos:start="209:23" pos:end="209:27"><name pos:start="209:23" pos:end="209:27">param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="211:9" pos:end="211:17">goto <name pos:start="211:14" pos:end="211:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="215:5" pos:end="215:52"><expr pos:start="215:5" pos:end="215:51"><name pos:start="215:5" pos:end="215:5">n</name> <operator pos:start="215:7" pos:end="215:7">=</operator> <call pos:start="215:9" pos:end="215:51"><name pos:start="215:9" pos:end="215:25">qemu_opt_get_size</name><argument_list pos:start="215:26" pos:end="215:51">(<argument pos:start="215:27" pos:end="215:31"><expr pos:start="215:27" pos:end="215:31"><name pos:start="215:27" pos:end="215:31">param</name></expr></argument>, <argument pos:start="215:34" pos:end="215:47"><expr pos:start="215:34" pos:end="215:47"><name pos:start="215:34" pos:end="215:47">BLOCK_OPT_SIZE</name></expr></argument>, <argument pos:start="215:50" pos:end="215:50"><expr pos:start="215:50" pos:end="215:50"><literal type="number" pos:start="215:50" pos:end="215:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="217:5" pos:end="217:25"><expr pos:start="217:5" pos:end="217:24"><call pos:start="217:5" pos:end="217:24"><name pos:start="217:5" pos:end="217:17">qemu_opts_del</name><argument_list pos:start="217:18" pos:end="217:24">(<argument pos:start="217:19" pos:end="217:23"><expr pos:start="217:19" pos:end="217:23"><name pos:start="217:19" pos:end="217:23">param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="221:5" pos:end="223:62"><expr pos:start="221:5" pos:end="223:61"><name pos:start="221:5" pos:end="221:7">blk</name> <operator pos:start="221:9" pos:end="221:9">=</operator> <call pos:start="221:11" pos:end="223:61"><name pos:start="221:11" pos:end="221:18">img_open</name><argument_list pos:start="221:19" pos:end="223:61">(<argument pos:start="221:20" pos:end="221:29"><expr pos:start="221:20" pos:end="221:29"><name pos:start="221:20" pos:end="221:29">image_opts</name></expr></argument>, <argument pos:start="221:32" pos:end="221:39"><expr pos:start="221:32" pos:end="221:39"><name pos:start="221:32" pos:end="221:39">filename</name></expr></argument>, <argument pos:start="221:42" pos:end="221:44"><expr pos:start="221:42" pos:end="221:44"><name pos:start="221:42" pos:end="221:44">fmt</name></expr></argument>,

                   <argument pos:start="223:20" pos:end="223:46"><expr pos:start="223:20" pos:end="223:46"><name pos:start="223:20" pos:end="223:30">BDRV_O_RDWR</name> <operator pos:start="223:32" pos:end="223:32">|</operator> <name pos:start="223:34" pos:end="223:46">BDRV_O_RESIZE</name></expr></argument>, <argument pos:start="223:49" pos:end="223:53"><expr pos:start="223:49" pos:end="223:53"><name pos:start="223:49" pos:end="223:53">false</name></expr></argument>, <argument pos:start="223:56" pos:end="223:60"><expr pos:start="223:56" pos:end="223:60"><name pos:start="223:56" pos:end="223:60">quiet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="225:5" pos:end="231:5"><if pos:start="225:5" pos:end="231:5">if <condition pos:start="225:8" pos:end="225:13">(<expr pos:start="225:9" pos:end="225:12"><operator pos:start="225:9" pos:end="225:9">!</operator><name pos:start="225:10" pos:end="225:12">blk</name></expr>)</condition> <block pos:start="225:15" pos:end="231:5">{<block_content pos:start="227:9" pos:end="229:17">

        <expr_stmt pos:start="227:9" pos:end="227:17"><expr pos:start="227:9" pos:end="227:16"><name pos:start="227:9" pos:end="227:11">ret</name> <operator pos:start="227:13" pos:end="227:13">=</operator> <operator pos:start="227:15" pos:end="227:15">-</operator><literal type="number" pos:start="227:16" pos:end="227:16">1</literal></expr>;</expr_stmt>

        <goto pos:start="229:9" pos:end="229:17">goto <name pos:start="229:14" pos:end="229:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="235:5" pos:end="243:5"><if pos:start="235:5" pos:end="239:5">if <condition pos:start="235:8" pos:end="235:17">(<expr pos:start="235:9" pos:end="235:16"><name pos:start="235:9" pos:end="235:16">relative</name></expr>)</condition> <block pos:start="235:19" pos:end="239:5">{<block_content pos:start="237:9" pos:end="237:55">

        <expr_stmt pos:start="237:9" pos:end="237:55"><expr pos:start="237:9" pos:end="237:54"><name pos:start="237:9" pos:end="237:18">total_size</name> <operator pos:start="237:20" pos:end="237:20">=</operator> <call pos:start="237:22" pos:end="237:39"><name pos:start="237:22" pos:end="237:34">blk_getlength</name><argument_list pos:start="237:35" pos:end="237:39">(<argument pos:start="237:36" pos:end="237:38"><expr pos:start="237:36" pos:end="237:38"><name pos:start="237:36" pos:end="237:38">blk</name></expr></argument>)</argument_list></call> <operator pos:start="237:41" pos:end="237:41">+</operator> <name pos:start="237:43" pos:end="237:43">n</name> <operator pos:start="237:45" pos:end="237:45">*</operator> <name pos:start="237:47" pos:end="237:54">relative</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="239:7" pos:end="243:5">else <block pos:start="239:12" pos:end="243:5">{<block_content pos:start="241:9" pos:end="241:23">

        <expr_stmt pos:start="241:9" pos:end="241:23"><expr pos:start="241:9" pos:end="241:22"><name pos:start="241:9" pos:end="241:18">total_size</name> <operator pos:start="241:20" pos:end="241:20">=</operator> <name pos:start="241:22" pos:end="241:22">n</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="245:5" pos:end="253:5"><if pos:start="245:5" pos:end="253:5">if <condition pos:start="245:8" pos:end="245:24">(<expr pos:start="245:9" pos:end="245:23"><name pos:start="245:9" pos:end="245:18">total_size</name> <operator pos:start="245:20" pos:end="245:21">&lt;=</operator> <literal type="number" pos:start="245:23" pos:end="245:23">0</literal></expr>)</condition> <block pos:start="245:26" pos:end="253:5">{<block_content pos:start="247:9" pos:end="251:17">

        <expr_stmt pos:start="247:9" pos:end="247:56"><expr pos:start="247:9" pos:end="247:55"><call pos:start="247:9" pos:end="247:55"><name pos:start="247:9" pos:end="247:20">error_report</name><argument_list pos:start="247:21" pos:end="247:55">(<argument pos:start="247:22" pos:end="247:54"><expr pos:start="247:22" pos:end="247:54"><literal type="string" pos:start="247:22" pos:end="247:54">"New image size must be positive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="249:9" pos:end="249:17"><expr pos:start="249:9" pos:end="249:16"><name pos:start="249:9" pos:end="249:11">ret</name> <operator pos:start="249:13" pos:end="249:13">=</operator> <operator pos:start="249:15" pos:end="249:15">-</operator><literal type="number" pos:start="249:16" pos:end="249:16">1</literal></expr>;</expr_stmt>

        <goto pos:start="251:9" pos:end="251:17">goto <name pos:start="251:14" pos:end="251:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="257:5" pos:end="257:40"><expr pos:start="257:5" pos:end="257:39"><name pos:start="257:5" pos:end="257:7">ret</name> <operator pos:start="257:9" pos:end="257:9">=</operator> <call pos:start="257:11" pos:end="257:39"><name pos:start="257:11" pos:end="257:22">blk_truncate</name><argument_list pos:start="257:23" pos:end="257:39">(<argument pos:start="257:24" pos:end="257:26"><expr pos:start="257:24" pos:end="257:26"><name pos:start="257:24" pos:end="257:26">blk</name></expr></argument>, <argument pos:start="257:29" pos:end="257:38"><expr pos:start="257:29" pos:end="257:38"><name pos:start="257:29" pos:end="257:38">total_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch pos:start="259:5" pos:end="285:5">switch <condition pos:start="259:12" pos:end="259:16">(<expr pos:start="259:13" pos:end="259:15"><name pos:start="259:13" pos:end="259:15">ret</name></expr>)</condition> <block pos:start="259:18" pos:end="285:5">{<block_content pos:start="261:5" pos:end="283:14">

    <case pos:start="261:5" pos:end="261:11">case <expr pos:start="261:10" pos:end="261:10"><literal type="number" pos:start="261:10" pos:end="261:10">0</literal></expr>:</case>

        <expr_stmt pos:start="263:9" pos:end="263:43"><expr pos:start="263:9" pos:end="263:42"><call pos:start="263:9" pos:end="263:42"><name pos:start="263:9" pos:end="263:15">qprintf</name><argument_list pos:start="263:16" pos:end="263:42">(<argument pos:start="263:17" pos:end="263:21"><expr pos:start="263:17" pos:end="263:21"><name pos:start="263:17" pos:end="263:21">quiet</name></expr></argument>, <argument pos:start="263:24" pos:end="263:41"><expr pos:start="263:24" pos:end="263:41"><literal type="string" pos:start="263:24" pos:end="263:41">"Image resized.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="265:9" pos:end="265:14">break;</break>

    <case pos:start="267:5" pos:end="267:18">case <expr pos:start="267:10" pos:end="267:17"><operator pos:start="267:10" pos:end="267:10">-</operator><name pos:start="267:11" pos:end="267:17">ENOTSUP</name></expr>:</case>

        <expr_stmt pos:start="269:9" pos:end="269:59"><expr pos:start="269:9" pos:end="269:58"><call pos:start="269:9" pos:end="269:58"><name pos:start="269:9" pos:end="269:20">error_report</name><argument_list pos:start="269:21" pos:end="269:58">(<argument pos:start="269:22" pos:end="269:57"><expr pos:start="269:22" pos:end="269:57"><literal type="string" pos:start="269:22" pos:end="269:57">"This image does not support resize"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="271:9" pos:end="271:14">break;</break>

    <case pos:start="273:5" pos:end="273:17">case <expr pos:start="273:10" pos:end="273:16"><operator pos:start="273:10" pos:end="273:10">-</operator><name pos:start="273:11" pos:end="273:16">EACCES</name></expr>:</case>

        <expr_stmt pos:start="275:9" pos:end="275:43"><expr pos:start="275:9" pos:end="275:42"><call pos:start="275:9" pos:end="275:42"><name pos:start="275:9" pos:end="275:20">error_report</name><argument_list pos:start="275:21" pos:end="275:42">(<argument pos:start="275:22" pos:end="275:41"><expr pos:start="275:22" pos:end="275:41"><literal type="string" pos:start="275:22" pos:end="275:41">"Image is read-only"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="277:9" pos:end="277:14">break;</break>

    <default pos:start="279:5" pos:end="279:12">default:</default>

        <expr_stmt pos:start="281:9" pos:end="281:65"><expr pos:start="281:9" pos:end="281:64"><call pos:start="281:9" pos:end="281:64"><name pos:start="281:9" pos:end="281:20">error_report</name><argument_list pos:start="281:21" pos:end="281:64">(<argument pos:start="281:22" pos:end="281:47"><expr pos:start="281:22" pos:end="281:47"><literal type="string" pos:start="281:22" pos:end="281:47">"Error resizing image: %s"</literal></expr></argument>, <argument pos:start="281:50" pos:end="281:63"><expr pos:start="281:50" pos:end="281:63"><call pos:start="281:50" pos:end="281:63"><name pos:start="281:50" pos:end="281:57">strerror</name><argument_list pos:start="281:58" pos:end="281:63">(<argument pos:start="281:59" pos:end="281:62"><expr pos:start="281:59" pos:end="281:62"><operator pos:start="281:59" pos:end="281:59">-</operator><name pos:start="281:60" pos:end="281:62">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="283:9" pos:end="283:14">break;</break>

    </block_content>}</block></switch>

<label pos:start="287:1" pos:end="287:4"><name pos:start="287:1" pos:end="287:3">out</name>:</label>

    <expr_stmt pos:start="289:5" pos:end="289:19"><expr pos:start="289:5" pos:end="289:18"><call pos:start="289:5" pos:end="289:18"><name pos:start="289:5" pos:end="289:13">blk_unref</name><argument_list pos:start="289:14" pos:end="289:18">(<argument pos:start="289:15" pos:end="289:17"><expr pos:start="289:15" pos:end="289:17"><name pos:start="289:15" pos:end="289:17">blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="291:5" pos:end="295:5"><if pos:start="291:5" pos:end="295:5">if <condition pos:start="291:8" pos:end="291:12">(<expr pos:start="291:9" pos:end="291:11"><name pos:start="291:9" pos:end="291:11">ret</name></expr>)</condition> <block pos:start="291:14" pos:end="295:5">{<block_content pos:start="293:9" pos:end="293:17">

        <return pos:start="293:9" pos:end="293:17">return <expr pos:start="293:16" pos:end="293:16"><literal type="number" pos:start="293:16" pos:end="293:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <return pos:start="297:5" pos:end="297:13">return <expr pos:start="297:12" pos:end="297:12"><literal type="number" pos:start="297:12" pos:end="297:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
