<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9187.c" pos:tabs="8"><function pos:start="1:1" pos:end="113:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">compare_refcounts</name><parameter_list pos:start="1:30" pos:end="5:76">(<parameter pos:start="1:31" pos:end="1:50"><decl pos:start="1:31" pos:end="1:50"><type pos:start="1:31" pos:end="1:50"><name pos:start="1:31" pos:end="1:46">BlockDriverState</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:50">bs</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:72"><decl pos:start="1:53" pos:end="1:72"><type pos:start="1:53" pos:end="1:72"><name pos:start="1:53" pos:end="1:67">BdrvCheckResult</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:72">res</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:47"><decl pos:start="3:31" pos:end="3:47"><type pos:start="3:31" pos:end="3:47"><name pos:start="3:31" pos:end="3:43">BdrvCheckMode</name></type> <name pos:start="3:45" pos:end="3:47">fix</name></decl></parameter>, <parameter pos:start="3:50" pos:end="3:73"><decl pos:start="3:50" pos:end="3:73"><type pos:start="3:50" pos:end="3:73"><name pos:start="3:50" pos:end="3:56">int64_t</name> <modifier pos:start="3:58" pos:end="3:58">*</modifier></type><name pos:start="3:59" pos:end="3:73">highest_cluster</name></decl></parameter>,

                              <parameter pos:start="5:31" pos:end="5:54"><decl pos:start="5:31" pos:end="5:54"><type pos:start="5:31" pos:end="5:54"><name pos:start="5:31" pos:end="5:38">uint16_t</name> <modifier pos:start="5:40" pos:end="5:40">*</modifier></type><name pos:start="5:41" pos:end="5:54">refcount_table</name></decl></parameter>, <parameter pos:start="5:57" pos:end="5:75"><decl pos:start="5:57" pos:end="5:75"><type pos:start="5:57" pos:end="5:75"><name pos:start="5:57" pos:end="5:63">int64_t</name></type> <name pos:start="5:65" pos:end="5:75">nb_clusters</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="113:1">{<block_content pos:start="9:5" pos:end="111:5">

    <decl_stmt pos:start="9:5" pos:end="9:34"><decl pos:start="9:5" pos:end="9:33"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">BDRVQcowState</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:20">s</name> <init pos:start="9:22" pos:end="9:33">= <expr pos:start="9:24" pos:end="9:33"><name pos:start="9:24" pos:end="9:33"><name pos:start="9:24" pos:end="9:25">bs</name><operator pos:start="9:26" pos:end="9:27">-&gt;</operator><name pos:start="9:28" pos:end="9:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:14"><decl pos:start="11:5" pos:end="11:13"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">int64_t</name></type> <name pos:start="11:13" pos:end="11:13">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:34"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:17">refcount1</name></decl>, <decl pos:start="13:20" pos:end="13:28"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:20" pos:end="13:28">refcount2</name></decl>, <decl pos:start="13:31" pos:end="13:33"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:31" pos:end="13:33">ret</name></decl>;</decl_stmt>



    <for pos:start="17:5" pos:end="111:5">for <control pos:start="17:9" pos:end="17:59">(<init pos:start="17:10" pos:end="17:37"><expr pos:start="17:10" pos:end="17:14"><name pos:start="17:10" pos:end="17:10">i</name> <operator pos:start="17:12" pos:end="17:12">=</operator> <literal type="number" pos:start="17:14" pos:end="17:14">0</literal></expr><operator pos:start="17:15" pos:end="17:15">,</operator> <expr pos:start="17:17" pos:end="17:36"><operator pos:start="17:17" pos:end="17:17">*</operator><name pos:start="17:18" pos:end="17:32">highest_cluster</name> <operator pos:start="17:34" pos:end="17:34">=</operator> <literal type="number" pos:start="17:36" pos:end="17:36">0</literal></expr>;</init> <condition pos:start="17:39" pos:end="17:54"><expr pos:start="17:39" pos:end="17:53"><name pos:start="17:39" pos:end="17:39">i</name> <operator pos:start="17:41" pos:end="17:41">&lt;</operator> <name pos:start="17:43" pos:end="17:53">nb_clusters</name></expr>;</condition> <incr pos:start="17:56" pos:end="17:58"><expr pos:start="17:56" pos:end="17:58"><name pos:start="17:56" pos:end="17:56">i</name><operator pos:start="17:57" pos:end="17:58">++</operator></expr></incr>)</control> <block pos:start="17:61" pos:end="111:5">{<block_content pos:start="19:9" pos:end="109:9">

        <expr_stmt pos:start="19:9" pos:end="19:40"><expr pos:start="19:9" pos:end="19:39"><name pos:start="19:9" pos:end="19:17">refcount1</name> <operator pos:start="19:19" pos:end="19:19">=</operator> <call pos:start="19:21" pos:end="19:39"><name pos:start="19:21" pos:end="19:32">get_refcount</name><argument_list pos:start="19:33" pos:end="19:39">(<argument pos:start="19:34" pos:end="19:35"><expr pos:start="19:34" pos:end="19:35"><name pos:start="19:34" pos:end="19:35">bs</name></expr></argument>, <argument pos:start="19:38" pos:end="19:38"><expr pos:start="19:38" pos:end="19:38"><name pos:start="19:38" pos:end="19:38">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="21:9" pos:end="31:9"><if pos:start="21:9" pos:end="31:9">if <condition pos:start="21:12" pos:end="21:26">(<expr pos:start="21:13" pos:end="21:25"><name pos:start="21:13" pos:end="21:21">refcount1</name> <operator pos:start="21:23" pos:end="21:23">&lt;</operator> <literal type="number" pos:start="21:25" pos:end="21:25">0</literal></expr>)</condition> <block pos:start="21:28" pos:end="31:9">{<block_content pos:start="23:13" pos:end="29:21">

            <expr_stmt pos:start="23:13" pos:end="25:41"><expr pos:start="23:13" pos:end="25:40"><call pos:start="23:13" pos:end="25:40"><name pos:start="23:13" pos:end="23:19">fprintf</name><argument_list pos:start="23:20" pos:end="25:40">(<argument pos:start="23:21" pos:end="23:26"><expr pos:start="23:21" pos:end="23:26"><name pos:start="23:21" pos:end="23:26">stderr</name></expr></argument>, <argument pos:start="23:29" pos:end="23:78"><expr pos:start="23:29" pos:end="23:78"><literal type="string" pos:start="23:29" pos:end="23:62">"Can't get refcount for cluster %"</literal> <name pos:start="23:64" pos:end="23:69">PRId64</name> <literal type="string" pos:start="23:71" pos:end="23:78">": %s\n"</literal></expr></argument>,

                <argument pos:start="25:17" pos:end="25:17"><expr pos:start="25:17" pos:end="25:17"><name pos:start="25:17" pos:end="25:17">i</name></expr></argument>, <argument pos:start="25:20" pos:end="25:39"><expr pos:start="25:20" pos:end="25:39"><call pos:start="25:20" pos:end="25:39"><name pos:start="25:20" pos:end="25:27">strerror</name><argument_list pos:start="25:28" pos:end="25:39">(<argument pos:start="25:29" pos:end="25:38"><expr pos:start="25:29" pos:end="25:38"><operator pos:start="25:29" pos:end="25:29">-</operator><name pos:start="25:30" pos:end="25:38">refcount1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="27:13" pos:end="27:32"><expr pos:start="27:13" pos:end="27:31"><name pos:start="27:13" pos:end="27:29"><name pos:start="27:13" pos:end="27:15">res</name><operator pos:start="27:16" pos:end="27:17">-&gt;</operator><name pos:start="27:18" pos:end="27:29">check_errors</name></name><operator pos:start="27:30" pos:end="27:31">++</operator></expr>;</expr_stmt>

            <continue pos:start="29:13" pos:end="29:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="35:9" pos:end="35:38"><expr pos:start="35:9" pos:end="35:37"><name pos:start="35:9" pos:end="35:17">refcount2</name> <operator pos:start="35:19" pos:end="35:19">=</operator> <name pos:start="35:21" pos:end="35:37"><name pos:start="35:21" pos:end="35:34">refcount_table</name><index pos:start="35:35" pos:end="35:37">[<expr pos:start="35:36" pos:end="35:36"><name pos:start="35:36" pos:end="35:36">i</name></expr>]</index></name></expr>;</expr_stmt>



        <if_stmt pos:start="39:9" pos:end="43:9"><if pos:start="39:9" pos:end="43:9">if <condition pos:start="39:12" pos:end="39:43">(<expr pos:start="39:13" pos:end="39:42"><name pos:start="39:13" pos:end="39:21">refcount1</name> <operator pos:start="39:23" pos:end="39:23">&gt;</operator> <literal type="number" pos:start="39:25" pos:end="39:25">0</literal> <operator pos:start="39:27" pos:end="39:28">||</operator> <name pos:start="39:30" pos:end="39:38">refcount2</name> <operator pos:start="39:40" pos:end="39:40">&gt;</operator> <literal type="number" pos:start="39:42" pos:end="39:42">0</literal></expr>)</condition> <block pos:start="39:45" pos:end="43:9">{<block_content pos:start="41:13" pos:end="41:33">

            <expr_stmt pos:start="41:13" pos:end="41:33"><expr pos:start="41:13" pos:end="41:32"><operator pos:start="41:13" pos:end="41:13">*</operator><name pos:start="41:14" pos:end="41:28">highest_cluster</name> <operator pos:start="41:30" pos:end="41:30">=</operator> <name pos:start="41:32" pos:end="41:32">i</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="47:9" pos:end="109:9"><if pos:start="47:9" pos:end="109:9">if <condition pos:start="47:12" pos:end="47:35">(<expr pos:start="47:13" pos:end="47:34"><name pos:start="47:13" pos:end="47:21">refcount1</name> <operator pos:start="47:23" pos:end="47:24">!=</operator> <name pos:start="47:26" pos:end="47:34">refcount2</name></expr>)</condition> <block pos:start="47:37" pos:end="109:9">{<block_content pos:start="51:13" pos:end="107:13">

            <comment type="block" pos:start="49:13" pos:end="49:60">/* Check if we're allowed to fix the mismatch */</comment>

            <decl_stmt pos:start="51:13" pos:end="51:34"><decl pos:start="51:13" pos:end="51:33"><type pos:start="51:13" pos:end="51:17"><name pos:start="51:13" pos:end="51:15">int</name> <modifier pos:start="51:17" pos:end="51:17">*</modifier></type><name pos:start="51:18" pos:end="51:26">num_fixed</name> <init pos:start="51:28" pos:end="51:33">= <expr pos:start="51:30" pos:end="51:33"><name pos:start="51:30" pos:end="51:33">NULL</name></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="53:13" pos:end="61:13"><if pos:start="53:13" pos:end="57:13">if <condition pos:start="53:16" pos:end="53:64">(<expr pos:start="53:17" pos:end="53:63"><name pos:start="53:17" pos:end="53:25">refcount1</name> <operator pos:start="53:27" pos:end="53:27">&gt;</operator> <name pos:start="53:29" pos:end="53:37">refcount2</name> <operator pos:start="53:39" pos:end="53:40">&amp;&amp;</operator> <operator pos:start="53:42" pos:end="53:42">(</operator><name pos:start="53:43" pos:end="53:45">fix</name> <operator pos:start="53:47" pos:end="53:47">&amp;</operator> <name pos:start="53:49" pos:end="53:62">BDRV_FIX_LEAKS</name><operator pos:start="53:63" pos:end="53:63">)</operator></expr>)</condition> <block pos:start="53:66" pos:end="57:13">{<block_content pos:start="55:17" pos:end="55:46">

                <expr_stmt pos:start="55:17" pos:end="55:46"><expr pos:start="55:17" pos:end="55:45"><name pos:start="55:17" pos:end="55:25">num_fixed</name> <operator pos:start="55:27" pos:end="55:27">=</operator> <operator pos:start="55:29" pos:end="55:29">&amp;</operator><name pos:start="55:30" pos:end="55:45"><name pos:start="55:30" pos:end="55:32">res</name><operator pos:start="55:33" pos:end="55:34">-&gt;</operator><name pos:start="55:35" pos:end="55:45">leaks_fixed</name></name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="57:15" pos:end="61:13">else if <condition pos:start="57:23" pos:end="57:72">(<expr pos:start="57:24" pos:end="57:71"><name pos:start="57:24" pos:end="57:32">refcount1</name> <operator pos:start="57:34" pos:end="57:34">&lt;</operator> <name pos:start="57:36" pos:end="57:44">refcount2</name> <operator pos:start="57:46" pos:end="57:47">&amp;&amp;</operator> <operator pos:start="57:49" pos:end="57:49">(</operator><name pos:start="57:50" pos:end="57:52">fix</name> <operator pos:start="57:54" pos:end="57:54">&amp;</operator> <name pos:start="57:56" pos:end="57:70">BDRV_FIX_ERRORS</name><operator pos:start="57:71" pos:end="57:71">)</operator></expr>)</condition> <block pos:start="57:74" pos:end="61:13">{<block_content pos:start="59:17" pos:end="59:52">

                <expr_stmt pos:start="59:17" pos:end="59:52"><expr pos:start="59:17" pos:end="59:51"><name pos:start="59:17" pos:end="59:25">num_fixed</name> <operator pos:start="59:27" pos:end="59:27">=</operator> <operator pos:start="59:29" pos:end="59:29">&amp;</operator><name pos:start="59:30" pos:end="59:51"><name pos:start="59:30" pos:end="59:32">res</name><operator pos:start="59:33" pos:end="59:34">-&gt;</operator><name pos:start="59:35" pos:end="59:51">corruptions_fixed</name></name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="65:13" pos:end="73:44"><expr pos:start="65:13" pos:end="73:43"><call pos:start="65:13" pos:end="73:43"><name pos:start="65:13" pos:end="65:19">fprintf</name><argument_list pos:start="65:20" pos:end="73:43">(<argument pos:start="65:21" pos:end="65:26"><expr pos:start="65:21" pos:end="65:26"><name pos:start="65:21" pos:end="65:26">stderr</name></expr></argument>, <argument pos:start="65:29" pos:end="65:79"><expr pos:start="65:29" pos:end="65:79"><literal type="string" pos:start="65:29" pos:end="65:42">"%s cluster %"</literal> <name pos:start="65:44" pos:end="65:49">PRId64</name> <literal type="string" pos:start="65:51" pos:end="65:79">" refcount=%d reference=%d\n"</literal></expr></argument>,

                   <argument pos:start="67:20" pos:end="71:51"><expr pos:start="67:20" pos:end="71:51"><ternary pos:start="67:20" pos:end="71:51"><condition pos:start="67:20" pos:end="67:42"><expr pos:start="67:20" pos:end="67:36"><name pos:start="67:20" pos:end="67:28">num_fixed</name> <operator pos:start="67:30" pos:end="67:31">!=</operator> <name pos:start="67:33" pos:end="67:36">NULL</name></expr>     ?</condition><then pos:start="67:44" pos:end="67:54"> <expr pos:start="67:44" pos:end="67:54"><literal type="string" pos:start="67:44" pos:end="67:54">"Repairing"</literal></expr> </then><else pos:start="67:56" pos:end="71:51">:

                   <expr pos:start="69:20" pos:end="71:51"><ternary pos:start="69:20" pos:end="71:51"><condition pos:start="69:20" pos:end="69:42"><expr pos:start="69:20" pos:end="69:40"><name pos:start="69:20" pos:end="69:28">refcount1</name> <operator pos:start="69:30" pos:end="69:30">&lt;</operator> <name pos:start="69:32" pos:end="69:40">refcount2</name></expr> ?</condition><then pos:start="69:44" pos:end="69:50"> <expr pos:start="69:44" pos:end="69:50"><literal type="string" pos:start="69:44" pos:end="69:50">"ERROR"</literal></expr> </then><else pos:start="69:52" pos:end="71:51">:

                                           <expr pos:start="71:44" pos:end="71:51"><literal type="string" pos:start="71:44" pos:end="71:51">"Leaked"</literal></expr></else></ternary></expr></else></ternary></expr></argument>,

                   <argument pos:start="73:20" pos:end="73:20"><expr pos:start="73:20" pos:end="73:20"><name pos:start="73:20" pos:end="73:20">i</name></expr></argument>, <argument pos:start="73:23" pos:end="73:31"><expr pos:start="73:23" pos:end="73:31"><name pos:start="73:23" pos:end="73:31">refcount1</name></expr></argument>, <argument pos:start="73:34" pos:end="73:42"><expr pos:start="73:34" pos:end="73:42"><name pos:start="73:34" pos:end="73:42">refcount2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="77:13" pos:end="93:13"><if pos:start="77:13" pos:end="93:13">if <condition pos:start="77:16" pos:end="77:26">(<expr pos:start="77:17" pos:end="77:25"><name pos:start="77:17" pos:end="77:25">num_fixed</name></expr>)</condition> <block pos:start="77:28" pos:end="93:13">{<block_content pos:start="79:17" pos:end="91:17">

                <expr_stmt pos:start="79:17" pos:end="83:60"><expr pos:start="79:17" pos:end="83:59"><name pos:start="79:17" pos:end="79:19">ret</name> <operator pos:start="79:21" pos:end="79:21">=</operator> <call pos:start="79:23" pos:end="83:59"><name pos:start="79:23" pos:end="79:37">update_refcount</name><argument_list pos:start="79:38" pos:end="83:59">(<argument pos:start="79:39" pos:end="79:40"><expr pos:start="79:39" pos:end="79:40"><name pos:start="79:39" pos:end="79:40">bs</name></expr></argument>, <argument pos:start="79:43" pos:end="79:62"><expr pos:start="79:43" pos:end="79:62"><name pos:start="79:43" pos:end="79:43">i</name> <operator pos:start="79:45" pos:end="79:46">&lt;&lt;</operator> <name pos:start="79:48" pos:end="79:62"><name pos:start="79:48" pos:end="79:48">s</name><operator pos:start="79:49" pos:end="79:50">-&gt;</operator><name pos:start="79:51" pos:end="79:62">cluster_bits</name></name></expr></argument>, <argument pos:start="79:65" pos:end="79:65"><expr pos:start="79:65" pos:end="79:65"><literal type="number" pos:start="79:65" pos:end="79:65">1</literal></expr></argument>,

                                      <argument pos:start="81:39" pos:end="81:59"><expr pos:start="81:39" pos:end="81:59"><name pos:start="81:39" pos:end="81:47">refcount2</name> <operator pos:start="81:49" pos:end="81:49">-</operator> <name pos:start="81:51" pos:end="81:59">refcount1</name></expr></argument>,

                                      <argument pos:start="83:39" pos:end="83:58"><expr pos:start="83:39" pos:end="83:58"><name pos:start="83:39" pos:end="83:58">QCOW2_DISCARD_ALWAYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="85:17" pos:end="91:17"><if pos:start="85:17" pos:end="91:17">if <condition pos:start="85:20" pos:end="85:29">(<expr pos:start="85:21" pos:end="85:28"><name pos:start="85:21" pos:end="85:23">ret</name> <operator pos:start="85:25" pos:end="85:26">&gt;=</operator> <literal type="number" pos:start="85:28" pos:end="85:28">0</literal></expr>)</condition> <block pos:start="85:31" pos:end="91:17">{<block_content pos:start="87:21" pos:end="89:29">

                    <expr_stmt pos:start="87:21" pos:end="87:35"><expr pos:start="87:21" pos:end="87:34"><operator pos:start="87:21" pos:end="87:21">(</operator><operator pos:start="87:22" pos:end="87:22">*</operator><name pos:start="87:23" pos:end="87:31">num_fixed</name><operator pos:start="87:32" pos:end="87:32">)</operator><operator pos:start="87:33" pos:end="87:34">++</operator></expr>;</expr_stmt>

                    <continue pos:start="89:21" pos:end="89:29">continue;</continue>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="97:13" pos:end="97:52">/* And if we couldn't, print an error */</comment>

            <if_stmt pos:start="99:13" pos:end="107:13"><if pos:start="99:13" pos:end="103:13">if <condition pos:start="99:16" pos:end="99:38">(<expr pos:start="99:17" pos:end="99:37"><name pos:start="99:17" pos:end="99:25">refcount1</name> <operator pos:start="99:27" pos:end="99:27">&lt;</operator> <name pos:start="99:29" pos:end="99:37">refcount2</name></expr>)</condition> <block pos:start="99:40" pos:end="103:13">{<block_content pos:start="101:17" pos:end="101:35">

                <expr_stmt pos:start="101:17" pos:end="101:35"><expr pos:start="101:17" pos:end="101:34"><name pos:start="101:17" pos:end="101:32"><name pos:start="101:17" pos:end="101:19">res</name><operator pos:start="101:20" pos:end="101:21">-&gt;</operator><name pos:start="101:22" pos:end="101:32">corruptions</name></name><operator pos:start="101:33" pos:end="101:34">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="103:15" pos:end="107:13">else <block pos:start="103:20" pos:end="107:13">{<block_content pos:start="105:17" pos:end="105:29">

                <expr_stmt pos:start="105:17" pos:end="105:29"><expr pos:start="105:17" pos:end="105:28"><name pos:start="105:17" pos:end="105:26"><name pos:start="105:17" pos:end="105:19">res</name><operator pos:start="105:20" pos:end="105:21">-&gt;</operator><name pos:start="105:22" pos:end="105:26">leaks</name></name><operator pos:start="105:27" pos:end="105:28">++</operator></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
