<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2344.c" pos:tabs="8"><function pos:start="1:1" pos:end="105:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">opt_preset</name><parameter_list pos:start="1:22" pos:end="1:55">(<parameter pos:start="1:23" pos:end="1:37"><decl pos:start="1:23" pos:end="1:37"><type pos:start="1:23" pos:end="1:37"><specifier pos:start="1:23" pos:end="1:27">const</specifier> <name pos:start="1:29" pos:end="1:32">char</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:37">opt</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:54"><decl pos:start="1:40" pos:end="1:54"><type pos:start="1:40" pos:end="1:54"><specifier pos:start="1:40" pos:end="1:44">const</specifier> <name pos:start="1:46" pos:end="1:49">char</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:54">arg</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="105:1">{<block_content pos:start="5:5" pos:end="103:13">

    <decl_stmt pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:8">FILE</name> <modifier pos:start="5:10" pos:end="5:10">*</modifier></type><name pos:start="5:11" pos:end="5:11">f</name><init pos:start="5:12" pos:end="5:16">=<expr pos:start="5:13" pos:end="5:16"><name pos:start="5:13" pos:end="5:16">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:43"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">char</name></type> <name pos:start="7:10" pos:end="7:18"><name pos:start="7:10" pos:end="7:12">tmp</name><index pos:start="7:13" pos:end="7:18">[<expr pos:start="7:14" pos:end="7:17"><literal type="number" pos:start="7:14" pos:end="7:17">1000</literal></expr>]</index></name></decl>, <decl pos:start="7:21" pos:end="7:30"><type ref="prev" pos:start="7:5" pos:end="7:8"/><name pos:start="7:21" pos:end="7:30"><name pos:start="7:21" pos:end="7:24">tmp2</name><index pos:start="7:25" pos:end="7:30">[<expr pos:start="7:26" pos:end="7:29"><literal type="number" pos:start="7:26" pos:end="7:29">1000</literal></expr>]</index></name></decl>, <decl pos:start="7:33" pos:end="7:42"><type ref="prev" pos:start="7:5" pos:end="7:8"/><name pos:start="7:33" pos:end="7:42"><name pos:start="7:33" pos:end="7:36">line</name><index pos:start="7:37" pos:end="7:42">[<expr pos:start="7:38" pos:end="7:41"><literal type="number" pos:start="7:38" pos:end="7:41">1000</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="17:27"><decl pos:start="11:5" pos:end="17:26"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:23"><name pos:start="11:17" pos:end="11:20">base</name><index pos:start="11:21" pos:end="11:23">[<expr pos:start="11:22" pos:end="11:22"><literal type="number" pos:start="11:22" pos:end="11:22">3</literal></expr>]</index></name><init pos:start="11:24" pos:end="17:26">= <expr pos:start="11:26" pos:end="17:26"><block pos:start="11:26" pos:end="17:26">{ <expr pos:start="11:28" pos:end="11:41"><call pos:start="11:28" pos:end="11:41"><name pos:start="11:28" pos:end="11:33">getenv</name><argument_list pos:start="11:34" pos:end="11:41">(<argument pos:start="11:35" pos:end="11:40"><expr pos:start="11:35" pos:end="11:40"><literal type="string" pos:start="11:35" pos:end="11:40">"HOME"</literal></expr></argument>)</argument_list></call></expr>,

                           <expr pos:start="13:28" pos:end="13:45"><literal type="string" pos:start="13:28" pos:end="13:45">"/usr/local/share"</literal></expr>,

                           <expr pos:start="15:28" pos:end="15:39"><literal type="string" pos:start="15:28" pos:end="15:39">"/usr/share"</literal></expr>,

                         }</block></expr></init></decl>;</decl_stmt>



    <for pos:start="21:5" pos:end="41:5">for<control pos:start="21:8" pos:end="21:35">(<init pos:start="21:9" pos:end="21:19"><expr pos:start="21:9" pos:end="21:18"><name pos:start="21:9" pos:end="21:9">i</name><operator pos:start="21:10" pos:end="21:10">=</operator><operator pos:start="21:11" pos:end="21:11">!</operator><name pos:start="21:12" pos:end="21:18"><name pos:start="21:12" pos:end="21:15">base</name><index pos:start="21:16" pos:end="21:18">[<expr pos:start="21:17" pos:end="21:17"><literal type="number" pos:start="21:17" pos:end="21:17">0</literal></expr>]</index></name></expr>;</init> <condition pos:start="21:21" pos:end="21:30"><expr pos:start="21:21" pos:end="21:29"><name pos:start="21:21" pos:end="21:21">i</name><operator pos:start="21:22" pos:end="21:22">&lt;</operator><literal type="number" pos:start="21:23" pos:end="21:23">3</literal> <operator pos:start="21:25" pos:end="21:26">&amp;&amp;</operator> <operator pos:start="21:28" pos:end="21:28">!</operator><name pos:start="21:29" pos:end="21:29">f</name></expr>;</condition> <incr pos:start="21:32" pos:end="21:34"><expr pos:start="21:32" pos:end="21:34"><name pos:start="21:32" pos:end="21:32">i</name><operator pos:start="21:33" pos:end="21:34">++</operator></expr></incr>)</control><block pos:start="21:36" pos:end="41:5">{<block_content pos:start="23:9" pos:end="39:9">

        <expr_stmt pos:start="23:9" pos:end="23:90"><expr pos:start="23:9" pos:end="23:89"><call pos:start="23:9" pos:end="23:89"><name pos:start="23:9" pos:end="23:16">snprintf</name><argument_list pos:start="23:17" pos:end="23:89">(<argument pos:start="23:18" pos:end="23:20"><expr pos:start="23:18" pos:end="23:20"><name pos:start="23:18" pos:end="23:20">tmp</name></expr></argument>, <argument pos:start="23:23" pos:end="23:33"><expr pos:start="23:23" pos:end="23:33"><sizeof pos:start="23:23" pos:end="23:33">sizeof<argument_list pos:start="23:29" pos:end="23:33">(<argument pos:start="23:30" pos:end="23:32"><expr pos:start="23:30" pos:end="23:32"><name pos:start="23:30" pos:end="23:32">tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="23:36" pos:end="23:60"><expr pos:start="23:36" pos:end="23:60"><literal type="string" pos:start="23:36" pos:end="23:60">"%s/%sffmpeg/%s.ffpreset"</literal></expr></argument>, <argument pos:start="23:63" pos:end="23:69"><expr pos:start="23:63" pos:end="23:69"><name pos:start="23:63" pos:end="23:69"><name pos:start="23:63" pos:end="23:66">base</name><index pos:start="23:67" pos:end="23:69">[<expr pos:start="23:68" pos:end="23:68"><name pos:start="23:68" pos:end="23:68">i</name></expr>]</index></name></expr></argument>, <argument pos:start="23:72" pos:end="23:83"><expr pos:start="23:72" pos:end="23:83"><ternary pos:start="23:72" pos:end="23:83"><condition pos:start="23:72" pos:end="23:74"><expr pos:start="23:72" pos:end="23:72"><name pos:start="23:72" pos:end="23:72">i</name></expr> ?</condition><then pos:start="23:76" pos:end="23:77"> <expr pos:start="23:76" pos:end="23:77"><literal type="string" pos:start="23:76" pos:end="23:77">""</literal></expr> </then><else pos:start="23:79" pos:end="23:83">: <expr pos:start="23:81" pos:end="23:83"><literal type="string" pos:start="23:81" pos:end="23:83">"."</literal></expr></else></ternary></expr></argument>, <argument pos:start="23:86" pos:end="23:88"><expr pos:start="23:86" pos:end="23:88"><name pos:start="23:86" pos:end="23:88">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:27"><expr pos:start="25:9" pos:end="25:26"><name pos:start="25:9" pos:end="25:9">f</name><operator pos:start="25:10" pos:end="25:10">=</operator> <call pos:start="25:12" pos:end="25:26"><name pos:start="25:12" pos:end="25:16">fopen</name><argument_list pos:start="25:17" pos:end="25:26">(<argument pos:start="25:18" pos:end="25:20"><expr pos:start="25:18" pos:end="25:20"><name pos:start="25:18" pos:end="25:20">tmp</name></expr></argument>, <argument pos:start="25:23" pos:end="25:25"><expr pos:start="25:23" pos:end="25:25"><literal type="string" pos:start="25:23" pos:end="25:25">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="27:9" pos:end="39:9"><if pos:start="27:9" pos:end="39:9">if<condition pos:start="27:11" pos:end="27:14">(<expr pos:start="27:12" pos:end="27:13"><operator pos:start="27:12" pos:end="27:12">!</operator><name pos:start="27:13" pos:end="27:13">f</name></expr>)</condition><block pos:start="27:15" pos:end="39:9">{<block_content pos:start="29:13" pos:end="37:31">

            <decl_stmt pos:start="29:13" pos:end="33:64"><decl pos:start="29:13" pos:end="33:63"><type pos:start="29:13" pos:end="29:18"><name pos:start="29:13" pos:end="29:16">char</name> <modifier pos:start="29:18" pos:end="29:18">*</modifier></type><name pos:start="29:19" pos:end="29:28">codec_name</name><init pos:start="29:29" pos:end="33:63">= <expr pos:start="29:31" pos:end="33:63"><ternary pos:start="29:31" pos:end="33:63"><condition pos:start="29:31" pos:end="29:43"><expr pos:start="29:31" pos:end="29:41"><operator pos:start="29:31" pos:end="29:31">*</operator><name pos:start="29:32" pos:end="29:34">opt</name> <operator pos:start="29:36" pos:end="29:37">==</operator> <literal type="char" pos:start="29:39" pos:end="29:41">'v'</literal></expr> ?</condition><then pos:start="29:45" pos:end="29:60"> <expr pos:start="29:45" pos:end="29:60"><name pos:start="29:45" pos:end="29:60">video_codec_name</name></expr> </then><else pos:start="29:62" pos:end="33:63">:

                              <expr pos:start="31:31" pos:end="33:63"><ternary pos:start="31:31" pos:end="33:63"><condition pos:start="31:31" pos:end="31:43"><expr pos:start="31:31" pos:end="31:41"><operator pos:start="31:31" pos:end="31:31">*</operator><name pos:start="31:32" pos:end="31:34">opt</name> <operator pos:start="31:36" pos:end="31:37">==</operator> <literal type="char" pos:start="31:39" pos:end="31:41">'a'</literal></expr> ?</condition><then pos:start="31:45" pos:end="31:60"> <expr pos:start="31:45" pos:end="31:60"><name pos:start="31:45" pos:end="31:60">audio_codec_name</name></expr> </then><else pos:start="31:62" pos:end="33:63">:

                                            <expr pos:start="33:45" pos:end="33:63"><name pos:start="33:45" pos:end="33:63">subtitle_codec_name</name></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>

              <expr_stmt pos:start="35:15" pos:end="35:112"><expr pos:start="35:15" pos:end="35:111"><call pos:start="35:15" pos:end="35:111"><name pos:start="35:15" pos:end="35:22">snprintf</name><argument_list pos:start="35:23" pos:end="35:111">(<argument pos:start="35:24" pos:end="35:26"><expr pos:start="35:24" pos:end="35:26"><name pos:start="35:24" pos:end="35:26">tmp</name></expr></argument>, <argument pos:start="35:29" pos:end="35:39"><expr pos:start="35:29" pos:end="35:39"><sizeof pos:start="35:29" pos:end="35:39">sizeof<argument_list pos:start="35:35" pos:end="35:39">(<argument pos:start="35:36" pos:end="35:38"><expr pos:start="35:36" pos:end="35:38"><name pos:start="35:36" pos:end="35:38">tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="35:42" pos:end="35:69"><expr pos:start="35:42" pos:end="35:69"><literal type="string" pos:start="35:42" pos:end="35:69">"%s/%sffmpeg/%s-%s.ffpreset"</literal></expr></argument>, <argument pos:start="35:72" pos:end="35:78"><expr pos:start="35:72" pos:end="35:78"><name pos:start="35:72" pos:end="35:78"><name pos:start="35:72" pos:end="35:75">base</name><index pos:start="35:76" pos:end="35:78">[<expr pos:start="35:77" pos:end="35:77"><name pos:start="35:77" pos:end="35:77">i</name></expr>]</index></name></expr></argument>,  <argument pos:start="35:82" pos:end="35:93"><expr pos:start="35:82" pos:end="35:93"><ternary pos:start="35:82" pos:end="35:93"><condition pos:start="35:82" pos:end="35:84"><expr pos:start="35:82" pos:end="35:82"><name pos:start="35:82" pos:end="35:82">i</name></expr> ?</condition><then pos:start="35:86" pos:end="35:87"> <expr pos:start="35:86" pos:end="35:87"><literal type="string" pos:start="35:86" pos:end="35:87">""</literal></expr> </then><else pos:start="35:89" pos:end="35:93">: <expr pos:start="35:91" pos:end="35:93"><literal type="string" pos:start="35:91" pos:end="35:93">"."</literal></expr></else></ternary></expr></argument>, <argument pos:start="35:96" pos:end="35:105"><expr pos:start="35:96" pos:end="35:105"><name pos:start="35:96" pos:end="35:105">codec_name</name></expr></argument>, <argument pos:start="35:108" pos:end="35:110"><expr pos:start="35:108" pos:end="35:110"><name pos:start="35:108" pos:end="35:110">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:31"><expr pos:start="37:13" pos:end="37:30"><name pos:start="37:13" pos:end="37:13">f</name><operator pos:start="37:14" pos:end="37:14">=</operator> <call pos:start="37:16" pos:end="37:30"><name pos:start="37:16" pos:end="37:20">fopen</name><argument_list pos:start="37:21" pos:end="37:30">(<argument pos:start="37:22" pos:end="37:24"><expr pos:start="37:22" pos:end="37:24"><name pos:start="37:22" pos:end="37:24">tmp</name></expr></argument>, <argument pos:start="37:27" pos:end="37:29"><expr pos:start="37:27" pos:end="37:29"><literal type="string" pos:start="37:27" pos:end="37:29">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <if_stmt pos:start="43:5" pos:end="47:5"><if pos:start="43:5" pos:end="47:5">if<condition pos:start="43:7" pos:end="43:59">(<expr pos:start="43:8" pos:end="43:58"><operator pos:start="43:8" pos:end="43:8">!</operator><name pos:start="43:9" pos:end="43:9">f</name> <operator pos:start="43:11" pos:end="43:12">&amp;&amp;</operator> <operator pos:start="43:14" pos:end="43:14">(</operator><operator pos:start="43:15" pos:end="43:15">(</operator><name pos:start="43:16" pos:end="43:21"><name pos:start="43:16" pos:end="43:18">arg</name><index pos:start="43:19" pos:end="43:21">[<expr pos:start="43:20" pos:end="43:20"><literal type="number" pos:start="43:20" pos:end="43:20">0</literal></expr>]</index></name><operator pos:start="43:22" pos:end="43:23">==</operator><literal type="char" pos:start="43:24" pos:end="43:26">'.'</literal> <operator pos:start="43:28" pos:end="43:29">&amp;&amp;</operator> <name pos:start="43:31" pos:end="43:36"><name pos:start="43:31" pos:end="43:33">arg</name><index pos:start="43:34" pos:end="43:36">[<expr pos:start="43:35" pos:end="43:35"><literal type="number" pos:start="43:35" pos:end="43:35">1</literal></expr>]</index></name><operator pos:start="43:37" pos:end="43:38">==</operator><literal type="char" pos:start="43:39" pos:end="43:41">'/'</literal><operator pos:start="43:42" pos:end="43:42">)</operator> <operator pos:start="43:44" pos:end="43:45">||</operator> <name pos:start="43:47" pos:end="43:52"><name pos:start="43:47" pos:end="43:49">arg</name><index pos:start="43:50" pos:end="43:52">[<expr pos:start="43:51" pos:end="43:51"><literal type="number" pos:start="43:51" pos:end="43:51">0</literal></expr>]</index></name><operator pos:start="43:53" pos:end="43:54">==</operator><literal type="char" pos:start="43:55" pos:end="43:57">'/'</literal><operator pos:start="43:58" pos:end="43:58">)</operator></expr>)</condition><block pos:start="43:60" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:27">

        <expr_stmt pos:start="45:9" pos:end="45:27"><expr pos:start="45:9" pos:end="45:26"><name pos:start="45:9" pos:end="45:9">f</name><operator pos:start="45:10" pos:end="45:10">=</operator> <call pos:start="45:12" pos:end="45:26"><name pos:start="45:12" pos:end="45:16">fopen</name><argument_list pos:start="45:17" pos:end="45:26">(<argument pos:start="45:18" pos:end="45:20"><expr pos:start="45:18" pos:end="45:20"><name pos:start="45:18" pos:end="45:20">arg</name></expr></argument>, <argument pos:start="45:23" pos:end="45:25"><expr pos:start="45:23" pos:end="45:25"><literal type="string" pos:start="45:23" pos:end="45:25">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="51:5" pos:end="57:5"><if pos:start="51:5" pos:end="57:5">if<condition pos:start="51:7" pos:end="51:10">(<expr pos:start="51:8" pos:end="51:9"><operator pos:start="51:8" pos:end="51:8">!</operator><name pos:start="51:9" pos:end="51:9">f</name></expr>)</condition><block pos:start="51:11" pos:end="57:5">{<block_content pos:start="53:9" pos:end="55:19">

        <expr_stmt pos:start="53:9" pos:end="53:51"><expr pos:start="53:9" pos:end="53:50"><call pos:start="53:9" pos:end="53:50"><name pos:start="53:9" pos:end="53:15">fprintf</name><argument_list pos:start="53:16" pos:end="53:50">(<argument pos:start="53:17" pos:end="53:22"><expr pos:start="53:17" pos:end="53:22"><name pos:start="53:17" pos:end="53:22">stderr</name></expr></argument>, <argument pos:start="53:25" pos:end="53:49"><expr pos:start="53:25" pos:end="53:49"><literal type="string" pos:start="53:25" pos:end="53:49">"Preset file not found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:19"><expr pos:start="55:9" pos:end="55:18"><call pos:start="55:9" pos:end="55:18"><name pos:start="55:9" pos:end="55:15">av_exit</name><argument_list pos:start="55:16" pos:end="55:18">(<argument pos:start="55:17" pos:end="55:17"><expr pos:start="55:17" pos:end="55:17"><literal type="number" pos:start="55:17" pos:end="55:17">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <while pos:start="61:5" pos:end="95:5">while<condition pos:start="61:10" pos:end="61:19">(<expr pos:start="61:11" pos:end="61:18"><operator pos:start="61:11" pos:end="61:11">!</operator><call pos:start="61:12" pos:end="61:18"><name pos:start="61:12" pos:end="61:15">feof</name><argument_list pos:start="61:16" pos:end="61:18">(<argument pos:start="61:17" pos:end="61:17"><expr pos:start="61:17" pos:end="61:17"><name pos:start="61:17" pos:end="61:17">f</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="61:20" pos:end="95:5">{<block_content pos:start="63:9" pos:end="93:35">

        <decl_stmt pos:start="63:9" pos:end="63:50"><decl pos:start="63:9" pos:end="63:49"><type pos:start="63:9" pos:end="63:11"><name pos:start="63:9" pos:end="63:11">int</name></type> <name pos:start="63:13" pos:end="63:13">e</name><init pos:start="63:14" pos:end="63:49">= <expr pos:start="63:16" pos:end="63:49"><call pos:start="63:16" pos:end="63:45"><name pos:start="63:16" pos:end="63:21">fscanf</name><argument_list pos:start="63:22" pos:end="63:45">(<argument pos:start="63:23" pos:end="63:23"><expr pos:start="63:23" pos:end="63:23"><name pos:start="63:23" pos:end="63:23">f</name></expr></argument>, <argument pos:start="63:26" pos:end="63:38"><expr pos:start="63:26" pos:end="63:38"><literal type="string" pos:start="63:26" pos:end="63:38">"%999[^\n]\n"</literal></expr></argument>, <argument pos:start="63:41" pos:end="63:44"><expr pos:start="63:41" pos:end="63:44"><name pos:start="63:41" pos:end="63:44">line</name></expr></argument>)</argument_list></call> <operator pos:start="63:47" pos:end="63:47">-</operator> <literal type="number" pos:start="63:49" pos:end="63:49">1</literal></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="65:9" pos:end="67:21"><if pos:start="65:9" pos:end="67:21">if<condition pos:start="65:11" pos:end="65:32">(<expr pos:start="65:12" pos:end="65:31"><name pos:start="65:12" pos:end="65:18"><name pos:start="65:12" pos:end="65:15">line</name><index pos:start="65:16" pos:end="65:18">[<expr pos:start="65:17" pos:end="65:17"><literal type="number" pos:start="65:17" pos:end="65:17">0</literal></expr>]</index></name> <operator pos:start="65:20" pos:end="65:21">==</operator> <literal type="char" pos:start="65:23" pos:end="65:25">'#'</literal> <operator pos:start="65:27" pos:end="65:28">&amp;&amp;</operator> <operator pos:start="65:30" pos:end="65:30">!</operator><name pos:start="65:31" pos:end="65:31">e</name></expr>)</condition><block type="pseudo" pos:start="67:13" pos:end="67:21"><block_content pos:start="67:13" pos:end="67:21">

            <continue pos:start="67:13" pos:end="67:21">continue;</continue></block_content></block></if></if_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:64"><expr pos:start="69:9" pos:end="69:63"><name pos:start="69:9" pos:end="69:9">e</name><operator pos:start="69:10" pos:end="69:11">|=</operator> <call pos:start="69:13" pos:end="69:59"><name pos:start="69:13" pos:end="69:18">sscanf</name><argument_list pos:start="69:19" pos:end="69:59">(<argument pos:start="69:20" pos:end="69:23"><expr pos:start="69:20" pos:end="69:23"><name pos:start="69:20" pos:end="69:23">line</name></expr></argument>, <argument pos:start="69:26" pos:end="69:47"><expr pos:start="69:26" pos:end="69:47"><literal type="string" pos:start="69:26" pos:end="69:47">"%999[^=]=%999[^\n]\n"</literal></expr></argument>, <argument pos:start="69:50" pos:end="69:52"><expr pos:start="69:50" pos:end="69:52"><name pos:start="69:50" pos:end="69:52">tmp</name></expr></argument>, <argument pos:start="69:55" pos:end="69:58"><expr pos:start="69:55" pos:end="69:58"><name pos:start="69:55" pos:end="69:58">tmp2</name></expr></argument>)</argument_list></call> <operator pos:start="69:61" pos:end="69:61">-</operator> <literal type="number" pos:start="69:63" pos:end="69:63">2</literal></expr>;</expr_stmt>

        <if_stmt pos:start="71:9" pos:end="77:9"><if pos:start="71:9" pos:end="77:9">if<condition pos:start="71:11" pos:end="71:13">(<expr pos:start="71:12" pos:end="71:12"><name pos:start="71:12" pos:end="71:12">e</name></expr>)</condition><block pos:start="71:14" pos:end="77:9">{<block_content pos:start="73:13" pos:end="75:23">

            <expr_stmt pos:start="73:13" pos:end="73:53"><expr pos:start="73:13" pos:end="73:52"><call pos:start="73:13" pos:end="73:52"><name pos:start="73:13" pos:end="73:19">fprintf</name><argument_list pos:start="73:20" pos:end="73:52">(<argument pos:start="73:21" pos:end="73:26"><expr pos:start="73:21" pos:end="73:26"><name pos:start="73:21" pos:end="73:26">stderr</name></expr></argument>, <argument pos:start="73:29" pos:end="73:51"><expr pos:start="73:29" pos:end="73:51"><literal type="string" pos:start="73:29" pos:end="73:51">"Preset file invalid\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:23"><expr pos:start="75:13" pos:end="75:22"><call pos:start="75:13" pos:end="75:22"><name pos:start="75:13" pos:end="75:19">av_exit</name><argument_list pos:start="75:20" pos:end="75:22">(<argument pos:start="75:21" pos:end="75:21"><expr pos:start="75:21" pos:end="75:21"><literal type="number" pos:start="75:21" pos:end="75:21">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="79:9" pos:end="93:35"><if pos:start="79:9" pos:end="83:9">if<condition pos:start="79:11" pos:end="79:34">(<expr pos:start="79:12" pos:end="79:33"><operator pos:start="79:12" pos:end="79:12">!</operator><call pos:start="79:13" pos:end="79:33"><name pos:start="79:13" pos:end="79:18">strcmp</name><argument_list pos:start="79:19" pos:end="79:33">(<argument pos:start="79:20" pos:end="79:22"><expr pos:start="79:20" pos:end="79:22"><name pos:start="79:20" pos:end="79:22">tmp</name></expr></argument>, <argument pos:start="79:25" pos:end="79:32"><expr pos:start="79:25" pos:end="79:32"><literal type="string" pos:start="79:25" pos:end="79:32">"acodec"</literal></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="79:35" pos:end="83:9">{<block_content pos:start="81:13" pos:end="81:34">

            <expr_stmt pos:start="81:13" pos:end="81:34"><expr pos:start="81:13" pos:end="81:33"><call pos:start="81:13" pos:end="81:33"><name pos:start="81:13" pos:end="81:27">opt_audio_codec</name><argument_list pos:start="81:28" pos:end="81:33">(<argument pos:start="81:29" pos:end="81:32"><expr pos:start="81:29" pos:end="81:32"><name pos:start="81:29" pos:end="81:32">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if><if type="elseif" pos:start="83:10" pos:end="87:9">else if<condition pos:start="83:17" pos:end="83:40">(<expr pos:start="83:18" pos:end="83:39"><operator pos:start="83:18" pos:end="83:18">!</operator><call pos:start="83:19" pos:end="83:39"><name pos:start="83:19" pos:end="83:24">strcmp</name><argument_list pos:start="83:25" pos:end="83:39">(<argument pos:start="83:26" pos:end="83:28"><expr pos:start="83:26" pos:end="83:28"><name pos:start="83:26" pos:end="83:28">tmp</name></expr></argument>, <argument pos:start="83:31" pos:end="83:38"><expr pos:start="83:31" pos:end="83:38"><literal type="string" pos:start="83:31" pos:end="83:38">"vcodec"</literal></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="83:41" pos:end="87:9">{<block_content pos:start="85:13" pos:end="85:34">

            <expr_stmt pos:start="85:13" pos:end="85:34"><expr pos:start="85:13" pos:end="85:33"><call pos:start="85:13" pos:end="85:33"><name pos:start="85:13" pos:end="85:27">opt_video_codec</name><argument_list pos:start="85:28" pos:end="85:33">(<argument pos:start="85:29" pos:end="85:32"><expr pos:start="85:29" pos:end="85:32"><name pos:start="85:29" pos:end="85:32">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if><if type="elseif" pos:start="87:10" pos:end="91:9">else if<condition pos:start="87:17" pos:end="87:40">(<expr pos:start="87:18" pos:end="87:39"><operator pos:start="87:18" pos:end="87:18">!</operator><call pos:start="87:19" pos:end="87:39"><name pos:start="87:19" pos:end="87:24">strcmp</name><argument_list pos:start="87:25" pos:end="87:39">(<argument pos:start="87:26" pos:end="87:28"><expr pos:start="87:26" pos:end="87:28"><name pos:start="87:26" pos:end="87:28">tmp</name></expr></argument>, <argument pos:start="87:31" pos:end="87:38"><expr pos:start="87:31" pos:end="87:38"><literal type="string" pos:start="87:31" pos:end="87:38">"scodec"</literal></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="87:41" pos:end="91:9">{<block_content pos:start="89:13" pos:end="89:37">

            <expr_stmt pos:start="89:13" pos:end="89:37"><expr pos:start="89:13" pos:end="89:36"><call pos:start="89:13" pos:end="89:36"><name pos:start="89:13" pos:end="89:30">opt_subtitle_codec</name><argument_list pos:start="89:31" pos:end="89:36">(<argument pos:start="89:32" pos:end="89:35"><expr pos:start="89:32" pos:end="89:35"><name pos:start="89:32" pos:end="89:35">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if><else pos:start="91:10" pos:end="93:35">else<block type="pseudo" pos:start="93:13" pos:end="93:35"><block_content pos:start="93:13" pos:end="93:35">

            <expr_stmt pos:start="93:13" pos:end="93:35"><expr pos:start="93:13" pos:end="93:34"><call pos:start="93:13" pos:end="93:34"><name pos:start="93:13" pos:end="93:23">opt_default</name><argument_list pos:start="93:24" pos:end="93:34">(<argument pos:start="93:25" pos:end="93:27"><expr pos:start="93:25" pos:end="93:27"><name pos:start="93:25" pos:end="93:27">tmp</name></expr></argument>, <argument pos:start="93:30" pos:end="93:33"><expr pos:start="93:30" pos:end="93:33"><name pos:start="93:30" pos:end="93:33">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="99:5" pos:end="99:14"><expr pos:start="99:5" pos:end="99:13"><call pos:start="99:5" pos:end="99:13"><name pos:start="99:5" pos:end="99:10">fclose</name><argument_list pos:start="99:11" pos:end="99:13">(<argument pos:start="99:12" pos:end="99:12"><expr pos:start="99:12" pos:end="99:12"><name pos:start="99:12" pos:end="99:12">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="103:5" pos:end="103:13">return <expr pos:start="103:12" pos:end="103:12"><literal type="number" pos:start="103:12" pos:end="103:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
