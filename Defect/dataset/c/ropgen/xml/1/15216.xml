<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/15216.c" pos:tabs="8"><function pos:start="1:1" pos:end="63:1"><type pos:start="1:1" pos:end="1:13"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">char</name> <modifier pos:start="1:13" pos:end="1:13">*</modifier></type><name pos:start="1:14" pos:end="1:28">json_escape_str</name><parameter_list pos:start="1:29" pos:end="1:43">(<parameter pos:start="1:30" pos:end="1:42"><decl pos:start="1:30" pos:end="1:42"><type pos:start="1:30" pos:end="1:41"><specifier pos:start="1:30" pos:end="1:34">const</specifier> <name pos:start="1:36" pos:end="1:39">char</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:42">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="63:1">{<block_content pos:start="5:5" pos:end="61:15">

    <decl_stmt pos:start="5:5" pos:end="5:83"><decl pos:start="5:5" pos:end="5:82"><type pos:start="5:5" pos:end="5:21"><specifier pos:start="5:5" pos:end="5:10">static</specifier> <specifier pos:start="5:12" pos:end="5:16">const</specifier> <name pos:start="5:18" pos:end="5:21">char</name></type> <name pos:start="5:23" pos:end="5:35"><name pos:start="5:23" pos:end="5:33">json_escape</name><index pos:start="5:34" pos:end="5:35">[]</index></name> <init pos:start="5:37" pos:end="5:82">= <expr pos:start="5:39" pos:end="5:82"><block pos:start="5:39" pos:end="5:82">{<expr pos:start="5:40" pos:end="5:42"><literal type="char" pos:start="5:40" pos:end="5:42">'"'</literal></expr>, <expr pos:start="5:45" pos:end="5:48"><literal type="char" pos:start="5:45" pos:end="5:48">'\\'</literal></expr>, <expr pos:start="5:51" pos:end="5:54"><literal type="char" pos:start="5:51" pos:end="5:54">'\b'</literal></expr>, <expr pos:start="5:57" pos:end="5:60"><literal type="char" pos:start="5:57" pos:end="5:60">'\f'</literal></expr>, <expr pos:start="5:63" pos:end="5:66"><literal type="char" pos:start="5:63" pos:end="5:66">'\n'</literal></expr>, <expr pos:start="5:69" pos:end="5:72"><literal type="char" pos:start="5:69" pos:end="5:72">'\r'</literal></expr>, <expr pos:start="5:75" pos:end="5:78"><literal type="char" pos:start="5:75" pos:end="5:78">'\t'</literal></expr>, <expr pos:start="5:81" pos:end="5:81"><literal type="number" pos:start="5:81" pos:end="5:81">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:83"><decl pos:start="7:5" pos:end="7:82"><type pos:start="7:5" pos:end="7:21"><specifier pos:start="7:5" pos:end="7:10">static</specifier> <specifier pos:start="7:12" pos:end="7:16">const</specifier> <name pos:start="7:18" pos:end="7:21">char</name></type> <name pos:start="7:23" pos:end="7:34"><name pos:start="7:23" pos:end="7:32">json_subst</name><index pos:start="7:33" pos:end="7:34">[]</index></name>  <init pos:start="7:37" pos:end="7:82">= <expr pos:start="7:39" pos:end="7:82"><block pos:start="7:39" pos:end="7:82">{<expr pos:start="7:40" pos:end="7:42"><literal type="char" pos:start="7:40" pos:end="7:42">'"'</literal></expr>, <expr pos:start="7:45" pos:end="7:48"><literal type="char" pos:start="7:45" pos:end="7:48">'\\'</literal></expr>,  <expr pos:start="7:52" pos:end="7:54"><literal type="char" pos:start="7:52" pos:end="7:54">'b'</literal></expr>,  <expr pos:start="7:58" pos:end="7:60"><literal type="char" pos:start="7:58" pos:end="7:60">'f'</literal></expr>,  <expr pos:start="7:64" pos:end="7:66"><literal type="char" pos:start="7:64" pos:end="7:66">'n'</literal></expr>,  <expr pos:start="7:70" pos:end="7:72"><literal type="char" pos:start="7:70" pos:end="7:72">'r'</literal></expr>,  <expr pos:start="7:76" pos:end="7:78"><literal type="char" pos:start="7:76" pos:end="7:78">'t'</literal></expr>, <expr pos:start="7:81" pos:end="7:81"><literal type="number" pos:start="7:81" pos:end="7:81">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:13"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">char</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:13">ret</name></decl>, <decl pos:start="9:16" pos:end="9:17"><type ref="prev" pos:start="9:5" pos:end="9:10"><modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:17">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>, <decl pos:start="11:12" pos:end="11:18"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:12" pos:end="11:14">len</name> <init pos:start="11:16" pos:end="11:18">= <expr pos:start="11:18" pos:end="11:18"><literal type="number" pos:start="11:18" pos:end="11:18">0</literal></expr></init></decl>;</decl_stmt>



    <comment type="line" pos:start="15:5" pos:end="15:47">// compute the length of the escaped string</comment>

    <for pos:start="17:5" pos:end="25:5">for <control pos:start="17:9" pos:end="17:26">(<init pos:start="17:10" pos:end="17:15"><expr pos:start="17:10" pos:end="17:14"><name pos:start="17:10" pos:end="17:10">i</name> <operator pos:start="17:12" pos:end="17:12">=</operator> <literal type="number" pos:start="17:14" pos:end="17:14">0</literal></expr>;</init> <condition pos:start="17:17" pos:end="17:21"><expr pos:start="17:17" pos:end="17:20"><name pos:start="17:17" pos:end="17:20"><name pos:start="17:17" pos:end="17:17">s</name><index pos:start="17:18" pos:end="17:20">[<expr pos:start="17:19" pos:end="17:19"><name pos:start="17:19" pos:end="17:19">i</name></expr>]</index></name></expr>;</condition> <incr pos:start="17:23" pos:end="17:25"><expr pos:start="17:23" pos:end="17:25"><name pos:start="17:23" pos:end="17:23">i</name><operator pos:start="17:24" pos:end="17:25">++</operator></expr></incr>)</control> <block pos:start="17:28" pos:end="25:5">{<block_content pos:start="19:9" pos:end="23:52">

        <if_stmt pos:start="19:9" pos:end="23:52"><if pos:start="19:9" pos:end="19:52">if <condition pos:start="19:12" pos:end="19:38">(<expr pos:start="19:13" pos:end="19:37"><call pos:start="19:13" pos:end="19:37"><name pos:start="19:13" pos:end="19:18">strchr</name><argument_list pos:start="19:19" pos:end="19:37">(<argument pos:start="19:20" pos:end="19:30"><expr pos:start="19:20" pos:end="19:30"><name pos:start="19:20" pos:end="19:30">json_escape</name></expr></argument>, <argument pos:start="19:33" pos:end="19:36"><expr pos:start="19:33" pos:end="19:36"><name pos:start="19:33" pos:end="19:36"><name pos:start="19:33" pos:end="19:33">s</name><index pos:start="19:34" pos:end="19:36">[<expr pos:start="19:35" pos:end="19:35"><name pos:start="19:35" pos:end="19:35">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="19:44" pos:end="19:52"><block_content pos:start="19:44" pos:end="19:52">     <expr_stmt pos:start="19:44" pos:end="19:52"><expr pos:start="19:44" pos:end="19:51"><name pos:start="19:44" pos:end="19:46">len</name> <operator pos:start="19:48" pos:end="19:49">+=</operator> <literal type="number" pos:start="19:51" pos:end="19:51">2</literal></expr>;</expr_stmt></block_content></block></if> <comment type="line" pos:start="19:54" pos:end="19:69">// simple escape</comment>

        <if type="elseif" pos:start="21:9" pos:end="21:52">else if <condition pos:start="21:17" pos:end="21:42">(<expr pos:start="21:18" pos:end="21:41"><operator pos:start="21:18" pos:end="21:18">(</operator><name pos:start="21:19" pos:end="21:26">unsigned</name> <name pos:start="21:28" pos:end="21:31">char</name><operator pos:start="21:32" pos:end="21:32">)</operator><name pos:start="21:33" pos:end="21:36"><name pos:start="21:33" pos:end="21:33">s</name><index pos:start="21:34" pos:end="21:36">[<expr pos:start="21:35" pos:end="21:35"><name pos:start="21:35" pos:end="21:35">i</name></expr>]</index></name> <operator pos:start="21:38" pos:end="21:38">&lt;</operator> <literal type="number" pos:start="21:40" pos:end="21:41">32</literal></expr>)</condition><block type="pseudo" pos:start="21:44" pos:end="21:52"><block_content pos:start="21:44" pos:end="21:52"> <expr_stmt pos:start="21:44" pos:end="21:52"><expr pos:start="21:44" pos:end="21:51"><name pos:start="21:44" pos:end="21:46">len</name> <operator pos:start="21:48" pos:end="21:49">+=</operator> <literal type="number" pos:start="21:51" pos:end="21:51">6</literal></expr>;</expr_stmt></block_content></block></if> <comment type="line" pos:start="21:54" pos:end="21:82">// handle non-printable chars</comment>

        <else pos:start="23:9" pos:end="23:52">else<block type="pseudo" pos:start="23:44" pos:end="23:52"><block_content pos:start="23:44" pos:end="23:52">                               <expr_stmt pos:start="23:44" pos:end="23:52"><expr pos:start="23:44" pos:end="23:51"><name pos:start="23:44" pos:end="23:46">len</name> <operator pos:start="23:48" pos:end="23:49">+=</operator> <literal type="number" pos:start="23:51" pos:end="23:51">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> <comment type="line" pos:start="23:54" pos:end="23:65">// char copy</comment>

    </block_content>}</block></for>



    <expr_stmt pos:start="29:5" pos:end="29:33"><expr pos:start="29:5" pos:end="29:32"><name pos:start="29:5" pos:end="29:5">p</name> <operator pos:start="29:7" pos:end="29:7">=</operator> <name pos:start="29:9" pos:end="29:11">ret</name> <operator pos:start="29:13" pos:end="29:13">=</operator> <call pos:start="29:15" pos:end="29:32"><name pos:start="29:15" pos:end="29:23">av_malloc</name><argument_list pos:start="29:24" pos:end="29:32">(<argument pos:start="29:25" pos:end="29:31"><expr pos:start="29:25" pos:end="29:31"><name pos:start="29:25" pos:end="29:27">len</name> <operator pos:start="29:29" pos:end="29:29">+</operator> <literal type="number" pos:start="29:31" pos:end="29:31">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="33:20"><if pos:start="31:5" pos:end="33:20">if <condition pos:start="31:8" pos:end="31:11">(<expr pos:start="31:9" pos:end="31:10"><operator pos:start="31:9" pos:end="31:9">!</operator><name pos:start="31:10" pos:end="31:10">p</name></expr>)</condition><block type="pseudo" pos:start="33:9" pos:end="33:20"><block_content pos:start="33:9" pos:end="33:20">

        <return pos:start="33:9" pos:end="33:20">return <expr pos:start="33:16" pos:end="33:19"><name pos:start="33:16" pos:end="33:19">NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <for pos:start="35:5" pos:end="57:5">for <control pos:start="35:9" pos:end="35:26">(<init pos:start="35:10" pos:end="35:15"><expr pos:start="35:10" pos:end="35:14"><name pos:start="35:10" pos:end="35:10">i</name> <operator pos:start="35:12" pos:end="35:12">=</operator> <literal type="number" pos:start="35:14" pos:end="35:14">0</literal></expr>;</init> <condition pos:start="35:17" pos:end="35:21"><expr pos:start="35:17" pos:end="35:20"><name pos:start="35:17" pos:end="35:20"><name pos:start="35:17" pos:end="35:17">s</name><index pos:start="35:18" pos:end="35:20">[<expr pos:start="35:19" pos:end="35:19"><name pos:start="35:19" pos:end="35:19">i</name></expr>]</index></name></expr>;</condition> <incr pos:start="35:23" pos:end="35:25"><expr pos:start="35:23" pos:end="35:25"><name pos:start="35:23" pos:end="35:23">i</name><operator pos:start="35:24" pos:end="35:25">++</operator></expr></incr>)</control> <block pos:start="35:28" pos:end="57:5">{<block_content pos:start="37:9" pos:end="55:9">

        <decl_stmt pos:start="37:9" pos:end="37:44"><decl pos:start="37:9" pos:end="37:43"><type pos:start="37:9" pos:end="37:14"><name pos:start="37:9" pos:end="37:12">char</name> <modifier pos:start="37:14" pos:end="37:14">*</modifier></type><name pos:start="37:15" pos:end="37:15">q</name> <init pos:start="37:17" pos:end="37:43">= <expr pos:start="37:19" pos:end="37:43"><call pos:start="37:19" pos:end="37:43"><name pos:start="37:19" pos:end="37:24">strchr</name><argument_list pos:start="37:25" pos:end="37:43">(<argument pos:start="37:26" pos:end="37:36"><expr pos:start="37:26" pos:end="37:36"><name pos:start="37:26" pos:end="37:36">json_escape</name></expr></argument>, <argument pos:start="37:39" pos:end="37:42"><expr pos:start="37:39" pos:end="37:42"><name pos:start="37:39" pos:end="37:42"><name pos:start="37:39" pos:end="37:39">s</name><index pos:start="37:40" pos:end="37:42">[<expr pos:start="37:41" pos:end="37:41"><name pos:start="37:41" pos:end="37:41">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="39:9" pos:end="55:9"><if pos:start="39:9" pos:end="45:9">if <condition pos:start="39:12" pos:end="39:14">(<expr pos:start="39:13" pos:end="39:13"><name pos:start="39:13" pos:end="39:13">q</name></expr>)</condition> <block pos:start="39:16" pos:end="45:9">{<block_content pos:start="41:13" pos:end="43:47">

            <expr_stmt pos:start="41:13" pos:end="41:24"><expr pos:start="41:13" pos:end="41:23"><operator pos:start="41:13" pos:end="41:13">*</operator><name pos:start="41:14" pos:end="41:14">p</name><operator pos:start="41:15" pos:end="41:16">++</operator> <operator pos:start="41:18" pos:end="41:18">=</operator> <literal type="char" pos:start="41:20" pos:end="41:23">'\\'</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:47"><expr pos:start="43:13" pos:end="43:46"><operator pos:start="43:13" pos:end="43:13">*</operator><name pos:start="43:14" pos:end="43:14">p</name><operator pos:start="43:15" pos:end="43:16">++</operator> <operator pos:start="43:18" pos:end="43:18">=</operator> <name pos:start="43:20" pos:end="43:46"><name pos:start="43:20" pos:end="43:29">json_subst</name><index pos:start="43:30" pos:end="43:46">[<expr pos:start="43:31" pos:end="43:45"><name pos:start="43:31" pos:end="43:31">q</name> <operator pos:start="43:33" pos:end="43:33">-</operator> <name pos:start="43:35" pos:end="43:45">json_escape</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="45:11" pos:end="51:9">else if <condition pos:start="45:19" pos:end="45:44">(<expr pos:start="45:20" pos:end="45:43"><operator pos:start="45:20" pos:end="45:20">(</operator><name pos:start="45:21" pos:end="45:28">unsigned</name> <name pos:start="45:30" pos:end="45:33">char</name><operator pos:start="45:34" pos:end="45:34">)</operator><name pos:start="45:35" pos:end="45:38"><name pos:start="45:35" pos:end="45:35">s</name><index pos:start="45:36" pos:end="45:38">[<expr pos:start="45:37" pos:end="45:37"><name pos:start="45:37" pos:end="45:37">i</name></expr>]</index></name> <operator pos:start="45:40" pos:end="45:40">&lt;</operator> <literal type="number" pos:start="45:42" pos:end="45:43">32</literal></expr>)</condition> <block pos:start="45:46" pos:end="51:9">{<block_content pos:start="47:13" pos:end="49:19">

            <expr_stmt pos:start="47:13" pos:end="47:53"><expr pos:start="47:13" pos:end="47:52"><call pos:start="47:13" pos:end="47:52"><name pos:start="47:13" pos:end="47:20">snprintf</name><argument_list pos:start="47:21" pos:end="47:52">(<argument pos:start="47:22" pos:end="47:22"><expr pos:start="47:22" pos:end="47:22"><name pos:start="47:22" pos:end="47:22">p</name></expr></argument>, <argument pos:start="47:25" pos:end="47:25"><expr pos:start="47:25" pos:end="47:25"><literal type="number" pos:start="47:25" pos:end="47:25">7</literal></expr></argument>, <argument pos:start="47:28" pos:end="47:38"><expr pos:start="47:28" pos:end="47:38"><literal type="string" pos:start="47:28" pos:end="47:38">"\\u00%02x"</literal></expr></argument>, <argument pos:start="47:41" pos:end="47:51"><expr pos:start="47:41" pos:end="47:51"><name pos:start="47:41" pos:end="47:44"><name pos:start="47:41" pos:end="47:41">s</name><index pos:start="47:42" pos:end="47:44">[<expr pos:start="47:43" pos:end="47:43"><name pos:start="47:43" pos:end="47:43">i</name></expr>]</index></name> <operator pos:start="47:46" pos:end="47:46">&amp;</operator> <literal type="number" pos:start="47:48" pos:end="47:51">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:19"><expr pos:start="49:13" pos:end="49:18"><name pos:start="49:13" pos:end="49:13">p</name> <operator pos:start="49:15" pos:end="49:16">+=</operator> <literal type="number" pos:start="49:18" pos:end="49:18">6</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="51:11" pos:end="55:9">else <block pos:start="51:16" pos:end="55:9">{<block_content pos:start="53:13" pos:end="53:24">

            <expr_stmt pos:start="53:13" pos:end="53:24"><expr pos:start="53:13" pos:end="53:23"><operator pos:start="53:13" pos:end="53:13">*</operator><name pos:start="53:14" pos:end="53:14">p</name><operator pos:start="53:15" pos:end="53:16">++</operator> <operator pos:start="53:18" pos:end="53:18">=</operator> <name pos:start="53:20" pos:end="53:23"><name pos:start="53:20" pos:end="53:20">s</name><index pos:start="53:21" pos:end="53:23">[<expr pos:start="53:22" pos:end="53:22"><name pos:start="53:22" pos:end="53:22">i</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="59:5" pos:end="59:11"><expr pos:start="59:5" pos:end="59:10"><operator pos:start="59:5" pos:end="59:5">*</operator><name pos:start="59:6" pos:end="59:6">p</name> <operator pos:start="59:8" pos:end="59:8">=</operator> <literal type="number" pos:start="59:10" pos:end="59:10">0</literal></expr>;</expr_stmt>

    <return pos:start="61:5" pos:end="61:15">return <expr pos:start="61:12" pos:end="61:14"><name pos:start="61:12" pos:end="61:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
