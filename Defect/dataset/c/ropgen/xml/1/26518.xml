<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26518.c" pos:tabs="8"><function pos:start="1:1" pos:end="615:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:33">do_v7m_exception_exit</name><parameter_list pos:start="1:34" pos:end="1:46">(<parameter pos:start="1:35" pos:end="1:45"><decl pos:start="1:35" pos:end="1:45"><type pos:start="1:35" pos:end="1:42"><name pos:start="1:35" pos:end="1:40">ARMCPU</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:45">cpu</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="615:1">{<block_content pos:start="5:5" pos:end="613:67">

    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:32"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">CPUARMState</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:20">env</name> <init pos:start="5:22" pos:end="5:32">= <expr pos:start="5:24" pos:end="5:32"><operator pos:start="5:24" pos:end="5:24">&amp;</operator><name pos:start="5:25" pos:end="5:32"><name pos:start="5:25" pos:end="5:27">cpu</name><operator pos:start="5:28" pos:end="5:29">-&gt;</operator><name pos:start="5:30" pos:end="5:32">env</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">CPUState</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:16">cs</name> <init pos:start="7:18" pos:end="7:27">= <expr pos:start="7:20" pos:end="7:27"><call pos:start="7:20" pos:end="7:27"><name pos:start="7:20" pos:end="7:22">CPU</name><argument_list pos:start="7:23" pos:end="7:27">(<argument pos:start="7:24" pos:end="7:26"><expr pos:start="7:24" pos:end="7:26"><name pos:start="7:24" pos:end="7:26">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:19">excret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:17">xpsr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:24"><decl pos:start="13:5" pos:end="13:23"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">bool</name></type> <name pos:start="13:10" pos:end="13:15">ufault</name> <init pos:start="13:17" pos:end="13:23">= <expr pos:start="13:19" pos:end="13:23"><name pos:start="13:19" pos:end="13:23">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:24"><decl pos:start="15:5" pos:end="15:23"><type pos:start="15:5" pos:end="15:8"><name pos:start="15:5" pos:end="15:8">bool</name></type> <name pos:start="15:10" pos:end="15:15">sfault</name> <init pos:start="15:17" pos:end="15:23">= <expr pos:start="15:19" pos:end="15:23"><name pos:start="15:19" pos:end="15:23">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:30"><decl pos:start="17:5" pos:end="17:29"><type pos:start="17:5" pos:end="17:8"><name pos:start="17:5" pos:end="17:8">bool</name></type> <name pos:start="17:10" pos:end="17:29">return_to_sp_process</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:27"><decl pos:start="19:5" pos:end="19:26"><type pos:start="19:5" pos:end="19:8"><name pos:start="19:5" pos:end="19:8">bool</name></type> <name pos:start="19:10" pos:end="19:26">return_to_handler</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:27"><decl pos:start="21:5" pos:end="21:26"><type pos:start="21:5" pos:end="21:8"><name pos:start="21:5" pos:end="21:8">bool</name></type> <name pos:start="21:10" pos:end="21:18">rettobase</name> <init pos:start="21:20" pos:end="21:26">= <expr pos:start="21:22" pos:end="21:26"><name pos:start="21:22" pos:end="21:26">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:28"><decl pos:start="23:5" pos:end="23:27"><type pos:start="23:5" pos:end="23:8"><name pos:start="23:5" pos:end="23:8">bool</name></type> <name pos:start="23:10" pos:end="23:19">exc_secure</name> <init pos:start="23:21" pos:end="23:27">= <expr pos:start="23:23" pos:end="23:27"><name pos:start="23:23" pos:end="23:27">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:26"><decl pos:start="25:5" pos:end="25:25"><type pos:start="25:5" pos:end="25:8"><name pos:start="25:5" pos:end="25:8">bool</name></type> <name pos:start="25:10" pos:end="25:25">return_to_secure</name></decl>;</decl_stmt>



    <comment type="block" pos:start="29:5" pos:end="37:7">/* We can only get here from an EXCP_EXCEPTION_EXIT, and

     * gen_bx_excret() enforces the architectural rule

     * that jumps to magic addresses don't have magic behaviour unless

     * we're in Handler mode (compare pseudocode BXWritePC()).

     */</comment>

    <expr_stmt pos:start="39:5" pos:end="39:41"><expr pos:start="39:5" pos:end="39:40"><call pos:start="39:5" pos:end="39:40"><name pos:start="39:5" pos:end="39:10">assert</name><argument_list pos:start="39:11" pos:end="39:40">(<argument pos:start="39:12" pos:end="39:39"><expr pos:start="39:12" pos:end="39:39"><call pos:start="39:12" pos:end="39:39"><name pos:start="39:12" pos:end="39:34">arm_v7m_is_handler_mode</name><argument_list pos:start="39:35" pos:end="39:39">(<argument pos:start="39:36" pos:end="39:38"><expr pos:start="39:36" pos:end="39:38"><name pos:start="39:36" pos:end="39:38">env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="43:5" pos:end="55:7">/* In the spec pseudocode ExceptionReturn() is called directly

     * from BXWritePC() and gets the full target PC value including

     * bit zero. In QEMU's implementation we treat it as a normal

     * jump-to-register (which is then caught later on), and so split

     * the target value up between env-&gt;regs[15] and env-&gt;thumb in

     * gen_bx(). Reconstitute it.

     */</comment>

    <expr_stmt pos:start="57:5" pos:end="57:27"><expr pos:start="57:5" pos:end="57:26"><name pos:start="57:5" pos:end="57:10">excret</name> <operator pos:start="57:12" pos:end="57:12">=</operator> <name pos:start="57:14" pos:end="57:26"><name pos:start="57:14" pos:end="57:16">env</name><operator pos:start="57:17" pos:end="57:18">-&gt;</operator><name pos:start="57:19" pos:end="57:22">regs</name><index pos:start="57:23" pos:end="57:26">[<expr pos:start="57:24" pos:end="57:25"><literal type="number" pos:start="57:24" pos:end="57:25">15</literal></expr>]</index></name></expr>;</expr_stmt>

    <if_stmt pos:start="59:5" pos:end="63:5"><if pos:start="59:5" pos:end="63:5">if <condition pos:start="59:8" pos:end="59:19">(<expr pos:start="59:9" pos:end="59:18"><name pos:start="59:9" pos:end="59:18"><name pos:start="59:9" pos:end="59:11">env</name><operator pos:start="59:12" pos:end="59:13">-&gt;</operator><name pos:start="59:14" pos:end="59:18">thumb</name></name></expr>)</condition> <block pos:start="59:21" pos:end="63:5">{<block_content pos:start="61:9" pos:end="61:20">

        <expr_stmt pos:start="61:9" pos:end="61:20"><expr pos:start="61:9" pos:end="61:19"><name pos:start="61:9" pos:end="61:14">excret</name> <operator pos:start="61:16" pos:end="61:17">|=</operator> <literal type="number" pos:start="61:19" pos:end="61:19">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="67:5" pos:end="71:46"><expr pos:start="67:5" pos:end="71:45"><call pos:start="67:5" pos:end="71:45"><name pos:start="67:5" pos:end="67:17">qemu_log_mask</name><argument_list pos:start="67:18" pos:end="71:45">(<argument pos:start="67:19" pos:end="67:29"><expr pos:start="67:19" pos:end="67:29"><name pos:start="67:19" pos:end="67:29">CPU_LOG_INT</name></expr></argument>, <argument pos:start="67:32" pos:end="69:44"><expr pos:start="67:32" pos:end="69:44"><literal type="string" pos:start="67:32" pos:end="67:61">"Exception return: magic PC %"</literal> <name pos:start="67:63" pos:end="67:68">PRIx32</name>

                  <literal type="string" pos:start="69:19" pos:end="69:44">" previous exception %d\n"</literal></expr></argument>,

                  <argument pos:start="71:19" pos:end="71:24"><expr pos:start="71:19" pos:end="71:24"><name pos:start="71:19" pos:end="71:24">excret</name></expr></argument>, <argument pos:start="71:27" pos:end="71:44"><expr pos:start="71:27" pos:end="71:44"><name pos:start="71:27" pos:end="71:44"><name pos:start="71:27" pos:end="71:29">env</name><operator pos:start="71:30" pos:end="71:31">-&gt;</operator><name pos:start="71:32" pos:end="71:34">v7m</name><operator pos:start="71:35" pos:end="71:35">.</operator><name pos:start="71:36" pos:end="71:44">exception</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="75:5" pos:end="83:5"><if pos:start="75:5" pos:end="83:5">if <condition pos:start="75:8" pos:end="75:68">(<expr pos:start="75:9" pos:end="75:67"><operator pos:start="75:9" pos:end="75:9">(</operator><name pos:start="75:10" pos:end="75:15">excret</name> <operator pos:start="75:17" pos:end="75:17">&amp;</operator> <name pos:start="75:19" pos:end="75:40">R_V7M_EXCRET_RES1_MASK</name><operator pos:start="75:41" pos:end="75:41">)</operator> <operator pos:start="75:43" pos:end="75:44">!=</operator> <name pos:start="75:46" pos:end="75:67">R_V7M_EXCRET_RES1_MASK</name></expr>)</condition> <block pos:start="75:70" pos:end="83:5">{<block_content pos:start="77:9" pos:end="81:30">

        <expr_stmt pos:start="77:9" pos:end="81:30"><expr pos:start="77:9" pos:end="81:29"><call pos:start="77:9" pos:end="81:29"><name pos:start="77:9" pos:end="77:21">qemu_log_mask</name><argument_list pos:start="77:22" pos:end="81:29">(<argument pos:start="77:23" pos:end="77:37"><expr pos:start="77:23" pos:end="77:37"><name pos:start="77:23" pos:end="77:37">LOG_GUEST_ERROR</name></expr></argument>, <argument pos:start="77:40" pos:end="79:71"><expr pos:start="77:40" pos:end="79:71"><literal type="string" pos:start="77:40" pos:end="77:80">"M profile: zero high bits in exception "</literal>

                      <literal type="string" pos:start="79:23" pos:end="79:41">"exit PC value 0x%"</literal> <name pos:start="79:43" pos:end="79:48">PRIx32</name> <literal type="string" pos:start="79:50" pos:end="79:71">" are UNPREDICTABLE\n"</literal></expr></argument>,

                      <argument pos:start="81:23" pos:end="81:28"><expr pos:start="81:23" pos:end="81:28"><name pos:start="81:23" pos:end="81:28">excret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="87:5" pos:end="109:5"><if pos:start="87:5" pos:end="109:5">if <condition pos:start="87:8" pos:end="87:49">(<expr pos:start="87:9" pos:end="87:48"><call pos:start="87:9" pos:end="87:48"><name pos:start="87:9" pos:end="87:19">arm_feature</name><argument_list pos:start="87:20" pos:end="87:48">(<argument pos:start="87:21" pos:end="87:23"><expr pos:start="87:21" pos:end="87:23"><name pos:start="87:21" pos:end="87:23">env</name></expr></argument>, <argument pos:start="87:26" pos:end="87:47"><expr pos:start="87:26" pos:end="87:47"><name pos:start="87:26" pos:end="87:47">ARM_FEATURE_M_SECURITY</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="87:51" pos:end="109:5">{<block_content pos:start="95:9" pos:end="107:9">

        <comment type="block" pos:start="89:9" pos:end="93:11">/* EXC_RETURN.ES validation check (R_SMFL). We must do this before

         * we pick which FAULTMASK to clear.

         */</comment>

        <if_stmt pos:start="95:9" pos:end="107:9"><if pos:start="95:9" pos:end="107:9">if <condition pos:start="95:12" pos:end="99:49">(<expr pos:start="95:13" pos:end="99:48"><operator pos:start="95:13" pos:end="95:13">!</operator><name pos:start="95:14" pos:end="95:28"><name pos:start="95:14" pos:end="95:16">env</name><operator pos:start="95:17" pos:end="95:18">-&gt;</operator><name pos:start="95:19" pos:end="95:21">v7m</name><operator pos:start="95:22" pos:end="95:22">.</operator><name pos:start="95:23" pos:end="95:28">secure</name></name> <operator pos:start="95:30" pos:end="95:31">&amp;&amp;</operator>

            <operator pos:start="97:13" pos:end="97:13">(</operator><operator pos:start="97:14" pos:end="97:14">(</operator><name pos:start="97:15" pos:end="97:20">excret</name> <operator pos:start="97:22" pos:end="97:22">&amp;</operator> <name pos:start="97:24" pos:end="97:43">R_V7M_EXCRET_ES_MASK</name><operator pos:start="97:44" pos:end="97:44">)</operator> <operator pos:start="97:46" pos:end="97:47">||</operator>

             <operator pos:start="99:14" pos:end="99:14">!</operator><operator pos:start="99:15" pos:end="99:15">(</operator><name pos:start="99:16" pos:end="99:21">excret</name> <operator pos:start="99:23" pos:end="99:23">&amp;</operator> <name pos:start="99:25" pos:end="99:46">R_V7M_EXCRET_DCRS_MASK</name><operator pos:start="99:47" pos:end="99:47">)</operator><operator pos:start="99:48" pos:end="99:48">)</operator></expr>)</condition> <block pos:start="99:51" pos:end="107:9">{<block_content pos:start="101:13" pos:end="105:44">

            <expr_stmt pos:start="101:13" pos:end="101:23"><expr pos:start="101:13" pos:end="101:22"><name pos:start="101:13" pos:end="101:18">sfault</name> <operator pos:start="101:20" pos:end="101:20">=</operator> <literal type="number" pos:start="101:22" pos:end="101:22">1</literal></expr>;</expr_stmt>

            <comment type="block" pos:start="103:13" pos:end="103:64">/* For all other purposes, treat ES as 0 (R_HXSR) */</comment>

            <expr_stmt pos:start="105:13" pos:end="105:44"><expr pos:start="105:13" pos:end="105:43"><name pos:start="105:13" pos:end="105:18">excret</name> <operator pos:start="105:20" pos:end="105:21">&amp;=</operator> <operator pos:start="105:23" pos:end="105:23">~</operator><name pos:start="105:24" pos:end="105:43">R_V7M_EXCRET_ES_MASK</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="113:5" pos:end="143:5"><if pos:start="113:5" pos:end="143:5">if <condition pos:start="113:8" pos:end="113:46">(<expr pos:start="113:9" pos:end="113:45"><name pos:start="113:9" pos:end="113:26"><name pos:start="113:9" pos:end="113:11">env</name><operator pos:start="113:12" pos:end="113:13">-&gt;</operator><name pos:start="113:14" pos:end="113:16">v7m</name><operator pos:start="113:17" pos:end="113:17">.</operator><name pos:start="113:18" pos:end="113:26">exception</name></name> <operator pos:start="113:28" pos:end="113:29">!=</operator> <name pos:start="113:31" pos:end="113:45">ARMV7M_EXCP_NMI</name></expr>)</condition> <block pos:start="113:48" pos:end="143:5">{<block_content pos:start="127:9" pos:end="141:9">

        <comment type="block" pos:start="115:9" pos:end="125:11">/* Auto-clear FAULTMASK on return from other than NMI.

         * If the security extension is implemented then this only

         * happens if the raw execution priority is &gt;= 0; the

         * value of the ES bit in the exception return value indicates

         * which security state's faultmask to clear. (v8M ARM ARM R_KBNF.)

         */</comment>

        <if_stmt pos:start="127:9" pos:end="141:9"><if pos:start="127:9" pos:end="137:9">if <condition pos:start="127:12" pos:end="127:53">(<expr pos:start="127:13" pos:end="127:52"><call pos:start="127:13" pos:end="127:52"><name pos:start="127:13" pos:end="127:23">arm_feature</name><argument_list pos:start="127:24" pos:end="127:52">(<argument pos:start="127:25" pos:end="127:27"><expr pos:start="127:25" pos:end="127:27"><name pos:start="127:25" pos:end="127:27">env</name></expr></argument>, <argument pos:start="127:30" pos:end="127:51"><expr pos:start="127:30" pos:end="127:51"><name pos:start="127:30" pos:end="127:51">ARM_FEATURE_M_SECURITY</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="127:55" pos:end="137:9">{<block_content pos:start="129:13" pos:end="135:13">

            <expr_stmt pos:start="129:13" pos:end="129:55"><expr pos:start="129:13" pos:end="129:54"><name pos:start="129:13" pos:end="129:22">exc_secure</name> <operator pos:start="129:24" pos:end="129:24">=</operator> <name pos:start="129:26" pos:end="129:31">excret</name> <operator pos:start="129:33" pos:end="129:33">&amp;</operator> <name pos:start="129:35" pos:end="129:54">R_V7M_EXCRET_ES_MASK</name></expr>;</expr_stmt>

            <if_stmt pos:start="131:13" pos:end="135:13"><if pos:start="131:13" pos:end="135:13">if <condition pos:start="131:16" pos:end="131:67">(<expr pos:start="131:17" pos:end="131:66"><call pos:start="131:17" pos:end="131:61"><name pos:start="131:17" pos:end="131:50">armv7m_nvic_raw_execution_priority</name><argument_list pos:start="131:51" pos:end="131:61">(<argument pos:start="131:52" pos:end="131:60"><expr pos:start="131:52" pos:end="131:60"><name pos:start="131:52" pos:end="131:60"><name pos:start="131:52" pos:end="131:54">env</name><operator pos:start="131:55" pos:end="131:56">-&gt;</operator><name pos:start="131:57" pos:end="131:60">nvic</name></name></expr></argument>)</argument_list></call> <operator pos:start="131:63" pos:end="131:64">&gt;=</operator> <literal type="number" pos:start="131:66" pos:end="131:66">0</literal></expr>)</condition> <block pos:start="131:69" pos:end="135:13">{<block_content pos:start="133:17" pos:end="133:51">

                <expr_stmt pos:start="133:17" pos:end="133:51"><expr pos:start="133:17" pos:end="133:50"><name pos:start="133:17" pos:end="133:46"><name pos:start="133:17" pos:end="133:19">env</name><operator pos:start="133:20" pos:end="133:21">-&gt;</operator><name pos:start="133:22" pos:end="133:24">v7m</name><operator pos:start="133:25" pos:end="133:25">.</operator><name pos:start="133:26" pos:end="133:34">faultmask</name><index pos:start="133:35" pos:end="133:46">[<expr pos:start="133:36" pos:end="133:45"><name pos:start="133:36" pos:end="133:45">exc_secure</name></expr>]</index></name> <operator pos:start="133:48" pos:end="133:48">=</operator> <literal type="number" pos:start="133:50" pos:end="133:50">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="137:11" pos:end="141:9">else <block pos:start="137:16" pos:end="141:9">{<block_content pos:start="139:13" pos:end="139:45">

            <expr_stmt pos:start="139:13" pos:end="139:45"><expr pos:start="139:13" pos:end="139:44"><name pos:start="139:13" pos:end="139:40"><name pos:start="139:13" pos:end="139:15">env</name><operator pos:start="139:16" pos:end="139:17">-&gt;</operator><name pos:start="139:18" pos:end="139:20">v7m</name><operator pos:start="139:21" pos:end="139:21">.</operator><name pos:start="139:22" pos:end="139:30">faultmask</name><index pos:start="139:31" pos:end="139:40">[<expr pos:start="139:32" pos:end="139:39"><name pos:start="139:32" pos:end="139:39">M_REG_NS</name></expr>]</index></name> <operator pos:start="139:42" pos:end="139:42">=</operator> <literal type="number" pos:start="139:44" pos:end="139:44">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="147:5" pos:end="183:5">switch <condition pos:start="147:12" pos:end="149:49">(<expr pos:start="147:13" pos:end="149:48"><call pos:start="147:13" pos:end="149:48"><name pos:start="147:13" pos:end="147:36">armv7m_nvic_complete_irq</name><argument_list pos:start="147:37" pos:end="149:48">(<argument pos:start="147:38" pos:end="147:46"><expr pos:start="147:38" pos:end="147:46"><name pos:start="147:38" pos:end="147:46"><name pos:start="147:38" pos:end="147:40">env</name><operator pos:start="147:41" pos:end="147:42">-&gt;</operator><name pos:start="147:43" pos:end="147:46">nvic</name></name></expr></argument>, <argument pos:start="147:49" pos:end="147:66"><expr pos:start="147:49" pos:end="147:66"><name pos:start="147:49" pos:end="147:66"><name pos:start="147:49" pos:end="147:51">env</name><operator pos:start="147:52" pos:end="147:53">-&gt;</operator><name pos:start="147:54" pos:end="147:56">v7m</name><operator pos:start="147:57" pos:end="147:57">.</operator><name pos:start="147:58" pos:end="147:66">exception</name></name></expr></argument>,

                                     <argument pos:start="149:38" pos:end="149:47"><expr pos:start="149:38" pos:end="149:47"><name pos:start="149:38" pos:end="149:47">exc_secure</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="149:51" pos:end="183:5">{<block_content pos:start="151:5" pos:end="181:31">

    <case pos:start="151:5" pos:end="151:12">case <expr pos:start="151:10" pos:end="151:11"><operator pos:start="151:10" pos:end="151:10">-</operator><literal type="number" pos:start="151:11" pos:end="151:11">1</literal></expr>:</case>

        <comment type="block" pos:start="153:9" pos:end="153:60">/* attempt to exit an exception that isn't active */</comment>

        <expr_stmt pos:start="155:9" pos:end="155:22"><expr pos:start="155:9" pos:end="155:21"><name pos:start="155:9" pos:end="155:14">ufault</name> <operator pos:start="155:16" pos:end="155:16">=</operator> <name pos:start="155:18" pos:end="155:21">true</name></expr>;</expr_stmt>

        <break pos:start="157:9" pos:end="157:14">break;</break>

    <case pos:start="159:5" pos:end="159:11">case <expr pos:start="159:10" pos:end="159:10"><literal type="number" pos:start="159:10" pos:end="159:10">0</literal></expr>:</case>

        <comment type="block" pos:start="161:9" pos:end="161:37">/* still an irq active now */</comment>

        <break pos:start="163:9" pos:end="163:14">break;</break>

    <case pos:start="165:5" pos:end="165:11">case <expr pos:start="165:10" pos:end="165:10"><literal type="number" pos:start="165:10" pos:end="165:10">1</literal></expr>:</case>

        <comment type="block" pos:start="167:9" pos:end="173:11">/* we returned to base exception level, no nesting.

         * (In the pseudocode this is written using "NestedActivation != 1"

         * where we have 'rettobase == false'.)

         */</comment>

        <expr_stmt pos:start="175:9" pos:end="175:25"><expr pos:start="175:9" pos:end="175:24"><name pos:start="175:9" pos:end="175:17">rettobase</name> <operator pos:start="175:19" pos:end="175:19">=</operator> <name pos:start="175:21" pos:end="175:24">true</name></expr>;</expr_stmt>

        <break pos:start="177:9" pos:end="177:14">break;</break>

    <default pos:start="179:5" pos:end="179:12">default:</default>

        <expr_stmt pos:start="181:9" pos:end="181:31"><expr pos:start="181:9" pos:end="181:30"><call pos:start="181:9" pos:end="181:30"><name pos:start="181:9" pos:end="181:28">g_assert_not_reached</name><argument_list pos:start="181:29" pos:end="181:30">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>



    <expr_stmt pos:start="187:5" pos:end="187:59"><expr pos:start="187:5" pos:end="187:58"><name pos:start="187:5" pos:end="187:21">return_to_handler</name> <operator pos:start="187:23" pos:end="187:23">=</operator> <operator pos:start="187:25" pos:end="187:25">!</operator><operator pos:start="187:26" pos:end="187:26">(</operator><name pos:start="187:27" pos:end="187:32">excret</name> <operator pos:start="187:34" pos:end="187:34">&amp;</operator> <name pos:start="187:36" pos:end="187:57">R_V7M_EXCRET_MODE_MASK</name><operator pos:start="187:58" pos:end="187:58">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="189:5" pos:end="189:60"><expr pos:start="189:5" pos:end="189:59"><name pos:start="189:5" pos:end="189:24">return_to_sp_process</name> <operator pos:start="189:26" pos:end="189:26">=</operator> <name pos:start="189:28" pos:end="189:33">excret</name> <operator pos:start="189:35" pos:end="189:35">&amp;</operator> <name pos:start="189:37" pos:end="189:59">R_V7M_EXCRET_SPSEL_MASK</name></expr>;</expr_stmt>

    <expr_stmt pos:start="191:5" pos:end="193:39"><expr pos:start="191:5" pos:end="193:38"><name pos:start="191:5" pos:end="191:20">return_to_secure</name> <operator pos:start="191:22" pos:end="191:22">=</operator> <call pos:start="191:24" pos:end="191:63"><name pos:start="191:24" pos:end="191:34">arm_feature</name><argument_list pos:start="191:35" pos:end="191:63">(<argument pos:start="191:36" pos:end="191:38"><expr pos:start="191:36" pos:end="191:38"><name pos:start="191:36" pos:end="191:38">env</name></expr></argument>, <argument pos:start="191:41" pos:end="191:62"><expr pos:start="191:41" pos:end="191:62"><name pos:start="191:41" pos:end="191:62">ARM_FEATURE_M_SECURITY</name></expr></argument>)</argument_list></call> <operator pos:start="191:65" pos:end="191:66">&amp;&amp;</operator>

        <operator pos:start="193:9" pos:end="193:9">(</operator><name pos:start="193:10" pos:end="193:15">excret</name> <operator pos:start="193:17" pos:end="193:17">&amp;</operator> <name pos:start="193:19" pos:end="193:37">R_V7M_EXCRET_S_MASK</name><operator pos:start="193:38" pos:end="193:38">)</operator></expr>;</expr_stmt>



    <if_stmt pos:start="197:5" pos:end="263:5"><if pos:start="197:5" pos:end="225:5">if <condition pos:start="197:8" pos:end="197:41">(<expr pos:start="197:9" pos:end="197:40"><call pos:start="197:9" pos:end="197:40"><name pos:start="197:9" pos:end="197:19">arm_feature</name><argument_list pos:start="197:20" pos:end="197:40">(<argument pos:start="197:21" pos:end="197:23"><expr pos:start="197:21" pos:end="197:23"><name pos:start="197:21" pos:end="197:23">env</name></expr></argument>, <argument pos:start="197:26" pos:end="197:39"><expr pos:start="197:26" pos:end="197:39"><name pos:start="197:26" pos:end="197:39">ARM_FEATURE_V8</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="197:43" pos:end="225:5">{<block_content pos:start="199:9" pos:end="223:9">

        <if_stmt pos:start="199:9" pos:end="217:9"><if pos:start="199:9" pos:end="217:9">if <condition pos:start="199:12" pos:end="199:54">(<expr pos:start="199:13" pos:end="199:53"><operator pos:start="199:13" pos:end="199:13">!</operator><call pos:start="199:14" pos:end="199:53"><name pos:start="199:14" pos:end="199:24">arm_feature</name><argument_list pos:start="199:25" pos:end="199:53">(<argument pos:start="199:26" pos:end="199:28"><expr pos:start="199:26" pos:end="199:28"><name pos:start="199:26" pos:end="199:28">env</name></expr></argument>, <argument pos:start="199:31" pos:end="199:52"><expr pos:start="199:31" pos:end="199:52"><name pos:start="199:31" pos:end="199:52">ARM_FEATURE_M_SECURITY</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="199:56" pos:end="217:9">{<block_content pos:start="207:13" pos:end="215:13">

            <comment type="block" pos:start="201:13" pos:end="205:15">/* UNPREDICTABLE if S == 1 or DCRS == 0 or ES == 1 (R_XLCP);

             * we choose to take the UsageFault.

             */</comment>

            <if_stmt pos:start="207:13" pos:end="215:13"><if pos:start="207:13" pos:end="215:13">if <condition pos:start="207:16" pos:end="211:51">(<expr pos:start="207:17" pos:end="211:50"><operator pos:start="207:17" pos:end="207:17">(</operator><name pos:start="207:18" pos:end="207:23">excret</name> <operator pos:start="207:25" pos:end="207:25">&amp;</operator> <name pos:start="207:27" pos:end="207:45">R_V7M_EXCRET_S_MASK</name><operator pos:start="207:46" pos:end="207:46">)</operator> <operator pos:start="207:48" pos:end="207:49">||</operator>

                <operator pos:start="209:17" pos:end="209:17">(</operator><name pos:start="209:18" pos:end="209:23">excret</name> <operator pos:start="209:25" pos:end="209:25">&amp;</operator> <name pos:start="209:27" pos:end="209:46">R_V7M_EXCRET_ES_MASK</name><operator pos:start="209:47" pos:end="209:47">)</operator> <operator pos:start="209:49" pos:end="209:50">||</operator>

                <operator pos:start="211:17" pos:end="211:17">!</operator><operator pos:start="211:18" pos:end="211:18">(</operator><name pos:start="211:19" pos:end="211:24">excret</name> <operator pos:start="211:26" pos:end="211:26">&amp;</operator> <name pos:start="211:28" pos:end="211:49">R_V7M_EXCRET_DCRS_MASK</name><operator pos:start="211:50" pos:end="211:50">)</operator></expr>)</condition> <block pos:start="211:53" pos:end="215:13">{<block_content pos:start="213:17" pos:end="213:30">

                <expr_stmt pos:start="213:17" pos:end="213:30"><expr pos:start="213:17" pos:end="213:29"><name pos:start="213:17" pos:end="213:22">ufault</name> <operator pos:start="213:24" pos:end="213:24">=</operator> <name pos:start="213:26" pos:end="213:29">true</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="219:9" pos:end="223:9"><if pos:start="219:9" pos:end="223:9">if <condition pos:start="219:12" pos:end="219:44">(<expr pos:start="219:13" pos:end="219:43"><name pos:start="219:13" pos:end="219:18">excret</name> <operator pos:start="219:20" pos:end="219:20">&amp;</operator> <name pos:start="219:22" pos:end="219:43">R_V7M_EXCRET_RES0_MASK</name></expr>)</condition> <block pos:start="219:46" pos:end="223:9">{<block_content pos:start="221:13" pos:end="221:26">

            <expr_stmt pos:start="221:13" pos:end="221:26"><expr pos:start="221:13" pos:end="221:25"><name pos:start="221:13" pos:end="221:18">ufault</name> <operator pos:start="221:20" pos:end="221:20">=</operator> <name pos:start="221:22" pos:end="221:25">true</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="225:7" pos:end="263:5">else <block pos:start="225:12" pos:end="263:5">{<block_content pos:start="229:9" pos:end="261:9">

        <comment type="block" pos:start="227:9" pos:end="227:76">/* For v7M we only recognize certain combinations of the low bits */</comment>

        <switch pos:start="229:9" pos:end="261:9">switch <condition pos:start="229:16" pos:end="229:29">(<expr pos:start="229:17" pos:end="229:28"><name pos:start="229:17" pos:end="229:22">excret</name> <operator pos:start="229:24" pos:end="229:24">&amp;</operator> <literal type="number" pos:start="229:26" pos:end="229:28">0xf</literal></expr>)</condition> <block pos:start="229:31" pos:end="261:9">{<block_content pos:start="231:9" pos:end="259:26">

        <case pos:start="231:9" pos:end="231:15">case <expr pos:start="231:14" pos:end="231:14"><literal type="number" pos:start="231:14" pos:end="231:14">1</literal></expr>:</case> <comment type="block" pos:start="231:17" pos:end="231:39">/* Return to Handler */</comment>

            <break pos:start="233:13" pos:end="233:18">break;</break>

        <case pos:start="235:9" pos:end="235:16">case <expr pos:start="235:14" pos:end="235:15"><literal type="number" pos:start="235:14" pos:end="235:15">13</literal></expr>:</case> <comment type="block" pos:start="235:18" pos:end="235:59">/* Return to Thread using Process stack */</comment>

        <case pos:start="237:9" pos:end="237:15">case <expr pos:start="237:14" pos:end="237:14"><literal type="number" pos:start="237:14" pos:end="237:14">9</literal></expr>:</case> <comment type="block" pos:start="237:17" pos:end="237:55">/* Return to Thread using Main stack */</comment>

            <comment type="block" pos:start="239:13" pos:end="243:15">/* We only need to check NONBASETHRDENA for v7M, because in

             * v8M this bit does not exist (it is RES1).

             */</comment>

            <if_stmt pos:start="245:13" pos:end="253:13"><if pos:start="245:13" pos:end="253:13">if <condition pos:start="245:16" pos:end="249:49">(<expr pos:start="245:17" pos:end="249:48"><operator pos:start="245:17" pos:end="245:17">!</operator><name pos:start="245:18" pos:end="245:26">rettobase</name> <operator pos:start="245:28" pos:end="245:29">&amp;&amp;</operator>

                <operator pos:start="247:17" pos:end="247:17">!</operator><operator pos:start="247:18" pos:end="247:18">(</operator><name pos:start="247:19" pos:end="247:47"><name pos:start="247:19" pos:end="247:21">env</name><operator pos:start="247:22" pos:end="247:23">-&gt;</operator><name pos:start="247:24" pos:end="247:26">v7m</name><operator pos:start="247:27" pos:end="247:27">.</operator><name pos:start="247:28" pos:end="247:30">ccr</name><index pos:start="247:31" pos:end="247:47">[<expr pos:start="247:32" pos:end="247:46"><name pos:start="247:32" pos:end="247:46"><name pos:start="247:32" pos:end="247:34">env</name><operator pos:start="247:35" pos:end="247:36">-&gt;</operator><name pos:start="247:37" pos:end="247:39">v7m</name><operator pos:start="247:40" pos:end="247:40">.</operator><name pos:start="247:41" pos:end="247:46">secure</name></name></expr>]</index></name> <operator pos:start="247:49" pos:end="247:49">&amp;</operator>

                  <name pos:start="249:19" pos:end="249:47">R_V7M_CCR_NONBASETHRDENA_MASK</name><operator pos:start="249:48" pos:end="249:48">)</operator></expr>)</condition> <block pos:start="249:51" pos:end="253:13">{<block_content pos:start="251:17" pos:end="251:30">

                <expr_stmt pos:start="251:17" pos:end="251:30"><expr pos:start="251:17" pos:end="251:29"><name pos:start="251:17" pos:end="251:22">ufault</name> <operator pos:start="251:24" pos:end="251:24">=</operator> <name pos:start="251:26" pos:end="251:29">true</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="255:13" pos:end="255:18">break;</break>

        <default pos:start="257:9" pos:end="257:16">default:</default>

            <expr_stmt pos:start="259:13" pos:end="259:26"><expr pos:start="259:13" pos:end="259:25"><name pos:start="259:13" pos:end="259:18">ufault</name> <operator pos:start="259:20" pos:end="259:20">=</operator> <name pos:start="259:22" pos:end="259:25">true</name></expr>;</expr_stmt>

        </block_content>}</block></switch>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="267:5" pos:end="281:5"><if pos:start="267:5" pos:end="281:5">if <condition pos:start="267:8" pos:end="267:15">(<expr pos:start="267:9" pos:end="267:14"><name pos:start="267:9" pos:end="267:14">sfault</name></expr>)</condition> <block pos:start="267:17" pos:end="281:5">{<block_content pos:start="269:9" pos:end="279:15">

        <expr_stmt pos:start="269:9" pos:end="269:47"><expr pos:start="269:9" pos:end="269:46"><name pos:start="269:9" pos:end="269:21"><name pos:start="269:9" pos:end="269:11">env</name><operator pos:start="269:12" pos:end="269:13">-&gt;</operator><name pos:start="269:14" pos:end="269:16">v7m</name><operator pos:start="269:17" pos:end="269:17">.</operator><name pos:start="269:18" pos:end="269:21">sfsr</name></name> <operator pos:start="269:23" pos:end="269:24">|=</operator> <name pos:start="269:26" pos:end="269:46">R_V7M_SFSR_INVER_MASK</name></expr>;</expr_stmt>

        <expr_stmt pos:start="271:9" pos:end="271:70"><expr pos:start="271:9" pos:end="271:69"><call pos:start="271:9" pos:end="271:69"><name pos:start="271:9" pos:end="271:31">armv7m_nvic_set_pending</name><argument_list pos:start="271:32" pos:end="271:69">(<argument pos:start="271:33" pos:end="271:41"><expr pos:start="271:33" pos:end="271:41"><name pos:start="271:33" pos:end="271:41"><name pos:start="271:33" pos:end="271:35">env</name><operator pos:start="271:36" pos:end="271:37">-&gt;</operator><name pos:start="271:38" pos:end="271:41">nvic</name></name></expr></argument>, <argument pos:start="271:44" pos:end="271:61"><expr pos:start="271:44" pos:end="271:61"><name pos:start="271:44" pos:end="271:61">ARMV7M_EXCP_SECURE</name></expr></argument>, <argument pos:start="271:64" pos:end="271:68"><expr pos:start="271:64" pos:end="271:68"><name pos:start="271:64" pos:end="271:68">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="273:9" pos:end="273:41"><expr pos:start="273:9" pos:end="273:40"><call pos:start="273:9" pos:end="273:40"><name pos:start="273:9" pos:end="273:27">v7m_exception_taken</name><argument_list pos:start="273:28" pos:end="273:40">(<argument pos:start="273:29" pos:end="273:31"><expr pos:start="273:29" pos:end="273:31"><name pos:start="273:29" pos:end="273:31">cpu</name></expr></argument>, <argument pos:start="273:34" pos:end="273:39"><expr pos:start="273:34" pos:end="273:39"><name pos:start="273:34" pos:end="273:39">excret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="275:9" pos:end="277:75"><expr pos:start="275:9" pos:end="277:74"><call pos:start="275:9" pos:end="277:74"><name pos:start="275:9" pos:end="275:21">qemu_log_mask</name><argument_list pos:start="275:22" pos:end="277:74">(<argument pos:start="275:23" pos:end="275:33"><expr pos:start="275:23" pos:end="275:33"><name pos:start="275:23" pos:end="275:33">CPU_LOG_INT</name></expr></argument>, <argument pos:start="275:36" pos:end="277:73"><expr pos:start="275:36" pos:end="277:73"><literal type="string" pos:start="275:36" pos:end="275:71">"...taking SecureFault on existing "</literal>

                      <literal type="string" pos:start="277:23" pos:end="277:73">"stackframe: failed EXC_RETURN.ES validity check\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="279:9" pos:end="279:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="285:5" pos:end="305:5"><if pos:start="285:5" pos:end="305:5">if <condition pos:start="285:8" pos:end="285:15">(<expr pos:start="285:9" pos:end="285:14"><name pos:start="285:9" pos:end="285:14">ufault</name></expr>)</condition> <block pos:start="285:17" pos:end="305:5">{<block_content pos:start="293:9" pos:end="303:15">

        <comment type="block" pos:start="287:9" pos:end="291:11">/* Bad exception return: instead of popping the exception

         * stack, directly take a usage fault on the current stack.

         */</comment>

        <expr_stmt pos:start="293:9" pos:end="293:64"><expr pos:start="293:9" pos:end="293:63"><name pos:start="293:9" pos:end="293:38"><name pos:start="293:9" pos:end="293:11">env</name><operator pos:start="293:12" pos:end="293:13">-&gt;</operator><name pos:start="293:14" pos:end="293:16">v7m</name><operator pos:start="293:17" pos:end="293:17">.</operator><name pos:start="293:18" pos:end="293:21">cfsr</name><index pos:start="293:22" pos:end="293:38">[<expr pos:start="293:23" pos:end="293:37"><name pos:start="293:23" pos:end="293:37"><name pos:start="293:23" pos:end="293:25">env</name><operator pos:start="293:26" pos:end="293:27">-&gt;</operator><name pos:start="293:28" pos:end="293:30">v7m</name><operator pos:start="293:31" pos:end="293:31">.</operator><name pos:start="293:32" pos:end="293:37">secure</name></name></expr>]</index></name> <operator pos:start="293:40" pos:end="293:41">|=</operator> <name pos:start="293:43" pos:end="293:63">R_V7M_CFSR_INVPC_MASK</name></expr>;</expr_stmt>

        <expr_stmt pos:start="295:9" pos:end="295:79"><expr pos:start="295:9" pos:end="295:78"><call pos:start="295:9" pos:end="295:78"><name pos:start="295:9" pos:end="295:31">armv7m_nvic_set_pending</name><argument_list pos:start="295:32" pos:end="295:78">(<argument pos:start="295:33" pos:end="295:41"><expr pos:start="295:33" pos:end="295:41"><name pos:start="295:33" pos:end="295:41"><name pos:start="295:33" pos:end="295:35">env</name><operator pos:start="295:36" pos:end="295:37">-&gt;</operator><name pos:start="295:38" pos:end="295:41">nvic</name></name></expr></argument>, <argument pos:start="295:44" pos:end="295:60"><expr pos:start="295:44" pos:end="295:60"><name pos:start="295:44" pos:end="295:60">ARMV7M_EXCP_USAGE</name></expr></argument>, <argument pos:start="295:63" pos:end="295:77"><expr pos:start="295:63" pos:end="295:77"><name pos:start="295:63" pos:end="295:77"><name pos:start="295:63" pos:end="295:65">env</name><operator pos:start="295:66" pos:end="295:67">-&gt;</operator><name pos:start="295:68" pos:end="295:70">v7m</name><operator pos:start="295:71" pos:end="295:71">.</operator><name pos:start="295:72" pos:end="295:77">secure</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="297:9" pos:end="297:41"><expr pos:start="297:9" pos:end="297:40"><call pos:start="297:9" pos:end="297:40"><name pos:start="297:9" pos:end="297:27">v7m_exception_taken</name><argument_list pos:start="297:28" pos:end="297:40">(<argument pos:start="297:29" pos:end="297:31"><expr pos:start="297:29" pos:end="297:31"><name pos:start="297:29" pos:end="297:31">cpu</name></expr></argument>, <argument pos:start="297:34" pos:end="297:39"><expr pos:start="297:34" pos:end="297:39"><name pos:start="297:34" pos:end="297:39">excret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="299:9" pos:end="301:79"><expr pos:start="299:9" pos:end="301:78"><call pos:start="299:9" pos:end="301:78"><name pos:start="299:9" pos:end="299:21">qemu_log_mask</name><argument_list pos:start="299:22" pos:end="301:78">(<argument pos:start="299:23" pos:end="299:33"><expr pos:start="299:23" pos:end="299:33"><name pos:start="299:23" pos:end="299:33">CPU_LOG_INT</name></expr></argument>, <argument pos:start="299:36" pos:end="301:77"><expr pos:start="299:36" pos:end="301:77"><literal type="string" pos:start="299:36" pos:end="299:70">"...taking UsageFault on existing "</literal>

                      <literal type="string" pos:start="301:23" pos:end="301:77">"stackframe: failed exception return integrity check\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="303:9" pos:end="303:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="309:5" pos:end="315:7">/* Set CONTROL.SPSEL from excret.SPSEL. Since we're still in

     * Handler mode (and will be until we write the new XPSR.Interrupt

     * field) this does not switch around the current stack pointer.

     */</comment>

    <expr_stmt pos:start="317:5" pos:end="317:80"><expr pos:start="317:5" pos:end="317:79"><call pos:start="317:5" pos:end="317:79"><name pos:start="317:5" pos:end="317:40">write_v7m_control_spsel_for_secstate</name><argument_list pos:start="317:41" pos:end="317:79">(<argument pos:start="317:42" pos:end="317:44"><expr pos:start="317:42" pos:end="317:44"><name pos:start="317:42" pos:end="317:44">env</name></expr></argument>, <argument pos:start="317:47" pos:end="317:66"><expr pos:start="317:47" pos:end="317:66"><name pos:start="317:47" pos:end="317:66">return_to_sp_process</name></expr></argument>, <argument pos:start="317:69" pos:end="317:78"><expr pos:start="317:69" pos:end="317:78"><name pos:start="317:69" pos:end="317:78">exc_secure</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="321:5" pos:end="321:53"><expr pos:start="321:5" pos:end="321:52"><call pos:start="321:5" pos:end="321:52"><name pos:start="321:5" pos:end="321:29">switch_v7m_security_state</name><argument_list pos:start="321:30" pos:end="321:52">(<argument pos:start="321:31" pos:end="321:33"><expr pos:start="321:31" pos:end="321:33"><name pos:start="321:31" pos:end="321:33">env</name></expr></argument>, <argument pos:start="321:36" pos:end="321:51"><expr pos:start="321:36" pos:end="321:51"><name pos:start="321:36" pos:end="321:51">return_to_secure</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <block pos:start="325:5" pos:end="563:5">{<block_content pos:start="345:9" pos:end="561:31">

        <comment type="block" pos:start="327:9" pos:end="343:11">/* The stack pointer we should be reading the exception frame from

         * depends on bits in the magic exception return type value (and

         * for v8M isn't necessarily the stack pointer we will eventually

         * end up resuming execution with). Get a pointer to the location

         * in the CPU state struct where the SP we need is currently being

         * stored; we will use and modify it in place.

         * We use this limited C variable scope so we don't accidentally

         * use 'frame_sp_p' after we do something that makes it invalid.

         */</comment>

        <decl_stmt pos:start="345:9" pos:end="351:68"><decl pos:start="345:9" pos:end="351:67"><type pos:start="345:9" pos:end="345:18"><name pos:start="345:9" pos:end="345:16">uint32_t</name> <modifier pos:start="345:18" pos:end="345:18">*</modifier></type><name pos:start="345:19" pos:end="345:28">frame_sp_p</name> <init pos:start="345:30" pos:end="351:67">= <expr pos:start="345:32" pos:end="351:67"><call pos:start="345:32" pos:end="351:67"><name pos:start="345:32" pos:end="345:45">get_v7m_sp_ptr</name><argument_list pos:start="345:46" pos:end="351:67">(<argument pos:start="345:47" pos:end="345:49"><expr pos:start="345:47" pos:end="345:49"><name pos:start="345:47" pos:end="345:49">env</name></expr></argument>,

                                              <argument pos:start="347:47" pos:end="347:62"><expr pos:start="347:47" pos:end="347:62"><name pos:start="347:47" pos:end="347:62">return_to_secure</name></expr></argument>,

                                              <argument pos:start="349:47" pos:end="349:64"><expr pos:start="349:47" pos:end="349:64"><operator pos:start="349:47" pos:end="349:47">!</operator><name pos:start="349:48" pos:end="349:64">return_to_handler</name></expr></argument>,

                                              <argument pos:start="351:47" pos:end="351:66"><expr pos:start="351:47" pos:end="351:66"><name pos:start="351:47" pos:end="351:66">return_to_sp_process</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="353:9" pos:end="353:40"><decl pos:start="353:9" pos:end="353:39"><type pos:start="353:9" pos:end="353:16"><name pos:start="353:9" pos:end="353:16">uint32_t</name></type> <name pos:start="353:18" pos:end="353:25">frameptr</name> <init pos:start="353:27" pos:end="353:39">= <expr pos:start="353:29" pos:end="353:39"><operator pos:start="353:29" pos:end="353:29">*</operator><name pos:start="353:30" pos:end="353:39">frame_sp_p</name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="357:9" pos:end="367:9"><if pos:start="357:9" pos:end="367:9">if <condition pos:start="357:12" pos:end="359:45">(<expr pos:start="357:13" pos:end="359:44"><operator pos:start="357:13" pos:end="357:13">!</operator><call pos:start="357:14" pos:end="357:41"><name pos:start="357:14" pos:end="357:28">QEMU_IS_ALIGNED</name><argument_list pos:start="357:29" pos:end="357:41">(<argument pos:start="357:30" pos:end="357:37"><expr pos:start="357:30" pos:end="357:37"><name pos:start="357:30" pos:end="357:37">frameptr</name></expr></argument>, <argument pos:start="357:40" pos:end="357:40"><expr pos:start="357:40" pos:end="357:40"><literal type="number" pos:start="357:40" pos:end="357:40">8</literal></expr></argument>)</argument_list></call> <operator pos:start="357:43" pos:end="357:44">&amp;&amp;</operator>

            <call pos:start="359:13" pos:end="359:44"><name pos:start="359:13" pos:end="359:23">arm_feature</name><argument_list pos:start="359:24" pos:end="359:44">(<argument pos:start="359:25" pos:end="359:27"><expr pos:start="359:25" pos:end="359:27"><name pos:start="359:25" pos:end="359:27">env</name></expr></argument>, <argument pos:start="359:30" pos:end="359:43"><expr pos:start="359:30" pos:end="359:43"><name pos:start="359:30" pos:end="359:43">ARM_FEATURE_V8</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="359:47" pos:end="367:9">{<block_content pos:start="361:13" pos:end="365:70">

            <expr_stmt pos:start="361:13" pos:end="365:70"><expr pos:start="361:13" pos:end="365:69"><call pos:start="361:13" pos:end="365:69"><name pos:start="361:13" pos:end="361:25">qemu_log_mask</name><argument_list pos:start="361:26" pos:end="365:69">(<argument pos:start="361:27" pos:end="361:41"><expr pos:start="361:27" pos:end="361:41"><name pos:start="361:27" pos:end="361:41">LOG_GUEST_ERROR</name></expr></argument>,

                          <argument pos:start="363:27" pos:end="365:68"><expr pos:start="363:27" pos:end="365:68"><literal type="string" pos:start="363:27" pos:end="363:77">"M profile exception return with non-8-aligned SP "</literal>

                          <literal type="string" pos:start="365:27" pos:end="365:68">"for destination state is UNPREDICTABLE\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="371:9" pos:end="371:55">/* Do we need to pop callee-saved registers? */</comment>

        <if_stmt pos:start="373:9" pos:end="427:9"><if pos:start="373:9" pos:end="427:9">if <condition pos:start="373:12" pos:end="377:53">(<expr pos:start="373:13" pos:end="377:52"><name pos:start="373:13" pos:end="373:28">return_to_secure</name> <operator pos:start="373:30" pos:end="373:31">&amp;&amp;</operator>

            <operator pos:start="375:13" pos:end="375:13">(</operator><operator pos:start="375:14" pos:end="375:14">(</operator><name pos:start="375:15" pos:end="375:20">excret</name> <operator pos:start="375:22" pos:end="375:22">&amp;</operator> <name pos:start="375:24" pos:end="375:43">R_V7M_EXCRET_ES_MASK</name><operator pos:start="375:44" pos:end="375:44">)</operator> <operator pos:start="375:46" pos:end="375:47">==</operator> <literal type="number" pos:start="375:49" pos:end="375:49">0</literal> <operator pos:start="375:51" pos:end="375:52">||</operator>

             <operator pos:start="377:14" pos:end="377:14">(</operator><name pos:start="377:15" pos:end="377:20">excret</name> <operator pos:start="377:22" pos:end="377:22">&amp;</operator> <name pos:start="377:24" pos:end="377:45">R_V7M_EXCRET_DCRS_MASK</name><operator pos:start="377:46" pos:end="377:46">)</operator> <operator pos:start="377:48" pos:end="377:49">==</operator> <literal type="number" pos:start="377:51" pos:end="377:51">0</literal><operator pos:start="377:52" pos:end="377:52">)</operator></expr>)</condition> <block pos:start="377:55" pos:end="427:9">{<block_content pos:start="379:13" pos:end="425:29">

            <decl_stmt pos:start="379:13" pos:end="379:47"><decl pos:start="379:13" pos:end="379:46"><type pos:start="379:13" pos:end="379:20"><name pos:start="379:13" pos:end="379:20">uint32_t</name></type> <name pos:start="379:22" pos:end="379:33">expected_sig</name> <init pos:start="379:35" pos:end="379:46">= <expr pos:start="379:37" pos:end="379:46"><literal type="number" pos:start="379:37" pos:end="379:46">0xfefa125b</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="381:13" pos:end="381:61"><decl pos:start="381:13" pos:end="381:60"><type pos:start="381:13" pos:end="381:20"><name pos:start="381:13" pos:end="381:20">uint32_t</name></type> <name pos:start="381:22" pos:end="381:31">actual_sig</name> <init pos:start="381:33" pos:end="381:60">= <expr pos:start="381:35" pos:end="381:60"><call pos:start="381:35" pos:end="381:60"><name pos:start="381:35" pos:end="381:42">ldl_phys</name><argument_list pos:start="381:43" pos:end="381:60">(<argument pos:start="381:44" pos:end="381:49"><expr pos:start="381:44" pos:end="381:49"><name pos:start="381:44" pos:end="381:49"><name pos:start="381:44" pos:end="381:45">cs</name><operator pos:start="381:46" pos:end="381:47">-&gt;</operator><name pos:start="381:48" pos:end="381:49">as</name></name></expr></argument>, <argument pos:start="381:52" pos:end="381:59"><expr pos:start="381:52" pos:end="381:59"><name pos:start="381:52" pos:end="381:59">frameptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="385:13" pos:end="403:13"><if pos:start="385:13" pos:end="403:13">if <condition pos:start="385:16" pos:end="385:43">(<expr pos:start="385:17" pos:end="385:42"><name pos:start="385:17" pos:end="385:28">expected_sig</name> <operator pos:start="385:30" pos:end="385:31">!=</operator> <name pos:start="385:33" pos:end="385:42">actual_sig</name></expr>)</condition> <block pos:start="385:45" pos:end="403:13">{<block_content pos:start="389:17" pos:end="401:23">

                <comment type="block" pos:start="387:17" pos:end="387:61">/* Take a SecureFault on the current stack */</comment>

                <expr_stmt pos:start="389:17" pos:end="389:55"><expr pos:start="389:17" pos:end="389:54"><name pos:start="389:17" pos:end="389:29"><name pos:start="389:17" pos:end="389:19">env</name><operator pos:start="389:20" pos:end="389:21">-&gt;</operator><name pos:start="389:22" pos:end="389:24">v7m</name><operator pos:start="389:25" pos:end="389:25">.</operator><name pos:start="389:26" pos:end="389:29">sfsr</name></name> <operator pos:start="389:31" pos:end="389:32">|=</operator> <name pos:start="389:34" pos:end="389:54">R_V7M_SFSR_INVIS_MASK</name></expr>;</expr_stmt>

                <expr_stmt pos:start="391:17" pos:end="391:78"><expr pos:start="391:17" pos:end="391:77"><call pos:start="391:17" pos:end="391:77"><name pos:start="391:17" pos:end="391:39">armv7m_nvic_set_pending</name><argument_list pos:start="391:40" pos:end="391:77">(<argument pos:start="391:41" pos:end="391:49"><expr pos:start="391:41" pos:end="391:49"><name pos:start="391:41" pos:end="391:49"><name pos:start="391:41" pos:end="391:43">env</name><operator pos:start="391:44" pos:end="391:45">-&gt;</operator><name pos:start="391:46" pos:end="391:49">nvic</name></name></expr></argument>, <argument pos:start="391:52" pos:end="391:69"><expr pos:start="391:52" pos:end="391:69"><name pos:start="391:52" pos:end="391:69">ARMV7M_EXCP_SECURE</name></expr></argument>, <argument pos:start="391:72" pos:end="391:76"><expr pos:start="391:72" pos:end="391:76"><name pos:start="391:72" pos:end="391:76">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="393:17" pos:end="393:49"><expr pos:start="393:17" pos:end="393:48"><call pos:start="393:17" pos:end="393:48"><name pos:start="393:17" pos:end="393:35">v7m_exception_taken</name><argument_list pos:start="393:36" pos:end="393:48">(<argument pos:start="393:37" pos:end="393:39"><expr pos:start="393:37" pos:end="393:39"><name pos:start="393:37" pos:end="393:39">cpu</name></expr></argument>, <argument pos:start="393:42" pos:end="393:47"><expr pos:start="393:42" pos:end="393:47"><name pos:start="393:42" pos:end="393:47">excret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="395:17" pos:end="399:51"><expr pos:start="395:17" pos:end="399:50"><call pos:start="395:17" pos:end="399:50"><name pos:start="395:17" pos:end="395:29">qemu_log_mask</name><argument_list pos:start="395:30" pos:end="399:50">(<argument pos:start="395:31" pos:end="395:41"><expr pos:start="395:31" pos:end="395:41"><name pos:start="395:31" pos:end="395:41">CPU_LOG_INT</name></expr></argument>, <argument pos:start="395:44" pos:end="399:49"><expr pos:start="395:44" pos:end="399:49"><literal type="string" pos:start="395:44" pos:end="395:79">"...taking SecureFault on existing "</literal>

                              <literal type="string" pos:start="397:31" pos:end="397:78">"stackframe: failed exception return integrity "</literal>

                              <literal type="string" pos:start="399:31" pos:end="399:49">"signature check\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="401:17" pos:end="401:23">return;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="407:13" pos:end="407:60"><expr pos:start="407:13" pos:end="407:59"><name pos:start="407:13" pos:end="407:24"><name pos:start="407:13" pos:end="407:15">env</name><operator pos:start="407:16" pos:end="407:17">-&gt;</operator><name pos:start="407:18" pos:end="407:21">regs</name><index pos:start="407:22" pos:end="407:24">[<expr pos:start="407:23" pos:end="407:23"><literal type="number" pos:start="407:23" pos:end="407:23">4</literal></expr>]</index></name> <operator pos:start="407:26" pos:end="407:26">=</operator> <call pos:start="407:28" pos:end="407:59"><name pos:start="407:28" pos:end="407:35">ldl_phys</name><argument_list pos:start="407:36" pos:end="407:59">(<argument pos:start="407:37" pos:end="407:42"><expr pos:start="407:37" pos:end="407:42"><name pos:start="407:37" pos:end="407:42"><name pos:start="407:37" pos:end="407:38">cs</name><operator pos:start="407:39" pos:end="407:40">-&gt;</operator><name pos:start="407:41" pos:end="407:42">as</name></name></expr></argument>, <argument pos:start="407:45" pos:end="407:58"><expr pos:start="407:45" pos:end="407:58"><name pos:start="407:45" pos:end="407:52">frameptr</name> <operator pos:start="407:54" pos:end="407:54">+</operator> <literal type="number" pos:start="407:56" pos:end="407:58">0x8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="409:13" pos:end="409:60"><expr pos:start="409:13" pos:end="409:59"><name pos:start="409:13" pos:end="409:24"><name pos:start="409:13" pos:end="409:15">env</name><operator pos:start="409:16" pos:end="409:17">-&gt;</operator><name pos:start="409:18" pos:end="409:21">regs</name><index pos:start="409:22" pos:end="409:24">[<expr pos:start="409:23" pos:end="409:23"><literal type="number" pos:start="409:23" pos:end="409:23">5</literal></expr>]</index></name> <operator pos:start="409:26" pos:end="409:26">=</operator> <call pos:start="409:28" pos:end="409:59"><name pos:start="409:28" pos:end="409:35">ldl_phys</name><argument_list pos:start="409:36" pos:end="409:59">(<argument pos:start="409:37" pos:end="409:42"><expr pos:start="409:37" pos:end="409:42"><name pos:start="409:37" pos:end="409:42"><name pos:start="409:37" pos:end="409:38">cs</name><operator pos:start="409:39" pos:end="409:40">-&gt;</operator><name pos:start="409:41" pos:end="409:42">as</name></name></expr></argument>, <argument pos:start="409:45" pos:end="409:58"><expr pos:start="409:45" pos:end="409:58"><name pos:start="409:45" pos:end="409:52">frameptr</name> <operator pos:start="409:54" pos:end="409:54">+</operator> <literal type="number" pos:start="409:56" pos:end="409:58">0xc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="411:13" pos:end="411:61"><expr pos:start="411:13" pos:end="411:60"><name pos:start="411:13" pos:end="411:24"><name pos:start="411:13" pos:end="411:15">env</name><operator pos:start="411:16" pos:end="411:17">-&gt;</operator><name pos:start="411:18" pos:end="411:21">regs</name><index pos:start="411:22" pos:end="411:24">[<expr pos:start="411:23" pos:end="411:23"><literal type="number" pos:start="411:23" pos:end="411:23">6</literal></expr>]</index></name> <operator pos:start="411:26" pos:end="411:26">=</operator> <call pos:start="411:28" pos:end="411:60"><name pos:start="411:28" pos:end="411:35">ldl_phys</name><argument_list pos:start="411:36" pos:end="411:60">(<argument pos:start="411:37" pos:end="411:42"><expr pos:start="411:37" pos:end="411:42"><name pos:start="411:37" pos:end="411:42"><name pos:start="411:37" pos:end="411:38">cs</name><operator pos:start="411:39" pos:end="411:40">-&gt;</operator><name pos:start="411:41" pos:end="411:42">as</name></name></expr></argument>, <argument pos:start="411:45" pos:end="411:59"><expr pos:start="411:45" pos:end="411:59"><name pos:start="411:45" pos:end="411:52">frameptr</name> <operator pos:start="411:54" pos:end="411:54">+</operator> <literal type="number" pos:start="411:56" pos:end="411:59">0x10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="413:13" pos:end="413:61"><expr pos:start="413:13" pos:end="413:60"><name pos:start="413:13" pos:end="413:24"><name pos:start="413:13" pos:end="413:15">env</name><operator pos:start="413:16" pos:end="413:17">-&gt;</operator><name pos:start="413:18" pos:end="413:21">regs</name><index pos:start="413:22" pos:end="413:24">[<expr pos:start="413:23" pos:end="413:23"><literal type="number" pos:start="413:23" pos:end="413:23">7</literal></expr>]</index></name> <operator pos:start="413:26" pos:end="413:26">=</operator> <call pos:start="413:28" pos:end="413:60"><name pos:start="413:28" pos:end="413:35">ldl_phys</name><argument_list pos:start="413:36" pos:end="413:60">(<argument pos:start="413:37" pos:end="413:42"><expr pos:start="413:37" pos:end="413:42"><name pos:start="413:37" pos:end="413:42"><name pos:start="413:37" pos:end="413:38">cs</name><operator pos:start="413:39" pos:end="413:40">-&gt;</operator><name pos:start="413:41" pos:end="413:42">as</name></name></expr></argument>, <argument pos:start="413:45" pos:end="413:59"><expr pos:start="413:45" pos:end="413:59"><name pos:start="413:45" pos:end="413:52">frameptr</name> <operator pos:start="413:54" pos:end="413:54">+</operator> <literal type="number" pos:start="413:56" pos:end="413:59">0x14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="415:13" pos:end="415:61"><expr pos:start="415:13" pos:end="415:60"><name pos:start="415:13" pos:end="415:24"><name pos:start="415:13" pos:end="415:15">env</name><operator pos:start="415:16" pos:end="415:17">-&gt;</operator><name pos:start="415:18" pos:end="415:21">regs</name><index pos:start="415:22" pos:end="415:24">[<expr pos:start="415:23" pos:end="415:23"><literal type="number" pos:start="415:23" pos:end="415:23">8</literal></expr>]</index></name> <operator pos:start="415:26" pos:end="415:26">=</operator> <call pos:start="415:28" pos:end="415:60"><name pos:start="415:28" pos:end="415:35">ldl_phys</name><argument_list pos:start="415:36" pos:end="415:60">(<argument pos:start="415:37" pos:end="415:42"><expr pos:start="415:37" pos:end="415:42"><name pos:start="415:37" pos:end="415:42"><name pos:start="415:37" pos:end="415:38">cs</name><operator pos:start="415:39" pos:end="415:40">-&gt;</operator><name pos:start="415:41" pos:end="415:42">as</name></name></expr></argument>, <argument pos:start="415:45" pos:end="415:59"><expr pos:start="415:45" pos:end="415:59"><name pos:start="415:45" pos:end="415:52">frameptr</name> <operator pos:start="415:54" pos:end="415:54">+</operator> <literal type="number" pos:start="415:56" pos:end="415:59">0x18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="417:13" pos:end="417:61"><expr pos:start="417:13" pos:end="417:60"><name pos:start="417:13" pos:end="417:24"><name pos:start="417:13" pos:end="417:15">env</name><operator pos:start="417:16" pos:end="417:17">-&gt;</operator><name pos:start="417:18" pos:end="417:21">regs</name><index pos:start="417:22" pos:end="417:24">[<expr pos:start="417:23" pos:end="417:23"><literal type="number" pos:start="417:23" pos:end="417:23">9</literal></expr>]</index></name> <operator pos:start="417:26" pos:end="417:26">=</operator> <call pos:start="417:28" pos:end="417:60"><name pos:start="417:28" pos:end="417:35">ldl_phys</name><argument_list pos:start="417:36" pos:end="417:60">(<argument pos:start="417:37" pos:end="417:42"><expr pos:start="417:37" pos:end="417:42"><name pos:start="417:37" pos:end="417:42"><name pos:start="417:37" pos:end="417:38">cs</name><operator pos:start="417:39" pos:end="417:40">-&gt;</operator><name pos:start="417:41" pos:end="417:42">as</name></name></expr></argument>, <argument pos:start="417:45" pos:end="417:59"><expr pos:start="417:45" pos:end="417:59"><name pos:start="417:45" pos:end="417:52">frameptr</name> <operator pos:start="417:54" pos:end="417:54">+</operator> <literal type="number" pos:start="417:56" pos:end="417:59">0x1c</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="419:13" pos:end="419:62"><expr pos:start="419:13" pos:end="419:61"><name pos:start="419:13" pos:end="419:25"><name pos:start="419:13" pos:end="419:15">env</name><operator pos:start="419:16" pos:end="419:17">-&gt;</operator><name pos:start="419:18" pos:end="419:21">regs</name><index pos:start="419:22" pos:end="419:25">[<expr pos:start="419:23" pos:end="419:24"><literal type="number" pos:start="419:23" pos:end="419:24">10</literal></expr>]</index></name> <operator pos:start="419:27" pos:end="419:27">=</operator> <call pos:start="419:29" pos:end="419:61"><name pos:start="419:29" pos:end="419:36">ldl_phys</name><argument_list pos:start="419:37" pos:end="419:61">(<argument pos:start="419:38" pos:end="419:43"><expr pos:start="419:38" pos:end="419:43"><name pos:start="419:38" pos:end="419:43"><name pos:start="419:38" pos:end="419:39">cs</name><operator pos:start="419:40" pos:end="419:41">-&gt;</operator><name pos:start="419:42" pos:end="419:43">as</name></name></expr></argument>, <argument pos:start="419:46" pos:end="419:60"><expr pos:start="419:46" pos:end="419:60"><name pos:start="419:46" pos:end="419:53">frameptr</name> <operator pos:start="419:55" pos:end="419:55">+</operator> <literal type="number" pos:start="419:57" pos:end="419:60">0x20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="421:13" pos:end="421:62"><expr pos:start="421:13" pos:end="421:61"><name pos:start="421:13" pos:end="421:25"><name pos:start="421:13" pos:end="421:15">env</name><operator pos:start="421:16" pos:end="421:17">-&gt;</operator><name pos:start="421:18" pos:end="421:21">regs</name><index pos:start="421:22" pos:end="421:25">[<expr pos:start="421:23" pos:end="421:24"><literal type="number" pos:start="421:23" pos:end="421:24">11</literal></expr>]</index></name> <operator pos:start="421:27" pos:end="421:27">=</operator> <call pos:start="421:29" pos:end="421:61"><name pos:start="421:29" pos:end="421:36">ldl_phys</name><argument_list pos:start="421:37" pos:end="421:61">(<argument pos:start="421:38" pos:end="421:43"><expr pos:start="421:38" pos:end="421:43"><name pos:start="421:38" pos:end="421:43"><name pos:start="421:38" pos:end="421:39">cs</name><operator pos:start="421:40" pos:end="421:41">-&gt;</operator><name pos:start="421:42" pos:end="421:43">as</name></name></expr></argument>, <argument pos:start="421:46" pos:end="421:60"><expr pos:start="421:46" pos:end="421:60"><name pos:start="421:46" pos:end="421:53">frameptr</name> <operator pos:start="421:55" pos:end="421:55">+</operator> <literal type="number" pos:start="421:57" pos:end="421:60">0x24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="425:13" pos:end="425:29"><expr pos:start="425:13" pos:end="425:28"><name pos:start="425:13" pos:end="425:20">frameptr</name> <operator pos:start="425:22" pos:end="425:23">+=</operator> <literal type="number" pos:start="425:25" pos:end="425:28">0x28</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="431:9" pos:end="437:11">/* Pop registers. TODO: make these accesses use the correct

         * attributes and address space (S/NS, priv/unpriv) and handle

         * memory transaction failures.

         */</comment>

        <expr_stmt pos:start="439:9" pos:end="439:50"><expr pos:start="439:9" pos:end="439:49"><name pos:start="439:9" pos:end="439:20"><name pos:start="439:9" pos:end="439:11">env</name><operator pos:start="439:12" pos:end="439:13">-&gt;</operator><name pos:start="439:14" pos:end="439:17">regs</name><index pos:start="439:18" pos:end="439:20">[<expr pos:start="439:19" pos:end="439:19"><literal type="number" pos:start="439:19" pos:end="439:19">0</literal></expr>]</index></name> <operator pos:start="439:22" pos:end="439:22">=</operator> <call pos:start="439:24" pos:end="439:49"><name pos:start="439:24" pos:end="439:31">ldl_phys</name><argument_list pos:start="439:32" pos:end="439:49">(<argument pos:start="439:33" pos:end="439:38"><expr pos:start="439:33" pos:end="439:38"><name pos:start="439:33" pos:end="439:38"><name pos:start="439:33" pos:end="439:34">cs</name><operator pos:start="439:35" pos:end="439:36">-&gt;</operator><name pos:start="439:37" pos:end="439:38">as</name></name></expr></argument>, <argument pos:start="439:41" pos:end="439:48"><expr pos:start="439:41" pos:end="439:48"><name pos:start="439:41" pos:end="439:48">frameptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="441:9" pos:end="441:56"><expr pos:start="441:9" pos:end="441:55"><name pos:start="441:9" pos:end="441:20"><name pos:start="441:9" pos:end="441:11">env</name><operator pos:start="441:12" pos:end="441:13">-&gt;</operator><name pos:start="441:14" pos:end="441:17">regs</name><index pos:start="441:18" pos:end="441:20">[<expr pos:start="441:19" pos:end="441:19"><literal type="number" pos:start="441:19" pos:end="441:19">1</literal></expr>]</index></name> <operator pos:start="441:22" pos:end="441:22">=</operator> <call pos:start="441:24" pos:end="441:55"><name pos:start="441:24" pos:end="441:31">ldl_phys</name><argument_list pos:start="441:32" pos:end="441:55">(<argument pos:start="441:33" pos:end="441:38"><expr pos:start="441:33" pos:end="441:38"><name pos:start="441:33" pos:end="441:38"><name pos:start="441:33" pos:end="441:34">cs</name><operator pos:start="441:35" pos:end="441:36">-&gt;</operator><name pos:start="441:37" pos:end="441:38">as</name></name></expr></argument>, <argument pos:start="441:41" pos:end="441:54"><expr pos:start="441:41" pos:end="441:54"><name pos:start="441:41" pos:end="441:48">frameptr</name> <operator pos:start="441:50" pos:end="441:50">+</operator> <literal type="number" pos:start="441:52" pos:end="441:54">0x4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="443:9" pos:end="443:56"><expr pos:start="443:9" pos:end="443:55"><name pos:start="443:9" pos:end="443:20"><name pos:start="443:9" pos:end="443:11">env</name><operator pos:start="443:12" pos:end="443:13">-&gt;</operator><name pos:start="443:14" pos:end="443:17">regs</name><index pos:start="443:18" pos:end="443:20">[<expr pos:start="443:19" pos:end="443:19"><literal type="number" pos:start="443:19" pos:end="443:19">2</literal></expr>]</index></name> <operator pos:start="443:22" pos:end="443:22">=</operator> <call pos:start="443:24" pos:end="443:55"><name pos:start="443:24" pos:end="443:31">ldl_phys</name><argument_list pos:start="443:32" pos:end="443:55">(<argument pos:start="443:33" pos:end="443:38"><expr pos:start="443:33" pos:end="443:38"><name pos:start="443:33" pos:end="443:38"><name pos:start="443:33" pos:end="443:34">cs</name><operator pos:start="443:35" pos:end="443:36">-&gt;</operator><name pos:start="443:37" pos:end="443:38">as</name></name></expr></argument>, <argument pos:start="443:41" pos:end="443:54"><expr pos:start="443:41" pos:end="443:54"><name pos:start="443:41" pos:end="443:48">frameptr</name> <operator pos:start="443:50" pos:end="443:50">+</operator> <literal type="number" pos:start="443:52" pos:end="443:54">0x8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="445:9" pos:end="445:56"><expr pos:start="445:9" pos:end="445:55"><name pos:start="445:9" pos:end="445:20"><name pos:start="445:9" pos:end="445:11">env</name><operator pos:start="445:12" pos:end="445:13">-&gt;</operator><name pos:start="445:14" pos:end="445:17">regs</name><index pos:start="445:18" pos:end="445:20">[<expr pos:start="445:19" pos:end="445:19"><literal type="number" pos:start="445:19" pos:end="445:19">3</literal></expr>]</index></name> <operator pos:start="445:22" pos:end="445:22">=</operator> <call pos:start="445:24" pos:end="445:55"><name pos:start="445:24" pos:end="445:31">ldl_phys</name><argument_list pos:start="445:32" pos:end="445:55">(<argument pos:start="445:33" pos:end="445:38"><expr pos:start="445:33" pos:end="445:38"><name pos:start="445:33" pos:end="445:38"><name pos:start="445:33" pos:end="445:34">cs</name><operator pos:start="445:35" pos:end="445:36">-&gt;</operator><name pos:start="445:37" pos:end="445:38">as</name></name></expr></argument>, <argument pos:start="445:41" pos:end="445:54"><expr pos:start="445:41" pos:end="445:54"><name pos:start="445:41" pos:end="445:48">frameptr</name> <operator pos:start="445:50" pos:end="445:50">+</operator> <literal type="number" pos:start="445:52" pos:end="445:54">0xc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="447:9" pos:end="447:58"><expr pos:start="447:9" pos:end="447:57"><name pos:start="447:9" pos:end="447:21"><name pos:start="447:9" pos:end="447:11">env</name><operator pos:start="447:12" pos:end="447:13">-&gt;</operator><name pos:start="447:14" pos:end="447:17">regs</name><index pos:start="447:18" pos:end="447:21">[<expr pos:start="447:19" pos:end="447:20"><literal type="number" pos:start="447:19" pos:end="447:20">12</literal></expr>]</index></name> <operator pos:start="447:23" pos:end="447:23">=</operator> <call pos:start="447:25" pos:end="447:57"><name pos:start="447:25" pos:end="447:32">ldl_phys</name><argument_list pos:start="447:33" pos:end="447:57">(<argument pos:start="447:34" pos:end="447:39"><expr pos:start="447:34" pos:end="447:39"><name pos:start="447:34" pos:end="447:39"><name pos:start="447:34" pos:end="447:35">cs</name><operator pos:start="447:36" pos:end="447:37">-&gt;</operator><name pos:start="447:38" pos:end="447:39">as</name></name></expr></argument>, <argument pos:start="447:42" pos:end="447:56"><expr pos:start="447:42" pos:end="447:56"><name pos:start="447:42" pos:end="447:49">frameptr</name> <operator pos:start="447:51" pos:end="447:51">+</operator> <literal type="number" pos:start="447:53" pos:end="447:56">0x10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="449:9" pos:end="449:58"><expr pos:start="449:9" pos:end="449:57"><name pos:start="449:9" pos:end="449:21"><name pos:start="449:9" pos:end="449:11">env</name><operator pos:start="449:12" pos:end="449:13">-&gt;</operator><name pos:start="449:14" pos:end="449:17">regs</name><index pos:start="449:18" pos:end="449:21">[<expr pos:start="449:19" pos:end="449:20"><literal type="number" pos:start="449:19" pos:end="449:20">14</literal></expr>]</index></name> <operator pos:start="449:23" pos:end="449:23">=</operator> <call pos:start="449:25" pos:end="449:57"><name pos:start="449:25" pos:end="449:32">ldl_phys</name><argument_list pos:start="449:33" pos:end="449:57">(<argument pos:start="449:34" pos:end="449:39"><expr pos:start="449:34" pos:end="449:39"><name pos:start="449:34" pos:end="449:39"><name pos:start="449:34" pos:end="449:35">cs</name><operator pos:start="449:36" pos:end="449:37">-&gt;</operator><name pos:start="449:38" pos:end="449:39">as</name></name></expr></argument>, <argument pos:start="449:42" pos:end="449:56"><expr pos:start="449:42" pos:end="449:56"><name pos:start="449:42" pos:end="449:49">frameptr</name> <operator pos:start="449:51" pos:end="449:51">+</operator> <literal type="number" pos:start="449:53" pos:end="449:56">0x14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="451:9" pos:end="451:58"><expr pos:start="451:9" pos:end="451:57"><name pos:start="451:9" pos:end="451:21"><name pos:start="451:9" pos:end="451:11">env</name><operator pos:start="451:12" pos:end="451:13">-&gt;</operator><name pos:start="451:14" pos:end="451:17">regs</name><index pos:start="451:18" pos:end="451:21">[<expr pos:start="451:19" pos:end="451:20"><literal type="number" pos:start="451:19" pos:end="451:20">15</literal></expr>]</index></name> <operator pos:start="451:23" pos:end="451:23">=</operator> <call pos:start="451:25" pos:end="451:57"><name pos:start="451:25" pos:end="451:32">ldl_phys</name><argument_list pos:start="451:33" pos:end="451:57">(<argument pos:start="451:34" pos:end="451:39"><expr pos:start="451:34" pos:end="451:39"><name pos:start="451:34" pos:end="451:39"><name pos:start="451:34" pos:end="451:35">cs</name><operator pos:start="451:36" pos:end="451:37">-&gt;</operator><name pos:start="451:38" pos:end="451:39">as</name></name></expr></argument>, <argument pos:start="451:42" pos:end="451:56"><expr pos:start="451:42" pos:end="451:56"><name pos:start="451:42" pos:end="451:49">frameptr</name> <operator pos:start="451:51" pos:end="451:51">+</operator> <literal type="number" pos:start="451:53" pos:end="451:56">0x18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="455:9" pos:end="469:11">/* Returning from an exception with a PC with bit 0 set is defined

         * behaviour on v8M (bit 0 is ignored), but for v7M it was specified

         * to be UNPREDICTABLE. In practice actual v7M hardware seems to ignore

         * the lsbit, and there are several RTOSes out there which incorrectly

         * assume the r15 in the stack frame should be a Thumb-style "lsbit

         * indicates ARM/Thumb" value, so ignore the bit on v7M as well, but

         * complain about the badly behaved guest.

         */</comment>

        <if_stmt pos:start="471:9" pos:end="485:9"><if pos:start="471:9" pos:end="485:9">if <condition pos:start="471:12" pos:end="471:30">(<expr pos:start="471:13" pos:end="471:29"><name pos:start="471:13" pos:end="471:25"><name pos:start="471:13" pos:end="471:15">env</name><operator pos:start="471:16" pos:end="471:17">-&gt;</operator><name pos:start="471:18" pos:end="471:21">regs</name><index pos:start="471:22" pos:end="471:25">[<expr pos:start="471:23" pos:end="471:24"><literal type="number" pos:start="471:23" pos:end="471:24">15</literal></expr>]</index></name> <operator pos:start="471:27" pos:end="471:27">&amp;</operator> <literal type="number" pos:start="471:29" pos:end="471:29">1</literal></expr>)</condition> <block pos:start="471:32" pos:end="485:9">{<block_content pos:start="473:13" pos:end="483:13">

            <expr_stmt pos:start="473:13" pos:end="473:33"><expr pos:start="473:13" pos:end="473:32"><name pos:start="473:13" pos:end="473:25"><name pos:start="473:13" pos:end="473:15">env</name><operator pos:start="473:16" pos:end="473:17">-&gt;</operator><name pos:start="473:18" pos:end="473:21">regs</name><index pos:start="473:22" pos:end="473:25">[<expr pos:start="473:23" pos:end="473:24"><literal type="number" pos:start="473:23" pos:end="473:24">15</literal></expr>]</index></name> <operator pos:start="473:27" pos:end="473:28">&amp;=</operator> <operator pos:start="473:30" pos:end="473:30">~</operator><literal type="number" pos:start="473:31" pos:end="473:32">1U</literal></expr>;</expr_stmt>

            <if_stmt pos:start="475:13" pos:end="483:13"><if pos:start="475:13" pos:end="483:13">if <condition pos:start="475:16" pos:end="475:50">(<expr pos:start="475:17" pos:end="475:49"><operator pos:start="475:17" pos:end="475:17">!</operator><call pos:start="475:18" pos:end="475:49"><name pos:start="475:18" pos:end="475:28">arm_feature</name><argument_list pos:start="475:29" pos:end="475:49">(<argument pos:start="475:30" pos:end="475:32"><expr pos:start="475:30" pos:end="475:32"><name pos:start="475:30" pos:end="475:32">env</name></expr></argument>, <argument pos:start="475:35" pos:end="475:48"><expr pos:start="475:35" pos:end="475:48"><name pos:start="475:35" pos:end="475:48">ARM_FEATURE_V8</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="475:52" pos:end="483:13">{<block_content pos:start="477:17" pos:end="481:62">

                <expr_stmt pos:start="477:17" pos:end="481:62"><expr pos:start="477:17" pos:end="481:61"><call pos:start="477:17" pos:end="481:61"><name pos:start="477:17" pos:end="477:29">qemu_log_mask</name><argument_list pos:start="477:30" pos:end="481:61">(<argument pos:start="477:31" pos:end="477:45"><expr pos:start="477:31" pos:end="477:45"><name pos:start="477:31" pos:end="477:45">LOG_GUEST_ERROR</name></expr></argument>,

                              <argument pos:start="479:31" pos:end="481:60"><expr pos:start="479:31" pos:end="481:60"><literal type="string" pos:start="479:31" pos:end="479:80">"M profile return from interrupt with misaligned "</literal>

                              <literal type="string" pos:start="481:31" pos:end="481:60">"PC is UNPREDICTABLE on v7M\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="489:9" pos:end="489:49"><expr pos:start="489:9" pos:end="489:48"><name pos:start="489:9" pos:end="489:12">xpsr</name> <operator pos:start="489:14" pos:end="489:14">=</operator> <call pos:start="489:16" pos:end="489:48"><name pos:start="489:16" pos:end="489:23">ldl_phys</name><argument_list pos:start="489:24" pos:end="489:48">(<argument pos:start="489:25" pos:end="489:30"><expr pos:start="489:25" pos:end="489:30"><name pos:start="489:25" pos:end="489:30"><name pos:start="489:25" pos:end="489:26">cs</name><operator pos:start="489:27" pos:end="489:28">-&gt;</operator><name pos:start="489:29" pos:end="489:30">as</name></name></expr></argument>, <argument pos:start="489:33" pos:end="489:47"><expr pos:start="489:33" pos:end="489:47"><name pos:start="489:33" pos:end="489:40">frameptr</name> <operator pos:start="489:42" pos:end="489:42">+</operator> <literal type="number" pos:start="489:44" pos:end="489:47">0x1c</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="493:9" pos:end="535:9"><if pos:start="493:9" pos:end="535:9">if <condition pos:start="493:12" pos:end="493:45">(<expr pos:start="493:13" pos:end="493:44"><call pos:start="493:13" pos:end="493:44"><name pos:start="493:13" pos:end="493:23">arm_feature</name><argument_list pos:start="493:24" pos:end="493:44">(<argument pos:start="493:25" pos:end="493:27"><expr pos:start="493:25" pos:end="493:27"><name pos:start="493:25" pos:end="493:27">env</name></expr></argument>, <argument pos:start="493:30" pos:end="493:43"><expr pos:start="493:30" pos:end="493:43"><name pos:start="493:30" pos:end="493:43">ARM_FEATURE_V8</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="493:47" pos:end="535:9">{<block_content pos:start="503:13" pos:end="533:13">

            <comment type="block" pos:start="495:13" pos:end="501:15">/* For v8M we have to check whether the xPSR exception field

             * matches the EXCRET value for return to handler/thread

             * before we commit to changing the SP and xPSR.

             */</comment>

            <decl_stmt pos:start="503:13" pos:end="503:59"><decl pos:start="503:13" pos:end="503:58"><type pos:start="503:13" pos:end="503:16"><name pos:start="503:13" pos:end="503:16">bool</name></type> <name pos:start="503:18" pos:end="503:32">will_be_handler</name> <init pos:start="503:34" pos:end="503:58">= <expr pos:start="503:36" pos:end="503:58"><operator pos:start="503:36" pos:end="503:36">(</operator><name pos:start="503:37" pos:end="503:40">xpsr</name> <operator pos:start="503:42" pos:end="503:42">&amp;</operator> <name pos:start="503:44" pos:end="503:52">XPSR_EXCP</name><operator pos:start="503:53" pos:end="503:53">)</operator> <operator pos:start="503:55" pos:end="503:56">!=</operator> <literal type="number" pos:start="503:58" pos:end="503:58">0</literal></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="505:13" pos:end="533:13"><if pos:start="505:13" pos:end="533:13">if <condition pos:start="505:16" pos:end="505:53">(<expr pos:start="505:17" pos:end="505:52"><name pos:start="505:17" pos:end="505:33">return_to_handler</name> <operator pos:start="505:35" pos:end="505:36">!=</operator> <name pos:start="505:38" pos:end="505:52">will_be_handler</name></expr>)</condition> <block pos:start="505:55" pos:end="533:13">{<block_content pos:start="517:17" pos:end="531:23">

                <comment type="block" pos:start="507:17" pos:end="515:19">/* Take an INVPC UsageFault on the current stack.

                 * By this point we will have switched to the security state

                 * for the background state, so this UsageFault will target

                 * that state.

                 */</comment>

                <expr_stmt pos:start="517:17" pos:end="519:57"><expr pos:start="517:17" pos:end="519:56"><call pos:start="517:17" pos:end="519:56"><name pos:start="517:17" pos:end="517:39">armv7m_nvic_set_pending</name><argument_list pos:start="517:40" pos:end="519:56">(<argument pos:start="517:41" pos:end="517:49"><expr pos:start="517:41" pos:end="517:49"><name pos:start="517:41" pos:end="517:49"><name pos:start="517:41" pos:end="517:43">env</name><operator pos:start="517:44" pos:end="517:45">-&gt;</operator><name pos:start="517:46" pos:end="517:49">nvic</name></name></expr></argument>, <argument pos:start="517:52" pos:end="517:68"><expr pos:start="517:52" pos:end="517:68"><name pos:start="517:52" pos:end="517:68">ARMV7M_EXCP_USAGE</name></expr></argument>,

                                        <argument pos:start="519:41" pos:end="519:55"><expr pos:start="519:41" pos:end="519:55"><name pos:start="519:41" pos:end="519:55"><name pos:start="519:41" pos:end="519:43">env</name><operator pos:start="519:44" pos:end="519:45">-&gt;</operator><name pos:start="519:46" pos:end="519:48">v7m</name><operator pos:start="519:49" pos:end="519:49">.</operator><name pos:start="519:50" pos:end="519:55">secure</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="521:17" pos:end="521:72"><expr pos:start="521:17" pos:end="521:71"><name pos:start="521:17" pos:end="521:46"><name pos:start="521:17" pos:end="521:19">env</name><operator pos:start="521:20" pos:end="521:21">-&gt;</operator><name pos:start="521:22" pos:end="521:24">v7m</name><operator pos:start="521:25" pos:end="521:25">.</operator><name pos:start="521:26" pos:end="521:29">cfsr</name><index pos:start="521:30" pos:end="521:46">[<expr pos:start="521:31" pos:end="521:45"><name pos:start="521:31" pos:end="521:45"><name pos:start="521:31" pos:end="521:33">env</name><operator pos:start="521:34" pos:end="521:35">-&gt;</operator><name pos:start="521:36" pos:end="521:38">v7m</name><operator pos:start="521:39" pos:end="521:39">.</operator><name pos:start="521:40" pos:end="521:45">secure</name></name></expr>]</index></name> <operator pos:start="521:48" pos:end="521:49">|=</operator> <name pos:start="521:51" pos:end="521:71">R_V7M_CFSR_INVPC_MASK</name></expr>;</expr_stmt>

                <expr_stmt pos:start="523:17" pos:end="523:49"><expr pos:start="523:17" pos:end="523:48"><call pos:start="523:17" pos:end="523:48"><name pos:start="523:17" pos:end="523:35">v7m_exception_taken</name><argument_list pos:start="523:36" pos:end="523:48">(<argument pos:start="523:37" pos:end="523:39"><expr pos:start="523:37" pos:end="523:39"><name pos:start="523:37" pos:end="523:39">cpu</name></expr></argument>, <argument pos:start="523:42" pos:end="523:47"><expr pos:start="523:42" pos:end="523:47"><name pos:start="523:42" pos:end="523:47">excret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="525:17" pos:end="529:41"><expr pos:start="525:17" pos:end="529:40"><call pos:start="525:17" pos:end="529:40"><name pos:start="525:17" pos:end="525:29">qemu_log_mask</name><argument_list pos:start="525:30" pos:end="529:40">(<argument pos:start="525:31" pos:end="525:41"><expr pos:start="525:31" pos:end="525:41"><name pos:start="525:31" pos:end="525:41">CPU_LOG_INT</name></expr></argument>, <argument pos:start="525:44" pos:end="529:39"><expr pos:start="525:44" pos:end="529:39"><literal type="string" pos:start="525:44" pos:end="525:78">"...taking UsageFault on existing "</literal>

                              <literal type="string" pos:start="527:31" pos:end="527:78">"stackframe: failed exception return integrity "</literal>

                              <literal type="string" pos:start="529:31" pos:end="529:39">"check\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="531:17" pos:end="531:23">return;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="539:9" pos:end="539:49">/* Commit to consuming the stack frame */</comment>

        <expr_stmt pos:start="541:9" pos:end="541:25"><expr pos:start="541:9" pos:end="541:24"><name pos:start="541:9" pos:end="541:16">frameptr</name> <operator pos:start="541:18" pos:end="541:19">+=</operator> <literal type="number" pos:start="541:21" pos:end="541:24">0x20</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="543:9" pos:end="553:11">/* Undo stack alignment (the SPREALIGN bit indicates that the original

         * pre-exception SP was not 8-aligned and we added a padding word to

         * align it, so we undo this by ORing in the bit that increases it

         * from the current 8-aligned value to the 8-unaligned value. (Adding 4

         * would work too but a logical OR is how the pseudocode specifies it.)

         */</comment>

        <if_stmt pos:start="555:9" pos:end="559:9"><if pos:start="555:9" pos:end="559:9">if <condition pos:start="555:12" pos:end="555:34">(<expr pos:start="555:13" pos:end="555:33"><name pos:start="555:13" pos:end="555:16">xpsr</name> <operator pos:start="555:18" pos:end="555:18">&amp;</operator> <name pos:start="555:20" pos:end="555:33">XPSR_SPREALIGN</name></expr>)</condition> <block pos:start="555:36" pos:end="559:9">{<block_content pos:start="557:13" pos:end="557:26">

            <expr_stmt pos:start="557:13" pos:end="557:26"><expr pos:start="557:13" pos:end="557:25"><name pos:start="557:13" pos:end="557:20">frameptr</name> <operator pos:start="557:22" pos:end="557:23">|=</operator> <literal type="number" pos:start="557:25" pos:end="557:25">4</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="561:9" pos:end="561:31"><expr pos:start="561:9" pos:end="561:30"><operator pos:start="561:9" pos:end="561:9">*</operator><name pos:start="561:10" pos:end="561:19">frame_sp_p</name> <operator pos:start="561:21" pos:end="561:21">=</operator> <name pos:start="561:23" pos:end="561:30">frameptr</name></expr>;</expr_stmt>

    </block_content>}</block>

    <comment type="block" pos:start="565:5" pos:end="565:77">/* This xpsr_write() will invalidate frame_sp_p as it may switch stack */</comment>

    <expr_stmt pos:start="567:5" pos:end="567:43"><expr pos:start="567:5" pos:end="567:42"><call pos:start="567:5" pos:end="567:42"><name pos:start="567:5" pos:end="567:14">xpsr_write</name><argument_list pos:start="567:15" pos:end="567:42">(<argument pos:start="567:16" pos:end="567:18"><expr pos:start="567:16" pos:end="567:18"><name pos:start="567:16" pos:end="567:18">env</name></expr></argument>, <argument pos:start="567:21" pos:end="567:24"><expr pos:start="567:21" pos:end="567:24"><name pos:start="567:21" pos:end="567:24">xpsr</name></expr></argument>, <argument pos:start="567:27" pos:end="567:41"><expr pos:start="567:27" pos:end="567:41"><operator pos:start="567:27" pos:end="567:27">~</operator><name pos:start="567:28" pos:end="567:41">XPSR_SPREALIGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="571:5" pos:end="579:7">/* The restored xPSR exception field will be zero if we're

     * resuming in Thread mode. If that doesn't match what the

     * exception return excret specified then this is a UsageFault.

     * v7M requires we make this check here; v8M did it earlier.

     */</comment>

    <if_stmt pos:start="581:5" pos:end="605:5"><if pos:start="581:5" pos:end="605:5">if <condition pos:start="581:8" pos:end="581:58">(<expr pos:start="581:9" pos:end="581:57"><name pos:start="581:9" pos:end="581:25">return_to_handler</name> <operator pos:start="581:27" pos:end="581:28">!=</operator> <call pos:start="581:30" pos:end="581:57"><name pos:start="581:30" pos:end="581:52">arm_v7m_is_handler_mode</name><argument_list pos:start="581:53" pos:end="581:57">(<argument pos:start="581:54" pos:end="581:56"><expr pos:start="581:54" pos:end="581:56"><name pos:start="581:54" pos:end="581:56">env</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="581:60" pos:end="605:5">{<block_content pos:start="589:9" pos:end="603:15">

        <comment type="block" pos:start="583:9" pos:end="587:11">/* Take an INVPC UsageFault by pushing the stack again;

         * we know we're v7M so this is never a Secure UsageFault.

         */</comment>

        <expr_stmt pos:start="589:9" pos:end="589:50"><expr pos:start="589:9" pos:end="589:49"><call pos:start="589:9" pos:end="589:49"><name pos:start="589:9" pos:end="589:14">assert</name><argument_list pos:start="589:15" pos:end="589:49">(<argument pos:start="589:16" pos:end="589:48"><expr pos:start="589:16" pos:end="589:48"><operator pos:start="589:16" pos:end="589:16">!</operator><call pos:start="589:17" pos:end="589:48"><name pos:start="589:17" pos:end="589:27">arm_feature</name><argument_list pos:start="589:28" pos:end="589:48">(<argument pos:start="589:29" pos:end="589:31"><expr pos:start="589:29" pos:end="589:31"><name pos:start="589:29" pos:end="589:31">env</name></expr></argument>, <argument pos:start="589:34" pos:end="589:47"><expr pos:start="589:34" pos:end="589:47"><name pos:start="589:34" pos:end="589:47">ARM_FEATURE_V8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="591:9" pos:end="591:69"><expr pos:start="591:9" pos:end="591:68"><call pos:start="591:9" pos:end="591:68"><name pos:start="591:9" pos:end="591:31">armv7m_nvic_set_pending</name><argument_list pos:start="591:32" pos:end="591:68">(<argument pos:start="591:33" pos:end="591:41"><expr pos:start="591:33" pos:end="591:41"><name pos:start="591:33" pos:end="591:41"><name pos:start="591:33" pos:end="591:35">env</name><operator pos:start="591:36" pos:end="591:37">-&gt;</operator><name pos:start="591:38" pos:end="591:41">nvic</name></name></expr></argument>, <argument pos:start="591:44" pos:end="591:60"><expr pos:start="591:44" pos:end="591:60"><name pos:start="591:44" pos:end="591:60">ARMV7M_EXCP_USAGE</name></expr></argument>, <argument pos:start="591:63" pos:end="591:67"><expr pos:start="591:63" pos:end="591:67"><name pos:start="591:63" pos:end="591:67">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="593:9" pos:end="593:64"><expr pos:start="593:9" pos:end="593:63"><name pos:start="593:9" pos:end="593:38"><name pos:start="593:9" pos:end="593:11">env</name><operator pos:start="593:12" pos:end="593:13">-&gt;</operator><name pos:start="593:14" pos:end="593:16">v7m</name><operator pos:start="593:17" pos:end="593:17">.</operator><name pos:start="593:18" pos:end="593:21">cfsr</name><index pos:start="593:22" pos:end="593:38">[<expr pos:start="593:23" pos:end="593:37"><name pos:start="593:23" pos:end="593:37"><name pos:start="593:23" pos:end="593:25">env</name><operator pos:start="593:26" pos:end="593:27">-&gt;</operator><name pos:start="593:28" pos:end="593:30">v7m</name><operator pos:start="593:31" pos:end="593:31">.</operator><name pos:start="593:32" pos:end="593:37">secure</name></name></expr>]</index></name> <operator pos:start="593:40" pos:end="593:41">|=</operator> <name pos:start="593:43" pos:end="593:63">R_V7M_CFSR_INVPC_MASK</name></expr>;</expr_stmt>

        <expr_stmt pos:start="595:9" pos:end="595:28"><expr pos:start="595:9" pos:end="595:27"><call pos:start="595:9" pos:end="595:27"><name pos:start="595:9" pos:end="595:22">v7m_push_stack</name><argument_list pos:start="595:23" pos:end="595:27">(<argument pos:start="595:24" pos:end="595:26"><expr pos:start="595:24" pos:end="595:26"><name pos:start="595:24" pos:end="595:26">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="597:9" pos:end="597:41"><expr pos:start="597:9" pos:end="597:40"><call pos:start="597:9" pos:end="597:40"><name pos:start="597:9" pos:end="597:27">v7m_exception_taken</name><argument_list pos:start="597:28" pos:end="597:40">(<argument pos:start="597:29" pos:end="597:31"><expr pos:start="597:29" pos:end="597:31"><name pos:start="597:29" pos:end="597:31">cpu</name></expr></argument>, <argument pos:start="597:34" pos:end="597:39"><expr pos:start="597:34" pos:end="597:39"><name pos:start="597:34" pos:end="597:39">excret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="599:9" pos:end="601:67"><expr pos:start="599:9" pos:end="601:66"><call pos:start="599:9" pos:end="601:66"><name pos:start="599:9" pos:end="599:21">qemu_log_mask</name><argument_list pos:start="599:22" pos:end="601:66">(<argument pos:start="599:23" pos:end="599:33"><expr pos:start="599:23" pos:end="599:33"><name pos:start="599:23" pos:end="599:33">CPU_LOG_INT</name></expr></argument>, <argument pos:start="599:36" pos:end="601:65"><expr pos:start="599:36" pos:end="601:65"><literal type="string" pos:start="599:36" pos:end="599:77">"...taking UsageFault on new stackframe: "</literal>

                      <literal type="string" pos:start="601:23" pos:end="601:65">"failed exception return integrity check\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="603:9" pos:end="603:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="609:5" pos:end="609:57">/* Otherwise, we have a successful exception exit. */</comment>

    <expr_stmt pos:start="611:5" pos:end="611:29"><expr pos:start="611:5" pos:end="611:28"><call pos:start="611:5" pos:end="611:28"><name pos:start="611:5" pos:end="611:23">arm_clear_exclusive</name><argument_list pos:start="611:24" pos:end="611:28">(<argument pos:start="611:25" pos:end="611:27"><expr pos:start="611:25" pos:end="611:27"><name pos:start="611:25" pos:end="611:27">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="613:5" pos:end="613:67"><expr pos:start="613:5" pos:end="613:66"><call pos:start="613:5" pos:end="613:66"><name pos:start="613:5" pos:end="613:17">qemu_log_mask</name><argument_list pos:start="613:18" pos:end="613:66">(<argument pos:start="613:19" pos:end="613:29"><expr pos:start="613:19" pos:end="613:29"><name pos:start="613:19" pos:end="613:29">CPU_LOG_INT</name></expr></argument>, <argument pos:start="613:32" pos:end="613:65"><expr pos:start="613:32" pos:end="613:65"><literal type="string" pos:start="613:32" pos:end="613:65">"...successful exception return\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
