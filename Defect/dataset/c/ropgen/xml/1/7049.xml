<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/7049.c" pos:tabs="8"><function pos:start="1:1" pos:end="117:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">test_acpi_one</name><parameter_list pos:start="1:26" pos:end="1:62">(<parameter pos:start="1:27" pos:end="1:44"><decl pos:start="1:27" pos:end="1:44"><type pos:start="1:27" pos:end="1:44"><specifier pos:start="1:27" pos:end="1:31">const</specifier> <name pos:start="1:33" pos:end="1:36">char</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:44">params</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:61"><decl pos:start="1:47" pos:end="1:61"><type pos:start="1:47" pos:end="1:61"><name pos:start="1:47" pos:end="1:55">test_data</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:61">data</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="117:1">{<block_content pos:start="5:5" pos:end="115:17">

    <decl_stmt pos:start="5:5" pos:end="5:15"><decl pos:start="5:5" pos:end="5:14"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:8">char</name> <modifier pos:start="5:10" pos:end="5:10">*</modifier></type><name pos:start="5:11" pos:end="5:14">args</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:26"><decl pos:start="7:5" pos:end="7:25"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">uint8_t</name></type> <name pos:start="7:13" pos:end="7:25">signature_low</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">uint8_t</name></type> <name pos:start="9:13" pos:end="9:26">signature_high</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint16_t</name></type> <name pos:start="11:14" pos:end="11:22">signature</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:10"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:16"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:14">char</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:22">device</name> <init pos:start="15:24" pos:end="15:27">= <expr pos:start="15:26" pos:end="15:27"><literal type="string" pos:start="15:26" pos:end="15:27">""</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="23:5"><if pos:start="19:5" pos:end="23:5">if <condition pos:start="19:8" pos:end="19:47">(<expr pos:start="19:9" pos:end="19:46"><operator pos:start="19:9" pos:end="19:9">!</operator><call pos:start="19:10" pos:end="19:46"><name pos:start="19:10" pos:end="19:18">g_strcmp0</name><argument_list pos:start="19:19" pos:end="19:46">(<argument pos:start="19:20" pos:end="19:32"><expr pos:start="19:20" pos:end="19:32"><name pos:start="19:20" pos:end="19:32"><name pos:start="19:20" pos:end="19:23">data</name><operator pos:start="19:24" pos:end="19:25">-&gt;</operator><name pos:start="19:26" pos:end="19:32">machine</name></name></expr></argument>, <argument pos:start="19:35" pos:end="19:45"><expr pos:start="19:35" pos:end="19:45"><name pos:start="19:35" pos:end="19:45">MACHINE_Q35</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="19:49" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:50">

        <expr_stmt pos:start="21:9" pos:end="21:50"><expr pos:start="21:9" pos:end="21:49"><name pos:start="21:9" pos:end="21:14">device</name> <operator pos:start="21:16" pos:end="21:16">=</operator> <literal type="string" pos:start="21:18" pos:end="21:49">",id=hd -device ide-hd,drive=hd"</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="29:63"><expr pos:start="27:5" pos:end="29:62"><name pos:start="27:5" pos:end="27:8">args</name> <operator pos:start="27:10" pos:end="27:10">=</operator> <call pos:start="27:12" pos:end="29:62"><name pos:start="27:12" pos:end="27:26">g_strdup_printf</name><argument_list pos:start="27:27" pos:end="29:62">(<argument pos:start="27:28" pos:end="27:73"><expr pos:start="27:28" pos:end="27:73"><literal type="string" pos:start="27:28" pos:end="27:73">"-net none -display none %s -drive file=%s%s,"</literal></expr></argument>,

                           <argument pos:start="29:28" pos:end="29:47"><expr pos:start="29:28" pos:end="29:47"><ternary pos:start="29:28" pos:end="29:47"><condition pos:start="29:28" pos:end="29:35"><expr pos:start="29:28" pos:end="29:33"><name pos:start="29:28" pos:end="29:33">params</name></expr> ?</condition><then pos:start="29:37" pos:end="29:42"> <expr pos:start="29:37" pos:end="29:42"><name pos:start="29:37" pos:end="29:42">params</name></expr> </then><else pos:start="29:44" pos:end="29:47">: <expr pos:start="29:46" pos:end="29:47"><literal type="string" pos:start="29:46" pos:end="29:47">""</literal></expr></else></ternary></expr></argument>, <argument pos:start="29:50" pos:end="29:53"><expr pos:start="29:50" pos:end="29:53"><name pos:start="29:50" pos:end="29:53">disk</name></expr></argument>, <argument pos:start="29:56" pos:end="29:61"><expr pos:start="29:56" pos:end="29:61"><name pos:start="29:56" pos:end="29:61">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="40:0"><expr pos:start="31:5" pos:end="31:21"><call pos:start="31:5" pos:end="31:21"><name pos:start="31:5" pos:end="31:15">qtest_start</name><argument_list pos:start="31:16" pos:end="31:21">(<argument pos:start="31:17" pos:end="31:20"><expr pos:start="31:17" pos:end="31:20"><name pos:start="31:17" pos:end="31:20">args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



   <comment type="block" pos:start="35:4" pos:end="35:30">/* Wait at most 1 minute */</comment>

<cpp:define pos:start="37:1" pos:end="37:44">#<cpp:directive pos:start="37:2" pos:end="37:7">define</cpp:directive> <cpp:macro pos:start="37:9" pos:end="37:18"><name pos:start="37:9" pos:end="37:18">TEST_DELAY</name></cpp:macro> <cpp:value pos:start="37:20" pos:end="37:44">(1 * G_USEC_PER_SEC / 10)</cpp:value></cpp:define>

<cpp:define pos:start="39:1" pos:end="39:62">#<cpp:directive pos:start="39:2" pos:end="39:7">define</cpp:directive> <cpp:macro pos:start="39:9" pos:end="39:19"><name pos:start="39:9" pos:end="39:19">TEST_CYCLES</name></cpp:macro> <cpp:value pos:start="39:21" pos:end="39:62">MAX((60 * G_USEC_PER_SEC / TEST_DELAY), 1)</cpp:value></cpp:define>



    <comment type="block" pos:start="43:5" pos:end="49:7">/* Poll until code has run and modified memory.  Once it has we know BIOS

     * initialization is done.  TODO: check that IP reached the halt

     * instruction.

     */</comment>

    <for pos:start="51:5" pos:end="67:5">for <control pos:start="51:9" pos:end="51:37">(<init pos:start="51:10" pos:end="51:15"><expr pos:start="51:10" pos:end="51:14"><name pos:start="51:10" pos:end="51:10">i</name> <operator pos:start="51:12" pos:end="51:12">=</operator> <literal type="number" pos:start="51:14" pos:end="51:14">0</literal></expr>;</init> <condition pos:start="51:17" pos:end="51:32"><expr pos:start="51:17" pos:end="51:31"><name pos:start="51:17" pos:end="51:17">i</name> <operator pos:start="51:19" pos:end="51:19">&lt;</operator> <name pos:start="51:21" pos:end="51:31">TEST_CYCLES</name></expr>;</condition> <incr pos:start="51:34" pos:end="51:36"><expr pos:start="51:34" pos:end="51:36"><operator pos:start="51:34" pos:end="51:35">++</operator><name pos:start="51:36" pos:end="51:36">i</name></expr></incr>)</control> <block pos:start="51:39" pos:end="67:5">{<block_content pos:start="53:9" pos:end="65:29">

        <expr_stmt pos:start="53:9" pos:end="53:70"><expr pos:start="53:9" pos:end="53:69"><name pos:start="53:9" pos:end="53:21">signature_low</name> <operator pos:start="53:23" pos:end="53:23">=</operator> <call pos:start="53:25" pos:end="53:69"><name pos:start="53:25" pos:end="53:29">readb</name><argument_list pos:start="53:30" pos:end="53:69">(<argument pos:start="53:31" pos:end="53:68"><expr pos:start="53:31" pos:end="53:68"><name pos:start="53:31" pos:end="53:49">BOOT_SECTOR_ADDRESS</name> <operator pos:start="53:51" pos:end="53:51">+</operator> <name pos:start="53:53" pos:end="53:68">SIGNATURE_OFFSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:75"><expr pos:start="55:9" pos:end="55:74"><name pos:start="55:9" pos:end="55:22">signature_high</name> <operator pos:start="55:24" pos:end="55:24">=</operator> <call pos:start="55:26" pos:end="55:74"><name pos:start="55:26" pos:end="55:30">readb</name><argument_list pos:start="55:31" pos:end="55:74">(<argument pos:start="55:32" pos:end="55:73"><expr pos:start="55:32" pos:end="55:73"><name pos:start="55:32" pos:end="55:50">BOOT_SECTOR_ADDRESS</name> <operator pos:start="55:52" pos:end="55:52">+</operator> <name pos:start="55:54" pos:end="55:69">SIGNATURE_OFFSET</name> <operator pos:start="55:71" pos:end="55:71">+</operator> <literal type="number" pos:start="55:73" pos:end="55:73">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:58"><expr pos:start="57:9" pos:end="57:57"><name pos:start="57:9" pos:end="57:17">signature</name> <operator pos:start="57:19" pos:end="57:19">=</operator> <operator pos:start="57:21" pos:end="57:21">(</operator><name pos:start="57:22" pos:end="57:35">signature_high</name> <operator pos:start="57:37" pos:end="57:38">&lt;&lt;</operator> <literal type="number" pos:start="57:40" pos:end="57:40">8</literal><operator pos:start="57:41" pos:end="57:41">)</operator> <operator pos:start="57:43" pos:end="57:43">|</operator> <name pos:start="57:45" pos:end="57:57">signature_low</name></expr>;</expr_stmt>

        <if_stmt pos:start="59:9" pos:end="63:9"><if pos:start="59:9" pos:end="63:9">if <condition pos:start="59:12" pos:end="59:35">(<expr pos:start="59:13" pos:end="59:34"><name pos:start="59:13" pos:end="59:21">signature</name> <operator pos:start="59:23" pos:end="59:24">==</operator> <name pos:start="59:26" pos:end="59:34">SIGNATURE</name></expr>)</condition> <block pos:start="59:37" pos:end="63:9">{<block_content pos:start="61:13" pos:end="61:18">

            <break pos:start="61:13" pos:end="61:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:29"><expr pos:start="65:9" pos:end="65:28"><call pos:start="65:9" pos:end="65:28"><name pos:start="65:9" pos:end="65:16">g_usleep</name><argument_list pos:start="65:17" pos:end="65:28">(<argument pos:start="65:18" pos:end="65:27"><expr pos:start="65:18" pos:end="65:27"><name pos:start="65:18" pos:end="65:27">TEST_DELAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="69:5" pos:end="69:46"><expr pos:start="69:5" pos:end="69:45"><call pos:start="69:5" pos:end="69:45"><name pos:start="69:5" pos:end="69:19">g_assert_cmphex</name><argument_list pos:start="69:20" pos:end="69:45">(<argument pos:start="69:21" pos:end="69:29"><expr pos:start="69:21" pos:end="69:29"><name pos:start="69:21" pos:end="69:29">signature</name></expr></argument>, <argument pos:start="69:32" pos:end="69:33"><expr pos:start="69:32" pos:end="69:33"><operator pos:start="69:32" pos:end="69:33">==</operator></expr></argument>, <argument pos:start="69:36" pos:end="69:44"><expr pos:start="69:36" pos:end="69:44"><name pos:start="69:36" pos:end="69:44">SIGNATURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:33"><expr pos:start="73:5" pos:end="73:32"><call pos:start="73:5" pos:end="73:32"><name pos:start="73:5" pos:end="73:26">test_acpi_rsdp_address</name><argument_list pos:start="73:27" pos:end="73:32">(<argument pos:start="73:28" pos:end="73:31"><expr pos:start="73:28" pos:end="73:31"><name pos:start="73:28" pos:end="73:31">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:31"><expr pos:start="75:5" pos:end="75:30"><call pos:start="75:5" pos:end="75:30"><name pos:start="75:5" pos:end="75:24">test_acpi_rsdp_table</name><argument_list pos:start="75:25" pos:end="75:30">(<argument pos:start="75:26" pos:end="75:29"><expr pos:start="75:26" pos:end="75:29"><name pos:start="75:26" pos:end="75:29">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:31"><expr pos:start="77:5" pos:end="77:30"><call pos:start="77:5" pos:end="77:30"><name pos:start="77:5" pos:end="77:24">test_acpi_rsdt_table</name><argument_list pos:start="77:25" pos:end="77:30">(<argument pos:start="77:26" pos:end="77:29"><expr pos:start="77:26" pos:end="77:29"><name pos:start="77:26" pos:end="77:29">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:31"><expr pos:start="79:5" pos:end="79:30"><call pos:start="79:5" pos:end="79:30"><name pos:start="79:5" pos:end="79:24">test_acpi_fadt_table</name><argument_list pos:start="79:25" pos:end="79:30">(<argument pos:start="79:26" pos:end="79:29"><expr pos:start="79:26" pos:end="79:29"><name pos:start="79:26" pos:end="79:29">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:31"><expr pos:start="81:5" pos:end="81:30"><call pos:start="81:5" pos:end="81:30"><name pos:start="81:5" pos:end="81:24">test_acpi_facs_table</name><argument_list pos:start="81:25" pos:end="81:30">(<argument pos:start="81:26" pos:end="81:29"><expr pos:start="81:26" pos:end="81:29"><name pos:start="81:26" pos:end="81:29">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:31"><expr pos:start="83:5" pos:end="83:30"><call pos:start="83:5" pos:end="83:30"><name pos:start="83:5" pos:end="83:24">test_acpi_dsdt_table</name><argument_list pos:start="83:25" pos:end="83:30">(<argument pos:start="83:26" pos:end="83:29"><expr pos:start="83:26" pos:end="83:29"><name pos:start="83:26" pos:end="83:29">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:27"><expr pos:start="85:5" pos:end="85:26"><call pos:start="85:5" pos:end="85:26"><name pos:start="85:5" pos:end="85:20">test_acpi_tables</name><argument_list pos:start="85:21" pos:end="85:26">(<argument pos:start="85:22" pos:end="85:25"><expr pos:start="85:22" pos:end="85:25"><name pos:start="85:22" pos:end="85:25">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="89:5" pos:end="101:5"><if pos:start="89:5" pos:end="101:5">if <condition pos:start="89:8" pos:end="89:13">(<expr pos:start="89:9" pos:end="89:12"><name pos:start="89:9" pos:end="89:12">iasl</name></expr>)</condition> <block pos:start="89:15" pos:end="101:5">{<block_content pos:start="91:9" pos:end="99:9">

        <if_stmt pos:start="91:9" pos:end="99:9"><if pos:start="91:9" pos:end="95:9">if <condition pos:start="91:12" pos:end="91:46">(<expr pos:start="91:13" pos:end="91:45"><call pos:start="91:13" pos:end="91:45"><name pos:start="91:13" pos:end="91:18">getenv</name><argument_list pos:start="91:19" pos:end="91:45">(<argument pos:start="91:20" pos:end="91:44"><expr pos:start="91:20" pos:end="91:44"><name pos:start="91:20" pos:end="91:44">ACPI_REBUILD_EXPECTED_AML</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="91:48" pos:end="95:9">{<block_content pos:start="93:13" pos:end="93:39">

            <expr_stmt pos:start="93:13" pos:end="93:39"><expr pos:start="93:13" pos:end="93:38"><call pos:start="93:13" pos:end="93:38"><name pos:start="93:13" pos:end="93:26">dump_aml_files</name><argument_list pos:start="93:27" pos:end="93:38">(<argument pos:start="93:28" pos:end="93:31"><expr pos:start="93:28" pos:end="93:31"><name pos:start="93:28" pos:end="93:31">data</name></expr></argument>, <argument pos:start="93:34" pos:end="93:37"><expr pos:start="93:34" pos:end="93:37"><name pos:start="93:34" pos:end="93:37">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="95:11" pos:end="99:9">else <block pos:start="95:16" pos:end="99:9">{<block_content pos:start="97:13" pos:end="97:32">

            <expr_stmt pos:start="97:13" pos:end="97:32"><expr pos:start="97:13" pos:end="97:31"><call pos:start="97:13" pos:end="97:31"><name pos:start="97:13" pos:end="97:25">test_acpi_asl</name><argument_list pos:start="97:26" pos:end="97:31">(<argument pos:start="97:27" pos:end="97:30"><expr pos:start="97:27" pos:end="97:30"><name pos:start="97:27" pos:end="97:30">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="105:5" pos:end="105:33"><expr pos:start="105:5" pos:end="105:32"><call pos:start="105:5" pos:end="105:32"><name pos:start="105:5" pos:end="105:26">test_smbios_ep_address</name><argument_list pos:start="105:27" pos:end="105:32">(<argument pos:start="105:28" pos:end="105:31"><expr pos:start="105:28" pos:end="105:31"><name pos:start="105:28" pos:end="105:31">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:31"><expr pos:start="107:5" pos:end="107:30"><call pos:start="107:5" pos:end="107:30"><name pos:start="107:5" pos:end="107:24">test_smbios_ep_table</name><argument_list pos:start="107:25" pos:end="107:30">(<argument pos:start="107:26" pos:end="107:29"><expr pos:start="107:26" pos:end="107:29"><name pos:start="107:26" pos:end="107:29">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:30"><expr pos:start="109:5" pos:end="109:29"><call pos:start="109:5" pos:end="109:29"><name pos:start="109:5" pos:end="109:23">test_smbios_structs</name><argument_list pos:start="109:24" pos:end="109:29">(<argument pos:start="109:25" pos:end="109:28"><expr pos:start="109:25" pos:end="109:28"><name pos:start="109:25" pos:end="109:28">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="113:5" pos:end="113:29"><expr pos:start="113:5" pos:end="113:28"><call pos:start="113:5" pos:end="113:28"><name pos:start="113:5" pos:end="113:14">qtest_quit</name><argument_list pos:start="113:15" pos:end="113:28">(<argument pos:start="113:16" pos:end="113:27"><expr pos:start="113:16" pos:end="113:27"><name pos:start="113:16" pos:end="113:27">global_qtest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:17"><expr pos:start="115:5" pos:end="115:16"><call pos:start="115:5" pos:end="115:16"><name pos:start="115:5" pos:end="115:10">g_free</name><argument_list pos:start="115:11" pos:end="115:16">(<argument pos:start="115:12" pos:end="115:15"><expr pos:start="115:12" pos:end="115:15"><name pos:start="115:12" pos:end="115:15">args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
