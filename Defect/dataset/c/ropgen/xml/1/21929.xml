<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21929.c" pos:tabs="8"><function pos:start="1:1" pos:end="61:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">read_motion_values</name><parameter_list pos:start="1:30" pos:end="1:82">(<parameter pos:start="1:31" pos:end="1:51"><decl pos:start="1:31" pos:end="1:51"><type pos:start="1:31" pos:end="1:51"><name pos:start="1:31" pos:end="1:44">AVCodecContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:51">avctx</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:70"><decl pos:start="1:54" pos:end="1:70"><type pos:start="1:54" pos:end="1:70"><name pos:start="1:54" pos:end="1:66">GetBitContext</name> <modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:70">gb</name></decl></parameter>, <parameter pos:start="1:73" pos:end="1:81"><decl pos:start="1:73" pos:end="1:81"><type pos:start="1:73" pos:end="1:81"><name pos:start="1:73" pos:end="1:78">Bundle</name> <modifier pos:start="1:80" pos:end="1:80">*</modifier></type><name pos:start="1:81" pos:end="1:81">b</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="61:1">{<block_content pos:start="5:5" pos:end="59:13">

    <decl_stmt pos:start="5:5" pos:end="5:19"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">t</name></decl>, <decl pos:start="5:12" pos:end="5:15"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:15">sign</name></decl>, <decl pos:start="5:18" pos:end="5:18"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:18" pos:end="5:18">v</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:27"><decl pos:start="7:5" pos:end="7:26"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">uint8_t</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:26">dec_end</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:29"><expr pos:start="11:5" pos:end="11:28"><call pos:start="11:5" pos:end="11:28"><name pos:start="11:5" pos:end="11:18">CHECK_READ_VAL</name><argument_list pos:start="11:19" pos:end="11:28">(<argument pos:start="11:20" pos:end="11:21"><expr pos:start="11:20" pos:end="11:21"><name pos:start="11:20" pos:end="11:21">gb</name></expr></argument>, <argument pos:start="11:24" pos:end="11:24"><expr pos:start="11:24" pos:end="11:24"><name pos:start="11:24" pos:end="11:24">b</name></expr></argument>, <argument pos:start="11:27" pos:end="11:27"><expr pos:start="11:27" pos:end="11:27"><name pos:start="11:27" pos:end="11:27">t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:29"><expr pos:start="13:5" pos:end="13:28"><name pos:start="13:5" pos:end="13:11">dec_end</name> <operator pos:start="13:13" pos:end="13:13">=</operator> <name pos:start="13:15" pos:end="13:24"><name pos:start="13:15" pos:end="13:15">b</name><operator pos:start="13:16" pos:end="13:17">-&gt;</operator><name pos:start="13:18" pos:end="13:24">cur_dec</name></name> <operator pos:start="13:26" pos:end="13:26">+</operator> <name pos:start="13:28" pos:end="13:28">t</name></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="21:5"><if pos:start="15:5" pos:end="21:5">if <condition pos:start="15:8" pos:end="15:30">(<expr pos:start="15:9" pos:end="15:29"><name pos:start="15:9" pos:end="15:15">dec_end</name> <operator pos:start="15:17" pos:end="15:17">&gt;</operator> <name pos:start="15:19" pos:end="15:29"><name pos:start="15:19" pos:end="15:19">b</name><operator pos:start="15:20" pos:end="15:21">-&gt;</operator><name pos:start="15:22" pos:end="15:29">data_end</name></name></expr>)</condition> <block pos:start="15:32" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:18">

        <expr_stmt pos:start="17:9" pos:end="17:64"><expr pos:start="17:9" pos:end="17:63"><call pos:start="17:9" pos:end="17:63"><name pos:start="17:9" pos:end="17:14">av_log</name><argument_list pos:start="17:15" pos:end="17:63">(<argument pos:start="17:16" pos:end="17:20"><expr pos:start="17:16" pos:end="17:20"><name pos:start="17:16" pos:end="17:20">avctx</name></expr></argument>, <argument pos:start="17:23" pos:end="17:34"><expr pos:start="17:23" pos:end="17:34"><name pos:start="17:23" pos:end="17:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="17:37" pos:end="17:62"><expr pos:start="17:37" pos:end="17:62"><literal type="string" pos:start="17:37" pos:end="17:62">"Too many motion values\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:18">return <expr pos:start="19:16" pos:end="19:17"><operator pos:start="19:16" pos:end="19:16">-</operator><literal type="number" pos:start="19:17" pos:end="19:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="23:5" pos:end="57:5"><if pos:start="23:5" pos:end="39:5">if <condition pos:start="23:8" pos:end="23:22">(<expr pos:start="23:9" pos:end="23:21"><call pos:start="23:9" pos:end="23:21"><name pos:start="23:9" pos:end="23:17">get_bits1</name><argument_list pos:start="23:18" pos:end="23:21">(<argument pos:start="23:19" pos:end="23:20"><expr pos:start="23:19" pos:end="23:20"><name pos:start="23:19" pos:end="23:20">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="23:24" pos:end="39:5">{<block_content pos:start="25:9" pos:end="37:24">

        <expr_stmt pos:start="25:9" pos:end="25:28"><expr pos:start="25:9" pos:end="25:27"><name pos:start="25:9" pos:end="25:9">v</name> <operator pos:start="25:11" pos:end="25:11">=</operator> <call pos:start="25:13" pos:end="25:27"><name pos:start="25:13" pos:end="25:20">get_bits</name><argument_list pos:start="25:21" pos:end="25:27">(<argument pos:start="25:22" pos:end="25:23"><expr pos:start="25:22" pos:end="25:23"><name pos:start="25:22" pos:end="25:23">gb</name></expr></argument>, <argument pos:start="25:26" pos:end="25:26"><expr pos:start="25:26" pos:end="25:26"><literal type="number" pos:start="25:26" pos:end="25:26">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="27:9" pos:end="33:9"><if pos:start="27:9" pos:end="33:9">if <condition pos:start="27:12" pos:end="27:14">(<expr pos:start="27:13" pos:end="27:13"><name pos:start="27:13" pos:end="27:13">v</name></expr>)</condition> <block pos:start="27:16" pos:end="33:9">{<block_content pos:start="29:13" pos:end="31:34">

            <expr_stmt pos:start="29:13" pos:end="29:34"><expr pos:start="29:13" pos:end="29:33"><name pos:start="29:13" pos:end="29:16">sign</name> <operator pos:start="29:18" pos:end="29:18">=</operator> <operator pos:start="29:20" pos:end="29:20">-</operator><call pos:start="29:21" pos:end="29:33"><name pos:start="29:21" pos:end="29:29">get_bits1</name><argument_list pos:start="29:30" pos:end="29:33">(<argument pos:start="29:31" pos:end="29:32"><expr pos:start="29:31" pos:end="29:32"><name pos:start="29:31" pos:end="29:32">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="31:13" pos:end="31:34"><expr pos:start="31:13" pos:end="31:33"><name pos:start="31:13" pos:end="31:13">v</name> <operator pos:start="31:15" pos:end="31:15">=</operator> <operator pos:start="31:17" pos:end="31:17">(</operator><name pos:start="31:18" pos:end="31:18">v</name> <operator pos:start="31:20" pos:end="31:20">^</operator> <name pos:start="31:22" pos:end="31:25">sign</name><operator pos:start="31:26" pos:end="31:26">)</operator> <operator pos:start="31:28" pos:end="31:28">-</operator> <name pos:start="31:30" pos:end="31:33">sign</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:33"><expr pos:start="35:9" pos:end="35:32"><call pos:start="35:9" pos:end="35:32"><name pos:start="35:9" pos:end="35:14">memset</name><argument_list pos:start="35:15" pos:end="35:32">(<argument pos:start="35:16" pos:end="35:25"><expr pos:start="35:16" pos:end="35:25"><name pos:start="35:16" pos:end="35:25"><name pos:start="35:16" pos:end="35:16">b</name><operator pos:start="35:17" pos:end="35:18">-&gt;</operator><name pos:start="35:19" pos:end="35:25">cur_dec</name></name></expr></argument>, <argument pos:start="35:28" pos:end="35:28"><expr pos:start="35:28" pos:end="35:28"><name pos:start="35:28" pos:end="35:28">v</name></expr></argument>, <argument pos:start="35:31" pos:end="35:31"><expr pos:start="35:31" pos:end="35:31"><name pos:start="35:31" pos:end="35:31">t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:24"><expr pos:start="37:9" pos:end="37:23"><name pos:start="37:9" pos:end="37:18"><name pos:start="37:9" pos:end="37:9">b</name><operator pos:start="37:10" pos:end="37:11">-&gt;</operator><name pos:start="37:12" pos:end="37:18">cur_dec</name></name> <operator pos:start="37:20" pos:end="37:21">+=</operator> <name pos:start="37:23" pos:end="37:23">t</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="39:7" pos:end="57:5">else <block pos:start="39:12" pos:end="57:5">{<block_content pos:start="41:9" pos:end="55:39">

        <do pos:start="41:9" pos:end="55:39">do <block pos:start="41:12" pos:end="55:9">{<block_content pos:start="43:13" pos:end="53:30">

            <expr_stmt pos:start="43:13" pos:end="43:38"><expr pos:start="43:13" pos:end="43:37"><name pos:start="43:13" pos:end="43:13">v</name> <operator pos:start="43:15" pos:end="43:15">=</operator> <call pos:start="43:17" pos:end="43:37"><name pos:start="43:17" pos:end="43:24">GET_HUFF</name><argument_list pos:start="43:25" pos:end="43:37">(<argument pos:start="43:26" pos:end="43:27"><expr pos:start="43:26" pos:end="43:27"><name pos:start="43:26" pos:end="43:27">gb</name></expr></argument>, <argument pos:start="43:30" pos:end="43:36"><expr pos:start="43:30" pos:end="43:36"><name pos:start="43:30" pos:end="43:36"><name pos:start="43:30" pos:end="43:30">b</name><operator pos:start="43:31" pos:end="43:32">-&gt;</operator><name pos:start="43:33" pos:end="43:36">tree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="45:13" pos:end="51:13"><if pos:start="45:13" pos:end="51:13">if <condition pos:start="45:16" pos:end="45:18">(<expr pos:start="45:17" pos:end="45:17"><name pos:start="45:17" pos:end="45:17">v</name></expr>)</condition> <block pos:start="45:20" pos:end="51:13">{<block_content pos:start="47:17" pos:end="49:38">

                <expr_stmt pos:start="47:17" pos:end="47:38"><expr pos:start="47:17" pos:end="47:37"><name pos:start="47:17" pos:end="47:20">sign</name> <operator pos:start="47:22" pos:end="47:22">=</operator> <operator pos:start="47:24" pos:end="47:24">-</operator><call pos:start="47:25" pos:end="47:37"><name pos:start="47:25" pos:end="47:33">get_bits1</name><argument_list pos:start="47:34" pos:end="47:37">(<argument pos:start="47:35" pos:end="47:36"><expr pos:start="47:35" pos:end="47:36"><name pos:start="47:35" pos:end="47:36">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="49:17" pos:end="49:38"><expr pos:start="49:17" pos:end="49:37"><name pos:start="49:17" pos:end="49:17">v</name> <operator pos:start="49:19" pos:end="49:19">=</operator> <operator pos:start="49:21" pos:end="49:21">(</operator><name pos:start="49:22" pos:end="49:22">v</name> <operator pos:start="49:24" pos:end="49:24">^</operator> <name pos:start="49:26" pos:end="49:29">sign</name><operator pos:start="49:30" pos:end="49:30">)</operator> <operator pos:start="49:32" pos:end="49:32">-</operator> <name pos:start="49:34" pos:end="49:37">sign</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:30"><expr pos:start="53:13" pos:end="53:29"><operator pos:start="53:13" pos:end="53:13">*</operator><name pos:start="53:14" pos:end="53:23"><name pos:start="53:14" pos:end="53:14">b</name><operator pos:start="53:15" pos:end="53:16">-&gt;</operator><name pos:start="53:17" pos:end="53:23">cur_dec</name></name><operator pos:start="53:24" pos:end="53:25">++</operator> <operator pos:start="53:27" pos:end="53:27">=</operator> <name pos:start="53:29" pos:end="53:29">v</name></expr>;</expr_stmt>

        </block_content>}</block> while <condition pos:start="55:17" pos:end="55:38">(<expr pos:start="55:18" pos:end="55:37"><name pos:start="55:18" pos:end="55:27"><name pos:start="55:18" pos:end="55:18">b</name><operator pos:start="55:19" pos:end="55:20">-&gt;</operator><name pos:start="55:21" pos:end="55:27">cur_dec</name></name> <operator pos:start="55:29" pos:end="55:29">&lt;</operator> <name pos:start="55:31" pos:end="55:37">dec_end</name></expr>)</condition>;</do>

    </block_content>}</block></else></if_stmt>

    <return pos:start="59:5" pos:end="59:13">return <expr pos:start="59:12" pos:end="59:12"><literal type="number" pos:start="59:12" pos:end="59:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
