<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11656.c" pos:tabs="8"><function pos:start="1:1" pos:end="225:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">qemu_rbd_open</name><parameter_list pos:start="1:25" pos:end="1:73">(<parameter pos:start="1:26" pos:end="1:45"><decl pos:start="1:26" pos:end="1:45"><type pos:start="1:26" pos:end="1:45"><name pos:start="1:26" pos:end="1:41">BlockDriverState</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:45">bs</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:61"><decl pos:start="1:48" pos:end="1:61"><type pos:start="1:48" pos:end="1:61"><name pos:start="1:48" pos:end="1:52">QDict</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:61">options</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:72"><decl pos:start="1:64" pos:end="1:72"><type pos:start="1:64" pos:end="1:72"><name pos:start="1:64" pos:end="1:66">int</name></type> <name pos:start="1:68" pos:end="1:72">flags</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="225:1">{<block_content pos:start="5:5" pos:end="223:13">

    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:32"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">BDRVRBDState</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:19">s</name> <init pos:start="5:21" pos:end="5:32">= <expr pos:start="5:23" pos:end="5:32"><name pos:start="5:23" pos:end="5:32"><name pos:start="5:23" pos:end="5:24">bs</name><operator pos:start="5:25" pos:end="5:26">-&gt;</operator><name pos:start="5:27" pos:end="5:32">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">char</name></type> <name pos:start="7:10" pos:end="7:37"><name pos:start="7:10" pos:end="7:13">pool</name><index pos:start="7:14" pos:end="7:37">[<expr pos:start="7:15" pos:end="7:36"><name pos:start="7:15" pos:end="7:36">RBD_MAX_POOL_NAME_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:42"><decl pos:start="9:5" pos:end="9:41"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">char</name></type> <name pos:start="9:10" pos:end="9:41"><name pos:start="9:10" pos:end="9:17">snap_buf</name><index pos:start="9:18" pos:end="9:41">[<expr pos:start="9:19" pos:end="9:40"><name pos:start="9:19" pos:end="9:40">RBD_MAX_SNAP_NAME_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:33"><decl pos:start="11:5" pos:end="11:32"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">char</name></type> <name pos:start="11:10" pos:end="11:32"><name pos:start="11:10" pos:end="11:13">conf</name><index pos:start="11:14" pos:end="11:32">[<expr pos:start="11:15" pos:end="11:31"><name pos:start="11:15" pos:end="11:31">RBD_MAX_CONF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:43"><decl pos:start="13:5" pos:end="13:42"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">char</name></type> <name pos:start="13:10" pos:end="13:42"><name pos:start="13:10" pos:end="13:23">clientname_buf</name><index pos:start="13:24" pos:end="13:42">[<expr pos:start="13:25" pos:end="13:41"><name pos:start="13:25" pos:end="13:41">RBD_MAX_CONF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">char</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:20">clientname</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:12">QemuOpts</name> <modifier pos:start="17:14" pos:end="17:14">*</modifier></type><name pos:start="17:15" pos:end="17:18">opts</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:28"><decl pos:start="19:5" pos:end="19:27"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:9">Error</name> <modifier pos:start="19:11" pos:end="19:11">*</modifier></type><name pos:start="19:12" pos:end="19:20">local_err</name> <init pos:start="19:22" pos:end="19:27">= <expr pos:start="19:24" pos:end="19:27"><name pos:start="19:24" pos:end="19:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:25"><decl pos:start="21:5" pos:end="21:24"><type pos:start="21:5" pos:end="21:16"><specifier pos:start="21:5" pos:end="21:9">const</specifier> <name pos:start="21:11" pos:end="21:14">char</name> <modifier pos:start="21:16" pos:end="21:16">*</modifier></type><name pos:start="21:17" pos:end="21:24">filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:10"><decl pos:start="23:5" pos:end="23:9"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:9">r</name></decl>;</decl_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:50"><expr pos:start="27:5" pos:end="27:49"><name pos:start="27:5" pos:end="27:8">opts</name> <operator pos:start="27:10" pos:end="27:10">=</operator> <call pos:start="27:12" pos:end="27:49"><name pos:start="27:12" pos:end="27:34">qemu_opts_create_nofail</name><argument_list pos:start="27:35" pos:end="27:49">(<argument pos:start="27:36" pos:end="27:48"><expr pos:start="27:36" pos:end="27:48"><operator pos:start="27:36" pos:end="27:36">&amp;</operator><name pos:start="27:37" pos:end="27:48">runtime_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:54"><expr pos:start="29:5" pos:end="29:53"><call pos:start="29:5" pos:end="29:53"><name pos:start="29:5" pos:end="29:26">qemu_opts_absorb_qdict</name><argument_list pos:start="29:27" pos:end="29:53">(<argument pos:start="29:28" pos:end="29:31"><expr pos:start="29:28" pos:end="29:31"><name pos:start="29:28" pos:end="29:31">opts</name></expr></argument>, <argument pos:start="29:34" pos:end="29:40"><expr pos:start="29:34" pos:end="29:40"><name pos:start="29:34" pos:end="29:40">options</name></expr></argument>, <argument pos:start="29:43" pos:end="29:52"><expr pos:start="29:43" pos:end="29:52"><operator pos:start="29:43" pos:end="29:43">&amp;</operator><name pos:start="29:44" pos:end="29:52">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="41:5"><if pos:start="31:5" pos:end="41:5">if <condition pos:start="31:8" pos:end="31:33">(<expr pos:start="31:9" pos:end="31:32"><call pos:start="31:9" pos:end="31:32"><name pos:start="31:9" pos:end="31:20">error_is_set</name><argument_list pos:start="31:21" pos:end="31:32">(<argument pos:start="31:22" pos:end="31:31"><expr pos:start="31:22" pos:end="31:31"><operator pos:start="31:22" pos:end="31:22">&amp;</operator><name pos:start="31:23" pos:end="31:31">local_err</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="31:35" pos:end="41:5">{<block_content pos:start="33:9" pos:end="39:23">

        <expr_stmt pos:start="33:9" pos:end="33:37"><expr pos:start="33:9" pos:end="33:36"><call pos:start="33:9" pos:end="33:36"><name pos:start="33:9" pos:end="33:25">qerror_report_err</name><argument_list pos:start="33:26" pos:end="33:36">(<argument pos:start="33:27" pos:end="33:35"><expr pos:start="33:27" pos:end="33:35"><name pos:start="33:27" pos:end="33:35">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:30"><expr pos:start="35:9" pos:end="35:29"><call pos:start="35:9" pos:end="35:29"><name pos:start="35:9" pos:end="35:18">error_free</name><argument_list pos:start="35:19" pos:end="35:29">(<argument pos:start="35:20" pos:end="35:28"><expr pos:start="35:20" pos:end="35:28"><name pos:start="35:20" pos:end="35:28">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:28"><expr pos:start="37:9" pos:end="37:27"><call pos:start="37:9" pos:end="37:27"><name pos:start="37:9" pos:end="37:21">qemu_opts_del</name><argument_list pos:start="37:22" pos:end="37:27">(<argument pos:start="37:23" pos:end="37:26"><expr pos:start="37:23" pos:end="37:26"><name pos:start="37:23" pos:end="37:26">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:23">return <expr pos:start="39:16" pos:end="39:22"><operator pos:start="39:16" pos:end="39:16">-</operator><name pos:start="39:17" pos:end="39:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:46"><expr pos:start="45:5" pos:end="45:45"><name pos:start="45:5" pos:end="45:12">filename</name> <operator pos:start="45:14" pos:end="45:14">=</operator> <call pos:start="45:16" pos:end="45:45"><name pos:start="45:16" pos:end="45:27">qemu_opt_get</name><argument_list pos:start="45:28" pos:end="45:45">(<argument pos:start="45:29" pos:end="45:32"><expr pos:start="45:29" pos:end="45:32"><name pos:start="45:29" pos:end="45:32">opts</name></expr></argument>, <argument pos:start="45:35" pos:end="45:44"><expr pos:start="45:35" pos:end="45:44"><literal type="string" pos:start="45:35" pos:end="45:44">"filename"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:24"><expr pos:start="47:5" pos:end="47:23"><call pos:start="47:5" pos:end="47:23"><name pos:start="47:5" pos:end="47:17">qemu_opts_del</name><argument_list pos:start="47:18" pos:end="47:23">(<argument pos:start="47:19" pos:end="47:22"><expr pos:start="47:19" pos:end="47:22"><name pos:start="47:19" pos:end="47:22">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="51:5" pos:end="61:5"><if pos:start="51:5" pos:end="61:5">if <condition pos:start="51:8" pos:end="57:51">(<expr pos:start="51:9" pos:end="57:50"><call pos:start="51:9" pos:end="57:46"><name pos:start="51:9" pos:end="51:26">qemu_rbd_parsename</name><argument_list pos:start="51:27" pos:end="57:46">(<argument pos:start="51:28" pos:end="51:35"><expr pos:start="51:28" pos:end="51:35"><name pos:start="51:28" pos:end="51:35">filename</name></expr></argument>, <argument pos:start="51:38" pos:end="51:41"><expr pos:start="51:38" pos:end="51:41"><name pos:start="51:38" pos:end="51:41">pool</name></expr></argument>, <argument pos:start="51:44" pos:end="51:55"><expr pos:start="51:44" pos:end="51:55"><sizeof pos:start="51:44" pos:end="51:55">sizeof<argument_list pos:start="51:50" pos:end="51:55">(<argument pos:start="51:51" pos:end="51:54"><expr pos:start="51:51" pos:end="51:54"><name pos:start="51:51" pos:end="51:54">pool</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                           <argument pos:start="53:28" pos:end="53:35"><expr pos:start="53:28" pos:end="53:35"><name pos:start="53:28" pos:end="53:35">snap_buf</name></expr></argument>, <argument pos:start="53:38" pos:end="53:53"><expr pos:start="53:38" pos:end="53:53"><sizeof pos:start="53:38" pos:end="53:53">sizeof<argument_list pos:start="53:44" pos:end="53:53">(<argument pos:start="53:45" pos:end="53:52"><expr pos:start="53:45" pos:end="53:52"><name pos:start="53:45" pos:end="53:52">snap_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                           <argument pos:start="55:28" pos:end="55:34"><expr pos:start="55:28" pos:end="55:34"><name pos:start="55:28" pos:end="55:34"><name pos:start="55:28" pos:end="55:28">s</name><operator pos:start="55:29" pos:end="55:30">-&gt;</operator><name pos:start="55:31" pos:end="55:34">name</name></name></expr></argument>, <argument pos:start="55:37" pos:end="55:51"><expr pos:start="55:37" pos:end="55:51"><sizeof pos:start="55:37" pos:end="55:51">sizeof<argument_list pos:start="55:43" pos:end="55:51">(<argument pos:start="55:44" pos:end="55:50"><expr pos:start="55:44" pos:end="55:50"><name pos:start="55:44" pos:end="55:50"><name pos:start="55:44" pos:end="55:44">s</name><operator pos:start="55:45" pos:end="55:46">-&gt;</operator><name pos:start="55:47" pos:end="55:50">name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,

                           <argument pos:start="57:28" pos:end="57:31"><expr pos:start="57:28" pos:end="57:31"><name pos:start="57:28" pos:end="57:31">conf</name></expr></argument>, <argument pos:start="57:34" pos:end="57:45"><expr pos:start="57:34" pos:end="57:45"><sizeof pos:start="57:34" pos:end="57:45">sizeof<argument_list pos:start="57:40" pos:end="57:45">(<argument pos:start="57:41" pos:end="57:44"><expr pos:start="57:41" pos:end="57:44"><name pos:start="57:41" pos:end="57:44">conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="57:48" pos:end="57:48">&lt;</operator> <literal type="number" pos:start="57:50" pos:end="57:50">0</literal></expr>)</condition> <block pos:start="57:53" pos:end="61:5">{<block_content pos:start="59:9" pos:end="59:23">

        <return pos:start="59:9" pos:end="59:23">return <expr pos:start="59:16" pos:end="59:22"><operator pos:start="59:16" pos:end="59:16">-</operator><name pos:start="59:17" pos:end="59:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:65"><expr pos:start="65:5" pos:end="65:64"><name pos:start="65:5" pos:end="65:14">clientname</name> <operator pos:start="65:16" pos:end="65:16">=</operator> <call pos:start="65:18" pos:end="65:64"><name pos:start="65:18" pos:end="65:42">qemu_rbd_parse_clientname</name><argument_list pos:start="65:43" pos:end="65:64">(<argument pos:start="65:44" pos:end="65:47"><expr pos:start="65:44" pos:end="65:47"><name pos:start="65:44" pos:end="65:47">conf</name></expr></argument>, <argument pos:start="65:50" pos:end="65:63"><expr pos:start="65:50" pos:end="65:63"><name pos:start="65:50" pos:end="65:63">clientname_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:46"><expr pos:start="67:5" pos:end="67:45"><name pos:start="67:5" pos:end="67:5">r</name> <operator pos:start="67:7" pos:end="67:7">=</operator> <call pos:start="67:9" pos:end="67:45"><name pos:start="67:9" pos:end="67:20">rados_create</name><argument_list pos:start="67:21" pos:end="67:45">(<argument pos:start="67:22" pos:end="67:32"><expr pos:start="67:22" pos:end="67:32"><operator pos:start="67:22" pos:end="67:22">&amp;</operator><name pos:start="67:23" pos:end="67:32"><name pos:start="67:23" pos:end="67:23">s</name><operator pos:start="67:24" pos:end="67:25">-&gt;</operator><name pos:start="67:26" pos:end="67:32">cluster</name></name></expr></argument>, <argument pos:start="67:35" pos:end="67:44"><expr pos:start="67:35" pos:end="67:44"><name pos:start="67:35" pos:end="67:44">clientname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="69:5" pos:end="75:5"><if pos:start="69:5" pos:end="75:5">if <condition pos:start="69:8" pos:end="69:14">(<expr pos:start="69:9" pos:end="69:13"><name pos:start="69:9" pos:end="69:9">r</name> <operator pos:start="69:11" pos:end="69:11">&lt;</operator> <literal type="number" pos:start="69:13" pos:end="69:13">0</literal></expr>)</condition> <block pos:start="69:16" pos:end="75:5">{<block_content pos:start="71:9" pos:end="73:17">

        <expr_stmt pos:start="71:9" pos:end="71:43"><expr pos:start="71:9" pos:end="71:42"><call pos:start="71:9" pos:end="71:42"><name pos:start="71:9" pos:end="71:20">error_report</name><argument_list pos:start="71:21" pos:end="71:42">(<argument pos:start="71:22" pos:end="71:41"><expr pos:start="71:22" pos:end="71:41"><literal type="string" pos:start="71:22" pos:end="71:41">"error initializing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="73:9" pos:end="73:17">return <expr pos:start="73:16" pos:end="73:16"><name pos:start="73:16" pos:end="73:16">r</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:19"><expr pos:start="79:5" pos:end="79:18"><name pos:start="79:5" pos:end="79:11"><name pos:start="79:5" pos:end="79:5">s</name><operator pos:start="79:6" pos:end="79:7">-&gt;</operator><name pos:start="79:8" pos:end="79:11">snap</name></name> <operator pos:start="79:13" pos:end="79:13">=</operator> <name pos:start="79:15" pos:end="79:18">NULL</name></expr>;</expr_stmt>

    <if_stmt pos:start="81:5" pos:end="85:5"><if pos:start="81:5" pos:end="85:5">if <condition pos:start="81:8" pos:end="81:28">(<expr pos:start="81:9" pos:end="81:27"><name pos:start="81:9" pos:end="81:19"><name pos:start="81:9" pos:end="81:16">snap_buf</name><index pos:start="81:17" pos:end="81:19">[<expr pos:start="81:18" pos:end="81:18"><literal type="number" pos:start="81:18" pos:end="81:18">0</literal></expr>]</index></name> <operator pos:start="81:21" pos:end="81:22">!=</operator> <literal type="char" pos:start="81:24" pos:end="81:27">'\0'</literal></expr>)</condition> <block pos:start="81:30" pos:end="85:5">{<block_content pos:start="83:9" pos:end="83:37">

        <expr_stmt pos:start="83:9" pos:end="83:37"><expr pos:start="83:9" pos:end="83:36"><name pos:start="83:9" pos:end="83:15"><name pos:start="83:9" pos:end="83:9">s</name><operator pos:start="83:10" pos:end="83:11">-&gt;</operator><name pos:start="83:12" pos:end="83:15">snap</name></name> <operator pos:start="83:17" pos:end="83:17">=</operator> <call pos:start="83:19" pos:end="83:36"><name pos:start="83:19" pos:end="83:26">g_strdup</name><argument_list pos:start="83:27" pos:end="83:36">(<argument pos:start="83:28" pos:end="83:35"><expr pos:start="83:28" pos:end="83:35"><name pos:start="83:28" pos:end="83:35">snap_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="89:5" pos:end="101:7">/*

     * Fallback to more conservative semantics if setting cache

     * options fails. Ignore errors from setting rbd_cache because the

     * only possible error is that the option does not exist, and

     * librbd defaults to no caching. If write through caching cannot

     * be set up, fall back to no caching.

     */</comment>

    <if_stmt pos:start="103:5" pos:end="111:5"><if pos:start="103:5" pos:end="107:5">if <condition pos:start="103:8" pos:end="103:31">(<expr pos:start="103:9" pos:end="103:30"><name pos:start="103:9" pos:end="103:13">flags</name> <operator pos:start="103:15" pos:end="103:15">&amp;</operator> <name pos:start="103:17" pos:end="103:30">BDRV_O_NOCACHE</name></expr>)</condition> <block pos:start="103:33" pos:end="107:5">{<block_content pos:start="105:9" pos:end="105:57">

        <expr_stmt pos:start="105:9" pos:end="105:57"><expr pos:start="105:9" pos:end="105:56"><call pos:start="105:9" pos:end="105:56"><name pos:start="105:9" pos:end="105:22">rados_conf_set</name><argument_list pos:start="105:23" pos:end="105:56">(<argument pos:start="105:24" pos:end="105:33"><expr pos:start="105:24" pos:end="105:33"><name pos:start="105:24" pos:end="105:33"><name pos:start="105:24" pos:end="105:24">s</name><operator pos:start="105:25" pos:end="105:26">-&gt;</operator><name pos:start="105:27" pos:end="105:33">cluster</name></name></expr></argument>, <argument pos:start="105:36" pos:end="105:46"><expr pos:start="105:36" pos:end="105:46"><literal type="string" pos:start="105:36" pos:end="105:46">"rbd_cache"</literal></expr></argument>, <argument pos:start="105:49" pos:end="105:55"><expr pos:start="105:49" pos:end="105:55"><literal type="string" pos:start="105:49" pos:end="105:55">"false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="107:7" pos:end="111:5">else <block pos:start="107:12" pos:end="111:5">{<block_content pos:start="109:9" pos:end="109:56">

        <expr_stmt pos:start="109:9" pos:end="109:56"><expr pos:start="109:9" pos:end="109:55"><call pos:start="109:9" pos:end="109:55"><name pos:start="109:9" pos:end="109:22">rados_conf_set</name><argument_list pos:start="109:23" pos:end="109:55">(<argument pos:start="109:24" pos:end="109:33"><expr pos:start="109:24" pos:end="109:33"><name pos:start="109:24" pos:end="109:33"><name pos:start="109:24" pos:end="109:24">s</name><operator pos:start="109:25" pos:end="109:26">-&gt;</operator><name pos:start="109:27" pos:end="109:33">cluster</name></name></expr></argument>, <argument pos:start="109:36" pos:end="109:46"><expr pos:start="109:36" pos:end="109:46"><literal type="string" pos:start="109:36" pos:end="109:46">"rbd_cache"</literal></expr></argument>, <argument pos:start="109:49" pos:end="109:54"><expr pos:start="109:49" pos:end="109:54"><literal type="string" pos:start="109:49" pos:end="109:54">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="115:5" pos:end="121:5"><if pos:start="115:5" pos:end="121:5">if <condition pos:start="115:8" pos:end="115:38">(<expr pos:start="115:9" pos:end="115:37"><call pos:start="115:9" pos:end="115:29"><name pos:start="115:9" pos:end="115:14">strstr</name><argument_list pos:start="115:15" pos:end="115:29">(<argument pos:start="115:16" pos:end="115:19"><expr pos:start="115:16" pos:end="115:19"><name pos:start="115:16" pos:end="115:19">conf</name></expr></argument>, <argument pos:start="115:22" pos:end="115:28"><expr pos:start="115:22" pos:end="115:28"><literal type="string" pos:start="115:22" pos:end="115:28">"conf="</literal></expr></argument>)</argument_list></call> <operator pos:start="115:31" pos:end="115:32">==</operator> <name pos:start="115:34" pos:end="115:37">NULL</name></expr>)</condition> <block pos:start="115:40" pos:end="121:5">{<block_content pos:start="119:9" pos:end="119:47">

        <comment type="block" pos:start="117:9" pos:end="117:54">/* try default location, but ignore failure */</comment>

        <expr_stmt pos:start="119:9" pos:end="119:47"><expr pos:start="119:9" pos:end="119:46"><call pos:start="119:9" pos:end="119:46"><name pos:start="119:9" pos:end="119:28">rados_conf_read_file</name><argument_list pos:start="119:29" pos:end="119:46">(<argument pos:start="119:30" pos:end="119:39"><expr pos:start="119:30" pos:end="119:39"><name pos:start="119:30" pos:end="119:39"><name pos:start="119:30" pos:end="119:30">s</name><operator pos:start="119:31" pos:end="119:32">-&gt;</operator><name pos:start="119:33" pos:end="119:39">cluster</name></name></expr></argument>, <argument pos:start="119:42" pos:end="119:45"><expr pos:start="119:42" pos:end="119:45"><name pos:start="119:42" pos:end="119:45">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="125:5" pos:end="137:5"><if pos:start="125:5" pos:end="137:5">if <condition pos:start="125:8" pos:end="125:24">(<expr pos:start="125:9" pos:end="125:23"><name pos:start="125:9" pos:end="125:15"><name pos:start="125:9" pos:end="125:12">conf</name><index pos:start="125:13" pos:end="125:15">[<expr pos:start="125:14" pos:end="125:14"><literal type="number" pos:start="125:14" pos:end="125:14">0</literal></expr>]</index></name> <operator pos:start="125:17" pos:end="125:18">!=</operator> <literal type="char" pos:start="125:20" pos:end="125:23">'\0'</literal></expr>)</condition> <block pos:start="125:26" pos:end="137:5">{<block_content pos:start="127:9" pos:end="135:9">

        <expr_stmt pos:start="127:9" pos:end="127:48"><expr pos:start="127:9" pos:end="127:47"><name pos:start="127:9" pos:end="127:9">r</name> <operator pos:start="127:11" pos:end="127:11">=</operator> <call pos:start="127:13" pos:end="127:47"><name pos:start="127:13" pos:end="127:29">qemu_rbd_set_conf</name><argument_list pos:start="127:30" pos:end="127:47">(<argument pos:start="127:31" pos:end="127:40"><expr pos:start="127:31" pos:end="127:40"><name pos:start="127:31" pos:end="127:40"><name pos:start="127:31" pos:end="127:31">s</name><operator pos:start="127:32" pos:end="127:33">-&gt;</operator><name pos:start="127:34" pos:end="127:40">cluster</name></name></expr></argument>, <argument pos:start="127:43" pos:end="127:46"><expr pos:start="127:43" pos:end="127:46"><name pos:start="127:43" pos:end="127:46">conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="129:9" pos:end="135:9"><if pos:start="129:9" pos:end="135:9">if <condition pos:start="129:12" pos:end="129:18">(<expr pos:start="129:13" pos:end="129:17"><name pos:start="129:13" pos:end="129:13">r</name> <operator pos:start="129:15" pos:end="129:15">&lt;</operator> <literal type="number" pos:start="129:17" pos:end="129:17">0</literal></expr>)</condition> <block pos:start="129:20" pos:end="135:9">{<block_content pos:start="131:13" pos:end="133:33">

            <expr_stmt pos:start="131:13" pos:end="131:57"><expr pos:start="131:13" pos:end="131:56"><call pos:start="131:13" pos:end="131:56"><name pos:start="131:13" pos:end="131:24">error_report</name><argument_list pos:start="131:25" pos:end="131:56">(<argument pos:start="131:26" pos:end="131:55"><expr pos:start="131:26" pos:end="131:55"><literal type="string" pos:start="131:26" pos:end="131:55">"error setting config options"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="133:13" pos:end="133:33">goto <name pos:start="133:18" pos:end="133:32">failed_shutdown</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="141:5" pos:end="141:34"><expr pos:start="141:5" pos:end="141:33"><name pos:start="141:5" pos:end="141:5">r</name> <operator pos:start="141:7" pos:end="141:7">=</operator> <call pos:start="141:9" pos:end="141:33"><name pos:start="141:9" pos:end="141:21">rados_connect</name><argument_list pos:start="141:22" pos:end="141:33">(<argument pos:start="141:23" pos:end="141:32"><expr pos:start="141:23" pos:end="141:32"><name pos:start="141:23" pos:end="141:32"><name pos:start="141:23" pos:end="141:23">s</name><operator pos:start="141:24" pos:end="141:25">-&gt;</operator><name pos:start="141:26" pos:end="141:32">cluster</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="143:5" pos:end="149:5"><if pos:start="143:5" pos:end="149:5">if <condition pos:start="143:8" pos:end="143:14">(<expr pos:start="143:9" pos:end="143:13"><name pos:start="143:9" pos:end="143:9">r</name> <operator pos:start="143:11" pos:end="143:11">&lt;</operator> <literal type="number" pos:start="143:13" pos:end="143:13">0</literal></expr>)</condition> <block pos:start="143:16" pos:end="149:5">{<block_content pos:start="145:9" pos:end="147:29">

        <expr_stmt pos:start="145:9" pos:end="145:41"><expr pos:start="145:9" pos:end="145:40"><call pos:start="145:9" pos:end="145:40"><name pos:start="145:9" pos:end="145:20">error_report</name><argument_list pos:start="145:21" pos:end="145:40">(<argument pos:start="145:22" pos:end="145:39"><expr pos:start="145:22" pos:end="145:39"><literal type="string" pos:start="145:22" pos:end="145:39">"error connecting"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="147:9" pos:end="147:29">goto <name pos:start="147:14" pos:end="147:28">failed_shutdown</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="153:5" pos:end="153:57"><expr pos:start="153:5" pos:end="153:56"><name pos:start="153:5" pos:end="153:5">r</name> <operator pos:start="153:7" pos:end="153:7">=</operator> <call pos:start="153:9" pos:end="153:56"><name pos:start="153:9" pos:end="153:26">rados_ioctx_create</name><argument_list pos:start="153:27" pos:end="153:56">(<argument pos:start="153:28" pos:end="153:37"><expr pos:start="153:28" pos:end="153:37"><name pos:start="153:28" pos:end="153:37"><name pos:start="153:28" pos:end="153:28">s</name><operator pos:start="153:29" pos:end="153:30">-&gt;</operator><name pos:start="153:31" pos:end="153:37">cluster</name></name></expr></argument>, <argument pos:start="153:40" pos:end="153:43"><expr pos:start="153:40" pos:end="153:43"><name pos:start="153:40" pos:end="153:43">pool</name></expr></argument>, <argument pos:start="153:46" pos:end="153:55"><expr pos:start="153:46" pos:end="153:55"><operator pos:start="153:46" pos:end="153:46">&amp;</operator><name pos:start="153:47" pos:end="153:55"><name pos:start="153:47" pos:end="153:47">s</name><operator pos:start="153:48" pos:end="153:49">-&gt;</operator><name pos:start="153:50" pos:end="153:55">io_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="155:5" pos:end="161:5"><if pos:start="155:5" pos:end="161:5">if <condition pos:start="155:8" pos:end="155:14">(<expr pos:start="155:9" pos:end="155:13"><name pos:start="155:9" pos:end="155:9">r</name> <operator pos:start="155:11" pos:end="155:11">&lt;</operator> <literal type="number" pos:start="155:13" pos:end="155:13">0</literal></expr>)</condition> <block pos:start="155:16" pos:end="161:5">{<block_content pos:start="157:9" pos:end="159:29">

        <expr_stmt pos:start="157:9" pos:end="157:52"><expr pos:start="157:9" pos:end="157:51"><call pos:start="157:9" pos:end="157:51"><name pos:start="157:9" pos:end="157:20">error_report</name><argument_list pos:start="157:21" pos:end="157:51">(<argument pos:start="157:22" pos:end="157:44"><expr pos:start="157:22" pos:end="157:44"><literal type="string" pos:start="157:22" pos:end="157:44">"error opening pool %s"</literal></expr></argument>, <argument pos:start="157:47" pos:end="157:50"><expr pos:start="157:47" pos:end="157:50"><name pos:start="157:47" pos:end="157:50">pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="159:9" pos:end="159:29">goto <name pos:start="159:14" pos:end="159:28">failed_shutdown</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="165:5" pos:end="165:57"><expr pos:start="165:5" pos:end="165:56"><name pos:start="165:5" pos:end="165:5">r</name> <operator pos:start="165:7" pos:end="165:7">=</operator> <call pos:start="165:9" pos:end="165:56"><name pos:start="165:9" pos:end="165:16">rbd_open</name><argument_list pos:start="165:17" pos:end="165:56">(<argument pos:start="165:18" pos:end="165:26"><expr pos:start="165:18" pos:end="165:26"><name pos:start="165:18" pos:end="165:26"><name pos:start="165:18" pos:end="165:18">s</name><operator pos:start="165:19" pos:end="165:20">-&gt;</operator><name pos:start="165:21" pos:end="165:26">io_ctx</name></name></expr></argument>, <argument pos:start="165:29" pos:end="165:35"><expr pos:start="165:29" pos:end="165:35"><name pos:start="165:29" pos:end="165:35"><name pos:start="165:29" pos:end="165:29">s</name><operator pos:start="165:30" pos:end="165:31">-&gt;</operator><name pos:start="165:32" pos:end="165:35">name</name></name></expr></argument>, <argument pos:start="165:38" pos:end="165:46"><expr pos:start="165:38" pos:end="165:46"><operator pos:start="165:38" pos:end="165:38">&amp;</operator><name pos:start="165:39" pos:end="165:46"><name pos:start="165:39" pos:end="165:39">s</name><operator pos:start="165:40" pos:end="165:41">-&gt;</operator><name pos:start="165:42" pos:end="165:46">image</name></name></expr></argument>, <argument pos:start="165:49" pos:end="165:55"><expr pos:start="165:49" pos:end="165:55"><name pos:start="165:49" pos:end="165:55"><name pos:start="165:49" pos:end="165:49">s</name><operator pos:start="165:50" pos:end="165:51">-&gt;</operator><name pos:start="165:52" pos:end="165:55">snap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="167:5" pos:end="173:5"><if pos:start="167:5" pos:end="173:5">if <condition pos:start="167:8" pos:end="167:14">(<expr pos:start="167:9" pos:end="167:13"><name pos:start="167:9" pos:end="167:9">r</name> <operator pos:start="167:11" pos:end="167:11">&lt;</operator> <literal type="number" pos:start="167:13" pos:end="167:13">0</literal></expr>)</condition> <block pos:start="167:16" pos:end="173:5">{<block_content pos:start="169:9" pos:end="171:25">

        <expr_stmt pos:start="169:9" pos:end="169:62"><expr pos:start="169:9" pos:end="169:61"><call pos:start="169:9" pos:end="169:61"><name pos:start="169:9" pos:end="169:20">error_report</name><argument_list pos:start="169:21" pos:end="169:61">(<argument pos:start="169:22" pos:end="169:51"><expr pos:start="169:22" pos:end="169:51"><literal type="string" pos:start="169:22" pos:end="169:51">"error reading header from %s"</literal></expr></argument>, <argument pos:start="169:54" pos:end="169:60"><expr pos:start="169:54" pos:end="169:60"><name pos:start="169:54" pos:end="169:60"><name pos:start="169:54" pos:end="169:54">s</name><operator pos:start="169:55" pos:end="169:56">-&gt;</operator><name pos:start="169:57" pos:end="169:60">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="171:9" pos:end="171:25">goto <name pos:start="171:14" pos:end="171:24">failed_open</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="177:5" pos:end="177:38"><expr pos:start="177:5" pos:end="177:37"><name pos:start="177:5" pos:end="177:17"><name pos:start="177:5" pos:end="177:6">bs</name><operator pos:start="177:7" pos:end="177:8">-&gt;</operator><name pos:start="177:9" pos:end="177:17">read_only</name></name> <operator pos:start="177:19" pos:end="177:19">=</operator> <operator pos:start="177:21" pos:end="177:21">(</operator><name pos:start="177:22" pos:end="177:28"><name pos:start="177:22" pos:end="177:22">s</name><operator pos:start="177:23" pos:end="177:24">-&gt;</operator><name pos:start="177:25" pos:end="177:28">snap</name></name> <operator pos:start="177:30" pos:end="177:31">!=</operator> <name pos:start="177:33" pos:end="177:36">NULL</name><operator pos:start="177:37" pos:end="177:37">)</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="181:5" pos:end="181:28"><expr pos:start="181:5" pos:end="181:27"><name pos:start="181:5" pos:end="181:23"><name pos:start="181:5" pos:end="181:5">s</name><operator pos:start="181:6" pos:end="181:7">-&gt;</operator><name pos:start="181:8" pos:end="181:23">event_reader_pos</name></name> <operator pos:start="181:25" pos:end="181:25">=</operator> <literal type="number" pos:start="181:27" pos:end="181:27">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="183:5" pos:end="183:26"><expr pos:start="183:5" pos:end="183:25"><name pos:start="183:5" pos:end="183:5">r</name> <operator pos:start="183:7" pos:end="183:7">=</operator> <call pos:start="183:9" pos:end="183:25"><name pos:start="183:9" pos:end="183:17">qemu_pipe</name><argument_list pos:start="183:18" pos:end="183:25">(<argument pos:start="183:19" pos:end="183:24"><expr pos:start="183:19" pos:end="183:24"><name pos:start="183:19" pos:end="183:24"><name pos:start="183:19" pos:end="183:19">s</name><operator pos:start="183:20" pos:end="183:21">-&gt;</operator><name pos:start="183:22" pos:end="183:24">fds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="185:5" pos:end="191:5"><if pos:start="185:5" pos:end="191:5">if <condition pos:start="185:8" pos:end="185:14">(<expr pos:start="185:9" pos:end="185:13"><name pos:start="185:9" pos:end="185:9">r</name> <operator pos:start="185:11" pos:end="185:11">&lt;</operator> <literal type="number" pos:start="185:13" pos:end="185:13">0</literal></expr>)</condition> <block pos:start="185:16" pos:end="191:5">{<block_content pos:start="187:9" pos:end="189:20">

        <expr_stmt pos:start="187:9" pos:end="187:46"><expr pos:start="187:9" pos:end="187:45"><call pos:start="187:9" pos:end="187:45"><name pos:start="187:9" pos:end="187:20">error_report</name><argument_list pos:start="187:21" pos:end="187:45">(<argument pos:start="187:22" pos:end="187:44"><expr pos:start="187:22" pos:end="187:44"><literal type="string" pos:start="187:22" pos:end="187:44">"error opening eventfd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="189:9" pos:end="189:20">goto <name pos:start="189:14" pos:end="189:19">failed</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="193:5" pos:end="193:42"><expr pos:start="193:5" pos:end="193:41"><call pos:start="193:5" pos:end="193:41"><name pos:start="193:5" pos:end="193:9">fcntl</name><argument_list pos:start="193:10" pos:end="193:41">(<argument pos:start="193:11" pos:end="193:19"><expr pos:start="193:11" pos:end="193:19"><name pos:start="193:11" pos:end="193:19"><name pos:start="193:11" pos:end="193:11">s</name><operator pos:start="193:12" pos:end="193:13">-&gt;</operator><name pos:start="193:14" pos:end="193:16">fds</name><index pos:start="193:17" pos:end="193:19">[<expr pos:start="193:18" pos:end="193:18"><literal type="number" pos:start="193:18" pos:end="193:18">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="193:22" pos:end="193:28"><expr pos:start="193:22" pos:end="193:28"><name pos:start="193:22" pos:end="193:28">F_SETFL</name></expr></argument>, <argument pos:start="193:31" pos:end="193:40"><expr pos:start="193:31" pos:end="193:40"><name pos:start="193:31" pos:end="193:40">O_NONBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="195:5" pos:end="195:42"><expr pos:start="195:5" pos:end="195:41"><call pos:start="195:5" pos:end="195:41"><name pos:start="195:5" pos:end="195:9">fcntl</name><argument_list pos:start="195:10" pos:end="195:41">(<argument pos:start="195:11" pos:end="195:19"><expr pos:start="195:11" pos:end="195:19"><name pos:start="195:11" pos:end="195:19"><name pos:start="195:11" pos:end="195:11">s</name><operator pos:start="195:12" pos:end="195:13">-&gt;</operator><name pos:start="195:14" pos:end="195:16">fds</name><index pos:start="195:17" pos:end="195:19">[<expr pos:start="195:18" pos:end="195:18"><literal type="number" pos:start="195:18" pos:end="195:18">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="195:22" pos:end="195:28"><expr pos:start="195:22" pos:end="195:28"><name pos:start="195:22" pos:end="195:28">F_SETFL</name></expr></argument>, <argument pos:start="195:31" pos:end="195:40"><expr pos:start="195:31" pos:end="195:40"><name pos:start="195:31" pos:end="195:40">O_NONBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="197:5" pos:end="199:60"><expr pos:start="197:5" pos:end="199:59"><call pos:start="197:5" pos:end="199:59"><name pos:start="197:5" pos:end="197:27">qemu_aio_set_fd_handler</name><argument_list pos:start="197:28" pos:end="199:59">(<argument pos:start="197:29" pos:end="197:47"><expr pos:start="197:29" pos:end="197:47"><name pos:start="197:29" pos:end="197:47"><name pos:start="197:29" pos:end="197:29">s</name><operator pos:start="197:30" pos:end="197:31">-&gt;</operator><name pos:start="197:32" pos:end="197:34">fds</name><index pos:start="197:35" pos:end="197:47">[<expr pos:start="197:36" pos:end="197:46"><name pos:start="197:36" pos:end="197:46">RBD_FD_READ</name></expr>]</index></name></expr></argument>, <argument pos:start="197:50" pos:end="197:74"><expr pos:start="197:50" pos:end="197:74"><name pos:start="197:50" pos:end="197:74">qemu_rbd_aio_event_reader</name></expr></argument>,

                            <argument pos:start="199:29" pos:end="199:32"><expr pos:start="199:29" pos:end="199:32"><name pos:start="199:29" pos:end="199:32">NULL</name></expr></argument>, <argument pos:start="199:35" pos:end="199:55"><expr pos:start="199:35" pos:end="199:55"><name pos:start="199:35" pos:end="199:55">qemu_rbd_aio_flush_cb</name></expr></argument>, <argument pos:start="199:58" pos:end="199:58"><expr pos:start="199:58" pos:end="199:58"><name pos:start="199:58" pos:end="199:58">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    <return pos:start="205:5" pos:end="205:13">return <expr pos:start="205:12" pos:end="205:12"><literal type="number" pos:start="205:12" pos:end="205:12">0</literal></expr>;</return>



<label pos:start="209:1" pos:end="209:7"><name pos:start="209:1" pos:end="209:6">failed</name>:</label>

    <expr_stmt pos:start="211:5" pos:end="211:24"><expr pos:start="211:5" pos:end="211:23"><call pos:start="211:5" pos:end="211:23"><name pos:start="211:5" pos:end="211:13">rbd_close</name><argument_list pos:start="211:14" pos:end="211:23">(<argument pos:start="211:15" pos:end="211:22"><expr pos:start="211:15" pos:end="211:22"><name pos:start="211:15" pos:end="211:22"><name pos:start="211:15" pos:end="211:15">s</name><operator pos:start="211:16" pos:end="211:17">-&gt;</operator><name pos:start="211:18" pos:end="211:22">image</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="213:1" pos:end="213:12"><name pos:start="213:1" pos:end="213:11">failed_open</name>:</label>

    <expr_stmt pos:start="215:5" pos:end="215:35"><expr pos:start="215:5" pos:end="215:34"><call pos:start="215:5" pos:end="215:34"><name pos:start="215:5" pos:end="215:23">rados_ioctx_destroy</name><argument_list pos:start="215:24" pos:end="215:34">(<argument pos:start="215:25" pos:end="215:33"><expr pos:start="215:25" pos:end="215:33"><name pos:start="215:25" pos:end="215:33"><name pos:start="215:25" pos:end="215:25">s</name><operator pos:start="215:26" pos:end="215:27">-&gt;</operator><name pos:start="215:28" pos:end="215:33">io_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="217:1" pos:end="217:16"><name pos:start="217:1" pos:end="217:15">failed_shutdown</name>:</label>

    <expr_stmt pos:start="219:5" pos:end="219:31"><expr pos:start="219:5" pos:end="219:30"><call pos:start="219:5" pos:end="219:30"><name pos:start="219:5" pos:end="219:18">rados_shutdown</name><argument_list pos:start="219:19" pos:end="219:30">(<argument pos:start="219:20" pos:end="219:29"><expr pos:start="219:20" pos:end="219:29"><name pos:start="219:20" pos:end="219:29"><name pos:start="219:20" pos:end="219:20">s</name><operator pos:start="219:21" pos:end="219:22">-&gt;</operator><name pos:start="219:23" pos:end="219:29">cluster</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="221:5" pos:end="221:20"><expr pos:start="221:5" pos:end="221:19"><call pos:start="221:5" pos:end="221:19"><name pos:start="221:5" pos:end="221:10">g_free</name><argument_list pos:start="221:11" pos:end="221:19">(<argument pos:start="221:12" pos:end="221:18"><expr pos:start="221:12" pos:end="221:18"><name pos:start="221:12" pos:end="221:18"><name pos:start="221:12" pos:end="221:12">s</name><operator pos:start="221:13" pos:end="221:14">-&gt;</operator><name pos:start="221:15" pos:end="221:18">snap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="223:5" pos:end="223:13">return <expr pos:start="223:12" pos:end="223:12"><name pos:start="223:12" pos:end="223:12">r</name></expr>;</return>

</block_content>}</block></function>
</unit>
