<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/23473.c" pos:tabs="8"><function pos:start="1:1" pos:end="119:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">integratorcp_init</name><parameter_list pos:start="1:30" pos:end="7:72">(<parameter pos:start="1:31" pos:end="1:49"><decl pos:start="1:31" pos:end="1:49"><type pos:start="1:31" pos:end="1:49"><name pos:start="1:31" pos:end="1:40">ram_addr_t</name></type> <name pos:start="1:42" pos:end="1:49">ram_size</name></decl></parameter>,

                     <parameter pos:start="3:22" pos:end="3:44"><decl pos:start="3:22" pos:end="3:44"><type pos:start="3:22" pos:end="3:44"><specifier pos:start="3:22" pos:end="3:26">const</specifier> <name pos:start="3:28" pos:end="3:31">char</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:44">boot_device</name></decl></parameter>,

                     <parameter pos:start="5:22" pos:end="5:48"><decl pos:start="5:22" pos:end="5:48"><type pos:start="5:22" pos:end="5:48"><specifier pos:start="5:22" pos:end="5:26">const</specifier> <name pos:start="5:28" pos:end="5:31">char</name> <modifier pos:start="5:33" pos:end="5:33">*</modifier></type><name pos:start="5:34" pos:end="5:48">kernel_filename</name></decl></parameter>, <parameter pos:start="5:51" pos:end="5:76"><decl pos:start="5:51" pos:end="5:76"><type pos:start="5:51" pos:end="5:76"><specifier pos:start="5:51" pos:end="5:55">const</specifier> <name pos:start="5:57" pos:end="5:60">char</name> <modifier pos:start="5:62" pos:end="5:62">*</modifier></type><name pos:start="5:63" pos:end="5:76">kernel_cmdline</name></decl></parameter>,

                     <parameter pos:start="7:22" pos:end="7:48"><decl pos:start="7:22" pos:end="7:48"><type pos:start="7:22" pos:end="7:48"><specifier pos:start="7:22" pos:end="7:26">const</specifier> <name pos:start="7:28" pos:end="7:31">char</name> <modifier pos:start="7:33" pos:end="7:33">*</modifier></type><name pos:start="7:34" pos:end="7:48">initrd_filename</name></decl></parameter>, <parameter pos:start="7:51" pos:end="7:71"><decl pos:start="7:51" pos:end="7:71"><type pos:start="7:51" pos:end="7:71"><specifier pos:start="7:51" pos:end="7:55">const</specifier> <name pos:start="7:57" pos:end="7:60">char</name> <modifier pos:start="7:62" pos:end="7:62">*</modifier></type><name pos:start="7:63" pos:end="7:71">cpu_model</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="119:1">{<block_content pos:start="11:5" pos:end="117:44">

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">CPUState</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:17">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:26"><decl pos:start="13:5" pos:end="13:25"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:14">ram_addr_t</name></type> <name pos:start="13:16" pos:end="13:25">ram_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">qemu_irq</name></type> <name pos:start="15:14" pos:end="15:20"><name pos:start="15:14" pos:end="15:16">pic</name><index pos:start="15:17" pos:end="15:20">[<expr pos:start="15:18" pos:end="15:19"><literal type="number" pos:start="15:18" pos:end="15:19">32</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:22"><decl pos:start="17:5" pos:end="17:21"><type pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:12">qemu_irq</name> <modifier pos:start="17:14" pos:end="17:14">*</modifier></type><name pos:start="17:15" pos:end="17:21">cpu_pic</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:21"><decl pos:start="19:5" pos:end="19:20"><type pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:15">DeviceState</name> <modifier pos:start="19:17" pos:end="19:17">*</modifier></type><name pos:start="19:18" pos:end="19:20">dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:10"><decl pos:start="21:5" pos:end="21:9"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:9">i</name></decl>;</decl_stmt>



    <if_stmt pos:start="25:5" pos:end="27:29"><if pos:start="25:5" pos:end="27:29">if <condition pos:start="25:8" pos:end="25:19">(<expr pos:start="25:9" pos:end="25:18"><operator pos:start="25:9" pos:end="25:9">!</operator><name pos:start="25:10" pos:end="25:18">cpu_model</name></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:29"><block_content pos:start="27:9" pos:end="27:29">

        <expr_stmt pos:start="27:9" pos:end="27:29"><expr pos:start="27:9" pos:end="27:28"><name pos:start="27:9" pos:end="27:17">cpu_model</name> <operator pos:start="27:19" pos:end="27:19">=</operator> <literal type="string" pos:start="27:21" pos:end="27:28">"arm926"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:30"><expr pos:start="29:5" pos:end="29:29"><name pos:start="29:5" pos:end="29:7">env</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <call pos:start="29:11" pos:end="29:29"><name pos:start="29:11" pos:end="29:18">cpu_init</name><argument_list pos:start="29:19" pos:end="29:29">(<argument pos:start="29:20" pos:end="29:28"><expr pos:start="29:20" pos:end="29:28"><name pos:start="29:20" pos:end="29:28">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="37:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:13">(<expr pos:start="31:9" pos:end="31:12"><operator pos:start="31:9" pos:end="31:9">!</operator><name pos:start="31:10" pos:end="31:12">env</name></expr>)</condition> <block pos:start="31:15" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:16">

        <expr_stmt pos:start="33:9" pos:end="33:59"><expr pos:start="33:9" pos:end="33:58"><call pos:start="33:9" pos:end="33:58"><name pos:start="33:9" pos:end="33:15">fprintf</name><argument_list pos:start="33:16" pos:end="33:58">(<argument pos:start="33:17" pos:end="33:22"><expr pos:start="33:17" pos:end="33:22"><name pos:start="33:17" pos:end="33:22">stderr</name></expr></argument>, <argument pos:start="33:25" pos:end="33:57"><expr pos:start="33:25" pos:end="33:57"><literal type="string" pos:start="33:25" pos:end="33:57">"Unable to find CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:16"><expr pos:start="35:9" pos:end="35:15"><call pos:start="35:9" pos:end="35:15"><name pos:start="35:9" pos:end="35:12">exit</name><argument_list pos:start="35:13" pos:end="35:15">(<argument pos:start="35:14" pos:end="35:14"><expr pos:start="35:14" pos:end="35:14"><literal type="number" pos:start="35:14" pos:end="35:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:42"><expr pos:start="39:5" pos:end="39:41"><name pos:start="39:5" pos:end="39:14">ram_offset</name> <operator pos:start="39:16" pos:end="39:16">=</operator> <call pos:start="39:18" pos:end="39:41"><name pos:start="39:18" pos:end="39:31">qemu_ram_alloc</name><argument_list pos:start="39:32" pos:end="39:41">(<argument pos:start="39:33" pos:end="39:40"><expr pos:start="39:33" pos:end="39:40"><name pos:start="39:33" pos:end="39:40">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="41:5" pos:end="41:79">/* ??? On a real system the first 1Mb is mapped as SSRAM or boot flash.  */</comment>

    <comment type="block" pos:start="43:5" pos:end="43:63">/* ??? RAM should repeat to fill physical memory space.  */</comment>

    <comment type="block" pos:start="45:5" pos:end="45:30">/* SDRAM at address zero*/</comment>

    <expr_stmt pos:start="47:5" pos:end="47:71"><expr pos:start="47:5" pos:end="47:70"><call pos:start="47:5" pos:end="47:70"><name pos:start="47:5" pos:end="47:32">cpu_register_physical_memory</name><argument_list pos:start="47:33" pos:end="47:70">(<argument pos:start="47:34" pos:end="47:34"><expr pos:start="47:34" pos:end="47:34"><literal type="number" pos:start="47:34" pos:end="47:34">0</literal></expr></argument>, <argument pos:start="47:37" pos:end="47:44"><expr pos:start="47:37" pos:end="47:44"><name pos:start="47:37" pos:end="47:44">ram_size</name></expr></argument>, <argument pos:start="47:47" pos:end="47:69"><expr pos:start="47:47" pos:end="47:69"><name pos:start="47:47" pos:end="47:56">ram_offset</name> <operator pos:start="47:58" pos:end="47:58">|</operator> <name pos:start="47:60" pos:end="47:69">IO_MEM_RAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="49:5" pos:end="49:41">/* And again at address 0x80000000 */</comment>

    <expr_stmt pos:start="51:5" pos:end="51:80"><expr pos:start="51:5" pos:end="51:79"><call pos:start="51:5" pos:end="51:79"><name pos:start="51:5" pos:end="51:32">cpu_register_physical_memory</name><argument_list pos:start="51:33" pos:end="51:79">(<argument pos:start="51:34" pos:end="51:43"><expr pos:start="51:34" pos:end="51:43"><literal type="number" pos:start="51:34" pos:end="51:43">0x80000000</literal></expr></argument>, <argument pos:start="51:46" pos:end="51:53"><expr pos:start="51:46" pos:end="51:53"><name pos:start="51:46" pos:end="51:53">ram_size</name></expr></argument>, <argument pos:start="51:56" pos:end="51:78"><expr pos:start="51:56" pos:end="51:78"><name pos:start="51:56" pos:end="51:65">ram_offset</name> <operator pos:start="51:67" pos:end="51:67">|</operator> <name pos:start="51:69" pos:end="51:78">IO_MEM_RAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:47"><expr pos:start="55:5" pos:end="55:46"><name pos:start="55:5" pos:end="55:7">dev</name> <operator pos:start="55:9" pos:end="55:9">=</operator> <call pos:start="55:11" pos:end="55:46"><name pos:start="55:11" pos:end="55:21">qdev_create</name><argument_list pos:start="55:22" pos:end="55:46">(<argument pos:start="55:23" pos:end="55:26"><expr pos:start="55:23" pos:end="55:26"><name pos:start="55:23" pos:end="55:26">NULL</name></expr></argument>, <argument pos:start="55:29" pos:end="55:45"><expr pos:start="55:29" pos:end="55:45"><literal type="string" pos:start="55:29" pos:end="55:45">"integrator_core"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:55"><expr pos:start="57:5" pos:end="57:54"><call pos:start="57:5" pos:end="57:54"><name pos:start="57:5" pos:end="57:24">qdev_prop_set_uint32</name><argument_list pos:start="57:25" pos:end="57:54">(<argument pos:start="57:26" pos:end="57:28"><expr pos:start="57:26" pos:end="57:28"><name pos:start="57:26" pos:end="57:28">dev</name></expr></argument>, <argument pos:start="57:31" pos:end="57:37"><expr pos:start="57:31" pos:end="57:37"><literal type="string" pos:start="57:31" pos:end="57:37">"memsz"</literal></expr></argument>, <argument pos:start="57:40" pos:end="57:53"><expr pos:start="57:40" pos:end="57:53"><name pos:start="57:40" pos:end="57:47">ram_size</name> <operator pos:start="57:49" pos:end="57:50">&gt;&gt;</operator> <literal type="number" pos:start="57:52" pos:end="57:53">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:19"><expr pos:start="59:5" pos:end="59:18"><call pos:start="59:5" pos:end="59:18"><name pos:start="59:5" pos:end="59:13">qdev_init</name><argument_list pos:start="59:14" pos:end="59:18">(<argument pos:start="59:15" pos:end="59:17"><expr pos:start="59:15" pos:end="59:17"><name pos:start="59:15" pos:end="59:17">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:56"><expr pos:start="61:5" pos:end="61:55"><call pos:start="61:5" pos:end="61:55"><name pos:start="61:5" pos:end="61:19">sysbus_mmio_map</name><argument_list pos:start="61:20" pos:end="61:55">(<argument pos:start="61:21" pos:end="61:39"><expr pos:start="61:21" pos:end="61:39"><operator pos:start="61:21" pos:end="61:21">(</operator><name pos:start="61:22" pos:end="61:33">SysBusDevice</name> <operator pos:start="61:35" pos:end="61:35">*</operator><operator pos:start="61:36" pos:end="61:36">)</operator><name pos:start="61:37" pos:end="61:39">dev</name></expr></argument>, <argument pos:start="61:42" pos:end="61:42"><expr pos:start="61:42" pos:end="61:42"><literal type="number" pos:start="61:42" pos:end="61:42">0</literal></expr></argument>, <argument pos:start="61:45" pos:end="61:54"><expr pos:start="61:45" pos:end="61:54"><literal type="number" pos:start="61:45" pos:end="61:54">0x10000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:36"><expr pos:start="65:5" pos:end="65:35"><name pos:start="65:5" pos:end="65:11">cpu_pic</name> <operator pos:start="65:13" pos:end="65:13">=</operator> <call pos:start="65:15" pos:end="65:35"><name pos:start="65:15" pos:end="65:30">arm_pic_init_cpu</name><argument_list pos:start="65:31" pos:end="65:35">(<argument pos:start="65:32" pos:end="65:34"><expr pos:start="65:32" pos:end="65:34"><name pos:start="65:32" pos:end="65:34">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="71:64"><expr pos:start="67:5" pos:end="71:63"><name pos:start="67:5" pos:end="67:7">dev</name> <operator pos:start="67:9" pos:end="67:9">=</operator> <call pos:start="67:11" pos:end="71:63"><name pos:start="67:11" pos:end="67:31">sysbus_create_varargs</name><argument_list pos:start="67:32" pos:end="71:63">(<argument pos:start="67:33" pos:end="67:48"><expr pos:start="67:33" pos:end="67:48"><literal type="string" pos:start="67:33" pos:end="67:48">"integrator_pic"</literal></expr></argument>, <argument pos:start="67:51" pos:end="67:60"><expr pos:start="67:51" pos:end="67:60"><literal type="number" pos:start="67:51" pos:end="67:60">0x14000000</literal></expr></argument>,

                                <argument pos:start="69:33" pos:end="69:56"><expr pos:start="69:33" pos:end="69:56"><name pos:start="69:33" pos:end="69:56"><name pos:start="69:33" pos:end="69:39">cpu_pic</name><index pos:start="69:40" pos:end="69:56">[<expr pos:start="69:41" pos:end="69:55"><name pos:start="69:41" pos:end="69:55">ARM_PIC_CPU_IRQ</name></expr>]</index></name></expr></argument>,

                                <argument pos:start="71:33" pos:end="71:56"><expr pos:start="71:33" pos:end="71:56"><name pos:start="71:33" pos:end="71:56"><name pos:start="71:33" pos:end="71:39">cpu_pic</name><index pos:start="71:40" pos:end="71:56">[<expr pos:start="71:41" pos:end="71:55"><name pos:start="71:41" pos:end="71:55">ARM_PIC_CPU_FIQ</name></expr>]</index></name></expr></argument>, <argument pos:start="71:59" pos:end="71:62"><expr pos:start="71:59" pos:end="71:62"><name pos:start="71:59" pos:end="71:62">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="73:5" pos:end="77:5">for <control pos:start="73:9" pos:end="73:28">(<init pos:start="73:10" pos:end="73:15"><expr pos:start="73:10" pos:end="73:14"><name pos:start="73:10" pos:end="73:10">i</name> <operator pos:start="73:12" pos:end="73:12">=</operator> <literal type="number" pos:start="73:14" pos:end="73:14">0</literal></expr>;</init> <condition pos:start="73:17" pos:end="73:23"><expr pos:start="73:17" pos:end="73:22"><name pos:start="73:17" pos:end="73:17">i</name> <operator pos:start="73:19" pos:end="73:19">&lt;</operator> <literal type="number" pos:start="73:21" pos:end="73:22">32</literal></expr>;</condition> <incr pos:start="73:25" pos:end="73:27"><expr pos:start="73:25" pos:end="73:27"><name pos:start="73:25" pos:end="73:25">i</name><operator pos:start="73:26" pos:end="73:27">++</operator></expr></incr>)</control> <block pos:start="73:30" pos:end="77:5">{<block_content pos:start="75:9" pos:end="75:42">

        <expr_stmt pos:start="75:9" pos:end="75:42"><expr pos:start="75:9" pos:end="75:41"><name pos:start="75:9" pos:end="75:14"><name pos:start="75:9" pos:end="75:11">pic</name><index pos:start="75:12" pos:end="75:14">[<expr pos:start="75:13" pos:end="75:13"><name pos:start="75:13" pos:end="75:13">i</name></expr>]</index></name> <operator pos:start="75:16" pos:end="75:16">=</operator> <call pos:start="75:18" pos:end="75:41"><name pos:start="75:18" pos:end="75:33">qdev_get_gpio_in</name><argument_list pos:start="75:34" pos:end="75:41">(<argument pos:start="75:35" pos:end="75:37"><expr pos:start="75:35" pos:end="75:37"><name pos:start="75:35" pos:end="75:37">dev</name></expr></argument>, <argument pos:start="75:40" pos:end="75:40"><expr pos:start="75:40" pos:end="75:40"><name pos:start="75:40" pos:end="75:40">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="79:5" pos:end="79:64"><expr pos:start="79:5" pos:end="79:63"><call pos:start="79:5" pos:end="79:63"><name pos:start="79:5" pos:end="79:24">sysbus_create_simple</name><argument_list pos:start="79:25" pos:end="79:63">(<argument pos:start="79:26" pos:end="79:41"><expr pos:start="79:26" pos:end="79:41"><literal type="string" pos:start="79:26" pos:end="79:41">"integrator_pic"</literal></expr></argument>, <argument pos:start="79:44" pos:end="79:53"><expr pos:start="79:44" pos:end="79:53"><literal type="number" pos:start="79:44" pos:end="79:53">0xca000000</literal></expr></argument>, <argument pos:start="79:56" pos:end="79:62"><expr pos:start="79:56" pos:end="79:62"><name pos:start="79:56" pos:end="79:62"><name pos:start="79:56" pos:end="79:58">pic</name><index pos:start="79:59" pos:end="79:62">[<expr pos:start="79:60" pos:end="79:61"><literal type="number" pos:start="79:60" pos:end="79:61">26</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="83:56"><expr pos:start="81:5" pos:end="83:55"><call pos:start="81:5" pos:end="83:55"><name pos:start="81:5" pos:end="81:25">sysbus_create_varargs</name><argument_list pos:start="81:26" pos:end="83:55">(<argument pos:start="81:27" pos:end="81:42"><expr pos:start="81:27" pos:end="81:42"><literal type="string" pos:start="81:27" pos:end="81:42">"integrator_pit"</literal></expr></argument>, <argument pos:start="81:45" pos:end="81:54"><expr pos:start="81:45" pos:end="81:54"><literal type="number" pos:start="81:45" pos:end="81:54">0x13000000</literal></expr></argument>,

                          <argument pos:start="83:27" pos:end="83:32"><expr pos:start="83:27" pos:end="83:32"><name pos:start="83:27" pos:end="83:32"><name pos:start="83:27" pos:end="83:29">pic</name><index pos:start="83:30" pos:end="83:32">[<expr pos:start="83:31" pos:end="83:31"><literal type="number" pos:start="83:31" pos:end="83:31">5</literal></expr>]</index></name></expr></argument>, <argument pos:start="83:35" pos:end="83:40"><expr pos:start="83:35" pos:end="83:40"><name pos:start="83:35" pos:end="83:40"><name pos:start="83:35" pos:end="83:37">pic</name><index pos:start="83:38" pos:end="83:40">[<expr pos:start="83:39" pos:end="83:39"><literal type="number" pos:start="83:39" pos:end="83:39">6</literal></expr>]</index></name></expr></argument>, <argument pos:start="83:43" pos:end="83:48"><expr pos:start="83:43" pos:end="83:48"><name pos:start="83:43" pos:end="83:48"><name pos:start="83:43" pos:end="83:45">pic</name><index pos:start="83:46" pos:end="83:48">[<expr pos:start="83:47" pos:end="83:47"><literal type="number" pos:start="83:47" pos:end="83:47">7</literal></expr>]</index></name></expr></argument>, <argument pos:start="83:51" pos:end="83:54"><expr pos:start="83:51" pos:end="83:54"><name pos:start="83:51" pos:end="83:54">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:54"><expr pos:start="85:5" pos:end="85:53"><call pos:start="85:5" pos:end="85:53"><name pos:start="85:5" pos:end="85:24">sysbus_create_simple</name><argument_list pos:start="85:25" pos:end="85:53">(<argument pos:start="85:26" pos:end="85:32"><expr pos:start="85:26" pos:end="85:32"><literal type="string" pos:start="85:26" pos:end="85:32">"pl031"</literal></expr></argument>, <argument pos:start="85:35" pos:end="85:44"><expr pos:start="85:35" pos:end="85:44"><literal type="number" pos:start="85:35" pos:end="85:44">0x15000000</literal></expr></argument>, <argument pos:start="85:47" pos:end="85:52"><expr pos:start="85:47" pos:end="85:52"><name pos:start="85:47" pos:end="85:52"><name pos:start="85:47" pos:end="85:49">pic</name><index pos:start="85:50" pos:end="85:52">[<expr pos:start="85:51" pos:end="85:51"><literal type="number" pos:start="85:51" pos:end="85:51">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:54"><expr pos:start="87:5" pos:end="87:53"><call pos:start="87:5" pos:end="87:53"><name pos:start="87:5" pos:end="87:24">sysbus_create_simple</name><argument_list pos:start="87:25" pos:end="87:53">(<argument pos:start="87:26" pos:end="87:32"><expr pos:start="87:26" pos:end="87:32"><literal type="string" pos:start="87:26" pos:end="87:32">"pl011"</literal></expr></argument>, <argument pos:start="87:35" pos:end="87:44"><expr pos:start="87:35" pos:end="87:44"><literal type="number" pos:start="87:35" pos:end="87:44">0x16000000</literal></expr></argument>, <argument pos:start="87:47" pos:end="87:52"><expr pos:start="87:47" pos:end="87:52"><name pos:start="87:47" pos:end="87:52"><name pos:start="87:47" pos:end="87:49">pic</name><index pos:start="87:50" pos:end="87:52">[<expr pos:start="87:51" pos:end="87:51"><literal type="number" pos:start="87:51" pos:end="87:51">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:54"><expr pos:start="89:5" pos:end="89:53"><call pos:start="89:5" pos:end="89:53"><name pos:start="89:5" pos:end="89:24">sysbus_create_simple</name><argument_list pos:start="89:25" pos:end="89:53">(<argument pos:start="89:26" pos:end="89:32"><expr pos:start="89:26" pos:end="89:32"><literal type="string" pos:start="89:26" pos:end="89:32">"pl011"</literal></expr></argument>, <argument pos:start="89:35" pos:end="89:44"><expr pos:start="89:35" pos:end="89:44"><literal type="number" pos:start="89:35" pos:end="89:44">0x17000000</literal></expr></argument>, <argument pos:start="89:47" pos:end="89:52"><expr pos:start="89:47" pos:end="89:52"><name pos:start="89:47" pos:end="89:52"><name pos:start="89:47" pos:end="89:49">pic</name><index pos:start="89:50" pos:end="89:52">[<expr pos:start="89:51" pos:end="89:51"><literal type="number" pos:start="89:51" pos:end="89:51">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:33"><expr pos:start="91:5" pos:end="91:32"><call pos:start="91:5" pos:end="91:32"><name pos:start="91:5" pos:end="91:20">icp_control_init</name><argument_list pos:start="91:21" pos:end="91:32">(<argument pos:start="91:22" pos:end="91:31"><expr pos:start="91:22" pos:end="91:31"><literal type="number" pos:start="91:22" pos:end="91:31">0xcb000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:63"><expr pos:start="93:5" pos:end="93:62"><call pos:start="93:5" pos:end="93:62"><name pos:start="93:5" pos:end="93:24">sysbus_create_simple</name><argument_list pos:start="93:25" pos:end="93:62">(<argument pos:start="93:26" pos:end="93:41"><expr pos:start="93:26" pos:end="93:41"><literal type="string" pos:start="93:26" pos:end="93:41">"pl050_keyboard"</literal></expr></argument>, <argument pos:start="93:44" pos:end="93:53"><expr pos:start="93:44" pos:end="93:53"><literal type="number" pos:start="93:44" pos:end="93:53">0x18000000</literal></expr></argument>, <argument pos:start="93:56" pos:end="93:61"><expr pos:start="93:56" pos:end="93:61"><name pos:start="93:56" pos:end="93:61"><name pos:start="93:56" pos:end="93:58">pic</name><index pos:start="93:59" pos:end="93:61">[<expr pos:start="93:60" pos:end="93:60"><literal type="number" pos:start="93:60" pos:end="93:60">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:60"><expr pos:start="95:5" pos:end="95:59"><call pos:start="95:5" pos:end="95:59"><name pos:start="95:5" pos:end="95:24">sysbus_create_simple</name><argument_list pos:start="95:25" pos:end="95:59">(<argument pos:start="95:26" pos:end="95:38"><expr pos:start="95:26" pos:end="95:38"><literal type="string" pos:start="95:26" pos:end="95:38">"pl050_mouse"</literal></expr></argument>, <argument pos:start="95:41" pos:end="95:50"><expr pos:start="95:41" pos:end="95:50"><literal type="number" pos:start="95:41" pos:end="95:50">0x19000000</literal></expr></argument>, <argument pos:start="95:53" pos:end="95:58"><expr pos:start="95:53" pos:end="95:58"><name pos:start="95:53" pos:end="95:58"><name pos:start="95:53" pos:end="95:55">pic</name><index pos:start="95:56" pos:end="95:58">[<expr pos:start="95:57" pos:end="95:57"><literal type="number" pos:start="95:57" pos:end="95:57">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:71"><expr pos:start="97:5" pos:end="97:70"><call pos:start="97:5" pos:end="97:70"><name pos:start="97:5" pos:end="97:25">sysbus_create_varargs</name><argument_list pos:start="97:26" pos:end="97:70">(<argument pos:start="97:27" pos:end="97:33"><expr pos:start="97:27" pos:end="97:33"><literal type="string" pos:start="97:27" pos:end="97:33">"pl181"</literal></expr></argument>, <argument pos:start="97:36" pos:end="97:45"><expr pos:start="97:36" pos:end="97:45"><literal type="number" pos:start="97:36" pos:end="97:45">0x1c000000</literal></expr></argument>, <argument pos:start="97:48" pos:end="97:54"><expr pos:start="97:48" pos:end="97:54"><name pos:start="97:48" pos:end="97:54"><name pos:start="97:48" pos:end="97:50">pic</name><index pos:start="97:51" pos:end="97:54">[<expr pos:start="97:52" pos:end="97:53"><literal type="number" pos:start="97:52" pos:end="97:53">23</literal></expr>]</index></name></expr></argument>, <argument pos:start="97:57" pos:end="97:63"><expr pos:start="97:57" pos:end="97:63"><name pos:start="97:57" pos:end="97:63"><name pos:start="97:57" pos:end="97:59">pic</name><index pos:start="97:60" pos:end="97:63">[<expr pos:start="97:61" pos:end="97:62"><literal type="number" pos:start="97:61" pos:end="97:62">24</literal></expr>]</index></name></expr></argument>, <argument pos:start="97:66" pos:end="97:69"><expr pos:start="97:66" pos:end="97:69"><name pos:start="97:66" pos:end="97:69">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="99:5" pos:end="101:58"><if pos:start="99:5" pos:end="101:58">if <condition pos:start="99:8" pos:end="99:25">(<expr pos:start="99:9" pos:end="99:24"><name pos:start="99:9" pos:end="99:19"><name pos:start="99:9" pos:end="99:16">nd_table</name><index pos:start="99:17" pos:end="99:19">[<expr pos:start="99:18" pos:end="99:18"><literal type="number" pos:start="99:18" pos:end="99:18">0</literal></expr>]</index></name><operator pos:start="99:20" pos:end="99:20">.</operator><name pos:start="99:21" pos:end="99:24">vlan</name></expr>)</condition><block type="pseudo" pos:start="101:9" pos:end="101:58"><block_content pos:start="101:9" pos:end="101:58">

        <expr_stmt pos:start="101:9" pos:end="101:58"><expr pos:start="101:9" pos:end="101:57"><call pos:start="101:9" pos:end="101:57"><name pos:start="101:9" pos:end="101:22">smc91c111_init</name><argument_list pos:start="101:23" pos:end="101:57">(<argument pos:start="101:24" pos:end="101:35"><expr pos:start="101:24" pos:end="101:35"><operator pos:start="101:24" pos:end="101:24">&amp;</operator><name pos:start="101:25" pos:end="101:35"><name pos:start="101:25" pos:end="101:32">nd_table</name><index pos:start="101:33" pos:end="101:35">[<expr pos:start="101:34" pos:end="101:34"><literal type="number" pos:start="101:34" pos:end="101:34">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="101:38" pos:end="101:47"><expr pos:start="101:38" pos:end="101:47"><literal type="number" pos:start="101:38" pos:end="101:47">0xc8000000</literal></expr></argument>, <argument pos:start="101:50" pos:end="101:56"><expr pos:start="101:50" pos:end="101:56"><name pos:start="101:50" pos:end="101:56"><name pos:start="101:50" pos:end="101:52">pic</name><index pos:start="101:53" pos:end="101:56">[<expr pos:start="101:54" pos:end="101:55"><literal type="number" pos:start="101:54" pos:end="101:55">27</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="105:5" pos:end="105:55"><expr pos:start="105:5" pos:end="105:54"><call pos:start="105:5" pos:end="105:54"><name pos:start="105:5" pos:end="105:24">sysbus_create_simple</name><argument_list pos:start="105:25" pos:end="105:54">(<argument pos:start="105:26" pos:end="105:32"><expr pos:start="105:26" pos:end="105:32"><literal type="string" pos:start="105:26" pos:end="105:32">"pl110"</literal></expr></argument>, <argument pos:start="105:35" pos:end="105:44"><expr pos:start="105:35" pos:end="105:44"><literal type="number" pos:start="105:35" pos:end="105:44">0xc0000000</literal></expr></argument>, <argument pos:start="105:47" pos:end="105:53"><expr pos:start="105:47" pos:end="105:53"><name pos:start="105:47" pos:end="105:53"><name pos:start="105:47" pos:end="105:49">pic</name><index pos:start="105:50" pos:end="105:53">[<expr pos:start="105:51" pos:end="105:52"><literal type="number" pos:start="105:51" pos:end="105:52">22</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="109:5" pos:end="109:41"><expr pos:start="109:5" pos:end="109:40"><name pos:start="109:5" pos:end="109:29"><name pos:start="109:5" pos:end="109:20">integrator_binfo</name><operator pos:start="109:21" pos:end="109:21">.</operator><name pos:start="109:22" pos:end="109:29">ram_size</name></name> <operator pos:start="109:31" pos:end="109:31">=</operator> <name pos:start="109:33" pos:end="109:40">ram_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:55"><expr pos:start="111:5" pos:end="111:54"><name pos:start="111:5" pos:end="111:36"><name pos:start="111:5" pos:end="111:20">integrator_binfo</name><operator pos:start="111:21" pos:end="111:21">.</operator><name pos:start="111:22" pos:end="111:36">kernel_filename</name></name> <operator pos:start="111:38" pos:end="111:38">=</operator> <name pos:start="111:40" pos:end="111:54">kernel_filename</name></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:53"><expr pos:start="113:5" pos:end="113:52"><name pos:start="113:5" pos:end="113:35"><name pos:start="113:5" pos:end="113:20">integrator_binfo</name><operator pos:start="113:21" pos:end="113:21">.</operator><name pos:start="113:22" pos:end="113:35">kernel_cmdline</name></name> <operator pos:start="113:37" pos:end="113:37">=</operator> <name pos:start="113:39" pos:end="113:52">kernel_cmdline</name></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:55"><expr pos:start="115:5" pos:end="115:54"><name pos:start="115:5" pos:end="115:36"><name pos:start="115:5" pos:end="115:20">integrator_binfo</name><operator pos:start="115:21" pos:end="115:21">.</operator><name pos:start="115:22" pos:end="115:36">initrd_filename</name></name> <operator pos:start="115:38" pos:end="115:38">=</operator> <name pos:start="115:40" pos:end="115:54">initrd_filename</name></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:44"><expr pos:start="117:5" pos:end="117:43"><call pos:start="117:5" pos:end="117:43"><name pos:start="117:5" pos:end="117:19">arm_load_kernel</name><argument_list pos:start="117:20" pos:end="117:43">(<argument pos:start="117:21" pos:end="117:23"><expr pos:start="117:21" pos:end="117:23"><name pos:start="117:21" pos:end="117:23">env</name></expr></argument>, <argument pos:start="117:26" pos:end="117:42"><expr pos:start="117:26" pos:end="117:42"><operator pos:start="117:26" pos:end="117:26">&amp;</operator><name pos:start="117:27" pos:end="117:42">integrator_binfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
