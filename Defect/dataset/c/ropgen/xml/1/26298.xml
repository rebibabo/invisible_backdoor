<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26298.c" pos:tabs="8"><function pos:start="1:1" pos:end="497:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">av_cold</name> <name pos:start="1:16" pos:end="1:18">int</name></type> <name pos:start="1:20" pos:end="1:30">decode_init</name><parameter_list pos:start="1:31" pos:end="1:73">(<parameter pos:start="1:32" pos:end="1:49"><decl pos:start="1:32" pos:end="1:49"><type pos:start="1:32" pos:end="1:49"><name pos:start="1:32" pos:end="1:46">WMAProDecodeCtx</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:49">s</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:72"><decl pos:start="1:52" pos:end="1:72"><type pos:start="1:52" pos:end="1:72"><name pos:start="1:52" pos:end="1:65">AVCodecContext</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:72">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="497:1">{<block_content pos:start="5:5" pos:end="495:13">

    <decl_stmt pos:start="5:5" pos:end="5:42"><decl pos:start="5:5" pos:end="5:41"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:11">uint8_t</name> <modifier pos:start="5:13" pos:end="5:13">*</modifier></type><name pos:start="5:14" pos:end="5:22">edata_ptr</name> <init pos:start="5:24" pos:end="5:41">= <expr pos:start="5:26" pos:end="5:41"><name pos:start="5:26" pos:end="5:41"><name pos:start="5:26" pos:end="5:30">avctx</name><operator pos:start="5:31" pos:end="5:32">-&gt;</operator><name pos:start="5:33" pos:end="5:41">extradata</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:30"><decl pos:start="7:5" pos:end="7:29"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:12">unsigned</name> <name pos:start="7:14" pos:end="7:16">int</name></type> <name pos:start="7:18" pos:end="7:29">channel_mask</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>, <decl pos:start="9:12" pos:end="9:15"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:15">bits</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:30">log2_max_num_subframes</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:33"><decl pos:start="13:5" pos:end="13:32"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:32">num_possible_block_sizes</name></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="19:34"><if pos:start="17:5" pos:end="19:34">if <condition pos:start="17:8" pos:end="17:83">(<expr pos:start="17:9" pos:end="17:82"><name pos:start="17:9" pos:end="17:23"><name pos:start="17:9" pos:end="17:13">avctx</name><operator pos:start="17:14" pos:end="17:15">-&gt;</operator><name pos:start="17:16" pos:end="17:23">codec_id</name></name> <operator pos:start="17:25" pos:end="17:26">==</operator> <name pos:start="17:28" pos:end="17:43">AV_CODEC_ID_XMA1</name> <operator pos:start="17:45" pos:end="17:46">||</operator> <name pos:start="17:48" pos:end="17:62"><name pos:start="17:48" pos:end="17:52">avctx</name><operator pos:start="17:53" pos:end="17:54">-&gt;</operator><name pos:start="17:55" pos:end="17:62">codec_id</name></name> <operator pos:start="17:64" pos:end="17:65">==</operator> <name pos:start="17:67" pos:end="17:82">AV_CODEC_ID_XMA2</name></expr>)</condition><block type="pseudo" pos:start="19:9" pos:end="19:34"><block_content pos:start="19:9" pos:end="19:34">

        <expr_stmt pos:start="19:9" pos:end="19:34"><expr pos:start="19:9" pos:end="19:33"><name pos:start="19:9" pos:end="19:26"><name pos:start="19:9" pos:end="19:13">avctx</name><operator pos:start="19:14" pos:end="19:15">-&gt;</operator><name pos:start="19:16" pos:end="19:26">block_align</name></name> <operator pos:start="19:28" pos:end="19:28">=</operator> <literal type="number" pos:start="19:30" pos:end="19:33">2048</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="23:5" pos:end="29:5"><if pos:start="23:5" pos:end="29:5">if <condition pos:start="23:8" pos:end="23:28">(<expr pos:start="23:9" pos:end="23:27"><operator pos:start="23:9" pos:end="23:9">!</operator><name pos:start="23:10" pos:end="23:27"><name pos:start="23:10" pos:end="23:14">avctx</name><operator pos:start="23:15" pos:end="23:16">-&gt;</operator><name pos:start="23:17" pos:end="23:27">block_align</name></name></expr>)</condition> <block pos:start="23:30" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:31">

        <expr_stmt pos:start="25:9" pos:end="25:64"><expr pos:start="25:9" pos:end="25:63"><call pos:start="25:9" pos:end="25:63"><name pos:start="25:9" pos:end="25:14">av_log</name><argument_list pos:start="25:15" pos:end="25:63">(<argument pos:start="25:16" pos:end="25:20"><expr pos:start="25:16" pos:end="25:20"><name pos:start="25:16" pos:end="25:20">avctx</name></expr></argument>, <argument pos:start="25:23" pos:end="25:34"><expr pos:start="25:23" pos:end="25:34"><name pos:start="25:23" pos:end="25:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="25:37" pos:end="25:62"><expr pos:start="25:37" pos:end="25:62"><literal type="string" pos:start="25:37" pos:end="25:62">"block_align is not set\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:31">return <expr pos:start="27:16" pos:end="27:30"><call pos:start="27:16" pos:end="27:30"><name pos:start="27:16" pos:end="27:22">AVERROR</name><argument_list pos:start="27:23" pos:end="27:30">(<argument pos:start="27:24" pos:end="27:29"><expr pos:start="27:24" pos:end="27:29"><name pos:start="27:24" pos:end="27:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:21"><expr pos:start="33:5" pos:end="33:20"><name pos:start="33:5" pos:end="33:12"><name pos:start="33:5" pos:end="33:5">s</name><operator pos:start="33:6" pos:end="33:7">-&gt;</operator><name pos:start="33:8" pos:end="33:12">avctx</name></name> <operator pos:start="33:14" pos:end="33:14">=</operator> <name pos:start="33:16" pos:end="33:20">avctx</name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:76"><expr pos:start="35:5" pos:end="35:75"><name pos:start="35:5" pos:end="35:11"><name pos:start="35:5" pos:end="35:5">s</name><operator pos:start="35:6" pos:end="35:7">-&gt;</operator><name pos:start="35:8" pos:end="35:11">fdsp</name></name> <operator pos:start="35:13" pos:end="35:13">=</operator> <call pos:start="35:15" pos:end="35:75"><name pos:start="35:15" pos:end="35:36">avpriv_float_dsp_alloc</name><argument_list pos:start="35:37" pos:end="35:75">(<argument pos:start="35:38" pos:end="35:74"><expr pos:start="35:38" pos:end="35:74"><name pos:start="35:38" pos:end="35:49"><name pos:start="35:38" pos:end="35:42">avctx</name><operator pos:start="35:43" pos:end="35:44">-&gt;</operator><name pos:start="35:45" pos:end="35:49">flags</name></name> <operator pos:start="35:51" pos:end="35:51">&amp;</operator> <name pos:start="35:53" pos:end="35:74">AV_CODEC_FLAG_BITEXACT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="39:31"><if pos:start="37:5" pos:end="39:31">if <condition pos:start="37:8" pos:end="37:17">(<expr pos:start="37:9" pos:end="37:16"><operator pos:start="37:9" pos:end="37:9">!</operator><name pos:start="37:10" pos:end="37:16"><name pos:start="37:10" pos:end="37:10">s</name><operator pos:start="37:11" pos:end="37:12">-&gt;</operator><name pos:start="37:13" pos:end="37:16">fdsp</name></name></expr>)</condition><block type="pseudo" pos:start="39:9" pos:end="39:31"><block_content pos:start="39:9" pos:end="39:31">

        <return pos:start="39:9" pos:end="39:31">return <expr pos:start="39:16" pos:end="39:30"><call pos:start="39:16" pos:end="39:30"><name pos:start="39:16" pos:end="39:22">AVERROR</name><argument_list pos:start="39:23" pos:end="39:30">(<argument pos:start="39:24" pos:end="39:29"><expr pos:start="39:24" pos:end="39:29"><name pos:start="39:24" pos:end="39:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:56"><expr pos:start="43:5" pos:end="43:55"><call pos:start="43:5" pos:end="43:55"><name pos:start="43:5" pos:end="43:17">init_put_bits</name><argument_list pos:start="43:18" pos:end="43:55">(<argument pos:start="43:19" pos:end="43:24"><expr pos:start="43:19" pos:end="43:24"><operator pos:start="43:19" pos:end="43:19">&amp;</operator><name pos:start="43:20" pos:end="43:24"><name pos:start="43:20" pos:end="43:20">s</name><operator pos:start="43:21" pos:end="43:22">-&gt;</operator><name pos:start="43:23" pos:end="43:24">pb</name></name></expr></argument>, <argument pos:start="43:27" pos:end="43:39"><expr pos:start="43:27" pos:end="43:39"><name pos:start="43:27" pos:end="43:39"><name pos:start="43:27" pos:end="43:27">s</name><operator pos:start="43:28" pos:end="43:29">-&gt;</operator><name pos:start="43:30" pos:end="43:39">frame_data</name></name></expr></argument>, <argument pos:start="43:42" pos:end="43:54"><expr pos:start="43:42" pos:end="43:54"><name pos:start="43:42" pos:end="43:54">MAX_FRAMESIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:43"><expr pos:start="47:5" pos:end="47:42"><name pos:start="47:5" pos:end="47:21"><name pos:start="47:5" pos:end="47:9">avctx</name><operator pos:start="47:10" pos:end="47:11">-&gt;</operator><name pos:start="47:12" pos:end="47:21">sample_fmt</name></name> <operator pos:start="47:23" pos:end="47:23">=</operator> <name pos:start="47:25" pos:end="47:42">AV_SAMPLE_FMT_FLTP</name></expr>;</expr_stmt>



    <comment type="block" format="doxygen" pos:start="51:5" pos:end="51:29">/** dump the extradata */</comment>

    <expr_stmt pos:start="53:5" pos:end="53:48"><expr pos:start="53:5" pos:end="53:47"><call pos:start="53:5" pos:end="53:47"><name pos:start="53:5" pos:end="53:10">av_log</name><argument_list pos:start="53:11" pos:end="53:47">(<argument pos:start="53:12" pos:end="53:16"><expr pos:start="53:12" pos:end="53:16"><name pos:start="53:12" pos:end="53:16">avctx</name></expr></argument>, <argument pos:start="53:19" pos:end="53:30"><expr pos:start="53:19" pos:end="53:30"><name pos:start="53:19" pos:end="53:30">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="53:33" pos:end="53:46"><expr pos:start="53:33" pos:end="53:46"><literal type="string" pos:start="53:33" pos:end="53:46">"extradata:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="55:5" pos:end="57:66">for <control pos:start="55:9" pos:end="55:47">(<init pos:start="55:10" pos:end="55:15"><expr pos:start="55:10" pos:end="55:14"><name pos:start="55:10" pos:end="55:10">i</name> <operator pos:start="55:12" pos:end="55:12">=</operator> <literal type="number" pos:start="55:14" pos:end="55:14">0</literal></expr>;</init> <condition pos:start="55:17" pos:end="55:42"><expr pos:start="55:17" pos:end="55:41"><name pos:start="55:17" pos:end="55:17">i</name> <operator pos:start="55:19" pos:end="55:19">&lt;</operator> <name pos:start="55:21" pos:end="55:41"><name pos:start="55:21" pos:end="55:25">avctx</name><operator pos:start="55:26" pos:end="55:27">-&gt;</operator><name pos:start="55:28" pos:end="55:41">extradata_size</name></name></expr>;</condition> <incr pos:start="55:44" pos:end="55:46"><expr pos:start="55:44" pos:end="55:46"><name pos:start="55:44" pos:end="55:44">i</name><operator pos:start="55:45" pos:end="55:46">++</operator></expr></incr>)</control><block type="pseudo" pos:start="57:9" pos:end="57:66"><block_content pos:start="57:9" pos:end="57:66">

        <expr_stmt pos:start="57:9" pos:end="57:66"><expr pos:start="57:9" pos:end="57:65"><call pos:start="57:9" pos:end="57:65"><name pos:start="57:9" pos:end="57:14">av_log</name><argument_list pos:start="57:15" pos:end="57:65">(<argument pos:start="57:16" pos:end="57:20"><expr pos:start="57:16" pos:end="57:20"><name pos:start="57:16" pos:end="57:20">avctx</name></expr></argument>, <argument pos:start="57:23" pos:end="57:34"><expr pos:start="57:23" pos:end="57:34"><name pos:start="57:23" pos:end="57:34">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="57:37" pos:end="57:43"><expr pos:start="57:37" pos:end="57:43"><literal type="string" pos:start="57:37" pos:end="57:43">"[%x] "</literal></expr></argument>, <argument pos:start="57:46" pos:end="57:64"><expr pos:start="57:46" pos:end="57:64"><name pos:start="57:46" pos:end="57:64"><name pos:start="57:46" pos:end="57:50">avctx</name><operator pos:start="57:51" pos:end="57:52">-&gt;</operator><name pos:start="57:53" pos:end="57:61">extradata</name><index pos:start="57:62" pos:end="57:64">[<expr pos:start="57:63" pos:end="57:63"><name pos:start="57:63" pos:end="57:63">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <expr_stmt pos:start="59:5" pos:end="59:38"><expr pos:start="59:5" pos:end="59:37"><call pos:start="59:5" pos:end="59:37"><name pos:start="59:5" pos:end="59:10">av_log</name><argument_list pos:start="59:11" pos:end="59:37">(<argument pos:start="59:12" pos:end="59:16"><expr pos:start="59:12" pos:end="59:16"><name pos:start="59:12" pos:end="59:16">avctx</name></expr></argument>, <argument pos:start="59:19" pos:end="59:30"><expr pos:start="59:19" pos:end="59:30"><name pos:start="59:19" pos:end="59:30">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="59:33" pos:end="59:36"><expr pos:start="59:33" pos:end="59:36"><literal type="string" pos:start="59:33" pos:end="59:36">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="61:5" pos:end="101:5"><if pos:start="61:5" pos:end="69:6">if <condition pos:start="61:8" pos:end="61:97">(<expr pos:start="61:9" pos:end="61:96"><name pos:start="61:9" pos:end="61:23"><name pos:start="61:9" pos:end="61:13">avctx</name><operator pos:start="61:14" pos:end="61:15">-&gt;</operator><name pos:start="61:16" pos:end="61:23">codec_id</name></name> <operator pos:start="61:25" pos:end="61:26">==</operator> <name pos:start="61:28" pos:end="61:43">AV_CODEC_ID_XMA2</name> <operator pos:start="61:45" pos:end="61:46">&amp;&amp;</operator> <operator pos:start="61:48" pos:end="61:48">(</operator><operator pos:start="61:49" pos:end="61:49">!</operator><name pos:start="61:50" pos:end="61:65"><name pos:start="61:50" pos:end="61:54">avctx</name><operator pos:start="61:55" pos:end="61:56">-&gt;</operator><name pos:start="61:57" pos:end="61:65">extradata</name></name> <operator pos:start="61:67" pos:end="61:68">||</operator> <name pos:start="61:70" pos:end="61:90"><name pos:start="61:70" pos:end="61:74">avctx</name><operator pos:start="61:75" pos:end="61:76">-&gt;</operator><name pos:start="61:77" pos:end="61:90">extradata_size</name></name> <operator pos:start="61:92" pos:end="61:93">&gt;=</operator> <literal type="number" pos:start="61:95" pos:end="61:95">6</literal><operator pos:start="61:96" pos:end="61:96">)</operator></expr>)</condition> <block pos:start="61:99" pos:end="69:6">{<block_content pos:start="63:9" pos:end="67:32">

        <expr_stmt pos:start="63:9" pos:end="63:36"><expr pos:start="63:9" pos:end="63:35"><name pos:start="63:9" pos:end="63:23"><name pos:start="63:9" pos:end="63:9">s</name><operator pos:start="63:10" pos:end="63:11">-&gt;</operator><name pos:start="63:12" pos:end="63:23">decode_flags</name></name>    <operator pos:start="63:28" pos:end="63:28">=</operator> <literal type="number" pos:start="63:30" pos:end="63:35">0x10d6</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:73"><expr pos:start="65:9" pos:end="65:72"><name pos:start="65:9" pos:end="65:20">channel_mask</name>       <operator pos:start="65:28" pos:end="65:28">=</operator> <ternary pos:start="65:30" pos:end="65:72"><condition pos:start="65:30" pos:end="65:47"><expr pos:start="65:30" pos:end="65:45"><name pos:start="65:30" pos:end="65:45"><name pos:start="65:30" pos:end="65:34">avctx</name><operator pos:start="65:35" pos:end="65:36">-&gt;</operator><name pos:start="65:37" pos:end="65:45">extradata</name></name></expr> ?</condition><then pos:start="65:49" pos:end="65:68"> <expr pos:start="65:49" pos:end="65:68"><call pos:start="65:49" pos:end="65:68"><name pos:start="65:49" pos:end="65:55">AV_RL32</name><argument_list pos:start="65:56" pos:end="65:68">(<argument pos:start="65:57" pos:end="65:67"><expr pos:start="65:57" pos:end="65:67"><name pos:start="65:57" pos:end="65:65">edata_ptr</name><operator pos:start="65:66" pos:end="65:66">+</operator><literal type="number" pos:start="65:67" pos:end="65:67">2</literal></expr></argument>)</argument_list></call></expr> </then><else pos:start="65:70" pos:end="65:72">: <expr pos:start="65:72" pos:end="65:72"><literal type="number" pos:start="65:72" pos:end="65:72">0</literal></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:32"><expr pos:start="67:9" pos:end="67:31"><name pos:start="67:9" pos:end="67:26"><name pos:start="67:9" pos:end="67:9">s</name><operator pos:start="67:10" pos:end="67:11">-&gt;</operator><name pos:start="67:12" pos:end="67:26">bits_per_sample</name></name> <operator pos:start="67:28" pos:end="67:28">=</operator> <literal type="number" pos:start="67:30" pos:end="67:31">16</literal></expr>;</expr_stmt>

     </block_content>}</block></if> <if type="elseif" pos:start="69:8" pos:end="77:6">else if <condition pos:start="69:16" pos:end="69:52">(<expr pos:start="69:17" pos:end="69:51"><name pos:start="69:17" pos:end="69:31"><name pos:start="69:17" pos:end="69:21">avctx</name><operator pos:start="69:22" pos:end="69:23">-&gt;</operator><name pos:start="69:24" pos:end="69:31">codec_id</name></name> <operator pos:start="69:33" pos:end="69:34">==</operator> <name pos:start="69:36" pos:end="69:51">AV_CODEC_ID_XMA1</name></expr>)</condition> <block pos:start="69:54" pos:end="77:6">{<block_content pos:start="71:9" pos:end="75:31">

        <expr_stmt pos:start="71:9" pos:end="71:36"><expr pos:start="71:9" pos:end="71:35"><name pos:start="71:9" pos:end="71:23"><name pos:start="71:9" pos:end="71:9">s</name><operator pos:start="71:10" pos:end="71:11">-&gt;</operator><name pos:start="71:12" pos:end="71:23">decode_flags</name></name>    <operator pos:start="71:28" pos:end="71:28">=</operator> <literal type="number" pos:start="71:30" pos:end="71:35">0x10d6</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:32"><expr pos:start="73:9" pos:end="73:31"><name pos:start="73:9" pos:end="73:26"><name pos:start="73:9" pos:end="73:9">s</name><operator pos:start="73:10" pos:end="73:11">-&gt;</operator><name pos:start="73:12" pos:end="73:26">bits_per_sample</name></name> <operator pos:start="73:28" pos:end="73:28">=</operator> <literal type="number" pos:start="73:30" pos:end="73:31">16</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:31"><expr pos:start="75:9" pos:end="75:30"><name pos:start="75:9" pos:end="75:20">channel_mask</name>       <operator pos:start="75:28" pos:end="75:28">=</operator> <literal type="number" pos:start="75:30" pos:end="75:30">0</literal></expr>;</expr_stmt>

     </block_content>}</block></if> <if type="elseif" pos:start="77:8" pos:end="95:5">else if <condition pos:start="77:16" pos:end="77:85">(<expr pos:start="77:17" pos:end="77:84"><name pos:start="77:17" pos:end="77:31"><name pos:start="77:17" pos:end="77:21">avctx</name><operator pos:start="77:22" pos:end="77:23">-&gt;</operator><name pos:start="77:24" pos:end="77:31">codec_id</name></name> <operator pos:start="77:33" pos:end="77:34">==</operator> <name pos:start="77:36" pos:end="77:53">AV_CODEC_ID_WMAPRO</name> <operator pos:start="77:55" pos:end="77:56">&amp;&amp;</operator> <name pos:start="77:58" pos:end="77:78"><name pos:start="77:58" pos:end="77:62">avctx</name><operator pos:start="77:63" pos:end="77:64">-&gt;</operator><name pos:start="77:65" pos:end="77:78">extradata_size</name></name> <operator pos:start="77:80" pos:end="77:81">&gt;=</operator> <literal type="number" pos:start="77:83" pos:end="77:84">18</literal></expr>)</condition> <block pos:start="77:87" pos:end="95:5">{<block_content pos:start="79:9" pos:end="93:9">

        <expr_stmt pos:start="79:9" pos:end="79:51"><expr pos:start="79:9" pos:end="79:50"><name pos:start="79:9" pos:end="79:23"><name pos:start="79:9" pos:end="79:9">s</name><operator pos:start="79:10" pos:end="79:11">-&gt;</operator><name pos:start="79:12" pos:end="79:23">decode_flags</name></name>    <operator pos:start="79:28" pos:end="79:28">=</operator> <call pos:start="79:30" pos:end="79:50"><name pos:start="79:30" pos:end="79:36">AV_RL16</name><argument_list pos:start="79:37" pos:end="79:50">(<argument pos:start="79:38" pos:end="79:49"><expr pos:start="79:38" pos:end="79:49"><name pos:start="79:38" pos:end="79:46">edata_ptr</name><operator pos:start="79:47" pos:end="79:47">+</operator><literal type="number" pos:start="79:48" pos:end="79:49">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:50"><expr pos:start="81:9" pos:end="81:49"><name pos:start="81:9" pos:end="81:20">channel_mask</name>       <operator pos:start="81:28" pos:end="81:28">=</operator> <call pos:start="81:30" pos:end="81:49"><name pos:start="81:30" pos:end="81:36">AV_RL32</name><argument_list pos:start="81:37" pos:end="81:49">(<argument pos:start="81:38" pos:end="81:48"><expr pos:start="81:38" pos:end="81:48"><name pos:start="81:38" pos:end="81:46">edata_ptr</name><operator pos:start="81:47" pos:end="81:47">+</operator><literal type="number" pos:start="81:48" pos:end="81:48">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:48"><expr pos:start="83:9" pos:end="83:47"><name pos:start="83:9" pos:end="83:26"><name pos:start="83:9" pos:end="83:9">s</name><operator pos:start="83:10" pos:end="83:11">-&gt;</operator><name pos:start="83:12" pos:end="83:26">bits_per_sample</name></name> <operator pos:start="83:28" pos:end="83:28">=</operator> <call pos:start="83:30" pos:end="83:47"><name pos:start="83:30" pos:end="83:36">AV_RL16</name><argument_list pos:start="83:37" pos:end="83:47">(<argument pos:start="83:38" pos:end="83:46"><expr pos:start="83:38" pos:end="83:46"><name pos:start="83:38" pos:end="83:46">edata_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="87:9" pos:end="93:9"><if pos:start="87:9" pos:end="93:9">if <condition pos:start="87:12" pos:end="87:62">(<expr pos:start="87:13" pos:end="87:61"><name pos:start="87:13" pos:end="87:30"><name pos:start="87:13" pos:end="87:13">s</name><operator pos:start="87:14" pos:end="87:15">-&gt;</operator><name pos:start="87:16" pos:end="87:30">bits_per_sample</name></name> <operator pos:start="87:32" pos:end="87:32">&gt;</operator> <literal type="number" pos:start="87:34" pos:end="87:35">32</literal> <operator pos:start="87:37" pos:end="87:38">||</operator> <name pos:start="87:40" pos:end="87:57"><name pos:start="87:40" pos:end="87:40">s</name><operator pos:start="87:41" pos:end="87:42">-&gt;</operator><name pos:start="87:43" pos:end="87:57">bits_per_sample</name></name> <operator pos:start="87:59" pos:end="87:59">&lt;</operator> <literal type="number" pos:start="87:61" pos:end="87:61">1</literal></expr>)</condition> <block pos:start="87:64" pos:end="93:9">{<block_content pos:start="89:13" pos:end="91:40">

            <expr_stmt pos:start="89:13" pos:end="89:86"><expr pos:start="89:13" pos:end="89:85"><call pos:start="89:13" pos:end="89:85"><name pos:start="89:13" pos:end="89:33">avpriv_request_sample</name><argument_list pos:start="89:34" pos:end="89:85">(<argument pos:start="89:35" pos:end="89:39"><expr pos:start="89:35" pos:end="89:39"><name pos:start="89:35" pos:end="89:39">avctx</name></expr></argument>, <argument pos:start="89:42" pos:end="89:64"><expr pos:start="89:42" pos:end="89:64"><literal type="string" pos:start="89:42" pos:end="89:64">"bits per sample is %d"</literal></expr></argument>, <argument pos:start="89:67" pos:end="89:84"><expr pos:start="89:67" pos:end="89:84"><name pos:start="89:67" pos:end="89:84"><name pos:start="89:67" pos:end="89:67">s</name><operator pos:start="89:68" pos:end="89:69">-&gt;</operator><name pos:start="89:70" pos:end="89:84">bits_per_sample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="91:13" pos:end="91:40">return <expr pos:start="91:20" pos:end="91:39"><name pos:start="91:20" pos:end="91:39">AVERROR_PATCHWELCOME</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="95:7" pos:end="101:5">else <block pos:start="95:12" pos:end="101:5">{<block_content pos:start="97:9" pos:end="99:36">

        <expr_stmt pos:start="97:9" pos:end="97:63"><expr pos:start="97:9" pos:end="97:62"><call pos:start="97:9" pos:end="97:62"><name pos:start="97:9" pos:end="97:29">avpriv_request_sample</name><argument_list pos:start="97:30" pos:end="97:62">(<argument pos:start="97:31" pos:end="97:35"><expr pos:start="97:31" pos:end="97:35"><name pos:start="97:31" pos:end="97:35">avctx</name></expr></argument>, <argument pos:start="97:38" pos:end="97:61"><expr pos:start="97:38" pos:end="97:61"><literal type="string" pos:start="97:38" pos:end="97:61">"Unknown extradata size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="99:9" pos:end="99:36">return <expr pos:start="99:16" pos:end="99:35"><name pos:start="99:16" pos:end="99:35">AVERROR_PATCHWELCOME</name></expr>;</return>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="105:5" pos:end="113:5"><if pos:start="105:5" pos:end="109:5">if <condition pos:start="105:8" pos:end="105:69">(<expr pos:start="105:9" pos:end="105:68"><name pos:start="105:9" pos:end="105:23"><name pos:start="105:9" pos:end="105:13">avctx</name><operator pos:start="105:14" pos:end="105:15">-&gt;</operator><name pos:start="105:16" pos:end="105:23">codec_id</name></name> <operator pos:start="105:25" pos:end="105:26">!=</operator> <name pos:start="105:28" pos:end="105:45">AV_CODEC_ID_WMAPRO</name> <operator pos:start="105:47" pos:end="105:48">&amp;&amp;</operator> <name pos:start="105:50" pos:end="105:64"><name pos:start="105:50" pos:end="105:54">avctx</name><operator pos:start="105:55" pos:end="105:56">-&gt;</operator><name pos:start="105:57" pos:end="105:64">channels</name></name> <operator pos:start="105:66" pos:end="105:66">&gt;</operator> <literal type="number" pos:start="105:68" pos:end="105:68">2</literal></expr>)</condition> <block pos:start="105:71" pos:end="109:5">{<block_content pos:start="107:9" pos:end="107:27">

        <expr_stmt pos:start="107:9" pos:end="107:27"><expr pos:start="107:9" pos:end="107:26"><name pos:start="107:9" pos:end="107:22"><name pos:start="107:9" pos:end="107:9">s</name><operator pos:start="107:10" pos:end="107:11">-&gt;</operator><name pos:start="107:12" pos:end="107:22">nb_channels</name></name> <operator pos:start="107:24" pos:end="107:24">=</operator> <literal type="number" pos:start="107:26" pos:end="107:26">2</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="109:7" pos:end="113:5">else <block pos:start="109:12" pos:end="113:5">{<block_content pos:start="111:9" pos:end="111:41">

        <expr_stmt pos:start="111:9" pos:end="111:41"><expr pos:start="111:9" pos:end="111:40"><name pos:start="111:9" pos:end="111:22"><name pos:start="111:9" pos:end="111:9">s</name><operator pos:start="111:10" pos:end="111:11">-&gt;</operator><name pos:start="111:12" pos:end="111:22">nb_channels</name></name> <operator pos:start="111:24" pos:end="111:24">=</operator> <name pos:start="111:26" pos:end="111:40"><name pos:start="111:26" pos:end="111:30">avctx</name><operator pos:start="111:31" pos:end="111:32">-&gt;</operator><name pos:start="111:33" pos:end="111:40">channels</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" format="doxygen" pos:start="117:5" pos:end="117:23">/** generic init */</comment>

    <expr_stmt pos:start="119:5" pos:end="119:57"><expr pos:start="119:5" pos:end="119:56"><name pos:start="119:5" pos:end="119:22"><name pos:start="119:5" pos:end="119:5">s</name><operator pos:start="119:6" pos:end="119:7">-&gt;</operator><name pos:start="119:8" pos:end="119:22">log2_frame_size</name></name> <operator pos:start="119:24" pos:end="119:24">=</operator> <call pos:start="119:26" pos:end="119:52"><name pos:start="119:26" pos:end="119:32">av_log2</name><argument_list pos:start="119:33" pos:end="119:52">(<argument pos:start="119:34" pos:end="119:51"><expr pos:start="119:34" pos:end="119:51"><name pos:start="119:34" pos:end="119:51"><name pos:start="119:34" pos:end="119:38">avctx</name><operator pos:start="119:39" pos:end="119:40">-&gt;</operator><name pos:start="119:41" pos:end="119:51">block_align</name></name></expr></argument>)</argument_list></call> <operator pos:start="119:54" pos:end="119:54">+</operator> <literal type="number" pos:start="119:56" pos:end="119:56">4</literal></expr>;</expr_stmt>

    <if_stmt pos:start="121:5" pos:end="127:5"><if pos:start="121:5" pos:end="127:5">if <condition pos:start="121:8" pos:end="121:32">(<expr pos:start="121:9" pos:end="121:31"><name pos:start="121:9" pos:end="121:26"><name pos:start="121:9" pos:end="121:9">s</name><operator pos:start="121:10" pos:end="121:11">-&gt;</operator><name pos:start="121:12" pos:end="121:26">log2_frame_size</name></name> <operator pos:start="121:28" pos:end="121:28">&gt;</operator> <literal type="number" pos:start="121:30" pos:end="121:31">25</literal></expr>)</condition> <block pos:start="121:34" pos:end="127:5">{<block_content pos:start="123:9" pos:end="125:36">

        <expr_stmt pos:start="123:9" pos:end="123:58"><expr pos:start="123:9" pos:end="123:57"><call pos:start="123:9" pos:end="123:57"><name pos:start="123:9" pos:end="123:29">avpriv_request_sample</name><argument_list pos:start="123:30" pos:end="123:57">(<argument pos:start="123:31" pos:end="123:35"><expr pos:start="123:31" pos:end="123:35"><name pos:start="123:31" pos:end="123:35">avctx</name></expr></argument>, <argument pos:start="123:38" pos:end="123:56"><expr pos:start="123:38" pos:end="123:56"><literal type="string" pos:start="123:38" pos:end="123:56">"Large block align"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="125:9" pos:end="125:36">return <expr pos:start="125:16" pos:end="125:35"><name pos:start="125:16" pos:end="125:35">AVERROR_PATCHWELCOME</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" format="doxygen" pos:start="131:5" pos:end="131:21">/** frame info */</comment>

    <if_stmt pos:start="133:5" pos:end="139:26"><if pos:start="133:5" pos:end="135:26">if <condition pos:start="133:8" pos:end="133:46">(<expr pos:start="133:9" pos:end="133:45"><name pos:start="133:9" pos:end="133:23"><name pos:start="133:9" pos:end="133:13">avctx</name><operator pos:start="133:14" pos:end="133:15">-&gt;</operator><name pos:start="133:16" pos:end="133:23">codec_id</name></name> <operator pos:start="133:25" pos:end="133:26">!=</operator> <name pos:start="133:28" pos:end="133:45">AV_CODEC_ID_WMAPRO</name></expr>)</condition><block type="pseudo" pos:start="135:9" pos:end="135:26"><block_content pos:start="135:9" pos:end="135:26">

        <expr_stmt pos:start="135:9" pos:end="135:26"><expr pos:start="135:9" pos:end="135:25"><name pos:start="135:9" pos:end="135:21"><name pos:start="135:9" pos:end="135:9">s</name><operator pos:start="135:10" pos:end="135:11">-&gt;</operator><name pos:start="135:12" pos:end="135:21">skip_frame</name></name> <operator pos:start="135:23" pos:end="135:23">=</operator> <literal type="number" pos:start="135:25" pos:end="135:25">0</literal></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="137:5" pos:end="139:26">else<block type="pseudo" pos:start="139:9" pos:end="139:26"><block_content pos:start="139:9" pos:end="139:26">

        <expr_stmt pos:start="139:9" pos:end="139:26"><expr pos:start="139:9" pos:end="139:25"><name pos:start="139:9" pos:end="139:21"><name pos:start="139:9" pos:end="139:9">s</name><operator pos:start="139:10" pos:end="139:11">-&gt;</operator><name pos:start="139:12" pos:end="139:21">skip_frame</name></name> <operator pos:start="139:23" pos:end="139:23">=</operator> <literal type="number" pos:start="139:25" pos:end="139:25">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> <comment type="block" pos:start="139:28" pos:end="139:49">/* skip first frame */</comment>



    <expr_stmt pos:start="143:5" pos:end="143:23"><expr pos:start="143:5" pos:end="143:22"><name pos:start="143:5" pos:end="143:18"><name pos:start="143:5" pos:end="143:5">s</name><operator pos:start="143:6" pos:end="143:7">-&gt;</operator><name pos:start="143:8" pos:end="143:18">packet_loss</name></name> <operator pos:start="143:20" pos:end="143:20">=</operator> <literal type="number" pos:start="143:22" pos:end="143:22">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="145:5" pos:end="145:46"><expr pos:start="145:5" pos:end="145:45"><name pos:start="145:5" pos:end="145:17"><name pos:start="145:5" pos:end="145:5">s</name><operator pos:start="145:6" pos:end="145:7">-&gt;</operator><name pos:start="145:8" pos:end="145:17">len_prefix</name></name>  <operator pos:start="145:20" pos:end="145:20">=</operator> <operator pos:start="145:22" pos:end="145:22">(</operator><name pos:start="145:23" pos:end="145:37"><name pos:start="145:23" pos:end="145:23">s</name><operator pos:start="145:24" pos:end="145:25">-&gt;</operator><name pos:start="145:26" pos:end="145:37">decode_flags</name></name> <operator pos:start="145:39" pos:end="145:39">&amp;</operator> <literal type="number" pos:start="145:41" pos:end="145:44">0x40</literal><operator pos:start="145:45" pos:end="145:45">)</operator></expr>;</expr_stmt>



    <comment type="block" format="doxygen" pos:start="149:5" pos:end="149:24">/** get frame len */</comment>

    <if_stmt pos:start="151:5" pos:end="169:5"><if pos:start="151:5" pos:end="165:5">if <condition pos:start="151:8" pos:end="151:46">(<expr pos:start="151:9" pos:end="151:45"><name pos:start="151:9" pos:end="151:23"><name pos:start="151:9" pos:end="151:13">avctx</name><operator pos:start="151:14" pos:end="151:15">-&gt;</operator><name pos:start="151:16" pos:end="151:23">codec_id</name></name> <operator pos:start="151:25" pos:end="151:26">==</operator> <name pos:start="151:28" pos:end="151:45">AV_CODEC_ID_WMAPRO</name></expr>)</condition> <block pos:start="151:48" pos:end="165:5">{<block_content pos:start="153:9" pos:end="163:41">

        <expr_stmt pos:start="153:9" pos:end="153:81"><expr pos:start="153:9" pos:end="153:80"><name pos:start="153:9" pos:end="153:12">bits</name> <operator pos:start="153:14" pos:end="153:14">=</operator> <call pos:start="153:16" pos:end="153:80"><name pos:start="153:16" pos:end="153:40">ff_wma_get_frame_len_bits</name><argument_list pos:start="153:41" pos:end="153:80">(<argument pos:start="153:42" pos:end="153:59"><expr pos:start="153:42" pos:end="153:59"><name pos:start="153:42" pos:end="153:59"><name pos:start="153:42" pos:end="153:46">avctx</name><operator pos:start="153:47" pos:end="153:48">-&gt;</operator><name pos:start="153:49" pos:end="153:59">sample_rate</name></name></expr></argument>, <argument pos:start="153:62" pos:end="153:62"><expr pos:start="153:62" pos:end="153:62"><literal type="number" pos:start="153:62" pos:end="153:62">3</literal></expr></argument>, <argument pos:start="153:65" pos:end="153:79"><expr pos:start="153:65" pos:end="153:79"><name pos:start="153:65" pos:end="153:79"><name pos:start="153:65" pos:end="153:65">s</name><operator pos:start="153:66" pos:end="153:67">-&gt;</operator><name pos:start="153:68" pos:end="153:79">decode_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="155:9" pos:end="161:9"><if pos:start="155:9" pos:end="161:9">if <condition pos:start="155:12" pos:end="155:41">(<expr pos:start="155:13" pos:end="155:40"><name pos:start="155:13" pos:end="155:16">bits</name> <operator pos:start="155:18" pos:end="155:18">&gt;</operator> <name pos:start="155:20" pos:end="155:40">WMAPRO_BLOCK_MAX_BITS</name></expr>)</condition> <block pos:start="155:43" pos:end="161:9">{<block_content pos:start="157:13" pos:end="159:40">

            <expr_stmt pos:start="157:13" pos:end="157:63"><expr pos:start="157:13" pos:end="157:62"><call pos:start="157:13" pos:end="157:62"><name pos:start="157:13" pos:end="157:33">avpriv_request_sample</name><argument_list pos:start="157:34" pos:end="157:62">(<argument pos:start="157:35" pos:end="157:39"><expr pos:start="157:35" pos:end="157:39"><name pos:start="157:35" pos:end="157:39">avctx</name></expr></argument>, <argument pos:start="157:42" pos:end="157:61"><expr pos:start="157:42" pos:end="157:61"><literal type="string" pos:start="157:42" pos:end="157:61">"14-bit block sizes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="159:13" pos:end="159:40">return <expr pos:start="159:20" pos:end="159:39"><name pos:start="159:20" pos:end="159:39">AVERROR_PATCHWELCOME</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:41"><expr pos:start="163:9" pos:end="163:40"><name pos:start="163:9" pos:end="163:28"><name pos:start="163:9" pos:end="163:9">s</name><operator pos:start="163:10" pos:end="163:11">-&gt;</operator><name pos:start="163:12" pos:end="163:28">samples_per_frame</name></name> <operator pos:start="163:30" pos:end="163:30">=</operator> <literal type="number" pos:start="163:32" pos:end="163:32">1</literal> <operator pos:start="163:34" pos:end="163:35">&lt;&lt;</operator> <name pos:start="163:37" pos:end="163:40">bits</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="165:7" pos:end="169:5">else <block pos:start="165:12" pos:end="169:5">{<block_content pos:start="167:9" pos:end="167:35">

        <expr_stmt pos:start="167:9" pos:end="167:35"><expr pos:start="167:9" pos:end="167:34"><name pos:start="167:9" pos:end="167:28"><name pos:start="167:9" pos:end="167:9">s</name><operator pos:start="167:10" pos:end="167:11">-&gt;</operator><name pos:start="167:12" pos:end="167:28">samples_per_frame</name></name> <operator pos:start="167:30" pos:end="167:30">=</operator> <literal type="number" pos:start="167:32" pos:end="167:34">512</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" format="doxygen" pos:start="173:5" pos:end="173:24">/** subframe info */</comment>

    <expr_stmt pos:start="175:5" pos:end="175:67"><expr pos:start="175:5" pos:end="175:66"><name pos:start="175:5" pos:end="175:26">log2_max_num_subframes</name>       <operator pos:start="175:34" pos:end="175:34">=</operator> <operator pos:start="175:36" pos:end="175:36">(</operator><operator pos:start="175:37" pos:end="175:37">(</operator><name pos:start="175:38" pos:end="175:52"><name pos:start="175:38" pos:end="175:38">s</name><operator pos:start="175:39" pos:end="175:40">-&gt;</operator><name pos:start="175:41" pos:end="175:52">decode_flags</name></name> <operator pos:start="175:54" pos:end="175:54">&amp;</operator> <literal type="number" pos:start="175:56" pos:end="175:59">0x38</literal><operator pos:start="175:60" pos:end="175:60">)</operator> <operator pos:start="175:62" pos:end="175:63">&gt;&gt;</operator> <literal type="number" pos:start="175:65" pos:end="175:65">3</literal><operator pos:start="175:66" pos:end="175:66">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="177:5" pos:end="177:63"><expr pos:start="177:5" pos:end="177:62"><name pos:start="177:5" pos:end="177:24"><name pos:start="177:5" pos:end="177:5">s</name><operator pos:start="177:6" pos:end="177:7">-&gt;</operator><name pos:start="177:8" pos:end="177:24">max_num_subframes</name></name>         <operator pos:start="177:34" pos:end="177:34">=</operator> <literal type="number" pos:start="177:36" pos:end="177:36">1</literal> <operator pos:start="177:38" pos:end="177:39">&lt;&lt;</operator> <name pos:start="177:41" pos:end="177:62">log2_max_num_subframes</name></expr>;</expr_stmt>

    <if_stmt pos:start="179:5" pos:end="181:36"><if pos:start="179:5" pos:end="181:36">if <condition pos:start="179:8" pos:end="179:64">(<expr pos:start="179:9" pos:end="179:63"><name pos:start="179:9" pos:end="179:28"><name pos:start="179:9" pos:end="179:9">s</name><operator pos:start="179:10" pos:end="179:11">-&gt;</operator><name pos:start="179:12" pos:end="179:28">max_num_subframes</name></name> <operator pos:start="179:30" pos:end="179:31">==</operator> <literal type="number" pos:start="179:33" pos:end="179:34">16</literal> <operator pos:start="179:36" pos:end="179:37">||</operator> <name pos:start="179:39" pos:end="179:58"><name pos:start="179:39" pos:end="179:39">s</name><operator pos:start="179:40" pos:end="179:41">-&gt;</operator><name pos:start="179:42" pos:end="179:58">max_num_subframes</name></name> <operator pos:start="179:60" pos:end="179:61">==</operator> <literal type="number" pos:start="179:63" pos:end="179:63">4</literal></expr>)</condition><block type="pseudo" pos:start="181:9" pos:end="181:36"><block_content pos:start="181:9" pos:end="181:36">

        <expr_stmt pos:start="181:9" pos:end="181:36"><expr pos:start="181:9" pos:end="181:35"><name pos:start="181:9" pos:end="181:31"><name pos:start="181:9" pos:end="181:9">s</name><operator pos:start="181:10" pos:end="181:11">-&gt;</operator><name pos:start="181:12" pos:end="181:31">max_subframe_len_bit</name></name> <operator pos:start="181:33" pos:end="181:33">=</operator> <literal type="number" pos:start="181:35" pos:end="181:35">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="183:5" pos:end="183:63"><expr pos:start="183:5" pos:end="183:62"><name pos:start="183:5" pos:end="183:24"><name pos:start="183:5" pos:end="183:5">s</name><operator pos:start="183:6" pos:end="183:7">-&gt;</operator><name pos:start="183:8" pos:end="183:24">subframe_len_bits</name></name> <operator pos:start="183:26" pos:end="183:26">=</operator> <call pos:start="183:28" pos:end="183:58"><name pos:start="183:28" pos:end="183:34">av_log2</name><argument_list pos:start="183:35" pos:end="183:58">(<argument pos:start="183:36" pos:end="183:57"><expr pos:start="183:36" pos:end="183:57"><name pos:start="183:36" pos:end="183:57">log2_max_num_subframes</name></expr></argument>)</argument_list></call> <operator pos:start="183:60" pos:end="183:60">+</operator> <literal type="number" pos:start="183:62" pos:end="183:62">1</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="187:5" pos:end="187:62"><expr pos:start="187:5" pos:end="187:61"><name pos:start="187:5" pos:end="187:28">num_possible_block_sizes</name>     <operator pos:start="187:34" pos:end="187:34">=</operator> <name pos:start="187:36" pos:end="187:57">log2_max_num_subframes</name> <operator pos:start="187:59" pos:end="187:59">+</operator> <literal type="number" pos:start="187:61" pos:end="187:61">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="189:5" pos:end="189:79"><expr pos:start="189:5" pos:end="189:78"><name pos:start="189:5" pos:end="189:31"><name pos:start="189:5" pos:end="189:5">s</name><operator pos:start="189:6" pos:end="189:7">-&gt;</operator><name pos:start="189:8" pos:end="189:31">min_samples_per_subframe</name></name>  <operator pos:start="189:34" pos:end="189:34">=</operator> <name pos:start="189:36" pos:end="189:55"><name pos:start="189:36" pos:end="189:36">s</name><operator pos:start="189:37" pos:end="189:38">-&gt;</operator><name pos:start="189:39" pos:end="189:55">samples_per_frame</name></name> <operator pos:start="189:57" pos:end="189:57">/</operator> <name pos:start="189:59" pos:end="189:78"><name pos:start="189:59" pos:end="189:59">s</name><operator pos:start="189:60" pos:end="189:61">-&gt;</operator><name pos:start="189:62" pos:end="189:78">max_num_subframes</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="191:5" pos:end="191:60"><expr pos:start="191:5" pos:end="191:59"><name pos:start="191:5" pos:end="191:32"><name pos:start="191:5" pos:end="191:5">s</name><operator pos:start="191:6" pos:end="191:7">-&gt;</operator><name pos:start="191:8" pos:end="191:32">dynamic_range_compression</name></name> <operator pos:start="191:34" pos:end="191:34">=</operator> <operator pos:start="191:36" pos:end="191:36">(</operator><name pos:start="191:37" pos:end="191:51"><name pos:start="191:37" pos:end="191:37">s</name><operator pos:start="191:38" pos:end="191:39">-&gt;</operator><name pos:start="191:40" pos:end="191:51">decode_flags</name></name> <operator pos:start="191:53" pos:end="191:53">&amp;</operator> <literal type="number" pos:start="191:55" pos:end="191:58">0x80</literal><operator pos:start="191:59" pos:end="191:59">)</operator></expr>;</expr_stmt>



    <if_stmt pos:start="195:5" pos:end="203:5"><if pos:start="195:5" pos:end="203:5">if <condition pos:start="195:8" pos:end="195:45">(<expr pos:start="195:9" pos:end="195:44"><name pos:start="195:9" pos:end="195:28"><name pos:start="195:9" pos:end="195:9">s</name><operator pos:start="195:10" pos:end="195:11">-&gt;</operator><name pos:start="195:12" pos:end="195:28">max_num_subframes</name></name> <operator pos:start="195:30" pos:end="195:30">&gt;</operator> <name pos:start="195:32" pos:end="195:44">MAX_SUBFRAMES</name></expr>)</condition> <block pos:start="195:47" pos:end="203:5">{<block_content pos:start="197:9" pos:end="201:35">

        <expr_stmt pos:start="197:9" pos:end="199:37"><expr pos:start="197:9" pos:end="199:36"><call pos:start="197:9" pos:end="199:36"><name pos:start="197:9" pos:end="197:14">av_log</name><argument_list pos:start="197:15" pos:end="199:36">(<argument pos:start="197:16" pos:end="197:20"><expr pos:start="197:16" pos:end="197:20"><name pos:start="197:16" pos:end="197:20">avctx</name></expr></argument>, <argument pos:start="197:23" pos:end="197:34"><expr pos:start="197:23" pos:end="197:34"><name pos:start="197:23" pos:end="197:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="197:37" pos:end="197:76"><expr pos:start="197:37" pos:end="197:76"><literal type="string" pos:start="197:37" pos:end="197:67">"invalid number of subframes %"</literal><name pos:start="197:68" pos:end="197:72">PRId8</name><literal type="string" pos:start="197:73" pos:end="197:76">"\n"</literal></expr></argument>,

               <argument pos:start="199:16" pos:end="199:35"><expr pos:start="199:16" pos:end="199:35"><name pos:start="199:16" pos:end="199:35"><name pos:start="199:16" pos:end="199:16">s</name><operator pos:start="199:17" pos:end="199:18">-&gt;</operator><name pos:start="199:19" pos:end="199:35">max_num_subframes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="201:9" pos:end="201:35">return <expr pos:start="201:16" pos:end="201:34"><name pos:start="201:16" pos:end="201:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="207:5" pos:end="215:5"><if pos:start="207:5" pos:end="215:5">if <condition pos:start="207:8" pos:end="207:60">(<expr pos:start="207:9" pos:end="207:59"><name pos:start="207:9" pos:end="207:35"><name pos:start="207:9" pos:end="207:9">s</name><operator pos:start="207:10" pos:end="207:11">-&gt;</operator><name pos:start="207:12" pos:end="207:35">min_samples_per_subframe</name></name> <operator pos:start="207:37" pos:end="207:37">&lt;</operator> <name pos:start="207:39" pos:end="207:59">WMAPRO_BLOCK_MIN_SIZE</name></expr>)</condition> <block pos:start="207:62" pos:end="215:5">{<block_content pos:start="209:9" pos:end="213:35">

        <expr_stmt pos:start="209:9" pos:end="211:44"><expr pos:start="209:9" pos:end="211:43"><call pos:start="209:9" pos:end="211:43"><name pos:start="209:9" pos:end="209:14">av_log</name><argument_list pos:start="209:15" pos:end="211:43">(<argument pos:start="209:16" pos:end="209:20"><expr pos:start="209:16" pos:end="209:20"><name pos:start="209:16" pos:end="209:20">avctx</name></expr></argument>, <argument pos:start="209:23" pos:end="209:34"><expr pos:start="209:23" pos:end="209:34"><name pos:start="209:23" pos:end="209:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="209:37" pos:end="209:80"><expr pos:start="209:37" pos:end="209:80"><literal type="string" pos:start="209:37" pos:end="209:80">"min_samples_per_subframe of %d too small\n"</literal></expr></argument>,

               <argument pos:start="211:16" pos:end="211:42"><expr pos:start="211:16" pos:end="211:42"><name pos:start="211:16" pos:end="211:42"><name pos:start="211:16" pos:end="211:16">s</name><operator pos:start="211:17" pos:end="211:18">-&gt;</operator><name pos:start="211:19" pos:end="211:42">min_samples_per_subframe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="213:9" pos:end="213:35">return <expr pos:start="213:16" pos:end="213:34"><name pos:start="213:16" pos:end="213:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="219:5" pos:end="225:5"><if pos:start="219:5" pos:end="225:5">if <condition pos:start="219:8" pos:end="219:35">(<expr pos:start="219:9" pos:end="219:34"><name pos:start="219:9" pos:end="219:29"><name pos:start="219:9" pos:end="219:9">s</name><operator pos:start="219:10" pos:end="219:11">-&gt;</operator><name pos:start="219:12" pos:end="219:16">avctx</name><operator pos:start="219:17" pos:end="219:18">-&gt;</operator><name pos:start="219:19" pos:end="219:29">sample_rate</name></name> <operator pos:start="219:31" pos:end="219:32">&lt;=</operator> <literal type="number" pos:start="219:34" pos:end="219:34">0</literal></expr>)</condition> <block pos:start="219:37" pos:end="225:5">{<block_content pos:start="221:9" pos:end="223:35">

        <expr_stmt pos:start="221:9" pos:end="221:61"><expr pos:start="221:9" pos:end="221:60"><call pos:start="221:9" pos:end="221:60"><name pos:start="221:9" pos:end="221:14">av_log</name><argument_list pos:start="221:15" pos:end="221:60">(<argument pos:start="221:16" pos:end="221:20"><expr pos:start="221:16" pos:end="221:20"><name pos:start="221:16" pos:end="221:20">avctx</name></expr></argument>, <argument pos:start="221:23" pos:end="221:34"><expr pos:start="221:23" pos:end="221:34"><name pos:start="221:23" pos:end="221:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="221:37" pos:end="221:59"><expr pos:start="221:37" pos:end="221:59"><literal type="string" pos:start="221:37" pos:end="221:59">"invalid sample rate\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="223:9" pos:end="223:35">return <expr pos:start="223:16" pos:end="223:34"><name pos:start="223:16" pos:end="223:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="229:5" pos:end="245:5"><if pos:start="229:5" pos:end="237:5">if <condition pos:start="229:8" pos:end="229:28">(<expr pos:start="229:9" pos:end="229:27"><name pos:start="229:9" pos:end="229:22"><name pos:start="229:9" pos:end="229:9">s</name><operator pos:start="229:10" pos:end="229:11">-&gt;</operator><name pos:start="229:12" pos:end="229:22">nb_channels</name></name> <operator pos:start="229:24" pos:end="229:25">&lt;=</operator> <literal type="number" pos:start="229:27" pos:end="229:27">0</literal></expr>)</condition> <block pos:start="229:30" pos:end="237:5">{<block_content pos:start="231:9" pos:end="235:35">

        <expr_stmt pos:start="231:9" pos:end="233:31"><expr pos:start="231:9" pos:end="233:30"><call pos:start="231:9" pos:end="233:30"><name pos:start="231:9" pos:end="231:14">av_log</name><argument_list pos:start="231:15" pos:end="233:30">(<argument pos:start="231:16" pos:end="231:20"><expr pos:start="231:16" pos:end="231:20"><name pos:start="231:16" pos:end="231:20">avctx</name></expr></argument>, <argument pos:start="231:23" pos:end="231:34"><expr pos:start="231:23" pos:end="231:34"><name pos:start="231:23" pos:end="231:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="231:37" pos:end="231:69"><expr pos:start="231:37" pos:end="231:69"><literal type="string" pos:start="231:37" pos:end="231:69">"invalid number of channels %d\n"</literal></expr></argument>,

               <argument pos:start="233:16" pos:end="233:29"><expr pos:start="233:16" pos:end="233:29"><name pos:start="233:16" pos:end="233:29"><name pos:start="233:16" pos:end="233:16">s</name><operator pos:start="233:17" pos:end="233:18">-&gt;</operator><name pos:start="233:19" pos:end="233:29">nb_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="235:9" pos:end="235:35">return <expr pos:start="235:16" pos:end="235:34"><name pos:start="235:16" pos:end="235:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="237:7" pos:end="245:5">else if <condition pos:start="237:15" pos:end="237:52">(<expr pos:start="237:16" pos:end="237:51"><name pos:start="237:16" pos:end="237:29"><name pos:start="237:16" pos:end="237:16">s</name><operator pos:start="237:17" pos:end="237:18">-&gt;</operator><name pos:start="237:19" pos:end="237:29">nb_channels</name></name> <operator pos:start="237:31" pos:end="237:31">&gt;</operator> <name pos:start="237:33" pos:end="237:51">WMAPRO_MAX_CHANNELS</name></expr>)</condition> <block pos:start="237:54" pos:end="245:5">{<block_content pos:start="239:9" pos:end="243:36">

        <expr_stmt pos:start="239:9" pos:end="241:76"><expr pos:start="239:9" pos:end="241:75"><call pos:start="239:9" pos:end="241:75"><name pos:start="239:9" pos:end="239:29">avpriv_request_sample</name><argument_list pos:start="239:30" pos:end="241:75">(<argument pos:start="239:31" pos:end="239:35"><expr pos:start="239:31" pos:end="239:35"><name pos:start="239:31" pos:end="239:35">avctx</name></expr></argument>,

                              <argument pos:start="241:31" pos:end="241:53"><expr pos:start="241:31" pos:end="241:53"><literal type="string" pos:start="241:31" pos:end="241:53">"More than %d channels"</literal></expr></argument>, <argument pos:start="241:56" pos:end="241:74"><expr pos:start="241:56" pos:end="241:74"><name pos:start="241:56" pos:end="241:74">WMAPRO_MAX_CHANNELS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="243:9" pos:end="243:36">return <expr pos:start="243:16" pos:end="243:35"><name pos:start="243:16" pos:end="243:35">AVERROR_PATCHWELCOME</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" format="doxygen" pos:start="249:5" pos:end="249:34">/** init previous block len */</comment>

    <for pos:start="251:5" pos:end="253:60">for <control pos:start="251:9" pos:end="251:40">(<init pos:start="251:10" pos:end="251:15"><expr pos:start="251:10" pos:end="251:14"><name pos:start="251:10" pos:end="251:10">i</name> <operator pos:start="251:12" pos:end="251:12">=</operator> <literal type="number" pos:start="251:14" pos:end="251:14">0</literal></expr>;</init> <condition pos:start="251:17" pos:end="251:35"><expr pos:start="251:17" pos:end="251:34"><name pos:start="251:17" pos:end="251:17">i</name> <operator pos:start="251:19" pos:end="251:19">&lt;</operator> <name pos:start="251:21" pos:end="251:34"><name pos:start="251:21" pos:end="251:21">s</name><operator pos:start="251:22" pos:end="251:23">-&gt;</operator><name pos:start="251:24" pos:end="251:34">nb_channels</name></name></expr>;</condition> <incr pos:start="251:37" pos:end="251:39"><expr pos:start="251:37" pos:end="251:39"><name pos:start="251:37" pos:end="251:37">i</name><operator pos:start="251:38" pos:end="251:39">++</operator></expr></incr>)</control><block type="pseudo" pos:start="253:9" pos:end="253:60"><block_content pos:start="253:9" pos:end="253:60">

        <expr_stmt pos:start="253:9" pos:end="253:60"><expr pos:start="253:9" pos:end="253:59"><name pos:start="253:9" pos:end="253:21"><name pos:start="253:9" pos:end="253:9">s</name><operator pos:start="253:10" pos:end="253:11">-&gt;</operator><name pos:start="253:12" pos:end="253:18">channel</name><index pos:start="253:19" pos:end="253:21">[<expr pos:start="253:20" pos:end="253:20"><name pos:start="253:20" pos:end="253:20">i</name></expr>]</index></name><operator pos:start="253:22" pos:end="253:22">.</operator><name pos:start="253:23" pos:end="253:36">prev_block_len</name> <operator pos:start="253:38" pos:end="253:38">=</operator> <name pos:start="253:40" pos:end="253:59"><name pos:start="253:40" pos:end="253:40">s</name><operator pos:start="253:41" pos:end="253:42">-&gt;</operator><name pos:start="253:43" pos:end="253:59">samples_per_frame</name></name></expr>;</expr_stmt></block_content></block></for>



    <comment type="block" format="doxygen" pos:start="257:5" pos:end="257:39">/** extract lfe channel position */</comment>

    <expr_stmt pos:start="259:5" pos:end="259:24"><expr pos:start="259:5" pos:end="259:23"><name pos:start="259:5" pos:end="259:18"><name pos:start="259:5" pos:end="259:5">s</name><operator pos:start="259:6" pos:end="259:7">-&gt;</operator><name pos:start="259:8" pos:end="259:18">lfe_channel</name></name> <operator pos:start="259:20" pos:end="259:20">=</operator> <operator pos:start="259:22" pos:end="259:22">-</operator><literal type="number" pos:start="259:23" pos:end="259:23">1</literal></expr>;</expr_stmt>



    <if_stmt pos:start="263:5" pos:end="275:5"><if pos:start="263:5" pos:end="275:5">if <condition pos:start="263:8" pos:end="263:25">(<expr pos:start="263:9" pos:end="263:24"><name pos:start="263:9" pos:end="263:20">channel_mask</name> <operator pos:start="263:22" pos:end="263:22">&amp;</operator> <literal type="number" pos:start="263:24" pos:end="263:24">8</literal></expr>)</condition> <block pos:start="263:27" pos:end="275:5">{<block_content pos:start="265:9" pos:end="273:9">

        <decl_stmt pos:start="265:9" pos:end="265:26"><decl pos:start="265:9" pos:end="265:25"><type pos:start="265:9" pos:end="265:20"><name pos:start="265:9" pos:end="265:16">unsigned</name> <name pos:start="265:18" pos:end="265:20">int</name></type> <name pos:start="265:22" pos:end="265:25">mask</name></decl>;</decl_stmt>

        <for pos:start="267:9" pos:end="273:9">for <control pos:start="267:13" pos:end="267:45">(<init pos:start="267:14" pos:end="267:22"><expr pos:start="267:14" pos:end="267:21"><name pos:start="267:14" pos:end="267:17">mask</name> <operator pos:start="267:19" pos:end="267:19">=</operator> <literal type="number" pos:start="267:21" pos:end="267:21">1</literal></expr>;</init> <condition pos:start="267:24" pos:end="267:33"><expr pos:start="267:24" pos:end="267:32"><name pos:start="267:24" pos:end="267:27">mask</name> <operator pos:start="267:29" pos:end="267:29">&lt;</operator> <literal type="number" pos:start="267:31" pos:end="267:32">16</literal></expr>;</condition> <incr pos:start="267:35" pos:end="267:44"><expr pos:start="267:35" pos:end="267:44"><name pos:start="267:35" pos:end="267:38">mask</name> <operator pos:start="267:40" pos:end="267:42">&lt;&lt;=</operator> <literal type="number" pos:start="267:44" pos:end="267:44">1</literal></expr></incr>)</control> <block pos:start="267:47" pos:end="273:9">{<block_content pos:start="269:13" pos:end="271:33">

            <if_stmt pos:start="269:13" pos:end="271:33"><if pos:start="269:13" pos:end="271:33">if <condition pos:start="269:16" pos:end="269:36">(<expr pos:start="269:17" pos:end="269:35"><name pos:start="269:17" pos:end="269:28">channel_mask</name> <operator pos:start="269:30" pos:end="269:30">&amp;</operator> <name pos:start="269:32" pos:end="269:35">mask</name></expr>)</condition><block type="pseudo" pos:start="271:17" pos:end="271:33"><block_content pos:start="271:17" pos:end="271:33">

                <expr_stmt pos:start="271:17" pos:end="271:33"><expr pos:start="271:17" pos:end="271:32"><operator pos:start="271:17" pos:end="271:18">++</operator><name pos:start="271:19" pos:end="271:32"><name pos:start="271:19" pos:end="271:19">s</name><operator pos:start="271:20" pos:end="271:21">-&gt;</operator><name pos:start="271:22" pos:end="271:32">lfe_channel</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="279:5" pos:end="283:48"><expr pos:start="279:5" pos:end="283:47"><call pos:start="279:5" pos:end="283:47"><name pos:start="279:5" pos:end="279:19">INIT_VLC_STATIC</name><argument_list pos:start="279:20" pos:end="283:47">(<argument pos:start="279:21" pos:end="279:27"><expr pos:start="279:21" pos:end="279:27"><operator pos:start="279:21" pos:end="279:21">&amp;</operator><name pos:start="279:22" pos:end="279:27">sf_vlc</name></expr></argument>, <argument pos:start="279:30" pos:end="279:41"><expr pos:start="279:30" pos:end="279:41"><name pos:start="279:30" pos:end="279:41">SCALEVLCBITS</name></expr></argument>, <argument pos:start="279:44" pos:end="279:58"><expr pos:start="279:44" pos:end="279:58"><name pos:start="279:44" pos:end="279:58">HUFF_SCALE_SIZE</name></expr></argument>,

                    <argument pos:start="281:21" pos:end="281:34"><expr pos:start="281:21" pos:end="281:34"><name pos:start="281:21" pos:end="281:34">scale_huffbits</name></expr></argument>, <argument pos:start="281:37" pos:end="281:37"><expr pos:start="281:37" pos:end="281:37"><literal type="number" pos:start="281:37" pos:end="281:37">1</literal></expr></argument>, <argument pos:start="281:40" pos:end="281:40"><expr pos:start="281:40" pos:end="281:40"><literal type="number" pos:start="281:40" pos:end="281:40">1</literal></expr></argument>,

                    <argument pos:start="283:21" pos:end="283:35"><expr pos:start="283:21" pos:end="283:35"><name pos:start="283:21" pos:end="283:35">scale_huffcodes</name></expr></argument>, <argument pos:start="283:38" pos:end="283:38"><expr pos:start="283:38" pos:end="283:38"><literal type="number" pos:start="283:38" pos:end="283:38">2</literal></expr></argument>, <argument pos:start="283:41" pos:end="283:41"><expr pos:start="283:41" pos:end="283:41"><literal type="number" pos:start="283:41" pos:end="283:41">2</literal></expr></argument>, <argument pos:start="283:44" pos:end="283:46"><expr pos:start="283:44" pos:end="283:46"><literal type="number" pos:start="283:44" pos:end="283:46">616</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="287:5" pos:end="291:52"><expr pos:start="287:5" pos:end="291:51"><call pos:start="287:5" pos:end="291:51"><name pos:start="287:5" pos:end="287:19">INIT_VLC_STATIC</name><argument_list pos:start="287:20" pos:end="291:51">(<argument pos:start="287:21" pos:end="287:30"><expr pos:start="287:21" pos:end="287:30"><operator pos:start="287:21" pos:end="287:21">&amp;</operator><name pos:start="287:22" pos:end="287:30">sf_rl_vlc</name></expr></argument>, <argument pos:start="287:33" pos:end="287:39"><expr pos:start="287:33" pos:end="287:39"><name pos:start="287:33" pos:end="287:39">VLCBITS</name></expr></argument>, <argument pos:start="287:42" pos:end="287:59"><expr pos:start="287:42" pos:end="287:59"><name pos:start="287:42" pos:end="287:59">HUFF_SCALE_RL_SIZE</name></expr></argument>,

                    <argument pos:start="289:21" pos:end="289:37"><expr pos:start="289:21" pos:end="289:37"><name pos:start="289:21" pos:end="289:37">scale_rl_huffbits</name></expr></argument>, <argument pos:start="289:40" pos:end="289:40"><expr pos:start="289:40" pos:end="289:40"><literal type="number" pos:start="289:40" pos:end="289:40">1</literal></expr></argument>, <argument pos:start="289:43" pos:end="289:43"><expr pos:start="289:43" pos:end="289:43"><literal type="number" pos:start="289:43" pos:end="289:43">1</literal></expr></argument>,

                    <argument pos:start="291:21" pos:end="291:38"><expr pos:start="291:21" pos:end="291:38"><name pos:start="291:21" pos:end="291:38">scale_rl_huffcodes</name></expr></argument>, <argument pos:start="291:41" pos:end="291:41"><expr pos:start="291:41" pos:end="291:41"><literal type="number" pos:start="291:41" pos:end="291:41">4</literal></expr></argument>, <argument pos:start="291:44" pos:end="291:44"><expr pos:start="291:44" pos:end="291:44"><literal type="number" pos:start="291:44" pos:end="291:44">4</literal></expr></argument>, <argument pos:start="291:47" pos:end="291:50"><expr pos:start="291:47" pos:end="291:50"><literal type="number" pos:start="291:47" pos:end="291:50">1406</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="295:5" pos:end="299:49"><expr pos:start="295:5" pos:end="299:48"><call pos:start="295:5" pos:end="299:48"><name pos:start="295:5" pos:end="295:19">INIT_VLC_STATIC</name><argument_list pos:start="295:20" pos:end="299:48">(<argument pos:start="295:21" pos:end="295:32"><expr pos:start="295:21" pos:end="295:32"><operator pos:start="295:21" pos:end="295:21">&amp;</operator><name pos:start="295:22" pos:end="295:32"><name pos:start="295:22" pos:end="295:29">coef_vlc</name><index pos:start="295:30" pos:end="295:32">[<expr pos:start="295:31" pos:end="295:31"><literal type="number" pos:start="295:31" pos:end="295:31">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="295:35" pos:end="295:41"><expr pos:start="295:35" pos:end="295:41"><name pos:start="295:35" pos:end="295:41">VLCBITS</name></expr></argument>, <argument pos:start="295:44" pos:end="295:58"><expr pos:start="295:44" pos:end="295:58"><name pos:start="295:44" pos:end="295:58">HUFF_COEF0_SIZE</name></expr></argument>,

                    <argument pos:start="297:21" pos:end="297:34"><expr pos:start="297:21" pos:end="297:34"><name pos:start="297:21" pos:end="297:34">coef0_huffbits</name></expr></argument>, <argument pos:start="297:37" pos:end="297:37"><expr pos:start="297:37" pos:end="297:37"><literal type="number" pos:start="297:37" pos:end="297:37">1</literal></expr></argument>, <argument pos:start="297:40" pos:end="297:40"><expr pos:start="297:40" pos:end="297:40"><literal type="number" pos:start="297:40" pos:end="297:40">1</literal></expr></argument>,

                    <argument pos:start="299:21" pos:end="299:35"><expr pos:start="299:21" pos:end="299:35"><name pos:start="299:21" pos:end="299:35">coef0_huffcodes</name></expr></argument>, <argument pos:start="299:38" pos:end="299:38"><expr pos:start="299:38" pos:end="299:38"><literal type="number" pos:start="299:38" pos:end="299:38">4</literal></expr></argument>, <argument pos:start="299:41" pos:end="299:41"><expr pos:start="299:41" pos:end="299:41"><literal type="number" pos:start="299:41" pos:end="299:41">4</literal></expr></argument>, <argument pos:start="299:44" pos:end="299:47"><expr pos:start="299:44" pos:end="299:47"><literal type="number" pos:start="299:44" pos:end="299:47">2108</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="303:5" pos:end="307:49"><expr pos:start="303:5" pos:end="307:48"><call pos:start="303:5" pos:end="307:48"><name pos:start="303:5" pos:end="303:19">INIT_VLC_STATIC</name><argument_list pos:start="303:20" pos:end="307:48">(<argument pos:start="303:21" pos:end="303:32"><expr pos:start="303:21" pos:end="303:32"><operator pos:start="303:21" pos:end="303:21">&amp;</operator><name pos:start="303:22" pos:end="303:32"><name pos:start="303:22" pos:end="303:29">coef_vlc</name><index pos:start="303:30" pos:end="303:32">[<expr pos:start="303:31" pos:end="303:31"><literal type="number" pos:start="303:31" pos:end="303:31">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="303:35" pos:end="303:41"><expr pos:start="303:35" pos:end="303:41"><name pos:start="303:35" pos:end="303:41">VLCBITS</name></expr></argument>, <argument pos:start="303:44" pos:end="303:58"><expr pos:start="303:44" pos:end="303:58"><name pos:start="303:44" pos:end="303:58">HUFF_COEF1_SIZE</name></expr></argument>,

                    <argument pos:start="305:21" pos:end="305:34"><expr pos:start="305:21" pos:end="305:34"><name pos:start="305:21" pos:end="305:34">coef1_huffbits</name></expr></argument>, <argument pos:start="305:37" pos:end="305:37"><expr pos:start="305:37" pos:end="305:37"><literal type="number" pos:start="305:37" pos:end="305:37">1</literal></expr></argument>, <argument pos:start="305:40" pos:end="305:40"><expr pos:start="305:40" pos:end="305:40"><literal type="number" pos:start="305:40" pos:end="305:40">1</literal></expr></argument>,

                    <argument pos:start="307:21" pos:end="307:35"><expr pos:start="307:21" pos:end="307:35"><name pos:start="307:21" pos:end="307:35">coef1_huffcodes</name></expr></argument>, <argument pos:start="307:38" pos:end="307:38"><expr pos:start="307:38" pos:end="307:38"><literal type="number" pos:start="307:38" pos:end="307:38">4</literal></expr></argument>, <argument pos:start="307:41" pos:end="307:41"><expr pos:start="307:41" pos:end="307:41"><literal type="number" pos:start="307:41" pos:end="307:41">4</literal></expr></argument>, <argument pos:start="307:44" pos:end="307:47"><expr pos:start="307:44" pos:end="307:47"><literal type="number" pos:start="307:44" pos:end="307:47">3912</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="311:5" pos:end="315:47"><expr pos:start="311:5" pos:end="315:46"><call pos:start="311:5" pos:end="315:46"><name pos:start="311:5" pos:end="311:19">INIT_VLC_STATIC</name><argument_list pos:start="311:20" pos:end="315:46">(<argument pos:start="311:21" pos:end="311:29"><expr pos:start="311:21" pos:end="311:29"><operator pos:start="311:21" pos:end="311:21">&amp;</operator><name pos:start="311:22" pos:end="311:29">vec4_vlc</name></expr></argument>, <argument pos:start="311:32" pos:end="311:38"><expr pos:start="311:32" pos:end="311:38"><name pos:start="311:32" pos:end="311:38">VLCBITS</name></expr></argument>, <argument pos:start="311:41" pos:end="311:54"><expr pos:start="311:41" pos:end="311:54"><name pos:start="311:41" pos:end="311:54">HUFF_VEC4_SIZE</name></expr></argument>,

                    <argument pos:start="313:21" pos:end="313:33"><expr pos:start="313:21" pos:end="313:33"><name pos:start="313:21" pos:end="313:33">vec4_huffbits</name></expr></argument>, <argument pos:start="313:36" pos:end="313:36"><expr pos:start="313:36" pos:end="313:36"><literal type="number" pos:start="313:36" pos:end="313:36">1</literal></expr></argument>, <argument pos:start="313:39" pos:end="313:39"><expr pos:start="313:39" pos:end="313:39"><literal type="number" pos:start="313:39" pos:end="313:39">1</literal></expr></argument>,

                    <argument pos:start="315:21" pos:end="315:34"><expr pos:start="315:21" pos:end="315:34"><name pos:start="315:21" pos:end="315:34">vec4_huffcodes</name></expr></argument>, <argument pos:start="315:37" pos:end="315:37"><expr pos:start="315:37" pos:end="315:37"><literal type="number" pos:start="315:37" pos:end="315:37">2</literal></expr></argument>, <argument pos:start="315:40" pos:end="315:40"><expr pos:start="315:40" pos:end="315:40"><literal type="number" pos:start="315:40" pos:end="315:40">2</literal></expr></argument>, <argument pos:start="315:43" pos:end="315:45"><expr pos:start="315:43" pos:end="315:45"><literal type="number" pos:start="315:43" pos:end="315:45">604</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="319:5" pos:end="323:47"><expr pos:start="319:5" pos:end="323:46"><call pos:start="319:5" pos:end="323:46"><name pos:start="319:5" pos:end="319:19">INIT_VLC_STATIC</name><argument_list pos:start="319:20" pos:end="323:46">(<argument pos:start="319:21" pos:end="319:29"><expr pos:start="319:21" pos:end="319:29"><operator pos:start="319:21" pos:end="319:21">&amp;</operator><name pos:start="319:22" pos:end="319:29">vec2_vlc</name></expr></argument>, <argument pos:start="319:32" pos:end="319:38"><expr pos:start="319:32" pos:end="319:38"><name pos:start="319:32" pos:end="319:38">VLCBITS</name></expr></argument>, <argument pos:start="319:41" pos:end="319:54"><expr pos:start="319:41" pos:end="319:54"><name pos:start="319:41" pos:end="319:54">HUFF_VEC2_SIZE</name></expr></argument>,

                    <argument pos:start="321:21" pos:end="321:33"><expr pos:start="321:21" pos:end="321:33"><name pos:start="321:21" pos:end="321:33">vec2_huffbits</name></expr></argument>, <argument pos:start="321:36" pos:end="321:36"><expr pos:start="321:36" pos:end="321:36"><literal type="number" pos:start="321:36" pos:end="321:36">1</literal></expr></argument>, <argument pos:start="321:39" pos:end="321:39"><expr pos:start="321:39" pos:end="321:39"><literal type="number" pos:start="321:39" pos:end="321:39">1</literal></expr></argument>,

                    <argument pos:start="323:21" pos:end="323:34"><expr pos:start="323:21" pos:end="323:34"><name pos:start="323:21" pos:end="323:34">vec2_huffcodes</name></expr></argument>, <argument pos:start="323:37" pos:end="323:37"><expr pos:start="323:37" pos:end="323:37"><literal type="number" pos:start="323:37" pos:end="323:37">2</literal></expr></argument>, <argument pos:start="323:40" pos:end="323:40"><expr pos:start="323:40" pos:end="323:40"><literal type="number" pos:start="323:40" pos:end="323:40">2</literal></expr></argument>, <argument pos:start="323:43" pos:end="323:45"><expr pos:start="323:43" pos:end="323:45"><literal type="number" pos:start="323:43" pos:end="323:45">562</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="327:5" pos:end="331:47"><expr pos:start="327:5" pos:end="331:46"><call pos:start="327:5" pos:end="331:46"><name pos:start="327:5" pos:end="327:19">INIT_VLC_STATIC</name><argument_list pos:start="327:20" pos:end="331:46">(<argument pos:start="327:21" pos:end="327:29"><expr pos:start="327:21" pos:end="327:29"><operator pos:start="327:21" pos:end="327:21">&amp;</operator><name pos:start="327:22" pos:end="327:29">vec1_vlc</name></expr></argument>, <argument pos:start="327:32" pos:end="327:38"><expr pos:start="327:32" pos:end="327:38"><name pos:start="327:32" pos:end="327:38">VLCBITS</name></expr></argument>, <argument pos:start="327:41" pos:end="327:54"><expr pos:start="327:41" pos:end="327:54"><name pos:start="327:41" pos:end="327:54">HUFF_VEC1_SIZE</name></expr></argument>,

                    <argument pos:start="329:21" pos:end="329:33"><expr pos:start="329:21" pos:end="329:33"><name pos:start="329:21" pos:end="329:33">vec1_huffbits</name></expr></argument>, <argument pos:start="329:36" pos:end="329:36"><expr pos:start="329:36" pos:end="329:36"><literal type="number" pos:start="329:36" pos:end="329:36">1</literal></expr></argument>, <argument pos:start="329:39" pos:end="329:39"><expr pos:start="329:39" pos:end="329:39"><literal type="number" pos:start="329:39" pos:end="329:39">1</literal></expr></argument>,

                    <argument pos:start="331:21" pos:end="331:34"><expr pos:start="331:21" pos:end="331:34"><name pos:start="331:21" pos:end="331:34">vec1_huffcodes</name></expr></argument>, <argument pos:start="331:37" pos:end="331:37"><expr pos:start="331:37" pos:end="331:37"><literal type="number" pos:start="331:37" pos:end="331:37">2</literal></expr></argument>, <argument pos:start="331:40" pos:end="331:40"><expr pos:start="331:40" pos:end="331:40"><literal type="number" pos:start="331:40" pos:end="331:40">2</literal></expr></argument>, <argument pos:start="331:43" pos:end="331:45"><expr pos:start="331:43" pos:end="331:45"><literal type="number" pos:start="331:43" pos:end="331:45">562</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" format="doxygen" pos:start="335:5" pos:end="337:40">/** calculate number of scale factor bands and their offsets

        for every possible block size */</comment>

    <for pos:start="339:5" pos:end="385:5">for <control pos:start="339:9" pos:end="339:50">(<init pos:start="339:10" pos:end="339:15"><expr pos:start="339:10" pos:end="339:14"><name pos:start="339:10" pos:end="339:10">i</name> <operator pos:start="339:12" pos:end="339:12">=</operator> <literal type="number" pos:start="339:14" pos:end="339:14">0</literal></expr>;</init> <condition pos:start="339:17" pos:end="339:45"><expr pos:start="339:17" pos:end="339:44"><name pos:start="339:17" pos:end="339:17">i</name> <operator pos:start="339:19" pos:end="339:19">&lt;</operator> <name pos:start="339:21" pos:end="339:44">num_possible_block_sizes</name></expr>;</condition> <incr pos:start="339:47" pos:end="339:49"><expr pos:start="339:47" pos:end="339:49"><name pos:start="339:47" pos:end="339:47">i</name><operator pos:start="339:48" pos:end="339:49">++</operator></expr></incr>)</control> <block pos:start="339:52" pos:end="385:5">{<block_content pos:start="341:9" pos:end="383:9">

        <decl_stmt pos:start="341:9" pos:end="341:53"><decl pos:start="341:9" pos:end="341:52"><type pos:start="341:9" pos:end="341:11"><name pos:start="341:9" pos:end="341:11">int</name></type> <name pos:start="341:13" pos:end="341:24">subframe_len</name> <init pos:start="341:26" pos:end="341:52">= <expr pos:start="341:28" pos:end="341:52"><name pos:start="341:28" pos:end="341:47"><name pos:start="341:28" pos:end="341:28">s</name><operator pos:start="341:29" pos:end="341:30">-&gt;</operator><name pos:start="341:31" pos:end="341:47">samples_per_frame</name></name> <operator pos:start="341:49" pos:end="341:50">&gt;&gt;</operator> <name pos:start="341:52" pos:end="341:52">i</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="343:9" pos:end="343:14"><decl pos:start="343:9" pos:end="343:13"><type pos:start="343:9" pos:end="343:11"><name pos:start="343:9" pos:end="343:11">int</name></type> <name pos:start="343:13" pos:end="343:13">x</name></decl>;</decl_stmt>

        <decl_stmt pos:start="345:9" pos:end="345:21"><decl pos:start="345:9" pos:end="345:20"><type pos:start="345:9" pos:end="345:11"><name pos:start="345:9" pos:end="345:11">int</name></type> <name pos:start="345:13" pos:end="345:16">band</name> <init pos:start="345:18" pos:end="345:20">= <expr pos:start="345:20" pos:end="345:20"><literal type="number" pos:start="345:20" pos:end="345:20">1</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="347:9" pos:end="347:35"><decl pos:start="347:9" pos:end="347:34"><type pos:start="347:9" pos:end="347:11"><name pos:start="347:9" pos:end="347:11">int</name></type> <name pos:start="347:13" pos:end="347:16">rate</name> <init pos:start="347:18" pos:end="347:34">= <expr pos:start="347:20" pos:end="347:34"><call pos:start="347:20" pos:end="347:34"><name pos:start="347:20" pos:end="347:27">get_rate</name><argument_list pos:start="347:28" pos:end="347:34">(<argument pos:start="347:29" pos:end="347:33"><expr pos:start="347:29" pos:end="347:33"><name pos:start="347:29" pos:end="347:33">avctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="351:9" pos:end="351:33"><expr pos:start="351:9" pos:end="351:32"><name pos:start="351:9" pos:end="351:28"><name pos:start="351:9" pos:end="351:9">s</name><operator pos:start="351:10" pos:end="351:11">-&gt;</operator><name pos:start="351:12" pos:end="351:22">sfb_offsets</name><index pos:start="351:23" pos:end="351:25">[<expr pos:start="351:24" pos:end="351:24"><name pos:start="351:24" pos:end="351:24">i</name></expr>]</index><index pos:start="351:26" pos:end="351:28">[<expr pos:start="351:27" pos:end="351:27"><literal type="number" pos:start="351:27" pos:end="351:27">0</literal></expr>]</index></name> <operator pos:start="351:30" pos:end="351:30">=</operator> <literal type="number" pos:start="351:32" pos:end="351:32">0</literal></expr>;</expr_stmt>



        <for pos:start="355:9" pos:end="371:9">for <control pos:start="355:13" pos:end="355:87">(<init pos:start="355:14" pos:end="355:19"><expr pos:start="355:14" pos:end="355:18"><name pos:start="355:14" pos:end="355:14">x</name> <operator pos:start="355:16" pos:end="355:16">=</operator> <literal type="number" pos:start="355:18" pos:end="355:18">0</literal></expr>;</init> <condition pos:start="355:21" pos:end="355:82"><expr pos:start="355:21" pos:end="355:81"><name pos:start="355:21" pos:end="355:21">x</name> <operator pos:start="355:23" pos:end="355:23">&lt;</operator> <name pos:start="355:25" pos:end="355:33">MAX_BANDS</name><operator pos:start="355:34" pos:end="355:34">-</operator><literal type="number" pos:start="355:35" pos:end="355:35">1</literal> <operator pos:start="355:37" pos:end="355:38">&amp;&amp;</operator> <name pos:start="355:40" pos:end="355:66"><name pos:start="355:40" pos:end="355:40">s</name><operator pos:start="355:41" pos:end="355:42">-&gt;</operator><name pos:start="355:43" pos:end="355:53">sfb_offsets</name><index pos:start="355:54" pos:end="355:56">[<expr pos:start="355:55" pos:end="355:55"><name pos:start="355:55" pos:end="355:55">i</name></expr>]</index><index pos:start="355:57" pos:end="355:66">[<expr pos:start="355:58" pos:end="355:65"><name pos:start="355:58" pos:end="355:61">band</name> <operator pos:start="355:63" pos:end="355:63">-</operator> <literal type="number" pos:start="355:65" pos:end="355:65">1</literal></expr>]</index></name> <operator pos:start="355:68" pos:end="355:68">&lt;</operator> <name pos:start="355:70" pos:end="355:81">subframe_len</name></expr>;</condition> <incr pos:start="355:84" pos:end="355:86"><expr pos:start="355:84" pos:end="355:86"><name pos:start="355:84" pos:end="355:84">x</name><operator pos:start="355:85" pos:end="355:86">++</operator></expr></incr>)</control> <block pos:start="355:89" pos:end="371:9">{<block_content pos:start="357:13" pos:end="369:22">

            <decl_stmt pos:start="357:13" pos:end="357:74"><decl pos:start="357:13" pos:end="357:73"><type pos:start="357:13" pos:end="357:15"><name pos:start="357:13" pos:end="357:15">int</name></type> <name pos:start="357:17" pos:end="357:22">offset</name> <init pos:start="357:24" pos:end="357:73">= <expr pos:start="357:26" pos:end="357:73"><operator pos:start="357:26" pos:end="357:26">(</operator><name pos:start="357:27" pos:end="357:38">subframe_len</name> <operator pos:start="357:40" pos:end="357:40">*</operator> <literal type="number" pos:start="357:42" pos:end="357:42">2</literal> <operator pos:start="357:44" pos:end="357:44">*</operator> <name pos:start="357:46" pos:end="357:61"><name pos:start="357:46" pos:end="357:58">critical_freq</name><index pos:start="357:59" pos:end="357:61">[<expr pos:start="357:60" pos:end="357:60"><name pos:start="357:60" pos:end="357:60">x</name></expr>]</index></name><operator pos:start="357:62" pos:end="357:62">)</operator> <operator pos:start="357:64" pos:end="357:64">/</operator> <name pos:start="357:66" pos:end="357:69">rate</name> <operator pos:start="357:71" pos:end="357:71">+</operator> <literal type="number" pos:start="357:73" pos:end="357:73">2</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="359:13" pos:end="359:25"><expr pos:start="359:13" pos:end="359:24"><name pos:start="359:13" pos:end="359:18">offset</name> <operator pos:start="359:20" pos:end="359:21">&amp;=</operator> <operator pos:start="359:23" pos:end="359:23">~</operator><literal type="number" pos:start="359:24" pos:end="359:24">3</literal></expr>;</expr_stmt>

            <if_stmt pos:start="361:13" pos:end="363:51"><if pos:start="361:13" pos:end="363:51">if <condition pos:start="361:16" pos:end="361:53">(<expr pos:start="361:17" pos:end="361:52"><name pos:start="361:17" pos:end="361:22">offset</name> <operator pos:start="361:24" pos:end="361:24">&gt;</operator> <name pos:start="361:26" pos:end="361:52"><name pos:start="361:26" pos:end="361:26">s</name><operator pos:start="361:27" pos:end="361:28">-&gt;</operator><name pos:start="361:29" pos:end="361:39">sfb_offsets</name><index pos:start="361:40" pos:end="361:42">[<expr pos:start="361:41" pos:end="361:41"><name pos:start="361:41" pos:end="361:41">i</name></expr>]</index><index pos:start="361:43" pos:end="361:52">[<expr pos:start="361:44" pos:end="361:51"><name pos:start="361:44" pos:end="361:47">band</name> <operator pos:start="361:49" pos:end="361:49">-</operator> <literal type="number" pos:start="361:51" pos:end="361:51">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="363:17" pos:end="363:51"><block_content pos:start="363:17" pos:end="363:51">

                <expr_stmt pos:start="363:17" pos:end="363:51"><expr pos:start="363:17" pos:end="363:50"><name pos:start="363:17" pos:end="363:41"><name pos:start="363:17" pos:end="363:17">s</name><operator pos:start="363:18" pos:end="363:19">-&gt;</operator><name pos:start="363:20" pos:end="363:30">sfb_offsets</name><index pos:start="363:31" pos:end="363:33">[<expr pos:start="363:32" pos:end="363:32"><name pos:start="363:32" pos:end="363:32">i</name></expr>]</index><index pos:start="363:34" pos:end="363:41">[<expr pos:start="363:35" pos:end="363:40"><name pos:start="363:35" pos:end="363:38">band</name><operator pos:start="363:39" pos:end="363:40">++</operator></expr>]</index></name> <operator pos:start="363:43" pos:end="363:43">=</operator> <name pos:start="363:45" pos:end="363:50">offset</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <if_stmt pos:start="367:13" pos:end="369:22"><if pos:start="367:13" pos:end="369:22">if <condition pos:start="367:16" pos:end="367:39">(<expr pos:start="367:17" pos:end="367:38"><name pos:start="367:17" pos:end="367:22">offset</name> <operator pos:start="367:24" pos:end="367:25">&gt;=</operator> <name pos:start="367:27" pos:end="367:38">subframe_len</name></expr>)</condition><block type="pseudo" pos:start="369:17" pos:end="369:22"><block_content pos:start="369:17" pos:end="369:22">

                <break pos:start="369:17" pos:end="369:22">break;</break></block_content></block></if></if_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="373:9" pos:end="373:51"><expr pos:start="373:9" pos:end="373:50"><name pos:start="373:9" pos:end="373:35"><name pos:start="373:9" pos:end="373:9">s</name><operator pos:start="373:10" pos:end="373:11">-&gt;</operator><name pos:start="373:12" pos:end="373:22">sfb_offsets</name><index pos:start="373:23" pos:end="373:25">[<expr pos:start="373:24" pos:end="373:24"><name pos:start="373:24" pos:end="373:24">i</name></expr>]</index><index pos:start="373:26" pos:end="373:35">[<expr pos:start="373:27" pos:end="373:34"><name pos:start="373:27" pos:end="373:30">band</name> <operator pos:start="373:32" pos:end="373:32">-</operator> <literal type="number" pos:start="373:34" pos:end="373:34">1</literal></expr>]</index></name> <operator pos:start="373:37" pos:end="373:37">=</operator> <name pos:start="373:39" pos:end="373:50">subframe_len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="375:9" pos:end="375:47"><expr pos:start="375:9" pos:end="375:46"><name pos:start="375:9" pos:end="375:21"><name pos:start="375:9" pos:end="375:9">s</name><operator pos:start="375:10" pos:end="375:11">-&gt;</operator><name pos:start="375:12" pos:end="375:18">num_sfb</name><index pos:start="375:19" pos:end="375:21">[<expr pos:start="375:20" pos:end="375:20"><name pos:start="375:20" pos:end="375:20">i</name></expr>]</index></name>               <operator pos:start="375:37" pos:end="375:37">=</operator> <name pos:start="375:39" pos:end="375:42">band</name> <operator pos:start="375:44" pos:end="375:44">-</operator> <literal type="number" pos:start="375:46" pos:end="375:46">1</literal></expr>;</expr_stmt>

        <if_stmt pos:start="377:9" pos:end="383:9"><if pos:start="377:9" pos:end="383:9">if <condition pos:start="377:12" pos:end="377:31">(<expr pos:start="377:13" pos:end="377:30"><name pos:start="377:13" pos:end="377:25"><name pos:start="377:13" pos:end="377:13">s</name><operator pos:start="377:14" pos:end="377:15">-&gt;</operator><name pos:start="377:16" pos:end="377:22">num_sfb</name><index pos:start="377:23" pos:end="377:25">[<expr pos:start="377:24" pos:end="377:24"><name pos:start="377:24" pos:end="377:24">i</name></expr>]</index></name> <operator pos:start="377:27" pos:end="377:28">&lt;=</operator> <literal type="number" pos:start="377:30" pos:end="377:30">0</literal></expr>)</condition> <block pos:start="377:33" pos:end="383:9">{<block_content pos:start="379:13" pos:end="381:39">

            <expr_stmt pos:start="379:13" pos:end="379:61"><expr pos:start="379:13" pos:end="379:60"><call pos:start="379:13" pos:end="379:60"><name pos:start="379:13" pos:end="379:18">av_log</name><argument_list pos:start="379:19" pos:end="379:60">(<argument pos:start="379:20" pos:end="379:24"><expr pos:start="379:20" pos:end="379:24"><name pos:start="379:20" pos:end="379:24">avctx</name></expr></argument>, <argument pos:start="379:27" pos:end="379:38"><expr pos:start="379:27" pos:end="379:38"><name pos:start="379:27" pos:end="379:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="379:41" pos:end="379:59"><expr pos:start="379:41" pos:end="379:59"><literal type="string" pos:start="379:41" pos:end="379:59">"num_sfb invalid\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="381:13" pos:end="381:39">return <expr pos:start="381:20" pos:end="381:38"><name pos:start="381:20" pos:end="381:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>





    <comment type="block" format="doxygen" pos:start="391:5" pos:end="397:7">/** Scale factors can be shared between blocks of different size

        as every block has a different scale factor band layout.

        The matrix sf_offsets is needed to find the correct scale factor.

     */</comment>



    <for pos:start="401:5" pos:end="431:5">for <control pos:start="401:9" pos:end="401:50">(<init pos:start="401:10" pos:end="401:15"><expr pos:start="401:10" pos:end="401:14"><name pos:start="401:10" pos:end="401:10">i</name> <operator pos:start="401:12" pos:end="401:12">=</operator> <literal type="number" pos:start="401:14" pos:end="401:14">0</literal></expr>;</init> <condition pos:start="401:17" pos:end="401:45"><expr pos:start="401:17" pos:end="401:44"><name pos:start="401:17" pos:end="401:17">i</name> <operator pos:start="401:19" pos:end="401:19">&lt;</operator> <name pos:start="401:21" pos:end="401:44">num_possible_block_sizes</name></expr>;</condition> <incr pos:start="401:47" pos:end="401:49"><expr pos:start="401:47" pos:end="401:49"><name pos:start="401:47" pos:end="401:47">i</name><operator pos:start="401:48" pos:end="401:49">++</operator></expr></incr>)</control> <block pos:start="401:52" pos:end="431:5">{<block_content pos:start="403:9" pos:end="429:9">

        <decl_stmt pos:start="403:9" pos:end="403:14"><decl pos:start="403:9" pos:end="403:13"><type pos:start="403:9" pos:end="403:11"><name pos:start="403:9" pos:end="403:11">int</name></type> <name pos:start="403:13" pos:end="403:13">b</name></decl>;</decl_stmt>

        <for pos:start="405:9" pos:end="429:9">for <control pos:start="405:13" pos:end="405:43">(<init pos:start="405:14" pos:end="405:19"><expr pos:start="405:14" pos:end="405:18"><name pos:start="405:14" pos:end="405:14">b</name> <operator pos:start="405:16" pos:end="405:16">=</operator> <literal type="number" pos:start="405:18" pos:end="405:18">0</literal></expr>;</init> <condition pos:start="405:21" pos:end="405:38"><expr pos:start="405:21" pos:end="405:37"><name pos:start="405:21" pos:end="405:21">b</name> <operator pos:start="405:23" pos:end="405:23">&lt;</operator> <name pos:start="405:25" pos:end="405:37"><name pos:start="405:25" pos:end="405:25">s</name><operator pos:start="405:26" pos:end="405:27">-&gt;</operator><name pos:start="405:28" pos:end="405:34">num_sfb</name><index pos:start="405:35" pos:end="405:37">[<expr pos:start="405:36" pos:end="405:36"><name pos:start="405:36" pos:end="405:36">i</name></expr>]</index></name></expr>;</condition> <incr pos:start="405:40" pos:end="405:42"><expr pos:start="405:40" pos:end="405:42"><name pos:start="405:40" pos:end="405:40">b</name><operator pos:start="405:41" pos:end="405:42">++</operator></expr></incr>)</control> <block pos:start="405:45" pos:end="429:9">{<block_content pos:start="407:13" pos:end="427:13">

            <decl_stmt pos:start="407:13" pos:end="407:18"><decl pos:start="407:13" pos:end="407:17"><type pos:start="407:13" pos:end="407:15"><name pos:start="407:13" pos:end="407:15">int</name></type> <name pos:start="407:17" pos:end="407:17">x</name></decl>;</decl_stmt>

            <decl_stmt pos:start="409:13" pos:end="411:70"><decl pos:start="409:13" pos:end="411:69"><type pos:start="409:13" pos:end="409:15"><name pos:start="409:13" pos:end="409:15">int</name></type> <name pos:start="409:17" pos:end="409:22">offset</name> <init pos:start="409:24" pos:end="411:69">= <expr pos:start="409:26" pos:end="411:69"><operator pos:start="409:26" pos:end="409:26">(</operator><operator pos:start="409:27" pos:end="409:27">(</operator><name pos:start="409:28" pos:end="409:47"><name pos:start="409:28" pos:end="409:28">s</name><operator pos:start="409:29" pos:end="409:30">-&gt;</operator><name pos:start="409:31" pos:end="409:41">sfb_offsets</name><index pos:start="409:42" pos:end="409:44">[<expr pos:start="409:43" pos:end="409:43"><name pos:start="409:43" pos:end="409:43">i</name></expr>]</index><index pos:start="409:45" pos:end="409:47">[<expr pos:start="409:46" pos:end="409:46"><name pos:start="409:46" pos:end="409:46">b</name></expr>]</index></name>

                           <operator pos:start="411:28" pos:end="411:28">+</operator> <name pos:start="411:30" pos:end="411:53"><name pos:start="411:30" pos:end="411:30">s</name><operator pos:start="411:31" pos:end="411:32">-&gt;</operator><name pos:start="411:33" pos:end="411:43">sfb_offsets</name><index pos:start="411:44" pos:end="411:46">[<expr pos:start="411:45" pos:end="411:45"><name pos:start="411:45" pos:end="411:45">i</name></expr>]</index><index pos:start="411:47" pos:end="411:53">[<expr pos:start="411:48" pos:end="411:52"><name pos:start="411:48" pos:end="411:48">b</name> <operator pos:start="411:50" pos:end="411:50">+</operator> <literal type="number" pos:start="411:52" pos:end="411:52">1</literal></expr>]</index></name> <operator pos:start="411:55" pos:end="411:55">-</operator> <literal type="number" pos:start="411:57" pos:end="411:57">1</literal><operator pos:start="411:58" pos:end="411:58">)</operator> <operator pos:start="411:60" pos:end="411:61">&lt;&lt;</operator> <name pos:start="411:63" pos:end="411:63">i</name><operator pos:start="411:64" pos:end="411:64">)</operator> <operator pos:start="411:66" pos:end="411:67">&gt;&gt;</operator> <literal type="number" pos:start="411:69" pos:end="411:69">1</literal></expr></init></decl>;</decl_stmt>

            <for pos:start="413:13" pos:end="427:13">for <control pos:start="413:17" pos:end="413:58">(<init pos:start="413:18" pos:end="413:23"><expr pos:start="413:18" pos:end="413:22"><name pos:start="413:18" pos:end="413:18">x</name> <operator pos:start="413:20" pos:end="413:20">=</operator> <literal type="number" pos:start="413:22" pos:end="413:22">0</literal></expr>;</init> <condition pos:start="413:25" pos:end="413:53"><expr pos:start="413:25" pos:end="413:52"><name pos:start="413:25" pos:end="413:25">x</name> <operator pos:start="413:27" pos:end="413:27">&lt;</operator> <name pos:start="413:29" pos:end="413:52">num_possible_block_sizes</name></expr>;</condition> <incr pos:start="413:55" pos:end="413:57"><expr pos:start="413:55" pos:end="413:57"><name pos:start="413:55" pos:end="413:55">x</name><operator pos:start="413:56" pos:end="413:57">++</operator></expr></incr>)</control> <block pos:start="413:60" pos:end="427:13">{<block_content pos:start="415:17" pos:end="425:43">

                <decl_stmt pos:start="415:17" pos:end="415:26"><decl pos:start="415:17" pos:end="415:25"><type pos:start="415:17" pos:end="415:19"><name pos:start="415:17" pos:end="415:19">int</name></type> <name pos:start="415:21" pos:end="415:21">v</name> <init pos:start="415:23" pos:end="415:25">= <expr pos:start="415:25" pos:end="415:25"><literal type="number" pos:start="415:25" pos:end="415:25">0</literal></expr></init></decl>;</decl_stmt>

                <while pos:start="417:17" pos:end="423:17">while <condition pos:start="417:23" pos:end="417:62">(<expr pos:start="417:24" pos:end="417:61"><name pos:start="417:24" pos:end="417:47"><name pos:start="417:24" pos:end="417:24">s</name><operator pos:start="417:25" pos:end="417:26">-&gt;</operator><name pos:start="417:27" pos:end="417:37">sfb_offsets</name><index pos:start="417:38" pos:end="417:40">[<expr pos:start="417:39" pos:end="417:39"><name pos:start="417:39" pos:end="417:39">x</name></expr>]</index><index pos:start="417:41" pos:end="417:47">[<expr pos:start="417:42" pos:end="417:46"><name pos:start="417:42" pos:end="417:42">v</name> <operator pos:start="417:44" pos:end="417:44">+</operator> <literal type="number" pos:start="417:46" pos:end="417:46">1</literal></expr>]</index></name> <operator pos:start="417:49" pos:end="417:50">&lt;&lt;</operator> <name pos:start="417:52" pos:end="417:52">x</name> <operator pos:start="417:54" pos:end="417:54">&lt;</operator> <name pos:start="417:56" pos:end="417:61">offset</name></expr>)</condition> <block pos:start="417:64" pos:end="423:17">{<block_content pos:start="419:21" pos:end="421:46">

                    <expr_stmt pos:start="419:21" pos:end="419:24"><expr pos:start="419:21" pos:end="419:23"><name pos:start="419:21" pos:end="419:21">v</name><operator pos:start="419:22" pos:end="419:23">++</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="421:21" pos:end="421:46"><expr pos:start="421:21" pos:end="421:45"><call pos:start="421:21" pos:end="421:45"><name pos:start="421:21" pos:end="421:30">av_assert0</name><argument_list pos:start="421:31" pos:end="421:45">(<argument pos:start="421:32" pos:end="421:44"><expr pos:start="421:32" pos:end="421:44"><name pos:start="421:32" pos:end="421:32">v</name> <operator pos:start="421:34" pos:end="421:34">&lt;</operator> <name pos:start="421:36" pos:end="421:44">MAX_BANDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></while>

                <expr_stmt pos:start="425:17" pos:end="425:43"><expr pos:start="425:17" pos:end="425:42"><name pos:start="425:17" pos:end="425:38"><name pos:start="425:17" pos:end="425:17">s</name><operator pos:start="425:18" pos:end="425:19">-&gt;</operator><name pos:start="425:20" pos:end="425:29">sf_offsets</name><index pos:start="425:30" pos:end="425:32">[<expr pos:start="425:31" pos:end="425:31"><name pos:start="425:31" pos:end="425:31">i</name></expr>]</index><index pos:start="425:33" pos:end="425:35">[<expr pos:start="425:34" pos:end="425:34"><name pos:start="425:34" pos:end="425:34">x</name></expr>]</index><index pos:start="425:36" pos:end="425:38">[<expr pos:start="425:37" pos:end="425:37"><name pos:start="425:37" pos:end="425:37">b</name></expr>]</index></name> <operator pos:start="425:40" pos:end="425:40">=</operator> <name pos:start="425:42" pos:end="425:42">v</name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>

    </block_content>}</block></for>



    <comment type="block" format="doxygen" pos:start="435:5" pos:end="435:51">/** init MDCT, FIXME: only init needed sizes */</comment>

    <for pos:start="437:5" pos:end="443:56">for <control pos:start="437:9" pos:end="437:44">(<init pos:start="437:10" pos:end="437:15"><expr pos:start="437:10" pos:end="437:14"><name pos:start="437:10" pos:end="437:10">i</name> <operator pos:start="437:12" pos:end="437:12">=</operator> <literal type="number" pos:start="437:14" pos:end="437:14">0</literal></expr>;</init> <condition pos:start="437:17" pos:end="437:39"><expr pos:start="437:17" pos:end="437:38"><name pos:start="437:17" pos:end="437:17">i</name> <operator pos:start="437:19" pos:end="437:19">&lt;</operator> <name pos:start="437:21" pos:end="437:38">WMAPRO_BLOCK_SIZES</name></expr>;</condition> <incr pos:start="437:41" pos:end="437:43"><expr pos:start="437:41" pos:end="437:43"><name pos:start="437:41" pos:end="437:41">i</name><operator pos:start="437:42" pos:end="437:43">++</operator></expr></incr>)</control><block type="pseudo" pos:start="439:9" pos:end="443:56"><block_content pos:start="439:9" pos:end="443:56">

        <expr_stmt pos:start="439:9" pos:end="443:56"><expr pos:start="439:9" pos:end="443:55"><call pos:start="439:9" pos:end="443:55"><name pos:start="439:9" pos:end="439:20">ff_mdct_init</name><argument_list pos:start="439:21" pos:end="443:55">(<argument pos:start="439:22" pos:end="439:36"><expr pos:start="439:22" pos:end="439:36"><operator pos:start="439:22" pos:end="439:22">&amp;</operator><name pos:start="439:23" pos:end="439:36"><name pos:start="439:23" pos:end="439:23">s</name><operator pos:start="439:24" pos:end="439:25">-&gt;</operator><name pos:start="439:26" pos:end="439:33">mdct_ctx</name><index pos:start="439:34" pos:end="439:36">[<expr pos:start="439:35" pos:end="439:35"><name pos:start="439:35" pos:end="439:35">i</name></expr>]</index></name></expr></argument>, <argument pos:start="439:39" pos:end="439:63"><expr pos:start="439:39" pos:end="439:63"><name pos:start="439:39" pos:end="439:59">WMAPRO_BLOCK_MIN_BITS</name><operator pos:start="439:60" pos:end="439:60">+</operator><literal type="number" pos:start="439:61" pos:end="439:62">1</literal><operator pos:start="439:62" pos:end="439:62">+</operator><name pos:start="439:63" pos:end="439:63">i</name></expr></argument>, <argument pos:start="439:66" pos:end="439:66"><expr pos:start="439:66" pos:end="439:66"><literal type="number" pos:start="439:66" pos:end="439:66">1</literal></expr></argument>,

                     <argument pos:start="441:22" pos:end="443:54"><expr pos:start="441:22" pos:end="443:54"><literal type="number" pos:start="441:22" pos:end="441:24">1.0</literal> <operator pos:start="441:26" pos:end="441:26">/</operator> <operator pos:start="441:28" pos:end="441:28">(</operator><literal type="number" pos:start="441:29" pos:end="441:29">1</literal> <operator pos:start="441:31" pos:end="441:32">&lt;&lt;</operator> <operator pos:start="441:34" pos:end="441:34">(</operator><name pos:start="441:35" pos:end="441:55">WMAPRO_BLOCK_MIN_BITS</name> <operator pos:start="441:57" pos:end="441:57">+</operator> <name pos:start="441:59" pos:end="441:59">i</name> <operator pos:start="441:61" pos:end="441:61">-</operator> <literal type="number" pos:start="441:63" pos:end="441:63">1</literal><operator pos:start="441:64" pos:end="441:64">)</operator><operator pos:start="441:65" pos:end="441:65">)</operator>

                     <operator pos:start="443:22" pos:end="443:22">/</operator> <operator pos:start="443:24" pos:end="443:24">(</operator><literal type="number" pos:start="443:25" pos:end="443:25">1</literal> <operator pos:start="443:27" pos:end="443:28">&lt;&lt;</operator> <operator pos:start="443:30" pos:end="443:30">(</operator><name pos:start="443:31" pos:end="443:48"><name pos:start="443:31" pos:end="443:31">s</name><operator pos:start="443:32" pos:end="443:33">-&gt;</operator><name pos:start="443:34" pos:end="443:48">bits_per_sample</name></name> <operator pos:start="443:50" pos:end="443:50">-</operator> <literal type="number" pos:start="443:52" pos:end="443:52">1</literal><operator pos:start="443:53" pos:end="443:53">)</operator><operator pos:start="443:54" pos:end="443:54">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <comment type="block" format="doxygen" pos:start="447:5" pos:end="447:48">/** init MDCT windows: simple sine window */</comment>

    <for pos:start="449:5" pos:end="457:5">for <control pos:start="449:9" pos:end="449:44">(<init pos:start="449:10" pos:end="449:15"><expr pos:start="449:10" pos:end="449:14"><name pos:start="449:10" pos:end="449:10">i</name> <operator pos:start="449:12" pos:end="449:12">=</operator> <literal type="number" pos:start="449:14" pos:end="449:14">0</literal></expr>;</init> <condition pos:start="449:17" pos:end="449:39"><expr pos:start="449:17" pos:end="449:38"><name pos:start="449:17" pos:end="449:17">i</name> <operator pos:start="449:19" pos:end="449:19">&lt;</operator> <name pos:start="449:21" pos:end="449:38">WMAPRO_BLOCK_SIZES</name></expr>;</condition> <incr pos:start="449:41" pos:end="449:43"><expr pos:start="449:41" pos:end="449:43"><name pos:start="449:41" pos:end="449:41">i</name><operator pos:start="449:42" pos:end="449:43">++</operator></expr></incr>)</control> <block pos:start="449:46" pos:end="457:5">{<block_content pos:start="451:9" pos:end="455:74">

        <decl_stmt pos:start="451:9" pos:end="451:54"><decl pos:start="451:9" pos:end="451:53"><type pos:start="451:9" pos:end="451:17"><specifier pos:start="451:9" pos:end="451:13">const</specifier> <name pos:start="451:15" pos:end="451:17">int</name></type> <name pos:start="451:19" pos:end="451:25">win_idx</name> <init pos:start="451:27" pos:end="451:53">= <expr pos:start="451:29" pos:end="451:53"><name pos:start="451:29" pos:end="451:49">WMAPRO_BLOCK_MAX_BITS</name> <operator pos:start="451:51" pos:end="451:51">-</operator> <name pos:start="451:53" pos:end="451:53">i</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="453:9" pos:end="453:41"><expr pos:start="453:9" pos:end="453:40"><call pos:start="453:9" pos:end="453:40"><name pos:start="453:9" pos:end="453:31">ff_init_ff_sine_windows</name><argument_list pos:start="453:32" pos:end="453:40">(<argument pos:start="453:33" pos:end="453:39"><expr pos:start="453:33" pos:end="453:39"><name pos:start="453:33" pos:end="453:39">win_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="455:9" pos:end="455:74"><expr pos:start="455:9" pos:end="455:73"><name pos:start="455:9" pos:end="455:46"><name pos:start="455:9" pos:end="455:9">s</name><operator pos:start="455:10" pos:end="455:11">-&gt;</operator><name pos:start="455:12" pos:end="455:18">windows</name><index pos:start="455:19" pos:end="455:46">[<expr pos:start="455:20" pos:end="455:45"><name pos:start="455:20" pos:end="455:37">WMAPRO_BLOCK_SIZES</name> <operator pos:start="455:39" pos:end="455:39">-</operator> <name pos:start="455:41" pos:end="455:41">i</name> <operator pos:start="455:43" pos:end="455:43">-</operator> <literal type="number" pos:start="455:45" pos:end="455:45">1</literal></expr>]</index></name> <operator pos:start="455:48" pos:end="455:48">=</operator> <name pos:start="455:50" pos:end="455:73"><name pos:start="455:50" pos:end="455:64">ff_sine_windows</name><index pos:start="455:65" pos:end="455:73">[<expr pos:start="455:66" pos:end="455:72"><name pos:start="455:66" pos:end="455:72">win_idx</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" format="doxygen" pos:start="461:5" pos:end="461:44">/** calculate subwoofer cutoff values */</comment>

    <for pos:start="463:5" pos:end="473:5">for <control pos:start="463:9" pos:end="463:50">(<init pos:start="463:10" pos:end="463:15"><expr pos:start="463:10" pos:end="463:14"><name pos:start="463:10" pos:end="463:10">i</name> <operator pos:start="463:12" pos:end="463:12">=</operator> <literal type="number" pos:start="463:14" pos:end="463:14">0</literal></expr>;</init> <condition pos:start="463:17" pos:end="463:45"><expr pos:start="463:17" pos:end="463:44"><name pos:start="463:17" pos:end="463:17">i</name> <operator pos:start="463:19" pos:end="463:19">&lt;</operator> <name pos:start="463:21" pos:end="463:44">num_possible_block_sizes</name></expr>;</condition> <incr pos:start="463:47" pos:end="463:49"><expr pos:start="463:47" pos:end="463:49"><name pos:start="463:47" pos:end="463:47">i</name><operator pos:start="463:48" pos:end="463:49">++</operator></expr></incr>)</control> <block pos:start="463:52" pos:end="473:5">{<block_content pos:start="465:9" pos:end="471:65">

        <decl_stmt pos:start="465:9" pos:end="465:51"><decl pos:start="465:9" pos:end="465:50"><type pos:start="465:9" pos:end="465:11"><name pos:start="465:9" pos:end="465:11">int</name></type> <name pos:start="465:13" pos:end="465:22">block_size</name> <init pos:start="465:24" pos:end="465:50">= <expr pos:start="465:26" pos:end="465:50"><name pos:start="465:26" pos:end="465:45"><name pos:start="465:26" pos:end="465:26">s</name><operator pos:start="465:27" pos:end="465:28">-&gt;</operator><name pos:start="465:29" pos:end="465:45">samples_per_frame</name></name> <operator pos:start="465:47" pos:end="465:48">&gt;&gt;</operator> <name pos:start="465:50" pos:end="465:50">i</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="467:9" pos:end="469:45"><decl pos:start="467:9" pos:end="469:44"><type pos:start="467:9" pos:end="467:11"><name pos:start="467:9" pos:end="467:11">int</name></type> <name pos:start="467:13" pos:end="467:18">cutoff</name> <init pos:start="467:20" pos:end="469:44">= <expr pos:start="467:22" pos:end="469:44"><operator pos:start="467:22" pos:end="467:22">(</operator><literal type="number" pos:start="467:23" pos:end="467:25">440</literal><operator pos:start="467:26" pos:end="467:26">*</operator><name pos:start="467:27" pos:end="467:36">block_size</name> <operator pos:start="467:38" pos:end="467:38">+</operator> <literal type="number" pos:start="467:40" pos:end="467:42">3LL</literal> <operator pos:start="467:44" pos:end="467:44">*</operator> <operator pos:start="467:46" pos:end="467:46">(</operator><name pos:start="467:47" pos:end="467:67"><name pos:start="467:47" pos:end="467:47">s</name><operator pos:start="467:48" pos:end="467:49">-&gt;</operator><name pos:start="467:50" pos:end="467:54">avctx</name><operator pos:start="467:55" pos:end="467:56">-&gt;</operator><name pos:start="467:57" pos:end="467:67">sample_rate</name></name> <operator pos:start="467:69" pos:end="467:70">&gt;&gt;</operator> <literal type="number" pos:start="467:72" pos:end="467:72">1</literal><operator pos:start="467:73" pos:end="467:73">)</operator> <operator pos:start="467:75" pos:end="467:75">-</operator> <literal type="number" pos:start="467:77" pos:end="467:77">1</literal><operator pos:start="467:78" pos:end="467:78">)</operator>

                     <operator pos:start="469:22" pos:end="469:22">/</operator> <name pos:start="469:24" pos:end="469:44"><name pos:start="469:24" pos:end="469:24">s</name><operator pos:start="469:25" pos:end="469:26">-&gt;</operator><name pos:start="469:27" pos:end="469:31">avctx</name><operator pos:start="469:32" pos:end="469:33">-&gt;</operator><name pos:start="469:34" pos:end="469:44">sample_rate</name></name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="471:9" pos:end="471:65"><expr pos:start="471:9" pos:end="471:64"><name pos:start="471:9" pos:end="471:31"><name pos:start="471:9" pos:end="471:9">s</name><operator pos:start="471:10" pos:end="471:11">-&gt;</operator><name pos:start="471:12" pos:end="471:28">subwoofer_cutoffs</name><index pos:start="471:29" pos:end="471:31">[<expr pos:start="471:30" pos:end="471:30"><name pos:start="471:30" pos:end="471:30">i</name></expr>]</index></name> <operator pos:start="471:33" pos:end="471:33">=</operator> <call pos:start="471:35" pos:end="471:64"><name pos:start="471:35" pos:end="471:41">av_clip</name><argument_list pos:start="471:42" pos:end="471:64">(<argument pos:start="471:43" pos:end="471:48"><expr pos:start="471:43" pos:end="471:48"><name pos:start="471:43" pos:end="471:48">cutoff</name></expr></argument>, <argument pos:start="471:51" pos:end="471:51"><expr pos:start="471:51" pos:end="471:51"><literal type="number" pos:start="471:51" pos:end="471:51">4</literal></expr></argument>, <argument pos:start="471:54" pos:end="471:63"><expr pos:start="471:54" pos:end="471:63"><name pos:start="471:54" pos:end="471:63">block_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" format="doxygen" pos:start="477:5" pos:end="477:61">/** calculate sine values for the decorrelation matrix */</comment>

    <for pos:start="479:5" pos:end="481:38">for <control pos:start="479:9" pos:end="479:28">(<init pos:start="479:10" pos:end="479:15"><expr pos:start="479:10" pos:end="479:14"><name pos:start="479:10" pos:end="479:10">i</name> <operator pos:start="479:12" pos:end="479:12">=</operator> <literal type="number" pos:start="479:14" pos:end="479:14">0</literal></expr>;</init> <condition pos:start="479:17" pos:end="479:23"><expr pos:start="479:17" pos:end="479:22"><name pos:start="479:17" pos:end="479:17">i</name> <operator pos:start="479:19" pos:end="479:19">&lt;</operator> <literal type="number" pos:start="479:21" pos:end="479:22">33</literal></expr>;</condition> <incr pos:start="479:25" pos:end="479:27"><expr pos:start="479:25" pos:end="479:27"><name pos:start="479:25" pos:end="479:25">i</name><operator pos:start="479:26" pos:end="479:27">++</operator></expr></incr>)</control><block type="pseudo" pos:start="481:9" pos:end="481:38"><block_content pos:start="481:9" pos:end="481:38">

        <expr_stmt pos:start="481:9" pos:end="481:38"><expr pos:start="481:9" pos:end="481:37"><name pos:start="481:9" pos:end="481:16"><name pos:start="481:9" pos:end="481:13">sin64</name><index pos:start="481:14" pos:end="481:16">[<expr pos:start="481:15" pos:end="481:15"><name pos:start="481:15" pos:end="481:15">i</name></expr>]</index></name> <operator pos:start="481:18" pos:end="481:18">=</operator> <call pos:start="481:20" pos:end="481:37"><name pos:start="481:20" pos:end="481:22">sin</name><argument_list pos:start="481:23" pos:end="481:37">(<argument pos:start="481:24" pos:end="481:36"><expr pos:start="481:24" pos:end="481:36"><name pos:start="481:24" pos:end="481:24">i</name><operator pos:start="481:25" pos:end="481:25">*</operator><name pos:start="481:26" pos:end="481:29">M_PI</name> <operator pos:start="481:31" pos:end="481:31">/</operator> <literal type="number" pos:start="481:33" pos:end="481:36">64.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <if_stmt pos:start="485:5" pos:end="487:24"><if pos:start="485:5" pos:end="487:24">if <condition pos:start="485:8" pos:end="485:42">(<expr pos:start="485:9" pos:end="485:41"><name pos:start="485:9" pos:end="485:20"><name pos:start="485:9" pos:end="485:13">avctx</name><operator pos:start="485:14" pos:end="485:15">-&gt;</operator><name pos:start="485:16" pos:end="485:20">debug</name></name> <operator pos:start="485:22" pos:end="485:22">&amp;</operator> <name pos:start="485:24" pos:end="485:41">FF_DEBUG_BITSTREAM</name></expr>)</condition><block type="pseudo" pos:start="487:9" pos:end="487:24"><block_content pos:start="487:9" pos:end="487:24">

        <expr_stmt pos:start="487:9" pos:end="487:24"><expr pos:start="487:9" pos:end="487:23"><call pos:start="487:9" pos:end="487:23"><name pos:start="487:9" pos:end="487:20">dump_context</name><argument_list pos:start="487:21" pos:end="487:23">(<argument pos:start="487:22" pos:end="487:22"><expr pos:start="487:22" pos:end="487:22"><name pos:start="487:22" pos:end="487:22">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="491:5" pos:end="491:41"><expr pos:start="491:5" pos:end="491:40"><name pos:start="491:5" pos:end="491:25"><name pos:start="491:5" pos:end="491:9">avctx</name><operator pos:start="491:10" pos:end="491:11">-&gt;</operator><name pos:start="491:12" pos:end="491:25">channel_layout</name></name> <operator pos:start="491:27" pos:end="491:27">=</operator> <name pos:start="491:29" pos:end="491:40">channel_mask</name></expr>;</expr_stmt>



    <return pos:start="495:5" pos:end="495:13">return <expr pos:start="495:12" pos:end="495:12"><literal type="number" pos:start="495:12" pos:end="495:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
