<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/1733.c" pos:tabs="8"><function pos:start="1:1" pos:end="94:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">latm_decode_frame</name><parameter_list pos:start="1:29" pos:end="3:45">(<parameter pos:start="1:30" pos:end="1:50"><decl pos:start="1:30" pos:end="1:50"><type pos:start="1:30" pos:end="1:50"><name pos:start="1:30" pos:end="1:43">AVCodecContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:50">avctx</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:61"><decl pos:start="1:53" pos:end="1:61"><type pos:start="1:53" pos:end="1:61"><name pos:start="1:53" pos:end="1:56">void</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:61">out</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:76"><decl pos:start="1:64" pos:end="1:76"><type pos:start="1:64" pos:end="1:76"><name pos:start="1:64" pos:end="1:66">int</name> <modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:76">out_size</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:44"><decl pos:start="3:30" pos:end="3:44"><type pos:start="3:30" pos:end="3:44"><name pos:start="3:30" pos:end="3:37">AVPacket</name> <modifier pos:start="3:39" pos:end="3:39">*</modifier></type><name pos:start="3:40" pos:end="3:44">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="94:1">{<block_content pos:start="7:5" pos:end="92:21">

    <decl_stmt pos:start="7:5" pos:end="7:51"><decl pos:start="7:5" pos:end="7:50"><type pos:start="7:5" pos:end="7:24"><name pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:22">LATMContext</name></name> <modifier pos:start="7:24" pos:end="7:24">*</modifier></type><name pos:start="7:25" pos:end="7:31">latmctx</name> <init pos:start="7:33" pos:end="7:50">= <expr pos:start="7:35" pos:end="7:50"><name pos:start="7:35" pos:end="7:50"><name pos:start="7:35" pos:end="7:39">avctx</name><operator pos:start="7:40" pos:end="7:41">-&gt;</operator><name pos:start="7:42" pos:end="7:50">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:39"><decl pos:start="9:5" pos:end="9:33"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type>                 <name pos:start="9:25" pos:end="9:33">muxlength</name></decl>, <decl pos:start="9:36" pos:end="9:38"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:36" pos:end="9:38">err</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:27"><decl pos:start="11:5" pos:end="11:26"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:17">GetBitContext</name></type>       <name pos:start="11:25" pos:end="11:26">gb</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="17:17"><if pos:start="15:5" pos:end="17:17">if <condition pos:start="15:8" pos:end="15:25">(<expr pos:start="15:9" pos:end="15:24"><name pos:start="15:9" pos:end="15:19"><name pos:start="15:9" pos:end="15:13">avpkt</name><operator pos:start="15:14" pos:end="15:15">-&gt;</operator><name pos:start="15:16" pos:end="15:19">size</name></name> <operator pos:start="15:21" pos:end="15:22">==</operator> <literal type="number" pos:start="15:24" pos:end="15:24">0</literal></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:17"><block_content pos:start="17:9" pos:end="17:17">

        <return pos:start="17:9" pos:end="17:17">return <expr pos:start="17:16" pos:end="17:16"><literal type="number" pos:start="17:16" pos:end="17:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:53"><expr pos:start="21:5" pos:end="21:52"><call pos:start="21:5" pos:end="21:52"><name pos:start="21:5" pos:end="21:17">init_get_bits</name><argument_list pos:start="21:18" pos:end="21:52">(<argument pos:start="21:19" pos:end="21:21"><expr pos:start="21:19" pos:end="21:21"><operator pos:start="21:19" pos:end="21:19">&amp;</operator><name pos:start="21:20" pos:end="21:21">gb</name></expr></argument>, <argument pos:start="21:24" pos:end="21:34"><expr pos:start="21:24" pos:end="21:34"><name pos:start="21:24" pos:end="21:34"><name pos:start="21:24" pos:end="21:28">avpkt</name><operator pos:start="21:29" pos:end="21:30">-&gt;</operator><name pos:start="21:31" pos:end="21:34">data</name></name></expr></argument>, <argument pos:start="21:37" pos:end="21:51"><expr pos:start="21:37" pos:end="21:51"><name pos:start="21:37" pos:end="21:47"><name pos:start="21:37" pos:end="21:41">avpkt</name><operator pos:start="21:42" pos:end="21:43">-&gt;</operator><name pos:start="21:44" pos:end="21:47">size</name></name> <operator pos:start="21:49" pos:end="21:49">*</operator> <literal type="number" pos:start="21:51" pos:end="21:51">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="line" pos:start="25:5" pos:end="25:31">// check for LOAS sync word</comment>

    <if_stmt pos:start="27:5" pos:end="29:35"><if pos:start="27:5" pos:end="29:35">if <condition pos:start="27:8" pos:end="27:44">(<expr pos:start="27:9" pos:end="27:43"><call pos:start="27:9" pos:end="27:25"><name pos:start="27:9" pos:end="27:16">get_bits</name><argument_list pos:start="27:17" pos:end="27:25">(<argument pos:start="27:18" pos:end="27:20"><expr pos:start="27:18" pos:end="27:20"><operator pos:start="27:18" pos:end="27:18">&amp;</operator><name pos:start="27:19" pos:end="27:20">gb</name></expr></argument>, <argument pos:start="27:23" pos:end="27:24"><expr pos:start="27:23" pos:end="27:24"><literal type="number" pos:start="27:23" pos:end="27:24">11</literal></expr></argument>)</argument_list></call> <operator pos:start="27:27" pos:end="27:28">!=</operator> <name pos:start="27:30" pos:end="27:43">LOAS_SYNC_WORD</name></expr>)</condition><block type="pseudo" pos:start="29:9" pos:end="29:35"><block_content pos:start="29:9" pos:end="29:35">

        <return pos:start="29:9" pos:end="29:35">return <expr pos:start="29:16" pos:end="29:34"><name pos:start="29:16" pos:end="29:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:38"><expr pos:start="33:5" pos:end="33:37"><name pos:start="33:5" pos:end="33:13">muxlength</name> <operator pos:start="33:15" pos:end="33:15">=</operator> <call pos:start="33:17" pos:end="33:33"><name pos:start="33:17" pos:end="33:24">get_bits</name><argument_list pos:start="33:25" pos:end="33:33">(<argument pos:start="33:26" pos:end="33:28"><expr pos:start="33:26" pos:end="33:28"><operator pos:start="33:26" pos:end="33:26">&amp;</operator><name pos:start="33:27" pos:end="33:28">gb</name></expr></argument>, <argument pos:start="33:31" pos:end="33:32"><expr pos:start="33:31" pos:end="33:32"><literal type="number" pos:start="33:31" pos:end="33:32">13</literal></expr></argument>)</argument_list></call> <operator pos:start="33:35" pos:end="33:35">+</operator> <literal type="number" pos:start="33:37" pos:end="33:37">3</literal></expr>;</expr_stmt>

    <comment type="line" pos:start="35:5" pos:end="35:58">// not enough data, the parser should have sorted this</comment>

    <if_stmt pos:start="37:5" pos:end="39:35"><if pos:start="37:5" pos:end="39:35">if <condition pos:start="37:8" pos:end="37:32">(<expr pos:start="37:9" pos:end="37:31"><name pos:start="37:9" pos:end="37:17">muxlength</name> <operator pos:start="37:19" pos:end="37:19">&gt;</operator> <name pos:start="37:21" pos:end="37:31"><name pos:start="37:21" pos:end="37:25">avpkt</name><operator pos:start="37:26" pos:end="37:27">-&gt;</operator><name pos:start="37:28" pos:end="37:31">size</name></name></expr>)</condition><block type="pseudo" pos:start="39:9" pos:end="39:35"><block_content pos:start="39:9" pos:end="39:35">

        <return pos:start="39:9" pos:end="39:35">return <expr pos:start="39:16" pos:end="39:34"><name pos:start="39:16" pos:end="39:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="43:5" pos:end="45:19"><if pos:start="43:5" pos:end="45:19">if <condition pos:start="43:8" pos:end="43:57">(<expr pos:start="43:9" pos:end="43:56"><operator pos:start="43:9" pos:end="43:9">(</operator><name pos:start="43:10" pos:end="43:12">err</name> <operator pos:start="43:14" pos:end="43:14">=</operator> <call pos:start="43:16" pos:end="43:51"><name pos:start="43:16" pos:end="43:37">read_audio_mux_element</name><argument_list pos:start="43:38" pos:end="43:51">(<argument pos:start="43:39" pos:end="43:45"><expr pos:start="43:39" pos:end="43:45"><name pos:start="43:39" pos:end="43:45">latmctx</name></expr></argument>, <argument pos:start="43:48" pos:end="43:50"><expr pos:start="43:48" pos:end="43:50"><operator pos:start="43:48" pos:end="43:48">&amp;</operator><name pos:start="43:49" pos:end="43:50">gb</name></expr></argument>)</argument_list></call><operator pos:start="43:52" pos:end="43:52">)</operator> <operator pos:start="43:54" pos:end="43:54">&lt;</operator> <literal type="number" pos:start="43:56" pos:end="43:56">0</literal></expr>)</condition><block type="pseudo" pos:start="45:9" pos:end="45:19"><block_content pos:start="45:9" pos:end="45:19">

        <return pos:start="45:9" pos:end="45:19">return <expr pos:start="45:16" pos:end="45:18"><name pos:start="45:16" pos:end="45:18">err</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="49:5" pos:end="68:5"><if pos:start="49:5" pos:end="68:5">if <condition pos:start="49:8" pos:end="49:30">(<expr pos:start="49:9" pos:end="49:29"><operator pos:start="49:9" pos:end="49:9">!</operator><name pos:start="49:10" pos:end="49:29"><name pos:start="49:10" pos:end="49:16">latmctx</name><operator pos:start="49:17" pos:end="49:18">-&gt;</operator><name pos:start="49:19" pos:end="49:29">initialized</name></name></expr>)</condition> <block pos:start="49:32" pos:end="68:5">{<block_content pos:start="51:9" pos:end="66:9">

        <if_stmt pos:start="51:9" pos:end="66:9"><if pos:start="51:9" pos:end="57:9">if <condition pos:start="51:12" pos:end="51:30">(<expr pos:start="51:13" pos:end="51:29"><operator pos:start="51:13" pos:end="51:13">!</operator><name pos:start="51:14" pos:end="51:29"><name pos:start="51:14" pos:end="51:18">avctx</name><operator pos:start="51:19" pos:end="51:20">-&gt;</operator><name pos:start="51:21" pos:end="51:29">extradata</name></name></expr>)</condition> <block pos:start="51:32" pos:end="57:9">{<block_content pos:start="53:13" pos:end="55:31">

            <expr_stmt pos:start="53:13" pos:end="53:26"><expr pos:start="53:13" pos:end="53:25"><operator pos:start="53:13" pos:end="53:13">*</operator><name pos:start="53:14" pos:end="53:21">out_size</name> <operator pos:start="53:23" pos:end="53:23">=</operator> <literal type="number" pos:start="53:25" pos:end="53:25">0</literal></expr>;</expr_stmt>

            <return pos:start="55:13" pos:end="55:31">return <expr pos:start="55:20" pos:end="55:30"><name pos:start="55:20" pos:end="55:30"><name pos:start="55:20" pos:end="55:24">avpkt</name><operator pos:start="55:25" pos:end="55:26">-&gt;</operator><name pos:start="55:27" pos:end="55:30">size</name></name></expr>;</return>

        </block_content>}</block></if> <else pos:start="57:11" pos:end="66:9">else <block pos:start="57:16" pos:end="66:9">{<block_content pos:start="60:13" pos:end="64:37">


            <if_stmt pos:start="60:13" pos:end="62:27"><if pos:start="60:13" pos:end="62:27">if <condition pos:start="60:16" pos:end="60:51">(<expr pos:start="60:17" pos:end="60:50"><operator pos:start="60:17" pos:end="60:17">(</operator><name pos:start="60:18" pos:end="60:20">err</name> <operator pos:start="60:22" pos:end="60:22">=</operator> <call pos:start="60:24" pos:end="60:45"><name pos:start="60:24" pos:end="60:38">aac_decode_init</name><argument_list pos:start="60:39" pos:end="60:45">(<argument pos:start="60:40" pos:end="60:44"><expr pos:start="60:40" pos:end="60:44"><name pos:start="60:40" pos:end="60:44">avctx</name></expr></argument>)</argument_list></call><operator pos:start="60:46" pos:end="60:46">)</operator> <operator pos:start="60:48" pos:end="60:48">&lt;</operator> <literal type="number" pos:start="60:50" pos:end="60:50">0</literal></expr>)</condition><block type="pseudo" pos:start="62:17" pos:end="62:27"><block_content pos:start="62:17" pos:end="62:27">

                <return pos:start="62:17" pos:end="62:27">return <expr pos:start="62:24" pos:end="62:26"><name pos:start="62:24" pos:end="62:26">err</name></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="64:13" pos:end="64:37"><expr pos:start="64:13" pos:end="64:36"><name pos:start="64:13" pos:end="64:32"><name pos:start="64:13" pos:end="64:19">latmctx</name><operator pos:start="64:20" pos:end="64:21">-&gt;</operator><name pos:start="64:22" pos:end="64:32">initialized</name></name> <operator pos:start="64:34" pos:end="64:34">=</operator> <literal type="number" pos:start="64:36" pos:end="64:36">1</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="72:5" pos:end="82:5"><if pos:start="72:5" pos:end="82:5">if <condition pos:start="72:8" pos:end="72:36">(<expr pos:start="72:9" pos:end="72:35"><call pos:start="72:9" pos:end="72:26"><name pos:start="72:9" pos:end="72:17">show_bits</name><argument_list pos:start="72:18" pos:end="72:26">(<argument pos:start="72:19" pos:end="72:21"><expr pos:start="72:19" pos:end="72:21"><operator pos:start="72:19" pos:end="72:19">&amp;</operator><name pos:start="72:20" pos:end="72:21">gb</name></expr></argument>, <argument pos:start="72:24" pos:end="72:25"><expr pos:start="72:24" pos:end="72:25"><literal type="number" pos:start="72:24" pos:end="72:25">12</literal></expr></argument>)</argument_list></call> <operator pos:start="72:28" pos:end="72:29">==</operator> <literal type="number" pos:start="72:31" pos:end="72:35">0xfff</literal></expr>)</condition> <block pos:start="72:38" pos:end="82:5">{<block_content pos:start="74:9" pos:end="80:35">

        <expr_stmt pos:start="74:9" pos:end="78:31"><expr pos:start="74:9" pos:end="78:30"><call pos:start="74:9" pos:end="78:30"><name pos:start="74:9" pos:end="74:14">av_log</name><argument_list pos:start="74:15" pos:end="78:30">(<argument pos:start="74:16" pos:end="74:37"><expr pos:start="74:16" pos:end="74:37"><name pos:start="74:16" pos:end="74:37"><name pos:start="74:16" pos:end="74:22">latmctx</name><operator pos:start="74:23" pos:end="74:24">-&gt;</operator><name pos:start="74:25" pos:end="74:31">aac_ctx</name><operator pos:start="74:32" pos:end="74:32">.</operator><name pos:start="74:33" pos:end="74:37">avctx</name></name></expr></argument>, <argument pos:start="74:40" pos:end="74:51"><expr pos:start="74:40" pos:end="74:51"><name pos:start="74:40" pos:end="74:51">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="76:16" pos:end="78:29"><expr pos:start="76:16" pos:end="78:29"><literal type="string" pos:start="76:16" pos:end="76:75">"ADTS header detected, probably as result of configuration "</literal>

               <literal type="string" pos:start="78:16" pos:end="78:29">"misparsing\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="80:9" pos:end="80:35">return <expr pos:start="80:16" pos:end="80:34"><name pos:start="80:16" pos:end="80:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="86:5" pos:end="88:19"><if pos:start="86:5" pos:end="88:19">if <condition pos:start="86:8" pos:end="86:68">(<expr pos:start="86:9" pos:end="86:67"><operator pos:start="86:9" pos:end="86:9">(</operator><name pos:start="86:10" pos:end="86:12">err</name> <operator pos:start="86:14" pos:end="86:14">=</operator> <call pos:start="86:16" pos:end="86:62"><name pos:start="86:16" pos:end="86:35">aac_decode_frame_int</name><argument_list pos:start="86:36" pos:end="86:62">(<argument pos:start="86:37" pos:end="86:41"><expr pos:start="86:37" pos:end="86:41"><name pos:start="86:37" pos:end="86:41">avctx</name></expr></argument>, <argument pos:start="86:44" pos:end="86:46"><expr pos:start="86:44" pos:end="86:46"><name pos:start="86:44" pos:end="86:46">out</name></expr></argument>, <argument pos:start="86:49" pos:end="86:56"><expr pos:start="86:49" pos:end="86:56"><name pos:start="86:49" pos:end="86:56">out_size</name></expr></argument>, <argument pos:start="86:59" pos:end="86:61"><expr pos:start="86:59" pos:end="86:61"><operator pos:start="86:59" pos:end="86:59">&amp;</operator><name pos:start="86:60" pos:end="86:61">gb</name></expr></argument>)</argument_list></call><operator pos:start="86:63" pos:end="86:63">)</operator> <operator pos:start="86:65" pos:end="86:65">&lt;</operator> <literal type="number" pos:start="86:67" pos:end="86:67">0</literal></expr>)</condition><block type="pseudo" pos:start="88:9" pos:end="88:19"><block_content pos:start="88:9" pos:end="88:19">

        <return pos:start="88:9" pos:end="88:19">return <expr pos:start="88:16" pos:end="88:18"><name pos:start="88:16" pos:end="88:18">err</name></expr>;</return></block_content></block></if></if_stmt>



    <return pos:start="92:5" pos:end="92:21">return <expr pos:start="92:12" pos:end="92:20"><name pos:start="92:12" pos:end="92:20">muxlength</name></expr>;</return>

</block_content>}</block></function></unit>
