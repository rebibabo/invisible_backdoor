<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24131.c" pos:tabs="8"><function pos:start="1:1" pos:end="105:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:32">virtio_scsi_parse_req</name><parameter_list pos:start="1:33" pos:end="3:71">(<parameter pos:start="1:34" pos:end="1:51"><decl pos:start="1:34" pos:end="1:51"><type pos:start="1:34" pos:end="1:51"><name pos:start="1:34" pos:end="1:46">VirtIOSCSIReq</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:51">req</name></decl></parameter>,

                                 <parameter pos:start="3:34" pos:end="3:50"><decl pos:start="3:34" pos:end="3:50"><type pos:start="3:34" pos:end="3:50"><name pos:start="3:34" pos:end="3:41">unsigned</name></type> <name pos:start="3:43" pos:end="3:50">req_size</name></decl></parameter>, <parameter pos:start="3:53" pos:end="3:70"><decl pos:start="3:53" pos:end="3:70"><type pos:start="3:53" pos:end="3:70"><name pos:start="3:53" pos:end="3:60">unsigned</name></type> <name pos:start="3:62" pos:end="3:70">resp_size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="105:1">{<block_content pos:start="7:5" pos:end="103:13">

    <decl_stmt pos:start="7:5" pos:end="7:51"><decl pos:start="7:5" pos:end="7:50"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">VirtIODevice</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:22">vdev</name> <init pos:start="7:24" pos:end="7:50">= <expr pos:start="7:26" pos:end="7:50"><operator pos:start="7:26" pos:end="7:26">(</operator><name pos:start="7:27" pos:end="7:38">VirtIODevice</name> <operator pos:start="7:40" pos:end="7:40">*</operator><operator pos:start="7:41" pos:end="7:41">)</operator> <name pos:start="7:43" pos:end="7:50"><name pos:start="7:43" pos:end="7:45">req</name><operator pos:start="7:46" pos:end="7:47">-&gt;</operator><name pos:start="7:48" pos:end="7:50">dev</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:10">size_t</name></type> <name pos:start="9:12" pos:end="9:18">in_size</name></decl>, <decl pos:start="9:21" pos:end="9:28"><type ref="prev" pos:start="9:5" pos:end="9:10"/><name pos:start="9:21" pos:end="9:28">out_size</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="19:5"><if pos:start="13:5" pos:end="19:5">if <condition pos:start="13:8" pos:end="15:51">(<expr pos:start="13:9" pos:end="15:50"><call pos:start="13:9" pos:end="15:39"><name pos:start="13:9" pos:end="13:18">iov_to_buf</name><argument_list pos:start="13:19" pos:end="15:39">(<argument pos:start="13:20" pos:end="13:35"><expr pos:start="13:20" pos:end="13:35"><name pos:start="13:20" pos:end="13:35"><name pos:start="13:20" pos:end="13:22">req</name><operator pos:start="13:23" pos:end="13:24">-&gt;</operator><name pos:start="13:25" pos:end="13:28">elem</name><operator pos:start="13:29" pos:end="13:29">.</operator><name pos:start="13:30" pos:end="13:35">out_sg</name></name></expr></argument>, <argument pos:start="13:38" pos:end="13:54"><expr pos:start="13:38" pos:end="13:54"><name pos:start="13:38" pos:end="13:54"><name pos:start="13:38" pos:end="13:40">req</name><operator pos:start="13:41" pos:end="13:42">-&gt;</operator><name pos:start="13:43" pos:end="13:46">elem</name><operator pos:start="13:47" pos:end="13:47">.</operator><name pos:start="13:48" pos:end="13:54">out_num</name></name></expr></argument>, <argument pos:start="13:57" pos:end="13:57"><expr pos:start="13:57" pos:end="13:57"><literal type="number" pos:start="13:57" pos:end="13:57">0</literal></expr></argument>,

                   <argument pos:start="15:20" pos:end="15:28"><expr pos:start="15:20" pos:end="15:28"><operator pos:start="15:20" pos:end="15:20">&amp;</operator><name pos:start="15:21" pos:end="15:28"><name pos:start="15:21" pos:end="15:23">req</name><operator pos:start="15:24" pos:end="15:25">-&gt;</operator><name pos:start="15:26" pos:end="15:28">req</name></name></expr></argument>, <argument pos:start="15:31" pos:end="15:38"><expr pos:start="15:31" pos:end="15:38"><name pos:start="15:31" pos:end="15:38">req_size</name></expr></argument>)</argument_list></call> <operator pos:start="15:41" pos:end="15:41">&lt;</operator> <name pos:start="15:43" pos:end="15:50">req_size</name></expr>)</condition> <block pos:start="15:53" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:23">

        <return pos:start="17:9" pos:end="17:23">return <expr pos:start="17:16" pos:end="17:22"><operator pos:start="17:16" pos:end="17:16">-</operator><name pos:start="17:17" pos:end="17:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="23:5" pos:end="31:5"><if pos:start="23:5" pos:end="31:5">if <condition pos:start="23:8" pos:end="27:53">(<expr pos:start="23:9" pos:end="27:52"><call pos:start="23:9" pos:end="27:40"><name pos:start="23:9" pos:end="23:29">qemu_iovec_concat_iov</name><argument_list pos:start="23:30" pos:end="27:40">(<argument pos:start="23:31" pos:end="23:44"><expr pos:start="23:31" pos:end="23:44"><operator pos:start="23:31" pos:end="23:31">&amp;</operator><name pos:start="23:32" pos:end="23:44"><name pos:start="23:32" pos:end="23:34">req</name><operator pos:start="23:35" pos:end="23:36">-&gt;</operator><name pos:start="23:37" pos:end="23:44">resp_iov</name></name></expr></argument>,

                              <argument pos:start="25:31" pos:end="25:45"><expr pos:start="25:31" pos:end="25:45"><name pos:start="25:31" pos:end="25:45"><name pos:start="25:31" pos:end="25:33">req</name><operator pos:start="25:34" pos:end="25:35">-&gt;</operator><name pos:start="25:36" pos:end="25:39">elem</name><operator pos:start="25:40" pos:end="25:40">.</operator><name pos:start="25:41" pos:end="25:45">in_sg</name></name></expr></argument>, <argument pos:start="25:48" pos:end="25:63"><expr pos:start="25:48" pos:end="25:63"><name pos:start="25:48" pos:end="25:63"><name pos:start="25:48" pos:end="25:50">req</name><operator pos:start="25:51" pos:end="25:52">-&gt;</operator><name pos:start="25:53" pos:end="25:56">elem</name><operator pos:start="25:57" pos:end="25:57">.</operator><name pos:start="25:58" pos:end="25:63">in_num</name></name></expr></argument>, <argument pos:start="25:66" pos:end="25:66"><expr pos:start="25:66" pos:end="25:66"><literal type="number" pos:start="25:66" pos:end="25:66">0</literal></expr></argument>,

                              <argument pos:start="27:31" pos:end="27:39"><expr pos:start="27:31" pos:end="27:39"><name pos:start="27:31" pos:end="27:39">resp_size</name></expr></argument>)</argument_list></call> <operator pos:start="27:42" pos:end="27:42">&lt;</operator> <name pos:start="27:44" pos:end="27:52">resp_size</name></expr>)</condition> <block pos:start="27:55" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:23">

        <return pos:start="29:9" pos:end="29:23">return <expr pos:start="29:16" pos:end="29:22"><operator pos:start="29:16" pos:end="29:16">-</operator><name pos:start="29:17" pos:end="29:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:31"><expr pos:start="35:5" pos:end="35:30"><name pos:start="35:5" pos:end="35:18"><name pos:start="35:5" pos:end="35:7">req</name><operator pos:start="35:8" pos:end="35:9">-&gt;</operator><name pos:start="35:10" pos:end="35:18">resp_size</name></name> <operator pos:start="35:20" pos:end="35:20">=</operator> <name pos:start="35:22" pos:end="35:30">resp_size</name></expr>;</expr_stmt>



    <comment type="block" pos:start="39:5" pos:end="57:7">/* Old BIOSes left some padding by mistake after the req_size/resp_size.

     * As a workaround, always consider the first buffer as the virtio-scsi

     * request/response, making the payload start at the second element

     * of the iovec.

     *

     * The actual length of the response header, stored in req-&gt;resp_size,

     * does not change.

     *

     * TODO: always disable this workaround for virtio 1.0 devices.

     */</comment>

    <if_stmt pos:start="59:5" pos:end="65:5"><if pos:start="59:5" pos:end="65:5">if <condition pos:start="59:8" pos:end="59:55">(<expr pos:start="59:9" pos:end="59:54"><operator pos:start="59:9" pos:end="59:9">!</operator><call pos:start="59:10" pos:end="59:54"><name pos:start="59:10" pos:end="59:27">virtio_has_feature</name><argument_list pos:start="59:28" pos:end="59:54">(<argument pos:start="59:29" pos:end="59:32"><expr pos:start="59:29" pos:end="59:32"><name pos:start="59:29" pos:end="59:32">vdev</name></expr></argument>, <argument pos:start="59:35" pos:end="59:53"><expr pos:start="59:35" pos:end="59:53"><name pos:start="59:35" pos:end="59:53">VIRTIO_F_ANY_LAYOUT</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="59:57" pos:end="65:5">{<block_content pos:start="61:9" pos:end="63:47">

        <expr_stmt pos:start="61:9" pos:end="61:47"><expr pos:start="61:9" pos:end="61:46"><name pos:start="61:9" pos:end="61:16">req_size</name> <operator pos:start="61:18" pos:end="61:18">=</operator> <name pos:start="61:20" pos:end="61:38"><name pos:start="61:20" pos:end="61:22">req</name><operator pos:start="61:23" pos:end="61:24">-&gt;</operator><name pos:start="61:25" pos:end="61:28">elem</name><operator pos:start="61:29" pos:end="61:29">.</operator><name pos:start="61:30" pos:end="61:35">out_sg</name><index pos:start="61:36" pos:end="61:38">[<expr pos:start="61:37" pos:end="61:37"><literal type="number" pos:start="61:37" pos:end="61:37">0</literal></expr>]</index></name><operator pos:start="61:39" pos:end="61:39">.</operator><name pos:start="61:40" pos:end="61:46">iov_len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:47"><expr pos:start="63:9" pos:end="63:46"><name pos:start="63:9" pos:end="63:17">resp_size</name> <operator pos:start="63:19" pos:end="63:19">=</operator> <name pos:start="63:21" pos:end="63:38"><name pos:start="63:21" pos:end="63:23">req</name><operator pos:start="63:24" pos:end="63:25">-&gt;</operator><name pos:start="63:26" pos:end="63:29">elem</name><operator pos:start="63:30" pos:end="63:30">.</operator><name pos:start="63:31" pos:end="63:35">in_sg</name><index pos:start="63:36" pos:end="63:38">[<expr pos:start="63:37" pos:end="63:37"><literal type="number" pos:start="63:37" pos:end="63:37">0</literal></expr>]</index></name><operator pos:start="63:39" pos:end="63:39">.</operator><name pos:start="63:40" pos:end="63:46">iov_len</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="69:5" pos:end="73:41"><expr pos:start="69:5" pos:end="73:40"><name pos:start="69:5" pos:end="69:12">out_size</name> <operator pos:start="69:14" pos:end="69:14">=</operator> <call pos:start="69:16" pos:end="73:40"><name pos:start="69:16" pos:end="69:30">qemu_sgl_concat</name><argument_list pos:start="69:31" pos:end="73:40">(<argument pos:start="69:32" pos:end="69:34"><expr pos:start="69:32" pos:end="69:34"><name pos:start="69:32" pos:end="69:34">req</name></expr></argument>, <argument pos:start="69:37" pos:end="69:52"><expr pos:start="69:37" pos:end="69:52"><name pos:start="69:37" pos:end="69:52"><name pos:start="69:37" pos:end="69:39">req</name><operator pos:start="69:40" pos:end="69:41">-&gt;</operator><name pos:start="69:42" pos:end="69:45">elem</name><operator pos:start="69:46" pos:end="69:46">.</operator><name pos:start="69:47" pos:end="69:52">out_sg</name></name></expr></argument>,

                               <argument pos:start="71:32" pos:end="71:53"><expr pos:start="71:32" pos:end="71:53"><operator pos:start="71:32" pos:end="71:32">&amp;</operator><name pos:start="71:33" pos:end="71:53"><name pos:start="71:33" pos:end="71:35">req</name><operator pos:start="71:36" pos:end="71:37">-&gt;</operator><name pos:start="71:38" pos:end="71:41">elem</name><operator pos:start="71:42" pos:end="71:42">.</operator><name pos:start="71:43" pos:end="71:50">out_addr</name><index pos:start="71:51" pos:end="71:53">[<expr pos:start="71:52" pos:end="71:52"><literal type="number" pos:start="71:52" pos:end="71:52">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="71:56" pos:end="71:72"><expr pos:start="71:56" pos:end="71:72"><name pos:start="71:56" pos:end="71:72"><name pos:start="71:56" pos:end="71:58">req</name><operator pos:start="71:59" pos:end="71:60">-&gt;</operator><name pos:start="71:61" pos:end="71:64">elem</name><operator pos:start="71:65" pos:end="71:65">.</operator><name pos:start="71:66" pos:end="71:72">out_num</name></name></expr></argument>,

                               <argument pos:start="73:32" pos:end="73:39"><expr pos:start="73:32" pos:end="73:39"><name pos:start="73:32" pos:end="73:39">req_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="79:41"><expr pos:start="75:5" pos:end="79:40"><name pos:start="75:5" pos:end="75:11">in_size</name> <operator pos:start="75:13" pos:end="75:13">=</operator> <call pos:start="75:15" pos:end="79:40"><name pos:start="75:15" pos:end="75:29">qemu_sgl_concat</name><argument_list pos:start="75:30" pos:end="79:40">(<argument pos:start="75:31" pos:end="75:33"><expr pos:start="75:31" pos:end="75:33"><name pos:start="75:31" pos:end="75:33">req</name></expr></argument>, <argument pos:start="75:36" pos:end="75:50"><expr pos:start="75:36" pos:end="75:50"><name pos:start="75:36" pos:end="75:50"><name pos:start="75:36" pos:end="75:38">req</name><operator pos:start="75:39" pos:end="75:40">-&gt;</operator><name pos:start="75:41" pos:end="75:44">elem</name><operator pos:start="75:45" pos:end="75:45">.</operator><name pos:start="75:46" pos:end="75:50">in_sg</name></name></expr></argument>,

                              <argument pos:start="77:31" pos:end="77:51"><expr pos:start="77:31" pos:end="77:51"><operator pos:start="77:31" pos:end="77:31">&amp;</operator><name pos:start="77:32" pos:end="77:51"><name pos:start="77:32" pos:end="77:34">req</name><operator pos:start="77:35" pos:end="77:36">-&gt;</operator><name pos:start="77:37" pos:end="77:40">elem</name><operator pos:start="77:41" pos:end="77:41">.</operator><name pos:start="77:42" pos:end="77:48">in_addr</name><index pos:start="77:49" pos:end="77:51">[<expr pos:start="77:50" pos:end="77:50"><literal type="number" pos:start="77:50" pos:end="77:50">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="77:54" pos:end="77:69"><expr pos:start="77:54" pos:end="77:69"><name pos:start="77:54" pos:end="77:69"><name pos:start="77:54" pos:end="77:56">req</name><operator pos:start="77:57" pos:end="77:58">-&gt;</operator><name pos:start="77:59" pos:end="77:62">elem</name><operator pos:start="77:63" pos:end="77:63">.</operator><name pos:start="77:64" pos:end="77:69">in_num</name></name></expr></argument>,

                              <argument pos:start="79:31" pos:end="79:39"><expr pos:start="79:31" pos:end="79:39"><name pos:start="79:31" pos:end="79:39">resp_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="83:5" pos:end="87:5"><if pos:start="83:5" pos:end="87:5">if <condition pos:start="83:8" pos:end="83:28">(<expr pos:start="83:9" pos:end="83:27"><name pos:start="83:9" pos:end="83:16">out_size</name> <operator pos:start="83:18" pos:end="83:19">&amp;&amp;</operator> <name pos:start="83:21" pos:end="83:27">in_size</name></expr>)</condition> <block pos:start="83:30" pos:end="87:5">{<block_content pos:start="85:9" pos:end="85:24">

        <return pos:start="85:9" pos:end="85:24">return <expr pos:start="85:16" pos:end="85:23"><operator pos:start="85:16" pos:end="85:16">-</operator><name pos:start="85:17" pos:end="85:23">ENOTSUP</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="91:5" pos:end="99:5"><if pos:start="91:5" pos:end="95:5">if <condition pos:start="91:8" pos:end="91:17">(<expr pos:start="91:9" pos:end="91:16"><name pos:start="91:9" pos:end="91:16">out_size</name></expr>)</condition> <block pos:start="91:19" pos:end="95:5">{<block_content pos:start="93:9" pos:end="93:37">

        <expr_stmt pos:start="93:9" pos:end="93:37"><expr pos:start="93:9" pos:end="93:36"><name pos:start="93:9" pos:end="93:17"><name pos:start="93:9" pos:end="93:11">req</name><operator pos:start="93:12" pos:end="93:13">-&gt;</operator><name pos:start="93:14" pos:end="93:17">mode</name></name> <operator pos:start="93:19" pos:end="93:19">=</operator> <name pos:start="93:21" pos:end="93:36">SCSI_XFER_TO_DEV</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="95:7" pos:end="99:5">else if <condition pos:start="95:15" pos:end="95:23">(<expr pos:start="95:16" pos:end="95:22"><name pos:start="95:16" pos:end="95:22">in_size</name></expr>)</condition> <block pos:start="95:25" pos:end="99:5">{<block_content pos:start="97:9" pos:end="97:39">

        <expr_stmt pos:start="97:9" pos:end="97:39"><expr pos:start="97:9" pos:end="97:38"><name pos:start="97:9" pos:end="97:17"><name pos:start="97:9" pos:end="97:11">req</name><operator pos:start="97:12" pos:end="97:13">-&gt;</operator><name pos:start="97:14" pos:end="97:17">mode</name></name> <operator pos:start="97:19" pos:end="97:19">=</operator> <name pos:start="97:21" pos:end="97:38">SCSI_XFER_FROM_DEV</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="103:5" pos:end="103:13">return <expr pos:start="103:12" pos:end="103:12"><literal type="number" pos:start="103:12" pos:end="103:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
