<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9882.c" pos:tabs="8"><function pos:start="1:1" pos:end="71:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">nbd_co_send_request</name><parameter_list pos:start="1:31" pos:end="5:62">(<parameter pos:start="1:32" pos:end="1:51"><decl pos:start="1:32" pos:end="1:51"><type pos:start="1:32" pos:end="1:51"><name pos:start="1:32" pos:end="1:47">BlockDriverState</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:51">bs</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:58"><decl pos:start="3:32" pos:end="3:58"><type pos:start="3:32" pos:end="3:58"><name pos:start="3:32" pos:end="3:49"><name pos:start="3:32" pos:end="3:37">struct</name> <name pos:start="3:39" pos:end="3:49">nbd_request</name></name> <modifier pos:start="3:51" pos:end="3:51">*</modifier></type><name pos:start="3:52" pos:end="3:58">request</name></decl></parameter>,

                               <parameter pos:start="5:32" pos:end="5:49"><decl pos:start="5:32" pos:end="5:49"><type pos:start="5:32" pos:end="5:49"><name pos:start="5:32" pos:end="5:43">QEMUIOVector</name> <modifier pos:start="5:45" pos:end="5:45">*</modifier></type><name pos:start="5:46" pos:end="5:49">qiov</name></decl></parameter>, <parameter pos:start="5:52" pos:end="5:61"><decl pos:start="5:52" pos:end="5:61"><type pos:start="5:52" pos:end="5:61"><name pos:start="5:52" pos:end="5:54">int</name></type> <name pos:start="5:56" pos:end="5:61">offset</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="71:1">{<block_content pos:start="9:5" pos:end="69:14">

    <decl_stmt pos:start="9:5" pos:end="9:53"><decl pos:start="9:5" pos:end="9:52"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">NbdClientSession</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:23">s</name> <init pos:start="9:25" pos:end="9:52">= <expr pos:start="9:27" pos:end="9:52"><call pos:start="9:27" pos:end="9:52"><name pos:start="9:27" pos:end="9:48">nbd_get_client_session</name><argument_list pos:start="9:49" pos:end="9:52">(<argument pos:start="9:50" pos:end="9:51"><expr pos:start="9:50" pos:end="9:51"><name pos:start="9:50" pos:end="9:51">bs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:14">AioContext</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:27">aio_context</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:16"><decl pos:start="13:5" pos:end="13:10"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:10">rc</name></decl>, <decl pos:start="13:13" pos:end="13:15"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:13" pos:end="13:15">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:39"><expr pos:start="17:5" pos:end="17:38"><call pos:start="17:5" pos:end="17:38"><name pos:start="17:5" pos:end="17:22">qemu_co_mutex_lock</name><argument_list pos:start="17:23" pos:end="17:38">(<argument pos:start="17:24" pos:end="17:37"><expr pos:start="17:24" pos:end="17:37"><operator pos:start="17:24" pos:end="17:24">&amp;</operator><name pos:start="17:25" pos:end="17:37"><name pos:start="17:25" pos:end="17:25">s</name><operator pos:start="17:26" pos:end="17:27">-&gt;</operator><name pos:start="17:28" pos:end="17:37">send_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:46"><expr pos:start="19:5" pos:end="19:45"><name pos:start="19:5" pos:end="19:21"><name pos:start="19:5" pos:end="19:5">s</name><operator pos:start="19:6" pos:end="19:7">-&gt;</operator><name pos:start="19:8" pos:end="19:21">send_coroutine</name></name> <operator pos:start="19:23" pos:end="19:23">=</operator> <call pos:start="19:25" pos:end="19:45"><name pos:start="19:25" pos:end="19:43">qemu_coroutine_self</name><argument_list pos:start="19:44" pos:end="19:45">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:43"><expr pos:start="21:5" pos:end="21:42"><name pos:start="21:5" pos:end="21:15">aio_context</name> <operator pos:start="21:17" pos:end="21:17">=</operator> <call pos:start="21:19" pos:end="21:42"><name pos:start="21:19" pos:end="21:38">bdrv_get_aio_context</name><argument_list pos:start="21:39" pos:end="21:42">(<argument pos:start="21:40" pos:end="21:41"><expr pos:start="21:40" pos:end="21:41"><name pos:start="21:40" pos:end="21:41">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="25:63"><expr pos:start="23:5" pos:end="25:62"><call pos:start="23:5" pos:end="25:62"><name pos:start="23:5" pos:end="23:22">aio_set_fd_handler</name><argument_list pos:start="23:23" pos:end="25:62">(<argument pos:start="23:24" pos:end="23:34"><expr pos:start="23:24" pos:end="23:34"><name pos:start="23:24" pos:end="23:34">aio_context</name></expr></argument>, <argument pos:start="23:37" pos:end="23:43"><expr pos:start="23:37" pos:end="23:43"><name pos:start="23:37" pos:end="23:43"><name pos:start="23:37" pos:end="23:37">s</name><operator pos:start="23:38" pos:end="23:39">-&gt;</operator><name pos:start="23:40" pos:end="23:43">sock</name></name></expr></argument>,

                       <argument pos:start="25:24" pos:end="25:38"><expr pos:start="25:24" pos:end="25:38"><name pos:start="25:24" pos:end="25:38">nbd_reply_ready</name></expr></argument>, <argument pos:start="25:41" pos:end="25:57"><expr pos:start="25:41" pos:end="25:57"><name pos:start="25:41" pos:end="25:57">nbd_restart_write</name></expr></argument>, <argument pos:start="25:60" pos:end="25:61"><expr pos:start="25:60" pos:end="25:61"><name pos:start="25:60" pos:end="25:61">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="61:5"><if pos:start="27:5" pos:end="57:5">if <condition pos:start="27:8" pos:end="27:13">(<expr pos:start="27:9" pos:end="27:12"><name pos:start="27:9" pos:end="27:12">qiov</name></expr>)</condition> <block pos:start="27:15" pos:end="57:5">{<block_content pos:start="29:9" pos:end="55:9">

        <if_stmt pos:start="29:9" pos:end="33:9"><if pos:start="29:9" pos:end="33:9">if <condition pos:start="29:12" pos:end="29:24">(<expr pos:start="29:13" pos:end="29:23"><operator pos:start="29:13" pos:end="29:13">!</operator><name pos:start="29:14" pos:end="29:23"><name pos:start="29:14" pos:end="29:14">s</name><operator pos:start="29:15" pos:end="29:16">-&gt;</operator><name pos:start="29:17" pos:end="29:23">is_unix</name></name></expr>)</condition> <block pos:start="29:26" pos:end="33:9">{<block_content pos:start="31:13" pos:end="31:40">

            <expr_stmt pos:start="31:13" pos:end="31:40"><expr pos:start="31:13" pos:end="31:39"><call pos:start="31:13" pos:end="31:39"><name pos:start="31:13" pos:end="31:27">socket_set_cork</name><argument_list pos:start="31:28" pos:end="31:39">(<argument pos:start="31:29" pos:end="31:35"><expr pos:start="31:29" pos:end="31:35"><name pos:start="31:29" pos:end="31:35"><name pos:start="31:29" pos:end="31:29">s</name><operator pos:start="31:30" pos:end="31:31">-&gt;</operator><name pos:start="31:32" pos:end="31:35">sock</name></name></expr></argument>, <argument pos:start="31:38" pos:end="31:38"><expr pos:start="31:38" pos:end="31:38"><literal type="number" pos:start="31:38" pos:end="31:38">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:48"><expr pos:start="35:9" pos:end="35:47"><name pos:start="35:9" pos:end="35:10">rc</name> <operator pos:start="35:12" pos:end="35:12">=</operator> <call pos:start="35:14" pos:end="35:47"><name pos:start="35:14" pos:end="35:29">nbd_send_request</name><argument_list pos:start="35:30" pos:end="35:47">(<argument pos:start="35:31" pos:end="35:37"><expr pos:start="35:31" pos:end="35:37"><name pos:start="35:31" pos:end="35:37"><name pos:start="35:31" pos:end="35:31">s</name><operator pos:start="35:32" pos:end="35:33">-&gt;</operator><name pos:start="35:34" pos:end="35:37">sock</name></name></expr></argument>, <argument pos:start="35:40" pos:end="35:46"><expr pos:start="35:40" pos:end="35:46"><name pos:start="35:40" pos:end="35:46">request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="37:9" pos:end="49:9"><if pos:start="37:9" pos:end="49:9">if <condition pos:start="37:12" pos:end="37:20">(<expr pos:start="37:13" pos:end="37:19"><name pos:start="37:13" pos:end="37:14">rc</name> <operator pos:start="37:16" pos:end="37:17">&gt;=</operator> <literal type="number" pos:start="37:19" pos:end="37:19">0</literal></expr>)</condition> <block pos:start="37:22" pos:end="49:9">{<block_content pos:start="39:13" pos:end="47:13">

            <expr_stmt pos:start="39:13" pos:end="41:54"><expr pos:start="39:13" pos:end="41:53"><name pos:start="39:13" pos:end="39:15">ret</name> <operator pos:start="39:17" pos:end="39:17">=</operator> <call pos:start="39:19" pos:end="41:53"><name pos:start="39:19" pos:end="39:31">qemu_co_sendv</name><argument_list pos:start="39:32" pos:end="41:53">(<argument pos:start="39:33" pos:end="39:39"><expr pos:start="39:33" pos:end="39:39"><name pos:start="39:33" pos:end="39:39"><name pos:start="39:33" pos:end="39:33">s</name><operator pos:start="39:34" pos:end="39:35">-&gt;</operator><name pos:start="39:36" pos:end="39:39">sock</name></name></expr></argument>, <argument pos:start="39:42" pos:end="39:50"><expr pos:start="39:42" pos:end="39:50"><name pos:start="39:42" pos:end="39:50"><name pos:start="39:42" pos:end="39:45">qiov</name><operator pos:start="39:46" pos:end="39:47">-&gt;</operator><name pos:start="39:48" pos:end="39:50">iov</name></name></expr></argument>, <argument pos:start="39:53" pos:end="39:62"><expr pos:start="39:53" pos:end="39:62"><name pos:start="39:53" pos:end="39:62"><name pos:start="39:53" pos:end="39:56">qiov</name><operator pos:start="39:57" pos:end="39:58">-&gt;</operator><name pos:start="39:59" pos:end="39:62">niov</name></name></expr></argument>,

                                <argument pos:start="41:33" pos:end="41:38"><expr pos:start="41:33" pos:end="41:38"><name pos:start="41:33" pos:end="41:38">offset</name></expr></argument>, <argument pos:start="41:41" pos:end="41:52"><expr pos:start="41:41" pos:end="41:52"><name pos:start="41:41" pos:end="41:52"><name pos:start="41:41" pos:end="41:47">request</name><operator pos:start="41:48" pos:end="41:49">-&gt;</operator><name pos:start="41:50" pos:end="41:52">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="43:13" pos:end="47:13"><if pos:start="43:13" pos:end="47:13">if <condition pos:start="43:16" pos:end="43:36">(<expr pos:start="43:17" pos:end="43:35"><name pos:start="43:17" pos:end="43:19">ret</name> <operator pos:start="43:21" pos:end="43:22">!=</operator> <name pos:start="43:24" pos:end="43:35"><name pos:start="43:24" pos:end="43:30">request</name><operator pos:start="43:31" pos:end="43:32">-&gt;</operator><name pos:start="43:33" pos:end="43:35">len</name></name></expr>)</condition> <block pos:start="43:38" pos:end="47:13">{<block_content pos:start="45:17" pos:end="45:26">

                <expr_stmt pos:start="45:17" pos:end="45:26"><expr pos:start="45:17" pos:end="45:25"><name pos:start="45:17" pos:end="45:18">rc</name> <operator pos:start="45:20" pos:end="45:20">=</operator> <operator pos:start="45:22" pos:end="45:22">-</operator><name pos:start="45:23" pos:end="45:25">EIO</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="51:9" pos:end="55:9"><if pos:start="51:9" pos:end="55:9">if <condition pos:start="51:12" pos:end="51:24">(<expr pos:start="51:13" pos:end="51:23"><operator pos:start="51:13" pos:end="51:13">!</operator><name pos:start="51:14" pos:end="51:23"><name pos:start="51:14" pos:end="51:14">s</name><operator pos:start="51:15" pos:end="51:16">-&gt;</operator><name pos:start="51:17" pos:end="51:23">is_unix</name></name></expr>)</condition> <block pos:start="51:26" pos:end="55:9">{<block_content pos:start="53:13" pos:end="53:40">

            <expr_stmt pos:start="53:13" pos:end="53:40"><expr pos:start="53:13" pos:end="53:39"><call pos:start="53:13" pos:end="53:39"><name pos:start="53:13" pos:end="53:27">socket_set_cork</name><argument_list pos:start="53:28" pos:end="53:39">(<argument pos:start="53:29" pos:end="53:35"><expr pos:start="53:29" pos:end="53:35"><name pos:start="53:29" pos:end="53:35"><name pos:start="53:29" pos:end="53:29">s</name><operator pos:start="53:30" pos:end="53:31">-&gt;</operator><name pos:start="53:32" pos:end="53:35">sock</name></name></expr></argument>, <argument pos:start="53:38" pos:end="53:38"><expr pos:start="53:38" pos:end="53:38"><literal type="number" pos:start="53:38" pos:end="53:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="57:7" pos:end="61:5">else <block pos:start="57:12" pos:end="61:5">{<block_content pos:start="59:9" pos:end="59:48">

        <expr_stmt pos:start="59:9" pos:end="59:48"><expr pos:start="59:9" pos:end="59:47"><name pos:start="59:9" pos:end="59:10">rc</name> <operator pos:start="59:12" pos:end="59:12">=</operator> <call pos:start="59:14" pos:end="59:47"><name pos:start="59:14" pos:end="59:29">nbd_send_request</name><argument_list pos:start="59:30" pos:end="59:47">(<argument pos:start="59:31" pos:end="59:37"><expr pos:start="59:31" pos:end="59:37"><name pos:start="59:31" pos:end="59:37"><name pos:start="59:31" pos:end="59:31">s</name><operator pos:start="59:32" pos:end="59:33">-&gt;</operator><name pos:start="59:34" pos:end="59:37">sock</name></name></expr></argument>, <argument pos:start="59:40" pos:end="59:46"><expr pos:start="59:40" pos:end="59:46"><name pos:start="59:40" pos:end="59:46">request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:72"><expr pos:start="63:5" pos:end="63:71"><call pos:start="63:5" pos:end="63:71"><name pos:start="63:5" pos:end="63:22">aio_set_fd_handler</name><argument_list pos:start="63:23" pos:end="63:71">(<argument pos:start="63:24" pos:end="63:34"><expr pos:start="63:24" pos:end="63:34"><name pos:start="63:24" pos:end="63:34">aio_context</name></expr></argument>, <argument pos:start="63:37" pos:end="63:43"><expr pos:start="63:37" pos:end="63:43"><name pos:start="63:37" pos:end="63:43"><name pos:start="63:37" pos:end="63:37">s</name><operator pos:start="63:38" pos:end="63:39">-&gt;</operator><name pos:start="63:40" pos:end="63:43">sock</name></name></expr></argument>, <argument pos:start="63:46" pos:end="63:60"><expr pos:start="63:46" pos:end="63:60"><name pos:start="63:46" pos:end="63:60">nbd_reply_ready</name></expr></argument>, <argument pos:start="63:63" pos:end="63:66"><expr pos:start="63:63" pos:end="63:66"><name pos:start="63:63" pos:end="63:66">NULL</name></expr></argument>, <argument pos:start="63:69" pos:end="63:70"><expr pos:start="63:69" pos:end="63:70"><name pos:start="63:69" pos:end="63:70">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:29"><expr pos:start="65:5" pos:end="65:28"><name pos:start="65:5" pos:end="65:21"><name pos:start="65:5" pos:end="65:5">s</name><operator pos:start="65:6" pos:end="65:7">-&gt;</operator><name pos:start="65:8" pos:end="65:21">send_coroutine</name></name> <operator pos:start="65:23" pos:end="65:23">=</operator> <name pos:start="65:25" pos:end="65:28">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:41"><expr pos:start="67:5" pos:end="67:40"><call pos:start="67:5" pos:end="67:40"><name pos:start="67:5" pos:end="67:24">qemu_co_mutex_unlock</name><argument_list pos:start="67:25" pos:end="67:40">(<argument pos:start="67:26" pos:end="67:39"><expr pos:start="67:26" pos:end="67:39"><operator pos:start="67:26" pos:end="67:26">&amp;</operator><name pos:start="67:27" pos:end="67:39"><name pos:start="67:27" pos:end="67:27">s</name><operator pos:start="67:28" pos:end="67:29">-&gt;</operator><name pos:start="67:30" pos:end="67:39">send_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="69:5" pos:end="69:14">return <expr pos:start="69:12" pos:end="69:13"><name pos:start="69:12" pos:end="69:13">rc</name></expr>;</return>

</block_content>}</block></function>
</unit>
