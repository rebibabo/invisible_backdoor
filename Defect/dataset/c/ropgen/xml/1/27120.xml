<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/27120.c" pos:tabs="8"><function pos:start="1:1" pos:end="67:1"><type pos:start="1:1" pos:end="1:18"><name pos:start="1:1" pos:end="1:16">BdrvNextIterator</name> <modifier pos:start="1:18" pos:end="1:18">*</modifier></type><name pos:start="1:19" pos:end="1:27">bdrv_next</name><parameter_list pos:start="1:28" pos:end="1:72">(<parameter pos:start="1:29" pos:end="1:48"><decl pos:start="1:29" pos:end="1:48"><type pos:start="1:29" pos:end="1:48"><name pos:start="1:29" pos:end="1:44">BdrvNextIterator</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:48">it</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:71"><decl pos:start="1:51" pos:end="1:71"><type pos:start="1:51" pos:end="1:71"><name pos:start="1:51" pos:end="1:66">BlockDriverState</name> <modifier pos:start="1:68" pos:end="1:68">*</modifier><modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:71">bs</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="67:1">{<block_content pos:start="5:5" pos:end="65:27">

    <if_stmt pos:start="5:5" pos:end="15:5"><if pos:start="5:5" pos:end="15:5">if <condition pos:start="5:8" pos:end="5:12">(<expr pos:start="5:9" pos:end="5:11"><operator pos:start="5:9" pos:end="5:9">!</operator><name pos:start="5:10" pos:end="5:11">it</name></expr>)</condition> <block pos:start="5:14" pos:end="15:5">{<block_content pos:start="7:9" pos:end="13:10">

        <expr_stmt pos:start="7:9" pos:end="7:40"><expr pos:start="7:9" pos:end="7:39"><name pos:start="7:9" pos:end="7:10">it</name> <operator pos:start="7:12" pos:end="7:12">=</operator> <call pos:start="7:14" pos:end="7:39"><name pos:start="7:14" pos:end="7:18">g_new</name><argument_list pos:start="7:19" pos:end="7:39">(<argument pos:start="7:20" pos:end="7:35"><expr pos:start="7:20" pos:end="7:35"><name pos:start="7:20" pos:end="7:35">BdrvNextIterator</name></expr></argument>, <argument pos:start="7:38" pos:end="7:38"><expr pos:start="7:38" pos:end="7:38"><literal type="number" pos:start="7:38" pos:end="7:38">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="9:9" pos:end="13:10"><expr pos:start="9:9" pos:end="13:9"><operator pos:start="9:9" pos:end="9:9">*</operator><name pos:start="9:10" pos:end="9:11">it</name> <operator pos:start="9:13" pos:end="9:13">=</operator> <operator pos:start="9:15" pos:end="9:15">(</operator><name pos:start="9:16" pos:end="9:31">BdrvNextIterator</name><operator pos:start="9:32" pos:end="9:32">)</operator> <block pos:start="9:34" pos:end="13:9">{

            <expr pos:start="11:13" pos:end="11:44"><operator pos:start="11:13" pos:end="11:13">.</operator><name pos:start="11:14" pos:end="11:18">phase</name> <operator pos:start="11:20" pos:end="11:20">=</operator> <name pos:start="11:22" pos:end="11:44">BDRV_NEXT_BACKEND_ROOTS</name></expr>,

        }</block></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="19:5" pos:end="23:67">/* First, return all root nodes of BlockBackends. In order to avoid

     * returning a BDS twice when multiple BBs refer to it, we only return it

     * if the BB is the first one in the parent list of the BDS. */</comment>

    <if_stmt pos:start="25:5" pos:end="45:5"><if pos:start="25:5" pos:end="45:5">if <condition pos:start="25:8" pos:end="25:45">(<expr pos:start="25:9" pos:end="25:44"><name pos:start="25:9" pos:end="25:17"><name pos:start="25:9" pos:end="25:10">it</name><operator pos:start="25:11" pos:end="25:12">-&gt;</operator><name pos:start="25:13" pos:end="25:17">phase</name></name> <operator pos:start="25:19" pos:end="25:20">==</operator> <name pos:start="25:22" pos:end="25:44">BDRV_NEXT_BACKEND_ROOTS</name></expr>)</condition> <block pos:start="25:47" pos:end="45:5">{<block_content pos:start="27:9" pos:end="43:44">

        <do pos:start="27:9" pos:end="33:77">do <block pos:start="27:12" pos:end="33:9">{<block_content pos:start="29:13" pos:end="31:51">

            <expr_stmt pos:start="29:13" pos:end="29:44"><expr pos:start="29:13" pos:end="29:43"><name pos:start="29:13" pos:end="29:19"><name pos:start="29:13" pos:end="29:14">it</name><operator pos:start="29:15" pos:end="29:16">-&gt;</operator><name pos:start="29:17" pos:end="29:19">blk</name></name> <operator pos:start="29:21" pos:end="29:21">=</operator> <call pos:start="29:23" pos:end="29:43"><name pos:start="29:23" pos:end="29:34">blk_all_next</name><argument_list pos:start="29:35" pos:end="29:43">(<argument pos:start="29:36" pos:end="29:42"><expr pos:start="29:36" pos:end="29:42"><name pos:start="29:36" pos:end="29:42"><name pos:start="29:36" pos:end="29:37">it</name><operator pos:start="29:38" pos:end="29:39">-&gt;</operator><name pos:start="29:40" pos:end="29:42">blk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="31:13" pos:end="31:51"><expr pos:start="31:13" pos:end="31:50"><operator pos:start="31:13" pos:end="31:13">*</operator><name pos:start="31:14" pos:end="31:15">bs</name> <operator pos:start="31:17" pos:end="31:17">=</operator> <ternary pos:start="31:19" pos:end="31:50"><condition pos:start="31:19" pos:end="31:27"><expr pos:start="31:19" pos:end="31:25"><name pos:start="31:19" pos:end="31:25"><name pos:start="31:19" pos:end="31:20">it</name><operator pos:start="31:21" pos:end="31:22">-&gt;</operator><name pos:start="31:23" pos:end="31:25">blk</name></name></expr> ?</condition><then pos:start="31:29" pos:end="31:43"> <expr pos:start="31:29" pos:end="31:43"><call pos:start="31:29" pos:end="31:43"><name pos:start="31:29" pos:end="31:34">blk_bs</name><argument_list pos:start="31:35" pos:end="31:43">(<argument pos:start="31:36" pos:end="31:42"><expr pos:start="31:36" pos:end="31:42"><name pos:start="31:36" pos:end="31:42"><name pos:start="31:36" pos:end="31:37">it</name><operator pos:start="31:38" pos:end="31:39">-&gt;</operator><name pos:start="31:40" pos:end="31:42">blk</name></name></expr></argument>)</argument_list></call></expr> </then><else pos:start="31:45" pos:end="31:50">: <expr pos:start="31:47" pos:end="31:50"><name pos:start="31:47" pos:end="31:50">NULL</name></expr></else></ternary></expr>;</expr_stmt>

        </block_content>}</block> while <condition pos:start="33:17" pos:end="33:76">(<expr pos:start="33:18" pos:end="33:75"><name pos:start="33:18" pos:end="33:24"><name pos:start="33:18" pos:end="33:19">it</name><operator pos:start="33:20" pos:end="33:21">-&gt;</operator><name pos:start="33:22" pos:end="33:24">blk</name></name> <operator pos:start="33:26" pos:end="33:27">&amp;&amp;</operator> <operator pos:start="33:29" pos:end="33:29">(</operator><operator pos:start="33:30" pos:end="33:30">*</operator><name pos:start="33:31" pos:end="33:32">bs</name> <operator pos:start="33:34" pos:end="33:35">==</operator> <name pos:start="33:37" pos:end="33:40">NULL</name> <operator pos:start="33:42" pos:end="33:43">||</operator> <call pos:start="33:45" pos:end="33:63"><name pos:start="33:45" pos:end="33:58">bdrv_first_blk</name><argument_list pos:start="33:59" pos:end="33:63">(<argument pos:start="33:60" pos:end="33:62"><expr pos:start="33:60" pos:end="33:62"><operator pos:start="33:60" pos:end="33:60">*</operator><name pos:start="33:61" pos:end="33:62">bs</name></expr></argument>)</argument_list></call> <operator pos:start="33:65" pos:end="33:66">!=</operator> <name pos:start="33:68" pos:end="33:74"><name pos:start="33:68" pos:end="33:69">it</name><operator pos:start="33:70" pos:end="33:71">-&gt;</operator><name pos:start="33:72" pos:end="33:74">blk</name></name><operator pos:start="33:75" pos:end="33:75">)</operator></expr>)</condition>;</do>



        <if_stmt pos:start="37:9" pos:end="41:9"><if pos:start="37:9" pos:end="41:9">if <condition pos:start="37:12" pos:end="37:16">(<expr pos:start="37:13" pos:end="37:15"><operator pos:start="37:13" pos:end="37:13">*</operator><name pos:start="37:14" pos:end="37:15">bs</name></expr>)</condition> <block pos:start="37:18" pos:end="41:9">{<block_content pos:start="39:13" pos:end="39:22">

            <return pos:start="39:13" pos:end="39:22">return <expr pos:start="39:20" pos:end="39:21"><name pos:start="39:20" pos:end="39:21">it</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:44"><expr pos:start="43:9" pos:end="43:43"><name pos:start="43:9" pos:end="43:17"><name pos:start="43:9" pos:end="43:10">it</name><operator pos:start="43:11" pos:end="43:12">-&gt;</operator><name pos:start="43:13" pos:end="43:17">phase</name></name> <operator pos:start="43:19" pos:end="43:19">=</operator> <name pos:start="43:21" pos:end="43:43">BDRV_NEXT_MONITOR_OWNED</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="49:5" pos:end="53:36">/* Then return the monitor-owned BDSes without a BB attached. Ignore all

     * BDSes that are attached to a BlockBackend here; they have been handled

     * by the above block already */</comment>

    <do pos:start="55:5" pos:end="61:39">do <block pos:start="55:8" pos:end="61:5">{<block_content pos:start="57:9" pos:end="59:21">

        <expr_stmt pos:start="57:9" pos:end="57:49"><expr pos:start="57:9" pos:end="57:48"><name pos:start="57:9" pos:end="57:14"><name pos:start="57:9" pos:end="57:10">it</name><operator pos:start="57:11" pos:end="57:12">-&gt;</operator><name pos:start="57:13" pos:end="57:14">bs</name></name> <operator pos:start="57:16" pos:end="57:16">=</operator> <call pos:start="57:18" pos:end="57:48"><name pos:start="57:18" pos:end="57:40">bdrv_next_monitor_owned</name><argument_list pos:start="57:41" pos:end="57:48">(<argument pos:start="57:42" pos:end="57:47"><expr pos:start="57:42" pos:end="57:47"><name pos:start="57:42" pos:end="57:47"><name pos:start="57:42" pos:end="57:43">it</name><operator pos:start="57:44" pos:end="57:45">-&gt;</operator><name pos:start="57:46" pos:end="57:47">bs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:21"><expr pos:start="59:9" pos:end="59:20"><operator pos:start="59:9" pos:end="59:9">*</operator><name pos:start="59:10" pos:end="59:11">bs</name> <operator pos:start="59:13" pos:end="59:13">=</operator> <name pos:start="59:15" pos:end="59:20"><name pos:start="59:15" pos:end="59:16">it</name><operator pos:start="59:17" pos:end="59:18">-&gt;</operator><name pos:start="59:19" pos:end="59:20">bs</name></name></expr>;</expr_stmt>

    </block_content>}</block> while <condition pos:start="61:13" pos:end="61:38">(<expr pos:start="61:14" pos:end="61:37"><operator pos:start="61:14" pos:end="61:14">*</operator><name pos:start="61:15" pos:end="61:16">bs</name> <operator pos:start="61:18" pos:end="61:19">&amp;&amp;</operator> <call pos:start="61:21" pos:end="61:37"><name pos:start="61:21" pos:end="61:32">bdrv_has_blk</name><argument_list pos:start="61:33" pos:end="61:37">(<argument pos:start="61:34" pos:end="61:36"><expr pos:start="61:34" pos:end="61:36"><operator pos:start="61:34" pos:end="61:34">*</operator><name pos:start="61:35" pos:end="61:36">bs</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>



    <return pos:start="65:5" pos:end="65:27">return <expr pos:start="65:12" pos:end="65:26"><ternary pos:start="65:12" pos:end="65:26"><condition pos:start="65:12" pos:end="65:16"><expr pos:start="65:12" pos:end="65:14"><operator pos:start="65:12" pos:end="65:12">*</operator><name pos:start="65:13" pos:end="65:14">bs</name></expr> ?</condition><then pos:start="65:18" pos:end="65:19"> <expr pos:start="65:18" pos:end="65:19"><name pos:start="65:18" pos:end="65:19">it</name></expr> </then><else pos:start="65:21" pos:end="65:26">: <expr pos:start="65:23" pos:end="65:26"><name pos:start="65:23" pos:end="65:26">NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>
</unit>
