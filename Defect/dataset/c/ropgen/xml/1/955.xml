<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/955.c" pos:tabs="8"><function pos:start="1:1" pos:end="45:1"><type pos:start="1:1" pos:end="1:15"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">uint32_t</name></type> <name pos:start="1:17" pos:end="1:35">arm_v7m_load_vector</name><parameter_list pos:start="1:36" pos:end="1:48">(<parameter pos:start="1:37" pos:end="1:47"><decl pos:start="1:37" pos:end="1:47"><type pos:start="1:37" pos:end="1:44"><name pos:start="1:37" pos:end="1:42">ARMCPU</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:47">cpu</name></decl></parameter>)</parameter_list>



<block pos:start="5:1" pos:end="45:1">{<block_content pos:start="7:5" pos:end="43:16">

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">CPUState</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:16">cs</name> <init pos:start="7:18" pos:end="7:27">= <expr pos:start="7:20" pos:end="7:27"><call pos:start="7:20" pos:end="7:27"><name pos:start="7:20" pos:end="7:22">CPU</name><argument_list pos:start="7:23" pos:end="7:27">(<argument pos:start="7:24" pos:end="7:26"><expr pos:start="7:24" pos:end="7:26"><name pos:start="7:24" pos:end="7:26">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:33"><decl pos:start="9:5" pos:end="9:32"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">CPUARMState</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:20">env</name> <init pos:start="9:22" pos:end="9:32">= <expr pos:start="9:24" pos:end="9:32"><operator pos:start="9:24" pos:end="9:24">&amp;</operator><name pos:start="9:25" pos:end="9:32"><name pos:start="9:25" pos:end="9:27">cpu</name><operator pos:start="9:28" pos:end="9:29">-&gt;</operator><name pos:start="9:30" pos:end="9:32">env</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:15">MemTxResult</name></type> <name pos:start="11:17" pos:end="11:22">result</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:59"><decl pos:start="13:5" pos:end="13:58"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:10">hwaddr</name></type> <name pos:start="13:12" pos:end="13:14">vec</name> <init pos:start="13:16" pos:end="13:58">= <expr pos:start="13:18" pos:end="13:58"><name pos:start="13:18" pos:end="13:33"><name pos:start="13:18" pos:end="13:20">env</name><operator pos:start="13:21" pos:end="13:22">-&gt;</operator><name pos:start="13:23" pos:end="13:25">v7m</name><operator pos:start="13:26" pos:end="13:26">.</operator><name pos:start="13:27" pos:end="13:33">vecbase</name></name> <operator pos:start="13:35" pos:end="13:35">+</operator> <name pos:start="13:37" pos:end="13:54"><name pos:start="13:37" pos:end="13:39">env</name><operator pos:start="13:40" pos:end="13:41">-&gt;</operator><name pos:start="13:42" pos:end="13:44">v7m</name><operator pos:start="13:45" pos:end="13:45">.</operator><name pos:start="13:46" pos:end="13:54">exception</name></name> <operator pos:start="13:56" pos:end="13:56">*</operator> <literal type="number" pos:start="13:58" pos:end="13:58">4</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:17"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:17">addr</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="21:62"><expr pos:start="19:5" pos:end="21:61"><name pos:start="19:5" pos:end="19:8">addr</name> <operator pos:start="19:10" pos:end="19:10">=</operator> <call pos:start="19:12" pos:end="21:61"><name pos:start="19:12" pos:end="19:28">address_space_ldl</name><argument_list pos:start="19:29" pos:end="21:61">(<argument pos:start="19:30" pos:end="19:35"><expr pos:start="19:30" pos:end="19:35"><name pos:start="19:30" pos:end="19:35"><name pos:start="19:30" pos:end="19:31">cs</name><operator pos:start="19:32" pos:end="19:33">-&gt;</operator><name pos:start="19:34" pos:end="19:35">as</name></name></expr></argument>, <argument pos:start="19:38" pos:end="19:40"><expr pos:start="19:38" pos:end="19:40"><name pos:start="19:38" pos:end="19:40">vec</name></expr></argument>,

                             <argument pos:start="21:30" pos:end="21:51"><expr pos:start="21:30" pos:end="21:51"><name pos:start="21:30" pos:end="21:51">MEMTXATTRS_UNSPECIFIED</name></expr></argument>, <argument pos:start="21:54" pos:end="21:60"><expr pos:start="21:54" pos:end="21:60"><operator pos:start="21:54" pos:end="21:54">&amp;</operator><name pos:start="21:55" pos:end="21:60">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="41:5"><if pos:start="23:5" pos:end="41:5">if <condition pos:start="23:8" pos:end="23:27">(<expr pos:start="23:9" pos:end="23:26"><name pos:start="23:9" pos:end="23:14">result</name> <operator pos:start="23:16" pos:end="23:17">!=</operator> <name pos:start="23:19" pos:end="23:26">MEMTX_OK</name></expr>)</condition> <block pos:start="23:29" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:49">

        <comment type="block" pos:start="25:9" pos:end="35:11">/* Architecturally this should cause a HardFault setting HSFR.VECTTBL,

         * which would then be immediately followed by our failing to load

         * the entry vector for that HardFault, which is a Lockup case.

         * Since we don't model Lockup, we just report this guest error

         * via cpu_abort().

         */</comment>

        <expr_stmt pos:start="37:9" pos:end="39:49"><expr pos:start="37:9" pos:end="39:48"><call pos:start="37:9" pos:end="39:48"><name pos:start="37:9" pos:end="37:17">cpu_abort</name><argument_list pos:start="37:18" pos:end="39:48">(<argument pos:start="37:19" pos:end="37:20"><expr pos:start="37:19" pos:end="37:20"><name pos:start="37:19" pos:end="37:20">cs</name></expr></argument>, <argument pos:start="37:23" pos:end="39:32"><expr pos:start="37:23" pos:end="39:32"><literal type="string" pos:start="37:23" pos:end="37:67">"Failed to read from exception vector table "</literal>

                  <literal type="string" pos:start="39:19" pos:end="39:32">"entry %08x\n"</literal></expr></argument>, <argument pos:start="39:35" pos:end="39:47"><expr pos:start="39:35" pos:end="39:47"><operator pos:start="39:35" pos:end="39:35">(</operator><name pos:start="39:36" pos:end="39:43">unsigned</name><operator pos:start="39:44" pos:end="39:44">)</operator><name pos:start="39:45" pos:end="39:47">vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="43:5" pos:end="43:16">return <expr pos:start="43:12" pos:end="43:15"><name pos:start="43:12" pos:end="43:15">addr</name></expr>;</return>

</block_content>}</block></function>
</unit>
