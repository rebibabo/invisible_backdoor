<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22005.c" pos:tabs="8"><function pos:start="1:1" pos:end="557:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">ppc_heathrow_init</name> <parameter_list pos:start="1:31" pos:end="11:53">(<parameter pos:start="1:32" pos:end="1:50"><decl pos:start="1:32" pos:end="1:50"><type pos:start="1:32" pos:end="1:50"><name pos:start="1:32" pos:end="1:41">ram_addr_t</name></type> <name pos:start="1:43" pos:end="1:50">ram_size</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:54"><decl pos:start="3:32" pos:end="3:54"><type pos:start="3:32" pos:end="3:54"><specifier pos:start="3:32" pos:end="3:36">const</specifier> <name pos:start="3:38" pos:end="3:41">char</name> <modifier pos:start="3:43" pos:end="3:43">*</modifier></type><name pos:start="3:44" pos:end="3:54">boot_device</name></decl></parameter>,

                               <parameter pos:start="5:32" pos:end="5:58"><decl pos:start="5:32" pos:end="5:58"><type pos:start="5:32" pos:end="5:58"><specifier pos:start="5:32" pos:end="5:36">const</specifier> <name pos:start="5:38" pos:end="5:41">char</name> <modifier pos:start="5:43" pos:end="5:43">*</modifier></type><name pos:start="5:44" pos:end="5:58">kernel_filename</name></decl></parameter>,

                               <parameter pos:start="7:32" pos:end="7:57"><decl pos:start="7:32" pos:end="7:57"><type pos:start="7:32" pos:end="7:57"><specifier pos:start="7:32" pos:end="7:36">const</specifier> <name pos:start="7:38" pos:end="7:41">char</name> <modifier pos:start="7:43" pos:end="7:43">*</modifier></type><name pos:start="7:44" pos:end="7:57">kernel_cmdline</name></decl></parameter>,

                               <parameter pos:start="9:32" pos:end="9:58"><decl pos:start="9:32" pos:end="9:58"><type pos:start="9:32" pos:end="9:58"><specifier pos:start="9:32" pos:end="9:36">const</specifier> <name pos:start="9:38" pos:end="9:41">char</name> <modifier pos:start="9:43" pos:end="9:43">*</modifier></type><name pos:start="9:44" pos:end="9:58">initrd_filename</name></decl></parameter>,

                               <parameter pos:start="11:32" pos:end="11:52"><decl pos:start="11:32" pos:end="11:52"><type pos:start="11:32" pos:end="11:52"><specifier pos:start="11:32" pos:end="11:36">const</specifier> <name pos:start="11:38" pos:end="11:41">char</name> <modifier pos:start="11:43" pos:end="11:43">*</modifier></type><name pos:start="11:44" pos:end="11:52">cpu_model</name></decl></parameter>)</parameter_list>

<block pos:start="13:1" pos:end="557:1">{<block_content pos:start="15:5" pos:end="555:52">

    <decl_stmt pos:start="15:5" pos:end="15:42"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:12">CPUState</name> <modifier pos:start="15:14" pos:end="15:14">*</modifier></type><name pos:start="15:15" pos:end="15:17">env</name> <init pos:start="15:19" pos:end="15:24">= <expr pos:start="15:21" pos:end="15:24"><name pos:start="15:21" pos:end="15:24">NULL</name></expr></init></decl>, <decl pos:start="15:27" pos:end="15:41"><type ref="prev" pos:start="15:5" pos:end="15:14"><modifier pos:start="15:27" pos:end="15:27">*</modifier></type><name pos:start="15:28" pos:end="15:41"><name pos:start="15:28" pos:end="15:31">envs</name><index pos:start="15:32" pos:end="15:41">[<expr pos:start="15:33" pos:end="15:40"><name pos:start="15:33" pos:end="15:40">MAX_CPUS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:8">char</name> <modifier pos:start="17:10" pos:end="17:10">*</modifier></type><name pos:start="17:11" pos:end="17:18">filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:35"><decl pos:start="19:5" pos:end="19:17"><type pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:12">qemu_irq</name> <modifier pos:start="19:14" pos:end="19:14">*</modifier></type><name pos:start="19:15" pos:end="19:17">pic</name></decl>, <decl pos:start="19:20" pos:end="19:34"><type ref="prev" pos:start="19:5" pos:end="19:14"><modifier pos:start="19:20" pos:end="19:20">*</modifier><modifier pos:start="19:21" pos:end="19:21">*</modifier></type><name pos:start="19:22" pos:end="19:34">heathrow_irqs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:22"><decl pos:start="21:5" pos:end="21:18"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:18">linux_boot</name></decl>, <decl pos:start="21:21" pos:end="21:21"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:21" pos:end="21:21">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:56"><decl pos:start="23:5" pos:end="23:25"><type pos:start="23:5" pos:end="23:14"><name pos:start="23:5" pos:end="23:14">ram_addr_t</name></type> <name pos:start="23:16" pos:end="23:25">ram_offset</name></decl>, <decl pos:start="23:28" pos:end="23:38"><type ref="prev" pos:start="23:5" pos:end="23:14"/><name pos:start="23:28" pos:end="23:38">bios_offset</name></decl>, <decl pos:start="23:41" pos:end="23:55"><type ref="prev" pos:start="23:5" pos:end="23:14"/><name pos:start="23:41" pos:end="23:55">vga_bios_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:38"><decl pos:start="25:5" pos:end="25:24"><type pos:start="25:5" pos:end="25:12"><name pos:start="25:5" pos:end="25:12">uint32_t</name></type> <name pos:start="25:14" pos:end="25:24">kernel_base</name></decl>, <decl pos:start="25:27" pos:end="25:37"><type ref="prev" pos:start="25:5" pos:end="25:12"/><name pos:start="25:27" pos:end="25:37">initrd_base</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:37"><decl pos:start="27:5" pos:end="27:23"><type pos:start="27:5" pos:end="27:11"><name pos:start="27:5" pos:end="27:11">int32_t</name></type> <name pos:start="27:13" pos:end="27:23">kernel_size</name></decl>, <decl pos:start="27:26" pos:end="27:36"><type ref="prev" pos:start="27:5" pos:end="27:11"/><name pos:start="27:26" pos:end="27:36">initrd_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:20"><decl pos:start="29:5" pos:end="29:19"><type pos:start="29:5" pos:end="29:12"><name pos:start="29:5" pos:end="29:10">PCIBus</name> <modifier pos:start="29:12" pos:end="29:12">*</modifier></type><name pos:start="29:13" pos:end="29:19">pci_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:25"><decl pos:start="31:5" pos:end="31:24"><type pos:start="31:5" pos:end="31:21"><name pos:start="31:5" pos:end="31:19">MacIONVRAMState</name> <modifier pos:start="31:21" pos:end="31:21">*</modifier></type><name pos:start="31:22" pos:end="31:24">nvr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:33"><decl pos:start="33:5" pos:end="33:21"><type pos:start="33:5" pos:end="33:7"><name pos:start="33:5" pos:end="33:7">int</name></type> <name pos:start="33:9" pos:end="33:21">vga_bios_size</name></decl>, <decl pos:start="33:24" pos:end="33:32"><type ref="prev" pos:start="33:5" pos:end="33:7"/><name pos:start="33:24" pos:end="33:32">bios_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:72"><decl pos:start="35:5" pos:end="35:21"><type pos:start="35:5" pos:end="35:7"><name pos:start="35:5" pos:end="35:7">int</name></type> <name pos:start="35:9" pos:end="35:21">pic_mem_index</name></decl>, <decl pos:start="35:24" pos:end="35:38"><type ref="prev" pos:start="35:5" pos:end="35:7"/><name pos:start="35:24" pos:end="35:38">nvram_mem_index</name></decl>, <decl pos:start="35:41" pos:end="35:55"><type ref="prev" pos:start="35:5" pos:end="35:7"/><name pos:start="35:41" pos:end="35:55">dbdma_mem_index</name></decl>, <decl pos:start="35:58" pos:end="35:71"><type ref="prev" pos:start="35:5" pos:end="35:7"/><name pos:start="35:58" pos:end="35:71">cuda_mem_index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:41"><decl pos:start="37:5" pos:end="37:22"><type pos:start="37:5" pos:end="37:7"><name pos:start="37:5" pos:end="37:7">int</name></type> <name pos:start="37:9" pos:end="37:22">escc_mem_index</name></decl>, <decl pos:start="37:25" pos:end="37:40"><type ref="prev" pos:start="37:5" pos:end="37:7"/><name pos:start="37:25" pos:end="37:40"><name pos:start="37:25" pos:end="37:37">ide_mem_index</name><index pos:start="37:38" pos:end="37:40">[<expr pos:start="37:39" pos:end="37:39"><literal type="number" pos:start="37:39" pos:end="37:39">2</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:29"><decl pos:start="39:5" pos:end="39:28"><type pos:start="39:5" pos:end="39:12"><name pos:start="39:5" pos:end="39:12">uint16_t</name></type> <name pos:start="39:14" pos:end="39:28">ppc_boot_device</name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:46"><decl pos:start="41:5" pos:end="41:45"><type pos:start="41:5" pos:end="41:15"><name pos:start="41:5" pos:end="41:13">DriveInfo</name> <modifier pos:start="41:15" pos:end="41:15">*</modifier></type><name pos:start="41:16" pos:end="41:45"><name pos:start="41:16" pos:end="41:17">hd</name><index pos:start="41:18" pos:end="41:45">[<expr pos:start="41:19" pos:end="41:44"><name pos:start="41:19" pos:end="41:29">MAX_IDE_BUS</name> <operator pos:start="41:31" pos:end="41:31">*</operator> <name pos:start="41:33" pos:end="41:44">MAX_IDE_DEVS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:17"><decl pos:start="43:5" pos:end="43:16"><type pos:start="43:5" pos:end="43:10"><name pos:start="43:5" pos:end="43:8">void</name> <modifier pos:start="43:10" pos:end="43:10">*</modifier></type><name pos:start="43:11" pos:end="43:16">fw_cfg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:16"><decl pos:start="45:5" pos:end="45:15"><type pos:start="45:5" pos:end="45:10"><name pos:start="45:5" pos:end="45:8">void</name> <modifier pos:start="45:10" pos:end="45:10">*</modifier></type><name pos:start="45:11" pos:end="45:15">dbdma</name></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:26"><decl pos:start="47:5" pos:end="47:25"><type pos:start="47:5" pos:end="47:13"><name pos:start="47:5" pos:end="47:11">uint8_t</name> <modifier pos:start="47:13" pos:end="47:13">*</modifier></type><name pos:start="47:14" pos:end="47:25">vga_bios_ptr</name></decl>;</decl_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:43"><expr pos:start="51:5" pos:end="51:42"><name pos:start="51:5" pos:end="51:14">linux_boot</name> <operator pos:start="51:16" pos:end="51:16">=</operator> <operator pos:start="51:18" pos:end="51:18">(</operator><name pos:start="51:19" pos:end="51:33">kernel_filename</name> <operator pos:start="51:35" pos:end="51:36">!=</operator> <name pos:start="51:38" pos:end="51:41">NULL</name><operator pos:start="51:42" pos:end="51:42">)</operator></expr>;</expr_stmt>



    <comment type="block" pos:start="55:5" pos:end="55:19">/* init CPUs */</comment>

    <if_stmt pos:start="57:5" pos:end="59:25"><if pos:start="57:5" pos:end="59:25">if <condition pos:start="57:8" pos:end="57:26">(<expr pos:start="57:9" pos:end="57:25"><name pos:start="57:9" pos:end="57:17">cpu_model</name> <operator pos:start="57:19" pos:end="57:20">==</operator> <name pos:start="57:22" pos:end="57:25">NULL</name></expr>)</condition><block type="pseudo" pos:start="59:9" pos:end="59:25"><block_content pos:start="59:9" pos:end="59:25">

        <expr_stmt pos:start="59:9" pos:end="59:25"><expr pos:start="59:9" pos:end="59:24"><name pos:start="59:9" pos:end="59:17">cpu_model</name> <operator pos:start="59:19" pos:end="59:19">=</operator> <literal type="string" pos:start="59:21" pos:end="59:24">"G3"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <for pos:start="61:5" pos:end="83:5">for <control pos:start="61:9" pos:end="61:34">(<init pos:start="61:10" pos:end="61:15"><expr pos:start="61:10" pos:end="61:14"><name pos:start="61:10" pos:end="61:10">i</name> <operator pos:start="61:12" pos:end="61:12">=</operator> <literal type="number" pos:start="61:14" pos:end="61:14">0</literal></expr>;</init> <condition pos:start="61:17" pos:end="61:29"><expr pos:start="61:17" pos:end="61:28"><name pos:start="61:17" pos:end="61:17">i</name> <operator pos:start="61:19" pos:end="61:19">&lt;</operator> <name pos:start="61:21" pos:end="61:28">smp_cpus</name></expr>;</condition> <incr pos:start="61:31" pos:end="61:33"><expr pos:start="61:31" pos:end="61:33"><name pos:start="61:31" pos:end="61:31">i</name><operator pos:start="61:32" pos:end="61:33">++</operator></expr></incr>)</control> <block pos:start="61:36" pos:end="83:5">{<block_content pos:start="63:9" pos:end="81:22">

        <expr_stmt pos:start="63:9" pos:end="63:34"><expr pos:start="63:9" pos:end="63:33"><name pos:start="63:9" pos:end="63:11">env</name> <operator pos:start="63:13" pos:end="63:13">=</operator> <call pos:start="63:15" pos:end="63:33"><name pos:start="63:15" pos:end="63:22">cpu_init</name><argument_list pos:start="63:23" pos:end="63:33">(<argument pos:start="63:24" pos:end="63:32"><expr pos:start="63:24" pos:end="63:32"><name pos:start="63:24" pos:end="63:32">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="65:9" pos:end="71:9"><if pos:start="65:9" pos:end="71:9">if <condition pos:start="65:12" pos:end="65:17">(<expr pos:start="65:13" pos:end="65:16"><operator pos:start="65:13" pos:end="65:13">!</operator><name pos:start="65:14" pos:end="65:16">env</name></expr>)</condition> <block pos:start="65:19" pos:end="71:9">{<block_content pos:start="67:13" pos:end="69:20">

            <expr_stmt pos:start="67:13" pos:end="67:71"><expr pos:start="67:13" pos:end="67:70"><call pos:start="67:13" pos:end="67:70"><name pos:start="67:13" pos:end="67:19">fprintf</name><argument_list pos:start="67:20" pos:end="67:70">(<argument pos:start="67:21" pos:end="67:26"><expr pos:start="67:21" pos:end="67:26"><name pos:start="67:21" pos:end="67:26">stderr</name></expr></argument>, <argument pos:start="67:29" pos:end="67:69"><expr pos:start="67:29" pos:end="67:69"><literal type="string" pos:start="67:29" pos:end="67:69">"Unable to find PowerPC CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:20"><expr pos:start="69:13" pos:end="69:19"><call pos:start="69:13" pos:end="69:19"><name pos:start="69:13" pos:end="69:16">exit</name><argument_list pos:start="69:17" pos:end="69:19">(<argument pos:start="69:18" pos:end="69:18"><expr pos:start="69:18" pos:end="69:18"><literal type="number" pos:start="69:18" pos:end="69:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="73:9" pos:end="73:49">/* Set time-base frequency to 16.6 Mhz */</comment>

        <expr_stmt pos:start="75:9" pos:end="75:42"><expr pos:start="75:9" pos:end="75:41"><call pos:start="75:9" pos:end="75:41"><name pos:start="75:9" pos:end="75:23">cpu_ppc_tb_init</name><argument_list pos:start="75:24" pos:end="75:41">(<argument pos:start="75:25" pos:end="75:27"><expr pos:start="75:25" pos:end="75:27"><name pos:start="75:25" pos:end="75:27">env</name></expr></argument>,  <argument pos:start="75:31" pos:end="75:40"><expr pos:start="75:31" pos:end="75:40"><literal type="number" pos:start="75:31" pos:end="75:40">16600000UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:37"><expr pos:start="77:9" pos:end="77:36"><name pos:start="77:9" pos:end="77:21"><name pos:start="77:9" pos:end="77:11">env</name><operator pos:start="77:12" pos:end="77:13">-&gt;</operator><name pos:start="77:14" pos:end="77:21">osi_call</name></name> <operator pos:start="77:23" pos:end="77:23">=</operator> <name pos:start="77:25" pos:end="77:36">vga_osi_call</name></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:49"><expr pos:start="79:9" pos:end="79:48"><call pos:start="79:9" pos:end="79:48"><name pos:start="79:9" pos:end="79:27">qemu_register_reset</name><argument_list pos:start="79:28" pos:end="79:48">(<argument pos:start="79:29" pos:end="79:42"><expr pos:start="79:29" pos:end="79:42"><operator pos:start="79:29" pos:end="79:29">&amp;</operator><name pos:start="79:30" pos:end="79:42">cpu_ppc_reset</name></expr></argument>, <argument pos:start="79:45" pos:end="79:47"><expr pos:start="79:45" pos:end="79:47"><name pos:start="79:45" pos:end="79:47">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:22"><expr pos:start="81:9" pos:end="81:21"><name pos:start="81:9" pos:end="81:15"><name pos:start="81:9" pos:end="81:12">envs</name><index pos:start="81:13" pos:end="81:15">[<expr pos:start="81:14" pos:end="81:14"><name pos:start="81:14" pos:end="81:14">i</name></expr>]</index></name> <operator pos:start="81:17" pos:end="81:17">=</operator> <name pos:start="81:19" pos:end="81:21">env</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="87:5" pos:end="87:22">/* allocate RAM */</comment>

    <if_stmt pos:start="89:5" pos:end="99:5"><if pos:start="89:5" pos:end="99:5">if <condition pos:start="89:8" pos:end="89:32">(<expr pos:start="89:9" pos:end="89:31"><name pos:start="89:9" pos:end="89:16">ram_size</name> <operator pos:start="89:18" pos:end="89:18">&gt;</operator> <operator pos:start="89:20" pos:end="89:20">(</operator><literal type="number" pos:start="89:21" pos:end="89:24">2047</literal> <operator pos:start="89:26" pos:end="89:27">&lt;&lt;</operator> <literal type="number" pos:start="89:29" pos:end="89:30">20</literal><operator pos:start="89:31" pos:end="89:31">)</operator></expr>)</condition> <block pos:start="89:34" pos:end="99:5">{<block_content pos:start="91:9" pos:end="97:16">

        <expr_stmt pos:start="91:9" pos:end="95:54"><expr pos:start="91:9" pos:end="95:53"><call pos:start="91:9" pos:end="95:53"><name pos:start="91:9" pos:end="91:15">fprintf</name><argument_list pos:start="91:16" pos:end="95:53">(<argument pos:start="91:17" pos:end="91:22"><expr pos:start="91:17" pos:end="91:22"><name pos:start="91:17" pos:end="91:22">stderr</name></expr></argument>,

                <argument pos:start="93:17" pos:end="93:82"><expr pos:start="93:17" pos:end="93:82"><literal type="string" pos:start="93:17" pos:end="93:82">"qemu: Too much memory for this machine: %d MB, maximum 2047 MB\n"</literal></expr></argument>,

                <argument pos:start="95:17" pos:end="95:52"><expr pos:start="95:17" pos:end="95:52"><operator pos:start="95:17" pos:end="95:17">(</operator><operator pos:start="95:18" pos:end="95:18">(</operator><name pos:start="95:19" pos:end="95:26">unsigned</name> <name pos:start="95:28" pos:end="95:30">int</name><operator pos:start="95:31" pos:end="95:31">)</operator><name pos:start="95:32" pos:end="95:39">ram_size</name> <operator pos:start="95:41" pos:end="95:41">/</operator> <operator pos:start="95:43" pos:end="95:43">(</operator><literal type="number" pos:start="95:44" pos:end="95:44">1</literal> <operator pos:start="95:46" pos:end="95:47">&lt;&lt;</operator> <literal type="number" pos:start="95:49" pos:end="95:50">20</literal><operator pos:start="95:51" pos:end="95:51">)</operator><operator pos:start="95:52" pos:end="95:52">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:16"><expr pos:start="97:9" pos:end="97:15"><call pos:start="97:9" pos:end="97:15"><name pos:start="97:9" pos:end="97:12">exit</name><argument_list pos:start="97:13" pos:end="97:15">(<argument pos:start="97:14" pos:end="97:14"><expr pos:start="97:14" pos:end="97:14"><literal type="number" pos:start="97:14" pos:end="97:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="103:5" pos:end="103:42"><expr pos:start="103:5" pos:end="103:41"><name pos:start="103:5" pos:end="103:14">ram_offset</name> <operator pos:start="103:16" pos:end="103:16">=</operator> <call pos:start="103:18" pos:end="103:41"><name pos:start="103:18" pos:end="103:31">qemu_ram_alloc</name><argument_list pos:start="103:32" pos:end="103:41">(<argument pos:start="103:33" pos:end="103:40"><expr pos:start="103:33" pos:end="103:40"><name pos:start="103:33" pos:end="103:40">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:58"><expr pos:start="105:5" pos:end="105:57"><call pos:start="105:5" pos:end="105:57"><name pos:start="105:5" pos:end="105:32">cpu_register_physical_memory</name><argument_list pos:start="105:33" pos:end="105:57">(<argument pos:start="105:34" pos:end="105:34"><expr pos:start="105:34" pos:end="105:34"><literal type="number" pos:start="105:34" pos:end="105:34">0</literal></expr></argument>, <argument pos:start="105:37" pos:end="105:44"><expr pos:start="105:37" pos:end="105:44"><name pos:start="105:37" pos:end="105:44">ram_size</name></expr></argument>, <argument pos:start="105:47" pos:end="105:56"><expr pos:start="105:47" pos:end="105:56"><name pos:start="105:47" pos:end="105:56">ram_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="109:5" pos:end="109:32">/* allocate and load BIOS */</comment>

    <expr_stmt pos:start="111:5" pos:end="111:44"><expr pos:start="111:5" pos:end="111:43"><name pos:start="111:5" pos:end="111:15">bios_offset</name> <operator pos:start="111:17" pos:end="111:17">=</operator> <call pos:start="111:19" pos:end="111:43"><name pos:start="111:19" pos:end="111:32">qemu_ram_alloc</name><argument_list pos:start="111:33" pos:end="111:43">(<argument pos:start="111:34" pos:end="111:42"><expr pos:start="111:34" pos:end="111:42"><name pos:start="111:34" pos:end="111:42">BIOS_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="113:5" pos:end="115:34"><if pos:start="113:5" pos:end="115:34">if <condition pos:start="113:8" pos:end="113:26">(<expr pos:start="113:9" pos:end="113:25"><name pos:start="113:9" pos:end="113:17">bios_name</name> <operator pos:start="113:19" pos:end="113:20">==</operator> <name pos:start="113:22" pos:end="113:25">NULL</name></expr>)</condition><block type="pseudo" pos:start="115:9" pos:end="115:34"><block_content pos:start="115:9" pos:end="115:34">

        <expr_stmt pos:start="115:9" pos:end="115:34"><expr pos:start="115:9" pos:end="115:33"><name pos:start="115:9" pos:end="115:17">bios_name</name> <operator pos:start="115:19" pos:end="115:19">=</operator> <name pos:start="115:21" pos:end="115:33">PROM_FILENAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:62"><expr pos:start="117:5" pos:end="117:61"><name pos:start="117:5" pos:end="117:12">filename</name> <operator pos:start="117:14" pos:end="117:14">=</operator> <call pos:start="117:16" pos:end="117:61"><name pos:start="117:16" pos:end="117:29">qemu_find_file</name><argument_list pos:start="117:30" pos:end="117:61">(<argument pos:start="117:31" pos:end="117:49"><expr pos:start="117:31" pos:end="117:49"><name pos:start="117:31" pos:end="117:49">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="117:52" pos:end="117:60"><expr pos:start="117:52" pos:end="117:60"><name pos:start="117:52" pos:end="117:60">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:81"><expr pos:start="119:5" pos:end="119:80"><call pos:start="119:5" pos:end="119:80"><name pos:start="119:5" pos:end="119:32">cpu_register_physical_memory</name><argument_list pos:start="119:33" pos:end="119:80">(<argument pos:start="119:34" pos:end="119:42"><expr pos:start="119:34" pos:end="119:42"><name pos:start="119:34" pos:end="119:42">PROM_ADDR</name></expr></argument>, <argument pos:start="119:45" pos:end="119:53"><expr pos:start="119:45" pos:end="119:53"><name pos:start="119:45" pos:end="119:53">BIOS_SIZE</name></expr></argument>, <argument pos:start="119:56" pos:end="119:79"><expr pos:start="119:56" pos:end="119:79"><name pos:start="119:56" pos:end="119:66">bios_offset</name> <operator pos:start="119:68" pos:end="119:68">|</operator> <name pos:start="119:70" pos:end="119:79">IO_MEM_ROM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="123:5" pos:end="123:29">/* Load OpenBIOS (ELF) */</comment>

    <if_stmt pos:start="125:5" pos:end="137:5"><if pos:start="125:5" pos:end="133:5">if <condition pos:start="125:8" pos:end="125:17">(<expr pos:start="125:9" pos:end="125:16"><name pos:start="125:9" pos:end="125:16">filename</name></expr>)</condition> <block pos:start="125:19" pos:end="133:5">{<block_content pos:start="127:9" pos:end="131:28">

        <expr_stmt pos:start="127:9" pos:end="129:50"><expr pos:start="127:9" pos:end="129:49"><name pos:start="127:9" pos:end="127:17">bios_size</name> <operator pos:start="127:19" pos:end="127:19">=</operator> <call pos:start="127:21" pos:end="129:49"><name pos:start="127:21" pos:end="127:28">load_elf</name><argument_list pos:start="127:29" pos:end="129:49">(<argument pos:start="127:30" pos:end="127:37"><expr pos:start="127:30" pos:end="127:37"><name pos:start="127:30" pos:end="127:37">filename</name></expr></argument>, <argument pos:start="127:40" pos:end="127:40"><expr pos:start="127:40" pos:end="127:40"><literal type="number" pos:start="127:40" pos:end="127:40">0</literal></expr></argument>, <argument pos:start="127:43" pos:end="127:46"><expr pos:start="127:43" pos:end="127:46"><name pos:start="127:43" pos:end="127:46">NULL</name></expr></argument>, <argument pos:start="127:49" pos:end="127:52"><expr pos:start="127:49" pos:end="127:52"><name pos:start="127:49" pos:end="127:52">NULL</name></expr></argument>, <argument pos:start="127:55" pos:end="127:58"><expr pos:start="127:55" pos:end="127:58"><name pos:start="127:55" pos:end="127:58">NULL</name></expr></argument>,

                               <argument pos:start="129:32" pos:end="129:32"><expr pos:start="129:32" pos:end="129:32"><literal type="number" pos:start="129:32" pos:end="129:32">1</literal></expr></argument>, <argument pos:start="129:35" pos:end="129:45"><expr pos:start="129:35" pos:end="129:45"><name pos:start="129:35" pos:end="129:45">ELF_MACHINE</name></expr></argument>, <argument pos:start="129:48" pos:end="129:48"><expr pos:start="129:48" pos:end="129:48"><literal type="number" pos:start="129:48" pos:end="129:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:28"><expr pos:start="131:9" pos:end="131:27"><call pos:start="131:9" pos:end="131:27"><name pos:start="131:9" pos:end="131:17">qemu_free</name><argument_list pos:start="131:18" pos:end="131:27">(<argument pos:start="131:19" pos:end="131:26"><expr pos:start="131:19" pos:end="131:26"><name pos:start="131:19" pos:end="131:26">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="133:7" pos:end="137:5">else <block pos:start="133:12" pos:end="137:5">{<block_content pos:start="135:9" pos:end="135:23">

        <expr_stmt pos:start="135:9" pos:end="135:23"><expr pos:start="135:9" pos:end="135:22"><name pos:start="135:9" pos:end="135:17">bios_size</name> <operator pos:start="135:19" pos:end="135:19">=</operator> <operator pos:start="135:21" pos:end="135:21">-</operator><literal type="number" pos:start="135:22" pos:end="135:22">1</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="139:5" pos:end="145:5"><if pos:start="139:5" pos:end="145:5">if <condition pos:start="139:8" pos:end="139:47">(<expr pos:start="139:9" pos:end="139:46"><name pos:start="139:9" pos:end="139:36"><name pos:start="139:9" pos:end="139:17">bios_size</name> <argument_list type="generic" pos:start="139:19" pos:end="139:36">&lt; <argument pos:start="139:21" pos:end="139:34"><expr pos:start="139:21" pos:end="139:34"><literal type="number" pos:start="139:21" pos:end="139:21">0</literal> <operator pos:start="139:23" pos:end="139:24">||</operator> <name pos:start="139:26" pos:end="139:34">bios_size</name></expr></argument> &gt;</argument_list></name> <name pos:start="139:38" pos:end="139:46">BIOS_SIZE</name></expr>)</condition> <block pos:start="139:49" pos:end="145:5">{<block_content pos:start="141:9" pos:end="143:16">

        <expr_stmt pos:start="141:9" pos:end="141:72"><expr pos:start="141:9" pos:end="141:71"><call pos:start="141:9" pos:end="141:71"><name pos:start="141:9" pos:end="141:16">hw_error</name><argument_list pos:start="141:17" pos:end="141:71">(<argument pos:start="141:18" pos:end="141:59"><expr pos:start="141:18" pos:end="141:59"><literal type="string" pos:start="141:18" pos:end="141:59">"qemu: could not load PowerPC bios '%s'\n"</literal></expr></argument>, <argument pos:start="141:62" pos:end="141:70"><expr pos:start="141:62" pos:end="141:70"><name pos:start="141:62" pos:end="141:70">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="143:9" pos:end="143:16"><expr pos:start="143:9" pos:end="143:15"><call pos:start="143:9" pos:end="143:15"><name pos:start="143:9" pos:end="143:12">exit</name><argument_list pos:start="143:13" pos:end="143:15">(<argument pos:start="143:14" pos:end="143:14"><expr pos:start="143:14" pos:end="143:14"><literal type="number" pos:start="143:14" pos:end="143:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="149:5" pos:end="149:36">/* allocate and load VGA BIOS */</comment>

    <expr_stmt pos:start="151:5" pos:end="151:52"><expr pos:start="151:5" pos:end="151:51"><name pos:start="151:5" pos:end="151:19">vga_bios_offset</name> <operator pos:start="151:21" pos:end="151:21">=</operator> <call pos:start="151:23" pos:end="151:51"><name pos:start="151:23" pos:end="151:36">qemu_ram_alloc</name><argument_list pos:start="151:37" pos:end="151:51">(<argument pos:start="151:38" pos:end="151:50"><expr pos:start="151:38" pos:end="151:50"><name pos:start="151:38" pos:end="151:50">VGA_BIOS_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="153:5" pos:end="153:53"><expr pos:start="153:5" pos:end="153:52"><name pos:start="153:5" pos:end="153:16">vga_bios_ptr</name> <operator pos:start="153:18" pos:end="153:18">=</operator> <call pos:start="153:20" pos:end="153:52"><name pos:start="153:20" pos:end="153:35">qemu_get_ram_ptr</name><argument_list pos:start="153:36" pos:end="153:52">(<argument pos:start="153:37" pos:end="153:51"><expr pos:start="153:37" pos:end="153:51"><name pos:start="153:37" pos:end="153:51">vga_bios_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="155:5" pos:end="155:69"><expr pos:start="155:5" pos:end="155:68"><name pos:start="155:5" pos:end="155:12">filename</name> <operator pos:start="155:14" pos:end="155:14">=</operator> <call pos:start="155:16" pos:end="155:68"><name pos:start="155:16" pos:end="155:29">qemu_find_file</name><argument_list pos:start="155:30" pos:end="155:68">(<argument pos:start="155:31" pos:end="155:49"><expr pos:start="155:31" pos:end="155:49"><name pos:start="155:31" pos:end="155:49">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="155:52" pos:end="155:67"><expr pos:start="155:52" pos:end="155:67"><name pos:start="155:52" pos:end="155:67">VGABIOS_FILENAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="157:5" pos:end="167:5"><if pos:start="157:5" pos:end="163:5">if <condition pos:start="157:8" pos:end="157:17">(<expr pos:start="157:9" pos:end="157:16"><name pos:start="157:9" pos:end="157:16">filename</name></expr>)</condition> <block pos:start="157:19" pos:end="163:5">{<block_content pos:start="159:9" pos:end="161:28">

        <expr_stmt pos:start="159:9" pos:end="159:63"><expr pos:start="159:9" pos:end="159:62"><name pos:start="159:9" pos:end="159:21">vga_bios_size</name> <operator pos:start="159:23" pos:end="159:23">=</operator> <call pos:start="159:25" pos:end="159:62"><name pos:start="159:25" pos:end="159:34">load_image</name><argument_list pos:start="159:35" pos:end="159:62">(<argument pos:start="159:36" pos:end="159:43"><expr pos:start="159:36" pos:end="159:43"><name pos:start="159:36" pos:end="159:43">filename</name></expr></argument>, <argument pos:start="159:46" pos:end="159:61"><expr pos:start="159:46" pos:end="159:61"><name pos:start="159:46" pos:end="159:57">vga_bios_ptr</name> <operator pos:start="159:59" pos:end="159:59">+</operator> <literal type="number" pos:start="159:61" pos:end="159:61">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="161:9" pos:end="161:28"><expr pos:start="161:9" pos:end="161:27"><call pos:start="161:9" pos:end="161:27"><name pos:start="161:9" pos:end="161:17">qemu_free</name><argument_list pos:start="161:18" pos:end="161:27">(<argument pos:start="161:19" pos:end="161:26"><expr pos:start="161:19" pos:end="161:26"><name pos:start="161:19" pos:end="161:26">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="163:7" pos:end="167:5">else <block pos:start="163:12" pos:end="167:5">{<block_content pos:start="165:9" pos:end="165:27">

        <expr_stmt pos:start="165:9" pos:end="165:27"><expr pos:start="165:9" pos:end="165:26"><name pos:start="165:9" pos:end="165:21">vga_bios_size</name> <operator pos:start="165:23" pos:end="165:23">=</operator> <operator pos:start="165:25" pos:end="165:25">-</operator><literal type="number" pos:start="165:26" pos:end="165:26">1</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="169:5" pos:end="205:5"><if pos:start="169:5" pos:end="179:5">if <condition pos:start="169:8" pos:end="169:26">(<expr pos:start="169:9" pos:end="169:25"><name pos:start="169:9" pos:end="169:21">vga_bios_size</name> <operator pos:start="169:23" pos:end="169:23">&lt;</operator> <literal type="number" pos:start="169:25" pos:end="169:25">0</literal></expr>)</condition> <block pos:start="169:28" pos:end="179:5">{<block_content pos:start="173:9" pos:end="177:26">

        <comment type="block" pos:start="171:9" pos:end="171:54">/* if no bios is present, we can still work */</comment>

        <expr_stmt pos:start="173:9" pos:end="175:34"><expr pos:start="173:9" pos:end="175:33"><call pos:start="173:9" pos:end="175:33"><name pos:start="173:9" pos:end="173:15">fprintf</name><argument_list pos:start="173:16" pos:end="175:33">(<argument pos:start="173:17" pos:end="173:22"><expr pos:start="173:17" pos:end="173:22"><name pos:start="173:17" pos:end="173:22">stderr</name></expr></argument>, <argument pos:start="173:25" pos:end="173:71"><expr pos:start="173:25" pos:end="173:71"><literal type="string" pos:start="173:25" pos:end="173:71">"qemu: warning: could not load VGA bios '%s'\n"</literal></expr></argument>,

                <argument pos:start="175:17" pos:end="175:32"><expr pos:start="175:17" pos:end="175:32"><name pos:start="175:17" pos:end="175:32">VGABIOS_FILENAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="177:9" pos:end="177:26"><expr pos:start="177:9" pos:end="177:25"><name pos:start="177:9" pos:end="177:21">vga_bios_size</name> <operator pos:start="177:23" pos:end="177:23">=</operator> <literal type="number" pos:start="177:25" pos:end="177:25">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="179:7" pos:end="205:5">else <block pos:start="179:12" pos:end="205:5">{<block_content pos:start="185:9" pos:end="203:29">

        <comment type="block" pos:start="181:9" pos:end="183:22">/* set a specific header (XXX: find real Apple format for NDRV

           drivers) */</comment>

        <expr_stmt pos:start="185:9" pos:end="185:30"><expr pos:start="185:9" pos:end="185:29"><name pos:start="185:9" pos:end="185:23"><name pos:start="185:9" pos:end="185:20">vga_bios_ptr</name><index pos:start="185:21" pos:end="185:23">[<expr pos:start="185:22" pos:end="185:22"><literal type="number" pos:start="185:22" pos:end="185:22">0</literal></expr>]</index></name> <operator pos:start="185:25" pos:end="185:25">=</operator> <literal type="char" pos:start="185:27" pos:end="185:29">'N'</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="187:9" pos:end="187:30"><expr pos:start="187:9" pos:end="187:29"><name pos:start="187:9" pos:end="187:23"><name pos:start="187:9" pos:end="187:20">vga_bios_ptr</name><index pos:start="187:21" pos:end="187:23">[<expr pos:start="187:22" pos:end="187:22"><literal type="number" pos:start="187:22" pos:end="187:22">1</literal></expr>]</index></name> <operator pos:start="187:25" pos:end="187:25">=</operator> <literal type="char" pos:start="187:27" pos:end="187:29">'D'</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="189:9" pos:end="189:30"><expr pos:start="189:9" pos:end="189:29"><name pos:start="189:9" pos:end="189:23"><name pos:start="189:9" pos:end="189:20">vga_bios_ptr</name><index pos:start="189:21" pos:end="189:23">[<expr pos:start="189:22" pos:end="189:22"><literal type="number" pos:start="189:22" pos:end="189:22">2</literal></expr>]</index></name> <operator pos:start="189:25" pos:end="189:25">=</operator> <literal type="char" pos:start="189:27" pos:end="189:29">'R'</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="191:9" pos:end="191:30"><expr pos:start="191:9" pos:end="191:29"><name pos:start="191:9" pos:end="191:23"><name pos:start="191:9" pos:end="191:20">vga_bios_ptr</name><index pos:start="191:21" pos:end="191:23">[<expr pos:start="191:22" pos:end="191:22"><literal type="number" pos:start="191:22" pos:end="191:22">3</literal></expr>]</index></name> <operator pos:start="191:25" pos:end="191:25">=</operator> <literal type="char" pos:start="191:27" pos:end="191:29">'V'</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="193:9" pos:end="193:68"><expr pos:start="193:9" pos:end="193:67"><call pos:start="193:9" pos:end="193:67"><name pos:start="193:9" pos:end="193:20">cpu_to_be32w</name><argument_list pos:start="193:21" pos:end="193:67">(<argument pos:start="193:22" pos:end="193:51"><expr pos:start="193:22" pos:end="193:51"><operator pos:start="193:22" pos:end="193:22">(</operator><name pos:start="193:23" pos:end="193:30">uint32_t</name> <operator pos:start="193:32" pos:end="193:32">*</operator><operator pos:start="193:33" pos:end="193:33">)</operator><operator pos:start="193:34" pos:end="193:34">(</operator><name pos:start="193:35" pos:end="193:46">vga_bios_ptr</name> <operator pos:start="193:48" pos:end="193:48">+</operator> <literal type="number" pos:start="193:50" pos:end="193:50">4</literal><operator pos:start="193:51" pos:end="193:51">)</operator></expr></argument>, <argument pos:start="193:54" pos:end="193:66"><expr pos:start="193:54" pos:end="193:66"><name pos:start="193:54" pos:end="193:66">vga_bios_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="195:9" pos:end="195:27"><expr pos:start="195:9" pos:end="195:26"><name pos:start="195:9" pos:end="195:21">vga_bios_size</name> <operator pos:start="195:23" pos:end="195:24">+=</operator> <literal type="number" pos:start="195:26" pos:end="195:26">8</literal></expr>;</expr_stmt>



        <comment type="block" pos:start="199:9" pos:end="199:36">/* Round to page boundary */</comment>

        <expr_stmt pos:start="201:9" pos:end="203:29"><expr pos:start="201:9" pos:end="203:28"><name pos:start="201:9" pos:end="201:21">vga_bios_size</name> <operator pos:start="201:23" pos:end="201:23">=</operator> <operator pos:start="201:25" pos:end="201:25">(</operator><name pos:start="201:26" pos:end="201:38">vga_bios_size</name> <operator pos:start="201:40" pos:end="201:40">+</operator> <name pos:start="201:42" pos:end="201:57">TARGET_PAGE_SIZE</name> <operator pos:start="201:59" pos:end="201:59">-</operator> <literal type="number" pos:start="201:61" pos:end="201:61">1</literal><operator pos:start="201:62" pos:end="201:62">)</operator> <operator pos:start="201:64" pos:end="201:64">&amp;</operator>

            <name pos:start="203:13" pos:end="203:28">TARGET_PAGE_MASK</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="209:5" pos:end="357:5"><if pos:start="209:5" pos:end="303:5">if <condition pos:start="209:8" pos:end="209:19">(<expr pos:start="209:9" pos:end="209:18"><name pos:start="209:9" pos:end="209:18">linux_boot</name></expr>)</condition> <block pos:start="209:21" pos:end="303:5">{<block_content pos:start="211:9" pos:end="301:30">

        <decl_stmt pos:start="211:9" pos:end="211:29"><decl pos:start="211:9" pos:end="211:28"><type pos:start="211:9" pos:end="211:16"><name pos:start="211:9" pos:end="211:16">uint64_t</name></type> <name pos:start="211:18" pos:end="211:24">lowaddr</name> <init pos:start="211:26" pos:end="211:28">= <expr pos:start="211:28" pos:end="211:28"><literal type="number" pos:start="211:28" pos:end="211:28">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="213:9" pos:end="218:0"><decl pos:start="213:9" pos:end="213:24"><type pos:start="213:9" pos:end="213:11"><name pos:start="213:9" pos:end="213:11">int</name></type> <name pos:start="213:13" pos:end="213:24">bswap_needed</name></decl>;</decl_stmt>



<cpp:ifdef pos:start="217:1" pos:end="217:19">#<cpp:directive pos:start="217:2" pos:end="217:6">ifdef</cpp:directive> <name pos:start="217:8" pos:end="217:19">BSWAP_NEEDED</name></cpp:ifdef>

        <expr_stmt pos:start="219:9" pos:end="222:0"><expr pos:start="219:9" pos:end="219:24"><name pos:start="219:9" pos:end="219:20">bswap_needed</name> <operator pos:start="219:22" pos:end="219:22">=</operator> <literal type="number" pos:start="219:24" pos:end="219:24">1</literal></expr>;</expr_stmt>

<cpp:else pos:start="221:1" pos:end="221:5">#<cpp:directive pos:start="221:2" pos:end="221:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="223:9" pos:end="226:0"><expr pos:start="223:9" pos:end="223:24"><name pos:start="223:9" pos:end="223:20">bswap_needed</name> <operator pos:start="223:22" pos:end="223:22">=</operator> <literal type="number" pos:start="223:24" pos:end="223:24">0</literal></expr>;</expr_stmt>

<cpp:endif pos:start="225:1" pos:end="225:6">#<cpp:directive pos:start="225:2" pos:end="225:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="227:9" pos:end="227:39"><expr pos:start="227:9" pos:end="227:38"><name pos:start="227:9" pos:end="227:19">kernel_base</name> <operator pos:start="227:21" pos:end="227:21">=</operator> <name pos:start="227:23" pos:end="227:38">KERNEL_LOAD_ADDR</name></expr>;</expr_stmt>

        <comment type="block" pos:start="229:9" pos:end="233:73">/* Now we can load the kernel. The first step tries to load the kernel

           supposing PhysAddr = 0x00000000. If that was wrong the kernel is

           loaded again, the new PhysAddr being computed from lowaddr. */</comment>

        <expr_stmt pos:start="235:9" pos:end="237:50"><expr pos:start="235:9" pos:end="237:49"><name pos:start="235:9" pos:end="235:19">kernel_size</name> <operator pos:start="235:21" pos:end="235:21">=</operator> <call pos:start="235:23" pos:end="237:49"><name pos:start="235:23" pos:end="235:30">load_elf</name><argument_list pos:start="235:31" pos:end="237:49">(<argument pos:start="235:32" pos:end="235:46"><expr pos:start="235:32" pos:end="235:46"><name pos:start="235:32" pos:end="235:46">kernel_filename</name></expr></argument>, <argument pos:start="235:49" pos:end="235:59"><expr pos:start="235:49" pos:end="235:59"><name pos:start="235:49" pos:end="235:59">kernel_base</name></expr></argument>, <argument pos:start="235:62" pos:end="235:65"><expr pos:start="235:62" pos:end="235:65"><name pos:start="235:62" pos:end="235:65">NULL</name></expr></argument>, <argument pos:start="235:68" pos:end="235:75"><expr pos:start="235:68" pos:end="235:75"><operator pos:start="235:68" pos:end="235:68">&amp;</operator><name pos:start="235:69" pos:end="235:75">lowaddr</name></expr></argument>, <argument pos:start="235:78" pos:end="235:81"><expr pos:start="235:78" pos:end="235:81"><name pos:start="235:78" pos:end="235:81">NULL</name></expr></argument>,

                               <argument pos:start="237:32" pos:end="237:32"><expr pos:start="237:32" pos:end="237:32"><literal type="number" pos:start="237:32" pos:end="237:32">1</literal></expr></argument>, <argument pos:start="237:35" pos:end="237:45"><expr pos:start="237:35" pos:end="237:45"><name pos:start="237:35" pos:end="237:45">ELF_MACHINE</name></expr></argument>, <argument pos:start="237:48" pos:end="237:48"><expr pos:start="237:48" pos:end="237:48"><literal type="number" pos:start="237:48" pos:end="237:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="239:9" pos:end="245:9"><if pos:start="239:9" pos:end="245:9">if <condition pos:start="239:12" pos:end="239:59">(<expr pos:start="239:13" pos:end="239:58"><name pos:start="239:13" pos:end="239:23">kernel_size</name> <operator pos:start="239:25" pos:end="239:25">&gt;</operator> <literal type="number" pos:start="239:27" pos:end="239:27">0</literal> <operator pos:start="239:29" pos:end="239:30">&amp;&amp;</operator> <name pos:start="239:32" pos:end="239:38">lowaddr</name> <operator pos:start="239:40" pos:end="239:41">!=</operator> <name pos:start="239:43" pos:end="239:58">KERNEL_LOAD_ADDR</name></expr>)</condition> <block pos:start="239:61" pos:end="245:9">{<block_content pos:start="241:13" pos:end="243:72">

            <expr_stmt pos:start="241:13" pos:end="243:72"><expr pos:start="241:13" pos:end="243:71"><name pos:start="241:13" pos:end="241:23">kernel_size</name> <operator pos:start="241:25" pos:end="241:25">=</operator> <call pos:start="241:27" pos:end="243:71"><name pos:start="241:27" pos:end="241:34">load_elf</name><argument_list pos:start="241:35" pos:end="243:71">(<argument pos:start="241:36" pos:end="241:50"><expr pos:start="241:36" pos:end="241:50"><name pos:start="241:36" pos:end="241:50">kernel_filename</name></expr></argument>, <argument pos:start="241:53" pos:end="241:79"><expr pos:start="241:53" pos:end="241:79"><operator pos:start="241:53" pos:end="241:53">(</operator><literal type="number" pos:start="241:54" pos:end="241:54">2</literal> <operator pos:start="241:56" pos:end="241:56">*</operator> <name pos:start="241:58" pos:end="241:68">kernel_base</name><operator pos:start="241:69" pos:end="241:69">)</operator> <operator pos:start="241:71" pos:end="241:71">-</operator> <name pos:start="241:73" pos:end="241:79">lowaddr</name></expr></argument>,

                                   <argument pos:start="243:36" pos:end="243:39"><expr pos:start="243:36" pos:end="243:39"><name pos:start="243:36" pos:end="243:39">NULL</name></expr></argument>, <argument pos:start="243:42" pos:end="243:45"><expr pos:start="243:42" pos:end="243:45"><name pos:start="243:42" pos:end="243:45">NULL</name></expr></argument>, <argument pos:start="243:48" pos:end="243:51"><expr pos:start="243:48" pos:end="243:51"><name pos:start="243:48" pos:end="243:51">NULL</name></expr></argument>, <argument pos:start="243:54" pos:end="243:54"><expr pos:start="243:54" pos:end="243:54"><literal type="number" pos:start="243:54" pos:end="243:54">1</literal></expr></argument>, <argument pos:start="243:57" pos:end="243:67"><expr pos:start="243:57" pos:end="243:67"><name pos:start="243:57" pos:end="243:67">ELF_MACHINE</name></expr></argument>, <argument pos:start="243:70" pos:end="243:70"><expr pos:start="243:70" pos:end="243:70"><literal type="number" pos:start="243:70" pos:end="243:70">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="247:9" pos:end="253:54"><if pos:start="247:9" pos:end="253:54">if <condition pos:start="247:12" pos:end="247:28">(<expr pos:start="247:13" pos:end="247:27"><name pos:start="247:13" pos:end="247:23">kernel_size</name> <operator pos:start="247:25" pos:end="247:25">&lt;</operator> <literal type="number" pos:start="247:27" pos:end="247:27">0</literal></expr>)</condition><block type="pseudo" pos:start="249:13" pos:end="253:54"><block_content pos:start="249:13" pos:end="253:54">

            <expr_stmt pos:start="249:13" pos:end="253:54"><expr pos:start="249:13" pos:end="253:53"><name pos:start="249:13" pos:end="249:23">kernel_size</name> <operator pos:start="249:25" pos:end="249:25">=</operator> <call pos:start="249:27" pos:end="253:53"><name pos:start="249:27" pos:end="249:35">load_aout</name><argument_list pos:start="249:36" pos:end="253:53">(<argument pos:start="249:37" pos:end="249:51"><expr pos:start="249:37" pos:end="249:51"><name pos:start="249:37" pos:end="249:51">kernel_filename</name></expr></argument>, <argument pos:start="249:54" pos:end="249:64"><expr pos:start="249:54" pos:end="249:64"><name pos:start="249:54" pos:end="249:64">kernel_base</name></expr></argument>,

                                    <argument pos:start="251:37" pos:end="251:58"><expr pos:start="251:37" pos:end="251:58"><name pos:start="251:37" pos:end="251:44">ram_size</name> <operator pos:start="251:46" pos:end="251:46">-</operator> <name pos:start="251:48" pos:end="251:58">kernel_base</name></expr></argument>, <argument pos:start="251:61" pos:end="251:72"><expr pos:start="251:61" pos:end="251:72"><name pos:start="251:61" pos:end="251:72">bswap_needed</name></expr></argument>,

                                    <argument pos:start="253:37" pos:end="253:52"><expr pos:start="253:37" pos:end="253:52"><name pos:start="253:37" pos:end="253:52">TARGET_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="255:9" pos:end="261:70"><if pos:start="255:9" pos:end="261:70">if <condition pos:start="255:12" pos:end="255:28">(<expr pos:start="255:13" pos:end="255:27"><name pos:start="255:13" pos:end="255:23">kernel_size</name> <operator pos:start="255:25" pos:end="255:25">&lt;</operator> <literal type="number" pos:start="255:27" pos:end="255:27">0</literal></expr>)</condition><block type="pseudo" pos:start="257:13" pos:end="261:70"><block_content pos:start="257:13" pos:end="261:70">

            <expr_stmt pos:start="257:13" pos:end="261:70"><expr pos:start="257:13" pos:end="261:69"><name pos:start="257:13" pos:end="257:23">kernel_size</name> <operator pos:start="257:25" pos:end="257:25">=</operator> <call pos:start="257:27" pos:end="261:69"><name pos:start="257:27" pos:end="257:45">load_image_targphys</name><argument_list pos:start="257:46" pos:end="261:69">(<argument pos:start="257:47" pos:end="257:61"><expr pos:start="257:47" pos:end="257:61"><name pos:start="257:47" pos:end="257:61">kernel_filename</name></expr></argument>,

                                              <argument pos:start="259:47" pos:end="259:57"><expr pos:start="259:47" pos:end="259:57"><name pos:start="259:47" pos:end="259:57">kernel_base</name></expr></argument>,

                                              <argument pos:start="261:47" pos:end="261:68"><expr pos:start="261:47" pos:end="261:68"><name pos:start="261:47" pos:end="261:54">ram_size</name> <operator pos:start="261:56" pos:end="261:56">-</operator> <name pos:start="261:58" pos:end="261:68">kernel_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="263:9" pos:end="271:9"><if pos:start="263:9" pos:end="271:9">if <condition pos:start="263:12" pos:end="263:28">(<expr pos:start="263:13" pos:end="263:27"><name pos:start="263:13" pos:end="263:23">kernel_size</name> <operator pos:start="263:25" pos:end="263:25">&lt;</operator> <literal type="number" pos:start="263:27" pos:end="263:27">0</literal></expr>)</condition> <block pos:start="263:30" pos:end="271:9">{<block_content pos:start="265:13" pos:end="269:20">

            <expr_stmt pos:start="265:13" pos:end="267:39"><expr pos:start="265:13" pos:end="267:38"><call pos:start="265:13" pos:end="267:38"><name pos:start="265:13" pos:end="265:20">hw_error</name><argument_list pos:start="265:21" pos:end="267:38">(<argument pos:start="265:22" pos:end="265:57"><expr pos:start="265:22" pos:end="265:57"><literal type="string" pos:start="265:22" pos:end="265:57">"qemu: could not load kernel '%s'\n"</literal></expr></argument>,

                      <argument pos:start="267:23" pos:end="267:37"><expr pos:start="267:23" pos:end="267:37"><name pos:start="267:23" pos:end="267:37">kernel_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="269:13" pos:end="269:20"><expr pos:start="269:13" pos:end="269:19"><call pos:start="269:13" pos:end="269:19"><name pos:start="269:13" pos:end="269:16">exit</name><argument_list pos:start="269:17" pos:end="269:19">(<argument pos:start="269:18" pos:end="269:18"><expr pos:start="269:18" pos:end="269:18"><literal type="number" pos:start="269:18" pos:end="269:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="273:9" pos:end="273:25">/* load initrd */</comment>

        <if_stmt pos:start="275:9" pos:end="299:9"><if pos:start="275:9" pos:end="293:9">if <condition pos:start="275:12" pos:end="275:28">(<expr pos:start="275:13" pos:end="275:27"><name pos:start="275:13" pos:end="275:27">initrd_filename</name></expr>)</condition> <block pos:start="275:30" pos:end="293:9">{<block_content pos:start="277:13" pos:end="291:13">

            <expr_stmt pos:start="277:13" pos:end="277:43"><expr pos:start="277:13" pos:end="277:42"><name pos:start="277:13" pos:end="277:23">initrd_base</name> <operator pos:start="277:25" pos:end="277:25">=</operator> <name pos:start="277:27" pos:end="277:42">INITRD_LOAD_ADDR</name></expr>;</expr_stmt>

            <expr_stmt pos:start="279:13" pos:end="281:70"><expr pos:start="279:13" pos:end="281:69"><name pos:start="279:13" pos:end="279:23">initrd_size</name> <operator pos:start="279:25" pos:end="279:25">=</operator> <call pos:start="279:27" pos:end="281:69"><name pos:start="279:27" pos:end="279:45">load_image_targphys</name><argument_list pos:start="279:46" pos:end="281:69">(<argument pos:start="279:47" pos:end="279:61"><expr pos:start="279:47" pos:end="279:61"><name pos:start="279:47" pos:end="279:61">initrd_filename</name></expr></argument>, <argument pos:start="279:64" pos:end="279:74"><expr pos:start="279:64" pos:end="279:74"><name pos:start="279:64" pos:end="279:74">initrd_base</name></expr></argument>,

                                              <argument pos:start="281:47" pos:end="281:68"><expr pos:start="281:47" pos:end="281:68"><name pos:start="281:47" pos:end="281:54">ram_size</name> <operator pos:start="281:56" pos:end="281:56">-</operator> <name pos:start="281:58" pos:end="281:68">initrd_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="283:13" pos:end="291:13"><if pos:start="283:13" pos:end="291:13">if <condition pos:start="283:16" pos:end="283:32">(<expr pos:start="283:17" pos:end="283:31"><name pos:start="283:17" pos:end="283:27">initrd_size</name> <operator pos:start="283:29" pos:end="283:29">&lt;</operator> <literal type="number" pos:start="283:31" pos:end="283:31">0</literal></expr>)</condition> <block pos:start="283:34" pos:end="291:13">{<block_content pos:start="285:17" pos:end="289:24">

                <expr_stmt pos:start="285:17" pos:end="287:42"><expr pos:start="285:17" pos:end="287:41"><call pos:start="285:17" pos:end="287:41"><name pos:start="285:17" pos:end="285:24">hw_error</name><argument_list pos:start="285:25" pos:end="287:41">(<argument pos:start="285:26" pos:end="285:71"><expr pos:start="285:26" pos:end="285:71"><literal type="string" pos:start="285:26" pos:end="285:71">"qemu: could not load initial ram disk '%s'\n"</literal></expr></argument>,

                         <argument pos:start="287:26" pos:end="287:40"><expr pos:start="287:26" pos:end="287:40"><name pos:start="287:26" pos:end="287:40">initrd_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="289:17" pos:end="289:24"><expr pos:start="289:17" pos:end="289:23"><call pos:start="289:17" pos:end="289:23"><name pos:start="289:17" pos:end="289:20">exit</name><argument_list pos:start="289:21" pos:end="289:23">(<argument pos:start="289:22" pos:end="289:22"><expr pos:start="289:22" pos:end="289:22"><literal type="number" pos:start="289:22" pos:end="289:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="293:11" pos:end="299:9">else <block pos:start="293:16" pos:end="299:9">{<block_content pos:start="295:13" pos:end="297:28">

            <expr_stmt pos:start="295:13" pos:end="295:28"><expr pos:start="295:13" pos:end="295:27"><name pos:start="295:13" pos:end="295:23">initrd_base</name> <operator pos:start="295:25" pos:end="295:25">=</operator> <literal type="number" pos:start="295:27" pos:end="295:27">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="297:13" pos:end="297:28"><expr pos:start="297:13" pos:end="297:27"><name pos:start="297:13" pos:end="297:23">initrd_size</name> <operator pos:start="297:25" pos:end="297:25">=</operator> <literal type="number" pos:start="297:27" pos:end="297:27">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="301:9" pos:end="301:30"><expr pos:start="301:9" pos:end="301:29"><name pos:start="301:9" pos:end="301:23">ppc_boot_device</name> <operator pos:start="301:25" pos:end="301:25">=</operator> <literal type="char" pos:start="301:27" pos:end="301:29">'m'</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="303:7" pos:end="357:5">else <block pos:start="303:12" pos:end="357:5">{<block_content pos:start="305:9" pos:end="355:9">

        <expr_stmt pos:start="305:9" pos:end="305:24"><expr pos:start="305:9" pos:end="305:23"><name pos:start="305:9" pos:end="305:19">kernel_base</name> <operator pos:start="305:21" pos:end="305:21">=</operator> <literal type="number" pos:start="305:23" pos:end="305:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="307:9" pos:end="307:24"><expr pos:start="307:9" pos:end="307:23"><name pos:start="307:9" pos:end="307:19">kernel_size</name> <operator pos:start="307:21" pos:end="307:21">=</operator> <literal type="number" pos:start="307:23" pos:end="307:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="309:9" pos:end="309:24"><expr pos:start="309:9" pos:end="309:23"><name pos:start="309:9" pos:end="309:19">initrd_base</name> <operator pos:start="309:21" pos:end="309:21">=</operator> <literal type="number" pos:start="309:23" pos:end="309:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="311:9" pos:end="311:24"><expr pos:start="311:9" pos:end="311:23"><name pos:start="311:9" pos:end="311:19">initrd_size</name> <operator pos:start="311:21" pos:end="311:21">=</operator> <literal type="number" pos:start="311:23" pos:end="311:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="313:9" pos:end="313:31"><expr pos:start="313:9" pos:end="313:30"><name pos:start="313:9" pos:end="313:23">ppc_boot_device</name> <operator pos:start="313:25" pos:end="313:25">=</operator> <literal type="char" pos:start="313:27" pos:end="313:30">'\0'</literal></expr>;</expr_stmt>

        <for pos:start="315:9" pos:end="347:9">for <control pos:start="315:13" pos:end="315:48">(<init pos:start="315:14" pos:end="315:19"><expr pos:start="315:14" pos:end="315:18"><name pos:start="315:14" pos:end="315:14">i</name> <operator pos:start="315:16" pos:end="315:16">=</operator> <literal type="number" pos:start="315:18" pos:end="315:18">0</literal></expr>;</init> <condition pos:start="315:21" pos:end="315:43"><expr pos:start="315:21" pos:end="315:42"><name pos:start="315:21" pos:end="315:34"><name pos:start="315:21" pos:end="315:31">boot_device</name><index pos:start="315:32" pos:end="315:34">[<expr pos:start="315:33" pos:end="315:33"><name pos:start="315:33" pos:end="315:33">i</name></expr>]</index></name> <operator pos:start="315:36" pos:end="315:37">!=</operator> <literal type="char" pos:start="315:39" pos:end="315:42">'\0'</literal></expr>;</condition> <incr pos:start="315:45" pos:end="315:47"><expr pos:start="315:45" pos:end="315:47"><name pos:start="315:45" pos:end="315:45">i</name><operator pos:start="315:46" pos:end="315:47">++</operator></expr></incr>)</control> <block pos:start="315:50" pos:end="347:9">{<block_content pos:start="337:13" pos:end="346:0">

            <comment type="block" pos:start="317:13" pos:end="323:15">/* TOFIX: for now, the second IDE channel is not properly

             *        used by OHW. The Mac floppy disk are not emulated.

             *        For now, OHW cannot boot from the network.

             */</comment>

<cpp:if pos:start="325:1" pos:end="325:5">#<cpp:directive pos:start="325:2" pos:end="325:3">if</cpp:directive> <expr pos:start="325:5" pos:end="325:5"><literal type="number" pos:start="325:5" pos:end="325:5">0</literal></expr></cpp:if>

            if (boot_device[i] &gt;= 'a' &amp;&amp; boot_device[i] &lt;= 'f') {

                ppc_boot_device = boot_device[i];

                break;

            }

<cpp:else pos:start="335:1" pos:end="335:5">#<cpp:directive pos:start="335:2" pos:end="335:5">else</cpp:directive></cpp:else>

            <if_stmt pos:start="337:13" pos:end="346:0"><if pos:start="337:13" pos:end="346:0">if <condition pos:start="337:16" pos:end="337:63">(<expr pos:start="337:17" pos:end="337:62"><name pos:start="337:17" pos:end="337:30"><name pos:start="337:17" pos:end="337:27">boot_device</name><index pos:start="337:28" pos:end="337:30">[<expr pos:start="337:29" pos:end="337:29"><name pos:start="337:29" pos:end="337:29">i</name></expr>]</index></name> <operator pos:start="337:32" pos:end="337:33">&gt;=</operator> <literal type="char" pos:start="337:35" pos:end="337:37">'c'</literal> <operator pos:start="337:39" pos:end="337:40">&amp;&amp;</operator> <name pos:start="337:42" pos:end="337:55"><name pos:start="337:42" pos:end="337:52">boot_device</name><index pos:start="337:53" pos:end="337:55">[<expr pos:start="337:54" pos:end="337:54"><name pos:start="337:54" pos:end="337:54">i</name></expr>]</index></name> <operator pos:start="337:57" pos:end="337:58">&lt;=</operator> <literal type="char" pos:start="337:60" pos:end="337:62">'d'</literal></expr>)</condition> <block pos:start="337:65" pos:end="346:0">{<block_content pos:start="339:17" pos:end="341:22">

                <expr_stmt pos:start="339:17" pos:end="339:49"><expr pos:start="339:17" pos:end="339:48"><name pos:start="339:17" pos:end="339:31">ppc_boot_device</name> <operator pos:start="339:33" pos:end="339:33">=</operator> <name pos:start="339:35" pos:end="339:48"><name pos:start="339:35" pos:end="339:45">boot_device</name><index pos:start="339:46" pos:end="339:48">[<expr pos:start="339:47" pos:end="339:47"><name pos:start="339:47" pos:end="339:47">i</name></expr>]</index></name></expr>;</expr_stmt>

                <break pos:start="341:17" pos:end="341:22">break;</break>

            </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="345:1" pos:end="345:6">#<cpp:directive pos:start="345:2" pos:end="345:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block></for>

        <if_stmt pos:start="349:9" pos:end="355:9"><if pos:start="349:9" pos:end="355:9">if <condition pos:start="349:12" pos:end="349:36">(<expr pos:start="349:13" pos:end="349:35"><name pos:start="349:13" pos:end="349:27">ppc_boot_device</name> <operator pos:start="349:29" pos:end="349:30">==</operator> <literal type="char" pos:start="349:32" pos:end="349:35">'\0'</literal></expr>)</condition> <block pos:start="349:38" pos:end="355:9">{<block_content pos:start="351:13" pos:end="353:20">

            <expr_stmt pos:start="351:13" pos:end="351:75"><expr pos:start="351:13" pos:end="351:74"><call pos:start="351:13" pos:end="351:74"><name pos:start="351:13" pos:end="351:19">fprintf</name><argument_list pos:start="351:20" pos:end="351:74">(<argument pos:start="351:21" pos:end="351:26"><expr pos:start="351:21" pos:end="351:26"><name pos:start="351:21" pos:end="351:26">stderr</name></expr></argument>, <argument pos:start="351:29" pos:end="351:73"><expr pos:start="351:29" pos:end="351:73"><literal type="string" pos:start="351:29" pos:end="351:73">"No valid boot device for G3 Beige machine\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="353:13" pos:end="353:20"><expr pos:start="353:13" pos:end="353:19"><call pos:start="353:13" pos:end="353:19"><name pos:start="353:13" pos:end="353:16">exit</name><argument_list pos:start="353:17" pos:end="353:19">(<argument pos:start="353:18" pos:end="353:18"><expr pos:start="353:18" pos:end="353:18"><literal type="number" pos:start="353:18" pos:end="353:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="361:5" pos:end="361:30"><expr pos:start="361:5" pos:end="361:29"><name pos:start="361:5" pos:end="361:16">isa_mem_base</name> <operator pos:start="361:18" pos:end="361:18">=</operator> <literal type="number" pos:start="361:20" pos:end="361:29">0x80000000</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="365:5" pos:end="365:39">/* Register 2 MB of ISA IO space */</comment>

    <expr_stmt pos:start="367:5" pos:end="367:42"><expr pos:start="367:5" pos:end="367:41"><call pos:start="367:5" pos:end="367:41"><name pos:start="367:5" pos:end="367:17">isa_mmio_init</name><argument_list pos:start="367:18" pos:end="367:41">(<argument pos:start="367:19" pos:end="367:28"><expr pos:start="367:19" pos:end="367:28"><literal type="number" pos:start="367:19" pos:end="367:28">0xfe000000</literal></expr></argument>, <argument pos:start="367:31" pos:end="367:40"><expr pos:start="367:31" pos:end="367:40"><literal type="number" pos:start="367:31" pos:end="367:40">0x00200000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="371:5" pos:end="371:61">/* XXX: we register only 1 output pin for heathrow PIC */</comment>

    <expr_stmt pos:start="373:5" pos:end="373:64"><expr pos:start="373:5" pos:end="373:63"><name pos:start="373:5" pos:end="373:17">heathrow_irqs</name> <operator pos:start="373:19" pos:end="373:19">=</operator> <call pos:start="373:21" pos:end="373:63"><name pos:start="373:21" pos:end="373:32">qemu_mallocz</name><argument_list pos:start="373:33" pos:end="373:63">(<argument pos:start="373:34" pos:end="373:62"><expr pos:start="373:34" pos:end="373:62"><name pos:start="373:34" pos:end="373:41">smp_cpus</name> <operator pos:start="373:43" pos:end="373:43">*</operator> <sizeof pos:start="373:45" pos:end="373:62">sizeof<argument_list pos:start="373:51" pos:end="373:62">(<argument pos:start="373:52" pos:end="373:61"><expr pos:start="373:52" pos:end="373:61"><name pos:start="373:52" pos:end="373:59">qemu_irq</name> <operator pos:start="373:61" pos:end="373:61">*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="375:5" pos:end="377:54"><expr pos:start="375:5" pos:end="377:53"><name pos:start="375:5" pos:end="375:20"><name pos:start="375:5" pos:end="375:17">heathrow_irqs</name><index pos:start="375:18" pos:end="375:20">[<expr pos:start="375:19" pos:end="375:19"><literal type="number" pos:start="375:19" pos:end="375:19">0</literal></expr>]</index></name> <operator pos:start="375:22" pos:end="375:22">=</operator>

        <call pos:start="377:9" pos:end="377:53"><name pos:start="377:9" pos:end="377:20">qemu_mallocz</name><argument_list pos:start="377:21" pos:end="377:53">(<argument pos:start="377:22" pos:end="377:52"><expr pos:start="377:22" pos:end="377:52"><name pos:start="377:22" pos:end="377:29">smp_cpus</name> <operator pos:start="377:31" pos:end="377:31">*</operator> <sizeof pos:start="377:33" pos:end="377:48">sizeof<argument_list pos:start="377:39" pos:end="377:48">(<argument pos:start="377:40" pos:end="377:47"><expr pos:start="377:40" pos:end="377:47"><name pos:start="377:40" pos:end="377:47">qemu_irq</name></expr></argument>)</argument_list></sizeof> <operator pos:start="377:50" pos:end="377:50">*</operator> <literal type="number" pos:start="377:52" pos:end="377:52">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="379:5" pos:end="379:57">/* Connect the heathrow PIC outputs to the 6xx bus */</comment>

    <for pos:start="381:5" pos:end="401:5">for <control pos:start="381:9" pos:end="381:34">(<init pos:start="381:10" pos:end="381:15"><expr pos:start="381:10" pos:end="381:14"><name pos:start="381:10" pos:end="381:10">i</name> <operator pos:start="381:12" pos:end="381:12">=</operator> <literal type="number" pos:start="381:14" pos:end="381:14">0</literal></expr>;</init> <condition pos:start="381:17" pos:end="381:29"><expr pos:start="381:17" pos:end="381:28"><name pos:start="381:17" pos:end="381:17">i</name> <operator pos:start="381:19" pos:end="381:19">&lt;</operator> <name pos:start="381:21" pos:end="381:28">smp_cpus</name></expr>;</condition> <incr pos:start="381:31" pos:end="381:33"><expr pos:start="381:31" pos:end="381:33"><name pos:start="381:31" pos:end="381:31">i</name><operator pos:start="381:32" pos:end="381:33">++</operator></expr></incr>)</control> <block pos:start="381:36" pos:end="401:5">{<block_content pos:start="383:9" pos:end="399:9">

        <switch pos:start="383:9" pos:end="399:9">switch <condition pos:start="383:16" pos:end="383:31">(<expr pos:start="383:17" pos:end="383:30"><call pos:start="383:17" pos:end="383:30"><name pos:start="383:17" pos:end="383:25">PPC_INPUT</name><argument_list pos:start="383:26" pos:end="383:30">(<argument pos:start="383:27" pos:end="383:29"><expr pos:start="383:27" pos:end="383:29"><name pos:start="383:27" pos:end="383:29">env</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="383:33" pos:end="399:9">{<block_content pos:start="385:9" pos:end="397:74">

        <case pos:start="385:9" pos:end="385:33">case <expr pos:start="385:14" pos:end="385:32"><name pos:start="385:14" pos:end="385:32">PPC_FLAGS_INPUT_6xx</name></expr>:</case>

            <expr_stmt pos:start="387:13" pos:end="387:58"><expr pos:start="387:13" pos:end="387:57"><name pos:start="387:13" pos:end="387:28"><name pos:start="387:13" pos:end="387:25">heathrow_irqs</name><index pos:start="387:26" pos:end="387:28">[<expr pos:start="387:27" pos:end="387:27"><name pos:start="387:27" pos:end="387:27">i</name></expr>]</index></name> <operator pos:start="387:30" pos:end="387:30">=</operator> <name pos:start="387:32" pos:end="387:47"><name pos:start="387:32" pos:end="387:44">heathrow_irqs</name><index pos:start="387:45" pos:end="387:47">[<expr pos:start="387:46" pos:end="387:46"><literal type="number" pos:start="387:46" pos:end="387:46">0</literal></expr>]</index></name> <operator pos:start="387:49" pos:end="387:49">+</operator> <operator pos:start="387:51" pos:end="387:51">(</operator><name pos:start="387:52" pos:end="387:52">i</name> <operator pos:start="387:54" pos:end="387:54">*</operator> <literal type="number" pos:start="387:56" pos:end="387:56">1</literal><operator pos:start="387:57" pos:end="387:57">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="389:13" pos:end="391:64"><expr pos:start="389:13" pos:end="391:63"><name pos:start="389:13" pos:end="389:31"><name pos:start="389:13" pos:end="389:25">heathrow_irqs</name><index pos:start="389:26" pos:end="389:28">[<expr pos:start="389:27" pos:end="389:27"><name pos:start="389:27" pos:end="389:27">i</name></expr>]</index><index pos:start="389:29" pos:end="389:31">[<expr pos:start="389:30" pos:end="389:30"><literal type="number" pos:start="389:30" pos:end="389:30">0</literal></expr>]</index></name> <operator pos:start="389:33" pos:end="389:33">=</operator>

                <operator pos:start="391:17" pos:end="391:17">(</operator><operator pos:start="391:18" pos:end="391:18">(</operator><name pos:start="391:19" pos:end="391:26">qemu_irq</name> <operator pos:start="391:28" pos:end="391:28">*</operator><operator pos:start="391:29" pos:end="391:29">)</operator><name pos:start="391:30" pos:end="391:44"><name pos:start="391:30" pos:end="391:32">env</name><operator pos:start="391:33" pos:end="391:34">-&gt;</operator><name pos:start="391:35" pos:end="391:44">irq_inputs</name></name><operator pos:start="391:45" pos:end="391:45">)</operator><index pos:start="391:46" pos:end="391:63">[<expr pos:start="391:47" pos:end="391:62"><name pos:start="391:47" pos:end="391:62">PPC6xx_INPUT_INT</name></expr>]</index></expr>;</expr_stmt>

            <break pos:start="393:13" pos:end="393:18">break;</break>

        <default pos:start="395:9" pos:end="395:16">default:</default>

            <expr_stmt pos:start="397:13" pos:end="397:74"><expr pos:start="397:13" pos:end="397:73"><call pos:start="397:13" pos:end="397:73"><name pos:start="397:13" pos:end="397:20">hw_error</name><argument_list pos:start="397:21" pos:end="397:73">(<argument pos:start="397:22" pos:end="397:72"><expr pos:start="397:22" pos:end="397:72"><literal type="string" pos:start="397:22" pos:end="397:72">"Bus model not supported on OldWorld Mac machine\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

    </block_content>}</block></for>



    <comment type="block" pos:start="405:5" pos:end="405:32">/* init basic PC hardware */</comment>

    <if_stmt pos:start="407:5" pos:end="411:5"><if pos:start="407:5" pos:end="411:5">if <condition pos:start="407:8" pos:end="407:46">(<expr pos:start="407:9" pos:end="407:45"><call pos:start="407:9" pos:end="407:22"><name pos:start="407:9" pos:end="407:17">PPC_INPUT</name><argument_list pos:start="407:18" pos:end="407:22">(<argument pos:start="407:19" pos:end="407:21"><expr pos:start="407:19" pos:end="407:21"><name pos:start="407:19" pos:end="407:21">env</name></expr></argument>)</argument_list></call> <operator pos:start="407:24" pos:end="407:25">!=</operator> <name pos:start="407:27" pos:end="407:45">PPC_FLAGS_INPUT_6xx</name></expr>)</condition> <block pos:start="407:48" pos:end="411:5">{<block_content pos:start="409:9" pos:end="409:68">

        <expr_stmt pos:start="409:9" pos:end="409:68"><expr pos:start="409:9" pos:end="409:67"><call pos:start="409:9" pos:end="409:67"><name pos:start="409:9" pos:end="409:16">hw_error</name><argument_list pos:start="409:17" pos:end="409:67">(<argument pos:start="409:18" pos:end="409:66"><expr pos:start="409:18" pos:end="409:66"><literal type="string" pos:start="409:18" pos:end="409:66">"Only 6xx bus is supported on heathrow machine\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="413:5" pos:end="413:62"><expr pos:start="413:5" pos:end="413:61"><name pos:start="413:5" pos:end="413:7">pic</name> <operator pos:start="413:9" pos:end="413:9">=</operator> <call pos:start="413:11" pos:end="413:61"><name pos:start="413:11" pos:end="413:27">heathrow_pic_init</name><argument_list pos:start="413:28" pos:end="413:61">(<argument pos:start="413:29" pos:end="413:42"><expr pos:start="413:29" pos:end="413:42"><operator pos:start="413:29" pos:end="413:29">&amp;</operator><name pos:start="413:30" pos:end="413:42">pic_mem_index</name></expr></argument>, <argument pos:start="413:45" pos:end="413:45"><expr pos:start="413:45" pos:end="413:45"><literal type="number" pos:start="413:45" pos:end="413:45">1</literal></expr></argument>, <argument pos:start="413:48" pos:end="413:60"><expr pos:start="413:48" pos:end="413:60"><name pos:start="413:48" pos:end="413:60">heathrow_irqs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="415:5" pos:end="415:48"><expr pos:start="415:5" pos:end="415:47"><name pos:start="415:5" pos:end="415:11">pci_bus</name> <operator pos:start="415:13" pos:end="415:13">=</operator> <call pos:start="415:15" pos:end="415:47"><name pos:start="415:15" pos:end="415:30">pci_grackle_init</name><argument_list pos:start="415:31" pos:end="415:47">(<argument pos:start="415:32" pos:end="415:41"><expr pos:start="415:32" pos:end="415:41"><literal type="number" pos:start="415:32" pos:end="415:41">0xfec00000</literal></expr></argument>, <argument pos:start="415:44" pos:end="415:46"><expr pos:start="415:44" pos:end="415:46"><name pos:start="415:44" pos:end="415:46">pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="417:5" pos:end="417:58"><expr pos:start="417:5" pos:end="417:57"><call pos:start="417:5" pos:end="417:57"><name pos:start="417:5" pos:end="417:16">pci_vga_init</name><argument_list pos:start="417:17" pos:end="417:57">(<argument pos:start="417:18" pos:end="417:24"><expr pos:start="417:18" pos:end="417:24"><name pos:start="417:18" pos:end="417:24">pci_bus</name></expr></argument>, <argument pos:start="417:27" pos:end="417:41"><expr pos:start="417:27" pos:end="417:41"><name pos:start="417:27" pos:end="417:41">vga_bios_offset</name></expr></argument>, <argument pos:start="417:44" pos:end="417:56"><expr pos:start="417:44" pos:end="417:56"><name pos:start="417:44" pos:end="417:56">vga_bios_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="421:5" pos:end="423:61"><expr pos:start="421:5" pos:end="423:60"><name pos:start="421:5" pos:end="421:18">escc_mem_index</name> <operator pos:start="421:20" pos:end="421:20">=</operator> <call pos:start="421:22" pos:end="423:60"><name pos:start="421:22" pos:end="421:30">escc_init</name><argument_list pos:start="421:31" pos:end="423:60">(<argument pos:start="421:32" pos:end="421:41"><expr pos:start="421:32" pos:end="421:41"><literal type="number" pos:start="421:32" pos:end="421:41">0x80013000</literal></expr></argument>, <argument pos:start="421:44" pos:end="421:52"><expr pos:start="421:44" pos:end="421:52"><name pos:start="421:44" pos:end="421:52"><name pos:start="421:44" pos:end="421:46">pic</name><index pos:start="421:47" pos:end="421:52">[<expr pos:start="421:48" pos:end="421:51"><literal type="number" pos:start="421:48" pos:end="421:51">0x0f</literal></expr>]</index></name></expr></argument>, <argument pos:start="421:55" pos:end="421:63"><expr pos:start="421:55" pos:end="421:63"><name pos:start="421:55" pos:end="421:63"><name pos:start="421:55" pos:end="421:57">pic</name><index pos:start="421:58" pos:end="421:63">[<expr pos:start="421:59" pos:end="421:62"><literal type="number" pos:start="421:59" pos:end="421:62">0x10</literal></expr>]</index></name></expr></argument>, <argument pos:start="421:66" pos:end="421:78"><expr pos:start="421:66" pos:end="421:78"><name pos:start="421:66" pos:end="421:78"><name pos:start="421:66" pos:end="421:75">serial_hds</name><index pos:start="421:76" pos:end="421:78">[<expr pos:start="421:77" pos:end="421:77"><literal type="number" pos:start="421:77" pos:end="421:77">0</literal></expr>]</index></name></expr></argument>,

                               <argument pos:start="423:32" pos:end="423:44"><expr pos:start="423:32" pos:end="423:44"><name pos:start="423:32" pos:end="423:44"><name pos:start="423:32" pos:end="423:41">serial_hds</name><index pos:start="423:42" pos:end="423:44">[<expr pos:start="423:43" pos:end="423:43"><literal type="number" pos:start="423:43" pos:end="423:43">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="423:47" pos:end="423:56"><expr pos:start="423:47" pos:end="423:56"><name pos:start="423:47" pos:end="423:56">ESCC_CLOCK</name></expr></argument>, <argument pos:start="423:59" pos:end="423:59"><expr pos:start="423:59" pos:end="423:59"><literal type="number" pos:start="423:59" pos:end="423:59">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="427:5" pos:end="429:53">for<control pos:start="427:8" pos:end="427:32">(<init pos:start="427:9" pos:end="427:14"><expr pos:start="427:9" pos:end="427:13"><name pos:start="427:9" pos:end="427:9">i</name> <operator pos:start="427:11" pos:end="427:11">=</operator> <literal type="number" pos:start="427:13" pos:end="427:13">0</literal></expr>;</init> <condition pos:start="427:16" pos:end="427:27"><expr pos:start="427:16" pos:end="427:26"><name pos:start="427:16" pos:end="427:16">i</name> <operator pos:start="427:18" pos:end="427:18">&lt;</operator> <name pos:start="427:20" pos:end="427:26">nb_nics</name></expr>;</condition> <incr pos:start="427:29" pos:end="427:31"><expr pos:start="427:29" pos:end="427:31"><name pos:start="427:29" pos:end="427:29">i</name><operator pos:start="427:30" pos:end="427:31">++</operator></expr></incr>)</control><block type="pseudo" pos:start="429:9" pos:end="429:53"><block_content pos:start="429:9" pos:end="429:53">

        <expr_stmt pos:start="429:9" pos:end="429:53"><expr pos:start="429:9" pos:end="429:52"><call pos:start="429:9" pos:end="429:52"><name pos:start="429:9" pos:end="429:20">pci_nic_init</name><argument_list pos:start="429:21" pos:end="429:52">(<argument pos:start="429:22" pos:end="429:33"><expr pos:start="429:22" pos:end="429:33"><operator pos:start="429:22" pos:end="429:22">&amp;</operator><name pos:start="429:23" pos:end="429:33"><name pos:start="429:23" pos:end="429:30">nd_table</name><index pos:start="429:31" pos:end="429:33">[<expr pos:start="429:32" pos:end="429:32"><name pos:start="429:32" pos:end="429:32">i</name></expr>]</index></name></expr></argument>, <argument pos:start="429:36" pos:end="429:45"><expr pos:start="429:36" pos:end="429:45"><literal type="string" pos:start="429:36" pos:end="429:45">"ne2k_pci"</literal></expr></argument>, <argument pos:start="429:48" pos:end="429:51"><expr pos:start="429:48" pos:end="429:51"><name pos:start="429:48" pos:end="429:51">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>





    <if_stmt pos:start="435:5" pos:end="441:5"><if pos:start="435:5" pos:end="441:5">if <condition pos:start="435:8" pos:end="435:49">(<expr pos:start="435:9" pos:end="435:48"><call pos:start="435:9" pos:end="435:33"><name pos:start="435:9" pos:end="435:25">drive_get_max_bus</name><argument_list pos:start="435:26" pos:end="435:33">(<argument pos:start="435:27" pos:end="435:32"><expr pos:start="435:27" pos:end="435:32"><name pos:start="435:27" pos:end="435:32">IF_IDE</name></expr></argument>)</argument_list></call> <operator pos:start="435:35" pos:end="435:36">&gt;=</operator> <name pos:start="435:38" pos:end="435:48">MAX_IDE_BUS</name></expr>)</condition> <block pos:start="435:51" pos:end="441:5">{<block_content pos:start="437:9" pos:end="439:16">

        <expr_stmt pos:start="437:9" pos:end="437:52"><expr pos:start="437:9" pos:end="437:51"><call pos:start="437:9" pos:end="437:51"><name pos:start="437:9" pos:end="437:15">fprintf</name><argument_list pos:start="437:16" pos:end="437:51">(<argument pos:start="437:17" pos:end="437:22"><expr pos:start="437:17" pos:end="437:22"><name pos:start="437:17" pos:end="437:22">stderr</name></expr></argument>, <argument pos:start="437:25" pos:end="437:50"><expr pos:start="437:25" pos:end="437:50"><literal type="string" pos:start="437:25" pos:end="437:50">"qemu: too many IDE bus\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="439:9" pos:end="439:16"><expr pos:start="439:9" pos:end="439:15"><call pos:start="439:9" pos:end="439:15"><name pos:start="439:9" pos:end="439:12">exit</name><argument_list pos:start="439:13" pos:end="439:15">(<argument pos:start="439:14" pos:end="439:14"><expr pos:start="439:14" pos:end="439:14"><literal type="number" pos:start="439:14" pos:end="439:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="445:5" pos:end="445:57">/* First IDE channel is a MAC IDE on the MacIO bus */</comment>

    <expr_stmt pos:start="447:5" pos:end="447:36"><expr pos:start="447:5" pos:end="447:35"><name pos:start="447:5" pos:end="447:9"><name pos:start="447:5" pos:end="447:6">hd</name><index pos:start="447:7" pos:end="447:9">[<expr pos:start="447:8" pos:end="447:8"><literal type="number" pos:start="447:8" pos:end="447:8">0</literal></expr>]</index></name> <operator pos:start="447:11" pos:end="447:11">=</operator> <call pos:start="447:13" pos:end="447:35"><name pos:start="447:13" pos:end="447:21">drive_get</name><argument_list pos:start="447:22" pos:end="447:35">(<argument pos:start="447:23" pos:end="447:28"><expr pos:start="447:23" pos:end="447:28"><name pos:start="447:23" pos:end="447:28">IF_IDE</name></expr></argument>, <argument pos:start="447:31" pos:end="447:31"><expr pos:start="447:31" pos:end="447:31"><literal type="number" pos:start="447:31" pos:end="447:31">0</literal></expr></argument>, <argument pos:start="447:34" pos:end="447:34"><expr pos:start="447:34" pos:end="447:34"><literal type="number" pos:start="447:34" pos:end="447:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="449:5" pos:end="449:36"><expr pos:start="449:5" pos:end="449:35"><name pos:start="449:5" pos:end="449:9"><name pos:start="449:5" pos:end="449:6">hd</name><index pos:start="449:7" pos:end="449:9">[<expr pos:start="449:8" pos:end="449:8"><literal type="number" pos:start="449:8" pos:end="449:8">1</literal></expr>]</index></name> <operator pos:start="449:11" pos:end="449:11">=</operator> <call pos:start="449:13" pos:end="449:35"><name pos:start="449:13" pos:end="449:21">drive_get</name><argument_list pos:start="449:22" pos:end="449:35">(<argument pos:start="449:23" pos:end="449:28"><expr pos:start="449:23" pos:end="449:28"><name pos:start="449:23" pos:end="449:28">IF_IDE</name></expr></argument>, <argument pos:start="449:31" pos:end="449:31"><expr pos:start="449:31" pos:end="449:31"><literal type="number" pos:start="449:31" pos:end="449:31">0</literal></expr></argument>, <argument pos:start="449:34" pos:end="449:34"><expr pos:start="449:34" pos:end="449:34"><literal type="number" pos:start="449:34" pos:end="449:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="451:5" pos:end="451:41"><expr pos:start="451:5" pos:end="451:40"><name pos:start="451:5" pos:end="451:9">dbdma</name> <operator pos:start="451:11" pos:end="451:11">=</operator> <call pos:start="451:13" pos:end="451:40"><name pos:start="451:13" pos:end="451:22">DBDMA_init</name><argument_list pos:start="451:23" pos:end="451:40">(<argument pos:start="451:24" pos:end="451:39"><expr pos:start="451:24" pos:end="451:39"><operator pos:start="451:24" pos:end="451:24">&amp;</operator><name pos:start="451:25" pos:end="451:39">dbdma_mem_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="453:5" pos:end="453:26"><expr pos:start="453:5" pos:end="453:25"><name pos:start="453:5" pos:end="453:20"><name pos:start="453:5" pos:end="453:17">ide_mem_index</name><index pos:start="453:18" pos:end="453:20">[<expr pos:start="453:19" pos:end="453:19"><literal type="number" pos:start="453:19" pos:end="453:19">0</literal></expr>]</index></name> <operator pos:start="453:22" pos:end="453:22">=</operator> <operator pos:start="453:24" pos:end="453:24">-</operator><literal type="number" pos:start="453:25" pos:end="453:25">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="455:5" pos:end="455:76"><expr pos:start="455:5" pos:end="455:75"><name pos:start="455:5" pos:end="455:20"><name pos:start="455:5" pos:end="455:17">ide_mem_index</name><index pos:start="455:18" pos:end="455:20">[<expr pos:start="455:19" pos:end="455:19"><literal type="number" pos:start="455:19" pos:end="455:19">1</literal></expr>]</index></name> <operator pos:start="455:22" pos:end="455:22">=</operator> <call pos:start="455:24" pos:end="455:75"><name pos:start="455:24" pos:end="455:36">pmac_ide_init</name><argument_list pos:start="455:37" pos:end="455:75">(<argument pos:start="455:38" pos:end="455:39"><expr pos:start="455:38" pos:end="455:39"><name pos:start="455:38" pos:end="455:39">hd</name></expr></argument>, <argument pos:start="455:42" pos:end="455:50"><expr pos:start="455:42" pos:end="455:50"><name pos:start="455:42" pos:end="455:50"><name pos:start="455:42" pos:end="455:44">pic</name><index pos:start="455:45" pos:end="455:50">[<expr pos:start="455:46" pos:end="455:49"><literal type="number" pos:start="455:46" pos:end="455:49">0x0D</literal></expr>]</index></name></expr></argument>, <argument pos:start="455:53" pos:end="455:57"><expr pos:start="455:53" pos:end="455:57"><name pos:start="455:53" pos:end="455:57">dbdma</name></expr></argument>, <argument pos:start="455:60" pos:end="455:63"><expr pos:start="455:60" pos:end="455:63"><literal type="number" pos:start="455:60" pos:end="455:63">0x16</literal></expr></argument>, <argument pos:start="455:66" pos:end="455:74"><expr pos:start="455:66" pos:end="455:74"><name pos:start="455:66" pos:end="455:74"><name pos:start="455:66" pos:end="455:68">pic</name><index pos:start="455:69" pos:end="455:74">[<expr pos:start="455:70" pos:end="455:73"><literal type="number" pos:start="455:70" pos:end="455:73">0x02</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="459:5" pos:end="459:55">/* Second IDE channel is a CMD646 on the PCI bus */</comment>

    <expr_stmt pos:start="461:5" pos:end="461:36"><expr pos:start="461:5" pos:end="461:35"><name pos:start="461:5" pos:end="461:9"><name pos:start="461:5" pos:end="461:6">hd</name><index pos:start="461:7" pos:end="461:9">[<expr pos:start="461:8" pos:end="461:8"><literal type="number" pos:start="461:8" pos:end="461:8">0</literal></expr>]</index></name> <operator pos:start="461:11" pos:end="461:11">=</operator> <call pos:start="461:13" pos:end="461:35"><name pos:start="461:13" pos:end="461:21">drive_get</name><argument_list pos:start="461:22" pos:end="461:35">(<argument pos:start="461:23" pos:end="461:28"><expr pos:start="461:23" pos:end="461:28"><name pos:start="461:23" pos:end="461:28">IF_IDE</name></expr></argument>, <argument pos:start="461:31" pos:end="461:31"><expr pos:start="461:31" pos:end="461:31"><literal type="number" pos:start="461:31" pos:end="461:31">1</literal></expr></argument>, <argument pos:start="461:34" pos:end="461:34"><expr pos:start="461:34" pos:end="461:34"><literal type="number" pos:start="461:34" pos:end="461:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="463:5" pos:end="463:36"><expr pos:start="463:5" pos:end="463:35"><name pos:start="463:5" pos:end="463:9"><name pos:start="463:5" pos:end="463:6">hd</name><index pos:start="463:7" pos:end="463:9">[<expr pos:start="463:8" pos:end="463:8"><literal type="number" pos:start="463:8" pos:end="463:8">1</literal></expr>]</index></name> <operator pos:start="463:11" pos:end="463:11">=</operator> <call pos:start="463:13" pos:end="463:35"><name pos:start="463:13" pos:end="463:21">drive_get</name><argument_list pos:start="463:22" pos:end="463:35">(<argument pos:start="463:23" pos:end="463:28"><expr pos:start="463:23" pos:end="463:28"><name pos:start="463:23" pos:end="463:28">IF_IDE</name></expr></argument>, <argument pos:start="463:31" pos:end="463:31"><expr pos:start="463:31" pos:end="463:31"><literal type="number" pos:start="463:31" pos:end="463:31">1</literal></expr></argument>, <argument pos:start="463:34" pos:end="463:34"><expr pos:start="463:34" pos:end="463:34"><literal type="number" pos:start="463:34" pos:end="463:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="465:5" pos:end="465:25"><expr pos:start="465:5" pos:end="465:24"><name pos:start="465:5" pos:end="465:9"><name pos:start="465:5" pos:end="465:6">hd</name><index pos:start="465:7" pos:end="465:9">[<expr pos:start="465:8" pos:end="465:8"><literal type="number" pos:start="465:8" pos:end="465:8">3</literal></expr>]</index></name> <operator pos:start="465:11" pos:end="465:11">=</operator> <name pos:start="465:13" pos:end="465:17"><name pos:start="465:13" pos:end="465:14">hd</name><index pos:start="465:15" pos:end="465:17">[<expr pos:start="465:16" pos:end="465:16"><literal type="number" pos:start="465:16" pos:end="465:16">2</literal></expr>]</index></name> <operator pos:start="465:19" pos:end="465:19">=</operator> <name pos:start="465:21" pos:end="465:24">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="467:5" pos:end="467:40"><expr pos:start="467:5" pos:end="467:39"><call pos:start="467:5" pos:end="467:39"><name pos:start="467:5" pos:end="467:23">pci_cmd646_ide_init</name><argument_list pos:start="467:24" pos:end="467:39">(<argument pos:start="467:25" pos:end="467:31"><expr pos:start="467:25" pos:end="467:31"><name pos:start="467:25" pos:end="467:31">pci_bus</name></expr></argument>, <argument pos:start="467:34" pos:end="467:35"><expr pos:start="467:34" pos:end="467:35"><name pos:start="467:34" pos:end="467:35">hd</name></expr></argument>, <argument pos:start="467:38" pos:end="467:38"><expr pos:start="467:38" pos:end="467:38"><literal type="number" pos:start="467:38" pos:end="467:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="471:5" pos:end="471:34">/* cuda also initialize ADB */</comment>

    <expr_stmt pos:start="473:5" pos:end="473:42"><expr pos:start="473:5" pos:end="473:41"><call pos:start="473:5" pos:end="473:41"><name pos:start="473:5" pos:end="473:13">cuda_init</name><argument_list pos:start="473:14" pos:end="473:41">(<argument pos:start="473:15" pos:end="473:29"><expr pos:start="473:15" pos:end="473:29"><operator pos:start="473:15" pos:end="473:15">&amp;</operator><name pos:start="473:16" pos:end="473:29">cuda_mem_index</name></expr></argument>, <argument pos:start="473:32" pos:end="473:40"><expr pos:start="473:32" pos:end="473:40"><name pos:start="473:32" pos:end="473:40"><name pos:start="473:32" pos:end="473:34">pic</name><index pos:start="473:35" pos:end="473:40">[<expr pos:start="473:36" pos:end="473:39"><literal type="number" pos:start="473:36" pos:end="473:39">0x12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="477:5" pos:end="477:27"><expr pos:start="477:5" pos:end="477:26"><call pos:start="477:5" pos:end="477:26"><name pos:start="477:5" pos:end="477:16">adb_kbd_init</name><argument_list pos:start="477:17" pos:end="477:26">(<argument pos:start="477:18" pos:end="477:25"><expr pos:start="477:18" pos:end="477:25"><operator pos:start="477:18" pos:end="477:18">&amp;</operator><name pos:start="477:19" pos:end="477:25">adb_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="479:5" pos:end="479:29"><expr pos:start="479:5" pos:end="479:28"><call pos:start="479:5" pos:end="479:28"><name pos:start="479:5" pos:end="479:18">adb_mouse_init</name><argument_list pos:start="479:19" pos:end="479:28">(<argument pos:start="479:20" pos:end="479:27"><expr pos:start="479:20" pos:end="479:27"><operator pos:start="479:20" pos:end="479:20">&amp;</operator><name pos:start="479:21" pos:end="479:27">adb_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="483:5" pos:end="483:56"><expr pos:start="483:5" pos:end="483:55"><name pos:start="483:5" pos:end="483:7">nvr</name> <operator pos:start="483:9" pos:end="483:9">=</operator> <call pos:start="483:11" pos:end="483:55"><name pos:start="483:11" pos:end="483:26">macio_nvram_init</name><argument_list pos:start="483:27" pos:end="483:55">(<argument pos:start="483:28" pos:end="483:43"><expr pos:start="483:28" pos:end="483:43"><operator pos:start="483:28" pos:end="483:28">&amp;</operator><name pos:start="483:29" pos:end="483:43">nvram_mem_index</name></expr></argument>, <argument pos:start="483:46" pos:end="483:51"><expr pos:start="483:46" pos:end="483:51"><literal type="number" pos:start="483:46" pos:end="483:51">0x2000</literal></expr></argument>, <argument pos:start="483:54" pos:end="483:54"><expr pos:start="483:54" pos:end="483:54"><literal type="number" pos:start="483:54" pos:end="483:54">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="485:5" pos:end="485:45"><expr pos:start="485:5" pos:end="485:44"><call pos:start="485:5" pos:end="485:44"><name pos:start="485:5" pos:end="485:31">pmac_format_nvram_partition</name><argument_list pos:start="485:32" pos:end="485:44">(<argument pos:start="485:33" pos:end="485:35"><expr pos:start="485:33" pos:end="485:35"><name pos:start="485:33" pos:end="485:35">nvr</name></expr></argument>, <argument pos:start="485:38" pos:end="485:43"><expr pos:start="485:38" pos:end="485:43"><literal type="number" pos:start="485:38" pos:end="485:43">0x2000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="489:5" pos:end="493:31"><expr pos:start="489:5" pos:end="493:30"><call pos:start="489:5" pos:end="493:30"><name pos:start="489:5" pos:end="489:14">macio_init</name><argument_list pos:start="489:15" pos:end="493:30">(<argument pos:start="489:16" pos:end="489:22"><expr pos:start="489:16" pos:end="489:22"><name pos:start="489:16" pos:end="489:22">pci_bus</name></expr></argument>, <argument pos:start="489:25" pos:end="489:52"><expr pos:start="489:25" pos:end="489:52"><name pos:start="489:25" pos:end="489:52">PCI_DEVICE_ID_APPLE_343S1201</name></expr></argument>, <argument pos:start="489:55" pos:end="489:55"><expr pos:start="489:55" pos:end="489:55"><literal type="number" pos:start="489:55" pos:end="489:55">1</literal></expr></argument>, <argument pos:start="489:58" pos:end="489:70"><expr pos:start="489:58" pos:end="489:70"><name pos:start="489:58" pos:end="489:70">pic_mem_index</name></expr></argument>,

               <argument pos:start="491:16" pos:end="491:30"><expr pos:start="491:16" pos:end="491:30"><name pos:start="491:16" pos:end="491:30">dbdma_mem_index</name></expr></argument>, <argument pos:start="491:33" pos:end="491:46"><expr pos:start="491:33" pos:end="491:46"><name pos:start="491:33" pos:end="491:46">cuda_mem_index</name></expr></argument>, <argument pos:start="491:49" pos:end="491:51"><expr pos:start="491:49" pos:end="491:51"><name pos:start="491:49" pos:end="491:51">nvr</name></expr></argument>, <argument pos:start="491:54" pos:end="491:54"><expr pos:start="491:54" pos:end="491:54"><literal type="number" pos:start="491:54" pos:end="491:54">2</literal></expr></argument>, <argument pos:start="491:57" pos:end="491:69"><expr pos:start="491:57" pos:end="491:69"><name pos:start="491:57" pos:end="491:69">ide_mem_index</name></expr></argument>,

               <argument pos:start="493:16" pos:end="493:29"><expr pos:start="493:16" pos:end="493:29"><name pos:start="493:16" pos:end="493:29">escc_mem_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="497:5" pos:end="501:5"><if pos:start="497:5" pos:end="501:5">if <condition pos:start="497:8" pos:end="497:20">(<expr pos:start="497:9" pos:end="497:19"><name pos:start="497:9" pos:end="497:19">usb_enabled</name></expr>)</condition> <block pos:start="497:22" pos:end="501:5">{<block_content pos:start="499:9" pos:end="499:39">

        <expr_stmt pos:start="499:9" pos:end="499:39"><expr pos:start="499:9" pos:end="499:38"><call pos:start="499:9" pos:end="499:38"><name pos:start="499:9" pos:end="499:25">usb_ohci_init_pci</name><argument_list pos:start="499:26" pos:end="499:38">(<argument pos:start="499:27" pos:end="499:33"><expr pos:start="499:27" pos:end="499:33"><name pos:start="499:27" pos:end="499:33">pci_bus</name></expr></argument>, <argument pos:start="499:36" pos:end="499:37"><expr pos:start="499:36" pos:end="499:37"><operator pos:start="499:36" pos:end="499:36">-</operator><literal type="number" pos:start="499:37" pos:end="499:37">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="505:5" pos:end="507:27"><if pos:start="505:5" pos:end="507:27">if <condition pos:start="505:8" pos:end="505:73">(<expr pos:start="505:9" pos:end="505:72"><name pos:start="505:9" pos:end="505:21">graphic_depth</name> <operator pos:start="505:23" pos:end="505:24">!=</operator> <literal type="number" pos:start="505:26" pos:end="505:27">15</literal> <operator pos:start="505:29" pos:end="505:30">&amp;&amp;</operator> <name pos:start="505:32" pos:end="505:44">graphic_depth</name> <operator pos:start="505:46" pos:end="505:47">!=</operator> <literal type="number" pos:start="505:49" pos:end="505:50">32</literal> <operator pos:start="505:52" pos:end="505:53">&amp;&amp;</operator> <name pos:start="505:55" pos:end="505:67">graphic_depth</name> <operator pos:start="505:69" pos:end="505:70">!=</operator> <literal type="number" pos:start="505:72" pos:end="505:72">8</literal></expr>)</condition><block type="pseudo" pos:start="507:9" pos:end="507:27"><block_content pos:start="507:9" pos:end="507:27">

        <expr_stmt pos:start="507:9" pos:end="507:27"><expr pos:start="507:9" pos:end="507:26"><name pos:start="507:9" pos:end="507:21">graphic_depth</name> <operator pos:start="507:23" pos:end="507:23">=</operator> <literal type="number" pos:start="507:25" pos:end="507:26">15</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="511:5" pos:end="511:42">/* No PCI init: the BIOS will do it */</comment>



    <expr_stmt pos:start="515:5" pos:end="515:55"><expr pos:start="515:5" pos:end="515:54"><name pos:start="515:5" pos:end="515:10">fw_cfg</name> <operator pos:start="515:12" pos:end="515:12">=</operator> <call pos:start="515:14" pos:end="515:54"><name pos:start="515:14" pos:end="515:24">fw_cfg_init</name><argument_list pos:start="515:25" pos:end="515:54">(<argument pos:start="515:26" pos:end="515:26"><expr pos:start="515:26" pos:end="515:26"><literal type="number" pos:start="515:26" pos:end="515:26">0</literal></expr></argument>, <argument pos:start="515:29" pos:end="515:29"><expr pos:start="515:29" pos:end="515:29"><literal type="number" pos:start="515:29" pos:end="515:29">0</literal></expr></argument>, <argument pos:start="515:32" pos:end="515:39"><expr pos:start="515:32" pos:end="515:39"><name pos:start="515:32" pos:end="515:39">CFG_ADDR</name></expr></argument>, <argument pos:start="515:42" pos:end="515:53"><expr pos:start="515:42" pos:end="515:53"><name pos:start="515:42" pos:end="515:49">CFG_ADDR</name> <operator pos:start="515:51" pos:end="515:51">+</operator> <literal type="number" pos:start="515:53" pos:end="515:53">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="517:5" pos:end="517:41"><expr pos:start="517:5" pos:end="517:40"><call pos:start="517:5" pos:end="517:40"><name pos:start="517:5" pos:end="517:18">fw_cfg_add_i32</name><argument_list pos:start="517:19" pos:end="517:40">(<argument pos:start="517:20" pos:end="517:25"><expr pos:start="517:20" pos:end="517:25"><name pos:start="517:20" pos:end="517:25">fw_cfg</name></expr></argument>, <argument pos:start="517:28" pos:end="517:36"><expr pos:start="517:28" pos:end="517:36"><name pos:start="517:28" pos:end="517:36">FW_CFG_ID</name></expr></argument>, <argument pos:start="517:39" pos:end="517:39"><expr pos:start="517:39" pos:end="517:39"><literal type="number" pos:start="517:39" pos:end="517:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="519:5" pos:end="519:64"><expr pos:start="519:5" pos:end="519:63"><call pos:start="519:5" pos:end="519:63"><name pos:start="519:5" pos:end="519:18">fw_cfg_add_i64</name><argument_list pos:start="519:19" pos:end="519:63">(<argument pos:start="519:20" pos:end="519:25"><expr pos:start="519:20" pos:end="519:25"><name pos:start="519:20" pos:end="519:25">fw_cfg</name></expr></argument>, <argument pos:start="519:28" pos:end="519:42"><expr pos:start="519:28" pos:end="519:42"><name pos:start="519:28" pos:end="519:42">FW_CFG_RAM_SIZE</name></expr></argument>, <argument pos:start="519:45" pos:end="519:62"><expr pos:start="519:45" pos:end="519:62"><operator pos:start="519:45" pos:end="519:45">(</operator><name pos:start="519:46" pos:end="519:53">uint64_t</name><operator pos:start="519:54" pos:end="519:54">)</operator><name pos:start="519:55" pos:end="519:62">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="521:5" pos:end="521:61"><expr pos:start="521:5" pos:end="521:60"><call pos:start="521:5" pos:end="521:60"><name pos:start="521:5" pos:end="521:18">fw_cfg_add_i16</name><argument_list pos:start="521:19" pos:end="521:60">(<argument pos:start="521:20" pos:end="521:25"><expr pos:start="521:20" pos:end="521:25"><name pos:start="521:20" pos:end="521:25">fw_cfg</name></expr></argument>, <argument pos:start="521:28" pos:end="521:44"><expr pos:start="521:28" pos:end="521:44"><name pos:start="521:28" pos:end="521:44">FW_CFG_MACHINE_ID</name></expr></argument>, <argument pos:start="521:47" pos:end="521:59"><expr pos:start="521:47" pos:end="521:59"><name pos:start="521:47" pos:end="521:59">ARCH_HEATHROW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="523:5" pos:end="523:60"><expr pos:start="523:5" pos:end="523:59"><call pos:start="523:5" pos:end="523:59"><name pos:start="523:5" pos:end="523:18">fw_cfg_add_i32</name><argument_list pos:start="523:19" pos:end="523:59">(<argument pos:start="523:20" pos:end="523:25"><expr pos:start="523:20" pos:end="523:25"><name pos:start="523:20" pos:end="523:25">fw_cfg</name></expr></argument>, <argument pos:start="523:28" pos:end="523:45"><expr pos:start="523:28" pos:end="523:45"><name pos:start="523:28" pos:end="523:45">FW_CFG_KERNEL_ADDR</name></expr></argument>, <argument pos:start="523:48" pos:end="523:58"><expr pos:start="523:48" pos:end="523:58"><name pos:start="523:48" pos:end="523:58">kernel_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="525:5" pos:end="525:60"><expr pos:start="525:5" pos:end="525:59"><call pos:start="525:5" pos:end="525:59"><name pos:start="525:5" pos:end="525:18">fw_cfg_add_i32</name><argument_list pos:start="525:19" pos:end="525:59">(<argument pos:start="525:20" pos:end="525:25"><expr pos:start="525:20" pos:end="525:25"><name pos:start="525:20" pos:end="525:25">fw_cfg</name></expr></argument>, <argument pos:start="525:28" pos:end="525:45"><expr pos:start="525:28" pos:end="525:45"><name pos:start="525:28" pos:end="525:45">FW_CFG_KERNEL_SIZE</name></expr></argument>, <argument pos:start="525:48" pos:end="525:58"><expr pos:start="525:48" pos:end="525:58"><name pos:start="525:48" pos:end="525:58">kernel_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="527:5" pos:end="537:5"><if pos:start="527:5" pos:end="533:5">if <condition pos:start="527:8" pos:end="527:23">(<expr pos:start="527:9" pos:end="527:22"><name pos:start="527:9" pos:end="527:22">kernel_cmdline</name></expr>)</condition> <block pos:start="527:25" pos:end="533:5">{<block_content pos:start="529:9" pos:end="531:73">

        <expr_stmt pos:start="529:9" pos:end="529:68"><expr pos:start="529:9" pos:end="529:67"><call pos:start="529:9" pos:end="529:67"><name pos:start="529:9" pos:end="529:22">fw_cfg_add_i32</name><argument_list pos:start="529:23" pos:end="529:67">(<argument pos:start="529:24" pos:end="529:29"><expr pos:start="529:24" pos:end="529:29"><name pos:start="529:24" pos:end="529:29">fw_cfg</name></expr></argument>, <argument pos:start="529:32" pos:end="529:52"><expr pos:start="529:32" pos:end="529:52"><name pos:start="529:32" pos:end="529:52">FW_CFG_KERNEL_CMDLINE</name></expr></argument>, <argument pos:start="529:55" pos:end="529:66"><expr pos:start="529:55" pos:end="529:66"><name pos:start="529:55" pos:end="529:66">CMDLINE_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="531:9" pos:end="531:73"><expr pos:start="531:9" pos:end="531:72"><call pos:start="531:9" pos:end="531:72"><name pos:start="531:9" pos:end="531:24">pstrcpy_targphys</name><argument_list pos:start="531:25" pos:end="531:72">(<argument pos:start="531:26" pos:end="531:37"><expr pos:start="531:26" pos:end="531:37"><name pos:start="531:26" pos:end="531:37">CMDLINE_ADDR</name></expr></argument>, <argument pos:start="531:40" pos:end="531:55"><expr pos:start="531:40" pos:end="531:55"><name pos:start="531:40" pos:end="531:55">TARGET_PAGE_SIZE</name></expr></argument>, <argument pos:start="531:58" pos:end="531:71"><expr pos:start="531:58" pos:end="531:71"><name pos:start="531:58" pos:end="531:71">kernel_cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="533:7" pos:end="537:5">else <block pos:start="533:12" pos:end="537:5">{<block_content pos:start="535:9" pos:end="535:57">

        <expr_stmt pos:start="535:9" pos:end="535:57"><expr pos:start="535:9" pos:end="535:56"><call pos:start="535:9" pos:end="535:56"><name pos:start="535:9" pos:end="535:22">fw_cfg_add_i32</name><argument_list pos:start="535:23" pos:end="535:56">(<argument pos:start="535:24" pos:end="535:29"><expr pos:start="535:24" pos:end="535:29"><name pos:start="535:24" pos:end="535:29">fw_cfg</name></expr></argument>, <argument pos:start="535:32" pos:end="535:52"><expr pos:start="535:32" pos:end="535:52"><name pos:start="535:32" pos:end="535:52">FW_CFG_KERNEL_CMDLINE</name></expr></argument>, <argument pos:start="535:55" pos:end="535:55"><expr pos:start="535:55" pos:end="535:55"><literal type="number" pos:start="535:55" pos:end="535:55">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="539:5" pos:end="539:60"><expr pos:start="539:5" pos:end="539:59"><call pos:start="539:5" pos:end="539:59"><name pos:start="539:5" pos:end="539:18">fw_cfg_add_i32</name><argument_list pos:start="539:19" pos:end="539:59">(<argument pos:start="539:20" pos:end="539:25"><expr pos:start="539:20" pos:end="539:25"><name pos:start="539:20" pos:end="539:25">fw_cfg</name></expr></argument>, <argument pos:start="539:28" pos:end="539:45"><expr pos:start="539:28" pos:end="539:45"><name pos:start="539:28" pos:end="539:45">FW_CFG_INITRD_ADDR</name></expr></argument>, <argument pos:start="539:48" pos:end="539:58"><expr pos:start="539:48" pos:end="539:58"><name pos:start="539:48" pos:end="539:58">initrd_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="541:5" pos:end="541:60"><expr pos:start="541:5" pos:end="541:59"><call pos:start="541:5" pos:end="541:59"><name pos:start="541:5" pos:end="541:18">fw_cfg_add_i32</name><argument_list pos:start="541:19" pos:end="541:59">(<argument pos:start="541:20" pos:end="541:25"><expr pos:start="541:20" pos:end="541:25"><name pos:start="541:20" pos:end="541:25">fw_cfg</name></expr></argument>, <argument pos:start="541:28" pos:end="541:45"><expr pos:start="541:28" pos:end="541:45"><name pos:start="541:28" pos:end="541:45">FW_CFG_INITRD_SIZE</name></expr></argument>, <argument pos:start="541:48" pos:end="541:58"><expr pos:start="541:48" pos:end="541:58"><name pos:start="541:48" pos:end="541:58">initrd_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="543:5" pos:end="543:64"><expr pos:start="543:5" pos:end="543:63"><call pos:start="543:5" pos:end="543:63"><name pos:start="543:5" pos:end="543:18">fw_cfg_add_i16</name><argument_list pos:start="543:19" pos:end="543:63">(<argument pos:start="543:20" pos:end="543:25"><expr pos:start="543:20" pos:end="543:25"><name pos:start="543:20" pos:end="543:25">fw_cfg</name></expr></argument>, <argument pos:start="543:28" pos:end="543:45"><expr pos:start="543:28" pos:end="543:45"><name pos:start="543:28" pos:end="543:45">FW_CFG_BOOT_DEVICE</name></expr></argument>, <argument pos:start="543:48" pos:end="543:62"><expr pos:start="543:48" pos:end="543:62"><name pos:start="543:48" pos:end="543:62">ppc_boot_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="547:5" pos:end="547:60"><expr pos:start="547:5" pos:end="547:59"><call pos:start="547:5" pos:end="547:59"><name pos:start="547:5" pos:end="547:18">fw_cfg_add_i16</name><argument_list pos:start="547:19" pos:end="547:59">(<argument pos:start="547:20" pos:end="547:25"><expr pos:start="547:20" pos:end="547:25"><name pos:start="547:20" pos:end="547:25">fw_cfg</name></expr></argument>, <argument pos:start="547:28" pos:end="547:43"><expr pos:start="547:28" pos:end="547:43"><name pos:start="547:28" pos:end="547:43">FW_CFG_PPC_WIDTH</name></expr></argument>, <argument pos:start="547:46" pos:end="547:58"><expr pos:start="547:46" pos:end="547:58"><name pos:start="547:46" pos:end="547:58">graphic_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="549:5" pos:end="549:62"><expr pos:start="549:5" pos:end="549:61"><call pos:start="549:5" pos:end="549:61"><name pos:start="549:5" pos:end="549:18">fw_cfg_add_i16</name><argument_list pos:start="549:19" pos:end="549:61">(<argument pos:start="549:20" pos:end="549:25"><expr pos:start="549:20" pos:end="549:25"><name pos:start="549:20" pos:end="549:25">fw_cfg</name></expr></argument>, <argument pos:start="549:28" pos:end="549:44"><expr pos:start="549:28" pos:end="549:44"><name pos:start="549:28" pos:end="549:44">FW_CFG_PPC_HEIGHT</name></expr></argument>, <argument pos:start="549:47" pos:end="549:60"><expr pos:start="549:47" pos:end="549:60"><name pos:start="549:47" pos:end="549:60">graphic_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="551:5" pos:end="551:60"><expr pos:start="551:5" pos:end="551:59"><call pos:start="551:5" pos:end="551:59"><name pos:start="551:5" pos:end="551:18">fw_cfg_add_i16</name><argument_list pos:start="551:19" pos:end="551:59">(<argument pos:start="551:20" pos:end="551:25"><expr pos:start="551:20" pos:end="551:25"><name pos:start="551:20" pos:end="551:25">fw_cfg</name></expr></argument>, <argument pos:start="551:28" pos:end="551:43"><expr pos:start="551:28" pos:end="551:43"><name pos:start="551:28" pos:end="551:43">FW_CFG_PPC_DEPTH</name></expr></argument>, <argument pos:start="551:46" pos:end="551:58"><expr pos:start="551:46" pos:end="551:58"><name pos:start="551:46" pos:end="551:58">graphic_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="555:5" pos:end="555:52"><expr pos:start="555:5" pos:end="555:51"><call pos:start="555:5" pos:end="555:51"><name pos:start="555:5" pos:end="555:26">qemu_register_boot_set</name><argument_list pos:start="555:27" pos:end="555:51">(<argument pos:start="555:28" pos:end="555:42"><expr pos:start="555:28" pos:end="555:42"><name pos:start="555:28" pos:end="555:42">fw_cfg_boot_set</name></expr></argument>, <argument pos:start="555:45" pos:end="555:50"><expr pos:start="555:45" pos:end="555:50"><name pos:start="555:45" pos:end="555:50">fw_cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
