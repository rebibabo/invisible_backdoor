<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14340.c" pos:tabs="8"><function pos:start="1:1" pos:end="103:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:22">spapr_tce_dma_read</name><parameter_list pos:start="1:23" pos:end="3:37">(<parameter pos:start="1:24" pos:end="1:42"><decl pos:start="1:24" pos:end="1:42"><type pos:start="1:24" pos:end="1:42"><name pos:start="1:24" pos:end="1:37">VIOsPAPRDevice</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:42">dev</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:58"><decl pos:start="1:45" pos:end="1:58"><type pos:start="1:45" pos:end="1:58"><name pos:start="1:45" pos:end="1:52">uint64_t</name></type> <name pos:start="1:54" pos:end="1:58">taddr</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:69"><decl pos:start="1:61" pos:end="1:69"><type pos:start="1:61" pos:end="1:69"><name pos:start="1:61" pos:end="1:64">void</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:69">buf</name></decl></parameter>,

                       <parameter pos:start="3:24" pos:end="3:36"><decl pos:start="3:24" pos:end="3:36"><type pos:start="3:24" pos:end="3:36"><name pos:start="3:24" pos:end="3:31">uint32_t</name></type> <name pos:start="3:33" pos:end="3:36">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="103:1">{<block_content pos:start="9:5" pos:end="101:21">

<cpp:ifdef pos:start="7:1" pos:end="7:16">#<cpp:directive pos:start="7:2" pos:end="7:6">ifdef</cpp:directive> <name pos:start="7:8" pos:end="7:16">DEBUG_TCE</name></cpp:ifdef>

    <expr_stmt pos:start="9:5" pos:end="14:0"><expr pos:start="9:5" pos:end="11:44"><call pos:start="9:5" pos:end="11:44"><name pos:start="9:5" pos:end="9:11">fprintf</name><argument_list pos:start="9:12" pos:end="11:44">(<argument pos:start="9:13" pos:end="9:18"><expr pos:start="9:13" pos:end="9:18"><name pos:start="9:13" pos:end="9:18">stderr</name></expr></argument>, <argument pos:start="9:21" pos:end="9:66"><expr pos:start="9:21" pos:end="9:66"><literal type="string" pos:start="9:21" pos:end="9:66">"spapr_tce_dma_write taddr=0x%llx size=0x%x\n"</literal></expr></argument>,

            <argument pos:start="11:13" pos:end="11:37"><expr pos:start="11:13" pos:end="11:37"><operator pos:start="11:13" pos:end="11:13">(</operator><name pos:start="11:14" pos:end="11:21">unsigned</name> <name pos:start="11:23" pos:end="11:26">long</name> <name pos:start="11:28" pos:end="11:31">long</name><operator pos:start="11:32" pos:end="11:32">)</operator><name pos:start="11:33" pos:end="11:37">taddr</name></expr></argument>, <argument pos:start="11:40" pos:end="11:43"><expr pos:start="11:40" pos:end="11:43"><name pos:start="11:40" pos:end="11:43">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="13:1" pos:end="13:6">#<cpp:directive pos:start="13:2" pos:end="13:6">endif</cpp:directive></cpp:endif>



    <comment type="block" pos:start="17:5" pos:end="17:26">/* Check for bypass */</comment>

    <if_stmt pos:start="19:5" pos:end="25:5"><if pos:start="19:5" pos:end="25:5">if <condition pos:start="19:8" pos:end="19:46">(<expr pos:start="19:9" pos:end="19:45"><name pos:start="19:9" pos:end="19:18"><name pos:start="19:9" pos:end="19:11">dev</name><operator pos:start="19:12" pos:end="19:13">-&gt;</operator><name pos:start="19:14" pos:end="19:18">flags</name></name> <operator pos:start="19:20" pos:end="19:20">&amp;</operator> <name pos:start="19:22" pos:end="19:45">VIO_PAPR_FLAG_DMA_BYPASS</name></expr>)</condition> <block pos:start="19:48" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:17">

        <expr_stmt pos:start="21:9" pos:end="21:51"><expr pos:start="21:9" pos:end="21:50"><call pos:start="21:9" pos:end="21:50"><name pos:start="21:9" pos:end="21:32">cpu_physical_memory_read</name><argument_list pos:start="21:33" pos:end="21:50">(<argument pos:start="21:34" pos:end="21:38"><expr pos:start="21:34" pos:end="21:38"><name pos:start="21:34" pos:end="21:38">taddr</name></expr></argument>, <argument pos:start="21:41" pos:end="21:43"><expr pos:start="21:41" pos:end="21:43"><name pos:start="21:41" pos:end="21:43">buf</name></expr></argument>, <argument pos:start="21:46" pos:end="21:49"><expr pos:start="21:46" pos:end="21:49"><name pos:start="21:46" pos:end="21:49">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="23:17">return <expr pos:start="23:16" pos:end="23:16"><literal type="number" pos:start="23:16" pos:end="23:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <while pos:start="29:5" pos:end="99:5">while <condition pos:start="29:11" pos:end="29:16">(<expr pos:start="29:12" pos:end="29:15"><name pos:start="29:12" pos:end="29:15">size</name></expr>)</condition> <block pos:start="29:18" pos:end="99:5">{<block_content pos:start="31:9" pos:end="97:22">

        <decl_stmt pos:start="31:9" pos:end="31:21"><decl pos:start="31:9" pos:end="31:20"><type pos:start="31:9" pos:end="31:16"><name pos:start="31:9" pos:end="31:16">uint64_t</name></type> <name pos:start="31:18" pos:end="31:20">tce</name></decl>;</decl_stmt>

        <decl_stmt pos:start="33:9" pos:end="33:23"><decl pos:start="33:9" pos:end="33:22"><type pos:start="33:9" pos:end="33:16"><name pos:start="33:9" pos:end="33:16">uint32_t</name></type> <name pos:start="33:18" pos:end="33:22">lsize</name></decl>;</decl_stmt>

        <decl_stmt pos:start="35:9" pos:end="35:24"><decl pos:start="35:9" pos:end="35:23"><type pos:start="35:9" pos:end="35:16"><name pos:start="35:9" pos:end="35:16">uint64_t</name></type> <name pos:start="35:18" pos:end="35:23">txaddr</name></decl>;</decl_stmt>



        <comment type="block" pos:start="39:9" pos:end="39:38">/* Check if we are in bound */</comment>

        <if_stmt pos:start="41:9" pos:end="51:9"><if pos:start="41:9" pos:end="51:9">if <condition pos:start="41:12" pos:end="41:43">(<expr pos:start="41:13" pos:end="41:42"><name pos:start="41:13" pos:end="41:17">taddr</name> <operator pos:start="41:19" pos:end="41:20">&gt;=</operator> <name pos:start="41:22" pos:end="41:42"><name pos:start="41:22" pos:end="41:24">dev</name><operator pos:start="41:25" pos:end="41:26">-&gt;</operator><name pos:start="41:27" pos:end="41:42">rtce_window_size</name></name></expr>)</condition> <block pos:start="41:45" pos:end="51:9">{<block_content pos:start="45:13" pos:end="49:31">

<cpp:ifdef pos:start="43:1" pos:end="43:16">#<cpp:directive pos:start="43:2" pos:end="43:6">ifdef</cpp:directive> <name pos:start="43:8" pos:end="43:16">DEBUG_TCE</name></cpp:ifdef>

            <expr_stmt pos:start="45:13" pos:end="48:0"><expr pos:start="45:13" pos:end="45:65"><call pos:start="45:13" pos:end="45:65"><name pos:start="45:13" pos:end="45:19">fprintf</name><argument_list pos:start="45:20" pos:end="45:65">(<argument pos:start="45:21" pos:end="45:26"><expr pos:start="45:21" pos:end="45:26"><name pos:start="45:21" pos:end="45:26">stderr</name></expr></argument>, <argument pos:start="45:29" pos:end="45:64"><expr pos:start="45:29" pos:end="45:64"><literal type="string" pos:start="45:29" pos:end="45:64">"spapr_tce_dma_read out of bounds\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="47:1" pos:end="47:6">#<cpp:directive pos:start="47:2" pos:end="47:6">endif</cpp:directive></cpp:endif>

            <return pos:start="49:13" pos:end="49:31">return <expr pos:start="49:20" pos:end="49:30"><name pos:start="49:20" pos:end="49:30">H_DEST_PARM</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:69"><expr pos:start="53:9" pos:end="53:68"><name pos:start="53:9" pos:end="53:11">tce</name> <operator pos:start="53:13" pos:end="53:13">=</operator> <name pos:start="53:15" pos:end="53:64"><name pos:start="53:15" pos:end="53:17">dev</name><operator pos:start="53:18" pos:end="53:19">-&gt;</operator><name pos:start="53:20" pos:end="53:29">rtce_table</name><index pos:start="53:30" pos:end="53:64">[<expr pos:start="53:31" pos:end="53:63"><name pos:start="53:31" pos:end="53:35">taddr</name> <operator pos:start="53:37" pos:end="53:38">&gt;&gt;</operator> <name pos:start="53:40" pos:end="53:63">SPAPR_VIO_TCE_PAGE_SHIFT</name></expr>]</index></name><operator pos:start="53:65" pos:end="53:65">.</operator><name pos:start="53:66" pos:end="53:68">tce</name></expr>;</expr_stmt>



        <comment type="block" pos:start="57:9" pos:end="57:40">/* How much til end of page ? */</comment>

        <expr_stmt pos:start="59:9" pos:end="59:68"><expr pos:start="59:9" pos:end="59:67"><name pos:start="59:9" pos:end="59:13">lsize</name> <operator pos:start="59:15" pos:end="59:15">=</operator> <call pos:start="59:17" pos:end="59:67"><name pos:start="59:17" pos:end="59:19">MIN</name><argument_list pos:start="59:20" pos:end="59:67">(<argument pos:start="59:21" pos:end="59:24"><expr pos:start="59:21" pos:end="59:24"><name pos:start="59:21" pos:end="59:24">size</name></expr></argument>, <argument pos:start="59:27" pos:end="59:66"><expr pos:start="59:27" pos:end="59:66"><operator pos:start="59:27" pos:end="59:27">(</operator><operator pos:start="59:28" pos:end="59:28">(</operator><operator pos:start="59:29" pos:end="59:29">~</operator><name pos:start="59:30" pos:end="59:34">taddr</name><operator pos:start="59:35" pos:end="59:35">)</operator> <operator pos:start="59:37" pos:end="59:37">&amp;</operator> <name pos:start="59:39" pos:end="59:61">SPAPR_VIO_TCE_PAGE_MASK</name><operator pos:start="59:62" pos:end="59:62">)</operator> <operator pos:start="59:64" pos:end="59:64">+</operator> <literal type="number" pos:start="59:66" pos:end="59:66">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="63:9" pos:end="63:23">/* Check TCE */</comment>

        <if_stmt pos:start="65:9" pos:end="69:9"><if pos:start="65:9" pos:end="69:9">if <condition pos:start="65:12" pos:end="65:23">(<expr pos:start="65:13" pos:end="65:22"><operator pos:start="65:13" pos:end="65:13">!</operator><operator pos:start="65:14" pos:end="65:14">(</operator><name pos:start="65:15" pos:end="65:17">tce</name> <operator pos:start="65:19" pos:end="65:19">&amp;</operator> <literal type="number" pos:start="65:21" pos:end="65:21">1</literal><operator pos:start="65:22" pos:end="65:22">)</operator></expr>)</condition> <block pos:start="65:25" pos:end="69:9">{<block_content pos:start="67:13" pos:end="67:31">

            <return pos:start="67:13" pos:end="67:31">return <expr pos:start="67:20" pos:end="67:30"><name pos:start="67:20" pos:end="67:30">H_DEST_PARM</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="73:9" pos:end="73:23">/* Translate */</comment>

        <expr_stmt pos:start="75:9" pos:end="82:0"><expr pos:start="75:9" pos:end="77:45"><name pos:start="75:9" pos:end="75:14">txaddr</name> <operator pos:start="75:16" pos:end="75:16">=</operator> <operator pos:start="75:18" pos:end="75:18">(</operator><name pos:start="75:19" pos:end="75:21">tce</name> <operator pos:start="75:23" pos:end="75:23">&amp;</operator> <operator pos:start="75:25" pos:end="75:25">~</operator><name pos:start="75:26" pos:end="75:48">SPAPR_VIO_TCE_PAGE_MASK</name><operator pos:start="75:49" pos:end="75:49">)</operator> <operator pos:start="75:51" pos:end="75:51">|</operator>

            <operator pos:start="77:13" pos:end="77:13">(</operator><name pos:start="77:14" pos:end="77:18">taddr</name> <operator pos:start="77:20" pos:end="77:20">&amp;</operator> <name pos:start="77:22" pos:end="77:44">SPAPR_VIO_TCE_PAGE_MASK</name><operator pos:start="77:45" pos:end="77:45">)</operator></expr>;</expr_stmt>



<cpp:ifdef pos:start="81:1" pos:end="81:16">#<cpp:directive pos:start="81:2" pos:end="81:6">ifdef</cpp:directive> <name pos:start="81:8" pos:end="81:16">DEBUG_TCE</name></cpp:ifdef>

        <expr_stmt pos:start="83:9" pos:end="88:0"><expr pos:start="83:9" pos:end="85:50"><call pos:start="83:9" pos:end="85:50"><name pos:start="83:9" pos:end="83:15">fprintf</name><argument_list pos:start="83:16" pos:end="85:50">(<argument pos:start="83:17" pos:end="83:22"><expr pos:start="83:17" pos:end="83:22"><name pos:start="83:17" pos:end="83:22">stderr</name></expr></argument>, <argument pos:start="83:25" pos:end="83:65"><expr pos:start="83:25" pos:end="83:65"><literal type="string" pos:start="83:25" pos:end="83:65">" -&gt; write to txaddr=0x%llx, size=0x%x\n"</literal></expr></argument>,

                <argument pos:start="85:17" pos:end="85:42"><expr pos:start="85:17" pos:end="85:42"><operator pos:start="85:17" pos:end="85:17">(</operator><name pos:start="85:18" pos:end="85:25">unsigned</name> <name pos:start="85:27" pos:end="85:30">long</name> <name pos:start="85:32" pos:end="85:35">long</name><operator pos:start="85:36" pos:end="85:36">)</operator><name pos:start="85:37" pos:end="85:42">txaddr</name></expr></argument>, <argument pos:start="85:45" pos:end="85:49"><expr pos:start="85:45" pos:end="85:49"><name pos:start="85:45" pos:end="85:49">lsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="87:1" pos:end="87:6">#<cpp:directive pos:start="87:2" pos:end="87:6">endif</cpp:directive></cpp:endif>

        <comment type="block" pos:start="89:9" pos:end="89:19">/* Do it */</comment>

        <expr_stmt pos:start="91:9" pos:end="91:53"><expr pos:start="91:9" pos:end="91:52"><call pos:start="91:9" pos:end="91:52"><name pos:start="91:9" pos:end="91:32">cpu_physical_memory_read</name><argument_list pos:start="91:33" pos:end="91:52">(<argument pos:start="91:34" pos:end="91:39"><expr pos:start="91:34" pos:end="91:39"><name pos:start="91:34" pos:end="91:39">txaddr</name></expr></argument>, <argument pos:start="91:42" pos:end="91:44"><expr pos:start="91:42" pos:end="91:44"><name pos:start="91:42" pos:end="91:44">buf</name></expr></argument>, <argument pos:start="91:47" pos:end="91:51"><expr pos:start="91:47" pos:end="91:51"><name pos:start="91:47" pos:end="91:51">lsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:21"><expr pos:start="93:9" pos:end="93:20"><name pos:start="93:9" pos:end="93:11">buf</name> <operator pos:start="93:13" pos:end="93:14">+=</operator> <name pos:start="93:16" pos:end="93:20">lsize</name></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:23"><expr pos:start="95:9" pos:end="95:22"><name pos:start="95:9" pos:end="95:13">taddr</name> <operator pos:start="95:15" pos:end="95:16">+=</operator> <name pos:start="95:18" pos:end="95:22">lsize</name></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:22"><expr pos:start="97:9" pos:end="97:21"><name pos:start="97:9" pos:end="97:12">size</name> <operator pos:start="97:14" pos:end="97:15">-=</operator> <name pos:start="97:17" pos:end="97:21">lsize</name></expr>;</expr_stmt>

    </block_content>}</block></while>

    <return pos:start="101:5" pos:end="101:21">return <expr pos:start="101:12" pos:end="101:20"><name pos:start="101:12" pos:end="101:20">H_SUCCESS</name></expr>;</return>

</block_content>}</block></function>
</unit>
