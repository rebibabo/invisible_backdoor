<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25779.c" pos:tabs="8"><function pos:start="1:1" pos:end="81:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">sd_snapshot_goto</name><parameter_list pos:start="1:28" pos:end="1:74">(<parameter pos:start="1:29" pos:end="1:48"><decl pos:start="1:29" pos:end="1:48"><type pos:start="1:29" pos:end="1:48"><name pos:start="1:29" pos:end="1:44">BlockDriverState</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:48">bs</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:73"><decl pos:start="1:51" pos:end="1:73"><type pos:start="1:51" pos:end="1:73"><specifier pos:start="1:51" pos:end="1:55">const</specifier> <name pos:start="1:57" pos:end="1:60">char</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:73">snapshot_id</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="81:1">{<block_content pos:start="5:5" pos:end="79:15">

    <decl_stmt pos:start="5:5" pos:end="5:38"><decl pos:start="5:5" pos:end="5:37"><type pos:start="5:5" pos:end="5:23"><name pos:start="5:5" pos:end="5:21">BDRVSheepdogState</name> <modifier pos:start="5:23" pos:end="5:23">*</modifier></type><name pos:start="5:24" pos:end="5:24">s</name> <init pos:start="5:26" pos:end="5:37">= <expr pos:start="5:28" pos:end="5:37"><name pos:start="5:28" pos:end="5:37"><name pos:start="5:28" pos:end="5:29">bs</name><operator pos:start="5:30" pos:end="5:31">-&gt;</operator><name pos:start="5:32" pos:end="5:37">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:28"><type pos:start="7:5" pos:end="7:23"><name pos:start="7:5" pos:end="7:21">BDRVSheepdogState</name> <modifier pos:start="7:23" pos:end="7:23">*</modifier></type><name pos:start="7:24" pos:end="7:28">old_s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:33"><decl pos:start="9:5" pos:end="9:32"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">char</name></type> <name pos:start="9:10" pos:end="9:32"><name pos:start="9:10" pos:end="9:12">tag</name><index pos:start="9:13" pos:end="9:32">[<expr pos:start="9:14" pos:end="9:31"><name pos:start="9:14" pos:end="9:31">SD_MAX_VDI_TAG_LEN</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:24"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:19">snapid</name> <init pos:start="11:21" pos:end="11:23">= <expr pos:start="11:23" pos:end="11:23"><literal type="number" pos:start="11:23" pos:end="11:23">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:16"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name> <init pos:start="13:13" pos:end="13:15">= <expr pos:start="13:15" pos:end="13:15"><literal type="number" pos:start="13:15" pos:end="13:15">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:48"><expr pos:start="17:5" pos:end="17:47"><name pos:start="17:5" pos:end="17:9">old_s</name> <operator pos:start="17:11" pos:end="17:11">=</operator> <call pos:start="17:13" pos:end="17:47"><name pos:start="17:13" pos:end="17:20">g_malloc</name><argument_list pos:start="17:21" pos:end="17:47">(<argument pos:start="17:22" pos:end="17:46"><expr pos:start="17:22" pos:end="17:46"><sizeof pos:start="17:22" pos:end="17:46">sizeof<argument_list pos:start="17:28" pos:end="17:46">(<argument pos:start="17:29" pos:end="17:45"><expr pos:start="17:29" pos:end="17:45"><name pos:start="17:29" pos:end="17:45">BDRVSheepdogState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:48"><expr pos:start="21:5" pos:end="21:47"><call pos:start="21:5" pos:end="21:47"><name pos:start="21:5" pos:end="21:10">memcpy</name><argument_list pos:start="21:11" pos:end="21:47">(<argument pos:start="21:12" pos:end="21:16"><expr pos:start="21:12" pos:end="21:16"><name pos:start="21:12" pos:end="21:16">old_s</name></expr></argument>, <argument pos:start="21:19" pos:end="21:19"><expr pos:start="21:19" pos:end="21:19"><name pos:start="21:19" pos:end="21:19">s</name></expr></argument>, <argument pos:start="21:22" pos:end="21:46"><expr pos:start="21:22" pos:end="21:46"><sizeof pos:start="21:22" pos:end="21:46">sizeof<argument_list pos:start="21:28" pos:end="21:46">(<argument pos:start="21:29" pos:end="21:45"><expr pos:start="21:29" pos:end="21:45"><name pos:start="21:29" pos:end="21:45">BDRVSheepdogState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:44"><expr pos:start="25:5" pos:end="25:43"><name pos:start="25:5" pos:end="25:10">snapid</name> <operator pos:start="25:12" pos:end="25:12">=</operator> <call pos:start="25:14" pos:end="25:43"><name pos:start="25:14" pos:end="25:20">strtoul</name><argument_list pos:start="25:21" pos:end="25:43">(<argument pos:start="25:22" pos:end="25:32"><expr pos:start="25:22" pos:end="25:32"><name pos:start="25:22" pos:end="25:32">snapshot_id</name></expr></argument>, <argument pos:start="25:35" pos:end="25:38"><expr pos:start="25:35" pos:end="25:38"><name pos:start="25:35" pos:end="25:38">NULL</name></expr></argument>, <argument pos:start="25:41" pos:end="25:42"><expr pos:start="25:41" pos:end="25:42"><literal type="number" pos:start="25:41" pos:end="25:42">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="35:5"><if pos:start="27:5" pos:end="31:5">if <condition pos:start="27:8" pos:end="27:15">(<expr pos:start="27:9" pos:end="27:14"><name pos:start="27:9" pos:end="27:14">snapid</name></expr>)</condition> <block pos:start="27:17" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:19">

        <expr_stmt pos:start="29:9" pos:end="29:19"><expr pos:start="29:9" pos:end="29:18"><name pos:start="29:9" pos:end="29:14"><name pos:start="29:9" pos:end="29:11">tag</name><index pos:start="29:12" pos:end="29:14">[<expr pos:start="29:13" pos:end="29:13"><literal type="number" pos:start="29:13" pos:end="29:13">0</literal></expr>]</index></name> <operator pos:start="29:16" pos:end="29:16">=</operator> <literal type="number" pos:start="29:18" pos:end="29:18">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="31:7" pos:end="35:5">else <block pos:start="31:12" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:47">

        <expr_stmt pos:start="33:9" pos:end="33:47"><expr pos:start="33:9" pos:end="33:46"><call pos:start="33:9" pos:end="33:46"><name pos:start="33:9" pos:end="33:15">pstrcpy</name><argument_list pos:start="33:16" pos:end="33:46">(<argument pos:start="33:17" pos:end="33:19"><expr pos:start="33:17" pos:end="33:19"><name pos:start="33:17" pos:end="33:19">tag</name></expr></argument>, <argument pos:start="33:22" pos:end="33:32"><expr pos:start="33:22" pos:end="33:32"><sizeof pos:start="33:22" pos:end="33:32">sizeof<argument_list pos:start="33:28" pos:end="33:32">(<argument pos:start="33:29" pos:end="33:31"><expr pos:start="33:29" pos:end="33:31"><name pos:start="33:29" pos:end="33:31">tag</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="33:35" pos:end="33:45"><expr pos:start="33:35" pos:end="33:45"><name pos:start="33:35" pos:end="33:45">snapshot_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:39"><expr pos:start="39:5" pos:end="39:38"><name pos:start="39:5" pos:end="39:7">ret</name> <operator pos:start="39:9" pos:end="39:9">=</operator> <call pos:start="39:11" pos:end="39:38"><name pos:start="39:11" pos:end="39:22">reload_inode</name><argument_list pos:start="39:23" pos:end="39:38">(<argument pos:start="39:24" pos:end="39:24"><expr pos:start="39:24" pos:end="39:24"><name pos:start="39:24" pos:end="39:24">s</name></expr></argument>, <argument pos:start="39:27" pos:end="39:32"><expr pos:start="39:27" pos:end="39:32"><name pos:start="39:27" pos:end="39:32">snapid</name></expr></argument>, <argument pos:start="39:35" pos:end="39:37"><expr pos:start="39:35" pos:end="39:37"><name pos:start="39:35" pos:end="39:37">tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="45:5"><if pos:start="41:5" pos:end="45:5">if <condition pos:start="41:8" pos:end="41:12">(<expr pos:start="41:9" pos:end="41:11"><name pos:start="41:9" pos:end="41:11">ret</name></expr>)</condition> <block pos:start="41:14" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:17">

        <goto pos:start="43:9" pos:end="43:17">goto <name pos:start="43:14" pos:end="43:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:30"><expr pos:start="49:5" pos:end="49:29"><name pos:start="49:5" pos:end="49:7">ret</name> <operator pos:start="49:9" pos:end="49:9">=</operator> <call pos:start="49:11" pos:end="49:29"><name pos:start="49:11" pos:end="49:26">sd_create_branch</name><argument_list pos:start="49:27" pos:end="49:29">(<argument pos:start="49:28" pos:end="49:28"><expr pos:start="49:28" pos:end="49:28"><name pos:start="49:28" pos:end="49:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="51:5" pos:end="55:5"><if pos:start="51:5" pos:end="55:5">if <condition pos:start="51:8" pos:end="51:12">(<expr pos:start="51:9" pos:end="51:11"><name pos:start="51:9" pos:end="51:11">ret</name></expr>)</condition> <block pos:start="51:14" pos:end="55:5">{<block_content pos:start="53:9" pos:end="53:17">

        <goto pos:start="53:9" pos:end="53:17">goto <name pos:start="53:14" pos:end="53:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:18"><expr pos:start="59:5" pos:end="59:17"><call pos:start="59:5" pos:end="59:17"><name pos:start="59:5" pos:end="59:10">g_free</name><argument_list pos:start="59:11" pos:end="59:17">(<argument pos:start="59:12" pos:end="59:16"><expr pos:start="59:12" pos:end="59:16"><name pos:start="59:12" pos:end="59:16">old_s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="63:5" pos:end="63:13">return <expr pos:start="63:12" pos:end="63:12"><literal type="number" pos:start="63:12" pos:end="63:12">0</literal></expr>;</return>

<label pos:start="65:1" pos:end="65:4"><name pos:start="65:1" pos:end="65:3">out</name>:</label>

    <comment type="block" pos:start="67:5" pos:end="67:31">/* recover bdrv_sd_state */</comment>

    <expr_stmt pos:start="69:5" pos:end="69:48"><expr pos:start="69:5" pos:end="69:47"><call pos:start="69:5" pos:end="69:47"><name pos:start="69:5" pos:end="69:10">memcpy</name><argument_list pos:start="69:11" pos:end="69:47">(<argument pos:start="69:12" pos:end="69:12"><expr pos:start="69:12" pos:end="69:12"><name pos:start="69:12" pos:end="69:12">s</name></expr></argument>, <argument pos:start="69:15" pos:end="69:19"><expr pos:start="69:15" pos:end="69:19"><name pos:start="69:15" pos:end="69:19">old_s</name></expr></argument>, <argument pos:start="69:22" pos:end="69:46"><expr pos:start="69:22" pos:end="69:46"><sizeof pos:start="69:22" pos:end="69:46">sizeof<argument_list pos:start="69:28" pos:end="69:46">(<argument pos:start="69:29" pos:end="69:45"><expr pos:start="69:29" pos:end="69:45"><name pos:start="69:29" pos:end="69:45">BDRVSheepdogState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:18"><expr pos:start="71:5" pos:end="71:17"><call pos:start="71:5" pos:end="71:17"><name pos:start="71:5" pos:end="71:10">g_free</name><argument_list pos:start="71:11" pos:end="71:17">(<argument pos:start="71:12" pos:end="71:16"><expr pos:start="71:12" pos:end="71:16"><name pos:start="71:12" pos:end="71:16">old_s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="75:5" pos:end="75:63"><expr pos:start="75:5" pos:end="75:62"><call pos:start="75:5" pos:end="75:62"><name pos:start="75:5" pos:end="75:16">error_report</name><argument_list pos:start="75:17" pos:end="75:62">(<argument pos:start="75:18" pos:end="75:61"><expr pos:start="75:18" pos:end="75:61"><literal type="string" pos:start="75:18" pos:end="75:61">"failed to open. recover old bdrv_sd_state."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="79:5" pos:end="79:15">return <expr pos:start="79:12" pos:end="79:14"><name pos:start="79:12" pos:end="79:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
