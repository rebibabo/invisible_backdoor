<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26499.c" pos:tabs="8"><function pos:start="1:1" pos:end="131:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:20">vmdk_open</name><parameter_list pos:start="1:21" pos:end="3:34">(<parameter pos:start="1:22" pos:end="1:41"><decl pos:start="1:22" pos:end="1:41"><type pos:start="1:22" pos:end="1:41"><name pos:start="1:22" pos:end="1:37">BlockDriverState</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:41">bs</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:57"><decl pos:start="1:44" pos:end="1:57"><type pos:start="1:44" pos:end="1:57"><name pos:start="1:44" pos:end="1:48">QDict</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:57">options</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:68"><decl pos:start="1:60" pos:end="1:68"><type pos:start="1:60" pos:end="1:68"><name pos:start="1:60" pos:end="1:62">int</name></type> <name pos:start="1:64" pos:end="1:68">flags</name></decl></parameter>,

                     <parameter pos:start="3:22" pos:end="3:33"><decl pos:start="3:22" pos:end="3:33"><type pos:start="3:22" pos:end="3:33"><name pos:start="3:22" pos:end="3:26">Error</name> <modifier pos:start="3:28" pos:end="3:28">*</modifier><modifier pos:start="3:29" pos:end="3:29">*</modifier></type><name pos:start="3:30" pos:end="3:33">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="131:1">{<block_content pos:start="7:5" pos:end="129:15">

    <decl_stmt pos:start="7:5" pos:end="7:14"><decl pos:start="7:5" pos:end="7:13"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">char</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:13">buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:34"><decl pos:start="11:5" pos:end="11:33"><type pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:17">BDRVVmdkState</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:20">s</name> <init pos:start="11:22" pos:end="11:33">= <expr pos:start="11:24" pos:end="11:33"><name pos:start="11:24" pos:end="11:33"><name pos:start="11:24" pos:end="11:25">bs</name><operator pos:start="11:26" pos:end="11:27">-&gt;</operator><name pos:start="11:28" pos:end="11:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:18">magic</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:9">Error</name> <modifier pos:start="15:11" pos:end="15:11">*</modifier></type><name pos:start="15:12" pos:end="15:20">local_err</name> <init pos:start="15:22" pos:end="15:27">= <expr pos:start="15:24" pos:end="15:27"><name pos:start="15:24" pos:end="15:27">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="21:44"><expr pos:start="19:5" pos:end="21:43"><name pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:6">bs</name><operator pos:start="19:7" pos:end="19:8">-&gt;</operator><name pos:start="19:9" pos:end="19:12">file</name></name> <operator pos:start="19:14" pos:end="19:14">=</operator> <call pos:start="19:16" pos:end="21:43"><name pos:start="19:16" pos:end="19:30">bdrv_open_child</name><argument_list pos:start="19:31" pos:end="21:43">(<argument pos:start="19:32" pos:end="19:35"><expr pos:start="19:32" pos:end="19:35"><name pos:start="19:32" pos:end="19:35">NULL</name></expr></argument>, <argument pos:start="19:38" pos:end="19:44"><expr pos:start="19:38" pos:end="19:44"><name pos:start="19:38" pos:end="19:44">options</name></expr></argument>, <argument pos:start="19:47" pos:end="19:52"><expr pos:start="19:47" pos:end="19:52"><literal type="string" pos:start="19:47" pos:end="19:52">"file"</literal></expr></argument>, <argument pos:start="19:55" pos:end="19:56"><expr pos:start="19:55" pos:end="19:56"><name pos:start="19:55" pos:end="19:56">bs</name></expr></argument>, <argument pos:start="19:59" pos:end="19:69"><expr pos:start="19:59" pos:end="19:69"><operator pos:start="19:59" pos:end="19:59">&amp;</operator><name pos:start="19:60" pos:end="19:69">child_file</name></expr></argument>,

                               <argument pos:start="21:32" pos:end="21:36"><expr pos:start="21:32" pos:end="21:36"><name pos:start="21:32" pos:end="21:36">false</name></expr></argument>, <argument pos:start="21:39" pos:end="21:42"><expr pos:start="21:39" pos:end="21:42"><name pos:start="21:39" pos:end="21:42">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="27:5"><if pos:start="23:5" pos:end="27:5">if <condition pos:start="23:8" pos:end="23:18">(<expr pos:start="23:9" pos:end="23:17"><operator pos:start="23:9" pos:end="23:9">!</operator><name pos:start="23:10" pos:end="23:17"><name pos:start="23:10" pos:end="23:11">bs</name><operator pos:start="23:12" pos:end="23:13">-&gt;</operator><name pos:start="23:14" pos:end="23:17">file</name></name></expr>)</condition> <block pos:start="23:20" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:23">

        <return pos:start="25:9" pos:end="25:23">return <expr pos:start="25:16" pos:end="25:22"><operator pos:start="25:16" pos:end="25:16">-</operator><name pos:start="25:17" pos:end="25:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:44"><expr pos:start="31:5" pos:end="31:43"><name pos:start="31:5" pos:end="31:7">buf</name> <operator pos:start="31:9" pos:end="31:9">=</operator> <call pos:start="31:11" pos:end="31:43"><name pos:start="31:11" pos:end="31:24">vmdk_read_desc</name><argument_list pos:start="31:25" pos:end="31:43">(<argument pos:start="31:26" pos:end="31:33"><expr pos:start="31:26" pos:end="31:33"><name pos:start="31:26" pos:end="31:33"><name pos:start="31:26" pos:end="31:27">bs</name><operator pos:start="31:28" pos:end="31:29">-&gt;</operator><name pos:start="31:30" pos:end="31:33">file</name></name></expr></argument>, <argument pos:start="31:36" pos:end="31:36"><expr pos:start="31:36" pos:end="31:36"><literal type="number" pos:start="31:36" pos:end="31:36">0</literal></expr></argument>, <argument pos:start="31:39" pos:end="31:42"><expr pos:start="31:39" pos:end="31:42"><name pos:start="31:39" pos:end="31:42">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="37:5"><if pos:start="33:5" pos:end="37:5">if <condition pos:start="33:8" pos:end="33:13">(<expr pos:start="33:9" pos:end="33:12"><operator pos:start="33:9" pos:end="33:9">!</operator><name pos:start="33:10" pos:end="33:12">buf</name></expr>)</condition> <block pos:start="33:15" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:23">

        <return pos:start="35:9" pos:end="35:23">return <expr pos:start="35:16" pos:end="35:22"><operator pos:start="35:16" pos:end="35:16">-</operator><name pos:start="35:17" pos:end="35:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:26"><expr pos:start="41:5" pos:end="41:25"><name pos:start="41:5" pos:end="41:9">magic</name> <operator pos:start="41:11" pos:end="41:11">=</operator> <call pos:start="41:13" pos:end="41:25"><name pos:start="41:13" pos:end="41:20">ldl_be_p</name><argument_list pos:start="41:21" pos:end="41:25">(<argument pos:start="41:22" pos:end="41:24"><expr pos:start="41:22" pos:end="41:24"><name pos:start="41:22" pos:end="41:24">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch pos:start="43:5" pos:end="63:5">switch <condition pos:start="43:12" pos:end="43:18">(<expr pos:start="43:13" pos:end="43:17"><name pos:start="43:13" pos:end="43:17">magic</name></expr>)</condition> <block pos:start="43:20" pos:end="63:5">{<block_content pos:start="45:9" pos:end="61:18">

        <case pos:start="45:9" pos:end="45:25">case <expr pos:start="45:14" pos:end="45:24"><name pos:start="45:14" pos:end="45:24">VMDK3_MAGIC</name></expr>:</case>

        <case pos:start="47:9" pos:end="47:25">case <expr pos:start="47:14" pos:end="47:24"><name pos:start="47:14" pos:end="47:24">VMDK4_MAGIC</name></expr>:</case>

            <expr_stmt pos:start="49:13" pos:end="51:41"><expr pos:start="49:13" pos:end="51:40"><name pos:start="49:13" pos:end="49:15">ret</name> <operator pos:start="49:17" pos:end="49:17">=</operator> <call pos:start="49:19" pos:end="51:40"><name pos:start="49:19" pos:end="49:34">vmdk_open_sparse</name><argument_list pos:start="49:35" pos:end="51:40">(<argument pos:start="49:36" pos:end="49:37"><expr pos:start="49:36" pos:end="49:37"><name pos:start="49:36" pos:end="49:37">bs</name></expr></argument>, <argument pos:start="49:40" pos:end="49:47"><expr pos:start="49:40" pos:end="49:47"><name pos:start="49:40" pos:end="49:47"><name pos:start="49:40" pos:end="49:41">bs</name><operator pos:start="49:42" pos:end="49:43">-&gt;</operator><name pos:start="49:44" pos:end="49:47">file</name></name></expr></argument>, <argument pos:start="49:50" pos:end="49:54"><expr pos:start="49:50" pos:end="49:54"><name pos:start="49:50" pos:end="49:54">flags</name></expr></argument>, <argument pos:start="49:57" pos:end="49:59"><expr pos:start="49:57" pos:end="49:59"><name pos:start="49:57" pos:end="49:59">buf</name></expr></argument>, <argument pos:start="49:62" pos:end="49:68"><expr pos:start="49:62" pos:end="49:68"><name pos:start="49:62" pos:end="49:68">options</name></expr></argument>,

                                   <argument pos:start="51:36" pos:end="51:39"><expr pos:start="51:36" pos:end="51:39"><name pos:start="51:36" pos:end="51:39">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:35"><expr pos:start="53:13" pos:end="53:34"><name pos:start="53:13" pos:end="53:26"><name pos:start="53:13" pos:end="53:13">s</name><operator pos:start="53:14" pos:end="53:15">-&gt;</operator><name pos:start="53:16" pos:end="53:26">desc_offset</name></name> <operator pos:start="53:28" pos:end="53:28">=</operator> <literal type="number" pos:start="53:30" pos:end="53:34">0x200</literal></expr>;</expr_stmt>

            <break pos:start="55:13" pos:end="55:18">break;</break>

        <default pos:start="57:9" pos:end="57:16">default:</default>

            <expr_stmt pos:start="59:13" pos:end="59:69"><expr pos:start="59:13" pos:end="59:68"><name pos:start="59:13" pos:end="59:15">ret</name> <operator pos:start="59:17" pos:end="59:17">=</operator> <call pos:start="59:19" pos:end="59:68"><name pos:start="59:19" pos:end="59:37">vmdk_open_desc_file</name><argument_list pos:start="59:38" pos:end="59:68">(<argument pos:start="59:39" pos:end="59:40"><expr pos:start="59:39" pos:end="59:40"><name pos:start="59:39" pos:end="59:40">bs</name></expr></argument>, <argument pos:start="59:43" pos:end="59:47"><expr pos:start="59:43" pos:end="59:47"><name pos:start="59:43" pos:end="59:47">flags</name></expr></argument>, <argument pos:start="59:50" pos:end="59:52"><expr pos:start="59:50" pos:end="59:52"><name pos:start="59:50" pos:end="59:52">buf</name></expr></argument>, <argument pos:start="59:55" pos:end="59:61"><expr pos:start="59:55" pos:end="59:61"><name pos:start="59:55" pos:end="59:61">options</name></expr></argument>, <argument pos:start="59:64" pos:end="59:67"><expr pos:start="59:64" pos:end="59:67"><name pos:start="59:64" pos:end="59:67">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="61:13" pos:end="61:18">break;</break>

    </block_content>}</block></switch>

    <if_stmt pos:start="65:5" pos:end="69:5"><if pos:start="65:5" pos:end="69:5">if <condition pos:start="65:8" pos:end="65:12">(<expr pos:start="65:9" pos:end="65:11"><name pos:start="65:9" pos:end="65:11">ret</name></expr>)</condition> <block pos:start="65:14" pos:end="69:5">{<block_content pos:start="67:9" pos:end="67:18">

        <goto pos:start="67:9" pos:end="67:18">goto <name pos:start="67:14" pos:end="67:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="73:5" pos:end="73:45">/* try to open parent images, if exist */</comment>

    <expr_stmt pos:start="75:5" pos:end="75:31"><expr pos:start="75:5" pos:end="75:30"><name pos:start="75:5" pos:end="75:7">ret</name> <operator pos:start="75:9" pos:end="75:9">=</operator> <call pos:start="75:11" pos:end="75:30"><name pos:start="75:11" pos:end="75:26">vmdk_parent_open</name><argument_list pos:start="75:27" pos:end="75:30">(<argument pos:start="75:28" pos:end="75:29"><expr pos:start="75:28" pos:end="75:29"><name pos:start="75:28" pos:end="75:29">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="77:5" pos:end="81:5"><if pos:start="77:5" pos:end="81:5">if <condition pos:start="77:8" pos:end="77:12">(<expr pos:start="77:9" pos:end="77:11"><name pos:start="77:9" pos:end="77:11">ret</name></expr>)</condition> <block pos:start="77:14" pos:end="81:5">{<block_content pos:start="79:9" pos:end="79:18">

        <goto pos:start="79:9" pos:end="79:18">goto <name pos:start="79:14" pos:end="79:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:34"><expr pos:start="83:5" pos:end="83:33"><name pos:start="83:5" pos:end="83:10"><name pos:start="83:5" pos:end="83:5">s</name><operator pos:start="83:6" pos:end="83:7">-&gt;</operator><name pos:start="83:8" pos:end="83:10">cid</name></name> <operator pos:start="83:12" pos:end="83:12">=</operator> <call pos:start="83:14" pos:end="83:33"><name pos:start="83:14" pos:end="83:26">vmdk_read_cid</name><argument_list pos:start="83:27" pos:end="83:33">(<argument pos:start="83:28" pos:end="83:29"><expr pos:start="83:28" pos:end="83:29"><name pos:start="83:28" pos:end="83:29">bs</name></expr></argument>, <argument pos:start="83:32" pos:end="83:32"><expr pos:start="83:32" pos:end="83:32"><literal type="number" pos:start="83:32" pos:end="83:32">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:41"><expr pos:start="85:5" pos:end="85:40"><name pos:start="85:5" pos:end="85:17"><name pos:start="85:5" pos:end="85:5">s</name><operator pos:start="85:6" pos:end="85:7">-&gt;</operator><name pos:start="85:8" pos:end="85:17">parent_cid</name></name> <operator pos:start="85:19" pos:end="85:19">=</operator> <call pos:start="85:21" pos:end="85:40"><name pos:start="85:21" pos:end="85:33">vmdk_read_cid</name><argument_list pos:start="85:34" pos:end="85:40">(<argument pos:start="85:35" pos:end="85:36"><expr pos:start="85:35" pos:end="85:36"><name pos:start="85:35" pos:end="85:36">bs</name></expr></argument>, <argument pos:start="85:39" pos:end="85:39"><expr pos:start="85:39" pos:end="85:39"><literal type="number" pos:start="85:39" pos:end="85:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:33"><expr pos:start="87:5" pos:end="87:32"><call pos:start="87:5" pos:end="87:32"><name pos:start="87:5" pos:end="87:22">qemu_co_mutex_init</name><argument_list pos:start="87:23" pos:end="87:32">(<argument pos:start="87:24" pos:end="87:31"><expr pos:start="87:24" pos:end="87:31"><operator pos:start="87:24" pos:end="87:24">&amp;</operator><name pos:start="87:25" pos:end="87:31"><name pos:start="87:25" pos:end="87:25">s</name><operator pos:start="87:26" pos:end="87:27">-&gt;</operator><name pos:start="87:28" pos:end="87:31">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="91:5" pos:end="91:53">/* Disable migration when VMDK images are used */</comment>

    <expr_stmt pos:start="93:5" pos:end="97:49"><expr pos:start="93:5" pos:end="97:48"><call pos:start="93:5" pos:end="97:48"><name pos:start="93:5" pos:end="93:14">error_setg</name><argument_list pos:start="93:15" pos:end="97:48">(<argument pos:start="93:16" pos:end="93:36"><expr pos:start="93:16" pos:end="93:36"><operator pos:start="93:16" pos:end="93:16">&amp;</operator><name pos:start="93:17" pos:end="93:36"><name pos:start="93:17" pos:end="93:17">s</name><operator pos:start="93:18" pos:end="93:19">-&gt;</operator><name pos:start="93:20" pos:end="93:36">migration_blocker</name></name></expr></argument>, <argument pos:start="93:39" pos:end="95:48"><expr pos:start="93:39" pos:end="95:48"><literal type="string" pos:start="93:39" pos:end="93:74">"The vmdk format used by node '%s' "</literal>

               <literal type="string" pos:start="95:16" pos:end="95:48">"does not support live migration"</literal></expr></argument>,

               <argument pos:start="97:16" pos:end="97:47"><expr pos:start="97:16" pos:end="97:47"><call pos:start="97:16" pos:end="97:47"><name pos:start="97:16" pos:end="97:43">bdrv_get_device_or_node_name</name><argument_list pos:start="97:44" pos:end="97:47">(<argument pos:start="97:45" pos:end="97:46"><expr pos:start="97:45" pos:end="97:46"><name pos:start="97:45" pos:end="97:46">bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:64"><expr pos:start="99:5" pos:end="99:63"><name pos:start="99:5" pos:end="99:7">ret</name> <operator pos:start="99:9" pos:end="99:9">=</operator> <call pos:start="99:11" pos:end="99:63"><name pos:start="99:11" pos:end="99:29">migrate_add_blocker</name><argument_list pos:start="99:30" pos:end="99:63">(<argument pos:start="99:31" pos:end="99:50"><expr pos:start="99:31" pos:end="99:50"><name pos:start="99:31" pos:end="99:50"><name pos:start="99:31" pos:end="99:31">s</name><operator pos:start="99:32" pos:end="99:33">-&gt;</operator><name pos:start="99:34" pos:end="99:50">migration_blocker</name></name></expr></argument>, <argument pos:start="99:53" pos:end="99:62"><expr pos:start="99:53" pos:end="99:62"><operator pos:start="99:53" pos:end="99:53">&amp;</operator><name pos:start="99:54" pos:end="99:62">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="101:5" pos:end="109:5"><if pos:start="101:5" pos:end="109:5">if <condition pos:start="101:8" pos:end="101:18">(<expr pos:start="101:9" pos:end="101:17"><name pos:start="101:9" pos:end="101:17">local_err</name></expr>)</condition> <block pos:start="101:20" pos:end="109:5">{<block_content pos:start="103:9" pos:end="107:18">

        <expr_stmt pos:start="103:9" pos:end="103:41"><expr pos:start="103:9" pos:end="103:40"><call pos:start="103:9" pos:end="103:40"><name pos:start="103:9" pos:end="103:23">error_propagate</name><argument_list pos:start="103:24" pos:end="103:40">(<argument pos:start="103:25" pos:end="103:28"><expr pos:start="103:25" pos:end="103:28"><name pos:start="103:25" pos:end="103:28">errp</name></expr></argument>, <argument pos:start="103:31" pos:end="103:39"><expr pos:start="103:31" pos:end="103:39"><name pos:start="103:31" pos:end="103:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:41"><expr pos:start="105:9" pos:end="105:40"><call pos:start="105:9" pos:end="105:40"><name pos:start="105:9" pos:end="105:18">error_free</name><argument_list pos:start="105:19" pos:end="105:40">(<argument pos:start="105:20" pos:end="105:39"><expr pos:start="105:20" pos:end="105:39"><name pos:start="105:20" pos:end="105:39"><name pos:start="105:20" pos:end="105:20">s</name><operator pos:start="105:21" pos:end="105:22">-&gt;</operator><name pos:start="105:23" pos:end="105:39">migration_blocker</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="107:9" pos:end="107:18">goto <name pos:start="107:14" pos:end="107:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="113:5" pos:end="113:16"><expr pos:start="113:5" pos:end="113:15"><call pos:start="113:5" pos:end="113:15"><name pos:start="113:5" pos:end="113:10">g_free</name><argument_list pos:start="113:11" pos:end="113:15">(<argument pos:start="113:12" pos:end="113:14"><expr pos:start="113:12" pos:end="113:14"><name pos:start="113:12" pos:end="113:14">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="115:5" pos:end="115:13">return <expr pos:start="115:12" pos:end="115:12"><literal type="number" pos:start="115:12" pos:end="115:12">0</literal></expr>;</return>



<label pos:start="119:1" pos:end="119:5"><name pos:start="119:1" pos:end="119:4">fail</name>:</label>

    <expr_stmt pos:start="121:5" pos:end="121:16"><expr pos:start="121:5" pos:end="121:15"><call pos:start="121:5" pos:end="121:15"><name pos:start="121:5" pos:end="121:10">g_free</name><argument_list pos:start="121:11" pos:end="121:15">(<argument pos:start="121:12" pos:end="121:14"><expr pos:start="121:12" pos:end="121:14"><name pos:start="121:12" pos:end="121:14">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:27"><expr pos:start="123:5" pos:end="123:26"><call pos:start="123:5" pos:end="123:26"><name pos:start="123:5" pos:end="123:10">g_free</name><argument_list pos:start="123:11" pos:end="123:26">(<argument pos:start="123:12" pos:end="123:25"><expr pos:start="123:12" pos:end="123:25"><name pos:start="123:12" pos:end="123:25"><name pos:start="123:12" pos:end="123:12">s</name><operator pos:start="123:13" pos:end="123:14">-&gt;</operator><name pos:start="123:15" pos:end="123:25">create_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:26"><expr pos:start="125:5" pos:end="125:25"><name pos:start="125:5" pos:end="125:18"><name pos:start="125:5" pos:end="125:5">s</name><operator pos:start="125:6" pos:end="125:7">-&gt;</operator><name pos:start="125:8" pos:end="125:18">create_type</name></name> <operator pos:start="125:20" pos:end="125:20">=</operator> <name pos:start="125:22" pos:end="125:25">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:26"><expr pos:start="127:5" pos:end="127:25"><call pos:start="127:5" pos:end="127:25"><name pos:start="127:5" pos:end="127:21">vmdk_free_extents</name><argument_list pos:start="127:22" pos:end="127:25">(<argument pos:start="127:23" pos:end="127:24"><expr pos:start="127:23" pos:end="127:24"><name pos:start="127:23" pos:end="127:24">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="129:5" pos:end="129:15">return <expr pos:start="129:12" pos:end="129:14"><name pos:start="129:12" pos:end="129:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
