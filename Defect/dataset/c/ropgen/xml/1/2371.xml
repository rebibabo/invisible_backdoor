<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2371.c" pos:tabs="8"><function pos:start="1:1" pos:end="487:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:24">do_m68k_semihosting</name><parameter_list pos:start="1:25" pos:end="1:51">(<parameter pos:start="1:26" pos:end="1:42"><decl pos:start="1:26" pos:end="1:42"><type pos:start="1:26" pos:end="1:42"><name pos:start="1:26" pos:end="1:37">CPUM68KState</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:42">env</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:50"><decl pos:start="1:45" pos:end="1:50"><type pos:start="1:45" pos:end="1:50"><name pos:start="1:45" pos:end="1:47">int</name></type> <name pos:start="1:49" pos:end="1:50">nr</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="487:1">{<block_content pos:start="5:5" pos:end="485:34">

    <decl_stmt pos:start="5:5" pos:end="5:18"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint32_t</name></type> <name pos:start="5:14" pos:end="5:17">args</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">void</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:11">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">void</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:11">q</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:16">len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:20"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:19">result</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:25"><expr pos:start="17:5" pos:end="17:24"><name pos:start="17:5" pos:end="17:8">args</name> <operator pos:start="17:10" pos:end="17:10">=</operator> <name pos:start="17:12" pos:end="17:24"><name pos:start="17:12" pos:end="17:14">env</name><operator pos:start="17:15" pos:end="17:16">-&gt;</operator><name pos:start="17:17" pos:end="17:21">dregs</name><index pos:start="17:22" pos:end="17:24">[<expr pos:start="17:23" pos:end="17:23"><literal type="number" pos:start="17:23" pos:end="17:23">1</literal></expr>]</index></name></expr>;</expr_stmt>

    <switch pos:start="19:5" pos:end="479:5">switch <condition pos:start="19:12" pos:end="19:15">(<expr pos:start="19:13" pos:end="19:14"><name pos:start="19:13" pos:end="19:14">nr</name></expr>)</condition> <block pos:start="19:17" pos:end="479:5">{<block_content pos:start="21:5" pos:end="477:19">

    <case pos:start="21:5" pos:end="21:21">case <expr pos:start="21:10" pos:end="21:20"><name pos:start="21:10" pos:end="21:20">HOSTED_EXIT</name></expr>:</case>

        <expr_stmt pos:start="23:9" pos:end="23:37"><expr pos:start="23:9" pos:end="23:36"><call pos:start="23:9" pos:end="23:36"><name pos:start="23:9" pos:end="23:16">gdb_exit</name><argument_list pos:start="23:17" pos:end="23:36">(<argument pos:start="23:18" pos:end="23:20"><expr pos:start="23:18" pos:end="23:20"><name pos:start="23:18" pos:end="23:20">env</name></expr></argument>, <argument pos:start="23:23" pos:end="23:35"><expr pos:start="23:23" pos:end="23:35"><name pos:start="23:23" pos:end="23:35"><name pos:start="23:23" pos:end="23:25">env</name><operator pos:start="23:26" pos:end="23:27">-&gt;</operator><name pos:start="23:28" pos:end="23:32">dregs</name><index pos:start="23:33" pos:end="23:35">[<expr pos:start="23:34" pos:end="23:34"><literal type="number" pos:start="23:34" pos:end="23:34">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:28"><expr pos:start="25:9" pos:end="25:27"><call pos:start="25:9" pos:end="25:27"><name pos:start="25:9" pos:end="25:12">exit</name><argument_list pos:start="25:13" pos:end="25:27">(<argument pos:start="25:14" pos:end="25:26"><expr pos:start="25:14" pos:end="25:26"><name pos:start="25:14" pos:end="25:26"><name pos:start="25:14" pos:end="25:16">env</name><operator pos:start="25:17" pos:end="25:18">-&gt;</operator><name pos:start="25:19" pos:end="25:23">dregs</name><index pos:start="25:24" pos:end="25:26">[<expr pos:start="25:25" pos:end="25:25"><literal type="number" pos:start="25:25" pos:end="25:25">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <case pos:start="27:5" pos:end="27:21">case <expr pos:start="27:10" pos:end="27:20"><name pos:start="27:10" pos:end="27:20">HOSTED_OPEN</name></expr>:</case>

        <if_stmt pos:start="29:9" pos:end="53:9"><if pos:start="29:9" pos:end="37:9">if <condition pos:start="29:12" pos:end="29:31">(<expr pos:start="29:13" pos:end="29:30"><call pos:start="29:13" pos:end="29:30"><name pos:start="29:13" pos:end="29:28">use_gdb_syscalls</name><argument_list pos:start="29:29" pos:end="29:30">()</argument_list></call></expr>)</condition> <block pos:start="29:33" pos:end="37:9">{<block_content pos:start="31:13" pos:end="35:19">

            <expr_stmt pos:start="31:13" pos:end="33:43"><expr pos:start="31:13" pos:end="33:42"><call pos:start="31:13" pos:end="33:42"><name pos:start="31:13" pos:end="31:26">gdb_do_syscall</name><argument_list pos:start="31:27" pos:end="33:42">(<argument pos:start="31:28" pos:end="31:39"><expr pos:start="31:28" pos:end="31:39"><name pos:start="31:28" pos:end="31:39">m68k_semi_cb</name></expr></argument>, <argument pos:start="31:42" pos:end="31:56"><expr pos:start="31:42" pos:end="31:56"><literal type="string" pos:start="31:42" pos:end="31:56">"open,%s,%x,%x"</literal></expr></argument>, <argument pos:start="31:59" pos:end="31:64"><expr pos:start="31:59" pos:end="31:64"><call pos:start="31:59" pos:end="31:64"><name pos:start="31:59" pos:end="31:61">ARG</name><argument_list pos:start="31:62" pos:end="31:64">(<argument pos:start="31:63" pos:end="31:63"><expr pos:start="31:63" pos:end="31:63"><literal type="number" pos:start="31:63" pos:end="31:63">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="31:67" pos:end="31:77"><expr pos:start="31:67" pos:end="31:77"><operator pos:start="31:67" pos:end="31:67">(</operator><name pos:start="31:68" pos:end="31:70">int</name><operator pos:start="31:71" pos:end="31:71">)</operator><call pos:start="31:72" pos:end="31:77"><name pos:start="31:72" pos:end="31:74">ARG</name><argument_list pos:start="31:75" pos:end="31:77">(<argument pos:start="31:76" pos:end="31:76"><expr pos:start="31:76" pos:end="31:76"><literal type="number" pos:start="31:76" pos:end="31:76">1</literal></expr></argument>)</argument_list></call></expr></argument>,

                           <argument pos:start="33:28" pos:end="33:33"><expr pos:start="33:28" pos:end="33:33"><call pos:start="33:28" pos:end="33:33"><name pos:start="33:28" pos:end="33:30">ARG</name><argument_list pos:start="33:31" pos:end="33:33">(<argument pos:start="33:32" pos:end="33:32"><expr pos:start="33:32" pos:end="33:32"><literal type="number" pos:start="33:32" pos:end="33:32">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="33:36" pos:end="33:41"><expr pos:start="33:36" pos:end="33:41"><call pos:start="33:36" pos:end="33:41"><name pos:start="33:36" pos:end="33:38">ARG</name><argument_list pos:start="33:39" pos:end="33:41">(<argument pos:start="33:40" pos:end="33:40"><expr pos:start="33:40" pos:end="33:40"><literal type="number" pos:start="33:40" pos:end="33:40">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="35:13" pos:end="35:19">return;</return>

        </block_content>}</block></if> <else pos:start="37:11" pos:end="53:9">else <block pos:start="37:16" pos:end="53:9">{<block_content pos:start="39:13" pos:end="51:13">

            <if_stmt pos:start="39:13" pos:end="51:13"><if pos:start="39:13" pos:end="45:13">if <condition pos:start="39:16" pos:end="39:48">(<expr pos:start="39:17" pos:end="39:47"><operator pos:start="39:17" pos:end="39:17">!</operator><operator pos:start="39:18" pos:end="39:18">(</operator><name pos:start="39:19" pos:end="39:19">p</name> <operator pos:start="39:21" pos:end="39:21">=</operator> <call pos:start="39:23" pos:end="39:46"><name pos:start="39:23" pos:end="39:38">lock_user_string</name><argument_list pos:start="39:39" pos:end="39:46">(<argument pos:start="39:40" pos:end="39:45"><expr pos:start="39:40" pos:end="39:45"><call pos:start="39:40" pos:end="39:45"><name pos:start="39:40" pos:end="39:42">ARG</name><argument_list pos:start="39:43" pos:end="39:45">(<argument pos:start="39:44" pos:end="39:44"><expr pos:start="39:44" pos:end="39:44"><literal type="number" pos:start="39:44" pos:end="39:44">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator pos:start="39:47" pos:end="39:47">)</operator></expr>)</condition> <block pos:start="39:50" pos:end="45:13">{<block_content pos:start="43:17" pos:end="43:28">

                <comment type="block" pos:start="41:17" pos:end="41:47">/* FIXME - check error code? */</comment>

                <expr_stmt pos:start="43:17" pos:end="43:28"><expr pos:start="43:17" pos:end="43:27"><name pos:start="43:17" pos:end="43:22">result</name> <operator pos:start="43:24" pos:end="43:24">=</operator> <operator pos:start="43:26" pos:end="43:26">-</operator><literal type="number" pos:start="43:27" pos:end="43:27">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="45:15" pos:end="51:13">else <block pos:start="45:20" pos:end="51:13">{<block_content pos:start="47:17" pos:end="49:42">

                <expr_stmt pos:start="47:17" pos:end="47:70"><expr pos:start="47:17" pos:end="47:69"><name pos:start="47:17" pos:end="47:22">result</name> <operator pos:start="47:24" pos:end="47:24">=</operator> <call pos:start="47:26" pos:end="47:69"><name pos:start="47:26" pos:end="47:29">open</name><argument_list pos:start="47:30" pos:end="47:69">(<argument pos:start="47:31" pos:end="47:31"><expr pos:start="47:31" pos:end="47:31"><name pos:start="47:31" pos:end="47:31">p</name></expr></argument>, <argument pos:start="47:34" pos:end="47:60"><expr pos:start="47:34" pos:end="47:60"><call pos:start="47:34" pos:end="47:60"><name pos:start="47:34" pos:end="47:52">translate_openflags</name><argument_list pos:start="47:53" pos:end="47:60">(<argument pos:start="47:54" pos:end="47:59"><expr pos:start="47:54" pos:end="47:59"><call pos:start="47:54" pos:end="47:59"><name pos:start="47:54" pos:end="47:56">ARG</name><argument_list pos:start="47:57" pos:end="47:59">(<argument pos:start="47:58" pos:end="47:58"><expr pos:start="47:58" pos:end="47:58"><literal type="number" pos:start="47:58" pos:end="47:58">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="47:63" pos:end="47:68"><expr pos:start="47:63" pos:end="47:68"><call pos:start="47:63" pos:end="47:68"><name pos:start="47:63" pos:end="47:65">ARG</name><argument_list pos:start="47:66" pos:end="47:68">(<argument pos:start="47:67" pos:end="47:67"><expr pos:start="47:67" pos:end="47:67"><literal type="number" pos:start="47:67" pos:end="47:67">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="49:17" pos:end="49:42"><expr pos:start="49:17" pos:end="49:41"><call pos:start="49:17" pos:end="49:41"><name pos:start="49:17" pos:end="49:27">unlock_user</name><argument_list pos:start="49:28" pos:end="49:41">(<argument pos:start="49:29" pos:end="49:29"><expr pos:start="49:29" pos:end="49:29"><name pos:start="49:29" pos:end="49:29">p</name></expr></argument>, <argument pos:start="49:32" pos:end="49:37"><expr pos:start="49:32" pos:end="49:37"><call pos:start="49:32" pos:end="49:37"><name pos:start="49:32" pos:end="49:34">ARG</name><argument_list pos:start="49:35" pos:end="49:37">(<argument pos:start="49:36" pos:end="49:36"><expr pos:start="49:36" pos:end="49:36"><literal type="number" pos:start="49:36" pos:end="49:36">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="49:40" pos:end="49:40"><expr pos:start="49:40" pos:end="49:40"><literal type="number" pos:start="49:40" pos:end="49:40">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="55:9" pos:end="55:14">break;</break>

    <case pos:start="57:5" pos:end="57:22">case <expr pos:start="57:10" pos:end="57:21"><name pos:start="57:10" pos:end="57:21">HOSTED_CLOSE</name></expr>:</case>

        <block pos:start="59:9" pos:end="87:9">{<block_content pos:start="63:13" pos:end="85:18">

            <comment type="block" pos:start="61:13" pos:end="61:58">/* Ignore attempts to close stdin/out/err.  */</comment>

            <decl_stmt pos:start="63:13" pos:end="63:28"><decl pos:start="63:13" pos:end="63:27"><type pos:start="63:13" pos:end="63:15"><name pos:start="63:13" pos:end="63:15">int</name></type> <name pos:start="63:17" pos:end="63:18">fd</name> <init pos:start="63:20" pos:end="63:27">= <expr pos:start="63:22" pos:end="63:27"><call pos:start="63:22" pos:end="63:27"><name pos:start="63:22" pos:end="63:24">ARG</name><argument_list pos:start="63:25" pos:end="63:27">(<argument pos:start="63:26" pos:end="63:26"><expr pos:start="63:26" pos:end="63:26"><literal type="number" pos:start="63:26" pos:end="63:26">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="65:13" pos:end="83:13"><if pos:start="65:13" pos:end="79:13">if <condition pos:start="65:16" pos:end="65:23">(<expr pos:start="65:17" pos:end="65:22"><name pos:start="65:17" pos:end="65:18">fd</name> <operator pos:start="65:20" pos:end="65:20">&gt;</operator> <literal type="number" pos:start="65:22" pos:end="65:22">2</literal></expr>)</condition> <block pos:start="65:25" pos:end="79:13">{<block_content pos:start="67:17" pos:end="77:17">

                <if_stmt pos:start="67:17" pos:end="77:17"><if pos:start="67:17" pos:end="73:17">if <condition pos:start="67:20" pos:end="67:39">(<expr pos:start="67:21" pos:end="67:38"><call pos:start="67:21" pos:end="67:38"><name pos:start="67:21" pos:end="67:36">use_gdb_syscalls</name><argument_list pos:start="67:37" pos:end="67:38">()</argument_list></call></expr>)</condition> <block pos:start="67:41" pos:end="73:17">{<block_content pos:start="69:21" pos:end="71:27">

                    <expr_stmt pos:start="69:21" pos:end="69:69"><expr pos:start="69:21" pos:end="69:68"><call pos:start="69:21" pos:end="69:68"><name pos:start="69:21" pos:end="69:34">gdb_do_syscall</name><argument_list pos:start="69:35" pos:end="69:68">(<argument pos:start="69:36" pos:end="69:47"><expr pos:start="69:36" pos:end="69:47"><name pos:start="69:36" pos:end="69:47">m68k_semi_cb</name></expr></argument>, <argument pos:start="69:50" pos:end="69:59"><expr pos:start="69:50" pos:end="69:59"><literal type="string" pos:start="69:50" pos:end="69:59">"close,%x"</literal></expr></argument>, <argument pos:start="69:62" pos:end="69:67"><expr pos:start="69:62" pos:end="69:67"><call pos:start="69:62" pos:end="69:67"><name pos:start="69:62" pos:end="69:64">ARG</name><argument_list pos:start="69:65" pos:end="69:67">(<argument pos:start="69:66" pos:end="69:66"><expr pos:start="69:66" pos:end="69:66"><literal type="number" pos:start="69:66" pos:end="69:66">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="71:21" pos:end="71:27">return;</return>

                </block_content>}</block></if> <else pos:start="73:19" pos:end="77:17">else <block pos:start="73:24" pos:end="77:17">{<block_content pos:start="75:21" pos:end="75:39">

                    <expr_stmt pos:start="75:21" pos:end="75:39"><expr pos:start="75:21" pos:end="75:38"><name pos:start="75:21" pos:end="75:26">result</name> <operator pos:start="75:28" pos:end="75:28">=</operator> <call pos:start="75:30" pos:end="75:38"><name pos:start="75:30" pos:end="75:34">close</name><argument_list pos:start="75:35" pos:end="75:38">(<argument pos:start="75:36" pos:end="75:37"><expr pos:start="75:36" pos:end="75:37"><name pos:start="75:36" pos:end="75:37">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="79:15" pos:end="83:13">else <block pos:start="79:20" pos:end="83:13">{<block_content pos:start="81:17" pos:end="81:27">

                <expr_stmt pos:start="81:17" pos:end="81:27"><expr pos:start="81:17" pos:end="81:26"><name pos:start="81:17" pos:end="81:22">result</name> <operator pos:start="81:24" pos:end="81:24">=</operator> <literal type="number" pos:start="81:26" pos:end="81:26">0</literal></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="85:13" pos:end="85:18">break;</break>

        </block_content>}</block>

    <case pos:start="89:5" pos:end="89:21">case <expr pos:start="89:10" pos:end="89:20"><name pos:start="89:10" pos:end="89:20">HOSTED_READ</name></expr>:</case>

        <expr_stmt pos:start="91:9" pos:end="91:21"><expr pos:start="91:9" pos:end="91:20"><name pos:start="91:9" pos:end="91:11">len</name> <operator pos:start="91:13" pos:end="91:13">=</operator> <call pos:start="91:15" pos:end="91:20"><name pos:start="91:15" pos:end="91:17">ARG</name><argument_list pos:start="91:18" pos:end="91:20">(<argument pos:start="91:19" pos:end="91:19"><expr pos:start="91:19" pos:end="91:19"><literal type="number" pos:start="91:19" pos:end="91:19">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="93:9" pos:end="117:9"><if pos:start="93:9" pos:end="101:9">if <condition pos:start="93:12" pos:end="93:31">(<expr pos:start="93:13" pos:end="93:30"><call pos:start="93:13" pos:end="93:30"><name pos:start="93:13" pos:end="93:28">use_gdb_syscalls</name><argument_list pos:start="93:29" pos:end="93:30">()</argument_list></call></expr>)</condition> <block pos:start="93:33" pos:end="101:9">{<block_content pos:start="95:13" pos:end="99:19">

            <expr_stmt pos:start="95:13" pos:end="97:48"><expr pos:start="95:13" pos:end="97:47"><call pos:start="95:13" pos:end="97:47"><name pos:start="95:13" pos:end="95:26">gdb_do_syscall</name><argument_list pos:start="95:27" pos:end="97:47">(<argument pos:start="95:28" pos:end="95:39"><expr pos:start="95:28" pos:end="95:39"><name pos:start="95:28" pos:end="95:39">m68k_semi_cb</name></expr></argument>, <argument pos:start="95:42" pos:end="95:56"><expr pos:start="95:42" pos:end="95:56"><literal type="string" pos:start="95:42" pos:end="95:56">"read,%x,%x,%x"</literal></expr></argument>,

                           <argument pos:start="97:28" pos:end="97:33"><expr pos:start="97:28" pos:end="97:33"><call pos:start="97:28" pos:end="97:33"><name pos:start="97:28" pos:end="97:30">ARG</name><argument_list pos:start="97:31" pos:end="97:33">(<argument pos:start="97:32" pos:end="97:32"><expr pos:start="97:32" pos:end="97:32"><literal type="number" pos:start="97:32" pos:end="97:32">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="97:36" pos:end="97:41"><expr pos:start="97:36" pos:end="97:41"><call pos:start="97:36" pos:end="97:41"><name pos:start="97:36" pos:end="97:38">ARG</name><argument_list pos:start="97:39" pos:end="97:41">(<argument pos:start="97:40" pos:end="97:40"><expr pos:start="97:40" pos:end="97:40"><literal type="number" pos:start="97:40" pos:end="97:40">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="97:44" pos:end="97:46"><expr pos:start="97:44" pos:end="97:46"><name pos:start="97:44" pos:end="97:46">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="99:13" pos:end="99:19">return;</return>

        </block_content>}</block></if> <else pos:start="101:11" pos:end="117:9">else <block pos:start="101:16" pos:end="117:9">{<block_content pos:start="103:13" pos:end="115:13">

            <if_stmt pos:start="103:13" pos:end="115:13"><if pos:start="103:13" pos:end="109:13">if <condition pos:start="103:16" pos:end="103:63">(<expr pos:start="103:17" pos:end="103:62"><operator pos:start="103:17" pos:end="103:17">!</operator><operator pos:start="103:18" pos:end="103:18">(</operator><name pos:start="103:19" pos:end="103:19">p</name> <operator pos:start="103:21" pos:end="103:21">=</operator> <call pos:start="103:23" pos:end="103:61"><name pos:start="103:23" pos:end="103:31">lock_user</name><argument_list pos:start="103:32" pos:end="103:61">(<argument pos:start="103:33" pos:end="103:44"><expr pos:start="103:33" pos:end="103:44"><name pos:start="103:33" pos:end="103:44">VERIFY_WRITE</name></expr></argument>, <argument pos:start="103:47" pos:end="103:52"><expr pos:start="103:47" pos:end="103:52"><call pos:start="103:47" pos:end="103:52"><name pos:start="103:47" pos:end="103:49">ARG</name><argument_list pos:start="103:50" pos:end="103:52">(<argument pos:start="103:51" pos:end="103:51"><expr pos:start="103:51" pos:end="103:51"><literal type="number" pos:start="103:51" pos:end="103:51">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="103:55" pos:end="103:57"><expr pos:start="103:55" pos:end="103:57"><name pos:start="103:55" pos:end="103:57">len</name></expr></argument>, <argument pos:start="103:60" pos:end="103:60"><expr pos:start="103:60" pos:end="103:60"><literal type="number" pos:start="103:60" pos:end="103:60">0</literal></expr></argument>)</argument_list></call><operator pos:start="103:62" pos:end="103:62">)</operator></expr>)</condition> <block pos:start="103:65" pos:end="109:13">{<block_content pos:start="107:17" pos:end="107:28">

                <comment type="block" pos:start="105:17" pos:end="105:47">/* FIXME - check error code? */</comment>

                <expr_stmt pos:start="107:17" pos:end="107:28"><expr pos:start="107:17" pos:end="107:27"><name pos:start="107:17" pos:end="107:22">result</name> <operator pos:start="107:24" pos:end="107:24">=</operator> <operator pos:start="107:26" pos:end="107:26">-</operator><literal type="number" pos:start="107:27" pos:end="107:27">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="109:15" pos:end="115:13">else <block pos:start="109:20" pos:end="115:13">{<block_content pos:start="111:17" pos:end="113:44">

                <expr_stmt pos:start="111:17" pos:end="111:46"><expr pos:start="111:17" pos:end="111:45"><name pos:start="111:17" pos:end="111:22">result</name> <operator pos:start="111:24" pos:end="111:24">=</operator> <call pos:start="111:26" pos:end="111:45"><name pos:start="111:26" pos:end="111:29">read</name><argument_list pos:start="111:30" pos:end="111:45">(<argument pos:start="111:31" pos:end="111:36"><expr pos:start="111:31" pos:end="111:36"><call pos:start="111:31" pos:end="111:36"><name pos:start="111:31" pos:end="111:33">ARG</name><argument_list pos:start="111:34" pos:end="111:36">(<argument pos:start="111:35" pos:end="111:35"><expr pos:start="111:35" pos:end="111:35"><literal type="number" pos:start="111:35" pos:end="111:35">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="111:39" pos:end="111:39"><expr pos:start="111:39" pos:end="111:39"><name pos:start="111:39" pos:end="111:39">p</name></expr></argument>, <argument pos:start="111:42" pos:end="111:44"><expr pos:start="111:42" pos:end="111:44"><name pos:start="111:42" pos:end="111:44">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="113:17" pos:end="113:44"><expr pos:start="113:17" pos:end="113:43"><call pos:start="113:17" pos:end="113:43"><name pos:start="113:17" pos:end="113:27">unlock_user</name><argument_list pos:start="113:28" pos:end="113:43">(<argument pos:start="113:29" pos:end="113:29"><expr pos:start="113:29" pos:end="113:29"><name pos:start="113:29" pos:end="113:29">p</name></expr></argument>, <argument pos:start="113:32" pos:end="113:37"><expr pos:start="113:32" pos:end="113:37"><call pos:start="113:32" pos:end="113:37"><name pos:start="113:32" pos:end="113:34">ARG</name><argument_list pos:start="113:35" pos:end="113:37">(<argument pos:start="113:36" pos:end="113:36"><expr pos:start="113:36" pos:end="113:36"><literal type="number" pos:start="113:36" pos:end="113:36">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="113:40" pos:end="113:42"><expr pos:start="113:40" pos:end="113:42"><name pos:start="113:40" pos:end="113:42">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="119:9" pos:end="119:14">break;</break>

    <case pos:start="121:5" pos:end="121:22">case <expr pos:start="121:10" pos:end="121:21"><name pos:start="121:10" pos:end="121:21">HOSTED_WRITE</name></expr>:</case>

        <expr_stmt pos:start="123:9" pos:end="123:21"><expr pos:start="123:9" pos:end="123:20"><name pos:start="123:9" pos:end="123:11">len</name> <operator pos:start="123:13" pos:end="123:13">=</operator> <call pos:start="123:15" pos:end="123:20"><name pos:start="123:15" pos:end="123:17">ARG</name><argument_list pos:start="123:18" pos:end="123:20">(<argument pos:start="123:19" pos:end="123:19"><expr pos:start="123:19" pos:end="123:19"><literal type="number" pos:start="123:19" pos:end="123:19">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="125:9" pos:end="149:9"><if pos:start="125:9" pos:end="133:9">if <condition pos:start="125:12" pos:end="125:31">(<expr pos:start="125:13" pos:end="125:30"><call pos:start="125:13" pos:end="125:30"><name pos:start="125:13" pos:end="125:28">use_gdb_syscalls</name><argument_list pos:start="125:29" pos:end="125:30">()</argument_list></call></expr>)</condition> <block pos:start="125:33" pos:end="133:9">{<block_content pos:start="127:13" pos:end="131:19">

            <expr_stmt pos:start="127:13" pos:end="129:48"><expr pos:start="127:13" pos:end="129:47"><call pos:start="127:13" pos:end="129:47"><name pos:start="127:13" pos:end="127:26">gdb_do_syscall</name><argument_list pos:start="127:27" pos:end="129:47">(<argument pos:start="127:28" pos:end="127:39"><expr pos:start="127:28" pos:end="127:39"><name pos:start="127:28" pos:end="127:39">m68k_semi_cb</name></expr></argument>, <argument pos:start="127:42" pos:end="127:57"><expr pos:start="127:42" pos:end="127:57"><literal type="string" pos:start="127:42" pos:end="127:57">"write,%x,%x,%x"</literal></expr></argument>,

                           <argument pos:start="129:28" pos:end="129:33"><expr pos:start="129:28" pos:end="129:33"><call pos:start="129:28" pos:end="129:33"><name pos:start="129:28" pos:end="129:30">ARG</name><argument_list pos:start="129:31" pos:end="129:33">(<argument pos:start="129:32" pos:end="129:32"><expr pos:start="129:32" pos:end="129:32"><literal type="number" pos:start="129:32" pos:end="129:32">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="129:36" pos:end="129:41"><expr pos:start="129:36" pos:end="129:41"><call pos:start="129:36" pos:end="129:41"><name pos:start="129:36" pos:end="129:38">ARG</name><argument_list pos:start="129:39" pos:end="129:41">(<argument pos:start="129:40" pos:end="129:40"><expr pos:start="129:40" pos:end="129:40"><literal type="number" pos:start="129:40" pos:end="129:40">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="129:44" pos:end="129:46"><expr pos:start="129:44" pos:end="129:46"><name pos:start="129:44" pos:end="129:46">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="131:13" pos:end="131:19">return;</return>

        </block_content>}</block></if> <else pos:start="133:11" pos:end="149:9">else <block pos:start="133:16" pos:end="149:9">{<block_content pos:start="135:13" pos:end="147:13">

            <if_stmt pos:start="135:13" pos:end="147:13"><if pos:start="135:13" pos:end="141:13">if <condition pos:start="135:16" pos:end="135:62">(<expr pos:start="135:17" pos:end="135:61"><operator pos:start="135:17" pos:end="135:17">!</operator><operator pos:start="135:18" pos:end="135:18">(</operator><name pos:start="135:19" pos:end="135:19">p</name> <operator pos:start="135:21" pos:end="135:21">=</operator> <call pos:start="135:23" pos:end="135:60"><name pos:start="135:23" pos:end="135:31">lock_user</name><argument_list pos:start="135:32" pos:end="135:60">(<argument pos:start="135:33" pos:end="135:43"><expr pos:start="135:33" pos:end="135:43"><name pos:start="135:33" pos:end="135:43">VERIFY_READ</name></expr></argument>, <argument pos:start="135:46" pos:end="135:51"><expr pos:start="135:46" pos:end="135:51"><call pos:start="135:46" pos:end="135:51"><name pos:start="135:46" pos:end="135:48">ARG</name><argument_list pos:start="135:49" pos:end="135:51">(<argument pos:start="135:50" pos:end="135:50"><expr pos:start="135:50" pos:end="135:50"><literal type="number" pos:start="135:50" pos:end="135:50">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="135:54" pos:end="135:56"><expr pos:start="135:54" pos:end="135:56"><name pos:start="135:54" pos:end="135:56">len</name></expr></argument>, <argument pos:start="135:59" pos:end="135:59"><expr pos:start="135:59" pos:end="135:59"><literal type="number" pos:start="135:59" pos:end="135:59">1</literal></expr></argument>)</argument_list></call><operator pos:start="135:61" pos:end="135:61">)</operator></expr>)</condition> <block pos:start="135:64" pos:end="141:13">{<block_content pos:start="139:17" pos:end="139:28">

                <comment type="block" pos:start="137:17" pos:end="137:47">/* FIXME - check error code? */</comment>

                <expr_stmt pos:start="139:17" pos:end="139:28"><expr pos:start="139:17" pos:end="139:27"><name pos:start="139:17" pos:end="139:22">result</name> <operator pos:start="139:24" pos:end="139:24">=</operator> <operator pos:start="139:26" pos:end="139:26">-</operator><literal type="number" pos:start="139:27" pos:end="139:27">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="141:15" pos:end="147:13">else <block pos:start="141:20" pos:end="147:13">{<block_content pos:start="143:17" pos:end="145:42">

                <expr_stmt pos:start="143:17" pos:end="143:47"><expr pos:start="143:17" pos:end="143:46"><name pos:start="143:17" pos:end="143:22">result</name> <operator pos:start="143:24" pos:end="143:24">=</operator> <call pos:start="143:26" pos:end="143:46"><name pos:start="143:26" pos:end="143:30">write</name><argument_list pos:start="143:31" pos:end="143:46">(<argument pos:start="143:32" pos:end="143:37"><expr pos:start="143:32" pos:end="143:37"><call pos:start="143:32" pos:end="143:37"><name pos:start="143:32" pos:end="143:34">ARG</name><argument_list pos:start="143:35" pos:end="143:37">(<argument pos:start="143:36" pos:end="143:36"><expr pos:start="143:36" pos:end="143:36"><literal type="number" pos:start="143:36" pos:end="143:36">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="143:40" pos:end="143:40"><expr pos:start="143:40" pos:end="143:40"><name pos:start="143:40" pos:end="143:40">p</name></expr></argument>, <argument pos:start="143:43" pos:end="143:45"><expr pos:start="143:43" pos:end="143:45"><name pos:start="143:43" pos:end="143:45">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="145:17" pos:end="145:42"><expr pos:start="145:17" pos:end="145:41"><call pos:start="145:17" pos:end="145:41"><name pos:start="145:17" pos:end="145:27">unlock_user</name><argument_list pos:start="145:28" pos:end="145:41">(<argument pos:start="145:29" pos:end="145:29"><expr pos:start="145:29" pos:end="145:29"><name pos:start="145:29" pos:end="145:29">p</name></expr></argument>, <argument pos:start="145:32" pos:end="145:37"><expr pos:start="145:32" pos:end="145:37"><call pos:start="145:32" pos:end="145:37"><name pos:start="145:32" pos:end="145:34">ARG</name><argument_list pos:start="145:35" pos:end="145:37">(<argument pos:start="145:36" pos:end="145:36"><expr pos:start="145:36" pos:end="145:36"><literal type="number" pos:start="145:36" pos:end="145:36">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="145:40" pos:end="145:40"><expr pos:start="145:40" pos:end="145:40"><literal type="number" pos:start="145:40" pos:end="145:40">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="151:9" pos:end="151:14">break;</break>

    <case pos:start="153:5" pos:end="153:22">case <expr pos:start="153:10" pos:end="153:21"><name pos:start="153:10" pos:end="153:21">HOSTED_LSEEK</name></expr>:</case>

        <block pos:start="155:9" pos:end="185:9">{<block_content pos:start="157:13" pos:end="183:19">

            <decl_stmt pos:start="157:13" pos:end="157:25"><decl pos:start="157:13" pos:end="157:24"><type pos:start="157:13" pos:end="157:20"><name pos:start="157:13" pos:end="157:20">uint64_t</name></type> <name pos:start="157:22" pos:end="157:24">off</name></decl>;</decl_stmt>

            <expr_stmt pos:start="159:13" pos:end="159:62"><expr pos:start="159:13" pos:end="159:61"><name pos:start="159:13" pos:end="159:15">off</name> <operator pos:start="159:17" pos:end="159:17">=</operator> <operator pos:start="159:19" pos:end="159:19">(</operator><name pos:start="159:20" pos:end="159:27">uint32_t</name><operator pos:start="159:28" pos:end="159:28">)</operator><call pos:start="159:29" pos:end="159:34"><name pos:start="159:29" pos:end="159:31">ARG</name><argument_list pos:start="159:32" pos:end="159:34">(<argument pos:start="159:33" pos:end="159:33"><expr pos:start="159:33" pos:end="159:33"><literal type="number" pos:start="159:33" pos:end="159:33">2</literal></expr></argument>)</argument_list></call> <operator pos:start="159:36" pos:end="159:36">|</operator> <operator pos:start="159:38" pos:end="159:38">(</operator><operator pos:start="159:39" pos:end="159:39">(</operator><name pos:start="159:40" pos:end="159:47">uint64_t</name><operator pos:start="159:48" pos:end="159:48">)</operator><call pos:start="159:49" pos:end="159:54"><name pos:start="159:49" pos:end="159:51">ARG</name><argument_list pos:start="159:52" pos:end="159:54">(<argument pos:start="159:53" pos:end="159:53"><expr pos:start="159:53" pos:end="159:53"><literal type="number" pos:start="159:53" pos:end="159:53">1</literal></expr></argument>)</argument_list></call> <operator pos:start="159:56" pos:end="159:57">&lt;&lt;</operator> <literal type="number" pos:start="159:59" pos:end="159:60">32</literal><operator pos:start="159:61" pos:end="159:61">)</operator></expr>;</expr_stmt>

            <if_stmt pos:start="161:13" pos:end="181:13"><if pos:start="161:13" pos:end="169:13">if <condition pos:start="161:16" pos:end="161:35">(<expr pos:start="161:17" pos:end="161:34"><call pos:start="161:17" pos:end="161:34"><name pos:start="161:17" pos:end="161:32">use_gdb_syscalls</name><argument_list pos:start="161:33" pos:end="161:34">()</argument_list></call></expr>)</condition> <block pos:start="161:37" pos:end="169:13">{<block_content pos:start="163:17" pos:end="167:52">

                <expr_stmt pos:start="163:17" pos:end="163:39"><expr pos:start="163:17" pos:end="163:38"><name pos:start="163:17" pos:end="163:34">m68k_semi_is_fseek</name> <operator pos:start="163:36" pos:end="163:36">=</operator> <literal type="number" pos:start="163:38" pos:end="163:38">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="165:17" pos:end="167:52"><expr pos:start="165:17" pos:end="167:51"><call pos:start="165:17" pos:end="167:51"><name pos:start="165:17" pos:end="165:30">gdb_do_syscall</name><argument_list pos:start="165:31" pos:end="167:51">(<argument pos:start="165:32" pos:end="165:43"><expr pos:start="165:32" pos:end="165:43"><name pos:start="165:32" pos:end="165:43">m68k_semi_cb</name></expr></argument>, <argument pos:start="165:46" pos:end="165:62"><expr pos:start="165:46" pos:end="165:62"><literal type="string" pos:start="165:46" pos:end="165:62">"fseek,%x,%lx,%x"</literal></expr></argument>,

                               <argument pos:start="167:32" pos:end="167:37"><expr pos:start="167:32" pos:end="167:37"><call pos:start="167:32" pos:end="167:37"><name pos:start="167:32" pos:end="167:34">ARG</name><argument_list pos:start="167:35" pos:end="167:37">(<argument pos:start="167:36" pos:end="167:36"><expr pos:start="167:36" pos:end="167:36"><literal type="number" pos:start="167:36" pos:end="167:36">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="167:40" pos:end="167:42"><expr pos:start="167:40" pos:end="167:42"><name pos:start="167:40" pos:end="167:42">off</name></expr></argument>, <argument pos:start="167:45" pos:end="167:50"><expr pos:start="167:45" pos:end="167:50"><call pos:start="167:45" pos:end="167:50"><name pos:start="167:45" pos:end="167:47">ARG</name><argument_list pos:start="167:48" pos:end="167:50">(<argument pos:start="167:49" pos:end="167:49"><expr pos:start="167:49" pos:end="167:49"><literal type="number" pos:start="167:49" pos:end="167:49">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="169:15" pos:end="181:13">else <block pos:start="169:20" pos:end="181:13">{<block_content pos:start="171:17" pos:end="179:46">

                <expr_stmt pos:start="171:17" pos:end="171:49"><expr pos:start="171:17" pos:end="171:48"><name pos:start="171:17" pos:end="171:19">off</name> <operator pos:start="171:21" pos:end="171:21">=</operator> <call pos:start="171:23" pos:end="171:48"><name pos:start="171:23" pos:end="171:27">lseek</name><argument_list pos:start="171:28" pos:end="171:48">(<argument pos:start="171:29" pos:end="171:34"><expr pos:start="171:29" pos:end="171:34"><call pos:start="171:29" pos:end="171:34"><name pos:start="171:29" pos:end="171:31">ARG</name><argument_list pos:start="171:32" pos:end="171:34">(<argument pos:start="171:33" pos:end="171:33"><expr pos:start="171:33" pos:end="171:33"><literal type="number" pos:start="171:33" pos:end="171:33">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="171:37" pos:end="171:39"><expr pos:start="171:37" pos:end="171:39"><name pos:start="171:37" pos:end="171:39">off</name></expr></argument>, <argument pos:start="171:42" pos:end="171:47"><expr pos:start="171:42" pos:end="171:47"><call pos:start="171:42" pos:end="171:47"><name pos:start="171:42" pos:end="171:44">ARG</name><argument_list pos:start="171:45" pos:end="171:47">(<argument pos:start="171:46" pos:end="171:46"><expr pos:start="171:46" pos:end="171:46"><literal type="number" pos:start="171:46" pos:end="171:46">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="173:17" pos:end="173:55">/* FIXME - handle put_user() failure */</comment>

                <expr_stmt pos:start="175:17" pos:end="175:46"><expr pos:start="175:17" pos:end="175:45"><call pos:start="175:17" pos:end="175:45"><name pos:start="175:17" pos:end="175:28">put_user_u32</name><argument_list pos:start="175:29" pos:end="175:45">(<argument pos:start="175:30" pos:end="175:38"><expr pos:start="175:30" pos:end="175:38"><name pos:start="175:30" pos:end="175:32">off</name> <operator pos:start="175:34" pos:end="175:35">&gt;&gt;</operator> <literal type="number" pos:start="175:37" pos:end="175:38">32</literal></expr></argument>, <argument pos:start="175:41" pos:end="175:44"><expr pos:start="175:41" pos:end="175:44"><name pos:start="175:41" pos:end="175:44">args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="177:17" pos:end="177:44"><expr pos:start="177:17" pos:end="177:43"><call pos:start="177:17" pos:end="177:43"><name pos:start="177:17" pos:end="177:28">put_user_u32</name><argument_list pos:start="177:29" pos:end="177:43">(<argument pos:start="177:30" pos:end="177:32"><expr pos:start="177:30" pos:end="177:32"><name pos:start="177:30" pos:end="177:32">off</name></expr></argument>, <argument pos:start="177:35" pos:end="177:42"><expr pos:start="177:35" pos:end="177:42"><name pos:start="177:35" pos:end="177:38">args</name> <operator pos:start="177:40" pos:end="177:40">+</operator> <literal type="number" pos:start="177:42" pos:end="177:42">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="179:17" pos:end="179:46"><expr pos:start="179:17" pos:end="179:45"><call pos:start="179:17" pos:end="179:45"><name pos:start="179:17" pos:end="179:28">put_user_u32</name><argument_list pos:start="179:29" pos:end="179:45">(<argument pos:start="179:30" pos:end="179:34"><expr pos:start="179:30" pos:end="179:34"><name pos:start="179:30" pos:end="179:34">errno</name></expr></argument>, <argument pos:start="179:37" pos:end="179:44"><expr pos:start="179:37" pos:end="179:44"><name pos:start="179:37" pos:end="179:40">args</name> <operator pos:start="179:42" pos:end="179:42">+</operator> <literal type="number" pos:start="179:44" pos:end="179:44">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <return pos:start="183:13" pos:end="183:19">return;</return>

        </block_content>}</block>

    <case pos:start="187:5" pos:end="187:23">case <expr pos:start="187:10" pos:end="187:22"><name pos:start="187:10" pos:end="187:22">HOSTED_RENAME</name></expr>:</case>

        <if_stmt pos:start="189:9" pos:end="219:9"><if pos:start="189:9" pos:end="197:9">if <condition pos:start="189:12" pos:end="189:31">(<expr pos:start="189:13" pos:end="189:30"><call pos:start="189:13" pos:end="189:30"><name pos:start="189:13" pos:end="189:28">use_gdb_syscalls</name><argument_list pos:start="189:29" pos:end="189:30">()</argument_list></call></expr>)</condition> <block pos:start="189:33" pos:end="197:9">{<block_content pos:start="191:13" pos:end="195:19">

            <expr_stmt pos:start="191:13" pos:end="193:69"><expr pos:start="191:13" pos:end="193:68"><call pos:start="191:13" pos:end="193:68"><name pos:start="191:13" pos:end="191:26">gdb_do_syscall</name><argument_list pos:start="191:27" pos:end="193:68">(<argument pos:start="191:28" pos:end="191:39"><expr pos:start="191:28" pos:end="191:39"><name pos:start="191:28" pos:end="191:39">m68k_semi_cb</name></expr></argument>, <argument pos:start="191:42" pos:end="191:55"><expr pos:start="191:42" pos:end="191:55"><literal type="string" pos:start="191:42" pos:end="191:55">"rename,%s,%s"</literal></expr></argument>,

                           <argument pos:start="193:28" pos:end="193:33"><expr pos:start="193:28" pos:end="193:33"><call pos:start="193:28" pos:end="193:33"><name pos:start="193:28" pos:end="193:30">ARG</name><argument_list pos:start="193:31" pos:end="193:33">(<argument pos:start="193:32" pos:end="193:32"><expr pos:start="193:32" pos:end="193:32"><literal type="number" pos:start="193:32" pos:end="193:32">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="193:36" pos:end="193:46"><expr pos:start="193:36" pos:end="193:46"><operator pos:start="193:36" pos:end="193:36">(</operator><name pos:start="193:37" pos:end="193:39">int</name><operator pos:start="193:40" pos:end="193:40">)</operator><call pos:start="193:41" pos:end="193:46"><name pos:start="193:41" pos:end="193:43">ARG</name><argument_list pos:start="193:44" pos:end="193:46">(<argument pos:start="193:45" pos:end="193:45"><expr pos:start="193:45" pos:end="193:45"><literal type="number" pos:start="193:45" pos:end="193:45">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="193:49" pos:end="193:54"><expr pos:start="193:49" pos:end="193:54"><call pos:start="193:49" pos:end="193:54"><name pos:start="193:49" pos:end="193:51">ARG</name><argument_list pos:start="193:52" pos:end="193:54">(<argument pos:start="193:53" pos:end="193:53"><expr pos:start="193:53" pos:end="193:53"><literal type="number" pos:start="193:53" pos:end="193:53">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="193:57" pos:end="193:67"><expr pos:start="193:57" pos:end="193:67"><operator pos:start="193:57" pos:end="193:57">(</operator><name pos:start="193:58" pos:end="193:60">int</name><operator pos:start="193:61" pos:end="193:61">)</operator><call pos:start="193:62" pos:end="193:67"><name pos:start="193:62" pos:end="193:64">ARG</name><argument_list pos:start="193:65" pos:end="193:67">(<argument pos:start="193:66" pos:end="193:66"><expr pos:start="193:66" pos:end="193:66"><literal type="number" pos:start="193:66" pos:end="193:66">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="195:13" pos:end="195:19">return;</return>

        </block_content>}</block></if> <else pos:start="197:11" pos:end="219:9">else <block pos:start="197:16" pos:end="219:9">{<block_content pos:start="199:13" pos:end="217:38">

            <expr_stmt pos:start="199:13" pos:end="199:41"><expr pos:start="199:13" pos:end="199:40"><name pos:start="199:13" pos:end="199:13">p</name> <operator pos:start="199:15" pos:end="199:15">=</operator> <call pos:start="199:17" pos:end="199:40"><name pos:start="199:17" pos:end="199:32">lock_user_string</name><argument_list pos:start="199:33" pos:end="199:40">(<argument pos:start="199:34" pos:end="199:39"><expr pos:start="199:34" pos:end="199:39"><call pos:start="199:34" pos:end="199:39"><name pos:start="199:34" pos:end="199:36">ARG</name><argument_list pos:start="199:37" pos:end="199:39">(<argument pos:start="199:38" pos:end="199:38"><expr pos:start="199:38" pos:end="199:38"><literal type="number" pos:start="199:38" pos:end="199:38">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="201:13" pos:end="201:41"><expr pos:start="201:13" pos:end="201:40"><name pos:start="201:13" pos:end="201:13">q</name> <operator pos:start="201:15" pos:end="201:15">=</operator> <call pos:start="201:17" pos:end="201:40"><name pos:start="201:17" pos:end="201:32">lock_user_string</name><argument_list pos:start="201:33" pos:end="201:40">(<argument pos:start="201:34" pos:end="201:39"><expr pos:start="201:34" pos:end="201:39"><call pos:start="201:34" pos:end="201:39"><name pos:start="201:34" pos:end="201:36">ARG</name><argument_list pos:start="201:37" pos:end="201:39">(<argument pos:start="201:38" pos:end="201:38"><expr pos:start="201:38" pos:end="201:38"><literal type="number" pos:start="201:38" pos:end="201:38">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="203:13" pos:end="213:13"><if pos:start="203:13" pos:end="209:13">if <condition pos:start="203:16" pos:end="203:25">(<expr pos:start="203:17" pos:end="203:24"><operator pos:start="203:17" pos:end="203:17">!</operator><name pos:start="203:18" pos:end="203:18">p</name> <operator pos:start="203:20" pos:end="203:21">||</operator> <operator pos:start="203:23" pos:end="203:23">!</operator><name pos:start="203:24" pos:end="203:24">q</name></expr>)</condition> <block pos:start="203:27" pos:end="209:13">{<block_content pos:start="207:17" pos:end="207:28">

                <comment type="block" pos:start="205:17" pos:end="205:47">/* FIXME - check error code? */</comment>

                <expr_stmt pos:start="207:17" pos:end="207:28"><expr pos:start="207:17" pos:end="207:27"><name pos:start="207:17" pos:end="207:22">result</name> <operator pos:start="207:24" pos:end="207:24">=</operator> <operator pos:start="207:26" pos:end="207:26">-</operator><literal type="number" pos:start="207:27" pos:end="207:27">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="209:15" pos:end="213:13">else <block pos:start="209:20" pos:end="213:13">{<block_content pos:start="211:17" pos:end="211:38">

                <expr_stmt pos:start="211:17" pos:end="211:38"><expr pos:start="211:17" pos:end="211:37"><name pos:start="211:17" pos:end="211:22">result</name> <operator pos:start="211:24" pos:end="211:24">=</operator> <call pos:start="211:26" pos:end="211:37"><name pos:start="211:26" pos:end="211:31">rename</name><argument_list pos:start="211:32" pos:end="211:37">(<argument pos:start="211:33" pos:end="211:33"><expr pos:start="211:33" pos:end="211:33"><name pos:start="211:33" pos:end="211:33">p</name></expr></argument>, <argument pos:start="211:36" pos:end="211:36"><expr pos:start="211:36" pos:end="211:36"><name pos:start="211:36" pos:end="211:36">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="215:13" pos:end="215:38"><expr pos:start="215:13" pos:end="215:37"><call pos:start="215:13" pos:end="215:37"><name pos:start="215:13" pos:end="215:23">unlock_user</name><argument_list pos:start="215:24" pos:end="215:37">(<argument pos:start="215:25" pos:end="215:25"><expr pos:start="215:25" pos:end="215:25"><name pos:start="215:25" pos:end="215:25">p</name></expr></argument>, <argument pos:start="215:28" pos:end="215:33"><expr pos:start="215:28" pos:end="215:33"><call pos:start="215:28" pos:end="215:33"><name pos:start="215:28" pos:end="215:30">ARG</name><argument_list pos:start="215:31" pos:end="215:33">(<argument pos:start="215:32" pos:end="215:32"><expr pos:start="215:32" pos:end="215:32"><literal type="number" pos:start="215:32" pos:end="215:32">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="215:36" pos:end="215:36"><expr pos:start="215:36" pos:end="215:36"><literal type="number" pos:start="215:36" pos:end="215:36">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="217:13" pos:end="217:38"><expr pos:start="217:13" pos:end="217:37"><call pos:start="217:13" pos:end="217:37"><name pos:start="217:13" pos:end="217:23">unlock_user</name><argument_list pos:start="217:24" pos:end="217:37">(<argument pos:start="217:25" pos:end="217:25"><expr pos:start="217:25" pos:end="217:25"><name pos:start="217:25" pos:end="217:25">q</name></expr></argument>, <argument pos:start="217:28" pos:end="217:33"><expr pos:start="217:28" pos:end="217:33"><call pos:start="217:28" pos:end="217:33"><name pos:start="217:28" pos:end="217:30">ARG</name><argument_list pos:start="217:31" pos:end="217:33">(<argument pos:start="217:32" pos:end="217:32"><expr pos:start="217:32" pos:end="217:32"><literal type="number" pos:start="217:32" pos:end="217:32">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="217:36" pos:end="217:36"><expr pos:start="217:36" pos:end="217:36"><literal type="number" pos:start="217:36" pos:end="217:36">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="221:9" pos:end="221:14">break;</break>

    <case pos:start="223:5" pos:end="223:23">case <expr pos:start="223:10" pos:end="223:22"><name pos:start="223:10" pos:end="223:22">HOSTED_UNLINK</name></expr>:</case>

        <if_stmt pos:start="225:9" pos:end="249:9"><if pos:start="225:9" pos:end="233:9">if <condition pos:start="225:12" pos:end="225:31">(<expr pos:start="225:13" pos:end="225:30"><call pos:start="225:13" pos:end="225:30"><name pos:start="225:13" pos:end="225:28">use_gdb_syscalls</name><argument_list pos:start="225:29" pos:end="225:30">()</argument_list></call></expr>)</condition> <block pos:start="225:33" pos:end="233:9">{<block_content pos:start="227:13" pos:end="231:19">

            <expr_stmt pos:start="227:13" pos:end="229:48"><expr pos:start="227:13" pos:end="229:47"><call pos:start="227:13" pos:end="229:47"><name pos:start="227:13" pos:end="227:26">gdb_do_syscall</name><argument_list pos:start="227:27" pos:end="229:47">(<argument pos:start="227:28" pos:end="227:39"><expr pos:start="227:28" pos:end="227:39"><name pos:start="227:28" pos:end="227:39">m68k_semi_cb</name></expr></argument>, <argument pos:start="227:42" pos:end="227:52"><expr pos:start="227:42" pos:end="227:52"><literal type="string" pos:start="227:42" pos:end="227:52">"unlink,%s"</literal></expr></argument>,

                           <argument pos:start="229:28" pos:end="229:33"><expr pos:start="229:28" pos:end="229:33"><call pos:start="229:28" pos:end="229:33"><name pos:start="229:28" pos:end="229:30">ARG</name><argument_list pos:start="229:31" pos:end="229:33">(<argument pos:start="229:32" pos:end="229:32"><expr pos:start="229:32" pos:end="229:32"><literal type="number" pos:start="229:32" pos:end="229:32">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="229:36" pos:end="229:46"><expr pos:start="229:36" pos:end="229:46"><operator pos:start="229:36" pos:end="229:36">(</operator><name pos:start="229:37" pos:end="229:39">int</name><operator pos:start="229:40" pos:end="229:40">)</operator><call pos:start="229:41" pos:end="229:46"><name pos:start="229:41" pos:end="229:43">ARG</name><argument_list pos:start="229:44" pos:end="229:46">(<argument pos:start="229:45" pos:end="229:45"><expr pos:start="229:45" pos:end="229:45"><literal type="number" pos:start="229:45" pos:end="229:45">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="231:13" pos:end="231:19">return;</return>

        </block_content>}</block></if> <else pos:start="233:11" pos:end="249:9">else <block pos:start="233:16" pos:end="249:9">{<block_content pos:start="235:13" pos:end="247:13">

            <if_stmt pos:start="235:13" pos:end="247:13"><if pos:start="235:13" pos:end="241:13">if <condition pos:start="235:16" pos:end="235:48">(<expr pos:start="235:17" pos:end="235:47"><operator pos:start="235:17" pos:end="235:17">!</operator><operator pos:start="235:18" pos:end="235:18">(</operator><name pos:start="235:19" pos:end="235:19">p</name> <operator pos:start="235:21" pos:end="235:21">=</operator> <call pos:start="235:23" pos:end="235:46"><name pos:start="235:23" pos:end="235:38">lock_user_string</name><argument_list pos:start="235:39" pos:end="235:46">(<argument pos:start="235:40" pos:end="235:45"><expr pos:start="235:40" pos:end="235:45"><call pos:start="235:40" pos:end="235:45"><name pos:start="235:40" pos:end="235:42">ARG</name><argument_list pos:start="235:43" pos:end="235:45">(<argument pos:start="235:44" pos:end="235:44"><expr pos:start="235:44" pos:end="235:44"><literal type="number" pos:start="235:44" pos:end="235:44">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator pos:start="235:47" pos:end="235:47">)</operator></expr>)</condition> <block pos:start="235:50" pos:end="241:13">{<block_content pos:start="239:17" pos:end="239:28">

                <comment type="block" pos:start="237:17" pos:end="237:47">/* FIXME - check error code? */</comment>

                <expr_stmt pos:start="239:17" pos:end="239:28"><expr pos:start="239:17" pos:end="239:27"><name pos:start="239:17" pos:end="239:22">result</name> <operator pos:start="239:24" pos:end="239:24">=</operator> <operator pos:start="239:26" pos:end="239:26">-</operator><literal type="number" pos:start="239:27" pos:end="239:27">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="241:15" pos:end="247:13">else <block pos:start="241:20" pos:end="247:13">{<block_content pos:start="243:17" pos:end="245:42">

                <expr_stmt pos:start="243:17" pos:end="243:35"><expr pos:start="243:17" pos:end="243:34"><name pos:start="243:17" pos:end="243:22">result</name> <operator pos:start="243:24" pos:end="243:24">=</operator> <call pos:start="243:26" pos:end="243:34"><name pos:start="243:26" pos:end="243:31">unlink</name><argument_list pos:start="243:32" pos:end="243:34">(<argument pos:start="243:33" pos:end="243:33"><expr pos:start="243:33" pos:end="243:33"><name pos:start="243:33" pos:end="243:33">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="245:17" pos:end="245:42"><expr pos:start="245:17" pos:end="245:41"><call pos:start="245:17" pos:end="245:41"><name pos:start="245:17" pos:end="245:27">unlock_user</name><argument_list pos:start="245:28" pos:end="245:41">(<argument pos:start="245:29" pos:end="245:29"><expr pos:start="245:29" pos:end="245:29"><name pos:start="245:29" pos:end="245:29">p</name></expr></argument>, <argument pos:start="245:32" pos:end="245:37"><expr pos:start="245:32" pos:end="245:37"><call pos:start="245:32" pos:end="245:37"><name pos:start="245:32" pos:end="245:34">ARG</name><argument_list pos:start="245:35" pos:end="245:37">(<argument pos:start="245:36" pos:end="245:36"><expr pos:start="245:36" pos:end="245:36"><literal type="number" pos:start="245:36" pos:end="245:36">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="245:40" pos:end="245:40"><expr pos:start="245:40" pos:end="245:40"><literal type="number" pos:start="245:40" pos:end="245:40">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="251:9" pos:end="251:14">break;</break>

    <case pos:start="253:5" pos:end="253:21">case <expr pos:start="253:10" pos:end="253:20"><name pos:start="253:10" pos:end="253:20">HOSTED_STAT</name></expr>:</case>

        <if_stmt pos:start="255:9" pos:end="287:9"><if pos:start="255:9" pos:end="263:9">if <condition pos:start="255:12" pos:end="255:31">(<expr pos:start="255:13" pos:end="255:30"><call pos:start="255:13" pos:end="255:30"><name pos:start="255:13" pos:end="255:28">use_gdb_syscalls</name><argument_list pos:start="255:29" pos:end="255:30">()</argument_list></call></expr>)</condition> <block pos:start="255:33" pos:end="263:9">{<block_content pos:start="257:13" pos:end="261:19">

            <expr_stmt pos:start="257:13" pos:end="259:56"><expr pos:start="257:13" pos:end="259:55"><call pos:start="257:13" pos:end="259:55"><name pos:start="257:13" pos:end="257:26">gdb_do_syscall</name><argument_list pos:start="257:27" pos:end="259:55">(<argument pos:start="257:28" pos:end="257:39"><expr pos:start="257:28" pos:end="257:39"><name pos:start="257:28" pos:end="257:39">m68k_semi_cb</name></expr></argument>, <argument pos:start="257:42" pos:end="257:53"><expr pos:start="257:42" pos:end="257:53"><literal type="string" pos:start="257:42" pos:end="257:53">"stat,%s,%x"</literal></expr></argument>,

                           <argument pos:start="259:28" pos:end="259:33"><expr pos:start="259:28" pos:end="259:33"><call pos:start="259:28" pos:end="259:33"><name pos:start="259:28" pos:end="259:30">ARG</name><argument_list pos:start="259:31" pos:end="259:33">(<argument pos:start="259:32" pos:end="259:32"><expr pos:start="259:32" pos:end="259:32"><literal type="number" pos:start="259:32" pos:end="259:32">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="259:36" pos:end="259:46"><expr pos:start="259:36" pos:end="259:46"><operator pos:start="259:36" pos:end="259:36">(</operator><name pos:start="259:37" pos:end="259:39">int</name><operator pos:start="259:40" pos:end="259:40">)</operator><call pos:start="259:41" pos:end="259:46"><name pos:start="259:41" pos:end="259:43">ARG</name><argument_list pos:start="259:44" pos:end="259:46">(<argument pos:start="259:45" pos:end="259:45"><expr pos:start="259:45" pos:end="259:45"><literal type="number" pos:start="259:45" pos:end="259:45">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="259:49" pos:end="259:54"><expr pos:start="259:49" pos:end="259:54"><call pos:start="259:49" pos:end="259:54"><name pos:start="259:49" pos:end="259:51">ARG</name><argument_list pos:start="259:52" pos:end="259:54">(<argument pos:start="259:53" pos:end="259:53"><expr pos:start="259:53" pos:end="259:53"><literal type="number" pos:start="259:53" pos:end="259:53">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="261:13" pos:end="261:19">return;</return>

        </block_content>}</block></if> <else pos:start="263:11" pos:end="287:9">else <block pos:start="263:16" pos:end="287:9">{<block_content pos:start="265:13" pos:end="285:13">

            <decl_stmt pos:start="265:13" pos:end="265:26"><decl pos:start="265:13" pos:end="265:25"><type pos:start="265:13" pos:end="265:23"><name pos:start="265:13" pos:end="265:23"><name pos:start="265:13" pos:end="265:18">struct</name> <name pos:start="265:20" pos:end="265:23">stat</name></name></type> <name pos:start="265:25" pos:end="265:25">s</name></decl>;</decl_stmt>

            <if_stmt pos:start="267:13" pos:end="279:13"><if pos:start="267:13" pos:end="273:13">if <condition pos:start="267:16" pos:end="267:48">(<expr pos:start="267:17" pos:end="267:47"><operator pos:start="267:17" pos:end="267:17">!</operator><operator pos:start="267:18" pos:end="267:18">(</operator><name pos:start="267:19" pos:end="267:19">p</name> <operator pos:start="267:21" pos:end="267:21">=</operator> <call pos:start="267:23" pos:end="267:46"><name pos:start="267:23" pos:end="267:38">lock_user_string</name><argument_list pos:start="267:39" pos:end="267:46">(<argument pos:start="267:40" pos:end="267:45"><expr pos:start="267:40" pos:end="267:45"><call pos:start="267:40" pos:end="267:45"><name pos:start="267:40" pos:end="267:42">ARG</name><argument_list pos:start="267:43" pos:end="267:45">(<argument pos:start="267:44" pos:end="267:44"><expr pos:start="267:44" pos:end="267:44"><literal type="number" pos:start="267:44" pos:end="267:44">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator pos:start="267:47" pos:end="267:47">)</operator></expr>)</condition> <block pos:start="267:50" pos:end="273:13">{<block_content pos:start="271:17" pos:end="271:28">

                <comment type="block" pos:start="269:17" pos:end="269:47">/* FIXME - check error code? */</comment>

                <expr_stmt pos:start="271:17" pos:end="271:28"><expr pos:start="271:17" pos:end="271:27"><name pos:start="271:17" pos:end="271:22">result</name> <operator pos:start="271:24" pos:end="271:24">=</operator> <operator pos:start="271:26" pos:end="271:26">-</operator><literal type="number" pos:start="271:27" pos:end="271:27">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="273:15" pos:end="279:13">else <block pos:start="273:20" pos:end="279:13">{<block_content pos:start="275:17" pos:end="277:42">

                <expr_stmt pos:start="275:17" pos:end="275:37"><expr pos:start="275:17" pos:end="275:36"><name pos:start="275:17" pos:end="275:22">result</name> <operator pos:start="275:24" pos:end="275:24">=</operator> <call pos:start="275:26" pos:end="275:36"><name pos:start="275:26" pos:end="275:29">stat</name><argument_list pos:start="275:30" pos:end="275:36">(<argument pos:start="275:31" pos:end="275:31"><expr pos:start="275:31" pos:end="275:31"><name pos:start="275:31" pos:end="275:31">p</name></expr></argument>, <argument pos:start="275:34" pos:end="275:35"><expr pos:start="275:34" pos:end="275:35"><operator pos:start="275:34" pos:end="275:34">&amp;</operator><name pos:start="275:35" pos:end="275:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="277:17" pos:end="277:42"><expr pos:start="277:17" pos:end="277:41"><call pos:start="277:17" pos:end="277:41"><name pos:start="277:17" pos:end="277:27">unlock_user</name><argument_list pos:start="277:28" pos:end="277:41">(<argument pos:start="277:29" pos:end="277:29"><expr pos:start="277:29" pos:end="277:29"><name pos:start="277:29" pos:end="277:29">p</name></expr></argument>, <argument pos:start="277:32" pos:end="277:37"><expr pos:start="277:32" pos:end="277:37"><call pos:start="277:32" pos:end="277:37"><name pos:start="277:32" pos:end="277:34">ARG</name><argument_list pos:start="277:35" pos:end="277:37">(<argument pos:start="277:36" pos:end="277:36"><expr pos:start="277:36" pos:end="277:36"><literal type="number" pos:start="277:36" pos:end="277:36">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="277:40" pos:end="277:40"><expr pos:start="277:40" pos:end="277:40"><literal type="number" pos:start="277:40" pos:end="277:40">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="281:13" pos:end="285:13"><if pos:start="281:13" pos:end="285:13">if <condition pos:start="281:16" pos:end="281:28">(<expr pos:start="281:17" pos:end="281:27"><name pos:start="281:17" pos:end="281:22">result</name> <operator pos:start="281:24" pos:end="281:25">==</operator> <literal type="number" pos:start="281:27" pos:end="281:27">0</literal></expr>)</condition> <block pos:start="281:30" pos:end="285:13">{<block_content pos:start="283:17" pos:end="283:48">

                <expr_stmt pos:start="283:17" pos:end="283:48"><expr pos:start="283:17" pos:end="283:47"><call pos:start="283:17" pos:end="283:47"><name pos:start="283:17" pos:end="283:30">translate_stat</name><argument_list pos:start="283:31" pos:end="283:47">(<argument pos:start="283:32" pos:end="283:34"><expr pos:start="283:32" pos:end="283:34"><name pos:start="283:32" pos:end="283:34">env</name></expr></argument>, <argument pos:start="283:37" pos:end="283:42"><expr pos:start="283:37" pos:end="283:42"><call pos:start="283:37" pos:end="283:42"><name pos:start="283:37" pos:end="283:39">ARG</name><argument_list pos:start="283:40" pos:end="283:42">(<argument pos:start="283:41" pos:end="283:41"><expr pos:start="283:41" pos:end="283:41"><literal type="number" pos:start="283:41" pos:end="283:41">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="283:45" pos:end="283:46"><expr pos:start="283:45" pos:end="283:46"><operator pos:start="283:45" pos:end="283:45">&amp;</operator><name pos:start="283:46" pos:end="283:46">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="289:9" pos:end="289:14">break;</break>

    <case pos:start="291:5" pos:end="291:22">case <expr pos:start="291:10" pos:end="291:21"><name pos:start="291:10" pos:end="291:21">HOSTED_FSTAT</name></expr>:</case>

        <if_stmt pos:start="293:9" pos:end="313:9"><if pos:start="293:9" pos:end="301:9">if <condition pos:start="293:12" pos:end="293:31">(<expr pos:start="293:13" pos:end="293:30"><call pos:start="293:13" pos:end="293:30"><name pos:start="293:13" pos:end="293:28">use_gdb_syscalls</name><argument_list pos:start="293:29" pos:end="293:30">()</argument_list></call></expr>)</condition> <block pos:start="293:33" pos:end="301:9">{<block_content pos:start="295:13" pos:end="299:19">

            <expr_stmt pos:start="295:13" pos:end="297:43"><expr pos:start="295:13" pos:end="297:42"><call pos:start="295:13" pos:end="297:42"><name pos:start="295:13" pos:end="295:26">gdb_do_syscall</name><argument_list pos:start="295:27" pos:end="297:42">(<argument pos:start="295:28" pos:end="295:39"><expr pos:start="295:28" pos:end="295:39"><name pos:start="295:28" pos:end="295:39">m68k_semi_cb</name></expr></argument>, <argument pos:start="295:42" pos:end="295:54"><expr pos:start="295:42" pos:end="295:54"><literal type="string" pos:start="295:42" pos:end="295:54">"fstat,%x,%x"</literal></expr></argument>,

                           <argument pos:start="297:28" pos:end="297:33"><expr pos:start="297:28" pos:end="297:33"><call pos:start="297:28" pos:end="297:33"><name pos:start="297:28" pos:end="297:30">ARG</name><argument_list pos:start="297:31" pos:end="297:33">(<argument pos:start="297:32" pos:end="297:32"><expr pos:start="297:32" pos:end="297:32"><literal type="number" pos:start="297:32" pos:end="297:32">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="297:36" pos:end="297:41"><expr pos:start="297:36" pos:end="297:41"><call pos:start="297:36" pos:end="297:41"><name pos:start="297:36" pos:end="297:38">ARG</name><argument_list pos:start="297:39" pos:end="297:41">(<argument pos:start="297:40" pos:end="297:40"><expr pos:start="297:40" pos:end="297:40"><literal type="number" pos:start="297:40" pos:end="297:40">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="299:13" pos:end="299:19">return;</return>

        </block_content>}</block></if> <else pos:start="301:11" pos:end="313:9">else <block pos:start="301:16" pos:end="313:9">{<block_content pos:start="303:13" pos:end="311:13">

            <decl_stmt pos:start="303:13" pos:end="303:26"><decl pos:start="303:13" pos:end="303:25"><type pos:start="303:13" pos:end="303:23"><name pos:start="303:13" pos:end="303:23"><name pos:start="303:13" pos:end="303:18">struct</name> <name pos:start="303:20" pos:end="303:23">stat</name></name></type> <name pos:start="303:25" pos:end="303:25">s</name></decl>;</decl_stmt>

            <expr_stmt pos:start="305:13" pos:end="305:39"><expr pos:start="305:13" pos:end="305:38"><name pos:start="305:13" pos:end="305:18">result</name> <operator pos:start="305:20" pos:end="305:20">=</operator> <call pos:start="305:22" pos:end="305:38"><name pos:start="305:22" pos:end="305:26">fstat</name><argument_list pos:start="305:27" pos:end="305:38">(<argument pos:start="305:28" pos:end="305:33"><expr pos:start="305:28" pos:end="305:33"><call pos:start="305:28" pos:end="305:33"><name pos:start="305:28" pos:end="305:30">ARG</name><argument_list pos:start="305:31" pos:end="305:33">(<argument pos:start="305:32" pos:end="305:32"><expr pos:start="305:32" pos:end="305:32"><literal type="number" pos:start="305:32" pos:end="305:32">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="305:36" pos:end="305:37"><expr pos:start="305:36" pos:end="305:37"><operator pos:start="305:36" pos:end="305:36">&amp;</operator><name pos:start="305:37" pos:end="305:37">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="307:13" pos:end="311:13"><if pos:start="307:13" pos:end="311:13">if <condition pos:start="307:16" pos:end="307:28">(<expr pos:start="307:17" pos:end="307:27"><name pos:start="307:17" pos:end="307:22">result</name> <operator pos:start="307:24" pos:end="307:25">==</operator> <literal type="number" pos:start="307:27" pos:end="307:27">0</literal></expr>)</condition> <block pos:start="307:30" pos:end="311:13">{<block_content pos:start="309:17" pos:end="309:48">

                <expr_stmt pos:start="309:17" pos:end="309:48"><expr pos:start="309:17" pos:end="309:47"><call pos:start="309:17" pos:end="309:47"><name pos:start="309:17" pos:end="309:30">translate_stat</name><argument_list pos:start="309:31" pos:end="309:47">(<argument pos:start="309:32" pos:end="309:34"><expr pos:start="309:32" pos:end="309:34"><name pos:start="309:32" pos:end="309:34">env</name></expr></argument>, <argument pos:start="309:37" pos:end="309:42"><expr pos:start="309:37" pos:end="309:42"><call pos:start="309:37" pos:end="309:42"><name pos:start="309:37" pos:end="309:39">ARG</name><argument_list pos:start="309:40" pos:end="309:42">(<argument pos:start="309:41" pos:end="309:41"><expr pos:start="309:41" pos:end="309:41"><literal type="number" pos:start="309:41" pos:end="309:41">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="309:45" pos:end="309:46"><expr pos:start="309:45" pos:end="309:46"><operator pos:start="309:45" pos:end="309:45">&amp;</operator><name pos:start="309:46" pos:end="309:46">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="315:9" pos:end="315:14">break;</break>

    <case pos:start="317:5" pos:end="317:29">case <expr pos:start="317:10" pos:end="317:28"><name pos:start="317:10" pos:end="317:28">HOSTED_GETTIMEOFDAY</name></expr>:</case>

        <if_stmt pos:start="319:9" pos:end="357:9"><if pos:start="319:9" pos:end="327:9">if <condition pos:start="319:12" pos:end="319:31">(<expr pos:start="319:13" pos:end="319:30"><call pos:start="319:13" pos:end="319:30"><name pos:start="319:13" pos:end="319:28">use_gdb_syscalls</name><argument_list pos:start="319:29" pos:end="319:30">()</argument_list></call></expr>)</condition> <block pos:start="319:33" pos:end="327:9">{<block_content pos:start="321:13" pos:end="325:19">

            <expr_stmt pos:start="321:13" pos:end="323:43"><expr pos:start="321:13" pos:end="323:42"><call pos:start="321:13" pos:end="323:42"><name pos:start="321:13" pos:end="321:26">gdb_do_syscall</name><argument_list pos:start="321:27" pos:end="323:42">(<argument pos:start="321:28" pos:end="321:39"><expr pos:start="321:28" pos:end="321:39"><name pos:start="321:28" pos:end="321:39">m68k_semi_cb</name></expr></argument>, <argument pos:start="321:42" pos:end="321:61"><expr pos:start="321:42" pos:end="321:61"><literal type="string" pos:start="321:42" pos:end="321:61">"gettimeofday,%x,%x"</literal></expr></argument>,

                           <argument pos:start="323:28" pos:end="323:33"><expr pos:start="323:28" pos:end="323:33"><call pos:start="323:28" pos:end="323:33"><name pos:start="323:28" pos:end="323:30">ARG</name><argument_list pos:start="323:31" pos:end="323:33">(<argument pos:start="323:32" pos:end="323:32"><expr pos:start="323:32" pos:end="323:32"><literal type="number" pos:start="323:32" pos:end="323:32">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="323:36" pos:end="323:41"><expr pos:start="323:36" pos:end="323:41"><call pos:start="323:36" pos:end="323:41"><name pos:start="323:36" pos:end="323:38">ARG</name><argument_list pos:start="323:39" pos:end="323:41">(<argument pos:start="323:40" pos:end="323:40"><expr pos:start="323:40" pos:end="323:40"><literal type="number" pos:start="323:40" pos:end="323:40">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="325:13" pos:end="325:19">return;</return>

        </block_content>}</block></if> <else pos:start="327:11" pos:end="357:9">else <block pos:start="327:16" pos:end="357:9">{<block_content pos:start="329:13" pos:end="355:13">

            <decl_stmt pos:start="329:13" pos:end="329:28"><decl pos:start="329:13" pos:end="329:27"><type pos:start="329:13" pos:end="329:24"><name pos:start="329:13" pos:end="329:24">qemu_timeval</name></type> <name pos:start="329:26" pos:end="329:27">tv</name></decl>;</decl_stmt>

            <decl_stmt pos:start="331:13" pos:end="331:34"><decl pos:start="331:13" pos:end="331:33"><type pos:start="331:13" pos:end="331:32"><name pos:start="331:13" pos:end="331:30"><name pos:start="331:13" pos:end="331:18">struct</name> <name pos:start="331:20" pos:end="331:30">gdb_timeval</name></name> <modifier pos:start="331:32" pos:end="331:32">*</modifier></type><name pos:start="331:33" pos:end="331:33">p</name></decl>;</decl_stmt>

            <expr_stmt pos:start="333:13" pos:end="333:44"><expr pos:start="333:13" pos:end="333:43"><name pos:start="333:13" pos:end="333:18">result</name> <operator pos:start="333:20" pos:end="333:20">=</operator> <call pos:start="333:22" pos:end="333:43"><name pos:start="333:22" pos:end="333:38">qemu_gettimeofday</name><argument_list pos:start="333:39" pos:end="333:43">(<argument pos:start="333:40" pos:end="333:42"><expr pos:start="333:40" pos:end="333:42"><operator pos:start="333:40" pos:end="333:40">&amp;</operator><name pos:start="333:41" pos:end="333:42">tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="335:13" pos:end="355:13"><if pos:start="335:13" pos:end="355:13">if <condition pos:start="335:16" pos:end="335:28">(<expr pos:start="335:17" pos:end="335:27"><name pos:start="335:17" pos:end="335:22">result</name> <operator pos:start="335:24" pos:end="335:25">!=</operator> <literal type="number" pos:start="335:27" pos:end="335:27">0</literal></expr>)</condition> <block pos:start="335:30" pos:end="355:13">{<block_content pos:start="337:17" pos:end="353:17">

                <if_stmt pos:start="337:17" pos:end="353:17"><if pos:start="337:17" pos:end="345:17">if <condition pos:start="337:20" pos:end="339:76">(<expr pos:start="337:21" pos:end="339:75"><operator pos:start="337:21" pos:end="337:21">!</operator><operator pos:start="337:22" pos:end="337:22">(</operator><name pos:start="337:23" pos:end="337:23">p</name> <operator pos:start="337:25" pos:end="337:25">=</operator> <call pos:start="337:27" pos:end="339:74"><name pos:start="337:27" pos:end="337:35">lock_user</name><argument_list pos:start="337:36" pos:end="339:74">(<argument pos:start="337:37" pos:end="337:48"><expr pos:start="337:37" pos:end="337:48"><name pos:start="337:37" pos:end="337:48">VERIFY_WRITE</name></expr></argument>,

                                    <argument pos:start="339:37" pos:end="339:42"><expr pos:start="339:37" pos:end="339:42"><call pos:start="339:37" pos:end="339:42"><name pos:start="339:37" pos:end="339:39">ARG</name><argument_list pos:start="339:40" pos:end="339:42">(<argument pos:start="339:41" pos:end="339:41"><expr pos:start="339:41" pos:end="339:41"><literal type="number" pos:start="339:41" pos:end="339:41">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="339:45" pos:end="339:70"><expr pos:start="339:45" pos:end="339:70"><sizeof pos:start="339:45" pos:end="339:70">sizeof<argument_list pos:start="339:51" pos:end="339:70">(<argument pos:start="339:52" pos:end="339:69"><expr pos:start="339:52" pos:end="339:69">struct <name pos:start="339:59" pos:end="339:69">gdb_timeval</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="339:73" pos:end="339:73"><expr pos:start="339:73" pos:end="339:73"><literal type="number" pos:start="339:73" pos:end="339:73">0</literal></expr></argument>)</argument_list></call><operator pos:start="339:75" pos:end="339:75">)</operator></expr>)</condition> <block pos:start="339:78" pos:end="345:17">{<block_content pos:start="343:21" pos:end="343:32">

                    <comment type="block" pos:start="341:21" pos:end="341:51">/* FIXME - check error code? */</comment>

                    <expr_stmt pos:start="343:21" pos:end="343:32"><expr pos:start="343:21" pos:end="343:31"><name pos:start="343:21" pos:end="343:26">result</name> <operator pos:start="343:28" pos:end="343:28">=</operator> <operator pos:start="343:30" pos:end="343:30">-</operator><literal type="number" pos:start="343:31" pos:end="343:31">1</literal></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="345:19" pos:end="353:17">else <block pos:start="345:24" pos:end="353:17">{<block_content pos:start="347:21" pos:end="351:71">

                    <expr_stmt pos:start="347:21" pos:end="347:55"><expr pos:start="347:21" pos:end="347:54"><name pos:start="347:21" pos:end="347:29"><name pos:start="347:21" pos:end="347:21">p</name><operator pos:start="347:22" pos:end="347:23">-&gt;</operator><name pos:start="347:24" pos:end="347:29">tv_sec</name></name> <operator pos:start="347:31" pos:end="347:31">=</operator> <call pos:start="347:33" pos:end="347:54"><name pos:start="347:33" pos:end="347:43">cpu_to_be32</name><argument_list pos:start="347:44" pos:end="347:54">(<argument pos:start="347:45" pos:end="347:53"><expr pos:start="347:45" pos:end="347:53"><name pos:start="347:45" pos:end="347:53"><name pos:start="347:45" pos:end="347:46">tv</name><operator pos:start="347:47" pos:end="347:47">.</operator><name pos:start="347:48" pos:end="347:53">tv_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="349:21" pos:end="349:57"><expr pos:start="349:21" pos:end="349:56"><name pos:start="349:21" pos:end="349:30"><name pos:start="349:21" pos:end="349:21">p</name><operator pos:start="349:22" pos:end="349:23">-&gt;</operator><name pos:start="349:24" pos:end="349:30">tv_usec</name></name> <operator pos:start="349:32" pos:end="349:32">=</operator> <call pos:start="349:34" pos:end="349:56"><name pos:start="349:34" pos:end="349:44">cpu_to_be64</name><argument_list pos:start="349:45" pos:end="349:56">(<argument pos:start="349:46" pos:end="349:55"><expr pos:start="349:46" pos:end="349:55"><name pos:start="349:46" pos:end="349:55"><name pos:start="349:46" pos:end="349:47">tv</name><operator pos:start="349:48" pos:end="349:48">.</operator><name pos:start="349:49" pos:end="349:55">tv_usec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="351:21" pos:end="351:71"><expr pos:start="351:21" pos:end="351:70"><call pos:start="351:21" pos:end="351:70"><name pos:start="351:21" pos:end="351:31">unlock_user</name><argument_list pos:start="351:32" pos:end="351:70">(<argument pos:start="351:33" pos:end="351:33"><expr pos:start="351:33" pos:end="351:33"><name pos:start="351:33" pos:end="351:33">p</name></expr></argument>, <argument pos:start="351:36" pos:end="351:41"><expr pos:start="351:36" pos:end="351:41"><call pos:start="351:36" pos:end="351:41"><name pos:start="351:36" pos:end="351:38">ARG</name><argument_list pos:start="351:39" pos:end="351:41">(<argument pos:start="351:40" pos:end="351:40"><expr pos:start="351:40" pos:end="351:40"><literal type="number" pos:start="351:40" pos:end="351:40">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="351:44" pos:end="351:69"><expr pos:start="351:44" pos:end="351:69"><sizeof pos:start="351:44" pos:end="351:69">sizeof<argument_list pos:start="351:50" pos:end="351:69">(<argument pos:start="351:51" pos:end="351:68"><expr pos:start="351:51" pos:end="351:68">struct <name pos:start="351:58" pos:end="351:68">gdb_timeval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="359:9" pos:end="359:14">break;</break>

    <case pos:start="361:5" pos:end="361:23">case <expr pos:start="361:10" pos:end="361:22"><name pos:start="361:10" pos:end="361:22">HOSTED_ISATTY</name></expr>:</case>

        <if_stmt pos:start="363:9" pos:end="373:9"><if pos:start="363:9" pos:end="369:9">if <condition pos:start="363:12" pos:end="363:31">(<expr pos:start="363:13" pos:end="363:30"><call pos:start="363:13" pos:end="363:30"><name pos:start="363:13" pos:end="363:28">use_gdb_syscalls</name><argument_list pos:start="363:29" pos:end="363:30">()</argument_list></call></expr>)</condition> <block pos:start="363:33" pos:end="369:9">{<block_content pos:start="365:13" pos:end="367:19">

            <expr_stmt pos:start="365:13" pos:end="365:62"><expr pos:start="365:13" pos:end="365:61"><call pos:start="365:13" pos:end="365:61"><name pos:start="365:13" pos:end="365:26">gdb_do_syscall</name><argument_list pos:start="365:27" pos:end="365:61">(<argument pos:start="365:28" pos:end="365:39"><expr pos:start="365:28" pos:end="365:39"><name pos:start="365:28" pos:end="365:39">m68k_semi_cb</name></expr></argument>, <argument pos:start="365:42" pos:end="365:52"><expr pos:start="365:42" pos:end="365:52"><literal type="string" pos:start="365:42" pos:end="365:52">"isatty,%x"</literal></expr></argument>, <argument pos:start="365:55" pos:end="365:60"><expr pos:start="365:55" pos:end="365:60"><call pos:start="365:55" pos:end="365:60"><name pos:start="365:55" pos:end="365:57">ARG</name><argument_list pos:start="365:58" pos:end="365:60">(<argument pos:start="365:59" pos:end="365:59"><expr pos:start="365:59" pos:end="365:59"><literal type="number" pos:start="365:59" pos:end="365:59">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="367:13" pos:end="367:19">return;</return>

        </block_content>}</block></if> <else pos:start="369:11" pos:end="373:9">else <block pos:start="369:16" pos:end="373:9">{<block_content pos:start="371:13" pos:end="371:36">

            <expr_stmt pos:start="371:13" pos:end="371:36"><expr pos:start="371:13" pos:end="371:35"><name pos:start="371:13" pos:end="371:18">result</name> <operator pos:start="371:20" pos:end="371:20">=</operator> <call pos:start="371:22" pos:end="371:35"><name pos:start="371:22" pos:end="371:27">isatty</name><argument_list pos:start="371:28" pos:end="371:35">(<argument pos:start="371:29" pos:end="371:34"><expr pos:start="371:29" pos:end="371:34"><call pos:start="371:29" pos:end="371:34"><name pos:start="371:29" pos:end="371:31">ARG</name><argument_list pos:start="371:32" pos:end="371:34">(<argument pos:start="371:33" pos:end="371:33"><expr pos:start="371:33" pos:end="371:33"><literal type="number" pos:start="371:33" pos:end="371:33">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="375:9" pos:end="375:14">break;</break>

    <case pos:start="377:5" pos:end="377:23">case <expr pos:start="377:10" pos:end="377:22"><name pos:start="377:10" pos:end="377:22">HOSTED_SYSTEM</name></expr>:</case>

        <if_stmt pos:start="379:9" pos:end="403:9"><if pos:start="379:9" pos:end="387:9">if <condition pos:start="379:12" pos:end="379:31">(<expr pos:start="379:13" pos:end="379:30"><call pos:start="379:13" pos:end="379:30"><name pos:start="379:13" pos:end="379:28">use_gdb_syscalls</name><argument_list pos:start="379:29" pos:end="379:30">()</argument_list></call></expr>)</condition> <block pos:start="379:33" pos:end="387:9">{<block_content pos:start="381:13" pos:end="385:19">

            <expr_stmt pos:start="381:13" pos:end="383:48"><expr pos:start="381:13" pos:end="383:47"><call pos:start="381:13" pos:end="383:47"><name pos:start="381:13" pos:end="381:26">gdb_do_syscall</name><argument_list pos:start="381:27" pos:end="383:47">(<argument pos:start="381:28" pos:end="381:39"><expr pos:start="381:28" pos:end="381:39"><name pos:start="381:28" pos:end="381:39">m68k_semi_cb</name></expr></argument>, <argument pos:start="381:42" pos:end="381:52"><expr pos:start="381:42" pos:end="381:52"><literal type="string" pos:start="381:42" pos:end="381:52">"system,%s"</literal></expr></argument>,

                           <argument pos:start="383:28" pos:end="383:33"><expr pos:start="383:28" pos:end="383:33"><call pos:start="383:28" pos:end="383:33"><name pos:start="383:28" pos:end="383:30">ARG</name><argument_list pos:start="383:31" pos:end="383:33">(<argument pos:start="383:32" pos:end="383:32"><expr pos:start="383:32" pos:end="383:32"><literal type="number" pos:start="383:32" pos:end="383:32">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="383:36" pos:end="383:46"><expr pos:start="383:36" pos:end="383:46"><operator pos:start="383:36" pos:end="383:36">(</operator><name pos:start="383:37" pos:end="383:39">int</name><operator pos:start="383:40" pos:end="383:40">)</operator><call pos:start="383:41" pos:end="383:46"><name pos:start="383:41" pos:end="383:43">ARG</name><argument_list pos:start="383:44" pos:end="383:46">(<argument pos:start="383:45" pos:end="383:45"><expr pos:start="383:45" pos:end="383:45"><literal type="number" pos:start="383:45" pos:end="383:45">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="385:13" pos:end="385:19">return;</return>

        </block_content>}</block></if> <else pos:start="387:11" pos:end="403:9">else <block pos:start="387:16" pos:end="403:9">{<block_content pos:start="389:13" pos:end="401:13">

            <if_stmt pos:start="389:13" pos:end="401:13"><if pos:start="389:13" pos:end="395:13">if <condition pos:start="389:16" pos:end="389:48">(<expr pos:start="389:17" pos:end="389:47"><operator pos:start="389:17" pos:end="389:17">!</operator><operator pos:start="389:18" pos:end="389:18">(</operator><name pos:start="389:19" pos:end="389:19">p</name> <operator pos:start="389:21" pos:end="389:21">=</operator> <call pos:start="389:23" pos:end="389:46"><name pos:start="389:23" pos:end="389:38">lock_user_string</name><argument_list pos:start="389:39" pos:end="389:46">(<argument pos:start="389:40" pos:end="389:45"><expr pos:start="389:40" pos:end="389:45"><call pos:start="389:40" pos:end="389:45"><name pos:start="389:40" pos:end="389:42">ARG</name><argument_list pos:start="389:43" pos:end="389:45">(<argument pos:start="389:44" pos:end="389:44"><expr pos:start="389:44" pos:end="389:44"><literal type="number" pos:start="389:44" pos:end="389:44">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator pos:start="389:47" pos:end="389:47">)</operator></expr>)</condition> <block pos:start="389:50" pos:end="395:13">{<block_content pos:start="393:17" pos:end="393:28">

                <comment type="block" pos:start="391:17" pos:end="391:47">/* FIXME - check error code? */</comment>

                <expr_stmt pos:start="393:17" pos:end="393:28"><expr pos:start="393:17" pos:end="393:27"><name pos:start="393:17" pos:end="393:22">result</name> <operator pos:start="393:24" pos:end="393:24">=</operator> <operator pos:start="393:26" pos:end="393:26">-</operator><literal type="number" pos:start="393:27" pos:end="393:27">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="395:15" pos:end="401:13">else <block pos:start="395:20" pos:end="401:13">{<block_content pos:start="397:17" pos:end="399:42">

                <expr_stmt pos:start="397:17" pos:end="397:35"><expr pos:start="397:17" pos:end="397:34"><name pos:start="397:17" pos:end="397:22">result</name> <operator pos:start="397:24" pos:end="397:24">=</operator> <call pos:start="397:26" pos:end="397:34"><name pos:start="397:26" pos:end="397:31">system</name><argument_list pos:start="397:32" pos:end="397:34">(<argument pos:start="397:33" pos:end="397:33"><expr pos:start="397:33" pos:end="397:33"><name pos:start="397:33" pos:end="397:33">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="399:17" pos:end="399:42"><expr pos:start="399:17" pos:end="399:41"><call pos:start="399:17" pos:end="399:41"><name pos:start="399:17" pos:end="399:27">unlock_user</name><argument_list pos:start="399:28" pos:end="399:41">(<argument pos:start="399:29" pos:end="399:29"><expr pos:start="399:29" pos:end="399:29"><name pos:start="399:29" pos:end="399:29">p</name></expr></argument>, <argument pos:start="399:32" pos:end="399:37"><expr pos:start="399:32" pos:end="399:37"><call pos:start="399:32" pos:end="399:37"><name pos:start="399:32" pos:end="399:34">ARG</name><argument_list pos:start="399:35" pos:end="399:37">(<argument pos:start="399:36" pos:end="399:36"><expr pos:start="399:36" pos:end="399:36"><literal type="number" pos:start="399:36" pos:end="399:36">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="399:40" pos:end="399:40"><expr pos:start="399:40" pos:end="399:40"><literal type="number" pos:start="399:40" pos:end="399:40">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="405:9" pos:end="405:14">break;</break>

    <case pos:start="407:5" pos:end="410:0">case <expr pos:start="407:10" pos:end="407:24"><name pos:start="407:10" pos:end="407:24">HOSTED_INIT_SIM</name></expr>:</case>

<cpp:if pos:start="409:1" pos:end="409:29">#<cpp:directive pos:start="409:2" pos:end="409:3">if</cpp:directive> <expr pos:start="409:5" pos:end="409:29"><call pos:start="409:5" pos:end="409:29"><name pos:start="409:5" pos:end="409:11">defined</name><argument_list pos:start="409:12" pos:end="409:29">(<argument pos:start="409:13" pos:end="409:28"><expr pos:start="409:13" pos:end="409:28"><name pos:start="409:13" pos:end="409:28">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <block pos:start="411:9" pos:end="460:0">{<block_content pos:start="413:9" pos:end="455:39">

        <decl_stmt pos:start="413:9" pos:end="413:36"><decl pos:start="413:9" pos:end="413:35"><type pos:start="413:9" pos:end="413:19"><name pos:start="413:9" pos:end="413:17">TaskState</name> <modifier pos:start="413:19" pos:end="413:19">*</modifier></type><name pos:start="413:20" pos:end="413:21">ts</name> <init pos:start="413:23" pos:end="413:35">= <expr pos:start="413:25" pos:end="413:35"><name pos:start="413:25" pos:end="413:35"><name pos:start="413:25" pos:end="413:27">env</name><operator pos:start="413:28" pos:end="413:29">-&gt;</operator><name pos:start="413:30" pos:end="413:35">opaque</name></name></expr></init></decl>;</decl_stmt>

        <comment type="block" pos:start="415:9" pos:end="415:44">/* Allocate the heap using sbrk.  */</comment>

        <if_stmt pos:start="417:9" pos:end="447:9"><if pos:start="417:9" pos:end="447:9">if <condition pos:start="417:12" pos:end="417:28">(<expr pos:start="417:13" pos:end="417:27"><operator pos:start="417:13" pos:end="417:13">!</operator><name pos:start="417:14" pos:end="417:27"><name pos:start="417:14" pos:end="417:15">ts</name><operator pos:start="417:16" pos:end="417:17">-&gt;</operator><name pos:start="417:18" pos:end="417:27">heap_limit</name></name></expr>)</condition> <block pos:start="417:30" pos:end="447:9">{<block_content pos:start="419:13" pos:end="445:41">

            <decl_stmt pos:start="419:13" pos:end="419:21"><decl pos:start="419:13" pos:end="419:20"><type pos:start="419:13" pos:end="419:16"><name pos:start="419:13" pos:end="419:16">long</name></type> <name pos:start="419:18" pos:end="419:20">ret</name></decl>;</decl_stmt>

            <decl_stmt pos:start="421:13" pos:end="421:26"><decl pos:start="421:13" pos:end="421:25"><type pos:start="421:13" pos:end="421:20"><name pos:start="421:13" pos:end="421:20">uint32_t</name></type> <name pos:start="421:22" pos:end="421:25">size</name></decl>;</decl_stmt>

            <decl_stmt pos:start="423:13" pos:end="423:26"><decl pos:start="423:13" pos:end="423:25"><type pos:start="423:13" pos:end="423:20"><name pos:start="423:13" pos:end="423:20">uint32_t</name></type> <name pos:start="423:22" pos:end="423:25">base</name></decl>;</decl_stmt>



            <expr_stmt pos:start="427:13" pos:end="427:29"><expr pos:start="427:13" pos:end="427:28"><name pos:start="427:13" pos:end="427:16">base</name> <operator pos:start="427:18" pos:end="427:18">=</operator> <call pos:start="427:20" pos:end="427:28"><name pos:start="427:20" pos:end="427:25">do_brk</name><argument_list pos:start="427:26" pos:end="427:28">(<argument pos:start="427:27" pos:end="427:27"><expr pos:start="427:27" pos:end="427:27"><literal type="number" pos:start="427:27" pos:end="427:27">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="429:13" pos:end="429:41"><expr pos:start="429:13" pos:end="429:40"><name pos:start="429:13" pos:end="429:16">size</name> <operator pos:start="429:18" pos:end="429:18">=</operator> <name pos:start="429:20" pos:end="429:40">SEMIHOSTING_HEAP_SIZE</name></expr>;</expr_stmt>

            <comment type="block" pos:start="431:13" pos:end="431:69">/* Try a big heap, and reduce the size if that fails.  */</comment>

            <for pos:start="433:13" pos:end="443:13">for <control pos:start="433:17" pos:end="433:20">(<init pos:start="433:18" pos:end="433:18">;</init><condition pos:start="433:19" pos:end="433:19">;</condition><incr/>)</control> <block pos:start="433:22" pos:end="443:13">{<block_content pos:start="435:17" pos:end="441:27">

                <expr_stmt pos:start="435:17" pos:end="435:42"><expr pos:start="435:17" pos:end="435:41"><name pos:start="435:17" pos:end="435:19">ret</name> <operator pos:start="435:21" pos:end="435:21">=</operator> <call pos:start="435:23" pos:end="435:41"><name pos:start="435:23" pos:end="435:28">do_brk</name><argument_list pos:start="435:29" pos:end="435:41">(<argument pos:start="435:30" pos:end="435:40"><expr pos:start="435:30" pos:end="435:40"><name pos:start="435:30" pos:end="435:33">base</name> <operator pos:start="435:35" pos:end="435:35">+</operator> <name pos:start="435:37" pos:end="435:40">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="437:17" pos:end="439:26"><if pos:start="437:17" pos:end="439:26">if <condition pos:start="437:20" pos:end="437:30">(<expr pos:start="437:21" pos:end="437:29"><name pos:start="437:21" pos:end="437:23">ret</name> <operator pos:start="437:25" pos:end="437:26">!=</operator> <operator pos:start="437:28" pos:end="437:28">-</operator><literal type="number" pos:start="437:29" pos:end="437:29">1</literal></expr>)</condition><block type="pseudo" pos:start="439:21" pos:end="439:26"><block_content pos:start="439:21" pos:end="439:26">

                    <break pos:start="439:21" pos:end="439:26">break;</break></block_content></block></if></if_stmt>

                <expr_stmt pos:start="441:17" pos:end="441:27"><expr pos:start="441:17" pos:end="441:26"><name pos:start="441:17" pos:end="441:20">size</name> <operator pos:start="441:22" pos:end="441:24">&gt;&gt;=</operator> <literal type="number" pos:start="441:26" pos:end="441:26">1</literal></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="445:13" pos:end="445:41"><expr pos:start="445:13" pos:end="445:40"><name pos:start="445:13" pos:end="445:26"><name pos:start="445:13" pos:end="445:14">ts</name><operator pos:start="445:15" pos:end="445:16">-&gt;</operator><name pos:start="445:17" pos:end="445:26">heap_limit</name></name> <operator pos:start="445:28" pos:end="445:28">=</operator> <name pos:start="445:30" pos:end="445:33">base</name> <operator pos:start="445:35" pos:end="445:35">+</operator> <name pos:start="445:37" pos:end="445:40">size</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="449:9" pos:end="451:44">/* This call may happen before we have writable memory, so return

           values directly in registers.  */</comment>

        <expr_stmt pos:start="453:9" pos:end="453:39"><expr pos:start="453:9" pos:end="453:38"><name pos:start="453:9" pos:end="453:21"><name pos:start="453:9" pos:end="453:11">env</name><operator pos:start="453:12" pos:end="453:13">-&gt;</operator><name pos:start="453:14" pos:end="453:18">dregs</name><index pos:start="453:19" pos:end="453:21">[<expr pos:start="453:20" pos:end="453:20"><literal type="number" pos:start="453:20" pos:end="453:20">1</literal></expr>]</index></name> <operator pos:start="453:23" pos:end="453:23">=</operator> <name pos:start="453:25" pos:end="453:38"><name pos:start="453:25" pos:end="453:26">ts</name><operator pos:start="453:27" pos:end="453:28">-&gt;</operator><name pos:start="453:29" pos:end="453:38">heap_limit</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="455:9" pos:end="455:39"><expr pos:start="455:9" pos:end="455:38"><name pos:start="455:9" pos:end="455:21"><name pos:start="455:9" pos:end="455:11">env</name><operator pos:start="455:12" pos:end="455:13">-&gt;</operator><name pos:start="455:14" pos:end="455:18">aregs</name><index pos:start="455:19" pos:end="455:21">[<expr pos:start="455:20" pos:end="455:20"><literal type="number" pos:start="455:20" pos:end="455:20">7</literal></expr>]</index></name> <operator pos:start="455:23" pos:end="455:23">=</operator> <name pos:start="455:25" pos:end="455:38"><name pos:start="455:25" pos:end="455:26">ts</name><operator pos:start="455:27" pos:end="455:28">-&gt;</operator><name pos:start="455:29" pos:end="455:38">stack_base</name></name></expr>;</expr_stmt>

        </block_content>}</block>

<cpp:else pos:start="459:1" pos:end="459:5">#<cpp:directive pos:start="459:2" pos:end="459:5">else</cpp:directive></cpp:else>

        <comment type="block" pos:start="461:9" pos:end="463:28">/* FIXME: This is wrong for boards where RAM does not start at

           address zero.  */</comment>

        <expr_stmt pos:start="465:9" pos:end="465:33"><expr pos:start="465:9" pos:end="465:32"><name pos:start="465:9" pos:end="465:21"><name pos:start="465:9" pos:end="465:11">env</name><operator pos:start="465:12" pos:end="465:13">-&gt;</operator><name pos:start="465:14" pos:end="465:18">dregs</name><index pos:start="465:19" pos:end="465:21">[<expr pos:start="465:20" pos:end="465:20"><literal type="number" pos:start="465:20" pos:end="465:20">1</literal></expr>]</index></name> <operator pos:start="465:23" pos:end="465:23">=</operator> <name pos:start="465:25" pos:end="465:32">ram_size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="467:9" pos:end="470:0"><expr pos:start="467:9" pos:end="467:32"><name pos:start="467:9" pos:end="467:21"><name pos:start="467:9" pos:end="467:11">env</name><operator pos:start="467:12" pos:end="467:13">-&gt;</operator><name pos:start="467:14" pos:end="467:18">aregs</name><index pos:start="467:19" pos:end="467:21">[<expr pos:start="467:20" pos:end="467:20"><literal type="number" pos:start="467:20" pos:end="467:20">7</literal></expr>]</index></name> <operator pos:start="467:23" pos:end="467:23">=</operator> <name pos:start="467:25" pos:end="467:32">ram_size</name></expr>;</expr_stmt>

<cpp:endif pos:start="469:1" pos:end="469:6">#<cpp:directive pos:start="469:2" pos:end="469:6">endif</cpp:directive></cpp:endif>

        <return pos:start="471:9" pos:end="471:15">return;</return>

    <default pos:start="473:5" pos:end="473:12">default:</default>

        <expr_stmt pos:start="475:9" pos:end="475:67"><expr pos:start="475:9" pos:end="475:66"><call pos:start="475:9" pos:end="475:66"><name pos:start="475:9" pos:end="475:17">cpu_abort</name><argument_list pos:start="475:18" pos:end="475:66">(<argument pos:start="475:19" pos:end="475:21"><expr pos:start="475:19" pos:end="475:21"><name pos:start="475:19" pos:end="475:21">env</name></expr></argument>, <argument pos:start="475:24" pos:end="475:61"><expr pos:start="475:24" pos:end="475:61"><literal type="string" pos:start="475:24" pos:end="475:61">"Unsupported semihosting syscall %d\n"</literal></expr></argument>, <argument pos:start="475:64" pos:end="475:65"><expr pos:start="475:64" pos:end="475:65"><name pos:start="475:64" pos:end="475:65">nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="477:9" pos:end="477:19"><expr pos:start="477:9" pos:end="477:18"><name pos:start="477:9" pos:end="477:14">result</name> <operator pos:start="477:16" pos:end="477:16">=</operator> <literal type="number" pos:start="477:18" pos:end="477:18">0</literal></expr>;</expr_stmt>

    </block_content>}</block></switch>

    <comment type="block" pos:start="481:5" pos:end="481:43">/* FIXME - handle put_user() failure */</comment>

    <expr_stmt pos:start="483:5" pos:end="483:31"><expr pos:start="483:5" pos:end="483:30"><call pos:start="483:5" pos:end="483:30"><name pos:start="483:5" pos:end="483:16">put_user_u32</name><argument_list pos:start="483:17" pos:end="483:30">(<argument pos:start="483:18" pos:end="483:23"><expr pos:start="483:18" pos:end="483:23"><name pos:start="483:18" pos:end="483:23">result</name></expr></argument>, <argument pos:start="483:26" pos:end="483:29"><expr pos:start="483:26" pos:end="483:29"><name pos:start="483:26" pos:end="483:29">args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="485:5" pos:end="485:34"><expr pos:start="485:5" pos:end="485:33"><call pos:start="485:5" pos:end="485:33"><name pos:start="485:5" pos:end="485:16">put_user_u32</name><argument_list pos:start="485:17" pos:end="485:33">(<argument pos:start="485:18" pos:end="485:22"><expr pos:start="485:18" pos:end="485:22"><name pos:start="485:18" pos:end="485:22">errno</name></expr></argument>, <argument pos:start="485:25" pos:end="485:32"><expr pos:start="485:25" pos:end="485:32"><name pos:start="485:25" pos:end="485:28">args</name> <operator pos:start="485:30" pos:end="485:30">+</operator> <literal type="number" pos:start="485:32" pos:end="485:32">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
